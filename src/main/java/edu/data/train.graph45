class C{  @Override public IndicesOptions indicesOptions(){  return indicesOptions;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:07.496 -0500",hash_original_method="0495E4BE554B279F8C8552A3E8BBAE9B",hash_generated_method="CB63B3B77AD88F3F08287FFBADF6C86B") public char current(){  if (offset == end) {    return DONE;  }  return string.charAt(offset);}  }
class C{  public boolean canCreateFolder(AcsAccessObject acs,ArchiveObject arch,String entidad) throws Exception {  boolean can=false;  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession(entidad));    can=FolderMdoFdr.canCreateFolder(dbConn,acs.getAccessToken(),arch.getArchiveToken());  } catch (  Exception e) {    throw e;  } finally {    dbConn.close();  }  return can;}  }
class C{  public void push(){  for (int i=cursor; i < size; i++) {    if (buffer[i] != null) {      target.publish(buffer[i]);    }    buffer[i]=null;  }  for (int i=0; i < cursor; i++) {    if (buffer[i] != null) {      target.publish(buffer[i]);    }    buffer[i]=null;  }  cursor=0;}  }
class C{  private static boolean inputOperandsAreLiteralRegister(final ReilInstruction instruction){  final OperandType firstOperandType=instruction.getFirstOperand().getType();  final OperandType secondOperandType=instruction.getSecondOperand().getType();  return (firstOperandType == OperandType.INTEGER_LITERAL) && (secondOperandType == OperandType.REGISTER);}  }
class C{  public void verifyPunctuationLeftAssociation(Token left,Token punc,String puncStr){  Location puncLocation=ListenerUtil.getTokenLocation(punc);  if (checkIfInline(left,punc) || checkLeftSpaces(left,punc,0)) {    printer.error(rule,puncStr + Messages.AT_COLUMN + puncLocation.column+ " "+ Messages.NO_SPACE_BEFORE,puncLocation);  }}  }
class C{  public void skippedEntity(String name) throws SAXException {}  }
class C{  public T next() throws IOException {  if (firstRead) {    int firstChar=reader.read();    if (firstChar == -1) {      return null;    } else {      reader.unread(firstChar);      firstRead=false;    }  }  try {    if (streamParser.hasNext()) {      return GSON.fromJson(streamParser.next(),messageClass);    }  } catch (  JsonIOException e) {    throw new IOException(e);  }catch (  JsonParseException ignore) {  }  return null;}  }
class C{  private void writeLine(char[] chars,int start,int len) throws IOException {  if (beginningOfLine && len > 0) {    writeIndent();    beginningOfLine=false;  }  writer.write(chars,start,len);}  }
class C{  protected void sequence_AnnotatedN4MemberDeclaration_AsyncNoTrailingLineBreak_BogusTypeRefFragment_MethodParamsReturnAndBody_N4MethodDeclaration_StrictFormalParameters_TypeVariables(ISerializationContext context,N4MethodDeclaration semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public boolean isAccessibleSelected(int r,int c){  return false;}  }
class C{  public void testSimpleEar() throws Exception {  final URL url=new URL("http://localhost:" + System.getProperty("http.port") + "/simpleweb");  final String expected="Sample page for testing";  PingUtils.assertPingTrue(url.getPath() + " not started",expected,url,logger);}  }
class C{  public static FirewallRule jsonToFirewallRule(String fmJson){  FirewallRule rule=new FirewallRule();  MappingJsonFactory f=new MappingJsonFactory();  JsonParser jp;  try {    try {      jp=f.createJsonParser(fmJson);    } catch (    JsonParseException e) {      throw new IOException(e);    }    jp.nextToken();    if (jp.getCurrentToken() != JsonToken.START_OBJECT) {      throw new IOException("Expected START_OBJECT");    }    while (jp.nextToken() != JsonToken.END_OBJECT) {      if (jp.getCurrentToken() != JsonToken.FIELD_NAME) {        throw new IOException("Expected FIELD_NAME");      }      String n=jp.getCurrentName();      jp.nextToken();      if (jp.getText().equals("")) {        continue;      }      if (n.equalsIgnoreCase("ruleid")) {        try {          rule.ruleid=Integer.parseInt(jp.getText());        } catch (        IllegalArgumentException e) {          log.error("Unable to parse rule ID: {}",jp.getText());        }      } else       if (n.equalsIgnoreCase("switchid")) {        rule.any_dpid=false;        try {          rule.dpid=DatapathId.of(jp.getText());        } catch (        NumberFormatException e) {          log.error("Unable to parse switch DPID: {}",jp.getText());        }      } else       if (n.equalsIgnoreCase("src-inport")) {        rule.any_in_port=false;        try {          rule.in_port=OFPort.of(Integer.parseInt(jp.getText()));        } catch (        NumberFormatException e) {          log.error("Unable to parse ingress port: {}",jp.getText());        }      } else       if (n.equalsIgnoreCase("src-mac")) {        if (!jp.getText().equalsIgnoreCase("ANY")) {          rule.any_dl_src=false;          try {            rule.dl_src=MacAddress.of(jp.getText());          } catch (          IllegalArgumentException e) {            log.error("Unable to parse source MAC: {}",jp.getText());          }        }      } else       if (n.equalsIgnoreCase("dst-mac")) {        if (!jp.getText().equalsIgnoreCase("ANY")) {          rule.any_dl_dst=false;          try {            rule.dl_dst=MacAddress.of(jp.getText());          } catch (          IllegalArgumentException e) {            log.error("Unable to parse destination MAC: {}",jp.getText());          }        }      } else       if (n.equalsIgnoreCase("dl-type")) {        if (jp.getText().equalsIgnoreCase("ARP")) {          rule.any_dl_type=false;          rule.dl_type=EthType.ARP;        } else         if (jp.getText().equalsIgnoreCase("IPv4")) {          rule.any_dl_type=false;          rule.dl_type=EthType.IPv4;        }      } else       if (n.equalsIgnoreCase("src-ip")) {        if (!jp.getText().equalsIgnoreCase("ANY")) {          rule.any_nw_src=false;          rule.any_dl_type=false;          rule.dl_type=EthType.IPv4;          try {            rule.nw_src_prefix_and_mask=IPv4AddressWithMask.of(jp.getText());          } catch (          IllegalArgumentException e) {            log.error("Unable to parse source IP: {}",jp.getText());          }        }      } else       if (n.equalsIgnoreCase("dst-ip")) {        if (!jp.getText().equalsIgnoreCase("ANY")) {          rule.any_nw_dst=false;          rule.any_dl_type=false;          rule.dl_type=EthType.IPv4;          try {            rule.nw_dst_prefix_and_mask=IPv4AddressWithMask.of(jp.getText());          } catch (          IllegalArgumentException e) {            log.error("Unable to parse destination IP: {}",jp.getText());          }        }      } else       if (n.equalsIgnoreCase("nw-proto")) {        if (jp.getText().equalsIgnoreCase("TCP")) {          rule.any_nw_proto=false;          rule.nw_proto=IpProtocol.TCP;          rule.any_dl_type=false;          rule.dl_type=EthType.IPv4;        } else         if (jp.getText().equalsIgnoreCase("UDP")) {          rule.any_nw_proto=false;          rule.nw_proto=IpProtocol.UDP;          rule.any_dl_type=false;          rule.dl_type=EthType.IPv4;        } else         if (jp.getText().equalsIgnoreCase("ICMP")) {          rule.any_nw_proto=false;          rule.nw_proto=IpProtocol.ICMP;          rule.any_dl_type=false;          rule.dl_type=EthType.IPv4;        }      } else       if (n.equalsIgnoreCase("tp-src")) {        rule.any_tp_src=false;        try {          rule.tp_src=TransportPort.of(Integer.parseInt(jp.getText()));        } catch (        IllegalArgumentException e) {          log.error("Unable to parse source transport port: {}",jp.getText());        }      } else       if (n.equalsIgnoreCase("tp-dst")) {        rule.any_tp_dst=false;        try {          rule.tp_dst=TransportPort.of(Integer.parseInt(jp.getText()));        } catch (        IllegalArgumentException e) {          log.error("Unable to parse destination transport port: {}",jp.getText());        }      } else       if (n.equalsIgnoreCase("priority")) {        try {          rule.priority=Integer.parseInt(jp.getText());        } catch (        IllegalArgumentException e) {          log.error("Unable to parse priority: {}",jp.getText());        }      } else       if (n.equalsIgnoreCase("action")) {        if (jp.getText().equalsIgnoreCase("allow") || jp.getText().equalsIgnoreCase("accept")) {          rule.action=FirewallRule.FirewallAction.ALLOW;        } else         if (jp.getText().equalsIgnoreCase("deny") || jp.getText().equalsIgnoreCase("drop")) {          rule.action=FirewallRule.FirewallAction.DROP;        }      }    }  } catch (  IOException e) {    log.error("Unable to parse JSON string: {}",e);  }  return rule;}  }
class C{  public static BufferedImage createCompatibleImage(BufferedImage image){  return createCompatibleImage(image,image.getWidth(),image.getHeight());}  }
class C{  public int cardinality(){  if (this.isNoView)   return this.elements.size(); else   return super.cardinality();}  }
class C{  protected void initScenes(){  CGSize s=CCDirector.sharedDirector().winSize();  inScene.setPosition(0,-(s.height - ADJUST_FACTOR));}  }
class C{  protected void processLineTerminator(int pos,int endPos){  if (scannerDebug)   System.out.println("processTerminator(" + pos + ","+ endPos+ ")=|"+ new String(reader.getRawCharacters(pos,endPos))+ "|");}  }
class C{  private ExprOrOpArgNode generateSubst(Context instanceeCtxt,TreeNode substTarget,TreeNode substValue,ModuleNode mn) throws AbortException {  SymbolNode targetSymbol=instanceeCtxt.getSymbol(substTarget.getUS());  if (targetSymbol == null || !(targetSymbol instanceof OpDeclNode)) {    errors.addError(substTarget.getLocation(),"Identifier '" + substTarget.getUS() + "' is not a legal"+ " target of a substitution. \nA legal target must be a declared"+ " CONSTANT or VARIABLE in the module being instantiated."+ " \n(Also, check for warnings about multiple declarations of"+ " this same identifier.)");    return nullOAN;  }  ExprOrOpArgNode returnObject;  if (targetSymbol.getArity() == 0) {    returnObject=generateExpression(substValue,mn);  } else {    returnObject=generateOpArg(targetSymbol,substValue,mn);    if (((OpArgNode)returnObject).getArity() != targetSymbol.getArity()) {      errors.addError(substValue.getLocation(),"An operator must be substituted for symbol '" + targetSymbol.getName() + "', and it must have arity "+ targetSymbol.getArity()+ ".");    }  }  return returnObject;}  }
class C{  public static List<Locale> localeToCandidateList(Locale locale){  List<Locale> localeList=new LinkedList<Locale>();  localeList.add(locale);  String localeString=locale.toString();  int pos=localeString.lastIndexOf("_",localeString.length());  while (pos != -1) {    localeString=localeString.substring(0,pos);    localeList.add(new Locale(localeString));    pos=localeString.lastIndexOf("_",localeString.length());  }  return localeList;}  }
class C{  public Swagger2MarkupConfigBuilder withPropertyOrdering(Comparator<String> propertyOrdering){  Validate.notNull(propertyOrdering,"%s must not be null","propertyOrdering");  config.propertyOrderBy=OrderBy.CUSTOM;  config.propertyOrdering=propertyOrdering;  return this;}  }
class C{  public void insert(){  log.info("");  int no=delete();  if (m_Value == null || m_Value.length() == 0) {    if (DisplayType.isLookup(m_DisplayType))     m_Value="-1"; else     if (DisplayType.isDate(m_DisplayType))     m_Value=" "; else {      ADialog.warn(m_WindowNo,this,"ValuePreferenceNotInserted");      return;    }  }  int Client_ID=cbClient.isSelected() ? m_AD_Client_ID : 0;  int Org_ID=cbOrg.isSelected() ? m_AD_Org_ID : 0;  int AD_Preference_ID=DB.getNextID(m_ctx,"AD_Preference",null);  StringBuffer sql=new StringBuffer("INSERT INTO AD_Preference (" + "AD_Preference_ID, AD_Client_ID, AD_Org_ID, IsActive, Created,CreatedBy,Updated,UpdatedBy," + "AD_Window_ID, AD_User_ID, Attribute, Value) VALUES (");  sql.append(AD_Preference_ID).append(",").append(Client_ID).append(",").append(Org_ID).append(", 'Y',SysDate,").append(m_AD_User_ID).append(",SysDate,").append(m_AD_User_ID).append(", ");  if (cbWindow.isSelected())   sql.append(m_AD_Window_ID).append(","); else   sql.append("NULL,");  if (cbUser.isSelected())   sql.append(m_AD_User_ID).append(","); else   sql.append("NULL,");  sql.append(DB.TO_STRING(m_Attribute)).append(",").append(DB.TO_STRING(m_Value)).append(")");  log.fine(sql.toString());  no=DB.executeUpdate(sql.toString(),null);  if (no == 1) {    Env.setContext(m_ctx,getContextKey(),m_Value);    ADialog.info(m_WindowNo,this,"ValuePreferenceInserted");  } else   ADialog.warn(m_WindowNo,this,"ValuePreferenceNotInserted");}  }
class C{  public long value(){  return _map._values[_index];}  }
class C{  public void reconnect(Throwable failure){  if (trace) {    ActiveMQRALogger.LOGGER.trace("reconnecting activation " + this);  }  if (failure != null) {    if (failure instanceof ActiveMQException && ((ActiveMQException)failure).getType() == ActiveMQExceptionType.QUEUE_DOES_NOT_EXIST) {      ActiveMQRALogger.LOGGER.awaitingTopicQueueCreation(getActivationSpec().getDestination());    } else     if (failure instanceof ActiveMQException && ((ActiveMQException)failure).getType() == ActiveMQExceptionType.NOT_CONNECTED) {      ActiveMQRALogger.LOGGER.awaitingJMSServerCreation();    } else {      ActiveMQRALogger.LOGGER.failureInActivation(failure,spec);    }  }  int reconnectCount=0;  int setupAttempts=spec.getSetupAttempts();  long setupInterval=spec.getSetupInterval();  if (inReconnect.getAndSet(true))   return;  try {    Throwable lastException=failure;    while (deliveryActive.get() && (setupAttempts == -1 || reconnectCount < setupAttempts)) {      teardown();      try {        Thread.sleep(setupInterval);      } catch (      InterruptedException e) {        ActiveMQRALogger.LOGGER.debug("Interrupted trying to reconnect " + spec,e);        break;      }      if (reconnectCount < 1) {        ActiveMQRALogger.LOGGER.attemptingReconnect(spec);      }      try {        setup();        ActiveMQRALogger.LOGGER.reconnected();        break;      } catch (      Throwable t) {        if (failure instanceof ActiveMQException && ((ActiveMQException)failure).getType() == ActiveMQExceptionType.QUEUE_DOES_NOT_EXIST) {          if (lastException == null || !(t instanceof ActiveMQNonExistentQueueException)) {            lastException=t;            ActiveMQRALogger.LOGGER.awaitingTopicQueueCreation(getActivationSpec().getDestination());          }        } else         if (failure instanceof ActiveMQException && ((ActiveMQException)failure).getType() == ActiveMQExceptionType.NOT_CONNECTED) {          if (lastException == null || !(t instanceof ActiveMQNotConnectedException)) {            lastException=t;            ActiveMQRALogger.LOGGER.awaitingJMSServerCreation();          }        } else {          ActiveMQRALogger.LOGGER.errorReconnecting(t,spec);        }      }      ++reconnectCount;    }  }  finally {    inReconnect.set(false);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:16.485 -0500",hash_original_method="00F8174F9E89D0C972FA6D3F19742382",hash_generated_method="D90463461B2A94FF94D13FDF69BB80C9") public int describeContents(){  return 0;}  }
class C{  public Bindings add(String property,JRadioButton[] cs,int defaultValue){  registerPropertyChangeListener(cs);  return add(new JRadioButtonBinding(property,cs,defaultValue));}  }
class C{  public TcpHarvester(int port,List<NetworkInterface> interfaces,boolean ssltcp) throws IOException {  super(port,interfaces);  this.ssltcp=ssltcp;}  }
class C{  public void andWith(List<QueryPredicate> predicates){  children.addAll(predicates);}  }
class C{  public boolean delete(VirtualFile file) throws IOException {  startOperation(file);  final SvnVcs vcs=getVCS(file);  if (vcs != null && SvnUtil.isAdminDirectory(file)) {    return true;  }  if (vcs == null)   return false;  final VcsShowConfirmationOption.Value value=vcs.getDeleteConfirmation().getValue();  if (VcsShowConfirmationOption.Value.DO_NOTHING_SILENTLY.equals(value))   return false;  final File ioFile=getIOFile(file);  if (!SvnUtil.isSvnVersioned(vcs,ioFile.getParentFile()) || SvnUtil.isWorkingCopyRoot(ioFile)) {    return false;  }  Status status=getFileStatus(vcs,ioFile);  if (status == null || status.is(StatusType.STATUS_UNVERSIONED,StatusType.STATUS_OBSTRUCTED,StatusType.STATUS_MISSING,StatusType.STATUS_EXTERNAL,StatusType.STATUS_IGNORED)) {    return false;  } else   if (status.is(StatusType.STATUS_DELETED)) {    if (isUndo(vcs)) {      moveToUndoStorage(file);    }    return true;  } else {    if (isAboveSourceOfCopyOrMove(vcs.getProject(),ioFile)) {      myDeletedFiles.putValue(vcs.getProject(),ioFile);      return true;    }    if (status.is(StatusType.STATUS_ADDED)) {      try {        createRevertAction(vcs,ioFile,false).execute();      } catch (      VcsException e) {      }    } else {      myDeletedFiles.putValue(vcs.getProject(),ioFile);      if (file.isDirectory() || isUndo(vcs))       return true;    }    return false;  }}  }
class C{  public long remove(double key){  long prev=0;  int index=index(key);  if (index >= 0) {    prev=_values[index];    removeAt(index);  }  return prev;}  }
class C{  public Double doubleValueOf(String name){  Metric m=getMetric(name);  if (m == null) {    return null;  } else {    return m.doubleValue();  }}  }
class C{  public ServiceNotPublishedException(String message){  super(message);}  }
class C{  public void releaseOutput() throws CacheException {  updateReleaseLocks();  isDeviceCopyModified=true;  if (!isAllocated)   throw new CacheException("Attempting to release an output before allocating it");}  }
class C{  public void remove(final Object element){  Set oldSelection=new HashSet(selection);  boolean rv=selection.remove(element);  if (rv) {    fireSelectionChanged(oldSelection,selection);  }  oldSelection=null;}  }
class C{  public PublicKey engineLookupAndResolvePublicKey(Element element,String BaseURI,StorageResolver storage) throws KeyResolverException {  return null;}  }
class C{  private static void addAnnotation(AnnotatedTypeMirror type,AnnotationMirror qual){  if (!type.isAnnotatedInHierarchy(qual)) {    type.addAnnotation(qual);  }  if (type.getKind() == TypeKind.INTERSECTION) {    List<AnnotatedDeclaredType> sups=((AnnotatedIntersectionType)type).directSuperTypesField();    if (sups != null) {      for (      AnnotatedTypeMirror sup : sups) {        if (!sup.isAnnotatedInHierarchy(qual)) {          sup.addAnnotation(qual);        }      }    }  }}  }
class C{  void updateCurrentTerm(int term,int fromMemberId) throws GondolaException {  if (term > currentTerm) {    int oldCterm=currentTerm;    currentTerm=term;    votedFor=-1;    save(currentTerm,votedFor);    if (!isFollower()) {      becomeFollower(-1);      logger.info("[{}-{}] Became a follower because term {} from {} is > currentTerm {}",gondola.getHostId(),memberId,term,fromMemberId,oldCterm);    }  }}  }
class C{  public boolean isStorageClosed(StorageData storageData){  for (  StorageData existing : existingStoragesSet) {    if (existing.getId().equals(storageData.getId())) {      return existing.isStorageClosed();    }  }  return false;}  }
class C{  public Editor edit() throws IOException {  return DiskLruCache.this.edit(key,sequenceNumber);}  }
class C{  @Override public void onAccessibilityEvent(AccessibilityEvent event){switch (event.getEventType()) {case AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED:    mLastNodeWasScrollable=false;  break;}}  }
class C{  @Override public String toString(){  return "ref(" + ref + ")cmd("+ cmd+ ")cnt("+ cnt+ ")skp("+ skip+ ")";}  }
class C{  public static void routeSchedule(TransitSchedule schedule,Network network,Map<String,Router> routers){  Counter counterRoute=new Counter("route # ");  log.info("Routing all routes with referenced links...");  if (routers == null) {    log.error("No routers given, routing cannot be completed!");    return;  }  for (  TransitLine transitLine : schedule.getTransitLines().values()) {    for (    TransitRoute transitRoute : transitLine.getRoutes().values()) {      if (!routers.containsKey(transitRoute.getTransportMode())) {        throw new RuntimeException("No router defined for " + transitRoute.getTransportMode());      }      if (transitRoute.getStops().size() > 0) {        Router modeDependentRouter=routers.get(transitRoute.getTransportMode());        counterRoute.incCounter();        List<TransitRouteStop> routeStops=transitRoute.getStops();        List<Id<Link>> linkIdSequence=new LinkedList<>();        linkIdSequence.add(routeStops.get(0).getStopFacility().getLinkId());        for (int i=0; i < routeStops.size() - 1; i++) {          if (routeStops.get(i).getStopFacility().getLinkId() == null) {            log.warn("stop facility " + routeStops.get(i).getStopFacility().getName() + " ("+ routeStops.get(i).getStopFacility().getId()+ ") not referenced!");            linkIdSequence=null;            break;          }          if (routeStops.get(i + 1).getStopFacility().getLinkId() == null) {            log.warn("stop facility " + routeStops.get(i - 1).getStopFacility().getName() + " ("+ routeStops.get(i + 1).getStopFacility().getId()+ " not referenced!");            linkIdSequence=null;            break;          }          Id<Link> currentLinkId=Id.createLinkId(routeStops.get(i).getStopFacility().getLinkId().toString());          Link currentLink=network.getLinks().get(currentLinkId);          Link nextLink=network.getLinks().get(routeStops.get(i + 1).getStopFacility().getLinkId());          LeastCostPathCalculator.Path leastCostPath=modeDependentRouter.calcLeastCostPath(currentLink.getToNode(),nextLink.getFromNode());          List<Id<Link>> path=null;          if (leastCostPath != null) {            path=PTMapperUtils.getLinkIdsFromPath(leastCostPath);          }          if (path != null)           linkIdSequence.addAll(path);          linkIdSequence.add(nextLink.getId());        }        if (linkIdSequence != null) {          transitRoute.setRoute(RouteUtils.createNetworkRoute(linkIdSequence,network));        }      } else {        log.warn("Route " + transitRoute.getId() + " on line "+ transitLine.getId()+ " has no stop sequence");      }    }  }  log.info("Routing all routes with referenced links... done");}  }
class C{  public AbstractConnector(){  owner=null;}  }
class C{  public void addRow(ArrayList<Object> l,int index){  m_data.rows.add(index,l);  m_data.rowsMeta.add(index,null);}  }
class C{  @Override public void addCardFromManualRecharge(Offer offer){  acceptedOffers.add(offer);  futureAcceptedOffers.onNext(offer);}  }
class C{  private static void printUnderlined(String stringToUnderline){  System.out.println(stringToUnderline);  for (int i=0; i < stringToUnderline.length(); ++i) {    System.out.print("-");  }  System.out.println("\n");}  }
class C{  public static void main(String... args){  ExecutionTracer.enable();  String[] classpath=Properties.CLASSPATH;  String[] sourcepath=Properties.SOURCEPATH;  JUnitTestReader testReader=new JUnitTestReader(classpath,sourcepath);  List<File> javaTestFiles=getAllJavaFiles(new File(args[0]));  Map<File,Map<String,TestCase>> allTests=new HashMap<File,Map<String,TestCase>>();  for (  File test : javaTestFiles) {    Map<String,TestCase> allTestsInFile=testReader.readTests(test.getAbsolutePath());    allTests.put(test,allTestsInFile);  }}  }
class C{  synchronized void removeConnection(int id){  try {    managementDbRemove.setInt(1,id);    managementDbRemove.execute();  } catch (  SQLException e) {    DbException.traceThrowable(e);  }}  }
class C{  public Swagger2MarkupConfigBuilder withOutputLanguage(Language language){  Validate.notNull(language,"%s must not be null","language");  config.outputLanguage=language;  return this;}  }
class C{  public WorkingSetConfigurationDialog(final WorkingSetManager manager){  super(UIUtils.getShell());  this.manager=manager;  setTitle("Configure Working Sets");  setMessage("Select and sort &working sets visible in Project Explorer:");  diffBuilder=new WorkingSetDiffBuilder(manager);  diff=new AtomicReference<>(WorkingSetDiffBuilder.EMPTY_DIFF);  allWorkingSets=newArrayList(manager.getAllWorkingSets());  setInitialSelections(this.manager.getWorkingSets());}  }
class C{  private void removeEnterFromTreeInputMap(){  InputMap treeInputMap=(InputMap)UIManager.get("Tree.focusInputMap");  if (treeInputMap != null) {    treeInputMap.remove(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0));  }}  }
class C{  public static void main(String[] args){  Log.printLine("Starting NetworkExample4...");  try {    int num_user=1;    Calendar calendar=Calendar.getInstance();    boolean trace_flag=false;    CloudSim.init(num_user,calendar,trace_flag);    Datacenter datacenter0=createDatacenter("Datacenter_0");    DatacenterBroker broker=createBroker();    int brokerId=broker.getId();    vmlist=new ArrayList<Vm>();    int vmid=0;    int mips=250;    long size=10000;    int ram=512;    long bw=1000;    int pesNumber=1;    String vmm="Xen";    Vm vm1=new Vm(vmid,brokerId,mips,pesNumber,ram,bw,size,vmm,new CloudletSchedulerTimeShared());    vmlist.add(vm1);    broker.submitVmList(vmlist);    cloudletList=new ArrayList<Cloudlet>();    int id=0;    long length=40000;    long fileSize=300;    long outputSize=300;    UtilizationModel utilizationModel=new UtilizationModelFull();    Cloudlet cloudlet1=new Cloudlet(id,length,pesNumber,fileSize,outputSize,utilizationModel,utilizationModel,utilizationModel);    cloudlet1.setUserId(brokerId);    cloudletList.add(cloudlet1);    broker.submitCloudletList(cloudletList);    NetworkTopology.addLink(datacenter0.getId(),broker.getId(),10.0,10);    CloudSim.startSimulation();    List<Cloudlet> newList=broker.getCloudletReceivedList();    CloudSim.stopSimulation();    printCloudletList(newList);    Log.printLine("NetworkExample4 finished!");  } catch (  Exception e) {    e.printStackTrace();    Log.printLine("The simulation has been terminated due to an unexpected error");  }}  }
class C{  public static boolean isCustomType(byte type){  return type >= CUSTOM_AMF_MASK;}  }
class C{  private static File insertDriveFile(Drive drive,String folderId,String trackName,java.io.File file,boolean canRetry) throws IOException {  try {    ParentReference parentReference=new ParentReference();    parentReference.setId(folderId);    ArrayList<ParentReference> parents=new ArrayList<ParentReference>();    parents.add(parentReference);    File newMetaData=new File();    newMetaData.setTitle(trackName + "." + KmzTrackExporter.KMZ_EXTENSION);    newMetaData.setMimeType(KMZ_MIME_TYPE);    newMetaData.setParents(parents);    FileContent fileContent=new FileContent(KMZ_MIME_TYPE,file);    return drive.files().insert(newMetaData,fileContent).execute();  } catch (  UserRecoverableAuthIOException e) {    throw e;  }catch (  IOException e) {    if (canRetry) {      return insertDriveFile(drive,folderId,trackName,file,false);    }    throw e;  }}  }
class C{  private int referenceKind(Symbol refSym){  if (refSym.isConstructor()) {    return ClassFile.REF_newInvokeSpecial;  } else {    if (refSym.isStatic()) {      return ClassFile.REF_invokeStatic;    } else     if ((refSym.flags() & PRIVATE) != 0) {      return ClassFile.REF_invokeSpecial;    } else     if (refSym.enclClass().isInterface()) {      return ClassFile.REF_invokeInterface;    } else {      return ClassFile.REF_invokeVirtual;    }  }}  }
class C{  public void balanceSegments(){  MAcctSchemaElement[] elements=m_acctSchema.getAcctSchemaElements();  for (int i=0; i < elements.length; i++) {    MAcctSchemaElement ase=elements[i];    if (ase.isBalanced())     balanceSegment(ase.getElementType());  }}  }
class C{  public ActiveInfoStorageCalculatorKernel() throws InstantiationException, IllegalAccessException, ClassNotFoundException {  super(MI_CALCULATOR_KERNEL);}  }
class C{  protected void updateRemoteHostName() throws MessagingException, UnknownHostException {  setRemoteHostName(computeRemoteHostName());}  }
class C{  public void convertRegexToList(List<String> operatorNames,AffinityRule rule){  List<String> operators=new LinkedList<String>();  Pattern p=Pattern.compile(rule.getOperatorRegex());  for (  String name : operatorNames) {    if (p.matcher(name).matches()) {      operators.add(name);    }  }  rule.setOperatorRegex(null);  if (operators.size() <= 1) {    LOG.warn("Regex should match at least 2 operators to add affinity rule. Ignoring rule");  } else {    rule.setOperatorsList(operators);  }}  }
class C{  public void mouseReleased(MouseEvent e){  if (CLogMgt.isLevelFinest())   log.finest("" + this + " - "+ e);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private boolean initDefaultSensor(){  if (proximitySensor != null) {    return true;  }  proximitySensor=sensorManager.getDefaultSensor(Sensor.TYPE_PROXIMITY);  if (proximitySensor == null) {    return false;  }  logProximitySensorInfo();  return true;}  }
class C{  public void cancel(String tag,int id){  INotificationManager service=getService();  String pkg=mContext.getPackageName();  if (localLOGV)   Log.v(TAG,pkg + ": cancel(" + id+ ")");  try {    service.cancelNotificationWithTag(pkg,tag,id,UserHandle.myUserId());  } catch (  RemoteException e) {  }}  }
class C{  public int saveActive(){  return end;}  }
class C{  public TableRow(Context context){  super(context);  initTableRow();}  }
class C{  public static void updateColumns(SetGetModel[] models,String[] columnNames,ResultSet rs) throws SQLException {  for (  SetGetModel model : models) {    if (CLogMgt.isLevelFinest())     s_log.finest("Model: " + model);    if (rs.next()) {      if (columnNames == null) {        columnNames=getColumnNames(rs);      }      for (      String columnName : columnNames) {        if (Util.isEmpty(columnName))         continue;        Object obj=null;        boolean ok=false;        obj=rs.getObject(columnName);        if (obj instanceof java.sql.Date) {          obj=new java.sql.Timestamp(((java.sql.Date)obj).getTime());        } else         if (obj instanceof BigDecimal && columnName.endsWith("_ID")) {          obj=((BigDecimal)obj).intValue();        }        ok=model.set_AttrValue(columnName,obj);        if (CLogMgt.isLevelFinest())         s_log.finest("columnName=" + columnName + ", value=["+ obj+ "]["+ (obj != null ? obj.getClass().getName() : "null")+ "], ok="+ ok);      }    } else {      s_log.finest("@NoResult@");      break;    }  }}  }
class C{  public void addMatching(final ConversationStates state,final Collection<String> triggerStrings,final ExpressionMatcher matcher,final ChatCondition condition,boolean secondary,final ConversationStates nextState,final String reply,final ChatAction action){  if (triggerStrings == null) {    throw new IllegalArgumentException("trigger list must not be null");  }  Collection<Expression> triggerExpressions=createUniqueTriggerExpressions(state,triggerStrings,matcher,condition,reply,action);  add(triggerExpressions,state,condition,secondary,nextState,reply,action);}  }
class C{  @Override protected void initListeners(){  this.findViewById(R.id.static_broadcast_receiver_bt).setOnClickListener(this);}  }
class C{  public void writeUI8(int value) throws IOException {  flushBits();  out.write(value);  bytesWritten++;}  }
class C{  public void resetCustom(){  mIsLegendCustom=false;}  }
class C{  private void checkSortMissingFacet(final String field,final String low,final String high){  assertU(adoc("id","0"));  assertU(adoc("id","1"));  assertU(adoc("id","2",field,low));  assertU(adoc("id","3",field,high));  assertU(commit());  assertQ(req("q","*:*","facet","true","facet.field",field,"facet.mincount","1","facet.missing","true"),"//lst[@name='facet_fields']/lst[@name='" + field + "']/int[@name='"+ low+ "'][.=1]","//lst[@name='facet_fields']/lst[@name='" + field + "']/int[@name='"+ high+ "'][.=1]","//lst[@name='facet_fields']/lst[@name='" + field + "']/int[.=2]");}  }
class C{  public Builder(Address address){  super(address);  formatted=address.formatted;  streetAddress=address.streetAddress;  locality=address.locality;  region=address.region;  postalCode=address.postalCode;  country=address.country;  type=address.type;}  }
class C{  private void unsortedContentsChanged(ListDataEvent e){  Collections.sort(sortedModel);  fireContentsChanged(ListDataEvent.CONTENTS_CHANGED,0,sortedModel.size() - 1);}  }
class C{  public Iterable<IncludeWebAmp> includes(){  return _includes;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:47:16.635 -0400",hash_original_method="41DE7E9291E165505FD6159A9B7D109B",hash_generated_method="56C69BBE50704687FC94FD42A384CBE0") public void unpair(BluetoothAdapter adapter,BluetoothDevice device){  int mask=PairReceiver.STATE_NONE_FLAG;  long start=-1;  String methodName=String.format("unpair(device=%s)",device);  if (!adapter.isEnabled()) {    fail(String.format("%s bluetooth not enabled",methodName));  }  PairReceiver receiver=getPairReceiver(device,0,null,mask);  int state=device.getBondState();switch (state) {case BluetoothDevice.BOND_NONE:    assertFalse(adapter.getBondedDevices().contains(device));  removeReceiver(receiver);return;case BluetoothDevice.BOND_BONDING:start=System.currentTimeMillis();assertTrue(device.removeBond());break;case BluetoothDevice.BOND_BONDED:assertTrue(adapter.getBondedDevices().contains(device));start=System.currentTimeMillis();assertTrue(device.removeBond());break;default :removeReceiver(receiver);fail(String.format("%s invalid state: state=%d",methodName,state));}long s=System.currentTimeMillis();while (System.currentTimeMillis() - s < PAIR_UNPAIR_TIMEOUT) {if (device.getBondState() == BluetoothDevice.BOND_NONE && (receiver.getFiredFlags() & mask) == mask) {assertFalse(adapter.getBondedDevices().contains(device));long finish=receiver.getCompletedTime();if (start != -1 && finish != -1) {writeOutput(String.format("%s completed in %d ms",methodName,(finish - start)));} else {writeOutput(String.format("%s completed",methodName));}removeReceiver(receiver);return;}}int firedFlags=receiver.getFiredFlags();removeReceiver(receiver);fail(String.format("%s timeout: state=%d (expected %d), flags=0x%x (expected 0x%x)",methodName,state,BluetoothDevice.BOND_BONDED,firedFlags,mask));}  }
class C{  private void checkUniqueName(String name,Name type,Node n) throws JasperException {  checkUniqueName(name,type,n,null);}  }
class C{  public boolean isRemoteMoviePaused() throws TransientNetworkDisconnectionException, NoConnectionException {  checkConnectivity();  return mState == MediaStatus.PLAYER_STATE_PAUSED;}  }
class C{  public int compare(Object o1,Object o2){  Object cmp1=o1;  if (o1 instanceof MSort)   cmp1=((MSort)o1).data;  if (cmp1 instanceof NamePair)   cmp1=((NamePair)cmp1).getName();  Object cmp2=o2;  if (o2 instanceof MSort)   cmp2=((MSort)o2).data;  if (cmp2 instanceof NamePair)   cmp2=((NamePair)cmp2).getName();  if (cmp1 == null) {    if (cmp2 == null)     return 0;    return -1 * m_multiplier;  }  if (cmp2 == null)   return 1 * m_multiplier;  if (cmp1 instanceof String && cmp2 instanceof String) {    return m_collator.compare(cmp1,cmp2) * m_multiplier;  } else   if (cmp1 instanceof Timestamp && cmp2 instanceof Timestamp) {    Timestamp t=(Timestamp)cmp1;    return t.compareTo((Timestamp)cmp2) * m_multiplier;  } else   if (cmp1 instanceof BigDecimal && cmp2 instanceof BigDecimal) {    BigDecimal d=(BigDecimal)cmp1;    return d.compareTo((BigDecimal)cmp2) * m_multiplier;  } else   if (cmp1 instanceof Integer && cmp2 instanceof Integer) {    Integer d=(Integer)cmp1;    return d.compareTo((Integer)cmp2) * m_multiplier;  } else   if (cmp1 instanceof Double && cmp2 instanceof Double) {    Double d=(Double)cmp1;    return d.compareTo((Double)cmp2) * m_multiplier;  }  String s=cmp1.toString();  return m_collator.compare(s,cmp2.toString()) * m_multiplier;}  }
class C{  public String globalInfo(){  return "Class for constructing a tree that considers K randomly " + " chosen attributes at each node. Performs no pruning. Also has" + " an option to allow estimation of class probabilities (or target mean "+ "in the regression case) based on a hold-out set (backfitting).";}  }
class C{  void submit(ProcessAndDisplayImageTask task){  initExecutorsIfNeed();  taskExecutorForCachedImages.execute(task);}  }
class C{  public String useEqualFrequencyTipText(){  return "If set to true, equal-frequency binning will be used instead of" + " equal-width binning.";}  }
class C{  public void update(float startX,float fromY,float toY,float size){  this.fromY=fromY;  this.size=size;  this.startX=startX;  this.centerY=-1;  float coef=0.4f + random.nextFloat() * 0.8f;  this.speed=(toY - fromY) / BUBBLE_ANIMATION_DURATION * coef;  this.virtualSpeed=2f / BUBBLE_ANIMATION_DURATION * coef;  getColor()[3]=1f;}  }
class C{  private void initializeSessionCache(FilterConfig config){  GemFireCacheImpl cache=(GemFireCacheImpl)CacheFactory.getAnyInstance();  if (cache == null) {    throw new IllegalStateException("No cache exists. Please configure " + "either a PeerToPeerCacheLifecycleListener or " + "ClientServerCacheLifecycleListener in the "+ "server.xml file.");  }  ResourceManager rm=cache.getResourceManager();  for (Enumeration<String> e=config.getInitParameterNames(); e.hasMoreElements(); ) {    String param=e.nextElement();    if (param.equalsIgnoreCase("criticalHeapPercentage")) {      float val=Float.parseFloat(config.getInitParameter(param));      rm.setCriticalHeapPercentage(val);    }    if (param.equalsIgnoreCase("evictionHeapPercentage")) {      float val=Float.parseFloat(config.getInitParameter(param));      rm.setEvictionHeapPercentage(val);    }    if (!param.startsWith(GEMFIRE_CACHE)) {      continue;    }    String gemfireWebParam=param.substring(GEMFIRE_CACHE.length());    LOG.info("Setting cache parameter: {} = {}",gemfireWebParam,config.getInitParameter(param));    properties.put(CacheProperty.valueOf(gemfireWebParam.toUpperCase()),config.getInitParameter(param));  }  sessionCache=cache.isClient() ? new ClientServerSessionCache(cache,properties) : new PeerToPeerSessionCache(cache,properties);  sessionCache.initialize();}  }
class C{  public Vertex parseAIML(URL url,boolean parseAsStateMachine,boolean createStates,boolean pin,boolean indexStatic,Vertex stateMachine,String encoding,Network network){  try {    String text=Utils.loadTextFile(Utils.openStream(url),encoding,MAX_FILE_SIZE);    return parseAIML(text,parseAsStateMachine,createStates,pin,indexStatic,stateMachine,network);  } catch (  IOException exception) {    throw new SelfParseException("Parsing error occurred",exception);  }}  }
class C{  protected final void init() throws NoGlyphException {  char[] codes=chars.toCharArray();  indices=new int[codes.length];  advances=new int[codes.length];  double maxAscent=0.0;  double maxDescent=0.0;  double scale=size * SWFConstants.TWIPS / 1024.0;  for (int i=0; i < codes.length; i++) {    int code=(int)codes[i];    int[] index=new int[1];    FontDefinition.Glyph glyph=getGlyph(code,index);    indices[i]=index[0];    if (glyph != null) {      Shape shape=glyph.getShape();      double[] outline=shape.getBoundingRectangle();      double x1=outline[0] * scale;      double y1=outline[1] * scale;      double x2=outline[2] * scale;      double y2=outline[3] * scale;      if (maxAscent < -y1) {        maxAscent=-y1;      }      if (maxDescent < y2) {        maxDescent=y2;      }      double advance=glyph.getAdvance() * scale;      if (advance == 0) {        advance=x2 - x1;      }      if (i < codes.length - 1) {        advance+=(fontDef.getKerningOffset(code,(int)codes[i + 1]) * scale);      }      totalAdvance+=advance;      advances[i]=(int)(advance * SWFConstants.TWIPS);      if (i == 0) {        leftMargin=-y1;      }      if (i == codes.length - 1) {        rightMargin=x2 - advance;      }    }  }  ascent=fontDef.getAscent() * scale;  if (ascent == 0.0) {    ascent=maxAscent;  }  descent=fontDef.getDescent() * scale;  if (descent == 0.0) {    descent=maxDescent;  }}  }
class C{  private void analyzeFile(File file) throws IOException {  JarFile jarFile=new JarFile(file);  Enumeration<JarEntry> jarEntries=jarFile.entries();  while (jarEntries.hasMoreElements()) {    JarEntry jarEntry=jarEntries.nextElement();    if (jarEntry.getName().endsWith(".class")) {      selfFirstClasses.add(jarEntry.getName().replaceAll("/","\\.").replace(".class",""));    }  }  if (null != jarFile) {    jarFile.close();  }}  }
class C{  boolean impliesIgnoreMask(SocketPermission that){  int i, j;  if ((that.mask & RESOLVE) != that.mask) {    if ((that.portrange[0] < this.portrange[0]) || (that.portrange[1] > this.portrange[1])) {      if (this.includesEphemerals() || that.includesEphemerals()) {        if (!inRange(this.portrange[0],this.portrange[1],that.portrange[0],that.portrange[1])) {          return false;        }      } else {        return false;      }    }  }  if (this.wildcard && "".equals(this.cname))   return true;  if (this.invalid || that.invalid) {    return compareHostnames(that);  }  try {    if (this.init_with_ip) {      if (that.wildcard)       return false;      if (that.init_with_ip) {        return (this.addresses[0].equals(that.addresses[0]));      } else {        if (that.addresses == null) {          that.getIP();        }        for (i=0; i < that.addresses.length; i++) {          if (this.addresses[0].equals(that.addresses[i]))           return true;        }      }      return false;    }    if (this.wildcard || that.wildcard) {      if (this.wildcard && that.wildcard)       return (that.cname.endsWith(this.cname));      if (that.wildcard)       return false;      if (that.cname == null) {        that.getCanonName();      }      return (that.cname.endsWith(this.cname));    }    if (this.addresses == null) {      this.getIP();    }    if (that.addresses == null) {      that.getIP();    }    if (!(that.init_with_ip && this.isUntrusted())) {      for (j=0; j < this.addresses.length; j++) {        for (i=0; i < that.addresses.length; i++) {          if (this.addresses[j].equals(that.addresses[i]))           return true;        }      }      if (this.cname == null) {        this.getCanonName();      }      if (that.cname == null) {        that.getCanonName();      }      return (this.cname.equalsIgnoreCase(that.cname));    }  } catch (  UnknownHostException uhe) {    return compareHostnames(that);  }  return false;}  }
class C{  private static boolean writesThirdOperand(final ReilInstruction reilInstruction,final boolean translatingReil){  return ReilHelpers.writesThirdOperand(reilInstruction.getMnemonicCode()) && (translatingReil || ReilHelpers.isNativeRegister(reilInstruction.getThirdOperand()));}  }
class C{  public NewCookie(String name,String value,String path,String domain,int version,String comment,int maxAge,boolean secure){  this(name,value,path,domain,version,comment,maxAge,secure,false);}  }
class C{  public DataProviderEntity createDataProviderEntity(){  return createDataProviderEntity("DataProviderTest" + AbstractDaoTest.getRandomSuffix());}  }
class C{  static void exportPrefs(Preferences prefs,OutputStream stream,boolean withSubTree) throws IOException, BackingStoreException {  indent=-1;  BufferedWriter out=new BufferedWriter(new OutputStreamWriter(stream,"UTF-8"));  out.write(HEADER);  out.newLine();  out.newLine();  out.write(DOCTYPE);  out.write(" '");  out.write(PREFS_DTD_NAME);  out.write("'>");  out.newLine();  out.newLine();  flushStartTag("preferences",new String[]{"EXTERNAL_XML_VERSION"},new String[]{String.valueOf(XML_VERSION)},out);  flushStartTag("root",new String[]{"type"},new String[]{prefs.isUserNode() ? "user" : "system"},out);  flushEmptyElement("map",out);  StringTokenizer ancestors=new StringTokenizer(prefs.absolutePath(),"/");  exportNode(ancestors,prefs,withSubTree,out);  flushEndTag("root",out);  flushEndTag("preferences",out);  out.flush();  out=null;}  }
class C{  private static void printMessage(String message){  Log.printLine(message);}  }
class C{  public static GenericPK create(Delegator delegator,ModelEntity modelEntity,Object singlePkValue){  GenericPK newPK=new GenericPK();  newPK.init(delegator,modelEntity,singlePkValue);  return newPK;}  }
class C{  private void validateRuleNames(List<Rule> rules) throws AdeUsageException {  HashSet<String> ruleNames=new HashSet<String>();  for (  Rule rule : rules) {    if (!ruleNames.add(rule.getName().toUpperCase())) {      throw new AdeUsageException("Attempted to add/update rule table with duplicate names");    }  }}  }
class C{  protected boolean isScrollable(){  return isScrollableX() || isScrollableY();}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == JSDocNode.class) {switch (baseOperationID) {case DomPackage.JS_DOC_NODE___TO_STRING:      return DomPackage.FULL_TYPE_REFERENCE___TO_STRING;default :    return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == SimpleTypeReference.class) {switch (baseOperationID) {case DomPackage.SIMPLE_TYPE_REFERENCE___TO_STRING:  return DomPackage.FULL_TYPE_REFERENCE___TO_STRING;default :return super.eDerivedOperationID(baseOperationID,baseClass);}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  protected AbstractArrayAdapter(){  this.items=(T[])OBJECTS;}  }
class C{  private void refreshConfigurables(String serverName){  ConfigurableController controller=remoteControllers.get(serverName);  if (controller.getModel().getSource().isConnected()) {    controller.getView().refreshConfigurables(serverName);  }}  }
class C{  public FormattedCharacterBuffer(String data,Font font,Color foreground,Color background){  this(1,data.length());  for (int i=0; i < numberOfLinesInBuffer * numberOfColumnsInBuffer; i++) {    charBuffer[i]=(data.charAt(i) == '\n') ? '_' : data.charAt(i);    perCharFonts[i]=font;    perCharForegroundColor[i]=foreground;    perCharBackgroundColor[i]=background;  }}  }
class C{  public synchronized void removeObserver(Observer o){  observers.removeElement(o);}  }
class C{  public static JavaFXBinder<Long> bind(WritableLongValue writableDoubleValue){  requireNonNull(writableDoubleValue,"writableDoubleValue");  return new DefaultJavaFXBinder(writableDoubleValue);}  }
class C{  public State state(){  if (selectionsIterator == null) {    return State.RESET;  } else   if (hasNext()) {    return State.ITERATE;  } else {    return State.COMPLETE;  }}  }
class C{  public SnapshotCreateResponse showSnapshot(String snapshotId) throws Exception {  _log.info("CinderApi - start showSnapshot");  String showSnapshotUri=endPoint.getBaseUri() + String.format(CinderConstants.URI_DELETE_SNAPSHOT,new Object[]{endPoint.getCinderTenantId(),snapshotId});  ClientResponse js_response=getClient().get(URI.create(showSnapshotUri));  String jsonString=js_response.getEntity(String.class);  if (js_response.getStatus() == ClientResponse.Status.NOT_FOUND.getStatusCode()) {    throw CinderException.exceptions.snapshotNotFound(snapshotId);  }  SnapshotCreateResponse snapshotDetails=new Gson().fromJson(SecurityUtils.sanitizeJsonString(jsonString),SnapshotCreateResponse.class);  _log.info("CinderApi - end showSnapshot");  return snapshotDetails;}  }
class C{  public BoundsCheckedFunction(MultivariateFunction func){  this(func,1000000);}  }
class C{  @TargetApi(Build.VERSION_CODES.M) public static void requestMultiplePermissions(Activity activity,String[] permissionsList,int requestCode){  try {    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {      List<String> permissions=new ArrayList<>();      for (      String permission : permissionsList) {        if (activity.checkSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) {          permissions.add(permission);        }      }      if (!permissions.isEmpty()) {        activity.requestPermissions(permissions.toArray(new String[permissions.size()]),requestCode);      }    }  } catch (  Exception e) {    logThis(TAG,"requestMultiplePermissions Exception",e);  }}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public void writeFloatArray(float[] array,boolean append){  if (file.exists()) {    System.out.println("Warning : the file " + file.getName() + " already exists !");  }  FileOutputStream fos=null;  try {    fos=new FileOutputStream(file,append);  } catch (  FileNotFoundException ex) {    throw new IllegalArgumentException(ex.toString());  }  BufferedOutputStream bos=new BufferedOutputStream(fos);  BinaryOutputStream bs=new BinaryOutputStream(bos,bigEndian);  bs.writeFloatArray(array,append);}  }
class C{  public SubscriptionStateExceptionBean(ApplicationExceptionBean sup,Reason reason,String member){  super(sup);  setReason(reason);  setMember(member);}  }
class C{  public JFXDecorator(Stage stage,Node node,boolean fullScreen,boolean max,boolean min){  super();  primaryStage=stage;  primaryStage.initStyle(StageStyle.UNDECORATED);  setPickOnBounds(false);  this.getStyleClass().add("jfx-decorator");  SVGGlyph full=new SVGGlyph(0,"FULLSCREEN","M598 214h212v212h-84v-128h-128v-84zM726 726v-128h84v212h-212v-84h128zM214 426v-212h212v84h-128v128h-84zM298 598v128h128v84h-212v-212h84z",Color.WHITE);  full.setSize(16,16);  SVGGlyph minus=new SVGGlyph(0,"MINUS","M804.571 420.571v109.714q0 22.857-16 38.857t-38.857 16h-694.857q-22.857 0-38.857-16t-16-38.857v-109.714q0-22.857 16-38.857t38.857-16h694.857q22.857 0 38.857 16t16 38.857z",Color.WHITE);  minus.setSize(12,2);  minus.setTranslateY(4);  SVGGlyph resizeMax=new SVGGlyph(0,"RESIZE_MAX","M726 810v-596h-428v596h428zM726 44q34 0 59 25t25 59v768q0 34-25 60t-59 26h-428q-34 0-59-26t-25-60v-768q0-34 25-60t59-26z",Color.WHITE);  resizeMax.setSize(12,12);  SVGGlyph resizeMin=new SVGGlyph(0,"RESIZE_MIN","M80.842 943.158v-377.264h565.894v377.264h-565.894zM0 404.21v619.79h727.578v-619.79h-727.578zM377.264 161.684h565.894v377.264h-134.736v80.842h215.578v-619.79h-727.578v323.37h80.842v-161.686z",Color.WHITE);  resizeMin.setSize(12,12);  SVGGlyph close=new SVGGlyph(0,"CLOSE","M810 274l-238 238 238 238-60 60-238-238-238 238-60-60 238-238-238-238 60-60 238 238 238-238z",Color.WHITE);  close.setSize(12,12);  JFXButton btnFull=new JFXButton();  btnFull.getStyleClass().add("jfx-decorator-button");  btnFull.setCursor(Cursor.HAND);  btnFull.setOnAction(null);  btnFull.setGraphic(full);  btnFull.setTranslateX(-30);  btnFull.setRipplerFill(Color.WHITE);  JFXButton btnClose=new JFXButton();  btnClose.getStyleClass().add("jfx-decorator-button");  btnClose.setCursor(Cursor.HAND);  btnClose.setOnAction(null);  btnClose.setGraphic(close);  btnClose.setRipplerFill(Color.WHITE);  JFXButton btnMin=new JFXButton();  btnMin.getStyleClass().add("jfx-decorator-button");  btnMin.setCursor(Cursor.HAND);  btnMin.setOnAction(null);  btnMin.setGraphic(minus);  btnMin.setRipplerFill(Color.WHITE);  btnMax=new JFXButton();  btnMax.getStyleClass().add("jfx-decorator-button");  btnMax.setCursor(Cursor.HAND);  btnMax.setRipplerFill(Color.WHITE);  btnMax.setOnAction(null);  btnMax.setGraphic(resizeMax);  buttonsContainer=new HBox();  buttonsContainer.getStyleClass().add("jfx-decorator-buttons-container");  buttonsContainer.setBackground(new Background(new BackgroundFill(Color.BLACK,CornerRadii.EMPTY,Insets.EMPTY)));  buttonsContainer.setPadding(new Insets(4));  buttonsContainer.setAlignment(Pos.CENTER_RIGHT);  List<JFXButton> btns=new ArrayList<>();  if (fullScreen) {    btns.add(btnFull);    buttonsContainer.setOnMouseClicked(null);  }  if (min)   btns.add(btnMin);  if (max)   btns.add(btnMax);  btns.add(btnClose);  buttonsContainer.getChildren().addAll(btns);  buttonsContainer.addEventHandler(MouseEvent.MOUSE_ENTERED,null);  buttonsContainer.addEventHandler(MouseEvent.MOUSE_EXITED,null);  buttonsContainer.setMinWidth(180);  contentPlaceHolder.getStyleClass().add("jfx-decorator-content-container");  contentPlaceHolder.setMinSize(0,0);  contentPlaceHolder.getChildren().add(node);  ((Region)node).setMinSize(0,0);  VBox.setVgrow(contentPlaceHolder,Priority.ALWAYS);  contentPlaceHolder.getStyleClass().add("resize-border");  contentPlaceHolder.setBorder(new Border(new BorderStroke(Color.BLACK,BorderStrokeStyle.SOLID,CornerRadii.EMPTY,new BorderWidths(0,4,4,4))));  Rectangle clip=new Rectangle();  clip.widthProperty().bind(((Region)node).widthProperty());  clip.heightProperty().bind(((Region)node).heightProperty());  node.setClip(clip);  this.getChildren().addAll(buttonsContainer,contentPlaceHolder);  primaryStage.fullScreenProperty().addListener(null);  this.addEventFilter(MouseEvent.MOUSE_PRESSED,null);  this.setOnMouseMoved(null);  this.setOnMouseReleased(null);  this.setOnMouseDragged(null);}  }
class C{  @Override public void onAuthenticationFailure(HttpServletRequest request,HttpServletResponse response,AuthenticationException exception) throws IOException, ServletException {  response.sendError(HttpServletResponse.SC_UNAUTHORIZED,"Authentication failed");}  }
class C{  public void fillRoundRect(int x,int y,int width,int height,int arcWidth,int arcHeight){  Rectangle2D.Float rect=new Rectangle2D.Float(x,y,width,height);  addDrawingRect(rect);  mPrintMetrics.fill(this);}  }
class C{  private Path createInsideTriangle(int x,int y,float triangleSize,float percentFilled,boolean flip){  Path path=new Path();  path.setFillType(Path.FillType.EVEN_ODD);  triangleSize/=2;  Vector2D[] p=createTriangleVertices(triangleSize);  Vector2D center=new Vector2D(0,0);  if (pos.distance(center) > 0) {    _pos=pos.scalarMultiply(triangleSize);    double[] dist=new double[3];    for (int i=0; i < 3; i++) {      dist[i]=_pos.distance(p[i]);    }    int opposite=0;    if (dist[1] > dist[0] && dist[1] > dist[2]) {      opposite=1;    } else     if (dist[2] > dist[0] && dist[2] > dist[1]) {      opposite=2;    }    Vector2D a=p[(opposite + 1) % 3];    Vector2D b=p[(opposite + 2) % 3];    Vector2D c=p[opposite];    Line dir=new Line(new Vector2D(0,0),_pos,0.001);    normal=_pos.normalize().scalarMultiply(-100);    Vector2D oth=new Vector2D(-normal.getY(),normal.getX());    sideA=a.add(b.subtract(a).scalarMultiply(percentFilled));    sideB=a.add(c.subtract(a).scalarMultiply(percentFilled));    if (_pos.distance(b) < _pos.distance(a)) {      sideA=b.add(a.subtract(b).scalarMultiply(percentFilled));      sideB=b.add(c.subtract(b).scalarMultiply(percentFilled));    }    pivot=sideA.add(sideB.subtract(sideA).scalarMultiply(_percent));    Line othLine=new Line(pivot,pivot.add(oth),0.001);    Vector2D ac=othLine.intersection(new Line(a,c,0.001));    Vector2D bc=othLine.intersection(new Line(b,c,0.001));    Vector2D ab=othLine.intersection(new Line(a,b,0.001));    float bcDist=0;    if (bc != null) {      bcDist=(float)bc.distance(center);    }    float acDist=0;    if (ac != null) {      acDist=(float)ac.distance(center);    }    float abDist=0;    if (ab != null) {      abDist=(float)ab.distance(center);    }    if (ac != null && bc != null && bcDist < triangleSize && acDist < triangleSize) {      path.moveTo((float)a.getX() + x,(float)a.getY() + y);      path.lineTo((float)b.getX() + x,(float)b.getY() + y);      path.lineTo((float)bc.getX() + x,(float)bc.getY() + y);      path.lineTo((float)ac.getX() + x,(float)ac.getY() + y);      path.close();    } else     if (bc != null && ab != null && bcDist < triangleSize && abDist < triangleSize) {      path.moveTo((float)b.getX() + x,(float)b.getY() + y);      path.lineTo((float)bc.getX() + x,(float)bc.getY() + y);      path.lineTo((float)ab.getX() + x,(float)ab.getY() + y);      path.close();    } else     if (ac != null && ab != null && acDist < triangleSize && abDist < triangleSize) {      path.moveTo((float)ac.getX() + x,(float)ac.getY() + y);      path.lineTo((float)a.getX() + x,(float)a.getY() + y);      path.lineTo((float)ab.getX() + x,(float)ab.getY() + y);      path.close();    }  }  return path;}  }
class C{  public static Integer fetchCollectionSize(String collection,String host) throws Exception {  String command=String.format("http://%s:%s/solr/%s/select?q=*:*&wt=json",host,DEFAULT_SOLR_PORT,collection);  String result=SolrInteractionUtils.executeSolrCommand(command);  logger.info("Collection Size command is " + command);  ObjectMapper mapper=new ObjectMapper();  JsonNode node=mapper.readTree(result);  int numDocs=Integer.parseInt(node.get("response").get("numFound").toString());  return numDocs;}  }
class C{  public CBCBlockCipher(BlockCipher blockCipher){  this.blockCipher=blockCipher;  this.blockSize=blockCipher.getBlockSize();}  }
class C{  void createThunkArgs(PrintWriter out_h,String id,Method m,boolean obscure_natives){  if (!m.hasParamNames() && m.getParams().length > 1) {    throw new RuntimeException("native method " + id + " must be generated with debug info (have no fear, it will be stripped)");  }  out_h.println();  if (obscure_natives) {    out_h.println("struct " + id + "_args;");    return;  }  out_h.println("struct " + id + "_args");  out_h.println("{");  int i=0;  for (int n=m.getParams().length; i < n; i++) {    String argname=(i == 0) ? ((m.getParams()[i].toString().indexOf("$") >= 0) ? "classself" : "self") : m.paramNames[i].name;    if (m.getParams()[i].t == NUMBER()) {      out_h.printf("    public: double %s;\n",argname);    } else     if (m.getParams()[i].t == BOOLEAN()) {      out_h.printf("    public: int32_t %s_b; private: int32_t %s_pad; public: inline bool %s() const { return %s_b != 0; }\n",argname,argname,argname,argname);    } else     if (m.getParams()[i].t == OBJECT() || m.getParams()[i].t == ANY()) {      out_h.printf("    public: AvmBoxArg %s;\n",argname);    } else {      out_h.printf("    public: %s %s; private: int32_t %s_pad; \n",ctype(m.getParams()[i]),argname,argname);    }  }  out_h.printf("    public: AvmStatusOut status_out;\n");  out_h.println("};");}  }
class C{  public ClearCacheRequest(Cache cache,Runnable callback){  super(Method.GET,null,null);  mCache=cache;  mCallback=callback;}  }
class C{  private double naiveQuerySparse(SparseNumberVector obj,WritableDoubleDataStore scores,HashSetModifiableDBIDs cands){  double len=0.;  for (int iter=obj.iter(); obj.iterValid(iter); iter=obj.iterAdvance(iter)) {    final int dim=obj.iterDim(iter);    final double val=obj.iterDoubleValue(iter);    if (val == 0. || val != val) {      continue;    }    len+=val * val;    if (dim >= index.size()) {      continue;    }    ModifiableDoubleDBIDList column=index.get(dim);    for (DoubleDBIDListIter n=column.iter(); n.valid(); n.advance()) {      scores.increment(n,n.doubleValue() * val);      cands.add(n);    }  }  return Math.sqrt(len);}  }
class C{  protected void restoreCriterion(TestSuiteChromosome suite){  Properties.CRITERION=oldCriterion;}  }
class C{  public static void removeTags(final INaviView[] views,final CTag tag){  for (  final INaviView view : views) {    try {      view.getConfiguration().untagView(tag);    } catch (    final CouldntSaveDataException exception) {      CUtilityFunctions.logException(exception);    }  }}  }
class C{  public ThermiteRandom(){  this(seedUniquifier() ^ System.nanoTime());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:32.662 -0500",hash_original_method="26682CE55BB39CA926871319A4C06C7F",hash_generated_method="0FF86BF8D4B3CAD907CC2B42FD37E314") public void removeMAddr(){  if (uriParms != null)   uriParms.delete(MADDR);}  }
class C{  protected final void BOOLEAN_CMP_INT(Instruction s,RegisterOperand res,ConditionOperand cond){  RegisterOperand temp=regpool.makeTemp(TypeReference.Boolean);  EMIT(CPOS(s,MIR_Set.create(IA32_SET__B,temp,COND(cond))));  EMIT(MIR_Unary.mutate(s,IA32_MOVZX__B,res,temp.copyD2U()));}  }
class C{  protected void dragDividerTo(int location){  if (getLastDragLocation() != location) {    if (isContinuousLayout()) {      splitPane.setDividerLocation(location);      setLastDragLocation(location);    } else {      int lastLoc=getLastDragLocation();      setLastDragLocation(location);      if (orientation == JSplitPane.HORIZONTAL_SPLIT) {        if (draggingHW) {          nonContinuousLayoutDivider.setLocation(getLastDragLocation(),0);        } else {          int splitHeight=splitPane.getHeight();          splitPane.repaint(lastLoc,0,dividerSize,splitHeight);          splitPane.repaint(location,0,dividerSize,splitHeight);        }      } else {        if (draggingHW) {          nonContinuousLayoutDivider.setLocation(0,getLastDragLocation());        } else {          int splitWidth=splitPane.getWidth();          splitPane.repaint(0,lastLoc,splitWidth,dividerSize);          splitPane.repaint(0,location,splitWidth,dividerSize);        }      }    }  }}  }
class C{  public BurlapOutput(){}  }
class C{  public void addImage(PDFPage page,ImageInfo info,Bitmap image,PDFRenderer renderer){  addImageRecord(page,info,image,renderer);}  }
class C{  public void invalidate(){  bufferHandle=Gdx.gl20.glGenBuffer();  isDirty=true;}  }
class C{  private void doLoad(HttpServletRequest request,InstructionalOfferingDetailForm frm,String instrOfferingIdStr) throws Exception {  Long instrOfferingId=new Long(instrOfferingIdStr);  InstructionalOfferingDAO idao=new InstructionalOfferingDAO();  InstructionalOffering io=idao.get(instrOfferingId);  Long subjectAreaId=io.getControllingCourseOffering().getSubjectArea().getUniqueId();  sessionContext.checkPermission(io,Right.InstructionalOfferingDetail);  InstructionalOfferingSearchAction.setLastInstructionalOffering(sessionContext,io);  ArrayList offerings=new ArrayList(io.getCourseOfferings());  Collections.sort(offerings,new CourseOfferingComparator(CourseOfferingComparator.COMPARE_BY_CTRL_CRS));  frm.setInstrOfferingId(instrOfferingId);  frm.setSubjectAreaId(subjectAreaId);  frm.setInstrOfferingName(io.getCourseNameWithTitle());  frm.setSubjectAreaAbbr(io.getControllingCourseOffering().getSubjectAreaAbbv());  frm.setCourseNbr(io.getControllingCourseOffering().getCourseNbr());  frm.setInstrOfferingNameNoTitle(io.getCourseName());  frm.setCtrlCrsOfferingId(io.getControllingCourseOffering().getUniqueId());  frm.setDemand(io.getDemand());  frm.setEnrollment(io.getEnrollment());  frm.setProjectedDemand(io.getProjectedDemand());  frm.setLimit(io.getLimit());  frm.setUnlimited(Boolean.FALSE);  frm.setAccommodation(StudentAccomodation.toHtml(StudentAccomodation.getAccommodations(io)));  frm.setByReservationOnly(io.isByReservationOnly());  frm.setWkEnroll(io.getLastWeekToEnroll() == null ? "" : io.getLastWeekToEnroll().toString());  frm.setWkChange(io.getLastWeekToChange() == null ? "" : io.getLastWeekToChange().toString());  frm.setWkDrop(io.getLastWeekToDrop() == null ? "" : io.getLastWeekToDrop().toString());  frm.setWeekStartDayOfWeek(Localization.getDateFormat("EEEE").format(io.getSession().getSessionBeginDateTime()));  frm.setHasConflict(hasConflicts(request,io));  String coordinators="";  String instructorNameFormat=sessionContext.getUser().getProperty(UserProperty.NameFormat);  for (  DepartmentalInstructor instructor : new TreeSet<DepartmentalInstructor>(io.getCoordinators())) {    if (!coordinators.isEmpty())     coordinators+="<br>";    coordinators+="<a href='instructorDetail.do?instructorId=" + instructor.getUniqueId() + "' class='noFancyLinks'>"+ instructor.getName(instructorNameFormat)+ "</a>";  }  frm.setCoordinators(coordinators);  for (Iterator i=io.getInstrOfferingConfigs().iterator(); i.hasNext(); )   if (((InstrOfferingConfig)i.next()).isUnlimitedEnrollment().booleanValue()) {    frm.setUnlimited(Boolean.TRUE);    break;  }  frm.setNotOffered(io.isNotOffered());  frm.setCourseOfferings(offerings);  if (io.getCourseOfferings().size() > 1 && !frm.getUnlimited().booleanValue()) {    int lim=0;    boolean reservationSet=false;    for (    CourseOffering course : io.getCourseOfferings()) {      if (course.getReservation() != null) {        lim+=course.getReservation();        reservationSet=true;      }    }    if (reservationSet && io.getLimit() != null && lim < io.getLimit().intValue()) {      request.setAttribute("limitsDoNotMatch","" + lim);    }  }  TreeSet<InstrOfferingConfig> configsWithTooHighLimit=new TreeSet<InstrOfferingConfig>(new InstrOfferingConfigComparator(null));  for (  InstrOfferingConfig config : io.getInstrOfferingConfigs()) {    if (config.isUnlimitedEnrollment())     continue;    Integer subpartLimit=null;    for (    SchedulingSubpart subpart : config.getSchedulingSubparts()) {      int limit=0;      for (      Class_ clazz : subpart.getClasses()) {        limit+=(clazz.getMaxExpectedCapacity() == null ? clazz.getExpectedCapacity() : clazz.getMaxExpectedCapacity());      }      if (subpartLimit == null || subpartLimit > limit)       subpartLimit=limit;    }    if (subpartLimit != null && subpartLimit < config.getLimit())     configsWithTooHighLimit.add(config);  }  if (!configsWithTooHighLimit.isEmpty()) {    if (configsWithTooHighLimit.size() == 1)     request.setAttribute("configsWithTooHighLimit",MSG.errorConfigWithTooHighLimit(configsWithTooHighLimit.first().getName())); else {      String names="";      for (      InstrOfferingConfig config : configsWithTooHighLimit) {        if (!names.isEmpty())         names+=", ";        names+=config.getName();      }      request.setAttribute("configsWithTooHighLimit",MSG.errorConfigsWithTooHighLimit(names));    }  }  @SuppressWarnings("deprecation") String linkLookupClass=ApplicationProperty.CourseCatalogLinkProvider.value();  if (linkLookupClass != null && linkLookupClass.trim().length() > 0) {    ExternalLinkLookup lookup=(ExternalLinkLookup)(Class.forName(linkLookupClass).newInstance());    Map results=lookup.getLink(io);    if (results == null)     throw new Exception(lookup.getErrorMessage());    frm.setCatalogLinkLabel((String)results.get(ExternalLinkLookup.LINK_LABEL));    frm.setCatalogLinkLocation((String)results.get(ExternalLinkLookup.LINK_LOCATION));  }  InstructionalOffering next=io.getNextInstructionalOffering(sessionContext);  frm.setNextId(next == null ? null : next.getUniqueId().toString());  InstructionalOffering previous=io.getPreviousInstructionalOffering(sessionContext);  frm.setPreviousId(previous == null ? null : previous.getUniqueId().toString());  DistributionPrefsTableBuilder tbl=new DistributionPrefsTableBuilder();  String html=tbl.getDistPrefsTableForInstructionalOffering(request,sessionContext,io);  if (html != null && html.indexOf(MSG.noPreferencesFound()) < 0)   request.setAttribute(DistributionPref.DIST_PREF_REQUEST_ATTR,html);}  }
class C{  public void addImplicitResolver(Tag tag,Pattern regexp,String first){  resolver.addImplicitResolver(tag,regexp,first);}  }
class C{  public void testPowNegativeNumToZeroExp(){  byte aBytes[]={50,-26,90,69,120,32,63,-103,-14,35};  int aSign=-1;  int exp=0;  byte rBytes[]={1};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.pow(exp);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private static void enableDownloadManager(Context context){  try {    Intent intent=new Intent(android.provider.Settings.ACTION_APPLICATION_DETAILS_SETTINGS);    intent.setData(Uri.parse("package:" + DOWNLOAD_MANAGER_PACKAGE_NAME));    IntentUtils.startOtherActivity(context,intent);  } catch (  ActivityNotFoundException e) {    e.printStackTrace();    Intent intent=new Intent(android.provider.Settings.ACTION_MANAGE_APPLICATIONS_SETTINGS);    IntentUtils.startOtherActivity(context,intent);  }}  }
class C{  public static byte[] encodeGif(int w,int h,int[] pixels) throws IOException {  BufferedImage bi=new BufferedImage(w,h,BufferedImage.TYPE_INT_ARGB);  bi.setRGB(0,0,w,h,pixels,0,w);  pixels=null;  return encodeGif(bi);}  }
class C{  public void findAndInit(Object someObj){  if (someObj instanceof MouseDelegator) {    Debug.message("mousemodemenuitem","MouseModeMenuItem found a MouseDelegator.");    setMouseDelegator((MouseDelegator)someObj);  }}  }
class C{  public int size(){  return forwardStore.size();}  }
class C{  public static CompoundAnimator createHeadingPitchRollAnimator(View view,Angle beginHeading,Angle endHeading,Angle beginPitch,Angle endPitch,Angle beginRoll,Angle endRoll){  if (beginHeading == null || endHeading == null || beginPitch == null || endPitch == null || beginRoll == null || endRoll == null) {    String message=Logging.getMessage("nullValue.AngleIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  final long MIN_LENGTH_MILLIS=500;  final long MAX_LENGTH_MILLIS=3000;  long headingLengthMillis=AnimationSupport.getScaledTimeMillisecs(beginHeading,endHeading,Angle.POS180,MIN_LENGTH_MILLIS,MAX_LENGTH_MILLIS);  long pitchLengthMillis=AnimationSupport.getScaledTimeMillisecs(beginPitch,endPitch,Angle.POS90,MIN_LENGTH_MILLIS,MAX_LENGTH_MILLIS / 2L);  long rollLengthMillis=AnimationSupport.getScaledTimeMillisecs(beginRoll,endRoll,Angle.POS90,MIN_LENGTH_MILLIS,MAX_LENGTH_MILLIS / 2L);  long lengthMillis=headingLengthMillis + pitchLengthMillis + rollLengthMillis;  AngleAnimator headingAnimator=createHeadingAnimator(view,beginHeading,endHeading);  AngleAnimator pitchAnimator=createPitchAnimator(view,beginPitch,endPitch);  AngleAnimator rollAnimator=createRollAnimator(view,beginRoll,endRoll);  CompoundAnimator headingPitchAnimator=new CompoundAnimator(new ScheduledInterpolator(lengthMillis),headingAnimator,pitchAnimator,rollAnimator);  return (headingPitchAnimator);}  }
class C{  public int remove(String key){  int avStart=0;  for (int i=0; avStart < mData.length; i++) {    int avLen=mData[avStart];    if (key.length() <= avLen && (key.length() == avLen || mData[avStart + key.length() + 1] == mSeperator)) {      String s=new String(mData,avStart + 1,key.length());      if (0 == key.compareToIgnoreCase(s)) {        byte[] oldBytes=mData;        mData=new byte[oldBytes.length - avLen - 1];        System.arraycopy(oldBytes,0,mData,0,avStart);        System.arraycopy(oldBytes,avStart + avLen + 1,mData,avStart,oldBytes.length - avStart - avLen- 1);        return i;      }    }    avStart+=(0xFF & (avLen + 1));  }  return -1;}  }
class C{  protected void subscribeStop(String nameValue) throws Throwable {  URI observerUri=URI.create(observerServiceUriForStop);  waitForSubscriptionToAppear(observerUri,EXAMPLES_SUBSCRIPTIONS);  verifyNotification(nameValue,observerUri);  JsExecutor.executeSynchronously(null);  waitForSubscriptionToDisappear(observerUri,EXAMPLES_SUBSCRIPTIONS);}  }
class C{  public boolean containsStringInput(){  return !stringInputs.isEmpty();}  }
class C{  public void initSqlQueries(Connection conn,Document sqlConfiguration) throws Exception {  try {    if (conn.getAutoCommit()) {      conn.setAutoCommit(false);    }    sqlQueries.init(sqlConfiguration,JDBCBayesianAnalyzer.class.getName(),conn,getSqlParameters());    checkTables(conn);  }  finally {    theJDBCUtil.closeJDBCConnection(conn);  }}  }
class C{  protected boolean isGlyphOrientationAuto(){  if (!isVertical())   return false;  aci.first();  Integer vOrient=(Integer)aci.getAttribute(VERTICAL_ORIENTATION);  if (vOrient != null) {    return (vOrient == ORIENTATION_AUTO);  }  return true;}  }
class C{  public static Intent finishOtherTasksWithTabID(int tabId,int canonicalTaskId){  if (tabId == Tab.INVALID_TAB_ID || Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP) {    return null;  }  Context context=ApplicationStatus.getApplicationContext();  ActivityManager manager=(ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);  List<ActivityManager.AppTask> tasksToFinish=new ArrayList<ActivityManager.AppTask>();  for (  ActivityManager.AppTask task : manager.getAppTasks()) {    RecentTaskInfo taskInfo=getTaskInfoFromTask(task);    if (taskInfo == null)     continue;    int taskId=taskInfo.id;    Intent baseIntent=taskInfo.baseIntent;    int otherTabId=ActivityDelegate.getTabIdFromIntent(baseIntent);    if (otherTabId == tabId && (taskId == -1 || taskId != canonicalTaskId)) {      tasksToFinish.add(task);    }  }  return finishAndRemoveTasks(tasksToFinish);}  }
class C{  public SpatialDataInputs(final LinkWeightMethod linkWeightMethod,final String initialCaseLocation){  this.linkWeigthMethod=linkWeightMethod;  this.initialCase=initialCaseLocation;  setInitialFiles();}  }
class C{  public void removeInvalids(JCas jcas){  FSIterator iterTimex=jcas.getAnnotationIndex(Timex3.type).iterator();  HashSet<Timex3> hsTimexToRemove=new HashSet<Timex3>();  while (iterTimex.hasNext()) {    Timex3 timex=(Timex3)iterTimex.next();    if (timex.getTimexValue().equals("REMOVE")) {      hsTimexToRemove.add(timex);    }  }  for (  Timex3 timex3 : hsTimexToRemove) {    timex3.removeFromIndexes();    this.timex_counter--;    Logger.printDetail(timex3.getTimexId() + " REMOVING PHASE: " + "found by:"+ timex3.getFoundByRule()+ " text:"+ timex3.getCoveredText()+ " value:"+ timex3.getTimexValue());  }}  }
class C{  public static String toRangeArrayArgument(final Object base,final int rangeStart,final int rangeEnd){  return Nullables.toString(base,Strings.EMPTY_STRING) + '[' + rangeStart+ ','+ rangeEnd+ ']';}  }
class C{  public String generateCatchBlock(AbstractStatement statement,Throwable exception){  String result="";  Class<?> ex=getExceptionClassToUse(exception);  result+=" catch(" + getClassName(ex) + " e) {"+ NEWLINE;  String exceptionMessage;  try {    if (exception.getMessage() != null) {      exceptionMessage=exception.getMessage().replace("*/","*_/");    } else {      exceptionMessage="no message in exception (getMessage() returned null)";    }  } catch (  Exception exceptionThownExecutionGetMessage) {    exceptionMessage="no message (getMessage() has thrown an exception)";  }  String sourceClass=getSourceClassName(exception);  if (sourceClass == null || isValidSource(sourceClass)) {    result+="   //" + NEWLINE;    for (    String msg : exceptionMessage.split("\n")) {      result+="   // " + StringEscapeUtils.escapeJava(msg) + NEWLINE;    }    result+="   //" + NEWLINE;  }  if (sourceClass != null && isValidSource(sourceClass) && isExceptionToAssertThrownBy(ex)) {    result+="   verifyException(\"" + sourceClass + "\", e);"+ NEWLINE;  }  if (Properties.isRegression() && exception.getMessage() != null) {    result+="   assertTrue(e.getMessage().equals(\"" + StringEscapeUtils.escapeJava(exceptionMessage) + "\"));";    result+="   \n";  }  result+="}" + NEWLINE;  return result;}  }
class C{  public static boolean validKeyPair(PrivateKey privateKey,PublicKey publicKey) throws CryptoException {  try {    String privateAlgorithm=privateKey.getAlgorithm();    String publicAlgorithm=publicKey.getAlgorithm();    if (!privateAlgorithm.equals(publicAlgorithm)) {      return false;    }    if (privateAlgorithm.equals(RSA.jce())) {      byte[] toSign="Rivest Shamir Adleman".getBytes();      String signatureAlgorithm="SHA256withRSA";      byte[] signature=sign(toSign,privateKey,signatureAlgorithm);      return verify(toSign,signature,publicKey,signatureAlgorithm);    } else     if (privateAlgorithm.equals(DSA.jce())) {      byte[] toSign="Digital Signature Algorithm".getBytes();      String signatureAlgorithm="SHA1withDSA";      byte[] signature=sign(toSign,privateKey,signatureAlgorithm);      return verify(toSign,signature,publicKey,signatureAlgorithm);    } else     if (privateAlgorithm.equals(EC.jce())) {      byte[] toSign="EC Digital Signature Algorithm".getBytes();      String signatureAlgorithm="SHA256withECDSA";      byte[] signature=sign(toSign,privateKey,signatureAlgorithm);      return verify(toSign,signature,publicKey,signatureAlgorithm);    } else {      throw new CryptoException(MessageFormat.format(res.getString("NoCheckCompriseValidKeypairAlg.exception.message"),privateAlgorithm));    }  } catch (  GeneralSecurityException ex) {    throw new CryptoException(res.getString("NoCheckCompriseValidKeypair.exception.message"),ex);  }}  }
class C{  public HessianMethodSerializationException(String message){  super(message);}  }
class C{  public static void main(String[] args){  double preBuffer=Double.parseDouble(args[4]);  double postBuffer=Double.parseDouble(args[5]);  run(args[0],args[1],args[2],args[3],preBuffer,postBuffer);}  }
class C{  private void updatePopulation(int[] ids){  List<Integer> archivedIds=new ArrayList<Integer>();  for (  int id : ids) {    archivedIds.add(id);  }  solutions.keySet().retainAll(archivedIds);}  }
class C{  @Override protected URLConnection openConnection(URL u) throws IOException {  return new FtpURLConnection(u);}  }
class C{  private void handleConnection(Address address,Connection connection,Throwable error,CompletableFuture<Connection> future){  if (open) {    if (error == null) {      setupConnection(address,connection,future);    } else {      connect(future);    }  }}  }
class C{  public static boolean isDefaultMaskPassword(){  return DEFAULT_MASK_PASSWORD;}  }
class C{  public static void main(String[] args){  runFilter(new Transpose(),args);}  }
class C{  private void rotateRight(Node<K,V> root){  Node<K,V> pivot=root.left;  Node<K,V> right=root.right;  Node<K,V> pivotLeft=pivot.left;  Node<K,V> pivotRight=pivot.right;  root.left=pivotRight;  if (pivotRight != null) {    pivotRight.parent=root;  }  replaceInParent(root,pivot);  pivot.right=root;  root.parent=pivot;  root.height=Math.max(right != null ? right.height : 0,pivotRight != null ? pivotRight.height : 0) + 1;  pivot.height=Math.max(root.height,pivotLeft != null ? pivotLeft.height : 0) + 1;}  }
class C{  public static Ed25519GroupElement toRepresentation(final Ed25519GroupElement g,final CoordinateSystem newCoordinateSystem){  final BigInteger x;  final BigInteger y;  final BigInteger gX=toBigInteger(g.getX().encode());  final BigInteger gY=toBigInteger(g.getY().encode());  final BigInteger gZ=toBigInteger(g.getZ().encode());  final BigInteger gT=null == g.getT() ? null : toBigInteger(g.getT().encode());switch (g.getCoordinateSystem()) {case AFFINE:    x=gX;  y=gY;break;case P2:case P3:x=gX.multiply(gZ.modInverse(Ed25519Field.P)).mod(Ed25519Field.P);y=gY.multiply(gZ.modInverse(Ed25519Field.P)).mod(Ed25519Field.P);break;case P1xP1:x=gX.multiply(gZ.modInverse(Ed25519Field.P)).mod(Ed25519Field.P);assert gT != null;y=gY.multiply(gT.modInverse(Ed25519Field.P)).mod(Ed25519Field.P);break;case CACHED:x=gX.subtract(gY).multiply(gZ.multiply(new BigInteger("2")).modInverse(Ed25519Field.P)).mod(Ed25519Field.P);y=gX.add(gY).multiply(gZ.multiply(new BigInteger("2")).modInverse(Ed25519Field.P)).mod(Ed25519Field.P);break;case PRECOMPUTED:x=gX.subtract(gY).multiply(new BigInteger("2").modInverse(Ed25519Field.P)).mod(Ed25519Field.P);y=gX.add(gY).multiply(new BigInteger("2").modInverse(Ed25519Field.P)).mod(Ed25519Field.P);break;default :throw new UnsupportedOperationException();}switch (newCoordinateSystem) {case AFFINE:return Ed25519GroupElement.affine(toFieldElement(x),toFieldElement(y),Ed25519Field.ONE);case P2:return Ed25519GroupElement.p2(toFieldElement(x),toFieldElement(y),Ed25519Field.ONE);case P3:return Ed25519GroupElement.p3(toFieldElement(x),toFieldElement(y),Ed25519Field.ONE,toFieldElement(x.multiply(y).mod(Ed25519Field.P)));case P1xP1:return Ed25519GroupElement.p1xp1(toFieldElement(x),toFieldElement(y),Ed25519Field.ONE,Ed25519Field.ONE);case CACHED:return Ed25519GroupElement.cached(toFieldElement(y.add(x).mod(Ed25519Field.P)),toFieldElement(y.subtract(x).mod(Ed25519Field.P)),Ed25519Field.ONE,toFieldElement(D.multiply(new BigInteger("2")).multiply(x).multiply(y).mod(Ed25519Field.P)));case PRECOMPUTED:return Ed25519GroupElement.precomputed(toFieldElement(y.add(x).mod(Ed25519Field.P)),toFieldElement(y.subtract(x).mod(Ed25519Field.P)),toFieldElement(D.multiply(new BigInteger("2")).multiply(x).multiply(y).mod(Ed25519Field.P)));default :throw new UnsupportedOperationException();}}  }
class C{  public boolean isPreformatted(){  return (this == PRE || this == TEXTAREA);}  }
class C{  @Inline public void addEvent(EventType et,int ival1,int ival2){  if (!enabled)   return;  addEventInternal(et,ival1,ival2);}  }
class C{  public PXRecord(Name name,int dclass,long ttl,int preference,Name map822,Name mapX400){  super(name,Type.PX,dclass,ttl);  this.preference=checkU16("preference",preference);  this.map822=checkName("map822",map822);  this.mapX400=checkName("mapX400",mapX400);}  }
class C{  @Inline @Override public final void intWrite(ObjectReference objref,int value,Word offset,Word location,int mode){  Magic.setIntAtOffset(objref.toObject(),offset.toOffset(),value,location.toInt());}  }
class C{  private void addImageSharing(ImageSharingImpl imageSharing,String sharingId){  mImageSharingCache.put(sharingId,imageSharing);}  }
class C{  @Command(aliases="leave",description="Leave the game") @PlayerCommand public static void leave(CommandContext cmd){  Player player=(Player)cmd.getSender();  MatchThread thread=Cardinal.getMatchThread(player);  PlayerContainerData newData=new PlayerContainerData(thread,null,null);  PlayerContainerData oldData=PlayerContainerData.of(player);  Containers.handleStateChangeEvent(player,oldData,newData);}  }
class C{  public NumericLiteral(int x){  m_number=new Integer(x);  m_type=int.class;}  }
class C{  public void initialize(MediaRouteController controller){  setRouteSelector(controller.buildMediaRouteSelector());  setDialogFactory(new ChromeMediaRouteDialogFactory());}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_lang_String02() throws Exception {  try {    TrustManagerFactory.getInstance(null,getDefaultProviderName());    fail();  } catch (  NoSuchAlgorithmException expected) {  }catch (  NullPointerException expected) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      TrustManagerFactory.getInstance(invalidValues[i],getDefaultProviderName());      fail("NoSuchAlgorithmException must be thrown (algorithm: ".concat(invalidValues[i]).concat(")"));    } catch (    NoSuchAlgorithmException e) {    }  }}  }
class C{  public void acquireStepLock(StorageSystem storageObj,String opId){  Workflow workflow=_workflowService.getWorkflowFromStepId(opId);  if (workflow != null && storageObj.deviceIsType(Type.vnxfile)) {    List<String> lockKeys=new ArrayList<String>();    lockKeys.add(storageObj.getNativeGuid());    boolean lockAcquired=_workflowService.acquireWorkflowStepLocks(opId,lockKeys,LockTimeoutValue.get(LockType.FILE_OPERATIONS));    if (!lockAcquired) {      throw DeviceControllerException.exceptions.failedToAcquireWorkflowLock(lockKeys.toString(),"Timeout in Acquiring Lock");    }  }}  }
class C{  public Chunk1_9to1_8(int x,int z){  this(x,z,true,0,new ChunkSection1_9to1_8[16],null);  this.unloadPacket=true;}  }
class C{  public StrBuilder appendFixedWidthPadLeft(int value,int width,char padChar){  return appendFixedWidthPadLeft(String.valueOf(value),width,padChar);}  }
class C{  private void stopCapture(){  log("Stopping image capture.");  if (mCaptureInProgress) {    mPendingShutdown=true;  } else {    mImageCapturer.close();    shutdown();  }}  }
class C{  @Override public void registerBreaker(BreakerSettings breakerSettings){  validateSettings(new BreakerSettings[]{breakerSettings});  if (breakerSettings.getType() == CircuitBreaker.Type.NOOP) {    CircuitBreaker breaker=new NoopCircuitBreaker(breakerSettings.getName());    breakers.put(breakerSettings.getName(),breaker);  } else {    CircuitBreaker oldBreaker;    CircuitBreaker breaker=new ChildMemoryCircuitBreaker(breakerSettings,logger,this,breakerSettings.getName());    for (; ; ) {      oldBreaker=breakers.putIfAbsent(breakerSettings.getName(),breaker);      if (oldBreaker == null) {        return;      }      breaker=new ChildMemoryCircuitBreaker(breakerSettings,(ChildMemoryCircuitBreaker)oldBreaker,logger,this,breakerSettings.getName());      if (breakers.replace(breakerSettings.getName(),oldBreaker,breaker)) {        return;      }    }  }}  }
class C{  public static final void sort(float[] a,int[] b,int begin,int end){  mergesort(a,b,begin,end - 1);}  }
class C{  public T saveOrUpdate(T object){  currentSession().saveOrUpdate(object);  return object;}  }
class C{  public ConcatenatedVec(List<Vec> vecs){  this.vecs=new Vec[vecs.size()];  lengthSums=new int[vecs.size()];  totalLength=0;  for (int i=0; i < vecs.size(); i++) {    lengthSums[i]=totalLength;    this.vecs[i]=vecs.get(i);    totalLength+=vecs.get(i).length();  }}  }
class C{  public static File resolvePath(File base,String path){  File r=new File(path);  return r.isAbsolute() ? r : new File(base,path);}  }
class C{  public static Timestamp trunc(Timestamp p_dateTime){  Timestamp time=p_dateTime;  if (time == null)   time=new Timestamp(System.currentTimeMillis());  GregorianCalendar cal=new GregorianCalendar();  cal.setTimeInMillis(time.getTime());  cal.set(Calendar.HOUR_OF_DAY,0);  cal.set(Calendar.MINUTE,0);  cal.set(Calendar.SECOND,0);  cal.set(Calendar.MILLISECOND,0);  return new Timestamp(cal.getTimeInMillis());}  }
class C{  void addInternal(Status status){  statuses.add(status);}  }
class C{  public boolean free(T obj){  AtomicInteger topRef=_top;  while (true) {    final int top=topRef.get();    if (_capacity <= top) {      return false;    }    boolean isFree=_freeStack.compareAndSet(top,null,obj);    topRef.compareAndSet(top,top + 1);    if (isFree) {      return true;    }  }}  }
class C{  public boolean addAll(Map<String,T> args){  for (  Map.Entry<String,T> entry : args.entrySet()) {    add(entry.getKey(),entry.getValue());  }  return args.size() > 0;}  }
class C{  public void loadAlbumImage(final String artistName,final String albumName,final long albumId,final ImageView imageView){  loadImage(generateAlbumCacheKey(albumName,artistName),artistName,albumName,albumId,imageView,ImageType.ALBUM);}  }
class C{  public SerializerReadDouble(){}  }
class C{  public static Image convert(Device device,BufferedImage srcImage){  ImageData swtImageData=new ImageData(srcImage.getWidth(),srcImage.getHeight(),24,PALETTE_DATA);  int scansize=(((srcImage.getWidth() * 3) + 3) * 4) / 4;  WritableRaster alphaRaster=srcImage.getAlphaRaster();  byte[] alphaBytes=new byte[srcImage.getWidth()];  for (int y=0; y < srcImage.getHeight(); y++) {    int[] buff=srcImage.getRGB(0,y,srcImage.getWidth(),1,null,0,scansize);    swtImageData.setPixels(0,y,srcImage.getWidth(),buff,0);    if (alphaRaster != null) {      int[] alpha=alphaRaster.getPixels(0,y,srcImage.getWidth(),1,(int[])null);      for (int i=0; i < srcImage.getWidth(); i++)       alphaBytes[i]=(byte)alpha[i];      swtImageData.setAlphas(0,y,srcImage.getWidth(),alphaBytes,0);    }  }  return new Image(device,swtImageData);}  }
class C{  public static UnsupportedOperationException newUnsupportedOperationException(String message){  return new UnsupportedOperationException(formatMessage(0,message));}  }
class C{  public Object execute(Object o,InternalContextAdapter context) throws MethodInvocationException {  if (referenceType == RUNT)   return null;  Object result=getVariableValue(context,rootString);  if (result == null) {    return null;  }  try {    for (int i=0; i < numChildren; i++) {      result=jjtGetChild(i).execute(result,context);      if (result == null) {        return null;      }    }    return result;  } catch (  MethodInvocationException mie) {    rsvc.error("Method " + mie.getMethodName() + " threw exception for reference $"+ rootString+ " in template "+ context.getCurrentTemplateName()+ " at "+ " ["+ this.getLine()+ ","+ this.getColumn()+ "]");    mie.setReferenceName(rootString);    throw mie;  }}  }
class C{  protected void engineSetMode(String mode) throws NoSuchAlgorithmException {  core.setMode(mode);}  }
class C{  public StrTokenizer(final char[] input,final char delim,final char quote){  this(input,delim);  setQuoteChar(quote);}  }
class C{  public static ReilInstruction createStm(final long offset,final OperandSize firstSize,final String firstValue,final OperandSize thirdSize,final String thirdValue){  checkBinaryOperandSizeTypes(firstSize,thirdSize);  return createBinaryInstruction(ReilHelpers.OPCODE_STM,new CAddress(offset),firstSize,firstValue,thirdSize,thirdValue);}  }
class C{  public static void checkEqualsAndHashCodeMethods(Object lhs,Object rhs,boolean expectedResult){  checkEqualsAndHashCodeMethods((String)null,lhs,rhs,expectedResult);}  }
class C{  public boolean removeNodes(List<Node> newNodes){  boolean changed=false;  for (  Object newNode : newNodes) {    boolean _changed=removeNode((Node)newNode);    changed=changed || _changed;  }  return changed;}  }
class C{  public synchronized void unweave(ByteString id){  if (woven.containsKey(id)) {    removed.add(woven.remove(id));  }}  }
class C{  public static List<LibraryLocation> gatherAllLibraries(String[] dirPaths){  List<LibraryLocation> libraries=new ArrayList<LibraryLocation>();  for (int i=0; i < dirPaths.length; i++) {    File extDir=new File(dirPaths[i]);    if (extDir.isDirectory()) {      String[] names=extDir.list(fgArchiveFilter);      if (names != null) {        for (int j=0; j < names.length; j++) {          File jar=new File(extDir,names[j]);          if (jar.isFile()) {            try {              IPath libPath=new Path(jar.getCanonicalPath());              IPath sourcePath=Path.EMPTY;              IPath packageRoot=Path.EMPTY;              URL javadocLocation=null;              URL indexLocation=null;              LibraryLocation library=new LibraryLocation(libPath,sourcePath,packageRoot,javadocLocation,indexLocation);              libraries.add(library);            } catch (            IOException e) {              Launching.log(e);            }          }        }      }    }  }  return libraries;}  }
class C{  public static <T0,T1,T2,T3,T4>void print(T0 object0,T1 object1,T2 object2,T3 object3,T4 object4){  System.out.println("" + (object0 == null ? "NullType" : object0) + " "+ (object1 == null ? "NullType" : object1)+ " "+ (object2 == null ? "NullType" : object2)+ " "+ (object3 == null ? "NullType" : object3)+ " "+ (object4 == null ? "NullType" : object4));}  }
class C{  public final boolean compareAndSet(double expect,double update){  return updater.compareAndSet(this,doubleToRawLongBits(expect),doubleToRawLongBits(update));}  }
class C{  protected void readFrameInformation(BinaryFile binFile,RpfTocEntry entry) throws IOException, FormatException {  int boundaryId, frameRow, frameCol;  int currentPosition;  int pathLength;  long pathOffset;  RpfFrameEntry frame;  int currentBoundaryIdForEntry=entry.coverage.entryNumber;  for (int i=0; i < numFrameIndexRecords; i++) {    if (DEBUG_RPFTOCFRAMEDETAIL) {      Debug.output("RpfTocHandler: parseToc(): Read frame file index rec #: " + i);    }    binFile.seek(locations[3].componentLocation + indexRecordLength * i);    boundaryId=(int)binFile.readShort();    if (boundaryId != currentBoundaryIdForEntry) {      continue;    }    if (DEBUG_RPFTOCFRAMEDETAIL) {      Debug.output("boundary id for frame: " + i + " is "+ boundaryId);    }    if (boundaryId > numBoundaries - 1) {      throw new FormatException("Bad boundary id in FF index record " + i);    }    frameRow=(int)binFile.readShort();    frameCol=(int)binFile.readShort();    if (frameRow > entry.vertFrames - 1) {      throw new FormatException("Bad row number: " + frameRow + ", in FF index record "+ i+ ", Min row num=0;  Max. row num:"+ (entry.horizFrames - 1));    }    if (frameCol > entry.horizFrames - 1) {      throw new FormatException(" Bad col number in FF index record " + i);    }    frame=entry.getFrame((entry.vertFrames - 1) - frameRow,frameCol);    if (frame.exists && DEBUG_RPFTOCDETAIL) {      Debug.output("FF " + i + " is a duplicate");    }    pathOffset=(long)binFile.readInteger();    if (pathOffset < 0) {      continue;    }    currentPosition=(int)binFile.getFilePointer();    binFile.seek(locations[3].componentLocation + pathOffset);    pathLength=(int)binFile.readShort();    if (DEBUG_RPFTOCFRAMEDETAIL) {      Debug.output("RpfTocHandler: parseToc(): pathLength:" + pathLength);    }    String rpfdir=dir;    StringBuffer sBuf=new StringBuffer(pathLength);    String pathTest=binFile.readFixedLengthString(2);    if (pathTest.equals("./")) {      fullPathsInATOC=false;    } else {      fullPathsInATOC=true;    }    if (!fullPathsInATOC) {      sBuf.append(binFile.readFixedLengthString(pathLength - 2));    } else {      sBuf.append(pathTest);      sBuf.append(binFile.readFixedLengthString(pathLength - 2));    }    String directory=sBuf.toString().trim();    if (DEBUG_RPFTOCFRAMEDETAIL) {      Debug.output("RpfTocHandler: parseToc(): frame directory: " + directory);    }    binFile.seek(currentPosition);    String filename=binFile.readFixedLengthString(12);    if (DEBUG_RPFTOCFRAMEDETAIL) {      Debug.output("RpfTocHandler: parseToc(): frame filename: " + filename);    }    int dot=filename.lastIndexOf('.');    entry.setInfo(filename.substring(dot + 1,dot + 3).intern());    String tempPath;    if (!fullPathsInATOC) {      tempPath=rpfdir + directory + filename;      frame.rpfdirIndex=(short)(rpfdir.length() - 3);      frame.filenameIndex=(short)(rpfdir.length() + directory.length());    } else {      tempPath=directory + filename;      frame.filenameIndex=(short)directory.length();    }    frame.framePath=tempPath;    frame.exists=true;    if (frame.framePath == null) {      Debug.output("RpfTocHandler: Frame " + tempPath + " doesn't exist.  Please rebuild A.TOC file using MakeToc, or check read permissions for the file.");    }  }}  }
class C{  @Override public String serialize(final boolean includingBuiltIn){  String strStyle;  if (isBold()) {    strStyle=isItalic() ? "#bold + #italic" : "#bold";  } else {    strStyle=isItalic() ? "#italic" : "#plain";  }  return "font('" + name + "',"+ pointSize+ ","+ strStyle+ ")";}  }
class C{  public boolean evaluateEarly(){  return true;}  }
class C{  public AnnotationVisitor visitAnnotation(String desc,boolean visible){  if (fv != null) {    return fv.visitAnnotation(desc,visible);  }  return null;}  }
class C{  public boolean storesMixedCaseIdentifiers() throws SQLException {  return false;}  }
class C{  public NotificationChain basicSetLhs(Expression newLhs,NotificationChain msgs){  Expression oldLhs=lhs;  lhs=newLhs;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.EQUALITY_EXPRESSION__LHS,oldLhs,newLhs);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public RecoveryDiff recoveryDiff(MetadataSnapshot recoveryTargetSnapshot){  final List<StoreFileMetaData> identical=new ArrayList<>();  final List<StoreFileMetaData> different=new ArrayList<>();  final List<StoreFileMetaData> missing=new ArrayList<>();  final Map<String,List<StoreFileMetaData>> perSegment=new HashMap<>();  final List<StoreFileMetaData> perCommitStoreFiles=new ArrayList<>();  for (  StoreFileMetaData meta : this) {    if (IndexFileNames.OLD_SEGMENTS_GEN.equals(meta.name())) {      continue;    }    final String segmentId=IndexFileNames.parseSegmentName(meta.name());    final String extension=IndexFileNames.getExtension(meta.name());    assert FIELD_INFOS_FILE_EXTENSION.equals(extension) == false || IndexFileNames.stripExtension(IndexFileNames.stripSegmentName(meta.name())).isEmpty() : "FieldInfos are generational but updateable DV are not supported in elasticsearch";    if (IndexFileNames.SEGMENTS.equals(segmentId) || DEL_FILE_EXTENSION.equals(extension) || LIV_FILE_EXTENSION.equals(extension)) {      perCommitStoreFiles.add(meta);    } else {      List<StoreFileMetaData> perSegStoreFiles=perSegment.get(segmentId);      if (perSegStoreFiles == null) {        perSegStoreFiles=new ArrayList<>();        perSegment.put(segmentId,perSegStoreFiles);      }      perSegStoreFiles.add(meta);    }  }  final ArrayList<StoreFileMetaData> identicalFiles=new ArrayList<>();  for (  List<StoreFileMetaData> segmentFiles : Iterables.concat(perSegment.values(),Collections.singleton(perCommitStoreFiles))) {    identicalFiles.clear();    boolean consistent=true;    for (    StoreFileMetaData meta : segmentFiles) {      StoreFileMetaData storeFileMetaData=recoveryTargetSnapshot.get(meta.name());      if (storeFileMetaData == null) {        consistent=false;        missing.add(meta);      } else       if (storeFileMetaData.isSame(meta) == false) {        consistent=false;        different.add(meta);      } else {        identicalFiles.add(meta);      }    }    if (consistent) {      identical.addAll(identicalFiles);    } else {      different.addAll(identicalFiles);    }  }  RecoveryDiff recoveryDiff=new RecoveryDiff(Collections.unmodifiableList(identical),Collections.unmodifiableList(different),Collections.unmodifiableList(missing));  assert recoveryDiff.size() == this.metadata.size() - (metadata.containsKey(IndexFileNames.OLD_SEGMENTS_GEN) ? 1 : 0) : "some files are missing recoveryDiff size: [" + recoveryDiff.size() + "] metadata size: ["+ this.metadata.size()+ "] contains  segments.gen: ["+ metadata.containsKey(IndexFileNames.OLD_SEGMENTS_GEN)+ "]";  return recoveryDiff;}  }
class C{  private void paintProgramCounter(final TargetProcessThread thread){  if (thread == null) {    CDebuggerPainter.clearDebuggerHighlighting(m_graph);  } else {    final RelocatedAddress address=thread.getCurrentAddress();    if (address == null) {      return;    }    CDebuggerPainter.updateDebuggerHighlighting(m_graph,m_debugger.memoryToFile(address),m_debugger.getModule(address));  }}  }
class C{  public void testUpdateNCharacterStream() throws Exception {  createTable("testUpdateNCharacterStream","(c1 CHAR(10) PRIMARY KEY, c2 NATIONAL CHARACTER(10)) default character set sjis");  Properties props1=new Properties();  props1.put("useServerPrepStmts","true");  props1.put("characterEncoding","UTF-8");  Connection conn1=getConnectionWithProps(props1);  PreparedStatement pstmt1=conn1.prepareStatement("INSERT INTO testUpdateNCharacterStream (c1, c2) VALUES (?, ?)");  pstmt1.setString(1,"1");  pstmt1.setNCharacterStream(2,new StringReader("aaa"),3);  pstmt1.execute();  Statement stmt1=conn1.createStatement(ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_UPDATABLE);  ResultSet rs1=stmt1.executeQuery("SELECT c1, c2 FROM testUpdateNCharacterStream");  rs1.next();  rs1.updateNCharacterStream("c2",new StringReader("bbb"),3);  rs1.updateRow();  rs1.moveToInsertRow();  rs1.updateString("c1","2");  rs1.updateNCharacterStream("c2",new StringReader("ccc"),3);  rs1.insertRow();  ResultSet rs2=stmt1.executeQuery("SELECT c1, c2 FROM testUpdateNCharacterStream");  rs2.next();  assertEquals("1",rs2.getString("c1"));  assertEquals("bbb",rs2.getNString("c2"));  rs2.next();  assertEquals("2",rs2.getString("c1"));  assertEquals("ccc",rs2.getNString("c2"));  pstmt1.close();  stmt1.close();  conn1.close();  createTable("testUpdateNCharacterStream","(c1 CHAR(10) PRIMARY KEY, c2 CHAR(10)) default character set sjis");  Properties props2=new Properties();  props2.put("useServerPrepStmts","true");  props2.put("characterEncoding","SJIS");  Connection conn2=getConnectionWithProps(props2);  PreparedStatement pstmt2=conn2.prepareStatement("INSERT INTO testUpdateNCharacterStream (c1, c2) VALUES (?, ?)");  pstmt2.setString(1,"1");  pstmt2.setString(2,"aaa");  pstmt2.execute();  Statement stmt2=conn2.createStatement(ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_UPDATABLE);  ResultSet rs3=stmt2.executeQuery("SELECT c1, c2 FROM testUpdateNCharacterStream");  rs3.next();  try {    rs3.updateNCharacterStream("c2",new StringReader("bbb"),3);    fail();  } catch (  SQLException ex) {    assertEquals("Can not call updateNCharacterStream() when field's character set isn't UTF-8",ex.getMessage());  }  rs3.close();  pstmt2.close();  stmt2.close();  conn2.close();}  }
class C{  public void testFetchingIncompleteLocationTree_retainsLoadingDialog(){  mController.init();  mController.attachFragmentUi(mMockFragmentUi);  LocationTree locationTree=FakeAppLocationTreeFactory.emptyTree();  mFakeEventBus.post(new AppLocationTreeFetchedEvent(locationTree));  verify(mMockFragmentUi).setBusyLoading(true);}  }
class C{  private synchronized void logStats(){  FLog.v(TAG,"Count = %d",mMap.size());}  }
class C{  public void createProRataDaySteppedScenario() throws Exception {  setDateFactory("2013-04-01 00:00:00");  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"PRO_RATA_DAY_STEPPED_SERVICE",TestService.EXAMPLE,TestPriceModel.EXAMPLE_RATA_DAY_EVENTS_PARS_STEPPED,technicalService,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),1);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService(basicSetup.getCustomerAdminKey(),"PRO_RATA_DAY_STEPPED",serviceDetails,basicSetup.getSecondCustomerUser1(),VOServiceFactory.getRole(serviceDetails,"ADMIN"));  container.login(basicSetup.getSupplierAdminKey(),ROLE_SERVICE_MANAGER,ROLE_TECHNOLOGY_MANAGER);  subscrSetup.recordEventForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-04-02 00:00:00"),"FILE_DOWNLOAD",100);  setDateFactory("2013-04-05 00:00:00");  subscrSetup.unsubscribeToService(basicSetup.getCustomerAdminKey(),subDetails.getSubscriptionId());  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("PRO_RATA_DAY_STEPPED",subDetails);}  }
class C{  private void pieceFinished(PieceFinishedAlert alert){  if (state == State.STREAMING && hasPieces != null) {    int pieceIndex=alert.pieceIndex() - firstPieceIndex;    hasPieces[pieceIndex]=true;    if (pieceIndex >= interestedPieceIndex) {      for (int i=pieceIndex; i < hasPieces.length; i++) {        if (!hasPieces[i]) {          torrentHandle.piecePriority(i + firstPieceIndex,Priority.SEVEN);          torrentHandle.setPieceDeadline(i + firstPieceIndex,1000);          break;        }      }    }  } else {    Iterator<Integer> piecesIterator=preparePieces.iterator();    while (piecesIterator.hasNext()) {      int index=piecesIterator.next();      if (index == alert.pieceIndex()) {        piecesIterator.remove();      }    }    if (hasPieces != null) {      hasPieces[alert.pieceIndex() - firstPieceIndex]=true;    }    if (preparePieces.size() == 0) {      startSequentialMode();      prepareProgress=100d;      sendStreamProgress();      state=State.STREAMING;      if (listener != null) {        listener.onStreamReady(this);      }    }  }}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  Node<E> h=null, t=null;  Object item;  while ((item=s.readObject()) != null) {    @SuppressWarnings("unchecked") Node<E> newNode=new Node<E>((E)item);    if (h == null)     h=t=newNode; else {      t.lazySetNext(newNode);      t=newNode;    }  }  if (h == null)   h=t=new Node<E>(null);  head=h;  tail=t;}  }
class C{  public T caseAssociationClassContent_(AssociationClassContent_ object){  return null;}  }
class C{  private boolean containsMapping(Object key,Object value){  if (key == null) {    HashMapEntry<K,V> e=entryForNullKey;    return e != null && Objects.equals(value,e.value);  }  int hash=secondaryHash(key);  HashMapEntry<K,V>[] tab=table;  int index=hash & (tab.length - 1);  for (HashMapEntry<K,V> e=tab[index]; e != null; e=e.next) {    if (e.hash == hash && key.equals(e.key)) {      return Objects.equals(value,e.value);    }  }  return false;}  }
class C{  public void write(byte b[],int off,int len) throws IOException {  if (len == 0)   return;  if (out == null)   out=owner.writeNotify();  out.write(b,off,len);}  }
class C{  public static Object extractInnerConnection(Connection connection) throws IOException {  if (connection == null) {    return null;  }  Object realConnection=connection;  String className=realConnection.getClass().getSimpleName();  if (TSR_CONNECTION_SIMPLE_CLASSNAME.equals(className)) {    realConnection=extractInnerConnectionFromSQLR(realConnection);    if (realConnection != null)     className=realConnection.getClass().getSimpleName();  }  if (C3P0_CONNECTION_CLASSNAME.equals(className)) {    realConnection=extractInnerConnectionFromC3P0(realConnection);    if (realConnection != null)     className=realConnection.getClass().getSimpleName();  } else   if (BONECP_CONNECTION_CLASSNAME.equals(className)) {    realConnection=extractInnerConnectionFromBoneCP(realConnection);    if (realConnection != null)     className=realConnection.getClass().getSimpleName();  }  if (TSR_CONNECTION_SIMPLE_CLASSNAME.equals(className)) {    realConnection=extractInnerConnectionFromSQLR(realConnection);    if (realConnection != null)     className=realConnection.getClass().getSimpleName();  }  return realConnection;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.N4_CLASS_DEFINITION__SUPER_CLASS_REF:    return superClassRef != null;case N4JSPackage.N4_CLASS_DEFINITION__SUPER_CLASS_EXPRESSION:  return superClassExpression != null;case N4JSPackage.N4_CLASS_DEFINITION__IMPLEMENTED_INTERFACE_REFS:return implementedInterfaceRefs != null && !implementedInterfaceRefs.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public static void main(String[] args){  Splash.getSplash();  Adempiere.startup(true);  new AMenu();}  }
class C{  public void clear(){  rawCFGs.clear();  actualCFGs.clear();  controlDependencies.clear();}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (getAD_Org_ID() != 0)   setAD_Org_ID(0);  return true;}  }
class C{  public static void writeImageMap(PrintWriter writer,String name,ChartRenderingInfo info,boolean useOverLibForToolTips) throws IOException {  ToolTipTagFragmentGenerator toolTipTagFragmentGenerator;  if (useOverLibForToolTips) {    toolTipTagFragmentGenerator=new OverLIBToolTipTagFragmentGenerator();  } else {    toolTipTagFragmentGenerator=new StandardToolTipTagFragmentGenerator();  }  ImageMapUtilities.writeImageMap(writer,name,info,toolTipTagFragmentGenerator,new StandardURLTagFragmentGenerator());}  }
class C{  public UserDeletionConstraintException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  public static BufferedImage visualize(BufferWrapperRaster raster){  if (null == raster) {    String message=Logging.getMessage("nullValue.RasterIsNull");    Logging.logger().severe(message);    throw new WWRuntimeException(message);  }  double missingDataSignal=AVListImpl.getDoubleValue(raster,AVKey.MISSING_DATA_SIGNAL,(double)Short.MIN_VALUE);  int missingDataReplacement=0;  Double minElevation=(Double)raster.getValue(AVKey.ELEVATION_MIN);  Double maxElevation=(Double)raster.getValue(AVKey.ELEVATION_MAX);  double min=(null != minElevation && minElevation >= Earth.ELEVATION_MIN) ? minElevation : 0d;  double max=(null != maxElevation && minElevation <= Earth.ELEVATION_MAX) ? maxElevation : Earth.ELEVATION_MAX;  int width=raster.getWidth();  int height=raster.getHeight();  int size=width * height;  short[][] data=new short[][]{new short[size],new short[size]};  final int BAND_Y=0, BAND_ALPHA=1;  final int ALPHA_OPAQUE=(short)0xFFFF;  final int ALPHA_TRANSLUCENT=(short)0;  int i=0;  boolean hasVoids=false;  double norm=(max != min) ? Math.abs(65534d / (max - min)) : 0d;  for (int y=0; y < height; y++) {    for (int x=0; x < width; x++) {      double v=raster.getDoubleAtPosition(y,x);      if (v == missingDataSignal || v == 0 || v < min || v > max) {        data[BAND_Y][i]=(short)(0xFFFF & missingDataReplacement);        data[BAND_ALPHA][i]=ALPHA_TRANSLUCENT;        hasVoids=true;      } else {        data[BAND_Y][i]=(short)(0xFFFF & (int)((v - min) * norm));        data[BAND_ALPHA][i]=ALPHA_OPAQUE;      }      i++;    }  }  int[] bandOrder=(hasVoids) ? new int[]{BAND_Y,BAND_ALPHA} : new int[]{BAND_Y};  int[] offsets=(hasVoids) ? new int[]{0,0} : new int[]{0};  int[] nBits=(hasVoids) ? new int[]{16,8} : new int[]{16};  DataBuffer imgBuffer=new DataBufferUShort(data,size);  SampleModel sm=new BandedSampleModel(DataBuffer.TYPE_USHORT,width,height,width,bandOrder,offsets);  WritableRaster wr=Raster.createWritableRaster(sm,imgBuffer,null);  ColorSpace cs=ColorSpace.getInstance(ColorSpace.CS_GRAY);  ColorModel cm=new ComponentColorModel(cs,nBits,hasVoids,false,hasVoids ? Transparency.TRANSLUCENT : Transparency.OPAQUE,DataBuffer.TYPE_USHORT);  return new BufferedImage(cm,wr,false,null);}  }
class C{  public boolean hasChanged(){  if (getValue() != null)   if (m_oldValue != null)   return !m_oldValue.equals(getValue()); else   return true; else   if (m_oldValue != null)   return true; else   return false;}  }
class C{  public boolean visit(ASTNode node){  return true;}  }
class C{  @Override protected EClass eStaticClass(){  return StextPackage.Literals.REACTION_EFFECT;}  }
class C{  public MergeMap(String currId,Map everpresent){  order.push(BASE);  id2map.put(BASE,everpresent);  push(currId);}  }
class C{  protected void determineActiveAttributes(){  if (this.isHighlighted()) {    TacticalGraphicAttributes highlightAttributes=this.getHighlightAttributes();    if (highlightAttributes != null) {      this.applyAttributesToSymbol(highlightAttributes,this.activeSymbolAttributes);    }  } else {    TacticalGraphicAttributes normalAttributes=this.getAttributes();    if (normalAttributes != null) {      this.applyAttributesToSymbol(normalAttributes,this.activeSymbolAttributes);    }  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static String toPackageAsFolder(final Class<?> clazz){  Validate.notNull(clazz,"Class cannot be null!");  return clazz.getPackage().getName().replace('.','/');}  }
class C{  public byte[] asn1Encode() throws Asn1Exception, IOException {  DerOutputStream bytes=new DerOutputStream();  DerOutputStream temp=new DerOutputStream();  temp.putInteger(BigInteger.valueOf(pvno));  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x00),temp);  temp=new DerOutputStream();  temp.putInteger(BigInteger.valueOf(msgType));  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x01),temp);  if (pAData != null && pAData.length > 0) {    DerOutputStream padata_stream=new DerOutputStream();    for (int i=0; i < pAData.length; i++) {      padata_stream.write(pAData[i].asn1Encode());    }    temp=new DerOutputStream();    temp.write(DerValue.tag_SequenceOf,padata_stream);    bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x02),temp);  }  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x03),cname.getRealm().asn1Encode());  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x04),cname.asn1Encode());  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x05),ticket.asn1Encode());  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x06),encPart.asn1Encode());  temp=new DerOutputStream();  temp.write(DerValue.tag_Sequence,bytes);  return temp.toByteArray();}  }
class C{  public void onOffHeapEvict(){  offHeapEvicts.incrementAndGet();  if (delegate != null)   delegate.onOffHeapEvict();}  }
class C{  void _ensureUniqueBucketPage(final byte[] key,Reference<? extends AbstractPage> bp){  final int prefixLength=_getPrefixLength();  final int hashBits=getLocalHashCode(key,prefixLength);  assert childRefs[hashBits] == bp;  int start=-1;  int refs=0;  for (int i=0; i < childRefs.length; i++) {    if (childRefs[i] == bp) {      start=start == -1 ? i : start;      refs++;      if (i != hashBits) {        childRefs[i]=null;        ((MutableDirectoryPageData)data).childAddr[i]=IRawStore.NULL;      }    }  }  assert Integer.bitCount(refs) == 1;}  }
class C{  private void validateEntries(DataPageExtra dpExtra) throws IOException {  int entrySize=0;  Entry prevEntry=IndexData.FIRST_ENTRY;  for (  Entry e : dpExtra._entries) {    entrySize+=e.size();    if (prevEntry.compareTo(e) >= 0) {      throw new IOException(withErrorContext("Unexpected order in index entries, " + prevEntry + " >= "+ e));    }    prevEntry=e;  }  if (entrySize != dpExtra._totalEntrySize) {    throw new IllegalStateException(withErrorContext("Expected size " + entrySize + " but was "+ dpExtra._totalEntrySize));  }}  }
class C{  public void line(String srcName,Paint color,String legend,float width){  line(srcName,color,legend,width,false);}  }
class C{  public BasicConstraints(byte[] encoding) throws IOException {  super(encoding);  Object[] values=(Object[])ASN1.decode(encoding);  ca=(Boolean)values[0];  if (values[1] != null) {    pathLenConstraint=new BigInteger((byte[])values[1]).intValue();  }}  }
class C{  public void updateBinaryStream(String columnLabel,java.io.InputStream x,long length) throws SQLException {}  }
class C{  public TreeLoader(ClassLoader loader){  super(loader);}  }
class C{  public OrderEventImpl(final String eventId,final CustomerOrder customerOrder){  this(null,eventId,customerOrder,null,null);}  }
class C{  @RequestMapping(method=RequestMethod.GET) public DeferredResult<ResponseEntity<ApolloConfigNotification>> pollNotification(@RequestParam(value="appId") String appId,@RequestParam(value="cluster") String cluster,@RequestParam(value="namespace",defaultValue=ConfigConsts.NAMESPACE_APPLICATION) String namespace,@RequestParam(value="dataCenter",required=false) String dataCenter,@RequestParam(value="notificationId",defaultValue="-1") long notificationId,@RequestParam(value="ip",required=false) String clientIp){  namespace=namespaceUtil.filterNamespaceName(namespace);  Set<String> watchedKeys=watchKeysUtil.assembleAllWatchKeys(appId,cluster,namespace,dataCenter);  DeferredResult<ResponseEntity<ApolloConfigNotification>> deferredResult=new DeferredResult<>(TIMEOUT,NOT_MODIFIED_RESPONSE);  ReleaseMessage latest=releaseMessageService.findLatestReleaseMessageForMessages(watchedKeys);  entityManagerUtil.closeEntityManager();  if (latest != null && latest.getId() != notificationId) {    deferredResult.setResult(new ResponseEntity<>(new ApolloConfigNotification(namespace,latest.getId()),HttpStatus.OK));  } else {    for (    String key : watchedKeys) {      this.deferredResults.put(key,deferredResult);    }    deferredResult.onTimeout(null);    deferredResult.onCompletion(null);    logWatchedKeysToCat(watchedKeys,"Apollo.LongPoll.RegisteredKeys");    logger.debug("Listening {} from appId: {}, cluster: {}, namespace: {}, datacenter: {}",watchedKeys,appId,cluster,namespace,dataCenter);  }  return deferredResult;}  }
class C{  public static void assertFalse(Formatter message,boolean assertion){  if (assertion) {    throw new AssertionException(message);  }}  }
class C{  private void read(RandomAccessFile inout) throws IOException {  int pos;  byte[] name=new byte[NAME];  pos=inout.read(name);  pane.tfName.setText(new String(name));  byte[] street=new byte[STREET];  pos+=inout.read(street);  pane.tfStreet.setText(new String(street));  byte[] city=new byte[CITY];  pos+=inout.read(city);  pane.tfCity.setText(new String(city));  byte[] state=new byte[STATE];  pos+=inout.read(state);  pane.tfState.setText(new String(state));  byte[] zip=new byte[ZIP];  pos+=inout.read(zip);  pane.tfZip.setText(new String(zip));}  }
class C{  private boolean isSemiDirectedBlocked(Node x,Node y,List<Node> naYXT,Graph graph,Set<Node> marked){  if (naYXT.contains(y)) {    return true;  }  if (y == x) {    return false;  }  for (  Node node1 : graph.getNodes()) {    if (node1 == y || marked.contains(node1)) {      continue;    }    if (graph.isAdjacentTo(y,node1) && !graph.isParentOf(node1,y)) {      marked.add(node1);      if (!isSemiDirectedBlocked(x,node1,naYXT,graph,marked)) {        return false;      }      marked.remove(node1);    }  }  return true;}  }
class C{  public ProgressStatusEvent(String type,String item,String description,List<String> data){  super(Events.PROGRESS_STATUS_CHANGE);  put("progress_type",type);  put("item",item);  put("description",description);  put("data",data);}  }
class C{  public void testComputeClasspathForVariables() throws CoreException, IOException {  Random rand=new Random();  String varName=null;  while (varName == null) {    String curVarName=this.getName() + rand.nextInt();    if (JavaCore.getClasspathVariable(curVarName) == null) {      varName=curVarName;    }  }  File systemTempFile=File.createTempFile(this.getName(),".temp");  JavaCore.setClasspathVariable(varName,Path.fromOSString(systemTempFile.getAbsolutePath()),new NullProgressMonitor());  try {    JavaProjectUtilities.addRawClassPathEntry(javaProjectA,JavaCore.newVariableEntry(new Path(varName),null,null,true));    List<File> actualCp=getListOfFiles(GWTCompileRunner.computeClasspath(javaProjectA));    List<File> expectedCp=new ArrayList<File>();    expectedCp.add(systemTempFile);    assertEquals(expectedCp,actualCp);  }  finally {    JavaCore.removeClasspathVariable(varName,new NullProgressMonitor());  }}  }
class C{  public static BufferedImage createCompatibleImage(BufferedImage image){  return createCompatibleImage(image,image.getWidth(),image.getHeight());}  }
class C{  public void testDoConfigureCreatesRequiredElements() throws Exception {  configuration.doConfigure(container);  String config=configuration.getFileHandler().readTextFile(DOMAIN_HOME + "/config/config.xml","UTF-8");  XMLAssert.assertXpathEvaluatesTo(configuration.getPropertyValue(WebLogicPropertySet.DOMAIN_VERSION),"//weblogic:domain-version",config);}  }
class C{  private void checkPointsToValue(RectangleEdge edge,Rectangle2D plotArea){  assertEquals("Right most point on the axis should be end of range.",this.axis.getUpperBound(),this.axis.java2DToValue(plotArea.getX() + plotArea.getWidth(),plotArea,edge),EPSILON);  assertEquals("Left most point on the axis should be beginning of " + "range.",this.axis.getLowerBound(),this.axis.java2DToValue(plotArea.getX(),plotArea,edge),EPSILON);  assertEquals("Center point on the axis should geometric mean of the " + "bounds.",Math.sqrt(this.axis.getUpperBound() * this.axis.getLowerBound()),this.axis.java2DToValue(plotArea.getX() + (plotArea.getWidth() / 2),plotArea,edge),EPSILON);}  }
class C{  public Quaterniond rotateLocal(double angleX,double angleY,double angleZ,Quaterniond dest){  double thetaX=angleX * 0.5;  double thetaY=angleY * 0.5;  double thetaZ=angleZ * 0.5;  double thetaMagSq=thetaX * thetaX + thetaY * thetaY + thetaZ * thetaZ;  double s;  double dqX, dqY, dqZ, dqW;  if (thetaMagSq * thetaMagSq / 24.0 < 1E-8) {    dqW=1.0 - thetaMagSq * 0.5;    s=1.0 - thetaMagSq / 6.0;  } else {    double thetaMag=Math.sqrt(thetaMagSq);    dqW=Math.cos(thetaMag);    s=Math.sin(thetaMag) / thetaMag;  }  dqX=thetaX * s;  dqY=thetaY * s;  dqZ=thetaZ * s;  dest.set(dqW * x + dqX * w + dqY * z - dqZ * y,dqW * y - dqX * z + dqY * w + dqZ * x,dqW * z + dqX * y - dqY * x + dqZ * w,dqW * w - dqX * x - dqY * y - dqZ * z);  return dest;}  }
class C{  public static String encodePassword(String password,String algorithm){  byte[] unencodedPassword=password.getBytes();  MessageDigest md=null;  try {    md=MessageDigest.getInstance(algorithm);  } catch (  Exception e) {    log.error("Exception: " + e);    return password;  }  md.reset();  md.update(unencodedPassword);  byte[] encodedPassword=md.digest();  StringBuffer buf=new StringBuffer();  for (  byte anEncodedPassword : encodedPassword) {    if ((anEncodedPassword & 0xff) < 0x10) {      buf.append("0");    }    buf.append(Long.toString(anEncodedPassword & 0xff,16));  }  return buf.toString();}  }
class C{  @Override public int splitAttr(){  return m_splitAttr;}  }
class C{  public ObjectArrayList elements(Object[] elements){  this.elements=elements;  this.size=elements.length;  return this;}  }
class C{  public static Set<Emoticon> parseEmoteSet(JSONObject setData,String streamRestriction,Emoticon.SubType subType){  try {    JSONArray emoticons=(JSONArray)setData.get("emoticons");    String title=JSONUtil.getString(setData,"title");    return parseEmoticons(emoticons,streamRestriction,title,subType);  } catch (  ClassCastException|NullPointerException ex) {    LOGGER.warning("Error parsing FFZ emote set: " + ex);  }  return new HashSet<>();}  }
class C{  @Override public void onLogin(String uid){}  }
class C{  public static void checkForExportRuleToDelete(HashMap<String,ExportRule> sourceExportRuleMap,HashMap<String,ExportRule> targetExportRuleMap,List<ExportRule> exportRulesToDelete){  for (  String secFlavour : targetExportRuleMap.keySet()) {    if (!sourceExportRuleMap.containsKey(secFlavour)) {      exportRulesToDelete.add(targetExportRuleMap.get(secFlavour));    }  }}  }
class C{  public static ExprInt toExprInt(Expression expr){  if (expr instanceof ExprInt)   return (ExprInt)expr;  if (expr instanceof Literal) {    Double dbl=((Literal)expr).getDouble(null);    if (dbl != null)     return expr.getFactory().createLitInteger((int)dbl.doubleValue(),expr.getStart(),expr.getEnd());  }  return new CastInt(expr);}  }
class C{  private void scheduleInvalidatePoll(){  if (mInvalidateTaskScheduled) {    return;  }  mInvalidateTaskScheduled=true;  scheduleSelf(mInvalidateTask,POLL_FOR_RENDERED_FRAME_MS);}  }
class C{  public boolean put(long key,double value){  if (size < ADD_KEYS_TO_SET_THRESHOLD) {    for (int i=0; i < size; i++) {      if (key == keys[i]) {        return false;      }    }  } else {    if (keySet == null) {      keySet=new LongOpenHashSet(keys,0.75f);    }    if (keySet.contains(key)) {      return false;    } else {      keySet.add(key);    }  }  if (size == capacity) {    capacity=2 * capacity;    copy(capacity,size);  }  keys[size]=key;  values[size]=value;  size++;  return true;}  }
class C{  public static MarketBar newInstance(){  final MarketBar returnInstance=new MarketBar();  returnInstance.setDefaultCode();  return returnInstance;}  }
class C{  public static void print(){  out.flush();}  }
class C{  @Override Class[] preprocessParameterTypes(CallableMemberDescriptor memberDesc){  final Class[] preprocessedParamTypes=memberDesc.getParamTypes().clone();  int ln=preprocessedParamTypes.length;  final Class varArgsCompType=preprocessedParamTypes[ln - 1].getComponentType();  if (varArgsCompType == null) {    throw new BugException("Only varargs methods should be handled here");  }  preprocessedParamTypes[ln - 1]=varArgsCompType;  return preprocessedParamTypes;}  }
class C{  protected boolean checkCoverage(){  int i;  int n;  int[] count;  Range r;  String attrIndex;  SubspaceClusterDefinition cl;  count=new int[getNumAttributes()];  for (i=0; i < getNumAttributes(); i++) {    for (n=0; n < getClusters().length; n++) {      cl=(SubspaceClusterDefinition)getClusters()[n];      r=new Range(cl.getAttrIndexRange());      r.setUpper(getNumAttributes());      if (r.isInRange(i)) {        count[i]++;      }    }  }  attrIndex="";  for (i=0; i < count.length; i++) {    if (count[i] == 0) {      if (attrIndex.length() != 0) {        attrIndex+=",";      }      attrIndex+=(i + 1);    }  }  if (attrIndex.length() != 0) {    throw new IllegalArgumentException("The following attributes are not covered by a cluster " + "definition: " + attrIndex + "\n");  }  return true;}  }
class C{  public int numGlyphs(){  return this.lastGlyphIndex() + 1;}  }
class C{  public String prefix(int length){  if (this.pointer + length >= this.buffer.length()) {    update();  }  if (this.pointer + length > this.buffer.length()) {    return this.buffer.substring(this.pointer);  }  return this.buffer.substring(this.pointer,this.pointer + length);}  }
class C{  protected FinalizableSoftReference(T referent,FinalizableReferenceQueue queue){  super(referent,queue.queue);  queue.cleanUp();}  }
class C{  public void reset(){  m_nodeCache=null;  fireTableDataChanged();}  }
class C{  public List<String> indicesDeleted(){  if (hasNewMaster() || previousState == null) {    return Collections.emptyList();  }  if (!metaDataChanged()) {    return Collections.emptyList();  }  List<String> deleted=null;  for (  ObjectCursor<String> cursor : previousState.metaData().indices().keys()) {    String index=cursor.value;    if (!state.metaData().hasIndex(index)) {      if (deleted == null) {        deleted=new ArrayList<>();      }      deleted.add(index);    }  }  return deleted == null ? Collections.<String>emptyList() : deleted;}  }
class C{  public static int matchPath(Struct variables,Path[] restPath,String[] callerPath){  if (restPath.length > callerPath.length)   return -1;  int index=0;  for (; index < restPath.length; index++) {    if (!restPath[index].match(variables,callerPath[index]))     return -1;  }  return index - 1;}  }
class C{  public NamedStyle(String name,Style parent){  attributes=getEmptySet();  if (name != null) {    setName(name);  }  if (parent != null) {    setResolveParent(parent);  }}  }
class C{  public static int indexOfIgnoreCase(String searchIn,String searchFor){  return indexOfIgnoreCase(0,searchIn,searchFor);}  }
class C{  public JavaContentAssistInvocationContext(IJavaProject javaProject){  super();  fJavaProject=javaProject;  fEditor=null;}  }
class C{  public static ReplicationDiagnostics checkReplicationStatus(String host,String core) throws IOException, ParserConfigurationException, SAXException, XPathExpressionException {  ReplicationDiagnostics diagnostics=new ReplicationDiagnostics();  diagnostics.setEntity(core);  String statusUrl=String.format("http://%s:%s/solr/%s/replication?command=details",host,SolrInteractionUtils.DEFAULT_SOLR_PORT,core);  InputStream result=null;  DocumentBuilderFactory dbFactory=DocumentBuilderFactory.newInstance();  DocumentBuilder dBuilder=dbFactory.newDocumentBuilder();  Document doc=null;  try {    result=SolrInteractionUtils.executeSolrCommandAndGetInputStream(statusUrl);    doc=dBuilder.parse(result);  }  finally {    if (result != null) {      result.close();    }  }  if (doc == null) {    logger.info("Replicationstatus: " + host + " Not results");    return diagnostics;  }  XPathFactory xPathfactory=XPathFactory.newInstance();  XPath xpath=xPathfactory.newXPath();  String curDate=xpath.compile("/response/lst[@name='details']/lst[@name = 'slave']/str[@name = 'currentDate']/text()").evaluate(doc);  String isReplicating=xpath.compile("/response/lst[@name='details']/lst[@name = 'slave']/str[@name = 'isReplicating']/text()").evaluate(doc);  boolean replicating=!StringUtils.equalsIgnoreCase(isReplicating,"false");  if (StringUtils.isBlank(curDate)) {    replicating=true;  } else {    if (StringUtils.isBlank(isReplicating)) {      replicating=false;    }  }  String downloadSpeed=xpath.compile("/response/lst[@name='details']/lst[@name = 'slave']/str[@name = 'downloadSpeed']/text()").evaluate(doc);  String totalPercent=xpath.compile("/response/lst[@name='details']/lst[@name = 'slave']/str[@name = 'totalPercent']/text()").evaluate(doc);  String timeElapsed=xpath.compile("/response/lst[@name='details']/lst[@name = 'slave']/str[@name = 'timeElapsed']/text()").evaluate(doc);  String timeRemaining=xpath.compile("/response/lst[@name='details']/lst[@name = 'slave']/str[@name = 'timeRemaining']/text()").evaluate(doc);  String bytesDownloaded=xpath.compile("/response/lst[@name='details']/lst[@name = 'slave']/str[@name = 'bytesDownloaded']/text()").evaluate(doc);  String bytesToDownload=xpath.compile("/response/lst[@name='details']/lst[@name = 'slave']/str[@name = 'bytesToDownload']/text()").evaluate(doc);  diagnostics.setPercentageComplete(totalPercent);  diagnostics.setTimeElapsed(timeElapsed);  logger.info(core + ": " + totalPercent+ "% Bytes:"+ bytesDownloaded+ "/"+ bytesToDownload+ " @ "+ downloadSpeed+ " Time:"+ timeElapsed+ "/"+ timeRemaining);  logger.info("This is the return value " + replicating + "  isReplicating:  "+ isReplicating);  if (!replicating) {    logger.info("REPLICATION COMPLETE: " + host + " : "+ core);  }  diagnostics.setReplicating(replicating);  return diagnostics;}  }
class C{  public void execute(){  System.out.println("A");  DataSet dataSet=(DataSet)getDataModel();  Parameters params=getParams();  double penaltyDiscount=params.getDouble("penaltyDiscount",4);  WFgs fgs=new WFgs(dataSet);  fgs.setPenaltyDiscount(penaltyDiscount);  Graph graph=fgs.search();  if (getSourceGraph() != null) {    GraphUtils.arrangeBySourceGraph(graph,getSourceGraph());  } else   if (((IKnowledge)getParams().get("knowledge",new Knowledge2())).isDefaultToKnowledgeLayout()) {    SearchGraphUtils.arrangeByKnowledgeTiers(graph,(IKnowledge)getParams().get("knowledge",new Knowledge2()));  } else {    GraphUtils.circleLayout(graph,200,200,150);  }  setResultGraph(graph);  this.topGraphs=new ArrayList<>();  topGraphs.add(new ScoredGraph(getResultGraph(),Double.NaN));  setIndex(topGraphs.size() - 1);}  }
class C{  public DefaultInternalTransition(State<S,E> source,Collection<Action<S,E>> actions,E event,Guard<S,E> guard,Trigger<S,E> trigger){  super(source,actions,event,guard,trigger);}  }
class C{  public Polygon(PolygonPoint[] points){  this(Arrays.asList(points));}  }
class C{  public GravitationalForce(){  this(DEFAULT_FORCE_CONSTANT,DEFAULT_DIRECTION);}  }
class C{  public static boolean initDebug(){  return StaticHelper.initOpenCV(false);}  }
class C{  public synchronized CharsToNameCanonicalizer makeChild(final boolean canonicalize,final boolean intern){  final String[] symbols;  final Bucket[] buckets;  final int size;  final int hashSeed;  final int longestCollisionList;synchronized (this) {    symbols=_symbols;    buckets=_buckets;    size=_size;    hashSeed=_hashSeed;    longestCollisionList=_longestCollisionList;  }  return new CharsToNameCanonicalizer(this,canonicalize,intern,symbols,buckets,size,hashSeed,longestCollisionList);}  }
class C{  public List<Cluster<T>> cluster(final Collection<T> points) throws NullArgumentException {  MathUtils.checkNotNull(points);  final List<Cluster<T>> clusters=new ArrayList<Cluster<T>>();  final List<Cluster<T>> anomalousClusters=new ArrayList<Cluster<T>>();  final Cluster<T> anomalyCluster=new Cluster<T>();  final Map<Clusterable,PointStatus> visited=new HashMap<Clusterable,PointStatus>();  for (  final T point : points) {    if (visited.get(point) != null) {      continue;    }    final List<T> neighbors=getNeighbors(point,points);    if (neighbors.size() >= minPts) {      final Cluster<T> cluster=new Cluster<T>();      clusters.add(expandCluster(cluster,point,neighbors,points,visited));    } else {      visited.put(point,PointStatus.NOISE);      anomalyCluster.addPoint(point);    }  }  anomalousClusters.add(anomalyCluster);  return anomalousClusters;}  }
class C{  public NumberIsTooSmallException(Number wrong,Number min,boolean boundIsAllowed){  this(boundIsAllowed ? LocalizedFormats.NUMBER_TOO_SMALL : LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED,wrong,min,boundIsAllowed);}  }
class C{  public static void picture(double x,double y,String s,double w,double h,double degrees){  Image image=getImage(s);  double xs=scaleX(x);  double ys=scaleY(y);  double ws=factorX(w);  double hs=factorY(h);  if (ws < 0 || hs < 0)   throw new IllegalArgumentException("image " + s + " is corrupt");  if (ws <= 1 && hs <= 1)   pixel(x,y);  offscreen.rotate(Math.toRadians(-degrees),xs,ys);  offscreen.drawImage(image,(int)Math.round(xs - ws / 2.0),(int)Math.round(ys - hs / 2.0),(int)Math.round(ws),(int)Math.round(hs),null);  offscreen.rotate(Math.toRadians(+degrees),xs,ys);  draw();}  }
class C{  boolean merge(final ClassWriter cw,final Frame frame,final int edge){  boolean changed=false;  int i, s, dim, kind, t;  int nLocal=inputLocals.length;  int nStack=inputStack.length;  if (frame.inputLocals == null) {    frame.inputLocals=new int[nLocal];    changed=true;  }  for (i=0; i < nLocal; ++i) {    if (outputLocals != null && i < outputLocals.length) {      s=outputLocals[i];      if (s == 0) {        t=inputLocals[i];      } else {        dim=s & DIM;        kind=s & KIND;        if (kind == BASE) {          t=s;        } else {          if (kind == LOCAL) {            t=dim + inputLocals[s & VALUE];          } else {            t=dim + inputStack[nStack - (s & VALUE)];          }          if ((s & TOP_IF_LONG_OR_DOUBLE) != 0 && (t == LONG || t == DOUBLE)) {            t=TOP;          }        }      }    } else {      t=inputLocals[i];    }    if (initializations != null) {      t=init(cw,t);    }    changed|=merge(cw,t,frame.inputLocals,i);  }  if (edge > 0) {    for (i=0; i < nLocal; ++i) {      t=inputLocals[i];      changed|=merge(cw,t,frame.inputLocals,i);    }    if (frame.inputStack == null) {      frame.inputStack=new int[1];      changed=true;    }    changed|=merge(cw,edge,frame.inputStack,0);    return changed;  }  int nInputStack=inputStack.length + owner.inputStackTop;  if (frame.inputStack == null) {    frame.inputStack=new int[nInputStack + outputStackTop];    changed=true;  }  for (i=0; i < nInputStack; ++i) {    t=inputStack[i];    if (initializations != null) {      t=init(cw,t);    }    changed|=merge(cw,t,frame.inputStack,i);  }  for (i=0; i < outputStackTop; ++i) {    s=outputStack[i];    dim=s & DIM;    kind=s & KIND;    if (kind == BASE) {      t=s;    } else {      if (kind == LOCAL) {        t=dim + inputLocals[s & VALUE];      } else {        t=dim + inputStack[nStack - (s & VALUE)];      }      if ((s & TOP_IF_LONG_OR_DOUBLE) != 0 && (t == LONG || t == DOUBLE)) {        t=TOP;      }    }    if (initializations != null) {      t=init(cw,t);    }    changed|=merge(cw,t,frame.inputStack,nInputStack + i);  }  return changed;}  }
class C{  public void disableFiltering(){  mFilterData=false;}  }
class C{  private void testCloudProvider(String provider) throws Exception {  info("Testing provider: " + provider);  TcpDiscoveryCloudIpFinder ipFinder=new TcpDiscoveryCloudIpFinder();  injectLogger(ipFinder);  ipFinder.setProvider(provider);  ipFinder.setIdentity(IgniteCloudTestSuite.getAccessKey(provider));  ipFinder.setRegions(IgniteCloudTestSuite.getRegions(provider));  ipFinder.setZones(IgniteCloudTestSuite.getZones(provider));  if (provider.equals("google-compute-engine"))   ipFinder.setCredentialPath(IgniteCloudTestSuite.getSecretKey(provider)); else   ipFinder.setCredential(IgniteCloudTestSuite.getSecretKey(provider));  Collection<InetSocketAddress> addresses=ipFinder.getRegisteredAddresses();  for (  InetSocketAddress addr : addresses)   info("Registered instance: " + addr.getAddress().getHostAddress() + ":"+ addr.getPort());  ipFinder.unregisterAddresses(addresses);  assert addresses.size() == ipFinder.getRegisteredAddresses().size();  ipFinder.registerAddresses(ImmutableList.of(new InetSocketAddress("192.168.0.1",TcpDiscoverySpi.DFLT_PORT)));  assert addresses.size() == ipFinder.getRegisteredAddresses().size();}  }
class C{  public Object clone() throws CloneNotSupportedException {  MovingAverageSeries clone=(MovingAverageSeries)super.clone();  clone.yyValues=new LinkedList<Double>();  clone.volValues=new LinkedList<Long>();  return clone;}  }
class C{  public boolean implementsInterface(ReferenceBinding anInterface,boolean searchHierarchy){  if (this == anInterface)   return true;  ReferenceBinding[] interfacesToVisit=null;  int nextPosition=0;  ReferenceBinding currentType=this;  do {    ReferenceBinding[] itsInterfaces=currentType.superInterfaces();    if (itsInterfaces != null && itsInterfaces != Binding.NO_SUPERINTERFACES) {      if (interfacesToVisit == null) {        interfacesToVisit=itsInterfaces;        nextPosition=interfacesToVisit.length;      } else {        int itsLength=itsInterfaces.length;        if (nextPosition + itsLength >= interfacesToVisit.length)         System.arraycopy(interfacesToVisit,0,interfacesToVisit=new ReferenceBinding[nextPosition + itsLength + 5],0,nextPosition);        nextInterface:         for (int a=0; a < itsLength; a++) {          ReferenceBinding next=itsInterfaces[a];          for (int b=0; b < nextPosition; b++)           if (next == interfacesToVisit[b])           continue nextInterface;          interfacesToVisit[nextPosition++]=next;        }      }    }  } while (searchHierarchy && (currentType=currentType.superclass()) != null);  for (int i=0; i < nextPosition; i++) {    currentType=interfacesToVisit[i];    if (currentType.isEquivalentTo(anInterface))     return true;    ReferenceBinding[] itsInterfaces=currentType.superInterfaces();    if (itsInterfaces != null && itsInterfaces != Binding.NO_SUPERINTERFACES) {      int itsLength=itsInterfaces.length;      if (nextPosition + itsLength >= interfacesToVisit.length)       System.arraycopy(interfacesToVisit,0,interfacesToVisit=new ReferenceBinding[nextPosition + itsLength + 5],0,nextPosition);      nextInterface:       for (int a=0; a < itsLength; a++) {        ReferenceBinding next=itsInterfaces[a];        for (int b=0; b < nextPosition; b++)         if (next == interfacesToVisit[b])         continue nextInterface;        interfacesToVisit[nextPosition++]=next;      }    }  }  return false;}  }
class C{  public ListMenuPresenter(int itemLayoutRes,int themeRes){  mItemLayoutRes=itemLayoutRes;  mThemeRes=themeRes;}  }
class C{  public void stop(){  _timer.stop();}  }
class C{  public String toString(){  return new StringBuffer().append(getKey()).append('=').append(getValue()).toString();}  }
class C{  public static String americanize(String str){  return americanize(str,staticCapitalizeTimex);}  }
class C{  public void unlikeMedia(InstagramAPIResponseCallback<IGPostResponse> callback,String mediaId){  Call<IGAPIResponse> call=instagramAPIService.deleteMediaLikes(mediaId,getSession().getAccessToken());  call.enqueue(new InstagramAPIResponseManager<>(callback,new TypeToken<IGPostResponse>(){  }.getType()));}  }
class C{  public static byte[] pairHashcodeToBytes(int pairHashcode){  return new byte[]{(byte)(pairHashcode >> 8),(byte)pairHashcode};}  }
class C{  public int size(){  return map.size();}  }
class C{  protected void queue(final Path file) throws InterruptedException {  if (null != base && file.startsWith(base)) {    queue.put(file.subpath(base.getNameCount(),file.getNameCount()));  } else {    queue.put(file);  }}  }
class C{  public void putFloat(float x){  bb.putFloat(space-=4,x);}  }
class C{  public Graph search(){  this.logger.log("info","Starting Fast Adjacency Search.");  graph.removeEdges(graph.getEdges());  sepset=new SepsetMap();  int _depth=depth;  if (_depth == -1) {    _depth=1000;  }  Map<Node,Set<Node>> adjacencies=new HashMap<>();  List<Node> nodes=graph.getNodes();  for (  Node node : nodes) {    adjacencies.put(node,new TreeSet<Node>());  }  for (int d=0; d <= _depth; d++) {    boolean more;    if (d == 0) {      more=searchAtDepth0(nodes,test,adjacencies);    } else {      more=searchAtDepth(nodes,test,adjacencies,d);    }    if (!more) {      break;    }  }  for (int i=0; i < nodes.size(); i++) {    for (int j=i + 1; j < nodes.size(); j++) {      Node x=nodes.get(i);      Node y=nodes.get(j);      if (adjacencies.get(x).contains(y)) {        graph.addUndirectedEdge(x,y);      }    }  }  this.logger.log("info","Finishing Fast Adjacency Search.");  return graph;}  }
class C{  public UsbInterface(int id,int Class,int subClass,int protocol,Parcelable[] endpoints){  mId=id;  mClass=Class;  mSubclass=subClass;  mProtocol=protocol;  mEndpoints=endpoints;}  }
class C{  private void reachablePathFind(Node a,Node b,Node c,LinkedList<Node> reachable,Graph graph){  Set<Node> cParents=new HashSet<>(graph.getParents(c));  Set<Node> visited=new HashSet<>();  visited.add(b);  visited.add(c);  Node e=reachable.getFirst();  int distance=0;  while (reachable.size() > 0) {    Node x=reachable.removeFirst();    visited.add(x);    if (e == x) {      e=x;      distance++;      final int _maxPathLength=maxPathLength == -1 ? 1000 : maxPathLength;      if (distance > 0 && distance > _maxPathLength) {        continue;      }    }    List<Node> pathExtensions=graph.getNodesInTo(x,Endpoint.ARROW);    pathExtensions.removeAll(visited);    for (    Node d : pathExtensions) {      if (!graph.isAdjacentTo(d,c)) {        doDdpOrientation(d,a,b,c,graph);        return;      } else       if (cParents.contains(d)) {        if (graph.getEndpoint(x,d) == Endpoint.ARROW) {          reachable.add(d);        }      }    }  }}  }
class C{  public void popNode(){  transformStack.pop();  checkState(!transformStack.isEmpty());}  }
class C{  public XADatasourceResourceOnStandaloneConfigurationTest(String testName,EnvironmentTestData testData) throws Exception {  super(testName,testData);}  }
class C{  private void spawnAt(Location location){  GlowWorld oldWorld=world;  world.getEntityManager().unregister(this);  world=(GlowWorld)location.getWorld();  world.getEntityManager().register(this);  knownChunks.clear();  chunkLock.clear();  chunkLock=world.newChunkLock(getName());  String type=world.getWorldType().getName().toLowerCase();  session.send(new RespawnMessage(world.getEnvironment().getId(),world.getDifficulty().getValue(),getGameMode().getValue(),type));  setRawLocation(location,false);  streamBlocks();  setCompassTarget(world.getSpawnLocation());  session.send(new PositionRotationMessage(location));  teleportedTo=location.clone();  sendWeather();  sendRainDensity();  sendSkyDarkness();  sendTime();  updateInventory();  if (oldWorld != world) {    EventFactory.callEvent(new PlayerChangedWorldEvent(this,oldWorld));  }}  }
class C{  public boolean remove(int position){  if (position >= 0 && position < mRecords.size()) {    mRecords.remove(position);    if (mRecords.size() == 0) {      mCurrentPosition=-1;    } else     if (mCurrentPosition >= mRecords.size()) {      mCurrentPosition--;    }    notifyObservers();    return true;  }  return false;}  }
class C{  public Set entrySet(){  processQueue();  return hash.entrySet();}  }
class C{  public static boolean doesVplexVpoolContainVolumeStoragePool(Volume volume,VirtualPool newVpool,StringBuffer notSuppReasonBuff){  s_logger.info(String.format("Checking doesVplexVpoolContainVolumeStoragePool for [%s]...",newVpool.getLabel()));  StringSet poolsToCheck=newVpool.getUseMatchedPools() ? newVpool.getMatchedStoragePools() : newVpool.getAssignedStoragePools();  if ((null == poolsToCheck) || !poolsToCheck.contains(volume.getPool().toString())) {    notSuppReasonBuff.append("The target virtual pool ").append(newVpool.getLabel());    notSuppReasonBuff.append(" does not contain the volume's storage pool (");    notSuppReasonBuff.append(volume.getPool()).append(") ");    return false;  }  return true;}  }
class C{  public int addItemToEnd(String productId,BigDecimal amount,BigDecimal quantity,BigDecimal unitPrice,HashMap<String,GenericValue> features,HashMap<String,Object> attributes,String prodCatalogId,String itemType,ProductConfigWrapper configWrapper,LocalDispatcher dispatcher,Boolean triggerExternalOps,Boolean triggerPriceRules) throws CartItemModifyException, ItemNotFoundException {  return addItemToEnd(ShoppingCartItem.makeItem(null,productId,amount,quantity,unitPrice,null,null,null,null,null,features,attributes,prodCatalogId,configWrapper,itemType,null,dispatcher,this,triggerExternalOps,triggerPriceRules,null,Boolean.FALSE,Boolean.FALSE));}  }
class C{  public String signMessage(String message) throws KeyCrypterException {  return signMessage(message,null);}  }
class C{  public void endProcessingNode(){  if (nodeCount.decrementAndGet() == 0 && reporter != null) {    Node node=rootNode.build();    trace.setTimestamp(node.getTimestamp());    trace.setBusinessTransaction(getBusinessTransaction());    trace.getNodes().add(node);    reporter.report(trace);  }}  }
class C{  public CubeScanRangePlanner(GTInfo info,Pair<ByteArray,ByteArray> gtStartAndEnd,TblColRef gtPartitionCol,TupleFilter gtFilter){  this.maxScanRanges=KylinConfig.getInstanceFromEnv().getQueryStorageVisitScanRangeMax();  this.maxFuzzyKeys=KylinConfig.getInstanceFromEnv().getQueryScanFuzzyKeyMax();  this.gtInfo=info;  IGTComparator comp=gtInfo.getCodeSystem().getComparator();  this.rangeStartComparator=RecordComparators.getRangeStartComparator(comp);  this.rangeEndComparator=RecordComparators.getRangeEndComparator(comp);  this.rangeStartEndComparator=RecordComparators.getRangeStartEndComparator(comp);  this.gtFilter=gtFilter;  this.gtStartAndEnd=gtStartAndEnd;  this.gtPartitionCol=gtPartitionCol;}  }
class C{  @Inline public void postAlloc(ObjectReference object){}  }
class C{  public BaseCheckBox(String label,boolean asHTML){  this();  if (asHTML) {    setHTML(label);  } else {    setText(label);  }}  }
class C{  private String portsToString(Set<StoragePort> list){  StringBuilder buf=new StringBuilder();  for (  StoragePort port : list) {    buf.append(port.getPortName() + ", ");  }  return buf.toString();}  }
class C{  public void newInternalMinute(){  if (DEBUG_SHOW_SYNC_CALLS) {    log.debug("newInternalMinute clockMode: {} mrcInit: {} mrcRun: {}",clockMode,mrcSyncInitStateCounter,mrcSyncRunStateCounter);  }  if (clockMode == SYNCMODE_INTERNAL_MASTER) {    Date now=internalClock.getTime();    setTime(now);  }}  }
class C{  public void resetOriginals(){  mStartingStartTrim=0;  mStartingEndTrim=0;  mStartingRotation=0;  setStartTrim(0);  setEndTrim(0);  setRotation(0);}  }
class C{  final public boolean isReadOnly(){  return true;}  }
class C{  public double[] asRadiansArray(){  return new double[]{this.getLatitude().radians,this.getLongitude().radians};}  }
class C{  public AbstractExpandableHeaderItem(){  setHidden(false);  setExpanded(true);  setSelectable(false);}  }
class C{  public void test() throws Exception {  Map<StateMachine<S,E>,LatchStateMachineListener<S,E>> listeners=new HashMap<StateMachine<S,E>,LatchStateMachineListener<S,E>>();  for (  StateMachine<S,E> stateMachine : stateMachines.values()) {    LatchStateMachineListener<S,E> listener=new LatchStateMachineListener<S,E>();    listeners.put(stateMachine,listener);    stateMachine.addStateListener(listener);  }  log.info("Running test plan for machines " + StringUtils.collectionToCommaDelimitedString(stateMachines.values()));  int stepCounter=0;  for (  StateMachineTestPlanStep<S,E> step : steps) {    log.info("Running test plan step " + stepCounter++);    for (    LatchStateMachineListener<S,E> listener : listeners.values()) {      listener.reset(step.expectStateChanged != null ? step.expectStateChanged : 0,step.expectStateEntered != null ? step.expectStateEntered : 0,step.expectStateExited != null ? step.expectStateExited : 0,step.expectEventNotAccepted != null ? step.expectEventNotAccepted : 0,step.expectTransition != null ? step.expectTransition : 0,step.expectTransitionStarted != null ? step.expectTransitionStarted : 0,step.expectTransitionEnded != null ? step.expectTransitionEnded : 0,step.expectStateMachineStarted != null ? step.expectStateMachineStarted : 0,step.expectStateMachineStopped != null ? step.expectStateMachineStopped : 0,step.expectExtendedStateChanged != null ? step.expectExtendedStateChanged : 0);    }    for (    StateMachine<S,E> stateMachine : stateMachines.values()) {      stateMachine.start();    }    if (step.expectStateMachineStarted != null) {      for (      Entry<StateMachine<S,E>,LatchStateMachineListener<S,E>> entry : listeners.entrySet()) {        assertThat("StateMachineStarted Await not matched for machine " + entry.getKey(),entry.getValue().getStateMachineStartedLatch().await(defaultAwaitTime,TimeUnit.SECONDS),is(true));        assertThat("StateMachineStarted count not matched for machine " + entry.getKey(),entry.getValue().getStateMachineStarted().size(),is(step.expectStateMachineStarted));      }    }    if (!step.sendEvent.isEmpty()) {      ArrayList<StateMachine<S,E>> sendVia=new ArrayList<StateMachine<S,E>>();      if (step.sendEventMachineId != null) {        sendVia.add(stateMachines.get(step.sendEventMachineId));      } else       if (step.sendEventToAll) {        sendVia.addAll(stateMachines.values());      } else {        sendVia.add(stateMachines.values().iterator().next());      }      assertThat("Error finding machine to send via",sendVia,not(empty()));      if (!step.sendEventParallel) {        for (        StateMachine<S,E> machine : sendVia) {          for (          E event : step.sendEvent) {            log.info("Sending test event " + event + " via machine "+ machine);            machine.sendEvent(event);          }        }      } else {        for (        E event : step.sendEvent) {          sendEventParallel(sendVia,event);        }      }    } else     if (!step.sendMessage.isEmpty()) {      ArrayList<StateMachine<S,E>> sendVia=new ArrayList<StateMachine<S,E>>();      if (step.sendEventMachineId != null) {        sendVia.add(stateMachines.get(step.sendEventMachineId));      } else       if (step.sendEventToAll) {        sendVia.addAll(stateMachines.values());      } else {        sendVia.add(stateMachines.values().iterator().next());      }      assertThat("Error finding machine to send via",sendVia,not(empty()));      for (      StateMachine<S,E> machine : sendVia) {        for (        Message<E> event : step.sendMessage) {          log.info("Sending test event " + event + " via machine "+ machine);          machine.sendEvent(event);        }      }    }    if (step.expectStateChanged != null) {      for (      Entry<StateMachine<S,E>,LatchStateMachineListener<S,E>> entry : listeners.entrySet()) {        assertThat("StateChanged Await not matched for machine " + entry.getKey(),entry.getValue().getStateChangedLatch().await(defaultAwaitTime,TimeUnit.SECONDS),is(true));        assertThat("StateChanged count not matched for machine " + entry.getKey(),entry.getValue().getStateChanged().size(),is(step.expectStateChanged));      }    }    if (step.expectStateEntered != null) {      for (      LatchStateMachineListener<S,E> listener : listeners.values()) {        assertThat(listener.getStateEnteredLatch().await(defaultAwaitTime,TimeUnit.SECONDS),is(true));        assertThat(listener.getStateEntered().size(),is(step.expectStateEntered));      }    }    if (step.expectStateExited != null) {      for (      LatchStateMachineListener<S,E> listener : listeners.values()) {        assertThat(listener.getStateExitedLatch().await(defaultAwaitTime,TimeUnit.SECONDS),is(true));        assertThat(listener.getStateExited().size(),is(step.expectStateExited));      }    }    if (step.expectEventNotAccepted != null) {      for (      LatchStateMachineListener<S,E> listener : listeners.values()) {        assertThat(listener.getEventNotAcceptedLatch().await(defaultAwaitTime,TimeUnit.SECONDS),is(true));        assertThat(listener.getEventNotAccepted().size(),is(step.expectEventNotAccepted));      }    }    if (step.expectTransition != null) {      for (      LatchStateMachineListener<S,E> listener : listeners.values()) {        assertThat(listener.getTransitionLatch().await(defaultAwaitTime,TimeUnit.SECONDS),is(true));        assertThat(listener.getTransition().size(),is(step.expectTransition));      }    }    if (step.expectTransitionStarted != null) {      for (      LatchStateMachineListener<S,E> listener : listeners.values()) {        assertThat(listener.getTransitionStartedLatch().await(defaultAwaitTime,TimeUnit.SECONDS),is(true));        assertThat(listener.getTransitionStarted().size(),is(step.expectTransitionStarted));      }    }    if (step.expectTransitionEnded != null) {      for (      LatchStateMachineListener<S,E> listener : listeners.values()) {        assertThat(listener.getTransitionEndedLatch().await(defaultAwaitTime,TimeUnit.SECONDS),is(true));        assertThat(listener.getTransitionEnded().size(),is(step.expectTransitionEnded));      }    }    if (step.expectStateMachineStopped != null) {      for (      LatchStateMachineListener<S,E> listener : listeners.values()) {        assertThat(listener.getStateMachineStoppedLatch().await(defaultAwaitTime,TimeUnit.SECONDS),is(true));        assertThat(listener.getStateMachineStopped().size(),is(step.expectStateMachineStopped));      }    }    if (!step.expectStates.isEmpty()) {      for (      StateMachine<S,E> stateMachine : stateMachines.values()) {        assertThat(stateMachine.getState(),notNullValue());        Collection<Matcher<? super S>> itemMatchers=new ArrayList<Matcher<? super S>>();        for (        S expectState : step.expectStates) {          itemMatchers.add(is(expectState));        }        assertThat(stateMachine.getState().getIds(),containsInAnyOrder(itemMatchers));      }    }    if (!step.expectStatesEntrered.isEmpty()) {      for (      LatchStateMachineListener<S,E> listener : listeners.values()) {        Collection<S> states=new ArrayList<S>();        for (        State<S,E> s : listener.getStateEntered()) {          states.add(s.getId());        }        assertThat(step.expectStatesEntrered,contains(states.toArray()));      }    }    if (!step.expectStatesExited.isEmpty()) {      for (      LatchStateMachineListener<S,E> listener : listeners.values()) {        Collection<S> states=new ArrayList<S>();        for (        State<S,E> s : listener.getStateExited()) {          states.add(s.getId());        }        assertThat(step.expectStatesExited,contains(states.toArray()));      }    }    if (step.expectExtendedStateChanged != null) {      for (      LatchStateMachineListener<S,E> listener : listeners.values()) {        assertThat(listener.getExtendedStateChangedLatch().await(defaultAwaitTime,TimeUnit.SECONDS),is(true));        assertThat(listener.getExtendedStateChanged().size(),is(step.expectExtendedStateChanged));      }    }    if (!step.expectVariableKeys.isEmpty()) {      for (      StateMachine<S,E> stateMachine : stateMachines.values()) {        Map<Object,Object> variables=stateMachine.getExtendedState().getVariables();        for (        Object key : step.expectVariableKeys) {          assertThat("Key " + key + " doesn't exist in extended state variables",variables.containsKey(key),is(true));        }      }    }    if (!step.expectVariables.isEmpty()) {      for (      StateMachine<S,E> stateMachine : stateMachines.values()) {        Map<Object,Object> variables=stateMachine.getExtendedState().getVariables();        for (        Entry<Object,Object> entry : step.expectVariables.entrySet()) {          assertThat("Key " + entry.getKey() + " doesn't exist in extended state variables",variables.containsKey(entry.getKey()),is(true));          assertThat("Variable " + entry.getKey() + " doesn't match in extended state variables",variables.get(entry.getKey()),is(entry.getValue()));        }      }    }  }}  }
class C{  private void animateProperty(int constantName,float toValue){  float fromValue=getValue(constantName);  float deltaValue=toValue - fromValue;  animatePropertyBy(constantName,fromValue,deltaValue);}  }
class C{  public static int darker(int c){  return rgba(Math.max(0,(int)(scale * red(c))),Math.max(0,(int)(scale * green(c))),Math.max(0,(int)(scale * blue(c))),alpha(c));}  }
class C{  public void increment(int i1,int i2,int d){  boundsCheck(i1,i2);  expandFor(i1,i2,d);  vector[i1][i2]++;}  }
class C{  public static <T>Mapping<T> ignored(T instead){  String mname="ignored to " + instead;  return new FieldMapping<>(InputMode.POLYMORPHIC,(null),new MappingMeta(mname,instead.getClass())).options(null);}  }
class C{  Symbol thisSym(DiagnosticPosition pos,Env<AttrContext> env){  return rs.resolveSelf(pos,env,env.enclClass.sym,names._this);}  }
class C{  @Override public String toString(){  final StringBuilder sb=new StringBuilder();  final String thisSimpleName=this.getClass().getSimpleName();  sb.append(LS);  sb.append("### ").append(thisSimpleName).append(" SUMMARY: ").append(LS);  sb.append("Max k: ").append(ReservoirSize.decodeValue(encodedMaxK_)).append(LS);  if (gadget_ == null) {    sb.append("Gadget is null").append(LS);  } else {    sb.append("Gadget summary: ").append(gadget_.toString());  }  sb.append("### END UNION SUMMARY").append(LS);  return sb.toString();}  }
class C{  private boolean areClose(Word[] wordsA,Word[] wordsB,int threshold,boolean isTrace) throws AdeException {  final int oldThreshold=LevenshteinTextSummary.getThreshold();  LevenshteinTextSummary.setThreshold(threshold);  final int distance=LevenshteinTextSummary.calcDistance(wordsA,wordsB);  LevenshteinTextSummary.setThreshold(oldThreshold);  boolean magicMatch=true;  if (distance <= threshold) {    magicMatch=doMagicWordsMatch(wordsA,wordsB);  }  final int debugMessageIdGeneration=Ade.getAde().getConfigProperties().debug().isDebugMessageIdGeneration();  if (debugMessageIdGeneration >= 0 && isTrace && debugMessageIdGeneration > (distance - threshold)) {    logger.info("comparing " + Arrays.asList(wordsA));    logger.info("      and " + Arrays.asList(wordsB));    logger.info("                       distance: " + distance + " threshold: "+ threshold+ "          ["+ m_componentName+ "]");    if (magicMatch) {      logger.info("                       magic: " + magicMatch);    }    if (distance <= threshold && magicMatch) {      logger.info("      ==================================================================== " + distance + " "+ threshold+ "   ("+ wordsA.length+ ","+ wordsB.length+ ") ==["+ m_componentName+ "]");    }  }  return distance <= threshold && magicMatch;}  }
class C{  public Instance q(){  return m_Instances.instance(idx);}  }
class C{  static double svd_dmax(double a,double b){  return Math.max(a,b);}  }
class C{  public WMerge(){  log.info("VMerge.init - WinNo=" + m_WindowNo);  try {    preInit();    zkInit();  } catch (  Exception ex) {    log.log(Level.SEVERE,"",ex);  }}  }
class C{  public void buildClassifier(Instances D) throws Exception {  int L=D.classIndex();  int featlength=(D.numAttributes() - L) * 2;  int numSamples=D.numInstances();  int classlength=L * 2;  if (this.order == null) {    order=new ArrayList<Integer>();    for (int j=0; j < D.numInstances(); j++) {      order.add(j);    }  }  if (numFeatures == -1) {    initARAM(featlength,classlength,roa,threshold);  } else {    if (featlength != numFeatures) {      return;    }    if (classlength != numClasses) {      return;    }  }  for (int i=0; i < D.numInstances(); i++) {    Instance instance=D.get(order.get(i));    updateClassifier(instance);  }  System.out.println("Training done, used " + numCategories + " neurons with rho ="+ roa+ ".");}  }
class C{  public void write(byte[] buffer,int offset,int length,boolean isEnd) throws IOException {  if (_isClosed)   return;  for (int i=0; i < length; i++)   _byteToChar.addByte(buffer[offset + i]);  _byteToChar.flush();}  }
class C{  private ReliableSpoolDirectoryTailFileEventReader(File spoolDirectory,String completedSuffix,String ignorePattern,String targetPattern,String targetFilename,String trackerDirPath,boolean annotateFileName,String fileNameHeader,boolean annotateBaseName,String baseNameHeader,String deserializerType,Context deserializerContext,String deletePolicy,String inputCharset,DecodeErrorPolicy decodeErrorPolicy,ConsumeOrder consumeOrder) throws IOException {  Preconditions.checkNotNull(spoolDirectory);  Preconditions.checkNotNull(completedSuffix);  Preconditions.checkNotNull(ignorePattern);  Preconditions.checkNotNull(targetPattern);  Preconditions.checkNotNull(targetFilename);  Preconditions.checkNotNull(trackerDirPath);  Preconditions.checkNotNull(deserializerType);  Preconditions.checkNotNull(deserializerContext);  Preconditions.checkNotNull(deletePolicy);  Preconditions.checkNotNull(inputCharset);  if (!deletePolicy.equalsIgnoreCase(DeletePolicy.NEVER.name()) && !deletePolicy.equalsIgnoreCase(DeletePolicy.IMMEDIATE.name())) {    throw new IllegalArgumentException("Delete policies other than " + "NEVER and IMMEDIATE are not yet supported");  }  if (logger.isDebugEnabled()) {    logger.debug("Initializing {} with directory={}, metaDir={}, " + "deserializer={}",new Object[]{ReliableSpoolDirectoryTailFileEventReader.class.getSimpleName(),spoolDirectory,trackerDirPath,deserializerType});  }  Preconditions.checkState(spoolDirectory.exists(),"Directory does not exist: " + spoolDirectory.getAbsolutePath());  Preconditions.checkState(spoolDirectory.isDirectory(),"Path is not a directory: " + spoolDirectory.getAbsolutePath());  try {    File canary=File.createTempFile("flume-spooldir-perm-check-",".canary",spoolDirectory);    Files.write("testing flume file permissions\n",canary,Charsets.UTF_8);    List<String> lines=Files.readLines(canary,Charsets.UTF_8);    Preconditions.checkState(!lines.isEmpty(),"Empty canary file %s",canary);    if (!canary.delete()) {      throw new IOException("Unable to delete canary file " + canary);    }    logger.debug("Successfully created and deleted canary file: {}",canary);  } catch (  IOException e) {    throw new FlumeException("Unable to read and modify files" + " in the spooling directory: " + spoolDirectory,e);  }  this.spoolDirectory=spoolDirectory;  this.completedSuffix=completedSuffix;  this.deserializerType=deserializerType;  this.deserializerContext=deserializerContext;  this.annotateFileName=annotateFileName;  this.fileNameHeader=fileNameHeader;  this.annotateBaseName=annotateBaseName;  this.baseNameHeader=baseNameHeader;  this.ignorePattern=Pattern.compile(ignorePattern);  this.targetPattern=Pattern.compile(targetPattern);  this.targetFilename=targetFilename;  this.deletePolicy=deletePolicy;  this.inputCharset=Charset.forName(inputCharset);  this.decodeErrorPolicy=Preconditions.checkNotNull(decodeErrorPolicy);  this.consumeOrder=Preconditions.checkNotNull(consumeOrder);  File trackerDirectory=new File(trackerDirPath);  if (!trackerDirectory.isAbsolute()) {    trackerDirectory=new File(spoolDirectory,trackerDirPath);  }  if (!trackerDirectory.exists()) {    if (!trackerDirectory.mkdir()) {      throw new IOException("Unable to mkdir nonexistent meta directory " + trackerDirectory);    }  }  if (!trackerDirectory.isDirectory()) {    throw new IOException("Specified meta directory is not a directory" + trackerDirectory);  }  this.metaFile=new File(trackerDirectory,metaFileName);}  }
class C{  public MediaConfig createChannelImageAttachment(String file,MediaConfig config){  config.addCredentials(this);  String xml=POSTIMAGE(this.url + "/create-channel-attachment",file,config.name,config.toXML());  Element root=parse(xml);  if (root == null) {    return null;  }  try {    MediaConfig media=new MediaConfig();    media.parseXML(root);    return media;  } catch (  Exception exception) {    this.exception=SDKException.parseFailure(exception);    throw this.exception;  }}  }
class C{  public void addSongId(final Long songId,final String songName,final String albumName,final String artistName){  if (songId == null || songName == null || albumName == null || artistName == null) {    return;  }  final Long playCount=getPlayCount(songId);  final SQLiteDatabase database=getWritableDatabase();  final ContentValues values=new ContentValues(5);  database.beginTransaction();  values.put(FavoriteColumns.ID,songId);  values.put(FavoriteColumns.SONGNAME,songName);  values.put(FavoriteColumns.ALBUMNAME,albumName);  values.put(FavoriteColumns.ARTISTNAME,artistName);  values.put(FavoriteColumns.PLAYCOUNT,playCount != 0 ? playCount + 1 : 1);  database.delete(FavoriteColumns.NAME,FavoriteColumns.ID + " = ?",new String[]{String.valueOf(songId)});  database.insert(FavoriteColumns.NAME,null,values);  database.setTransactionSuccessful();  database.endTransaction();}  }
class C{  private NamedList<NamedList> analyzeValues(FieldAnalysisRequest analysisRequest,FieldType fieldType,String fieldName){  final String queryValue=analysisRequest.getQuery();  final Set<BytesRef> termsToMatch=(queryValue != null && analysisRequest.isShowMatch()) ? getQueryTokenSet(queryValue,fieldType.getQueryAnalyzer()) : EMPTY_BYTES_SET;  NamedList<NamedList> analyzeResults=new SimpleOrderedMap<>();  if (analysisRequest.getFieldValue() != null) {    AnalysisContext context=new AnalysisContext(fieldName,fieldType,fieldType.getIndexAnalyzer(),termsToMatch);    NamedList analyzedTokens=analyzeValue(analysisRequest.getFieldValue(),context);    analyzeResults.add("index",analyzedTokens);  }  if (analysisRequest.getQuery() != null) {    AnalysisContext context=new AnalysisContext(fieldName,fieldType,fieldType.getQueryAnalyzer());    NamedList analyzedTokens=analyzeValue(analysisRequest.getQuery(),context);    analyzeResults.add("query",analyzedTokens);  }  return analyzeResults;}  }
class C{  public NullHandle(Figure owner,Locator locator){  super(owner,locator);}  }
class C{  public Connection createConnection(ConnectionFactory cf) throws JMSException {  Connection connection=cf.createConnection();  if (getClientID() != null) {    connection.setClientID(getClientID());  }  return connection;}  }
class C{  @Override public <K extends ValueKind<K>>K toRegisterKind(K kind){switch ((AArch64Kind)kind.getPlatformKind()) {case BYTE:case WORD:    return kind.changeType(AArch64Kind.DWORD);default :  return kind;}}  }
class C{  public static <T>boolean removeAllIterable(Iterable<? extends T> iterable,Collection<T> targetCollection){  if (iterable == null) {    throw new NullPointerException();  }  if (iterable instanceof Collection<?>) {    return targetCollection.removeAll((Collection<T>)iterable);  }  int oldSize=targetCollection.size();  Iterate.forEachWith(iterable,Procedures2.removeFromCollection(),targetCollection);  return targetCollection.size() != oldSize;}  }
class C{  public static void println(boolean x){  out.println(x);}  }
class C{  public JTidyDocumentBuilderFactory(DocumentBuilderSetting[] settings) throws DOMTestIncompatibleException {  super(settings);  try {    ClassLoader classLoader=ClassLoader.getSystemClassLoader();    Class tidyClass=classLoader.loadClass("org.w3c.tidy.Tidy");    tidyConstructor=tidyClass.getConstructor(NO_CLASSES);    parseDOMMethod=tidyClass.getMethod("parseDOM",new Class[]{java.io.InputStream.class,java.io.OutputStream.class});    domImpl=new JTidyDOMImplementation();  } catch (  Exception ex) {    throw new DOMTestIncompatibleException(ex,null);  }  if (settings != null) {    for (int i=0; i < settings.length; i++) {    }  }}  }
class C{  public static void localizeProduct(DataService dm,long objKey,String... locales) throws NonUniqueBusinessKeyException {  for (  String locale : locales) {    localizeProduct(dm,objKey,locale);  }}  }
class C{  public PubsubFuture<List<ReceivedMessage>> pull(final String project,final String subscription,final boolean returnImmediately,final int maxMessages){  return pull(Subscription.canonicalSubscription(project,subscription),returnImmediately,maxMessages);}  }
class C{  public InputStream executeAndReturnStdoutAsInputStream(String[] rawArgs,boolean mergeArgsWithDefaultOptions) throws IOException, InterruptedException, MameExecutionException {  return this.initMameProcess(rawArgs,false,mergeArgsWithDefaultOptions).getInputStream();}  }
class C{  public static void cleanDirectory(File directory) throws IOException {  if (!directory.exists()) {    String message=directory + " does not exist";    throw new IllegalArgumentException(message);  }  if (!directory.isDirectory()) {    String message=directory + " is not a directory";    throw new IllegalArgumentException(message);  }  File[] files=directory.listFiles();  if (files == null) {    throw new IOException("Failed to list contents of " + directory);  }  IOException exception=null;  for (  File file : files) {    try {      forceDelete(file);    } catch (    IOException ioe) {      exception=ioe;    }  }  if (null != exception) {    throw exception;  }}  }
class C{  public Attribute(String name,Object value){  if (name == null) {    throw new RuntimeOperationsException(new IllegalArgumentException("Attribute name cannot be null "));  }  this.name=name;  this.value=value;}  }
class C{  public NotificationChain basicSetSuperClassExpression(Expression newSuperClassExpression,NotificationChain msgs){  Expression oldSuperClassExpression=superClassExpression;  superClassExpression=newSuperClassExpression;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.N4_CLASS_DEFINITION__SUPER_CLASS_EXPRESSION,oldSuperClassExpression,newSuperClassExpression);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public static void trace(byte level,String s,Throwable t){  if (s == null)   return;  if (level == SEVERE) {    if (!logged.contains(s)) {      AngularCLIPlugin.getDefault().getLog().log(new Status(IStatus.ERROR,AngularCLIPlugin.PLUGIN_ID,s,t));      logged.add(s);    }  }  if (!Angular2CorePlugin.getDefault().isDebugging())   return;  StringBuilder sb=new StringBuilder(AngularCLIPlugin.PLUGIN_ID);  sb.append(" ");  sb.append(levelNames[level]);  sb.append(" ");  sb.append(sdf.format(new Date()));  sb.append(" ");  sb.append(s);  System.out.println(sb.toString());  if (t != null)   t.printStackTrace();}  }
class C{  public static void removeSessionAttribute(final HttpServletRequest request,final String parameter){  final HttpSession session=request.getSession();  session.removeAttribute(parameter);}  }
class C{  private void processHDU(HDUMessage hdu){  if (hdu.isValid()) {    broadcast(new DecoderStateEvent(this,Event.START,State.CALL));    String to=hdu.getToID();    updateTo(to);    if (mCurrentCallEvent == null) {      mCurrentCallEvent=new P25CallEvent.Builder(CallEventType.CALL).aliasList(getAliasList()).channel(mCurrentChannel).details((hdu.isEncrypted() ? "ENCRYPTED " : "")).frequency(mCurrentChannelFrequency).to(to).build();      broadcast(mCurrentCallEvent);    }  }}  }
class C{  public String formatShortDate(Date date){  return DateFormat.getDateInstance(DateFormat.SHORT).format(date);}  }
class C{  protected static EventType createEventType(StatementContext statementContext){  Map<String,Object> eventTypeMap=new HashMap<String,Object>();  eventTypeMap.put(PROPERTY_NAME,Long.class);  return statementContext.getEventAdapterService().createAnonymousMapType("test",eventTypeMap,true);}  }
class C{  public String toDebugString(){  String info="ELEMENT RESOURCE: " + resource;  return info;}  }
class C{  public DialogueImporter(DialogueSystem system,List<DialogueState> turns){  this.system=system;  this.turns=turns;}  }
class C{  @Override public boolean index(Resource resource,Resource parentReference){  return false;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MAllocationLine[");  sb.append(get_ID());  if (getC_Payment_ID() != 0)   sb.append(",C_Payment_ID=").append(getC_Payment_ID());  if (getC_CashLine_ID() != 0)   sb.append(",C_CashLine_ID=").append(getC_CashLine_ID());  if (getC_Invoice_ID() != 0)   sb.append(",C_Invoice_ID=").append(getC_Invoice_ID());  if (getC_BPartner_ID() != 0)   sb.append(",C_BPartner_ID=").append(getC_BPartner_ID());  sb.append(", Amount=").append(getAmount()).append(",Discount=").append(getDiscountAmt()).append(",WriteOff=").append(getWriteOffAmt()).append(",OverUnder=").append(getOverUnderAmt());  sb.append("]");  return sb.toString();}  }
class C{  public static void isNotInstanceOf(String argumentName,Object argumentObject,Class<?> targetClass){  notNull(argumentName,argumentObject);  if (targetClass.isInstance(argumentObject)) {    throw new IllegalArgumentException(argumentName + " cannot be an instance of " + targetClass.getName());  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:05.755 -0500",hash_original_method="DA59C13162065C9078238D65B3CED27B",hash_generated_method="BDC188C397D3D22DBF33660CA36E5EA8") public static Bitmap decodeResourceStream(Resources res,TypedValue value,InputStream is,Rect pad,Options opts){  if (opts == null) {    opts=new Options();  }  if (opts.inDensity == 0 && value != null) {    final int density=value.density;    if (density == TypedValue.DENSITY_DEFAULT) {      opts.inDensity=DisplayMetrics.DENSITY_DEFAULT;    } else     if (density != TypedValue.DENSITY_NONE) {      opts.inDensity=density;    }  }  if (opts.inTargetDensity == 0 && res != null) {    opts.inTargetDensity=res.getDisplayMetrics().densityDpi;  }  return decodeStream(is,pad,opts);}  }
class C{  private double normalize(int d,double val){  d=(mean.length == 1) ? 0 : d;  return (val - mean[d]) / stddev[d];}  }
class C{  public List<Object> syncAndReturnAll(){  List<Object> formatted=new ArrayList<Object>();  for (  Client client : clients) {    formatted.add(generateResponse(client.getOne()).get());  }  return formatted;}  }
class C{  public void addCastClassForContainer(Class<?> clazz){  if (TestUsageChecker.canUse(clazz)) {    CastClassManager.getInstance().addCastClass(clazz,1);    clearGeneratorCache(new GenericClass(clazz));  }}  }
class C{  public DispatchingEventReplayer<T> inAscendingOrder(){  return new DispatchingEventReplayer<>(causalOrderComparator,dispatcher,eventReplayer.inAscendingOrder());}  }
class C{  private void validateStorageFiles(List<StorageFile> storageFiles,StorageUnitEntity storageUnitEntity,boolean validatePathPrefix,boolean validateFileExistence,boolean validateFileSize){  Map<String,StorageFileEntity> storageFileEntities=storageFileHelper.getStorageFileEntitiesMap(storageUnitEntity.getStorageFiles());  String directoryPath=null;  String directoryPathWithTrailingSlash=null;  if (StringUtils.isNotBlank(storageUnitEntity.getDirectoryPath())) {    directoryPath=storageUnitEntity.getDirectoryPath();    directoryPathWithTrailingSlash=StringUtils.appendIfMissing(directoryPath,"/");    for (    StorageFile storageFile : storageFiles) {      Assert.isTrue(storageFile.getFilePath().startsWith(directoryPathWithTrailingSlash),String.format("Storage file path \"%s\" does not match the storage directory path \"%s\".",storageFile.getFilePath(),directoryPathWithTrailingSlash));    }  } else   if (validatePathPrefix || validateFileExistence) {    directoryPath=s3KeyPrefixHelper.buildS3KeyPrefix(storageUnitEntity.getStorage(),storageUnitEntity.getBusinessObjectData().getBusinessObjectFormat(),businessObjectDataHelper.getBusinessObjectDataKey(storageUnitEntity.getBusinessObjectData()));    directoryPathWithTrailingSlash=StringUtils.appendIfMissing(directoryPath,"/");    for (    StorageFile storageFile : storageFiles) {      Assert.isTrue(storageFile.getFilePath().startsWith(directoryPathWithTrailingSlash),String.format("Specified storage file path \"%s\" does not match the expected S3 key prefix \"%s\".",storageFile.getFilePath(),directoryPathWithTrailingSlash));    }  }  if (StringUtils.isNotBlank(directoryPath)) {    List<String> requestStorageFilePaths=storageFileHelper.getFilePathsFromStorageFiles(storageFiles);    List<String> registeredStorageFilePaths=storageFileDao.getStorageFilesByStorageAndFilePathPrefix(storageUnitEntity.getStorage().getName(),directoryPathWithTrailingSlash);    registeredStorageFilePaths.retainAll(requestStorageFilePaths);    if (!CollectionUtils.isEmpty(registeredStorageFilePaths)) {      StorageFileEntity storageFileEntity=storageFileDao.getStorageFileByStorageNameAndFilePath(storageUnitEntity.getStorage().getName(),registeredStorageFilePaths.get(0));      throw new AlreadyExistsException(String.format("S3 file \"%s\" in \"%s\" storage is already registered by the business object data {%s}.",registeredStorageFilePaths.get(0),storageUnitEntity.getStorage().getName(),businessObjectDataHelper.businessObjectDataEntityAltKeyToString(storageFileEntity.getStorageUnit().getBusinessObjectData())));    }  } else {    for (    StorageFile storageFile : storageFiles) {      StorageFileEntity storageFileEntity=storageFileDao.getStorageFileByStorageNameAndFilePath(storageUnitEntity.getStorage().getName(),storageFile.getFilePath());      if (storageFileEntity != null) {        throw new AlreadyExistsException(String.format("S3 file \"%s\" in \"%s\" storage is already registered by the business object data {%s}.",storageFile.getFilePath(),storageUnitEntity.getStorage().getName(),businessObjectDataHelper.businessObjectDataEntityAltKeyToString(storageFileEntity.getStorageUnit().getBusinessObjectData())));      }    }  }  if (validateFileExistence) {    S3FileTransferRequestParamsDto params=storageHelper.getS3BucketAccessParams(storageUnitEntity.getStorage());    params.setS3KeyPrefix(directoryPathWithTrailingSlash);    Map<String,StorageFile> actualS3Keys=storageFileHelper.getStorageFilesMapFromS3ObjectSummaries(s3Service.listDirectory(params,true));    for (    Map.Entry<String,StorageFileEntity> entry : storageFileEntities.entrySet()) {      storageFileHelper.validateStorageFileEntity(entry.getValue(),params.getS3BucketName(),actualS3Keys,validateFileSize);    }    for (    StorageFile storageFile : storageFiles) {      storageFileHelper.validateStorageFile(storageFile,params.getS3BucketName(),actualS3Keys,validateFileSize);    }  }}  }
class C{  public int hashCode(){  int hc=mode.hashCode() ^ currentMode.hashCode();  if (modeMap != null)   hc^=modeMap.hashCode();  return hc;}  }
class C{  public CActionSelectByCriteria(final CGraphPanel navi,final boolean showIcon){  super("Select by Criteria");  m_panel=Preconditions.checkNotNull(navi,"IE02829: navi argument can not be null");  if (showIcon) {    putValue(SMALL_ICON,new ImageIcon(CMain.class.getResource("data/selcriteria_up.jpg")));  }  putValue(Action.SHORT_DESCRIPTION,"Select by Criteria");}  }
class C{  public ClientConfig withMaxRetries(int maxRetries){  setMaxRetries(maxRetries);  return this;}  }
class C{  public static void moveFile(Path from,Path to){  try {    Files.move(from,to,ATOMIC_MOVE);  } catch (  IOException ex) {    LOGGER.warning("Error moving file " + from + ": "+ ex);    System.out.println("Error moving file " + from + ": "+ ex);    try {      Files.move(from,to,REPLACE_EXISTING);    } catch (    IOException ex2) {      LOGGER.warning("Error moving file " + from + " (2): "+ ex2);      System.out.println("Error moving file " + from + " (2): "+ ex2);    }  }}  }
class C{  public static ReilInstruction createBsh(final long offset,final OperandSize firstSize,final String firstValue,final OperandSize secondSize,final String secondValue,final OperandSize thirdSize,final String thirdValue){  return createTrinaryInstruction(ReilHelpers.OPCODE_BSH,new CAddress(offset),firstSize,firstValue,secondSize,secondValue,thirdSize,thirdValue);}  }
class C{  public static QueryAssociatedCapabilityForLun parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  QueryAssociatedCapabilityForLun object=new QueryAssociatedCapabilityForLun();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"queryAssociatedCapabilityForLun".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (QueryAssociatedCapabilityForLun)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    java.util.ArrayList list1=new java.util.ArrayList();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","lunUniqueId").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if ("true".equals(nillableValue) || "1".equals(nillableValue)) {        list1.add(null);        reader.next();      } else {        list1.add(reader.getElementText());      }      boolean loopDone1=false;      while (!loopDone1) {        while (!reader.isEndElement()) {          reader.next();        }        reader.next();        while (!reader.isStartElement() && !reader.isEndElement()) {          reader.next();        }        if (reader.isEndElement()) {          loopDone1=true;        } else {          if (new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","lunUniqueId").equals(reader.getName())) {            nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {              list1.add(null);              reader.next();            } else {              list1.add(reader.getElementText());            }          } else {            loopDone1=true;          }        }      }      object.setLunUniqueId((java.lang.String[])list1.toArray(new java.lang.String[list1.size()]));    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public MbFanSearchRunner(DataWrapper dataWrapper,Parameters params,KnowledgeBoxModel knowledgeBoxModel){  super(dataWrapper,params,knowledgeBoxModel);}  }
class C{  public T element(int i){  return elements.get(i);}  }
class C{  protected void sequence_TInterface(ISerializationContext context,TInterface semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public void testConnection(String billingId) throws BillingApplicationException {  newBillingPluginProxy(billingId).testConnection();}  }
class C{  public void init(SecureRandom random) throws IllegalArgumentException {}  }
class C{  public void testDoCheckWithNotEmptyText(){  LOGGER.debug("doCheckWithNotEmptyText");  elements.add(element);  mockTestSolutionHandler.addTestSolution(TestSolution.PASSED);  expectLastCall().once();  expect(mockTextElementBuilder.buildTextFromElement(element)).andReturn("something");  TextEmptinessChecker instance=new TextEmptinessChecker(mockTextElementBuilder,TEXT_EMPTY_MSG,null);  instance.setProcessRemarkService(mockProcessRemarkService);  replay(mockTextElementBuilder,mockSSPHandler,mockTestSolutionHandler,mockProcessRemarkService);  instance.doCheck(mockSSPHandler,elements,mockTestSolutionHandler);  verify(mockTextElementBuilder,mockSSPHandler,mockTestSolutionHandler,mockProcessRemarkService);}  }
class C{  private void writeCounts(String outputFolder,Counts<Link> countsMap,String countsName){  String fileName=outputFolder + this.createFilename(TAXI_PREFIX,countsName);  try {    BufferedWriter bw=new BufferedWriter(new FileWriter(new File(fileName)));    bw.write(this.header);    for (int i=0; i < 25; i++) {      bw.write(separator + i);    }    for (    Entry<Id<Link>,Count<Link>> linkId2Count : countsMap.getCounts().entrySet()) {      bw.newLine();      bw.write(linkId2Count.getKey().toString());      Link link=this.scenario.getNetwork().getLinks().get(linkId2Count.getKey());      bw.write(separator + link.getFromNode().getCoord().getX());      bw.write(separator + link.getFromNode().getCoord().getY());      bw.write(separator + link.getToNode().getCoord().getX());      bw.write(separator + link.getToNode().getCoord().getY());      double sum=0.0;      for (      Volume volume : linkId2Count.getValue().getVolumes().values()) {        sum+=volume.getValue();      }      bw.write(separator + sum);      for (int i=0; i < 25; i++) {        double value=0.0;        if (linkId2Count.getValue().getVolume(i + 1) != null) {          value=linkId2Count.getValue().getVolume(i + 1).getValue();        }        bw.write(separator + value);      }    }    bw.close();    log.info("Output written to " + fileName);  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  @Deprecated public int checkNumberOfInnerOperators(){  return 0;}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.paint=SerialUtilities.readPaint(stream);  this.stroke=SerialUtilities.readStroke(stream);}  }
class C{  private List<AnalyticJob> readApps(URL url) throws IOException, AuthenticationException {  List<AnalyticJob> appList=new ArrayList<AnalyticJob>();  JsonNode rootNode=readJsonNode(url);  JsonNode apps=rootNode.path("apps").path("app");  for (  JsonNode app : apps) {    String appId=app.get("id").getValueAsText();    if (_lastTime > 0 || (_lastTime == 0 && AppResult.find.byId(appId) == null)) {      String user=app.get("user").getValueAsText();      String name=app.get("name").getValueAsText();      String queueName=app.get("queue").getValueAsText();      String trackingUrl=app.get("trackingUrl") != null ? app.get("trackingUrl").getValueAsText() : null;      long startTime=app.get("startedTime").getLongValue();      long finishTime=app.get("finishedTime").getLongValue();      ApplicationType type=ElephantContext.instance().getApplicationTypeForName(app.get("applicationType").getValueAsText());      if (type != null) {        AnalyticJob analyticJob=new AnalyticJob();        analyticJob.setAppId(appId).setAppType(type).setUser(user).setName(name).setQueueName(queueName).setTrackingUrl(trackingUrl).setStartTime(startTime).setFinishTime(finishTime);        appList.add(analyticJob);      }    }  }  return appList;}  }
class C{  public boolean is(Object other){  return other == null;}  }
class C{  public static <S extends HasMouseDownHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    MouseDownEvent event=new MouseDownEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  public ConnectionPoint(Node node,NodePoint nodePoint){  this.node=node;  this.nodePoint=nodePoint;  this.cachedPointValue=new Point(-1,-1);}  }
class C{  public static void fetchAndCacheXForm(EventBus eventBus,OpenMrsXformIndexEntry formEntry){  new OdkXformSyncTask(eventBus,null).fetchAndAddXFormToDb(formEntry.uuid,formEntry.makeFileForForm());}  }
class C{  @Override public boolean equals(Object other){  if (other == null) {    return false;  } else   if (!(other instanceof PeerNetwork)) {    return false;  } else   if (other.getClass() != this.getClass()) {    return false;  } else   if (((PeerNetwork)other).getBluetoothLEDevice() == null) {    return this.getBluetoothLEDevice() == null;  }  return ((PeerNetwork)other).getBluetoothLEDevice().equals(this.getBluetoothLEDevice());}  }
class C{  public void execute(InstructionScannerGenerator generator){  while (edgeIter.hasNext()) {    Edge edge=edgeIter.next();    BasicBlock source=edge.getSource();    if (DEBUG) {      System.out.println("ISD: scanning instructions in block " + source.getLabel());    }    Iterator<InstructionHandle> i=source.instructionIterator();    int count=0;    while (i.hasNext()) {      InstructionHandle handle=i.next();      if (generator.start(handle)) {        scannerList.add(generator.createScanner());      }      for (      InstructionScanner scanner : scannerList) {        scanner.scanInstruction(handle);      }      ++count;    }    if (DEBUG) {      System.out.println("ISD: scanned " + count + " instructions");    }    for (    InstructionScanner scanner : scannerList) {      scanner.traverseEdge(edge);    }  }}  }
class C{  public void testSpecialCharacters() throws Exception {  TungstenProperties p1=new TungstenProperties();  p1.setString("cr","\r");  p1.setString("lf","\n");  p1.setString("x01-x02","\u0001\u0002");  ByteArrayOutputStream baos=new ByteArrayOutputStream();  p1.store(baos);  baos.flush();  byte[] bytes=baos.toByteArray();  p1.clear();  ByteArrayInputStream bais=new ByteArrayInputStream(bytes);  TungstenProperties p2=new TungstenProperties();  p2.load(bais);  String toString=p2.toString();  logger.info("Reading back escaped properties: " + toString);  Assert.assertEquals("load handles escaped cr character","\r",p2.getString("cr"));  Assert.assertEquals("load handles escaped lf character","\n",p2.getString("lf"));  Assert.assertEquals("load handles escaped unicode characters","\u0001\u0002",p2.getString("x01-x02"));  TungstenProperties p3=new TungstenProperties(p2.map());  Assert.assertEquals("copy handles escaped cr character","\r",p3.getString("cr"));  Assert.assertEquals("copy handles escaped lf character","\n",p3.getString("lf"));  Assert.assertEquals("copy handles escaped unicode characters","\u0001\u0002",p3.getString("x01-x02"));}  }
class C{  private static int streamtoword(byte data[],int offp[]){  int i;  int word=0;  int off=offp[0];  for (i=0; i < 4; i++) {    word=(word << 8) | (data[off] & 0xff);    off=(off + 1) % data.length;  }  offp[0]=off;  return word;}  }
class C{  private void download(ContentProviderClient cp) throws RemoteException {  Syncing syncing=Server.sync();  if (syncing != null) {    if (syncing.users != null) {      int size=syncing.users.size();      for (int i=0; i < size; i++) {        Sync<User> sync=syncing.users.get(i);        if (sync.userId == 0) {          syncUser(cp,sync);        }      }    }    if (syncing.restaurants != null) {      int size=syncing.restaurants.size();      for (int i=0; i < size; i++) {        Sync<Restaurant> sync=syncing.restaurants.get(i);        if (sync.userId == 0) {          syncRestaurant(cp,sync);        }      }    }    if (syncing.reviews != null) {      int size=syncing.reviews.size();      for (int i=0; i < size; i++) {        syncReview(cp,syncing.reviews.get(i));      }    }    if (syncing.reviewDrafts != null) {      int size=syncing.reviewDrafts.size();      for (int i=0; i < size; i++) {        syncReviewDraft(cp,syncing.reviewDrafts.get(i));      }    }  }}  }
class C{  public void endVisit(SingleMemberAnnotation node){}  }
class C{  private static double parseTime(String s) throws NumberFormatException {  if (s.length() > 4)   throw new NumberFormatException("Could not parse time: \"" + s + "\"!");  double result=0;  char[] c=s.toCharArray();  char[] x=new char[]{'0','0','0','0'};  for (int i=0; i < c.length; i++)   x[i + 4 - c.length]=c[i];  try {    int hours=Integer.parseInt("" + x[0] + x[1]);    int minutes=Integer.parseInt("" + x[2] + x[3]);    result=hours * 3600 + minutes * 60;  } catch (  NumberFormatException e) {    throw new NumberFormatException("Could not parse time: \"" + s + "\"!");  }  if (result < (3 * 3600))   result+=(24 * 3600);  return result;}  }
class C{  public void restoreEntity(BackupDataInputStream data){  if (DEBUG)   Log.d(TAG,"got entity '" + data.getKey() + "' size="+ data.size());  String key=data.getKey();  if (isKeyInList(key,mFiles)) {    File f=new File(key);    writeFile(f,data);  }}  }
class C{  public static void copyStream(InputStream inputStream,OutputStream outputStream,boolean closeOut) throws IOException {  try {    copyBytesToStream(inputStream,outputStream,-1);  }  finally {    try {      inputStream.close();    }  finally {      if (closeOut) {        outputStream.close();      }    }  }}  }
class C{  protected boolean[] multiInstanceHandler(){  boolean[] result=new boolean[2];  print("multi-instance associator...");  if (m_Associator instanceof MultiInstanceCapabilitiesHandler) {    println("yes");    result[0]=true;  } else {    println("no");    result[0]=false;  }  return result;}  }
class C{  public Object clone(){  ByteArrayBuffer newBuffer=new ByteArrayBuffer(_length);  System.arraycopy(_buffer,0,newBuffer._buffer,0,_length);  return newBuffer;}  }
class C{  public void addToWorld(Entity entity,final Player player){  if (parent != null) {    final RPSlot rpslot=parent.getSlot(slot);    if (entity instanceof StackableItem) {      final StackableItem stackEntity=(StackableItem)entity;      final Iterator<RPObject> it=rpslot.iterator();      while (it.hasNext()) {        final RPObject object=it.next();        if (object instanceof StackableItem) {          final StackableItem other=(StackableItem)object;          if (other.isStackable(stackEntity)) {            new ItemLogger().merge(player,stackEntity,other);            other.add(stackEntity);            entity=null;            break;          }        }      }    }    if (entity != null) {      entity.setPosition(0,0);      rpslot.add(entity);      ((Item)entity).onEquipped(player,rpslot.getName());    }    SingletonRepository.getRPWorld().modify(parent.getBaseContainer());  } else {    final StendhalRPZone zone=player.getZone();    logger.debug("adding " + entity.get("name") + " to "+ zone);    if (entity.has("#db_id")) {      entity.remove("#db_id");    }    entity.setPosition(x,y);    logger.debug("entity set to " + x + ", "+ y);    zone.add(entity,player);    logger.debug("entity has valid id: " + entity.getID());  }}  }
class C{  private MethodSymbol makePrivateSyntheticMethod(long flags,Name name,Type type,Symbol owner){  return new MethodSymbol(flags | SYNTHETIC | PRIVATE,name,type,owner);}  }
class C{  public WriteRequest(final int objectId,final int objectInstanceId,final int resourceId,String value){  this(ContentFormat.TLV,objectId,objectInstanceId,resourceId,value);}  }
class C{  public boolean contains(Sector sector){  if (sector == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Sector","contains","missingSector"));  }  return this.minLatitude <= sector.minLatitude && this.maxLatitude >= sector.maxLatitude && this.minLongitude <= sector.minLongitude && this.maxLongitude >= sector.maxLongitude;}  }
class C{  public ZoneLayer(Set<Zone<T>> zones){  for (  Zone<T> z : zones) {    if (srid < 0) {      srid=z.getGeometry().getSRID();      crs=CRSUtils.getCRS(srid);    } else {      if (z.getGeometry().getSRID() != srid)       throw new RuntimeException("Cannot build a spatial index with zones that have different coordinate reference systems.");    }  }  this.zones=Collections.unmodifiableSet(zones);  quadtree=new Quadtree();  for (  Zone<T> zone : zones) {    quadtree.insert(zone.getGeometry().getEnvelopeInternal(),zone);  }}  }
class C{  public ImageSource tilingEnabled(){  return tiling(true);}  }
class C{  public static Resource openResource(Context context,Uri uri,String mimetype){  try {    if (TextUtils.isEmpty(mimetype)) {      mimetype=context.getContentResolver().getType(uri);      if (null == mimetype) {        String extension=MimeTypeMap.getFileExtensionFromUrl(uri.toString().toLowerCase());        if (extension != null) {          mimetype=MimeTypeMap.getSingleton().getMimeTypeFromExtension(extension);        }      }    }    return new Resource(context.getContentResolver().openInputStream(uri),mimetype);  } catch (  Exception e) {    Log.e(LOG_TAG,"Failed to open resource input stream",e);  }  return null;}  }
class C{  public static String removeBackslashEscapes(final String s){  final StringBuilder sb=new StringBuilder();  for (int k=0; k < s.length(); k++) {    final char c=s.charAt(k);    if (c == '\\') {      if (++k == s.length()) {        break;      }      final char d=s.charAt(k);switch (d) {case 'n':        sb.append('\n');      break;case 'r':    sb.append('\r');  break;case 't':sb.append('\t');break;default :sb.append(d);break;}} else if (c == '#') {break;} else {sb.append(c);}}return sb.toString();}  }
class C{  protected ObjectMatrix1D like1D(int size,int zero,int stride){  throw new InternalError();}  }
class C{  public void doResort(){  super.doResort();  _indexes.clear();  remapIndexes(0);}  }
class C{  public void switchMultiRow(){  cardLayout.last(cardPanel);  m_singleRow=false;  vTable.autoSize(true);}  }
class C{  public static Function<List<Map.Entry<String,String>>,Map<String,Object>> errsTree(){  return (null);}  }
class C{  public BatchException70(List<BatchException70> l){  super(l.get(0).getMessage());  this.batchId=l.get(0).getBatchId();  this.exceptions=new ArrayList<BatchException70>();  this.exceptions.addAll(l);  this.index=this.exceptions.get(0).getIndex();}  }
class C{  public EEXECEncryption(OutputStream out,int r){  this(out,r,N);}  }
class C{  @Override @Generated("This method was generated using jOOQ-tools") default ReactiveSeq<Tuple13<Window<T>,Window<T>,Window<T>,Window<T>,Window<T>,Window<T>,Window<T>,Window<T>,Window<T>,Window<T>,Window<T>,Window<T>,Window<T>>> window(final WindowSpecification<T> specification1,final WindowSpecification<T> specification2,final WindowSpecification<T> specification3,final WindowSpecification<T> specification4,final WindowSpecification<T> specification5,final WindowSpecification<T> specification6,final WindowSpecification<T> specification7,final WindowSpecification<T> specification8,final WindowSpecification<T> specification9,final WindowSpecification<T> specification10,final WindowSpecification<T> specification11,final WindowSpecification<T> specification12,final WindowSpecification<T> specification13){  return fromStream(Seq.super.window(specification1,specification2,specification3,specification4,specification5,specification6,specification7,specification8,specification9,specification10,specification11,specification12,specification13));}  }
class C{  private void executeSync(DelegateExecution execution,String overrideActivitiId,JdbcExecutionRequest jdbcExecutionRequest) throws Exception {  String executionId=execution.getId();  String activitiId=execution.getCurrentActivityId();  if (overrideActivitiId != null) {    activitiId=overrideActivitiId;  }  JdbcExecutionResponse jdbcExecutionResponse=jdbcService.executeJdbc(jdbcExecutionRequest);  setJsonResponseAsWorkflowVariable(jdbcExecutionResponse,executionId,activitiId);  for (  JdbcStatement jdbcStatement : jdbcExecutionResponse.getStatements()) {    if (JdbcStatementStatus.ERROR.equals(jdbcStatement.getStatus())) {      throw new IllegalArgumentException("There are failed executions. See JSON response for details.");    }  }}  }
class C{  public SynchronizedHardReferenceQueue(final HardReferenceQueueEvictionListener<T> listener,final int capacity){  this(listener,capacity,DEFAULT_NSCAN);}  }
class C{  public void checkReinitFile(final boolean needReinit) throws IOException {  File bootModeFile=new File(rootDir,Constants.STARTUPMODE);  if (!needReinit) {    log.info("Reinit flag is false");    if (bootModeFile.exists()) {      bootModeFile.delete();    }    return;  }  if (!bootModeFile.exists()) {    setDbStartupModeAsRestoreReinit(rootDir);  }  chown(bootModeFile,BackupConstants.STORAGEOS_USER,BackupConstants.STORAGEOS_GROUP);  log.info("Startup mode file({}) has been created",bootModeFile.getAbsolutePath());}  }
class C{  public static PieDataset createPieDatasetForRow(CategoryDataset dataset,int row){  DefaultPieDataset result=new DefaultPieDataset();  int columnCount=dataset.getColumnCount();  for (int current=0; current < columnCount; current++) {    Comparable columnKey=dataset.getColumnKey(current);    result.setValue(columnKey,dataset.getValue(row,current));  }  return result;}  }
class C{  public void clearLearnedTable(IOFSwitch sw){  Map<MacVlanPair,OFPort> swMap=macVlanToSwitchPortMap.get(sw);  if (swMap != null) {    swMap.clear();  }}  }
class C{  private SpeedrunsLiveRequest(){  super(URL);}  }
class C{  public boolean isSetGetRequest(){  return this.getRequest != null;}  }
class C{  public MeekRules(){  useRule4=knowledge != null && !knowledge.isEmpty();}  }
class C{  public boolean equals(Attachment that){  if (that == null) {    return false;  }  boolean this_present_id=true & this.isSetId();  boolean that_present_id=true & that.isSetId();  if (this_present_id || that_present_id) {    if (!(this_present_id && that_present_id)) {      return false;    }    if (this.id != that.id) {      return false;    }  }  boolean this_present_type=true & this.isSetType();  boolean that_present_type=true & that.isSetType();  if (this_present_type || that_present_type) {    if (!(this_present_type && that_present_type)) {      return false;    }    if (!this.type.equals(that.type)) {      return false;    }  }  boolean this_present_name=true & this.isSetName();  boolean that_present_name=true & that.isSetName();  if (this_present_name || that_present_name) {    if (!(this_present_name && that_present_name)) {      return false;    }    if (!this.name.equals(that.name)) {      return false;    }  }  boolean this_present_fileSize=true & this.isSetFileSize();  boolean that_present_fileSize=true & that.isSetFileSize();  if (this_present_fileSize || that_present_fileSize) {    if (!(this_present_fileSize && that_present_fileSize)) {      return false;    }    if (this.fileSize != that.fileSize) {      return false;    }  }  boolean this_present_url=true & this.isSetUrl();  boolean that_present_url=true & that.isSetUrl();  if (this_present_url || that_present_url) {    if (!(this_present_url && that_present_url)) {      return false;    }    if (!this.url.equals(that.url)) {      return false;    }  }  return true;}  }
class C{  public Organisation_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());}  }
class C{  public AnnotationVisitor visitParameterAnnotation(int parameter,String desc,boolean visible){  if (mv != null) {    return mv.visitParameterAnnotation(parameter,desc,visible);  }  return null;}  }
class C{  private void createNewSheet(String nombreHoja){  if (nombreHoja != null) {    this.currentSheet=this.workbook.createSheet(nombreHoja);  } else {    this.currentSheet=this.workbook.createSheet();  }  this.currentRow=this.currentSheet.createRow(0);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:30.947 -0500",hash_original_method="03688D49C7EA4499A5ECC87E8FAFC0E6",hash_generated_method="1BD01B4CCE15FE5F5E68F115FFC02FD3") public static boolean isUserAMonkey(){  try {    return ActivityManagerNative.getDefault().isUserAMonkey();  } catch (  RemoteException e) {  }  return false;}  }
class C{  public String toString(){  return "(" + one + ", "+ two+ ")";}  }
class C{  public static boolean tryToRenameTempFileToSaveFile(DownloadFileInfo downloadFileInfo){  if (!DownloadFileUtil.isLegal(downloadFileInfo)) {    return false;  }  if (isCompleted(downloadFileInfo)) {    File saveFile=new File(downloadFileInfo.getFilePath());    if (saveFile.exists() && saveFile.length() == downloadFileInfo.getDownloadedSizeLong() && saveFile.length() == downloadFileInfo.getFileSizeLong()) {      return true;    }  } else {    if (downloadFileInfo.getDownloadedSizeLong() == downloadFileInfo.getFileSizeLong()) {      File tempFile=new File(downloadFileInfo.getTempFilePath());      File saveFile=new File(downloadFileInfo.getFilePath());      if (tempFile.exists() && tempFile.length() == downloadFileInfo.getDownloadedSizeLong() && !saveFile.exists()) {        boolean isSucceed=tempFile.renameTo(saveFile);        return isSucceed;      }    }  }  return false;}  }
class C{  public static void main(String[] args) throws IllegalArgumentException, IOException {  FlagConfig flagConfig=FlagConfig.getFlagConfig(args);  if (flagConfig.remainingArgs.length != 2) {    System.out.println("After parsing command line flags, there must be exactly two arguments.");    usage();  }  VerbatimLogger.info(String.format("Outputting similarity of '%s' with '%s':\n",flagConfig.remainingArgs[0],flagConfig.remainingArgs[1]));  System.out.println(runCompareTerms(flagConfig));}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public EndpointDescription clone(){  EndpointDescription result=new EndpointDescription();  result.EndpointUrl=EndpointUrl;  result.Server=Server == null ? null : Server.clone();  result.ServerCertificate=ServerCertificate;  result.SecurityMode=SecurityMode;  result.SecurityPolicyUri=SecurityPolicyUri;  if (UserIdentityTokens != null) {    result.UserIdentityTokens=new UserTokenPolicy[UserIdentityTokens.length];    for (int i=0; i < UserIdentityTokens.length; i++)     result.UserIdentityTokens[i]=UserIdentityTokens[i].clone();  }  result.TransportProfileUri=TransportProfileUri;  result.SecurityLevel=SecurityLevel;  return result;}  }
class C{  public JTAJobRunShell(Scheduler scheduler,TriggerFiredBundle bndle,int timeout){  super(scheduler,bndle);  this.transactionTimeout=timeout;}  }
class C{  public void paint(Graphics2D g2,Node node,Justification justification,Rectangle2D bounds){  throw new UnsupportedOperationException("This version of paint is not used in NodeBarPainter");}  }
class C{  public Builder dispatcher(Dispatcher dispatcher){  if (dispatcher == null)   throw new IllegalArgumentException("dispatcher == null");  this.dispatcher=dispatcher;  return this;}  }
class C{  void transfer(MyIdentityHashMap.Entry[] newTable){  int newCapacity=newTable.length;  for (Entry<K,V> e=header.after; e != header; e=e.after) {    int index=indexFor(e.hash,newCapacity);    e.next=newTable[index];    newTable[index]=e;  }}  }
class C{  public String edgeType(){  return "dir=forward";}  }
class C{  public static Flag fromString(final String value,final Map valuesToInstances) throws SOAPSerializationException {  final Flag ret=(Flag)valuesToInstances.get(value);  if (ret == null) {    final String messageFormat="No flag matches the attribute value {0}";    final String message=MessageFormat.format(messageFormat,value);    throw new SOAPSerializationException(message);  }  return ret;}  }
class C{  @Override public void addPages(){  super.addPages();  page=new NewFilterWizardPage(selection);  addPage(page);}  }
class C{  public static <C extends Comparable<?>>Builder<C> builder(){  return new Builder<C>();}  }
class C{  public NodeFilter createXPathFilter(String xpathFilterExpression,VariableContext variableContext){  XPath answer=createXPath(xpathFilterExpression);  answer.setVariableContext(variableContext);  return answer;}  }
class C{  public static void main(String[] args){  edgesOut=new EdgeInfo[3];  edgesIn=new EdgeInfo[2];  edges=new ArrayList<EdgeInfo>();  edges.add(edgesOut[0]=new EdgeInfo(0,1,10));  edges.add(edgesOut[1]=new EdgeInfo(0,2,5));  edges.add(edgesOut[2]=new EdgeInfo(0,3,4));  edges.add(new EdgeInfo(1,4,5));  edges.add(new EdgeInfo(1,2,3));  edges.add(new EdgeInfo(2,4,2));  edges.add(new EdgeInfo(2,3,5));  edges.add(new EdgeInfo(3,5,8));  edges.add(new EdgeInfo(5,2,3));  edges.add(edgesIn[0]=new EdgeInfo(4,7,7));  edges.add(edgesIn[1]=new EdgeInfo(5,7,11));  FlowNetworkArray network=new FlowNetworkArray(8,0,7,edges.iterator());  FordFulkerson ffa=new FordFulkerson(network,new DFS_SearchArray(network));  ffa.compute();  validate(network);  System.out.println("DONE");  System.out.println(network.toString());}  }
class C{  private void start() throws Exception {  startSecondary();  startPrimary();  evictPlc.setMaxBlocks(0);  evictPlc.setMaxSize(0);  evictPlc.setExcludePaths(null);}  }
class C{  synchronized void clearEvents(){  if (this.changeEvents != null)   this.changeEvents.clear();  variableFreespeed.clearEvents();  variableFlowCapacity.clearEvents();  variableLanes.clearEvents();}  }
class C{  public IdentityHashMap(){  this(DEFAULT_MAX_SIZE);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:51.219 -0500",hash_original_method="0A9787140DA63C802B73071FD0FF80EC",hash_generated_method="849DA9BB92119DAC4BE7B4C2E0D80925") public final boolean checkTag(int identifier){  return true;}  }
class C{  public static String toString(Iterable<?> objects){  StringBuilder str=new StringBuilder();  str.append("[");  for (  Object o : objects) {    str.append(o).append(", ");  }  if (str.length() > 1) {    str.setLength(str.length() - 2);  }  str.append("]");  return str.toString();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node testEmployee;  NamedNodeMap attributes;  Attr domesticAttr;  String attrName;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("acronym");  testEmployee=elementList.item(1);  attributes=testEmployee.getAttributes();  domesticAttr=(Attr)attributes.getNamedItem("title");  attrName=domesticAttr.getNodeName();  assertEqualsAutoCase("attribute","nodeName","title",attrName);}  }
class C{  protected final void rememberSelection() throws JavaModelException {  IType lhs=fInvocationContext.getExpectedType();  IType rhs=(IType)getJavaElement();  if (lhs != null && rhs != null)   JavaPlugin.getDefault().getContentAssistHistory().remember(lhs,rhs);  QualifiedTypeNameHistory.remember(getQualifiedTypeName());}  }
class C{  public Duration minusNanos(long nanosToSubtract){  return (nanosToSubtract == Long.MIN_VALUE ? plusNanos(Long.MAX_VALUE).plusNanos(1) : plusNanos(-nanosToSubtract));}  }
class C{  public SpatialSparseGraphBuilder(CoordinateReferenceSystem crs){  super(new SpatialSparseGraphFactory(crs));}  }
class C{  @Override public void close(){  super.close();}  }
class C{  public void extractTarHeader(String entryName){  String name=entryName;  FileSystemStorage fileSystem=FileSystemStorage.getInstance();  name=name.replace(fileSystem.getFileSystemSeparator(),'/');  if (name.startsWith("/"))   name=name.substring(1);  header.linkName=new StringBuffer("");  header.name=new StringBuffer(name);  if (fileSystem.isDirectory(file)) {    header.mode=040755;    header.linkFlag=TarHeader.LF_DIR;    if (header.name.charAt(header.name.length() - 1) != '/') {      header.name.append("/");    }    header.size=0;  } else {    header.size=fileSystem.getLength(file);    header.mode=0100644;    header.linkFlag=TarHeader.LF_NORMAL;  }  header.modTime=0;  header.checkSum=0;  header.devMajor=0;  header.devMinor=0;}  }
class C{  @Override public int read(){  if (idx >= charSequence.length()) {    return EOF;  } else {    return charSequence.charAt(idx++);  }}  }
class C{  static Element createDigestMethodElement(Document doc,String hashMethod) throws Exception {  Element digestMethodElement=doc.createElement(PREFIX_DS + Constants._TAG_DIGESTMETHOD);  digestMethodElement.setAttribute(Constants._ATT_ALGORITHM,getDigestAlgorithmURI(hashMethod));  return digestMethodElement;}  }
class C{  public String eventTopic(String eventId){  if (eventId == null) {    eventId="+";  }  return evtTopic.replace("{EVENTID}",eventId);}  }
class C{  protected void sequence_ThisTypeRefNominal_TypeRefWithModifiers_TypeRefWithoutModifiers(ISerializationContext context,ThisTypeRefNominal semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public X509Name(Vector oids,Vector values,X509NameEntryConverter converter){  this.converter=converter;  if (oids.size() != values.size()) {    throw new IllegalArgumentException("oids vector must be same length as values.");  }  for (int i=0; i < oids.size(); i++) {    this.ordering.addElement(oids.elementAt(i));    this.values.addElement(values.elementAt(i));    this.added.addElement(FALSE);  }}  }
class C{  public ConvertAnonymousToNestedRefactoring(ICompilationUnit unit,int selectionStart,int selectionLength){  Assert.isTrue(selectionStart >= 0);  Assert.isTrue(selectionLength >= 0);  Assert.isTrue(unit == null || unit.exists());  fSelectionStart=selectionStart;  fSelectionLength=selectionLength;  fCu=unit;  fAnonymousInnerClassNode=null;  fCompilationUnitNode=null;}  }
class C{  public void addMouseListener(MouseListener l){  m_textPane.addMouseListener(l);}  }
class C{  private JSONObject copyDirectory(File srcDir,File destinationDir) throws JSONException, IOException, NoModificationAllowedException, InvalidModificationException {  if (destinationDir.exists() && destinationDir.isFile()) {    throw new InvalidModificationException("Can't rename a file to a directory");  }  if (isCopyOnItself(srcDir.getAbsolutePath(),destinationDir.getAbsolutePath())) {    throw new InvalidModificationException("Can't copy itself into itself");  }  if (!destinationDir.exists()) {    if (!destinationDir.mkdir()) {      throw new NoModificationAllowedException("Couldn't create the destination directory");    }  }  for (  File file : srcDir.listFiles()) {    File destination=new File(destinationDir.getAbsoluteFile() + File.separator + file.getName());    if (file.isDirectory()) {      copyDirectory(file,destination);    } else {      copyFile(file,destination);    }  }  return makeEntryForFile(destinationDir);}  }
class C{  protected void mergePeriod(ReadablePeriod period){  if (period != null) {    setValues(mergePeriodInto(getValues(),period));  }}  }
class C{  private void doubleStream(){  double[] doubles=new double[]{2.4,4.2,6.3,8.5,10.1};  DoubleStream doubleStream1=DoubleStream.of(doubles);  doubleStream1.forEach(null);  DoubleStream doubleStream2=DoubleStream.of(1.1,22.33,3.4);  doubleStream2.forEach(null);}  }
class C{  @Override public void execute(String[] params,Server server,Conversation conversation,IRCService service) throws CommandException {  if (params.length > 1) {    String line=BaseHandler.mergeParams(params);    service.getConnection(server.getId()).sendRawLineViaQueue(line);  } else {    throw new CommandException(service.getString(R.string.line_missing));  }}  }
class C{  public DefaultPackagerFactory(ClassLoader classLoader){  super();  AbstractFactoryRegistry.register(classLoader,this);}  }
class C{  public boolean isSticky(){  return sticky;}  }
class C{  public OriginalAirDateSorter(boolean ascending){  super(ascending);}  }
class C{  public Select<T> where(DataFilterClause filterClause){  this.mFilterCriteria.addClause(filterClause);  return this;}  }
class C{  public static Response createConnectErrorResponse(char errorCode,String reasonPhrase) throws IllegalArgumentException {  Response connectionErrorResponse=new Response();  connectionErrorResponse.setMessageType(Message.CONNECT_ERROR_RESPONSE);  ErrorCodeAttribute errorCodeAttribute=AttributeFactory.createErrorCodeAttribute(errorCode,reasonPhrase);  connectionErrorResponse.putAttribute(errorCodeAttribute);  return connectionErrorResponse;}  }
class C{  public float norm(int passageStart){  return 1 + 1 / (float)Math.log(pivot + passageStart);}  }
class C{  public boolean hasTime(){  return hasTime;}  }
class C{  public void updateText(float latPoint,float lonPoint,int offset_x,int offset_y,String stuff,int justify,LinkProperties properties,int graphicUpdateMask) throws IOException {  writeGraphicGestureHeader(graphicUpdateMask);  LinkText.write(latPoint,lonPoint,offset_x,offset_y,stuff,LinkText.DEFAULT_FONT,justify,properties,link.dos);}  }
class C{  @Override public void editDelete(){  getView().getDrawing().removeAll(getView().getSelectedFigures());}  }
class C{  public boolean equivalent(INode n){  if (n == null) {    return false;  }  FifteenPuzzleNode state=(FifteenPuzzleNode)n;  for (int r=0; r <= MaxR; r++) {    for (int c=0; c <= MaxC; c++) {      if (board[r][c] != state.board[r][c]) {        return false;      }    }  }  return true;}  }
class C{  protected void clearCurrent(){  assert current != -1;  final Value key=sourceTuple[current];  for (int i=current + 1; i < n; i++) {    if (sourceTuple[i] == null) {      continue;    }    final Value tmp=sourceTuple[i];    final int ret=compare(key,tmp);    if (ret == 0) {      sourceTuple[i]=null;    }  }  sourceTuple[current]=null;  current=-1;}  }
class C{  @Override public void write(byte[] buf,int offset,int length,boolean isEnd) throws IOException {  while (offset < length) {    TempBuffer tail=_tail;    if (tail == null || tail.buffer().length <= tail.length()) {      addBuffer(TempBuffer.create());      tail=_tail;    }    int tailLength=tail.length();    byte[] tailBuffer=tail.buffer();    int sublen=tailBuffer.length - tailLength;    if (length - offset < sublen) {      sublen=length - offset;    }    System.arraycopy(buf,offset,tailBuffer,tailLength,sublen);    offset+=sublen;    tail.length(tailLength + sublen);  }}  }
class C{  public Object parse(Reader in,ContainerFactory containerFactory) throws IOException, ParseException {  reset(in);  LinkedList statusStack=new LinkedList();  LinkedList valueStack=new LinkedList();  try {    do {      nextToken();switch (status) {case S_INIT:switch (token.type) {case Yytoken.TYPE_VALUE:          status=S_IN_FINISHED_VALUE;        statusStack.addFirst(new Integer(status));      valueStack.addFirst(token.value);    break;case Yytoken.TYPE_LEFT_BRACE:  status=S_IN_OBJECT;statusStack.addFirst(new Integer(status));valueStack.addFirst(createObjectContainer(containerFactory));break;case Yytoken.TYPE_LEFT_SQUARE:status=S_IN_ARRAY;statusStack.addFirst(new Integer(status));valueStack.addFirst(createArrayContainer(containerFactory));break;default :status=S_IN_ERROR;}break;case S_IN_FINISHED_VALUE:if (token.type == Yytoken.TYPE_EOF) return valueStack.removeFirst(); else throw new ParseException(getPosition(),ParseException.ERROR_UNEXPECTED_TOKEN,token);case S_IN_OBJECT:switch (token.type) {case Yytoken.TYPE_COMMA:break;case Yytoken.TYPE_VALUE:if (token.value instanceof String) {String key=(String)token.value;valueStack.addFirst(key);status=S_PASSED_PAIR_KEY;statusStack.addFirst(new Integer(status));} else {status=S_IN_ERROR;}break;case Yytoken.TYPE_RIGHT_BRACE:if (valueStack.size() > 1) {statusStack.removeFirst();valueStack.removeFirst();status=peekStatus(statusStack);} else {status=S_IN_FINISHED_VALUE;}break;default :status=S_IN_ERROR;break;}break;case S_PASSED_PAIR_KEY:switch (token.type) {case Yytoken.TYPE_COLON:break;case Yytoken.TYPE_VALUE:statusStack.removeFirst();String key=(String)valueStack.removeFirst();Map parent=(Map)valueStack.getFirst();parent.put(key,token.value);status=peekStatus(statusStack);break;case Yytoken.TYPE_LEFT_SQUARE:statusStack.removeFirst();key=(String)valueStack.removeFirst();parent=(Map)valueStack.getFirst();List newArray=createArrayContainer(containerFactory);parent.put(key,newArray);status=S_IN_ARRAY;statusStack.addFirst(new Integer(status));valueStack.addFirst(newArray);break;case Yytoken.TYPE_LEFT_BRACE:statusStack.removeFirst();key=(String)valueStack.removeFirst();parent=(Map)valueStack.getFirst();Map newObject=createObjectContainer(containerFactory);parent.put(key,newObject);status=S_IN_OBJECT;statusStack.addFirst(new Integer(status));valueStack.addFirst(newObject);break;default :status=S_IN_ERROR;}break;case S_IN_ARRAY:switch (token.type) {case Yytoken.TYPE_COMMA:break;case Yytoken.TYPE_VALUE:List val=(List)valueStack.getFirst();val.add(token.value);break;case Yytoken.TYPE_RIGHT_SQUARE:if (valueStack.size() > 1) {statusStack.removeFirst();valueStack.removeFirst();status=peekStatus(statusStack);} else {status=S_IN_FINISHED_VALUE;}break;case Yytoken.TYPE_LEFT_BRACE:val=(List)valueStack.getFirst();Map newObject=createObjectContainer(containerFactory);val.add(newObject);status=S_IN_OBJECT;statusStack.addFirst(new Integer(status));valueStack.addFirst(newObject);break;case Yytoken.TYPE_LEFT_SQUARE:val=(List)valueStack.getFirst();List newArray=createArrayContainer(containerFactory);val.add(newArray);status=S_IN_ARRAY;statusStack.addFirst(new Integer(status));valueStack.addFirst(newArray);break;default :status=S_IN_ERROR;}break;case S_IN_ERROR:throw new ParseException(getPosition(),ParseException.ERROR_UNEXPECTED_TOKEN,token);}if (status == S_IN_ERROR) {throw new ParseException(getPosition(),ParseException.ERROR_UNEXPECTED_TOKEN,token);}} while (token.type != Yytoken.TYPE_EOF);} catch (IOException ie) {throw ie;}throw new ParseException(getPosition(),ParseException.ERROR_UNEXPECTED_TOKEN,token);}  }
class C{  public LevelSetConfig(){}  }
class C{  public void paintSliderTrackBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  private void decide(Epoch epoch){  if (epoch.getConsensus().getDecision().firstMessageProposed != null)   epoch.getConsensus().getDecision().firstMessageProposed.decisionTime=System.nanoTime();  epoch.getConsensus().decided(epoch,true);}  }
class C{  public WriteRequest(final int objectId,final int objectInstanceId,final int resourceId,long value){  this(ContentFormat.TLV,objectId,objectInstanceId,resourceId,value);}  }
class C{  public static void assertThrownBy(String sourceClass,Throwable t) throws AssertionError {  StackTraceElement[] stackTrace=t.getStackTrace();  if (stackTrace.length == 0)   return;  StackTraceElement el=stackTrace[0];  if (sourceClass == null) {    return;  }  String name=el.getClassName();  if (sourceClass.equals(name)) {    return;  }  Class<?> klass;  try {    klass=EvoAssertions.class.getClassLoader().loadClass(sourceClass);  } catch (  ClassNotFoundException e) {    throw new AssertionError("Cannot load/analyze class " + sourceClass);  }  for (  Annotation annotation : klass.getAnnotations()) {    if (annotation.getClass().getName().equals(name)) {      return;    }  }  while (klass != null) {    klass=klass.getSuperclass();    if (klass != null && klass.getName().equals(name)) {      return;    }  }  throw new AssertionError("Exception was not thrown in " + sourceClass + " but in "+ el+ ": "+ t);}  }
class C{  public static Number atan(Number a){  return Math.atan(a.doubleValue());}  }
class C{  @SuppressFBWarnings("NP_NULL_ON_SOME_PATH") private AddEditBookmarkFragment generateBaseFragment(){  if (getIntent() == null) {    throw new IllegalArgumentException("intent can not be null");  }  Intent intent=getIntent();  Uri intentUri=intent.getData();  Long bookmarkId=null;  boolean isFolder=false;  AddEditBookmarkFragment addEditFragment;  if (intentUri != null && intentUri.getHost().equals("editbookmark")) {    isFolder=intentUri.getBooleanQueryParameter(BOOKMARK_IS_FOLDER_URI_PARAM,false);    String bookmarkIdParam=intentUri.getQueryParameter(BOOKMARK_ID_URI_PARAM);    if (bookmarkIdParam != null)     bookmarkId=Long.parseLong(bookmarkIdParam);    addEditFragment=AddEditBookmarkFragment.newEditInstance(isFolder,bookmarkId);  } else {    Bundle extras=intent.getExtras();    String url=null;    String name=null;    if (extras != null) {      isFolder=extras.getBoolean(BOOKMARK_INTENT_IS_FOLDER,false);      if (extras.containsKey(BOOKMARK_INTENT_TITLE)) {        name=extras.getString(BOOKMARK_INTENT_TITLE);      }      if (extras.containsKey(BOOKMARK_INTENT_URL)) {        url=extras.getString(BOOKMARK_INTENT_URL);        url=DomDistillerUrlUtils.getOriginalUrlFromDistillerUrl(url);      }      if (extras.containsKey(BOOKMARK_INTENT_ID)) {        bookmarkId=extras.getLong(BOOKMARK_INTENT_ID);      }    }    addEditFragment=AddEditBookmarkFragment.newInstance(isFolder,bookmarkId,name,url);  }  setActionListenerOnAddEdit(addEditFragment);  return addEditFragment;}  }
class C{  public void fireUpServer(EvolutionState state,Parameter serverBase){  IslandExchangeServer serv=new IslandExchangeServer();  serv.setupServerFromDatabase(state,serverBase);  serverThread=serv.spawnThread();}  }
class C{  private Document newDocument(String id,String noteName,Paragraph p){  Document doc=new Document();  Field pathField=new StringField(ID_FIELD,id,Field.Store.YES);  doc.add(pathField);  doc.add(new StringField("title",noteName,Field.Store.YES));  if (null != p) {    doc.add(new TextField(SEARCH_FIELD_TEXT,p.getText(),Field.Store.YES));    if (p.getTitle() != null) {      doc.add(new TextField(SEARCH_FIELD_TITLE,p.getTitle(),Field.Store.YES));    }    Date date=p.getDateStarted() != null ? p.getDateStarted() : p.getDateCreated();    doc.add(new LongField("modified",date.getTime(),Field.Store.NO));  } else {    doc.add(new TextField(SEARCH_FIELD_TEXT,noteName,Field.Store.YES));  }  return doc;}  }
class C{  public int postFiles(String[] args,int startIndexInArgs,OutputStream out,String type){  reset();  int filesPosted=0;  for (int j=startIndexInArgs; j < args.length; j++) {    File srcFile=new File(args[j]);    if (srcFile.isDirectory() && srcFile.canRead()) {      filesPosted+=postDirectory(srcFile,out,type);    } else     if (srcFile.isFile() && srcFile.canRead()) {      filesPosted+=postFiles(new File[]{srcFile},out,type);    } else {      File parent=srcFile.getParentFile();      if (parent == null)       parent=new File(".");      String fileGlob=srcFile.getName();      GlobFileFilter ff=new GlobFileFilter(fileGlob,false);      File[] files=parent.listFiles(ff);      if (files == null || files.length == 0) {        warn("No files or directories matching " + srcFile);        continue;      }      filesPosted+=postFiles(parent.listFiles(ff),out,type);    }  }  return filesPosted;}  }
class C{  public PrintWriterArea(int rows,int columns){  super(rows,columns);  setEditable(false);}  }
class C{  public void addRtcpListener(RtcpEventListener listener){  if (sLogger.isActivated()) {    sLogger.debug("Add a RTCP event listener");  }  mListeners.addElement(listener);}  }
class C{  @Deprecated public Builder cacheOnDisc(){  return cacheOnDisk(true);}  }
class C{  public void append(StringBuffer buffer,String fieldName,Object value,Boolean fullDetail){  appendFieldStart(buffer,fieldName);  if (value == null) {    appendNullText(buffer,fieldName);  } else {    appendInternal(buffer,fieldName,value,isFullDetail(fullDetail));  }  appendFieldEnd(buffer,fieldName);}  }
class C{  public void testFloatValuePosMantissaIsZero(){  byte[] a={-128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  int aSign=1;  float result=1.7014118E38f;  float aNumber=new BigInteger(aSign,a).floatValue();  assertTrue(aNumber == result);}  }
class C{  public static void main(String[] args) throws Exception {  Properties config=new Properties();  config.put(StreamsConfig.APPLICATION_ID_CONFIG,"table-join-kafka-streams");  config.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG,"localhost:9092");  config.put(StreamsConfig.ZOOKEEPER_CONNECT_CONFIG,"localhost:2181");  config.put(StreamsConfig.KEY_SERDE_CLASS_CONFIG,Serdes.String().getClass().getName());  config.put(StreamsConfig.VALUE_SERDE_CLASS_CONFIG,Serdes.Long().getClass().getName());  KStreamBuilder builder=new KStreamBuilder();  KStream<String,Long> longs=builder.stream(Serdes.String(),Serdes.Long(),"longs");  KTable<Windowed<String>,Long> longCounts=longs.groupByKey(Serdes.String(),Serdes.Long()).count(TimeWindows.of("longCounts",10000L).until(10000L));  KTable<Windowed<String>,Long> longSums=longs.groupByKey(Serdes.String(),Serdes.Long()).reduce(null,TimeWindows.of("longSums",10000L).until(10000L));  KTable<Windowed<String>,Double> longAvgs=longSums.join(longCounts,null);  longAvgs.toStream(null).filter(null).to(Serdes.String(),Serdes.Double(),"long-avgs");  KafkaStreams streams=new KafkaStreams(builder,config);  streams.start();  Properties producerConfig=new Properties();  producerConfig.put("bootstrap.servers","localhost:9092");  producerConfig.put("key.serializer","org.apache.kafka.common" + ".serialization.StringSerializer");  producerConfig.put("value.serializer","org.apache.kafka.common" + ".serialization.LongSerializer");  KafkaProducer producer=new KafkaProducer<String,Long>(producerConfig);  Random rng=new Random(123456L);  String[] keys={"A","B","C"};  while (true) {    String key=keys[rng.nextInt(keys.length)];    producer.send(new ProducerRecord<>("longs",key,rng.nextLong() % 10));    Thread.sleep(100L);  }}  }
class C{  protected static void createTrigger(Connection conn,String schema,String table) throws SQLException {  Statement stat=conn.createStatement();  String trigger=StringUtils.quoteIdentifier(schema) + "." + StringUtils.quoteIdentifier(TRIGGER_PREFIX + table);  stat.execute("DROP TRIGGER IF EXISTS " + trigger);  StringBuilder buff=new StringBuilder("CREATE TRIGGER IF NOT EXISTS ");  buff.append(trigger).append(" AFTER INSERT, UPDATE, DELETE, ROLLBACK ON ").append(StringUtils.quoteIdentifier(schema)).append('.').append(StringUtils.quoteIdentifier(table)).append(" FOR EACH ROW CALL \"").append(FullTextLucene2.FullTextTrigger.class.getName()).append('\"');  stat.execute(buff.toString());}  }
class C{  public GroupCategory(String id,String name,String description){  Assert.isNotNull(id);  Assert.isNotNull(name);  Assert.isNotNull(description);  fId=id;  fName=name;  fDescription=description;}  }
class C{  public static double asin(double x){  if (x != x) {    return Double.NaN;  }  if (x > 1.0 || x < -1.0) {    return Double.NaN;  }  if (x == 1.0) {    return Math.PI / 2.0;  }  if (x == -1.0) {    return -Math.PI / 2.0;  }  if (x == 0.0) {    return x;  }  double temp=x * HEX_40000000;  final double xa=x + temp - temp;  final double xb=x - xa;  double ya=xa * xa;  double yb=xa * xb * 2.0 + xb * xb;  ya=-ya;  yb=-yb;  double za=1.0 + ya;  double zb=-(za - 1.0 - ya);  temp=za + yb;  zb+=-(temp - za - yb);  za=temp;  double y;  y=sqrt(za);  temp=y * HEX_40000000;  ya=y + temp - temp;  yb=y - ya;  yb+=(za - ya * ya - 2 * ya * yb - yb * yb) / (2.0 * y);  double dx=zb / (2.0 * y);  double r=x / y;  temp=r * HEX_40000000;  double ra=r + temp - temp;  double rb=r - ra;  rb+=(x - ra * ya - ra * yb - rb * ya - rb * yb) / y;  rb+=-x * dx / y / y;  temp=ra + rb;  rb=-(temp - ra - rb);  ra=temp;  return atan(ra,rb,false);}  }
class C{  private void updateUserVdcRolesBasedOnUserGroup(StorageOSUser user,VirtualDataCenter vdc){  if (user == null || vdc == null) {    _log.error("Invalid user {} or vdc {}",user,vdc);    return;  }  StringSetMap roleAssignments=vdc.getRoleAssignments();  Map<UserGroup,StringSet> userGroupsWithRoles=getUserGroupsFromRoleAssignments(roleAssignments);  if (CollectionUtils.isEmpty(userGroupsWithRoles)) {    _log.info("There are no role assignments for VDC {} with user group",vdc.getLabel());    return;  }  StringSet roleSet=findAllRolesToAdd(user,userGroupsWithRoles);  if (CollectionUtils.isEmpty(roleSet)) {    _log.debug("There are no roles found for user group in the vdc {}",vdc.getLabel());    return;  }  for (  String role : roleSet) {    if (isRoleZoneLevel(role)) {      _log.debug("Adding the vdc role {} to the user {}",role,user.getDistinguishedName());      user.addRole(role);    }  }}  }
class C{  public GenericEntry createUser(String email,String password,String firstName,String lastName) throws AppsForYourDomainException, MalformedURLException, IOException, ServiceException {  GenericEntry entry=new GenericEntry();  entry.addProperty("userEmail",email);  entry.addProperty("password",password);  entry.addProperty("firstName",firstName);  entry.addProperty("lastName",lastName);  return service.insert(new URL("https://apps-apis.google.com/a/feeds/user/2.0/" + domain),entry);}  }
class C{  public final void testGetPolicyQualifier02() throws IOException {  byte[] encoding=getDerEncoding();  byte[] pqEncoding=new byte[28];  System.arraycopy(encoding,12,pqEncoding,0,pqEncoding.length);  PolicyQualifierInfo i=new PolicyQualifierInfo(encoding);  byte[] pqEncodingRet=i.getPolicyQualifier();  pqEncodingRet[0]=(byte)0;  byte[] pqEncodingRet1=i.getPolicyQualifier();  assertNotSame(pqEncodingRet,pqEncodingRet1);  assertTrue(Arrays.equals(pqEncoding,pqEncodingRet1));}  }
class C{  public void hint(int which){  if (which > 0) {    hints[which]=true;  } else {    hints[-which]=false;  }}  }
class C{  public MinimumSpanningForest2(Graph<V,E> graph,Supplier<Forest<V,E>> supplier,Supplier<? extends Graph<V,E>> treeFactory,Function<? super E,Double> weights){  this(graph,supplier.get(),treeFactory,weights);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.REFERENCED_STATE_MACHINE___NAME_1:    setName_1(NAME_1_EDEFAULT);  return;case UmplePackage.REFERENCED_STATE_MACHINE___DEFINITION_NAME_1:setDefinitionName_1(DEFINITION_NAME_1_EDEFAULT);return;case UmplePackage.REFERENCED_STATE_MACHINE___EXTENDED_STATE_MACHINE_1:getExtendedStateMachine_1().clear();return;}super.eUnset(featureID);}  }
class C{  public void testSortedField() throws Exception {  Directory dir=newDirectory();  IndexWriter iw=new IndexWriter(dir,newIndexWriterConfig(null));  Document doc=new Document();  doc.add(new SortedDocValuesField("foo",new BytesRef("bar")));  iw.addDocument(doc);  DirectoryReader dr=DirectoryReader.open(iw);  LeafReader r=getOnlyLeafReader(dr);  assertNotNull(DocValues.getBinary(r,"foo"));  assertNotNull(DocValues.getSorted(r,"foo"));  assertNotNull(DocValues.getSortedSet(r,"foo"));  expectThrows(IllegalStateException.class,null);  expectThrows(IllegalStateException.class,null);  dr.close();  iw.close();  dir.close();}  }
class C{  public World(Vec2 gravity,IWorldPool pool){  this(gravity,pool,new DynamicTree());}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  public String save() throws SaaSApplicationException {  VOUserDetails user=null;  if (currentUser != null) {    user=currentUser.getVOUserDetails();  }  getAccountingService().updateAccountInformation(organization,user,getMarketplaceId(),getImageUploader().getVOImageResource());  currentUser=null;  if (user != null) {    setUserInSession(getCurrentUser().getVOUserDetails());    addMessage(null,FacesMessage.SEVERITY_INFO,INFO_USER_PROFILE_SAVED,getUserFromSession().getUserId());  } else   if (organization != null) {    addMessage(null,FacesMessage.SEVERITY_INFO,INFO_ORGANIZATION_SAVED,getUserFromSession().getOrganizationId());  }  organization=null;  return OUTCOME_SUCCESS;}  }
class C{  protected void buildConstraints(JPAMSchemaManager schemaManager,boolean build){  if (build) {    for (    TableDefinition table : getTableDefinitions()) {      schemaManager.buildFieldTypes(table);    }  }}  }
class C{  private boolean isListChildUnderClipped(float x,float y){  final View listChild=findListChildUnder(x,y);  return listChild != null && isDescendantClipped(listChild);}  }
class C{  public DateTime(final long ticks){  this.ticks=ticks;  date=new Date((ticks - TICSK_FROM_1601_TO_1970) / MILLISEC);}  }
class C{  public Boolean isVspanSupported(){  return vspanSupported;}  }
class C{  public boolean number_nodes(){  return soot.PhaseOptions.getBoolean(options,"number-nodes");}  }
class C{  public static void equals(Object expectedValue,Object actualValue,String message){  if (!actualValue.equals(expectedValue)) {    throw new AssertionFailedException("Expected " + expectedValue + " but encountered "+ actualValue+ (message != null ? ": " + message : ""));  }}  }
class C{  private static void d_uarmean(double[] a,double[] c,int m,int n,KahanObject kbuff,Mean kmean,int rl,int ru){  for (int i=rl, aix=rl * n, cix=rl * 3; i < ru; i++, aix+=n, cix+=3) {    kbuff.set(0,0);    mean(a,aix,n,0,kbuff,kmean);    c[cix + 0]=kbuff._sum;    c[cix + 1]=n;    c[cix + 2]=kbuff._correction;  }}  }
class C{  public static double f1Measure(double precision,double recall){  return 2 * precision * recall / (precision + recall);}  }
class C{  private int findPosition(@NonNull String tmpTotal,@NonNull SpannableStringBuilder ssb,@NonNull SpannableStringBuilder tmp){  String tmpTmpTotal=tmpTotal;  int position=tmpTmpTotal.indexOf(KEY_STRIKE_THROUGH);  if (position == -1) {    return -1;  } else {    if (checkInInlineCode(ssb,tmp.length() + position,KEY_STRIKE_THROUGH.length())) {      StringBuilder sb=new StringBuilder(tmpTmpTotal.substring(0,position)).append("$$").append(tmpTmpTotal.substring(position + KEY_STRIKE_THROUGH.length(),tmpTmpTotal.length()));      return findPosition(sb.toString(),ssb,tmp);    } else {      return position;    }  }}  }
class C{  public static void writeToFile(ArrayList al,String filename){  writeToFile(al,filename,true);}  }
class C{  public static boolean equals(char[] array1,char[] array2){  if (array1 == array2) {    return true;  }  if (array1 == null || array2 == null || array1.length != array2.length) {    return false;  }  for (int i=0; i < array1.length; i++) {    if (array1[i] != array2[i]) {      return false;    }  }  return true;}  }
class C{  protected void sequence_IdentityEscapeSequence(ISerializationContext context,IdentityEscapeSequence semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,RegularExpressionPackage.Literals.IDENTITY_ESCAPE_SEQUENCE__SEQUENCE) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,RegularExpressionPackage.Literals.IDENTITY_ESCAPE_SEQUENCE__SEQUENCE));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getIdentityEscapeSequenceAccess().getSequenceIDENTITY_ESCAPETerminalRuleCall_0(),semanticObject.getSequence());  feeder.finish();}  }
class C{  public static MethodHandle unboxExact(Wrapper type,boolean throwNPE){  return unbox(type,throwNPE ? 0 : 1);}  }
class C{  public static String formatInterval(final long millis){  try {    final long mins=millis / 60000;    final StringBuilder uptime=new StringBuilder(40);    final int uptimeDays=(int)(Math.floor(mins / 1440.0));    final int uptimeHours=(int)(Math.floor(mins / 60.0) % 24);    final int uptimeMins=(int)mins % 60;    uptime.append(uptimeDays).append(((uptimeDays == 1) ? " day " : " days ")).append((uptimeHours < 10) ? "0" : "").append(uptimeHours).append(':').append((uptimeMins < 10) ? "0" : "").append(uptimeMins);    return uptime.toString();  } catch (  final Exception e) {    return "unknown";  }}  }
class C{  private void trace(){  glUseProgram(computeProgram);  glDisable(GL_DEPTH_TEST);  long thisTime=System.nanoTime();  float elapsedSeconds=(thisTime - firstTime) / 1E9f;  glUniform1f(timeUniform,elapsedSeconds);  float blendFactor=frameNumber / (frameNumber + 1.0f);  glUniform1f(blendFactorUniform,blendFactor);  glUniform1i(bounceCountUniform,bounceCount);  glBindImageTexture(framebufferImageBinding,raytraceTexture,0,false,0,GL_READ_WRITE,GL_RGBA32F);  glBindImageTexture(worldPositionImageBinding,positionTexture,0,false,0,GL_READ_ONLY,GL_RGBA32F);  glBindImageTexture(worldNormalImageBinding,normalTexture,0,false,0,GL_READ_ONLY,GL_RGBA16F);  glBindBufferBase(GL_SHADER_STORAGE_BUFFER,boxesSsboBinding,ssbo);  int worksizeX=mathRoundPoT(width);  int worksizeY=mathRoundPoT(height);  glDispatchCompute(worksizeX / workGroupSizeX,worksizeY / workGroupSizeY,1);  glMemoryBarrier(GL_SHADER_IMAGE_ACCESS_BARRIER_BIT);  glBindBufferBase(GL_SHADER_STORAGE_BUFFER,boxesSsboBinding,0);  glBindImageTexture(framebufferImageBinding,0,0,false,0,GL_READ_WRITE,GL_RGBA32F);  glBindImageTexture(worldPositionImageBinding,0,0,false,0,GL_READ_ONLY,GL_RGBA32F);  glBindImageTexture(worldNormalImageBinding,0,0,false,0,GL_READ_ONLY,GL_RGBA16F);  glUseProgram(0);  frameNumber++;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:46.579 -0500",hash_original_method="AB820511C2318175DFB023ADDE00500D",hash_generated_method="5C7379F1CD33F66582C3B79E9B50B8B4") private Relation(){}  }
class C{  public static void unregisterInterest(){  try {    Region region1=cache.getRegion(Region.SEPARATOR + REGION_NAME1);    Region region2=cache.getRegion(Region.SEPARATOR + REGION_NAME2);    region1.unregisterInterest("ALL_KEYS");    region2.unregisterInterest("ALL_KEYS");  } catch (  CacheWriterException e) {    fail("test failed due to " + e);  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public long[] readAllLongs(){  String[] fields=readAllStrings();  long[] vals=new long[fields.length];  for (int i=0; i < fields.length; i++)   vals[i]=Long.parseLong(fields[i]);  return vals;}  }
class C{  public CPOrmLoader(Context context,Select<Model> select,int cacheSize){  this(context,select);  enableCursorCache(cacheSize);}  }
class C{  public DPolicyInformationChooser(JDialog parent,String title,PolicyInformation policyInformation) throws IOException {  super(parent,title,Dialog.ModalityType.DOCUMENT_MODAL);  initComponents(policyInformation);}  }
class C{  public static double uncenteredCorrelation(NumberVector x,NumberVector y){  final int xdim=x.getDimensionality(), ydim=y.getDimensionality();  if (xdim != ydim) {    throw new IllegalArgumentException("Invalid arguments: number vectors differ in dimensionality.");  }  double sumXX=0., sumYY=0., sumXY=0.;  for (int i=0; i < xdim; i++) {    final double xv=x.doubleValue(i), yv=y.doubleValue(i);    sumXX+=xv * xv;    sumYY+=yv * yv;    sumXY+=xv * yv;  }  if (!(sumXX > 0. && sumYY > 0.)) {    return (sumXX == sumYY) ? 1. : 0.;  }  return sumXY / Math.sqrt(sumXX * sumYY);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (min: ");  result.append(min);  result.append(", max: ");  result.append(max);  result.append(", unboundedMax: ");  result.append(unboundedMax);  result.append(')');  return result.toString();}  }
class C{  public HostEntry(final String patterns){  for (  String pattern : patterns.split("[\t ,]+")) {    if (pattern.length() == 0) {      continue;    }    if (pattern.startsWith("!")) {      myNegative.add(compilePattern(pattern.substring(1).trim()));    } else     if (pattern.indexOf('?') == 0 && pattern.indexOf('*') == 0) {      myExactPositive.add(pattern);    } else {      myPositive.add(compilePattern(pattern));    }  }}  }
class C{  @Override public ClusterNodeSettings build(){  checkArgument(super.gossipSeeds != null && !super.gossipSeeds.isEmpty(),"Empty FakeDnsEntries collection.");  return super.build();}  }
class C{  public void testFlipBitNegativeInside3(){  String as="-18446744073709551615";  String res="-18446744073709551611";  int number=2;  BigInteger aNumber=new BigInteger(as);  BigInteger result=aNumber.flipBit(number);  assertEquals(res,result.toString());}  }
class C{  @Override protected void onSetModerated(String target,String sourceNick,String sourceLogin,String sourceHostname){  Message message=new Message(service.getString(R.string.message_set_moderated,sourceNick));  message.setColor(Message.COLOR_BLUE);  server.getConversation(target).addMessage(message);  service.sendBroadcast(Broadcast.createConversationIntent(Broadcast.CONVERSATION_MESSAGE,server.getId(),target));}  }
class C{  public boolean isNull(int index){  return JSONObject.NULL.equals(opt(index));}  }
class C{  public void registerDescriptions() throws PluginException {  this.classLoader.setIgnoreDependencyClassloaders(true);  if (pluginParseRules != null) {    URL resource=this.classLoader.getResource(pluginParseRules);    if (resource != null) {      XMLImporter.importParseRules(resource,this);    } else {      throw new PluginException("Cannot find parse rules '" + pluginParseRules + "' for plugin "+ getName()+ ".");    }  }  if (pluginErrorDescriptions != null) {    I18N.registerErrorBundle(ResourceBundle.getBundle(pluginErrorDescriptions,Locale.getDefault(),this.classLoader));  }  if (pluginGUIDescriptions != null) {    I18N.registerGUIBundle(ResourceBundle.getBundle(pluginGUIDescriptions,Locale.getDefault(),this.classLoader));  }  if (pluginUserErrorDescriptions != null) {    I18N.registerUserErrorMessagesBundle(ResourceBundle.getBundle(pluginUserErrorDescriptions,Locale.getDefault(),this.classLoader));  }  if (pluginSettingsDescriptions != null) {    settingsRessourceBundle=ResourceBundle.getBundle(pluginSettingsDescriptions,Locale.getDefault(),this.classLoader);    I18N.registerSettingsBundle(settingsRessourceBundle);  }  if (!RapidMiner.getExecutionMode().isHeadless()) {    if (pluginResourceObjects != null) {      URL resource=this.classLoader.getResource(pluginResourceObjects);      if (resource != null) {        RendererService.init(name,resource,this.classLoader);      } else {        throw new PluginException("Cannot find io object descriptor '" + pluginResourceObjects + "' for plugin "+ getName()+ ".");      }    }    if (pluginGroupDescriptions != null) {      ProcessDrawUtils.registerAdditionalObjectColors(pluginGroupDescriptions,name,classLoader,this);      ProcessDrawUtils.registerAdditionalGroupColors(pluginGroupDescriptions,name,classLoader,this);    }  }  this.classLoader.setIgnoreDependencyClassloaders(false);}  }
class C{  int size(){  if (isDelete())   return oneRowChange.getKeyValues().size(); else   return oneRowChange.getColumnValues().size();}  }
class C{  @Override public void onClick(View v){switch (state) {case DAILY_STATE:    setState(HOURLY_STATE);  break;case HOURLY_STATE:setState(DAILY_STATE);break;}}  }
class C{  public void receiveErrorqueryUniqueIdentifiersForLuns(java.lang.Exception e){}  }
class C{  public static void generateDelayBranch(final List<ReilInstruction> instructions,final long baseOffset,final OperandSize conditionSize,final String conditionOperand,final OperandSize targetSize,final IOperandTreeNode targetOperand){  generateDelayBranchInternal(instructions,baseOffset,conditionSize,conditionOperand,targetSize,targetOperand,new String[]{"branch_delay","true"});}  }
class C{  public static boolean hasTime(Date date){  if (date == null) {    return false;  }  Calendar c=Calendar.getInstance();  c.setTime(date);  if (c.get(Calendar.HOUR_OF_DAY) > 0) {    return true;  }  if (c.get(Calendar.MINUTE) > 0) {    return true;  }  if (c.get(Calendar.SECOND) > 0) {    return true;  }  if (c.get(Calendar.MILLISECOND) > 0) {    return true;  }  return false;}  }
class C{  public int maxProduct(int[] A){  if (A == null || A.length == 0)   return 0;  int max=A[0], min=A[0], res=A[0];  for (int i=1; i < A.length; i++) {    int preMax=max, preMin=min;    max=Math.max(Math.max(A[i],preMax * A[i]),preMin * A[i]);    min=Math.min(Math.min(A[i],preMax * A[i]),preMin * A[i]);    res=Math.max(max,res);  }  return res;}  }
class C{  @SideOnly(Side.CLIENT) public static void drawUntexturedQuad(final float x,final float y,final float w,final float h){  final Tessellator tessellator=Tessellator.getInstance();  final WorldRenderer worldRenderer=tessellator.getWorldRenderer();  worldRenderer.begin(GL11.GL_QUADS,DefaultVertexFormats.POSITION);  worldRenderer.pos(x,y + h,0).endVertex();  worldRenderer.pos(x + w,y + h,0).endVertex();  worldRenderer.pos(x + w,y,0).endVertex();  worldRenderer.pos(x,y,0).endVertex();  tessellator.draw();}  }
class C{  public CreateSnapshotRequest indicesOptions(IndicesOptions indicesOptions){  this.indicesOptions=indicesOptions;  return this;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodegetfirstchildnull.class,args);}  }
class C{  public void initGui(){  resetSynapseDiameters();  resetColors();  repaint();  clearSelection();}  }
class C{  public Matrix4x3f m21(float m21){  this.m21=m21;  properties&=~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION);  return this;}  }
class C{  public void debug(Object message){  log(Level.FINE,String.valueOf(message),null);}  }
class C{  public static ClassNode inferLoopElementType(final ClassNode collectionType){  ClassNode componentType=collectionType.getComponentType();  if (componentType == null) {    if (implementsInterfaceOrIsSubclassOf(collectionType,ITERABLE_TYPE)) {      ClassNode intf=GenericsUtils.parameterizeType(collectionType,ITERABLE_TYPE);      GenericsType[] genericsTypes=intf.getGenericsTypes();      componentType=genericsTypes[0].getType();    } else     if (implementsInterfaceOrIsSubclassOf(collectionType,MAP_TYPE)) {      ClassNode intf=GenericsUtils.parameterizeType(collectionType,MAP_TYPE);      GenericsType[] genericsTypes=intf.getGenericsTypes();      componentType=MAP_ENTRY_TYPE.getPlainNodeReference();      componentType.setGenericsTypes(genericsTypes);    } else     if (STRING_TYPE.equals(collectionType)) {      componentType=ClassHelper.Character_TYPE;    } else     if (ENUMERATION_TYPE.equals(collectionType)) {      ClassNode intf=GenericsUtils.parameterizeType(collectionType,ENUMERATION_TYPE);      GenericsType[] genericsTypes=intf.getGenericsTypes();      componentType=genericsTypes[0].getType();    } else {      componentType=ClassHelper.OBJECT_TYPE;    }  }  return componentType;}  }
class C{  public ExtensionResourceFilter(String extension,boolean allowDir){  this(new String[]{extension},allowDir,true);}  }
class C{  public static int compare(int count,byte[] a,int aOffset,byte[] b,int bOffset){  for (int i=0; i < count; i++) {    int cmp=(a[aOffset + i] & 0xff) - (b[bOffset + i] & 0xff);    if (cmp != 0) {      return cmp;    }  }  return 0;}  }
class C{  private static boolean parse(Class<?> service,URL u) throws ServiceConfigurationError {  InputStream in=null;  BufferedReader r=null;  try {    in=u.openStream();    r=new BufferedReader(new InputStreamReader(in,"utf-8"));    int lc=1;    String ln;    while ((ln=r.readLine()) != null) {      int ci=ln.indexOf('#');      if (ci >= 0)       ln=ln.substring(0,ci);      ln=ln.trim();      int n=ln.length();      if (n != 0) {        if ((ln.indexOf(' ') >= 0) || (ln.indexOf('\t') >= 0))         fail(service,u,lc,"Illegal configuration-file syntax");        int cp=ln.codePointAt(0);        if (!Character.isJavaIdentifierStart(cp))         fail(service,u,lc,"Illegal provider-class name: " + ln);        for (int i=Character.charCount(cp); i < n; i+=Character.charCount(cp)) {          cp=ln.codePointAt(i);          if (!Character.isJavaIdentifierPart(cp) && (cp != '.'))           fail(service,u,lc,"Illegal provider-class name: " + ln);        }        return true;      }    }  } catch (  FileNotFoundException x) {    return false;  }catch (  IOException x) {    fail(service,": " + x);  } finally {    try {      if (r != null)       r.close();    } catch (    IOException y) {      fail(service,": " + y);    }    try {      if (in != null)       in.close();    } catch (    IOException y) {      fail(service,": " + y);    }  }  return false;}  }
class C{  public static void liftingFromBottom(View view,float baseRotation,float fromY,int duration,int startDelay){  ViewHelper.setRotationX(view,baseRotation);  ViewHelper.setTranslationY(view,fromY);  ViewPropertyAnimator.animate(view).setInterpolator(new AccelerateDecelerateInterpolator()).setDuration(duration).setStartDelay(startDelay).rotationX(0).translationY(0).start();}  }
class C{  public static UniformPair<EventBean[]> flattenList(ArrayDeque<UniformPair<EventBean[]>> eventVector){  if (eventVector.isEmpty()) {    return null;  }  if (eventVector.size() == 1) {    return eventVector.getFirst();  }  int totalNew=0;  int totalOld=0;  for (  UniformPair<EventBean[]> pair : eventVector) {    if (pair != null) {      if (pair.getFirst() != null) {        totalNew+=pair.getFirst().length;      }      if (pair.getSecond() != null) {        totalOld+=pair.getSecond().length;      }    }  }  if ((totalNew + totalOld) == 0) {    return null;  }  EventBean[] resultNew=null;  if (totalNew > 0) {    resultNew=new EventBean[totalNew];  }  EventBean[] resultOld=null;  if (totalOld > 0) {    resultOld=new EventBean[totalOld];  }  int destPosNew=0;  int destPosOld=0;  for (  UniformPair<EventBean[]> pair : eventVector) {    if (pair != null) {      if (pair.getFirst() != null) {        System.arraycopy(pair.getFirst(),0,resultNew,destPosNew,pair.getFirst().length);        destPosNew+=pair.getFirst().length;      }      if (pair.getSecond() != null) {        System.arraycopy(pair.getSecond(),0,resultOld,destPosOld,pair.getSecond().length);        destPosOld+=pair.getSecond().length;      }    }  }  return new UniformPair<EventBean[]>(resultNew,resultOld);}  }
class C{  private void createLogMgtPage(body bb){  bb.addElement(new hr());  table table=new table();  table.setBorder(1);  table.setCellSpacing(2);  table.setCellPadding(2);  Properties ctx=new Properties();  MSystem system=MSystem.get(ctx);  tr line=new tr();  line.addElement(new th().addElement(system.getDBAddress()));  line.addElement(new td().addElement(Ini.getAdempiereHome()));  table.addElement(line);  line=new tr();  String info=System.getProperty("os.name") + " " + System.getProperty("os.version");  String s=System.getProperty("sun.os.patch.level");  if (s != null && s.length() > 0)   info+=" (" + s + ")";  line.addElement(new th().addElement(info));  info=system.getName();  if (system.getCustomPrefix() != null)   info+=" (" + system.getCustomPrefix() + ")";  line.addElement(new td().addElement(info));  table.addElement(line);  line=new tr();  info=System.getProperty("java.vm.name") + " " + System.getProperty("java.vm.version");  line.addElement(new th().addElement(info));  line.addElement(new td().addElement(system.getUserName()));  table.addElement(line);  line=new tr();  CConnection cc=CConnection.get();  AdempiereDatabase db=cc.getDatabase();  info=db.getDescription();  line.addElement(new th().addElement(info));  line.addElement(new td().addElement(cc.getConnectionURL()));  table.addElement(line);  line=new tr();  line.addElement(new th().addElement("Processor/Support"));  line.addElement(new td().addElement(system.getNoProcessors() + "/" + system.getSupportUnits()));  table.addElement(line);  line=new tr();  MemoryMXBean memory=ManagementFactory.getMemoryMXBean();  line.addElement(new th().addElement("VM Memory"));  line.addElement(new td().addElement(new CMemoryUsage(memory.getNonHeapMemoryUsage()).toString()));  table.addElement(line);  line=new tr();  line.addElement(new th().addElement("Heap Memory"));  line.addElement(new td().addElement(new CMemoryUsage(memory.getHeapMemoryUsage()).toString()));  table.addElement(line);  line=new tr();  RuntimeMXBean rt=ManagementFactory.getRuntimeMXBean();  line.addElement(new th().addElement("Runtime " + rt.getName()));  line.addElement(new td().addElement(TimeUtil.formatElapsed(rt.getUptime())));  table.addElement(line);  line=new tr();  ThreadMXBean th=ManagementFactory.getThreadMXBean();  line.addElement(new th().addElement("Threads " + th.getThreadCount()));  line.addElement(new td().addElement("Peak=" + th.getPeakThreadCount() + ", Demons="+ th.getDaemonThreadCount()+ ", Total="+ th.getTotalStartedThreadCount()));  table.addElement(line);  Trx[] trxs=Trx.getActiveTransactions();  for (  Trx trx : trxs) {    if (trx != null && trx.isActive()) {      line=new tr();      line.addElement(new th().addElement("Active Transaction "));      line.addElement(new td().addElement("Name=" + trx.getTrxName() + ", StartTime="+ trx.getStartTime()));      table.addElement(line);    }  }  line=new tr();  line.addElement(new th().addElement(CacheMgt.get().toStringX()));  line.addElement(new td().addElement(new a("adempiereMonitor?CacheReset=Yes","Reset Cache")));  table.addElement(line);  line=new tr();  line.addElement(new th().addElement(new label("TraceLevel").addElement("Trace Log Level")));  form myForm=new form("adempiereMonitor",form.METHOD_POST,form.ENC_DEFAULT);  option[] options=new option[CLogMgt.LEVELS.length];  for (int i=0; i < options.length; i++) {    options[i]=new option(CLogMgt.LEVELS[i].getName());    options[i].addElement(CLogMgt.LEVELS[i].getName());    if (CLogMgt.LEVELS[i] == CLogMgt.getLevel())     options[i].setSelected(true);  }  select sel=new select("TraceLevel",options);  myForm.addElement(sel);  myForm.addElement(new input(input.TYPE_SUBMIT,"Set","Set"));  line.addElement(new td().addElement(myForm));  table.addElement(line);  line=new tr();  CLogFile fileHandler=CLogFile.get(true,null,false);  line.addElement(new th().addElement("Trace File"));  line.addElement(new td().addElement(new a("adempiereMonitor?Trace=" + fileHandler.getFileName(),"Current")));  table.addElement(line);  line=new tr();  line.addElement(new td().addElement(new a("adempiereMonitor?Trace=ROTATE","Rotate Trace Log")));  line.addElement(new td().addElement(new a("adempiereMonitor?Trace=DELETE","Delete all Trace Logs")));  table.addElement(line);  bb.addElement(table);  p p=new p();  p.addElement(new b("All Log Files: "));  File logDir=fileHandler.getLogDirectory();  if (logDir != null && logDir.isDirectory()) {    File[] logs=logDir.listFiles();    for (int i=0; i < logs.length; i++) {      if (!logs[i].isFile())       continue;      if (i != 0)       p.addElement(" - ");      String fileName=logs[i].getAbsolutePath();      a link=new a("adempiereMonitor?Trace=" + fileName,fileName);      p.addElement(link);      int size=(int)(logs[i].length() / 1024);      if (size < 1024)       p.addElement(" (" + size + "k)"); else       p.addElement(" (" + size / 1024 + "M)");    }  }  bb.addElement(p);  table=new table();  table.setBorder(1);  table.setCellSpacing(2);  table.setCellPadding(2);  line=new tr();  MClient[] clients=MClient.getAll(ctx);  line.addElement(new th().addElement("Client #" + clients.length + " - EMail Test:"));  p=new p();  for (int i=0; i < clients.length; i++) {    MClient client=clients[i];    if (i > 0)     p.addElement(" - ");    p.addElement(new a("adempiereMonitor?EMail=" + client.getAD_Client_ID(),client.getName()));  }  if (clients.length == 0)   p.addElement("&nbsp;");  line.addElement(new td().addElement(p));  table.addElement(line);  line=new tr();  MStore[] wstores=MStore.getActive();  line.addElement(new th().addElement("Active Web Stores #" + wstores.length));  p=new p();  for (int i=0; i < wstores.length; i++) {    MStore store=wstores[i];    if (i > 0)     p.addElement(" - ");    a a=new a(store.getWebContext(),store.getName());    a.setTarget("t" + i);    p.addElement(a);  }  if (wstores.length == 0)   p.addElement("&nbsp;");  line.addElement(new td().addElement(p));  table.addElement(line);  bb.addElement(table);}  }
class C{  private LocalDateTime with(LocalDate newDate,LocalTime newTime){  if (date == newDate && time == newTime) {    return this;  }  return new LocalDateTime(newDate,newTime);}  }
class C{  public ParseGeoPoint(double latitude,double longitude){  setLatitude(latitude);  setLongitude(longitude);}  }
class C{  public boolean isUseBias(){  return useBias;}  }
class C{  public void hasBody(boolean hasBody){  this.hasBody=hasBody;}  }
class C{  private static void validateNumber(String fieldName,String value){  try {    validateRegex(fieldName,value,NUMBER_REGEX);  } catch (  Exception e) {    throw APIException.badRequests.serviceFieldNonNumeric(fieldName);  }}  }
class C{  public static Builder builder(){  return new Builder();}  }
class C{  public static <K,V extends Comparable<V>>Map<K,V> sortMapDescendingByValue(Map<K,V> unsortMap){  List<Map.Entry<K,V>> list=new LinkedList<>(unsortMap.entrySet());  Collections.sort(list,null);  Map<K,V> sortedMap=new LinkedHashMap<>();  for (  Map.Entry<K,V> entry : list) {    sortedMap.put(entry.getKey(),entry.getValue());  }  return sortedMap;}  }
class C{  public FloatArray grow(FloatArray array,long minSize){  if (minSize <= array.size()) {    return array;  }  final long newSize=overSize(minSize,INT_PAGE_SIZE,RamUsageEstimator.NUM_BYTES_FLOAT);  return resize(array,newSize);}  }
class C{  private void createModelWithEntryPointAsTopParent(TreeElement<SecuritySpecModel,Object> root){  Map<MethodModel,List<MethodModel>> inputEventBlocks=getSpec().getInputEventBlocks();  if (inputEventBlocks != null) {    for (    MethodModel inputMethod : inputEventBlocks.keySet()) {      TreeElement<Object,MethodModel> inputElement=new TreeElement<Object,MethodModel>(inputMethod.getShortSignature(),inputMethod,MethodModel.class);      root.addChild(inputElement);      updatePropertyChangeListener(inputMethod,inputElement);      for (      MethodModel outputMethod : inputEventBlocks.get(inputMethod)) {        String methodSignature=outputMethod.getShortSignature();        TreeElement<MethodModel,Object> outputElement=new TreeElement<MethodModel,Object>(methodSignature,outputMethod,Object.class);        inputElement.addChild(outputElement);        updatePropertyChangeListener(outputMethod,outputElement);        List<CodeLocationModel> locations=outputMethod.getLines();        if (locations != null) {          if (locations.size() == 1) {            CodeLocationModel location=locations.get(0);            List<HotspotModel> hotspots=location.getHotspots();            for (            HotspotModel hotspot : hotspots) {              TreeElement<Object,Object> hotspotElement=new TreeElement<Object,Object>(hotspot.toString(),hotspot,Object.class);              outputElement.addChild(hotspotElement);              updatePropertyChangeListener(hotspot,hotspotElement);            }          } else {            for (            CodeLocationModel location : locations) {              TreeElement<Object,HotspotModel> locationElement=new TreeElement<Object,HotspotModel>(location.toString(),location,HotspotModel.class);              outputElement.addChild(locationElement);              updatePropertyChangeListener(location,locationElement);              List<HotspotModel> hotspots=location.getHotspots();              for (              HotspotModel hotspot : hotspots) {                TreeElement<HotspotModel,Object> hotspotElement=new TreeElement<HotspotModel,Object>(hotspot.toString(),hotspot,Object.class);                locationElement.addChild(hotspotElement);                updatePropertyChangeListener(hotspot,hotspotElement);              }            }          }        }      }    }  }}  }
class C{  public Boolean checkIfFileIsDuplicate(final String name,final SoftwareModule selectedSoftwareModule){  Boolean isDuplicate=false;  final String currentBaseSoftwareModuleKey=HawkbitCommonUtil.getFormattedNameVersion(selectedSoftwareModule.getName(),selectedSoftwareModule.getVersion());  for (  final CustomFile customFile : artifactUploadState.getFileSelected()) {    final String fileSoftwareModuleKey=HawkbitCommonUtil.getFormattedNameVersion(customFile.getBaseSoftwareModuleName(),customFile.getBaseSoftwareModuleVersion());    if (customFile.getFileName().equals(name) && currentBaseSoftwareModuleKey.equals(fileSoftwareModuleKey)) {      isDuplicate=true;      break;    }  }  return isDuplicate;}  }
class C{  public long addWrapField(long instant,int months){  return set(instant,FieldUtils.getWrappedValue(get(instant),months,MIN,iMax));}  }
class C{  private int peekChar(int offset){  if (offset < fDocument.getLength()) {    try {      IRegion line=fDocument.getLineInformationOfOffset(offset);      int lineOffset=line.getOffset();      int next=fScanner.nextToken(offset,lineOffset + line.getLength());      return next;    } catch (    BadLocationException e) {    }  }  return Symbols.TokenEOF;}  }
class C{  public int compareTo(DebugScript other){  return comparableName.compareTo(other.comparableName);}  }
class C{  public void join(String nickname) throws XMPPException {  join(nickname,null,null,SmackConfiguration.getPacketReplyTimeout());}  }
class C{  public boolean shouldLogOnNullSet(String lhs,String rhs){  if (lhs.equals("$settest"))   return false;  return true;}  }
class C{  public void endElement(String uri,String localName,String qName) throws SAXException {  currentElement="";  level--;  if (localName.compareTo("service") == 0) {    if (device.getServiceTypeCIF() != null && device.getServiceTypeCIF().compareTo("urn:schemas-upnp-org:service:WANCommonInterfaceConfig:1") == 0)     state=2;    if (device.getServiceType() != null && device.getServiceType().compareTo("urn:schemas-upnp-org:service:WANIPConnection:1") == 0)     state=3;  }}  }
class C{  public boolean isValidating(){  return getFeature(XmlPullParser.FEATURE_VALIDATION);}  }
class C{  public void addKeyword(final String s,final V value){  root.add(s,value);}  }
class C{  public void validateTagKey(TagKey tagKey) throws IllegalArgumentException {  Assert.notNull(tagKey,"A tag key must be specified.");  Assert.notNull(tagKey.getTagTypeCode(),"A tag type code must be specified.");  Assert.notNull(tagKey.getTagCode(),"A tag code must be specified.");  tagKey.setTagCode(alternateKeyHelper.validateStringParameter("tag code",tagKey.getTagCode()));  tagKey.setTagTypeCode(alternateKeyHelper.validateStringParameter("tag type code",tagKey.getTagTypeCode()));}  }
class C{  private static boolean eq(float v1,float v2){  return v1 == v2;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:26.262 -0400",hash_original_method="B6F04CCC5A967411777D1204AE8409FD",hash_generated_method="B0D015CB3EFF6E3C666C56C09DE25494") @Override public void clear(){  Arrays.fill(elements,null);  size=0;}  }
class C{  public void removeStyle(String nm){  styles.removeAttribute(nm);}  }
class C{  public void test_webapp_structure_favicon() throws Exception {  doGET(m_serviceURL + "/html/favicon.ico");}  }
class C{  public int port(){  return address.getPort();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void insertBefore(List<E> toInsert,E point){  LinkedList<E> backwardList=new LinkedList<E>();{    Iterator<E> it=toInsert.iterator();    while (it.hasNext())     backwardList.addFirst(it.next());  }  E previousPoint=point;  Iterator<E> it=backwardList.iterator();  while (it.hasNext()) {    E o=it.next();    insertBeforeNoRedirect(o,previousPoint);    previousPoint=o;  }  point.redirectJumpsToThisTo(toInsert.get(0));}  }
class C{  public void assertInvokeVirtualEquals(Object value,Class target,ConcreteMethod method,String returns,String... args){  Compiler compiler=compilerLocal.get();  compiler.setFlags(compilerFlags());  Class iv=invokeVirtualHarness(target,method,returns,args);  ClassLoader loader=compiler.compile(iv,target);  assertStaticCallEquals(loader,iv,method.getName(),value);  compiler.cleanup();}  }
class C{  @Override public void updateClob(String columnLabel,Reader x,long length) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateClob(" + quote(columnLabel) + ", x, "+ length+ "L);");    }    checkClosed();    Value v=conn.createClob(x,length);    update(columnLabel,v);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_characterdatainsertdataend.class,args);}  }
class C{  private ValueGeometry(byte[] bytes,Geometry geometry){  this.bytes=bytes;  this.geometry=geometry;  this.hashCode=Arrays.hashCode(bytes);}  }
class C{  public void wakeup(){  if (this.waiter == null) {    throw new IllegalStateException("Nobody waiting on this object.");  }  this.cond.signalAll();}  }
class C{  protected void convertInstance(Instance instance) throws Exception {  double[] instanceVals=new double[outputFormatPeek().numAttributes()];  double[] tempvals;  if (instance.classIndex() >= 0) {    tempvals=new double[outputFormatPeek().numAttributes() - 1];  } else {    tempvals=new double[outputFormatPeek().numAttributes()];  }  int pos=0;  for (int j=0; j < m_clusterers.length; j++) {    if (m_clusterers[j] != null) {      double[] probs;      if (m_removeAttributes != null) {        m_removeAttributes.input(instance);        probs=logs2densities(j,m_removeAttributes.output());      } else {        probs=logs2densities(j,instance);      }      System.arraycopy(probs,0,tempvals,pos,probs.length);      pos+=probs.length;    }  }  tempvals=Utils.logs2probs(tempvals);  System.arraycopy(tempvals,0,instanceVals,0,tempvals.length);  if (instance.classIndex() >= 0) {    instanceVals[instanceVals.length - 1]=instance.classValue();  }  push(new DenseInstance(instance.weight(),instanceVals));}  }
class C{  @Override protected void init(){  queue=new ReferenceQueue<Object>();}  }
class C{  protected void changeParentDocId(int parentDocId){  m_parentDocId=parentDocId;}  }
class C{  public Element newDocument(String rootTag){  DocumentBuilder builder;  try {    builder=DocumentBuilderFactory.newInstance().newDocumentBuilder();  } catch (  ParserConfigurationException e) {    throw new RuntimeException(e);  }  Document doc=builder.newDocument();  Element root=doc.createElement(rootTag);  doc.appendChild(root);  String[] nvpairs=new String[]{"xmlns:xsi",XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI,ATTR_VERSION,"1.0"};  for (int i=0; i < nvpairs.length; i+=2) {    root.setAttribute(nvpairs[i],nvpairs[i + 1]);  }  return root;}  }
class C{  public ByteVector putByteArray(final byte[] b,final int off,final int len){  if (length + len > data.length) {    enlarge(len);  }  if (b != null) {    System.arraycopy(b,off,data,length,len);  }  length+=len;  return this;}  }
class C{  String processTemplate(final List<String> mailTemplateChain,final String shopCode,final String locale,final String fileName,final String ext,final Map<String,Object> model,final boolean include){  try {    final String template=mailTemplateResourcesProvider.getTemplate(mailTemplateChain,shopCode,locale,fileName,ext);    final Map<String,Object> enhancedModel=new HashMap<String,Object>(model);    final Map<String,Object> mailComposer=new HashMap<String,Object>();    enhancedModel.put("MailComposer",mailComposer);    mailComposer.put("mailTemplateChain",mailTemplateChain);    mailComposer.put("shopCode",shopCode);    mailComposer.put("locale",locale);    mailComposer.put("fileName",fileName);    mailComposer.put("ext",ext);    mailComposer.put("model",model);    final String content=templateSupport.processTemplate(template,locale,enhancedModel);    if (!include) {      LOG.debug("Processed template for locale {}, template: {}, ext: {}\n{}",new Object[]{locale,fileName,ext,content});    }    return content;  } catch (  IOException e) {    LOG.warn("No template found for locale {}, template: {}, ext: {}",new Object[]{locale,fileName,ext});    return null;  }}  }
class C{  public LocalVariableTypeTable_attribute findLocalVariableTypeTable(){  int i;  for (i=0; i < attributes_count; i++) {    if (attributes[i] instanceof LocalVariableTypeTable_attribute)     return (LocalVariableTypeTable_attribute)(attributes[i]);  }  return null;}  }
class C{  public int intersectionSize(BitVector v2){  return BitsUtil.intersectionSize(bits,v2.bits);}  }
class C{  private static String buildMessage(String format,Object... args){  String msg=(args == null) ? format : String.format(Locale.US,format,args);  StackTraceElement[] trace=new Throwable().fillInStackTrace().getStackTrace();  String caller="<unknown>";  for (int i=2; i < trace.length; i++) {    Class<?> clazz=trace[i].getClass();    if (!clazz.equals(BlinkLog.class)) {      String callingClass=trace[i].getClassName();      callingClass=callingClass.substring(callingClass.lastIndexOf('.') + 1);      callingClass=callingClass.substring(callingClass.lastIndexOf('$') + 1);      caller=callingClass + "." + trace[i].getMethodName();      break;    }  }  return String.format(Locale.US,"[%d] %s: %s",Thread.currentThread().getId(),caller,msg);}  }
class C{  public static String suffix_s(final String noun){  final char last=Character.toLowerCase(noun.charAt(noun.length() - 1));  if (last == 's') {    return noun + "'";  }  return noun + "'s";}  }
class C{  public static Set<Unit> findMinTransportsToUnload(final Collection<Unit> units,final Collection<Unit> transports){  final Set<Unit> result=new HashSet<>();  Map<Unit,List<Unit>> unitToPotentialTransports=findTransportsThatUnitsCouldUnloadFrom(units,transports);  while (!unitToPotentialTransports.isEmpty()) {    unitToPotentialTransports=sortByTransportOptionsAscending(unitToPotentialTransports);    final Unit currentUnit=unitToPotentialTransports.keySet().iterator().next();    final Unit selectedTransport=findOptimalTransportToUnloadFrom(currentUnit,unitToPotentialTransports);    unitToPotentialTransports=removeTransportAndLoadedUnits(selectedTransport,unitToPotentialTransports);    result.add(selectedTransport);  }  return result;}  }
class C{  public boolean canUndo(){  return m_nCurrentEditAction >= 0;}  }
class C{  public FilteredRowSetImpl() throws SQLException {  super();}  }
class C{  public final synchronized void printLine(String format,Object... args){  String s=String.format(Locale.US,format,args);  addLine(s);}  }
class C{  public boolean relative(int rows) throws SQLException {  if (numRows == 0 || isBeforeFirst() || isAfterLast() || getType() == ResultSet.TYPE_FORWARD_ONLY) {    throw new SQLException(resBundle.handleGetObject("cachedrowsetimpl.relative").toString());  }  if (rows == 0) {    return true;  }  if (rows > 0) {    if (cursorPos + rows > numRows) {      afterLast();    } else {      for (int i=0; i < rows; i++) {        if (!internalNext())         break;      }    }  } else {    if (cursorPos + rows < 0) {      beforeFirst();    } else {      for (int i=rows; i < 0; i++) {        if (!internalPrevious())         break;      }    }  }  notifyCursorMoved();  if (isAfterLast() || isBeforeFirst()) {    return false;  } else {    return true;  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  int v=getInt(stack);  CaptureDeviceInput conn=getCapDevInput(stack);  if (conn != null)   conn.setHue(v);  return null;}  }
class C{  public String simplify(final String visibility){  requireNonNull(visibility);  String last=visibility;  String simplified=new String(new ColumnVisibility(visibility).flatten(),Charsets.UTF_8);  while (!simplified.equals(last)) {    last=simplified;    simplified=new String(new ColumnVisibility(simplified).flatten(),Charsets.UTF_8);  }  return simplified;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:40.063 -0500",hash_original_method="94F50CCB3C281DFAB53140F44BEA7518",hash_generated_method="1E4E197488849CB34459EC1D10621814") public Builder penaltyDeath(){  return enable(PENALTY_DEATH);}  }
class C{  protected void generateSchemas(File baseDir) throws Exception {  log("Generating Schemas to: " + baseDir.getCanonicalPath() + "/"+ outputDir);  Java javatask=(Java)getProject().createTask("java");  javatask.setClassname(SchemaGenerator.class.getName());  javatask.setFork(true);  javatask.createJvmarg().setValue("-Dfile.encoding=" + this.inputCharset);  for (  Argument arg : jvmArgs) {    if (arg != null) {      javatask.createJvmarg().setValue(arg.getParts()[0]);    }  }  javatask.createArg().setValue(baseDir.getCanonicalPath());  javatask.createArg().setValue(outputDir.getCanonicalPath());  javatask.createArg().setValue("-generateDoc");  addCompilerParameters(javatask);  for (  Path path : this.classpath) {    javatask.setClasspath(path);  }  int resultCode=javatask.executeJava();  if (resultCode != 0) {    log("Error generating schemas.",1);  }}  }
class C{  final Attribute stringifyAttrDesc(Attributes attrDefAttrs) throws NamingException {  Attribute attrDescAttr=new BasicAttribute(ATTRIBUTEDESC_ATTR_ID);  attrDescAttr.add(attrDef2AttrDesc(attrDefAttrs));  return attrDescAttr;}  }
class C{  static private void addTimestampFormat(StringBuilder sb,boolean avoidColons){  if (avoidColons)   sb.append(",'YYYY-MM-DD\"T\"HH24.MI.SS.FF\"Z\"')"); else   sb.append(",'YYYY-MM-DD\"T\"HH24:MI:SS.FF\"Z\"')");}  }
class C{  private boolean checkIfVplexVolumeHasActiveAssociatedVolumes(Volume volume){  boolean activeAssociatedVolumes=false;  if (volume != null && volume.getAssociatedVolumes() != null) {    for (    String associatedVolumeUri : volume.getAssociatedVolumes()) {      Volume associatedVolume=_dbClient.queryObject(Volume.class,URI.create(associatedVolumeUri));      if (associatedVolume != null && !associatedVolume.getInactive()) {        _log.warn("volume {} has active associated volume {}",volume.getLabel(),associatedVolume.getLabel());        if (associatedVolume.getNativeId() == null) {          _log.warn("associated volume with Id {} has no native Id. Native Id is {}. So mark this volume for deletion. ",associatedVolume.getId(),associatedVolume.getNativeId());          _dbClient.markForDeletion(associatedVolume);        } else {          activeAssociatedVolumes=true;        }      }    }  }  return activeAssociatedVolumes;}  }
class C{  protected int endOfLineOf(int offset) throws BadLocationException {  IRegion info=document.getLineInformationOfOffset(offset);  if (offset <= info.getOffset() + info.getLength())   return info.getOffset() + info.getLength();  int line=document.getLineOfOffset(offset);  try {    info=document.getLineInformation(line + 1);    return info.getOffset() + info.getLength();  } catch (  BadLocationException x) {    return document.getLength();  }}  }
class C{  public Bools(Bools other){  __isset_bitfield=other.__isset_bitfield;  this.im_true=other.im_true;  this.im_false=other.im_false;}  }
class C{  public AbScrollTextView(Context context,AttributeSet attrs){  super(context,attrs);}  }
class C{  public T caseStatement(Statement object){  return null;}  }
class C{  private CoderResult controlSequence(short newByte){  if (newByte >= 0x30 && newByte <= 0x3F) {    if (state == CONTROL_SEQUENCE_IF) {      return malformedInput(ERR_CTRLPI);    }    queue.write(newByte);  } else   if (newByte >= 0x20 && newByte <= 0x2F) {    state=CONTROL_SEQUENCE_IF;    queue.write(newByte);  } else   if (newByte >= 0x40 && newByte <= 0x7E) {    state=NORMAL_BYTES;    queue.reset();  } else {    return malformedInput(ERR_CTRLBYTE);  }  return CoderResult.UNDERFLOW;}  }
class C{  protected void initializePropertyChangeListener(PropertyChangeListener pcl){  TimerStatus runningStatus=timer.isRunning() ? (getClockDirection() > 0 ? TimerStatus.FORWARD : TimerStatus.BACKWARD) : TimerStatus.STOPPED;  firePropertyChange(TIMER_STATUS,null,runningStatus);  fireClockUpdate(runningStatus);}  }
class C{  private void verifyReservedBit1(WebSocketFrame frame) throws WebSocketException {  if (mPMCE != null) {    boolean verified=verifyReservedBit1ForPMCE(frame);    if (verified) {      return;    }  }  if (frame.getRsv1() == false) {    return;  }  throw new WebSocketException(WebSocketError.UNEXPECTED_RESERVED_BIT,"The RSV1 bit of a frame is set unexpectedly.");}  }
class C{  public NBTTagCompound writeToNBT(NBTTagCompound nbt){  nbt.setUniqueId("uuid",this.storageUUID);  nbt.setInteger("x",this.chunkPos.chunkXPos);  nbt.setInteger("z",this.chunkPos.chunkZPos);  return nbt;}  }
class C{  public void calculateSelection(){  dataStatus.setText(calculateSelection(miniTable));  bGenerate.setEnabled(m_noSelected != 0);}  }
class C{  public void onConfigurationChanged(){  if (mSearchable != null && isShowing()) {    updateSearchAppIcon();    updateSearchBadge();    if (isLandscapeMode(getContext())) {      mSearchAutoComplete.ensureImeVisible(true);    }  }}  }
class C{  public NumberRangeModel(long lo,long hi,long min,long max){  this(new Long(lo),new Long(hi),new Long(min),new Long(max));}  }
class C{  public void addValue(IFitsHeader key,boolean val) throws HeaderCardException {  addValue(key.key(),val,key.comment());}  }
class C{  static void export(OutputStream os,final Preferences p,boolean subTree) throws IOException, BackingStoreException {  if (((AbstractPreferences)p).isRemoved())   throw new IllegalStateException("Node has been removed");  Document doc=createPrefsDoc("preferences");  Element preferences=doc.getDocumentElement();  preferences.setAttribute("EXTERNAL_XML_VERSION",EXTERNAL_XML_VERSION);  Element xmlRoot=(Element)preferences.appendChild(doc.createElement("root"));  xmlRoot.setAttribute("type",(p.isUserNode() ? "user" : "system"));  List<Preferences> ancestors=new ArrayList<>();  for (Preferences kid=p, dad=kid.parent(); dad != null; kid=dad, dad=kid.parent()) {    ancestors.add(kid);  }  Element e=xmlRoot;  for (int i=ancestors.size() - 1; i >= 0; i--) {    e.appendChild(doc.createElement("map"));    e=(Element)e.appendChild(doc.createElement("node"));    e.setAttribute("name",ancestors.get(i).name());  }  putPreferencesInXml(e,doc,p,subTree);  writeDoc(doc,os);}  }
class C{  private static boolean versionCheck(){  boolean verified=true;  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP) {    verified=false;  }  return verified;}  }
class C{  private int deriveInstanceId(String name,int id){  if (id == 0) {    return 0;  } else {    final int prime=31;    int result=1;    result=(prime * result) + name.hashCode();    result=(prime * result) + id;    return result;  }}  }
class C{  public static boolean contentEqualsIgnoreEOL(Reader input1,Reader input2) throws IOException {  BufferedReader br1=toBufferedReader(input1);  BufferedReader br2=toBufferedReader(input2);  String line1=br1.readLine();  String line2=br2.readLine();  while (line1 != null && line2 != null && line1.equals(line2)) {    line1=br1.readLine();    line2=br2.readLine();  }  return line1 == null ? line2 == null ? true : false : line1.equals(line2);}  }
class C{  public void mouseEntered(MouseEvent e){  JMenu menu=(JMenu)menuItem;  if (!menu.isEnabled() && !UIManager.getBoolean("MenuItem.disabledAreNavigable")) {    return;  }  MenuSelectionManager manager=MenuSelectionManager.defaultManager();  MenuElement selectedPath[]=manager.getSelectedPath();  if (!menu.isTopLevelMenu()) {    if (!(selectedPath.length > 0 && selectedPath[selectedPath.length - 1] == menu.getPopupMenu())) {      if (menu.getDelay() == 0) {        appendPath(getPath(),menu.getPopupMenu());      } else {        manager.setSelectedPath(getPath());        setupPostTimer(menu);      }    }  } else {    if (selectedPath.length > 0 && selectedPath[0] == menu.getParent()) {      MenuElement newPath[]=new MenuElement[3];      newPath[0]=(MenuElement)menu.getParent();      newPath[1]=menu;      if (BasicPopupMenuUI.getLastPopup() != null) {        newPath[2]=menu.getPopupMenu();      }      manager.setSelectedPath(newPath);    }  }}  }
class C{  public String sendWapSlPushMsg(String url,String dest) throws SmsException, IOException {  WapSLPush slPush=new WapSLPush(url);  SmsWapPushMessage wapPushMessage=new SmsWapPushMessage(slPush);  return sendSms(wapPushMessage,dest,null);}  }
class C{  public HighlightBuilder field(String name,int fragmentSize,int numberOfFragments){  if (fields == null) {    fields=new ArrayList<>();  }  fields.add(new Field(name).fragmentSize(fragmentSize).numOfFragments(numberOfFragments));  return this;}  }
class C{  @Override public void start(){  super.start();  if (!m_startBaseStepsFinished) {    m_startBaseStepsFinished=true;    triggerWhenTriggerAttachments(TriggerAttachment.BEFORE);  }}  }
class C{  private OperandExpression clone(final INaviOperandTreeNode currentNode,final OperandExpression parentExpression){  final OperandExpression childExpression=new OperandExpression(currentNode);  if (parentExpression != null) {    OperandExpression.link(parentExpression,childExpression);  }  for (  final INaviOperandTreeNode child : currentNode.getChildren()) {    clone(child,childExpression);  }  return childExpression;}  }
class C{  @Nullable public static ASTNode findFirstDescendantElement(@NotNull ASTNode node,@NotNull IElementType type,@Nullable String content){  if (isOfElementType(node,type)) {    if (content != null && node.getText().equals(content)) {      return node;    } else     if (content != null) {      return null;    }    return node;  }  ASTNode[] children=node.getChildren(null);  ASTNode astNode;  for (  ASTNode child : children) {    astNode=findFirstDescendantElement(child,type,content);    if (astNode != null) {      return astNode;    }  }  return null;}  }
class C{  public static @Nullable String toString(@Nullable LocalDate date){  return date == null ? null : date.toString();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:28.429 -0500",hash_original_method="FD1210B9D1DAC87CC2975B1EB57E42AE",hash_generated_method="35D84B3A7B789FBCDB9B49955EBD6A56") public boolean isLeapYear(int year){  if (year > changeYear) {    return year % 4 == 0 && (year % 100 != 0 || year % 400 == 0);  }  return year % 4 == 0;}  }
class C{  public char readChar(){  scanner.useDelimiter(EMPTY_PATTERN);  String ch=scanner.next();  assert ch.length() == 1 : "Internal (Std)In.readChar() error!" + " Please contact the authors.";  scanner.useDelimiter(WHITESPACE_PATTERN);  return ch.charAt(0);}  }
class C{  public void installKeyboardActions(JComponent c){  super.installKeyboardActions(c);  updateMnemonicBindingX((AbstractButton)c);}  }
class C{  public static void write(CharSequence from,File to,Charset charset) throws IOException {  asCharSink(to,charset).write(from);}  }
class C{  public static BigInteger sizeOfDirectoryAsBigInteger(File directory){  checkDirectory(directory);  final File[] files=directory.listFiles();  if (files == null) {    return BigInteger.ZERO;  }  BigInteger size=BigInteger.ZERO;  for (  final File file : files) {    try {      if (!isSymlink(file)) {        size=size.add(BigInteger.valueOf(sizeOf(file)));      }    } catch (    IOException ioe) {    }  }  return size;}  }
class C{  public SubjectKeyIdentifier(byte[] keyIdentifier){  this.keyIdentifier=keyIdentifier;}  }
class C{  public org.smpte_ra.schemas.st2067_2_2013.ContentKindType buildContentKindType(@Nonnull String value,String scope){  org.smpte_ra.schemas.st2067_2_2013.ContentKindType contentKindType=new org.smpte_ra.schemas.st2067_2_2013.ContentKindType();  if (!scope.matches("^[a-zA-Z0-9._-]+") == true) {    this.imfErrorLogger.addError(new ErrorLogger.ErrorObject(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_CPL_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.NON_FATAL,String.format("The ContentKind scope %s does not follow the syntax of a valid URI (a-z, A-Z, 0-9, ., _, -)",scope)));    contentKindType.setScope(scope);  } else {    contentKindType.setScope(scope);  }  contentKindType.setValue(value);  return contentKindType;}  }
class C{  private void createRasterProgram() throws IOException {  int program=glCreateProgram();  int vshader=DemoUtils.createShader("org/lwjgl/demo/opengl/raytracing/rasterPhotonMap.vs",GL_VERTEX_SHADER);  int fshader=DemoUtils.createShader("org/lwjgl/demo/opengl/raytracing/rasterPhotonMapBindless.fs",GL_FRAGMENT_SHADER);  glAttachShader(program,vshader);  glAttachShader(program,fshader);  glBindAttribLocation(program,0,"vertexPosition");  glBindAttribLocation(program,1,"vertexNormal");  glBindAttribLocation(program,2,"boxCenter");  glBindAttribLocation(program,3,"boxHalfSize");  glBindFragDataLocation(program,0,"color");  glLinkProgram(program);  int linked=glGetProgrami(program,GL_LINK_STATUS);  String programLog=glGetProgramInfoLog(program);  if (programLog.trim().length() > 0) {    System.err.println(programLog);  }  if (linked == 0) {    throw new AssertionError("Could not link program");  }  this.rasterProgram=program;}  }
class C{  public String zipCode(){  return zipCode;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:49.457 -0400",hash_original_method="5F6E92126740527619B1D96BADC72C6E",hash_generated_method="6035646119323832DDE95EC9CE8ED9E5") private int handleL(String value,DoubleMetaphoneResult result,int index){  result.append('L');  if (charAt(value,index + 1) == 'L') {    if (conditionL0(value,index)) {      result.appendAlternate(' ');    }    index+=2;  } else {    index++;  }  return index;}  }
class C{  public boolean isFirstCharCapitalized(){  return mIsFirstCharCapitalized;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodereplacechildnodename.class,args);}  }
class C{  @Override public void restoreState(){  updateSiteRateModels();  partialBufferHelper.restoreState();  for (  EvolutionaryProcessDelegate evolutionaryProcessDelegate : evolutionaryProcessDelegates) {    evolutionaryProcessDelegate.restoreState();  }  if (useScaleFactors || useAutoScaling) {    scaleBufferHelper.restoreState();    int[] tmp=storedScaleBufferIndices;    storedScaleBufferIndices=scaleBufferIndices;    scaleBufferIndices=tmp;  }}  }
class C{  public OMGraphicList copy(OMGraphicList omgl){  return (OMGraphicList)omgl.clone();}  }
class C{  public static void dumpCounts(){  dumpCounts(BaselineCompiler.options.PROFILE_EDGE_COUNTER_FILE);}  }
class C{  public int optInt(String key){  return this.optInt(key,0);}  }
class C{  protected void installListeners(){  super.installListeners();  table.addPropertyChangeListener(this);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodereplacechildnewchildexists.class,args);}  }
class C{  public String toString(){  return toList().toString();}  }
class C{  boolean isAlpha(char ch){  return ((ch >= 'A' && ch <= 'Z') || (ch >= 'a' && ch <= 'z'));}  }
class C{  private static boolean unwanted(Symbol s){  return s == null || (s.flags() & SYNTHETIC) != 0;}  }
class C{  public T put(long key,T value){  if (size >= maxSize) {    assert size == maxSize;    grow();  }  assert size < maxSize;  return set(key,value);}  }
class C{  private boolean volumeHasSnapshot(Volume source){  int snapshotCount=0;  if (source != null) {    URIQueryResultList snapshotURIs=new URIQueryResultList();    _dbClient.queryByConstraint(ContainmentConstraint.Factory.getVolumeSnapshotConstraint(source.getId()),snapshotURIs);    List<BlockSnapshot> snapshots=_dbClient.queryObject(BlockSnapshot.class,snapshotURIs);    for (    BlockSnapshot snapshot : snapshots) {      if (snapshot != null && !snapshot.getInactive() && !isNullOrEmpty(snapshot.getNativeId())) {        snapshotCount++;      }    }  }  return (snapshotCount > 0) ? true : false;}  }
class C{  public static boolean containsHTML(String text){  if (text == null) {    String msg=Logging.getMessage("nullValue.StringIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  Matcher matcher=SGMLPattern.matcher(text);  return matcher.find();}  }
class C{  private void addNodeSplitPoints(Tree root,Map<String,List<Double>> attributePointMap){  if (!root.isLeaf()) {    SplitCondition condition=root.childIterator().next().getCondition();    if (condition instanceof GreaterSplitCondition) {      addSplit(condition.getAttributeName(),((GreaterSplitCondition)condition).getValue(),attributePointMap);    } else     if (condition instanceof LessEqualsSplitCondition) {      addSplit(condition.getAttributeName(),((LessEqualsSplitCondition)condition).getValue(),attributePointMap);    }  }  Iterator<Edge> iterator=root.childIterator();  while (iterator.hasNext()) {    addNodeSplitPoints(iterator.next().getChild(),attributePointMap);  }}  }
class C{  public Configuration allowMultipleRootScopes(){  this.multipleRootScopeCheckConfiguration=new MultipleRootScopeCheckOffConfiguration();  return this;}  }
class C{  protected void checkForListType(OneRowChange orc,String type) throws SQLException, ReplicatorException {  String tableName=orc.getTableName();  if (schemas != null && (!schemas.contains(orc.getSchemaName().toUpperCase()) && !tables.contains((orc.getSchemaName() + "." + tableName).toUpperCase()))) {    if (logger.isDebugEnabled())     logger.debug("Table " + orc.getSchemaName() + "."+ tableName+ " not taken into account");    return;  }  if (!metadataCache.containsKey(orc.getSchemaName())) {    metadataCache.put(orc.getSchemaName(),new Hashtable<String,TableWithEnums>());  }  Hashtable<String,TableWithEnums> dbCache=metadataCache.get(orc.getSchemaName());  if (!dbCache.containsKey(tableName) || orc.getTableId() == -1 || dbCache.get(tableName).getTable() == null || dbCache.get(tableName).getTable().getTableId() != orc.getTableId()) {    if (dbCache.remove(tableName) != null && logger.isDebugEnabled())     logger.debug("Detected a schema change for table " + orc.getSchemaName() + "."+ tableName+ " - Removing table metadata from cache");    Table newTable=conn.findTable(orc.getSchemaName(),orc.getTableName(),false);    if (newTable == null) {      if (logger.isDebugEnabled()) {        logger.debug("Ignored a missing table: name=" + orc.getSchemaName() + "."+ tableName);      }      return;    }    newTable.setTableId(orc.getTableId());    dbCache.put(tableName,new TableWithEnums(newTable));  }  TableWithEnums table=dbCache.get(tableName);  HashMap<Integer,String[]> enumDefinitions=table.getEnumDefinitions();  if (enumDefinitions != null) {    if (logger.isDebugEnabled())     logger.debug("Using cache (columns: " + enumDefinitions.size() + ") @ "+ table.getTable().getSchema()+ "."+ table.getTable().getName());  } else {    enumDefinitions=new HashMap<Integer,String[]>();    for (    Column col : table.getTable().getAllColumns()) {      if (col.getTypeDescription() != null) {        if (col.getTypeDescription().startsWith(type)) {          if (logger.isDebugEnabled())           logger.debug(type + " @ " + col.getPosition()+ " : "+ table.getTable().getSchema()+ "."+ table.getTable().getName()+ "."+ col.getName());          String[] enumDefinition=retrieveEnumeration(table.getTable().getSchema() + "." + table.getTable().getName(),col.getName());          if (enumDefinition == null) {            logger.error("Failed to retrieve enumeration definition for " + table.getTable().getSchema() + "."+ table.getTable().getName()+ "."+ col.getName());            return;          } else           enumDefinitions.put(col.getPosition(),enumDefinition);        }      } else       logger.error("Column type description is null for " + table.getTable().getName() + "."+ col.getName());    }    if (logger.isDebugEnabled())     logger.debug("Saving " + type + " definitions (columns: "+ enumDefinitions.size()+ ") to cache @ "+ table.getTable().getSchema()+ "."+ table.getTable().getName());    table.setEnumDefinitions(enumDefinitions);  }  if (enumDefinitions.size() == 0) {    if (logger.isDebugEnabled())     logger.debug("No " + type + " columns @ "+ table.getTable().getSchema()+ "."+ table.getTable().getName());    return;  }  ArrayList<ColumnSpec> columns=orc.getColumnSpec();  ArrayList<ArrayList<ColumnVal>> columnValues=orc.getColumnValues();  transformColumns(columns,columnValues,enumDefinitions,"COL");  ArrayList<ColumnSpec> keys=orc.getKeySpec();  ArrayList<ArrayList<ColumnVal>> keyValues=orc.getKeyValues();  transformColumns(keys,keyValues,enumDefinitions,"KEY");}  }
class C{  public boolean implies(Permission p){  if ((p == null) || (p.getClass() != getClass()))   return false;  BasicPermission that=(BasicPermission)p;  if (this.wildcard) {    if (that.wildcard) {      return that.path.startsWith(path);    } else {      return (that.path.length() > this.path.length()) && that.path.startsWith(this.path);    }  } else {    if (that.wildcard) {      return false;    } else {      return this.path.equals(that.path);    }  }}  }
class C{  public Rational(long numerator,long denominator){  long gcd=gcd(numerator,denominator);  r[0]=((denominator > 0) ? 1 : -1) * numerator / gcd;  r[1]=Math.abs(denominator) / gcd;}  }
class C{  public Vertex applySENTENCE(List<Relationship> arguments,Map<Vertex,Vertex> variables,Network network){  Vertex result=null;  Vertex nil=network.createVertex(Primitive.NULL);  if (arguments.size() == 0) {    result=nil;  } else   if (arguments.size() == 1) {    result=arguments.get(0).getTarget().applyQuotient(variables,network);    if (!(result.getData() instanceof String)) {      StringWriter writer=new StringWriter();      Vertex text=Language.getWordFollowing(result,nil,nil,network);      writer.write(text.getDataValue());      result=network.createSentence(writer.toString());    } else {      result=network.createSentence((String)result.getData());    }  } else {    StringWriter writer=new StringWriter();    List<Vertex> words=new ArrayList<Vertex>();    for (    Relationship relationship : arguments) {      words.add(relationship.getTarget().applyQuotient(variables,network));    }    Vertex previousWord=nil;    for (int index=0; index < words.size(); index++) {      Vertex word=words.get(index);      Vertex nextWord=nil;      if (words.size() > (index + 1)) {        nextWord=words.get(index + 1);      }      word=Language.getWordFollowing(word,previousWord,nextWord,network);      writer.write(String.valueOf(word.getData()));      if ((index + 1) < words.size()) {        writer.write(" ");      }      previousWord=word;    }    result=network.createSentence(writer.toString());  }  return result;}  }
class C{  public static void fill(byte[] a,byte val){  for (int i=0, len=a.length; i < len; i++)   a[i]=val;}  }
class C{  public LinearGradient(){}  }
class C{  public Long deleteUserByExternalUserIdAndType(String SID,String externalUserId,String externalUserType) throws AxisFault {  try {    Long users_id=sessionManagement.checkSession(SID);    Long user_level=userManagement.getUserLevelByID(users_id);    if (authLevelManagement.checkAdminLevel(user_level)) {      Users userExternal=userManagement.getUserByExternalIdAndType(externalUserId,externalUserType);      Long userId=userExternal.getUser_id();      usersDao.deleteUserID(userId);      return userId;    } else {      return new Long(-26);    }  } catch (  Exception err) {    log.error("deleteUserById",err);    throw new AxisFault(err.getMessage());  }}  }
class C{  private void fillInsideDraw(Graphics g,int x,int y,int w,int h){  g.setColor(Color.BLACK);  g.drawRect(x,y,w,h);  g.setColor(Color.LIGHT_GRAY);  g.fillRect(x + 1,y + 1,w - 1,h - 1);}  }
class C{  public T caseExpressionList(ExpressionList object){  return null;}  }
class C{  public static byte[] decode(String s,int options) throws java.io.IOException {  if (s == null) {    throw new NullPointerException("Input string was null.");  }  byte[] bytes=s.getBytes(PREFERRED_ENCODING);  bytes=decode(bytes,0,bytes.length,options);  boolean dontGunzip=(options & DONT_GUNZIP) != 0;  if ((bytes != null) && (bytes.length >= 4) && (!dontGunzip)) {    int head=((int)bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);    if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {      java.io.ByteArrayInputStream bais=null;      java.util.zip.GZIPInputStream gzis=null;      java.io.ByteArrayOutputStream baos=null;      byte[] buffer=new byte[2048];      int length=0;      try {        baos=new java.io.ByteArrayOutputStream();        bais=new java.io.ByteArrayInputStream(bytes);        gzis=new java.util.zip.GZIPInputStream(bais);        while ((length=gzis.read(buffer)) >= 0) {          baos.write(buffer,0,length);        }        bytes=baos.toByteArray();      } catch (      java.io.IOException e) {      } finally {        try {          baos.close();        } catch (        Exception e) {        }        try {          gzis.close();        } catch (        Exception e) {        }        try {          bais.close();        } catch (        Exception e) {        }      }    }  }  return bytes;}  }
class C{  @Override public final void openPdfFile(final String filename,final String password) throws PdfException {  if (fileAccess.isOpen) {    closePdfFile();  }  preOpen();  fileAccess.openPdfFile(filename,password);  postOpen();}  }
class C{  private final void sendFullNotification(){  if (localLOGV)   Slog.i(TAG,"Sending memory full notification");  mContext.sendStickyBroadcastAsUser(mStorageFullIntent,UserHandle.ALL);}  }
class C{  public RemoteManagementServiceImpl(final ManagementService managementService,final FederationFacade federationFacade){  this.managementService=managementService;  this.federationFacade=federationFacade;}  }
class C{  public static List<URI> uris(String... values){  if (values != null) {    return uris(Arrays.asList(values));  } else {    return new ArrayList<URI>();  }}  }
class C{  public static void wtf(String tag,String msg){  wtf(tag,msg,null);}  }
class C{  @Override public void mouseReleased(MouseEvent e){  try {    recorder.stopRecording();  } catch (  Exception f) {    f.printStackTrace();  }}  }
class C{  private void checkSolrSynonyms(TokenFilterFactory factory) throws Exception {  Reader reader=new StringReader("GB");  TokenStream stream=whitespaceMockTokenizer(reader);  stream=factory.create(stream);  assertTrue(stream instanceof SynonymFilter);  assertTokenStreamContents(stream,new String[]{"GB","gib","gigabyte","gigabytes"},new int[]{1,0,0,0});}  }
class C{  public boolean sendEMailAttachments(int AD_User_ID,String subject,String message,Collection<File> attachments,boolean html){  MUser to=MUser.get(getCtx(),AD_User_ID);  String toEMail=to.getEMail();  if (toEMail == null || toEMail.length() == 0) {    log.warning("No EMail for recipient: " + to);    return false;  }  EMail email=createEMail(null,to,subject,message,html);  if (email == null)   return false;  email.addAttachments(attachments);  try {    return sendEmailNow(null,to,email);  } catch (  Exception ex) {    log.severe(getName() + " - " + ex.getLocalizedMessage());    return false;  }}  }
class C{  String constructComponentName(){synchronized (Panel.class) {    return base + nameCounter++;  }}  }
class C{  @Override public Chunk next(){  Chunk ret=null;  while (offset.getInt(pos * 4) == 0) {    pos++;  }  try {    ret=getChunk(pos);  } catch (  Exception e) {    Log.error("Error getting chunk " + pos,e,false);  }  pos++;  return ret;}  }
class C{  public static Motion createCubicBezierMotion(int sourceValue,int destinationValue,int duration,float p0,float p1,float p2,float p3){  Motion m=new Motion(sourceValue,destinationValue,duration);  m.motionType=CUBIC;  m.p0=p0;  m.p1=p1;  m.p2=p2;  m.p3=p3;  return m;}  }
class C{  public static long toLong(String num,long defaultValue){  if (num != null) {    try {      return Long.parseLong(num);    } catch (    NumberFormatException e) {      logger.trace("",e);    }  }  return defaultValue;}  }
class C{  private boolean isSyncNeeded(Map<String,String> props){  if (props == null) {    return false;  }  String localIP=IpUtils.getLocalIPAddress();  Map<String,String> localIpsecProp=LocalRepository.getInstance().getIpsecProperties(localIP);  String localKey=localIpsecProp.get(IPSEC_KEY);  String localStatus=localIpsecProp.get(IPSEC_STATUS);  log.info("local ipsec properties: ipsecKey=" + maskIpsecKey(localKey) + ", ipsecStatus="+ localStatus+ ", vdcConfigVersion="+ localIpsecProp.get(VDC_CONFIG_VERSION));  boolean bKeyEqual=false;  boolean bStatusEqual=false;  if (StringUtils.isEmpty(props.get(IPSEC_KEY))) {    log.info("remote nodes' latest ipsec_key is empty, skip sync");    return false;  }  if (localKey == null && props.get(IPSEC_KEY) == null) {    bKeyEqual=true;  } else   if (localKey != null && localKey.equals(props.get(IPSEC_KEY))) {    bKeyEqual=true;  }  log.info("IPsec key equals or not: " + bKeyEqual);  if (localStatus == null && props.get(IPSEC_STATUS) == null) {    bStatusEqual=true;  } else   if (localStatus != null && localStatus.equals(props.get(IPSEC_STATUS))) {    bStatusEqual=true;  }  log.info("IPsec status equals or not: " + bStatusEqual);  if (bKeyEqual && bStatusEqual) {    return false;  }  int result=compareVdcConfigVersion(localIpsecProp.get(VDC_CONFIG_VERSION),props.get(VDC_CONFIG_VERSION));  if (result > 0) {    return false;  } else   if (result == 0 && localIP.compareTo(props.get(NODE_IP)) < 0) {    return false;  } else {    return true;  }}  }
class C{  public void performAnalysis(ControlFlowGraph cfg){  assert isRunning == false;  isRunning=true;  init(cfg);  while (!worklist.isEmpty()) {    Block b=worklist.poll();switch (b.getType()) {case REGULAR_BLOCK:{        RegularBlock rb=(RegularBlock)b;        TransferInput<A,S> inputBefore=getInputBefore(rb);        currentInput=inputBefore.copy();        TransferResult<A,S> transferResult=null;        Node lastNode=null;        boolean addToWorklistAgain=false;        for (        Node n : rb.getContents()) {          transferResult=callTransferFunction(n,currentInput);          addToWorklistAgain|=updateNodeValues(n,transferResult);          currentInput=new TransferInput<>(n,this,transferResult);          lastNode=n;        }        Block succ=rb.getSuccessor();        assert succ != null : "regular basic block without non-exceptional successor unexpected";        propagateStoresTo(succ,lastNode,currentInput,rb.getFlowRule(),addToWorklistAgain);        break;      }case EXCEPTION_BLOCK:{      ExceptionBlock eb=(ExceptionBlock)b;      TransferInput<A,S> inputBefore=getInputBefore(eb);      currentInput=inputBefore.copy();      Node node=eb.getNode();      TransferResult<A,S> transferResult=callTransferFunction(node,currentInput);      boolean addToWorklistAgain=updateNodeValues(node,transferResult);      Block succ=eb.getSuccessor();      if (succ != null) {        currentInput=new TransferInput<>(node,this,transferResult);        propagateStoresTo(succ,node,currentInput,eb.getFlowRule(),addToWorklistAgain);      }      for (      Entry<TypeMirror,Set<Block>> e : eb.getExceptionalSuccessors().entrySet()) {        TypeMirror cause=e.getKey();        S exceptionalStore=transferResult.getExceptionalStore(cause);        if (exceptionalStore != null) {          for (          Block exceptionSucc : e.getValue()) {            addStoreBefore(exceptionSucc,node,exceptionalStore,Store.Kind.BOTH,addToWorklistAgain);          }        } else {          for (          Block exceptionSucc : e.getValue()) {            addStoreBefore(exceptionSucc,node,inputBefore.copy().getRegularStore(),Store.Kind.BOTH,addToWorklistAgain);          }        }      }      break;    }case CONDITIONAL_BLOCK:{    ConditionalBlock cb=(ConditionalBlock)b;    TransferInput<A,S> inputBefore=getInputBefore(cb);    TransferInput<A,S> input=inputBefore.copy();    Block thenSucc=cb.getThenSuccessor();    Block elseSucc=cb.getElseSuccessor();    propagateStoresTo(thenSucc,null,input,cb.getThenFlowRule(),false);    propagateStoresTo(elseSucc,null,input,cb.getElseFlowRule(),false);    break;  }case SPECIAL_BLOCK:{  SpecialBlock sb=(SpecialBlock)b;  Block succ=sb.getSuccessor();  if (succ != null) {    propagateStoresTo(succ,null,getInputBefore(b),sb.getFlowRule(),false);  }  break;}default :assert false;break;}}assert isRunning == true;isRunning=false;}  }
class C{  private static void removeDelegatedOwner(String delegatedOwner,String siteUrl,SiteVerification siteVerification,SiteVerificationWebResourceResource verifiedSite) throws IOException {  verifiedSite.getOwners().remove(delegatedOwner);  SiteVerification.WebResource.Update updateRequest=siteVerification.webResource().update(siteUrl,verifiedSite);  updateRequest.execute();}  }
class C{  protected SVGOMElement(String prefix,AbstractDocument owner){  super(prefix,owner);}  }
class C{  public static InputStream unGzip(InputStream in) throws IOException {  return new GzipOrRawInputStream(in);}  }
class C{  public static List asList(final Object primitiveArray){  Check.notNull(primitiveArray,"primitiveArray");  if (!primitiveArray.getClass().isArray() || !primitiveArray.getClass().getComponentType().isPrimitive()) {    throw new IllegalArgumentException("the input argument is not a primitive array");  }  final int size=Array.getLength(primitiveArray);  final List list=new ArrayList(size);  for (int i=0; i < size; i++) {    final Object obj=Array.get(primitiveArray,i);    list.add(obj);  }  return list;}  }
class C{  public LocaleITCase(String name){  super(name);}  }
class C{  private ComplianceFeature checkPasswordPolicy(){  if (devicePolicyManager.isActivePasswordSufficient()) {    policy.setCompliance(true);  } else {    policy.setCompliance(false);  }  return policy;}  }
class C{  public void writeFloat(float v){  try {    dos.writeFloat(v);  } catch (  Exception e) {    handleException(e);  }}  }
class C{  public boolean isAutoscaled(){  return autoscaled;}  }
class C{  public PublishResponse Publish(PublishRequest req) throws ServiceFaultException, ServiceResultException {  return (PublishResponse)channel.serviceRequest(req);}  }
class C{  public boolean isCalculationTypeRange(){  return CALCULATIONTYPE_AddRangeOp1ToOp2.equals(getCalculationType());}  }
class C{  protected void assertNotEqual(String message,int expected,int actual){  assertTrue(message,actual != expected);}  }
class C{  public static String persistedGeolocContentToNetworkGeolocContent(String content,String msgId,long timestamp){  Geoloc geoloc=new Geoloc(content);  return ChatUtils.buildGeolocDocument(geoloc,ImsModule.getImsUserProfile().getPublicUri(),msgId,timestamp);}  }
class C{  public static void e(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_ERROR) {    return;  }  Log.e(tag,msg,throwable);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList addressList;  Node testNode;  NamedNodeMap attributes;  Attr streetAttr;  String strong1;  String strong2;  doc=(Document)load("hc_staff",false);  addressList=doc.getElementsByTagName("acronym");  testNode=addressList.item(1);  attributes=testNode.getAttributes();  streetAttr=(Attr)attributes.getNamedItem("class");  strong1=streetAttr.getNodeName();  strong2=streetAttr.getName();  assertEqualsAutoCase("attribute","nodeName","class",strong1);  assertEqualsAutoCase("attribute","name","class",strong2);}  }
class C{  @RequestMapping(value="/tags",method=RequestMethod.POST,consumes={"application/xml","application/json"}) @Secured(SecurityFunctions.FN_TAGS_POST) public Tag createTag(@RequestBody TagCreateRequest tagCreateRequest){  return tagService.createTag(tagCreateRequest);}  }
class C{  public final void advance(final float alpha){  assert (alpha0 < 1.0f);  float beta=(alpha - alpha0) / (1.0f - alpha0);  c0.x+=beta * (c.x - c0.x);  c0.y+=beta * (c.y - c0.y);  a0+=beta * (a - a0);  alpha0=alpha;}  }
class C{  private boolean canConsistencyGroupBeModified(BlockConsistencyGroup consistencyGroup,List<Volume> cgVolumes){  Iterator<Volume> cgVolumesIter=cgVolumes.iterator();  while (cgVolumesIter.hasNext()) {    Volume cgVolume=cgVolumesIter.next();    if ((BlockFullCopyUtils.isVolumeFullCopy(cgVolume,_dbClient)) && (!BlockFullCopyUtils.isFullCopyDetached(cgVolume,_dbClient))) {      return false;    }    if ((BlockFullCopyUtils.isVolumeCGFullCopySource(cgVolume,_dbClient)) && (!BlockFullCopyUtils.volumeDetachedFromFullCopies(cgVolume,_dbClient))) {      return false;    }  }  return true;}  }
class C{  public char asChar(){  if (length != 1)   throw new FIXValueFormatException("Not a character");  return (char)bytes[offset];}  }
class C{  public String typeName(){  return "interfacemethodref";}  }
class C{  public MessageManager(){  settingsManager=SettingsManager.getMessages();  loadMessages();}  }
class C{  public void informational(Stage stage,String message,String details){  messageLabel.setText(message);  detailsLabel.setText(details);  cancelButton.setVisible(false);  actionButton.setVisible(false);  okButton.setOnAction(null);}  }
class C{  public Object encode(Object pObject) throws EncoderException {  if (!(pObject instanceof String)) {    throw new EncoderException("Parameter supplied to Soundex encode is not of type java.lang.String");  }  return soundex((String)pObject);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public ZyGraphMouseSettings(final ZyGraphMouseSettings settings){  m_type=null;  m_mouseWheelAction=settings.getMouseWheelAction();  m_scrollSensitivity=settings.getScrollSensitivity();  m_zoomSensitivity=settings.getZoomSensitivity();}  }
class C{  boolean endsWithCheckLength(char s[],int len,char suffix[]){  if (len < suffix.length + 2) {    return false;  } else {    for (int i=0; i < suffix.length; i++)     if (s[len - suffix.length + i] != suffix[i])     return false;    return true;  }}  }
class C{  public String seedTipText(){  return "The random number seed to be used.";}  }
class C{  @RequestMapping(value=BUSINESS_OBJECT_DATA_ATTRIBUTES_URI_PREFIX,method=RequestMethod.POST,consumes={"application/xml","application/json"}) @Secured(SecurityFunctions.FN_BUSINESS_OBJECT_DATA_ATTRIBUTES_POST) public BusinessObjectDataAttribute createBusinessObjectDataAttribute(@RequestBody BusinessObjectDataAttributeCreateRequest request){  return businessObjectDataAttributeService.createBusinessObjectDataAttribute(request);}  }
class C{  protected BigdataSail reopenSail(BigdataSail sail){  return getOurDelegate().reopenSail(sail);}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  NamedNodeMap entities;  Node entityNode;  String entityValue;  doc=(Document)load("staff",true);  docType=doc.getDoctype();  assertNotNull("docTypeNotNull",docType);  entities=docType.getEntities();  assertNotNull("entitiesNotNull",entities);  entityNode=entities.getNamedItem("ent1");  assertNotNull("ent1NotNull",entityNode);  entityNode.setNodeValue("This should have no effect");  entityValue=entityNode.getNodeValue();  assertNull("nodeValueNull",entityValue);}  }
class C{  private byte[] readBinary(int length) throws TException {  if (length == 0)   return new byte[0];  byte[] buf=new byte[length];  trans_.readAll(buf,0,length);  return buf;}  }
class C{  public boolean equals(Index that){  return (this.unsigned == that.unsigned);}  }
class C{  private void init(){  InputStream in=null;  props=new Properties();  try {    URI uri=getClass().getClassLoader().getResource(PROPERTY_FILE_NAME).toURI();    File file=new File(uri);    in=new FileInputStream(file);    props.load(in);  } catch (  IOException e) {    e.printStackTrace();  }catch (  URISyntaxException e) {    e.printStackTrace();  } finally {    CarbonUtil.closeStreams(in);  }}  }
class C{  private void findDeepest(Node root,Node res,int level,int max){  if (root == null)   return;  if (level > max) {    res=root;    max=level;    return;  }  findDeepest(root.left,res,level + 1,max);  findDeepest(root.right,res,level + 1,max);}  }
class C{  public boolean isNative(){  return isNative;}  }
class C{  void cleanup(){}  }
class C{  private void ensureTupleArray(int row){  int nrows=Math.max(m_table.getRowCount(),row + 1);  if (m_tuples == null) {    m_tuples=new TableTuple[nrows];  } else   if (m_tuples.length < nrows) {    int capacity=Math.max((3 * m_tuples.length) / 2 + 1,nrows);    TableTuple[] tuples=new TableTuple[capacity];    System.arraycopy(m_tuples,0,tuples,0,m_tuples.length);    m_tuples=tuples;  }}  }
class C{  public S_Solve createS_Solve(){  S_SolveImpl s_Solve=new S_SolveImpl();  return s_Solve;}  }
class C{  private void interpretStm(final ReilInstruction instruction){  final Pair<Boolean,BigInteger> sourceValue=loadLongValue(instruction.getFirstOperand());  final Pair<Boolean,BigInteger> targetValue=loadLongValue(instruction.getThirdOperand());  if (sourceValue.first() && targetValue.first()) {    final int targetSize=instruction.getFirstOperand().getSize().getByteSize();    memory.store(targetValue.second().longValue(),sourceValue.second().longValue(),targetSize);  } else {    log("%s",sourceValue.toString());    log("%s",targetValue.toString());    assert false;  }}  }
class C{  @Override public boolean onKeyUp(int keyCode,KeyEvent event){  if (PROCESS_HARD_KEYS) {    if (mPredictionOn) {      mMetaState=MetaKeyKeyListener.handleKeyUp(mMetaState,keyCode,event);    }  }  return super.onKeyUp(keyCode,event);}  }
class C{  public TradeOrderfill findTradeOrderfillByExecId(String execId) throws PersistentModelException {  return m_tradeOrderfillHome.findOrderFillByExecId(execId);}  }
class C{  @Override public String toString(){  return " at character " + pos + " of "+ in;}  }
class C{  public void onAnimationStart(Animator animation){  if (mRule == Dependency.WITH) {    startIfReady(animation);  }}  }
class C{  public static byte[][] split(byte[] input,int index) throws ArrayIndexOutOfBoundsException {  if (index > input.length) {    throw new ArrayIndexOutOfBoundsException();  }  byte[][] result=new byte[2][];  result[0]=new byte[index];  result[1]=new byte[input.length - index];  System.arraycopy(input,0,result[0],0,index);  System.arraycopy(input,index,result[1],0,input.length - index);  return result;}  }
class C{  public void updateExpandableItem(int expandableItemPosition,ExpandableItem expandableItem){  validateExpandableItem(expandableItem);  expandableItems.remove(expandableItemPosition);  expandableItems.add(expandableItemPosition,expandableItem);  int buttonPosition=buttons.size() - 1 - expandableItemPosition;  configureButtonContent(buttons.get(buttonPosition),expandableItem);}  }
class C{  public static int nullSafeHashCode(Object[] array){  if (array == null) {    return 0;  }  int hash=INITIAL_HASH;  int arraySize=array.length;  for (int i=0; i < arraySize; i++) {    hash=MULTIPLIER * hash + nullSafeHashCode(array[i]);  }  return hash;}  }
class C{  public boolean optBoolean(int index,boolean defaultValue){  try {    return this.getBoolean(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void testIntersectEdgeCases(){  for (int i=0; i < 100; i++) {    Polygon polygon=nextPolygon();    Polygon2D impl=Polygon2D.create(polygon);    for (int j=0; j < 10; j++) {      Rectangle rectangle=GeoTestUtil.nextBoxNear(polygon);      if (impl.relate(rectangle.minLat,rectangle.maxLat,rectangle.minLon,rectangle.maxLon) == Relation.CELL_OUTSIDE_QUERY) {        for (int k=0; k < 100; k++) {          double point[]=GeoTestUtil.nextPointNear(rectangle);          double latitude=point[0];          double longitude=point[1];          if (latitude >= rectangle.minLat && latitude <= rectangle.maxLat && longitude >= rectangle.minLon && longitude <= rectangle.maxLon) {            assertFalse(impl.contains(latitude,longitude));          }        }        for (int k=0; k < 50; k++) {          double point[]=GeoTestUtil.nextPointNear(polygon);          double latitude=point[0];          double longitude=point[1];          if (latitude >= rectangle.minLat && latitude <= rectangle.maxLat && longitude >= rectangle.minLon && longitude <= rectangle.maxLon) {            assertFalse(impl.contains(latitude,longitude));          }        }      }    }  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:20.127 -0500",hash_original_method="E5CA8AFF181BF9AD7711CB91FDA3487A",hash_generated_method="77968793B4456561D3534C8518576750") public int saveLayer(float left,float top,float right,float bottom,Paint paint,int saveFlags){  return native_saveLayer(mNativeCanvas,left,top,right,bottom,paint != null ? paint.mNativePaint : 0,saveFlags);}  }
class C{  @Deprecated public Column(){  this(null,Types.NULL);}  }
class C{  protected void processStopRequest(boolean force){  if (mState != State.PREPARING || force) {    mState=State.STOPPED;    mFile=null;    mAccount=null;    releaseResources(true);    giveUpAudioFocus();    stopSelf();  }}  }
class C{  public BOMHelper(){}  }
class C{  private void generateTagHandlerInit(){  if (!isPoolingEnabled || tagHandlerPoolNames.isEmpty()) {    return;  }  if (ctxt.isTagFile()) {    out.printil("private void _jspInit(ServletConfig config) {");  } else {    out.printil("public void _jspInit() {");  }  out.pushIndent();  for (  String tagHandlerPoolName : tagHandlerPoolNames) {    out.printin(tagHandlerPoolName);    out.print(" = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(");    if (ctxt.isTagFile()) {      out.print("config");    } else {      out.print("getServletConfig()");    }    out.println(");");  }  out.popIndent();  out.printil("}");  out.println();}  }
class C{  public Map<String,String> parse(final char[] chars,char separator){  if (chars == null) {    return new HashMap<String,String>();  }  return parse(chars,0,chars.length,separator);}  }
class C{  public boolean reverseCorrectIt(){  log.info(toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_REVERSECORRECT);  if (m_processMsg != null)   return false;  boolean retValue=reverseIt();  if (retValue) {    m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_REVERSECORRECT);    if (m_processMsg != null)     return false;  }  return retValue;}  }
class C{  @SuppressWarnings("unchecked") private void ensureCapacity(final int capacity){  if (entries.length >= capacity)   return;  final ArrEntry<K,V>[] oldEntries=entries;  entries=new ArrEntry[capacity];  for (int i=size - 1; i >= 0; i--)   entries[i]=oldEntries[i];}  }
class C{  public TextFormat withFont(String name,Font.Style style,float size){  return withFont(new Font(name,style,size));}  }
class C{  protected void init(){}  }
class C{  @Override public boolean equals(Object otherInstant){  if (this == otherInstant) {    return true;  }  if (otherInstant instanceof Instant) {    Instant other=(Instant)otherInstant;    return this.seconds == other.seconds && this.nanos == other.nanos;  }  return false;}  }
class C{  public void addListener(final WorkspaceListener listener){  listeners.add(listener);}  }
class C{  @Override public String toString(){  return "cudaDeviceProp[" + createString(",") + "]";}  }
class C{  public static String stringFor(int n){switch (n) {case cudaGLDeviceListAll:    return "cudaGLDeviceListAll";case cudaGLDeviceListCurrentFrame:  return "cudaGLDeviceListCurrentFrame";case cudaGLDeviceListNextFrame:return "cudaGLDeviceListNextFrame";}return "INVALID cudaGLDeviceList: " + n;}  }
class C{  public E remove(){  return removeFirst();}  }
class C{  private static int gcd(int m,int n){  if (m % n == 0)   return n; else   return gcd(n,m % n);}  }
class C{  private void skipToEndOfLine() throws IOException {  while (pos < limit || fillBuffer(1)) {    char c=buffer[pos++];    if (c == '\n') {      lineNumber++;      lineStart=pos;      break;    } else     if (c == '\r') {      break;    }  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public Address plus(Offset offset){  return null;}  }
class C{  public boolean isClassPathEntry(final String fileName){  return fileName.endsWith(".sldat") || fileName.endsWith(".jar");}  }
class C{  private NotificationManager(Context context){  mTrackId=-1;  mMainThreadHandler=new Handler(context.getApplicationContext().getMainLooper());  mNotificationManager=((android.app.NotificationManager)context.getSystemService(Context.NOTIFICATION_SERVICE));  mArtworkBitmapSize=context.getResources().getDimensionPixelOffset(R.dimen.simple_sound_cloud_notification_icon);  initializePendingIntent(context);  initializeArtworkTarget();}  }
class C{  public DynamicMessage.Builder newMessageBuilder(String msgTypeName){  Descriptor msgType=getMessageDescriptor(msgTypeName);  if (msgType == null)   return null;  return DynamicMessage.newBuilder(msgType);}  }
class C{  public void provideErrorFeedback(Component component){  super.provideErrorFeedback(component);}  }
class C{  public void block(Subnet subnet){  if (subnet == null) {    throw new IllegalArgumentException("Subnet can not be null");  }  blacklist.add(subnet);}  }
class C{  public T caseDataTypeMappingModel(DataTypeMappingModel object){  return null;}  }
class C{  private static Map<NonTerminal,List<Production>> calcProductionsStartingWith(Grammar gr){  final HashMap<NonTerminal,List<Production>> productionsStartingWith=new HashMap<NonTerminal,List<Production>>();  for (  NonTerminal nonTerminal : gr.getNonTerminals()) {    final List<Production> list=new LinkedList<Production>();    for (    Production p : gr.getProductions()) {      if (p.getLHS() == nonTerminal)       list.add(p);    }    productionsStartingWith.put(nonTerminal,Collections.unmodifiableList(list));  }  return productionsStartingWith;}  }
class C{  public FakeJimpleLocal(String name,Type t,Local realLocal){  this(name,t,realLocal,null);}  }
class C{  public static Object findValueOfType(Collection collection,Class type){  if (isEmpty(collection)) {    return null;  }  Object value=null;  for (Iterator it=collection.iterator(); it.hasNext(); ) {    Object obj=it.next();    if (type == null || type.isInstance(obj)) {      if (value != null) {        return null;      }      value=obj;    }  }  return value;}  }
class C{  @Override protected String translate(final String name){  return "data/sprites/signs/" + name + ".png";}  }
class C{  public static boolean validImage(Image image){  return (image != null && image.getWidth(null) > 0 && image.getHeight(null) > 0);}  }
class C{  public Matrix4f translationRotateScale(float tx,float ty,float tz,float qx,float qy,float qz,float qw,float sx,float sy,float sz){  float dqx=qx + qx;  float dqy=qy + qy;  float dqz=qz + qz;  float q00=dqx * qx;  float q11=dqy * qy;  float q22=dqz * qz;  float q01=dqx * qy;  float q02=dqx * qz;  float q03=dqx * qw;  float q12=dqy * qz;  float q13=dqy * qw;  float q23=dqz * qw;  this._m00(sx - (q11 + q22) * sx);  this._m01((q01 + q23) * sx);  this._m02((q02 - q13) * sx);  this._m03(0.0f);  this._m10((q01 - q23) * sy);  this._m11(sy - (q22 + q00) * sy);  this._m12((q12 + q03) * sy);  this._m13(0.0f);  this._m20((q02 + q13) * sz);  this._m21((q12 - q03) * sz);  this._m22(sz - (q11 + q00) * sz);  this._m23(0.0f);  this._m30(tx);  this._m31(ty);  this._m32(tz);  this._m33(1.0f);  _properties(PROPERTY_AFFINE);  return this;}  }
class C{  public void postCheckpointStatistics(final EvolutionState state){  for (int x=0; x < children.length; x++)   children[x].postCheckpointStatistics(state);}  }
class C{  public static long[] random(int card,int capacity,Random random){  if (card < 0 || card > capacity) {    throw new IllegalArgumentException("Cannot set " + card + " out of "+ capacity+ " bits.");  }  if (card < capacity >>> 1) {    long[] bitset=BitsUtil.zero(capacity);    for (int todo=card; todo > 0; todo=(todo == 1) ? (card - cardinality(bitset)) : (todo - 1)) {      setI(bitset,random.nextInt(capacity));    }    return bitset;  } else {    long[] bitset=BitsUtil.ones(capacity);    for (int todo=capacity - card; todo > 0; todo=(todo == 1) ? (cardinality(bitset) - card) : (todo - 1)) {      clearI(bitset,random.nextInt(capacity));    }    return bitset;  }}  }
class C{  public Triggers(){  setLayout(new BoxLayout(this,BoxLayout.X_AXIS));  action=new SpherePanel("yellow-sphere.png");  focus=new SpherePanel("blue-sphere.png");  armed=new SpherePanel("red-sphere.png");  over=new SpherePanel("green-sphere.png");  timing=new SpherePanel("gray-sphere.png");  add(action);  add(focus);  add(armed);  add(over);  add(timing);  ActionTrigger.addTrigger(triggerButton,action.getAnimator());  FocusTrigger.addTrigger(triggerButton,focus.getAnimator(),FocusTriggerEvent.IN);  MouseTrigger.addTrigger(triggerButton,armed.getAnimator(),MouseTriggerEvent.PRESS);  MouseTrigger.addTrigger(triggerButton,over.getAnimator(),MouseTriggerEvent.ENTER);  TimingTrigger.addTrigger(action.getAnimator(),timing.getAnimator(),TimingTriggerEvent.STOP);}  }
class C{  public AssetFileDescriptor openRawResourceFd(int id) throws NotFoundException {  TypedValue value;synchronized (mAccessLock) {    value=mTmpValue;    if (value == null) {      value=new TypedValue();    } else {      mTmpValue=null;    }    getValue(id,value,true);  }  try {    return mAssets.openNonAssetFd(value.assetCookie,value.string.toString());  } catch (  Exception e) {    NotFoundException rnf=new NotFoundException("File " + value.string.toString() + " from drawable resource ID #0x"+ Integer.toHexString(id));    rnf.initCause(e);    throw rnf;  } finally {synchronized (mAccessLock) {      if (mTmpValue == null) {        mTmpValue=value;      }    }  }}  }
class C{  public boolean containsKey(String key){  if ((key == null) || (key.trim().equals(""))) {    return false;  }  return contents.containsKey(key);}  }
class C{  @Override public void process(KeyValPair<K,HighLow<V>> tuple){  HighLow<V> val=map.get(tuple.getKey());  if (val == null) {    val=new HighLow(tuple.getValue().getHigh(),tuple.getValue().getLow());  }  if (val.getHigh().doubleValue() < tuple.getValue().getHigh().doubleValue()) {    val.setHigh(tuple.getValue().getHigh());  }  if (val.getLow().doubleValue() > tuple.getValue().getLow().doubleValue()) {    val.setLow(tuple.getValue().getLow());  }}  }
class C{  void pushProcessor(XSLTElementProcessor processor){  m_processors.push(processor);}  }
class C{  private static synchronized void checkMBeanServerBuilder(){  try {    GetPropertyAction act=new GetPropertyAction(JMX_INITIAL_BUILDER);    String builderClassName=AccessController.doPrivileged(act);    try {      final Class<?> newBuilderClass;      if (builderClassName == null || builderClassName.length() == 0)       newBuilderClass=MBeanServerBuilder.class; else       newBuilderClass=loadBuilderClass(builderClassName);      if (builder != null) {        final Class<?> builderClass=builder.getClass();        if (newBuilderClass == builderClass)         return;      }      builder=newBuilder(newBuilderClass);    } catch (    ClassNotFoundException x) {      final String msg="Failed to load MBeanServerBuilder class " + builderClassName + ": "+ x;      throw new JMRuntimeException(msg,x);    }  } catch (  RuntimeException x) {    if (MBEANSERVER_LOGGER.isLoggable(Level.FINEST)) {      StringBuilder strb=new StringBuilder().append("Failed to instantiate MBeanServerBuilder: ").append(x).append("\n\t\tCheck the value of the ").append(JMX_INITIAL_BUILDER).append(" property.");      MBEANSERVER_LOGGER.logp(Level.FINEST,MBeanServerFactory.class.getName(),"checkMBeanServerBuilder",strb.toString());    }    throw x;  }}  }
class C{  @SuppressWarnings("unchecked") public static void register(String algorithmURI,String implementingClass) throws AlgorithmAlreadyRegisteredException, ClassNotFoundException, XMLSignatureException {  JavaUtils.checkRegisterPermission();  if (log.isLoggable(java.util.logging.Level.FINE)) {    log.log(java.util.logging.Level.FINE,"Try to register " + algorithmURI + " "+ implementingClass);  }  Class<? extends SignatureAlgorithmSpi> registeredClass=algorithmHash.get(algorithmURI);  if (registeredClass != null) {    Object exArgs[]={algorithmURI,registeredClass};    throw new AlgorithmAlreadyRegisteredException("algorithm.alreadyRegistered",exArgs);  }  try {    Class<? extends SignatureAlgorithmSpi> clazz=(Class<? extends SignatureAlgorithmSpi>)ClassLoaderUtils.loadClass(implementingClass,SignatureAlgorithm.class);    algorithmHash.put(algorithmURI,clazz);  } catch (  NullPointerException ex) {    Object exArgs[]={algorithmURI,ex.getMessage()};    throw new XMLSignatureException("algorithms.NoSuchAlgorithm",exArgs,ex);  }}  }
class C{  @Ignore("TODO: test is disabled") @Test public void testPopulate1kbwrites(){  final byte[] value=new byte[ENTRY_SIZE];  Arrays.fill(value,(byte)77);  for (int i=0; i < OP_COUNT; i++) {    region.put(new Integer(i),value);  }  closeDown();}  }
class C{  public boolean supportsSQL(){  return false;}  }
class C{  public void defineDictionary(String name,Map<String,Object> mapping){  dictionaries.put(name,mapping);}  }
class C{  public TableRowSorter(M model){  setModel(model);}  }
class C{  public NondominatedPopulation(DominanceComparator comparator){  super();  this.comparator=comparator;}  }
class C{  public WARCRecord read() throws IOException {  WARCRecord record=new WARCRecord(dataStream);  recordsRead++;  return record;}  }
class C{  public boolean minVersion(int major,int minor) throws SQLException {  DatabaseMetaData md=sharedConnection.getMetaData();  int dbMajor=md.getDatabaseMajorVersion();  int dbMinor=md.getDatabaseMinorVersion();  return (dbMajor > major || (dbMajor == major && dbMinor >= minor));}  }
class C{  public void println(Object v) throws IOException {  print(v);  println();}  }
class C{  public Logger(String filename){  m_filename=filename;}  }
class C{  protected void removeEventListeners(Document doc){  NodeEventTarget target=(NodeEventTarget)doc;  target.removeEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"click",mouseclickListener,true);  target.removeEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"mouseover",mouseoverListener,true);  target.removeEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"mouseout",mouseoutListener,true);  target.removeEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMFocusIn",domFocusInListener,true);  target.removeEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMFocusOut",domFocusOutListener,true);}  }
class C{  public void testDecodeAttributeBody() throws StunException {  byte[] attributeValue=binMessagesFixture.unknownAttsDecodeTestValue;  unknownAttributesAttribute.decodeAttributeBody(attributeValue,Attribute.HEADER_LENGTH,(char)(attributeValue.length - Attribute.HEADER_LENGTH));  assertTrue("The " + (int)MsgFixture.UNKNOWN_ATTRIBUTES_1ST_ATT + " attribute id "+ "was not found after decoding a binary array that contained it.",unknownAttributesAttribute.contains(MsgFixture.UNKNOWN_ATTRIBUTES_1ST_ATT));  assertTrue("The " + (int)MsgFixture.UNKNOWN_ATTRIBUTES_2ND_ATT + " attribute id "+ "was not found after decoding a binary array that contained it.",unknownAttributesAttribute.contains(MsgFixture.UNKNOWN_ATTRIBUTES_2ND_ATT));  assertTrue("The " + (int)MsgFixture.UNKNOWN_ATTRIBUTES_3D_ATT + " attribute id "+ "was not found after decoding a binary array that contained it.",unknownAttributesAttribute.contains(MsgFixture.UNKNOWN_ATTRIBUTES_3D_ATT));  assertEquals("The decoded attribute contained " + unknownAttributesAttribute.getAttributeCount() + " attribute ids when there were only "+ (int)MsgFixture.UNKNOWN_ATTRIBUTES_CNT_DEC_TST+ " in the original binary array.",MsgFixture.UNKNOWN_ATTRIBUTES_CNT_DEC_TST,unknownAttributesAttribute.getAttributeCount());}  }
class C{  public void derEncode(OutputStream out) throws IOException {  DerOutputStream seq=new DerOutputStream();  seq.putInteger(version);  DerOutputStream issuerAndSerialNumber=new DerOutputStream();  issuerName.encode(issuerAndSerialNumber);  issuerAndSerialNumber.putInteger(certificateSerialNumber);  seq.write(DerValue.tag_Sequence,issuerAndSerialNumber);  digestAlgorithmId.encode(seq);  if (authenticatedAttributes != null)   authenticatedAttributes.encode((byte)0xA0,seq);  digestEncryptionAlgorithmId.encode(seq);  seq.putOctetString(encryptedDigest);  if (unauthenticatedAttributes != null)   unauthenticatedAttributes.encode((byte)0xA1,seq);  DerOutputStream tmp=new DerOutputStream();  tmp.write(DerValue.tag_Sequence,seq);  out.write(tmp.toByteArray());}  }
class C{  public boolean saveConfiguration(final String path){  if (xmlConfig != null && !errors.hasFailed()) {    boolean success=true;    FileWriter writer=null;    try {      writer=new FileWriter(path);      writer.write(xmlConfig.toString());      writer.flush();    } catch (    IOException ioe) {      ioe.printStackTrace();      success=false;    } finally {      if (writer != null) {        try {          writer.close();        } catch (        IOException ioe) {          success=false;        }      }    }    return success;  }  return false;}  }
class C{  public static void pt(String txt){  p(txt,0,true);}  }
class C{  public static byte popParameterByte(){  return parametersByte.pop();}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMFEFuncAElement(prefix,(AbstractDocument)doc);}  }
class C{  static void exceptionTests(File blah) throws Exception {  try (FileChannel fc=FileChannel.open(blah.toPath(),READ)){    long size=fc.size();    checkException(fc,0L,NonWritableChannelException.class);    checkException(fc,-1L,NonWritableChannelException.class,IllegalArgumentException.class);    checkException(fc,size + 1L,NonWritableChannelException.class);    fc.close();    checkException(fc,0L,ClosedChannelException.class);    checkException(fc,-1L,ClosedChannelException.class,IllegalArgumentException.class);    checkException(fc,size + 1L,ClosedChannelException.class);  }   try (FileChannel fc=FileChannel.open(blah.toPath(),WRITE)){    long size=fc.size();    checkException(fc,-1L,IllegalArgumentException.class);    fc.close();    checkException(fc,0L,ClosedChannelException.class);    checkException(fc,-1L,ClosedChannelException.class,IllegalArgumentException.class);    checkException(fc,size + 1L,ClosedChannelException.class);  } }  }
class C{  public int count(){  return count;}  }
class C{  private ApplyPanel(EditablePanel mainPanel){  this.mainPanel=mainPanel;  masterLayout();}  }
class C{  public SessionNode(String boxType,String displayName,Class modelClass){  this(boxType,displayName,new Class[]{modelClass});}  }
class C{  private static boolean hasExpired(){  if (EXPIRATION_DATE == null) {    return false;  }  return DateHelpers.getCurrentDate().after(EXPIRATION_DATE.getTime());}  }
class C{  public UnaryValueOperator(ValueExpr arg){  setArg(arg);}  }
class C{  @Deprecated protected void skipped(org.junit.internal.AssumptionViolatedException e,Description description){}  }
class C{  public static double winsorizedMean(DoubleArrayList sortedData,double mean,int left,int right){  int N=sortedData.size();  if (N == 0)   throw new IllegalArgumentException("Empty data.");  if (left + right >= N)   throw new IllegalArgumentException("Not enough data.");  double[] sortedElements=sortedData.elements();  double leftElement=sortedElements[left];  for (int i=0; i < left; ++i)   mean+=(leftElement - sortedElements[i]) / N;  double rightElement=sortedElements[N - 1 - right];  for (int i=0; i < right; ++i)   mean+=(rightElement - sortedElements[N - 1 - i]) / N;  return mean;}  }
class C{  public void add(TemplatePersistenceData data){  if (!validateTemplate(data.getTemplate()))   return;  if (data.isUserAdded()) {    fTemplates.add(data);  } else {    for (Iterator it=fTemplates.iterator(); it.hasNext(); ) {      TemplatePersistenceData d2=(TemplatePersistenceData)it.next();      if (d2.getId() != null && d2.getId().equals(data.getId())) {        d2.setTemplate(data.getTemplate());        d2.setDeleted(data.isDeleted());        d2.setEnabled(data.isEnabled());        return;      }    }    if (data.getTemplate() != null) {      TemplatePersistenceData newData=new TemplatePersistenceData(data.getTemplate(),data.isEnabled());      fTemplates.add(newData);    }  }}  }
class C{  public NotificationChain basicSetRightOperand(Expression newRightOperand,NotificationChain msgs){  Expression oldRightOperand=rightOperand;  rightOperand=newRightOperand;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,ExpressionsPackage.LOGICAL_RELATION_EXPRESSION__RIGHT_OPERAND,oldRightOperand,newRightOperand);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  protected TraceStateEnteredImpl(){  super();}  }
class C{  @Override public List<byte[]> sort(final byte[] key){  checkIsInMultiOrPipeline();  client.sort(key);  return client.getBinaryMultiBulkReply();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private void handleRemoveFromOldNetworks(Map<String,Network> networkMap,Network network){  NetworkAssociationHelper.handleRemoveFromOldNetworks(networkMap,network,_dbClient,_coordinator);}  }
class C{  public void testVerifyBeaHomeWhenValidConfiguration() throws Exception {  this.container.setBeaHome(BEA_HOME);  this.fsManager.resolveFile(BEA_HOME + "/registry.xml").createFile();  this.container.setFileHandler(this.fileHandler);  this.container.verifyBeaHome();}  }
class C{  public static Sha256Hash wrap(String hexString){  return wrap(Utils.HEX.decode(hexString));}  }
class C{  public String sqlMetadata_functionNames(String vendorName,String catalogName,String schemaName){  return m_interfaces.get(getDBVendorID(vendorName)).sqlMetadata_functionNames(catalogName,schemaName);}  }
class C{  private int findWordLimit(int index,BreakIterator words,boolean direction,String s){  int last=(direction == NEXT) ? words.following(index) : words.preceding(index);  int current=(direction == NEXT) ? words.next() : words.previous();  while (current != BreakIterator.DONE) {    for (int p=Math.min(last,current); p < Math.max(last,current); p++) {      if (Character.isLetter(s.charAt(p))) {        return last;      }    }    last=current;    current=(direction == NEXT) ? words.next() : words.previous();  }  return BreakIterator.DONE;}  }
class C{  @Override public IFeatureVector difference(IFeatureVector fv2){  List<Integer> rIdx=new ArrayList<Integer>();  List<Float> rVal=new ArrayList<Float>();  int i1=0;  int i2=0;  if (!sorted) {    for (i1=0; i1 < this.indices.length; i1++) {      rIdx.add(this.indices[i1]);      rVal.add(this.values[i1]);    }    for (i1=0; i1 < fv2.getNumActiveFeatures(); i1++) {      rIdx.add(fv2.getIdx(i1));      rVal.add(-fv2.getValue(i1));    }  } else {    while (i1 < this.indices.length && i2 < fv2.getNumActiveFeatures()) {      int idxFv1=this.indices[i1];      int idxFv2=fv2.getIdx(i2);      float valFv1=this.values[i1];      float valFv2=fv2.getValue(i2);      if (idxFv1 < idxFv2) {        rIdx.add(idxFv1);        rVal.add(valFv1);        i1++;      } else       if (idxFv1 > idxFv2) {        rIdx.add(idxFv2);        rVal.add(-valFv2);        i2++;      } else {        rIdx.add(idxFv1);        rVal.add(valFv1 - valFv2);        i1++;        i2++;      }    }    while (i1 < this.indices.length) {      rIdx.add(this.indices[i1]);      rVal.add(this.values[i1]);      i1++;    }    while (i2 < fv2.getNumActiveFeatures()) {      rIdx.add(fv2.getIdx(i2));      rVal.add(-fv2.getValue(i2));      i2++;    }  }  int[] resIdx=new int[rIdx.size()];  float[] resValue=new float[rVal.size()];  for (int i=0; i < rIdx.size(); i++) {    resIdx[i]=rIdx.get(i);    resValue[i]=rVal.get(i);  }  return new SparseFeatureVector(resIdx,resValue,sorted);}  }
class C{  private static float computePivot(int startPos,float finalScale){  final float denom=finalScale - 1;  if (Math.abs(denom) < .0001f) {    return startPos;  }  return -startPos / denom;}  }
class C{  public void updateTime(String columnName,Time x) throws SQLException {  checkUpdatable();  getField(columnName).setTime(x);}  }
class C{  public void visitAttribute(Attribute attr){  if (cv != null) {    cv.visitAttribute(attr);  }}  }
class C{  public String toString(){  return String.format("{ %f, %f, %f }",x,y,z);}  }
class C{  public Env<A> dup(JCTree tree,A info){  return dupto(new Env<A>(tree,info));}  }
class C{  public void registerVendorDataType(OFBasicVendorDataType vendorDataType){  dataTypeMap.put(vendorDataType.getTypeValue(),vendorDataType);}  }
class C{  public Object delete(Object entity){  final Object key=PropertyUtils.getPropertyValue(entity,getRepositoryMetadata().getIdentifierProperty());  if (key == null) {    log.error("The entity that was supposed to be deleted, does not have a key");    throw new EntityMissingKeyException(getRepositoryMetadata().getEntityType(),getRepositoryMetadata().getIdentifierProperty());  }  return delete((Serializable)key);}  }
class C{  private Double parseCurrentTemperature(JSONObject response) throws JSONException {  JSONObject currently=response.getJSONObject("currently");  return currently.getDouble("temperature");}  }
class C{  TypeIdentifier analyze(final JsonValue jsonValue){  return analyzeInternal(jsonValue);}  }
class C{  public static SimplyAttribute[] toTargetAttributes(String[] attributes){  SimplyAttribute[] targetAttributes=new SimplyAttribute[attributes.length];  for (int i=0; i < attributes.length; i++)   targetAttributes[i]=new SimplyAttribute(attributes[i]);  return targetAttributes;}  }
class C{  public StandardXYBarPainter(){}  }
class C{  public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  DynaValidatorForm oForm=(DynaValidatorForm)form;  String cUser=null;  String cPass=null;  if (oForm != null) {    cUser=(String)oForm.get(Constants.LOGIN_FORM_USER_FIELD);    cPass=(String)oForm.get(Constants.LOGIN_FORM_PASS_FIELD);  }  if (!AuthenticationHelper.validateUserPassword(cUser,cPass)) {    return mapping.findForward(GLOBAL_FORWARD_LOGIN);  }  AuthenticationHelper.authenticateUser(request);  return mapping.findForward(SUCCESS_FORWARD);}  }
class C{  public void write(PrintWriter writer){  for (int i=0; i < count; i++) {    writer.println(keys[i] + "\t" + values[i]);  }  writer.flush();}  }
class C{  public void fireTableRowsInserted(int firstRow,int lastRow){  fireTableChanged(new TableModelEvent(this,firstRow,lastRow,TableModelEvent.ALL_COLUMNS,TableModelEvent.INSERT));}  }
class C{  @Override public JAMonListener copy(){  return new JAMonArrayBufferListener(getName(),getBufferList().copy());}  }
class C{  private static void fail(String message,Object... args){  throw new AssertionError(args.length == 0 ? message : String.format(message,args));}  }
class C{  public TypeDefinition basicGetRef(){  return ref;}  }
class C{  public boolean isSummary(){  Object oo=get_Value(COLUMNNAME_IsSummary);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) @Override public void evaluate(ValuesArray data) throws Exception {  if (LOG.isDebugEnabled())   LOG.debug("Siddhi policy evaluator consumers data :" + data);  Object siddhiAlertContext=data.get(0);  String streamName=(String)data.get(1);  SortedMap map=(SortedMap)data.get(2);  validateEventInRuntime(streamName,map);synchronized (siddhiRuntime) {    List<Object> input=new ArrayList<>();    input.add(siddhiAlertContext);    putAttrsIntoInputStream(input,streamName,map);    siddhiRuntime.siddhiInputHandlers.get(streamName).send(input.toArray(new Object[0]));  }}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MPrintFormatItem[");  sb.append("ID=").append(get_ID()).append(",Name=").append(getName()).append(",Print=").append(getPrintName()).append(", Seq=").append(getSeqNo()).append(",Sort=").append(getSortNo()).append(", Area=").append(getPrintAreaType()).append(", MaxWidth=").append(getMaxWidth()).append(",MaxHeight=").append(getMaxHeight()).append(",OneLine=").append(isHeightOneLine()).append(", Relative=").append(isRelativePosition());  if (isRelativePosition())   sb.append(",X=").append(getXSpace()).append(",Y=").append(getYSpace()).append(",LineAlign=").append(getLineAlignmentType()).append(",NewLine=").append(isNextLine()).append(",NewPage=").append(isPageBreak()); else   sb.append(",X=").append(getXPosition()).append(",Y=").append(getYPosition());  sb.append(",FieldAlign=").append(getFieldAlignmentType());  sb.append(", Type=").append(getPrintFormatType());  if (isTypeText())   ; else   if (isTypeField())   sb.append(",AD_Column_ID=").append(getAD_Column_ID()); else   if (isTypePrintFormat())   sb.append(",AD_PrintFormatChild_ID=").append(getAD_PrintFormatChild_ID()).append(",AD_Column_ID=").append(getAD_Column_ID()); else   if (isTypeImage())   sb.append(",ImageIsAttached=").append(isImageIsAttached()).append(",ImageURL=").append(getImageURL());  sb.append(", Printed=").append(isPrinted()).append(",SeqNo=").append(getSeqNo()).append(",OrderBy=").append(isOrderBy()).append(",SortNo=").append(getSortNo()).append(",Summarized=").append(isSummarized());  sb.append("]");  return sb.toString();}  }
class C{  public PKCS10CertificationRequest(String signatureAlgorithm,X509Name subject,PublicKey key,ASN1Set attributes,PrivateKey signingKey) throws NoSuchAlgorithmException, NoSuchProviderException, InvalidKeyException, SignatureException {  this(signatureAlgorithm,subject,key,attributes,signingKey,BouncyCastleProvider.PROVIDER_NAME);}  }
class C{  public <T>Builder row(T firstCell){  return tag("tr").cell(firstCell).end();}  }
class C{  public static Object[] mergeAndExtractParams(Map<String,? extends Object> globalConfig,Map<String,? extends Object> localParams,Collection<String> ignoreParams,Map<String,ExternalResourceDescription> resources){  Set<String> uniqueParams=new HashSet<>();  uniqueParams.addAll(localParams.keySet());  uniqueParams.addAll(globalConfig.keySet());  if (ignoreParams != null) {    uniqueParams.removeAll(ignoreParams);  }  Object[] params=new Object[resources.size() * 2 + uniqueParams.size() * 2];  int i=0;  for (  Entry<String,ExternalResourceDescription> entry : resources.entrySet()) {    params[i++]=entry.getKey();    params[i++]=entry.getValue();  }  for (  String key : uniqueParams) {    params[i++]=key;    if (localParams.containsKey(key)) {      params[i++]=CpeBuilderUtils.convertToParameterValue(localParams.get(key));    } else {      params[i++]=CpeBuilderUtils.convertToParameterValue(globalConfig.get(key));    }  }  return params;}  }
class C{  public int top(){  return get(size - 1);}  }
class C{  public static double lnGamma(double x){  double p, q, w, z;  double A[]={8.11614167470508450300E-4,-5.95061904284301438324E-4,7.93650340457716943945E-4,-2.77777777730099687205E-3,8.33333333333331927722E-2};  double B[]={-1.37825152569120859100E3,-3.88016315134637840924E4,-3.31612992738871184744E5,-1.16237097492762307383E6,-1.72173700820839662146E6,-8.53555664245765465627E5};  double C[]={-3.51815701436523470549E2,-1.70642106651881159223E4,-2.20528590553854454839E5,-1.13933444367982507207E6,-2.53252307177582951285E6,-2.01889141433532773231E6};  if (x < -34.0) {    q=-x;    w=lnGamma(q);    p=Math.floor(q);    if (p == q) {      throw new ArithmeticException("lnGamma: Overflow");    }    z=q - p;    if (z > 0.5) {      p+=1.0;      z=p - q;    }    z=q * Math.sin(Math.PI * z);    if (z == 0.0) {      throw new ArithmeticException("lnGamma: Overflow");    }    z=LOGPI - Math.log(z) - w;    return z;  }  if (x < 13.0) {    z=1.0;    while (x >= 3.0) {      x-=1.0;      z*=x;    }    while (x < 2.0) {      if (x == 0.0) {        throw new ArithmeticException("lnGamma: Overflow");      }      z/=x;      x+=1.0;    }    if (z < 0.0) {      z=-z;    }    if (x == 2.0) {      return Math.log(z);    }    x-=2.0;    p=x * polevl(x,B,5) / p1evl(x,C,6);    return (Math.log(z) + p);  }  if (x > 2.556348e305) {    throw new ArithmeticException("lnGamma: Overflow");  }  q=(x - 0.5) * Math.log(x) - x + 0.91893853320467274178;  if (x > 1.0e8) {    return (q);  }  p=1.0 / (x * x);  if (x >= 1000.0) {    q+=((7.9365079365079365079365e-4 * p - 2.7777777777777777777778e-3) * p + 0.0833333333333333333333) / x;  } else {    q+=polevl(p,A,4) / x;  }  return q;}  }
class C{  public static boolean isEnumerator(FDValue val){  if (val instanceof FDGeneric) {    return getEnumerator(val) != null;  }  return false;}  }
class C{  public UnassignedDatasetException(){  super();}  }
class C{  int match(int soffset,int poffset){  while (true) {    if (poffset == p.length())     return soffset;switch (p.luaByte(poffset)) {case '(':      if (++poffset < p.length() && p.luaByte(poffset) == ')')       return start_capture(soffset,poffset + 1,CAP_POSITION); else       return start_capture(soffset,poffset,CAP_UNFINISHED);case ')':    return end_capture(soffset,poffset + 1);case L_ESC:  if (poffset + 1 == p.length())   error("malformed pattern (ends with '%')");switch (p.luaByte(poffset + 1)) {case 'b':  soffset=matchbalance(soffset,poffset + 2);if (soffset == -1) return -1;poffset+=4;continue;case 'f':{poffset+=2;if (p.luaByte(poffset) != '[') {error("Missing [ after %f in pattern");}int ep=classend(poffset);int previous=(soffset == 0) ? -1 : s.luaByte(soffset - 1);if (matchbracketclass(previous,poffset,ep - 1) || matchbracketclass(s.luaByte(soffset),poffset,ep - 1)) return -1;poffset=ep;continue;}default :{int c=p.luaByte(poffset + 1);if (Character.isDigit((char)c)) {soffset=match_capture(soffset,c);if (soffset == -1) return -1;return match(soffset,poffset + 2);}}}case '$':if (poffset + 1 == p.length()) return (soffset == s.length()) ? soffset : -1;}int ep=classend(poffset);boolean m=soffset < s.length() && singlematch(s.luaByte(soffset),poffset,ep);int pc=(ep < p.length()) ? p.luaByte(ep) : '\0';switch (pc) {case '?':int res;if (m && ((res=match(soffset + 1,ep + 1)) != -1)) return res;poffset=ep + 1;continue;case '*':return max_expand(soffset,poffset,ep);case '+':return (m ? max_expand(soffset + 1,poffset,ep) : -1);case '-':return min_expand(soffset,poffset,ep);default :if (!m) return -1;soffset++;poffset=ep;continue;}}}  }
class C{  private void replacePackageName(String filePath){  try {    Path path=Paths.get(filePath);    Charset charset=StandardCharsets.UTF_8;    String content=new String(Files.readAllBytes(path),charset);    content=content.replaceAll("com.fujitsu.bss.app","org.oscm.app");    Files.write(path,content.getBytes(charset));  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public int hashCode(){  return (((int)keyChar) + 1) * (2 * (keyCode + 1)) * (modifiers + 1) + (onKeyRelease ? 1 : 2);}  }
class C{  private void trimToSize() throws IOException {synchronized (this) {    if (mSize > mCapacity) {      if (SimpleDiskLruCache.DEBUG) {        CLog.d(SimpleDiskLruCache.LOG_TAG,"should trim, current is: %s",mSize);      }    }    while (mSize > mCapacity) {      Map.Entry<String,CacheEntry> toEvict=mLruEntries.entrySet().iterator().next();      String key=toEvict.getKey();      CacheEntry cacheEntry=toEvict.getValue();      mLruEntries.remove(key);      mSize-=cacheEntry.getSize();      addActionLog(ACTION_PENDING_DELETE,cacheEntry);      if (SimpleDiskLruCache.DEBUG) {        CLog.d(SimpleDiskLruCache.LOG_TAG,"pending remove: %s, size: %s, after remove total: %s",key,cacheEntry.getSize(),mSize);      }    }  }}  }
class C{  @Override public void stop(){  for (  ActiveMQServer activeMQServer : backupServers.values()) {    try {      activeMQServer.stop();    } catch (    Exception e) {      ActiveMQServerLogger.LOGGER.warn(e.getMessage(),e);    }  }  backupServers.clear();  started=false;}  }
class C{  public static void mixin(MetaClass self,List<Class> categoryClasses){  MixinInMetaClass.mixinClassesToMetaClass(self,categoryClasses);}  }
class C{  public static final int drawTabbedText(Segment s,int x,int y,Graphics g,TabExpander e,int startOffset){  return drawTabbedText(null,s,x,y,g,e,startOffset);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypesPackage.TYPE_SPECIFIER__TYPE:    setType((Type)null);  return;case TypesPackage.TYPE_SPECIFIER__TYPE_ARGUMENTS:getTypeArguments().clear();return;}super.eUnset(featureID);}  }
class C{  public final void checkAssert(final BiConsumer<P,T> property){  check(null);}  }
class C{  public Number viewToWorld(Axis axis,double value,boolean extrapolate){  double min=axis.getMin().doubleValue();  double max=axis.getMax().doubleValue();  if (!extrapolate) {    if (value <= 0.0) {      return min;    }    if (value >= getShapeLength()) {      return max;    }  }  return value / getShapeLength() * (max - min) + min;}  }
class C{  public Map<String,String> convertDataToStrings(Map<String,Object> data){  Map<String,String> results=new HashMap<>();  if (data != null) {    for (    String key : data.keySet()) {      Object object=data.get(key);      if (object instanceof WebAuthenticationDetails) {        WebAuthenticationDetails authenticationDetails=(WebAuthenticationDetails)object;        results.put("remoteAddress",authenticationDetails.getRemoteAddress());        results.put("sessionId",authenticationDetails.getSessionId());      } else       if (object != null) {        results.put(key,object.toString());      } else {        results.put(key,"null");      }    }  }  return results;}  }
class C{  private static int decode4to3(byte[] source,int srcOffset,byte[] destination,int destOffset){  if (source[srcOffset + 2] == EQUALS_SIGN) {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12);    destination[destOffset]=(byte)(outBuff >>> 16);    return 1;  } else   if (source[srcOffset + 3] == EQUALS_SIGN) {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12) | ((DECODABET[source[srcOffset + 2]] & 0xFF) << 6);    destination[destOffset]=(byte)(outBuff >>> 16);    destination[destOffset + 1]=(byte)(outBuff >>> 8);    return 2;  } else {    try {      int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12) | ((DECODABET[source[srcOffset + 2]] & 0xFF) << 6)| ((DECODABET[source[srcOffset + 3]] & 0xFF));      destination[destOffset]=(byte)(outBuff >> 16);      destination[destOffset + 1]=(byte)(outBuff >> 8);      destination[destOffset + 2]=(byte)(outBuff);      return 3;    } catch (    Exception e) {      logger.error(e,e);      if (logger.isDebugEnabled()) {        logger.debug("" + source[srcOffset] + ": "+ (DECODABET[source[srcOffset]]));        logger.debug("" + source[srcOffset + 1] + ": "+ (DECODABET[source[srcOffset + 1]]));        logger.debug("" + source[srcOffset + 2] + ": "+ (DECODABET[source[srcOffset + 2]]));        logger.debug("" + source[srcOffset + 3] + ": "+ (DECODABET[source[srcOffset + 3]]));      }      return -1;    }  }}  }
class C{  private void fillLoadedBlocks(AbstractIndex[] loadedBlockArray,List<Future<AbstractIndex>> blocksList) throws IndexBuilderException {  int blockCounter=0;  for (int i=0; i < loadedBlockArray.length; i++) {    if (null == loadedBlockArray[i]) {      try {        loadedBlockArray[i]=blocksList.get(blockCounter++).get();      } catch (      InterruptedException|ExecutionException e) {        throw new IndexBuilderException(e);      }    }  }}  }
class C{  public void addNonOptionalNonMinusNodeToPartition(IGroupMemberNode node){  nonOptionalNonMinusNodes.add(node);  definitelyProduced.addAll(bindingInfoMap.get(node).getDefinitelyProduced());}  }
class C{  public int offset(){  return offset;}  }
class C{  public void rollback() throws GenericDataSourceException {  if (_connection == null) {    return;  }  if (Debug.verboseOn())   Debug.logVerbose("SQLProcessor:rollback() _manualTX=" + _manualTX,module);  try {    if (_manualTX) {      _connection.rollback();      if (Debug.verboseOn())       Debug.logVerbose("SQLProcessor:rollback() : _manualTX=" + _manualTX,module);    } else {      try {        TransactionUtil.setRollbackOnly("rollback called in Entity Engine SQLProcessor",new Exception("Current Location Stack"));        if (Debug.verboseOn())         Debug.logVerbose("SQLProcessor:rollback() : _manualTX=" + _manualTX,module);      } catch (      GenericTransactionException e) {        Debug.logError(e,"Error setting rollback only",module);        throw new GenericDataSourceException("Error setting rollback only",e);      }    }  } catch (  SQLException sqle2) {    Debug.logWarning("[SQLProcessor.rollback]: SQL Exception while rolling back insert. Error was:" + sqle2,module);    Debug.logWarning(sqle2,module);  }}  }
class C{  public void proceed(int priority) throws InterruptedException {synchronized (lock) {    while (highestPriority < priority) {      lock.wait();    }  }}  }
class C{  private boolean isInitialized(){  return measurement != null;}  }
class C{  public static boolean search(String[] strs,String target){  for (  Object o : strs)   if (o.equals(target))   return true;  return false;}  }
class C{  protected void initialize(char[] input){  super.initialize(input);  this.tag=new ParsedTag();  this.doctype=new ParsedDoctype();  this.text=new char[1024];  this.textLen=0;  this.parsingTime=-1;}  }
class C{  public ArgumentValues process(final String[] programArgs) throws UsageException {  ArgumentHandler argHandler;  final ArgumentValues result=new ArgumentValues();  List<Argument> unmatched;  List<Match> matches;  matches=checkMatches(programArgs,result);  unmatched=new ArrayList<Argument>();  unmatched.addAll(args);  for (  Match match : matches) {    unmatched.remove(match.getArgument());  }  for (  Argument arg : unmatched) {    if (arg.isRequired() && !arg.isDefinedInEnv()) {      final UsageException usageException=new UsageException("Required argument not provided: " + arg);      usageException.setUsage(getUsage());      throw usageException;    }  }  for (  Match match : matches) {    final Argument arg=match.getArgument();    argHandler=arg.getArgumentHandler();    if (argHandler != null) {      argHandler.handleArgument(arg,match.getForm(),match.getParams());    }    result.addResult(arg,match.getParams());  }  return result;}  }
class C{  private void checkEntries(IgniteCache<Long,Long> cache) throws Exception {  for (long i=from; i < to; i++) {    cache.localPromote(Collections.singleton(i));    GridCacheEntryEx entry=dht(cache).entryEx(i);    assert entry != null;    assert entry.key() != null;    Long val=entry.rawGet().value(entry.context().cacheObjectContext(),false);    assertNotNull("Value null for key: " + i,val);    assertEquals(entry.key().value(entry.context().cacheObjectContext(),false),val);    assertEquals(entry.version(),versions.get(i));  }  assertEquals(0,swappedCnt.get());  assertEquals(0,offheapedCnt.get());}  }
class C{  public void restoreWorkspaceBackup(final String workspaceId,final String destPath,final String userId,final String groupId,final String destAddress) throws ServerException {  boolean restored=false;  ReentrantLock lock=new ReentrantLock();  lock.lock();  try {    if (workspacesBackupLocks.putIfAbsent(workspaceId,lock) != null) {      String err="Restore of workspace " + workspaceId + " failed. Another restore process of the same workspace is in progress";      LOG.error(err);      throw new ServerException(err);    }    final String srcPath=workspaceIdHashLocationFinder.calculateDirPath(backupsRootDir,workspaceId).toString();    Files.createDirectories(Paths.get(srcPath));    CommandLine commandLine=new CommandLine(restoreScript,srcPath,destPath,destAddress,userId,groupId);    execute(commandLine.asArray(),restoreDuration);    restored=true;  } catch (  TimeoutException e) {    throw new ServerException("Restoring of workspace " + workspaceId + " filesystem terminated due to timeout on "+ destAddress+ " node.");  }catch (  InterruptedException e) {    LOG.error(e.getLocalizedMessage(),e);    throw new ServerException("Restoring of workspace " + workspaceId + " filesystem interrupted on "+ destAddress+ " node.");  }catch (  IOException e) {    LOG.error(e.getLocalizedMessage(),e);    throw new ServerException("Restoring of workspace " + workspaceId + " filesystem terminated on "+ destAddress+ " node. "+ e.getLocalizedMessage());  } finally {    lock.unlock();    if (!restored) {      workspacesBackupLocks.remove(workspaceId,lock);    }  }}  }
class C{  public OperationPendingException(String message,ReasonEnum reason,Object[] params){  super(message,params);  bean.setReason(reason);  setMessageKey(getMessageKey() + "." + reason.toString());}  }
class C{  private void buildDoc(Reader in) throws IOException {  try {    SAXReader xmlReader=new SAXReader();    xmlReader.setEncoding("UTF-8");    document=xmlReader.read(in);    buildNowVersion();  } catch (  Exception e) {    Log.error("Error reading XML properties",e);    throw new IOException(e.getMessage());  } finally {    if (in != null) {      in.close();    }  }}  }
class C{  private void borrarProductoresEliminados(List listaInfoProductoresEliminados){  logger.debug("inicio borrarProductoresEliminados");  if (ListUtils.isNotEmpty(listaInfoProductoresEliminados)) {    for (Iterator iterator=listaInfoProductoresEliminados.iterator(); iterator.hasNext(); ) {      IInfoProductorSerie infoProductorSerie=(IInfoProductorSerie)iterator.next();      logger.debug("InfoProductorSerie:" + infoProductorSerie);      if (infoProductorSerie != null && infoProductorSerie.getProductorSerieVO() != null) {        borrarProductor(infoProductorSerie.getProductorSerieVO());      }    }  }  logger.debug("fin borrarProductoresEliminados");}  }
class C{  public boolean registerPacket(Class<? extends AbstractPacket> clazz){  if (this.packets.size() > 256) {    return false;  }  if (this.packets.contains(clazz)) {    return false;  }  if (this.isPostInitialised) {    return false;  }  this.packets.add(clazz);  return true;}  }
class C{  private void checkLicenseConstrainsAndStore(TechnicalProduct tp,String locale,String license){  if (license == null) {    return;  }  List<VOLocalizedText> localizedValues=localizer.getLocalizedValues(tp.getKey(),LocalizedObjectTypes.PRODUCT_LICENSE_DESC);  String storedLicense=null;  for (  VOLocalizedText text : localizedValues) {    if (text.getLocale().equals(locale)) {      storedLicense=text.getText();    }  }  ProductLicenseValidator.validate(tp,storedLicense,license);  if (!Strings.areStringsEqual(storedLicense,license)) {    localizer.storeLocalizedResource(locale,tp.getKey(),LocalizedObjectTypes.PRODUCT_LICENSE_DESC,license);  }}  }
class C{  public final double readDouble() throws IOException {  return Double.longBitsToDouble(readLong());}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public ShapeIndex(String shxFilename) throws IOException {  shx=new RandomAccessFile(shxFilename,"r");}  }
class C{  private void updateView(){  Map<String,List<String>> attributes=dataObject.getAttributes();  final String artifactId=getAttribute(ARTIFACT_ID);  if (!artifactId.isEmpty()) {    view.setArtifactId(artifactId);  }  if (attributes.get(GROUP_ID) != null) {    view.setGroupId(getAttribute(GROUP_ID));  } else {    view.setGroupId(getAttribute(PARENT_GROUP_ID));  }  if (attributes.get(VERSION) != null) {    view.setVersion(getAttribute(VERSION));  } else {    view.setVersion(getAttribute(PARENT_VERSION));  }  view.setPackaging(getAttribute(PACKAGING));}  }
class C{  private void writeUnitsOfIndentation(int i) throws IOException {  for (; i > 0; i--) {    writer.write(INDENTATION_UNIT);  }}  }
class C{  private void updateNeuronNodes(){  for (  NeuronNode node : getNeuronNodes()) {    node.update();  }  timeLabel.update();  updateComplete.decrementAndGet();}  }
class C{  static void paintClassicText(AbstractButton b,Graphics g,int x,int y,String text,int mnemIndex){  ButtonModel model=b.getModel();  Color color=b.getForeground();  if (model.isEnabled()) {    if (!(b instanceof JMenuItem && model.isArmed()) && !(b instanceof JMenu && (model.isSelected() || model.isRollover()))) {      g.setColor(b.getForeground());    }    MySwingUtilities2.drawStringUnderlineCharAt(b,g,text,mnemIndex,x,y);  } else {    color=UIManager.getColor("Button.shadow");    Color shadow=UIManager.getColor("Button.disabledShadow");    if (model.isArmed()) {      color=UIManager.getColor("Button.disabledForeground");    } else {      if (shadow == null) {        shadow=b.getBackground().darker();      }      g.setColor(shadow);      MySwingUtilities2.drawStringUnderlineCharAt(b,g,text,mnemIndex,x + 1,y + 1);    }    if (color == null) {      color=b.getBackground().brighter();    }    g.setColor(color);    MySwingUtilities2.drawStringUnderlineCharAt(b,g,text,mnemIndex,x,y);  }}  }
class C{  void renderNormal(){  glUseProgram(normalProgram);  glUniformMatrix4fv(normalProgramVPUniform,false,camera.get(matrixBuffer));  glUniformMatrix4fv(normalProgramLVPUniform,false,light.get(matrixBuffer));  glUniformMatrix4fv(normalProgramBiasUniform,false,biasMatrix.get(matrixBuffer));  glUniform3f(normalProgramLightPosition,lightPosition.x,lightPosition.y,lightPosition.z);  glUniform3f(normalProgramLightLookAt,lightLookAt.x,lightLookAt.y,lightLookAt.z);  glViewport(0,0,width,height);  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);  glBindTexture(GL_TEXTURE_2D,depthTexture);  glBindVertexArray(vao);  glDrawArrays(GL_TRIANGLES,0,6 * 6 * boxes.length);  glBindVertexArray(0);  glBindTexture(GL_TEXTURE_2D,0);  glUseProgram(0);}  }
class C{  public final boolean contains(int s){  for (int i=0; i < m_firstFree; i++) {    if (m_map[i] == s)     return true;  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:40.856 -0500",hash_original_method="CC164D54DA859C5908F37C0D6AF369B4",hash_generated_method="F591D5AF39DA5D048887EDDDFDB1ABC7") @Override public boolean isInputMethodTarget(){  return true;}  }
class C{  public static short parseMarkerCoordinateSystem(Element e,String attr,String coordinateSystem,BridgeContext ctx){  if (SVG_USER_SPACE_ON_USE_VALUE.equals(coordinateSystem)) {    return USER_SPACE_ON_USE;  } else   if (SVG_STROKE_WIDTH_VALUE.equals(coordinateSystem)) {    return STROKE_WIDTH;  } else {    throw new BridgeException(ctx,e,ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{attr,coordinateSystem});  }}  }
class C{  public void resetExtremeGravityPSRs(Entity entity){  PilotingRollData roll;  Vector<Integer> rollsToRemove=new Vector<Integer>();  int i=0;  for (i=0; i < extremeGravityRolls.size(); i++) {    roll=extremeGravityRolls.elementAt(i);    if (roll.getEntityId() == entity.getId()) {      rollsToRemove.addElement(new Integer(i));    }  }  for (i=rollsToRemove.size() - 1; i > -1; i--) {    extremeGravityRolls.removeElementAt(rollsToRemove.elementAt(i).intValue());  }}  }
class C{  public final String toString(){  String s=alternates[current];  alternate();  return s;}  }
class C{  public InsufficientPermissionException(){  this(null);}  }
class C{  @Override protected void emit_lookupswitch(int defaultval,int npairs){  asm.emitPOP_Reg(T0);  for (int i=0; i < npairs; i++) {    int match=bcodes.getLookupSwitchValue(i);    asm.emitCMP_Reg_Imm(T0,match);    int offset=bcodes.getLookupSwitchOffset(i);    int bTarget=biStart + offset;    int mTarget=bytecodeMap[bTarget];    if (!VM.runningTool && ((BaselineCompiledMethod)compiledMethod).hasCounterArray()) {      ForwardReference fr=asm.forwardJcc(NE);      incEdgeCounter(S0,null,edgeCounterIdx++);      asm.emitJMP_ImmOrLabel(mTarget,bTarget);      fr.resolve(asm);    } else {      asm.emitJCC_Cond_ImmOrLabel(EQ,mTarget,bTarget);    }  }  bcodes.skipLookupSwitchPairs(npairs);  int bTarget=biStart + defaultval;  int mTarget=bytecodeMap[bTarget];  if (!VM.runningTool && ((BaselineCompiledMethod)compiledMethod).hasCounterArray()) {    incEdgeCounter(S0,null,edgeCounterIdx++);  }  asm.emitJMP_ImmOrLabel(mTarget,bTarget);}  }
class C{  public TextColumn(){  super(ColumnType.TEXT);}  }
class C{  public static IndexType createShardingKey(boolean hash){  IndexType type=new IndexType();  type.shardingKey=true;  type.primaryKey=false;  type.hash=hash;  type.unique=false;  return type;}  }
class C{  public CLIQUEUnit(CLIQUEInterval interval){  intervals=new ArrayList<>();  intervals.add(interval);  ids=DBIDUtil.newHashSet();  assigned=false;}  }
class C{  private String checkNamespace(String namespaceUri){  for (int i=elementStack.size() - 1; i >= 0; --i) {    Element element=elementStack.get(i);    for (    XmlNamespace ns : element.nsDecls) {      if (ns.alias != null && ns.uri.equals(namespaceUri)) {        return ns.alias;      }    }  }  return null;}  }
class C{  public RootLayer(){  setState(State.ADDED);}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){  if (null != m_parts) {    int n=m_parts.size();    for (int i=0; i < n; i++) {      AVTPart part=(AVTPart)m_parts.elementAt(i);      part.fixupVariables(vars,globalsSize);    }  }}  }
class C{  public boolean changed(){  return changed;}  }
class C{  public static void main(String[] args){  logger.info("Launching MiNiFi...");  try {    NiFiProperties niFiProperties=NiFiProperties.getInstance();    new MiNiFi(niFiProperties);  } catch (  final Throwable t) {    logger.error("Failure to launch MiNiFi due to " + t,t);  }}  }
class C{  public static void serialize(String filename,Object o){  SerializationMode mode;  try {    mode=SerializationMode.fromFileName(filename);  } catch (  Exception e) {    logger.warn("Serialization mode could not be inferred from {}. Choosing {}",filename,GZ_BIN_EXTENSION);    mode=SerializationMode.BIN_GZ;  }  serialize(filename,o,mode);}  }
class C{  @Override public int locations(){  return 2;}  }
class C{  private void logMax(String type,String value,String arg,long amount){  Key key=new Key(type,value,arg + MAXIMUM_INDICATOR);synchronized (counts) {    Long oldMax=counts.get(key);    if (oldMax == null) {      oldMax=amount;    }    counts.put(key,Math.max(oldMax,amount));  }}  }
class C{  public void push(int value){  if (size >= elements.length) {    int[] temp=new int[elements.length * 2];    System.arraycopy(elements,0,temp,0,elements.length);    elements=temp;  }  elements[size++]=value;}  }
class C{  public void store(Extent val,Offset offset){  this.plus(offset).store(val);}  }
class C{  public WARCWritable(WARCRecord record){  this.record=record;}  }
class C{  public synchronized void println(String s,int log) throws OutputException {  if (log == NO_LOGS)   return;  println(s,V_VERBOSE,log);}  }
class C{  public boolean isOpen(){  return isOpen;}  }
class C{  public static int round(double value){  int roundedValue=value > 0 ? (int)(value + 0.5) : -(int)(Math.abs(value) + 0.5);  return roundedValue;}  }
class C{  public Observable<Bookmark> create(FeedFilter filter){  return create(filter,FeedFilterFormatter.format(context,filter).title);}  }
class C{  boolean isAnySupplierSelectedForDeletion() throws ObjectNotFoundException, OperationNotPermittedException {  for (  Organization org : getSuppliersForTechnicalService()) {    if (org.isSelected())     return true;  }  return false;}  }
class C{  public ISPO next(){  if (sameAs3It == null) {    if (sameAs3 != null) {      sameAs3It=sameAs3.getAccessPath(SPOKeyOrder.SPO).iterator();    } else {      sameAs3It=new EmptyChunkedIterator<ISPO>(SPOKeyOrder.SPO);    }  }  canRemove=false;  ISPO current=null;  if (src.hasNext()) {    current=src.next();    processSameAs2(current);    canRemove=true;  } else   if (sameAs3It.hasNext()) {    current=sameAs3It.next();    processSameAs2(current);  } else {    if (sameAs2It == null) {      if (sameAs2 != null) {        sameAs2It=sameAs2.getAccessPath(SPOKeyOrder.SPO).iterator();      } else {        sameAs2It=new EmptyChunkedIterator<ISPO>(SPOKeyOrder.SPO);      }    }    if (sameAs2It.hasNext()) {      current=sameAs2It.next();    }  }  return current;}  }
class C{  void fullyLock(){  putLock.lock();  takeLock.lock();}  }
class C{  private Hop simplifyBushyBinaryOperation(Hop parent,Hop hi,int pos){  if (hi instanceof BinaryOp && parent instanceof AggBinaryOp) {    BinaryOp bop=(BinaryOp)hi;    Hop left=bop.getInput().get(0);    Hop right=bop.getInput().get(1);    OpOp2 op=bop.getOp();    if (left.getDataType() == DataType.MATRIX && right.getDataType() == DataType.MATRIX && HopRewriteUtils.isValidOp(op,LOOKUP_VALID_ASSOCIATIVE_BINARY)) {      boolean applied=false;      if (right instanceof BinaryOp) {        BinaryOp bop2=(BinaryOp)right;        Hop left2=bop2.getInput().get(0);        Hop right2=bop2.getInput().get(1);        OpOp2 op2=bop2.getOp();        if (op == op2 && right2.getDataType() == DataType.MATRIX && (right2 instanceof AggBinaryOp)) {          HopRewriteUtils.removeChildReference(parent,bop);          BinaryOp bop3=new BinaryOp("tmp1",DataType.MATRIX,ValueType.DOUBLE,op,left,left2);          HopRewriteUtils.refreshOutputParameters(bop3,bop);          BinaryOp bop4=new BinaryOp("tmp2",DataType.MATRIX,ValueType.DOUBLE,op,bop3,right2);          HopRewriteUtils.refreshOutputParameters(bop4,bop2);          HopRewriteUtils.addChildReference(parent,bop4,pos);          hi=bop4;          applied=true;          LOG.debug("Applied simplifyBushyBinaryOperation1");        }      }      if (!applied && left instanceof BinaryOp) {        BinaryOp bop2=(BinaryOp)left;        Hop left2=bop2.getInput().get(0);        Hop right2=bop2.getInput().get(1);        OpOp2 op2=bop2.getOp();        if (op == op2 && left2.getDataType() == DataType.MATRIX && (left2 instanceof AggBinaryOp) && (right2.getDim2() > 1 || right.getDim2() == 1) && (right2.getDim1() > 1 || right.getDim1() == 1)) {          HopRewriteUtils.removeChildReference(parent,bop);          BinaryOp bop3=new BinaryOp("tmp1",DataType.MATRIX,ValueType.DOUBLE,op,right2,right);          HopRewriteUtils.refreshOutputParameters(bop3,bop2);          BinaryOp bop4=new BinaryOp("tmp2",DataType.MATRIX,ValueType.DOUBLE,op,left2,bop3);          HopRewriteUtils.refreshOutputParameters(bop4,bop);          HopRewriteUtils.addChildReference(parent,bop4,pos);          hi=bop4;          LOG.debug("Applied simplifyBushyBinaryOperation2");        }      }    }  }  return hi;}  }
class C{  public NativeUnixDirectory(Path path,int mergeBufferSize,long minBytesDirect,LockFactory lockFactory,Directory delegate) throws IOException {  super(path,lockFactory);  if ((mergeBufferSize & ALIGN) != 0) {    throw new IllegalArgumentException("mergeBufferSize must be 0 mod " + ALIGN + " (got: "+ mergeBufferSize+ ")");  }  this.mergeBufferSize=mergeBufferSize;  this.minBytesDirect=minBytesDirect;  this.delegate=delegate;}  }
class C{  private void cleanUpSpecialAttributes(ExampleSet exampleSet,Attribute[] specialAttributes) throws OperatorException {  for (int i=0; i < specialAttributes.length; i++) {    exampleSet.getAttributes().remove(specialAttributes[i]);    exampleSet.getExampleTable().removeAttribute(specialAttributes[i]);  }}  }
class C{  public StatusHistoryEntry showDialog(String currentGame){  this.currentGame=currentGame;  table.requestFocusInWindow();  setTitle("Status Presets (Current game: " + currentGame + ")");  updateFilter();  setLocationRelativeTo(parentComponent);  table.setData(history.getEntries());  closeAction=CloseAction.CANCEL;  setVisible(true);  StatusHistoryEntry selected=table.getSelectedEntry();  if (selected != null) {    if (closeAction == CloseAction.TITLE) {      return new StatusHistoryEntry(selected.title,null,-1,-1,false);    } else     if (closeAction == CloseAction.GAME) {      return new StatusHistoryEntry(null,selected.game,-1,-1,false);    } else     if (closeAction == CloseAction.TITLE_GAME) {      return selected;    }  }  return null;}  }
class C{  public void execute2(KahanObject in1,double in2){  if (Double.isInfinite(in1._sum) || Double.isInfinite(in2)) {    in1.set(Double.isInfinite(in2) ? in2 : in1._sum,0);    return;  }  double correction=in2 + in1._correction;  double sum=in1._sum + correction;  in1.set(sum,correction - (sum - in1._sum));}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:00.234 -0500",hash_original_method="35BF52CFA65A672FC707BA33DDD071E9",hash_generated_method="387FC867EE6AF00187E803EFD322939F") void onPageFinished(String url){  mInitialZoomOverview=false;}  }
class C{  public void testBug1933() throws Exception {  if (versionMeetsMinimum(4,0)) {    Connection maxRowsConn=null;    PreparedStatement maxRowsPrepStmt=null;    Statement maxRowsStmt=null;    try {      Properties props=new Properties();      props.setProperty("maxRows","1");      maxRowsConn=getConnectionWithProps(props);      maxRowsStmt=maxRowsConn.createStatement();      assertTrue(maxRowsStmt.getMaxRows() == 1);      this.rs=maxRowsStmt.executeQuery("SELECT 1 UNION SELECT 2");      this.rs.next();      maxRowsPrepStmt=maxRowsConn.prepareStatement("SELECT 1 UNION SELECT 2");      assertTrue(maxRowsPrepStmt.getMaxRows() == 1);      this.rs=maxRowsPrepStmt.executeQuery();      this.rs.next();      assertTrue(!this.rs.next());      props.setProperty("useServerPrepStmts","false");      maxRowsConn=getConnectionWithProps(props);      maxRowsPrepStmt=maxRowsConn.prepareStatement("SELECT 1 UNION SELECT 2");      assertTrue(maxRowsPrepStmt.getMaxRows() == 1);      this.rs=maxRowsPrepStmt.executeQuery();      this.rs.next();      assertTrue(!this.rs.next());    }  finally {      if (maxRowsConn != null) {        maxRowsConn.close();      }    }  }}  }
class C{  public DataInputStream(InputStream in){  super(in);}  }
class C{  public void clear(){  properties.clear();}  }
class C{  protected final void finalize(){}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case RegularExpressionPackage.IDENTITY_ESCAPE_SEQUENCE__CHARACTER:    setCharacter(CHARACTER_EDEFAULT);  return;case RegularExpressionPackage.IDENTITY_ESCAPE_SEQUENCE__SEQUENCE:setSequence(SEQUENCE_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public JCMethodInvocation App(JCExpression meth,List<JCExpression> args){  return Apply(null,meth,args).setType(meth.type.getReturnType());}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  int i;  double radToDeg=180 / Math.PI;  double degToRad=Math.PI / 180;  double zFactor=1;  double z;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double fx, fy;  double gridRes, eightGridRes;  double azimuth=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  azimuth=Double.parseDouble(args[2]);  if (azimuth < 0 || azimuth > 360) {    azimuth=0;  }  zFactor=Double.parseDouble(args[3]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    gridRes=DEM.getCellSizeX();    eightGridRes=8 * gridRes;    if (DEM.getXYUnits().toLowerCase().contains("deg") || DEM.getProjection().toLowerCase().contains("geog")) {      double midLat=(DEM.getNorth() - DEM.getSouth()) / 2.0;      if (midLat <= 90 && midLat >= -90) {        zFactor=1.0 / (113200 * Math.cos(Math.toRadians(midLat)));      }    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("grey.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    output.setZUnits("degrees");    double[] N=new double[8];    double rad180=180 * degToRad;    double rad90=90 * degToRad;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          z=z * zFactor;          for (i=0; i < 8; i++) {            N[i]=DEM.getValue(row + dY[i],col + dX[i]);            if (N[i] != noData) {              N[i]=N[i] * zFactor;            } else {              N[i]=z;            }          }          fy=(N[6] - N[4] + 2 * (N[7] - N[3]) + N[0] - N[2]) / eightGridRes;          fx=(N[2] - N[4] + 2 * (N[1] - N[5]) + N[0] - N[6]) / eightGridRes;          if (fx != 0) {            z=180 - Math.atan(fy / fx) * radToDeg + 90 * (fx / Math.abs(fx));            z=Math.abs(z - azimuth);            if (z > 180) {              z=360 - z;            }            output.setValue(row,col,z);          } else {            output.setValue(row,col,-1);          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public Paragraph lookupParagraph(Text node){  return paragraphs.get(node);}  }
class C{  public void addTab(String title,Component component){  insertTab(title,null,component,null,pages.size());}  }
class C{  public final void compactify(){  m_Instances.trimToSize();}  }
class C{  private void drawDarkenSurroundingArea(@NonNull Canvas canvas){  maskCanvas.drawColor(Color.TRANSPARENT,PorterDuff.Mode.CLEAR);  maskCanvas.drawColor(getResources().getColor(R.color.surrounding_area));  maskCanvas.drawCircle(mCenterPointX,mCenterPointY,mRadius,mSurroundingAreaOverlayPaint);  canvas.drawBitmap(maskBitmap,0,0,null);}  }
class C{  public static List<Query> parseQueryStrings(SolrQueryRequest req,String[] queries) throws SyntaxError {  if (null == queries || 0 == queries.length)   return null;  List<Query> out=new ArrayList<>(queries.length);  for (  String q : queries) {    if (null != q && 0 != q.trim().length()) {      out.add(QParser.getParser(q,req).getQuery());    }  }  return out;}  }
class C{  public TabStyleScrollAction(KseFrame kseFrame){  super(kseFrame);  putValue(LONG_DESCRIPTION,res.getString("TabStyleScrollAction.statusbar"));  putValue(NAME,res.getString("TabStyleScrollAction.text"));  putValue(SHORT_DESCRIPTION,res.getString("TabStyleScrollAction.tooltip"));}  }
class C{  public void sectionSeparator(String label,GridBagConstraints gbc,int cRow){  srnPanel.add(new JLabel(label),gbc);  cRow++;  srnPanel.setMyNextItemRow(cRow);  gbc.gridy=srnPanel.getMyNextItemRow();  srnPanel.add(new JSeparator(JSeparator.HORIZONTAL),gbc);  gbc.gridx=1;  srnPanel.add(new JSeparator(JSeparator.HORIZONTAL),gbc);  gbc.gridx=2;  srnPanel.add(new JSeparator(JSeparator.HORIZONTAL),gbc);  cRow++;  srnPanel.setMyNextItemRow(cRow);  gbc.gridx=0;}  }
class C{  public Process executeAsync(final CommandLine command) throws IOException {  return executeAsync(command,(Map<String,String>)null);}  }
class C{  public boolean showPreviousNotification(){  int i=getSelectedIndex();  if (i != -1 && i > 0) {    model.setSelectedItem(model.getElementAt(i - 1));    return true;  }  return false;}  }
class C{  public ZebraJTree(javax.swing.tree.TreeNode root,boolean asksAllowsChildren){  super(root,asksAllowsChildren);}  }
class C{  public HttpAwareServerSocket(int port) throws IOException {  super(port);}  }
class C{  protected Object peekAtInfo(IJavaElement element){switch (element.getElementType()) {case IJavaElement.JAVA_MODEL:    return this.modelInfo;case IJavaElement.JAVA_PROJECT:  return this.projectCache.get(element);case IJavaElement.PACKAGE_FRAGMENT_ROOT:return this.rootCache.peek(element);case IJavaElement.PACKAGE_FRAGMENT:return this.pkgCache.peek(element);case IJavaElement.COMPILATION_UNIT:case IJavaElement.CLASS_FILE:return this.openableCache.peek(element);case IJavaElement.TYPE:Object result=this.jarTypeCache.peek(element);if (result != null) return result; else return this.childrenCache.get(element);default :return this.childrenCache.get(element);}}  }
class C{  public Spacing(Problem problem,NondominatedPopulation referenceSet){  super(problem,referenceSet);}  }
class C{  protected void parseParameter(AuthenticationHeader header) throws ParseException {  if (debug)   dbg_enter("parseParameter");  try {    NameValue nv=this.nameValue('=');    header.setParameter(nv);  }  finally {    if (debug)     dbg_leave("parseParameter");  }}  }
class C{  public Label mark(){  Label label=new Label();  mv.visitLabel(label);  return label;}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.N4_TYPE_DEFINITION___IS_EXTERNAL:    return isExternal();}return super.eInvoke(operationID,arguments);}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == TypeArgument.class) {switch (baseOperationID) {case TypeRefsPackage.TYPE_ARGUMENT___GET_TYPE_REF_AS_STRING:      return TypeRefsPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL___GET_TYPE_REF_AS_STRING;default :    return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == TypeRef.class) {switch (baseOperationID) {case TypeRefsPackage.TYPE_REF___GET_TYPE_REF_AS_STRING:  return TypeRefsPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL___GET_TYPE_REF_AS_STRING;case TypeRefsPackage.TYPE_REF___GET_TYPING_STRATEGY:return TypeRefsPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL___GET_TYPING_STRATEGY;case TypeRefsPackage.TYPE_REF___GET_STRUCTURAL_MEMBERS:return TypeRefsPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL___GET_STRUCTURAL_MEMBERS;default :return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == ParameterizedTypeRef.class) {switch (baseOperationID) {case TypeRefsPackage.PARAMETERIZED_TYPE_REF___GET_TYPING_STRATEGY:return TypeRefsPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL___GET_TYPING_STRATEGY;case TypeRefsPackage.PARAMETERIZED_TYPE_REF___GET_TYPE_REF_AS_STRING:return TypeRefsPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL___GET_TYPE_REF_AS_STRING;default :return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == StructuralTypeRef.class) {switch (baseOperationID) {case TypeRefsPackage.STRUCTURAL_TYPE_REF___GET_TYPING_STRATEGY:return TypeRefsPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL___GET_TYPING_STRATEGY;case TypeRefsPackage.STRUCTURAL_TYPE_REF___SET_TYPING_STRATEGY__TYPINGSTRATEGY:return TypeRefsPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL___SET_TYPING_STRATEGY__TYPINGSTRATEGY;case TypeRefsPackage.STRUCTURAL_TYPE_REF___GET_STRUCTURAL_MEMBERS:return TypeRefsPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL___GET_STRUCTURAL_MEMBERS;case TypeRefsPackage.STRUCTURAL_TYPE_REF___HAS_POSTPONED_SUBSTITUTION_FOR__TYPEVARIABLE:return TypeRefsPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL___HAS_POSTPONED_SUBSTITUTION_FOR__TYPEVARIABLE;default :return -1;}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  public boolean dispatchBatch(List events,boolean isRetry){  GatewaySenderStats statistics=this.eventProcessor.sender.getStatistics();  boolean success=false;  try {    if (logger.isDebugEnabled()) {      logger.debug("About to dispatch batch");    }    long start=statistics.startTime();    success=dispatchBatch(events);    statistics.endBatch(start,events.size());    if (logger.isDebugEnabled()) {      logger.debug("Done dispatching the batch");    }  } catch (  GatewaySenderException e) {  }catch (  CancelException e) {    this.eventProcessor.setIsStopped(true);    throw e;  }catch (  Exception e) {    logger.fatal(LocalizedMessage.create(LocalizedStrings.SerialGatewayEventCallbackDispatcher_STOPPING_THE_PROCESSOR_BECAUSE_THE_FOLLOWING_EXCEPTION_OCCURRED_WHILE_PROCESSING_A_BATCH),e);    this.eventProcessor.setIsStopped(true);  }  return success;}  }
class C{  public void testBug4860() throws Exception {  testBug4138();}  }
class C{  @Override public Enumeration<String> enumerateRequests(){  Vector<String> newVector=new Vector<String>(0);  if (m_buildThread != null) {    newVector.addElement("Stop");  }  if (m_buildThread == null && m_Clusterer != null) {    newVector.addElement("Save model");  }  if (m_buildThread == null) {    newVector.addElement("Load model");  }  return newVector.elements();}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  ElementCreator builder=registry.build(KEY).setContentRequired(false);}  }
class C{  public boolean isAverageInvoice(){  String cm=getCostingMethod();  return cm != null && cm.equals(COSTINGMETHOD_AverageInvoice) && COSTELEMENTTYPE_Material.equals(getCostElementType());}  }
class C{  public static Transparency opaque(){  return create(OPAQUE);}  }
class C{  private synchronized void sendNotificationsIfSwitchDiffers(IOFSwitch oldSw,IOFSwitch newSw){}  }
class C{  public static boolean simpleMatch(String pattern,String str){  if (pattern == null || str == null) {    return false;  }  int firstIndex=pattern.indexOf('*');  if (firstIndex == -1) {    return pattern.equals(str);  }  if (firstIndex == 0) {    if (pattern.length() == 1) {      return true;    }    int nextIndex=pattern.indexOf('*',firstIndex + 1);    if (nextIndex == -1) {      return str.endsWith(pattern.substring(1));    } else     if (nextIndex == 1) {      return simpleMatch(pattern.substring(1),str);    }    String part=pattern.substring(1,nextIndex);    int partIndex=str.indexOf(part);    while (partIndex != -1) {      if (simpleMatch(pattern.substring(nextIndex),str.substring(partIndex + part.length()))) {        return true;      }      partIndex=str.indexOf(part,partIndex + 1);    }    return false;  }  return (str.length() >= firstIndex && pattern.substring(0,firstIndex).equals(str.substring(0,firstIndex)) && simpleMatch(pattern.substring(firstIndex),str.substring(firstIndex)));}  }
class C{  public static void show(Context applicationContext,MediaNotificationInfo mediaNotificationInfo){synchronized (LOCK) {    if (sInstance == null) {      sInstance=new NotificationMediaPlaybackControls(applicationContext);    }  }  sInstance.showNotification(mediaNotificationInfo);}  }
class C{  public Object decode(Object pObject) throws DecoderException {  if (pObject == null) {    return null;  } else   if (pObject instanceof byte[]) {    return decode((byte[])pObject);  } else   if (pObject instanceof String) {    return decode((String)pObject);  } else {    throw new DecoderException("Objects of type " + pObject.getClass().getName() + " cannot be quoted-printable decoded");  }}  }
class C{  private XMLAttribute findAttribute(String name,String namespace){  Iterator enm=this.attributes.iterator();  while (enm.hasNext()) {    XMLAttribute attr=(XMLAttribute)enm.next();    boolean found=attr.getName().equals(name);    if (namespace == null) {      found&=(attr.getNamespace() == null);    } else {      found&=namespace.equals(attr.getNamespace());    }    if (found) {      return attr;    }  }  return null;}  }
class C{  public void addPropertyType(String propertyType){  propertyTypes.add(propertyType);}  }
class C{  public CheckedListIterator(ListIterator<E> i,Class<E> type){  this.i=i;  this.type=type;}  }
class C{  public void handleEvent(Event evt){  listener.handleEvent(EventSupport.getUltimateOriginalEvent(evt));}  }
class C{  public static SemUpdater serializableInstance(){  return new SemUpdater(SemIm.serializableInstance());}  }
class C{  public ListBuffer<A> appendList(ListBuffer<A> xs){  return appendList(xs.toList());}  }
class C{  public T clientId(String value){  setString(CLIENT_ID,value);  return (T)this;}  }
class C{  public TreeMap<Long,Collection<MockNode>> build(){  return locs;}  }
class C{  public void dump(Writer out) throws IOException {  out.write(rootElement.getCanonicalForm());}  }
class C{  public int byteValue(int index) throws IOException {  ReadableFontData data=this.internalReadData();  if (data == null) {    throw new IOException("No font data for the table.");  }  return data.readByte(index);}  }
class C{  @SuppressWarnings("deprecation") static HttpUriRequest createHttpRequest(Request<?> request,Map<String,String> additionalHeaders) throws AuthFailureError {switch (request.getMethod()) {case Method.DEPRECATED_GET_OR_POST:{      byte[] postBody=request.getPostBody();      if (postBody != null) {        HttpPost postRequest=new HttpPost(request.getUrl());        postRequest.addHeader(HEADER_CONTENT_TYPE,request.getPostBodyContentType());        HttpEntity entity;        entity=new ByteArrayEntity(postBody);        postRequest.setEntity(entity);        return postRequest;      } else {        return new HttpGet(request.getUrl());      }    }case Method.GET:  return new HttpGet(request.getUrl());case Method.DELETE:return new HttpDelete(request.getUrl());case Method.POST:{HttpPost postRequest=new HttpPost(request.getUrl());postRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(postRequest,request);return postRequest;}case Method.PUT:{HttpPut putRequest=new HttpPut(request.getUrl());putRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(putRequest,request);return putRequest;}case Method.HEAD:return new HttpHead(request.getUrl());case Method.OPTIONS:return new HttpOptions(request.getUrl());case Method.TRACE:return new HttpTrace(request.getUrl());case Method.PATCH:{HttpPatch patchRequest=new HttpPatch(request.getUrl());patchRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(patchRequest,request);return patchRequest;}default :throw new IllegalStateException("Unknown request method.");}}  }
class C{  private boolean removeLinkFromStructure(Map<NodePortTuple,Set<Link>> s,Link l){  boolean result1=false, result2=false;  NodePortTuple n1=new NodePortTuple(l.getSrc(),l.getSrcPort());  NodePortTuple n2=new NodePortTuple(l.getDst(),l.getDstPort());  if (s.get(n1) != null) {    result1=s.get(n1).remove(l);    if (s.get(n1).isEmpty())     s.remove(n1);  }  if (s.get(n2) != null) {    result2=s.get(n2).remove(l);    if (s.get(n2).isEmpty())     s.remove(n2);  }  return result1 || result2;}  }
class C{  public static Map<String,Map<String,Double>> flattenFeature(FeatureVector featureVector){  return flattenFeatureStreamToMap(flattenFeatureAsStream(featureVector));}  }
class C{  public static Date convertToDate(Object obj){  if (obj == null)   return null;  if (obj instanceof Date)   return (Date)obj;  if (obj instanceof String) {    StringTokenizer st=new StringTokenizer((String)obj," -/:,.+");    String s1="";    if (!st.hasMoreTokens())     return null;    s1=st.nextToken();    if (s1.length() == 4 && Character.isDigit(s1.charAt(0)))     return getYYYYMMDD(st,s1);    if (daysTable.containsKey(s1)) {      if (!st.hasMoreTokens())       return null;      s1=st.nextToken();    }    if (monthsTable.containsKey(s1))     return getMMDDYYYY(st,s1);    if (Character.isDigit(s1.charAt(0)))     return getDDMMYYYY(st,s1);    return null;  }  throw new RuntimeException("Primitive: Can not convert " + obj.getClass().getName() + " to int");}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  try {    if (hasFallbackChildren()) {      executeFallbacks(transformer);    } else {    }  } catch (  TransformerException e) {    transformer.getErrorListener().fatalError(e);  }}  }
class C{  public static int nextOid(int l,long[] index,int start) throws SnmpStatusException {  int result=start + l;  if (result > index.length) {    throw new SnmpStatusException(SnmpStatusException.noSuchName);  }  return result;}  }
class C{  public Enumeration<TechnicalInformation> additional(){  return m_Additional.elements();}  }
class C{  @Override public void processHeadlessEvents(List<EventObject> headless){  if (!GraphicsEnvironment.isHeadless()) {    m_processingHeadlessEvents=true;    for (    EventObject e : headless) {      if (e instanceof ThresholdDataEvent) {        acceptDataSet((ThresholdDataEvent)e);      } else       if (e instanceof VisualizableErrorEvent) {        acceptDataSet((VisualizableErrorEvent)e);      }    }  }  m_processingHeadlessEvents=false;}  }
class C{  public final static boolean isNullOrEmptyOrZero(Object object){  return (isNullOrEmpty(object,true));}  }
class C{  public int remove(float key){  int prev=0;  int index=index(key);  if (index >= 0) {    prev=_values[index];    removeAt(index);  }  return prev;}  }
class C{  private void startAuthenticationActivity(){  Intent intent=new Intent(ServerDetails.this,AuthenticationActivity.class);  intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  startActivity(intent);}  }
class C{  public SupplementaryCharacterData(int[] table){  dataTable=table;}  }
class C{  protected CCMenu(CCMenuItem... items){  isTouchEnabled_=true;  CGSize s=CCDirector.sharedDirector().winSize();  setRelativeAnchorPoint(false);  setAnchorPoint(0.5f,0.5f);  setContentSize(s);  setPosition(CGPoint.ccp(s.width / 2,s.height / 2));  if (items != null) {    for (int i=0; i < items.length; i++) {      CCMenuItem item=items[i];      addChild(item,i);    }  }  selectedItem=null;  state=MenuState.kMenuStateWaiting;}  }
class C{  public void requestAfterExplanation(@NonNull String permissionName){  if (isPermissionDeclined(permissionName)) {    context.requestPermissions(new String[]{permissionName},REQUEST_PERMISSIONS);  } else {    permissionCallback.onPermissionPreGranted(permissionName);  }}  }
class C{  protected int nextInEntityValue() throws IOException, XMLException {switch (current) {case '&':    return readReference();case '%':  int t=nextChar();readName(LexicalUnits.PARAMETER_ENTITY_REFERENCE);if (current != ';') {throw createXMLException("invalid.parameter.entity");}nextChar();return t;default :while (current != -1 && current != attrDelimiter && current != '&' && current != '%') {nextChar();}switch (current) {case -1:throw createXMLException("unexpected.eof");case '\'':case '"':nextChar();context=ENTITY_CONTEXT;return LexicalUnits.STRING;}return LexicalUnits.FIRST_ATTRIBUTE_FRAGMENT;}}  }
class C{  public void removeAll(Collection<T> items){  mItems.removeAll(items);  notifyDataSetChanged();}  }
class C{  public static boolean isEmpty(File path,boolean ignoreEmpty){  boolean empty=true;  if (path.isDirectory()) {    File[] files=path.listFiles();    for (int i=0; ((i < files.length) && empty); i++) {      if (files[i].isDirectory()) {        empty=isEmpty(files[i],ignoreEmpty);      } else {        empty=false;      }    }  } else {    empty=false;  }  return empty;}  }
class C{  public static double[] normalize(double[] x){  double[] val=new double[x.length];  double sumsq=0;  for (int i=0; i < x.length; i++)   sumsq+=x[i] * x[i];  sumsq=Math.sqrt(sumsq);  for (int i=0; i < x.length; i++)   val[i]=x[i] / sumsq;  return val;}  }
class C{  @Override protected void withBindHolder(SingleItemCommonLayout holder,String data,int position){  holder.textViewSample.setText(data);}  }
class C{  @Override public Enumeration<String> enumerateRequests(){  Vector<String> newVector=new Vector<String>(0);  newVector.addElement("Show chart");  return newVector.elements();}  }
class C{  public Cube loadCube(Column column,int cubeY){  Cube cube=new Cube(column,cubeY);  column.addCube(cube);  this.cubeMap.put(cube);  return cube;}  }
class C{  public static byte[] randomBytes(byte len){  char u8=convertByte2Uint8(len);  return randomBytes(u8);}  }
class C{  public void hideEmpty(){  if (viewLoading == null) {    throw new NullPointerException("Unable to access Empty View, check if the empty view was initialized.");  } else {    isEmptyViewBeingShown=false;    changeViewsVisibility();    setViewVisibility(viewEmpty,View.GONE);  }}  }
class C{  protected void updateChecksum(){  checksums[0]=calculateChecksum();}  }
class C{  public void requestTransitionStart(LayoutTransition transition){  if (mPendingTransitions == null || !mPendingTransitions.contains(transition)) {    if (mPendingTransitions == null) {      mPendingTransitions=new ArrayList<LayoutTransition>();    }    mPendingTransitions.add(transition);  }}  }
class C{  private boolean allocatePaySelection(){  MAllocationHdr alloc=new MAllocationHdr(getCtx(),false,getDateTrx(),getC_Currency_ID(),Msg.translate(getCtx(),"C_Payment_ID") + ": " + getDocumentNo()+ " [n]",get_TrxName());  alloc.setAD_Org_ID(getAD_Org_ID());  alloc.setDateAcct(getDateAcct());  String sql="SELECT psc.C_BPartner_ID, psl.C_Invoice_ID, psl.IsSOTrx, " + " psl.PayAmt, psl.DiscountAmt, psl.DifferenceAmt, psl.OpenAmt " + "FROM C_PaySelectionLine psl"+ " INNER JOIN C_PaySelectionCheck psc ON (psl.C_PaySelectionCheck_ID=psc.C_PaySelectionCheck_ID) "+ "WHERE psc.C_Payment_ID=?";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,get_TrxName());    pstmt.setInt(1,getC_Payment_ID());    rs=pstmt.executeQuery();    while (rs.next()) {      int C_BPartner_ID=rs.getInt(1);      int C_Invoice_ID=rs.getInt(2);      if (C_BPartner_ID == 0 && C_Invoice_ID == 0)       continue;      boolean isSOTrx="Y".equals(rs.getString(3));      BigDecimal PayAmt=rs.getBigDecimal(4);      BigDecimal DiscountAmt=rs.getBigDecimal(5);      BigDecimal WriteOffAmt=Env.ZERO;      BigDecimal OpenAmt=rs.getBigDecimal(7);      BigDecimal OverUnderAmt=OpenAmt.subtract(PayAmt).subtract(DiscountAmt).subtract(WriteOffAmt);      if (alloc.get_ID() == 0 && !alloc.save(get_TrxName())) {        log.log(Level.SEVERE,"Could not create Allocation Hdr");        rs.close();        pstmt.close();        return false;      }      MAllocationLine aLine=null;      if (isSOTrx)       aLine=new MAllocationLine(alloc,PayAmt,DiscountAmt,WriteOffAmt,OverUnderAmt); else       aLine=new MAllocationLine(alloc,PayAmt.negate(),DiscountAmt.negate(),WriteOffAmt.negate(),OverUnderAmt.negate());      aLine.setDocInfo(C_BPartner_ID,0,C_Invoice_ID);      aLine.setC_Payment_ID(getC_Payment_ID());      if (!aLine.save(get_TrxName()))       log.log(Level.SEVERE,"Could not create Allocation Line");    }  } catch (  Exception e) {    log.log(Level.SEVERE,"allocatePaySelection",e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  boolean ok=true;  if (alloc.get_ID() == 0) {    log.fine("No Allocation created - C_Payment_ID=" + getC_Payment_ID());    ok=false;  } else {    alloc.processIt(DocAction.ACTION_Complete);    ok=alloc.save(get_TrxName());    m_processMsg="@C_AllocationHdr_ID@: " + alloc.getDocumentNo();  }  return ok;}  }
class C{  public boolean isExclusive(){  return exclusive;}  }
class C{  public ImageIcon(String filename,String description){  image=Toolkit.getDefaultToolkit().getImage(filename);  if (image == null) {    return;  }  this.filename=filename;  this.description=description;  loadImage(image);}  }
class C{  protected Point divisible(Point p){  Rectangle bounds=ctx.getWorldBounds();  double newX=boundX(divisible(p.getX()),bounds);  double newY=boundY(divisible(p.getY()),bounds);  p.reset(newX,newY);  return p;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static Monitor startNano(String label){  return factory.startNano(label);}  }
class C{  public Entry createRawEntry(User user,Entry source,String type,String id,String quotation,String note,Long modTime,Long createTime,boolean isPublic,boolean isAdmin,Errors errors){  return createEntry(user,source,type,id,quotation,note,modTime,createTime,null,null,false,false,isPublic,true,true,isAdmin,errors);}  }
class C{  private int compareVersions(String v1,String v2) throws SAXException {  String[] p1=v1.split("\\.");  String[] p2=v2.split("\\.");  try {    int n=p1.length;    for (int i=0; i < n; i++) {      int n1=Integer.parseInt(p1[i]);      int n2=Integer.parseInt(p2[i]);      if (n1 < n2) {        return -1;      } else       if (n1 > n2) {        return 1;      }    }  } catch (  NumberFormatException e) {    throw new SAXException(MessageFormat.format(Messages.getString("exception.persist.invalidVersionNumber"),v1,v2),e);  }  return 0;}  }
class C{  public static double NHmaxFitness(boolean useTrainingData,GEPIndividual ind){  return (useTrainingData ? GEPDependentVariable.trainingData.getDependentVariableValues().length : GEPDependentVariable.testingData.getDependentVariableValues().length);}  }
class C{  public OpenIDConnect(IHttpRequestResponse message,String protocol,IBurpExtenderCallbacks callbacks){  super(message,protocol,callbacks);  super.setToken(findToken());  super.setProtocolflowID(analyseProtocol());  add(this,getProtocolflowID());}  }
class C{  public JDialog createDialog(Component parentComponent,String title) throws HeadlessException {  int style=styleFromMessageType(getMessageType());  return createDialog(parentComponent,title,style);}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public static <T extends GeneratedMessage>byte[] encode(List<T> items) throws IOException {  ByteArrayOutputStream bytes=new ByteArrayOutputStream();  CodedOutputStream stream=CodedOutputStream.newInstance(bytes);  for (  T item : items) {    byte[] encoded=item.toByteArray();    stream.writeRawVarint32(encoded.length);    stream.writeRawBytes(encoded);  }  stream.flush();  return bytes.toByteArray();}  }
class C{  public void reset(EvolutionState state,int thread){  for (int i=0; i < chromosomes.length; i++)   chromosomes[i].reset(state,thread);  evaluated=false;  chromosomesParsed=false;}  }
class C{  public boolean isArrowFunction(){  return true;}  }
class C{  public void ensureCapacity(int minCapacity){  this.elements.ensureCapacity(minCapacity);}  }
class C{  public static void logError(ILog log,Throwable exception){  logError(log,exception,"Unexpected Exception");}  }
class C{  protected int writeObject(STWriter out,InstanceScope scope,Object o,String[] options){  int n=0;  if (o == null) {    if (options != null && options[Option.NULL.ordinal()] != null) {      o=options[Option.NULL.ordinal()];    } else     return 0;  }  if (o instanceof ST) {    scope=new InstanceScope(scope,(ST)o);    if (options != null && options[Option.WRAP.ordinal()] != null) {      try {        out.writeWrap(options[Option.WRAP.ordinal()]);      } catch (      IOException ioe) {        errMgr.IOError(scope.st,ErrorType.WRITE_IO_ERROR,ioe);      }    }    n=exec(out,scope);  } else {    o=convertAnythingIteratableToIterator(scope,o);    try {      if (o instanceof Iterator)       n=writeIterator(out,scope,o,options); else       n=writePOJO(out,scope,o,options);    } catch (    IOException ioe) {      errMgr.IOError(scope.st,ErrorType.WRITE_IO_ERROR,ioe,o);    }  }  return n;}  }
class C{  public TFloatDoubleHashMap(TFloatHashingStrategy strategy){  super(strategy);}  }
class C{  public GridConsistentHash(){  this(null,null);}  }
class C{  public KRBSafeBody(DerValue encoding) throws Asn1Exception, IOException {  DerValue der;  if (encoding.getTag() != DerValue.tag_Sequence) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  der=encoding.getData().getDerValue();  if ((der.getTag() & 0x1F) == 0x00) {    userData=der.getData().getOctetString();  } else   throw new Asn1Exception(Krb5.ASN1_BAD_ID);  timestamp=KerberosTime.parse(encoding.getData(),(byte)0x01,true);  if ((encoding.getData().peekByte() & 0x1F) == 0x02) {    der=encoding.getData().getDerValue();    usec=new Integer(der.getData().getBigInteger().intValue());  }  if ((encoding.getData().peekByte() & 0x1F) == 0x03) {    der=encoding.getData().getDerValue();    seqNumber=new Integer(der.getData().getBigInteger().intValue());  }  sAddress=HostAddress.parse(encoding.getData(),(byte)0x04,false);  if (encoding.getData().available() > 0)   rAddress=HostAddress.parse(encoding.getData(),(byte)0x05,true);  if (encoding.getData().available() > 0)   throw new Asn1Exception(Krb5.ASN1_BAD_ID);}  }
class C{  CanMessage createPacket(String s){  CanMessage m;  CbusAddress a=new CbusAddress(s);  if (a.check()) {    m=a.makeMessage(tc.getCanid());  } else {    m=new CanMessage(tc.getCanid());    if (s.charAt(0) == '[') {      m.setExtended(true);      int i=s.indexOf(']');      String h=s.substring(1,i);      m.setHeader(Integer.parseInt(h,16));      s=s.substring(i + 1,s.length());    } else     if (s.charAt(0) == '(') {      int i=s.indexOf(')');      String h=s.substring(1,i);      m.setHeader(Integer.parseInt(h,16));      s=s.substring(i + 1,s.length());    }    byte b[]=StringUtil.bytesFromHexString(s);    m.setNumDataElements(b.length);    for (int i=0; i < b.length; i++) {      m.setElement(i,b[i] & 0xff);    }  }  return m;}  }
class C{  public void visitLineNumber(int line,Label start){  if (mv != null) {    mv.visitLineNumber(line,start);  }}  }
class C{  public static void filterJavaFiles(ArrayList<File> list){  for (int i=0; i < list.size(); i++) {    String str=list.get(i).getName();    boolean isjavaCode=str.substring(str.lastIndexOf('.')).equals(".java");    if (!isjavaCode)     list.remove(i);  }}  }
class C{  public InternalError(@Nullable String message){  super(message);}  }
class C{  private boolean compareGenericsWithBound(final ClassNode classNode,final ClassNode bound){  if (classNode == null)   return false;  if (!bound.isUsingGenerics() || (classNode.getGenericsTypes() == null && classNode.redirect().getGenericsTypes() != null)) {    return true;  }  if (!classNode.equals(bound)) {    if (bound.isInterface()) {      Set<ClassNode> interfaces=classNode.getAllInterfaces();      for (      ClassNode anInterface : interfaces) {        if (anInterface.equals(bound)) {          ClassNode node=GenericsUtils.parameterizeType(classNode,anInterface);          return compareGenericsWithBound(node,bound);        }      }    }    if (bound instanceof WideningCategories.LowestUpperBoundClassNode) {      boolean success=compareGenericsWithBound(classNode,bound.getSuperClass());      if (success) {        ClassNode[] interfaces=bound.getInterfaces();        for (        ClassNode anInterface : interfaces) {          success&=compareGenericsWithBound(classNode,anInterface);          if (!success)           break;        }        if (success)         return true;      }    }    return compareGenericsWithBound(getParameterizedSuperClass(classNode),bound);  }  GenericsType[] cnTypes=classNode.getGenericsTypes();  if (cnTypes == null && classNode.isRedirectNode())   cnTypes=classNode.redirect().getGenericsTypes();  if (cnTypes == null) {    return true;  }  GenericsType[] redirectBoundGenericTypes=bound.redirect().getGenericsTypes();  Map<String,GenericsType> classNodePlaceholders=GenericsUtils.extractPlaceholders(classNode);  Map<String,GenericsType> boundPlaceHolders=GenericsUtils.extractPlaceholders(bound);  boolean match=true;  for (int i=0; redirectBoundGenericTypes != null && i < redirectBoundGenericTypes.length && match; i++) {    GenericsType redirectBoundType=redirectBoundGenericTypes[i];    GenericsType classNodeType=cnTypes[i];    if (classNodeType.isPlaceholder()) {      String name=classNodeType.getName();      if (redirectBoundType.isPlaceholder()) {        match=name.equals(redirectBoundType.getName());        if (!match) {          GenericsType genericsType=boundPlaceHolders.get(redirectBoundType.getName());          match=false;          if (genericsType != null) {            if (genericsType.isPlaceholder()) {              match=true;            } else             if (genericsType.isWildcard()) {              if (genericsType.getUpperBounds() != null) {                for (                ClassNode up : genericsType.getUpperBounds()) {                  match|=redirectBoundType.isCompatibleWith(up);                }                if (genericsType.getLowerBound() != null) {                  match|=redirectBoundType.isCompatibleWith(genericsType.getLowerBound());                }              }            }          }        }      } else {        if (classNodePlaceholders.containsKey(name))         classNodeType=classNodePlaceholders.get(name);        match=classNodeType.isCompatibleWith(redirectBoundType.getType());      }    } else {      if (redirectBoundType.isPlaceholder()) {        if (classNodeType.isPlaceholder()) {          match=classNodeType.getName().equals(redirectBoundType.getName());        } else {          String name=redirectBoundType.getName();          if (boundPlaceHolders.containsKey(name)) {            redirectBoundType=boundPlaceHolders.get(name);            boolean wildcard=redirectBoundType.isWildcard();            boolean placeholder=redirectBoundType.isPlaceholder();            if (placeholder || wildcard) {              if (wildcard) {                if (redirectBoundType.lowerBound != null) {                  GenericsType gt=new GenericsType(redirectBoundType.lowerBound);                  if (gt.isPlaceholder()) {                    if (classNodePlaceholders.containsKey(gt.getName())) {                      gt=classNodePlaceholders.get(gt.getName());                    }                  }                  match=implementsInterfaceOrIsSubclassOf(gt.getType(),classNodeType.getType());                }                if (match && redirectBoundType.upperBounds != null) {                  for (                  ClassNode upperBound : redirectBoundType.upperBounds) {                    GenericsType gt=new GenericsType(upperBound);                    if (gt.isPlaceholder()) {                      if (classNodePlaceholders.containsKey(gt.getName())) {                        gt=classNodePlaceholders.get(gt.getName());                      }                    }                    match=implementsInterfaceOrIsSubclassOf(classNodeType.getType(),gt.getType()) || classNodeType.isCompatibleWith(gt.getType());                    if (!match)                     break;                  }                }                return match;              } else               if (classNodePlaceholders.containsKey(name)) {                redirectBoundType=classNodePlaceholders.get(name);              }            }          }          match=redirectBoundType.isCompatibleWith(classNodeType.getType());        }      } else {        match=redirectBoundType.isWildcard() || classNodeType.isCompatibleWith(redirectBoundType.getType());      }    }  }  if (!match)   return false;  return true;}  }
class C{  public final void abolish(final JIPTerm term){synchronized (m_globalDB) {    m_globalDB.abolish(term.getTerm());  }}  }
class C{  private static synchronized void initCerts(){  if (CA1 != null) {    return;  }  try {    CA1=TestKeyStore.getClient().getRootCertificate("RSA");    CA2=TestKeyStore.getClientCA2().getRootCertificate("RSA");    PRIVATE=TestKeyStore.getServer().getPrivateKey("RSA","RSA");    CHAIN=(X509Certificate[])PRIVATE.getCertificateChain();    CA3_WITH_CA1_SUBJECT=new TestKeyStore.Builder().aliasPrefix("unused").subject(CA1.getSubjectX500Principal()).ca(true).build().getRootCertificate("RSA");    ALIAS_SYSTEM_CA1=alias(false,CA1,0);    ALIAS_SYSTEM_CA2=alias(false,CA2,0);    ALIAS_USER_CA1=alias(true,CA1,0);    ALIAS_USER_CA2=alias(true,CA2,0);    ALIAS_SYSTEM_CHAIN0=alias(false,getChain()[0],0);    ALIAS_SYSTEM_CHAIN1=alias(false,getChain()[1],0);    ALIAS_SYSTEM_CHAIN2=alias(false,getChain()[2],0);    ALIAS_USER_CHAIN0=alias(true,getChain()[0],0);    ALIAS_USER_CHAIN1=alias(true,getChain()[1],0);    ALIAS_USER_CHAIN2=alias(true,getChain()[2],0);    ALIAS_SYSTEM_CA3=alias(false,CA3_WITH_CA1_SUBJECT,0);    ALIAS_SYSTEM_CA3_COLLISION=alias(false,CA3_WITH_CA1_SUBJECT,1);    ALIAS_USER_CA3=alias(true,CA3_WITH_CA1_SUBJECT,0);    ALIAS_USER_CA3_COLLISION=alias(true,CA3_WITH_CA1_SUBJECT,1);  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  private ProtectionSet createProtectionSet(ProtectionSystem rpSystem,CGRequestParams params,Long cgId) throws InternalException {  ProtectionSet protectionSet=new ProtectionSet();  protectionSet.setProtectionSystem(rpSystem.getId());  protectionSet.setLabel(params.getCgName());  protectionSet.setNativeGuid(rpSystem.getNativeGuid() + Constants.PLUS + cgId);  protectionSet.setProtectionStatus(ProtectionStatus.ENABLED.toString());  protectionSet.setProtectionId(cgId.toString());  protectionSet.setId(URIUtil.createId(ProtectionSet.class));  _dbClient.createObject(protectionSet);  protectionSet=updateProtectionSet(protectionSet,params);  return protectionSet;}  }
class C{  public long longValue(){  return value;}  }
class C{  private static boolean isPngHeader(final byte[] imageHeaderBytes,final int headerSize){  return headerSize >= PNG_HEADER.length && ImageFormatCheckerUtils.startsWithPattern(imageHeaderBytes,PNG_HEADER);}  }
class C{  public void addName(String name){  _logHandlerConfig.addName(name);  _loggerConfig.addName(name);}  }
class C{  private void nodeSelected(final IProjectTreeNode node){  final Component component=node.getComponent();  m_componentPanel.removeAll();  if (component != null) {    m_componentPanel.add(component);  }  m_componentPanel.updateUI();  m_window.setJMenuBar(node.getMainMenu());  m_window.getJMenuBar().updateUI();}  }
class C{  public static String array2bin(final byte[] array){  return byteArray2String(array,"0b",", ",true,2);}  }
class C{  private void saveUiTabContext(ActionBar.Tab aTabToUpdate){  Bundle tabTag=(Bundle)aTabToUpdate.getTag();  aTabToUpdate.setTag(tabTag);}  }
class C{  public static int readSingleByte(InputStream in) throws IOException {  byte[] buffer=new byte[1];  int result=in.read(buffer,0,1);  return (result != -1) ? buffer[0] & 0xff : -1;}  }
class C{  public Spanned[] history(){  int i=0;  Spanned[] array=new Spanned[history.size()];  for (  String s : history) {    if (s != null) {      array[i]=Html.fromHtml(s);      i++;    }  }  return array;}  }
class C{  private static String positionToXml(final long reqTime,final double lng,final double lat,final double alt,final double head,final double speed,final double acc,final String type){  return String.format(POSITION_XML,reqTime,lng,lat,alt,head,speed,acc,type);}  }
class C{  public boolean onKeyUp(int keyCode,KeyEvent event){  if (keyCode == KeyEvent.KEYCODE_BACK && mSlidingMenu.isMenuShowing()) {    showContent();    return true;  }  return false;}  }
class C{  public AlgIdDSA(byte p[],byte q[],byte g[]) throws IOException {  this(new BigInteger(1,p),new BigInteger(1,q),new BigInteger(1,g));}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  private void loadIgnoreFile(final String srcFolder){  ignoreFile=IgnoreFile.load(srcFolder);  if (ignoreFile == null) {    loadDefaultExcludePattern(srcFolder);  }}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.EXTRA_CODE___EXTRA_CODE_1:    setExtraCode_1((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public void testArabicSort(){  assertQ("Collated Sort: ",req("fl","id","q","sort_ar:[\u0698 TO \u0633\u0633]","sort","sort_ar asc"),"//*[@numFound='2']","//result/doc[1]/int[@name='id'][.=12]","//result/doc[2]/int[@name='id'][.=1]");}  }
