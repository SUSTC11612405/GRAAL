class C{  public static boolean reflectionEquals(final Object lhs,final Object rhs,final String... excludeFields){  return reflectionEquals(lhs,rhs,false,null,excludeFields);}  }
class C{  public void clearParameters(){synchronized (m_reentryGuard) {    VariableStack varstack=new VariableStack();    m_xcontext.setVarStack(varstack);    m_userParams=null;  }}  }
class C{  private Map<String,StellarFunctionInfo> _getFunctions(){  lock.readLock().lock();  try {    if (isInitialized.get()) {      return functions;    }  }  finally {    lock.readLock().unlock();  }  lock.writeLock().lock();  try {    if (!isInitialized.get()) {      loadFunctions(functions);      isInitialized.set(true);    }    return functions;  }  finally {    lock.writeLock().unlock();  }}  }
class C{  public static boolean attributeContains(MediaDescription mediaDesc,String sdpAttribute,String sdpAttributeValue,boolean supportAllValuesCharacter){  if (mediaDesc == null || StringUtils.isEmpty(sdpAttribute) || StringUtils.isEmpty(sdpAttributeValue)) {    return false;  }  MediaAttribute mediaSdpAttrib=mediaDesc.getMediaAttribute(sdpAttribute);  if (mediaSdpAttrib != null && !StringUtils.isEmpty(mediaSdpAttrib.getValue())) {    if (supportAllValuesCharacter) {      if ("*".equals(mediaSdpAttrib.getValue().trim())) {        return true;      }    }    String[] attribValues=mediaSdpAttrib.getValue().split("[\\s]+");    for (int i=0; i < attribValues.length; i++) {      if (sdpAttributeValue.equalsIgnoreCase(attribValues[i].trim())) {        return true;      }    }  }  return false;}  }
class C{  public void addArgument(float floatNumber){  byte[] data=ByteBuffer.allocate(4).putFloat(floatNumber).array();  arguments.add(new byte[]{data[3],data[2],data[1],data[0]});}  }
class C{  @Override public boolean equals(Object ox){  try {    Level lx=(Level)ox;    return (lx.value == this.value);  } catch (  Exception ex) {    return false;  }}  }
class C{  public void addActionListener(ActionListener actionListener){  this.listenerList.add(ActionListener.class,actionListener);}  }
class C{  void difference(IntSet dest,IntSet compared){  int i=0;  int j=0;  while (i < size && j < compared.size) {    int a=elements[i];    int b=compared.elements[j];    if (a < b) {      dest.addInt(a);      i++;    } else     if (a > b) {      j++;    } else {      i++;      j++;    }  }  while (i < size) {    dest.addInt(elements[i]);    i++;  }}  }
class C{  @Override @Inline public ObjectReference traceObject(ObjectReference object,boolean root){  if (object.isNull())   return object;  if (Space.isInSpace(GenRC.NURSERY,object)) {    object=GenRC.nurserySpace.traceObject(this,object,GenRC.ALLOC_RC);  } else   if (!GenRC.isRCObject(object)) {    return object;  }  if (root) {    rootBuffer.push(object);  } else {    RCHeader.incRC(object);  }  return object;}  }
class C{  protected ElementPosition_Impl(){  super();}  }
class C{  @SuppressWarnings("unchecked") public static IOException cast(IgniteCheckedException e,@Nullable String path){  assert e != null;  if (e.hasCause(IOException.class))   return e.getCause(IOException.class); else   if (e.hasCause(IgfsPathNotFoundException.class))   return new FileNotFoundException(path); else   if (e.hasCause(IgfsParentNotDirectoryException.class))   return new ParentNotDirectoryException(path); else   if (path != null && e.hasCause(IgfsDirectoryNotEmptyException.class))   return new PathIsNotEmptyDirectoryException(path); else   if (path != null && e.hasCause(IgfsPathAlreadyExistsException.class))   return new PathExistsException(path); else {    String msg=e.getMessage();    return msg == null ? new IOException(e) : new IOException(msg,e);  }}  }
class C{  public PrimaryKeyChange(Table table,Column[] oldPrimaryKeyColumns,Column[] newPrimaryKeyColumns){  super(table);  _oldPrimaryKeyColumns=oldPrimaryKeyColumns;  _newPrimaryKeyColumns=newPrimaryKeyColumns;}  }
class C{  public BoundaryInfo(List<? extends Position> positions){  this.positions=positions;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static ObjectAnimator ofObject(Object target,String propertyName,TypeEvaluator evaluator,Object... values){  ObjectAnimator anim=new ObjectAnimator(target,propertyName);  anim.setObjectValues(values);  anim.setEvaluator(evaluator);  return anim;}  }
class C{  protected ModelImpl(){  super();}  }
class C{  public CopyObjectResult copyObject(CopyObjectRequest copyObjectRequest) throws OSSException, ClientException {  assertParameterNotNull(copyObjectRequest,"copyObjectRequest");  Map<String,String> headers=new HashMap<String,String>();  populateCopyObjectHeaders(copyObjectRequest,headers);  RequestMessage request=new OSSRequestMessageBuilder(getInnerClient()).setEndpoint(getEndpoint()).setMethod(HttpMethod.PUT).setBucket(copyObjectRequest.getDestinationBucketName()).setKey(copyObjectRequest.getDestinationKey()).setHeaders(headers).setOriginalRequest(copyObjectRequest).build();  return doOperation(request,copyObjectResponseParser,copyObjectRequest.getDestinationBucketName(),copyObjectRequest.getDestinationKey(),true);}  }
class C{  public void skippedEntity(StylesheetHandler handler,String name) throws org.xml.sax.SAXException {}  }
class C{  public final AC shrink(float w){  return shrink(w,curIx);}  }
class C{  @Override public String toString(){  return "code \"" + value + "\"";}  }
class C{  public E poll(long timeout,TimeUnit unit) throws InterruptedException {  long nanos=unit.toNanos(timeout);  final ReentrantLock lock=this.lock;  lock.lockInterruptibly();  long t=now();  TenantQueue.Item item=null;  try {    for (; ; ) {      TenantQueue q=nextQueue(t);      if (q == null) {        if (nanos <= 0)         return null; else         nanos=available.awaitNanos(nanos);      } else {        long delay=q.next - t;        if (delay <= 0) {          item=q.poll(t);          return item == null ? null : item.element;        }        if (nanos <= 0)         return null;        if (nanos < delay || leader != null)         nanos=available.awaitNanos(nanos); else {          Thread thisThread=Thread.currentThread();          leader=thisThread;          try {            long timeLeft=available.awaitNanos(delay);            nanos-=delay - timeLeft;          }  finally {            if (leader == thisThread)             leader=null;          }        }      }      t=System.nanoTime();    }  }  finally {    if (leader == null && hasNext())     available.signal();    lock.unlock();    done(item,t);  }}  }
class C{  private Map<SimpleString,Map<Long,Map<Long,List<PageCountPending>>>> generateMapsOnPendingCount(Map<Long,Queue> queues,List<PageCountPending> pendingNonTXPageCounter,Transaction txRecoverCounter) throws Exception {  Map<SimpleString,Map<Long,Map<Long,List<PageCountPending>>>> perAddressMap=new HashMap<>();  for (  PageCountPending pgCount : pendingNonTXPageCounter) {    long queueID=pgCount.getQueueID();    long pageID=pgCount.getPageID();    Queue queue=queues.get(queueID);    if (queue == null) {      logger.debug("removing pending page counter id = " + pgCount.getID() + " as queueID="+ pgCount.getID()+ " no longer exists");      storageManager.deletePendingPageCounter(txRecoverCounter.getID(),pgCount.getID());      txRecoverCounter.setContainsPersistent();      continue;    }    SimpleString address=queue.getAddress();    Map<Long,Map<Long,List<PageCountPending>>> perPageMap=perAddressMap.get(address);    if (perPageMap == null) {      perPageMap=new HashMap<>();      perAddressMap.put(address,perPageMap);    }    Map<Long,List<PageCountPending>> perQueueMap=perPageMap.get(pageID);    if (perQueueMap == null) {      perQueueMap=new HashMap<>();      perPageMap.put(pageID,perQueueMap);    }    List<PageCountPending> pendingCounters=perQueueMap.get(queueID);    if (pendingCounters == null) {      pendingCounters=new LinkedList<>();      perQueueMap.put(queueID,pendingCounters);    }    pendingCounters.add(pgCount);    perQueueMap.put(queueID,pendingCounters);  }  return perAddressMap;}  }
class C{  protected ActionRefImpl(){  super();}  }
class C{  @Override public void onExceptionCaught(GridNioSession ses,IgniteCheckedException e){  try {    head.onExceptionCaught(ses,e);  } catch (  Exception ex) {    LT.error(log,ex,"Failed to forward GridNioException to filter chain [ses=" + ses + ", e="+ e+ ']');  }}  }
class C{  void cancelEditing(){  if (TABLE.isEditing()) {    TableCellEditor editor=TABLE.getCellEditor();    editor.cancelCellEditing();  }}  }
class C{  private File[] filterFiles(final File[] toFilter,final String fileName){  if (fileName != null && toFilter != null) {    final File fileAsFilter=new File(fileName);    for (    File file : toFilter) {      if (file.compareTo(fileAsFilter) == 0) {        return new File[]{fileAsFilter};      }    }    return new File[0];  }  return toFilter;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public boolean hasProperInteriorIntersection(){  return hasProperInterior;}  }
class C{  public static XMPMeta extractXMPMeta(String filename){  if (!filename.toLowerCase().endsWith(".jpg") && !filename.toLowerCase().endsWith(".jpeg")) {    Log.d(TAG,"XMP parse: only jpeg file is supported");    return null;  }  try {    return extractXMPMeta(new FileInputStream(filename));  } catch (  FileNotFoundException e) {    Log.e(TAG,"Could not read file: " + filename,e);    return null;  }}  }
class C{  protected String byteArrayToHexString(byte[] bytes){  StringBuilder sb=new StringBuilder(bytes.length * 2);  for (  byte element : bytes) {    int v=element & 0xff;    if (v < 16) {      sb.append('0');    }    sb.append(Integer.toHexString(v));  }  return sb.toString().toUpperCase(Locale.US);}  }
class C{  public <T extends Solution>boolean removeAll(T[] solutions){  return removeAll(Arrays.asList(solutions));}  }
class C{  private void quickSort(int attIndex,int lo0,int hi0){  int lo=lo0, hi=hi0;  double mid, midPlus, midMinus;  if (hi0 > lo0) {    mid=instance((lo0 + hi0) / 2).value(attIndex);    midPlus=mid + 1e-6;    midMinus=mid - 1e-6;    while (lo <= hi) {      while ((instance(lo).value(attIndex) < midMinus) && (lo < hi0)) {        ++lo;      }      while ((instance(hi).value(attIndex) > midPlus) && (hi > lo0)) {        --hi;      }      if (lo <= hi) {        swap(lo,hi);        ++lo;        --hi;      }    }    if (lo0 < hi) {      quickSort(attIndex,lo0,hi);    }    if (lo < hi0) {      quickSort(attIndex,lo,hi0);    }  }}  }
class C{  private void storeSpeedValue(int keyId,int minValue,int maxValue,int defaultValue,String displayValue){  int value;  try {    value=Integer.parseInt(displayValue);  } catch (  NumberFormatException e) {    Log.e(TAG,"invalid value " + displayValue);    value=defaultValue;  }  if (value > maxValue) {    value=maxValue;  }  if (value < minValue) {    value=minValue;  }  PreferencesUtils.setInt(this,keyId,value);}  }
class C{  protected MockResponse buildResponse(int status){  MockResponse response=new MockResponse().setResponseCode(status);  response.setHeader("Content-type",mFileType);  return response;}  }
class C{  public boolean isIPv6(){  return getAddress() instanceof Inet6Address;}  }
class C{  public void writeRecord(byte[] buf,int offset) throws IOException {  if (debug) {    System.err.println("WriteRecord: recIdx = " + currRecIdx + " blkIdx = "+ currBlkIdx);  }  if (outStream == null) {    throw new IOException("writing to an input buffer");  }  if ((offset + recordSize) > buf.length) {    throw new IOException("record has length '" + buf.length + "' with offset '"+ offset+ "' which is less than the record size of '"+ recordSize+ "'");  }  if (currRecIdx >= recsPerBlock) {    writeBlock();  }  System.arraycopy(buf,offset,blockBuffer,(currRecIdx * recordSize),recordSize);  currRecIdx++;}  }
class C{  public boolean approveIt(){  log.info(toString());  setIsApproved(true);  return true;}  }
class C{  @ObjectiveCName("changeDocAutoDownloadEnabled:") public void changeDocAutoDownloadEnabled(boolean val){  modules.getSettingsModule().setDocAutoDownloadEnabled(val);}  }
class C{  private void createDetailLines(){  StringBuffer sql=new StringBuffer(s_insert);  sql.append("SELECT ").append(getAD_PInstance_ID()).append(",Fact_Acct_ID,");  sql.append(getAD_Client_ID()).append(",AD_Org_ID,Created,CreatedBy, Updated,UpdatedBy,");  sql.append("C_AcctSchema_ID, Account_ID, null, DateTrx, DateAcct, C_Period_ID,");  sql.append("AD_Table_ID, Record_ID, Line_ID,");  sql.append("GL_Category_ID, GL_Budget_ID, C_Tax_ID, M_Locator_ID, PostingType,");  sql.append("C_Currency_ID, AmtSourceDr,AmtSourceCr, AmtSourceDr-AmtSourceCr,");  sql.append(" AmtAcctDr,AmtAcctCr, AmtAcctDr-AmtAcctCr, C_UOM_ID,Qty,");  sql.append("M_Product_ID, C_BPartner_ID, AD_OrgTrx_ID, C_LocFrom_ID,C_LocTo_ID,");  sql.append("C_SalesRegion_ID, C_Project_ID, C_Campaign_ID, C_Activity_ID,");  sql.append("User1_ID, User2_ID, A_Asset_ID, Description");  sql.append(" FROM Fact_Acct WHERE AD_Client_ID=").append(getAD_Client_ID()).append(" AND ").append(m_parameterWhere).append(" AND DateAcct >= ").append(DB.TO_DATE(p_DateAcct_From,true)).append(" AND TRUNC(DateAcct, 'DD') <= ").append(DB.TO_DATE(p_DateAcct_To,true));  int no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no == 0)   log.fine(sql.toString());  log.fine("#" + no + " (Account_ID="+ p_Account_ID+ ")");  String sql2="UPDATE T_TrialBalance tb SET AccountValue = " + "(SELECT Value FROM C_ElementValue ev WHERE ev.C_ElementValue_ID=tb.Account_ID) " + "WHERE tb.Account_ID IS NOT NULL AND tb.AD_PInstance_ID = "+ getAD_PInstance_ID();  no=DB.executeUpdate(sql2,get_TrxName());  if (no > 0)   log.fine("Set AccountValue #" + no);}  }
class C{  @Override public void onUpgrade(SQLiteDatabase db,int oldVersion,int newVersion){  Log.w(TAG,"Upgrading database from version " + oldVersion + " to "+ newVersion+ ", which will destroy all old data");  db.execSQL("DROP TABLE IF EXISTS notes");  onCreate(db);}  }
class C{  public int compare(Object obj1,Object obj2){  if (obj1 == obj2) {    return 0;  }  AttributeTypeAndValue atav1=(AttributeTypeAndValue)obj1;  AttributeTypeAndValue atav2=(AttributeTypeAndValue)obj2;  String kw1=atav1.getType().getName();  String kw2=atav2.getType().getName();  if (kw1 != null && kw2 == null) {    return -1;  }  if (kw1 == null && kw2 != null) {    return 1;  }  if (kw1 != null && kw2 != null) {    return kw1.compareTo(kw2);  }  return compateOids(atav1.getType(),atav2.getType());}  }
class C{  public void testAutoDeployable() throws Exception {  final URL url=new URL("http://localhost:" + System.getProperty("http.port") + "/cargo-sample-maven2-autoDeployable-test/");  final String expected="Sample page for testing";  PingUtils.assertPingTrue(url.getPath() + " not started",expected,url,logger);}  }
class C{  public static int dehexchar(char c){  if (c >= '0' && c <= '9') {    return c - '0';  }  if (c >= 'A' && c <= 'F') {    return c - ('A' - 10);  }  if (c >= 'a' && c <= 'f') {    return c - ('a' - 10);  }  return -1;}  }
class C{  public String(byte[] bytes,int off,int len,java.lang.String enc) throws java.io.UnsupportedEncodingException {}  }
class C{  private RunnableScheduledFuture<?> peekExpired(){  RunnableScheduledFuture<?> first=queue[0];  return (first == null || first.getDelay(NANOSECONDS) > 0) ? null : first;}  }
class C{  public Weave(WeaveSpec spec) throws InvalidAdviceException, PTAgentException {  this.spec=spec;  advice=new AdviceImpl(spec.getAdvice(),agent.baggageApi,agent.emitApi);  adviceLookupId=agent.adviceManager.register(advice);  for (  TracepointSpec tspec : spec.getTracepointList()) {    if (tspec.hasMethodTracepoint()) {      DynamicModification m=new MethodRewriteModification(tspec.getMethodTracepoint(),adviceLookupId);      modifications.add(m);      if (agent.dynamic != null) {        agent.dynamic.add(m);      }    } else     if (tspec.hasHardcodedTracepoint()) {      for (      HardcodedTracepoint t : agent.hardcodedTracepoints.get(tspec.getHardcodedTracepoint().getId())) {        hardcoded.put(t,t.weave(advice,spec.getAdvice().getObserve().getVarList()));      }    }  }  log.info("Adding weave Q {}, A {}",PivotTracingUtils.queryId(spec.getId()),PivotTracingUtils.adviceId(spec.getId()));}  }
class C{  public String toString(){  return "" + simpleSelector + condition;}  }
class C{  default B addIcons(final MapMeta src){  final Collection<MapIcon> icons=src.getIcons();  if ((icons == null) || icons.isEmpty()) {    return this.getBuilder();  }  final M meta=this.meta();  icons.forEach(null);  return this.getBuilder();}  }
class C{  public NoHttpResponseException(){  super();}  }
class C{  public double makePrecise(double val){  if (Double.isNaN(val))   return val;  if (modelType == FLOATING_SINGLE) {    float floatSingleVal=(float)val;    return (double)floatSingleVal;  }  if (modelType == FIXED) {    return Math.round(val * scale) / scale;  }  return val;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.389 -0500",hash_original_method="F07701895F7EA99F66D330A17A2FD28D",hash_generated_method="CCE225807CE483E1E6E6673A8C5B1BD7") public SipRequestLine createRequestLine(String requestLine) throws ParseException {  RequestLineParser requestLineParser=new RequestLineParser(requestLine);  return (SipRequestLine)requestLineParser.parse();}  }
class C{  public CopyRefactoring(CopyProcessor processor){  super(processor);  Assert.isNotNull(processor);  fProcessor=processor;}  }
class C{  public AccessibilityManagerServiceTest(){  IBinder iBinder=ServiceManager.getService(Context.ACCESSIBILITY_SERVICE);  mManagerService=IAccessibilityManager.Stub.asInterface(iBinder);}  }
class C{  protected final boolean unknownFieldDataEquals(M other){  if (unknownFieldData == null || unknownFieldData.isEmpty()) {    return other.unknownFieldData == null || other.unknownFieldData.isEmpty();  } else {    return unknownFieldData.equals(other.unknownFieldData);  }}  }
class C{  public void init(Coordinate p){  init(p.x,p.x,p.y,p.y);}  }
class C{  DhcpDiscoverPacket(int transId,byte[] clientMac,boolean broadcast){  super(transId,Inet4Address.ANY,Inet4Address.ANY,Inet4Address.ANY,Inet4Address.ANY,clientMac,broadcast);}  }
class C{  private String prepareURL(){  String str="http://download.finance.yahoo.com/d/quotes.csv?s=";  for (int i=0; i < symbols.length; i++) {    if (i != 0) {      str+=",";    }    str+=symbols[i];  }  str+="&f=sl1vt1&e=.csv";  return str;}  }
class C{  @Override public void reset() throws IOException {synchronized (lock) {    super.reset();    lineNumber=markedLineNumber;    lastWasCR=markedLastWasCR;  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case SexecPackage.MAPPED_ELEMENT__SOURCE_ELEMENT:    if (resolve)     return getSourceElement();  return basicGetSourceElement();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private static void adjustPoolSize(int players){  pool.setCorePoolSize(Math.max(BASE_THREADS,players / PLAYERS_PER_THREAD));}  }
class C{  protected void fireMenuKeyReleased(MenuKeyEvent event){  if (DEBUG) {    System.out.println("in JMenuItem.fireMenuKeyReleased for " + getText() + "  "+ KeyStroke.getKeyStrokeForEvent(event));  }  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == MenuKeyListener.class) {      ((MenuKeyListener)listeners[i + 1]).menuKeyReleased(event);    }  }}  }
class C{  public Constant(Value value){  super(0,0);  this.value=value;  assert value != null;}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean hasChildren(){  return children;}  }
class C{  public static ImageDescriptor findImageDescriptor(Bundle bundle,String path){  Preconditions.checkNotNull(bundle);  URL url=FileLocator.find(bundle,new Path(path),null);  Preconditions.checkArgument(url != null,String.format("Invalid image path %s.",path));  return ImageDescriptor.createFromURL(url);}  }
class C{  static public void showVariationWarning(String str){  PGraphics.showVariationWarning(str);}  }
class C{  public JsonValue(Object value){  this.value=value;  array=null;  object=null;  isNull=(value == null);}  }
class C{  public Ocean(){  super();}  }
class C{  private void findNewAStarPath(Gridlock geoTest){  Node currentJunction=geoTest.network.findNode(location.geometry.getCoordinate());  Node destinationJunction=workNode;  if (currentJunction == null) {    return;  }  AStar pathfinder=new AStar();  ArrayList<GeomPlanarGraphDirectedEdge> path=pathfinder.astarPath(currentJunction,destinationJunction);  if (path != null && path.size() > 0) {    pathFromHomeToWork=path;    GeomPlanarGraphEdge edge=(GeomPlanarGraphEdge)path.get(0).getEdge();    setupEdge(edge);    updatePosition(segment.extractPoint(currentIndex));  }}  }
class C{  public static String export(ToplevelPane pane){  Gson gson=new GsonBuilder().setPrettyPrinting().create();  Map<String,Object> exportMap=new HashMap<>();  exportMap.put(ViskellFormat.VERSION_NUMBER_LABEL,ViskellFormat.EXPORT_VERSION);  exportMap.putAll(pane.toBundle());  return gson.toJson(exportMap);}  }
class C{  protected LocationSettings(Context context){  mContext=context;}  }
class C{  public Rational add(Rational secondRational){  long n=r[0] * secondRational.getDenominator() + r[1] * secondRational.getNumerator();  long d=r[1] * secondRational.getDenominator();  return new Rational(n,d);}  }
class C{  public int loadUrl(String uri){  return execute("uri",RdfRepository.UPDATE_COUNT_RESPONSE,uri);}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public void paintLayeredHighlights(Graphics g,int p0,int p1,Shape viewBounds,JTextComponent editor,View view){  for (int counter=highlights.size() - 1; counter >= 0; counter--) {    Object tag=highlights.elementAt(counter);    if (tag instanceof LayeredHighlightInfo) {      LayeredHighlightInfo lhi=(LayeredHighlightInfo)tag;      int start=lhi.getStartOffset();      int end=lhi.getEndOffset();      if ((p0 < start && p1 > start) || (p0 >= start && p0 < end)) {        lhi.paintLayeredHighlights(g,p0,p1,viewBounds,editor,view);      }    }  }}  }
class C{  public static void requestUserAttention(boolean requestCritical){}  }
class C{  public void testMinShingleSizeNoUnigrams() throws Exception {  Reader reader=new StringReader("this is a test");  TokenStream stream=whitespaceMockTokenizer(reader);  stream=tokenFilterFactory("Shingle","minShingleSize","3","maxShingleSize","4","outputUnigrams","false").create(stream);  assertTokenStreamContents(stream,new String[]{"this is a","this is a test","is a test"});}  }
class C{  public static void localizeProduct(DataService dm,long objKey,String locale) throws NonUniqueBusinessKeyException {  create(dm,objKey,LocalizedObjectTypes.PRODUCT_MARKETING_NAME,"Product " + productNumber + " ("+ LocalizedObjectTypes.PRODUCT_MARKETING_NAME+ ")",locale);  create(dm,objKey,LocalizedObjectTypes.PRODUCT_MARKETING_DESC,PRODUCT_DESCR_SAMPLE_TEXT,locale);  create(dm,objKey,LocalizedObjectTypes.PRODUCT_LICENSE_DESC,PROCUCT_LICENSE_SAMPLE_TEXT,locale);  create(dm,objKey,LocalizedObjectTypes.PRODUCT_SHORT_DESCRIPTION);  productNumber++;}  }
class C{  public byte[] toBytes() throws UnsupportedEncodingException {  StringBuilder result=new StringBuilder(256);  result.append(requestLine).append("\r\n");  for (int i=0; i < namesAndValues.size(); i+=2) {    result.append(namesAndValues.get(i)).append(": ").append(namesAndValues.get(i + 1)).append("\r\n");  }  result.append("\r\n");  return result.toString().getBytes("ISO-8859-1");}  }
class C{  public static @Type int stringToEdgeType(String s){  s=s.toUpperCase(Locale.ENGLISH);  if ("FALL_THROUGH".equals(s)) {    return FALL_THROUGH_EDGE;  } else   if ("IFCMP".equals(s)) {    return IFCMP_EDGE;  } else   if ("SWITCH".equals(s)) {    return SWITCH_EDGE;  } else   if ("SWITCH_DEFAULT".equals(s)) {    return SWITCH_DEFAULT_EDGE;  } else   if ("JSR".equals(s)) {    return JSR_EDGE;  } else   if ("RET".equals(s)) {    return RET_EDGE;  } else   if ("GOTO".equals(s)) {    return GOTO_EDGE;  } else   if ("RETURN".equals(s)) {    return RETURN_EDGE;  } else   if ("UNHANDLED_EXCEPTION".equals(s)) {    return UNHANDLED_EXCEPTION_EDGE;  } else   if ("HANDLED_EXCEPTION".equals(s)) {    return HANDLED_EXCEPTION_EDGE;  } else   if ("START".equals(s)) {    return START_EDGE;  } else   if ("BACKEDGE_TARGET_EDGE".equals(s)) {    return BACKEDGE_TARGET_EDGE;  } else   if ("BACKEDGE_SOURCE_EDGE".equals(s)) {    return BACKEDGE_SOURCE_EDGE;  } else   if ("EXIT_EDGE".equals(s)) {    return EXIT_EDGE;  } else {    throw new IllegalArgumentException("Unknown edge type: " + s);  }}  }
class C{  public static Report insert(Dfareporting reporting,Long userProfileId,DimensionValue floodlightConfigId,String startDate,String endDate) throws Exception {  System.out.println("=================================================================");  System.out.printf("Creating a new floodlight report for Floodlight config ID %s%n",floodlightConfigId.getValue());  System.out.println("=================================================================");  Report report=new Report();  report.setName(String.format("API Floodlight Report: Floodlight ID %s",floodlightConfigId.getValue()));  report.setFileName("api_floodlight_report_files");  report.setType("FLOODLIGHT");  Report.FloodlightCriteria criteria=new Report.FloodlightCriteria();  criteria.setDateRange(new DateRange().setStartDate(new DateTime(startDate)).setEndDate(new DateTime(endDate)));  criteria.setDimensions(ImmutableList.of(new SortedDimension().setName("dfa:floodlightConfigId"),new SortedDimension().setName("dfa:activity"),new SortedDimension().setName("dfa:advertiser")));  criteria.setMetricNames(ImmutableList.of("dfa:activityClickThroughConversions","dfa:activityClickThroughRevenue","dfa:activityViewThroughConversions","dfa:activityViewThroughRevenue"));  criteria.setDimensionFilters(ImmutableList.of(floodlightConfigId));  report.setFloodlightCriteria(criteria);  Report result=reporting.reports().insert(userProfileId,report).execute();  System.out.printf("Created report with ID \"%s\" and display name \"%s\"%n",result.getId(),result.getName());  System.out.println();  return result;}  }
class C{  public static void showBalloon(Project project,String message,MessageType messageType){  final JFrame frame=WindowManager.getInstance().getFrame(project.isDefault() ? null : project);  if (frame == null)   return;  final JComponent component=frame.getRootPane();  if (component == null)   return;  final Rectangle rect=component.getVisibleRect();  final Point p=new Point(rect.x + rect.width - 10,rect.y + 10);  final RelativePoint point=new RelativePoint(component,p);  JBPopupFactory.getInstance().createHtmlTextBalloonBuilder(message,messageType.getDefaultIcon(),messageType.getPopupBackground(),null).setShowCallout(false).setCloseButtonEnabled(true).createBalloon().show(point,Balloon.Position.atLeft);}  }
class C{  public synchronized void removeIncrementalClassifierListener(IncrementalClassifierListener cl){  m_incrementalClassifierListeners.remove(cl);}  }
class C{  public void disconnect() throws SerialPortException, DeviceException {  log.info("Closing all communication channels for {}",certificate.getCommonName());  for (  String p : openSerialPorts.keySet()) {    openSerialPorts.get(p).close();  }  for (  Short v : openDevices.keySet()) {    HashMap<Short,DeviceIO> pm=openDevices.get(v);    for (    Short p : pm.keySet()) {      pm.get(p).close();    }  }  stopListening();}  }
class C{  public static PrivKey loadFromKeyStore(File file,String password) throws IOException, UnrecoverableKeyException, NoSuchAlgorithmException, CertificateException, KeyStoreException {  return loadFromKeyStore(file.toURI().toURL(),password);}  }
class C{  public DSSDocument generateXAdESContentTimestampAsDSSDocument(final DSSDocument toSignDocument,final XAdESSignatureParameters externalParameters,final TimestampType timestampType){  final TimestampToken timestampToken=generateXAdESContentTimestampAsTimestampToken(toSignDocument,externalParameters,timestampType);  return new InMemoryDocument(timestampToken.getEncoded());}  }
class C{  public static byte[] decode(String data){  ByteArrayOutputStream bOut=new ByteArrayOutputStream();  try {    encoder.decode(data,bOut);  } catch (  Exception e) {    throw new DecoderException("exception decoding Hex string: " + e.getMessage(),e);  }  return bOut.toByteArray();}  }
class C{  private static void warn(String msg){  X.println("  ! " + msg);}  }
class C{  public boolean isColumnTypeRelativePeriod(){  return COLUMNTYPE_RelativePeriod.equals(getColumnType());}  }
class C{  @SuppressWarnings("SleepWhileInLoop") private void execute() throws YarnException, IOException {  LOG.info("Starting ApplicationMaster");  final Credentials credentials=UserGroupInformation.getCurrentUser().getCredentials();  LOG.info("number of tokens: {}",credentials.getAllTokens().size());  Iterator<Token<?>> iter=credentials.getAllTokens().iterator();  while (iter.hasNext()) {    Token<?> token=iter.next();    LOG.debug("token: {}",token);  }  final Configuration conf=getConfig();  long tokenLifeTime=(long)(dag.getValue(LogicalPlan.TOKEN_REFRESH_ANTICIPATORY_FACTOR) * Math.min(dag.getValue(LogicalPlan.HDFS_TOKEN_LIFE_TIME),dag.getValue(LogicalPlan.RM_TOKEN_LIFE_TIME)));  long expiryTime=System.currentTimeMillis() + tokenLifeTime;  LOG.debug(" expiry token time {}",tokenLifeTime);  String principal=dag.getValue(LogicalPlan.PRINCIPAL);  String hdfsKeyTabFile=dag.getValue(LogicalPlan.KEY_TAB_FILE);  RegisterApplicationMasterResponse response=amRmClient.registerApplicationMaster(appMasterHostname,0,appMasterTrackingUrl);  int maxMem=response.getMaximumResourceCapability().getMemory();  int maxVcores=response.getMaximumResourceCapability().getVirtualCores();  int minMem=conf.getInt("yarn.scheduler.minimum-allocation-mb",0);  int minVcores=conf.getInt("yarn.scheduler.minimum-allocation-vcores",0);  LOG.info("Max mem {}m, Min mem {}m, Max vcores {} and Min vcores {} capabililty of resources in this cluster ",maxMem,minMem,maxVcores,minVcores);  long blacklistRemovalTime=dag.getValue(DAGContext.BLACKLISTED_NODE_REMOVAL_TIME_MILLIS);  int maxConsecutiveContainerFailures=dag.getValue(DAGContext.MAX_CONSECUTIVE_CONTAINER_FAILURES_FOR_BLACKLIST);  LOG.info("Blacklist removal time in millis = {}, max consecutive node failure count = {}",blacklistRemovalTime,maxConsecutiveContainerFailures);  Map<StreamingContainerAgent.ContainerStartRequest,MutablePair<Integer,ContainerRequest>> requestedResources=Maps.newHashMap();  int loopCounter=-1;  long nodeReportUpdateTime=0;  List<ContainerId> releasedContainers=new ArrayList<>();  int numTotalContainers=0;  int numRequestedContainers=0;  int numReleasedContainers=0;  int nextRequestPriority=0;  ResourceRequestHandler resourceRequestor=System.getenv().containsKey("CDH_HADOOP_BIN") ? new BlacklistBasedResourceRequestHandler() : new ResourceRequestHandler();  List<ContainerStartRequest> pendingContainerStartRequests=new LinkedList<>();  YarnClient clientRMService=YarnClient.createYarnClient();  try {    clientRMService.init(conf);    clientRMService.start();    ApplicationReport ar=StramClientUtils.getStartedAppInstanceByName(clientRMService,dag.getAttributes().get(DAG.APPLICATION_NAME),UserGroupInformation.getLoginUser().getUserName(),dag.getAttributes().get(DAG.APPLICATION_ID));    if (ar != null) {      appDone=true;      dnmgr.shutdownDiagnosticsMessage=String.format("Application master failed due to application %s with duplicate application name \"%s\" by the same user \"%s\" is already started.",ar.getApplicationId().toString(),ar.getName(),ar.getUser());      LOG.info("Forced shutdown due to {}",dnmgr.shutdownDiagnosticsMessage);      finishApplication(FinalApplicationStatus.FAILED,numTotalContainers);      return;    }    resourceRequestor.updateNodeReports(clientRMService.getNodeReports());    nodeReportUpdateTime=System.currentTimeMillis() + UPDATE_NODE_REPORTS_INTERVAL;  } catch (  Exception e) {    throw new RuntimeException("Failed to retrieve cluster nodes report.",e);  } finally {    clientRMService.stop();  }  checkContainerStatus();  FinalApplicationStatus finalStatus=FinalApplicationStatus.SUCCEEDED;  final InetSocketAddress rmAddress=conf.getSocketAddr(YarnConfiguration.RM_ADDRESS,YarnConfiguration.DEFAULT_RM_ADDRESS,YarnConfiguration.DEFAULT_RM_PORT);  while (!appDone) {    loopCounter++;    final long currentTimeMillis=System.currentTimeMillis();    if (UserGroupInformation.isSecurityEnabled() && currentTimeMillis >= expiryTime && hdfsKeyTabFile != null) {      String applicationId=appAttemptID.getApplicationId().toString();      expiryTime=StramUserLogin.refreshTokens(tokenLifeTime,FileUtils.getTempDirectoryPath(),applicationId,conf,principal,hdfsKeyTabFile,credentials,rmAddress,true);    }    if (currentTimeMillis > nodeReportUpdateTime) {      resourceRequestor.updateNodeReports(clientRMService.getNodeReports());      nodeReportUpdateTime=currentTimeMillis + UPDATE_NODE_REPORTS_INTERVAL;    }    Runnable r;    while ((r=this.pendingTasks.poll()) != null) {      r.run();    }    try {      sleep(1000);    } catch (    InterruptedException e) {      LOG.info("Sleep interrupted " + e.getMessage());    }    List<ContainerRequest> containerRequests=new ArrayList<>();    List<ContainerRequest> removedContainerRequests=new ArrayList<>();    if (!dnmgr.containerStartRequests.isEmpty()) {      StreamingContainerAgent.ContainerStartRequest csr;      while ((csr=dnmgr.containerStartRequests.poll()) != null) {        if (csr.container.getRequiredMemoryMB() > maxMem) {          LOG.warn("Container memory {}m above max threshold of cluster. Using max value {}m.",csr.container.getRequiredMemoryMB(),maxMem);          csr.container.setRequiredMemoryMB(maxMem);        }        if (csr.container.getRequiredMemoryMB() < minMem) {          csr.container.setRequiredMemoryMB(minMem);        }        if (csr.container.getRequiredVCores() > maxVcores) {          LOG.warn("Container vcores {} above max threshold of cluster. Using max value {}.",csr.container.getRequiredVCores(),maxVcores);          csr.container.setRequiredVCores(maxVcores);        }        if (csr.container.getRequiredVCores() < minVcores) {          csr.container.setRequiredVCores(minVcores);        }        csr.container.setResourceRequestPriority(nextRequestPriority++);        ContainerRequest cr=resourceRequestor.createContainerRequest(csr,true);        if (cr == null) {          pendingContainerStartRequests.add(csr);        } else {          resourceRequestor.addContainerRequest(requestedResources,loopCounter,containerRequests,csr,cr);        }      }    }    if (containerRequests.isEmpty() && !pendingContainerStartRequests.isEmpty()) {      List<ContainerStartRequest> removalList=new LinkedList<>();      for (      ContainerStartRequest csr : pendingContainerStartRequests) {        ContainerRequest cr=resourceRequestor.createContainerRequest(csr,true);        if (cr != null) {          resourceRequestor.addContainerRequest(requestedResources,loopCounter,containerRequests,csr,cr);          removalList.add(csr);        }      }      pendingContainerStartRequests.removeAll(removalList);    }    resourceRequestor.reissueContainerRequests(amRmClient,requestedResources,loopCounter,resourceRequestor,containerRequests,removedContainerRequests);    List<String> blacklistRemovals=new ArrayList<>();    for (    String hostname : failedBlackListedNodes) {      Long timeDiff=currentTimeMillis - failedContainerNodesMap.get(hostname).blackListAdditionTime;      if (timeDiff >= blacklistRemovalTime) {        blacklistRemovals.add(hostname);        failedContainerNodesMap.remove(hostname);      }    }    if (!blacklistRemovals.isEmpty()) {      amRmClient.updateBlacklist(null,blacklistRemovals);      LOG.info("Removing nodes {} from blacklist: time elapsed since last blacklisting due to failure is greater than specified timeout",blacklistRemovals.toString());      failedBlackListedNodes.removeAll(blacklistRemovals);    }    numTotalContainers+=containerRequests.size();    numRequestedContainers+=containerRequests.size();    AllocateResponse amResp=sendContainerAskToRM(containerRequests,removedContainerRequests,releasedContainers);    if (amResp.getAMCommand() != null) {      LOG.info(" statement executed:{}",amResp.getAMCommand());switch (amResp.getAMCommand()) {case AM_RESYNC:case AM_SHUTDOWN:        throw new YarnRuntimeException("Received the " + amResp.getAMCommand() + " command from RM");default :      throw new YarnRuntimeException("Received the " + amResp.getAMCommand() + " command from RM");  }}releasedContainers.clear();List<Container> newAllocatedContainers=amResp.getAllocatedContainers();numRequestedContainers-=newAllocatedContainers.size();long timestamp=System.currentTimeMillis();for (Container allocatedContainer : newAllocatedContainers) {  LOG.info("Got new container." + ", containerId=" + allocatedContainer.getId() + ", containerNode="+ allocatedContainer.getNodeId()+ ", containerNodeURI="+ allocatedContainer.getNodeHttpAddress()+ ", containerResourceMemory"+ allocatedContainer.getResource().getMemory()+ ", priority"+ allocatedContainer.getPriority());  boolean alreadyAllocated=true;  StreamingContainerAgent.ContainerStartRequest csr=null;  for (  Map.Entry<StreamingContainerAgent.ContainerStartRequest,MutablePair<Integer,ContainerRequest>> entry : requestedResources.entrySet()) {    if (entry.getKey().container.getResourceRequestPriority() == allocatedContainer.getPriority().getPriority()) {      alreadyAllocated=false;      csr=entry.getKey();      break;    }  }  if (alreadyAllocated) {    LOG.info("Releasing {} as resource with priority {} was already assigned",allocatedContainer.getId(),allocatedContainer.getPriority());    releasedContainers.add(allocatedContainer.getId());    numReleasedContainers++;    numRequestedContainers++;    continue;  }  if (csr != null) {    requestedResources.remove(csr);  }  ContainerResource resource=new ContainerResource(allocatedContainer.getPriority().getPriority(),allocatedContainer.getId().toString(),allocatedContainer.getNodeId().toString(),allocatedContainer.getResource().getMemory(),allocatedContainer.getResource().getVirtualCores(),allocatedContainer.getNodeHttpAddress());  StreamingContainerAgent sca=dnmgr.assignContainer(resource,null);  if (sca == null) {    LOG.warn("Container {} allocated but nothing to deploy, going to release this container.",allocatedContainer.getId());    releasedContainers.add(allocatedContainer.getId());  } else {    AllocatedContainer allocatedContainerHolder=new AllocatedContainer(allocatedContainer);    this.allocatedContainers.put(allocatedContainer.getId().toString(),allocatedContainerHolder);    ByteBuffer tokens=null;    if (UserGroupInformation.isSecurityEnabled()) {      UserGroupInformation ugi=UserGroupInformation.getLoginUser();      Token<StramDelegationTokenIdentifier> delegationToken=allocateDelegationToken(ugi.getUserName(),heartbeatListener.getAddress());      allocatedContainerHolder.delegationToken=delegationToken;      tokens=LaunchContainerRunnable.getTokens(ugi,delegationToken);    }    LaunchContainerRunnable launchContainer=new LaunchContainerRunnable(allocatedContainer,nmClient,sca,tokens);    launchContainer.run();    StramEvent ev=new StramEvent.StartContainerEvent(allocatedContainer.getId().toString(),allocatedContainer.getNodeId().toString());    ev.setTimestamp(timestamp);    dnmgr.recordEventAsync(ev);  }}resourceRequestor.updateNodeReports(amResp.getUpdatedNodes());List<ContainerStatus> completedContainers=amResp.getCompletedContainersStatuses();List<String> blacklistAdditions=new ArrayList<>();for (ContainerStatus containerStatus : completedContainers) {  LOG.info("Completed containerId=" + containerStatus.getContainerId() + ", state="+ containerStatus.getState()+ ", exitStatus="+ containerStatus.getExitStatus()+ ", diagnostics="+ containerStatus.getDiagnostics());  assert (containerStatus.getState() == ContainerState.COMPLETE);  AllocatedContainer allocatedContainer=allocatedContainers.remove(containerStatus.getContainerId().toString());  if (allocatedContainer != null && allocatedContainer.delegationToken != null) {    UserGroupInformation ugi=UserGroupInformation.getLoginUser();    delegationTokenManager.cancelToken(allocatedContainer.delegationToken,ugi.getUserName());  }  int exitStatus=containerStatus.getExitStatus();  if (0 != exitStatus) {    if (allocatedContainer != null) {      numFailedContainers.incrementAndGet();      if (exitStatus != 1 && maxConsecutiveContainerFailures != Integer.MAX_VALUE) {        String hostname=allocatedContainer.container.getNodeId().getHost();        if (!failedBlackListedNodes.contains(hostname)) {          if (failedContainerNodesMap.containsKey(hostname)) {            NodeFailureStats stats=failedContainerNodesMap.get(hostname);            long timeStamp=System.currentTimeMillis();            if (timeStamp - stats.lastFailureTimeStamp >= blacklistRemovalTime) {              stats.failureCount=1;              stats.lastFailureTimeStamp=timeStamp;            } else {              stats.lastFailureTimeStamp=timeStamp;              stats.failureCount++;              if (stats.failureCount >= maxConsecutiveContainerFailures) {                LOG.info("Node {} failed {} times consecutively within {} minutes, marking the node blacklisted",hostname,stats.failureCount,blacklistRemovalTime / (60 * 1000));                blacklistAdditions.add(hostname);                failedBlackListedNodes.add(hostname);              }            }          } else {            failedContainerNodesMap.put(hostname,new NodeFailureStats(System.currentTimeMillis(),1));          }        }      }    }    LOG.debug("Container {} failed or killed.",containerStatus.getContainerId());    dnmgr.scheduleContainerRestart(containerStatus.getContainerId().toString());  } else {    numCompletedContainers.incrementAndGet();    LOG.info("Container completed successfully." + ", containerId=" + containerStatus.getContainerId());    String hostname=allocatedContainer.container.getNodeId().getHost();    NodeFailureStats stats=failedContainerNodesMap.get(hostname);    if (stats != null) {      stats.failureCount=0;    }  }  String containerIdStr=containerStatus.getContainerId().toString();  dnmgr.removeContainerAgent(containerIdStr);  StramEvent ev=new StramEvent.StopContainerEvent(containerIdStr,containerStatus.getExitStatus());  ev.setReason(containerStatus.getDiagnostics());  dnmgr.recordEventAsync(ev);}if (!blacklistAdditions.isEmpty()) {  amRmClient.updateBlacklist(blacklistAdditions,null);  long timeStamp=System.currentTimeMillis();  for (  String hostname : blacklistAdditions) {    NodeFailureStats stats=failedContainerNodesMap.get(hostname);    stats.blackListAdditionTime=timeStamp;  }}if (dnmgr.forcedShutdown) {  LOG.info("Forced shutdown due to {}",dnmgr.shutdownDiagnosticsMessage);  finalStatus=FinalApplicationStatus.FAILED;  appDone=true;} else if (allocatedContainers.isEmpty() && numRequestedContainers == 0 && dnmgr.containerStartRequests.isEmpty()) {  LOG.debug("Exiting as no more containers are allocated or requested");  finalStatus=FinalApplicationStatus.SUCCEEDED;  appDone=true;}LOG.debug("Current application state: loop=" + loopCounter + ", appDone="+ appDone+ ", total="+ numTotalContainers+ ", requested="+ numRequestedContainers+ ", released="+ numReleasedContainers+ ", completed="+ numCompletedContainers+ ", failed="+ numFailedContainers+ ", currentAllocated="+ allocatedContainers.size());dnmgr.monitorHeartbeat();}finishApplication(finalStatus,numTotalContainers);}  }
class C{  @Override public String toString(){  return String.format("Bookmark %s/'%s'",getAddress().toHexString(),getDescription());}  }
class C{  private void initialize(){  this.setSize(231,131);  this.setResizable(false);  this.setTitle("Login dialog...");  this.setContentPane(getJContentPane());}  }
class C{  @Override public double logDensity(double[] valuePassed){  double[] value=valuePassed.clone();  double logProb=0;  double[] subtractedMean=new double[value.length];  for (int i=0; i < value.length; i++) {    subtractedMean[i]=value[i] - mean[i];  }  value=subtractedMean.clone();  double[][] L=this.chol.getL().getArray();  int n=this.chol.getL().getRowDimension();  for (int k=0; k < this.chol.getL().getRowDimension(); k++) {    for (int i=0; i < k; i++) {      value[k]-=value[i] * L[k][i];    }    value[k]/=L[k][k];  }  for (int k=n - 1; k >= 0; k--) {    for (int i=k + 1; i < n; i++) {      value[k]-=value[i] * L[i][k];    }    value[k]/=L[k][k];  }  double innerProduct=0;  for (int i=0; i < value.length; i++) {    innerProduct+=value[i] * subtractedMean[i];  }  logProb=lnconstant - innerProduct * 0.5;  return logProb;}  }
class C{  public static <T>ArrayList<T> arrayList(){  return new ArrayList<T>(4);}  }
class C{  public NumericColumn range(Double low,Double high){  this.low=low;  this.high=high;  return this;}  }
class C{  public BatchId(String id){  this();  setId(id);}  }
class C{  static MediaType createVideoType(String subtype){  return create(VIDEO_TYPE,subtype);}  }
class C{  protected Parameters assocConj(Parameters map,String key,Object value){  Object cur=map.getRawType(key);  if (cur != null) {    if (cur instanceof List) {      if (value instanceof List) {        ((List<Object>)cur).addAll((List<?>)value);      } else {        ((List<Object>)cur).add(value);      }    } else {      List<Object> values=new ArrayList<>();      values.add(cur);      if (values instanceof List) {        values.addAll((List<?>)value);      } else {        values.add(value);      }    }  } else {    if (value instanceof List) {      List<?> values=(List)value;      if (values.size() > 1) {        assocVector(map,key,value);      } else       if (values.size() == 1) {        map.put(key,values.get(0));      }    } else {      map.put(key,value);    }  }  return map;}  }
class C{  public void configureBaudRate(String rate){  log.debug("configureBaudRate: " + rate);  selectedSpeed=rate;  super.configureBaudRate(rate);}  }
class C{  public void updateHeader(Header header){  if (header == null) {    return;  }  for (int i=0; i < this.headers.size(); i++) {    Header current=(Header)this.headers.get(i);    if (current.getName().equalsIgnoreCase(header.getName())) {      this.headers.set(i,header);      return;    }  }  this.headers.add(header);}  }
class C{  public static GetContainerLogsParams create(@NotNull String container){  return new GetContainerLogsParams().withContainer(container);}  }
class C{  public void run(){  try {    queueSizeTask.run();    activeCountTask.run();    queueLengthTask.run();    poolSizeTask.run();  } catch (  Exception ex) {    log.error(this,ex);  }}  }
class C{  private List<VOService> convertToVoServices(List<Product> productList,LocalizerFacade facade,PerformanceHint performanceHint){  List<VOService> resultList=new ArrayList<VOService>();  ProductAssembler.prefetchData(productList,facade,performanceHint);  for (  Product product : productList) {    resultList.add(ProductAssembler.toVOProduct(product,facade,performanceHint));  }  return resultList;}  }
class C{  public static void consumeFully(HttpEntity entity){  if (entity != null) {    try {      readFully(entity.getContent());    } catch (    UnsupportedOperationException e) {    }catch (    IOException e) {    } finally {      EntityUtils.consumeQuietly(entity);    }  }}  }
class C{  public boolean isDirty(){  return dirty;}  }
class C{  public static void assertPreciselyEquals(BigDecimal expected,BigDecimal actual){  assertEquals(expected,actual);  if (expected != null) {    assertEquals("value",expected.unscaledValue(),actual.unscaledValue());    assertEquals("scale",expected.scale(),actual.scale());    assertEquals("isNegativeZero",Decimal.isNegativeZero(expected),Decimal.isNegativeZero(actual));  }}  }
class C{  public double pdf(int k){  return Arithmetic.binomial(my_s,k) * Arithmetic.binomial(my_N - my_s,my_n - k) / Arithmetic.binomial(my_N,my_n);}  }
class C{  protected int allocBlock(final int size){  if (size <= 0) {    throw new Error("allocBlock called with zero size request");  }  final int allocAddr=m_nextAllocation;  m_nextAllocation-=size;  while (convertAddr(m_nextAllocation) >= convertAddr(m_fileSize)) {    extendFile();  }  checkCoreAllocations();  if (log.isTraceEnabled())   log.trace("allocation created at " + convertAddr(allocAddr) + " for "+ convertAddr(-size));  return allocAddr;}  }
class C{  private void estimate_priors(Instances inst) throws Exception {  for (int i=0; i < m_num_clusters; i++) {    m_priorsPrev[i]=m_priors[i];    m_priors[i]=0.0;  }  for (int i=0; i < inst.numInstances(); i++) {    for (int j=0; j < m_num_clusters; j++) {      m_priors[j]+=inst.instance(i).weight() * m_weights[i][j];    }  }  Utils.normalize(m_priors);}  }
class C{  public IMouseState createBackgroundPressedRightState(final MouseEvent event){  final CBackgroundPressedRightState state=new CBackgroundPressedRightState(this,m_graph);  m_factory.createBackgroundPressedRightAction().execute(state,event);  return state;}  }
class C{  @NotNull public static GitRevisionNumber resolveReference(@NotNull Project project,@NotNull VirtualFile vcsRoot,@NotNull String reference) throws VcsException {  GitSimpleHandler handler=createRefResolveHandler(project,vcsRoot,reference);  String output=handler.run();  StringTokenizer stk=new StringTokenizer(output,"\n\r \t",false);  if (!stk.hasMoreTokens()) {    try {      GitSimpleHandler dh=new GitSimpleHandler(project,vcsRoot,GitCommand.LOG);      dh.addParameters("-1","HEAD");      dh.setSilent(true);      String out=dh.run();      LOG.info("Diagnostic output from 'git log -1 HEAD': [" + out + "]");      dh=createRefResolveHandler(project,vcsRoot,reference);      out=dh.run();      LOG.info("Diagnostic output from 'git rev-list -1 --timestamp HEAD': [" + out + "]");    } catch (    VcsException e) {      LOG.info("Exception while trying to get some diagnostics info",e);    }    throw new VcsException(String.format("The string '%s' does not represent a revision number. Output: [%s]\n Root: %s",reference,output,vcsRoot));  }  Date timestamp=GitUtil.parseTimestampWithNFEReport(stk.nextToken(),handler,output);  return new GitRevisionNumber(stk.nextToken(),timestamp);}  }
class C{  public void paintDeterminate(Graphics g,JComponent c){  super.paintDeterminate(g,c);  if (!(g instanceof Graphics2D)) {    return;  }  if (progressBar.isBorderPainted()) {    Insets b=progressBar.getInsets();    int barRectWidth=progressBar.getWidth() - (b.left + b.right);    int barRectHeight=progressBar.getHeight() - (b.top + b.bottom);    int amountFull=getAmountFull(b,barRectWidth,barRectHeight);    boolean isLeftToRight=MetalUtils.isLeftToRight(c);    int startX, startY, endX, endY;    startX=b.left;    startY=b.top;    endX=b.left + barRectWidth - 1;    endY=b.top + barRectHeight - 1;    Graphics2D g2=(Graphics2D)g;    g2.setStroke(new BasicStroke(1.f));    if (progressBar.getOrientation() == JProgressBar.HORIZONTAL) {      g2.setColor(MetalLookAndFeel.getControlShadow());      g2.drawLine(startX,startY,endX,startY);      if (amountFull > 0) {        g2.setColor(MetalLookAndFeel.getPrimaryControlDarkShadow());        if (isLeftToRight) {          g2.drawLine(startX,startY,startX + amountFull - 1,startY);        } else {          g2.drawLine(endX,startY,endX - amountFull + 1,startY);          if (progressBar.getPercentComplete() != 1.f) {            g2.setColor(MetalLookAndFeel.getControlShadow());          }        }      }      g2.drawLine(startX,startY,startX,endY);    } else {      g2.setColor(MetalLookAndFeel.getControlShadow());      g2.drawLine(startX,startY,startX,endY);      if (amountFull > 0) {        g2.setColor(MetalLookAndFeel.getPrimaryControlDarkShadow());        g2.drawLine(startX,endY,startX,endY - amountFull + 1);      }      g2.setColor(MetalLookAndFeel.getControlShadow());      if (progressBar.getPercentComplete() == 1.f) {        g2.setColor(MetalLookAndFeel.getPrimaryControlDarkShadow());      }      g2.drawLine(startX,startY,endX,startY);    }  }}  }
class C{  public void addOkListener(ActionListener a){  m_okBut.addActionListener(a);}  }
class C{  public static IOTAddress discoverDevice(String bssid){  return EspMeshDiscoverUtil.discoverIOTDevice(bssid);}  }
class C{  List<HttpParameter> asPostParameterList(){  final List<HttpParameter> pagingParams=new ArrayList<HttpParameter>();  if (cursor > 0 || cursor == -1) {    pagingParams.add(new HttpParameter(CURSOR,cursor));  }  if (count > 0) {    pagingParams.add(new HttpParameter(COUNT,count));  }  if (pagingParams.size() == 0)   return NULL_PARAMETER_LIST; else   return pagingParams;}  }
class C{  @Override public void deliverResult(D newResult){  if (isReset()) {    if (newResult != null) {      onReleaseResult(newResult);    }  }  D oldResult=result;  result=newResult;  if (isStarted()) {    super.deliverResult(newResult);  }  if (oldResult != result && oldResult != null) {    onReleaseResult(oldResult);  }}  }
class C{  public String typeName(){  return "methodref";}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:09.088 -0500",hash_original_method="E045B23C5646055DFC50B85B83A4F6FC",hash_generated_method="1DAAD1137C2DD5F17C9CEC47AEA130B8") public void copyFrom(short[] d){  mRS.validate();  copy1DRangeFrom(0,mCurrentCount,d);}  }
class C{  public void destroy(){  server.stop(0);}  }
class C{  protected boolean createNewInstance(String reason){  Set<NodePortTuple> blockedPorts=new HashSet<NodePortTuple>();  if (!linksUpdated)   return false;  Map<NodePortTuple,Set<Link>> openflowLinks;  openflowLinks=new HashMap<NodePortTuple,Set<Link>>();  Set<NodePortTuple> nptList=switchPortLinks.keySet();  if (nptList != null) {    for (    NodePortTuple npt : nptList) {      Set<Link> linkSet=switchPortLinks.get(npt);      if (linkSet == null)       continue;      openflowLinks.put(npt,new HashSet<Link>(linkSet));    }  }  Set<NodePortTuple> broadcastDomainPorts=identifyBroadcastDomainPorts();  for (  NodePortTuple npt : broadcastDomainPorts) {    if (switchPortLinks.get(npt) == null)     continue;    for (    Link link : switchPortLinks.get(npt)) {      removeLinkFromStructure(openflowLinks,link);    }  }  for (  NodePortTuple npt : tunnelPorts) {    if (switchPortLinks.get(npt) == null)     continue;    for (    Link link : switchPortLinks.get(npt)) {      removeLinkFromStructure(openflowLinks,link);    }  }  TopologyInstance nt=new TopologyInstance(switchPorts,blockedPorts,openflowLinks,broadcastDomainPorts,tunnelPorts);  nt.compute();  currentInstance=nt;  currentInstanceWithoutTunnels=nt;  TopologyEventInfo topologyInfo=new TopologyEventInfo(0,nt.getClusters().size(),new HashMap<DatapathId,List<NodePortTuple>>(),0);  eventCategory.newEventWithFlush(new TopologyEvent(reason,topologyInfo));  return true;}  }
class C{  private boolean updateStatementData(StatementData sdata,Matcher matcher,String toRegex){  if (transformTables)   return true;  if (matcher == null)   return true;  String schema=sdata.getDefaultSchema();  if (schema == null)   return true;  matcher.reset(schema);  if (matcher.matches()) {    String oldSchema=schema;    sdata.setDefaultSchema(matcher.replaceAll(toRegex));    if (logger.isDebugEnabled())     logger.debug("Filtered event schema name: old=" + oldSchema + " new="+ sdata.getDefaultSchema());    return true;  }  return false;}  }
class C{  public void testDiscoverable(){  int iterations=BluetoothTestRunner.sDiscoverableIterations;  if (iterations == 0) {    return;  }  BluetoothAdapter adapter=BluetoothAdapter.getDefaultAdapter();  mTestUtils.disable(adapter);  mTestUtils.enable(adapter);  mTestUtils.undiscoverable(adapter);  for (int i=0; i < iterations; i++) {    mTestUtils.writeOutput("discoverable iteration " + (i + 1) + " of "+ iterations);    mTestUtils.discoverable(adapter);    mTestUtils.undiscoverable(adapter);  }  mTestUtils.disable(adapter);}  }
class C{  @Deprecated public static String lookupProviderNameFromId(int protocol){switch (protocol) {case PROTOCOL_GOOGLE_TALK:    return ProviderNames.GTALK;case PROTOCOL_AIM:  return ProviderNames.AIM;case PROTOCOL_MSN:return ProviderNames.MSN;case PROTOCOL_YAHOO:return ProviderNames.YAHOO;case PROTOCOL_ICQ:return ProviderNames.ICQ;case PROTOCOL_JABBER:return ProviderNames.JABBER;case PROTOCOL_SKYPE:return ProviderNames.SKYPE;case PROTOCOL_QQ:return ProviderNames.QQ;}return null;}  }
class C{  public boolean isUseSSL(){  return useSSL;}  }
class C{  @Override protected Instances process(Instances instances) throws Exception {  Instances result;  int i;  int n;  double[] values;  String value;  Instance inst;  Instance newInst;  if (!isFirstBatchDone()) {    setOutputFormat(determineOutputFormat(getInputFormat()));  }  result=new Instances(getOutputFormat());  for (i=0; i < instances.numInstances(); i++) {    inst=instances.instance(i);    values=inst.toDoubleArray();    for (n=0; n < values.length; n++) {      if (!m_Cols.isInRange(n) || !instances.attribute(n).isNumeric() || inst.isMissing(n)) {        continue;      }      if (instances.attribute(n).type() == Attribute.DATE) {        value=inst.stringValue(n);      } else {        value=Utils.doubleToString(inst.value(n),MAX_DECIMALS);      }      int index=result.attribute(n).indexOfValue(value);      if (index == -1) {        values[n]=Utils.missingValue();        ;      } else {        values[n]=index;      }    }    if (inst instanceof SparseInstance) {      newInst=new SparseInstance(inst.weight(),values);    } else {      newInst=new DenseInstance(inst.weight(),values);    }    newInst.setDataset(getOutputFormat());    copyValues(newInst,false,inst.dataset(),getOutputFormat());    result.add(newInst);  }  return result;}  }
class C{  private static Analytics initializeAnalytics() throws Exception {  Credential credential=authorize();  return new Analytics.Builder(httpTransport,JSON_FACTORY,credential).setApplicationName(APPLICATION_NAME).build();}  }
class C{  @Override public void accept(final MethodVisitor mv){switch (type) {case Opcodes.F_NEW:case Opcodes.F_FULL:    mv.visitFrame(type,local.size(),asArray(local),stack.size(),asArray(stack));  break;case Opcodes.F_APPEND:mv.visitFrame(type,local.size(),asArray(local),0,null);break;case Opcodes.F_CHOP:mv.visitFrame(type,local.size(),null,0,null);break;case Opcodes.F_SAME:mv.visitFrame(type,0,null,0,null);break;case Opcodes.F_SAME1:mv.visitFrame(type,0,null,1,asArray(stack));break;}}  }
class C{  public IonJoeModifications(List<Graph> pags){  for (  Graph pag : pags) {    this.input.add(pag);  }  for (  Graph pag : input) {    for (    Node node : pag.getNodes()) {      if (!variables.contains(node.getName())) {        this.variables.add(node.getName());      }    }    for (    Triple triple : getAllTriples(pag)) {      if (pag.isDefNoncollider(triple.getX(),triple.getY(),triple.getZ())) {        pag.addUnderlineTriple(triple.getX(),triple.getY(),triple.getZ());      }    }  }}  }
class C{  public AccessToken createToken(String customerId,ClientPK clientPk,String userId,Long creationTimestamp,Long validityMillis,AccessToken.Type type,String refreshTokenId){  AppContext rootContext=ServiceUtils.getInstance().getRootUserContext(customerId);  Long exp=null;  if (validityMillis != null) {    exp=(creationTimestamp == null) ? System.currentTimeMillis() : creationTimestamp;    exp+=validityMillis;  }  AccessTokenPK tokenId=new AccessTokenPK(UUID.randomUUID().toString());  String clientId=clientPk == null ? null : clientPk.getClientId();  AccessToken newToken=new AccessToken(tokenId,customerId,clientId,exp);  newToken.setUserId(userId);  newToken.setType(type);  newToken.setRefreshToken(refreshTokenId);  AccessToken token=DAOFactory.getDAOFactory().getDAO(AccessToken.class).create(rootContext,newToken);  return token;}  }
class C{  @SuppressWarnings("unchecked") public ClassNode transform(){  List<MethodNode> methodNodes=cn.methods;  for (  MethodNode mn : methodNodes) {    if (transformMethod(mn)) {      mn.maxStack++;    }  }  return cn;}  }
class C{  public boolean hasDirtyFailed(){  assert Thread.holdsLock(EndpointEntry.this);  return dirtyFailed;}  }
class C{  private void handlePropertyChangeEvent(IPreferenceStore childPreferenceStore,PropertyChangeEvent event){  String property=event.getProperty();  Object oldValue=event.getOldValue();  Object newValue=event.getNewValue();  IPreferenceStore visibleStore=getVisibleStore(property);  if (visibleStore == null && newValue != null)   visibleStore=childPreferenceStore;  if (visibleStore == null) {    if (oldValue != null)     firePropertyChangeEvent(event);  } else   if (visibleStore == childPreferenceStore) {    if (oldValue != null) {      firePropertyChangeEvent(event);    } else {      IPreferenceStore oldVisibleStore=null;      int i=0;      int length=fPreferenceStores.length;      while (i < length && fPreferenceStores[i++] != visibleStore) {      }      while (oldVisibleStore == null && i < length) {        if (fPreferenceStores[i].contains(property))         oldVisibleStore=fPreferenceStores[i];        i++;      }      if (oldVisibleStore == null) {        firePropertyChangeEvent(event);      } else {        oldValue=getOtherValue(property,oldVisibleStore,newValue);        if (!oldValue.equals(newValue))         firePropertyChangeEvent(property,oldValue,newValue);      }    }  } else {    boolean eventBeforeVisibleStore=false;    for (int i=0, length=fPreferenceStores.length; i < length; i++) {      IPreferenceStore store=fPreferenceStores[i];      if (store == visibleStore)       break;      if (store == childPreferenceStore) {        eventBeforeVisibleStore=true;        break;      }    }    if (eventBeforeVisibleStore) {      newValue=getOtherValue(property,visibleStore,oldValue);      if (!newValue.equals(oldValue))       firePropertyChangeEvent(property,oldValue,newValue);    }  }}  }
class C{  public static String md5Hash(String string) throws NoSuchAlgorithmException {  return md5Hash(string.getBytes(StandardCharsets.UTF_8));}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private boolean matchesEntityTypeFilter(MetadataReader reader,MetadataReaderFactory readerFactory) throws IOException {  for (  TypeFilter filter : ENTITY_TYPE_FILTERS) {    if (filter.match(reader,readerFactory)) {      return true;    }  }  return false;}  }
class C{  private void connect(){  if (!connected) {    updateInfo();    String connectString="tcp://" + connectAddress + ":"+ connectPort;    if (clientId == null || clientId.length() < 1) {      out(getDate() + Messages.MqttClientView_15 + connectString+ Messages.MqttClientView_16);      return;    }    try {      if (firstConnect) {        mqttClient=new MqttClient(connectString,clientId);        mqttClient.setCallback(this);        firstConnect=false;      }    } catch (    MqttException e) {      out(getDate() + Messages.MqttClientView_17 + e.getMessage());      e.printStackTrace();    }    connOpts=new MqttConnectOptions();    connOpts.setCleanSession(cleanStart);    connOpts.setConnectionTimeout(30);    connOpts.setKeepAliveInterval(keepAlive);    if (username.length() > 0 && password.length() > 0) {      connOpts.setPassword(password.toCharArray());      connOpts.setUserName(username);    }    if (useWill) {      if (willTopic == null || willTopic.equals("")) {        out(Messages.MqttClientView_19);        return;      }      connOpts.setWill(mqttClient.getTopic(willTopic),willMessage.getBytes(),willQos,willRetain);    }    try {      out(getDate() + Messages.MqttClientView_20 + connectString);      mqttClient.connect(connOpts);      connected=true;      out(getDate() + Messages.MqttClientView_21 + clientId);    } catch (    MqttException e) {      out(getDate() + Messages.MqttClientView_22 + e.getMessage());      e.printStackTrace();    }  } else {    out(Messages.MqttClientView_23);  }}  }
class C{  public float convertPixelsToDp(float px){  Resources resources=getResources();  DisplayMetrics metrics=resources.getDisplayMetrics();  float dp=px / ((float)metrics.densityDpi / DisplayMetrics.DENSITY_DEFAULT);  return dp;}  }
class C{  public CompletableFuture<Void> close(){  return CompletableFuture.completedFuture(null);}  }
class C{  public Range(int location,int length){  this.location=location;  this.length=length;}  }
class C{  protected SoftwareAttribute(){  super(SOFTWARE);}  }
class C{  public void cancelButtonActionPerformed(){  editMode=false;  curNode=null;  addButton.setVisible(true);  editButton.setVisible(true);  deleteButton.setVisible(true);  doneButton.setVisible(true);  updateButton.setVisible(false);  cancelButton.setVisible(false);  nodeAddrField.setVisible(true);  nodeAddrStatic.setVisible(false);  statusText1.setText(stdStatus1);  statusText2.setText(stdStatus2);  statusText3.setText(stdStatus3);}  }
class C{  private static boolean discardStream(HttpEngine httpEngine,InputStream responseBodyIn){  Connection connection=httpEngine.connection;  if (connection == null)   return false;  Socket socket=connection.getSocket();  if (socket == null)   return false;  try {    int socketTimeout=socket.getSoTimeout();    socket.setSoTimeout(DISCARD_STREAM_TIMEOUT_MILLIS);    try {      Util.skipAll(responseBodyIn);      return true;    }  finally {      socket.setSoTimeout(socketTimeout);    }  } catch (  IOException e) {    return false;  }}  }
class C{  public static void main(String[] args){  TestCmndLineClass tester=new TestCmndLineClass();  run(tester,ARGS1,TEST,NEGATED_TEST);  run(tester,ARGS2,TEST,NEGATED_TEST);  tester.runDiffs(FILES_TO_DIFF);}  }
class C{  public boolean search(Iterable<T> collection,T t){  Iterator<T> iter=collection.iterator();  while (iter.hasNext()) {    if (iter.next().equals(t)) {      return true;    }  }  return false;}  }
class C{  @Override public boolean isDiscardElement(String name){  return false;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void sendDCCppMessage(DCCppMessage m,DCCppListener reply){  log.debug("queue DCCpp packet: " + m.toString());  try {synchronized (xmtHandler) {      xmtList.addLast(m);      xmtHandler.notify();    }  } catch (  Exception e) {    log.warn("passing to xmit: unexpected exception: " + e);  }}  }
class C{  public MatsimNetworkReader(CoordinateTransformation transformation,Network network){  this.transformation=transformation;  this.network=network;}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.ANNOTATION;}  }
class C{  public static MatchRecognizeRegEx unmap(RowRegexExprNode pattern){  return unmapExpressionDeepRowRegex(pattern,new StatementSpecUnMapContext());}  }
class C{  private void exportData(boolean markCompleted) throws IOException, EncryptionException {  FormController formController=Collect.getInstance().getFormController();  publishProgress(Collect.getInstance().getString(R.string.survey_saving_collecting_message));  ByteArrayPayload payload=formController.getFilledInFormXml();  String instancePath=formController.getInstancePath().getAbsolutePath();  publishProgress(Collect.getInstance().getString(R.string.survey_saving_saving_message));  exportXmlFile(payload,instancePath);  updateInstanceDatabase(true,true);  if (markCompleted) {    boolean canEditAfterCompleted=formController.isSubmissionEntireForm();    boolean isEncrypted=false;    File instanceXml=formController.getInstancePath();    File submissionXml=new File(instanceXml.getParentFile(),"submission.xml");    payload=formController.getSubmissionXml();    publishProgress(Collect.getInstance().getString(R.string.survey_saving_finalizing_message));    exportXmlFile(payload,submissionXml.getAbsolutePath());    EncryptedFormInformation formInfo=EncryptionUtils.getEncryptedFormInformation(mUri,formController.getSubmissionMetadata());    if (formInfo != null) {      canEditAfterCompleted=false;      publishProgress(Collect.getInstance().getString(R.string.survey_saving_encrypting_message));      EncryptionUtils.generateEncryptedSubmission(instanceXml,submissionXml,formInfo);      isEncrypted=true;    }    updateInstanceDatabase(false,canEditAfterCompleted);    if (!canEditAfterCompleted) {      if (!instanceXml.delete()) {        String msg="Error deleting " + instanceXml.getAbsolutePath() + " prior to renaming submission.xml";        Log.e(t,msg);        throw new IOException(msg);      }      if (!submissionXml.renameTo(instanceXml)) {        String msg="Error renaming submission.xml to " + instanceXml.getAbsolutePath();        Log.e(t,msg);        throw new IOException(msg);      }    } else {      if (!submissionXml.delete()) {        String msg="Error deleting " + submissionXml.getAbsolutePath() + " (instance is re-openable)";        Log.w(t,msg);      }    }    if (isEncrypted) {      if (!EncryptionUtils.deletePlaintextFiles(instanceXml)) {        Log.e(t,"Error deleting plaintext files for " + instanceXml.getAbsolutePath());      }    }  }}  }
class C{  public boolean reverseAccrualIt(){  log.info(toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_REVERSEACCRUAL);  if (m_processMsg != null)   return false;  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_REVERSEACCRUAL);  if (m_processMsg != null)   return false;  return false;}  }
class C{  @Override public long ramBytesUsed(){  return fst == null ? 0 : fst.ramBytesUsed();}  }
class C{  public boolean writeHeader(OutputStream os){  try {    writeInt(os,CACHE_MAGIC);    writeString(os,key);    writeString(os,etag == null ? "" : etag);    writeLong(os,serverDate);    writeLong(os,ttl);    writeLong(os,softTtl);    writeStringStringMap(responseHeaders,os);    writeLong(os,lastModified);    os.flush();    return true;  } catch (  IOException e) {    VolleyLog.d("%s",e.toString());    return false;  }}  }
class C{  private static int checkPartPosition(PduPart part){  assert (null != part);  if ((null == mTypeParam) && (null == mStartParam)) {    return THE_LAST_PART;  }  if (null != mStartParam) {    byte[] contentId=part.getContentId();    if (null != contentId) {      if (true == Arrays.equals(mStartParam,contentId)) {        return THE_FIRST_PART;      }    }  }  if (null != mTypeParam) {    byte[] contentType=part.getContentType();    if (null != contentType) {      if (true == Arrays.equals(mTypeParam,contentType)) {        return THE_FIRST_PART;      }    }  }  return THE_LAST_PART;}  }
class C{  public boolean equals(Object obj){  if (obj == null) {    return false;  }  CompositeType other;  try {    other=(CompositeType)obj;  } catch (  ClassCastException e) {    return false;  }  if (!this.getTypeName().equals(other.getTypeName())) {    return false;  }  if (!this.nameToType.equals(other.nameToType)) {    return false;  }  return true;}  }
class C{  public final boolean updateInsets(final Insets newInsets){synchronized (getStateLock()) {    if (insets.equals(newInsets)) {      return false;    }    insets=newInsets;  }  return true;}  }
class C{  protected void nearestNeighbours(MyHeap heap,BallNode node,Instance target,int k) throws Exception {  double distance=Double.NEGATIVE_INFINITY;  if (heap.totalSize() >= k)   distance=m_DistanceFunction.distance(target,node.getPivot());  if (distance > -0.000001 && Math.sqrt(heap.peek().distance) < distance - node.getRadius()) {    return;  } else   if (node.m_Left != null && node.m_Right != null) {    if (m_TreeStats != null) {      m_TreeStats.incrIntNodeCount();    }    double leftPivotDist=Math.sqrt(m_DistanceFunction.distance(target,node.m_Left.getPivot(),Double.POSITIVE_INFINITY));    double rightPivotDist=Math.sqrt(m_DistanceFunction.distance(target,node.m_Right.getPivot(),Double.POSITIVE_INFINITY));    double leftBallDist=leftPivotDist - node.m_Left.getRadius();    double rightBallDist=rightPivotDist - node.m_Right.getRadius();    if (leftBallDist < 0 && rightBallDist < 0) {      if (leftPivotDist < rightPivotDist) {        nearestNeighbours(heap,node.m_Left,target,k);        nearestNeighbours(heap,node.m_Right,target,k);      } else {        nearestNeighbours(heap,node.m_Right,target,k);        nearestNeighbours(heap,node.m_Left,target,k);      }    } else {      if (leftBallDist < rightBallDist) {        nearestNeighbours(heap,node.m_Left,target,k);        nearestNeighbours(heap,node.m_Right,target,k);      } else {        nearestNeighbours(heap,node.m_Right,target,k);        nearestNeighbours(heap,node.m_Left,target,k);      }    }  } else   if (node.m_Left != null || node.m_Right != null) {    throw new Exception("Error: Only one leaf of the built ball tree is " + "assigned. Please check code.");  } else   if (node.m_Left == null && node.m_Right == null) {    if (m_TreeStats != null) {      m_TreeStats.updatePointCount(node.numInstances());      m_TreeStats.incrLeafCount();    }    for (int i=node.m_Start; i <= node.m_End; i++) {      if (target == m_Instances.instance(m_InstList[i]))       continue;      if (heap.totalSize() < k) {        distance=m_DistanceFunction.distance(target,m_Instances.instance(m_InstList[i]),Double.POSITIVE_INFINITY,m_Stats);        heap.put(m_InstList[i],distance);      } else {        MyHeapElement head=heap.peek();        distance=m_DistanceFunction.distance(target,m_Instances.instance(m_InstList[i]),head.distance,m_Stats);        if (distance < head.distance) {          heap.putBySubstitute(m_InstList[i],distance);        } else         if (distance == head.distance) {          heap.putKthNearest(m_InstList[i],distance);        }      }    }  }}  }
class C{  public void addObj(String file){  addModel(file,ModelPool.OBJ);}  }
class C{  public void releaseLater(GridUnsafeCompoundMemory compound){  assert currOp.get() != null : "must be called in begin-end block";  head.get().add(compound);}  }
class C{  public static BinaryMessage load(String message){  if (!message.matches("[01]*")) {    throw new IllegalArgumentException("Message must contain only zeros and ones");  }  BinaryMessage buffer=new BinaryMessage(message.length());  for (int x=0; x < message.length(); x++) {    if (message.substring(x,x + 1).contentEquals("1")) {      buffer.set(x);    }  }  return buffer;}  }
class C{  public void clearTableBuilders(){  this.tableBuilders.clear();}  }
class C{  public BuildImageParams withMemorySwapLimit(long memorySwapLimit){  this.memorySwapLimit=memorySwapLimit;  return this;}  }
class C{  public boolean isUsedForVista(){  return usedForVista;}  }
class C{  public boolean isParityCorrect(byte[][] shards,int firstByte,int byteCount){  checkBuffersAndSizes(shards,firstByte,byteCount);  byte[][] toCheck=new byte[parityShardCount][];  System.arraycopy(shards,dataShardCount,toCheck,0,parityShardCount);  return codingLoop.checkSomeShards(parityRows,shards,dataShardCount,toCheck,parityShardCount,firstByte,byteCount,null);}  }
class C{  public void test1(){  final GridLayoutManager layoutManager=new GridLayoutManager(1,2,new Insets(0,0,0,0),0,0);  final JPanel panel=new JPanel(layoutManager);  final JTextField field1=new JTextField();  field1.setMinimumSize(new Dimension(110,10));  field1.setPreferredSize(new Dimension(120,10));  final JTextField field2=new JTextField();  field2.setMinimumSize(new Dimension(215,10));  field2.setPreferredSize(new Dimension(225,10));  panel.add(field1,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  panel.add(field2,new GridConstraints(0,1,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  final Dimension preferredSize=panel.getPreferredSize();  assertEquals(345,preferredSize.width);  final Dimension minSize=panel.getMinimumSize();  assertEquals(325,minSize.width);  panel.setSize(preferredSize.width,preferredSize.height);  panel.doLayout();  assertEquals(120,field1.getWidth());  assertEquals(225,field2.getWidth());  panel.setSize(400,panel.getWidth());  panel.invalidate();  panel.doLayout();}  }
class C{  public static XMLTree from(Path path) throws IOException {  return new XMLTree(readAllBytes(path));}  }
class C{  public String generateID(String prefix){  Integer maxId=(Integer)prefixMap.get(prefix);  if (maxId == null) {    maxId=new Integer(0);    prefixMap.put(prefix,maxId);  }  maxId=new Integer(maxId.intValue() + 1);  prefixMap.put(prefix,maxId);  return prefix + maxId;}  }
class C{  public FullFrameRect(IFilter program){  mFilter=program;  Matrix.setIdentityM(IDENTITY_MATRIX,0);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  static IndexOutOfBoundsException throwIndexOutOfBoundsException(int index,int size){  throw new IndexOutOfBoundsException("Invalid index " + index + ", size is "+ size);}  }
class C{  public static void startAttack(final Player player,final RPEntity victim){  if (player.equals(victim)) {    return;  }  if (!victim.isAttackable()) {    if ((victim instanceof SpeakerNPC)) {      ((SpeakerNPC)victim).say(player.getName() + ", if you want my attention, just say #hi.");    }    logger.info("REJECTED. " + player.getName() + " is attacking "+ victim.getName());    return;  }  if ((victim instanceof Player) || (victim instanceof DomesticAnimal)) {    final StendhalRPZone zone=player.getZone();    if (zone.isInProtectionArea(victim) || (zone.isInProtectionArea(player))) {      logger.info("REJECTED. " + victim.getName() + " is protected by zone");      final String name=getNiceVictimName(victim);      player.sendPrivateText("The powerful protective aura in this place prevents you from attacking " + name + ".");      return;    }    if (victim instanceof Player) {      if (!mayAttackPlayer(player,(Player)victim)) {        player.sendPrivateText("Your conscience would trouble you if you carried out this attack.");        return;      }    } else {      final Player owner=((DomesticAnimal)victim).getOwner();      if ((owner != null) && (owner != player)) {        player.sendPrivateText("You pity " + getNiceVictimName(victim) + " too much to kill it.");        return;      }    }    logger.info(player.getName() + " is attacking " + victim.getName());  }  StendhalKillLogDAO killLog=DAORegister.get().get(StendhalKillLogDAO.class);  new GameEvent(player.getName(),"attack",victim.getName(),killLog.entityToType(player),killLog.entityToType(victim)).raise();  player.setTarget(victim);  player.faceToward(victim);  player.applyClientDirection(false);  player.notifyWorldAboutChanges();}  }
class C{  public ActionErrors validate(ActionMapping mapping,HttpServletRequest request){  ActionErrors errors=new ActionErrors();  if (estados.length == 0)   errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(ArchivoDetails.SOLICITUDES_ESTADOS_PRESTAMO,request.getLocale())));  if (!new CustomDate(this.fechaFinFormatoEntrega,this.fechaAEntrega,this.fechaMEntrega,this.fechaDEntrega,this.fechaSEntrega).validate() || !new CustomDate(this.fechaIniFormatoEntrega,this.fechaIniAEntrega,this.fechaIniMEntrega,this.fechaIniDEntrega,this.fechaIniSEntrega).validate() || !new CustomDate(this.fechaFinFormatoEntrega,this.fechaFinAEntrega,this.fechaFinMEntrega,this.fechaFinDEntrega,this.fechaFinSEntrega).validate()) {    errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_DATE,Messages.getString(Constants.ETIQUETA_FECHA2,request.getLocale())));  }  return errors;}  }
class C{  @SuppressWarnings("unchecked") private Class<? extends InterpreterSelector> loadInterpreterSelectorClass() throws ClassNotFoundException {  return (Class<? extends InterpreterSelector>)ClassUtils.loadClass(classLoader,interpreterSelectorClass);}  }
class C{  private void gaincLevelMode3s(AtracGainInfo dst,AtracGainInfo ref){  for (int i=0; i < dst.numPoints; i++) {    dst.levCode[i]=(i >= ref.numPoints ? 7 : ref.levCode[i]);  }}  }
class C{  public void writeDoubleArray(double[] array,boolean append){  if (file.exists()) {    System.out.println("Warning : the file " + file.getName() + " already exists !");  }  FileOutputStream fos=null;  try {    fos=new FileOutputStream(file,append);  } catch (  FileNotFoundException ex) {    throw new IllegalArgumentException(ex.toString());  }  BufferedOutputStream bos=new BufferedOutputStream(fos);  BinaryOutputStream bs=new BinaryOutputStream(bos,bigEndian);  bs.writeDoubleArray(array,append);}  }
class C{  public boolean addDominated(int objectId){  return this.dominated.add(objectId);}  }
class C{  public BluetoothPeerNetwork(){}  }
class C{  public static boolean isAVplexPort(StoragePort storagePort,DbClient dbClient){  StorageSystem storagePortSystem=dbClient.queryObject(StorageSystem.class,storagePort.getStorageDevice());  boolean isAVplexPort=ConnectivityUtil.isAVPlex(storagePortSystem);  if (isAVplexPort) {    _log.info("Storage port {} is a VPLEX port",storagePort.getId());  }  return isAVplexPort;}  }
class C{  public boolean doesAnyGracePeriodOfTypeExpireAfter(GracePeriodStatus gracePeriodType,DateTime asOfDate){  for (  GracePeriod gracePeriod : getGracePeriods()) {    if ((gracePeriod.getType() == gracePeriodType) && gracePeriod.getExpirationTime().isAfter(asOfDate)) {      return true;    }  }  return false;}  }
class C{  public Rectangle(RotatedRect rect){  this.rect=rect;}  }
class C{  public List<byte[]> decrypt(List<ChunkServer.ChunkInfo> chunkInfoList,byte[] data) throws BadDataException {  List<byte[]> decrypted=new ArrayList<>();  int offset=0;  for (  ChunkServer.ChunkInfo chunkInfo : chunkInfoList) {    byte[] decryptedChunk=decrypt(chunkInfo,data,offset);    decrypted.add(decryptedChunk);    offset+=chunkInfo.getChunkLength();  }  return decrypted;}  }
class C{  public SyncError(SyncError other){  __isset_bitfield=other.__isset_bitfield;  this.errorCode=other.errorCode;  if (other.isSetMessage()) {    this.message=other.message;  }}  }
class C{  public boolean disconnectAudio(){  if (mService != null && isEnabled()) {    try {      return mService.disconnectAudio();    } catch (    RemoteException e) {      Log.e(TAG,e.toString());    }  } else {    Log.w(TAG,"Proxy not attached to service");    if (DBG)     Log.d(TAG,Log.getStackTraceString(new Throwable()));  }  return false;}  }
class C{  public boolean isDeleted(){  return deleted;}  }
class C{  public void copyAndAddExtension(DERObjectIdentifier oid,boolean critical,X509Certificate cert) throws CertificateParsingException {  this.copyAndAddExtension(oid.getId(),critical,cert);}  }
class C{  public Bundler putSerializable(String key,Serializable value){  bundle.putSerializable(key,value);  return this;}  }
class C{  private TypeSignature parseTypeSignature(){switch (current()) {case 'B':case 'C':case 'D':case 'F':case 'I':case 'J':case 'S':case 'Z':    return parseBaseType();default :  return parseFieldTypeSignature();}}  }
class C{  public String toString(){  return this.mode == 'd' ? this.writer.toString() : null;}  }
class C{  public ClusterTaskConfig build(){  return create(cpus,memoryMb,diskMb);}  }
class C{  Node[] genTrees(int depth,int ntrees){  Node[] trees=new Node[ntrees];  for (int i=0; i < ntrees; i++) {    trees[i]=new Node(null,depth);  }  return trees;}  }
class C{  public ContainerVmSchedulerTimeShared(List<? extends ContainerVmPe> pelist){  super(pelist);  setMipsMapRequested(new HashMap<String,List<Double>>());}  }
class C{  private static int eatIdentToLeft(IDocument document,int position,String partitioning){  if (position < 0)   return -1;  Assert.isTrue(position < document.getLength());  int p=firstNonWhitespaceBackward(document,position,partitioning,-1);  if (p == -1)   return -1;  try {    while (p >= 0) {      char ch=document.getChar(p);      if (Character.isJavaIdentifierPart(ch)) {        p--;        continue;      }      if (Character.isWhitespace(ch) && p != position)       return p + 1; else       return -1;    }    return 0;  } catch (  BadLocationException e) {  }  return -1;}  }
class C{  public static double quantile(double val,double sigma){  if (!(val >= 0.) || !(val <= 1.)) {    return Double.NaN;  } else   if (val == 0.) {    return 0.;  } else   if (val == 1.) {    return Double.POSITIVE_INFINITY;  } else {    return sigma * Math.sqrt(-2. * Math.log(val));  }}  }
class C{  public Object evaluate(Reader in,String fileName) throws CompilationFailedException {  Script script=null;  try {    script=parse(in,fileName);    return script.run();  }  finally {    if (script != null) {      InvokerHelper.removeClass(script.getClass());    }  }}  }
class C{  public void recordPatternValues(Vertex word,Vertex sentence,Map<Vertex,Integer> matches,Network network,List<Vertex> defer){  Collection<Relationship> sentenceRelations=word.getRelationships(Primitive.PATTERN);  if (sentenceRelations != null) {    if ((defer != null) && sentenceRelations.size() > 100) {      defer.add(word);      return;    }    int value=computeWordValue(word);    for (    Relationship sentenceRelation : sentenceRelations) {      Vertex otherSentence=sentenceRelation.getTarget();      if (sentence != otherSentence) {        if (otherSentence.hasAnyResponseRelationship()) {          Integer count=matches.get(otherSentence);          if (count == null) {            count=0;          }          matches.put(otherSentence,count + value);        }      }    }    Integer count=matches.get(sentence);    if (count == null) {      count=0;    }    matches.put(sentence,count + value);  }}  }
class C{  public Vector3f mult(Vector3f vec,Vector3f store){  if (null == vec) {    logger.warning("Provided vector is null, null returned.");    return null;  }  if (store == null)   store=new Vector3f();  return store.set(x * vec.x,y * vec.y,z * vec.z);}  }
class C{  public void loading(){  mHintView.setVisibility(View.GONE);  mProgressBar.setVisibility(View.VISIBLE);  layout_progress.setVisibility(View.VISIBLE);  txt_progresstext.setVisibility(View.VISIBLE);}  }
class C{  public label addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  public MirroredTypeException(TypeMirror type){  super("Attempt to access Class object for TypeMirror " + type.toString(),type);  this.type=type;}  }
class C{  static public XObject create(Object val,XPathContext xctxt){  return XObjectFactory.create(val,xctxt);}  }
class C{  public BST(){}  }
class C{  public Junction add(Expression expression){  this.getChildren().add(expression);  return this;}  }
class C{  public long length() throws SQLException {  byte[] info=getInfo(BLOB_LENGTH_REQUEST,20);  return interpretLength(info,0);}  }
class C{  public TunedSparseMatrix(final int numRows,final int numCols,final int initialCapacityPerRow){  super(numRows,numCols);  this.numRows=numRows;  this.numCols=numCols;  this.initialCapacityPerRow=initialCapacityPerRow;  this.values=new double[numRows][];  this.cols=new int[numRows][];  this.maxIndices=new int[numRows];  for (int i=0; i < numRows; i++) {    this.values[i]=new double[initialCapacityPerRow];    this.cols[i]=new int[initialCapacityPerRow];    this.maxIndices[i]=0;  }}  }
class C{  public WrapperResult sendData(ByteBuffer src) throws IOException {  WrapperResult r=null;  while (src.remaining() > 0) {    r=wrapper.wrapAndSend(src);    Status status=r.result.getStatus();    if (status == Status.CLOSED) {      doClosure();      return r;    }    HandshakeStatus hs_status=r.result.getHandshakeStatus();    if (hs_status != HandshakeStatus.FINISHED && hs_status != HandshakeStatus.NOT_HANDSHAKING) {      doHandshake(hs_status);    }  }  return r;}  }
class C{  public void addAddress(AddressEntity address){  addresses.add(address);}  }
class C{  private synchronized void enumerateStringProperties(Hashtable<String,String> h){  if (defaults != null) {    defaults.enumerateStringProperties(h);  }  for (Enumeration<?> e=keys(); e.hasMoreElements(); ) {    Object k=e.nextElement();    Object v=get(k);    if (k instanceof String && v instanceof String) {      h.put((String)k,(String)v);    }  }}  }
class C{  static <T>Collection<T> cast(Iterable<T> iterable){  return (Collection<T>)iterable;}  }
class C{  public Matrix4x3f m10(float m10){  this.m10=m10;  properties&=~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION);  return this;}  }
class C{  public boolean isEmpty(){  return count == 0;}  }
class C{  private Vset assign(Environment env,Context ctx,Vset vset){  if (field.isLocal()) {    LocalMember local=(LocalMember)field;    if (local.scopeNumber < ctx.frameNumber) {      env.error(where,"assign.to.uplevel",id);    }    if (local.isFinal()) {      if (!local.isBlankFinal()) {        env.error(where,"assign.to.final",id);      } else       if (!vset.testVarUnassigned(local.number)) {        env.error(where,"assign.to.blank.final",id);      }    }    vset.addVar(local.number);    local.writecount++;  } else   if (field.isFinal()) {    vset=FieldExpression.checkFinalAssign(env,ctx,vset,where,field);  }  return vset;}  }
class C{  public boolean isIgnore(){  return typeString.startsWith(IGNORE);}  }
class C{  public JSONWriter value(boolean b) throws JSONException {  return this.append(b ? "true" : "false");}  }
class C{  public static TypeReference newTypeReference(int sort){  return new TypeReference(sort << 24);}  }
class C{  private void resetDialogPath(){  mDialogPath=null;}  }
class C{  public static JsonValue value(boolean value){  return value ? TRUE : FALSE;}  }
class C{  public boolean hasType(){  return getType() != null;}  }
class C{  public static String writeActionsToString(OFInstructionWriteActions inst,Logger log) throws Exception {  return ActionUtils.actionsToString(inst.getActions(),log);}  }
class C{  private void enable(){  fPresenter=getPresenterProvider().get();  fPresenter.install(fSourceViewer,fPresentationReconciler);  if (styledTextXtextAdapter != null) {    fReconciler=reconcilerProvider.get();    fReconciler.install(styledTextXtextAdapter,fSourceViewer,fPresenter);  }}  }
class C{  private int readNodeAddress(){  int addr=-1;  try {    addr=Integer.parseInt(nodeAddrField.getText());  } catch (  Exception e) {    statusText1.setText(rb.getString("Error5"));    statusText1.setVisible(true);    errorInStatus1=true;    resetNotes2();    return -1;  }  if ((addr < 0) || (addr > 255)) {    statusText1.setText(rb.getString("Error6"));    statusText1.setVisible(true);    errorInStatus1=true;    resetNotes2();    return -1;  }  return (addr);}  }
class C{  public void verifyLoginCredentials(String username,String password) throws InvalidLogin, StorageFault {  final String methodName="verifyLoginCredentials(): ";  log.debug(methodName + "Entry with inputs username[" + username+ "] password[****]");  try {    if (Util.isEmpty(username) || Util.isEmpty(password)) {      throw FaultUtil.InvalidLogin("Username or password is invalid");    }    if (username.contains("\\")) {      String[] domainAduser=username.split("\\\\");      if (domainAduser.length == 2) {        if (Util.isEmpty(domainAduser) || Util.isEmpty(domainAduser[0]) || Util.isEmpty(domainAduser[1])) {          throw FaultUtil.InvalidLogin("Username is invalid[" + username + "]");        }        StringBuffer aduser=new StringBuffer(domainAduser[1].trim());        aduser.append("@").append(domainAduser[0].trim());        log.debug(methodName + "Username for ViPR is [" + aduser.toString()+ "]");        _syncManager.verifyLogin(aduser.toString(),password);      } else {        throw FaultUtil.InvalidLogin("Username is invalid[" + username + "]");      }    } else {      _syncManager.verifyLogin(username,password);    }  } catch (  SOSAuthenticationFailure e) {    log.error(methodName + "StorageOSAuthenticationFailure occured",e);    throw FaultUtil.InvalidLogin(e);  }catch (  SOSFailure e) {    log.error(methodName + "StorageOSFailure occured",e);    throw FaultUtil.StorageFault(e);  }  log.debug(methodName + "Exit");}  }
class C{  public JSONObject put(String key,Object value) throws JSONException {  if (key == null) {    throw new NullPointerException("Null key.");  }  if (value != null) {    testValidity(value);    this.map.put(key,value);  } else {    this.remove(key);  }  return this;}  }
class C{  public void logBenchmarks(Logger logger){  if (benchmarkHelper != null)   benchmarkHelper.logBenchmarks(logger);  if (benchmarkEmbeddedHelper != null) {    benchmarkEmbeddedHelper.logBenchmarks(logger);  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:23.443 -0500",hash_original_method="D6F064C21D8F72C9BE34FD8563F8D233",hash_generated_method="C03CE451C689F3424295E47270350D88") public void delete(long key){  int i=binarySearch(mKeys,0,mSize,key);  if (i >= 0) {    if (mValues[i] != DELETED) {      mValues[i]=DELETED;      mGarbage=true;    }  }}  }
class C{  public static void packageParameters(RVMMethod method,Object thisArg,Object[] otherArgs,WordArray GPRs,double[] FPRs,byte[] FPRmeta,WordArray Spills){  int GPR=GPRs.length();  int FPR=FPRs.length;  int Spill=Spills.length();  int gp=FIRST_VOLATILE_GPR.value();  int fp=FIRST_VOLATILE_FPR.value();  if (!method.isStatic()) {    if (gp > LAST_VOLATILE_GPR.value()) {      Spills.set(--Spill,Reflection.unwrapObject(thisArg).toWord());    } else {      gp++;      GPRs.set(--GPR,Reflection.unwrapObject(thisArg).toWord());    }  }  TypeReference[] types=method.getParameterTypes();  for (int i=0; i < types.length; i++) {    TypeReference t=types[i];    if (t.isLongType()) {      long l=Reflection.unwrapLong(otherArgs[i]);      if (VM.BuildFor64Addr) {        if (gp > LAST_VOLATILE_GPR.value()) {          Spills.set(--Spill,Word.fromLong(l));        } else {          gp++;          GPRs.set(--GPR,Word.fromLong(l));        }      } else {        Word hi=Word.fromIntZeroExtend((int)(l >>> 32));        Word lo=Word.fromIntZeroExtend((int)l);        if (gp > LAST_VOLATILE_GPR.value()) {          Spills.set(--Spill,hi);          Spills.set(--Spill,lo);        } else {          gp++;          GPRs.set(--GPR,hi);          if (gp > LAST_VOLATILE_GPR.value()) {            Spills.set(--Spill,lo);          } else {            gp++;            GPRs.set(--GPR,lo);          }        }      }    } else     if (t.isFloatType()) {      float f=Reflection.unwrapFloat(otherArgs[i]);      if (fp > LAST_VOLATILE_FPR.value()) {        Spills.set(--Spill,Word.fromIntZeroExtend(Float.floatToIntBits(f)));      } else {        fp++;        FPRs[--FPR]=f;      }    } else     if (t.isDoubleType()) {      if (fp > LAST_VOLATILE_FPR.value()) {        double d=Reflection.unwrapDouble(otherArgs[i]);        long l=Double.doubleToLongBits(d);        if (VM.BuildFor64Addr) {          Spills.set(--Spill,Word.fromLong(l));        } else {          Spills.set(--Spill,Word.fromIntZeroExtend((int)(l >>> 32)));          Spills.set(--Spill,Word.fromIntZeroExtend((int)l));        }      } else {        fp++;        FPRs[--FPR]=Reflection.unwrapDouble(otherArgs[i]);      }    } else     if (t.isBooleanType()) {      Word val=Word.fromIntZeroExtend(Reflection.unwrapBooleanAsInt(otherArgs[i]));      if (gp > LAST_VOLATILE_GPR.value()) {        Spills.set(--Spill,val);      } else {        gp++;        GPRs.set(--GPR,val);      }    } else     if (t.isByteType()) {      Word val=Word.fromIntZeroExtend(Reflection.unwrapByte(otherArgs[i]));      if (gp > LAST_VOLATILE_GPR.value()) {        Spills.set(--Spill,val);      } else {        gp++;        GPRs.set(--GPR,val);      }    } else     if (t.isCharType()) {      Word val=Word.fromIntZeroExtend(Reflection.unwrapChar(otherArgs[i]));      if (gp > LAST_VOLATILE_GPR.value()) {        Spills.set(--Spill,val);      } else {        gp++;        GPRs.set(--GPR,val);      }    } else     if (t.isShortType()) {      Word val=Word.fromIntZeroExtend(Reflection.unwrapShort(otherArgs[i]));      if (gp > LAST_VOLATILE_GPR.value()) {        Spills.set(--Spill,val);      } else {        gp++;        GPRs.set(--GPR,val);      }    } else     if (t.isIntType()) {      Word val=Word.fromIntZeroExtend(Reflection.unwrapInt(otherArgs[i]));      if (gp > LAST_VOLATILE_GPR.value()) {        Spills.set(--Spill,val);      } else {        gp++;        GPRs.set(--GPR,val);      }    } else     if (!t.isPrimitiveType()) {      Word val=Reflection.unwrapObject(otherArgs[i]).toWord();      if (gp > LAST_VOLATILE_GPR.value()) {        Spills.set(--Spill,val);      } else {        gp++;        GPRs.set(--GPR,val);      }    } else {      if (VM.VerifyAssertions)       VM._assert(NOT_REACHED);    }  }}  }
class C{  public static void writeBytesCollection(DataOutput out,Collection<byte[]> bytes) throws IOException {  if (bytes != null) {    out.writeInt(bytes.size());    for (    byte[] b : bytes)     writeByteArray(out,b);  } else   out.writeInt(-1);}  }
class C{  protected void charactersRaw(char ch[],int start,int length) throws org.xml.sax.SAXException {  if (m_inEntityRef)   return;  try {    if (m_elemContext.m_startTagOpen) {      closeStartTag();      m_elemContext.m_startTagOpen=false;    }    m_ispreserve=true;    m_writer.write(ch,start,length);  } catch (  IOException e) {    throw new SAXException(e);  }}  }
class C{  public void removeColumn(int idx){  columns.remove(idx);}  }
class C{  public void before(PropertyInfoRestRep oldProps,PropertyInfoRestRep newProps){  String oldValue=oldProps.getProperty(getPropertyName());  String newValue=newProps.getProperty(getPropertyName());  if (newValue == null) {    return;  }  if (oldValue == null) {    oldValue="0";  }  if (oldValue.equals(newValue)) {    return;  }  int graceDays=Constants.GRACE_DAYS;  int intNewValue=Integer.parseInt(newValue);  if (intNewValue != 0 && (intNewValue < graceDays || intNewValue > Constants.MAX_PASSWORD_EXPIRY_IN_DAYS)) {    throw BadRequestException.badRequests.passwordInvalidExpireDays(graceDays,Constants.MAX_PASSWORD_EXPIRY_IN_DAYS);  }  int oldDays=Integer.parseInt(oldValue);  int newDays=Integer.parseInt(newValue);  String rootExpirydaysProperty=String.format(Constants.SYSTEM_PASSWORD_EXPIRY_FORMAT,"root");  String svcuserExpirydaysProperty=String.format(Constants.SYSTEM_PASSWORD_EXPIRY_FORMAT,"svcuser");  if (oldDays == 0 && newDays != 0) {    Calendar newExpireTime=Calendar.getInstance();    newExpireTime.add(Calendar.DATE,newDays);    _log.info("turn on password expire rule, update root and svcuser's expiry_date properties accordingly");    int daysAfterEpoch=PasswordUtils.getDaysAfterEpoch(newExpireTime);    _log.info("updating  root/svcuser expiry_days properties to " + daysAfterEpoch);    newProps.addProperty(rootExpirydaysProperty,String.valueOf(daysAfterEpoch));    newProps.addProperty(svcuserExpirydaysProperty,String.valueOf(daysAfterEpoch));  } else   if (newDays == 0) {    _log.info("turn off expire rule, update, update root and svcuser's expiry_date properties accordingly");    _log.info("updating  root/svcuser expiry_days properties to 0");    newProps.addProperty(rootExpirydaysProperty,"0");    newProps.addProperty(svcuserExpirydaysProperty,"0");  } else {    _log.info("re-configure expire days from " + oldDays + " to "+ newDays);    Calendar newExpireTime=_passwordHandler.getPasswordUtils().calculateExpireDateForUser("root",newDays);    int daysAfterEpoch=PasswordUtils.getDaysAfterEpoch(newExpireTime);    _log.info("updating root expiry_date property to " + daysAfterEpoch);    newProps.addProperty(rootExpirydaysProperty,String.valueOf(daysAfterEpoch));    newExpireTime=_passwordHandler.getPasswordUtils().calculateExpireDateForUser("svcuser",newDays);    daysAfterEpoch=PasswordUtils.getDaysAfterEpoch(newExpireTime);    _log.info("updating svcuser expiry_date property to " + daysAfterEpoch);    newProps.addProperty(svcuserExpirydaysProperty,String.valueOf(daysAfterEpoch));  }}  }
class C{  public Gradient(){  rebuildGradient();}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMFECompositeElement(prefix,(AbstractDocument)doc);}  }
class C{  @SuppressWarnings("deprecation") public IdentityStub(String name){  super(name);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:51.491 -0500",hash_original_method="3389153632676598B3C0211E28EEF1DE",hash_generated_method="09BFC38811F1849F3C035834F695D5CF") private static byte[] numberToCalledPartyBCDHelper(String number,boolean includeLength){  int numberLenReal=number.length();  int numberLenEffective=numberLenReal;  boolean hasPlus=number.indexOf('+') != -1;  if (hasPlus)   numberLenEffective--;  if (numberLenEffective == 0)   return null;  int resultLen=(numberLenEffective + 1) / 2;  int extraBytes=1;  if (includeLength)   extraBytes++;  resultLen+=extraBytes;  byte[] result=new byte[resultLen];  int digitCount=0;  for (int i=0; i < numberLenReal; i++) {    char c=number.charAt(i);    if (c == '+')     continue;    int shift=((digitCount & 0x01) == 1) ? 4 : 0;    result[extraBytes + (digitCount >> 1)]|=(byte)((charToBCD(c) & 0x0F) << shift);    digitCount++;  }  if ((digitCount & 0x01) == 1)   result[extraBytes + (digitCount >> 1)]|=0xF0;  int offset=0;  if (includeLength)   result[offset++]=(byte)(resultLen - 1);  result[offset]=(byte)(hasPlus ? TOA_International : TOA_Unknown);  return result;}  }
class C{  public void testMergeListeners() throws Exception {  String file1="<web-app>\r\n" + "   <context-param>\r\n" + "       <param-name>file1-c1</param-name>\r\n"+ "       <param-value>file1-v1</param-value>\r\n"+ "   </context-param>\r\n"+ "\r\n"+ "\r\n"+ "    <listener>\r\n"+ "      <listener-class>file1-lc1</listener-class>\r\n"+ "    </listener>\r\n"+ "\r\n"+ "    <listener>\r\n"+ "      <listener-class>file1-lc2</listener-class>\r\n"+ "    </listener>\r\n"+ "\r\n"+ "\r\n"+ "    <servlet>\r\n"+ "       <servlet-name>file1-S1</servlet-name>\r\n"+ "       <servlet-class>file1-C2</servlet-class>\r\n"+ "       <load-on-startup>file1-los</load-on-startup>\r\n"+ "   </servlet>\r\n"+ "</web-app>\r\n";  String file2="<web-app>\r\n" + "   <context-param>\r\n" + "       <param-name>file2-c1</param-name>\r\n"+ "       <param-value>file2-v1</param-value>\r\n"+ "   </context-param>\r\n"+ "\r\n"+ "\r\n"+ "    <listener>\r\n"+ "      <listener-class>file2-lc1</listener-class>\r\n"+ "    </listener>\r\n"+ "\r\n"+ "    <listener>\r\n"+ "      <listener-class>file2-lc2</listener-class>\r\n"+ "    </listener>\r\n"+ "\r\n"+ "\r\n"+ "    <servlet>\r\n"+ "       <servlet-name>file2-S1</servlet-name>\r\n"+ "       <servlet-class>file2-C2</servlet-class>\r\n"+ "       <load-on-startup>file2-los</load-on-startup>\r\n"+ "   </servlet>\r\n"+ "</web-app>\r\n"+ "";  WebXml file1WebXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(file1.getBytes("UTF-8")),null);  WebXml file2WebXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(file2.getBytes("UTF-8")),null);  WebXmlMerger merger=new WebXmlMerger(file1WebXml);  merger.merge(file2WebXml);  List<Element> ejbRefs=file1WebXml.getElements("listener");  assertEquals(4,ejbRefs.size());  assertEquals(((Listener)ejbRefs.get(0)).getListenerClass(),"file1-lc1");  assertEquals(((Listener)ejbRefs.get(1)).getListenerClass(),"file1-lc2");  assertEquals(((Listener)ejbRefs.get(2)).getListenerClass(),"file2-lc1");  assertEquals(((Listener)ejbRefs.get(3)).getListenerClass(),"file2-lc2");}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:09.583 -0400",hash_original_method="A9891476F065F752D65076C47DD0F56C",hash_generated_method="5E4D9365EB88F796C24EBE2347160B86") private void logoutImpl() throws LoginException {  if (subject == null) {    throw new LoginException("auth.38");  }  loggedIn=false;  Throwable firstProblem=null;  int total=0;  for (  Module module : modules) {    try {      module.module.logout();      ++total;    } catch (    Throwable ex) {      if (firstProblem == null) {        firstProblem=ex;      }    }  }  if (firstProblem != null || total == 0) {    if (firstProblem instanceof PrivilegedActionException && firstProblem.getCause() != null) {      firstProblem=firstProblem.getCause();    }    if (firstProblem instanceof LoginException) {      throw (LoginException)firstProblem;    }    throw (LoginException)new LoginException("auth.37").initCause(firstProblem);  }}  }
class C{  protected AnimatableNumberListValue(AnimationTarget target){  super(target);}  }
class C{  public static KeyStoreData loadDefaultKeystore() throws SsoKeyStoreOperationException {  return new KeyStoreData(TestTokenUtil.class.getResource("/" + TestTokenUtil.TEST_KEYSTORE_FILENAME).getFile(),TestTokenUtil.TEST_KEYSTORE_KEY.toCharArray(),TestTokenUtil.TEST_KEYSTORE_CERT_ALIAS);}  }
class C{  protected EntityAttributeSourceImpl(){  super();}  }
class C{  public static void reconcileExportGroupsHLUs(DbClient dbClient,ExportGroup exportGroup){  List<String> egVolumesWithoutHLUs=findVolumesWithoutHLUs(exportGroup);  if (!egVolumesWithoutHLUs.isEmpty()) {    for (    ExportMask thisMask : ExportMaskUtils.getExportMasks(dbClient,exportGroup)) {      Iterator<String> volumeIter=egVolumesWithoutHLUs.iterator();      while (volumeIter.hasNext()) {        URI volumeURI=URI.create(volumeIter.next());        if (thisMask.hasVolume(volumeURI)) {          String hlu=thisMask.returnVolumeHLU(volumeURI);          if (hlu != ExportGroup.LUN_UNASSIGNED_DECIMAL_STR) {            _log.info(String.format("ExportGroup %s (%s) update volume HLU: %s -> %s",exportGroup.getLabel(),exportGroup.getId(),volumeURI,hlu));            exportGroup.addVolume(volumeURI,Integer.valueOf(hlu));            volumeIter.remove();          }        }      }    }  }}  }
class C{  public void showWarning(){  graphic(new ImageView(Notifications.class.getResource("/org/controlsfx/dialog/dialog-warning.png").toExternalForm()));  show();}  }
class C{  public static ReferenceTextBuilder createHaploid(){  return new ReferenceTextBuilder(ReferenceGenome.REFERENCE_DEFAULT_HAPLOID);}  }
class C{  @Override public void onMessageReceived(String message,String deviceAddress){  boolean meantForMe=_deviceAddress.equals(deviceAddress);  if (_debug)   Log.d(TAG,"onMessageReceived: message = " + message + ", meantForMe = "+ meantForMe+ ", messageHandler = "+ _messageHandler);  if (meantForMe && (_messageHandler != null)) {    _messageHandler.onMessageReceived(message);  }}  }
class C{  private Initiator updateInitiatorBasedOnPeers(StorageSystem storage,Map<String,CIMObjectPath> existingHwStorageIds,Initiator initiator) throws Exception {  List<Initiator> initiatorsWithHostName=CustomQueryUtility.queryActiveResourcesByAltId(_dbClient,Initiator.class,"hostname",initiator.getHostName());  CloseableIterator<CIMInstance> seHwIter=null;  try {    if (initiatorsWithHostName != null) {      for (      Initiator hostInitiator : initiatorsWithHostName) {        if (hostInitiator.getId().equals(initiator.getId()) || hostInitiator.getHost() == null || initiator.getHost() == null || !hostInitiator.getHost().equals(initiator.getHost())) {          continue;        }        String portName=Initiator.normalizePort(hostInitiator.getInitiatorPort());        if (existingHwStorageIds.containsKey(portName)) {          seHwIter=_helper.getAssociatorInstances(storage,existingHwStorageIds.get(portName),null,SmisConstants.EMC_CLAR_PRIVILEGE,null,null,SmisConstants.PS_EMC_HOST_NAME);          if (seHwIter != null) {            if (seHwIter.hasNext()) {              CIMInstance priv=seHwIter.next();              String hostName=CIMPropertyFactory.getPropertyValue(priv,SmisConstants.CP_EMC_HOST_NAME);              if (hostName == null || hostName.isEmpty()) {                _log.info("updateInitiatorsBasedOnPeers: could not retrieve hostname of initiator: " + hostInitiator.getInitiatorPort());              } else {                _log.info("updateInitiatorsBasedOnPeers: retrieved hostname of initiator: " + hostInitiator.getInitiatorPort() + " and found hostname "+ hostName);                initiator.setHostName(hostName);                return initiator;              }            }          }        }      }    }  }  finally {    if (seHwIter != null) {      seHwIter.close();    }  }  return initiator;}  }
class C{  public void requireLoaded(){  if (__loaded)   return;  if (__loading_thread == null)   throw new IllegalStateException("Loading has not started yet!");  try {    __loading_thread.join();    __loaded=true;  } catch (  InterruptedException e) {  }}  }
class C{  public static boolean isEmpty(String s){  return makeSafe(s).length() == 0;}  }
class C{  public static boolean isVisa(String cc){  if (((cc.length() == 16) || (cc.length() == 13)) && (cc.substring(0,1).equals("4")))   return isCreditCard(cc);  return false;}  }
class C{  public static List primitiveArrayToList(Object array){  int size=Array.getLength(array);  List list=new ArrayList(size);  for (int i=0; i < size; i++) {    Object item=Array.get(array,i);    if (item != null && item.getClass().isArray() && item.getClass().getComponentType().isPrimitive()) {      item=primitiveArrayToList(item);    }    list.add(item);  }  return list;}  }
class C{  private void processTuple(Object t){  try {    if (evalExpression(t)) {      truePort.emit(t);      trueTuples++;    } else {      falsePort.emit(t);      falseTuples++;    }  } catch (  Exception ex) {    logger.error("Error in expression eval: {}",ex.getMessage());    logger.debug("Exception: ",ex);    error.emit(t);    errorTuples++;  }}  }
class C{  public static String byteArrayToHex(final byte[] data){  return byteArrayToHex(data,0,data.length);}  }
class C{  private void populateCube(@Nonnull Cube cube){  int cubeX=cube.getX();  int cubeY=cube.getY();  int cubeZ=cube.getZ();  cubeGen.getPopulationRequirement(cube).forEachPoint(null);  cube.setFullyPopulated(true);}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGet(request,response);}  }
class C{  public static Person copyPerson(Person person){  Person newPerson=PopulationUtils.getFactory().createPerson(person.getId());  Plan newPlan=PopulationUtils.createPlan();  PopulationUtils.copyFromTo(person.getSelectedPlan(),newPlan);  newPlan.setPerson(newPerson);  newPerson.addPlan(newPlan);  newPerson.setSelectedPlan(newPlan);  PersonUtils.removeUnselectedPlans(newPerson);  return newPerson;}  }
class C{  protected static boolean isZip(final ArtifactInformation artifact){  if (artifact.getName().toLowerCase().endsWith(".zip")) {    return true;  }  final String mdExtension=artifact.getMetaData().get(MK_MVN_EXTENSION);  if (mdExtension != null && mdExtension.equalsIgnoreCase("zip")) {    return true;  }  final String mdMime=artifact.getMetaData().get(MK_MIME_TYPE);  if (mdMime != null && mdMime.equalsIgnoreCase("application/zip")) {    return true;  }  return false;}  }
class C{  public int deleteRows(String tableName) throws NamingException, SQLException {  Context ctx=cache.getJNDIContext();  DataSource da=(DataSource)ctx.lookup("java:/SimpleDataSource");  Connection conn=da.getConnection();  Statement stmt=conn.createStatement();  int rowsDeleted=0;  String sql="";  sql="select * from " + tableName;  ResultSet rs=stmt.executeQuery(sql);  if (rs.next()) {    sql="delete from  " + tableName;    rowsDeleted=stmt.executeUpdate(sql);  }  rs.close();  stmt.close();  conn.close();  return rowsDeleted;}  }
class C{  @Override public void reattachDynamicCounters(){  final IBigdataFederation<?> fed;  try {    fed=client.getFederation();    assert fed != null;  } catch (  IllegalStateException ex) {    log.warn("Closed: " + ex);    return;  }  final CounterSet serviceRoot=fed.getServiceCounterSet();{    final CounterSet tmp=serviceRoot.makePath(IProcessCounters.Memory);synchronized (tmp) {      tmp.detach("DirectBufferPool");      tmp.makePath("DirectBufferPool").attach(DirectBufferPool.getCounters());    }  }{    final QueryEngine queryEngine=QueryEngineFactory.getInstance().getQueryController(fed);    final CounterSet tmp=serviceRoot;synchronized (tmp) {      tmp.detach(QUERY_ENGINE);      tmp.makePath(QUERY_ENGINE).attach(queryEngine.getCounters());    }  }}  }
class C{  public void fillRoundRect(int x,int y,int width,int height,int arcWidth,int arcHeight){  RoundRectangle2D rect=new RoundRectangle2D.Float(x,y,width,height,arcWidth,arcHeight);  fill(rect);}  }
class C{  @Override public void initialize(final RPObject base){  double speed;  super.initialize(base);  if (base.has("dir")) {    setDirection(Direction.build(base.getInt("dir")));  }  if (base.has("speed")) {    speed=base.getDouble("speed");  } else {    speed=0.0;  }  dx=direction.getdx() * speed;  dy=direction.getdy() * speed;}  }
class C{  @DSComment("Animation class") @DSSafe(DSCat.ANDROID_ANIMATION) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:34.663 -0500",hash_original_method="2D5A2EE93DC881BBD9D776B2A4798185",hash_generated_method="9EDBF079BDA4DB6789DFE0B6F4168013") public void playSequentially(List<Animator> items){  if (items != null && items.size() > 0) {    mNeedsSort=true;    if (items.size() == 1) {      play(items.get(0));    } else {      for (int i=0; i < items.size() - 1; ++i) {        play(items.get(i)).before(items.get(i + 1));      }    }  }}  }
class C{  public String update(String xml){  try (SolrCore core=getCoreInc()){    DirectSolrConnection connection=new DirectSolrConnection(core);    SolrRequestHandler handler=core.getRequestHandler("/update");    if (handler == null) {      handler=updater;    }    return connection.request(handler,null,xml);  } catch (  SolrException e) {    throw (SolrException)e;  }catch (  Exception e) {    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,e);  }}  }
class C{  public RMIExtendedSocketFactory(String hostIpAddress) throws UnknownHostException {  if (hostIpAddress != null && hostIpAddress.length() >= 7) {    String[] octets=hostIpAddress.split("\\.");    if (octets == null || octets.length != 4) {      throw new UnknownHostException("Invalid IP address: " + hostIpAddress);    }    byte[] ipAddr=new byte[4];    for (int i=0; i < octets.length; i++) {      try {        ipAddr[i]=(byte)Integer.parseInt(octets[i]);      } catch (      NumberFormatException nfEx) {        throw new UnknownHostException("Invalid IP address: " + hostIpAddress);      }    }    hostInetAddress=InetAddress.getByAddress(ipAddr);  }}  }
class C{  public void startPreview(){  if (camera != null && !previewing) {    camera.startPreview();    previewing=true;  }}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:15.531 -0500",hash_original_method="48C591F4E78B8661DAF333100DFF1834",hash_generated_method="48C591F4E78B8661DAF333100DFF1834") InterfaceAddress(Inet6Address address,short prefixLength){  this.address=address;  this.broadcastAddress=null;  this.prefixLength=prefixLength;}  }
class C{  @Override public void onFocusStatusUpdate(final AutoFocusState state,long frameNumber){  Log.v(TAG,"AF status is state:" + state);switch (state) {case PASSIVE_SCAN:    startPassiveFocus();  break;case ACTIVE_SCAN:break;case PASSIVE_FOCUSED:case PASSIVE_UNFOCUSED:break;case ACTIVE_FOCUSED:case ACTIVE_UNFOCUSED:break;}if (CAPTURE_DEBUG_UI) {measureAutoFocusScans(state,frameNumber);}}  }
class C{  public List<Integer> emit(String streamId,Tuple anchor,List<Object> tuple){  return emit(streamId,Arrays.asList(anchor),tuple);}  }
class C{  static ProteinFrame frameFromCode(final int value){  if (value != 0) {    throw new IllegalArgumentException(String.valueOf(value));  }  return PROTEIN;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:51.736 -0500",hash_original_method="7BF4C742F8C5ACA23F214E18E295ECBB",hash_generated_method="6253D394DA17AE541493989B9FCA6641") public Jdk14Logger(String name){  this.name=name;  logger=getLogger();}  }
class C{  public void addEven(ITurnOrdered marker){  if (this.numEven == even_turns.size()) {    throw new IllegalStateException("Have already added " + this.numEven + " even turns.");  }  even_turns.addElement(marker);}  }
class C{  public static void wtf(String tag,Throwable tr){  wtf(tag,null,tr);}  }
class C{  private byte[] encrypt(byte[] data,byte[] key) throws Exception {  return SecurityUtilities.cipher(data,key,Cipher.ENCRYPT_MODE);}  }
class C{  public RList createRSymbolObject(RegisteredNativeSymbol rnt,boolean withRegInfo){  int n=rnt.nst == NativeSymbolType.Any ? 3 : 4;  String sname=symbol == null ? rnt.dotSymbol.name : symbol;  String[] klass=new String[rnt.nst == NativeSymbolType.Any ? 1 : 2];  klass[klass.length - 1]=NATIVE_SYMBOL_INFO_CLASS;  Object[] data=new Object[n];  data[0]=sname;  if (withRegInfo && rnt.nst != NativeSymbolType.Any) {    data[1]=DLL.createExternalPtr(rnt.dotSymbol.fun,REGISTERED_NATIVE_SYMBOL_CLASS);  } else {    data[1]=DLL.createExternalPtr(address,NATIVE_SYMBOL_CLASS);  }  data[2]=libInfo.toRList();  if (n > 3) {    data[3]=rnt.dotSymbol.numArgs;    klass[0]=rnt.nst.name() + "Routine";  }  return RDataFactory.createList(data,n > 3 ? NAMES_4_VEC : NAMES_3_VEC);}  }
class C{  public ExpressionVisitor incrementQueryLevel(int offset){  return new ExpressionVisitor(type,queryLevel + offset,dependencies,columns,table,resolver);}  }
class C{  @Override public V remove(Object key){  Entry<K,V> e=removeEntryForKey(key);  return (e == null ? null : e.value);}  }
class C{  public BST(){}  }
class C{  public static Instances loadDataset(String options[]) throws Exception {  return loadDataset(options,'t');}  }
class C{  public long run(String[] args) throws Exception {  int size=Integer.parseInt(args[0]);  int nbatches=Integer.parseInt(args[1]);  int ncycles=Integer.parseInt(args[2]);  float[][] arrays=new float[ncycles][size];  StreamBuffer sbuf=new StreamBuffer();  ObjectOutputStream oout=new ObjectOutputStream(sbuf.getOutputStream());  ObjectInputStream oin=new ObjectInputStream(sbuf.getInputStream());  doReps(oout,oin,sbuf,arrays,1);  long start=System.currentTimeMillis();  doReps(oout,oin,sbuf,arrays,nbatches);  return System.currentTimeMillis() - start;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void loadArg(final int arg){  loadInsn(argumentTypes[arg],getArgIndex(arg));}  }
class C{  @Override public Object touchEL(int row){  used=true;  return super.touchEL(row);}  }
class C{  public ClaimBuilder putAll(Map<String,Object> map){  data.putAll(map);  return this;}  }
class C{  public Geo subtract(Geo b){  return subtract(b,new Geo());}  }
class C{  public static CipherTextIvMac encrypt(byte[] plaintext,SecretKeys secretKeys) throws GeneralSecurityException {  byte[] iv=generateIv();  Cipher aesCipherForEncryption=Cipher.getInstance(CIPHER_TRANSFORMATION);  aesCipherForEncryption.init(Cipher.ENCRYPT_MODE,secretKeys.getConfidentialityKey(),new IvParameterSpec(iv));  iv=aesCipherForEncryption.getIV();  byte[] byteCipherText=aesCipherForEncryption.doFinal(plaintext);  byte[] ivCipherConcat=CipherTextIvMac.ivCipherConcat(iv,byteCipherText);  byte[] integrityMac=generateMac(ivCipherConcat,secretKeys.getIntegrityKey());  return new CipherTextIvMac(byteCipherText,iv,integrityMac);}  }
class C{  public IonType next(){  if (has_next() == false) {    return null;  }  int new_state;switch (_current_state) {case S_BOF:    new_state=S_STRUCT;  break;case S_STRUCT:new_state=S_EOF;break;case S_IN_STRUCT:new_state=stateFirstInStruct();loadStateData(new_state);break;case S_NAME:assert (hasVersion());new_state=S_VERSION;loadStateData(new_state);break;case S_VERSION:if (hasMaxId()) {new_state=S_MAX_ID;loadStateData(new_state);} else {new_state=stateFollowingMaxId();}break;case S_MAX_ID:new_state=stateFollowingMaxId();break;case S_IMPORT_LIST:new_state=this.stateFollowingImportList(Op.NEXT);break;case S_IN_IMPORTS:case S_IMPORT_STRUCT:assert (_import_iterator != null);new_state=nextImport();break;case S_IN_IMPORT_STRUCT:new_state=S_IMPORT_NAME;loadStateData(new_state);break;case S_IMPORT_NAME:new_state=S_IMPORT_VERSION;loadStateData(new_state);break;case S_IMPORT_VERSION:new_state=S_IMPORT_MAX_ID;loadStateData(new_state);break;case S_IMPORT_MAX_ID:new_state=S_IMPORT_STRUCT_CLOSE;break;case S_IMPORT_STRUCT_CLOSE:new_state=S_IMPORT_STRUCT_CLOSE;break;case S_IMPORT_LIST_CLOSE:new_state=S_IMPORT_LIST_CLOSE;break;case S_AFTER_IMPORT_LIST:assert (_symbol_table.getImportedMaxId() < _maxId);new_state=S_SYMBOL_LIST;break;case S_SYMBOL_LIST:assert (_symbol_table.getImportedMaxId() < _maxId);new_state=stateFollowingLocalSymbols();break;case S_IN_SYMBOLS:assert (_local_symbols != null);assert (_local_symbols.hasNext() == true);case S_SYMBOL:if (_local_symbols.hasNext()) {_string_value=_local_symbols.next();new_state=S_SYMBOL;} else {new_state=S_SYMBOL_LIST_CLOSE;}break;case S_SYMBOL_LIST_CLOSE:new_state=S_SYMBOL_LIST_CLOSE;break;case S_STRUCT_CLOSE:new_state=S_STRUCT_CLOSE;break;case S_EOF:new_state=S_EOF;break;default :throwUnrecognizedState(_current_state);new_state=-1;break;}_current_state=new_state;return stateType(_current_state);}  }
class C{  public void testRpcLocalServer() throws Exception {  String resdata="Response Data";  Response response=Response.newBuilder().setStrData(resdata).build();  SocketRpcServer socketRpcLocalServer=new SocketRpcServer(-1,0,InetAddress.getLocalHost(),null);  socketRpcLocalServer.registerService(new FakeServiceImpl(REQUEST).withResponse(response));  FakeSocket socket=new FakeSocket(false).withRequest(RPC_REQUEST);  socketRpcLocalServer.new ConnectionHandler(new SocketConnection(socket,false)).run();  assertTrue(socket.getResponse().getCallback());  assertEquals(response.toByteString(),socket.getResponse().getResponseProto());}  }
class C{  public static Path moveFileToTrash(Path file,Path trashDir) throws IOException {  if (Files.exists(file)) {    String deletedName=TestUtils.uniqueCounter() + "-" + file.getFileName();    Path deleted=trashDir.resolve(deletedName);    Files.move(file,deleted);    return deleted;  } else   return null;}  }
class C{  public void connect(long duration,TimeUnit timeUnit) throws TimeoutException, InterruptedException {  log.info("Waiting for {} {} for cluster at {} to be ready",duration,timeUnit,zkHost);  long timeout=System.nanoTime() + timeUnit.toNanos(duration);  while (System.nanoTime() < timeout) {    try {      connect();      log.info("Cluster at {} ready",zkHost);      return;    } catch (    RuntimeException e) {    }    TimeUnit.MILLISECONDS.sleep(250);  }  throw new TimeoutException("Timed out waiting for cluster");}  }
class C{  public static SipRequest createInvite(SipDialogPath dialog,String[] featureTags,String[] acceptTags,String sdp) throws PayloadException {  try {    ContentTypeHeader contentType=SipUtils.HEADER_FACTORY.createContentTypeHeader("application","sdp");    return createInvite(dialog,featureTags,acceptTags,sdp,contentType);  } catch (  ParseException e) {    throw new PayloadException("Can't create SIP message with SDP : " + sdp,e);  }}  }
class C{  private static int checkTypeArgument(final String signature,int pos){  char c=getChar(signature,pos);  if (c == '*') {    return pos + 1;  } else   if (c == '+' || c == '-') {    pos++;  }  return checkFieldTypeSignature(signature,pos);}  }
class C{  public boolean retainAll(Collection c){  throw new UnsupportedOperationException();}  }
class C{  public static Validator<String> disallowedChars(BiFunction<String,StringDisallowedCharsValidator,? extends IllegalArgumentException> exception,String... chars){  return disallowedChars(chars,exception);}  }
class C{  public void paintProgressBarBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  java.sql.Date toSqlDate(Calendar calendar){  return new java.sql.Date(getTimeInMillis(calendar));}  }
class C{  protected void drawInterval(Graphics2D g2,CategoryItemRendererState state,Rectangle2D dataArea,CategoryPlot plot,CategoryAxis domainAxis,ValueAxis rangeAxis,IntervalCategoryDataset dataset,int row,int column){  int visibleRow=state.getVisibleSeriesIndex(row);  if (visibleRow < 0) {    return;  }  PlotOrientation orientation=plot.getOrientation();  double rectX=0.0;  double rectY=0.0;  RectangleEdge rangeAxisLocation=plot.getRangeAxisEdge();  Number value0=dataset.getEndValue(row,column);  if (value0 == null) {    return;  }  double java2dValue0=rangeAxis.valueToJava2D(value0.doubleValue(),dataArea,rangeAxisLocation);  Number value1=dataset.getStartValue(row,column);  if (value1 == null) {    return;  }  double java2dValue1=rangeAxis.valueToJava2D(value1.doubleValue(),dataArea,rangeAxisLocation);  if (java2dValue1 < java2dValue0) {    double temp=java2dValue1;    java2dValue1=java2dValue0;    java2dValue0=temp;  }  double rectWidth=state.getBarWidth();  double rectHeight=Math.abs(java2dValue1 - java2dValue0);  RectangleEdge barBase=RectangleEdge.LEFT;  if (orientation == PlotOrientation.HORIZONTAL) {    rectX=java2dValue0;    rectY=calculateBarW0(getPlot(),orientation,dataArea,domainAxis,state,visibleRow,column);    rectHeight=state.getBarWidth();    rectWidth=Math.abs(java2dValue1 - java2dValue0);    barBase=RectangleEdge.LEFT;  } else   if (orientation.isVertical()) {    rectX=calculateBarW0(getPlot(),orientation,dataArea,domainAxis,state,visibleRow,column);    rectY=java2dValue0;    barBase=RectangleEdge.BOTTOM;  }  Rectangle2D bar=new Rectangle2D.Double(rectX,rectY,rectWidth,rectHeight);  BarPainter painter=getBarPainter();  if (state.getElementHinting()) {    beginElementGroup(g2,dataset.getRowKey(row),dataset.getColumnKey(column));  }  if (getShadowsVisible()) {    painter.paintBarShadow(g2,this,row,column,bar,barBase,false);  }  getBarPainter().paintBar(g2,this,row,column,bar,barBase);  if (state.getElementHinting()) {    endElementGroup(g2);  }  CategoryItemLabelGenerator generator=getItemLabelGenerator(row,column);  if (generator != null && isItemLabelVisible(row,column)) {    drawItemLabel(g2,dataset,row,column,plot,generator,bar,false);  }  EntityCollection entities=state.getEntityCollection();  if (entities != null) {    addItemEntity(entities,dataset,row,column,bar);  }}  }
class C{  public boolean verifyElementText(String id,String text){  try {    (new WebDriverWait(appiumDriver,20)).until(ExpectedConditions.presenceOfElementLocated(By.id(id)));  } catch (  Exception e) {    Reporter.log("Element not found: " + e.toString());    captureScreenshot();    throw e;  }  try {    if (!(appiumDriver.findElementById(id).getText()).equals(text)) {      return true;    } else {      return false;    }  } catch (  Exception e) {    Reporter.log("Element not found: " + e.toString());    captureScreenshot();    throw e;  }}  }
class C{  private int dp2px(int dp){  return (int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dp,this.mMetrics);}  }
class C{  public static Set<String> updatefeatureWhiteList(Counter<String> featureWhitelist,List<List<RichTranslation<IString,String>>> nbestlists,int minSegmentCount){  for (  List<RichTranslation<IString,String>> nbestlist : nbestlists) {    Set<String> segmentFeatureSet=new HashSet<String>(1000);    for (    RichTranslation<IString,String> trans : nbestlist) {      for (      FeatureValue<String> feature : trans.features) {        if (!segmentFeatureSet.contains(feature.name)) {          segmentFeatureSet.add(feature.name);          featureWhitelist.incrementCount(feature.name);        }      }    }  }  return Counters.keysAbove(featureWhitelist,minSegmentCount - 1);}  }
class C{  private SDEnsemble trainRuleset(ExampleSet trainingSet,final double[] classPriors) throws OperatorException {  Vector<Pair<Model,double[][]>> modelInfo=new Vector<Pair<Model,double[][]>>();  final double splitRatio=this.getParameterAsDouble(PARAMETER_RATIO_INTERNAL_BOOTSTRAP);  final boolean bootstrap=((splitRatio > 0) && (splitRatio < 1.0));  log(bootstrap ? "Bootstrapping enabled." : "Bootstrapping disabled.");  final int iterations=this.getParameterAsInt(PARAMETER_ITERATIONS);  final boolean roc_filter=this.getParameterAsBoolean(PARAMETER_ROC_CONVEX_HULL_FILTER);  List<double[]> rocCurve=null;  if (roc_filter) {    rocCurve=new LinkedList<double[]>();    rocCurve.add(new double[]{0,0});    rocCurve.add(new double[]{1,1});  }  for (int i=0; i < iterations; i++) {    this.currentIteration=i;    ExampleSet splittedSet=trainingSet;    if (bootstrap == true) {      splittedSet=new SplittedExampleSet(trainingSet,splitRatio,SplittedExampleSet.SHUFFLED_SAMPLING,getParameterAsBoolean(RandomGenerator.PARAMETER_USE_LOCAL_RANDOM_SEED),getParameterAsInt(RandomGenerator.PARAMETER_LOCAL_RANDOM_SEED));      ((SplittedExampleSet)splittedSet).selectSingleSubset(0);    }    Model model=this.trainModel(splittedSet);    ExampleSet resultSet=null;    if (bootstrap == true) {      ((SplittedExampleSet)splittedSet).selectSingleSubset(1);      resultSet=model.apply(splittedSet);    } else {      resultSet=model.apply(trainingSet);    }    SDReweightMeasures wp=new SDReweightMeasures(resultSet);    final boolean additive=this.getParameterAsBoolean(PARAMETER_ADDITIVE_REWEIGHT);    wp.setAdditive(additive);    if (!additive) {      wp.setGamma(this.getParameterAsDouble(PARAMETER_GAMMA));    }    double[][] modelWeightMatrix=new double[2][2];    double tpr=0;    double fpr=0;    boolean defaultRule=false;{      int[][] predClasses=new int[2][];      predClasses[0]=wp.getCoveredExamplesNumForPred(0);      predClasses[1]=wp.getCoveredExamplesNumForPred(1);      int[] rowTotals=new int[2];      rowTotals[0]=predClasses[0][0] + predClasses[0][1];      rowTotals[1]=predClasses[1][0] + predClasses[1][1];      int total=rowTotals[0] + rowTotals[1];      double cov0=((double)rowTotals[0]) / total;      double cov1=((double)rowTotals[1]) / total;      double prior0=((double)predClasses[0][0] + predClasses[1][0]) / total;      double prior1=((double)predClasses[0][1] + predClasses[1][1]) / total;      double bias0=Math.abs(((double)predClasses[0][0] / rowTotals[0]) - prior0);      double bias1=Math.abs(((double)predClasses[1][0] / rowTotals[1]) - prior0);      int subset=(Double.isNaN(bias1) || cov0 * bias0 >= cov1 * bias1) ? 0 : 1;      modelWeightMatrix[subset][0]=((double)predClasses[subset][0]) / rowTotals[subset];      modelWeightMatrix[subset][1]=((double)predClasses[subset][1]) / rowTotals[subset];      double ratio0=(((double)predClasses[subset][0]) / total) / prior0;      double ratio1=(((double)predClasses[subset][1]) / total) / prior1;      wp.reweightExamples(trainingSet,((ratio0 > ratio1) ? 0 : 1),subset);      if (roc_filter) {        tpr=Math.max(ratio0,ratio1);        fpr=Math.min(ratio0,ratio1);      }      defaultRule=(cov0 == 0) || (cov1 == 0);    }    if ((defaultRule == false) && (roc_filter == false || this.isOnConvexHull(rocCurve,tpr,fpr))) {      modelInfo.add(new Pair<Model,double[][]>(model,modelWeightMatrix));    }    inApplyLoop();  }  if (roc_filter) {    StringBuffer message=new StringBuffer("The convex hull in ROC space contains the following points (TPr/FPr):" + Tools.getLineSeparator());    Iterator it=rocCurve.iterator();    while (it.hasNext()) {      double[] tpfp=(double[])it.next();      message.append("(" + tpfp[0] + ", "+ tpfp[1]+ ") ");    }    log(message.toString());  }  short combinationMethod=this.getParameterAsBoolean(PARAMETER_ADDITIVE_REWEIGHT) ? SDEnsemble.RULE_COMBINE_ADDITIVE : SDEnsemble.RULE_COMBINE_MULTIPLY;  return new SDEnsemble(trainingSet,modelInfo,classPriors,combinationMethod);}  }
class C{  public String toString(){  StringBuffer text=new StringBuffer();  int printed=0;  if ((m_alpha == null) && (m_sparseWeights == null)) {    return "BinarySMO: No model built yet.\n";  }  try {    text.append("BinarySMO\n\n");    if (m_KernelIsLinear) {      text.append("Machine linear: showing attribute weights, ");      text.append("not support vectors.\n\n");      for (int i=0; i < m_sparseWeights.length; i++) {        if (m_sparseIndices[i] != (int)m_classIndex) {          if (printed > 0) {            text.append(" + ");          } else {            text.append("   ");          }          text.append(Utils.doubleToString(m_sparseWeights[i],12,4) + " * ");          if (m_filterType == FILTER_STANDARDIZE) {            text.append("(standardized) ");          } else           if (m_filterType == FILTER_NORMALIZE) {            text.append("(normalized) ");          }          if (!m_checksTurnedOff) {            text.append(m_data.attribute(m_sparseIndices[i]).name() + "\n");          } else {            text.append("attribute with index " + m_sparseIndices[i] + "\n");          }          printed++;        }      }    } else {      for (int i=0; i < m_alpha.length; i++) {        if (m_supportVectors.contains(i)) {          double val=m_alpha[i];          if (m_class[i] == 1) {            if (printed > 0) {              text.append(" + ");            }          } else {            text.append(" - ");          }          text.append(Utils.doubleToString(val,12,4) + " * <");          for (int j=0; j < m_data.numAttributes(); j++) {            if (j != m_data.classIndex()) {              text.append(m_data.instance(i).toString(j));            }            if (j != m_data.numAttributes() - 1) {              text.append(" ");            }          }          text.append("> * X]\n");          printed++;        }      }    }    if (m_b > 0) {      text.append(" - " + Utils.doubleToString(m_b,12,4));    } else {      text.append(" + " + Utils.doubleToString(-m_b,12,4));    }    if (!m_KernelIsLinear) {      text.append("\n\nNumber of support vectors: " + m_supportVectors.numElements());    }    int numEval=0;    int numCacheHits=-1;    if (m_kernel != null) {      numEval=m_kernel.numEvals();      numCacheHits=m_kernel.numCacheHits();    }    text.append("\n\nNumber of kernel evaluations: " + numEval);    if (numCacheHits >= 0 && numEval > 0) {      double hitRatio=1 - numEval * 1.0 / (numCacheHits + numEval);      text.append(" (" + Utils.doubleToString(hitRatio * 100,7,3).trim() + "% cached)");    }  } catch (  Exception e) {    e.printStackTrace();    return "Can't print BinarySMO classifier.";  }  return text.toString();}  }
class C{  private void loadControlIcons(@NonNull TypedArray attributes,@NonNull Context context){  int controlsColor=attributes.getColor(R.styleable.ActualNumberPicker_controls_color,Color.DKGRAY);  Drawable arrLeft=context.getResources().getDrawable(R.drawable.ic_keyboard_arrow_left_black_24dp);  arrLeft=Coloring.get().colorDrawable(context,arrLeft,controlsColor);  mControlIcons.put(ARR_LEFT,arrLeft);  Drawable arrRight=context.getResources().getDrawable(R.drawable.ic_keyboard_arrow_right_black_24dp);  arrRight=Coloring.get().colorDrawable(context,arrRight,controlsColor);  mControlIcons.put(ARR_RIGHT,arrRight);  int fastControlsColor=attributes.getColor(R.styleable.ActualNumberPicker_fast_controls_color,Color.DKGRAY);  Drawable fastArrLeft=context.getResources().getDrawable(R.drawable.ic_keyboard_2arrows_left_black_24dp);  fastArrLeft=Coloring.get().colorDrawable(context,fastArrLeft,fastControlsColor);  mControlIcons.put(FAST_ARR_LEFT,fastArrLeft);  Drawable fastArrRight=context.getResources().getDrawable(R.drawable.ic_keyboard_2arrows_right_black_24dp);  fastArrRight=Coloring.get().colorDrawable(context,fastArrRight,fastControlsColor);  mControlIcons.put(FAST_ARR_RIGHT,fastArrRight);}  }
class C{  public int search(final CharSequence s){  return search(s,0,s.length());}  }
class C{  public static String readFile(File file,String charsetName){  StringBuilder fileContent=new StringBuilder("");  if (file == null || !file.isFile()) {    return fileContent.toString();  }  BufferedReader reader=null;  try {    InputStreamReader is=new InputStreamReader(new FileInputStream(file),charsetName);    reader=new BufferedReader(is);    String line=null;    while ((line=reader.readLine()) != null) {      if (!fileContent.toString().equals("")) {        fileContent.append("\r\n");      }      fileContent.append(line);    }    reader.close();  } catch (  IOException e) {    throw new RuntimeException("IOException occurred. ",e);  } finally {    if (reader != null) {      try {        reader.close();      } catch (      IOException e) {        throw new RuntimeException("IOException occurred. ",e);      }    }  }  return fileContent.toString();}  }
class C{  public RandomSubsetTest(String name){  super(name);}  }
class C{  protected boolean hasEnumerated(boolean isForMapKey){  return false;}  }
class C{  private boolean notifyPersistentConnectionListener(HttpMessage httpMessage,Socket inSocket,ZapGetMethod method){  boolean keepSocketOpen=false;  PersistentConnectionListener listener=null;  List<PersistentConnectionListener> listenerList=parentServer.getPersistentConnectionListenerList();  for (int i=0; i < listenerList.size(); i++) {    listener=listenerList.get(i);    try {      if (listener.onHandshakeResponse(httpMessage,inSocket,method)) {        keepSocketOpen=true;        break;      }    } catch (    Exception e) {      log.error("An error occurred while notifying listener:",e);    }  }  return keepSocketOpen;}  }
class C{  private void bringToBodies(SootClass sc){  if (sc.resolvingLevel() >= SootClass.BODIES)   return;  bringToSignatures(sc);  if (Options.v().debug_resolver())   G.v().out.println("bringing to BODIES: " + sc);  sc.setResolvingLevel(SootClass.BODIES);{    Collection references=classToTypesHierarchy.get(sc);    if (references == null)     return;    Iterator it=references.iterator();    while (it.hasNext()) {      final Object o=it.next();      if (o instanceof String) {        addToResolveWorklist((String)o,SootClass.HIERARCHY);      } else       if (o instanceof Type) {        addToResolveWorklist((Type)o,SootClass.HIERARCHY);      } else       throw new RuntimeException(o.toString());    }  }{    Collection references=classToTypesSignature.get(sc);    if (references == null)     return;    Iterator it=references.iterator();    while (it.hasNext()) {      final Object o=it.next();      if (o instanceof String) {        addToResolveWorklist((String)o,SootClass.SIGNATURES);      } else       if (o instanceof Type) {        addToResolveWorklist((Type)o,SootClass.SIGNATURES);      } else       throw new RuntimeException(o.toString());    }  }}  }
class C{  public boolean isRunning(){  return this.running;}  }
class C{  public static void activateSystemStyle(){  try {    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());  } catch (  Exception e) {    e.printStackTrace();  }  JFrame.setDefaultLookAndFeelDecorated(true);}  }
class C{  public String toString(){  StringBuilder buf=new StringBuilder(length());  int size=this.size();  for (int i=0; i < size; i++) {    if (i > 0) {      buf.append(separator);    }    buf.append(get(i));  }  return buf.toString();}  }
class C{  public void testEqualsObject(){  RequestedAddressFamilyAttribute target=null;  boolean expectedReturn=false;  boolean actualReturn=requestedAddressFamilyAttribute.equals(target);  assertEquals("RequestedAddressFamilyAttribute.equals() failed against a null " + "target.",expectedReturn,actualReturn);  target=new RequestedAddressFamilyAttribute();  char family=MsgFixture.REQUESTED_ADDRESS_FAMILY_ATTRIBUTE_V6;  target.setFamily(family);  requestedAddressFamilyAttribute.setFamily(MsgFixture.REQUESTED_ADDRESS_FAMILY_ATTRIBUTE_V4);  expectedReturn=false;  actualReturn=requestedAddressFamilyAttribute.equals(target);  assertEquals("RequestedAddressFamilyAttribute.equals() failed against a " + "different target.",expectedReturn,actualReturn);  target.setFamily(MsgFixture.REQUESTED_ADDRESS_FAMILY_ATTRIBUTE_V4);  expectedReturn=true;  actualReturn=requestedAddressFamilyAttribute.equals(target);  assertEquals("RequestedAddressFamilyAttribute.equals() failed against an equal " + "target.",expectedReturn,actualReturn);  target.setFamily(MsgFixture.REQUESTED_ADDRESS_FAMILY_ATTRIBUTE_V6);  requestedAddressFamilyAttribute.setFamily(MsgFixture.REQUESTED_ADDRESS_FAMILY_ATTRIBUTE_V6);  expectedReturn=true;  actualReturn=requestedAddressFamilyAttribute.equals(target);  assertEquals("RequestedAddressFamilyAttribute.equals() failed for IPv6 address.",expectedReturn,actualReturn);}  }
class C{  public <S>T manyToOne(final S source){  try {    return this.<T,S>getJMapper(relationalManyToOneMapper,source).getDestination(source);  } catch (  Exception e) {    return logAndReturnNull(e);  }}  }
class C{  public MockResponse(){  setBody(new byte[0]);}  }
class C{  public static int compare(long serial1,long serial2){  if (serial1 < 0 || serial1 > MAX32)   throw new IllegalArgumentException(serial1 + " out of range");  if (serial2 < 0 || serial2 > MAX32)   throw new IllegalArgumentException(serial2 + " out of range");  long diff=serial1 - serial2;  if (diff >= MAX32)   diff-=(MAX32 + 1); else   if (diff < -MAX32)   diff+=(MAX32 + 1);  return (int)diff;}  }
class C{  private void $$$setupUI$$$(){  createUIComponents();  panel=new JPanel();  panel.setLayout(new GridLayoutManager(3,2,new Insets(0,0,0,0),-1,-1));  enable=new JCheckBox();  enable.setText("Enable google-java-format");  panel.add(enable,new GridConstraints(0,0,1,2,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  final Spacer spacer1=new Spacer();  panel.add(spacer1,new GridConstraints(2,0,1,2,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_VERTICAL,1,GridConstraints.SIZEPOLICY_WANT_GROW,null,null,null,0,false));  final JLabel label1=new JLabel();  label1.setText("Code style");  panel.add(label1,new GridConstraints(1,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_FIXED,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  panel.add(styleComboBox,new GridConstraints(1,1,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,1,false));}  }
class C{  private int[] readTypeAnnotations(final MethodVisitor mv,final Context context,int u,boolean visible){  char[] c=context.buffer;  int[] offsets=new int[readUnsignedShort(u)];  u+=2;  for (int i=0; i < offsets.length; ++i) {    offsets[i]=u;    int target=readInt(u);switch (target >>> 24) {case 0x00:case 0x01:case 0x16:      u+=2;    break;case 0x13:case 0x14:case 0x15:  u+=1;break;case 0x40:case 0x41:for (int j=readUnsignedShort(u + 1); j > 0; --j) {int start=readUnsignedShort(u + 3);int length=readUnsignedShort(u + 5);readLabel(start,context.labels);readLabel(start + length,context.labels);u+=6;}u+=3;break;case 0x47:case 0x48:case 0x49:case 0x4A:case 0x4B:u+=4;break;default :u+=3;break;}int pathLength=readByte(u);if ((target >>> 24) == 0x42) {TypePath path=pathLength == 0 ? null : new TypePath(b,u);u+=1 + 2 * pathLength;u=readAnnotationValues(u + 2,c,true,mv.visitTryCatchAnnotation(target,path,readUTF8(u,c),visible));} else {u=readAnnotationValues(u + 3 + 2 * pathLength,c,true,null);}}return offsets;}  }
class C{  public void triggerNodeRecovery(){  InterProcessLock lock=null;  try {    lock=getRecoveryLock();    validatePlatform();    validateNodeRecoveryStatus();    validateClusterState();    RecoveryStatus status=new RecoveryStatus();    status.setStatus(RecoveryStatus.Status.INIT);    status.setStartTime(new Date());    persistNodeRecoveryStatus(status);  }  finally {    releaseLock(lock);  }}  }
class C{  public String toString(){  return Double.toString(getValue());}  }
class C{  public static String join(Object[] elements){  return (join(elements," "));}  }
class C{  @OnOpen public void onConnect(final Session session){  final String articleIds=(String)Channels.getHttpParameter(session,Article.ARTICLE_T_IDS);  if (StringUtils.isBlank(articleIds)) {    return;  }  SESSIONS.put(session,articleIds);}  }
class C{  public boolean isLineTypeSegmentValue(){  return LINETYPE_SegmentValue.equals(getLineType());}  }
class C{  public boolean isOnMap(Projection proj){  Point2D p1=proj.forward(lat,lon);  Point2D p2=proj.forward(lat2,lon2);  int h=(int)Math.abs(p2.getY() - p1.getY());  int w=(int)Math.abs(p2.getX() - p1.getX());  Rectangle imageRect=new Rectangle((int)p1.getX(),(int)p1.getY(),w,h);  proj.forward(proj.getUpperLeft(),p1);  proj.forward(proj.getLowerRight(),p2);  h=(int)Math.abs(p2.getY() - p1.getY());  w=(int)Math.abs(p2.getX() - p1.getX());  Rectangle mapRect=new Rectangle((int)p1.getX(),(int)p1.getY(),w,h);  return mapRect.intersects(imageRect);}  }
class C{  public GridClientDataConfiguration(){}  }
class C{  public void test_unwrap_ByteBuffer_ByteBuffer_05(){  String host="new host";  int port=8080;  ByteBuffer bbs=ByteBuffer.allocate(10);  ByteBuffer bbd=ByteBuffer.allocate(100);  SSLEngine sse=getEngine(host,port);  sse.setUseClientMode(true);  try {    SSLEngineResult res=sse.unwrap(bbs,bbd);    assertEquals(0,res.bytesConsumed());    assertEquals(0,res.bytesProduced());  } catch (  Exception e) {    fail("Unexpected exception: " + e);  }}  }
class C{  public static long calc(String arg){  if (arg == null)   return 0;  long h=initialHash;  for (int i=0; i < arg.length(); ++i) {    h=(h << 1) ^ (h >>> 63) ^ mixMaster[(arg.charAt(i) ^ (arg.charAt(i) >>> 8)) & 0xff];  }  return h;}  }
class C{  public MeetingRecord(){  super(Meeting.MEETING);}  }
class C{  @Override public void onUIRefreshComplete(PtrFrameLayout frame){  mDrawable.stop();}  }
class C{  public static Bitmap rotateBitmap(Bitmap srcBmp,float degrees){  int width, height;  width=srcBmp.getWidth();  height=srcBmp.getHeight();  Matrix matrix=new Matrix();  matrix.reset();  matrix.setRotate(degrees,width / 2,height / 2);  Bitmap ret=Bitmap.createBitmap(srcBmp,0,0,width,height,matrix,true);  return ret;}  }
class C{  public void addTableValueChangeListener(TableValueChangeListener listener){  if (listener == null) {    return;  }  m_listeners.add(listener);}  }
class C{  public boolean equals(Peer p){  if (p == null) {    return false;  } else   if (p.getNetwork() == null) {    return p.getNetwork() == network;  } else {    return p.getNetwork().equals(network);  }}  }
class C{  public static boolean hasBreakpoint(final BreakpointManager manager,final INaviModule module,final UnrelocatedAddress unrelocatedAddress){  final BreakpointAddress address=new BreakpointAddress(module,unrelocatedAddress);  return manager.hasBreakpoint(BreakpointType.REGULAR,address);}  }
class C{  public static boolean isInCircleRobust(Coordinate a,Coordinate b,Coordinate c,Coordinate p){  return isInCircleDD(a,b,c,p);}  }
class C{  public static void copyDirectory(File srcDir,File destDir,boolean preserveFileDate) throws IOException {  copyDirectory(srcDir,destDir,(FileFilter)null,preserveFileDate);}  }
class C{  protected void preserveNulls(long nullValue,String compressionAlgorithm){  tiledImageOperation().preserveNulls(nullValue,compressionAlgorithm);}  }
class C{  public List typeArguments(){  if (this.typeArguments == null) {    unsupportedIn2();  }  return this.typeArguments;}  }
class C{  public void fadeInLayer(int index){  mTransitionState=TRANSITION_STARTING;  mIsLayerOn[index]=true;  invalidateSelf();}  }
class C{  PrimerPack(ByteProvider byteProvider,KLVPacket.Header header) throws IOException {  this.header=header;  this.localTagEntryBatch=new LocalTagEntryBatch(byteProvider);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static String parse(String page,Map<String,Object> settings){  PageParser block=new PageParser(page,settings,0);  return block.replaceTags();}  }
class C{  @Override public void run(){  amIActive=true;  String areaHeader=null;  String slopeHeader=null;  String outputHeader=null;  int i;  int progress;  int row, col;  double z;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      areaHeader=args[i];    } else     if (i == 1) {      slopeHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    }  }  if ((areaHeader == null) || (slopeHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster slopeImage=new WhiteboxRaster(slopeHeader,"r");    int rows=slopeImage.getNumberRows();    int cols=slopeImage.getNumberColumns();    double slopeNoData=slopeImage.getNoDataValue();    WhiteboxRaster areaImage=new WhiteboxRaster(areaHeader,"r");    if (areaImage.getNumberRows() != rows || areaImage.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    double areaNoData=areaImage.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",areaHeader,WhiteboxRaster.DataType.FLOAT,areaNoData);    output.setPreferredPalette("blueyellow.pal");    double[] area;    double[] slope;    for (row=0; row < rows; row++) {      area=areaImage.getRowValues(row);      slope=slopeImage.getRowValues(row);      for (col=0; col < cols; col++) {        if (area[col] != areaNoData && slope[col] != slopeNoData) {          if (slope[col] != 0) {            z=Math.log(((area[col]) / (Math.tan(Math.toRadians(slope[col])))));          } else {            z=areaNoData;          }          output.setValue(row,col,z);        } else {          output.setValue(row,col,areaNoData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    slopeImage.close();    areaImage.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.717 -0400",hash_original_method="67214B0FED640930AABB3A175A226E31",hash_generated_method="0CE2DC9095A048349DB0C720F4925AA5") public XmlStreamReaderException(String msg,String ctMime,String ctEnc,String bomEnc,String xmlGuessEnc,String xmlEnc){  super(msg);  contentTypeMime=ctMime;  contentTypeEncoding=ctEnc;  bomEncoding=bomEnc;  xmlGuessEncoding=xmlGuessEnc;  xmlEncoding=xmlEnc;}  }
class C{  public static boolean isValidItem(Material material){  return getItem(getName(material)) == material;}  }
class C{  public static boolean isAnnotationPresent(final AnnotatedElement annotatedElement,final Class<?> annotationClass){  return Stream.of(annotatedElement.getAnnotations()).map(null).map(null).anyMatch(null);}  }
class C{  public File createPDF(File file){  return null;}  }
class C{  public void resetTo(int position){  ensureCapacity(position);  size=position;}  }
class C{  public static void paintTitlePane(Graphics g,int x,int y,int width,int height,boolean actived){  Graphics2D g2=(Graphics2D)g;  Paint oldpaint=g2.getPaint();  g2.setPaint(BEUtils.createTexturePaint(actived ? __IconFactory__.getInstance().getFrameTitleHeadBg_active().getImage() : __IconFactory__.getInstance().getFrameTitleHeadBg_inactive().getImage()));  g2.fillRect(x,y,width,height);  g2.setPaint(oldpaint);}  }
class C{  public static <T>T max(Iterator<T> self,@ClosureParams(value=FromString.class,options={"T","T,T"}) Closure closure){  return max((Iterable<T>)toList(self),closure);}  }
class C{  public void repaintModel(int top,int bottom){  if (editorPane == null || imgBuffer == null) {    return;  }  Insets insets=getInsets();  int myHeight=Math.max(getHeight() - insets.top - insets.bottom- frw * 2,1);  if (prefViewHeight > myHeight) {    int ptop=top * myHeight / prefViewHeight;    int pbottom=(bottom * myHeight + prefViewHeight - 1) / prefViewHeight;    enqueueRepaint(ptop,pbottom);  } else {    enqueueRepaint(top,bottom);  }}  }
class C{  public String convert(){  if (s == null) {    try {      ByteArrayInputStream bs=new ByteArrayInputStream(bytes);      DataInputStream d=new DataInputStream(bs);      String buf=d.readUTF();      sHashCode=buf.hashCode();      return buf;    } catch (    IOException e) {      return "!!IOException!!";    }  }  return s;}  }
class C{  public static String parseCharset(Map<String,String> headers){  return parseCharset(headers,HTTP.DEFAULT_CONTENT_CHARSET);}  }
class C{  public LinkException(String explanation){  super(explanation);  linkResolvedName=null;  linkResolvedObj=null;  linkRemainingName=null;  linkExplanation=null;}  }
class C{  public int listIDsSize(final String hostport,final int depth){  int count=0;  TreeMap<Integer,TreeSet<String>> list=directory.get(hostport);  if (list != null) {    for (    Map.Entry<Integer,TreeSet<String>> entry : list.entrySet()) {      if (depth != -1 && entry.getKey() != depth)       continue;      count+=entry.getValue().size();    }  }  return count;}  }
class C{  public double elapsed(){  assureRightState("elapsed",true);  return (System.nanoTime() - time) / 1e9d;}  }
class C{  public SocketConnection createSocketClientConnection(){  return new AndroidSocketConnection();}  }
class C{  protected Session createConsumerSession() throws JMSException {  if (useSeparateSession) {    return connection.createSession(false,Session.AUTO_ACKNOWLEDGE);  } else {    return session;  }}  }
class C{  public static String encodeBytes(byte[] source,int off,int len){  String encoded=null;  try {    encoded=encodeBytes(source,off,len,NO_OPTIONS);  } catch (  java.io.IOException ex) {    assert false : ex.getMessage();  }  assert encoded != null;  return encoded;}  }
class C{  static void encode(Encoder encoder,Writer out,String str) throws IOException {  if (str == null) {    str="null";  }  final int n=str.length();  int j=encoder.firstEncodedOffset(str,0,n);  if (j == n) {    out.write(str);    return;  }  new Buffer().encode(encoder,out,str,j);}  }
class C{  public static void send(InternalDistributedMember recipient,int processorId,DM dm,ReplyException re,byte responseCode){  Assert.assertTrue(recipient != null,"BecomePrimaryBucketReplyMessage NULL recipient");  BecomePrimaryBucketReplyMessage m=new BecomePrimaryBucketReplyMessage(processorId,re,responseCode);  m.setRecipient(recipient);  dm.putOutgoing(m);}  }
class C{  private static byte[] encode3to4(byte[] source,int srcOffset,int numSigBytes,byte[] destination,int destOffset,int options){  byte[] ALPHABET=getAlphabet(options);  int inBuff=(numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0) | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0) | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);switch (numSigBytes) {case 3:    destination[destOffset]=ALPHABET[(inBuff >>> 18)];  destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=ALPHABET[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=ALPHABET[(inBuff) & 0x3f];return destination;case 2:destination[destOffset]=ALPHABET[(inBuff >>> 18)];destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=ALPHABET[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=EQUALS_SIGN;return destination;case 1:destination[destOffset]=ALPHABET[(inBuff >>> 18)];destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=EQUALS_SIGN;destination[destOffset + 3]=EQUALS_SIGN;return destination;default :return destination;}}  }
class C{  @Override public void executeHQL(String hql) throws CommandNeedRetryException, IOException {  CommandProcessorResponse response=getDriver().run(hql);  int retCode=response.getResponseCode();  if (retCode != 0) {    String err=response.getErrorMessage();    throw new IOException("Failed to execute hql [" + hql + "], error message is: "+ err);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void addBrokenPiecesFor(Player player,int contribution){  PlayingPlayerContainer container=match.getPlayingContainer(player);  if (!isCompleted() && container instanceof Team) {    Team team=(Team)container;    setTouched(team);    if (show && !touchedPlayers.contains(player)) {      touchedPlayers.add(player);      Channels.getTeamChannel(match,team).sendPrefixedMessage(new LocalizedComponent(ChatConstant.getConstant("objective.destroyable.touched"),new TeamComponent(owner),new UnlocalizedComponent(name),new NameComponent(player)));    }    UUID uuid=player.getUniqueId();    playerContributions.putIfAbsent(uuid,0);    playerContributions.put(uuid,playerContributions.get(uuid) + contribution);    broken+=contribution;    if ((double)broken / total >= completion) {      completed=true;      Channels.getGlobalChannel(match.getMatchThread()).sendMessage(new LocalizedComponentBuilder(ChatConstant.getConstant("objective.destroyable.completed"),new TeamComponent(owner),new UnlocalizedComponent(name),getContributionList()).build());      Bukkit.getPluginManager().callEvent(new ObjectiveCompleteEvent(this,player));    } else {      Bukkit.getPluginManager().callEvent(new ObjectiveTouchEvent(this,player));    }    entryHolder.updateEntries();  }}  }
class C{  public boolean hasNoDragOffset(){  return mTransOffsetX <= 0 && mTransOffsetY <= 0 ? true : false;}  }
class C{  public SimpleConnection(){}  }
class C{  protected double gain(double[][] dist,double priorVal){  return priorVal - ContingencyTables.entropyConditionedOnRows(dist);}  }
class C{  public void excluir(int idVisitante){  try {    String sql="DELETE FROM tb_visitantes WHERE id_visitante=?";    stm=conector.prepareStatement(sql);    stm.setInt(1,idVisitante);    stm.execute();    stm.close();  } catch (  SQLException ex) {    Mensagem.erro("Erro ao excluir visitante na base de dados! \n" + ex);  }}  }
class C{  public APanel(GridController gc,int windowNo){  super();  isNested=true;  m_ctx=Env.getCtx();  try {    m_curGC=gc;    gc.addDataStatusListener(this);    m_curTab=gc.getMTab();    Component tabElement=null;    tabElement=gc;    VTabbedPane tabPane=new VTabbedPane(false);    tabPane.addTab(m_curTab.getName().toString(),m_curTab,tabElement);    m_curWinTab=tabPane;    m_curWindowNo=windowNo;    jbInit();    initSwitchLineAction();  } catch (  Exception e) {    log.log(Level.SEVERE,"",e);  }  createMenu();  MRole role=MRole.getDefault();  m_curGC.query(m_onlyCurrentRows,m_onlyCurrentDays,role.getMaxQueryRecords());  m_curTab.navigateCurrent();  m_curGC.dynamicDisplay(0);}  }
class C{  public void run(){  backup();  calculateNextIteration();}  }
class C{  public static Map<String,String> parseQueryString(String queryString){  StringBuilder query=new StringBuilder(queryString);  Map<String,String> hash=new HashMap<String,String>();  while (query.length() > 0) {    char c=query.charAt(0);    if (c == '&') {      query.deleteCharAt(0);      continue;    }    int equals=query.indexOf("=");    String key=query.substring(0,equals);    String value;    query.delete(0,equals + 1);    if (query.charAt(0) == '\"') {      int nextQuote=query.indexOf("\"",1);      if (nextQuote == -1) {        value=query.toString();        query.delete(0,query.length());      } else {        value=query.substring(1,nextQuote);        query.delete(0,nextQuote + 1);      }    } else {      int ampIndex=query.indexOf("&");      if (ampIndex == -1) {        ampIndex=query.length();      }      value=query.substring(0,ampIndex);      query.delete(0,ampIndex);    }    hash.put(key,value);  }  return hash;}  }
class C{  protected static void parse_args(String argv[]){  int len=argv.length;  int i;  for (i=0; i < len; i++) {    if (argv[i].equals("-package")) {      if (++i >= len || argv[i].startsWith("-") || argv[i].endsWith(".cup"))       usage("-package must have a name argument");      emit.package_name=argv[i];    } else     if (argv[i].equals("-parser")) {      if (++i >= len || argv[i].startsWith("-") || argv[i].endsWith(".cup"))       usage("-parser must have a name argument");      emit.parser_class_name=argv[i];    } else     if (argv[i].equals("-input")) {      if (++i >= len || argv[i].startsWith("-") || argv[i].endsWith(".cup"))       usage("-input must have a name argument");      emit.input_file_name=argv[i];    } else     if (argv[i].equals("-symbols")) {      if (++i >= len || argv[i].startsWith("-") || argv[i].endsWith(".cup"))       usage("-symbols must have a name argument");      emit.symbol_const_class_name=argv[i];    } else     if (argv[i].equals("-nonterms")) {      include_non_terms=true;    } else     if (argv[i].equals("-expect")) {      if (++i >= len || argv[i].startsWith("-") || argv[i].endsWith(".cup"))       usage("-expect must have a name argument");      try {        expect_conflicts=Integer.parseInt(argv[i]);      } catch (      NumberFormatException e) {        usage("-expect must be followed by a decimal integer");      }    } else     if (argv[i].equals("-out")) {      if (++i >= len || argv[i].startsWith("-"))       usage("-out must have a path argument");      if (argv[i].length() != 0) {        out_path=argv[i] + File.separator;        File f=new File(out_path);        if (!f.exists() || !f.isDirectory())         out_path=null;      }      if (out_path == null)       usage("-out argument must be a valid existing path");    } else     if (argv[i].equals("-compact_red"))     opt_compact_red=true; else     if (argv[i].equals("-nosummary"))     no_summary=true; else     if (argv[i].equals("-nowarn"))     emit.nowarn=true; else     if (argv[i].equals("-dump_states"))     opt_dump_states=true; else     if (argv[i].equals("-dump_tables"))     opt_dump_tables=true; else     if (argv[i].equals("-progress"))     print_progress=true; else     if (argv[i].equals("-dump_grammar"))     opt_dump_grammar=true; else     if (argv[i].equals("-dump"))     opt_dump_states=opt_dump_tables=opt_dump_grammar=true; else     if (argv[i].equals("-time"))     opt_show_timing=true; else     if (argv[i].equals("-debug"))     opt_do_debug=true; else {      usage("Unrecognized option \"" + argv[i] + "\"");    }  }}  }
class C{  int decServiceInvocation(){  return serviceInvocationCount--;}  }
class C{  public APIException(int status,String message){  this(new APIError(status,message));}  }
class C{  public static boolean fileExists(String hash){  return new File(getUploadDirectory(),hash).isFile();}  }
class C{  private static String addQuotes(String s){  int n=s.length();  int i;  char c;  StringBuffer result=new StringBuffer(n + 2);  result.append('\"');  for (i=0; i < n; ++i) {    c=s.charAt(i);    if (c == '\"') {      result.append('\\');    }    result.append(c);  }  result.append('\"');  return result.toString();}  }
class C{  public static double toDouble(Datum datum,final double defaultValue){  if (datum == null)   return defaultValue;  return ((NUMBER)datum).doubleValue();}  }
class C{  private void initComponentsFromProperties(FacesContext context,ResourceBundle data){  for (Enumeration<String> keys=data.getKeys(); keys.hasMoreElements(); ) {    String key=keys.nextElement();    if (key == null) {      continue;    }    if (key.contains("_")) {      continue;    }    String value=data.getString(key);    String componentType=data.getString(key + "_componentType");    String valueType=data.getString(key + "_valueType");    if (LOGGER.isLoggable(Level.FINE)) {      LOGGER.fine("populating map for " + key + "\n"+ "\n\tvalue: "+ value+ "\n\tcomponentType: "+ componentType+ "\n\tvalueType: "+ valueType);    }    UIComponent component=context.getApplication().createComponent(componentType);    populateComponentWithValue(context,component,componentType,value,valueType);    components.put(key,component);  }}  }
class C{  public boolean matches(HttpServletRequest request){  String uri=request.getServletPath();  return (uri.startsWith(directory));}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.ANNOTABLE_SCRIPT_ELEMENT;}  }
class C{  public void add(int index,E element){  rangeCheckForAdd(index);  ensureCapacityInternal(size + 1);  System.arraycopy(elementData,index,elementData,index + 1,size - index);  elementData[index]=element;  size++;}  }
class C{  public boolean isNullable(){  return nullable;}  }
class C{  public static void discover(ReferenceValue ref){  processors.get(ref.getSemantics()).add(ref);}  }
class C{  public int size(){  return qualifiers.size();}  }
class C{  public static int dpToPx(float dp,Resources resources){  float px=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dp,resources.getDisplayMetrics());  return (int)px;}  }
class C{  public EpsilonMOEA(Problem problem,Population population,EpsilonBoxDominanceArchive archive,Selection selection,Variation variation,Initialization initialization){  this(problem,population,archive,selection,variation,initialization,new ParetoDominanceComparator());}  }
class C{  public static Set<Clause> findSubsumedClauses(Set<Clause> clauses){  Set<Clause> subsumed=new HashSet<Clause>();  int min=Integer.MAX_VALUE;  int max=0;  Map<Integer,Set<Clause>> clausesGroupedBySize=new HashMap<Integer,Set<Clause>>();  for (  Clause c : clauses) {    int size=c.getNumberLiterals();    if (size < min) {      min=size;    }    if (size > max) {      max=size;    }    Set<Clause> cforsize=clausesGroupedBySize.get(size);    if (null == cforsize) {      cforsize=new HashSet<Clause>();      clausesGroupedBySize.put(size,cforsize);    }    cforsize.add(c);  }  for (int i=min; i < max; i++) {    Set<Clause> scs=clausesGroupedBySize.get(i);    if (null != scs) {      for (int j=i + 1; j <= max; j++) {        Set<Clause> lcs=clausesGroupedBySize.get(j);        if (null != lcs) {          for (          Clause sc : scs) {            if (!subsumed.contains(sc)) {              for (              Clause lc : lcs) {                if (!subsumed.contains(lc)) {                  if (sc.subsumes(lc)) {                    subsumed.add(lc);                  }                }              }            }          }        }      }    }  }  return subsumed;}  }
class C{  private void launchAnimVectorList(){  if (!animatedVectorFirstLaunched) {    if (animatedVectorList.getLevel() < animatedVectorListMaxLevel) {      animatedVectorList.setLevel(animatedVectorList.getLevel() + 1);      currentAnimatedVectorFromList=(AnimatedVectorDrawable)animatedVectorList.getCurrent();    } else {      animatedVectorList.setLevel(0);      currentAnimatedVectorFromList=(AnimatedVectorDrawable)animatedVectorList.getCurrent();    }  } else {    animatedVectorFirstLaunched=false;  }  currentAnimatedVectorFromList.start();  uiHandler.postDelayed(uiRunnable,300 + 3000);}  }
class C{  public boolean isEmpty(){  return priorityQueue.isEmpty();}  }
class C{  public void transformMinion(Minion minion,Minion newMinion){  removeSpelltriggers(minion);  Player owner=context.getPlayer(minion.getOwner());  int index=owner.getMinions().indexOf(minion);  owner.getMinions().remove(minion);  if (newMinion != null) {    log("{} was transformed to {}",minion,newMinion);    newMinion.setId(idFactory.generateId());    newMinion.setOwner(owner.getId());    if (!context.getSummonReferenceStack().isEmpty() && context.getSummonReferenceStack().peek().equals(minion.getReference()) && !context.getEnvironment().containsKey(Environment.TRANSFORM_REFERENCE)) {      context.getEnvironment().put(Environment.TRANSFORM_REFERENCE,newMinion.getReference());      owner.getMinions().add(index,newMinion);    } else     if (!owner.getSetAsideZone().contains(minion)) {      if (index < 0 || index >= owner.getMinions().size()) {        owner.getMinions().add(newMinion);      } else {        owner.getMinions().add(index,newMinion);      }      applyAttribute(newMinion,Attribute.SUMMONING_SICKNESS);      refreshAttacksPerRound(newMinion);      if (newMinion.hasSpellTrigger()) {        addGameEventListener(owner,newMinion.getSpellTrigger(),newMinion);      }      if (newMinion.getCardCostModifier() != null) {        addManaModifier(owner,newMinion.getCardCostModifier(),newMinion);      }      handleEnrage(newMinion);    } else {      owner.getSetAsideZone().add(newMinion);      newMinion.setId(idFactory.generateId());      newMinion.setOwner(owner.getId());      removeSpelltriggers(newMinion);      return;    }  }  owner.getSetAsideZone().add(minion);  context.fireGameEvent(new BoardChangedEvent(context));}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:08.647 -0500",hash_original_method="ABFB21316126C2849AB41073C957D80E",hash_generated_method="CA9FDAB05D64003C749F093A56047C05") public String debugDump(){  return debugDump(0);}  }
class C{  public static void addEmojis(Context context,Spannable text,int emojiSize,int textSize,int index,int length){  addEmojis(context,text,emojiSize,textSize,index,length,false);}  }
class C{  public static void putIANA2JavaMapping(String ianaEncoding,String javaEncoding){  fIANA2JavaMap.put(ianaEncoding,javaEncoding);}  }
class C{  public void receiveSipRequest(SipRequest request){  mServiceDispatcher.postSipRequest(request);}  }
class C{  protected IoBufferWrapper(IoBuffer buf){  if (buf == null) {    throw new IllegalArgumentException("buf");  }  this.buf=buf;}  }
class C{  public int delete(){  return DELETE().deleteByExample(this.example);}  }
class C{  private void reschedule(){  if (interval > 0) {    time=timestamp + delay;    schedule();  }}  }
class C{  public HKDFBytesGenerator(Digest hash){  this.hMacHash=new HMac(hash);  this.hashLen=hash.getDigestSize();}  }
class C{  @Override protected void onStopLoading(){  cancelLoad();}  }
class C{  public boolean isValid(){  Object oo=get_Value(COLUMNNAME_IsValid);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void newProcess(){  newProcess(true);}  }
class C{  public CharBuffer append(double d){  return append(String.valueOf(d));}  }
class C{  public int numParameters(){  return 1;}  }
class C{  public boolean isModifiedNow(){  _lastCheckTime=0;  return isModified();}  }
class C{  public static Tree enclosingOfKind(final TreePath path,final Tree.Kind kind){  return enclosingOfKind(path,EnumSet.of(kind));}  }
class C{  public void log(String message,Exception excp){  getLog().log(new Status(IStatus.ERROR,PLUGIN_ID,message,excp));}  }
class C{  public void close(){  this.finished=true;  IOUtils.closeQuietly(this.bufferedReader);  this.cachedLine=null;}  }
class C{  public static VOUdaDefinition convertUdaDefDetailsToVoUdaDefinition(UdaDefinitionDetails udaDetails){  ArgumentValidator.notNull("UdaDefinitionDetails",udaDetails);  VOUdaDefinition voUdaDefinition=new VOUdaDefinition();  voUdaDefinition.setDefaultValue(udaDetails.getDefaultValue());  voUdaDefinition.setUdaId(udaDetails.getUdaId());  voUdaDefinition.setKey(udaDetails.getKey());  voUdaDefinition.setVersion(udaDetails.getVersion());  if (udaDetails.isMandatory()) {    voUdaDefinition.setConfigurationType(UdaConfigurationType.USER_OPTION_MANDATORY);  } else   if (udaDetails.isUserOption()) {    voUdaDefinition.setConfigurationType(UdaConfigurationType.USER_OPTION_OPTIONAL);  } else {    voUdaDefinition.setConfigurationType(UdaConfigurationType.SUPPLIER);  }  return voUdaDefinition;}  }
class C{  public NearestNeighbour(int k){  this(k,false);}  }
class C{  public static BodyQName create(final String uri,final String local){  return createWithPrefix(uri,local,null);}  }
class C{  public ServiceChannel createServiceChannel(EndpointDescription endpoint) throws ServiceResultException {  return new ServiceChannel(createSecureChannel(endpoint.getEndpointUrl(),endpoint));}  }
class C{  private static RadialGradientPaint createGradientPaint(Color c1,Color c2){  Point2D center=new Point2D.Float(0,0);  float radius=200;  float[] dist={0.0f,1.0f};  return new RadialGradientPaint(center,radius,dist,new Color[]{c1,c2});}  }
class C{  void handleClosed(){  if (!closed) {    closed=true;    for (    ContextualFuture<?> responseFuture : responseFutures.values()) {      responseFuture.context.executor().execute(null);    }    responseFutures.clear();    for (    Listener<Connection> listener : closeListeners) {      listener.accept(this);    }    timeout.cancel();  }}  }
class C{  @Override public void drawDomainMarker(Graphics2D g2,CategoryPlot plot,CategoryAxis axis,CategoryMarker marker,Rectangle2D dataArea){  Comparable category=marker.getKey();  CategoryDataset dataset=plot.getDataset(plot.getIndexOf(this));  int columnIndex=dataset.getColumnIndex(category);  if (columnIndex < 0) {    return;  }  final Composite savedComposite=g2.getComposite();  g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,marker.getAlpha()));  PlotOrientation orientation=plot.getOrientation();  Rectangle2D bounds;  if (marker.getDrawAsLine()) {    double v=axis.getCategoryMiddle(columnIndex,dataset.getColumnCount(),dataArea,plot.getDomainAxisEdge());    Line2D line=null;    if (orientation == PlotOrientation.HORIZONTAL) {      line=new Line2D.Double(dataArea.getMinX(),v,dataArea.getMaxX(),v);    } else     if (orientation == PlotOrientation.VERTICAL) {      line=new Line2D.Double(v,dataArea.getMinY(),v,dataArea.getMaxY());    } else {      throw new IllegalStateException();    }    g2.setPaint(marker.getPaint());    g2.setStroke(marker.getStroke());    g2.draw(line);    bounds=line.getBounds2D();  } else {    double v0=axis.getCategoryStart(columnIndex,dataset.getColumnCount(),dataArea,plot.getDomainAxisEdge());    double v1=axis.getCategoryEnd(columnIndex,dataset.getColumnCount(),dataArea,plot.getDomainAxisEdge());    Rectangle2D area=null;    if (orientation == PlotOrientation.HORIZONTAL) {      area=new Rectangle2D.Double(dataArea.getMinX(),v0,dataArea.getWidth(),(v1 - v0));    } else     if (orientation == PlotOrientation.VERTICAL) {      area=new Rectangle2D.Double(v0,dataArea.getMinY(),(v1 - v0),dataArea.getHeight());    }    g2.setPaint(marker.getPaint());    g2.fill(area);    bounds=area;  }  String label=marker.getLabel();  RectangleAnchor anchor=marker.getLabelAnchor();  if (label != null) {    Font labelFont=marker.getLabelFont();    g2.setFont(labelFont);    g2.setPaint(marker.getLabelPaint());    Point2D coordinates=calculateDomainMarkerTextAnchorPoint(g2,orientation,dataArea,bounds,marker.getLabelOffset(),marker.getLabelOffsetType(),anchor);    TextUtilities.drawAlignedString(label,g2,(float)coordinates.getX(),(float)coordinates.getY(),marker.getLabelTextAnchor());  }  g2.setComposite(savedComposite);}  }
class C{  private static String toCurl(HttpUriRequest request,boolean logAuthToken) throws IOException {  StringBuilder builder=new StringBuilder();  builder.append("curl ");  builder.append("-X ");  builder.append(request.getMethod());  builder.append(" ");  for (  Header header : request.getAllHeaders()) {    if (!logAuthToken && (header.getName().equals("Authorization") || header.getName().equals("Cookie"))) {      continue;    }    builder.append("--header \"");    builder.append(header.toString().trim());    builder.append("\" ");  }  URI uri=request.getURI();  if (request instanceof RequestWrapper) {    HttpRequest original=((RequestWrapper)request).getOriginal();    if (original instanceof HttpUriRequest) {      uri=((HttpUriRequest)original).getURI();    }  }  builder.append("\"");  builder.append(uri);  builder.append("\"");  if (request instanceof HttpEntityEnclosingRequest) {    HttpEntityEnclosingRequest entityRequest=(HttpEntityEnclosingRequest)request;    HttpEntity entity=entityRequest.getEntity();    if (entity != null && entity.isRepeatable()) {      if (entity.getContentLength() < 1024) {        ByteArrayOutputStream stream=new ByteArrayOutputStream();        entity.writeTo(stream);        if (isBinaryContent(request)) {          String base64=Base64.encodeToString(stream.toByteArray(),Base64.NO_WRAP);          builder.insert(0,"echo '" + base64 + "' | base64 -d > /tmp/$$.bin; ");          builder.append(" --data-binary @/tmp/$$.bin");        } else {          String entityString=stream.toString();          builder.append(" --data-ascii \"").append(entityString).append("\"");        }      } else {        builder.append(" [TOO MUCH DATA TO INCLUDE]");      }    }  }  return builder.toString();}  }
class C{  public WallclockTimingSpecifier(TimedElement owner,boolean isBegin,Calendar time){  super(owner,isBegin);  this.time=time;}  }
class C{  public static boolean isMatchingName(String nameA,String nameB){  int a=nameA.length();  int b=nameB.length();  if (a == b) {    return nameA.equals(nameB);  } else   if (a < b - 1) {    return nameB.endsWith(nameA) && nameB.charAt(b - a - 1) == '.';  } else   if (b < a - 1) {    return nameA.endsWith(nameB) && nameA.charAt(a - b - 1) == '.';  } else {    return false;  }}  }
class C{  public void checkDirectMessages(){  if (!getReplyToMessages()) {  }  try {    if (getConnection() == null) {      connect();    }    if (!isPage()) {      log("Only pages can check messages",Level.WARNING);      return;    }    RawAPIResponse res=getConnection().callGetAPI("/" + getConnection().getPage().getId() + "/conversations");    JSONObject result=res.asJSONObject();    JSONArray conversations=result.getJSONArray("data");    if (conversations != null && conversations.length() > 0) {      Network memory=getBot().memory().newMemory();      Vertex facebook=memory.createVertex(getPrimitive());      Vertex vertex=facebook.getRelationship(Primitive.LASTDIRECTMESSAGE);      long lastMessage=0;      if (vertex != null) {        lastMessage=((Number)vertex.getData()).longValue();      }      long max=0;      for (int index=0; index < conversations.length(); index++) {        JSONObject conversation=conversations.getJSONObject(index);        String conversationId=conversation.getString("id");        log("Processing conversation",Level.FINE,conversationId);        res=getConnection().callGetAPI("/" + conversationId + "/messages?fields=id,created_time,from,message");        result=res.asJSONObject();        JSONArray messages=result.getJSONArray("data");        if (messages != null && messages.length() > 0) {          for (int i=0; i < messages.length(); i++) {            JSONObject message=messages.getJSONObject(i);            Date createdTime=Utils.parseDate(message.getString("created_time"),"yyyy-MM-dd'T'HH:mm:ssX").getTime();            if ((System.currentTimeMillis() - createdTime.getTime()) > DAY) {              log("Day old message",Level.FINE,createdTime,conversationId);              continue;            }            if (createdTime.getTime() > lastMessage) {              String fromUser=message.getJSONObject("from").getString("name");              String fromUserId=message.getJSONObject("from").getString("id");              if (!fromUserId.equals(this.userName)) {                String text=message.getString("message").trim();                log("Processing message",Level.INFO,text,fromUser,createdTime,conversationId);                this.messagesProcessed++;                inputSentence(text,fromUser,this.userName,conversationId,memory);                if (createdTime.getTime() > max) {                  max=createdTime.getTime();                }              } else {                log("Ignoring own message",Level.FINE,createdTime,conversationId);              }            } else {              log("Old message",Level.FINE,createdTime,conversationId);            }          }        } else {          log("No messages",Level.FINE,conversationId);        }      }      if (max != 0) {        facebook.setRelationship(Primitive.LASTDIRECTMESSAGE,memory.createVertex(max));        memory.save();      }    } else {      log("No conversations",Level.FINE);    }  } catch (  Exception exception) {    log(exception);  }}  }
class C{  public void writeRuleSet(final EvolutionState state,final DataOutput dataOutput) throws IOException {  dataOutput.writeInt(numRules);  for (int x=0; x < numRules; x++)   rules[x].writeRule(state,dataOutput);}  }
class C{  public IntegerConverter(){  super(false);}  }
class C{  public void clearNotices(){  notices.clear();}  }
class C{  @Override public int describeContents(){  return 0;}  }
class C{  public void moveUp(double units){  mTempVec.setAll(WorldParameters.UP_AXIS);  mTempVec.rotateBy(mOrientation).normalize();  mTempVec.multiply(units);  mPosition.add(mTempVec);  if (mLookAtEnabled && mLookAtValid) {    mLookAt.add(mTempVec);    resetToLookAt();  }  markModelMatrixDirty();}  }
class C{  public void writeFillBits() throws EncodingException {  while (this.bufferLength != 0) {    writeBit(0);  }  this.buffer=0;}  }
class C{  public void testDisableCounting() throws Exception {  doTestDisableCounting(true);  doTestDisableCounting(false);}  }
class C{  @Override public boolean supportsGroupByBeyondSelect(){  debugCodeCall("supportsGroupByBeyondSelect");  return true;}  }
class C{  private static void verifyNode(final IZyTreeNode node){  Preconditions.checkNotNull(node,"IE00133: Operand tree node with value null detected");  for (  final IZyTreeNode child : node.getChildren()) {    verifyNode(child);  }}  }
class C{  private ComplianceFeature checkWorkProfilePolicy(org.wso2.emm.agent.beans.Operation operation) throws AndroidAgentException {  String profileName;  String systemAppsData;  String googlePlayAppsData;  try {    JSONObject profileData=new JSONObject(operation.getPayLoad().toString());    if (!profileData.isNull(resources.getString(R.string.intent_extra_profile_name))) {      profileName=(String)profileData.get(resources.getString(R.string.intent_extra_profile_name));    }    if (!profileData.isNull(resources.getString(R.string.intent_extra_enable_system_apps))) {      systemAppsData=(String)profileData.get(resources.getString(R.string.intent_extra_enable_system_apps));      List<String> systemAppList=Arrays.asList(systemAppsData.split(resources.getString(R.string.split_delimiter)));      for (      String packageName : systemAppList) {        if (!applicationManager.isPackageInstalled(packageName)) {          policy.setCompliance(false);          policy.setMessage(resources.getString(R.string.error_work_profile_policy));          return policy;        }      }    }    if (!profileData.isNull(resources.getString(R.string.intent_extra_enable_google_play_apps))) {      googlePlayAppsData=(String)profileData.get(resources.getString(R.string.intent_extra_enable_google_play_apps));      List<String> playStoreAppList=Arrays.asList(googlePlayAppsData.split(resources.getString(R.string.split_delimiter)));      for (      String packageName : playStoreAppList) {        if (!applicationManager.isPackageInstalled(packageName)) {          policy.setCompliance(false);          policy.setMessage(resources.getString(R.string.error_work_profile_policy));          return policy;        }      }    }  } catch (  JSONException e) {    throw new AndroidAgentException("Invalid JSON format.",e);  }  policy.setCompliance(true);  return policy;}  }
class C{  protected void optimizeJoinGroup(final AST2BOpContext ctx,final StaticAnalysis sa,final IBindingSet[] bSets,final JoinGroupNode group){  final GlobalAnnotations globals=new GlobalAnnotations(ctx.getLexiconNamespace(),ctx.getTimestamp());  for (  ServiceNode node : group.getChildren(ServiceNode.class)) {    if (log.isDebugEnabled()) {      log.debug(node);    }    final TermNode serviceRef=node.getServiceRef();    if (!serviceRef.isConstant() || !serviceRef.getValue().equals(ALP)) {      continue;    }    final JoinGroupNode subgroup=(JoinGroupNode)node.getGraphPattern();    if (log.isDebugEnabled()) {      log.debug("found an alp service to optimize:\n" + subgroup);    }    final Properties hints=subgroup.getQueryHints();    if (!hints.containsKey(LOWER_BOUND)) {      throw new RuntimeException("missing: " + LOWER_BOUND);    }    if (!hints.containsKey(UPPER_BOUND)) {      throw new RuntimeException("missing: " + UPPER_BOUND);    }    for (    IGroupMemberNode child : subgroup.getChildren()) {      if (!(child instanceof StatementPatternNode || child instanceof FilterNode)) {        throw new RuntimeException("Complex groups not allowed in alp service");      }    }    final Set<VarNode> dropVars=new LinkedHashSet<>();    final int lowerBound=Integer.valueOf(subgroup.getQueryHint(LOWER_BOUND));    final int upperBound=Integer.valueOf(subgroup.getQueryHint(UPPER_BOUND));    final VarNode tVarLeft=new VarNode("-tVarLeft-" + UUID.randomUUID().toString());    tVarLeft.setAnonymous(true);    final VarNode tVarRight=new VarNode("-tVarRight-" + UUID.randomUUID().toString());    tVarRight.setAnonymous(true);    dropVars.add(tVarLeft);    dropVars.add(tVarRight);    final boolean bidirectional=subgroup.getQueryHintAsBoolean(BIDIRECTIONAL,false);    final String evHint=subgroup.getQueryHint(EDGE_VAR);    VarNode edgeVar=null;    if (evHint != null) {      if (!(evHint.length() > 1 && evHint.charAt(0) == '?')) {        throw new IllegalArgumentException("Illegal hint for " + EDGE_VAR + ": "+ evHint);      }      edgeVar=new VarNode(evHint.substring(1));    }    TermNode left=null;    TermNode right=null;    IGroupMemberNode pathExpr=null;    JoinGroupNode group1=null;    JoinGroupNode group2=null;    TermNode middle=null;    for (    StatementPatternNode child : subgroup.getStatementPatterns()) {      if (child.getQueryHintAsBoolean(PATH_EXPR,false)) {        if (pathExpr != null) {          throw new RuntimeException("Only one " + PATH_EXPR + " allowed");        }        left=child.s();        right=child.o();        middle=child.p();        if (child.p() instanceof VarNode) {          final VarNode v=(VarNode)child.p();          v.setAnonymous(true);          dropVars.add(v);        }        if (bidirectional) {          final StatementPatternNode forward=new StatementPatternNode(tVarLeft,child.p(),tVarRight,child.c(),child.getScope());          forward.setQueryHint(PATH_EXPR,"true");          group1=new JoinGroupNode();          group1.addChild(forward);          final StatementPatternNode reverse=new StatementPatternNode(tVarRight,child.p(),tVarLeft,child.c(),child.getScope());          reverse.setQueryHint(PATH_EXPR,"true");          group2=new JoinGroupNode();          group2.addChild(reverse);          final UnionNode union=new UnionNode();          union.addArg(group1);          union.addArg(group2);          pathExpr=union;        } else {          final StatementPatternNode sp=new StatementPatternNode(tVarLeft,child.p(),tVarRight,child.c(),child.getScope());          sp.setQueryHint(PATH_EXPR,"true");          pathExpr=sp;        }        subgroup.removeChild(child);      }    }    IVariable<?> leftVar=null;    if (left instanceof VarNode) {      leftVar=((VarNode)left).getValueExpression();    }    IVariable<?> rightVar=null;    if (right instanceof VarNode) {      rightVar=((VarNode)right).getValueExpression();    }    for (    FilterNode f : subgroup.getChildren(FilterNode.class)) {      final Iterator<BOp> it=BOpUtility.preOrderIteratorWithAnnotations(f);      boolean swap=false;      while (it.hasNext()) {        final BOp bop=it.next();        if (!(bop instanceof VarNode)) {          continue;        }        final VarNode v=(VarNode)bop;        final IVariable<?> ve=v.getValueExpression();        if (leftVar != null && leftVar.equals(ve)) {          v.setValueExpression(tVarLeft.getValueExpression());          swap=true;        } else         if (rightVar != null && rightVar.equals(ve)) {          v.setValueExpression(tVarRight.getValueExpression());          swap=true;        }      }      if (swap) {        final IValueExpressionNode veNode=f.getValueExpressionNode();        veNode.setValueExpression(null);        AST2BOpUtility.toVE(ctx.context,globals,veNode);      }    }    final ArbitraryLengthPathNode alpNode=new ArbitraryLengthPathNode(left,right,tVarLeft,tVarRight,lowerBound,upperBound);    if (edgeVar != null) {      alpNode.setEdgeVar(edgeVar,middle);    }    alpNode.subgroup().addChild(pathExpr);    for (    @SuppressWarnings("rawtypes") GroupMemberNodeBase child : subgroup.getChildren(GroupMemberNodeBase.class)) {      if (!child.getQueryHintAsBoolean(PATH_EXPR,false)) {        final Iterator<BOp> it=BOpUtility.preOrderIteratorWithAnnotations(child);        while (it.hasNext()) {          final BOp bop=it.next();          if (bop instanceof VarNode) {            final VarNode v=(VarNode)bop;            v.setAnonymous(true);            dropVars.add(v);          }        }        child.setQueryHints(new Properties());        subgroup.removeChild(child);        if (bidirectional) {          group1.addChild((IGroupMemberNode)child.clone());          group2.addChild((IGroupMemberNode)child.clone());        } else {          alpNode.subgroup().addChild(child);        }      }    }    alpNode.setDropVars(dropVars);    if (log.isDebugEnabled()) {      log.debug("optimized alpNode:\n" + alpNode);    }    group.removeChild(node);    group.addChild(alpNode);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static AddReviewFragment newInstance(int productId,String productName,String productPrice){  AddReviewFragment fragment=new AddReviewFragment();  Bundle args=new Bundle();  args.putInt(PRODUCT_ID,productId);  args.putString(PRODUCT_NAME,productName);  args.putString(PRODUCT_PRICE,productPrice);  fragment.setArguments(args);  return fragment;}  }
class C{  private void emit8ByteCompare(SPARCMacroAssembler masm,Register result,Register array1,Register array2,Register length,Label trueLabel,Label falseLabel){  assert lengthValue.getPlatformKind().equals(SPARCKind.WORD);  Label loop=new Label();  Label compareTail=new Label();  Label compareTailCorrectVectorEnd=new Label();  Register tempReg1=asRegister(temp4);  Register tempReg2=asRegister(temp5);  masm.sra(length,0,length);  masm.and(result,VECTOR_SIZE - 1,result);  masm.andcc(length,~(VECTOR_SIZE - 1),length);  BPCC.emit(masm,Xcc,Equal,NOT_ANNUL,PREDICT_NOT_TAKEN,compareTail);  masm.sub(length,VECTOR_SIZE,length);  masm.add(array1,length,array1);  masm.add(array2,length,array2);  masm.sub(g0,length,length);  masm.ldx(new SPARCAddress(array1,0),tempReg1);  masm.ldx(new SPARCAddress(array2,0),tempReg2);  masm.compareBranch(tempReg1,tempReg2,NotEqual,Xcc,falseLabel,PREDICT_NOT_TAKEN,null);  masm.compareBranch(length,0,Equal,Xcc,compareTailCorrectVectorEnd,PREDICT_NOT_TAKEN,null);  masm.ldx(new SPARCAddress(array1,length),tempReg1);  masm.bind(loop);  masm.ldx(new SPARCAddress(array2,length),tempReg2);  masm.cmp(tempReg1,tempReg2);  BPCC.emit(masm,Xcc,NotEqual,NOT_ANNUL,PREDICT_NOT_TAKEN,falseLabel);  masm.addcc(length,VECTOR_SIZE,length);  BPCC.emit(masm,Xcc,NotEqual,ANNUL,PREDICT_TAKEN,loop);  masm.ldx(new SPARCAddress(array1,length),tempReg1);  masm.compareBranch(result,0,Equal,Xcc,trueLabel,PREDICT_TAKEN,null);  masm.bind(compareTailCorrectVectorEnd);  masm.add(array1,VECTOR_SIZE,array1);  masm.add(array2,VECTOR_SIZE,array2);  masm.bind(compareTail);}  }
class C{  @Override public Iterator<T> iterator(){  return buffer.descendingIterator();}  }
class C{  public static Pair<JobSpecification,IAdapterFactory> buildFeedIntakeJobSpec(Feed primaryFeed,AqlMetadataProvider metadataProvider,FeedPolicyAccessor policyAccessor) throws Exception {  JobSpecification spec=JobSpecificationUtils.createJobSpecification();  spec.setFrameSize(FeedConstants.JobConstants.DEFAULT_FRAME_SIZE);  IAdapterFactory adapterFactory=null;  IOperatorDescriptor feedIngestor;  AlgebricksPartitionConstraint ingesterPc;  Triple<IOperatorDescriptor,AlgebricksPartitionConstraint,IAdapterFactory> t=metadataProvider.buildFeedIntakeRuntime(spec,primaryFeed,policyAccessor);  feedIngestor=t.first;  ingesterPc=t.second;  adapterFactory=t.third;  AlgebricksPartitionConstraintHelper.setPartitionConstraintInJobSpec(spec,feedIngestor,ingesterPc);  NullSinkOperatorDescriptor nullSink=new NullSinkOperatorDescriptor(spec);  AlgebricksPartitionConstraintHelper.setPartitionConstraintInJobSpec(spec,nullSink,ingesterPc);  spec.connect(new OneToOneConnectorDescriptor(spec),feedIngestor,0,nullSink,0);  spec.addRoot(nullSink);  return new Pair<JobSpecification,IAdapterFactory>(spec,adapterFactory);}  }
class C{  public static Number power(BigInteger self,Integer exponent){  if (exponent >= 0) {    return self.pow(exponent);  } else {    return power(self,(double)exponent);  }}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  private static void collectIVsToResolve(final IV<?,?> iv,final Map<IV<?,?>,BigdataValue> ivMap,final LexiconRelation lex){  if (iv.isNullIV() && iv.hasValue() && !iv.isInline()) {    final Object ivVal=iv.getValue();    if (ivVal instanceof BigdataValue) {      final BigdataValue bdVal=(BigdataValue)ivVal;      if (!bdVal.isRealIV()) {        ivMap.put(iv,bdVal);      }    }  } else   if (!lex.isInlineLiterals() && iv.isLiteral()) {    ivMap.put(iv,((NumericIV<?,?>)iv).asValue(lex));  }}  }
class C{  public void expandAll(){  int row=0;  while (row < getRowCount()) {    expandRow(row);    row++;  }}  }
class C{  protected void clearOutEvents(){}  }
class C{  void engineUpdate(byte[] data,int offset,int length){  count+=length;  int datalen=DATA_LENGTH;  int remainder;  while (length >= (remainder=datalen - buffered)) {    System.arraycopy(data,offset,buffer,buffered,remainder);    engineTransform(buffer);    length-=remainder;    offset+=remainder;    buffered=0;  }  if (length > 0) {    System.arraycopy(data,offset,buffer,buffered,length);    buffered+=length;  }}  }
class C{  @Override public void onWebsocketMessageFragment(WebSocket conn,Framedata frame){}  }
class C{  public boolean shouldColorOutput(){  boolean shouldColorOutput=CLIArgumentParser.shouldColorOutput();  if (shouldColorOutput && yamlConfiguration.isPresent() && !yamlConfiguration.get().getColor().isEmpty()) {    String option=yamlConfiguration.get().getColor();    validateColorOption(option);    if (option.equals(Messages.DISABLE)) {      shouldColorOutput=false;    }  }  return shouldColorOutput;}  }
class C{  public boolean isTerminal(){  return myCompiledValuePattern == null;}  }
class C{  public static void validatePositiveNumber(long fieldValue,String fieldName){  if (fieldValue <= 0) {    logAndThrow(String.format("%s should be a positive number: %d",fieldName,fieldValue));  }}  }
class C{  public boolean init(){  log.config("");  boolean trl=!Env.isBaseLanguage(m_ctx,"AD_Process");  String sql="SELECT Name, Description, Help, IsReport, ShowHelp " + "FROM AD_Process " + "WHERE AD_Process_ID=?";  if (trl)   sql="SELECT t.Name, t.Description, t.Help, p.IsReport, p.ShowHelp " + "FROM AD_Process p, AD_Process_Trl t " + "WHERE p.AD_Process_ID=t.AD_Process_ID"+ " AND p.AD_Process_ID=? AND t.AD_Language=?";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,m_pi.getAD_Process_ID());    if (trl)     pstmt.setString(2,Env.getAD_Language(m_ctx));    rs=pstmt.executeQuery();    if (rs.next()) {      m_Name=rs.getString(1);      m_ShowHelp=rs.getString(5);      m_messageText.append("<b>");      String s=rs.getString(2);      if (rs.wasNull())       m_messageText.append(Msg.getMsg(m_ctx,"StartProcess?")); else       m_messageText.append(s);      m_messageText.append("</b>");      s=rs.getString(3);      if (!rs.wasNull())       m_messageText.append("<p>").append(s).append("</p>");    }  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);    return false;  } finally {    DB.close(rs,pstmt);  }  if (m_Name == null)   return false;  this.setTitle(m_Name);  message.setContent(m_messageText.toString());  m_pi.setAD_User_ID(Env.getAD_User_ID(Env.getCtx()));  m_pi.setAD_Client_ID(Env.getAD_Client_ID(Env.getCtx()));  m_pi.setTitle(m_Name);  parameterPanel=new ProcessParameterPanel(m_WindowNo,m_pi);  centerPanel.getChildren().clear();  if (parameterPanel.init()) {    centerPanel.appendChild(parameterPanel);  } else {    if (m_ShowHelp != null && m_ShowHelp.equals("N")) {      m_autoStart=true;    }    if (m_autoStart) {      this.getFirstChild().setVisible(false);      startProcess();      return true;    }  }  if (isValid() && m_ShowHelp != null && m_ShowHelp.equals("S")) {    this.getFirstChild().setVisible(false);    startProcess();  }  return true;}  }
class C{  @Before public void initNames() throws Exception {  Date dateAB=new Date();  MailboxMessage msgA=buildMessage(MessageUid.of(100),dateAB);  MailboxMessage msgB=buildMessage(MessageUid.of(100),dateAB);  MailboxMessage msgC=buildMessage(MessageUid.of(200),new Date());  msgResultA=new MessageResultImpl(msgA);  msgResultACopy=new MessageResultImpl(msgA);  msgResultB=new MessageResultImpl(msgB);  msgResultC=new MessageResultImpl(msgC);}  }
class C{  private static IMultiPoint[] randomPoints(int n,int d,int scale){  IMultiPoint points[]=new IMultiPoint[n];  for (int i=0; i < n; i++) {    StringBuilder sb=new StringBuilder();    for (int j=0; j < d; j++) {      sb.append(rGen.nextDouble() * scale);      if (j < d - 1) {        sb.append(",");      }    }    points[i]=new Hyperpoint(sb.toString());  }  return points;}  }
class C{  @Override public WidgetsModel clone(){  return new WidgetsModel(this);}  }
class C{  public boolean enabled(){  return soot.PhaseOptions.getBoolean(options,"enabled");}  }
class C{  public void processServerResponse(int response,ResponseData rawData){  if (response != Policy.RETRY) {    setRetryCount(0);  } else {    setRetryCount(mRetryCount + 1);  }  if (response == Policy.LICENSED) {    Map<String,String> extras=decodeExtras(rawData.extra);    mLastResponse=response;    setValidityTimestamp(extras.get("VT"));    setRetryUntil(extras.get("GT"));    setMaxRetries(extras.get("GR"));  } else   if (response == Policy.NOT_LICENSED) {    setValidityTimestamp(DEFAULT_VALIDITY_TIMESTAMP);    setRetryUntil(DEFAULT_RETRY_UNTIL);    setMaxRetries(DEFAULT_MAX_RETRIES);  }  setLastResponse(response);  mPreferences.commit();}  }
class C{  public boolean hasSkyLight(){  return skyLight != null;}  }
class C{  public MethodInfo(ClassInfo myClass,String name,ClassInfo returnType,ClassInfo[] paramTypes,int accessFlags){  this.myClass=myClass;  this.name=name;  this.returnType=returnType;  this.paramTypes=paramTypes;  this.modifiers=accessFlags;}  }
class C{  public static void chooseProfile(Context context,int mode){  AudioManager audio=(AudioManager)context.getSystemService(Context.AUDIO_SERVICE);  if (mode == 0)   audio.setRingerMode(AudioManager.RINGER_MODE_SILENT); else   if (mode == 1)   audio.setRingerMode(AudioManager.RINGER_MODE_VIBRATE); else   if (mode == 2)   audio.setRingerMode(AudioManager.RINGER_MODE_NORMAL);}  }
class C{  Type litType(TypeTag tag){  return (tag == CLASS) ? syms.stringType : syms.typeOfTag[tag.ordinal()];}  }
class C{  public String toString(){  return new String(b,0,i_end);}  }
class C{  public static boolean isWhitespaceNonline(char c){  return !RegExpUtils.resetAndTest(regexpNotWhitespaceExcludingNewlineAndCarriageReturn,String.valueOf(c));}  }
class C{  @Override protected EClass eStaticClass(){  return DatatypePackage.Literals.ENUM;}  }
class C{  public EnableDeviceGetPropsInfo(File logFileAbsoluteLocation){  mLogFileAbsoluteLocation=logFileAbsoluteLocation;}  }
class C{  public boolean equals(Object o){  try {    Address a=(Address)o;    if ((a.name == null && name != null) || (a.name != null && name == null))     return false;    if (name == null)     return true;    return a.name.equals(name);  } catch (  Exception e) {    return false;  }}  }
class C{  public Boolean isIPFilter(){  return ipFilter;}  }
class C{  public void enable(){  RequestParameters params=new RequestParameters();  params.add("enable","true");  this.getServices().post(params,new StringHandle("{}"));}  }
class C{  @After public void tearDown(){  webClient.closeAllWindows();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public T caseTypedElement(TypedElement object){  return null;}  }
class C{  public String writeToString(Node nodeArg) throws DOMException, LSException {  if (nodeArg == null) {    return null;  }  Serializer serializer=fXMLSerializer;  serializer.reset();  if (nodeArg != fVisitedNode) {    String xmlVersion=getXMLVersion(nodeArg);    serializer.getOutputFormat().setProperty("version",xmlVersion);    fDOMConfigProperties.setProperty(DOMConstants.S_XERCES_PROPERTIES_NS + DOMConstants.S_XML_VERSION,xmlVersion);    fDOMConfigProperties.setProperty(DOMConstants.S_XSL_OUTPUT_ENCODING,"UTF-16");    if ((nodeArg.getNodeType() != Node.DOCUMENT_NODE || nodeArg.getNodeType() != Node.ELEMENT_NODE || nodeArg.getNodeType() != Node.ENTITY_NODE) && ((fFeatures & XMLDECL) != 0)) {      fDOMConfigProperties.setProperty(DOMConstants.S_XSL_OUTPUT_OMIT_XML_DECL,DOMConstants.DOM3_DEFAULT_FALSE);    }    fVisitedNode=nodeArg;  }  fXMLSerializer.setOutputFormat(fDOMConfigProperties);  StringWriter output=new StringWriter();  try {    serializer.setWriter(output);    if (fDOMSerializer == null) {      fDOMSerializer=(DOM3Serializer)serializer.asDOM3Serializer();    }    if (fDOMErrorHandler != null) {      fDOMSerializer.setErrorHandler(fDOMErrorHandler);    }    if (fSerializerFilter != null) {      fDOMSerializer.setNodeFilter(fSerializerFilter);    }    fDOMSerializer.setNewLine(fEndOfLine.toCharArray());    fDOMSerializer.serializeDOM3(nodeArg);  } catch (  LSException lse) {    throw lse;  }catch (  RuntimeException e) {    throw (LSException)createLSException(LSException.SERIALIZE_ERR,e).fillInStackTrace();  }catch (  Exception e) {    if (fDOMErrorHandler != null) {      fDOMErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,e.getMessage(),null,e));    }    throw (LSException)createLSException(LSException.SERIALIZE_ERR,e).fillInStackTrace();  }  return output.toString();}  }
class C{  public boolean process(Set<? extends TypeElement> annotations,RoundEnvironment roundEnv){  int errors=0;  boolean processingOver=roundEnv.processingOver();  if (!processingOver && round == 1) {    errors+=expectIllegalArgumentException(null);    errors+=expectIllegalArgumentException(this);    try {      PrintWriter pw=new PrintWriter(filer.createSourceFile("ConstantTest").openWriter());      try {        Boolean[] booleans={true,false};        Byte[] bytes={Byte.MIN_VALUE,-1,0,1,Byte.MAX_VALUE};        Short[] shorts={Short.MIN_VALUE,-1,0,1,Short.MAX_VALUE};        Integer[] ints={Integer.MIN_VALUE,-1,0,1,Integer.MAX_VALUE};        Long[] longs={Long.MIN_VALUE,-1L,0L,1L,Long.MAX_VALUE};        Character[] chars={Character.MIN_VALUE,' ','\t','a','b','c','~',Character.MAX_VALUE};        Float[] floats={Float.NaN,Float.NEGATIVE_INFINITY,-1.0f,-0.0f,0.0f,1.0f,Float.POSITIVE_INFINITY};        Double[] doubles={Double.NaN,Double.NEGATIVE_INFINITY,-1.0,-0.0,0.0,1.0,Double.POSITIVE_INFINITY};        pw.println("class ConstantTest {");        pw.println(String.format("  private static boolean[] booleans = {%s};",printConstants(booleans)));        pw.println(String.format("  private static byte[] bytes = {%s};",printConstants(bytes)));        pw.println(String.format("  private static short[] shorts = {%s};",printConstants(shorts)));        pw.println(String.format("  private static int[] ints = {%s};",printConstants(ints)));        pw.println(String.format("  private static long[] longs = {%s};",printConstants(longs)));        pw.println(String.format("  private static char[] chars = {%s};",printConstants(chars)));        pw.println(String.format("  private static float[] floats = {%s};",printConstants(floats)));        pw.println(String.format("  private static double[] doubles = {%s};",printConstants(doubles)));        pw.println("}");      }  finally {        pw.close();      }    } catch (    IOException io) {      throw new RuntimeException(io);    }    round++;  } else   if (processingOver) {    if (errors > 0) {      throw new RuntimeException();    }  }  return true;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (Sage.client && !Sage.isTrueClient())   makeNetworkedCall(stack); else   SageTV.setSyncSystemClock(evalBool(stack.pop()));  return null;}  }
class C{  public void startEval() throws IOException {  startChangesIfNecessary();  ResponseWriter writer=getWrapped();  writer.startElement("eval",null);  writer.startCDATA();}  }
class C{  public void increaseKey(int i,Key key){  if (i < 0 || i >= n)   throw new IndexOutOfBoundsException();  if (!contains(i))   throw new NoSuchElementException("Specified index is not in the queue");  if (greater(nodes[i].key,key))   throw new IllegalArgumentException("Calling with this argument would not increase the key");  delete(i);  insert(i,key);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:11.298 -0500",hash_original_method="CB278E99E24B4E735DC62BFED6C8971E",hash_generated_method="7C09908AD80CEF2B2706D012825CE5C7") private static Object spinWait(Node node,Slot slot){  int spins=SPINS;  for (; ; ) {    Object v=node.get();    if (v != null)     return v; else     if (spins > 0)     --spins; else     tryCancel(node,slot);  }}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) public static <T>T min(Collection<? extends T> coll,Comparator<? super T> comp){  if (comp == null)   return (T)min((Collection)coll);  Iterator<? extends T> i=coll.iterator();  T candidate=i.next();  while (i.hasNext()) {    T next=i.next();    if (comp.compare(next,candidate) < 0)     candidate=next;  }  return candidate;}  }
class C{  public boolean isAutoIncrement(int columnIndex) throws SQLException {  checkColRange(columnIndex);  return colInfo[columnIndex].autoIncrement;}  }
class C{  public ZIncrByParams nx(){  addParam(NX);  return this;}  }
class C{  private void rewriteWithTemporaries(Instruction[] set,IR ir){  HashMap<Register,Register> map=new HashMap<Register,Register>();  for (  Instruction s : set) {    for (Enumeration<Operand> e=s.getUses(); e.hasMoreElements(); ) {      Operand use=e.nextElement();      if (use != null && use.isRegister()) {        Register r=use.asRegister().getRegister();        Register temp=map.get(r);        if (temp != null) {          use.asRegister().setRegister(temp);        }      }    }    if (VM.VerifyAssertions)     VM._assert(s.getNumberOfDefs() == 1);    Operand def=s.getDefs().nextElement();    RegisterOperand rDef=def.asRegister();    RegisterOperand temp=ir.regpool.makeTemp(rDef);    map.put(rDef.getRegister(),temp.getRegister());    s.replaceOperand(def,temp);  }}  }
class C{  public void testSortsSameAttributes() throws Exception {  XppDom dom1=XppFactory.buildDom("<dom a='1' b='2'/>");  XppDom dom2=XppFactory.buildDom("<dom a='2' b='1'/>");  assertEquals(-1,comparator.compare(dom1,dom2));  assertEquals("/dom[@a]",xpath.get());  assertEquals(1,comparator.compare(dom2,dom1));  assertEquals("/dom[@a]",xpath.get());}  }
class C{  @Override public Rectangle2D drawShape(final IShape shape,final ShapeDrawingAttributes attributes){  if (shape == null) {    return null;  }  if (sceneBuffer.getSceneToUpdate() == null) {    return null;  }  if (highlight) {    attributes.color=GamaColor.getInt(data.getHighlightColor().getRGB());  }  sceneBuffer.getSceneToUpdate().addGeometry(shape.getInnerGeometry(),attributes);  return rect;}  }
class C{  synchronized void threadFinished(ResourceThread finishedThread,boolean success){  if (finishedThread.cssDocInfo != null) {    cssCount--;  }  if ((HTMLComponent.SUPPORT_CSS) && (cssCount == 0)) {    cssCount=-1;    htmlC.applyAllCSS();    htmlC.cssCompleted();  }  running.removeElement(finishedThread);  if (queue.size() > 0) {    ResourceThread t=(ResourceThread)queue.firstElement();    queue.removeElementAt(0);    running.addElement(t);    t.go();  } else {    threadCount--;  }  if (threadCount == 0) {    if (images.size() == 0) {      htmlC.setPageStatus(HTMLCallback.STATUS_COMPLETED);    } else {      startRunningImages();    }  }}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public void update(int b,ManifestEntryVerifier mev) throws IOException {  if (b != -1) {    if (parsingBlockOrSF) {      baos.write(b);    } else {      mev.update((byte)b);    }  } else {    processEntry(mev);  }}  }
class C{  static final long[] compactCachePart(final long[] srcCache,int lgArrLongs,int curCount,long thetaLong,boolean dstOrdered){  if (curCount == 0) {    return new long[0];  }  long[] cacheOut=new long[curCount];  int len=1 << lgArrLongs;  int j=0;  for (int i=0; i < len; i++) {    long v=srcCache[i];    if ((v <= 0L) || (v >= thetaLong))     continue;    cacheOut[j++]=v;  }  assert curCount == j;  if (dstOrdered) {    Arrays.sort(cacheOut);  }  return cacheOut;}  }
class C{  static Class findProviderClass(String className,ClassLoader cl,boolean doFallback) throws ClassNotFoundException, ConfigurationError {  SecurityManager security=System.getSecurityManager();  try {    if (security != null) {      final int lastDot=className.lastIndexOf(".");      String packageName=className;      if (lastDot != -1)       packageName=className.substring(0,lastDot);      security.checkPackageAccess(packageName);    }  } catch (  SecurityException e) {    throw e;  }  Class providerClass;  if (cl == null) {    providerClass=Class.forName(className);  } else {    try {      providerClass=cl.loadClass(className);    } catch (    ClassNotFoundException x) {      if (doFallback) {        ClassLoader current=ObjectFactory.class.getClassLoader();        if (current == null) {          providerClass=Class.forName(className);        } else         if (cl != current) {          cl=current;          providerClass=cl.loadClass(className);        } else {          throw x;        }      } else {        throw x;      }    }  }  return providerClass;}  }
class C{  public static boolean slotOcclusionTest(PartSlot slot,IMultipartContainer container){  return slotOcclusionTest(slot,null,container.getParts());}  }
class C{  public DbTable(String schema,String tbl,Collection<DbColumn> cols,Collection<QueryIndex> idxs){  this.schema=schema;  this.tbl=tbl;  this.cols=cols;  this.idxs=idxs;}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.UNARY_EXPRESSION;}  }
class C{  private void saveFollowers(User user,CursoredList<Long> followers){  final User finalUser=user;  List<User> users=followers.stream().map(null).collect(Collectors.toList());  Integer pointer=0;  Integer batchSize=400;  Integer retryCount=0;  while ((batchSize * pointer) < users.size()) {    try {      followsRepository.saveFollows(users.subList((batchSize * pointer),((batchSize * pointer) + batchSize) < users.size() ? ((batchSize * pointer) + batchSize) : users.size()).stream().map(null).collect(Collectors.toSet()));      pointer++;    } catch (    Exception ex) {      if (retryCount <= 4) {        retryCount++;      } else {        throw ex;      }    }  }}  }
class C{  public void readyToTest(){  m_keys=generateKeys(m_keyspace);  Algorithm algo=new TestAlgorithm();  AlgorithmConfig algoConfig=new AlgorithmConfig("test","testing",AlgorithmType.JAVA,TestAlgorithm.class.getName());  algo.setAlgorithmConfig(algoConfig);  algo.init();  m_exeSrc=new CustomExecutionSource(algo);  for (  String name : m_inputs.keySet()) {    m_exeSrc.addInputSource(name,m_inputs.get(name));  }  for (  String name : m_outputs.keySet()) {    OutputDatasetSource src=m_outputs.get(name);    src.init();    m_exeSrc.addOutputSource(name,src);  }}  }
class C{  public String optString(int index){  return this.optString(index,"");}  }
class C{  public void raw(String message){  log(message,"raw","none",System.out);}  }
class C{  public static Observable<Connectivity> observeNetworkConnectivity(final Context context,final NetworkObservingStrategy strategy){  Preconditions.checkNotNull(context,"context == null");  Preconditions.checkNotNull(strategy,"strategy == null");  return strategy.observeNetworkConnectivity(context);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof XYAreaRenderer2)) {    return false;  }  XYAreaRenderer2 that=(XYAreaRenderer2)obj;  if (this.showOutline != that.showOutline) {    return false;  }  if (!ShapeUtilities.equal(this.legendArea,that.legendArea)) {    return false;  }  return super.equals(obj);}  }
class C{  public void info(String msg,Throwable thrown){  log(Level.INFO,thrown,msg,thrown);}  }
class C{  public int[] Gen_columnIndices(android.database.Cursor cursor){  int[] result=new int[GEN_COUNT];  result[0]=cursor.getColumnIndex(GEN_FIELD__ID);  if (result[0] == -1) {    result[0]=cursor.getColumnIndex("_ID");  }  result[1]=cursor.getColumnIndex(GEN_FIELD_NICKNAME);  result[2]=cursor.getColumnIndex(GEN_FIELD_ADDRESS);  result[3]=cursor.getColumnIndex(GEN_FIELD_PORT);  result[4]=cursor.getColumnIndex(GEN_FIELD_PASSWORD);  result[5]=cursor.getColumnIndex(GEN_FIELD_COLORMODEL);  result[6]=cursor.getColumnIndex(GEN_FIELD_FORCEFULL);  result[7]=cursor.getColumnIndex(GEN_FIELD_REPEATERID);  result[8]=cursor.getColumnIndex(GEN_FIELD_INPUTMODE);  result[9]=cursor.getColumnIndex(GEN_FIELD_SCALEMODE);  result[10]=cursor.getColumnIndex(GEN_FIELD_USELOCALCURSOR);  result[11]=cursor.getColumnIndex(GEN_FIELD_KEEPPASSWORD);  result[12]=cursor.getColumnIndex(GEN_FIELD_FOLLOWMOUSE);  result[13]=cursor.getColumnIndex(GEN_FIELD_USEREPEATER);  result[14]=cursor.getColumnIndex(GEN_FIELD_METALISTID);  result[15]=cursor.getColumnIndex(GEN_FIELD_LAST_META_KEY_ID);  result[16]=cursor.getColumnIndex(GEN_FIELD_FOLLOWPAN);  result[17]=cursor.getColumnIndex(GEN_FIELD_USERNAME);  result[18]=cursor.getColumnIndex(GEN_FIELD_SECURECONNECTIONTYPE);  result[19]=cursor.getColumnIndex(GEN_FIELD_SHOWZOOMBUTTONS);  result[20]=cursor.getColumnIndex(GEN_FIELD_DOUBLE_TAP_ACTION);  return result;}  }
class C{  public synchronized void add(final CacheHandle cacheHandle){  if (digestSet.contains(cacheHandle.contentDigest))   return;  digestSet.add(cacheHandle.contentDigest);  cacheHandleQueue.add(cacheHandle);  pcs.firePropertyChange(null,null,null);  checkDownloads();}  }
class C{  public IntervalImpl(int serialNum,long startIntervalDateTime,double coverageFactor,FramingFlowType intervalDataType,ISource source,IIntervalClassification intervalClassification,Version adeVersion) throws AdeInternalException {  a_adeVersion=adeVersion;  if (startIntervalDateTime < 0) {    throw new IllegalArgumentException(String.format("Interval start time must be " + "greater than 0! Failed creating new interval with parameters: serialNum=%d, " + "startIntervalDateTime=%d, coverageFactor=%s, intervalDataType=%s, source=%s, "+ "intervalClassification=%s, adeVersion=%s",serialNum,startIntervalDateTime,coverageFactor,intervalDataType,source,intervalClassification,adeVersion));  }  m_startIntervalTime=startIntervalDateTime;  m_framingFlowType=intervalDataType;  m_serialNum=serialNum;  m_intervalClassification=intervalClassification;  if (m_intervalClassification == null) {    m_intervalClassification=IntervalClassificationEnum.REGULAR;  }  m_messageSummaryMap=new TreeMap<Integer,IMessageSummary>();  m_endIntervalTime=m_startIntervalTime + m_framingFlowType.getDuration();  m_source=source;  if (coverageFactor <= 0 || coverageFactor > 1) {    throw new AdeInternalException("Interval coverage factor must be between 0 (exclusive) and 1 (inclusive), but currently is: " + coverageFactor);  }  m_coverageFactor=coverageFactor;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static Composite createComposite(Composite parent,int columns,int hspan,int fill){  Composite g=new Composite(parent,SWT.NONE);  g.setLayout(new GridLayout(columns,false));  g.setFont(parent.getFont());  GridData gd=new GridData(fill);  gd.horizontalSpan=hspan;  gd.grabExcessHorizontalSpace=true;  g.setLayoutData(gd);  return g;}  }
class C{  public int addHistogramPlot(String name,Color color,double[][] XY,double[] dX){  return ((Plot2DCanvas)plotCanvas).addHistogramPlot(name,color,XY,dX);}  }
class C{  public void imageMode(int mode){  if ((mode == CORNER) || (mode == CORNERS) || (mode == CENTER)) {    imageMode=mode;  } else {    String msg="imageMode() only works with CORNER, CORNERS, or CENTER";    throw new RuntimeException(msg);  }}  }
class C{  public static QueryExp not(QueryExp queryExp){  return new NotQueryExp(queryExp);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected static final MediaCodecInfo selectVideoCodec(final String mimeType){  if (DEBUG)   Log.v(TAG,"selectVideoCodec:");  final int numCodecs=MediaCodecList.getCodecCount();  for (int i=0; i < numCodecs; i++) {    final MediaCodecInfo codecInfo=MediaCodecList.getCodecInfoAt(i);    if (!codecInfo.isEncoder()) {      continue;    }    final String[] types=codecInfo.getSupportedTypes();    for (int j=0; j < types.length; j++) {      if (types[j].equalsIgnoreCase(mimeType)) {        if (DEBUG)         Log.i(TAG,"codec:" + codecInfo.getName() + ",MIME="+ types[j]);        final int format=selectColorFormat(codecInfo,mimeType);        if (format > 0) {          return codecInfo;        }      }    }  }  return null;}  }
class C{  static public int lerpColor(int c1,int c2,float amt,int mode){  if (mode == RGB) {    float a1=((c1 >> 24) & 0xff);    float r1=(c1 >> 16) & 0xff;    float g1=(c1 >> 8) & 0xff;    float b1=c1 & 0xff;    float a2=(c2 >> 24) & 0xff;    float r2=(c2 >> 16) & 0xff;    float g2=(c2 >> 8) & 0xff;    float b2=c2 & 0xff;    return (((int)(a1 + (a2 - a1) * amt) << 24) | ((int)(r1 + (r2 - r1) * amt) << 16) | ((int)(g1 + (g2 - g1) * amt) << 8)| ((int)(b1 + (b2 - b1) * amt)));  } else   if (mode == HSB) {    if (lerpColorHSB1 == null) {      lerpColorHSB1=new float[3];      lerpColorHSB2=new float[3];      lerpColorHSB3=new float[3];    }    float a1=(c1 >> 24) & 0xff;    float a2=(c2 >> 24) & 0xff;    int alfa=((int)(a1 + (a2 - a1) * amt)) << 24;    Color.RGBToHSV((c1 >> 16) & 0xff,(c1 >> 8) & 0xff,c1 & 0xff,lerpColorHSB1);    Color.RGBToHSV((c2 >> 16) & 0xff,(c2 >> 8) & 0xff,c2 & 0xff,lerpColorHSB2);    lerpColorHSB3[0]=PApplet.lerp(lerpColorHSB1[0],lerpColorHSB2[0],amt);    lerpColorHSB3[1]=PApplet.lerp(lerpColorHSB1[1],lerpColorHSB2[1],amt);    lerpColorHSB3[2]=PApplet.lerp(lerpColorHSB1[2],lerpColorHSB2[2],amt);    return Color.HSVToColor(alfa,lerpColorHSB3);  }  return 0;}  }
class C{  public boolean isFieldOnly(){  Object oo=get_Value(COLUMNNAME_IsFieldOnly);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public java.nio.ByteBuffer compressImageDXT3(java.awt.image.BufferedImage image,DXTCompressionAttributes attributes){  if (image == null) {    String message=Logging.getMessage("nullValue.ImageIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (!WWMath.isPowerOfTwo(image.getWidth()) || !WWMath.isPowerOfTwo(image.getHeight())) {    String message=Logging.getMessage("generic.InvalidImageSize",image.getWidth(),image.getHeight());    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (attributes == null) {    String message=Logging.getMessage("nullValue.AttributesIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  DXT3Compressor compressor=new DXT3Compressor();  return this.doCompressImage(compressor,image,attributes);}  }
class C{  public static String toString(JSONObject jo) throws JSONException {  boolean b=false;  Iterator<String> keys=jo.keys();  String string;  StringBuilder sb=new StringBuilder();  while (keys.hasNext()) {    string=keys.next();    if (!jo.isNull(string)) {      if (b) {        sb.append(';');      }      sb.append(Cookie.escape(string));      sb.append("=");      sb.append(Cookie.escape(jo.getString(string)));      b=true;    }  }  return sb.toString();}  }
class C{  public void bindBlob(int index,byte[] value){  getParameter(index).setValue(ValueBytes.get(value));}  }
class C{  protected void removeNotesFrame(){  m_NotesFrame.setVisible(false);}  }
class C{  public void saveIndexes(){  ArrayList toSave=new ArrayList();synchronized (this) {    Object[] valueTable=this.indexes.valueTable;    for (int i=0, l=valueTable.length; i < l; i++) {      Index index=(Index)valueTable[i];      if (index != null)       toSave.add(index);    }  }  boolean allSaved=true;  for (int i=0, length=toSave.size(); i < length; i++) {    Index index=(Index)toSave.get(i);    ReadWriteMonitor monitor=index.monitor;    if (monitor == null)     continue;    try {      monitor.enterRead();      if (index.hasChanged()) {        if (monitor.exitReadEnterWrite()) {          try {            saveIndex(index);          } catch (          IOException e) {            if (JobManager.VERBOSE) {              Util.verbose("-> got the following exception while saving:",System.err);              e.printStackTrace();            }            allSaved=false;          } finally {            monitor.exitWriteEnterRead();          }        } else {          allSaved=false;        }      }    }  finally {      monitor.exitRead();    }  }  if (this.participantsContainers != null && this.participantUpdated) {    writeParticipantsIndexNamesFile();    this.participantUpdated=false;  }  this.needToSave=!allSaved;}  }
class C{  @Override public String toShortString(){  return super.toShortString() + "{condition=" + getValueExpression().toShortString()+ "}";}  }
class C{  public boolean isFocused(){  return field_146213_o;}  }
class C{  protected void updateModelViewStateID(){  this.viewStateID++;}  }
class C{  public List bodyDeclarations(){  return this.bodyDeclarations;}  }
class C{  protected void succeeded(long nanos,Description description){}  }
class C{  @Override public boolean isCircle(){  return mIsCircle;}  }
class C{  public static GridCacheAttributes[] cacheAttributes(ClusterNode n){  return n.attribute(ATTR_CACHE);}  }
class C{  private boolean canImplicitlyCall(IMethodBinding candidate){  ITypeBinding[] parameters=candidate.getParameterTypes();  if (parameters.length != fTypes.length) {    return false;  }  for (int i=0; i < parameters.length; i++) {    if (!fTypes[i].canAssignTo(fTypeEnvironment.create(parameters[i]))) {      return false;    }  }  return true;}  }
class C{  @Override public void readExternal(ObjectInput in) throws IOException {  m=in.readDouble();  t=in.readDouble();}  }
class C{  public void add(XMLX509SKI xmlX509SKI){  this.constructionElement.appendChild(xmlX509SKI.getElement());  XMLUtils.addReturnToElement(this.constructionElement);}  }
class C{  private void handleRedirect(State state,HttpResponse response,int statusCode) throws StopRequest, RetryDownload {  if (Constants.LOGVV) {    Log.v(Constants.TAG,"got HTTP redirect " + statusCode);  }  if (state.mRedirectCount >= Constants.MAX_REDIRECTS) {    throw new StopRequest(DownloaderService.STATUS_TOO_MANY_REDIRECTS,"too many redirects");  }  Header header=response.getFirstHeader("Location");  if (header == null) {    return;  }  if (Constants.LOGVV) {    Log.v(Constants.TAG,"Location :" + header.getValue());  }  String newUri;  try {    newUri=new URI(mInfo.mUri).resolve(new URI(header.getValue())).toString();  } catch (  URISyntaxException ex) {    if (Constants.LOGV) {      Log.d(Constants.TAG,"Couldn't resolve redirect URI " + header.getValue() + " for "+ mInfo.mUri);    }    throw new StopRequest(DownloaderService.STATUS_HTTP_DATA_ERROR,"Couldn't resolve redirect URI");  }  ++state.mRedirectCount;  state.mRequestUri=newUri;  if (statusCode == 301 || statusCode == 303) {    state.mNewUri=newUri;  }  throw new RetryDownload();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:05.682 -0500",hash_original_method="B953FBA4B3460899EA66156C6BB3FF32",hash_generated_method="0F2C9EA9D6463014D7258E4CC5BB8B7D") private boolean attemptToExtractIdd(){  Pattern internationalPrefix=regexCache.getPatternForRegex("\\" + PhoneNumberUtil.PLUS_SIGN + "|"+ currentMetaData.getInternationalPrefix());  Matcher iddMatcher=internationalPrefix.matcher(accruedInputWithoutFormatting);  if (iddMatcher.lookingAt()) {    isInternationalFormatting=true;    int startOfCountryCallingCode=iddMatcher.end();    nationalNumber.setLength(0);    nationalNumber.append(accruedInputWithoutFormatting.substring(startOfCountryCallingCode));    prefixBeforeNationalNumber.append(accruedInputWithoutFormatting.substring(0,startOfCountryCallingCode));    if (accruedInputWithoutFormatting.charAt(0) != PhoneNumberUtil.PLUS_SIGN) {      prefixBeforeNationalNumber.append(" ");    }    return true;  }  return false;}  }
class C{  static int firstIllegalCharacter(String source){  for (int i=0; i < source.length(); i++) {    if (isLegal(source.charAt(i)) == false) {      return i;    }  }  return -1;}  }
class C{  private void insertTaskArguments(long executionId,List<String> taskArguments){  for (  String args : taskArguments) {    insertArgument(executionId,args);  }}  }
class C{  public boolean add(Object o){  ObjectConnection conn=getObjectConnection();  try {    Value value=getValue(o);    add(conn,getResource(),value);    if (value instanceof Resource) {      refreshEntity();    }  } catch (  RepositoryException e) {    throw new ObjectPersistException(e);  }  refresh();  refresh(o);  return true;}  }
class C{  public boolean isFinal(){  return false;}  }
class C{  public static String toString(JSONArray ja) throws JSONException {  int i;  JSONObject jo;  String key;  Iterator keys;  int length;  Object object;  StringBuffer sb=new StringBuffer();  String tagName;  String value;  tagName=ja.getString(0);  XML.noSpace(tagName);  tagName=XML.escape(tagName);  sb.append('<');  sb.append(tagName);  object=ja.opt(1);  if (object instanceof JSONObject) {    i=2;    jo=(JSONObject)object;    keys=jo.keys();    while (keys.hasNext()) {      key=keys.next().toString();      XML.noSpace(key);      value=jo.optString(key);      if (value != null) {        sb.append(' ');        sb.append(XML.escape(key));        sb.append('=');        sb.append('"');        sb.append(XML.escape(value));        sb.append('"');      }    }  } else {    i=1;  }  length=ja.length();  if (i >= length) {    sb.append('/');    sb.append('>');  } else {    sb.append('>');    do {      object=ja.get(i);      i+=1;      if (object != null) {        if (object instanceof String) {          sb.append(XML.escape(object.toString()));        } else         if (object instanceof JSONObject) {          sb.append(toString((JSONObject)object));        } else         if (object instanceof JSONArray) {          sb.append(toString((JSONArray)object));        }      }    } while (i < length);    sb.append('<');    sb.append('/');    sb.append(tagName);    sb.append('>');  }  return sb.toString();}  }
class C{  public static String tab(){  return tab;}  }
class C{  public String toString(){  if (soid == null) {    StringBuilder sb=new StringBuilder(4 * oid.length);    for (int i=0; i < oid.length - 1; ++i) {      sb.append(oid[i]);      sb.append('.');    }    sb.append(oid[oid.length - 1]);    soid=sb.toString();  }  return soid;}  }
class C{  @Override public void disconnect(){  try {    session.close();    cluster.close();  } catch (  DriverException ex) {    throw new RuntimeException("closing database resource",ex);  }catch (  Throwable t) {    DTThrowable.rethrow(t);  }}  }
class C{  public Builder removePhotos(){  this.photos.clear();  return this;}  }
class C{  public boolean hasStreet(){  return super.hasElement(Street.KEY);}  }
class C{  private ContentElement parseContentElement(SpanManager sm,ContentElementParsingParameters cepp,Span lineSpan){  LinkedList<Span> lineSpans=new LinkedList<Span>();  lineSpans.add(lineSpan);  return parseContentElement(sm,cepp,lineSpans,new ContentElement());}  }
class C{  public Trigger updateTrigger(BigInteger alertId,BigInteger triggerId,Trigger trigger) throws IOException {  String requestUrl=RESOURCE + "/" + alertId.toString()+ "/triggers/"+ triggerId.toString();  ArgusResponse response=getClient().executeHttpRequest(ArgusHttpClient.RequestType.PUT,requestUrl,trigger);  assertValidResponse(response,requestUrl);  return fromJson(response.getResult(),Trigger.class);}  }
class C{  public Subtract(double value){  this.value=value;}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();}  }
class C{  public Jerry find(String cssSelector){  final List<Node> result=new NodeList();  for (  Node node : nodes) {    NodeSelector nodeSelector=createNodeSelector(node);    List<Node> filteredNodes=nodeSelector.select(cssSelector);    result.addAll(filteredNodes);  }  return new Jerry(this,result);}  }
class C{  public void warning(SAXParseException spe){  if (LOG.isWarnEnabled()) {    LOG.warn("Warning: " + spe.toString() + ": "+ spe.getMessage());  }}  }
class C{  public int length(){  return n;}  }
class C{  protected synchronized void clearChanged(){  changed=false;}  }
class C{  public boolean replaceArg(InsnArg from,InsnArg to){  int count=getArgsCount();  for (int i=0; i < count; i++) {    InsnArg arg=arguments.get(i);    if (arg == from) {      setArg(i,to);      return true;    }    if (arg.isInsnWrap() && ((InsnWrapArg)arg).getWrapInsn().replaceArg(from,to)) {      return true;    }  }  return false;}  }
class C{  protected boolean shouldCheckResolveProblems(GenericDomValue value){  return true;}  }
class C{  public double toDouble(){  BigDecimal _value=this.getValue();  return _value.doubleValue();}  }
class C{  public static BigInteger nextProbablePrime(BigInteger n){  return nextProbablePrime(n,20);}  }
class C{  private void validateFinancialActivityAndAccountMapping(FinancialActivityAccount financialActivityAccount){  FINANCIAL_ACTIVITY financialActivity=FINANCIAL_ACTIVITY.fromInt(financialActivityAccount.getFinancialActivityType());  GLAccount glAccount=financialActivityAccount.getGlAccount();  if (!financialActivity.getMappedGLAccountType().getValue().equals(glAccount.getType())) {    throw new FinancialActivityAccountInvalidException(financialActivity,glAccount);  }}  }
class C{  public boolean isVerificationComplete(){  if (!mRequiredVerificationComplete) {    return false;  }  if (mSufficientVerifierUids.size() == 0) {    return true;  }  return mSufficientVerificationComplete;}  }
class C{  public BytesReference source(){  return source;}  }
class C{  public void putInt(String key,int value){  sharedPreferences.edit().putInt(key,value).commit();}  }
class C{  protected void processTuple(Map<String,Object> tuple){  long time;  if (timeKeyName != null) {    time=(Long)tuple.get(timeKeyName);  } else {    time=LogstreamUtil.extractTime(currentWindowId,windowWidth);  }  List<String> timeBucketList=getTimeBucketList(time);  if (firstTuple) {    extractType(tuple);    outTimeBuckets=new ArrayList<String>(timeBucketList);    if (!dimensionCombinationList.containsKey(recordType.get(LogstreamUtil.LOG_TYPE))) {      createAllDimensionCombinations();    }    dimensionCombinations=dimensionCombinationList.get(recordType.get(LogstreamUtil.LOG_TYPE));    valueOperationTypes=valueOperations.get(recordType.get(LogstreamUtil.LOG_TYPE));    firstTuple=false;  }  Number receivedLogType=(Number)tuple.get(LogstreamUtil.LOG_TYPE);  Number receivedFilter=(Number)tuple.get(LogstreamUtil.FILTER);  Number expectedLogType=recordType.get(LogstreamUtil.LOG_TYPE);  Number expectedFilter=recordType.get(LogstreamUtil.FILTER);  if (!receivedLogType.equals(expectedLogType) || !receivedFilter.equals(expectedFilter)) {    logger.error("Unexpected tuple");    logger.error("expected log type = {} received = {}",expectedLogType,receivedLogType);    logger.error("expected filter = {} received = {}",expectedFilter,receivedFilter);  } else {    for (    String timeBucket : timeBucketList) {      for (      Integer dimensionCombinationId : dimensionCombinations) {        String dimensionCombination=registry.lookupValue(dimensionCombinationId);        String[] dimensions=dimensionCombination.split(":");        String dimValueName=new String();        boolean isBadTuple=false;        if (dimensions != null) {          for (          String dimension : dimensions) {            Object dimVal=tuple.get(dimension);            if (dimVal == null) {              logger.error("dimension \"{}\" not found in tuple",dimension);              isBadTuple=true;              continue;            }            if (!dimValueName.isEmpty()) {              dimValueName+=",";            }            dimValueName+=tuple.get(dimension).toString();          }        }        if (!isBadTuple) {          for (          Entry<String,HashSet<AggregateOperation>> entry : valueOperationTypes.entrySet()) {            String valueKeyName=entry.getKey();            Object value=tuple.get(valueKeyName);            Number numberValue=LogstreamUtil.extractNumber(value);            doComputations(timeBucket,dimensionCombinationId,dimValueName,valueKeyName,numberValue);          }        }      }    }  }}  }
class C{  private String hexAV() throws IOException {  if (pos + 4 >= chars.length) {    throw new IOException("Invalid distinguished name string");  }  beg=pos;  pos++;  while (true) {    if (pos == chars.length || chars[pos] == '+' || chars[pos] == ',' || chars[pos] == ';') {      end=pos;      break;    }    if (chars[pos] == ' ') {      end=pos;      pos++;      for (; pos < chars.length && chars[pos] == ' '; pos++) {      }      break;    } else     if (chars[pos] >= 'A' && chars[pos] <= 'F') {      chars[pos]+=32;    }    pos++;  }  int hexLen=end - beg;  if (hexLen < 5 || (hexLen & 1) == 0) {    throw new IOException("Invalid distinguished name string");  }  encoded=new byte[hexLen / 2];  for (int i=0, p=beg + 1; i < encoded.length; p+=2, i++) {    encoded[i]=(byte)getByte(p);  }  return new String(chars,beg,hexLen);}  }
class C{  public void testCreatingLauncherWithJetty1(){  SwtBotProjectCreation.createMavenGwtProjectIsCreated1(bot,PROJECT_NAME,PACKAGE_NAME);  SwtBotProjectDebug.launchGWTDevModeWithJettyThenTerminateIt(bot,PROJECT_NAME);  String persistedArgs=SwtBotProjectDebug.getTheProgramArgsTextBox(bot);  assertTrue(persistedArgs.contains("com.example.project.Project"));}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void bind() throws Exception {  if (_isBind.getAndSet(true)) {    return;  }  if (_protocol == null) {    throw new IllegalStateException(L.l("'{0}' must have a configured protocol before starting.",this));  }  if (_port < 0 && _unixPath == null) {    return;  }  SocketSystem system=SocketSystem.current();  if (_throttle == null) {    _throttle=new ThrottleSocket();  }  String ssl=_sslFactory != null ? "s" : "";  if (_serverSocket != null) {    InetAddress address=_serverSocket.getLocalAddress();    if (address != null)     log.info("listening to " + address.getHostName() + ":"+ _serverSocket.getLocalPort()); else     log.info("listening to *:" + _serverSocket.getLocalPort());  } else   if (_socketAddress != null) {    _serverSocket=system.openServerSocket(_socketAddress,_port,_acceptListenBacklog,_isEnableJni);    log.info(_protocol.name() + ssl + " listening to "+ _socketAddress.getHostName()+ ":"+ _serverSocket.getLocalPort());  } else {    _serverSocket=system.openServerSocket(null,_port,_acceptListenBacklog,_isEnableJni);    log.info(_protocol.name() + ssl + " listening to *:"+ _serverSocket.getLocalPort());  }  assert (_serverSocket != null);  postBind();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:23.459 -0500",hash_original_method="23592451CB50AFA841274AC3732C91A0",hash_generated_method="CBC4E30F7778F15DECD755991AE421F6") public E valueAt(int index){  if (mGarbage) {    gc();  }  return (E)mValues[index];}  }
class C{  void removeLast(boolean trimToSize){  int i=records.size() - 1;  UndoLogRecord r=records.remove(i);  if (!r.isStored()) {    memoryUndo--;  }  if (trimToSize && i > 1024 && (i & 1023) == 0) {    records.trimToSize();  }}  }
class C{  @Override public void focusLost(FocusEvent e){  spinner.repaint();}  }
class C{  protected ValueDecoder(Repository repository,ValueFactory factory){  this.repository=repository;  this.factory=factory;}  }
class C{  public static boolean stateContainsVertex(StreetRouter.State state,int vertex){  while (state != null) {    if (state.vertex == vertex)     return true;    state=state.backState;  }  return false;}  }
class C{  public CollectionObject(boolean deleted){  this.deleted=deleted;}  }
class C{  @HLEFunction(nid=0xC21645A4,version=150) public int sceUsbGetState(){  if (log.isDebugEnabled()) {    log.debug(String.format("sceUsbGetState returning 0x%X",getUsbState()));  }  return getUsbState();}  }
class C{  protected void emit_ExportClause_CommaKeyword_1_2_q(EObject semanticObject,ISynNavigable transition,List<INode> nodes){  acceptNodes(transition,nodes);}  }
class C{  public String dwca(){  if (resource == null) {    return NOT_FOUND;  }  try {    long since=req.getDateHeader("If-Modified-Since");    if (since > 0 && resource.getLastPublished() != null) {      long last=resource.getLastPublished().getTime();      if (last < since) {        return NOT_MODIFIED;      }    }  } catch (  IllegalArgumentException e) {    LOG.warn("Conditional get with If-Modified-Since header couldnt be interpreted",e);  }  if (version == null) {    BigDecimal latestVersion=resource.getLastPublishedVersionsVersion();    if (latestVersion == null) {      return NOT_FOUND;    } else {      version=latestVersion;    }  }  data=dataDir.resourceDwcaFile(resource.getShortname(),version);  StringBuilder sb=new StringBuilder();  sb.append("dwca-" + resource.getShortname());  if (version != null) {    sb.append("-v" + version.toPlainString());  }  sb.append(".zip");  filename=sb.toString();  mimeType="application/zip";  return execute();}  }
class C{  public static boolean isValidQName(String str){  final int colon=str.indexOf(':');  if (colon == 0 || colon == str.length() - 1) {    return false;  }  if (colon > 0) {    final String prefix=str.substring(0,colon);    final String localPart=str.substring(colon + 1);    return isValidNCName(prefix) && isValidNCName(localPart);  } else {    return isValidNCName(str);  }}  }
class C{  public KafkaEmbedded(Properties config) throws IOException {  tmpFolder=new TemporaryFolder();  tmpFolder.create();  logDir=tmpFolder.newFolder();  effectiveConfig=effectiveConfigFrom(config);  boolean loggingEnabled=true;  KafkaConfig kafkaConfig=new KafkaConfig(effectiveConfig,loggingEnabled);  log.debug("Starting embedded Kafka broker (with log.dirs={} and ZK ensemble at {}) ...",logDir,zookeeperConnect());  kafka=TestUtils.createServer(kafkaConfig,SystemTime$.MODULE$);  log.debug("Startup of embedded Kafka broker at {} completed (with ZK ensemble at {}) ...",brokerList(),zookeeperConnect());}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Seeker.getInstance().getScheduledAiringsForSource(getString(stack));}  }
class C{  public boolean verify(byte[] opening) throws NoSuchAlgorithmException {  byte[] c=Digest.digest(serialize(opening));  return Arrays.equals(c,this.value);}  }
class C{  private SortingNode(@Nullable T value,@Nullable SortingNode<T> parent,Stream<UnaryOperator<SortingNode<T>>> childrenFactory){  this.value=value;  this.parent=parent;  this.children=childrenFactory.map(null).collect(MoreCollectors.toImmutableList());}  }
class C{  @ObjectiveCName("tryError:") public void tryError(@NotNull Exception e){  promise.tryError(e);}  }
class C{  public static String encodeURIString(String s){  s=StringUtil.gsub("\\","\\\\",s);  s=StringUtil.gsub(">","\\>",s);  return s;}  }
class C{  public static final String timeStamp(Date date,TimeZone zone){  if (zone == null) {    zone=TimeZone.getDefault();  }  FORMAT.setTimeZone(zone);  return FORMAT.format(date);}  }
class C{  public void registerShareKey(String key){  shareKeyManager.register(key);}  }
class C{  public DataTypeMappingModel createDataTypeMappingModel(){  DataTypeMappingModelImpl dataTypeMappingModel=new DataTypeMappingModelImpl();  return dataTypeMappingModel;}  }
class C{  public boolean match(Map map,String data,int[] expr){  if (map == null) {    throw new NullPointerException("No map provided");  }  if (data == null) {    throw new NullPointerException("No data provided");  }  if (expr == null) {    throw new NullPointerException("No pattern expression provided");  }  char buff[]=data.toCharArray();  char rslt[]=new char[expr.length + buff.length];  int charpos=0;  int exprpos=0;  int buffpos=0;  int rsltpos=0;  int offset;  int mcount=0;  map.put(Integer.toString(mcount),data);  boolean matchBegin=false;  if (expr[charpos] == MATCH_BEGIN) {    matchBegin=true;    exprpos=++charpos;  }  while (expr[charpos] >= 0) {    charpos++;  }  int exprchr=expr[charpos];  while (true) {    if (matchBegin) {      if (!matchArray(expr,exprpos,charpos,buff,buffpos)) {        return (false);      }      matchBegin=false;    } else {      offset=indexOfArray(expr,exprpos,charpos,buff,buffpos);      if (offset < 0) {        return (false);      }    }    buffpos+=(charpos - exprpos);    if (exprchr == MATCH_END) {      if (rsltpos > 0) {        map.put(Integer.toString(++mcount),new String(rslt,0,rsltpos));      }      return (true);    } else     if (exprchr == MATCH_THEEND) {      if (rsltpos > 0) {        map.put(Integer.toString(++mcount),new String(rslt,0,rsltpos));      }      return (buffpos == buff.length);    }    exprpos=++charpos;    while (expr[charpos] >= 0) {      charpos++;    }    int prevchr=exprchr;    exprchr=expr[charpos];    offset=(prevchr == MATCH_FILE) ? indexOfArray(expr,exprpos,charpos,buff,buffpos) : lastIndexOfArray(expr,exprpos,charpos,buff,buffpos);    if (offset < 0) {      return (false);    }    if (prevchr == MATCH_PATH) {      while (buffpos < offset) {        rslt[rsltpos++]=buff[buffpos++];      }    } else {      while (buffpos < offset) {        if (buff[buffpos] == '/') {          return (false);        }        rslt[rsltpos++]=buff[buffpos++];      }    }    map.put(Integer.toString(++mcount),new String(rslt,0,rsltpos));    rsltpos=0;  }}  }
class C{  final void addValue(String value){  ((NominalAttributeInfo)m_AttributeInfo).m_Values=Utils.cast(((NominalAttributeInfo)m_AttributeInfo).m_Values.clone());  ((NominalAttributeInfo)m_AttributeInfo).m_Hashtable=Utils.cast(((NominalAttributeInfo)m_AttributeInfo).m_Hashtable.clone());  forceAddValue(value);}  }
class C{  public byte[] canonicalizeXPathNodeSet(NodeList xpathNodeSet,String inclusiveNamespaces) throws CanonicalizationException {  return canonicalizerSpi.engineCanonicalizeXPathNodeSet(xpathNodeSet,inclusiveNamespaces);}  }
class C{  @Override public void reconnectFailedConnection(SearchFilter searchFilter) throws QueryException {  if (!searchFilter.isInitialConnection() && (isExplicitClosed() || (searchFilter.isFineIfFoundOnlyMaster() && !isMasterHostFail()) || searchFilter.isFineIfFoundOnlySlave() && !isSecondaryHostFail())) {    return;  }  if (!searchFilter.isFailoverLoop()) {    try {      checkWaitingConnection();      if ((searchFilter.isFineIfFoundOnlyMaster() && !isMasterHostFail()) || searchFilter.isFineIfFoundOnlySlave() && !isSecondaryHostFail()) {        return;      }    } catch (    ReconnectDuringTransactionException e) {      return;    }  }  currentConnectionAttempts.incrementAndGet();  resetOldsBlackListHosts();  List<HostAddress> loopAddress=new LinkedList<>(urlParser.getHostAddresses());  loopAddress.removeAll(getBlacklistKeys());  Collections.shuffle(loopAddress);  List<HostAddress> blacklistShuffle=new LinkedList<>(getBlacklistKeys());  Collections.shuffle(blacklistShuffle);  loopAddress.addAll(blacklistShuffle);  if (masterProtocol != null && !isMasterHostFail()) {    loopAddress.remove(masterProtocol.getHostAddress());    loopAddress.add(masterProtocol.getHostAddress());  }  if (!isSecondaryHostFail()) {    if (secondaryProtocol != null) {      loopAddress.remove(secondaryProtocol.getHostAddress());      loopAddress.add(secondaryProtocol.getHostAddress());    }  }  if (urlParser.getHostAddresses().size() <= 1) {    searchFilter=new SearchFilter(true,false);  }  if ((isMasterHostFail() || isSecondaryHostFail()) || searchFilter.isInitialConnection()) {    do {      AuroraProtocol.loop(this,loopAddress,searchFilter);      if (!searchFilter.isFailoverLoop()) {        try {          checkWaitingConnection();        } catch (        ReconnectDuringTransactionException e) {        }      }    } while (searchFilter.isInitialConnection() && masterProtocol == null);  }  if (getCurrentProtocol() != null && !getCurrentProtocol().isClosed()) {    retrieveAllEndpointsAndSet(getCurrentProtocol());  }}  }
class C{  protected void loadChars(AbstractMRReply msg,DataInputStream istream) throws java.io.IOException {  byte char1=readByteProtected(istream);  if (logDebug) {    log.debug("loadChars: " + char1);  }  if ((char1 & 0xFF) == Constants.HEAD_STX) {    msg.setElement(0,char1);    byte char2=readByteProtected(istream);    if ((char2 & 0xFF) == Constants.FUNCTION_REQ_STD) {      msg.setElement(1,char2);      byte addr1=readByteProtected(istream);      msg.setElement(2,addr1);      byte addr2=readByteProtected(istream);      msg.setElement(3,addr2);      byte addr3=readByteProtected(istream);      msg.setElement(4,addr3);      byte flag1=readByteProtected(istream);      msg.setElement(5,flag1);      int bufsize=2 + 1;      if ((flag1 & Constants.FLAG_BIT_STDEXT) != 0x00) {        bufsize=14 + 1;      }      for (int i=6; i < (5 + bufsize); i++) {        byte byt=readByteProtected(istream);        msg.setElement(i,byt);      }    } else     if ((char2 & 0xFF) == Constants.FUNCTION_REQ_X10) {      msg.setElement(1,char2);      byte addrx1=readByteProtected(istream);      msg.setElement(2,addrx1);      byte cmd1=readByteProtected(istream);      msg.setElement(3,cmd1);      byte ack1=readByteProtected(istream);      msg.setElement(4,ack1);    } else     if ((char2 & 0xFF) == Constants.POLL_REQ_STD) {      msg.setElement(1,char2);      for (int i=2; i < (2 + 9); i++) {        byte byt=readByteProtected(istream);        msg.setElement(2,byt);      }    } else     if ((char2 & 0xFF) == Constants.POLL_REQ_EXT) {      msg.setElement(1,char2);      for (int i=2; i < (2 + 23); i++) {        byte byt=readByteProtected(istream);        msg.setElement(2,byt);      }    } else     if ((char2 & 0xFF) == Constants.POLL_REQ_X10) {      msg.setElement(1,char2);      byte rawX10data=readByteProtected(istream);      msg.setElement(2,rawX10data);      int x10Flag=readByteProtected(istream);      msg.setElement(3,x10Flag);      if ((x10Flag & 0xFF) == Constants.FLAG_X10_RECV_CMD) {        if (logDebug) {          log.debug("loadChars: X10 Command Poll Received " + X10Sequence.houseValueToText((rawX10data & 0xF0) >> 4) + " "+ X10Sequence.functionName((rawX10data & 0x0F)));        }      } else {        if (logDebug) {          log.debug("loadChars: X10 Unit Poll Received " + X10Sequence.houseValueToText((rawX10data & 0xF0) >> 4) + " "+ X10Sequence.formatCommandByte(rawX10data));        }      }    } else     if ((char2 & 0xFF) == Constants.POLL_REQ_BUTTON) {      msg.setElement(1,char2);      byte dat=readByteProtected(istream);      msg.setElement(2,dat);    } else     if ((char2 & 0xFF) == Constants.POLL_REQ_BUTTON_RESET) {      msg.setElement(1,char2);    } else {      msg.setElement(1,char2);      if (logDebug) {        log.debug("loadChars: Unknown cmd byte " + char2);      }    }  }}  }
class C{  public GsonBuilder disableInnerClassSerialization(){  excluder=excluder.disableInnerClassSerialization();  return this;}  }
class C{  public int nextInt(int max){  return org.evosuite.runtime.Random.nextInt(max);}  }
class C{  public static boolean logFileZipped(String file){  return file.endsWith(".bz2") || file.endsWith(".gz") || file.endsWith(".xz");}  }
class C{  public final boolean isNative(){  return Modifier.isNative(getModifiers());}  }
class C{  public void replaceBoxWith(int column,int row,int width,int height,BitMatrix source,int sourceColumn,int sourceRow){  this.containsBox(column,row,width,height);  source.containsBox(sourceColumn,sourceRow,width,height);  if (width <= 0 || height <= 0)   return;  if (source == this) {    Rectangle destRect=new Rectangle(column,row,width,height);    Rectangle sourceRect=new Rectangle(sourceColumn,sourceRow,width,height);    if (destRect.intersects(sourceRect)) {      source=source.copy();    }  }  BitVector sourceVector=source.toBitVector();  BitVector destVector=this.toBitVector();  int sourceColumns=source.columns();  for (; --height >= 0; row++, sourceRow++) {    int offset=row * columns + column;    int sourceOffset=sourceRow * sourceColumns + sourceColumn;    destVector.replaceFromToWith(offset,offset + width - 1,sourceVector,sourceOffset);  }}  }
class C{  public static String parseBssid(byte[] bssidBytes){  StringBuilder sb=new StringBuilder();  int k;  String hexK;  String str;  for (int i=0; i < bssidBytes.length; i++) {    k=0xff & bssidBytes[i];    hexK=Integer.toHexString(k);    str=((k < 16) ? ("0" + hexK) : (hexK));    System.out.println(str);    sb.append(str);  }  return sb.toString();}  }
class C{  public void addListener(final PropertyChangeListener listener){  pcs.addPropertyChangeListener(listener);}  }
class C{  public void clearMenuPresenters(){  if (menu != null) {    menu.removeMenuPresenter(iconMenuPresenter);    menu.removeMenuPresenter(listMenuPresenter);  }  iconMenuPresenter=null;  listMenuPresenter=null;}  }
class C{  public JSONObject put(String key,Map<?,?> value) throws JSONException {  this.put(key,new JSONObject(value));  return this;}  }
class C{  boolean put(FacetLabel name,Integer val){  cache.put(key(name),val);  return isCacheFull();}  }
class C{  public static void LaunchEndlessJabber(Context ctx){  Intent intent=ctx.getPackageManager().getLaunchIntentForPackage("com.mariussoft.endlessjabber");  intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  ctx.startActivity(intent);}  }
class C{  @Override public boolean supportsMultipleTransactions(){  debugCodeCall("supportsMultipleTransactions");  return true;}  }
class C{  protected java.util.List<AbstractMenuItemDefinition> loadDefinitions(){  java.util.List<AbstractMenuItemDefinition> result;  java.util.List<String> classnames;  result=new ArrayList<>();  classnames=AbstractMenuItemDefinition.getDefinitions();  for (  String classname : classnames) {    try {      AbstractMenuItemDefinition definition=(AbstractMenuItemDefinition)Class.forName(classname).newInstance();      result.add(definition);    } catch (    Exception e) {      System.err.println("Failed to instantiate menu definition: " + classname);      e.printStackTrace();    }  }  Collections.sort(result);  return result;}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public String retrieveURL(){  return m_URL;}  }
class C{  @Override public Vertex parseGoto(TextStream stream,Map<String,Map<String,Vertex>> elements,boolean debug,Network network){  stream.nextWord();  Vertex expression=network.createInstance(Primitive.GOTO);  stream.skipWhitespace();  boolean gotoFinally=stream.peekWord().toLowerCase().equals(FINALLY);  if (gotoFinally) {    stream.nextWord();    expression.addRelationship(Primitive.FINALLY,Primitive.FINALLY);  }  Vertex value=parseElementName(Primitive.STATE,stream,elements,debug,network);  expression.addRelationship(Primitive.GOTO,value);  if (stream.peek() != ';') {    if (stream.peekWord().toLowerCase().equals(WITH)) {      stream.skipWord();      stream.skipWhitespace();      if (stream.peek() == '(') {        stream.skip();        stream.skipWhitespace();        Vertex argument=parseElement(stream,elements,debug,network);        expression.addRelationship(Primitive.ARGUMENT,argument,Integer.MAX_VALUE);        stream.skipWhitespace();        while (stream.peek() == ',') {          stream.skip();          stream.skipWhitespace();          argument=parseElement(stream,elements,debug,network);          expression.addRelationship(Primitive.ARGUMENT,argument,Integer.MAX_VALUE);        }        ensureNext(')',stream);      } else {        Vertex argument=parseElement(stream,elements,debug,network);        expression.addRelationship(Primitive.ARGUMENT,argument,Integer.MAX_VALUE);      }    }  }  return expression;}  }
class C{  private void onGlobalHotkey(Object hotkeyId){  Hotkey hotkey=(Hotkey)hotkeyId;  HotkeyAction action=actions.get(hotkey.actionId);  if (enabled && action != null && hotkey.shouldExecuteAction()) {    action.action.actionPerformed(new ActionEvent(action,0,hotkey.custom));  }}  }
class C{  public List<String> concernPackages(){  return null;}  }
class C{  public static void disposeCursors(){  for (  Cursor cursor : m_idToCursorMap.values()) {    cursor.dispose();  }  m_idToCursorMap.clear();}  }
class C{  @Override protected void register(ConfigurationCapabilityFactory configurationCapabilityFactory){  configurationCapabilityFactory.registerConfigurationCapability("jboss3x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,JBossStandaloneLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("jboss3x",ContainerType.INSTALLED,ConfigurationType.EXISTING,JBossExistingLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("jboss4x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,JBossStandaloneLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("jboss4x",ContainerType.INSTALLED,ConfigurationType.EXISTING,JBossExistingLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("jboss4x",ContainerType.REMOTE,ConfigurationType.RUNTIME,JBoss4xRuntimeConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("jboss42x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,JBossStandaloneLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("jboss42x",ContainerType.INSTALLED,ConfigurationType.EXISTING,JBossExistingLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("jboss42x",ContainerType.REMOTE,ConfigurationType.RUNTIME,JBoss4xRuntimeConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("jboss5x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,JBossStandaloneLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("jboss5x",ContainerType.INSTALLED,ConfigurationType.EXISTING,JBossExistingLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("jboss5x",ContainerType.REMOTE,ConfigurationType.RUNTIME,JBoss5xRuntimeConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("jboss51x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,JBossStandaloneLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("jboss51x",ContainerType.INSTALLED,ConfigurationType.EXISTING,JBossExistingLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("jboss51x",ContainerType.REMOTE,ConfigurationType.RUNTIME,JBoss5xRuntimeConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("jboss6x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,JBoss6xStandaloneLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("jboss6x",ContainerType.INSTALLED,ConfigurationType.EXISTING,JBossExistingLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("jboss6x",ContainerType.REMOTE,ConfigurationType.RUNTIME,JBoss5xRuntimeConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("jboss61x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,JBoss6xStandaloneLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("jboss61x",ContainerType.INSTALLED,ConfigurationType.EXISTING,JBossExistingLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("jboss61x",ContainerType.REMOTE,ConfigurationType.RUNTIME,JBoss5xRuntimeConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("jboss7x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,JBoss7xStandaloneLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("jboss7x",ContainerType.INSTALLED,ConfigurationType.EXISTING,JBoss7xExistingLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("jboss7x",ContainerType.REMOTE,ConfigurationType.RUNTIME,JBoss7xRuntimeConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("jboss71x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,JBoss71xStandaloneLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("jboss71x",ContainerType.INSTALLED,ConfigurationType.EXISTING,JBoss71xExistingLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("jboss71x",ContainerType.REMOTE,ConfigurationType.RUNTIME,JBoss7xRuntimeConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("jboss72x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,JBoss72xStandaloneLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("jboss72x",ContainerType.INSTALLED,ConfigurationType.EXISTING,JBoss71xExistingLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("jboss72x",ContainerType.REMOTE,ConfigurationType.RUNTIME,JBoss7xRuntimeConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("jboss73x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,JBoss73xStandaloneLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("jboss73x",ContainerType.INSTALLED,ConfigurationType.EXISTING,JBoss71xExistingLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("jboss73x",ContainerType.REMOTE,ConfigurationType.RUNTIME,JBoss7xRuntimeConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("jboss74x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,JBoss73xStandaloneLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("jboss74x",ContainerType.INSTALLED,ConfigurationType.EXISTING,JBoss71xExistingLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("jboss74x",ContainerType.REMOTE,ConfigurationType.RUNTIME,JBoss7xRuntimeConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("jboss75x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,JBoss75xStandaloneLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("jboss75x",ContainerType.INSTALLED,ConfigurationType.EXISTING,JBoss71xExistingLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("jboss75x",ContainerType.REMOTE,ConfigurationType.RUNTIME,JBoss7xRuntimeConfigurationCapability.class);}  }
class C{  public Matrix4 rotateRad(Vector3 axis,float radians){  if (radians == 0)   return this;  quat.setFromAxisRad(axis,radians);  return rotate(quat);}  }
class C{  public void addLayoutComponent(String s,Component c){  if (s.equals(VIEWPORT)) {    viewport=(JViewport)addSingletonComponent(viewport,c);  } else   if (s.equals(VERTICAL_SCROLLBAR)) {    vsb=(JScrollBar)addSingletonComponent(vsb,c);  } else   if (s.equals(HORIZONTAL_SCROLLBAR)) {    hsb=(JScrollBar)addSingletonComponent(hsb,c);  } else   if (s.equals(ROW_HEADER)) {    rowHead=(JViewport)addSingletonComponent(rowHead,c);  } else   if (s.equals(COLUMN_HEADER)) {    colHead=(JViewport)addSingletonComponent(colHead,c);  } else   if (s.equals(LOWER_LEFT_CORNER)) {    lowerLeft=addSingletonComponent(lowerLeft,c);  } else   if (s.equals(LOWER_RIGHT_CORNER)) {    lowerRight=addSingletonComponent(lowerRight,c);  } else   if (s.equals(UPPER_LEFT_CORNER)) {    upperLeft=addSingletonComponent(upperLeft,c);  } else   if (s.equals(UPPER_RIGHT_CORNER)) {    upperRight=addSingletonComponent(upperRight,c);  } else {    throw new IllegalArgumentException("invalid layout key " + s);  }}  }
class C{  public static void copyRange(final File source,final OutputStream dest,final int start) throws IOException {  InputStream fis=null;  try {    fis=new FileInputStream(source);    final long skipped=fis.skip(start);    if (skipped != start) {      throw new IllegalStateException("Unable to skip '" + start + "' bytes. Only '"+ skipped+ "' bytes skipped.");    }    copy(fis,dest,-1);  }  finally {    if (fis != null) {      try {        fis.close();      } catch (      final Exception e) {      }    }  }}  }
class C{  @Override public String toString(){  return new StringBuilder().append(this.getClass().getName()).append("(compositeType=").append(compositeType.toString()).append(",contents=").append(contentString()).append(")").toString();}  }
class C{  public double distanceSquared(double x,double y){  double dx=this.x - x;  double dy=this.y - y;  return dx * dx + dy * dy;}  }
class C{  private void clearNotifications(){  updateNotificationsNodeLabel(currentNode,Messages.NOTIFICATIONS);}  }
class C{  public boolean newrow(String rowdata[]){  if (rowdata != null) {    if (maxrows > 0 && nrows >= maxrows) {      atmaxrows=true;      return true;    }    rows.addElement(rowdata);    nrows++;  }  return false;}  }
class C{  @Override public void readFields(DataInput in) throws IOException {  this.key.readFields(in);  this.value.readFields(in);}  }
class C{  public void compile(SourceCode sourceCode){  this.compiler.compile(sourceCode);}  }
class C{  public Object createOn(String cqName,Connection conn,String queryStr,int cqState,boolean isDurable,byte regionDataPolicy){  return CreateCQOp.executeOn(this.pool,conn,cqName,queryStr,cqState,isDurable,regionDataPolicy);}  }
class C{  @Override public boolean isUnsecurable(){  return true;}  }
class C{  public static boolean isXML11NCNameStart(int c){  return (c < 0x10000 && (XML11CHARS[c] & MASK_XML11_NCNAME_START) != 0) || (0x10000 <= c && c < 0xF0000);}  }
class C{  @Override public int hashCode(){  return paymentTypeId == null ? 0 : paymentTypeId.hashCode();}  }
class C{  public FastBufferedReader(final Reader r,final int bufferSize,final CharSet wordConstituents){  this(bufferSize,wordConstituents);  this.reader=r;}  }
class C{  @Override protected void doPost(HttpServletRequest request,HttpServletResponse response){  processGetRequest(request,response);}  }
class C{  static double calculateDepartureTime(Activity act,double now,PlansConfigGroup.ActivityDurationInterpretation activityDurationInterpretation){  if (act.getMaximumDuration() == Time.UNDEFINED_TIME && (act.getEndTime() == Time.UNDEFINED_TIME)) {    return Double.POSITIVE_INFINITY;  } else {    double departure=0;    if (activityDurationInterpretation.equals(PlansConfigGroup.ActivityDurationInterpretation.minOfDurationAndEndTime)) {      if (act.getMaximumDuration() == Time.UNDEFINED_TIME) {        departure=act.getEndTime();      } else       if (act.getEndTime() == Time.UNDEFINED_TIME) {        departure=now + act.getMaximumDuration();      } else {        departure=Math.min(act.getEndTime(),now + act.getMaximumDuration());      }    } else     if (activityDurationInterpretation.equals(PlansConfigGroup.ActivityDurationInterpretation.endTimeOnly)) {      if (act.getEndTime() != Time.UNDEFINED_TIME) {        departure=act.getEndTime();      } else {        throw new IllegalStateException("activity end time not set and using something else not allowed.");      }    } else     if (activityDurationInterpretation.equals(PlansConfigGroup.ActivityDurationInterpretation.tryEndTimeThenDuration)) {      if (act.getEndTime() != Time.UNDEFINED_TIME) {        departure=act.getEndTime();      } else       if (act.getMaximumDuration() != Time.UNDEFINED_TIME) {        departure=now + act.getMaximumDuration();      } else {        throw new IllegalStateException("neither activity end time nor activity duration defined; don't know what to do.");      }    } else {      throw new IllegalStateException("should not happen");    }    if (departure < now) {      departure=now;    }    return departure;  }}  }
class C{  public double[] valueAndDerivative(double x){  int n=coefficients.length;  double[] answer=new double[2];  answer[0]=coefficients[--n];  answer[1]=0;  while (n > 0) {    answer[1]=answer[1] * x + answer[0];    answer[0]=answer[0] * x + coefficients[--n];  }  return answer;}  }
class C{  @Override protected void internalClear(){}  }
class C{  public int nextUnsetBit(final int i){  int x=i / 64;  if (x >= this.data.length)   return -1;  long w=~this.data[x];  w>>>=(i % 64);  if (w != 0) {    return i + Long.numberOfTrailingZeros(w);  }  ++x;  for (; x < this.data.length; ++x) {    if (this.data[x] != ~0) {      return x * 64 + Long.numberOfTrailingZeros(~this.data[x]);    }  }  return -1;}  }
class C{  public SpeechletException(final String message){  super(message);}  }
class C{  protected void parseSession(HtmlPage page){  String value=page.getWebResponse().getResponseHeaderValue("Set-Cookie");  if (value == null) {    return;  }  int equals=value.indexOf("JSESSIONID=");  if (equals < 0) {    return;  }  value=value.substring(equals + "JSESSIONID=".length());  int semi=value.indexOf(";");  if (semi >= 0) {    value=value.substring(0,semi);  }  sessionId=value;}  }
class C{  boolean verify(byte[] data,int offset,ServerMessageBlock response){  update(macSigningKey,0,macSigningKey.length);  int index=offset;  update(data,index,ServerMessageBlock.SIGNATURE_OFFSET);  index+=ServerMessageBlock.SIGNATURE_OFFSET;  byte[] sequence=new byte[8];  ServerMessageBlock.writeInt4(response.signSeq,sequence,0);  update(sequence,0,sequence.length);  index+=8;  if (response.command == ServerMessageBlock.SMB_COM_READ_ANDX) {    SmbComReadAndXResponse raxr=(SmbComReadAndXResponse)response;    int length=response.length - raxr.dataLength;    update(data,index,length - ServerMessageBlock.SIGNATURE_OFFSET - 8);    update(raxr.b,raxr.off,raxr.dataLength);  } else {    update(data,index,response.length - ServerMessageBlock.SIGNATURE_OFFSET - 8);  }  byte[] signature=digest();  for (int i=0; i < 8; i++) {    if (signature[i] != data[offset + ServerMessageBlock.SIGNATURE_OFFSET + i]) {      if (log.level >= 2) {        log.println("signature verification failure");        Hexdump.hexdump(log,signature,0,8);        Hexdump.hexdump(log,data,offset + ServerMessageBlock.SIGNATURE_OFFSET,8);      }      return response.verifyFailed=true;    }  }  return response.verifyFailed=false;}  }
class C{  public PISAAlgorithm(String name,Problem problem,Variation variation,Properties properties) throws IOException {  super(problem);  this.variation=variation;  TypedProperties typedProperties=new TypedProperties(properties);  String command=Settings.getPISACommand(name);  String configuration=Settings.getPISAConfiguration(name);  int pollRate=Settings.getPISAPollRate();  if (command == null) {    throw new IllegalArgumentException("missing command");  }  filePrefix=File.createTempFile("pisa","").getCanonicalPath();  if (!properties.containsKey("seed")) {    properties.setProperty("seed",Integer.toString(PRNG.nextInt()));  }  if (configuration == null) {    PrintWriter writer=null;    configuration=new File(filePrefix + "par").getCanonicalPath();    try {      writer=new PrintWriter(new BufferedWriter(new FileWriter(configuration)));      for (      String parameter : Settings.getPISAParameters(name)) {        writer.print(parameter);        writer.print(' ');        writer.println(typedProperties.getString(parameter,Settings.getPISAParameterDefaultValue(name,parameter)));      }    }  finally {      if (writer != null) {        writer.close();      }    }  }  selector=new ProcessBuilder(ArrayUtils.addAll(Settings.parseCommand(command),configuration,filePrefix,Double.toString(pollRate / (double)1000)));  int populationSize=(int)typedProperties.getDouble("populationSize",100);  while (populationSize % variation.getArity() != 0) {    populationSize++;  }  alpha=populationSize;  mu=(int)typedProperties.getDouble("mu",alpha);  lambda=(int)typedProperties.getDouble("lambda",alpha);  state=new State(new File(filePrefix + "sta"));  solutions=new HashMap<Integer,Solution>();}  }
class C{  protected void checkFile(@Nullable IgfsImpl igfs,IgfsSecondaryFileSystemTestAdapter igfsSecondary,IgfsPath file,@Nullable byte[]... chunks) throws Exception {  if (igfs != null) {    checkExist(igfs,file);    checkFileContent(igfs,file,chunks);  }  if (dual) {    checkExist(igfsSecondary,file);    checkFileContent(igfsSecondary,file.toString(),chunks);  }}  }
class C{  protected void paint(SynthContext context,Graphics g){  JSeparator separator=(JSeparator)context.getComponent();  context.getPainter().paintSeparatorForeground(context,g,0,0,separator.getWidth(),separator.getHeight(),separator.getOrientation());}  }
class C{  public static boolean simpleMatch(String[] patterns,String str){  if (patterns != null) {    for (    String pattern : patterns) {      if (simpleMatch(pattern,str)) {        return true;      }    }  }  return false;}  }
class C{  public static RequestedTransportAttribute createRequestedTransportAttribute(byte protocol){  RequestedTransportAttribute attribute=new RequestedTransportAttribute();  attribute.setRequestedTransport(protocol);  return attribute;}  }
class C{  public ToStringBuilder append(byte value){  style.append(buffer,null,value);  return this;}  }
class C{  @RequestProcessing(value="/admin/article/{articleId}",method=HTTPRequestMethod.POST) @Before(adviceClass={StopwatchStartAdvice.class,AdminCheck.class}) @After(adviceClass=StopwatchEndAdvice.class) public void updateArticle(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response,final String articleId) throws Exception {  final AbstractFreeMarkerRenderer renderer=new SkinRenderer();  context.setRenderer(renderer);  renderer.setTemplateName("admin/article.ftl");  final Map<String,Object> dataModel=renderer.getDataModel();  JSONObject article=articleQueryService.getArticle(articleId);  final Enumeration<String> parameterNames=request.getParameterNames();  while (parameterNames.hasMoreElements()) {    final String name=parameterNames.nextElement();    final String value=request.getParameter(name);    article.put(name,value);  }  final String articleTags=articleMgmtService.formatArticleTags(article.optString(Article.ARTICLE_TAGS));  article.put(Article.ARTICLE_TAGS,articleTags);  articleMgmtService.updateArticle(articleId,article);  article=articleQueryService.getArticle(articleId);  dataModel.put(Article.ARTICLE,article);  filler.fillHeaderAndFooter(request,response,dataModel);}  }
class C{  protected int[] toDocIDs(DocList docs){  int[] docIDs=new int[docs.size()];  DocIterator iterator=docs.iterator();  for (int i=0; i < docIDs.length; i++) {    if (!iterator.hasNext()) {      throw new AssertionError();    }    docIDs[i]=iterator.nextDoc();  }  if (iterator.hasNext()) {    throw new AssertionError();  }  return docIDs;}  }
class C{  SearchRow readRow(long key){  return tableData.getRow(null,key);}  }
class C{  private Intent makeGalleryIntent(String pathToImageFile){  return UriUtils.buildFileProviderReadUriIntent(this,Uri.fromFile(new File(pathToImageFile)),Intent.ACTION_VIEW,"image/*");}  }
class C{  public void discardUntil(long timeUs){  while (rollingBuffer.peekSample(sampleInfoHolder) && sampleInfoHolder.timeUs < timeUs) {    rollingBuffer.skipSample();    needKeyframe=true;  }  lastReadTimeUs=Long.MIN_VALUE;}  }
class C{  public boolean match(Initializer node,Object other){  if (!(other instanceof Initializer)) {    return false;  }  Initializer o=(Initializer)other;  int level=node.getAST().apiLevel;  if (level == AST.JLS2_INTERNAL) {    if (node.getModifiers() != o.getModifiers()) {      return false;    }  }  if (level >= AST.JLS3) {    if (!safeSubtreeListMatch(node.modifiers(),o.modifiers())) {      return false;    }  }  return (safeSubtreeMatch(node.getJavadoc(),o.getJavadoc()) && safeSubtreeMatch(node.getBody(),o.getBody()));}  }
class C{  public void testGetMutlipleSecurityRoles() throws Exception {  String xml=WEBAPP_TEST_HEADER + "" + "  <security-role>".trim()+ "    <role-name>r1</role-name>".trim()+ "  </security-role>".trim()+ "  <security-role>".trim()+ "    <role-name>r2</role-name>".trim()+ "  </security-role>".trim()+ "  <security-role>".trim()+ "    <role-name>r3</role-name>".trim()+ "  </security-role>".trim()+ "</web-app>";  this.builder.build(new ByteArrayInputStream(xml.getBytes("UTF-8")));  WebXml webXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(xml.getBytes("UTF-8")),getEntityResolver());  assertTrue(WebXmlUtils.hasSecurityRole(webXml,"r1"));  Element securityRoleElement1=WebXmlUtils.getSecurityRole(webXml,"r1");  assertNotNull(securityRoleElement1);  assertEquals("security-role",securityRoleElement1.getName());  assertEquals("role-name",((Element)securityRoleElement1.getChildren().get(0)).getName());  assertEquals("r1",((Element)(Element)securityRoleElement1.getChildren().get(0)).getText());  assertTrue(WebXmlUtils.hasSecurityRole(webXml,"r2"));  Element securityRoleElement2=WebXmlUtils.getSecurityRole(webXml,"r2");  assertNotNull(securityRoleElement2);  assertEquals("security-role",securityRoleElement2.getName());  assertEquals("role-name",((Element)securityRoleElement2.getChildren().get(0)).getName());  assertEquals("r2",((Element)(Element)securityRoleElement2.getChildren().get(0)).getText());  assertTrue(WebXmlUtils.hasSecurityRole(webXml,"r3"));  Element securityRoleElement3=WebXmlUtils.getSecurityRole(webXml,"r3");  assertNotNull(securityRoleElement3);  assertEquals("security-role",securityRoleElement3.getName());  assertEquals("role-name",((Element)securityRoleElement3.getChildren().get(0)).getName());  assertEquals("r3",((Element)(Element)securityRoleElement3.getChildren().get(0)).getText());  List<String> securityRoleNames=WebXmlUtils.getSecurityRoleNames(webXml);  assertEquals(3,securityRoleNames.size());  assertEquals("r1",securityRoleNames.get(0));  assertEquals("r2",securityRoleNames.get(1));  assertEquals("r3",securityRoleNames.get(2));}  }
class C{  public Point2D unwrap(){  if (isDouble) {    return new Point2D.Double(x,y);  } else {    return new Point2D.Float((float)x,(float)y);  }}  }
class C{  @SuppressWarnings({"ProhibitedExceptionDeclared","ProhibitedExceptionThrown","CatchGenericClass","unchecked"}) @Around("execution(@org.apache.ignite.compute.gridify.Gridify * *(..)) && !cflow(call(* org.apache.ignite.compute.ComputeJob.*(..)))") public Object gridify(ProceedingJoinPoint joinPnt) throws Throwable {  Method mtd=((MethodSignature)joinPnt.getSignature()).getMethod();  Gridify ann=mtd.getAnnotation(Gridify.class);  assert ann != null : "Intercepted method does not have gridify annotation.";  String gridName=F.isEmpty(ann.gridName()) ? null : ann.gridName();  if (G.state(gridName) != STARTED)   throw new IgniteCheckedException("Grid is not locally started: " + gridName);  GridifyArgument arg=new GridifyArgumentAdapter(mtd.getDeclaringClass(),mtd.getName(),mtd.getParameterTypes(),joinPnt.getArgs(),joinPnt.getTarget());  if (!ann.interceptor().equals(GridifyInterceptor.class)) {    if (!ann.interceptor().newInstance().isGridify(ann,arg))     return joinPnt.proceed();  }  if (!ann.taskClass().equals(GridifyDefaultTask.class) && !ann.taskName().isEmpty()) {    throw new IgniteCheckedException("Gridify annotation must specify either Gridify.taskName() or " + "Gridify.taskClass(), but not both: " + ann);  }  try {    Ignite ignite=G.ignite(gridName);    if (!ann.taskClass().equals(GridifyDefaultTask.class)) {      return ignite.compute().withTimeout(ann.timeout()).execute((Class<? extends ComputeTask<GridifyArgument,Object>>)ann.taskClass(),arg);    }    if (ann.taskName().isEmpty()) {      return ignite.compute().withTimeout(ann.timeout()).execute(new GridifyDefaultTask(joinPnt.getSignature().getDeclaringType()),arg);    }    return ignite.compute().withTimeout(ann.timeout()).execute(ann.taskName(),arg);  } catch (  Exception e) {    for (    Class<?> ex : ((MethodSignature)joinPnt.getSignature()).getMethod().getExceptionTypes()) {      Throwable cause=e.getCause();      while (cause != null) {        if (ex.isAssignableFrom(cause.getClass()))         throw cause;        cause=cause.getCause();      }      if (ex.isAssignableFrom(e.getClass()))       throw e;    }    throw new GridifyRuntimeException("Undeclared exception thrown: " + e.getMessage(),e);  }}  }
class C{  protected int index(T obj){  Object[] set=_set;  int length=set.length;  int hash=_hashingStrategy.computeHashCode(obj) & 0x7fffffff;  int index=hash % length;  Object cur=set[index];  if (cur != null && (cur == REMOVED || !_hashingStrategy.equals((T)cur,obj))) {    int probe=1 + hash % (length - 2);    do {      index-=probe;      if (index < 0) {        index+=length;      }      cur=set[index];    } while (cur != null && (cur == REMOVED || !_hashingStrategy.equals((T)cur,obj)));  }  return cur == null ? -1 : index;}  }
class C{  @SuppressWarnings("unchecked") @Override public NotificationChain eInverseAdd(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case SexecPackage.STEP__CALLER:    return ((InternalEList<InternalEObject>)(InternalEList<?>)getCaller()).basicAdd(otherEnd,msgs);}return super.eInverseAdd(otherEnd,featureID,msgs);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:03.083 -0500",hash_original_method="197C44846842D871388F9BC9DA5E7C36",hash_generated_method="0303D91AD47676114DDAFD5FB3C249B2") public Engine(String service){  this.serviceName=service;}  }
class C{  public void add(Expression interpolatedValue){  elements.add(interpolatedValue);  interpolatedValue.setParent(this);}  }
class C{  public static String serializeMetaData(Map<String,List<String>> metaData){  StringBuilder buf=new StringBuilder();  if (metaData != null && metaData.size() > 0) {    buf.append("<metadata xmlns=\"http://jivesoftware.com/protocol/workgroup\">");    for (Iterator<String> i=metaData.keySet().iterator(); i.hasNext(); ) {      String key=i.next();      List<String> value=metaData.get(key);      for (Iterator<String> it=value.iterator(); it.hasNext(); ) {        String v=it.next();        buf.append("<value name=\"").append(key).append("\">");        buf.append(StringUtils.escapeForXML(v));        buf.append("</value>");      }    }    buf.append("</metadata>");  }  return buf.toString();}  }
class C{  public boolean removeParameter(String paramName,String paramValue) throws IllegalArgumentException {  log.trace("enter PostMethod.removeParameter(String, String)");  if (paramName == null) {    throw new IllegalArgumentException("Parameter name may not be null");  }  if (paramValue == null) {    throw new IllegalArgumentException("Parameter value may not be null");  }  Iterator<NameValuePair> iter=this.params.iterator();  while (iter.hasNext()) {    NameValuePair pair=iter.next();    if (paramName.equals(pair.getName()) && paramValue.equals(pair.getValue())) {      iter.remove();      return true;    }  }  return false;}  }
class C{  @Override public void stop(){  if (!getLifecycle().toStop()) {    return;  }  ArrayList<EnvLoaderListener> listeners=getEnvironmentListeners();  Thread thread=Thread.currentThread();  ClassLoader oldLoader=thread.getContextClassLoader();  thread.setContextClassLoader(this);  try {    if (listeners != null) {      for (int i=listeners.size() - 1; i >= 0; i--) {        EnvLoaderListener listener=listeners.get(i);        try {          listener.environmentStop(this);        } catch (        Throwable e) {          log().log(Level.WARNING,e.toString(),e);        }      }    }    super.stop();  }  finally {    thread.setContextClassLoader(oldLoader);  }}  }
class C{  public static byte[] encode(byte[] data){  ByteArrayOutputStream bOut=new ByteArrayOutputStream();  try {    encoder.encode(data,0,data.length,bOut);  } catch (  Exception e) {    throw new EncoderException("exception encoding URL safe base64 data: " + e.getMessage(),e);  }  return bOut.toByteArray();}  }
class C{  public static GridWindowVO create(Properties ctx,int WindowNo,int AD_Window_ID){  return create(ctx,WindowNo,AD_Window_ID,0);}  }
class C{  private Connections(Context context){  connections=new HashMap<String,Connection>();  persistence=new Persistence(context);  try {    List<Connection> connectionList=persistence.restoreConnections(context);    for (    Connection connection : connectionList) {      System.out.println("Connection was persisted.." + connection.handle());      connections.put(connection.handle(),connection);    }  } catch (  PersistenceException e) {    e.printStackTrace();  }}  }
class C{  public GridCachePartitionedMultiNodeCounterSelfTest(){  super(false);}  }
class C{  public Boolean isWriteThrough(){  return writeThrough;}  }
class C{  @Deprecated public static synchronized boolean urlInterceptDisabled(){  return mDisabled;}  }
class C{  public JsonArrayRequest(int method,String url,String requestBody,Listener<JSONArray> listener,ErrorListener errorListener){  super(method,url,requestBody,listener,errorListener);}  }
class C{  public static String valueToString(Object value) throws JSONException {  if (value == null || value.equals(null)) {    return "null";  }  if (value instanceof JSONString) {    Object object;    try {      object=((JSONString)value).toJSONString();    } catch (    Exception e) {      throw new JSONException(e);    }    if (object instanceof String) {      return (String)object;    }    throw new JSONException("Bad value from toJSONString: " + object);  }  if (value instanceof Number) {    return numberToString((Number)value);  }  if (value instanceof Boolean || value instanceof JSONObject || value instanceof JSONArray) {    return value.toString();  }  if (value instanceof Map) {    return new JSONObject((Map)value).toString();  }  if (value instanceof Collection) {    return new JSONArray((Collection)value).toString();  }  if (value.getClass().isArray()) {    return new JSONArray(value).toString();  }  return quote(value.toString());}  }
class C{  public boolean isProjectionOK(Projection proj){  return (proj != null && proj.getScale() >= minScale && proj.getScale() <= maxScale);}  }
class C{  private void createLanes(){  Lanes laneDef20=this.scenario.getLanes();  LanesFactory fac=laneDef20.getFactory();  LanesToLinkAssignment linkAssignment=fac.createLanesToLinkAssignment(links.get("1_2"));  LanesUtils.createAndAddLane(linkAssignment,fac,Id.create("1_2.ol",Lane.class),capacity,LINK_LENGTH,0,1,null,Arrays.asList(Id.create("1_2.l",Lane.class),Id.create("1_2.r",Lane.class)));  LanesUtils.createAndAddLane(linkAssignment,fac,Id.create("1_2.l",Lane.class),capacity,LINK_LENGTH / 2,-1,1,Collections.singletonList(links.get("2_3")),null);  LanesUtils.createAndAddLane(linkAssignment,fac,Id.create("1_2.r",Lane.class),capacity,LINK_LENGTH / 2,1,1,Collections.singletonList(links.get("2_7")),null);  laneDef20.addLanesToLinkAssignment(linkAssignment);  linkAssignment=fac.createLanesToLinkAssignment(links.get("6_5"));  LanesUtils.createAndAddLane(linkAssignment,fac,Id.create("6_5.ol",Lane.class),capacity,LINK_LENGTH,0,1,null,Arrays.asList(Id.create("6_5.l",Lane.class),Id.create("6_5.r",Lane.class)));  LanesUtils.createAndAddLane(linkAssignment,fac,Id.create("6_5.l",Lane.class),capacity,LINK_LENGTH / 2,-1,1,Collections.singletonList(links.get("5_8")),null);  LanesUtils.createAndAddLane(linkAssignment,fac,Id.create("6_5.r",Lane.class),capacity,LINK_LENGTH / 2,1,1,Collections.singletonList(links.get("5_4")),null);  laneDef20.addLanesToLinkAssignment(linkAssignment);  if (useSecondODPair) {    linkAssignment=fac.createLanesToLinkAssignment(links.get("9_10"));    LanesUtils.createAndAddLane(linkAssignment,fac,Id.create("9_10.ol",Lane.class),capacity,LINK_LENGTH,0,1,null,Arrays.asList(Id.create("9_10.l",Lane.class),Id.create("9_10.r",Lane.class)));    LanesUtils.createAndAddLane(linkAssignment,fac,Id.create("9_10.l",Lane.class),capacity,LINK_LENGTH / 2,-1,1,Collections.singletonList(links.get("10_4")),null);    LanesUtils.createAndAddLane(linkAssignment,fac,Id.create("9_10.r",Lane.class),capacity,LINK_LENGTH / 2,1,1,Collections.singletonList(links.get("10_3")),null);    laneDef20.addLanesToLinkAssignment(linkAssignment);    linkAssignment=fac.createLanesToLinkAssignment(links.get("12_11"));    LanesUtils.createAndAddLane(linkAssignment,fac,Id.create("12_11.ol",Lane.class),capacity,LINK_LENGTH,0,1,null,Arrays.asList(Id.create("12_11.l",Lane.class),Id.create("12_11.r",Lane.class)));    LanesUtils.createAndAddLane(linkAssignment,fac,Id.create("12_11.l",Lane.class),capacity,LINK_LENGTH / 2,-1,1,Collections.singletonList(links.get("11_7")),null);    LanesUtils.createAndAddLane(linkAssignment,fac,Id.create("12_11.r",Lane.class),capacity,LINK_LENGTH / 2,1,1,Collections.singletonList(links.get("11_8")),null);    laneDef20.addLanesToLinkAssignment(linkAssignment);  }}  }
class C{  public void detach(){  if (m_allowDetach) {    m_traverser=null;    super.detach();  }}  }
class C{  public static GramBooleanQuery translate(String regex) throws com.google.re2j.PatternSyntaxException {  return translate(regex,TranslatorUtils.DEFAULT_GRAM_LENGTH);}  }
class C{  public void replaceFromToWithFrom(int from,int to,AbstractDoubleList other,int otherFrom){  if (!(other instanceof DoubleArrayList)) {    super.replaceFromToWithFrom(from,to,other,otherFrom);    return;  }  int length=to - from + 1;  if (length > 0) {    checkRangeFromTo(from,to,size());    checkRangeFromTo(otherFrom,otherFrom + length - 1,other.size());    System.arraycopy(((DoubleArrayList)other).elements,otherFrom,elements,from,length);  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  String histoFile=null;  double range=0;  int numIterations=0;  double z=0;  int row, col;  float progress=0;  double[] data1;  double[] data2;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      histoFile=args[i];    } else     if (i == 3) {      range=Double.parseDouble(args[i]);    } else     if (i == 4) {      numIterations=Integer.parseInt(args[i]);    } else     if (i == 5) {      numBands=Integer.parseInt(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    DEM=new WhiteboxRaster(inputHeader,"r");    rows=DEM.getNumberRows();    cols=DEM.getNumberColumns();    noData=DEM.getNoDataValue();    double[][] output=new double[rows][cols];    for (int iterationNum=0; iterationNum < numIterations; iterationNum++) {      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(0 * 100f / 5);      updateProgress("Loop " + (iterationNum + 1) + " of "+ numIterations+ ": ",(int)progress);      tempGrid1=new double[rows][cols];      tempGrid2=new double[rows][cols];      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          tempGrid2[row][col]=noData;        }      }      TurningBandSimulation(range);      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(1 * 100f / 5);      updateProgress("Loop " + (iterationNum + 1) + " of "+ numIterations+ ": ",(int)progress);      HistogramMatching(histoFile);      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(2 * 100f / 5);      updateProgress("Loop " + (iterationNum + 1) + " of "+ numIterations+ ": ",(int)progress);      for (row=0; row < rows; row++) {        data1=DEM.getRowValues(row);        for (col=0; col < cols; col++) {          if (data1[col] != noData) {            tempGrid1[row][col]=data1[col] + tempGrid2[row][col];          } else {            tempGrid1[row][col]=noData;          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(3 * 100f / 5);      updateProgress("Loop " + (iterationNum + 1) + " of "+ numIterations+ ": ",(int)progress);      FillDepressions();      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(4 * 100f / 5);      updateProgress("Loop " + (iterationNum + 1) + " of "+ numIterations+ ": ",(int)progress);      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          if (tempGrid2[row][col] > tempGrid1[row][col]) {            output[row][col]+=1;          }        }      }      progress=(float)(5 * 100f / 5);      updateProgress("Loop " + (iterationNum + 1) + " of "+ numIterations+ ": ",(int)progress);      if (cancelOp) {        cancelOperation();        return;      }    }    outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    outputFile.setPreferredPalette("spectrum.pal");    for (row=0; row < rows; row++) {      data1=DEM.getRowValues(row);      for (col=0; col < cols; col++) {        if (data1[col] != noData) {          outputFile.setValue(row,col,output[row][col]);        } else {          outputFile.setValue(row,col,noData);        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    DEM.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:40.263 -0500",hash_original_method="85F9A054AA9529578DD28AD736197991",hash_generated_method="BC279CCB9515367DC19E181BF23167FA") static void readAndHandleBinderCallViolations(Parcel p){  StringWriter sw=new StringWriter();  new LogStackTrace().printStackTrace(new PrintWriter(sw));  String ourStack=sw.toString();  int policyMask=getThreadPolicyMask();  boolean currentlyGathering=(policyMask & PENALTY_GATHER) != 0;  int numViolations=p.readInt();  for (int i=0; i < numViolations; ++i) {    if (LOG_V)     Log.d(TAG,"strict mode violation stacks read from binder call.  i=" + i);    ViolationInfo info=new ViolationInfo(p,!currentlyGathering);    info.crashInfo.stackTrace+="# via Binder call with stack:\n" + ourStack;    BlockGuard.Policy policy=BlockGuard.getThreadPolicy();    if (policy instanceof AndroidBlockGuardPolicy) {      ((AndroidBlockGuardPolicy)policy).handleViolationWithTimingAttempt(info);    }  }}  }
class C{  public Collection<String> listOperationNames(){  List<String> list=new ArrayList<String>();  try {    MBeanOperationInfo[] operations=beanInfo.getOperations();    for (    MBeanOperationInfo operation : operations) {      list.add(operation.getName());    }  } catch (  Exception e) {    throwException("Could not list operation names. Reason: ",e);  }  return list;}  }
class C{  public final void remove(Action actionToRemove){  int index;  for (  Action action : actionList) {    if (action.equals(actionToRemove)) {      index=actionList.indexOf(action);      actionList.remove(action);      constraintsList.remove(index);      needSorting=true;      return;    }  }}  }
class C{  public synchronized void readExternal(ObjectInput is) throws IOException, ClassNotFoundException {  String rcn=null;  mimeType=(MimeType)is.readObject();  if (mimeType != null) {    humanPresentableName=mimeType.getParameter("humanPresentableName");    mimeType.removeParameter("humanPresentableName");    rcn=mimeType.getParameter("class");    if (rcn == null) {      throw new IOException("no class parameter specified in: " + mimeType);    }  }  try {    representationClass=(Class)is.readObject();  } catch (  OptionalDataException ode) {    if (!ode.eof || ode.length != 0) {      throw ode;    }    if (rcn != null) {      representationClass=DataFlavor.tryToLoadClass(rcn,getClass().getClassLoader());    }  }}  }
class C{  public Finished(HandshakeIODataStream in,int length) throws IOException {  if (length == 12 || length == 36) {    data=in.read(length);    this.length=data.length;  } else {    fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR: incorrect Finished");  }}  }
class C{  public Builder addParameter(String kind,String value){  if (!TextUtils.isEmpty(value)) {    mKinds.add(kind);    mValues.add(value);  }  return this;}  }
class C{  @SuppressWarnings("unchecked") public void loadBinary(String fileName) throws Exception {  if (!fileName.endsWith(".kf")) {    throw new Exception("File must be a binary flow (*.kf)");  }  InputStream is=new FileInputStream(fileName);  ObjectInputStream ois=new ObjectInputStream(is);  m_beans=(Vector<Object>)ois.readObject();  ois.close();  if (m_env != null) {    String parentDir=(new File(fileName)).getParent();    if (parentDir == null) {      parentDir="./";    }    m_env.addVariable("Internal.knowledgeflow.directory",parentDir);  }}  }
class C{  public AttributeHistogram(String attributeName,GoogleBaseAttributeType attributeType){  attributeId=new GoogleBaseAttributeId(attributeName,attributeType);}  }
class C{  protected GenericPermsImpl(){  _perms=new PermsImpl();}  }
class C{  private double boxRadius(int i,int a,int b){  final int level;  if (a < 0) {    if (b >= pf.length) {      return Double.POSITIVE_INFINITY;    }    level=maxRegLevel(i,b);  } else   if (b >= pf.length) {    level=maxRegLevel(i,a);  } else {    level=Math.max(maxRegLevel(i,a),maxRegLevel(i,b));  }  return minDistLevel(pf[i].id,level);}  }
class C{  public AdviceAttribute(String name){  this(name,new ArrayList<String>());}  }
class C{  protected void processpacketforward(SimEvent ev){  if (downlinkswitchpktlist != null) {    for (    Entry<Integer,List<NetworkPacket>> es : downlinkswitchpktlist.entrySet()) {      int tosend=es.getKey();      List<NetworkPacket> hspktlist=es.getValue();      if (!hspktlist.isEmpty()) {        double avband=downlinkbandwidth / hspktlist.size();        Iterator<NetworkPacket> it=hspktlist.iterator();        while (it.hasNext()) {          NetworkPacket hspkt=it.next();          double delay=1000 * hspkt.pkt.data / avband;          this.send(tosend,delay,CloudSimTags.Network_Event_DOWN,hspkt);        }        hspktlist.clear();      }    }  }  if (uplinkswitchpktlist != null) {    for (    Entry<Integer,List<NetworkPacket>> es : uplinkswitchpktlist.entrySet()) {      int tosend=es.getKey();      List<NetworkPacket> hspktlist=es.getValue();      if (!hspktlist.isEmpty()) {        double avband=uplinkbandwidth / hspktlist.size();        Iterator<NetworkPacket> it=hspktlist.iterator();        while (it.hasNext()) {          NetworkPacket hspkt=it.next();          double delay=1000 * hspkt.pkt.data / avband;          this.send(tosend,delay,CloudSimTags.Network_Event_UP,hspkt);        }        hspktlist.clear();      }    }  }  if (packetTohost != null) {    for (    Entry<Integer,List<NetworkPacket>> es : packetTohost.entrySet()) {      List<NetworkPacket> hspktlist=es.getValue();      if (!hspktlist.isEmpty()) {        double avband=downlinkbandwidth / hspktlist.size();        Iterator<NetworkPacket> it=hspktlist.iterator();        while (it.hasNext()) {          NetworkPacket hspkt=it.next();          this.send(getId(),hspkt.pkt.data / avband,CloudSimTags.Network_Event_Host,hspkt);        }        hspktlist.clear();      }    }  }}  }
class C{  public boolean awaitTermination(long timeout,TimeUnit unit){  try {    unscheduledLock.unlock();  } catch (  Throwable t) {  }  isShuttingDown=true;  executorService.shutdown();  if (null != firstException) {    throw new RuntimeException(firstException);  }  try {    boolean cleanExit=executorService.awaitTermination(timeout,unit);    validShutdownState();    return cleanExit;  } catch (  InterruptedException e) {    executorService.shutdownNow();    Thread.currentThread().interrupt();    return true;  }catch (  Throwable e) {    if (null == firstException) {      throw new RuntimeException(e);    }    log.error("awaitTermination",e);    return false;  } finally {    if (null != firstException) {      throw new RuntimeException(firstException);    }  }}  }
class C{  @Override public final void write(final String filename){  try {    this.openFile(filename);    this.handler.writeHeaderAndStartElement(this.writer);    this.handler.startPlans(this.population,this.writer);    this.handler.writeSeparator(this.writer);    this.writePersons();    this.handler.endPlans(this.writer);    log.info("Population written to: " + filename);  } catch (  IOException e) {    throw new UncheckedIOException(e);  } finally {    this.close();    counter.printCounter();    counter.reset();  }}  }
class C{  private static TokenSet buildTokenSet(String pattern,char escape,boolean doLowerCase){  assert !pattern.isEmpty();  checkEndEscape(pattern,escape);  final int patLength=pattern.length();  List<Token> tokens=new LinkedList<>();  for (int n=0; n < patLength; ) {    char[] chunk=new char[patLength - n];    int chunkLen=0;    Map<Character,Integer> rightIndex=new HashMap<>();    BitSet wildIndex=new BitSet();    for (; n < patLength; ++n) {      char ch=pattern.charAt(n);      if (ch == escape) {        assert (n + 1) < patLength : pattern;        ch=pattern.charAt(++n);      } else       if (ch == '%') {        ++n;        break;      } else       if (ch == '_') {        wildIndex.set(chunkLen);      }      if (doLowerCase) {        ch=Character.toLowerCase(ch);      }      chunk[chunkLen]=ch;      rightIndex.put(ch,chunkLen++);    }    if (chunkLen > 0) {      if (chunk.length != chunkLen) {        chunk=Arrays.copyOf(chunk,chunkLen);      }      if (wildIndex.size() < chunkLen) {        wildIndex.set(chunkLen,false);      }      tokens.add(new Token(chunk,rightIndex,wildIndex));    }  }  Token startsWith=null;  if (!tokens.isEmpty() && isExactStart(pattern,escape)) {    startsWith=tokens.remove(0);  }  Token endsWith=null;  if (isExactEnd(pattern,escape)) {    if (tokens.isEmpty()) {      endsWith=startsWith;    } else {      endsWith=tokens.remove(tokens.size() - 1);    }  }  return new TokenSet(startsWith,tokens.toArray(new Token[tokens.size()]),endsWith);}  }
class C{  public String render(final Map<String,PcjMetadata> metadata) throws Exception {  checkNotNull(metadata);  final StringBuilder formatted=new StringBuilder();  for (  final Entry<String,PcjMetadata> entry : metadata.entrySet()) {    final String formattedQuery=render(entry.getKey(),entry.getValue());    formatted.append(formattedQuery).append("\n");  }  return formatted.toString();}  }
class C{  public void testEqualsObject(){  ConnectionIdAttribute target=null;  boolean expectedReturn=false;  boolean actualReturn=connectionIdAttribute.equals(target);  assertEquals("ConnectionIdAttribute.equals() failed against a null target.",expectedReturn,actualReturn);  target=new ConnectionIdAttribute();  int connectionId=MsgFixture.CONNECTION_ID_2;  target.setConnectionIdValue(connectionId);  connectionIdAttribute.setConnectionIdValue(MsgFixture.CONNECTION_ID);  expectedReturn=false;  actualReturn=connectionIdAttribute.equals(target);  assertEquals("ConnectionIdAttribute.equals() failed against a different target.",expectedReturn,actualReturn);  target.setConnectionIdValue(MsgFixture.CONNECTION_ID);  expectedReturn=true;  actualReturn=connectionIdAttribute.equals(target);  assertEquals("ConnectionIdAttribute.equals() failed against an equal target.",expectedReturn,actualReturn);}  }
class C{  public boolean hasMatch(Pattern pattern,String text){  return pattern.matcher(text).find();}  }
class C{  public int lookAhead(){  return kind;}  }
class C{  protected void engineInitSign(PrivateKey privateKey) throws InvalidKeyException {  DSAParams params;  BigInteger p, q, x;  int n;  if (privateKey == null || !(privateKey instanceof DSAPrivateKey)) {    throw new InvalidKeyException();  }  params=((DSAPrivateKey)privateKey).getParams();  p=params.getP();  q=params.getQ();  x=((DSAPrivateKey)privateKey).getX();  n=p.bitLength();  if (p.compareTo(BigInteger.valueOf(1)) != 1 || n < 512 || n > 1024 || (n & 077) != 0) {    throw new InvalidKeyException("bad p");  }  if (q.signum() != 1 && q.bitLength() != 160) {    throw new InvalidKeyException("bad q");  }  if (x.signum() != 1 || x.compareTo(q) != -1) {    throw new InvalidKeyException("x <= 0 || x >= q");  }  dsaKey=(DSAKey)privateKey;  msgDigest.reset();}  }
class C{  public static VisorThreadMonitorInfo from(MonitorInfo mi){  assert mi != null;  return new VisorThreadMonitorInfo(mi.getClassName(),mi.getIdentityHashCode(),mi.getLockedStackDepth(),mi.getLockedStackFrame());}  }
class C{  public static KeyStroke parseKeyStroke(String keyStroke){  if (keyStroke == null)   return null;  int modifiers=0;  int index=keyStroke.indexOf('+');  if (index != -1) {    for (int i=0; i < index; i++) {switch (Character.toUpperCase(keyStroke.charAt(i))) {case 'A':        modifiers|=InputEvent.ALT_MASK;      break;case 'C':    modifiers|=InputEvent.CTRL_MASK;  break;case 'M':modifiers|=InputEvent.META_MASK;break;case 'S':modifiers|=InputEvent.SHIFT_MASK;break;}}}String key=keyStroke.substring(index + 1);if (key.length() == 1) {char ch=Character.toUpperCase(key.charAt(0));if (modifiers == 0) return KeyStroke.getKeyStroke(ch); else return KeyStroke.getKeyStroke(ch,modifiers);} else if (key.length() == 0) {System.err.println("Invalid key stroke: " + keyStroke);return null;} else {int ch;try {ch=KeyEvent.class.getField("VK_".concat(key)).getInt(null);} catch (Exception e) {System.err.println("Invalid key stroke: " + keyStroke);return null;}return KeyStroke.getKeyStroke(ch,modifiers);}}  }
class C{  public boolean isEnforceRoleSecurity(){  Object oo=get_Value(COLUMNNAME_EnforceRoleSecurity);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean isServerStopped(){  if (getJettyServer().isStopping() || getJettyServer().isStopped()) {    return true;  } else {    return false;  }}  }
class C{  static boolean isReadable(final ServletContext ctx,final HttpServletRequest req,final HttpServletResponse resp) throws IOException {  final HAStatusEnum haStatus=getHAStatus(getIndexManager(ctx));  if (haStatus == null) {    return true;  }switch (haStatus) {case Leader:case Follower:    return true;default :  log.warn(haStatus.name());buildAndCommitResponse(resp,HTTP_METHOD_NOT_ALLOWED,MIME_TEXT_PLAIN,haStatus.name());return false;}}  }
class C{  private boolean isDateTblMultCreated(){  boolean isMDate=false;  if (_flds.getMultFldsCount() > 0) {    for (int i=0; i < _flds.count(); i++) {      ArchiveFldImpl fld=(ArchiveFldImpl)_flds.get(i);      if (fld.isMult()) {        int type=fld.getType();        if (type == ArchiveFldType.DATE || type == ArchiveFldType.DATE_TIME || type == ArchiveFldType.TIME) {          isMDate=true;        }      }    }  }  return isMDate;}  }
class C{  public static final Instances combineInstances(Instances D1,Instances D2){  Instances D=new Instances(D1);  for (int i=0; i < D2.numInstances(); i++) {    D.add(D2.instance(i));  }  return D;}  }
class C{  public List<String> chunkIntoList(String text){  List<String> chunks=new ArrayList<String>();  if (text == null) {    return Collections.emptyList();  }  int chunkCount=(text.length() - 1) / CHUNK_SIZE;  for (int offset=0; offset <= chunkCount; offset++) {    if (offset < chunkCount) {      chunks.add(text.substring(offset * CHUNK_SIZE,offset * CHUNK_SIZE + CHUNK_SIZE));    } else {      chunks.add(text.substring(offset * CHUNK_SIZE));    }  }  return chunks;}  }
class C{  public static CacheHeader readHeader(InputStream is) throws IOException {  CacheHeader entry=new CacheHeader();  int magic=readInt(is);  if (magic != CACHE_MAGIC) {    throw new IOException();  }  entry.key=readString(is);  entry.etag=readString(is);  if (entry.etag.equals("")) {    entry.etag=null;  }  entry.serverDate=readLong(is);  entry.lastModified=readLong(is);  entry.ttl=readLong(is);  entry.softTtl=readLong(is);  entry.responseHeaders=readStringStringMap(is);  return entry;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!super.equals(obj)) {    return false;  }  if (!(obj instanceof XYShapeAnnotation)) {    return false;  }  XYShapeAnnotation that=(XYShapeAnnotation)obj;  if (!this.shape.equals(that.shape)) {    return false;  }  if (!ObjectUtilities.equal(this.stroke,that.stroke)) {    return false;  }  if (!PaintUtilities.equal(this.outlinePaint,that.outlinePaint)) {    return false;  }  if (!PaintUtilities.equal(this.fillPaint,that.fillPaint)) {    return false;  }  return true;}  }
class C{  public SegmentBlock(long... delimiter) throws IllegalArgumentException {  if (delimiter.length == 0)   throw new IllegalArgumentException();  for (int i=0; i < delimiter.length - 1; i++)   if (delimiter[i] > delimiter[i + 1])   throw new IllegalArgumentException("Segment " + (i + 1) + " is inconsistent as it starts after the next one: "+ Arrays.toString(delimiter));  this.delimiter=delimiter;  this.currSegment=-1;}  }
class C{  @Override public void prepare(String changedSelector){  AgentAppFrame.SelectionState selState=frame.getSelection();  EightPuzzleBoard board=null;switch (selState.getIndex(EightPuzzleFrame.ENV_SEL)) {case 0:    board=new EightPuzzleBoard(new int[]{1,2,5,3,4,0,6,7,8});  break;case 1:board=new EightPuzzleBoard(new int[]{1,4,2,7,5,8,3,0,6});break;case 2:board=new EightPuzzleBoard(new int[]{0,8,7,6,5,4,3,2,1});break;case 3:board=new EightPuzzleBoard(new int[]{0,1,2,3,4,5,6,7,8});Random r=new Random(System.currentTimeMillis());for (int i=0; i < 200; i++) {switch (r.nextInt(4)) {case 0:board.moveGapUp();break;case 1:board.moveGapDown();break;case 2:board.moveGapLeft();break;case 3:board.moveGapRight();break;}}}env=new EightPuzzleEnvironment(board);agent=null;dirty=false;frame.getEnvView().setEnvironment(env);}  }
class C{  public void teleopPeriodic(){  if (tpFirstRun) {    System.out.println("NerdyIterativeRobot IterativeRobot.teleopPeriodic() method... Overload me!");    tpFirstRun=false;  }  Timer.delay(0.001);}  }
class C{  public final Object pull(){  if (current_item > 0) {    current_item--;  }  return (items[current_item]);}  }
class C{  public void reset(){  i=0;  dirty=false;}  }
class C{  public EnumField(String name,Collection<String> options){  super(name,Field.Type.ENUM,options);}  }
class C{  public Iterator<EdgeInfo> backward(){  return backward.iterator();}  }
class C{  private int makeSendReqPdu(){  Log.w("PduComposer","Making send request...");  if (mMessage == null) {    mMessage=new ByteArrayOutputStream();    mPosition=0;  }  appendOctet(PduHeaders.MESSAGE_TYPE);  appendOctet(PduHeaders.MESSAGE_TYPE_SEND_REQ);  appendOctet(PduHeaders.TRANSACTION_ID);  byte[] trid=mPduHeader.getTextString(PduHeaders.TRANSACTION_ID);  if (trid == null) {    throw new IllegalArgumentException("Transaction-ID is null.");  }  appendTextString(trid);  if (appendHeader(PduHeaders.MMS_VERSION) != PDU_COMPOSE_SUCCESS) {    return PDU_COMPOSE_CONTENT_ERROR;  }  appendHeader(PduHeaders.DATE);  if (appendHeader(PduHeaders.FROM) != PDU_COMPOSE_SUCCESS) {    return PDU_COMPOSE_CONTENT_ERROR;  }  boolean recipient=false;  if (appendHeader(PduHeaders.TO) != PDU_COMPOSE_CONTENT_ERROR) {    recipient=true;  }  if (appendHeader(PduHeaders.CC) != PDU_COMPOSE_CONTENT_ERROR) {    recipient=true;  }  if (appendHeader(PduHeaders.BCC) != PDU_COMPOSE_CONTENT_ERROR) {    recipient=true;  }  if (false == recipient) {    return PDU_COMPOSE_CONTENT_ERROR;  }  appendHeader(PduHeaders.SUBJECT);  appendHeader(PduHeaders.MESSAGE_CLASS);  appendHeader(PduHeaders.EXPIRY);  appendHeader(PduHeaders.PRIORITY);  appendHeader(PduHeaders.DELIVERY_REPORT);  appendHeader(PduHeaders.READ_REPORT);  appendOctet(PduHeaders.CONTENT_TYPE);  return makeMessageBody();}  }
class C{  public void putParcelableArray(String key,Parcelable[] value){  unparcel();  mMap.put(key,value);  mFdsKnown=false;}  }
class C{  public static CertStore createStore(String[] fileNames) throws Exception {  return createStore("",fileNames);}  }
class C{  private void fciOrientbk(IKnowledge bk,Graph graph,List<Node> variables){  logger.log("info","Starting BK Orientation.");  for (Iterator<KnowledgeEdge> it=bk.forbiddenEdgesIterator(); it.hasNext(); ) {    KnowledgeEdge edge=it.next();    Node from=SearchGraphUtils.translate(edge.getFrom(),variables);    Node to=SearchGraphUtils.translate(edge.getTo(),variables);    if (from == null || to == null) {      continue;    }    if (graph.getEdge(from,to) == null) {      continue;    }    graph.setEndpoint(to,from,Endpoint.ARROW);    graph.setEndpoint(from,to,Endpoint.CIRCLE);    changeFlag=true;    logger.log("knowledgeOrientation",SearchLogUtils.edgeOrientedMsg("Knowledge",graph.getEdge(from,to)));  }  for (Iterator<KnowledgeEdge> it=bk.requiredEdgesIterator(); it.hasNext(); ) {    KnowledgeEdge edge=it.next();    Node from=SearchGraphUtils.translate(edge.getFrom(),variables);    Node to=SearchGraphUtils.translate(edge.getTo(),variables);    if (from == null || to == null) {      continue;    }    if (graph.getEdge(from,to) == null) {      continue;    }    graph.setEndpoint(to,from,Endpoint.TAIL);    graph.setEndpoint(from,to,Endpoint.ARROW);    changeFlag=true;    logger.log("knowledgeOrientation",SearchLogUtils.edgeOrientedMsg("Knowledge",graph.getEdge(from,to)));  }  logger.log("info","Finishing BK Orientation.");}  }
class C{  @Override public void process(TupleExpr tupleExpr,BindingSet bindings,Collection<SearchQueryEvaluator> result) throws SailException {  PatternFilter filter=new PatternFilter();  tupleExpr.visit(filter);  for (  StatementPattern matchesPattern : filter.matchesPatterns) {    Var subjectVar=matchesPattern.getSubjectVar();    Value subjectValue=subjectVar.hasValue() ? subjectVar.getValue() : bindings.getValue(subjectVar.getName());    if (subjectValue != null && !(subjectValue instanceof Resource)) {      failOrWarn(MATCHES + " properties should have Resource subjects: " + subjectVar.getValue());      continue;    }    Resource subject=(Resource)subjectValue;    Var matchesVar=matchesPattern.getObjectVar();    if (matchesVar.hasValue()) {      failOrWarn(MATCHES + " properties should have variable objects: " + matchesVar.getValue());      continue;    }    StatementPattern typePattern, queryPattern, propertyPattern, scorePattern, snippetPattern;    try {      typePattern=getPattern(matchesVar,filter.typePatterns);      queryPattern=getPattern(matchesVar,filter.queryPatterns);      propertyPattern=getPattern(matchesVar,filter.propertyPatterns);      scorePattern=getPattern(matchesVar,filter.scorePatterns);      snippetPattern=getPattern(matchesVar,filter.snippetPatterns);    } catch (    IllegalArgumentException e) {      failOrWarn(e);      continue;    }    String queryString=null;    if (queryPattern != null) {      Var queryVar=queryPattern.getObjectVar();      Value queryValue=queryVar.hasValue() ? queryVar.getValue() : bindings.getValue(queryVar.getName());      if (queryValue instanceof Literal) {        queryString=((Literal)queryValue).getLabel();      }    }    if (queryString == null) {      failOrWarn("missing query string for Lucene query specification");      continue;    }    IRI propertyURI=null;    if (propertyPattern != null) {      Var propertyVar=propertyPattern.getObjectVar();      Value propertyValue=propertyVar.hasValue() ? propertyVar.getValue() : bindings.getValue(propertyVar.getName());      if (propertyValue instanceof IRI) {        propertyURI=(IRI)propertyValue;      } else       if (propertyValue != null) {        failOrWarn(PROPERTY + " should have a property URI or a variable as object: " + propertyVar.getValue());        continue;      }    }    Var scoreVar=scorePattern == null ? null : scorePattern.getObjectVar();    if (scoreVar != null && scoreVar.hasValue()) {      failOrWarn(SCORE + " should have a variable as object: " + scoreVar.getValue());      continue;    }    Var snippetVar=snippetPattern == null ? null : snippetPattern.getObjectVar();    if (snippetVar != null && snippetVar.hasValue()) {      failOrWarn(SNIPPET + " should have a variable as object: " + snippetVar.getValue());      continue;    }    if (typePattern == null) {      logger.debug("Query variable '{}' has not rdf:type, assuming {}",subject,LUCENE_QUERY);    }    result.add(new QuerySpec(matchesPattern,queryPattern,propertyPattern,scorePattern,snippetPattern,typePattern,subject,queryString,propertyURI));  }}  }
class C{  public static String replace(String a,String b,String c){  StringBuilder result=new StringBuilder(c.length());  int i=0;  int j=c.indexOf(a);  while (j >= i) {    result.append(c.substring(i,j));    result.append(b);    i=j + a.length();    j=c.indexOf(a,i);  }  result.append(c.substring(i,c.length()));  return result.toString();}  }
class C{  @Override public boolean match(Certificate cert){  X509Certificate xcert=(X509Certificate)cert;  if (!matchSubjectKeyID(xcert)) {    return false;  }  int version=xcert.getVersion();  if (serial != null && version > 2) {    if (!serial.equals(xcert.getSerialNumber())) {      return false;    }  }  if (version < 3) {    if (startDate != null) {      try {        xcert.checkValidity(startDate);      } catch (      CertificateException ce) {        return false;      }    }    if (endDate != null) {      try {        xcert.checkValidity(endDate);      } catch (      CertificateException ce) {        return false;      }    }  }  if (!super.match(cert)) {    return false;  }  return true;}  }
class C{  public boolean isCancelable(){  return cancelable;}  }
class C{  public JSON processQuery(String query) throws IOException {  log("API",Level.FINEST,query);  URL get=new URL(query);  Reader reader=new InputStreamReader(get.openStream(),"UTF-8");  StringWriter output=new StringWriter();  int next=reader.read();  while (next != -1) {    output.write(next);    next=reader.read();  }  String result=output.toString();  log("JSON",Level.FINEST,result);  return JSONSerializer.toJSON(result);}  }
class C{  public static void equalsTest(final Object[][] groups){  for (int i=0; i < groups.length; i++) {    final Object[] gi=groups[i];    for (    Object aGi1 : gi) {      Assert.assertTrue(!aGi1.equals(null));    }    for (    final Object element : gi) {      for (      final Object element2 : gi) {        Assert.assertEquals(element,element2);        Assert.assertEquals(element.hashCode(),element2.hashCode());      }    }    for (int j=0; j < groups.length; j++) {      if (j != i) {        final Object[] gj=groups[j];        for (        Object aGi : gi) {          for (          Object aGj : gj) {            Assert.assertTrue(!aGi.equals(aGj));          }        }      }    }  }}  }
class C{  private void drawSquare(Canvas canvas,Paint paint,float x,float y){  canvas.drawRect(x - size,y - size,x + size,y + size,paint);}  }
class C{  public void testMinShingleSizeAndTokenSeparator() throws Exception {  Reader reader=new StringReader("this is a test");  TokenStream stream=whitespaceMockTokenizer(reader);  stream=tokenFilterFactory("Shingle","minShingleSize","3","maxShingleSize","4","tokenSeparator","=BLAH=").create(stream);  assertTokenStreamContents(stream,new String[]{"this","this=BLAH=is=BLAH=a","this=BLAH=is=BLAH=a=BLAH=test","is","is=BLAH=a=BLAH=test","a","test"});}  }
class C{  void receive(MultiplexedSocket multiplexed,DatagramPacket p) throws IOException {  try {    setOriginalInputStream(super.getInputStream());  } catch (  Exception e) {  }  multiplexingXXXSocketSupport.receive(multiplexed.received,p,multiplexed.getSoTimeout());}  }
class C{  public static void startSettingsApp(android.support.v4.app.Fragment fragment){  startSettingsApp((Context)fragment.getActivity());}  }
class C{  @Override public void partInputChanged(final IWorkbenchPartReference partRef){}  }
class C{  public static Test suite(){  return (new TestSuite(AjaxTagWrappingITCase.class));}  }
class C{  public static void addCommentTagLines(final ZyLabelContent content,final INaviViewNode node,final List<IComment> localComment,final List<IComment> globalComment){  addCommentLines(content,node,localComment,globalComment);  addTagLines(content,node,"|T| ",ConfigManager.instance().getColorSettings().getTagColor());}  }
class C{  public GridLayoutManager.SpanSizeLookup createSpanSizeLookup(int spanCount){  return new SectionSpanSizeLookup(null,spanCount);}  }
class C{  @Override public boolean isComponentEnabled(ResolveInfo resolveInfo){  if (resolveInfo != null && resolveInfo.serviceInfo != null && !TextUtils.isEmpty(resolveInfo.serviceInfo.packageName)) {    if (mPermittedPackageNames == null || isSystemApp(resolveInfo.serviceInfo.applicationInfo)) {      return true;    } else {      return mPermittedPackageNames.contains(resolveInfo.serviceInfo.packageName);    }  }  return false;}  }
class C{  public boolean unmountVolume(boolean force){  NaElement elem=new NaElement("volume-unmount");  elem.addNewChild("force",Boolean.toString(force));  elem.addNewChild("volume-name",name);  try {    server.invokeElem(elem);    return true;  } catch (  Exception e) {    String msg="Failed to unmount volume: " + name;    log.error(msg,e);    throw new NetAppCException(msg,e);  }}  }
class C{  public StarredStateUpdater(Article article,int articleState){  this.article=article;  this.articleState=articleState;}  }
class C{  public static SslSettings noSsl(){  return new SslSettings(false,null,false);}  }
class C{  public Bundler putInt(String key,int value){  bundle.putInt(key,value);  return this;}  }
class C{  public int size(){  return elements.size();}  }
class C{  public SQLNonTransientException(){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:13.265 -0500",hash_original_method="E96960960A41CE3DD754F7ED4B73683A",hash_generated_method="3090DEA6078ACAD12CEA90B953DAEDAE") public String toGenericString(){  StringBuilder sb=new StringBuilder(80);  int modifier=getModifiers();  if (modifier != 0) {    sb.append(Modifier.toString(modifier)).append(' ');  }  appendGenericType(sb,getGenericType());  sb.append(' ');  sb.append(getDeclaringClass().getName()).append('.').append(getName());  return sb.toString();}  }
class C{  public static double euclideanNormWithAbort(double[] x1,double[] x2,double limit){  double distance=0.0;  limit*=limit;  for (int d=0; d < x1.length; d++) {    double difference=x1[d] - x2[d];    distance+=difference * difference;    if (distance > limit) {      return Double.POSITIVE_INFINITY;    }  }  return Math.sqrt(distance);}  }
class C{  public void emitNewarray(int elemcode,Type arrayType){  emitop(newarray);  if (!alive)   return;  emit1(elemcode);  state.pop(1);  state.push(arrayType);}  }
class C{  public void addAssignment(Assignment assignment){  addPairs(assignment.getPairs());}  }
class C{  public void incUniqueCqQuery(){  this._stats.incInt(_numUniqueCqQuery,1);}  }
class C{  @Override public void writeToText(TextWriterStream out,String label){  String name=getNameAutomatic();  if (name != null) {    out.commentPrintLn("Cluster name: " + name);  }  out.commentPrintLn("Cluster noise flag: " + isNoise());  out.commentPrintLn("Cluster size: " + ids.size());  if (getModel() != null && (getModel() instanceof TextWriteable)) {    ((TextWriteable)getModel()).writeToText(out,label);  }}  }
class C{  public String salesStage(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  if (isCalloutActive() || value == null)   return "";  int C_SalesStage_ID=(Integer)value;  String sql="SELECT Probability FROM C_SalesStage WHERE C_SalesStage_ID = ?";  BigDecimal probability=DB.getSQLValueBD(null,sql,C_SalesStage_ID);  if (probability != null)   mTab.setValue("Probability",probability);  return "";}  }
class C{  static void testLongExactTwice(long x,long y){  testLongExact(x,y);  testLongExact(y,x);}  }
class C{  protected Resource updateKeywordsWithDatasetTypeAndSubtype(Resource resource){  Eml eml=resource.getEml();  if (eml != null) {    List<KeywordSet> keywords=eml.getKeywords();    if (keywords != null) {      String type=resource.getCoreType();      if (!Strings.isNullOrEmpty(type)) {        EmlUtils.addOrUpdateKeywordSet(keywords,type,Constants.THESAURUS_DATASET_TYPE);        log.debug("GBIF Dataset Type Vocabulary added/updated to Resource's list of keywords");      } else {        EmlUtils.removeKeywordSet(keywords,Constants.THESAURUS_DATASET_TYPE);        log.debug("GBIF Dataset Type Vocabulary removed from Resource's list of keywords");      }      String subtype=resource.getSubtype();      if (!Strings.isNullOrEmpty(subtype)) {        EmlUtils.addOrUpdateKeywordSet(keywords,subtype,Constants.THESAURUS_DATASET_SUBTYPE);        log.debug("GBIF Dataset Subtype Vocabulary added/updated to Resource's list of keywords");      } else {        EmlUtils.removeKeywordSet(keywords,Constants.THESAURUS_DATASET_SUBTYPE);        log.debug("GBIF Dataset Type Vocabulary removed from Resource's list of keywords");      }    }  }  return resource;}  }
class C{  public static Color createColor(float red,float green,float blue,float alpha,boolean forceAlpha){  int value=(((int)(alpha * 255) & 0xff) << 24) | (((int)(red * 255) & 0xff) << 16) | (((int)(green * 255) & 0xff) << 8)| (int)(blue * 255) & 0xff;  return createColor(value,forceAlpha);}  }
class C{  private boolean updateStoragePortNetwork(StoragePort storagePort,URI newNetworkId){  boolean networkUpdated=false;  String portNetworkId=storagePort.getPortNetworkId();  String portNativeId=storagePort.getNativeGuid();  Network currentNetwork=null;  Network newNetwork=null;  if (newNetworkId == null) {    _log.info("New network id was not specified.");    return false;  }  URI currentNetworkId=storagePort.getNetwork();  if (!NullColumnValueGetter.isNullURI(currentNetworkId)) {    _log.info("Current storage port network is {}",currentNetworkId);    currentNetwork=_dbClient.queryObject(Network.class,currentNetworkId);    ArgValidator.checkEntity(currentNetwork,currentNetworkId,false);    if (currentNetwork.endpointIsDiscovered(storagePort.getPortNetworkId())) {      throw APIException.badRequests.unableToUpdateDiscoveredNetworkForStoragePort();    }  }  if (!NullColumnValueGetter.isNullURI(newNetworkId)) {    _log.info("New network {} specified for storage port ",newNetworkId,portNativeId);    ArgValidator.checkFieldUriType(newNetworkId,Network.class,"network");    newNetwork=_dbClient.queryObject(Network.class,newNetworkId);    ArgValidator.checkEntity(newNetwork,newNetworkId,isIdEmbeddedInURL(newNetworkId));    if (newNetwork.getDiscovered()) {      if (false == newNetwork.retrieveEndpoints().contains(portNetworkId)) {        _log.info(String.format("Network does not contain " + "endpoint for port %s wwpn %s",storagePort.getPortName(),portNetworkId));      }    }  }  if ((currentNetwork == null && newNetwork == null) || (currentNetwork != null && newNetwork != null && currentNetworkId.equals(newNetworkId))) {    _log.info("The old and new Networks are the same, no change will be made.");    return false;  }  if (newNetwork != null) {    _log.info("Storage port {} will be assigned to network {}",portNativeId,newNetwork.getLabel());    updateNetworkEndpoint(newNetworkId,portNetworkId,NetworkEndpointParam.EndpointOp.add);    networkUpdated=true;  } else   if (currentNetwork != null) {    _log.info("Storage port {} will be removed from network {}",portNativeId,currentNetwork.getLabel());    updateNetworkEndpoint(currentNetworkId,portNetworkId,NetworkEndpointParam.EndpointOp.remove);    networkUpdated=true;  }  return networkUpdated;}  }
class C{  public static void main(String[] args){  String[] word={"Zero","One","Two","Three","Four","Five","Six","Seven","Eight","Nine","Ten","Eleven","Twelve","Thirteen","Fourteen","Fifteen","Sixteen","Seventeen","Eighteen","Nineteen","Twenty","Twenty-One","Twenty-Two","Twenty-Three","Twenty-Four","Twenty-Five","Twenty-Six","Twenty-Seven","Twenty-Eight","Twenty-Nine","Thirty","Thirty-One","Thirty-Two","Thirty-Three","Thirty-Four","Thirty-Five","Thirty-Six","Thirty-Seven","Thirty-Eight","Thirty-Nine"};  DTMStringPool pool=new DTMStringPool();  System.out.println("If no complaints are printed below, we passed initial test.");  for (int pass=0; pass <= 1; ++pass) {    int i;    for (i=0; i < word.length; ++i) {      int j=pool.stringToIndex(word[i]);      if (j != i)       System.out.println("\tMismatch populating pool: assigned " + j + " for create "+ i);    }    for (i=0; i < word.length; ++i) {      int j=pool.stringToIndex(word[i]);      if (j != i)       System.out.println("\tMismatch in stringToIndex: returned " + j + " for lookup "+ i);    }    for (i=0; i < word.length; ++i) {      String w=pool.indexToString(i);      if (!word[i].equals(w))       System.out.println("\tMismatch in indexToString: returned" + w + " for lookup "+ i);    }    pool.removeAllElements();    System.out.println("\nPass " + pass + " complete\n");  }}  }
class C{  @Override public String toString(){  String result=null;  int year=this.get(YEAR);  int month=this.get(MONTH) + 1;  int day=this.get(DAY_OF_MONTH);  int hour=this.get(HOUR_OF_DAY);  int minute=this.get(MINUTE);  int second=this.get(SECOND);  int millisecond=this.get(MILLISECOND);  result=String.format("%04d%02d%02d%02d%02d%02d%03d",year,month,day,hour,minute,second,millisecond);  return result;}  }
class C{  public void encodeBuffer(InputStream inStream,OutputStream outStream) throws IOException {  int j;  int numBytes;  byte tmpbuffer[]=new byte[bytesPerLine()];  encodeBufferPrefix(outStream);  while (true) {    numBytes=readFully(inStream,tmpbuffer);    if (numBytes == 0) {      break;    }    encodeLinePrefix(outStream,numBytes);    for (j=0; j < numBytes; j+=bytesPerAtom()) {      if ((j + bytesPerAtom()) <= numBytes) {        encodeAtom(outStream,tmpbuffer,j,bytesPerAtom());      } else {        encodeAtom(outStream,tmpbuffer,j,(numBytes) - j);      }    }    encodeLineSuffix(outStream);    if (numBytes < bytesPerLine()) {      break;    }  }  encodeBufferSuffix(outStream);}  }
class C{  public static void assertSame(Object expected,Object actual){  if (expected == actual) {    return;  }  failNotSame(null,expected,actual);}  }
class C{  protected void insertTrackPoint(Location location){  insertLocation(location);  if (trackData.track.getStartId() == -1L) {    flushLocations(trackData);  }}  }
class C{  public void mouseClicked(MouseEvent e){  if (CLogMgt.isLevelFinest())   log.finest("" + this + " - "+ e);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public boolean registerScheme(URIConverter converter){  return registerScheme(converter,classLoader);}  }
class C{  public AsyncResult TestStackAsync(TestStackRequest req){  return channel.serviceRequestAsync(req);}  }
class C{  private void processRegister(RegisterSpec result,EscapeSet escSet){  ArrayList<RegisterSpec> regWorklist=new ArrayList<RegisterSpec>();  regWorklist.add(result);  while (!regWorklist.isEmpty()) {    int listSize=regWorklist.size() - 1;    RegisterSpec def=regWorklist.remove(listSize);    List<SsaInsn> useList=ssaMeth.getUseListForRegister(def.getReg());    for (    SsaInsn use : useList) {      Rop useOpcode=use.getOpcode();      if (useOpcode == null) {        processPhiUse(use,escSet,regWorklist);      } else {        processUse(def,use,escSet,regWorklist);      }    }  }}  }
class C{  public AppPackage(File file,boolean processAppDirectory) throws IOException, ZipException {  this(file,null,processAppDirectory);}  }
class C{  public static String convertU8ToHexString(char u8){  return Integer.toHexString(u8);}  }
class C{  public boolean doYesNoDialog(String title,String question){  ConfirmDialog confirm=new ConfirmDialog(frame,title,question);  confirm.setVisible(true);  return confirm.getAnswer();}  }
class C{  public Boolean isWriteThrough(){  return writeThrough;}  }
class C{  public Node appendChild(Node child){  child.detach();  child.setParentNode(this);  if (firstChild == null) {    firstChild=child;  } else {    lastChild.setNextSibling(child);  }  lastChild=child;  return child;}  }
class C{  private static ArrayList<Room> findOneToOneRoomList(final MXSession aSession,final String aSearchedUserId){  ArrayList<Room> listRetValue=new ArrayList<>();  List<RoomMember> roomMembersList;  String userId0, userId1;  if ((null != aSession) && (null != aSearchedUserId)) {    Collection<Room> roomsList=aSession.getDataHandler().getStore().getRooms();    for (    Room room : roomsList) {      roomMembersList=(List<RoomMember>)room.getJoinedMembers();      if ((null != roomMembersList) && (ROOM_SIZE_ONE_TO_ONE == roomMembersList.size())) {        userId0=roomMembersList.get(0).getUserId();        userId1=roomMembersList.get(1).getUserId();        if (userId0.equals(aSearchedUserId) || userId1.equals(aSearchedUserId)) {          listRetValue.add(room);        }      }    }  }  return listRetValue;}  }
class C{  public boolean remove(Object key){  OMGraphic graphic=graphicHash.remove(key);  return super.remove(graphic);}  }
class C{  private String listDirectory(InternalManagedEntity entity,String dir){  ManagedEntityConfig config=entity.getEntityConfig();  String listFile=pathIsWindows(config.getProductDirectory()) ? "dir " : "ls ";  String command=arrangeRemoteCommand(entity,listFile + dir);  return execute(command,entity);}  }
class C{  public static File createTempPath(String path) throws IOException {  String sep=File.separator;  File tempDir=new File(System.getProperty("java.io.tmpdir") + sep + path);  if (!tempDir.exists())   if (!tempDir.mkdirs()) {    boolean status=tempDir.delete();    throw new IOException("creation failed for dir " + tempDir + "status = "+ status);  }  tempDir.deleteOnExit();  return tempDir;}  }
class C{  public Object parse(Reader in,ContainerFactory containerFactory) throws IOException, ParseException {  reset(in);  LinkedList statusStack=new LinkedList();  LinkedList valueStack=new LinkedList();  try {    do {      nextToken();switch (status) {case S_INIT:switch (token.type) {case Yytoken.TYPE_VALUE:          status=S_IN_FINISHED_VALUE;        statusStack.addFirst(new Integer(status));      valueStack.addFirst(token.value);    break;case Yytoken.TYPE_LEFT_BRACE:  status=S_IN_OBJECT;statusStack.addFirst(new Integer(status));valueStack.addFirst(createObjectContainer(containerFactory));break;case Yytoken.TYPE_LEFT_SQUARE:status=S_IN_ARRAY;statusStack.addFirst(new Integer(status));valueStack.addFirst(createArrayContainer(containerFactory));break;default :status=S_IN_ERROR;}break;case S_IN_FINISHED_VALUE:if (token.type == Yytoken.TYPE_EOF) return valueStack.removeFirst(); else throw new ParseException(getPosition(),ParseException.ERROR_UNEXPECTED_TOKEN,token);case S_IN_OBJECT:switch (token.type) {case Yytoken.TYPE_COMMA:break;case Yytoken.TYPE_VALUE:if (token.value instanceof String) {String key=(String)token.value;valueStack.addFirst(key);status=S_PASSED_PAIR_KEY;statusStack.addFirst(new Integer(status));} else {status=S_IN_ERROR;}break;case Yytoken.TYPE_RIGHT_BRACE:if (valueStack.size() > 1) {statusStack.removeFirst();valueStack.removeFirst();status=peekStatus(statusStack);} else {status=S_IN_FINISHED_VALUE;}break;default :status=S_IN_ERROR;break;}break;case S_PASSED_PAIR_KEY:switch (token.type) {case Yytoken.TYPE_COLON:break;case Yytoken.TYPE_VALUE:statusStack.removeFirst();String key=(String)valueStack.removeFirst();Map parent=(Map)valueStack.getFirst();parent.put(key,token.value);status=peekStatus(statusStack);break;case Yytoken.TYPE_LEFT_SQUARE:statusStack.removeFirst();key=(String)valueStack.removeFirst();parent=(Map)valueStack.getFirst();List newArray=createArrayContainer(containerFactory);parent.put(key,newArray);status=S_IN_ARRAY;statusStack.addFirst(new Integer(status));valueStack.addFirst(newArray);break;case Yytoken.TYPE_LEFT_BRACE:statusStack.removeFirst();key=(String)valueStack.removeFirst();parent=(Map)valueStack.getFirst();Map newObject=createObjectContainer(containerFactory);parent.put(key,newObject);status=S_IN_OBJECT;statusStack.addFirst(new Integer(status));valueStack.addFirst(newObject);break;default :status=S_IN_ERROR;}break;case S_IN_ARRAY:switch (token.type) {case Yytoken.TYPE_COMMA:break;case Yytoken.TYPE_VALUE:List val=(List)valueStack.getFirst();val.add(token.value);break;case Yytoken.TYPE_RIGHT_SQUARE:if (valueStack.size() > 1) {statusStack.removeFirst();valueStack.removeFirst();status=peekStatus(statusStack);} else {status=S_IN_FINISHED_VALUE;}break;case Yytoken.TYPE_LEFT_BRACE:val=(List)valueStack.getFirst();Map newObject=createObjectContainer(containerFactory);val.add(newObject);status=S_IN_OBJECT;statusStack.addFirst(new Integer(status));valueStack.addFirst(newObject);break;case Yytoken.TYPE_LEFT_SQUARE:val=(List)valueStack.getFirst();List newArray=createArrayContainer(containerFactory);val.add(newArray);status=S_IN_ARRAY;statusStack.addFirst(new Integer(status));valueStack.addFirst(newArray);break;default :status=S_IN_ERROR;}break;case S_IN_ERROR:throw new ParseException(getPosition(),ParseException.ERROR_UNEXPECTED_TOKEN,token);}if (status == S_IN_ERROR) {throw new ParseException(getPosition(),ParseException.ERROR_UNEXPECTED_TOKEN,token);}} while (token.type != Yytoken.TYPE_EOF);} catch (IOException ie) {throw ie;}throw new ParseException(getPosition(),ParseException.ERROR_UNEXPECTED_TOKEN,token);}  }
class C{  public static byte[] makeRand() throws NoSuchAlgorithmException {  byte[] digest=null;  byte[] r=new byte[HASH_SIZE_BYTES];  try {    random.nextBytes(r);    digest=digest(r);  }  finally {    return digest(r);  }}  }
class C{  public double nextDouble(){  return nextDouble(alpha,lambda);}  }
class C{  public static int compareSamRecords(SAMRecord a,SAMRecord b){  final int thisRef=a.getReferenceIndex() & 0x7FFFFFFF;  final int thatRef=b.getReferenceIndex() & 0x7FFFFFFF;  final int rc=Integer.compare(thisRef,thatRef);  if (rc != 0) {    return rc;  }  final int ac=Integer.compare(a.getAlignmentStart(),b.getAlignmentStart());  if (ac != 0) {    return ac;  }  return Integer.compare(reverse3bits(a.getFlags() ^ 3),reverse3bits(b.getFlags() ^ 3));}  }
class C{  public IterativeControlsPanel(final NetworkPanel networkPanel,final IterableTrainer trainer){  this.trainer=trainer;  this.panel=networkPanel;  init();}  }
class C{  public static final double labelCardinality(int Y[][],int j){  int N=Y.length;  int L=Y[0].length;  double sum=0.0;  for (int i=0; i < N; i++) {    sum+=Y[i][j];  }  return (double)sum / (double)N;}  }
class C{  public Movie(){  super();}  }
class C{  final public int copyAll(final ByteArrayBuffer src){  final int n=src.limit;  if (n > 0) {    put(src.buf,0,n);  }  return n;}  }
class C{  public HashMap<String,String> objectNamed(String objectName){  for (  HashMap<String,String> object : objects) {    if (object.get("name").equals(objectName))     return object;  }  return null;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public TMCoord(Angle latitude,Angle longitude,double easting,double northing,Angle originLatitude,Angle centralMeridian,double falseEasting,double falseNorthing,double scale){  if (latitude == null || longitude == null) {    String message=Logging.getMessage("nullValue.LatitudeOrLongitudeIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (originLatitude == null || centralMeridian == null) {    String message=Logging.getMessage("nullValue.AngleIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.latitude=latitude;  this.longitude=longitude;  this.easting=easting;  this.northing=northing;  this.originLatitude=originLatitude;  this.centralMeridian=centralMeridian;  this.falseEasting=falseEasting;  this.falseNorthing=falseNorthing;  this.scale=scale;}  }
class C{  private void animatePropertyBy(int constantName,float startValue,float byValue){  if (mAnimatorMap.size() > 0) {    Animator animatorToCancel=null;    Set<Animator> animatorSet=mAnimatorMap.keySet();    for (    Animator runningAnim : animatorSet) {      PropertyBundle bundle=mAnimatorMap.get(runningAnim);      if (bundle.cancel(constantName)) {        if (bundle.mPropertyMask == NONE) {          animatorToCancel=runningAnim;          break;        }      }    }    if (animatorToCancel != null) {      animatorToCancel.cancel();    }  }  NameValuesHolder nameValuePair=new NameValuesHolder(constantName,startValue,byValue);  mPendingAnimations.add(nameValuePair);  View v=mView.get();  if (v != null) {    v.removeCallbacks(mAnimationStarter);    v.post(mAnimationStarter);  }}  }
class C{  public PropertyMap(){  this.properties=LinkedHashMultimap.create();}  }
class C{  protected void endFontTag() throws IOException {  write(NEWLINE);  writeEndTag("</font>");  fontAttributes=null;}  }
class C{  static private byte[] toBytes(ASN1OctetString[] octs){  ByteArrayOutputStream bOut=new ByteArrayOutputStream();  for (int i=0; i != octs.length; i++) {    try {      DEROctetString o=(DEROctetString)octs[i];      bOut.write(o.getOctets());    } catch (    ClassCastException e) {      throw new IllegalArgumentException(octs[i].getClass().getName() + " found in input should only contain DEROctetString");    }catch (    IOException e) {      throw new IllegalArgumentException("exception converting octets " + e.toString());    }  }  return bOut.toByteArray();}  }
class C{  public void startDocument() throws SAXException {  try {    out.write("<?xml version='1.0'?>");  } catch (  IOException ioe) {    throw new SAXException(ioe);  }}  }
class C{  public HolderOfKeyConfig(Key privateKey,X509Certificate certificate,Provider securityProvider){  if (privateKey == null) {    log.error(INVALID_ARGUMENTS_ERR_MGS);    throw new IllegalArgumentException(INVALID_ARGUMENTS_ERR_MGS);  }  if (certificate.getPublicKey() instanceof RSAPublicKey) {    if (!(privateKey instanceof RSAPrivateKey) || !((RSAPrivateKey)privateKey).getModulus().equals(((RSAPublicKey)certificate.getPublicKey()).getModulus()))     throw new IllegalArgumentException("Certificate doesn't match with private key");  }  this.privateKey=privateKey;  this.certificate=certificate;  this.securityProvider=securityProvider;}  }
class C{  public void addSurpriseMemberForTesting(DistributedMember m,long birthTime){  if (logger.isDebugEnabled()) {    logger.debug("test hook is adding surprise member {} birthTime={}",m,birthTime);  }  latestViewWriteLock.lock();  try {    surpriseMembers.put((InternalDistributedMember)m,Long.valueOf(birthTime));  }  finally {    latestViewWriteLock.unlock();  }}  }
class C{  private RunQueueTask createTask(User user,String workspace,String projectName) throws NotFoundException, RunnerException {  RunQueueTask runQueueTask=mock(RunQueueTask.class);  RunRequest runRequest=mock(RunRequest.class);  doReturn(runRequest).when(runQueueTask).getRequest();  doReturn(user.getId()).when(runRequest).getUserId();  doReturn(workspace).when(runRequest).getWorkspace();  doReturn(projectName).when(runRequest).getProject();  ApplicationProcessDescriptor descriptor=mock(ApplicationProcessDescriptor.class);  doReturn(descriptor).when(runQueueTask).getDescriptor();  doReturn(workspace).when(descriptor).getWorkspace();  doReturn(projectName).when(descriptor).getProject();  return runQueueTask;}  }
class C{  private List<String> addCurrentTextToHistoryList(List<String> history){  String text=mSearchText.getText().toString().trim();  if (TextUtils.isEmpty(text))   return history;  history.remove(text);  history.add(0,text);  if (history.size() > SEARCH_HISTORY_MAX_ENTRIES) {    history.remove(history.size() - 1);  }  return history;}  }
class C{  public static boolean containsSame(Collection<? extends AnnotationMirror> c,AnnotationMirror anno){  for (  AnnotationMirror an : c) {    if (AnnotationUtils.areSame(an,anno)) {      return true;    }  }  return false;}  }
class C{  public static int delete(ContentResolver resolver,String id){  if (id == null) {    return 0;  }  return resolver.delete(Uri.withAppendedPath(Contacts.People.CONTENT_URI,id),null,null);}  }
class C{  @Ignore @Test public void test_DRPERSISTENCE_PGSPERSISTENCE_4NODES_2NODESDOWN_Validate_Receiver() throws Exception {  Integer lnPort=(Integer)vm0.invoke(null);  Integer nyPort=(Integer)vm1.invoke(null);  createCacheInVMs(nyPort,vm2,vm3);  createReceiverInVMs(vm2,vm3);  createCacheInVMs(lnPort,vm4,vm5,vm6,vm7);  String diskStore1=(String)vm4.invoke(null);  String diskStore2=(String)vm5.invoke(null);  String diskStore3=(String)vm6.invoke(null);  String diskStore4=(String)vm7.invoke(null);  LogWriterUtils.getLogWriter().info("The DS are: " + diskStore1 + ","+ diskStore2+ ","+ diskStore3+ ","+ diskStore4);  vm4.invoke(null);  vm5.invoke(null);  vm6.invoke(null);  vm7.invoke(null);  startSenderInVMs("ln",vm4,vm5,vm6,vm7);  vm2.invoke(null);  vm3.invoke(null);  vm4.invoke(null);  vm5.invoke(null);  vm6.invoke(null);  vm7.invoke(null);  Thread.sleep(60000);{    AsyncInvocation inv1=vm7.invokeAsync(null);    Thread.sleep(1000);    AsyncInvocation inv2=vm4.invokeAsync(null);    Thread.sleep(2000);    AsyncInvocation inv3=vm6.invokeAsync(null);    Thread.sleep(1500);    AsyncInvocation inv4=vm5.invokeAsync(null);    try {      inv1.join();      inv2.join();      inv3.join();      inv4.join();    } catch (    Exception e) {      Assert.fail("UnExpected Exception",e);    }  }  vm4.invoke(null);  vm5.invoke(null);  LogWriterUtils.getLogWriter().info("Created back the cache");  vm4.invoke(null);  vm5.invoke(null);  LogWriterUtils.getLogWriter().info("Created the senders back from the disk store.");  AsyncInvocation inv1=vm4.invokeAsync(null);  AsyncInvocation inv2=vm5.invokeAsync(null);  AsyncInvocation inv3=vm6.invokeAsync(null);  try {    inv1.join();    inv2.join();  } catch (  InterruptedException e) {    e.printStackTrace();    fail();  }  startSenderInVMsAsync("ln",vm4,vm5);  LogWriterUtils.getLogWriter().info("Waiting for senders running.");  vm4.invoke(null);  vm6.invoke(null);  vm7.invoke(null);  vm2.invoke(null);}  }
class C{  public void firePropertyChange(String propertyName,char oldValue,char newValue){}  }
class C{  private static float CallFloatMethodV(JNIEnvironment env,int objJREF,int methodID,Address argAddress) throws Exception {  if (traceJNI)   VM.sysWrite("JNI called: CallFloatMethodV  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object obj=env.getJNIRef(objJREF);    Object returnObj=JNIHelpers.invokeWithVarArg(obj,methodID,argAddress,TypeReference.Float,false);    return Reflection.unwrapFloat(returnObj);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  public static void testASCII() throws Exception {  NSObject x=PropertyListParser.parse(new File("test-files/test1-ascii.plist"));  NSDictionary d=(NSDictionary)x;  assertTrue(d.count() == 5);  assertTrue(d.objectForKey("keyA").toString().equals("valueA"));  assertTrue(d.objectForKey("key&B").toString().equals("value&B"));  assertTrue(((NSDate)d.objectForKey("date")).getDate().equals(new Date(1322472090000L)));  assertTrue(Arrays.equals(((NSData)d.objectForKey("data")).bytes(),new byte[]{0x00,0x00,0x00,0x04,0x10,0x41,0x08,0x20,(byte)0x82}));  NSArray a=(NSArray)d.objectForKey("array");  assertTrue(a.count() == 4);  assertTrue(a.objectAtIndex(0).equals(new NSString("YES")));  assertTrue(a.objectAtIndex(1).equals(new NSString("NO")));  assertTrue(a.objectAtIndex(2).equals(new NSString("87")));  assertTrue(a.objectAtIndex(3).equals(new NSString("3.14159")));}  }
class C{  public void resume(){  if (!isPaused)   return;  setAnimationInterval(oldAnimationInterval_);  lastUpdate_=System.currentTimeMillis();  isPaused=false;  dt=0;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  long stop=getLong(stack);  long start=getLong(stack);  return Seeker.getInstance().getScheduledAiringsForSource(getString(stack),start,stop);}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getProgram_();}  }
class C{  protected String[] processCommandLine(String[] args){  if (args.length == 0)   return args;  int[] configArgs=new int[args.length];  configArgs[0]=-1;  int configArgIndex=0;  for (int i=0; i < args.length; i++) {    boolean found=false;    if (args[i].equalsIgnoreCase(DEBUG)) {      debug=true;      continue;    }    if (args[i].equalsIgnoreCase(NOSPLASH)) {      splashDown=true;      found=true;    }    if (args[i].equalsIgnoreCase(NOEXIT)) {      System.getProperties().put(PROP_NOSHUTDOWN,"true");      found=true;    }    if (args[i].equalsIgnoreCase(APPEND_VMARGS) || args[i].equalsIgnoreCase(OVERRIDE_VMARGS)) {      found=true;    }    if (args[i].equalsIgnoreCase(INITIALIZE)) {      initialize=true;      continue;    }    if (args[i].equalsIgnoreCase(DEV) && ((i + 1 == args.length) || ((i + 1 < args.length) && (args[i + 1].startsWith("-"))))) {      inDevelopmentMode=true;      continue;    }    if (args[i].equalsIgnoreCase(SHOWSPLASH)) {      showSplash=true;      found=true;      if (i + 1 < args.length && !args[i + 1].startsWith("-")) {        configArgs[configArgIndex++]=i++;        splashLocation=args[i];      }    }    if (args[i].equalsIgnoreCase(PROTECT)) {      found=true;      configArgs[configArgIndex++]=i++;      if (args[i].equalsIgnoreCase(PROTECT_MASTER) || args[i].equalsIgnoreCase(PROTECT_BASE)) {        protectBase=true;      }    }    if (found) {      configArgs[configArgIndex++]=i;      continue;    }    if (args[i].equalsIgnoreCase(VMARGS)) {      args[i]=null;      i++;      vmargs=new String[args.length - i];      for (int j=0; i < args.length; i++) {        vmargs[j++]=args[i];        args[i]=null;      }      continue;    }    if (i == args.length - 1 || args[i + 1].startsWith("-"))     continue;    String arg=args[++i];    if (args[i - 1].equalsIgnoreCase(DEV)) {      inDevelopmentMode=true;      devClassPathProps=processDevArg(arg);      if (devClassPathProps != null) {        devClassPath=devClassPathProps.getProperty(OSGI);        if (devClassPath == null)         devClassPath=devClassPathProps.getProperty("*");      }      continue;    }    if (args[i - 1].equalsIgnoreCase(FRAMEWORK)) {      framework=arg;      found=true;    }    if (args[i - 1].equalsIgnoreCase(OS)) {      os=arg;      continue;    }    if (args[i - 1].equalsIgnoreCase(WS)) {      ws=arg;      continue;    }    if (args[i - 1].equalsIgnoreCase(ARCH)) {      arch=arg;      continue;    }    if (args[i - 1].equalsIgnoreCase(INSTALL)) {      System.getProperties().put(PROP_INSTALL_AREA,arg);      found=true;    }    if (args[i - 1].equalsIgnoreCase(CONFIGURATION)) {      System.getProperties().put(PROP_CONFIG_AREA,arg);      found=true;    }    if (args[i - 1].equalsIgnoreCase(EXITDATA)) {      exitData=arg;      found=true;    }    if (args[i - 1].equalsIgnoreCase(NAME)) {      System.getProperties().put(PROP_LAUNCHER_NAME,arg);      found=true;    }    if (args[i - 1].equalsIgnoreCase(STARTUP)) {      found=true;    }    if (args[i - 1].equalsIgnoreCase(LAUNCHER)) {      System.getProperties().put(PROP_LAUNCHER,arg);      found=true;    }    if (args[i - 1].equalsIgnoreCase(LIBRARY)) {      library=arg;      found=true;    }    if (args[i - 1].equalsIgnoreCase(ENDSPLASH)) {      endSplash=arg;      found=true;    }    if (args[i - 1].equalsIgnoreCase(VM)) {      vm=arg;      found=true;    }    if (args[i - 1].equalsIgnoreCase(NL)) {      System.getProperties().put(PROP_NL,arg);      found=true;    }    if (found) {      configArgs[configArgIndex++]=i - 1;      configArgs[configArgIndex++]=i;    }  }  String[] passThruArgs=new String[args.length - configArgIndex - (vmargs == null ? 0 : vmargs.length + 1)];  configArgIndex=0;  int j=0;  for (int i=0; i < args.length; i++) {    if (i == configArgs[configArgIndex])     configArgIndex++; else     if (args[i] != null)     passThruArgs[j++]=args[i];  }  return passThruArgs;}  }
class C{  public static String removeSubstring(String inString,String substring){  StringBuffer result=new StringBuffer();  int oldLoc=0, loc=0;  while ((loc=inString.indexOf(substring,oldLoc)) != -1) {    result.append(inString.substring(oldLoc,loc));    oldLoc=loc + substring.length();  }  result.append(inString.substring(oldLoc));  return result.toString();}  }
class C{  private void appendTimeZone(StringBuffer buffer,int count,boolean generalTimeZone){  if (generalTimeZone) {    TimeZone tz=calendar.getTimeZone();    boolean daylight=(calendar.get(Calendar.DST_OFFSET) != 0);    int style=count < 4 ? TimeZone.SHORT : TimeZone.LONG;    if (!formatData.customZoneStrings) {      buffer.append(tz.getDisplayName(daylight,style,formatData.locale));      return;    }    String custom=TimeZoneNames.getDisplayName(formatData.zoneStrings,tz.getID(),daylight,style);    if (custom != null) {      buffer.append(custom);      return;    }  }  appendNumericTimeZone(buffer,count,generalTimeZone);}  }
class C{  public static String int2Str(int i,boolean bShowZero,boolean bShowGroup){  if (!bShowZero && i == 0) {    return "";  } else {    NumberFormat nf=NumberFormat.getInstance();    nf.setGroupingUsed(bShowGroup);    nf.setMinimumIntegerDigits(1);    nf.setMaximumFractionDigits(0);    nf.setMinimumFractionDigits(0);    return nf.format(i);  }}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:41.984 -0500",hash_original_method="5088685B92B0533111B1789635B9B452",hash_generated_method="26BE9D5EBA83E15A05E65873FF8E9852") public void close() throws IOException {  if (!this.closed) {    this.closed=true;    this.out.flush();  }}  }
class C{  public boolean isSSL(){  return _stream.isSSL();}  }
class C{  public boolean isStrict(){  return strict;}  }
class C{  public static double[] v3Cross(double[] a,double[] b){  return new double[]{a[1] * b[2] - a[2] * b[1],a[2] * b[0] - a[0] * b[2],a[0] * b[1] - a[1] * b[0]};}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public void code(Environment env,Assembler asm) throws ClassNotFound {  throw new CompilerError("code");}  }
class C{  public List<ExportGroupRestRep> exportVolumes(){  return exportBlockResources(uris(volumeIds));}  }
class C{  public void tick(float dt){  if (timeScale_ != 1.0f)   dt*=timeScale_;  currentTargetSalvaged=false;synchronized (updatesNeg) {    int len=updatesNeg.size();    for (int i=0; i < len; i++) {      tListEntry e=updatesNeg.get(i);      currentEntry=e;      if (!e.paused) {        if (e.callback != null) {          e.callback.update(dt);        } else {          try {            e.impMethod.invoke(e.target,dt);          } catch (          Exception e1) {            e1.printStackTrace();          }        }        if (currentTargetSalvaged) {          updatesNeg.remove(i);          i--;          len--;          currentTargetSalvaged=false;        }      }    }    currentEntry=null;  }synchronized (updates0) {    int len=updates0.size();    for (int i=0; i < len; ++i) {      tListEntry e=updates0.get(i);      currentEntry=e;      if (!e.paused) {        if (e.callback != null) {          e.callback.update(dt);        } else {          try {            e.impMethod.invoke(e.target,dt);          } catch (          Exception e1) {            e1.printStackTrace();          }        }        if (currentTargetSalvaged) {          updates0.remove(i);          i--;          len--;          currentTargetSalvaged=false;        }      }    }    currentEntry=null;  }synchronized (updatesPos) {    int len=updatesPos.size();    for (int i=0; i < len; i++) {      tListEntry e=updatesPos.get(i);      currentEntry=e;      if (!e.paused) {        if (e.callback != null) {          e.callback.update(dt);        } else {          try {            e.impMethod.invoke(e.target,dt);          } catch (          Exception e1) {            e1.printStackTrace();          }        }        if (currentTargetSalvaged) {          updatesPos.remove(i);          i--;          len--;          currentTargetSalvaged=false;        }      }    }    currentEntry=null;  }  for (ConcurrentArrayHashMap<Object,tHashSelectorEntry>.Entry e=hashForSelectors.firstValue(); e != null; e=hashForSelectors.nextValue(e)) {    tHashSelectorEntry elt=e.getValue();    currentTarget=elt;    currentTargetSalvaged=false;    if (!currentTarget.paused && elt.timers != null) {      for (elt.timerIndex=0; elt.timerIndex < elt.timers.size(); elt.timerIndex++) {        elt.currentTimer=elt.timers.get(elt.timerIndex);        elt.currentTimerSalvaged=false;        elt.currentTimer.update(dt);        if (elt.currentTimerSalvaged) {          elt.currentTimer=null;        }        elt.currentTimer=null;      }    }    if (currentTargetSalvaged && currentTarget.timers.isEmpty()) {      hashForSelectors.remove(elt.target);    }  }  currentTarget=null;}  }
class C{  private List<Rule> readConfigurationFile(String filename){  if (LOG.isInfoEnabled()) {    LOG.info("loading " + filename);  }  try {    FileReader reader=new FileReader(filename);    return readConfiguration(reader);  } catch (  Exception e) {    LOG.error("Error loading rules from '" + filename + "': "+ e);    return EMPTY_RULES;  }}  }
class C{  protected void childAllocation(int index,Rectangle alloc){  alloc.x+=getOffset(X_AXIS,index);  alloc.y+=getOffset(Y_AXIS,index);  alloc.width=getSpan(X_AXIS,index);  alloc.height=getSpan(Y_AXIS,index);}  }
class C{  private Object checkCast(Object value,Class type) throws SAXException {  if (!type.isInstance(value)) {    throw new SAXException("Expected type " + type + " got "+ value.getClass());  }  return value;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.N4_CLASSIFIER_DEFINITION__OWNED_MEMBERS_RAW:    getOwnedMembersRaw().clear();  return;}super.eUnset(featureID);}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  void write(Environment env,DataOutputStream out,ConstantPool tab) throws IOException {  if (field.isMethod()) {    if (field.getClassDefinition().isInterface()) {      out.writeByte(CONSTANT_INTERFACEMETHOD);    } else {      out.writeByte(CONSTANT_METHOD);    }  } else {    out.writeByte(CONSTANT_FIELD);  }  out.writeShort(tab.index(field.getClassDeclaration()));  out.writeShort(tab.index(nt));}  }
class C{  public Predicate(Word w){  this(w,null);}  }
class C{  public void renameEditorPanel(Editor panel){  if (panelsList.size() == 0) {    return;  }  for (int i=0; i < panelsList.size(); i++) {    Object o=panelsList.get(i);    if (o == panel) {      JCheckBoxMenuItem r=(JCheckBoxMenuItem)panelsSubMenu.getItem(i);      r.setText(panel.getTitle());      return;    }  }}  }
class C{  public static List<Token> recordToLBJTokens(TextAnnotation record){  List<Token> lbjTokens=new LinkedList<>();  List<List<String>> sentences=tokensAsStrings(record.getView(ViewNames.TOKENS).getConstituents(),record.getView(ViewNames.SENTENCE).getConstituents(),record.getText());  List<Constituent> tags=null;  if (record.hasView(ViewNames.POS))   tags=record.getView(ViewNames.POS).getConstituents();  int tagIndex=0;  for (  List<String> sentence : sentences) {    boolean opendblquote=true;    Word wprevious=null;    Token tprevious=null;    for (    String token : sentence) {      if (token.equals("\"")) {        token=opendblquote ? "``" : "''";        opendblquote=!opendblquote;      } else       if (token.equals("(")) {        token="-LRB-";      } else       if (token.equals(")")) {        token="-RRB-";      } else       if (token.equals("{")) {        token="-LCB-";      } else       if (token.equals("}")) {        token="-RCB-";      } else       if (token.equals("[")) {        token="-LSB-";      } else       if (token.equals("]")) {        token="-RSB-";      }      Word wcurrent=new Word(token,wprevious);      if (null != tags) {        Constituent tag=tags.get(tagIndex++);        wcurrent.partOfSpeech=tag.getLabel();      }      Token tcurrent=new Token(wcurrent,tprevious,"");      lbjTokens.add(tcurrent);      if (tprevious != null) {        tprevious.next=tcurrent;      }      wprevious=wcurrent;      tprevious=tcurrent;    }  }  return lbjTokens;}  }
class C{  @Override public Serializable saveState(){  return null;}  }
class C{  @Override public void draw(Graphics2D g){}  }
class C{  private void add(String text,Text textNode){  int startIndex=builder.length();  builder.append(text);  int endIndex=builder.length();  textRuns.add(new TextRun(textNode,startIndex,endIndex));}  }
class C{  public static TempPath createDirectory(Path dir) throws IOException {  return wrap(Files.createTempDirectory(dir,PREFIX));}  }
class C{  private JNIWriter(Context context){  context.put(jniWriterKey,this);  fileManager=context.get(JavaFileManager.class);  log=Log.instance(context);  Options options=Options.instance(context);  verbose=options.isSet(VERBOSE);  checkAll=options.isSet("javah:full");  this.context=context;  syms=Symtab.instance(context);  lineSep=System.getProperty("line.separator");}  }
class C{  @Override public boolean equals(final Object obj){  if (obj instanceof MutableInt) {    return value == ((MutableInt)obj).intValue();  }  return false;}  }
class C{  @Override public int bulkInsertCharacters(Uri uri,ContentValues[] cvsArray){  int returnCount=0;synchronized (this) {    for (    ContentValues cvs : cvsArray) {      if (cvs.containsKey(CharacterEntry.COLUMN_NAME)) {        CharacterRecord rec=new CharacterRecord(cvs.getAsString(CharacterEntry.COLUMN_NAME),cvs.getAsString(CharacterEntry.COLUMN_RACE));        mCharacterMap.put(rec.getId(),rec);        returnCount++;      } else       throw new RuntimeException("Failed to insert row into " + uri);    }  }  return returnCount;}  }
class C{  public static void showErrorMessage(String msg){  showErrorMessage(msg,3500);}  }
class C{  public static BufferedImage createCompatibleImage(BufferedImage image,int width,int height){  return getGraphicsConfiguration().createCompatibleImage(width,height,image.getTransparency());}  }
class C{  @Bean @ConditionalOnProperty(name="lemon.enabled.json-prefix",matchIfMissing=true) public MappingJackson2HttpMessageConverter mappingJackson2HttpMessageConverter(){  MappingJackson2HttpMessageConverter converter=new MappingJackson2HttpMessageConverter();  converter.setJsonPrefix(JSON_PREFIX);  log.info("Configuring JSON vulnerability prefix ...");  return converter;}  }
class C{  @Override public Boolean isTraversable(File f){  return null;}  }
class C{  private void createVisibleVariables() throws AbsentInformationException {  if (visibleVariables == null) {    List<LocalVariable> allVariables=location.method().variables();    Map<String,LocalVariable> map=new HashMap<String,LocalVariable>(allVariables.size());    for (    LocalVariable variable : allVariables) {      String name=variable.name();      if (variable.isVisible(this)) {        LocalVariable existing=map.get(name);        if ((existing == null) || ((LocalVariableImpl)variable).hides(existing)) {          map.put(name,variable);        }      }    }    visibleVariables=map;  }}  }
class C{  public static double[] enuToECF(final double x,final double y,final double z,double centerLon,double centerLat,final double centerAlt,double[] ecf){  if (ecf == null) {    ecf=new double[3];  }  double[][] phi=createTransposedPhiTransform(centerLon,centerLat,null);  double[] ecfOrigin=llaToECF(centerLon,centerLat,centerAlt,null);  ecf[0]=(phi[0][0] * x + phi[0][1] * y + phi[0][2] * z) + ecfOrigin[0];  ecf[1]=(phi[1][0] * x + phi[1][1] * y + phi[1][2] * z) + ecfOrigin[1];  ecf[2]=(phi[2][0] * x + phi[2][1] * y + phi[2][2] * z) + ecfOrigin[2];  return ecf;}  }
class C{  public UserExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  public void toEPL(StringWriter writer){  writer.append("create");  if (constant) {    writer.append(" constant");  }  writer.append(" variable ");  if (variableType != null) {    writer.append(variableType);    if (array) {      if (arrayOfPrimitive) {        writer.append("[primitive]");      } else {        writer.append("[]");      }    }    writer.append(" ");  }  writer.append(variableName);  if (optionalAssignment != null) {    writer.append(" = ");    optionalAssignment.toEPL(writer,ExpressionPrecedenceEnum.MINIMUM);  }}  }
class C{  public void diff_cleanupSemantic(LinkedList<Diff> diffs){  if (diffs.isEmpty()) {    return;  }  boolean changes=false;  Stack<Diff> equalities=new Stack<Diff>();  String lastequality=null;  ListIterator<Diff> pointer=diffs.listIterator();  int length_insertions1=0;  int length_deletions1=0;  int length_insertions2=0;  int length_deletions2=0;  Diff thisDiff=pointer.next();  while (thisDiff != null) {    if (thisDiff.operation == Operation.EQUAL) {      equalities.push(thisDiff);      length_insertions1=length_insertions2;      length_deletions1=length_deletions2;      length_insertions2=0;      length_deletions2=0;      lastequality=thisDiff.text;    } else {      if (thisDiff.operation == Operation.INSERT) {        length_insertions2+=thisDiff.text.length();      } else {        length_deletions2+=thisDiff.text.length();      }      if (lastequality != null && (lastequality.length() <= Math.max(length_insertions1,length_deletions1)) && (lastequality.length() <= Math.max(length_insertions2,length_deletions2))) {        while (thisDiff != equalities.lastElement()) {          thisDiff=pointer.previous();        }        pointer.next();        pointer.set(new Diff(Operation.DELETE,lastequality));        pointer.add(new Diff(Operation.INSERT,lastequality));        equalities.pop();        if (!equalities.empty()) {          equalities.pop();        }        if (equalities.empty()) {          while (pointer.hasPrevious()) {            pointer.previous();          }        } else {          thisDiff=equalities.lastElement();          while (thisDiff != pointer.previous()) {          }        }        length_insertions1=0;        length_insertions2=0;        length_deletions1=0;        length_deletions2=0;        lastequality=null;        changes=true;      }    }    thisDiff=pointer.hasNext() ? pointer.next() : null;  }  if (changes) {    diff_cleanupMerge(diffs);  }  diff_cleanupSemanticLossless(diffs);  pointer=diffs.listIterator();  Diff prevDiff=null;  thisDiff=null;  if (pointer.hasNext()) {    prevDiff=pointer.next();    if (pointer.hasNext()) {      thisDiff=pointer.next();    }  }  while (thisDiff != null) {    if (prevDiff.operation == Operation.DELETE && thisDiff.operation == Operation.INSERT) {      String deletion=prevDiff.text;      String insertion=thisDiff.text;      int overlap_length1=this.diff_commonOverlap(deletion,insertion);      int overlap_length2=this.diff_commonOverlap(insertion,deletion);      if (overlap_length1 >= overlap_length2) {        if (overlap_length1 >= deletion.length() / 2.0 || overlap_length1 >= insertion.length() / 2.0) {          pointer.previous();          pointer.add(new Diff(Operation.EQUAL,insertion.substring(0,overlap_length1)));          prevDiff.text=deletion.substring(0,deletion.length() - overlap_length1);          thisDiff.text=insertion.substring(overlap_length1);        }      } else {        if (overlap_length2 >= deletion.length() / 2.0 || overlap_length2 >= insertion.length() / 2.0) {          pointer.previous();          pointer.add(new Diff(Operation.EQUAL,deletion.substring(0,overlap_length2)));          prevDiff.operation=Operation.INSERT;          prevDiff.text=insertion.substring(0,insertion.length() - overlap_length2);          thisDiff.operation=Operation.DELETE;          thisDiff.text=deletion.substring(overlap_length2);        }      }      thisDiff=pointer.hasNext() ? pointer.next() : null;    }    prevDiff=thisDiff;    thisDiff=pointer.hasNext() ? pointer.next() : null;  }}  }
class C{  public static Map<String,String> convertToMap(String json){  try {    ObjectMapper om=new ObjectMapper();    return om.readValue(json,new TypeReference<Map<String,String>>(){    });  } catch (  IOException e) {    return null;  }}  }
class C{  @Override public void onTaskFailed(TaskExecution taskExecution,Throwable throwable){  executeTaskListenerWithThrowable(taskExecution,throwable,failedTaskInstances.keySet(),failedTaskInstances);}  }
class C{  private void checkConnectionCapabilityForMethod(Method method) throws Throwable {  if (this.masterHosts.isEmpty() && this.slaveHosts.isEmpty() && !ReplicationConnection.class.isAssignableFrom(method.getDeclaringClass())) {    throw SQLError.createSQLException(Messages.getString("ReplicationConnectionProxy.noHostsInconsistentState"),SQLError.SQL_STATE_INVALID_TRANSACTION_STATE,MysqlErrorNumbers.ERROR_CODE_REPLICATION_CONNECTION_WITH_NO_HOSTS,true,null);  }}  }
class C{  @Override public String toString(){  return String.format("Trace '%s' [%d events]",getName(),trace.getEventCount());}  }
class C{  public byte[] read(final int offset){  final int length=(int)file.length() - offset;  InputStream in=null;  if (Cfg.DEBUG) {    Check.asserts(file != null," (read) Assert failed, null file");  }  if (length == 0) {    return null;  }  try {    in=new BufferedInputStream(new FileInputStream(file),length);    final byte[] buffer=new byte[length];    in.skip(offset);    in.read(buffer,0,length);    return buffer;  } catch (  final IOException e) {    if (Cfg.EXCEPTION) {      Check.log(e);    }    if (Cfg.DEBUG) {      Check.log(e);    }  } finally {    if (in != null) {      try {        in.close();      } catch (      final IOException e) {        if (Cfg.EXCEPTION) {          Check.log(e);        }        if (Cfg.DEBUG) {          Check.log(e);        }      }    }  }  return null;}  }
class C{  public FastAdapterDialog<Item> withPositiveButton(@StringRes int textRes,OnClickListener listener){  return withButton(BUTTON_POSITIVE,textRes,listener);}  }
class C{  private void paintBackground(Graphics graphics,JComponent button){  StyleUtil.fillBackground(style,graphics,0,0,button.getWidth(),button.getHeight());}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public void fireIndexedPropertyChange(String propertyName,int index,int oldValue,int newValue){  if (oldValue != newValue) {    fireIndexedPropertyChange(propertyName,index,Integer.valueOf(oldValue),Integer.valueOf(newValue));  }}  }
class C{  public void removePanListener(PanListener listener){  if (mPan != null) {    mPan.removePanListener(listener);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String s=getString(stack);  return (s == null) ? null : trimPronouns(s);}  }
class C{  public void block(Subnet subnet){  if (subnet == null) {    throw new IllegalArgumentException("Subnet can not be null");  }  blacklist.add(subnet);}  }
class C{  public static boolean isDelimiter(int c){switch (c) {case '(':case ')':case '<':case '>':case '[':case ']':case '{':case '}':case '/':case '%':    return true;default :  return false;}}  }
class C{  private void endArguments(){  if (argumentStack % 2 != 0) {    buf.append('>');  }  argumentStack/=2;}  }
class C{  @Override public boolean equals(Object object){  if (this == object) {    return true;  }  if (!(object instanceof DateFormatSymbols)) {    return false;  }  DateFormatSymbols rhs=(DateFormatSymbols)object;  return localPatternChars.equals(rhs.localPatternChars) && Arrays.equals(ampms,rhs.ampms) && Arrays.equals(eras,rhs.eras)&& Arrays.equals(months,rhs.months)&& Arrays.equals(shortMonths,rhs.shortMonths)&& Arrays.equals(shortWeekdays,rhs.shortWeekdays)&& Arrays.equals(weekdays,rhs.weekdays)&& timeZoneStringsEqual(this,rhs);}  }
class C{  public void sendMessageViaCloud(String sender,String recipient,String recipientName,String subject,String plainTextBody){  NetworkManager.getInstance().addToQueue(createMessage(sender,recipient,recipientName,subject,plainTextBody));}  }
class C{  private static byte[] readClass(final InputStream is) throws IOException {  if (is == null) {    throw new IOException("Class not found");  }  byte[] b=new byte[is.available()];  int len=0;  while (true) {    int n=is.read(b,len,b.length - len);    if (n == -1) {      if (len < b.length) {        byte[] c=new byte[len];        System.arraycopy(b,0,c,0,len);        b=c;      }      return b;    }    len+=n;    if (len == b.length) {      int last=is.read();      if (last < 0) {        return b;      }      byte[] c=new byte[b.length + 1000];      System.arraycopy(b,0,c,0,len);      c[len++]=(byte)last;      b=c;    }  }}  }
class C{  @Override public boolean isFactoryForType(Object object){  if (object == modelPackage) {    return true;  }  if (object instanceof EObject) {    return ((EObject)object).eClass().getEPackage() == modelPackage;  }  return false;}  }
class C{  public PageIterator(final BigqueryRequest<T> requestTemplate){  this.request=requestTemplate;}  }
class C{  private static JFreeChart createChart(CategoryDataset dataset){  JFreeChart chart=ChartFactory.createBarChart("Performance: JFreeSVG vs Batik",null,"Milliseconds",dataset);  chart.addSubtitle(new TextTitle("Time to generate 1000 charts in SVG " + "format (lower bars = better performance)"));  chart.setBackgroundPaint(Color.white);  CategoryPlot plot=(CategoryPlot)chart.getPlot();  NumberAxis rangeAxis=(NumberAxis)plot.getRangeAxis();  rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());  BarRenderer renderer=(BarRenderer)plot.getRenderer();  renderer.setDrawBarOutline(false);  chart.getLegend().setFrame(BlockBorder.NONE);  return chart;}  }
class C{  public static RE mkUnOp(UnaryOperation o,RE arg1){  RE res=new RE(ReOp.UNOP);  res.strOp=o;  res.cats=new LinkedList<RE>();  res.cats.add(arg1);  return res;}  }
class C{  public static void log(IStatus status){  LOG.error(status.getMessage(),status.getException());}  }
class C{  @Override public Tree<String> extractBestViterbiParse(int gState,int gp,int start,int end,List<String> sentence){  double bestScore=iScore[start][end][gState][gp];  String goalStr=(String)tagNumberer.object(gState);  if (goalStr.endsWith("^g"))   goalStr=goalStr.substring(0,goalStr.length() - 2);  if (outputSub)   goalStr=goalStr + "-" + gp;  if (outputScore)   goalStr=goalStr + " " + bestScore;  if (end - start == 1) {    if (!grammarTags[gState]) {      List<Tree<String>> child=new ArrayList<Tree<String>>();      child.add(new Tree<String>(sentence.get(start)));      return new Tree<String>(goalStr,child);    } else {      double veryBestScore=Double.NEGATIVE_INFINITY;      int newIndex=-1;      int newCp=-1;      UnaryRule[] unaries=grammar.getClosedViterbiUnaryRulesByParent(gState);      double childScore=bestScore;      for (int r=0; r < unaries.length; r++) {        UnaryRule ur=unaries[r];        int cState=ur.childState;        if (cState == gState)         continue;        if (grammarTags[cState])         continue;        if (!allowedStates[start][end][cState])         continue;        double[][] scores=ur.getScores2();        for (int cp=0; cp < scores.length; cp++) {          if (scores[cp] == null)           continue;          double ruleScore=iScore[start][end][cState][cp] + scores[cp][gp];          if (ruleScore >= veryBestScore) {            childScore=iScore[start][end][cState][cp];            veryBestScore=ruleScore;            newIndex=cState;            newCp=cp;          }        }      }      List<Tree<String>> child1=new ArrayList<Tree<String>>();      child1.add(new Tree<String>(sentence.get(start)));      String goalStr1=(String)tagNumberer.object(newIndex);      if (outputSub)       goalStr1=goalStr1 + "-" + newCp;      if (outputScore)       goalStr1=goalStr1 + " " + childScore;      if (goalStr1 == null)       System.out.println("goalStr1==null with newIndex==" + newIndex + " goalStr=="+ goalStr);      List<Tree<String>> child=new ArrayList<Tree<String>>();      child.add(new Tree<String>(goalStr1,child1));      return new Tree<String>(goalStr,child);    }  }  BinaryRule[] parentRules=grammar.splitRulesWithP(gState);  for (int split=start + 1; split < end; split++) {    for (int i=0; i < parentRules.length; i++) {      BinaryRule br=parentRules[i];      int lState=br.leftChildState;      if (iScore[start][split][lState] == null)       continue;      int rState=br.rightChildState;      if (iScore[split][end][rState] == null)       continue;      double[][][] scores=br.getScores2();      for (int lp=0; lp < scores.length; lp++) {        for (int rp=0; rp < scores[lp].length; rp++) {          if (scores[lp][rp] == null)           continue;          double score=scores[lp][rp][gp] + iScore[start][split][lState][lp] + iScore[split][end][rState][rp];          if (matches(score,bestScore)) {            Tree<String> leftChildTree=extractBestViterbiParse(lState,lp,start,split,sentence);            Tree<String> rightChildTree=extractBestViterbiParse(rState,rp,split,end,sentence);            List<Tree<String>> children=new ArrayList<Tree<String>>();            children.add(leftChildTree);            children.add(rightChildTree);            Tree<String> result=new Tree<String>(goalStr,children);            return result;          }        }      }    }  }  UnaryRule[] unaries=grammar.getClosedViterbiUnaryRulesByParent(gState);  for (int r=0; r < unaries.length; r++) {    UnaryRule ur=unaries[r];    int cState=ur.childState;    if (cState == gState)     continue;    if (iScore[start][end][cState] == null)     continue;    double[][] scores=ur.getScores2();    for (int cp=0; cp < scores.length; cp++) {      if (scores[cp] == null)       continue;      double score=scores[cp][gp] + iScore[start][end][cState][cp];      if (matches(score,bestScore)) {        Tree<String> childTree=extractBestViterbiParse(cState,cp,start,end,sentence);        List<Tree<String>> children=new ArrayList<Tree<String>>();        children.add(childTree);        Tree<String> result=new Tree<String>(goalStr,children);        return result;      }    }  }  System.err.println("Warning: could not find the optimal way to build state " + goalStr + " spanning from "+ start+ " to "+ end+ ".");  return new Tree<String>("ROOT");}  }
class C{  public void dynInit() throws Exception {  MLookup orderL=MLookupFactory.get(Env.getCtx(),m_WindowNo,0,MColumn.getColumn_ID(MDDOrder.Table_Name,MDDOrder.COLUMNNAME_DD_Order_ID),DisplayType.Search);  fOrder=new VLookup(MDDOrder.COLUMNNAME_DD_Order_ID,true,false,true,orderL);  lOrder.setText(Msg.translate(Env.getCtx(),MDDOrder.COLUMNNAME_DD_Order_ID));  fOrder.addVetoableChangeListener(this);  lOrder.setVisible(false);  fOrder.setVisible(false);  MLookup llocator=MLookupFactory.get(Env.getCtx(),m_WindowNo,0,53950,DisplayType.TableDir);  fLocator=new VLookup(MLocator.COLUMNNAME_M_Locator_ID,true,false,true,llocator);  lLocator.setText(Msg.translate(Env.getCtx(),"M_Locator_ID"));  fLocator.addVetoableChangeListener(this);  m_M_Locator_ID=fLocator.getValue();  MLookup llocatorto=MLookupFactory.get(Env.getCtx(),m_WindowNo,0,53949,DisplayType.TableDir);  fLocatorTo=new VLookup("M_LocatorTo_ID",false,false,true,llocatorto);  lLocatorTo.setText(Msg.translate(Env.getCtx(),"M_LocatorTo_ID"));  fLocatorTo.addVetoableChangeListener(this);  m_M_LocatorTo_ID=fLocatorTo.getValue();  MLookup bpL=MLookupFactory.get(Env.getCtx(),m_WindowNo,0,2762,DisplayType.Search);  fBPartner=new VLookup("C_BPartner_ID",false,false,true,bpL);  lBPartner.setText(Msg.translate(Env.getCtx(),"C_BPartner_ID"));  fBPartner.addVetoableChangeListener(this);  panel.getStatusBar().setStatusLine(Msg.getMsg(Env.getCtx(),"InventoryMoveGenerateSel"));}  }
class C{  private void establecerElementosFormulario(HttpServletRequest request){  GestionValoracionBI valoracionService=getGestionValoracionBI(request);  request.setAttribute(ValoracionConstants.LISTA_ORDENACIONES_PRIMER_NIVEL_KEY,valoracionService.getTiposOrdenacion(ValoracionConstants.NIVEL_SERIE_PRIMERO));  request.setAttribute(ValoracionConstants.LISTA_ORDENACIONES_SEGUNDO_NIVEL_KEY,valoracionService.getTiposOrdenacion(ValoracionConstants.NIVEL_SERIE_SEGUNDO));  MessageResources messages=getMessageResources(request);  String[] valoresAdministrativos={String.valueOf(ValoracionSerieVO.VALOR_ADMINISTRATIVO_TEMPORAL),String.valueOf(ValoracionSerieVO.VALOR_ADMINISTRATIVO_PERMANENTE)};  List listaValoresAdministrativos=new ArrayList();  for (int i=0; i < valoresAdministrativos.length; i++)   listaValoresAdministrativos.add(new PropertyBean(valoresAdministrativos[i],messages.getMessage(ValoracionConstants.PREFIX_KEY_VALORES_ADMINISTRATIVOS + valoresAdministrativos[i])));  request.setAttribute(ValoracionConstants.LISTA_VALORES_ADMINISTRATIVOS_KEY,listaValoresAdministrativos);  String[] valoresLegales={String.valueOf(ValoracionSerieVO.VALOR_LEGAL_TEMPORAL),String.valueOf(ValoracionSerieVO.VALOR_LEGAL_PERMANENTE)};  List listaValoresLegales=new ArrayList();  for (int i=0; i < valoresLegales.length; i++)   listaValoresLegales.add(new PropertyBean(valoresLegales[i],messages.getMessage(ValoracionConstants.PREFIX_KEY_VALORES_LEGALES + valoresLegales[i])));  request.setAttribute(ValoracionConstants.LISTA_VALORES_LEGALES_KEY,listaValoresLegales);  request.setAttribute(ValoracionConstants.LISTA_TECNICAS_MUESTREO_KEY,valoracionService.getTecnicasMuestreo());  request.setAttribute(ValoracionConstants.LISTA_VALORES_DICTAMEN_KEY,valoracionService.getValoresDictamen());}  }
class C{  public void stopEditing(boolean updateCellLabel){  if (!editing) {    return;  } else {    editing=false;  }  Row row=null;  for (  Entry<GridField,WEditor> entry : editors.entrySet()) {    if (entry.getValue().getComponent().getParent() != null) {      Component child=entry.getValue().getComponent();      Div div=null;      while (div == null && child != null) {        Component parent=child.getParent();        if (parent instanceof Div && parent.getParent() instanceof Row)         div=(Div)parent; else         child=parent;      }      Component component=div.getFirstChild();      if (updateCellLabel) {        if (component instanceof Label) {          Label label=(Label)component;          label.getChildren().clear();          String text=getDisplayText(entry.getValue().getValue(),entry.getValue().getGridField());          setLabelText(text,label);        } else         if (component instanceof Checkbox) {          Checkbox checkBox=(Checkbox)component;          Object value=entry.getValue().getValue();          if (value != null && "true".equalsIgnoreCase(value.toString()))           checkBox.setChecked(true); else           checkBox.setChecked(false);        }      }      component.setVisible(true);      if (row == null)       row=((Row)div.getParent());      entry.getValue().getComponent().detach();      entry.getKey().removePropertyChangeListener(entry.getValue());      entry.getValue().removeValuechangeListener(dataBinder);    }  }  GridTableListModel model=(GridTableListModel)grid.getModel();  model.setEditing(false);}  }
class C{  public DHCIDRecord(Name name,int dclass,long ttl,byte[] data){  super(name,Type.DHCID,dclass,ttl);  this.data=data;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.008 -0400",hash_original_method="4849D77EF78239B1BCEEDDFC9678F971",hash_generated_method="4F227D182C30D3C4F06B0AA22F6BB3B6") protected boolean isLevelEnabled(int logLevel){  return (logLevel >= currentLogLevel);}  }
class C{  @Override public void onPageScrollStateChanged(int state){}  }
class C{  public IElementType advance() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  CharSequence zzBufferL=zzBuffer;  char[] zzBufferArrayL=zzBufferArray;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=ZZ_LEXSTATE[zzLexicalState];    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=(zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++)); else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=(zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 4:{        return LITERAL_STARTS_FROM_DIGIT;      }case 8:    break;case 1:{    return com.intellij.psi.TokenType.BAD_CHARACTER;  }case 9:break;case 3:{return LITERAL_STARTS_FROM_LETTER;}case 10:break;case 7:{return LONG_OPTION_NAME_TOKEN;}case 11:break;case 5:{return EQ;}case 12:break;case 6:{return SHORT_OPTION_NAME_TOKEN;}case 13:break;case 2:{return com.intellij.psi.TokenType.WHITE_SPACE;}case 14:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;return null;} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public Object convert(Class<?> targetType,Object valueToConvert) throws JavaTypeTranslatorException {  Date rVal=null;  if (!Date.class.equals(targetType)) {    throw new JavaTypeTranslatorException("The target type must be an Date");  }  if (valueToConvert == null) {    throw new JavaTypeTranslatorException("The object to be converted cannot be null");  }  String dateFormat=null;  if (valueToConvert instanceof JavaFormatForObject) {    valueToConvert=((JavaFormatForObject)valueToConvert).getForObject();    dateFormat=((JavaFormatForObject)valueToConvert).getFormat();  }  if (valueToConvert instanceof String) {    String val=(String)valueToConvert;    rVal=new Date(val,dateFormat);  } else {    throw new JavaTypeTranslatorException("The object to be converted cannot be a " + valueToConvert.getClass());  }  return (rVal);}  }
class C{  private static void scheduleProfilers(Collection<Profiler> profilers,Arguments arguments){  ScheduledExecutorService scheduledExecutorService=MoreExecutors.getExitingScheduledExecutorService((ScheduledThreadPoolExecutor)Executors.newScheduledThreadPool(profilers.size(),new ProfilerThreadFactory()));  Map<String,ScheduledFuture<?>> runningProfilers=new HashMap<>(profilers.size());  Map<String,Profiler> activeProfilers=new HashMap<>(profilers.size());  for (  Profiler profiler : profilers) {    activeProfilers.put(profiler.getClass().getSimpleName(),profiler);    ProfilerWorkerThread worker=new ProfilerWorkerThread(profiler,errors);    ScheduledFuture future=scheduledExecutorService.scheduleAtFixedRate(worker,EXECUTOR_DELAY,profiler.getPeriod(),profiler.getTimeUnit());    runningProfilers.put(profiler.getClass().getSimpleName(),future);  }  if (arguments.httpServerEnabled) {    ProfilerServer.startServer(runningProfilers,activeProfilers,arguments.httpPort,isRunning,errors);  }}  }
class C{  public static void showCenterWindow(Window parent,Window window){  parent.appendChild(window);  showScreen(window,"parent,center");}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.IS_SORTED___PRIORITY_1:    return PRIORITY_1_EDEFAULT == null ? priority_1 != null : !PRIORITY_1_EDEFAULT.equals(priority_1);}return super.eIsSet(featureID);}  }
class C{  public IllegalStateException(@Nullable String message,@Nullable Throwable cause){  super(message,cause);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  ZPseudoComp uiComp=getUIComp(stack);  if (uiComp != null) {{      ZComp focusOwner=uiComp.getLastFocusedChild();      if (focusOwner == null)       return new Integer(-1);      if (focusOwner instanceof ZPseudoComp) {        ZPseudoComp focusComp=(ZPseudoComp)focusOwner;        ZDataTable tabParent=focusComp.getTableParent();        boolean vert=true;        if (tabParent != null && tabParent.getTableDimensions() == ZDataTable.HORIZONTAL_DIMENSION)         vert=false;        Object o1=focusComp.getRelatedContext().safeLookup("TableRow");        Object o2=focusComp.getRelatedContext().safeLookup("NumColsPerPage");        Object o3=focusComp.getRelatedContext().safeLookup("VScrollIndex");        Object o4=focusComp.getRelatedContext().safeLookup("NumRowsPerPage");        Object o5=focusComp.getRelatedContext().safeLookup("HScrollIndex");        int tablePosition=o1 != null ? (Integer.parseInt(o1.toString()) - 1) : 0;        int colsPerPage=o2 != null ? Math.max(1,Integer.parseInt(o2.toString())) : 1;        int vscrollIndex=o3 != null ? (Integer.parseInt(o3.toString()) - 1) : 0;        int rowsPerPage=o4 != null ? Math.max(1,Integer.parseInt(o4.toString())) : 1;        int hscrollIndex=o5 != null ? (Integer.parseInt(o5.toString()) - 1) : 0;        if (vert) {          Object o7=focusComp.getRelatedContext().safeLookup("NumRows");          int numRows=o7 != null ? Integer.parseInt(o7.toString()) : 1;          return new Integer(1 + (((tablePosition - colsPerPage * vscrollIndex - rowsPerPage * hscrollIndex + numRows) % numRows) % colsPerPage));        } else {          Object o6=focusComp.getRelatedContext().safeLookup("NumCols");          int numCols=o6 != null ? Integer.parseInt(o6.toString()) : 1;          return new Integer(1 + (((tablePosition - colsPerPage * vscrollIndex - rowsPerPage * hscrollIndex + numCols) % numCols) / rowsPerPage));        }      }    }  }  return new Integer(-1);}  }
class C{  @Override protected DeLiCluEntry createNewDirectoryEntry(DeLiCluNode node){  return new DeLiCluDirectoryEntry(node.getPageID(),node.computeMBR(),node.hasHandled(),node.hasUnhandled());}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  public void execute(FunctionContext context){  if (context instanceof RegionFunctionContext) {    RegionFunctionContext prContext=(RegionFunctionContext)context;    final Set allKeysSet=prContext.getFilter();    ArrayList vals=new ArrayList();    Region fcd=PartitionRegionHelper.getLocalDataForContext(prContext);    for (Iterator i=allKeysSet.iterator(); i.hasNext(); ) {      Object val=fcd.get(i.next());      assertNotNull(val);      vals.add(val);    }    context.getResultSender().lastResult(vals);  } else {    context.getResultSender().lastResult(null);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public void onRemoved(final StendhalRPZone zone){  zone.removeMovementListener(this);  super.onRemoved(zone);}  }
class C{  public Element addElementToRegistry(String hashcode,String value){  if (hashcode == null)   return (this);  StringElement se=new StringElement(value);  se.setFilterState(getFilterState());  se.setFilter(getFilter());  se.setPrettyPrint(getPrettyPrint());  addElementToRegistry(hashcode,se);  return (this);}  }
class C{  private List<IScanIssue> testOracleReportsServicePwdDisclosure(IBurpExtenderCallbacks callbacks,IHttpRequestResponse baseRequestResponse,IScannerInsertionPoint insertionPoint,URL url,PrintWriter stderr,byte[] showMapPage){  List<IScanIssue> issues=new ArrayList<>();  String protocol=url.getProtocol();  Boolean isSSL=(protocol.equals("https"));  IExtensionHelpers helpers=callbacks.getHelpers();  String RWSERVLET_PARSEQUERY_URL="/reports/rwservlet/parsequery?";  String[] lines=helpers.bytesToString(showMapPage).split("\n");  int i=0;  String key=null;  for (  String line : lines) {    if (!line.contains("OraInstructionText")) {      continue;    }    i++;    if (i % 2 == 0) {      continue;    }    Matcher matcher=REPORT_SERVICE_KEY_PATTERN.matcher(line);    if (matcher.find()) {      key=matcher.group(1);      if (!KEYMAPS_TO_IGNORE.contains(key)) {        try {          URL urlToTest=new URL(protocol,url.getHost(),url.getPort(),RWSERVLET_PARSEQUERY_URL + key);          byte[] oastest=helpers.buildHttpRequest(urlToTest);          byte[] responseBytes=callbacks.makeHttpRequest(url.getHost(),url.getPort(),isSSL,oastest);          if (responseBytes != null) {            Matcher credential_matcher=PWD_DISCLOSURE_PATTERN.matcher(helpers.bytesToString(responseBytes));            if (credential_matcher.find()) {              String user=credential_matcher.group(1);              String pwd=credential_matcher.group(2);              String db=credential_matcher.group(3);              String vuln_detail=String.format("<br /><br /><b>USER:</b> %s<br />" + "<b>PASSWORD:</b> %s<br />" + "<b>DATABASE:</b> %s<br />",user,pwd,db);              issues.add(new CustomScanIssue(baseRequestResponse.getHttpService(),helpers.analyzeRequest(baseRequestResponse).getUrl(),new CustomHttpRequestResponse(oastest,responseBytes,baseRequestResponse.getHttpService()),TITLE_DATABASE_CREDENTIALS,DESCRIPTION_INFO_DISCLOSURE + vuln_detail,REMEDY,Risk.High,Confidence.Certain));            }          }        } catch (        MalformedURLException ex) {          stderr.println("Malformed URL Exception " + ex);        }      }    }  }  return issues;}  }
class C{  public boolean hasMoreRows(){  return rowNum < getCurImgInfo().rows - 1;}  }
class C{  public boolean isRollbackSupported(){  return rollbackSupported;}  }
class C{  public void releaseConnection(){  LOG.trace("enter HttpConnection.releaseConnection()");  if (locked) {    LOG.debug("Connection is locked.  Call to releaseConnection() ignored.");  } else   if (httpConnectionManager != null) {    LOG.debug("Releasing connection " + getID() + " back to connection manager.");    httpConnectionManager.releaseConnection(this);  } else {    LOG.warn("HttpConnectionManager is null.  Connection cannot be released.");  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:18.848 -0500",hash_original_method="27F3E47E60B1213ECE72A0C1452319D1",hash_generated_method="B864B858E73245729E2A2FF424814054") @Override public String toString(){  return String.valueOf(value);}  }
class C{  public void addData(Statistic data){  dataList.add(data);}  }
class C{  public static void main(String[] args){  FileChooserDemo demo=new FileChooserDemo(null);  demo.mainImpl();}  }
class C{  public static AccessibilityEvent obtain(int eventType){  AccessibilityEvent event=AccessibilityEvent.obtain();  event.setEventType(eventType);  return event;}  }
class C{  @Override public int startupNewWorker(int priority){  startupNewWorker();  return 1;}  }
class C{  private static void sendRecord(AmazonKinesis producer,String streamName,AggRecord aggRecord){  if (aggRecord == null || aggRecord.getNumUserRecords() == 0) {    return;  }  System.out.println("Submitting record EHK=" + aggRecord.getExplicitHashKey() + " NumRecords="+ aggRecord.getNumUserRecords()+ " NumBytes="+ aggRecord.getSizeBytes());  try {    producer.putRecord(aggRecord.toPutRecordRequest(streamName));  } catch (  Exception e) {    e.printStackTrace();  }  System.out.println("Completed record EHK=" + aggRecord.getExplicitHashKey());}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Airing a=getAir(stack);  return (a == null) ? "" : a.getParentalRating();}  }
class C{  void verifyUniqueXids(List<OFMessage> msgs){  if (seenXids == null)   seenXids=new HashSet<Long>();  for (  OFMessage m : msgs) {    long xid=m.getXid();    assertTrue("Xid in messags is 0",xid != 0);    assertFalse("Xid " + xid + " has already been used",seenXids.contains(xid));    seenXids.add(xid);  }}  }
class C{  public static boolean isValid(X509Certificate cert){  try {    cert.checkValidity();    return true;  } catch (  CertificateExpiredException|CertificateNotYetValidException ignored) {    log.info("Certificate not valid: {}",ignored);    return false;  }}  }
class C{  protected void isPIWellFormed(ProcessingInstruction node){  if (!isXMLName(node.getNodeName(),fIsXMLVersion11)) {    String msg=Utils.messages.createMessage(MsgKey.ER_WF_INVALID_CHARACTER_IN_NODE_NAME,new Object[]{"ProcessingInstruction",node.getTarget()});    if (fErrorHandler != null) {      fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_WF_INVALID_CHARACTER_IN_NODE_NAME,null,null,null));    }  }  Character invalidChar=isWFXMLChar(node.getData());  if (invalidChar != null) {    String msg=Utils.messages.createMessage(MsgKey.ER_WF_INVALID_CHARACTER_IN_PI,new Object[]{Integer.toHexString(Character.getNumericValue(invalidChar.charValue()))});    if (fErrorHandler != null) {      fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_WF_INVALID_CHARACTER,null,null,null));    }  }}  }
class C{  public void close() throws IOException {  finish();  if (raf != null) {    raf.close();  }  if (out != null) {    out.close();  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public static double[] normalizeL1(double[] histogram){  double[] result=new double[histogram.length];  double len=0d;  for (int i=0; i < histogram.length; i++) {    len+=Math.abs(histogram[i]);  }  for (int i=0; i < histogram.length; i++) {    result[i]=((double)histogram[i]) / len;  }  return result;}  }
class C{  private void deleteStorageHWIDs(StorageSystem storage,List<Initiator> initiators){  if (initiators == null || initiators.isEmpty()) {    _log.debug("No initiators ...");    return;  }  CIMObjectPath hwIdManagementSvc=_cimPath.getStorageHardwareIDManagementService(storage);  for (  Initiator initiator : initiators) {    try {      CIMArgument[] createHwIdIn=_helper.getDeleteStorageHardwareIDArgs(storage,initiator);      CIMArgument[] createHwIdOut=new CIMArgument[5];      _helper.invokeMethod(storage,hwIdManagementSvc,SmisConstants.DELETE_STORAGE_HARDWARE_ID,createHwIdIn,createHwIdOut);    } catch (    WBEMException e) {      _log.error("deleteStorageHWIDs -- WBEMException: " + e.getMessage());    }catch (    Exception e) {      _log.error("deleteStorageHWIDs -- Exception: " + e.getMessage());    }  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  static public void preInit(String applicationName){  Log4JUtil.initLogging();  try {    Application.setApplicationName(applicationName);  } catch (  IllegalAccessException|IllegalArgumentException ex) {    log.error("Unable to set application name");  }  log.info(Log4JUtil.startupInfo(applicationName));  preInit=true;}  }
class C{  public static void report(String what){  VM.sysWrite(what + '\n');}  }
class C{  public String describe(){  if (hasDescription()) {    return getDescription();  }  return "You see " + getDescriptionName(false) + ".";}  }
class C{  public static void runInFXAndWait(Runnable doRun){  if (Platform.isFxApplicationThread()) {    doRun.run();    return;  }  final CountDownLatch doneLatch=new CountDownLatch(1);  Platform.runLater(null);  try {    doneLatch.await();  } catch (  InterruptedException e) {    Thread.currentThread().interrupt();  }}  }
class C{  public Tasks<ProtectionSystemRestRep> discoverAll(){  return postTasks(baseUrl + "/discover");}  }
class C{  public BMPImageReader(ImageReaderSpi originator){  super(originator);}  }
class C{  public static Geometry invalidLocations(Geometry g){  List invalidLoc=new ArrayList();  for (int i=0; i < g.getNumGeometries(); i++) {    Geometry geom=g.getGeometryN(i);    IsValidOp ivop=new IsValidOp(geom);    TopologyValidationError err=ivop.getValidationError();    if (err != null) {      invalidLoc.add(g.getFactory().createPoint(err.getCoordinate()));    }  }  return g.getFactory().buildGeometry(invalidLoc);}  }
class C{  public byte[] asn1Encode() throws Asn1Exception, IOException {  DerOutputStream temp, bytes, out;  temp=new DerOutputStream();  temp.putInteger(BigInteger.valueOf(pvno));  out=new DerOutputStream();  out.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x01),temp);  temp=new DerOutputStream();  temp.putInteger(BigInteger.valueOf(msgType));  out.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x02),temp);  if (pAData != null && pAData.length > 0) {    temp=new DerOutputStream();    for (int i=0; i < pAData.length; i++) {      temp.write(pAData[i].asn1Encode());    }    bytes=new DerOutputStream();    bytes.write(DerValue.tag_SequenceOf,temp);    out.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x03),bytes);  }  out.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x04),reqBody.asn1Encode(msgType));  bytes=new DerOutputStream();  bytes.write(DerValue.tag_Sequence,out);  out=new DerOutputStream();  out.write(DerValue.createTag(DerValue.TAG_APPLICATION,true,(byte)msgType),bytes);  return out.toByteArray();}  }
class C{  public AccessibleRelationSet(){  relations=null;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:31.956 -0500",hash_original_method="056827AB9E74AF6C4B57ABEC8FCA9A3C",hash_generated_method="67071346A9218C2191AEF8CE4E4334B3") static boolean isInTouchMode(){  if (mInitialized) {    try {      return sWindowSession.getInTouchMode();    } catch (    RemoteException e) {    }  }  return false;}  }
class C{  public static <T extends Annotation>T of(Class<T> type){  return of(type,Map.of());}  }
class C{  public ClientRegionFactoryImpl(GemFireCacheImpl cache,ClientRegionShortcut pra){  this.cache=cache;  RegionAttributes ra=cache.getRegionAttributes(pra.toString());  if (ra == null) {    throw new IllegalStateException("The region shortcut " + pra + " has been removed from "+ cache.listRegionAttributes());  }  this.attrsFactory=new AttributesFactory<K,V>(ra);  initAttributeFactoryDefaults();}  }
class C{  @SuppressWarnings("unchecked") public static Set<Double> toSet(double[] array){  return toSet(DefaultTypeTransformation.primitiveArrayToList(array));}  }
class C{  public Vec3UV transformVec(Vec3UV point,Vec3UV centerPoint){  double px=point.x - centerPoint.x;  double py=point.y - centerPoint.y;  double pz=point.z - centerPoint.z;  Vec3UV result=new Vec3UV(0,0,0);  result.x=this.matrix[0] * px + this.matrix[1] * py + this.matrix[2] * pz;  result.y=this.matrix[3] * px + this.matrix[4] * py + this.matrix[5] * pz;  result.z=this.matrix[6] * px + this.matrix[7] * py + this.matrix[8] * pz;  result.x+=centerPoint.x;  result.y+=centerPoint.y;  result.z+=centerPoint.z;  return result;}  }
class C{  private synchronized void sortTemplates(){  maxTemplateIDLength=0;  for (Iterator i=templates.iterator(); i.hasNext(); ) {    CodeTemplate temp=(CodeTemplate)i.next();    if (temp == null || temp.getID() == null) {      i.remove();    } else {      maxTemplateIDLength=Math.max(maxTemplateIDLength,temp.getID().length());    }  }  Collections.sort(templates);}  }
class C{  public void pool(){  if (getShortTermMemory() != null) {    getShortTermMemory().clear();  }}  }
class C{  public static void addGVTListener(BridgeContext ctx,Document doc){  UserAgent ua=ctx.getUserAgent();  if (ua != null) {    EventDispatcher dispatcher=ua.getEventDispatcher();    if (dispatcher != null) {      final Listener listener=new Listener(ctx,ua);      dispatcher.addGraphicsNodeMouseListener(listener);      dispatcher.addGraphicsNodeKeyListener(listener);      EventListener l=new GVTUnloadListener(dispatcher,listener);      NodeEventTarget target=(NodeEventTarget)doc;      target.addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"SVGUnload",l,false,null);      storeEventListenerNS(ctx,target,XMLConstants.XML_EVENTS_NAMESPACE_URI,"SVGUnload",l,false);    }  }}  }
class C{  public CSVParserBuilder withQuoteChar(final char quoteChar){  this.quoteChar=quoteChar;  return this;}  }
class C{  public ToolBarLayout(int axis){  this.axis=axis;}  }
class C{  public static Motor jaguar(int channel,DoubleToDoubleFunction speedLimiter){  return new HardwareMotor(new Jaguar(channel),SPEED_LIMITER);}  }
class C{  public void swapBuffers(){  RenderTarget tmp=mReadBuffer;  mReadBuffer=mWriteBuffer;  mWriteBuffer=tmp;}  }
class C{  public javax2.sip.address.SipURI createSipURI(String user,String host) throws ParseException {  if (host == null)   throw new NullPointerException("null host");  StringBuffer uriString=new StringBuffer("sip:");  if (user != null) {    uriString.append(user);    uriString.append("@");  }  if (host.indexOf(':') != host.lastIndexOf(':') && host.trim().charAt(0) != '[')   host='[' + host + ']';  uriString.append(host);  StringMsgParser smp=new StringMsgParser();  try {    SipUri sipUri=smp.parseSIPUrl(uriString.toString());    return sipUri;  } catch (  ParseException ex) {    throw new ParseException(ex.getMessage(),0);  }}  }
class C{  @Override public boolean isValidEntity(Entity entity,IGame game,boolean useValidNonInfantryCheck){  return ((GameTurn.getClassCode(entity) & mask) != 0) && super.isValidEntity(entity,game,useValidNonInfantryCheck);}  }
class C{  private long reconcileState(){  final Phaser root=this.root;  long s=state;  if (root != this) {    int phase, p;    while ((phase=(int)(root.state >>> PHASE_SHIFT)) != (int)(s >>> PHASE_SHIFT) && !UNSAFE.compareAndSwapLong(this,stateOffset,s,s=(((long)phase << PHASE_SHIFT) | ((phase < 0) ? (s & COUNTS_MASK) : (((p=(int)s >>> PARTIES_SHIFT) == 0) ? EMPTY : ((s & PARTIES_MASK) | p))))))     s=state;  }  return s;}  }
class C{  public boolean isPlotable(double lat,double lon){  if (lat < -70d)   return false;  forward(lat,lon,plotablePoint);  double x=plotablePoint.getX();  double y=plotablePoint.getY();  return (x >= 0 && x < this.width && y >= 0 && y < height);}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private static DefaultTestCase buildTestCase0() throws NoSuchMethodException, SecurityException, ClassNotFoundException {  TestCaseBuilder builder=new TestCaseBuilder();  Class<?> flagClass=TestGenerationContext.getInstance().getClassLoaderForSUT().loadClass(Properties.TARGET_CLASS);  Constructor<?> ctor=flagClass.getConstructor();  builder.appendConstructor(ctor);  return builder.getDefaultTestCase();}  }
class C{  private void run(Configuration config){  Range sizes=config.sizes;  Range parallelism=config.parallelism;  warmup();  long[][] times=config.createTimesArray();  for (int size=0; size < sizes.getIterations(); size++) {    runForSize(parallelism,sizes.get(size),times,size);  }  printResults(sizes,parallelism,times);}  }
class C{  public void assertFail(SolrParams p,ErrorCode expCode,String expSubstr) throws Exception {  try {    ignoreException(expSubstr);    assertJQ(req(p));    fail("no exception matching expected: " + expCode.code + ": "+ expSubstr);  } catch (  SolrException e) {    assertEquals(expCode.code,e.code());    assertTrue("Expected substr not found: " + expSubstr + " <!< "+ e.getMessage(),e.getMessage().contains(expSubstr));  } finally {    unIgnoreException(expSubstr);  }}  }
class C{  private boolean onGalleryLongImageClick(final GalleryCursorAdapter.GridCellViewHolder holder,int position){  if (mSelectedItems.isEmpty()) {    startMultiSelectionMode();    mSelectedItems.add(holder.imageID);    holder.icon.setVisibility(View.VISIBLE);    multiSelectionUpdateActionbar("Start multisel");  } else {    ImageDetailActivityViewPager.showActivity(this.getActivity(),getUri(holder.imageID),position,getCurrentQuery());  }  return true;}  }
class C{  public TypeParameter createTypeParameter(){  TypeParameterImpl typeParameter=new TypeParameterImpl();  return typeParameter;}  }
class C{  private Ref andOp() throws PageException {  Ref ref=notOp();  while (cfml.isValidIndex() && (cfml.forwardIfCurrent("&&") || cfml.forwardIfCurrent("and"))) {    cfml.removeSpace();    ref=new And(ref,notOp());  }  return ref;}  }
class C{  private static int parseNotificationId(String id){  try {    return Integer.parseInt(id);  } catch (  NumberFormatException nfe) {    Log.w(TAG,"Exception while parsing download id:" + id);    return -1;  }}  }
class C{  public ExecutionManagerExecutionException(String error,ManagerExceptionType type){  super(error);  this.setType(type);}  }
class C{  protected void restoreFolders(){  if (LOG.isDebugEnabled()) {    LOG.debug("Entering RaptorWindow.restoreFolders");  }  long startTime=System.currentTimeMillis();  for (  RaptorWindowSashForm sashe : sashes) {    sashe.restore();  }  for (int i=0; i < folders.length; i++) {    if (folders[i].getItemCount() > 0 && !folders[i].getMinimized()) {      folders[i].setSelection(folders[i].getSelectionIndex());    } else {      folders[i].updateToolbar(false);      folders[i].passivateActiveateItems();    }  }  adjustToFoldersItemsMinimizied();  if (LOG.isDebugEnabled()) {    LOG.debug("Leaving restoreFolders execution in " + (System.currentTimeMillis() - startTime) + "ms");  }}  }
class C{  void handleSelection(String file){  int index=file.lastIndexOf(java.io.File.separatorChar);  if (index == -1) {    savedDir=this.dir;    savedFile=file;  } else {    savedDir=file.substring(0,index + 1);    savedFile=file.substring(index + 1);  }  String[] fileNames=fileList.getSelectedItems();  int filesNumber=(fileNames != null) ? fileNames.length : 0;  File[] files=new File[filesNumber];  for (int i=0; i < filesNumber; i++) {    files[i]=new File(savedDir,fileNames[i]);  }  AWTAccessor.FileDialogAccessor fileDialogAccessor=AWTAccessor.getFileDialogAccessor();  fileDialogAccessor.setDirectory(target,savedDir);  fileDialogAccessor.setFile(target,savedFile);  fileDialogAccessor.setFiles(target,files);}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public static String[] splitHosts(final String commaSeparatedHosts){  if (commaSeparatedHosts == null) {    return new String[0];  }  String[] hosts=commaSeparatedHosts.split(",");  for (int i=0; i < hosts.length; i++) {    hosts[i]=hosts[i].trim();  }  return hosts;}  }
class C{  public void tagProtect(byte[] password) throws IOException {  tags.tag(TAG_PROTECT,false,password);}  }
class C{  private FunctionTemplate newFunction(String name){  FunctionTemplate template;  if (functionTemplates.containsKey(name)) {    template=functionTemplates.get(name).get();  } else {    System.out.println("No template " + name);    template=null;  }  return template;}  }
class C{  public UnmodifiableClassException(String s){  super(s);}  }
class C{  LongBuffer(long[] someIds){  data=someIds;  length=someIds.length;}  }
class C{  public void testSplitAndJoinMultiplePropertiesOnDot(){  Properties inner=PropertyUtils.splitPropertiesOnDelimiter(ONE_DOT_TWO,'.');  assertEquals("hello",inner.getProperty("inner-1"));  assertEquals("goodbye",inner.getProperty("inner-2"));  assertEquals(2,inner.size());  try {    assertEquals(ONE_DOT_TWO,PropertyUtils.joinOnDelimiter(PropertyUtils.toMap(inner),'.'));  } catch (  ComparisonFailure e) {    assertEquals(TWO_DOT_ONE,PropertyUtils.joinOnDelimiter(PropertyUtils.toMap(inner),'.'));  }}  }
class C{  public SET<Key> intersects(SET<Key> that){  if (that == null)   throw new NullPointerException("called intersects() with a null argument");  SET<Key> c=new SET<Key>();  if (this.size() < that.size()) {    for (    Key x : this) {      if (that.contains(x))       c.add(x);    }  } else {    for (    Key x : that) {      if (this.contains(x))       c.add(x);    }  }  return c;}  }
class C{  public Path createSharedClasspath(){  if (getSharedClasspath() == null) {    this.sharedClasspath=new Path(getProject());  }  return this.sharedClasspath.createPath();}  }
class C{  static byte[] toByteArray(InputStream in,int expectedSize) throws IOException {  byte[] bytes=new byte[expectedSize];  int remaining=expectedSize;  while (remaining > 0) {    int off=expectedSize - remaining;    int read=in.read(bytes,off,remaining);    if (read == -1) {      return Arrays.copyOf(bytes,off);    }    remaining-=read;  }  int b=in.read();  if (b == -1) {    return bytes;  }  FastByteArrayOutputStream out=new FastByteArrayOutputStream();  out.write(b);  copy(in,out);  byte[] result=new byte[bytes.length + out.size()];  System.arraycopy(bytes,0,result,0,bytes.length);  out.writeTo(result,bytes.length);  return result;}  }
class C{  public static boolean verifyRequestTime(ContainerRequestContext context,long skew,IDiagnosticsLogger log){  long currentTime=System.currentTimeMillis();  Date beginsAt=new Date(currentTime - skew);  Date expiresAt=new Date(currentTime + skew);  Date requestTime=context.getDate();  if (requestTime.before(beginsAt) || requestTime.after(expiresAt)) {    log.error(String.format("Request time outside of acceptable range. Request time: '%s'. Acceptable range: ['%s', '%s']",requestTime,beginsAt,expiresAt));    return false;  }  return true;}  }
class C{  public void testWriteMessageWithNegativeEnumValue() throws Exception {  SparseEnumMessage message=SparseEnumMessage.newBuilder().setSparseEnum(TestSparseEnum.SPARSE_E).build();  assertTrue(message.getSparseEnum().getNumber() < 0);  byte[] rawBytes=message.toByteArray();  SparseEnumMessage message2=SparseEnumMessage.parseFrom(rawBytes);  assertEquals(TestSparseEnum.SPARSE_E,message2.getSparseEnum());}  }
class C{  public void stop(){  this.keepRunning=false;}  }
class C{  public static String trimEnd(String string,String endMatch){  if (string.endsWith(endMatch)) {    return string.substring(0,string.length() - endMatch.length());  }  return string;}  }
class C{  public boolean isAnimation(String name){  byte b=((Byte)resourceTypes.get(name)).byteValue();  return b == MAGIC_ANIMATION_LEGACY;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private String sendSubmission(){  Vector<File> submissionFiles=collectFiles();  if (submissionFiles == null)   return null;  File zipfile=null;  FileInputStream input=null;  String submissionID=null;  try {    zipfile=File.createTempFile("jplagtmp",".zip");    ZipUtil.zipFilesTo(submissionFiles,option.getOriginalDir(),zipfile);    input=new FileInputStream(zipfile);    int filesize=(int)zipfile.length();    int sentsize=0;    int partsize=(filesize < 81920) ? filesize : 81920;    byte[] data=new byte[partsize];    input.read(data);    initProgressBar(filesize);    StartSubmissionUploadParams params=new StartSubmissionUploadParams(option,filesize,data);    submissionID=stub.startSubmissionUpload(params);    sentsize+=partsize;    while (sentsize < filesize - partsize) {      setProgressBarValue(sentsize);      input.read(data);      stub.continueSubmissionUpload(data);      sentsize+=partsize;    }    if (sentsize != filesize) {      setProgressBarValue(sentsize);      data=new byte[filesize - sentsize];      input.read(data);      stub.continueSubmissionUpload(data);      sentsize=filesize;    }    setProgressBarValue(sentsize);    input.close();    zipfile.delete();  } catch (  Exception e) {    System.out.println();    checkException(e);    if (input != null) {      try {        input.close();      } catch (      Exception ex) {      }    }    if (zipfile != null)     zipfile.delete();    return null;  }  return submissionID;}  }
class C{  void onItemClick(MenuItem menuItem){  if (menuItem.isEnabled()) {    dismiss();    mHandler.onOptionsItemSelected(menuItem);  }}  }
class C{  protected void notifyClickListenersAboutClick(int item){  for (  OnWheelClickedListener listener : clickingListeners) {    listener.onItemClicked(this,item);  }}  }
class C{  public void propertyChange(PropertyChangeEvent evt){  ComboBoxEditor newEditor=comboBox.getEditor();  if (editor != newEditor) {    if (editorComponent != null) {      editorComponent.removeFocusListener(this);    }    editor=newEditor;    if (editor != null) {      editorComponent=editor.getEditorComponent();      if (editorComponent != null) {        editorComponent.addFocusListener(this);      }    }  }}  }
class C{  private synchronized void block() throws IOException {  int n=selector.select();  selector.selectedKeys().clear();  available();}  }
class C{  public void free() throws SQLException {synchronized (getSynchronizationObject()) {    SQLExceptionChainBuilder<SQLException> chain=new SQLExceptionChainBuilder<>();    for (    FBBlobInputStream blobIS : new ArrayList<>(inputStreams)) {      try {        blobIS.close();      } catch (      IOException ex) {        chain.append(new FBSQLException(ex));      }    }    inputStreams.clear();    if (chain.hasException())     throw chain.getException();  }}  }
class C{  public JsonArrayRequest(int method,String url,JSONObject jsonRequest,Listener<JSONArray> listener,ErrorListener errorListener){  super(method,url,(jsonRequest == null) ? null : jsonRequest.toString(),listener,errorListener);}  }
class C{  private double computeAngle(final double val){  double retVal=val;  if (val >= DEGREES_IN_A_CIRCLE) {    retVal-=DEGREES_IN_A_CIRCLE;  }  if (val < 0) {    retVal+=DEGREES_IN_A_CIRCLE;  }  return retVal;}  }
class C{  protected void onConnectionClosed(final String connectionId){}  }
class C{  public void updateObject(int columnIndex,Object x,SQLType targetSqlType,int scaleOrLength) throws SQLException {  throw new NotUpdatable();}  }
class C{  public static Builder newBuilder(){  return new Builder();}  }
class C{  @SuppressWarnings("deprecation") public static String generateCnonce(String nonce,String nc){  byte buf[]=new byte[8];  random.nextBytes(buf);  for (int i=0; i < 8; ++i) {    buf[i]=(byte)(0x20 + (buf[i] % 95));  }  String combo=String.format("%s:%s:%s:%s",nonce,nc,new Date().toGMTString(),new String(buf));  MessageDigest sha1=null;  try {    sha1=MessageDigest.getInstance("SHA-1");  } catch (  NoSuchAlgorithmException ex) {    throw new RuntimeException("Unable to create SHA-1 instance",ex);  }  return hexEncode(sha1.digest(combo.getBytes()));}  }
class C{  public UnmodifiableSetException(String message){  super(message);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case GamlPackage.ACCESS__ARGS:    return getArgs();case GamlPackage.ACCESS__NAMED_EXP:  return getNamed_exp();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public String globalInfo(){  return "Hierarchical clustering class.\n" + "Implements a number of classic agglomorative (i.e. bottom up) hierarchical clustering methods" + "based on .";}  }
class C{  public void addSplitImportName(String importName,String[] splitImportName){  if (splitImportNames == null) {    splitImportNames=new TreeMap<String,String[]>();  }  splitImportNames.put(importName,splitImportName);}  }
class C{  protected List<MethodNode> findMethodsWithGenerated(ClassNode receiver,String name){  List<MethodNode> methods=receiver.getMethods(name);  if (methods.isEmpty() || receiver.isResolved())   return methods;  List<MethodNode> result=addGeneratedMethods(receiver,methods);  return result;}  }
class C{  protected String buildResourcePath(String basePath,String resourcePath){  if (basePath == null) {    basePath="";  }  String base=trimSlashes(basePath);  if (!base.equals("")) {    base="/" + base;  }  String result=StringUtils.removeEnd(base + "/" + trimSlashes(resourcePath),"/");  if (result.equals("")) {    result="/";  }  return result;}  }
class C{  private void dumpThreadInfoWithLocks(StringBuilder dump){  dump.append(getDumpDate());  dump.append(dumpPrefix);  dump.append("\n");  ThreadInfo[] tinfos=tmbean.dumpAllThreads(true,true);  for (int i=0; i < tinfos.length; i++) {    ThreadInfo ti=tinfos[i];    printThreadInfo(ti,dump);    LockInfo[] syncs=ti.getLockedSynchronizers();    printLockInfo(syncs,dump);  }  dump.append("\n");}  }
class C{  public void flush() throws IOException {  internalOut.flush();}  }
class C{  protected void shutdown(){  _connectionManager.shutdown();}  }
class C{  public void flushImage(ParsedURL purl){  rawCache.clear(purl);  imgCache.clear(purl);}  }
class C{  private static void addDirectory(Queue<File> queue,File directory){  for (  File file : directory.listFiles()) {    queue.offer(file);  }  ;}  }
class C{  static Time parse(String time){  int sign;  int index=0;  Time tm;  if (time.charAt(0) == '-') {    sign=-1;    index++;  } else {    sign=1;  }  int val=0;  int num=0;  int countDelim=0;  while (index < time.length()) {    char c=time.charAt(index++);    if (c == ':') {      val=val * 60 + num;      countDelim++;      num=0;      continue;    }    int d=Character.digit(c,10);    if (d == -1) {      --index;      break;    }    num=num * 10 + d;  }  val=val * 60 + num;  for (; countDelim < 2; countDelim++) {    val*=60;  }  tm=new Time((long)val * 1000 * sign);  if (index < time.length()) {    char c=time.charAt(index++);    if (c == 's') {      tm.setType(Time.STD);    } else     if (c == 'u' || c == 'g' || c == 'z') {      tm.setType(Time.UTC);    } else     if (c == 'w') {      tm.setType(Time.WALL);    } else {      Main.panic("unknown time mode: " + c);    }  } else {    tm.setType(Time.WALL);  }  return tm;}  }
class C{  private static double average(Iterable<? extends Comparable<?>> data,double start,double end){  int startFloor=(int)Math.floor(start);  int startCeil=(int)Math.ceil(start);  int endFloor=(int)Math.floor(end);  int endCeil=(int)Math.ceil(end);  double sum=0.0;  Iterator<? extends Comparable<?>> dataIterator=data.iterator();  advance(dataIterator,startFloor);  for (int i=startFloor; i < endCeil; i++) {    Number number=(Number)dataIterator.next();    double val=number.doubleValue();    if (i == startFloor && startCeil != start) {      sum+=(startCeil - start) * val;    } else     if (i == endCeil - 1 && endFloor != end) {      sum+=(end - endFloor) * val;    } else {      sum+=val;    }  }  return sum / (end - start);}  }
class C{  public NTRUSigningParameters(int N,int q,int d1,int d2,int d3,int B,double beta,double normBound,double keyNormBound,Digest hashAlg){  this.N=N;  this.q=q;  this.d1=d1;  this.d2=d2;  this.d3=d3;  this.B=B;  this.beta=beta;  this.normBound=normBound;  this.hashAlg=hashAlg;  init();}  }
class C{  private int measureLong(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=(int)(getPaddingLeft() + getPaddingRight() + (count * 2 * mRadius)+ (count - 1) * (mRadius + mExtraSpacing) + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public static IAddress loadAddress(final ResultSet resultSet,final String columnName) throws SQLException {  Preconditions.checkNotNull(resultSet,"IE00500: Result set argument can not be null");  Preconditions.checkNotNull(columnName,"IE00501: Column name argument can not be null");  final String addressString=readString(resultSet,columnName);  return resultSet.wasNull() ? null : new CAddress(new BigInteger(addressString));}  }
class C{  public byte[] encodeToDER(){  try {    return derByteStream().toByteArray();  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  private void clearStrBuffer(){  mStrBuff=new StringBuilder();}  }
class C{  private double determineMaxZoomFactor(){  if (imageData != null) {    final double maxWidth=(double)Integer.MAX_VALUE / imageData.width;    final double maxHeight=(double)Integer.MAX_VALUE / imageData.height;    return Math.min(maxWidth,maxHeight);  }  return 1.0d;}  }
class C{  public void addToken(Segment segment,int start,int end,int tokenType,int startOffset){  addToken(segment.array,start,end,tokenType,startOffset);}  }
class C{  private void indexAndCrashOnCreateOutputSegments2() throws IOException {  Directory realDirectory=FSDirectory.open(path);  CrashAfterCreateOutput crashAfterCreateOutput=new CrashAfterCreateOutput(realDirectory);  IndexWriter indexWriter=new IndexWriter(crashAfterCreateOutput,newIndexWriterConfig(new MockAnalyzer(random())));  indexWriter.addDocument(getDocument());  indexWriter.commit();  crashAfterCreateOutput.setCrashAfterCreateOutput("pending_segments_2");  indexWriter.addDocument(getDocument());  expectThrows(CrashingException.class,null);  indexWriter.close();  assertFalse(slowFileExists(realDirectory,"segments_2"));  crashAfterCreateOutput.close();}  }
class C{  public void addError(String msg){  addError(msg,null);}  }
class C{  public void testClientRetransmissions() throws Exception {  String oldRetransValue=System.getProperty(StackProperties.MAX_CTRAN_RETRANSMISSIONS);  String oldMaxWaitValue=System.getProperty(StackProperties.MAX_CTRAN_RETRANS_TIMER);  System.setProperty(StackProperties.MAX_CTRAN_RETRANS_TIMER,"100");  System.setProperty(StackProperties.MAX_CTRAN_RETRANSMISSIONS,"2");  System.setProperty(StackProperties.PROPAGATE_RECEIVED_RETRANSMISSIONS,"true");  stunStack.addRequestListener(serverAddress,requestCollector);  stunStack.sendRequest(bindingRequest,serverAddress,clientAddress,responseCollector);  Thread.sleep(1000);  Vector<StunMessageEvent> reqs=requestCollector.getRequestsForTransaction(bindingRequest.getTransactionID());  assertTrue("No retransmissions of the request have been received",reqs.size() > 1);  assertTrue("The binding request has been retransmitted more than it " + "should have!",reqs.size() >= 3);  if (oldRetransValue != null)   System.getProperty(StackProperties.MAX_CTRAN_RETRANSMISSIONS,oldRetransValue); else   System.clearProperty(StackProperties.MAX_CTRAN_RETRANSMISSIONS);  if (oldMaxWaitValue != null)   System.getProperty(StackProperties.MAX_CTRAN_RETRANS_TIMER,oldRetransValue); else   System.clearProperty(StackProperties.MAX_CTRAN_RETRANS_TIMER);}  }
class C{  public void cleanup(ButtonGroup bg){  if (bg != null) {    bg.remove(layerName);  }  cleanup();}  }
class C{  public Boolean isUseHostProfileEngine(){  return useHostProfileEngine;}  }
class C{  public TriggeredObserver(){  super(null);}  }
class C{  public void testUpdatePackage2(){  int originalAppIdValue=mAppIdValue;  int originalContentTypeValue=mContentTypeValue;  try {    IWapPushManager iwapman=getInterface();    iwapman.addPackage(Integer.toString(mAppIdValue),Integer.toString(mContentTypeValue),mPackageName,mClassName,0,false,false);    assertFalse(iwapman.updatePackage(Integer.toString(mAppIdValue + 10),Integer.toString(mContentTypeValue),mPackageName,mClassName,0,false,false));    assertFalse(iwapman.updatePackage(Integer.toString(mAppIdValue),Integer.toString(mContentTypeValue + 10),mPackageName,mClassName,0,false,false));    assertTrue(iwapman.updatePackage(Integer.toString(mAppIdValue),Integer.toString(mContentTypeValue),mPackageName + "dummy_data",mClassName,0,false,false));    assertTrue(iwapman.updatePackage(Integer.toString(mAppIdValue),Integer.toString(mContentTypeValue),mPackageName,mClassName + "dummy_data",0,false,false));    iwapman.deletePackage(Integer.toString(mAppIdValue),Integer.toString(mContentTypeValue),mPackageName,mClassName);    iwapman.deletePackage(Integer.toString(mAppIdValue),Integer.toString(mContentTypeValue),mPackageName,mClassName + "dummy_data");  } catch (  RemoteException e) {    assertTrue(false);  }}  }
class C{  public CompletableFuture<Void> accept(T event){  List<CompletableFuture<Void>> futures=new ArrayList<>(listeners.size());  for (  ListenerHolder listener : listeners) {    if (listener.context != null) {      futures.add(listener.context.execute(null));    } else {      listener.listener.accept(event);    }  }  return CompletableFuture.allOf(futures.toArray(new CompletableFuture[futures.size()]));}  }
class C{  @Override public void resolve(DeserializationConfig config,DeserializerProvider provider) throws JsonMappingException {  Iterator<SettableBeanProperty> it=_beanProperties.allProperties();  UnwrappedPropertyHandler unwrapped=null;  ExternalTypeHandler.Builder extTypes=null;  while (it.hasNext()) {    SettableBeanProperty origProp=it.next();    SettableBeanProperty prop=origProp;    if (!prop.hasValueDeserializer()) {      prop=prop.withValueDeserializer(findDeserializer(config,provider,prop.getType(),prop));    }    prop=_resolveManagedReferenceProperty(config,prop);    SettableBeanProperty u=_resolveUnwrappedProperty(config,prop);    if (u != null) {      prop=u;      if (unwrapped == null) {        unwrapped=new UnwrappedPropertyHandler();      }      unwrapped.addProperty(prop);    }    prop=_resolveInnerClassValuedProperty(config,prop);    if (prop != origProp) {      _beanProperties.replace(prop);    }    if (prop.hasValueTypeDeserializer()) {      TypeDeserializer typeDeser=prop.getValueTypeDeserializer();      if (typeDeser.getTypeInclusion() == JsonTypeInfo.As.EXTERNAL_PROPERTY) {        if (extTypes == null) {          extTypes=new ExternalTypeHandler.Builder();        }        extTypes.addExternal(prop,typeDeser.getPropertyName());        _beanProperties.remove(prop);      }    }  }  if (_anySetter != null && !_anySetter.hasValueDeserializer()) {    _anySetter=_anySetter.withValueDeserializer(findDeserializer(config,provider,_anySetter.getType(),_anySetter.getProperty()));  }  if (_valueInstantiator.canCreateUsingDelegate()) {    JavaType delegateType=_valueInstantiator.getDelegateType();    if (delegateType == null) {      throw new IllegalArgumentException("Invalid delegate-creator definition for " + _beanType + ": value instantiator ("+ _valueInstantiator.getClass().getName()+ ") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'");    }    AnnotatedWithParams delegateCreator=_valueInstantiator.getDelegateCreator();    BeanProperty.Std property=new BeanProperty.Std(null,delegateType,_forClass.getAnnotations(),delegateCreator);    _delegateDeserializer=findDeserializer(config,provider,delegateType,property);  }  if (_propertyBasedCreator != null) {    for (    SettableBeanProperty prop : _propertyBasedCreator.getCreatorProperties()) {      if (!prop.hasValueDeserializer()) {        _propertyBasedCreator.assignDeserializer(prop,findDeserializer(config,provider,prop.getType(),prop));      }    }  }  if (extTypes != null) {    _externalTypeIdHandler=extTypes.build();    _nonStandardCreation=true;  }  _unwrappedPropertyHandler=unwrapped;  if (unwrapped != null) {    _nonStandardCreation=true;  }}  }
class C{  public void clearPieSegments(){  mPieSegmentList.clear();}  }
class C{  public void addTarget(Point target){  targets.add(target);}  }
class C{  private StyledString appendUnboundedParameterList(StyledString buffer,CompletionProposal methodProposal){  char[] signature=SignatureUtil.fix83600(methodProposal.getSignature());  char[][] parameterNames=methodProposal.findParameterNames(null);  char[][] parameterTypes=Signature.getParameterTypes(signature);  for (int i=0; i < parameterTypes.length; i++)   parameterTypes[i]=createTypeDisplayName(SignatureUtil.getLowerBound(parameterTypes[i]));  if (Flags.isVarargs(methodProposal.getFlags())) {    int index=parameterTypes.length - 1;    parameterTypes[index]=convertToVararg(parameterTypes[index]);  }  return appendParameterSignature(buffer,parameterTypes,parameterNames);}  }
class C{  public static int encode(byte[] data,int off,int length,OutputStream out) throws IOException {  return encoder.encode(data,off,length,out);}  }
class C{  public boolean merge(final Frame<? extends V> frame,final boolean[] access){  boolean changes=false;  for (int i=0; i < locals; ++i) {    if (!access[i] && !values[i].equals(frame.values[i])) {      values[i]=frame.values[i];      changes=true;    }  }  return changes;}  }
class C{  public void readHeaders() throws IOException {  if (!hasNext())   throw new IOException("No more rows");  headers=parseHeaders(line);  line=null;}  }
class C{  public static void writeProperties(Properties props,OutputStream out,boolean includeDefaults) throws IOException {  if (includeDefaults) {    Properties all=new Properties();    Enumeration<?> propNames=props.propertyNames();    while (propNames.hasMoreElements()) {      String propName=(String)propNames.nextElement();      String propValue=props.getProperty(propName);      all.put(propName,propValue);    }    props=all;  }  try {    props.store(out,null);  }  finally {    out.close();  }}  }
class C{  public BOpFilterNOP(BOp[] args,Map<String,Object> annotations){  super(args,annotations);}  }
class C{  public static Long selectLong(XPathExpression expr,Node context){  String value=selectText(expr,context);  if (StringUtils.isNotBlank(value)) {    try {      return Long.parseLong(value);    } catch (    NumberFormatException e) {      return null;    }  } else {    return null;  }}  }
class C{  @Override public int isNullable(int column) throws SQLException {  try {    debugCodeCall("isNullable",column);    checkColumnIndex(column);    return result.getNullable(--column);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public StateSnapshot copy(){  StateSnapshot ss=new StateSnapshot();  ss.setAvailableMem(this.availableMem);  ss.setConnections(this.connections);  ss.setIotime(iotime);  ss.setLoadAverage(loadAverage);  ss.setSyscputime(syscputime);  ss.setSoftirqtime(softirqtime);  ss.setThreads(threads);  ss.setTimestamp(timestamp);  ss.setUsercputime(usercputime);  ss.setSlowQueryCount(slowQueryCount);  ss.setActiveThreads(activeThreads);  ss.setTotalcputime(totalcputime);  ss.setReplLag(replLag);  ss.setQueries(queries);  ss.setQuestions(questions);  ss.setAbortedConnectsClients(abortedConnectsClients);  ss.setReplIo(this.replIo);  ss.setReplSql(this.replSql);  ss.setDeadlocks(deadlocks);  ss.setSwapout(this.swapout);  ss.setUptime(uptime);  ss.setMax_conn_error(max_conn_error);  if (this.metricsMap != null)   for (  Map.Entry<String,Float> e : this.metricsMap.entrySet())   ss.addMetric(e.getKey(),e.getValue());  return ss;}  }
class C{  public void addPath(int[] path){  paths.add(path);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case MappingPackage.FUNCTION_BLOCK_SOURCE__MODEL:    setModel((FunctionblockModel)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  private void typeInsn(final int opcode,final Type type){  mv.visitTypeInsn(opcode,type.getInternalName());}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  protected boolean mustRecomputeTreeLayout(Dimension frameSize){  return this.mustRecomputeLayout || this.previousFrameSize == null || this.previousFrameSize.width != frameSize.width;}  }
class C{  protected boolean isCreate(){  return this.operation == null ? this.action == CREATE_ACTION : this.operation == EnumListenerEvent.AFTER_CREATE;}  }
class C{  protected void updateRendering(List areas,boolean clearPaintingTransform){  try {    UpdateManagerEvent ev=new UpdateManagerEvent(this,repaintManager.getOffScreen(),null);    fireEvent(updateStartedDispatcher,ev);    Collection c=repaintManager.updateRendering(areas);    List l=new ArrayList(c);    ev=new UpdateManagerEvent(this,repaintManager.getOffScreen(),l,clearPaintingTransform);    fireEvent(updateCompletedDispatcher,ev);  } catch (  ThreadDeath td) {    UpdateManagerEvent ev=new UpdateManagerEvent(this,null,null);    fireEvent(updateFailedDispatcher,ev);    throw td;  }catch (  Throwable t) {    UpdateManagerEvent ev=new UpdateManagerEvent(this,null,null);    fireEvent(updateFailedDispatcher,ev);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public String collapseTreeTipText(){  return "Whether parts are removed that do not reduce training error.";}  }
class C{  public Envelope(Coordinate p1,Coordinate p2){  init(p1.x,p2.x,p1.y,p2.y);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodedocumentfragmentnormalize1.class,args);}  }
class C{  public static XorMappedAddressAttribute createXorMappedAddressAttribute(TransportAddress address,byte[] tranID){  XorMappedAddressAttribute attribute=new XorMappedAddressAttribute();  attribute.setAddress(address,tranID);  return attribute;}  }
class C{  public static String chopNewline(String str){  int lastIdx=str.length() - 1;  if (lastIdx <= 0) {    return EMPTY;  }  char last=str.charAt(lastIdx);  if (last == CharUtils.LF) {    if (str.charAt(lastIdx - 1) == CharUtils.CR) {      lastIdx--;    }  } else {    lastIdx++;  }  return str.substring(0,lastIdx);}  }
class C{  public JSONArray put(boolean value){  this.put(value ? Boolean.TRUE : Boolean.FALSE);  return this;}  }
class C{  public DcwRecordFile(String name) throws FormatException {  this(name,false);}  }
class C{  public static AbstractList<String> indexNameList(Entity entity){  final AbstractList<String> indexNameList=new ArrayList<>(entity.getIndexes().size());  for (  Index index : entity.getIndexes()) {    indexNameList.add(index.getName());  }  return indexNameList;}  }
class C{  public Space S(ExpressionAST expression) throws ScopeException {  IDomain image=expression.getImageDomain();  if (image.isInstanceOf(IDomain.OBJECT)) {    Object adapter=image.getAdapter(Domain.class);    if (adapter != null && adapter instanceof Domain) {      if (expression instanceof Compose) {        Compose compose=(Compose)expression;        Space result=this;        for (        ExpressionAST part : compose.getBody()) {          if (part instanceof RelationReference) {            RelationReference ref=(RelationReference)part;            result=result.S(ref.getRelation());          } else {            throw new ScopeException("Invalid expression");          }        }        return result;      } else       if (expression instanceof RelationReference) {        RelationReference ref=(RelationReference)expression;        return S(ref.getRelation());      } else {        throw new ScopeException("Invalid expression");      }    }  }  throw new ScopeException("Invalid expression type, must be a Domain Object");}  }
class C{  public static void installToolBarPrefsHandler(final Preferences prefs,final String name,JToolBar toolbar){  new ToolBarPrefsHandler(toolbar,name,prefs);}  }
class C{  public TextImpl replaceWithText(){  TextImpl replacement=new TextImpl(document,getData());  parent.insertBefore(replacement,this);  parent.removeChild(this);  return replacement;}  }
class C{  private byte[] decodePEM(InputStream inStream,byte[] boundary_suffix) throws IOException {  int ch;  for (int i=1; i < PEM_BEGIN.length; ++i) {    if (PEM_BEGIN[i] != (ch=inStream.read())) {      throw new IOException("Incorrect PEM encoding: '-----BEGIN" + ((boundary_suffix == null) ? "" : new String(boundary_suffix)) + "' is expected as opening delimiter boundary.");    }  }  if (boundary_suffix == null) {    while ((ch=inStream.read()) != '\n') {      if (ch == -1) {        throw new IOException("Incorrect PEM encoding: EOF before content");      }    }  } else {    for (int i=0; i < boundary_suffix.length; i++) {      if (boundary_suffix[i] != inStream.read()) {        throw new IOException("Incorrect PEM encoding: '-----BEGIN" + new String(boundary_suffix) + "' is expected as opening delimiter boundary.");      }    }    if ((ch=inStream.read()) == '\r') {      ch=inStream.read();    }    if (ch != '\n') {      throw new IOException("Incorrect PEM encoding: newline expected after " + "opening delimiter boundary");    }  }  int size=1024;  byte[] buff=new byte[size];  int index=0;  while ((ch=inStream.read()) != '-') {    if (ch == -1) {      throw new IOException("Incorrect Base64 encoding: EOF without closing delimiter");    }    buff[index++]=(byte)ch;    if (index == size) {      byte[] newbuff=new byte[size + 1024];      System.arraycopy(buff,0,newbuff,0,size);      buff=newbuff;      size+=1024;    }  }  if (buff[index - 1] != '\n') {    throw new IOException("Incorrect Base64 encoding: newline expected before " + "closing boundary delimiter");  }  for (int i=1; i < PEM_END.length; ++i) {    if (PEM_END[i] != inStream.read()) {      throw badEnd(boundary_suffix);    }  }  if (boundary_suffix == null) {    while (((ch=inStream.read()) != -1) && (ch != '\n') && (ch != '\r')) {    }  } else {    for (int i=0; i < boundary_suffix.length; i++) {      if (boundary_suffix[i] != inStream.read()) {        throw badEnd(boundary_suffix);      }    }  }  inStream.mark(1);  while (((ch=inStream.read()) != -1) && (ch == '\n' || ch == '\r')) {    inStream.mark(1);  }  inStream.reset();  buff=Base64.decode(buff,index);  if (buff == null) {    throw new IOException("Incorrect Base64 encoding");  }  return buff;}  }
class C{  public void reset(){  count=0;}  }
class C{  public static void adjustColor(final INaviEdge edge){switch (edge.getType()) {case JUMP_CONDITIONAL_FALSE:    edge.setColor(ConfigManager.instance().getColorSettings().getConditionalJumpFalseColor());  return;case JUMP_CONDITIONAL_FALSE_LOOP:edge.setColor(ConfigManager.instance().getColorSettings().getConditionalJumpFalseColor());return;case JUMP_CONDITIONAL_TRUE:edge.setColor(ConfigManager.instance().getColorSettings().getConditionalJumpTrueColor());return;case JUMP_CONDITIONAL_TRUE_LOOP:edge.setColor(ConfigManager.instance().getColorSettings().getConditionalJumpTrueColor());return;case JUMP_UNCONDITIONAL_LOOP:edge.setColor(ConfigManager.instance().getColorSettings().getUnconditionalJumpColor());return;case ENTER_INLINED_FUNCTION:edge.setColor(ConfigManager.instance().getColorSettings().getEnterInlinedJumpColor());return;case LEAVE_INLINED_FUNCTION:edge.setColor(ConfigManager.instance().getColorSettings().getLeaveInlinedJumpColor());return;case TEXTNODE_EDGE:edge.setColor(ConfigManager.instance().getColorSettings().getTextEdgeColor());return;case JUMP_SWITCH:edge.setColor(ConfigManager.instance().getColorSettings().getSwitchJumpColor());return;default :edge.setColor(ConfigManager.instance().getColorSettings().getUnconditionalJumpColor());return;}}  }
class C{  public static RichDiagnosticFormatter instance(Context context){  RichDiagnosticFormatter instance=context.get(RichDiagnosticFormatter.class);  if (instance == null)   instance=new RichDiagnosticFormatter(context);  return instance;}  }
class C{  public boolean hasTag(){  if (parameters == null)   return false;  return hasParameter(ParameterNames.TAG);}  }
class C{  public boolean visitUnionPattern(ExpressionOwner owner,UnionPattern pattern){  return true;}  }
class C{  public boolean hasNavigtionBar(){  return mHasNavigationBar;}  }
class C{  public void openSequence() throws BerException {  openSequence(SequenceTag);}  }
class C{  private Expression createDomainValueExpression(Expression... expressions){  return new ArrayCreationExpr(type.toBoxedType(),1,new ArrayInitializerExpr(Arrays.asList(expressions)));}  }
