class C{  public boolean EQ(Word w2){  return value.EQ(w2.value);}  }
class C{  private void handleServiceUnavailable(State state,HttpResponse response) throws StopRequest {  if (Constants.LOGVV) {    Log.v(Constants.TAG,"got HTTP response code 503");  }  state.mCountRetry=true;  Header header=response.getFirstHeader("Retry-After");  if (header != null) {    try {      if (Constants.LOGVV) {        Log.v(Constants.TAG,"Retry-After :" + header.getValue());      }      state.mRetryAfter=Integer.parseInt(header.getValue());      if (state.mRetryAfter < 0) {        state.mRetryAfter=0;      } else {        if (state.mRetryAfter < Constants.MIN_RETRY_AFTER) {          state.mRetryAfter=Constants.MIN_RETRY_AFTER;        } else         if (state.mRetryAfter > Constants.MAX_RETRY_AFTER) {          state.mRetryAfter=Constants.MAX_RETRY_AFTER;        }        state.mRetryAfter+=Helpers.sRandom.nextInt(Constants.MIN_RETRY_AFTER + 1);        state.mRetryAfter*=1000;      }    } catch (    NumberFormatException ex) {    }  }  throw new StopRequest(DownloaderService.STATUS_WAITING_TO_RETRY,"got 503 Service Unavailable, will retry later");}  }
class C{  public static int findOrCreateIntSizeLiteral(int literal){  final int bottom=getLowestInUseSlot();  final int top=middleOfTable;  for (int i=top; i >= bottom; i--) {    if ((slots[i] == literal) && !numericFieldVector.get(i) && (i != numericSlotHole)) {      return slotAsOffset(i).toInt();    }  }  Offset newOff=allocateNumericSlot(BYTES_IN_INT,false);  setSlotContents(newOff,literal);  return newOff.toInt();}  }
class C{  public void addMeal(View view){}  }
class C{  public File createPDF(){  try {    File temp=File.createTempFile(get_TableName() + get_ID() + "_",".pdf");    return createPDF(temp);  } catch (  Exception e) {    log.severe("Could not create PDF - " + e.getMessage());  }  return null;}  }
class C{  public void logMakeDirectory(IgfsPath path,IgfsMode mode){  addEntry(new Entry(TYPE_DIR_MAKE,path.toString(),mode,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null));}  }
class C{  TestValue(Object key,Object id){  this.key=key;  someData=key + "_" + id+ "_"+ System.currentTimeMillis();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case BasePackage.NAMED_ELEMENT__NAME:    return getName();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public boolean equals(Object another){  if (another instanceof Permission) {    Permission p=(Permission)another;    return permission.equals(p.toString());  } else {    return false;  }}  }
class C{  static public boolean lt(double v1,double v2){  return (v2 - v1) > VERY_SMALL_VALUE;}  }
class C{  public void readFromElement(Element rootElement){  NamedNodeMap attributes=rootElement.getAttributes();  for (int i=0; i < attributes.getLength(); i++) {    Node item=attributes.item(i);    String namespace=item.getNamespaceURI();    if (namespace == null || !namespace.equals(UiBinderConstants.XMLNS_NAMESPACE)) {      continue;    }    String value=item.getNodeValue();    if (value == null || !value.startsWith(UiBinderConstants.URN_IMPORT_NAMESPACE_BEGINNING)) {      continue;    }    String packageName=value.substring(UiBinderConstants.URN_IMPORT_NAMESPACE_BEGINNING.length());    String nodeName=item.getNodeName();    String prefix=item.getPrefix() + ":";    if (prefix != null && nodeName.startsWith(prefix)) {      nodeName=nodeName.substring(prefix.length());    }    packageNameToPrefix.addElement(packageName,nodeName);  }}  }
class C{  public final boolean containsKey(String name){  return mMap.containsKey(name);}  }
class C{  public static Extent freeMemory(){  return Plan.freeMemory();}  }
class C{  private int compareObjects(Object a,Object b){  if (a instanceof Comparable) {    return ((Comparable)a).compareTo(b);  }  return 0;}  }
class C{  public void testCreate_3args_3_2(){  System.out.println("create GroupOfPagesAuditCommand without crawler");  String siteUrl="";  List<String> pageUrlList=new ArrayList<String>();  Set<Parameter> paramSet=null;  auditCommandFactory.setAuditPageWithCrawler(false);  AuditCommand result=this.auditCommandFactory.create(siteUrl,pageUrlList,paramSet);  assertTrue(result instanceof GroupOfPagesAuditCommandImpl);  EasyMock.verify(mockAuditDataService);  EasyMock.verify(mockAudit);}  }
class C{  int branch(int[] flags) throws RESyntaxException {  int node;  int ret=-1;  int chain=-1;  int[] closureFlags=new int[1];  boolean nullable=true;  while (idx < len && pattern.charAt(idx) != '|' && pattern.charAt(idx) != ')') {    closureFlags[0]=NODE_NORMAL;    node=closure(closureFlags);    if (closureFlags[0] == NODE_NORMAL) {      nullable=false;    }    if (chain != -1) {      setNextOfEnd(chain,node);    }    chain=node;    if (ret == -1) {      ret=node;    }  }  if (ret == -1) {    ret=node(RE.OP_NOTHING,0);  }  if (nullable) {    flags[0]|=NODE_NULLABLE;  }  return ret;}  }
class C{  public boolean isDisplayedGrid(){  return m_vo.IsDisplayedGrid;}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  protected void fireDOMSubtreeModifiedEvent(){  AbstractDocument doc=getCurrentDocument();  if (doc.getEventsEnabled()) {    DOMMutationEvent ev=(DOMMutationEvent)doc.createEvent("MutationEvents");    ev.initMutationEventNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMSubtreeModified",true,false,null,null,null,null,MutationEvent.MODIFICATION);    dispatchEvent(ev);  }}  }
class C{  public void testConstructor(){  LongAdder ai=new LongAdder();  assertEquals(0,ai.sum());}  }
class C{  public void evaluateClusterer(Instances test) throws Exception {  evaluateClusterer(test,"");}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.634 -0400",hash_original_method="FE81CA629F548A2360BBC608169A9827",hash_generated_method="EBA2D632EC8A90AB1633D730AB27A639") public AgeFileFilter(File cutoffReference,boolean acceptOlder){  this(cutoffReference.lastModified(),acceptOlder);}  }
class C{  public static int lineHeight(final FontRenderer renderer){  return renderer.FONT_HEIGHT + 1;}  }
class C{  private IPath createRelativePath(IPath location,IResource resource){  if (relativeVariable == null)   return location;  if (relativeVariable.equals(ABSOLUTE_PATH))   return location;  IPathVariableManager pathVariableManager=resource.getPathVariableManager();  try {    return URIUtil.toPath(pathVariableManager.convertToRelative(URIUtil.toURI(location),true,relativeVariable));  } catch (  CoreException e) {    return location;  }}  }
class C{  @Override public Socket createSocket(String host,int port) throws IOException, UnknownHostException {  return new SSLSocketImpl(context,host,port);}  }
class C{  final public int loadUnsigned8(int addr){  try {    if (logMemoryMessages)     System.err.println("LoadU8 address: 0x" + Integer.toHexString(addr) + " val: "+ readableMemory[getPTE(addr)][getOffset(addr)]);    byte[] pageData=readableMemory[getPTE(addr)];    if (pageData == null) {      map(truncateToPage(addr),PAGE_SIZE,true,true,true);      pageData=readableMemory[getPTE(addr)];    }    return pageData[getOffset(addr)] & 0xFF;  } catch (  NullPointerException e) {    throw new MemoryException("Memory not initialized trying to read data from address: 0x" + Integer.toHexString(addr));  }}  }
class C{  public static void shuffle(double[] a,int lo,int hi){  if (lo < 0 || lo > hi || hi >= a.length)   throw new RuntimeException("Illegal subarray range");  for (int i=lo; i <= hi; i++) {    int r=i + uniform(hi - i + 1);    double temp=a[i];    a[i]=a[r];    a[r]=temp;  }}  }
class C{  public static int compareValuesCollated(Object valueOne,Object valueTwo,boolean isDescending,Collator collator){  if (valueOne == null || valueTwo == null) {    if (valueOne == null && valueTwo == null) {      return 0;    }    if (valueOne == null) {      if (isDescending) {        return 1;      }      return -1;    }    if (isDescending) {      return -1;    }    return 1;  }  if (isDescending) {    return collator.compare(valueTwo,valueOne);  }  return collator.compare(valueOne,valueTwo);}  }
class C{  protected Request send(Request request,Endpoint outEndpoint){  if (blockwise != 0) {    request.getOptions().setBlock2(new BlockOption(BlockOption.size2Szx(this.blockwise),false,0));  }  outEndpoint.sendRequest(request);  return request;}  }
class C{  @SuppressWarnings("unused") public static void blackhole(short value){}  }
class C{  public void updateComboBox(JComboBox<Automation> box){  box.removeAllItems();  box.addItem(null);  for (  Automation automation : getAutomationsByNameList()) {    box.addItem(automation);  }}  }
class C{  private void createViewToolbar(){  IToolBarManager toolBarManager=getViewSite().getActionBars().getToolBarManager();  toolBarManager.add(new ShowAgentsAction());  toolBarManager.add(new ShowPropertiesAction());  toolBarManager.add(new Separator());}  }
class C{  public synchronized boolean next(Writable key,Writable val) throws IOException {  if (val.getClass() != WALEntry.class) {    throw new IOException("wrong value class: " + val + " is not "+ WALEntry.class);  }  boolean more=next(key);  if (more) {    getCurrentValue(val);  }  return more;}  }
class C{  public static void writeShort(byte[] memory,int index,short value){  memory[index + 0]=(byte)((value >> (8 * 1)) & 0xFF);  memory[index + 1]=(byte)(value & 0xFF);}  }
class C{  public MbFanSearchRunner(Graph graph,Parameters params){  super(graph,params);}  }
class C{  @Override protected void haltOp(final IHaltOpMessage msg){  lock.lock();  try {    super.haltOp(msg);    consumeChunk();  }  finally {    lock.unlock();  }}  }
class C{  public static Entity parsePlayerByName(String name) throws PlayerNotFoundException {  EntityPlayerMP player=MinecraftServer.getServer().getConfigurationManager().func_152612_a(name);  if (player != null) {    return player;  }  throw new PlayerNotFoundException("lookingglass.commands.generic.player.notfound",new Object[]{name});}  }
class C{  public ElementContainer addElement(Element element){  ec.addElement(element);  return (this);}  }
class C{  private void prepareDockerCli(){  clientConfig=createDefaultConfigBuilder().build();  dockerCmdExecFactory=new JerseyDockerCmdExecFactory().withConnectTimeout(10 * 1000);  dockerClient=DockerClientBuilder.getInstance(clientConfig).withDockerCmdExecFactory(dockerCmdExecFactory).build();}  }
class C{  private void cut(final char[] revA,final DiffBlock curA){  String text=copy(revA,curA.getRevAStart(),curA.getRevAEnd());  DiffPart action=new DiffPart(DiffAction.CUT);  action.setStart(version.length());  codecData.checkBlocksizeS(version.length());  action.setLength(curA.getRevAEnd() - curA.getRevAStart());  codecData.checkBlocksizeE(action.getLength());  action.setText(Integer.toString(curA.getId()));  codecData.checkBlocksizeB(curA.getId());  diff.add(action);  bufferMap.put(curA.getId(),text);}  }
class C{  public static String format(final Date date,final String pattern,final Locale locale){  return format(date,pattern,null,locale);}  }
class C{  public void warn(Throwable throwable,String msg,Object arg0){  innerLog(Level.WARNING,throwable,msg,arg0,UNKNOWN_ARG,UNKNOWN_ARG,null);}  }
class C{  public String format(int number,int decimalPlaces){  StringBuilder sb=new StringBuilder();  int paddingRequired=decimalPlaces - (String.valueOf(number).length());  for (int x=0; x < paddingRequired; x++) {    sb.append("0");  }  sb.append(number);  return sb.toString();}  }
class C{  public static void replaceWords(ArrayList<File> file) throws FileNotFoundException {  for (int i=0; i < file.size(); i++) {    ArrayList<String> list=new ArrayList<>();    try (Scanner input=new Scanner(file.get(i))){      while (input.hasNext()) {        String word=input.nextLine();        if (word.contains("Exercise")) {          list.add(pad(word));        } else         list.add(word);      }    }     try (PrintWriter output=new PrintWriter(file.get(i))){      for (int j=0; j < list.size(); j++) {        output.println(list.get(j));      }    }   }}  }
class C{  public void pop(){  Deque<TaskContext> stack=contextStacks.get();  if (stack == null) {    throw new IllegalStateException("Invalid execution context stack state: " + stack + " trying to remove: "+ this);  }  final TaskContext last=stack.pollLast();  if (last != this) {    if (last != null) {      stack.addLast(last);    }    throw new IllegalStateException("Invalid execution context stack state: " + stack + " trying to remove: "+ this+ " but got: "+ last);  }}  }
class C{  public static void clear(View view){  view.setOnTouchListener(null);}  }
class C{  public UniversalDataSource addAndPrepare(String name,String className,TungstenProperties attributes) throws InterruptedException, ReplicatorException {  UniversalDataSource ds=this.add(name,className,attributes);  ds.configure();  ds.prepare();  return ds;}  }
class C{  public boolean isRunnable(){  return runnable;}  }
class C{  public boolean isEnd() throws IOException {  int code=read();  _peek=code;  return (code < 0 || code == 'z');}  }
class C{  public void addAccessibleSelection(int i){  if (i < 0 || i >= getItemCount()) {    return;  }  JMenuItem mi=getItem(i);  if (mi != null) {    if (mi instanceof JMenu) {      MenuElement me[]=buildMenuElementArray((JMenu)mi);      MenuSelectionManager.defaultManager().setSelectedPath(me);    } else {      MenuSelectionManager.defaultManager().setSelectedPath(null);    }  }}  }
class C{  @Override public boolean equals(Object obj){  if (!(obj instanceof AbstractSerializableNestedObject)) {    return false;  }  return _field.equals(((AbstractSerializableNestedObject)obj)._field);}  }
class C{  public void accept(final MethodVisitor mv){  AbstractInsnNode insn=first;  while (insn != null) {    insn.accept(mv);    insn=insn.next;  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypesPackage.TENUM_LITERAL__NAME:    setName(NAME_EDEFAULT);  return;case TypesPackage.TENUM_LITERAL__VALUE:setValue(VALUE_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  @Override public final boolean onCreateOptionsMenu(final Menu menu){  final MenuInflater inflater=getMenuInflater();  inflater.inflate(R.menu.main_menu,menu);  return true;}  }
class C{  public static String addressAndSpaceString(ObjectReference ref){  return String.format("%s/%s",ref,Space.getSpaceForObject(ref).getName());}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean isSkip(){  return skip;}  }
class C{  private String formatString(String toFormat){  String ret="";  char[] chars=toFormat.toCharArray();  ret+=Character.toString(chars[0]).toUpperCase();  for (int i=1; i < chars.length; i++) {    if (Character.isUpperCase(chars[i])) {      ret+=" " + Character.toString(chars[i]).toUpperCase();    } else {      ret+=Character.toString(chars[i]);    }  }  return ret;}  }
class C{  public int readLittleEndianUnsignedShort(){  return (data[position++] & 0xFF) | (data[position++] & 0xFF) << 8;}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,0,isTouchEvent);}  }
class C{  public static float clamp(float x,float min,float max){  if (x > max) {    return max;  }  if (x < min) {    return min;  }  return x;}  }
class C{  private void insertLineSource(int line){  log.info("Line=" + line + " - "+ m_lines[line]);  if (m_lines[line] == null || m_lines[line].getSources().length == 0)   return;  String variable=m_lines[line].getSourceColumnName();  if (variable == null)   return;  log.fine("Variable=" + variable);  StringBuffer insert=new StringBuffer("INSERT INTO T_Report " + "(AD_PInstance_ID, PA_ReportLine_ID, Record_ID,Fact_Acct_ID,LevelNo ");  for (int col=0; col < m_columns.length; col++)   insert.append(",Col_").append(col);  insert.append(") SELECT ").append(getAD_PInstance_ID()).append(",").append(m_lines[line].getPA_ReportLine_ID()).append(",").append(variable).append(",0,");  if (p_DetailsSourceFirst)   insert.append("-1 "); else   insert.append("1 ");  for (int col=0; col < m_columns.length; col++) {    insert.append(", ");    if (m_columns[col].isColumnTypeCalculation()) {      insert.append("NULL");      continue;    }    StringBuffer select=new StringBuffer("SELECT ");    if (m_lines[line].getPAAmountType() != null)     select.append(m_lines[line].getSelectClause(true)); else     if (m_columns[col].getPAAmountType() != null)     select.append(m_columns[col].getSelectClause(true)); else {      insert.append("NULL");      continue;    }    if (p_PA_ReportCube_ID > 0) {      select.append(" FROM Fact_Acct_Summary fb WHERE DateAcct ");    } else {      select.append(" FROM Fact_Acct fb WHERE TRUNC(DateAcct, 'DD') ");    }    FinReportPeriod frp=getPeriod(m_columns[col].getRelativePeriod());    if (m_lines[line].getPAPeriodType() != null) {      if (m_lines[line].isPeriod())       select.append(frp.getPeriodWhere()); else       if (m_lines[line].isYear())       select.append(frp.getYearWhere()); else       if (m_lines[line].isNatural())       select.append(frp.getNaturalWhere("fb")); else       select.append(frp.getTotalWhere());    } else     if (m_columns[col].getPAPeriodType() != null) {      if (m_columns[col].isPeriod())       select.append(frp.getPeriodWhere()); else       if (m_columns[col].isYear())       select.append(frp.getYearWhere()); else       if (m_columns[col].isNatural())       select.append(frp.getNaturalWhere("fb")); else       select.append(frp.getTotalWhere());    }    select.append(" AND fb.").append(variable).append("=x.").append(variable);    if (!m_lines[line].isPostingType()) {      String PostingType=m_columns[col].getPostingType();      if (PostingType != null && PostingType.length() > 0)       select.append(" AND fb.PostingType='").append(PostingType).append("'");      if (PostingType.equals(MReportColumn.POSTINGTYPE_Budget)) {        if (m_columns[col].getGL_Budget_ID() > 0)         select.append(" AND GL_Budget_ID=" + m_columns[col].getGL_Budget_ID());      }    }    String s=m_report.getWhereClause();    if (s != null && s.length() > 0)     select.append(" AND ").append(s);    if (m_columns[col].isColumnTypeSegmentValue())     select.append(m_columns[col].getWhereClause(p_PA_Hierarchy_ID));    select.append(m_parameterWhere);    insert.append("(").append(select).append(")");  }  StringBuffer where=new StringBuffer(m_lines[line].getWhereClause(p_PA_Hierarchy_ID));  String s=m_report.getWhereClause();  if (s != null && s.length() > 0) {    if (where.length() > 0)     where.append(" AND ");    where.append(s);  }  if (where.length() > 0)   where.append(" AND ");  where.append(variable).append(" IS NOT NULL");  if (p_PA_ReportCube_ID > 0)   insert.append(" FROM Fact_Acct_Summary x WHERE ").append(where); else   insert.append(" FROM Fact_Acct x WHERE ").append(where);  insert.append(m_parameterWhere).append(" GROUP BY ").append(variable);  int no=DB.executeUpdate(insert.toString(),get_TrxName());  if (CLogMgt.isLevelFinest())   log.fine("Source #=" + no + " - "+ insert);  if (no == 0)   return;  StringBuffer sql=new StringBuffer("UPDATE T_Report SET (Name,Description)=(").append(m_lines[line].getSourceValueQuery()).append("T_Report.Record_ID) " + "WHERE Record_ID <> 0 AND AD_PInstance_ID=").append(getAD_PInstance_ID()).append(" AND PA_ReportLine_ID=").append(m_lines[line].getPA_ReportLine_ID()).append(" AND Fact_Acct_ID=0");  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (CLogMgt.isLevelFinest())   log.fine("Name #=" + no + " - "+ sql.toString());  if (m_report.isListTrx())   insertLineTrx(line,variable);}  }
class C{  public DrmErrorEvent(int uniqueId,int type,String message,HashMap<String,Object> attributes){  super(uniqueId,type,message,attributes);  checkTypeValidity(type);}  }
class C{  public Builder vertexIdProperty(final String name){  configuration.setProperty(BULK_LOADER_VERTEX_ID_CFG_KEY,name);  return this;}  }
class C{  public void addExtension(ASN1ObjectIdentifier oid,boolean critical,ASN1Encodable value) throws IOException {  this.addExtension(oid,critical,value.toASN1Primitive().getEncoded(ASN1Encoding.DER));}  }
class C{  private static AnnotationType inferTargetMetaInfo(Attribute.Compound a,Symbol s){  return AnnotationType.DECLARATION;}  }
class C{  private void cancelAlarm(Context context){  cancelAlarmOnSystem(context,getPendingAlarmIntent(context));}  }
class C{  public ComplexDecibelConverter(){}  }
class C{  private void createBlockMirrorData(String name,int numBlockMirrors) throws Exception {  Volume volume=new Volume();  URI volumeURI=URIUtil.createId(Volume.class);  testVolumeURIs.add(volumeURI);  volume.setId(volumeURI);  volume.setLabel("blockMirrorVolume");  URI cgUri=createBlockConsistencyGroup("blockMirrorVolume-cg");  volume.setConsistencyGroup(cgUri);  _dbClient.createObject(volume);  for (int i=1; i <= numBlockMirrors; i++) {    BlockMirror blockMirror=new BlockMirror();    URI blockMirrorURI=URIUtil.createId(BlockMirror.class);    testBlockMirrorURIs.add(blockMirrorURI);    blockMirror.setId(blockMirrorURI);    blockMirror.setLabel(name + i);    blockMirror.setConsistencyGroup(cgUri);    _dbClient.createObject(blockMirror);  }}  }
class C{  public SVGFeMergeNodeElementBridge(){}  }
class C{  public synchronized Optional<SnapshotMetaData> release(String name) throws IOException {  log.info("Deleting the snapshot named {} for core {}",name,solrCore.getName());  SnapshotMetaData result=nameToDetailsMapping.remove(Preconditions.checkNotNull(name));  if (result != null) {    boolean success=false;    try {      persist();      success=true;    }  finally {      if (!success) {        nameToDetailsMapping.put(name,result);      }    }  }  return Optional.ofNullable(result);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case ImPackage.SYMBOL_TABLE_ENTRY__NAME:    setName(NAME_EDEFAULT);  return;case ImPackage.SYMBOL_TABLE_ENTRY__ELEMENTS_OF_THIS_NAME:getElementsOfThisName().clear();return;case ImPackage.SYMBOL_TABLE_ENTRY__REFERENCING_ELEMENTS:getReferencingElements().clear();return;}super.eUnset(featureID);}  }
class C{  public boolean isEmpty(){  return banners == null || banners.isEmpty();}  }
class C{  public InventoryLine(ProductInfoExt oProduct){  m_sProdID=oProduct.getID();  m_sProdName=oProduct.getName();  m_dMultiply=1.0;  m_dPrice=oProduct.getPriceBuy();  attsetid=oProduct.getAttributeSetID();  attsetinstid=null;  attsetinstdesc=null;}  }
class C{  public URI(final URI base,final String relative,final boolean escaped) throws URIException {  this(base,new URI(relative,escaped));}  }
class C{  public void makeClass(IntCharSet set,boolean caseless){  if (caseless)   set=set.getCaseless();  if (DEBUG) {    Out.dump("makeClass(" + set + ")");    dump();  }  int oldSize=classes.size();  for (int i=0; i < oldSize; i++) {    IntCharSet x=(IntCharSet)classes.elementAt(i);    if (x.equals(set))     return;    IntCharSet and=x.and(set);    if (and.containsElements()) {      if (x.equals(and)) {        set.sub(and);        continue;      } else       if (set.equals(and)) {        x.sub(and);        classes.addElement(and);        if (DEBUG) {          Out.dump("makeClass(..) finished");          dump();        }        return;      }      set.sub(and);      x.sub(and);      classes.addElement(and);    }  }  if (DEBUG) {    Out.dump("makeClass(..) finished");    dump();  }}  }
class C{  public int padCount(byte[] in) throws InvalidCipherTextException {  int count=in[in.length - 1] & 0xff;  if (count > in.length) {    throw new InvalidCipherTextException("pad block corrupted");  }  return count;}  }
class C{  public static <K>ImmutableArray<K> create(K... array){  return new ImmutableArray<K>(array);}  }
class C{  @Override public void init(ActionListener doneAction){  super.init(doneAction);  add(_iconFamilyPanel,0);  _buttonPosition=0;}  }
class C{  public boolean isConfigPort(){  return configPort;}  }
class C{  public XmlDom tag(String tag){  NodeList nl=root.getElementsByTagName(tag);  XmlDom result=null;  if (nl != null && nl.getLength() > 0) {    result=new XmlDom((Element)nl.item(0));  }  return result;}  }
class C{  private void askTakePhoto(){  Activity activity=getActivity();  if (activity != null && CameraUtil.hasCameraAny(activity)) {    new NewProductDialogFragment().show(getChildFragmentManager(),"NewProductDialogFragment");  }}  }
class C{  public EtagCache resetStats(){  hits.set(0);  misses.set(0);  return this;}  }
class C{  public String sqlMetadata_sequenceDefinitions(String vendorName,String catalogName,String schemaName,String sequenceName){  return m_interfaces.get(getDBVendorID(vendorName)).sqlMetadata_sequenceDefinitions(catalogName,schemaName,sequenceName);}  }
class C{  public void writeTerminatingSequence() throws IOException {  if (lastBytes[0] == '\r' && lastBytes[1] == '\n')   out.write(DOT_CRLF); else   out.write(CRLF_DOT_CRLF);}  }
class C{  public void verifyAllPropertiesUsed() throws AdeUsageException {  for (  InternalProperty prop : m_rawProperties.values()) {    if (!prop.m_used) {      throw new AdeUsageException("Illegal ade property '" + prop.m_name + "' supplied in "+ prop.m_source);    }  }}  }
class C{  @Override protected void tearDown(){  deleteFileFromTmp("RegExpFromFile.txt");  super.tearDown();}  }
class C{  public void write(int c){  int newcount=count + 1;  if (newcount > buf.length) {    expandCapacity(newcount);  }  buf[count]=(char)c;  count=newcount;}  }
class C{  BiCubicInterpolator(SpatialGrid sg){  this.sg=sg;  sgNaNcheck();  double[] x_default=coord(0,sg.getNumCols(0) - 1,1);  double[] y_default=coord(0,sg.getNumRows() - 1,1);  double[][] mirroredValues=sg.getMatrix();  BivariateRealGridInterpolator interpolator=new BicubicSplineInterpolator();  try {    interpolatingFunction=interpolator.interpolate(y_default,x_default,mirroredValues);  } catch (  MathException e) {    e.printStackTrace();  }}  }
class C{  public static final boolean odd(int x){  return !even(x);}  }
class C{  public void parse(InputSource source) throws TransformerException {  try {    DocumentBuilderFactory builderFactory=DocumentBuilderFactory.newInstance();    builderFactory.setNamespaceAware(true);    builderFactory.setValidating(true);    DocumentBuilder parser=builderFactory.newDocumentBuilder();    parser.setErrorHandler(new org.apache.xml.utils.DefaultErrorHandler());    setDocument(parser.parse(source));  } catch (  org.xml.sax.SAXException se) {    throw new TransformerException(se);  }catch (  ParserConfigurationException pce) {    throw new TransformerException(pce);  }catch (  IOException ioe) {    throw new TransformerException(ioe);  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_NUM_EXPR_3__TAIL_1:    setTail_1(TAIL_1_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  public static FetchDistLockInfoRequest create(){  FetchDistLockInfoRequest m=new FetchDistLockInfoRequest();  return m;}  }
class C{  public SampleVcpcFastRunner(Graph graph,Parameters params){  super(graph,params);}  }
class C{  public Method loadMethod(){  methodToGenerate=new Method();  membership=Membership.MAPPER;  methodToGenerate.setClazz(configClass);  Class<?> destinationClass=destinationField.getType();  Class<?> sourceClass=sourceField.getType();  methodToGenerate.setReturnType(destinationClass);switch (methodDefined.getParameterNumber()) {case ZERO:    methodToGenerate.setParameters(new Class<?>[]{});  break;case ONE:methodToGenerate.setParameters(new Class<?>[]{sourceClass});break;case TWO:methodToGenerate.setParameters(new Class<?>[]{destinationClass,sourceClass});break;}methodToGenerate.setOriginalName(methodDefined.getName());switch (methodDefined.getType()) {case STATIC:methodToGenerate.setName(definedName());break;case DYNAMIC:methodToGenerate.setName(dynamicName());break;}methodDefined.setName(methodToGenerate.getName());int count=1;String body="{try{";switch (methodDefined.getParameterNumber()) {case TWO:String dType=placeholders.get(destinationTypePattern);String dName=placeholders.get(destinationPattern);body+=dType + " " + dName+ " = ("+ dType+ ") $"+ count+++ ";"+ newLine;case ONE:String sType=placeholders.get(sourceTypePattern);String sName=placeholders.get(sourcePattern);body+=sType + " " + sName+ " = ("+ sType+ ") $"+ count+ ";"+ newLine;default :break;}body+=methodDefined.getContent();for (Entry<String,String> pair : placeholders.entrySet()) if (!isNull(pair.getValue())) body=body.replaceAll(pair.getKey(),Matcher.quoteReplacement(pair.getValue()));return methodToGenerate.setBody(body + "}catch(java.lang.Exception e){" + error()+ "}return "+ defaultPrimitiveValue(destinationClass)+ ";}");}  }
class C{  public static byte[] decode(byte[] source) throws Base64DecoderException {  return decode(source,source.length);}  }
class C{  @Override public String toString(){  return instruction.toString();}  }
class C{  public PbrpcException(){  super();}  }
class C{  @Override public void onClick(View expirationView){  if (mPublicShare != null && mPublicShare.getExpirationDate() > 0) {    long chosenDateInMillis=-1;    if (mPublicShare != null) {      chosenDateInMillis=mPublicShare.getExpirationDate();    }    ExpirationDatePickerDialogFragment dialog=ExpirationDatePickerDialogFragment.newInstance(mFile,chosenDateInMillis);    dialog.show(getActivity().getSupportFragmentManager(),ExpirationDatePickerDialogFragment.DATE_PICKER_DIALOG);  }}  }
class C{  void regionToRect(int cellX,int cellY,int spanX,int spanY,Rect result){  final int hStartPadding=getPaddingLeft();  final int vStartPadding=getPaddingTop();  final int left=hStartPadding + cellX * (mCellWidth + mWidthGap);  final int top=vStartPadding + cellY * (mCellHeight + mHeightGap);  result.set(left,top,left + (spanX * mCellWidth + (spanX - 1) * mWidthGap),top + (spanY * mCellHeight + (spanY - 1) * mHeightGap));}  }
class C{  private static List<String> readLines(Reader in) throws IOException {  List<String> lines=new ArrayList<>();  try {    BufferedReader bin=new BufferedReader(in);    for (String line=null; (line=bin.readLine()) != null; lines.add(line)) {    }  }  finally {    if (in != null) {      try {        in.close();      } catch (      IOException var2) {      }    }  }  return lines;}  }
class C{  public static int duplicate(int _int){  return _int;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean isPublicWrite(){  Object oo=get_Value(COLUMNNAME_IsPublicWrite);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void validateExpectedPartitionValuesInformation(String expectedPartitionKeyGroupName,List<String> expectedExpectedPartitionValues,ExpectedPartitionValuesInformation actualExpectedPartitionValuesInformation){  assertNotNull(actualExpectedPartitionValuesInformation);  assertEquals(expectedPartitionKeyGroupName,actualExpectedPartitionValuesInformation.getPartitionKeyGroupKey().getPartitionKeyGroupName());  assertEquals(expectedExpectedPartitionValues,actualExpectedPartitionValuesInformation.getExpectedPartitionValues());}  }
class C{  public int readLargeUleb128(){  return readUleb128(true);}  }
class C{  public IndependenceTest indTestSubset(List<Node> vars){  if (vars.isEmpty()) {    throw new IllegalArgumentException("Subset may not be empty.");  }  List<Node> _vars=new ArrayList<>();  for (  Node var : vars) {    Node _var=getVariable(var.getName());    if (_var == null) {      throw new IllegalArgumentException("All vars must be original vars");    }    _vars.add(_var);  }  this._observedVars=_vars;  this.observedVars=new HashSet<>(_observedVars);  facts=new HashSet<>();  return this;}  }
class C{  protected Instances performTest(){  Instances icopy=new Instances(m_Instances);  Instances result=null;  try {    m_Filter.setInputFormat(icopy);  } catch (  Exception ex) {    ex.printStackTrace();    fail("Exception thrown on setInputFormat(): \n" + ex.getMessage());  }  try {    result=Filter.useFilter(icopy,m_Filter);    assertNotNull(result);  } catch (  Exception ex) {    ex.printStackTrace();    fail("Exception thrown on useFilter(): \n" + ex.getMessage());  }  assertEquals(icopy.numAttributes(),result.numAttributes());  assertEquals(icopy.numInstances(),m_Instances.numInstances());  return result;}  }
class C{  private void loadChatMessages(){  getLoaderManager().restartLoader(Loaders.CHAT_DETAILS,null,this);  getLoaderManager().restartLoader(Loaders.USER_DETAILS_CHAT_DETAILS,null,this);}  }
class C{  public Pageable createPageable(){  return new DrawingPageable(view.getDrawing());}  }
class C{  @Override public String basePath(){  return "/wm/linkdiscovery";}  }
class C{  public static Pointer to(short values[]){  return new Pointer(ShortBuffer.wrap(values));}  }
class C{  private DialogBaseUnits computeDialogBaseUnits(FontMetrics metrics){  double averageCharWidth=computeAverageCharWidth(metrics,averageCharWidthTestString);  int ascent=metrics.getAscent();  double height=ascent > 14 ? ascent : ascent + (15 - ascent) / 3;  DialogBaseUnits dialogBaseUnits=new DialogBaseUnits(averageCharWidth,height);  if (LOGGER.isLoggable(Level.CONFIG)) {    LOGGER.config("Computed dialog base units " + dialogBaseUnits + " for: "+ metrics.getFont());  }  return dialogBaseUnits;}  }
class C{  public boolean isYesNo(){  if (m_displayType == 0)   return m_value instanceof Boolean;  return DisplayType.YesNo == m_displayType;}  }
class C{  protected LinearScale computeScale(ClusterOrder order){  DoubleMinMax range=new DoubleMinMax();  for (DBIDIter it=order.iter(); it.valid(); it.advance()) {    final double reach=co.getReachability(it);    if (reach < Double.POSITIVE_INFINITY) {      range.put(reach);    }  }  if (!range.isValid()) {    range.put(0.0);    range.put(1.0);  }  return new LinearScale(range.getMin(),range.getMax());}  }
class C{  public static <S extends HasResizedHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    ResizedEvent event=new ResizedEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  public SkipMeException(String reason){  this(new Warning(reason));}  }
class C{  public boolean retainAll(Collection<?> c){  Objects.requireNonNull(c);  return batchRemove(c,true);}  }
class C{  public GeometricObject(){  dateCreated=new java.util.Date();}  }
class C{  public double dot(Vec x,List<Double> qi){  if (getBasisSize() == 0)   return 0;  return k.evalSum(vecs,kernelAccel,alpha.getBackingArray(),x,qi,0,alpha.size());}  }
class C{  void assertChecked(Class<? extends Permission> type,String name){  for (  Permission perm : permissionsChecked) {    if (type.isInstance(perm) && perm.getName().equals(name))     return;  }  throw new RuntimeException(type.getName() + "(\"" + name+ "\") not checked");}  }
class C{  public static void main(String[] args) throws Exception {  System.out.println("Facet counting over multiple category lists example:");  System.out.println("-----------------------");  List<FacetResult> results=new MultiCategoryListsFacetsExample().runSearch();  System.out.println("Author: " + results.get(0));  System.out.println("Publish Date: " + results.get(1));}  }
class C{  public CompiledST compile(String srcName,String name,List<FormalArgument> args,String template,Token templateToken){  Compiler c=new Compiler(this);  return c.compile(srcName,name,args,template,templateToken);}  }
class C{  public static String[] split(String str,String separator,int max){  StringTokenizer tok=null;  if (separator == null) {    tok=new StringTokenizer(str);  } else {    tok=new StringTokenizer(str,separator);  }  int listSize=tok.countTokens();  if ((max > 0) && (listSize > max)) {    listSize=max;  }  String[] list=new String[listSize];  int i=0;  int lastTokenBegin=0;  int lastTokenEnd=0;  while (tok.hasMoreTokens()) {    if ((max > 0) && (i == listSize - 1)) {      String endToken=tok.nextToken();      lastTokenBegin=str.indexOf(endToken,lastTokenEnd);      list[i]=str.substring(lastTokenBegin);      break;    } else {      list[i]=tok.nextToken();      lastTokenBegin=str.indexOf(list[i],lastTokenEnd);      lastTokenEnd=lastTokenBegin + list[i].length();    }    i++;  }  return list;}  }
class C{  public static <T>LazyPQueueX<T> fromPublisher(Publisher<? extends T> publisher){  return fromStreamS(ReactiveSeq.fromPublisher((Publisher<T>)publisher));}  }
class C{  public boolean add(Match match,String id,Object object,boolean force){  if (id != null && !ids.get(match).containsKey(id)) {    ids.get(match).put(id,object);    return true;  } else   if (force) {    add(match,UUID.randomUUID().toString(),object,true);  }  return false;}  }
class C{  public void addSeries(final String title,final double[] values){  int cnt=1;  for (  double value : values) {    String category=(cnt > this.categories.length ? Integer.toString(cnt) : this.categories[cnt - 1]);    this.dataset.addValue(value,title,category);    cnt++;  }}  }
class C{  protected void initialize(){  getModifiers();  getName();  getConstant();  getTypeName();  getGenericSignature();  reset();}  }
class C{  @Override public HierarchyWrapperOperation createSubOperation(){  return new GetContentStructureOperation(activeElement);}  }
class C{  public void testBug75168() throws Exception {  final Properties props=new Properties();  props.setProperty("loadBalanceExceptionChecker","testsuite.regression.ConnectionRegressionTest$Bug75168LoadBalanceExceptionChecker");  props.setProperty("statementInterceptors",Bug75168StatementInterceptor.class.getName());  Connection connTest=getLoadBalancedConnection(2,null,props);  for (int i=0; i < 3; i++) {    Statement stmtTest=null;    try {      stmtTest=connTest.createStatement();      stmtTest.execute("SELECT * FROM nonexistent_table");      fail("'Table doesn't exist' exception was expected.");    } catch (    SQLException e) {      assertTrue("'Table doesn't exist' exception was expected.",e.getMessage().endsWith("nonexistent_table' doesn't exist"));    } finally {      if (stmtTest != null) {        stmtTest.close();      }    }  }  connTest.close();  boolean stop=false;  do {    connTest=getLoadBalancedConnection(2,null,props);    for (int i=0; i < 3; i++) {      PreparedStatement pstmtTest=null;      try {        pstmtTest=connTest.prepareStatement("SELECT * FROM nonexistent_table");        pstmtTest.execute();        fail("'Table doesn't exist' exception was expected.");      } catch (      SQLException e) {        assertTrue("'Table doesn't exist' exception was expected.",e.getMessage().endsWith("nonexistent_table' doesn't exist"));      } finally {        if (pstmtTest != null) {          pstmtTest.close();        }      }    }    connTest.close();    props.setProperty("useServerPrepStmts","true");  } while (stop=!stop);}  }
class C{  public static void log(@Nullable IgniteLogger log,Object longMsg,Object shortMsg){  assert longMsg != null;  assert shortMsg != null;  if (log != null) {    if (log.isInfoEnabled())     log.info(compact(longMsg.toString()));  } else   quiet(false,shortMsg);}  }
class C{  FormatSpecifierParser(String format){  this.format=format;  this.length=format.length();}  }
class C{  @Override public void albumArtLoaded(){  coverArt.setImageBitmap(mSongHelper.getAlbumArt());}  }
class C{  public void apply(float oldX,float oldY,float newX,float newY){  boolean notLimitedUp=true;  boolean notLimitedBottom=true;  boolean notLimitedLeft=true;  boolean notLimitedRight=true;  if (mChart instanceof XYChart) {    int scales=mRenderer.getScalesCount();    double[] limits=mRenderer.getPanLimits();    boolean limited=limits != null && limits.length == 4;    XYChart chart=(XYChart)mChart;    for (int i=0; i < scales; i++) {      double[] range=getRange(i);      double[] calcRange=chart.getCalcRange(i);      if (limitsReachedX && limitsReachedY && (range[0] == range[1] && calcRange[0] == calcRange[1] || range[2] == range[3] && calcRange[2] == calcRange[3])) {        return;      }      checkRange(range,i);      double[] realPoint=chart.toRealPoint(oldX,oldY,i);      double[] realPoint2=chart.toRealPoint(newX,newY,i);      double deltaX=realPoint[0] - realPoint2[0];      double deltaY=realPoint[1] - realPoint2[1];      double ratio=getAxisRatio(range);      if (chart.isVertical(mRenderer)) {        double newDeltaX=-deltaY * ratio;        double newDeltaY=deltaX / ratio;        deltaX=newDeltaX;        deltaY=newDeltaY;      }      if (mRenderer.isPanXEnabled()) {        if (limits != null) {          if (notLimitedLeft) {            notLimitedLeft=limits[0] <= range[0] + deltaX;          }          if (notLimitedRight) {            notLimitedRight=limits[1] >= range[1] + deltaX;          }        }        if (!limited || (notLimitedLeft && notLimitedRight)) {          setXRange(range[0] + deltaX,range[1] + deltaX,i);          limitsReachedX=false;        } else {          limitsReachedX=true;        }      }      if (mRenderer.isPanYEnabled()) {        if (limits != null) {          if (notLimitedBottom) {            notLimitedBottom=limits[2] <= range[2] + deltaY;          }          if (notLimitedUp) {            notLimitedUp=limits[3] >= range[3] + deltaY;          }        }        if (!limited || (notLimitedBottom && notLimitedUp)) {          setYRange(range[2] + deltaY,range[3] + deltaY,i);          limitsReachedY=false;        } else {          limitsReachedY=true;        }      }    }  } else {    RoundChart chart=(RoundChart)mChart;    chart.setCenterX(chart.getCenterX() + (int)(newX - oldX));    chart.setCenterY(chart.getCenterY() + (int)(newY - oldY));  }  notifyPanListeners();}  }
class C{  private int measureHeight(int measureSpec){  float result=0;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=mPaintSelected.getStrokeWidth() + getPaddingTop() + getPaddingBottom();    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return (int)FloatMath.ceil(result);}  }
class C{  private void relayout(){  invalidate();  requestLayout();}  }
class C{  private Object executeScript(final Script script,final ScriptEngine engine,final ScriptContext context){  if (context == null) {    final String errMsg="ScriptContext not passed to executeScript method!";    LOG.error(errMsg);    throw new ApplicationRuntimeException(errMsg);  }  Object evalResult=null;  setupContextAttributes(engine,context);  try {    final CompiledScript compiledScript=script.getCompiledScript();    if (engine instanceof Compilable && compiledScript != null)     evalResult=compiledScript.eval(context); else     evalResult=engine.eval(script.getScript(),context);    handleErrorsIfAny(context.getAttribute("validationErrors"));    final Object result=context.getAttribute("result");    return evalResult == null ? result : evalResult;  } catch (  final ScriptException e) {    LOG.error("script error for " + script.getType() + ":"+ script.getName()+ ":"+ script.getScript(),e);    throw new ApplicationRuntimeException("script.error",e);  }catch (  final ValidationException e) {    if (e.getErrors() != null && !e.getErrors().isEmpty())     LOG.error(e.getErrors().get(0).getMessage());    throw e;  }catch (  final Exception e) {    LOG.error("Exception  for " + script.getType() + ":"+ script.getName()+ ":"+ script.getScript(),e);    throw new ApplicationRuntimeException("script.error",e);  }}  }
class C{  private static boolean isPrintableString(String str){  for (int i=0; i < str.length(); ++i) {    char ch=str.charAt(i);    if (!(ch == 0x20 || ch >= 0x27 && ch <= 0x29 || ch >= 0x2B && ch <= 0x3A || ch == '=' || ch == '?' || ch >= 'A' && ch <= 'Z' || ch >= 'a' && ch <= 'z')) {      return false;    }  }  return true;}  }
class C{  public long triplesPerSecond(){  long elapsedMillis=TimeUnit.NANOSECONDS.toMillis(getElapsedNanos());  if (elapsedMillis == 0) {    elapsedMillis=1;  }  return ((long)(((double)nparsed) / ((double)elapsedMillis) * 1000d));}  }
class C{  public boolean loadIcons(String iconPath,String animatedIconPath){  boolean success=true;  java.net.URL imageURL=this.getClass().getClassLoader().getResource(iconPath);  if (imageURL == null) {  } else {    Image pic=Toolkit.getDefaultToolkit().getImage(imageURL);    m_icon=new ImageIcon(pic);    if (m_visualLabel != null) {      m_visualLabel.setIcon(m_icon);    }  }  imageURL=this.getClass().getClassLoader().getResource(animatedIconPath);  if (imageURL == null) {    success=false;  } else {    Image pic2=Toolkit.getDefaultToolkit().getImage(imageURL);    m_animatedIcon=new ImageIcon(pic2);  }  m_iconPath=iconPath;  m_animatedIconPath=animatedIconPath;  return success;}  }
class C{  public char[] qualifiedSourceName(){  char[] brackets=new char[this.dimensions * 2];  for (int i=this.dimensions * 2 - 1; i >= 0; i-=2) {    brackets[i]=']';    brackets[i - 1]='[';  }  return CharOperation.concat(this.leafComponentType.qualifiedSourceName(),brackets);}  }
class C{  protected ValueConstruct(XmlNamespace namespace,String localName,String attrName){  this(namespace,localName,attrName,null);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:11.397 -0500",hash_original_method="E092E2209250C02F09C22B7C95E9AB91",hash_generated_method="A72600933EA880F69BAE3F07B74702DB") protected AlertProtocol(){}  }
class C{  public Class<K> keyType(){  return keyType;}  }
class C{  public LocalTime roundHalfEvenCopy(){  return iInstant.withLocalMillis(iField.roundHalfEven(iInstant.getLocalMillis()));}  }
class C{  private static Request eclipseMethodRequest(Class<?> clazz,String methodName){  Description method=Description.createTestDescription(clazz,methodName);  return Request.classWithoutSuiteMethod(clazz).filterWith(method);}  }
class C{  private FastBlurHelper(){}  }
class C{  protected void notifyScanStarted(){  for (  ScanListener l : listeners)   l.scanStarted(contextId);}  }
class C{  protected boolean isValidClassname(String classname){  return (classname.indexOf("$") == -1);}  }
class C{  public UWidget widget(){  UWidget uw=new UWidget();  uw.lb(this);  return uw;}  }
class C{  public static <A>CompletableFutureTSeq<A> of(final AnyMSeq<CompletableFuture<A>> monads){  return new CompletableFutureTSeq<>(monads);}  }
class C{  private static void countCompiledInstructions(ProgramBlock pb,ExplainCounts counts,boolean MR,boolean CP,boolean SP){  if (pb instanceof WhileProgramBlock) {    WhileProgramBlock tmp=(WhileProgramBlock)pb;    countCompiledInstructions(tmp.getPredicate(),counts,MR,CP,SP);    for (    ProgramBlock pb2 : tmp.getChildBlocks())     countCompiledInstructions(pb2,counts,MR,CP,SP);  } else   if (pb instanceof IfProgramBlock) {    IfProgramBlock tmp=(IfProgramBlock)pb;    countCompiledInstructions(tmp.getPredicate(),counts,MR,CP,SP);    for (    ProgramBlock pb2 : tmp.getChildBlocksIfBody())     countCompiledInstructions(pb2,counts,MR,CP,SP);    for (    ProgramBlock pb2 : tmp.getChildBlocksElseBody())     countCompiledInstructions(pb2,counts,MR,CP,SP);  } else   if (pb instanceof ForProgramBlock) {    ForProgramBlock tmp=(ForProgramBlock)pb;    countCompiledInstructions(tmp.getFromInstructions(),counts,MR,CP,SP);    countCompiledInstructions(tmp.getToInstructions(),counts,MR,CP,SP);    countCompiledInstructions(tmp.getIncrementInstructions(),counts,MR,CP,SP);    for (    ProgramBlock pb2 : tmp.getChildBlocks())     countCompiledInstructions(pb2,counts,MR,CP,SP);  } else   if (pb instanceof FunctionProgramBlock) {    FunctionProgramBlock fpb=(FunctionProgramBlock)pb;    for (    ProgramBlock pb2 : fpb.getChildBlocks())     countCompiledInstructions(pb2,counts,MR,CP,SP);  } else {    countCompiledInstructions(pb.getInstructions(),counts,MR,CP,SP);  }}  }
class C{  public static byte[] createHeader(HeaderSet head,boolean nullOut){  Long intHeader=null;  String stringHeader=null;  Calendar dateHeader=null;  Byte byteHeader=null;  StringBuffer buffer=null;  byte[] value=null;  byte[] result=null;  byte[] lengthArray=new byte[2];  int length;  HeaderSet headImpl=null;  ByteArrayOutputStream out=new ByteArrayOutputStream();  headImpl=head;  try {    if ((headImpl.mConnectionID != null) && (headImpl.getHeader(HeaderSet.TARGET) == null)) {      out.write((byte)HeaderSet.CONNECTION_ID);      out.write(headImpl.mConnectionID);    }    intHeader=(Long)headImpl.getHeader(HeaderSet.COUNT);    if (intHeader != null) {      out.write((byte)HeaderSet.COUNT);      value=ObexHelper.convertToByteArray(intHeader.longValue());      out.write(value);      if (nullOut) {        headImpl.setHeader(HeaderSet.COUNT,null);      }    }    stringHeader=(String)headImpl.getHeader(HeaderSet.NAME);    if (stringHeader != null) {      out.write((byte)HeaderSet.NAME);      value=ObexHelper.convertToUnicodeByteArray(stringHeader);      length=value.length + 3;      lengthArray[0]=(byte)(0xFF & (length >> 8));      lengthArray[1]=(byte)(0xFF & length);      out.write(lengthArray);      out.write(value);      if (nullOut) {        headImpl.setHeader(HeaderSet.NAME,null);      }    } else     if (headImpl.getEmptyNameHeader()) {      out.write((byte)HeaderSet.NAME);      lengthArray[0]=(byte)0x00;      lengthArray[1]=(byte)0x03;      out.write(lengthArray);    }    stringHeader=(String)headImpl.getHeader(HeaderSet.TYPE);    if (stringHeader != null) {      out.write((byte)HeaderSet.TYPE);      try {        value=stringHeader.getBytes("ISO8859_1");      } catch (      UnsupportedEncodingException e) {        throw e;      }      length=value.length + 4;      lengthArray[0]=(byte)(255 & (length >> 8));      lengthArray[1]=(byte)(255 & length);      out.write(lengthArray);      out.write(value);      out.write(0x00);      if (nullOut) {        headImpl.setHeader(HeaderSet.TYPE,null);      }    }    intHeader=(Long)headImpl.getHeader(HeaderSet.LENGTH);    if (intHeader != null) {      out.write((byte)HeaderSet.LENGTH);      value=ObexHelper.convertToByteArray(intHeader.longValue());      out.write(value);      if (nullOut) {        headImpl.setHeader(HeaderSet.LENGTH,null);      }    }    dateHeader=(Calendar)headImpl.getHeader(HeaderSet.TIME_ISO_8601);    if (dateHeader != null) {      buffer=new StringBuffer();      int temp=dateHeader.get(Calendar.YEAR);      for (int i=temp; i < 1000; i=i * 10) {        buffer.append("0");      }      buffer.append(temp);      temp=dateHeader.get(Calendar.MONTH);      if (temp < 10) {        buffer.append("0");      }      buffer.append(temp);      temp=dateHeader.get(Calendar.DAY_OF_MONTH);      if (temp < 10) {        buffer.append("0");      }      buffer.append(temp);      buffer.append("T");      temp=dateHeader.get(Calendar.HOUR_OF_DAY);      if (temp < 10) {        buffer.append("0");      }      buffer.append(temp);      temp=dateHeader.get(Calendar.MINUTE);      if (temp < 10) {        buffer.append("0");      }      buffer.append(temp);      temp=dateHeader.get(Calendar.SECOND);      if (temp < 10) {        buffer.append("0");      }      buffer.append(temp);      if (dateHeader.getTimeZone().getID().equals("UTC")) {        buffer.append("Z");      }      try {        value=buffer.toString().getBytes("ISO8859_1");      } catch (      UnsupportedEncodingException e) {        throw e;      }      length=value.length + 3;      lengthArray[0]=(byte)(255 & (length >> 8));      lengthArray[1]=(byte)(255 & length);      out.write(HeaderSet.TIME_ISO_8601);      out.write(lengthArray);      out.write(value);      if (nullOut) {        headImpl.setHeader(HeaderSet.TIME_ISO_8601,null);      }    }    dateHeader=(Calendar)headImpl.getHeader(HeaderSet.TIME_4_BYTE);    if (dateHeader != null) {      out.write(HeaderSet.TIME_4_BYTE);      value=ObexHelper.convertToByteArray(dateHeader.getTime().getTime() / 1000L);      out.write(value);      if (nullOut) {        headImpl.setHeader(HeaderSet.TIME_4_BYTE,null);      }    }    stringHeader=(String)headImpl.getHeader(HeaderSet.DESCRIPTION);    if (stringHeader != null) {      out.write((byte)HeaderSet.DESCRIPTION);      value=ObexHelper.convertToUnicodeByteArray(stringHeader);      length=value.length + 3;      lengthArray[0]=(byte)(255 & (length >> 8));      lengthArray[1]=(byte)(255 & length);      out.write(lengthArray);      out.write(value);      if (nullOut) {        headImpl.setHeader(HeaderSet.DESCRIPTION,null);      }    }    value=(byte[])headImpl.getHeader(HeaderSet.TARGET);    if (value != null) {      out.write((byte)HeaderSet.TARGET);      length=value.length + 3;      lengthArray[0]=(byte)(255 & (length >> 8));      lengthArray[1]=(byte)(255 & length);      out.write(lengthArray);      out.write(value);      if (nullOut) {        headImpl.setHeader(HeaderSet.TARGET,null);      }    }    value=(byte[])headImpl.getHeader(HeaderSet.HTTP);    if (value != null) {      out.write((byte)HeaderSet.HTTP);      length=value.length + 3;      lengthArray[0]=(byte)(255 & (length >> 8));      lengthArray[1]=(byte)(255 & length);      out.write(lengthArray);      out.write(value);      if (nullOut) {        headImpl.setHeader(HeaderSet.HTTP,null);      }    }    value=(byte[])headImpl.getHeader(HeaderSet.WHO);    if (value != null) {      out.write((byte)HeaderSet.WHO);      length=value.length + 3;      lengthArray[0]=(byte)(255 & (length >> 8));      lengthArray[1]=(byte)(255 & length);      out.write(lengthArray);      out.write(value);      if (nullOut) {        headImpl.setHeader(HeaderSet.WHO,null);      }    }    value=(byte[])headImpl.getHeader(HeaderSet.APPLICATION_PARAMETER);    if (value != null) {      out.write((byte)HeaderSet.APPLICATION_PARAMETER);      length=value.length + 3;      lengthArray[0]=(byte)(255 & (length >> 8));      lengthArray[1]=(byte)(255 & length);      out.write(lengthArray);      out.write(value);      if (nullOut) {        headImpl.setHeader(HeaderSet.APPLICATION_PARAMETER,null);      }    }    value=(byte[])headImpl.getHeader(HeaderSet.OBJECT_CLASS);    if (value != null) {      out.write((byte)HeaderSet.OBJECT_CLASS);      length=value.length + 3;      lengthArray[0]=(byte)(255 & (length >> 8));      lengthArray[1]=(byte)(255 & length);      out.write(lengthArray);      out.write(value);      if (nullOut) {        headImpl.setHeader(HeaderSet.OBJECT_CLASS,null);      }    }    for (int i=0; i < 16; i++) {      stringHeader=(String)headImpl.getHeader(i + 0x30);      if (stringHeader != null) {        out.write((byte)i + 0x30);        value=ObexHelper.convertToUnicodeByteArray(stringHeader);        length=value.length + 3;        lengthArray[0]=(byte)(255 & (length >> 8));        lengthArray[1]=(byte)(255 & length);        out.write(lengthArray);        out.write(value);        if (nullOut) {          headImpl.setHeader(i + 0x30,null);        }      }      value=(byte[])headImpl.getHeader(i + 0x70);      if (value != null) {        out.write((byte)i + 0x70);        length=value.length + 3;        lengthArray[0]=(byte)(255 & (length >> 8));        lengthArray[1]=(byte)(255 & length);        out.write(lengthArray);        out.write(value);        if (nullOut) {          headImpl.setHeader(i + 0x70,null);        }      }      byteHeader=(Byte)headImpl.getHeader(i + 0xB0);      if (byteHeader != null) {        out.write((byte)i + 0xB0);        out.write(byteHeader.byteValue());        if (nullOut) {          headImpl.setHeader(i + 0xB0,null);        }      }      intHeader=(Long)headImpl.getHeader(i + 0xF0);      if (intHeader != null) {        out.write((byte)i + 0xF0);        out.write(ObexHelper.convertToByteArray(intHeader.longValue()));        if (nullOut) {          headImpl.setHeader(i + 0xF0,null);        }      }    }    if (headImpl.mAuthChall != null) {      out.write((byte)HeaderSet.AUTH_CHALLENGE);      length=headImpl.mAuthChall.length + 3;      lengthArray[0]=(byte)(255 & (length >> 8));      lengthArray[1]=(byte)(255 & length);      out.write(lengthArray);      out.write(headImpl.mAuthChall);      if (nullOut) {        headImpl.mAuthChall=null;      }    }    if (headImpl.mAuthResp != null) {      out.write((byte)HeaderSet.AUTH_RESPONSE);      length=headImpl.mAuthResp.length + 3;      lengthArray[0]=(byte)(255 & (length >> 8));      lengthArray[1]=(byte)(255 & length);      out.write(lengthArray);      out.write(headImpl.mAuthResp);      if (nullOut) {        headImpl.mAuthResp=null;      }    }  } catch (  IOException e) {  } finally {    result=out.toByteArray();    try {      out.close();    } catch (    Exception ex) {    }  }  return result;}  }
class C{  private double convertToPanel(double val){  double temp=(val - m_minVal) / (m_maxVal - m_minVal);  double temp2=temp * (this.getWidth() - 10);  return temp2 + 4;}  }
class C{  public SetMultipleDeliveryCommandImpl(final ShoppingCartCommandRegistry registry){  super(registry);}  }
class C{  @Override public void profileUpdated(Profile profile){  if (profile instanceof GatewaySenderProfile) {    GatewaySenderProfile sp=(GatewaySenderProfile)profile;    if (!sp.isParallel) {      if (!sp.isRunning) {        if (advisePrimaryGatewaySender() != null) {          return;        }        if (!this.sender.isPrimary()) {          if (!adviseEldestGatewaySender()) {            if (logger.isDebugEnabled()) {              logger.debug("Sender {} is not the eldest in the system. Giving preference to eldest sender to become primary...",this.sender);            }            return;          }          launchLockObtainingVolunteerThread();        }      } else {        if (sp.serverLocation != null) {          this.sender.setServerLocation(sp.serverLocation);        }      }    }  }}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (name == null) {    throw new NullPointerException();  }  if (varNames == null) {    throw new NullPointerException();  }  if (knowledge == null) {    throw new NullPointerException();  }}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:02.125 -0500",hash_original_method="E7A2FB4AC135D29D78CE09D5448C290F",hash_generated_method="BBFCFD2AD6BD270AD38D8FE87FD0572B") protected String encodeBody(){  return encodeBody(new StringBuffer()).toString();}  }
class C{  public synchronized void removeAllElements(){  for (int i=0; i < elementCount; i++) {    elementData[i]=null;  }  modCount++;  elementCount=0;}  }
class C{  private String generateClientImageParentDirectory(final Long resourceId){  return FileSystemContentRepository.FINERACT_BASE_DIR + File.separator + ThreadLocalContextUtil.getTenant().getName().replaceAll(" ","").trim()+ File.separator+ "images"+ File.separator+ "clients"+ File.separator+ resourceId;}  }
class C{  void buildPackagePrefix(final String className){  final int lastPackageSeparator=className.lastIndexOf('/');  final String packageName=className.substring(0,lastPackageSeparator == -1 ? className.length() : lastPackageSeparator);  final String[] splitPackage=packageName.split("/");  if (splitPackage.length >= PROJECT_PACKAGE_HIERARCHIES) {    projectPackagePrefix=IntStream.range(0,PROJECT_PACKAGE_HIERARCHIES).mapToObj(null).collect(Collectors.joining("/"));  } else {    projectPackagePrefix=packageName;  }}  }
class C{  @NotNull @ObjectiveCName("unblockUser:") public Promise<Void> unblockUser(int uid){  return modules.getUsersModule().unblockUser(uid);}  }
class C{  public boolean isAbstract(){  return (accessFlags & AccessFlag.ABSTRACT) != 0;}  }
class C{  public NumberIsTooLargeException(Localizable specific,Number wrong,Number max,boolean boundIsAllowed){  super(specific,wrong,max);  this.max=max;  this.boundIsAllowed=boundIsAllowed;}  }
class C{  @Override public void startInternal() throws LifecycleException {  super.startInternal();  if (getLogger().isDebugEnabled()) {    getLogger().debug(this + ": Starting");  }  if (this.started.get()) {    return;  }  this.lifecycle.fireLifecycleEvent(START_EVENT,null);  registerJvmRouteBinderValve();  if (isCommitValveEnabled()) {    registerCommitSessionValve();  }  initializeSessionCache();  try {    load();  } catch (  ClassNotFoundException e) {    throw new LifecycleException("Exception starting manager",e);  }catch (  IOException e) {    throw new LifecycleException("Exception starting manager",e);  }  scheduleTimerTasks();  this.started.set(true);  this.setState(LifecycleState.STARTING);}  }
class C{  public TextMessage(JSONObject object){  checkNotNull(object,"object must not be null");  this.object=object;}  }
class C{  public final void testGetModulus(){  RSAMultiPrimePrivateCrtKeySpec ks=new RSAMultiPrimePrivateCrtKeySpec(BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,opi);  assertTrue(BigInteger.ONE.equals(ks.getModulus()));}  }
class C{  @Override public boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent event){  if (event.getEventType() == AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED) {    event.getText().clear();    int flags=DateUtils.FORMAT_SHOW_DATE | DateUtils.FORMAT_SHOW_YEAR | DateUtils.FORMAT_SHOW_WEEKDAY;    String dateString=DateUtils.formatDateTime(getContext(),mDateMillis,flags);    event.getText().add(dateString);    return true;  }  return super.dispatchPopulateAccessibilityEvent(event);}  }
class C{  public Object[] toArray(){  final ReentrantLock lock=this.lock;  lock.lock();  try {    return Arrays.copyOf(queue,size);  }  finally {    lock.unlock();  }}  }
class C{  private void paintForegroundDisabled(Graphics2D g,int width,int height){  Shape s=decodeArrowPath(width,height);  g.setPaint(disabledColor);  g.fill(s);}  }
class C{  public void testIsQuiescent() throws Exception {  ForkJoinPool p=new ForkJoinPool(2);  PoolCleaner cleaner=null;  try {    cleaner=cleaner(p);    assertTrue(p.isQuiescent());    long startTime=System.nanoTime();    FibTask f=new FibTask(20);    p.invoke(f);    assertSame(ForkJoinPool.defaultForkJoinWorkerThreadFactory,p.getFactory());    while (!p.isQuiescent()) {      if (millisElapsedSince(startTime) > LONG_DELAY_MS)       throw new AssertionFailedError("timed out");      assertFalse(p.getAsyncMode());      assertFalse(p.isShutdown());      assertFalse(p.isTerminating());      assertFalse(p.isTerminated());      Thread.yield();    }    assertTrue(p.isQuiescent());    assertFalse(p.getAsyncMode());    assertEquals(0,p.getQueuedTaskCount());    assertEquals(0,p.getQueuedSubmissionCount());    assertFalse(p.hasQueuedSubmissions());    while (p.getActiveThreadCount() != 0 && millisElapsedSince(startTime) < LONG_DELAY_MS)     Thread.yield();    assertFalse(p.isShutdown());    assertFalse(p.isTerminating());    assertFalse(p.isTerminated());    assertTrue(f.isDone());    assertEquals(6765,(int)f.get());    assertTrue(millisElapsedSince(startTime) < LONG_DELAY_MS);  }  finally {    if (cleaner != null) {      cleaner.close();    }  }}  }
class C{  public FacetResult runSearch() throws IOException, ParseException {  index();  return search();}  }
class C{  @Override protected void onStartLoading(){  if (data != null) {    deliverResult(data);  } else {    forceLoad();  }}  }
class C{  public void testSearch(){  doTestSearch();}  }
class C{  protected void retrieveExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  saveCurrentInvocation(KeysClientsInvocations.FORMATO_FICHAS_EDICION,request);  FmtFichaVO fmtFichaVO=(FmtFichaVO)getFromTemporalSession(request,FMT_FICHA_VO);  FormatoFichasForm formatoFichasForm=(FormatoFichasForm)form;  formatoFichasForm.set(fmtFichaVO);  loadListas(request);  setReturnActionFordward(request,mapping.findForward("retrieve"));}  }
class C{  static WebServerBuilder port(int port){  return builder().port(port);}  }
class C{  public boolean canTraverseOutsideSubtree(){  return super.canTraverseOutsideSubtree() ? true : m_arg2.canTraverseOutsideSubtree();}  }
class C{  public static boolean renameFile(File inputPath,File newFilePath){  if (newFilePath.exists()) {    Log.e(TAG,"File path already exists: " + newFilePath.getAbsolutePath());    return false;  }  if (inputPath.isDirectory()) {    Log.e(TAG,"Input path is directory: " + inputPath.getAbsolutePath());    return false;  }  if (!createDirectoryIfNeeded(newFilePath.getAbsolutePath())) {    Log.e(TAG,"Failed to create parent directory for file: " + newFilePath.getAbsolutePath());    return false;  }  return inputPath.renameTo(newFilePath);}  }
class C{  public static long toLong(Binary value){  Buffer buffer=new Buffer(value.getArray(),value.getArrayOffset(),value.getLength());  return buffer.bigEndianEditor().readLong();}  }
class C{  public void dispose(){  m_debuggerSelectionPanel.dispose();  m_registerPanel.dispose();}  }
class C{  @LargeTest public void testThumbnailListH264VGA() throws Exception {  final String videoItemFilename=INPUT_FILE_PATH + "H264_BP_640x480_30fps_256kbps_1_17.mp4";  final int tnCount=10;  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final MediaVideoItem mediaVideoItem=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",videoItemFilename,renderingMode);  final int outWidth=mediaVideoItem.getWidth() / 2;  final int outHeight=mediaVideoItem.getHeight() / 2;  final long startTime=mediaVideoItem.getDuration() / 3;  final long endTime=mediaVideoItem.getDuration() / 2;  final Bitmap thumbNailBmp[]=mediaVideoItem.getThumbnailList(outWidth,outHeight,startTime,endTime,tnCount);  assertNotNull("Thumbnail Retrived is Null",thumbNailBmp);  assertEquals("Thumbnail Count",tnCount,thumbNailBmp.length);  for (int i=0; i < thumbNailBmp.length; i++) {    validateThumbnail(thumbNailBmp[i],outWidth,outHeight);    thumbNailBmp[i]=null;  }}  }
class C{  public void commitChanges(){  currentSensorPanel.commitChanges();}  }
class C{  private static boolean isHex(char p_char){  return (isDigit(p_char) || (p_char >= 'a' && p_char <= 'f') || (p_char >= 'A' && p_char <= 'F'));}  }
class C{  public DoubleColumn(int nrows,int capacity,double defaultValue){  super(double.class,new Double(defaultValue));  if (capacity < nrows) {    throw new IllegalArgumentException("Capacity value can not be less than the row count.");  }  m_values=new double[capacity];  Arrays.fill(m_values,defaultValue);  m_size=nrows;}  }
class C{  public DTLZ(int numberOfVariables,int numberOfObjectives){  super(numberOfVariables,numberOfObjectives);}  }
class C{  public Matrix4f translationRotateScale(Vector3fc translation,Quaternionfc quat,float scale){  return translationRotateScale(translation.x(),translation.y(),translation.z(),quat.x(),quat.y(),quat.z(),quat.w(),scale,scale,scale);}  }
class C{  @Override public XYItemRendererState initialise(Graphics2D g2,Rectangle2D dataArea,XYPlot plot,XYDataset dataset,PlotRenderingInfo info){  ValueAxis axis=plot.getDomainAxis();  double x1=axis.getLowerBound();  double x2=x1 + this.maxCandleWidthInMilliseconds;  RectangleEdge edge=plot.getDomainAxisEdge();  double xx1=axis.valueToJava2D(x1,dataArea,edge);  double xx2=axis.valueToJava2D(x2,dataArea,edge);  this.maxCandleWidth=Math.abs(xx2 - xx1);  if (this.drawVolume) {    OHLCDataset highLowDataset=(OHLCDataset)dataset;    this.maxVolume=0.0;    for (int series=0; series < highLowDataset.getSeriesCount(); series++) {      for (int item=0; item < highLowDataset.getItemCount(series); item++) {        double volume=highLowDataset.getVolumeValue(series,item);        if (volume > this.maxVolume) {          this.maxVolume=volume;        }      }    }  }  return new XYItemRendererState(info);}  }
class C{  public static Uniform serializableInstance(){  return new Uniform(0,1);}  }
class C{  public static String resolveVariables(String input,Map<String,String> props){  return resolveVariables(input,props,true);}  }
class C{  public List<ScaleIOSDS> queryAllSDS() throws Exception {  log.info("Discoverying all SDS.");  ClientResponse response=get(URI.create(ScaleIOConstants.GET_SDS_URI));  return getResponseObjects(ScaleIOSDS.class,response);}  }
class C{  public int readBit() throws DecodingException {  if (bufferLength == -1) {    buffer=readByte();    if (buffer == -1) {      return -1;    }    bufferLength=7;  }  return (buffer >> bufferLength--) & 1;}  }
class C{  public Point2D inverseTransform(Point2D src,Point2D dst){  try {    src.setLocation(src.getX() + rotXOffset,src.getY() + rotYOffset);    dst=rotTransform.inverseTransform(src,dst);  } catch (  NoninvertibleTransformException e) {    logger.log(Level.FINE,e.getMessage(),e);  }  return dst;}  }
class C{  protected TrackListener createTrackListener(JSlider slider){  return new WindowsTrackListener();}  }
class C{  void doReps(StreamBuffer sbuf,Dummy dummy,int reps) throws Exception {  OutputStream out=sbuf.getOutputStream();  InputStream in=sbuf.getInputStream();  for (int i=0; i < reps; i++) {    sbuf.reset();    ObjectOutputStream oout=new ObjectOutputStream(out);    oout.writeObject(dummy);    oout.flush();    ObjectInputStream oin=new ObjectInputStream(in);    oin.readObject();  }}  }
class C{  public void replaceFile(InputStream inputStreamFile,String fileExt){  m_doc.replaceFile(inputStreamFile,fileExt);}  }
class C{  public void testIssue10() throws Exception {  BufferedImage image2D=ImageIO.read(getClass().getResourceAsStream("test_issue10.jpg"));  DimensionConstrain dc=DimensionConstrain.createAbsolutionDimension(50,50);  ResampleOp resampleOp=new ResampleOp(dc);  BufferedImage rescaledTomato=resampleOp.filter(image2D,null);}  }
class C{  public void registerWithContext(Context context){}  }
class C{  public void end(String namespace,String name) throws Exception {  ValidatorBean top=null;  try {    top=(ValidatorBean)digester.pop();  } catch (  Exception e) {    throw new IllegalStateException("Popped object is not a " + CLASS_NAME + " instance");  }  FacesConfigBean fcb=(FacesConfigBean)digester.peek();  ValidatorBean old=fcb.getValidator(top.getValidatorId());  if (old == null) {    if (digester.getLogger().isDebugEnabled()) {      digester.getLogger().debug("[ValidatorRule]{" + digester.getMatch() + "} New("+ top.getValidatorId()+ ")");    }    fcb.addValidator(top);  } else {    if (digester.getLogger().isDebugEnabled()) {      digester.getLogger().debug("[ValidatorRule]{" + digester.getMatch() + "} Merge("+ top.getValidatorId()+ ")");    }    mergeValidator(top,old);  }}  }
class C{  public void println(String text){  try {    if (autoIndent)     printIndent();    out.write(text);    println();  } catch (  IOException ioe) {    throw new GroovyRuntimeException(ioe);  }}  }
class C{  protected void onSetSecret(String channel,String sourceNick,String sourceLogin,String sourceHostname){}  }
class C{  public static long nanosecondsToRun(Runnable runnable){  long start=TimeKeeper.getCurrentTimeAsNanos();  runnable.run();  long end=TimeKeeper.getCurrentTimeAsNanos();  return end - start;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.ANNOTATION__ARGS:    return ((InternalEList<?>)getArgs()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  @Override public SignatureLibraryRelease parse() throws IOException {  final SignatureLibraryRelease release=new SignatureLibraryRelease(this.getSignatureLibrary(),this.getReleaseVersionNumber());  for (  final PhobiusFeatureType type : PhobiusFeatureType.values()) {    final Signature.Builder builder=new Signature.Builder(type.getAccession());    final Signature signature=builder.name(type.getName()).description(type.getDescription()).signatureLibraryRelease(release).build();    release.addSignature(signature);  }  return release;}  }
class C{  public ToStringBuilder append(String fieldName,byte[] array){  style.append(buffer,fieldName,array,null);  return this;}  }
class C{  public static int installSilent(Context context,String filePath,String pmParams){  if (filePath == null || filePath.length() == 0) {    return INSTALL_FAILED_INVALID_URI;  }  File file=new File(filePath);  if (file == null || file.length() <= 0 || !file.exists() || !file.isFile()) {    return INSTALL_FAILED_INVALID_URI;  }  StringBuilder command=new StringBuilder().append("LD_LIBRARY_PATH=/vendor/lib:/system/lib pm install ").append(pmParams == null ? "" : pmParams).append(" ").append(filePath.replace(" ","\\ "));  CommandResult commandResult=ShellUtils.execCommand(command.toString(),!isSystemApplication(context),true);  if (commandResult.successMsg != null && (commandResult.successMsg.contains("Success") || commandResult.successMsg.contains("success"))) {    return INSTALL_SUCCEEDED;  }  Log.e(TAG,new StringBuilder().append("installSilent successMsg:").append(commandResult.successMsg).append(", ErrorMsg:").append(commandResult.errorMsg).toString());  if (commandResult.errorMsg == null) {    return INSTALL_FAILED_OTHER;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_ALREADY_EXISTS")) {    return INSTALL_FAILED_ALREADY_EXISTS;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_INVALID_APK")) {    return INSTALL_FAILED_INVALID_APK;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_INVALID_URI")) {    return INSTALL_FAILED_INVALID_URI;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_INSUFFICIENT_STORAGE")) {    return INSTALL_FAILED_INSUFFICIENT_STORAGE;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_DUPLICATE_PACKAGE")) {    return INSTALL_FAILED_DUPLICATE_PACKAGE;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_NO_SHARED_USER")) {    return INSTALL_FAILED_NO_SHARED_USER;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_UPDATE_INCOMPATIBLE")) {    return INSTALL_FAILED_UPDATE_INCOMPATIBLE;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_SHARED_USER_INCOMPATIBLE")) {    return INSTALL_FAILED_SHARED_USER_INCOMPATIBLE;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_MISSING_SHARED_LIBRARY")) {    return INSTALL_FAILED_MISSING_SHARED_LIBRARY;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_REPLACE_COULDNT_DELETE")) {    return INSTALL_FAILED_REPLACE_COULDNT_DELETE;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_DEXOPT")) {    return INSTALL_FAILED_DEXOPT;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_OLDER_SDK")) {    return INSTALL_FAILED_OLDER_SDK;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_CONFLICTING_PROVIDER")) {    return INSTALL_FAILED_CONFLICTING_PROVIDER;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_NEWER_SDK")) {    return INSTALL_FAILED_NEWER_SDK;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_TEST_ONLY")) {    return INSTALL_FAILED_TEST_ONLY;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_CPU_ABI_INCOMPATIBLE")) {    return INSTALL_FAILED_CPU_ABI_INCOMPATIBLE;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_MISSING_FEATURE")) {    return INSTALL_FAILED_MISSING_FEATURE;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_CONTAINER_ERROR")) {    return INSTALL_FAILED_CONTAINER_ERROR;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_INVALID_INSTALL_LOCATION")) {    return INSTALL_FAILED_INVALID_INSTALL_LOCATION;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_MEDIA_UNAVAILABLE")) {    return INSTALL_FAILED_MEDIA_UNAVAILABLE;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_VERIFICATION_TIMEOUT")) {    return INSTALL_FAILED_VERIFICATION_TIMEOUT;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_VERIFICATION_FAILURE")) {    return INSTALL_FAILED_VERIFICATION_FAILURE;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_PACKAGE_CHANGED")) {    return INSTALL_FAILED_PACKAGE_CHANGED;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_UID_CHANGED")) {    return INSTALL_FAILED_UID_CHANGED;  }  if (commandResult.errorMsg.contains("INSTALL_PARSE_FAILED_NOT_APK")) {    return INSTALL_PARSE_FAILED_NOT_APK;  }  if (commandResult.errorMsg.contains("INSTALL_PARSE_FAILED_BAD_MANIFEST")) {    return INSTALL_PARSE_FAILED_BAD_MANIFEST;  }  if (commandResult.errorMsg.contains("INSTALL_PARSE_FAILED_UNEXPECTED_EXCEPTION")) {    return INSTALL_PARSE_FAILED_UNEXPECTED_EXCEPTION;  }  if (commandResult.errorMsg.contains("INSTALL_PARSE_FAILED_NO_CERTIFICATES")) {    return INSTALL_PARSE_FAILED_NO_CERTIFICATES;  }  if (commandResult.errorMsg.contains("INSTALL_PARSE_FAILED_INCONSISTENT_CERTIFICATES")) {    return INSTALL_PARSE_FAILED_INCONSISTENT_CERTIFICATES;  }  if (commandResult.errorMsg.contains("INSTALL_PARSE_FAILED_CERTIFICATE_ENCODING")) {    return INSTALL_PARSE_FAILED_CERTIFICATE_ENCODING;  }  if (commandResult.errorMsg.contains("INSTALL_PARSE_FAILED_BAD_PACKAGE_NAME")) {    return INSTALL_PARSE_FAILED_BAD_PACKAGE_NAME;  }  if (commandResult.errorMsg.contains("INSTALL_PARSE_FAILED_BAD_SHARED_USER_ID")) {    return INSTALL_PARSE_FAILED_BAD_SHARED_USER_ID;  }  if (commandResult.errorMsg.contains("INSTALL_PARSE_FAILED_MANIFEST_MALFORMED")) {    return INSTALL_PARSE_FAILED_MANIFEST_MALFORMED;  }  if (commandResult.errorMsg.contains("INSTALL_PARSE_FAILED_MANIFEST_EMPTY")) {    return INSTALL_PARSE_FAILED_MANIFEST_EMPTY;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_INTERNAL_ERROR")) {    return INSTALL_FAILED_INTERNAL_ERROR;  }  return INSTALL_FAILED_OTHER;}  }
class C{  @Override public void agg(Object newVal){  if (newVal instanceof Timestamp) {    aggVal+=((Timestamp)newVal).getTime();    firstTime=false;  } else   if (newVal instanceof Number) {    aggVal+=((Number)newVal).doubleValue();    firstTime=false;  }}  }
class C{  void clearAllLinks(){  storageSourceService.deleteRowsAsync(LINK_TABLE_NAME,null);}  }
class C{  public NestableRuntimeException(String msg){  super(msg);}  }
class C{  @Override public void write(int value){  digest.update((byte)value);}  }
class C{  public void incProducedForItem(String item,int count){  handlePrefixedCounting(item,count,"produced.",produced);}  }
class C{  public static Motion createEaseMotion(int sourceValue,int destinationValue,int duration){  return createCubicBezierMotion(sourceValue,destinationValue,duration,0f,0.25f,0.25f,1.0f);}  }
class C{  public static <T>int detectIndex(T[] objectArray,Predicate<? super T> predicate){  if (objectArray == null) {    throw new IllegalArgumentException("Cannot perform a detectIndex on null");  }  return InternalArrayIterate.detectIndex(objectArray,objectArray.length,predicate);}  }
class C{  public static JCardValue multi(List<?> values){  List<JsonValue> multiValues=new ArrayList<JsonValue>(values.size());  for (  Object value : values) {    multiValues.add(new JsonValue(value));  }  return new JCardValue(multiValues);}  }
class C{  public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int col;  int row;  int numCols;  int numRows;  int i;  int progress;  String reflectionAxis="vertical";  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      if (args[i].toLowerCase().contains("v")) {        reflectionAxis="vertical";      } else       if (args[i].toLowerCase().contains("ho")) {        reflectionAxis="horizontal";      } else       if (args[i].toLowerCase().contains("b")) {        reflectionAxis="both";      }    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    numRows=image.getNumberRows();    numCols=image.getNumberColumns();    int rowsLessOne=numRows - 1;    int colsLessOne=numCols - 1;    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    double[] data;    if (reflectionAxis.equals("vertical")) {      for (row=0; row < numRows; row++) {        data=image.getRowValues(row);        for (col=0; col < numCols; col++) {          output.setValue(rowsLessOne - row,col,data[col]);        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (numRows - 1));        updateProgress("Finding patch min row and columns:",progress);      }    } else     if (reflectionAxis.equals("horizontal")) {      for (row=0; row < numRows; row++) {        data=image.getRowValues(row);        for (col=0; col < numCols; col++) {          output.setValue(row,colsLessOne - col,data[col]);        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (numRows - 1));        updateProgress("Finding patch min row and columns:",progress);      }    } else     if (reflectionAxis.equals("both")) {      for (row=0; row < numRows; row++) {        data=image.getRowValues(row);        for (col=0; col < numCols; col++) {          output.setValue(rowsLessOne - row,colsLessOne - col,data[col]);        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (numRows - 1));        updateProgress("Finding patch min row and columns:",progress);      }    }    output.setDisplayMinimum(image.getDisplayMinimum());    output.setDisplayMaximum(image.getDisplayMaximum());    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    image.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void clearCurrentNotifications(){  mbeanNotifications.clearCurrentNotifications();  if (mbeanNotifications.isListenerRegistered(mbean)) {    clearNotifications0();  } else {    clearNotifications();  }}  }
class C{  @DSComment("Potential intent to trigger other processing") @DSSafe(DSCat.INTENT_EXCHANGE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:09.496 -0500",hash_original_method="4D4788E50F7779B1D72BD45B4E76C775",hash_generated_method="CF81A6D8F26F9F109EFE6BE3F51D4C02") public Intent putExtra(String name,byte[] value){  mExtras.put(name,value);  return this;}  }
class C{  public boolean isEmpty(){  boolean empty=false;  if ((null == m_value) || (null != m_invalidValue)) {    empty=true;  }  return empty;}  }
class C{  public boolean isOK(){  return fSeverity == IStatus.OK;}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public int readSBits(int numBits) throws IOException {  long uBits=readUBits(numBits);  if ((uBits & (1L << (numBits - 1))) != 0) {    uBits|=-1L << numBits;  }  return (int)uBits;}  }
class C{  public Node unpush(){  if (head == null)   return null;  Node nde=getTail();  remove(nde);  return nde;}  }
class C{  @Override protected void onStartLoading(){  if (mApps != null) {    deliverResult(mApps);  }  if (mPackageObserver == null) {    mPackageObserver=new PackageIntentReceiver(this);  }  boolean configChange=mLastConfig.applyNewConfig(getContext().getResources());  if (takeContentChanged() || mApps == null || configChange) {    forceLoad();  }}  }
class C{  protected void onFieldInt(final Object obj,final Field field,final Bin annotation,final int value){}  }
class C{  protected byte[] engineDoFinal(byte[] input,int inputOffset,int inputLen) throws IllegalBlockSizeException, BadPaddingException {  return core.doFinal(input,inputOffset,inputLen);}  }
class C{  public SortableAndSearchableTable(TableModel dm,TableColumnModel cm){  super(dm,cm);}  }
class C{  public final boolean isEditable(){  return editable;}  }
class C{  public void update(long duration,TimeUnit unit){  update(unit.toNanos(duration));}  }
class C{  public void put(byte[] data,String remoteFileName,String remoteTargetDirectory,String mode) throws IOException {  Session sess=null;  if ((remoteFileName == null) || (remoteTargetDirectory == null) || (mode == null))   throw new IllegalArgumentException("Null argument.");  if (mode.length() != 4)   throw new IllegalArgumentException("Invalid mode.");  for (int i=0; i < mode.length(); i++)   if (Character.isDigit(mode.charAt(i)) == false)   throw new IllegalArgumentException("Invalid mode.");  remoteTargetDirectory=remoteTargetDirectory.trim();  remoteTargetDirectory=(remoteTargetDirectory.length() > 0) ? remoteTargetDirectory : ".";  String cmd="scp -t -d " + remoteTargetDirectory;  try {    sess=conn.openSession();    sess.execCommand(cmd);    sendBytes(sess,data,remoteFileName,mode);  } catch (  IOException e) {    throw (IOException)new IOException("Error during SCP transfer.").initCause(e);  } finally {    if (sess != null)     sess.close();  }}  }
class C{  public T caseComplexType(ComplexType object){  return null;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document newDoc;  DocumentType docType=null;  DOMImplementation domImpl;  Element element;  String namespaceURI="http://www.w3.org/xml/1998/namespace ";  String qualifiedName="xml:root";  doc=(Document)load("staffNS",false);  domImpl=doc.getImplementation();  newDoc=domImpl.createDocument("http://www.w3.org/DOM/Test","dom:doc",docType);{    boolean success=false;    try {      element=newDoc.createElementNS(namespaceURI,qualifiedName);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("documentcreateelementNS06",success);  }}  }
class C{  public void aliasAttribute(final Class<?> definedIn,final String attributeName,final String alias){  aliasField(alias,definedIn,attributeName);  useAttributeFor(definedIn,attributeName);}  }
class C{  private boolean shouldCache(LeafReaderContext context) throws IOException {  return cacheEntryHasReasonableWorstCaseSize(ReaderUtil.getTopLevelContext(context).reader().maxDoc()) && leavesToCache.test(context);}  }
class C{  public void testUnsizedIntsCount(){  LongAdder counter=new LongAdder();  SplittableRandom r=new SplittableRandom();  long size=100;  r.ints().limit(size).parallel().forEach(null);  assertEquals(counter.sum(),size);}  }
class C{  @SuppressWarnings("unchecked") public static Match.Builder convertToVersion(Match parent,OFVersion version){  Match.Builder mb=OFFactories.getFactory(version).buildMatch();  Iterator<MatchField<?>> itr=parent.getMatchFields().iterator();  while (itr.hasNext()) {    @SuppressWarnings("rawtypes") MatchField mf=itr.next();    if (parent.isExact(mf)) {      mb.setExact(mf,parent.get(mf));    } else     if (parent.isPartiallyMasked(mf)) {      mb.setMasked(mf,parent.getMasked(mf));    } else {    }  }  return mb;}  }
class C{  public static void print(int m,char guess){  System.out.print("\t" + guess);switch (m) {case 1:    System.out.println(" is already in the word");  break;case 2:System.out.println(" is not in the word");}}  }
class C{  public boolean isOutgoing(){  return mOutgoing;}  }
class C{  public static Timeline createTimeline(int duration,AnimationObject[] animations,Dimension size){  if (duration <= 0) {    throw new IllegalArgumentException("Illegal duration " + duration);  }  Timeline t=new Timeline();  t.duration=duration;  t.animations=animations;  t.size=size;  return t;}  }
class C{  private Rendezvous(String where,int expected){  this.where=where;  this.expected=expected;}  }
class C{  public void clear(){  for (int i=0; i < this.getSeriesCount(); i++) {    this.getSeries(i).clear();  }}  }
class C{  public static void cursorStringToInsertHelper(Cursor cursor,String field,InsertHelper inserter,int index){  inserter.bind(index,cursor.getString(cursor.getColumnIndexOrThrow(field)));}  }
class C{  public boolean isCalledMethod(String className,String methodName){  if (toTestMethods.isEmpty())   computeInterestingClasses(graph);  if (toTestMethods.contains(className + methodName)) {    return true;  }  return false;}  }
class C{  protected void assertSameDTDSubset(String txt,List expected,List actual){  if (expected == null) {    if (actual == null) {      return;    } else {      fail("Not expecting " + txt + " DTD subset.");    }  } else {    if (actual == null) {      fail("Expecting " + txt + " DTD subset.");    }    assertEquals(txt + " DTD subset has correct #of declarations" + ": expected=["+ expected.toString()+ "]"+ ", actual=["+ actual.toString()+ "]",expected.size(),actual.size());    Iterator itr1=expected.iterator();    Iterator itr2=actual.iterator();    while (itr1.hasNext()) {      Object obj1=itr1.next();      Object obj2=itr2.next();      assertEquals(txt + " DTD subset: Same type of declaration",obj1.getClass().getName(),obj2.getClass().getName());      if (obj1 instanceof AttributeDecl) {        assertSameDecl((AttributeDecl)obj1,(AttributeDecl)obj2);      } else       if (obj1 instanceof ElementDecl) {        assertSameDecl((ElementDecl)obj1,(ElementDecl)obj2);      } else       if (obj1 instanceof InternalEntityDecl) {        assertSameDecl((InternalEntityDecl)obj1,(InternalEntityDecl)obj2);      } else       if (obj1 instanceof ExternalEntityDecl) {        assertSameDecl((ExternalEntityDecl)obj1,(ExternalEntityDecl)obj2);      } else {        throw new AssertionError("Unexpected declaration type: " + obj1.getClass());      }    }  }}  }
class C{  public static byte max(byte[] array){  if (array == null) {    throw new IllegalArgumentException("The Array must not be null");  } else   if (array.length == 0) {    throw new IllegalArgumentException("Array cannot be empty.");  }  byte max=array[0];  for (int i=1; i < array.length; i++) {    if (array[i] > max) {      max=array[i];    }  }  return max;}  }
class C{  private String processVariable(Variables variables,String value){  if (value == null) {    return null;  } else   if (StringUtils.isEmpty(value)) {    return "";  }  String returnValue=value;  if (ValidationUtil.isVariable(returnValue)) {    returnValue=variables.getVariable(returnValue);  }  return returnValue != null ? returnValue : "";}  }
class C{  @Deprecated public static <N,E>ImmutableNetwork<N,E> copyOf(ImmutableNetwork<N,E> graph){  return checkNotNull(graph);}  }
class C{  public JSONArray put(int index,Object value) throws JSONException {  JSONObject.testValidity(value);  if (index < 0) {    throw new JSONException("JSONArray[" + index + "] not found.");  }  if (index < this.length()) {    this.list.set(index,value);  } else {    while (index != this.length()) {      this.put(JSONObject.NULL);    }    this.put(value);  }  return this;}  }
class C{  public boolean isSuspended(){  return System.currentTimeMillis() < getSuspendedUntil() || isSuspendedIndefinitely();}  }
class C{  public boolean isBootOptionsSupported(){  return bootOptionsSupported;}  }
class C{  void add(int windowID,DTVCCDirection dirrection){  rollups.add(new RollupWindow(windowID,dirrection));}  }
class C{  public String convertPostfixOperatorToString(EDataType eDataType,Object instanceValue){  return instanceValue == null ? null : instanceValue.toString();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodeappendchildnewchilddiffdocument.class,args);}  }
class C{  public void warning(SAXParseException ex) throws SAXException {}  }
class C{  public static String asciiString(byte[] buf){  return asciiString(buf,0,buf.length);}  }
class C{  private void doStitch(Side side,QuadTree that){  if (this.level == that.level) {    int tileWidth=mesh.getTileWidth();    int tileLength=mesh.getTileLength();switch (side) {case Left:      mesh.setElevationColumn(0,this.edge[0]);    mesh.setNormalsColumn(0,this.nrml[0]);  that.mesh.setElevationColumn(tileWidth,that.edge[2]);that.mesh.setNormalsColumn(tileWidth,this.nrml[0]);break;case Top:mesh.setElevationRow(0,this.edge[1]);mesh.setNormalsRow(0,this.nrml[1]);that.mesh.setElevationRow(tileLength,that.edge[3]);that.mesh.setNormalsRow(tileLength,this.nrml[1]);break;case Right:mesh.setElevationColumn(tileWidth,this.edge[2]);mesh.setNormalsColumn(tileWidth,that.nrml[0]);that.mesh.setElevationColumn(0,that.edge[0]);that.mesh.setNormalsColumn(0,that.nrml[0]);break;case Bottom:mesh.setElevationRow(tileLength,this.edge[3]);mesh.setNormalsRow(tileLength,that.nrml[1]);that.mesh.setElevationRow(0,that.edge[1]);that.mesh.setNormalsRow(0,that.nrml[1]);break;}} else if (this.level > that.level) {double[] e=findStitchEnds(this,side,that);fillEdge(side,that,e);} else {throw new IllegalStateException("Passed in quadtree is higher resolution than stitching quadtree.");}}  }
class C{  public void addConfigParam(IFloodlightModule mod,String key,String value){  Map<String,String> moduleParams=configParams.get(mod.getClass());  if (moduleParams == null) {    moduleParams=new HashMap<String,String>();    configParams.put(mod.getClass(),moduleParams);  }  moduleParams.put(key,value);}  }
class C{  public void configure(String host,int suppliedPort,String webResourceRoot,WebAuthConfig authConfig,List<Object> wars) throws BaleenException {  int port=getPort(suppliedPort);  LOGGER.debug("Configuring WebApi on {}:{}",host,port);  if (this.server != null) {    stop();  }  this.server=new Server(InetSocketAddress.createUnresolved(host,port));  final HandlerList handlers=new HandlerList();  servletContextHandler=new ServletContextHandler();  servletContextHandler.setContextPath("/api/1");  handlers.addHandler(servletContextHandler);  LOGGER.debug("Adding servlets");  addServlet(new MetricsServlet(MetricsFactory.getInstance().getRegistry()),"/metrics");  addServlet(new StatusServlet(),"/status");  addServlet(new PipelineManagerServlet(baleenManager.getPipelineManager()),"/pipelines/*");  addServlet(new JobManagerServlet(baleenManager.getJobManager()),"/jobs/*");  addServlet(new BaleenManagerServlet(baleenManager),"/manager/*");  addServlet(new LoggingServlet(baleenManager.getLogging()),"/logs/*");  addServlet(new PipelineConfigServlet(baleenManager.getPipelineManager()),"/config/pipelines");  addServlet(new JobConfigServlet(baleenManager.getJobManager()),"/config/jobs");  addServlet(new BaleenManagerConfigServlet(baleenManager),"/config/manager");  addServlet(new AnnotatorsServlet(),"/annotators/*");  addServlet(new CollectionReadersServlet(),"/collectionreaders/*");  addServlet(new ConsumersServlet(),"/consumers/*");  addServlet(new ContentExtractorsServlet(),"/contentextractors/*");  addServlet(new TasksServlet(),"/tasks/*");  addServlet(new SchedulesServlet(),"/schedules/*");  installJavadocs(handlers);  installWebRoot(handlers,webResourceRoot);  installWars(handlers,wars);  installSwagger(handlers);  LOGGER.debug("Instrumenting web server with metrics");  servletContextHandler.getServletContext().setAttribute(InstrumentedFilter.REGISTRY_ATTRIBUTE,MetricsFactory.getInstance().getRegistry());  servletContextHandler.addFilter(InstrumentedFilter.class,"/*",EnumSet.of(DispatcherType.REQUEST));  handlers.addHandler(new DefaultHandler());  configureServer(server,authConfig,handlers);  LOGGER.info("Web API has been configured");}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:23.077 -0500",hash_original_method="1972D57F3C05C7BADF696B9ADC3E34F9",hash_generated_method="BA9A46CE526C5E63D2D926F1CB99EE3C") public char charValue(){  return value;}  }
class C{  public T background(String value){  return attr("background",value);}  }
class C{  public T push(T value){  add(value);  return value;}  }
class C{  private void parseAuthnStatement(List<StatementAbstractType> authnStatement){}  }
class C{  public static org.apache.nutch.storage.ParseStatus.Builder newBuilder(org.apache.nutch.storage.ParseStatus other){  return new org.apache.nutch.storage.ParseStatus.Builder(other);}  }
class C{  public final void removeFromScene(){  if (removedFromScene)   return;  getChildren().clear();  try {    if (getParent() == null) {      removedFromScene=true;      return;    }    if (getParent() instanceof EntityView) {      ((EntityView)getParent()).removeFromScene();    } else     if (getParent() instanceof Group) {      ((Group)getParent()).getChildren().remove(this);    } else {      throw new IllegalStateException("View parent is of unknown type: " + getParent().getClass());    }    removedFromScene=true;  } catch (  Exception e) {    log.warning("View wasn't removed from scene: " + e);  }}  }
class C{  @Autowired public ModifyCashierCommandHandler(final CashierWritePlatformService writePlatformService){  super();  this.writePlatformService=writePlatformService;}  }
class C{  private Operand _prepareDoubleConstant(Operand op){  RegisterOperand t=gc.getTemps().makeTemp(op.getType());  appendInstruction(Move.create(DOUBLE_MOVE,t,op));  return t.copyD2U();}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.N4_INTERFACE_DECLARATION__SUPER_INTERFACE_REFS:    getSuperInterfaceRefs().clear();  return;}super.eUnset(featureID);}  }
class C{  public int score(){  return score;}  }
class C{  @Deprecated public void write(DataOutput out) throws IOException {  this.comparator.write(out);}  }
class C{  public DocumentoHashInfo(){  super();}  }
class C{  private int shrink0(){  Holder<K,V> h=set.pollFirst();  if (h == null)   return -1;  int size=0;  EvictableEntry<K,V> entry=h.entry;  if (h.order > 0 && entry.removeMeta(h)) {    size=entry.size();    memSize.add(-size);    if (!entry.evict())     touch(entry);  }  return size;}  }
class C{  public void rebootstrapMemory(Memory memory){synchronized (memory) {    Network network=memory.newMemory();    Vertex language=network.createVertex(new Primitive(Language.class.getName()));    Collection<Relationship> states=language.getRelationships(Primitive.STATE);    if (states != null) {      states=new ArrayList<Relationship>(language.getRelationships(Primitive.STATE));      for (      Relationship relationship : states) {        SelfCompiler.getCompiler().fastLoad(relationship.getTarget());        SelfCompiler.getCompiler().unpin(relationship.getTarget());        relationship.getSource().internalRemoveRelationship(relationship);        relationship.getTarget().internalRemoveAllRelationships();        network.save();      }    }    mathNetwork(network);    englishNetwork(network);    stateMachineNetwork(network);    network.save();  }}  }
class C{  private float crossCheckVertical(int startI,int centerJ,int maxCount,int originalStateCountTotal){  BitMatrix image=this.image;  int maxI=image.getHeight();  int[] stateCount=getCrossCheckStateCount();  int i=startI;  while (i >= 0 && image.get(centerJ,i)) {    stateCount[2]++;    i--;  }  if (i < 0) {    return Float.NaN;  }  while (i >= 0 && !image.get(centerJ,i) && stateCount[1] <= maxCount) {    stateCount[1]++;    i--;  }  if (i < 0 || stateCount[1] > maxCount) {    return Float.NaN;  }  while (i >= 0 && image.get(centerJ,i) && stateCount[0] <= maxCount) {    stateCount[0]++;    i--;  }  if (stateCount[0] > maxCount) {    return Float.NaN;  }  i=startI + 1;  while (i < maxI && image.get(centerJ,i)) {    stateCount[2]++;    i++;  }  if (i == maxI) {    return Float.NaN;  }  while (i < maxI && !image.get(centerJ,i) && stateCount[3] < maxCount) {    stateCount[3]++;    i++;  }  if (i == maxI || stateCount[3] >= maxCount) {    return Float.NaN;  }  while (i < maxI && image.get(centerJ,i) && stateCount[4] < maxCount) {    stateCount[4]++;    i++;  }  if (stateCount[4] >= maxCount) {    return Float.NaN;  }  int stateCountTotal=stateCount[0] + stateCount[1] + stateCount[2]+ stateCount[3]+ stateCount[4];  if (5 * Math.abs(stateCountTotal - originalStateCountTotal) >= 2 * originalStateCountTotal) {    return Float.NaN;  }  return foundPatternCross(stateCount) ? centerFromEnd(stateCount,i) : Float.NaN;}  }
class C{  public List<JsonObject> executeStatement(String statement){  SimpleN1qlQuery query=N1qlQuery.simple(statement);  return executeQuery(query);}  }
class C{  public static byte[] convertToByteArray(long l){  byte[] b=new byte[4];  b[0]=(byte)(255 & (l >> 24));  b[1]=(byte)(255 & (l >> 16));  b[2]=(byte)(255 & (l >> 8));  b[3]=(byte)(255 & l);  return b;}  }
class C{  BinaryClass loadFile(ClassFile file) throws IOException {  long tm=System.currentTimeMillis();  InputStream input=file.getInputStream();  BinaryClass c=null;  if (tracing)   dtEnter("loadFile: LOADING CLASSFILE " + file);  try {    DataInputStream is=new DataInputStream(new BufferedInputStream(input));    c=BinaryClass.load(new Environment(this,file),is,loadFileFlags());  } catch (  ClassFormatError e) {    error(0,"class.format",file.getPath(),e.getMessage());    if (tracing)     dtExit("loadFile: CLASS FORMAT ERROR " + file);    return null;  }catch (  java.io.EOFException e) {    error(0,"truncated.class",file.getPath());    return null;  }  input.close();  if (verbose()) {    tm=System.currentTimeMillis() - tm;    output(Main.getText("benv.loaded_in",file.getPath(),Long.toString(tm)));  }  if (tracing)   dtExit("loadFile: CLASSFILE LOADED " + file);  return c;}  }
class C{  public void writeLong(String key,Long value){  if (writeParameter(key,value.toString()) != 0) {    mCache.put(key,value);  }}  }
class C{  public StateMachineConfigurationBuilder(ObjectPostProcessor<Object> objectPostProcessor){  super(objectPostProcessor);}  }
class C{  public static OutputLimitClause createAfter(TimePeriodExpression afterTimePeriodExpression){  return new OutputLimitClause(OutputLimitSelector.DEFAULT,OutputLimitUnit.AFTER,afterTimePeriodExpression,null);}  }
class C{  public static long computeStartSequenceId(List<LogSegmentMetadata> logSegmentDescList,LogSegmentMetadata segment) throws UnexpectedException {  long startSequenceId=0L;  for (  LogSegmentMetadata metadata : logSegmentDescList) {    if (metadata.getLogSegmentSequenceNumber() >= segment.getLogSegmentSequenceNumber()) {      continue;    } else     if (metadata.getLogSegmentSequenceNumber() < (segment.getLogSegmentSequenceNumber() - 1)) {      break;    }    if (metadata.isInProgress()) {      throw new UnexpectedException("Should not complete log segment " + segment.getLogSegmentSequenceNumber() + " since it's previous log segment is still inprogress : "+ logSegmentDescList);    }    if (metadata.supportsSequenceId()) {      startSequenceId=metadata.getStartSequenceId() + metadata.getRecordCount();    }  }  return startSequenceId;}  }
class C{  @Override public void notifyWatch(TableKraken table,byte[] key){  WatchTable watchTable=_tableMap.get(table);  if (watchTable != null) {    watchTable.onPut(key,TableListener.TypePut.REMOTE);  }}  }
class C{  public SQLException(Throwable theCause){  this(theCause == null ? null : theCause.toString(),null,0,theCause);}  }
class C{  @Inline public static boolean validRef(ObjectReference ref){  if (booted) {    return DebugUtil.validRef(ref);  } else {    return true;  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (name: ");  result.append(name);  result.append(')');  return result.toString();}  }
class C{  public static String toString(byte[] input,String encoding) throws IOException {  return new String(input,Charsets.toCharset(encoding));}  }
class C{  public ProxyConfig(Type type,String host,int port){  this(type,host,port,null,null,true,Collections.emptySet());}  }
class C{  public MonthDay withChronologyRetainFields(Chronology newChronology){  newChronology=DateTimeUtils.getChronology(newChronology);  newChronology=newChronology.withUTC();  if (newChronology == getChronology()) {    return this;  } else {    MonthDay newMonthDay=new MonthDay(this,newChronology);    newChronology.validate(newMonthDay,getValues());    return newMonthDay;  }}  }
class C{  private void bogusMethod(Object... os){  if (DUMP_CLASS_FILES) {    mv=cw.visitMethod(Opcodes.ACC_STATIC,"dummy","()V",null,null);    for (    Object o : os) {      mv.visitLdcInsn(o.toString());      mv.visitInsn(Opcodes.POP);    }    mv.visitInsn(Opcodes.RETURN);    mv.visitMaxs(0,0);    mv.visitEnd();  }}  }
class C{  private Response errorResponse(String message){  return Response.serverError().entity(Collections.singletonMap("message",message)).build();}  }
class C{  protected static String makeOptionsString(Stemmer stemmer){  Vector<Option> options=new Vector<Option>();  options.add(new Option("\tDisplays this help.","h",0,"-h"));  options.add(new Option("\tThe file to process.","i",1,"-i <input-file>"));  options.add(new Option("\tThe file to output the processed data to (default stdout).","o",1,"-o <output-file>"));  options.add(new Option("\tUses lowercase strings.","l",0,"-l"));  if (stemmer instanceof OptionHandler) {    options.addAll(Collections.list(((OptionHandler)stemmer).listOptions()));  }  StringBuffer result=new StringBuffer();  result.append("\nStemmer options:\n\n");  Enumeration<Option> enm=options.elements();  while (enm.hasMoreElements()) {    Option option=enm.nextElement();    result.append(option.synopsis() + "\n");    result.append(option.description() + "\n");  }  return result.toString();}  }
class C{  protected boolean initializeWraparoundTest(){  for (int i=0; i < nOutBytes; i++) {    outBytes[i]=0;  }  curOutByte=begOutByte;  curOutValue=0;  _memo.getTrafficController().sendSerialMessage((SerialMessage)node.createInitPacket(),curFrame);  try {    wait(1000);  } catch (  Exception e) {  }  numErrors=0;  numIterations=0;  testRunning=true;  testSuspended=false;  waitingOnInput=false;  needInputTest=false;  count=50;  return (true);}  }
class C{  public boolean isSystemBoundAsClient(){  return mIsSystemBoundAsClient;}  }
class C{  private static boolean isBetaVersion(){  return Constants.PROJECT_NAME_VERSION.toLowerCase().contains("beta");}  }
class C{  void parseLiteral(boolean replace) throws IOException {  while (true) {    int c=ch;switch (c) {case -1:      error("eof.literal",stack.elem.getName());    endTag(true);  return;case '>':ch=readCh();int i=textpos - (stack.elem.name.length() + 2), j=0;if ((i >= 0) && (text[i++] == '<') && (text[i] == '/')) {while ((++i < textpos) && (Character.toLowerCase(text[i]) == stack.elem.name.charAt(j++))) ;if (i == textpos) {textpos-=(stack.elem.name.length() + 2);if ((textpos > 0) && (text[textpos - 1] == '\n')) {  textpos--;}endTag(false);return;}}break;case '&':char data[]=parseEntityReference();if (textpos + data.length > text.length) {char newtext[]=new char[Math.max(textpos + data.length + 128,text.length * 2)];System.arraycopy(text,0,newtext,0,text.length);text=newtext;}System.arraycopy(data,0,text,textpos,data.length);textpos+=data.length;continue;case '\n':ln++;ch=readCh();lfCount++;break;case '\r':ln++;if ((ch=readCh()) == '\n') {ch=readCh();crlfCount++;} else {crCount++;}c='\n';break;default :ch=readCh();break;}if (textpos == text.length) {char newtext[]=new char[text.length + 128];System.arraycopy(text,0,newtext,0,text.length);text=newtext;}text[textpos++]=(char)c;}}  }
class C{  public String toStringSummary(){  int resultsetLength;  String result;  String titles;  int i;  int j;  if (m_NonSigWins == null)   return "-summary data not set-";  resultsetLength=1 + Math.max((int)(Math.log(getColCount()) / Math.log(10)),(int)(Math.log(getRowCount()) / Math.log(10)));  result="";  titles="";  result+="{\\centering\n";  result+="\\begin{table}[thb]\n\\caption{\\label{labelname}" + "Table Caption}\n";  result+="\\footnotesize\n";  result+="\\begin{tabular}{l";  for (i=0; i < getColCount(); i++) {    if (getColHidden(i))     continue;    titles+=" &";    result+="c";    titles+=' ' + Utils.padLeft("" + getSummaryTitle(i),resultsetLength * 2 + 3);  }  result+="}\\\\\n\\hline\n";  result+=titles + " \\\\\n\\hline\n";  for (i=0; i < getColCount(); i++) {    if (getColHidden(i))     continue;    for (j=0; j < getColCount(); j++) {      if (getColHidden(j))       continue;      if (j == 0)       result+=(char)((int)'a' + i % 26);      if (j == i)       result+=" & - "; else       result+="& " + m_NonSigWins[i][j] + " ("+ m_Wins[i][j]+ ") ";    }    result+="\\\\\n";  }  result+="\\hline\n\\end{tabular} \\footnotesize \\par\n\\end{table}}";  return result;}  }
class C{  private static void callExpand(Instruction call,IR ir){  boolean isSysCall=call.operator() == IA32_SYSCALL;  int parameterBytes=isSysCall ? expandParametersToSysCall(call,ir) : expandParametersToCall(call,ir);  if (!SSE2_FULL) {    if (!call.operator().isCallSaveVolatile()) {      int FPRRegisterParams=countFPRParams(call);      FPRRegisterParams=Math.min(FPRRegisterParams,PhysicalRegisterSet.getNumberOfFPRParams());      call.insertBefore(MIR_UnaryNoRes.create(IA32_FCLEAR,IC(FPRRegisterParams)));    }  }  expandResultOfCall(call,isSysCall,ir);  if (VM.BuildForIMTInterfaceInvocation) {    if (MIR_Call.hasMethod(call)) {      MethodOperand mo=MIR_Call.getMethod(call);      if (mo.isInterface()) {        InterfaceMethodSignature sig=InterfaceMethodSignature.findOrCreate(mo.getMemberRef());        MemoryOperand M=MemoryOperand.BD(ir.regpool.makeTROp(),ArchEntrypoints.hiddenSignatureIdField.getOffset(),(byte)WORDSIZE,null,null);        call.insertBefore(MIR_Move.create(IA32_MOV,M,IC(sig.getId())));      }    }  }  call.insertBefore(MIR_UnaryNoRes.create(REQUIRE_ESP,IC(parameterBytes)));  call.insertAfter(MIR_UnaryNoRes.create(ADVISE_ESP,IC(isSysCall ? parameterBytes : 0)));}  }
class C{  private int socksGetServerPort(){  InetSocketAddress addr=(InetSocketAddress)proxy.address();  return addr.getPort();}  }
class C{  public static IResource handleToResource(final String project,final String handle){  final IWorkspaceRoot root=ResourcesPlugin.getWorkspace().getRoot();  if ("".equals(handle))   return null;  final IPath path=Path.fromPortableString(handle);  if (path == null)   return null;  if (project != null && !"".equals(project))   return root.getProject(project).findMember(path);  return root.findMember(path);}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == TMember.class) {switch (derivedFeatureID) {case TypesPackage.TMETHOD__DECLARED_FINAL:      return TypesPackage.TMEMBER__DECLARED_FINAL;case TypesPackage.TMETHOD__DECLARED_STATIC:    return TypesPackage.TMEMBER__DECLARED_STATIC;case TypesPackage.TMETHOD__DECLARED_OVERRIDE:  return TypesPackage.TMEMBER__DECLARED_OVERRIDE;default :return -1;}}if (baseClass == TMemberWithAccessModifier.class) {switch (derivedFeatureID) {case TypesPackage.TMETHOD__HAS_NO_BODY:return TypesPackage.TMEMBER_WITH_ACCESS_MODIFIER__HAS_NO_BODY;case TypesPackage.TMETHOD__DECLARED_MEMBER_ACCESS_MODIFIER:return TypesPackage.TMEMBER_WITH_ACCESS_MODIFIER__DECLARED_MEMBER_ACCESS_MODIFIER;default :return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  public void testCase9(){  byte aBytes[]={1,2,3,4,5,6,7,1,2,3,1,2,3,4,5};  int aSign=1;  byte rBytes[]={1,2,3,4,5,6,7,1,2,3,1,2,3,4,5};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=BigInteger.ONE;  BigInteger result=aNumber.multiply(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  Layout find_layout_by_name(String layout_name){  for (  Layout l : layouts) {    if (layout_name.equals(l.name))     return l;  }  return null;}  }
class C{  public void writeUint24(long n){  check(3);  buffer[write_pos++]=(byte)((n & 0x00ff0000) >> 16);  buffer[write_pos++]=(byte)((n & 0x00ff00) >> 8);  buffer[write_pos++]=(byte)(n & 0x00ff);}  }
class C{  protected void onPrepareRequest(HttpUriRequest request) throws IOException {}  }
class C{  public static NBTTagCompound compoundTagPresence(@Nullable NBTTagCompound tag){  if (tag != null && !tag.hasNoTags()) {    return tag;  }  return null;}  }
class C{  public void flushPending() throws SAXException {  if (m_needToCallStartDocument) {    startDocumentInternal();    m_needToCallStartDocument=false;  }  if (m_elemContext.m_startTagOpen) {    closeStartTag();    m_elemContext.m_startTagOpen=false;  }  if (m_cdataTagOpen) {    closeCDATA();    m_cdataTagOpen=false;  }  if (m_writer != null) {    try {      m_writer.flush();    } catch (    IOException e) {    }  }}  }
class C{  public static Plane constructNormalizedYPlane(final double x,final double z,final double DValue){  if (Math.abs(x) < MINIMUM_RESOLUTION && Math.abs(z) < MINIMUM_RESOLUTION)   return null;  final double denom=1.0 / Math.sqrt(x * x + z * z);  return new Plane(z * denom,0.0,-x * denom,DValue);}  }
class C{  public boolean isInterface(){  lazyLoad();  return Modifier.isInterface(_accessFlags);}  }
class C{  @Override public int processImage(String name,final int dataPointer,final PdfObject XObject) throws PdfException {  String key=null;  if (ImageCommands.rejectSuperimposedImages) {    key=((int)gs.CTM[2][0]) + "-" + ((int)gs.CTM[2][1])+ '-'+ ((int)gs.CTM[0][0])+ '-'+ ((int)gs.CTM[1][1])+ '-'+ ((int)gs.CTM[0][1])+ '-'+ ((int)gs.CTM[1][0]);  }  try {    if (System.getProperty("testsDisableImages") == null) {      processXImage(name,name,key,XObject);    }  } catch (  final Error e) {    LogWriter.writeLog("Error: " + e.getMessage());    parserOptions.imagesProcessedFully=false;    errorTracker.addPageFailureMessage("Error " + e + " in DO");  }catch (  final Exception e) {    LogWriter.writeLog("Exception " + e);    parserOptions.imagesProcessedFully=false;    errorTracker.addPageFailureMessage("Error " + e + " in DO");  }  return dataPointer;}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == ModifiableElement.class) {switch (derivedFeatureID) {case N4JSPackage.N4_MEMBER_DECLARATION__DECLARED_MODIFIERS:      return N4JSPackage.MODIFIABLE_ELEMENT__DECLARED_MODIFIERS;default :    return -1;}}if (baseClass == TypeProvidingElement.class) {switch (derivedFeatureID) {default :  return -1;}}if (baseClass == TypableElement.class) {switch (derivedFeatureID) {default :return -1;}}if (baseClass == NamedElement.class) {switch (derivedFeatureID) {default :return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  public NodeDeRegistrationResponse deregisterNode(final String nodeId){  if (StringUtils.isBlank(nodeId))   return new NodeDeRegistrationResponse("",NodeDeRegistrationState.MISSING_NODE_ID,"");  String id=StringUtils.lowerCase(StringUtils.trim(nodeId));  if (!this.processingNodes.containsKey(id))   return new NodeDeRegistrationResponse(nodeId,NodeDeRegistrationState.NO_SUCH_NODE_ID,"Unknown node id: " + nodeId);  final SPQRNodeClient client=this.processingNodes.remove(id);  if (client != null)   client.shutdown();  return new NodeDeRegistrationResponse(nodeId,NodeDeRegistrationState.OK,"");}  }
class C{  @Inline @Entrypoint public static short shortArrayRead(short[] ref,int index){  if (NEEDS_SHORT_GC_READ_BARRIER) {    ObjectReference array=ObjectReference.fromObject(ref);    Offset offset=Offset.fromIntZeroExtend(index << LOG_BYTES_IN_SHORT);    return Selected.Mutator.get().shortRead(array,array.toAddress().plus(offset),offset.toWord(),Word.zero(),ARRAY_ELEMENT);  } else   if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return 0;}  }
class C{  protected VirtualStackSlot allocateSaveRegisterLocation(Register register){  PlatformKind kind=target().arch.getLargestStorableKind(register.getRegisterCategory());  if (kind.getVectorLength() > 1) {    kind=AMD64Kind.DOUBLE;  }  return getResult().getFrameMapBuilder().allocateSpillSlot(LIRKind.value(kind));}  }
class C{  public MongoClient clientFor(ServerAddress address){  return directConnections.computeIfAbsent(address,null);}  }
class C{  public E first(){  return backingMap.firstKey();}  }
class C{  @SuppressLint("ClickableViewAccessibility") @Override public boolean onTouchEvent(MotionEvent event){  if (event.getAction() == MotionEvent.ACTION_UP)   setAlpha(1.0f); else   if (event.getAction() == MotionEvent.ACTION_DOWN)   setAlpha(0.6f);  return super.onTouchEvent(event);}  }
class C{  public EntityConstructor(String name,Model model,float mass,boolean disableDeactivation){  Mesh modelMesh=model.meshes.get(0);  btCollisionShape shape=new btConvexHullShape(modelMesh.getVerticesBuffer(),modelMesh.getNumVertices(),modelMesh.getVertexSize());  createConstructionInfo(name,model,mass,shape,disableDeactivation);}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (isSummary()) {    setMediaType(null);    setAD_Image_ID(0);  }  return true;}  }
class C{  public void clear(){  messages=Collections.emptyList();  isMessagesListMutable=false;  if (builders != null) {    for (    SingleFieldBuilder<MType,BType,IType> entry : builders) {      if (entry != null) {        entry.dispose();      }    }    builders=null;  }  onChanged();  incrementModCounts();}  }
class C{  protected void _validate(List<Warning> warnings,VCardVersion version,VCard vcard){}  }
class C{  private float snap(float value){  if (snapValues == null)   return value;  for (int i=0; i < snapValues.length; i++) {    if (Math.abs(value - snapValues[i]) <= threshold)     return snapValues[i];  }  return value;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:05.685 -0500",hash_original_method="75BA962F238E916BD53759FC06C4F3FC",hash_generated_method="7CAFE071E3C45BF9679B399A53FBEBDC") public boolean isUp() throws SocketException {  return hasFlag(IFF_UP);}  }
class C{  public static <T>T loadFixture(String filename,Class<T> returnType) throws FileNotFoundException {  String jsonString=getStringFromInputStream(new FileInputStream(filename));  return GsonSingleton.getGsonWithoutPrettyPrinting().fromJson(jsonString,returnType);}  }
class C{  protected PaypalResponse sendPaypalRequest(PostMethod paypalRequest) throws HttpException, IOException, ParserConfigurationException, SAXException {  client.executeMethod(paypalRequest);  return new PaypalResponse(paypalRequest.getResponseBodyAsString());}  }
class C{  public static String networkString(int hash){  return String.format("%s/%d",ipString(hash),getCIDR(hash));}  }
class C{  static <T>T checkNotNull(T reference,@Nullable Object errorMessage){  if (reference == null) {    throw new NullPointerException(String.valueOf(errorMessage));  }  return reference;}  }
class C{  private Object readResolve(InputNode node,Object source,Caller caller) throws Exception {  if (source != null) {    Position line=node.getPosition();    Object value=caller.resolve(source);    Class expect=type.getType();    Class real=value.getClass();    if (!expect.isAssignableFrom(real)) {      throw new ElementException("Type %s does not match %s at %s",real,expect,line);    }    return value;  }  return source;}  }
class C{  @Override public boolean isActive(){  return mFocusState != FocusState.STATE_INACTIVE;}  }
class C{  public void toggle(boolean animate){  toggle(animate,fadeIn,fadeOut);}  }
class C{  public final void failAthenTest(){}  }
class C{  public XmlDocument(){  m_domDoc=null;}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,0,isTouchEvent);}  }
class C{  public ByteSendPacket send(byte[] bytes,SendListener listener){  if (bytes == null)   throw new NullPointerException("Send bytes can't be null.");  ByteSendPacket entity=new ByteSendPacket(bytes,listener);  send(entity);  return entity;}  }
class C{  public static void tts(String method){  if (!TextUtils.equals(sMethod,method)) {    totalTime=0;    sMethod=method;  }  ttsTime=Debug.threadCpuTimeNanos();}  }
class C{  public static long epsilonCeiling(double value){  double epsilon=0.0000001;  return (long)Math.ceil(value - epsilon);}  }
class C{  public void resume(){  torrentHandle.resume();}  }
class C{  public BigDecimal addQuantity(BigDecimal addedQuantity){  if (addedQuantity == null)   return getQuantity();  m_Quantity=getQuantity();  m_Quantity=m_Quantity.add(addedQuantity);  m_Total=null;  return m_Quantity;}  }
class C{  public String extract_package(String fullname){  return fullname.replaceFirst("[.][^.]*$","");}  }
class C{  public Object childrenAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  for (  Node childNode : children) {    data=childNode.jjtAccept(visitor,data);  }  return data;}  }
class C{  private void buildLogin(){  final Label label=new Label(this.shell,SWT.NONE);  final GridData gridData=new GridData(GridData.END,GridData.END,false,false,1,1);  gridData.horizontalIndent=35;  gridData.verticalIndent=15;  label.setLayoutData(gridData);  label.setText(ResourceManager.getLabel(ResourceManager.NAME));  if (this.autorizedLogin != null && !this.autorizedLogin.isEmpty()) {    buildLoginCombo();  } else {    buildLoginText();  }}  }
class C{  private static int skipWhiteSpace(BitArray row) throws NotFoundException {  int width=row.getSize();  int endStart=row.getNextSet(0);  if (endStart == width) {    throw NotFoundException.getNotFoundInstance();  }  return endStart;}  }
class C{  public void registerAboveContentView(View v,LayoutParams params){  if (!mBroadcasting)   mViewAbove=v;}  }
class C{  public Object nextElement(){  if (i < attr.length) {    Object o=attr[i];    i+=2;    return o;  }  throw new NoSuchElementException();}  }
class C{  public void remove(int position){  getList().remove(position);  notifyItemRemoved(position);  notifyItemRangeChanged(position,getItemCount());}  }
class C{  protected boolean hostsEqual(URL u1,URL u2){  String s1=u1.getHost();  String s2=u2.getHost();  if ("localhost".equalsIgnoreCase(s1) && (s2 == null || "".equals(s2)))   return true;  if ("localhost".equalsIgnoreCase(s2) && (s1 == null || "".equals(s1)))   return true;  return super.hostsEqual(u1,u2);}  }
class C{  public Font derive(float size){  return new Font(name,style,size);}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return PERSON_PROPERTY;case 2:  return PAGE_PROPERTY;case 3:return EQUIV;case 4:return PAGE_VIEW;default :return null;}}  }
class C{  public JSONArray put(int index,double value) throws JSONException {  this.put(index,new Double(value));  return this;}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public URLConverter(final Object defaultValue){  super(defaultValue);}  }
class C{  public boolean hasHousename(){  return super.hasElement(HouseName.KEY);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:45.066 -0500",hash_original_method="CB574EAE8A001C113E60067C9D40C52E",hash_generated_method="B6378334FA72666F89F67E54A013164D") private void ensureCapacity(int n){  if (n <= 0) {    return;  }  int max;  if (data == null || data.length == 0) {    max=25;  } else   if (data.length >= n * 5) {    return;  } else {    max=data.length;  }  while (max < n * 5) {    max*=2;  }  String newData[]=new String[max];  if (length > 0) {    System.arraycopy(data,0,newData,0,length * 5);  }  data=newData;}  }
class C{  public static boolean isHighSurrogate(int c){  return (0xD800 <= c && c <= 0xDBFF);}  }
class C{  static public void assertEquals(String message,int expected,int actual){  assertEquals(message,new Integer(expected),new Integer(actual));}  }
class C{  @Override public void registerTap(Tap tap){  if (tap instanceof SymbolEventTap && !mTaps.contains(tap)) {    mTaps.add((SymbolEventTap)tap);  }}  }
class C{  public T tag(int key,Object tag){  if (view != null) {    view.setTag(key,tag);  }  return self();}  }
class C{  private void p2pConnectWithPinDisplay(WifiP2pConfig config){  boolean join=false;  WifiP2pDevice dev=fetchCurrentDeviceDetails(config);  if (mIsInvite) {    join=true;  } else {    join=dev.isGroupOwner();  }  String pin=mWifiNative.p2pConnect(config,join);  try {    Integer.parseInt(pin);    notifyInvitationSent(pin,config.deviceAddress);  } catch (  NumberFormatException ignore) {  }  mIsInvite=false;}  }
class C{  public CipherSuite cipherSuite(){  return cipherSuite;}  }
class C{  protected int findNext(int from){  if (from < -1)   return -1;  final int to=this.allHeaders.length - 1;  boolean found=false;  while (!found && (from < to)) {    from++;    found=filterHeader(from);  }  return found ? from : -1;}  }
class C{  private void printReachableMethods(){  try {    FileWriter fw=new FileWriter(Project.v().getOutputDir() + File.separator + REACHABLES_FILE_NAME);    fw.write("# All Reachable Methods in User Classes (including system methods) \n\n");    for (    MethodOrMethodContext mc : PTABridge.v().getReachableMethodContexts()) {      SootMethod method=mc.method();      if (!API.v().isSystemMethod(method) || method.getDeclaringClass().getName().startsWith("droidsafe.generated")) {        fw.write(mc + "\n");        fw.write("\tSRCS:\n");        for (        Edge src : PTABridge.v().incomingEdges(mc)) {          fw.write("\t" + src.getSrc() + "\n");        }        fw.write("\n");      }    }    fw.close();  } catch (  IOException e) {    logger.error("Error writing unreachable user methods summary files.");    droidsafe.main.Main.exit(1);  }}  }
class C{  Spring(BaseSpringSystem springSystem){  if (springSystem == null) {    throw new IllegalArgumentException("Spring cannot be created outside of a BaseSpringSystem");  }  mSpringSystem=springSystem;  mId="spring:" + ID++;  setSpringConfig(SpringConfig.defaultConfig);}  }
class C{  private List<Receipt> populateCancelledReceiptsOnly(final Map<Installment,List<Receipt>> receipts){  final List<Receipt> rcpt=new ArrayList<Receipt>();  for (  final Map.Entry<Installment,List<Receipt>> entry : receipts.entrySet())   for (  final Receipt r : entry.getValue())   if (!rcpt.contains(r) && r.getReceiptStatus().equals(RCPT_CANCEL_STATUS))   rcpt.add(r);  return receiptsInDescendingOrderOfReceiptDate(rcpt);}  }
class C{  public boolean hasValue(){  return super.hasTextValue();}  }
class C{  public static void addAttribute(SerializationHandler handler,int attr) throws TransformerException {  TransformerImpl transformer=(TransformerImpl)handler.getTransformer();  DTM dtm=transformer.getXPathContext().getDTM(attr);  if (SerializerUtils.isDefinedNSDecl(handler,attr,dtm))   return;  String ns=dtm.getNamespaceURI(attr);  if (ns == null)   ns="";  try {    handler.addAttribute(ns,dtm.getLocalName(attr),dtm.getNodeName(attr),"CDATA",dtm.getNodeValue(attr),false);  } catch (  SAXException e) {  }}  }
class C{  public CodelessProjectWizardVisualPanel2(){  initComponents();}  }
class C{  @Override public void drawScreen(int par1,int par2,float par3){  drawBackground(0);  drawCenteredString(fontRendererObj,"Press a key",width / 2,height / 4 + 48,16777215);  super.drawScreen(par1,par2,par3);}  }
class C{  public ConversationListAdapter(ConversationCallback conversationCallback,Context context){  this.conversationCallback=conversationCallback;  sortingAnimationDuration=context.getResources().getInteger(R.integer.list_sorting_duration);  translationDelay=context.getResources().getInteger(R.integer.framework_animation_delay_short);  listViewPaddingTop=context.getResources().getDimensionPixelSize(R.dimen.list_padding_top);  listViewPaddingBottom=context.getResources().getDimensionPixelSize(R.dimen.list_padding_bottom);  sharingListViewPaddingTop=context.getResources().getDimensionPixelSize(R.dimen.list_padding_top) + context.getResources().getDimensionPixelSize(R.dimen.sharing_indicator__expanded_height);}  }
class C{  private int internalGetEra(){  return isSet(ERA) ? internalGet(ERA) : eras.length - 1;}  }
class C{  public void returnValue(){  mv.visitInsn(returnType.getOpcode(Opcodes.IRETURN));}  }
class C{  private boolean safeEquals(Object a,Object b){  return (a == null && b == null) || (a != null && a.equals(b));}  }
class C{  public Vertex evaluateLESSTHAN(Vertex expression,List<Relationship> arguments,Map<Vertex,Vertex> variables,Network network,long startTime,long maxTime,int stack){  if (!checkArguments(expression,arguments,2,network)) {    return network.createVertex(Primitive.NULL);  }  Vertex left=evaluateExpression(arguments.get(0).getTarget(),variables,network,startTime,maxTime,stack);  Vertex right=evaluateExpression(arguments.get(1).getTarget(),variables,network,startTime,maxTime,stack);  if ((left.getData() instanceof Number) && (right.getData() instanceof Number)) {    if (((Number)left.getData()).doubleValue() < ((Number)right.getData()).doubleValue()) {      return network.createVertex(Primitive.TRUE);    } else {      return network.createVertex(Primitive.FALSE);    }  }  if ((left.getData() instanceof String) && (right.getData() instanceof String)) {    if (((String)left.getData()).compareTo((String)right.getData()) < 0) {      return network.createVertex(Primitive.TRUE);    } else {      return network.createVertex(Primitive.FALSE);    }  }  if ((left.getData() instanceof java.util.Date) && (right.getData() instanceof java.util.Date)) {    if (((java.util.Date)left.getData()).compareTo((java.util.Date)right.getData()) < 0) {      return network.createVertex(Primitive.TRUE);    } else {      return network.createVertex(Primitive.FALSE);    }  }  return network.createVertex(Primitive.UNKNOWN);}  }
class C{  public void addField(FormField field){  dataForm.addField(field);}  }
class C{  @Override public boolean hasNext(){  if ((maxNumber > -1) && (linesRead >= maxNumber)) {    return false;  }  if (lineRead) {    return !eof;  }  try {    eof=!readLine();    if (eof) {      inAttributes.close();      if (inLabels != null) {        inLabels.close();      }    }  } catch (  IOException e) {    throw new RuntimeException(e.getMessage(),e);  }  lineRead=true;  return (!eof);}  }
class C{  public synchronized long size(){  return size;}  }
class C{  public boolean isCellEditable(int rowIndex,int columnIndex){switch (columnIndex) {case 1:    return true;case 2:  return true;case 3:return true;}return false;}  }
class C{  public boolean provides(Class<?> type){  if (getDisabled()) {    return false;  }  return false;}  }
class C{  public HashCodeBuilder(){  iConstant=37;  iTotal=17;}  }
class C{  public static char[] fix83600(char[] signature){  if (signature == null || signature.length < 2)   return signature;  return Signature.removeCapture(signature);}  }
class C{  public void replaceSplitElement(int aIndex,Fragment aSplitElement){  splits.set(aIndex,aSplitElement);}  }
class C{  public void messageDeleted(Message m,DTNHost where,boolean dropped){}  }
class C{  public void deselect(final int[] indices){  deselect(indices,true);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 13:04:41.591 -0500",hash_original_method="FA063F91D44E7D4042E286E05194EEE9",hash_generated_method="669017D820CEDFE100C3C214E1FCE2C7") static Instance createInstance(int sequenceType,int orientationType,Gesture gesture,String label){  float[] pts;  Instance instance;  if (sequenceType == GestureStore.SEQUENCE_SENSITIVE) {    pts=temporalSampler(orientationType,gesture);    instance=new Instance(gesture.getID(),pts,label);    instance.normalize();  } else {    pts=spatialSampler(gesture);    instance=new Instance(gesture.getID(),pts,label);  }  return instance;}  }
class C{  public CopyOnWriteArrayList(){  setArray(new Object[0]);}  }
class C{  public static final float[] rgbToHSV(float r,float g,float b){  return rgbToHSV(r,g,b,new float[3]);}  }
class C{  @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:20.329 -0500",hash_original_method="743B7F44AE6EDBA9CE3D53907777320F",hash_generated_method="8F6E83335C00A917FA8553D78AA1F253") public static void parse(String xml,ContentHandler contentHandler) throws SAXException {  try {    XMLReader reader=new ExpatReader();    reader.setContentHandler(contentHandler);    reader.parse(new InputSource(new StringReader(xml)));  } catch (  IOException e) {    throw new AssertionError(e);  }}  }
class C{  public Failure reset(){  return this;}  }
class C{  public void finaliseAddObservations(){  totalObservations=0;  for (  double[] destination : vectorOfDestinationObservations) {    totalObservations+=destination.length - k;  }  destPastVectors=new double[totalObservations][k];  destNextPastVectors=new double[totalObservations][k + 1];  destPastSourceVectors=new double[totalObservations][k + 1];  destNextPastSourceVectors=new double[totalObservations][k + 2];  int startObservation=0;  Iterator<double[]> iterator=vectorOfDestinationObservations.iterator();  for (  double[] source : vectorOfSourceObservations) {    double[] destination=iterator.next();    double[][] currentDestPastVectors=makeJointVectorForPast(destination);    MatrixUtils.arrayCopy(currentDestPastVectors,0,0,destPastVectors,startObservation,0,currentDestPastVectors.length,k);    double[][] currentDestNextPastVectors=makeJointVectorForNextPast(destination);    MatrixUtils.arrayCopy(currentDestNextPastVectors,0,0,destNextPastVectors,startObservation,0,currentDestNextPastVectors.length,k + 1);    double[][] currentDestPastSourceVectors=makeJointVectorForPastSource(destination,source);    MatrixUtils.arrayCopy(currentDestPastSourceVectors,0,0,destPastSourceVectors,startObservation,0,currentDestPastSourceVectors.length,k + 1);    double[][] currentDestNextPastSourceVectors=makeJointVectorForNextPastSource(destination,source);    MatrixUtils.arrayCopy(currentDestNextPastSourceVectors,0,0,destNextPastSourceVectors,startObservation,0,currentDestNextPastSourceVectors.length,k + 2);    startObservation+=destination.length - k;  }  mvkeDestinationPast.setObservations(destPastVectors);  mvkeDestinationNextPast.setObservations(destNextPastVectors);  mvkeDestinationPastSource.setObservations(destPastSourceVectors);  mvkeDestinationNextPastSource.setObservations(destNextPastSourceVectors);  addedMoreThanOneObservationSet=vectorOfDestinationObservations.size() > 1;  if (addedMoreThanOneObservationSet && dynCorrExcl) {    throw new RuntimeException("Addition of multiple observation sets is not currently " + "supported with property DYN_CORR_EXCL set");  }  vectorOfSourceObservations=null;  vectorOfDestinationObservations=null;}  }
class C{  public static String hexHtmlify(String text){  String emojifiedStr=emojify(text);  return htmlifyHelper(emojifiedStr,true,false);}  }
class C{  public boolean isMultitenantId(){  return false;}  }
class C{  void findValue(){  if (log.isDebugEnabled()) {    log.debug("findValue invoked on " + label());  }  for (int i=0; i < _value.getItemCount(); i++) {    String choice=_value.getItemAt(i);    SettingList sl=choiceHash.get(choice);    if (sl.match()) {      if (log.isDebugEnabled()) {        log.debug("  match in " + i);      }      _value.setSelectedItem(choice);      return;    }  }  if (log.isDebugEnabled()) {    log.debug("   no match");  }}  }
class C{  private Problem instantiateProblem(ProblemProvider provider,String name){  try {    return provider.getProblem(name);  } catch (  ServiceConfigurationError e) {    System.err.println(e.getMessage());  }  return null;}  }
class C{  public SET<Key> union(SET<Key> that){  if (that == null)   throw new NullPointerException("called union() with a null argument");  SET<Key> c=new SET<Key>();  for (  Key x : this) {    c.add(x);  }  for (  Key x : that) {    c.add(x);  }  return c;}  }
class C{  protected void sequence_PropertyAssignmentAnnotationList(ISerializationContext context,PropertyAssignmentAnnotationList semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public static <T,IV>int detectIndexWith(List<T> list,Predicate2<? super T,? super IV> predicate,IV injectedValue){  int size=list.size();  for (int i=0; i < size; i++) {    if (predicate.accept(list.get(i),injectedValue)) {      return i;    }  }  return -1;}  }
class C{  @Override public String[] determineColumnConstraints(ResultProducer rp) throws Exception {  return null;}  }
class C{  public void openPopup(){  if (!isEnabled()) {    return;  }  if (settings.getDisplayToggleTimeMenuButton() == false) {    return;  }  if (!timeTextField.hasFocus()) {    timeTextField.requestFocusInWindow();  }  timeMenuPanel=new TimeMenuPanel(this,settings);  popup=new CustomPopup(timeMenuPanel,SwingUtilities.getWindowAncestor(this),this,settings.borderTimePopup);  popup.setMinimumSize(new Dimension(this.getSize().width + 1,timeMenuPanel.getSize().height));  int defaultX=timeTextField.getLocationOnScreen().x;  int defaultY=timeTextField.getLocationOnScreen().y + timeTextField.getSize().height - 1;  DatePicker.zSetPopupLocation(popup,defaultX,defaultY,this,timeTextField,-1,1);  popup.show();  timeMenuPanel.requestListFocus();}  }
class C{  protected void concatenate(GenericObjectList objList,boolean topFlag){  if (!topFlag) {    this.addAll(objList);  } else {    this.addAll(0,objList);  }}  }
class C{  boolean rectangleIsObscured(int x,int y,int width,int height){  int numChildren=getComponentCount();  for (int i=0; i < numChildren; i++) {    Component child=getComponent(i);    int cx, cy, cw, ch;    cx=child.getX();    cy=child.getY();    cw=child.getWidth();    ch=child.getHeight();    if (x >= cx && (x + width) <= (cx + cw) && y >= cy && (y + height) <= (cy + ch) && child.isVisible()) {      if (child instanceof JComponent) {        return child.isOpaque();      } else {        return false;      }    }  }  return false;}  }
class C{  protected void writeAcknowledged(StreamOutput out) throws IOException {  out.writeBoolean(acknowledged);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public VersionProperty(String fileName) throws IOException {  this(new File(fileName));}  }
class C{  @XmlElement(name="replicate_configuration") public boolean isReplicateConfiguration(){  return this.replicateConfiguration;}  }
class C{  public boolean addIfAbsent(E e){  Object[] snapshot=getArray();  return indexOf(e,snapshot,0,snapshot.length) >= 0 ? false : addIfAbsent(e,snapshot);}  }
class C{  public void writeExif(InputStream jpegStream,String exifOutFileName) throws FileNotFoundException, IOException {  if (jpegStream == null || exifOutFileName == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  OutputStream s=null;  try {    s=getExifWriterStream(exifOutFileName);    doExifStreamIO(jpegStream,s);    s.flush();  } catch (  IOException e) {    closeSilently(s);    throw e;  }  s.close();}  }
class C{  @Override public void onDestroyFloatView(View floatView){  ((ImageView)floatView).setImageDrawable(null);  mFloatBitmap.recycle();  mFloatBitmap=null;}  }
class C{  public void testMultivariateMIforRandomVariablesFromFile() throws Exception {  ArrayFileReader afr=new ArrayFileReader("demos/data/4randomCols-1.txt");  double[][] data=afr.getDouble2DMatrix();  int[] kNNs={1,2,3,4,5,6,10,15};  double[] expectedFromMILCA_2={0.03229833,-0.01146200,-0.00691358,0.00002149,-0.01056322,-0.01482730,-0.01223885,-0.01461794};  System.out.println("Kraskov comparison 3 - multivariate random data 1");  checkMIForGivenData(MatrixUtils.selectColumns(data,new int[]{0,1,2,3}),kNNs,expectedFromMILCA_2);}  }
class C{  public static boolean isJarCacheEnabledDefault(){  return _isJarCacheEnabled;}  }
class C{  private Label resolve(Parameter parameter) throws Exception {  if (parameter.isAttribute()) {    return resolve(parameter,attributes);  } else   if (parameter.isText()) {    return resolve(parameter,texts);  }  return resolve(parameter,elements);}  }
class C{  public String determineUserToDeassign(){  String idOfUserToDeassign=ui.getExternalContext().getRequestParameterMap().get(REQUEST_PARAM_USER_TO_DEASSIGN);  if (idOfUserToDeassign != null) {    VOUsageLicense voUsageLicense=model.getUsageLicenseMap().get(idOfUserToDeassign);    if (voUsageLicense != null) {      VOUserDetails voUserDetails=new VOUserDetails();      voUserDetails.setKey(voUsageLicense.getUser().getKey());      voUserDetails.setUserId(voUsageLicense.getUser().getUserId());      voUserDetails.setOrganizationId(voUsageLicense.getUser().getOrganizationId());      model.setUserToDeassign(voUserDetails);      model.setDeassignMessage(ui.getText(SUBSCRIPTION_USER_DEASSIGN_MSG_KEY,model.getUserToDeassign().getUserId()));    }  }  return null;}  }
class C{  public static boolean isValidCell(String[][] m,int[] cell){  for (int i=0; i < cell.length; i++) {    if (cell[i] < 0 || cell[i] >= 3) {      System.out.println("Invalid cell");      return false;    }  }  if (m[cell[0]][cell[1]] != "   ") {    System.out.println("\nRow " + cell[0] + " column "+ cell[1]+ " is filled");    return false;  }  return true;}  }
class C{  public static final String intern(String string){  return Atom.internString(string);}  }
class C{  public BufferedFileDataInput(File file,int size) throws FileNotFoundException, IOException, InterruptedException {  this.file=file;  this.size=size;  seek(0);}  }
class C{  Item(Context context,CharSequence label,Drawable icon){  this.label=label;  this.icon=getResizer(context).createIconThumbnail(icon);}  }
class C{  public CertificateIssuerExtension(Boolean critical,Object value) throws IOException {  this.extensionId=PKIXExtensions.CertificateIssuer_Id;  this.critical=critical.booleanValue();  this.extensionValue=(byte[])value;  DerValue val=new DerValue(this.extensionValue);  this.names=new GeneralNames(val);}  }
class C{  public S2Cap addPoint(S2Point p){  if (isEmpty()) {    return new S2Cap(p,0);  } else {    double dist2=S2Point.sub(axis,p).norm2();    double newHeight=Math.max(height,ROUND_UP * 0.5 * dist2);    return new S2Cap(axis,newHeight);  }}  }
class C{  public static TimeZone toTimeZone(String strTimeZone) throws ExpressionException {  return TimeZoneUtil.toTimeZone(strTimeZone);}  }
class C{  public static void overScrollBy(final com.handmark.pulltorefresh.library.PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final int fuzzyThreshold,final float scaleFactor,final boolean isTouchEvent){  final int deltaValue, currentScrollValue, scrollValue;switch (view.getPullToRefreshScrollDirection()) {case HORIZONTAL:    deltaValue=deltaX;  scrollValue=scrollX;currentScrollValue=view.getScrollX();break;case VERTICAL:default :deltaValue=deltaY;scrollValue=scrollY;currentScrollValue=view.getScrollY();break;}if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {final PullToRefreshBase.Mode mode=view.getMode();if (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {final int newScrollValue=(deltaValue + scrollValue);if (com.handmark.pulltorefresh.library.PullToRefreshBase.DEBUG) {Log.d(LOG_TAG,"OverScroll. DeltaX: " + deltaX + ", ScrollX: "+ scrollX+ ", DeltaY: "+ deltaY+ ", ScrollY: "+ scrollY+ ", NewY: "+ newScrollValue+ ", ScrollRange: "+ scrollRange+ ", CurrentScroll: "+ currentScrollValue);}if (newScrollValue < (0 - fuzzyThreshold)) {if (mode.showHeaderLoadingLayout()) {if (currentScrollValue == 0) {view.setState(PullToRefreshBase.State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue)));}} else if (newScrollValue > (scrollRange + fuzzyThreshold)) {if (mode.showFooterLoadingLayout()) {if (currentScrollValue == 0) {view.setState(PullToRefreshBase.State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));}} else if (Math.abs(newScrollValue) <= fuzzyThreshold || Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {view.setState(PullToRefreshBase.State.RESET);}} else if (isTouchEvent && PullToRefreshBase.State.OVERSCROLLING == view.getState()) {view.setState(PullToRefreshBase.State.RESET);}}}  }
class C{  public Graph search(){  this.logger.log("info","Starting Fast Adjacency Search.");  graph.removeEdges(graph.getEdges());  sepset=new SepsetMap();  sepset.setReturnEmptyIfNotSet(true);  int _depth=depth;  if (_depth == -1) {    _depth=1000;  }  Map<Node,Set<Node>> adjacencies=new HashMap<>();  List<Node> nodes=graph.getNodes();  for (  Node node : nodes) {    adjacencies.put(node,new TreeSet<Node>());  }  for (int d=0; d <= _depth; d++) {    boolean more;    if (d == 0) {      more=searchAtDepth0(nodes,test,adjacencies);    } else {      more=searchAtDepth(nodes,test,adjacencies,d);    }    if (!more) {      break;    }  }  for (int i=0; i < nodes.size(); i++) {    for (int j=i + 1; j < nodes.size(); j++) {      Node x=nodes.get(i);      Node y=nodes.get(j);      if (adjacencies.get(x).contains(y)) {        graph.addUndirectedEdge(x,y);      }    }  }  this.logger.log("info","Finishing Fast Adjacency Search.");  return graph;}  }
class C{  private MarkerUtil(){  super();}  }
class C{  public static void addTypeDeclaration(CompilationUnit cu,TypeDeclaration type){  List<TypeDeclaration> types=cu.getTypes();  if (types == null) {    types=new ArrayList<TypeDeclaration>();    cu.setTypes(types);  }  types.add(type);}  }
class C{  @Override public void onRefresh(boolean ignoreETag){  mRefreshListLayout.setRefreshing(false);  if (mOnRefreshListener != null) {    mOnRefreshListener.onRefresh();  }}  }
class C{  public void addPreviouslyNavalBombardmentSource(final Collection<Territory> territories){  m_bombardedFromTerritories.addAll(territories);}  }
class C{  public static long parseDateAsEpoch(String dateStr){  try {    return DateUtils.parseDate(dateStr).getTime();  } catch (  DateParseException e) {    return 0;  }}  }
class C{  public boolean updateGroupNames(GroupBackend groupBackend){  boolean dirty=false;  for (  GroupReference ref : groupList.references()) {    GroupDescription.Basic g=groupBackend.get(ref.getUUID());    if (g != null && !g.getName().equals(ref.getName())) {      dirty=true;      ref.setName(g.getName());    }  }  return dirty;}  }
class C{  public Hypercube(int dimension){  this.dimension=dimension;  this.lows=new double[dimension];  this.highs=new double[dimension];}  }
class C{  public static int readJournalFile(final SequentialFileFactory fileFactory,final JournalFile file,final JournalReaderCallback reader) throws Exception {  file.getFile().open(1,false);  ByteBuffer wholeFileBuffer=null;  try {    final int filesize=(int)file.getFile().size();    wholeFileBuffer=fileFactory.newBuffer(filesize);    final int journalFileSize=file.getFile().read(wholeFileBuffer);    if (journalFileSize != filesize) {      throw new RuntimeException("Invalid read! The system couldn't read the entire file into memory");    }    wholeFileBuffer.position(JournalImpl.SIZE_HEADER);    int lastDataPos=JournalImpl.SIZE_HEADER;    while (wholeFileBuffer.hasRemaining()) {      final int pos=wholeFileBuffer.position();      byte recordType=wholeFileBuffer.get();      if (recordType < JournalImpl.ADD_RECORD || recordType > JournalImpl.ROLLBACK_RECORD) {        continue;      }      if (JournalImpl.isInvalidSize(journalFileSize,wholeFileBuffer.position(),DataConstants.SIZE_INT)) {        reader.markAsDataFile(file);        wholeFileBuffer.position(pos + 1);        continue;      }      int readFileId=wholeFileBuffer.getInt();      if (readFileId != file.getRecordID()) {        wholeFileBuffer.position(pos + 1);        continue;      }      short compactCount=0;      if (file.getJournalVersion() >= 2) {        if (JournalImpl.isInvalidSize(journalFileSize,wholeFileBuffer.position(),DataConstants.SIZE_BYTE)) {          reader.markAsDataFile(file);          wholeFileBuffer.position(pos + 1);          continue;        }        compactCount=wholeFileBuffer.get();      }      long transactionID=0;      if (JournalImpl.isTransaction(recordType)) {        if (JournalImpl.isInvalidSize(journalFileSize,wholeFileBuffer.position(),DataConstants.SIZE_LONG)) {          wholeFileBuffer.position(pos + 1);          reader.markAsDataFile(file);          continue;        }        transactionID=wholeFileBuffer.getLong();      }      long recordID=0;      if (!JournalImpl.isCompleteTransaction(recordType)) {        if (JournalImpl.isInvalidSize(journalFileSize,wholeFileBuffer.position(),DataConstants.SIZE_LONG)) {          wholeFileBuffer.position(pos + 1);          reader.markAsDataFile(file);          continue;        }        recordID=wholeFileBuffer.getLong();      }      int variableSize=0;      int preparedTransactionExtraDataSize=0;      byte userRecordType=0;      byte[] record=null;      if (JournalImpl.isContainsBody(recordType)) {        if (JournalImpl.isInvalidSize(journalFileSize,wholeFileBuffer.position(),DataConstants.SIZE_INT)) {          wholeFileBuffer.position(pos + 1);          reader.markAsDataFile(file);          continue;        }        variableSize=wholeFileBuffer.getInt();        if (recordType != JournalImpl.DELETE_RECORD_TX) {          if (JournalImpl.isInvalidSize(journalFileSize,wholeFileBuffer.position(),1)) {            wholeFileBuffer.position(pos + 1);            continue;          }          userRecordType=wholeFileBuffer.get();        }        if (JournalImpl.isInvalidSize(journalFileSize,wholeFileBuffer.position(),variableSize)) {          wholeFileBuffer.position(pos + 1);          continue;        }        record=new byte[variableSize];        wholeFileBuffer.get(record);      }      int transactionCheckNumberOfRecords=0;      if (recordType == JournalImpl.PREPARE_RECORD || recordType == JournalImpl.COMMIT_RECORD) {        if (JournalImpl.isInvalidSize(journalFileSize,wholeFileBuffer.position(),DataConstants.SIZE_INT)) {          wholeFileBuffer.position(pos + 1);          continue;        }        transactionCheckNumberOfRecords=wholeFileBuffer.getInt();        if (recordType == JournalImpl.PREPARE_RECORD) {          if (JournalImpl.isInvalidSize(journalFileSize,wholeFileBuffer.position(),DataConstants.SIZE_INT)) {            wholeFileBuffer.position(pos + 1);            continue;          }          preparedTransactionExtraDataSize=wholeFileBuffer.getInt();        }        variableSize=0;      }      int recordSize=JournalImpl.getRecordSize(recordType,file.getJournalVersion());      if (JournalImpl.isInvalidSize(journalFileSize,pos,recordSize + variableSize + preparedTransactionExtraDataSize)) {        logger.trace("Record at position " + pos + " recordType = "+ recordType+ " file:"+ file.getFile().getFileName()+ " recordSize: "+ recordSize+ " variableSize: "+ variableSize+ " preparedTransactionExtraDataSize: "+ preparedTransactionExtraDataSize+ " is corrupted and it is being ignored (II)");        reader.markAsDataFile(file);        wholeFileBuffer.position(pos + 1);        continue;      }      int oldPos=wholeFileBuffer.position();      wholeFileBuffer.position(pos + variableSize + recordSize+ preparedTransactionExtraDataSize - DataConstants.SIZE_INT);      int checkSize=wholeFileBuffer.getInt();      if (checkSize != variableSize + recordSize + preparedTransactionExtraDataSize) {        logger.trace("Record at position " + pos + " recordType = "+ recordType+ " possible transactionID = "+ transactionID+ " possible recordID = "+ recordID+ " file:"+ file.getFile().getFileName()+ " is corrupted and it is being ignored (III)");        reader.markAsDataFile(file);        wholeFileBuffer.position(pos + DataConstants.SIZE_BYTE);        continue;      }      wholeFileBuffer.position(oldPos);switch (recordType) {case ADD_RECORD:{          reader.onReadAddRecord(new RecordInfo(recordID,userRecordType,record,false,compactCount));          break;        }case UPDATE_RECORD:{        reader.onReadUpdateRecord(new RecordInfo(recordID,userRecordType,record,true,compactCount));        break;      }case DELETE_RECORD:{      reader.onReadDeleteRecord(recordID);      break;    }case ADD_RECORD_TX:{    reader.onReadAddRecordTX(transactionID,new RecordInfo(recordID,userRecordType,record,false,compactCount));    break;  }case UPDATE_RECORD_TX:{  reader.onReadUpdateRecordTX(transactionID,new RecordInfo(recordID,userRecordType,record,true,compactCount));  break;}case DELETE_RECORD_TX:{reader.onReadDeleteRecordTX(transactionID,new RecordInfo(recordID,(byte)0,record,true,compactCount));break;}case PREPARE_RECORD:{byte[] extraData=new byte[preparedTransactionExtraDataSize];wholeFileBuffer.get(extraData);reader.onReadPrepareRecord(transactionID,extraData,transactionCheckNumberOfRecords);break;}case COMMIT_RECORD:{reader.onReadCommitRecord(transactionID,transactionCheckNumberOfRecords);break;}case ROLLBACK_RECORD:{reader.onReadRollbackRecord(transactionID);break;}default :{throw new IllegalStateException("Journal " + file.getFile().getFileName() + " is corrupt, invalid record type "+ recordType);}}checkSize=wholeFileBuffer.getInt();if (checkSize != variableSize + recordSize + preparedTransactionExtraDataSize) {throw new IllegalStateException("Internal error on loading file. Position doesn't match with checkSize, file = " + file.getFile() + ", pos = "+ pos);}lastDataPos=wholeFileBuffer.position();}return lastDataPos;} catch (Throwable e) {ActiveMQJournalLogger.LOGGER.errorReadingFile(e);throw new Exception(e.getMessage(),e);} finally {if (wholeFileBuffer != null) {fileFactory.releaseBuffer(wholeFileBuffer);}try {file.getFile().close();} catch (Throwable ignored) {}}}  }
class C{  public boolean isDefaultInstance(){  return this.sortRules.isEmpty();}  }
class C{  public static long calculateDays(Date mDate1,Date mDate2){  return Math.abs((mDate1.getTime() - mDate2.getTime()) / (24 * 60 * 60* 1000) + 1);}  }
class C{  public Map<String,String> loadInitialShardPositions(){  return shardPos;}  }
class C{  public static void switchToNextPhase(){  getPhaseClass(getPhase()).phaseToNextPhase(getNextPhaseClass(getPhase()),new LinkedList<String>());}  }
class C{  private void handleCancelMessage(){  if (!checkOpenConnection()) {    return;  }  try {    mService.cancel(mListener);    if (DBG)     Log.d(TAG,"service cancel command succeded");  } catch (  final RemoteException e) {    Log.e(TAG,"cancel() failed",e);    mListener.onError(ERROR_CLIENT);  }}  }
class C{  public CF8(){  this(10);}  }
class C{  public static void main(String[] args) throws Exception {  if (args.length == 0) {    args=new String[2];    Scanner sc=new Scanner(System.in);    System.out.print("NCOL from file:");    args[0]=sc.nextLine();    System.out.print("TLP to file:");    args[1]=sc.nextLine();    sc.close();  }  Scanner sc=new Scanner(new File(args[0]));  PrintWriter pw=new PrintWriter(new File(args[1]));  pw.println("(tlp \"2.0\"");  pw.println("(author \"George Heineman \")");  Hashtable<Integer,ArrayList<Integer>> map=new Hashtable<Integer,ArrayList<Integer>>();  int maxId=-1;  while (sc.hasNextLine()) {    int n1=sc.nextInt();    int n2=sc.nextInt();    sc.nextLine();    ArrayList<Integer> exist=map.get(n1);    if (exist == null) {      exist=new ArrayList<Integer>();      map.put(n1,exist);    }    exist.add(n2);    if (n2 > maxId) {      maxId=n2;    }    if (n1 > maxId) {      maxId=n1;    }  }  sc.close();  pw.print("(nodes ");  for (int i=0; i <= maxId; i++) {    pw.print(i + " ");  }  pw.println(")");  int edgeid=1;  for (int i=0; i <= maxId; i++) {    ArrayList<Integer> exist=map.get(i);    if (exist == null || exist.size() == 0) {      continue;    }    for (int j=0; j < exist.size(); j++) {      pw.println("(edge " + edgeid + " "+ i+ " "+ exist.get(j)+ ")");      edgeid++;    }  }  pw.println(")");  pw.flush();  pw.close();}  }
class C{  public void reloadRosterFile(){  _list.clear();  try {    _instance.readFile(defaultNceConsistRosterFilename());  } catch (  Exception e) {    log.error("Exception during ConsistRoster reading: " + e);  }}  }
class C{  public RelayLogClient(){}  }
class C{  public void writeComment(Object comment) throws IOException {  if (comment == null) {    throw new NullPointerException("Argument Error: One or more parameters are null.");  }  closeStartIfNecessary();  writer.write("<!-- ");  writer.write(comment.toString());  writer.write(" -->");}  }
class C{  public static Matrix covarianceMatrix(Vec mean,DataSet dataSet){  Matrix covariance=new DenseMatrix(mean.length(),mean.length());  covarianceMatrix(mean,dataSet,covariance);  return covariance;}  }
class C{  public int size(){  return allObjects.size();}  }
class C{  public void installUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).installUI(a);  }}  }
class C{  protected SimpleLinearRegression[][] initRegressions() throws Exception {  SimpleLinearRegression[][] classifiers=new SimpleLinearRegression[m_numClasses][m_numericDataHeader.numAttributes()];  for (int j=0; j < m_numClasses; j++) {    for (int i=0; i < m_numericDataHeader.numAttributes(); i++) {      if (i != m_numericDataHeader.classIndex()) {        classifiers[j][i]=new SimpleLinearRegression(i,0,0);      }    }  }  return classifiers;}  }
class C{  public void testUnAckedMessageAreNotConsumedOnSessionClose() throws JMSException {  connection.start();  Session session=connection.createSession(false,Session.CLIENT_ACKNOWLEDGE);  Queue queue=session.createQueue(getQueueName());  MessageProducer producer=session.createProducer(queue);  producer.send(session.createTextMessage("Hello"));  MessageConsumer consumer=session.createConsumer(queue);  Message msg=consumer.receive(1000);  assertNotNull(msg);  session.close();  session=connection.createSession(false,Session.CLIENT_ACKNOWLEDGE);  consumer=session.createConsumer(queue);  msg=consumer.receive(2000);  assertNotNull(msg);  msg.acknowledge();  session.close();}  }
class C{  public static void putAt(MutableComboBoxModel self,int index,Object i){  self.insertElementAt(i,index);}  }
class C{  public void addDescription(String description){  String desc=getDescription();  if (desc == null)   setDescription(description); else   setDescription(desc + " | " + description);}  }
class C{  public static synchronized void logMemStatus(String title){  final long usedMem=Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();  final long[] values=new long[MEM_TYPE_NAMES.length];  values[MEM_TYPE_USED_IDX]=usedMem;  values[MEM_TYPE_TOTAL_IDX]=Runtime.getRuntime().totalMemory();  values[MEM_TYPE_MAX_IDX]=Runtime.getRuntime().maxMemory();  for (int i=0; i < MEM_TYPE_NAMES.length; ++i) {    logger.info(String.format("Memory status (%s): %-6s=%12d",title,MEM_TYPE_NAMES[i],values[i]));  }  if (usedMem > maxMemory) {    maxMemory=usedMem;    maxMemTitle=title;  }}  }
class C{  public Tuple make(Map<String,Object> values){  checkNotNull(values,"values must not be null");  checkMatchingKeys(values);  Object[] valueArray=new Object[slots.length];  getIndices().forEach(null);  return make(valueArray);}  }
class C{  private char[] createTypeDisplayName(char[] typeSignature) throws IllegalArgumentException {  char[] displayName=Signature.getSimpleName(Signature.toCharArray(typeSignature));  boolean useShortGenerics=false;  if (useShortGenerics) {    StringBuffer buf=new StringBuffer();    buf.append(displayName);    int pos;    do {      pos=buf.indexOf("? extends ");      if (pos >= 0) {        buf.replace(pos,pos + 10,"+");      } else {        pos=buf.indexOf("? super ");        if (pos >= 0)         buf.replace(pos,pos + 8,"-");      }    } while (pos >= 0);    return buf.toString().toCharArray();  }  return displayName;}  }
class C{  public boolean decodeLongInteger(int startIndex){  int lengthMultiOctet=mWspData[startIndex] & 0xff;  if (lengthMultiOctet > WAP_PDU_SHORT_LENGTH_MAX) {    return false;  }  mUnsigned32bit=0;  for (int i=1; i <= lengthMultiOctet; i++) {    mUnsigned32bit=(mUnsigned32bit << 8) | (mWspData[startIndex + i] & 0xff);  }  mDataLength=1 + lengthMultiOctet;  return true;}  }
class C{  private static void checkRange(int fromIndex,int toIndex){  if (fromIndex < 0)   throw new IndexOutOfBoundsException("fromIndex < 0: " + fromIndex);  if (toIndex < 0)   throw new IndexOutOfBoundsException("toIndex < 0: " + toIndex);  if (fromIndex > toIndex)   throw new IndexOutOfBoundsException("fromIndex: " + fromIndex + " > toIndex: "+ toIndex);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:51.464 -0500",hash_original_method="266DCFFE6CD24F344E992D02CFAE713D",hash_generated_method="772844F881FE1E9374A34ADF6AA14620") public static AccessibilityEvent obtain(AccessibilityEvent event){  AccessibilityEvent eventClone=AccessibilityEvent.obtain();  eventClone.init(event);  final int recordCount=event.mRecords.size();  for (int i=0; i < recordCount; i++) {    AccessibilityRecord record=event.mRecords.get(i);    AccessibilityRecord recordClone=AccessibilityRecord.obtain(record);    eventClone.mRecords.add(recordClone);  }  return eventClone;}  }
class C{  public static void main(String... a) throws Exception {  TestConcurrentLinkedList test=(TestConcurrentLinkedList)TestBase.createCaller().init();  test.test();  test.testPerformance();}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.POSTFIX_EXPRESSION;}  }
class C{  public void addTimeStamp(TemporalRecord timeStamp){  timeStamps.add(timeStamp);  setNeedToRegenerate(true);}  }
class C{  public static void assumeTrue(BooleanSupplier assumptionSupplier,Supplier<String> messageSupplier) throws TestAbortedException {  if (!assumptionSupplier.getAsBoolean()) {    throwTestAbortedException(messageSupplier.get());  }}  }
class C{  void iconst(final int cst){  if (cst >= -1 && cst <= 5) {    mv.visitInsn(Opcodes.ICONST_0 + cst);  } else   if (cst >= Byte.MIN_VALUE && cst <= Byte.MAX_VALUE) {    mv.visitIntInsn(Opcodes.BIPUSH,cst);  } else   if (cst >= Short.MIN_VALUE && cst <= Short.MAX_VALUE) {    mv.visitIntInsn(Opcodes.SIPUSH,cst);  } else {    mv.visitLdcInsn(cst);  }}  }
class C{  public static String processStatement(String sqlStatement,boolean allowDML){  return VSQLProcess.processStatement(sqlStatement,allowDML);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:04.051 -0500",hash_original_method="411C0D5D8AD5CB18D4C2CE04A3CEEBF0",hash_generated_method="E105F6342371FC7A4CC18F36D0625481") private void validateFormat(char format){  int index=PATTERN_CHARS.indexOf(format);  if (index == -1) {    throw new IllegalArgumentException("Unknown pattern character '" + format + "'");  }}  }
class C{  public void testDrawRep() throws ChessParseError {  Game game=new Game(null,new TimeControlData());  assertEquals(false,game.haveDrawOffer());  game.processString("Nc3");  game.processString("Nc6");  game.processString("Nb1");  game.processString("Nb8");  game.processString("Nf3");  game.processString("Nf6");  game.processString("Ng1");  assertEquals(false,game.haveDrawOffer());  game.processString("draw rep");  assertEquals(Game.GameState.ALIVE,game.getGameState());  game.processString("draw rep Nc6");  assertEquals(Game.GameState.ALIVE,game.getGameState());  assertEquals(Piece.BKNIGHT,game.currPos().getPiece(Position.getSquare(2,5)));  assertEquals(true,game.haveDrawOffer());  game.undoMove();  assertEquals(false,game.haveDrawOffer());  assertEquals(Piece.EMPTY,game.currPos().getPiece(Position.getSquare(2,5)));  game.processString("draw rep Ng8");  assertEquals(Game.GameState.DRAW_REP,game.getGameState());  assertEquals(Piece.EMPTY,game.currPos().getPiece(Position.getSquare(6,7)));  game.newGame();  game.processString("e4");  game.processString("Nf6");  game.processString("Nf3");  game.processString("Ng8");  game.processString("Ng1");  game.processString("Nf6");  game.processString("Nf3");  game.processString("Ng8");  game.processString("draw rep Ng1");  assertEquals(Game.GameState.DRAW_REP,game.getGameState());  game.newGame();  game.processString("Nf3");  game.processString("d5");  game.processString("Ng1");  game.processString("d4");  game.processString("e4");  game.processString("Nf6");  game.processString("Nf3");  game.processString("Ng8");  game.processString("Ng1");  game.processString("Nf6");  game.processString("Nf3");  game.processString("Ng8");  game.processString("draw rep Ng1");  assertEquals(Game.GameState.ALIVE,game.getGameState());  game.setPos(TextIO.readFEN("4k2n/8/8/8/4p3/8/3P4/3KR2N w - - 0 1"));  game.processString("d4");  game.processString("Ng6");  game.processString("Ng3");  game.processString("Nh8");  game.processString("Nh1");  game.processString("Ng6");  game.processString("Ng3");  game.processString("Nh8");  game.processString("draw rep Nh1");  assertEquals(Game.GameState.DRAW_REP,game.getGameState());}  }
class C{  public static Class<?> loadClass(String className) throws ClassNotFoundException {  MBEANSERVER_LOGGER.logp(Level.FINEST,DefaultLoaderRepository.class.getName(),"loadClass",className);  return load(null,className);}  }
class C{  public boolean isBatch(){  return m_batch;}  }
class C{  public void enableMotor(boolean flag){  joint.enableMotor(flag);}  }
class C{  private Object readResolve(){  return Months.months(getValue());}  }
class C{  public static byte readAvailableByte(Object o){  return Magic.getByteAtOffset(o,AVAILABLE_BITS_OFFSET);}  }
class C{  public void query(){  log.info("");  GridTab tab=getTab(0);  tab.query(false,0,0);  if (tab.getRowCount() > 0)   tab.navigate(0);}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  public boolean sameBoard(TicTacToeBoard board2){  for (int i=0; i < filters.length; i++) {    boolean isSame=true;    for (int k=0; k < 9; k++) {      if (get(filters[0][k].col,filters[0][k].row) != board2.get(filters[i][k].col,filters[i][k].row)) {        isSame=false;        break;      }    }    if (isSame) {      return true;    }  }  return false;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.TYPED_ELEMENT__DECLARED_TYPE_REF:    return basicSetDeclaredTypeRef(null,msgs);case N4JSPackage.TYPED_ELEMENT__BOGUS_TYPE_REF:  return basicSetBogusTypeRef(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static int removeArgsAndReturnInsertionIndex(List<String> args,int argIndex,boolean tryRemovingArgValue){  if (argIndex < 0 || argIndex >= args.size()) {    return 0;  }  if (tryRemovingArgValue) {    String argValue=getArgValue(args,argIndex + 1);    if (argValue != null) {      args.remove(argIndex + 1);    }  }  args.remove(argIndex);  return argIndex;}  }
class C{  @Override public ISBNParsedResult parse(Result result){  BarcodeFormat format=result.getBarcodeFormat();  if (format != BarcodeFormat.EAN_13) {    return null;  }  String rawText=getMassagedText(result);  int length=rawText.length();  if (length != 13) {    return null;  }  if (!rawText.startsWith("978") && !rawText.startsWith("979")) {    return null;  }  return new ISBNParsedResult(rawText);}  }
class C{  public ArrayHandler(RowProcessor convert){  super();  this.convert=convert;}  }
class C{  public void layoutContainer(Container parent){synchronized (parent.getTreeLock()) {    Insets insets=parent.getInsets();    int ncomponents=parent.getComponentCount();    Component comp=null;    boolean currentFound=false;    for (int i=0; i < ncomponents; i++) {      comp=parent.getComponent(i);      comp.setBounds(hgap + insets.left,vgap + insets.top,parent.width - (hgap * 2 + insets.left + insets.right),parent.height - (vgap * 2 + insets.top + insets.bottom));      if (comp.isVisible()) {        currentFound=true;      }    }    if (!currentFound && ncomponents > 0) {      parent.getComponent(0).setVisible(true);    }  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public Operable openUrl(Uri uri,Activity activity){  Context context=activity.getApplicationContext();  if (packageNameToUse != null) {    if (style == null)     style=new Style(context);    CustomTabsIntent.Builder builder=new CustomTabsIntent.Builder(mCustomTabsSession);    if (style.toolbarColor != 0) {      builder.setToolbarColor(style.toolbarColor);    }    builder.setShowTitle(style.showTitle);    if (style.startEnterAnimation != 0 && style.startCloseAnimation != 0) {      builder.setStartAnimations(context,style.startEnterAnimation,style.startCloseAnimation);    }    if (style.exitEnterAnimation != 0 && style.exitCloseAnimation != 0) {      builder.setExitAnimations(context,style.exitEnterAnimation,style.exitCloseAnimation);    }    if (style.closeButton != null) {      builder.setCloseButtonIcon(style.closeButton);    }    if (style.actionButton != null) {      builder.setActionButton(style.actionButton.icon,style.actionButton.description,style.actionButton.pendingIntent,style.actionButton.tint);    }    if (style.menuItemArrayList != null) {      for (      Style.MenuItem item : style.menuItemArrayList) {        builder.addMenuItem(item.description,item.pendingIntent);      }    }    builder.build().launchUrl(activity,uri);  } else {    Intent intent;    if (fallbackClass != null) {      intent=new Intent(activity,fallbackClass);    } else {      intent=new Intent(Intent.ACTION_VIEW);    }    ActivityCompat.startActivity(activity,intent.setData(uri).setFlags(Intent.FLAG_ACTIVITY_NEW_TASK),ActivityOptionsCompat.makeCustomAnimation(activity.getApplicationContext(),style.startEnterAnimation,style.startCloseAnimation).toBundle());  }  return this;}  }
class C{  public Scroll scroll(){  return scroll;}  }
class C{  protected void cookieReceived(Cookie c){}  }
class C{  public boolean isApplicable(MemberDefinition m,Type args[]) throws ClassNotFound {  Type mType=m.getType();  if (!mType.isType(TC_METHOD))   return false;  Type mArgs[]=mType.getArgumentTypes();  if (args.length != mArgs.length)   return false;  for (int i=args.length; --i >= 0; )   if (!isMoreSpecific(args[i],mArgs[i]))   return false;  return true;}  }
class C{  public void unscheduleSimulation(final SimulationAgent sim){  runner.remove(sim);}  }
class C{  public static byte[] uuidToBytes(@Nullable UUID uuid){  return GridClientByteUtils.uuidToBytes(uuid);}  }
class C{  public void discoverButtonActionPerformed(){  if (xtc.getXBee().getNetwork().isDiscoveryRunning()) {    log.debug("Discovery process already running");    discoverButton.setEnabled(false);    statusText1.setText(Bundle.getMessage("FeedBackDiscover"));    return;  }  jmri.jmrix.ieee802154.IEEE802154SystemConnectionMemo memo=xtc.getAdapterMemo();  if (memo instanceof XBeeConnectionMemo) {    XBeeConnectionMemo m=(XBeeConnectionMemo)memo;    m.getXBeeNodeManager().startNodeDiscovery();    discoverButton.setEnabled(false);  }  statusText1.setText(Bundle.getMessage("FeedBackDiscover"));  errorInStatus1=true;  resetNotes2();}  }
class C{  @Override public boolean truncate(String fileName,long validDataEndOffset){  DataOutputStream dataOutputStream=null;  DataInputStream dataInputStream=null;  boolean fileTruncatedSuccessfully=false;  int bufferSize=validDataEndOffset > CarbonCommonConstants.BYTE_TO_KB_CONVERSION_FACTOR ? CarbonCommonConstants.BYTE_TO_KB_CONVERSION_FACTOR : (int)validDataEndOffset;  String tempWriteFilePath=fileName + CarbonCommonConstants.TEMPWRITEFILEEXTENSION;  FileFactory.FileType fileType=FileFactory.getFileType(fileName);  try {    CarbonFile tempFile=null;    if (FileFactory.isFileExist(tempWriteFilePath,fileType)) {      tempFile=FileFactory.getCarbonFile(tempWriteFilePath,fileType);      tempFile.delete();    }    FileFactory.createNewFile(tempWriteFilePath,fileType);    tempFile=FileFactory.getCarbonFile(tempWriteFilePath,fileType);    byte[] buff=new byte[bufferSize];    dataInputStream=FileFactory.getDataInputStream(fileName,fileType);    int read=dataInputStream.read(buff,0,buff.length);    dataOutputStream=FileFactory.getDataOutputStream(tempWriteFilePath,fileType);    dataOutputStream.write(buff,0,read);    long remaining=validDataEndOffset - read;    while (remaining > 0) {      if (remaining > bufferSize) {        buff=new byte[bufferSize];      } else {        buff=new byte[(int)remaining];      }      read=dataInputStream.read(buff,0,buff.length);      dataOutputStream.write(buff,0,read);      remaining=remaining - read;    }    CarbonUtil.closeStreams(dataInputStream,dataOutputStream);    tempFile.renameForce(fileName);    fileTruncatedSuccessfully=true;  } catch (  IOException e) {    LOGGER.error("Exception occured while truncating the file " + e.getMessage());  } finally {    CarbonUtil.closeStreams(dataOutputStream,dataInputStream);  }  return fileTruncatedSuccessfully;}  }
class C{  public void processIPPortMetrics(Long kbytes,Long iops,StoragePort port,Long sampleTime){  StringMap dbMetrics=port.getMetrics();  _log.info(String.format("IP PortMetrics %s %s kbytes %d iops %d sampleTime %d",port.getNativeGuid(),portName(port),kbytes,iops,sampleTime));  StorageSystem system=_dbClient.queryObject(StorageSystem.class,port.getStorageDevice());  Long iopsValue=MetricsKeys.getLong(MetricsKeys.iopsValue,dbMetrics);  Long kbytesValue=MetricsKeys.getLong(MetricsKeys.kbytesValue,dbMetrics);  Long lastSampleTimeValue=MetricsKeys.getLong(MetricsKeys.lastSampleTime,dbMetrics);  Long kbytesDelta=kbytes - kbytesValue;  if (kbytesDelta < 0) {    _log.info("Kbytes rolled over - delta is negative: " + kbytesDelta);  }  Long iopsDelta=iops - iopsValue;  Long portSpeed=port.getPortSpeed();  if (portSpeed == 0) {    _log.info("Port speed is zero- assuming 1 GBit: " + port.getNativeGuid());    portSpeed=1L;  }  Long maxKBytesPerSecond=portSpeed * KBYTES_PER_GBIT;  Long secondsDelta=(sampleTime - lastSampleTimeValue) / MSEC_PER_SEC;  if (secondsDelta < 0) {    secondsDelta=-secondsDelta;  }  if (kbytesDelta >= 0 && secondsDelta > 0 && secondsDelta < SECONDS_PER_YEAR) {    computePercentBusyAverages(kbytesDelta / secondsDelta,maxKBytesPerSecond,iopsDelta,dbMetrics,port.getNativeGuid(),portName(port),sampleTime,system);    List<StoragePort> portList=new ArrayList<StoragePort>();    portList.add(port);    updateStaticPortUsage(portList);    Double portMetric=computePortMetric(port);    MetricsKeys.putDouble(MetricsKeys.portMetric,portMetric,dbMetrics);    MetricsKeys.putLong(MetricsKeys.lastProcessingTime,System.currentTimeMillis(),dbMetrics);  }  MetricsKeys.putLong(MetricsKeys.kbytesValue,kbytes,dbMetrics);  MetricsKeys.putLong(MetricsKeys.iopsValue,iops,dbMetrics);  MetricsKeys.putLong(MetricsKeys.lastSampleTime,sampleTime,dbMetrics);  port.setMetrics(dbMetrics);  _dbClient.persistObject(port);}  }
class C{  public boolean isInsert(){  return oneRowChange.getAction() == RowChangeData.ActionType.INSERT;}  }
class C{  public boolean hasDied(){  if (!LifeStages.CREATED.equals(myState))   return false;  if (mySupportsPing.isNull()) {    mySupportsPing.set(SshConnectionUtils.connectionSupportsPing(myConnection));  }  if (Boolean.FALSE.equals(mySupportsPing.get()))   return false;  final long prevLastTs=myLastTs;  myLastTs=System.currentTimeMillis();  if ((prevLastTs > 0) && ((myLastTs - prevLastTs) < myCheckGranularity))   return false;  try {    SshLogger.debug("will ping");    myConnection.ping();  } catch (  IOException e) {    SshLogger.debug("ping failed",e);    return true;  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 14:54:53.572 -0400",hash_original_method="36CDB225443323903BF114046866E066",hash_generated_method="BB33C83B47BD29FADF0DC592C2DABCF7") public DrmRights(String rightsFilePath,String mimeType,String accountId,String subscriptionId){  this(rightsFilePath,mimeType);  if (null != accountId && !accountId.equals("")) {    mAccountId=accountId;  }  if (null != subscriptionId && !subscriptionId.equals("")) {    mSubscriptionId=subscriptionId;  }}  }
class C{  private void generateBankTransfer(){  MCash cash=createCash();  MCashLine cashLines[]=createCashLines(cash);  StringBuffer processMsg=new StringBuffer(cash.getDocumentNo());  cash.setDocAction(p_docAction);  if (!cash.processIt(p_docAction)) {    processMsg.append(" (NOT Processed)");    log.warning("Cash Processing failed: " + cash + " - "+ cash.getProcessMsg());    addLog(cash.getC_Cash_ID(),cash.getStatementDate(),null,"Cash Processing failed: " + cash + " - "+ cash.getProcessMsg()+ " / please complete it manually");  }  if (!cash.save()) {    throw new IllegalStateException("Could not create Cash");  }  addLog(cash.getC_Cash_ID(),cash.getStatementDate(),null,processMsg.toString());  m_created++;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public boolean hasValue(){  return mValue != null;}  }
class C{  public PageRanges(int member){  super(member);  if (member < 1) {    throw new IllegalArgumentException("Page value < 1 specified");  }}  }
class C{  public boolean wasCancelled(){  return m_wasCancelled;}  }
class C{  private int addUnaryNodes(Grammar[] grammars,int i,int j){  Cell chartBin=this.cells.get(i,j);  if (null == chartBin) {    return 0;  }  int qtyAdditionsToQueue=0;  ArrayList<HGNode> queue=new ArrayList<>(chartBin.getSortedNodes());  HashSet<Integer> seen_lhs=new HashSet<>();  if (LOG.isDebugEnabled())   LOG.debug("Adding unary to [{}, {}]",i,j);  while (queue.size() > 0) {    HGNode node=queue.remove(0);    seen_lhs.add(node.lhs);    for (    Grammar gr : grammars) {      if (!gr.hasRuleForSpan(i,j,inputLattice.distance(i,j)))       continue;      Trie childNode=gr.getTrieRoot().match(node.lhs);      if (childNode != null && childNode.getRuleCollection() != null && childNode.getRuleCollection().getArity() == 1) {        ArrayList<HGNode> antecedents=new ArrayList<>();        antecedents.add(node);        List<Rule> rules=childNode.getRuleCollection().getSortedRules(this.featureFunctions);        for (        Rule rule : rules) {          ComputeNodeResult states=new ComputeNodeResult(this.featureFunctions,rule,antecedents,i,j,new SourcePath(),this.sentence);          HGNode resNode=chartBin.addHyperEdgeInCell(states,rule,i,j,antecedents,new SourcePath(),true);          if (LOG.isDebugEnabled())           LOG.debug("{}",rule);          if (null != resNode && !seen_lhs.contains(resNode.lhs)) {            queue.add(resNode);            qtyAdditionsToQueue++;          }        }      }    }  }  return qtyAdditionsToQueue;}  }
class C{  private void reconnectZKToActiveSite(){  LocalRepository localRepository=LocalRepository.getInstance();  try {    boolean allEntered=switchToZkObserverBarrier.enter(DR_SWITCH_BARRIER_TIMEOUT,TimeUnit.SECONDS);    if (allEntered) {      try {        localRepository.reconfigCoordinator("observer");      }  finally {        leaveZKDoubleBarrier(switchToZkObserverBarrier,DR_SWITCH_TO_ZK_OBSERVER_BARRIER);      }      localRepository.restartCoordinator("observer");    } else {      log.warn("All nodes unable to enter barrier {}. Try again later",DR_SWITCH_TO_ZK_OBSERVER_BARRIER);    }  } catch (  Exception ex) {    log.warn("Unexpected errors during switching back to zk observer. Try again later. {}",ex);  }}  }
class C{  public void testFlowCapChangeAbsolute(){  for (  LinkFactory lf : linkFactories(15 * 60,30 * 3600)) {    final Network network=NetworkUtils.createNetwork();    NetworkFactory nf=network.getFactory();    nf.setLinkFactory(lf);    ((NetworkImpl)network).setFactory(nf);    network.setCapacityPeriod(3600.0);    Node node1=NetworkUtils.createAndAddNode(network,Id.create("1",Node.class),new Coord((double)0,(double)0));    Node node2=NetworkUtils.createAndAddNode(network,Id.create("2",Node.class),new Coord((double)100,(double)0));    final Node fromNode=node1;    final Node toNode=node2;    TimeVariantLinkImpl link=(TimeVariantLinkImpl)NetworkUtils.createAndAddLink(network,Id.create("1",Link.class),fromNode,toNode,(double)100,(double)10,(double)3600,(double)1);    assertEquals(3600.0,link.getCapacity(org.matsim.core.utils.misc.Time.UNDEFINED_TIME),EPSILON);    assertEquals(1.0,link.getFlowCapacityPerSec(org.matsim.core.utils.misc.Time.UNDEFINED_TIME),EPSILON);    NetworkChangeEvent change=new NetworkChangeEvent(7 * 3600.0);    change.addLink(link);    change.setFlowCapacityChange(new ChangeValue(ChangeType.ABSOLUTE_IN_SI_UNITS,2));    link.applyEvent(change);    assertEquals(3600.0,link.getCapacity(org.matsim.core.utils.misc.Time.UNDEFINED_TIME),EPSILON);    assertEquals(1.0,link.getFlowCapacityPerSec(org.matsim.core.utils.misc.Time.UNDEFINED_TIME),EPSILON);    assertEquals(2.0,link.getFlowCapacityPerSec(7 * 3600),EPSILON);  }}  }
class C{  public String sqlAction_preserveParentLinks(String vendorName,String catalogName,String schemaName,String brokenTableName,String brokenColumnName,String brokenDefaultValue,ArrayList<String> brokenCompareColumns,String hintTableName,String hintColumnName,ArrayList<String> hintCompareColumns){  ArrayList<String> hintColumnNames=new ArrayList<String>();  hintColumnNames.add(hintColumnName);  ArrayList<String> selectConditions=new ArrayList<String>();  for (int i=0; i < brokenCompareColumns.size(); i++) {    String brokenCompareColumn=brokenCompareColumns.get(i);    String hintCompareColumn=hintCompareColumns.get(i);    selectConditions.add(new StringBuffer("t1.").append(hintCompareColumn).append(" = t.").append(brokenCompareColumn).toString());  }  if (brokenTableName.equalsIgnoreCase(hintTableName))   selectConditions.add(new StringBuffer("t1.").append(brokenColumnName).append(" != ").append(brokenDefaultValue).toString());  String sqlSelect=sql_select(vendorName,catalogName,schemaName,hintTableName,"t1",hintColumnNames,null,selectConditions,null,false);  sqlSelect=sqlSelect.replaceFirst(hintColumnName,new StringBuffer("MIN(t1.").append(hintColumnName).append(")").toString());  ArrayList<String> brokenColumnNames=new ArrayList<String>();  brokenColumnNames.add(brokenColumnName);  ArrayList<String> fixColumnValues=new ArrayList<String>();  fixColumnValues.add(new StringBuffer("(").append(sqlSelect).append(")").toString());  ArrayList<String> updateConditions=new ArrayList<String>();  updateConditions.add(new StringBuffer("t.").append(brokenColumnName).append(" = ").append(brokenDefaultValue).toString());  String sqlUpdate=sql_update(vendorName,catalogName,schemaName,brokenTableName,"t",brokenColumnNames,fixColumnValues,updateConditions);  return sqlUpdate;}  }
class C{  public boolean isRefundable(String sku){  return false;}  }
class C{  static public long longFactorial(int k) throws IllegalArgumentException {  if (k < 0)   throw new IllegalArgumentException("Negative k");  if (k < longFactorials.length)   return longFactorials[k];  throw new IllegalArgumentException("Overflow");}  }
class C{  public void jump(){  mCanceled=true;  endSoftwareAnimations();  mCanceled=false;}  }
class C{  public static void main(String[] args) throws InterruptedException {  Configuration config=ConfigurationManager.getConfiguration("/Users/Sayi/Documents/config/config-definition-dpi.xml");  System.out.println("elastic.search.cluster =" + config.getString("elastic.search.cluster"));  Thread.sleep(10000);  System.out.println("storm.topology.dpi.bolt.es-index.index.name =" + config.getString("storm.topology.dpi.bolt.es-index.index.name"));}  }
class C{  public boolean empty(){  return size() == 0;}  }
class C{  public void removeUtility(Assignment input){  if (distrib instanceof UtilityTable) {    ((UtilityTable)distrib).removeUtil(input);  } else {    log.warning("utility distribution is not a table, cannot remove value");  }}  }
class C{  public MultiplePathsFromGCRootsRecord[] nextLevel(){  int new_level=level + 1;  HashMapIntObject<MultiplePathsFromGCRootsRecord> nextLevelRecords=new HashMapIntObject<MultiplePathsFromGCRootsRecord>();  for (  int[] path : paths) {    if (path != null && (path.length - new_level - 1 >= 0)) {      MultiplePathsFromGCRootsRecord record=nextLevelRecords.get(path[path.length - new_level - 1]);      if (record == null) {        record=new MultiplePathsFromGCRootsRecord(path[path.length - new_level - 1],new_level,snapshot);        nextLevelRecords.put(path[path.length - new_level - 1],record);      }      record.addPath(path);    }  }  return nextLevelRecords.getAllValues(new MultiplePathsFromGCRootsRecord[0]);}  }
class C{  private void createCache(Properties props){  getSystem(props);  final Cache cache=getCache();}  }
class C{  private boolean rebuildItems(){  boolean updated=false;  ItemsRange range=getItemsRange();  if (itemsLayout != null) {    int first=recycle.recycleItems(itemsLayout,firstItem,range);    updated=firstItem != first;    firstItem=first;  } else {    createItemsLayout();    updated=true;  }  if (!updated) {    updated=firstItem != range.getFirst() || itemsLayout.getChildCount() != range.getCount();  }  if (firstItem > range.getFirst() && firstItem <= range.getLast()) {    for (int i=firstItem - 1; i >= range.getFirst(); i--) {      if (!addViewItem(i,true)) {        break;      }      firstItem=i;    }  } else {    firstItem=range.getFirst();  }  int first=firstItem;  for (int i=itemsLayout.getChildCount(); i < range.getCount(); i++) {    if (!addViewItem(firstItem + i,false) && itemsLayout.getChildCount() == 0) {      first++;    }  }  firstItem=first;  highLightSelectItem();  return updated;}  }
class C{  public SymGraph(Motif motif){  this.motif=motif;  colorsToRecheck=new HashSet<Integer>();  topMotifnodeToColor=new int[motif.getNrMotifNodes()];  colorToBottomMotifnode=new HashMap<Integer,List<Integer>>();  colorToTopMotifnode=new HashMap<Integer,List<Integer>>();  ArrayList<Integer> list1=new ArrayList<Integer>();  ArrayList<Integer> list2=new ArrayList<Integer>();  for (int i=0; i < topMotifnodeToColor.length; i++) {    list1.add(i);    list2.add(i);  }  colorToBottomMotifnode.put(0,list2);  colorToTopMotifnode.put(0,list1);}  }
class C{  public CircularIntegerBuffer(int size){  buffer=new int[size];  clear();}  }
class C{  public static Image createImage(InputStream stream) throws IOException {  try {    return new Image(Display.impl.createImage(stream));  } catch (  OutOfMemoryError err) {    System.gc();    System.gc();    return new Image(Display.impl.createImage(stream));  }}  }
class C{  public void execute(Runnable r){  executorService.execute(r);}  }
class C{  public void closeSocket(Socket socket){  if (socket == null) {    return;  }  try {    socket.getInputStream().close();  } catch (  IOException e) {  }  try {    socket.getOutputStream().close();  } catch (  IOException e) {  }  try {    socket.close();  } catch (  IOException e) {  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @Override public T persist(final T entity){  return persistenceService.persist(entity);}  }
class C{  public long optLong(int index,long defaultValue){  try {    return this.getLong(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  private AFTPClient actionGetCurrentURL() throws PageException, IOException {  AFTPClient client=getClient();  String pwd=client.printWorkingDirectory();  Struct cfftp=writeCfftp(client);  cfftp.setEL("returnValue",client.getPrefix() + "://" + client.getRemoteAddress().getHostName()+ pwd);  return client;}  }
class C{  public String toString(){  return " at " + this.index + " [character "+ this.character+ " line "+ this.line+ "]";}  }
class C{  @SuppressWarnings(WARNING_RESTRICTION) private void removeExtraneousActions(){  ActionSetRegistry reg=WorkbenchPlugin.getDefault().getActionSetRegistry();  removeStandardAction(reg,"org.eclipse.ui.edit.text.actionSet.navigation");  removeStandardAction(reg,"org.eclipse.ui.NavigateActionSet");  removeStandardAction(reg,"org.eclipse.ui.edit.text.actionSet.openExternalFile");  removeStandardAction(reg,"org.eclipse.ui.actionSet.openFiles");  removeStandardAction(reg,"org.eclipse.ui.edit.text.actionSet.annotationNavigation");  removeStandardAction(reg,"org.eclipse.ui.edit.text.actionSet.convertLineDelimitersTo");  removeStandardAction(reg,"org.eclipse.ui.WorkingSetActionSet");}  }
class C{  public boolean isReachable(){  return reachable;}  }
class C{  protected Character isWFXMLChar(String chardata){  Character refInvalidChar;  if (chardata == null || (chardata.length() == 0)) {    return null;  }  char[] dataarray=chardata.toCharArray();  int datalength=dataarray.length;  if (fIsXMLVersion11) {    int i=0;    while (i < datalength) {      if (XML11Char.isXML11Invalid(dataarray[i++])) {        char ch=dataarray[i - 1];        if (XMLChar.isHighSurrogate(ch) && i < datalength) {          char ch2=dataarray[i++];          if (XMLChar.isLowSurrogate(ch2) && XMLChar.isSupplemental(XMLChar.supplemental(ch,ch2))) {            continue;          }        }        refInvalidChar=new Character(ch);        return refInvalidChar;      }    }  } else {    int i=0;    while (i < datalength) {      if (XMLChar.isInvalid(dataarray[i++])) {        char ch=dataarray[i - 1];        if (XMLChar.isHighSurrogate(ch) && i < datalength) {          char ch2=dataarray[i++];          if (XMLChar.isLowSurrogate(ch2) && XMLChar.isSupplemental(XMLChar.supplemental(ch,ch2))) {            continue;          }        }        refInvalidChar=new Character(ch);        return refInvalidChar;      }    }  }  return null;}  }
class C{  public static DeserializeResult<DoubleSummaryFactory> fromMemory(final Memory mem){  return new DeserializeResult<DoubleSummaryFactory>(new DoubleSummaryFactory(Mode.values()[mem.getByte(MODE_BYTE)]),SERIALIZED_SIZE_BYTES);}  }
class C{  public synchronized void add(EventListener listener){  Class<?> listenerClass=getListenerClass();  if (!listenerClass.isInstance(listener)) {    throw new ClassCastException("listener " + listener + " is not "+ "an instance of listener class "+ listenerClass);  }  EventListener[] tmp=(EventListener[])Array.newInstance(listenerClass,listenerList.length + 1);  System.arraycopy(listenerList,0,tmp,0,listenerList.length);  tmp[listenerList.length]=listener;  listenerList=tmp;}  }
class C{  public void addAll(double... values){  for (  double value : values) {    add(value);  }}  }
class C{  private void insertAfter(HalfEdge e){  Assert.equals(orig,e.orig());  HalfEdge save=oNext();  sym.setNext(e);  e.sym().setNext(save);}  }
class C{  public void focusOnViewportCenter(){  if (this.isAnimating())   return;  if (this.dc == null) {    String message=Logging.getMessage("nullValue.DrawContextIsNull");    Logging.logger().severe(message);    throw new IllegalStateException(message);  }  if (this.globe == null) {    String message=Logging.getMessage("nullValue.DrawingContextGlobeIsNull");    Logging.logger().severe(message);    throw new IllegalStateException(message);  }  Position viewportCenterPos=this.dc.getViewportCenterPosition();  if (viewportCenterPos == null) {    String message=Logging.getMessage("nullValue.DrawingContextViewportCenterIsNull");    Logging.logger().severe(message);    throw new IllegalStateException(message);  }  Vec4 viewportCenterPoint=this.globe.computePointFromPosition(viewportCenterPos.getLatitude(),viewportCenterPos.getLongitude(),this.globe.getElevation(viewportCenterPos.getLatitude(),viewportCenterPos.getLongitude()) * dc.getVerticalExaggeration());  if (viewportCenterPoint != null) {    Matrix modelview=OrbitViewInputSupport.computeTransformMatrix(this.globe,this.center,this.heading,this.pitch,this.roll,this.zoom);    if (modelview != null) {      Matrix modelviewInv=modelview.getInverse();      if (modelviewInv != null) {        Vec4 eyePoint=Vec4.UNIT_W.transformBy4(modelviewInv);        Vec4 forward=Vec4.UNIT_NEGATIVE_Z.transformBy4(modelviewInv);        double distance=eyePoint.distanceTo3(viewportCenterPoint);        Vec4 newCenterPoint=Vec4.fromLine3(eyePoint,distance,forward);        OrbitViewInputSupport.OrbitViewState modelCoords=OrbitViewInputSupport.computeOrbitViewState(this.globe,modelview,newCenterPoint);        if (validateModelCoordinates(modelCoords)) {          setModelCoordinates(modelCoords);        }      }    }  }}  }
class C{  @NotNull public static SqlArray varchars(@NotNull Collection<String> values){  return of("varchar",values);}  }
class C{  default boolean isAutoIncrement(){  return getAsBoolean(AUTO_INCREMENT).orElse(false);}  }
class C{  public Vec solve(Vec b){  Vec y=forwardSub(L,b);  Vec x=backSub(L,y);  return x;}  }
class C{  public FuzzyCondition prefixLength(Integer prefixLength){  this.prefixLength=prefixLength;  return this;}  }
class C{  private boolean initBrowser(){  List<MBrowseField> fields=initBrowserTable();  if (fields == null)   return false;  StringBuilder where=new StringBuilder("");  setContextWhere(m_Browse,null);  if (p_whereClause.length() > 0) {    where.append(p_whereClause);  }  prepareTable(fields,m_View.getFromClause(),where.toString(),"2");  return true;}  }
class C{  public byte[] decode(byte[] pArray){  return decodeBase64(pArray);}  }
class C{  public AbstractXMLEventParser(String namespaceURI){  this.namespaceURI=namespaceURI;}  }
class C{  protected List<Layer> organizeBackgroundLayers(List<Layer> layers){  if (isForegroundUnderBackgroundLayer(layers)) {    List<Layer> fLayers=new ArrayList<Layer>(layers.size());    List<Layer> bLayers=new ArrayList<Layer>(layers.size());    for (    Layer layer : layers) {      if (layer != null) {        if (layer.getAddAsBackground()) {          bLayers.add(layer);        } else {          fLayers.add(layer);        }      }    }    fLayers.addAll(bLayers);    return fLayers;  } else {    return layers;  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(setAttributeNS02.class,args);}  }
class C{  public static String down(final int n){  return ESC + "[" + n+ "B";}  }
class C{  private void showErrorToast(String message){  Toast.makeText(CreateAccountActivity.this,message,Toast.LENGTH_LONG).show();}  }
class C{  public void span(Composite parent){  Button b=new Button(parent,SWT.NONE);  init(b);  b.setVisible(false);}  }
class C{  @RequestMapping(value="/{cubeName}/segs/{segmentName}/refresh_lookup",method={RequestMethod.PUT}) @ResponseBody public CubeInstance rebuildLookupSnapshot(@PathVariable String cubeName,@PathVariable String segmentName,@RequestParam(value="lookupTable") String lookupTable){  try {    final CubeManager cubeMgr=cubeService.getCubeManager();    final CubeInstance cube=cubeMgr.getCube(cubeName);    return cubeService.rebuildLookupSnapshot(cube,segmentName,lookupTable);  } catch (  IOException e) {    logger.error(e.getLocalizedMessage(),e);    throw new InternalErrorException(e.getLocalizedMessage());  }}  }
class C{  private void downloadOMAContent(long downloadId,DownloadInfo downloadInfo,OMAInfo omaInfo){  if (omaInfo == null)   return;  String mimeType=omaInfo.getDrmType();  if (mimeType == null) {    mimeType=getOpennableType(mContext.getPackageManager(),omaInfo);  }  String fileName=omaInfo.getValue(OMA_NAME);  String url=omaInfo.getValue(OMA_OBJECT_URI);  if (TextUtils.isEmpty(fileName)) {    fileName=URLUtil.guessFileName(url,null,mimeType);  }  DownloadInfo newInfo=DownloadInfo.Builder.fromDownloadInfo(downloadInfo).setFileName(fileName).setUrl(url).setMimeType(mimeType).setDownloadId((int)downloadId).setDescription(omaInfo.getValue(OMA_DESCRIPTION)).setContentLength(getSize(omaInfo)).build();  DownloadManagerService.getDownloadManagerService(mContext).enqueueDownloadManagerRequest(newInfo,omaInfo.isValueEmpty(OMA_INSTALL_NOTIFY_URI));  mPendingOMADownloads.put(downloadId,omaInfo);}  }
class C{  public void valueChange(ValueChangeEvent e){  log.config(e.getPropertyName() + "=" + e.getNewValue());  if (e.getPropertyName().equals("C_BPartner_ID")) {    loadRMA();  }  window.tableChanged(null);}  }
class C{  public boolean isLabelProperty(Object element,String property){  return false;}  }
class C{  public long roundTripTime(long timeout,TimeUnit unit) throws InterruptedException {  if (latch.await(timeout,unit)) {    return received - sent;  } else {    return -2;  }}  }
class C{  protected LinkedList organizeFrames(String dtedDir,double ullat,double ullon,double lrlat,double lrlon,int level,boolean inside,int equal){  framesPrepped=false;  if (Debug.debugging("dted")) {    Debug.output("DTEDAdmin: Checking for directory " + dtedDir);  }  LinkedList frames=null;  if (true) {    level_=level;    ullat_=ullat;    ullon_=ullon;    lrlat_=lrlat;    lrlon_=lrlon;    inside_=inside;    equal_=equal;    Debug.output("DTEDAdmin: Figuring out which frames fit the criteria...");    frames=getFrameList(dtedDir);    framesPrepped=true;  }  return frames;}  }
class C{  public void warn(SourceLocator srcLctr,Node styleNode,Node sourceNode,String msg,Object args[]) throws TransformerException {  String formattedMsg=XSLMessages.createWarning(msg,args);  ErrorListener errHandler=m_transformer.getErrorListener();  if (null != errHandler)   errHandler.warning(new TransformerException(formattedMsg,srcLctr)); else   System.out.println(formattedMsg);}  }
class C{  public void endDocument() throws SAXException {  if (m_firstTagNotEmitted) {    flush();  }  m_handler.endDocument();}  }
class C{  public static int determineSampleSize(ImageRequest imageRequest,EncodedImage encodedImage){  if (!EncodedImage.isMetaDataAvailable(encodedImage)) {    return DEFAULT_SAMPLE_SIZE;  }  float ratio=determineDownsampleRatio(imageRequest,encodedImage);  int sampleSize;  if (encodedImage.getImageFormat() == DefaultImageFormats.JPEG) {    sampleSize=ratioToSampleSizeJPEG(ratio);  } else {    sampleSize=ratioToSampleSize(ratio);  }  int maxDimension=Math.max(encodedImage.getHeight(),encodedImage.getWidth());  while (maxDimension / sampleSize > MAX_BITMAP_SIZE) {    if (encodedImage.getImageFormat() == DefaultImageFormats.JPEG) {      sampleSize*=2;    } else {      sampleSize++;    }  }  return sampleSize;}  }
class C{  public final Iterator<EventBean> iterator(){  return new TimeWindowIterator(window);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:52.470 -0500",hash_original_method="4552BA18F0B2B2784BB1DA1C74165B61",hash_generated_method="694519006DA62B461A7E77A1249FEC18") public void firePropertyChange(String propertyName,int oldValue,int newValue){  firePropertyChange(propertyName,Integer.valueOf(oldValue),Integer.valueOf(newValue));}  }
class C{  private void handleMouseClicked(MouseEvent e){  if (this.liveHandler != null && this.liveHandler.isEnabled()) {    this.liveHandler.handleMouseClicked(this,e);  }  for (  MouseHandlerFX handler : this.auxiliaryMouseHandlers) {    if (handler.isEnabled()) {      handler.handleMouseClicked(this,e);    }  }}  }
class C{  private WebDoc createLayout(WebDoc doc,MWorkflow wf,int activeNode,MWFNode[] nodes,ArrayList nodes_ID,int[][] imageMap){  body b=doc.getBody();  b.addElement(printWorkflow(activeNode,wf,nodes,nodes_ID,imageMap));  b.addElement(new hr());  b.addElement(printDescription(activeNode,wf,nodes,nodes_ID));  b.addElement(new br());  b.addElement(printControlPanel(activeNode,wf,nodes,nodes_ID));  return doc;}  }
class C{  public FloatArrayList copy(){  return (FloatArrayList)clone();}  }
class C{  public static String encodeRedirectURLEL(HttpServletResponse rsp,String url){  try {    return rsp.encodeRedirectURL(url);  } catch (  Throwable t) {    return url;  }}  }
class C{  public void addToList(Object[] data,double mer) throws Exception {  Link2 newL=new Link2(data,mer);  if (size() == 0) {    add(newL);  } else {    if (mer > (get(0)).m_merit) {      if (size() == m_MaxSize) {        removeLinkAt(m_MaxSize - 1);      }      add(0,newL);    } else {      int i=0;      int size=size();      boolean done=false;      if ((size == m_MaxSize) && (mer <= get(size() - 1).m_merit)) {      } else {        while ((!done) && (i < size)) {          if (mer > (get(i)).m_merit) {            if (size == m_MaxSize) {              removeLinkAt(m_MaxSize - 1);            }            add(i,newL);            done=true;          } else {            if (i == size - 1) {              add(newL);              done=true;            } else {              i++;            }          }        }      }    }  }}  }
class C{  public void updateContact(Contact oldContact,Contact newContact){  ContentValues values=new ContentValues();  values.put("first_name",newContact.getFirstName());  values.put("last_name",newContact.getLastName());  values.put("phone",newContact.getPhone());  values.put("email",newContact.getEmail());  database.update("Contact",values,"phone = ?",new String[]{oldContact.getPhone()});}  }
class C{  static void copyCStringToNativeBuffer(byte[] cstr,NativeBuffer buffer){  long offset=Unsafe.ARRAY_BYTE_BASE_OFFSET;  long len=cstr.length;  assert buffer.size() >= (len + 1);  unsafe.copyMemory(cstr,offset,null,buffer.address(),len);  unsafe.putByte(buffer.address() + len,(byte)0);}  }
class C{  public static void main(String... a) throws Exception {  TestBase test=TestBase.createCaller().init();  test.config.traceTest=true;  test.config.big=true;  test.test();}  }
class C{  public final int addOperator(Operator operator,int index){  if (index < subprocesses.length) {    subprocesses[index].addOperator(operator);    getLogger().warning("OperatorChain.addOperator() is deprecated! Use getSubprocess(int).addOperator(). I have added the operator to subprocess " + subprocesses[index].getName());    return index;  } else {    throw new UnsupportedOperationException("addOperator() is no longer supported. Try getSubprocess(int).addOperator()");  }}  }
class C{  public static void createSettingsDirectory(){  if (createZynamicsDirectory()) {    if (!createNaviDirectory()) {      showDirectoryCreationError(ConfigHelper.getConfigurationDirectory(Constants.COMPANY_NAME,Constants.PROJECT_NAME));    }  } else {    showDirectoryCreationError(ConfigHelper.getZynamicsDirectory(Constants.COMPANY_NAME));  }}  }
class C{  public static SimpleDataSet loadArffFile(Reader input){  ArrayList<DataPoint> list=new ArrayList<DataPoint>();  BufferedReader br=new BufferedReader(input);  int numOfVars=0;  int numReal=0;  List<Boolean> isReal=new ArrayList<Boolean>();  List<String> variableNames=new ArrayList<String>();  List<HashMap<String,Integer>> catVals=new ArrayList<HashMap<String,Integer>>();  String line=null;  CategoricalData[] categoricalData=null;  try {    boolean atData=false;    while ((line=br.readLine()) != null) {      if (line.startsWith("%") || line.trim().isEmpty())       continue;      line=line.trim();      if (line.startsWith("@") && !atData) {        line=line.substring(1).toLowerCase();        if (line.toLowerCase().startsWith("data")) {          categoricalData=new CategoricalData[numOfVars - numReal];          int k=0;          for (int i=0; i < catVals.size(); i++) {            if (catVals.get(i) != null) {              categoricalData[k]=new CategoricalData(catVals.get(i).size());              categoricalData[k].setCategoryName(variableNames.get(i));              for (              Entry<String,Integer> entry : catVals.get(i).entrySet())               categoricalData[k].setOptionName(entry.getKey(),entry.getValue());              k++;            }          }          atData=true;          continue;        } else         if (!line.toLowerCase().startsWith("attribute"))         continue;        numOfVars++;        line=line.substring("attribute".length()).trim();        String variableName=null;        line=line.replace("\t"," ");        if (line.startsWith("'")) {          Pattern p=Pattern.compile("'.+?'");          Matcher m=p.matcher(line);          m.find();          variableName=nameTrim(m.group());          line=line.replaceFirst("'.+?'","placeHolder");        } else         variableName=nameTrim(line.trim().replaceAll("\\s+.*",""));        variableNames.add(variableName);        String[] tmp=line.split("\\s+",2);        if (tmp[1].trim().equals("real") || tmp[1].trim().equals("numeric") || tmp[1].trim().startsWith("integer")) {          numReal++;          isReal.add(true);          catVals.add(null);        } else {          isReal.add(false);          String cats=tmp[1].replace("{","").replace("}","").trim();          if (cats.endsWith(","))           cats=cats.substring(0,cats.length() - 1);          String[] catValsRaw=cats.split(",");          HashMap<String,Integer> tempMap=new HashMap<String,Integer>();          for (int i=0; i < catValsRaw.length; i++) {            catValsRaw[i]=nameTrim(catValsRaw[i]);            tempMap.put(catValsRaw[i],i);          }          catVals.add(tempMap);        }      } else       if (atData && !line.isEmpty()) {        double weight=1.0;        String[] tmp=line.split(",");        if (tmp.length != isReal.size()) {          String s=tmp[isReal.size()];          if (tmp.length == isReal.size() + 1) {            if (!s.matches("\\{\\d+(\\.\\d+)?\\}"))             throw new RuntimeException("extra column must indicate a data point weigh in the form of \"{#}\", instead bad token " + s + " was found");            weight=Double.parseDouble(s.substring(1,s.length() - 1));          } else {            throw new RuntimeException("Column had " + tmp.length + " values instead of "+ isReal.size());          }        }        DenseVector vec=new DenseVector(numReal);        int[] cats=new int[numOfVars - numReal];        int k=0;        for (int i=0; i < isReal.size(); i++) {          String val_string=tmp[i].trim();          if (isReal.get(i))           if (val_string.equals("?"))           vec.set(i - k,Double.NaN); else           vec.set(i - k,Double.parseDouble(val_string)); else {            tmp[i]=nameTrim(tmp[i]).trim().toLowerCase();            if (tmp[i].equals("?"))             cats[k++]=-1; else             cats[k++]=catVals.get(i).get(tmp[i]);          }        }        list.add(new DataPoint(vec,cats,categoricalData,weight));      }    }  } catch (  IOException ex) {  }  SimpleDataSet dataSet=new SimpleDataSet(list);  int k=0;  for (int i=0; i < isReal.size(); i++)   if (isReal.get(i))   dataSet.setNumericName(variableNames.get(k),k++);  return dataSet;}  }
class C{  protected boolean canTriggerWalking(){  return false;}  }
class C{  @Override protected void onJoin(String target,String sender,String login,String hostname){  if (sender.equalsIgnoreCase(getNick()) && server.getConversation(target) == null) {    Conversation conversation=new Channel(target);    conversation.setHistorySize(service.getSettings().getHistorySize());    server.addConversation(conversation);    Intent intent=Broadcast.createConversationIntent(Broadcast.CONVERSATION_NEW,server.getId(),target);    service.sendBroadcast(intent);  } else   if (service.getSettings().showJoinPartAndQuit()) {    Message message=new Message(service.getString(R.string.message_join,sender),Message.TYPE_MISC);    message.setIcon(R.drawable.join);    message.setColor(Message.COLOR_GREEN);    server.getConversation(target).addMessage(message);    Intent intent=Broadcast.createConversationIntent(Broadcast.CONVERSATION_MESSAGE,server.getId(),target);    service.sendBroadcast(intent);  }}  }
class C{  public ClusterNode discoveryNode(){  return discoNode;}  }
class C{  public synchronized void onNetworkChanged(NetworkState state){  this.apiBroker.send(new ApiBroker.NetworkChanged(state));}  }
class C{  public final boolean modelValueEquals(Object obj){  if (this.type != 0) {    Assert.fail("Attempted to check equality of the typed model value " + ppr(this.toString()) + " and the non-model value\n"+ ppr(obj.toString()));  }  ;  return false;}  }
class C{  public void start(boolean show){  if (show) {    setVisible(true);  }  timer.start();}  }
class C{  public boolean isText(){  return false;}  }
class C{  public void onRemove(){}  }
class C{  public IntentBuilder durationLimit(int limit){  result.putExtra(MediaStore.EXTRA_DURATION_LIMIT,limit);  return (this);}  }
class C{  public static void isTrue(boolean assertion){  isTrue(assertion,null);}  }
class C{  @Override public void dragEnter(DragSourceDragEvent evt){  DragSourceContext ctx=evt.getDragSourceContext();  ctx.setCursor(cursor);}  }
class C{  public static void drawRoundedCorners(Bitmap src,Bitmap dest,int radius){  drawRoundedCorners(src,dest,radius,CLEAR_COLOR);}  }
class C{  private void writeObject(ObjectOutputStream out) throws ClassNotFoundException, IOException {  out.defaultWriteObject();  out.writeObject(SerializationUtils.wrap(boxBorderStroke));  out.writeObject(SerializationUtils.wrap(whiskerStroke));  out.writeObject(SerializationUtils.wrap(centerBarStroke));}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:39.493 -0500",hash_original_method="D55C6AB533D249202FC7A2AC29FF93BB",hash_generated_method="2020EB7A90BA7B22232FE2964D5A4746") int fillWindow(CursorWindow window){  mDatabase.lock(mSql);  long timeStart=SystemClock.uptimeMillis();  try {    acquireReference();    try {      window.acquireReference();      int startPos=window.getStartPosition();      int numRows=nativeFillWindow(nHandle,nStatement,window.mWindowPtr,startPos,mOffsetIndex);      if (SQLiteDebug.DEBUG_LOG_SLOW_QUERIES) {        long elapsed=SystemClock.uptimeMillis() - timeStart;        if (SQLiteDebug.shouldLogSlowQuery(elapsed)) {          Log.d(TAG,"fillWindow took " + elapsed + " ms: window=\""+ window+ "\", startPos="+ startPos+ ", offset="+ mOffsetIndex+ ", filledRows="+ window.getNumRows()+ ", countedRows="+ numRows+ ", query=\""+ mSql+ "\""+ ", args=["+ (mBindArgs != null ? TextUtils.join(", ",mBindArgs.values()) : "")+ "]");        }      }      mDatabase.logTimeStat(mSql,timeStart);      return numRows;    } catch (    IllegalStateException e) {      return 0;    }catch (    SQLiteDatabaseCorruptException e) {      mDatabase.onCorruption();      throw e;    }catch (    SQLiteException e) {      Log.e(TAG,"exception: " + e.getMessage() + "; query: "+ mSql);      throw e;    } finally {      window.releaseReference();    }  }  finally {    releaseReference();    mDatabase.unlock();  }}  }
class C{  public static FeaturesConfig fromXml(final String toConvert) throws JAXBException {  try (StringReader reader=new StringReader(toConvert)){    return fromXml(reader);  } }  }
class C{  public boolean isPeriodicBoundaryConditions(){  return periodicBoundaryConditions;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ANONYMOUS_GUARD_1__CODE_LANG_1:    getCodeLang_1().clear();  getCodeLang_1().addAll((Collection<? extends CodeLang_>)newValue);return;case UmplePackage.ANONYMOUS_GUARD_1__CODE_LANGS_1:getCodeLangs_1().clear();getCodeLangs_1().addAll((Collection<? extends CodeLangs_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public static boolean addSmiles(Context context,Spannable spannable){  boolean hasChanges=false;  for (  Entry<Pattern,Integer> entry : emoticons.entrySet()) {    Matcher matcher=entry.getKey().matcher(spannable);    while (matcher.find()) {      boolean set=true;      for (      ImageSpan span : spannable.getSpans(matcher.start(),matcher.end(),ImageSpan.class))       if (spannable.getSpanStart(span) >= matcher.start() && spannable.getSpanEnd(span) <= matcher.end())       spannable.removeSpan(span); else {        set=false;        break;      }      if (set) {        hasChanges=true;        spannable.setSpan(new ImageSpan(context,entry.getValue()),matcher.start(),matcher.end(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);      }    }  }  return hasChanges;}  }
class C{  public double slopeStdErr(){  return Math.sqrt(svar1);}  }
class C{  public void persistWorkflow(Workflow workflow) throws WorkflowException {  try {    Map<String,Workflow.Step> stepMap=workflow.getStepMap();    Map<String,StepStatus> stepStatusMap=workflow.getStepStatusMap();    workflow.setStepMap(null);    workflow.setStepStatusMap(null);    String path=getZKWorkflowPath(workflow);    _dataManager.putData(path,workflow);    workflow.setStepMap(stepMap);    workflow.setStepStatusMap(stepStatusMap);  } catch (  Exception ex) {    throw new WorkflowException("Cannot persist workflow data in ZK",ex);  }}  }
class C{  public LocalTime roundFloorCopy(){  return iInstant.withLocalMillis(iField.roundFloor(iInstant.getLocalMillis()));}  }
class C{  private Entry<String,Boolean> findExistingIGForHostAndMask(StorageSystem storage,ExportMask mask,URI host){  List<String> initiatorsInDb=queryHostInitiators(host);  CloseableIterator<CIMInstance> cigInstances=null;  CloseableIterator<CIMInstance> igInstances=null;  try {    CIMInstance maskingViewInstance=this.maskingViewExists(storage,mask.getMaskName());    if (maskingViewInstance != null) {      cigInstances=_helper.getAssociatorInstances(storage,maskingViewInstance.getObjectPath(),null,SmisConstants.SE_INITIATOR_MASKING_GROUP,null,null,SmisConstants.PS_ELEMENT_NAME);      if (!cigInstances.hasNext()) {        _log.info(String.format("createOrUpdateInitiatorGroups - There is no initiator group associated with export mask: %s",mask.getMaskName()));      }      CIMInstance cigInstance=cigInstances.next();      if (_helper.isCascadedIG(storage,cigInstance.getObjectPath())) {        igInstances=_helper.getAssociatorInstances(storage,cigInstance.getObjectPath(),null,SmisConstants.SE_INITIATOR_MASKING_GROUP,null,null,SmisConstants.PS_ELEMENT_NAME);        if (igInstances.hasNext()) {          while (igInstances.hasNext()) {            CIMInstance igInstance=igInstances.next();            if (igContainsInitiators(storage,igInstance,initiatorsInDb)) {              return new AbstractMap.SimpleEntry<String,Boolean>(CIMPropertyFactory.getPropertyValue(igInstance,SmisConstants.CP_ELEMENT_NAME),Boolean.FALSE);            }          }        }      } else {        if (igContainsInitiators(storage,cigInstance,initiatorsInDb)) {          return new AbstractMap.SimpleEntry<String,Boolean>(CIMPropertyFactory.getPropertyValue(cigInstance,SmisConstants.CP_ELEMENT_NAME),Boolean.TRUE);        }      }    }  } catch (  Exception e) {    _log.error(String.format("findExistingIGForHostAndMask failed - maskName: %s",mask.getMaskName()),e);    String opName=ResourceOperationTypeEnum.ADD_EXPORT_INITIATOR.getName();    ServiceError serviceError=DeviceControllerException.errors.jobFailedOpMsg(opName,e.getMessage());  } finally {    if (cigInstances != null) {      cigInstances.close();    }    if (igInstances != null) {      igInstances.close();    }  }  return new AbstractMap.SimpleEntry<String,Boolean>(null,Boolean.FALSE);}  }
class C{  public static void main(String[] args){  TestNoPackagesFile tester=new TestNoPackagesFile();  run(tester,ARGS,NO_TEST,NO_TEST);  if ((new java.io.File(BUG_ID + FS + "packages.html")).exists()) {    throw new Error("Test Fails: packages file should not be " + "generated anymore.");  } else {    System.out.println("Test passes:  packages.html not found.");  }}  }
class C{  @RequestMapping(value="/activate",method=RequestMethod.GET,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<String> activateAccount(@RequestParam(value="key") String key){  return userService.activateRegistration(key).map(null).orElse(new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR));}  }
class C{  public synchronized void putView(final INaviView view){  viewsToId.forcePut(view,view.getConfiguration().getId());}  }
class C{  private int addWordlenWeights(Channel chan,int weightIdx){  int[] weigthsTab=atrac3p_wl_weights[chan.chNum * 3 + weightIdx - 1];  for (int i=0; i < ctx.numQuantUnits; i++) {    chan.quWordlen[i]+=weigthsTab[i];    if (chan.quWordlen[i] < 0 || chan.quWordlen[i] > 7) {      log.error(String.format("WL index out of range pos=%d, val=%d",i,chan.quWordlen[i]));      return AT3P_ERROR;    }  }  return 0;}  }
class C{  private void initDatabase(){  DatabaseManager.getInstance(getApplicationContext()).getWritableDatabase();}  }
class C{  public void registerComponentInstance(final WorkspaceComponent workspaceComponent,final GuiComponent guiComponent){  guiComponent.setDesktop(this);  guiComponents.put(workspaceComponent,guiComponent);}  }
class C{  public void onEventMainThread(PrintMsgEvent event){  if (event.type == PrinterMsgType.MESSAGE_TOAST) {    showToast(event.msg);  }}  }
class C{  public Document exportTenantConfiguration(String tenantName,boolean exportPrivateData) throws Exception {  SAMLExporter exporter=new SAMLExporter(this);  Document doc=exporter.exportConfiguration(tenantName,exportPrivateData);  return doc;}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (getAD_User_ID() == -1)   setAD_User_ID(0);  if (is_ValueChanged("M_PriceList_Version_ID") && getM_PriceList_Version_ID() != 0) {    MPriceList pl=MPriceList.get(getCtx(),getM_PriceList_ID(),null);    if (pl != null && pl.get_ID() != 0)     setC_Currency_ID(pl.getC_Currency_ID());  }  return true;}  }
class C{  public static <T>T min(Collection<? extends T> collection,Comparator<? super T> comparator){  if (comparator == null) {    @SuppressWarnings("unchecked") T result=(T)min((Collection<Comparable>)collection);    return result;  }  Iterator<? extends T> it=collection.iterator();  T min=it.next();  while (it.hasNext()) {    T next=it.next();    if (comparator.compare(min,next) > 0) {      min=next;    }  }  return min;}  }
class C{  public static double quantile(double val,double[] quantiles){  int x1=1;  int x2=quantiles.length;  int i=x2 / 2;  while (x1 < x2) {    if (quantiles[i] == val) {      break;    } else     if (quantiles[i] < val) {      x1=i + 1;    } else {      x2=i;    }    i=x1 + (x2 - x1) / 2;  }  return ((double)i) / (quantiles.length - 1);}  }
class C{  public StringAttributeRule(String name,String description){  this(name,description,(String)null,false);}  }
class C{  private ASN1Primitive toASN1Object(X509Certificate cert) throws CertificateEncodingException {  try {    return new ASN1InputStream(cert.getEncoded()).readObject();  } catch (  Exception e) {    throw new CertificateEncodingException("Exception while encoding certificate: " + e.toString());  }}  }
class C{  @Override public void close() throws java.io.IOException {  flushBase64();  super.close();  buffer=null;  out=null;}  }
class C{  @Override protected void sendFunctionGroup4(){  XNetMessage msg=Z21XNetMessage.getLocomotiveFunctionOperationMsg(this.getDccAddress(),13,f13);  queueMessage(msg,THROTTLEFUNCSENT);  XNetMessage msg1=Z21XNetMessage.getLocomotiveFunctionOperationMsg(this.getDccAddress(),14,f14);  queueMessage(msg1,THROTTLEFUNCSENT);  XNetMessage msg2=Z21XNetMessage.getLocomotiveFunctionOperationMsg(this.getDccAddress(),15,f15);  queueMessage(msg2,THROTTLEFUNCSENT);  XNetMessage msg3=Z21XNetMessage.getLocomotiveFunctionOperationMsg(this.getDccAddress(),16,f16);  queueMessage(msg3,THROTTLEFUNCSENT);  XNetMessage msg4=Z21XNetMessage.getLocomotiveFunctionOperationMsg(this.getDccAddress(),17,f17);  queueMessage(msg4,THROTTLEFUNCSENT);  XNetMessage msg5=Z21XNetMessage.getLocomotiveFunctionOperationMsg(this.getDccAddress(),18,f18);  queueMessage(msg5,THROTTLEFUNCSENT);  XNetMessage msg6=Z21XNetMessage.getLocomotiveFunctionOperationMsg(this.getDccAddress(),19,f19);  queueMessage(msg6,THROTTLEFUNCSENT);  XNetMessage msg7=Z21XNetMessage.getLocomotiveFunctionOperationMsg(this.getDccAddress(),20,f20);  queueMessage(msg7,THROTTLEFUNCSENT);}  }
class C{  public void removePropertyChangeListener(final String propertyName,final PropertyChangeListener listener){  propertyChangeSupport.removePropertyChangeListener(propertyName,listener);}  }
class C{  @Override public void selectAll(){  setValue(getItemIds());}  }
class C{  public boolean checkValidDest(LayoutBlock facing,LayoutBlock protecting,FacingProtecting dest,int pathMethod) throws JmriException {  if (facing == null || protecting == null || dest == null) {    return false;  }  if (log.isDebugEnabled()) {    log.debug("facing : {} protecting : {} dest {}" + facing.getDisplayName(),protecting.getDisplayName(),dest.getBean().getDisplayName());  }  try {    List<LayoutBlock> destList=new ArrayList<LayoutBlock>();    for (    Block b : dest.getProtectingBlocks()) {      destList.add(InstanceManager.getDefault(LayoutBlockManager.class).getLayoutBlock(b));    }    return checkValidDest(facing,protecting,InstanceManager.getDefault(LayoutBlockManager.class).getLayoutBlock(dest.getFacing()),destList,pathMethod);  } catch (  jmri.JmriException e) {    throw e;  }}  }
class C{  public static <T>void delete(EntityManager entityManager,T object){  if (entityManager.contains(object)) {    entityManager.remove(object);  } else {    T merged=entityManager.merge(object);    entityManager.remove(merged);  }}  }
class C{  public boolean contains(double rX,double rY,double rWidth,double rHeight){  return x <= rX && y <= rY && x + size.getWidth() >= rX + rWidth && y + size.getHeight() >= rY + rHeight;}  }
class C{  @Override ObservedObject createObservedObject(ObjectName object){  final StringMonitorObservedObject smo=new StringMonitorObservedObject(object);  smo.setStatus(MATCHING_OR_DIFFERING);  return smo;}  }
class C{  public static void showSynopsis(){  System.out.println("Usage: findbugs [general options] -textui [command line options...] [jar/zip/class files, directories...]");}  }
class C{  public int next(){  int node;  while ((node=super.next()) != END) {    node=makeNodeIdentity(node);    int parent=_parent(node);    int child=_firstch(parent);    int pos=0;    do {      int type=_type(child);      if (ELEMENT_NODE == type)       pos++;    } while ((pos < _pos) && (child=_nextsib(child)) != END);    if (node == child)     return node;  }  return (END);}  }
class C{  public static IndeterminateProgressDialog newInstance(int messageId,boolean cancelable){  IndeterminateProgressDialog fragment=new IndeterminateProgressDialog();  fragment.setStyle(DialogFragment.STYLE_NO_FRAME,R.style.synox_AlertDialog);  Bundle args=new Bundle();  args.putInt(ARG_MESSAGE_ID,messageId);  args.putBoolean(ARG_CANCELABLE,cancelable);  fragment.setArguments(args);  return fragment;}  }
class C{  public void browserReload(PeerComponent browserPeer){  ((AndroidImplementation.AndroidBrowserComponent)browserPeer).reload();}  }
class C{  public byte[] contentAsBytes() throws IOException, ServerException {  final ContentStream contentStream=getContentStream();  final int contentLength=(int)contentStream.getLength();  if (contentLength == 0) {    return new byte[0];  }  try (InputStream stream=contentStream.getStream()){    if (contentLength < 0) {      return ByteStreams.toByteArray(stream);    }    final byte[] b=new byte[contentLength];    ByteStreams.readFully(stream,b);    return b;  } }  }
class C{  protected void assertTask(Consumer<FormatExtension> test,String before,String afterExpected) throws Exception {  FormatTask task=createTask(test);  task.lineEndingsPolicy=LineEnding.UNIX.createPolicy();  File testFile=folder.newFile();  Files.write(testFile.toPath(),before.getBytes(StandardCharsets.UTF_8));  task.target=Collections.singleton(testFile);  task.format();  String afterActual=new String(Files.readAllBytes(testFile.toPath()),StandardCharsets.UTF_8);  Assert.assertEquals(afterExpected,afterActual);}  }
class C{  private void initializeButton(AbstractButton b,String name) throws ResourceFormatException, MissingListenerException {  try {    Action a=actions.getAction(getString(name + ACTION_SUFFIX));    if (a == null) {      throw new MissingListenerException("","Action",name + ACTION_SUFFIX);    }    b.setAction(a);    try {      b.setText(getString(name + TEXT_SUFFIX));    } catch (    MissingResourceException mre) {    }    if (a instanceof JComponentModifier) {      ((JComponentModifier)a).addJComponent(b);    }  } catch (  MissingResourceException e) {  }  try {    String s=getString(name + ICON_SUFFIX);    URL url=actions.getClass().getResource(s);    if (url != null) {      b.setIcon(new ImageIcon(url));    }  } catch (  MissingResourceException e) {  }  try {    String str=getString(name + MNEMONIC_SUFFIX);    if (str.length() == 1) {      b.setMnemonic(str.charAt(0));    } else {      throw new ResourceFormatException("Malformed mnemonic",bundle.getClass().getName(),name + MNEMONIC_SUFFIX);    }  } catch (  MissingResourceException e) {  }  try {    String s=getString(name + TOOLTIP_SUFFIX);    if (s != null) {      b.setToolTipText(s);    }  } catch (  MissingResourceException e) {  }}  }
class C{  public ResourceServerAccessToken parseAccessToken(String accessToken) throws TokenValidationException {  return ResourceServerAccessToken.build(accessToken,providerPublicKey,AuthOIDCClient.ResourceServer.rs_esxcloud.toString(),0);}  }
class C{  public DiskBasedCache(File rootDirectory,int maxCacheSizeInBytes){  mRootDirectory=rootDirectory;  mMaxCacheSizeInBytes=maxCacheSizeInBytes;}  }
class C{  public void checkpoint(){  if (persistent) {synchronized (this) {      if (pageStore != null) {        pageStore.checkpoint();      }    }    if (mvStore != null) {      mvStore.flush();    }  }  getTempFileDeleter().deleteUnused();}  }
class C{  public void failShard(String reason,@Nullable Throwable e){  engine().failEngine(reason,e);}  }
class C{  private void createDatabase(final String databaseName){  try {    final Connection connection=DriverManager.getConnection(url + databaseName,databaseProperties);    try {      NaviLogger.info("[i] Generating database tables for %s.",databaseName);      connection.prepareStatement(AbstractSQLProvider.parseResourceAsSQLFile(this.getClass().getResourceAsStream(TEST_DATA_DIRECTORY + "database_schema.sql"))).execute();    } catch (    final IOException exception) {      CUtilityFunctions.logException(exception);    }    final File testDataDir=new File("./third_party/zynamics/javatests/com/google/security/zynamics/binnavi/testdata/" + databaseName + "/");    final CopyManager manager=new CopyManager((BaseConnection)connection);    for (    final File currentFile : testDataDir.listFiles()) {      try (FileReader reader=new FileReader(currentFile)){        final String tableName=currentFile.getName().split(".sql")[0];        NaviLogger.info("[i] Importing: %s.%s from %s",databaseName,tableName,currentFile.getAbsolutePath());        manager.copyIn("COPY " + tableName + " FROM STDIN",reader);      } catch (      final IOException exception) {        CUtilityFunctions.logException(exception);      }    }    try {      NaviLogger.warning("[i] Generating constraints  for %s.",databaseName);      connection.prepareStatement(AbstractSQLProvider.parseResourceAsSQLFile(this.getClass().getResourceAsStream(TEST_DATA_DIRECTORY + "database_constraints.sql"))).execute();    } catch (    final IOException exception) {      CUtilityFunctions.logException(exception);    }    final String findSequencesQuery="SELECT 'SELECT SETVAL(' ||quote_literal(S.relname)|| " + "', MAX(' ||quote_ident(C.attname)|| ') ) FROM ' ||quote_ident(T.relname)|| ';' " + " FROM pg_class AS S, pg_depend AS D, pg_class AS T, pg_attribute AS C "+ " WHERE S.relkind = 'S' AND S.oid = D.objid AND D.refobjid = T.oid "+ " AND D.refobjid = C.attrelid AND D.refobjsubid = C.attnum ORDER BY S.relname; ";    try (PreparedStatement statement=connection.prepareStatement(findSequencesQuery);ResultSet resultSet=statement.executeQuery()){      while (resultSet.next()) {        final PreparedStatement fixSequence=connection.prepareStatement(resultSet.getString(1));        fixSequence.execute();      }    } catch (    final SQLException exception) {      CUtilityFunctions.logException(exception);    }  } catch (  final SQLException exception) {    CUtilityFunctions.logException(exception);  }}  }
class C{  private long tryIncReaderOverflow(long s){  if ((s & ABITS) == RFULL) {    if (U.compareAndSwapLong(this,STATE,s,s | RBITS)) {      ++readerOverflow;      state=s;      return s;    }  } else   if ((LockSupport.nextSecondarySeed() & OVERFLOW_YIELD_RATE) == 0)   Thread.yield();  return 0L;}  }
class C{  public void activeTextureUnit(int textureUnit){  if (this.textureUnit != textureUnit) {    this.textureUnit=textureUnit;    GLES20.glActiveTexture(textureUnit);  }}  }
class C{  @Override public void addMouseListener(MouseListener l){}  }
class C{  public void rewind(long nOffset) throws IOException {  if (nOffset == -1) {    nOffset=nFirstRecordOffset;  }  if (fpDDF != null) {    fpDDF.seek(nOffset);    if (nOffset == nFirstRecordOffset && poRecord != null) {      poRecord.clear();    }  }}  }
class C{  public void release() throws ReplicatorException {}  }
class C{  final Object toNonNullOpenValue(Object value) throws OpenDataException {  CompositeType ct=(CompositeType)getOpenType();  if (value instanceof CompositeDataView)   return ((CompositeDataView)value).toCompositeData(ct);  if (value == null)   return null;  Object[] values=new Object[getters.length];  for (int i=0; i < getters.length; i++) {    try {      Object got=getters[i].invoke(value,(Object[])null);      values[i]=getterConverters[i].toOpenValue(got);    } catch (    Exception e) {      throw openDataException("Error calling getter for " + itemNames[i] + ": "+ e,e);    }  }  return new CompositeDataSupport(ct,itemNames,values);}  }
class C{  public static int samplePMF(double w[],Random r){  double u=r.nextDouble();  double sum=w[0];  int i=0;  while (sum < u) {    i++;    sum+=w[i];  }  return i;}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:07.701 -0500",hash_original_method="89F344582D255D48D3BC56CB8686027C",hash_generated_method="F559B8261FD2194AE0F350904CF8D9A2") @Override public void send(HandshakeIODataStream out){  out.write(client_version);  out.write(random);  out.writeUint8(session_id.length);  out.write(session_id);  int size=cipher_suites.length << 1;  out.writeUint16(size);  for (int i=0; i < cipher_suites.length; i++) {    out.write(cipher_suites[i].toBytes());  }  out.writeUint8(compression_methods.length);  for (int i=0; i < compression_methods.length; i++) {    out.write(compression_methods[i]);  }}  }
class C{  public T caseIsSorted_(IsSorted_ object){  return null;}  }
class C{  protected void markSizeInvalid(){  preferredHeight=0;}  }
class C{  public void clearCaches(){  clearMemoryCaches();  clearDiskCaches();}  }
class C{  public boolean isRemoteMoviePlaying() throws TransientNetworkDisconnectionException, NoConnectionException {  checkConnectivity();  return mState == MediaStatus.PLAYER_STATE_BUFFERING || mState == MediaStatus.PLAYER_STATE_PLAYING;}  }
class C{  private void examineNullValues() throws CFGBuilderException, DataflowAnalysisException {  Set<LocationWhereValueBecomesNull> locationWhereValueBecomesNullSet=invDataflow.getAnalysis().getLocationWhereValueBecomesNullSet();  if (DEBUG_DEREFS) {    System.out.println("----------------------- examineNullValues " + locationWhereValueBecomesNullSet.size());  }  Map<ValueNumber,SortedSet<Location>> bugStatementLocationMap=new HashMap<ValueNumber,SortedSet<Location>>();  Map<ValueNumber,NullValueUnconditionalDeref> nullValueGuaranteedDerefMap=new HashMap<ValueNumber,NullValueUnconditionalDeref>();  CFG cfg=classContext.getCFG(method);  for (Iterator<Location> i=cfg.locationIterator(); i.hasNext(); ) {    Location location=i.next();    if (DEBUG_DEREFS) {      System.out.println("At location " + location);    }    checkForUnconditionallyDereferencedNullValues(location,bugStatementLocationMap,nullValueGuaranteedDerefMap,vnaDataflow.getFactAtLocation(location),invDataflow.getFactAtLocation(location),uvdDataflow.getFactAfterLocation(location),false);  }  HashSet<ValueNumber> npeIfStatementCovered=new HashSet<ValueNumber>(nullValueGuaranteedDerefMap.keySet());  Map<ValueNumber,SortedSet<Location>> bugEdgeLocationMap=new HashMap<ValueNumber,SortedSet<Location>>();  checkEdges(cfg,nullValueGuaranteedDerefMap,bugEdgeLocationMap);  Map<ValueNumber,SortedSet<Location>> bugLocationMap=bugEdgeLocationMap;  bugLocationMap.putAll(bugStatementLocationMap);  Map<ValueNumber,Set<Location>> nullValueAssignmentMap=findNullAssignments(locationWhereValueBecomesNullSet);  reportBugs(nullValueGuaranteedDerefMap,npeIfStatementCovered,bugLocationMap,nullValueAssignmentMap);}  }
class C{  public void add(Comparator c){  if (c == null)   return;  if (m_cmp.length == m_size) {    Comparator[] cmp=new Comparator[m_size + INCREMENT];    System.arraycopy(m_cmp,0,cmp,0,m_size);    m_cmp=cmp;  }  m_cmp[m_size++]=c;}  }
class C{  private E xfer(E e,boolean haveData,int how,long nanos){  if (haveData && (e == null))   throw new NullPointerException();  Node s=null;  retry:   for (; ; ) {    for (Node h=head, p=h; p != null; ) {      boolean isData=p.isData;      Object item=p.item;      if (item != p && (item != null) == isData) {        if (isData == haveData)         break;        if (p.casItem(item,e)) {          for (Node q=p; q != h; ) {            Node n=q.next;            if (head == h && casHead(h,n == null ? q : n)) {              h.forgetNext();              break;            }            if ((h=head) == null || (q=h.next) == null || !q.isMatched())             break;          }          LockSupport.unpark(p.waiter);          return LinkedTransferQueue.<E>cast(item);        }      }      Node n=p.next;      p=(p != n) ? n : (h=head);    }    if (how != NOW) {      if (s == null)       s=new Node(e,haveData);      Node pred=tryAppend(s,haveData);      if (pred == null)       continue retry;      if (how != ASYNC)       return awaitMatch(s,pred,e,(how == TIMED),nanos);    }    return e;  }}  }
class C{  protected DominatorNode fetchDode(Object gode){  DominatorNode dode;  if (godeToDode.containsKey(gode)) {    dode=(DominatorNode)godeToDode.get(gode);  } else {    dode=new DominatorNode(gode);    godeToDode.put(gode,dode);  }  return dode;}  }
class C{  public SchemaAnalyzer(Analyzer defaultAnalyzer,Map<String,Analyzer> analyzers,Map<String,Mapper> mappers){  super(PER_FIELD_REUSE_STRATEGY);  this.defaultAnalyzer=new TokenLengthAnalyzer(defaultAnalyzer);  this.fieldAnalyzers=new HashMap<>();  for (  Map.Entry<String,Mapper> entry : mappers.entrySet()) {    String name=entry.getKey();    Mapper mapper=entry.getValue();    String analyzerName=mapper.analyzer;    if (analyzerName != null) {      Analyzer analyzer=getAnalyzer(analyzers,analyzerName);      TokenLengthAnalyzer fieldAnalyzer=new TokenLengthAnalyzer(analyzer);      fieldAnalyzers.put(name,fieldAnalyzer);    }  }}  }
class C{  public boolean isVendor(){  Object oo=get_Value(COLUMNNAME_IsVendor);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public CEnableAllViewAction(final BackEndDebuggerProvider debuggerProvider,final INaviView view){  Preconditions.checkNotNull(debuggerProvider,"IE01350: Manager argument can not be null");  Preconditions.checkNotNull(view,"IE01351: View argument can not be null");  m_debuggerProvider=debuggerProvider;  m_view=view;  putValue(Action.SHORT_DESCRIPTION,"Enable all view breakpoints");}  }
class C{  private Resource findResource(final List<String> list){  LinkedList<String> path=new LinkedList<String>(list);  Resource current=root;  while (!path.isEmpty() && current != null) {    String name=path.removeFirst();    current=current.getChild(name);  }  return current;}  }
class C{  public DocumentoHashInfo(){  super();}  }
class C{  public Builder customProperty(String name,String value){  return customProperty(new Property(name,value));}  }
class C{  public static Image createTempColorIcon(final GamaUIColor gcolor){  final String name="color" + gcolor.getRGB().toString();  final GamaIcon icon=getInstance().getIcon(name);  if (icon != null) {    return icon.image();  }  final GamaIcon blank=create("display.color2");  final Image image=new Image(Display.getDefault(),blank.image().getImageData());  final GC gc=new GC(image);  gc.setAntialias(SWT.ON);  gc.setBackground(gcolor.color());  gc.fillRoundRectangle(6,6,12,12,4,4);  if (!gcolor.isDark()) {    gc.setForeground(IGamaColors.BLACK.color());    gc.drawRoundRectangle(6,6,12,12,4,4);  }  gc.dispose();  getInstance().putImageInCache(name,image);  getInstance().putIconInCache(name,new GamaIcon(name));  return image;}  }
class C{  public void required(String tagName,String actionName,String attributeName,Object attribute) throws ApplicationException {  if (attribute == null)   throw new ApplicationException("Attribute [" + attributeName + "] for tag ["+ tagName+ "] is required if attribute action has the value ["+ actionName+ "]");}  }
class C{  static Class findProviderClass(String className,ClassLoader cl,boolean doFallback) throws ClassNotFoundException, ConfigurationError {  SecurityManager security=System.getSecurityManager();  try {    if (security != null) {      final int lastDot=className.lastIndexOf(".");      String packageName=className;      if (lastDot != -1)       packageName=className.substring(0,lastDot);      security.checkPackageAccess(packageName);    }  } catch (  SecurityException e) {    throw e;  }  Class providerClass;  if (cl == null) {    providerClass=Class.forName(className);  } else {    try {      providerClass=cl.loadClass(className);    } catch (    ClassNotFoundException x) {      if (doFallback) {        ClassLoader current=ObjectFactory.class.getClassLoader();        if (current == null) {          providerClass=Class.forName(className);        } else         if (cl != current) {          cl=current;          providerClass=cl.loadClass(className);        } else {          throw x;        }      } else {        throw x;      }    }  }  return providerClass;}  }
class C{  private static double[][] flip(double[][] matrix){  double[][] flip=new double[matrix.length][matrix[0].length];  for (int i=0; i < flip.length; i++) {    for (int j=0; j < flip[0].length; j++) {      flip[i][j]=matrix[matrix.length - 1 - i][j];    }  }  return flip;}  }
class C{  public static ImageData makeWebImageData(Image image){  ImageData imageData=image.getImageData();  if (imageData.depth <= 8) {    return imageData;  }  ImageData newImageData=get8BitPaletteImageData(imageData);  if (newImageData == null) {    newImageData=getWebSafePaletteImageData(imageData);  }  return newImageData;}  }
class C{  public static double[][] performMatrixMultiplication(double[][] a,double[][] b){  int rows=a.length;  int cols=b[0].length;  double[][] result=new double[rows][cols];  for (int i=0; i < rows; i++) {    for (int j=0; j < cols; j++) {      double value=0;      for (int k=0; k < a[i].length; k++) {        value+=(a[i][k] * b[k][j]);      }      result[i][j]=value;    }  }  return result;}  }
class C{  private static void vecswap(Swapper swapper,int a,int b,int n){  for (int i=0; i < n; i++, a++, b++)   swapper.swap(a,b);}  }
class C{  public void shedConnectionCaches(){  List<TCPChannel> channels;synchronized (channelTable) {    channels=new ArrayList<TCPChannel>(channelTable.values().size());    for (    Reference<TCPChannel> ref : channelTable.values()) {      TCPChannel ch=ref.get();      if (ch != null) {        channels.add(ch);      }    }  }  for (  TCPChannel channel : channels) {    channel.shedCache();  }}  }
class C{  private void tabCreatedInBackground(int id,int sourceId,boolean newIsIncognito,float originX,float originY){  LayoutTab newLayoutTab=createLayoutTab(id,newIsIncognito,NO_CLOSE_BUTTON,NEED_TITLE);  assert mLayoutTabs.length == 1;  LayoutTab sourceLayoutTab=mLayoutTabs[0];  mLayoutTabs=new LayoutTab[]{sourceLayoutTab,newLayoutTab};  updateCacheVisibleIds(new LinkedList<Integer>(Arrays.asList(id,sourceId)));  forceAnimationToFinish();  newLayoutTab.setBorderAlpha(0.0f);  final float scale=StackAnimation.SCALE_AMOUNT;  final float margin=Math.min(getWidth(),getHeight()) * (1.0f - scale) / 2.0f;  addToAnimation(sourceLayoutTab,LayoutTab.Property.SCALE,1.0f,scale,BACKGROUND_STEP1_DURATION,0,false,BakedBezierInterpolator.TRANSFORM_CURVE);  addToAnimation(sourceLayoutTab,LayoutTab.Property.X,0.0f,margin,BACKGROUND_STEP1_DURATION,0,false,BakedBezierInterpolator.TRANSFORM_CURVE);  addToAnimation(sourceLayoutTab,LayoutTab.Property.Y,0.0f,margin,BACKGROUND_STEP1_DURATION,0,false,BakedBezierInterpolator.TRANSFORM_CURVE);  addToAnimation(sourceLayoutTab,LayoutTab.Property.BORDER_SCALE,1.0f / scale,1.0f,BACKGROUND_STEP1_DURATION,0,false,BakedBezierInterpolator.TRANSFORM_CURVE);  addToAnimation(sourceLayoutTab,LayoutTab.Property.BORDER_ALPHA,0.0f,1.0f,BACKGROUND_STEP1_DURATION,0,false,BakedBezierInterpolator.TRANSFORM_CURVE);  float pauseX=margin;  float pauseY=margin;  if (getOrientation() == Orientation.PORTRAIT) {    pauseY=BACKGROUND_COVER_PCTG * getHeight();  } else {    pauseX=BACKGROUND_COVER_PCTG * getWidth();  }  addToAnimation(newLayoutTab,LayoutTab.Property.ALPHA,0.0f,1.0f,BACKGROUND_STEP1_DURATION / 2,0,false,BakedBezierInterpolator.FADE_IN_CURVE);  addToAnimation(newLayoutTab,LayoutTab.Property.SCALE,0.f,scale,BACKGROUND_STEP1_DURATION,0,false,BakedBezierInterpolator.FADE_IN_CURVE);  addToAnimation(newLayoutTab,LayoutTab.Property.X,originX,pauseX,BACKGROUND_STEP1_DURATION,0,false,BakedBezierInterpolator.FADE_IN_CURVE);  addToAnimation(newLayoutTab,LayoutTab.Property.Y,originY,pauseY,BACKGROUND_STEP1_DURATION,0,false,BakedBezierInterpolator.FADE_IN_CURVE);  addToAnimation(sourceLayoutTab,LayoutTab.Property.SCALE,scale,1.0f,BACKGROUND_STEP3_DURATION,BACKGROUND_STEP3_START,true,BakedBezierInterpolator.TRANSFORM_CURVE);  addToAnimation(sourceLayoutTab,LayoutTab.Property.X,margin,0.0f,BACKGROUND_STEP3_DURATION,BACKGROUND_STEP3_START,true,BakedBezierInterpolator.TRANSFORM_CURVE);  addToAnimation(sourceLayoutTab,LayoutTab.Property.Y,margin,0.0f,BACKGROUND_STEP3_DURATION,BACKGROUND_STEP3_START,true,BakedBezierInterpolator.TRANSFORM_CURVE);  addToAnimation(sourceLayoutTab,LayoutTab.Property.BORDER_SCALE,1.0f,1.0f / scale,BACKGROUND_STEP3_DURATION,BACKGROUND_STEP3_START,true,BakedBezierInterpolator.TRANSFORM_CURVE);  addToAnimation(sourceLayoutTab,LayoutTab.Property.BORDER_ALPHA,1.0f,0.0f,BACKGROUND_STEP3_DURATION,BACKGROUND_STEP3_START,true,BakedBezierInterpolator.TRANSFORM_CURVE);  addToAnimation(newLayoutTab,LayoutTab.Property.ALPHA,1.f,0.f,BACKGROUND_STEP3_DURATION,BACKGROUND_STEP3_START,true,BakedBezierInterpolator.FADE_OUT_CURVE);  if (getOrientation() == Orientation.PORTRAIT) {    addToAnimation(newLayoutTab,LayoutTab.Property.Y,pauseY,getHeight(),BACKGROUND_STEP3_DURATION,BACKGROUND_STEP3_START,true,BakedBezierInterpolator.FADE_OUT_CURVE);  } else {    addToAnimation(newLayoutTab,LayoutTab.Property.X,pauseX,getWidth(),BACKGROUND_STEP3_DURATION,BACKGROUND_STEP3_START,true,BakedBezierInterpolator.FADE_OUT_CURVE);  }  mTabModelSelector.selectModel(newIsIncognito);  startHiding(sourceId,false);}  }
class C{  private DataSource defaultDataSource(){  DataSourceBuilder dataSourceBuilder=new DataSourceBuilder(this.getClass().getClassLoader()).driverClassName(properties.getDriverClassName()).url(properties.getUrl()).username(properties.getUsername()).password(properties.getPassword());  if (properties.getType() != null) {    dataSourceBuilder.type(properties.getType());  }  return dataSourceBuilder.build();}  }
class C{  final MutableTree analyzeTree(String target){  final int n=getTreeCount();  FlexibleTree meanTree=null;  for (int i=0; i < n; i++) {    final Tree tree=getTree(i);    if (Tree.Utils.uniqueNewick(tree,tree.getRoot()).equals(target)) {      meanTree=new FlexibleTree(tree);      break;    }  }  if (meanTree == null) {    throw new RuntimeException("No target tree in trace");  }  final int inc=meanTree.getInternalNodeCount();  for (int j=0; j < inc; j++) {    double[] heights=new double[n];    NodeRef nodej=meanTree.getInternalNode(j);    Set<String> leafSet=Tree.Utils.getDescendantLeaves(meanTree,nodej);    for (int i=0; i < n; i++) {      final Tree tree=getTree(i);      NodeRef can=Tree.Utils.getCommonAncestorNode(tree,leafSet);      heights[i]=tree.getNodeHeight(can);    }    meanTree.setNodeHeight(nodej,dr.stats.DiscreteStatistics.mean(heights));    final double upper=dr.stats.DiscreteStatistics.quantile(0.975,heights);    meanTree.setNodeAttribute(nodej,"upper",upper);    final double lower=dr.stats.DiscreteStatistics.quantile(0.025,heights);    meanTree.setNodeAttribute(nodej,"lower",lower);    meanTree.setNodeAttribute(nodej,"range",new Double[]{lower,upper});  }  return meanTree;}  }
class C{  protected int endOfLineOf(int offset) throws BadLocationException {  IRegion info=fDocument.getLineInformationOfOffset(offset);  if (offset <= info.getOffset() + info.getLength())   return info.getOffset() + info.getLength();  int line=fDocument.getLineOfOffset(offset);  try {    info=fDocument.getLineInformation(line + 1);    return info.getOffset() + info.getLength();  } catch (  BadLocationException x) {    return fDocument.getLength();  }}  }
class C{  public String toString(){  return getName() + " " + getDescriptor();}  }
class C{  public void testOpenClose() throws Exception {  File logfile=new File("testCreate.dat");  logfile.delete();  LogFile tfrw=new LogFile(logfile);  tfrw.create(2);  tfrw.close();  LogFile tfro=new LogFile(logfile);  tfro.openRead();  long seqno=tfro.getBaseSeqno();  assertEquals("Sequence number should be 2",2,seqno);  tfro.close();}  }
class C{  public ObserveRequest(ContentFormat format,int objectId){  this(format,new LwM2mPath(objectId),null);}  }
class C{  public boolean resumeCall(){  ITelephony phone=ITelephony.Stub.asInterface(ServiceManager.checkService("phone"));  try {    if (phone != null && phone.showCallScreen()) {      return true;    }  } catch (  RemoteException e) {  }  return false;}  }
class C{  public int size(){  return theList.size();}  }
class C{  public void color(Color color){}  }
class C{  private static int writeSize(List<? extends OffsettedItem> items){  OffsettedItem first=items.get(0);  return (items.size() * first.writeSize()) + getAlignment(items);}  }
class C{  public void addGlobalsMapping(String from,String to){  globalsMapping.put(from,to);}  }
class C{  int keyCount(Class clazz){  Map map=get(clazz);  int count=map.size();  if (map.containsKey(CONSTRUCTORS_KEY))   count--;  if (map.containsKey(GENERIC_GET_KEY))   count--;  if (map.containsKey(ARGTYPES_KEY))   count--;  return count;}  }
class C{  private void validate(BinaryObject obj,EnumType val){  assertTrue(obj.type().isEnum());  assertEquals(node1.binary().typeId(EnumType.class.getName()),obj.type().typeId());  assertEquals(node2.binary().typeId(EnumType.class.getName()),obj.type().typeId());  assertEquals(val.ordinal(),obj.enumOrdinal());}  }
class C{  public static <T>LazyListX<T> fromIterable(Collector<T,?,List<T>> collector,Iterable<T> it){  if (it instanceof LazyListX)   return (LazyListX<T>)it;  if (it instanceof List)   return new LazyListX<T>((List<T>)it,collector);  return new LazyListX<T>(Flux.fromIterable(it),collector);}  }
class C{  static AttrWait createFromString(final String str) throws BOSHException {  if (str == null) {    return null;  } else {    return new AttrWait(str);  }}  }
class C{  protected void init(){  defineIO();}  }
class C{  public T caseParam(Param object){  return null;}  }
class C{  public double SVMOutput(int index,Instance inst) throws Exception {  double result=0;  if (m_KernelIsLinear) {    if (m_sparseWeights == null) {      int n1=inst.numValues();      for (int p=0; p < n1; p++) {        if (inst.index(p) != m_classIndex) {          result+=m_weights[inst.index(p)] * inst.valueSparse(p);        }      }    } else {      int n1=inst.numValues();      int n2=m_sparseWeights.length;      for (int p1=0, p2=0; p1 < n1 && p2 < n2; ) {        int ind1=inst.index(p1);        int ind2=m_sparseIndices[p2];        if (ind1 == ind2) {          if (ind1 != m_classIndex) {            result+=inst.valueSparse(p1) * m_sparseWeights[p2];          }          p1++;          p2++;        } else         if (ind1 > ind2) {          p2++;        } else {          p1++;        }      }    }  } else {    for (int i=m_supportVectors.getNext(-1); i != -1; i=m_supportVectors.getNext(i)) {      result+=m_class[i] * m_alpha[i] * m_kernel.eval(index,i,inst);    }  }  result-=m_b;  return result;}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public boolean equals(Object o){  if (o == null)   return false;  if (o instanceof ILineSegment) {    ILineSegment ils=(ILineSegment)o;    return start.equals(ils.getStart()) && end.equals(ils.getEnd());  }  return false;}  }
class C{  public static boolean shuffle(Object[] objArray){  if (objArray == null) {    return false;  }  return shuffle(objArray,getRandom(objArray.length));}  }
class C{  public void loading(){  mHintView.setVisibility(View.GONE);  mProgressBar.setVisibility(View.VISIBLE);}  }
class C{  @DSComment("Private Method") @DSSafe(DSCat.GUI) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:20.741 -0500",hash_original_method="705B52B556BB75FCC3E8159D4BF0A627",hash_generated_method="76440539B87D735A9490277AF70C6969") private boolean show(ComponentName componentName,Bundle appSearchData){  if (DBG) {    Log.d(LOG_TAG,"show(" + componentName + ", "+ appSearchData+ ")");  }  SearchManager searchManager=(SearchManager)mContext.getSystemService(Context.SEARCH_SERVICE);  mSearchable=searchManager.getSearchableInfo(componentName);  if (mSearchable == null) {    return false;  }  mLaunchComponent=componentName;  mAppSearchData=appSearchData;  mActivityContext=mSearchable.getActivityContext(getContext());  if (!isShowing()) {    createContentView();    mSearchView.setSearchableInfo(mSearchable);    mSearchView.setAppSearchData(mAppSearchData);    show();  }  updateUI();  return true;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static void write(File file,CharSequence data) throws IOException {  write(file,data,null,false);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:01.100 -0500",hash_original_method="6E4EDFE9C902AE43BD6AF73325E7CB73",hash_generated_method="84C86B608EEF884BB85F344A18F69C9A") public SSLHandshakeException(Throwable cause){  super(cause);}  }
class C{  protected void sequence_TerminalExpression(ISerializationContext context,BooleanLiteral semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,GamlPackage.Literals.EXPRESSION__OP) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,GamlPackage.Literals.EXPRESSION__OP));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getTerminalExpressionAccess().getOpBOOLEANTerminalRuleCall_4_1_0(),semanticObject.getOp());  feeder.finish();}  }
class C{  @Override public Iterator<E> iterator(){  return new PriorityIterator();}  }
class C{  private boolean testSourceTargetDifferent(){  boolean result=false;  String sourceVendor="";  String targetVendor="";  String sourceHost="";  String targetHost="";  String sourcePort="";  String targetPort="";  String sourceName="";  String targetName="";  String sourceCatalog="";  String targetCatalog="";  String sourceSchema="";  String targetSchema="";  if (m_sourceVendor.getSelectedItem() != null)   sourceVendor=m_sourceVendor.getSelectedItem().toString().trim();  if (m_targetVendor.getSelectedItem() != null)   targetVendor=m_targetVendor.getSelectedItem().toString().trim();  if (m_sourceHost.getText() != null)   sourceHost=m_sourceHost.getText().trim();  if (m_targetHost.getText() != null)   targetHost=m_targetHost.getText().trim();  if (m_sourcePort.getText() != null)   sourcePort=m_sourcePort.getText().trim();  if (m_targetPort.getText() != null)   targetPort=m_targetPort.getText().trim();  if (m_sourceName.getSelectedItem() != null)   sourceName=m_sourceName.getSelectedItem().toString().trim();  if (m_targetName.getSelectedItem() != null)   targetName=m_targetName.getSelectedItem().toString().trim();  if (m_sourceCatalog.getSelectedItem() != null)   sourceCatalog=m_sourceCatalog.getSelectedItem().toString().trim();  if (m_targetCatalog.getSelectedItem() != null)   targetCatalog=m_targetCatalog.getSelectedItem().toString().trim();  if (m_sourceSchema.getSelectedItem() != null)   sourceSchema=m_sourceSchema.getSelectedItem().toString().trim();  if (m_targetSchema.getSelectedItem() != null)   targetSchema=m_targetSchema.getSelectedItem().toString().trim();  if (!sourceVendor.equalsIgnoreCase(targetVendor))   result=true; else   if (!sourceHost.equalsIgnoreCase(targetHost))   result=true; else   if (!sourcePort.equalsIgnoreCase(targetPort))   result=true; else   if (!sourceName.equalsIgnoreCase(targetName))   result=true; else   if (!sourceCatalog.equalsIgnoreCase(targetCatalog))   result=true; else   if (!sourceSchema.equalsIgnoreCase(targetSchema))   result=true;  return result;}  }
class C{  protected ScopedClassPool(ClassLoader cl,ClassPool src,ScopedClassPoolRepository repository){  this(cl,src,repository,false);}  }
class C{  public final void timeOfImpact(TOIOutput output,TOIInput input){  ++toiCalls;  output.state=TOIOutputState.UNKNOWN;  output.t=input.tMax;  final DistanceProxy proxyA=input.proxyA;  final DistanceProxy proxyB=input.proxyB;  sweepA.set(input.sweepA);  sweepB.set(input.sweepB);  sweepA.normalize();  sweepB.normalize();  float tMax=input.tMax;  float totalRadius=proxyA.m_radius + proxyB.m_radius;  float target=MathUtils.max(Settings.linearSlop,totalRadius - 3.0f * Settings.linearSlop);  float tolerance=0.25f * Settings.linearSlop;  assert (target > tolerance);  float t1=0f;  int iter=0;  cache.count=0;  distanceInput.proxyA=input.proxyA;  distanceInput.proxyB=input.proxyB;  distanceInput.useRadii=false;  for (; ; ) {    sweepA.getTransform(xfA,t1);    sweepB.getTransform(xfB,t1);    distanceInput.transformA=xfA;    distanceInput.transformB=xfB;    pool.getDistance().distance(distanceOutput,cache,distanceInput);    if (distanceOutput.distance <= 0f) {      output.state=TOIOutputState.OVERLAPPED;      output.t=0f;      break;    }    if (distanceOutput.distance < target + tolerance) {      output.state=TOIOutputState.TOUCHING;      output.t=t1;      break;    }    fcn.initialize(cache,proxyA,sweepA,proxyB,sweepB,t1);    boolean done=false;    float t2=tMax;    int pushBackIter=0;    for (; ; ) {      float s2=fcn.findMinSeparation(indexes,t2);      if (s2 > target + tolerance) {        output.state=TOIOutputState.SEPARATED;        output.t=tMax;        done=true;        break;      }      if (s2 > target - tolerance) {        t1=t2;        break;      }      float s1=fcn.evaluate(indexes[0],indexes[1],t1);      if (s1 < target - tolerance) {        output.state=TOIOutputState.FAILED;        output.t=t1;        done=true;        break;      }      if (s1 <= target + tolerance) {        output.state=TOIOutputState.TOUCHING;        output.t=t1;        done=true;        break;      }      int rootIterCount=0;      float a1=t1, a2=t2;      for (; ; ) {        float t;        if ((rootIterCount & 1) == 1) {          t=a1 + (target - s1) * (a2 - a1) / (s2 - s1);        } else {          t=0.5f * (a1 + a2);        }        float s=fcn.evaluate(indexes[0],indexes[1],t);        if (MathUtils.abs(s - target) < tolerance) {          t2=t;          break;        }        if (s > target) {          a1=t;          s1=s;        } else {          a2=t;          s2=s;        }        ++rootIterCount;        ++toiRootIters;        if (rootIterCount == 50) {          break;        }      }      toiMaxRootIters=MathUtils.max(toiMaxRootIters,rootIterCount);      ++pushBackIter;      if (pushBackIter == Settings.maxPolygonVertices) {        break;      }    }    ++iter;    ++toiIters;    if (done) {      break;    }    if (iter == MAX_ITERATIONS) {      output.state=TOIOutputState.FAILED;      output.t=t1;      break;    }  }  toiMaxIters=MathUtils.max(toiMaxIters,iter);}  }
class C{  private final boolean parkAndCheckInterrupt(){  LockSupport.park(this);  return Thread.interrupted();}  }
class C{  public void buildQuadTreeFromSurvey(String surveyPopulationFolder){  LOG.info("Parse survey population...");  this.surveyPopulation=new ComprehensivePopulationReader();  this.surveyPopulation.parse(surveyPopulationFolder);  LOG.info("Building QuadTree from survey population...");  Counter counter=new Counter("  persons placed # ");  for (  Id<Person> personId : this.surveyPopulation.getScenario().getPopulation().getPersons().keySet()) {    Person person=this.surveyPopulation.getScenario().getPopulation().getPersons().get(personId);    Plan plan=person.createCopyOfSelectedPlanAndMakeSelected();    Coord home=getQtPlanHomeCoordinate(plan);    ObjectAttributes personAttributes=this.surveyPopulation.getScenario().getPopulation().getPersonAttributes();    Object oEmplyment=personAttributes.getAttribute(person.getId().toString(),"employment");    String employment=null;    if (oEmplyment instanceof String) {      employment=(String)oEmplyment;    } else {      LOG.error("Could not get an appropriate String for employment status: person " + person.getId().toString());    }    String a=SaDemographicsEmployment.convertCapeTown2011Employment(employment).toString();    Object oAge=personAttributes.getAttribute(person.getId().toString(),"yearOfBirth");    String age=null;    if (oAge instanceof String) {      age=(String)oAge;    } else {      LOG.error("Could not get an appropriate String for age: person " + person.getId().toString());    }    String ageGroup=PersonEnums.AgeGroup.parseFromBirthYear(age).getDescription();    String b=SaDemographicsAge.getCapeTown2013AgeClass(ageGroup).toString();    String sId=person.getId().toString();    String[] sa=sId.split("_");    Id<Household> hhid=Id.create(sa[0],Household.class);    Household household=surveyPopulation.getScenario().getHouseholds().getHouseholds().get(hhid);    String c=SaDemographicsHouseholdSize.getHouseholdSizeClass(household.getMemberIds().size()).toString();    ObjectAttributes hhAttr=this.surveyPopulation.getScenario().getHouseholds().getHouseholdAttributes();    String incomeString=null;    String class2String=null;    Object oIncome=hhAttr.getAttribute(hhid.toString(),"income");    if (oIncome instanceof String) {      incomeString=(String)oIncome;    } else {      LOG.error("Could not get an appropriate String for monthly income: household " + hhid.toString());    }    Object oClass2=hhAttr.getAttribute(hhid.toString(),"assetClassMethod2");    if (oClass2 instanceof String) {      class2String=(String)oClass2;    } else {      LOG.error("Could not get an appropriate String for asset class 2: household " + hhid.toString());    }    String d=SaDemographicsIncome.convertCapeTown2013Income(incomeString,class2String).toString();    String signature=String.format("%s_%s_%s_%s",a,b,c,d);    if (home != null) {      if (!qtMap.containsKey(signature)) {        qtMap.put(signature,new QuadTree<Plan>(qtExtent[0],qtExtent[1],qtExtent[2],qtExtent[3]));      }      qtMap.get(signature).put(home.getX(),home.getY(),plan);    }    counter.incCounter();  }  counter.printCounter();  LOG.info("Done building QuadTree. Total of " + qtMap.size() + " signature QuadTrees");  for (  String s : qtMap.keySet()) {    LOG.info("  |_ " + s + ": "+ qtMap.get(s).size()+ " observations");  }}  }
class C{  public <T>T read(Class<? extends T> type,InputStream source) throws Exception {  return read(type,source,true);}  }
class C{  public static void resetInstance(@CheckForNull DetectorFactoryCollection instance){synchronized (lock) {    theInstance=instance;  }}  }
class C{  public Label mark(){  Label label=new Label();  mv.visitLabel(label);  return label;}  }
class C{  public AbstractCharList elements(char[] elements){  this.elements=elements;  this.size=elements.length;  return this;}  }
class C{  public void testEndOfMessage(){  SeeedStudioRfidProtocol instance=new SeeedStudioRfidProtocol();  assertEquals(true,instance.endOfMessage(msgStandalone));}  }
class C{  public static Map.Entry<String,Mapping<?>> field(String name,Mapping<?> mapping){  return FrameworkUtils.entry(name,mapping);}  }
class C{  public double calcDamageAllocationUtility(Targetable target,double expectedDamage){  double existingDamage=owner.getDamageAlreadyAssigned(target);  int targetHP=Compute.getTargetTotalHP(owner.getGame(),target);  double damageFraction=(existingDamage + expectedDamage) / ((double)targetHP);  double previousDamageFraction=existingDamage / ((double)targetHP);  if (previousDamageFraction >= 1.0) {    return 100;  } else   if (damageFraction < 0.5 || target.getTargetType() == Targetable.TYPE_BUILDING || owner.getGame().getEntity(target.getTargetId()) instanceof Infantry || owner.getGame().getEntity(target.getTargetId()) instanceof BattleArmor) {    return 0;  }  return damageFraction;}  }
class C{  public void addLineTag(SourceLocationTag tag){  if (!lines.contains(tag))   lines.add(tag);}  }
class C{  public X509CRLEntryImpl(byte[] revokedCert) throws CRLException {  try {    parse(new DerValue(revokedCert));  } catch (  IOException e) {    this.revokedCert=null;    throw new CRLException("Parsing error: " + e.toString());  }}  }
class C{  public static File downloadFileFrom(Release release) throws IOException {  File file=new File(NamingUtils.buildNameFrom(release));  if (!file.exists()) {    obtainNewJarFrom(release,file);  }  return file;}  }
class C{  public EnterStateItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  protected String normalizePath(String path){  if (StringUtils.isEmpty(path)) {    return path;  }  path=UrlUtil.decode(path);  path=sanitizeDotsAndSlashes(path);  return UrlUtil.encode(path);}  }
class C{  public TomcatServiceBuilder hostname(String hostname){  this.hostname=validateHostname(hostname);  return this;}  }
class C{  public BasicDependencyContainer remove(Dependency dependency){  if (dependency == this)   throw new IllegalArgumentException("Can't remove self as a dependency.");  _dependencyList.remove(dependency);  return this;}  }
class C{  public boolean equals(XObject obj2){  int t=obj2.getType();  try {    if (t == XObject.CLASS_NODESET)     return obj2.equals(this); else     if (t == XObject.CLASS_BOOLEAN)     return obj2.bool() == bool(); else     return m_val == obj2.num();  } catch (  javax.xml.transform.TransformerException te) {    throw new org.apache.xml.utils.WrappedRuntimeException(te);  }}  }
class C{  public ODataClient(String url,String username,String password) throws URISyntaxException, IOException, ODataException {  this.username=username;  this.password=password;  URI uri=new URI(url);  String metadata="/$metadata";  URI svc=null;  Edm edm=null;  String[] pathSegments=uri.getPath().split("/");  StringBuilder sb=new StringBuilder();  for (int i=1; i < pathSegments.length; i++) {    sb.append('/').append(pathSegments[i]).append(metadata);    svc=new URI(uri.getScheme(),uri.getAuthority(),sb.toString(),null,null);    sb.delete(sb.length() - metadata.length(),sb.length());    try {      InputStream content=execute(svc.toString(),ContentType.APPLICATION_XML,"GET");      edm=EntityProvider.readMetadata(content,false);      svc=new URI(uri.getScheme(),uri.getAuthority(),sb.toString(),null,null);      break;    } catch (    HttpException|EntityProviderException e) {      LOGGER.debug("URL not root " + svc,e);    }  }  if (svc == null || edm == null)   throw new ODataException("No service found at " + url);  this.serviceRoot=svc;  this.serviceEDM=edm;  this.uriParser=RuntimeDelegate.getUriParser(edm);}  }
class C{  public ApplicationExceptionBean(ApplicationExceptionBean template){  setId(template.getId());  setCauseStackTrace(template.getCauseStackTrace());  setMessageKey(template.getMessageKey());  setMessageParams(template.getMessageParams());}  }
class C{  private Bitmap scaleBitmap(Bitmap bitmap,int maxWidth,int maxHeight){  if (bitmap == null) {    return null;  }  float scaleX=1.0f;  float scaleY=1.0f;  if (bitmap.getWidth() > maxWidth) {    scaleX=maxWidth / (float)bitmap.getWidth();  }  if (bitmap.getHeight() > maxHeight) {    scaleY=maxHeight / (float)bitmap.getHeight();  }  float scale=Math.min(scaleX,scaleY);  int width=(int)(bitmap.getWidth() * scale);  int height=(int)(bitmap.getHeight() * scale);  return Bitmap.createScaledBitmap(bitmap,width,height,false);}  }
class C{  public boolean isRelationTableExist(){  return relationTableExist;}  }
class C{  public EnvironmentClassLoader classLoader(){  return _systemManager.getClassLoader();}  }
class C{  int fillWindow(CursorWindow window,int startPos,int requiredPos,boolean countAllRows){  acquireReference();  try {    window.acquireReference();    try {      int numRows=getSession().executeForCursorWindow(getSql(),getBindArgs(),window,startPos,requiredPos,countAllRows,getConnectionFlags(),mCancellationSignal);      return numRows;    } catch (    SQLiteDatabaseCorruptException ex) {      onCorruption();      throw ex;    }catch (    SQLiteException ex) {      Log.e(TAG,"exception: " + ex.getMessage() + "; query: "+ getSql());      throw ex;    } finally {      window.releaseReference();    }  }  finally {    releaseReference();  }}  }
class C{  public InputSource resolveEntity(String publicId,String systemId) throws SAXException {  if (publicId != null) {    publicId=publicId.toUpperCase(Locale.ENGLISH);  }  if (systemId != null) {    systemId=systemId.toUpperCase(Locale.ENGLISH);  }  InputSource source=null;  try {    String path=doctypeMap.get(publicId);    source=getInputSource(path);    if (source == null) {      path=doctypeMap.get(systemId);      source=getInputSource(path);    }  } catch (  Exception e) {    throw new SAXException(e.toString());  }  return source;}  }
class C{  public BufferedFileChannel(SageFileChannel fileChannel,ByteBuffer readBuffer,ByteBuffer writeBuffer){  readonly=fileChannel.isReadOnly();  this.fileChannel=fileChannel;  this.readBuffer=readBuffer;  readBuffer.clear().limit(0);  if (writeBuffer == null) {    if (!fileChannel.isReadOnly())     throw new InvalidParameterException("The channel is writable and a writable byte buffer was not provided.");    this.writeBuffer=empty;  } else {    this.writeBuffer=writeBuffer;    this.writeBuffer.clear();  }  realFilePosition=fileChannel.position();}  }
class C{  public static void main(String[] args) throws IOException {  new QueryExample1().displayItems();}  }
class C{  private void updateMinMax(Instance instance){  try {    for (int j=0; j < instance.numValues(); j++) {      if ((instance.attributeSparse(j).isNumeric()) && (!instance.isMissingSparse(j))) {        if (Double.isNaN(m_minArray[instance.index(j)])) {          m_minArray[instance.index(j)]=instance.valueSparse(j);          m_maxArray[instance.index(j)]=instance.valueSparse(j);        } else {          if (instance.valueSparse(j) < m_minArray[instance.index(j)]) {            m_minArray[instance.index(j)]=instance.valueSparse(j);          } else {            if (instance.valueSparse(j) > m_maxArray[instance.index(j)]) {              m_maxArray[instance.index(j)]=instance.valueSparse(j);            }          }        }      }    }  } catch (  Exception ex) {    System.err.println(ex);    ex.printStackTrace();  }}  }
class C{  public void normalize(){  double sum=0;  for (  double d : probabilities)   sum+=d;  if (sum != 0)   divideConst(sum);}  }
class C{  public static String join(Object[] self,String separator){  StringBuilder buffer=new StringBuilder();  boolean first=true;  if (separator == null)   separator="";  for (  Object next : self) {    String value=InvokerHelper.toString(next);    if (first) {      first=false;    } else {      buffer.append(separator);    }    buffer.append(value);  }  return buffer.toString();}  }
class C{  public KeyedSlot(final String name){  super(name,name);}  }
class C{  public VPFFeatureLayer(String name){  this();  setName(name);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public SWFText tagDefineText(int id,Rect bounds,Matrix matrix) throws IOException {  return new TextDumper();}  }
class C{  private void verifyListConsistency(List<? extends BaseVO> voList,List<? extends DomainObject<?>> doList) throws ConcurrentModificationException {  Map<Long,DomainObject<?>> keyToDomainObject=new HashMap<Long,DomainObject<?>>();  for (  DomainObject<?> domainObject : doList) {    keyToDomainObject.put(Long.valueOf(domainObject.getKey()),domainObject);  }  for (  BaseVO valueObject : voList) {    DomainObject<?> correspondingDomainObject=keyToDomainObject.remove(Long.valueOf(valueObject.getKey()));    if (correspondingDomainObject != null) {      BaseAssembler.verifyVersionAndKey(correspondingDomainObject,valueObject);    }  }  if (!keyToDomainObject.isEmpty()) {    ConcurrentModificationException cme=new ConcurrentModificationException(String.format("Technical service has changed, object '%s' was not contained in input, but potentially added in meantime.",keyToDomainObject.values().iterator().next()));    DomainObject<?> object=keyToDomainObject.values().iterator().next();    logger.logWarn(Log4jLogger.SYSTEM_LOG,cme,LogMessageIdentifier.WARN_OBJECT_CREATED_CONCURRENTLY,(object == null ? "" : object.getClass().getSimpleName()));    throw cme;  }}  }
class C{  public static void initialize(Class<?>... classes){  for (  Class<?> clazz : classes) {    try {      Class.forName(clazz.getName(),true,clazz.getClassLoader());    } catch (    ClassNotFoundException e) {      throw new AssertionError(e);    }  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case InformationModelPackage.FUNCTIONBLOCK_PROPERTY__NAME:    return getName();case InformationModelPackage.FUNCTIONBLOCK_PROPERTY__DESCRIPTION:  return getDescription();case InformationModelPackage.FUNCTIONBLOCK_PROPERTY__TYPE:if (resolve) return getType();return basicGetType();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private ConstantExpression(double value,String name){  if (name == null) {    throw new NullPointerException("name was null.");  }  this.value=value;  this.name=name;}  }
class C{  protected void cancelled(){  ctx.close();}  }
class C{  public SuggestIndexSearcher(IndexReader reader){  super(reader);}  }
class C{  public Range<C> to(C to){  Objects.requireNonNull(to);  this.to=to;  toIncluded=true;  return this;}  }
class C{  public boolean hasFullName(){  return hasExtension(FullName.class);}  }
class C{  public Rectangle(){  size=new Dimension();}  }
class C{  public static Sentence eliminate(Sentence sentence){  ImplicationElimination eliminator=new ImplicationElimination();  Sentence result=sentence.accept(eliminator,null);  return result;}  }
class C{  public UserProfilesImpl(){  list=new ArrayList();}  }
class C{  public static String[] tokenizeToStringArray(String str,String delimiters,boolean trimTokens,boolean ignoreEmptyTokens){  if (str == null) {    return null;  }  StringTokenizer st=new StringTokenizer(str,delimiters);  List<String> tokens=new ArrayList<>();  while (st.hasMoreTokens()) {    String token=st.nextToken();    if (trimTokens) {      token=token.trim();    }    if (!ignoreEmptyTokens || token.length() > 0) {      tokens.add(token);    }  }  return toStringArray(tokens);}  }
class C{  LocoNetMessage createPacket(String s){  byte b[]=StringUtil.bytesFromHexString(s);  if (b.length == 0) {    return null;  }  LocoNetMessage m=new LocoNetMessage(b.length);  for (int i=0; i < b.length; i++) {    m.setElement(i,b[i]);  }  return m;}  }
class C{  private Shapes(){}  }
class C{  public ParseResult filter(Content content,ParseResult parseResult,HTMLMetaTags metaTags,DocumentFragment doc){  String lang=null;  Parse parse=parseResult.get(content.getUrl());  if (detect >= 0 && identify < 0) {    lang=detectLanguage(parse,doc);  } else   if (detect < 0 && identify >= 0) {    lang=identifyLanguage(parse);  } else   if (detect < identify) {    lang=detectLanguage(parse,doc);    if (lang == null) {      lang=identifyLanguage(parse);    }  } else   if (identify < detect) {    lang=identifyLanguage(parse);    if (lang == null) {      lang=detectLanguage(parse,doc);    }  } else {    LOG.warn("No configuration for language extraction policy is provided");    return parseResult;  }  if (lang != null) {    parse.getData().getParseMeta().set(Metadata.LANGUAGE,lang);    return parseResult;  }  return parseResult;}  }
class C{  public void stderrShouldNotMatch(String pattern){  Matcher matcher=Pattern.compile(pattern,Pattern.MULTILINE).matcher(stderr);  if (matcher.find()) {    reportDiagnosticSummary();    throw new RuntimeException("'" + pattern + "' found in stderr \n");  }}  }
class C{  private void clearHotspots(){  if (mRipple != null) {    mRipple.end();    mRipple=null;    mRippleActive=false;  }  if (mBackground != null) {    mBackground.end();    mBackground=null;    mBackgroundActive=false;  }  cancelExitingRipples();}  }
class C{  public void clear(){  vectors.clear();  pathPoints.clear();  start=null;  end=null;  startTri=null;  lastPointAdded=null;  lastEdge=null;}  }
class C{  public void endExtractInterval(){  endMillis=System.currentTimeMillis();  totalExtractMillis+=(endMillis - intervalStartMillis);  state=TaskState.other;}  }
class C{  protected String streamToString(InputStream in,String charset) throws IOException {  InputStreamReader reader=new InputStreamReader(in,charset);  StringBuilder buffer=new StringBuilder();  char[] chars=new char[1024];  int n;  while ((n=reader.read(chars,0,chars.length)) != -1) {    buffer.append(chars,0,n);  }  return buffer.toString();}  }
class C{  private void init(){  if (_parent != null) {    _serializerFiles.addAll(_parent._serializerFiles);    _deserializerFiles.addAll(_parent._deserializerFiles);    _serializerClassMap.putAll(_parent._serializerClassMap);    _deserializerClassMap.putAll(_parent._deserializerClassMap);  }  if (_parent == null) {    _serializerClassMap.putAll(_staticSerializerMap);    _deserializerClassMap.putAll(_staticDeserializerMap);    _deserializerClassNameMap.putAll(_staticClassNameMap);  }  HashMap<Class,Class> classMap;  classMap=new HashMap<Class,Class>();  initSerializerFiles("META-INF/hessian/serializers",_serializerFiles,classMap,Serializer.class);  for (  Map.Entry<Class,Class> entry : classMap.entrySet()) {    try {      Serializer ser=(Serializer)entry.getValue().newInstance();      if (entry.getKey().isInterface())       _serializerInterfaceMap.put(entry.getKey(),ser); else       _serializerClassMap.put(entry.getKey().getName(),ser);    } catch (    Exception e) {      throw new HessianException(e);    }  }  classMap=new HashMap<Class,Class>();  initSerializerFiles("META-INF/hessian/deserializers",_deserializerFiles,classMap,Deserializer.class);  for (  Map.Entry<Class,Class> entry : classMap.entrySet()) {    try {      Deserializer ser=(Deserializer)entry.getValue().newInstance();      if (entry.getKey().isInterface())       _deserializerInterfaceMap.put(entry.getKey(),ser); else {        _deserializerClassMap.put(entry.getKey().getName(),ser);      }    } catch (    Exception e) {      throw new HessianException(e);    }  }}  }
class C{  public static Map<String,DocumentPartitioner> removeDocumentPartitioners(Document document){  Map<String,DocumentPartitioner> partitioners=new HashMap<String,DocumentPartitioner>();  String[] partitionings=document.getPartitionings();  for (int i=0; i < partitionings.length; i++) {    DocumentPartitioner partitioner=document.getDocumentPartitioner(partitionings[i]);    if (partitioner != null) {      document.setDocumentPartitioner(partitionings[i],null);      partitioner.disconnect();      partitioners.put(partitionings[i],partitioner);    }  }  return partitioners;}  }
class C{  public NodesStatsRequest os(boolean os){  this.os=os;  return this;}  }
class C{  @Override public void pause(boolean toPause){  paused=toPause;}  }
class C{  @Override public boolean isPoolSequenceIdValid(){  return _poolSequenceId == _pool.getStartSequenceId();}  }
class C{  public static int hash(int aSeed,Object aObject){  int result=aSeed;  if (aObject == null) {    result=hash(result,0);  } else   if (!isArray(aObject)) {    result=hash(result,aObject.hashCode());  } else {    int length=Array.getLength(aObject);    for (int idx=0; idx < length; ++idx) {      Object item=Array.get(aObject,idx);      result=hash(result,item);    }  }  return result;}  }
class C{  protected void sendSelfCancellationPatch(T task,String cancellationMessage){  sendSelfPatch(task,TaskState.TaskStage.CANCELLED,null);}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public OpenStackConnectionException(String message){  super(message);}  }
class C{  private ComplianceFeature checkAppRestrictionPolicy(org.wso2.emm.agent.beans.Operation operation) throws AndroidAgentException {  AppRestriction appRestriction=CommonUtils.getAppRestrictionTypeAndList(operation,null,null);  List<String> installedAppPackages=CommonUtils.getInstalledAppPackages(context);  String ownershipType=Preference.getString(context,Constants.DEVICE_TYPE);  if (Constants.OWNERSHIP_COPE.equals(ownershipType)) {    if (Constants.AppRestriction.BLACK_LIST.equals(appRestriction.getRestrictionType())) {      List<String> commonApps=new ArrayList<>(installedAppPackages);      if (commonApps.retainAll(appRestriction.getRestrictedList())) {        if (commonApps.size() > 0) {          policy.setCompliance(false);          policy.setMessage(commonApps.toString());          return policy;        }      }    } else     if (Constants.AppRestriction.WHITE_LIST.equals(appRestriction.getRestrictionType())) {      List<String> installedAppPackagesByUser=CommonUtils.getInstalledAppPackagesByUser(context);      List<String> remainApps=new ArrayList<>(installedAppPackagesByUser);      remainApps.remove(Constants.AGENT_PACKAGE);      remainApps.remove(Constants.SYSTEM_SERVICE_PACKAGE);      remainApps.removeAll(appRestriction.getRestrictedList());      if (remainApps.size() > 0) {        policy.setCompliance(false);        policy.setMessage(remainApps.toString());        return policy;      }    }    policy.setCompliance(true);    return policy;  } else   if (Constants.OWNERSHIP_BYOD.equals(ownershipType)) {    if (Constants.AppRestriction.BLACK_LIST.equals(appRestriction.getRestrictionType())) {      List<String> commonApps=new ArrayList<>(installedAppPackages);      if (commonApps.retainAll(appRestriction.getRestrictedList())) {        if (commonApps.size() > 0) {          policy.setCompliance(false);          return policy;        }      }    } else     if (Constants.AppRestriction.WHITE_LIST.equals(appRestriction.getRestrictionType())) {      List<String> remainApps=new ArrayList<>(installedAppPackages);      remainApps.removeAll(appRestriction.getRestrictedList());      if (remainApps.size() > 0) {        policy.setCompliance(false);        return policy;      }    }    policy.setCompliance(true);    return policy;  }  policy.setCompliance(true);  return policy;}  }
class C{  @Override public void resetRequestForOperationCancel(){  requestForOperationCancel=false;}  }
class C{  public void deleteAllCloudFilesForUser(){  if (CloudPersona.getCurrentPersona().getToken() == null) {    return;  }  ConnectionRequest req=new ConnectionRequest();  req.setPost(false);  req.setFailSilently(true);  req.setUrl(SERVER_URL + "/purgeCloudFiles");  req.addArgument("own",CloudPersona.getCurrentPersona().getToken());  req.addArgument("u",Display.getInstance().getProperty("built_by_user",""));  NetworkManager.getInstance().addToQueue(req);}  }
class C{  public static MenuSelectionManager defaultManager(){synchronized (MENU_SELECTION_MANAGER_KEY) {    AppContext context=AppContext.getAppContext();    MenuSelectionManager msm=(MenuSelectionManager)context.get(MENU_SELECTION_MANAGER_KEY);    if (msm == null) {      msm=new MenuSelectionManager();      context.put(MENU_SELECTION_MANAGER_KEY,msm);      Object o=context.get(SwingUtilities2.MENU_SELECTION_MANAGER_LISTENER_KEY);      if (o != null && o instanceof ChangeListener) {        msm.addChangeListener((ChangeListener)o);      }    }    return msm;  }}  }
class C{  public TypeRef createSimplifiedUnion(List<TypeRef> typeRefs,Resource resource){  if (typeRefs.size() > 1 && resource != null) {    return tsh.createUnionType(RuleEnvironmentExtensions.newRuleEnvironment(resource),typeRefs.toArray(new TypeRef[typeRefs.size()]));  } else   if (typeRefs.size() == 1) {    return TypeUtils.copyIfContained(typeRefs.get(0));  } else {    return null;  }}  }
class C{  public static String escapeForRegExPattern(String string){  StringBuffer pattern=new StringBuffer(string.length() + 16);  int length=string.length();  for (int i=0; i < length; i++) {    char ch=string.charAt(i);switch (ch) {case '\\':case '(':case ')':case '[':case ']':case '{':case '}':case '.':case '?':case '*':case '+':case '|':case '^':case '$':      pattern.append('\\').append(ch);    break;case '\r':  if (i + 1 < length && string.charAt(i + 1) == '\n')   i++;break;case '\n':pattern.append("\\R");break;case '\t':pattern.append("\\t");break;case '\f':pattern.append("\\f");break;case 0x07:pattern.append("\\a");break;case 0x1B:pattern.append("\\e");break;default :if (0 <= ch && ch < 0x20) {pattern.append("\\x");pattern.append(Integer.toHexString(ch).toUpperCase());} else {pattern.append(ch);}}}return pattern.toString();}  }
class C{  public XPathException(String message){  super(message);  if (message == null) {    throw new NullPointerException("message == null");  }  this.cause=null;}  }
class C{  @Override public FunctionScoreQueryBuilder boost(float boost){  this.boost=boost;  return this;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (Sage.EMBEDDED) {    try {      String eth0Info=IOUtils.exec(new String[]{"route"});      java.util.StringTokenizer toker=new java.util.StringTokenizer(eth0Info,"\r\n");      while (toker.hasMoreTokens()) {        String currToke=toker.nextToken();        if (currToke.startsWith("default") && currToke.indexOf(Sage.getBoolean("UseWireless",false) ? Sage.get("WirelessInterface","ra0") : Sage.get("NetworkInterface","eth0")) != -1) {          toker=new java.util.StringTokenizer(currToke," \t");          toker.nextToken();          return toker.nextToken();        }      }    } catch (    Throwable e) {      System.out.println("ERROR:" + e);    }  }  return "0.0.0.0";}  }
class C{  @GET @Path("authenticate") public Response authenticate(@Context UriInfo uriInfo) throws OAuthAuthenticationException {  final OAuthAuthenticator oauth=getAuthenticator(uriInfo.getQueryParameters().getFirst("oauth_provider"));  final URL requestUrl=getRequestUrl(uriInfo);  final String authUrl=oauth.getAuthenticateUrl(requestUrl);  return Response.temporaryRedirect(URI.create(authUrl)).build();}  }
class C{  public void onlySamples(String... samples){  mOnlySample=Arrays.asList(samples);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static void rollbackProtectionOnVolume(Volume volume,VirtualPool oldVpool,DbClient dbClient){  if (volume.checkForRp()) {    if (!VirtualPool.vPoolSpecifiesProtection(oldVpool)) {      _log.info(String.format("Start rollback of RP protection changes for volume [%s] (%s)...",volume.getLabel(),volume.getId()));      List<String> protectionSetVolumeIdsToRemove=new ArrayList<String>();      protectionSetVolumeIdsToRemove.add(volume.getId().toString());      List<Volume> cgSourceVolumes=getCgSourceVolumes(volume.getConsistencyGroup(),dbClient);      boolean lastSourceVolumeInCG=(cgSourceVolumes != null && cgSourceVolumes.size() == 1 && cgSourceVolumes.get(0).getId().equals(volume.getId()));      if (lastSourceVolumeInCG) {        List<Volume> journals=getCgVolumes(dbClient,volume.getConsistencyGroup(),Volume.PersonalityTypes.METADATA.name());        for (        Volume journal : journals) {          _log.info(String.format("Rolling back RP Journal (%s)",journal.getLabel()));          protectionSetVolumeIdsToRemove.add(journal.getId().toString());          rollbackVolume(journal.getId(),dbClient);        }      }      volume.setConsistencyGroup(NullColumnValueGetter.getNullURI());      volume.setPersonality(NullColumnValueGetter.getNullStr());      volume.setProtectionController(NullColumnValueGetter.getNullURI());      volume.setRSetName(NullColumnValueGetter.getNullStr());      volume.setInternalSiteName(NullColumnValueGetter.getNullStr());      volume.setRpCopyName(NullColumnValueGetter.getNullStr());      StringSet resetRpTargets=volume.getRpTargets();      if (resetRpTargets != null) {        for (        String rpTargetId : resetRpTargets) {          protectionSetVolumeIdsToRemove.add(rpTargetId);          rollbackVolume(URI.create(rpTargetId),dbClient);        }        resetRpTargets.clear();        volume.setRpTargets(resetRpTargets);      }      if (!NullColumnValueGetter.isNullNamedURI(volume.getProtectionSet())) {        ProtectionSet protectionSet=dbClient.queryObject(ProtectionSet.class,volume.getProtectionSet());        if (protectionSet != null) {          protectionSet.getVolumes().removeAll(protectionSetVolumeIdsToRemove);          _log.info(String.format("Removing the following volumes from Protection Set [%s] (%s): %s",protectionSet.getLabel(),protectionSet.getId(),Joiner.on(',').join(protectionSetVolumeIdsToRemove)));          if (lastSourceVolumeInCG) {            _log.info(String.format("Setting Protection Set [%s] (%s) to inactive",protectionSet.getLabel(),protectionSet.getId()));            protectionSet.setInactive(true);          }          dbClient.updateObject(protectionSet);        }      }      volume.setProtectionSet(NullColumnValueGetter.getNullNamedURI());    } else {      _log.info(String.format("Rollback changes for existing protected RP volume [%s]...",volume.getLabel()));    }    if (RPHelper.isVPlexVolume(volume,dbClient)) {      if (null == volume.getAssociatedVolumes()) {        _log.warn("VPLEX volume {} has no backend volumes.",volume.forDisplay());      } else {        for (        String associatedVolId : volume.getAssociatedVolumes()) {          Volume associatedVolume=dbClient.queryObject(Volume.class,URI.create(associatedVolId));          if (associatedVolume != null && !associatedVolume.getInactive()) {            if (!NullColumnValueGetter.isNullURI(associatedVolume.getVirtualPool()) && associatedVolume.getVirtualPool().equals(volume.getVirtualPool())) {              associatedVolume.setVirtualPool(oldVpool.getId());              _log.info(String.format("Backing volume [%s] has had its virtual pool rolled back to [%s].",associatedVolume.getLabel(),oldVpool.getLabel()));            }            associatedVolume.setConsistencyGroup(NullColumnValueGetter.getNullURI());            dbClient.updateObject(associatedVolume);          }          if (!oldVpool.getMultivolumeConsistency()) {            associatedVolume.setConsistencyGroup(NullColumnValueGetter.getNullURI());          }          dbClient.updateObject(associatedVolume);        }      }    }    _log.info(String.format("Resetting vpool on volume [%s](%s) from (%s) back to its original vpool (%s)",volume.getLabel(),volume.getId(),volume.getVirtualPool(),oldVpool.getId()));    volume.setVirtualPool(oldVpool.getId());    dbClient.updateObject(volume);    _log.info(String.format("Rollback of RP protection changes for volume [%s] (%s) has completed.",volume.getLabel(),volume.getId()));  }}  }
class C{  public void init(boolean forEncryption,CipherParameters params){  if (!(params instanceof ParametersWithIV)) {    throw new IllegalArgumentException(getAlgorithmName() + " Init parameters must include an IV");  }  ParametersWithIV ivParams=(ParametersWithIV)params;  byte[] iv=ivParams.getIV();  if (iv == null || iv.length != getNonceSize()) {    throw new IllegalArgumentException(getAlgorithmName() + " requires exactly " + getNonceSize()+ " bytes of IV");  }  CipherParameters keyParam=ivParams.getParameters();  if (keyParam == null) {    if (!initialised) {      throw new IllegalStateException(getAlgorithmName() + " KeyParameter can not be null for first initialisation");    }    setKey(null,iv);  } else   if (keyParam instanceof KeyParameter) {    setKey(((KeyParameter)keyParam).getKey(),iv);  } else {    throw new IllegalArgumentException(getAlgorithmName() + " Init parameters must contain a KeyParameter (or null for re-init)");  }  reset();  initialised=true;}  }
class C{  public DialogFile(Communicator host){  this.setLayout(new BoxLayout(this,BoxLayout.Y_AXIS));  this.setMaximumSize(new Dimension(2500,50));  this.setPreferredSize(new Dimension(350,50));  hostDialog=host;  resourcesDirectory=hostDialog.getResourcesDirectory();  pathSep=File.separator;  graphicsDirectory=resourcesDirectory + "Images" + pathSep;  workingDirectory=hostDialog.getWorkingDirectory();}  }
class C{  public static long toLong(byte[] macAddress){  return MacAddress.of(macAddress).getLong();}  }
class C{  public synchronized static void removeExtensionInstallationProvider(ExtensionInstallationProvider eip){  providers.remove(eip);}  }
class C{  private void open(String urlString){  RMUrlHandler.openInBrowser(urlString);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:37.666 -0500",hash_original_method="1D737A935EF21FF08B15C0F0950C4FF6",hash_generated_method="C5D04284015278F1AA31C6B17625F949") @Override protected URLConnection openConnection(URL url,Proxy proxy) throws IOException {  if (url == null || proxy == null) {    throw new IllegalArgumentException("url == null || proxy == null");  }  return new FtpURLConnection(url,proxy);}  }
class C{  public boolean isMultisite(){  return listSites().size() > 1;}  }
class C{  private void processJournal() throws IOException {  deleteIfExists(journalFileTmp);  for (Iterator<Entry> i=lruEntries.values().iterator(); i.hasNext(); ) {    Entry entry=i.next();    if (entry.currentEditor == null) {      for (int t=0; t < valueCount; t++) {        size+=entry.lengths[t];        fileCount++;      }    } else {      entry.currentEditor=null;      for (int t=0; t < valueCount; t++) {        deleteIfExists(entry.getCleanFile(t));        deleteIfExists(entry.getDirtyFile(t));      }      i.remove();    }  }}  }
class C{  private ODGConstants(){}  }
class C{  protected Layer createFromLayerDocument(Element domElement,AVList params){  String className=WWXML.getText(domElement,"@className");  if (className != null && className.length() > 0) {    Layer layer=(Layer)WorldWind.createComponent(className);    String actuate=WWXML.getText(domElement,"@actuate");    layer.setEnabled(WWUtil.isEmpty(actuate) || actuate.equals("onLoad"));    WWXML.invokePropertySetters(layer,domElement);    return layer;  }  AVList props=WWXML.copyProperties(domElement,null);  if (props != null) {    if (params != null)     props.setValues(params);    params=props;  }  Layer layer;  String href=WWXML.getText(domElement,"@href");  if (href != null && href.length() > 0) {    Object o=this.createFromConfigSource(href,params);    if (o == null)     return null;    if (!(o instanceof Layer)) {      String msg=Logging.getMessage("LayerFactory.UnexpectedTypeForLayer",o.getClass().getName());      throw new WWRuntimeException(msg);    }    layer=(Layer)o;  } else {    String layerType=WWXML.getText(domElement,"@layerType");    if (layerType != null && layerType.equals("TiledImageLayer")) {      layer=this.createTiledImageLayer(domElement,params);    } else     if (layerType != null && layerType.equals("ShapefileLayer")) {      layer=this.createShapefileLayer(domElement,params);    } else {      String msg=Logging.getMessage("generic.UnrecognizedLayerType",layerType);      throw new WWUnrecognizedException(msg);    }  }  if (layer != null) {    String actuate=WWXML.getText(domElement,"@actuate");    layer.setEnabled(actuate != null && actuate.equals("onLoad"));    WWXML.invokePropertySetters(layer,domElement);  }  return layer;}  }
class C{  private void parseToken(String token){  int len=token.length();  for (int i=0; i < len; i++) {    int chr=sr.read();    if (chr == -1) {      throw new IllegalArgumentException("EOF reached while reading token: " + token);    }    chr=Character.toLowerCase((char)chr);    int loTokenChar=token.charAt(i);    if (loTokenChar != chr) {      throw new IllegalArgumentException("Expected token: " + token + " at position "+ sr.getPosition());    }  }}  }
class C{  @Override protected void propagateProxyDown(MySQLConnection proxyConn){  for (  MySQLConnection c : this.liveConnections.values()) {    c.setProxy(proxyConn);  }}  }
class C{  public void onSizeChanged(float width,float height){  if (mWidth == width && mHeight == height)   return;  boolean widthChanged=mWidth != width;  mWidth=width;  mHeight=height;  for (int i=0; i < mStripTabs.length; i++) {    mStripTabs[i].setHeight(mHeight);  }  if (widthChanged)   computeAndUpdateTabWidth(false);  if (mStripTabs.length > 0)   mUpdateHost.requestUpdate();  mTabMenu.dismiss();}  }
class C{  public static double[] HPDInterval(double proportion,double[] x,int[] indices){  double minRange=Double.MAX_VALUE;  int hpdIndex=0;  final int diff=(int)Math.round(proportion * (double)x.length);  for (int i=0; i <= (x.length - diff); i++) {    final double minValue=x[indices[i]];    final double maxValue=x[indices[i + diff - 1]];    final double range=Math.abs(maxValue - minValue);    if (range < minRange) {      minRange=range;      hpdIndex=i;    }  }  return new double[]{x[indices[hpdIndex]],x[indices[hpdIndex + diff - 1]]};}  }
class C{  private ArrayList<VORoleDefinition> defineRoleDefinitionsForPM(VOServiceDetails productDetails,int amount){  List<VORoleDefinition> roleDefinitions=productDetails.getTechnicalService().getRoleDefinitions();  Assert.assertEquals(2,roleDefinitions.size());  VORoleDefinition roleDefinition1=roleDefinitions.get(0);  VORoleDefinition roleDefinition2=roleDefinitions.get(1);  ArrayList<VORoleDefinition> roleDefs=new ArrayList<>();  roleDefs.add(roleDefinition1);  if (amount == 2) {    roleDefs.add(roleDefinition2);  }  return roleDefs;}  }
class C{  boolean expect(int c) throws IOException {  if (ch != c) {    char str[]={(char)c};    error("expected","'" + new String(str) + "'");    return false;  }  ch=in.read();  return true;}  }
class C{  @SuppressWarnings("unchecked") public static <T extends java.lang.Comparable<? super T>>void sort(List<T> list){  Object[] array=list.toArray();  Arrays.sort(array);  int i=0;  ListIterator<T> it=list.listIterator();  while (it.hasNext()) {    it.next();    it.set((T)array[i++]);  }}  }
class C{  public void not(int size,Register dst,Register src){  super.orn(size,dst,zr,src,ShiftType.LSL,0);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case FunctionblockPackage.RETURN_PRIMITIVE_TYPE__RETURN_TYPE:    return returnType != RETURN_TYPE_EDEFAULT;case FunctionblockPackage.RETURN_PRIMITIVE_TYPE__CONSTRAINT_RULE:  return constraintRule != null;}return super.eIsSet(featureID);}  }
class C{  public boolean accepts(String TenderType,String CreditCardType){  if ((MPayment.TENDERTYPE_DirectDeposit.equals(TenderType) && isAcceptDirectDeposit()) || (MPayment.TENDERTYPE_DirectDebit.equals(TenderType) && isAcceptDirectDebit()) || (MPayment.TENDERTYPE_Check.equals(TenderType) && isAcceptCheck())|| (MPayment.CREDITCARDTYPE_ATM.equals(CreditCardType) && isAcceptATM())|| (MPayment.CREDITCARDTYPE_Amex.equals(CreditCardType) && isAcceptAMEX())|| (MPayment.CREDITCARDTYPE_PurchaseCard.equals(CreditCardType) && isAcceptCorporate())|| (MPayment.CREDITCARDTYPE_Diners.equals(CreditCardType) && isAcceptDiners())|| (MPayment.CREDITCARDTYPE_Discover.equals(CreditCardType) && isAcceptDiscover())|| (MPayment.CREDITCARDTYPE_MasterCard.equals(CreditCardType) && isAcceptMC())|| (MPayment.CREDITCARDTYPE_Visa.equals(CreditCardType) && isAcceptVisa()))   return true;  return false;}  }
class C{  @Override public boolean test(T first,T second){  final AtomicReferenceArray<Object> buffer=producerArray;  final long p=producerIndex;  final int m=mask;  int pi=(int)(p + 2) & m;  if (null == buffer.get(pi)) {    pi=(int)p & m;    buffer.lazySet(pi + 1,second);    buffer.lazySet(pi,first);    PRODUCER_INDEX.lazySet(this,p + 2);  } else {    final int capacity=buffer.length();    final AtomicReferenceArray<Object> newBuffer=new AtomicReferenceArray<>(capacity);    producerArray=newBuffer;    pi=(int)p & m;    newBuffer.lazySet(pi + 1,second);    newBuffer.lazySet(pi,first);    buffer.lazySet(buffer.length() - 1,newBuffer);    buffer.lazySet(pi,NEXT);    PRODUCER_INDEX.lazySet(this,p + 2);  }  return true;}  }
class C{  public Builder withTerm(long term){  response.term=Assert.argNot(term,term < 0,"term must be positive");  return this;}  }
class C{  Object toType(String value,String pattern,Locale locale){  Calendar calendar=toCalendar(value,pattern,locale);  return toType(calendar);}  }
class C{  private BiosCommandResult addRemoveZones(NetworkSystem device,String fabricId,String fabricWwn,URI exportGroupUri,List<NetworkFCZoneInfo> fabricInfos,boolean doRemove,boolean retryAltNetworkDevice) throws ControllerException {  BiosCommandResult result=null;  String taskId=UUID.randomUUID().toString();  List<Zone> zones=new ArrayList<Zone>();  HashSet<String> keySet=new HashSet<String>();  for (  NetworkFCZoneInfo fabricInfo : fabricInfos) {    String key=fabricInfo.makeEndpointsKey();    if (false == keySet.contains(key)) {      keySet.add(key);      if (fabricInfo.isExistingZone()) {        _log.info("Zone {} will not be created or removed on {}, as it is not vipr created. ",fabricInfo.getZoneName(),fabricInfo.toString());        continue;      }      if (doRemove && !fabricInfo._isLastReference) {        _log.info("Zone {} will not be removed on {}, as still the zone is used to expose other volumes in export groups ",fabricInfo.getZoneName(),fabricInfo.toString());        continue;      }      Zone zone=new Zone(fabricInfo.getZoneName());      for (      String address : fabricInfo.getEndPoints()) {        ZoneMember member=new ZoneMember(address,ConnectivityMemberType.WWPN);        zone.getMembers().add(member);      }      zones.add(zone);    }  }  NetworkSystemDevice networkDevice=getDevice(device.getSystemType());  if (networkDevice == null) {    throw NetworkDeviceControllerException.exceptions.addRemoveZonesFailedNull(device.getSystemType());  }  InterProcessLock fabricLock=NetworkFabricLocker.lockFabric(fabricId,_coordinator);  try {    if (doRemove) {      result=networkDevice.removeZones(device,zones,fabricId,fabricWwn,true);      if (result.isCommandSuccess()) {        String refKey=null;        try {          for (          NetworkFCZoneInfo fabricInfo : fabricInfos) {            FCZoneReference ref=_dbClient.queryObject(FCZoneReference.class,fabricInfo.getFcZoneReferenceId());            if (ref != null) {              refKey=ref.getPwwnKey();              _dbClient.markForDeletion(ref);              _log.info(String.format("Remove FCZoneReference key: %s volume %s id %s",ref.getPwwnKey(),ref.getVolumeUri(),ref.getId().toString()));              if (!zones.isEmpty()) {                recordZoneEvent(ref,OperationTypeEnum.REMOVE_SAN_ZONE.name(),OperationTypeEnum.REMOVE_SAN_ZONE.getDescription());              }            }          }        } catch (        DatabaseException ex) {          _log.error("Could not persist FCZoneReference: " + refKey);        }      }    } else {      result=networkDevice.addZones(device,zones,fabricId,fabricWwn,true);      if (result.isCommandSuccess()) {        String refKey=null;        try {          for (          NetworkFCZoneInfo fabricInfo : fabricInfos) {            String[] newOrExisting=new String[1];            FCZoneReference ref=addZoneReference(exportGroupUri,fabricInfo,newOrExisting);            fabricInfo.setFcZoneReferenceId(ref.getId());            _log.info(String.format("%s FCZoneReference key: %s volume %s group %s",newOrExisting[0],ref.getPwwnKey(),ref.getVolumeUri(),exportGroupUri));            if (!zones.isEmpty()) {              recordZoneEvent(ref,OperationTypeEnum.ADD_SAN_ZONE.name(),OperationTypeEnum.ADD_SAN_ZONE.getDescription());            }          }        } catch (        DatabaseException ex) {          _log.error("Could not persist FCZoneReference: " + refKey);        }      }    }    Map<String,String> map=(Map<String,String>)result.getObjectList().get(0);    for (    NetworkFCZoneInfo info : fabricInfos) {      if (NetworkSystemDevice.SUCCESS.equals(map.get(info.getZoneName()))) {        info.setCanBeRolledBack(true);      }    }    if (!result.isCommandSuccess()) {      ServiceError serviceError=NetworkDeviceControllerException.errors.addRemoveZonesFailed(device.getSystemType());      setStatus(ExportGroup.class,exportGroupUri,taskId,false,serviceError);    } else {      setStatus(ExportGroup.class,exportGroupUri,taskId,true,null);    }    return result;  } catch (  ControllerException ex) {    NetworkFCZoneInfo fabricInfo=fabricInfos.get(0);    URI primaryUri=fabricInfo.getNetworkDeviceId();    URI altUri=fabricInfo.getAltNetworkDeviceId();    if (altUri != null && retryAltNetworkDevice) {      NetworkFabricLocker.unlockFabric(fabricId,fabricLock);      fabricLock=null;      _log.error("Zone operation failed using device: " + primaryUri + " retrying with alternate device: "+ altUri);      fabricInfo.setNetworkDeviceId(altUri);      device=getDeviceObject(altUri);      return addRemoveZones(device,fabricId,fabricWwn,exportGroupUri,fabricInfos,doRemove,false);    } else {      if (result != null) {        if (!result.isCommandSuccess()) {          ServiceError serviceError=NetworkDeviceControllerException.errors.addRemoveZonesFailed(device.getSystemType());          setStatus(ExportGroup.class,exportGroupUri,taskId,false,serviceError);        } else {          setStatus(ExportGroup.class,exportGroupUri,taskId,true,null);        }      }      throw ex;    }  } finally {    NetworkFabricLocker.unlockFabric(fabricId,fabricLock);  }}  }
class C{  public void adjustmentValueChanged(AdjustmentEvent e){  if (AWTEventMonitor.adjustmentListener_private != null) {    AWTEventMonitor.adjustmentListener_private.adjustmentValueChanged(e);  }}  }
class C{  public TimeoutException(Throwable cause){  super(cause);}  }
class C{  public int transform(CtClass clazz,int pos,CodeIterator iterator,ConstPool cp){  int c=iterator.byteAt(pos);  if (c == GETFIELD || c == GETSTATIC || c == PUTFIELD || c == PUTSTATIC) {    int index=iterator.u16bitAt(pos + 1);    String typedesc=TransformReadField.isField(clazz.getClassPool(),cp,fieldClass,fieldname,isPrivate,index);    if (typedesc != null) {      if (newIndex == 0) {        int nt=cp.addNameAndTypeInfo(newFieldname,typedesc);        newIndex=cp.addFieldrefInfo(cp.addClassInfo(newClassname),nt);        constPool=cp;      }      iterator.write16bit(newIndex,pos + 1);    }  }  return pos;}  }
class C{  protected void writeIdentityGapLimit(StringBuilder ddl){  int gapSize=getGapLimitSize();  ddl.append("  with identity_gap = " + gapSize);}  }
class C{  private static void printColumnHeaders(GaData gaData){  System.out.println("Column Headers:");  for (  ColumnHeaders header : gaData.getColumnHeaders()) {    System.out.println("Column Name: " + header.getName());    System.out.println("Column Type: " + header.getColumnType());    System.out.println("Column Data Type: " + header.getDataType());  }}  }
class C{  public final int countDataAuthorities(){  return mDataAuthorities != null ? mDataAuthorities.size() : 0;}  }
class C{  @Override public Request<RunnerStatus> stop(ProjectReference projectReference,long processId){  List<DummyRunnerStatus> statuses=availableRunnerStatuses.get(projectReference.name());  DummyRunnerStatus found=null;  if (statuses != null && !statuses.isEmpty()) {    for (    DummyRunnerStatus runnerStatus : statuses) {      if (processId == runnerStatus.processId()) {        found=runnerStatus;      }    }  }  if (found != null) {    found.setStatus(RunnerState.STOPPED);    List<DummyRunnerStatus> currents=currentRunnerStatuses.get(projectReference.name());    if (currents != null) {      currents.remove(found);    }  }  return new DummyRequest<RunnerStatus>(found);}  }
class C{  public GeoConcavePolygon(final PlanetModel planetModel,final List<GeoPoint> pointList,final BitSet internalEdgeFlags,final boolean returnEdgeInternal){  this(planetModel,pointList,null,internalEdgeFlags,returnEdgeInternal);}  }
class C{  public boolean isPorcelain(){  return !isTopLevel();}  }
class C{  private Builder(org.apache.nutch.storage.ParseStatus.Builder other){  super(other);}  }
class C{  public void closeIdleConnections(long idleTime){  long idleTimeout=System.currentTimeMillis() - idleTime;  if (log.isDebugEnabled()) {    log.debug("Checking for connections, idleTimeout: " + idleTimeout);  }  Iterator<HttpConnection> connectionIter=connectionToTimes.keySet().iterator();  while (connectionIter.hasNext()) {    HttpConnection conn=connectionIter.next();    TimeValues times=connectionToTimes.get(conn);    Long connectionTime=times.timeAdded;    if (connectionTime.longValue() <= idleTimeout) {      if (log.isDebugEnabled()) {        log.debug("Closing connection, connection time: " + connectionTime);      }      connectionIter.remove();      try {        conn.close();      } catch (      IOException ex) {        log.debug("I/O error closing connection",ex);      }    }  }}  }
class C{  public static String arrayMap2String(Map<String,String[]> map,String keyValueDelim,String entryDelim){  Set<Entry<String,String[]>> entrySet=map.entrySet();  Iterator<Entry<String,String[]>> itor=entrySet.iterator();  StringWriter sw=new StringWriter();  while (itor.hasNext()) {    Entry<String,String[]> entry=itor.next();    String key=entry.getKey();    String[] values=entry.getValue();    for (int i=0; i < values.length; i++) {      sw.write(entry.getKey() + keyValueDelim + values[i]);      if (i < values.length - 1) {        sw.write(entryDelim);      }    }    if (itor.hasNext()) {      sw.write(entryDelim);    }  }  return sw.toString();}  }
class C{  public TaskErrorMeta(TaskErrorType type,String details){  this.type=type;  this.errorTime=PcDateUtils.getNowDateTimeStrStandard();  this.details=details;}  }
class C{  public BType addBuilder(int index,MType message){  ensureMutableMessageList();  ensureBuilders();  SingleFieldBuilder<MType,BType,IType> builder=new SingleFieldBuilder<MType,BType,IType>(message,this,isClean);  messages.add(index,null);  builders.add(index,builder);  onChanged();  incrementModCounts();  return builder.getBuilder();}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  BaseHandler(){  this(null);}  }
class C{  private static byte[] streamToBytes(InputStream in,int length) throws IOException {  byte[] bytes=new byte[length];  int count;  int pos=0;  while (pos < length && ((count=in.read(bytes,pos,length - pos)) != -1)) {    pos+=count;  }  if (pos != length) {    throw new IOException("Expected " + length + " bytes, read "+ pos+ " bytes");  }  return bytes;}  }
class C{  public boolean isTruncated(){  return (_flags & DNSConstants.FLAGS_TC) != 0;}  }
class C{  @Override public void configure(){  if (log.isDebugEnabled()) {    log.debug("configure called");  }  Z21TrafficController packets=new Z21TrafficController();  packets.connectPort(this);  this.getSystemConnectionMemo().setTrafficController(packets);  this.getSystemConnectionMemo().configureManagers();}  }
class C{  public Queue<Env<AttrContext>> flow(Env<AttrContext> env){  ListBuffer<Env<AttrContext>> results=new ListBuffer<>();  flow(env,results);  return stopIfError(CompileState.FLOW,results);}  }
class C{  public void addDefaultVersion(Version newDefault,boolean includeImplied){  ArrayList<Version> newDefaults=new ArrayList<Version>(defaultVersions);  if (includeImplied) {    mergeVersions(newDefaults,newDefault.getImpliedVersions());  } else {    mergeVersions(newDefaults,newDefault);  }  defaultVersions=Collections.unmodifiableList(newDefaults);}  }
class C{  public static ComputeService.ComputeState createAWSVMResource(VerificationHost host,String parentLink,String resourcePoolLink,@SuppressWarnings("rawtypes") Class clazz,Set<String> tagLinks) throws Throwable {  AuthCredentialsServiceState auth=new AuthCredentialsServiceState();  auth.type=DEFAULT_AUTH_TYPE;  auth.userEmail=DEFAULT_COREOS_USER;  auth.privateKey=TestUtils.loadTestResource(clazz,DEFAULT_COREOS_PRIVATE_KEY_FILE);  auth.documentSelfLink=UUID.randomUUID().toString();  TestUtils.doPost(host,auth,AuthCredentialsService.AuthCredentialsServiceState.class,UriUtils.buildUri(host,AuthCredentialsService.FACTORY_LINK));  String authCredentialsLink=UriUtils.buildUriPath(AuthCredentialsService.FACTORY_LINK,auth.documentSelfLink);  ComputeDescriptionService.ComputeDescription awsVMDesc=new ComputeDescriptionService.ComputeDescription();  awsVMDesc.id=instanceType_t2_micro;  awsVMDesc.name=instanceType_t2_micro;  awsVMDesc.supportedChildren=new ArrayList<>();  awsVMDesc.supportedChildren.add(ComputeType.DOCKER_CONTAINER.name());  awsVMDesc.customProperties=new HashMap<>();  awsVMDesc.customProperties.put(AWSConstants.AWS_SECURITY_GROUP,securityGroup);  awsVMDesc.environmentName=AWSInstanceService.AWS_ENVIRONMENT_NAME;  awsVMDesc.zoneId=zoneId;  awsVMDesc.regionId=zoneId;  awsVMDesc.authCredentialsLink=authCredentialsLink;  awsVMDesc.instanceAdapterReference=UriUtils.buildUri(host,AWSUriPaths.AWS_INSTANCE_ADAPTER);  awsVMDesc.statsAdapterReference=UriUtils.buildUri(host,AWSUriPaths.AWS_STATS_ADAPTER);  ComputeDescriptionService.ComputeDescription vmComputeDesc=TestUtils.doPost(host,awsVMDesc,ComputeDescriptionService.ComputeDescription.class,UriUtils.buildUri(host,ComputeDescriptionService.FACTORY_LINK));  List<String> vmDisks=new ArrayList<>();  DiskState rootDisk=new DiskState();  rootDisk.id=UUID.randomUUID().toString();  rootDisk.documentSelfLink=rootDisk.id;  rootDisk.name=DEFAULT_ROOT_DISK_NAME;  rootDisk.type=DiskType.HDD;  rootDisk.sourceImageReference=URI.create(imageId);  rootDisk.bootConfig=new DiskState.BootConfig();  rootDisk.bootConfig.label=DEFAULT_CONFIG_LABEL;  DiskState.BootConfig.FileEntry file=new DiskState.BootConfig.FileEntry();  file.path=DEFAULT_CONFIG_PATH;  file.contents=TestUtils.loadTestResource(clazz,DEFAULT_USER_DATA_FILE);  rootDisk.bootConfig.files=new DiskState.BootConfig.FileEntry[]{file};  TestUtils.doPost(host,rootDisk,DiskService.DiskState.class,UriUtils.buildUri(host,DiskService.FACTORY_LINK));  vmDisks.add(UriUtils.buildUriPath(DiskService.FACTORY_LINK,rootDisk.id));  ComputeService.ComputeState resource=new ComputeService.ComputeState();  resource.id=UUID.randomUUID().toString();  resource.name=awsVMDesc.name;  resource.parentLink=parentLink;  resource.descriptionLink=vmComputeDesc.documentSelfLink;  resource.resourcePoolLink=resourcePoolLink;  resource.diskLinks=vmDisks;  resource.tagLinks=tagLinks;  ComputeService.ComputeState vmComputeState=TestUtils.doPost(host,resource,ComputeService.ComputeState.class,UriUtils.buildUri(host,ComputeService.FACTORY_LINK));  return vmComputeState;}  }
class C{  private static void addInPathOrder(final List<Cookie> list,final Cookie addCookie){  int i=0;  for (i=0; i < list.size(); i++) {    final Cookie c=list.get(i);    if (addCookie.compare(addCookie,c) > 0) {      break;    }  }  list.add(i,addCookie);}  }
class C{  public boolean adjustGranularityAt(AccessibilityNodeInfoCompat node,int direction){  setLockedNode(node);  final int count=mSupportedGranularities.size();  int currentIndex=mSupportedGranularities.indexOf(mCurrentGranularity);  int nextIndex;  nextIndex=(currentIndex + direction) % count;  if (nextIndex < 0) {    nextIndex=count - 1;  }  mCurrentGranularity=mSupportedGranularities.get(nextIndex);  mSavedGranularity=mCurrentGranularity;  return nextIndex != currentIndex;}  }
class C{  public CarrierVehicleType build(){  return new CarrierVehicleType(this);}  }
class C{  public ColumnDefaultValueChange(Table table,Column column,String newDefaultValue){  super(table);  _column=column;  _newDefaultValue=newDefaultValue;}  }
class C{  public static AlertDialog quickDialog(final Activity context,final String message){  final SpannableString s=new SpannableString(message);  Linkify.addLinks(s,Linkify.ALL);  Builder builder=new AlertDialog.Builder(context);  builder.setMessage(s);  builder.setPositiveButton(android.R.string.ok,closeDialogListener());  AlertDialog dialog=builder.create();  dialog.show();  ((TextView)dialog.findViewById(android.R.id.message)).setMovementMethod(LinkMovementMethod.getInstance());  return dialog;}  }
class C{  public void send(Object message){  send(message,null);}  }
class C{  public static <T>Set<T> listToSet(List<T> list){  return new HashSet<T>(list);}  }
class C{  private CGraphSelectionExpander(){}  }
class C{  public CannotCompileException(ClassFormatError e,String name){  this("invalid class format: " + name,e);}  }
class C{  public X509Certificate generate(PrivateKey key,SecureRandom random) throws CertificateEncodingException, IllegalStateException, NoSuchAlgorithmException, SignatureException, InvalidKeyException {  TBSCertificate tbsCert=generateTbsCert();  byte[] signature;  try {    signature=X509Util.calculateSignature(sigOID,signatureAlgorithm,key,random,tbsCert);  } catch (  IOException e) {    throw new ExtCertificateEncodingException("exception encoding TBS cert",e);  }  try {    return generateJcaObject(tbsCert,signature);  } catch (  CertificateParsingException e) {    throw new ExtCertificateEncodingException("exception producing certificate object",e);  }}  }
class C{  public void selectAllAccessibleSelection(){  JList.this.addSelectionInterval(0,getAccessibleChildrenCount() - 1);}  }
class C{  public LongAdder(){}  }
class C{  public boolean isDirectory(){  return file.isDirectory();}  }
class C{  @Override public IElementType parseNumber(){  CharSequence tokenText=yytext();  if (tokenText.charAt(0) == '.' && CONCAT_OPERATOR_PREFIX.contains(getTokenHistory().getLastSignificantTokenType())) {    yypushback(tokenText.length() - 1);    return OPERATOR_CONCAT;  } else   if (StringUtil.endsWith(tokenText,".")) {    if (getTokenHistory().getLastUnbracedTokenType() == SIGIL_SCALAR) {      yypushback(1);      return IDENTIFIER;    }    if (getNextCharacter() == '.') {      yypushback(1);    }  }  return NUMBER;}  }
class C{  private void finalizeDestinationFile(State state) throws StopRequest {  syncDestination(state);  String tempFilename=state.mFilename;  String finalFilename=Helpers.generateSaveFileName(mService,mInfo.mFileName);  if (!state.mFilename.equals(finalFilename)) {    File startFile=new File(tempFilename);    File destFile=new File(finalFilename);    if (mInfo.mTotalBytes != -1 && mInfo.mCurrentBytes == mInfo.mTotalBytes) {      if (!startFile.renameTo(destFile)) {        throw new StopRequest(DownloaderService.STATUS_FILE_ERROR,"unable to finalize destination file");      }    } else {      throw new StopRequest(DownloaderService.STATUS_FILE_DELIVERED_INCORRECTLY,"file delivered with incorrect size. probably due to network not browser configured");    }  }}  }
class C{  public static Response invalidEntity(ConstraintViolationException e){  StringBuilder errorMessage=new StringBuilder();  boolean firstPass=true;  for (  ConstraintViolation error : e.getConstraintViolations()) {    if (!firstPass) {      errorMessage.append(", ");    }    errorMessage.append(String.format("%s %s (was %s)",error.getPropertyPath(),error.getMessage(),error.getInvalidValue()));    firstPass=false;  }  ExternalException externalException=new ExternalException(ErrorCode.INVALID_ENTITY,errorMessage.toString(),null);  return externalException(externalException);}  }
class C{  final void push(final Object object){  stack.add(object);}  }
class C{  private int readByteFromStream() throws IOException {  int result=this.in.read();  if (result >= 0 && this.msb0) {    result=JBBPUtils.reverseBitsInByte((byte)result) & 0xFF;  }  return result;}  }
class C{  public static void rotateM(float[] rm,int rmOffset,float[] m,int mOffset,float a,float x,float y,float z){synchronized (TEMP_MATRIX_ARRAY) {    setRotateM(TEMP_MATRIX_ARRAY,0,a,x,y,z);    multiplyMM(rm,rmOffset,m,mOffset,TEMP_MATRIX_ARRAY,0);  }}  }
class C{  @HLEFunction(nid=0x27E22EC2,version=150,checkInsideInterrupt=true) public int sceKernelResumeDispatchThread(int state){  boolean isInterruptsDisabled=Interrupts.isInterruptsDisabled();  if (state == SCE_KERNEL_DISPATCHTHREAD_STATE_ENABLED) {    hleKernelResumeDispatchThread();  }  if (isInterruptsDisabled) {    return SceKernelErrors.ERROR_KERNEL_INTERRUPTS_ALREADY_DISABLED;  }  return 0;}  }
class C{  protected void geodeticToCartesian(Sector sector,int numLat,int numLon,double[] metersElevation,Vec4[] out){  double minLat=sector.getMinLatitude().radians;  double maxLat=sector.getMaxLatitude().radians;  double minLon=sector.getMinLongitude().radians;  double maxLon=sector.getMaxLongitude().radians;  double deltaLat=(maxLat - minLat) / (numLat > 1 ? numLat - 1 : 1);  double deltaLon=(maxLon - minLon) / (numLon > 1 ? numLon - 1 : 1);  int pos=0;  double[] cosLon=new double[numLon];  double[] sinLon=new double[numLon];  double lon=minLon;  for (int i=0; i < numLon; i++, lon+=deltaLon) {    if (i == numLon - 1)     lon=maxLon;    cosLon[i]=Math.cos(lon);    sinLon[i]=Math.sin(lon);  }  double lat=minLat;  for (int j=0; j < numLat; j++, lat+=deltaLat) {    if (j == numLat - 1)     lat=maxLat;    double cosLat=Math.cos(lat);    double sinLat=Math.sin(lat);    double rpm=this.equatorialRadius / Math.sqrt(1.0 - this.es * sinLat * sinLat);    for (int i=0; i < numLon; i++) {      double elev=metersElevation[pos];      double x=(rpm + elev) * cosLat * sinLon[i];      double y=(rpm * (1.0 - this.es) + elev) * sinLat;      double z=(rpm + elev) * cosLat * cosLon[i];      out[pos++]=new Vec4(x,y,z);    }  }}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.LEGACY_OCTAL_INT_LITERAL;}  }
class C{  public boolean deletePackage(String x_app_id,String content_type,String package_name,String class_name){  WapPushManDBHelper dbh=getDatabase(mContext);  SQLiteDatabase db=dbh.getWritableDatabase();  String where="x_wap_application=\'" + x_app_id + "\'"+ " and content_type=\'"+ content_type+ "\'"+ " and package_name=\'"+ package_name+ "\'"+ " and class_name=\'"+ class_name+ "\'";  int num_removed=db.delete(APPID_TABLE_NAME,where,null);  db.close();  if (LOCAL_LOGV)   Log.v(LOG_TAG,"deleted " + num_removed + " rows:"+ x_app_id+ ":"+ content_type+ " "+ package_name+ "."+ class_name);  return num_removed > 0;}  }
class C{  public <T>T unwrap(java.lang.Class<T> iface) throws java.sql.SQLException {  try {    return iface.cast(this);  } catch (  ClassCastException cce) {    throw SQLError.createSQLException("Unable to unwrap to " + iface.toString(),SQLError.SQL_STATE_ILLEGAL_ARGUMENT,getExceptionInterceptor());  }}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  @Override @Generated("This method was generated using jOOQ-tools") default ReactiveSeq<Tuple9<Window<T>,Window<T>,Window<T>,Window<T>,Window<T>,Window<T>,Window<T>,Window<T>,Window<T>>> window(final WindowSpecification<T> specification1,final WindowSpecification<T> specification2,final WindowSpecification<T> specification3,final WindowSpecification<T> specification4,final WindowSpecification<T> specification5,final WindowSpecification<T> specification6,final WindowSpecification<T> specification7,final WindowSpecification<T> specification8,final WindowSpecification<T> specification9){  return fromStream(Seq.super.window(specification1,specification2,specification3,specification4,specification5,specification6,specification7,specification8,specification9));}  }
class C{  public Matrix3d m20(double m20){  this.m20=m20;  return this;}  }
class C{  public XPath(String exprString,SourceLocator locator,PrefixResolver prefixResolver,int type,ErrorListener errorListener,FunctionTable aTable) throws javax.xml.transform.TransformerException {  m_funcTable=aTable;  if (null == errorListener)   errorListener=new org.apache.xml.utils.DefaultErrorHandler();  m_patternString=exprString;  XPathParser parser=new XPathParser(errorListener,locator);  Compiler compiler=new Compiler(errorListener,locator,m_funcTable);  if (SELECT == type)   parser.initXPath(compiler,exprString,prefixResolver); else   if (MATCH == type)   parser.initMatchPattern(compiler,exprString,prefixResolver); else   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_CANNOT_DEAL_XPATH_TYPE,new Object[]{Integer.toString(type)}));  Expression expr=compiler.compile(0);  this.setExpression(expr);  if ((null != locator) && locator instanceof ExpressionNode) {    expr.exprSetParent((ExpressionNode)locator);  }}  }
class C{  public static String stringFor(int n){switch (n) {case cudaGraphicsMapFlagsNone:    return "cudaGraphicsMapFlagsNone";case cudaGraphicsMapFlagsReadOnly:  return "cudaGraphicsMapFlagsReadOnly";case cudaGraphicsMapFlagsWriteDiscard:return "cudaGraphicsMapFlagsWriteDiscard";}return "INVALID cudaGraphicsMapFlags: " + n;}  }
class C{  @SuppressLint("DefaultLocale") public final boolean contains(final Location location){  boolean match=false;  for (  final ForbiddenArea dead : mBlockList) {    if (location.distanceTo(dead.location) < dead.radius) {      match=true;      break;    }  }  return match;}  }
class C{  public void update(int time){  for (  OdorWorldEntity object : entityList) {    object.updateSmellSource();    object.updateSensors();    object.applyEffectors();    updateEntity(object,time);  }  fireUpdateEvent();}  }
class C{  public void destroyScene(){  clearAnimations();  clearCameras();  clearLights();  clearPlugins();  clearChildren();  clearFrameCallbacks();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public PostProcessor(boolean useDepth,boolean useAlphaChannel,boolean use32Bits){  this(Gdx.graphics.getWidth(),Gdx.graphics.getHeight(),useDepth,useAlphaChannel,use32Bits);}  }
class C{  protected void compile(final IGame game,final Entity entity,MoveStep prev){  final boolean isInfantry=entity instanceof Infantry;  boolean isFieldArtillery=(entity instanceof Infantry) && ((Infantry)entity).hasActiveFieldArtillery();  copy(game,prev);  if (prev == null) {    prev=new MoveStep(null,MoveStepType.FORWARDS);    prev.setFromEntity(entity,game);    prev.isCarefulPath=isCareful();    prev.isJumpingPath=isJumping();    setFirstStep(prev.mpUsed == 0);  }switch (getType()) {case UNLOAD:    hasEverUnloaded=true;  setMp(0);break;case LOAD:setMp(1);break;case MOUNT:setMp(0);break;case TURN_LEFT:case TURN_RIGHT:if (Compute.canMoveOnPavement(game,prev.getPosition(),getPosition(),this)) {setPavementStep(true);} else {setPavementStep(false);setOnlyPavement(false);}setMp((isJumping() || isHasJustStood() || (isInfantry && !isFieldArtillery)) ? 0 : 1);if (entity.isAirborne() && (entity instanceof Aero)) {setMp(asfTurnCost(game,getType(),entity));setNTurns(getNTurns() + 1);if (useAeroAtmosphere(game,entity)) {setNStraight(0);setFreeTurn(false);}}if ((getEntity() instanceof TripodMech) && (((Mech)getEntity()).countBadLegs() < 1) && ((prev.type == MoveStepType.TURN_LEFT) || (prev.type == MoveStepType.TURN_RIGHT))) {setMp(0);}if (entity.isDropping()) {setMp(0);}adjustFacing(getType());break;case BACKWARDS:moveInDir((getFacing() + 3) % 6);setThisStepBackwards(true);if (!entity.hasQuirk(OptionsConstants.QUIRK_POS_POWER_REVERSE)) {setRunProhibited(true);}compileMove(game,entity,prev);break;case FORWARDS:case DFA:case SWIM:moveInDir(getFacing());setThisStepBackwards(false);compileMove(game,entity,prev);break;case CHARGE:if (!(entity.isAirborne()) || !game.useVectorMove()) {moveInDir(getFacing());setThisStepBackwards(false);compileMove(game,entity,prev);}break;case LATERAL_LEFT_BACKWARDS:case LATERAL_RIGHT_BACKWARDS:moveInDir((MovePath.getAdjustedFacing(getFacing(),MovePath.turnForLateralShift(getType())) + 3) % 6);setThisStepBackwards(true);if (!entity.hasQuirk(OptionsConstants.QUIRK_POS_POWER_REVERSE)) {setRunProhibited(true);}compileMove(game,entity,prev);if (entity.isAirborne()) {setMp(0);} else if (entity.isUsingManAce() & (entity instanceof QuadMech)) {setMp(getMp());} else if (isJumping() && (entity.getJumpType() == Mech.JUMP_BOOSTER)) {setMp(1);} else {setMp(getMp() + 1);}break;case LATERAL_LEFT:case LATERAL_RIGHT:moveInDir(MovePath.getAdjustedFacing(getFacing(),MovePath.turnForLateralShift(getType())));setThisStepBackwards(false);compileMove(game,entity,prev);if (entity.isAirborne()) {setMp(0);} else if (entity.isUsingManAce() & (entity instanceof QuadMech)) {setMp(getMp());} else if (isJumping() && (entity.getJumpType() == Mech.JUMP_BOOSTER)) {setMp(1);} else {setMp(getMp() + 1);}break;case GET_UP:setMp(entity.getRunMP() == 1 ? 1 : 2);setHasJustStood(true);break;case CAREFUL_STAND:if (entity.getWalkMP() <= 2) {entity.setCarefulStand(false);setMp(entity.getRunMP() == 1 ? 1 : 2);} else {setMp(entity.getWalkMP());}setHasJustStood(true);break;case GO_PRONE:if (!entity.isHullDown()) {setMp(1);}break;case START_JUMP:entity.setIsJumpingNow(true);break;case UP:if (entity.isAirborne()) {setAltitude(altitude + 1);setMp(2);} else {setElevation(elevation + 1);if (entity.getMovementMode() == EntityMovementMode.WIGE) {if (entity instanceof Protomech) {setMp(4);} else {setMp(5);}} else {if (entity instanceof Protomech) {setMp(isJumping() ? 0 : 2);} else {setMp(isJumping() ? 0 : 1);}}}break;case DOWN:if (entity.isAirborne()) {setAltitude(altitude - 1);setMp(0);setNDown(getNDown() + 1);} else {setElevation(elevation - 1);if (entity.getMovementMode() == EntityMovementMode.WIGE) {setMp(0);} else {if (entity instanceof Protomech) {setMp(isJumping() ? 0 : 2);} else {setMp(isJumping() ? 0 : 1);}}}break;case HULL_DOWN:if (isProne() && (entity instanceof Mech)) {int mpUsed=1;if (entity instanceof BipedMech) {for (int location=Mech.LOC_RLEG; location <= Mech.LOC_LLEG; location++) {if (entity.isLocationBad(location)) {mpUsed+=99;break;}mpUsed+=((Mech)entity).countLegActuatorCrits(location);if (((Mech)entity).legHasHipCrit(location)) {mpUsed+=1;}}} else {for (int location=Mech.LOC_RARM; location <= Mech.LOC_LLEG; location++) {if (entity.isLocationBad(location)) {mpUsed+=99;break;}mpUsed+=((QuadMech)entity).countLegActuatorCrits(location);if (((QuadMech)entity).legHasHipCrit(location)) {mpUsed+=1;}}}setMp(mpUsed);} else {setMp(2);}break;case CLIMB_MODE_ON:setClimbMode(true);break;case CLIMB_MODE_OFF:setClimbMode(false);break;case SHAKE_OFF_SWARMERS:setMp(entity.getRunMP() - entity.getWalkMP());break;case TAKEOFF:case VTAKEOFF:setMp(0);break;case LAND:case VLAND:setMp(0);setAltitude(0);break;case ACCN:setVelocityN(getVelocityN() + 1);setMp(1);break;case DECN:setVelocityN(getVelocityN() - 1);setMp(1);break;case ACC:setVelocity(getVelocity() + 1);setVelocityLeft(getVelocityLeft() + 1);setMp(1);break;case DEC:setVelocity(getVelocity() - 1);setVelocityLeft(getVelocityLeft() - 1);setMp(1);break;case EVADE:setEvading(true);if (entity.isAirborne()) {setMp(2);}break;case SHUTDOWN:setShuttingDown(true);break;case STARTUP:setStartingUp(true);break;case SELF_DESTRUCT:setSelfDestructing(true);break;case ROLL:if (prev.isRolled) {isRolled=false;} else {isRolled=true;}if (prev.getType() != MoveStepType.YAW) {setMp(1);setNRolls(getNRolls() + 1);} else {setMp(0);}break;case LAUNCH:case DROP:hasEverUnloaded=true;setMp(0);break;case RECOVER:setMp(0);break;case JOIN:setMp(0);break;case THRUST:setVectors(Compute.changeVectors(getVectors(),getFacing()));setMp(1);break;case YAW:setNRolls(getNRolls() + 1);reverseFacing();setMp(2);break;case HOVER:setMp(2);break;case MANEUVER:int cost=ManeuverType.getCost(getManeuverType(),getVelocity());if (entity.isUsingManAce()) {cost=Math.max(cost - 1,0);}setMp(cost);break;case LOOP:setVelocityLeft(getVelocityLeft() - 4);setMp(0);default :setMp(0);}if (noCost) {setMp(0);}if ((entity instanceof Tank) && (distance > 0)) {setHullDown(false);}addMpUsed(getMp());final Entity violation=Compute.stackingViolation(game,entity.getId(),getPosition());if ((violation != null) && (getType() != MoveStepType.CHARGE) && (getType() != MoveStepType.DFA)) {setStackingViolation(true);}compileIllegal(game,entity,prev);}  }
class C{  public String toXML(boolean header){  return null;}  }
class C{  public RectF(){}  }
class C{  public void addSigner(PrivateKey key,byte[] subjectKeyID,String encryptionOID,String digestOID) throws IllegalArgumentException {  doAddSigner(key,subjectKeyID,encryptionOID,digestOID,new DefaultSignedAttributeTableGenerator(),null,null);}  }
class C{  public static String timestampToString(java.sql.Timestamp stamp){  SimpleDateFormat fmt=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss",Locale.getDefault());  return fmt.format(stamp);}  }
class C{  public static void main(String[] args) throws Exception {  new ExtractData().start(args);}  }
class C{  protected void parseH() throws ParseException, IOException {  current=reader.read();  skipSpaces();  boolean expectNumber=true;  for (; ; ) {switch (current) {default :      if (expectNumber)       reportUnexpected(current);    return;case '+':case '-':case '.':case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':  break;}float x=parseFloat();pathHandler.linetoHorizontalAbs(x);expectNumber=skipCommaSpaces2();}}  }
class C{  private void cleanState(){  username=null;  if (password != null) {    Arrays.fill(password,' ');    password=null;  }  if (clearPass) {    sharedState.remove(USERNAME_KEY);    sharedState.remove(PASSWORD_KEY);  }}  }
class C{  public int size(){  if (tail == null) {    return 1;  }  return 1 + tail.size();}  }
class C{  private void hqr2(){  int nn=this.n;  int n=nn - 1;  int low=0;  int high=nn - 1;  double eps=Math.pow(2.0,-52.0);  double exshift=0.0;  double p=0, q=0, r=0, s=0, z=0, t, w, x, y;  double norm=0.0;  for (int i=0; i < nn; i++) {    if (i < low | i > high) {      d[i]=H[i][i];      e[i]=0.0;    }    for (int j=Math.max(i - 1,0); j < nn; j++) {      norm=norm + Math.abs(H[i][j]);    }  }  int iter=0;  while (n >= low) {    int l=n;    while (l > low) {      s=Math.abs(H[l - 1][l - 1]) + Math.abs(H[l][l]);      if (s == 0.0) {        s=norm;      }      if (Math.abs(H[l][l - 1]) < eps * s) {        break;      }      l--;    }    if (l == n) {      H[n][n]=H[n][n] + exshift;      d[n]=H[n][n];      e[n]=0.0;      n--;      iter=0;    } else     if (l == n - 1) {      w=H[n][n - 1] * H[n - 1][n];      p=(H[n - 1][n - 1] - H[n][n]) / 2.0;      q=p * p + w;      z=Math.sqrt(Math.abs(q));      H[n][n]=H[n][n] + exshift;      H[n - 1][n - 1]=H[n - 1][n - 1] + exshift;      x=H[n][n];      if (q >= 0) {        if (p >= 0) {          z=p + z;        } else {          z=p - z;        }        d[n - 1]=x + z;        d[n]=d[n - 1];        if (z != 0.0) {          d[n]=x - w / z;        }        e[n - 1]=0.0;        e[n]=0.0;        x=H[n][n - 1];        s=Math.abs(x) + Math.abs(z);        p=x / s;        q=z / s;        r=Math.sqrt(p * p + q * q);        p=p / r;        q=q / r;        for (int j=n - 1; j < nn; j++) {          z=H[n - 1][j];          H[n - 1][j]=q * z + p * H[n][j];          H[n][j]=q * H[n][j] - p * z;        }        for (int i=0; i <= n; i++) {          z=H[i][n - 1];          H[i][n - 1]=q * z + p * H[i][n];          H[i][n]=q * H[i][n] - p * z;        }        for (int i=low; i <= high; i++) {          z=V[i][n - 1];          V[i][n - 1]=q * z + p * V[i][n];          V[i][n]=q * V[i][n] - p * z;        }      } else {        d[n - 1]=x + p;        d[n]=x + p;        e[n - 1]=z;        e[n]=-z;      }      n=n - 2;      iter=0;    } else {      x=H[n][n];      y=0.0;      w=0.0;      if (l < n) {        y=H[n - 1][n - 1];        w=H[n][n - 1] * H[n - 1][n];      }      if (iter == 10) {        exshift+=x;        for (int i=low; i <= n; i++) {          H[i][i]-=x;        }        s=Math.abs(H[n][n - 1]) + Math.abs(H[n - 1][n - 2]);        x=y=0.75 * s;        w=-0.4375 * s * s;      }      if (iter == 30) {        s=(y - x) / 2.0;        s=s * s + w;        if (s > 0) {          s=Math.sqrt(s);          if (y < x) {            s=-s;          }          s=x - w / ((y - x) / 2.0 + s);          for (int i=low; i <= n; i++) {            H[i][i]-=s;          }          exshift+=s;          x=y=w=0.964;        }      }      iter=iter + 1;      int m=n - 2;      while (m >= l) {        z=H[m][m];        r=x - z;        s=y - z;        p=(r * s - w) / H[m + 1][m] + H[m][m + 1];        q=H[m + 1][m + 1] - z - r- s;        r=H[m + 2][m + 1];        s=Math.abs(p) + Math.abs(q) + Math.abs(r);        p=p / s;        q=q / s;        r=r / s;        if (m == l) {          break;        }        if (Math.abs(H[m][m - 1]) * (Math.abs(q) + Math.abs(r)) < eps * (Math.abs(p) * (Math.abs(H[m - 1][m - 1]) + Math.abs(z) + Math.abs(H[m + 1][m + 1])))) {          break;        }        m--;      }      for (int i=m + 2; i <= n; i++) {        H[i][i - 2]=0.0;        if (i > m + 2) {          H[i][i - 3]=0.0;        }      }      for (int k=m; k <= n - 1; k++) {        boolean notlast=(k != n - 1);        if (k != m) {          p=H[k][k - 1];          q=H[k + 1][k - 1];          r=(notlast ? H[k + 2][k - 1] : 0.0);          x=Math.abs(p) + Math.abs(q) + Math.abs(r);          if (x != 0.0) {            p=p / x;            q=q / x;            r=r / x;          }        }        if (x == 0.0) {          break;        }        s=Math.sqrt(p * p + q * q + r * r);        if (p < 0) {          s=-s;        }        if (s != 0) {          if (k != m) {            H[k][k - 1]=-s * x;          } else           if (l != m) {            H[k][k - 1]=-H[k][k - 1];          }          p=p + s;          x=p / s;          y=q / s;          z=r / s;          q=q / p;          r=r / p;          for (int j=k; j < nn; j++) {            p=H[k][j] + q * H[k + 1][j];            if (notlast) {              p=p + r * H[k + 2][j];              H[k + 2][j]=H[k + 2][j] - p * z;            }            H[k][j]=H[k][j] - p * x;            H[k + 1][j]=H[k + 1][j] - p * y;          }          for (int i=0; i <= Math.min(n,k + 3); i++) {            p=x * H[i][k] + y * H[i][k + 1];            if (notlast) {              p=p + z * H[i][k + 2];              H[i][k + 2]=H[i][k + 2] - p * r;            }            H[i][k]=H[i][k] - p;            H[i][k + 1]=H[i][k + 1] - p * q;          }          for (int i=low; i <= high; i++) {            p=x * V[i][k] + y * V[i][k + 1];            if (notlast) {              p=p + z * V[i][k + 2];              V[i][k + 2]=V[i][k + 2] - p * r;            }            V[i][k]=V[i][k] - p;            V[i][k + 1]=V[i][k + 1] - p * q;          }        }      }    }  }  if (norm == 0.0) {    return;  }  for (n=nn - 1; n >= 0; n--) {    p=d[n];    q=e[n];    if (q == 0) {      int l=n;      H[n][n]=1.0;      for (int i=n - 1; i >= 0; i--) {        w=H[i][i] - p;        r=0.0;        for (int j=l; j <= n; j++) {          r=r + H[i][j] * H[j][n];        }        if (e[i] < 0.0) {          z=w;          s=r;        } else {          l=i;          if (e[i] == 0.0) {            if (w != 0.0) {              H[i][n]=-r / w;            } else {              H[i][n]=-r / (eps * norm);            }          } else {            x=H[i][i + 1];            y=H[i + 1][i];            q=(d[i] - p) * (d[i] - p) + e[i] * e[i];            t=(x * s - z * r) / q;            H[i][n]=t;            if (Math.abs(x) > Math.abs(z)) {              H[i + 1][n]=(-r - w * t) / x;            } else {              H[i + 1][n]=(-s - y * t) / z;            }          }          t=Math.abs(H[i][n]);          if ((eps * t) * t > 1) {            for (int j=i; j <= n; j++) {              H[j][n]=H[j][n] / t;            }          }        }      }    } else     if (q < 0) {      int l=n - 1;      if (Math.abs(H[n][n - 1]) > Math.abs(H[n - 1][n])) {        H[n - 1][n - 1]=q / H[n][n - 1];        H[n - 1][n]=-(H[n][n] - p) / H[n][n - 1];      } else {        cdiv(0.0,-H[n - 1][n],H[n - 1][n - 1] - p,q);        H[n - 1][n - 1]=cdivr;        H[n - 1][n]=cdivi;      }      H[n][n - 1]=0.0;      H[n][n]=1.0;      for (int i=n - 2; i >= 0; i--) {        double ra, sa, vr, vi;        ra=0.0;        sa=0.0;        for (int j=l; j <= n; j++) {          ra=ra + H[i][j] * H[j][n - 1];          sa=sa + H[i][j] * H[j][n];        }        w=H[i][i] - p;        if (e[i] < 0.0) {          z=w;          r=ra;          s=sa;        } else {          l=i;          if (e[i] == 0) {            cdiv(-ra,-sa,w,q);            H[i][n - 1]=cdivr;            H[i][n]=cdivi;          } else {            x=H[i][i + 1];            y=H[i + 1][i];            vr=(d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q;            vi=(d[i] - p) * 2.0 * q;            if (vr == 0.0 & vi == 0.0) {              vr=eps * norm * (Math.abs(w) + Math.abs(q) + Math.abs(x)+ Math.abs(y)+ Math.abs(z));            }            cdiv(x * r - z * ra + q * sa,x * s - z * sa - q * ra,vr,vi);            H[i][n - 1]=cdivr;            H[i][n]=cdivi;            if (Math.abs(x) > (Math.abs(z) + Math.abs(q))) {              H[i + 1][n - 1]=(-ra - w * H[i][n - 1] + q * H[i][n]) / x;              H[i + 1][n]=(-sa - w * H[i][n] - q * H[i][n - 1]) / x;            } else {              cdiv(-r - y * H[i][n - 1],-s - y * H[i][n],z,q);              H[i + 1][n - 1]=cdivr;              H[i + 1][n]=cdivi;            }          }          t=Math.max(Math.abs(H[i][n - 1]),Math.abs(H[i][n]));          if ((eps * t) * t > 1) {            for (int j=i; j <= n; j++) {              H[j][n - 1]=H[j][n - 1] / t;              H[j][n]=H[j][n] / t;            }          }        }      }    }  }  for (int i=0; i < nn; i++) {    if (i < low | i > high) {      for (int j=i; j < nn; j++) {        V[i][j]=H[i][j];      }    }  }  for (int j=nn - 1; j >= low; j--) {    for (int i=low; i <= high; i++) {      z=0.0;      for (int k=low; k <= Math.min(j,high); k++) {        z=z + V[i][k] * H[k][j];      }      V[i][j]=z;    }  }}  }
class C{  private int loadShader(int shaderType,String source){  int shader=GLES20.glCreateShader(shaderType);  if (shader != 0) {    GLES20.glShaderSource(shader,source);    GLES20.glCompileShader(shader);    int[] compiled=new int[1];    GLES20.glGetShaderiv(shader,GLES20.GL_COMPILE_STATUS,compiled,0);    if (compiled[0] == 0) {      RajLog.e("[" + getClass().getName() + "] Could not compile "+ (shaderType == GLES20.GL_FRAGMENT_SHADER ? "fragment" : "vertex")+ " shader:");      RajLog.e("Shader log: " + GLES20.glGetShaderInfoLog(shader));      GLES20.glDeleteShader(shader);      shader=0;    }  }  return shader;}  }
class C{  public static void sort(byte[] a,int fromIndex,int toIndex){  rangeCheck(a.length,fromIndex,toIndex);  sort1(a,fromIndex,toIndex - fromIndex);}  }
class C{  public void startCompetition(){  UsageReporting.report(tResourceType.kResourceType_Framework,tInstances.kFramework_Iterative);  robotInit();  FRCNetworkCommunicationsLibrary.FRCNetworkCommunicationObserveUserProgramStarting();  LiveWindow.setEnabled(false);  while (true) {    if (isDisabled()) {      if (!m_disabledInitialized) {        LiveWindow.setEnabled(false);        disabledInit();        m_disabledInitialized=true;        m_autonomousInitialized=false;        m_teleopInitialized=false;        m_testInitialized=false;      }      if (nextPeriodReady()) {        FRCNetworkCommunicationsLibrary.FRCNetworkCommunicationObserveUserProgramDisabled();        disabledPeriodic();        allPeriodic();      }    } else     if (isTest()) {      if (!m_testInitialized) {        LiveWindow.setEnabled(true);        testInit();        m_testInitialized=true;        m_autonomousInitialized=false;        m_teleopInitialized=false;        m_disabledInitialized=false;      }      if (nextPeriodReady()) {        FRCNetworkCommunicationsLibrary.FRCNetworkCommunicationObserveUserProgramTest();        testPeriodic();        allPeriodic();      }    } else     if (isAutonomous()) {      if (!m_autonomousInitialized) {        LiveWindow.setEnabled(false);        autonomousInit();        m_autonomousInitialized=true;        m_testInitialized=false;        m_teleopInitialized=false;        m_disabledInitialized=false;      }      if (nextPeriodReady()) {        FRCNetworkCommunicationsLibrary.FRCNetworkCommunicationObserveUserProgramAutonomous();        autonomousPeriodic();        allPeriodic();      }    } else {      if (!m_teleopInitialized) {        LiveWindow.setEnabled(false);        teleopInit();        m_teleopInitialized=true;        m_testInitialized=false;        m_autonomousInitialized=false;        m_disabledInitialized=false;      }      if (nextPeriodReady()) {        FRCNetworkCommunicationsLibrary.FRCNetworkCommunicationObserveUserProgramTeleop();        teleopPeriodic();        allPeriodic();      }    }    m_ds.waitForData();  }}  }
class C{  public static <A,X extends Throwable>TryTSeq<A,X> of(final AnyMSeq<Try<A,X>> monads){  return new TryTSeq<>(monads);}  }
class C{  public ImmutableDescriptor(Map<String,?> fields){  if (fields == null)   throw new IllegalArgumentException("Null Map");  SortedMap<String,Object> map=new TreeMap<String,Object>(String.CASE_INSENSITIVE_ORDER);  for (  Map.Entry<String,?> entry : fields.entrySet()) {    String name=entry.getKey();    if (name == null || name.equals(""))     throw new IllegalArgumentException("Empty or null field name");    if (map.containsKey(name))     throw new IllegalArgumentException("Duplicate name: " + name);    map.put(name,entry.getValue());  }  int size=map.size();  this.names=map.keySet().toArray(new String[size]);  this.values=map.values().toArray(new Object[size]);}  }
class C{  int doReExecTest(String testArguments,String expectedPattern){  ProcessBuilder pb=new ProcessBuilder(javaCmd,VersionStr,testArguments);  Map<String,String> env=pb.environment();  env.put(JLDEBUG_KEY,"true");  return doReExecTest0(pb,testArguments) ? 0 : 1;}  }
class C{  private int elementRight(int left,XMLStreamReader reader){  int rightIdx=lastIndexOf(xml,'>',reader.getLocation().getCharacterOffset());  int leftIdx=lastIndexOf(xml,'<',rightIdx);  while (leftIdx > left) {    rightIdx=lastIndexOf(xml,'>',rightIdx - 1);    leftIdx=lastIndexOf(xml,'<',rightIdx);  }  return rightIdx;}  }
class C{  public static <T>Var<T> var(){  return new Var<>();}  }
class C{  public boolean isOwner(Principal owner){  return ownerList.contains(owner);}  }
class C{  public boolean approxEquals(S2LatLngRect other,double maxError){  return (lat.approxEquals(other.lat,maxError) && lng.approxEquals(other.lng,maxError));}  }
class C{  public WorksheetDemo(SpreadsheetService service,PrintStream outputStream){  this.service=service;  this.out=outputStream;  this.factory=FeedURLFactory.getDefault();}  }
class C{  public LinearGradientPaint(float startX,float startY,float endX,float endY,float[] fractions,Color[] colors,CycleMethodEnum cycleMethod){  this(new Point2D.Float(startX,startY),new Point2D.Float(endX,endY),fractions,colors,cycleMethod,SRGB);}  }
class C{  public void addObject(String uri,Object entity) throws RepositoryException {  addObject(getValueFactory().createURI(uri),entity);}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  private void synchronizeData(ArrayList<Object> folderAndFiles,OwnCloudClient client){  mLocalFolder=mStorageManager.getFileByPath(mLocalFolder.getRemotePath());  OCFile remoteFolder=FileStorageUtils.fillOCFile((RemoteFile)folderAndFiles.get(0));  remoteFolder.setParentId(mLocalFolder.getParentId());  remoteFolder.setFileId(mLocalFolder.getFileId());  Log_OC.d(TAG,"Remote folder " + mLocalFolder.getRemotePath() + " changed - starting update of local data ");  List<OCFile> updatedFiles=new Vector<>(folderAndFiles.size() - 1);  mFilesToSyncContents.clear();  List<OCFile> localFiles=mStorageManager.getFolderContent(mLocalFolder);  Map<String,OCFile> localFilesMap=new HashMap<>(localFiles.size());  for (  OCFile file : localFiles) {    localFilesMap.put(file.getRemotePath(),file);  }  OCFile remoteFile, localFile, updatedFile;  RemoteFile r;  for (int i=1; i < folderAndFiles.size(); i++) {    r=(RemoteFile)folderAndFiles.get(i);    remoteFile=FileStorageUtils.fillOCFile(r);    updatedFile=FileStorageUtils.fillOCFile(r);    updatedFile.setParentId(mLocalFolder.getFileId());    localFile=localFilesMap.remove(remoteFile.getRemotePath());    updatedFile.setLastSyncDateForProperties(mCurrentSyncTime);    if (localFile != null) {      updatedFile.setFileId(localFile.getFileId());      updatedFile.setFavorite(localFile.isFavorite());      updatedFile.setLastSyncDateForData(localFile.getLastSyncDateForData());      updatedFile.setModificationTimestampAtLastSyncForData(localFile.getModificationTimestampAtLastSyncForData());      updatedFile.setStoragePath(localFile.getStoragePath());      updatedFile.setEtag(localFile.getEtag());      if (updatedFile.isFolder()) {        updatedFile.setFileLength(localFile.getFileLength());      } else       if (mRemoteFolderChanged && remoteFile.isImage() && remoteFile.getModificationTimestamp() != localFile.getModificationTimestamp()) {        updatedFile.setNeedsUpdateThumbnail(true);        Log.d(TAG,"Image " + remoteFile.getFileName() + " updated on the server");      }      updatedFile.setPublicLink(localFile.getPublicLink());      updatedFile.setShareViaLink(localFile.isSharedViaLink());      updatedFile.setShareWithSharee(localFile.isSharedWithSharee());      updatedFile.setEtagInConflict(localFile.getEtagInConflict());    } else {      updatedFile.setEtag("");    }    FileStorageUtils.searchForLocalFileInDefaultPath(updatedFile,mAccount);    if (updatedFile.isFavorite()) {      SynchronizeFileOperation operation=new SynchronizeFileOperation(localFile,remoteFile,mAccount,true,mContext);      mFilesToSyncContents.add(operation);    }    updatedFiles.add(updatedFile);  }  mStorageManager.saveFolder(remoteFolder,updatedFiles,localFilesMap.values());  mChildren=updatedFiles;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:33.079 -0500",hash_original_method="291F5B4072A01706D5283F5804B360A4",hash_generated_method="BF1DDA278ADBC5A1516FEB70F1D9E90F") public static String stateToString(int state){switch (state) {case STATE_DISCONNECTED:    return "disconnected";case STATE_CONNECTING:  return "connecting";case STATE_CONNECTED:return "connected";case STATE_DISCONNECTING:return "disconnecting";case STATE_PLAYING:return "playing";case STATE_NOT_PLAYING:return "not playing";default :return "<unknown state " + state + ">";}}  }
class C{  public TelephoneNumber parseTelephoneNumber(String telephone_number) throws ParseException {  return new URLParser(telephone_number).parseTelephoneNumber(true);}  }
class C{  public static int ENOSYS(){  return Errno.ENOSYS.intValue();}  }
class C{  @Override public X509Certificate generateIssuerCert(PublicKey publicKey,PrivateKey privateKey,KeyPair issuerKeys,String commonName,BigInteger serialNr,Date startDate,Date expiryDate) throws GeneralSecurityException, IOException {  JcaX509v3CertificateBuilder certBldr;  JcaX509ExtensionUtils extUtils=new JcaX509ExtensionUtils();  AuthorityKeyIdentifier authorityKeyIdentifier;  if (issuerKeys == null) {    X500Name dn=new X500Name(commonName);    certBldr=new JcaX509v3CertificateBuilder(dn,serialNr,startDate,expiryDate,dn,publicKey);    authorityKeyIdentifier=extUtils.createAuthorityKeyIdentifier(publicKey);  } else {    X509Certificate caCert=issuerKeys.getCertificate().getCertificate();    certBldr=new JcaX509v3CertificateBuilder(caCert,serialNr,startDate,expiryDate,new X500Principal(commonName),publicKey);    authorityKeyIdentifier=extUtils.createAuthorityKeyIdentifier(caCert);  }  certBldr.addExtension(Extension.authorityKeyIdentifier,false,authorityKeyIdentifier).addExtension(Extension.subjectKeyIdentifier,false,extUtils.createSubjectKeyIdentifier(publicKey)).addExtension(Extension.basicConstraints,true,new BasicConstraints(0)).addExtension(Extension.keyUsage,true,new KeyUsage(KeyUsage.digitalSignature | KeyUsage.keyCertSign | KeyUsage.cRLSign));  ContentSigner signer;  try {    signer=new JcaContentSignerBuilder(CertificateUtils.getCertificateSignatureAlgorithm()).setProvider("BC").build(privateKey);  } catch (  OperatorCreationException e) {    throw new GeneralSecurityException("Failed to sign the certificate",e);  }  return new JcaX509CertificateConverter().setProvider("BC").getCertificate(certBldr.build(signer));}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case SGraphPackage.TRANSITION__TRIGGER:    return trigger != null;case SGraphPackage.TRANSITION__EFFECT:  return effect != null;case SGraphPackage.TRANSITION__PROPERTIES:return properties != null && !properties.isEmpty();case SGraphPackage.TRANSITION__DOCUMENTATION:return DOCUMENTATION_EDEFAULT == null ? documentation != null : !DOCUMENTATION_EDEFAULT.equals(documentation);case SGraphPackage.TRANSITION__TARGET:return target != null;case SGraphPackage.TRANSITION__SOURCE:return basicGetSource() != null;}return super.eIsSet(featureID);}  }
class C{  @Override public void discover(AccessProfile accessProfile) throws BaseCollectionException {  s_logger.info("initiating discovery of VPLEX system {}",accessProfile.getProfileName());  if ((null != accessProfile.getnamespace()) && (accessProfile.getnamespace().equals(StorageSystem.Discovery_Namespaces.UNMANAGED_VOLUMES.toString()))) {    try {      VPlexApiClient client=getVPlexAPIClient(accessProfile);      long timer=System.currentTimeMillis();      UnmanagedDiscoveryPerformanceTracker tracker=new UnmanagedDiscoveryPerformanceTracker();      tracker.discoveryMode=ControllerUtils.getPropertyValueFromCoordinator(_coordinator,VplexBackendIngestionContext.DISCOVERY_MODE);      Map<String,VPlexVirtualVolumeInfo> vvolMap=client.getVirtualVolumes(true);      tracker.virtualVolumeFetch=System.currentTimeMillis() - timer;      tracker.totalVolumesFetched=vvolMap.size();      timer=System.currentTimeMillis();      Map<String,Set<UnManagedExportMask>> volumeToExportMasksMap=new HashMap<String,Set<UnManagedExportMask>>();      Map<String,Set<VPlexStorageViewInfo>> volumeToStorageViewMap=new HashMap<String,Set<VPlexStorageViewInfo>>();      Set<String> recoverPointExportMasks=new HashSet<String>();      discoverUnmanagedStorageViews(accessProfile,client,vvolMap,volumeToExportMasksMap,volumeToStorageViewMap,recoverPointExportMasks);      tracker.storageViewFetch=System.currentTimeMillis() - timer;      timer=System.currentTimeMillis();      discoverUnmanagedVolumes(accessProfile,client,vvolMap,volumeToExportMasksMap,volumeToStorageViewMap,recoverPointExportMasks,tracker);      tracker.unmanagedVolumeProcessing=System.currentTimeMillis() - timer;      s_logger.info(tracker.getPerformanceReport());    } catch (    URISyntaxException ex) {      s_logger.error(ex.getLocalizedMessage());      throw VPlexCollectionException.exceptions.vplexUnmanagedVolumeDiscoveryFailed(accessProfile.getSystemId().toString(),ex.getLocalizedMessage());    }  } else {    discoverAll(accessProfile);  }}  }
class C{  protected boolean isAllLinksExternal(){  return false;}  }
class C{  public static String reflectionToString(Object object){  return ReflectionToStringBuilder.toString(object);}  }
class C{  final public void println(){  Writer out=this.out;  if (out == null)   return;  try {    out.write(_newline,0,_newline.length);  } catch (  IOException e) {    log.log(Level.FINE,e.toString(),e);  }}  }
class C{  public static String toString(Type type){switch (type) {case SERVER_CONNECT:    return "server connect";case SERVER_DISCONNECT:  return "server disconnect";case SERVER_SET_ATTRIBUTE:return "server_set_attribute";case CLIENT_UPDATE_DATA:return "client_update_data";case CLIENT_UPDATE_ATTRIBUTE:return "client_update_attribute";case SERVER_SEND_MESSAGE:return "server_send_message";case CLIENT_SEND_MESSAGE:return "client_send_message";case CLIENT_STATUS:return "client_status";case CLIENT_CLEAR_DATA:return "client_clear_data";case CLIENT_DELETE_DATA:return "client_delete_data";case SERVER_DELETE_ATTRIBUTE:return "server_delete_attribute";case CLIENT_INITIAL_DATA:return "client_initial_data";default :log.error("Unknown type " + type);return "unknown";}}  }
class C{  public static double scaleByMultipler(double amount,String multiplier){  if (multiplier != null) {switch (multiplier.toLowerCase()) {case "hundred":      return amount * 100;case "k":case "thousand":    return amount * 1000;case "m":case "million":  return amount * 1000000;case "b":case "billion":return amount * 1000000000;case "t":case "trillion":return amount * 1000000000000L;default :return amount;}}return amount;}  }
class C{  public static void beforeTcpConnect(FileDescriptor fdObj,InetAddress address,int port) throws IOException {}  }
class C{  public DenseSensorMatrixEditor(){  super();  initComponents();  layoutComponents();}  }
class C{  public static String replace(String original,String search,String replace,boolean ignoreCase,boolean allOccurences){  if (original == null)   original="";  return replace(new StringBuffer(original),search,replace,ignoreCase,allOccurences).toString();}  }
class C{  public void visitEnd(){  if (cv != null) {    cv.visitEnd();  }}  }
class C{  @Override public void invalidate(){}  }
class C{  public static SerializationProvider createInstance(ExternalContext extContext){  String providerClass=findProviderClass(extContext);  SerializationProvider provider=getProviderInstance(providerClass);  if (provider.getClass() != JavaSerializationProvider.class) {    if (LOGGER.isLoggable(Level.FINE)) {      LOGGER.log(Level.FINE,"jsf.spi.serialization.provider_configured",new Object[]{provider.getClass().getName()});    }  }  return provider;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:49.880 -0500",hash_original_method="2BF3FED145657C6E98603A374CE15B79",hash_generated_method="11A5B00E7636E9CA07C81C697BF127BA") public RunningServiceInfo(Parcel in){  durationMillis=in.readLong();  serviceDetails=in.readString();}  }
class C{  public IndicesAliasesRequestBuilder addAlias(String index,String alias){  request.addAlias(alias,index);  return this;}  }
class C{  private static int unbox(Integer i){  return (i == null) ? 0 : i;}  }
class C{  @Override protected EClass eStaticClass(){  return GamlPackage.Literals.EXPRESSION;}  }
class C{  public synchronized Section createSection(final String name,final IAddress startAddress,final IAddress endAddress,final SectionPermission sectionPermission,final byte[] data) throws CouldntSaveDataException {  Preconditions.checkNotNull(name,"Error: name argument can not be null");  Preconditions.checkNotNull(startAddress,"Error: startAddress argument can not be null");  Preconditions.checkNotNull(endAddress,"Error: endAddress argument can not be null");  Preconditions.checkNotNull(sectionPermission,"Error: sectionPermission argument can not be null");  final Section section=backend.createSection(name,startAddress,endAddress,sectionPermission,data);  sections.add(section);  sectionsById.put(section.getId(),section);  return section;}  }
class C{  ZoneRules(ZoneOffset baseStandardOffset,ZoneOffset baseWallOffset,List<ZoneOffsetTransition> standardOffsetTransitionList,List<ZoneOffsetTransition> transitionList,List<ZoneOffsetTransitionRule> lastRules){  this.standardTransitions=new long[standardOffsetTransitionList.size()];  this.standardOffsets=new ZoneOffset[standardOffsetTransitionList.size() + 1];  this.standardOffsets[0]=baseStandardOffset;  for (int i=0; i < standardOffsetTransitionList.size(); i++) {    this.standardTransitions[i]=standardOffsetTransitionList.get(i).toEpochSecond();    this.standardOffsets[i + 1]=standardOffsetTransitionList.get(i).getOffsetAfter();  }  List<ZoneOffset> localTransitionOffsetList=new ArrayList<>();  localTransitionOffsetList.add(baseWallOffset);  for (  ZoneOffsetTransition trans : transitionList) {    localTransitionOffsetList.add(trans.getOffsetAfter());  }  this.wallOffsets=localTransitionOffsetList.toArray(new ZoneOffset[localTransitionOffsetList.size()]);  this.savingsInstantTransitions=new long[transitionList.size()];  for (int i=0; i < transitionList.size(); i++) {    this.savingsInstantTransitions[i]=transitionList.get(i).toEpochSecond();  }  if (lastRules.size() > 16) {    throw new IllegalArgumentException("Too many transition rules");  }  this.lastRules=lastRules.toArray(new ZoneOffsetTransitionRule[lastRules.size()]);}  }
class C{  public InputLocationMessageContent build(){  return new InputLocationMessageContent(latitude,longitude);}  }
class C{  public Object evaluate(String theSrcText,String testName) throws Exception {  parse(theSrcText,testName);  GroovyShell groovy=new GroovyShell(new CompilerConfiguration());  return groovy.run(theSrcText,"main",new ArrayList());}  }
class C{  public void executeCallback(SceKernelThreadInfo thread,int address,IAction afterAction,boolean returnVoid,int registerA0,int registerA1,int registerA2,int registerA3,int registerT0){  if (log.isDebugEnabled()) {    log.debug(String.format("Execute callback 0x%08X($a0=0x%08X, $a1=0x%08X, $a2=0x%08X, $a3=0x%08X, $t0=0x%08X), afterAction=%s, returnVoid=%b",address,registerA0,registerA1,registerA2,registerA3,registerT0,afterAction,returnVoid));  }  callAddress(thread,address,afterAction,returnVoid,false,new int[]{registerA0,registerA1,registerA2,registerA3,registerT0});}  }
class C{  static Header header(int level,String text){  Header header=new Header(Parser.JJTHEADER);  header.setLevel(level);  Text t=new Text(Parser.JJTTEXT);  t.jjtSetValue(text);  header.jjtAddChild(t,0);  return header;}  }
class C{  @SuppressWarnings("nls") @Override protected void writeShape(Shape s){{    s=getTransform().createTransformedShape(s);    PathIterator segments=s.getPathIterator(null);    double[] coordsCur=new double[6];    double[] pointPrev=new double[2];    for (int i=0; !segments.isDone(); i++, segments.next()) {      if (i > 0) {        write(" ");      }      int segmentType=segments.currentSegment(coordsCur);switch (segmentType) {case PathIterator.SEG_MOVETO:        write(coordsCur[0]," ",coordsCur[1]," m");      pointPrev[0]=coordsCur[0];    pointPrev[1]=coordsCur[1];  break;case PathIterator.SEG_LINETO:write(coordsCur[0]," ",coordsCur[1]," l");pointPrev[0]=coordsCur[0];pointPrev[1]=coordsCur[1];break;case PathIterator.SEG_CUBICTO:write(coordsCur[0]," ",coordsCur[1]," ",coordsCur[2]," ",coordsCur[3]," ",coordsCur[4]," ",coordsCur[5]," c");pointPrev[0]=coordsCur[4];pointPrev[1]=coordsCur[5];break;case PathIterator.SEG_QUADTO:double x1=pointPrev[0] + 2.0 / 3.0 * (coordsCur[0] - pointPrev[0]);double y1=pointPrev[1] + 2.0 / 3.0 * (coordsCur[1] - pointPrev[1]);double x2=coordsCur[0] + 1.0 / 3.0 * (coordsCur[2] - coordsCur[0]);double y2=coordsCur[1] + 1.0 / 3.0 * (coordsCur[3] - coordsCur[1]);double x3=coordsCur[2];double y3=coordsCur[3];write(x1," ",y1," ",x2," ",y2," ",x3," ",y3," c");pointPrev[0]=x3;pointPrev[1]=y3;break;case PathIterator.SEG_CLOSE:write("h");break;default :throw new IllegalStateException("Unknown path operation.");}}}}  }
class C{  private void pushRun(int runBase,int runLen){  this.runBase[stackSize]=runBase;  this.runLen[stackSize]=runLen;  stackSize++;}  }
class C{  public RandomFilter(final double minimumValue,final double maximumValue){  if (minimumValue > maximumValue) {    throw new IllegalArgumentException("maximumValue must be >= minimumValue");  }  this.minimumValue=minimumValue;  this.maximumValue=maximumValue;  difference=Math.abs(this.maximumValue - this.minimumValue);  random=new Random();}  }
class C{  private void subscribe(Throwable exception){  String action=context.getString(R.string.toast_sub_failed,(Object[])additionalArgs);  c.addAction(action);  Notify.toast(context,action,Toast.LENGTH_SHORT);}  }
class C{  private boolean shellFocusChanged(){  final boolean oldShellFocused=shellFocused;  shellFocused=shellIsFocused();  return (oldShellFocused != shellFocused);}  }
class C{  long insert(final String table,final String nullColumnHack,final ContentValues values,final boolean autoNotify){  final SQLiteDatabase database=getWritableDatabase();  final long insertRowId=database.insert(table,nullColumnHack,values);  if (autoNotify && (insertRowId >= 0)) {    notifyChange(table);  }  return insertRowId;}  }
class C{  private void drawShadows(Canvas canvas){  int height=(int)(1.5 * getItemHeight());  topShadow.setBounds(0,0,getWidth(),height);  topShadow.draw(canvas);  bottomShadow.setBounds(0,getHeight() - height,getWidth(),getHeight());  bottomShadow.draw(canvas);}  }
class C{  public void postDeregister(){}  }
class C{  public void deleteShortCut(Activity activity,String shortcutName){  Intent shortcut=new Intent("com.android.launcher.action.UNINSTALL_SHORTCUT");  shortcut.putExtra(Intent.EXTRA_SHORTCUT_NAME,shortcutName);  Intent intent=new Intent();  intent.setClass(activity,activity.getClass());  intent.setAction("android.intent.action.MAIN");  intent.addCategory("android.intent.category.LAUNCHER");  shortcut.putExtra(Intent.EXTRA_SHORTCUT_INTENT,intent);  activity.sendBroadcast(shortcut);}  }
class C{  public TcpDebugger(final DebuggerTemplate template,final DebugTargetSettings targetSettings){  this.template=Preconditions.checkNotNull(template,"IE00818: Debugger template argument can not be null");  debuggerConnection=new DebugConnection(this.template.getHost(),this.template.getPort());  debugTargetSettings=Preconditions.checkNotNull(targetSettings,"IE01670: targetSettings argument can not be null");  this.template.addListener(internalTemplateListener);}  }
class C{  protected boolean comparePatterns(int[] pattern1,int[] pattern2){  int len=pattern1.length;  for (int i=0; i < len; i++) {    if (pattern1[i] != pattern2[i]) {      return false;    }  }  return true;}  }
class C{  public void write(int b) throws IOException {  buf.put((byte)b);}  }
class C{  @Override public void write(int c) throws IOException {  out.write(c);}  }
class C{  public static synchronized String generateMessageID(){  UUID id=UUID.randomUUID();  return String.format("%016x%016x",id.getMostSignificantBits(),id.getLeastSignificantBits());}  }
class C{  public boolean isEmpty(){  return size() == 0;}  }
class C{  public void buildIndex(List<DataFileFooter> footerList){  segmentProperties=new SegmentProperties(footerList.get(0).getColumnInTable(),footerList.get(0).getSegmentInfo().getColumnCardinality());  BTreeBuilderInfo btreeBuilderInfo=new BTreeBuilderInfo(footerList,null);  BtreeBuilder blocksBuilder=new BlockBTreeBuilder();  blocksBuilder.build(btreeBuilderInfo);  dataRefNode=blocksBuilder.get();  for (  DataFileFooter footer : footerList) {    totalNumberOfRows+=footer.getNumberOfRows();  }}  }
class C{  public void insert(final AbstractInsnNode location,final AbstractInsnNode insn){  ++size;  AbstractInsnNode next=location.next;  if (next == null) {    last=insn;  } else {    next.prev=insn;  }  location.next=insn;  insn.next=next;  insn.prev=location;  cache=null;  insn.index=0;}  }
class C{  SVG(Picture picture,RectF bounds){  this.picture=picture;  this.bounds=bounds;}  }
class C{  @Override public void run(){  amIActive=true;  String outputHeader="";  int row, col;  double rowYCoord, value;  int progress=0;  double cellSizeX, cellSizeY;  int rows, topRow, bottomRow;  int cols;  int inputRow, inputCol;  double inputX, inputY;  double east;  double west;  double north;  double south;  BoundingBox box;  double[][] geometry;  int numPoints, numParts, i, part, numEdges;  int stCol, endCol;  int startingPointInPart, endingPointInPart;  double x1, y1, x2, y2, xPrime;  boolean foundIntersection;  ArrayList<Integer> edgeList=new ArrayList<>();  DecimalFormat df=new DecimalFormat("###,###,###,###");  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  String inputFilesString=args[0];  String[] inputFiles=inputFilesString.split(";");  int numFiles=inputFiles.length;  String clipFile=args[1];  boolean maintainInputDimensions=Boolean.parseBoolean(args[2]);  if (inputFilesString.isEmpty() || numFiles < 1) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    long heapSize=Runtime.getRuntime().totalMemory();    int flushSize=(int)(heapSize / 32);    int j, numCellsToWrite;    PriorityQueue<RowPriorityGridCell> pq=new PriorityQueue<>(flushSize);    ShapeFile clip=new ShapeFile(clipFile);    BoundingBox clipBox=new BoundingBox();    clipBox.setMaxX(clip.getxMax());    clipBox.setMaxY(clip.getyMax());    clipBox.setMinX(clip.getxMin());    clipBox.setMinY(clip.getyMin());    if (clip.getShapeType().getBaseType() != ShapeType.POLYGON) {      showFeedback("The input shapefile must be of a 'polygon' data type.");      return;    }    ArrayList<RecordInfo> myList=new ArrayList<>();    for (    ShapeFileRecord record : clip.records) {      i=record.getRecordNumber();      box=getBoundingBoxFromShapefileRecord(record);      myList.add(new RecordInfo(box.getMaxY(),i));    }    Collections.sort(myList);    for (int k=0; k < numFiles; k++) {      WhiteboxRaster input=new WhiteboxRaster(inputFiles[k],"r");      outputHeader=inputFiles[k].replace(".dep","_clipped.dep");      double noData=input.getNoDataValue();      DataType dataType=input.getDataType();      WhiteboxRaster output;      if (!maintainInputDimensions) {        cellSizeX=input.getCellSizeX();        cellSizeY=input.getCellSizeY();        north=clip.getyMax() + cellSizeY / 2.0;        if (input.getNorth() < north) {          north=input.getNorth();        }        south=clip.getyMin() - cellSizeY / 2.0;        if (input.getSouth() > south) {          south=input.getSouth();        }        east=clip.getxMax() + cellSizeX / 2.0;        if (input.getEast() < east) {          east=input.getEast();        }        west=clip.getxMin() - cellSizeX / 2.0;        if (input.getWest() > west) {          west=input.getWest();        }        rows=(int)(Math.ceil((north - south) / cellSizeY));        cols=(int)(Math.ceil((east - west) / cellSizeX));        east=west + cols * cellSizeX;        south=north - rows * cellSizeY;        output=new WhiteboxRaster(outputHeader,north,south,east,west,rows,cols,input.getDataScale(),dataType,noData,noData);      } else {        output=new WhiteboxRaster(outputHeader,"rw",inputFiles[k],dataType,noData);      }      output.setPreferredPalette(input.getPreferredPalette());      pq.clear();      RowPriorityGridCell cell;      int numRecords=clip.getNumberOfRecords();      int count=0;      int progressCount=(int)(numRecords / 100.0);      if (progressCount <= 0) {        progressCount=1;      }      ShapeFileRecord record;      for (      RecordInfo ri : myList) {        record=clip.getRecord(ri.recNumber - 1);        geometry=getXYFromShapefileRecord(record);        numPoints=geometry.length;        numParts=partData.length;        for (part=0; part < numParts; part++) {          if (!partHoleData[part]) {            box=new BoundingBox();            startingPointInPart=partData[part];            if (part < numParts - 1) {              endingPointInPart=partData[part + 1];            } else {              endingPointInPart=numPoints;            }            for (i=startingPointInPart; i < endingPointInPart; i++) {              if (geometry[i][1] < box.getMinY()) {                box.setMinY(geometry[i][1]);              }              if (geometry[i][1] > box.getMaxY()) {                box.setMaxY(geometry[i][1]);              }            }            topRow=output.getRowFromYCoordinate(box.getMaxY());            bottomRow=output.getRowFromYCoordinate(box.getMinY());            for (row=topRow; row <= bottomRow; row++) {              edgeList.clear();              foundIntersection=false;              rowYCoord=output.getYCoordinateFromRow(row);              for (i=startingPointInPart; i < endingPointInPart - 1; i++) {                if (isBetween(rowYCoord,geometry[i][1],geometry[i + 1][1])) {                  y1=geometry[i][1];                  y2=geometry[i + 1][1];                  if (y2 != y1) {                    x1=geometry[i][0];                    x2=geometry[i + 1][0];                    xPrime=(x1 + (rowYCoord - y1) / (y2 - y1) * (x2 - x1));                    edgeList.add(new Integer(output.getColumnFromXCoordinate(xPrime)));                    foundIntersection=true;                  }                }              }              if (foundIntersection) {                numEdges=edgeList.size();                if (numEdges == 2) {                  stCol=Math.min(edgeList.get(0),edgeList.get(1));                  endCol=Math.max(edgeList.get(0),edgeList.get(1));                  for (col=stCol; col <= endCol; col++) {                    if (maintainInputDimensions) {                      value=input.getValue(row,col);                    } else {                      inputX=output.getXCoordinateFromColumn(col);                      inputCol=input.getColumnFromXCoordinate(inputX);                      inputY=output.getYCoordinateFromRow(row);                      inputRow=input.getRowFromYCoordinate(inputY);                      value=input.getValue(inputRow,inputCol);                    }                    pq.add(new RowPriorityGridCell(row,col,value));                  }                } else {                  Integer[] edgeArray=new Integer[numEdges];                  edgeList.toArray(edgeArray);                  Arrays.sort(edgeArray);                  boolean fillFlag=true;                  for (i=0; i < numEdges - 1; i++) {                    stCol=edgeArray[i];                    endCol=edgeArray[i + 1];                    if (fillFlag) {                      for (col=stCol; col <= endCol; col++) {                        if (maintainInputDimensions) {                          value=input.getValue(row,col);                        } else {                          inputX=output.getXCoordinateFromColumn(col);                          inputCol=input.getColumnFromXCoordinate(inputX);                          inputY=output.getYCoordinateFromRow(row);                          inputRow=input.getRowFromYCoordinate(inputY);                          value=input.getValue(inputRow,inputCol);                        }                        pq.add(new RowPriorityGridCell(row,col,value));                      }                    }                    fillFlag=!fillFlag;                  }                }              }            }          }        }        if (pq.size() >= flushSize) {          j=0;          numCellsToWrite=pq.size();          do {            cell=pq.poll();            output.setValue(cell.row,cell.col,cell.z);            j++;            if (j % 1000 == 0) {              if (cancelOp) {                cancelOperation();                return;              }              updateProgress("Writing to Output (" + df.format(j) + " of "+ df.format(numCellsToWrite)+ "):",(int)(j * 100.0 / numCellsToWrite));            }          } while (pq.size() > 0);        }        if (cancelOp) {          cancelOperation();          return;        }        count++;        if (count % progressCount == 0) {          progress++;          updateProgress(progress);        }      }      j=0;      numCellsToWrite=pq.size();      do {        cell=pq.poll();        output.setValue(cell.row,cell.col,cell.z);        j++;        if (j % 1000 == 0) {          if (cancelOp) {            cancelOperation();            return;          }          updateProgress("Writing to Output (" + df.format(j) + " of "+ df.format(numCellsToWrite)+ "):",(int)(j * 100.0 / numCellsToWrite));        }      } while (pq.size() > 0);      output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      output.addMetadataEntry("Created on " + new Date());      output.flush();      output.close();    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public IPRangeNode findAddr(InetAddress addr){  for (  IPRangeNode c : this.list) {    IPRangeNode result=c.findAddr(addr);    if (result != null)     return result;  }  return null;}  }
class C{  public List<ManagedResource> cleanupBridgeClientResources(String clientId){  List<ManagedResource> returnedResources=new ArrayList<ManagedResource>();  String compatibleId="id_" + MBeanUtil.makeCompliantMBeanNameProperty(clientId);synchronized (this.managedStatisticsResourcesMap) {    Set<Entry<StatResource,StatisticResourceJmxImpl>> entrySet=this.managedStatisticsResourcesMap.entrySet();    for (Iterator<Entry<StatResource,StatisticResourceJmxImpl>> it=entrySet.iterator(); it.hasNext(); ) {      Entry<StatResource,StatisticResourceJmxImpl> entry=it.next();      StatisticResourceJmxImpl resource=entry.getValue();      if (resource.getMBeanName().contains(compatibleId)) {        it.remove();        returnedResources.add(resource);      }    }  }  return returnedResources;}  }
class C{  public PsiMember add(PsiMember member,GdslMembersHolderConsumer consumer){  final DelegatedMembersHolder holder=new DelegatedMembersHolder();  holder.addMember(member);  consumer.addMemberHolder(holder);  return member;}  }
class C{  public void layoutChanged(int axis){  if (axis == majorAxis) {    majorAllocValid=false;  } else {    minorAllocValid=false;  }}  }
class C{  public static ComponentName uriToComponentName(Uri appUri){  if (appUri == null)   return null;  if (!ContentResolver.SCHEME_CONTENT.equals(appUri.getScheme()))   return null;  if (!AUTHORITY.equals(appUri.getAuthority()))   return null;  List<String> pathSegments=appUri.getPathSegments();  if (pathSegments.size() != 3)   return null;  if (!APPLICATION_PATH.equals(pathSegments.get(0)))   return null;  String packageName=pathSegments.get(1);  String name=pathSegments.get(2);  return new ComponentName(packageName,name);}  }
class C{  public PolynomialGF2mSmallM multWithMonomial(int k){  int[] resultCoeff=multWithMonomial(coefficients,k);  return new PolynomialGF2mSmallM(field,resultCoeff);}  }
class C{  final public int indexOf(final MutableString pattern,final int from){  final int n=pattern.length();  if (n == 0)   return from > length() ? length() : (from < 0 ? 0 : from);  if (n == 1)   return indexOf(pattern.array[n - 1],from);  return indexOf(pattern.array,n,from,buildFilter(pattern.array,n));}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case MappingPackage.FUNCTION_BLOCK_ATTRIBUTE_SOURCE__ATTRIBUTE:    return attribute != ATTRIBUTE_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  @Override public void start(){  try {    doc=XMLUtils.newXMLDocument();    doc.appendChild(doc.createElement("interaction"));    rootNode=XMLUtils.getMainNode(doc);  } catch (  RuntimeException e) {    log.warning("could not create dialogue recorder");  }}  }
class C{  public void reconfigureDisks(VirtualMachineConfigSpec vmConfigSpec,ManagedObjectReference vmwInstance) throws Exception {  logger.debug("");  long systemDiskMB=(long)paramHandler.getConfigDiskSpaceMB();  VirtualMachineConfigInfo configSpec=(VirtualMachineConfigInfo)vmw.getServiceUtil().getDynamicProperty(vmwInstance,"config");  List<VirtualDevice> devices=configSpec.getHardware().getDevice();  VirtualDisk vdSystemDisk=getVMSystemDisk(devices,configSpec.getName());  configureSystemDisk(vmConfigSpec,systemDiskMB,vdSystemDisk);  configureDataDisks(vmConfigSpec,devices,vdSystemDisk);}  }
class C{  public static String format(Object value){  if (value instanceof Byte)   return formatByte((Byte)value);  if (value instanceof Short)   return formatShort((Short)value);  if (value instanceof Long)   return formatLong((Long)value);  if (value instanceof Float)   return formatFloat((Float)value);  if (value instanceof Double)   return formatDouble((Double)value);  if (value instanceof Character)   return formatChar((Character)value);  if (value instanceof String)   return formatString((String)value);  if (value instanceof Integer || value instanceof Boolean)   return value.toString(); else   throw new IllegalArgumentException("Argument is not a primitive type or a string; it " + ((value == null) ? "is a null value." : "has class " + value.getClass().getName()) + ".");}  }
class C{  @NotNull public QueryBuilder append(@NotNull String sql){  return append(sql,emptyList());}  }
class C{  private void unifyUsernameByName(){  for (  Entry<String,List<LogCommitInfo>> entry : devNameMap.entrySet()) {    if (!entry.getKey().isEmpty()) {      List<String> userNames=getUserNamesList(entry.getValue());      if (userNames.size() > 1) {        String newUsername=getNewUserName(userNames);        for (        LogCommitInfo commit : entry.getValue()) {          setNewUsername(commit,newUsername);        }      }    }  }}  }
class C{  void createEntry(int hash,Object key,int value,int bucketIndex){  Entry e=table[bucketIndex];  table[bucketIndex]=new Entry(hash,key,value,e);  size++;}  }
class C{  public boolean isEOFRecord(byte[] record){  for (int i=0, sz=getRecordSize(); i < sz; ++i) {    if (record[i] != 0) {      return false;    }  }  return true;}  }
class C{  public void send(Message message){  if (channel.isOperational()) {    addOutQueue(message);  }}  }
class C{  private Leg createLowerLeg(){  Leg legDown=population.getFactory().createLeg(TransportMode.car);  List<Id<Link>> pathDown=new ArrayList<>();  pathDown.add(Id.createLinkId("1_2"));  if (!this.simulateInflowCap24) {    pathDown.add(Id.createLinkId("2_4"));  } else {    pathDown.add(Id.createLinkId("2_24"));    pathDown.add(Id.createLinkId("24_4"));  }  if (!this.simulateInflowCap45) {    pathDown.add(Id.createLinkId("4_5"));  } else {    pathDown.add(Id.createLinkId("4_45"));    pathDown.add(Id.createLinkId("45_5"));  }  Route routeDown=new LinkNetworkRouteImpl(Id.createLinkId("0_1"),pathDown,Id.createLinkId("5_6"));  legDown.setRoute(routeDown);  return legDown;}  }
class C{  public void testCase18(){  byte aBytes[]={0};  byte bBytes[]={0};  byte rBytes[]={0};  int aSign=1;  int bSign=1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.add(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",0,result.signum());}  }
class C{  @Override public void updateNString(String columnLabel,String x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateNString(" + quote(columnLabel) + ", "+ quote(x)+ ");");    }    update(columnLabel,x == null ? ValueNull.INSTANCE : ValueString.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  private void tellIgnorePostman(final Player receiver,final String message){  if (!receiver.getName().equals("postman")) {    receiver.sendPrivateText(message);  }}  }
class C{  public void delete(final byte[] pk) throws IOException {  this.table.delete(pk);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:20.224 -0500",hash_original_method="512FC5029F1C2BD4A7A7DEBEE6E3C841",hash_generated_method="2DA1E6EA2939186445D232E9DDEB54FE") public void drawRGB(int r,int g,int b){  native_drawRGB(mNativeCanvas,r,g,b);}  }
class C{  public static int size(String str){  if (str == null)   return 0;  int length=str.length();  int size=length;  try {    size=str.getBytes("UTF-8").length;  } catch (  UnsupportedEncodingException e) {    log.log(Level.SEVERE,str,e);  }  return size;}  }
class C{  public AssertionError(){}  }
class C{  State(final boolean isStable,final State to,final State from){  this.isStable=isStable;  this.to=to;  this.from=from;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return UserEvent.getPrettyEvtName(stack.getUIMgrSafe().getUECodeForIRCode(getLong(stack)));}  }
class C{  public void dispose(){  if (pingLabelsMap != null) {    pingLabelsMap.clear();    pingLabelsMap=null;  }  if (itemsManaged != null) {    itemsManaged.clear();    itemsManaged=null;  }  if (folders != null) {    folders=null;  }  if (sashes != null) {    sashes=null;  }}  }
class C{  protected void flushCacheWithAppend(byte bufferToAppend[],int off,int len) throws IOException {  byte chunkHeader[]=(Integer.toHexString(cachePosition + len) + "\r\n").getBytes("US-ASCII");  stream.write(chunkHeader,0,chunkHeader.length);  stream.write(cache,0,cachePosition);  stream.write(bufferToAppend,off,len);  stream.write(ENDCHUNK,0,ENDCHUNK.length);  cachePosition=0;}  }
class C{  public void writeConfig(String XMLFile){  try {    BufferedWriter bw=new BufferedWriter(new FileWriter(XMLFile));    bw.write("<SelectiveAccessHandlerConfig>\n");    bw.write("<page>" + XMLCIT(pageHandling) + "</page>\n");    bw.write("<firstparagraph>" + XMLCIT(pageHandling) + "</firstparagraph>\n");    for (    String key : sectionHandling.keySet()) {      bw.write("<section name=\"" + key + "\">\n");      bw.write(XMLSIT(sectionHandling.get(key)));      bw.write("</section>\n");    }    bw.write("<SelectiveAccessHandlerConfig>\n");    bw.close();  } catch (  IOException e) {    System.err.println(e);  }}  }
class C{  public String toString(){  try {    return this.toString(0);  } catch (  Exception e) {    return null;  }}  }
class C{  public LabelledPortrayal2D(SimplePortrayal2D child,String label,Paint paint,boolean onlyLabelWhenSelected){  this(child,DEFAULT_OFFSET_X,DEFAULT_OFFSET_Y,DEFAULT_SCALE_X,DEFAULT_SCALE_Y,new Font("SansSerif",Font.PLAIN,10),ALIGN_LEFT,label,paint,onlyLabelWhenSelected);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void jMenuFileExit_actionPerformed(ActionEvent e){  System.exit(0);}  }
class C{  protected String encodeCookie(SerializableCookie cookie){  if (cookie == null)   return null;  ByteArrayOutputStream os=new ByteArrayOutputStream();  try {    ObjectOutputStream outputStream=new ObjectOutputStream(os);    outputStream.writeObject(cookie);  } catch (  IOException e) {    Log.d(LOG_TAG,"IOException in encodeCookie",e);    return null;  }  return byteArrayToHexString(os.toByteArray());}  }
class C{  public ArffTableCellRenderer(Color missingColor,Color missingColorSelected){  this(missingColor,missingColorSelected,Color.RED,Color.RED.darker());}  }
class C{  private boolean exposed(int modifiers){  return 0 != (modifiers & (Modifier.PUBLIC | Modifier.PROTECTED));}  }
class C{  protected FinalizablePhantomReference(T referent,FinalizableReferenceQueue queue){  super(referent,queue.queue);  queue.cleanUp();}  }
class C{  public static double PPVNPVmaxFitness(GEPIndividual ind){  return (1000.0);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String prop=getString(stack);  SeriesInfo si=getSeriesInfo(stack);  return si.getProperty(prop);}  }
class C{  public void redo(){  super.redo();  this.object.restoreState(postState);}  }
class C{  public static boolean isFullJID(String jid){  if (parseName(jid).length() <= 0 || parseServer(jid).length() <= 0 || parseResource(jid).length() <= 0) {    return false;  }  return true;}  }
class C{  public void closeAll(){  for (  EndpointServer server : getList()) {    server.close();  }}  }
class C{  private boolean updateHoveredStatus(final Point point,final ExecutionUnit process,final WorkflowAnnotations annotations){  if (annotations != null) {    if (model.getSelected() != null && model.getSelected().getProcess().equals(process)) {      if (model.getSelected().getLocation().contains(point)) {        model.setHovered(model.getSelected(),AnnotationResizeHelper.getResizeDirectionOrNull(model.getSelected(),point));        return true;      }    }    for (    WorkflowAnnotation anno : annotations.getAnnotationsEventOrder()) {      if (anno.getLocation().contains(point)) {        model.setHovered(anno,AnnotationResizeHelper.getResizeDirectionOrNull(anno,point));        return true;      }    }  }  return false;}  }
class C{  public RatNum sub(RatNum arg){  checkRep();  return this.add(arg.negate());}  }
class C{  @RequestMapping(value="/{cubeName}/build2",method={RequestMethod.PUT}) @ResponseBody public JobInstance build(@PathVariable String cubeName,@RequestBody JobBuildRequest2 req){  return rebuild(cubeName,req);}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public synchronized void removeListener(StatementAwareUpdateListener listener){  if (listener == null) {    throw new IllegalArgumentException("Null listener reference supplied");  }  int index=-1;  for (int i=0; i < stmtAwareListeners.length; i++) {    if (stmtAwareListeners[i] == listener) {      index=i;      break;    }  }  if (index == -1) {    return;  }  stmtAwareListeners=(StatementAwareUpdateListener[])CollectionUtil.arrayShrinkRemoveSingle(stmtAwareListeners,index);}  }
class C{  @Nullable @Override public Workload findById(@Nonnull Integer id){  Workload workload=null;  try {    begin();    workload=getEntityManager().find(Workload.class,id);    if (workload != null) {      workload.getJobConfiguration();      for (      TestPlan tp : workload.getTestPlans()) {        for (        ScriptGroup sg : tp.getScriptGroups()) {          sg.getScriptGroupSteps();        }      }    }    commit();  } catch (  Exception e) {    e.printStackTrace();    throw new RuntimeException(e);  } finally {    cleanup();  }  return workload;}  }
class C{  public static void main(String[] args) throws Exception {  SpringApplication.run(DatabaseService.class,args);}  }
class C{  public TypeInstanceReference loadTypeInstanceReference(final Integer typeInstanceId,final BigInteger address,final Integer position,final Integer expressionId) throws CouldntLoadDataException {  Preconditions.checkNotNull(typeInstanceId,"Error: typeInstanceId argument can not be null");  Preconditions.checkNotNull(address,"Error: address argument can not be null");  Preconditions.checkNotNull(position,"Error: position argument can not be null");  Preconditions.checkNotNull(expressionId,"Error: expressionId argument can not be null");  final RawTypeInstanceReference rawReference=provider.loadTypeInstanceReference(module,typeInstanceId,address,position,expressionId);  final TypeInstance typeInstance=instancesById.get(rawReference.getTypeInstanceId());  final INaviView view=module.getContent().getViewContainer().getView(rawReference.getViewId());  final TypeInstanceReference reference=new TypeInstanceReference(new CAddress(address),position,Optional.<INaviOperandTreeNode>absent(),typeInstance,view);  referenceLookup.put(new InstanceReferenceLookup(new CAddress(address),position,expressionId),reference);  return reference;}  }
class C{  public boolean writeIndex(int[][] indexData,int layerType,double[] extents){  try {    _leos.writeInt(9994);    _leos.writeInt(0);    _leos.writeInt(0);    _leos.writeInt(0);    _leos.writeInt(0);    _leos.writeInt(0);    _leos.writeInt(indexData[0].length * 4 + 50);    _leos.writeLEInt(1000);    _leos.writeLEInt(layerType);    if (extents[0] == 90f && extents[1] == 180f && extents[2] == -90f && extents[3] == -180f) {      _leos.writeLEDouble(-180.0);      _leos.writeLEDouble(-90.0);      _leos.writeLEDouble(180.0);      _leos.writeLEDouble(90.0);    } else {      _leos.writeLEDouble((float)extents[1]);      _leos.writeLEDouble((float)extents[0]);      _leos.writeLEDouble((float)extents[3]);      _leos.writeLEDouble((float)extents[2]);    }    _leos.writeLEDouble(0.0);    _leos.writeLEDouble(0.0);    _leos.writeLEDouble(0.0);    _leos.writeLEDouble(0.0);    for (int i=0; i <= indexData[0].length - 1; i++) {      _leos.writeInt(indexData[0][i]);      _leos.writeInt(indexData[1][i]);    }    _leos.flush();    _leos.close();  } catch (  Exception e) {    System.out.println("exception=" + e.toString());    return false;  }  return true;}  }
class C{  public static byte[] fromString(String str){  ByteArrayOutputStream bs=new ByteArrayOutputStream();  byte[] raw=str.getBytes();  for (int i=0; i < raw.length; i++) {    if (!Character.isWhitespace((char)raw[i]))     bs.write(raw[i]);  }  byte[] in=bs.toByteArray();  if (in.length % 4 != 0) {    return null;  }  bs.reset();  DataOutputStream ds=new DataOutputStream(bs);  for (int i=0; i < (in.length + 3) / 4; i++) {    short[] s=new short[4];    short[] t=new short[3];    for (int j=0; j < 4; j++)     s[j]=(short)Base64.indexOf(in[i * 4 + j]);    t[0]=(short)((s[0] << 2) + (s[1] >> 4));    if (s[2] == 64) {      t[1]=t[2]=(short)(-1);      if ((s[1] & 0xF) != 0)       return null;    } else     if (s[3] == 64) {      t[1]=(short)(((s[1] << 4) + (s[2] >> 2)) & 0xFF);      t[2]=(short)(-1);      if ((s[2] & 0x3) != 0)       return null;    } else {      t[1]=(short)(((s[1] << 4) + (s[2] >> 2)) & 0xFF);      t[2]=(short)(((s[2] << 6) + s[3]) & 0xFF);    }    try {      for (int j=0; j < 3; j++)       if (t[j] >= 0)       ds.writeByte(t[j]);    } catch (    IOException e) {    }  }  return bs.toByteArray();}  }
class C{  public static EPType collectionOfSingleValue(Class collectionComponentType){  if (collectionComponentType == null) {    throw new IllegalArgumentException("Invalid null collection component type");  }  return new ClassMultiValuedEPType(Collection.class,collectionComponentType);}  }
class C{  public <T>T deepCopy(Object object,@NonNull Class<T> resultClass){  String json=gson.toJson(object);  return gson.fromJson(json,resultClass);}  }
class C{  public void doDiscovery(){  if (D)   Log.d(TAG,"doDiscovery()");  if (mBluetoothAdapter.isDiscovering()) {    mBluetoothAdapter.cancelDiscovery();  }  mBluetoothAdapter.startDiscovery();}  }
class C{  public void insert(int[] arr){  if (arr.length == 0)   return;  if (this.head == null) {    this.head=new ULLNode(null,arr);  } else {    ULLNode tmp=this.head;    while (tmp.getNext() != null) {      tmp=tmp.getNext();    }    tmp.setNext(new ULLNode(null,arr));  }  this.size+=arr.length;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:18.860 -0500",hash_original_method="3AF97CBDFDCCD2B098621E28E1AC9FE5",hash_generated_method="2455CF65E192FB55C11922832421064B") public ServerHandshakeImpl(Object owner){  super(owner);  status=NEED_UNWRAP;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.N4_GETTER_DECLARATION__DECLARED_MODIFIERS:    return declaredModifiers != null && !declaredModifiers.isEmpty();case N4JSPackage.N4_GETTER_DECLARATION__OWNER:  return basicGetOwner() != null;case N4JSPackage.N4_GETTER_DECLARATION__ANNOTATION_LIST:return annotationList != null;}return super.eIsSet(featureID);}  }
class C{  @SuppressWarnings("unused") public long create_handler_atom(MP4DataStream bitstream) throws IOException {  create_full_atom(bitstream);  int qt_componentType=(int)bitstream.readBytes(4);  handlerType=(int)bitstream.readBytes(4);  int qt_componentManufacturer=(int)bitstream.readBytes(4);  int qt_componentFlags=(int)bitstream.readBytes(4);  int qt_componentFlagsMask=(int)bitstream.readBytes(4);  readed+=20;  int length=(int)(size - readed - 1);  String trackName=bitstream.readString(length);  log.trace("Track name: {}",trackName);  readed+=length;  return readed;}  }
class C{  public TypeInformationPopup(final Shell parent,final Point anchor,final String html){  super(parent,INFOPOPUPRESIZE_SHELLSTYLE,true,true,false,true,false,null,null);  this.anchor=anchor;  this.html=html;}  }
class C{  public void save(DataOutput out) throws IOException {  out.writeLong(myTimestamp);}  }
class C{  public OptionSet addIfMatch(byte[] etag){  if (etag == null)   throw new IllegalArgumentException("If-Match option must not be null");  if (etag.length > 8)   throw new IllegalArgumentException("If-Match option must be smaller or equal to 8 bytes: " + Utils.toHexString(etag));  getIfMatch().add(etag);  return this;}  }
class C{  public HasChildQueryBuilder innerHit(QueryInnerHitBuilder innerHit){  this.innerHit=innerHit;  return this;}  }
class C{  public void dumpMessage(PrintStream out) throws MessagingException {  out.println("===== Dumping message =====");  out.println("Envelope sender: " + this.getEnvelopeSender());  out.println("Envelope recipient: " + this.getEnvelopeReceiver());  String content=new String(this.getData());  out.println(content);  out.println("===== End message dump =====");}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.BINARY_INT_LITERAL;}  }
class C{  public static ValidationException parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  ValidationException object=new ValidationException();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");    if ("true".equals(nillableValue) || "1".equals(nillableValue)) {      while (!reader.isEndElement())       reader.next();      return object;    }    java.util.Vector handledAttributes=new java.util.Vector();    while (!reader.isEndElement()) {      if (reader.isStartElement()) {        if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org","ValidationException").equals(reader.getName())) {          nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");          if ("true".equals(nillableValue) || "1".equals(nillableValue)) {            object.setValidationException(null);            reader.next();          } else {            object.setValidationException(ValidationExceptionBean.Factory.parse(reader));          }        } else {          throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());        }      } else {        reader.next();      }    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public boolean isActive(AbstractPlugin plugin){  return activePlugins.contains(plugin);}  }
class C{  public void leaveActiveDirectory(String user,String password) throws Exception {  getService().leaveActiveDirectory(user,password,this.getServiceContext());}  }
class C{  private final boolean lookbehind(char c,int n){  boolean isToken;  int lookBehindPos=m_queueMark - (n + 1);  if (lookBehindPos >= 0) {    String lookbehind=(String)m_ops.m_tokenQueue.elementAt(lookBehindPos);    if (lookbehind.length() == 1) {      char c0=(lookbehind == null) ? '|' : lookbehind.charAt(0);      isToken=(c0 == '|') ? false : (c0 == c);    } else {      isToken=false;    }  } else {    isToken=false;  }  return isToken;}  }
class C{  protected static String resourceToHandle(final String project,final IResource resource){  return JavaRefactoringDescriptorUtil.resourcePathToHandle(project,resource.getFullPath());}  }
class C{  private String dequeueStubActivity(ActivityInfo ai,String realActivityClazz){  if (ai.launchMode == ActivityInfo.LAUNCH_MULTIPLE) {    Resources.Theme theme=Small.getContext().getResources().newTheme();    theme.applyStyle(ai.getThemeResource(),true);    TypedArray sa=theme.obtainStyledAttributes(new int[]{android.R.attr.windowIsTranslucent});    boolean translucent=sa.getBoolean(0,false);    sa.recycle();    return translucent ? STUB_ACTIVITY_TRANSLUCENT : STUB_ACTIVITY_PREFIX;  }  int availableId=-1;  int stubId=-1;  int countForMode=STUB_ACTIVITIES_COUNT;  int countForAll=countForMode * 3;  if (mStubQueue == null) {    mStubQueue=new String[countForAll];  }  int offset=(ai.launchMode - 1) * countForMode;  for (int i=0; i < countForMode; i++) {    String usedActivityClazz=mStubQueue[i + offset];    if (usedActivityClazz == null) {      if (availableId == -1)       availableId=i;    } else     if (usedActivityClazz.equals(realActivityClazz)) {      stubId=i;    }  }  if (stubId != -1) {    availableId=stubId;  } else   if (availableId != -1) {    mStubQueue[availableId + offset]=realActivityClazz;  } else {    Log.e(TAG,"Launch mode " + ai.launchMode + " is full");  }  return STUB_ACTIVITY_PREFIX + ai.launchMode + availableId;}  }
class C{  public <T extends Fragment>T into(T fragment){  fragment.setArguments(get());  return fragment;}  }
class C{  static boolean shouldUpdateStyle(PropertyChangeEvent event){  LookAndFeel laf=UIManager.getLookAndFeel();  return (laf instanceof SynthLookAndFeel && ((SynthLookAndFeel)laf).shouldUpdateStyleOnEvent(event));}  }
class C{  public MapBuilder<K,V> withKeySerializer(OffHeapSerializer<K> serializer){  this.keySerializer=serializer;  return this;}  }
class C{  protected List<? extends Itemset> frequentItemsets(List<? extends Itemset> candidates,Relation<BitVector> relation,int needed,DBIDs ids,ArrayModifiableDBIDs survivors,int length){  if (candidates.isEmpty()) {    return Collections.emptyList();  }  Itemset first=candidates.get(0);  if (candidates.size() > length * length * length* 100 && first instanceof SparseItemset) {    @SuppressWarnings("unchecked") List<SparseItemset> sparsecand=(List<SparseItemset>)candidates;    return frequentItemsetsSparse(sparsecand,relation,needed,ids,survivors,length);  }  for (DBIDIter iditer=ids.iter(); iditer.valid(); iditer.advance()) {    BitVector bv=relation.get(iditer);    int lives=0;    for (    Itemset candidate : candidates) {      if (candidate.containedIn(bv)) {        candidate.increaseSupport();        ++lives;      }    }    if (lives > length) {      survivors.add(iditer);    }  }  List<Itemset> frequent=new ArrayList<>(candidates.size());  for (Iterator<? extends Itemset> iter=candidates.iterator(); iter.hasNext(); ) {    final Itemset candidate=iter.next();    if (candidate.getSupport() >= needed) {      frequent.add(candidate);    }  }  return frequent;}  }
class C{  public final void writeTo(ByteBuffer buf){  if (getLength() > 0) {    if (this.part instanceof byte[]) {      buf.put((byte[])this.part);    } else     if (this.part instanceof StoredObject) {      StoredObject c=(StoredObject)this.part;      ByteBuffer bb=c.createDirectByteBuffer();      if (bb != null) {        buf.put(bb);      } else {        int bytesToSend=c.getDataSize();        long addr=c.getAddressForReadingData(0,bytesToSend);        while (bytesToSend > 0) {          buf.put(AddressableMemoryManager.readByte(addr));          addr++;          bytesToSend--;        }      }    } else {      HeapDataOutputStream hdos=(HeapDataOutputStream)this.part;      hdos.sendTo(buf);      hdos.rewind();    }  }}  }
class C{  public boolean isRestrictedSnapshotRelocateSupported(){  return restrictedSnapshotRelocateSupported;}  }
class C{  public void rewindToWS(){  if (nextOffset == 0) {    return;  }  nextOffset--;  while (nextOffset > 0 && !Character.isWhitespace(s.charAt(nextOffset))) {    nextOffset--;  }  this.offset=nextOffset - 1;}  }
class C{  public IntVector toIntVector(){  return new IntVector((int)x,(int)y,(int)z);}  }
class C{  public Tree(final com.google.security.zynamics.zylib.types.trees.Tree<ObjectType> tree){  m_rootNode=new TreeNode<ObjectType>(tree.getRootNode().getObject());  generate(m_rootNode,tree.getRootNode());}  }
class C{  @Override protected void paintAxesLabels(){  super.paintAxesLabels();  final boolean[] groupUseds=new boolean[10];  for (  final DataModel<ControlGroupChartDataSet> model : dataModelList)   for (  final ControlGroupChartDataSet dataSet : model.getDataSetList()) {    for (int group=0; group < 10; group++)     groupUseds[group]|=!dataSet.controlGroupEventLists[group].isEmpty();  }  fillGroupYs();  final FontMetrics fontMetrics=g.getFontMetrics();  g.setColor(COLOR_AXIS_LABELS);  for (int group=0; group < 10; group++) {    if (!groupUseds[group])     continue;    g.drawString(GROUP_LABELS[group],drawingRect.x1 - fontMetrics.stringWidth(GROUP_LABELS[group]) - 1,groupYs[group]);  }}  }
class C{  protected void writeLocalReferences(ForeignKey key,StringBuilder ddl){  for (int idx=0; idx < key.getReferenceCount(); idx++) {    if (idx > 0) {      ddl.append(", ");    }    printIdentifier(key.getReference(idx).getLocalColumnName(),ddl);  }}  }
class C{  public static char popParameterChar(){  return parametersChar.pop();}  }
class C{  private DebuggerHelpers(){}  }
class C{  public static OFGroup createL3ECMP(U32 id){  return OFGroup.of(0 | (id.getRaw() & 0x0FffFFff) | (OFDPAGroupType.L3_ECMP << 28));}  }
class C{  public synchronized void loadDB(DAGNode node,String contextId){  Map<String,DAGNode> contextNodes=nodes.get(contextId);  if (contextNodes == null) {    contextNodes=new HashMap<>();    nodes.put(contextId,contextNodes);  }  add(node,contextId);  if (node instanceof DAGContainer) {    for (    DAGNode child : ((DAGContainer)node).getChildren()) {      loadDB(child,contextId);    }  }}  }
class C{  public static GcsPath fromResourceName(String name){  Matcher m=GCS_RESOURCE_NAME.matcher(name);  checkArgument(m.matches(),"Invalid GCS resource name: %s",name);  return new GcsPath(null,m.group("BUCKET"),m.group("OBJECT"));}  }
class C{  void updateGUI(){  if (log.isDebugEnabled()) {    log.debug("updateGUI with " + msgCount + " / "+ (pdiFile.length() / msgSize));  }  if (!init) {    return;  }  status.setText(res.getString("StatusDownloading"));  msgCount++;  bar.setValue(100 * msgCount * msgSize / pdiFile.length());}  }
class C{  private static void usage(){  int consoleWidth=ConsoleUtil.getConsoleWidth();  if (consoleWidth <= 0) {    consoleWidth=80;  }  System.out.println("java -cp baksmali.jar org.jf.dexlib2.analysis.DumpFields -d path/to/framework/jar/files <dex-file>");}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public Path configFile(){  return configFile;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.NEGATIVE_CONSTRAINT___CONSTRAINT_1:    return ((InternalEList<?>)getConstraint_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypesPackage.TSTRUCT_MEMBER__DEFINED_MEMBER:    setDefinedMember((TStructMember)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  private static Set<String> tokenizer(String string){  HashSet<String> tokens=new HashSet<String>();  if (string != null && !string.equals("")) {    String tok[]=string.toLowerCase().split("([^a-z0-9])");    for (    String t : tok) {      if (t.length() < 3) {        continue;      }      if (t.matches(numPattern)) {        tokens.add(numReplacementString);        continue;      }      if (t.matches(stringPattern)) {        tokens.add(t);        continue;      }    }  }  return tokens;}  }
class C{  private void addTransactionHash(SIPTransaction sipTransaction){  SIPRequest sipRequest=sipTransaction.getOriginalRequest();  if (sipTransaction instanceof SIPClientTransaction) {    if (!this.unlimitedClientTransactionTableSize) {      if (this.activeClientTransactionCount.get() > clientTransactionTableHiwaterMark) {        try {synchronized (this.clientTransactionTable) {            this.clientTransactionTable.wait();            this.activeClientTransactionCount.incrementAndGet();          }        } catch (        Exception ex) {          if (isLoggingEnabled()) {            stackLogger.logError("Exception occured while waiting for room",ex);          }        }      }    } else {      this.activeClientTransactionCount.incrementAndGet();    }    String key=sipRequest.getTransactionId();    clientTransactionTable.put(key,(SIPClientTransaction)sipTransaction);    if (isLoggingEnabled()) {      stackLogger.logDebug(" putTransactionHash : " + " key = " + key);    }  } else {    String key=sipRequest.getTransactionId();    if (isLoggingEnabled()) {      stackLogger.logDebug(" putTransactionHash : " + " key = " + key);    }    serverTransactionTable.put(key,(SIPServerTransaction)sipTransaction);  }}  }
class C{  private VariableReference createNull(TestCase test,Type type,int position,int recursionDepth) throws ConstructionFailedException {  GenericClass genericType=new GenericClass(type);  if (!TestUsageChecker.canUse(genericType.getRawClass())) {    throw new ConstructionFailedException("Cannot use class " + type);  }  if (genericType.hasWildcardOrTypeVariables()) {    type=genericType.getGenericInstantiation().getType();  }  Statement st=new NullStatement(test,type);  test.addStatement(st,position);  VariableReference ret=test.getStatement(position).getReturnValue();  ret.setDistance(recursionDepth);  return ret;}  }
class C{  public LVQ(DistanceMetric dm,int iterations,double learningRate,int representativesPerClass){  this(dm,iterations,learningRate,representativesPerClass,DEFAULT_LVQ_METHOD,new ExponetialDecay());}  }
class C{  public GBC gridy(int gridy){  this.gridy=gridy;  return this;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ANONYMOUS_ENTRY_OR_EXIT_ACTION_1__CODE_LANG_1:    return getCodeLang_1();case UmplePackage.ANONYMOUS_ENTRY_OR_EXIT_ACTION_1__CODE_LANGS_1:  return getCodeLangs_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @Override public void respond(String response){  getChannel().send().message(getUser(),response);}  }
class C{  void rescheduleActivityEnd(final MobsimAgent agent){  double newActivityEndTime=agent.getActivityEndTime();  AgentEntry oldEntry=removeAgentFromQueue(agent);  if (oldEntry == null) {    if (newActivityEndTime == Double.POSITIVE_INFINITY) {    } else {      activityEndsList.add(new AgentEntry(agent,newActivityEndTime));      internalInterface.registerAdditionalAgentOnLink(agent);      ((AgentCounter)((QSim)internalInterface.getMobsim()).getAgentCounter()).incLiving();    }  } else   if (newActivityEndTime == Double.POSITIVE_INFINITY) {    unregisterAgentAtActivityLocation(agent);    ((QSim)internalInterface.getMobsim()).getAgentCounter().decLiving();  } else {    activityEndsList.add(new AgentEntry(agent,newActivityEndTime));  }}  }
class C{  public Object previous(){  if (hasPrevious()) {    return tokens[--tokenPos];  }  throw new NoSuchElementException();}  }
class C{  public boolean hasState(){  return hasExtension(State.class);}  }
class C{  public static void verifyAuthInfoForResource(AuthInfo authInfo,EppResource resource) throws EppException {  try {    authInfo.verifyAuthorizedFor(resource);  } catch (  BadAuthInfoException e) {    throw new BadAuthInfoForResourceException();  }}  }
