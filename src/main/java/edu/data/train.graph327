class C{  public T caseEvent(Event object){  return null;}  }
class C{  public DoubleMatrix jblas_solve(double[][] B){  return org.jblas.Solve.solve(new DoubleMatrix(this.getArray()),new DoubleMatrix(B));}  }
class C{  public String toStringShort(){  return AbstractFormatter.shape(this);}  }
class C{  public static double[] concatAllDouble(double[]... arrays){  int totalLength=0;  final int subArrayCount=arrays.length;  for (int i=0; i < subArrayCount; ++i) {    totalLength+=arrays[i].length;  }  double[] result=Arrays.copyOf(arrays[0],totalLength);  int offset=arrays[0].length;  for (int i=1; i < subArrayCount; ++i) {    System.arraycopy(arrays[i],0,result,offset,arrays[i].length);    offset+=arrays[i].length;  }  return result;}  }
class C{  public void test_ticket_1202h() throws Exception {  new TestHelper("ticket-1202-group05-modified3","ticket-1202-group05-modified3.rq","ticket-1202-group05-modified3.ttl","ticket-1202-group05-modified3.srx").runTest();}  }
class C{  private void initDialog(){  setContentPane(initComponents());  pack();  setDefaultCloseOperation(DISPOSE_ON_CLOSE);  getRootPane().setDefaultButton(closeBtn);  setEscAction(closeAct);  setModal(true);  setResizable(false);}  }
class C{  public static List<org.oscm.internal.vo.VOParameter> convertToUpVOParameter(List<org.oscm.vo.VOParameter> oldVO){  if (oldVO == null) {    return null;  }  List<org.oscm.internal.vo.VOParameter> newVO=new ArrayList<org.oscm.internal.vo.VOParameter>();  for (  org.oscm.vo.VOParameter tmp : oldVO) {    newVO.add(convertToUp(tmp));  }  return newVO;}  }
class C{  public static void writeLines(Collection<?> lines,String lineEnding,OutputStream output) throws IOException {  writeLines(lines,lineEnding,output,Charset.defaultCharset());}  }
class C{  public static void skipToData(ExtractorInput input,WavHeader wavHeader) throws IOException, InterruptedException, ParserException {  Assertions.checkNotNull(input);  Assertions.checkNotNull(wavHeader);  input.resetPeekPosition();  ParsableByteArray scratch=new ParsableByteArray(ChunkHeader.SIZE_IN_BYTES);  ChunkHeader chunkHeader=ChunkHeader.peek(input,scratch);  while (chunkHeader.id != Util.getIntegerCodeForString("data")) {    Log.w(TAG,"Ignoring unknown WAV chunk: " + chunkHeader.id);    long bytesToSkip=ChunkHeader.SIZE_IN_BYTES + chunkHeader.size;    if (chunkHeader.id == Util.getIntegerCodeForString("RIFF")) {      bytesToSkip=ChunkHeader.SIZE_IN_BYTES + 4;    }    if (bytesToSkip > Integer.MAX_VALUE) {      throw new ParserException("Chunk is too large (~2GB+) to skip; id: " + chunkHeader.id);    }    input.skipFully((int)bytesToSkip);    chunkHeader=ChunkHeader.peek(input,scratch);  }  input.skipFully(ChunkHeader.SIZE_IN_BYTES);  wavHeader.setDataBounds(input.getPosition(),chunkHeader.size);}  }
class C{  private boolean stretchToOrder() throws IOException {  Spans prevSpans=subSpans[0];  matchStart=prevSpans.startPosition();  assert prevSpans.startPosition() != NO_MORE_POSITIONS : "prevSpans no start position " + prevSpans;  assert prevSpans.endPosition() != NO_MORE_POSITIONS;  matchWidth=0;  for (int i=1; i < subSpans.length; i++) {    Spans spans=subSpans[i];    assert spans.startPosition() != NO_MORE_POSITIONS;    assert spans.endPosition() != NO_MORE_POSITIONS;    if (advancePosition(spans,prevSpans.endPosition()) == NO_MORE_POSITIONS) {      oneExhaustedInCurrentDoc=true;      return false;    }    matchWidth+=(spans.startPosition() - prevSpans.endPosition());    prevSpans=spans;  }  matchEnd=subSpans[subSpans.length - 1].endPosition();  return true;}  }
class C{  public static void writeVarLong(OutputStream out,long x) throws IOException {  while ((x & ~0x7f) != 0) {    out.write((byte)(0x80 | (x & 0x7f)));    x>>>=7;  }  out.write((byte)x);}  }
class C{  private Cast(){  instanceNotAllowed(getClass());}  }
class C{  private static boolean arabicCharShapesDuel(char c){  int charVal=c;  if ((charVal == 0x0626) || (charVal == 0x0628) || (charVal >= 0x062A && charVal <= 0x062E)|| (charVal >= 0x0633 && charVal <= 0x063A)|| (charVal >= 0x0641 && charVal <= 0x0647)|| (charVal >= 0x0649 && charVal <= 0x064A)|| (charVal >= 0x0678 && charVal <= 0x0687)|| (charVal >= 0x069A && charVal <= 0x06BF)|| (charVal == 0x6C1)|| (charVal == 0x6CC)|| (charVal == 0x6CE)|| (charVal >= 0x06D0 && charVal <= 0x06D1)|| (charVal >= 0x06FA && charVal <= 0x06FC)) {    return true;  }  return false;}  }
class C{  public static String convertResourcePathToClassName(String resourcePath){  Assert.notNull(resourcePath,"Resource path must not be null");  return resourcePath.replace('/','.');}  }
class C{  private double[] adjustedStackValues(double[] stack1,double[] stack2){  double[] result=new double[2];  if (stack1[0] == 0.0 || stack2[0] == 0.0) {    result[0]=0.0;  } else {    result[0]=(stack1[0] + stack2[0]) / 2.0;  }  if (stack1[1] == 0.0 || stack2[1] == 0.0) {    result[1]=0.0;  } else {    result[1]=(stack1[1] + stack2[1]) / 2.0;  }  return result;}  }
class C{  private static void writeEffectivePom(MavenProject project,XMLWriter writer) throws MojoExecutionException {  Model pom=project.getModel();  cleanModel(pom);  String effectivePom;  StringWriter sWriter=new StringWriter();  MavenXpp3Writer pomWriter=new MavenXpp3Writer();  try {    pomWriter.write(sWriter,pom);  } catch (  IOException e) {    throw new MojoExecutionException("Cannot serialize POM to XML.",e);  }  effectivePom=addMavenNamespace(sWriter.toString(),true);  writeComment(writer,"Effective POM for project \'" + project.getId() + "\'");  writer.writeMarkup(effectivePom);}  }
class C{  public String toString(){  return "[" + start + "] -> ["+ end+ "] "+ flow+ "/"+ capacity+ " @ "+ cost;}  }
class C{  public Map<Integer,Integer> graphType(){  Map<Integer,Integer> result;  result=new HashMap<Integer,Integer>();  if (getClassifier() != null) {    if (getClassifier() instanceof Drawable) {      result.put(0,((Drawable)getClassifier()).graphType());    }  }  return result;}  }
class C{  public boolean isDisplayNameAlreadyTaken(String displayName){  return isDisplayNameAlreadyTaken(displayName,null);}  }
class C{  public Script(byte[] programBytes) throws ScriptException {  program=programBytes;  parse(programBytes);  creationTimeSeconds=0;}  }
class C{  public static byte[] copyWithLength(byte[] orig,int length){  byte[] result=new byte[length];  int howMuchToCopy=length < orig.length ? length : orig.length;  System.arraycopy(orig,0,result,0,howMuchToCopy);  return result;}  }
class C{  protected static String convertToQuotedString(String string){  return "\"" + string + "\"";}  }
class C{  public static long factorial(int n){  long result=1;  for (int i=1; i <= n; i++) {    result*=(long)i;  }  return result;}  }
class C{  private void validateSourceStorage(StorageEntity storageEntity,StoragePolicyKey storagePolicyKey,Integer storagePolicyVersion){  Assert.isTrue(StoragePlatformEntity.S3.equals(storageEntity.getStoragePlatform().getName()),String.format("Storage platform for storage policy filter storage with name \"%s\" is not \"%s\". Storage policy: {%s}",storageEntity.getName(),StoragePlatformEntity.S3,storagePolicyHelper.storagePolicyKeyAndVersionToString(storagePolicyKey,storagePolicyVersion)));  if (!storageHelper.getBooleanStorageAttributeValueByName(configurationHelper.getProperty(ConfigurationValue.S3_ATTRIBUTE_NAME_VALIDATE_PATH_PREFIX),storageEntity,false,true)) {    throw new IllegalStateException(String.format("Path prefix validation must be enabled on \"%s\" storage. Storage policy: {%s}",storageEntity.getName(),storagePolicyHelper.storagePolicyKeyAndVersionToString(storagePolicyKey,storagePolicyVersion)));  }  if (!storageHelper.getBooleanStorageAttributeValueByName(configurationHelper.getProperty(ConfigurationValue.S3_ATTRIBUTE_NAME_VALIDATE_FILE_EXISTENCE),storageEntity,false,true)) {    throw new IllegalStateException(String.format("File existence validation must be enabled on \"%s\" storage. Storage policy: {%s}",storageEntity.getName(),storagePolicyHelper.storagePolicyKeyAndVersionToString(storagePolicyKey,storagePolicyVersion)));  }}  }
class C{  public Region find(int startOffset,String findString,boolean forwardSearch,boolean caseSensitive,boolean wholeWord,boolean regExSearch) throws BadLocationException {  Assert.isTrue(!(regExSearch && wholeWord));  if (startOffset == -1 && forwardSearch)   startOffset=0;  if (startOffset == -1 && !forwardSearch)   startOffset=length() - 1;  return findReplace(FIND_FIRST,startOffset,findString,null,forwardSearch,caseSensitive,wholeWord);}  }
class C{  public void testBug20727196() throws Exception {  createFunction("testBug20727196_f1","(p ENUM ('Yes', 'No')) RETURNS VARCHAR(10) BEGIN RETURN IF(p='Yes', 'Yay!', if(p='No', 'Ney!', 'What?')); END");  createFunction("testBug20727196_f2","(p CHAR(1)) RETURNS ENUM ('Yes', 'No') BEGIN RETURN IF(p='y', 'Yes', if(p='n', 'No', '?')); END");  createFunction("testBug20727196_f3","(p ENUM ('Yes', 'No')) RETURNS ENUM ('Yes', 'No') BEGIN RETURN IF(p='Yes', 'Yes', if(p='No', 'No', '?')); END");  createProcedure("testBug20727196_p1","(p ENUM ('Yes', 'No')) BEGIN SELECT IF(p='Yes', 'Yay!', if(p='No', 'Ney!', 'What?')); END");  for (  String connProps : new String[]{"getProceduresReturnsFunctions=false,useInformationSchema=false","getProceduresReturnsFunctions=false,useInformationSchema=true"}) {    Connection testConn=null;    try {      testConn=getConnectionWithProps(connProps);      DatabaseMetaData dbmd=testConn.getMetaData();      this.rs=dbmd.getFunctionColumns(null,null,"testBug20727196_%","%");      assertTrue(this.rs.next());      assertEquals("testBug20727196_f1",this.rs.getString(3));      assertEquals("",this.rs.getString(4));      assertEquals("VARCHAR",this.rs.getString(7));      assertTrue(this.rs.next());      assertEquals("testBug20727196_f1",this.rs.getString(3));      assertEquals("p",this.rs.getString(4));      assertEquals("ENUM",this.rs.getString(7));      assertTrue(this.rs.next());      assertEquals("testBug20727196_f2",this.rs.getString(3));      assertEquals("",this.rs.getString(4));      assertEquals("ENUM",this.rs.getString(7));      assertTrue(this.rs.next());      assertEquals("testBug20727196_f2",this.rs.getString(3));      assertEquals("p",this.rs.getString(4));      assertEquals("CHAR",this.rs.getString(7));      assertTrue(this.rs.next());      assertEquals("testBug20727196_f3",this.rs.getString(3));      assertEquals("",this.rs.getString(4));      assertEquals("ENUM",this.rs.getString(7));      assertTrue(this.rs.next());      assertEquals("testBug20727196_f3",this.rs.getString(3));      assertEquals("p",this.rs.getString(4));      assertEquals("ENUM",this.rs.getString(7));      assertFalse(this.rs.next());      this.rs=dbmd.getProcedureColumns(null,null,"testBug20727196_%","%");      assertTrue(this.rs.next());      assertEquals("testBug20727196_p1",this.rs.getString(3));      assertEquals("p",this.rs.getString(4));      assertEquals("ENUM",this.rs.getString(7));      assertFalse(this.rs.next());    }  finally {      if (testConn != null) {        testConn.close();      }    }  }}  }
class C{  public void applyToBackground(View view){  if (mColorInt != 0) {    view.setBackgroundColor(mColorInt);  } else   if (mColorRes != -1) {    view.setBackgroundResource(mColorRes);  }}  }
class C{  public void addFile(String filename,String filePath){  int pathIndex=filePathList.indexOf(filePath);  if (pathIndex == -1) {    fileNameList.add(filename);    filePathList.add(filePath);  }}  }
class C{  public static URI replaceQuery(URI originalURI,Map<String,String> params) throws URISyntaxException {  String s=createQueryString(params);  if (s.length() == 0) {    s=null;  }  return replaceQuery(originalURI,s);}  }
class C{  public String toString(int theClass){  return classes.get(theClass).toString();}  }
class C{  private synchronized void rebuildJournal() throws IOException {  if (journalWriter != null) {    journalWriter.close();  }  Writer writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFileTmp),Util.US_ASCII));  try {    writer.write(MAGIC);    writer.write("\n");    writer.write(VERSION_1);    writer.write("\n");    writer.write(Integer.toString(appVersion));    writer.write("\n");    writer.write(Integer.toString(valueCount));    writer.write("\n");    writer.write("\n");    for (    Entry entry : lruEntries.values()) {      if (entry.currentEditor != null) {        writer.write(DIRTY + ' ' + entry.key+ '\n');      } else {        writer.write(CLEAN + ' ' + entry.key+ entry.getLengths()+ '\n');      }    }  }  finally {    writer.close();  }  if (journalFile.exists()) {    renameTo(journalFile,journalFileBackup,true);  }  renameTo(journalFileTmp,journalFile,false);  journalFileBackup.delete();  journalWriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFile,true),Util.US_ASCII));}  }
class C{  public AttributeSet(File attributeDescriptionFile,boolean sourceColRequired,LoggingHandler logging) throws XMLException, ParserConfigurationException, SAXException, IOException, UserError {  this(AttributeDataSource.createAttributeDataSources(attributeDescriptionFile,sourceColRequired,logging));}  }
class C{  public static LossAction fromName(String name){  if (name == null || name.length() == 0) {    throw new IllegalArgumentException(LocalizedStrings.LossAction_INVALID_LOSSACTION_NAME_0.toLocalizedString(name));  }  for (int i=0; i < PRIVATE_VALUES.length; i++) {    if (name.equals(PRIVATE_VALUES[i].name)) {      return PRIVATE_VALUES[i];    }  }  throw new IllegalArgumentException(LocalizedStrings.LossAction_INVALID_LOSSACTION_NAME_0.toLocalizedString(name));}  }
class C{  public E remove(int index){  return remove(entry(index));}  }
class C{  public void loadIdentityQuat(){  this.dirty=true;  setX(0);  setY(0);  setZ(0);  setW(1);}  }
class C{  public Builder bufferSize(final int buffer_size){  this.bufferSize=buffer_size;  return this;}  }
class C{  private void addQuotedString(Object cont){  final String str;  if (cont instanceof String) {    str=(String)cont;  } else   if (cont == null) {    str="null";  } else {    str=cont.toString();  }  buffer.append("\"").append(jsonEscapeString(str)).append("\"");}  }
class C{  private void merge(int from,int second,int to){  int len1=second - from, len2=to - second + 1;  if (len1 == 0 || len2 == 0) {    return;  }  if (len1 + len2 == 2) {    if (comp.compare(data[second],data[from]) < 0) {      swap(data,second,from);    }    return;  }  if (len1 <= temp.length) {    System.arraycopy(data,from,temp,0,len1);    mergeSmall(data,from,temp,0,len1 - 1,data,second,to);    return;  } else   if (len2 <= temp.length) {    System.arraycopy(data,second,temp,0,len2);    System.arraycopy(data,from,data,to - len1 + 1,len1);    mergeSmall(data,from,data,to - len1 + 1,to,temp,0,len2 - 1);    return;  }  mergeBig(from,second,to);}  }
class C{  protected Component createComponentInstance(String componentType,Class cls){  return null;}  }
class C{  void preserveCorner(){  Population feasibleSolutions=getFeasibleSolutions(population);  if (feasibleSolutions.size() >= 2 * problem.getNumberOfObjectives()) {    corner=corner_sort(feasibleSolutions);  }}  }
class C{  public int mergeToBackingIndex(ObservableList<? extends T> backingList,int index){  if (index < 0) {    throw new IndexOutOfBoundsException();  }  int size=0;  for (int i=0, listsSize=lists.size(); i < listsSize; i++) {    List<? extends T> list=lists.get(i);    if (backingList == list) {      if (index < list.size()) {        return size + index;      } else {        throw new IndexOutOfBoundsException();      }    }    size+=list.size();  }  throw new IllegalArgumentException();}  }
class C{  public static long copyLarge(InputStream input,OutputStream output,byte[] buffer) throws IOException {  long count=0;  int n=0;  while (EOF != (n=input.read(buffer))) {    output.write(buffer,0,n);    count+=n;  }  return count;}  }
class C{  public SparseWeakArray(int initialCapacity){  initialCapacity=ArrayUtils.idealIntArraySize(initialCapacity);  mKeys=new int[initialCapacity];  mValues=new WeakReference[initialCapacity];  mSize=0;}  }
class C{  private void loadPagedResultsControlClasses(){  if ((responsePagedResultsControlClass == null) && (requestPagedResultsControlClass == null)) {    try {      requestPagedResultsControlClass=Class.forName(LdapConstants.DEFAULT_REQUEST_CONTROL);      responsePagedResultsControlClass=Class.forName(LdapConstants.DEFAULT_RESPONSE_CONTROL);    } catch (    ClassNotFoundException e) {      if (LOGGER.isDebugEnabled()) {        LOGGER.debug("Clases por defecto para busqueda paginada no encontradas [" + LdapConstants.DEFAULT_REQUEST_CONTROL + ","+ LdapConstants.DEFAULT_RESPONSE_CONTROL+ "]",e);      }      try {        requestPagedResultsControlClass=Class.forName(LdapConstants.FALLBACK_REQUEST_CONTROL);        responsePagedResultsControlClass=Class.forName(LdapConstants.FALLBACK_RESPONSE_CONTROL);      } catch (      ClassNotFoundException e1) {        LdapExceptionUtils.generateErrorException(LdapErrorCodes.ERR_10008_PAGINATED_RESULT_CLASSES_NOT_FOUND,new Object[]{LdapConstants.DEFAULT_REQUEST_CONTROL,LdapConstants.DEFAULT_RESPONSE_CONTROL,LdapConstants.FALLBACK_REQUEST_CONTROL,LdapConstants.FALLBACK_RESPONSE_CONTROL},LOGGER,e1);      }    }  }}  }
class C{  public void copy(RepositoryLocation source,Folder destination,String newName,boolean overwriteIfExists,ProgressListener listener) throws RepositoryException {  if (listener != null) {    listener.setTotal(DEFAULT_TOTAL_PROGRESS);    listener.setCompleted(0);  }  try {    copy(source,destination,newName,overwriteIfExists,listener,0,DEFAULT_TOTAL_PROGRESS);  }  finally {    if (listener != null) {      listener.complete();    }  }}  }
class C{  protected double priorVal(double[][] dist){  return ContingencyTables.entropyOverColumns(dist);}  }
class C{  public static SymbolTable systemSymbolTable(){  return SYSTEM_SYMBOL_TABLE;}  }
class C{  private void readAll() throws IOException {  while (!closed) {    read(1000);  }}  }
class C{  public boolean isChecked(){  boolean checked=false;  if (view instanceof CompoundButton) {    CompoundButton cb=(CompoundButton)view;    checked=cb.isChecked();  }  return checked;}  }
class C{  public final void replaceAll(double from,double to){  final int width=this.width;  final int height=this.height;  double[] fieldx=null;  for (int x=0; x < width; x++) {    fieldx=field[x];    for (int y=0; y < height; y++) {      if (fieldx[y] == from)       fieldx[y]=to;    }  }}  }
class C{  public TSRequest(String tSAPolicyID,byte[] toBeTimeStamped,MessageDigest messageDigest) throws NoSuchAlgorithmException {  this.policyId=tSAPolicyID;  this.hashAlgorithmId=AlgorithmId.get(messageDigest.getAlgorithm());  this.hashValue=messageDigest.digest(toBeTimeStamped);}  }
class C{  public void log(Level level,Throwable throwable,String msg,Object arg0,Object arg1){  innerLog(level,throwable,msg,arg0,arg1,UNKNOWN_ARG,null);}  }
class C{  protected String paramString(){  String defaultCapableString=(defaultCapable ? "true" : "false");  return super.paramString() + ",defaultCapable=" + defaultCapableString;}  }
class C{  private Note saveNoteNoTransactionMgmt(Note note){  commentDao.deleteByNoteIdAndUpdated(note.getId(),false);  noteDao.createOrUpdate(note);  if (note.getComments() != null) {    for (    Comment comment : note.getComments()) {      commentDao.createOrUpdate(comment);    }  }  bus.post(new NoteSavedEvent(note));  return note;}  }
class C{  @Override public void clear(){  this._map.clear();}  }
class C{  public void append(String str,int off,int len) throws IOException {  append(str.substring(off,off + len));}  }
class C{  private void closeDataSocket() throws IOException {  if (isPassive()) {    if (this.DataSocketPassive != null) {      this.DataSocketPassive.close();      this.DataSocketPassive=null;    }  } else {    if (this.DataSocketActive != null) {      this.DataSocketActive.close();      this.DataSocketActive=null;    }  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:19.317 -0500",hash_original_method="78176BEE1BF5E3D3E49AE6693FD0EBDF",hash_generated_method="6670A1B97B49FE038CF2317C86D1B7D8") public StringIndexOutOfBoundsException(int sourceLength,int index){  super("length=" + sourceLength + "; index="+ index);}  }
class C{  public static boolean isGenericDelimiter(int c){switch (c) {case ':':case '/':case '?':case '#':case '[':case ']':case '@':    return true;default :  return false;}}  }
class C{  void addEntry(JavaFileObject file,String check,Info encl,Info self){  Entry e=new Entry(file,check,encl,self);  DefaultComboBoxModel m=(DefaultComboBoxModel)entries.getModel();  m.addElement(e);  if (m.getSize() == 1)   entries.setSelectedItem(e);}  }
class C{  @Override protected boolean isZoneLevelResource(){  return false;}  }
class C{  protected void printComment(String text,StringBuilder ddl){  if (sqlCommentsOn) {    ddl.append(databaseInfo.getCommentPrefix());    ddl.append(" ");    ddl.append(text);    ddl.append(" ");    ddl.append(databaseInfo.getCommentSuffix());    println(ddl);  }}  }
class C{  public boolean equals(ReadonlyVec4D v){  try {    return (x == v.x() && y == v.y() && z == v.z() && w == v.w());  } catch (  NullPointerException e) {    return false;  }}  }
class C{  public static String md5(String input){  try {    MessageDigest md=MessageDigest.getInstance("MD5");    byte[] messageDigest=md.digest(input.getBytes());    BigInteger number=new BigInteger(1,messageDigest);    String md5=number.toString(16);    while (md5.length() < 32) {      md5="0" + md5;    }    return md5;  } catch (  NoSuchAlgorithmException e) {    return null;  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList genderList;  Node gender;  EntityReference entRef;  Element entElement;  NamedNodeMap attrList;  Attr attrNode;  int nodeType;  Attr removedAttr;  Node appendedChild;  doc=(Document)load("staff",true);  genderList=doc.getElementsByTagName("gender");  gender=genderList.item(2);  entRef=doc.createEntityReference("ent4");  assertNotNull("createdEntRefNotNull",entRef);  appendedChild=gender.appendChild(entRef);  entElement=(Element)entRef.getFirstChild();  assertNotNull("entElementNotNull",entElement);  attrList=entElement.getAttributes();  attrNode=(Attr)attrList.getNamedItem("domestic");  assertNotNull("attrNodeNotNull",attrNode);{    boolean success=false;    try {      removedAttr=entElement.removeAttributeNode(attrNode);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  public static long interleave(int x,int y){  return MultiDimension.getInstance().interleave(x,y);}  }
class C{  public static void bootstrap() throws ConfigurationException {  DefaultBootstrap.bootstrap();  org.opensaml.xml.Configuration.registerObjectProvider(XSString.TYPE_NAME,new XSNonTrimmingStringBuilder(),new XSStringMarshaller(),new XSStringUnmarshaller());  Configuration.registerObjectProvider(RenewableType.TYPE_NAME,new RenewableTypeBuilder(),new RenewableTypeMarshaller(),new RenewableTypeUnmarshaller());  Configuration.registerObjectProvider(DelegableType.TYPE_NAME,new DelegableTypeBuilder(),new DelegableTypeMarshaller(),new DelegableTypeUnmarshaller());}  }
class C{  public SolrInputDocument newDocument(){  addLiterals();  addMetadata();  addContent();  addCapturedContent();  if (log.isDebugEnabled()) {    log.debug("Doc: {}",document);  }  return document;}  }
class C{  public static Document createXMLBookTree(UseCaseConf useCaseConf,Integer bookID,ScrRegstate scrregstate,AxSf axsf,Idocarchdet idocarchdet,boolean readOnly,long folderPId,int folderId,int row,List docs,String url,int bookType,boolean isBookAdmin,Locale locale,int vldSave,SessionInformation sessionInformation,UserConf usrConf,String archiveName) throws ValidationException, SecurityException {  FormFormat formFormat=new FormFormat(axsf.getFormat().getData());  String folderName=getFolderName(scrregstate,idocarchdet,folderId,axsf,archiveName);  Document document=DocumentHelper.createDocument();  Element root=document.addElement(XML_FRMTREE_TEXT);  Element sessionInfo=root.addElement(XML_SESSION_TEXT);  String readOnlyS=XML_TRUE_VALUE;  if (!readOnly) {    readOnlyS=XML_FALSE_VALUE;  }  addSessionInfo(sessionInformation,sessionInfo);  addParams(folderName,url,folderPId,readOnlyS,folderId,vldSave,row,bookType,isBookAdmin,root);  addProperties(useCaseConf,bookType,scrregstate.getImageAuth(),axsf,root);  addUserConfig(root,usrConf,locale);  if (formFormat.getDlgDef().getPagedefs() != null && !formFormat.getDlgDef().getPagedefs().isEmpty()) {    FPageDef page=null;    Integer key=null;    for (Iterator it=formFormat.getDlgDef().getPagedefs().keySet().iterator(); it.hasNext(); ) {      key=(Integer)it.next();      page=(FPageDef)formFormat.getDlgDef().getPagedefs().get(key);      if (!page.getCtrldefs().isEmpty()) {        String title="";        try {          title=axsf.getLocaleAttributePage(locale,page.getTitle());        } catch (        Exception e) {        }        addNodeDat(key.intValue(),title,root);      }    }  }  addNodeDocs(docs,root);  return document;}  }
class C{  public void addRow(GeneralName generalName){  data.add(generalName);  Collections.sort(data,new GeneralNameComparator());  fireTableDataChanged();}  }
class C{  public void registerFunctions(Model model,Object source){  for (  Resource resource : JenaUtil.getAllInstances(SPIN.Function.inModel(model))) {    Function function=SPINFactory.asFunction(resource);    register(function,source,true);  }}  }
class C{  public Builder userToken(String userToken){  this.userToken=userToken;  return this;}  }
class C{  public String dump(PublicKey publicKey) throws Asn1Exception, IOException {  return dump(publicKey.getEncoded());}  }
class C{  public T caseBuiltinEventSpec(BuiltinEventSpec object){  return null;}  }
class C{  @Override public void emitTuple(HashMap<K,Integer> tuple){  least.emit(tuple);}  }
class C{  public boolean equals(Object otherObj){  if (!(otherObj instanceof FloatArrayList))   return super.equals(otherObj);  if (this == otherObj)   return true;  if (otherObj == null)   return false;  FloatArrayList other=(FloatArrayList)otherObj;  if (size() != other.size())   return false;  float[] theElements=elements();  float[] otherElements=other.elements();  for (int i=size(); --i >= 0; ) {    if (theElements[i] != otherElements[i])     return false;  }  return true;}  }
class C{  public void addAlias(Origin alias,Origin target){  aliases.put(alias,target);}  }
class C{  private boolean hasRSTRC(Node node) throws ParserException {  boolean found=false;  if ((RSTRC_ELEMENT_NAME.equalsIgnoreCase(node.getLocalName())) && RSTRC_NAMESPACE.equalsIgnoreCase(node.getNamespaceURI())) {    log.debug("Node is the RSTRC.");    found=true;  } else {    NodeList rstrcNodes=((Element)node).getElementsByTagNameNS(RSTRC_NAMESPACE,RSTRC_ELEMENT_NAME);    log.debug(String.format("Found %d RSTRC elements.",((rstrcNodes == null) ? 0 : rstrcNodes.getLength())));    found=(rstrcNodes.getLength() > 0);  }  return found;}  }
class C{  protected void moveToFeature(KMLAbstractFeature feature){  KMLViewController viewController=KMLViewController.create(this.wwd);  viewController.goTo(feature);}  }
class C{  public List<TraitMap> newList(Trait key){  List<TraitMap> list=new ArrayList<>();  put(key,list);  return list;}  }
class C{  public static TripSchedule create(Trip trip,int[] arrivals,int[] departures,Collection<Frequency> frequencies,int[] stopSequences,int serviceCode){  for (int i=0; i < arrivals.length; i++) {    if (departures[i] < arrivals[i]) {      LOG.error("Trip {} departs stop before it arrives, excluding this trip.",trip.trip_id);      return null;    }    if (i > 0 && arrivals[i] < departures[i - 1]) {      LOG.error("Trip {} arrives at a stop before departing the previous stop, excluding this trip.",trip.trip_id);      return null;    }  }  if (frequencies != null && !frequencies.isEmpty()) {    if (frequencies.stream().allMatch(null)) {      LOG.error("All frequency entries on trip {} have end time before start time, excluding this trip.",trip.trip_id);      return null;    }  }  return new TripSchedule(trip,arrivals,departures,frequencies,stopSequences,serviceCode);}  }
class C{  @Override public void O(final PdfObject pdfObject,final int type){  if (currentPdfFile == null) {    return;  }  if (showMethods) {    System.out.println("DefaultActionHandler.O()");  }  final FormObject pageDictionary=(FormObject)pdfObject.getDictionary(type);  currentPdfFile.checkResolved(pageDictionary);  if (pageDictionary != null) {    final FormObject Odictionary=(FormObject)pageDictionary.getDictionary(PdfDictionary.O);    currentPdfFile.checkResolved(Odictionary);    if (Odictionary != null) {      String jsCode=Odictionary.getTextStreamValue(PdfDictionary.JS);      if (jsCode == null) {        final PdfObject JS=Odictionary.getDictionary(PdfDictionary.JS);        if (JS != null) {          jsCode=new String(JS.getDecodedStream());        }      }      javascript.executeAction(jsCode);    }  }}  }
class C{  public Movie(int width,int height,int frameRate,int version,Color backColor){  this.width=width;  this.height=height;  this.frameRate=frameRate;  this.version=version;  this.backColor=backColor;}  }
class C{  Tile walkAlongRoad(Tile origin,int numSteps){  if (origin.transport < 1) {    return null;  }  Tile result=origin;  ArrayList<Tile> neighbors;  for (int i=0; i < numSteps; i++) {    neighbors=getNeighborsTransport(result,1);    if (neighbors.isEmpty()) {      return result;    }    result=neighbors.get(random.nextInt(neighbors.size()));  }  return result;}  }
class C{  private void registerDataSource() throws Exception {  this.tempDir=File.createTempFile("jnditest",null);  this.tempDir.delete();  this.tempDir.mkdir();  this.tempDir.deleteOnExit();  com.mysql.jdbc.jdbc2.optional.MysqlDataSource ds;  Hashtable<String,String> env=new Hashtable<String,String>();  env.put(Context.INITIAL_CONTEXT_FACTORY,"com.sun.jndi.fscontext.RefFSContextFactory");  env.put(Context.PROVIDER_URL,this.tempDir.toURI().toString());  this.ctx=new InitialContext(env);  assertTrue("Naming Context not created",this.ctx != null);  ds=new com.mysql.jdbc.jdbc2.optional.MysqlDataSource();  ds.setUrl(dbUrl);  this.ctx.bind("_test",ds);}  }
class C{  private void run() throws Exception {  DevelopmentProvider tp=new DevelopmentProvider();  Topology t=tp.newTopology("mqttSamplePublisher");  MqttConfig mqttConfig=createMqttConfig();  MqttStreams mqtt=new MqttStreams(t,null);  AtomicInteger cnt=new AtomicInteger();  TStream<String> msgs=t.poll(null,1L,TimeUnit.SECONDS);  mqtt.publish(msgs,topic,0,false);  System.out.println("Console URL for the job: " + tp.getServices().getService(HttpServer.class).getConsoleUrl());  tp.submit(t);}  }
class C{  public void addConnector(Connector connector){  invoke(embeddedAddConnector,connector);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeentityreferencenodename.class,args);}  }
class C{  private void sendUpdate(JSONObject obj,boolean keepCallback,PluginResult.Status status){  if (callbackContext != null) {    PluginResult result=new PluginResult(status,obj);    result.setKeepCallback(keepCallback);    callbackContext.sendPluginResult(result);    if (!keepCallback) {      callbackContext=null;    }  }}  }
class C{  public static CharSequence stripUnbalancedQuotes(CharSequence s){  int count=0;  for (int i=0; i < s.length(); i++) {    if (s.charAt(i) == '\"') {      count++;    }  }  if (0 == (count & 1)) {    return s;  }  return s.toString().replace("\"","");}  }
class C{  public String toString(){  return "[StaticCodeTemplate: id=" + getID() + ", text="+ getBeforeCaretText()+ "|"+ getAfterCaretText()+ "]";}  }
class C{  public void addEmail(EmailEntity email){  emails.add(email);}  }
class C{  public static Object lookup(final Context context,final String name,final Class<?> clazz) throws Exception {  return context.lookup(name);}  }
class C{  public void pointerHoverReleased(final int[] x,final int[] y){  if (impl.getCurrentForm() == null) {    return;  }  addPointerEvent(POINTER_HOVER_RELEASED,x[0],y[0]);}  }
class C{  public ImageSource tilingDisabled(){  return tiling(false);}  }
class C{  public Vector3f addLocal(Vector3f vec){  if (null == vec) {    logger.warning("Provided vector is null, null returned.");    return null;  }  x+=vec.x;  y+=vec.y;  z+=vec.z;  return this;}  }
class C{  public Vector2i sub(Vector2i v){  x-=v.x;  y-=v.y;  return this;}  }
class C{  public VMContext(InternalContextAdapter inner,RuntimeServices rsvc){  localcontextscope=rsvc.getBoolean(RuntimeConstants.VM_CONTEXT_LOCALSCOPE,false);  wrappedContext=inner;  innerContext=inner.getBaseContext();}  }
class C{  @SuppressWarnings("unchecked") public static <T>Matcher<T> eq(T value){  return (Matcher<T>)new Equals(value);}  }
class C{  private void testSequenceOperations(int nodes,Query.ConsistencyLevel consistency) throws Throwable {  createServers(nodes);  AtomicInteger counter=new AtomicInteger();  AtomicLong index=new AtomicLong();  CopycatClient client=createClient();  client.<Long>onEvent("test",null);  client.submit(new TestCommand()).thenAccept(null);  client.submit(new TestEvent(true)).thenAccept(null);  client.submit(new TestQuery(consistency)).thenAccept(null);  await(30000,4);}  }
class C{  public static IMultiPoint[] copyOf(IMultiPoint[] original,int newLength){  IMultiPoint[] copy=new IMultiPoint[newLength];  System.arraycopy(original,0,copy,0,Math.min(original.length,newLength));  return copy;}  }
class C{  public boolean handleFile(File file){  if (DEBUG) {    logger.fine("searching finds: " + file.getAbsolutePath());  }  filenames.add(file);  return true;}  }
class C{  public final T blockingGet(){  if (getCount() != 0) {    try {      await();    } catch (    InterruptedException ex) {      dispose();      throw Exceptions.propagate(ex);    }  }  Throwable e=error;  if (e != null) {    throw Exceptions.propagate(e);  }  return value;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:35.718 -0500",hash_original_method="32C7579E7A20EFF08C798AFD17C9F8B4",hash_generated_method="9F7BA146B87E96C0D46A707E68C625D2") private static String encode(byte[] binaryData){  if (binaryData.length != 16) {    return null;  }  char[] buffer=new char[32];  for (int i=0; i < 16; i++) {    int low=(binaryData[i] & 0x0f);    int high=((binaryData[i] & 0xf0) >> 4);    buffer[i * 2]=HEXADECIMAL[high];    buffer[(i * 2) + 1]=HEXADECIMAL[low];  }  return new String(buffer);}  }
class C{  public void addEntityName(String name){  if (name != null) {    this.entityNameSet.add(name);  }}  }
class C{  public Coupling(final PotentialProducer producer,final PotentialConsumer consumer){  LOGGER.debug("new Coupling");  this.producer=(Producer<E>)producer.createProducer();  this.consumer=(Consumer<E>)consumer.createConsumer();}  }
class C{  @DSComment("OpenGL Utils") @DSSafe(DSCat.GRAPHICS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:10.628 -0500",hash_original_method="9AF538E08B87A3ABF0DDE7BDDBBA91E2",hash_generated_method="F2BF80FB629DF731008AB1848AA5E537") public static void gluPerspective(GL10 gl,float fovy,float aspect,float zNear,float zFar){  float top=zNear * (float)Math.tan(fovy * (Math.PI / 360.0));  float bottom=-top;  float left=bottom * aspect;  float right=top * aspect;  gl.glFrustumf(left,right,bottom,top,zNear,zFar);}  }
class C{  public Builder(){  this.message=new ErrorMessage();}  }
class C{  private void tql2() throws ArithmeticException {  for (int i=1; i < n; i++) {    e[i - 1]=e[i];  }  e[n - 1]=0.0;  double f=0.0;  double tst1=0.0;  double eps=Math.pow(2.0,-52.0);  for (int l=0; l < n; l++) {    tst1=Math.max(tst1,Math.abs(d[l]) + Math.abs(e[l]));    int m=l;    while (m < n) {      if (Math.abs(e[m]) <= eps * tst1) {        break;      }      m++;    }    if (m > l) {      int iter=0;      do {        iter=iter + 1;        if (iter > maxIterations)         throw new ArithmeticException(ERROR_STRING);        double g=d[l];        double p=(d[l + 1] - g) / (2.0 * e[l]);        double r=MathUtils.hypot(p,1.0);        if (p < 0) {          r=-r;        }        d[l]=e[l] / (p + r);        d[l + 1]=e[l] * (p + r);        double dl1=d[l + 1];        double h=g - d[l];        for (int i=l + 2; i < n; i++) {          d[i]-=h;        }        f=f + h;        p=d[m];        double c=1.0;        double c2=c;        double c3=c;        double el1=e[l + 1];        double s=0.0;        double s2=0.0;        for (int i=m - 1; i >= l; i--) {          c3=c2;          c2=c;          s2=s;          g=c * e[i];          h=c * p;          r=MathUtils.hypot(p,e[i]);          e[i + 1]=s * r;          s=e[i] / r;          c=p / r;          p=c * d[i] - s * g;          d[i + 1]=h + s * (c * g + s * d[i]);          for (int k=0; k < n; k++) {            h=V[k][i + 1];            V[k][i + 1]=s * V[k][i] + c * h;            V[k][i]=c * V[k][i] - s * h;          }        }        p=-s * s2 * c3* el1* e[l] / dl1;        e[l]=s * p;        d[l]=c * p;      } while (Math.abs(e[l]) > eps * tst1);    }    d[l]=d[l] + f;    e[l]=0.0;  }  for (int i=0; i < n - 1; i++) {    int k=i;    double p=d[i];    for (int j=i + 1; j < n; j++) {      if (d[j] < p) {        k=j;        p=d[j];      }    }    if (k != i) {      d[k]=d[i];      d[i]=p;      for (int j=0; j < n; j++) {        p=V[j][i];        V[j][i]=V[j][k];        V[j][k]=p;      }    }  }}  }
class C{  protected void onOpen(ActionEvent actionEvent){  Window window=overlay.getScene().getWindow();  File file=new FileChooser().showOpenDialog(window);  if (file != null) {    addChildrenFrom(file,toplevelPane);  }}  }
class C{  public synchronized void addListener(Object listener){  if (listener != null) {    if (listeners == null) {      listeners=new ArrayList<Object>();    }    if (!listeners.contains(listener)) {      listeners.add(listener);    }  }}  }
class C{  public void test() throws Exception {  assertEquals(LMJelinekMercerSimilarity.class,getSimilarity("text").getClass());}  }
class C{  public TermPayloadIterablePosting(){  super();}  }
class C{  private TransformSpi initializeTransform(String algorithmURI,NodeList contextNodes) throws InvalidTransformException {  this.constructionElement.setAttributeNS(null,Constants._ATT_ALGORITHM,algorithmURI);  Class<? extends TransformSpi> transformSpiClass=transformSpiHash.get(algorithmURI);  if (transformSpiClass == null) {    Object exArgs[]={algorithmURI};    throw new InvalidTransformException("signature.Transform.UnknownTransform",exArgs);  }  TransformSpi newTransformSpi=null;  try {    newTransformSpi=transformSpiClass.newInstance();  } catch (  InstantiationException ex) {    Object exArgs[]={algorithmURI};    throw new InvalidTransformException("signature.Transform.UnknownTransform",exArgs,ex);  }catch (  IllegalAccessException ex) {    Object exArgs[]={algorithmURI};    throw new InvalidTransformException("signature.Transform.UnknownTransform",exArgs,ex);  }  if (log.isLoggable(java.util.logging.Level.FINE)) {    log.log(java.util.logging.Level.FINE,"Create URI \"" + algorithmURI + "\" class \""+ newTransformSpi.getClass()+ "\"");    log.log(java.util.logging.Level.FINE,"The NodeList is " + contextNodes);  }  if (contextNodes != null) {    for (int i=0; i < contextNodes.getLength(); i++) {      this.constructionElement.appendChild(contextNodes.item(i).cloneNode(true));    }  }  return newTransformSpi;}  }
class C{  protected boolean wasSpurious(){  return false;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public IVector2D(int[][] v){  defaultCapacity2=defaultDefaultCapacity2;  if (v.length == 0) {    vector=new int[defaultCapacity1][defaultCapacity2];    sizes=new IVector(defaultCapacity1);  } else {    vector=v;    sizes=new IVector(v.length);    for (int i=0; i < v.length; ++i) {      sizes.set(i,v[i].length);      defaultCapacity2=Math.max(defaultCapacity2,v[i].length);    }    for (int i=0; i < v.length; ++i)     if (v[i].length == 0)     v[i]=new int[defaultCapacity2];  }}  }
class C{  private void expand(int i){  if (count + i <= buf.length) {    return;  }  byte[] newbuf=mPool.getBuf((count + i) * 2);  System.arraycopy(buf,0,newbuf,0,count);  mPool.returnBuf(buf);  buf=newbuf;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public Book copy(){  Book result=new Book(id,uuid,title,titleSort,path,serieIndex,timestamp,modified,publicationDate,isbn,authorSort,rating);  authors=this.authors;  series=this.series;  publisher=this.publisher;  listOfAuthors=this.listOfAuthors;  authorSort=this.authorSort;  latestFileModifiedDate=this.getLatestFileModifiedDate();  epubFile=this.getEpubFile();  epubFileName=this.getEpubFilename();  customColumnValues=this.customColumnValues;  comment=this.comment;  summary=this.summary;  summaryMaxLength=this.summaryMaxLength;  result.tags=new LinkedList<Tag>(this.getTags());  result.copyOfBook=(this.copyOfBook == null) ? this : this.copyOfBook;  return result;}  }
class C{  public static Criteria WHERE(){  return new Example().createCriteria();}  }
class C{  protected Node removeNode(Node node){  node.previous.next=node.next;  node.next.previous=node.previous;  node.removed=true;  return node;}  }
class C{  public boolean contains(Object obj){  return index(obj) >= 0;}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getSoftwarePattern_();}  }
class C{  @RequestMapping(value="",method={RequestMethod.PUT}) @ResponseBody public CubeRequest updateCubeDesc(@RequestBody CubeRequest cubeRequest) throws JsonProcessingException {  CubeDesc desc=deserializeCubeDesc(cubeRequest);  if (desc == null) {    return cubeRequest;  }  String projectName=(null == cubeRequest.getProject()) ? ProjectInstance.DEFAULT_PROJECT_NAME : cubeRequest.getProject();  try {    CubeInstance cube=cubeService.getCubeManager().getCube(cubeRequest.getCubeName());    if (cube == null) {      String error="The cube named " + cubeRequest.getCubeName() + " does not exist ";      updateRequest(cubeRequest,false,error);      return cubeRequest;    }    if (!cube.getDescriptor().getName().equalsIgnoreCase(desc.getName())) {      String error="Cube Desc renaming is not allowed: desc.getName(): " + desc.getName() + ", cubeRequest.getCubeName(): "+ cubeRequest.getCubeName();      updateRequest(cubeRequest,false,error);      return cubeRequest;    }    if (cube.getSegments().size() != 0 && !cube.getDescriptor().consistentWith(desc)) {      String error="CubeDesc " + desc.getName() + " is inconsistent with existing. Try purge that cube first or avoid updating key cube desc fields.";      updateRequest(cubeRequest,false,error);      return cubeRequest;    }    desc=cubeService.updateCubeAndDesc(cube,desc,projectName,true);  } catch (  AccessDeniedException accessDeniedException) {    throw new ForbiddenException("You don't have right to update this cube.");  }catch (  Exception e) {    logger.error("Failed to deal with the request:" + e.getLocalizedMessage(),e);    throw new InternalErrorException("Failed to deal with the request: " + e.getLocalizedMessage());  }  if (!desc.getError().isEmpty()) {    updateRequest(cubeRequest,false,Joiner.on("\n").join(desc.getError()));    return cubeRequest;  }  String descData=JsonUtil.writeValueAsIndentString(desc);  cubeRequest.setCubeDescData(descData);  cubeRequest.setSuccessful(true);  return cubeRequest;}  }
class C{  Node<E> first(){  restartFromHead:   for (; ; ) {    for (Node<E> h=head, p=h, q; ; ) {      boolean hasItem=(p.item != null);      if (hasItem || (q=p.next) == null) {        updateHead(h,p);        return hasItem ? p : null;      } else       if (p == q)       continue restartFromHead; else       p=q;    }  }}  }
class C{  public void propertyChange(PropertyChangeEvent evt){  getHandler().propertyChange(evt);}  }
class C{  protected void continueRead(){  if (log.isDebugEnabled()) {    log.debug("Start continueRead");  }  Iterator<VariableValue> i=variables.iterator();  while (i.hasNext()) {    VariableValue v=i.next();    if (v.isToRead() && (!readingChanges || v.isChanged())) {      amReading=true;      setBusy(true);      if (readingChanges) {        v.readChanges();      } else {        v.readAll();      }      return;    }  }  amReading=false;  super.setState(READ);  setBusy(false);  log.debug("End continueRead, nothing to do");}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {}  }
class C{  private void print(String amt){  try {    System.out.println(amt + " = " + getAmtInWords(amt));  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public static void logError(String message){  System.out.println(message);}  }
class C{  public static void assertEquals(IOObject expectedIOO,IOObject actualIOO){  RapidAssert.assertEquals("",expectedIOO,actualIOO);}  }
class C{  public synchronized final Map<K,V> snapshot(){  return new LinkedHashMap<K,V>(map);}  }
class C{  public void addBlocking(Blocking blocking){  getBlockings().add(blocking);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:34.540 -0500",hash_original_method="7B6DA174509B07DB7E171D838B6C3551",hash_generated_method="3132B8E88CA8F5E6038CA366225F4B87") public boolean await(Date deadline) throws InterruptedException {  if (this.waiter != null) {    throw new IllegalStateException("A thread is already waiting on this object." + "\ncaller: " + Thread.currentThread() + "\nwaiter: "+ this.waiter);  }  if (aborted)   throw new InterruptedException("Operation interrupted");  this.waiter=Thread.currentThread();  boolean success=false;  try {    if (deadline != null) {      success=this.cond.awaitUntil(deadline);    } else {      this.cond.await();      success=true;    }    if (aborted)     throw new InterruptedException("Operation interrupted");  }  finally {    this.waiter=null;  }  return success;}  }
class C{  private synchronized EndIsland tryCreateEndIslandInOuterLands(int chunkX,int chunkY){  if (noiseFunction.noise(chunkX,chunkY) < ISLAND_DENSITY_THRESHOLD) {    return new EndIsland(chunkX,chunkY,getErosionFactor(chunkX,chunkY));  } else {    return null;  }}  }
class C{  private void addTradingday(Tradingday tradingday) throws ValueTypeException {  MutableTreeNode tradingdayNode=new DefaultMutableTreeNode(tradingday);  m_root.add(tradingdayNode);  m_nodeMap.put(tradingdayNode,tradingday);  int childStrategy=0;  int childContract=0;  Side side=Side.newInstance("");  MutableTreeNode tradstrategyNode=null;  for (  Tradestrategy tradestrategy : tradingday.getTradestrategies()) {    Side trdestrategySide=Side.newInstance(tradestrategy.getSide());    if (tradstrategyNode == null || !side.equalsCode(trdestrategySide.getCode())) {      side=trdestrategySide;      childContract=0;      tradstrategyNode=new DefaultMutableTreeNode(side);      m_nodeMap.put(tradstrategyNode,side);      tradingdayNode.insert(tradstrategyNode,childStrategy);      childStrategy++;    }    MutableTreeNode contractNode=new DefaultMutableTreeNode(tradestrategy);    m_nodeMap.put(contractNode,tradestrategy);    tradstrategyNode.insert(contractNode,childContract);    childContract++;  }}  }
class C{  public ReplicatorException(String arg0){  super(arg0);}  }
class C{  public void testSingleMultiPolygonNoHoleRoundTrip() throws SQLException {  PolygonGenerator pgc=new PolygonGenerator();  pgc.setGeometryFactory(geometryFactory);  pgc.setNumberPoints(10);  MultiGenerator pg=new MultiGenerator(pgc);  pg.setBoundingBox(new Envelope(0,10,0,10));  pg.setNumberGeometries(3);  pg.setGeometryFactory(geometryFactory);  MultiPolygon pt=(MultiPolygon)pg.create();  OraWriter ow=new OraWriter();  STRUCT st=ow.write(pt,getConnection());  OraReader or=new OraReader();  MultiPolygon pt2=(MultiPolygon)or.read(st);  assertTrue("The input MultiPolygon is not the same as the output MultiPolygon",pt.equals(pt2));}  }
class C{  public int storeData(byte[] data) throws IOException {  assert data != null : "data must not be null";  int id=getID(data);  if (id == -1) {    long offset=dataFile.storeData(data);    id=idFile.storeOffset(offset);    hashFile.storeID(getDataHash(data),id);  }  return id;}  }
class C{  public static String format(Date date,boolean millis){  return format(date,millis,TIMEZONE_UTC);}  }
class C{  @Override public boolean contains(Object object){  return indexOf(object,0) != -1;}  }
class C{  private static String PojoFieldsToString(final List<PojoField> pojoFields,final Object instance){  String pojoString="";  for (int index=0; index < pojoFields.size(); index++) {    pojoString+=pojoFields.get(index).toString(instance);    if (index < pojoFields.size() - 1) {      pojoString+=LIST_TOKEN_SEPERATOR;    }  }  return pojoString;}  }
class C{  public static BufferedReader newReader(URL url,Map parameters,String charset) throws MalformedURLException, IOException {  return new BufferedReader(new InputStreamReader(configuredInputStream(parameters,url),charset));}  }
class C{  private void createPartitionRegion(List vmList,int startIndexForRegion,int endIndexForRegion,int localMaxMemory,int redundancy){  Iterator nodeIterator=vmList.iterator();  while (nodeIterator.hasNext()) {    VM vm=(VM)nodeIterator.next();    vm.invoke(createMultiplePRWithTotalNumBucketPropSet(prPrefix,startIndexForRegion,endIndexForRegion,redundancy,localMaxMemory,11));  }}  }
class C{  public void proceed(int priority) throws InterruptedException {synchronized (lock) {    while (highestPriority < priority) {      lock.wait();    }  }}  }
class C{  public void randomizePlayerOrder(){  if (players == null || players.size() == 0) {    return;  }  Collections.shuffle(players);  int playerCount=players.size();  for (int i=0; i < playerCount; i++) {    Player p=players.get(i);    p.setSeat(i + 1);  }}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public Asn1Exception(String message){  super(message);}  }
class C{  @SuppressWarnings({"unchecked"}) public static <T>T[] subarray(T[] buffer,int offset,int length,Class<T> componentType){  T[] temp=(T[])Array.newInstance(componentType,length);  System.arraycopy(buffer,offset,temp,0,length);  return temp;}  }
class C{  public static <T>EqualsVerifier<T> forClass(Class<T> type){  Configuration<T> config=Configuration.of(type);  return new EqualsVerifier<>(config);}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:04.997 -0500",hash_original_method="1B482CA9527A6F5074105168D7DF9619",hash_generated_method="73AA028CE3FAAE6C1391FDD4E75C022F") protected ConnectionStateSSLv3(SSLSessionImpl session){  try {    CipherSuite cipherSuite=session.cipherSuite;    boolean is_exportabe=cipherSuite.isExportable();    hash_size=cipherSuite.getMACLength();    int key_size=(is_exportabe) ? cipherSuite.keyMaterial : cipherSuite.expandedKeyMaterial;    int iv_size=cipherSuite.ivSize;    block_size=cipherSuite.getBlockSize();    String algName=cipherSuite.getBulkEncryptionAlgorithm();    String hashName=cipherSuite.getHashName();    if (logger != null) {      logger.println("ConnectionStateSSLv3.create:");      logger.println("  cipher suite name: " + session.getCipherSuite());      logger.println("  encryption alg name: " + algName);      logger.println("  hash alg name: " + hashName);      logger.println("  hash size: " + hash_size);      logger.println("  block size: " + block_size);      logger.println("  IV size:" + iv_size);      logger.println("  key size: " + key_size);    }    byte[] clientRandom=session.clientRandom;    byte[] serverRandom=session.serverRandom;    byte[] key_block=new byte[2 * hash_size + 2 * key_size + 2 * iv_size];    byte[] seed=new byte[clientRandom.length + serverRandom.length];    System.arraycopy(serverRandom,0,seed,0,serverRandom.length);    System.arraycopy(clientRandom,0,seed,serverRandom.length,clientRandom.length);    PRF.computePRF_SSLv3(key_block,session.master_secret,seed);    byte[] client_mac_secret=new byte[hash_size];    byte[] server_mac_secret=new byte[hash_size];    byte[] client_key=new byte[key_size];    byte[] server_key=new byte[key_size];    boolean is_client=!session.isServer;    System.arraycopy(key_block,0,client_mac_secret,0,hash_size);    System.arraycopy(key_block,hash_size,server_mac_secret,0,hash_size);    System.arraycopy(key_block,2 * hash_size,client_key,0,key_size);    System.arraycopy(key_block,2 * hash_size + key_size,server_key,0,key_size);    IvParameterSpec clientIV=null;    IvParameterSpec serverIV=null;    if (is_exportabe) {      if (logger != null) {        logger.println("ConnectionStateSSLv3: is_exportable");      }      MessageDigest md5=MessageDigest.getInstance("MD5");      md5.update(client_key);      md5.update(clientRandom);      md5.update(serverRandom);      client_key=md5.digest();      md5.update(server_key);      md5.update(serverRandom);      md5.update(clientRandom);      server_key=md5.digest();      key_size=cipherSuite.expandedKeyMaterial;      if (block_size != 0) {        md5.update(clientRandom);        md5.update(serverRandom);        clientIV=new IvParameterSpec(md5.digest(),0,iv_size);        md5.update(serverRandom);        md5.update(clientRandom);        serverIV=new IvParameterSpec(md5.digest(),0,iv_size);      }    } else     if (block_size != 0) {      clientIV=new IvParameterSpec(key_block,2 * hash_size + 2 * key_size,iv_size);      serverIV=new IvParameterSpec(key_block,2 * hash_size + 2 * key_size + iv_size,iv_size);    }    if (logger != null) {      logger.println("is exportable: " + is_exportabe);      logger.println("master_secret");      logger.print(session.master_secret);      logger.println("client_random");      logger.print(clientRandom);      logger.println("server_random");      logger.print(serverRandom);      logger.println("client_mac_secret");      logger.print(client_mac_secret);      logger.println("server_mac_secret");      logger.print(server_mac_secret);      logger.println("client_key");      logger.print(client_key,0,key_size);      logger.println("server_key");      logger.print(server_key,0,key_size);      if (clientIV != null) {        logger.println("client_iv");        logger.print(clientIV.getIV());        logger.println("server_iv");        logger.print(serverIV.getIV());      } else {        logger.println("no IV.");      }    }    if (algName == null) {      encCipher=new NullCipher();      decCipher=new NullCipher();    } else {      encCipher=Cipher.getInstance(algName);      decCipher=Cipher.getInstance(algName);      if (is_client) {        encCipher.init(Cipher.ENCRYPT_MODE,new SecretKeySpec(client_key,0,key_size,algName),clientIV);        decCipher.init(Cipher.DECRYPT_MODE,new SecretKeySpec(server_key,0,key_size,algName),serverIV);      } else {        encCipher.init(Cipher.ENCRYPT_MODE,new SecretKeySpec(server_key,0,key_size,algName),serverIV);        decCipher.init(Cipher.DECRYPT_MODE,new SecretKeySpec(client_key,0,key_size,algName),clientIV);      }    }    messageDigest=MessageDigest.getInstance(hashName);    if (is_client) {      mac_write_secret=client_mac_secret;      mac_read_secret=server_mac_secret;    } else {      mac_write_secret=server_mac_secret;      mac_read_secret=client_mac_secret;    }    if (hashName.equals("MD5")) {      pad_1=SSLv3Constants.MD5pad1;      pad_2=SSLv3Constants.MD5pad2;    } else {      pad_1=SSLv3Constants.SHApad1;      pad_2=SSLv3Constants.SHApad2;    }  } catch (  Exception e) {    e.printStackTrace();    throw new AlertException(AlertProtocol.INTERNAL_ERROR,new SSLProtocolException("Error during computation of security parameters"));  }}  }
class C{  public boolean exitsTo(ITerrain other){  if (other == null) {    return false;  }  boolean exitableTerrainType=Terrains.exitableTerrain(type);  return (type == other.getType()) && exitableTerrainType && (level == other.getLevel());}  }
class C{  @CanIgnoreReturnValue @Deprecated @Override public ImmutableSet<V> replaceValues(K key,Iterable<? extends V> values){  throw new UnsupportedOperationException();}  }
class C{  public static void loadFromFile(final Window parent,final INaviModule module,final String filename){  try {    final byte[] data=ByteStreams.toByteArray(new FileInputStream(filename));    module.setData(data);  } catch (  final IOException exception) {    CUtilityFunctions.logException(exception);    final String message="E00207: " + "Could not load module data from file";    final String description=CUtilityFunctions.createDescription(String.format("BinNavi could not load the data of file '%s'.",filename),new String[]{"There was a problem reading the file."},new String[]{"The module data was not loaded."});    NaviErrorDialog.show(parent,message,description,exception);  }}  }
class C{  public IndicesAliasesRequest addAlias(String alias,Map<String,Object> filter,String... indices){  addAliasAction(new AliasActions(AliasAction.Type.ADD,indices,alias).filter(filter));  return this;}  }
class C{  public static AsyncWorld wrap(World world){  if (world instanceof AsyncWorld) {    return (AsyncWorld)world;  }  return new AsyncWorld(world,false);}  }
class C{  public boolean isSource(){  return source;}  }
class C{  public void enqueueAsyncDnsRefresh(HostResource host){  Key<HostResource> hostKey=Key.create(host);  logger.infofmt("Enqueuing async DNS refresh for renamed host %s.",hostKey);  addTaskToQueueWithRetry(asyncDnsRefreshPullQueue,TaskOptions.Builder.withMethod(Method.PULL).param(PARAM_HOST_KEY,hostKey.getString()));}  }
class C{  public ConverterObjectInputStream(InputStream in) throws IOException {  super(in);  createLookups();}  }
class C{  public boolean isRepeatable(){  return true;}  }
class C{  public static boolean canChildScrollUp(View view){  if (android.os.Build.VERSION.SDK_INT < 14) {    if (view instanceof AbsListView) {      final AbsListView absListView=(AbsListView)view;      return absListView.getChildCount() > 0 && (absListView.getFirstVisiblePosition() > 0 || absListView.getChildAt(0).getTop() < absListView.getPaddingTop());    } else {      return view.getScrollY() > 0;    }  } else {    return view.canScrollVertically(-1);  }}  }
class C{  public static String replaceUnderscores(String origText_){  return origText_.replaceAll("_","-");}  }
class C{  private boolean removeMapping(Object key,Object value){  if (key == null) {    HashMapEntry<K,V> e=entryForNullKey;    if (e == null || !Objects.equal(value,e.value)) {      return false;    }    entryForNullKey=null;    modCount++;    size--;    postRemove(e);    return true;  }  int hash=secondaryHash(key);  HashMapEntry<K,V>[] tab=table;  int index=hash & (tab.length - 1);  for (HashMapEntry<K,V> e=tab[index], prev=null; e != null; prev=e, e=e.next) {    if (e.hash == hash && key.equals(e.key)) {      if (!Objects.equal(value,e.value)) {        return false;      }      if (prev == null) {        tab[index]=e.next;      } else {        prev.next=e.next;      }      modCount++;      size--;      postRemove(e);      return true;    }  }  return false;}  }
class C{  public ClassCastException(){  super();}  }
class C{  static TerminalBindingCondition forString(final String condStr){  return COND_TO_INSTANCE.get(condStr);}  }
class C{  public Source<T[]> withLength(int length){  return withLengthBetween(length,length);}  }
class C{  @Override public void println(int priority,String tag,String msg,Throwable tr){  String useMsg=msg;  if (useMsg == null) {    useMsg="";  }  if (tr != null) {    msg+="\n" + Log.getStackTraceString(tr);  }  Log.println(priority,tag,useMsg);  if (mNext != null) {    mNext.println(priority,tag,msg,tr);  }}  }
class C{  public void persistBackupUploadStatus(BackupUploadStatus status){  Map<String,String> allItems=(status != null) ? status.getAllItems() : null;  if (allItems == null || allItems.size() == 0) {    return;  }  ConfigurationImpl config=new ConfigurationImpl();  config.setKind(BackupConstants.BACKUP_UPLOAD_STATUS);  config.setId(Constants.GLOBAL_ID);  log.info("Setting upload status: {}",status);  for (  Map.Entry<String,String> entry : allItems.entrySet()) {    config.setConfig(entry.getKey(),entry.getValue());  }  CoordinatorClient coordinatorClient=coordinator.getCoordinatorClient();  coordinatorClient.persistServiceConfiguration(coordinatorClient.getSiteId(),config);  log.info("Persist backup upload status to zk successfully");}  }
class C{  public static Pair<JobSpecification,Boolean> buildDisconnectFeedJobSpec(AqlMetadataProvider metadataProvider,FeedConnectionId connectionId) throws AsterixException, AlgebricksException {  JobSpecification spec=JobSpecificationUtils.createJobSpecification();  IOperatorDescriptor feedMessenger;  AlgebricksPartitionConstraint messengerPc;  List<String> locations=null;  FeedRuntimeType sourceRuntimeType;  try {    FeedEventsListener listener=(FeedEventsListener)ActiveJobNotificationHandler.INSTANCE.getActiveEntityListener(connectionId.getFeedId());    FeedConnectJobInfo cInfo=listener.getFeedConnectJobInfo(connectionId);    IFeedJoint sourceFeedJoint=cInfo.getSourceFeedJoint();    IFeedJoint computeFeedJoint=cInfo.getComputeFeedJoint();    boolean terminateIntakeJob=false;    boolean completeDisconnect=computeFeedJoint == null || computeFeedJoint.getReceivers().isEmpty();    if (completeDisconnect) {      sourceRuntimeType=FeedRuntimeType.INTAKE;      locations=cInfo.getCollectLocations();      terminateIntakeJob=sourceFeedJoint.getReceivers().size() == 1;    } else {      locations=cInfo.getComputeLocations();      sourceRuntimeType=FeedRuntimeType.COMPUTE;    }    Pair<IOperatorDescriptor,AlgebricksPartitionConstraint> p=buildDisconnectFeedMessengerRuntime(spec,connectionId,locations,sourceRuntimeType,completeDisconnect,sourceFeedJoint.getOwnerFeedId());    feedMessenger=p.first;    messengerPc=p.second;    AlgebricksPartitionConstraintHelper.setPartitionConstraintInJobSpec(spec,feedMessenger,messengerPc);    NullSinkOperatorDescriptor nullSink=new NullSinkOperatorDescriptor(spec);    AlgebricksPartitionConstraintHelper.setPartitionConstraintInJobSpec(spec,nullSink,messengerPc);    spec.connect(new OneToOneConnectorDescriptor(spec),feedMessenger,0,nullSink,0);    spec.addRoot(nullSink);    return new Pair<JobSpecification,Boolean>(spec,terminateIntakeJob);  } catch (  AlgebricksException e) {    throw new AsterixException(e);  }}  }
class C{  public BooleanGlassGeneIm(BooleanGlassGenePm genePm,Parameters parameters){  try {    this.genePm=genePm;    this.glassFunction=new BooleanGlassFunction(genePm.getLagGraph());    this.initializer=new BasalInitializer(glassFunction,0,1);    this.history=new GeneHistory(initializer,glassFunction);    this.simulator=new MeasurementSimulatorParams(parameters);  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  private void generateAttributes(TextNode node,Type type,Map<String,String> attributes,SourceContext srcContext,String variableName){  if (attributes != null) {    StringBuilder buf=srcContext.functionBuffer;    if (node instanceof ImgNode) {      String imgSource=attributes.get("source");      imgSource=parseSource(imgSource);      if (imgSource != null) {        File f=new File(imgSource);        if (!f.isAbsolute() && resourceResolver != null) {          String resolvedPath=resourceResolver.resolve(imgSource);          if (resolvedPath != null)           imgSource=resolvedPath;        }        imgSource=imgSource.replace('\\','/');        if (srcContext.classBuffer == null)         srcContext.classBuffer=new StringBuilder(128);        StringBuilder classBuf=srcContext.classBuffer;        String imgVar=createUniqueName("img");        classBuf.append("\n");        classBuf.append("    [Embed(source=\"").append(imgSource).append("\")]\n");        classBuf.append("    private static var ").append(imgVar).append(":Class;\n");        buf.append("        ").append(variableName).append(".source = ").append(imgVar).append(";\n");        attributes.remove("source");      }    }    for (    Map.Entry<String,String> entry : attributes.entrySet()) {      String attribName=entry.getKey();      String attribValue=entry.getValue();      String thisAttrib=null;      Property property=type.getProperty(attribName);      if (property != null) {        Type propertyType=property.getType();        if (propertyType.isAssignableTo(typeTable.stringType) || propertyType == typeTable.objectType || propertyType == typeTable.noType) {          thisAttrib=attribName + " = \"" + attribValue+ "\"";        } else {          thisAttrib=attribName + " = " + attribValue;        }      }      if (thisAttrib != null)       buf.append("        " + variableName + '.'+ thisAttrib+ ";\r\n");    }  }}  }
class C{  public void destroy(){  log.fine("destroy");  super.destroy();}  }
class C{  public static int computeRawVarint64Size(final long value){  if ((value & (0xffffffffffffffffL << 7)) == 0)   return 1;  if ((value & (0xffffffffffffffffL << 14)) == 0)   return 2;  if ((value & (0xffffffffffffffffL << 21)) == 0)   return 3;  if ((value & (0xffffffffffffffffL << 28)) == 0)   return 4;  if ((value & (0xffffffffffffffffL << 35)) == 0)   return 5;  if ((value & (0xffffffffffffffffL << 42)) == 0)   return 6;  if ((value & (0xffffffffffffffffL << 49)) == 0)   return 7;  if ((value & (0xffffffffffffffffL << 56)) == 0)   return 8;  if ((value & (0xffffffffffffffffL << 63)) == 0)   return 9;  return 10;}  }
class C{  public void antientropy(Node node){  if (!rpcService.isConnected(node.getNodeId()))   return;  logger.info("[{}->{}] Synchronizing local state to remote node",getLocalNodeId(),node.getNodeId());  for (  SynchronizingStorageEngine store : storeRegistry.values()) {    if (Scope.LOCAL.equals(store.getScope())) {      if (node.getDomainId() != getClusterConfig().getNode().getDomainId())       continue;    } else     if (Scope.UNSYNCHRONIZED.equals(store.getScope())) {      continue;    }    IClosableIterator<Entry<ByteArray,List<Versioned<byte[]>>>> entries=store.entries();    try {      SyncMessage bsm=TProtocolUtil.getTSyncOfferMessage(store.getName(),store.getScope(),store.isPersistent());      int count=0;      while (entries.hasNext()) {        if (!rpcService.isConnected(node.getNodeId()))         return;        Entry<ByteArray,List<Versioned<byte[]>>> pair=entries.next();        KeyedVersions kv=TProtocolUtil.getTKeyedVersions(pair.getKey(),pair.getValue());        bsm.getSyncOffer().addToVersions(kv);        count+=1;        if (count >= 50) {          sendSyncOffer(node.getNodeId(),bsm);          bsm=TProtocolUtil.getTSyncOfferMessage(store.getName(),store.getScope(),store.isPersistent());          count=0;        }      }      sendSyncOffer(node.getNodeId(),bsm);    } catch (    InterruptedException e) {      throw new RuntimeException(e);    } finally {      entries.close();    }  }}  }
class C{  public boolean isSystemUser(){  return systemUser;}  }
class C{  public static char[] encode(byte[] in,int iLen){  return encode(in,0,iLen);}  }
class C{  public static Properties loadPomProperties(String groupId,String artifactId) throws IOException {  String properties="META-INF/maven/" + groupId + "/"+ artifactId+ "/pom.properties";  return ResourceUtil.getProperties(properties);}  }
class C{  public ToStringBuilder append(String fieldName,Object obj){  style.append(buffer,fieldName,obj,null);  return this;}  }
class C{  public void resetHeaderHeight(){  int height=mHeaderView.getVisiableHeight();  if (height == 0)   return;  if (mPullRefreshing && height <= mHeaderViewHeight) {    return;  }  int finalHeight=0;  if (mPullRefreshing && height > mHeaderViewHeight) {    finalHeight=mHeaderViewHeight;  }  Log.d("xlistview","resetHeaderHeight-->" + (finalHeight - height));  mScrollBack=SCROLLBACK_HEADER;  mScroller.startScroll(0,height,0,finalHeight - height,SCROLL_DURATION);  invalidate();}  }
class C{  public InstanceOfQueryExp(StringValueExp classNameValue){  if (classNameValue == null) {    throw new IllegalArgumentException("Null class name.");  }  this.classNameValue=classNameValue;}  }
class C{  public void writeUri(String key,Uri value){  if (writeParameter(key,value == null ? null : value.toString()) != 0) {    mCache.put(key,value);  }}  }
class C{  @Override public void actionPerformed(ActionEvent e){  File thisFile;  if (configuredFile != null) {    thisFile=configuredFile;  } else {    thisFile=selectFile();  }  if (thisFile != null) {    invoke(thisFile);  } else {    log.info("No file selected");  }}  }
class C{  protected static int dpToPixel(Context context,float dp){  Resources resources=context.getResources();  DisplayMetrics metrics=resources.getDisplayMetrics();  try {    return (int)(dp * (metrics.densityDpi / 160f));  } catch (  NoSuchFieldError ignored) {    return (int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dp,metrics);  }}  }
class C{  String[] processName(String qName,boolean isAttribute){  String name[];  Hashtable table;  if (isAttribute) {    if (elementNameTable == null)     elementNameTable=new Hashtable();    table=elementNameTable;  } else {    if (attributeNameTable == null)     attributeNameTable=new Hashtable();    table=attributeNameTable;  }  name=(String[])table.get(qName);  if (name != null) {    return name;  }  name=new String[3];  int index=qName.indexOf(':');  if (index == -1) {    if (isAttribute || defaultNS == null) {      name[0]="";    } else {      name[0]=defaultNS;    }    name[1]=qName.intern();    name[2]=name[1];  } else {    String prefix=qName.substring(0,index);    String local=qName.substring(index + 1);    String uri;    if ("".equals(prefix)) {      uri=defaultNS;    } else {      uri=(String)prefixTable.get(prefix);    }    if (uri == null) {      return null;    }    name[0]=uri;    name[1]=local.intern();    name[2]=qName.intern();  }  table.put(name[2],name);  tablesDirty=true;  return name;}  }
class C{  public ImmutableMultimap<State,Service> servicesByState(){  return state.servicesByState();}  }
class C{  @LargeTest public void testThumbnailListForH264WVGAWithSetBoundaries() throws Exception {  final String videoItemFilename=INPUT_FILE_PATH + "H264_BP_800x480_15fps_512kbps_1_17.mp4";  final int thumbNailStartTime=10000;  final int thumbNailEndTime=12000;  final int tnCount=10;  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final MediaVideoItem mediaVideoItem=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",videoItemFilename,renderingMode);  final int outWidth=(mediaVideoItem.getWidth() / 2);  final int outHeight=(mediaVideoItem.getHeight() / 2);  mediaVideoItem.setExtractBoundaries(10000,12000);  final Bitmap thumbNailBmp[]=mediaVideoItem.getThumbnailList(outWidth,outHeight,thumbNailStartTime,thumbNailEndTime,tnCount);  assertNotNull("Thumbnail Retrived is Null",thumbNailBmp);  assertTrue("Thumbnail Size",(thumbNailBmp.length > 0) ? true : false);  for (int i=0; i < thumbNailBmp.length; i++) {    validateThumbnail(thumbNailBmp[i],outWidth,outHeight);    thumbNailBmp[i]=null;  }}  }
class C{  static public long executeUpdate(final BigdataSailRepositoryConnection conn,final ASTContainer astContainer,final Dataset dataset,final boolean includeInferred,final QueryBindingSet bs) throws UpdateExecutionException {  if (conn == null)   throw new IllegalArgumentException();  if (astContainer == null)   throw new IllegalArgumentException();  final DeferredResolutionResult resolved;  try {    resolved=ASTDeferredIVResolution.resolveUpdate(conn.getTripleStore(),astContainer,bs,dataset);  } catch (  MalformedQueryException e) {    throw new UpdateExecutionException(e.getMessage(),e);  }  try {    if (dataset != null) {      applyDataSet(conn.getTripleStore(),astContainer,resolved.dataset);    }    final AST2BOpUpdateContext ctx=new AST2BOpUpdateContext(astContainer,conn);    doSparqlLogging(ctx);    ctx.setIncludeInferred(includeInferred);    final IBindingSet[] bindingSets=toBindingSet(resolved.bindingSet);    ctx.setQueryBindingSet(bs);    ctx.setBindings(bindingSets);    ctx.setDataset(dataset);    AST2BOpUpdate.optimizeUpdateRoot(ctx);    AST2BOpUpdate.convertUpdate(ctx);    return ctx.getCommitTime();  } catch (  Exception ex) {    ex.printStackTrace();    throw new UpdateExecutionException(ex);  }}  }
class C{  public void drawDebugData(){  if (m_debugDraw == null) {    return;  }  int flags=m_debugDraw.getFlags();  boolean wireframe=(flags & DebugDraw.e_wireframeDrawingBit) != 0;  if ((flags & DebugDraw.e_shapeBit) != 0) {    for (Body b=m_bodyList; b != null; b=b.getNext()) {      xf.set(b.getTransform());      for (Fixture f=b.getFixtureList(); f != null; f=f.getNext()) {        if (b.isActive() == false) {          color.set(0.5f,0.5f,0.3f);          drawShape(f,xf,color,wireframe);        } else         if (b.getType() == BodyType.STATIC) {          color.set(0.5f,0.9f,0.3f);          drawShape(f,xf,color,wireframe);        } else         if (b.getType() == BodyType.KINEMATIC) {          color.set(0.5f,0.5f,0.9f);          drawShape(f,xf,color,wireframe);        } else         if (b.isAwake() == false) {          color.set(0.5f,0.5f,0.5f);          drawShape(f,xf,color,wireframe);        } else {          color.set(0.9f,0.7f,0.7f);          drawShape(f,xf,color,wireframe);        }      }    }    drawParticleSystem(m_particleSystem);  }  if ((flags & DebugDraw.e_jointBit) != 0) {    for (Joint j=m_jointList; j != null; j=j.getNext()) {      drawJoint(j);    }  }  if ((flags & DebugDraw.e_pairBit) != 0) {    color.set(0.3f,0.9f,0.9f);    for (Contact c=m_contactManager.m_contactList; c != null; c=c.getNext()) {      Fixture fixtureA=c.getFixtureA();      Fixture fixtureB=c.getFixtureB();      fixtureA.getAABB(c.getChildIndexA()).getCenterToOut(cA);      fixtureB.getAABB(c.getChildIndexB()).getCenterToOut(cB);      m_debugDraw.drawSegment(cA,cB,color);    }  }  if ((flags & DebugDraw.e_aabbBit) != 0) {    color.set(0.9f,0.3f,0.9f);    for (Body b=m_bodyList; b != null; b=b.getNext()) {      if (b.isActive() == false) {        continue;      }      for (Fixture f=b.getFixtureList(); f != null; f=f.getNext()) {        for (int i=0; i < f.m_proxyCount; ++i) {          FixtureProxy proxy=f.m_proxies[i];          AABB aabb=m_contactManager.m_broadPhase.getFatAABB(proxy.proxyId);          if (aabb != null) {            Vec2[] vs=avs.get(4);            vs[0].set(aabb.lowerBound.x,aabb.lowerBound.y);            vs[1].set(aabb.upperBound.x,aabb.lowerBound.y);            vs[2].set(aabb.upperBound.x,aabb.upperBound.y);            vs[3].set(aabb.lowerBound.x,aabb.upperBound.y);            m_debugDraw.drawPolygon(vs,4,color);          }        }      }    }  }  if ((flags & DebugDraw.e_centerOfMassBit) != 0) {    for (Body b=m_bodyList; b != null; b=b.getNext()) {      xf.set(b.getTransform());      xf.p.set(b.getWorldCenter());      m_debugDraw.drawTransform(xf);    }  }  if ((flags & DebugDraw.e_dynamicTreeBit) != 0) {    m_contactManager.m_broadPhase.drawTree(m_debugDraw);  }  m_debugDraw.flush();}  }
class C{  public static boolean isEmpty(String input){  if (input == null || "".equals(input))   return true;  for (int i=0; i < input.length(); i++) {    char c=input.charAt(i);    if (c != ' ' && c != '\t' && c != '\r' && c != '\n') {      return false;    }  }  return true;}  }
class C{  public int hashCode(){  int retval=0;  if (iv != null) {    for (int i=1; i < iv.length; i++) {      retval+=iv[i] * i;    }  }  return (retval+=effectiveKeyBits);}  }
class C{  public static List<Locale> availableLocales(){  return LocaleHolder.availableLocaleList;}  }
class C{  public static void assertEqual(byte expected,byte actual){  if (verbose) {    log("assertEqual(" + expected + ", "+ actual+ ")");  }  assertBool(expected == actual);}  }
class C{  @Deprecated public AdBlockerAdviseDialog(Context context,boolean onlyOnce){  this.libraryPreferences=new LibraryPreferences(context);  this.context=context;  this.title=context.getResources().getString(R.string.dialog_title);  this.text=String.format(context.getResources().getString(R.string.dialog_text),UtilsLibrary.getAppName(context));  this.onlyOnce=onlyOnce;}  }
class C{  public static String decStringToHexString(final String decString){  Preconditions.checkNotNull(decString,"Error: Decimal string can't be null");  return Long.toHexString(Long.valueOf(decString,16));}  }
class C{  void checkMode(){  if (bscMode.isSelected()) {    Engine.instance().setBscPollMode();  } else   if (throttleMode.isSelected()) {    Engine.instance().setThrottlePollMode();  } else {    Engine.instance().setDirectPollMode();  }}  }
class C{  protected boolean doCheckState(){  return true;}  }
class C{  public static void pingAllDevices(String emailAddress,String id,String operation){  Sender sender=new Sender(Ids.API_KEY);  for (  DeviceInfo deviceInfo : endpoint.listDeviceInfo()) {    Message msg=new Message.Builder().addData("id",id).addData("emailAddress",emailAddress).addData("operation",operation).build();    Result result;    try {      result=sender.send(msg,deviceInfo.getDeviceRegistrationID(),5);    } catch (    IOException e1) {      LOG.log(Level.WARNING,"gcm",e1);      continue;    }    LOG.log(Level.INFO,"Message ID:" + result.getMessageId());    LOG.log(Level.INFO,"Error code:" + result.getErrorCodeName());    String error=result.getErrorCodeName();    if (result.getMessageId() != null) {      String canonicalRegId=result.getCanonicalRegistrationId();      if (canonicalRegId != null) {        endpoint.removeDeviceInfo(deviceInfo.getDeviceRegistrationID());        deviceInfo.setDeviceRegistrationID(canonicalRegId);        endpoint.insertDeviceInfo(deviceInfo);      }    } else     if (error.equals(Constants.ERROR_NOT_REGISTERED)) {      endpoint.removeDeviceInfo(deviceInfo.getDeviceRegistrationID());    }  }}  }
class C{  public static String byteCountToDisplaySize(BigInteger size){  String displaySize;  if (size.divide(ONE_EB_BI).compareTo(BigInteger.ZERO) > 0) {    displaySize=String.valueOf(size.divide(ONE_EB_BI)) + " EB";  } else   if (size.divide(ONE_PB_BI).compareTo(BigInteger.ZERO) > 0) {    displaySize=String.valueOf(size.divide(ONE_PB_BI)) + " PB";  } else   if (size.divide(ONE_TB_BI).compareTo(BigInteger.ZERO) > 0) {    displaySize=String.valueOf(size.divide(ONE_TB_BI)) + " TB";  } else   if (size.divide(ONE_GB_BI).compareTo(BigInteger.ZERO) > 0) {    displaySize=String.valueOf(size.divide(ONE_GB_BI)) + " GB";  } else   if (size.divide(ONE_MB_BI).compareTo(BigInteger.ZERO) > 0) {    displaySize=String.valueOf(size.divide(ONE_MB_BI)) + " MB";  } else   if (size.divide(ONE_KB_BI).compareTo(BigInteger.ZERO) > 0) {    displaySize=String.valueOf(size.divide(ONE_KB_BI)) + " KB";  } else {    displaySize=String.valueOf(size) + " bytes";  }  return displaySize;}  }
class C{  public boolean isOpaque(){  return is(OPAQUE);}  }
class C{  public void error(Object message){}  }
class C{  public void endVisit(SwitchCase node){}  }
class C{  public void testRegexps() throws Exception {  int num=atLeast(1000);  for (int i=0; i < num; i++) {    String reg=AutomatonTestUtil.randomRegexp(random());    if (VERBOSE) {      System.out.println("TEST: regexp='" + reg + "'");    }    assertSame(reg);  }}  }
class C{  public OFNetmaskGetVendorDataReply(){  super(BSN_GET_IP_MASK_ENTRY_REPLY);}  }
class C{  @Override protected void verifyMatch(Object target,Object deserialized){  SimpleTriggerImpl targetSimpleTrigger=(SimpleTriggerImpl)target;  SimpleTriggerImpl deserializedSimpleTrigger=(SimpleTriggerImpl)deserialized;  assertNotNull(deserializedSimpleTrigger);  assertEquals(targetSimpleTrigger.getName(),deserializedSimpleTrigger.getName());  assertEquals(targetSimpleTrigger.getGroup(),deserializedSimpleTrigger.getGroup());  assertEquals(targetSimpleTrigger.getJobName(),deserializedSimpleTrigger.getJobName());  assertEquals(targetSimpleTrigger.getJobGroup(),deserializedSimpleTrigger.getJobGroup());  assertEquals(targetSimpleTrigger.getStartTime(),deserializedSimpleTrigger.getStartTime());  assertEquals(targetSimpleTrigger.getEndTime(),deserializedSimpleTrigger.getEndTime());  assertEquals(targetSimpleTrigger.getRepeatCount(),deserializedSimpleTrigger.getRepeatCount());  assertEquals(targetSimpleTrigger.getRepeatInterval(),deserializedSimpleTrigger.getRepeatInterval());  assertEquals(targetSimpleTrigger.getCalendarName(),deserializedSimpleTrigger.getCalendarName());  assertEquals(targetSimpleTrigger.getDescription(),deserializedSimpleTrigger.getDescription());  assertEquals(targetSimpleTrigger.getJobDataMap(),deserializedSimpleTrigger.getJobDataMap());  assertEquals(targetSimpleTrigger.getMisfireInstruction(),deserializedSimpleTrigger.getMisfireInstruction());}  }
class C{  public void paint(Graphics g){  int width=getWidth();  int height=getHeight();  if ((width <= 0) || (height <= 0)) {    return;  }  if (inBlitPaint) {    super.paint(g);    return;  }  if (repaintAll) {    repaintAll=false;    Rectangle clipB=g.getClipBounds();    if (clipB.width < getWidth() || clipB.height < getHeight()) {      waitingForRepaint=true;      if (repaintTimer == null) {        repaintTimer=createRepaintTimer();      }      repaintTimer.stop();      repaintTimer.start();    } else {      if (repaintTimer != null) {        repaintTimer.stop();      }      waitingForRepaint=false;    }  } else   if (waitingForRepaint) {    Rectangle clipB=g.getClipBounds();    if (clipB.width >= getWidth() && clipB.height >= getHeight()) {      waitingForRepaint=false;      repaintTimer.stop();    }  }  if (!backingStore || isBlitting() || getView() == null) {    super.paint(g);    lastPaintPosition=getViewLocation();    return;  }  Rectangle viewBounds=getView().getBounds();  if (!isOpaque()) {    g.clipRect(0,0,viewBounds.width,viewBounds.height);  }  if (backingStoreImage == null) {    backingStoreImage=createImage(width,height);    Rectangle clip=g.getClipBounds();    if (clip.width != width || clip.height != height) {      if (!isOpaque()) {        g.setClip(0,0,Math.min(viewBounds.width,width),Math.min(viewBounds.height,height));      } else {        g.setClip(0,0,width,height);      }      paintViaBackingStore(g,clip);    } else {      paintViaBackingStore(g);    }  } else {    if (!scrollUnderway || lastPaintPosition.equals(getViewLocation())) {      paintViaBackingStore(g);    } else {      Point blitFrom=new Point();      Point blitTo=new Point();      Dimension blitSize=new Dimension();      Rectangle blitPaint=new Rectangle();      Point newLocation=getViewLocation();      int dx=newLocation.x - lastPaintPosition.x;      int dy=newLocation.y - lastPaintPosition.y;      boolean canBlit=computeBlit(dx,dy,blitFrom,blitTo,blitSize,blitPaint);      if (!canBlit) {        paintViaBackingStore(g);      } else {        int bdx=blitTo.x - blitFrom.x;        int bdy=blitTo.y - blitFrom.y;        Rectangle clip=g.getClipBounds();        g.setClip(0,0,width,height);        Graphics bsg=getBackingStoreGraphics(g);        try {          bsg.copyArea(blitFrom.x,blitFrom.y,blitSize.width,blitSize.height,bdx,bdy);          g.setClip(clip.x,clip.y,clip.width,clip.height);          Rectangle r=viewBounds.intersection(blitPaint);          bsg.setClip(r);          super.paint(bsg);          g.drawImage(backingStoreImage,0,0,this);        }  finally {          bsg.dispose();        }      }    }  }  lastPaintPosition=getViewLocation();  scrollUnderway=false;}  }
class C{  protected void useBackGround(UserBuilderStatus userBuilderStatus){  Ansi buffer=Ansi.ansi();  buffer.a("Build task for project ").a(INTENSITY_BOLD).a(userBuilderStatus.getProject().name()).a(INTENSITY_BOLD_OFF).a("' has been submitted with builder ID ").a(INTENSITY_BOLD).a(userBuilderStatus.shortId()).a(INTENSITY_BOLD_OFF).a(System.lineSeparator());  System.out.println(buffer.toString());  System.out.println(userBuilderStatus);}  }
class C{  public static Font createSystemFont(int face,int style,int size){  return new Font(face,style,size);}  }
class C{  public final void upDateCounterTreatZeroAsMissing(Instance instanceNoClass,Instance instanceClass){  if (containedByTreatZeroAsMissing(instanceNoClass)) {    m_counter++;    if (this.m_classLabel == instanceClass.value(0)) {      m_ruleSupCounter++;    }  }}  }
class C{  public static boolean isSorted(final CommonIndex arr1,final long len){  assert len <= arr1.length();  for (long ii=0; ii < len - 1; ii++) {    if (arr1.get(ii) > arr1.get(ii + 1)) {      return false;    }  }  return true;}  }
class C{  public void start(Activity activity){  activity.startActivityForResult(getIntent(activity),REQUEST_CROP);}  }
class C{  public boolean isUnderlineTriple(Node x,Node y,Node z){  return getGraph().isUnderlineTriple(x,y,z);}  }
class C{  @NotNull public JsonStringLiteral createStringLiteral(@NotNull String unescapedContent){  return createValue('"' + StringUtil.escapeStringCharacters(unescapedContent) + '"');}  }
class C{  public final void test_ROUNDTRIP_GetKeySpecKeyProvider01(){  boolean performed=false;  for (int i=0; i < algName.length; i++) {    for (int l=0; l < provider.length; l++) {      if (provider[l] == null) {        continue;      }      TestDataGenerator g;      try {        g=new TestDataGenerator(algName[i][0],algName[i][1],privateKeyInfo,provider[l]);      } catch (      TestDataGenerator.AllowedFailure allowedFailure) {        continue;      }      try {        EncryptedPrivateKeyInfo epki;        if (g.ap() == null) {          epki=new EncryptedPrivateKeyInfo(algName[i][0],g.ct());        } else {          epki=new EncryptedPrivateKeyInfo(g.ap(),g.ct());        }        try {          PKCS8EncodedKeySpec eks=epki.getKeySpec(g.pubK() == null ? g.k() : g.pubK(),provider[l]);          if (!Arrays.equals(privateKeyInfo,eks.getEncoded())) {            fail(algName[i][0] + " != " + algName[i][1]);          }        } catch (        InvalidKeyException e) {          fail(algName[i][0] + ", " + algName[i][1]+ ": "+ e);        }        performed=true;      } catch (      NoSuchAlgorithmException allowedFailure) {      }    }  }  assertTrue("Test not performed",performed);}  }
class C{  public RegressionModelEvaluation(Regressor regressor,RegressionDataSet dataSet,ExecutorService threadpool){  this.regressor=regressor;  this.dataSet=dataSet;  this.threadpool=threadpool;  this.dtp=new DataTransformProcess();  scoreMap=new LinkedHashMap<RegressionScore,OnLineStatistics>();}  }
class C{  public boolean isUpdateAnnFile(){  return m_isUpdateAnnFile;}  }
class C{  public static String americanize(String str,boolean capitalizeTimex){  if (capitalizeTimex && timexMapping.containsKey(str)) {    return timexMapping.get(str);  } else   if (mapping.containsKey(str)) {    return mapping.get(str);  } else {    for (int i=0; i < pats.length; i++) {      Pattern ex=excepts[i];      if (ex != null) {        Matcher me=ex.matcher(str);        if (me.find()) {          continue;        }      }      Matcher m=pats[i].matcher(str);      if (m.find()) {        return m.replaceAll(reps[i]);      }    }    return str;  }}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.131 -0500",hash_original_method="5AF5E9D92982780781CC81035C3C1529",hash_generated_method="24ECF7D91B9CA37241100F960164BEB1") public AcceptLanguageHeader createAcceptLanguageHeader(Locale language){  if (language == null)   throw new NullPointerException("null arg");  AcceptLanguage acceptLanguage=new AcceptLanguage();  acceptLanguage.setAcceptLanguage(language);  return acceptLanguage;}  }
class C{  private static HttpEntity toHttpEntity(Object value,String mimetype,String charset) throws IOException {  if (value instanceof HttpEntity)   return (HttpEntity)value;  ContentType ct=HTTPEngine.toContentType(mimetype,charset);  try {    if (value instanceof TemporaryStream) {      if (ct != null)       return new TemporaryStreamHttpEntity((TemporaryStream)value,ct);      return new TemporaryStreamHttpEntity((TemporaryStream)value,null);    } else     if (value instanceof InputStream) {      if (ct != null)       return new ByteArrayEntity(IOUtil.toBytes((InputStream)value),ct);      return new ByteArrayEntity(IOUtil.toBytes((InputStream)value));    } else     if (Decision.isCastableToBinary(value,false)) {      if (ct != null)       return new ByteArrayEntity(Caster.toBinary(value),ct);      return new ByteArrayEntity(Caster.toBinary(value));    } else {      boolean wasNull=false;      if (ct == null) {        wasNull=true;        ct=ContentType.APPLICATION_OCTET_STREAM;      }      String str=Caster.toString(value);      if (str.equals("<empty>")) {        return new EmptyHttpEntity(ct);      }      if (wasNull && !StringUtil.isEmpty(charset,true))       return new StringEntity(str,charset.trim()); else       return new StringEntity(str,ct);    }  } catch (  Exception e) {    throw ExceptionUtil.toIOException(e);  }}  }
class C{  public synchronized void resetEntries(List<ListEntry> entries){  TreeSet<String> columnSet=new TreeSet<String>();  list.clear();  columnNames.clear();  for (  ListEntry entry : entries) {    list.add(new ListEntryModel(entry));    columnSet.addAll(entry.getCustomElements().getTags());  }  list.add(new ListEntryModel());  columnNames.add("(Edit)");  columnNames.addAll(columnSet);  fireTableStructureChanged();  fireTableDataChanged();}  }
class C{  public static byte[] generateMac(byte[] byteCipherText,SecretKey integrityKey) throws NoSuchAlgorithmException, InvalidKeyException {  Mac sha256_HMAC=Mac.getInstance(HMAC_ALGORITHM);  sha256_HMAC.init(integrityKey);  return sha256_HMAC.doFinal(byteCipherText);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_elementgetattributenodenull.class,args);}  }
class C{  public void registerIntent(Plugin plugin){  Preconditions.checkState(!fired.get(),"Event %s has already been fired",this);  Preconditions.checkState(!intents.contains(plugin),"Plugin %s already registered intent for event %s",plugin,this);  intents.add(plugin);  latch.incrementAndGet();}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public final boolean safeSubtreeListMatch(List list1,List list2){  int size1=list1.size();  int size2=list2.size();  if (size1 != size2) {    return false;  }  for (Iterator it1=list1.iterator(), it2=list2.iterator(); it1.hasNext(); ) {    ASTNode n1=(ASTNode)it1.next();    ASTNode n2=(ASTNode)it2.next();    if (!n1.subtreeMatch(this,n2)) {      return false;    }  }  return true;}  }
class C{  private void sendSdesPacket(){  Vector<RtcpSdesPacket> repvec=makereports();  RtcpPacket packets[]=new RtcpPacket[repvec.size()];  repvec.copyInto(packets);  RtcpCompoundPacket cp=new RtcpCompoundPacket(packets);  int i=cp.calcLength();  cp.assemble(i,false);  transmit(cp);}  }
class C{  private boolean containsNullValue(){  Entry[] tab=table;  for (int i=0; i < tab.length; i++)   for (Entry e=tab[i]; e != null; e=e.next)   if (e.value == null)   return true;  return false;}  }
class C{  public static Predicate<String> matches(final String regexp){  Objects.requireNonNull(regexp,"The regexp must not be null");  return null;}  }
class C{  public Builder backgroundColorRes(@IntegerRes int sliderBackgroundColorRes){  return this;}  }
class C{  public static <E extends ClassMember>int compare(E lhs,E rhs){  int cmp;  cmp=lhs.getClassName().compareTo(rhs.getClassName());  if (cmp != 0) {    return cmp;  }  cmp=lhs.getName().compareTo(rhs.getName());  if (cmp != 0) {    return cmp;  }  cmp=lhs.getSignature().compareTo(rhs.getSignature());  if (cmp != 0) {    return cmp;  }  return (lhs.isStatic() ? 1 : 0) - (rhs.isStatic() ? 1 : 0);}  }
class C{  public boolean optBoolean(int index,boolean defaultValue){  try {    return this.getBoolean(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public SOMTrainer(SOMNetwork network){  super(network);  this.network=network;  this.setIteration(0);}  }
class C{  protected void formBusquedaRapidaExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  saveCurrentInvocation(KeysClientsInvocations.CUADRO_FORM_BUSQUEDA_RAPIDA_ELEMENTOS,request);  initializeSessionValues(request);  removeInTemporalSession(request,FondosConstants.CFG_BUSQUEDA_KEY);  Busqueda busqueda;  try {    busqueda=getCfgBusquedaFondosRapida(request);    setInTemporalSession(request,FondosConstants.CFG_BUSQUEDA_KEY,busqueda);    BusquedasHelper.loadListasBusqueda(busqueda,(BusquedaElementosForm)form,request,null);    setReturnActionFordward(request,mapping.findForward("form_busqueda_rapida"));  } catch (  FileNotFoundException flne) {    logger.error("NO SE HA ENCONTRADO EL FICHERO DE CONFIGURACION DE BUSQUEDA",flne);    getErrors(request,false).add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_CONFIGURACION_FILE_NOT_FOUND));    goBackExecuteLogic(mapping,form,request,response);  }catch (  Exception e) {    logger.error("ERROR AL OBTENER EL FICHERO DE CONFIGURACION DE BUSQUEDA",e);    getErrors(request,false).add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_CONFIGURACION_FILE));    goBackExecuteLogic(mapping,form,request,response);  }}  }
class C{  public AddMarketingPermissionException(){}  }
class C{  public double calculateCost(Session session){  Trace t=session.getTrace();  if (t.isDebugEnabled()) {    t.debug("Plan       : calculate cost for plan {0}",Arrays.toString(allFilters));  }  double cost=1;  boolean invalidPlan=false;  for (int i=0; i < allFilters.length; i++) {    TableFilter tableFilter=allFilters[i];    if (t.isDebugEnabled()) {      t.debug("Plan       :   for table filter {0}",tableFilter);    }    PlanItem item=tableFilter.getBestPlanItem(session,allFilters,i);    planItems.put(tableFilter,item);    if (t.isDebugEnabled()) {      t.debug("Plan       :   plan item cost {0} scanning strategy is {1}",item.cost,item.getScanningStrategy());    }    cost+=cost * item.cost;    setEvaluatable(tableFilter,true);    Expression on=tableFilter.getJoinCondition();    if (on != null) {      if (!on.isEverything(ExpressionVisitor.EVALUATABLE_VISITOR)) {        invalidPlan=true;        break;      }    }  }  if (invalidPlan) {    cost=Double.POSITIVE_INFINITY;  }  if (t.isDebugEnabled()) {    session.getTrace().debug("Plan       : plan cost {0}",cost);  }  for (  TableFilter f : allFilters) {    setEvaluatable(f,false);  }  return cost;}  }
class C{  private void initializeLight(String systemName){  mBit=SerialAddress.getBitFromSystemName(systemName);  setState(OFF);}  }
class C{  public boolean isForce(){  return force;}  }
class C{  public void deselectAll(){  checkWidget();  this.table.deselectAll();}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAnonymous_traceType_2_();}  }
class C{  Page readPage(MVMap<?,?> map,long pos){  if (pos == 0) {    throw DataUtils.newIllegalStateException(DataUtils.ERROR_FILE_CORRUPT,"Position 0");  }  Page p=cache == null ? null : cache.get(pos);  if (p == null) {    Chunk c=getChunk(pos);    long filePos=c.block * BLOCK_SIZE;    filePos+=DataUtils.getPageOffset(pos);    if (filePos < 0) {      throw DataUtils.newIllegalStateException(DataUtils.ERROR_FILE_CORRUPT,"Negative position {0}",filePos);    }    long maxPos=(c.block + c.len) * BLOCK_SIZE;    p=Page.read(fileStore,pos,map,filePos,maxPos);    cachePage(pos,p,p.getMemory());  }  return p;}  }
class C{  public long optLong(String key,long defaultValue){  try {    return this.getLong(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  void start(){  JavaCore.addElementChangedListener(this,ElementChangedEvent.POST_CHANGE);}  }
class C{  private int calculateVarintSize(long value){  if (value < 0) {    throw new IllegalArgumentException("Size values should not be negative.");  }  int numBitsNeeded=0;  if (value == 0) {    numBitsNeeded=1;  } else {    while (value > 0) {      numBitsNeeded++;      value=value >> 1;    }  }  int numVarintBytes=numBitsNeeded / 7;  if (numBitsNeeded % 7 > 0) {    numVarintBytes+=1;  }  return numVarintBytes;}  }
class C{  @Override public boolean equals(Object o){  if (!(o instanceof Connection)) {    return false;  }  Connection c=(Connection)o;  return clientHandle.equals(c.clientHandle);}  }
class C{  private ViewTooltips(){}  }
class C{  public static String byteArrayToHex(byte[] bytes){  char[] hexArray="0123456789ABCDEF".toCharArray();  char[] hexChars=new char[bytes.length * 2];  for (int j=0; j < bytes.length; j++) {    int v=bytes[j] & 0xFF;    hexChars[j * 2]=hexArray[v >>> 4];    hexChars[j * 2 + 1]=hexArray[v & 0x0F];  }  return new String(hexChars);}  }
class C{  private void install(){  System.out.println("Start install.");  editor.getViewer().prependVerifyKeyListener(this);  editor.getViewer().getTextWidget().addFocusListener(this);  editor.setStatusMessage("Example command.");  System.out.println("End install.");}  }
class C{  public void flush() throws java.io.IOException {  m_os.flush();}  }
class C{  public static void insertMessage(Throwable onObject,String msg){  try {    Field field=Throwable.class.getDeclaredField("detailMessage");    field.setAccessible(true);    if (onObject.getMessage() != null) {      field.set(onObject,"\n[\n" + msg + "\n]\n[\nMessage: "+ onObject.getMessage()+ "\n]");    } else {      field.set(onObject,"\n[\n" + msg + "]\n");    }  } catch (  RuntimeException e) {    throw e;  }catch (  Exception e) {  }}  }
class C{  public ReplDBMSEvent createEvent(long seqno,String shardId){  return createEvent(seqno,(short)0,true,shardId);}  }
class C{  public JSONArray put(long value){  this.put(new Long(value));  return this;}  }
class C{  public double eval(double params[]){  return (Math.E);}  }
class C{  public static SimpleScheduleBuilder repeatHourlyForever(int hours){  return simpleSchedule().withIntervalInHours(hours).repeatForever();}  }
class C{  public static void init(){}  }
class C{  public Iterator<Att> iterator(){  return attributes.iterator();}  }
class C{  @Deprecated public static String toString(byte[] input) throws IOException {  return new String(input);}  }
class C{  public void registerOutParameter(String parameterName,SQLType sqlType) throws SQLException {  try {    if (this.wrappedStmt != null) {      ((CallableStatement)this.wrappedStmt).registerOutParameter(parameterName,sqlType);    } else {      throw SQLError.createSQLException("No operations allowed after statement closed",SQLError.SQL_STATE_GENERAL_ERROR,this.exceptionInterceptor);    }  } catch (  SQLException sqlEx) {    checkAndFireConnectionError(sqlEx);  }}  }
class C{  @Override public OptionView build(){  return new OptionView(this);}  }
class C{  private ConstraintGraph buildConstraintGraph(Map<String,DetectorNode> nodeMap,Set<DetectorFactory> factorySet,List<DetectorOrderingConstraint> constraintList){  ConstraintGraph result=new ConstraintGraph();  for (  DetectorOrderingConstraint constraint : constraintList) {    Set<DetectorNode> earlierSet=addOrCreateDetectorNodes(constraint.getEarlier(),nodeMap,factorySet,result);    Set<DetectorNode> laterSet=addOrCreateDetectorNodes(constraint.getLater(),nodeMap,factorySet,result);    createConstraintEdges(result,earlierSet,laterSet,constraint);  }  return result;}  }
class C{  public void doGenerate(IProgressMonitor monitor) throws IOException {  if (!targetFolder.getLocation().toFile().exists()) {    targetFolder.getLocation().toFile().mkdirs();  }  monitor.subTask("Loading...");  com.github.lbroudoux.dsl.eip.gen.spring.main.GenerateRoutes gen0=new com.github.lbroudoux.dsl.eip.gen.spring.main.GenerateRoutes(modelURI,targetFolder.getLocation().toFile(),arguments);  monitor.worked(1);  String generationID=org.eclipse.acceleo.engine.utils.AcceleoLaunchingUtil.computeUIProjectID("com.github.lbroudoux.dsl.eip.gen.spring","com.github.lbroudoux.dsl.eip.gen.spring.main.GenerateRoutes",modelURI.toString(),targetFolder.getFullPath().toString(),new ArrayList<String>());  gen0.setGenerationID(generationID);  gen0.doGenerate(BasicMonitor.toMonitor(monitor));}  }
class C{  private HttpResponse executePost(String bucketName,String objectName,Map<String,String> headerMap,Map<String,String> queryParamMap,Object data) throws InvalidBucketNameException, NoSuchAlgorithmException, InsufficientDataException, IOException, InvalidKeyException, NoResponseException, XmlPullParserException, ErrorResponseException, InternalException {  updateRegionCache(bucketName);  return execute(Method.POST,BucketRegionCache.INSTANCE.region(bucketName),bucketName,objectName,headerMap,queryParamMap,null,data,0);}  }
class C{  public static WebSocketFrame createContinuationFrame(){  return new WebSocketFrame().setOpcode(CONTINUATION);}  }
class C{  public ImportException(String details){  super("Import Failed",new Object[]{details});  bean.setDetails(details);}  }
class C{  public BeforeCode_ createBeforeCode_(){  BeforeCode_Impl beforeCode_=new BeforeCode_Impl();  return beforeCode_;}  }
class C{  public void markDirty(Instruction s,Register symb){  HashSet<Register> set=dirtyMap.get(s);  if (set == null) {    set=new HashSet<Register>(3);    dirtyMap.put(s,set);  }  set.add(symb);}  }
class C{  public String reserveDoi() throws Exception {  if (resource == null) {    return NOT_FOUND;  }  if (reserveDoi) {    if (registrationManager.getDoiService() == null) {      String msg=getText("manage.overview.doi.operation.failed.noAccount");      LOG.error(msg);      addActionError(msg);      return INPUT;    }    DOI existingDoi=findExistingDoi(resource);    if ((existingDoi == null && resource.getIdentifierStatus() == IdentifierStatus.UNRESERVED && !resource.isAlreadyAssignedDoi()) || (resource.getIdentifierStatus() == IdentifierStatus.PUBLIC && resource.isAlreadyAssignedDoi())) {      DOI doi=DOIUtils.mintDOI(doiAccount.getDoiRegistrationAgency(),doiAccount.getDoiPrefix());      LOG.info("Reserving " + doi.toString() + " for "+ resource.getTitleAndShortname());      try {        doReserveDOI(doi,resource);        String msg=getText("manage.overview.publishing.doi.reserve.success",new String[]{doi.toString()});        LOG.info(msg);        addActionMessage(msg);      } catch (      DoiExistsException e) {        LOG.error("Failed to reserve " + doi.toString() + " because it exists already. Trying again...",e);        reserveDoi();      }catch (      InvalidMetadataException e) {        String errorMsg=getText("manage.overview.publishing.doi.reserve.failed.metadata",new String[]{doi.toString(),e.getMessage()});        LOG.error(errorMsg,e);        addActionError(errorMsg);      }catch (      DoiException e) {        String errorMsg=getText("manage.overview.publishing.doi.reserve.failed",new String[]{doi.toString(),e.getMessage()});        LOG.error(errorMsg,e);        addActionError(errorMsg);      }    } else     if (existingDoi != null && resource.getIdentifierStatus() == IdentifierStatus.UNRESERVED && !resource.isAlreadyAssignedDoi()) {      String prefixAllowed=doiAccount.getDoiPrefix();      if (prefixAllowed != null && existingDoi.getDoiName().startsWith(prefixAllowed.toLowerCase())) {        try {          DoiData doiData=registrationManager.getDoiService().resolve(existingDoi);          if (doiData != null && doiData.getStatus().equals(DoiStatus.RESERVED)) {            LOG.info("Assigning " + existingDoi.toString() + " (existing reserved DOI) to "+ resource.getTitleAndShortname());            doReuseDOI(existingDoi,resource);          } else           if (doiData != null && doiData.getStatus().equals(DoiStatus.REGISTERED)) {            LOG.info("Assigning " + existingDoi.toString() + " (existing registered DOI) to "+ resource.getTitleAndShortname());            LOG.debug("Resource " + resource.getShortname() + " has status="+ resource.getStatus());            if (!resource.isPubliclyAvailable()) {              String errorMsg=getText("manage.overview.publishing.doi.reserve.failed.notPublic",new String[]{existingDoi.toString()});              LOG.error(errorMsg);              addActionError(errorMsg);            } else {              URI target=doiData.getTarget();              LOG.debug(existingDoi.toString() + " has target URI=" + target);              URI homepage=cfg.getResourceUri(resource.getShortname());              if (target != null && target.equals(homepage)) {                LOG.debug("Verified target URI of existing registered DOI is equal to public resource homepage URI");                doReuseDOI(existingDoi,resource);              } else {                String errorMsg=getText("manage.overview.publishing.doi.reserve.failed.invalid.target",new String[]{existingDoi.toString(),homepage.toString()});                LOG.error(errorMsg);                addActionError(errorMsg);              }            }          } else {            String errorMsg=getText("manage.overview.publishing.doi.reserve.reused.failed",new String[]{existingDoi.toString()});            LOG.error(errorMsg);            addActionError(errorMsg);          }        } catch (        DoiException e) {          String errorMsg=getText("manage.overview.publishing.doi.reserve.reused.failed.exception",new String[]{existingDoi.toString(),e.getMessage()});          LOG.error(errorMsg,e);          addActionError(errorMsg);        }      } else {        addActionError(getText("manage.overview.publishing.doi.reserve.notRreused",new String[]{existingDoi.toString(),prefixAllowed}));      }    } else {      addActionWarning(getText("manage.overview.resource.doi.invalid.operation",new String[]{resource.getShortname(),resource.getIdentifierStatus().toString()}));    }  } else {    addActionWarning(getText("manage.overview.resource.doi.invalid.operation",new String[]{resource.getShortname(),resource.getIdentifierStatus().toString()}));  }  return execute();}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 3) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader1=args[0];  String inputHeader2=args[1];  String outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");    WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");    int rows=inputFile1.getNumberRows();    int cols=inputFile1.getNumberColumns();    double noData1=inputFile1.getNoDataValue();    double noData2=inputFile2.getNoDataValue();    if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {      showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");      return;    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.INTEGER,noData1);    outputFile.setPreferredPalette("black_white.pal");    for (row=0; row < rows; row++) {      data1=inputFile1.getRowValues(row);      data2=inputFile2.getRowValues(row);      for (col=0; col < cols; col++) {        z1=data1[col];        z2=data2[col];        if ((z1 != noData1) && (z2 != noData2)) {          if (z1 != 0 && z2 == 0) {            outputFile.setValue(row,col,1);          } else {            outputFile.setValue(row,col,0);          }        } else {          outputFile.setValue(row,col,noData1);        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile1.close();    inputFile2.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static int optionLength(String option){  if (option.equals("-t"))   return 2;  if (option.equals("-d"))   return 2;  if (option.equals("-x"))   return 2;  return 0;}  }
class C{  public static long shortArrayToLong(final short[] src,final int srcPos,final long dstInit,final int dstPos,final int nShorts){  if ((src.length == 0 && srcPos == 0) || 0 == nShorts) {    return dstInit;  }  if ((nShorts - 1) * 16 + dstPos >= 64) {    throw new IllegalArgumentException("(nShorts-1)*16+dstPos is greather or equal to than 64");  }  long out=dstInit;  int shift=0;  for (int i=0; i < nShorts; i++) {    shift=i * 16 + dstPos;    final long bits=(0xffffL & src[i + srcPos]) << shift;    final long mask=0xffffL << shift;    out=(out & ~mask) | bits;  }  return out;}  }
class C{  @SuppressWarnings("unused") public static void bindToRegister(char value){}  }
class C{  void register(Itr itr){  head=new Node(itr,head);}  }
class C{  @Interruptible static void newCounter(Counter ctr){  if (counters < (MAX_COUNTERS - 1)) {    counter[counters++]=ctr;  } else {    Log.writeln("Warning: number of stats counters exceeds maximum");  }}  }
class C{  protected void assertObjectsEqual(final Object expected,final Object actual){  if (expected == null) {    assertNull(actual);  } else {    assertNotNull("Should not be null",actual);    if (actual.getClass().isArray()) {      assertArrayEquals(expected,actual);    } else {      if (!expected.equals(actual)) {        assertEquals("Object deserialization failed","DESERIALIZED OBJECT\n" + xstream.toXML(expected),"DESERIALIZED OBJECT\n" + xstream.toXML(actual));      }    }  }}  }
class C{  public void deleteLast(){  final int codesSize=mCodes.size();  if (codesSize > 0) {    mCodes.remove(codesSize - 1);    final int lastPos=mTypedWord.length() - 1;    char last=mTypedWord.charAt(lastPos);    mTypedWord.deleteCharAt(lastPos);    if (Character.isUpperCase(last))     mCapsCount--;  }}  }
class C{  public synchronized ZooKeeperClient build(){  if (null == cachedClient) {    cachedClient=buildClient();  }  return cachedClient;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Boolean.FALSE;}  }
class C{  public static EventID generateEventId(){  GemFireCacheImpl cache=GemFireCacheImpl.getInstance();  if (cache == null) {    return null;  }  return new EventID(InternalDistributedSystem.getAnyInstance());}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 4740) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public void shutdown(){  scheduledExecutorService.shutdownNow();}  }
class C{  @Override public void close(){  try {    out.close();  } catch (  final XMLStreamException e) {    throw new StreamException(e);  }}  }
class C{  public static String toString(Object value){  if (value == null) {    return "";  }  Class<? extends Object> type=value.getClass();  if (canSelfRevert(type)) {    return selfRevert(value);  }  if (converterRegisteredFor(type)) {    return converterForType(type).toString(value);  }  return String.valueOf(value);}  }
class C{  public DefaultMosaicProperties(final Properties properties){  MustBe.notNull(properties,"properties");  this.properties=new NemProperties(properties);  this.validateProperties();}  }
class C{  private void checkCertificateDateValidity(X509Certificate certificate){  final String CERTIFICATE_EXPIRED_MESSAGE="ViPR's certificate has expired. Please set a new one, or post a regenerate request";  final String CERTIFICATE_WILL_EXPIRE_MESSAGE_FORMAT="ViPR's certificate will expire within %d %s. Please make arrangements to set a new certificate or to post a regenerate request";  Date lastCertificateAlert=null;  try {    lastCertificateAlert=coordConfigStoringHelper.readConfig(coordConfigStoringHelper.getSiteId(),KEY_CERTIFICATE_PAIR_CONFIG_KIND,LAST_CERTIFICATE_ALERT_ID,LAST_CERTIFICATE_ALERT_KEY);  } catch (  Exception e) {    log.warn(e.getMessage(),e);  }  Date notAfter=DateUtils.truncate(certificate.getNotAfter(),Calendar.DATE);  Date today=DateUtils.truncate(new Date(),Calendar.DATE);  Date nextWeek=DateUtils.addWeeks(today,1);  Date nextMonth=DateUtils.addMonths(today,1);  Date next3Months=DateUtils.addMonths(today,3);  Date next6Months=DateUtils.addMonths(today,6);  if (lastCertificateAlert == null || DateUtils.truncatedCompareTo(lastCertificateAlert,today,Calendar.DATE) < 0) {    boolean logAlert=false;    String messageToLog=CERTIFICATE_WILL_EXPIRE_MESSAGE_FORMAT;    int timeAmount=0;    String timeType=null;    LogLevel logLevel=LogLevel.WARN;    if (notAfter.before(today)) {      logLevel=LogLevel.FATAL;      messageToLog=CERTIFICATE_EXPIRED_MESSAGE;      logAlert=true;    } else     if (DateUtils.isSameDay(notAfter,today)) {      timeType="days";      logLevel=LogLevel.ERROR;      logAlert=true;    } else     if (notAfter.before(nextWeek)) {      timeAmount=1;      timeType="week";      logAlert=true;    } else     if (notAfter.before(nextMonth)) {      timeAmount=1;      timeType="month";      logAlert=true;    } else     if (notAfter.before(next3Months)) {      timeAmount=3;      timeType="months";      logAlert=true;    } else     if (notAfter.before(next6Months)) {      timeAmount=6;      timeType="months";      logAlert=true;    }    if (logAlert) {      logAlert(messageToLog,timeAmount,timeType,logLevel);      try {        coordConfigStoringHelper.createOrUpdateConfig(today,KEY_CERTIFICATE_PAIR_LOCK,coordConfigStoringHelper.getSiteId(),KEY_CERTIFICATE_PAIR_CONFIG_KIND,LAST_CERTIFICATE_ALERT_ID,LAST_CERTIFICATE_ALERT_KEY);      } catch (      Exception e) {        log.error("Could not set the time of last alert about certificate expiry",e);      }    }  }}  }
class C{  @Inline public static void intBulkCopy(int[] src,Offset srcOffset,int[] dst,Offset dstOffset,int bytes){  if (VM.VerifyAssertions)   VM._assert(INT_BULK_COPY_SUPPORTED);  if (!Selected.Mutator.get().intBulkCopy(ObjectReference.fromObject(src),srcOffset,ObjectReference.fromObject(dst),dstOffset,bytes)) {    Memory.aligned32Copy(Magic.objectAsAddress(dst).plus(dstOffset),Magic.objectAsAddress(src).plus(srcOffset),bytes);  }}  }
class C{  public ManhattanDistance(Instances data){  super(data);}  }
class C{  public List<TriggerFiredResult> triggersFired(List<OperableTrigger> firedTriggers){synchronized (lock) {    List<TriggerFiredResult> results=new ArrayList<TriggerFiredResult>();    for (    OperableTrigger trigger : firedTriggers) {      TriggerWrapper tw=triggersByKey.get(trigger.getKey());      if (tw == null || tw.trigger == null) {        continue;      }      if (tw.state != TriggerWrapper.STATE_ACQUIRED) {        continue;      }      Calendar cal=null;      if (tw.trigger.getCalendarName() != null) {        cal=retrieveCalendar(tw.trigger.getCalendarName());        if (cal == null)         continue;      }      Date prevFireTime=trigger.getPreviousFireTime();      timeTriggers.remove(tw);      tw.trigger.triggered(cal);      trigger.triggered(cal);      tw.state=TriggerWrapper.STATE_WAITING;      TriggerFiredBundle bndle=new TriggerFiredBundle(retrieveJob(tw.jobKey),trigger,cal,false,new Date(),trigger.getPreviousFireTime(),prevFireTime,trigger.getNextFireTime());      JobDetail job=bndle.getJobDetail();      if (job.isConcurrentExectionDisallowed()) {        ArrayList<TriggerWrapper> trigs=getTriggerWrappersForJob(job.getKey());        for (        TriggerWrapper ttw : trigs) {          if (ttw.state == TriggerWrapper.STATE_WAITING) {            ttw.state=TriggerWrapper.STATE_BLOCKED;          }          if (ttw.state == TriggerWrapper.STATE_PAUSED) {            ttw.state=TriggerWrapper.STATE_PAUSED_BLOCKED;          }          timeTriggers.remove(ttw);        }        blockedJobs.add(job.getKey());      } else       if (tw.trigger.getNextFireTime() != null) {synchronized (lock) {          timeTriggers.add(tw);        }      }      results.add(new TriggerFiredResult(bndle));    }    return results;  }}  }
class C{  private void checkBackupGroupRootTimestamps(DateTime transactionTime,Set<Entry<Key<BackupGroupRoot>,BackupGroupRoot>> bgrEntries){  ImmutableMap.Builder<Key<BackupGroupRoot>,DateTime> builder=new ImmutableMap.Builder<>();  for (  Entry<Key<BackupGroupRoot>,BackupGroupRoot> entry : bgrEntries) {    DateTime updateTime=entry.getValue().getUpdateAutoTimestamp().getTimestamp();    if (!updateTime.isBefore(transactionTime)) {      builder.put(entry.getKey(),updateTime);    }  }  ImmutableMap<Key<BackupGroupRoot>,DateTime> problematicRoots=builder.build();  if (!problematicRoots.isEmpty()) {    throw new TimestampInversionException(transactionTime,problematicRoots);  }}  }
class C{  public void trackFailure(){  retryTime=Utils.currentTimeMillis() + (long)backoff;  backoff=Math.min(backoff * params.multiplier,params.maximum);}  }
class C{  public String importTrl(String directory,int AD_Client_ID,String AD_Language,String Trl_Table){  String fileName=directory + File.separator + Trl_Table+ "_"+ AD_Language+ ".xml";  log.info(fileName);  File in=new File(fileName);  if (!in.exists()) {    String msg="File does not exist: " + fileName;    log.log(Level.SEVERE,msg);    return msg;  }  try {    TranslationHandler handler=new TranslationHandler(AD_Client_ID);    SAXParserFactory factory=SAXParserFactory.newInstance();    SAXParser parser=factory.newSAXParser();    parser.parse(in,handler);    log.info("Updated=" + handler.getUpdateCount());    return Msg.getMsg(m_ctx,"Updated") + "=" + handler.getUpdateCount();  } catch (  Exception e) {    log.log(Level.SEVERE,"importTrl",e);    return e.toString();  }}  }
class C{  public void actionPerformed(ActionEvent e){  SessionEditorIndirectRef sessionEditorRef=DesktopController.getInstance().getFrontmostSessionEditor();  SessionEditor sessionEditor=(SessionEditor)sessionEditorRef;  List modelElements=sessionEditor.getSelectedModelComponents();  SubsessionSelection selection=new SubsessionSelection(modelElements);  InternalClipboard.getInstance().setContents(selection,this);  SessionEditorWorkbench graph=sessionEditor.getSessionWorkbench();  graph.deleteSelectedObjects();}  }
class C{  public void disconnect() throws ExtractorException {  if (!connected)   throw new OracleExtractException("Not connected");  stopListener();  out.close();  connected=false;}  }
class C{  public InvalidPathException(String input,String reason,int index){  super(reason);  if ((input == null) || (reason == null))   throw new NullPointerException();  if (index < -1)   throw new IllegalArgumentException();  this.input=input;  this.index=index;}  }
class C{  public void insertLocalVar(int where,int size) throws BadBytecode {  CodeIterator ci=iterator();  while (ci.hasNext())   shiftIndex(ci,where,size);  setMaxLocals(getMaxLocals() + size);}  }
class C{  public static MediaManager with(Context context){  if (instance == null)   instance=new MediaManager(context);  return instance;}  }
class C{  public boolean isRangeCrosshairLockedOnData(){  return this.rangeCrosshairLockedOnData;}  }
class C{  public static ScriptQueryBuilder scriptQuery(Script script){  return new ScriptQueryBuilder(script);}  }
class C{  private boolean navBarCanMove(){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR2) {    return this.getResources().getConfiguration().smallestScreenWidthDp <= 600;  }  return false;}  }
class C{  public PacketExtension parseExtension(XmlPullParser parser) throws Exception {  RosterExchange rosterExchange=new RosterExchange();  boolean done=false;  RemoteRosterEntry remoteRosterEntry=null;  String jid="";  String name="";  ArrayList<String> groupsName=new ArrayList<String>();  while (!done) {    int eventType=parser.next();    if (eventType == XmlPullParser.START_TAG) {      if (parser.getName().equals("item")) {        groupsName=new ArrayList<String>();        jid=parser.getAttributeValue("","jid");        name=parser.getAttributeValue("","name");      }      if (parser.getName().equals("group")) {        groupsName.add(parser.nextText());      }    } else     if (eventType == XmlPullParser.END_TAG) {      if (parser.getName().equals("item")) {        remoteRosterEntry=new RemoteRosterEntry(jid,name,(String[])groupsName.toArray(new String[groupsName.size()]));        rosterExchange.addRosterEntry(remoteRosterEntry);      }      if (parser.getName().equals("x")) {        done=true;      }    }  }  return rosterExchange;}  }
class C{  @Override protected EClass eStaticClass(){  return MappingPackage.Literals.INFO_MODEL_PROPERTY_SOURCE;}  }
class C{  public boolean tryUnlockWrite(){  long s;  WNode h;  if (((s=state) & WBIT) != 0L) {    state=(s+=WBIT) == 0L ? ORIGIN : s;    if ((h=whead) != null && h.status != 0)     release(h);    return true;  }  return false;}  }
class C{  public void applyLocalizedPattern(String template){  pattern=convertPattern(template,formatData.getLocalPatternChars(),PATTERN_CHARS,true);}  }
class C{  public List<TableChange> compareColumns(Table sourceTable,Column sourceColumn,Table targetTable,Column targetColumn){  ArrayList<TableChange> changes=new ArrayList<TableChange>();  int actualTypeCode=sourceColumn.getMappedTypeCode();  int desiredTypeCode=targetColumn.getMappedTypeCode();  boolean sizeMatters=platformInfo.hasSize(targetColumn.getMappedTypeCode());  boolean scaleMatters=platformInfo.hasPrecisionAndScale(targetColumn.getMappedTypeCode());  boolean compatible=(actualTypeCode == Types.NUMERIC || actualTypeCode == Types.DECIMAL) && (desiredTypeCode == Types.INTEGER || desiredTypeCode == Types.BIGINT);  if (sourceColumn.isAutoIncrement() && targetColumn.isAutoIncrement() && (desiredTypeCode == Types.NUMERIC || desiredTypeCode == Types.DECIMAL)&& (actualTypeCode == Types.INTEGER || actualTypeCode == Types.BIGINT)) {    compatible=true;    sizeMatters=false;    scaleMatters=false;  }  if (sourceColumn.getMappedTypeCode() == Types.BLOB && targetColumn.getMappedTypeCode() == Types.LONGVARCHAR) {    compatible=true;  }  if (!compatible && targetColumn.getMappedTypeCode() != sourceColumn.getMappedTypeCode() && platformInfo.getTargetJdbcType(targetColumn.getMappedTypeCode()) != sourceColumn.getMappedTypeCode()) {    log.debug("The {} column on the {} table changed type codes from {} to {} ",new Object[]{sourceColumn.getName(),sourceTable.getName(),sourceColumn.getMappedTypeCode(),targetColumn.getMappedTypeCode()});    changes.add(new ColumnDataTypeChange(sourceTable,sourceColumn,targetColumn.getMappedTypeCode()));  }  String targetSize=targetColumn.getSize();  if (targetSize == null) {    Integer defaultSize=platformInfo.getDefaultSize(platformInfo.getTargetJdbcType(targetColumn.getMappedTypeCode()));    if (defaultSize != null) {      targetSize=defaultSize.toString();    } else {      targetSize="0";    }  }  if (sizeMatters && !StringUtils.equals(sourceColumn.getSize(),targetSize)) {    log.debug("The {} column on the {} table changed size from ({}) to ({})",new Object[]{sourceColumn.getName(),sourceTable.getName(),sourceColumn.getSizeAsInt(),targetColumn.getSizeAsInt()});    changes.add(new ColumnSizeChange(sourceTable,sourceColumn,targetColumn.getSizeAsInt(),targetColumn.getScale()));  } else   if (scaleMatters && (!StringUtils.equals(sourceColumn.getSize(),targetSize) || (!(sourceColumn.getScale() < 0 && targetColumn.getScale() == 0) && sourceColumn.getScale() != targetColumn.getScale()))) {    log.debug("The {} column on the {} table changed scale from ({},{}) to ({},{})",new Object[]{sourceColumn.getName(),sourceTable.getName(),sourceColumn.getSizeAsInt(),sourceColumn.getScale(),targetColumn.getSizeAsInt(),targetColumn.getScale()});    changes.add(new ColumnSizeChange(sourceTable,sourceColumn,targetColumn.getSizeAsInt(),targetColumn.getScale()));  }  Object sourceDefaultValue=sourceColumn.getParsedDefaultValue();  Object targetDefaultValue=targetColumn.getParsedDefaultValue();  if ((sourceDefaultValue == null && targetDefaultValue != null) || (sourceDefaultValue != null && targetDefaultValue == null) || (sourceDefaultValue != null && targetDefaultValue != null && !sourceDefaultValue.toString().equals(targetDefaultValue.toString()))) {    log.debug("The {} column on the {} table changed default value from {} to {} ",new Object[]{sourceColumn.getName(),sourceTable.getName(),sourceColumn.getDefaultValue(),targetColumn.getDefaultValue()});    changes.add(new ColumnDefaultValueChange(sourceTable,sourceColumn,targetColumn.getDefaultValue()));  }  if (sourceColumn.isRequired() != targetColumn.isRequired()) {    log.debug("The {} column on the {} table changed required status from {} to {}",new Object[]{sourceColumn.getName(),sourceTable.getName(),sourceColumn.isRequired(),targetColumn.isRequired()});    changes.add(new ColumnRequiredChange(sourceTable,sourceColumn));  }  if (sourceColumn.isAutoIncrement() != targetColumn.isAutoIncrement()) {    log.debug("The {} column on the {} table changed auto increment status from {} to {} ",new Object[]{sourceColumn.getName(),sourceTable.getName(),sourceColumn.isAutoIncrement(),targetColumn.isAutoIncrement()});    changes.add(new ColumnAutoIncrementChange(sourceTable,sourceColumn));  }  return changes;}  }
class C{  public static GeoDistanceSortBuilder geoDistanceSort(String fieldName){  return new GeoDistanceSortBuilder(fieldName);}  }
class C{  public void testResultSets() throws Exception {  try {    DatabaseMetaData dbmd=con.getMetaData();    ResultSet rs;    Statement stmt=con.createStatement();    dropTable("jTDS_META2");    dropTable("jTDS_META");    stmt.execute("CREATE PROC jtds_spmeta @p1 int, @p2 varchar(30) output AS SELECT @p2 = 'test'");    stmt.execute("CREATE TABLE jTDS_META (id int NOT NULL primary key , data nvarchar(255) NULL, ts timestamp)");    stmt.execute("CREATE TABLE jTDS_META2 (id int NOT NULL, data2 varchar(255) NULL " + ",  FOREIGN KEY (id) REFERENCES jTDS_META(id)) ");    rs=dbmd.getBestRowIdentifier(null,null,"jTDS_META",DatabaseMetaData.bestRowUnknown,true);    assertTrue(checkColumnNames(rs,new String[]{"SCOPE","COLUMN_NAME","DATA_TYPE","TYPE_NAME","COLUMN_SIZE","BUFFER_LENGTH","DECIMAL_DIGITS","PSEUDO_COLUMN"}));    assertTrue(rs.next());    Assert.assertEquals("id",rs.getString(2));    rs=dbmd.getCatalogs();    assertTrue(checkColumnNames(rs,new String[]{"TABLE_CAT"}));    boolean fail=true;    while (rs.next()) {      if (rs.getString(1).equalsIgnoreCase("master")) {        fail=false;        break;      }    }    assertTrue(!fail);    rs=dbmd.getColumnPrivileges(null,null,"jTDS_META","id");    assertTrue(checkColumnNames(rs,new String[]{"TABLE_CAT","TABLE_SCHEM","TABLE_NAME","COLUMN_NAME","GRANTOR","GRANTEE","PRIVILEGE","IS_GRANTABLE"}));    assertTrue(rs.next());    assertTrue(rs.getString(7).equals("INSERT") || rs.getString(7).equals("UPDATE") || rs.getString(7).equals("DELETE")|| rs.getString(7).equals("SELECT"));    rs=dbmd.getColumns(null,null,"jTDS_META","%");    assertTrue(checkColumnNames(rs,new String[]{"TABLE_CAT","TABLE_SCHEM","TABLE_NAME","COLUMN_NAME","DATA_TYPE","TYPE_NAME","COLUMN_SIZE","BUFFER_LENGTH","DECIMAL_DIGITS","NUM_PREC_RADIX","NULLABLE","REMARKS","COLUMN_DEF","SQL_DATA_TYPE","SQL_DATETIME_SUB","CHAR_OCTET_LENGTH","ORDINAL_POSITION","IS_NULLABLE","SCOPE_CATALOG","SCOPE_SCHEMA","SCOPE_TABLE","SOURCE_DATA_TYPE"}));    assertTrue(rs.next());    Assert.assertEquals("id",rs.getString(4));    Assert.assertEquals(java.sql.Types.INTEGER,rs.getInt(5));    assertTrue(rs.next());    Assert.assertEquals("data",rs.getString(4));    Assert.assertEquals(java.sql.Types.VARCHAR,rs.getInt(5));    rs=dbmd.getCrossReference(null,null,"jTDS_META",null,null,"jTDS_META2");    assertTrue(checkColumnNames(rs,new String[]{"PKTABLE_CAT","PKTABLE_SCHEM","PKTABLE_NAME","PKCOLUMN_NAME","FKTABLE_CAT","FKTABLE_SCHEM","FKTABLE_NAME","FKCOLUMN_NAME","KEY_SEQ","UPDATE_RULE","DELETE_RULE","FK_NAME","PK_NAME","DEFERRABILITY"}));    assertTrue(rs.next());    Assert.assertEquals("id",rs.getString(4));    rs=dbmd.getExportedKeys(null,null,"jTDS_META");    assertTrue(checkColumnNames(rs,new String[]{"PKTABLE_CAT","PKTABLE_SCHEM","PKTABLE_NAME","PKCOLUMN_NAME","FKTABLE_CAT","FKTABLE_SCHEM","FKTABLE_NAME","FKCOLUMN_NAME","KEY_SEQ","UPDATE_RULE","DELETE_RULE","FK_NAME","PK_NAME","DEFERRABILITY"}));    assertTrue(rs.next());    Assert.assertEquals("id",rs.getString(4));    rs=dbmd.getImportedKeys(null,null,"jTDS_META2");    assertTrue(checkColumnNames(rs,new String[]{"PKTABLE_CAT","PKTABLE_SCHEM","PKTABLE_NAME","PKCOLUMN_NAME","FKTABLE_CAT","FKTABLE_SCHEM","FKTABLE_NAME","FKCOLUMN_NAME","KEY_SEQ","UPDATE_RULE","DELETE_RULE","FK_NAME","PK_NAME","DEFERRABILITY"}));    assertTrue(rs.next());    Assert.assertEquals("id",rs.getString(4));    rs=dbmd.getIndexInfo(null,null,"jTDS_META",false,true);    assertTrue(checkColumnNames(rs,new String[]{"TABLE_CAT","TABLE_SCHEM","TABLE_NAME","NON_UNIQUE","INDEX_QUALIFIER","INDEX_NAME","TYPE","ORDINAL_POSITION","COLUMN_NAME","ASC_OR_DESC","CARDINALITY","PAGES","FILTER_CONDITION"}));    assertTrue(rs.next());    Assert.assertEquals("jTDS_META",rs.getString(3));    rs=dbmd.getPrimaryKeys(null,null,"jTDS_META");    assertTrue(checkColumnNames(rs,new String[]{"TABLE_CAT","TABLE_SCHEM","TABLE_NAME","COLUMN_NAME","KEY_SEQ","PK_NAME"}));    assertTrue(rs.next());    Assert.assertEquals("id",rs.getString(4));    rs=dbmd.getProcedureColumns(null,null,"jtds_spmeta","@p1");    assertTrue(checkColumnNames(rs,new String[]{"PROCEDURE_CAT","PROCEDURE_SCHEM","PROCEDURE_NAME","COLUMN_NAME","COLUMN_TYPE","DATA_TYPE","TYPE_NAME","PRECISION","LENGTH","SCALE","RADIX","NULLABLE","REMARKS"}));    assertTrue(rs.next());    Assert.assertEquals("jtds_spmeta",rs.getString(3));    Assert.assertEquals("@p1",rs.getString(4));    rs=dbmd.getProcedures(null,null,"jtds_spmeta%");    assertTrue(checkColumnNames(rs,new String[]{"PROCEDURE_CAT","PROCEDURE_SCHEM","PROCEDURE_NAME","","","","REMARKS","PROCEDURE_TYPE"}));    assertTrue(rs.next());    Assert.assertEquals("jtds_spmeta",rs.getString(3));    rs=dbmd.getSchemas();    assertTrue(checkColumnNames(rs,new String[]{"TABLE_SCHEM","TABLE_CATALOG"}));    assertTrue(rs.next());    rs=dbmd.getTablePrivileges(null,null,"jTDS_META");    assertTrue(checkColumnNames(rs,new String[]{"TABLE_CAT","TABLE_SCHEM","TABLE_NAME","GRANTOR","GRANTEE","PRIVILEGE","IS_GRANTABLE"}));    assertTrue(rs.next());    assertTrue(rs.getString(6).equals("INSERT") || rs.getString(6).equals("UPDATE") || rs.getString(6).equals("DELETE")|| rs.getString(6).equals("SELECT"));    rs=dbmd.getTables(null,null,"jTDS_META",new String[]{"TABLE"});    assertTrue(checkColumnNames(rs,new String[]{"TABLE_CAT","TABLE_SCHEM","TABLE_NAME","TABLE_TYPE","REMARKS","TYPE_CAT","TYPE_SCHEM","TYPE_NAME","SELF_REFERENCING_COL_NAME","REF_GENERATION"}));    assertTrue(rs.next());    Assert.assertEquals("jTDS_META",rs.getString(3));    rs=dbmd.getTableTypes();    assertTrue(checkColumnNames(rs,new String[]{"TABLE_TYPE"}));    assertTrue(rs.next());    Assert.assertEquals("SYSTEM TABLE",rs.getString(1));    rs=dbmd.getTypeInfo();    assertTrue(checkColumnNames(rs,new String[]{"TYPE_NAME","DATA_TYPE","PRECISION","LITERAL_PREFIX","LITERAL_SUFFIX","CREATE_PARAMS","NULLABLE","CASE_SENSITIVE","SEARCHABLE","UNSIGNED_ATTRIBUTE","FIXED_PREC_SCALE","AUTO_INCREMENT","LOCAL_TYPE_NAME","MINIMUM_SCALE","MAXIMUM_SCALE","SQL_DATA_TYPE","SQL_DATETIME_SUB","NUM_PREC_RADIX"}));    while (rs.next()) {      if (rs.getString(1).equalsIgnoreCase("nvarchar")) {        Assert.assertEquals(java.sql.Types.VARCHAR,rs.getInt(2));      }    }    rs=dbmd.getUDTs(null,null,"%",null);    assertTrue(checkColumnNames(rs,new String[]{"TYPE_CAT","TYPE_SCHEM","TYPE_NAME","CLASS_NAME","DATA_TYPE","REMARKS","BASE_TYPE"}));    assertFalse(rs.next());    rs=dbmd.getVersionColumns(null,null,"jTDS_META");    assertTrue(checkColumnNames(rs,new String[]{"SCOPE","COLUMN_NAME","DATA_TYPE","TYPE_NAME","COLUMN_SIZE","BUFFER_LENGTH","DECIMAL_DIGITS","PSEUDO_COLUMN"}));    assertTrue(rs.next());    Assert.assertEquals("ts",rs.getString(2));  }  finally {    dropTable("jTDS_META2");    dropTable("jTDS_META");  }}  }
class C{  @Override public void deleteRow() throws SQLException {  try {    debugCodeCall("deleteRow");    checkUpdatable();    if (insertRow != null) {      throw DbException.get(ErrorCode.NOT_ON_UPDATABLE_ROW);    }    checkOnValidRow();    getUpdatableRow().deleteRow(result.currentRow());    updateRow=null;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  static boolean packageHasActivities(Context context,String packageName,UserHandleCompat user){  final LauncherAppsCompat launcherApps=LauncherAppsCompat.getInstance(context);  return launcherApps.getActivityList(packageName,user).size() > 0;}  }
class C{  @Override public void run(){  amIActive=true;  String slopeHeader=null;  String aspectHeader=null;  String outputHeader=null;  String horizonAngleHeader=null;  double z;  int progress;  int[] dY={-1,0,1,1,1,0,-1,-1};  int[] dX={1,1,1,0,-1,-1,-1,0};  int row, col;  double azimuth=0;  boolean blnSlope=false;  double relativeAspect=0;  double slopeVal=0;  double aspectVal=0;  double HAval=0;  double gridRes=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      slopeHeader=args[i];    } else     if (i == 1) {      aspectHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    } else     if (i == 2) {      azimuth=Math.toRadians(Double.parseDouble(args[i]) - 90);    } else     if (i == 3) {      if (args[i].toLowerCase().contains("slope")) {        blnSlope=true;      } else {        blnSlope=false;      }    } else     if (i == 4) {      if (blnSlope) {        if (args[i].toLowerCase().contains("not specified")) {          showFeedback("The horizon angle raster must be specified");          break;        }        horizonAngleHeader=args[i];      }    }  }  if ((slopeHeader == null) || aspectHeader == null || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster slope=new WhiteboxRaster(slopeHeader,"r");    int rows=slope.getNumberRows();    int cols=slope.getNumberColumns();    gridRes=(slope.getCellSizeX() + slope.getCellSizeY()) / 2;    double slopeNoData=slope.getNoDataValue();    WhiteboxRaster aspect=new WhiteboxRaster(aspectHeader,"r");    if (aspect.getNumberRows() != rows || aspect.getNumberColumns() != cols) {      showFeedback("the input images must have the same dimensions (i.e. rows and columns).");      return;    }    double aspectNoData=aspect.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",slopeHeader,WhiteboxRaster.DataType.FLOAT,slopeNoData);    output.setPreferredPalette("grey.pal");    double[] slopeData;    double[] aspectData;    if (blnSlope) {      WhiteboxRaster horizonAngle=new WhiteboxRaster(horizonAngleHeader,"r");      if (horizonAngle.getNumberRows() != rows || horizonAngle.getNumberColumns() != cols) {        showFeedback("the input images must have the same dimensions (i.e. rows and columns).");        return;      }      double HANoData=horizonAngle.getNoDataValue();      double[] HAdata;      for (row=0; row < rows; row++) {        slopeData=slope.getRowValues(row);        aspectData=aspect.getRowValues(row);        HAdata=horizonAngle.getRowValues(row);        for (col=0; col < cols; col++) {          relativeAspect=azimuth - aspectData[col];          if (relativeAspect > 180) {            relativeAspect=360 - relativeAspect;            if (slopeData[col] != slopeNoData && aspectData[col] != aspectNoData && HAdata[col] != HANoData) {              slopeVal=Math.toRadians(slopeData[col]);              aspectVal=Math.toRadians(aspectData[col]);              HAval=Math.toRadians(HAdata[col]);              relativeAspect=Math.toRadians(relativeAspect);              output.setValue(row,col,Math.cos(slopeVal) * Math.sin(HAval) + Math.sin(slopeVal) * Math.cos(HAval) * Math.cos(relativeAspect));            } else {              output.setValue(row,col,slopeNoData);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }      horizonAngle.close();    } else {      HAval=0;      for (row=0; row < rows; row++) {        slopeData=slope.getRowValues(row);        aspectData=aspect.getRowValues(row);        for (col=0; col < cols; col++) {          relativeAspect=azimuth - aspectData[col];          if (relativeAspect > 180) {            relativeAspect=360 - relativeAspect;          }          if (slopeData[col] != slopeNoData && aspectData[col] != aspectNoData) {            slopeVal=Math.toRadians(slopeData[col]);            aspectVal=Math.toRadians(aspectData[col]);            relativeAspect=Math.toRadians(relativeAspect);            output.setValue(row,col,Math.cos(slopeVal) * Math.sin(HAval) + Math.sin(slopeVal) * Math.cos(HAval) * Math.cos(relativeAspect));          } else {            output.setValue(row,col,slopeNoData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    slope.close();    aspect.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public String peek(){  String result=null;  if (isEmpty()) {    return null;  } else {    int cachedCurrentIndex=currentIndex;    if (isEatingBlocksOfDelimiters) {      trimStartingDelimiters();    }    int nearestDelimeter=-1;    for (int i=0; i < delimiters.length(); i++) {      int delimiter=source.indexOf(delimiters.charAt(i),currentIndex);      if (nearestDelimeter == -1 || delimiter != -1 && delimiter < nearestDelimeter) {        nearestDelimeter=delimiter;      }    }    if (nearestDelimeter == -1) {      result=source.substring(currentIndex);    } else {      result=source.substring(currentIndex,nearestDelimeter);    }    currentIndex=cachedCurrentIndex;  }  return result;}  }
class C{  public final void testRemoveAllHelperTextsFromCollection(){  CharSequence helperText1="helperText1";  CharSequence helperText2="helperText2";  CharSequence helperText3="helperText3";  Collection<CharSequence> helperTexts=new LinkedList<>();  helperTexts.add(helperText1);  helperTexts.add(helperText2);  PasswordEditText passwordEditText=new PasswordEditText(getContext());  passwordEditText.addAllHelperTexts(helperTexts);  passwordEditText.addHelperText(helperText3);  passwordEditText.removeAllHelperTexts(helperTexts);  passwordEditText.removeAllHelperTexts(helperTexts);  assertEquals(1,passwordEditText.getHelperTexts().size());  assertEquals(helperText3,passwordEditText.getHelperTexts().iterator().next());}  }
class C{  public static ExceptionBuilder unauthorized(){  return new ExceptionBuilder(Status.UNAUTHORIZED);}  }
class C{  public void doGoTo(){  if (content.length() < 1L)   return;  if (goToDialog == null)   goToDialog=new GoToDialog(textsParent.getShell());  long location=goToDialog.open(content.length() - 1L);  if (location >= 0L) {    long button=goToDialog.getButtonPressed();    if (button == 1)     hexEditControl.showMark(location); else     hexEditControl.selectBlock(location,location);  }}  }
class C{  private boolean updateTable() throws SQLException {  StringBuffer sql=null;  int no=0;  if (m_DeleteOldImported) {    sql=new StringBuffer("DELETE I_Budget  " + "WHERE I_IsImported='Y'").append(clientCheck);    no=DB.executeUpdate(sql.toString(),get_TrxName());    log.fine("Delete Old Impored =" + no);  }  sql=new StringBuffer("UPDATE I_Budget  " + "SET IsActive = COALESCE (IsActive, 'Y')," + " Created = COALESCE (Created, SysDate),"+ " CreatedBy = COALESCE (CreatedBy, 0),"+ " Updated = COALESCE (Updated, SysDate),"+ " UpdatedBy = COALESCE (UpdatedBy, 0),"+ " I_ErrorMsg = ' ',"+ " I_IsImported = 'N' , "+ " AD_Client_ID= " + Env.getAD_Client_ID(getCtx()) + " WHERE (I_IsImported<>'Y' OR I_IsImported IS NULL) ").append(docCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.info("Reset=" + no);  sql=new StringBuffer("UPDATE I_Budget i " + "SET AD_Org_ID= ").append(m_AD_Org_ID).append(" WHERE I_IsImported<>'Y'").append(docCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set Client Organizarion=" + no);  sql=new StringBuffer("UPDATE I_Budget i " + "SET C_AcctSchema_ID=(SELECT a.C_AcctSchema_ID FROM C_AcctSchema a" + " WHERE i.AcctSchemaName=a.Name AND i.AD_Client_ID=a.AD_Client_ID) "+ "WHERE C_AcctSchema_ID IS NULL AND AcctSchemaName IS NOT NULL"+ " AND I_IsImported<>'Y'").append(clientCheck).append(docCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  sql=new StringBuffer("UPDATE I_Budget i " + "SET C_AcctSchema_ID= ").append(m_C_AcctSchema_ID).append(" WHERE  I_IsImported<>'Y'").append(docCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set account schema=" + no);  sql=new StringBuffer("UPDATE I_Budget i " + "SET I_IsImported='E',I_ErrorMsg=I_ErrorMsg||'ERR=Invalid AcctSchema, '" + "WHERE (C_AcctSchema_ID IS NULL OR C_AcctSchema_ID=0"+ " OR NOT EXISTS (SELECT * FROM C_AcctSchema a WHERE i.AD_Client_ID=a.AD_Client_ID))"+ " AND I_IsImported<>'Y'").append(clientCheck).append(docCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0) {    log.warning("Invalid AcctSchema=" + no);    return false;  }  sql=new StringBuffer("UPDATE I_Budget i SET GL_Budget_ID= (SELECT g.GL_Budget_ID From GL_Budget g where i.BudgetCode=g.Name and i.AD_Client_ID= g.AD_Client_ID ) " + " WHERE GL_Budget_ID IS NULL and BudgetCode IS NOT NULL AND I_IsImported<>'Y'").append(clientCheck).append(docCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  sql=new StringBuffer("UPDATE I_Budget i " + " SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid Budget, '" + " WHERE (GL_Budget_ID IS NULL OR GL_Budget_ID=0)"+ " AND I_IsImported<>'Y'").append(clientCheck).append(docCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0) {    log.warning("Invalid Budget=" + no);    return false;  }  sql=new StringBuffer("UPDATE I_Budget i " + "SET A_Asset_ID=(SELECT a.A_Asset_ID FROM A_Asset a" + " WHERE a.Value=i.AssetValue AND  i.AD_Client_ID=a.AD_Client_ID) "+ "WHERE A_Asset_ID IS NULL AND AssetValue IS NOT NULL"+ " AND (C_ValidCombination_ID IS NULL OR C_ValidCombination_ID=0) AND I_IsImported<>'Y'").append(clientCheck).append(docCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  sql=new StringBuffer("UPDATE I_Budget i " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid Asset, '" + "WHERE A_Asset_ID IS NULL AND AssetValue IS NOT NULL"+ " AND (C_ValidCombination_ID IS NULL OR C_ValidCombination_ID=0) AND I_IsImported<>'Y'").append(clientCheck).append(docCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0) {    log.warning("Invalid Asset=" + no);    return false;  }  sql=new StringBuffer("UPDATE I_Budget i " + "SET Account_ID=(SELECT MAX(ev.C_ElementValue_ID) FROM C_ElementValue ev" + " INNER JOIN C_Element e ON (e.C_Element_ID=ev.C_Element_ID)"+ " INNER JOIN C_AcctSchema_Element ase ON (e.C_Element_ID=ase.C_Element_ID AND ase.ElementType='AC')"+ " WHERE ev.Value=i.AccountValue AND ev.IsSummary='N'"+ " AND i.C_AcctSchema_ID=ase.C_AcctSchema_ID AND i.AD_Client_ID=ev.AD_Client_ID) "+ "WHERE Account_ID IS NULL AND AccountValue IS NOT NULL"+ " AND (C_ValidCombination_ID IS NULL OR C_ValidCombination_ID=0) AND I_IsImported<>'Y'").append(clientCheck).append(docCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set Account from Value=" + no);  sql=new StringBuffer("UPDATE I_Budget i " + " SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid Account, '" + " WHERE (Account_ID IS NULL OR Account_ID=0)"+ " AND (C_ValidCombination_ID IS NULL OR C_ValidCombination_ID=0) AND I_IsImported<>'Y'").append(clientCheck).append(docCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0) {    log.warning("Invalid Account=" + no);    return false;  }  sql=new StringBuffer("UPDATE I_Budget i " + "SET C_BPartner_ID=(SELECT bp.C_BPartner_ID FROM C_BPartner bp" + " WHERE bp.Value=i.BPartnerValue AND bp.IsSummary='N' AND i.AD_Client_ID=bp.AD_Client_ID) "+ "WHERE C_BPartner_ID IS NULL AND BPartnerValue IS NOT NULL"+ " AND (C_ValidCombination_ID IS NULL OR C_ValidCombination_ID=0) AND I_IsImported<>'Y'").append(clientCheck).append(docCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set BPartner from Value=" + no);  sql=new StringBuffer("UPDATE I_Budget i " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid BPartner, '" + "WHERE C_BPartner_ID IS NULL AND BPartnerValue IS NOT NULL"+ " AND (C_ValidCombination_ID IS NULL OR C_ValidCombination_ID=0) AND I_IsImported<>'Y'").append(clientCheck).append(docCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0) {    log.warning("Invalid BPartner=" + no);    return false;  }  sql=new StringBuffer("UPDATE I_Budget i " + "SET M_Product_ID=(SELECT MAX(p.M_Product_ID) FROM M_Product p" + " WHERE (p.Value=i.ProductValue)"+ " AND p.IsSummary='N' AND i.AD_Client_ID=p.AD_Client_ID) "+ "WHERE M_Product_ID IS NULL AND (ProductValue IS NOT NULL )"+ " AND (C_ValidCombination_ID IS NULL OR C_ValidCombination_ID=0) AND I_IsImported<>'Y'").append(clientCheck).append(docCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set Product from Value=" + no);  sql=new StringBuffer("UPDATE I_Budget i " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid Product, '" + "WHERE M_Product_ID IS NULL AND (ProductValue IS NOT NULL )"+ " AND (C_ValidCombination_ID IS NULL OR C_ValidCombination_ID=0) AND I_IsImported<>'Y'").append(clientCheck).append(docCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0) {    log.warning("Invalid Product=" + no);    return false;  }  sql=new StringBuffer("UPDATE I_Budget i " + "SET C_Project_ID=(SELECT p.C_Project_ID FROM C_Project p" + " WHERE p.Value=i.ProjectValue AND p.IsSummary='N' AND i.AD_Client_ID=p.AD_Client_ID) "+ "WHERE C_Project_ID IS NULL AND ProjectValue IS NOT NULL"+ " AND (C_ValidCombination_ID IS NULL OR C_ValidCombination_ID=0) AND I_IsImported<>'Y'").append(clientCheck).append(docCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set Project from Value=" + no);  sql=new StringBuffer("UPDATE I_Budget i " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid Project, '" + "WHERE C_Project_ID IS NULL AND ProjectValue IS NOT NULL"+ " AND (C_ValidCombination_ID IS NULL OR C_ValidCombination_ID=0) AND I_IsImported<>'Y'").append(clientCheck).append(docCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0) {    log.warning("Invalid Project=" + no);    return false;  }  sql=new StringBuffer("UPDATE I_Budget i " + "SET AD_OrgTrx_ID=(SELECT o.AD_Org_ID FROM AD_Org o" + " WHERE o.Value=i.OrgTrxValue AND o.IsSummary='N' AND i.AD_Client_ID=o.AD_Client_ID) "+ "WHERE AD_OrgTrx_ID IS NULL AND OrgTrxValue IS NOT NULL"+ " AND (C_ValidCombination_ID IS NULL OR C_ValidCombination_ID=0) AND I_IsImported<>'Y'").append(clientCheck).append(docCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set OrgTrx from Value=" + no);  sql=new StringBuffer("UPDATE I_Budget i " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid OrgTrx, '" + "WHERE AD_OrgTrx_ID IS NULL AND OrgTrxValue IS NOT NULL"+ " AND (C_ValidCombination_ID IS NULL OR C_ValidCombination_ID=0) AND I_IsImported<>'Y'").append(clientCheck).append(docCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0) {    log.warning("Invalid OrgTrx=" + no);    return false;  }  sql=new StringBuffer("UPDATE I_Budget i " + "SET C_Campaign_ID=(SELECT c.C_Campaign_ID FROM C_Campaign c" + " WHERE c.Value=i.CampaignValue AND c.IsSummary='N' AND i.AD_Client_ID=c.AD_Client_ID) "+ "WHERE C_Campaign_ID IS NULL AND CampaignValue IS NOT NULL"+ " AND (C_ValidCombination_ID IS NULL OR C_ValidCombination_ID=0) AND I_IsImported<>'Y'").append(clientCheck).append(docCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set Campaign from Value=" + no);  sql=new StringBuffer("UPDATE I_Budget i " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid Campaign, '" + "WHERE C_Campaign_ID IS NULL AND CampaignValue IS NOT NULL"+ " AND (C_ValidCombination_ID IS NULL OR C_ValidCombination_ID=0) AND I_IsImported<>'Y'").append(clientCheck).append(docCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0) {    log.warning("Invalid Campaign=" + no);    return false;  }  sql=new StringBuffer("UPDATE I_Budget i " + "SET C_SalesRegion_ID=(SELECT s.C_SalesRegion_ID FROM C_SalesRegion s" + " WHERE s.Value=i.SalesRegionValue AND s.IsSummary='N' AND i.AD_Client_ID=s.AD_Client_ID) "+ "WHERE C_SalesRegion_ID IS NULL AND SalesRegionValue IS NOT NULL"+ " AND (C_ValidCombination_ID IS NULL OR C_ValidCombination_ID=0) AND I_IsImported<>'Y'").append(clientCheck).append(docCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set SalesRegion from Value=" + no);  sql=new StringBuffer("UPDATE I_Budget i " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid Sales Region, '" + "WHERE C_SalesRegion_ID IS NULL AND SalesRegionValue IS NOT NULL"+ " AND (C_ValidCombination_ID IS NULL OR C_ValidCombination_ID=0) AND I_IsImported<>'Y'").append(clientCheck).append(docCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0) {    log.warning("Invalid Sales Region=" + no);    return false;  }  commitEx();  return true;}  }
class C{  public void notifyThreadBusy(final Thread thread){  if (thread == null) {    return;  }synchronized (activationLock) {synchronized (mainLock) {      if (blockerThread == null) {        activateBlockerThread();      } else       if (isReadyToShutdown()) {        mainLock.notifyAll();        timeoutPassed=false;      }      busyThreadSet.add(thread);    }  }}  }
class C{  @ExceptionHandler(NotAuthorizedException.class) @ResponseBody @ResponseStatus(HttpStatus.FORBIDDEN) public String handleException(final NotAuthorizedException cause){  return convertErrorAsJson(cause.getMessage());}  }
class C{  public void encodeImage(BufferedImage buf,File imageFile) throws SVGGraphics2DIOException {  try {    OutputStream os=new FileOutputStream(imageFile);    try {      ImageWriter writer=ImageWriterRegistry.getInstance().getWriterFor("image/jpeg");      ImageWriterParams params=new ImageWriterParams();      params.setJPEGQuality(1,false);      writer.writeImage(buf,os,params);    }  finally {      os.close();    }  } catch (  IOException e) {    throw new SVGGraphics2DIOException(ERR_WRITE + imageFile.getName());  }}  }
class C{  private synchronized @Nullable ResourceBundle findResourceBundle(@Nullable String name,boolean useCallersClassLoader){  throw new RuntimeException();}  }
class C{  @SuppressWarnings({"CollectionDeclaredAsConcreteClass"}) @GridifySetToSet(gridName="GridifySetToSetTarget") @Override public Collection<Long> findPrimesInArrayListWithoutSplitSizeAndThreshold(ArrayList<Long> input){  return findPrimes0(input);}  }
class C{  public CatalogCategoryRestRep update(URI id,CatalogCategoryUpdateParam input){  return client.put(CatalogCategoryRestRep.class,input,getIdUrl(),id);}  }
class C{  protected Solution select(){  AdaptiveGridArchive archive=getArchive();  Entry<Integer,List<Solution>> entry1=draw();  Entry<Integer,List<Solution>> entry2=draw();  Entry<Integer,List<Solution>> selection=entry1;  if (entry1 != entry2) {    if ((archive.getDensity(entry2.getKey()) < archive.getDensity(entry1.getKey())) || (archive.getDensity(entry2.getKey()) == archive.getDensity(entry1.getKey()) && PRNG.nextBoolean())) {      selection=entry2;    }  }  return PRNG.nextItem(selection.getValue());}  }
class C{  public static String u4(int v){  char[] result=new char[8];  for (int i=0; i < 8; i++) {    result[7 - i]=Character.forDigit(v & 0x0f,16);    v>>=4;  }  return new String(result);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:12.568 -0500",hash_original_method="3441A786FC97408CA6232DAAE3F595DF",hash_generated_method="6B4053AF35C2C4F0866FEF5884A3DEDB") public CertificateMessage(HandshakeIODataStream in,int length) throws IOException {  int l=in.readUint24();  if (l == 0) {    if (length != 3) {      fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR: incorrect CertificateMessage");    }    certs=new X509Certificate[0];    encoded_certs=new byte[0][0];    this.length=3;    return;  }  CertificateFactory cf;  try {    cf=CertificateFactory.getInstance("X509");  } catch (  CertificateException e) {    fatalAlert(AlertProtocol.INTERNAL_ERROR,"INTERNAL ERROR",e);    return;  }  ArrayList<X509Certificate> certsList=new ArrayList<X509Certificate>();  int size=0;  int enc_size=0;  while (l > 0) {    size=in.readUint24();    l-=3;    try {      certsList.add((X509Certificate)cf.generateCertificate(in));    } catch (    CertificateException e) {      fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR",e);    }    l-=size;    enc_size+=size;  }  certs=certsList.toArray(new X509Certificate[certsList.size()]);  this.length=3 + 3 * certs.length + enc_size;  if (this.length != length) {    fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR: incorrect CertificateMessage");  }}  }
class C{  @EventHandler public void onPlayerGround(PlayerOnGroundEvent event){  UUID id=event.getPlayer().getUniqueId();  KitDoubleJump.DoubleJumpData data=players.get(id);  if (event.getOnGround() && data != null && data.isEnabled() && !data.isRechargeBeforeLanding() && !landed.contains(id)) {    landed.add(id);  }}  }
class C{  private Segment loadDiskSegment(long segmentId,long segmentVersion){  File file=SegmentFile.createSegmentFile(name,storage.directory(),segmentId,segmentVersion);  Buffer buffer=FileBuffer.allocate(file,Math.min(DEFAULT_BUFFER_SIZE,storage.maxSegmentSize()),Integer.MAX_VALUE);  SegmentDescriptor descriptor=new SegmentDescriptor(buffer);  Segment segment=new Segment(new SegmentFile(file),buffer.position(SegmentDescriptor.BYTES).slice(),descriptor,createIndex(descriptor),new OffsetPredicate(),serializer.clone(),this);  LOGGER.debug("Loaded file segment: {} ({})",descriptor.id(),file.getName());  return segment;}  }
class C{  public static double entropyOverRows(double[][] matrix){  double returnValue=0, sumForRow, total=0;  for (int i=0; i < matrix.length; i++) {    sumForRow=0;    for (int j=0; j < matrix[0].length; j++) {      sumForRow+=matrix[i][j];    }    returnValue=returnValue - lnFunc(sumForRow);    total+=sumForRow;  }  if (Utils.eq(total,0)) {    return 0;  }  return (returnValue + lnFunc(total)) / (total * log2);}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public void lerp(float x,float y,float z,float amt){  this.x=PApplet.lerp(this.x,x,amt);  this.y=PApplet.lerp(this.y,y,amt);  this.z=PApplet.lerp(this.z,z,amt);}  }
class C{  final boolean nextPosition() throws IOException {  if (count-- > 0) {    position=postings.nextPosition() - offset;    return true;  } else   return false;}  }
class C{  private EntryImpl checkOldName(String baseName){  EntryImpl e=(EntryImpl)name2entry.get(baseName);  if (e == null) {    throw new IllegalArgumentException("Filter not found:" + baseName);  }  return e;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void addChangeListener(ChangeListener l){  m_ChangeListeners.add(l);}  }
class C{  private boolean isServiceRunning(@NonNull Class<?> serviceClass){  ActivityManager manager=(ActivityManager)getSystemService(Context.ACTIVITY_SERVICE);  for (  ActivityManager.RunningServiceInfo service : manager.getRunningServices(Integer.MAX_VALUE)) {    if (serviceClass.getName().equals(service.service.getClassName())) {      return true;    }  }  return false;}  }
class C{  public void clear(){  reset((AccessibilityNodeInfoCompat)null);}  }
class C{  public boolean resetAll() throws ReplicatorException, InterruptedException {  for (  String name : manager.names()) {    reset(name);  }  return true;}  }
class C{  private void assignRandomRegularMatrix(int n,SecureRandom sr){  numRows=n;  numColumns=n;  length=(n + 31) >>> 5;  matrix=new int[numRows][length];  GF2Matrix lm=new GF2Matrix(n,Matrix.MATRIX_TYPE_RANDOM_LT,sr);  GF2Matrix um=new GF2Matrix(n,Matrix.MATRIX_TYPE_RANDOM_UT,sr);  GF2Matrix rm=(GF2Matrix)lm.rightMultiply(um);  Permutation perm=new Permutation(n,sr);  int[] p=perm.getVector();  for (int i=0; i < n; i++) {    System.arraycopy(rm.matrix[i],0,matrix[p[i]],0,length);  }}  }
class C{  public boolean okToSend(){  return activeSerialPort.isCTS();}  }
class C{  public static void main(String[] args) throws IOException {  Comparator<short[]> comp=FreeCellNode.comparator();  PrintWriter pw=new PrintWriter("DFS-exploration.txt");  for (DealIterator di=Deal.iterator(new File("artifacts","32000.txt")); di.hasNext(); ) {    FreeCellNode fc=di.next();    pw.println(fc);    pw.flush();    System.out.println("working on: " + (di.getNextDealNumber() - 1));    AnalyzeState st=new AnalyzeState();    DFS<short[]> dfs=new DFS<short[]>(st);    Result res=dfs.fullSearch(fc,Deal.goal(),comp);    Stack<IMove> sol=res.solution();    System.out.println("Solution has " + sol.size() + " moves.");    System.out.println("   Total number of states: " + dfs.getCounter());    st.report();  }  pw.close();}  }
class C{  @LargeTest public void testPropertiesH264HD1080WithAudio() throws Exception {  final String videoItemFilename=INPUT_FILE_PATH + "H264_BP_1080x720_30fps_12Mbps_AACLC_44.1khz_64kbps_s_1_17.mp4";  final int aspectRatio=MediaProperties.ASPECT_RATIO_3_2;  final int fileType=MediaProperties.FILE_MP4;  final int videoCodecType=MediaProperties.VCODEC_H264;  final int duration=77500;  final int videoBitrate=1190000;  final int audioBitrate=64000;  final int fps=10;  final int audioCodecType=MediaProperties.ACODEC_AAC_LC;  final int audioSamplingFrequency=44100;  final int audioChannel=2;  final int videoProfile=MediaProperties.H264Profile.H264ProfileBaseline;  final int videoLevel=MediaProperties.H264Level.H264Level13;  final int width=1080;  final int height=MediaProperties.HEIGHT_720;  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final MediaVideoItem mvi=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",videoItemFilename,renderingMode);  validateVideoProperties(aspectRatio,fileType,videoCodecType,duration,videoBitrate,fps,videoProfile,videoLevel,width,height,audioCodecType,audioSamplingFrequency,audioChannel,audioBitrate,mvi);}  }
class C{  public Wedge(Position centerPosition,Angle angle,double northSouthRadius,double verticalRadius,double eastWestRadius){  if (centerPosition == null) {    String message=Logging.getMessage("nullValue.PositionIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (angle == null) {    String message=Logging.getMessage("nullValue.AngleIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (northSouthRadius <= 0 || eastWestRadius <= 0 || verticalRadius <= 0) {    String message=Logging.getMessage("generic.ArgumentOutOfRange","radius <= 0");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (angle.getRadians() < 0 || angle.getRadians() > 2 * Math.PI) {    String message=Logging.getMessage("generic.ArgumentOutOfRange","angle < 0 or angle > 2 PI");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.centerPosition=centerPosition;  this.wedgeAngle=angle;  this.northSouthRadius=northSouthRadius;  this.verticalRadius=verticalRadius;  this.eastWestRadius=eastWestRadius;  this.setUpGeometryCache();}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case DatatypePackage.CONSTRAINT__TYPE:    setType(TYPE_EDEFAULT);  return;case DatatypePackage.CONSTRAINT__CONSTRAINT_VALUES:setConstraintValues(CONSTRAINT_VALUES_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  List<IGroupMemberNode> orderNodesByDependencies(final List<IGroupMemberNode> nodes,final GroupNodeVarBindingInfoMap bindingInfoMap,final Set<IVariable<?>> knownBoundSomewhere){  final List<IGroupMemberNode> ordered=new ArrayList<IGroupMemberNode>(nodes.size());  final LinkedList<IGroupMemberNode> toBePlaced=new LinkedList<IGroupMemberNode>(nodes);  final Set<IVariable<?>> knownBound=new HashSet<IVariable<?>>(knownBoundSomewhere);  while (!toBePlaced.isEmpty()) {    for (int i=0; i < toBePlaced.size(); i++) {      final IGroupMemberNode node=toBePlaced.get(i);      final GroupNodeVarBindingInfo nodeBindingInfo=bindingInfoMap.get(node);      if (nodeBindingInfo.leftToBeBound(knownBound).isEmpty() || i + 1 == toBePlaced.size()) {        ordered.add(node);        toBePlaced.remove(i);        knownBound.addAll(nodeBindingInfo.getDefinitelyProduced());        break;      }    }  }  return ordered;}  }
class C{  protected PollResponse handlePoll(PollRequest request){  if (request.term() < context.getTerm()) {    LOGGER.debug("{} - Rejected {}: candidate's term is less than the current term",context.getCluster().member().address(),request);    return PollResponse.builder().withStatus(Response.Status.OK).withTerm(context.getTerm()).withAccepted(false).build();  } else   if (isLogUpToDate(request.logIndex(),request.logTerm(),request)) {    return PollResponse.builder().withStatus(Response.Status.OK).withTerm(context.getTerm()).withAccepted(true).build();  } else {    return PollResponse.builder().withStatus(Response.Status.OK).withTerm(context.getTerm()).withAccepted(false).build();  }}  }
class C{  public boolean isLocked(){  return locked;}  }
class C{  private int readAttr2() throws IOException {  if ((numRead - lastMark < safeReadAheadLimit)) {    int ch=next();    if (!isFirstIdChar(ch))     return MISMATCH;    ch=next();    while (isIdChar(ch) && ((numRead - lastMark) < safeReadAheadLimit)) {      ch=next();    }    if (isSpace(ch))     ch=nextSkipWS();    if (ch != '=') {      push(ch);      return MATCH;    }    int quoteChar=nextSkipWS();    if (quoteChar == '"' || quoteChar == '\'') {      while ((numRead - lastMark) < safeReadAheadLimit) {        ch=next();        if (ch < 0)         return MISMATCH; else         if (ch == '<') {          eatSSI();        } else         if (ch == quoteChar) {          return MATCH;        }      }    } else {      while ((numRead - lastMark) < safeReadAheadLimit) {        ch=next();        if (ch < 0)         return MISMATCH; else         if (isSpace(ch)) {          push(ch);          return MATCH;        } else         if (ch == '>') {          push(ch);          return MATCH;        } else         if (ch == '<') {          eatSSI();        }      }    }  }  return MISMATCH;}  }
class C{  public static IPackageFragmentRoot addClassFolder(IJavaProject jproject,String containerName,IPath sourceAttachPath,IPath sourceAttachRoot) throws CoreException {  IProject project=jproject.getProject();  IContainer container=null;  if (containerName == null || containerName.length() == 0) {    container=project;  } else {    IFolder folder=project.getFolder(containerName);    if (!folder.exists()) {      CoreUtility.createFolder(folder,false,true,null);    }    container=folder;  }  IClasspathEntry cpe=JavaCore.newLibraryEntry(container.getFullPath(),sourceAttachPath,sourceAttachRoot);  addToClasspath(jproject,cpe);  return jproject.getPackageFragmentRoot(container);}  }
class C{  public Slice(double start,double end,boolean visible){  this.start=start;  this.end=end;  this.visible=visible;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:38.316 -0500",hash_original_method="744CF515CE666C072F4911092C5B89B3",hash_generated_method="C6D78A0A40069B7F3CB3B55D859F95B0") public static void dumpCursor(Cursor cursor,StringBuilder sb){  sb.append(">>>>> Dumping cursor " + cursor + "\n");  if (cursor != null) {    int startPos=cursor.getPosition();    cursor.moveToPosition(-1);    while (cursor.moveToNext()) {      dumpCurrentRow(cursor,sb);    }    cursor.moveToPosition(startPos);  }  sb.append("<<<<<\n");}  }
class C{  @Override public void toggle(){  setChecked(!isChecked);}  }
class C{  public ParenthesizedExpressionItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public static boolean equal(double[][] a,double[][] b){  if (a == null) {    return (b == null);  }  if (b == null) {    return false;  }  if (a.length != b.length) {    return false;  }  for (int i=0; i < a.length; i++) {    if (!Arrays.equals(a[i],b[i])) {      return false;    }  }  return true;}  }
class C{  @SuppressWarnings("unchecked") private <E>E analyzeMethod(ClassContext classContext,Class<E> analysisClass,MethodDescriptor methodDescriptor) throws CheckedAnalysisException {  IMethodAnalysisEngine<E> engine=(IMethodAnalysisEngine<E>)methodAnalysisEngineMap.get(analysisClass);  if (engine == null) {    throw new IllegalArgumentException("No analysis engine registered to produce " + analysisClass.getName());  }  Profiler profiler=getProfiler();  profiler.start(engine.getClass());  try {    return engine.analyze(this,methodDescriptor);  }  finally {    profiler.end(engine.getClass());  }}  }
class C{  void updateConsistencyGroupInfo(VPlexConsistencyGroupInfo cgInfo) throws VPlexApiException {  String cgName=cgInfo.getName();  StringBuilder uriBuilder=new StringBuilder();  uriBuilder.append(VPlexApiConstants.URI_CLUSTERS.toString());  uriBuilder.append(cgInfo.getClusterName());  uriBuilder.append(VPlexApiConstants.URI_CGS.toString());  uriBuilder.append(cgName);  URI requestURI=_vplexApiClient.getBaseURI().resolve(URI.create(uriBuilder.toString()));  s_logger.info("Consistency group Info Request URI is {}",requestURI.toString());  ClientResponse response=_vplexApiClient.get(requestURI);  String responseStr=response.getEntity(String.class);  s_logger.info("Response is {}",responseStr);  int status=response.getStatus();  response.close();  if (status != VPlexApiConstants.SUCCESS_STATUS) {    throw VPlexApiException.exceptions.failureUpdatingCGStatus(cgName,cgInfo.getClusterName(),String.valueOf(status));  }  try {    VPlexApiUtils.setAttributeValues(responseStr,cgInfo);    s_logger.info("Updated Consistency Group Info {}",cgInfo.toString());  } catch (  Exception e) {    throw VPlexApiException.exceptions.failedUpdatingCG(cgName,cgInfo.getClusterName(),e);  }}  }
class C{  public DistributedLogClient build(){  return buildClient();}  }
class C{  public static void releasePlugin(ReplicatorPlugin plugin,PluginContext context){  String pluginClassName=plugin.getClass().getName();  try {    plugin.release(context);  } catch (  Throwable t) {    logger.warn("Unable to release plugin: class name=" + pluginClassName,t);  }  if (logger.isDebugEnabled())   logger.debug("Plug-in released successfully: class name=" + pluginClassName);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public Coth(){  super("coth",1);}  }
class C{  public void shutdownOutput() throws IOException {  if (isClosed())   throw new SocketException("Socket is closed");  if (!isConnected())   throw new SocketException("Socket is not connected");  if (isOutputShutdown())   throw new SocketException("Socket output is already shutdown");  getImpl().shutdownOutput();  shutOut=true;}  }
class C{  public boolean isSetUid(){  return EncodingUtils.testBit(__isset_bitfield,__UID_ISSET_ID);}  }
class C{  public void removeNotify(){  if (parserManager != null) {    parserManager.stopParsing();  }  super.removeNotify();}  }
class C{  public void reset(){  data.length=0;}  }
class C{  public boolean match(SimpleName node,Object other){  if (!(other instanceof SimpleName)) {    return false;  }  SimpleName o=(SimpleName)other;  return node.getIdentifier().equals(o.getIdentifier());}  }
class C{  public void unbindProperty(String prop,BindTarget target){}  }
class C{  public void removeDesignation(Object entity,String uri) throws RepositoryException {  removeDesignations(entity,getValueFactory().createURI(uri));}  }
class C{  public static void requestWMExtents(long window){  if (window == XConstants.None) {    return;  }  log.fine("Requesting FRAME_EXTENTS");  XClientMessageEvent msg=new XClientMessageEvent();  msg.zero();  msg.set_type(XConstants.ClientMessage);  msg.set_display(XToolkit.getDisplay());  msg.set_window(window);  msg.set_format(32);  XToolkit.awtLock();  try {    XNETProtocol net_protocol=getWM().getNETProtocol();    if (net_protocol != null && net_protocol.active()) {      msg.set_message_type(XA_NET_REQUEST_FRAME_EXTENTS.getAtom());      XlibWrapper.XSendEvent(XToolkit.getDisplay(),XToolkit.getDefaultRootWindow(),false,XConstants.SubstructureRedirectMask | XConstants.SubstructureNotifyMask,msg.getPData());    }    if (getWMID() == XWM.KDE2_WM) {      msg.set_message_type(XA_KDE_NET_WM_FRAME_STRUT.getAtom());      XlibWrapper.XSendEvent(XToolkit.getDisplay(),XToolkit.getDefaultRootWindow(),false,XConstants.SubstructureRedirectMask | XConstants.SubstructureNotifyMask,msg.getPData());    }  }  finally {    XToolkit.awtUnlock();    msg.dispose();  }}  }
class C{  public final boolean isEmpty(){  return left >= right || top >= bottom;}  }
class C{  public static void showMessageDialog(String message,@NotNull @Nls(capitalization=Nls.Capitalization.Title) String title,@Nullable Icon icon){  try {    if (canShowMacSheetPanel()) {      MacMessages.getInstance().showOkMessageDialog(title,message,OK_BUTTON);      return;    }  } catch (  MessageException ignored) {  }catch (  Exception reportThis) {    LOG.error(reportThis);  }  showDialog(message,title,new String[]{OK_BUTTON},0,icon);}  }
class C{  public String toString(){  String prettyText=this.text.replace('\n','\u00b6');  return "Diff(" + this.operation + ",\""+ prettyText+ "\")";}  }
class C{  public void addStrategicTarget(String target){  if (StringUtil.isNullOrEmpty(target)) {    return;  }  strategicBuildingTargets.add(target);}  }
class C{  public boolean execute(File script){  return false;}  }
class C{  private ListAdapter createOfferListAdapter(final List<Offer> offers){  List<Map<String,Object>> data=new ArrayList<>();  for (  Offer offer : offers) {    Map<String,Object> map=new HashMap<>();    map.put("offerIcon",offer.getImageUrl());    map.put("offerTitle",offer.getTitle());    map.put("offerDetails",offer.getDescription());    data.add(map);  }  SimpleAdapter adapter=new SimpleAdapter(PlaceDetailsActivity.this,data,R.layout.offer_item,new String[]{"offerIcon","offerTitle","offerDetails"},new int[]{R.id.offer_Image,R.id.offer_name,R.id.offer_description});  adapter.setViewBinder(new ImageUrlViewBinder(R.id.offer_Image));  return adapter;}  }
class C{  public SchemaField(SchemaField prototype,String name){  this(name,prototype.type,prototype.properties,prototype.defaultValue);  args=prototype.args;}  }
class C{  public static String encodeParameters(String[] paramList){  if (paramList == null)   return null;  String encodedString;  StringBuilder sb=new StringBuilder();  for (  String parameter : paramList) {    if (parameter == null)     continue;    sb.append(parameter);    sb.append(PARAMETER_SEPARATOR);  }  encodedString=base64Encoder.encode(sb.toString().getBytes());  return encodedString;}  }
class C{  public STGroupFile(String fileName){  this(fileName,'<','>');}  }
class C{  private static Collection<ArtifactInformation> findPomArtifacts(final ArtifactInformation art,final Map<String,ArtifactInformation> artifacts){  final Collection<ArtifactInformation> poms=new LinkedList<>();  fillPomsFromChildren(poms,art,artifacts);  return poms;}  }
class C{  public AbstractNaryTupleOperator(TupleExpr... args){  super(args);}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  @Override protected Object attemptReadResponse(Connection cnx) throws Exception {  Message msg=createResponseMessage();  if (msg != null) {    msg.setComms(cnx.getSocket(),cnx.getInputStream(),cnx.getOutputStream(),cnx.getCommBuffer(),cnx.getStats());    if (msg instanceof ChunkedMessage) {      try {        return processResponse(msg,cnx);      }  finally {        msg.unsetComms();        processSecureBytes(cnx,msg);      }    } else {      try {        msg.recv();      }  finally {        msg.unsetComms();        processSecureBytes(cnx,msg);      }      return processResponse(msg,cnx);    }  } else {    return null;  }}  }
class C{  public static float[] findRange(Function1D f,float[] minmax){  if (minmax == null)   minmax=new float[2];  float min=0, max=0;  for (float x=-100; x < 100; x+=1.27139) {    float n=f.evaluate(x);    min=Math.min(min,n);    max=Math.max(max,n);  }  minmax[0]=min;  minmax[1]=max;  return minmax;}  }
class C{  public void breakpointReached(BreakpointEvent event){  harassTarget=false;synchronized (harassLock) {    try {      StackFrame frame=event.thread().frame(0);      LocalVariable lv=frame.visibleVariableByName("result");      IntegerValue resultV=(IntegerValue)frame.getValue(lv);      result=resultV.value();    } catch (    Exception exc) {      exc.printStackTrace(System.err);      failure("TEST FAILURE: exception " + exc);    }  }}  }
class C{  static PackageAttributes createPackageAttributes(File classpathElement,String stagingPath,String overridePackageName){  try {    boolean directory=classpathElement.isDirectory();    Hasher hasher=Hashing.md5().newHasher();    OutputStream hashStream=Funnels.asOutputStream(hasher);    CountingOutputStream countingOutputStream=new CountingOutputStream(hashStream);    if (!directory) {      Files.asByteSource(classpathElement).copyTo(countingOutputStream);    } else {      ZipFiles.zipDirectory(classpathElement,countingOutputStream);    }    long size=countingOutputStream.getCount();    String hash=Base64Variants.MODIFIED_FOR_URL.encode(hasher.hash().asBytes());    String uniqueName=getUniqueContentName(classpathElement,hash);    String resourcePath=IOChannelUtils.resolve(stagingPath,uniqueName);    DataflowPackage target=new DataflowPackage();    target.setName(overridePackageName != null ? overridePackageName : uniqueName);    target.setLocation(resourcePath);    return new PackageAttributes(size,hash,directory,target);  } catch (  IOException e) {    throw new RuntimeException("Package setup failure for " + classpathElement,e);  }}  }
class C{  public boolean isShowRowHeader(){  return (getRowHeader() != null && getRowHeader().getView() != null);}  }
class C{  @Override public String resourceText(){  return baseResource.resourceText().replaceAll("\\$\\{" + variableName + "\\}",replacementValue);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override public void awaitOperational() throws InterruptedException {  lock.lock();  try {    while (!socketValid || this.in == null) {      awaitOperationalUnlocked();    }  }  finally {    lock.unlock();  }}  }
class C{  public final Vec2D interpolateToSelf(ReadonlyVec2D v,float f){  x+=(v.x() - x) * f;  y+=(v.y() - y) * f;  return this;}  }
class C{  public static JSONObject toJSONObject(String string) throws JSONException {  JSONObject jo=new JSONObject();  JSONTokener x=new JSONTokener(string);  while (x.more()) {    String name=Cookie.unescape(x.nextTo('='));    x.next('=');    jo.put(name,Cookie.unescape(x.nextTo(';')));    x.next();  }  return jo;}  }
class C{  @Override public void put(URI uri,Map<String,List<String>> responseHeaders) throws IOException {  if (uri == null || responseHeaders == null) {    throw new IllegalArgumentException();  }  List<HttpCookie> cookies=parseCookie(responseHeaders);  for (  HttpCookie cookie : cookies) {    if (cookie.getDomain() == null) {      cookie.setDomain(uri.getHost());    }    if (cookie.getPath() == null) {      cookie.setPath(pathToCookiePath(uri.getPath()));    } else     if (!HttpCookie.pathMatches(cookie,uri)) {      continue;    }    if ("".equals(cookie.getPortlist())) {      cookie.setPortlist(Integer.toString(uri.getEffectivePort()));    } else     if (cookie.getPortlist() != null && !HttpCookie.portMatches(cookie,uri)) {      continue;    }    if (policy.shouldAccept(uri,cookie)) {      store.add(uri,cookie);    }  }}  }
class C{  public SocketPipe(Socket socket1,Socket socket2) throws IOException {  this.socket1=checkNotNull(socket1,"Argument [socks1] may not be null");  this.socket2=checkNotNull(socket2,"Argument [socks1] may not be null");  pipe1=new StreamPipe(socket1.getInputStream(),socket2.getOutputStream(),OUTPUT_PIPE_NAME);  pipe1.setAttribute(ATTR_SOURCE_SOCKET,socket1);  pipe1.setAttribute(ATTR_DESTINATION_SOCKET,socket2);  pipe2=new StreamPipe(socket2.getInputStream(),socket1.getOutputStream(),INPUT_PIPE_NAME);  pipe2.setAttribute(ATTR_SOURCE_SOCKET,socket2);  pipe2.setAttribute(ATTR_DESTINATION_SOCKET,socket1);  pipe1.addPipeListener(listener);  pipe2.addPipeListener(listener);  pipe1.setAttribute(ATTR_PARENT_PIPE,this);  pipe2.setAttribute(ATTR_PARENT_PIPE,this);}  }
class C{  protected Destination createDestination(String subject){  if (topic) {    return new ActiveMQTopic(subject);  } else {    return new ActiveMQQueue(subject);  }}  }
class C{  public SurfaceTexture createTexture(){  mProgram=createProgram(VERTEX_SHADER,FRAGMENT_SHADER);  if (mProgram == 0) {    throw new RuntimeException("failed creating program");  }  maPositionHandle=GLES20.glGetAttribLocation(mProgram,"aPosition");  checkGlError("glGetAttribLocation aPosition");  if (maPositionHandle == -1) {    throw new RuntimeException("Could not get attrib location for aPosition");  }  maTextureHandle=GLES20.glGetAttribLocation(mProgram,"aTextureCoord");  checkGlError("glGetAttribLocation aTextureCoord");  if (maTextureHandle == -1) {    throw new RuntimeException("Could not get attrib location for aTextureCoord");  }  muMVPMatrixHandle=GLES20.glGetUniformLocation(mProgram,"uMVPMatrix");  checkGlError("glGetUniformLocation uMVPMatrix");  if (muMVPMatrixHandle == -1) {    throw new RuntimeException("Could not get attrib location for uMVPMatrix");  }  muSTMatrixHandle=GLES20.glGetUniformLocation(mProgram,"uSTMatrix");  checkGlError("glGetUniformLocation uSTMatrix");  if (muSTMatrixHandle == -1) {    throw new RuntimeException("Could not get attrib location for uSTMatrix");  }  int[] textures=new int[1];  GLES20.glGenTextures(1,textures,0);  mTextureID=textures[0];  GLES20.glBindTexture(GLES11Ext.GL_TEXTURE_EXTERNAL_OES,mTextureID);  checkGlError("glBindTexture mTextureID");  GLES20.glTexParameterf(GLES11Ext.GL_TEXTURE_EXTERNAL_OES,GLES20.GL_TEXTURE_MIN_FILTER,GLES20.GL_NEAREST);  GLES20.glTexParameterf(GLES11Ext.GL_TEXTURE_EXTERNAL_OES,GLES20.GL_TEXTURE_MAG_FILTER,GLES20.GL_LINEAR);  GLES20.glTexParameteri(GLES11Ext.GL_TEXTURE_EXTERNAL_OES,GLES20.GL_TEXTURE_WRAP_S,GLES20.GL_CLAMP_TO_EDGE);  GLES20.glTexParameteri(GLES11Ext.GL_TEXTURE_EXTERNAL_OES,GLES20.GL_TEXTURE_WRAP_T,GLES20.GL_CLAMP_TO_EDGE);  checkGlError("glTexParameter");  mSurfaceTexture=new SurfaceTexture(mTextureID);  return mSurfaceTexture;}  }
class C{  public boolean isPremoveable(){  return Raptor.getInstance().getPreferences().getBoolean(PreferenceKeys.BOARD_PREMOVE_ENABLED);}  }
class C{  protected void optimize(final AST2BOpContext ctx,final StaticAnalysis sa,final JoinGroupNode group,final PropertyPathNode ppNode,final ArbitraryLengthPathNode alpNode){  final PathAlternative pathRoot=ppNode.p().getPathAlternative();  final PropertyPathInfo sp=new PropertyPathInfo(ppNode.s(),ppNode.o(),ppNode.c(),ppNode.getScope());  optimize(ctx,sa,group,sp,pathRoot,alpNode,ppNode.getQueryHints(),ppNode);  group.removeChild(ppNode);}  }
class C{  protected void processBytes(byte[] buf,int off,int len){  nBytesIn+=len;  if (len < 1 || state.isDone())   return;  if (state == State.ROW_READY)   throw new PngjInputException("this should only be called if waitingForMoreInput");  if (inf.needsDictionary() || !inf.needsInput())   throw new RuntimeException("should not happen");  inf.setInput(buf,off,len);  if (isCallbackMode()) {    while (inflateData()) {      int nextRowLen=processRowCallback();      prepareForNextRow(nextRowLen);      if (isDone())       processDoneCallback();    }  } else   inflateData();}  }
class C{  public boolean isSipAutomata(){  return mSipAutomata;}  }
class C{  static public byte processTag(byte tag,boolean hasAttributes,boolean hasContent){  if (hasAttributes) {    tag|=WbXmlLiterals.TAG_ATTRIBUTES_MASK;  }  if (hasContent) {    tag|=WbXmlLiterals.TAG_CONTENT_MASK;  }  return tag;}  }
class C{  public JsonArrayRequest(int method,String url,Listener<JSONArray> listener,ErrorListener errorListener){  super(method,url,null,listener,errorListener);}  }
class C{  protected void focusView(){  getElement().focus();}  }
class C{  public SubCallback group(){  return this.currentCallback;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof TVPermission)) {    return false;  }  TVPermission that=(TVPermission)obj;  if (this.mask != that.mask) {    return false;  }  if ((this.numrange[0] != that.numrange[0]) || (this.numrange[1] != that.numrange[1])) {    return false;  }  return this.getName().equals(that.getName());}  }
class C{  public void fromArray(int[] codon){  for (int i=0; i < codon.length; i++) {    if ((codon[i] < 0) || (codon[i] >= maximumValue)) {      throw new IllegalArgumentException("invalid codon value");    }  }  this.codon=codon.clone();}  }
class C{  public static <T>LinkedBindingBuilder<T> bind(Binder binder,TypeLiteral<T> type){  return binder.bind(type);}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public final void skipInstruction(){  if (VM.VerifyAssertions)   VM._assert(bcIndex <= bcLength);  int len=JBC_length(opcode) - 1;  if (wide)   len+=len;  if (len >= 0) {    bcIndex+=len;  } else {    skipSpecialInstruction(opcode);  }}  }
class C{  public static double[] thresholdStringToArray(String top,int L){  if (top.startsWith("[")) {    return MLUtils.toDoubleArray(top);  } else {    double t[]=new double[L];    Arrays.fill(t,Double.parseDouble(top));    return t;  }}  }
class C{  void markAck(){  ack=true;}  }
class C{  public int treeHashCode(){  return child.rootedTreeHashCode();}  }
class C{  static <E>void writeMultiset(Multiset<E> multiset,ObjectOutputStream stream) throws IOException {  int entryCount=multiset.entrySet().size();  stream.writeInt(entryCount);  for (  Multiset.Entry<E> entry : multiset.entrySet()) {    stream.writeObject(entry.getElement());    stream.writeInt(entry.getCount());  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public SimpleConstant(String name,double doubleValue){  if (name == null) {    throw new IllegalArgumentException("name must not be null");  }  this.type=ExpressionType.DOUBLE;  this.name=name;  this.stringValue=null;  this.doubleValue=doubleValue;  this.booleanValue=false;  this.dateValue=null;}  }
class C{  private boolean checkResource(Collection<Integer> list,int id){  boolean flag=false;  if (list == null || id < 0) {    return flag;  }  Integer obj=null;  Iterator<Integer> it=list.iterator();  while (it.hasNext()) {    obj=it.next();    if (obj.intValue() == id) {      flag=true;      break;    }  }  return flag;}  }
class C{  public Float evaluate(float fraction,Number startValue,Number endValue){  float startFloat=startValue.floatValue();  return startFloat + fraction * (endValue.floatValue() - startFloat);}  }
class C{  HitAndMissDifference(long hits,long misses){  this.hitDifference=hits;  this.missDifference=misses;}  }
class C{  public void clearCustomTickLabels(){  customTickLabels.clear();  fireUpdateEvent(REDRAW_EVENT);}  }
class C{  public static double rms(int size,double sumOfSquares){  return Math.sqrt(sumOfSquares / size);}  }
class C{  protected boolean isDisplayTagAction(HttpServletRequest request){  String tableId=request.getParameter(Constants.DISPLAYTAG_TABLE_ID);  if (tableId == null || tableId.trim().length() == 0) {    return false;  }  String strOrder=request.getParameter(new ParamEncoder(tableId).encodeParameterName(TableTagParameters.PARAMETER_ORDER));  String strPage=request.getParameter(new ParamEncoder(tableId).encodeParameterName(TableTagParameters.PARAMETER_PAGE));  String strSort=request.getParameter(new ParamEncoder(tableId).encodeParameterName(TableTagParameters.PARAMETER_SORT));  return ((strOrder != null && strOrder.trim().length() > 0) || (strPage != null && strPage.trim().length() > 0) || (strSort != null && strSort.trim().length() > 0));}  }
class C{  void clear(){  offset=intLen=0;  for (int index=0, n=value.length; index < n; index++)   value[index]=0;}  }
class C{  protected Instances toInstances(List<EvaluationStatistics> stats){  Instances result;  ArrayList<Attribute> atts;  List<String> headers;  Instance inst;  double[] values;  int i;  headers=EvaluationStatisticsUtils.headers(stats,true,true);  atts=new ArrayList<>();  for (  String header : headers) {    if (header.equals(EvaluationStatistics.KEY_CLASSIFIER) || header.equals(EvaluationStatistics.KEY_RELATION))     atts.add(new Attribute(header,(List)null)); else     atts.add(new Attribute(header));  }  result=new Instances("stats",atts,stats.size());  for (  EvaluationStatistics stat : stats) {    values=new double[result.numAttributes()];    for (i=0; i < values.length; i++) {      if (headers.get(i).equals(EvaluationStatistics.KEY_CLASSIFIER))       values[i]=result.attribute(i).addStringValue(stat.getCommandLine()); else       if (headers.get(i).equals(EvaluationStatistics.KEY_RELATION))       values[i]=result.attribute(i).addStringValue(stat.getRelation()); else       if (stat.containsKey(headers.get(i)))       values[i]=stat.get(headers.get(i)).doubleValue(); else       values[i]=Utils.missingValue();    }    inst=new DenseInstance(1.0,values);    result.add(inst);  }  return result;}  }
class C{  private void selectionChanged(){  updateChosenFromSelected();  updateEditButtons();}  }
class C{  public static float roundToNextSignificant(double number){  final float d=(float)Math.ceil((float)Math.log10(number < 0 ? -number : number));  final int pw=1 - (int)d;  final float magnitude=(float)Math.pow(10,pw);  final long shifted=Math.round(number * magnitude);  return shifted / magnitude;}  }
class C{  public void testSelectManyMismatchValue() throws Exception {}  }
class C{  public static Object create(String factoryKey,Object configSource,AVList params){  if (factoryKey == null) {    String message=Logging.getMessage("generic.FactoryKeyIsNull");    throw new IllegalArgumentException(message);  }  if (WWUtil.isEmpty(configSource)) {    String message=Logging.getMessage("generic.ConfigurationSourceIsInvalid",configSource);    throw new IllegalArgumentException(message);  }  Factory factory=(Factory)WorldWind.createConfigurationComponent(factoryKey);  return factory.createFromConfigSource(configSource,params);}  }
class C{  void scale(float xf,float yf,float zf){  xx*=xf;  xy*=xf;  xz*=xf;  xo*=xf;  yx*=yf;  yy*=yf;  yz*=yf;  yo*=yf;  zx*=zf;  zy*=zf;  zz*=zf;  zo*=zf;}  }
class C{  public DoubleMatrix1D smoothGradient(DoubleMatrix1D parIn){  int n=xDat.rows();  MGMParams grad=new MGMParams();  MGMParams par=new MGMParams(parIn,p,lsum);  upperTri(par.beta,1);  par.beta.assign(alg.transpose(par.beta),Functions.plus);  for (int i=0; i < q; i++) {    par.phi.viewPart(lcumsum[i],lcumsum[i],l[i],l[i]).assign(0);  }  upperTri(par.phi,0);  par.phi.assign(alg.transpose(par.phi),Functions.plus);  DoubleMatrix2D divBetaD=factory2D.diagonal(factory1D.make(p,1.0).assign(par.betad,Functions.div));  DoubleMatrix2D xBeta=alg.mult(alg.mult(xDat,par.beta),divBetaD);  DoubleMatrix2D dTheta=alg.mult(alg.mult(dDat,par.theta),divBetaD);  DoubleMatrix2D negLoss=factory2D.make(n,xDat.columns());  DoubleMatrix2D wxProd=alg.mult(xDat,alg.transpose(par.theta));  wxProd.assign(alg.mult(dDat,par.phi),Functions.plus);  for (int i=0; i < n; i++) {    for (int j=0; j < p; j++) {      negLoss.set(i,j,xBeta.get(i,j) - xDat.get(i,j) + par.alpha1.get(j) + dTheta.get(i,j));    }    for (int j=0; j < dDat.columns(); j++) {      wxProd.set(i,j,wxProd.get(i,j) + par.alpha2.get(j));    }  }  grad.beta=alg.mult(alg.transpose(xDat),negLoss);  DoubleMatrix2D lowerBeta=alg.transpose(lowerTri(grad.beta.copy(),-1));  upperTri(grad.beta,1).assign(lowerBeta,Functions.plus);  grad.alpha1=alg.mult(factory2D.diagonal(par.betad),margSum(negLoss,1));  grad.theta=alg.mult(alg.transpose(dDat),negLoss);  for (int i=0; i < yDat.columns(); i++) {    DoubleMatrix2D wxTemp=wxProd.viewPart(0,lcumsum[i],n,l[i]);    wxTemp.assign(Functions.exp);    DoubleMatrix1D invDenom=factory1D.make(n,1.0).assign(margSum(wxTemp,2),Functions.div);    wxTemp.assign(alg.mult(factory2D.diagonal(invDenom),wxTemp));    for (int k=0; k < n; k++) {      DoubleMatrix1D curRow=wxTemp.viewRow(k);      curRow.set((int)yDat.get(k,i) - 1,curRow.get((int)yDat.get(k,i) - 1) - 1);    }  }  grad.alpha2=margSum(wxProd,1);  DoubleMatrix2D gradW=alg.mult(alg.transpose(xDat),wxProd);  grad.theta.assign(alg.transpose(gradW),Functions.plus);  grad.phi=alg.mult(alg.transpose(dDat),wxProd);  for (int i=0; i < q; i++) {    grad.phi.viewPart(lcumsum[i],lcumsum[i],l[i],l[i]).assign(0);  }  DoubleMatrix2D lowerPhi=alg.transpose(lowerTri(grad.phi.copy(),0));  upperTri(grad.phi,0).assign(lowerPhi,Functions.plus);  grad.betad=factory1D.make(xDat.columns());  for (int i=0; i < p; i++) {    grad.betad.set(i,-n / (2.0 * par.betad.get(i)) + alg.norm2(negLoss.viewColumn(i)) / 2.0 - alg.mult(negLoss.viewColumn(i),xBeta.viewColumn(i).copy().assign(dTheta.viewColumn(i),Functions.plus)));  }  grad.alpha1.assign(Functions.div((double)n));  grad.alpha2.assign(Functions.div((double)n));  grad.betad.assign(Functions.div((double)n));  grad.beta.assign(Functions.div((double)n));  grad.theta.assign(Functions.div((double)n));  grad.phi.assign(Functions.div((double)n));  return grad.toMatrix1D();}  }
class C{  public void KillRandomMonsters(final Player player,int numb){  List<String> monsters=quest.enemys.get(player.getQuest(QUEST_SLOT,1));  for (int i=0; i < numb; i++) {    if (Rand.throwCoin() == 0) {      player.setSoloKill(monsters.get(Rand.rand((monsters.size() - 1))));    } else {      player.setSharedKill(monsters.get(Rand.rand((monsters.size() - 1))));    }  }  logger.debug("killed " + numb + " creatures.");}  }
class C{  protected boolean installBinary(int sourceId,String destName,String mode){  File mf=new File(filesPath + File.separator + destName);  if (!mf.exists() || !getFileSignature(mf).equals(getStreamSignature(context.getResources().openRawResource(sourceId)))) {    Log.e(LOG_TAG,"Installing a new version of binary: " + destName);    try {      FileInputStream fis=context.openFileInput(BOGUS_FILE_NAME);      fis.close();    } catch (    FileNotFoundException e) {      FileOutputStream fos=null;      try {        fos=context.openFileOutput("bogus",Context.MODE_PRIVATE);        fos.write("justcreatedfilesdirectory".getBytes());      } catch (      Exception ex) {        if (RootTools.debugMode) {          Log.e(LOG_TAG,ex.toString());        }        return false;      } finally {        if (null != fos) {          try {            fos.close();            context.deleteFile(BOGUS_FILE_NAME);          } catch (          IOException e1) {          }        }      }    }catch (    IOException ex) {      if (RootTools.debugMode) {        Log.e(LOG_TAG,ex.toString());      }      return false;    }    InputStream iss=context.getResources().openRawResource(sourceId);    ReadableByteChannel rfc=Channels.newChannel(iss);    FileOutputStream oss=null;    try {      oss=new FileOutputStream(mf);      FileChannel ofc=oss.getChannel();      long pos=0;      try {        long size=iss.available();        while ((pos+=ofc.transferFrom(rfc,pos,size - pos)) < size) {          ;        }      } catch (      IOException ex) {        if (RootTools.debugMode) {          Log.e(LOG_TAG,ex.toString());        }        return false;      }    } catch (    FileNotFoundException ex) {      if (RootTools.debugMode) {        Log.e(LOG_TAG,ex.toString());      }      return false;    } finally {      if (oss != null) {        try {          oss.flush();          oss.getFD().sync();          oss.close();        } catch (        Exception e) {        }      }    }    try {      iss.close();    } catch (    IOException ex) {      if (RootTools.debugMode) {        Log.e(LOG_TAG,ex.toString());      }      return false;    }    try {      CommandCapture command=new CommandCapture(0,false,"chmod " + mode + " "+ filesPath+ File.separator+ destName);      Shell.startRootShell().add(command);      commandWait(command);    } catch (    Exception e) {    }  }  return true;}  }
class C{  public static CommandResult execCommand(List<String> commands,boolean isRoot,boolean isNeedResultMsg){  return execCommand(commands == null ? null : commands.toArray(new String[]{}),isRoot,isNeedResultMsg);}  }
class C{  public synchronized void allowThreadDecoding(ThreadSet threads){  for (  Thread t : threads) {    allowThreadDecoding(t);  }}  }
class C{  private void prepareMarkerForDisplay(Waypoint waypoint,Map<String,Object> resultMap){  String trackName=null;  long trackId=waypoint.getTrackId();  if (trackId != -1L) {    Track track=myTracksProviderUtils.getTrack(trackId);    if (track != null) {      trackName=track.getName();    }  }  boolean statistics=waypoint.getType() == WaypointType.STATISTICS;  resultMap.put(IS_RECORDING_FIELD,false);  resultMap.put(IS_PAUSED_FIELD,true);  resultMap.put(ICON_ID_FIELD,statistics ? R.drawable.ic_marker_yellow_pushpin : R.drawable.ic_marker_blue_pushpin);  resultMap.put(ICON_CONTENT_DESCRIPTION_ID_FIELD,R.string.image_marker);  resultMap.put(NAME_FIELD,waypoint.getName());  resultMap.put(SHARED_OWNER_FIELD,null);  resultMap.put(TOTAL_TIME_FIELD,trackName == null ? null : getString(R.string.search_list_marker_track_location,trackName));  resultMap.put(TOTAL_DISTANCE_FIELD,null);  resultMap.put(MARKER_COUNT_FIELD,0);  resultMap.put(START_TIME_FIELD,waypoint.getLocation().getTime());  resultMap.put(CATEGORY_FIELD,statistics ? null : waypoint.getCategory());  resultMap.put(DESCRIPTION_FIELD,statistics ? null : waypoint.getDescription());  resultMap.put(PHOTO_URL_FIELD,waypoint.getPhotoUrl());  resultMap.put(TRACK_ID_FIELD,waypoint.getTrackId());  resultMap.put(MARKER_ID_FIELD,waypoint.getId());}  }
class C{  public String buildBoundaryComment(String boundaryType,String widgetType,String widgetName){  return formatBoundaryComment(boundaryType,widgetType,widgetName);}  }
class C{  public void testFloatValueBug2482(){  String a="2147483649";  float result=2.14748365E9f;  float aNumber=new BigInteger(a).floatValue();  assertTrue(aNumber == result);}  }
class C{  public String toHostString(){  CharArrayBuffer buffer=new CharArrayBuffer(32);  buffer.append(this.hostname);  if (this.port != -1) {    buffer.append(':');    buffer.append(Integer.toString(this.port));  }  return buffer.toString();}  }
class C{  public boolean complete(){  if (!super.complete())   return false;  boolean ok=false;  if (m_server != null && m_server.isAlive()) {    try {      m_server.interrupt();      m_server.join();      ok=true;    } catch (    Exception e) {      return abort();    }  }  log.info("complete - " + ok);  return ok;}  }
class C{  public XMLDecoder(InputStream in){  this(in,null);}  }
class C{  private void doFormLogin(FormAuthInfo authInfo){  logger.info("FORM authentication for: " + authInfo.getLoginTarget());  String fullUri=authInfo.getProtocol() + "://" + authInfo.getHost()+ ":"+ authInfo.getPort()+ authInfo.getLoginTarget();  HttpPost httpPost=new HttpPost(fullUri);  List<NameValuePair> formParams=new ArrayList<>();  formParams.add(new BasicNameValuePair(authInfo.getUsernameFormStr(),authInfo.getUsername()));  formParams.add(new BasicNameValuePair(authInfo.getPasswordFormStr(),authInfo.getPassword()));  try {    UrlEncodedFormEntity entity=new UrlEncodedFormEntity(formParams,"UTF-8");    httpPost.setEntity(entity);    httpClient.execute(httpPost);    logger.debug("Successfully Logged in with user: " + authInfo.getUsername() + " to: "+ authInfo.getHost());  } catch (  UnsupportedEncodingException e) {    logger.error("Encountered a non supported encoding while trying to login to: " + authInfo.getHost(),e);  }catch (  ClientProtocolException e) {    logger.error("While trying to login to: " + authInfo.getHost() + " - Client protocol not supported",e);  }catch (  IOException e) {    logger.error("While trying to login to: " + authInfo.getHost() + " - Error making request",e);  }}  }
class C{  private static void testFile(File dir,String filename,int incDepth) throws IOException {  System.out.println("Checking file: " + filename);  Reader r=new BufferedReader(new FileReader(new File(dir,filename)));  StreamTokenizer st=new StreamTokenizer(r);  st.eolIsSignificant(true);  st.commentChar('#');  st.quoteChar('"');  st.wordChars('_','_');  @SuppressWarnings("unused") int bases, supers, orthos;  bases=supers=orthos=0;  while (st.nextToken() != StreamTokenizer.TT_EOF) {    @SuppressWarnings("unused") int elevation=0;    String terrain=null;    String theme=null;    String imageName=null;    if ((st.ttype == StreamTokenizer.TT_WORD) && (st.sval.equals("base") || st.sval.equals("super") || st.sval.equals("ortho"))) {      boolean bas=st.sval.equals("base");      boolean sup=st.sval.equals("super");      boolean ort=st.sval.equals("ortho");      if (st.nextToken() == StreamTokenizer.TT_NUMBER) {        elevation=(int)st.nval;      } else {        elevation=ITerrain.WILDCARD;      }      st.nextToken();      terrain=st.sval;      st.nextToken();      theme=st.sval;      st.nextToken();      imageName=st.sval;      if (bas) {        bases++;      }      if (sup) {        supers++;      }      if (ort) {        orthos++;      }      Vector<String> filenames=StringUtil.splitString(imageName,";");      for (      String entryFile : filenames) {        String entryName;        if ((theme == null) || theme.equals("")) {          entryName=terrain;        } else {          entryName=terrain + " " + theme;        }        testImageName(dir,entryFile,entryName);      }    } else     if ((st.ttype == StreamTokenizer.TT_WORD) && st.sval.equals("include")) {      st.nextToken();      incDepth++;      if (incDepth < 100) {        String incFile=st.sval;        testFile(dir,incFile,incDepth);      }    }  }  r.close();  System.out.println("\n");  incDepth--;}  }
class C{  public DestinationWrapper<Queue> lookupQueue(String uri,Session session) throws JMSException, NamingException {  if (usingJNDI) {    return lookupQueueFromJNDI(uri);  } else {    return new DestinationWrapper<Queue>(uri,session.createQueue(uri));  }}  }
class C{  static public String localDateToString(LocalDate date,String emptyDateString){  return (date == null) ? emptyDateString : date.toString();}  }
class C{  public static SplittedExampleSet splitByAttribute(ExampleSet exampleSet,Attribute attribute,double value){  int[] elements=new int[exampleSet.size()];  Iterator<Example> reader=exampleSet.iterator();  int i=0;  while (reader.hasNext()) {    Example example=reader.next();    double currentValue=example.getValue(attribute);    if (Tools.isLessEqual(currentValue,value)) {      elements[i++]=0;    } else {      elements[i++]=1;    }  }  Partition partition=new Partition(elements,2);  return new SplittedExampleSet(exampleSet,partition);}  }
class C{  public static void logArticleProcessed(final Logger logger,final Task<Revision> article,long time,long transmittingTime){  logger.logMessage(Level.INFO,"Generated Diff\t" + Time.toClock(time) + "\t"+ Time.toClock(transmittingTime)+ "\t"+ article.toString());}  }
class C{  public boolean isSelected(){  return model.isSelected();}  }
class C{  public ClassNotFoundException(String s,Throwable ex){  super(s,null);  this.ex=ex;}  }
class C{  public long logTerm(){  return logTerm;}  }
class C{  public LinkedHashMap(Map<? extends K,? extends V> m){  super();  accessOrder=false;  putMapEntries(m,false);}  }
class C{  public static NeuronGroupPanel createNeuronGroupPanel(final NetworkPanel np,final Window parent){  NeuronGroupPanel ngp=new NeuronGroupPanel(np,parent);  ngp.initializeLayout();  ngp.addListeners();  return ngp;}  }
class C{  public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj instanceof GeneralNames == false) {    return false;  }  GeneralNames other=(GeneralNames)obj;  return this.names.equals(other.names);}  }
class C{  public void recruitPlayersFreshman(int qbNeeds,int rbNeeds,int wrNeeds,int kNeeds,int olNeeds,int sNeeds,int cbNeeds,int f7Needs){  int stars=teamPrestige / 20 + 1;  int chance=20 - (teamPrestige - 20 * (teamPrestige / 20));  double starsBonusChance=0.15;  double starsBonusDoubleChance=0.05;  for (int i=0; i < qbNeeds; ++i) {    stars=teamPrestige / 20 + 1;    if (100 * Math.random() < 5 * chance)     stars=stars - 1;    if (Math.random() < starsBonusChance)     stars=stars + 1; else     if (Math.random() < starsBonusDoubleChance)     stars=stars + 2;    if (stars > 5)     stars=5;    teamQBs.add(new PlayerQB(league.getRandName(),1,stars,this));  }  for (int i=0; i < kNeeds; ++i) {    stars=teamPrestige / 20 + 1;    if (100 * Math.random() < 5 * chance)     stars=stars - 1;    if (Math.random() < starsBonusChance)     stars=stars + 1; else     if (Math.random() < starsBonusDoubleChance)     stars=stars + 2;    if (stars > 5)     stars=5;    teamKs.add(new PlayerK(league.getRandName(),1,stars,this));  }  for (int i=0; i < rbNeeds; ++i) {    stars=teamPrestige / 20 + 1;    if (100 * Math.random() < 5 * chance)     stars=stars - 1;    if (Math.random() < starsBonusChance)     stars=stars + 1; else     if (Math.random() < starsBonusDoubleChance)     stars=stars + 2;    if (stars > 5)     stars=5;    teamRBs.add(new PlayerRB(league.getRandName(),1,stars,this));  }  for (int i=0; i < wrNeeds; ++i) {    stars=teamPrestige / 20 + 1;    if (100 * Math.random() < 5 * chance)     stars=stars - 1;    if (Math.random() < starsBonusChance)     stars=stars + 1; else     if (Math.random() < starsBonusDoubleChance)     stars=stars + 2;    if (stars > 5)     stars=5;    teamWRs.add(new PlayerWR(league.getRandName(),1,stars,this));  }  for (int i=0; i < olNeeds; ++i) {    stars=teamPrestige / 20 + 1;    if (100 * Math.random() < 5 * chance)     stars=stars - 1;    if (Math.random() < starsBonusChance)     stars=stars + 1; else     if (Math.random() < starsBonusDoubleChance)     stars=stars + 2;    if (stars > 5)     stars=5;    teamOLs.add(new PlayerOL(league.getRandName(),1,stars,this));  }  for (int i=0; i < cbNeeds; ++i) {    stars=teamPrestige / 20 + 1;    if (100 * Math.random() < 5 * chance)     stars=stars - 1;    if (Math.random() < starsBonusChance)     stars=stars + 1; else     if (Math.random() < starsBonusDoubleChance)     stars=stars + 2;    if (stars > 5)     stars=5;    teamCBs.add(new PlayerCB(league.getRandName(),1,stars,this));  }  for (int i=0; i < f7Needs; ++i) {    stars=teamPrestige / 20 + 1;    if (100 * Math.random() < 5 * chance)     stars=stars - 1;    if (Math.random() < starsBonusChance)     stars=stars + 1; else     if (Math.random() < starsBonusDoubleChance)     stars=stars + 2;    if (stars > 5)     stars=5;    teamF7s.add(new PlayerF7(league.getRandName(),1,stars,this));  }  for (int i=0; i < sNeeds; ++i) {    stars=teamPrestige / 20 + 1;    if (100 * Math.random() < 5 * chance)     stars=stars - 1;    if (Math.random() < starsBonusChance)     stars=stars + 1; else     if (Math.random() < starsBonusDoubleChance)     stars=stars + 2;    if (stars > 5)     stars=5;    teamSs.add(new PlayerS(league.getRandName(),1,stars,this));  }  sortPlayers();}  }
class C{  public Matrix4x3f arcball(float radius,Vector3fc center,float angleX,float angleY){  return arcball(radius,center.x(),center.y(),center.z(),angleX,angleY,this);}  }
class C{  private Logical(){}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_CONSTRAINT_BODY_1__LINKING_OP_1:    return linkingOp_1 != null && !linkingOp_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  protected void skipRemainingTagsInCurrentIfd() throws IOException, ExifInvalidFormatException {  int endOfTags=mIfdStartOffset + OFFSET_SIZE + TAG_SIZE * mNumOfTagInIfd;  int offset=mTiffStream.getReadByteCount();  if (offset > endOfTags) {    return;  }  if (mNeedToParseOffsetsInCurrentIfd) {    while (offset < endOfTags) {      mTag=readTag();      offset+=TAG_SIZE;      if (mTag == null) {        continue;      }      checkOffsetOrImageTag(mTag);    }  } else {    skipTo(endOfTags);  }  long ifdOffset=readUnsignedLong();  if (mIfdType == IfdId.TYPE_IFD_0 && (isIfdRequested(IfdId.TYPE_IFD_1) || isThumbnailRequested())) {    if (ifdOffset > 0) {      registerIfd(IfdId.TYPE_IFD_1,ifdOffset);    }  }}  }
class C{  private Type(final int sort,final char[] buf,final int off,final int len){  this.sort=sort;  this.buf=buf;  this.off=off;  this.len=len;}  }
class C{  public static void send(InternalDistributedMember recipient,int processorId,RawValue val,ReplySender replySender,VersionTag versionTag) throws ForceReattemptException {  Assert.assertTrue(recipient != null,"PRDistribuedGetReplyMessage NULL reply message");  GetReplyMessage m=new GetReplyMessage(processorId,val,versionTag);  m.setRecipient(recipient);  replySender.putOutgoing(m);}  }
class C{  public Point2D magnify(Point2D graphPoint){  if (graphPoint == null)   return null;  Point2D viewCenter=getViewCenter();  double ratio=getRatio();  Point2D viewPoint=graphPoint;  double dx=viewPoint.getX() - viewCenter.getX();  double dy=viewPoint.getY() - viewCenter.getY();  dx*=ratio;  Point2D pointFromCenter=new Point2D.Double(dx,dy);  PolarPoint polar=PolarPoint.cartesianToPolar(pointFromCenter);  double theta=polar.getTheta();  double radius=polar.getRadius();  double mag=magnification;  radius*=mag;  Point2D projectedPoint=PolarPoint.polarToCartesian(theta,radius);  projectedPoint.setLocation(projectedPoint.getX() / ratio,projectedPoint.getY());  Point2D translatedBack=new Point2D.Double(projectedPoint.getX() + viewCenter.getX(),projectedPoint.getY() + viewCenter.getY());  return translatedBack;}  }
class C{  public MaterialRange(Integer min,Integer max,Integer value){  this();  setMin(min);  setMax(max);  setValue(value);}  }
class C{  public void createPictScenario04_1() throws Exception {  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-02-28 00:00:00"));  String supplierAdminId="Pict04_1Supplier";  VOOrganization supplier=orgSetup.createOrganization(basicSetup.getPlatformOperatorUserKey(),supplierAdminId,"Pict04_1SupplierOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_DE,OrganizationRoleType.TECHNOLOGY_PROVIDER,OrganizationRoleType.SUPPLIER);  VOUser supplierAdmin=orgSetup.getUser(supplierAdminId,true);  paymentSetup.createPaymentForSupplier(basicSetup.getPlatformOperatorUserKey(),supplierAdmin.getKey(),supplier);  setCutOffDay(supplierAdmin.getKey(),1);  String customerAdminId="Pict04_1DiscountedCustomer";  VOOrganization customer=orgSetup.registerCustomer("Pict04_1DiscountedCustomerOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_UK,customerAdminId,supplierMarketplace.getMarketplaceId(),supplier.getOrganizationId());  VOUser customerAdmin=orgSetup.getUser(customerAdminId,true);  orgSetup.updateCustomerDiscount(customer,new BigDecimal("10.00"),DateTimeHandling.calculateMillis("2013-03-04 00:00:00"),DateTimeHandling.calculateMillis("2013-03-16 23:59:59"));  orgSetup.saveAllVats(supplierAdmin.getKey(),VOVatRateFactory.newVOVatRate(new BigDecimal("13.00")),Arrays.asList(VOVatRateFactory.newVOCountryVatRate(new BigDecimal("20.00"),TestOrganizationSetup.ORGANIZATION_DOMICILE_UK),VOVatRateFactory.newVOCountryVatRate(new BigDecimal("19.00"),TestOrganizationSetup.ORGANIZATION_DOMICILE_DE)),Arrays.asList(VOVatRateFactory.newVOOrganizationVatRate(new BigDecimal("17.00"),customer)));  orgSetup.createMarketingPermission(basicSetup.getSupplierAdminKey(),supplier.getOrganizationId(),technicalServiceAsync);  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(supplierAdmin.getKey(),"PICT_TEST_04_1",TestService.EXAMPLE_ASYNC,TestPriceModel.EXAMPLE_PICT04_PERUNIT_DAY,technicalServiceAsync,supplierMarketplace);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"GUEST");  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService(customerAdmin.getKey(),"PICT_TEST_04_1",serviceDetails,customerAdmin,role);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-01 00:00:00"));  subDetails=subscrSetup.completeAsyncSubscription(basicSetup.getSupplierAdminKey(),customerAdmin,subDetails);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-05 00:00:00"));  subDetails=subscrSetup.modifyUserRole(subDetails.getUsageLicenses().get(0),VOServiceFactory.getRole(serviceDetails,"USER"),subDetails.getSubscriptionId());  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-03-05 12:00:00"),"PERIOD",DateTimeHandling.daysToMillis(100) + "");  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-06 00:00:00"));  subDetails=subscrSetup.completeAsyncModifySubscription(basicSetup.getSupplierAdminKey(),customerAdmin,subDetails);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-07 06:00:00"));  VOPriceModel newSubPriceModel=VOPriceModelFactory.modifyPriceModel(subDetails.getPriceModel(),PriceModelType.PER_UNIT,PricingPeriod.DAY,"EUR",new BigDecimal("0.00"),new BigDecimal("7.00"),new BigDecimal("8.00"),4);  subscrSetup.savePriceModelForSubscription(supplierAdmin.getKey(),subDetails,newSubPriceModel,customer);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-07 12:00:00"));  paymentSetup.deleteCustomerPaymentTypes(customer);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-08 18:00:00"));  paymentSetup.reassignCustomerPaymentTypes(customer);  subDetails=subscrSetup.getSubscriptionDetails(customerAdmin.getKey(),subDetails.getSubscriptionId());  subscrSetup.recordEventForSubscription(basicSetup.getSupplierAdminKey(),subDetails,DateTimeHandling.calculateMillis("2013-03-09 12:00:00"),"FILE_DOWNLOAD",15);  subscrSetup.recordEventForSubscription(basicSetup.getSupplierAdminKey(),subDetails,DateTimeHandling.calculateMillis("2013-03-09 18:00:00"),"FILE_UPLOAD",3);  VOServiceDetails freeService=serviceSetup.createPublishAndActivateMarketableService(supplierAdmin.getKey(),"PICT04_1_FREE_SERVICE",TestService.EXAMPLE_ASYNC,TestPriceModel.FREE,technicalServiceAsync,supplierMarketplace);  serviceSetup.registerCompatibleServices(supplierAdmin.getKey(),serviceDetails,freeService);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-10 00:00:00"));  VOSubscriptionDetails upgradedSubDetails=subscrSetup.upgradeSubscription(customerAdmin.getKey(),subDetails,freeService);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-11 00:00:00"));  upgradedSubDetails=subscrSetup.completeAsyncUpgradeSubscription(basicSetup.getSupplierAdminKey(),customerAdmin,upgradedSubDetails);  upgradedSubDetails=subscrSetup.modifyParameterForSubscription(upgradedSubDetails,DateTimeHandling.calculateMillis("2013-03-11 12:00:00"),"PERIOD",DateTimeHandling.daysToMillis(110) + "");  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-12 00:00:00"));  upgradedSubDetails=subscrSetup.completeAsyncModifySubscription(basicSetup.getSupplierAdminKey(),customerAdmin,upgradedSubDetails);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-13 00:00:00"));  VOSubscriptionDetails upgradedSubDetailsOld=upgradedSubDetails;  upgradedSubDetails.setSubscriptionId("PICT_TEST_04_1" + "_SubID2");  upgradedSubDetails=subscrSetup.modifySubscription(upgradedSubDetails,null);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-14 00:00:00"));  upgradedSubDetails=subscrSetup.completeAsyncModifySubscription(basicSetup.getSupplierAdminKey(),customerAdmin,upgradedSubDetailsOld);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-15 12:00:00"));  upgradedSubDetails=subscrSetup.revokeUser(customerAdmin,upgradedSubDetails.getSubscriptionId());  VOServiceDetails proRataService=serviceSetup.createPublishAndActivateMarketableService(supplierAdmin.getKey(),"PICT04_1_PRORATA_SERVICE",TestService.EXAMPLE_ASYNC,TestPriceModel.EXAMPLE_PRORATA_MONTH_ROLES,technicalServiceAsync,supplierMarketplace);  serviceSetup.registerCompatibleServices(supplierAdmin.getKey(),freeService,proRataService);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-16 00:00:00"));  VOSubscriptionDetails upgradedSubDetails2=subscrSetup.upgradeSubscription(customerAdmin.getKey(),upgradedSubDetails,proRataService);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-17 00:00:00"));  upgradedSubDetails2=subscrSetup.completeAsyncUpgradeSubscription(basicSetup.getSupplierAdminKey(),customerAdmin,upgradedSubDetails2);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-18 12:00:00"));  upgradedSubDetails2=subscrSetup.addUser(customerAdmin,VOServiceFactory.getRole(serviceDetails,"USER"),upgradedSubDetails2.getSubscriptionId());  upgradedSubDetails2=subscrSetup.modifyParameterForSubscription(upgradedSubDetails2,DateTimeHandling.calculateMillis("2013-03-23 00:00:00"),"PERIOD",DateTimeHandling.daysToMillis(90) + "");  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-24 00:00:00"));  upgradedSubDetails2=subscrSetup.completeAsyncModifySubscription(basicSetup.getSupplierAdminKey(),customerAdmin,upgradedSubDetails2);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-28 12:00:00"));  upgradedSubDetails2=subscrSetup.modifyUserRole(upgradedSubDetails2.getUsageLicenses().get(0),VOServiceFactory.getRole(proRataService,"ADMIN"),upgradedSubDetails2.getSubscriptionId());  resetCutOffDay(supplierAdmin.getKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_04_1",subDetails);  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_04_1",upgradedSubDetails);  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_04_1",upgradedSubDetails2);  BillingIntegrationTestBase.updateCustomerListForTests("PICT_TEST_04_1",customer);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:50.992 -0500",hash_original_method="0DEFD663D479F88E7A114CE703AF8835",hash_generated_method="468767B16106E3DDBED1803029F31BE7") public String comment() throws ParseException {  StringBuffer retval=new StringBuffer();  if (lookAhead(0) != '(')   return null;  consume(1);  while (true) {    char next=getNextChar();    if (next == ')') {      break;    } else     if (next == '\0') {      throw new ParseException(this.buffer + " :unexpected EOL",this.ptr);    } else     if (next == '\\') {      retval.append(next);      next=getNextChar();      if (next == '\0')       throw new ParseException(this.buffer + " : unexpected EOL",this.ptr);      retval.append(next);    } else {      retval.append(next);    }  }  return retval.toString();}  }
class C{  private void loadPlacements(){  System.out.println("Load a placement file");  final String placeName=new FileOpen("Load A Placement File",s_mapFolderLocation,".txt").getPathString();  try {    if (placeName == null) {      return;    }    final FileInputStream in=new FileInputStream(placeName);    m_placements=PointFileReaderWriter.readOneToMany(in);    repaint();  } catch (  final HeadlessException|IOException ex) {    ClientLogger.logQuietly(ex);  }}  }
class C{  public void testReceiveBrowseReceive() throws Exception {  Session session=connection.createSession(false,Session.AUTO_ACKNOWLEDGE);  ActiveMQQueue destination=new ActiveMQQueue("TEST");  MessageProducer producer=session.createProducer(destination);  MessageConsumer consumer=session.createConsumer(destination);  connection.start();  Message[] outbound=new Message[]{session.createTextMessage("First Message"),session.createTextMessage("Second Message"),session.createTextMessage("Third Message")};  while (consumer.receive(1000) != null) {  }  producer.send(outbound[0]);  producer.send(outbound[1]);  producer.send(outbound[2]);  assertEquals(outbound[0],consumer.receive(1000));  consumer.close();  QueueBrowser browser=session.createBrowser(destination);  Enumeration<?> enumeration=browser.getEnumeration();  assertTrue("should have received the second message",enumeration.hasMoreElements());  assertEquals(outbound[1],enumeration.nextElement());  assertTrue("Should have received the third message",enumeration.hasMoreElements());  assertEquals(outbound[2],enumeration.nextElement());  boolean tooMany=false;  while (enumeration.hasMoreElements()) {    LOG.info("Got extra message: " + ((TextMessage)enumeration.nextElement()).getText());    tooMany=true;  }  assertFalse(tooMany);  browser.close();  consumer=session.createConsumer(destination);  assertEquals(outbound[1],consumer.receive(1000));  assertEquals(outbound[2],consumer.receive(1000));  consumer.close();}  }
class C{  public static void resetNPC(final String npcName){  final SpeakerNPC npc=SingletonRepository.getNPCList().get(npcName);  if (npc != null) {    npc.setCurrentState(ConversationStates.IDLE);  }}  }
class C{  @Override public boolean equals(Object object){  return object == null || object == this;}  }
class C{  @Override public void sendPacket(byte[] packet,int repeats){  if (repeats != 1) {    log.warn("Only single transmissions currently available");  }  CanMessage m=new CanMessage(2 + packet.length,tc.getCanid());  int j=0;  m.setElement(0,CbusConstants.CBUS_RDCC3 + (((packet.length - 3) & 0x3) << 5));  m.setElement(1,1);  for (j=0; j < packet.length; j++) {    m.setElement(j + 2,packet[j] & 0xFF);  }  tc.sendCanMessage(m,null);}  }
class C{  public static double blackFormulaImpliedStdDevApproximation(final PlainVanillaPayoff payoff,@Real final double strike,@Real final double forward,@Real final double blackPrice,@DiscountFactor final double discount){  return blackFormulaImpliedStdDevApproximation(payoff,strike,forward,blackPrice,discount,0.0);}  }
class C{  public void applyDataSettings(PieData data){  data.setDrawValues(true);}  }
class C{  @Override public void drawBackground(Graphics2D g2,Rectangle2D area){  fillBackground(g2,area,this.orientation);  drawBackgroundImage(g2,area);}  }
class C{  private static String codegenCompiledLocales(String[] locales){  StringJoiner.ItemStringer itemStringer=new StringJoiner.ItemQuoter();  return "[ " + StringJoiner.join(locales,", ",itemStringer) + " ]";}  }
class C{  public TungstenProperties createDoubleQueueWithFilter(int queueSize,int blockSize,long skipSeqnoStart,long skipSeqnoRange,boolean skipSeqnoMultiple) throws Exception {  PipelineConfigBuilder builder=new PipelineConfigBuilder();  builder.setProperty(ReplicatorConf.SERVICE_NAME,"test");  builder.setRole("master");  builder.addPipeline("master","stage","q1,q2");  builder.addStage("stage","q-extract","q-apply","sample-filter");  builder.addProperty("stage","stage","blockCommitRowCount",new Integer(blockSize).toString());  builder.addComponent("extractor","q-extract",InMemoryQueueAdapter.class);  builder.addProperty("extractor","q-extract","storeName","q1");  builder.addComponent("applier","q-apply",InMemoryQueueAdapter.class);  builder.addProperty("applier","q-apply","storeName","q2");  builder.addComponent("store","q1",InMemoryQueueStore.class);  builder.addProperty("store","q1","maxSize",new Integer(queueSize).toString());  builder.addComponent("store","q2",InMemoryQueueStore.class);  builder.addProperty("store","q2","maxSize",new Integer(queueSize).toString());  builder.addComponent("filter","sample-filter",SampleFilter.class);  builder.addProperty("filter","sample-filter","skipSeqnoStart",new Long(skipSeqnoStart).toString());  builder.addProperty("filter","sample-filter","skipSeqnoRange",new Long(skipSeqnoRange).toString());  builder.addProperty("filter","sample-filter","skipSeqnoMultiple",new Boolean(skipSeqnoMultiple).toString());  return builder.getConfig();}  }
class C{  public boolean isPreallocate(){  return preallocate;}  }
class C{  public void abortInternal() throws SQLException {  if (this.io != null) {    try {      this.io.forceClose();      this.io.releaseResources();    } catch (    Throwable t) {    }    this.io=null;  }  this.isClosed=true;}  }
class C{  void queueIsEmpty(){  for (Node p=head; p != null; p=p.next) {    Itr it=p.get();    if (it != null) {      p.clear();      it.shutdown();    }  }  head=null;  itrs=null;}  }
class C{  public static void resetProperState(){  getStrategy().resetProperState();}  }
class C{  public XCalDocument(Document document){  this.document=document;  XPath xpath=XPathFactory.newInstance().newXPath();  xpath.setNamespaceContext(nsContext);  try {    String prefix=nsContext.getPrefix();    icalendarRootElement=(Element)xpath.evaluate("//" + prefix + ":"+ ICALENDAR.getLocalPart(),document,XPathConstants.NODE);  } catch (  XPathExpressionException e) {  }}  }
class C{  public int removeIsolatedNodes(){  Set<BytecodeInstruction> candidates=determineEntryPoints();  int removed=0;  if (candidates.size() > 1) {    for (    BytecodeInstruction instruction : candidates) {      if (outDegreeOf(instruction) == 0) {        if (graph.removeVertex(instruction)) {          removed++;          BytecodeInstructionPool.getInstance(classLoader).forgetInstruction(instruction);        }      }    }  }  return removed;}  }
class C{  public boolean hasPath(){  return fieldSetFlags()[3];}  }
class C{  @Override public synchronized void initialize(){  if (!mRootDirectory.exists()) {    if (!mRootDirectory.mkdirs()) {      VolleyLog.e("Unable to create cache dir %s",mRootDirectory.getAbsolutePath());    }    return;  }  File[] files=mRootDirectory.listFiles();  if (files == null) {    return;  }  for (  File file : files) {    BufferedInputStream fis=null;    try {      fis=new BufferedInputStream(new FileInputStream(file));      CacheHeader entry=CacheHeader.readHeader(fis);      entry.size=file.length();      putEntry(entry.key,entry);    } catch (    IOException e) {      if (file != null) {        file.delete();      }    } finally {      try {        if (fis != null) {          fis.close();        }      } catch (      IOException ignored) {      }    }  }}  }
class C{  public StringBuffer[] toSource(String className) throws Exception {  StringBuffer[] result=new StringBuffer[2];  if (m_isLeaf) {    result[0]=new StringBuffer("    p = " + m_localModel.distribution().maxClass(0) + ";\n");    result[1]=new StringBuffer("");  } else {    StringBuffer text=new StringBuffer();    StringBuffer atEnd=new StringBuffer();    long printID=ClassifierTree.nextID();    text.append("  static double N").append(Integer.toHexString(m_localModel.hashCode()) + printID).append("(Object []i) {\n").append("    double p = Double.NaN;\n");    text.append("    if (").append(m_localModel.sourceExpression(-1,m_train)).append(") {\n");    text.append("      p = ").append(m_localModel.distribution().maxClass(0)).append(";\n");    text.append("    } ");    for (int i=0; i < m_sons.length; i++) {      text.append("else if (" + m_localModel.sourceExpression(i,m_train) + ") {\n");      if (m_sons[i].m_isLeaf) {        text.append("      p = " + m_localModel.distribution().maxClass(i) + ";\n");      } else {        StringBuffer[] sub=m_sons[i].toSource(className);        text.append(sub[0]);        atEnd.append(sub[1]);      }      text.append("    } ");      if (i == m_sons.length - 1) {        text.append('\n');      }    }    text.append("    return p;\n  }\n");    result[0]=new StringBuffer("    p = " + className + ".N");    result[0].append(Integer.toHexString(m_localModel.hashCode()) + printID).append("(i);\n");    result[1]=text.append(atEnd);  }  return result;}  }
class C{  public int warningCount(){  if (delegateCompiler != null && delegateCompiler != this)   return delegateCompiler.warningCount(); else   return log.nwarnings;}  }
class C{  public static String stringFor(int n){switch (n) {case CU_FUNC_ATTRIBUTE_MAX_THREADS_PER_BLOCK:    return "CU_FUNC_ATTRIBUTE_MAX_THREADS_PER_BLOCK";case CU_FUNC_ATTRIBUTE_SHARED_SIZE_BYTES:  return "CU_FUNC_ATTRIBUTE_SHARED_SIZE_BYTES";case CU_FUNC_ATTRIBUTE_CONST_SIZE_BYTES:return "CU_FUNC_ATTRIBUTE_CONST_SIZE_BYTES";case CU_FUNC_ATTRIBUTE_LOCAL_SIZE_BYTES:return "CU_FUNC_ATTRIBUTE_LOCAL_SIZE_BYTES";case CU_FUNC_ATTRIBUTE_NUM_REGS:return "CU_FUNC_ATTRIBUTE_NUM_REGS";case CU_FUNC_ATTRIBUTE_PTX_VERSION:return "CU_FUNC_ATTRIBUTE_PTX_VERSION";case CU_FUNC_ATTRIBUTE_BINARY_VERSION:return "CU_FUNC_ATTRIBUTE_BINARY_VERSION";case CU_FUNC_ATTRIBUTE_CACHE_MODE_CA:return "CU_FUNC_ATTRIBUTE_CACHE_MODE_CA";}return "INVALID CUfunction_attribute: " + n;}  }
class C{  public MediaSyncEvent(String syncType,Bundle syncExtras,int status){  this(syncType,syncExtras,status,-1,null);  if (status != STATUS_SUCCESS)   throw new IllegalArgumentException("This MediaSyncEvent constructor should only be " + "called with a successful status.");}  }
class C{  public synchronized void engineDeleteEntry(String alias) throws KeyStoreException {  if (debug != null) {    debug.println("Removing entry at alias '" + alias + "'");  }  Entry entry=entries.get(alias.toLowerCase(Locale.ENGLISH));  if (entry instanceof PrivateKeyEntry) {    PrivateKeyEntry keyEntry=(PrivateKeyEntry)entry;    if (keyEntry.chain != null) {      certificateCount-=keyEntry.chain.length;    }    privateKeyCount--;  } else   if (entry instanceof CertEntry) {    certificateCount--;  } else   if (entry instanceof SecretKeyEntry) {    secretKeyCount--;  }  entries.remove(alias.toLowerCase(Locale.ENGLISH));}  }
class C{  public int[] lookupSchema(String[] names,boolean mustExist) throws FormatException {  int retval[]=new int[names.length];  for (int i=0; i < retval.length; i++) {    retval[i]=whatColumn(names[i]);    if ((retval[i] == -1) && mustExist) {      throw new FormatException("Column " + names[i] + " doesn't exist");    }  }  return retval;}  }
class C{  public NestableDelegate(Nestable nestable){  if (nestable instanceof Throwable) {    this.nestable=(Throwable)nestable;  } else {    throw new IllegalArgumentException(MUST_BE_THROWABLE);  }}  }
class C{  @SuppressFBWarnings("NP_BOOLEAN_RETURN_NULL") public static Boolean dispatchKeyEvent(KeyEvent event,ChromeActivity activity,boolean uiInitialized){  int keyCode=event.getKeyCode();  if (!uiInitialized) {    if (keyCode == KeyEvent.KEYCODE_SEARCH || keyCode == KeyEvent.KEYCODE_MENU)     return true;    return null;  }switch (keyCode) {case KeyEvent.KEYCODE_SEARCH:    if (event.getAction() == KeyEvent.ACTION_DOWN && event.getRepeatCount() == 0) {      activity.onMenuOrKeyboardAction(R.id.focus_url_bar,false);    }  return true;case KeyEvent.KEYCODE_MENU:if (event.getAction() == KeyEvent.ACTION_DOWN && event.getRepeatCount() == 0) {  activity.onMenuOrKeyboardAction(R.id.show_menu,false);}return true;case KeyEvent.KEYCODE_TV:case KeyEvent.KEYCODE_GUIDE:case KeyEvent.KEYCODE_DVR:case KeyEvent.KEYCODE_AVR_INPUT:case KeyEvent.KEYCODE_AVR_POWER:case KeyEvent.KEYCODE_STB_INPUT:case KeyEvent.KEYCODE_STB_POWER:case KeyEvent.KEYCODE_TV_INPUT:case KeyEvent.KEYCODE_TV_POWER:case KeyEvent.KEYCODE_WINDOW:return false;}return null;}  }
class C{  public void testArriveAndDeregister(){  final Phaser phaser=new Phaser(1);  for (int i=0; i < 10; i++) {    assertState(phaser,0,1,1);    assertEquals(0,phaser.register());    assertState(phaser,0,2,2);    assertEquals(0,phaser.arriveAndDeregister());    assertState(phaser,0,1,1);  }  assertEquals(0,phaser.arriveAndDeregister());  assertTerminated(phaser,1);}  }
class C{  public static void main(String[] args){  MyRectangle2D r1=new MyRectangle2D(2,2,5.5,4.9);  System.out.println("\nRectangle:");  System.out.println("Area: " + r1.getArea());  System.out.println("Perimeter: " + r1.getPerimeter());  System.out.println((r1.contains(3,3) ? "Contains" : "Does not contain") + " the point (3, 3).");  System.out.println((r1.contains(new MyRectangle2D(4,5,10.5,3.2)) ? "Contains" : "Does not contain") + " the rectangle with points (4, 5, 10.5, 3.2)");  System.out.println((r1.overlaps(new MyRectangle2D(3,5,2.3,5.4)) ? "Overlaps" : "Does not overlap") + " the rectangle with points (3, 5, 2.3, 5.4)");}  }
class C{  public static String keyAlgorithm(String algorithm){  int index=algorithm.indexOf('_');  if (index == -1) {    return algorithm;  }  return algorithm.substring(0,index);}  }
class C{  public WebLogicWlstConfigurationFactory(Configuration configuration){  this.configuration=configuration;}  }
class C{  @Override protected void resetEditorFrom(MuleConfiguration runnerConfiguration){  this.configurationPanel.getModuleCombo().setModules(runnerConfiguration.getValidModules());  Module selectedModule=runnerConfiguration.getModule();  if (selectedModule == null) {    Collection<Module> modules=runnerConfiguration.getValidModules();    if (modules.size() > 0) {      selectedModule=modules.iterator().next();    }  }  this.configurationPanel.getModuleCombo().setSelectedModule(selectedModule);  this.configurationPanel.getVmArgsField().setText(runnerConfiguration.getVmArgs());  String muleHome=runnerConfiguration.getMuleHome();  if (StringUtils.isBlank(muleHome)) {    final MuleSdk from=MuleSdk.getFrom(selectedModule);    if (from != null) {      muleHome=from.getMuleHome();    }  }  this.configurationPanel.getMuleHome().setSelectedItem(MuleSdkManager.getInstance().findSdk(muleHome));}  }
class C{  public static ServiceState newFromBundle(Bundle m){  ServiceState ret;  ret=new ServiceState();  ret.setFromNotifierBundle(m);  return ret;}  }
class C{  public void addSoundEvent(State event,int resId){  mSoundMap.put(event,resId);}  }
class C{  public static double mercY(double lat){  if (lat > 89.5) {    lat=89.5;  }  if (lat < -89.5) {    lat=-89.5;  }  double temp=R_MINOR / R_MAJOR;  double es=1.0 - (temp * temp);  double eccent=Math.sqrt(es);  double phi=Math.toRadians(lat);  double sinphi=Math.sin(phi);  double con=eccent * sinphi;  double com=0.5 * eccent;  con=Math.pow(((1.0 - con) / (1.0 + con)),com);  double ts=Math.tan(0.5 * ((Math.PI * 0.5) - phi)) / con;  double y=0 - R_MAJOR * Math.log(ts);  return y;}  }
class C{  public String generateMinimalMATSimConfig(){  Config config=new Config();  ConfigGroup ippcm=config.createModule(MatrixBasedPtRouterConfigGroup.GROUP_NAME);  ippcm.addParam(MatrixBasedPtRouterConfigGroup.PT_STOPS,this.ptStops);  ippcm.addParam(MatrixBasedPtRouterConfigGroup.USING_PT_STOPS,"tRue");  ippcm.addParam(MatrixBasedPtRouterConfigGroup.PT_TRAVEL_TIMES_AND_DISTANCES_SWITCH,this.useTravelTimesAndDistances);  ChangeModeConfigGroup changeModeConfig=ConfigUtils.addOrGetModule(config,ChangeModeConfigGroup.CONFIG_MODULE,ChangeModeConfigGroup.class);  String[] str={"car","pt"};  changeModeConfig.setModes(str);  return writeConfigFile(config);}  }
class C{  protected String loadDocumentDetails(){  setC_Currency_ID(NO_CURRENCY);  MMovement move=(MMovement)getPO();  setDateDoc(move.getMovementDate());  setDateAcct(move.getMovementDate());  m_Reversal_ID=move.getReversal_ID();  m_DocStatus=move.getDocStatus();  p_lines=loadLines(move);  log.fine("Lines=" + p_lines.length);  return null;}  }
class C{  protected Integer wrapValue(int k){  return new Integer(k);}  }
class C{  public static Video randomVideo(){  String id=UUID.randomUUID().toString();  String title="Video-" + id;  String url="http://coursera.org/some/video-" + id;  long duration=60 * (int)Math.rint(Math.random() * 60) * 1000;  return new Video(title,url,duration);}  }
class C{  protected Logger(@Nullable String name,@Nullable String resourceBundleName){  throw new RuntimeException();}  }
class C{  public boolean match(ImportDeclaration node,Object other){  if (!(other instanceof ImportDeclaration)) {    return false;  }  ImportDeclaration o=(ImportDeclaration)other;  if (node.getAST().apiLevel >= AST.JLS3) {    if (node.isStatic() != o.isStatic()) {      return false;    }  }  return (safeSubtreeMatch(node.getName(),o.getName()) && node.isOnDemand() == o.isOnDemand());}  }
class C{  public void sort(){  Collections.sort(individuals,PERFORMANCE_COMPARATOR);}  }
class C{  private void createTablesUnlessTheyAlreadyExist(final DBTransaction transaction){  new JDBCSQLHelper(transaction).runDBScript("games/stendhal/server/stendhal_init.sql");}  }
class C{  @Override public int startupNewWorker(int priority,String tcpUri,String temporaryDirectory){  startupNewWorker(priority);  return 1;}  }
class C{  protected void xor(int color,int piece,long bb){  pieceBB[color][piece]^=bb;}  }
class C{  static void warn(String s,Throwable t){  System.out.println("Warning: " + s);  if (t != null) {    t.printStackTrace();  }}  }
class C{  public LoggingScriptCommand(Configuration configuration,String resourcePath){  super(configuration,resourcePath);}  }
class C{  private int readInt4(InputStream s) throws java.io.IOException {  int i1=s.read() & 0xFF;  int i2=s.read() & 0xFF;  int i3=s.read() & 0xFF;  int i4=s.read() & 0xFF;  return i1 + (i2 << 8) + (i3 << 16)+ (i4 << 24);}  }
class C{  public final DoubleGrid2D multiply(final DoubleGrid2D withThis){  checkBounds(withThis);  final double[][] otherField=withThis.field;  double[] fieldx=null;  double[] ofieldx=null;  final int width=this.width;  final int height=this.height;  for (int x=0; x < width; x++) {    fieldx=field[x];    ofieldx=otherField[x];    for (int y=0; y < height; y++)     fieldx[y]*=ofieldx[y];  }  return this;}  }
class C{  protected Map<Binary,URI> init(){  return newHashMap();}  }
class C{  public T caseRegularExpressionLiteral(RegularExpressionLiteral object){  return null;}  }
class C{  @Override public int height(){  if (isAirborne()) {    return 0;  }  if (isSpheroid()) {    return 9;  }  return 4;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected AttrTypes testsPerClassType(int classType,EstTypes estTypes){  AttrTypes attrTypes=new AttrTypes();  AttrTypes at=new AttrTypes(Attribute.NOMINAL);  attrTypes.nominal=canEstimate(at,estTypes.supervised,classType)[0];  at=new AttrTypes(Attribute.NUMERIC);  attrTypes.numeric=canEstimate(at,estTypes.supervised,classType)[0];  attrTypes.string=false;  attrTypes.date=false;  attrTypes.relational=false;  if (attrTypes.oneIsSet()) {    Vector<Integer> attributesSet=attrTypes.getVectorOfAttrTypes();    for (int i=0; i < attributesSet.size(); i++) {      AttrTypes workAttrTypes=new AttrTypes(attributesSet.elementAt(i).intValue());      if (estTypes.weighted) {        instanceWeights(workAttrTypes,classType);      }      if (classType == Attribute.NOMINAL) {        int numClasses=4;        canHandleNClasses(workAttrTypes,numClasses);      }      int numAtt=4;      canHandleClassAsNthAttribute(workAttrTypes,numAtt,0,classType,1);      canHandleZeroTraining(workAttrTypes,classType);      boolean handleMissingAttributes=canHandleMissing(workAttrTypes,classType,true,false,20)[0];      if (handleMissingAttributes) {        canHandleMissing(workAttrTypes,classType,true,false,100);      }      boolean handleMissingClass=canHandleMissing(workAttrTypes,classType,false,true,20)[0];      if (handleMissingClass) {        canHandleMissing(workAttrTypes,classType,false,true,100);      }      correctBuildInitialisation(workAttrTypes,classType);      datasetIntegrity(workAttrTypes,classType,handleMissingAttributes,handleMissingClass);      if (estTypes.incremental) {        incrementingEquality(workAttrTypes,classType);      }    }  }  return attrTypes;}  }
class C{  private static boolean implementsInjectionProvider(Class<?> clazz){  return InjectionProvider.class.isAssignableFrom(clazz);}  }
class C{  @Override public void clear(){  throw new UnsupportedOperationException(ERROR_MSG);}  }
class C{  public MonthDateFormat(TimeZone zone,Locale locale,int chars,boolean showYearForJan,boolean showYearForDec){  this(zone,locale,chars,new boolean[]{showYearForJan,false,false,false,false,false,false,false,false,false,false,false,showYearForDec},new SimpleDateFormat("yy"));}  }
class C{  protected String encodeDiff(final Task<Diff> task,final Diff diff) throws ConfigurationException, UnsupportedEncodingException, DecodingException, EncodingException, SQLConsumerException {  String encoding=super.encodeDiff(task,diff);  this.encodedSize+=encoding.length();  return encoding;}  }
class C{  public synchronized StorageCapability[] queryStorageCapabilities(String[] capIds) throws InvalidArgument, InvalidSession, StorageFault, NotImplemented {  final String methodName="queryStorageCapabilities(): ";  log.debug(methodName + "Entry");  List<StorageCapability> returnList=null;  List<CoS> cosList=null;  try {    Boolean supportsCapability=new Boolean(_config.getConfigValue("config/service/storageTopology/storageArray/support-capability-profile"));    if (!supportsCapability) {      log.error(methodName + " This function is not implemented");      throw FaultUtil.NotImplemented("This function is not implemented");    }    if (Util.isEmpty(capIds)) {      log.debug(methodName + "input capability Ids: " + capIds);      cosList=_syncManager.getCosDetailList();    } else {      for (      String inputCapId : capIds) {        if (!Util.isEmpty(inputCapId)) {          if (!inputCapId.startsWith(COS_IDENTIFIER_PREFIX)) {            throw FaultUtil.InvalidArgument("Storage capability Id is invalid: " + inputCapId);          }        } else {          throw FaultUtil.InvalidArgument("Storage capability Id is empty: " + inputCapId);        }      }      List<String> inputCapIdList=Arrays.asList(capIds);      log.debug(methodName + "input capability Ids: " + inputCapIdList);      cosList=_syncManager.getCosDetailList(inputCapIdList);    }    returnList=new ArrayList<StorageCapability>();    for (    CoS cos : cosList) {      StorageCapability capability=new StorageCapability();      capability.setUniqueIdentifier(cos.getId());      capability.setCapabilityName(cos.getLabel() + ":" + cos.getType());      capability.setCapabilityDetail(cos.getDescription());      if (log.isDebugEnabled()) {        log.debug(methodName + "Capability detail: id[" + capability.getUniqueIdentifier()+ "] name["+ capability.getCapabilityName()+ "] detail["+ capability.getCapabilityDetail()+ "]");      }      returnList.add(capability);    }  } catch (  SOSFailure e) {    log.error(methodName + "StorageOSFailure occured ",e);    throw FaultUtil.StorageFault(e);  }catch (  InvalidArgument e) {    log.error(methodName + "InvalidArgument occured ",e);    throw e;  }catch (  NotImplemented e) {    log.error(methodName + "NotImplemented occured ",e);    throw e;  }  return returnList.toArray(new StorageCapability[0]);}  }
class C{  public boolean isStencilBufferEnabled(){  return mStencilBuffer;}  }
class C{  public ZipfianGenerator(long _min,long _max){  this(_min,_max,ZIPFIAN_CONSTANT);}  }
class C{  public char charAt(int offset){  return ref.chars[offset];}  }
class C{  public void accept(MemberValueVisitor visitor){  visitor.visitArrayMemberValue(this);}  }
class C{  public List<List<DataPointPair<Integer>>> trainC(List<DataPointPair<Integer>> dataPoints,Set<Integer> options){  return trainC(dataPoints,options,null);}  }
class C{  @Override public int read(final byte[] b) throws IOException {  int l=-1;  if (isReadAllowed()) {    l=super.read(b);    checkClose(l);  }  return l;}  }
class C{  private void checkFailureRate(float currentFailureRate){  if (currentFailureRate != -1) {    if (currentFailureRate >= failureRateThreshold) {      stateMachine.transitionToOpenState(CircuitBreaker.StateTransition.HALF_OPEN_TO_OPEN,circuitBreakerMetrics);    } else {      stateMachine.transitionToClosedState(CircuitBreaker.StateTransition.HALF_OPEN_TO_CLOSED);    }  }}  }
class C{  public Builder loadBalancingStrategy(final LoadBalancingStrategy loadBalancingStrategy){  this.loadBalancingStrategy=loadBalancingStrategy;  return this;}  }
class C{  public <T extends ServiceDocument>T sendGetAndWait(String url,Class<T> bodyType){  return sendAndWait(Operation.createGet(URI.create(url)),bodyType);}  }
class C{  public boolean hasMapKeyConverts(String attributeName){  return m_mapKeyConverts.containsKey(attributeName);}  }
class C{  public JSONArray put(int index,long value) throws JSONException {  this.put(index,new Long(value));  return this;}  }
class C{  public void printCharacter(char c) throws IOException {  if (c == 10) {    printNewline();  } else {    column++;    writer.write(c);  }}  }
class C{  public void closeSilently(){  try {    close();  } catch (  Exception e) {  }}  }
class C{  public static void makeFlags(final CFlags flags){  flags.setValidator(new MockValidator());  flags.registerOptional('g',"global","error thrown in globalIntegrity()");  flags.registerOptional('v',"validator","error thrown in validator");  flags.registerOptional('c',"constructor","InvalidParamsException thrown in params constructor");  flags.registerOptional('x',"constructorx","RuntimeException thrown in params constructor");  flags.registerOptional('e',"runtimeErr","Write to err during task execution");  flags.registerOptional('r',"runtime","RuntimeException thrown during execution of task");  flags.registerOptional('s',"runtimeslim","SlimException thrown during execution of task");}  }
class C{  public EigenvalueDecomposition(final Matrix A){  QL.require(A.rows() == A.cols(),Matrix.MATRIX_MUST_BE_SQUARE);  this.n=A.cols();  V=new Matrix(n,n);  d=new double[n];  e=new double[n];  issymmetric=true;  for (int j=0; (j < n) & issymmetric; j++) {    for (int i=0; (i < n) & issymmetric; i++) {      issymmetric=(A.$[A.addr.op(i,j)] == A.$[A.addr.op(j,i)]);    }  }  if (issymmetric) {    for (int i=0; i < n; i++) {      for (int j=0; j < n; j++) {        V.$[V.addr.op(i,j)]=A.$[A.addr.op(i,j)];      }    }    tred2();    tql2();  } else {    H=new Matrix(n,n);    ort=new double[n];    for (int j=0; j < n; j++) {      for (int i=0; i < n; i++) {        H.$[H.addr.op(i,j)]=A.$[A.addr.op(i,j)];      }    }    orthes();    hqr2();  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static boolean checkCompatibleAssignmentTypes(ClassNode left,ClassNode right){  return checkCompatibleAssignmentTypes(left,right,null);}  }
class C{  private static ECFieldElement solveQuadraticEquation(ECCurve curve,ECFieldElement beta){  if (beta.isZero()) {    return beta;  }  ECFieldElement zeroElement=curve.fromBigInteger(ECConstants.ZERO);  ECFieldElement z=null;  ECFieldElement gamma=null;  Random rand=new Random();  int m=beta.getFieldSize();  do {    ECFieldElement t=curve.fromBigInteger(new BigInteger(m,rand));    z=zeroElement;    ECFieldElement w=beta;    for (int i=1; i <= m - 1; i++) {      ECFieldElement w2=w.square();      z=z.square().add(w2.multiply(t));      w=w2.add(beta);    }    if (!w.isZero()) {      return null;    }    gamma=z.square().add(z);  } while (gamma.isZero());  return z;}  }
class C{  static double[] loadExpFracA(){  return EXP_FRAC_A.clone();}  }
class C{  public Table.Builder<? extends Table> newTableBuilder(int tag){  Header header=new Header(tag);  Table.Builder<? extends Table> builder=Table.Builder.getBuilder(header,null);  this.tableBuilders.put(header.tag(),builder);  return builder;}  }
class C{  void copyParentSets(BayesNet dest,BayesNet source){  int nNodes=source.getNrOfNodes();  for (int iNode=0; iNode < nNodes; iNode++) {    dest.getParentSet(iNode).copy(source.getParentSet(iNode));  }}  }
class C{  public MergeRule(String left_tag_pattern,String right_tag_pattern,String descr){  super(x.Regex("(?<left>" + ChunkerStatic.tag_pattern2re_pattern(left_tag_pattern) + ")}{(?="+ ChunkerStatic.tag_pattern2re_pattern(right_tag_pattern)+ ")"),"${left}",descr);  x.Regex(ChunkerStatic.tag_pattern2re_pattern(left_tag_pattern));  x.Regex(ChunkerStatic.tag_pattern2re_pattern(right_tag_pattern));  this._left_tag_pattern=left_tag_pattern;  this._right_tag_pattern=right_tag_pattern;}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  public static final char toOtherCase(char c){  int i=c;  final int A='A';  final int Z='Z';  final int a='a';  final int z='z';  final int SHIFT=a - A;  if (i < A)   return c; else   if (i <= Z)   return (char)(i + SHIFT); else   if (i < a)   return c; else   if (i <= z)   return (char)(i - SHIFT); else   return c;}  }
class C{  public static Matrix exp(Matrix A){  Matrix out=new Matrix(A.getRowDimension(),A.getColumnDimension());  for (int i=0; i < A.getRowDimension(); i++)   for (int j=0; j < A.getColumnDimension(); j++)   out.set(i,j,Math.exp(A.get(i,j)));  return out;}  }
class C{  public void actionPerformed(ActionEvent e){  if (e.getActionCommand().equals(FieldRecordInfo.CHANGE_LOG_COMMAND)) {    FieldRecordInfo.start(m_GridField);    return;  }  if (e.getSource() == mDelete)   m_value=null;  if (e.getSource() == m_toMapButton) {    Env.startBrowser(DefaultContextProvider.GOOGLE_MAPS_URL_PREFIX + m_value.toString().replace(" ","%"));    return;  }  log.config("actionPerformed - " + m_value);  VLocationDialog ld=new VLocationDialog(Env.getFrame(this),Msg.getMsg(Env.getCtx(),"Location"),m_value);  ld.setVisible(true);  Object oldValue=getValue();  m_value=ld.getValue();  if (e.getSource() == mDelete)   ; else   if (!ld.isChanged())   return;  try {    int C_Location_ID=0;    if (m_value != null)     C_Location_ID=m_value.getC_Location_ID();    Integer ii=new Integer(C_Location_ID);    if (C_Location_ID != 0)     fireVetoableChange(m_columnName,oldValue,ii);    setValue(ii);    if (ii.equals(oldValue) && m_GridTab != null && m_GridField != null) {      m_GridTab.processFieldChange(m_GridField);    }  } catch (  PropertyVetoException pve) {    log.log(Level.SEVERE,"VLocation.actionPerformed",pve);  }}  }
class C{  public static void startSelecting(View view,Spannable content){  content.setSpan(SELECTING,0,0,PRESSED);}  }
class C{  public boolean isLegal(MovePath path){  return ((movementType != EntityMovementType.MOVE_ILLEGAL) && (isLegalEndPos() || !isEndPos(path)));}  }
class C{  private void requestDraw(){  if ((width != 0) && (height != 0)) {    repaint(oldX,oldY,width,height);  }  oldX=point.x;  oldY=point.y;  if (dragged != null) {    width=dragged.getWidth();    height=dragged.getHeight();    repaint(point.x,point.y,width,height);  } else {    width=0;    height=0;  }}  }
class C{  void skipRemainingSiblings(){  if (!stack.isEmpty()) {    stack.peek().skip();  }}  }
class C{  public void addExcludeFiles(FileMatch exclude){  if (exclude == null)   throw new IllegalArgumentException("null");synchronized (excludeFiles) {    this.excludeFiles.add(exclude);  }}  }
class C{  public boolean hasId(){  return hasValue();}  }
class C{  public void showDialog(){  updateLineList();  setVisible(true);}  }
class C{  public GTRowBlock(GTInfo info){  this.info=info;  this.primaryKey=new ByteArray();  this.cellBlocks=new ByteArray[info.colBlocks.length];  for (int i=0; i < this.cellBlocks.length; i++) {    this.cellBlocks[i]=new ByteArray();  }}  }
class C{  public void merge(Region r){  if (this.start == r.end + 1) {    this.start=r.start;  } else   if (this.end == r.start - 1) {    this.end=r.end;  } else {    throw new AssertionError("Ranges : Merge called on non contiguous values : [this]:" + this + " and "+ r);  }  updateAvailable();}  }
class C{  public static float exp(float x){  x=1f + x / 256f;  x*=x;  x*=x;  x*=x;  x*=x;  x*=x;  x*=x;  x*=x;  x*=x;  return x;}  }
class C{  public AmqpSession(AmqpConnection connection,String sessionId){  this.connection=connection;  this.sessionId=sessionId;  this.txContext=new AmqpTransactionContext(this);}  }
class C{  private void updateSegmentContent(Segment segment,String content){  final int lengthBefore=xml.length;  xml=insertBetween(xml,segment.left,segment.right,content);  shiftSegments(segment.left,xml.length - lengthBefore);  segment.right=segment.left + content.length() - 1;}  }
class C{  Iterator<C> createColumnKeyIterator(){  return new ColumnKeyIterator();}  }
class C{  public static byte[] bitmapToPng(final Bitmap image){  if (image == null)   return null;  ByteArrayOutputStream ba=new ByteArrayOutputStream();  if (image.compress(CompressFormat.PNG,100,ba))   return ba.toByteArray(); else   return null;}  }
class C{  byte dirTypeForward(){  lastChar=text.charAt(charIndex);  if (Character.isHighSurrogate(lastChar)) {    int codePoint=Character.codePointAt(text,charIndex);    charIndex+=Character.charCount(codePoint);    return Character.getDirectionality(codePoint);  }  charIndex++;  byte dirType=getCachedDirectionality(lastChar);  if (isHtml) {    if (lastChar == '<') {      dirType=skipTagForward();    } else     if (lastChar == '&') {      dirType=skipEntityForward();    }  }  return dirType;}  }
class C{  protected byte[] engineGetIV(){  return core.getIV();}  }
class C{  @Override public boolean containsKey(Object key){  return _map.containsKey(unwrapKey(key));}  }
class C{  public boolean isRootDependent(BytecodeInstruction ins){  return isRootDependent(ins.getBasicBlock());}  }
class C{  protected boolean notFound(ChooseConfig cc){  return isNull(cc);}  }
class C{  public synchronized boolean goDown(String path){  if (!isHierachic(path)) {    return goToChild(path);  }  TreeNode old=m_Current;  m_Current=new TreeNode();  String[] nodes=tokenize(path);  int pos=search(old.children,nodes[0]);  if (pos == -1) {    m_Current=old;    return false;  }  m_Current=old.children.elementAt(pos);  for (int i=1; i < nodes.length; i++) {    pos=search(m_Current.children,nodes[i]);    if (pos == -1) {      m_Current=old;      return false;    }    m_Current=m_Current.children.elementAt(pos);  }  return true;}  }
class C{  static protected boolean highBit(int val){  if ((val & (~0xFF)) != 0) {    log.error("highBit called with too large value: 0x" + Integer.toHexString(val));  }  return (0 != (val & 0x80));}  }
class C{  @Override public boolean supportsSubqueriesInComparisons(){  debugCodeCall("supportsSubqueriesInComparisons");  return true;}  }
class C{  public boolean inPlayConsoleUrl(Point point,int activeIndex){  double playYStart=VGAP + ACTIVE_USER_IMAGE_HEIGHT - playLabelDimension.getHeight() - cloudLabelDimension.getHeight() - 2 + (mainPanelDimension.getHeight() * activeIndex) + USER_LABEL_VERTICAL_STRUT;  double playYEnd=playYStart + playLabelDimension.getHeight();  double playXStart=ACTIVE_USER_IMAGE_WIDTH + HGAP + VGAP;  double playXEnd=playXStart + playLabelDimension.getWidth();  return (point.getX() > playXStart) && (point.getX() < playXEnd) && (point.getY() > playYStart)&& (point.getY() < playYEnd);}  }
class C{  public void testSetF8Momentary(){  boolean f8Momentary=false;  AbstractThrottle instance=new AbstractThrottleImpl();  instance.setF8Momentary(f8Momentary);}  }
class C{  private void initialize(){  this.setName(Constant.messages.getString("options.globalexcludeurl.title"));  this.setLayout(new GridBagLayout());  GridBagConstraints gbc=new GridBagConstraints();  gbc.gridx=0;  gbc.weightx=1.0;  gbc.anchor=GridBagConstraints.LINE_START;  gbc.fill=GridBagConstraints.BOTH;  this.add(new JLabel(Constant.messages.getString("options.globalexcludeurl.label.tokens")),gbc);  tokensOptionsPanel=new GlobalExcludeURLMultipleOptionsPanel(getGlobalExcludeURLModel());  gbc.weighty=1.0;  this.add(tokensOptionsPanel,gbc);}  }
class C{  public Builder timingStatistics(boolean timingStatistics){  this.timingStatistics=timingStatistics;  return this;}  }
class C{  public static Geometry simplify(Geometry geom,double distanceTolerance){  VWSimplifier simp=new VWSimplifier(geom);  simp.setDistanceTolerance(distanceTolerance);  return simp.getResultGeometry();}  }
class C{  public GridConnectionBytesVerifyFilter(IgniteLogger log){  super("GridConnectionBytesVerifyFilter");  this.log=log;}  }
class C{  public void generateDict(){  if (data.trnData == null) {    System.out.println("No data available for generating dictionary");    return;  }  for (int i=0; i < data.trnData.size(); i++) {    Observation obsr=(Observation)data.trnData.get(i);    for (int j=0; j < obsr.cps.length; j++) {      addDict(obsr.cps[j],obsr.humanLabel,1);    }  }}  }
class C{  final void forgetContents(){  UNSAFE.putObject(this,itemOffset,this);  UNSAFE.putObject(this,waiterOffset,null);}  }
class C{  public void ReInit(SimpleCharStream stream,int lexState){  ReInit(stream);  SwitchTo(lexState);}  }
class C{  @Override public Long hdel(final String key,final String... fields){  checkIsInMultiOrPipeline();  client.hdel(key,fields);  return client.getIntegerReply();}  }
class C{  public boolean mergeTemplate(String templateName,Context context,Writer writer) throws ResourceNotFoundException, ParseErrorException, MethodInvocationException, Exception {  return mergeTemplate(templateName,ri.getString(INPUT_ENCODING,ENCODING_DEFAULT),context,writer);}  }
class C{  public void close(){  text=null;}  }
class C{  public Database(final IDatabase database){  Preconditions.checkNotNull(database,"Error: Database argument can't be null");  m_database=database;  if (database.isLoaded()) {    convertData();  }  database.addListener(m_internalListener);}  }
class C{  public static void show(int t){  defer=false;  draw();  try {    Thread.sleep(t);  } catch (  InterruptedException e) {    System.out.println("Error sleeping");  }  defer=true;}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  String fiducialHeader=args[0];  String outputHeader=args[1];  if (fiducialHeader.isEmpty() || outputHeader.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int progress=0;    ArrayList<XYPoint> fiducialMarks=new ArrayList<>();    ShapeFile fiducials=new ShapeFile(fiducialHeader);    if (fiducials.getShapeType().getBaseType() != ShapeType.POINT && fiducials.getShapeType().getBaseType() != ShapeType.MULTIPOINT) {      showFeedback("The input shapefile must be of a 'POINT' or 'MULTIPOINT' data type.");      return;    }    DBFField[] fields=new DBFField[1];    fields[0]=new DBFField();    fields[0].setName("FID");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setDecimalCount(0);    fields[0].setFieldLength(10);    ShapeFile output=new ShapeFile(outputHeader,ShapeType.POINT,fields);    int oldProgress=-1;    int n=0;    int numRecords=fiducials.getNumberOfRecords();    progress=0;    for (    ShapeFileRecord record : fiducials.records) {      if (record.getShapeType() != ShapeType.NULLSHAPE) {        double[][] vertices;        ShapeType shapeType=record.getShapeType();switch (shapeType) {case POINT:          whitebox.geospatialfiles.shapefile.Point recPoint=(whitebox.geospatialfiles.shapefile.Point)(record.getGeometry());        vertices=recPoint.getPoints();      fiducialMarks.add(new XYPoint(vertices[0][0],vertices[0][1]));    break;case POINTZ:  PointZ recPointZ=(PointZ)(record.getGeometry());vertices=recPointZ.getPoints();fiducialMarks.add(new XYPoint(vertices[0][0],vertices[0][1]));break;case POINTM:PointM recPointM=(PointM)(record.getGeometry());vertices=recPointM.getPoints();fiducialMarks.add(new XYPoint(vertices[0][0],vertices[0][1]));break;case MULTIPOINT:MultiPoint recMultiPoint=(MultiPoint)(record.getGeometry());vertices=recMultiPoint.getPoints();for (int j=0; j < vertices.length; j++) {fiducialMarks.add(new XYPoint(vertices[j][0],vertices[j][1]));}break;case MULTIPOINTZ:MultiPointZ recMultiPointZ=(MultiPointZ)(record.getGeometry());vertices=recMultiPointZ.getPoints();for (int j=0; j < vertices.length; j++) {fiducialMarks.add(new XYPoint(vertices[j][0],vertices[j][1]));}break;case MULTIPOINTM:MultiPointM recMultiPointM=(MultiPointM)(record.getGeometry());vertices=recMultiPointM.getPoints();for (int j=0; j < vertices.length; j++) {fiducialMarks.add(new XYPoint(vertices[j][0],vertices[j][1]));}break;}}if (cancelOp) {cancelOperation();return;}n++;progress=(int)((n * 100.0) / numRecords);if (progress > oldProgress) {oldProgress=progress;updateProgress(progress);}}int numMarks=fiducialMarks.size();if (numMarks == 8) {double psi=0;double x, y;double DegreeToRad=Math.PI / 180;double[] axes=new double[2];double[][] axesEndPoints=new double[4][2];double newXAxis=0;double newYAxis=0;double longAxis;double shortAxis;final double rightAngle=Math.toRadians(90);double[] newBoundingBox=new double[4];double slope;double boxCentreX, boxCentreY;double[][] verticesRotated=new double[8][2];double east=Double.NEGATIVE_INFINITY;double west=Double.POSITIVE_INFINITY;double north=Double.NEGATIVE_INFINITY;double south=Double.POSITIVE_INFINITY;XYPoint pt;for (int i=0; i < 8; i++) {pt=fiducialMarks.get(i);if (pt.x > east) {east=pt.x;}if (pt.x < west) {west=pt.x;}if (pt.y > north) {north=pt.y;}if (pt.y < south) {south=pt.y;}}double midX=west + (east - west) / 2.0;double midY=south + (north - south) / 2.0;axes[0]=9999999;axes[1]=9999999;slope=0;boxCentreX=0;boxCentreY=0;for (int m=0; m <= 180; m++) {psi=-m * 0.5 * DegreeToRad;for (int i=0; i < 8; i++) {pt=fiducialMarks.get(i);x=pt.x - midX;y=pt.y - midY;verticesRotated[i][0]=(x * Math.cos(psi)) - (y * Math.sin(psi));verticesRotated[i][1]=(x * Math.sin(psi)) + (y * Math.cos(psi));}newBoundingBox[0]=Double.MAX_VALUE;newBoundingBox[1]=Double.MIN_VALUE;newBoundingBox[2]=Double.MAX_VALUE;newBoundingBox[3]=Double.MIN_VALUE;for (n=0; n < 8; n++) {x=verticesRotated[n][0];y=verticesRotated[n][1];if (x < newBoundingBox[0]) {newBoundingBox[0]=x;}if (x > newBoundingBox[1]) {newBoundingBox[1]=x;}if (y < newBoundingBox[2]) {newBoundingBox[2]=y;}if (y > newBoundingBox[3]) {newBoundingBox[3]=y;}}newXAxis=newBoundingBox[1] - newBoundingBox[0];newYAxis=newBoundingBox[3] - newBoundingBox[2];if ((newXAxis * newYAxis) < (axes[0] * axes[1])) {axes[0]=newXAxis;axes[1]=newYAxis;if (axes[0] > axes[1]) {slope=-psi;} else {slope=-(rightAngle + psi);}x=newBoundingBox[0] + newXAxis / 2;y=newBoundingBox[2] + newYAxis / 2;boxCentreX=midX + (x * Math.cos(-psi)) - (y * Math.sin(-psi));boxCentreY=midY + (x * Math.sin(-psi)) + (y * Math.cos(-psi));}}longAxis=Math.max(axes[0],axes[1]);shortAxis=Math.min(axes[0],axes[1]);axesEndPoints[0][0]=boxCentreX + longAxis / 2.0 * Math.cos(slope);axesEndPoints[0][1]=boxCentreY + longAxis / 2.0 * Math.sin(slope);axesEndPoints[1][0]=boxCentreX - longAxis / 2.0 * Math.cos(slope);axesEndPoints[1][1]=boxCentreY - longAxis / 2.0 * Math.sin(slope);axesEndPoints[2][0]=boxCentreX + shortAxis / 2.0 * Math.cos(rightAngle + slope);axesEndPoints[2][1]=boxCentreY + shortAxis / 2.0 * Math.sin(rightAngle + slope);axesEndPoints[3][0]=boxCentreX - shortAxis / 2.0 * Math.cos(rightAngle + slope);axesEndPoints[3][1]=boxCentreY - shortAxis / 2.0 * Math.sin(rightAngle + slope);double dist;XYPoint p1=new XYPoint();XYPoint p2=new XYPoint();XYPoint p3=new XYPoint();XYPoint p4=new XYPoint();XYPoint p5=new XYPoint();XYPoint p6=new XYPoint();XYPoint p7=new XYPoint();XYPoint p8=new XYPoint();double minDist=Double.POSITIVE_INFINITY;for (int i=0; i < 8; i++) {pt=fiducialMarks.get(i);x=pt.x;y=pt.y;dist=(axesEndPoints[0][0] - x) * (axesEndPoints[0][0] - x) + (axesEndPoints[0][1] - y) * (axesEndPoints[0][1] - y);if (dist < minDist) {minDist=dist;p1=pt;}}minDist=Double.POSITIVE_INFINITY;for (int i=0; i < 8; i++) {pt=fiducialMarks.get(i);x=pt.x;y=pt.y;dist=(axesEndPoints[1][0] - x) * (axesEndPoints[1][0] - x) + (axesEndPoints[1][1] - y) * (axesEndPoints[1][1] - y);if (dist < minDist) {minDist=dist;p2=pt;}}minDist=Double.POSITIVE_INFINITY;for (int i=0; i < 8; i++) {pt=fiducialMarks.get(i);x=pt.x;y=pt.y;dist=(axesEndPoints[2][0] - x) * (axesEndPoints[2][0] - x) + (axesEndPoints[2][1] - y) * (axesEndPoints[2][1] - y);if (dist < minDist) {minDist=dist;p3=pt;}}minDist=Double.POSITIVE_INFINITY;for (int i=0; i < 8; i++) {pt=fiducialMarks.get(i);x=pt.x;y=pt.y;dist=(axesEndPoints[3][0] - x) * (axesEndPoints[3][0] - x) + (axesEndPoints[3][1] - y) * (axesEndPoints[3][1] - y);if (dist < minDist) {minDist=dist;p4=pt;}}double[][] cornerPoints=new double[4][2];cornerPoints[0][0]=axesEndPoints[0][0] + shortAxis / 2.0 * Math.cos(rightAngle + slope);cornerPoints[0][1]=axesEndPoints[0][1] + shortAxis / 2.0 * Math.sin(rightAngle + slope);cornerPoints[1][0]=axesEndPoints[0][0] - shortAxis / 2.0 * Math.cos(rightAngle + slope);cornerPoints[1][1]=axesEndPoints[0][1] - shortAxis / 2.0 * Math.sin(rightAngle + slope);cornerPoints[2][0]=axesEndPoints[1][0] - shortAxis / 2.0 * Math.cos(rightAngle + slope);cornerPoints[2][1]=axesEndPoints[1][1] - shortAxis / 2.0 * Math.sin(rightAngle + slope);cornerPoints[3][0]=axesEndPoints[1][0] + shortAxis / 2.0 * Math.cos(rightAngle + slope);cornerPoints[3][1]=axesEndPoints[1][1] + shortAxis / 2.0 * Math.sin(rightAngle + slope);minDist=Double.POSITIVE_INFINITY;for (int i=0; i < 8; i++) {pt=fiducialMarks.get(i);x=pt.x;y=pt.y;dist=(cornerPoints[0][0] - x) * (cornerPoints[0][0] - x) + (cornerPoints[0][1] - y) * (cornerPoints[0][1] - y);if (dist < minDist) {minDist=dist;p5=pt;}}minDist=Double.POSITIVE_INFINITY;for (int i=0; i < 8; i++) {pt=fiducialMarks.get(i);x=pt.x;y=pt.y;dist=(cornerPoints[2][0] - x) * (cornerPoints[2][0] - x) + (cornerPoints[2][1] - y) * (cornerPoints[2][1] - y);if (dist < minDist) {minDist=dist;p6=pt;}}minDist=Double.POSITIVE_INFINITY;for (int i=0; i < 8; i++) {pt=fiducialMarks.get(i);x=pt.x;y=pt.y;dist=(cornerPoints[1][0] - x) * (cornerPoints[1][0] - x) + (cornerPoints[1][1] - y) * (cornerPoints[1][1] - y);if (dist < minDist) {minDist=dist;p7=pt;}}minDist=Double.POSITIVE_INFINITY;for (int i=0; i < 8; i++) {pt=fiducialMarks.get(i);x=pt.x;y=pt.y;dist=(cornerPoints[3][0] - x) * (cornerPoints[3][0] - x) + (cornerPoints[3][1] - y) * (cornerPoints[3][1] - y);if (dist < minDist) {minDist=dist;p8=pt;}}XYPoint intersection=new XYPoint();double denominator=(p1.x - p2.x) * (p3.y - p4.y) - (p1.y - p2.y) * (p3.x - p4.x);if (denominator != 0) {double xNumerator=(p1.x * p2.y - p1.y * p2.x) * (p3.x - p4.x) - (p1.x - p2.x) * (p3.x * p4.y - p3.y * p4.x);double yNumerator=(p1.x * p2.y - p1.y * p2.x) * (p3.y - p4.y) - (p1.y - p2.y) * (p3.x * p4.y - p3.y * p4.x);intersection.x=xNumerator / denominator;intersection.y=yNumerator / denominator;} else {showFeedback("Something is wrong with the fiducial marks. Fiducial lines do not intersect");return;}XYPoint intersection2=new XYPoint();denominator=(p5.x - p6.x) * (p7.y - p8.y) - (p5.y - p6.y) * (p7.x - p8.x);if (denominator != 0) {double xNumerator=(p5.x * p6.y - p5.y * p6.x) * (p7.x - p8.x) - (p5.x - p6.x) * (p7.x * p8.y - p7.y * p8.x);double yNumerator=(p5.x * p6.y - p5.y * p6.x) * (p7.y - p8.y) - (p5.y - p6.y) * (p7.x * p8.y - p7.y * p8.x);intersection2.x=xNumerator / denominator;intersection2.y=yNumerator / denominator;} else {showFeedback("Something is wrong with the fiducial marks. Fiducial lines do not intersect");return;}whitebox.geospatialfiles.shapefile.Point PP=new whitebox.geospatialfiles.shapefile.Point((intersection.x + intersection2.x) / 2,(intersection.y + intersection2.y) / 2);Object[] rowData=new Object[1];rowData[0]=new Double(1);output.addRecord(PP,rowData);output.write();} else if (numMarks == 4) {XYPoint p1=fiducialMarks.get(0);XYPoint p2=new XYPoint();XYPoint pt;double dist;double maxDist=0;int k=0;for (int a=1; a < 4; a++) {pt=fiducialMarks.get(a);dist=Math.sqrt((pt.x - p1.x) * (pt.x - p1.x) + (pt.y - p1.y) * (pt.y - p1.y));if (dist > maxDist) {maxDist=dist;p2=pt;k=a;}}int i=0, j=0;switch (k) {case 1:i=2;j=3;break;case 2:i=1;j=3;break;case 3:i=1;j=2;break;}XYPoint p3=fiducialMarks.get(i);XYPoint p4=fiducialMarks.get(j);XYPoint intersection=new XYPoint();double denominator=(p1.x - p2.x) * (p3.y - p4.y) - (p1.y - p2.y) * (p3.x - p4.x);if (denominator != 0) {double xNumerator=(p1.x * p2.y - p1.y * p2.x) * (p3.x - p4.x) - (p1.x - p2.x) * (p3.x * p4.y - p3.y * p4.x);double yNumerator=(p1.x * p2.y - p1.y * p2.x) * (p3.y - p4.y) - (p1.y - p2.y) * (p3.x * p4.y - p3.y * p4.x);intersection.x=xNumerator / denominator;intersection.y=yNumerator / denominator;} else {showFeedback("Something is wrong with the fiducial marks. Fiducial lines do not intersect");return;}whitebox.geospatialfiles.shapefile.Point PP=new whitebox.geospatialfiles.shapefile.Point(intersection.x,intersection.y);Object[] rowData=new Object[1];rowData[0]=new Double(1);output.addRecord(PP,rowData);output.write();} else {showFeedback("There should be either 4 or 8 fiducial marks. \nThere is something wrong with the input file. \nThe operation will be terminated.");return;}returnData(outputHeader);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public void write(int b) throws IOException {  if (sink == null) {    throw new IOException("Pipe not connected");  }  sink.receive(b);}  }
class C{  public static boolean evaluate(final NaviNode node,final boolean any,final CTag tag){  if (any) {    return node.getRawNode().isTagged();  }  return node.getRawNode().isTagged(tag);}  }
class C{  public ConfigurationCustomizerProvider(final Object... keyValues){  if (null == keyValues || keyValues.length == 0)   throw new IllegalArgumentException("ConfigurationCustomizerProvider must have key/values specified");  if (keyValues.length % 2 != 0)   throw new IllegalArgumentException("The keyValues must have an even number of values");  properties=ElementHelper.asMap(keyValues);}  }
class C{  public static final int numberOfState(int[] statuses) throws IllegalArgumentException {  if (statuses.length != NUMBER_OF_PROVERS) {    throw new IllegalArgumentException("Wrong number of provers specified");  }  int multiplier=1;  int result=2;  for (int i=0; i < NUMBER_OF_PROVERS; i++) {    if (statuses[i] >= PROVER_STATUSES[i].length || statuses[i] < 0) {      throw new IllegalArgumentException("Prover " + PROVER_NAMES[i] + " does not have status number "+ statuses[i]);    }    result=result + multiplier * statuses[i];    multiplier=multiplier * PROVER_STATUSES[i].length;  }  return result;}  }
class C{  @MethodDesc(description="Stops the replicator service",usage="stop") public void stop() throws Exception {  try {    handleEventSynchronous(new StopEvent());    if (doneLatch != null) {      doneLatch.countDown();    }  } catch (  Exception e) {    logger.error("Stop operation failed",e);    throw new Exception(e.toString());  }}  }
class C{  public boolean hasValue(){  return value != null;}  }
class C{  public void invoke(InputStream is,OutputStream os,SerializerFactory serializerFactory) throws Exception {  boolean isDebug=false;  if (isDebugInvoke()) {    isDebug=true;    PrintWriter dbg=createDebugPrintWriter();    HessianDebugInputStream dIs=new HessianDebugInputStream(is,dbg);    dIs.startTop2();    is=dIs;    HessianDebugOutputStream dOs=new HessianDebugOutputStream(os,dbg);    dOs.startTop2();    os=dOs;  }  HessianInputFactory.HeaderType header=_inputFactory.readHeader(is);  AbstractHessianInput in;  AbstractHessianOutput out;switch (header) {case CALL_1_REPLY_1:    in=_hessianFactory.createHessianInput(is);  out=_hessianFactory.createHessianOutput(os);break;case CALL_1_REPLY_2:in=_hessianFactory.createHessianInput(is);out=_hessianFactory.createHessian2Output(os);break;case HESSIAN_2:in=_hessianFactory.createHessian2Input(is);in.readCall();out=_hessianFactory.createHessian2Output(os);break;default :throw new IllegalStateException(header + " is an unknown Hessian call");}if (serializerFactory != null) {in.setSerializerFactory(serializerFactory);out.setSerializerFactory(serializerFactory);}try {invoke(_service,in,out);}  finally {in.close();out.close();if (isDebug) os.close();}}  }
class C{  public float influenceAtChunk(int chunkX,int chunkY){  int adjustedX=(chunkX - this.chunkX) * 2 + X_ADJUSTMENT;  int adjustedY=(chunkY - this.chunkY) * 2 + Y_ADJUSTMENT;  return getResult(adjustedX * adjustedX + adjustedY * adjustedY);}  }
class C{  private void checkAZombieServer(ServerWrapper zombieServer){  long currTime=System.currentTimeMillis();  try {    zombieServer.lastChecked=currTime;    QueryResponse resp=zombieServer.solrServer.query(solrQuery);    if (resp.getStatus() == 0) {      ServerWrapper wrapper=zombieServers.remove(zombieServer.getKey());      if (wrapper != null) {        wrapper.failedPings=0;        if (wrapper.standard) {          addToAlive(wrapper);        }      } else {      }    }  } catch (  Exception e) {    zombieServer.failedPings++;    if (!zombieServer.standard && zombieServer.failedPings >= NONSTANDARD_PING_LIMIT) {      zombieServers.remove(zombieServer.getKey());    }  }}  }
class C{  public AsyncMessageHeader(AsyncMessageHeader other){  __isset_bitfield=other.__isset_bitfield;  this.transactionId=other.transactionId;}  }
class C{  public OMRaster generateRasterForProjection(OMGrid grid,Projection proj){  OMGraphic omg=generate(grid,proj);  if (omg instanceof OMRaster) {    return (OMRaster)omg;  } else {    return null;  }}  }
class C{  public static <A,B>Pair<A,B> of(A a,B b){  return new Pair<A,B>(a,b);}  }
class C{  public ClearCacheRequest(Cache cache,Runnable callback){  super(Method.GET,null,null);  mCache=cache;  mCallback=callback;}  }
class C{  public DetalleEstadoBean(){}  }
class C{  public void removeLastInput(){  if (!this.args.isEmpty()) {    BinderAnchor arg=this.args.remove(this.args.size() - 1);    arg.removeConnections();    this.argSpace.getChildren().remove(arg);    this.wrapper.initiateConnectionChanges();  }}  }
class C{  public DTMIterator cloneWithReset() throws CloneNotSupportedException {  NodeSequence seq=(NodeSequence)super.clone();  seq.m_next=0;  if (m_cache != null) {    m_cache.increaseUseCount();  }  return seq;}  }
class C{  public StringBand append(float f){  return append(Float.toString(f));}  }
class C{  @Override protected String layoutCL(JLabel label,FontMetrics fontMetrics,String text,Icon icon,Rectangle viewR,Rectangle iconR,Rectangle textR){  return SwingUtilities.layoutCompoundLabel((JComponent)label,fontMetrics,text,icon,label.getVerticalAlignment(),label.getHorizontalAlignment(),label.getVerticalTextPosition(),label.getHorizontalTextPosition(),viewR,iconR,textR,label.getIconTextGap());}  }
class C{  public void multiply(float c){  for (int i=0; i < indices.length; i++) {    values[i]*=c;  }  squareL2Norm*=(c * c);}  }
class C{  public boolean isNull(){  return x == 0 && y == 0 && z == 0;}  }
class C{  public String nextTo(String delimiters) throws JSONException {  char c;  StringBuilder sb=new StringBuilder();  for (; ; ) {    c=this.next();    if (delimiters.indexOf(c) >= 0 || c == 0 || c == '\n' || c == '\r') {      if (c != 0) {        this.back();      }      return sb.toString().trim();    }    sb.append(c);  }}  }
class C{  public void reset(ActionMapping mapping,HttpServletRequest request){  op=null;  key="";  name="";  value="";  defaultValue="";  allowedValues=null;}  }
class C{  private int migrateCMSettingsForTable(int userId,String tableName,String[] settings){  ContentResolver contentResolver=getContext().getContentResolver();  ContentValues[] contentValues=new ContentValues[settings.length];  int migrateSettingsCount=0;  for (  String settingsKey : settings) {    String settingsValue=null;    if (tableName.equals(CMDatabaseHelper.CMTableNames.TABLE_SYSTEM)) {      settingsValue=Settings.System.getStringForUser(contentResolver,settingsKey,userId);    } else     if (tableName.equals(CMDatabaseHelper.CMTableNames.TABLE_SECURE)) {      settingsValue=Settings.Secure.getStringForUser(contentResolver,settingsKey,userId);      if (settingsValue != null && settingsKey.equals(CMSettings.Secure.STATS_COLLECTION) && CMSettings.Secure.getStringForUser(contentResolver,settingsKey,userId) != null) {        continue;      }      if (CMSettings.Secure.QS_TILES.equals(settingsKey) && (settingsValue != null && (!settingsValue.contains(QSConstants.TILE_DND) || !settingsValue.contains(QSConstants.TILE_EDIT)))) {        if (LOCAL_LOGV) {          Log.d(TAG,"Need to insert DND or Edit tile for upgrade, currentValue: " + settingsValue);        }        final List<String> tiles=Settings.Secure.getDelimitedStringAsList(contentResolver,settingsKey,",");        if (!tiles.contains(QSConstants.TILE_DND)) {          tiles.add(QSConstants.TILE_DND);        }        if (!tiles.contains(QSConstants.TILE_EDIT)) {          boolean nineTilesPerPage=Settings.Secure.getInt(contentResolver,CMSettings.Secure.QS_USE_MAIN_TILES,0) == 1;          final int TILES_PER_PAGE=nineTilesPerPage ? 9 : 8;          if (tiles.size() > TILES_PER_PAGE) {            tiles.add((TILES_PER_PAGE - 1),QSConstants.TILE_EDIT);          } else {            tiles.add(QSConstants.TILE_EDIT);          }        }        settingsValue=TextUtils.join(",",tiles);      }    } else     if (tableName.equals(CMDatabaseHelper.CMTableNames.TABLE_GLOBAL)) {      settingsValue=Settings.Global.getStringForUser(contentResolver,settingsKey,userId);    }    if (LOCAL_LOGV)     Log.d(TAG,"Table: " + tableName + ", Key: "+ settingsKey+ ", Value: "+ settingsValue);    if (settingsValue == null) {      if (LOCAL_LOGV)       Log.d(TAG,"Skipping migrating " + settingsKey + " because of null value");      continue;    }    ContentValues contentValue=new ContentValues();    contentValue.put(Settings.NameValueTable.NAME,settingsKey);    contentValue.put(Settings.NameValueTable.VALUE,settingsValue);    contentValues[migrateSettingsCount++]=contentValue;  }  int rowsInserted=0;  if (contentValues.length > 0) {    Uri uri=mUriBuilder.build();    uri=uri.buildUpon().appendPath(tableName).build();    rowsInserted=bulkInsertForUser(userId,uri,contentValues);  }  return rowsInserted;}  }
class C{  public static String uuid(int len,int radix){  if (radix > CHARS.length) {    throw new IllegalArgumentException();  }  char[] uuid=new char[len];  for (int i=0; i < len; i++) {    uuid[i]=CHARS[(int)(Math.random() * radix)];  }  return new String(uuid);}  }
class C{  public DeflaterInputStream(InputStream in,Deflater defl,int bufLen){  super(in);  if (in == null)   throw new NullPointerException("Null input");  if (defl == null)   throw new NullPointerException("Null deflater");  if (bufLen < 1)   throw new IllegalArgumentException("Buffer size < 1");  def=defl;  buf=new byte[bufLen];}  }
class C{  void initComposeState(){  m_composeState=new ComposeState();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-18 21:46:48.510 -0400",hash_original_method="5D56F9149CAA09C31AB36A31C90B128D",hash_generated_method="AE20ADFEF2EF4BCDBDC5219F11D53EF7") public boolean performItemClick(int position){  if (isShowing()) {    if (mItemClickListener != null) {      final DropDownListView list=mDropDownList;      final View child=list.getChildAt(position - list.getFirstVisiblePosition());      final ListAdapter adapter=list.getAdapter();      mItemClickListener.onItemClick(list,child,position,adapter.getItemId(position));    }    return true;  }  return false;}  }
class C{  public String login(String email,String password) throws Throwable {  String basicAuth=constructBasicAuth(email,password);  URI loginUri=UriUtils.buildUri(this.host,ServiceUriPaths.CORE_AUTHN_BASIC);  AuthenticationRequest login=new AuthenticationRequest();  login.requestType=AuthenticationRequest.AuthenticationRequestType.LOGIN;  String[] authToken=new String[1];  TestContext ctx=this.host.testCreate(1);  Operation loginPost=Operation.createPost(loginUri).setBody(login).addRequestHeader(BasicAuthenticationService.AUTHORIZATION_HEADER_NAME,basicAuth).forceRemote().setCompletion(null);  this.host.send(loginPost);  this.host.testWait(ctx);  assertTrue(authToken[0] != null);  return authToken[0];}  }
class C{  private boolean eqCrossVariables(InferenceVariable inferenceVariable,List<PsiType> eqBounds){  boolean needFurtherIncorporation=false;  for (  PsiType eqBound : eqBounds) {    final InferenceVariable inferenceVar=mySession.getInferenceVariable(eqBound);    if (inferenceVar != null) {      for (      InferenceBound inferenceBound : InferenceBound.values()) {        for (        PsiType bound : inferenceVariable.getBounds(inferenceBound)) {          if (mySession.getInferenceVariable(bound) != inferenceVar) {            needFurtherIncorporation|=inferenceVar.addBound(bound,inferenceBound);          }        }        for (        PsiType bound : inferenceVar.getBounds(inferenceBound)) {          if (mySession.getInferenceVariable(bound) != inferenceVariable) {            needFurtherIncorporation|=inferenceVariable.addBound(bound,inferenceBound);          }        }      }    }  }  return needFurtherIncorporation;}  }
class C{  private ParameterizationFunction project(double[][] basis,ParameterizationFunction f){  double[] m=transposeTimes(basis,f.getColumnVector());  return new ParameterizationFunction(DoubleVector.wrap(m));}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void onEvent(Event e) throws Exception {  if (e.getTarget().getId().equals(ConfirmPanel.A_OK)) {    setDisplay();    createQuery();    dispose();  } else   if (e.getTarget().getId().equals(ConfirmPanel.A_CANCEL)) {    m_query=null;    m_display=null;    dispose();  }}  }
class C{  public final void addPoint(double x){  dataPoints++;  sumX+=x;  sumXSq+=x * x;}  }
class C{  public static int numRepositoryPackages(){  if (m_offline) {    return -1;  }  int numPackages=-1;  try {    PACKAGE_MANAGER.setPackageRepositoryURL(REP_URL);    String numPackagesS=PACKAGE_MANAGER.getPackageRepositoryURL().toString() + "/numPackages.txt";    URLConnection conn=null;    URL connURL=new URL(numPackagesS);    if (PACKAGE_MANAGER.setProxyAuthentication(connURL)) {      conn=connURL.openConnection(PACKAGE_MANAGER.getProxy());    } else {      conn=connURL.openConnection();    }    conn.setConnectTimeout(30000);    BufferedReader bi=new BufferedReader(new InputStreamReader(conn.getInputStream()));    String n=bi.readLine();    try {      numPackages=Integer.parseInt(n);    } catch (    NumberFormatException ne) {      System.err.println("[WekaPackageManager] problem parsing number " + "of packages from server.");    }    bi.close();  } catch (  Exception ex) {    ex.printStackTrace();  }  return numPackages;}  }
class C{  public static CCDeccelAmplitude action(CCIntervalAction action,float d){  return new CCDeccelAmplitude(action,d);}  }
class C{  private IncompatibleTypes compareTypes(Type expectedType,Type actualType,boolean ignoreBaseType){  if (expectedType == actualType) {    return IncompatibleTypes.SEEMS_OK;  }  String expectedString=GenericUtilities.getString(expectedType);  String actualString=GenericUtilities.getString(actualType);  if (expectedString.equals(actualString)) {    return IncompatibleTypes.SEEMS_OK;  }  if (expectedType.equals(Type.OBJECT)) {    return IncompatibleTypes.SEEMS_OK;  }  String objString=GenericUtilities.getString(Type.OBJECT);  if (expectedString.equals(objString)) {    return IncompatibleTypes.SEEMS_OK;  }  TypeCategory expectedCat=GenericUtilities.getTypeCategory(expectedType);  TypeCategory argCat=GenericUtilities.getTypeCategory(actualType);  if (actualString.equals(objString) && expectedCat == TypeCategory.TYPE_VARIABLE) {    return IncompatibleTypes.SEEMS_OK;  }  if (expectedCat == TypeCategory.WILDCARD) {    return IncompatibleTypes.SEEMS_OK;  }  if (ignoreBaseType) {    if (expectedCat == TypeCategory.PARAMETERIZED && argCat == TypeCategory.PARAMETERIZED) {      GenericObjectType parmGeneric=(GenericObjectType)expectedType;      GenericObjectType argGeneric=(GenericObjectType)actualType;      return compareTypeParameters(parmGeneric,argGeneric);    }    return IncompatibleTypes.SEEMS_OK;  }  if (actualType.equals(Type.OBJECT) && expectedCat == TypeCategory.ARRAY_TYPE) {    return IncompatibleTypes.ARRAY_AND_OBJECT;  }  if (expectedCat == TypeCategory.PLAIN_OBJECT_TYPE && argCat == TypeCategory.PLAIN_OBJECT_TYPE) {    return IncompatibleTypes.getPriorityForAssumingCompatible(expectedType,actualType,false);  }  if (expectedCat == TypeCategory.PARAMETERIZED && argCat == TypeCategory.PLAIN_OBJECT_TYPE) {    return IncompatibleTypes.getPriorityForAssumingCompatible((GenericObjectType)expectedType,actualType);  }  if (expectedCat == TypeCategory.PLAIN_OBJECT_TYPE && argCat == TypeCategory.PARAMETERIZED) {    return IncompatibleTypes.getPriorityForAssumingCompatible((GenericObjectType)actualType,expectedType);  }  if (expectedCat == TypeCategory.WILDCARD_EXTENDS || expectedCat == TypeCategory.WILDCARD_SUPER) {    return compareTypes(((GenericObjectType)expectedType).getExtension(),actualType,ignoreBaseType);  }  if (expectedCat == TypeCategory.TYPE_VARIABLE || argCat == TypeCategory.TYPE_VARIABLE) {    return IncompatibleTypes.SEEMS_OK;  }  if (expectedCat == TypeCategory.ARRAY_TYPE && argCat == TypeCategory.ARRAY_TYPE) {    ArrayType parmArray=(ArrayType)expectedType;    ArrayType argArray=(ArrayType)actualType;    if (parmArray.getDimensions() != argArray.getDimensions()) {      return IncompatibleTypes.ARRAY_AND_NON_ARRAY;    }    return compareTypes(parmArray.getBasicType(),argArray.getBasicType(),ignoreBaseType);  }  if (expectedCat == TypeCategory.ARRAY_TYPE ^ argCat == TypeCategory.ARRAY_TYPE) {    return IncompatibleTypes.ARRAY_AND_NON_ARRAY;  }  if (expectedCat == TypeCategory.PARAMETERIZED && argCat == TypeCategory.PARAMETERIZED) {    GenericObjectType parmGeneric=(GenericObjectType)expectedType;    GenericObjectType argGeneric=(GenericObjectType)actualType;{      IncompatibleTypes result=compareTypes(parmGeneric.getObjectType(),argGeneric.getObjectType(),ignoreBaseType);      if (!result.equals(IncompatibleTypes.SEEMS_OK)) {        return result;      }    }    return compareTypeParameters(parmGeneric,argGeneric);  }  if (false) {    if (expectedCat == TypeCategory.PARAMETERIZED ^ argCat == TypeCategory.PARAMETERIZED) {      return IncompatibleTypes.SEEMS_OK;    }  }  if (expectedCat == TypeCategory.WILDCARD) {    return IncompatibleTypes.SEEMS_OK;  }  if (expectedType instanceof BasicType || actualType instanceof BasicType) {    throw new IllegalArgumentException("checking for compatibility of " + expectedType + " with "+ actualType);  }  return IncompatibleTypes.SEEMS_OK;}  }
class C{  final String convertTransform(TransformStackElement transformElement){  StringBuffer transformString=new StringBuffer();  double[] transformParameters=transformElement.getTransformParameters();switch (transformElement.getType().toInt()) {case TransformType.TRANSFORM_TRANSLATE:    if (!transformElement.isIdentity()) {      transformString.append(TRANSFORM_TRANSLATE);      transformString.append(OPEN_PARENTHESIS);      transformString.append(doubleString(transformParameters[0]));      transformString.append(COMMA);      transformString.append(doubleString(transformParameters[1]));      transformString.append(CLOSE_PARENTHESIS);    }  break;case TransformType.TRANSFORM_ROTATE:if (!transformElement.isIdentity()) {  transformString.append(TRANSFORM_ROTATE);  transformString.append(OPEN_PARENTHESIS);  transformString.append(doubleString(radiansToDegrees * transformParameters[0]));  transformString.append(CLOSE_PARENTHESIS);}break;case TransformType.TRANSFORM_SCALE:if (!transformElement.isIdentity()) {transformString.append(TRANSFORM_SCALE);transformString.append(OPEN_PARENTHESIS);transformString.append(doubleString(transformParameters[0]));transformString.append(COMMA);transformString.append(doubleString(transformParameters[1]));transformString.append(CLOSE_PARENTHESIS);}break;case TransformType.TRANSFORM_SHEAR:if (!transformElement.isIdentity()) {transformString.append(TRANSFORM_MATRIX);transformString.append(OPEN_PARENTHESIS);transformString.append(1);transformString.append(COMMA);transformString.append(doubleString(transformParameters[1]));transformString.append(COMMA);transformString.append(doubleString(transformParameters[0]));transformString.append(COMMA);transformString.append(1);transformString.append(COMMA);transformString.append(0);transformString.append(COMMA);transformString.append(0);transformString.append(CLOSE_PARENTHESIS);}break;case TransformType.TRANSFORM_GENERAL:if (!transformElement.isIdentity()) {transformString.append(TRANSFORM_MATRIX);transformString.append(OPEN_PARENTHESIS);transformString.append(doubleString(transformParameters[0]));transformString.append(COMMA);transformString.append(doubleString(transformParameters[1]));transformString.append(COMMA);transformString.append(doubleString(transformParameters[2]));transformString.append(COMMA);transformString.append(doubleString(transformParameters[3]));transformString.append(COMMA);transformString.append(doubleString(transformParameters[4]));transformString.append(COMMA);transformString.append(doubleString(transformParameters[5]));transformString.append(CLOSE_PARENTHESIS);}break;default :throw new Error();}return transformString.toString();}  }
class C{  public void focusGained(FocusEvent e){  comboBox.repaint();}  }
class C{  public static void nestedBeanNull(String currentField,String destinationClass,String destinationField,String sourceClass,String sourceField){  throw new NestedBeanNullException(MSG.INSTANCE.message(nestedBeanNullException,currentField,destinationClass,destinationField,sourceClass,sourceField));}  }
class C{  public Builder convertRatesTo(TimeUnit rateUnit){  this.rateUnit=rateUnit;  return this;}  }
class C{  private void generateBanner(World world,BlockPos pos){  final BlockPos newPos=world.getTopSolidOrLiquidBlock(pos);  world.setBlockState(newPos,Blocks.STANDING_BANNER.getDefaultState());  final TileEntity tileEntity=world.getTileEntity(newPos);  if (tileEntity instanceof TileEntityBanner) {    ((TileEntityBanner)tileEntity).setItemValues(bannerStack);  }}  }
class C{  protected void initQuery(QueryModel queryModel) throws QueryExecutionException {  StandardLogService.setThreadName(StandardLogService.getPartitionID(queryModel.getAbsoluteTableIdentifier().getCarbonTableIdentifier().getTableName()),queryModel.getQueryId());  LOGGER.info("Query will be executed on table: " + queryModel.getAbsoluteTableIdentifier().getCarbonTableIdentifier().getTableName());  queryProperties.queryStatisticsRecorder=new QueryStatisticsRecorder(queryModel.getQueryId());  queryModel.setStatisticsRecorder(queryProperties.queryStatisticsRecorder);  QueryUtil.resolveQueryModel(queryModel);  QueryStatistic queryStatistic=new QueryStatistic();  try {    queryProperties.dataBlocks=BlockIndexStore.getInstance().loadAndGetBlocks(queryModel.getTableBlockInfos(),queryModel.getAbsoluteTableIdentifier());  } catch (  IndexBuilderException e) {    throw new QueryExecutionException(e);  }  queryStatistic.addStatistics("Time taken to load the Block(s) In Executor",System.currentTimeMillis());  queryProperties.queryStatisticsRecorder.recordStatistics(queryStatistic);  queryProperties.keyStructureInfo=getKeyStructureInfo(queryModel,queryProperties.dataBlocks.get(queryProperties.dataBlocks.size() - 1).getSegmentProperties().getDimensionKeyGenerator());  int aggTypeCount=queryModel.getQueryMeasures().size() + queryModel.getExpressions().size();  Iterator<DimensionAggregatorInfo> iterator=queryModel.getDimAggregationInfo().iterator();  while (iterator.hasNext()) {    aggTypeCount+=iterator.next().getAggList().size();  }  int currentIndex=0;  String[] aggTypes=new String[aggTypeCount];  DataType[] dataTypes=new DataType[aggTypeCount];  for (  DimensionAggregatorInfo dimensionAggregationInfo : queryModel.getDimAggregationInfo()) {    for (int i=0; i < dimensionAggregationInfo.getAggList().size(); i++) {      aggTypes[currentIndex]=dimensionAggregationInfo.getAggList().get(i);      dataTypes[currentIndex]=dimensionAggregationInfo.getDim().getDataType();      currentIndex++;    }  }  for (int i=0; i < queryModel.getExpressions().size(); i++) {    aggTypes[currentIndex]=CarbonCommonConstants.CUSTOM;    dataTypes[currentIndex]=DataType.STRING;    currentIndex++;  }  for (  QueryMeasure carbonMeasure : queryModel.getQueryMeasures()) {    aggTypes[currentIndex]=carbonMeasure.getAggregateFunction();    dataTypes[currentIndex]=carbonMeasure.getMeasure().getDataType();    currentIndex++;  }  queryProperties.measureDataTypes=dataTypes;  queryProperties.measureAggregators=MeasureAggregatorFactory.getMeassureAggregator(aggTypes,dataTypes,queryModel.getExpressions());  queryProperties.aggExpressionStartIndex=aggTypes.length - queryModel.getExpressions().size() - queryModel.getQueryMeasures().size();  queryProperties.measureStartIndex=aggTypes.length - queryModel.getQueryMeasures().size();  queryProperties.complexFilterDimension=QueryUtil.getAllFilterDimensions(queryModel.getFilterExpressionResolverTree());  queryStatistic=new QueryStatistic();  queryProperties.columnToDictionayMapping=QueryUtil.getDimensionDictionaryDetail(queryModel.getQueryDimension(),queryModel.getDimAggregationInfo(),queryModel.getExpressions(),queryProperties.complexFilterDimension,queryModel.getAbsoluteTableIdentifier());  queryStatistic.addStatistics("Time taken to load the Dictionary In Executor",System.currentTimeMillis());  queryProperties.queryStatisticsRecorder.recordStatistics(queryStatistic);  queryModel.setColumnToDictionaryMapping(queryProperties.columnToDictionayMapping);  queryProperties.sortDimIndexes=new byte[queryModel.getQueryDimension().size()];}  }
class C{  public static long computeCheckSum(byte[] buf){  long sum=0;  for (int i=0; i < buf.length; ++i) {    sum+=BYTE_MASK & buf[i];  }  return sum;}  }
class C{  protected int computeObjectSample(LatLon pos){  if (this.pathPositions.size() < 2)   return -1;  double radius=this.wwd.getModel().getGlobe().getRadius();  double maxDistanceFromPath=1000;  double distanceFromStart=0;  int segmentIndex=0;  LatLon pos1=this.pathPositions.get(segmentIndex);  for (int i=1; i < this.pathPositions.size(); i++) {    LatLon pos2=this.pathPositions.get(i);    double segmentLength=LatLon.greatCircleDistance(pos1,pos2).radians * radius;    Vec4 v0=new Vec4(pos.getLatitude().radians,pos.getLongitude().radians,0,0);    Vec4 v1=new Vec4(pos1.getLatitude().radians,pos1.getLongitude().radians,0,0);    Vec4 v2=new Vec4(pos2.getLatitude().radians,pos2.getLongitude().radians,0,0);    Line line=new Line(v1,v2.subtract3(v1));    if (line.distanceTo(v0) * radius <= maxDistanceFromPath) {      double length1=LatLon.greatCircleDistance(pos1,pos).radians * radius;      double length2=LatLon.greatCircleDistance(pos2,pos).radians * radius;      if (length1 <= segmentLength && length2 <= segmentLength) {        distanceFromStart+=length1 / (length1 + length2) * segmentLength;        break;      } else       distanceFromStart+=segmentLength;    } else     distanceFromStart+=segmentLength;    pos1=pos2;  }  double pathLength=this.computePathLength();  return distanceFromStart < pathLength ? (int)(distanceFromStart / pathLength * this.samples) : -1;}  }
class C{  private List<Integer> convertToList(int[] data){  Integer[] wrapperType=ArrayUtils.toObject(data);  return Arrays.asList(wrapperType);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case SexecPackage.EXECUTION__STATEMENT:    return basicSetStatement(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public void runCheck(){  AbstractPlausibilityWarning.setNetwork(network);  for (  TransitLine transitLine : this.schedule.getTransitLines().values()) {    for (    TransitRoute transitRoute : transitLine.getRoutes().values()) {      Double directionChangeThreshold=thresholds.get(transitRoute.getTransportMode());      Iterator<TransitRouteStop> stopsIterator=transitRoute.getStops().iterator();      List<Link> links=NetworkTools.getLinksFromIds(network,getTransitRouteLinkIds(transitRoute));      Map<Node,Tuple<Link,Link>> nodesInRoute=new HashMap<>();      Set<List<Id<Link>>> loops=new HashSet<>();      TransitRouteStop previousStop=stopsIterator.next();      TransitRouteStop nextStop=stopsIterator.next();      double ttActual=0;      double departTime=previousStop.getDepartureOffset();      for (int i=0; i < links.size() - 2; i++) {        Link linkFrom=links.get(i);        Link linkTo=links.get(i + 1);        ttActual+=linkFrom.getLength() / linkFrom.getFreespeed();        if (nextStop.getStopFacility().getLinkId().equals(linkTo.getId())) {          double ttSchedule=nextStop.getArrivalOffset() - departTime;          if (ttActual > ttSchedule) {            PlausibilityWarning warning=new TravelTimeWarning(transitLine,transitRoute,previousStop,nextStop,ttActual,ttSchedule);            addWarningToContainers(warning);          }          ttActual=0;          previousStop=nextStop;          departTime=previousStop.getDepartureOffset();          if (!nextStop.equals(transitRoute.getStops().get(transitRoute.getStops().size() - 1))) {            nextStop=stopsIterator.next();          }        }        Tuple<Link,Link> tuple=nodesInRoute.put(linkFrom.getToNode(),new Tuple<>(linkFrom,linkTo));        if (tuple != null && !linkFrom.equals(tuple.getSecond())) {          loops.add(ScheduleTools.getLoopSubRouteLinkIds(transitRoute,tuple.getSecond().getId(),linkFrom.getId()));        }        if (directionChangeThreshold != null) {          double angleDiff=CoordTools.getAzimuthDiff(linkFrom,linkTo);          if (Math.abs(angleDiff) > directionChangeThreshold && linkFrom.getLength() > 0 && linkTo.getLength() > 0 && angleDiff != PI) {            PlausibilityWarning warning=new DirectionChangeWarning(transitLine,transitRoute,linkFrom,linkTo,directionChangeThreshold,angleDiff);            addWarningToContainers(warning);          }        }      }      Set<List<Id<Link>>> subsetLoops=new HashSet<>();      for (      List<Id<Link>> loop1 : loops) {        for (        List<Id<Link>> loop2 : loops) {          if (!loop1.equals(loop2) && MiscUtils.listIsSubset(loop1,loop2)) {            subsetLoops.add(loop1);          }        }      }      for (      List<Id<Link>> loop : loops) {        if (!subsetLoops.contains(loop)) {          PlausibilityWarning warning=new LoopWarning(transitLine,transitRoute,loop);          addWarningToContainers(warning);        }      }    }  }}  }
class C{  public static int[] cs_randperm(int n,int seed){  int p[], k, j, t;  if (seed == 0)   return (null);  p=new int[n];  for (k=0; k < n; k++)   p[k]=n - k - 1;  if (seed == -1)   return (p);  Random r=new Random(seed);  for (k=0; k < n; k++) {    j=k + r.nextInt(n - k);    t=p[j];    p[j]=p[k];    p[k]=t;  }  return (p);}  }
class C{  @Provides @Config("sheetRegistrarInterval") public static Duration provideSheetRegistrarInterval(){  return Duration.standardHours(1);}  }
class C{  protected LocalReactionImpl(){  super();}  }
class C{  public void runOnMainSync(Runnable runner){  validateNotAppThread();  SyncRunnable sr=new SyncRunnable(runner);  mThread.getHandler().post(sr);  sr.waitForComplete();}  }
class C{  public static boolean verify(PublicKey publicKey,byte[] sig,ByteBuffer data) throws InvalidKeyException, SignatureException {  int oldPos=data.position();  Signature signature=null;  try {    signature=Signature.getInstance("SHA1withRSA");    signature.initVerify(publicKey);    signature.update(data);    boolean verify=signature.verify(sig);    return verify;  } catch (  NoSuchAlgorithmException e) {  } finally {    data.position(oldPos);  }  return false;}  }
class C{  public void testClear() throws Exception {  IgniteCache cache=cacheForIndex(0);  int key=primaryKey0(grid(0),cache);  cache.put(key,1);  cache.clear();  for (int i=0; i < GRID_CNT; i++) {    IgniteCache cache0=cacheForIndex(i);    cache0.removeAll();    assert cache0.localSize() == 0;  }  cache.put(key,1);  cache.clear();  assertEquals(0,cache.size());}  }
class C{  private CFirstStartDialog(final Window parent){  super(parent,"Welcome to BinNavi",ModalityType.APPLICATION_MODAL);  setLayout(new BorderLayout());  setSize(450,417);  setResizable(false);  GuiHelper.centerChildToParent(parent,this,true);  final JPanel centerPanel=new JPanel(new BorderLayout());  final ImagePanel panel=new ImagePanel(new ImageIcon(CMain.class.getResource("data/startup_logo.png")).getImage());  centerPanel.add(panel,BorderLayout.WEST);  final JTextArea area=new JTextArea("Welcome to BinNavi" + "\n\n" + "This is the first time you are using BinNavi on this computer. "+ "If you have never used BinNavi before, you should familiarize "+ "yourself with the basic concepts of BinNavi."+ "\n\n"+ "To learn about these concepts you can either read the manual or use "+ "one of the interactive tutorials you can find in the Help menu of the "+ "BinNavi main window."+ "\n\n"+ "If you just want to get started, you should configure the database "+ "you can find on the left side of the main window. Once you have "+ "successfully established a connection to the database you want to use, "+ "you can start to import disassembly data from an external data source like IDA Pro.");  area.setBorder(new EmptyBorder(5,5,5,5));  area.setWrapStyleWord(true);  area.setLineWrap(true);  area.setEditable(false);  final JPanel innerPanel=new JPanel(new BorderLayout());  innerPanel.setBorder(new LineBorder(Color.BLACK,1));  innerPanel.add(area);  centerPanel.add(innerPanel);  add(centerPanel);  final JPanel bottomPanel=new JPanel(new BorderLayout());  bottomPanel.setBorder(new EmptyBorder(5,5,5,5));  final JButton closeButton=new JButton(new CloseAction());  bottomPanel.add(closeButton,BorderLayout.EAST);  add(bottomPanel,BorderLayout.SOUTH);  getRootPane().setDefaultButton(closeButton);  new CDialogEscaper(this);}  }
class C{  public Quaternionf fromAxisAngleRad(float axisX,float axisY,float axisZ,float angle){  float hangle=angle / 2.0f;  float sinAngle=(float)Math.sin(hangle);  float vLength=(float)Math.sqrt(axisX * axisX + axisY * axisY + axisZ * axisZ);  x=axisX / vLength * sinAngle;  y=axisY / vLength * sinAngle;  z=axisZ / vLength * sinAngle;  w=(float)Math.cos(hangle);  return this;}  }
class C{  @Override public InsertData visit(final ASTInsertData node,final Object data) throws VisitorException {  final InsertData op=new InsertData();  op.setData(doUnparsedQuadsDataBlock(node,data,false,true));  return op;}  }
class C{  private final void addToTokenQueue(String s){  m_compiler.getTokenQueue().addElement(s);}  }
class C{  @OnClick(R.id.bottom_sheet_header) public void openButtonSheet(View v){  bottomSheetBehavior.setState(STATE_EXPANDED);}  }
class C{  public Value sample(){  if (distrib instanceof IndependentDistribution) {    return ((IndependentDistribution)distrib).sample();  }  Assignment inputSample=new Assignment();  for (  BNode inputNode : inputNodes.values()) {    if (inputNode instanceof ChanceNode) {      inputSample.addPair(inputNode.getId(),((ChanceNode)inputNode).sample());    } else     if (inputNode instanceof ActionNode) {      inputSample.addPair(inputNode.getId(),((ActionNode)inputNode).sample());    }  }  return sample(inputSample);}  }
class C{  public void removeZoomListener(ZoomListener listener){  if (mPinchZoom != null) {    mPinchZoom.removeZoomListener(listener);  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.BOOL_EXPR___LITERAL_1:    setLiteral_1(LITERAL_1_EDEFAULT);  return;case UmplePackage.BOOL_EXPR___NAME_1:setName_1(NAME_1_EDEFAULT);return;case UmplePackage.BOOL_EXPR___EQUALITY_OP_1:getEqualityOp_1().clear();return;case UmplePackage.BOOL_EXPR___INDEX_1:setIndex_1(INDEX_1_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public LetterValidator(@NonNull final CharSequence errorMessage,@NonNull final Case caseSensitivity,final boolean allowSpaces,@NonNull final char... allowedCharacters){  super(errorMessage);  setCaseSensitivity(caseSensitivity);  allowSpaces(allowSpaces);  setAllowedCharacters(allowedCharacters);}  }
class C{  public void addValue(double value,double weight){  m_WeightedSum+=value * weight;  m_WeightedSumSquared+=value * value * weight;  m_SumOfWeights+=weight;}  }
class C{  private static boolean checkLineHeaderPosition(Editable editable,int start,int before,int after){  if (start == 0 || EditUtils.findBeforeNewLineChar(editable,start) + 1 == start) {    int end=EditUtils.findNextNewLineCharCompat(editable,start);    if (getOrderListSpan(editable,start,true) != null || getUnOrderListSpan(editable,start,true) != null || getOrderListSpan(editable,start + 1 > end ? start : end,true) != null || getUnOrderListSpan(editable,start + 1 > end ? start : end,true) != null) {      return false;    }    boolean bool=isUnOrderList(editable,start,false);    if (bool) {      return bool;    }    return isOrderList(editable,start,false);  }  return false;}  }
class C{  @RequestMapping(value={"/create","/{id}"},params="action=save",method=POST) public Callable<String> saveTodo(@Valid @ModelAttribute Todo todo,BindingResult bindingResult,Model model){  return null;}  }
class C{  public void truncate(long param1) throws SQLException {  throw new FBDriverNotCapableException("Method truncate(long) is not supported");}  }
class C{  public static Bootique app(Collection<String> args){  if (args == null) {    args=Collections.emptyList();  }  return app(toArray(Objects.requireNonNull(args)));}  }
class C{  public void reset(){}  }
class C{  public void store(char value,Offset offset){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);}  }
class C{  public void unlockItemOffer(){  boolean myRes=unlockItemOfferInternally(partnerName);  boolean otherRes=false;  Player partner=SingletonRepository.getRuleProcessor().getPlayer(partnerName);  if (partner != null) {    otherRes=partner.unlockTradeItemOfferInternally(player.getName());  }  if (myRes || otherRes) {    tellClients();  }}  }
class C{  private static boolean checkCompatible(MetadataKey<?> first,MetadataKey<?> second){  boolean compatible=true;  Class<?> firstType=first.getDatatype();  Class<?> secondType=second.getDatatype();  if (firstType != secondType) {    logger.warning("Incompatible datatypes.  First(" + first + "): "+ firstType+ " but Second("+ second+ "): "+ secondType);    compatible=false;  }  return compatible;}  }
class C{  public SubscriptionStillActiveException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  private RandomUtil(){  this(new Date().getTime());}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static Map<String,CompiledClass> parseClassFiles(List<File> classFiles){  Map<String,CompiledClass> result=new HashMap<String,CompiledClass>();  for (  File file : classFiles) {    try {      CompiledClass parsed=CompiledClass.getInstance(file);      if (!parsed.isInterface()) {        result.put(parsed.fullyQualifiedName(),parsed);      }    } catch (    IOException e) {      System.err.println("Exception while parsing " + file.getName() + ": "+ e.getMessage());    }  }  return result;}  }
class C{  public void insertString(DocumentFilter.FilterBypass fb,int offset,String text,AttributeSet attrs) throws BadLocationException {  text=replaceMetaCharacters(text);  fb.insertString(offset,text,attrs);  parseDocument(offset,text.length());}  }
class C{  public void writeName(final String name) throws IOException {  mPointers.writeInt(mDataSize);  final byte[] rawChars=name.getBytes();  mNameData.write(rawChars);  mNameData.write(0);  mDataSize+=rawChars.length + 1;}  }
class C{  private void updateSecondaryIndices(Entity entity,IEntityClass entityClass,Long deviceKey){  for (  DeviceIndex index : secondaryIndexMap.values()) {    index.updateIndex(entity,deviceKey);  }  ClassState state=getClassState(entityClass);  for (  DeviceIndex index : state.secondaryIndexMap.values()) {    index.updateIndex(entity,deviceKey);  }}  }
class C{  public KernelBasisFunction[] createKernels(double[][] x,int numKernels) throws OperatorException {  KernelBasisFunction[] kernels=new KernelBasisFunction[numKernels];  KernelBasisFunction kernel=null;  double[] input;  double lengthScale=getParameterAsDouble(PARAMETER_KERNEL_LENGTHSCALE);  double bias=getParameterAsDouble(PARAMETER_KERNEL_BIAS);  double degree=getParameterAsDouble(PARAMETER_KERNEL_DEGREE);  double a=getParameterAsDouble(PARAMETER_KERNEL_A);  double b=getParameterAsDouble(PARAMETER_KERNEL_B);  double sigma1=getParameterAsDouble(PARAMETER_KERNEL_SIGMA1);  double sigma2=getParameterAsDouble(PARAMETER_KERNEL_SIGMA2);  double sigma3=getParameterAsDouble(PARAMETER_KERNEL_SIGMA3);  double shift=getParameterAsDouble(PARAMETER_KERNEL_SHIFT);  for (int j=0; j < numKernels - 1; j++) {    input=x[j];switch (getParameterAsInt(PARAMETER_KERNEL_TYPE)) {case 0:      kernel=new KernelBasisFunction(new KernelRadial(lengthScale),input);    break;case 1:  kernel=new KernelBasisFunction(new KernelCauchy(lengthScale),input);break;case 2:kernel=new KernelBasisFunction(new KernelLaplace(lengthScale),input);break;case 3:kernel=new KernelBasisFunction(new KernelPoly(lengthScale,bias,degree),input);break;case 4:kernel=new KernelBasisFunction(new KernelSigmoid(a,b),input);break;case 5:kernel=new KernelBasisFunction(new KernelEpanechnikov(sigma1,degree),input);break;case 6:kernel=new KernelBasisFunction(new KernelGaussianCombination(sigma1,sigma2,sigma3),input);break;case 7:kernel=new KernelBasisFunction(new KernelMultiquadric(sigma1,shift),input);break;default :kernel=new KernelBasisFunction(new KernelRadial(lengthScale),input);}kernels[j + 1]=kernel;}return kernels;}  }
class C{  private File createMultiBitRuntime() throws IOException {  File multiBitDirectory=FileHandler.createTempDirectory("multibit");  String multiBitDirectoryPath=multiBitDirectory.getAbsolutePath();  System.out.println("Building MultiBit runtime in : " + multiBitDirectory.getAbsolutePath());  File multibitProperties=new File(multiBitDirectoryPath + File.separator + "multibit.properties");  multibitProperties.createNewFile();  multibitProperties.deleteOnExit();  File multibitCheckpoints=new File(multiBitDirectoryPath + File.separator + "multibit.checkpoints");  FileHandler.copyFile(new File("./src/main/resources/multibit.checkpoints"),multibitCheckpoints);  multibitCheckpoints.deleteOnExit();  return multiBitDirectory;}  }
class C{  private void deleteMetadata(final Transaction tx,final List<String> nodeIds,final String pcjId){  requireNonNull(tx);  requireNonNull(nodeIds);  requireNonNull(pcjId);  try (final Transaction typeTx=tx){    deletePcjIdAndSparqlMetadata(typeTx,pcjId);    for (    final String nodeId : nodeIds) {      final NodeType type=NodeType.fromNodeId(nodeId).get();      deleteMetadataColumns(typeTx,nodeId,type.getMetaDataColumns());    }    typeTx.commit();  } }  }
class C{  protected void merge(Object in1,Object in2,Object out){  FlowSet inSet1=(FlowSet)in1, inSet2=(FlowSet)in2, outSet=(FlowSet)out;  inSet1.intersection(inSet2,outSet);}  }
class C{  private XmlHandler deleteClasses(Class<?>... classes){  for (  Class<?> clazz : classes)   if (xml.isInheritedMapped(clazz))   xml.deleteClass(clazz);  return this;}  }
class C{  protected void forwardReply(AbstractMRListener client,AbstractMRReply m){  ((SRCPListener)client).reply((SRCPReply)m);}  }
class C{  public WizardMavenSetup(String customPagePath){  this.nextPage=customPagePath;}  }
class C{  private void decode(byte[] data,int width,int height){  long start=System.currentTimeMillis();  Result rawResult=null;  byte[] rotatedData=new byte[data.length];  for (int y=0; y < height; y++) {    for (int x=0; x < width; x++)     rotatedData[x * height + height - y - 1]=data[x + y * width];  }  int tmp=width;  width=height;  height=tmp;  PlanarYUVLuminanceSource source=CameraManager.get().buildLuminanceSource(rotatedData,width,height);  BinaryBitmap bitmap=new BinaryBitmap(new HybridBinarizer(source));  try {    rawResult=multiFormatReader.decodeWithState(bitmap);  } catch (  ReaderException re) {  } finally {    multiFormatReader.reset();  }  if (rawResult != null) {    long end=System.currentTimeMillis();    Log.d(TAG,"Found barcode (" + (end - start) + " ms):\n"+ rawResult.toString());    Message message=Message.obtain(activity.getHandler(),R.id.decode_succeeded,rawResult);    Bundle bundle=new Bundle();    bundle.putParcelable(DecodeThread.BARCODE_BITMAP,source.renderCroppedGreyscaleBitmap());    message.setData(bundle);    message.sendToTarget();  } else {    Message message=Message.obtain(activity.getHandler(),R.id.decode_failed);    message.sendToTarget();  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.FUNCTION_EXPRESSION__ANNOTATION_LIST:    return getAnnotationList();case N4JSPackage.FUNCTION_EXPRESSION__TYPE_VARS:  return getTypeVars();case N4JSPackage.FUNCTION_EXPRESSION__NAME:return getName();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public final void testValidateSucceeds(){  DomainNameValidator domainNameValidator=new DomainNameValidator("foo");  assertTrue(domainNameValidator.validate(""));  assertTrue(domainNameValidator.validate("www.foo.com"));  assertTrue(domainNameValidator.validate("foo.com"));  assertTrue(domainNameValidator.validate("foo123.com"));  assertTrue(domainNameValidator.validate("foo-info.com"));  assertTrue(domainNameValidator.validate("sub.foo.com"));  assertTrue(domainNameValidator.validate("sub.foo-info.com"));  assertTrue(domainNameValidator.validate("foo.com.au"));  assertTrue(domainNameValidator.validate("sub.sub.foo.com"));  assertTrue(domainNameValidator.validate("g.co"));  assertTrue(domainNameValidator.validate("foo.t.t.co"));}  }
class C{  public static void waitMutex(final WaitCriterion waitCriterion,final Object mutex,final long milliseconds,final long pollingInterval,final boolean throwOnTimeout){  final long tilt=System.currentTimeMillis() + milliseconds;  long waitThisTime=jitterInterval(pollingInterval);synchronized (mutex) {    for (; ; ) {      if (waitCriterion.done()) {        break;      }      long timeLeft=tilt - System.currentTimeMillis();      if (timeLeft <= 0) {        if (!throwOnTimeout) {          return;        }        fail("Event never occurred after " + milliseconds + " ms: "+ waitCriterion.description());      }      if (waitThisTime > timeLeft) {        waitThisTime=timeLeft;      }      try {        mutex.wait(waitThisTime);      } catch (      InterruptedException e) {        fail("interrupted");      }    }  }}  }
class C{  static Vehicle createVehicle(CarrierVehicle carrierVehicle,Coord locationCoord){  Location.Builder vehicleLocationBuilder=Location.Builder.newInstance();  vehicleLocationBuilder.setId(carrierVehicle.getLocation().toString());  if (locationCoord != null) {    vehicleLocationBuilder.setCoordinate(Coordinate.newInstance(locationCoord.getX(),locationCoord.getY()));  }  Location vehicleLocation=vehicleLocationBuilder.build();  VehicleType vehicleType=createVehicleType(carrierVehicle.getVehicleType());  VehicleImpl.Builder vehicleBuilder=VehicleImpl.Builder.newInstance(carrierVehicle.getVehicleId().toString());  vehicleBuilder.setEarliestStart(carrierVehicle.getEarliestStartTime()).setLatestArrival(carrierVehicle.getLatestEndTime()).setStartLocation(vehicleLocation).setType(vehicleType);  VehicleImpl vehicle=vehicleBuilder.build();  assert carrierVehicle.getEarliestStartTime() == vehicle.getEarliestDeparture() : "carrierVeh must have the same earliestDep as vrpVeh";  assert carrierVehicle.getLatestEndTime() == vehicle.getLatestArrival() : "carrierVeh must have the same latestArr as vrpVeh";  assert carrierVehicle.getLocation().toString() == vehicle.getStartLocation().getId() : "locations must be equal";  return vehicle;}  }
class C{  public static ImageEncoder newInstance(String format){  ImageEncoder imageEncoder=null;  String className=(String)encoders.get(format);  if (className == null) {    throw new IllegalArgumentException("Unsupported image format - " + format);  }  try {    Class imageEncoderClass=Class.forName(className);    imageEncoder=(ImageEncoder)imageEncoderClass.newInstance();  } catch (  Exception e) {    throw new IllegalArgumentException(e.toString());  }  return imageEncoder;}  }
class C{  public void waitForEventQueueBecomesEmpty(){synchronized (eventQueue) {    while (!eventQueue.isEmpty()) {      try {        eventQueue.wait(100);      } catch (      InterruptedException e) {      }    }  }}  }
class C{  void torsoTwist(int twistDirection){  int direction=ce().getSecondaryFacing();  if (twistDirection == 0) {    clearAttacks();    direction=ce().clipSecondaryFacing((direction + 5) % 6);    attacks.addElement(new TorsoTwistAction(cen,direction));    ce().setSecondaryFacing(direction);    refreshAll();  } else   if (twistDirection == 1) {    clearAttacks();    direction=ce().clipSecondaryFacing((direction + 7) % 6);    attacks.addElement(new TorsoTwistAction(cen,direction));    ce().setSecondaryFacing(direction);    refreshAll();  }}  }
class C{  private boolean processInlineGuard(IR ir,Instruction cb,BasicBlock bb){  BasicBlock targetBlock=cb.getBranchTarget();  Instruction targetLabel=targetBlock.firstInstruction();  Instruction targetInst=firstRealInstructionFollowing(targetLabel);  if (targetInst == null || targetInst == cb) {    return false;  }  boolean endsBlock=cb.nextInstructionInCodeOrder().operator() == BBEND;  if (endsBlock) {    Instruction nextLabel=firstLabelFollowing(cb);    if (targetLabel == nextLabel) {      cb.remove();      return true;    }    Instruction nextI=firstRealInstructionFollowing(nextLabel);    if (nextI != null && Goto.conforms(nextI)) {      cb.insertAfter(nextI.copyWithoutLinks());      bb.recomputeNormalOut(ir);      return true;    }  }  BasicBlock fallThrough=bb.getFallThroughBlock();  if (fallThrough != null) {    Instruction fallThroughInstruction=fallThrough.firstRealInstruction();    if ((fallThroughInstruction != null) && Goto.conforms(fallThroughInstruction)) {      bb.appendInstruction(fallThroughInstruction.copyWithoutLinks());      bb.recomputeNormalOut(ir);    }  }  if (Goto.conforms(targetInst)) {    InlineGuard.setTarget(cb,(BranchOperand)Goto.getTarget(targetInst).copy());    bb.recomputeNormalOut(ir);    return true;  }  if (targetBlock.isEmpty()) {    BasicBlock nextBlock=targetBlock.getFallThroughBlock();    InlineGuard.setTarget(cb,nextBlock.makeJumpTarget());    bb.recomputeNormalOut(ir);    return true;  }  return false;}  }
class C{  public FullpathSorter(boolean ascending){  super(ascending);}  }
class C{  public boolean isWritable(){  return isWritable;}  }
class C{  private FHTreeStateNode createNodeForValue(Object value,int childIndex){  return new FHTreeStateNode(value,childIndex,-1);}  }
class C{  public void startEventLog(String tenant) throws ClientException, ClientProtocolException, WebApplicationException, HttpException, IOException {  startEventLog(tenant,null);}  }
class C{  public void testInvalidManifest() throws Exception {  String warningMessage=MinSdkDetectorTest.class.getSimpleName() + "_" + Thread.currentThread().getStackTrace()[1].getMethodName()+ ": Warning: "+ MinSdkDetector.ISSUE.getBriefDescription(TextFormat.TEXT)+ " ["+ MinSdkDetector.ISSUE.getId()+ "]\n"+ "0 errors, 1 warnings\n";  assertEquals(warningMessage,lintFiles("InvalidAndroidManifest.xml=>AndroidManifest.xml"));}  }
class C{  public double value(){  return _map._values[_index];}  }
class C{  public CropTransformation(int left,int top,int width,int height){  mLeft=left;  mTop=top;  mWidth=width;  mHeight=height;}  }
class C{  @Override public boolean wake(){  return true;}  }
class C{  final public static float[] earthCircle(float phi1,float lambda0,float c,float s,float e,int n){  return earthCircle(phi1,lambda0,c,s,e,n,new float[n << 1]);}  }
class C{  void copyVertex(ValueGraphVertex v){  this.label=v.label;  this.valueNumber=v.valueNumber;  this.arity=v.arity;  this.targets=new ValueGraphVertex[v.targets.length];  for (int i=0; i < targets.length; i++) {    this.targets[i]=v.targets[i];  }}  }
class C{  public String numFoldsTipText(){  return "Determines the amount of data used for backfitting. One fold is used for " + "backfitting, the rest for growing the tree. (Default: 0, no backfitting)";}  }
class C{  public int compareTo(Object o){  if (o == null)   return 0;  MRegistrationValue oo=(MRegistrationValue)o;  int compare=getSeqNo() - oo.getSeqNo();  return compare;}  }
class C{  private void initialize(){  this.setOrder(EXTENSION_ORDER);  this.customParsers=new LinkedList<>();  this.customFetchFilters=new LinkedList<>();  this.customParseFilters=new LinkedList<>();  this.scanController=new SpiderScanController(this);}  }
class C{  private static Bitmap loadBitmapOptimized(ImageSource source,int limit) throws ImageLoadException {  int scale=getScaleFactor(source.getImageMetadata(),limit);  return loadBitmap(source,scale);}  }
class C{  public void endDocument() throws IOException {  writer.flush();}  }
class C{  protected SystemUser(){}  }
class C{  public void testNullStoredBytesRefFieldReuse() throws Exception {  Directory dir=newDirectory();  Analyzer analyzer=new MockAnalyzer(random());  IndexWriter iw=new IndexWriter(dir,new IndexWriterConfig(analyzer));  Document doc=new Document();  Field theField=new StoredField("foo",new BytesRef("hello"));  doc.add(theField);  iw.addDocument(doc);  expectThrows(IllegalArgumentException.class,null);  assertNull(iw.getTragicException());  iw.close();  DirectoryReader r=DirectoryReader.open(dir);  assertEquals(1,r.numDocs());  r.close();  dir.close();}  }
class C{  public static int beSVar(byte[] data,int bci,boolean fourByte){  if (fourByte) {    return beS4(data,bci);  } else {    return beS2(data,bci);  }}  }
class C{  public static void print(PrintWriter pw,String value){  pw.write(value + "\n");  pw.flush();}  }
class C{  public static String createInsertQuery(String table,String[] fieldNames){  if (fieldNames == null) {    throw new IllegalArgumentException("Field names may not be null");  }  StringBuilder insertQuery=new StringBuilder();  insertQuery.append("INSERT INTO ");  insertQuery.append(table);  if (fieldNames.length > 0 && fieldNames[0] != null) {    insertQuery.append(" (");    for (int i=0; i < fieldNames.length; i++) {      insertQuery.append(fieldNames[i]);      if (i != fieldNames.length - 1) {        insertQuery.append(",");      }    }    insertQuery.append(")");  }  insertQuery.append(" VALUES (");  for (int i=0; i < fieldNames.length; i++) {    insertQuery.append("?");    if (i != fieldNames.length - 1) {      insertQuery.append(",");    }  }  insertQuery.append(")");  LOG.info("Insert into: ");  LOG.info(insertQuery.toString());  return insertQuery.toString();}  }
class C{  private int calculateLayoutWidth(int widthSize,int mode){  mItemsLayout.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT));  mItemsLayout.measure(MeasureSpec.makeMeasureSpec(widthSize,MeasureSpec.UNSPECIFIED),MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED));  int width=mItemsLayout.getMeasuredWidth();  if (mode == MeasureSpec.EXACTLY) {    width=widthSize;  } else {    width+=2 * mItemsPadding;    width=Math.max(width,getSuggestedMinimumWidth());    if (mode == MeasureSpec.AT_MOST && widthSize < width) {      width=widthSize;    }  }  mItemsLayout.measure(MeasureSpec.makeMeasureSpec(width - 2 * mItemsPadding,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED));  return width;}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.INDEXED_ACCESS_EXPRESSION;}  }
class C{  public InetUnixAddress(byte[] path){  super(AF_UNIX,path,null);}  }
class C{  private void showNotification(String text){  Notification notification=new Notification(R.drawable.stat_sample,text,System.currentTimeMillis());  PendingIntent contentIntent=PendingIntent.getActivity(this,0,new Intent(this,Controller.class),0);  notification.setLatestEventInfo(this,getText(R.string.service_start_arguments_label),text,contentIntent);  notification.flags|=Notification.FLAG_ONGOING_EVENT;  mNM.notify(R.string.service_created,notification);}  }
class C{  public AccountHeaderBuilder withCloseDrawerOnProfileListClick(boolean closeDrawerOnProfileListClick){  this.mCloseDrawerOnProfileListClick=closeDrawerOnProfileListClick;  return this;}  }
class C{  public void java_lang_Package_getSystemPackages0(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  helper.assignObjectTo(returnVar,Environment.v().getLeastArrayObject());}  }
class C{  protected void processDataObjectBindings(SourcePrinter out,WidgetCreatorContext context){  Iterator<String> dataObjects=context.iterateObjectDataBindingObjects();  while (dataObjects.hasNext()) {    String dataObjectAlias=dataObjects.next();    ObjectDataBinding dataBindingInfo=context.getObjectDataBinding(dataObjectAlias);    String dataObjectClassName=dataBindingInfo.getDataObjectClassName();    String dataObjectBinder=getDataObjectBinderVariable(dataObjectAlias,out);    Iterator<PropertyBindInfo> propertyBindings=dataBindingInfo.iterateBindings();    while (propertyBindings.hasNext()) {      try {        PropertyBindInfo bind=propertyBindings.next();        out.println(dataObjectBinder + ".addPropertyBinder(" + EscapeUtils.quote(context.getWidgetId())+ ", new "+ PropertyBinder.class.getCanonicalName()+ "<"+ dataObjectClassName+ ", "+ bind.getWidgetClassName()+ ">(){");        String converterDeclaration=bind.getConverterDeclaration();        if (converterDeclaration != null) {          out.println(converterDeclaration);        }        out.println("public void copyTo(" + dataObjectClassName + " dataObject){");        out.println(bind.getWriteExpression("dataObject"));        out.println("}");        out.println("public void copyFrom(" + dataObjectClassName + " dataObject){");        out.println(bind.getReadExpression("dataObject"));        out.println("}");        if (!StringUtils.isEmpty(bind.getUiObjectExpression())) {          out.println("public " + Element.class.getCanonicalName() + " getUiElement(){");          if (bind.isNativeElement()) {            out.println("return " + bind.getUIObjectVar(PropertyBindInfo.WIDGET_VAR_REF) + ";");          } else {            out.println("return " + bind.getUIObjectVar(PropertyBindInfo.WIDGET_VAR_REF) + ".getElement();");          }          out.println("}");        }        out.println("}, " + bind.isBoundToAttribute() + ");");      } catch (      NoSuchFieldException e) {        throw new CruxGeneratorException("Error processing data binding expression.",e);      }    }  }}  }
class C{  public DefaultToken(){  super();}  }
class C{  public static long parseDateAsEpoch(String dateStr){  try {    return DateUtils.parseDate(dateStr).getTime();  } catch (  DateParseException e) {    return 0;  }}  }
class C{  public AABB(final Vec2 lowerVertex,final Vec2 upperVertex){  this.lowerBound=lowerVertex.clone();  this.upperBound=upperVertex.clone();}  }
class C{  public static Object prepareObject(Object object,Offset offset){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return null;}  }
class C{  public void ensureCapacity(int minCapacity){  if (table.length < minCapacity) {    int newCapacity=nextPrime(minCapacity);    rehash(newCapacity);  }}  }
class C{  public JobCreateRequest createJobCreateRequest(String namespaceCd,String jobName){  List<Parameter> parameters=new ArrayList<>();  Parameter parameter=new Parameter(AbstractServiceTest.ATTRIBUTE_NAME_2_MIXED_CASE,AbstractServiceTest.ATTRIBUTE_VALUE_2);  parameters.add(parameter);  parameter=new Parameter("Extra Attribute With No Value",null);  parameters.add(parameter);  return createJobCreateRequest(namespaceCd,jobName,parameters);}  }
class C{  public static int parseTime(String input){  Scanner scanner=new Scanner(input.trim());  scanner.useLocale(Locale.ENGLISH);  int time;  if (input.contains(":")) {    scanner.useDelimiter(":");    if (!scanner.hasNextLong()) {      return 0;    }    long minutes=scanner.nextLong();    if (minutes < 0) {      return 0;    }    if (!scanner.hasNextDouble()) {      return 0;    }    double seconds=scanner.nextDouble();    if (seconds < 0.0 || seconds >= 60.0) {      return 0;    }    time=(int)(60000 * minutes + 1000 * seconds);  } else {    if (!scanner.hasNextDouble()) {      return 0;    }    double seconds=scanner.nextDouble();    if (seconds < 0.0) {      return 0;    }    time=(int)(1000 * seconds);  }  return 10 * ((time + 5) / 10);}  }
class C{  public void popMatrix(){  g.popMatrix();}  }
class C{  public void removeSelectionListener(final SelectionListener listener){  checkWidget();  if (listener == null) {    SWT.error(SWT.ERROR_NULL_ARGUMENT);  }  if (selectionListeners == null) {    return;  }  selectionListeners.remove(listener);}  }
class C{  public int read(java.io.InputStream in) throws java.io.IOException {  ByteBuffer buffer=getByteBuffer();  if (buffer.hasArray()) {    int offset=buffer.arrayOffset() + getByteBufferPosition();    return in.read(buffer.array(),offset,size());  } else {synchronized (buffer) {      if (_bytes == null) {        _bytes=new byte[size()];      }      int bytesRead=in.read(_bytes);      buffer.position(getByteBufferPosition());      buffer.put(_bytes);      return bytesRead;    }  }}  }
class C{  public BytesReference source(){  return source;}  }
class C{  public Object decode(Object pObject) throws DecoderException {  if (pObject == null) {    return null;  } else   if (pObject instanceof String) {    return decode((String)pObject);  } else {    throw new DecoderException("Objects of type " + pObject.getClass().getName() + " cannot be decoded using Q codec");  }}  }
class C{  private GeometryCollection readGeometryCollectionText() throws IOException, ParseException {  String nextToken=getNextEmptyOrOpener();  if (nextToken.equals(EMPTY)) {    return geometryFactory.createGeometryCollection(new Geometry[]{});  }  ArrayList geometries=new ArrayList();  Geometry geometry=readGeometryTaggedText();  geometries.add(geometry);  nextToken=getNextCloserOrComma();  while (nextToken.equals(COMMA)) {    geometry=readGeometryTaggedText();    geometries.add(geometry);    nextToken=getNextCloserOrComma();  }  Geometry[] array=new Geometry[geometries.size()];  return geometryFactory.createGeometryCollection((Geometry[])geometries.toArray(array));}  }
class C{  protected boolean flushCachesIfTransient(final Object object){  if (isTransientEntity(object)) {    for (    final String cacheName : cachesToFlushForTransientEntities) {      final Cache cache=cacheManager.getCache(cacheName);      cache.clear();    }    return true;  }  return false;}  }
class C{  @SuppressWarnings("unchecked") public static <T>T cast(Object x){  return (T)x;}  }
class C{  public void remove(T item){  if (set.remove(item)) {    fireContentsChanged(this,0,getSize() - 1);  }}  }
class C{  public String toString(){  return "TextHitInfo[" + charIndex + (isLeadingEdge ? "L" : "T")+ "]";}  }
class C{  public final boolean isLocal(){  return this.local;}  }
class C{  private void chainMeta(GridNioSession ses,int metaKey){  String att=ses.meta(metaKey);  att=(att == null ? "" : att) + param;  ses.addMeta(metaKey,att);}  }
class C{  public CBCBlockCipherMac(BlockCipher cipher,int macSizeInBits,BlockCipherPadding padding){  if ((macSizeInBits % 8) != 0) {    throw new IllegalArgumentException("MAC size must be multiple of 8");  }  this.cipher=new CBCBlockCipher(cipher);  this.padding=padding;  this.macSize=macSizeInBits / 8;  mac=new byte[cipher.getBlockSize()];  buf=new byte[cipher.getBlockSize()];  bufOff=0;}  }
class C{  public boolean equals(Object object){  return (super.equals(object) && object instanceof PrinterURI);}  }
class C{  public void removeLinkAt(int index) throws Exception {  if ((index >= 0) && (index < size())) {    remove(index);  } else {    throw new Exception("index out of range (removeLinkAt)");  }}  }
class C{  public final boolean isLampMode(){  return (isLamp);}  }
class C{  public static void hide(@NonNull final Activity activity){  final InputMethodManager iManager=(InputMethodManager)activity.getSystemService(Context.INPUT_METHOD_SERVICE);  final View view=activity.getCurrentFocus();  if (view != null && iManager != null) {    iManager.hideSoftInputFromWindow(view.getWindowToken(),0);  }}  }
class C{  private String processUnorderedList(final String line){  return processList(line,ListType.UNORDERED);}  }
class C{  public Object create(ClientCQ cq){  pool.getRITracker().addCq(cq,cq.isDurable());  byte regionDataPolicyOrdinal=cq.getCqBaseRegion() == null ? (byte)0 : cq.getCqBaseRegion().getAttributes().getDataPolicy().ordinal;  return CreateCQOp.execute(this.pool,cq.getName(),cq.getQueryString(),CqStateImpl.RUNNING,cq.isDurable(),regionDataPolicyOrdinal);}  }
class C{  private static <T>DefaultListModel<PluginItem<T>> createPluginListModel(final IPluginRegistry<com.google.security.zynamics.binnavi.api2.plugins.IPlugin<T>> registry,final ConfigManager configFile){  final DefaultListModel<PluginItem<T>> model=new DefaultListModel<PluginItem<T>>();  final ArrayList<com.google.security.zynamics.binnavi.api2.plugins.IPlugin<T>> added=new ArrayList<com.google.security.zynamics.binnavi.api2.plugins.IPlugin<T>>();  for (  final PluginConfigItem plugin : configFile.getGeneralSettings().getPlugins()) {    final long guid=plugin.getGUID();    addPluginIfLoaded(registry,model,guid,added);    addPluginIfUnloaded(registry,model,guid,added);  }  addUnmentionedPlugins(registry,model,added);  return model;}  }
class C{  @Override public void onCreate(SQLiteDatabase db){  db.execSQL("CREATE TABLE " + MainTable.TABLE_NAME + " ("+ MainTable._ID+ " INTEGER PRIMARY KEY,"+ MainTable.COLUMN_NAME_DATA+ " TEXT"+ ");");}  }
class C{  public void next(){  m_stepCounter++;  if (m_stepCounter == m_steps.size()) {    for (    final ITutorialListener listener : m_listeners) {      listener.finished(this);    }  } else {    for (    final ITutorialListener listener : m_listeners) {      listener.changedStep(this);    }  }}  }
class C{  protected void initDataBindings(){  JTableBinding<Movie,List<Movie>,JTable> jTableBinding=SwingBindings.createJTableBinding(UpdateStrategy.READ_WRITE,moviesInSet,tableMovies);  BeanProperty<Movie,String> movieBeanProperty=BeanProperty.create("title");  jTableBinding.addColumnBinding(movieBeanProperty).setEditable(false);  BeanProperty<Movie,String> movieBeanProperty_1=BeanProperty.create("year");  jTableBinding.addColumnBinding(movieBeanProperty_1).setEditable(false);  BeanProperty<Movie,Boolean> movieBeanProperty_2=BeanProperty.create("watched");  jTableBinding.addColumnBinding(movieBeanProperty_2).setEditable(false).setColumnClass(Boolean.class);  jTableBinding.setEditable(false);  jTableBinding.bind();}  }
class C{  @Override boolean hasNext(){  boolean has_next=has_next_user_value();  return has_next;}  }
class C{  public static Value binop(Value val){  if (val == null)   return null;  if (val instanceof BinopExpr)   return val;  return null;}  }
class C{  public final String yytext(){  return new String(yy_buffer,yy_startRead,yy_markedPos - yy_startRead);}  }
class C{  @SuppressWarnings({"UnusedDeclaration"}) protected WebView createUnknownOSWebView(Dimension frameSize){  String message=Logging.getMessage("NativeLib.UnsupportedOperatingSystem","WebView",System.getProperty("os.name"));  Logging.logger().severe(message);  throw new UnsupportedOperationException(message);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(cdatasectiongetdata.class,args);}  }
class C{  static double checkDouble(double d) throws JSONException {  if (Double.isInfinite(d) || Double.isNaN(d)) {    throw new JSONException("Forbidden numeric value: " + d);  }  return d;}  }
class C{  public void toggleStateTest(){  int turnAState;  int turnBState;switch (testState) {case STATE_AC:    turnAState=turnoutStates.get(STATE_BD).getTestTurnoutAState();  turnBState=turnoutStates.get(STATE_BD).getTestTurnoutBState();testState=STATE_BD;break;case STATE_BD:turnAState=turnoutStates.get(STATE_AD).getTestTurnoutAState();turnBState=turnoutStates.get(STATE_AD).getTestTurnoutBState();testState=STATE_AD;break;case STATE_AD:if (type == SINGLE_SLIP) {turnAState=turnoutStates.get(STATE_AC).getTestTurnoutAState();turnBState=turnoutStates.get(STATE_AC).getTestTurnoutBState();testState=STATE_AC;} else {turnAState=turnoutStates.get(STATE_BC).getTestTurnoutAState();turnBState=turnoutStates.get(STATE_BC).getTestTurnoutBState();testState=STATE_BC;}break;case STATE_BC:turnAState=turnoutStates.get(STATE_AC).getTestTurnoutAState();turnBState=turnoutStates.get(STATE_AC).getTestTurnoutBState();testState=STATE_AC;break;default :turnAState=turnoutStates.get(STATE_BD).getTestTurnoutAState();turnBState=turnoutStates.get(STATE_BD).getTestTurnoutBState();testState=STATE_BD;break;}((Turnout)turnoutAComboBox.getSelectedBean()).setCommandedState(turnAState);((Turnout)turnoutBComboBox.getSelectedBean()).setCommandedState(turnBState);if (testPanel != null) {testPanel.repaint();}}  }
class C{  protected boolean isActive(){  return active;}  }
class C{  @SuppressWarnings("unchecked") <T extends SupportFragment>T findStackFragment(Class<T> fragmentClass,FragmentManager fragmentManager,boolean isChild){  Fragment fragment=null;  if (isChild) {    List<Fragment> childFragmentList=fragmentManager.getFragments();    if (childFragmentList == null)     return null;    int sizeChildFrgList=childFragmentList.size();    for (int i=sizeChildFrgList - 1; i >= 0; i--) {      Fragment childFragment=childFragmentList.get(i);      if (childFragment instanceof SupportFragment && childFragment.getClass().getName().equals(fragmentClass.getName())) {        fragment=childFragment;        break;      }    }  } else {    fragment=fragmentManager.findFragmentByTag(fragmentClass.getName());  }  if (fragment == null) {    return null;  }  return (T)fragment;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Airing a=getAir(stack);  return (a == null) ? "" : a.getMiscInfo();}  }
class C{  public int resolveStart(){  return (getStart() == MISSING) ? 0 : getStart();}  }
class C{  public boolean isArrayOrKnownNull(){  return isArray() || equals(KNOWN_NULL);}  }
class C{  private void jbInit() throws Exception {  this.setIconImage(Adempiere.getImage16());  contentPane=(JPanel)this.getContentPane();  contentPane.setLayout(borderLayout);  this.setTitle(res.getString("AdempiereServerSetup"));  statusBar.setBorder(BorderFactory.createLoweredBevelBorder());  statusBar.setText(" ");  menuFile.setText(res.getString("File"));  menuFileExit.setText(res.getString("Exit"));  menuFileExit.addActionListener(this);  menuHelp.setText(res.getString("Help"));  menuHelpInfo.setText(res.getString("Help"));  menuHelpInfo.addActionListener(this);  borderLayout.setHgap(5);  borderLayout.setVgap(5);  menuFile.add(menuFileExit);  menuHelp.add(menuHelpInfo);  menuBar.add(menuFile);  menuBar.add(menuHelp);  this.setJMenuBar(menuBar);  contentPane.add(statusBar,BorderLayout.SOUTH);  contentPane.add(configurationPanel,BorderLayout.CENTER);}  }
class C{  public boolean retainEntries(TLongDoubleProcedure procedure){  boolean modified=false;  byte[] states=_states;  long[] keys=_set;  double[] values=_values;  for (int i=keys.length; i-- > 0; ) {    if (states[i] == FULL && !procedure.execute(keys[i],values[i])) {      removeAt(i);      modified=true;    }  }  return modified;}  }
class C{  public LEFT_OUTER_JOIN LEFT_OUTER_JOIN(String tableToJoin){  return new LEFT_OUTER_JOIN(this,tableToJoin);}  }
class C{  private void processStartedState(State currentState) throws Throwable {switch (currentState.taskState.subStage) {case PAUSE_DESTINATION_SYSTEM:    pauseDestinationSystem(currentState);  break;case UPLOAD_VIBS:migrateHostEntities(currentState);break;case CONTINOUS_MIGRATE_DATA:migrateDataContinously(currentState);break;}}  }
class C{  protected void testClusterSizes(Clustering<?> clustering,int[] expected){  List<? extends Cluster<?>> clusters=clustering.getAllClusters();  int[] sizes=new int[clusters.size()];  for (int i=0; i < sizes.length; ++i) {    sizes[i]=clusters.get(i).size();  }  Arrays.sort(sizes);  Arrays.sort(expected);  assertEquals("Number of clusters does not match expectations. " + FormatUtil.format(sizes),expected.length,sizes.length);  for (int i=0; i < expected.length; i++) {    assertEquals("Cluster size does not match at position " + i + " in "+ FormatUtil.format(sizes),expected[i],sizes[i]);  }}  }
class C{  @Bean public JythonCommandLineInterpreterFactory jythonCommandLineInterpreterFactory(){  return new JythonCommandLineInterpreterFactory(defaultExecutor());}  }
class C{  public static void runJavadoc(String[] javadocArgs){  if (com.sun.tools.javadoc.Main.execute(javadocArgs) != 0) {    throw new Error("Javadoc failed to execute");  }}  }
class C{  public static Shape layoutGlyphVector(GlyphVector glyphs,Shape path,int align,float startOffset,float textLength,int lengthAdjustMode){  GeneralPath newPath=new GeneralPath();  PathLength pl=new PathLength(path);  float pathLength=pl.lengthOfPath();  if (glyphs == null) {    return newPath;  }  float glyphsLength=(float)glyphs.getVisualBounds().getWidth();  if (path == null || glyphs.getNumGlyphs() == 0 || pl.lengthOfPath() == 0f || glyphsLength == 0f) {    return newPath;  }  float lengthRatio=textLength / glyphsLength;  float currentPosition=startOffset;  if (align == ALIGN_END) {    currentPosition+=pathLength - textLength;  } else   if (align == ALIGN_MIDDLE) {    currentPosition+=(pathLength - textLength) / 2;  }  for (int i=0; i < glyphs.getNumGlyphs(); i++) {    GlyphMetrics gm=glyphs.getGlyphMetrics(i);    float charAdvance=gm.getAdvance();    Shape glyph=glyphs.getGlyphOutline(i);    if (lengthAdjustMode == ADJUST_GLYPHS) {      AffineTransform scale=AffineTransform.getScaleInstance(lengthRatio,1.0f);      glyph=scale.createTransformedShape(glyph);      charAdvance*=lengthRatio;    }    float glyphWidth=(float)glyph.getBounds2D().getWidth();    float charMidPos=currentPosition + glyphWidth / 2f;    Point2D charMidPoint=pl.pointAtLength(charMidPos);    if (charMidPoint != null) {      float angle=pl.angleAtLength(charMidPos);      AffineTransform glyphTrans=new AffineTransform();      glyphTrans.translate(charMidPoint.getX(),charMidPoint.getY());      glyphTrans.rotate(angle);      glyphTrans.translate(charAdvance / -2f,0f);      glyph=glyphTrans.createTransformedShape(glyph);      newPath.append(glyph,false);    }    if (lengthAdjustMode == ADJUST_SPACING) {      currentPosition+=(charAdvance * lengthRatio);    } else {      currentPosition+=charAdvance;    }  }  return newPath;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  InstanceRequest toInstanceRequest(Subscription subscription){  InstanceRequest request=new InstanceRequest();  request.setSubscriptionId(subscription.getSubscriptionId());  request.setDefaultLocale(subscription.getOrganization().getLocale());  request.setOrganizationId(subscription.getOrganization().getOrganizationId());  if (subscription.getProduct().getTechnicalProduct().getAccessType() != ServiceAccessType.DIRECT && subscription.getProduct().getTechnicalProduct().getAccessType() != ServiceAccessType.USER) {    String url=cs.getBaseURL();    url+=SERVICE_PATH + Long.toHexString(subscription.getKey());    request.setLoginUrl(url);  }  request.setOrganizationName(subscription.getOrganization().getName());  request.setParameterValue(ParameterFilter.getServiceParameterList(subscription,false));  return request;}  }
class C{  private SignedInfo createSignedInfo(List<Reference> references,SignatureAlgorithm signatureAlgorithm){  assert references != null;  assert signatureAlgorithm != null;  XMLSignatureFactory factory=XMLSignatureFactory.getInstance();  CanonicalizationMethod canonicalizationMethod;  try {    canonicalizationMethod=factory.newCanonicalizationMethod(SignatureConstants.TRANSFORM_C14N_EXCL_OMIT_COMMENTS,(C14NMethodParameterSpec)null);  } catch (  Exception e) {    throw new IllegalStateException("Cannot create canonicalization object.",e);  }  SignatureMethod signatureMethod;  try {    signatureMethod=factory.newSignatureMethod(signatureAlgorithm.toString(),null);  } catch (  Exception e) {    throw new IllegalStateException("Cannot create signature algorithm object.",e);  }  SignedInfo signedInfo=factory.newSignedInfo(canonicalizationMethod,signatureMethod,references);  log.debug("Created SignedInfo section with signatureAlgorithm: {}",signatureAlgorithm);  return signedInfo;}  }
class C{  public static String toString(byte[] self){  return InvokerHelper.toString(self);}  }
class C{  public int indexOf(int ch){  return 0;}  }
class C{  public static PlaceholderFragment newInstance(int sectionNumber){  PlaceholderFragment fragment=new PlaceholderFragment();  Bundle args=new Bundle();  args.putInt(ARG_SECTION_NUMBER,sectionNumber);  int resId=0;switch (sectionNumber) {case 1:    resId=R.layout.feature_page1_layout;  break;case 2:resId=R.layout.feature_page2_layout;break;case 3:resId=R.layout.feature_page3_layout;break;}args.putInt("resId",resId);fragment.setArguments(args);return fragment;}  }
class C{  private void initializeActiveFieldSetters(){  for (int i=0; i < columnFieldSetters.size(); i++) {    ActiveFieldInfo activeFieldInfo=columnFieldSetters.get(i);    SupportType st=activeFieldInfo.fieldInfo.getType();switch (st) {case BOOLEAN:      activeFieldInfo.setterOrGetter=PojoUtils.createSetterBoolean(getPojoClass(),activeFieldInfo.fieldInfo.getPojoFieldExpression());    break;case DOUBLE:  activeFieldInfo.setterOrGetter=PojoUtils.createSetterDouble(getPojoClass(),activeFieldInfo.fieldInfo.getPojoFieldExpression());break;case FLOAT:activeFieldInfo.setterOrGetter=PojoUtils.createSetterFloat(getPojoClass(),activeFieldInfo.fieldInfo.getPojoFieldExpression());break;case INTEGER:activeFieldInfo.setterOrGetter=PojoUtils.createSetterInt(getPojoClass(),activeFieldInfo.fieldInfo.getPojoFieldExpression());break;case STRING:activeFieldInfo.setterOrGetter=PojoUtils.createSetter(getPojoClass(),activeFieldInfo.fieldInfo.getPojoFieldExpression(),activeFieldInfo.fieldInfo.getType().getJavaType());break;case LONG:activeFieldInfo.setterOrGetter=PojoUtils.createSetterLong(getPojoClass(),activeFieldInfo.fieldInfo.getPojoFieldExpression());break;default :activeFieldInfo.setterOrGetter=PojoUtils.createSetter(getPojoClass(),activeFieldInfo.fieldInfo.getPojoFieldExpression(),Byte.class);break;}columnFieldSetters.get(i).setterOrGetter=activeFieldInfo.setterOrGetter;}}  }
class C{  public static EmailType find(String value){  return enums.find(value);}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null) {    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  }  return fields;}  }
class C{  public String htmlRuleString(XMLDocumentationHandler handler){  StringBuffer buffer=new StringBuffer("<div class=\"requiredcompoundrule\">One of:\n");  for (  XMLSyntaxRule rule : rules) {    buffer.append(rule.htmlRuleString(handler));  }  buffer.append("</div>\n");  return buffer.toString();}  }
class C{  public void onGoToInvalid(View view){  if (!checkReady()) {    return;  }  mStreetViewPanorama.setPosition(INVALID);}  }
class C{  public Iterator<T> iterator(){  return map.values().iterator();}  }
class C{  public void reportPerformanceResult(TestIdentifier test,CtsTestStatus status,String summary,String details){  Test result=findTest(test);  result.setResultStatus(status);  result.setSummary(summary);  result.setDetails(details);}  }
class C{  @Override protected void onStarted(final Player player){  addEvent(new SoundEvent(startSound,SOUND_RADIUS,100,SoundLayer.AMBIENT_SOUND));  notifyWorldAboutChanges();  player.sendPrivateText("You have started fishing.");  addEvent(new ImageEffectEvent("water_splash",true));  notifyWorldAboutChanges();}  }
class C{  @Override public int executeUpdate(String sql) throws SQLException {  try {    debugCodeCall("executeUpdate",sql);    return executeUpdateInternal(sql);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public static float toFloat(byte[] bytes,int offset){  return Float.intBitsToFloat(toInt(bytes,offset,SIZEOF_INT));}  }
class C{  @Override public List<CarbonDictionaryColumnMetaChunk> read() throws IOException {  List<CarbonDictionaryColumnMetaChunk> dictionaryMetaChunks=new ArrayList<CarbonDictionaryColumnMetaChunk>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);  CarbonDictionaryColumnMetaChunk columnMetaChunk=null;  ColumnDictionaryChunkMeta dictionaryChunkMeta=null;  openThriftReader();  while (dictionaryMetadataFileReader.hasNext()) {    dictionaryChunkMeta=(ColumnDictionaryChunkMeta)dictionaryMetadataFileReader.read();    columnMetaChunk=getNewInstanceOfCarbonDictionaryColumnMetaChunk(dictionaryChunkMeta);    dictionaryMetaChunks.add(columnMetaChunk);  }  return dictionaryMetaChunks;}  }
class C{  @Override protected void initScenes(){  CGSize s=CCDirector.sharedDirector().winSize();  inScene.setPosition(s.width - ADJUST_FACTOR,0);}  }
class C{  public BufferedDataOutputStream(OutputStream os){  super(os);  this.initFields();}  }
class C{  public NotificationChain basicSetTkey(Expression newTkey,NotificationChain msgs){  Expression oldTkey=tkey;  tkey=newTkey;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,GamlPackage.SDEFINITION__TKEY,oldTkey,newTkey);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public static float mapCoordInDescendentToSelf(View descendant,View root,float[] coord,boolean includeRootScroll){  ArrayList<View> ancestorChain=new ArrayList<View>();  float[] pt={coord[0],coord[1]};  View v=descendant;  while (v != root && v != null) {    ancestorChain.add(v);    v=(View)v.getParent();  }  ancestorChain.add(root);  float scale=1.0f;  int count=ancestorChain.size();  for (int i=0; i < count; i++) {    View v0=ancestorChain.get(i);    if (v0 != descendant || includeRootScroll) {      pt[0]-=v0.getScrollX();      pt[1]-=v0.getScrollY();    }    v0.getMatrix().mapPoints(pt);    pt[0]+=v0.getLeft();    pt[1]+=v0.getTop();    scale*=v0.getScaleX();  }  coord[0]=pt[0];  coord[1]=pt[1];  return scale;}  }
class C{  public static byte[] minMessageRowKey(HBaseId mailboxUid){  return Bytes.add(mailboxUid.toBytes(),Bytes.toBytes(Long.MAX_VALUE));}  }
class C{  public void addFillPaint(PDFPaint p){  addCommand(new PDFFillPaintCmd(p));}  }
class C{  public boolean add(E e){  return offer(e);}  }
class C{  public void persist(Object source) throws Exception {  if (persist != null) {    persist.call(context,source);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static void addNetworkConnectedVarrays(Network network,Set<String> varraysToAdd,boolean cascade,DbClient dbClient){  _log.info("Adding implicit connected virtual arrays {} for network {}",network.getId(),varraysToAdd);  network.addConnectedVirtualArrays(varraysToAdd);  dbClient.updateAndReindexObject(network);  if (cascade) {    List<Network> routedNetworks=getNetworkRoutedNetworksForUpdate(network,dbClient);    for (    Network net : routedNetworks) {      _log.info("Adding implicit connected virtual arrays {} for routed network {}",net.getId(),varraysToAdd);      net.addConnectedVirtualArrays(varraysToAdd);    }    dbClient.updateAndReindexObject(routedNetworks);  }}  }
class C{  private static String findFirstMatchingLine(String data,String prefix){  if (data == null) {    return "";  }  int ix=data.indexOf(prefix);  if (ix >= 0) {    int iy=data.indexOf("\n",ix);    if (iy > 0) {      return data.substring(ix,iy);    }  }  return "";}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.344 -0400",hash_original_method="482ECF37ABE57D8C1F1786C0CD279E80",hash_generated_method="770ACB14E673B71C24836B63811E0BB1") public ByteOrderMark(String charsetName,int... bytes){  if (charsetName == null || charsetName.length() == 0) {    throw new IllegalArgumentException("No charsetName specified");  }  if (bytes == null || bytes.length == 0) {    throw new IllegalArgumentException("No bytes specified");  }  this.charsetName=charsetName;  this.bytes=new int[bytes.length];  System.arraycopy(bytes,0,this.bytes,0,bytes.length);}  }
class C{  private void validateHostData(Host host,ExportGroup exportGroup,Collection<URI> storageSystems,Project project,List<URI> initiators){  if (!NullColumnValueGetter.isNullURI(host.getProject())) {    if (!host.getProject().equals(project.getId())) {      throw APIException.badRequests.invalidParameterExportGroupHostAssignedToDifferentProject(host.getHostName(),project.getLabel());    }  } else {    if (!host.getTenant().equals(project.getTenantOrg().getURI())) {      throw APIException.badRequests.invalidParameterExportGroupHostAssignedToDifferentTenant(host.getHostName(),project.getLabel());    }  }  List<URI> hostInitiators=getHostConnectedInitiators(host,storageSystems,exportGroup);  if (hostInitiators.isEmpty()) {    throw APIException.badRequests.noIntiatorsConnectedToVolumes();  }  for (  URI uri : hostInitiators) {    if (!initiators.contains(uri)) {      initiators.add(uri);    }  }  _log.info("Host {} was validated successfully.",host.getId().toString());}  }
class C{  public String globalInfo(){  return "Serializes the instances to a file with extension bsi.";}  }
class C{  @Override protected void injectComponent(BrainPhaserComponent component){  component.inject(this);}  }
class C{  private Initiator findInitiatorInDB(String pwwn) throws IOException {  Initiator initiator=null;  String portWWN=WWNUtility.getWWNWithColons(pwwn);  log.info("Looking for initiator {} in database",portWWN);  URIQueryResultList queryResults=new URIQueryResultList();  dbClient.queryByConstraint(AlternateIdConstraint.Factory.getInitiatorPortInitiatorConstraint(portWWN),queryResults);  Iterator<URI> resultsIter=queryResults.iterator();  if (resultsIter.hasNext()) {    log.info("Found initiator {}",portWWN);    initiator=dbClient.queryObject(Initiator.class,resultsIter.next());  }  return initiator;}  }
class C{  public static String escapeFilterParameter(String parameter){  return parameter.replace("\\","\\\\").replace(",","\\,");}  }
class C{  private boolean shouldItemsBeDisabled(){  SharedPreferences sharedPreferences=PreferenceManager.getDefaultSharedPreferences(getActivity());  String key=getString(R.string.disable_items_preference_key);  boolean defaultValue=getResources().getBoolean(R.bool.disable_items_preference_default_value);  return sharedPreferences.getBoolean(key,defaultValue);}  }
class C{  public Object encode(Object pObject) throws EncoderException {  if (pObject == null) {    return null;  } else   if (pObject instanceof byte[]) {    return encode((byte[])pObject);  } else   if (pObject instanceof String) {    return encode((String)pObject);  } else {    throw new EncoderException("Objects of type " + pObject.getClass().getName() + " cannot be quoted-printable encoded");  }}  }
class C{  protected void consumeExpression(Marker start){  tokens.consume("(");  tokens.consumeThrough(')','(');}  }
class C{  public void releaseOutputStream() throws IOException {  try {    if (out != null) {      try {        out.flush();      }  finally {        out.done();      }    }    conn.releaseOutputStream();  }  finally {    out=null;  }}  }
class C{  public final double dot(Double3D other){  return other.x * x + other.y * y + other.z * z;}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  private static String normalize(String p){  if (p == null)   return "";  if (p.endsWith("/") && p.length() > 1)   return p.substring(0,p.length() - 1);  return p;}  }
class C{  public void registerOutParameter(String parameterName,SQLType sqlType,int scale) throws SQLException {  try {    if (this.wrappedStmt != null) {      ((CallableStatement)this.wrappedStmt).registerOutParameter(parameterName,sqlType,scale);    } else {      throw SQLError.createSQLException("No operations allowed after statement closed",SQLError.SQL_STATE_GENERAL_ERROR,this.exceptionInterceptor);    }  } catch (  SQLException sqlEx) {    checkAndFireConnectionError(sqlEx);  }}  }
class C{  public SignatureVisitor visitClassBound(){  return this;}  }
class C{  public boolean isSimulator(){  return impl.isSimulator();}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case TypeRefsPackage.COMPOSED_TYPE_REF___IS_DYNAMIC:    return isDynamic();case TypeRefsPackage.COMPOSED_TYPE_REF___GET_TYPE_REF_AS_STRING:  return getTypeRefAsString();}return super.eInvoke(operationID,arguments);}  }
class C{  public DelegatingSocket(Proxy proxy){  this((Socket)null);}  }
class C{  private double pruningFactor(int num_instances,int num_params){  if (num_instances <= num_params) {    return 10.0;  }  return ((num_instances + m_pruningMultiplier * num_params) / (num_instances - num_params));}  }
class C{  public Symbol resolveBinaryNameOrIdent(String name){  try {    Name flatname=names.fromString(name.replace("/","."));    return reader.loadClass(flatname);  } catch (  CompletionFailure ignore) {    return resolveIdent(name);  }}  }
class C{  private void checkArguments(){  if (n <= 0) {    throw new IllegalArgumentException("n must be greater than 0");  }  if (k <= 0) {    throw new IllegalArgumentException("k must be greater than 0");  }  if (overlap < 0) {    throw new IllegalArgumentException("overlap must be non-negative");  }  if ((n - k) % (k - overlap) != 0) {    int more=(k - overlap - ((n - k) % (k - overlap)));    int less=(n - k) % (k - overlap);    throw new IllegalArgumentException("invalid value for n; must either be " + more + " bits more or "+ less+ " bits less");  }  if (overlap > k / 2) {    throw new IllegalArgumentException("overlap must be at most k/2");  }}  }
class C{  public static void sort(Comparable[] a){  int n=a.length;  int h=1;  while (h < n / 3)   h=3 * h + 1;  while (h >= 1) {    for (int i=h; i < n; i++) {      for (int j=i; j >= h && less(a[j],a[j - h]); j-=h) {        exch(a,j,j - h);      }    }    assert isHsorted(a,h);    h/=3;  }  assert isSorted(a);}  }
class C{  public static JsonArray unmodifiableArray(JsonArray array){  return new JsonArray(array,true);}  }
class C{  public static void isPopupOnScreen(JPopupMenu popup,Rectangle checkBounds){  Dimension dim=popup.getSize();  Point pt=new Point();  SwingUtilities.convertPointToScreen(pt,popup);  Rectangle bounds=new Rectangle(pt,dim);  if (!SwingUtilities.isRectangleContainingRectangle(checkBounds,bounds)) {    throw new RuntimeException("We do not match! " + checkBounds + " / "+ bounds);  }}  }
class C{  protected byte[] toJsonBytesRegistrationDetails(final String email) throws Exception {  final RegisterRO register=new RegisterRO();  register.setEmail(email);  register.setCustomerType("B2C");  register.setCustom(new HashMap<String,String>());  register.getCustom().put("firstname","Bob");  register.getCustom().put("lastname","Doe");  register.getCustom().put("CUSTOMER_PHONE","123123123");  return toJsonBytes(register);}  }
class C{  public boolean more(){  return this.myIndex < this.mySource.length();}  }
class C{  private boolean isIterationMark(char c){  return isKanjiIterationMark(c) || isHiraganaIterationMark(c) || isKatakanaIterationMark(c);}  }
class C{  public final void sendMessageDelayed(int what,int arg1,long delayMillis){  SmHandler smh=mSmHandler;  if (smh == null)   return;  smh.sendMessageDelayed(obtainMessage(what,arg1),delayMillis);}  }
class C{  protected void preUndo(){  ISelection selection=selectionProvider.getSelection();  if (cursor == selections.size()) {    selections.add(cursor,selection);  } else   if (cursor >= 0 && cursor < selections.size()) {    selections.set(cursor,selection);  }}  }
class C{  protected void retrieveExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  TipoDocumentoVitalForm frm=(TipoDocumentoVitalForm)form;  ClientInvocation invocation=saveCurrentInvocation(KeysClientsInvocations.DOCUMENTOS_VITALES_VER_TIPO_DOCUMENTO,request);  invocation.setAsReturnPoint(true);  setInTemporalSession(request,DocumentosVitalesConstants.TIPO_DOCUMENTO_VITAL_KEY,getGestionDocumentosVitalesBI(request).getTipoDocumentoVital(frm.getId()));  setReturnActionFordward(request,mapping.findForward("ver_tipo"));}  }
class C{  private void navigateToChild(String startsWith){  TreePath currentPath=tree.getSelectionPath();  DefaultMutableTreeNode dumpNode=(DefaultMutableTreeNode)currentPath.getLastPathComponent();  Enumeration childs=dumpNode.children();  TreePath searchPath=null;  while ((searchPath == null) && childs.hasMoreElements()) {    DefaultMutableTreeNode child=(DefaultMutableTreeNode)childs.nextElement();    String name=child.toString();    if (name != null && name.startsWith(startsWith)) {      searchPath=new TreePath(child.getPath());    }  }  if (searchPath != null) {    tree.makeVisible(searchPath);    tree.setSelectionPath(searchPath);    tree.scrollPathToVisible(searchPath);  }}  }
class C{  public void addExclusionPattern(String pattern){  this.exclusionPatterns.add(pattern);}  }
class C{  public int matchLevel(String input){  if (terms == null) {    return Debug.BASIC_LOG_LEVEL;  } else {    int level=0;    for (    Term t : terms) {      if (t.matches(input)) {        level=t.level;      }    }    return level;  }}  }
class C{  public SAMLRedirectURLException(String message){  super(message);}  }
class C{  private void onConnectionStatusChanged(int oldStatus,int status){  if (sSettingsMgr.showStatusIcon) {    NotificationCompat.Builder builder=new NotificationCompat.Builder(this);    builder.setWhen(System.currentTimeMillis());switch (status) {case XmppManager.CONNECTED:      builder.setContentText(getString(R.string.main_service_connected,getConnectionStatusAction()));    builder.setSmallIcon(getImageStatus(STATUS_ICON_GREEN));  break;case XmppManager.CONNECTING:builder.setContentText(getString(R.string.main_service_connecting));builder.setSmallIcon(getImageStatus(STATUS_ICON_ORANGE));break;case XmppManager.DISCONNECTED:builder.setContentText(getString(R.string.main_service_disconnected));builder.setSmallIcon(getImageStatus(STATUS_ICON_RED));break;case XmppManager.DISCONNECTING:builder.setContentText(getString(R.string.main_service_disconnecting));builder.setSmallIcon(getImageStatus(STATUS_ICON_ORANGE));break;case XmppManager.WAITING_TO_CONNECT:case XmppManager.WAITING_FOR_NETWORK:builder.setContentText(getString(R.string.main_service_waiting_to_connect) + "\n" + getConnectionStatusAction());builder.setSmallIcon(getImageStatus(STATUS_ICON_BLUE));break;default :return;}builder.setContentIntent(sPendingIntentLaunchApplication);builder.setContentTitle(Tools.APP_NAME);startForeground(NOTIFICATION_CONNECTION,builder.getNotification());}}  }
class C{  public ServicesStillPublishedException(){  super();}  }
class C{  public String makeBinaryTipText(){  return "Make resulting attributes binary.";}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public String toString(){  StringBuffer s=new StringBuffer();  int[][] attributes=getUsedAttributes();  double[][] coefficients=getCoefficients();  for (int j=0; j < m_numClasses; j++) {    s.append("\nClass " + j + " :\n");    s.append(Utils.doubleToString(coefficients[j][0],4,2) + " + \n");    for (int i=0; i < attributes[j].length; i++) {      s.append("[" + m_numericDataHeader.attribute(attributes[j][i]).name() + "]");      s.append(" * " + Utils.doubleToString(coefficients[j][attributes[j][i] + 1],4,2));      if (i != attributes[j].length - 1) {        s.append(" +");      }      s.append("\n");    }  }  return new String(s);}  }
class C{  private boolean addState(long stateNumber){  if (firstState < 0) {    firstState=stateNumber;  } else   if (stepSize < 0) {    stepSize=(int)(stateNumber - firstState);  } else {    int step=(int)(stateNumber - lastState);    if (step != stepSize) {      return false;    }  }  lastState=stateNumber;  return true;}  }
class C{  public static boolean regressEvalLinear(Regressor instance,int N_train,int N_test){  RegressionDataSet train=FixedProblems.getLinearRegression(N_train,new XORWOW());  RegressionDataSet test=FixedProblems.getLinearRegression(N_test,new XORWOW());  RegressionModelEvaluation rme=new RegressionModelEvaluation(instance,train);  rme.evaluateTestSet(test);  return rme.getMeanError() <= test.getTargetValues().mean() * 1.5;}  }
class C{  public PcMaxRunner(DataWrapper dataWrapper,Parameters params){  super(dataWrapper,params,null);}  }
class C{  public boolean isTargetCover(){  return targetCover >= COVER_LOWLEFT;}  }
class C{  public void incEventsEnqued(){  this._stats.incLong(_eventsQueuedId,1);}  }
class C{  private CWindowFunctions(){}  }
class C{  private void update(){  Graphics g=m_plotPanel.getGraphics();  g.drawImage(m_osi,0,0,m_plotPanel);}  }
class C{  public void jumpToHumanPageIndex(int humanPageIndex){  if (model.getCurrentPageIndex() != humanPageIndex - 1) {    model.setCurrentPageIndex(humanPageIndex - 1);    model.firePaginationChangedEvent();  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:32.205 -0500",hash_original_method="A2FE4CBD06D42BF7C573F07F56417767",hash_generated_method="F9C37D583DB880496BE6412519F55930") private ViewGroup findAncestorToTakeFocusInTouchMode(View focused){  ViewParent parent=focused.getParent();  while (parent instanceof ViewGroup) {    final ViewGroup vgParent=(ViewGroup)parent;    if (vgParent.getDescendantFocusability() == ViewGroup.FOCUS_AFTER_DESCENDANTS && vgParent.isFocusableInTouchMode()) {      return vgParent;    }    if (vgParent.isRootNamespace()) {      return null;    } else {      parent=vgParent.getParent();    }  }  return null;}  }
class C{  public void render(DrawContext dc){  if (dc == null) {    String msg=Logging.getMessage("nullValue.DrawContextIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  double tolerance=1e-6;  Vec4 upVector=(this.axisUnitDirection.cross3(Vec4.UNIT_Y).getLength3() <= tolerance) ? Vec4.UNIT_NEGATIVE_Z : Vec4.UNIT_Y;  Matrix transformMatrix=Matrix.fromModelLookAt(this.bottomCenter,this.topCenter,upVector);  double[] matrixArray=new double[16];  transformMatrix.toArray(matrixArray,0,false);  GL2 gl=dc.getGL().getGL2();  OGLStackHandler ogsh=new OGLStackHandler();  ogsh.pushAttrib(gl,GL2.GL_CURRENT_BIT | GL2.GL_ENABLE_BIT | GL2.GL_TRANSFORM_BIT| GL2.GL_DEPTH_BUFFER_BIT);  try {    gl.glEnable(GL.GL_BLEND);    OGLUtil.applyBlending(gl,false);    gl.glEnable(GL.GL_DEPTH_TEST);    gl.glDepthFunc(GL.GL_LEQUAL);    gl.glColor4f(1f,1f,1f,0.4f);    gl.glBegin(GL2.GL_LINES);    gl.glVertex3d(this.bottomCenter.x,this.bottomCenter.y,this.bottomCenter.z);    gl.glVertex3d(this.topCenter.x,this.topCenter.y,this.topCenter.z);    gl.glEnd();    gl.glDepthFunc(GL.GL_GREATER);    gl.glColor4f(1f,0f,1f,0.4f);    gl.glBegin(GL2.GL_LINES);    gl.glVertex3d(this.bottomCenter.x,this.bottomCenter.y,this.bottomCenter.z);    gl.glVertex3d(this.topCenter.x,this.topCenter.y,this.topCenter.z);    gl.glEnd();    ogsh.pushModelview(gl);    gl.glMultMatrixd(matrixArray,0);    GLUquadric quadric=dc.getGLU().gluNewQuadric();    dc.getGLU().gluQuadricDrawStyle(quadric,GLU.GLU_LINE);    gl.glDepthFunc(GL.GL_LEQUAL);    gl.glColor4f(1f,1f,1f,0.5f);    dc.getGLU().gluCylinder(quadric,this.cylinderRadius,this.cylinderRadius,this.cylinderHeight,30,30);    gl.glDepthFunc(GL.GL_GREATER);    gl.glColor4f(1f,0f,1f,0.4f);    dc.getGLU().gluCylinder(quadric,this.cylinderRadius,this.cylinderRadius,this.cylinderHeight,30,30);    dc.getGLU().gluDeleteQuadric(quadric);  }  finally {    ogsh.pop(gl);  }}  }
class C{  static IntSet makeDomFrontSet(int szBlocks){  return szBlocks <= DOMFRONT_SET_THRESHOLD_SIZE ? new BitIntSet(szBlocks) : new ListIntSet();}  }
class C{  public int length(){  return values.size();}  }
class C{  public RowView(Element elem){  super(elem,View.X_AXIS);  fillColumns=new BitSet();  RowView.this.setPropertiesFromAttributes();}  }
class C{  private List<Extension> findExtensions(String contentType){  Extension[] extensions=this.extensionPoint.getExtensions();  List<String> parsePluginList=this.parsePluginList.getPluginList(contentType);  List<Extension> extensionList=matchExtensions(parsePluginList,extensions,contentType);  if (extensionList != null) {    return extensionList;  }  parsePluginList=this.parsePluginList.getPluginList(DEFAULT_PLUGIN);  return matchExtensions(parsePluginList,extensions,DEFAULT_PLUGIN);}  }
class C{  private void recalculatPreferredSize(){  int maxX=0;  int maxY=0;  for (  GraphicalNode gn : myGraphicalNodes) {    int x=gn.x + NODE_WIDTH;    int y=gn.y + NODE_HEIGHT;    maxX=Math.max(maxX,x);    maxY=Math.max(maxY,y);  }  setPreferredSize(new Dimension(maxX,maxY));  myMaxX=maxX;  myMaxY=maxY;}  }
class C{  private ClosedSessionException(){}  }
class C{  public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  try {    DatePatternEditForm myForm=(DatePatternEditForm)form;    sessionContext.checkPermission(Right.DatePatterns);    String op=(myForm.getOp() != null ? myForm.getOp() : request.getParameter("op"));    if (request.getParameterValues("depts") != null) {      String[] depts=request.getParameterValues("depts");      for (int i=0; i < depts.length; i++)       myForm.getDepartmentIds().add(new Long(depts[i]));    }    if (request.getParameterValues("prnts") != null) {      String[] prnts=request.getParameterValues("prnts");      for (int i=0; i < prnts.length; i++) {        myForm.getParentIds().add(new Long(prnts[i]));      }    }    if (op == null) {      myForm.load(null);      myForm.setOp("List");    }    request.setAttribute(DatePattern.DATE_PATTERN_PARENT_LIST_ATTR,DatePattern.findAllParents(sessionContext.getUser().getCurrentAcademicSessionId()));    List list=(new DepartmentDAO()).getSession().createCriteria(Department.class).add(Restrictions.eq("session.uniqueId",sessionContext.getUser().getCurrentAcademicSessionId())).addOrder(Order.asc("deptCode")).list();    Vector availableDepts=new Vector();    for (Iterator iter=list.iterator(); iter.hasNext(); ) {      Department d=(Department)iter.next();      availableDepts.add(new LabelValueBean(d.getDeptCode() + "-" + d.getName(),d.getUniqueId().toString()));    }    request.setAttribute(Department.DEPT_ATTR_NAME,availableDepts);    if ("Back".equals(op)) {      if (myForm.getUniqueId() != null)       request.setAttribute("hash",myForm.getUniqueId());      myForm.load(null);      myForm.setOp("List");    }    if ("Add Date Pattern".equals(op)) {      myForm.load(null);      myForm.setSessionId(sessionContext.getUser().getCurrentAcademicSessionId());      myForm.setOp("Save");    }    if ("Add Department".equals(op)) {      ActionMessages errors=new ActionErrors();      if (myForm.getDepartmentId() == null || myForm.getDepartmentId().longValue() < 0)       errors.add("department",new ActionMessage("errors.generic","No department selected.")); else {        boolean contains=myForm.getDepartmentIds().contains(myForm.getDepartmentId());        if (contains)         errors.add("department",new ActionMessage("errors.generic","Department already present in the list of departments."));      }      if (errors.size() > 0) {        saveErrors(request,errors);      } else {        myForm.getDepartmentIds().add(myForm.getDepartmentId());      }      myForm.setOp(myForm.getUniqueId().longValue() < 0 ? "Save" : "Update");    }    if ("Add Pattern Set".equals(op)) {      ActionMessages errors=new ActionErrors();      if (myForm.getParentId() == null || myForm.getParentId().longValue() < 0)       errors.add("parent",new ActionMessage("errors.generic","No date pattern selected.")); else {        boolean contains=myForm.getParentIds().contains(myForm.getParentId());        if (contains)         errors.add("parent",new ActionMessage("errors.generic","Date pattern already present in the list of alternative pattern sets."));      }      if (errors.size() > 0) {        saveErrors(request,errors);      } else {        myForm.getParentIds().add(myForm.getParentId());      }      myForm.setOp(myForm.getUniqueId().longValue() < 0 ? "Save" : "Update");    }    if ("Remove Department".equals(op)) {      ActionMessages errors=new ActionErrors();      if (myForm.getDepartmentId() == null || myForm.getDepartmentId().longValue() < 0)       errors.add("department",new ActionMessage("errors.generic","No department selected.")); else {        boolean contains=myForm.getDepartmentIds().contains(myForm.getDepartmentId());        if (!contains)         errors.add("department",new ActionMessage("errors.generic","Department not present in the list of departments."));      }      if (errors.size() > 0) {        saveErrors(request,errors);      } else {        myForm.getDepartmentIds().remove(myForm.getDepartmentId());      }      myForm.setOp(myForm.getUniqueId().longValue() < 0 ? "Save" : "Update");    }    if ("Remove Pattern Set".equals(op)) {      ActionMessages errors=new ActionErrors();      if (myForm.getParentId() == null || myForm.getParentId().longValue() < 0)       errors.add("parent",new ActionMessage("errors.generic","No date pattern selected.")); else {        boolean contains=myForm.getParentIds().contains(myForm.getParentId());        if (!contains)         errors.add("parent",new ActionMessage("errors.generic","Date pattern not present in the list of alternative pattern sets."));      }      if (errors.size() > 0) {        saveErrors(request,errors);      } else {        myForm.getParentIds().remove(myForm.getParentId());      }      myForm.setOp(myForm.getUniqueId().longValue() < 0 ? "Save" : "Update");    }    if ("Update".equals(op) || "Save".equals(op) || "Make Default".equals(op)|| "Previous".equals(op)|| "Next".equals(op)) {      ActionMessages errors=myForm.validate(mapping,request);      if (errors.size() > 0) {        saveErrors(request,errors);        myForm.setOp(myForm.getUniqueId().longValue() < 0 ? "Save" : "Update");      } else {        Transaction tx=null;        try {          org.hibernate.Session hibSession=(new TimePatternDAO()).getSession();          if (hibSession.getTransaction() == null || !hibSession.getTransaction().isActive())           tx=hibSession.beginTransaction();          DatePattern dp=myForm.saveOrUpdate(request,hibSession);          if ("Make Default".equals(op)) {            dp.getSession().setDefaultDatePattern(dp);            hibSession.saveOrUpdate(dp.getSession());            myForm.setIsDefault(true);          }          ChangeLog.addChange(hibSession,sessionContext,dp,ChangeLog.Source.DATE_PATTERN_EDIT,("Save".equals(op) ? ChangeLog.Operation.CREATE : ChangeLog.Operation.UPDATE),null,null);          if (tx != null)           tx.commit();        } catch (        Exception e) {          if (tx != null)           tx.rollback();          throw e;        }        if ("Next".equals(op) && myForm.getNextId() != null) {          response.sendRedirect(response.encodeURL("datePatternEdit.do?op=Edit&id=" + myForm.getNextId()));        } else         if ("Previous".equals(op) && myForm.getPreviousId() != null) {          response.sendRedirect(response.encodeURL("datePatternEdit.do?op=Edit&id=" + myForm.getPreviousId()));        } else {          myForm.setOp("List");          if (myForm.getUniqueId() != null)           request.setAttribute("hash",myForm.getUniqueId());        }      }    }    if ("Edit".equals(op)) {      String id=request.getParameter("id");      if (id == null && myForm.getUniqueId() != null)       id=myForm.getUniqueId().toString();      ActionMessages errors=new ActionMessages();      if (id == null || id.trim().length() == 0) {        errors.add("key",new ActionMessage("errors.invalid","Unique Id : " + id));        saveErrors(request,errors);        request.setAttribute("DatePatterns.pattern",myForm.getDatePattern(request).getPatternHtml(true,myForm.getUniqueId()));        return mapping.findForward("list");      } else {        DatePattern pattern=(new DatePatternDAO()).get(new Long(id));        myForm.setPreviousId(Navigation.getPrevious(sessionContext,Navigation.sInstructionalOfferingLevel,new Long(id)));        myForm.setNextId(Navigation.getNext(sessionContext,Navigation.sInstructionalOfferingLevel,new Long(id)));        if (pattern == null) {          errors.add("name",new ActionMessage("errors.invalid","Unique Id : " + id));          saveErrors(request,errors);          request.setAttribute("DatePatterns.pattern",myForm.getDatePattern(request).getPatternHtml(true,myForm.getUniqueId()));          return mapping.findForward("list");        } else {          myForm.load(pattern);        }      }    }    if ("Delete".equals(op)) {      Transaction tx=null;      try {        org.hibernate.Session hibSession=(new TimePatternDAO()).getSession();        if (hibSession.getTransaction() == null || !hibSession.getTransaction().isActive())         tx=hibSession.beginTransaction();        DatePattern dp=(new DatePatternDAO()).get(myForm.getUniqueId(),hibSession);        ChangeLog.addChange(hibSession,sessionContext,dp,ChangeLog.Source.DATE_PATTERN_EDIT,ChangeLog.Operation.DELETE,null,null);        myForm.delete(hibSession);        tx.commit();      } catch (      Exception e) {        if (tx != null)         tx.rollback();        throw e;      }      myForm.load(null);      myForm.setOp("List");    }    if ("Fix Generated".equals(op)) {      Transaction tx=null;      PrintWriter out=null;      try {        org.hibernate.Session hibSession=(new TimePatternDAO()).getSession();        if (hibSession.getTransaction() == null || !hibSession.getTransaction().isActive())         tx=hibSession.beginTransaction();        File file=ApplicationProperties.getTempFile("fix","txt");        out=new PrintWriter(new FileWriter(file));        List<DatePattern> allDatePatterns=DatePattern.findAll(sessionContext.getUser().getCurrentAcademicSessionId(),true,null,null);        for (        DatePattern dp : allDatePatterns) {          if (!dp.getName().startsWith("generated"))           continue;          out.println("Checking " + dp.getName() + " ...");          List classes=hibSession.createQuery("select distinct c from Class_ as c inner join c.datePattern as dp where dp.uniqueId=:uniqueId").setLong("uniqueId",dp.getUniqueId().longValue()).list();          List subparts=hibSession.createQuery("select distinct s from SchedulingSubpart as s inner join s.datePattern as dp where dp.uniqueId=:uniqueId").setLong("uniqueId",dp.getUniqueId().longValue()).list();          Vector allClasses=new Vector(classes);          for (Iterator j=subparts.iterator(); j.hasNext(); ) {            SchedulingSubpart s=(SchedulingSubpart)j.next();            for (Iterator k=s.getClasses().iterator(); k.hasNext(); ) {              Class_ c=(Class_)k.next();              if (c.getDatePattern() == null)               allClasses.add(c);            }          }          if (allClasses.isEmpty()) {            out.println("  -- date pattern is not used -> delete");            for (Iterator j=dp.getDepartments().iterator(); j.hasNext(); ) {              Department d=(Department)j.next();              d.getDatePatterns().remove(dp);              hibSession.saveOrUpdate(d);            }            ChangeLog.addChange(hibSession,sessionContext,dp,ChangeLog.Source.DATE_PATTERN_EDIT,ChangeLog.Operation.DELETE,null,null);            hibSession.delete(dp);            continue;          }          for (Iterator j=allClasses.iterator(); j.hasNext(); ) {            Class_ clazz=(Class_)j.next();            out.println("  -- used by " + clazz.getClassLabel());          }          TreeSet days=dp.getUsage(allClasses);          out.println("    -- " + days);          if (days.isEmpty()) {            int offset=dp.getPatternOffset();            for (int x=0; x < dp.getPattern().length(); x++) {              if (dp.getPattern().charAt(x) != '1')               continue;              days.add(new Integer(x + offset));            }          }          DatePattern likeDp=null;          int likeDiff=0;          for (Iterator j=allDatePatterns.iterator(); j.hasNext(); ) {            DatePattern xdp=(DatePattern)j.next();            if (xdp.getName().startsWith("generated"))             continue;            TreeSet xdays=xdp.getUsage(allClasses);            if (xdays.isEmpty()) {              int offset=xdp.getPatternOffset();              for (int x=0; x < xdp.getPattern().length(); x++) {                if (xdp.getPattern().charAt(x) != '1')                 continue;                xdays.add(new Integer(x + offset));              }            }            int diff=diff(days,xdays);            if (likeDp == null || likeDiff > diff || (likeDiff == diff && xdp.isDefault())) {              likeDp=xdp;              likeDiff=diff;            }          }          if (likeDp != null) {            if (likeDiff <= 5) {              out.println("      -- like " + likeDp.getName() + ", diff="+ likeDiff);              out.println("      -- " + likeDp.getUsage(allClasses));              out.println("    -- transfering all classes and subparts from " + dp.getName() + " to "+ likeDp.getName());              for (Iterator j=classes.iterator(); j.hasNext(); ) {                Class_ clazz=(Class_)j.next();                clazz.setDatePattern(likeDp.isDefault() ? null : likeDp);                hibSession.saveOrUpdate(clazz);              }              for (Iterator j=subparts.iterator(); j.hasNext(); ) {                SchedulingSubpart subpart=(SchedulingSubpart)j.next();                subpart.setDatePattern(likeDp.isDefault() ? null : likeDp);                hibSession.saveOrUpdate(subpart);              }              out.println("    -- deleting date pattern " + dp.getName());              for (Iterator j=dp.getDepartments().iterator(); j.hasNext(); ) {                Department d=(Department)j.next();                d.getDatePatterns().remove(dp);                hibSession.saveOrUpdate(d);              }              ChangeLog.addChange(hibSession,sessionContext,dp,ChangeLog.Source.DATE_PATTERN_EDIT,ChangeLog.Operation.DELETE,null,null);              hibSession.delete(dp);            } else {              out.println("      -- like " + likeDp.getName() + ", diff="+ likeDiff);              out.println("      -- " + likeDp.getUsage(allClasses));              Formats.Format<Date> sdf=Formats.getDateFormat(Formats.Pattern.DATE_EVENT_SHORT);              dp.setName("generated " + sdf.format(dp.getStartDate()) + " - "+ sdf.format(dp.getEndDate()));              hibSession.saveOrUpdate(dp);            }          }        }        out.flush();        out.close();        out=null;        request.setAttribute(Constants.REQUEST_OPEN_URL,"temp/" + file.getName());        tx.commit();      } catch (      Exception e) {        if (tx != null)         tx.rollback();        throw e;      } finally {        if (out != null)         out.close();      }      myForm.load(null);      myForm.setOp("List");    }    if ("Generate SQL".equals(op)) {      PrintWriter out=ExportUtils.getPlainTextWriter(response,"tp.sql");      try {        TreeSet patterns=new TreeSet(DatePattern.findAll(sessionContext.getUser(),null,null));        boolean mysql=false;        int line=0;        if (mysql) {          out.println("INSERT INTO `timetable`.`date_pattern`(`uniqueid`, `name`, `pattern`, `offset`, `type`, `visible`, `session_id`)");        } else {          out.println("prompt Loading DATE_PATTERN...");        }        for (Iterator i=patterns.iterator(); i.hasNext(); ) {          DatePattern dp=(DatePattern)i.next();          if (dp.getType() == DatePattern.sTypeExtended)           continue;          if (!dp.isVisible())           continue;          if (mysql) {            if (line == 0)             out.print("VALUES"); else             out.println(",");            out.print(" (" + dp.getUniqueId() + ", '"+ dp.getName()+ "', '"+ dp.getPattern()+ "', "+ dp.getOffset()+ ", "+ dp.getType()+ ", "+ (dp.isVisible() ? "1" : "0")+ ", "+ sessionContext.getUser().getCurrentAcademicSessionId()+ ")");          } else {            out.println("insert into DATE_PATTERN (UNIQUEID, NAME, PATTERN, OFFSET, TYPE, VISIBLE, SESSION_ID)");            out.println("values (" + dp.getUniqueId() + ", '"+ dp.getName()+ "', '"+ dp.getPattern()+ "', "+ dp.getOffset()+ ", "+ dp.getType()+ ", "+ (dp.isVisible() ? "1" : "0")+ ", "+ sessionContext.getUser().getCurrentAcademicSessionId()+ ");");          }          line++;        }        if (mysql) {          out.println(";");        } else {          out.println("commit;");          out.println("prompt " + line + " records loaded");        }        out.println();        out.flush();        out.close();        out=null;      } catch (      Exception e) {        throw e;      } finally {        if (out != null)         out.close();      }      return null;    }    if ("Push Up".equals(op)) {      Transaction tx=null;      PrintWriter out=null;      try {        org.hibernate.Session hibSession=(new TimePatternDAO()).getSession();        if (hibSession.getTransaction() == null || !hibSession.getTransaction().isActive())         tx=hibSession.beginTransaction();        File file=ApplicationProperties.getTempFile("push","txt");        out=new PrintWriter(new FileWriter(file));        List subparts=hibSession.createQuery("select distinct c.schedulingSubpart from Class_ as c inner join c.datePattern as dp where dp.session.uniqueId=:sessionId").setLong("sessionId",sessionContext.getUser().getCurrentAcademicSessionId()).list();        for (Iterator i=subparts.iterator(); i.hasNext(); ) {          SchedulingSubpart subpart=(SchedulingSubpart)i.next();          out.println("Checking " + subpart.getSchedulingSubpartLabel() + " ...");          boolean sameDatePattern=true;          DatePattern dp=null;          for (Iterator j=subpart.getClasses().iterator(); j.hasNext(); ) {            Class_ clazz=(Class_)j.next();            if (clazz.getDatePattern() == null) {              sameDatePattern=false;              break;            }            if (dp == null)             dp=clazz.getDatePattern(); else             if (!dp.equals(clazz.getDatePattern())) {              sameDatePattern=false;              break;            }          }          if (!sameDatePattern)           continue;          out.println("  -- all classes share same date pattern " + dp.getName() + " --> pushing it to subpart");          for (Iterator j=subpart.getClasses().iterator(); j.hasNext(); ) {            Class_ clazz=(Class_)j.next();            clazz.setDatePattern(null);            hibSession.saveOrUpdate(clazz);          }          subpart.setDatePattern(dp.isDefault() ? null : dp);          hibSession.saveOrUpdate(subpart);        }        out.flush();        out.close();        out=null;        request.setAttribute(Constants.REQUEST_OPEN_URL,"temp/" + file.getName());        tx.commit();      } catch (      Exception e) {        if (tx != null)         tx.rollback();        throw e;      } finally {        if (out != null)         out.close();      }      myForm.load(null);      myForm.setOp("List");    }    if ("Assign Departments".equals(op)) {      Transaction tx=null;      PrintWriter out=null;      HashSet refresh=new HashSet();      try {        org.hibernate.Session hibSession=(new TimePatternDAO()).getSession();        if (hibSession.getTransaction() == null || !hibSession.getTransaction().isActive())         tx=hibSession.beginTransaction();        File file=ApplicationProperties.getTempFile("assigndept","txt");        out=new PrintWriter(new FileWriter(file));        TreeSet allDatePatterns=new TreeSet(DatePattern.findAll(sessionContext.getUser().getCurrentAcademicSessionId(),true,null,null));        for (Iterator i=allDatePatterns.iterator(); i.hasNext(); ) {          DatePattern dp=(DatePattern)i.next();          if (dp.getType().intValue() != DatePattern.sTypeExtended)           continue;          out.println("Checking " + dp.getName() + " ...");          List classes=hibSession.createQuery("select distinct c from Class_ as c inner join c.datePattern as dp where dp.uniqueId=:uniqueId").setLong("uniqueId",dp.getUniqueId().longValue()).list();          List subparts=hibSession.createQuery("select distinct s from SchedulingSubpart as s inner join s.datePattern as dp where dp.uniqueId=:uniqueId").setLong("uniqueId",dp.getUniqueId().longValue()).list();          HashSet depts=new HashSet();          for (Iterator j=classes.iterator(); j.hasNext(); ) {            Class_ c=(Class_)j.next();            depts.add(c.getManagingDept());          }          for (Iterator j=subparts.iterator(); j.hasNext(); ) {            SchedulingSubpart s=(SchedulingSubpart)j.next();            depts.add(s.getManagingDept());          }          out.println("  -- departments: " + depts);          boolean added=false;          for (Iterator j=depts.iterator(); j.hasNext(); ) {            Department d=(Department)j.next();            if (d.isExternalManager().booleanValue()) {              continue;            }            if (!dp.getDepartments().contains(d)) {              dp.getDepartments().add(d);              d.getDatePatterns().add(dp);              hibSession.saveOrUpdate(d);              out.println("    -- department " + d + " added to "+ dp.getName());              added=true;            }          }          if (added) {            hibSession.saveOrUpdate(dp);            ChangeLog.addChange(hibSession,sessionContext,dp,ChangeLog.Source.DATE_PATTERN_EDIT,ChangeLog.Operation.UPDATE,null,null);            refresh.add(dp);          }        }        out.flush();        out.close();        out=null;        request.setAttribute(Constants.REQUEST_OPEN_URL,"temp/" + file.getName());        tx.commit();        for (Iterator i=refresh.iterator(); i.hasNext(); ) {          hibSession.refresh(i.next());        }      } catch (      Exception e) {        if (tx != null)         tx.rollback();        throw e;      } finally {        if (out != null)         out.close();      }      myForm.load(null);      myForm.setOp("List");    }    if ("Export CSV".equals(op)) {      Transaction tx=null;      try {        org.hibernate.Session hibSession=(new TimePatternDAO()).getSession();        if (hibSession.getTransaction() == null || !hibSession.getTransaction().isActive())         tx=hibSession.beginTransaction();        CSVFile csv=new CSVFile();        csv.setHeader(new CSVFile.CSVField[]{new CSVFile.CSVField("Name"),new CSVFile.CSVField("Type"),new CSVFile.CSVField("NrDays"),new CSVFile.CSVField("From"),new CSVFile.CSVField("To"),new CSVFile.CSVField("Dates"),new CSVFile.CSVField("Parent"),new CSVFile.CSVField("Departments"),new CSVFile.CSVField("Classes")});        Formats.Format<Date> sdf=Formats.getDateFormat(Formats.Pattern.DATE_EVENT_SHORT);        TreeSet allDatePatterns=new TreeSet(DatePattern.findAll(sessionContext.getUser().getCurrentAcademicSessionId(),true,null,null));        for (Iterator i=allDatePatterns.iterator(); i.hasNext(); ) {          DatePattern dp=(DatePattern)i.next();          List classes=hibSession.createQuery("select distinct c from Class_ as c inner join c.datePattern as dp where dp.uniqueId=:uniqueId").setLong("uniqueId",dp.getUniqueId().longValue()).list();          List subparts=hibSession.createQuery("select distinct s from SchedulingSubpart as s inner join s.datePattern as dp where dp.uniqueId=:uniqueId").setLong("uniqueId",dp.getUniqueId().longValue()).list();          TreeSet allClasses=new TreeSet(new ClassComparator(ClassComparator.COMPARE_BY_HIERARCHY));          allClasses.addAll(classes);          for (Iterator j=subparts.iterator(); j.hasNext(); ) {            SchedulingSubpart s=(SchedulingSubpart)j.next();            for (Iterator k=s.getClasses().iterator(); k.hasNext(); ) {              Class_ c=(Class_)k.next();              if (c.getDatePattern() == null)               allClasses.add(c);            }          }          String deptStr="";          TreeSet depts=new TreeSet(dp.getDepartments());          for (Iterator j=depts.iterator(); j.hasNext(); ) {            Department d=(Department)j.next();            deptStr+=d.getShortLabel().trim();            if (j.hasNext()) {              deptStr+=", ";            }          }          String classStr="";          for (Iterator j=allClasses.iterator(); j.hasNext(); ) {            Class_ clazz=(Class_)j.next();            classStr+=clazz.getClassLabel();            if (j.hasNext()) {              classStr+=", ";            }          }          String datePattStr="";          for (Iterator j=dp.getParents().iterator(); j.hasNext(); ) {            DatePattern d=(DatePattern)j.next();            datePattStr+=d.getName();            if (j.hasNext()) {              datePattStr+=", ";            }          }          csv.addLine(new CSVFile.CSVField[]{new CSVFile.CSVField(dp.getName()),new CSVFile.CSVField(DatePattern.sTypes[dp.getType().intValue()]),new CSVFile.CSVField(String.valueOf(dp.size())),new CSVFile.CSVField(sdf.format(dp.getStartDate())),new CSVFile.CSVField(sdf.format(dp.getEndDate())),new CSVFile.CSVField(dp.getPatternString()),new CSVFile.CSVField(datePattStr),new CSVFile.CSVField(deptStr),new CSVFile.CSVField(classStr)});        }        ExportUtils.exportCSV(csv,response,"datePatterns");        tx.commit();        return null;      } catch (      Exception e) {        if (tx != null)         tx.rollback();        throw e;      }    }    if ("List".equals(myForm.getOp())) {      getDatePatterns(request);      return mapping.findForward("list");    }    request.setAttribute("DatePatterns.pattern",myForm.getDatePattern(request).getPatternHtml(true,myForm.getUniqueId()));    return mapping.findForward(myForm.getUniqueId().longValue() < 0 ? "add" : "edit");  } catch (  Exception e) {    Debug.error(e);    throw e;  }}  }
class C{  public Matrix4x3f mulOrtho(Matrix4x3fc view){  return mulOrtho(view,this);}  }
class C{  public SVGOMAltGlyphDefElement(String prefix,AbstractDocument owner){  super(prefix,owner);}  }
class C{  @Override public String toString(){  StringBuilder strb=new StringBuilder();  StringBuilder row=new StringBuilder();  for (  Entry<NameStaticPair,MemberMatrix> entry : entrySet()) {    row.setLength(0);    row.append(entry.getKey().toString()).append(": ");    UtilN4.fill(row,36);    strb.append(row);    strb.append(entry.getValue().toShortString()).append('\n');  }  return strb.toString();}  }
class C{  @Override public int hashCode(){  return (b) ? -145 : +78;}  }
class C{  public void deleteAll(){  this.db.delete(TABLE_NAME,null,null);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:01.530 -0500",hash_original_method="F1AEE3667206B123E352DC3A76F57C2B",hash_generated_method="346DD33C10E5D2CF0A9A7E95BB803763") public static void markAsReplaced(Spannable content,int start,int end,String original){  Replaced[] repl=content.getSpans(0,content.length(),Replaced.class);  for (int a=0; a < repl.length; a++) {    content.removeSpan(repl[a]);  }  int len=original.length();  char[] orig=new char[len];  original.getChars(0,len,orig,0);  content.setSpan(new Replaced(orig),start,end,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);}  }
class C{  public void close(RootFragment fragment){  getRoot().manager.close(fragment);}  }
class C{  protected Object createEntranceTransition(){  return null;}  }
class C{  protected static String LexicalError(boolean EOFSeen,int lexState,int errorLine,int errorColumn,String errorAfter,char curChar){  return ("Lexical error at line " + errorLine + ", column "+ errorColumn+ ".  Encountered: "+ (EOFSeen ? "<EOF> " : ("\"" + addEscapes(String.valueOf(curChar)) + "\"") + " (" + (int)curChar+ "), ")+ "after : \""+ addEscapes(errorAfter)+ "\"");}  }
class C{  public static String format(Date date){  Calendar calendar=new GregorianCalendar(TIMEZONE_GMT,Locale.US);  calendar.setTime(date);  int capacity="yyyy-MM-ddThh:mm:ss".length();  StringBuilder formatted=new StringBuilder(capacity);  padInt(formatted,calendar.get(Calendar.YEAR),"yyyy".length());  formatted.append('-');  padInt(formatted,calendar.get(Calendar.MONTH) + 1,"MM".length());  formatted.append('-');  padInt(formatted,calendar.get(Calendar.DAY_OF_MONTH),"dd".length());  formatted.append('T');  padInt(formatted,calendar.get(Calendar.HOUR_OF_DAY),"hh".length());  formatted.append(':');  padInt(formatted,calendar.get(Calendar.MINUTE),"mm".length());  formatted.append(':');  padInt(formatted,calendar.get(Calendar.SECOND),"ss".length());  return formatted.toString();}  }
class C{  public Boolean isRTPMulticast(){  return rtpMulticast;}  }
class C{  public final boolean sendMessageAtFrontOfQueue(Message msg){  return mExec.sendMessageAtFrontOfQueue(msg);}  }
class C{  static public String replace(String value){  String result=new String();  if (value != null) {    for (int i=0; i < value.length(); i++) {      char c=value.charAt(i);      if (Character.isWhitespace(c)) {        result=result.concat(" ");      } else {        result=result.concat(Character.toString(c));      }    }  }  return result;}  }
class C{  public static TemplateCall asTemplateCall(RDFNode node){  if (node instanceof Resource) {    Statement s=((Resource)node).getProperty(RDF.type);    if (s != null && s.getObject().isURIResource()) {      String uri=s.getResource().getURI();      Template template=SPINModuleRegistry.get().getTemplate(uri,s.getModel());      if (template != null) {        return node.as(TemplateCall.class);      }    }  }  return null;}  }
class C{  public void addCharEntity(int i,StringBuilder sb){  String padding="";  if (i <= 9) {    padding="00";  } else   if (i <= 99) {    padding="0";  }  String number=padding + i;  sb.append("&#");  sb.append(number);  sb.append(';');}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @DSComment("not sensitive") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:45.201 -0500",hash_original_method="E8687801225ADA3B0E63B61937B0020C",hash_generated_method="CB2CD97BAA9992C591917F959A4543EB") public long length() throws IOException {  try {    return Libcore.os.fstat(fd).st_size;  } catch (  ErrnoException errnoException) {    throw errnoException.rethrowAsIOException();  }}  }
class C{  public static Map<String,RateLimitStatus> createRateLimitStatus(final String rawJSON) throws TwitterException {  try {    final JSONObject json=new JSONObject(rawJSON);    return (Map<String,RateLimitStatus>)rateLimitStatusConstructor.invoke(Class.forName("twitter4j.internal.json.RateLimitStatusJSONImpl"),json);  } catch (  final ClassNotFoundException e) {    throw new TwitterException(e);  }catch (  final IllegalAccessException e) {    throw new AssertionError(e);  }catch (  final InvocationTargetException e) {    throw new TwitterException(e);  }catch (  final JSONException e) {    throw new TwitterException(e);  }}  }
class C{  public boolean isUseAverage(){  return useAvg;}  }
class C{  public static NSObject parse(File f) throws IOException, ParseException {  return parse(new FileInputStream(f));}  }
class C{  public static void main(String[] args) throws Exception {  String deviceCfg=args[0];  IotProvider provider=new IotProvider(null);  registerHeartbeat(provider);  registerSensors(provider);  registerDisplay(provider);  provider.start();}  }
class C{  protected MappingRuleImpl(){  super();}  }
class C{  public void createFieldEditors(){}  }
class C{  public SabresQuery<T> whereLessThan(String key,Object value){  addWhere(key,Where.lessThan(key,SabresValue.create(value)));  return this;}  }
class C{  public static Jama.Matrix sample(Jama.Matrix M,Random r){  return new Jama.Matrix(sample(M.getArray(),r));}  }
class C{  public void testUnsizedDoublesCountSeq(){  LongAdder counter=new LongAdder();  SplittableRandom r=new SplittableRandom();  long size=100;  r.doubles().limit(size).forEach(null);  assertEquals(size,counter.sum());}  }
class C{  public DimensionsDescriptor(Fields fields){  setFields(fields);}  }
class C{  static <T1,T2>Seq<Tuple2<T1,T2>> zip(final Stream<T1> left,final Stream<? extends T2> right){  return zip(left,right,null);}  }
class C{  private void removeListeners(){  for (  RegionStatus region : regions) {    region.removeListeners();  }}  }
class C{  private boolean isSpecialCase(WildcardType wildcardType){  return false;}  }
class C{  public static byte[] decodeWebSafe(String s) throws Base64DecoderException {  byte[] bytes=s.getBytes();  return decodeWebSafe(bytes,0,bytes.length);}  }
class C{  public final void rotZ(float angle){  float sinAngle, cosAngle;  sinAngle=(float)Math.sin((double)angle);  cosAngle=(float)Math.cos((double)angle);  this.m00=cosAngle;  this.m01=-sinAngle;  this.m02=(float)0.0;  this.m03=(float)0.0;  this.m10=sinAngle;  this.m11=cosAngle;  this.m12=(float)0.0;  this.m13=(float)0.0;  this.m20=(float)0.0;  this.m21=(float)0.0;  this.m22=(float)1.0;  this.m23=(float)0.0;  this.m30=(float)0.0;  this.m31=(float)0.0;  this.m32=(float)0.0;  this.m33=(float)1.0;}  }
class C{  public static double computeDimension(double[][] parameters){  if (parameters.length == 0) {    return 0.0;  }  List<Double> X=new ArrayList<Double>();  List<Double> Y=new ArrayList<Double>();  for (double r=R_MAX; r >= R_MIN; r-=R_MIN) {    double lr=Math.log(r);    double lc=Math.log(computeCorrelationSum(parameters,r));    if (lc == Double.NEGATIVE_INFINITY) {      break;    }    X.add(lr);    Y.add(lc);  }  int n=X.size();  if (n < 5) {    return 0.0;  }  double sumX=0.0;  double sumXX=0.0;  double sumY=0.0;  double sumXY=0.0;  int remove=getCorrelationDimensionBounds(X,Y);  for (int i=remove; i < n - remove; i++) {    sumX+=X.get(i);    sumXX+=X.get(i) * X.get(i);    sumY+=Y.get(i);    sumXY+=X.get(i) * Y.get(i);  }  return (sumX * sumY - n * sumXY) / (sumX * sumX - n * sumXX);}  }
class C{  public boolean isXLegendCentered(){  return mCenterXLegendText;}  }
class C{  public void charactersRaw(char ch[],int start,int length) throws org.xml.sax.SAXException {  try {    writeNormalizedChars(ch,start,length,m_lineSepUse);  } catch (  IOException ioe) {    throw new SAXException(ioe);  }}  }
class C{  public static IPath handleToResourcePath(final String project,final String handle){  final IPath path=Path.fromPortableString(handle);  if (project != null && !"".equals(project) && !path.isAbsolute())   return new Path(project).append(path).makeAbsolute();  return path;}  }
class C{  public CJKAnalyzer(CharArraySet stopwords){  super(stopwords);}  }
class C{  protected void completeEditing(boolean messageStop,boolean messageCancel,boolean messageTree){  if (stopEditingInCompleteEditing && editingComponent != null) {    Component oldComponent=editingComponent;    TreePath oldPath=editingPath;    TreeCellEditor oldEditor=cellEditor;    Object newValue=oldEditor.getCellEditorValue();    Rectangle editingBounds=getPathBounds(tree,editingPath);    boolean requestFocus=(tree != null && (tree.hasFocus() || SwingUtilities.findFocusOwner(editingComponent) != null));    editingComponent=null;    editingPath=null;    if (messageStop)     oldEditor.stopCellEditing(); else     if (messageCancel)     oldEditor.cancelCellEditing();    tree.remove(oldComponent);    if (editorHasDifferentSize) {      treeState.invalidatePathBounds(oldPath);      updateSize();    } else     if (editingBounds != null) {      editingBounds.x=0;      editingBounds.width=tree.getSize().width;      tree.repaint(editingBounds);    }    if (requestFocus)     tree.requestFocus();    if (messageTree)     treeModel.valueForPathChanged(oldPath,newValue);  }}  }
class C{  public Bundler putIntArray(String key,int[] value){  bundle.putIntArray(key,value);  return this;}  }
class C{  public void updateAttributes(String targetId,Map<String,String> attributes) throws IOException {  startChangesIfNecessary();  ResponseWriter writer=getWrapped();  writer.startElement("attributes",null);  writer.writeAttribute("id",targetId,null);  for (  Map.Entry<String,String> entry : attributes.entrySet()) {    writer.startElement("attribute",null);    writer.writeAttribute("name",entry.getKey(),null);    writer.writeAttribute("value",entry.getValue(),null);    writer.endElement("attribute");  }  writer.endElement("attributes");}  }
class C{  public void killTarget(Object target){  for (int i=0, n=objects.size(); i < n; i++) {    BaseTween<?> obj=objects.get(i);    obj.killTarget(target);  }}  }
class C{  public final void removeCallbacks(Runnable r,Object token){  final WeakRunnable runnable=mRunnables.remove(r);  if (runnable != null) {    mExec.removeCallbacks(runnable,token);  }}  }
class C{  private static void validateRegex(String fieldName,String value,String pattern,String errorMessage){  if (!matches(pattern,value)) {    if (StringUtils.isNotBlank(errorMessage)) {      Validation.addError(fieldName,errorMessage);    } else {      Validation.addError(fieldName,MessagesUtils.get(INVALID_REGEX_KEY,pattern));    }  }}  }
class C{  public void onMessageWaitingIndicatorChanged(boolean mwi){}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static Geo center(GeoArray poly){  return center(poly,new Geo());}  }
class C{  public TransferEntropyCalculatorKernelPlain(){  super();}  }
class C{  public E putIfAbsent(int key,E value){  if (value == null) {    throw new NullPointerException();  }  E prev;  if (array.length <= key) {    array=Arrays.copyOf(array,key * 3 / 2 + 1);    prev=null;  } else {    prev=(E)array[key];  }  if (prev == null) {    array[key]=value;    size++;  }  return prev;}  }
class C{  public void start(){  return;}  }
class C{  public boolean isDefaultNamespace(String namespaceURI){  return false;}  }
class C{  public final boolean isTopToBottom(){  return topToBottom;}  }
class C{  private void onFinishedMovement(){  if (mSuppressSelectionChanged) {    mSuppressSelectionChanged=false;    super.selectionChanged();  }  checkSelectionChanged();  invalidate();}  }
class C{  private PostgreSQLFunctionsLoader(){}  }
class C{  public static void createLockFile(FileSystem fs,Path lockFile,boolean accept) throws IOException {  if (fs.exists(lockFile)) {    if (!accept)     throw new IOException("lock file " + lockFile + " already exists.");    if (fs.getFileStatus(lockFile).isDir())     throw new IOException("lock file " + lockFile + " already exists and is a directory.");  } else {    fs.mkdirs(lockFile.getParent());    fs.createNewFile(lockFile);  }}  }
class C{  public void testEmptyIndex() throws IOException {  Directory rd1=newDirectory();  IndexWriter iw=new IndexWriter(rd1,newIndexWriterConfig(new MockAnalyzer(random())));  iw.close();  Directory rd2=newDirectory(rd1);  Directory rdOut=newDirectory();  IndexWriter iwOut=new IndexWriter(rdOut,newIndexWriterConfig(new MockAnalyzer(random())));  iwOut.addIndexes(SlowCodecReaderWrapper.wrap(new ParallelLeafReader()));  iwOut.forceMerge(1);  ParallelCompositeReader cpr=new ParallelCompositeReader(DirectoryReader.open(rd1),DirectoryReader.open(rd2));  List<CodecReader> leaves=new ArrayList<>();  for (  LeafReaderContext leaf : cpr.leaves()) {    leaves.add(SlowCodecReaderWrapper.wrap(leaf.reader()));  }  iwOut.addIndexes(leaves.toArray(new CodecReader[0]));  iwOut.forceMerge(1);  iwOut.close();  rdOut.close();  rd1.close();  rd2.close();}  }
class C{  private static void zoomEdgeNode(final AbstractZyGraph<?,?> graph,final Edge edge,final double mouseX,final double mouseY){  assert edge != null;  final AbstractZyGraphSettings settings=graph.getSettings();  final boolean animate=settings.getLayoutSettings().getAnimateLayout();  final EdgeRealizer realizer=graph.getGraph().getRealizer(edge);  final NodeRealizer sourceRealizer=graph.getGraph().getRealizer(edge.source());  final NodeRealizer targetRealizer=graph.getGraph().getRealizer(edge.target());  final double srcPortX=realizer.getSourcePort().getX(sourceRealizer);  final double srcPortY=realizer.getSourcePort().getY(sourceRealizer);  final double tarPortX=realizer.getSourcePort().getX(targetRealizer);  final double tarPortY=realizer.getSourcePort().getY(targetRealizer);  final double srcLengthA=Math.abs(srcPortX - mouseX);  final double srcHeightB=Math.abs(srcPortY - mouseY);  final double tarLengthA=Math.abs(tarPortX - mouseX);  final double tarHeightB=Math.abs(tarPortY - mouseY);  final double srcLengthC=Math.sqrt(Math.pow(srcLengthA,2) + Math.pow(srcHeightB,2));  final double tarLengthC=Math.sqrt(Math.pow(tarLengthA,2) + Math.pow(tarHeightB,2));  if (srcLengthC > tarLengthC) {    final Point2D.Double center=new Point2D.Double(sourceRealizer.getCenterX(),sourceRealizer.getCenterY());    graph.getView().focusView(graph.getView().getZoom(),center,animate);  } else {    final Point2D.Double center=new Point2D.Double(targetRealizer.getCenterX(),targetRealizer.getCenterY());    graph.getView().focusView(graph.getView().getZoom(),center,animate);  }}  }
class C{  @Override protected KeyManager[] engineGetKeyManagers(){  if (!isInitialized) {    throw new IllegalStateException("KeyManagerFactoryImpl is not initialized");  }  return new KeyManager[]{keyManager};}  }
class C{  public Atom convertCharacter(char c,boolean oneChar) throws ParseException {  if (ignoreWhiteSpace) {    if (c >= 945 && c <= 969) {      return SymbolAtom.get(TeXFormula.symbolMappings[c]);    } else     if (c >= 913 && c <= 937) {      return new TeXFormula(TeXFormula.symbolFormulaMappings[c]).root;    }  }  c=convertToRomanNumber(c);  if (((c < '0' || c > '9') && (c < 'a' || c > 'z') && (c < 'A' || c > 'Z'))) {    Character.UnicodeBlock block=Character.UnicodeBlock.of(c);    if (!isLoading && !DefaultTeXFont.loadedAlphabets.contains(block)) {      DefaultTeXFont.addAlphabet(DefaultTeXFont.registeredAlphabets.get(block));    }    String symbolName=TeXFormula.symbolMappings[c];    if (symbolName == null && (TeXFormula.symbolFormulaMappings == null || TeXFormula.symbolFormulaMappings[c] == null)) {      TeXFormula.FontInfos fontInfos=null;      boolean isLatin=Character.UnicodeBlock.BASIC_LATIN.equals(block);      if ((isLatin && TeXFormula.isRegisteredBlock(Character.UnicodeBlock.BASIC_LATIN)) || !isLatin) {        fontInfos=TeXFormula.getExternalFont(block);      }      if (fontInfos != null) {        if (oneChar) {          return new JavaFontRenderingAtom(Character.toString(c),fontInfos);        }        int start=pos++;        int end=len - 1;        while (pos < len) {          c=parseString.charAt(pos);          if (!Character.UnicodeBlock.of(c).equals(block)) {            end=--pos;            break;          }          pos++;        }        return new JavaFontRenderingAtom(parseString.substring(start,end + 1),fontInfos);      }      if (!isPartial) {        throw new ParseException("Unknown character : '" + Character.toString(c) + "' (or "+ ((int)c)+ ")");      } else {        return new ColorAtom(new RomanAtom(new TeXFormula("\\text{(Unknown char " + ((int)c) + ")}").root),null,Color.RED);      }    } else {      if (!ignoreWhiteSpace) {        if (TeXFormula.symbolTextMappings[c] != null) {          return SymbolAtom.get(TeXFormula.symbolTextMappings[c]).setUnicode(c);        }      }      if (TeXFormula.symbolFormulaMappings != null && TeXFormula.symbolFormulaMappings[c] != null) {        return new TeXFormula(TeXFormula.symbolFormulaMappings[c]).root;      }      try {        return SymbolAtom.get(symbolName);      } catch (      SymbolNotFoundException e) {        throw new ParseException("The character '" + Character.toString(c) + "' was mapped to an unknown symbol with the name '"+ symbolName+ "'!",e);      }    }  } else {    TeXFormula.FontInfos fontInfos=TeXFormula.externalFontMap.get(Character.UnicodeBlock.BASIC_LATIN);    if (fontInfos != null) {      if (oneChar) {        return new JavaFontRenderingAtom(Character.toString(c),fontInfos);      }      int start=pos++;      int end=len - 1;      while (pos < len) {        c=parseString.charAt(pos);        if (((c < '0' || c > '9') && (c < 'a' || c > 'z') && (c < 'A' || c > 'Z'))) {          end=--pos;          break;        }        pos++;      }      return new JavaFontRenderingAtom(parseString.substring(start,end + 1),fontInfos);    }    return new CharAtom(c,formula.textStyle);  }}  }
class C{  public int describeContents(){  return 0;}  }
class C{  protected boolean isFileVisible(File file){  if (file == null || !file.exists() || !file.canRead() || file.isHidden()) {    return false;  }  return true;}  }
class C{  public Boolean isZeroConfiguration(){  return zeroConfiguration;}  }
class C{  public synchronized void customVibration(final int times,final int onTime,final int offTime){  final int newOnTime=Math.min(onTime,500);  List<BLEAction> list=new ArrayList<>();  for (int i=1; i <= times; i++) {    list.add(new WriteAction(Profile.UUID_CHAR_CONTROL_POINT,Protocol.VIBRATION_UNTIL_CALL_STOP));    list.add(new WaitAction(newOnTime));    list.add(new WriteAction(Profile.UUID_CHAR_CONTROL_POINT,Protocol.STOP_VIBRATION));    list.add(new WaitAction(offTime));  }  queue(list);}  }
class C{  public void evaluateCrossValidation(List<ClassificationDataSet> lcds){  List<ClassificationDataSet> trainCombinations=new ArrayList<ClassificationDataSet>(lcds.size());  for (int i=0; i < lcds.size(); i++)   trainCombinations.add(ClassificationDataSet.comineAllBut(lcds,i));  evaluateCrossValidation(lcds,trainCombinations);}  }
class C{  public CSVReader(Reader reader,char separator,char quotechar,char escape){  this(reader,separator,quotechar,escape,DEFAULT_SKIP_LINES,CSVParser.DEFAULT_STRICT_QUOTES);}  }
class C{  public void put(E item) throws InterruptedException {  if (!done.get()) {    queue.put(item);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.269 -0500",hash_original_method="9B68B72DA8144991BC14639C6BE11723",hash_generated_method="8327BB6171ABB6B2BBE7C0886198BF4C") public SubscriptionStateHeader createSubscriptionStateHeader(String subscriptionState) throws ParseException {  if (subscriptionState == null)   throw new NullPointerException("null subscriptionState arg");  SubscriptionState s=new SubscriptionState();  s.setState(subscriptionState);  return s;}  }
class C{  public static void e(String msg){  if (null == msg || null == sXLogConfig) {    return;  }  if (allowConsoleLogPrint(LogLevel.E)) {    Log.w(getDefaultTag(),msg);  }  if (allowFileLogPrint(LogLevel.E)) {    FileLogHelper.getInstance().logToFile(msg,null,getDefaultTag(),LogLevel.E);  }}  }
class C{  public VoiceSearchParams(String query,Bundle extras){  this.query=query;  if (TextUtils.isEmpty(query)) {    isAny=true;  } else {    String mediaFocus=extras.getString(MediaStore.EXTRA_MEDIA_FOCUS);    if (TextUtils.equals(mediaFocus,MediaStore.Audio.Genres.ENTRY_CONTENT_TYPE)) {      isGenreFocus=true;      genre=extras.getString(MediaStore.EXTRA_MEDIA_GENRE);      if (TextUtils.isEmpty(genre)) {        genre=query;      }    } else     if (TextUtils.equals(mediaFocus,MediaStore.Audio.Artists.ENTRY_CONTENT_TYPE)) {      isArtistFocus=true;      genre=extras.getString(MediaStore.EXTRA_MEDIA_GENRE);      artist=extras.getString(MediaStore.EXTRA_MEDIA_ARTIST);    } else     if (TextUtils.equals(mediaFocus,MediaStore.Audio.Albums.ENTRY_CONTENT_TYPE)) {      isAlbumFocus=true;      album=extras.getString(MediaStore.EXTRA_MEDIA_ALBUM);      genre=extras.getString(MediaStore.EXTRA_MEDIA_GENRE);      artist=extras.getString(MediaStore.EXTRA_MEDIA_ARTIST);    } else     if (TextUtils.equals(mediaFocus,MediaStore.Audio.Media.ENTRY_CONTENT_TYPE)) {      isSongFocus=true;      song=extras.getString(MediaStore.EXTRA_MEDIA_TITLE);      album=extras.getString(MediaStore.EXTRA_MEDIA_ALBUM);      genre=extras.getString(MediaStore.EXTRA_MEDIA_GENRE);      artist=extras.getString(MediaStore.EXTRA_MEDIA_ARTIST);    } else {      isUnstructured=true;    }  }}  }
class C{  public void registerSpecialTileEntities(){  GameRegistry.registerTileEntity(TileEntityEnrichmentChamber.class,"EnrichmentChamber");  GameRegistry.registerTileEntity(TileEntityOsmiumCompressor.class,"OsmiumCompressor");  GameRegistry.registerTileEntity(TileEntityCombiner.class,"Combiner");  GameRegistry.registerTileEntity(TileEntityCrusher.class,"Crusher");  GameRegistry.registerTileEntity(TileEntityFactory.class,"SmeltingFactory");  GameRegistry.registerTileEntity(TileEntityAdvancedFactory.class,"AdvancedSmeltingFactory");  GameRegistry.registerTileEntity(TileEntityEliteFactory.class,"UltimateSmeltingFactory");  GameRegistry.registerTileEntity(TileEntityPurificationChamber.class,"PurificationChamber");  GameRegistry.registerTileEntity(TileEntityEnergizedSmelter.class,"EnergizedSmelter");  GameRegistry.registerTileEntity(TileEntityMetallurgicInfuser.class,"MetallurgicInfuser");  GameRegistry.registerTileEntity(TileEntityGasTank.class,"GasTank");  GameRegistry.registerTileEntity(TileEntityEnergyCube.class,"EnergyCube");  GameRegistry.registerTileEntity(TileEntityElectricPump.class,"ElectricPump");  GameRegistry.registerTileEntity(TileEntityElectricChest.class,"ElectricChest");  GameRegistry.registerTileEntity(TileEntityDynamicTank.class,"DynamicTank");  GameRegistry.registerTileEntity(TileEntityDynamicValve.class,"DynamicValve");  GameRegistry.registerTileEntity(TileEntityChargepad.class,"Chargepad");  GameRegistry.registerTileEntity(TileEntityLogisticalSorter.class,"LogisticalSorter");  GameRegistry.registerTileEntity(TileEntityBin.class,"Bin");  GameRegistry.registerTileEntity(TileEntityDigitalMiner.class,"DigitalMiner");  GameRegistry.registerTileEntity(TileEntityObsidianTNT.class,"ObsidianTNT");  GameRegistry.registerTileEntity(TileEntityRotaryCondensentrator.class,"RotaryCondensentrator");  GameRegistry.registerTileEntity(TileEntityTeleporter.class,"MekanismTeleporter");  GameRegistry.registerTileEntity(TileEntityChemicalOxidizer.class,"ChemicalOxidizer");  GameRegistry.registerTileEntity(TileEntityChemicalInfuser.class,"ChemicalInfuser");  GameRegistry.registerTileEntity(TileEntityChemicalInjectionChamber.class,"ChemicalInjectionChamber");  GameRegistry.registerTileEntity(TileEntityElectrolyticSeparator.class,"ElectrolyticSeparator");  GameRegistry.registerTileEntity(TileEntitySolarEvaporationController.class,"SalinationController");  GameRegistry.registerTileEntity(TileEntityPrecisionSawmill.class,"PrecisionSawmill");  GameRegistry.registerTileEntity(TileEntityChemicalDissolutionChamber.class,"ChemicalDissolutionChamber");  GameRegistry.registerTileEntity(TileEntityChemicalWasher.class,"ChemicalWasher");  GameRegistry.registerTileEntity(TileEntityChemicalCrystallizer.class,"ChemicalCrystallizer");  GameRegistry.registerTileEntity(TileEntitySeismicVibrator.class,"SeismicVibrator");  GameRegistry.registerTileEntity(TileEntityPRC.class,"PressurizedReactionChamber");  GameRegistry.registerTileEntity(TileEntityPortableTank.class,"PortableTank");  GameRegistry.registerTileEntity(TileEntityFluidicPlenisher.class,"FluidicPlenisher");  GameRegistry.registerTileEntity(TileEntityLaser.class,"Laser");  GameRegistry.registerTileEntity(TileEntityLaserAmplifier.class,"LaserAmplifier");  GameRegistry.registerTileEntity(TileEntityLaserTractorBeam.class,"LaserTractorBeam");  GameRegistry.registerTileEntity(TileEntitySolarNeutronActivator.class,"SolarNeutronActivator");  GameRegistry.registerTileEntity(TileEntityAmbientAccumulator.class,"AmbientAccumulator");  GameRegistry.registerTileEntity(TileEntityInductionCasing.class,"InductionCasing");  GameRegistry.registerTileEntity(TileEntityInductionPort.class,"InductionPort");  GameRegistry.registerTileEntity(TileEntityInductionCell.class,"InductionCell");  GameRegistry.registerTileEntity(TileEntityInductionProvider.class,"InductionProvider");  GameRegistry.registerTileEntity(TileEntityOredictionificator.class,"Oredictionificator");}  }
class C{  public Path findFromPath(){  int count=0;  Path next=null;  int currPathCnt=paths.size();  Path pList[]=new Path[currPathCnt];  boolean isSet[]=new boolean[currPathCnt];  boolean isActive[]=new boolean[currPathCnt];  int pDir[]=new int[currPathCnt];  int pFromDir[]=new int[currPathCnt];  for (int i=0; i < currPathCnt; i++) {    pList[i]=paths.get(i);    isSet[i]=pList[i].checkPathSet();    Block b=pList[i].getBlock();    if (b != null) {      if (b.getState() == OCCUPIED) {        isActive[i]=true;      } else {        isActive[i]=false;      }      pDir[i]=b.getDirection();    } else {      isActive[i]=false;      pDir[i]=-1;    }    pFromDir[i]=pList[i].getFromBlockDirection();    if (isSet[i] && isActive[i]) {      count++;      next=pList[i];    }  }  if ((count == 0) || (count == 1)) {  } else {    log.debug("Block {} - count of active linked blocks = {}",getSystemName(),count);    next=null;    count=0;    for (int i=0; i < currPathCnt; i++) {      if (isSet[i] && isActive[i]) {        log.debug("comparing {} ({}) to {} ({})",pList[i].getBlock().getDisplayName(),Path.decodeDirection(pDir[i]),getSystemName(),Path.decodeDirection(pFromDir[i]));        if ((pDir[i] & pFromDir[i]) > 0) {          count++;          next=pList[i];        }      }    }    if (next == null) {      log.debug("next is null!");    }    if (next != null && count == 1) {    } else {      log.warn("count of " + count + " ACTIVE neighbors with proper direction can't be handled for block "+ getSystemName());    }  }  if (log.isDebugEnabled()) {    log.debug("Block {} with direction {} gets new value from {} + (informational. No state change)",getSystemName(),Path.decodeDirection(getDirection()),(next != null ? next.getBlock().getSystemName() : "(no next block)"));  }  return (next);}  }
class C{  public RoundedBitmapBuilder cornerRadiusDp(float radius){  return cornerRadius(TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,radius,mDisplayMetrics));}  }
class C{  public PropertyInfo constructPropertyObj(String stateStr) throws Exception {  if (stateStr != null) {    final String[] strings=stateStr.split(ENCODING_SEPARATOR);    if (strings.length == 0) {      return new PropertyInfo();    }    return new PropertyInfo(PropertyInfoUtil.splitKeyValue(strings));  }  return null;}  }
class C{  public boolean isTaskStartup(){  return isTaskStartup;}  }
class C{  public static Pattern createPattern(String pattern,boolean isCaseSensitive,boolean isRegexSearch) throws PatternSyntaxException {  if (!isRegexSearch) {    pattern=asRegEx(pattern,new StringBuffer()).toString();  }  if (!isCaseSensitive)   return Pattern.compile(pattern,Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE | Pattern.MULTILINE);  return Pattern.compile(pattern,Pattern.MULTILINE);}  }
class C{  public boolean isParseGit(){  return parseGit;}  }
class C{  public void playTogether(Animator... items){  if (items != null) {    mNeedsSort=true;    Builder builder=play(items[0]);    for (int i=1; i < items.length; ++i) {      builder.with(items[i]);    }  }}  }
class C{  public void normalizeDocument(){}  }
class C{  public static void installMouseListenerOnAllComponents(MouseListener m,Container c){  c.addMouseListener(m);  Component[] components=c.getComponents();  for (int i=0; i < components.length; i++) {    if (components[i] instanceof Container) {      MouseInputAdapterInstaller.installMouseListenerOnAllComponents(m,(Container)components[i]);    } else {      c.addMouseListener(m);    }  }}  }
class C{  @Override public String toString(){  if (m_Class == null) {    return "ZeroR: No model built yet.";  }  if (m_Counts == null) {    return "ZeroR predicts class value: " + m_ClassValue;  } else {    return "ZeroR predicts class value: " + m_Class.value((int)m_ClassValue);  }}  }
class C{  public void pI(){  indentIn();}  }
class C{  public void mark(int readAheadLimit) throws IOException {  fInputStream.mark(readAheadLimit);}  }
class C{  public static float tan(float fValue){  return (float)Math.tan(fValue);}  }
class C{  public double computeInPlace(double... dataset){  checkArgument(dataset.length > 0,"Cannot calculate quantiles of an empty dataset");  if (containsNaN(dataset)) {    return NaN;  }  long numerator=(long)index * (dataset.length - 1);  int quotient=(int)LongMath.divide(numerator,scale,RoundingMode.DOWN);  int remainder=(int)(numerator - (long)quotient * scale);  selectInPlace(quotient,dataset,0,dataset.length - 1);  if (remainder == 0) {    return dataset[quotient];  } else {    selectInPlace(quotient + 1,dataset,quotient + 1,dataset.length - 1);    return interpolate(dataset[quotient],dataset[quotient + 1],remainder,scale);  }}  }
class C{  protected static List<Trace> internalQuery(ElasticsearchClient client,String tenantId,Criteria criteria){  List<Trace> ret=new ArrayList<Trace>();  String index=client.getIndex(tenantId);  try {    RefreshRequestBuilder refreshRequestBuilder=client.getClient().admin().indices().prepareRefresh(index);    client.getClient().admin().indices().refresh(refreshRequestBuilder.request()).actionGet();    BoolQueryBuilder query=ElasticsearchUtil.buildQuery(criteria,ElasticsearchUtil.BUSINESS_TRANSACTION_FIELD,Trace.class);    SearchRequestBuilder request=client.getClient().prepareSearch(index).setTypes(TRACE_TYPE).setSearchType(SearchType.DFS_QUERY_THEN_FETCH).setTimeout(TimeValue.timeValueMillis(criteria.getTimeout())).setSize(criteria.getMaxResponseSize()).setQuery(query).addSort(ElasticsearchUtil.TIMESTAMP_FIELD,SortOrder.ASC);    FilterBuilder filter=ElasticsearchUtil.buildFilter(criteria);    if (filter != null) {      request.setPostFilter(filter);    }    SearchResponse response=request.execute().actionGet();    if (response.isTimedOut()) {      msgLog.warnQueryTimedOut();    }    for (    SearchHit searchHitFields : response.getHits()) {      try {        ret.add(mapper.readValue(searchHitFields.getSourceAsString(),Trace.class));      } catch (      Exception e) {        msgLog.errorFailedToParse(e);      }    }    if (msgLog.isTraceEnabled()) {      msgLog.tracef("Query traces with criteria[%s] is: %s",criteria,ret);    }  } catch (  org.elasticsearch.indices.IndexMissingException ime) {    if (msgLog.isTraceEnabled()) {      msgLog.tracef("No index found, so unable to retrieve traces");    }  }catch (  org.elasticsearch.action.search.SearchPhaseExecutionException spee) {    if (msgLog.isTraceEnabled()) {      msgLog.tracef("Failed to get fragments",spee);    }  }  return ret;}  }
class C{  public void updateBlockStates(){  for (  BlockState state : blockStateMap.values()) {    state.update(true);  }  blockStateMap.clear();}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.NAMESPACE___NAMESPACE_1:    return NAMESPACE_1_EDEFAULT == null ? namespace_1 != null : !NAMESPACE_1_EDEFAULT.equals(namespace_1);}return super.eIsSet(featureID);}  }
class C{  public void paintScrollBarBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public void rebuildStackMapForME(ClassPool pool) throws BadBytecode {  CodeAttribute ca=getCodeAttribute();  if (ca != null) {    StackMap sm=MapMaker.make2(pool,this);    ca.setAttribute(sm);  }}  }
class C{  public JSONArray put(double value){  Double d=new Double(value);  try {    JSONObject.testValidity(d);    put(d);  } catch (  JSONException e) {  }  return this;}  }
class C{  public boolean hasInspectItTaggingHeader(){  return null != getInspectItTaggingHeaderValue();}  }
class C{  public static String removeHiddenMarkers(final String contents){  if (contents == null) {    return null;  }  if (!contents.contains(MARKER)) {    return contents;  }  final StringTokenizer tokens=new StringTokenizer(contents,MARKER,true);  String temp_token;  StringBuilder processed_data=new StringBuilder();  while (tokens.hasMoreTokens()) {    temp_token=tokens.nextToken();    if (temp_token.equals(MARKER)) {      tokens.nextToken();      tokens.nextToken();      tokens.nextToken();      tokens.nextToken();      processed_data=processed_data.append(tokens.nextToken());    } else {      processed_data=processed_data.append(temp_token);    }  }  return processed_data.toString();}  }
class C{  private static String processPlusCodeWithinNanp(String networkDialStr){  String retStr=networkDialStr;  if (DBG)   log("processPlusCodeWithinNanp,networkDialStr=" + networkDialStr);  if (networkDialStr != null && networkDialStr.charAt(0) == PLUS_SIGN_CHAR && networkDialStr.length() > 1) {    String newStr=networkDialStr.substring(1);    if (isOneNanp(newStr)) {      retStr=newStr;    } else {      String idpStr=getDefaultIdp();      retStr=networkDialStr.replaceFirst("[+]",idpStr);    }  }  if (DBG)   log("processPlusCodeWithinNanp,retStr=" + retStr);  return retStr;}  }
class C{  public static boolean isComponentEnabled(Component child){  if (child.getParent() instanceof TabSheet) {    TabSheet tabSheet=(TabSheet)child.getParent();    TabSheet.Tab tab=tabSheet.getTab(child);    if (!tab.isEnabled()) {      return false;    }  }  return child.isEnabled() && (child.getParent() == null || isComponentEnabled(child.getParent())) && isComponentVisible(child);}  }
class C{  public Builder truncateBefore(Integer truncateBefore){  this.truncateBefore=truncateBefore;  return this;}  }
class C{  public static byte[] encodeBase64(final byte[] binaryData,final boolean isChunked){  return encodeBase64(binaryData,isChunked,false);}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  public BasicAuthentication(boolean isProxy,URL url,String realm,PasswordAuthentication pw){  super(isProxy ? PROXY_AUTHENTICATION : SERVER_AUTHENTICATION,AuthScheme.BASIC,url,realm);  String plain=pw.getUserName() + ":";  byte[] nameBytes=null;  try {    nameBytes=plain.getBytes("ISO-8859-1");  } catch (  java.io.UnsupportedEncodingException uee) {    assert false;  }  char[] passwd=pw.getPassword();  byte[] passwdBytes=new byte[passwd.length];  for (int i=0; i < passwd.length; i++)   passwdBytes[i]=(byte)passwd[i];  byte[] concat=new byte[nameBytes.length + passwdBytes.length];  System.arraycopy(nameBytes,0,concat,0,nameBytes.length);  System.arraycopy(passwdBytes,0,concat,nameBytes.length,passwdBytes.length);  this.auth="Basic " + Base64.getEncoder().encodeToString(concat);  this.pw=pw;}  }
class C{  public MinimalAnalyzer(CharArraySet stopwords){  super(Lucene.version,stopwords);}  }
class C{  public static synchronized void endRecordingMacro(){  if (!isRecordingMacro()) {    return;  }  recordingMacro=false;}  }
class C{  public final void yyreset(java.io.Reader reader) throws IOException {  zzBuffer=s.array;  zzStartRead=s.offset;  zzEndRead=zzStartRead + s.count - 1;  zzCurrentPos=zzMarkedPos=s.offset;  zzLexicalState=YYINITIAL;  zzReader=reader;  zzAtEOF=false;}  }
class C{  public static Scss cs_sqr(int order,Scs A,boolean qr){  int n, k, post[];  Scss S;  boolean ok=true;  if (!Scs_util.CS_CSC(A))   return (null);  n=A.n;  S=new Scss();  S.q=Scs_amd.cs_amd(order,A);  if (order > 0 && S.q == null)   return (null);  if (qr) {    Scs C=order > 0 ? Scs_permute.cs_permute(A,null,S.q,false) : A;    S.parent=Scs_etree.cs_etree(C,true);    post=Scs_post.cs_post(S.parent,n);    S.cp=Scs_counts.cs_counts(C,S.parent,post,true);    ok=C != null && S.parent != null && S.cp != null && cs_vcount(C,S);    if (ok)     for (S.unz=0, k=0; k < n; k++)     S.unz+=S.cp[k];    ok=ok && S.lnz >= 0 && S.unz >= 0;  } else {    S.unz=4 * (A.p[n]) + n;    S.lnz=S.unz;  }  return (ok ? S : null);}  }
class C{  @Ignore("https://www.pivotaltracker.com/story/show/120392043") @Test public void validateStreamExhaustion() throws Throwable {  this.host.log("Starting test: validateStreamExhaustion");  int maxStreamId=5;  NettyChannelContext.setMaxStreamId(5);  MinimalTestService service=new MinimalTestService();  MinimalTestServiceState initialState=new MinimalTestServiceState();  initialState.id="";  initialState.stringValue=UUID.randomUUID().toString();  this.host.startServiceAndWait(service,UUID.randomUUID().toString(),initialState);  int count=99;  this.host.connectionTag=ServiceClient.CONNECTION_TAG_HTTP2_DEFAULT;  this.host.getClient().setConnectionLimitPerTag(this.host.connectionTag,1);  URI serviceUri=service.getUri();  for (int i=0; i < count; i++) {    MinimalTestServiceState getResult=this.host.getServiceState(EnumSet.of(TestProperty.FORCE_REMOTE,TestProperty.HTTP2),MinimalTestServiceState.class,serviceUri);    assertTrue(getResult.stringValue.equals(initialState.stringValue));  }  NettyHttpServiceClient client=(NettyHttpServiceClient)this.host.getClient();  NettyChannelContext context=client.getInUseHttp2Context(this.host.connectionTag,ServiceHost.LOCAL_HOST,this.host.getPort());  assertTrue(context.getLargestStreamId() <= maxStreamId);  this.host.log("HTTP/2 connections correctly reopen when streams are exhausted");  this.host.waitFor("exhausted http2 channels not closed",null);  NettyChannelContext.setMaxStreamId(NettyChannelContext.DEFAULT_MAX_STREAM_ID);  this.host.log("Test passed: validateStreamExhaustion");  client.stop();  client.start();}  }
class C{  public ProcessBuilder command(List<String> command){  if (command == null) {    throw new NullPointerException("command == null");  }  this.command=command;  return this;}  }
class C{  public int indexOf(int ch,int fromIndex){  return 0;}  }
class C{  static ArrayList<Field> allFields(final Class<?> clazz){  final ArrayList<Field> res=new ArrayList<>();  Class<?> cl=clazz;  while (cl != null) {    final Field[] fields=cl.getDeclaredFields();    Collections.addAll(res,fields);    cl=cl.getSuperclass();  }  return res;}  }
class C{  public int read(char[] buf,int n){  int readBytes=0;  while (readBytes < n) {    if (bufPtr == 0) {      bufCnt=read4(buffer);    }    if (bufCnt == 0) {      break;    }    while (readBytes < n && bufPtr < bufCnt) {      buf[readBytes++]=buffer[bufPtr++];    }    if (bufPtr == bufCnt) {      bufPtr=0;    }  }  return readBytes;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:31.767 -0500",hash_original_method="A2A1500AC9CF1B321965DC9E32B8AC94",hash_generated_method="D0F41019489829B54E3B637A038A3594") protected AbstractHttpParams(){  super();}  }
class C{  public GFElement multiply(GFElement factor) throws RuntimeException {  GF2nONBElement result=new GF2nONBElement(this);  result.multiplyThisBy(factor);  return result;}  }
class C{  protected BrokerService createBroker(String uri) throws Exception {  BrokerService answer=new BrokerService();  configureBroker(answer,uri);  answer.start();  return answer;}  }
class C{  public CacheMode cacheMode(String cacheName){  DynamicCacheDescriptor desc=registeredCaches.get(maskNull(cacheName));  return desc != null ? desc.cacheConfiguration().getCacheMode() : null;}  }
class C{  public static int unsignedBitsRequired(long maxValue){  return roundBits(PackedInts.unsignedBitsRequired(maxValue));}  }
class C{  protected boolean engineVerify(byte[] sigBytes,int offset,int length) throws SignatureException {  return checkSignature(sigBytes,offset,length);}  }
class C{  public GmlUpperCorner(Double lat,Double lon){  super(Namespaces.GML_NAMESPACE,NAME,lat,lon);}  }
class C{  public void updateDocument(final JSONObject doc,final String type){  final HTTPRequest request=new HTTPRequest();  request.setRequestMethod(HTTPRequestMethod.POST);  try {    request.setURL(new URL(SERVER + "/" + INDEX_NAME+ "/"+ type+ "/"+ doc.optString(Keys.OBJECT_ID)+ "/_update"));    final JSONObject payload=new JSONObject();    payload.put("doc",doc);    payload.put("upsert",doc);    request.setPayload(payload.toString().getBytes("UTF-8"));    URL_FETCH_SVC.fetchAsync(request);  } catch (  final Exception e) {    LOGGER.log(Level.ERROR,"Updates doc failed",e);  }}  }
class C{  protected void assertMultiPaymentEntry(final String orderNum,final List<String> expectedAmount,final List<String> expectedOperation,final List<String> expectedResult,final List<Boolean> expectedSettled){  List<CustomerOrderPayment> rezList=new ArrayList<CustomerOrderPayment>(customerOrderPaymentService.findBy(orderNum,null,(String)null,(String)null));  assertEquals(expectedAmount.size(),rezList.size());  List<String> expected=new ArrayList<String>();  for (int i=0; i < expectedAmount.size(); i++) {    expected.add(expectedAmount.get(i) + "-" + expectedOperation.get(i)+ "-"+ expectedResult.get(i)+ "-"+ ((PaymentGateway.CAPTURE.equals(expectedOperation.get(i)) || PaymentGateway.AUTH_CAPTURE.equals(expectedOperation.get(i))) && expectedSettled.get(i)));  }  for (  final String expectedPayment : expected) {    boolean found=false;    final StringBuilder failMessage=new StringBuilder();    final Iterator<CustomerOrderPayment> rezListIt=rezList.iterator();    while (rezListIt.hasNext()) {      final CustomerOrderPayment customerOrderPayment=rezListIt.next();      final String test=customerOrderPayment.getPaymentAmount() + "-" + customerOrderPayment.getTransactionOperation()+ "-"+ customerOrderPayment.getPaymentProcessorResult()+ "-"+ customerOrderPayment.isPaymentProcessorBatchSettlement();      found=test.equals(expectedPayment);      if (found) {        rezListIt.remove();        break;      }      failMessage.append('\n').append(test);    }    if (!found) {      fail("Expected payment not found amount/operation/result/settle:\n" + expectedPayment + "\nExisting payments:"+ failMessage);    }  }  assertTrue("Not all items matched",rezList.isEmpty());}  }
class C{  public static boolean writeFile(File file,InputStream stream){  return writeFile(file,stream,false);}  }
class C{  public VCenterAPI(ServiceInstance service){  this.service=service;  this.url=service.getServerConnection().getUrl();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:50.403 -0400",hash_original_method="4E469C45AD70E4716E0D37D29FDC47F3",hash_generated_method="A005D34A97B1CA136B8FF5C7DD161832") public static short swapShort(short value){  return (short)((((value >> 0) & 0xff) << 8) + (((value >> 8) & 0xff) << 0));}  }
class C{  public static KnowledgeGroup serializableInstance(){  return new KnowledgeGroup(REQUIRED,new HashSet<String>(0),new HashSet<String>(0));}  }
class C{  public void update(final String collectionName,final Map<String,Object> query,final Map<String,Object> data,final Map<String,Object> options){  update(collectionName,query,data,options,null);}  }
class C{  public static boolean isOn(String option){  if (args == null)   return false; else {    if (args.indexOf("all") != -1)     return true; else     return (args.indexOf(option) != -1);  }}  }
class C{  public boolean equals(Object o){  if (!(o instanceof Edge))   return false;  Edge e=(Edge)o;  if (pts.length != e.pts.length)   return false;  boolean isEqualForward=true;  boolean isEqualReverse=true;  int iRev=pts.length;  for (int i=0; i < pts.length; i++) {    if (!pts[i].equals2D(e.pts[i])) {      isEqualForward=false;    }    if (!pts[i].equals2D(e.pts[--iRev])) {      isEqualReverse=false;    }    if (!isEqualForward && !isEqualReverse)     return false;  }  return true;}  }
class C{  public void connect() throws ReplicatorException {  try {    logger.info("Connecting to master MySQL server: url=" + url);    Class.forName("org.drizzle.jdbc.DrizzleDriver");    conn=DriverManager.getConnection(url,login,password);  } catch (  ClassNotFoundException e) {    throw new ExtractorException("Unable to load JDBC driver",e);  }catch (  SQLException e) {    throw new ExtractorException("Unable to connect",e);  }  try {    MySQLIOs io=MySQLIOs.getMySQLIOs(conn);    input=new WrappedInputStream(io.getInput(),deterministicIo);    output=io.getOutput();  } catch (  Exception e) {    throw new ExtractorException("Unable to access IO streams for connection",e);  }  this.relayDir=new File(binlogDir);  if (!relayDir.isDirectory())   throw new ExtractorException("Relay log directory not a directory or does not exist: " + relayDir.getAbsolutePath()); else   if (!relayDir.canWrite())   throw new ExtractorException("Relay log directory is not writable: " + relayDir.getAbsolutePath());  binlogIndex=new File(relayDir,binlogPrefix + ".index");  if (autoClean) {    if (binlogIndex.delete())     logger.info("Cleaned up binlog index file: " + binlogIndex.getAbsolutePath());    String baseLog;    if (this.binlog == null)     baseLog=""; else     baseLog=binlog;    for (    File child : relayDir.listFiles()) {      if (!child.isFile())       continue; else       if (!child.getName().startsWith(this.binlogPrefix))       continue; else       if (child.getName().compareTo(baseLog) < 0)       continue;      if (child.delete())       logger.info("Cleaned up binlog file: " + child.getAbsolutePath());    }  }  Statement statement=null;  try {    statement=conn.createStatement();    statement.executeUpdate("SET @master_binlog_checksum= @@global.binlog_checksum");    ResultSet rs=statement.executeQuery("SELECT @@binlog_checksum as checksum");    if (rs.next()) {      checksum=rs.getString("checksum");      logger.info("Master binlog is checksummed with : " + checksum);    }    rs.close();  } catch (  SQLException e1) {    if (logger.isDebugEnabled())     logger.debug("This server does not support checksums",e1); else     logger.info("This server does not support checksums");  } finally {    if (statement != null)     try {      statement.close();    } catch (    SQLException e) {    }  }  try {    statement=conn.createStatement();    statement.executeUpdate("SET @mariadb_slave_capability=" + MARIA_SLAVE_CAPABILITY_GTID);  } catch (  SQLException e1) {    logger.info("Failure while setting MariaDB 10 GTIDs support");  } finally {    if (statement != null)     try {      statement.close();    } catch (    SQLException e) {    }  }  logger.info("Binlog read timeout set to " + readTimeout + " seconds");  try {    logger.info("Requesting binlog data from master: " + binlog + ":"+ offset);    sendBinlogDumpPacket(output);  } catch (  IOException e) {    throw new ExtractorException("Error sending request to dump binlog",e);  }}  }
class C{  public Crossfader withContent(View content){  this.mContent=content;  return this;}  }
class C{  private CUnInliner(){}  }
class C{  private TreeModelEvent makeChangeEvent(Operator operator){  ExecutionUnit parent=operator.getExecutionUnit();  if (parent != null) {    TreePath path=getPathTo(operator).getParentPath();    int index=getChildren(operator.getExecutionUnit()).indexOf(operator);    return new TreeModelEvent(this,path,new int[]{index},new Object[]{operator});  } else {    return new TreeModelEvent(this,(TreePath)null,null,null);  }}  }
class C{  public final Position findInputPosition(Position outputPosition){  return findInputPosition(outputPosition.getLine(),outputPosition.getColumn());}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public ObjectName(String domain,Hashtable<String,String> table) throws MalformedObjectNameException {  construct(domain,table);}  }
class C{  public boolean load(File file){  ObjectInputStream ois;  ZipInputStream zis;  if (!file.exists()) {    return false;  }  try {    zis=new ZipInputStream(new BufferedInputStream(new FileInputStream(file)));    zis.getNextEntry();    ois=new ObjectInputStream(zis);    load(ois);    ois.close();    zis.closeEntry();    zis.close();  } catch (  Exception e) {    return false;  }  return true;}  }
class C{  public void testAddLocation_disorderedLocatiions(){  long startTime=1000;  tripStatisticsUpdater=new TripStatisticsUpdater(startTime);  TripStatistics tripStatistics=tripStatisticsUpdater.getTripStatistics();  addLocations(5,startTime,tripStatistics,0,0);  addLocations(5,startTime,tripStatistics,5,0);  addLocations(5,startTime,tripStatistics,10,-5);  addLocations(5,startTime,tripStatistics,15,5);}  }
class C{  private void requestEnd(){}  }
class C{  private void discoverHost(HostSystem hostSystem,Host targetHost,HostStateChange changes){  HostSystemConnectionState connectionState=getConnectionState(hostSystem);  if (connectionState == HostSystemConnectionState.connected) {    List<Initiator> oldInitiators=new ArrayList<Initiator>();    List<Initiator> addedInitiators=new ArrayList<Initiator>();    discoverConnectedHostInitiators(hostSystem,targetHost,oldInitiators,addedInitiators);    if (!oldInitiators.isEmpty() || !addedInitiators.isEmpty()) {      Collection<URI> oldInitiatorIds=Lists.newArrayList(Collections2.transform(oldInitiators,CommonTransformerFunctions.fctnDataObjectToID()));      changes.setOldInitiators(oldInitiatorIds);      Collection<URI> addedInitiatorIds=Lists.newArrayList(Collections2.transform(addedInitiators,CommonTransformerFunctions.fctnDataObjectToID()));      changes.setNewInitiators(addedInitiatorIds);    }  } else {    if (connectionState == HostSystemConnectionState.disconnected) {      throw new IllegalStateException("Host is disconnected");    } else     if (connectionState == HostSystemConnectionState.notResponding) {      throw new IllegalStateException("Host is not responding");    } else {      throw new IllegalStateException("Could not determine host connection state");    }  }}  }
class C{  private int addStaticItem(ListView listView,int textResId){  TextView textView=(TextView)getLayoutInflater().inflate(com.android.internal.R.layout.select_dialog_singlechoice_holo,listView,false);  textView.setText(textResId);  listView.addHeaderView(textView);  return listView.getHeaderViewsCount() - 1;}  }
class C{  SymbolToken find(String text){  for (int i=0; i < myImports.length; i++) {    SymbolTable importedTable=myImports[i];    SymbolToken tok=importedTable.find(text);    if (tok != null) {      int sid=tok.getSid() + myBaseSids[i];      text=tok.getText();      assert text != null;      return new SymbolTokenImpl(text,sid);    }  }  return null;}  }
class C{  public HttpUriRequest createRequest(String action,JSONObject params) throws UnsupportedEncodingException, ConduitAPIException {  HttpPost post;  try {    post=new HttpPost(new URL(new URL(new URL(conduitURL),"/api/"),action).toURI());  } catch (  MalformedURLException e) {    throw new ConduitAPIException(e.getMessage());  }catch (  URISyntaxException e) {    throw new ConduitAPIException(e.getMessage());  }  JSONObject conduitParams=new JSONObject();  conduitParams.put(API_TOKEN_KEY,conduitToken);  params.put(CONDUIT_METADATA_KEY,conduitParams);  List<NameValuePair> formData=new ArrayList<NameValuePair>();  formData.add(new BasicNameValuePair("params",params.toString()));  UrlEncodedFormEntity entity=new UrlEncodedFormEntity(formData,"UTF-8");  post.setEntity(entity);  return post;}  }
class C{  public void hit(int timestamp){  queue.add(timestamp);}  }
class C{  public ClientResponse delete(URI uri){  return client.resource(uri).header(CinderConstants.AUTH_TOKEN_HEADER,authTokenHeader).delete(ClientResponse.class);}  }
class C{  public static Workflow.Method createBlockSnapshotSessionMethod(URI systemURI,URI snapSessionURI,String groupName){  return new Workflow.Method(CREATE_SNAPSHOT_SESSION_METHOD,systemURI,snapSessionURI,groupName);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public boolean contains(int x){  int n=members.length;  for (int i=0; i < n; ++i) {    if (x < members[i][0]) {      return false;    } else     if (x <= members[i][1]) {      return true;    }  }  return false;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.ANNOTABLE_SCRIPT_ELEMENT__ANNOTATION_LIST:    setAnnotationList((AnnotationList)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public void keyReleased(KeyEvent event){}  }
class C{  public void selected(){  isSelected_=true;}  }
class C{  public long numDeletes(){  return this.cqQuery.getVsdStats().getNumDeletes();}  }
class C{  public void runTest() throws Throwable {  Document doc1;  Document doc2;  NodeList elementList;  Node testAddress;  NamedNodeMap attributes;  Node newAttribute;  String strong;  Node setNode;  doc1=(Document)load("hc_staff",true);  doc2=(Document)load("hc_staff",true);  elementList=doc1.getElementsByTagName("acronym");  testAddress=elementList.item(2);  newAttribute=doc2.createAttribute("newAttribute");  attributes=testAddress.getAttributes();{    boolean success=false;    try {      setNode=attributes.setNamedItem(newAttribute);    } catch (    DOMException ex) {      success=(ex.code == DOMException.WRONG_DOCUMENT_ERR);    }    assertTrue("throw_WRONG_DOCUMENT_ERR",success);  }}  }
class C{  public ODataUserSynchronizer(SynchronizerConf sc) throws IOException, ODataException {  super(sc);  String urilit=sc.getConfig("service_uri");  serviceUser=sc.getConfig("service_username");  servicePass=sc.getConfig("service_password");  if (urilit == null || urilit.isEmpty()) {    throw new IllegalStateException("`service_uri` is not set");  }  try {    client=new ODataClient(urilit,serviceUser,servicePass);  } catch (  URISyntaxException e) {    throw new IllegalStateException("`service_uri` is malformed");  }  String skip=sc.getConfig("skip");  if (skip != null && !skip.isEmpty()) {    this.skip=Integer.parseInt(skip);  } else {    this.skip=0;  }  String page_size=sc.getConfig("page_size");  if (page_size != null && !page_size.isEmpty()) {    pageSize=Integer.decode(page_size);  } else {    pageSize=500;  }  String cfgForce=sc.getConfig("force");  if (cfgForce != null && !cfgForce.isEmpty()) {    force=Boolean.parseBoolean(cfgForce);  } else {    force=false;  }}  }
class C{  public static String shortnameToUnicode(String input,boolean removeIfUnsupported){  Matcher matcher=SHORTNAME_PATTERN.matcher(input);  boolean supported=Build.VERSION.SDK_INT >= 16;  while (matcher.find()) {    String unicode=_shortNameToUnicode.get(matcher.group(1));    if (unicode == null) {      continue;    }    if (supported) {      input=input.replace(":" + matcher.group(1) + ":",unicode);    } else     if (!supported && removeIfUnsupported) {      input=input.replace(":" + matcher.group(1) + ":","");    }  }  return input;}  }
class C{  public static void rendezvous(String condition,int N){  BValue cond;  IValue iv;  String name="RV_" + condition;synchronized (conditions) {    cond=(BValue)conditions.get(name);    if (cond == null) {      if (N < 2) {        throw new RuntimeException("rendezvous must be called with N >= 2");      }      cond=new BValue();      conditions.put(name,cond);      iv=new IValue(N - 1);      rv.put(name,iv);    } else {      iv=(IValue)rv.get(name);      iv.v--;    }  }  if (iv.v > 0) {    waitForCondition(name);  } else {    setCondition(name);synchronized (conditions) {      clearCondition(name);      rv.remove(name);    }  }}  }
class C{  private void calcCoordinates(){  if (CTM[1][0] == 0 && CTM[0][1] == 0) {    i_x=(int)CTM[2][0];    i_y=(int)CTM[2][1];    i_w=(int)CTM[0][0];    i_h=(int)CTM[1][1];    if (i_w < 0) {      i_w=-i_w;    }    if (i_h < 0) {      i_h=-i_h;    }  } else {    i_w=(int)(Math.sqrt((CTM[0][0] * CTM[0][0]) + (CTM[0][1] * CTM[0][1])));    i_h=(int)(Math.sqrt((CTM[1][1] * CTM[1][1]) + (CTM[1][0] * CTM[1][0])));    if (CTM[1][0] > 0 && CTM[0][1] < 0) {      i_x=(int)(CTM[2][0]);      i_y=(int)(CTM[2][1] + CTM[0][1]);    } else     if (CTM[1][0] < 0 && CTM[0][1] > 0) {      i_x=(int)(CTM[2][0] + CTM[1][0]);      i_y=(int)(CTM[2][1]);    } else     if (CTM[1][0] > 0 && CTM[0][1] > 0) {      i_x=(int)(CTM[2][0]);      i_y=(int)(CTM[2][1]);    } else {      i_x=(int)(CTM[2][0]);      i_y=(int)(CTM[2][1]);    }  }  if (CTM[1][1] < 0) {    i_y-=i_h;  }  if (CTM[0][0] < 0) {    i_x-=i_w;  }}  }
class C{  public Iterator sortedKeys(){  return new TreeSet(this.keySet()).iterator();}  }
class C{  public LogRecord(Level level,String message){  this.level=level;  this.message=message;  this.sequenceNumber=nextSequenceNumber++;  this.millis=System.currentTimeMillis();}  }
class C{  @Override public String toString(){  try {    StringBuffer text=new StringBuffer();    if (m_isLeaf) {      text.append(": ");      text.append(m_localModel.dumpLabel(0,m_train));    } else {      dumpTree(0,text);    }    text.append("\n\nNumber of Leaves  : \t" + numLeaves() + "\n");    text.append("\nSize of the tree : \t" + numNodes() + "\n");    return text.toString();  } catch (  Exception e) {    return "Can't print classification tree.";  }}  }
class C{  public int iterativeSize(){  IntList p=this;  int size=0;  while (p != null) {    size+=1;    p=p.tail;  }  return size;}  }
class C{  public void close(){  section.restore();}  }
class C{  public HashChain(final Deserializer deserializer){  super(deserializer.readObjectArray("data",Hash.DESERIALIZER));}  }
class C{  public boolean isRelevant(InputNode value){  return contains(value) || isEmpty();}  }
class C{  private void restore(){  Frame frame=getFrame();  if (frame == null) {    return;  }  if ((state & Frame.ICONIFIED) != 0) {    frame.setExtendedState(state & ~Frame.ICONIFIED);  } else {    frame.setExtendedState(state & ~Frame.MAXIMIZED_BOTH);  }}  }
class C{  static Class<?> loadClass(String className,Class<?> callingClass) throws ClassNotFoundException {  try {    ClassLoader cl=Thread.currentThread().getContextClassLoader();    if (cl != null) {      return cl.loadClass(className);    }  } catch (  ClassNotFoundException e) {    if (log.isLoggable(java.util.logging.Level.FINE)) {      log.log(java.util.logging.Level.FINE,e.getMessage(),e);    }  }  return loadClass2(className,callingClass);}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  int context=getArg0AsNode(xctxt);  XObject val;  if (DTM.NULL != context) {    DTM dtm=xctxt.getDTM(context);    String qname=dtm.getNodeNameX(context);    val=(null == qname) ? XString.EMPTYSTRING : new XString(qname);  } else {    val=XString.EMPTYSTRING;  }  return val;}  }
class C{  private Object readResolve(){  Chronology base=getBase();  int minDays=getMinimumDaysInFirstWeek();  minDays=(minDays == 0 ? 4 : minDays);  return base == null ? getInstance(DateTimeZone.UTC,minDays) : getInstance(base.getZone(),minDays);}  }
class C{  FocusRingRenderer(Invalidator invalidator,Paint ringPaint,float enterDurationMillis,float exitDurationMillis){  mInvalidator=invalidator;  mRingPaint=ringPaint;  mEnterDurationMillis=enterDurationMillis;  mExitDurationMillis=exitDurationMillis;  mEnterOpacityCurve=UnitCurves.FAST_OUT_SLOW_IN;  mExitOpacityCurve=UnitCurves.FAST_OUT_LINEAR_IN;  mHardExitOpacityCurve=UnitCurves.FAST_OUT_LINEAR_IN;  mRingRadius=new DampedSpring();}  }
class C{  public String optString(int index,String defaultValue){  Object object=this.opt(index);  return JSONObject.NULL.equals(object) ? defaultValue : object.toString();}  }
class C{  public void rewind(){  currentPos=0;}  }
class C{  @RpcMethod public CreateDisksResponse createDisks(String reservation) throws InterruptedException, RpcException {  SyncHandler<CreateDisksResponse,Host.AsyncClient.create_disks_call> syncHandler=new SyncHandler<>();  createDisks(reservation,syncHandler);  syncHandler.await();  logger.info("finished create_disks reservation {}, target {}",reservation,getHostIp());  return ResponseValidator.checkCreateDisksResponse(syncHandler.getResponse());}  }
class C{  public void notifyObservers(){  for (  NotificationObserver observer : observers) {    observer.onValueChanged();  }}  }
class C{  public IntIterator inEdgeRows(int node){  return edgeRows(node,INEDGES);}  }
