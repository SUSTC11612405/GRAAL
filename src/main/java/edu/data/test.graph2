class C{  private static URL[] pathToURLs(String path) throws MalformedURLException {  if (path == null) {    return null;  }synchronized (pathToURLsCache) {    Object[] v=(Object[])pathToURLsCache.get(path);    if (v != null) {      return ((URL[])v[0]);    }  }  StringTokenizer st=new StringTokenizer(path);  URL[] urls=new URL[st.countTokens()];  for (int i=0; st.hasMoreTokens(); i++) {    urls[i]=new URL(st.nextToken());  }synchronized (pathToURLsCache) {    pathToURLsCache.put(path,new Object[]{urls,new SoftReference(path)});  }  return urls;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Resurrect_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200862,skillcaster,skillname);}  }
class C{  @Override public int hashCode(){  final int prime=31;  int result=1;  result=prime * result + ((getId() == null) ? 0 : getId().hashCode());  result=prime * result + ((getCascadeId() == null) ? 0 : getCascadeId().hashCode());  result=prime * result + ((getRootKey() == null) ? 0 : getRootKey().hashCode());  result=prime * result + ((getRootName() == null) ? 0 : getRootName().hashCode());  result=prime * result + ((getName() == null) ? 0 : getName().hashCode());  result=prime * result + ((getHotkey() == null) ? 0 : getHotkey().hashCode());  result=prime * result + ((getParentId() == null) ? 0 : getParentId().hashCode());  result=prime * result + ((getIsLeaf() == null) ? 0 : getIsLeaf().hashCode());  result=prime * result + ((getIsAutoExpand() == null) ? 0 : getIsAutoExpand().hashCode());  result=prime * result + ((getIconName() == null) ? 0 : getIconName().hashCode());  result=prime * result + ((getSortNo() == null) ? 0 : getSortNo().hashCode());  result=prime * result + ((getEnable() == null) ? 0 : getEnable().hashCode());  result=prime * result + ((getRemark() == null) ? 0 : getRemark().hashCode());  result=prime * result + ((getCreateBy() == null) ? 0 : getCreateBy().hashCode());  result=prime * result + ((getCreateTime() == null) ? 0 : getCreateTime().hashCode());  result=prime * result + ((getUpdateBy() == null) ? 0 : getUpdateBy().hashCode());  result=prime * result + ((getUpdateTime() == null) ? 0 : getUpdateTime().hashCode());  return result;}  }
class C{  public Utf8_Enumeration(){}  }
class C{  public static void apply(Document srcDoc,String srcClassification,Collection<Integer> srcClassIds,String tarRMA6FileName,ProgressListener progress,Single<Long> totalReads) throws IOException, CanceledException {  final long startTime=System.currentTimeMillis();  final IConnector connector=srcDoc.getConnector();  final String[] classifications=connector.getAllClassificationNames().clone();  final RMA6FileCreator rma6FileCreator=new RMA6FileCreator(tarRMA6FileName,true);  rma6FileCreator.writeHeader(ProgramProperties.getProgramVersion(),srcDoc.getBlastMode(),classifications,false);  rma6FileCreator.startAddingQueries();  try {    try (IReadBlockIterator iterator=connector.getReadsIteratorForListOfClassIds(srcClassification,srcClassIds,0,10,true,true)){      progress.setTasks("Extracting","Processing file: " + Basic.getFileNameWithoutPath(srcDoc.getMeganFile().getFileName()));      progress.setProgress(0);      progress.setMaximum(iterator.getMaximumProgress());      while (iterator.hasNext()) {        final IReadBlock readBlock=iterator.next();        final StringBuilder blastTextBuf=new StringBuilder();        blastTextBuf.append(FileInputIterator.PREFIX_TO_INDICATE_TO_PARSE_FILENAME_STRING);        blastTextBuf.append("Query= ").append(readBlock.getReadHeader()).append("\n");        int[][] match2classification2id=new int[readBlock.getNumberOfAvailableMatchBlocks()][classifications.length];        for (int i=0; i < readBlock.getNumberOfAvailableMatchBlocks(); i++) {          final IMatchBlock matchBlock=readBlock.getMatchBlock(i);          blastTextBuf.append(matchBlock.getText());          for (int k=0; k < classifications.length; k++) {            match2classification2id[i][k]=matchBlock.getId(classifications[k]);          }        }        totalReads.set(totalReads.get() + 1);        final byte[] readBytes=(">" + readBlock.getReadHeader() + "\n"+ readBlock.getReadSequence()).getBytes();        final byte[] matchBytes=computeSAM(srcDoc.getBlastMode(),1000,blastTextBuf.toString());        rma6FileCreator.addQuery(readBytes,readBytes.length,readBlock.getNumberOfAvailableMatchBlocks(),matchBytes,matchBytes.length,match2classification2id,0L);        progress.setProgress(iterator.getProgress());      }    }   }  finally {    rma6FileCreator.endAddingQueries();    rma6FileCreator.writeClassifications(new String[0],null,null);    rma6FileCreator.writeAuxBlocks(null);    rma6FileCreator.close();    final Document doc=new Document();    doc.setProgressListener(progress);    doc.getMeganFile().setFile(tarRMA6FileName,MeganFile.Type.RMA6_FILE);    doc.getActiveViewers().addAll(Arrays.asList(classifications));  }  System.err.println("Extraction required " + ((System.currentTimeMillis() - startTime) / 1000) + " seconds");}  }
class C{  @CalledByNative public static boolean isAccessibilityEnabled(Context context){  AccessibilityManager manager=(AccessibilityManager)context.getSystemService(Context.ACCESSIBILITY_SERVICE);  return manager != null && manager.isEnabled() && manager.isTouchExplorationEnabled();}  }
class C{  @Override protected Expression generateExpression(){  if (windBarbsPanel == null) {    return null;  }  Expression expression=windBarbsPanel.getExpression();  return expression;}  }
class C{  public Node addRoot(){  throw new UnsupportedOperationException("Changes to tree structure not allowed for spanning trees.");}  }
class C{  public static boolean checkAndCreateFolder(String path){  boolean created=false;  try {    FileFactory.FileType fileType=FileFactory.getFileType(path);    if (FileFactory.isFileExist(path,fileType)) {      created=true;    } else {      created=FileFactory.mkdirs(path,fileType);    }  } catch (  IOException e) {    LOGGER.error(e.getMessage());  }  return created;}  }
class C{  void addFillComponents(Container panel,int[] cols,int[] rows){  Dimension filler=new Dimension(10,10);  boolean filled_cell_11=false;  CellConstraints cc=new CellConstraints();  if (cols.length > 0 && rows.length > 0) {    if (cols[0] == 1 && rows[0] == 1) {      panel.add(Box.createRigidArea(filler),cc.xy(1,1));      filled_cell_11=true;    }  }  for (int index=0; index < cols.length; index++) {    if (cols[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(cols[index],1));  }  for (int index=0; index < rows.length; index++) {    if (rows[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(1,rows[index]));  }}  }
class C{  public INSECTFileDB(String sPrefix,String sBaseDir){  if (sPrefix == null)   Prefix=""; else   Prefix=sPrefix;  if (sBaseDir == null)   BaseDir="./"; else   BaseDir=sBaseDir;}  }
class C{  public LoadImplementor(LoadModel model,LoadView view){  this.model=model;  this.view=view;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Summon_A_TO_B(String skillcaster,String value0,String skillname){  return new SM_SYSTEM_MESSAGE(1201033,skillcaster,value0,skillname);}  }
class C{  @Override public void doctypeDecl(String rootElement,String publicId,String systemId,Augmentations augs) throws XNIException {  fSeenDoctypeDecl=true;  fRootElement.setValues(null,rootElement,rootElement,null);  String eid=null;  try {    eid=XMLEntityManager.expandSystemId(systemId,fDocLocation.getExpandedSystemId(),false);  } catch (  java.io.IOException e) {  }  XMLDTDDescription grammarDesc=new XMLDTDDescription(publicId,systemId,fDocLocation.getExpandedSystemId(),eid,rootElement);  fDTDGrammar=fGrammarBucket.getGrammar(grammarDesc);  if (fDTDGrammar == null) {    if (fGrammarPool != null && (systemId != null || publicId != null)) {      fDTDGrammar=(DTDGrammar)fGrammarPool.retrieveGrammar(grammarDesc);    }  }  if (fDTDGrammar == null) {    if (!fBalanceSyntaxTrees) {      fDTDGrammar=new DTDGrammar(fSymbolTable,grammarDesc);    } else {      fDTDGrammar=new BalancedDTDGrammar(fSymbolTable,grammarDesc);    }  } else {    fValidationManager.setCachedDTD(true);  }  fGrammarBucket.setActiveGrammar(fDTDGrammar);  if (fDocumentHandler != null) {    fDocumentHandler.doctypeDecl(rootElement,publicId,systemId,augs);  }}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public WallCreateCommentQuery createComment(UserActor actor,int postId){  return new WallCreateCommentQuery(getClient(),actor,postId);}  }
class C{  @Override public synchronized void put(String key,Entry entry){  pruneIfNeeded(entry.data.length);  File file=getFileForKey(key);  try {    BufferedOutputStream fos=new BufferedOutputStream(new FileOutputStream(file));    CacheHeader e=new CacheHeader(key,entry);    boolean success=e.writeHeader(fos);    if (!success) {      fos.close();      VolleyLog.d("Failed to write header for %s",file.getAbsolutePath());      throw new IOException();    }    fos.write(entry.data);    fos.close();    putEntry(key,e);    return;  } catch (  IOException e) {  }  boolean deleted=file.delete();  if (!deleted) {    VolleyLog.d("Could not clean up file %s",file.getAbsolutePath());  }}  }
class C{  public static boolean isDailyReminderSet(Context context){  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);  return prefs.getBoolean(context.getString(R.string.key_daily_reminder),true);}  }
class C{  public void init$Children(){  children=new ASTNode[2];}  }
class C{  public void execute() throws BuildException {  if (values.isEmpty()) {    throw new BuildException("You must set at least one value!",getLocation());  }  if (target == null) {    throw new BuildException("Target must be set!",getLocation());  }  for (  String val : values) {    log("Process '" + val + "' location with '"+ target+ "' target ...",Project.MSG_VERBOSE);    CallTarget antCall=(CallTarget)getProject().createTask("antcall");    antCall.init();    antCall.setLocation(getLocation());    antCall.setTarget(target);    Property prop=antCall.createParam();    prop.setName(name);    prop.setValue(val);    antCall.execute();  }}  }
class C{  public int pointsToSetHashCode(){  final int PRIME=31;  int result=1;  for (  AllocAndContext elem : this) {    result=PRIME * result + elem.hashCode();  }  return result;}  }
class C{  public void read(Reader reader,Collection<String> knownSamples,boolean clear) throws IOException {  int countNotFound=0;  if (clear)   clear();  try (BufferedReader r=new BufferedReader(reader)){    String aLine=r.readLine();    while (aLine != null && aLine.trim().length() == 0) {      aLine=r.readLine();    }    if (aLine != null) {      String[] tokens=Basic.splitWithQuotes(aLine,'\t');      if (tokens.length < 1 || !tokens[0].startsWith(SAMPLE_ID)) {        throw new IOException(SAMPLE_ID + " tag not found, no sample-attributes data...");      }      final int tokensPerLine=tokens.length;      final Set<String> newAttributes=new HashSet<>();      final List<String> attributesOrder=new LinkedList<>();      for (int i=1; i < tokensPerLine; i++) {        String attribute=tokens[i];        if (!isSecretAttribute(attribute) && !isHiddenAttribute(attribute) && (newAttributes.contains(attribute) || getAttributeOrder().contains(attribute))) {          int count=1;          while (newAttributes.contains(attribute + "." + count) || getAttributeOrder().contains(attribute + "." + count)) {            count++;          }          System.err.println("Attribute " + attribute + " already exists, renaming to: "+ attribute+ "."+ count);          attribute+="." + count;        }        newAttributes.add(attribute);        attributesOrder.add(attribute);      }      final String[] pos2attribute=attributesOrder.toArray(new String[attributesOrder.size()]);      for (int i=0; i < pos2attribute.length; i++) {        if (isHiddenAttribute(pos2attribute[i]))         pos2attribute[i]=null; else         getAttributeOrder().add(pos2attribute[i]);      }      final Set<String> mentionedSamples=new HashSet<>();      while ((aLine=r.readLine()) != null) {        aLine=aLine.trim();        if (aLine.startsWith("#")) {          if (description == null)           description=aLine; else           if (!description.equals("#EOF") && !description.equals("# EOF"))           description+=" " + aLine;        } else {          tokens=Basic.splitWithQuotes(aLine,'\t');          if (tokens.length > 0) {            if (tokens.length != tokensPerLine)             throw new IOException("Expected " + tokensPerLine + " tokens, got "+ tokens.length+ " in line: "+ aLine);            final String sample=tokens[0].trim();            if (sample.length() == 0)             continue;            if (mentionedSamples.contains(sample)) {              System.err.println("Sample occurs more than once: " + sample + ", ignoring repeated occurrences");              continue;            }            mentionedSamples.add(sample);            if (knownSamples == null || knownSamples.contains(sample)) {              Map<String,Object> attribute2value=new HashMap<>();              for (int i=1; i < tokensPerLine; i++) {{                  String attribute=pos2attribute[i - 1];                  if (attribute != null)                   attribute2value.put(attribute,tokens[i].equals("NA") ? null : tokens[i]);                }              }              addSample(sample,attribute2value,true,true);            } else {              System.err.println("Sample mentioned in metadata is not present in document, skipping: " + sample);              countNotFound++;            }          }        }      }      setAllAttributeTypesFromValues();    }  }  finally {    if (countNotFound > 0)     NotificationsInSwing.showWarning(MainViewer.getLastActiveFrame(),"Loaded metadata, ignored " + countNotFound + " unknown input samples."); else {      if (knownSamples != null) {        for (        String sample : knownSamples)         putSampleLabel(sample,sample);      }    }  }}  }
class C{  @Deprecated public static boolean hasParentType(Delegator delegator,String entityName,String primaryKey,String childType,String parentTypeField,String parentType){  return EntityTypeUtil.hasParentType(delegator,entityName,primaryKey,childType,parentTypeField,parentType);}  }
class C{  GSMessageImpl duplicate() throws JMSException {  GSSimpleMessageImpl dup=new GSSimpleMessageImpl();  copyTo(dup);  return dup;}  }
class C{  public void run(IRunnableWithProgress runnable,IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {  runnable.run(monitor);}  }
class C{  public SelectedSymbolMask(SymbolMaskEnum level){  if (maskOrderlist.isEmpty()) {    maskOrderlist.add(SymbolMaskEnum.E_STYLED_LAYER);    maskOrderlist.add(SymbolMaskEnum.E_STYLE);    maskOrderlist.add(SymbolMaskEnum.E_FEATURE_TYPE_STYLE);    maskOrderlist.add(SymbolMaskEnum.E_RULE);    maskOrderlist.add(SymbolMaskEnum.E_SYMBOLIZER);  }  for (  SymbolMaskEnum key : maskOrderlist) {    maskList.add(key);    if (key == level) {      break;    }  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_GLORY_POINT_LOSE_PERSONAL(int num0){  return new SM_SYSTEM_MESSAGE(1402209,num0);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Spin_END_A_TO_B(String skilltarget){  return new SM_SYSTEM_MESSAGE(1200909,skilltarget);}  }
class C{  @Override public void postEvent(EventLogEvent event){  AuditLogEntryEnvelope auditLogEntryEnvelope=new AuditLogEntryEnvelope(createFromEvent(event),repository);  LOGGER.debug("posting auditLogEntryEnvelope: {}",auditLogEntryEnvelope);  threadPoolExecutor.submit(auditLogEntryEnvelope);  LOGGER.debug("posted auditLogEntryEnvelope: {}",auditLogEntryEnvelope);}  }
class C{  public String toString(){  return getClass().getName() + "[" + lease+ "]";}  }
class C{  public static void dropAllTables(SQLiteDatabase db,boolean ifExists){  VideoBeanDao.dropTable(db,ifExists);}  }
class C{  public DocsGetQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  private int indexOf(int tabId){  return mTabIdList.indexOf(tabId);}  }
class C{  protected boolean receiveAndExecute(SpaceDataEventListener eventListener) throws Throwable, TransactionException {  Object template=getReceiveTemplate();  if (triggerOperationHandler != null) {    Object trigger;    try {      trigger=triggerOperationHandler.triggerReceive(template,getGigaSpace(),receiveTimeout);    } catch (    SpaceInterruptedException e) {      return false;    }    if (logger.isTraceEnabled()) {      logger.trace(message("Trigger operation handler returned [" + trigger + "]"));    }    if (trigger == null) {      return false;    }    if (triggerOperationHandler.isUseTriggerAsTemplate()) {      template=trigger;    }  }  if (this.getTransactionManager() != null) {    TransactionStatus status=this.getTransactionManager().getTransaction(this.getTransactionDefinition());    boolean messageReceived;    try {      messageReceived=doReceiveAndExecute(eventListener,template,status);    } catch (    RuntimeException ex) {      rollbackOnException(status,ex);      throw ex;    }catch (    Error err) {      rollbackOnException(status,err);      throw err;    }    if (!status.isCompleted()) {      if (!messageReceived || status.isRollbackOnly()) {        this.getTransactionManager().rollback(status);      } else {        this.getTransactionManager().commit(status);      }    }    return messageReceived;  }  return doReceiveAndExecute(eventListener,template,null);}  }
class C{  @Override public List<WebElement> findElementsByLinkText(String linkText){  return ((FindsByLinkText)super.getWrappedDriver()).findElementsByLinkText(linkText);}  }
class C{  @NotNull public static String ensureNamespaceImported(@NotNull XmlFile file,@NotNull String namespaceUri,@Nullable String suggestedPrefix){  final XmlTag rootTag=file.getRootTag();  assert rootTag != null;  final XmlElementFactory elementFactory=XmlElementFactory.getInstance(file.getProject());  String prefix=rootTag.getPrefixByNamespace(namespaceUri);  if (prefix != null) {    return prefix;  }  ApplicationManager.getApplication().assertWriteAccessAllowed();  if (suggestedPrefix != null) {    prefix=suggestedPrefix;  } else   if (TOOLS_URI.equals(namespaceUri)) {    prefix=TOOLS_PREFIX;  } else   if (ANDROID_URI.equals(namespaceUri)) {    prefix=ANDROID_NS_NAME;  } else {    prefix=APP_PREFIX;  }  if (rootTag.getAttribute(XMLNS_PREFIX + prefix) != null) {    String base=prefix;    for (int i=2; ; i++) {      prefix=base + Integer.toString(i);      if (rootTag.getAttribute(XMLNS_PREFIX + prefix) == null) {        break;      }    }  }  String name=XMLNS_PREFIX + prefix;  final XmlAttribute xmlnsAttr=elementFactory.createXmlAttribute(name,namespaceUri);  final XmlAttribute[] attributes=rootTag.getAttributes();  XmlAttribute next=attributes.length > 0 ? attributes[0] : null;  for (  XmlAttribute attribute : attributes) {    String attributeName=attribute.getName();    if (!attributeName.startsWith(XMLNS_PREFIX) || attributeName.compareTo(name) > 0) {      next=attribute;      break;    }  }  if (next != null) {    rootTag.addBefore(xmlnsAttr,next);  } else {    rootTag.add(xmlnsAttr);  }  return prefix;}  }
class C{  public NotIsolatedAnalysis(DirectedGraph<Unit> dg,LatestComputation latest,Map<Unit,EquivalentValue> equivRhsMap){  this(dg,latest,equivRhsMap,new ArrayPackedSet<EquivalentValue>(new CollectionFlowUniverse<EquivalentValue>(equivRhsMap.values())));}  }
class C{  public void changeCurrentItem(int indexToChange){  if (indexToChange < 0 || indexToChange > spaceItems.size())   throw new ArrayIndexOutOfBoundsException("Please be more careful, we do't have such item : " + indexToChange); else {    updateSpaceItems(indexToChange);  }}  }
class C{  @Deployment(resources={"process/errorHandling.bpmn20.xml"}) public void testCamelRouteWorksAsIntended() throws Exception {  Map<String,Object> variables=new HashMap<String,Object>();  variables.put("routing",Routing.DEFAULT);  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("ErrorHandling",variables);  Job job=managementService.createJobQuery().processInstanceId(processInstance.getId()).singleResult();  assertNotNull(job);  managementService.executeJob(job.getId());  Thread.sleep(WAIT);  assertEquals("Process instance not completed",0,runtimeService.createProcessInstanceQuery().processInstanceId(processInstance.getId()).count());}  }
class C{  @Override public boolean equals(Object object){  if (object == this) {    return true;  }  if (object instanceof MultivariateSummaryStatistics == false) {    return false;  }  MultivariateSummaryStatistics other=(MultivariateSummaryStatistics)object;  return other.getN() == getN() && MathArrays.equalsIncludingNaN(other.getGeometricMean(),getGeometricMean()) && MathArrays.equalsIncludingNaN(other.getMax(),getMax()) && MathArrays.equalsIncludingNaN(other.getMean(),getMean()) && MathArrays.equalsIncludingNaN(other.getMin(),getMin()) && MathArrays.equalsIncludingNaN(other.getSum(),getSum()) && MathArrays.equalsIncludingNaN(other.getSumSq(),getSumSq()) && MathArrays.equalsIncludingNaN(other.getSumLog(),getSumLog()) && other.getCovariance().equals(getCovariance());}  }
class C{  private void processResultFromGallery(int destType,Intent intent){  Uri uri=intent.getData();  if (uri == null) {    if (croppedUri != null) {      uri=croppedUri;    } else {      this.failPicture("null data from photo library");      return;    }  }  int rotate=0;  String fileLocation=FileHelper.getRealPath(uri,this.cordova);  Log.d(LOG_TAG,"File locaton is: " + fileLocation);  if (this.mediaType != PICTURE) {    this.callbackContext.success(fileLocation);  } else {    if (this.targetHeight == -1 && this.targetWidth == -1 && (destType == FILE_URI || destType == NATIVE_URI) && !this.correctOrientation) {      this.callbackContext.success(uri.toString());    } else {      String uriString=uri.toString();      String mimeType=FileHelper.getMimeType(uriString,this.cordova);      if (!("image/jpeg".equalsIgnoreCase(mimeType) || "image/png".equalsIgnoreCase(mimeType))) {        Log.d(LOG_TAG,"I either have a null image path or bitmap");        this.failPicture("Unable to retrieve path to picture!");        return;      }      Bitmap bitmap=null;      try {        bitmap=getScaledBitmap(uriString);      } catch (      IOException e) {        e.printStackTrace();      }      if (bitmap == null) {        Log.d(LOG_TAG,"I either have a null image path or bitmap");        this.failPicture("Unable to create bitmap!");        return;      }      if (this.correctOrientation) {        rotate=getImageOrientation(uri);        if (rotate != 0) {          Matrix matrix=new Matrix();          matrix.setRotate(rotate);          try {            bitmap=Bitmap.createBitmap(bitmap,0,0,bitmap.getWidth(),bitmap.getHeight(),matrix,true);            this.orientationCorrected=true;          } catch (          OutOfMemoryError oom) {            this.orientationCorrected=false;          }        }      }      if (destType == DATA_URL) {        this.processPicture(bitmap,this.encodingType);      } else       if (destType == FILE_URI || destType == NATIVE_URI) {        if ((this.targetHeight > 0 && this.targetWidth > 0) || (this.correctOrientation && this.orientationCorrected)) {          try {            String modifiedPath=this.ouputModifiedBitmap(bitmap,uri);            this.callbackContext.success("file://" + modifiedPath + "?"+ System.currentTimeMillis());          } catch (          Exception e) {            e.printStackTrace();            this.failPicture("Error retrieving image.");          }        } else {          this.callbackContext.success(fileLocation);        }      }      if (bitmap != null) {        bitmap.recycle();        bitmap=null;      }      System.gc();    }  }}  }
class C{  public int size(){  return 3;}  }
class C{  private static void clearReferencesRmiTargets(ClassLoader classLoader){  try {    Class<?> objectTargetClass=Class.forName("sun.rmi.transport.Target");    Field cclField=objectTargetClass.getDeclaredField("ccl");    cclField.setAccessible(true);    Class<?> objectTableClass=Class.forName("sun.rmi.transport.ObjectTable");    Field objTableField=objectTableClass.getDeclaredField("objTable");    objTableField.setAccessible(true);    Object objTable=objTableField.get(null);    if (objTable == null) {      return;    }    if (objTable instanceof Map<?,?>) {      Iterator<?> iter=((Map<?,?>)objTable).values().iterator();      while (iter.hasNext()) {        Object obj=iter.next();        Object cclObject=cclField.get(obj);        if (classLoader == cclObject) {          iter.remove();        }      }    }    Field implTableField=objectTableClass.getDeclaredField("implTable");    implTableField.setAccessible(true);    Object implTable=implTableField.get(null);    if (implTable == null) {      return;    }    if (implTable instanceof Map<?,?>) {      Iterator<?> iter=((Map<?,?>)implTable).values().iterator();      while (iter.hasNext()) {        Object obj=iter.next();        Object cclObject=cclField.get(obj);        if (classLoader == cclObject) {          iter.remove();        }      }    }  } catch (  Exception e) {    logger.log(Level.WARNING,"Failed to clear context class loader referenced from sun.rmi.transport.Target ",e);  }}  }
class C{  public void removeString(String word,Tuple t){  removeLeaf(root,word,t,0);}  }
class C{  @Override public boolean isCritical(){  return true;}  }
class C{  public static float readLittleEndianFloat(DataInputStream dataStream) throws IOException {  return Float.intBitsToFloat(readLittleEndianInt(dataStream));}  }
class C{  public void addEvidence(DocumentNGramGraph dDoc,String sFinalCategory){  addEvidence(new Decision(dDoc,sFinalCategory,1.0,new HashMap(0)),sFinalCategory);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_BoostSkillCastingTime_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200638,skillcaster,skillname);}  }
class C{  @Override protected final void invalidateQuietly(final DataTag tag,final TagQualityStatus statusToAdd,final String description,final Timestamp timestamp){  dataTagCacheObjectFacade.addQualityFlag(tag,statusToAdd,description);  ((DataTagCacheObject)tag).setCacheTimestamp(timestamp);}  }
class C{  public JsonNodeELResolver(){  this(false);}  }
class C{  @Override public double[] makeCumulativeTestPoints(){  return new double[]{-3.0001,-3.0,-2.0,-1.0,0.0,1.0,2.0,3.0,4.0,10.0,11.0,12.0,12.0001};}  }
class C{  public void start() throws IOException {}  }
class C{  @Override public boolean isFingerprintRegistered(){  return impl.isFingerprintRegistered();}  }
class C{  @Override public InputSource resolveEntity(String name,String publicId,String baseURI,String systemId) throws SAXException, IOException {  if (fEntityResolver != null) {    LSInput lsInput=fEntityResolver.resolveResource(XML_TYPE,null,publicId,systemId,baseURI);    if (lsInput != null) {      final String pubId=lsInput.getPublicId();      final String sysId=lsInput.getSystemId();      final String baseSystemId=lsInput.getBaseURI();      final Reader charStream=lsInput.getCharacterStream();      final InputStream byteStream=lsInput.getByteStream();      final String data=lsInput.getStringData();      final String encoding=lsInput.getEncoding();      InputSource inputSource=new InputSource();      inputSource.setPublicId(pubId);      inputSource.setSystemId((baseSystemId != null) ? resolveSystemId(sysId,baseSystemId) : sysId);      if (charStream != null) {        inputSource.setCharacterStream(charStream);      } else       if (byteStream != null) {        inputSource.setByteStream(byteStream);      } else       if (data != null && data.length() != 0) {        inputSource.setCharacterStream(new StringReader(data));      }      inputSource.setEncoding(encoding);      return inputSource;    }  }  return null;}  }
class C{  public static Double evaluateToDouble(String expression,Map<String,Object> vars){  Object result=evaluate(expression,vars);  if (result == null) {    throw new IllegalStateException("Result must be not null");  }  if (!isNumeric(String.valueOf(result))) {    throw new IllegalStateException("Result must be numeric: " + result + ", "+ result.getClass());  }  return Double.valueOf(String.valueOf(result));}  }
class C{  public void writeServer(String server) throws IOException {  writeHeader(HttpWriter.SERVER,server);}  }
class C{  public void resetCache(){  Cache.clear();  ElementAccessTime.clear();  CacheAccess.clear();  TimeCnt=Long.MIN_VALUE;}  }
class C{  public void pushDebugRect(Rect rect,int color){  if (rect.left > rect.right) {    int tmp=rect.right;    rect.right=rect.left;    rect.left=tmp;  }  if (rect.top > rect.bottom) {    int tmp=rect.bottom;    rect.bottom=rect.top;    rect.top=tmp;  }  mRenderHost.pushDebugRect(rect,color);}  }
class C{  private boolean canReadFile(File file){  if (!file.exists()) {    log.info("File " + file.getAbsolutePath() + " does not exist");    return false;  }  if (!file.canRead()) {    log.info("File " + file.getAbsolutePath() + " cannot be read");    return false;  }  return true;}  }
class C{  @Override public void close(){  unsubscribe();}  }
class C{  public boolean select(Viewer viewer,Object parentElement,Object element){  if (element instanceof ILogEntry) {    ILogEntry logEntry=(ILogEntry)element;    return (filterDate(logEntry,startDate,endDate) && filterRevision(logEntry,startRevision,endRevision) && filterUser(logEntry,user)&& filterComment(logEntry,comment));  }  return false;}  }
class C{  @Override public void endDTD(Augmentations augs) throws XNIException {  fInDTD=false;}  }
class C{  public DividerDecoration build(){  return new DividerDecoration(mHeight,mLPadding,mRPadding,mColour);}  }
class C{  public static boolean launchLyftApp(Context context,DeepLinkParams deepLinkParams){  if (!isLyftInstalled(context)) {    Intent intent=new Intent(Intent.ACTION_VIEW);    intent.setData(Uri.parse("https://play.google.com/store/apps/details?id=" + LYFT_PACKAGE_NAME + "&referrer="+ deepLinkParams.getClientId()));    context.startActivity(intent);    return false;  }  PackageManager packageManager=context.getPackageManager();  Intent i=packageManager.getLaunchIntentForPackage(LYFT_PACKAGE_NAME);  if (i == null) {    return false;  }  i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  String deepLinkString=createDeepLinkString(deepLinkParams);  i.setData(Uri.parse(deepLinkString));  context.startActivity(i);  return true;}  }
class C{  public static boolean isFixed(InvokeExpr ie){  return ie instanceof StaticInvokeExpr || ie instanceof SpecialInvokeExpr || !clientOverwriteableOverwrites(ie.getMethod());}  }
class C{  public EqIOException(final Throwable e){  super(e);}  }
class C{  public StatusConsole(int iWidth){  Width=iWidth;}  }
class C{  protected NewsfeedGetBannedQueryWithExtended extended(Boolean value){  return unsafeParam("extended",value);}  }
class C{  public void hideToolbar(){  hideToolbar(true);}  }
class C{  public static String joinPath(String... paths){  if (paths.length == 0) {    return "";  } else {    String output=paths[0];    for (int i=1; i < paths.length; i++) {      output=joinPath(output,paths[i]);    }    return output;  }}  }
class C{  PacketSpec(PacketSpecBuilder builder){  this.name=builder.name;  this.types=ImmutableMap.copyOf(builder.types);  this.handler=builder.handler;}  }
class C{  private void drawablesSelected(List<File> files){  Array<FileHandle> fileHandles=new Array<>();  for (  File file : files) {    fileHandles.add(new FileHandle(file));  }  drawablesSelected(fileHandles);}  }
class C{  public PokemonGo(OkHttpClient client){  this(client,new SystemTimeImpl(),hash(UUID.randomUUID().toString()));}  }
class C{  public static void main(String[] args){  In in;  String urlName="http://introcs.cs.princeton.edu/stdlib/InTest.txt";  System.out.println("readAll() from URL " + urlName);  System.out.println("---------------------------------------------------------------------------");  try {    in=new In(urlName);    System.out.println(in.readAll());  } catch (  Exception e) {    System.out.println(e);  }  System.out.println();  System.out.println("readLine() from URL " + urlName);  System.out.println("---------------------------------------------------------------------------");  try {    in=new In(urlName);    while (!in.isEmpty()) {      String s=in.readLine();      System.out.println(s);    }  } catch (  Exception e) {    System.out.println(e);  }  System.out.println();  System.out.println("readString() from URL " + urlName);  System.out.println("---------------------------------------------------------------------------");  try {    in=new In(urlName);    while (!in.isEmpty()) {      String s=in.readString();      System.out.println(s);    }  } catch (  Exception e) {    System.out.println(e);  }  System.out.println();  System.out.println("readLine() from current directory");  System.out.println("---------------------------------------------------------------------------");  try {    in=new In("./InTest.txt");    while (!in.isEmpty()) {      String s=in.readLine();      System.out.println(s);    }  } catch (  Exception e) {    System.out.println(e);  }  System.out.println();  System.out.println("readLine() from relative path");  System.out.println("---------------------------------------------------------------------------");  try {    in=new In("../stdlib/InTest.txt");    while (!in.isEmpty()) {      String s=in.readLine();      System.out.println(s);    }  } catch (  Exception e) {    System.out.println(e);  }  System.out.println();  System.out.println("readChar() from file");  System.out.println("---------------------------------------------------------------------------");  try {    in=new In("InTest.txt");    while (!in.isEmpty()) {      char c=in.readChar();      System.out.print(c);    }  } catch (  Exception e) {    System.out.println(e);  }  System.out.println();  System.out.println();  System.out.println("readLine() from absolute OS X / Linux path");  System.out.println("---------------------------------------------------------------------------");  in=new In("/n/fs/introcs/www/java/stdlib/InTest.txt");  try {    while (!in.isEmpty()) {      String s=in.readLine();      System.out.println(s);    }  } catch (  Exception e) {    System.out.println(e);  }  System.out.println();  System.out.println("readLine() from absolute Windows path");  System.out.println("---------------------------------------------------------------------------");  try {    in=new In("G:\\www\\introcs\\stdlib\\InTest.txt");    while (!in.isEmpty()) {      String s=in.readLine();      System.out.println(s);    }    System.out.println();  } catch (  Exception e) {    System.out.println(e);  }  System.out.println();}  }
class C{  public static InputStream toInputStream(CharSequence input){  return toInputStream(input,Charset.defaultCharset());}  }
class C{  @Override protected void readImpl(){  macroPosition=readC();  macroXML=readS();}  }
class C{  protected boolean isEnabledForManagedResources(){  return true;}  }
class C{  private void applyTorqueAction(){  TreePath path=this.tree.getSelectionPath();  if (path != null) {    DefaultMutableTreeNode node=(DefaultMutableTreeNode)path.getLastPathComponent();    if (node.getUserObject() instanceof SandboxBody) {      SandboxBody body=(SandboxBody)node.getUserObject();      double torque=ApplyTorqueDialog.show(ControlUtilities.getParentWindow(this));      if (torque != 0.0) {synchronized (Simulation.LOCK) {          body.applyTorque(torque);        }      }    }  }}  }
class C{  @deprecated public final void reset(String str){  int length=0;  if (str != null) {    length=str.length();  }  reset(str,0,length);}  }
class C{  public MessagesIsMessagesFromGroupAllowedQuery isMessagesFromGroupAllowed(Actor actor,int groupId,int userId){  return new MessagesIsMessagesFromGroupAllowedQuery(getClient(),actor,groupId,userId);}  }
class C{  private static Pattern createPattern(String propertyString,boolean asBoolean){  Pattern pattern=null;  if (!asBoolean) {    String copyVariablesFromProperties=propertyString;    pattern=patternsCache.get(copyVariablesFromProperties);    if (pattern == null) {      pattern=Pattern.compile(copyVariablesFromProperties);      patternsCache.put(copyVariablesFromProperties,pattern);    }  }  return pattern;}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("set mode=");  String mode=np.getLabelRespectCase();  np.matchIgnoreCase(";");  CompareWindow viewer=(CompareWindow)getParent();  viewer.setMode(Comparer.COMPARISON_MODE.valueOfIgnoreCase(mode));}  }
class C{  protected MarketAddQuery price(float value){  return unsafeParam("price",value);}  }
class C{  public boolean isSuccessful(){  return code >= 200 && code < 300;}  }
class C{  @RequestMapping(value="/",method=POST,produces=APPLICATION_JSON_VALUE) public ResponseEntity<AuthorDTO> create(@RequestBody AuthorDTO authorDTO) throws URISyntaxException {  log.debug("Create AuthorDTO : {}",authorDTO);  if (authorDTO.isIdSet()) {    return ResponseEntity.badRequest().header("Failure","Cannot create Author with existing ID").body(null);  }  AuthorDTO result=authorDTOService.save(authorDTO);  return ResponseEntity.created(new URI("/api/authors/" + result.id)).body(result);}  }
class C{  int observerCount(){  return observers.get().length;}  }
class C{  private Map<String,List<Experiment.ID>> prepareResponseEntity(List<Experiment.ID> experimentIDs){  Map<String,List<Experiment.ID>> responseEntity=new HashMap<>();  responseEntity.put("experimentIDs",experimentIDs);  return responseEntity;}  }
class C{  public void init$Children(){  children=new ASTNode[2];}  }
class C{  private void onResume(){  mSubscription=mSubscription.isUnsubscribed() ? new CompositeSubscription() : mSubscription;  Map<Integer,Observable> observables=mCache.getObservables(mUUID);  for (  Map.Entry<Integer,Observable> entry : observables.entrySet()) {    if (!mDispatchedObservablesHistory.contains(entry.getKey())) {      dispatchObservableToHost(entry.getKey(),entry.getValue());    }  }}  }
class C{  public void startNumber(){}  }
class C{  public static PreResponse buildErrorPreResponse(Throwable throwable){  ResponseContext responseContext=new ResponseContext(new LinkedHashMap<>());  if (throwable instanceof ResponseException) {    ResponseException responseException=(ResponseException)throwable;    responseContext.put(ResponseContextKeys.STATUS.getName(),responseException.getStatusCode());    responseContext.put(ResponseContextKeys.ERROR_MESSAGE.getName(),responseException.getReason());  } else {    responseContext.put(ResponseContextKeys.STATUS.getName(),Response.Status.INTERNAL_SERVER_ERROR.getStatusCode());    responseContext.put(ResponseContextKeys.ERROR_MESSAGE.getName(),throwable.getMessage());  }  return new PreResponse(new ResultSet(Collections.emptyList(),new Schema(AllGranularity.INSTANCE)),responseContext);}  }
class C{  private static boolean isNonLeft(int i0,int i1,int i2,int i3,double[] pts){  double l1, l2, l4, l5, l6, angle1, angle2, angle;  l1=Math.sqrt(Math.pow(pts[i2 + 1] - pts[i1 + 1],2) + Math.pow(pts[i2] - pts[i1],2));  l2=Math.sqrt(Math.pow(pts[i3 + 1] - pts[i2 + 1],2) + Math.pow(pts[i3] - pts[i2],2));  l4=Math.sqrt(Math.pow(pts[i3 + 1] - pts[i0 + 1],2) + Math.pow(pts[i3] - pts[i0],2));  l5=Math.sqrt(Math.pow(pts[i1 + 1] - pts[i0 + 1],2) + Math.pow(pts[i1] - pts[i0],2));  l6=Math.sqrt(Math.pow(pts[i2 + 1] - pts[i0 + 1],2) + Math.pow(pts[i2] - pts[i0],2));  angle1=Math.acos(((l2 * l2) + (l6 * l6) - (l4 * l4)) / (2 * l2 * l6));  angle2=Math.acos(((l6 * l6) + (l1 * l1) - (l5 * l5)) / (2 * l6 * l1));  angle=(Math.PI - angle1) - angle2;  if (angle <= 0.0) {    return (true);  } else {    return (false);  }}  }
class C{  ParamPart(String name,InputStream in,String boundary,String encoding) throws IOException {  super(name);  this.encoding=encoding;  PartInputStream pis=new PartInputStream(in,boundary);  ByteArrayOutputStream baos=new ByteArrayOutputStream(512);  byte[] buf=new byte[128];  int read;  while ((read=pis.read(buf)) != -1) {    baos.write(buf,0,read);  }  pis.close();  baos.close();  value=baos.toByteArray();}  }
class C{  public DistributedLogConfiguration(){  super();  addConfiguration(new SystemConfiguration());}  }
class C{  public CommitRecord(BasicLogRecord rec){  txNum=(Long)rec.nextVal(BIGINT).asJavaVal();  lsn=rec.getLSN();}  }
class C{  private synchronized void removeChildNode(DefaultMutableTreeNode child){  DefaultTreeModel model=(DefaultTreeModel)getModel();  model.removeNodeFromParent(child);}  }
class C{  public static void init(Context context,boolean is_top){  cameraManager=new CameraManager(context,is_top);}  }
class C{  public static List<ScreenWiggleLocusInfo> tdfRangeToScreen(String ibfFile,String chrom,int startLocation,int endLocation,List<Double> genomeToScreenMapping){  List<ScreenWiggleLocusInfo> screenWiggleLocusInfoList=new ArrayList<ScreenWiggleLocusInfo>();  for (int i=0; i < genomeToScreenMapping.size(); i++) {    screenWiggleLocusInfoList.add(new ScreenWiggleLocusInfo());  }  TDFReader reader=TDFReader.getReader(ibfFile);  for (  String dsName : reader.getDatasetNames()) {    String[] tokens=dsName.split("/");    String chrName=tokens[1];    if (!chrName.equals(chrom) || !dsName.contains("raw")) {      continue;    }    TDFDataset ds=reader.getDataset(dsName);    int tileWidth=ds.tileWidth;    int startTile=startLocation / tileWidth;    int endTile=endLocation / tileWidth;    for (int tileNumber=startTile; tileNumber <= endTile; tileNumber++) {      TDFTile tile=reader.readTile(ds,tileNumber);      if (tile == null) {      } else {        int nTracks=reader.getTrackNames().length;        if (nTracks > 1) {          throw new RuntimeException("More than one track found in tdf file " + ibfFile);        }        int nBins=tile.getSize();        if (nBins > 0) {          for (int b=0; b < nBins; b++) {            int start=tile.getStartPosition(b);            int end=tile.getEndPosition(b);            if (start > endLocation) {              break;            }            if (end >= startLocation) {              int tileStartPos=tile.getStartPosition(b);              float tileValue=tile.getValue(0,b);              int idx=Utils.getIndexOfclosestValue(tileStartPos + 1,genomeToScreenMapping);              screenWiggleLocusInfoList.get(idx).increment(tileValue);            }          }        }      }    }  }  reader.close();  return screenWiggleLocusInfoList;}  }
class C{  private void initWritingAttributes(ImmutableEndpoint endpoint){  Properties params=endpoint.getEndpointURI().getParams();  if (params != null) {    try {      String writeLeaseStr=(String)params.get(ENDPOINT_PARAM_WRITE_LEASE);      if (writeLeaseStr != null) {        writeLease=Long.valueOf(writeLeaseStr);      }      String updateOrWriteStr=(String)params.get(ENDPOINT_PARAM_UPDATE_OR_WRITE);      if (updateOrWriteStr != null) {        updateOrWrite=Boolean.valueOf(updateOrWriteStr);      }      String updateTimeoutStr=(String)params.get(ENDPOINT_PARAM_UPDATE_TIMEOUT);      if (updateTimeoutStr != null) {        updateTimeout=Long.valueOf(updateTimeoutStr);      }    } catch (    NumberFormatException e) {      throw new MuleRuntimeException(CoreMessages.failedToCreateConnectorFromUri(endpoint.getEndpointURI()),e);    }  }}  }
class C{  public Set<String> keySet(){  return this.map.keySet();}  }
class C{  public void finishModification() throws IOException {  getFileFooter().setClassificationsFooter(io.getPosition());  getClassificationsFooter().write(io);  getFileFooter().setAuxStart(io.getPosition());  getFileFooter().setAuxFooter(io.getPosition());  getAuxBlocksFooter().write(io);  getFileFooter().setFileFooter(io.getPosition());  getFileFooter().write(io);  close();}  }
class C{  @Override public void createRaster(Symbolizer symbolizer){}  }
class C{  public void addNewVariable(){  EnvVar envVar=this.envMgr.addNewEnvVar("NewEnvVar",String.class,null);  if (envVar != null) {    dataList.add(envVar);    this.fireTableDataChanged();  }}  }
class C{  public void intersectRanges(QueryTemplatePacket template){  for (  Map.Entry<String,Range> entry : template.getRanges().entrySet()) {    String fieldName=entry.getKey();    Range newRange=entry.getValue();    Range prevRange=_ranges.get(fieldName);    if (prevRange == null) {      _ranges.put(fieldName,newRange);    } else {      Range intersection=prevRange.intersection(newRange);      _ranges.put(fieldName,intersection);      if (intersection instanceof EmptyRange) {        setAlwaysEmpty(true);        return;      }    }  }}  }
class C{  public static synchronized boolean isBodyColorRandom(){  return bodyColorRandom;}  }
class C{  public Set<Triplet<R,C,V>> cellSet(){  Set<Triplet<R,C,V>> set=new HashSet<>();  for (  R rowKey : dataMap.keySet()) {    Map<C,V> row=dataMap.get(rowKey);    for (    C columnKey : row.keySet()) {      set.add(new Triplet<>(rowKey,columnKey,row.get(columnKey)));    }  }  return set;}  }
class C{  public boolean checkRace(Race playerRace){  ItemTemplate template=DataManager.ITEM_DATA.getItemTemplate(id);  return template.getRace() == Race.PC_ALL && (race == null || race == playerRace) || template.getRace() != Race.PC_ALL && template.getRace() == playerRace;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ProcATK_Instant_Ratio_ME_TO_B(int num0,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200544,num0,skilltarget,skillname);}  }
class C{  public static void line(double x0,double y0,double x1,double y1){  offscreen.draw(new Line2D.Double(scaleX(x0),scaleY(y0),scaleX(x1),scaleY(y1)));  draw();}  }
class C{  public static int growSize(int currentSize){  return currentSize <= 4 ? 8 : currentSize + (currentSize >> 1);}  }
class C{  public void watchMonitoredDataCache(PreferenceChangeListener pcl){  addListener(INT_KEY_MONDATA_CACHE,pcl);}  }
class C{  private double correlationOfFeature(String dataFile,String[] features,int indVarColNumber,int[] X,int x,int rowIni,int rowEnd){  double corXminusx;  Regression reg=new Regression();  int j=0;  int[] Xminusx=new int[X.length - 1];  for (int i=0; i < X.length; i++)   if (X[i] != x)   Xminusx[j++]=X[i];  reg.multipleLinearRegression(dataFile,indVarColNumber,Xminusx,features,interceptTerm,rowIni,rowEnd);  corXminusx=reg.getCorrelation();  return corXminusx;}  }
class C{  protected void filterColumns(){  if (m_parent == null)   return;  for (int i=0; i < m_pnames.size(); ++i) {    String name=(String)m_pnames.get(i);    Column col=m_parent.getColumn(name);    boolean contained=m_names.contains(name);    boolean removedFromParent=(col == null);    if (removedFromParent || !m_colFilter.include(col,name) || contained) {      m_pnames.remove(i--);      if (!contained) {        ((ColumnEntry)m_entries.get(name)).dispose();        m_entries.remove(name);      }      fireTableEvent(m_rows.getMinimumRow(),m_rows.getMaximumRow(),i,EventConstants.DELETE);    }  }  m_pnames.clear();  Iterator pcols=m_parent.getColumnNames();  for (int i=0, j=m_columns.size(); pcols.hasNext(); ++i) {    String name=(String)pcols.next();    Column col=m_parent.getColumn(i);    if (m_colFilter.include(col,name) && !m_names.contains(name)) {      m_pnames.add(name);      ColumnEntry entry=(ColumnEntry)m_entries.get(name);      if (entry == null) {        entry=new ColumnEntry(j++,col,new ColumnMetadata(this,name));        m_entries.put(name,entry);        fireTableEvent(m_rows.getMinimumRow(),m_rows.getMaximumRow(),i,EventConstants.INSERT);      } else {        entry.colnum=j++;      }      m_lastCol=m_columns.size() - 1;    }  }}  }
class C{  public void deactivate(){  if (myActive) {    getRenderingQueue().cancelAllUpdates();    ResourceNotificationManager manager=ResourceNotificationManager.getInstance(myFile.getProject());    manager.removeListener(this,myFacet,myFile,myConfiguration);    myConfigurationModificationCount=myConfiguration.getModificationCount();    myConfiguration.removeListener(myConfigurationListener);    myActive=false;  }}  }
class C{  public PickRequest withAllowedMimeType(@Nullable final String pAllowedMimeType){  this.mMimeType=pAllowedMimeType == null ? QiPick.MIME_TYPE_IMAGES_ALL : pAllowedMimeType;  return this;}  }
class C{  public boolean init(StepMetaInterface smi,StepDataInterface sdi){  meta=(MDKeyGenStepMeta)smi;  data=(MDKeyGenStepData)sdi;  return super.init(smi,sdi);}  }
class C{  public VideoGetCommentsQuery sort(VideoGetCommentsSort value){  return unsafeParam("sort",value);}  }
class C{  public DistributedLogClientBuilder serverSet(ServerSet serverSet){  DistributedLogClientBuilder newBuilder=newBuilder(this);  newBuilder._routingServiceBuilder=RoutingUtils.buildRoutingService(serverSet);  newBuilder._enableRegionStats=false;  return newBuilder;}  }
class C{  public CM_L2AUTH_LOGIN_CHECK(int opcode,State state,State... restStates){  super(opcode,state,restStates);}  }
class C{  private boolean canShowLoaderView(int deltaY){  final int itemsCount=getCount();  if (itemsCount < 0) {    return false;  }  final int viewsCount=getChildCount();  final int firstVisibleItem=getFirstVisiblePosition();  final int lastVisibleItem=getLastVisiblePosition();  if (lastVisibleItem - firstVisibleItem + 1 >= itemsCount)   return false;  final int lastViewBottom=getChildAt(viewsCount - 1).getBottom();  final int listBottom=getHeight() - getListPaddingBottom();  return (lastVisibleItem >= itemsCount - 1 && lastViewBottom == listBottom && deltaY < 0);}  }
class C{  @GET @Path("{experimentID}/events") @Produces(TEXT_PLAIN) @ApiOperation(value="Export all event records for an experiment",notes="A wrapper for POST API with default parameters",response=StreamingOutput.class) @Timed public Response exportActions_get(@PathParam("experimentID") @ApiParam(value="Experiment ID") final Experiment.ID experimentID,@HeaderParam(AUTHORIZATION) @ApiParam(value=EXAMPLE_AUTHORIZATION_HEADER,required=true) final String authorizationHeader){  if (authorizationHeader != null) {    Username userName=authorization.getUser(authorizationHeader);    Experiment experiment=experiments.getExperiment(experimentID);    if (experiment == null) {      throw new ExperimentNotFoundException(experimentID);    }    authorization.checkUserPermissions(userName,experiment.getApplicationName(),READ);  }  return exportActions(experimentID,new Parameters(),authorizationHeader);}  }
class C{  protected int generateInteger(String value,String parameterName) throws BadApiRequestException {  try {    return value == null ? 0 : Integer.parseInt(value);  } catch (  NumberFormatException nfe) {    LOG.debug(INTEGER_INVALID.logFormat(value,parameterName),nfe);    throw new BadApiRequestException(INTEGER_INVALID.logFormat(value,parameterName),nfe);  }}  }
class C{  public void associateAsyncPrettyPrinterWithId(String requestId,AsyncPrettyPrinter asyncPrettyPrinter){  if (mRequestIdMap.put(requestId,asyncPrettyPrinter) != null) {    throw new IllegalArgumentException("cannot associate different " + "pretty printers with the same request id: " + requestId);  }}  }
class C{  @Override public void dataChanged(FieldIdEnum changedField){  updateSymbol();}  }
class C{  public void zoomIn(){  MPPointF center=mViewPortHandler.getContentCenter();  mViewPortHandler.zoomIn(center.x,-center.y,mZoomInMatrixBuffer);  mViewPortHandler.refresh(mZoomInMatrixBuffer,this,false);  MPPointF.recycleInstance(center);  calculateOffsets();  postInvalidate();}  }
class C{  public Builder reorderColumns(String... newOrder){  return transform(new ReorderColumnsTransform(newOrder));}  }
class C{  @Override public XMLInputSource resolveEntity(XMLResourceIdentifier resourceIdentifier) throws XNIException, IOException {  if (fEntityResolver != null) {    LSInput inputSource=resourceIdentifier == null ? fEntityResolver.resolveResource(null,null,null,null,null) : fEntityResolver.resolveResource(getType(resourceIdentifier),resourceIdentifier.getNamespace(),resourceIdentifier.getPublicId(),resourceIdentifier.getLiteralSystemId(),resourceIdentifier.getBaseSystemId());    if (inputSource != null) {      String publicId=inputSource.getPublicId();      String systemId=inputSource.getSystemId();      String baseSystemId=inputSource.getBaseURI();      InputStream byteStream=inputSource.getByteStream();      Reader charStream=inputSource.getCharacterStream();      String encoding=inputSource.getEncoding();      String data=inputSource.getStringData();      XMLInputSource xmlInputSource=new XMLInputSource(publicId,systemId,baseSystemId);      if (charStream != null) {        xmlInputSource.setCharacterStream(charStream);      } else       if (byteStream != null) {        xmlInputSource.setByteStream(byteStream);      } else       if (data != null && data.length() != 0) {        xmlInputSource.setCharacterStream(new StringReader(data));      }      xmlInputSource.setEncoding(encoding);      return xmlInputSource;    }  }  return null;}  }
class C{  @Override protected Class<?> resolveClass(ObjectStreamClass objectStreamClass) throws IOException, ClassNotFoundException {  Class<?> clazz=Class.forName(objectStreamClass.getName(),false,classLoader);  if (clazz != null) {    return clazz;  } else {    return super.resolveClass(objectStreamClass);  }}  }
class C{  public static void translucentStatusBar(Activity activity,boolean hideStatusBarBackground){  Window window=activity.getWindow();  ViewGroup mContentView=(ViewGroup)activity.findViewById(Window.ID_ANDROID_CONTENT);  View mChildView=mContentView.getChildAt(0);  if (mChildView != null) {    ViewCompat.setFitsSystemWindows(mChildView,false);  }  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {    int statusBarHeight=getStatusBarHeight(activity);    window.addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {      window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);      if (hideStatusBarBackground) {        window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);        window.setStatusBarColor(COLOR_TRANSLUCENT);      } else {        window.setStatusBarColor(calculateStatusBarColor(COLOR_TRANSLUCENT,DEFAULT_COLOR_ALPHA));      }      if (mChildView != null) {        ViewCompat.requestApplyInsets(mChildView);      }    } else {      ViewGroup mDecorView=(ViewGroup)window.getDecorView();      if (mDecorView.getTag() != null && mDecorView.getTag() instanceof Boolean && (Boolean)mDecorView.getTag()) {        mChildView=mDecorView.getChildAt(0);        mContentView.removeView(mChildView);        mChildView=mContentView.getChildAt(0);        if (mChildView != null) {          FrameLayout.LayoutParams lp=(FrameLayout.LayoutParams)mChildView.getLayoutParams();          if (lp != null && lp.topMargin >= statusBarHeight) {            lp.topMargin-=statusBarHeight;            mChildView.setLayoutParams(lp);          }        }        mDecorView.setTag(false);      }    }  }}  }
class C{  public GroupsSearchQuery market(Boolean value){  return unsafeParam("market",value);}  }
class C{  @Override public Element createElementNS(String namespaceURI,String qualifiedName,String localpart) throws DOMException {  return new PSVIElementNSImpl(this,namespaceURI,qualifiedName,localpart);}  }
class C{  protected Session(HttpServletRequest request){  super(GigaSessionManager.this,request);  _data=new SessionData(getClusterId());  _data.setMaxIdleMs(TimeUnit.SECONDS.toMillis(_dftMaxIdleSecs));  _data.setExpiryTime(getMaxInactiveInterval() < 0 ? Long.MAX_VALUE : (System.currentTimeMillis() + TimeUnit.SECONDS.toMillis(getMaxInactiveInterval())));  _data.setCookieSet(0);  Enumeration<String> attributeNames=getAttributeNames();  HashMap<String,Object> attributes=new HashMap<String,Object>();  while (attributeNames.hasMoreElements()) {    String nextAttribute=attributeNames.nextElement();    attributes.put(nextAttribute,request.getAttribute(nextAttribute));  }  _data.setAttributeMap(attributes);  if (Log.getLog().isDebugEnabled())   Log.getLog().debug("New Session from request, " + _data.toStringExtended());}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("find read=");  String regularExpression=np.getWordRespectCase();  np.matchIgnoreCase(";");  Pattern pattern=Pattern.compile(regularExpression);  AlignmentViewer viewer=(AlignmentViewer)getViewer();  for (int row=0; row < viewer.getAlignment().getNumberOfSequences(); row++) {    Lane lane=viewer.getAlignment().getLane(row);    Matcher matcher=pattern.matcher(lane.getName());    if (matcher.find()) {      final Alignment alignment=viewer.getAlignment();      int firstJump=alignment.getGapColumnContractor().getTotalJumpBeforeLayoutColumn(lane.getFirstNonGapPosition());      int firstCol=lane.getFirstNonGapPosition() - firstJump;      int lastCol=lane.getLastNonGapPosition() - firstJump - 1;      row=alignment.getRowCompressor().getRow(row);      viewer.getSelectedBlock().select(row,firstCol,row,lastCol,alignment.isTranslate());      System.err.println("Found: " + lane.getName());      executeImmediately("zoom axis=both what=selection;");      return;    }  }  System.err.println("No match");}  }
class C{  public BigReal(char[] in,int offset,int len,MathContext mc){  d=new BigDecimal(in,offset,len,mc);}  }
class C{  public static DhisHttpResponse httpGET(String requestURL,boolean authorize,String username,String password,Map<String,String> headers,int timeout,boolean processResponse) throws Exception {  DefaultHttpClient httpclient=null;  DhisHttpResponse dhisHttpResponse=null;  HttpParams params=new BasicHttpParams();  try {    HttpConnectionParams.setConnectionTimeout(params,timeout);    HttpConnectionParams.setSoTimeout(params,timeout);    httpclient=new DefaultHttpClient(params);    HttpGet httpGet=new HttpGet(requestURL);    if (headers instanceof Map) {      for (      Map.Entry<String,String> e : headers.entrySet()) {        httpGet.addHeader(e.getKey(),e.getValue());      }    }    if (authorize) {      httpGet.setHeader("Authorization",CodecUtils.getBasicAuthString(username,password));    }    HttpResponse response=httpclient.execute(httpGet);    if (processResponse) {      dhisHttpResponse=processResponse(requestURL,username,response);    } else {      dhisHttpResponse=new DhisHttpResponse(response,null,response.getStatusLine().getStatusCode());    }  } catch (  Exception e) {    log.error("Exception occurred in the httpGET call with username " + username,e);    throw e;  } finally {    if (httpclient != null) {      httpclient.getConnectionManager().shutdown();    }  }  return dhisHttpResponse;}  }
class C{  public JSONArray put(int index,Collection value) throws JSONException {  put(index,new JSONArray(value));  return this;}  }
class C{  public Boolean shouldAllowBridgeAccess(String url){  return shouldAllowNavigation(url);}  }
class C{  @Override public void addDataTag(final SourceDataTag sourceDataTag){  dataTagTable.put(sourceDataTag.getId(),sourceDataTag);}  }
class C{  public AddAndroidActivityPath(@Nullable VirtualFile targetFolder,@Nullable File template,Map<String,Object> predefinedParameterValues,Disposable parentDisposable){  myTemplate=template;  myPredefinedParameterValues=predefinedParameterValues;  myParentDisposable=parentDisposable;  myIsNewModule=false;  myTargetFolder=targetFolder != null && !targetFolder.isDirectory() ? targetFolder.getParent() : targetFolder;}  }
class C{  protected void resetDateObj(DateTimeData data){  data.year=0;  data.month=0;  data.day=0;  data.hour=0;  data.minute=0;  data.second=0;  data.utc=0;  data.timezoneHr=0;  data.timezoneMin=0;}  }
class C{  public static int stringMod(String string,int mod){  int hashCode=0;  if (string != null) {    hashCode=string.hashCode();    if (hashCode < 0) {      hashCode=Math.abs(hashCode);      hashCode=hashCode < 0 ? 0 : hashCode;    }  }  return hashCode % (mod > 0 ? mod : 1);}  }
class C{  public boolean with_arrayref(){  return soot.PhaseOptions.getBoolean(options,"with-arrayref");}  }
class C{  public void closeThriftReader(){  thriftReader.close();}  }
class C{  public AxisLabelLayout(String group,AxisLayout layout,Rectangle2D bounds,double spacing){  super(group);  if (bounds != null)   setLayoutBounds(bounds);  m_layout=layout;  m_model=layout.getRangeModel();  m_axis=layout.getAxis();  m_scale=layout.getScale();  m_spacing=spacing;}  }
class C{  public static void updateAllForFacade(DataStore dataStore,Iterator<Update> updateIter,Set<String> tags){  Iterator<List<Update>> batchIter=new TimePartitioningIterator<>(updateIter,50,1,2500,Duration.millis(500L));  while (batchIter.hasNext()) {    dataStore.updateAllForFacade(batchIter.next(),tags);  }}  }
class C{  public boolean end(){  outputList.add(new ByteArrayInputStream(outputData));  totBytes+=outputData.length;  return true;}  }
class C{  public GroupsGetRequestsQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  public boolean equals(Object obj){  return (obj instanceof ConstraintAlternatives && Constraint.equal(constraints,((ConstraintAlternatives)obj).constraints));}  }
class C{  @Nullable private static String validateTemplate(TemplateMetadata metadata,int currentMinSdk,int buildApi){  if (!metadata.isSupported()) {    return "This template requires a more recent version of Android Studio. Please update.";  }  int templateMinSdk=metadata.getMinSdk();  if (templateMinSdk > currentMinSdk && currentMinSdk >= 1) {    return String.format("This template requires a minimum SDK version of at least %1$d, and the current min version is %2$d",templateMinSdk,currentMinSdk);  }  int templateMinBuildApi=metadata.getMinBuildApi();  if (templateMinBuildApi > buildApi && buildApi >= 1) {    return String.format("This template requires a build target API version of at least %1$d, and the current version is %2$d",templateMinBuildApi,buildApi);  }  return null;}  }
class C{  public MessagesSearchQuery search(Actor actor){  return new MessagesSearchQuery(getClient(),actor);}  }
class C{  public List<CustomerReview> loadCustomerReviews(List<Product> products){  EntityManager em=emf.createEntityManager();  TypedQuery<CustomerReview> queryReviews;  List<CustomerReview> resReview=null;  try {    em.getTransaction().begin();    queryReviews=em.createQuery("SELECT p FROM CustomerReview p",CustomerReview.class);    resReview=queryReviews.getResultList();    if (resReview.size() > 5) {      logger.info(resReview.size() + " Customer Reviews already available in the db");    } else {      new XMLParser().readCustomerReview(em,"com/sap/espm/model/data/CustomerReviews.xml",products);      em.getTransaction().commit();      queryReviews=em.createQuery("SELECT p FROM CustomerReview p",CustomerReview.class);      resReview=queryReviews.getResultList();      logger.info(resReview.size() + " Products loaded into the db");    }  } catch (  Exception e) {    logger.error("Exception occured",e);  } finally {    em.close();  }  return resReview;}  }
class C{  public static UByte valueOf(String value) throws NumberFormatException {  return valueOfUnchecked(rangeCheck(Short.parseShort(value)));}  }
class C{  public static void o(Zmat A,int w,int d){  int nr=A.nrow;  int nc=A.ncol;  A.getProperties();  boolean real=true;  real:   for (int i=A.bx; i <= A.rx; i++) {    for (int j=A.bx; j <= A.cx; j++) {      if (A.im[i - A.bx][j - A.bx] != 0.) {        real=false;        break real;      }    }  }  if (!real) {    String temp=Integer.toString(nr + A.bx - 1);    int rfw=temp.length() + 1;    int ww=w + d + 10;    int ncp=(Parameters.PageWidth - rfw) / ww;    int jl=0;    while (jl < nc) {      int ju=Math.min(nc,jl + ncp);      System.out.print("\n");      String head="";      while (head.length() < rfw)       head=head + " ";      System.out.print(head);      for (int j=jl; j < ju; j++) {        head=Integer.toString(j + A.bx);        while (head.length() < ww)         head=" " + head;        System.out.print(head);      }      System.out.print("\n");      for (int i=0; i < nr; i++) {        String row=Integer.toString(i + A.bx);        while (row.length() < rfw)         row=" " + row;        System.out.print(row);        for (int j=jl; j < ju; j++) {          String snum=DoubletoEstring(A.re[i][j],w,d);          if (A.im[i][j] < 0)           snum=snum + " - " + DoubletoEstring(-A.im[i][j],d + 6,d)+ "i"; else           snum=snum + " + " + DoubletoEstring(A.im[i][j],d + 6,d)+ "i";          System.out.print(snum);        }        System.out.print("\n");      }      jl=jl + ncp;    }  } else {    String temp=Integer.toString(A.rx);    int rfw=temp.length() + 1;    int ncp=(Parameters.PageWidth - rfw) / w;    int jl=A.bx;    while (jl <= A.cx) {      int ju=Math.min(A.cx,jl + ncp - 1);      System.out.print("\n");      String head="";      while (head.length() < rfw)       head=head + " ";      System.out.print(head);      for (int j=jl; j <= ju; j++) {        head=Integer.toString(j);        while (head.length() < w)         head=" " + head;        System.out.print(head);      }      System.out.print("\n");      for (int i=A.bx; i <= A.rx; i++) {        String row=Integer.toString(i);        while (row.length() < rfw)         row=" " + row;        System.out.print(row);        for (int j=jl; j <= ju; j++)         System.out.print(DoubletoEstring(A.re[i - A.bx][j - A.bx],w,d));        System.out.print("\n");      }      jl=jl + ncp;    }  }}  }
class C{  public IteratorBuilder leaseDuration(long leaseDuration){  this.iteratorConfig.setLeaseDuration(leaseDuration);  return this;}  }
class C{  protected AdamsFieldStateInterpolator<T> create(boolean newForward,FieldODEStateAndDerivative<T> newGlobalPreviousState,FieldODEStateAndDerivative<T> newGlobalCurrentState,FieldODEStateAndDerivative<T> newSoftPreviousState,FieldODEStateAndDerivative<T> newSoftCurrentState,FieldEquationsMapper<T> newMapper){  return new AdamsFieldStateInterpolator<T>(scalingH,reference,scaled,nordsieck,newForward,newGlobalPreviousState,newGlobalCurrentState,newSoftPreviousState,newSoftCurrentState,newMapper);}  }
class C{  public boolean isHttps(){  Attribute<Boolean> isHttpsAttr=ctx.attr(AttributeKey.<Boolean>valueOf(IS_HTTPS_ATTRIBUTE_NAME));  Boolean isHttps=isHttpsAttr.get();  if (isHttps == null) {    return false;  } else {    return isHttps;  }}  }
class C{  private void handleTagSubscription(Set<Long> subscriptionList,Set<Long> newTagIds,final BaseListener listener,boolean sendInitialUpdateSeperately){  final Map<Long,Tag> initialUpdates=new HashMap<>(subscriptionList.size());  ClientDataTagImpl cdt=null;  for (  Long tagId : subscriptionList) {    cdt=controller.getActiveCache().get(tagId);    if (sendInitialUpdateSeperately) {      initialUpdates.put(tagId,cdt.clone());    }  }  if (sendInitialUpdateSeperately && listener instanceof DataTagListener) {    if (log.isDebugEnabled()) {      log.debug("handleTagSubscription() - Sending initial values to DataTagListener");    }    Collection<ClientDataTagValue> oldFormat=new ArrayList<>(initialUpdates.size());    for (    Tag value : initialUpdates.values()) {      oldFormat.add((ClientDataTagValue)value);    }    ((DataTagListener)listener).onInitialUpdate(oldFormat);  } else   if (sendInitialUpdateSeperately && listener instanceof TagListener) {    if (log.isDebugEnabled()) {      log.debug("handleTagSubscription() - Sending initial values to DataTagListener");    }    Collection<Tag> values=initialUpdates.values();    ((TagListener)listener).onInitialUpdate(values);  }  for (  Long tagId : subscriptionList) {    cdt=controller.getActiveCache().get(tagId);    cdt.addUpdateListener(listener,initialUpdates.get(tagId));  }  if (!newTagIds.isEmpty()) {    cacheSynchronizer.subscribeTags(newTagIds);    fireOnNewTagSubscriptionsEvent(newTagIds);  }}  }
class C{  public void startTransition(){  if (mViewToShow != null) {    ViewParent parent=mViewToShow.getParent();    ((ViewGroup)parent).removeView(mViewToShow);    addChildView(mViewToShow);    if (mViewToHide != null)     mViewToShow.setAlpha(0.0f);  }}  }
class C{  public Optional<Double> avg(){  if (isEmpty())   return Optional.empty();  return Optional.of(sum() / getEventCount());}  }
class C{  public boolean isCritical(){  return false;}  }
class C{  public final synchronized void clear(){  fCatalog=null;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_CANT_INSTANCE_TOO_MANY_MEMBERS(int num0,String worldname1){  return new SM_SYSTEM_MESSAGE(1400180,num0,worldname1);}  }
class C{  @Deprecated public Potion(PotionType type,int level,boolean splash,boolean extended){  this(type,level,splash);  this.extended=extended;}  }
class C{  @Override public Set<String> locateSimilarDocuments(DocumentNGramGraph dngCur){  String sClusterLabel=null;  double dSim=0.0;  double dPrvSim=0.0;  Vertex vBestCandidate=null;  Vertex vCur=getRootHierarchyNode(Hierarchy);  LinkedList<String> lPath=new LinkedList<String>();  lPath.add(vCur.getLabel());  do {    dPrvSim=dSim;    Iterator iChildren=utils.getAdjacentIncomingVertices(Hierarchy,vCur).iterator();    vBestCandidate=vCur;    if (iChildren.hasNext()) {      while (iChildren.hasNext()) {        Vertex vCandidate=(Vertex)iChildren.next();        double dCurSim=Double.NEGATIVE_INFINITY;        try {          initComparator();          dCurSim=Comparator.getSimilarityBetween(dngCur,getRepresentationFromCluster(vCandidate.getLabel())).getOverallSimilarity();        } catch (        InvalidClassException ex) {          System.err.println("Invalid document type. Ignoring...");          ex.printStackTrace(System.err);        }        if (dCurSim > dSim) {          vBestCandidate=vCandidate;          dSim=dCurSim;        }      }    }    vCur=vBestCandidate;    sClusterLabel=vBestCandidate.getLabel();    lPath.add(sClusterLabel);  } while (dPrvSim < dSim);  System.err.println(utils.printIterable(lPath,"->\n"));  return getDocumentIDsFromCluster(sClusterLabel);}  }
class C{  public MulticastTimeToLive(int ttl){  if (ttl < 0 || ttl > MAX_TIME_TO_LIVE) {    throw new IllegalArgumentException("invalid time to live");  }  this.ttl=ttl;}  }
class C{  public void atan(final double[] operand,final int operandOffset,final double[] result,final int resultOffset){  double[] function=new double[1 + order];  final double x=operand[operandOffset];  function[0]=FastMath.atan(x);  if (order > 0) {    final double[] q=new double[order];    q[0]=1;    final double x2=x * x;    final double f=1.0 / (1 + x2);    double coeff=f;    function[1]=coeff * q[0];    for (int n=2; n <= order; ++n) {      double v=0;      q[n - 1]=-n * q[n - 2];      for (int k=n - 1; k >= 0; k-=2) {        v=v * x2 + q[k];        if (k > 2) {          q[k - 2]=(k - 1) * q[k - 1] + (k - 1 - 2 * n) * q[k - 3];        } else         if (k == 2) {          q[0]=q[1];        }      }      if ((n & 0x1) == 0) {        v*=x;      }      coeff*=f;      function[n]=coeff * v;    }  }  compose(operand,operandOffset,function,result,resultOffset);}  }
class C{  public final void testFallBackList(){  try {    fFileManager.fallback(data);  } catch (  DataFallbackException e) {    fail("Data could not be written to the log file " + e.getMessage());  }  boolean empty=fFileManager.isFallbackFileEmpty();  assertFalse(empty);}  }
class C{  public void dumpBinary(ByteBuffer bb) throws IOException {  bb.putInt(frameData.length);  for (int i=0; i < frameData.length; i++) {    bb.putShort(frameData[i]);  }  bb.putInt(residualData.length);  bb.put(residualData);}  }
class C{  public List<RecognitionResult> recognize(RecognitionRequest request) throws ClarifaiException {  return Arrays.asList(new ClarifaiRequester<RecognitionResult[]>(connectionFactory,credentialManager,POST,"/multiop",RecognitionResult[].class,maxAttempts).execute(request));}  }
class C{  public static void copyPropertiesInclude(Object from,Object to,String[] includsArray) throws Exception {  List<String> includesList=null;  if (includsArray != null && includsArray.length > 0) {    includesList=Arrays.asList(includsArray);  } else {    return;  }  Method[] fromMethods=from.getClass().getDeclaredMethods();  Method[] toMethods=to.getClass().getDeclaredMethods();  Method fromMethod=null, toMethod=null;  String fromMethodName=null, toMethodName=null;  for (int i=0; i < fromMethods.length; i++) {    fromMethod=fromMethods[i];    fromMethodName=fromMethod.getName();    if (!fromMethodName.contains("get")) {      if (!fromMethodName.startsWith("is")) {        continue;      }    }    String str=fromMethodName.substring(fromMethodName.startsWith("is") ? 2 : 3);    if (!includesList.contains(str.substring(0,1).toLowerCase() + str.substring(1))) {      continue;    }    toMethodName="set" + fromMethodName.substring(fromMethodName.startsWith("is") ? 2 : 3);    toMethod=findMethodByName(toMethods,toMethodName);    if (toMethod == null) {      continue;    }    Object value=fromMethod.invoke(from,new Object[0]);    if (value == null) {      continue;    }    if (value instanceof Collection) {      @SuppressWarnings("rawtypes") Collection newValue=(Collection)value;      if (newValue.size() <= 0) {        continue;      }    }    toMethod.invoke(to,new Object[]{value});  }}  }
class C{  public JRakLibClient(Logger logger,String serverIP,int serverPort){  if (serverPort < 1 || serverPort > 65536) {    throw new IllegalArgumentException("Invalid port range.");  }  this.logger=logger;  this.serverEndpoint=new InetSocketAddress(serverIP,serverPort);  externalQueue=new LinkedList<>();  internalQueue=new LinkedList<>();  start();}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  sb.append(getClass().getSimpleName());  sb.append(" [");  sb.append("Hash = ").append(hashCode());  sb.append(", userId=").append(userId);  sb.append(", provider=").append(provider);  sb.append(", openId=").append(openId);  sb.append("]");  return sb.toString();}  }
class C{  public static void main(String args[]){  if (args.length < 2) {    System.out.println("Error: Must have 2 parameters, one is config filename, " + "the other is the local filename to upload");    return;  }  System.out.println("java.version=" + System.getProperty("java.version"));  String conf_filename=args[0];  String local_filename=args[1];  try {    ClientGlobal.init(conf_filename);    System.out.println("network_timeout=" + ClientGlobal.g_network_timeout + "ms");    System.out.println("charset=" + ClientGlobal.g_charset);    TrackerClient tracker=new TrackerClient();    TrackerServer trackerServer=tracker.getConnection();    StorageServer storageServer=null;    StorageClient1 client=new StorageClient1(trackerServer,storageServer);    NameValuePair[] metaList=new NameValuePair[1];    metaList[0]=new NameValuePair("fileName",local_filename);    String fileId=client.upload_file1(local_filename,null,metaList);    System.out.println("upload success. file id is: " + fileId);    int i=0;    while (i++ < 10) {      byte[] result=client.download_file1(fileId);      System.out.println(i + ", download result is: " + result.length);    }    trackerServer.close();  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  private void validateHostAddress(RegistryState state,SslTrustCertificateState sslTrust){  String hostname=UriUtilsExtended.extractHost(state.address);  X509Certificate certificate=null;  try {    certificate=KeyUtil.decodeCertificate(sslTrust.certificate);  } catch (  CertificateException e1) {    throw new IllegalArgumentException(String.format("Invalid certificate provided from host: %s",hostname));  }  try {    new DefaultHostnameVerifier().verify(hostname,certificate);  } catch (  SSLException e) {    String errorMessage=String.format("Registry hostname (%s) does not match certificates CN (%s).",hostname,sslTrust.commonName);    throw new IllegalArgumentException(errorMessage);  }}  }
class C{  public NelderMeadSimplex(final double[] steps){  this(steps,DEFAULT_RHO,DEFAULT_KHI,DEFAULT_GAMMA,DEFAULT_SIGMA);}  }
class C{  @Override public Filter createFilter(){  return new IsBetweenExtended();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Dispel_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200353,skillname);}  }
class C{  @Override public boolean contains(S2Cell cell){  return contains(cell.id());}  }
class C{  @RequestMapping(value="/{id}/download/extractBinary",method=GET) @ResponseBody public ResponseEntity<byte[]> extractBinaryFileDownload(@PathVariable Integer id){  Book book=bookRepository.findOne(id);  log.debug("File Download: {}",book.getExtractFileName());  return ResponseEntity.ok().header(HttpHeaders.CONTENT_TYPE,book.getExtractContentType()).header(HttpHeaders.CONTENT_DISPOSITION,"attachment; filename=\"" + book.getExtractFileName() + "\"").contentLength(book.getExtractSize()).body(book.getExtractBinary());}  }
class C{  public static long parseDateAsEpoch(String dateStr){  try {    return DateUtils.parseDate(dateStr).getTime();  } catch (  DateParseException e) {    return 0;  }}  }
class C{  private void blackmanHarris3sMin(int size){  int start=(windowFunction.length - size) / 2;  int stop=(windowFunction.length + size) / 2;  double scale=1.0 / (double)size / 0.42;  for (int i=0; start < stop; start++, i++)   windowFunction[i]=scale * (0.42323 - 0.49755 * Math.cos(twoPI * i / size) + 0.07922 * Math.cos(2 * twoPI * i / size));}  }
class C{  public StsdBox(RandomAccessFile fis,long pos){  this.fis=fis;  this.pos=pos;  findBoxAvcc();  findSPSandPPS();}  }
class C{  public void evalNotifications(DispatchContext dctx,Map<String,? extends Object> context,Map<String,Object> result){  for (  ModelNotification notify : this.notifications) {    notify.callNotify(dctx,this,context,result);  }}  }
class C{  public static Map<String,Object> testServiceLockWaitTimeoutRetryCantRecover(DispatchContext dctx,Map<String,? extends Object> context){  Delegator delegator=dctx.getDelegator();  LocalDispatcher dispatcher=dctx.getDispatcher();  Locale locale=(Locale)context.get("locale");  try {    GenericValue testingType=EntityQuery.use(delegator).from("TestingType").where("testingTypeId","SVCLWTRTCR").queryOne();    testingType.set("description","New description for SVCLWTRTCR from Lock Wait Timeout Lock GRABBER, this should be replaced by the one in the Waiter service.");    testingType.store();    Debug.logInfo("In testServiceLockWaitTimeoutRetryCantRecover (grabber) just updated SVCLWTRTCR, running sub-service in own transaction",module);    Map<String,Object> waiterResult=dispatcher.runSync("testServiceLockWaitTimeoutRetryCantRecoverWaiter",null,5,true);    if (ServiceUtil.isError(waiterResult)) {      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ServiceTestLockWaitTimeoutRetryCantRecoverWaiter",locale),null,null,waiterResult);    }    Debug.logInfo("In testServiceLockWaitTimeoutRetryCantRecover (grabber) successfully finished running sub-service in own transaction",module);  } catch (  GenericServiceException e) {    String errMsg="Error running deadlock test services: " + e.toString();    Debug.logError(e,errMsg,module);  }catch (  GenericEntityException e) {    Debug.logError(e,"Entity Engine Exception running lock wait timeout test main/Grabber thread: " + e.toString(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ServiceTestLockInterruptedExceptionRetryGrabber",UtilMisc.toMap("errorString",e.toString()),locale));  }  return ServiceUtil.returnSuccess();}  }
class C{  public static void pickImage(Activity activity){  pickImage(activity,REQUEST_PICK);}  }
class C{  public static float min(final float a,final float b){  if (a > b) {    return b;  }  if (a < b) {    return a;  }  if (a != b) {    return Float.NaN;  }  int bits=Float.floatToRawIntBits(a);  if (bits == 0x80000000) {    return a;  }  return b;}  }
class C{  @Override public WebDriver frame(int index){  frameSwitcher.putFramePathOnStack(index);  return targetLocator.frame(index);}  }
class C{  @SuppressWarnings("unchecked") public static <R>JoinObservable<R> when(Plan<R> p1,Plan<R> p2,Plan<R> p3,Plan<R> p4){  return from(JoinPatterns.when(p1,p2,p3,p4));}  }
class C{  private void registerDeviceStateReceiver(){  IntentFilter filter=new IntentFilter();  filter.addAction(Intent.ACTION_POWER_DISCONNECTED);  filter.addAction(ConnectivityManager.CONNECTIVITY_ACTION);  registerReceiver(mDeviceStateReceiver,filter);}  }
class C{  public void checkDayTimeChange(){  DayTime oldDayTime=this.dayTime;  calculateDayTime();  onHourChange();  if (oldDayTime != this.dayTime) {    onDayTimeChange();  }}  }
class C{  public void testMatricesValues1(){  SingularValueDecomposition svd=new SingularValueDecomposition(MatrixUtils.createRealMatrix(testSquare));  RealMatrix uRef=MatrixUtils.createRealMatrix(new double[][]{{3.0 / 5.0,-4.0 / 5.0},{4.0 / 5.0,3.0 / 5.0}});  RealMatrix sRef=MatrixUtils.createRealMatrix(new double[][]{{3.0,0.0},{0.0,1.0}});  RealMatrix vRef=MatrixUtils.createRealMatrix(new double[][]{{4.0 / 5.0,3.0 / 5.0},{3.0 / 5.0,-4.0 / 5.0}});  RealMatrix u=svd.getU();  Assert.assertEquals(0,u.subtract(uRef).getNorm(),normTolerance);  RealMatrix s=svd.getS();  Assert.assertEquals(0,s.subtract(sRef).getNorm(),normTolerance);  RealMatrix v=svd.getV();  Assert.assertEquals(0,v.subtract(vRef).getNorm(),normTolerance);  Assert.assertTrue(u == svd.getU());  Assert.assertTrue(s == svd.getS());  Assert.assertTrue(v == svd.getV());}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case SERVICE_NAME:    return isSetServiceName();case SEQUENCE_ID:  return isSetSequenceId();case CALL_TYPE:return isSetCallType();case TIMEOUT:return isSetTimeout();}throw new IllegalStateException();}  }
class C{  public String createManufacturingOrders(String facilityId,Date date,String workEffortName,String description,String routingId,String orderId,String orderItemSeqId,String shipGroupSeqId,String shipmentId,GenericValue userLogin) throws GenericEntityException {  String workEffortId=null;  if (root != null) {    if (UtilValidate.isEmpty(facilityId)) {      if (orderId != null) {        GenericValue order=EntityQuery.use(delegator).from("OrderHeader").where("orderId",orderId).queryOne();        String productStoreId=order.getString("productStoreId");        if (productStoreId != null) {          GenericValue productStore=ProductStoreWorker.getProductStore(productStoreId,delegator);          if (productStore != null) {            facilityId=productStore.getString("inventoryFacilityId");          }        }      }      if (facilityId == null && shipmentId != null) {        GenericValue shipment=EntityQuery.use(delegator).from("Shipment").where("shipmentId",shipmentId).queryOne();        facilityId=shipment.getString("originFacilityId");      }    }    Map<String,Object> tmpMap=root.createManufacturingOrder(facilityId,date,workEffortName,description,routingId,orderId,orderItemSeqId,shipGroupSeqId,shipmentId,true,true);    workEffortId=(String)tmpMap.get("productionRunId");  }  return workEffortId;}  }
class C{  public static String buildLinkHostPartAndEncode(HttpServletRequest request,HttpServletResponse response,String url,Boolean fullPath,Boolean secure,Boolean encode) throws WebAppConfigurationException, IOException {  boolean didFullStandard=false;  boolean didFullSecure=false;  StringBuilder newURL=new StringBuilder();  Boolean secureFullPathFlag=checkFullSecureOrStandard(request,response,false,fullPath,secure);  if (secureFullPathFlag != null) {    if (secureFullPathFlag) {      didFullSecure=true;    } else {      didFullStandard=true;    }    OfbizUrlBuilder builder;    try {      builder=OfbizUrlBuilder.from(request);    } catch (    GenericEntityException e) {      throw new IOException(e);    }    builder.buildHostPart(newURL,url,secureFullPathFlag);  }  newURL.append(url);  String res;  if (!Boolean.FALSE.equals(encode)) {    RequestHandler rh=RequestHandler.getRequestHandler(request.getServletContext());    res=rh.doLinkURLEncode(request,response,newURL,false,didFullStandard,didFullSecure);  } else {    res=newURL.toString();  }  return res;}  }
class C{  @SuppressWarnings({"unchecked"}) public void loadPlugins() throws Exception {  Path pluginsDir=stateDir.resolve("plugins");  if (Files.exists(pluginsDir)) {    if (Files.isDirectory(pluginsDir) == false) {      throw new IllegalStateException("\"" + pluginsDir.toAbsolutePath() + "\" is not a directory");    }    List<Path> files=new ArrayList<>();    try (DirectoryStream<Path> stream=Files.newDirectoryStream(pluginsDir)){      for (      Path sub : stream) {        files.add(sub);      }    }     for (    Path pluginDir : files) {      if (Files.isDirectory(pluginDir)) {        if (pluginDir.getFileName().toString().startsWith("extra")) {          continue;        }        List<Path> pluginFiles=new ArrayList<>();        try (DirectoryStream<Path> stream=Files.newDirectoryStream(pluginDir)){          for (          Path sub : stream) {            pluginFiles.add(sub);          }        }         Path propFile=pluginDir.resolve(PLUGIN_PROPERTIES_FILE);        if (Files.exists(propFile) == false) {          throw new IllegalStateException("plugin \"" + pluginDir + "\" is missing the "+ PLUGIN_PROPERTIES_FILE+ " file");        }        System.out.println("Start plugin " + pluginDir.toAbsolutePath());        Properties pluginProps=new Properties();        try (InputStream is=Files.newInputStream(propFile)){          pluginProps.load(is);        }         String pluginClassName=pluginProps.getProperty("class");        if (pluginClassName == null) {          throw new IllegalStateException("property file \"" + pluginDir + "\" does not have the \"class\" property");        }        List<URL> urls=new ArrayList<>();        for (        Path pluginFile : pluginFiles) {          if (pluginFile.toString().endsWith(".jar") || pluginFile.toString().endsWith(".zip")) {            urls.add(pluginFile.toUri().toURL());          }        }        Path pluginLibDir=pluginDir.resolve("lib");        if (Files.exists(pluginLibDir)) {          List<Path> pluginLibFiles=new ArrayList<>();          try (DirectoryStream<Path> stream=Files.newDirectoryStream(pluginLibDir)){            for (            Path sub : stream) {              pluginLibFiles.add(sub);            }          }           for (          Path pluginFile : pluginLibFiles) {            if (pluginFile.toString().endsWith(".jar")) {              urls.add(pluginFile.toUri().toURL());            }          }        }        ClassLoader loader=URLClassLoader.newInstance(urls.toArray(new URL[0]));        Class<? extends Plugin> pluginClass=(Class<? extends Plugin>)loader.loadClass(pluginClassName);        Constructor<? extends Plugin> ctor;        try {          ctor=pluginClass.getConstructor(GlobalState.class);        } catch (        NoSuchMethodException e1) {          throw new IllegalStateException("class \"" + pluginClassName + "\" for plugin \""+ pluginDir+ "\" does not have constructor that takes GlobalState");        }        Plugin plugin;        try {          plugin=ctor.newInstance(this);        } catch (        Exception e) {          throw new IllegalStateException("failed to instantiate class \"" + pluginClassName + "\" for plugin \""+ pluginDir,e);        }        if (plugins.containsKey(plugin.getName())) {          throw new IllegalStateException("plugin \"" + plugin.getName() + "\" appears more than once");        }        plugins.put(plugin.getName(),plugin);      }    }  }}  }
class C{  public void mouseReleased(){  mShowDecorations=true;  mSnapCandidates.clear();  mSimilarMargins.clear();}  }
class C{  @VisibleForTesting EnumSet<FailureReason> failureReasons(Context context){  EnumSet<FailureReason> reasons=EnumSet.noneOf(FailureReason.class);  reasons.addAll(mPrecacheLauncher.failureReasons());  if (!mDeviceState.isPowerConnected(context))   reasons.add(FailureReason.NO_POWER);  if (!mDeviceState.isWifiAvailable(context))   reasons.add(FailureReason.NO_WIFI);  if (timeSinceLastPrecacheMs(context) < WAIT_UNTIL_NEXT_PRECACHE_MS) {    reasons.add(FailureReason.NOT_ENOUGH_TIME_SINCE_LAST_PRECACHE);  }  if (PrecacheService.isPrecaching())   reasons.add(FailureReason.CURRENTLY_PRECACHING);  return reasons;}  }
class C{  public boolean isFileMarker(){  return type == Type.FILE_MARKER;}  }
class C{  public String eatId(){  if (!matchId())   throw new BadSyntaxException();  String s=tok.sval;  nextToken();  return s;}  }
class C{  public void updateInventories(GetInventoryResponse response){  for (  InventoryItemOuterClass.InventoryItem inventoryItem : response.getInventoryDelta().getInventoryItemsList()) {    InventoryItemDataOuterClass.InventoryItemData itemData=inventoryItem.getInventoryItemData();    if (itemData.getPokemonData().getPokemonId() == PokemonId.MISSINGNO && itemData.getPokemonData().getIsEgg()) {      hatchery.addEgg(new EggPokemon(itemData.getPokemonData()));    }    if (itemData.getPokemonData().getPokemonId() != PokemonId.MISSINGNO) {      pokebank.addPokemon(new Pokemon(api,inventoryItem.getInventoryItemData().getPokemonData()));    }    if (itemData.getItem().getItemId() != ItemId.UNRECOGNIZED && itemData.getItem().getItemId() != ItemId.ITEM_UNKNOWN) {      ItemData item=itemData.getItem();      itemBag.addItem(new Item(item));    }    if (itemData.getCandy().getFamilyId() != PokemonFamilyIdOuterClass.PokemonFamilyId.UNRECOGNIZED && itemData.getCandy().getFamilyId() != PokemonFamilyIdOuterClass.PokemonFamilyId.FAMILY_UNSET) {      candyjar.setCandy(itemData.getCandy().getFamilyId(),itemData.getCandy().getCandy());    }    if (itemData.hasPlayerStats()) {      api.getPlayerProfile().setStats(new Stats(itemData.getPlayerStats()));    }    if (itemData.hasPokedexEntry()) {      pokedex.add(itemData.getPokedexEntry());    }    if (itemData.hasEggIncubators()) {      for (      EggIncubatorOuterClass.EggIncubator incubator : itemData.getEggIncubators().getEggIncubatorList()) {        incubators.add(new EggIncubator(api,incubator));      }    }    lastInventoryUpdate=api.currentTimeMillis();  }}  }
class C{  public void addListener(@NotNull ConfigurationListener listener){  if (myListeners == null) {    myListeners=new ArrayList<>();  }  myListeners.add(listener);}  }
class C{  public static void restartApplicationWithIntent(Activity activity,Intent intent){  intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);  activity.finish();  activity.startActivity(intent);  killCurrentProcess();}  }
class C{  public void registerShield(int worldId,SiegeShield shield){  List<SiegeShield> mapShields=registeredShields.get(worldId);  if (mapShields == null) {    mapShields=new ArrayList<SiegeShield>();    registeredShields.put(worldId,mapShields);  }  mapShields.add(shield);}  }
class C{  private void saveAllHTMLToFolder(File destinationFolder){  if (!destinationFolder.exists()) {    destinationFolder.mkdirs();  }  String filename=INDEX_HTML;  Color backgroundColour=PrefManager.getInstance().getPrefData().getBackgroundColour();  ExportHTML.save(destinationFolder,filename,sldDataList,backgroundColour);}  }
class C{  @Override public synchronized void reset() throws IOException {  try {    in.reset();  } catch (  IOException e) {    handleIOException(e);  }}  }
class C{  public int batchSet(ObjectInfo objInfo,Map keyValues,Map failKeys,int expires) throws MyException {  ServerInfo server;  ProtoCommon.PkgHeader header;  byte[] bsPackage;  int offset;  Iterator it;  Map.Entry entry;  String key;  String value;  byte[] bsKey;  byte[] bsValue;  header=new ProtoCommon.PkgHeader();  header.key_hash_code=objInfo.getHashCode();  server=this.serverGroup.getServer(header.key_hash_code);  if (server == null) {    this.status=2;    return -1 * this.status;  }  try {    header.body_len=objInfo.getPackLength() + 4;    header.cmd=ProtoCommon.FDHT_PROTO_CMD_BATCH_SET;    header.keep_alive=(byte)(this.serverGroup.keep_alive ? 1 : 0);    header.timestamp=(int)(System.currentTimeMillis() / 1000);    header.expires=expires;    it=keyValues.entrySet().iterator();    while (it.hasNext()) {      entry=(Map.Entry)it.next();      key=(String)entry.getKey();      value=(String)entry.getValue();      header.body_len+=8 + key.getBytes(ClientGlobal.g_charset).length + value.getBytes(ClientGlobal.g_charset).length;    }    bsPackage=new byte[ProtoCommon.FDHT_PROTO_PKG_HEADER_SIZE + header.body_len];    ProtoCommon.packHeader(header,bsPackage);    offset=objInfo.pack(bsPackage,ProtoCommon.FDHT_PROTO_PKG_HEADER_SIZE);    ProtoCommon.int2buff(keyValues.size(),bsPackage,offset);    offset+=4;    it=keyValues.entrySet().iterator();    while (it.hasNext()) {      entry=(Map.Entry)it.next();      key=(String)entry.getKey();      value=(String)entry.getValue();      bsKey=key.getBytes(ClientGlobal.g_charset);      bsValue=value.getBytes(ClientGlobal.g_charset);      ProtoCommon.int2buff(bsKey.length,bsPackage,offset);      offset+=4;      System.arraycopy(bsKey,0,bsPackage,offset,bsKey.length);      offset+=bsKey.length;      ProtoCommon.int2buff(bsValue.length,bsPackage,offset);      offset+=4;      System.arraycopy(bsValue,0,bsPackage,offset,bsValue.length);      offset+=bsValue.length;    }    OutputStream out=server.sock.getOutputStream();    out.write(bsPackage);    ProtoCommon.PkgInfo pkgInfo=ProtoCommon.recvPackage(server.sock.getInputStream(),ProtoCommon.FDHT_PROTO_CMD_RESP,-1);    return this.parseBatchUpdate(keyValues.size(),server,pkgInfo,failKeys);  } catch (  IOException ex) {    System.err.println("server " + server.address.getAddress().getHostAddress() + ":"+ server.address.getPort()+ " IOException, error msg: "+ ex.getMessage());    this.serverGroup.forceClose(server);    this.status=5;    return -1 * this.status;  } finally {    this.serverGroup.closeServer(server);  }}  }
class C{  protected GroupsSetCallbackSettingsQuery groupId(int value){  return unsafeParam("group_id",value);}  }
class C{  @Override public void onHandleIntent(Intent intent){  assert Looper.myLooper() != Looper.getMainLooper();  if (!sEnableCommunication) {    Log.v(TAG,"Disabled.  Ignoring intent.");    return;  }  if (!mStateHasBeenRestored) {    restoreState();  }  if (ACTION_INITIALIZE.equals(intent.getAction())) {    handleInitialize();  } else   if (ACTION_REGISTER_REQUEST.equals(intent.getAction())) {    handleRegisterRequest(intent);  } else   if (ACTION_POST_REQUEST.equals(intent.getAction())) {    handlePostRequestIntent(intent);  } else {    Log.e(TAG,"Got unknown action from intent: " + intent.getAction());  }}  }
class C{  public WhereOperator(QueryOperator source,String columnName,QueryPlan.PredicateOperator operator,DataType value) throws QueryPlanException {  super(OperatorType.WHERE,source);  this.operator=operator;  this.value=value;  columnName=this.checkSchemaForColumn(source.getOutputSchema(),columnName);  this.columnIndex=this.getOutputSchema().getFieldNames().indexOf(columnName);}  }
class C{  public Entry(float val,int xIndex){  mVal=val;  mXIndex=xIndex;}  }
class C{  HessenbergTransformer(final RealMatrix matrix){  if (!matrix.isSquare()) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NON_SQUARE_MATRIX,matrix.getRowDimension(),matrix.getColumnDimension());  }  final int m=matrix.getRowDimension();  householderVectors=matrix.getData();  ort=new double[m];  cachedP=null;  cachedPt=null;  cachedH=null;  transform();}  }
class C{  public boolean removeUser(User user){  if (!isSelfAdmin()) {    return false;  }  Iterator<Pair<User,Role>> it=users.iterator();  while (it.hasNext()) {    Pair<User,Role> pair=it.next();    if (user.equals(pair.getFirst())) {      it.remove();      skype.removeUserFromGroup(user,this);      return true;    }  }  return true;}  }
class C{  public WallGetQuery(VkApiClient client){  super(client,"wall.get",GetResponse.class);}  }
class C{  public boolean enabled(){  return soot.PhaseOptions.getBoolean(options,"enabled");}  }
class C{  void sLock(Object obj,long txNum){  Object anchor=getAnchor(obj);  txWaitMap.put(txNum,anchor);synchronized (anchor) {    Lockers lks=prepareLockers(obj);    if (hasSLock(lks,txNum))     return;    try {      long timestamp=System.currentTimeMillis();      while (!sLockable(lks,txNum) && !waitingTooLong(timestamp)) {        avoidDeadlock(lks,txNum,S_LOCK);        lks.requestSet.add(txNum);        anchor.wait(MAX_TIME);        lks.requestSet.remove(txNum);      }      if (!sLockable(lks,txNum))       throw new LockAbortException();      lks.sLockers.add(txNum);      getObjectSet(txNum).add(obj);    } catch (    InterruptedException e) {      throw new LockAbortException("abort tx." + txNum + " by interrupted");    }  }  txWaitMap.remove(txNum);}  }
class C{  public JobManagerException(String msg,Throwable nested){  super(msg,nested);}  }
class C{  public static void triggerForResourcePool(Service sender,String resourcePoolLink){  EpzComputeEnumerationTaskState task=new EpzComputeEnumerationTaskState();  task.resourcePoolLink=resourcePoolLink;  task.documentSelfLink=extractRpId(task);  Operation.createPost(sender.getHost(),EpzComputeEnumerationTaskService.FACTORY_LINK).addPragmaDirective(Operation.PRAGMA_DIRECTIVE_FORCE_INDEX_UPDATE).setBody(task).setCompletion(null).sendWith(sender);}  }
class C{  @Override public boolean hasExpired(final Long aliveTimerId){  aliveTimerCache.acquireReadLockOnKey(aliveTimerId);  try {    AliveTimer aliveTimer=aliveTimerCache.get(aliveTimerId);    return (System.currentTimeMillis() - aliveTimer.getLastUpdate() > aliveTimer.getAliveInterval() + aliveTimer.getAliveInterval() / 3);  }  finally {    aliveTimerCache.releaseReadLockOnKey(aliveTimerId);  }}  }
class C{  public static void close(){  out.close();}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public GenericClassDeclSubstituted fullCopy(){  GenericClassDeclSubstituted tree=(GenericClassDeclSubstituted)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {switch (i) {case 6:        tree.children[i]=new List();      continue;  }  ASTNode child=(ASTNode)children[i];  if (child != null) {    child=child.fullCopy();    tree.setChild(child,i);  }}}return tree;}  }
class C{  public Message receive() throws JMSException {  return receive(Message.DEFAULT_TIME_TO_LIVE);}  }
class C{  public EncodingException(Throwable cause){  super(cause);}  }
class C{  public Object jjtAccept(MithraQLVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  @Override public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {  boolean inExtension=inExtensionNamespace();  super.startElement(namespaceURI,localName,qName,atts);  int entryType=-1;  Vector entryArgs=new Vector();  if (namespaceURI != null && extendedNamespaceName.equals(namespaceURI) && !inExtension) {    if (atts.getValue("xml:base") != null) {      String baseURI=atts.getValue("xml:base");      entryType=Catalog.BASE;      entryArgs.add(baseURI);      baseURIStack.push(baseURI);      debug.message(4,"xml:base",baseURI);      try {        CatalogEntry ce=new CatalogEntry(entryType,entryArgs);        catalog.addEntry(ce);      } catch (      CatalogException cex) {        if (cex.getExceptionType() == CatalogException.INVALID_ENTRY_TYPE) {          debug.message(1,"Invalid catalog entry type",localName);        } else         if (cex.getExceptionType() == CatalogException.INVALID_ENTRY) {          debug.message(1,"Invalid catalog entry (base)",localName);        }      }      entryType=-1;      entryArgs=new Vector();    } else {      baseURIStack.push(baseURIStack.peek());    }    if (localName.equals("uriSuffix")) {      if (checkAttributes(atts,"suffix","uri")) {        entryType=Resolver.URISUFFIX;        entryArgs.add(atts.getValue("suffix"));        entryArgs.add(atts.getValue("uri"));        debug.message(4,"uriSuffix",atts.getValue("suffix"),atts.getValue("uri"));      }    } else     if (localName.equals("systemSuffix")) {      if (checkAttributes(atts,"suffix","uri")) {        entryType=Resolver.SYSTEMSUFFIX;        entryArgs.add(atts.getValue("suffix"));        entryArgs.add(atts.getValue("uri"));        debug.message(4,"systemSuffix",atts.getValue("suffix"),atts.getValue("uri"));      }    } else {      debug.message(1,"Invalid catalog entry type",localName);    }    if (entryType >= 0) {      try {        CatalogEntry ce=new CatalogEntry(entryType,entryArgs);        catalog.addEntry(ce);      } catch (      CatalogException cex) {        if (cex.getExceptionType() == CatalogException.INVALID_ENTRY_TYPE) {          debug.message(1,"Invalid catalog entry type",localName);        } else         if (cex.getExceptionType() == CatalogException.INVALID_ENTRY) {          debug.message(1,"Invalid catalog entry",localName);        }      }    }  }}  }
class C{  public JSearchPanel createSearchPanel(boolean monitorKeystrokes){  JSearchPanel jsp=new JSearchPanel(m_set,m_field,monitorKeystrokes);  if (m_lock != null) {    jsp.setLock(m_lock);  }  return jsp;}  }
class C{  public TrustSource add(File trustedCAPemFile){  if (trustedCAPemFile == null) {    throw new IllegalArgumentException("Trusted CA file cannot be null");  }  String pemFileContents;  try {    pemFileContents=Files.toString(trustedCAPemFile,Charset.forName("UTF-8"));  } catch (  IOException e) {    throw new UncheckedIOException("Unable to read file containing PEM-encoded trusted CAs: " + trustedCAPemFile.getAbsolutePath(),e);  }  return add(pemFileContents);}  }
class C{  public boolean canContainKey(Object key){  return (key instanceof RegistrarLease && registrarID.equals(((RegistrarLease)key).getRegistrarID()));}  }
class C{  public AccountSaveProfileInfoQuery(VkApiClient client,UserActor actor){  super(client,"account.saveProfileInfo",SaveProfileInfoResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  public void addBodyDecl(BodyDecl node){  List<BodyDecl> list=(parent == null || state == null) ? getBodyDeclListNoTransform() : getBodyDeclList();  list.addChild(node);}  }
class C{  public void addAttribute(String uri,String localName,String qName,String type,String value){  ensureCapacity(length + 1);  data[length * 5]=uri;  data[length * 5 + 1]=localName;  data[length * 5 + 2]=qName;  data[length * 5 + 3]=type;  data[length * 5 + 4]=value;  length++;}  }
class C{  private boolean useIsSameNode(Node node){  if (node instanceof NodeImpl) {    return false;  }  Document doc=node.getNodeType() == Node.DOCUMENT_NODE ? (Document)node : node.getOwnerDocument();  return (doc != null && doc.getImplementation().hasFeature("Core","3.0"));}  }
class C{  public void addTargetLocation(String name){  if (name != null) {    this.targetLocationSet.add(name);  }}  }
class C{  protected void drawYAxis(Graphics2D gc,Dimension size){  SelectionGraphics<String[]> sgc=(gc instanceof SelectionGraphics ? (SelectionGraphics<String[]>)gc : null);  gc.setFont(getFont(ChartViewer.FontKeys.XAxisFont.toString()));  boolean doDraw=(size == null);  Rectangle bbox=null;  int x0=leftMargin;  int x1=getWidth() - rightMargin;  int y0=getHeight() - bottomMargin;  int y1=topMargin;  if (isTranspose()) {    if (scalingType == ChartViewer.ScalingType.ZSCORE && viewer.getClassesList().isDoClustering())     y1+=topTreeSpace;    if (x0 >= x1)     return;    final int numberOfSeries=(seriesNames == null ? 0 : seriesNames.length);    if (numberOfSeries > 0) {      int longest=0;      for (      String series : seriesNames) {        String label=seriesLabelGetter.getLabel(series);        longest=Math.max(longest,Basic.getStringSize(gc,label,gc.getFont()).getSize().width);      }      int right=Math.max(leftMargin,longest + 5);      if (doDraw)       gc.setColor(getFontColor(ChartViewer.FontKeys.YAxisFont.toString(),Color.BLACK));      int numberOfDataSets=getChartData().getNumberOfSeries();      double yStep=(y0 - y1) / (numberOfDataSets);      int d=numberOfSeries - 1;      for (      String series : seriesNames) {        String label=seriesLabelGetter.getLabel(series);        Dimension labelSize=Basic.getStringSize(gc,label,gc.getFont()).getSize();        int x=right - labelSize.width - 4;        int y=(int)Math.round(y0 - (d + 0.5) * yStep);        if (doDraw) {          if (getChartData().getChartSelection().isSelectedSeries(series)) {            gc.setColor(ProgramProperties.SELECTION_COLOR);            fillAndDrawRect(gc,x,y,labelSize.width,labelSize.height,0,ProgramProperties.SELECTION_COLOR,ProgramProperties.SELECTION_COLOR_DARKER);          }          gc.setColor(getFontColor(ChartViewer.FontKeys.XAxisFont.toString(),Color.DARK_GRAY));          gc.drawString(label,x,y);        } else {          Rectangle rect=new Rectangle(x,y,labelSize.width,labelSize.height);          if (bbox == null)           bbox=rect; else           bbox.add(rect);        }        if (sgc != null) {          sgc.setCurrentItem(new String[]{series,null});          drawRect(gc,x,y,labelSize.width,labelSize.height,0);          sgc.clearCurrentItem();        }        d--;      }    }  } else {    if (scalingType == ChartViewer.ScalingType.ZSCORE && viewer.getSeriesList().isDoClustering())     y1+=topTreeSpace;    final int numberOfClasses=(classNames == null ? 0 : classNames.length);    if (numberOfClasses > 0) {      int longest=0;      for (      String className : classNames) {        longest=Math.max(longest,Basic.getStringSize(gc,className,gc.getFont()).getSize().width);      }      int right=Math.max(leftMargin,longest + 5);      if (doDraw)       gc.setColor(getFontColor(ChartViewer.FontKeys.YAxisFont.toString(),Color.BLACK));      double yStep=(y0 - y1) / (double)numberOfClasses;      int c=numberOfClasses - 1;      for (      String className : classNames) {        Dimension labelSize=Basic.getStringSize(gc,className,gc.getFont()).getSize();        int x=right - labelSize.width - 4;        int y=(int)Math.round(y0 - (c + 0.5) * yStep);        if (doDraw) {          if (getChartData().getChartSelection().isSelectedClass(className)) {            gc.setColor(ProgramProperties.SELECTION_COLOR);            fillAndDrawRect(gc,x,y,labelSize.width,labelSize.height,0,ProgramProperties.SELECTION_COLOR,ProgramProperties.SELECTION_COLOR_DARKER);          }          gc.setColor(getFontColor(ChartViewer.FontKeys.XAxisFont.toString(),Color.DARK_GRAY));          gc.drawString(className,x,y);        } else {          Rectangle rect=new Rectangle(x,y,labelSize.width,labelSize.height);          if (bbox == null)           bbox=rect; else           bbox.add(rect);        }        c--;        if (sgc != null) {          sgc.setCurrentItem(new String[]{null,className});          drawRect(gc,x,y,labelSize.width,labelSize.height,0);          sgc.clearCurrentItem();        }      }    }  }  if (size != null && bbox != null) {    size.setSize(bbox.width + 3,bbox.height);  }}  }
class C{  public JSONArray optJSONArray(int index){  Object o=opt(index);  return o instanceof JSONArray ? (JSONArray)o : null;}  }
class C{  public AudioInputStream(TargetDataLine line){  TargetDataLineInputStream tstream=new TargetDataLineInputStream(line);  format=line.getFormat();  frameLength=AudioSystem.NOT_SPECIFIED;  frameSize=format.getFrameSize();  if (frameSize == AudioSystem.NOT_SPECIFIED || frameSize <= 0) {    frameSize=1;  }  this.stream=tstream;  framePos=0;  markpos=0;}  }
class C{  @Override protected boolean readIntoBuffer(int minLength){  if (bufferSpaceLeft() < minLength) {    increaseBufferSize(minLength + currentlyInBuffer());  } else   if (buf.length - writePos < minLength) {    compact();  }  int readSum=0;  while (readSum < minLength && hasMoreData()) {    prepareBlock();    int blockSize=getBlockSize();    if (buf.length < writePos + blockSize) {      increaseBufferSize(writePos + blockSize);    }    int read=readBlock(buf,writePos);    if (read == 0) {      break;    }    writePos+=read;    readSum+=read;  }  if (dataProcessor != null) {    dataProcessor.applyInline(buf,writePos - readSum,readSum);  }  return readSum >= minLength;}  }
class C{  public final void unloadAll(){  objects.invalidateAll();}  }
class C{  public JSONArray put(int index,boolean value) throws JSONException {  put(index,value ? Boolean.TRUE : Boolean.FALSE);  return this;}  }
class C{  private static float interpolate(float a,float b,float t){  return a + (b - a) * t;}  }
class C{  @Override public synchronized Throwable initCause(Throwable throwable){  if (fException != this) {    throw new IllegalStateException();  }  if (throwable == this) {    throw new IllegalArgumentException();  }  fException=(Exception)throwable;  return this;}  }
class C{  public BooleanColumn(int nrows){  this(nrows,nrows,false);}  }
class C{  @deprecated public Object quoteLiteral(String string){  return this.tokenizer.quoteLiteral(string);}  }
class C{  TestException(){  super();}  }
class C{  private JTree buildJTree(HelpNode root){  if (root == null)   return new JTree();  MutableTreeNode rn=new DefaultMutableTreeNode(root);  DefaultTreeModel model=new DefaultTreeModel(rn);  JTree tree=new JTree(model);  for (int i=0; i < root.nodes.size(); i++) {    addHelpNodesToTree(root.nodes.get(i),model,rn);  }  this.expandAllNodes(tree);  return tree;}  }
class C{  private static float spacing(MotionEvent event){  float x=event.getX(0) - event.getX(1);  float y=event.getY(0) - event.getY(1);  return (float)Math.sqrt(x * x + y * y);}  }
class C{  public static int hash(double[] value){  return Arrays.hashCode(value);}  }
class C{  public void skipNode(Object node){  if (!super.containsNode(node))   return;  Object[] preds=getPredsOf(node).toArray();  Object[] succs=getSuccsOf(node).toArray();  for (  Object element : preds) {    for (    Object element0 : succs) {      if (element != element0)       super.addEdge(element,element0);    }  }  for (  Object element : preds) {    super.removeEdge(element,node);  }  for (  Object element : succs) {    super.removeEdge(node,element);  }  super.removeNode(node);}  }
class C{  @Override public void unparsedEntityDecl(String name,XMLResourceIdentifier identifier,String notation,Augmentations augmentations) throws XNIException {}  }
class C{  @RequestMapping(value="/metrics",method=RequestMethod.PUT,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<Metric> updateMetric(@RequestBody Metric metric) throws URISyntaxException {  log.debug("REST request to update Metric : {}",metric);  if (metric.getMetricId() == null) {    return createMetric(metric);  }  Metric result=metricRepository.save(metric);  return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert("metric",metric.getMetricId().toString())).body(result);}  }
class C{  protected boolean checkAttributes(Element currentRulePart,Element token){  NamedNodeMap attNodes=currentRulePart.getAttributes();  if (token == null)   return false;  for (int z=0; z < attNodes.getLength(); z++) {    Node el=attNodes.item(z);    String currentAtt=el.getNodeName();    String currentVal=el.getNodeValue();    if (!token.hasAttribute(currentAtt)) {      if (currentVal.equals("!")) {        return true;      }      return false;    }    if (currentVal.equals("!")) {      return false;    }    if (currentVal.equals("")) {      return true;    }    if (!currentVal.startsWith("INLIST") && !currentVal.startsWith("INFSTLIST") && !currentVal.startsWith("!INLIST")&& !currentVal.startsWith("!INFSTLIST")) {      if (!currentVal.startsWith("!")) {        if (!token.getAttribute(currentAtt).equals(currentVal)) {          return false;        }      } else {        currentVal=currentVal.substring(1,currentVal.length());        if (token.getAttribute(currentAtt).equals(currentVal)) {          return false;        }      }    } else {      return checkList(currentVal,token.getAttribute(currentAtt));    }  }  return true;}  }
class C{  public SimpleFileFilter(String ext,String desc){  addExtension(ext);  this.desc=desc;}  }
class C{  public void schedule(String serviceName,Map<String,? extends Object> context,long startTime,int frequency,int interval,long endTime) throws JobManagerException {  schedule(serviceName,context,startTime,frequency,interval,-1,endTime);}  }
class C{  public final static byte[] decode(String str){  int sLen=str != null ? str.length() : 0;  if (sLen == 0)   return new byte[0];  int sepCnt=0;  for (int i=0; i < sLen; i++)   if (IA[str.charAt(i)] < 0)   sepCnt++;  if ((sLen - sepCnt) % 4 != 0)   return null;  int pad=0;  for (int i=sLen; i > 1 && IA[str.charAt(--i)] <= 0; )   if (str.charAt(i) == '=')   pad++;  int len=((sLen - sepCnt) * 6 >> 3) - pad;  byte[] dArr=new byte[len];  for (int s=0, d=0; d < len; ) {    int i=0;    for (int j=0; j < 4; j++) {      int c=IA[str.charAt(s++)];      if (c >= 0)       i|=c << (18 - j * 6); else       j--;    }    dArr[d++]=(byte)(i >> 16);    if (d < len) {      dArr[d++]=(byte)(i >> 8);      if (d < len)       dArr[d++]=(byte)i;    }  }  return dArr;}  }
class C{  public SecureCheckTokenQuery(VkApiClient client,ServiceActor actor){  super(client,"secure.checkToken",TokenChecked.class);  accessToken(actor.getAccessToken());  clientSecret(actor.getClientSecret());}  }
class C{  public boolean isSelected(){  ClusterViewer viewer=getViewer();  return viewer.isShowLabels();}  }
class C{  public void push(E e){  checkNotNull(e);  Node<E> node=new Node<E>(e);  for (; ; ) {    node.next=top.get();    if ((top.get() == node.next) && top.compareAndSet(node.next,node)) {      return;    }    if (tryTransfer(e)) {      return;    }  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SummonServant_A_TO_ME(String skillcaster,String value0,String skillname){  return new SM_SYSTEM_MESSAGE(1200731,skillcaster,value0,skillname);}  }
class C{  public String print(String format,Object... args){  return String.format(format,args);}  }
class C{  public void addServiceItems(ServiceMatches matches){  if (matches == null || matches.items == null) {    return;  }  for (  ServiceItem item : matches.items) {    serviceItems.put(item.serviceID,item);  }}  }
class C{  public boolean taxApplies(){  boolean taxApplies=false;  for (  ShoppingCartItem item : this) {    if (item.taxApplies()) {      taxApplies=true;      break;    }  }  return taxApplies;}  }
class C{  public Channel intercept(Channel channel){  return ClientInterceptors.intercept(channel,this);}  }
class C{  public void addAndRemoveEventListenerTypedNullType() throws Exception {  TestActivitiEventListener newListener=new TestActivitiEventListener();  dispatcher.addEventListener(newListener,(ActivitiEventType)null);  ActivitiEntityEventImpl event1=new ActivitiEntityEventImpl(processEngineConfiguration.getTaskEntityManager().create(),ActivitiEventType.ENTITY_CREATED);  ActivitiEntityEventImpl event2=new ActivitiEntityEventImpl(processEngineConfiguration.getTaskEntityManager().create(),ActivitiEventType.ENTITY_DELETED);  dispatcher.dispatchEvent(event1);  dispatcher.dispatchEvent(event2);  assertTrue(newListener.getEventsReceived().isEmpty());}  }
class C{  @deprecated protected RbnfLenientScanner createScanner(ULocale locale,String extras){  RuleBasedCollator collator=null;  try {    collator=(RuleBasedCollator)Collator.getInstance(locale.toLocale());    if (extras != null) {      String rules=collator.getRules() + extras;      collator=new RuleBasedCollator(rules);    }    collator.setDecomposition(17);  } catch (  Exception e) {    e.printStackTrace();    System.out.println("++++");    collator=null;  }  return new RbnfLenientScannerImpl(collator,null);}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  public int length(){  return Histogram.length() + Graph.length();}  }
class C{  public static float scaleToFitTargetSize(int[] dimensions,int targetWidth,int targetHeight){  if (dimensions.length < 2 || dimensions[0] <= 0 || dimensions[1] <= 0) {    throw new IllegalArgumentException("Expected dimensions to have length >= 2 && dimensions[0] > 0 && " + "dimensions[1] > 0");  }  float scale=Math.max((float)targetWidth / dimensions[0],(float)targetHeight / dimensions[1]);  dimensions[0]*=scale;  dimensions[1]*=scale;  return scale;}  }
class C{  public void init(ForceSimulator fsim){  clear();  float x1=Float.MAX_VALUE, y1=Float.MAX_VALUE;  float x2=Float.MIN_VALUE, y2=Float.MIN_VALUE;  Iterator itemIter=fsim.getItems();  while (itemIter.hasNext()) {    ForceItem item=(ForceItem)itemIter.next();    float x=item.location[0];    float y=item.location[1];    if (x < x1)     x1=x;    if (y < y1)     y1=y;    if (x > x2)     x2=x;    if (y > y2)     y2=y;  }  float dx=x2 - x1, dy=y2 - y1;  if (dx > dy) {    y2=y1 + dx;  } else {    x2=x1 + dy;  }  setBounds(x1,y1,x2,y2);  itemIter=fsim.getItems();  while (itemIter.hasNext()) {    ForceItem item=(ForceItem)itemIter.next();    insert(item);  }  calcMass(root);}  }
class C{  public ImageFactory(int maxImageWidth,int maxImageHeight){  setMaxImageDimensions(maxImageWidth,maxImageHeight);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_ITEM_SEAL_START_CANCEL(String value0){  return new SM_SYSTEM_MESSAGE(1400798,value0);}  }
class C{  public MersenneTwister(int[] seed){  mt=new int[N];  setSeed(seed);}  }
class C{  public void show(PeekViewActivity activity,MotionEvent motionEvent){  PeekView peek;  if (layout == null) {    peek=new PeekView(activity,options,layoutRes,callbacks);  } else {    peek=new PeekView(activity,options,layout,callbacks);  }  peek.setOffsetByMotionEvent(motionEvent);  activity.showPeek(peek);}  }
class C{  @SuppressWarnings("WeakerAccess") public boolean isFooter(int position){  return footer != null && position == getFooterPosition();}  }
class C{  protected String filterDataString(String sStr,NamedDocumentNGramGraph cCat){  return sStr;}  }
class C{  public static final void reportDOMError(DOMErrorHandler errorHandler,DOMErrorImpl error,DOMLocatorImpl locator,String message,short severity,String type){  if (errorHandler != null) {    error.reset();    error.fMessage=message;    error.fSeverity=severity;    error.fLocator=locator;    error.fType=type;    error.fRelatedData=locator.fRelatedNode;    if (!errorHandler.handleError(error))     throw abort;  }  if (severity == DOMError.SEVERITY_FATAL_ERROR)   throw abort;}  }
class C{  @Override protected void normalizeWhitespace(XMLString value){  int end=value.offset + value.length;  for (int i=value.offset; i < end; ++i) {    int c=value.ch[i];    if (XMLChar.isSpace(c)) {      value.ch[i]=' ';    }  }}  }
class C{  public TypeVariableBV typeVariable(Type type){  return typeVariable(hierarchy.typeNode(type));}  }
class C{  @Override public Filter createFilter(List<Expression> parameterList){  TOverlapsImpl filter=null;  if ((parameterList == null) || (parameterList.size() != 2)) {    filter=new TOverlapsExtended();  } else {    filter=new TOverlapsExtended(parameterList.get(0),parameterList.get(1));  }  return filter;}  }
class C{  public PageLabel(String label,int s,int n,int seq,boolean iscur){  this.label=label;  this.s=s;  this.n=n;  this.curr=iscur;  this.seq=seq;}  }
class C{  private boolean isArcStart(final BSPTree<Sphere1D> node){  if ((Boolean)leafBefore(node).getAttribute()) {    return false;  }  if (!(Boolean)leafAfter(node).getAttribute()) {    return false;  }  return true;}  }
class C{  public static Object find(String[] urls) throws FinderException {  return spaceFinder.findService(urls);}  }
class C{  public void onStart(){  if (mInitializationComplete) {    startNowAndProcessPendingItems();  } else {    mOnStartPending=true;  }}  }
class C{  @Override @Timed public Assignment assignUser(Assignment assignment,Experiment experiment,Date date){  Assignment new_assignment=null;  if (assignUserToOld) {    new_assignment=assignUserToOld(assignment,date);  }  if (assignUserToNew) {    new_assignment=assignUserToLookUp(assignment,date);  }  boolean countUp=true;  assignmentsCountExecutor.execute(new AssignmentCountEnvelope(assignmentsRepository,experimentRepository,dbRepository,experiment,assignment,countUp,eventLog,date,assignUserToExport,assignBucketCount));  indexUserToExperiment(assignment);  indexUserToBucket(assignment);  indexExperimentsToUser(assignment);  return new_assignment;}  }
class C{  public void init$Children(){  children=new ASTNode[1];}  }
class C{  public static void skipMethods(@Nonnull DexReader reader,int count){  for (int i=0; i < count; i++) {    reader.skipUleb128();    reader.skipUleb128();    reader.skipUleb128();  }}  }
class C{  @Override public void onPaint(ViewTransform transform,Graphics2D g){  int x=transform.getSwingX(mAnchor.getDrawX());  int y=transform.getSwingY(mAnchor.getDrawY());  double progress=getProgress();  int alpha=255 - getPulsatingAlpha(progress);  int anchorSize=(int)SceneDraw.getAnchorSize(transform.getScale());  int radius=anchorSize + 4;  int strokeWidth=4;  boolean isNewConnection=mAnchor.getAnchor().getTarget() != null && mOriginalTarget != mAnchor.getAnchor().getTarget();  Color frame=new Color(mFrame.getRed(),mFrame.getGreen(),mFrame.getBlue(),alpha);  Color highlight=new Color(mColor.getRed(),mColor.getGreen(),mColor.getBlue(),alpha);  ConstraintWidget widget=mAnchor.getOwner();  int l=transform.getSwingX(widget.getDrawX());  int t=transform.getSwingY(widget.getDrawY());  int w=transform.getSwingDimension(widget.getDrawWidth());  if (mIsBaseline) {    int extra=radius - 3;    g.setColor(highlight);    g.setStroke(new BasicStroke(strokeWidth - 1));    int handleWidth=mAnchor.getBaselineHandleWidth(transform);    int padding=(w - handleWidth) / 2;    g.drawRoundRect(l + padding,t + transform.getSwingDimension(widget.getBaselineDistance()) - extra / 2,handleWidth + 1,extra,radius,radius);  } else {    if (isNewConnection) {      radius=anchorSize + 3;      strokeWidth=3;    }    Ellipse2D.Float circle=new Ellipse2D.Float(x - radius,y - radius,radius * 2,radius * 2);    g.setColor(frame);    g.setStroke(new BasicStroke(strokeWidth));    g.draw(circle);    if (isNewConnection) {      g.setColor(mColorSet.getBackground());      g.fill(circle);      g.setColor(mColorSet.getAnchorConnectionCircle());      radius-=4;      Ellipse2D.Float innerCircle=new Ellipse2D.Float(x - radius,y - radius,radius * 2,radius * 2);      g.fill(innerCircle);      g.draw(innerCircle);    } else {      circle=new Ellipse2D.Float(x - radius,y - radius,radius * 2,radius * 2);      g.setColor(highlight);    }    g.setStroke(new BasicStroke(strokeWidth - 1));    g.draw(circle);  }  if (!mColorSet.useTooltips()) {    return;  }  boolean showTooltip=mShowTooltip;  boolean newConnection=mAnchor.getAnchor().getTarget() != mTargetAnchor;  showTooltip|=newConnection;  if (showTooltip && (System.currentTimeMillis() - mStartTime > WidgetDraw.TOOLTIP_DELAY)) {    WidgetDraw.drawTooltip(g,mColorSet,getText(),x,y,true);  }}  }
class C{  private static int nonEmptyLists(List<?>... lists){  int nonEmpty=0;  for (  List<?> list : lists) {    if (list != null && list.size() > 0) {      ++nonEmpty;    }  }  return nonEmpty;}  }
class C{  public long generateNewPingId(){  PreferenceStore prefs=getPreferenceStore();  Random rnd=new Random();  long id=rnd.nextLong();synchronized (DdmsPreferenceStore.class) {    prefs.setValue(PING_ID,id);    try {      prefs.save();    } catch (    IOException e) {    }  }  return id;}  }
class C{  public static DexlibAbstractInstruction fromOpcode(Opcode op,Instruction instruction,int codeAddress){switch (op) {case SPARSE_SWITCH_PAYLOAD:case PACKED_SWITCH_PAYLOAD:case ARRAY_PAYLOAD:case NOP:    return new NopInstruction(instruction,codeAddress);case MOVE:case MOVE_FROM16:case MOVE_16:case MOVE_OBJECT:case MOVE_OBJECT_FROM16:case MOVE_OBJECT_16:case MOVE_WIDE:case MOVE_WIDE_FROM16:case MOVE_WIDE_16:  return new MoveInstruction(instruction,codeAddress);case MOVE_RESULT:case MOVE_RESULT_OBJECT:case MOVE_RESULT_WIDE:return new MoveResultInstruction(instruction,codeAddress);case MOVE_EXCEPTION:return new MoveExceptionInstruction(instruction,codeAddress);case RETURN_VOID:return new ReturnVoidInstruction(instruction,codeAddress);case RETURN:case RETURN_OBJECT:case RETURN_WIDE:return new ReturnInstruction(instruction,codeAddress);case CONST:case CONST_4:case CONST_16:case CONST_HIGH16:case CONST_WIDE:case CONST_WIDE_16:case CONST_WIDE_32:case CONST_WIDE_HIGH16:return new ConstInstruction(instruction,codeAddress);case CONST_STRING:case CONST_STRING_JUMBO:return new ConstStringInstruction(instruction,codeAddress);case CONST_CLASS:return new ConstClassInstruction(instruction,codeAddress);case MONITOR_ENTER:return new MonitorEnterInstruction(instruction,codeAddress);case MONITOR_EXIT:return new MonitorExitInstruction(instruction,codeAddress);case CHECK_CAST:return new CheckCastInstruction(instruction,codeAddress);case INSTANCE_OF:return new InstanceOfInstruction(instruction,codeAddress);case ARRAY_LENGTH:return new ArrayLengthInstruction(instruction,codeAddress);case NEW_INSTANCE:return new NewInstanceInstruction(instruction,codeAddress);case NEW_ARRAY:return new NewArrayInstruction(instruction,codeAddress);case FILLED_NEW_ARRAY:return new FilledNewArrayInstruction(instruction,codeAddress);case FILLED_NEW_ARRAY_RANGE:return new FilledNewArrayRangeInstruction(instruction,codeAddress);case FILL_ARRAY_DATA:return new FillArrayDataInstruction(instruction,codeAddress);case THROW:return new ThrowInstruction(instruction,codeAddress);case GOTO:case GOTO_16:case GOTO_32:return new GotoInstruction(instruction,codeAddress);case PACKED_SWITCH:return new PackedSwitchInstruction(instruction,codeAddress);case SPARSE_SWITCH:return new SparseSwitchInstruction(instruction,codeAddress);case CMPL_FLOAT:case CMPG_FLOAT:case CMPL_DOUBLE:case CMPG_DOUBLE:case CMP_LONG:return new CmpInstruction(instruction,codeAddress);case IF_EQ:case IF_NE:case IF_LT:case IF_GE:case IF_GT:case IF_LE:return new IfTestInstruction(instruction,codeAddress);case IF_EQZ:case IF_NEZ:case IF_LTZ:case IF_GEZ:case IF_GTZ:case IF_LEZ:return new IfTestzInstruction(instruction,codeAddress);case AGET:case AGET_OBJECT:case AGET_BOOLEAN:case AGET_BYTE:case AGET_CHAR:case AGET_SHORT:case AGET_WIDE:return new AgetInstruction(instruction,codeAddress);case APUT:case APUT_OBJECT:case APUT_BOOLEAN:case APUT_BYTE:case APUT_CHAR:case APUT_SHORT:case APUT_WIDE:return new AputInstruction(instruction,codeAddress);case IGET:case IGET_OBJECT:case IGET_BOOLEAN:case IGET_BYTE:case IGET_CHAR:case IGET_SHORT:case IGET_WIDE:return new IgetInstruction(instruction,codeAddress);case IPUT:case IPUT_OBJECT:case IPUT_BOOLEAN:case IPUT_BYTE:case IPUT_CHAR:case IPUT_SHORT:case IPUT_WIDE:return new IputInstruction(instruction,codeAddress);case SGET:case SGET_OBJECT:case SGET_BOOLEAN:case SGET_BYTE:case SGET_CHAR:case SGET_SHORT:case SGET_WIDE:return new SgetInstruction(instruction,codeAddress);case SPUT:case SPUT_OBJECT:case SPUT_BOOLEAN:case SPUT_BYTE:case SPUT_CHAR:case SPUT_SHORT:case SPUT_WIDE:return new SputInstruction(instruction,codeAddress);case INVOKE_VIRTUAL:case INVOKE_VIRTUAL_RANGE:return new InvokeVirtualInstruction(instruction,codeAddress);case INVOKE_INTERFACE:case INVOKE_INTERFACE_RANGE:return new InvokeInterfaceInstruction(instruction,codeAddress);case INVOKE_DIRECT:case INVOKE_DIRECT_RANGE:case INVOKE_SUPER:case INVOKE_SUPER_RANGE:return new InvokeSpecialInstruction(instruction,codeAddress);case INVOKE_STATIC:case INVOKE_STATIC_RANGE:return new InvokeStaticInstruction(instruction,codeAddress);case EXECUTE_INLINE:case EXECUTE_INLINE_RANGE:return new ExecuteInlineInstruction(instruction,codeAddress);case NEG_INT:case NOT_INT:case NEG_FLOAT:case NEG_LONG:case NOT_LONG:case NEG_DOUBLE:return new UnopInstruction(instruction,codeAddress);case INT_TO_LONG:case INT_TO_DOUBLE:case FLOAT_TO_LONG:case FLOAT_TO_DOUBLE:case LONG_TO_INT:case LONG_TO_FLOAT:case DOUBLE_TO_INT:case DOUBLE_TO_FLOAT:case LONG_TO_DOUBLE:case DOUBLE_TO_LONG:case INT_TO_FLOAT:case FLOAT_TO_INT:case INT_TO_BYTE:case INT_TO_CHAR:case INT_TO_SHORT:return new CastInstruction(instruction,codeAddress);case ADD_INT:case SUB_INT:case MUL_INT:case DIV_INT:case REM_INT:case AND_INT:case OR_INT:case XOR_INT:case SHL_INT:case SHR_INT:case USHR_INT:case ADD_FLOAT:case SUB_FLOAT:case MUL_FLOAT:case DIV_FLOAT:case REM_FLOAT:case ADD_LONG:case SUB_LONG:case MUL_LONG:case DIV_LONG:case REM_LONG:case AND_LONG:case OR_LONG:case XOR_LONG:case SHL_LONG:case SHR_LONG:case USHR_LONG:case ADD_DOUBLE:case SUB_DOUBLE:case MUL_DOUBLE:case DIV_DOUBLE:case REM_DOUBLE:return new BinopInstruction(instruction,codeAddress);case ADD_INT_2ADDR:case SUB_INT_2ADDR:case MUL_INT_2ADDR:case DIV_INT_2ADDR:case REM_INT_2ADDR:case AND_INT_2ADDR:case OR_INT_2ADDR:case XOR_INT_2ADDR:case SHL_INT_2ADDR:case SHR_INT_2ADDR:case USHR_INT_2ADDR:case ADD_FLOAT_2ADDR:case SUB_FLOAT_2ADDR:case MUL_FLOAT_2ADDR:case DIV_FLOAT_2ADDR:case REM_FLOAT_2ADDR:case ADD_LONG_2ADDR:case SUB_LONG_2ADDR:case MUL_LONG_2ADDR:case DIV_LONG_2ADDR:case REM_LONG_2ADDR:case AND_LONG_2ADDR:case OR_LONG_2ADDR:case XOR_LONG_2ADDR:case SHL_LONG_2ADDR:case SHR_LONG_2ADDR:case USHR_LONG_2ADDR:case ADD_DOUBLE_2ADDR:case SUB_DOUBLE_2ADDR:case MUL_DOUBLE_2ADDR:case DIV_DOUBLE_2ADDR:case REM_DOUBLE_2ADDR:return new Binop2addrInstruction(instruction,codeAddress);case ADD_INT_LIT16:case RSUB_INT:case MUL_INT_LIT16:case DIV_INT_LIT16:case REM_INT_LIT16:case AND_INT_LIT16:case OR_INT_LIT16:case XOR_INT_LIT16:case ADD_INT_LIT8:case RSUB_INT_LIT8:case MUL_INT_LIT8:case DIV_INT_LIT8:case REM_INT_LIT8:case AND_INT_LIT8:case OR_INT_LIT8:case XOR_INT_LIT8:case SHL_INT_LIT8:case SHR_INT_LIT8:case USHR_INT_LIT8:return new BinopLitInstruction(instruction,codeAddress);default :throw new IllegalArgumentException("Opcode: " + op + " @ 0x"+ Integer.toHexString(codeAddress));}}  }
class C{  final public void enable_tracing(){}  }
class C{  public void smoothOpenRightMenu(int position,int duration){  smoothOpenMenu(position,RIGHT_DIRECTION,duration);}  }
class C{  public void findHighestTiles(){  if (!highestTilesFound) {    for (int x=0; x < CHUNK_SIZE; x++) {      findHighestTile(x);    }    highestTilesFound=true;  }}  }
class C{  @Override public List<Period> generatePeriods(DateTimeUnit dateTimeUnit){  Calendar calendar=getCalendar();  List<Period> periods=Lists.newArrayList();  dateTimeUnit=calendar.minusDays(dateTimeUnit,calendar.weekday(dateTimeUnit) - 1);  for (int i=0; i < calendar.weeksInYear(dateTimeUnit.getYear()); i++) {    DateInterval interval=calendar.toInterval(dateTimeUnit,DateIntervalType.ISO8601_WEEK);    periods.add(new Period(this,interval.getFrom().toJdkDate(),interval.getTo().toJdkDate()));    dateTimeUnit=calendar.plusWeeks(dateTimeUnit,1);  }  return periods;}  }
class C{  public void showMetrics(){  timer.show("NullAudioPlayer");}  }
class C{  @Override public void close(){  try {    reader.close();  } catch (  IOException e) {    Basic.caught(e);  }}  }
class C{  @VisibleForTesting public boolean doesContainAWord(String selection){  return mContainsWordPattern.matcher(selection).find();}  }
class C{  public UpgradePatchRetry(Context context){  this.context=context;  retryInfoFile=new File(SharePatchFileUtil.getPatchDirectory(context),RETRY_INFO_NAME);  tempPatchFile=new File(SharePatchFileUtil.getPatchDirectory(context),TEMP_PATCH_NAME);}  }
class C{  protected AdsGetDemographicsQuery dateFrom(String value){  return unsafeParam("date_from",value);}  }
class C{  public double expectedWeightedValue(){  return this.weightedVar;}  }
class C{  public static int decodeUnicodeNotation(String unicodeString){  String string=unicodeString.substring(UNICODE_PREFIX.length());  int result=(int)Long.parseLong(string,16);  return (result);}  }
class C{  public void changeAccount(String account) throws IllegalStateException, IOException, FTPIllegalReplyException, FTPException {synchronized (lock) {    if (!connected) {      throw new IllegalStateException("Client not connected");    }    if (!authenticated) {      throw new IllegalStateException("Client not authenticated");    }    communication.sendFTPCommand("ACCT " + account);    FTPReply r=communication.readFTPReply();    touchAutoNoopTimer();    if (!r.isSuccessCode()) {      throw new FTPException(r);    }  }}  }
class C{  public static List<String> readLines(File file) throws IOException {  return readLines(file,Charset.defaultCharset());}  }
class C{  public UsersSearchQuery country(Integer value){  return unsafeParam("country",value);}  }
class C{  public void addRecognizedFeatures(String[] featureIds){  int featureIdsCount=featureIds != null ? featureIds.length : 0;  for (int i=0; i < featureIdsCount; i++) {    String featureId=featureIds[i];    if (!fRecognizedFeatures.contains(featureId)) {      fRecognizedFeatures.add(featureId);    }  }}  }
class C{  void markActivityUsed(int activityIndex,String webappId){  int elementIndex=findActivityElement(activityIndex);  if (elementIndex == -1) {    Log.e(TAG,"Failed to find WebappActivity entry: " + activityIndex + ", "+ webappId);    return;  }  ActivityEntry updatedEntry=new ActivityEntry(activityIndex,webappId);  mActivityList.remove(elementIndex);  mActivityList.add(updatedEntry);  storeActivityList();}  }
class C{  public void elect() throws InterruptedException, ActiveElectionException {  boolean isException=false;  if (getState() != State.PENDING)   return;  try {    while (!isTerminate()) {      try {        if (findActive() != null) {          return;        } else         if (pollStateUntilAvailable(State.PREPARE) != null) {          return;        }        if (findActive() != null) {          return;        } else         if (!isAdvanceToStateAllowed(State.PENDING,State.PREPARE)) {          continue;        } else         if (!doChangeState(State.PENDING,State.PREPARE)) {          return;        }        if (findActive() != null) {          return;        } else         if (!isAdvanceToStateAllowed(State.PREPARE,State.ACTIVE)) {          continue;        } else         if (!doChangeState(State.PREPARE,State.ACTIVE)) {          return;        }        notifyListenerOnActive(new ServiceItem(_electTemplate.getServiceID(),_electTemplate.getService(),null));        return;      } catch (      DirectPersistencyRecoveryException ex) {        try {          if (_logger.isLoggable(Level.WARNING)) {            if (ex instanceof DirectPersistencyAttributeStoreException) {              _logger.log(Level.WARNING,"Failed to set or get last primary state using AttributeStore, will try to reelect...",ex);            } else {              _logger.log(Level.WARNING,"Failed to elect as primary",ex);            }          }          isException=true;          changeState(getState(),State.PENDING,true);        } catch (        RemoteException e) {          isException=true;          String exMsg="Failed to communicate with [" + _namingService.getName() + "] naming service while changing state from "+ getState()+ " to PENDING. ";          throw new ActiveElectionException(exMsg,ex);        }      }catch (      RemoteException ex) {        isException=true;        String exMsg="Failed to communicate with [" + _namingService.getName() + "] naming service. ";        throw new ActiveElectionException(exMsg,ex);      }    }  }  finally {    if (!isException) {      try {        if (getState() == State.PREPARE) {          changeState(State.PREPARE,State.PENDING,true);        }      } catch (      RemoteException ex) {        throw new ActiveElectionException("Force change state failed.",ex);      }      try {        startSplitBrainController();      } catch (      Exception ex) {        throw new ActiveElectionException("Failed to start SplitBrainController.",ex);      }    }  }}  }
class C{  public static String valueToString(Object value) throws JSONException {  if (value == null || value.equals(null)) {    return "null";  }  if (value instanceof JSONString) {    Object object;    try {      object=((JSONString)value).toJSONString();    } catch (    Exception e) {      throw new JSONException(e);    }    if (object instanceof String) {      return (String)object;    }    throw new JSONException("Bad value from toJSONString: " + object);  }  if (value instanceof Number) {    return numberToString((Number)value);  }  if (value instanceof Boolean || value instanceof JSONObject || value instanceof JSONArray) {    return value.toString();  }  if (value instanceof Map) {    return new JSONObject((Map<String,Object>)value).toString();  }  if (value instanceof Collection) {    return new JSONArray((Collection<Object>)value).toString();  }  if (value.getClass().isArray()) {    return new JSONArray(value).toString();  }  return quote(value.toString());}  }
class C{  public static Map<String,Object> checkPermission(DispatchContext ctx,Map<String,?> context){  boolean hasPermission=false;  String mainAction=(String)context.get("mainAction");  if ("VIEW".equals(mainAction)) {    if (DEFAULT_UID.equals(context.get(LOGINID_PARAMETER_NAME))) {      hasPermission=true;    } else {      hasPermission=isValidGetId(ctx,context);    }  } else   if ("CREATE~UPDATE~DELETE".contains(mainAction)) {    hasPermission=isValidSetId(ctx,context);  } else {    hasPermission=false;  }  Map<String,Object> result=ServiceUtil.returnSuccess();  result.put("hasPermission",hasPermission);  return result;}  }
class C{  private static Bitmap decodeImage(ContentResolver resolver,Uri uri,BitmapFactory.Options options) throws FileNotFoundException {  do {    InputStream stream=null;    try {      stream=resolver.openInputStream(uri);      return BitmapFactory.decodeStream(stream,EMPTY_RECT,options);    } catch (    OutOfMemoryError e) {      options.inSampleSize*=2;    } finally {      closeSafe(stream);    }  } while (options.inSampleSize <= 512);  throw new RuntimeException("Failed to decode image: " + uri);}  }
class C{  public static void syncCollapsedFromSummary2Viewer(final DataTable table,final ClassificationViewer classificationViewer){  final String classificationName=classificationViewer.getClassName();  if (table.getCollapsed(classificationName) != null && table.getCollapsed(classificationName).size() > 0) {    classificationViewer.getCollapsedIds().clear();    classificationViewer.getCollapsedIds().addAll(table.getCollapsed(classificationName));  }}  }
class C{  public boolean isEntryMethod(SootMethod method){  return !tgtToEdge.containsKey(method);}  }
class C{  public void startTimer(double durationInMilliseconds){  startTime=System.nanoTime();  timeout=startTime + (long)(durationInMilliseconds * 1000000);}  }
class C{  public static boolean isPowerOfTwo(long n){  return (n > 0) && ((n & (n - 1)) == 0);}  }
class C{  public boolean isNull(int index){  return JSONObject.NULL.equals(this.opt(index));}  }
class C{  @TargetApi(Build.VERSION_CODES.LOLLIPOP) public static int launchDocumentInstance(Activity activity,boolean incognito,AsyncTabCreationParams asyncParams){  assert asyncParams != null;  final int launchMode=asyncParams.getDocumentLaunchMode();  final int intentSource=asyncParams.getDocumentStartedBy();  final LoadUrlParams loadUrlParams=asyncParams.getLoadUrlParams();  if (loadUrlParams.getUrl() == null && asyncParams.getWebContents() != null) {    loadUrlParams.setUrl(asyncParams.getWebContents().getUrl());  }  if (launchMode == LAUNCH_MODE_RETARGET) {    assert asyncParams.getWebContents() == null;    assert loadUrlParams.getPostData() == null;    int relaunchedId=relaunchTask(incognito,loadUrlParams.getUrl());    if (relaunchedId != Tab.INVALID_TAB_ID)     return relaunchedId;  }  int parentId=activity != null && (launchMode == LAUNCH_MODE_AFFILIATED || intentSource == DocumentMetricIds.STARTED_BY_WINDOW_OPEN || intentSource == DocumentMetricIds.STARTED_BY_CONTEXTUAL_SEARCH) ? ActivityDelegate.getTabIdFromIntent(activity.getIntent()) : Tab.INVALID_TAB_ID;  Context context=ApplicationStatus.getApplicationContext();  Intent intent=createLaunchIntent(context,null,loadUrlParams.getUrl(),incognito,parentId);  setRecentsFlagsOnIntent(intent,Intent.FLAG_ACTIVITY_NEW_DOCUMENT,incognito);  intent.putExtra(IntentHandler.EXTRA_OPEN_NEW_INCOGNITO_TAB,incognito);  intent.putExtra(IntentHandler.EXTRA_PAGE_TRANSITION_TYPE,loadUrlParams.getTransitionType());  intent.putExtra(IntentHandler.EXTRA_STARTED_BY,intentSource);  if (activity != null && activity.getIntent() != null) {    intent.putExtra(IntentHandler.EXTRA_PARENT_INTENT,activity.getIntent());  }  intent.putExtra(EXTRA_LAUNCH_MODE,launchMode);  IntentHandler.addTrustedIntentExtras(intent,context);  boolean succeeded=false;  boolean affiliated=launchMode == LAUNCH_MODE_AFFILIATED;  if (activity == null) {    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);    succeeded=fireDocumentIntent(context,intent,incognito,affiliated,asyncParams);  } else {    succeeded=fireDocumentIntent(activity,intent,incognito,affiliated,asyncParams);  }  return succeeded ? ActivityDelegate.getTabIdFromIntent(intent) : Tab.INVALID_TAB_ID;}  }
class C{  public boolean isCritical(){  return false;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CHANGE_ITEM_SKIN_SUCCEED(DescriptionId descriptionId){  return new SM_SYSTEM_MESSAGE(1300483,descriptionId);}  }
class C{  private static void expandBelow13DigitNumber(String numberString,WordRelation wordRelation,Item tokenItem){  expandLargeNumber(numberString,"billion",9,wordRelation,tokenItem);}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("rename sample=");  final String sampleName=np.getWordRespectCase();  np.matchIgnoreCase("newName=");  String newName=np.getWordRespectCase();  np.matchIgnoreCase(";");  final SamplesViewer viewer=(SamplesViewer)getDir().getViewerByClass(SamplesViewer.class);  viewer.getSamplesTable().renameSample(sampleName,newName);}  }
class C{  @Override public boolean markSupported(){  return false;}  }
class C{  @Override public void accept(IQueryExecutor executor,ISpaceProxy space,Transaction txn,int readModifier,int max) throws SQLException {  executor.execute(this,space,txn,readModifier,max);}  }
class C{  public CreateTableData(String tblName,Schema schema){  this.tblName=tblName;  this.schema=schema;}  }
class C{  public static double nextUp(double d){  if (d == Double.POSITIVE_INFINITY)   return d; else {    d+=0.0d;    return Double.longBitsToDouble(Double.doubleToRawLongBits(d) + ((d >= 0.0d) ? +1L : -1L));  }}  }
class C{  public boolean isRepeated(){  return card == Cardinality.REPEATED;}  }
class C{  public Dfp newDfp(final byte x){  return new Dfp(this,x);}  }
class C{  @Override public void addFragment(Activity a,int code){  Fragment f=buildFragmentByCode(code);  model.addFragmentToList(f);  ((MainActivity)a).getSupportFragmentManager().beginTransaction().add(R.id.activity_main_fragment,f).setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN).addToBackStack(null).commit();}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,0,isTouchEvent);}  }
class C{  public static byte[] decode(char[] in){  return decode(in,0,in.length);}  }
class C{  public static StyledLayerDescriptor createNewRaster(){  StyledLayerDescriptor sld=styleFactory.createStyledLayerDescriptor();  NamedLayer namedLayer=styleFactory.createNamedLayer();  sld.addStyledLayer(namedLayer);  Style style=styleFactory.createStyle();  namedLayer.addStyle(style);  List<FeatureTypeStyle> ftsList=style.featureTypeStyles();  FeatureTypeStyle fts=styleFactory.createFeatureTypeStyle();  ftsList.add(fts);  Rule rule=styleFactory.createRule();  fts.rules().add(rule);  RasterSymbolizer raster=createDefaultRasterSymbolizer();  rule.symbolizers().add(raster);  return sld;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FIND_POS_NPC_FOUND(String value0){  return new SM_SYSTEM_MESSAGE(1300750,value0);}  }
class C{  static <T>void buildError(Subscriber<T> subscriber,Exception exception){  subscriber.onError(exception);}  }
class C{  @RequestMapping(value="/{namespace}/{key}",method=RequestMethod.POST,produces="application/json",consumes="application/json") public void addUserKeyJsonValue(@PathVariable String namespace,@PathVariable String key,@RequestBody String body,@RequestParam(defaultValue="false") boolean encrypt,HttpServletResponse response) throws IOException, WebMessageException {  if (userKeyJsonValueService.getUserKeyJsonValue(currentUserService.getCurrentUser(),namespace,key) != null) {    throw new WebMessageException(WebMessageUtils.conflict("The key '" + key + "' already exists in the namespace '"+ namespace+ "'."));  }  if (!renderService.isValidJson(body)) {    throw new WebMessageException(WebMessageUtils.badRequest("The data is not valid JSON."));  }  UserKeyJsonValue userKeyJsonValue=new UserKeyJsonValue();  userKeyJsonValue.setKey(key);  userKeyJsonValue.setUser(currentUserService.getCurrentUser());  userKeyJsonValue.setNamespace(namespace);  userKeyJsonValue.setValue(body);  userKeyJsonValue.setEncrypted(encrypt);  userKeyJsonValueService.addUserKeyJsonValue(userKeyJsonValue);  response.setStatus(HttpServletResponse.SC_CREATED);  messageService.sendJson(WebMessageUtils.created("Key '" + key + "' in namespace '"+ namespace+ "' created."),response);}  }
class C{  public void delete(RecordId nextDeletedSlot){  Constant flag=EMPTY_CONST;  setVal(currentPos(),flag);  setNextDeletedSlotId(nextDeletedSlot);}  }
class C{  public ScriptIO(final Script script,final Executor executor){  this.script=script;  this.executor=executor;  if (script != null) {    scriptName=script.getName();  }}  }
class C{  public void onFailure(String responseBody,Throwable error){}  }
class C{  public HttpPost createInstallRequest(String path){  return new HttpPost(String.format(REQUEST_STRING_WITH_PATH,authorIp,path,Commands.INSTALL.getCommand()));}  }
class C{  public DatabaseGetCountriesByIdQuery countryIds(Integer... value){  return unsafeParam("country_ids",value);}  }
class C{  protected NotesDeleteCommentQuery commentId(int value){  return unsafeParam("comment_id",value);}  }
class C{  public QRDecomposition qr(){  return new QRDecomposition(this);}  }
class C{  public BrowserInfoEntry(Capabilities capabilities){  super();  this.caps=capabilities;}  }
class C{  public void registerProvider(EnvironmentProvider provider){  JmxConnectionSupportImpl.registerProviderImpl(provider);}  }
class C{  private void showModuleSelectionDialog(@NotNull List<ModuleSearchResult> searchResults,@NotNull DataNode<ProjectData> projectInfo,@NotNull List<DataNode<ModuleData>> selection,@NotNull File file){  List<DataNode<ModuleData>> finalSelection=Lists.newArrayList(selection);  List<DataNode<ModuleData>> modulesToDisplayInDialog=Lists.newArrayList();  Map<String,ModuleSearchResult> resultsByModuleName=Maps.newHashMap();  for (  ModuleSearchResult result : searchResults) {    DataNode<ModuleData> module=result.moduleNode;    modulesToDisplayInDialog.add(module);    if (result.selected) {      finalSelection.remove(module);    }    String moduleName=getNameOf(module);    resultsByModuleName.put(moduleName,result);  }  invokeLaterIfNeeded(null);}  }
class C{  @Override public void fileDeleted(Path f){  if (f != null) {    Path path=f.getFileName();    if (path != null) {      String filename=path.toString();      for (int childIndex=0; childIndex < this.getChildCount(); childIndex++) {        FileTreeNode childNode=(FileTreeNode)this.getChildAt(childIndex);        if (childNode.name.compareTo(filename) == 0) {          this.remove(childIndex);          break;        }      }      FileSystemNodeManager.refreshNode(this);    }  }}  }
class C{  public static Date parseDate(String dateValue) throws DateParseException {  return parseDate(dateValue,null,null);}  }
class C{  public KeyManager(GameSettings settings,ArrayList<InternalKey> additionalKeys){  this.additionalKeys=additionalKeys;  if (additionalKeys != null) {    fixAdditionalKeyBindings(settings);    FMLCommonHandler.instance().bus().register(this);  }}  }
class C{  private boolean validFile(String filename){  String fileExtension=ExternalFilenames.getFileExtension(filename);  if (fileHandlerMap != null) {    return (fileHandlerMap.keySet().contains(fileExtension));  }  return false;}  }
class C{  private void embedTree(Node root){  removeAllInternalPoints();  node2BoundingBox.clear();  for (Node v=getTree().getFirstNode(); v != null; v=v.getNext()) {    setLocation(v,null);    getNV(v).setFixedSize(true);  }  taxonLevel=0;  if (getDrawerType() == DiagramType.RectangularPhylogram || getDrawerType() == DiagramType.RoundedPhylogram) {    embedPhylogramRec(root,null,0);    if (getDrawerType() == DiagramType.RoundedPhylogram) {      for (Edge e=getTree().getFirstEdge(); e != null; e=getTree().getNextEdge(e))       getEV(e).setShape(EdgeView.ROUNDED_EDGE);    }  } else {    embedCladogramRec(root,null);    if (getDrawerType() == DiagramType.RoundedCladogram) {      for (Edge e=getTree().getFirstEdge(); e != null; e=getTree().getNextEdge(e))       getEV(e).setShape(EdgeView.ROUNDED_EDGE);    }  }  trans.setCoordinateRect(getBBox());  if (!isShowIntermediateLabels())   showLabels(getDegree2Nodes(),false);}  }
class C{  @Override public void onWebsocketPing(WebSocket conn,Framedata f){  FramedataImpl1 resp=new FramedataImpl1(f);  resp.setOptcode(Opcode.PONG);  conn.sendFrame(resp);}  }
class C{  private void stopRequestingSensorEventData(){  if (!isRequestingSensorEventData()) {    return;  }  try {    Log.v(TAG,"Stopping to request sensor event data");    for (    Map.Entry<String,SensorDataRequest> sensorDataRequestEntry : sensorDataRequests.entrySet()) {      sensorDataRequestEntry.getValue().setEndTimestamp(System.currentTimeMillis());    }    sendSensorEventDataRequests();  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  public int remove(int offset){  int old=get(offset);  remove(offset,1);  return old;}  }
class C{  public static String generateStackInfo(boolean keepInnerClass,int stackOffset){  StackTraceElement[] currentStack=getCurrentStack();  StackTraceElement element=currentStack[stackOffset];  String className=element.getClassName();  String pkgPath[]=className.split("\\.");  if (pkgPath.length > 0) {    className=pkgPath[pkgPath.length - 1];  }  int innerclassSymbolIndex=className.indexOf("$");  String innerClassName=null;  if (innerclassSymbolIndex != -1) {    innerClassName=className.substring(innerclassSymbolIndex + 1);    className=className.substring(0,innerclassSymbolIndex);  }  String methodName=element.getMethodName();  int lineNum=element.getLineNumber();  if (keepInnerClass && (!TextUtils.isEmpty(innerClassName))) {    methodName=String.format("$%s#%s()",innerClassName,methodName);  } else {    methodName=String.format("#%s()",methodName);  }  return String.format("[(%s.java:%s)%s]",className,lineNum,methodName);}  }
class C{  public Object childrenAccept(MithraQLVisitor visitor,Object data){  visitor.visit(this,data);  if (this.children != null) {    for (int i=0; i < this.children.length; ++i) {      this.children[i].jjtAccept(visitor,data);      ((SimpleNode)this.children[i]).childrenAccept(visitor,data);    }  }  return data;}  }
class C{  public static CipherTextIvMac encrypt(String plaintext,SecretKeys secretKeys,String encoding) throws UnsupportedEncodingException, GeneralSecurityException {  return encrypt(plaintext.getBytes(encoding),secretKeys);}  }
class C{  @Override public boolean isDataPresent(){  return true;}  }
class C{  public void showTextBubble(String text,View anchorView,int maxWidth,int maxHeight){  mTooltipText.setText(text);  mTooltipText.measure(MeasureSpec.makeMeasureSpec(maxWidth,MeasureSpec.AT_MOST),MeasureSpec.makeMeasureSpec(maxHeight,MeasureSpec.AT_MOST));  mAnchorView=anchorView;  calculateNewPosition();  showAtCalculatedPosition();}  }
class C{  @SuppressWarnings("unchecked") public boolean remove(Object obj){  boolean res=false;  if (contains(obj)) {    Unit successor=getSuccOf((E)obj);    if (successor == null)     successor=getPredOf((E)obj);    res=innerChain.remove(obj);    ((E)obj).redirectJumpsToThisTo(successor);  }  return res;}  }
class C{  private void put122(final int b,final int s1,final int s2){  pool.put12(b,s1).putShort(s2);}  }
class C{  public static RecipeFragment newInstance(Recipe recipe,int sectionNumber){  RecipeFragment fragment=new RecipeFragment();  fragment.recipe=recipe;  Bundle args=new Bundle();  args.putInt(ARG_SECTION_NUMBER,sectionNumber);  fragment.setArguments(args);  return fragment;}  }
class C{  public void addBodyDecl(BodyDecl node){  List<BodyDecl> list=(parent == null || state == null) ? getBodyDeclListNoTransform() : getBodyDeclList();  list.addChild(node);}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  public static void dropAllTables(SQLiteDatabase db,boolean ifExists){  WeekForeCastDao.dropTable(db,ifExists);  RealWeatherDao.dropTable(db,ifExists);  HourForeCastDao.dropTable(db,ifExists);  AqiDao.dropTable(db,ifExists);  ZhishuDao.dropTable(db,ifExists);  UseAreaDao.dropTable(db,ifExists);  AlarmsDao.dropTable(db,ifExists);}  }
class C{  public AppTest(String testName){  super(testName);}  }
class C{  public static String arrayToString(String[] strs){  if (strs.length == 0) {    return "";  }  StringBuilder sbuf=new StringBuilder();  sbuf.append(strs[0]);  for (int idx=1; idx < strs.length; idx++) {    sbuf.append(",");    sbuf.append(strs[idx]);  }  return sbuf.toString();}  }
class C{  public XPathMatcher(XPath xpath){  fLocationPaths=xpath.getLocationPaths();  fStepIndexes=new IntStack[fLocationPaths.length];  for (int i=0; i < fStepIndexes.length; i++)   fStepIndexes[i]=new IntStack();  fCurrentStep=new int[fLocationPaths.length];  fNoMatchDepth=new int[fLocationPaths.length];  fMatched=new int[fLocationPaths.length];}  }
class C{  public void deleteAllDimensionRows(){  try {    String dimRowIndexes=keyValueStore.get(DimensionStoreKeyUtils.getAllValuesKey());    if (dimRowIndexes == null) {      LOG.debug("Null value for dimension {} while deleting: ",apiName);      return;    }    String[] keys=objectMapper.readValue(dimRowIndexes,String[].class);    LinkedHashSet<String> dimRowKeys=new LinkedHashSet<>(Arrays.asList(keys));    for (    String dimRowKey : dimRowKeys) {      keyValueStore.remove(dimRowKey);    }    searchProvider.setKeyValueStore(keyValueStore);    keyValueStore.put(DimensionStoreKeyUtils.getCardinalityKey(),"0");    String allValuesKey=DimensionStoreKeyUtils.getAllValuesKey();    keyValueStore.put(allValuesKey,"[]");  } catch (  IOException e) {    LOG.error("Exception while reading dimension rows {}",e);    throw new RuntimeException(e);  }}  }
class C{  private void init(final AttributeSet attrs){  Typeface typeface;  if (!isInEditMode() && (typeface=CustomFontUtils.getTypeFace(this,attrs)) != null) {    super.setTypeface(typeface,typeface.getStyle());  }}  }
class C{  public static ExpressionFactory newExpressionFactory(){  return new ExpressionFactoryImpl(new TreeStore(new ExtendedBuilder(),new Cache(1000)));}  }
class C{  protected MarketAddQuery ownerId(int value){  return unsafeParam("owner_id",value);}  }
class C{  public void onStop(){}  }
class C{  public static void decodeFileToFile(String infile,String outfile) throws java.io.IOException {  byte[] decoded=Base64.decodeFromFile(infile);  java.io.OutputStream out=null;  try {    out=new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));    out.write(decoded);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      out.close();    } catch (    Exception ex) {    }  }}  }
class C{  public Builder perExecutorStatsLogger(StatsLogger perExecutorStatsLogger){  this.perExecutorStatsLogger=perExecutorStatsLogger;  return this;}  }
class C{  public static Map<String,Object> clearAllEntityCaches(DispatchContext dctx,Map<String,? extends Object> context){  Delegator delegator=dctx.getDelegator();  Boolean distributeBool=(Boolean)context.get("distribute");  boolean distribute=false;  if (distributeBool != null)   distribute=distributeBool.booleanValue();  delegator.clearAllCaches(distribute);  return ServiceUtil.returnSuccess();}  }
class C{  static int dp(Context context,int val){  return (int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,val,context.getResources().getDisplayMetrics());}  }
class C{  public static int unsignedLeb128Size(int value){  int remaining=value >>> 7;  int count=0;  while (remaining != 0) {    remaining>>>=7;    count++;  }  return count + 1;}  }
class C{  public CallableDistributedTaskAdapter(){}  }
class C{  public void updateDistances() throws Exception {  taxa=new Taxa();  java.util.List<String> pids=doc.getSampleNames();  for (  String name : pids) {    taxa.add(name);  }  if (taxa.size() < 4)   throw new IOException("Too few samples: " + taxa.size());  distances=new Distances(taxa.size());  if (ecologicalIndex.equalsIgnoreCase(UniFrac.TOPOLOGICAL_UNIFRAC))   numberOfNodesUsed=UniFrac.apply(getParentViewer(),UniFrac.TOPOLOGICAL_UNIFRAC,1,distances); else   if (ecologicalIndex.equalsIgnoreCase(JensenShannonDivergence.SqrtJensenShannonDivergence))   numberOfNodesUsed=JensenShannonDivergence.apply(getParentViewer(),JensenShannonDivergence.SqrtJensenShannonDivergence,distances); else   if (ecologicalIndex.equalsIgnoreCase(PearsonDistance.PEARSON_DISTANCE))   numberOfNodesUsed=PearsonDistance.apply(doc,getParentViewer(),ecologicalIndex,distances); else   numberOfNodesUsed=CalculateEcologicalIndices.apply(doc,getParentViewer(),ecologicalIndex,distances,!getEcologicalIndex().contains("Goodall"));  if (distances.replaceNaNByZero()) {    NotificationsInSwing.showWarning(getFrame(),"Undefined distances detected, replaced by 0");  }  getPcoaTab().clear();  getUpgmaTab().clear();  getNnetTab().clear();  getNJTab().clear();  matrixTab.setData(taxa,distances);}  }
class C{  private void refreshStateTag(final Supervised supervised,final Timestamp refreshTime){  try {    Long stateTagId;    String message;    SupervisionStatus status;    stateTagId=supervised.getStateTagId();    message=supervised.getStatusDescription();    status=supervised.getSupervisionStatus();    controlTagFacade.updateAndValidate(stateTagId,status.toString(),message,refreshTime);  } catch (  Exception e) {    LOGGER.error("Error while refreshing state tag for " + supervised.getSupervisionEntity() + " "+ supervised.getId()+ " - unable to refresh this tag.",e);  }}  }
class C{  public void remove(LegionMemberEx legionMember){  legionMemberById.remove(legionMember.getObjectId());  legionMemberExById.remove(legionMember.getObjectId());  legionMemberExByName.remove(legionMember.getName());}  }
class C{  public void collapse(NodeBase v){  if (v != null) {    for (Enumeration descendants=v.depthFirstEnumeration(); descendants.hasMoreElements(); ) {      v=(NodeBase)descendants.nextElement();      dataTree.collapsePath(new TreePath(v.getPath()));    }  }}  }
class C{  public void java_lang_Class_getFields0(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  helper.assignObjectTo(returnVar,Environment.v().getLeastArrayObject());}  }
class C{  public boolean isBelow(Vector2 p,Vector2 q){  double diff=p.y - q.y;  if (diff == 0.0) {    if (p.x > q.x) {      return true;    } else {      return false;    }  } else {    if (diff < 0.0) {      return true;    } else {      return false;    }  }}  }
class C{  public boolean runAfter(List list,int max){  return false;}  }
class C{  private void updateButtonState(boolean dataChanged){  btnApply.setEnabled(dataChanged);  btnRevert.setEnabled(dataChanged);}  }
class C{  public boolean equivTo(Object c){  return equals(c);}  }
class C{  public boolean hasSuperclass(){  checkLevel(HIERARCHY);  return superClass != null;}  }
class C{  @Override public synchronized void initialize(){  if (!mRootDirectory.exists()) {    if (!mRootDirectory.mkdirs()) {      VolleyLog.e("Unable to create cache dir %s",mRootDirectory.getAbsolutePath());    }    return;  }  File[] files=mRootDirectory.listFiles();  if (files == null) {    return;  }  for (  File file : files) {    BufferedInputStream fis=null;    try {      fis=new BufferedInputStream(new FileInputStream(file));      CacheHeader entry=CacheHeader.readHeader(fis);      entry.size=file.length();      putEntry(entry.key,entry);    } catch (    IOException e) {      if (file != null) {        file.delete();      }    } finally {      try {        if (fis != null) {          fis.close();        }      } catch (      IOException ignored) {      }    }  }}  }
class C{  public void centerViewTo(float xValue,float yValue,AxisDependency axis){  float yInView=getAxisRange(axis) / mViewPortHandler.getScaleY();  float xInView=getXAxis().mAxisRange / mViewPortHandler.getScaleX();  Runnable job=MoveViewJob.getInstance(mViewPortHandler,xValue - xInView / 2f,yValue + yInView / 2f,getTransformer(axis),this);  addViewportJob(job);}  }
class C{  public void process() throws Exception {  logger.debug("Processing " + sourceFile + " files into "+ destFile);  if (!sourceFile.exists()) {    throw new FileNotFoundException("Source file " + sourceFile.getPath() + " not found.");  }  boolean needUpdate=false;  if (!destFile.exists()) {    logger.debug("Dest file not found - creating new file");    needUpdate=true;  } else   if (!metaDataFile.exists()) {    logger.debug("Meta file not found - creating new file");    needUpdate=true;  } else {    logger.debug("Dest file found - checking file modifications");    needUpdate=checkFileModifications();  }  if (needUpdate) {    logger.debug("Modifications found. Updating...");    try {      doUpdate();    } catch (    Exception e) {      FileUtils.deleteQuietly(destFile);      FileUtils.deleteQuietly(metaDataFile);      throw e;    }  } else {    logger.debug("Files are up-to-date");  }}  }
class C{  public PostLexicalAnalyzer(){}  }
class C{  public Math_Vector sub(double x,double y){  this.x-=x;  this.y-=y;  return this;}  }
class C{  public VideoRestoreCommentQuery(VkApiClient client,UserActor actor,int commentId){  super(client,"video.restoreComment",BoolInt.class);  accessToken(actor.getAccessToken());  commentId(commentId);}  }
class C{  public Object directLocalReadById(Object id,String typeName,QueryResultTypeInternal queryResultType){  if (!_isLocalCache)   throw new EngineInternalSpaceException("Supported only in local cache");  final IServerTypeDesc serverTypeDesc=_typeManager.getServerTypeDesc(typeName);  if (serverTypeDesc == null)   return null;  Object res=null;  boolean noUid=true;  if (serverTypeDesc.isActive()) {    if (serverTypeDesc.getTypeDesc().getIdPropertyName() == null)     return null;    if (serverTypeDesc.getTypeDesc().isAutoGenerateId())     noUid=false;    IEntryHolder entryHolder=noUid ? _cacheManager.getEntryByIdFromPureCache(id,serverTypeDesc) : directLocalReadByUidForClass((String)id,typeName);    res=getUserObjectFromEntryHolder(entryHolder,queryResultType);  }  if (res != null || !noUid)   return res;  IServerTypeDesc[] subTypes=serverTypeDesc.getAssignableTypes();  for (int i=1; i < subTypes.length; i++) {    IServerTypeDesc subType=_typeManager.getServerTypeDesc(subTypes[i].getTypeName());    if (subType == null || subType.isInactive())     continue;    if (subType.getTypeDesc().getIdPropertyName() == null)     return null;    IEntryHolder entryHolder=_cacheManager.getEntryByIdFromPureCache(id,subType);    res=getUserObjectFromEntryHolder(entryHolder,queryResultType);    if (res != null)     return res;  }  return null;}  }
class C{  public void loadNecessaryClasses(){  loadBasicClasses();  for (  String name : Options.v().classes()) {    loadNecessaryClass(name);  }  loadDynamicClasses();  if (Options.v().oaat()) {    if (Options.v().process_dir().isEmpty()) {      throw new IllegalArgumentException("If switch -oaat is used, then also -process-dir must be given.");    }  } else {    for (    final String path : Options.v().process_dir()) {      for (      String cl : SourceLocator.v().getClassesUnder(path)) {        SootClass theClass=loadClassAndSupport(cl);        theClass.setApplicationClass();      }    }  }  prepareClasses();  setDoneResolving();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CANCEL_PETITION_OK2(int num1){  return new SM_SYSTEM_MESSAGE(1300553,num1);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ConvertHeal_A_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200955,skilltarget,skillcaster,skillname);}  }
class C{  private void sendCrashToServer(Throwable ex){  LogUtil.d("sendCrashToServer");  if (config.isReportToServer()) {    if (null != config) {      config.getReporter().report(ex);    }  }}  }
class C{  public void init$Children(){  children=new ASTNode[1];}  }
class C{  public void updateSymbol(PolygonSymbolizer polygonSymbolizer){  for (  VendorOptionInterface extension : vendorOptionList) {    boolean displayVendorOption=VendorOptionManager.getInstance().isAllowed(vendorOptionVersionList,extension.getVendorOption());    if (displayVendorOption) {      extension.updateSymbol(polygonSymbolizer);    }  }}  }
class C{  public ClarifaiClient(String appId,String appSecret){  this(CLARIFAI_API_ROOT,appId,appSecret,InMemoryCredentialCache.getInstance());}  }
class C{  public boolean isEmpty(){  if (getRbacClass() == null && getRbacDevice() == null && getRbacProperty() == null)   return true;  return false;}  }
class C{  @Override public WebElement findElementById(String id){  return ((FindsById)super.getWrappedDriver()).findElementById(id);}  }
class C{  public DIPHardwareAddressImpl(final String pItemName,final int pFieldIndex) throws ConfigurationException {  this(pItemName,null,pFieldIndex);}  }
class C{  public static String composeConnectionName(final String clientId,final String serverURIs){  return clientId + "@" + serverURIs;}  }
class C{  public static Z1 uz1(int n) throws JampackException {  Z1 zone=new Z1(n);  for (int i=0; i < n; i++) {    zone.re[i]=R.nextDouble();    zone.im[i]=R.nextDouble();  }  return zone;}  }
class C{  public void goToNextColor(){  mColorIndex=(mColorIndex + 1) % (mColors.length);}  }
class C{  public void denyAll(PermissionFlag flag){  denyAll(flag,defaultMessage);}  }
class C{  public HintsExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  public void addPokestops(Collection<FortData> pokestops){  if (pokestops == null || pokestops.isEmpty()) {    return;  }  complete=true;  for (  FortData pokestop : pokestops) {    this.pokestops.add(new Pokestop(api,pokestop));  }}  }
class C{  @Override public boolean isShowLabel(){  return showLabel;}  }
class C{  @Override public void endGeneralEntity(String name,Augmentations augs) throws XNIException {  try {    if (augs == null || !Boolean.TRUE.equals(augs.getItem(Constants.ENTITY_SKIPPED))) {      if (fLexicalHandler != null) {        fLexicalHandler.endEntity(name);      }    }  } catch (  SAXException e) {    throw new XNIException(e);  }}  }
class C{  private void prepareFramebuffer(int width,int height){  GlUtil.checkGlError("start");  int[] values=new int[1];  GLES20.glGenTextures(1,values,0);  GlUtil.checkGlError("glGenTextures");  mOffscreenTexture=values[0];  Log.i(TAG,"prepareFramebuffer mOffscreenTexture:" + mOffscreenTexture);  GLES20.glBindTexture(GLES20.GL_TEXTURE_2D,mOffscreenTexture);  GlUtil.checkGlError("glBindTexture");  GLES20.glTexImage2D(GLES20.GL_TEXTURE_2D,0,GLES20.GL_RGBA,width,height,0,GLES20.GL_RGBA,GLES20.GL_UNSIGNED_BYTE,null);  GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,GLES20.GL_TEXTURE_MAG_FILTER,GLES20.GL_LINEAR);  GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,GLES20.GL_TEXTURE_MIN_FILTER,GLES20.GL_LINEAR);  GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,GLES20.GL_TEXTURE_WRAP_S,GLES20.GL_CLAMP_TO_EDGE);  GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,GLES20.GL_TEXTURE_WRAP_T,GLES20.GL_CLAMP_TO_EDGE);  GlUtil.checkGlError("glTexParameter");  GLES20.glGenFramebuffers(1,values,0);  GlUtil.checkGlError("glGenFramebuffers");  mFramebuffer=values[0];  GLES20.glBindFramebuffer(GLES20.GL_FRAMEBUFFER,mFramebuffer);  GlUtil.checkGlError("glBindFramebuffer " + mFramebuffer);  GLES20.glFramebufferTexture2D(GLES20.GL_FRAMEBUFFER,GLES20.GL_COLOR_ATTACHMENT0,GLES20.GL_TEXTURE_2D,mOffscreenTexture,0);  int status=GLES20.glCheckFramebufferStatus(GLES20.GL_FRAMEBUFFER);  if (status != GLES20.GL_FRAMEBUFFER_COMPLETE) {    throw new RuntimeException("Framebuffer not complete, status=" + status);  }  GLES20.glBindTexture(GLES20.GL_TEXTURE_2D,0);  GLES20.glBindFramebuffer(GLES20.GL_FRAMEBUFFER,0);  GlUtil.checkGlError("glBindFramebuffer");}  }
class C{  public static void updateDouble(VisualItem item,String field,double val){  item.setDouble(getStartField(field),item.getDouble(field));  item.setDouble(field,val);  item.setDouble(getEndField(field),val);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_NoFly_A_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200922,skilltarget,skillcaster,skillname);}  }
class C{  public void appendTier(PraatTier tier){  this.tiers.add(tier);}  }
class C{  @Override public void unparsedEntityDecl(String name,XMLResourceIdentifier identifier,String notation,Augmentations augs) throws XNIException {}  }
class C{  private static boolean isBracketsBalanced(String metricString){  Map<Character,Character> brackets=new HashMap<>();  brackets.put('[',']');  brackets.put('(',')');  Stack<Character> stack=new Stack<>();  for (int i=0; i < metricString.length(); i++) {    char currentChar=metricString.charAt(i);    if (brackets.containsKey(currentChar)) {      stack.push(currentChar);    } else     if (brackets.values().contains(currentChar) && (currentChar != brackets.get(stack.pop()))) {      return false;    }  }  return stack.empty();}  }
class C{  private void removeTokenPostpunctuation(){  if (token != null) {    String tokenWord=token.getWord();    int tokenLength=tokenWord.length();    int position=tokenLength - 1;    while (position > 0 && postpunctuationSymbols.indexOf((int)tokenWord.charAt(position)) != -1) {      position--;    }    if (tokenLength - 1 != position) {      token.setPostpunctuation(tokenWord.substring(position + 1));      token.setWord(tokenWord.substring(0,position + 1));    } else {      token.setPostpunctuation("");    }  }}  }
class C{  public void destroy(){  destroyOverlayPanelContent();}  }
class C{  public EigenValueDecomposition(Matrix Arg){  double[][] A=Arg.getArray();  n=Arg.getColumnDimension();  V=new double[n][n];  d=new double[n];  e=new double[n];  issymmetric=true;  for (int j=0; (j < n) & issymmetric; j++) {    for (int i=0; (i < n) & issymmetric; i++) {      issymmetric=(A[i][j] == A[j][i]);    }  }  if (issymmetric) {    for (int i=0; i < n; i++) {      for (int j=0; j < n; j++) {        V[i][j]=A[i][j];      }    }    tred2();    tql2();  } else {    H=new double[n][n];    ort=new double[n];    for (int j=0; j < n; j++) {      for (int i=0; i < n; i++) {        H[i][j]=A[i][j];      }    }    orthes();    hqr2();  }}  }
class C{  public void removePadding(){  if (padding != null) {    box.remove(padding);  }}  }
class C{  public static TableMetadata readTableMetadata(String fileName) throws IOException {  byte[] encoded=Files.readAllBytes(Paths.get(fileName));  return TableMetadata.fromJson(new String(encoded,StandardCharsets.UTF_8));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_CANT_USE_DUPLICATED_ITEM(String value0){  return new SM_SYSTEM_MESSAGE(1400177,value0);}  }
class C{  public Entry toCacheEntry(byte[] data){  Entry e=new Entry();  e.data=data;  e.etag=etag;  e.serverDate=serverDate;  e.lastModified=lastModified;  e.ttl=ttl;  e.softTtl=softTtl;  e.responseHeaders=responseHeaders;  return e;}  }
class C{  public ElementType parent(){  return theType.parent();}  }
class C{  private static void applyLightDown(ChunkManager manager,int currentX,int currentY,float lightValue){  if (currentX < 0 || currentX >= (ChunkManager.CHUNKS_X * Chunk.CHUNK_SIZE) || currentY < 0 || currentY >= (ChunkManager.CHUNKS_Y * Chunk.CHUNK_SIZE)) {    return;  }  Chunk posChunk=manager.getChunkFromTilePos(currentX,currentY);  int posChunkX=currentX - (posChunk.getStartX() * Chunk.CHUNK_SIZE);  int posChunkY=currentY - (posChunk.getStartY() * Chunk.CHUNK_SIZE);  lightValue-=BlockManager.getBlock(posChunk.getBlock(posChunkX,posChunkY)).getLightBlockingAmount();  float totalLight=lightValue;  if (totalLight <= posChunk.getLightValue(posChunkX,posChunkY))   return;  posChunk.setLightValue(totalLight,posChunkX,posChunkY);  if (lightValue <= LightUtils.MIN_LIGHT_VALUE)   return;  applyLightDown(manager,currentX,currentY - 1,lightValue);}  }
class C{  public static DataFile makeDataFile(URL definitionUrl,String dataFileName) throws DataFileException {  ModelDataFileReader reader=ModelDataFileReader.getModelDataFileReader(definitionUrl);  if (reader == null) {    throw new DataFileException("Could not load definition file located at \"" + definitionUrl + "\"");  }  ModelDataFile modelDataFile=reader.getModelDataFile(dataFileName);  if (modelDataFile == null) {    throw new DataFileException("Could not find file definition for data file named \"" + dataFileName + "\"");  }  DataFile dataFile=new DataFile(modelDataFile);  return dataFile;}  }
class C{  @Override public void write(int b) throws IOException {  out.write(b);  md5.Update((byte)b);}  }
class C{  public GroupsEditQuery obsceneWords(List<String> value){  return unsafeParam("obscene_words",value);}  }
class C{  public OutputStream put(String key) throws FileNotFoundException {  return new xFileOutputStream(mCache.newFile(key));}  }
class C{  @Override public Object validate(Object content,ValidationContext context,ValidatedInfo validatedInfo) throws InvalidDatatypeValueException {  if (context == null)   context=fEmptyContext;  if (validatedInfo == null)   validatedInfo=new ValidatedInfo(); else   validatedInfo.memberType=null;  boolean needNormalize=context == null || context.needToNormalize();  Object ob=getActualValue(content,context,validatedInfo,needNormalize);  validate(context,validatedInfo);  return ob;}  }
class C{  public Vector add(Vector vec){  x+=vec.x;  y+=vec.y;  z+=vec.z;  return this;}  }
class C{  public static int exportTaxon2ReadIds(String format,Director dir,File file,char separator,ProgressListener progressListener) throws IOException {  int totalLines=0;  try {    final MainViewer viewer=dir.getMainViewer();    try (BufferedWriter w=new BufferedWriter(new FileWriter(file))){      final IConnector connector=viewer.getDir().getDocument().getConnector();      final IClassificationBlock classificationBlock=connector.getClassificationBlock(viewer.getClassName());      final java.util.Collection<Integer> taxonIds=viewer.getSelectedIds();      progressListener.setSubtask("Taxa to read Ids");      progressListener.setMaximum(taxonIds.size());      progressListener.setProgress(0);      for (      int taxonId : taxonIds) {        Set<Integer> allBelow;        Node v=viewer.getTaxId2Node(taxonId);        if (v.getOutDegree() == 0)         allBelow=TaxonomyData.getTree().getAllDescendants(taxonId); else {          allBelow=new HashSet<>();          allBelow.add(taxonId);        }        final String name=getTaxonLabelSource(dir,format,taxonId);        if (name != null) {          w.write(name);          for (          int id : allBelow) {            if (classificationBlock.getSum(id) > 0) {              try (IReadBlockIterator it=connector.getReadsIterator(viewer.getClassName(),id,0,10000,true,false)){                while (it.hasNext()) {                  String readId=it.next().getReadName();                  w.write(separator + "" + readId);                }              }               w.write("\n");              totalLines++;              progressListener.checkForCancel();            }          }        }        progressListener.incrementProgress();      }    }   } catch (  CanceledException canceled) {    System.err.println("USER CANCELED");  }  return totalLines;}  }
class C{  private void tinkerPreVerifiedCrashHandler(Throwable ex){  if (Utils.isXposedExists(ex)) {    ApplicationLike applicationLike=TinkerManager.getTinkerApplicationLike();    if (applicationLike == null || applicationLike.getApplication() == null) {      return;    }    if (!TinkerApplicationHelper.isTinkerLoadSuccess(applicationLike)) {      return;    }    boolean isCausedByXposed=false;    if (ShareTinkerInternals.isVmArt()) {      isCausedByXposed=true;    } else     if (ex instanceof IllegalAccessError && ex.getMessage().contains(DALVIK_XPOSED_CRASH)) {      isCausedByXposed=true;    }    if (isCausedByXposed) {      SampleTinkerReport.onXposedCrash();      TinkerLog.e(TAG,"have xposed: just clean tinker");      ShareTinkerInternals.killAllOtherProcess(applicationLike.getApplication());      TinkerApplicationHelper.cleanPatch(applicationLike);      ShareTinkerInternals.setTinkerDisableWithSharedPreferences(applicationLike.getApplication());      Toast.makeText(applicationLike.getApplication(),"please uninstall Xposed, illegal modify the app",Toast.LENGTH_LONG).show();    }  }}  }
class C{  @PostConstruct public void loadRuleParentIds(){  LOGGER.trace("Entering loadRuleParentIds()...");  LOGGER.trace("Trying to get cache lock for " + RuleTagCache.cacheInitializedKey);  clusterCache.acquireWriteLockOnKey(RuleTagCache.cacheInitializedKey);  try {    Boolean isRuleCachePostProcessed=Boolean.FALSE;    if (clusterCache.hasKey(ruleCachePostProcessedKey)) {      isRuleCachePostProcessed=(Boolean)clusterCache.getCopy(ruleCachePostProcessedKey);    }    if (!isRuleCachePostProcessed.booleanValue()) {      LOGGER.info("Setting parent ids for rules...");      ThreadPoolExecutor threadPoolExecutor=new ThreadPoolExecutor(threadPoolMin,threadPoolMax,5,TimeUnit.SECONDS,new ArrayBlockingQueue<Runnable>(1000));      LoaderTask task=new LoaderTask();      int counter=0;      for (      Long key : ruleTagCache.getKeys()) {        task.addKey(key);        counter++;        if (counter == 500) {          threadPoolExecutor.execute(task);          task=new LoaderTask();          counter=0;        }      }      threadPoolExecutor.execute(task);      threadPoolExecutor.shutdown();      try {        threadPoolExecutor.awaitTermination(1200,TimeUnit.SECONDS);      } catch (      InterruptedException e) {        LOGGER.warn("Exception caught while waiting for rule parent id loading threads to complete (waited longer then timeout?): ",e);      }      LOGGER.info("... rule parent ids set.");      clusterCache.put(ruleCachePostProcessedKey,Boolean.TRUE);    } else {      LOGGER.info("Cache " + RuleTagCache.cacheInitializedKey + " was already initialized. No need for action..");    }  }  finally {    clusterCache.releaseWriteLockOnKey(RuleTagCache.cacheInitializedKey);    LOGGER.trace("Released cache lock .. for " + RuleTagCache.cacheInitializedKey);  }  LOGGER.trace("Leaving loadRuleParentIds()");}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_REMAIN_CHANGE_CHANNEL_COOLTIME(String durationtime0,String durationtime1){  return new SM_SYSTEM_MESSAGE(1400068,durationtime0,durationtime1);}  }
class C{  public void updateKey(byte[] newKey){  this.key=newKey;}  }
class C{  private static int lastIndexOf(Object o,Object[] elements,int index){  if (o == null) {    for (int i=index; i >= 0; i--)     if (elements[i] == null)     return i;  } else {    for (int i=index; i >= 0; i--)     if (o.equals(elements[i]))     return i;  }  return -1;}  }
class C{  public synchronized void noteUnsettledTxn(Object tid){  if (operationsLogger.isLoggable(Level.FINER)) {    operationsLogger.entering(TxnManagerImpl.class.getName(),"noteUnsettledTxn",new Object[]{tid});  }  unsettledtxns.add(tid);  notifyAll();  if (operationsLogger.isLoggable(Level.FINER)) {    operationsLogger.exiting(TxnManagerImpl.class.getName(),"noteUnsettledTxn");  }}  }
class C{  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {  in.defaultReadObject();  if (policy == null) {    throw new InvalidObjectException("null policy");  }  if (classpath == null) {    throw new InvalidObjectException("null class path");  }  if (log == null) {    throw new InvalidObjectException("null log");  }  if (serverOptions == null) {    throw new InvalidObjectException("null server options");  }  if (serverProperties == null) {    throw new InvalidObjectException("null server properties");  }  if (host == null) {    throw new InvalidObjectException("null activation host name");  }  if (port <= 0) {    throw new InvalidObjectException("invalid activation port: " + port);  }}  }
class C{  public PhotosPutTagQuery y(Float value){  return unsafeParam("y",value);}  }
class C{  public V remove(Object key){  return backedMap.remove(key);}  }
class C{  public static String checkNull(String string1,String string2,String string3){  if (string1 != null)   return string1; else   if (string2 != null)   return string2; else   if (string3 != null)   return string3; else   return "";}  }
class C{  public FactoryConfigurationError(java.lang.String msg,java.lang.Exception e){  super(msg);  nested=e;}  }
class C{  @Override public void undo(Transaction tx){}  }
class C{  private void createVendorOptionPanel(){  vendorOptionFillFactory=new VendorOptionFillFactory(getPanelId(),getFunctionManager());  List<VendorOptionInterface> voList=vendorOptionFillFactory.getVendorOptionList();  if (voList != null) {    for (    VendorOptionInterface vendorOption : voList) {      vendorOption.setParentPanel(this);    }  }}  }
class C{  @Override public void readAttributes(DataSourceAttributeListInterface attributeData){  if (attributeData == null) {    return;  }  List<DataSourceAttributeData> valueMap=new ArrayList<DataSourceAttributeData>();  SimpleFeatureCollection featureCollection=dataSourceInfo.getFeatureCollection();  if (featureCollection != null) {    SimpleFeatureIterator iterator=featureCollection.features();    Map<Integer,Name> fieldNameMap=dataSourceInfo.getFieldNameMap();    Map<Integer,Class<?>> fieldTypeMap=dataSourceInfo.getFieldTypeMap();    if (iterator.hasNext()) {      SimpleFeature feature=iterator.next();      List<Object> attributes=feature.getAttributes();      for (int i=0; i < attributes.size(); i++) {        Name fieldName=fieldNameMap.get(i);        Class<?> type=fieldTypeMap.get(i);        if (type == Geometry.class) {          Object value=feature.getAttribute(fieldName);          type=value.getClass();        }        DataSourceAttributeData data=new DataSourceAttributeData(fieldName,type,attributes.get(i));        valueMap.add(data);      }    }  }  attributeData.setData(valueMap);}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  public void addObserver(final FileAlterationObserver observer){  if (observer != null) {    observers.add(observer);  }}  }
class C{  protected void createImageDescriptor(String id,URL baseURL){  URL url=null;  try {    url=new URL(baseURL,IRevisionGraphConstants.ICON_PATH + id);  } catch (  MalformedURLException e) {  }  ImageDescriptor desc=ImageDescriptor.createFromURL(url);  imageDescriptors.put(id,desc);}  }
class C{  public static final String name(SimpleGroupPath group,MetricName metric){  return name(Stream.concat(group.getPath().stream(),metric.getPath().stream()).collect(Collectors.joining(".")));}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  getViewer().selectComponent(getViewer().getUpgmaTab());}  }
class C{  public static void removeAllServices() throws RpcException {  try {    ServicePublisher.removeAllServices();  } catch (  RegistryException e) {    throw new RpcException("error while removing all services",e);  }}  }
class C{  public static boolean isBlazeProject(Project project){  return BlazeImportSettingsManager.getInstance(project).getImportSettings() != null;}  }
class C{  public static boolean hasExtension(String extension){  if (extension == null || extension.isEmpty()) {    return false;  }  return extensionToMimeTypeMap.containsKey(extension);}  }
class C{  @Override public int run(){  this.model=setupModel();  return super.run();}  }
class C{  public boolean hasNavigationBar(){  return mHasNavigationBar;}  }
class C{  public Object clone(){  byte[] newData=new byte[length];  System.arraycopy(data,0,newData,0,newData.length);  MetaMessage event=new MetaMessage(newData);  return event;}  }
class C{  public AlreadySpawnedException(){  super();}  }
class C{  protected UtilsResolveScreenNameQuery screenName(String value){  return unsafeParam("screen_name",value);}  }
class C{  public static ToolbarTapTarget forToolbarOverflow(android.widget.Toolbar toolbar,CharSequence title){  return forToolbarOverflow(toolbar,title,null);}  }
class C{  public double dot(Vector other){  return x * other.x + y * other.y + z * other.z;}  }
class C{  public static Map<String,Object> copyPartyContactMechs(DispatchContext dctx,Map<String,? extends Object> context){  Delegator delegator=dctx.getDelegator();  LocalDispatcher dispatcher=dctx.getDispatcher();  GenericValue userLogin=(GenericValue)context.get("userLogin");  String partyIdFrom=(String)context.get("partyIdFrom");  String partyIdTo=(String)context.get("partyIdTo");  Locale locale=(Locale)context.get("locale");  try {    List<Map<String,Object>> valueMaps=ContactMechWorker.getPartyContactMechValueMaps(delegator,partyIdFrom,false);    for (    Map<String,Object> thisMap : valueMaps) {      GenericValue contactMech=(GenericValue)thisMap.get("contactMech");      GenericValue partyContactMech=(GenericValue)thisMap.get("partyContactMech");      List<GenericValue> partyContactMechPurposes=UtilGenerics.checkList(thisMap.get("partyContactMechPurposes"));      String contactMechId=contactMech.getString("contactMechId");      Map<String,Object> serviceResults=dispatcher.runSync("createPartyContactMech",UtilMisc.<String,Object>toMap("partyId",partyIdTo,"userLogin",userLogin,"contactMechId",contactMechId,"fromDate",UtilDateTime.nowTimestamp(),"allowSolicitation",partyContactMech.getString("allowSolicitation"),"extension",partyContactMech.getString("extension")));      if (ServiceUtil.isError(serviceResults)) {        return serviceResults;      }      for (      GenericValue purpose : partyContactMechPurposes) {        Map<String,Object> input=UtilMisc.toMap("partyId",partyIdTo,"contactMechId",contactMechId,"userLogin",userLogin);        input.put("contactMechPurposeTypeId",purpose.getString("contactMechPurposeTypeId"));        serviceResults=dispatcher.runSync("createPartyContactMechPurpose",input);        if (ServiceUtil.isError(serviceResults)) {          return serviceResults;        }      }    }  } catch (  GenericServiceException e) {    Debug.logError(e,e.getMessage(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"PartyCannotCopyPartyContactMech",UtilMisc.toMap("errorString",e.getMessage()),locale));  }  return ServiceUtil.returnSuccess();}  }
class C{  public void addNewRule(Rule rule){  if (this.symbolData.getFeatureTypeStyle() == null) {    ConsoleManager.getInstance().error(this,"featureTypeStyle == null");  } else {    List<Rule> ruleList=(List<Rule>)this.symbolData.getFeatureTypeStyle().rules();    ruleList.add(rule);  }}  }
class C{  protected static void checkValue(Object value){  if (!(value instanceof Long))   throw new IllegalArgumentException("value is not a Long");}  }
class C{  public static String keepCartUpdated(HttpServletRequest request,HttpServletResponse response){  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");  HttpSession session=request.getSession();  ShoppingCart cart=getCartObject(request);  if (cart.getUserLogin() == null) {    GenericValue userLogin=(GenericValue)session.getAttribute("userLogin");    if (userLogin != null) {      try {        cart.setUserLogin(userLogin,dispatcher);      } catch (      CartItemModifyException e) {        Debug.logWarning(e,module);      }    }  }  if (cart.getAutoUserLogin() == null) {    GenericValue autoUserLogin=(GenericValue)session.getAttribute("autoUserLogin");    if (autoUserLogin != null) {      if (cart.getUserLogin() == null) {        try {          cart.setAutoUserLogin(autoUserLogin,dispatcher);        } catch (        CartItemModifyException e) {          Debug.logWarning(e,module);        }      } else {        cart.setAutoUserLogin(autoUserLogin);      }    }  }  Locale locale=UtilHttp.getLocale(request);  if (cart.getLocale() == null || !locale.equals(cart.getLocale())) {    cart.setLocale(locale);  }  return "success";}  }
class C{  private void copyIn(Object[] toCopyIn,int first,int n){  int limit=first + n;  if (limit > toCopyIn.length)   throw new IndexOutOfBoundsException();  Object[] newElements=copyOfRange(toCopyIn,first,limit,Object[].class);synchronized (this) {    setArray(newElements);  }}  }
class C{  public void loadIdentity(){  m01=m02=m10=m12=m20=m21=0;  m00=m11=m22=1;}  }
class C{  private void deletePassword(Intent data){  if (data != null && data.hasExtra(PASSWORD_LIST_DELETED_ID)) {    int deletedId=data.getIntExtra(PASSWORD_LIST_DELETED_ID,-1);    boolean isException=data.getBooleanExtra(DELETED_ITEM_IS_EXCEPTION,false);    if (isException) {      mPasswordManagerHandler.removeSavedPasswordException(deletedId);    } else {      mPasswordManagerHandler.removeSavedPasswordEntry(deletedId);    }  }}  }
class C{  @Override public BigFraction divide(final BigFraction fraction){  MathUtils.checkNotNull(fraction,LocalizedCoreFormats.FRACTION);  if (fraction.numerator.signum() == 0) {    throw new MathRuntimeException(LocalizedCoreFormats.ZERO_DENOMINATOR);  }  if (numerator.signum() == 0) {    return ZERO;  }  return multiply(fraction.reciprocal());}  }
class C{  public double readDouble() throws JMSException {  initializeReading();  try {    if (this.dataIn.available() == 0) {      throw new MessageEOFException("reached end of data");    }    this.dataIn.mark(65);    int type=this.dataIn.read();    if (type == _DOUBLE) {      return this.dataIn.readDouble();    }    if (type == _FLOAT) {      return this.dataIn.readFloat();    }    if (type == _STRING) {      return Double.valueOf(this.dataIn.readUTF()).doubleValue();    }    if (type == _NULL) {      this.dataIn.reset();      throw new NullPointerException("Cannot convert _NULL value to double.");    } else {      this.dataIn.reset();      throw new MessageFormatException(" not a double type");    }  } catch (  NumberFormatException mfe) {    try {      this.dataIn.reset();    } catch (    IOException ioe) {      JMSException jmsEx=new JMSException("reset failed");      jmsEx.setLinkedException(ioe);    }    throw mfe;  }catch (  EOFException e) {    JMSException jmsEx=new MessageEOFException(e.toString());    jmsEx.setLinkedException(e);    throw jmsEx;  }catch (  IOException e) {    JMSException jmsEx=new MessageFormatException(e.toString());    jmsEx.setLinkedException(e);    throw jmsEx;  }}  }
class C{  public XIncludeParserConfiguration(SymbolTable symbolTable,XMLGrammarPool grammarPool,XMLComponentManager parentSettings){  super(symbolTable,grammarPool,parentSettings);  fXIncludeHandler=new XIncludeHandler();  addCommonComponent(fXIncludeHandler);  final String[] recognizedFeatures={ALLOW_UE_AND_NOTATION_EVENTS,XINCLUDE_FIXUP_BASE_URIS,XINCLUDE_FIXUP_LANGUAGE};  addRecognizedFeatures(recognizedFeatures);  final String[] recognizedProperties={XINCLUDE_HANDLER,NAMESPACE_CONTEXT};  addRecognizedProperties(recognizedProperties);  setFeature(ALLOW_UE_AND_NOTATION_EVENTS,true);  setFeature(XINCLUDE_FIXUP_BASE_URIS,true);  setFeature(XINCLUDE_FIXUP_LANGUAGE,true);  setProperty(XINCLUDE_HANDLER,fXIncludeHandler);  setProperty(NAMESPACE_CONTEXT,new XIncludeNamespaceSupport());}  }
class C{  public boolean equals(Object obj){  return (obj instanceof ClientMaxPrincipalType && Constraint.equal(classes,((ClientMaxPrincipalType)obj).classes));}  }
class C{  public void action(){  Location[] lLocations;  NGramDocumentComparatorAgent aAgent=((NGramDocumentComparatorAgent)myAgent);  if ((lLocations=aAgent.getActiveContainerList()) == null)   return;  boolean bMigrate=Math.random() < aAgent.MigrationProbability;  bMigrate=bMigrate && (lLocations.length > 1);  if (bMigrate) {    int iServerIdx=(int)Math.floor(Math.random() * (double)lLocations.length);    int iCnt=0;    while (lLocations[iServerIdx].getID().equals(myAgent.here().getID())) {      ++iServerIdx;      iServerIdx%=lLocations.length;      if (++iCnt == 3)       break;    }    if (lLocations[iServerIdx].getID().equals(myAgent.here().getID())) {      myAgent.addBehaviour(new InformForCompleteMoveBehaviour());      if (!aAgent.Silent) {synchronized (System.err) {          System.err.println("Local execution...");        }      }      return;    } else     if (!aAgent.Silent)     System.err.println("Migrating to " + lLocations[iServerIdx].getName());    myAgent.doMove(lLocations[iServerIdx]);  } else {    myAgent.addBehaviour(new InformForCompleteMoveBehaviour());    if (!aAgent.Silent) {synchronized (System.err) {        System.err.println("Local execution...");      }    }    return;  }}  }
class C{  public boolean isApplicable(){  ChartViewer viewer=(ChartViewer)getViewer();  return viewer.getChartData().getNumberOfSeries() > 0 && viewer.getChartSelection().getSelectedSeries().size() < viewer.getChartData().getNumberOfSeries();}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public TypeDecl type(){  if (type_computed) {    return type_value;  }  ASTNode$State state=state();  int num=state.boundariesCrossed;  boolean isFinal=this.is$Final();  type_value=type_compute();  if (isFinal && num == state().boundariesCrossed)   type_computed=true;  return type_value;}  }
class C{  public void addImportDecl(ImportDecl node){  List<ImportDecl> list=(parent == null || state == null) ? getImportDeclListNoTransform() : getImportDeclList();  list.addChild(node);}  }
class C{  @Override public int read(byte[] b,int off,int len) throws IOException {  int sampleSizeInBytes=frameSize / inputChannels;  int outputFrameSize=sampleSizeInBytes * 2;  int nFrames=len / outputFrameSize;  byte[] inputBytes=new byte[nFrames * frameSize];  int nInputBytes=super.read(inputBytes,0,inputBytes.length);  if (nInputBytes <= 0)   return nInputBytes;  if (inputChannels == 1) {    if (outputMode == AudioPlayer.STEREO) {      for (int i=0, j=off; i < nInputBytes; i+=frameSize, j+=outputFrameSize) {        for (int k=0; k < sampleSizeInBytes; k++) {          b[j + k]=b[j + sampleSizeInBytes + k]=inputBytes[i + k];        }      }    } else     if (outputMode == AudioPlayer.LEFT_ONLY) {      if (!getFormat().getEncoding().equals(Encoding.PCM_SIGNED)) {        throw new IllegalArgumentException("Channel muting supported only for PCM_SIGNED encoding, got " + getFormat().getEncoding());      }      for (int i=0, j=off; i < nInputBytes; i+=frameSize, j+=outputFrameSize) {        for (int k=0; k < sampleSizeInBytes; k++) {          b[j + k]=inputBytes[i + k];          b[j + sampleSizeInBytes + k]=0;        }      }    } else {      assert outputMode == AudioPlayer.RIGHT_ONLY : "Unexpected output mode: " + outputMode;      if (!getFormat().getEncoding().equals(Encoding.PCM_SIGNED)) {        throw new IllegalArgumentException("Channel muting supported only for PCM_SIGNED encoding, got " + getFormat().getEncoding());      }      for (int i=0, j=off; i < nInputBytes; i+=frameSize, j+=outputFrameSize) {        for (int k=0; k < sampleSizeInBytes; k++) {          b[j + k]=0;          b[j + sampleSizeInBytes + k]=inputBytes[i + k];        }      }    }  } else {    if (outputMode == AudioPlayer.STEREO) {      for (int i=0, j=off; i < nInputBytes; i+=frameSize, j+=outputFrameSize) {        System.arraycopy(inputBytes,i,b,j,outputFrameSize);      }    } else     if (outputMode == AudioPlayer.LEFT_ONLY) {      if (!getFormat().getEncoding().equals(Encoding.PCM_SIGNED)) {        throw new IllegalArgumentException("Channel muting supported only for PCM_SIGNED encoding, got " + getFormat().getEncoding());      }      for (int i=0, j=off; i < nInputBytes; i+=frameSize, j+=outputFrameSize) {        for (int k=0; k < sampleSizeInBytes; k++) {          b[j + k]=inputBytes[i + k];          b[j + sampleSizeInBytes + k]=0;        }      }    } else {      assert outputMode == AudioPlayer.RIGHT_ONLY : "Unexpected output mode: " + outputMode;      if (!getFormat().getEncoding().equals(Encoding.PCM_SIGNED)) {        throw new IllegalArgumentException("Channel muting supported only for PCM_SIGNED encoding, got " + getFormat().getEncoding());      }      for (int i=0, j=off; i < nInputBytes; i+=frameSize, j+=outputFrameSize) {        for (int k=0; k < sampleSizeInBytes; k++) {          b[j + k]=0;          b[j + sampleSizeInBytes + k]=inputBytes[i + sampleSizeInBytes + k];        }      }    }  }  return 2 * nInputBytes / inputChannels;}  }
class C{  public CatalogException(Exception e){  super();  this.exceptionType=WRAPPER;  this.exception=e;}  }
class C{  public BeyondExtended(Expression expression1,Expression expression2){  super(expression1,expression2);}  }
class C{  public void logoutUser(){  this.firebaseAuth.signOut();}  }
class C{  public static ArrayList<String> splitString(String text){  return splitString(text,MAX_SIZE);}  }
class C{  private String uploadImage(String name,byte[] bytes) throws IOException {  FileResource fileResource=new FileResource(name,MimeTypeUtils.IMAGE_PNG.toString(),bytes.length,ByteSource.wrap(bytes).hash(Hashing.md5()).toString(),FileResourceDomain.PUSH_ANALYSIS);  fileResourceService.saveFileResource(fileResource,bytes);  ExternalFileResource externalFileResource=new ExternalFileResource();  externalFileResource.setFileResource(fileResource);  externalFileResource.setExpires(null);  String accessToken=externalFileResourceService.saveExternalFileResource(externalFileResource);  return systemSettingManager.getInstanceBaseUrl() + "/api/externalFileResources/" + accessToken;}  }
class C{  boolean isRecovering(){  return recoverMessages.size() > 0;}  }
class C{  final void addHalfEdges(DoubleEdgeListVertex v1,DoubleEdgeListVertex v2){  DoubleEdgeListFace face=new DoubleEdgeListFace();  DoubleEdgeListHalfEdge left=new DoubleEdgeListHalfEdge();  DoubleEdgeListHalfEdge right=new DoubleEdgeListHalfEdge();  DoubleEdgeListFace referenceDoubleEdgeListFace=this.getReferenceFace(v1,v2);  DoubleEdgeListHalfEdge prev1=this.getPreviousEdge(v1,referenceDoubleEdgeListFace);  DoubleEdgeListHalfEdge prev2=this.getPreviousEdge(v2,referenceDoubleEdgeListFace);  face.edge=left;  referenceDoubleEdgeListFace.edge=right;  left.face=face;  left.next=prev2.next;  left.origin=v1;  left.twin=right;  right.face=referenceDoubleEdgeListFace;  right.next=prev1.next;  right.origin=v2;  right.twin=left;  prev1.next=left;  prev2.next=right;  DoubleEdgeListHalfEdge curr=left.next;  while (curr != left) {    curr.face=face;    curr=curr.next;  }  this.edges.add(left);  this.edges.add(right);  this.faces.add(face);}  }
class C{  private void updateUrlViewportBounds(Rect out,VisualState visualState,boolean ignoreTranslationY){  int leftViewPosition=getViewBoundsLeftOfLocationBar(visualState);  int rightViewPosition=getViewBoundsRightOfLocationBar(visualState);  leftViewPosition-=mUrlBackgroundPadding.left;  if (mUrlExpansionPercent != 0f) {    leftViewPosition*=(1f - mUrlExpansionPercent);    leftViewPosition-=mUrlBackgroundPadding.left * mUrlExpansionPercent;  }  rightViewPosition+=mUrlBackgroundPadding.right;  if (mUrlExpansionPercent != 0f) {    rightViewPosition+=((getWidth() - rightViewPosition) * mUrlExpansionPercent);    rightViewPosition+=mUrlBackgroundPadding.right * mUrlExpansionPercent;  }  out.set(leftViewPosition,0,rightViewPosition,(int)(mPhoneLocationBar.getMeasuredHeight() + (getHeight() - mPhoneLocationBar.getMeasuredHeight() + mUrlBackgroundPadding.bottom + mUrlBackgroundPadding.top) * mUrlExpansionPercent));  float yOffset=ignoreTranslationY ? mPhoneLocationBar.getTop() : mPhoneLocationBar.getY();  out.offset(0,(int)(yOffset - (mUrlBackgroundPadding.top * mUrlExpansionPercent)));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_GAME_TIME(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1390146,value0,value1);}  }
class C{  public static Pose matrixToPose(Matrix4 m){  Vector3 p=m.getTranslation();  Quaternion q=new Quaternion();  q.fromMatrix(m);  q.conjugate();  return new Pose(p,q);}  }
class C{  public static Long[] transformLongArray(long[] source){  Long[] destin=new Long[source.length];  for (int i=0; i < source.length; i++) {    destin[i]=source[i];  }  return destin;}  }
class C{  public void build(NotLikeNode node) throws SQLException {  if (node.isJoined())   throwIllegalJoinExpressionException(node);  ColumnNode col=(ColumnNode)node.getLeftChild();  QueryTableData tableData=col.getColumnData().getColumnTableData();  Object value=((LiteralNode)node.getRightChild()).getConvertedObject(tableData.getTypeDesc(),col.getColumnPath());  String regex=((String)value).replaceAll("%",".*").replaceAll("_",".");  NotRegexRange range=new NotRegexRange(col.getColumnPath(),col.getFunctionCallDescription(),regex);  node.setTemplate(new QueryTemplatePacket(tableData,query.getQueryResultType(),col.getColumnPath(),range));}  }
class C{  public static Histogram groupByHistogram(Histogram hist,Set<String> groupFlds,Set<AggregationFn> aggFns){  if (Double.compare(hist.recordsOutput(),1.0) < 0)   return new Histogram(hist.fields());  double dvProd=1.0;  for (  String fld : groupFlds) {    double dv=0.0;    for (    Bucket bkt : hist.buckets(fld))     dv+=bkt.distinctValues();    dvProd*=dv;  }  double numGroups=Math.min(dvProd,hist.recordsOutput());  double gbReduction=numGroups / hist.recordsOutput();  Histogram gbHist=new Histogram(groupFlds);  for (  String fld : groupFlds) {    for (    Bucket bkt : hist.buckets(fld)) {      double newFreq=bkt.frequency() * gbReduction;      if (Double.compare(newFreq,1.0) < 0)       continue;      gbHist.addBucket(fld,new Bucket(bkt.valueRange(),newFreq,bkt.distinctValues(),bkt.valuePercentiles()));    }  }  if (aggFns != null) {    for (    AggregationFn aggFn : aggFns) {      String argFld=aggFn.argumentFieldName();      String fld=aggFn.fieldName();      if (aggFn.getClass().equals(SumFn.class))       gbHist.addBucket(fld,sumBucket(hist.buckets(argFld),numGroups)); else       if (aggFn.getClass().equals(AvgFn.class))       gbHist.addBucket(fld,avgBucket(hist.buckets(argFld),numGroups)); else       if (aggFn.getClass().equals(CountFn.class))       gbHist.addBucket(fld,countBucket(hist.buckets(argFld),numGroups)); else       if (aggFn.getClass().equals(DistinctCountFn.class))       gbHist.addBucket(fld,distinctCountBucket(hist.buckets(argFld),numGroups)); else       if (aggFn.getClass().equals(MinFn.class))       gbHist.addBucket(fld,minBucket(hist.buckets(argFld),numGroups)); else       if (aggFn.getClass().equals(MaxFn.class))       gbHist.addBucket(fld,maxBucket(hist.buckets(argFld),numGroups)); else       throw new UnsupportedOperationException();    }  }  return syncHistogram(gbHist);}  }
class C{  public static ToolbarTapTarget forToolbarOverflow(Toolbar toolbar,CharSequence title,@Nullable CharSequence description){  return new ToolbarTapTarget(toolbar,false,title,description);}  }
class C{  @Override public boolean accept(File file){  String name=file.getName();  for (  String wildcard : wildcards) {    if (FilenameUtils.wildcardMatch(name,wildcard,caseSensitivity)) {      return true;    }  }  return false;}  }
class C{  public SourceCommandTag(final Long id,final String name,final int sourceTimeout,final int sourceRetries,final HardwareAddress hwAddress){  this.id=id;  this.name=name;  this.sourceTimeout=sourceTimeout;  this.sourceRetries=sourceRetries;  this.hardwareAddress=hwAddress;}  }
class C{  private static SnapCandidate createSnapCandidate(ConstraintWidget widget,ConstraintAnchor.Type type,int x,int y){  SnapCandidate candidate=new SnapCandidate();  candidate.source=widget.getAnchor(type);  ConstraintWidget owner=widget.getParent();  ConstraintAnchor anchor=new ConstraintAnchor(owner,type);  candidate.x=x;  candidate.y=y;  candidate.target=anchor;  return candidate;}  }
class C{  public WallEditQuery placeId(Integer value){  return unsafeParam("place_id",value);}  }
class C{  public Builder bufferSize(int bufferSize){  this._bufferSize=bufferSize;  return this;}  }
class C{  private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException {  in.defaultReadObject();  _identityExportObjTable=new HashMap<WeakKey,WeakReference<Remote>>();}  }
class C{  public boolean findNext(String regularExpression){  return findFirst(regularExpression);}  }
class C{  public Attr createAttributeNS(String namespaceURI,String qualifiedName,String localpart) throws DOMException {  return new AttrNSImpl(this,namespaceURI,qualifiedName,localpart);}  }
class C{  public boolean first() throws GenericEntityException {  try {    return resultSet.first();  } catch (  SQLException e) {    if (!closed) {      this.close();      Debug.logWarning("Warning: auto-closed EntityListIterator because of exception: " + e.toString(),module);    }    throw new GenericEntityException("Error setting the cursor to first",e);  }}  }
class C{  public void addRule(String ruleExpression,T resultIfMatched){  mRuleMap.add(new MimeMatcherRule(ruleExpression,resultIfMatched));}  }
class C{  @SuppressLint("NewApi") public static void postInvalidateOnAnimation(View view){  if (Build.VERSION.SDK_INT >= 16)   view.postInvalidateOnAnimation(); else   view.postInvalidateDelayed(10);}  }
class C{  public static String separatorsToWindows(String path){  if (path == null || path.indexOf(UNIX_SEPARATOR) == -1) {    return path;  }  return path.replace(UNIX_SEPARATOR,WINDOWS_SEPARATOR);}  }
class C{  public HeaderIterator iterator(){  return new SaveListHeaderIterator(this.headers,null);}  }
class C{  private boolean isDerivedByRestriction(String ancestorNS,String ancestorName,XSTypeDefinition type){  XSTypeDefinition oldType=null;  while (type != null && type != oldType) {    if ((ancestorName.equals(type.getName())) && ((ancestorNS != null && ancestorNS.equals(type.getNamespace())) || (type.getNamespace() == null && ancestorNS == null))) {      return true;    }    oldType=type;    type=type.getBaseType();  }  return false;}  }
class C{  @deprecated public static final boolean equals(CharSequence other,int codepoint){  return equals(codepoint,other);}  }
class C{  public DartRandom(){  super((EmptyConstructorMarker)null,thisType);  rnd=new SecureRandom();}  }
class C{  private Response<Bitmap> doParse(NetworkResponse response){  byte[] data=response.data;  BitmapFactory.Options decodeOptions=new BitmapFactory.Options();  Bitmap bitmap=null;  if (mMaxWidth == 0 && mMaxHeight == 0) {    decodeOptions.inPreferredConfig=mDecodeConfig;    bitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);  } else {    decodeOptions.inJustDecodeBounds=true;    BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);    int actualWidth=decodeOptions.outWidth;    int actualHeight=decodeOptions.outHeight;    int desiredWidth=getResizedDimension(mMaxWidth,mMaxHeight,actualWidth,actualHeight,mScaleType);    int desiredHeight=getResizedDimension(mMaxHeight,mMaxWidth,actualHeight,actualWidth,mScaleType);    decodeOptions.inJustDecodeBounds=false;    decodeOptions.inSampleSize=findBestSampleSize(actualWidth,actualHeight,desiredWidth,desiredHeight);    Bitmap tempBitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);    if (tempBitmap != null && (tempBitmap.getWidth() > desiredWidth || tempBitmap.getHeight() > desiredHeight)) {      bitmap=Bitmap.createScaledBitmap(tempBitmap,desiredWidth,desiredHeight,true);      tempBitmap.recycle();    } else {      bitmap=tempBitmap;    }  }  if (bitmap == null) {    return Response.error(new ParseError(response));  } else {    return Response.success(bitmap,HttpHeaderParser.parseCacheHeaders(response));  }}  }
class C{  public static InputStream toInputStream(String input,Charset encoding){  return new ByteArrayInputStream(StringCodingUtils.getBytes(input,Charsets.toCharset(encoding)));}  }
class C{  public static int round(double value){  return value > 0 ? (int)(value + 0.5) : -(int)(Math.abs(value) + 0.5);}  }
class C{  @Override public Change updateConfig(Equipment equipment,Properties properties) throws IllegalAccessException {  if ((properties.getProperty("processId")) != null) {    throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,"Reconfiguration of " + "Equipment does not currently allow it to be reassigned to a different Process!");  }  return super.updateConfig(equipment,properties);}  }
class C{  public final void finalize(){  if (LOG.isDebugEnabled()) {    LOG.debug("finalize() - Removing the reference to the TimPersistenManager");  }  persistenceManager=null;}  }
class C{  public static String stringToHex(final String data){  return new String(Hex.encodeHex(ConversionUtils.stringToArray(data)));}  }
class C{  public static double min(double[] data){  double min=Double.NaN;  for (int i=0; i < data.length; i++) {    if (Double.isNaN(data[i]))     continue;    if (Double.isNaN(min) || data[i] < min)     min=data[i];  }  return min;}  }
class C{  public UsersIsAppUserQuery(VkApiClient client,UserActor actor){  super(client,"users.isAppUser",BoolInt.class);  accessToken(actor.getAccessToken());}  }
class C{  protected void expandPanel(StateChangeReason reason){  animatePanelToState(PanelState.EXPANDED,reason);}  }
class C{  public Matrix4f adjoint(Matrix4f store){  if (store == null) {    store=new Matrix4f();  }  float fA0=m00 * m11 - m01 * m10;  float fA1=m00 * m12 - m02 * m10;  float fA2=m00 * m13 - m03 * m10;  float fA3=m01 * m12 - m02 * m11;  float fA4=m01 * m13 - m03 * m11;  float fA5=m02 * m13 - m03 * m12;  float fB0=m20 * m31 - m21 * m30;  float fB1=m20 * m32 - m22 * m30;  float fB2=m20 * m33 - m23 * m30;  float fB3=m21 * m32 - m22 * m31;  float fB4=m21 * m33 - m23 * m31;  float fB5=m22 * m33 - m23 * m32;  store.m00=+m11 * fB5 - m12 * fB4 + m13 * fB3;  store.m10=-m10 * fB5 + m12 * fB2 - m13 * fB1;  store.m20=+m10 * fB4 - m11 * fB2 + m13 * fB0;  store.m30=-m10 * fB3 + m11 * fB1 - m12 * fB0;  store.m01=-m01 * fB5 + m02 * fB4 - m03 * fB3;  store.m11=+m00 * fB5 - m02 * fB2 + m03 * fB1;  store.m21=-m00 * fB4 + m01 * fB2 - m03 * fB0;  store.m31=+m00 * fB3 - m01 * fB1 + m02 * fB0;  store.m02=+m31 * fA5 - m32 * fA4 + m33 * fA3;  store.m12=-m30 * fA5 + m32 * fA2 - m33 * fA1;  store.m22=+m30 * fA4 - m31 * fA2 + m33 * fA0;  store.m32=-m30 * fA3 + m31 * fA1 - m32 * fA0;  store.m03=-m21 * fA5 + m22 * fA4 - m23 * fA3;  store.m13=+m20 * fA5 - m22 * fA2 + m23 * fA1;  store.m23=-m20 * fA4 + m21 * fA2 - m23 * fA0;  store.m33=+m20 * fA3 - m21 * fA1 + m22 * fA0;  return store;}  }
class C{  private void sendMail(){  String emailAddress;  try {    Class<?> stringClass=R.string.class;    Field mailLoggerField=stringClass.getField("mail_logger");    int emailAddressId=(Integer)mailLoggerField.get(null);    emailAddress=getString(emailAddressId);  } catch (  Exception e) {    emailAddress="";  }  ArrayList<Uri> uris=new ArrayList<Uri>();  for (  String file : Log_OC.getLogFileNames()) {    File logFile=new File(mLogPath,file);    if (logFile.exists()) {      uris.add(Uri.fromFile(logFile));    }  }  Intent intent=new Intent(Intent.ACTION_SEND_MULTIPLE);  intent.putExtra(Intent.EXTRA_EMAIL,emailAddress);  String subject=String.format(getString(R.string.log_send_mail_subject),getString(R.string.app_name));  intent.putExtra(Intent.EXTRA_SUBJECT,subject);  intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  intent.setType(MAIL_ATTACHMENT_TYPE);  intent.putParcelableArrayListExtra(Intent.EXTRA_STREAM,uris);  try {    startActivity(intent);  } catch (  ActivityNotFoundException e) {    Toast.makeText(this,getString(R.string.log_send_no_mail_app),Toast.LENGTH_LONG).show();    Log_OC.i(TAG,"Could not find app for sending log history.");  }}  }
class C{  public void addColumnListener(ColumnListener listener){  return;}  }
class C{  public static Intent createWhatsAppShareIntent(String body){  Intent intent=new Intent();  intent.setAction(Intent.ACTION_SEND);  intent.putExtra(Intent.EXTRA_TEXT,body);  intent.setType("text/plain");  intent.setPackage("com.whatsapp");  return intent;}  }
class C{  QueryChanges limit(int limit){  Preconditions.checkArgument(limit > 0);  this.limit=limit;  return this;}  }
class C{  public Code39Reader(){  this(false);}  }
class C{  public void removeDiscoveryListener(DiscoveryListener listener){  listeners.remove(listener);}  }
class C{  public static int extractReads(final ProgressListener progressListener,final String classificationName,final Collection<Integer> classIds,final Map<Integer,String> classId2Name,Map<Integer,Collection<Integer>> classId2Descendants,final String outDirectory,final String outFileName,final Document doc,final boolean summarized) throws IOException, CanceledException {  progressListener.setSubtask("Searching through classification by " + classificationName);  final IConnector connector=doc.getConnector();  int numberOfReads=0;  final IClassificationBlock classificationBlock=connector.getClassificationBlock(classificationName);  if (classificationBlock == null)   return 0;  BufferedWriter w=null;  try {    progressListener.setMaximum(10 * classIds.size());    final boolean useMultipleFileNames=outFileName.contains("%t");    for (    Integer classId : classIds) {      Set<Integer> all=new HashSet<>();      all.add(classId);      if (summarized && classId2Descendants.get(classId) != null)       all.addAll(classId2Descendants.get(classId));      final String outFileFinalName;      if (useMultipleFileNames)       outFileFinalName=outFileName.replaceAll("%t",Basic.toCleanName(classId2Name.get(classId))); else       outFileFinalName=outFileName;      File outFile=new File(outDirectory,outFileFinalName);      for (      Integer id : all) {        if (classificationBlock.getSum(id) > 0) {          try (IReadBlockIterator it=connector.getReadsIterator(classificationName,id,0,10000,true,false)){            while (it.hasNext()) {              if (w == null)               w=new BufferedWriter(new FileWriter(outFile));              IReadBlock readBlock=it.next();              String readHeader=readBlock.getReadHeader();              if (!readHeader.startsWith(">"))               w.write(">");              w.write(readHeader);              if (!readHeader.endsWith("\n"))               w.write("\n");              String readData=readBlock.getReadSequence();              if (readData != null) {                w.write(readData);                if (!readData.endsWith("\n"))                 w.write("\n");              }              numberOfReads++;              progressListener.checkForCancel();            }          }           progressListener.checkForCancel();        }      }      progressListener.incrementProgress();      if (useMultipleFileNames && w != null) {        w.close();        w=null;      }    }  } catch (  CanceledException ex) {    System.err.println("USER CANCELED");  } finally {    if (w != null)     w.close();  }  return numberOfReads;}  }
class C{  public PassthroughRule(String label){  this.label=label;}  }
class C{  private static Comparable castToComparable(Object obj){  try {    return (Comparable)obj;  } catch (  ClassCastException cce) {    throw new IllegalArgumentException("Type " + obj.getClass() + " doesn't implement Comparable, Serialization mode might be different than "+ StorageType.OBJECT+ ".",cce);  }}  }
class C{  protected static ImageIcon createImageIcon(String path){  java.net.URL imgURL=ImageFileExtensionUtils.class.getResource(path);  if (imgURL != null) {    return new ImageIcon(imgURL);  } else {    ConsoleManager.getInstance().error(ImageFileExtensionUtils.class,"Couldn't find file: " + path);    return null;  }}  }
class C{  public AdsAddOfficeUsersQuery addOfficeUsers(UserActor actor,int accountId,String data){  return new AdsAddOfficeUsersQuery(getClient(),actor,accountId,data);}  }
class C{  public static void startMe(Context _context){  Intent intent=new Intent(_context,LaunchScreen.class);  _context.startActivity(intent);}  }
class C{  public static boolean equal(Entry[] attrSet1,Entry[] attrSet2){  return contains(attrSet1,attrSet2) && contains(attrSet2,attrSet1);}  }
class C{  public static RestMethod create(Method method,RestKind kind,String collectionName,String customMethodName){  return new RestMethod(method,kind,collectionName,customMethodName);}  }
class C{  @ManagedOperation(description="Refreshes all state tags (new timestamp).") public void refreshStateTags(){  LOGGER.info("Recovery task: refreshing state tags.");  supervisionFacade.refreshStateTags();  LOGGER.info("Recovery task: finished refreshing state tags.");}  }
class C{  protected GroupsGetMembersQueryWithFields fields(UserField... value){  return unsafeParam("fields",value);}  }
class C{  private void addNewModelForAssociatedModel(Collection<DataSupport> associatedModelCollection,DataSupport baseObj){  if (!associatedModelCollection.contains(baseObj)) {    associatedModelCollection.add(baseObj);  }}  }
class C{  public static Map<String,Integer> offsetMap(Schema sch){  int pos=0;  Map<String,Integer> offsetMap=new HashMap<String,Integer>();  for (  String fldname : sch.fields()) {    offsetMap.put(fldname,pos);    pos+=Page.maxSize(sch.type(fldname));  }  return offsetMap;}  }
class C{  @Override public void startCDATA(){  theNextState=S_CDATA;}  }
class C{  public TypeRef makeRepeated(){  return interner.intern(new TypeRef(kind,Cardinality.REPEATED,messageType,enumType));}  }
class C{  public void bind(@NonNull RecyclerView recyclerView){  unbind();  this.recyclerViewWeakReference=new WeakReference<>(recyclerView);  recyclerView.getAdapter().registerAdapterDataObserver(this);}  }
class C{  final public void addCallTarget(MethodPAG srcmpag,MethodPAG tgtmpag,Stmt s,Context srcContext,Context tgtContext,Edge e){  MethodNodeFactory srcnf=srcmpag.nodeFactory();  MethodNodeFactory tgtnf=tgtmpag.nodeFactory();  InvokeExpr ie=s.getInvokeExpr();  boolean virtualCall=callAssigns.containsKey(ie);  int numArgs=ie.getArgCount();  for (int i=0; i < numArgs; i++) {    Value arg=ie.getArg(i);    if (!(arg.getType() instanceof RefLikeType))     continue;    if (arg instanceof NullConstant)     continue;    Node argNode=srcnf.getNode(arg);    argNode=srcmpag.parameterize(argNode,srcContext);    argNode=argNode.getReplacement();    Node parm=tgtnf.caseParm(i);    parm=tgtmpag.parameterize(parm,tgtContext);    parm=parm.getReplacement();    addEdge(argNode,parm);    Pair<Node,Node> pval=addInterproceduralAssignment(argNode,parm,e);    callAssigns.put(ie,pval);    callToMethod.put(ie,srcmpag.getMethod());  }  if (ie instanceof InstanceInvokeExpr) {    InstanceInvokeExpr iie=(InstanceInvokeExpr)ie;    Node baseNode=srcnf.getNode(iie.getBase());    baseNode=srcmpag.parameterize(baseNode,srcContext);    baseNode=baseNode.getReplacement();    Node thisRef=tgtnf.caseThis();    thisRef=tgtmpag.parameterize(thisRef,tgtContext);    thisRef=thisRef.getReplacement();    addEdge(baseNode,thisRef);    Pair<Node,Node> pval=addInterproceduralAssignment(baseNode,thisRef,e);    callAssigns.put(ie,pval);    callToMethod.put(ie,srcmpag.getMethod());    if (virtualCall && !virtualCallsToReceivers.containsKey(ie)) {      virtualCallsToReceivers.put(ie,baseNode);    }  }  if (s instanceof AssignStmt) {    Value dest=((AssignStmt)s).getLeftOp();    if (dest.getType() instanceof RefLikeType && !(dest instanceof NullConstant)) {      Node destNode=srcnf.getNode(dest);      destNode=srcmpag.parameterize(destNode,srcContext);      destNode=destNode.getReplacement();      Node retNode=tgtnf.caseRet();      retNode=tgtmpag.parameterize(retNode,tgtContext);      retNode=retNode.getReplacement();      addEdge(retNode,destNode);      Pair<Node,Node> pval=addInterproceduralAssignment(retNode,destNode,e);      callAssigns.put(ie,pval);      callToMethod.put(ie,srcmpag.getMethod());    }  }}  }
class C{  public boolean want(Edge e){  return e.isExplicit();}  }
class C{  public void calculateCenter(){  if (center == null) {    center=new Vector3f(pointa);  } else {    center.set(pointa);  }  center.addLocal(pointb).addLocal(pointc).multLocal(FastMath.ONE_THIRD);}  }
class C{  protected MarketAddAlbumQuery title(String value){  return unsafeParam("title",value);}  }
class C{  public IdsQuery(String typeName,Object[] ids,QueryResultType queryResultType){  this(typeName,ids,null,null,queryResultType);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Paralyze_END_A_TO_B(String skilltarget){  return new SM_SYSTEM_MESSAGE(1200905,skilltarget);}  }
class C{  public void readLoop(ReadCallback readCallback) throws IOException {  Frame frame=new Frame();  do {    frame.readFrom(mBufferedInput);    mCurrentPayload.write(frame.payloadData,0,(int)frame.payloadLen);    if (frame.fin) {      byte[] completePayload=mCurrentPayload.toByteArray();      readCallback.onCompleteFrame(frame.opcode,completePayload,completePayload.length);      mCurrentPayload.reset();    }  } while (frame.opcode != Frame.OPCODE_CONNECTION_CLOSE);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_SKIN_CHANGE_TIME_EXPIRED(String value0){  return new SM_SYSTEM_MESSAGE(1400291,value0);}  }
class C{  public void outputData(){  out.println("The res:");  for (int i=0; i < allNum; i++) {    out.println(check_data[i]);  }}  }
class C{  public List<String> tokenize(URL url,PrintWriter writer){  try {    System.out.println("Extracting the text content of the URL...");    String text=ArticleExtractor.INSTANCE.getText(new InputStreamReader(url.openStream(),"UTF-8"));    if (verbose) {      System.out.println("URL text content:");      System.out.println(text);    }    System.out.println("Tokenizing the content...");    JavaRDD<String> input=jsc.parallelize(Arrays.asList(text.split("\\n+")));    JavaRDD<String> output=tokenize(input.map(normalizationFunction));    List<String> lines=output.collect();    for (    String line : lines) {      writer.write(line);      writer.write('\n');    }    writer.flush();    return lines;  } catch (  BoilerpipeProcessingException e) {    e.printStackTrace();  }catch (  UnsupportedEncodingException e) {    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  }  return null;}  }
class C{  private Base64(){}  }
class C{  public LinkedList<Patch> patch_make(LinkedList<Diff> diffs){  if (diffs == null) {    throw new IllegalArgumentException("Null inputs. (patch_make)");  }  String text1=diff_text1(diffs);  return patch_make(text1,diffs);}  }
class C{  public GumbelDistribution(double mu,double beta) throws MathIllegalArgumentException {  if (beta <= 0) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.SCALE,beta);  }  this.beta=beta;  this.mu=mu;}  }
class C{  public Bundler putIntArray(String key,int[] value){  bundle.putIntArray(key,value);  return this;}  }
class C{  public boolean pre_jimplify(){  return soot.PhaseOptions.getBoolean(options,"pre-jimplify");}  }
class C{  public static ExpectedCondition<Boolean> clickButton(final WebElement button){  return null;}  }
class C{  public void entity(String name,int value){  theEntities.put(name,value);}  }
class C{  public static StorableActivityFence starting(@ActivityType int... activityTypes){  return new StorableActivityFence(activityTypes,START_TYPE);}  }
class C{  private void updateRingColor(float interpolatedTime,Ring ring){  if (interpolatedTime > COLOR_START_DELAY_OFFSET) {    ring.setColor(evaluateColorChange((interpolatedTime - COLOR_START_DELAY_OFFSET) / (1.0f - COLOR_START_DELAY_OFFSET),ring.getStartingColor(),ring.getNextColor()));  }}  }
class C{  public boolean shouldInitializeClassesRelationStatus(){  return getConfiguration().getMetaDataRepositoryInstance().getMetaDatas().length != _processedClasses.size();}  }
class C{  public static <E>Stream<Map.Entry<E,E>> crossProductOrdered(Stream<E> stream,Comparator<E> comparator){  Objects.requireNonNull(stream);  Objects.requireNonNull(comparator);  CrossProductOrderedSpliterator<E> spliterator=CrossProductOrderedSpliterator.ordered(stream.spliterator(),comparator);  return StreamSupport.stream(spliterator,stream.isParallel()).onClose(null);}  }
class C{  public Activity runAfter(String beforeKey,String afterKey){  Activity before=get(beforeKey);  Activity after=get(afterKey);  if (before != null && after != null)   ActivityManager.scheduleAfter(before,after);  return after;}  }
class C{  public PhotosImplementor(PhotosModel model,PhotosView view){  this.model=model;  this.view=view;}  }
class C{  protected DateTimeData parse(String str) throws SchemaDateTimeException {  DateTimeData date=new DateTimeData(str,this);  int len=str.length();  if (str.charAt(0) != '-' || str.charAt(1) != '-' || str.charAt(2) != '-') {    throw new SchemaDateTimeException("Error in day parsing");  }  date.year=YEAR;  date.month=MONTH;  date.day=parseInt(str,3,5);  if (DAY_SIZE < len) {    if (!isNextCharUTCSign(str,DAY_SIZE,len)) {      throw new SchemaDateTimeException("Error in day parsing");    } else {      getTimeZone(str,date,DAY_SIZE,len);    }  }  validateDateTime(date);  saveUnnormalized(date);  if (date.utc != 0 && date.utc != 'Z') {    normalize(date);  }  date.position=2;  return date;}  }
class C{  private Builder(@Nonnull final Builder builder){  Check.notNull(builder,"builder");  icon=builder.icon;  id=builder.id;  infoUrl=builder.infoUrl;  name=builder.name;}  }
class C{  public void init$Children(){  children=new ASTNode[4];  setChild(new List(),1);  setChild(new Opt(),2);  setChild(new List(),3);}  }
class C{  public void ReInit(SimpleCharStream stream,int lexState){  ReInit(stream);  SwitchTo(lexState);}  }
class C{  public static byte[] toUtf8(String s){  try {    ByteArrayOutputStream bs=new ByteArrayOutputStream(s.length());    DataOutputStream d=new DataOutputStream(bs);    d.writeUTF(s);    return bs.toByteArray();  } catch (  IOException e) {    G.v().out.println("Some sort of IO exception in toUtf8 with " + s);  }  return null;}  }
class C{  private void parseLet(int indent,boolean firstContent,String header,Layout layout,List<Elem> elems){  TokenStream tokens=new TokenStream(header);  Elem let=parseLetBindingsThenBody(indent,firstContent,tokens,layout);  if (let != null) {    elems.add(Block.create(!firstContent,let));  }}  }
class C{  private static String processResult(Map<String,Object> result,HttpServletRequest request){  StringBuilder errMsg=new StringBuilder();  if (result.containsKey(ModelService.ERROR_MESSAGE_LIST)) {    List<String> errorMsgs=UtilGenerics.checkList(result.get(ModelService.ERROR_MESSAGE_LIST));    Iterator<String> iterator=errorMsgs.iterator();    errMsg.append("<ul>");    while (iterator.hasNext()) {      errMsg.append("<li>");      errMsg.append(iterator.next());      errMsg.append("</li>");    }    errMsg.append("</ul>");  } else   if (result.containsKey(ModelService.ERROR_MESSAGE)) {    errMsg.append(result.get(ModelService.ERROR_MESSAGE));    request.setAttribute("_ERROR_MESSAGE_",errMsg.toString());  }  if (errMsg.length() > 0) {    request.setAttribute("_ERROR_MESSAGE_",errMsg.toString());    if (result.get(ModelService.RESPONSE_MESSAGE).equals(ModelService.RESPOND_SUCCESS)) {      return NON_CRITICAL_ERROR;    } else {      return ERROR;    }  } else {    return NO_ERROR;  }}  }
class C{  public Iterator<E> iterator(){  return new PatchingIterator(innerChain);}  }
class C{  public void clearAccumulatedTorque(){  this.torques.clear();}  }
class C{  public Notifier(){  super("event notifier");  setDaemon(true);}  }
class C{  public static Object executeScript(String filePath,String functionName,Map<String,Object> context){  return executeScript(filePath,functionName,context,new Object[]{context});}  }
class C{  public static Z1 genc(Zmat A,int r1,int r2,int c) throws JampackException {  int i, ru;  double norm;  double s;  Z scale;  Z t=new Z();  Z t1=new Z();  c=c - A.basex;  r1=r1 - A.basex;  r2=r2 - A.basex;  ru=r2 - r1 + 1;  Z1 u=new Z1(r2 - r1 + 1);  for (i=r1; i <= r2; i++) {    u.put(i - r1,A.re[i][c],A.im[i][c]);    A.re[i][c]=0.0;    A.im[i][c]=0.0;  }  norm=Norm.fro(u);  if (r1 == r2 || norm == 0) {    A.re[r1][c]=-u.re[0];    A.im[r1][c]=-u.im[0];    u.put(0,Math.sqrt(2),0);    return u;  }  scale=new Z(1 / norm,0);  if (u.re[0] != 0 || u.im[0] != 0) {    t=u.get(0);    scale.Times(scale,t.Div(t1.Conj(t),Z.abs(t)));  }  A.put(r1 + A.basex,c + A.basex,t.Minus(t.Div(Z.ONE,scale)));  for (i=0; i < ru; i++) {    u.Times(i,scale);  }  u.re[0]=u.re[0] + 1;  u.im[0]=0;  s=Math.sqrt(1 / u.re[0]);  for (i=0; i < ru; i++) {    u.re[i]=s * u.re[i];    u.im[i]=s * u.im[i];  }  return u;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SLOT_FULL(String value0){  return new SM_SYSTEM_MESSAGE(1300070,value0);}  }
class C{  public void notifyEventListeners(ZWaveEvent event){  logger.debug("Notifying event listeners: {}",event.getClass().getSimpleName());  ArrayList<ZWaveEventListener> copy=new ArrayList<ZWaveEventListener>(zwaveEventListeners);  for (  ZWaveEventListener listener : copy) {    listener.ZWaveIncomingEvent(event);  }  if (event instanceof ZWaveInclusionEvent) {    ZWaveInclusionEvent incEvent=(ZWaveInclusionEvent)event;switch (incEvent.getEvent()) {case IncludeSlaveFound:      requestAddNodesStop();    logger.debug("NODE {}: Including node.",incEvent.getNodeId());  if (getNode(incEvent.getNodeId()) != null) {    logger.debug("NODE {}: Newly included node already exists - not initialising.",incEvent.getNodeId());    break;  }lastIncludeSlaveFoundEvent=incEvent;ZWaveNode newNode=new ZWaveNode(homeId,incEvent.getNodeId(),this);ZWaveDeviceClass deviceClass=newNode.getDeviceClass();deviceClass.setBasicDeviceClass(incEvent.getBasic());deviceClass.setGenericDeviceClass(incEvent.getGeneric());deviceClass.setSpecificDeviceClass(incEvent.getSpecific());for (CommandClass commandClass : incEvent.getCommandClasses()) {ZWaveCommandClass zwaveCommandClass=ZWaveCommandClass.getInstance(commandClass.getKey(),newNode,this);if (zwaveCommandClass != null) {logger.debug("NODE {}: Inclusion is adding command class {}.",incEvent.getNodeId(),commandClass);if (commandClass == CommandClass.SECURITY) {}newNode.addCommandClass(zwaveCommandClass);}}zwaveNodes.putIfAbsent(incEvent.getNodeId(),newNode);break;case IncludeDone:if (incEvent.getNodeId() == 0) {break;}ZWaveNode node=getNode(incEvent.getNodeId());if (node == null) {logger.debug("NODE {}: Newly included node doesn't exist - initialising from start.",incEvent.getNodeId());addNode(incEvent.getNodeId());break;}if (node.getNodeInitStage() != ZWaveNodeInitStage.EMPTYNODE) {logger.debug("NODE {}: Newly included node already initialising at {}",incEvent.getNodeId(),node.getNodeInitStage());break;}if (node.getDeviceClass().getBasicDeviceClass() != Basic.NOT_KNOWN) {node.initialiseNode(ZWaveNodeInitStage.INCLUSION_START);} else {node.initialiseNode(ZWaveNodeInitStage.EMPTYNODE);}break;case ExcludeDone:if (incEvent.getNodeId() == 0) {break;}logger.debug("NODE {}: Excluding node.",incEvent.getNodeId());if (getNode(incEvent.getNodeId()) == null) {logger.debug("NODE {}: Excluding node that doesn't exist.",incEvent.getNodeId());break;}zwaveNodes.remove(incEvent.getNodeId());ZWaveNodeSerializer nodeSerializer=new ZWaveNodeSerializer();nodeSerializer.DeleteNode(event.getNodeId());break;default :break;}} else if (event instanceof ZWaveNetworkEvent) {ZWaveNetworkEvent networkEvent=(ZWaveNetworkEvent)event;switch (networkEvent.getEvent()) {case DeleteNode:if (getNode(networkEvent.getNodeId()) == null) {logger.debug("NODE {}: Deleting a node that doesn't exist.",networkEvent.getNodeId());break;}this.zwaveNodes.remove(networkEvent.getNodeId());ZWaveNodeSerializer nodeSerializer=new ZWaveNodeSerializer();nodeSerializer.DeleteNode(event.getNodeId());break;default :break;}} else if (event instanceof ZWaveNodeStatusEvent) {ZWaveNodeStatusEvent statusEvent=(ZWaveNodeStatusEvent)event;logger.debug("NODE {}: Node Status event - Node is {}",statusEvent.getNodeId(),statusEvent.getState());ZWaveNode node=getNode(event.getNodeId());if (node == null) {logger.error("NODE {}: Node is unknown!",statusEvent.getNodeId());return;}switch (statusEvent.getState()) {case DEAD:break;case FAILED:break;case ALIVE:break;}}}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  public Legion(int legionId,String legionName){  this();  this.legionId=legionId;  this.legionName=legionName;}  }
class C{  public static boolean PM(int packedTime){  return packedTime >= NOON;}  }
class C{  @Override public void onTaskError(long id){  int position=mTaskAdapter.getPositionById(id);  if (position != -1) {    Task task=mTaskAdapter.getItem(position);    if (task.getState() != Task.STATE_PAUSE) {      mTaskAdapter.getItem(position).setState(Task.STATE_ERROR);      notifyItemChanged(position);    }  }}  }
class C{  public boolean validateRequest(String publicKey,String hmac,String query){  ApiResult apiResult=this.api.getApiByPublicKey(publicKey);  if (apiResult == null) {    return false;  }  String myHmac=HmacUtils.hmacSha1Hex(apiResult.getPrivateKey(),query);  return myHmac.equals(hmac);}  }
class C{  @Override public void emptyElement(QName element,XMLAttributes attributes,Augmentations augs) throws XNIException {  startElement(element,attributes,augs);  endElement(element,augs);}  }
class C{  public PayloadBuilder withScheme(String scheme){  _scheme=checkNotNull(scheme,"scheme");  return this;}  }
class C{  public static boolean contentEqualsIgnoreEOL(File file1,File file2,String charsetName) throws IOException {  boolean file1Exists=file1.exists();  if (file1Exists != file2.exists()) {    return false;  }  if (!file1Exists) {    return true;  }  if (file1.isDirectory() || file2.isDirectory()) {    throw new IOException("Can't compare directories, only files");  }  if (file1.getCanonicalFile().equals(file2.getCanonicalFile())) {    return true;  }  Reader input1=null;  Reader input2=null;  try {    if (charsetName == null) {      input1=new InputStreamReader(new FileInputStream(file1));      input2=new InputStreamReader(new FileInputStream(file2));    } else {      input1=new InputStreamReader(new FileInputStream(file1),charsetName);      input2=new InputStreamReader(new FileInputStream(file2),charsetName);    }    return IOUtils.contentEqualsIgnoreEOL(input1,input2);  }  finally {    IOUtils.closeQuietly(input1);    IOUtils.closeQuietly(input2);  }}  }
class C{  public Vector divide(Vector vec){  x/=vec.x;  y/=vec.y;  z/=vec.z;  return this;}  }
class C{  public boolean isApplicable(){  try {    return getViewer().isPCoATab() && getViewer().getPcoaTab().getPCoA().getEigenValues() != null;  } catch (  Exception ex) {    return false;  }}  }
class C{  public String geom_dump_verbose(){  return soot.PhaseOptions.getString(options,"geom-dump-verbose");}  }
class C{  @NonNull protected static Bitmap ensureBitmapIsUsable(@Nullable Bitmap target,int viewWidth,int viewHeight){  if (target != null) {    if (target.getWidth() > viewWidth && target.getHeight() > viewHeight) {      target=Bitmap.createBitmap(target,0,0,viewWidth,viewHeight);    } else     if (target.getWidth() != viewWidth || target.getHeight() != viewHeight) {      target.recycle();      target=null;    }  }  if (target == null) {    target=Bitmap.createBitmap(viewWidth,viewHeight,Bitmap.Config.ARGB_8888);  }  return target;}  }
class C{  public OpenMapRealVector append(OpenMapRealVector v){  OpenMapRealVector res=new OpenMapRealVector(this,v.getDimension());  Iterator iter=v.entries.iterator();  while (iter.hasNext()) {    iter.advance();    res.setEntry(iter.key() + virtualSize,iter.value());  }  return res;}  }
class C{  public static int apply(Director dir,String cName,File file,boolean allTaxonomicLevels,ProgressListener progressListener) throws IOException, CanceledException {  final ViewerBase viewer=(ViewerBase)dir.getViewerByClassName(cName);  if (viewer == null)   throw new IOException(cName + " Viewer not open");  final NodeSet selectedNodes=viewer.getSelectedNodes();  if (selectedNodes.size() == 0) {    throw new IOException("No nodes selected");  }  System.err.println("Writing file: " + file);  progressListener.setSubtask("Processing " + cName + " nodes");  progressListener.setMaximum(selectedNodes.size());  progressListener.setProgress(0);  int maxRankIndex=0;  if (allTaxonomicLevels) {    maxRankIndex=determineMaxTaxonomicRankIndex(selectedNodes);    System.err.println("Exporting " + (maxRankIndex + 1) + " taxonomic levels down to rank of '"+ ranks[maxRankIndex]+ "'");  }  final int numberOfLevels=maxRankIndex + 1;  int numberOfRows=0;  int nodesSkipped=0;  final int numberOfColumns=dir.getDocument().getNumberOfSamples();  try (BufferedWriter w=new BufferedWriter(new FileWriter(file))){    for (int i=0; i < numberOfLevels; i++)     w.write("Level_" + (i + 1) + "\t");    w.write("Observation Ids");    for (    String sample : dir.getDocument().getSampleNames()) {      w.write("\t" + sample);    }    w.write("\n");    for (    Node v : selectedNodes) {      final String name=viewer.getLabel(v);      final Integer taxonId=(Integer)v.getInfo();      if (maxRankIndex > 1) {        final String path=makePath(v,maxRankIndex);        if (path != null)         w.write(String.format("%s\tID%d",path,taxonId)); else {          if (nodesSkipped < 5)           System.err.println("Skipping node: " + name); else           if (nodesSkipped == 5)           System.err.println("Skipping more nodes...");          nodesSkipped++;          continue;        }      } else       w.write(String.format("%s\tID%d",name,taxonId));      NodeData data=viewer.getNodeData(v);      if (v.getOutDegree() == 0) {        for (int i=0; i < numberOfColumns; i++)         w.write("\t" + data.getSummarized(i));      } else {        for (int i=0; i < numberOfColumns; i++)         w.write("\t" + data.getAssigned(i));      }      w.write("\n");      numberOfRows++;    }  }   System.err.println("Nodes skipped: " + nodesSkipped);  return numberOfRows;}  }
class C{  public void animateX(int durationMillis,Easing.EasingOption easing){  if (android.os.Build.VERSION.SDK_INT < 11)   return;  ObjectAnimator animatorX=ObjectAnimator.ofFloat(this,"phaseX",0f,1f);  animatorX.setInterpolator(Easing.getEasingFunctionFromOption(easing));  animatorX.setDuration(durationMillis);  animatorX.addUpdateListener(mListener);  animatorX.start();}  }
class C{  public void init$Children(){  children=new ASTNode[1];  setChild(new List(),0);}  }
class C{  public IntColumn(int nrows,int capacity,int defaultValue){  super(int.class,new Integer(defaultValue));  if (capacity < nrows) {    throw new IllegalArgumentException("Capacity value can not be less than the row count.");  }  m_values=new int[capacity];  Arrays.fill(m_values,defaultValue);  m_size=nrows;}  }
class C{  public grammaticalityEstimator(String sCorpusDir,int iMinChar,int iMaxChar,int iMinWord,int iMaxWord,int iNeighbourhoodWindow,boolean bFlatDir){  iMinCharNGram=iMinChar;  iMaxCharNGram=iMaxChar;  iMinWordNGram=iMinWord;  iMaxWordNGram=iMaxWord;  DistroDocs=new TreeMap<Integer,DistributionDocument>();  DistroWordDocs=new TreeMap<Integer,DistributionWordDocument>();  StringBuffer sb=new StringBuffer();  DocumentSet ds=new DocumentSet(sCorpusDir,1.0);  ds.createSets(bFlatDir);  Iterator iTexts=ds.getTrainingSet().iterator();  while (iTexts.hasNext()) {    CategorizedFileEntry cfeCur=(CategorizedFileEntry)iTexts.next();    try {      BufferedReader bf=new BufferedReader(new FileReader(cfeCur.getFileName()));      String sTmp;      while ((sTmp=bf.readLine()) != null)       sb.append(sTmp);      bf.close();    } catch (    FileNotFoundException ex) {      ex.printStackTrace(System.err);    }catch (    IOException ex) {      ex.printStackTrace(System.err);    }    sb.append((char)0);  }  FullTextDataString=sb.toString();  for (int iCnt=iMinCharNGram; iCnt <= iMaxCharNGram; iCnt++) {    DistroDocs.put(iCnt,new DistributionDocument(iNeighbourhoodWindow,iCnt));  }  for (int iCnt=iMinWordNGram; iCnt <= iMaxWordNGram; iCnt++) {    DistroWordDocs.put(iCnt,new DistributionWordDocument(iNeighbourhoodWindow,iCnt));  }}  }
class C{  @RequestMapping(value="/{namespace}/{key}",method=RequestMethod.PUT,produces="application/json",consumes="application/json") public void updateKeyJsonValue(@PathVariable String namespace,@PathVariable String key,@RequestBody String body,HttpServletRequest request,HttpServletResponse response) throws WebMessageException, IOException {  if (!hasAccess(namespace)) {    throw new WebMessageException(WebMessageUtils.forbidden("The namespace '" + namespace + "' is protected, and you don't have the right authority to access it."));  }  KeyJsonValue keyJsonValue=keyJsonValueService.getKeyJsonValue(namespace,key);  if (keyJsonValue == null) {    throw new WebMessageException(WebMessageUtils.notFound("The key '" + key + "' was not found in the namespace '"+ namespace+ "'."));  }  if (!renderService.isValidJson(body)) {    throw new WebMessageException(WebMessageUtils.badRequest("The data is not valid JSON."));  }  keyJsonValue.setValue(body);  keyJsonValueService.updateKeyJsonValue(keyJsonValue);  response.setStatus(HttpServletResponse.SC_OK);  messageService.sendJson(WebMessageUtils.ok("Key '" + key + "' updated."),response);}  }
class C{  @Override protected int readBlock(double[] target,int targetPos){  int blockSize=getBlockSize();  int validSamplesInFrame=frameProvider.validSamplesInFrame();  int frameLength=frameProvider.getFrameLengthSamples();  if (validSamplesInFrame < frameLength) {    assert !frameProvider.hasMoreData();    int nCopied;    if (blockSize < (frameLength - validSamplesInFrame)) {      nCopied=blockSize;    } else {      nCopied=blockSize - (frameLength - validSamplesInFrame);    }    assert nCopied > 0;    System.arraycopy(memory,0,target,targetPos,nCopied);    return nCopied;  } else {    System.arraycopy(memory,0,target,targetPos,blockSize);    System.arraycopy(memory,blockSize,memory,0,memory.length - blockSize);    Arrays.fill(memory,memory.length - blockSize,memory.length,0);    return blockSize;  }}  }
class C{  public JToggleGroup createCheckboxGroup(){  return createToggleGroup(JToggleGroup.CHECKBOX);}  }
class C{  public void addBodyDecl(BodyDecl node){  List<BodyDecl> list=(parent == null || state == null) ? getBodyDeclListNoTransform() : getBodyDeclList();  list.addChild(node);}  }
class C{  public WildcardFilter(String[] wildcards){  if (wildcards == null) {    throw new IllegalArgumentException("The wildcard array must not be null");  }  this.wildcards=new String[wildcards.length];  System.arraycopy(wildcards,0,this.wildcards,0,wildcards.length);}  }
class C{  Object decompressObject(MarshObject objToDecompress) throws IOException, ClassNotFoundException {  CompressedMarshObjectConvertor cv=null;  Object obj=null;  try {    cv=_compressedConvertorPool.getResource();    obj=cv.getObject(objToDecompress);  }  finally {    if (cv != null)     _compressedConvertorPool.freeResource(cv);  }  return obj;}  }
class C{  protected boolean isInitialMethod(SootMethod sm){  for (  Unit u : this.initialSeeds.keySet())   if (interproceduralCFG().getMethodOf(u) == sm)   return true;  return false;}  }
class C{  public int addFile(File file){  return getFileId(file);}  }
class C{  public void start(Context context,Fragment fragment){  start(context,fragment,REQUEST_CROP);}  }
class C{  public NewsfeedSearchQueryWithExtended fields(EnumParam... value){  return unsafeParam("fields",value);}  }
class C{  void restoreRotationState(@NonNull ContentResolver contentResolver){  Settings.System.putInt(contentResolver,Settings.System.ACCELEROMETER_ROTATION,originalAccelerometer);  Settings.System.putInt(contentResolver,Settings.System.USER_ROTATION,originalUserRotation);}  }
class C{  public static void addAllJARsInAssets(final Context cxt){  try {    if (debug) {      Log.d(TAG,"addAllJARsInAssets on " + Thread.currentThread());    }    String[] arrJars=createSubDexList(cxt);    copyJarsFromAssets(cxt,arrJars);  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  private static Set<Label> labelsWithConfigs(Project project){  List<RunConfiguration> configurations=RunManager.getInstance(project).getAllConfigurationsList();  Set<Label> labelsWithConfigs=Sets.newHashSet();  for (  RunConfiguration configuration : configurations) {    if (configuration instanceof BlazeRunConfiguration) {      BlazeRunConfiguration blazeRunConfiguration=(BlazeRunConfiguration)configuration;      TargetExpression target=blazeRunConfiguration.getTarget();      if (target instanceof Label) {        labelsWithConfigs.add((Label)target);      }    }  }  return labelsWithConfigs;}  }
class C{  public void computeOverlapGraph(int minOverlap,final Alignment alignment,ProgressListener progress) throws IOException, CanceledException {  this.alignment=alignment;  OverlapGraphBuilder overlapGraphBuilder=new OverlapGraphBuilder(minOverlap);  overlapGraphBuilder.apply(alignment,progress);  overlapGraph=overlapGraphBuilder.getOverlapGraph();  node2readName=overlapGraphBuilder.getNode2ReadNameMap();  readId2ContainedReads=overlapGraphBuilder.getReadId2ContainedReads();}  }
class C{  public VersionCellEditor(VendorOptionTableModel model){  this.model=model;}  }
class C{  private void addWindowsPath(int id,String path){  if (path == null || path.equals("")) {    return;  }  _sb.append(id);  _sb.append(" RCDATA BEGIN \"");  _sb.append(path.replaceAll("\\\\","\\\\\\\\").replaceAll("/","\\\\\\\\"));  _sb.append("\\0\" END\n");}  }
class C{  public static Integer parseInt(String string){  if (string == null || string.trim().isEmpty()) {    return null;  }  try {    return Integer.parseInt(string);  } catch (  NumberFormatException ex) {    return null;  }}  }
class C{  public static final void drawPulleyJoint(GL2 gl,PulleyJoint joint){  gl.glColor4f(0.0f,0.0f,0.0f,0.3f);  Vector2 p1=joint.getAnchor1();  Vector2 p2=joint.getPulleyAnchor1();  Vector2 p3=joint.getPulleyAnchor2();  Vector2 p4=joint.getAnchor2();  gl.glBegin(GL.GL_LINE_STRIP);  gl.glVertex2d(p1.x,p1.y);  gl.glVertex2d(p2.x,p2.y);  gl.glVertex2d(p3.x,p3.y);  gl.glVertex2d(p4.x,p4.y);  gl.glEnd();}  }
class C{  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {  in.defaultReadObject();  if (codebase == null) {    throw new InvalidObjectException("null export codebase");  }  if (policy == null) {    throw new InvalidObjectException("null policy");  }  if (classpath == null) {    throw new InvalidObjectException("null import codebase");  }  if (implClassName == null) {    throw new InvalidObjectException("null implementation class name");  }  lifeCycle=NoOpLifeCycle;  servicePreparer=null;  descCreated=false;  descCreatedLock=new Object();}  }
class C{  public BoardUnfixTopicQuery unfixTopic(UserActor actor,int groupId,int topicId){  return new BoardUnfixTopicQuery(getClient(),actor,groupId,topicId);}  }
class C{  public synchronized int size(){  return count;}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();{    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  public JsonArray add(JsonValue value){  if (value == null) {    throw new NullPointerException("value is null");  }  values.add(value);  return this;}  }
class C{  public ListQueryBinding(TupleSet ts,String field){  this(ts,field,true);}  }
class C{  public void hide(){  LayoutParams lp=(LayoutParams)mContentView.getLayoutParams();  lp.height=0;  mContentView.setLayoutParams(lp);}  }
class C{  private Animation applySlideLeftAnimationTo(View view){  Animation animation=new TranslateAnimation(Animation.RELATIVE_TO_PARENT,0.0f,Animation.RELATIVE_TO_PARENT,-1.0f,Animation.RELATIVE_TO_PARENT,0.0f,Animation.RELATIVE_TO_PARENT,0.0f);  animation.setDuration(200);  animation.setInterpolator(new AccelerateInterpolator());  view.startAnimation(animation);  return animation;}  }
class C{  public ZWaveEnergyProductionCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){  super(node,controller,endpoint);}  }
class C{  @Override public ImageWritable transform(ImageWritable image,Random random){  if (image == null) {    return null;  }  Mat mat=(Mat)converter.convert(image.getFrame());  Mat result=new Mat();  try {    cvtColor(mat,result,conversionCode);  } catch (  Exception e) {    throw new RuntimeException(e);  }  return new ImageWritable(converter.convert(result));}  }
class C{  public static int exportTaxon2Counts(String format,Director dir,File file,char separator,boolean reportSummarized,ProgressListener progressListener) throws IOException {  int totalLines=0;  try {    final MainViewer viewer=dir.getMainViewer();    try (BufferedWriter w=new BufferedWriter(new FileWriter(file))){      final List<String> names=viewer.getDir().getDocument().getSampleNames();      if (names.size() > 1) {        w.write("#Datasets");        for (        String name : names) {          if (name == null)           System.err.println("Internal error, sample name is null"); else {            if (separator == ',')             name=name.replaceAll(",","_");          }          w.write(separator + name);        }        w.write("\n");      }      final NodeSet selected=viewer.getSelectedNodes();      progressListener.setSubtask("Taxa to counts");      progressListener.setMaximum(selected.size());      progressListener.setProgress(0);      for (Node v=selected.getFirstElement(); v != null; v=selected.getNextElement(v)) {        Integer taxonId=(Integer)v.getInfo();        if (taxonId != null) {          final NodeData data=viewer.getNodeData(v);          final int[] counts=(reportSummarized || v.getOutDegree() == 0 ? data.getSummarized() : data.getAssigned());          final String name=getTaxonLabelSource(dir,format,taxonId);          if (name != null) {            if (counts.length == names.size()) {              w.write(name);              for (              int num : counts)               w.write(separator + "" + num);              w.write("\n");              totalLines++;            } else             System.err.println("Skipped " + name + ", number of values: "+ counts.length);          }        }        progressListener.incrementProgress();      }    }   } catch (  CanceledException canceled) {    System.err.println("USER CANCELED");  }  return totalLines;}  }
class C{  public Builder trustSource(TrustSource trustSource){  this.trustSource=trustSource;  return this;}  }
class C{  public void checkWarnings(){  super.checkWarnings();  if (!suppressWarnings("unchecked") && !hasAnnotationSafeVarargs() && isVariableArity()&& !getParameter(getNumParameter() - 1).type().isReifiable())   warning("possible heap pollution for " + "variable arity parameter");}  }
class C{  public static double product(final double... values) throws MathIllegalArgumentException {  return PRODUCT.evaluate(values);}  }
class C{  public static String formatMessage(Locale locale,String key,Object[] arguments) throws MissingResourceException {  if (locale == null) {    locale=Locale.getDefault();  }  final ResourceBundle resourceBundle=ResourceBundle.getBundle("mf.org.apache.xerces.impl.msg.JAXPValidationMessages",locale);  String msg;  try {    msg=resourceBundle.getString(key);    if (arguments != null) {      try {        msg=java.text.MessageFormat.format(msg,arguments);      } catch (      Exception e) {        msg=resourceBundle.getString("FormatFailed");        msg+=" " + resourceBundle.getString(key);      }    }  } catch (  MissingResourceException e) {    msg=resourceBundle.getString("BadMessageKey");    throw new MissingResourceException(key,msg,key);  }  if (msg == null) {    msg=key;    if (arguments.length > 0) {      StringBuffer str=new StringBuffer(msg);      str.append('?');      for (int i=0; i < arguments.length; i++) {        if (i > 0) {          str.append('&');        }        str.append(String.valueOf(arguments[i]));      }    }  }  return msg;}  }
class C{  private boolean release(String id){  AudioPlayer audio=players.remove(id);  if (audio == null) {    return false;  }  if (players.isEmpty()) {    onLastPlayerReleased();  }  audio.destroy();  return true;}  }
class C{  public static String toTypeDesc(SootMethodRef m){  StringBuilder sb=new StringBuilder();  sb.append('(');  for (  Type t : m.parameterTypes()) {    sb.append(toTypeDesc(t));  }  sb.append(')');  sb.append(toTypeDesc(m.returnType()));  return sb.toString();}  }
class C{  protected Pair<Long,DLSN> readLastTxIdInLedger(LogSegmentMetadata l) throws IOException {  LogRecordWithDLSN record=recoverLastRecordInLedger(l,false,false,true);  if (null == record) {    return Pair.of(DistributedLogConstants.EMPTY_LOGSEGMENT_TX_ID,DLSN.InvalidDLSN);  } else {    return Pair.of(record.getTransactionId(),record.getDlsn());  }}  }
class C{  private ServiceRegistrar[] buildServiceRegistrar(){  int k=0;  ServiceRegistrar[] proxys=new ServiceRegistrar[discoveredLocators.size()];  Iterator iter=discoveredLocators.iterator();  while (iter.hasNext()) {    LocatorReg reg=(LocatorReg)iter.next();    proxys[k++]=reg.proxy;  }  return proxys;}  }
class C{  public static Account createAccount(String name,String password){  String passwordHash=AccountUtils.encodePassword(password);  Account account=new Account();  account.setName(name);  account.setPasswordHash(passwordHash);  account.setAccessLevel((byte)0);  account.setMembership((byte)0);  account.setActivated((byte)1);  if (getAccountDAO().insertAccount(account)) {    return account;  }  return null;}  }
class C{  @Override public Loader<Cursor> onCreateLoader(int i,Bundle bundle){  return new CursorLoader(getActivity(),FeedContract.Entry.CONTENT_URI,PROJECTION,null,null,FeedContract.Entry.COLUMN_NAME_PUBLISHED + " desc");}  }
class C{  private void visit(NodeItem n,NodeItem c,int doi,int ldist){  PrefuseLib.updateVisible(n,true);  double localDOI=-ldist / Math.min(1000.0,m_divisor);  n.setDOI(doi + localDOI);  if (c != null) {    EdgeItem e=(EdgeItem)c.getParentEdge();    e.setDOI(c.getDOI());    PrefuseLib.updateVisible(e,true);  }}  }
class C{  private DefaultMutableTreeNode createDnNode(Dn dn,Token token,XMBean xmbean){  DefaultMutableTreeNode node=new ComparableDefaultMutableTreeNode();  Object data=createNodeValue(xmbean,token);  String label=data.toString();  XNodeInfo userObject=new XNodeInfo(Type.MBEAN,data,label,xmbean.getObjectName().toString());  node.setUserObject(userObject);  return node;}  }
class C{  public Constraint(int row,int col){  this(row,col,1);}  }
class C{  private void enter_Enemy(){  if (--delay >= 0)   return;  velocity.x=(int)(sx * 180);  velocity.y=(int)(sy * 180);  int dr=rnd.nextInt(5) + 6;  if (len % 500 == 0)   shoot_Missile(dr);  len--;  if (len >= 0)   return;  col++;  if (col < sPath.get_Directions().length) {    GetDir(col);  } else {    status=BEGINPOS;  }}  }
class C{  public static void d(String tag,String s,Throwable e){  if (LOG.DEBUG >= LOGLEVEL)   Log.d(tag,s,e);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_INGAME_BLOCK_IN_NO_CHAT(String value0){  return new SM_SYSTEM_MESSAGE(1300814,value0);}  }
class C{  public void saveRep(Repository rep,ObjectId idTransformation,ObjectId idStep) throws KettleException {  try {    rep.saveStepAttribute(idTransformation,idStep,"TableName",this.tabelName);    rep.saveStepAttribute(idTransformation,idStep,"factDimLensString",factDimLensString);    rep.saveStepAttribute(idTransformation,idStep,"outputRowSize",this.outputRowSize);    rep.saveStepAttribute(idTransformation,idStep,"tableName",this.tableName);    rep.saveStepAttribute(idTransformation,idStep,"databaseName",this.databaseName);    rep.saveStepAttribute(idTransformation,idStep,"dimensionCount",this.dimensionCount);    rep.saveStepAttribute(idTransformation,idStep,"noDictionaryDims",this.noDictionaryDims);    rep.saveStepAttribute(idTransformation,idStep,"noDictionaryDimsMapping",this.noDictionaryDimsMapping);    rep.saveStepAttribute(idTransformation,idStep,"complexDimensionCount",this.complexDimensionCount);    rep.saveStepAttribute(idTransformation,idStep,"measureCount",this.measureCount);    rep.saveStepAttribute(idTransformation,idStep,"isUpdateMemberRequest",this.updateMemberRequest);    rep.saveStepAttribute(idTransformation,idStep,"measureDataType",measureDataType);    rep.saveStepAttribute(idTransformation,idStep,"partitionID",partitionID);    rep.saveStepAttribute(idTransformation,idStep,"segmentId",segmentId);    rep.saveStepAttribute(idTransformation,idStep,"taskNo",taskNo);  } catch (  Exception e) {    throw new KettleException(BaseMessages.getString(PKG,"TemplateStep.Exception.UnableToSaveStepInfoToRepository",new String[0]) + idStep,e);  }}  }
class C{  @JavascriptInterface public void showToast(String toast){  Toast.makeText(mContext,toast,Toast.LENGTH_SHORT).show();}  }
class C{  static public int[] addIndex(int[] X,int x){  int newX[]=new int[X.length + 1];  for (int i=0; i < X.length; i++)   newX[i]=X[i];  newX[X.length]=x;  return newX;}  }
class C{  public static Configuration createEquipmentDataTag(Long parentId){  Configuration configuration=new Configuration();  DataTag dataTag=DataTag.create("DATA_INI_TEST",Integer.class,new DataTagAddress()).equipmentId(parentId).id(1000L).build();  configuration.addEntity(dataTag);  return configuration;}  }
class C{  protected SecureSendSMSNotificationQuery userId(int value){  return unsafeParam("user_id",value);}  }
class C{  public void prepareMatrixOffset(boolean inverted){  mMatrixOffset.reset();  if (!inverted) {    mMatrixOffset.postTranslate(mViewPortHandler.offsetLeft(),mViewPortHandler.getChartHeight() - mViewPortHandler.offsetBottom());  } else {    mMatrixOffset.setTranslate(mViewPortHandler.offsetLeft(),-mViewPortHandler.offsetTop());    mMatrixOffset.postScale(1.0f,-1.0f);  }}  }
class C{  public static TemplateParser create(){  return new TemplateParser();}  }
class C{  public static void json(String tag,Object source){  if (isEnable()) {    Object o=getJsonObjFromStr(source);    if (o != null) {      try {        if (o instanceof JSONObject) {          format(tag,((JSONObject)o).toString(2));        } else         if (o instanceof JSONArray) {          format(tag,((JSONArray)o).toString(2));        } else {          format(tag,source);        }      } catch (      JSONException e) {        format(tag,source);      }    } else {      format(tag,source);    }  }}  }
class C{  @Override public boolean isShown(){  return isShown;}  }
class C{  protected synchronized void afterSpaceModeChange(SpaceMode newMode){  if (_logger.isLoggable(Level.FINER))   _logger.finer("Invoking afterSpaceModeChange event, new mode is " + newMode);  Queue<ISpaceModeListener> remoteListeners=new LinkedList<ISpaceModeListener>();  for (Iterator<ISpaceModeListener> iter=_primarySpaceModeListeners.iterator(); iter.hasNext(); ) {    ISpaceModeListener listener=iter.next();    try {      if (LRMIUtilities.isRemoteProxy(listener)) {        if (_logger.isLoggable(Level.FINEST))         _logger.finest("located remote listener for afterSpaceModeChange, adding to asynchronous dispatch queue [" + listener.toString() + "]");        remoteListeners.add(listener);        continue;      }      listener.afterSpaceModeChange(newMode);    } catch (    Exception rex) {      if (_logger.isLoggable(Level.FINE)) {        _logger.log(Level.FINE,"Failed to invoke remote method ISpaceModeListener.afterSpaceModeChange(...) implemented by listener [" + listener + "]. Action Taken: Unregistered listener",rex);      }      _primarySpaceModeListeners.removeListener(listener);    }  }  if (remoteListeners.size() > 0)   dispatchAfterEventToRemoteListeners(remoteListeners,newMode);  if (_logger.isLoggable(Level.FINEST))   _logger.finest("completed invoking synchronous afterSpaceModeChange event with mode " + newMode);}  }
class C{  @NotNull private ImageOverlayBuilder outlineOCRRegion(@NotNull OCRResult.Region region){  region.lines.forEach(null);  return this;}  }
class C{  public void sum(String column) throws QueryPlanException {  this.sumColumnName=column;}  }
class C{  public void removeDecoration(int pieceIndex,int decorationIndex,boolean updateSkills){  if (decorations[pieceIndex][decorationIndex] != dummyDecoration && decorations[pieceIndex][decorationIndex] != null) {    decorations[pieceIndex][decorationIndex]=null;    int i=0;    Decoration[] newDecorations=new Decoration[3];    for (    Decoration d : decorations[pieceIndex]) {      if (d != null && d != dummyDecoration) {        newDecorations[i++]=d;      }    }    while (i < newDecorations.length) {      newDecorations[i++]=null;    }    decorations[pieceIndex]=newDecorations;    if (updateSkills) {      updateSkillTreePointsSets();    }  }}  }
class C{  @Override public void allocate(){  Log.d(Mary.LOG,"dUMMYfree START alllocate");  if (isLoaded()) {    return;  }  BulkTimer.LOAD.start();  Lexicon lexicon=getLexicon();  Log.d(Mary.LOG,"lexicon = " + lexicon);  if (lexicon != null && !lexicon.isLoaded()) {    Log.d(Mary.LOG,"lexicon insead= " + lexicon.toString());    try {      lexicon.load();    } catch (    IOException ioe) {      throw new Error("Can't load voice",ioe);    }  }  Log.d(Mary.LOG,"start lexicon loader ");  loader();  Log.d(Mary.LOG,"end lexicon loader ");  BulkTimer.LOAD.stop();  if (isMetrics()) {    BulkTimer.LOAD.show("loading " + toString() + " for "+ getRunTitle());  }  setLoaded(true);}  }
class C{  @Override public void json(String json){  if (TextUtils.isEmpty(json)) {    d("Empty/Null json content");    return;  }  try {    if (json.startsWith("{")) {      JSONObject jsonObject=new JSONObject(json);      String message=jsonObject.toString(JSON_INDENT);      d(message);      return;    }    if (json.startsWith("[")) {      JSONArray jsonArray=new JSONArray(json);      String message=jsonArray.toString(JSON_INDENT);      d(message);    }  } catch (  JSONException e) {    e(e.getCause().getMessage() + "\n" + json);  }}  }
class C{  public PhotosReportCommentQuery(VkApiClient client,UserActor actor,int ownerId,int commentId){  super(client,"photos.reportComment",OkResponse.class);  accessToken(actor.getAccessToken());  ownerId(ownerId);  commentId(commentId);}  }
class C{  public static boolean showDefaultConfigurationFileMissingChoice(final String title,final Scene scene){  final DialogAction createWithSample=new DialogAction("Create " + BaseConfigurationManager.APPLICATION_NAME + " configuration file with sample content",System.getProperty("line.separator") + "This creates a configuration file " + "in \""+ BaseConfigurationManager.getDefaultHomeDirectory()+ "\""+ " called \""+ BaseConfigurationManager.getDefaultConfigurationFileName()+ "\""+ ", which will include sample connections to localhost and iot.eclipse.org.");  final DialogAction createEmpty=new DialogAction("Create empty " + BaseConfigurationManager.APPLICATION_NAME + " configuration file",System.getProperty("line.separator") + "This creates a configuration file " + "in \""+ BaseConfigurationManager.getDefaultHomeDirectory()+ "\""+ " called \""+ BaseConfigurationManager.getDefaultConfigurationFileName()+ "\" with no sample connections.");  final DialogAction copyExisting=new DialogAction("Copy existing " + BaseConfigurationManager.APPLICATION_NAME + " configuration file",System.getProperty("line.separator") + "This copies an existing configuration file (selected in the next step) " + "to \""+ BaseConfigurationManager.getDefaultHomeDirectory()+ "\""+ " and renames it to \""+ BaseConfigurationManager.getDefaultConfigurationFileName()+ "\".");  final DialogAction dontDoAnything=new DialogAction("Don't do anything",System.getProperty("line.separator") + "You can still point " + BaseConfigurationManager.APPLICATION_NAME+ " at your chosen configuration file "+ "by using the \"--configuration=my_custom_path\""+ " command line parameter or open a configuration file from the main menu.");  final List<DialogAction> links=Arrays.asList(createWithSample,createEmpty,copyExisting,dontDoAnything);  Optional<DialogAction> response=CommandLinksDialog.showCommandLinks(title,"Please select one of the following options with regards to the " + BaseConfigurationManager.APPLICATION_NAME + " configuration file:",links.get(0),links,550,650,30,110,scene.getStylesheets());  boolean configurationFileCreated=false;  if (!response.isPresent()) {  } else   if (response.get().getHeading().toLowerCase().contains("sample")) {    configurationFileCreated=BaseConfigurationManager.createDefaultConfigFromClassPath("sample");  } else   if (response.get().getHeading().toLowerCase().contains("empty")) {    configurationFileCreated=BaseConfigurationManager.createDefaultConfigFromClassPath("empty");  } else   if (response.get().getHeading().toLowerCase().contains("copy")) {    final FileChooser fileChooser=new FileChooser();    fileChooser.setTitle("Select configuration file to copy");    String extensions="xml";    fileChooser.setSelectedExtensionFilter(new ExtensionFilter("XML file",extensions));    final File selectedFile=fileChooser.showOpenDialog(scene.getWindow());    if (selectedFile != null) {      configurationFileCreated=BaseConfigurationManager.createDefaultConfigFromFile(selectedFile);    }  } else {  }  return configurationFileCreated;}  }
class C{  public AdsGetSuggestionsQueryWithRegions(VkApiClient client,UserActor actor,AdsGetSuggestionsSection section){  super(client,"ads.getSuggestions",Utils.buildParametrizedType(List.class,TargSuggestionsRegions.class));  accessToken(actor.getAccessToken());  section(section);}  }
class C{  private static int snapLeft(Collection<ConstraintWidget> widgets,ConstraintWidget widget,int left,ArrayList<SnapCandidate> snapCandidates){  return snapHorizontal(widgets,widget,widget.getAnchor(ConstraintAnchor.Type.LEFT),left,snapCandidates);}  }
class C{  @Override public SketchSetOperationPostAggregation withFields(List<PostAggregation> fields){  return new SketchSetOperationPostAggregation(getName(),getFunc(),fields,getSize());}  }
class C{  public boolean isKeyguardSecure(){  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN) {    LogUtils.e("can not call isKeyguardSecure if SDK_INT < 16 ");    return false;  } else {    return keyguardManager.isKeyguardSecure();  }}  }
class C{  public static Patterns jars(String[] includes,String[] excludes){  return new Patterns(includes,excludes);}  }
class C{  public void clear(){  super.clear();  location=null;}  }
class C{  public static VersionNumber parseLastVersionNumber(@Nonnull final String text){  return VersionParser.parseLastVersionNumber(Check.notNull(text,"text"));}  }
class C{  public boolean addAll(PointsToSetInternal other,PointsToSetInternal exclude){  if (exclude != null) {    throw new RuntimeException("NYI");  }  return newSet.addAll(other,oldSet);}  }
class C{  public void addSwipeListener(SwipeListener listener){  if (mListeners == null) {    mListeners=new ArrayList<SwipeListener>();  }  mListeners.add(listener);}  }
class C{  protected boolean expect(TokenKind kind){  return expect(kind,false);}  }
class C{  public tsfile_data data(TimeSeriesCollection ts_data){  final dictionary_delta dict_delta=new dictionary_delta();  dict_delta.gdd=new path_dictionary_delta[0];  dict_delta.mdd=new path_dictionary_delta[0];  dict_delta.sdd=new strval_dictionary_delta[0];  dict_delta.tdd=new tag_dictionary_delta[0];  final List<tsfile_record> records=new ArrayList<>();  final Iterator<TimeSeriesValue> tsv_iter=ts_data.getTSValues().stream().iterator();  while (tsv_iter.hasNext()) {    final TimeSeriesValue tsv=tsv_iter.next();    tsfile_record record=new tsfile_record();    record.group_ref=simpleGroupPath_index(dict_delta,tsv.getGroup().getPath());    record.tag_ref=tags_index(dict_delta,tsv.getGroup().getTags());    record.metrics=tsv.getMetrics().entrySet().stream().map(null).toArray(null);    records.add(record);  }  tsfile_data result=new tsfile_data();  result.records=records.stream().toArray(null);  result.ts=timestamp(ts_data.getTimestamp());  if (dict_delta.gdd.length > 0 || dict_delta.mdd.length > 0 || dict_delta.sdd.length > 0 || dict_delta.tdd.length > 0)   result.dd=dict_delta;  return result;}  }
class C{  @Override public void onUIRefreshPrepare(PtrFrameLayout frame){}  }
class C{  public void printDuration(String tag){  LogUtils.i(tag + " :  " + duration());}  }
class C{  public static void main(String[] args){  Key k=generate(512);  System.out.println(k);  String s="hello";  String pub_key="MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBANckZ1iK/1sOb7N1n2xuwiIoHZtJ3mgaV3s0PCcJKhdV5MsjQ/yzQ5N4lnQd9RyLjVfDH6M6KNDSmPc+rmRFRH0CAwEAAQ==";  String pri_key="MIIBVAIBADANBgkqhkiG9w0BAQEFAASCAT4wggE6AgEAAkEA1yRnWIr/Ww5vs3WfbG7CIigdm0neaBpXezQ8JwkqF1XkyyND/LNDk3iWdB31HIuNV8Mfozoo0NKY9z6uZEVEfQIDAQABAkArmSv8TIa9DCrkwkRhc/yRcXG2g3y3ugbaZ9Z8zqWh/p2bU0ih2EdhqCl1M9QzOlmwdgL6dOZtupr93cvPwb2dAiEA/8plzQ4y0xGqbRjDai4KfEwgNQ57T0f74giFqErHzRsCIQDXUXzpRbnMqksB/SrT45BzPUH4eEIoYQ2ZBuEVuLJGRwIhANufHlU30a+kRV4ymuZ57YrXmfe0HW/u8HgctRXQT0jtAiBqPCNkOOm+KDtP5OhPmRS5Nv0oqbUClTgPS4ycmf8jmwIgfKUvHfL+DBr0mhee0kXE//RVOHUORv9jgyFL7TK1W6s=";  byte[] ss=encode(s.getBytes(),pub_key);  System.out.println(new String(Base64.encode(ss)));  byte[] ss1=decode(ss,pri_key);  System.out.println(new String(ss1));}  }
class C{  public static long calculateDifferentDay(Date startDate,Date endDate){  return calculateDifference(startDate,endDate,DifferenceMode.Day);}  }
class C{  private void reset(){  currentIndex=0;  undoList.clear();  updateMenuItems();}  }
class C{  public static JavaPairRDD<Integer,Iterable<Tuple2<Integer,BigInteger>>> computeExpTable(JavaSparkContext sc,FileSystem fs,BroadcastVars bVars,Query query,String queryInputFile,String outputDirExp,boolean useModExpJoin){  JavaPairRDD<Integer,Iterable<Tuple2<Integer,BigInteger>>> expCalculations;  logger.info("Creating expTable in hdfs for query identifier = " + query.getQueryInfo().getIdentifier());  Path outPathExp=new Path(outputDirExp);  try {    if (fs.exists(outPathExp)) {      fs.delete(outPathExp,true);    }  } catch (  IOException e) {    e.printStackTrace();  }  Map<Integer,BigInteger> queryElements=query.getQueryElements();  List<Integer> keys=new ArrayList<>(queryElements.keySet());  int numSplits=SystemConfiguration.getIntProperty("pir.expCreationSplits",100);  JavaRDD<Integer> queryHashes=sc.parallelize(keys,numSplits);  int numExpLookupPartitions=SystemConfiguration.getIntProperty("pir.numExpLookupPartitions",100);  expCalculations=queryHashes.flatMapToPair(new ExpTableGenerator(bVars)).groupByKey(numExpLookupPartitions);  if (!useModExpJoin) {    JavaPairRDD<Integer,String> hashToPartition=expCalculations.mapPartitionsToPair(new ExpKeyFilenameMap(bVars));    Map<Integer,String> queryHashFileNameMap=hashToPartition.collectAsMap();    query.setExpFileBasedLookup(new HashMap<>(queryHashFileNameMap));    try {      new HadoopFileSystemStore(fs).store(queryInputFile,query);    } catch (    IOException e) {      e.printStackTrace();    }    bVars.setQuery(query);  }  logger.info("Completed creation of expTable");  return expCalculations;}  }
class C{  public ConfigurationNotFoundException(String s){  super(s);}  }
class C{  public GroupsIsMemberQueryWithUserIds isMember(UserActor actor,String groupId,Integer... userIds){  return new GroupsIsMemberQueryWithUserIds(getClient(),actor,groupId,userIds);}  }
class C{  public TicTacTocPoint(int x,int y){  super();  this.x=x;  this.y=y;}  }
class C{  private void putForeignKeyValue(ContentValues values,DataSupport baseObj){  Map<String,Long> associatedModelMap=baseObj.getAssociatedModelsMapWithoutFK();  for (  String associatedTableName : associatedModelMap.keySet()) {    values.put(getForeignKeyColumnName(associatedTableName),associatedModelMap.get(associatedTableName));  }}  }
class C{  private void applyForceAtPointAction(){  TreePath path=this.tree.getSelectionPath();  if (path != null) {    DefaultMutableTreeNode node=(DefaultMutableTreeNode)path.getLastPathComponent();    if (node.getUserObject() instanceof SandboxBody) {      SandboxBody body=(SandboxBody)node.getUserObject();      Vector2[] forcePoint=ApplyForceAtPointDialog.show(ControlUtilities.getParentWindow(this));      if (forcePoint != null) {synchronized (Simulation.LOCK) {          body.applyForce(forcePoint[0],forcePoint[1]);        }      }    }  }}  }
class C{  private void handleNotifyCoreSA(Context context,NotifyTemplateHolder template,boolean fromReplication,AnswerHolder answer){  boolean shouldReplicate=false;  if (_engine.isReplicated() && !_engine.getSpaceImpl().isBackup())   shouldReplicate=_engine.shouldReplicate(ReplicationOperationType.NOTIFY,true,!template.isReplicateNotify(),fromReplication);  _cacheManager.insertTemplate(context,template,shouldReplicate);  Uuid spaceUID=_engine.getSpaceImpl().getUuid();  answer.setEventRegistration(new GSEventRegistration(template.getEventId(),null,context.getNotifyLease(),template.getSequenceNumber(),template.getUID(),spaceUID));}  }
class C{  public boolean isCritical(){  return false;}  }
class C{  private void tryStartingKbMode(int keyCode){  if ((keyCode == -1 || addKeyIfLegal(keyCode))) {    mInKbMode=true;    mDoneButton.setEnabled(false);    updateDisplay(false);  }}  }
class C{  public GaussianComponent(double componentWeight,Matrix mean,Matrix covariances) throws IllegalArgumentException {  if (componentWeight < 0 || componentWeight > 1)   throw new IllegalArgumentException("the weight of the component must be in the intervall [0,1];");  if (mean == null || covariances == null)   throw new IllegalArgumentException("mean and covariances must not be null values;");  this.mean=mean;  this.covariances=covariances;  this.componentWeight=componentWeight;  dimension=mean.getRowDimension();  try {    covariances.times(mean);    actualizeOptimizationFields();  } catch (  Exception e) {    throw new IllegalArgumentException("mean and covariance matrix must have compatible shapes and the covarince matrix must not be singular;");  }}  }
class C{  public FixedWidthTextTableSchema(){}  }
class C{  @Override public Filter createFilter(){  return new BeyondExtended();}  }
class C{  protected void addCenter(NlComponent node,String id){  Rectangle b=new Rectangle(node.x,node.y,node.w,node.h);  myCenterHorizEdges.add(new Segment(centerY(b),b.x,x2(b),node,id,SegmentType.CENTER_HORIZONTAL,NO_MARGIN));  myCenterVertEdges.add(new Segment(centerX(b),b.y,y2(b),node,id,SegmentType.CENTER_VERTICAL,NO_MARGIN));}  }
class C{  final public static long updateCollection(Object id,V v,Class<? extends Bean> t){  return updateCollection(id,v,t,false);}  }
class C{  public PointFillDetails(FunctionNameInterface functionManager){  super(PointFillDetails.class,configFile,functionManager);}  }
class C{  public static URL makeURL(String pathname) throws MalformedURLException {  if (pathname.startsWith("/")) {    return new URL("file://" + pathname);  }  String userdir=System.getProperty("user.dir");  userdir=userdir.replace('\\','/');  if (userdir.endsWith("/")) {    return new URL("file:///" + userdir + pathname);  } else {    return new URL("file:///" + userdir + "/"+ pathname);  }}  }
class C{  public DistributionDocumentEvaluator(Map<Integer,String> mIdxToWord,grammaticalityEstimator geEstimator){  WordMap=mIdxToWord;  Estimator=geEstimator;}  }
class C{  public TLongObjectHashMap(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor);}  }
class C{  public void onFailure(int statusCode,Header[] headers,String responseBody,Throwable error){  onFailure(responseBody,error);}  }
class C{  public static void writeLittleEndianInt(DataOutputStream dataStream,int val) throws IOException {  int mask=0x000000ff;  for (int shift=0; shift < 32; shift+=8) {    dataStream.writeByte(mask & (val >> shift));  }}  }
class C{  public ConnectionEndpointDetails(){}  }
class C{  public static GeneralPath stackSpline(GeneralPath p,float[] pts,float epsilon,float slack,boolean closed,float tx,float ty){  int npoints=0;  for (; npoints < pts.length; ++npoints)   if (Float.isNaN(pts[npoints]))   break;  return stackSpline(p,pts,0,npoints / 2,epsilon,slack,closed,tx,ty);}  }
class C{  public static ManifestModInfo create(File modFile,Manifest manifest){  Set<Object> attributeNames=manifest.getMainAttributes().keySet();  if (!attributeNames.contains(new Attributes.Name("ID"))) {    return null;  }  ManifestModInfo container=new ManifestModInfo();  Attributes attributes=manifest.getMainAttributes();  for (  Field field : ManifestModInfo.class.getDeclaredFields()) {    if (field.isAnnotationPresent(SerializedName.class)) {      String name=field.getAnnotation(SerializedName.class).value();      if (attributeNames.contains(new Attributes.Name(name))) {        try {          field.set(container,attributes.getValue(name).split("\\s*<-->")[0]);        } catch (        IllegalAccessException e) {          OpenModLoader.getLogger().catching(e);          return null;        }      }    }  }  container.modFile=modFile;  return container;}  }
class C{  public void paintSelection(Graphics g0){  Graphics2D g=(Graphics2D)g0;  SelectedBlock selectedBlock=getSelectedBlock();  if (selectedBlock.isSelected()) {    Rectangle2D rect=new Rectangle2D.Double(Math.max(0,getX(selectedBlock.getFirstCol())),0,0,0);    rect.add(Math.min(getX(selectedBlock.getLastCol() + 1),getSize().getWidth()),getSize().height);    g.setColor(highlightColorSemiTransparent);    g.fill(rect);  }}  }
class C{  public IdentityHashSet(Collection<E> original){  delegate=new IdentityHashMap<E,E>();  addAll(original);}  }
class C{  public void update(PhysicalTable table,DataSourceMetadata metadata){  ConcurrentSkipListMap<DateTime,Map<String,SegmentInfo>> current=metadata.getSegments().stream().collect(Collectors.groupingBy(null,null,Collectors.mapping(null,COLLECTOR)));  allSegments.computeIfAbsent(table,null).set(current);}  }
class C{  public boolean readClass(DataInputStream d){  try {    magic=d.readInt() & 0xFFFFFFFFL;    if (magic != MAGIC) {      G.v().out.println("Wrong magic number in " + fn + ": "+ magic);      return false;    }    minor_version=d.readUnsignedShort();    major_version=d.readUnsignedShort();    constant_pool_count=d.readUnsignedShort();    if (!readConstantPool(d))     return false;    access_flags=d.readUnsignedShort();    this_class=d.readUnsignedShort();    super_class=d.readUnsignedShort();    interfaces_count=d.readUnsignedShort();    if (interfaces_count > 0) {      interfaces=new int[interfaces_count];      int j;      for (j=0; j < interfaces_count; j++)       interfaces[j]=d.readUnsignedShort();    }    if (Options.v().time())     Timers.v().fieldTimer.start();    fields_count=d.readUnsignedShort();    readFields(d);    if (Options.v().time())     Timers.v().fieldTimer.end();    if (Options.v().time())     Timers.v().methodTimer.start();    methods_count=d.readUnsignedShort();    readMethods(d);    if (Options.v().time())     Timers.v().methodTimer.end();    if (Options.v().time())     Timers.v().attributeTimer.start();    attributes_count=d.readUnsignedShort();    if (attributes_count > 0) {      attributes=new attribute_info[attributes_count];      readAttributes(d,attributes_count,attributes);    }    if (Options.v().time())     Timers.v().attributeTimer.end();  } catch (  IOException e) {    throw new RuntimeException("IOException with " + fn + ": "+ e.getMessage(),e);  }  return true;}  }
class C{  public static boolean isImage(File file){  Uri selectedUri=Uri.fromFile(file);  String fileExtension=MimeTypeMap.getFileExtensionFromUrl(selectedUri.toString().toLowerCase());  String mimeType=MimeTypeMap.getSingleton().getMimeTypeFromExtension(fileExtension);  return (mimeType != null && mimeType.startsWith("image/"));}  }
class C{  private FileFinderResult find(FileType fileType) throws FileFinderException {  FileFinderResult fileFinderResultByType=new FileFinderResult();  List<FileMatch> sourceMatchCandidates=getSourceMatcheCandidates(fileType);  List<FileMatch> targetMatcheCandidates=getTargetMatcheCandidates(fileType);  targetMatcheCandidates=filterTargetMatchesWithoutSourceMatches(sourceMatchCandidates,targetMatcheCandidates);  sourceMatchCandidates=filterSourceMatchesThatAreTargetMatches(sourceMatchCandidates,targetMatcheCandidates);  fileFinderResultByType.getSources().addAll(sourceMatchCandidates);  fileFinderResultByType.getTargets().addAll(targetMatcheCandidates);  return fileFinderResultByType;}  }
class C{  void hideFooter(){  state=FooterState.STATE_GONE;  hideView();}  }
class C{  public static BufferedImage mergeImageAndText(URL imageFilePath,List<TextPosition> textList) throws IOException {  BufferedImage im=ImageIO.read(imageFilePath);  Graphics2D g2=im.createGraphics();  Font font=AppSplashScreen.getFont();  g2.setFont(font);  g2.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_ON);  g2.setColor(Color.black);  for (  TextPosition obj : textList) {    g2.drawString(obj.textString,obj.position.x,obj.position.y);  }  ByteArrayOutputStream baos=new ByteArrayOutputStream();  ImageIO.write(im,"png",baos);  InputStream in=new ByteArrayInputStream(baos.toByteArray());  BufferedImage bImageFromConvert=ImageIO.read(in);  return bImageFromConvert;}  }
class C{  public static String formatUid(int uid){  StringBuilder sb=new StringBuilder();  formatUid(sb,uid);  return sb.toString();}  }
class C{  public WasabiEmailException(ErrorCode errorCode,String message,Throwable cause){  super(errorCode,message,cause);}  }
class C{  public static boolean checkBsDiffFileSize(File bsDiffFile,File newFile){  if (!bsDiffFile.exists()) {    throw new TinkerPatchException("can not find the bsDiff file:" + bsDiffFile.getAbsolutePath());  }  double ratio=bsDiffFile.length() / (double)newFile.length();  if (ratio > TypedValue.BSDIFF_PATCH_MAX_RATIO) {    Logger.e("bsDiff patch file:%s, size:%dk, new file:%s, size:%dk. patch file is too large, treat it as newly file to save patch time!",bsDiffFile.getName(),bsDiffFile.length() / 1024,newFile.getName(),newFile.length() / 1024);    return false;  }  return true;}  }
class C{  @Override public void cancel(){  bobcatWait.withTimeout(Timeouts.BIG).until(WindowActions.clickButton(noButton));}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public RShiftExpr fullCopy(){  RShiftExpr tree=(RShiftExpr)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public static Map<String,Object> createContentAssoc(DispatchContext dctx,Map<String,? extends Object> rcontext){  Map<String,Object> context=UtilMisc.makeMapWritable(rcontext);  context.put("entityOperation","_CREATE");  List<String> targetOperationList=ContentWorker.prepTargetOperationList(context,"_CREATE");  List<String> contentPurposeList=ContentWorker.prepContentPurposeList(context);  context.put("targetOperationList",targetOperationList);  context.put("contentPurposeList",contentPurposeList);  context.put("skipPermissionCheck",null);  Map<String,Object> result=null;  try {    result=createContentAssocMethod(dctx,context);  } catch (  GenericServiceException e) {    return ServiceUtil.returnError(e.getMessage());  }catch (  GenericEntityException e2) {    return ServiceUtil.returnError(e2.getMessage());  }catch (  Exception e3) {    return ServiceUtil.returnError(e3.getMessage());  }  return result;}  }
class C{  public void remove(GenericEntity entity){  UtilCache.clearCache(getCacheName(entity.getEntityName()));  ModelEntity model=entity.getModelEntity();  if (model != null) {    Iterator<String> it=model.getViewConvertorsIterator();    while (it.hasNext()) {      String targetEntityName=it.next();      UtilCache.clearCache(getCacheName(targetEntityName));    }  }}  }
class C{  private String formatString(final String s){  if (s.equals(newLine)) {    return s;  }  return String.format("[%s]: %s",timestamp(),s);}  }
class C{  void assignToNew(String fileName,PageFormatter fmtr){  internalLock.writeLock().lock();  try {    flush();    fmtr.format(this);    blk=contents.append(fileName);    pins=0;    isNew=true;    lastLsn=LogSeqNum.DEFAULT_VALUE;  }  finally {    internalLock.writeLock().unlock();  }}  }
class C{  public boolean isSetCallType(){  return __isset_bit_vector.get(__CALLTYPE_ISSET_ID);}  }
class C{  protected void initEnvironment(Options options,MainArguments mainArgs,JCommander jcommander){}  }
class C{  protected void invalidateSchema(){  super.invalidateSchema();  this.filterColumns();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_REJECTED_INVITE_FORCE(String value0){  return new SM_SYSTEM_MESSAGE(1390117,value0);}  }
class C{  private static int try_failure(int count,String s,String e){  print(">    " + s + "*** failure ***\n>      Message: "+ e+ "\n");  return ++count;}  }
class C{  public boolean showCookiesSites(){  return mContentSettingsType == ContentSettingsType.CONTENT_SETTINGS_TYPE_COOKIES;}  }
class C{  public int indexOf(T o){  for (int i=0; i < size && elems[i] != null; i++) {    if (elems[i].equals(o))     return i;  }  return -1;}  }
class C{  public ASCIIReader(InputStream inputStream,byte[] buffer,MessageFormatter messageFormatter,Locale locale){  fInputStream=inputStream;  fBuffer=buffer;  fFormatter=messageFormatter;  fLocale=locale;}  }
class C{  final public static int insertCollection(String collection,V v){  MongoCollection<Document> c=getCollection(collection);  if (c != null) {    Document d=new Document();    for (    String name : v.names()) {      Object v1=v.value(name);      d.append(name,v1);    }    try {      c.insertOne(d);      if (log.isDebugEnabled())       log.debug("inserted collection=" + collection + ", d="+ d);      return 1;    } catch (    Exception e) {      if (log.isErrorEnabled())       log.error(e.getMessage(),e);    }  }  return 0;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Confuse_END_A_TO_B(String skilltarget){  return new SM_SYSTEM_MESSAGE(1200902,skilltarget);}  }
class C{  public static void startMe(Context _context){  Intent intent=new Intent(_context,RegisterActivity.class);  intent.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);  _context.startActivity(intent);}  }
class C{  public void decreaseDpi(){  if (this.currentDpiPos > 0) {    --this.currentDpiPos;  }}  }
class C{  public IResource[] promptForMultiple() throws InterruptedException {  List targetResources=new ArrayList();  for (int i=0; i < resources.length; i++) {    IResource resource=resources[i];    if (condition.needsPrompt(resource) && confirmOverwrite) {      if (confirmOverwrite(condition.promptMessage(resource))) {        targetResources.add(resource);      }    } else {      targetResources.add(resource);    }  }  return (IResource[])targetResources.toArray(new IResource[targetResources.size()]);}  }
class C{  public int remove(T item){  int index=indexOf(item);  if (index >= 0)   super.remove(index);  return index;}  }
class C{  @Override public int hashCode(){  return (getClass().getName() + Name).hashCode();}  }
class C{  public static byte[] hexStringToByte(final String source){  byte[] bytes=null;  if (source != null) {    bytes=new byte[source.length() / 2];    int i=0;    while (i < bytes.length) {      bytes[i]=(byte)(Integer.parseInt(source.substring(i * 2,(i + 1) * 2),16));      i++;    }  }  return bytes;}  }
class C{  public void rollback(ServerTransaction xtn,boolean anyUpdates) throws SAException {}  }
class C{  public LocationAnimator(){  super();}  }
class C{  public void add(UIElement element){  elements.add(element);}  }
class C{  public static JavaPairRDD<Integer,Iterable<Tuple2<Integer,BigInteger>>> computeExpTable(JavaSparkContext sc,FileSystem fs,BroadcastVars bVars,Query query,String queryInputFile,String outputDirExp){  return computeExpTable(sc,fs,bVars,query,queryInputFile,outputDirExp,false);}  }
class C{  public FruchtermanReingoldLayout(String graph){  this(graph,700);}  }
class C{  @Override public int[] makeDensityTestPoints(){  return new int[]{-1,0,1,2,3,4,5,6,7,8,9,10,11};}  }
class C{  public PhotosGetCommentsQuery fields(List<EnumParam> value){  return unsafeParam("fields",value);}  }
class C{  public boolean insertTrivialPhiNodes(){  update();  boolean change=false;  varToBlocks=new HashMultiMap<Local,Block>();  Map<Local,List<Block>> localsToDefPoints=new HashMap<Local,List<Block>>();  for (  Block block : cfg) {    for (    Unit unit : block) {      List<ValueBox> defBoxes=unit.getDefBoxes();      for (      ValueBox vb : defBoxes) {        Value def=vb.getValue();        if (def instanceof Local) {          Local local=(Local)def;          List<Block> def_points=null;          if (localsToDefPoints.containsKey(local)) {            def_points=localsToDefPoints.get(local);          } else {            def_points=new ArrayList<Block>();            localsToDefPoints.put(local,def_points);          }          def_points.add(block);        }      }      if (Shimple.isPhiNode(unit))       varToBlocks.put(Shimple.getLhsLocal(unit),block);    }  }  int[] workFlags=new int[cfg.size()];  int iterCount=0;  Stack<Block> workList=new Stack<Block>();  Map<Integer,Integer> has_already=new HashMap<Integer,Integer>();  for (Iterator<Block> blocksIt=cfg.iterator(); blocksIt.hasNext(); ) {    Block block=blocksIt.next();    has_already.put(block.getIndexInMethod(),0);  }{    for (    Local local : localsToDefPoints.keySet()) {      iterCount++;{        List<Block> def_points=localsToDefPoints.get(local);        if (def_points.size() == 1) {          continue;        }        for (        Block block : def_points) {          workFlags[block.getIndexInMethod()]=iterCount;          workList.push(block);        }      }      while (!workList.empty()) {        Block block=workList.pop();        DominatorNode<Block> node=dt.getDode(block);        Iterator<DominatorNode<Block>> frontierNodes=df.getDominanceFrontierOf(node).iterator();        while (frontierNodes.hasNext()) {          Block frontierBlock=frontierNodes.next().getGode();          int fBIndex=frontierBlock.getIndexInMethod();          Iterator<Unit> unitsIt=frontierBlock.iterator();          if (!unitsIt.hasNext()) {            continue;          }          if (has_already.get(frontierBlock.getIndexInMethod()) < iterCount) {            has_already.put(frontierBlock.getIndexInMethod(),iterCount);            prependTrivialPhiNode(local,frontierBlock);            change=true;            if (workFlags[fBIndex] < iterCount) {              workFlags[fBIndex]=iterCount;              workList.push(frontierBlock);            }          }        }      }    }  }  return change;}  }
class C{  public static void remove(String name){  Helper.delete(W.create("name",name),Jar.class);}  }
class C{  public static boolean canUseSkill(Player player,Skill skill){  for (  Restrictions restrictions : RESTRICTIONS[RestrictionMode.canUseSkill.ordinal()]) {    if (!restrictions.canUseSkill(player,skill)) {      return false;    }  }  return true;}  }
class C{  public static boolean attemptCrafting(EntityPlayerMP player,IRecipe recipe){  if (player == null || recipe == null)   return false;  ItemStack is=recipe.getRecipeOutput();  if (is == null)   return false;  List<ItemStack> ingredients=getIngredients(recipe);  if (playerHasIngredients(player,ingredients)) {    removeIngredientsFromPlayer(player,ingredients);    ItemStack resultForInventory=is.copy();    ItemStack resultForReward=is.copy();    player.inventory.addItemStackToInventory(resultForInventory);    RewardForCollectingItemImplementation.GainItemEvent event=new RewardForCollectingItemImplementation.GainItemEvent(resultForReward);    MinecraftForge.EVENT_BUS.post(event);    return true;  }  return false;}  }
class C{  @Override public Object apply(SqlFunctionExecutionContext context){  assertNumberOfArguments(2,context);  Object str=context.getArgument(0);  Object subStr=context.getArgument(1);  if (str != null && subStr != null && str instanceof String && subStr instanceof String) {    return String.valueOf(str).indexOf(String.valueOf(subStr)) + 1;  } else {    throw new RuntimeException("InStr function - wrong arguments types. First argument:[" + str + "]. Second argument:[ "+ subStr+ "]");  }}  }
class C{  public void createWindowSurface(Object surface){  if (eGLSurface != EGL14.EGL_NO_SURFACE) {    throw new IllegalStateException("surface already created");  }  eGLSurface=eglCore.createWindowSurface(surface);}  }
class C{  private void createDictionaryCacheForGivenType(CacheType cacheType,String carbonStorePath){  Cache cacheObject=null;  if (cacheType.equals(CacheType.REVERSE_DICTIONARY)) {    cacheObject=new ReverseDictionaryCache<DictionaryColumnUniqueIdentifier,Dictionary>(carbonStorePath,cacheTypeToLRUCacheMap.get(cacheType));  } else   if (cacheType.equals(CacheType.FORWARD_DICTIONARY)) {    cacheObject=new ForwardDictionaryCache<DictionaryColumnUniqueIdentifier,Dictionary>(carbonStorePath,cacheTypeToLRUCacheMap.get(cacheType));  }  cacheTypeToCacheMap.put(cacheType,cacheObject);}  }
class C{  public boolean handleSVNDir(IContainer svnDir){  if (!svnDir.isTeamPrivateMember()) {    IFile entriesFile=svnDir.getFile(new Path(SVNConstants.SVN_ENTRIES));    if (entriesFile.exists() && !svnDir.isTeamPrivateMember()) {      try {        svnDir.setTeamPrivateMember(true);        if (Policy.DEBUG_METAFILE_CHANGES) {          System.out.println("[svn] found a new SVN meta folder, marking as team-private: " + svnDir.getFullPath());        }      } catch (      CoreException e) {        SVNProviderPlugin.log(SVNException.wrapException(svnDir,Policy.bind("SyncFileChangeListener.errorSettingTeamPrivateFlag"),e));      }    }  }  return svnDir.isTeamPrivateMember();}  }
class C{  public static Class forName(String name) throws ClassNotFoundException {  return forName(name,getDefaultClassLoader());}  }
class C{  private static boolean isIntegral(JsonPrimitive primitive){  if (primitive.value instanceof Number) {    Number number=(Number)primitive.value;    return number instanceof BigInteger || number instanceof Long || number instanceof Integer|| number instanceof Short|| number instanceof Byte;  }  return false;}  }
class C{  public void resetConstraintHandles(){  mConstraintHandles.clear();  for (  ConstraintAnchor anchor : mWidget.getAnchors()) {switch (anchor.getType()) {case LEFT:{        mConstraintHandles.add(mLeftAnchor);      }    break;case TOP:{    mConstraintHandles.add(mTopAnchor);  }break;case RIGHT:{mConstraintHandles.add(mRightAnchor);}break;case BOTTOM:{mConstraintHandles.add(mBottomAnchor);}break;case BASELINE:{mConstraintHandles.add(mBaselineAnchor);}break;case CENTER_X:{mConstraintHandles.add(mCenterXAnchor);}break;case CENTER_Y:{mConstraintHandles.add(mCenterYAnchor);}break;case CENTER:{mConstraintHandles.add(mCenterAnchor);}break;}}for (ConstraintHandle handle : mConstraintHandles) {handle.updateAnchor();}}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_ITEM_PAINT_SUCCEED(int objectNameId,int colorItemNameId){  return new SM_SYSTEM_MESSAGE(1401436,calculateNameId(objectNameId),new DescriptionId(colorItemNameId));}  }
class C{  void draw(Canvas canvas,Paint textPaint){  if (drawText(canvas,textPaint,characterList,bottomCharIndex,bottomDelta)) {    if (bottomCharIndex >= 0) {      currentChar=characterList[bottomCharIndex];    } else     if (bottomCharIndex == UNKNOWN_END_INDEX) {      currentChar=targetChar;    }    currentBottomDelta=bottomDelta;  }  drawText(canvas,textPaint,characterList,bottomCharIndex + 1,bottomDelta - charHeight);  drawText(canvas,textPaint,characterList,bottomCharIndex - 1,bottomDelta + charHeight);}  }
class C{  public static String translateJavaVersion(int javaVersion){  if (javaVersion == Options.java_version_default) {    return "1.0";  } else {    return "1." + (javaVersion - 1);  }}  }
class C{  public Created(Object impl,Object proxy){  this.proxy=proxy;  this.impl=impl;}  }
class C{  public boolean hasAdditionalText(){  return mAdditionalText != null;}  }
class C{  public static byte[] bitmapToByte(Bitmap b){  ByteArrayOutputStream o=new ByteArrayOutputStream();  b.compress(Bitmap.CompressFormat.PNG,100,o);  return o.toByteArray();}  }
class C{  protected void loader() throws IOException {  setupFeatureSet();  setupUtteranceProcessors();  setupFeatureProcessors();}  }
class C{  public int model(){  return theType.model();}  }
class C{  public void delete(){  if (tx.isReadOnly() && !isTempTable())   throw new UnsupportedOperationException();  if (fhp == null)   fhp=openHeaderForModification();  RecordId deletedRid=currentRecordId();  tx.recoveryMgr().logLogicalStart();  rp.delete(fhp.getLastDeletedSlot());  fhp.setLastDeletedSlot(currentRecordId());  tx.recoveryMgr().logRecordFileDeletionEnd(ti.tableName(),deletedRid.block().number(),deletedRid.id());  closeHeader();}  }
class C{  public void evalute(Element element){switch (code) {case PAGE_INSTRUCTION:    element.putAttribute(PageAttribute.KEY,PageAttribute.create(arg));  break;case SUPPRESS_WARNING_INSTRUCTION:element.getModel().addSupressionDirective(element,arg);break;case RESOURCE_INSTRUCTION:if (!(element instanceof MessageType)) {element.getModel().getDiagCollector().addDiag(Diag.error(element.getLocation(),"resource instruction must be associated with a message declaration, but '%s' " + "is not a message.",element.getFullName()));} else {element.addAttribute(ResourceAttribute.KEY,ResourceAttribute.create(arg));}break;case DEPRECATION_DESCRIPTION:element.putAttribute(DeprecationDescriptionAttribute.KEY,DeprecationDescriptionAttribute.create(arg));break;default :element.getModel().getDiagCollector().addDiag(Diag.error(element.getLocation(),"documentation instruction '%s' unknown.",code));}}  }
class C{  @Override public void startDocument() throws SAXException {  super.startDocument();}  }
class C{  public static Map<String,Object> createTelecomNumber(DispatchContext ctx,Map<String,? extends Object> context){  Map<String,Object> result=FastMap.newInstance();  Delegator delegator=ctx.getDelegator();  Security security=ctx.getSecurity();  GenericValue userLogin=(GenericValue)context.get("userLogin");  Locale locale=(Locale)context.get("locale");  Timestamp now=UtilDateTime.nowTimestamp();  List<GenericValue> toBeStored=FastList.newInstance();  String partyId=ServiceUtil.getPartyIdCheckSecurity(userLogin,security,context,result,"PARTYMGR","_PCM_CREATE");  if (result.size() > 0)   return result;  String contactMechTypeId="TELECOM_NUMBER";  String newCmId=null;  try {    newCmId=delegator.getNextSeqId("ContactMech");  } catch (  IllegalArgumentException e) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.could_not_create_contact_info_id_generation_failure",locale));  }  GenericValue tempContactMech=delegator.makeValue("ContactMech",UtilMisc.toMap("contactMechId",newCmId,"contactMechTypeId",contactMechTypeId));  toBeStored.add(tempContactMech);  toBeStored.add(delegator.makeValue("PartyContactMech",UtilMisc.toMap("partyId",partyId,"contactMechId",newCmId,"fromDate",now,"roleTypeId",context.get("roleTypeId"),"allowSolicitation",context.get("allowSolicitation"),"extension",context.get("extension"))));  toBeStored.add(delegator.makeValue("TelecomNumber",UtilMisc.toMap("contactMechId",newCmId,"countryCode",context.get("countryCode"),"areaCode",context.get("areaCode"),"contactNumber",context.get("contactNumber"))));  try {    delegator.storeAll(toBeStored);  } catch (  GenericEntityException e) {    Debug.logWarning(e.toString(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.could_not_create_contact_info_write",UtilMisc.toMap("errMessage",e.getMessage()),locale));  }  result.put("contactMechId",newCmId);  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);  return result;}  }
class C{  public void add(FieldIdEnum fieldId,FieldConfigBase fieldConfig){  Map<FieldIdEnum,FieldConfigBase> panelMap=fieldConfigMap.get(panelId);  if (panelMap == null) {    panelMap=new HashMap<FieldIdEnum,FieldConfigBase>();  }  panelMap.put(fieldId,fieldConfig);}  }
class C{  @Override protected void initComparator(){  if (Comparator == null)   Comparator=new NGramCachedNonSymmGraphComparator();}  }
class C{  public void doMeasure(int widthMeasureSpec,int heightMeasureSpec){  if (mVideoRotationDegree == 90 || mVideoRotationDegree == 270) {    int tempSpec=widthMeasureSpec;    widthMeasureSpec=heightMeasureSpec;    heightMeasureSpec=tempSpec;  }  int width=View.getDefaultSize(mVideoWidth,widthMeasureSpec);  int height=View.getDefaultSize(mVideoHeight,heightMeasureSpec);  if (mCurrentAspectRatio == IRenderView.AR_MATCH_PARENT) {    width=widthMeasureSpec;    height=heightMeasureSpec;  } else   if (mVideoWidth > 0 && mVideoHeight > 0) {    int widthSpecMode=View.MeasureSpec.getMode(widthMeasureSpec);    int widthSpecSize=View.MeasureSpec.getSize(widthMeasureSpec);    int heightSpecMode=View.MeasureSpec.getMode(heightMeasureSpec);    int heightSpecSize=View.MeasureSpec.getSize(heightMeasureSpec);    if (widthSpecMode == View.MeasureSpec.AT_MOST && heightSpecMode == View.MeasureSpec.AT_MOST) {      float specAspectRatio=(float)widthSpecSize / (float)heightSpecSize;      float displayAspectRatio;switch (mCurrentAspectRatio) {case IRenderView.AR_16_9_FIT_PARENT:        displayAspectRatio=16.0f / 9.0f;      if (mVideoRotationDegree == 90 || mVideoRotationDegree == 270)       displayAspectRatio=1.0f / displayAspectRatio;    break;case IRenderView.AR_4_3_FIT_PARENT:  displayAspectRatio=4.0f / 3.0f;if (mVideoRotationDegree == 90 || mVideoRotationDegree == 270) displayAspectRatio=1.0f / displayAspectRatio;break;case IRenderView.AR_ASPECT_FIT_PARENT:case IRenderView.AR_ASPECT_FILL_PARENT:case IRenderView.AR_ASPECT_WRAP_CONTENT:default :displayAspectRatio=(float)mVideoWidth / (float)mVideoHeight;if (mVideoSarNum > 0 && mVideoSarDen > 0) displayAspectRatio=displayAspectRatio * mVideoSarNum / mVideoSarDen;break;}boolean shouldBeWider=displayAspectRatio > specAspectRatio;switch (mCurrentAspectRatio) {case IRenderView.AR_ASPECT_FIT_PARENT:case IRenderView.AR_16_9_FIT_PARENT:case IRenderView.AR_4_3_FIT_PARENT:if (shouldBeWider) {width=widthSpecSize;height=(int)(width / displayAspectRatio);} else {height=heightSpecSize;width=(int)(height * displayAspectRatio);}break;case IRenderView.AR_ASPECT_FILL_PARENT:if (shouldBeWider) {height=heightSpecSize;width=(int)(height * displayAspectRatio);} else {width=widthSpecSize;height=(int)(width / displayAspectRatio);}break;case IRenderView.AR_ASPECT_WRAP_CONTENT:default :if (shouldBeWider) {width=Math.min(mVideoWidth,widthSpecSize);height=(int)(width / displayAspectRatio);} else {height=Math.min(mVideoHeight,heightSpecSize);width=(int)(height * displayAspectRatio);}break;}} else if (widthSpecMode == View.MeasureSpec.EXACTLY && heightSpecMode == View.MeasureSpec.EXACTLY) {width=widthSpecSize;height=heightSpecSize;if (mVideoWidth * height < width * mVideoHeight) {width=height * mVideoWidth / mVideoHeight;} else if (mVideoWidth * height > width * mVideoHeight) {height=width * mVideoHeight / mVideoWidth;}} else if (widthSpecMode == View.MeasureSpec.EXACTLY) {width=widthSpecSize;height=width * mVideoHeight / mVideoWidth;if (heightSpecMode == View.MeasureSpec.AT_MOST && height > heightSpecSize) {height=heightSpecSize;}} else if (heightSpecMode == View.MeasureSpec.EXACTLY) {height=heightSpecSize;width=height * mVideoWidth / mVideoHeight;if (widthSpecMode == View.MeasureSpec.AT_MOST && width > widthSpecSize) {width=widthSpecSize;}} else {width=mVideoWidth;height=mVideoHeight;if (heightSpecMode == View.MeasureSpec.AT_MOST && height > heightSpecSize) {height=heightSpecSize;width=height * mVideoWidth / mVideoHeight;}if (widthSpecMode == View.MeasureSpec.AT_MOST && width > widthSpecSize) {width=widthSpecSize;height=width * mVideoHeight / mVideoWidth;}}} else {}mMeasuredWidth=width;mMeasuredHeight=height;}  }
class C{  public static boolean isLifecycleClass(String className){  return className.equals(ACTIVITYCLASS) || className.equals(SERVICECLASS) || className.equals(BROADCASTRECEIVERCLASS)|| className.equals(CONTENTPROVIDERCLASS)|| className.equals(APPLICATIONCLASS);}  }
class C{  static int findBestSampleSize(int actualWidth,int actualHeight,int desiredWidth,int desiredHeight){  double wr=(double)actualWidth / desiredWidth;  double hr=(double)actualHeight / desiredHeight;  double ratio=Math.min(wr,hr);  float n=1.0f;  while ((n * 2) <= ratio) {    n*=2;  }  return (int)n;}  }
class C{  public static KeyStore createRootCertificateKeyStore(String keyStoreType,X509Certificate certificate,String privateKeyAlias,PrivateKey privateKey,String privateKeyPassword,String provider){  if (privateKeyPassword == null) {    throw new IllegalArgumentException("Must specify a KeyStore password");  }  KeyStore newKeyStore=KeyStoreUtil.createEmptyKeyStore(keyStoreType,provider);  try {    newKeyStore.setKeyEntry(privateKeyAlias,privateKey,privateKeyPassword.toCharArray(),new Certificate[]{certificate});  } catch (  KeyStoreException e) {    throw new KeyStoreAccessException("Unable to store certificate and private key in KeyStore",e);  }  return newKeyStore;}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public AbstractDot fullCopy(){  AbstractDot tree=(AbstractDot)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public ResizeImageTransform(int newWidth,int newHeight){  this(null,newWidth,newHeight);}  }
class C{  private void determinePhraseTopBaseConf(Element phrase){  Voice voice=null;  Element voiceElement=(Element)DomUtils.getAncestor(phrase,MaryXML.VOICE);  if (voiceElement != null)   voice=Voice.getVoice(voiceElement);  if (voice == null)   voice=defaultVoiceMap.get(phrase.getOwnerDocument());  if (voice == null) {    voice=Voice.getDefaultVoice(getLocale());  }  if (!(voice instanceof MbrolaVoice)) {    throw new IllegalStateException("TobiContourGenerator can be used only for MBROLA voices, but voice " + voice.getName() + " is a "+ voice.getClass().toString());  }  MbrolaVoice mVoice=(MbrolaVoice)voice;  int topStart=mVoice.topStart();  int topEnd=mVoice.topEnd();  int baseStart=mVoice.baseStart();  int baseEnd=mVoice.baseEnd();  TopBaseConfiguration tbConf=new TopBaseConfiguration(topStart,topEnd,baseStart,baseEnd);  Element current=phrase;  Stack<Element> prosodyElements=new Stack<Element>();  while (DomUtils.hasAncestor(current,MaryXML.PROSODY)) {    current=(Element)DomUtils.getAncestor(current,MaryXML.PROSODY);    prosodyElements.push(current);    if (voiceElement != null && !DomUtils.isAncestor(voiceElement,current)) {      break;    }  }  while (!prosodyElements.empty()) {    Element prosody=prosodyElements.pop();    tbConf=calculateTopBase(prosody,tbConf);  }  Element lastSegment=DomUtils.getLastElementByTagName(phrase,MaryXML.PHONE);  if (lastSegment != null) {    int endTime=getSegmentEndInMillis(lastSegment);    if (endTime == -1) {      Log.w(Mary.LOG,"Unexpected end time `" + lastSegment.getAttribute("end") + "'");    }    tbConf.setTimes(0,endTime);  }  topBaseConfMap.put(phrase,tbConf);}  }
class C{  private static boolean clientOverwriteable(SootMethod m){  SootClass c=m.getDeclaringClass();  if (!c.isFinal() && !m.isFinal() && visible(m)&& clientCanInstantiate(c))   return true;  return false;}  }
class C{  public static Tuple min(TupleSet tuples,String field){  return min(tuples,field,DefaultLiteralComparator.getInstance());}  }
class C{  public TraceInfo(TraceInfo other){  __isset_bit_vector.clear();  __isset_bit_vector.or(other.__isset_bit_vector);  if (other.isSetClientAppkey()) {    this.clientAppkey=other.clientAppkey;  }  if (other.isSetTraceId()) {    this.traceId=other.traceId;  }  if (other.isSetSpanId()) {    this.spanId=other.spanId;  }  if (other.isSetRootMessageId()) {    this.rootMessageId=other.rootMessageId;  }  if (other.isSetCurrentMessageId()) {    this.currentMessageId=other.currentMessageId;  }  if (other.isSetServerMessageId()) {    this.serverMessageId=other.serverMessageId;  }  this.debug=other.debug;  this.sample=other.sample;  if (other.isSetClientIp()) {    this.clientIp=other.clientIp;  }}  }
class C{  public static <T>void removeAll(List<T> list,List<Integer> indexes){  if (list == null || indexes == null) {    return;  }  Collections.sort(indexes,Collections.reverseOrder());  final int size=list.size();  for (  Integer index : indexes) {    if (index >= 0 && index < size) {      list.remove((int)index);    }  }}  }
class C{  public int hashCode(){  int hash=type;  if (loader != null) {    hash+=loader.hashCode();  }  for (int i=contextElements.length; --i >= 0; ) {    hash+=contextElements[i].hashCode();  }  if (principals != null) {    for (int i=principals.length; --i >= 0; ) {      hash+=principals[i].hashCode();    }  }  for (int i=permissions.length; --i >= 0; ) {    hash+=permissions[i].hashCode();  }  return hash;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DelayedSpellATK_Instant_INTERVAL_ME_TO_SELF(int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200352,num0,skillname);}  }
class C{  private static String trimCommentIndentation(String description){  if (description.startsWith(" ")) {    description=description.substring(1);  }  return description.replace("\n ","\n").replace("\r ","\r");}  }
class C{  @ApiMethod(path="{type}/",verb=ApiVerb.POST,description="Write one or more entries to the space.",consumes={MediaType.APPLICATION_JSON_VALUE},produces={MediaType.APPLICATION_JSON_VALUE}) @RequestMapping(value="/{type}",method=RequestMethod.POST,consumes={MediaType.APPLICATION_JSON_VALUE},produces={MediaType.APPLICATION_JSON_VALUE}) public @ResponseBody Map<String,Object> post(@ApiPathParam(name="type",description=TYPE_DESCRIPTION) @PathVariable String type,@RequestBody(required=false) @ApiBodyObject(clazz=ErrorMessage.class) String requestBody) throws TypeNotFoundException {  if (logger.isLoggable(Level.FINE))   logger.fine("performing post, type: " + type);  if (requestBody == null) {    throw new RestException("Request body cannot be empty");  }  GigaSpace gigaSpace=ControllerUtils.xapCache.get();  createAndWriteDocuments(gigaSpace,type,requestBody,WriteModifiers.UPDATE_OR_WRITE);  Map<String,Object> result=new HashMap<String,Object>();  result.put("status","success");  return result;}  }
class C{  public static Map<String,Object> updateBinaryFile(DispatchContext dctx,Map<String,? extends Object> context){  Map<String,Object> result=null;  try {    result=updateBinaryFileMethod(dctx,context);  } catch (  GenericServiceException e) {    return ServiceUtil.returnError(e.getMessage());  }  return result;}  }
class C{  public TrustManagerBuilder add(TrustManager... mgrs){  for (  TrustManager tm : mgrs) {    if (tm instanceof X509TrustManager) {      mgr.add((X509TrustManager)tm);    }  }  return (this);}  }
class C{  public boolean isTransparent(){  return transparent;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_PAY_GIVEUP_OTHER(String value0){  return new SM_SYSTEM_MESSAGE(1390229,value0);}  }
class C{  static void testValidity(Object o) throws JSONException {  if (o != null) {    if (o instanceof Double) {      if (((Double)o).isInfinite() || ((Double)o).isNaN()) {        throw new JSONException("JSON does not allow non-finite numbers.");      }    } else     if (o instanceof Float) {      if (((Float)o).isInfinite() || ((Float)o).isNaN()) {        throw new JSONException("JSON does not allow non-finite numbers.");      }    }  }}  }
class C{  public void readJasmin(InputStream input,String name,boolean numberLines) throws IOException, Exception {  errors=0;  filename=name;  source_name=name;  auto_number=numberLines;  class_env=new ClassEnv();  scanner=new Scanner(input);  parser parse_obj=new parser(this,scanner);  if (false) {  } else {    parse_obj.parse();  }}  }
class C{  public MaryData process(MaryData d,List<Target> targetFeaturesList,List<Element> segmentsAndBoundaries,List<Element> tokensAndBoundaries) throws Exception {  Voice v=d.getDefaultVoice();  assert v instanceof HMMVoice;  HMMVoice hmmv=(HMMVoice)v;  HTSUttModel um=processTargetList(targetFeaturesList,segmentsAndBoundaries,hmmv.getHMMData());  HTSParameterGeneration pdf2par=new HTSParameterGeneration();  pdf2par.htsMaximumLikelihoodParameterGeneration(um,hmmv.getHMMData());  HTSVocoder par2speech=new HTSVocoder();  AudioInputStream ais=par2speech.htsMLSAVocoder(pdf2par,hmmv.getHMMData());  MaryData output=new MaryData(outputType(),d.getLocale());  if (d.getAudioFileFormat() != null) {    output.setAudioFileFormat(d.getAudioFileFormat());    if (d.getAudio() != null) {      assert d.getAudio() instanceof AppendableSequenceAudioInputStream;      output.setAudio(d.getAudio());    }  }  output.appendAudio(ais);  if (tokensAndBoundaries != null)   setRealisedProsody(tokensAndBoundaries,um);  return output;}  }
class C{  @deprecated public String toString(int start,int limit){  StringBuilder result=new StringBuilder();  for (int i=start; i < limit; i++) {    Object item=this.items.get(i);    if ((item instanceof String)) {      String itemString=(String)item;      result.append(this.tokenizer.quoteLiteral(itemString));    } else {      result.append(this.items.get(i).toString());    }  }  return result.toString();}  }
class C{  @Nullable private String findLabel(TransformWork work,String label){  String val=work.getLabel(label);  if (val != null) {    return val;  }  for (  Change<?> change : work.getChanges().getCurrent()) {    val=change.getLabels().get(label);    if (val != null) {      return val;    }  }  return null;}  }
class C{  private static short rangeCheck(short value) throws NumberFormatException {  if (value < MIN_VALUE || value > MAX_VALUE) {    throw new NumberFormatException("Value is out of range : " + value);  }  return value;}  }
class C{  public static InputStream openResourceFileAsStream(String resourceFileName){  if (resourceFileName.equals("jtok/enen_b-abbrev.txt"))   resourceFileName="jtok/en/en_b-abbrev.txt";  InputStream is=null;  try {    is=MaryLink.getContext().getAssets().open(resourceFileName);    if (null == is) {      is=MaryLink.getContext().getAssets().open("/" + resourceFileName);      if (null == is) {        is=MaryLink.getContext().getAssets().open(resourceFileName);        if (null == is) {          is=new FileInputStream(resourceFileName);        }      }    }  } catch (  Exception e) {    Log.d(Mary.LOG,"openResourceFileAsStream, CANN'T open file=" + resourceFileName);  }  return is;}  }
class C{  private void updateAssociatedTableWithFK(DataSupport baseObj){  Map<String,Set<Long>> associatedModelMap=baseObj.getAssociatedModelsMapWithFK();  ContentValues values=new ContentValues();  for (  String associatedTableName : associatedModelMap.keySet()) {    values.clear();    String fkName=getForeignKeyColumnName(baseObj.getTableName());    values.put(fkName,baseObj.getBaseObjId());    Set<Long> ids=associatedModelMap.get(associatedTableName);    if (ids != null && !ids.isEmpty()) {      mDatabase.update(associatedTableName,values,getWhereOfIdsWithOr(ids),null);    }  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_MPHeal_INTERVAL_A_TO_SELF(String skillcaster,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200841,skillcaster,num0,skillname);}  }
class C{  public static int[] sortValues(Matrix m){  double[] v=new double[m.getColumnDimension()];  int[] index=new int[v.length];  for (int i=0; i < v.length; i++) {    v[i]=m.get(i,i);    index[i]=i;  }  for (int i=0; i < v.length; i++) {    for (int j=i + 1; j < v.length; j++) {      if (Math.abs(v[i]) < Math.abs(v[j])) {        double tmpValue=v[j];        v[j]=v[i];        v[i]=tmpValue;        int tmpIndex=index[j];        index[j]=index[i];        index[i]=tmpIndex;      }    }  }  return index;}  }
class C{  public static double oneTailedFishersExact(int k,int n,int r,int m){  if (k < 0 || k < (m + r) - n || k > r || k > m || r > n || m > n) {    throw new IllegalArgumentException("Invalid Fisher's exact: " + "k=" + k + " n="+ n+ " r="+ r+ " m="+ m+ " k<0="+ (k < 0)+ " k<(m+r)-n="+ (k < (m + r) - n)+ " k>r="+ (k > r)+ " k>m="+ (k > m)+ " r>n="+ (r > n)+ "m>n="+ (m > n));  }  if (m > n / 2) {    m=n - m;    k=r - k;  }  if (r > n / 2) {    r=n - r;    k=m - k;  }  if (m > r) {    int temp=m;    m=r;    r=temp;  }  double total=0.0;  if (k > m / 2) {    for (int k0=k; k0 <= m; k0++) {      total+=SloppyMath.hypergeometric(k0,n,r,m);    }  } else {    int min=Math.max(0,(m + r) - n);    for (int k0=min; k0 < k; k0++) {      total+=SloppyMath.hypergeometric(k0,n,r,m);    }    total=1.0 - total;  }  return total;}  }
class C{  public StreamSource(File f){  setSystemId(f.toURI().toASCIIString());}  }
class C{  public static File[] convertFileCollectionToFileArray(Collection<File> files){  return files.toArray(new File[files.size()]);}  }
class C{  private int updateMouseCursor(ResizeHandle handle){  if (handle == null) {    return Cursor.DEFAULT_CURSOR;  }switch (handle.getType()) {case LEFT_BOTTOM:{      return Cursor.SW_RESIZE_CURSOR;    }case LEFT_TOP:{    return Cursor.NW_RESIZE_CURSOR;  }case RIGHT_BOTTOM:{  return Cursor.SE_RESIZE_CURSOR;}case RIGHT_TOP:{return Cursor.NE_RESIZE_CURSOR;}case LEFT_SIDE:{return Cursor.W_RESIZE_CURSOR;}case RIGHT_SIDE:{return Cursor.E_RESIZE_CURSOR;}case TOP_SIDE:{return Cursor.N_RESIZE_CURSOR;}case BOTTOM_SIDE:{return Cursor.S_RESIZE_CURSOR;}}return Cursor.DEFAULT_CURSOR;}  }
class C{  public int findIndexOfValue(String value){  if (value != null && mEntryValues != null) {    for (int i=mEntryValues.length - 1; i >= 0; i--) {      if (mEntryValues[i].equals(value)) {        return i;      }    }  }  return -1;}  }
class C{  private void addReportingRates(DataQueryParams params,Grid grid){  if (!params.getReportingRates().isEmpty() && !params.isSkipData()) {    for (    ReportingRateMetric metric : ReportingRateMetric.values()) {      DataQueryParams dataSourceParams=DataQueryParams.newBuilder(params).retainDataDimensionReportingRates(metric).withIncludeNumDen(false).ignoreDataApproval().withAggregationType(AggregationType.COUNT).withTimely((REPORTING_RATE_ON_TIME == metric || ACTUAL_REPORTS_ON_TIME == metric)).build();      addReportingRates(dataSourceParams,grid,metric,params.isIncludeNumDen());    }  }}  }
class C{  public static String toPEMformat(X509Certificate[] certificateChain){  StringWriter sw=new StringWriter();  for (  X509Certificate certificate : certificateChain) {    sw.append(toPEMformat(certificate));  }  return sw.toString();}  }
class C{  public static StyledLayerDescriptor createSLDFromString(SLDDataInterface sldData){  if ((sldData == null) || (sldData.getSld() == null)) {    return null;  }  StyleFactory styleFactory=CommonFactoryFinder.getStyleFactory();  InputStream stream=new ByteArrayInputStream(sldData.getSld().getBytes());  SLDParser styleReader=new SLDParser(styleFactory,stream);  URL resourceLocator=getResourceLocator(sldData);  sldData.setResourceLocator(resourceLocator);  setResourcelocator(styleReader,resourceLocator);  StyledLayerDescriptor sld=null;  try {    sld=styleReader.parseSLD();  } catch (  RuntimeException e) {    ConsoleManager.getInstance().error(SLDUtils.class,e.getMessage());  }  return sld;}  }
class C{  public T walkInDefaultOrder(final FieldVectorChangingVisitor<T> visitor,final int start,final int end) throws MathIllegalArgumentException {  checkIndices(start,end);  visitor.start(getDimension(),start,end);  for (int i=start; i <= end; i++) {    setEntry(i,visitor.visit(i,getEntry(i)));  }  return visitor.end();}  }
class C{  protected void searchUpdate(){  String query=m_queryF.getText();synchronized (m_lock) {    m_searcher.search(query);    if (m_searcher.getQuery().length() == 0)     m_resultL.setText(null); else {      int r=m_searcher.getTupleCount();      m_resultL.setText(r + " match" + (r == 1 ? "" : "es"));    }  }}  }
class C{  protected void okButtonPressed(){  String selectedItem=(String)comboBoxNewSLD.getSelectedItem();  if (selectedItem != null) {    if (newSLDObjectMap != null) {      selected=newSLDObjectMap.get(selectedItem);    }  }  setVisible(false);}  }
class C{  private void putEntry(String key,CacheHeader entry){  if (!mEntries.containsKey(key)) {    mTotalSize+=entry.size;  } else {    CacheHeader oldEntry=mEntries.get(key);    mTotalSize+=(entry.size - oldEntry.size);  }  mEntries.put(key,entry);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_MagicCounterATK_A_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200989,skilltarget,skillcaster,skillname);}  }
class C{  public LineUnavailableException(){  super();}  }
class C{  public PercentageCellRenderer(){  super();  withRatingColors(0,1);}  }
class C{  public int read() throws IOException {  if (totalRead >= totalExpected) {    return -1;  }  int result=in.read();  if (result != -1) {    totalRead++;  }  return result;}  }
class C{  public FriendsGetAvailableForCallQuery nameCase(UsersNameCase value){  return unsafeParam("name_case",value);}  }
class C{  public static String gmlPosToString(String pos,String precision) throws ParseException {  int nDecimals=Integer.parseInt(precision);  String[] c=pos.trim().split("\\s",2);  if (c.length != 2) {    return "";  }  String lat=parseCoordinate(c[0],nDecimals,NF), lon=parseCoordinate(c[1],nDecimals,NF);  return "[" + lat + ","+ lon+ "]";}  }
class C{  public XMLInputSource(String publicId,String systemId,String baseSystemId){  fPublicId=publicId;  fSystemId=systemId;  fBaseSystemId=baseSystemId;}  }
class C{  public static boolean hasEquipmentValueDeadbandChanged(final ISourceDataTag sourceDataTag,final ISourceDataTag oldSourceDataTag){  return sourceDataTag.getValueDeadbandType() == DataTagDeadband.DEADBAND_EQUIPMENT_ABSOLUTE || sourceDataTag.getValueDeadbandType() == DataTagDeadband.DEADBAND_EQUIPMENT_RELATIVE && sourceDataTag.getValueDeadband() != oldSourceDataTag.getValueDeadband();}  }
class C{  private static String toPunycode(String ruleText){  try {    if (UrlUtils.isASCII(ruleText)) {      return ruleText;    }    String[] startsWith=new String[]{"http://www.","https://www.","http://","https://","||"};    String[] contains=new String[]{"/","^"};    int startIndex=-1;    for (    String start : startsWith) {      if (ruleText.startsWith(start)) {        startIndex=start.length();        break;      }    }    if (startIndex == -1) {      return ruleText;    }    int symbolIndex=-1;    for (    String contain : contains) {      int index=ruleText.indexOf(contain,startIndex);      if (index >= 0) {        symbolIndex=index;        break;      }    }    String domain=symbolIndex == -1 ? ruleText.substring(startIndex) : ruleText.substring(startIndex,symbolIndex);    ruleText=StringUtils.replace(ruleText,domain,UrlUtils.toPunycode(domain));    return ruleText;  } catch (  Exception ex) {    LoggerFactory.getLogger(UrlFilterRule.class).warn("Error while getting ascii domain for rule " + ruleText,ex);    return StringUtils.EMPTY;  }}  }
class C{  public DateSelectionDialog(Shell parent,String dateString){  super(parent);  this.setShellStyle(SWT.CLOSE);  this.date=parseDate(dateString);}  }
class C{  private void ensureTupleArray(int row){  int nrows=Math.max(m_table.getRowCount(),row + 1);  if (m_tuples == null) {    m_tuples=new TableTuple[nrows];  } else   if (m_tuples.length < nrows) {    int capacity=Math.max((3 * m_tuples.length) / 2 + 1,nrows);    TableTuple[] tuples=new TableTuple[capacity];    System.arraycopy(m_tuples,0,tuples,0,m_tuples.length);    m_tuples=tuples;  }}  }
class C{  public static String truncateBeforeSecondOccurrence(String text,String word){  int pos=text.indexOf(word);  if (pos == -1)   return text;  pos=text.indexOf(word,pos + 1);  if (pos == -1)   return text; else   return text.substring(0,pos);}  }
class C{  private static String readFile(File file,Charset encoding) throws IOException {  byte[] encoded=Files.readAllBytes(Paths.get(file.getAbsolutePath()));  return new String(encoded,encoding);}  }
class C{  public int hashCode(){  return (ClientMinPrincipal.class.hashCode() + Constraint.hash(principals));}  }
class C{  public static QueryParser create(QueryBuilder queryBuilder){  return new QueryParser(queryBuilder);}  }
class C{  public static void main(String[] args){  String ss="{a:'a',b:1}";  JSON j=JSON.fromObject(ss);  System.out.println(j);  ss="{a:'a',b:1, c:{a:1, b:'a'}}";  j=JSON.fromObject(ss);  System.out.println(j);  System.out.println(j.get("b").getClass());  ss="[{a:'a',b:1}]";  List<JSON> l1=JSON.fromObjects(ss);  System.out.println(l1);  System.out.println(l1.get(0).get("b").getClass());}  }
class C{  public PlacesGetCheckinsQuery timestamp(Integer value){  return unsafeParam("timestamp",value);}  }
class C{  public void testOneSampleUniformUniform(){  final KolmogorovSmirnovTest test=new KolmogorovSmirnovTest();  final UniformRealDistribution unif=new UniformRealDistribution(-0.5,0.5);  Assert.assertEquals(8.881784197001252E-16,test.kolmogorovSmirnovTest(unif,uniform,false),TOLERANCE);  Assert.assertTrue(test.kolmogorovSmirnovTest(unif,uniform,0.05));  Assert.assertEquals(0.5400666982352942,test.kolmogorovSmirnovStatistic(unif,uniform),TOLERANCE);}  }
class C{  public boolean contains(T obj){  throw new RuntimeException("RwlSegmentedStoredList::contains not supported");}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public AssignSimpleExpr fullCopy(){  AssignSimpleExpr tree=(AssignSimpleExpr)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  protected LocationSettings(Context context){  mContext=context;}  }
class C{  @NotNull public AddFaceToFaceListAction addFaceToFaceList(@NotNull String faceListId,@Nullable String userData,@Nullable String targetFace,@NotNull InputStream image){  Validation.validate(faceListId,"^[a-z0-9_-]{1,64}$",new ParameterValidationException("faceListId","Valid character is letter in lower case or digit or '-' or '_', maximum length is 64."));  Validation.validate(Utils.blankIfNull(userData),1,new ParameterValidationException("userData","The size limit is 1KB"));  return new AddFaceToFaceListAction(cognitiveContext,faceListId,userData,targetFace,image);}  }
class C{  public ShortListImpl(short[] array,int length){  fArray=array;  fLength=length;}  }
class C{  public void fileSaved(){  reset();}  }
class C{  public Lexicon removeLowCoverageWords(double coverage){  int minDf=(int)(numDocs * coverage);  return removeLowDfWords(minDf);}  }
class C{  public FieldConfigGeometry(FieldConfigCommonData commonData,String buttonText){  super(commonData);  this.buttonText=buttonText;}  }
class C{  public void drawLine(PointF p1,PointF p2,Canvas canvas,Paint paint){  canvas.save();  canvas.drawLine(p1.x,p1.y,p2.x,p2.y,paint);  canvas.restore();}  }
class C{  @Override public Filter createFilter(List<Expression> parameterList){  IsGreaterThanOrEqualToImpl filter=null;  if ((parameterList == null) || (parameterList.size() != 3)) {    filter=new IsGreaterThanOrEqualToExtended();  } else {    LiteralExpressionImpl matchCase=(LiteralExpressionImpl)parameterList.get(2);    filter=new IsGreaterThanOrEqualToExtended(parameterList.get(0),parameterList.get(1),(Boolean)matchCase.getValue());  }  return filter;}  }
class C{  public String toString(){  return "PartOfSpeechTagger";}  }
class C{  @Override public byte[] asBytes(int rowNumber){  return ByteBuffer.allocate(4).putInt(getInt(rowNumber)).array();}  }
class C{  public static double[][] diag(double[] values){  final int dim=values.length;  final double[][] matrix=new double[dim][dim];  for (int i=0; i < dim; i++) {    matrix[i][i]=values[i];  }  return matrix;}  }
class C{  protected void doOptimizedEval(final Semaphore sSem,PrintStream pOverallResultsOutStream,int WordNGramSize_Min,int WordNGramSize_Max,int Word_Dmax,int CharacterNGramSize_Min,int CharacterNGramSize_Max,int Character_Dmax,boolean bDoCharNGrams,boolean bDoWordNGrams,String sSummaryDir,String sModelDir,int iThreads,boolean bSilent,boolean bProgress) throws Exception {  if (pOverallResultsOutStream == null)   pOverallResultsOutStream=System.out;  ThreadList tqRobin=new ThreadList(iThreads);  DocumentSet dsSummarySet=new DocumentSet(sSummaryDir,1.0);  final DocumentSet dsModelSet=new DocumentSet(sModelDir,1.0);  dsSummarySet.createSets();  dsModelSet.createSets();  HashMap hmCategoryResults=new HashMap();  if (dsSummarySet.getTrainingSet().size() * dsModelSet.getTrainingSet().size() == 0) {    System.err.println("Empty document set...");    throw new Exception("Empty document set...");  }  pOverallResultsOutStream.print("Theme\t");  pOverallResultsOutStream.print("SystemID\t");  if (bDoWordNGrams) {    pOverallResultsOutStream.print("GraphCooccurence\t");    pOverallResultsOutStream.print("GraphValue\t");    pOverallResultsOutStream.print("GraphSize\t");    pOverallResultsOutStream.print("HistoContainmentSimilarity\t");    pOverallResultsOutStream.print("HistoValue\t");    pOverallResultsOutStream.print("HistoSize\t");    pOverallResultsOutStream.print("OverallSimil\t");  }  if (bDoCharNGrams) {    pOverallResultsOutStream.print("CharGraphCooccurence\t");    pOverallResultsOutStream.print("CharGraphValue\t");    pOverallResultsOutStream.print("CharGraphSize\t");    pOverallResultsOutStream.print("NHistoContainmentSimilarity\t");    pOverallResultsOutStream.print("NHistoValue\t");    pOverallResultsOutStream.print("NHistoSize\t");    pOverallResultsOutStream.print("NOverallSimil\t");  }  pOverallResultsOutStream.println();  int iTotal=dsSummarySet.getTrainingSet().size();  int iCur=0;  Iterator iCatIter=dsModelSet.getCategories().iterator();  Date dStart=new Date();  while (iCatIter.hasNext()) {    String sCurCategory=(String)iCatIter.next();    if (!bSilent)     System.err.println("Processing category:" + sCurCategory);    hModelCache.clear();    hNModelCache.clear();    List lModelFiles=dsModelSet.getFilesFromCategory(sCurCategory);    Iterator iIter=dsSummarySet.getFilesFromCategory(sCurCategory,dsSummarySet.FROM_TRAINING_SET).iterator();    while (iIter.hasNext()) {      final CategorizedFileEntry cfeCur=(CategorizedFileEntry)iIter.next();      Runnable r=new CalcSimilRunner(WordNGramSize_Min,WordNGramSize_Max,Word_Dmax,CharacterNGramSize_Min,CharacterNGramSize_Max,Character_Dmax,cfeCur,lModelFiles,sSem,bDoCharNGrams,bDoWordNGrams,pOverallResultsOutStream,bSilent,this,WeightMethod,Progress);      while (!tqRobin.addThreadFor(r))       Thread.yield();      Date dCurTime=new Date();      long lRemaining=(iTotal - iCur + 1) * (long)((double)(dCurTime.getTime() - dStart.getTime()) / iCur);      if (!bSilent || (bProgress))       System.err.print("Completed " + String.format("%7.4f",(double)iCur++ / iTotal * 100) + "%"+ String.format(" - Remaining %50s\r",gr.demokritos.iit.jinsect.utils.millisToMinSecString(lRemaining)));    }  }  try {    tqRobin.waitUntilCompletion();  } catch (  InterruptedException ex) {    System.err.println("Could not complete execution of all tasks.");    ex.printStackTrace(System.err);  }  System.err.println("Completed 100%. A total of " + iTotal + " comparisons were "+ "performed.");}  }
class C{  @Override public void onUIRefreshBegin(PtrFrameLayout frame){  mDrawable.setAlpha(255);  mDrawable.start();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_ARTIFACT_FIRE(DescriptionId race,String value1,DescriptionId descriptionId){  return new SM_SYSTEM_MESSAGE(1301036,race,value1,descriptionId);}  }
class C{  public static boolean isConnected(Context context){  ConnectivityManager cm=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);  NetworkInfo activeNetwork=cm.getActiveNetworkInfo();  return activeNetwork != null && activeNetwork.isConnectedOrConnecting();}  }
class C{  @ObjectiveCName("add:action:name:event:timeoutListener:timeout:") void add(Topic topic,Actions action,String name,Event event,UtilTimeoutListener timeoutListener,int timeout){  String uniqueName=this.getUniqueName(topic,action,name);  this.clear(uniqueName);  addToRegister(topic,action,name,event,timeoutListener,timeout);}  }
class C{  public static <K,V>MapContext<K,V> createMapContext(MapContext<K,V> source){  MapContext<K,V> newValue=MapContext.getMapContext();  newValue.stackList.addAll(source.stackList);  return newValue;}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  @Timed protected Assignment assignUserToLookUp(Assignment assignment,Date date){  final String CQL;  Date paramDate=date;  if (paramDate == null) {    paramDate=new Date();  }  if (assignment.getBucketLabel() != null) {    CQL="insert into user_assignment_look_up " + "(experiment_id, user_id, context, created, bucket_label) " + "values (?, ?, ?, ?, ?)";  } else {    CQL="insert into user_assignment_look_up " + "(experiment_id, user_id, context, created) " + "values (?, ?, ?, ?)";  }  try {    PreparedCqlQuery<User.ID,String> query=driver.getKeyspace().prepareQuery(keyspace.userAssignmentLookUp()).withCql(CQL).asPreparedStatement().withByteBufferValue(assignment.getExperimentID(),ExperimentIDSerializer.get()).withByteBufferValue(assignment.getUserID(),UserIDSerializer.get()).withStringValue(assignment.getContext().getContext()).withByteBufferValue(paramDate,DateSerializer.get());    if (assignment.getBucketLabel() != null) {      query.withByteBufferValue(assignment.getBucketLabel(),BucketLabelSerializer.get());    }    query.execute();    return (Assignment.newInstance(assignment.getExperimentID()).withBucketLabel(assignment.getBucketLabel()).withUserID(assignment.getUserID()).withContext(assignment.getContext()).withStatus(Assignment.Status.NEW_ASSIGNMENT).withCreated(paramDate).withCacheable(null).build());  } catch (  ConnectionException e) {    throw new RepositoryException("Could not save user assignment \"" + assignment + "\"",e);  }}  }
class C{  public RingBuffer(int size){  this.size=size;  buffer=new byte[size];  wp=rp=0;}  }
class C{  public static StyledLayerDescriptor createNewPolygon(){  StyledLayerDescriptor sld=styleFactory.createStyledLayerDescriptor();  NamedLayer namedLayer=styleFactory.createNamedLayer();  sld.addStyledLayer(namedLayer);  Style style=styleFactory.createStyle();  namedLayer.addStyle(style);  List<FeatureTypeStyle> ftsList=style.featureTypeStyles();  FeatureTypeStyle fts=styleFactory.createFeatureTypeStyle();  ftsList.add(fts);  Rule rule=styleFactory.createRule();  fts.rules().add(rule);  PolygonSymbolizer polygon=createDefaultPolygonSymbolizer();  rule.symbolizers().add(polygon);  return sld;}  }
class C{  <T>T onMax(String tableName,String column,String[] conditions,Class<T> type){  return mathQuery(tableName,new String[]{"max(" + column + ")"},conditions,type);}  }
class C{  public KeyHook(String description,int keyCode,String category){  super(description,keyCode,category);}  }
class C{  public PhotosSaveQuery photosList(String value){  return unsafeParam("photos_list",value);}  }
class C{  public int startNewBookie() throws Exception {  ServerConfiguration conf=newServerConfiguration();  startBookie(conf);  return conf.getBookiePort();}  }
class C{  private Map<String,List<ChartObject>> transformToFilterStyle(CriteriaMap<?> criteriaMap,Map<String,List<ChartObject>> input,List<String> chartFields){  Map<String,List<ChartObject>> result=new LinkedHashMap<>();  for (  Map.Entry<String,List<ChartObject>> entry : input.entrySet()) {    boolean isConverted=false;    List<ChartObject> data=entry.getValue();    for (    String field : chartFields) {      QueryBuilder.ComplexSearchCriteria filterCriteria=QueryBuilder.filterSearchCriteriaPreProcessor(field);      String queryCriteria=criteriaMap.getCriteriaHolder(filterCriteria.getGlobalSearchCriteria()).getQueryCriteria();      if (queryCriteria.equals(entry.getKey())) {        result.put(criteriaMap.getCriteriaHolder(queryCriteria).getFilterCriteria(),data);        isConverted=true;        break;      }    }    if (!isConverted)     result.put(entry.getKey(),data);  }  return result;}  }
class C{  void rollbackLocalTransaction() throws RollbackFailedException {  if (_tx == null) {    return;  }  try {    if (_logger.isLoggable(Level.FINEST)) {      _logger.log(Level.FINEST,"Aborting local transaction: " + _tx);    }    _tx.abort();  } catch (  Exception e) {    if (_logger.isLoggable(Level.SEVERE)) {      _logger.log(Level.SEVERE,"Internal error during local transaction abort: " + _tx,e);    }    throw new RollbackFailedException(e);  }}  }
class C{  @Override public boolean add(Interval e){  throw new IllegalAccessError("Do not use add in Simplified Interval List");}  }
class C{  public void showLoadingDialog(String message){  dismissLoadingDialog();  Fragment frag=getSupportFragmentManager().findFragmentByTag(DIALOG_WAIT_TAG);  if (frag == null) {    Log_OC.d(TAG,"show loading dialog");    LoadingDialog loading=new LoadingDialog(message);    FragmentManager fm=getSupportFragmentManager();    FragmentTransaction ft=fm.beginTransaction();    loading.show(ft,DIALOG_WAIT_TAG);    fm.executePendingTransactions();  }}  }
class C{  public JSONStringer endArray() throws JSONException {  return close(Scope.EMPTY_ARRAY,Scope.NONEMPTY_ARRAY,"]");}  }
class C{  public static CommandResult execute(String command,File dir){  SimpleCommand simpleCommand=new SimpleCommand(command);  return execute(simpleCommand,dir);}  }
class C{  public int largestAbsComponent(){  S2Point temp=fabs(this);  if (temp.x > temp.y) {    if (temp.x > temp.z) {      return 0;    } else {      return 2;    }  } else {    if (temp.y > temp.z) {      return 1;    } else {      return 2;    }  }}  }
class C{  private List<DataSourceFieldInterface> processFields(String layerName,JsonElement fieldArrayElement){  List<DataSourceFieldInterface> fieldList=new ArrayList<DataSourceFieldInterface>();  if (fieldArrayElement != null) {    JsonArray fieldArray=fieldArrayElement.getAsJsonArray();    for (int index=0; index < fieldArray.size(); index++) {      JsonObject fieldObject=null;      try {        fieldObject=fieldArray.get(index).getAsJsonObject();      } catch (      IllegalStateException e) {        ConsoleManager.getInstance().error(this,"Layer : " + layerName);        ConsoleManager.getInstance().exception(this,e);      }      if (fieldObject != null) {        Class<?> fieldType=convertFieldType(fieldObject.get("type").getAsString());        DataSourceField esriField=new DataSourceField(fieldObject.get("field").getAsString(),fieldType);        fieldList.add(esriField);      }    }  }  return fieldList;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_DICE_PASSED(String value0){  return new SM_SYSTEM_MESSAGE(1300782,value0);}  }
class C{  public static Rule createTransitiveRule(String ruleId,RelationType relType,String fromRoleId,String toRoleId,MindmapsGraph graph){  final int arity=relType.hasRoles().size();  if (arity != 2)   throw new IllegalArgumentException(ErrorMessage.RULE_CREATION_ARITY_ERROR.getMessage());  VarAdmin startVar=Graql.var().isa(relType.getId()).rel(fromRoleId,"x").rel(toRoleId,"z").admin();  VarAdmin endVar=Graql.var().isa(relType.getId()).rel(fromRoleId,"z").rel(toRoleId,"y").admin();  VarAdmin headVar=Graql.var().isa(relType.getId()).rel(fromRoleId,"x").rel(toRoleId,"y").admin();  String body=Patterns.conjunction(Sets.newHashSet(startVar,endVar)).toString() + ";";  String head=headVar.toString() + ";";  return graph.putRule(ruleId,body,head,graph.getMetaRuleInference());}  }
class C{  public ThisRef newThisRef(RefType t){  return Jimple.v().newThisRef(t);}  }
class C{  public static List<Lock> loadByHost(long uid,long time,String host){  Beans<Lock> bs=Helper.load(W.create("uid",uid).and("created",time,W.OP_GT).and("host",host).sort("created",1),0,Integer.MAX_VALUE,Lock.class);  return bs == null ? null : bs.getList();}  }
class C{  public CauchyDistribution(){  this(0,1);}  }
class C{  public static void handleSubscriptionNotifications(StatefulService service,Operation update,String notificationTaskLink,TaskState opTaskState,int expectedNotificationCount,Object returnState,Set<String> finishedTaskLinks,boolean deleteTask){  int finishedTaskCount;  update.complete();  if ((update.getAction() != Action.PATCH && update.getAction() != Action.PUT)) {    return;  }  if (TaskState.isCancelled(opTaskState) || TaskState.isFailed(opTaskState)) {    SubscriptionUtils.sendFailureSelfPatch(service,new IllegalStateException("Operation failed:" + Utils.toJsonHtml(update)));    if (deleteTask) {      service.sendRequest(Operation.createDelete(service,notificationTaskLink).setBody(new ServiceDocument()));    }    return;  }  if (!TaskState.isFinished(opTaskState)) {    return;  }synchronized (finishedTaskLinks) {    if (!finishedTaskLinks.add(notificationTaskLink)) {      return;    }    finishedTaskCount=finishedTaskLinks.size();  }  Operation deleteOp=Operation.createDelete(service,notificationTaskLink).setReferer(service.getUri()).setCompletion(null);  service.getHost().stopSubscriptionService(deleteOp,UriUtils.buildPublicUri(service.getHost(),update.getUri().getPath()));  if (deleteTask) {    service.sendRequest(Operation.createDelete(service,notificationTaskLink).setBody(new ServiceDocument()));  }  if (finishedTaskCount == expectedNotificationCount) {    SubscriptionUtils.sendPatch(service,returnState);  }}  }
class C{  @Override public String toString(){  return str;}  }
class C{  private void validateSortSize(){  String sortSizeStr=carbonProperties.getProperty(CarbonCommonConstants.SORT_SIZE,CarbonCommonConstants.SORT_SIZE_DEFAULT_VAL);  try {    int sortSize=Integer.parseInt(sortSizeStr);    if (sortSize < CarbonCommonConstants.SORT_SIZE_MIN_VAL) {      LOGGER.info("The batch size value \"" + sortSizeStr + "\" is invalid. Using the default value \""+ CarbonCommonConstants.SORT_SIZE_DEFAULT_VAL);      carbonProperties.setProperty(CarbonCommonConstants.SORT_SIZE,CarbonCommonConstants.SORT_SIZE_DEFAULT_VAL);    }  } catch (  NumberFormatException e) {    LOGGER.info("The batch size value \"" + sortSizeStr + "\" is invalid. Using the default value \""+ CarbonCommonConstants.SORT_SIZE_DEFAULT_VAL);    carbonProperties.setProperty(CarbonCommonConstants.SORT_SIZE,CarbonCommonConstants.SORT_SIZE_DEFAULT_VAL);  }}  }
class C{  public void destroyView() throws CanceledException {  JFrame saveLastActiveFrame=lastActiveFrame;  lastActiveFrame=this.getFrame();  try {    askToSaveCurrent();  } catch (  CanceledException ex) {    ProjectManager.setQuitting(false);    throw ex;  }  try {    if (ProjectManager.isQuitting() && ProjectManager.getNumberOfProjects() == 1) {      if (!confirmQuit()) {        ProjectManager.setQuitting(false);      }    }  } catch (  CanceledException ex) {    ProjectManager.setQuitting(false);    throw ex;  }  doc.closeConnector();  if (lastActiveViewer == MainViewer.this)   lastActiveViewer=null;  lastActiveFrame=saveLastActiveFrame;  if (lastActiveFrame == getFrame())   lastActiveFrame=null;  super.destroyView();}  }
class C{  public static void mainQuickTest2() throws IOException, UnsupportedAudioFileException {  String emotion="angry";  String method="F";  String inputFolder="/project/mary/marcela/VoiceConversion/Neutral-Spike-Conversion/codebook/neutral/train_99";  String outputBaseFolder="/project/mary/marcela/VoiceConversion/Neutral-Spike-Conversion/codebook/neutral2" + emotion + "/neutral2"+ emotion+ "Out_codebook"+ method+ "3";  String baseFile="/project/mary/marcela/VoiceConversion/Neutral-Spike-Conversion/codebook/neutral2" + emotion + "/neutral"+ method+ "_X_"+ emotion+ method+ "_99";  boolean isSourceVocalTractSpectrumFromModel=true;  int numBestMatches=15;  boolean isTemporalSmoothing=true;  int smoothingNumNeighbours=1;  boolean isContextBasedPreselection=true;  int totalContextNeighbours=5;  boolean isPitchFromTargetFile=true;  int pitchFromTargetMethod=ProsodyTransformerParams.FULL_CONTOUR;  boolean isDurationFromTargetFile=true;  int durationFromTargetMethod=ProsodyTransformerParams.PHONEME_DURATIONS;  boolean isEnergyFromTargetFile=false;  boolean isLsfsFromTargetFile=false;  int targetAlignmentFileType=BaselineTransformerParams.FESTIVAL_UTT;  String outputFolderInfoString="isSrc" + String.valueOf(isSourceVocalTractSpectrumFromModel ? 1 : 0) + "_nBest"+ String.valueOf(numBestMatches)+ "_smooth"+ String.valueOf(isTemporalSmoothing ? 1 : 0)+ "_"+ String.valueOf(smoothingNumNeighbours)+ "_context"+ String.valueOf(isContextBasedPreselection ? 1 : 0)+ "_"+ String.valueOf(totalContextNeighbours)+ "_psUtt"+ String.valueOf(isPitchFromTargetFile ? 1 : 0)+ "_tsUtt"+ String.valueOf(isDurationFromTargetFile ? 1 : 0);  mainParametric(inputFolder,outputBaseFolder,baseFile,outputFolderInfoString,isSourceVocalTractSpectrumFromModel,numBestMatches,isTemporalSmoothing,smoothingNumNeighbours,isContextBasedPreselection,totalContextNeighbours,isPitchFromTargetFile,pitchFromTargetMethod,isDurationFromTargetFile,durationFromTargetMethod,isEnergyFromTargetFile,isLsfsFromTargetFile,targetAlignmentFileType);}  }
class C{  public boolean safe_forname(){  return soot.PhaseOptions.getBoolean(options,"safe-forname");}  }
class C{  public double readDouble(){  return X.toDouble(readString(),0);}  }
class C{  public void saveScoreboard(Configuration config,Scoreboard scoreboard){  ConfigurationSection teamsSection=config.createSection("teams");  scoreboard.getTeams().forEach(null);  ConfigurationSection objectivesSection=config.createSection("objectives");  scoreboard.getObjectives().forEach(null);  ConfigurationSection scoresSection=config.createSection("scores");  scoreboard.getEntries().forEach(null);}  }
class C{  public static void resolveExpressionType(PsiElement objSubjectExpression,@Nullable Function objScope,PhpIndex objIndex,HashSet<String> objTypesSet){  objSubjectExpression=ExpressionSemanticUtil.getExpressionTroughParenthesis(objSubjectExpression);  if (objSubjectExpression instanceof ArrayCreationExpression) {    objTypesSet.add(Types.strArray);    checkCallables((ArrayCreationExpression)objSubjectExpression,objScope,objIndex,objTypesSet);    return;  }  if (objSubjectExpression instanceof StringLiteralExpression) {    objTypesSet.add(Types.strString);    return;  }  if (objSubjectExpression instanceof ConstantReference) {    resolveConstantReference((ConstantReference)objSubjectExpression,objScope,objIndex,objTypesSet);    return;  }  if (objSubjectExpression instanceof TernaryExpression) {    resolveTernaryOperator((TernaryExpression)objSubjectExpression,objScope,objIndex,objTypesSet);    return;  }  if (objSubjectExpression instanceof UnaryExpression) {    resolveUnaryExpression((UnaryExpression)objSubjectExpression,objScope,objIndex,objTypesSet);    return;  }  if (objSubjectExpression instanceof BinaryExpression) {    resolveBinaryExpression((BinaryExpression)objSubjectExpression,objScope,objIndex,objTypesSet);    return;  }  if (objSubjectExpression instanceof SelfAssignmentExpression) {    resolveSelfAssignmentExpression((SelfAssignmentExpression)objSubjectExpression,objScope,objIndex,objTypesSet);    return;  }  if (objSubjectExpression instanceof Variable) {    String strVariableName=((Variable)objSubjectExpression).getName();    if (!StringUtil.isEmpty(strVariableName) && strVariableName.charAt(0) == '_') {      if ("|_GET|_POST|_SESSION|_REQUEST|_FILES|_COOKIE|_ENV|_SERVER|".contains("|" + strVariableName + "|")) {        storeAsTypeWithSignaturesImport(Types.strArray,objScope,objIndex,objTypesSet);        return;      }    }    storeAsTypeWithSignaturesImport(((Variable)objSubjectExpression).getSignature(),objScope,objIndex,objTypesSet);    return;  }  if (objSubjectExpression instanceof ArrayAccessExpression) {    PsiElement var=((ArrayAccessExpression)objSubjectExpression).getValue();    if (var instanceof PsiReference) {      var=((PsiReference)var).resolve();    }    if ((var instanceof PhpTypedElement) && ((PhpTypedElement)var).getType().equals(PhpType.STRING)) {      objTypesSet.add(Types.strString);    }    storeAsTypeWithSignaturesImport(((ArrayAccessExpression)objSubjectExpression).getType().toString(),objScope,objIndex,objTypesSet);    return;  }  if (objSubjectExpression instanceof NewExpression) {    resolveNewExpression((NewExpression)objSubjectExpression,objTypesSet);    return;  }  if (objSubjectExpression instanceof PsiReference) {    PsiElement target=((PsiReference)objSubjectExpression).resolve();    if (target instanceof PhpTypedElement) {      storeAsTypeWithSignaturesImport(((PhpTypedElement)target).getType().toString(),objScope,objIndex,objTypesSet);      return;    }  }  if (objSubjectExpression instanceof ClassConstantReference) {    storeAsTypeWithSignaturesImport(((ClassConstantReference)objSubjectExpression).getSignature(),objScope,objIndex,objTypesSet);    return;  }  if (objSubjectExpression instanceof FieldReference) {    storeAsTypeWithSignaturesImport(((FieldReference)objSubjectExpression).getSignature(),objScope,objIndex,objTypesSet);    return;  }  if (objSubjectExpression instanceof MethodReference) {    storeAsTypeWithSignaturesImport(((MethodReference)objSubjectExpression).getSignature(),objScope,objIndex,objTypesSet);    return;  }  if (objSubjectExpression instanceof FunctionReference) {    storeAsTypeWithSignaturesImport(((FunctionReference)objSubjectExpression).getSignature(),objScope,objIndex,objTypesSet);    return;  }  if (objSubjectExpression instanceof FunctionImpl) {    objTypesSet.add(Types.strCallable);    return;  }  if (objSubjectExpression instanceof PhpExpression) {    resolvePhpExpression((PhpExpression)objSubjectExpression,objScope,objIndex,objTypesSet);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_UI_COMBAT_NPC_RETURN_NOMOVE(String value0){  return new SM_SYSTEM_MESSAGE(1300049,value0);}  }
class C{  public ObjectColumn(int nrows){  this(Object.class,nrows,nrows,null);}  }
class C{  public static String formatTimestamp(@Nullable Date date){  return (date != null) ? ISO8601Utils.format(date,true) : null;}  }
class C{  protected GroupsGetMembersQueryWithFields fields(List<UserField> value){  return unsafeParam("fields",value);}  }
class C{  @Override @Transactional(value="cacheTransactionManager") public void doCreateRuleTag(ConfigurationElement element) throws IllegalAccessException {  checkId(element.getEntityId());  tagCache.acquireWriteLockOnKey(element.getEntityId());  try {    LOGGER.trace("Creating RuleTag with id " + element.getEntityId());    RuleTag ruleTag=commonTagFacade.createCacheObject(element.getEntityId(),element.getElementProperties());    Collection<Long> tagIds=ruleTag.getRuleInputTagIds();    try {      configurableDAO.insert(ruleTag);    } catch (    Exception e) {      LOGGER.error("Exception caught while inserting a new Rule into the DB - rolling back changes",e);      throw new UnexpectedRollbackException("Unexpected exception while creating a Rule: rolling back the change",e);    }    try {      for (      Long tagId : tagIds) {        tagConfigGateway.addRuleToTag(tagId,ruleTag.getId());      }      tagCache.putQuiet(ruleTag);    } catch (    RuntimeException e) {      String errMessage="Exception caught while adding a RuleTag - rolling back DB transaction.";      LOGGER.error(errMessage,e);      tagCache.remove(ruleTag.getId());      for (      Long tagId : tagIds) {        try {          tagConfigGateway.removeRuleFromTag(tagId,ruleTag.getId());        } catch (        RuntimeException ex) {          LOGGER.warn("Exception caught while attempting to role back rule creation in cache (removing references from input tags)",ex);        }      }      throw new UnexpectedRollbackException(errMessage,e);    }  }  finally {    tagCache.releaseWriteLockOnKey(element.getEntityId());  }}  }
class C{  @TargetApi(Build.VERSION_CODES.LOLLIPOP) private static boolean relaunchTask(int tabId){  if (tabId == Tab.INVALID_TAB_ID)   return false;  Context context=ApplicationStatus.getApplicationContext();  ActivityManager manager=(ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);  for (  AppTask task : manager.getAppTasks()) {    RecentTaskInfo info=DocumentUtils.getTaskInfoFromTask(task);    if (info == null)     continue;    int id=ActivityDelegate.getTabIdFromIntent(info.baseIntent);    if (id != tabId)     continue;    DocumentTabModelSelector.setPrioritizedTabId(id);    if (!moveToFront(task))     continue;    return true;  }  return false;}  }
class C{  public void populateFilterResolvedInfo(DimColumnResolvedFilterInfo visitableObj,FilterResolverMetadata metadata) throws FilterUnsupportedException {  DimColumnFilterInfo resolvedFilterObject=null;  List<String> evaluateResultListFinal;  try {    evaluateResultListFinal=metadata.getExpression().evaluate(null).getListAsString();    if (!metadata.isIncludeFilter() && !evaluateResultListFinal.contains(CarbonCommonConstants.MEMBER_DEFAULT_VAL)) {      evaluateResultListFinal.add(CarbonCommonConstants.MEMBER_DEFAULT_VAL);    }  } catch (  FilterIllegalMemberException e) {    throw new FilterUnsupportedException(e);  }  resolvedFilterObject=FilterUtil.getNoDictionaryValKeyMemberForFilter(metadata.getTableIdentifier(),metadata.getColumnExpression(),evaluateResultListFinal,metadata.isIncludeFilter());  visitableObj.setFilterValues(resolvedFilterObject);}  }
class C{  public static <T extends RealFieldElement<T>>FieldRotation<T> applyInverseTo(final Rotation rOuter,final FieldRotation<T> rInner){  return new FieldRotation<T>(rInner.q0.multiply(rOuter.getQ0()).add(rInner.q1.multiply(rOuter.getQ1()).add(rInner.q2.multiply(rOuter.getQ2())).add(rInner.q3.multiply(rOuter.getQ3()))).negate(),rInner.q0.multiply(rOuter.getQ1()).add(rInner.q2.multiply(rOuter.getQ3()).subtract(rInner.q3.multiply(rOuter.getQ2()))).subtract(rInner.q1.multiply(rOuter.getQ0())),rInner.q0.multiply(rOuter.getQ2()).add(rInner.q3.multiply(rOuter.getQ1()).subtract(rInner.q1.multiply(rOuter.getQ3()))).subtract(rInner.q2.multiply(rOuter.getQ0())),rInner.q0.multiply(rOuter.getQ3()).add(rInner.q1.multiply(rOuter.getQ2()).subtract(rInner.q2.multiply(rOuter.getQ1()))).subtract(rInner.q3.multiply(rOuter.getQ0())),false);}  }
class C{  private Bitmap compress(String imagePath,int width,int height){  BitmapFactory.Options options=new BitmapFactory.Options();  options.inJustDecodeBounds=true;  BitmapFactory.decodeFile(imagePath,options);  int outH=options.outHeight;  int outW=options.outWidth;  int inSampleSize=1;  if (outH > height || outW > width) {    int halfH=outH / 2;    int halfW=outW / 2;    while ((halfH / inSampleSize) > height && (halfW / inSampleSize) > width) {      inSampleSize*=2;    }  }  options.inSampleSize=inSampleSize;  options.inJustDecodeBounds=false;  int heightRatio=(int)Math.ceil(options.outHeight / (float)height);  int widthRatio=(int)Math.ceil(options.outWidth / (float)width);  if (heightRatio > 1 || widthRatio > 1) {    if (heightRatio > widthRatio) {      options.inSampleSize=heightRatio;    } else {      options.inSampleSize=widthRatio;    }  }  options.inJustDecodeBounds=false;  return BitmapFactory.decodeFile(imagePath,options);}  }
class C{  public static void writeLayout(String folder){  if (selectedLayout != null) {    selectedLayout.writeLayout(folder);  }}  }
class C{  static VersionNumber identifyIOSVersion(final String userAgent){  VersionNumber version=VersionNumber.UNKNOWN;  final List<Pattern> patterns=new ArrayList<Pattern>();  patterns.add(Pattern.compile("iPhone OS\\s?((\\d+)((\\_\\d+)+)?) like Mac OS X"));  patterns.add(Pattern.compile("CPU OS\\s?((\\d+)((\\_\\d+)+)?) like Mac OS X"));  patterns.add(Pattern.compile("iPhone OS\\s?((\\d+)((\\.\\d+)+)?);"));  for (  final Pattern pattern : patterns) {    final Matcher m=pattern.matcher(userAgent);    if (m.find()) {      version=parseFirstVersionNumber(m.group(MAJOR_INDEX).replaceAll("_","."));      break;    }  }  return version;}  }
class C{  private ColorsUtil(){  throw new Error("Do not need instantiate!");}  }
class C{  public static void clickButtonRewiConnect(){  RewiMod.getInstance().connectToServer("Rewinside.TV","mc.rewinside.tv",25565,false);}  }
class C{  public static void initCatalogMgr(boolean isNew,Transaction tx){  catalogMgr=new CatalogMgr(isNew,tx);}  }
class C{  public Element generateSimpleElement(final Document document,final Object pojo,final String... attributes) throws ParserConfigurationException, IllegalAccessException, InstantiationException {  return generateSimpleElement(document,pojo,Arrays.asList(attributes));}  }
class C{  public Mushroom(Material shroom,BlockFace capFace){  this(shroom,MushroomBlockTexture.getCapByFace(capFace));}  }
class C{  public JSONArray names(){  JSONArray ja=new JSONArray();  Iterator keys=keys();  while (keys.hasNext()) {    ja.put(keys.next());  }  return ja.length() == 0 ? null : ja;}  }
class C{  public AemDialog clickTab(final String label){  bobcatWait.withTimeout(Timeouts.BIG).until((ExpectedCondition<Object>)null,5);  return this;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GATHER_START_2_GATHER(String value0){  return new SM_SYSTEM_MESSAGE(1330012,value0);}  }
class C{  public MathRuntimeException(final Throwable rootCause){  super(rootCause);  this.pattern=getMessage();  this.arguments=new Object[0];}  }
class C{  public void testLatestUpdatePersistedToDB(){  DataTagCacheObject floatTag=new DataTagCacheObject();  floatTag.setId(new Long(1000100));  floatTag.setName("Test float tag");  floatTag.setMode(DataTagConstants.MODE_TEST);  floatTag.setDataType("Float");  floatTag.setValue(new Float(10));  floatTag.setCacheTimestamp(new Timestamp(System.currentTimeMillis() - 10));  dataTagMapper.insertDataTag(floatTag);  assertNotNull(dataTagMapper.getItem(floatTag.getId()));  dataTagCache.put(floatTag.getId(),floatTag);  DataTagCacheObject cacheObject=(DataTagCacheObject)dataTagCache.get(floatTag.getId());  cacheObject.setValue(new Float(20));  cacheObject.setCacheTimestamp(new Timestamp(System.currentTimeMillis() - 1));  dataTagCache.notifyListenersOfUpdate(cacheObject);  cacheObject.setValue(new Float(30));  cacheObject.setCacheTimestamp(new Timestamp(System.currentTimeMillis()));  dataTagCache.notifyListenersOfUpdate(cacheObject);  assertEquals(new Float(30),cacheObject.getValue());  try {    Thread.sleep(30000);  } catch (  InterruptedException e) {    e.printStackTrace();  }  DataTag objectInDB=dataTagMapper.getItem(floatTag.getId());  assertNotNull(objectInDB);  assertEquals(new Float(30),objectInDB.getValue());  dataTagCache.remove(floatTag.getId());}  }
class C{  public OversecAsciiArmoredOutputStream(OutputStream out,Hashtable headers){  this(out);  Enumeration e=headers.keys();  while (e.hasMoreElements()) {    Object key=e.nextElement();    this.headers.put(key,headers.get(key));  }}  }
class C{  public static boolean isDocumentActivity(String className){  return TextUtils.equals(className,IncognitoDocumentActivity.class.getName()) || TextUtils.equals(className,DocumentActivity.class.getName()) || TextUtils.equals(className,LEGACY_CLASS_NAME)|| TextUtils.equals(className,LEGACY_INCOGNITO_CLASS_NAME);}  }
class C{  public static void publishAllServices() throws RpcException {  try {    ServicePublisher.publishAllServices();  } catch (  RegistryException e) {    throw new RpcException("error while publishing all services",e);  }}  }
class C{  public BannedIpsExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  public static void logPreferenceChange(boolean enabled){  RecordHistogram.recordEnumeratedHistogram("Search.ContextualSearchPreferenceStateChange",enabled ? PREFERENCE_ENABLED : PREFERENCE_DISABLED,PREFERENCE_HISTOGRAM_BOUNDARY);}  }
class C{  public String showAndGetCommand(){  setVisible(true);  return result;}  }
class C{  public DistributionDocumentEvaluator(Map<Integer,String> mIdxToWord,grammaticalityEstimator geEstimator){  WordMap=mIdxToWord;  Estimator=geEstimator;}  }
class C{  public static final void emoteStopWalking(Npc owner){  owner.unsetState(CreatureState.WALKING);}  }
class C{  private boolean permissionOnInAndroid(String permission,Context context){  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M)   return true;  return PackageManager.PERMISSION_GRANTED == context.getPackageManager().checkPermission(permission,context.getPackageName());}  }
class C{  public void update(double deltaTime){  if (is_Un_Dead) {    Un_Dead_Cult--;    if (Un_Dead_Cult < 0) {      is_Un_Dead=false;    }  }  if (getnDirection() == RIGHT)   velocity.set(8,0); else   if (getnDirection() == LEFT)   velocity.set(-8,0); else   if (getnDirection() == UP)   velocity.set(0,0);  position.add(velocity.x * deltaTime,velocity.y * deltaTime);}  }
class C{  private void initResourcesIfNecessary(){  if (centerDrawable == null) {    centerDrawable=getContext().getResources().getDrawable(wheelForeground);  }  if (topShadow == null) {    topShadow=new GradientDrawable(Orientation.TOP_BOTTOM,SHADOWS_COLORS);  }  if (bottomShadow == null) {    bottomShadow=new GradientDrawable(Orientation.BOTTOM_TOP,SHADOWS_COLORS);  }  setBackgroundResource(wheelBackground);}  }
class C{  public static Map<String,Object> alwaysDeclineProcessor(DispatchContext dctx,Map<String,? extends Object> context){  Locale locale=(Locale)context.get("locale");  Map<String,Object> result=ServiceUtil.returnSuccess();  BigDecimal processAmount=(BigDecimal)context.get("processAmount");  Debug.logInfo("Test Processor Declining Credit Card",module);  String refNum=UtilDateTime.nowAsString();  result.put("authResult",Boolean.FALSE);  result.put("processAmount",processAmount);  result.put("authRefNum",refNum);  result.put("authAltRefNum",refNum);  result.put("authFlag","D");  result.put("authMessage",UtilProperties.getMessage(resource,"AccountingPaymentTestProcessorDeclined",locale));  return result;}  }
class C{  public IJSpace createSpace(String spaceName,final JSpaceAttributes spaceAttr) throws CreateException, RemoteException {  if (spaceName == null)   throw new IllegalArgumentException("The spaceName parameter can not be null.");  spaceName=spaceName.trim();  try {    ValidationUtils.checkServiceNameForValidation(spaceName,"Space name");  } catch (  InvalidServiceNameException exc) {    throw new CreateException("Invalid space name.",new InvalidServiceNameException(exc.getMessage()));  }  final String fullSpaceName=JSpaceUtilities.createFullSpaceName(_containerName,spaceName);  System.setProperty(SystemProperties.DB_CONTAINER_NAME,_containerName);  System.setProperty(SystemProperties.DB_SPACE_NAME,spaceName);  SpaceImpl spaceImpl;synchronized (_lock) {    if (!spaceName.equalsIgnoreCase(_containerName) && _containerEntry == null && _spaceName.equals(spaceName)) {      boolean isSpaceFileAreadyWasExists=new File(m_configDirectory + File.separator + spaceName+ ".xml").exists();      try {        String schemaName=spaceAttr.getSchemaName();        if (schemaName != null) {          String schemaFilePath=Constants.Container.CONTAINER_CONFIG_DIRECTORY + "/" + Constants.Schemas.SCHEMAS_FOLDER+ "/"+ schemaName+ Constants.Schemas.SPACE_SCHEMA_FILE_SUFFIX;          InputStream schemaInputStream=ResourceLoader.getResourceStream(schemaFilePath);          if (schemaInputStream == null) {            String schemasFolderPath=Environment.createSchemasFolderIfNotExists();            String schemaFileFullPath=schemasFolderPath + File.separator + schemaName+ Constants.Schemas.SPACE_SCHEMA_FILE_SUFFIX;            spaceAttr.setProperty(Constants.SPACE_CONFIG_PREFIX + SCHEMA_ELEMENT,schemaName);            File schemaFile=new File(schemaFileFullPath);            SpaceConfigFactory.performSaveAs(schemaFile,spaceName,_containerName,spaceAttr);          }        }        createSpaceXML(spaceName,spaceAttr);        Properties spaceProperties=JProperties.getSpaceProperties(fullSpaceName);        if (spaceAttr.getClusterConfigURL() != null && !spaceAttr.getClusterConfigURL().equals(CLUSTER_CONFIG_URL_DEFAULT)) {          ClusterPolicy clusterPolicy=createClusterPolicy(spaceName,spaceAttr.getClusterConfigURL());          spaceAttr.setClustered(true);          spaceAttr.setClusterPolicy(clusterPolicy);          spaceProperties.put(fullSpaceName + "." + Constants.SPACE_CONFIG_PREFIX+ IS_CLUSTER_SPACE_PROP,String.valueOf(spaceAttr.isClustered()));          spaceProperties.put(fullSpaceName + "." + Constants.SPACE_CONFIG_PREFIX+ CLUSTER_CONFIG_URL_PROP,spaceAttr.getClusterConfigURL());          JProperties.setSpaceProperties(fullSpaceName,spaceProperties);        }        JSpaceAttributes attr=(JSpaceAttributes)spaceAttr.clone();        spaceImpl=createSpaceImpl(spaceName,attr);        _containerEntry=new ContainerEntry(spaceImpl,spaceAttr);        if (!Boolean.valueOf(spaceAttr.isPrivate()).booleanValue())         m_LookupMng.register(_containerEntry.getClusteredSpaceProxy(),_containerName);        try {          updateContainerXML();        } catch (        Exception ex) {          if (_logger.isLoggable(Level.WARNING))           _logger.log(Level.WARNING,"Fail to update " + _containerName + " container XML",ex);        }        if (isJMXEnabled())         com.j_spaces.jmx.JMXProvider.registerSpaceMBean(spaceName,spaceImpl);        if (spaceImpl.getClusterPolicy() != null)         return this.getClusteredSpace(spaceName);        return this.getSpace(spaceName);      } catch (      Exception ex) {        JProperties.removeSpaceProperties(fullSpaceName);        if (!isSpaceFileAreadyWasExists) {          File sf=new File(m_configDirectory + File.separator + spaceName+ ".xml");          sf.delete();        }        if (_logger.isLoggable(Level.SEVERE))         _logger.log(Level.SEVERE,"Failed to create <" + spaceName + "> space",ex);        throw new CreateException("Failed to create <" + spaceName + "> space",ex);      }    } else {      if (spaceName.equalsIgnoreCase(_containerName))       throw new CreateException("Could not create space <" + spaceName + "> since its name is the same name as container.");      throw new CreateException("Space <" + spaceName + "> already exists in <"+ _containerName+ "> container.");    }  }}  }
class C{  public void write(short[] data){  for (  short unit : data) {    write(unit);  }}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public ParMethodDecl fullCopy(){  ParMethodDecl tree=(ParMethodDecl)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public Response<?> response(){  return response;}  }
class C{  public ACQUAINT2DocumentSet(String sTACXMLFile){  DocumentBuilderFactory docBuilderFactory=DocumentBuilderFactory.newInstance();  XMLDoc=null;  Categories=null;  hsDocs=null;  hmDocsToCategories=null;  try {    DocumentBuilder docBuilder=docBuilderFactory.newDocumentBuilder();    XMLDoc=docBuilder.parse(new File(sTACXMLFile));  } catch (  ParserConfigurationException ex) {    System.err.println("Invalid XML file. Details:");    ex.printStackTrace(System.err);  }catch (  SAXException ex) {    System.err.println("Invalid XML file. Details:");    ex.printStackTrace(System.err);  }catch (  IOException ex) {    System.err.println("Could not read XML file. Cause:");    ex.printStackTrace(System.err);  }  if (XMLDoc == null)   return;  hmDocsToCategories=new HashMap<String,String>();  XMLDoc.getDocumentElement().normalize();}  }
class C{  final int measureHeightOfChildren(int widthMeasureSpec,int startPosition,int endPosition,final int maxHeight,int disallowPartialChildPosition){  final ListAdapter adapter=mAdapter;  if (adapter == null) {    return mListPadding.top + mListPadding.bottom;  }  int returnedHeight=mListPadding.top + mListPadding.bottom;  final int dividerHeight=((mDividerHeight > 0) && mDivider != null) ? mDividerHeight : 0;  int prevHeightWithoutPartialChild=0;  int i;  View child;  endPosition=(endPosition == NO_POSITION) ? adapter.getCount() - 1 : endPosition;  final PLA_AbsListView.RecycleBin recycleBin=mRecycler;  final boolean recyle=recycleOnMeasure();  final boolean[] isScrap=mIsScrap;  for (i=startPosition; i <= endPosition; ++i) {    child=obtainView(i,isScrap);    measureScrapChild(child,i,widthMeasureSpec);    if (i > 0) {      returnedHeight+=dividerHeight;    }    if (recyle && recycleBin.shouldRecycleViewType(((LayoutParams)child.getLayoutParams()).viewType)) {      recycleBin.addScrapView(child);    }    returnedHeight+=child.getMeasuredHeight();    if (returnedHeight >= maxHeight) {      return (disallowPartialChildPosition >= 0) && (i > disallowPartialChildPosition) && (prevHeightWithoutPartialChild > 0)&& (returnedHeight != maxHeight) ? prevHeightWithoutPartialChild : maxHeight;    }    if ((disallowPartialChildPosition >= 0) && (i >= disallowPartialChildPosition)) {      prevHeightWithoutPartialChild=returnedHeight;    }  }  return returnedHeight;}  }
class C{  public void addSoundEvent(State event,int resId){  mSoundMap.put(event,resId);}  }
class C{  public boolean hasBuildFile(@NotNull String moduleGradlePath){  Module module=GradleUtil.findModuleByGradlePath(myProject,moduleGradlePath);  if (module == null) {    return false;  }  VirtualFile gradleBuildFile=GradleUtil.getGradleBuildFile(module);  return gradleBuildFile != null && gradleBuildFile.exists();}  }
class C{  public void startScroll(int startX,int startY,int dx,int dy){  startScroll(startX,startY,dx,dy,DEFAULT_DURATION);}  }
class C{  public void addLocations(Collection<PBLocation> locations){  l_locations.addAll(locations);}  }
class C{  public boolean isKnownRepository(String location,boolean requireExactMatch){  Set<String> keys=repositories.keySet();  for (  String checkLocation : keys) {    if (!requireExactMatch && location.indexOf(checkLocation) != -1) {      return true;    }    if (location.equals(checkLocation))     return true;  }  return false;}  }
class C{  @Override public void deleteItem(Long id){  alarmMapper.deleteAlarm(id);}  }
class C{  public static boolean isEqual(Double d1,Double d2){  if (d1 == null || d2 == null) {    return false;  }  return Math.abs(d1 - d2) < TOLERANCE;}  }
class C{  public long timeSinceLast(){  long currentTime=System.currentTimeMillis();  return currentTime - lastMessageTime;}  }
class C{  protected void updateDegrees(int e,int incr){  if (!getEdgeTable().isValidRow(e))   return;  int s=getSourceNode(e);  int t=getTargetNode(e);  if (s < 0 || t < 0)   return;  updateDegrees(e,s,t,incr);  if (incr < 0) {    m_edgeTuples.invalidate(e);  }}  }
class C{  protected AdsGetFloodStatsQuery accountId(int value){  return unsafeParam("account_id",value);}  }
class C{  private void initializeValues(){  IDialogSettings settings=getDialogSettings();  if (settings != null) {    String[] hostNames=settings.getArray(STORE_URL_ID);    if (hostNames != null) {      for (int i=0; i < hostNames.length; i++) {        urlCombo.add(hostNames[i]);      }    }    if (showCredentials) {      String[] userNames=settings.getArray(STORE_USERNAME_ID);      if (userNames != null) {        for (int i=0; i < userNames.length; i++) {          userCombo.add(userNames[i]);        }      }    }  }  if (properties != null) {    if (showCredentials) {      String user=properties.getProperty("user");      if (user != null) {        userCombo.setText(user);      }      String password=properties.getProperty("password");      if (password != null) {        passwordText.setText(password);      }    }    String host=properties.getProperty("url");    if (host != null) {      urlCombo.setText(host);    }  }}  }
class C{  private void generatePatternBitmap(){  if (getBounds().width() <= 0 || getBounds().height() <= 0)   return;  mBitmap=Util.allocateBitmap(getBounds().width(),getBounds().height());  if (mBitmap == null)   return;  Canvas canvas=new Canvas(mBitmap);  Rect r=new Rect();  boolean verticalStartWhite=true;  for (int i=0; i <= numRectanglesVertical; i++) {    boolean isWhite=verticalStartWhite;    for (int j=0; j <= numRectanglesHorizontal; j++) {      r.top=i * mRectangleSize;      r.left=j * mRectangleSize;      r.bottom=r.top + mRectangleSize;      r.right=r.left + mRectangleSize;      canvas.drawRect(r,isWhite ? mPaintWhite : mPaintGray);      isWhite=!isWhite;    }    verticalStartWhite=!verticalStartWhite;  }}  }
class C{  public Pair<String,String> next(){  currentHeaderPosition=nextHeaderPosition;  Pair<String,String> result=new Pair<>(nextHeader,nextSequence);  nextHeader=nextNextHeader;  nextHeaderPosition=nextNextHeaderPosition;  nextSequence=null;  nextNextHeader=null;  if (nextHeader != null) {    String aLine;    try {      while ((aLine=r.readLine()) != null) {        if (aLine.startsWith(">")) {          nextNextHeader=aLine;          nextNextHeaderPosition=position;          position+=aLine.length() + endOfLineBytes;          break;        } else {          position+=aLine.length() + endOfLineBytes;          parts.add(aLine);        }      }      numberOfSequencesRead++;    } catch (    IOException e) {      Basic.caught(e);    }    nextSequence=Basic.concatenateAndRemoveWhiteSpaces(parts);    parts.clear();  } else   try {    close();  } catch (  IOException ex) {    Basic.caught(ex);  }  return result;}  }
class C{  @deprecated public static int compare(CharSequence a,CharSequence b){  int alength=a.length();  int blength=b.length();  int min=alength <= blength ? alength : blength;  for (int i=0; i < min; i++) {    int diff=a.charAt(i) - b.charAt(i);    if (diff != 0) {      return diff;    }  }  return alength - blength;}  }
class C{  public long lowestOnBit(){  return id & -id;}  }
class C{  public static int readLTriad(byte[] bytes){  return (bytes[0] & 0xFF) | ((bytes[1] & 0xFF) << 8) | ((bytes[2] & 0x0F) << 16);}  }
class C{  static String encodeHighLevel(String msg,Compaction compaction,Charset encoding) throws WriterException {  StringBuilder sb=new StringBuilder(msg.length());  if (encoding == null) {    encoding=DEFAULT_ENCODING;  } else   if (!DEFAULT_ENCODING.equals(encoding)) {    CharacterSetECI eci=CharacterSetECI.getCharacterSetECIByName(encoding.name());    if (eci != null) {      encodingECI(eci.getValue(),sb);    }  }  int len=msg.length();  int p=0;  int textSubMode=SUBMODE_ALPHA;  if (compaction == Compaction.TEXT) {    encodeText(msg,p,len,sb,textSubMode);  } else   if (compaction == Compaction.BYTE) {    byte[] bytes=msg.getBytes(encoding);    encodeBinary(bytes,p,bytes.length,BYTE_COMPACTION,sb);  } else   if (compaction == Compaction.NUMERIC) {    sb.append((char)LATCH_TO_NUMERIC);    encodeNumeric(msg,p,len,sb);  } else {    int encodingMode=TEXT_COMPACTION;    while (p < len) {      int n=determineConsecutiveDigitCount(msg,p);      if (n >= 13) {        sb.append((char)LATCH_TO_NUMERIC);        encodingMode=NUMERIC_COMPACTION;        textSubMode=SUBMODE_ALPHA;        encodeNumeric(msg,p,n,sb);        p+=n;      } else {        int t=determineConsecutiveTextCount(msg,p);        if (t >= 5 || n == len) {          if (encodingMode != TEXT_COMPACTION) {            sb.append((char)LATCH_TO_TEXT);            encodingMode=TEXT_COMPACTION;            textSubMode=SUBMODE_ALPHA;          }          textSubMode=encodeText(msg,p,t,sb,textSubMode);          p+=t;        } else {          int b=determineConsecutiveBinaryCount(msg,p,encoding);          if (b == 0) {            b=1;          }          byte[] bytes=msg.substring(p,p + b).getBytes(encoding);          if (bytes.length == 1 && encodingMode == TEXT_COMPACTION) {            encodeBinary(bytes,0,1,TEXT_COMPACTION,sb);          } else {            encodeBinary(bytes,0,bytes.length,encodingMode,sb);            encodingMode=BYTE_COMPACTION;            textSubMode=SUBMODE_ALPHA;          }          p+=b;        }      }    }  }  return sb.toString();}  }
class C{  public Builder name(String name){  this.name=name;  return this;}  }
class C{  public void toString(StringBuffer sb){  sb.append(getID());}  }
class C{  @OPTIONS public Response preflightResponse(){  return Response.ok().build();}  }
class C{  public void testRetrieveVirtualFieldWithoutSort() throws Exception {  deleteAllDocs();  send("addDocument","{fields: {id: 0, boost: 1.0}}");  send("addDocument","{fields: {id: 1, boost: 2.0}}");  send("search","{query: MatchAllDocsQuery, sort: {fields: [{field: id, reverse: true}]}, retrieveFields: [id, logboost]}");  assertEquals(2,getInt("totalHits"));  assertEquals(1,getInt("hits[0].fields.id"));  assertEquals(0,getInt("hits[1].fields.id"));  assertEquals(.6931f,getFloat("hits[0].fields.logboost"),.0001f);  assertEquals(0.0f,getFloat("hits[1].fields.logboost"),.0001f);}  }
class C{  private void finalizeDrawables(Array<DrawableData> backup,Array<FileHandle> filesToProcess){  for (  FileHandle file : filesToProcess) {    DrawableData data=new DrawableData(file);    if (!checkIfNameExists(data.name)) {      AtlasData.getInstance().getDrawables().add(data);    }  }  gatherDrawables();  Main.instance.showDialogLoading(null);}  }
class C{  private boolean mustUpdateCoordinates(){  boolean mustUpdate=(dataMatrix.size() == 0);  if (previousTranspose != isTranspose()) {    mustUpdate=true;  }  if (scalingType != ChartViewer.ScalingType.LINEAR)   return mustUpdate;  if (previousTranspose != isTranspose()) {    previousTranspose=isTranspose();    previousClusterAttributes=false;    previousClusterClasses=false;  }{    final ArrayList<String> currentClasses=new ArrayList<>();    currentClasses.addAll(getChartData().getClassNames());    if (!previousClasses.equals(currentClasses)) {      mustUpdate=true;      previousClasses.clear();      previousClasses.addAll(currentClasses);    }  }{    final ArrayList<String> currentSamples=new ArrayList<>();    currentSamples.addAll(getChartData().getSeriesNames());    if (!previousSamples.equals(currentSamples)) {      mustUpdate=true;      previousSamples.clear();      previousSamples.addAll(currentSamples);    }  }{    final Set<String> currentAttributes=new HashSet<>();    currentAttributes.addAll(getViewer().getAttributesList().getEnabledLabels());    if (!previousAttributes.equals(currentAttributes)) {      mustUpdate=true;      previousAttributes.clear();      previousAttributes.addAll(currentAttributes);    }  }{    if (!previousClusterClasses && viewer.getClassesList().isDoClustering())     mustUpdate=true;  }{    if (!previousClusterAttributes && viewer.getAttributesList().isDoClustering())     mustUpdate=true;  }  if (!mustUpdate) {    final Set<String> currentAttributes=new HashSet<>();    currentAttributes.addAll(getViewer().getAttributesList().getAllLabels());    if (!currentAttributes.equals(viewer.getDir().getDocument().getSampleAttributeTable().getNumericalAttributes())) {      viewer.getAttributesList().sync(viewer.getDir().getDocument().getSampleAttributeTable().getNumericalAttributes(),null,false);      mustUpdate=true;    }  }  return mustUpdate;}  }
class C{  public void moveFile(String file){  File f=new File(this.tempFile);  if (!file.startsWith("/")) {    if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {      file=Environment.getExternalStorageDirectory().getAbsolutePath() + File.separator + file;    } else {      file="/data/data/" + handler.cordova.getActivity().getPackageName() + "/cache/"+ file;    }  }  String logMsg="renaming " + this.tempFile + " to "+ file;  Log.d(LOG_TAG,logMsg);  if (!f.renameTo(new File(file)))   Log.e(LOG_TAG,"FAILED " + logMsg);}  }
class C{  public static char parseNextCharacter(final String source,final ParsePosition pos){  int index=pos.getIndex();  final int n=source.length();  char ret=0;  if (index < n) {    char c;    do {      c=source.charAt(index++);    } while (Character.isWhitespace(c) && index < n);    pos.setIndex(index);    if (index < n) {      ret=c;    }  }  return ret;}  }
class C{  public CounterMovingAverage(){  this(DEFAULT_NUMBER_OFCOUNTERS);}  }
class C{  public boolean removeHouseFromAuction(House house,boolean noSale){  if (house.getStatus() != HouseStatus.SELL_WAIT) {    return false;  }  HouseBidEntry bidEntry=null;  HouseBidEntry playerBid=null;  Integer lastPlayer=null;synchronized (houseBids) {    bidEntry=houseBids.remove(house.getObjectId());    if (bidEntry == null) {      return false;    }    lastPlayer=bidEntry.getLastBiddingPlayer();    playerBid=playerBids.remove(lastPlayer);  }synchronized (bidsByIndex) {    bidsByIndex.remove(bidEntry.getEntryIndex());  }  PlayerCommonData pcd=null;  if (house.getOwnerId() != 0) {    if (house.isInGracePeriod()) {      house.setSellStarted(null);    }    pcd=getPlayerData(house.getOwnerId());    MailFormatter.sendHouseAuctionMail(house,pcd,AuctionResult.CANCELED_BID,System.currentTimeMillis(),bidEntry.getBidPrice() + bidEntry.getRefundKinah());    house.setStatus(HouseStatus.ACTIVE);  } else {    house.setStatus(noSale ? HouseStatus.NOSALE : HouseStatus.ACTIVE);  }  if (lastPlayer != null) {    pcd=getPlayerData(lastPlayer);    MailFormatter.sendHouseAuctionMail(house,pcd,AuctionResult.CANCELED_BID,System.currentTimeMillis(),playerBid.getBidPrice());  }  DAOManager.getDAO(HouseBidsDAO.class).deleteHouseBids(house.getObjectId());  house.save();  return true;}  }
class C{  public static S2Cap empty(){  return new S2Cap(new S2Point(1,0,0),-1);}  }
class C{  private void checkTreeMLSchema(Schema s) throws DataIOException {  for (int i=0; i < s.getColumnCount(); ++i) {    Class type=s.getColumnType(i);    if (TYPES.get(type) == null) {      throw new DataIOException("Data type unsupported by the " + "TreeML format: " + type.getName());    }  }}  }
class C{  public void run(){  double MQE=0.99d * Double.MAX_VALUE;  double oldMQE=Double.MAX_VALUE;  double minDistance;  int clusterIndex=0;  Matrix curPoint;  int i=0;  while (MQE < oldMQE && i < maxIterations) {    oldMQE=MQE;    MQE=0;    if (i != 0) {      for (int n=0; n < numberClusters; n++)       clusters[n].reset(clusters[n].getMeanOfElements());    }    for (int k=0; k < data.size(); k++) {      curPoint=data.get(k);      minDistance=Double.MAX_VALUE;      for (int j=0; j < numberClusters; j++) {        double d=clusters[j].getDistanceFromCenter(curPoint);        if (d < minDistance) {          minDistance=d;          clusterIndex=j;        }      }      MQE+=minDistance;      clusters[clusterIndex].add(curPoint);    }    i++;  }  createFullCovarianceMatrices();  existsClustering=true;}  }
class C{  public static Map<String,Object> addRoleType(DispatchContext ctx,Map<String,? extends Object> context){  Map<String,Object> result=new HashMap<String,Object>();  Delegator delegator=ctx.getDelegator();  String orderId=(String)context.get("orderId");  String partyId=(String)context.get("partyId");  String roleTypeId=(String)context.get("roleTypeId");  Boolean removeOld=(Boolean)context.get("removeOld");  if (removeOld != null && removeOld.booleanValue()) {    try {      delegator.removeByAnd("OrderRole",UtilMisc.toMap("orderId",orderId,"roleTypeId",roleTypeId));    } catch (    GenericEntityException e) {      result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);      result.put(ModelService.ERROR_MESSAGE,"ERROR: Could not remove old roles (" + e.getMessage() + ").");      return result;    }  }  Map<String,String> fields=UtilMisc.<String,String>toMap("orderId",orderId,"partyId",partyId,"roleTypeId",roleTypeId);  try {    GenericValue testValue=EntityQuery.use(delegator).from("OrderRole").where(fields).queryOne();    if (testValue != null) {      ServiceUtil.returnSuccess();    } else {      GenericValue value=delegator.makeValue("OrderRole",fields);      delegator.create(value);    }  } catch (  GenericEntityException e) {    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);    result.put(ModelService.ERROR_MESSAGE,"ERROR: Could not add role to order (" + e.getMessage() + ").");    return result;  }  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);  return result;}  }
class C{  private String makeOTP(){  StringBuilder stringBuilder=new StringBuilder();  stringBuilder.append(mOtpOneField.getText().toString());  stringBuilder.append(mOtpTwoField.getText().toString());  stringBuilder.append(mOtpThreeField.getText().toString());  stringBuilder.append(mOtpFourField.getText().toString());  return stringBuilder.toString();}  }
class C{  public void toggle(){  toggle(false,null,null);}  }
class C{  public String toString(){  StringBuilder strBuf=new StringBuilder();  Iterator<E> it=iterator();  boolean b=false;  strBuf.append("[");  while (it.hasNext()) {    if (!b)     b=true; else     strBuf.append(", ");    strBuf.append(it.next().toString());  }  strBuf.append("]");  return strBuf.toString();}  }
class C{  private void bookmark(){  Bookmarks.init(context);  if (Bookmarks.bookmark(item.getId())) {    Utils.showSnackBar(context,Utils.colorVariant(color,1.07f),R.id.coordinatorLayout,R.string.bookmarkedPlace,Snackbar.LENGTH_LONG);    menuToolbar.findItem(R.id.bookmark).setIcon(new IconicsDrawable(this,GoogleMaterial.Icon.gmd_bookmark).paddingDp(1).color(Color.WHITE).sizeDp(24));  } else {    Utils.showSnackBar(context,Utils.colorVariant(color,1.07f),R.id.coordinatorLayout,R.string.removedPlace,Snackbar.LENGTH_LONG);    menuToolbar.findItem(R.id.bookmark).setIcon(new IconicsDrawable(this,GoogleMaterial.Icon.gmd_bookmark_border).paddingDp(1).color(Color.WHITE).sizeDp(24));  }  FragmentBookmarks.loadBookmarks(context);  Inquiry.deinit();}  }
class C{  public Record deleteRecord(RecordID rid) throws DatabaseException {  return null;}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public ParExpr fullCopy(){  ParExpr tree=(ParExpr)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  void findSubmodules(Console console) throws RepoException {  addBackSubmodules=new ArrayList<>();  String submoduleStatus=repo.simpleCommand("submodule","status").getStdout();  for (  String line : Splitter.on('\n').omitEmptyStrings().split(submoduleStatus)) {    String submoduleName=line.replaceFirst("^-[0-9a-f]{40} ","");    if (submoduleName.equals(line)) {      console.warn("Cannot parse line from 'git submodule status': " + line);      continue;    }    if (!destinationFiles.matches(repo.getWorkTree().resolve(submoduleName))) {      addBackSubmodules.add(submoduleName);    }  }}  }
class C{  private String printGFormat(double x){  String sx, sy, sz, ret;  int savePrecision=precision;  int i;  char[] ca4, ca5;  boolean noDigits=false;  if (Double.isInfinite(x)) {    if (x == Double.POSITIVE_INFINITY) {      if (leadingSign)       ca4="+Inf".toCharArray(); else       if (leadingSpace)       ca4=" Inf".toCharArray(); else       ca4="Inf".toCharArray();    } else     ca4="-Inf".toCharArray();    noDigits=true;  } else   if (Double.isNaN(x)) {    if (leadingSign)     ca4="+NaN".toCharArray(); else     if (leadingSpace)     ca4=" NaN".toCharArray(); else     ca4="NaN".toCharArray();    noDigits=true;  } else {    if (!precisionSet)     precision=defaultDigits;    if (precision == 0)     precision=1;    int ePos=-1;    if (conversionCharacter == 'g') {      sx=eFormatString(x,'e').trim();      ePos=sx.indexOf('e');    } else {      sx=eFormatString(x,'E').trim();      ePos=sx.indexOf('E');    }    i=ePos + 1;    int expon=0;    if (sx.charAt(i) == '-') {      for (++i; i < sx.length(); i++)       if (sx.charAt(i) != '0')       break;      if (i < sx.length())       expon=-Integer.parseInt(sx.substring(i));    } else {      if (sx.charAt(i) == '+')       ++i;      for (; i < sx.length(); i++)       if (sx.charAt(i) != '0')       break;      if (i < sx.length())       expon=Integer.parseInt(sx.substring(i));    }    if (!alternateForm) {      if (expon >= -4 && expon < precision)       sy=fFormatString(x).trim(); else       sy=sx.substring(0,ePos);      i=sy.length() - 1;      for (; i >= 0; i--)       if (sy.charAt(i) != '0')       break;      if (i >= 0 && sy.charAt(i) == '.')       i--;      if (i == -1)       sz="0"; else       if (!Character.isDigit(sy.charAt(i)))       sz=sy.substring(0,i + 1) + "0"; else       sz=sy.substring(0,i + 1);      if (expon >= -4 && expon < precision)       ret=sz; else       ret=sz + sx.substring(ePos);    } else {      if (expon >= -4 && expon < precision)       ret=fFormatString(x).trim(); else       ret=sx;    }    if (leadingSpace)     if (x >= 0)     ret=" " + ret;    ca4=ret.toCharArray();  }  ca5=applyFloatPadding(ca4,false);  precision=savePrecision;  return new String(ca5);}  }
class C{  public DocsSaveQuery title(String value){  return unsafeParam("title",value);}  }
class C{  public void initialize(MediaRouteController controller){  setRouteSelector(controller.buildMediaRouteSelector());  setDialogFactory(new ChromeMediaRouteDialogFactory());}  }
class C{  public AppsGetFriendsListQuery fields(EnumParam... value){  return unsafeParam("fields",value);}  }
class C{  public static void printUsage(){  System.out.println("Usage: " + grammarAndContentAnalysis.class.getName() + "[-corpusDir=dir"+ System.getProperty("file.separator")+ "] The base directory"+ " of the corpus including the directory separator character.\n"+ "[-categoriesForGrammar=#] \t The number of categories to use for grammar extraction. Default is 2.\n"+ " -trainPercent=#.## \t The training percent to use for the grammar. Default is 0.66.\n"+ " -minNGram=# \t The min n-gram rank. Default is 3.\n"+ " -maxNGram=# \t The max n-gram rank. Default is 8.\n"+ " -partOfCorpus=#.## \t The percent of corpus to use for all "+ " experiments.\n"+ " -windowSize=# \t The neighbourhood window. Default is max(2*minNGram, maxNGram+1).\n"+ " -cache \t If selected will cache category graphs in memory. NOTE: Very memory consuming.");}  }
class C{  public void remove(String key){  preferences.edit().remove(key).apply();}  }
class C{  static Object newInstance(String className,ClassLoader cl,boolean doFallback) throws ConfigurationError {  try {    Class providerClass=findProviderClass(className,cl,doFallback);    Object instance=providerClass.newInstance();    if (DEBUG)     debugPrintln("created new instance of " + providerClass + " using ClassLoader: "+ cl);    return instance;  } catch (  ClassNotFoundException x) {    throw new ConfigurationError("Provider " + className + " not found",x);  }catch (  Exception x) {    throw new ConfigurationError("Provider " + className + " could not be instantiated: "+ x,x);  }}  }
class C{  @Override public double nextDouble(){  return randomGenerator.nextDouble();}  }
class C{  public boolean matchStringConstant(){  return '\'' == (char)tok.ttype;}  }
class C{  public AdsUpdateAdsQuery(VkApiClient client,UserActor actor,int accountId,String data){  super(client,"ads.updateAds",Utils.buildParametrizedType(List.class,Integer.class));  accessToken(actor.getAccessToken());  accountId(accountId);  data(data);}  }
class C{  public BoardGetCommentsQueryWithExtended offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  @Override public void onRequestSingleCollectionSuccess(Call<Collection> call,Response<Collection> response){  if (response.isSuccessful() && response.body() != null) {    Mysplash.getInstance().setCollection(response.body());    view.dismissRequestDialog();    view.drawBrowsableView();  } else {    requestCollection();  }}  }
class C{  Collection<? extends ClientRequestResult> handleExecuteCommandRequest(final ClientRequest executeCommandRequest){  final Collection<CommandReport> commandReports=new ArrayList<CommandReport>(1);  commandReports.add(commandExecutionManager.execute((CommandExecuteRequest<?>)executeCommandRequest.getObjectParameter()));  if (LOG.isDebugEnabled()) {    LOG.debug("Finished executing command - returning report.");  }  return commandReports;}  }
class C{  public UnknownTransactionException(){  super();}  }
class C{  public BoundingVolume merge(BoundingVolume volume){  if (volume == null) {    return this;  }switch (volume.getType()) {case AABB:{      BoundingBox vBox=(BoundingBox)volume;      return merge(vBox.center,vBox.xExtent,vBox.yExtent,vBox.zExtent,new BoundingBox(new Vector3f(0,0,0),0,0,0));    }default :  return null;}}  }
class C{  public boolean contains(Object o){  if (o == null)   return false;  return map.containsKey(o);}  }
class C{  public static FilteredDataTagValueUpdate fromXML(final Element domElement){  FilteredDataTagValueUpdate result=new FilteredDataTagValueUpdate();  if (domElement.getNodeName().equals(XML_ROOT_ELEMENT)) {    try {      result.processId=Long.valueOf(domElement.getAttribute(XML_ATTRIBUTE_PROCESS_ID));      if (result.processId != null) {        Node fieldNode=null;        NodeList fields=domElement.getChildNodes();        int fieldsCount=fields.getLength();        result.values=new ArrayList<>(fieldsCount);        for (int i=0; i < fieldsCount; i++) {          fieldNode=fields.item(i);          if (fieldNode.getNodeType() == Node.ELEMENT_NODE && fieldNode.getNodeName().equals(FilteredDataTagValue.XML_ROOT_ELEMENT)) {            result.values.add(FilteredDataTagValue.fromXML((Element)fieldNode));          }        }      }    } catch (    NumberFormatException nfe) {      result=null;      log.error("Cannot extract valid process-id from FilteredDataTagValueUpdate message. Returning null.");    }  } else {    result=null;    log.error("Cannot decode FilteredDataTagValueUpdate message. Root element is not <FilteredDataTagValueUpdate>");  }  return result;}  }
class C{  public WriteModifiers(WriteModifiers modifiers1,WriteModifiers modifiers2,WriteModifiers modifiers3){  super(modifiers1,modifiers2,modifiers3);}  }
class C{  public static int floorDiv(final int a,final int b) throws MathRuntimeException {  if (b == 0) {    throw new MathRuntimeException(LocalizedCoreFormats.ZERO_DENOMINATOR);  }  final int m=a % b;  if ((a ^ b) >= 0 || m == 0) {    return a / b;  } else {    return (a / b) - 1;  }}  }
class C{  private Object readResolve(){  wakeUpQueue=new ArrayBlockingQueue<SerialMessage>(MAX_BUFFFER_SIZE,true);  timer=new Timer();  return this;}  }
class C{  public static void writeLines(File file,String encoding,Collection<?> lines,String lineEnding,boolean append) throws IOException {  FileOutputStream out=null;  try {    out=openOutputStream(file,append);    final BufferedOutputStream buffer=new BufferedOutputStream(out);    IOUtils.writeLines(lines,lineEnding,buffer,encoding);    buffer.flush();    out.close();  }  finally {    IOUtils.closeQuietly(out);  }}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();  if (subSignature.equals("java.lang.Object invoke(java.lang.Object,java.lang.Object[])")) {    java_lang_reflect_Method_invoke(method,thisVar,returnVar,params);    return;  } else {    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  public void info(String message){  addLogEntry(new InfoEntry(message));}  }
class C{  public SemiVariance withBiasCorrected(boolean isBiasCorrected){  return new SemiVariance(isBiasCorrected,this.varianceDirection);}  }
class C{  public XmlMerger(File source,File target,File baseDir){  this.baseDir=baseDir;  this.sourceFile=source;  this.destFile=target;  this.metaDataFile=new File(target.getParent(),target.getName() + ".properties");}  }
class C{  public DelegateFileFilter(FilenameFilter filter){  if (filter == null) {    throw new IllegalArgumentException("The FilenameFilter must not be null");  }  this.filenameFilter=filter;  this.fileFilter=null;}  }
class C{  public RegisterEntriesListenerSpaceOperationRequest(){}  }
class C{  private static ImmutableList<Option<?>> buildFrameworkOptions(){  ImmutableList.Builder<Option<?>> frameworkOptions=new ImmutableList.Builder<Option<?>>();  frameworkOptions.add(ToolOptions.DESCRIPTOR_SET);  frameworkOptions.add(ToolOptions.CONFIG_FILES);  frameworkOptions.add(ConfigGeneratorDriver.BIN_OUT);  frameworkOptions.add(ConfigGeneratorDriver.TXT_OUT);  frameworkOptions.add(ConfigGeneratorDriver.JSON_OUT);  frameworkOptions.add(ConfigGeneratorFromProtoDescriptor.SUPPRESS_WARNINGS);  frameworkOptions.add(SwaggerImportTool.OPEN_API);  frameworkOptions.add(SwaggerImportTool.SERVICE_NAME);  frameworkOptions.add(SwaggerImportTool.METHOD_NAMESPACE);  frameworkOptions.add(SwaggerImportTool.TYPE_NAMESPACE);  return frameworkOptions.build();}  }
class C{  private void read(InputStream in) throws IOException {  BufferedReader br=new BufferedReader(new InputStreamReader(in,"UTF8"));  String line=null;  String name=null;  Boolean preference=null;  isEmpty=true;  completeNamePrefs=new HashMap(53);  packagePrefs=new HashMap(23);  namespacePrefs=new HashMap(11);  if ((line=readLineTrimComments(br)) != null) {    if (!line.startsWith(HEADER_TITLE)) {      throw new IOException("unsupported preferred list header: " + line);    } else {      String version=line.substring(HEADER_TITLE.length(),line.length()).trim();      if (!version.startsWith("1.")) {        throw new IOException("preferred list major version " + "not supported");      }    }    for (line=readLineTrimComments(br); line != null; line=readLineTrimComments(br)) {      if (line.length() == 0) {        continue;      } else       if (line.startsWith(NAME_PREFIX)) {        if (name != null) {          throw new IOException("Preferred name without " + "preference value");        }        name=line.substring(NAME_PREFIX.length()).trim();        continue;      } else       if (line.startsWith(PREF_PREFIX)) {        String value=line.substring(PREF_PREFIX.length()).trim();        if (value.equals("")) {          throw new IOException("Empty preference value not " + "permitted");        }        preference=Boolean.valueOf(value);      } else {        throw new IOException("unrecognized preference entry: " + line);      }      if (name == null) {        if (preference != null) {          if (!isEmpty) {            throw new IOException("default preference must " + "be the first expression and can not " + "be redefined");          }          defaultPreference=preference;          preference=null;          isEmpty=false;        }      } else       if (preference != null) {        if (name.startsWith("/") || name.startsWith("*") || name.startsWith("-")|| name.startsWith(".")) {          throw new IOException("Invalid character " + "at name beginning: " + name);        } else         if (name.endsWith("/*")) {          mapPut(packagePrefs,name.substring(0,name.length() - 2),preference);        } else         if (name.endsWith("/-")) {          mapPut(namespacePrefs,name.substring(0,name.length() - 2),preference);        } else         if (name.endsWith("/")) {          mapPut(packagePrefs,name.substring(0,name.length() - 1),preference);        } else {          int state=(preference.booleanValue() ? NAME_PREFERRED : NAME_NOT_PREFERRED);          mapPut(completeNamePrefs,name,new Integer(state));        }        preference=null;        name=null;      }    }    if (name != null) {      throw new IOException("Preferred name without " + "preference value");    }  }  if (isEmpty) {    throw new IOException("Empty preferences list is invalid");  }}  }
class C{  private static boolean isInCenterTargetZone(float x,float y,float left,float top,float right,float bottom){  if (x > left && x < right && y > top && y < bottom) {    return true;  }  return false;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DeboostHealAmount_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200347,skillname);}  }
class C{  @Override public boolean equals(Object that){  if (this == that) {    return true;  }  if (that == null) {    return false;  }  if (getClass() != that.getClass()) {    return false;  }  SysRoleMenu other=(SysRoleMenu)that;  return (this.getRoleId() == null ? other.getRoleId() == null : this.getRoleId().equals(other.getRoleId())) && (this.getMenuId() == null ? other.getMenuId() == null : this.getMenuId().equals(other.getMenuId())) && (this.getPermission() == null ? other.getPermission() == null : this.getPermission().equals(other.getPermission()))&& (this.getEnable() == null ? other.getEnable() == null : this.getEnable().equals(other.getEnable()))&& (this.getRemark() == null ? other.getRemark() == null : this.getRemark().equals(other.getRemark()))&& (this.getCreateBy() == null ? other.getCreateBy() == null : this.getCreateBy().equals(other.getCreateBy()))&& (this.getCreateTime() == null ? other.getCreateTime() == null : this.getCreateTime().equals(other.getCreateTime()))&& (this.getUpdateBy() == null ? other.getUpdateBy() == null : this.getUpdateBy().equals(other.getUpdateBy()))&& (this.getUpdateTime() == null ? other.getUpdateTime() == null : this.getUpdateTime().equals(other.getUpdateTime()));}  }
class C{  XSParticleDecl traverseLocal(Element elmDecl,XSDocumentInfo schemaDoc,SchemaGrammar grammar,int allContextFlags,XSObject parent){  XSParticleDecl particle=null;  if (fSchemaHandler.fDeclPool != null) {    particle=fSchemaHandler.fDeclPool.getParticleDecl();  } else {    particle=new XSParticleDecl();  }  if (fDeferTraversingLocalElements) {    particle.fType=XSParticleDecl.PARTICLE_ELEMENT;    Attr attr=elmDecl.getAttributeNode(SchemaSymbols.ATT_MINOCCURS);    if (attr != null) {      String min=attr.getValue();      try {        int m=Integer.parseInt(XMLChar.trim(min));        if (m >= 0)         particle.fMinOccurs=m;      } catch (      NumberFormatException ex) {      }    }    fSchemaHandler.fillInLocalElemInfo(elmDecl,schemaDoc,allContextFlags,parent,particle);  } else {    traverseLocal(particle,elmDecl,schemaDoc,grammar,allContextFlags,parent,null);    if (particle.fType == XSParticleDecl.PARTICLE_EMPTY)     particle=null;  }  return particle;}  }
class C{  @Override public void endNormalization(Service.Builder builder){}  }
class C{  public PrefixFileFilter(List<String> prefixes){  this(prefixes,IOCase.SENSITIVE);}  }
class C{  public void removeScrollingListener(OnWheelScrollListener listener){  scrollingListeners.remove(listener);}  }
class C{  public static long copyLarge(Reader input,Writer output,final long inputOffset,final long length,char[] buffer) throws IOException {  if (inputOffset > 0) {    skipFully(input,inputOffset);  }  if (length == 0) {    return 0;  }  int bytesToRead=buffer.length;  if (length > 0 && length < buffer.length) {    bytesToRead=(int)length;  }  int read;  long totalRead=0;  while (bytesToRead > 0 && EOF != (read=input.read(buffer,0,bytesToRead))) {    output.write(buffer,0,read);    totalRead+=read;    if (length > 0) {      bytesToRead=(int)Math.min(length - totalRead,buffer.length);    }  }  return totalRead;}  }
class C{  public void schedule(String serviceName,Map<String,? extends Object> context,long startTime,int frequency,int interval,int count,long endTime) throws JobManagerException {  schedule(null,serviceName,context,startTime,frequency,interval,count,endTime);}  }
class C{  public boolean isApplicable(){  return getViewer().getTabbedIndex() == ClusterViewer.PCoA_TAB_INDEX && getViewer().getPcoaTab().isIs3dMode();}  }
class C{  @SuppressFBWarnings("NP_NULL_ON_SOME_PATH") private AddEditBookmarkFragment generateBaseFragment(){  if (getIntent() == null) {    throw new IllegalArgumentException("intent can not be null");  }  Intent intent=getIntent();  Uri intentUri=intent.getData();  Long bookmarkId=null;  boolean isFolder=false;  AddEditBookmarkFragment addEditFragment;  if (intentUri != null && intentUri.getHost().equals("editbookmark")) {    isFolder=intentUri.getBooleanQueryParameter(BOOKMARK_IS_FOLDER_URI_PARAM,false);    String bookmarkIdParam=intentUri.getQueryParameter(BOOKMARK_ID_URI_PARAM);    if (bookmarkIdParam != null)     bookmarkId=Long.parseLong(bookmarkIdParam);    addEditFragment=AddEditBookmarkFragment.newEditInstance(isFolder,bookmarkId);  } else {    Bundle extras=intent.getExtras();    String url=null;    String name=null;    if (extras != null) {      isFolder=extras.getBoolean(BOOKMARK_INTENT_IS_FOLDER,false);      if (extras.containsKey(BOOKMARK_INTENT_TITLE)) {        name=extras.getString(BOOKMARK_INTENT_TITLE);      }      if (extras.containsKey(BOOKMARK_INTENT_URL)) {        url=extras.getString(BOOKMARK_INTENT_URL);        url=DomDistillerUrlUtils.getOriginalUrlFromDistillerUrl(url);      }      if (extras.containsKey(BOOKMARK_INTENT_ID)) {        bookmarkId=extras.getLong(BOOKMARK_INTENT_ID);      }    }    addEditFragment=AddEditBookmarkFragment.newInstance(isFolder,bookmarkId,name,url);  }  setActionListenerOnAddEdit(addEditFragment);  return addEditFragment;}  }
class C{  private void initLabels(){  CompareConfiguration cc=getCompareConfiguration();  String resourceName=resource.getName();  setTitle(Policy.bind("SVNCompareRevisionsInput.compareResourceAndVersions",new Object[]{resourceName}));  cc.setLeftEditable(true);  cc.setRightEditable(false);  String leftLabel=Policy.bind("SVNCompareRevisionsInput.workspace",new Object[]{resourceName});  cc.setLeftLabel(leftLabel);  String rightLabel=Policy.bind("SVNCompareRevisionsInput.repository",new Object[]{resourceName});  cc.setRightLabel(rightLabel);}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("set showAxes=");  boolean show=np.getBoolean();  np.matchIgnoreCase(";");  final ClusterViewer viewer=getViewer();  viewer.getPcoaTab().setShowAxes(show);}  }
class C{  protected void checkIdentityMatrix(RealMatrix m){  for (int i=0; i < m.getRowDimension(); i++) {    for (int j=0; j < m.getColumnDimension(); j++) {      if (i == j) {        Assert.assertEquals(m.getEntry(i,j),1d,0);      } else {        Assert.assertEquals(m.getEntry(i,j),0d,0);      }    }  }}  }
class C{  @Px private int calculateIndicatorDotStart(){  final int dotCount=indicatorDots.size();  final float halfDotCount=dotCount / 2f;  final int dotWidth=2 * dotRadius;  final float totalDotWidth=dotWidth * halfDotCount;  final float halfDotPaddingCount=Math.max(halfDotCount - 0.5f,0);  final float totalDotPaddingWidth=dotPadding * halfDotPaddingCount;  int startPosition=getWidth() / 2;  startPosition-=totalDotWidth + totalDotPaddingWidth;  return startPosition;}  }
class C{  public boolean isUnindexSupported(){  return true;}  }
class C{  public static void changeSpeed(EntityLivingBase entity,UUID speedModifierUUID,String name,double modifier){  AttributeModifier speedModifier=(new AttributeModifier(speedModifierUUID,name,modifier - 1,2));  IAttributeInstance iattributeinstance=entity.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED);  if (iattributeinstance.getModifier(speedModifierUUID) != null) {    iattributeinstance.removeModifier(speedModifier);  }  iattributeinstance.applyModifier(speedModifier);}  }
class C{  public synchronized void recover(LogRecovery client) throws LogException {  if (operationsLogger.isLoggable(Level.FINER)) {    operationsLogger.entering(MultiLogManager.class.getName(),"recover",client);  }  if (!valid)   throw new InvalidatedLogException("Cannot recover from " + "invalidated log");  if (client == null)   throw new IllegalArgumentException("Cannot have a <null> " + "client argument.");  ObjectInputStream in=null;  ArrayList recList=new ArrayList();  try {    if (persistenceLogger.isLoggable(Level.FINEST)) {      persistenceLogger.log(Level.FINEST,"Recovering from: {0}",name);    }    in=new HeaderlessObjectInputStream(new BufferedInputStream(new FileInputStream(name)));    this.cookie=in.readLong();    LogRecord rec=null;    boolean done=false;    boolean update=true;    try {      while (!done) {        rec=(LogRecord)in.readObject();        if (rec != null) {          recList.add(rec);        } else {          update=false;          done=true;          if (persistenceLogger.isLoggable(Levels.HANDLED)) {            persistenceLogger.log(Levels.HANDLED,"Log for cookie {0} contained a null " + "record object",new Long(cookie));          }        }      }    } catch (    ClassNotFoundException cnfe) {      update=false;      if (persistenceLogger.isLoggable(Level.WARNING)) {        persistenceLogger.log(Level.WARNING,"Problem recovering log file",cnfe);      }    }catch (    ClassCastException cce) {      update=false;      if (persistenceLogger.isLoggable(Level.WARNING)) {        persistenceLogger.log(Level.WARNING,"Problem recovering log file",cce);      }    }catch (    EOFException eofe) {    }catch (    IOException ioe) {      update=false;      if (persistenceLogger.isLoggable(Level.WARNING)) {        persistenceLogger.log(Level.WARNING,"Problem recovering log file",ioe);      }    }    if (update) {      for (int i=0; i < recList.size(); i++) {        client.recover(cookie,(LogRecord)recList.get(i));      }    } else {      if (persistenceLogger.isLoggable(Level.WARNING)) {        persistenceLogger.log(Level.WARNING,"Skipping log recovery for",name);      }    }  } catch (  IOException ioe) {    if (persistenceLogger.isLoggable(Level.WARNING)) {      persistenceLogger.log(Level.WARNING,"Problem recovering log file",ioe);    }  } finally {    try {      if (in != null)       in.close();    } catch (    IOException ioe) {      if (persistenceLogger.isLoggable(Levels.HANDLED)) {        persistenceLogger.log(Levels.HANDLED,"Problem closing recovered log file",ioe);      }    }    readonly=false;  }  if (operationsLogger.isLoggable(Level.FINER)) {    operationsLogger.exiting(MultiLogManager.class.getName(),"recover");  }}  }
class C{  @Override public void onClick(View v){  if (v.getId() == R.id.ok) {    Log_OC.d(TAG,"Clicked MOVE, start movement");    new MoveFilesTask().execute();  } else   if (v.getId() == R.id.cancel) {    Log_OC.d(TAG,"Clicked CANCEL, bye");    finish();  } else {    Log_OC.e(TAG,"Clicked phantom button, id: " + v.getId());  }}  }
class C{  private static void fatalError(String msg,Throwable e) throws RemoteException {  System.err.println(msg);  if (e != null)   e.printStackTrace(System.err);  throw new RemoteException(msg,e);}  }
class C{  @Override public void onRequestInitiated(int code){  if (code == ConnectAPI.COUPON_CODE) {    progressDialog.setMessage("Loading coupons...");    progressDialog.show();  }}  }
class C{  protected boolean checkTextOfOtherToken(String tag,Element currentRulePart,int position,NodeList tokens){  Element otherToken=null;  if (tag.equals("nextText")) {    if (position < tokens.getLength() - 1) {      otherToken=(Element)tokens.item(position + 1);    }  }  if (nextPlusXTextPattern.matcher(tag).find()) {    String tempString=tag.replaceAll("nextPlus","");    String newString=tempString.replaceAll("Text","");    int num=Integer.parseInt(newString);    if (position < tokens.getLength() - (num + 1))     otherToken=(Element)tokens.item(position + 1 + num);  }  if (tag.equals("previousText")) {    if (position > 0)     otherToken=(Element)tokens.item(position - 1);  }  if (previousMinusXTextPattern.matcher(tag).find()) {    String tempString=tag.replaceAll("previousMinus","");    String newString=tempString.replaceAll("Text","");    int num=Integer.parseInt(newString);    if (position > num)     otherToken=(Element)tokens.item(position - (num + 1));  }  if (otherToken == null)   return false;  String otherTokenText=MaryDomUtils.tokenText(otherToken);  return checkText(currentRulePart,otherTokenText);}  }
class C{  public SM_SKILL_ACTIVATION(int skillId,boolean isActive){  this.skillId=skillId;  this.isActive=isActive;  this.unk=0;}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("zoom what=");  String what=np.getWordMatchesIgnoringCase("fit full selection");  np.matchIgnoreCase(";");  ClusterViewer viewer=getViewer();  if (viewer.getSelectedComponent() instanceof ITab) {    ITab tab=((ITab)viewer.getSelectedComponent());    if (what.equalsIgnoreCase("fit"))     tab.zoomToFit(); else     if (what.equalsIgnoreCase("selection")) {      tab.zoomToSelection();    } else     if (what.equalsIgnoreCase("full")) {      GraphView graphView=viewer.getGraphView();      graphView.fitGraphToWindow();      graphView.trans.setScaleY(1);    }  }}  }
class C{  public Optional<Double> std(){  String dataType=checkSelectedResourceTypesHaveCorrectDataType(statisticsResourceTypes);  if (!selectedTypesHaveInstanceInSubgraph(statisticsResourceTypes,subtypes))   return Optional.empty();  Set<String> allSubtypes=statisticsResourceTypes.stream().map(null).collect(Collectors.toSet());  allSubtypes.addAll(subtypes);  allSubtypes.addAll(statisticsResourceTypes);  MindmapsComputer computer=Mindmaps.factory(Mindmaps.DEFAULT_URI,keySpace).getGraphComputer();  ComputerResult result=computer.compute(new DegreeVertexProgram(allSubtypes),new StdMapReduce(statisticsResourceTypes,dataType));  Map<String,Map<String,Double>> std=result.memory().get(MindmapsMapReduce.MAP_REDUCE_MEMORY_KEY);  Map<String,Double> stdTuple=std.get(StdMapReduce.MEMORY_KEY);  double squareSum=stdTuple.get(StdMapReduce.SQUARE_SUM);  double sum=stdTuple.get(StdMapReduce.SUM);  double count=stdTuple.get(StdMapReduce.COUNT);  return Optional.of(Math.sqrt(squareSum / count - (sum / count) * (sum / count)));}  }
class C{  @Override public boolean write(Node node,LSOutput destination) throws LSException {  if (node == null)   return false;  XMLSerializer ser=null;  String ver=_getXmlVersion(node);  if (ver != null && ver.equals("1.1")) {    if (xml11Serializer == null) {      xml11Serializer=new XML11Serializer();      initSerializer(xml11Serializer);    }    copySettings(serializer,xml11Serializer);    ser=xml11Serializer;  } else {    ser=serializer;  }  String encoding=null;  if ((encoding=destination.getEncoding()) == null) {    encoding=_getInputEncoding(node);    if (encoding == null) {      encoding=_getXmlEncoding(node);      if (encoding == null) {        encoding="UTF-8";      }    }  }  try {    prepareForSerialization(ser,node);    ser._format.setEncoding(encoding);    OutputStream outputStream=destination.getByteStream();    Writer writer=destination.getCharacterStream();    String uri=destination.getSystemId();    if (writer == null) {      if (outputStream == null) {        if (uri == null) {          String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.SERIALIZER_DOMAIN,"no-output-specified",null);          if (ser.fDOMErrorHandler != null) {            DOMErrorImpl error=new DOMErrorImpl();            error.fType="no-output-specified";            error.fMessage=msg;            error.fSeverity=DOMError.SEVERITY_FATAL_ERROR;            ser.fDOMErrorHandler.handleError(error);          }          throw new LSException(LSException.SERIALIZE_ERR,msg);        } else {          ser.setOutputByteStream(XMLEntityManager.createOutputStream(uri));        }      } else {        ser.setOutputByteStream(outputStream);      }    } else {      ser.setOutputCharStream(writer);    }    if (node.getNodeType() == Node.DOCUMENT_NODE)     ser.serialize((Document)node); else     if (node.getNodeType() == Node.DOCUMENT_FRAGMENT_NODE)     ser.serialize((DocumentFragment)node); else     if (node.getNodeType() == Node.ELEMENT_NODE)     ser.serialize((Element)node); else     return false;  } catch (  UnsupportedEncodingException ue) {    if (ser.fDOMErrorHandler != null) {      DOMErrorImpl error=new DOMErrorImpl();      error.fException=ue;      error.fType="unsupported-encoding";      error.fMessage=ue.getMessage();      error.fSeverity=DOMError.SEVERITY_FATAL_ERROR;      ser.fDOMErrorHandler.handleError(error);    }    throw new LSException(LSException.SERIALIZE_ERR,DOMMessageFormatter.formatMessage(DOMMessageFormatter.SERIALIZER_DOMAIN,"unsupported-encoding",null));  }catch (  LSException lse) {    throw lse;  }catch (  RuntimeException e) {    if (e == DOMNormalizer.abort) {      return false;    }    throw (LSException)DOMUtil.createLSException(LSException.SERIALIZE_ERR,e).fillInStackTrace();  }catch (  Exception e) {    if (ser.fDOMErrorHandler != null) {      DOMErrorImpl error=new DOMErrorImpl();      error.fException=e;      error.fMessage=e.getMessage();      error.fSeverity=DOMError.SEVERITY_ERROR;      ser.fDOMErrorHandler.handleError(error);    }    throw (LSException)DOMUtil.createLSException(LSException.SERIALIZE_ERR,e).fillInStackTrace();  } finally {    ser.clearDocumentState();  }  return true;}  }
class C{  public static List<Double> mergeCoords(List<Double> x,List<Double> y){  if (x.size() != y.size())   throw new IllegalArgumentException("Sample sizes must be the same for each data applyTransformToDestination.");  List<Double> ret=new ArrayList<>();  for (int i=0; i < x.size(); i++) {    ret.add(x.get(i));    ret.add(y.get(i));  }  return ret;}  }
class C{  public FeatureVector toFeatureVector(int unitIndex,String featureString){  String[] featureValues=featureString.split("\\s+");  if (featureValues.length != numByteFeatures + numShortFeatures + numContinuousFeatures)   throw new IllegalArgumentException("Expected " + (numByteFeatures + numShortFeatures + numContinuousFeatures) + " features, got "+ featureValues.length);  byte[] bytes=new byte[numByteFeatures];  short[] shorts=new short[numShortFeatures];  float[] floats=new float[numContinuousFeatures];  for (int i=0; i < numByteFeatures; i++) {    bytes[i]=Byte.parseByte(featureValues[i]);  }  for (int i=0; i < numShortFeatures; i++) {    shorts[i]=Short.parseShort(featureValues[numByteFeatures + i]);  }  for (int i=0; i < numContinuousFeatures; i++) {    floats[i]=Float.parseFloat(featureValues[numByteFeatures + numShortFeatures + i]);  }  return new FeatureVector(bytes,shorts,floats,unitIndex);}  }
