class C{  public static float[] temperatureToRGB(int degreesK){  int k=MathUtils.constrain(degreesK,1000,20000);  float a=(k % 100) / 100.0f;  int i=((k - 1000) / 100) * 3;  return new float[]{interp(i,a),interp(i + 1,a),interp(i + 2,a)};}  }
class C{  public static Workflow.Method linkBlockSnapshotSessionTargetGroupMethod(URI systemURI,URI snapshotSessionURI,List<URI> snapshotURIs,String copyMode,Boolean targetsExist){  return new Workflow.Method(LINK_SNAPSHOT_SESSION_TARGET_GROUP_METHOD,systemURI,snapshotSessionURI,snapshotURIs,copyMode,targetsExist);}  }
class C{  public synchronized void resetInputs() throws IOException {  source.printStatistics("docs");  setConfig(config,source);  source.resetInputs();  numDocsCreated.set(0);  resetLeftovers();}  }
class C{  public List<String> asStringList(){  return asStringList(",");}  }
class C{  public AttributesImpl(NamespacesImpl namespaces){  this.namespaces=namespaces;}  }
class C{  public void undo(){  if (!isPanelSelected()) {    return;  }  getCurrentPanel().undo();}  }
class C{  void fireUnsolicited(Object obj){  if (debug) {    System.out.println("LdapCtx.fireUnsolicited: " + obj);  }synchronized (eventSupport) {    if (unsolicited) {      eventSupport.fireUnsolicited(obj);      if (obj instanceof NamingException) {        unsolicited=false;      }    }  }}  }
class C{  public Builder addEntitlement(Entitlement entitlement){  if (entitlement != null) {    this.entitlements.add(new Entitlement.Builder(entitlement).build());  }  return this;}  }
class C{  static public void writeOn(final PrintWriter out,final Map<String,BaseIndexStats> statsMap){  boolean first=true;  for (  Map.Entry<String,BaseIndexStats> e : statsMap.entrySet()) {    final String name=e.getKey();    final BaseIndexStats stats=e.getValue();    if (stats == null) {      out.println("name: " + name + " :: no statistics?");      continue;    }    if (first) {      out.println(stats.getHeaderRow());      first=false;    }    out.println(stats.getDataRow());  }}  }
class C{  public boolean optBoolean(String key,boolean defaultValue){  try {    return this.getBoolean(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  private boolean journalRebuildRequired(){  final int redundantOpCompactThreshold=2000;  return redundantOpCount >= redundantOpCompactThreshold && redundantOpCount >= lruEntries.size();}  }
class C{  public OpenLongObjectHashMap(int initialCapacity){  this(initialCapacity,defaultMinLoadFactor,defaultMaxLoadFactor);}  }
class C{  public static <T extends Comparable<?>>Range<T> openClosed(T lowerEndpoint,T upperEndpoint){  return Range.range(lowerEndpoint,BoundType.OPEN,upperEndpoint,BoundType.CLOSED);}  }
class C{  @Override public void updateArray(String columnLabel,Array x) throws SQLException {  throw unsupported("setArray");}  }
class C{  public TopFieldDocs search(Query query,int n,Sort sort) throws IOException {  return searchAfter(null,query,n,sort,false,false);}  }
class C{  public void visitMethodInsn(int opcode,String owner,String name,String desc,boolean itf){  if (api < Opcodes.ASM5) {    if (itf != (opcode == Opcodes.INVOKEINTERFACE)) {      throw new IllegalArgumentException("INVOKESPECIAL/STATIC on interfaces require ASM 5");    }    visitMethodInsn(opcode,owner,name,desc);    return;  }  if (mv != null) {    mv.visitMethodInsn(opcode,owner,name,desc,itf);  }}  }
class C{  public static final Instances meka2mulan(Instances D,int L){  for (int j=0; j < L; j++) {    D.insertAttributeAt(D.attribute(0).copy(D.attribute(0).name() + "-"),D.numAttributes());    for (int i=0; i < D.numInstances(); i++) {      D.instance(i).setValue(D.numAttributes() - 1,D.instance(i).value(0));    }    D.deleteAttributeAt(0);  }  return D;}  }
class C{  public CompiledST compile(String name,String template){  CompiledST code=compile(null,name,null,template,null);  code.hasFormalArgs=false;  return code;}  }
class C{  public static void main(String... args) throws IOException {  new SwitchSource().run(args);}  }
class C{  public void workWithCounters(int id){  int index=-1;  for (int i=0; i < heraldNews.size(); i++) {    if (heraldNews.get(i).getid() == id) {      index=i;    }  }  if (index == -1) {    logger.info("workWithCounters: id not found. ");  }  try {    final int interval=heraldNews.get(index).getInterval();    final int limit=heraldNews.get(index).getLimit();    final String text=heraldNews.get(index).getNews();    int counter=heraldNews.get(index).getCounter();    HeraldListener tnl=heraldNews.get(index).getTNL();    final SpeakerNPC npc=SingletonRepository.getNPCList().get(HeraldName);    npc.say(text);    counter++;    turnNotifier.dontNotify(tnl);    if (interval * counter < limit) {      heraldNews.get(index).setCounter(counter);      turnNotifier.notifyInSeconds(interval,tnl);    } else {      heraldNews.remove(index);    }  } catch (  IndexOutOfBoundsException ioobe) {    logger.error("workWithCounters: index is out of bounds: " + Integer.toString(index) + ", size "+ Integer.toString(heraldNews.size())+ ", id "+ Integer.toString(id),ioobe);  }}  }
class C{  private static double distance(Problem problem,Solution a,Solution b,double power){  double distance=0.0;  for (int i=0; i < problem.getNumberOfObjectives(); i++) {    distance+=Math.pow(Math.abs(a.getObjective(i) - b.getObjective(i)),power);  }  return Math.pow(distance,1.0 / power);}  }
class C{  private void failTask(Throwable e){  ServiceUtils.logSevere(this,e);  TaskUtils.sendSelfPatch(this,buildPatch(TaskState.TaskStage.FAILED,e));}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static Item constructElectricArmorItem(String aUnlocalized,String aEnglish,int aCharge,int aTransfer,int aTier,int aDamageEnergyCost,int aSpecials,double aArmorAbsorbtionPercentage,boolean aChargeProvider,int aType,int aArmorIndex){  try {    return (Item)Class.forName("gregtechmod.api.items.GT_EnergyArmorIC_Item").getConstructors()[0].newInstance(aUnlocalized,aEnglish,aCharge,aTransfer,aTier,aDamageEnergyCost,aSpecials,aArmorAbsorbtionPercentage,aChargeProvider,aType,aArmorIndex);  } catch (  Throwable e) {  }  try {    return (Item)Class.forName("gregtechmod.api.items.GT_EnergyArmor_Item").getConstructors()[0].newInstance(aUnlocalized,aEnglish,aCharge,aTransfer,aTier,aDamageEnergyCost,aSpecials,aArmorAbsorbtionPercentage,aChargeProvider,aType,aArmorIndex);  } catch (  Throwable e) {  }  return new gregtech.api.items.GT_Generic_Item(aUnlocalized,aEnglish,"Doesn't work as intended, this is a Bug",false);}  }
class C{  @Override public void onHomePressed(){  resetActionBarIfApplicable();  mFragmentManager.popBackStack();}  }
class C{  private void attachImageFromCamera(){  try {    if (null != mShootedPicturePath) {      Uri uri=Uri.fromFile(new File(mShootedPicturePath));      try {        Bitmap previewBitmap=VectorApp.getSavedPickerImagePreview();        String thumbnailPath=getThumbnailPath(mShootedPicturePath);        int rotationAngle=ImageUtils.getRotationAngleForBitmap(VectorMediasPickerActivity.this,uri);        if (0 != rotationAngle) {          android.graphics.Matrix bitmapMatrix=new android.graphics.Matrix();          bitmapMatrix.postRotate(360 - rotationAngle);          previewBitmap=Bitmap.createBitmap(previewBitmap,0,0,previewBitmap.getWidth(),previewBitmap.getHeight(),bitmapMatrix,false);        }        File file=new File(thumbnailPath);        FileOutputStream outStream=new FileOutputStream(file);        previewBitmap.compress(Bitmap.CompressFormat.JPEG,50,outStream);        outStream.flush();        outStream.close();      } catch (      Exception e) {        Log.e(LOG_TAG,"attachImageFromCamera fails to create thumbnail file");      }      Bundle conData=new Bundle();      Intent intent=new Intent();      intent.setData(uri);      intent.putExtras(conData);      setResult(RESULT_OK,intent);    }  } catch (  Exception e) {    setResult(RESULT_CANCELED,null);  } finally {    VectorApp.setSavedCameraImagePreview(null);    finish();  }}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == PropertyAssignment.class) {switch (baseFeatureID) {default :      return -1;  }}if (baseClass == AnnotablePropertyAssignment.class) {switch (baseFeatureID) {case N4JSPackage.ANNOTABLE_PROPERTY_ASSIGNMENT__ANNOTATION_LIST:    return N4JSPackage.PROPERTY_GETTER_DECLARATION__ANNOTATION_LIST;default :  return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  private void privateMethod(){}  }
class C{  @Override public int read(@NonNull ByteBuffer dst) throws IOException {  if (in == null)   return 0;  in.readFully(dst.array(),dst.arrayOffset(),dst.array().length - dst.arrayOffset());  return dst.array().length;}  }
class C{  public DirectionPanel(boolean enable,String selection,ActionListener l){  this.setOpaque(false);  setLayout(new BoxLayout(this,BoxLayout.Y_AXIS));  setAlignmentY(TOP_ALIGNMENT);  setAlignmentX(LEFT_ALIGNMENT);  Box firstThree=Box.createHorizontalBox();  Box secondThree=Box.createHorizontalBox();  Box thirdThree=Box.createHorizontalBox();  if (!enable) {    selection="None";  }  group=new ButtonGroup();  DirectionButton b;  b=(DirectionButton)firstThree.add(new DirectionButton(tl_dot,tldn_dot,"NW","Sets the orientation to the North-West",l,group,selection.equals("NW")));  b.setEnabled(enable);  b=(DirectionButton)firstThree.add(new DirectionButton(tm_dot,tmdn_dot,"N","Sets the orientation to the North",l,group,selection.equals("N")));  b.setEnabled(enable);  b=(DirectionButton)firstThree.add(new DirectionButton(tr_dot,trdn_dot,"NE","Sets the orientation to the North-East",l,group,selection.equals("NE")));  b.setEnabled(enable);  b=(DirectionButton)secondThree.add(new DirectionButton(ml_dot,mldn_dot,"W","Sets the orientation to the West",l,group,selection.equals("W")));  b.setEnabled(enable);  b=(DirectionButton)secondThree.add(new DirectionButton(c_dot,cdn_dot,"C","Sets the orientation to the Center",l,group,selection.equals("C")));  b.setEnabled(enable);  b=(DirectionButton)secondThree.add(new DirectionButton(mr_dot,mrdn_dot,"E","Sets the orientation to the East",l,group,selection.equals("E")));  b.setEnabled(enable);  b=(DirectionButton)thirdThree.add(new DirectionButton(bl_dot,bldn_dot,"SW","Sets the orientation to the South-West",l,group,selection.equals("SW")));  b.setEnabled(enable);  b=(DirectionButton)thirdThree.add(new DirectionButton(bm_dot,bmdn_dot,"S","Sets the orientation to the South",l,group,selection.equals("S")));  b.setEnabled(enable);  b=(DirectionButton)thirdThree.add(new DirectionButton(br_dot,brdn_dot,"SE","Sets the orientation to the South-East",l,group,selection.equals("SE")));  b.setEnabled(enable);  add(firstThree);  add(secondThree);  add(thirdThree);}  }
class C{  public synchronized void writeState(DataOutputStream stream) throws IOException {  int len=mt.length;  for (int x=0; x < len; x++)   stream.writeInt(mt[x]);  len=mag01.length;  for (int x=0; x < len; x++)   stream.writeInt(mag01[x]);  stream.writeInt(mti);  stream.writeDouble(__nextNextGaussian);  stream.writeBoolean(__haveNextNextGaussian);}  }
class C{  @Override public boolean equals(final Object obj){  if (obj == null) {    return false;  }  if (this == obj) {    return true;  }  if (this.getClass() == obj.getClass()) {    final MutableObject<?> that=(MutableObject<?>)obj;    return this.value.equals(that.value);  }  return false;}  }
class C{  public static <T>IList<T> create(final IType t,final Stream<T> stream){  return (IList<T>)stream.collect(TO_GAMA_LIST);}  }
class C{  public boolean isShowing(){  return mShowing;}  }
class C{  default PQueueX<T> toPQueueX(){  return PQueueX.fromCollection(toList());}  }
class C{  @Override public void visitMethod(GrMethod method){  super.visitMethod(method);  final PsiTypeParameter[] parameters=method.getTypeParameters();  final Map<PsiTypeParameter,PsiType> map=ContainerUtil.newHashMap();  for (  PsiTypeParameter parameter : parameters) {    final PsiClassType[] types=parameter.getSuperTypes();    final PsiType bound=PsiIntersectionType.createIntersection(types);    final PsiWildcardType wildcardType=PsiWildcardType.createExtends(method.getManager(),bound);    map.put(parameter,wildcardType);  }  final PsiSubstitutor substitutor=PsiSubstitutorImpl.createSubstitutor(map);  for (  GrParameter parameter : method.getParameterList().getParameters()) {    final GrExpression initializer=parameter.getInitializerGroovy();    if (initializer == null)     continue;    final PsiType targetType=parameter.getType();    processAssignment(substitutor.substitute(targetType),initializer,parameter.getNameIdentifierGroovy(),"cannot.assign",method,ApplicableTo.ASSIGNMENT);  }}  }
class C{  public GeoTIFFDirectory(SeekableStream stream,long ifd_offset) throws java.io.IOException {  super(stream,ifd_offset);  readGeoKeys();  log("GeoTIFFDirectory constructor success.");}  }
class C{  @Nullable public static <T>T evaluateOne(@NotNull final PyExpression expression,@NotNull final Class<T> aClass){  final PyAnyExpressionEvaluator evaluator=new PyAnyExpressionEvaluator(false);  final Object evaluate=evaluator.evaluate(expression);  final T resultSingle=PyUtil.as(evaluate,aClass);  if (resultSingle != null) {    return resultSingle;  }  final List<?> resultMultiple=PyUtil.as(evaluate,List.class);  if ((resultMultiple != null) && !resultMultiple.isEmpty()) {    return PyUtil.as(resultMultiple.get(0),aClass);  }  return null;}  }
class C{  public void init(Properties p) throws Exception {  overridingProperties=ExtendedProperties.convertProperties(p);  init();}  }
class C{  private void inorder(TreeNode<E> root){  if (root == null)   return;  inorder(root.left);  list.add(root.element);  inorder(root.right);}  }
class C{  @Override protected void onDraw(Canvas canvas){  super.onDraw(canvas);  if ((mBitmap != null) && (mFaces != null)) {    double scale=drawBitmap(canvas);    drawFaceAnnotations(canvas,scale);  }}  }
class C{  private static List<String> rewriteBrute(String term){  List<String> queryList=new ArrayList<>();  for (int i=1; i < term.length(); i++) {    String prefixString=term.substring(0,i);    if (wordBase.contains(prefixString)) {      prefixString=prefixString.concat(" ");      String suffixString=term.substring(i,term.length());      List<String> suffixList=rewriteBrute(suffixString);      for (int j=0; j < suffixList.size(); j++)       suffixList.set(j,prefixString.concat(suffixList.get(j)));      queryList.addAll(suffixList);    }  }  if (wordBase.contains(term))   queryList.add(term);  return queryList;}  }
class C{  public MessageProcessor(Context context){  this.context=context;  deviceId=Preference.getString(context,DEVICE_ID_PREFERENCE_KEY);  if (deviceId == null) {    DeviceInfo deviceInfo=new DeviceInfo(context.getApplicationContext());    deviceId=deviceInfo.getMACAddress();    Preference.putString(context,DEVICE_ID_PREFERENCE_KEY,deviceId);  }}  }
class C{  @Override public List<URIMetadataNode> query(QueryParams query){  List<URIMetadataNode> docs=new ArrayList<URIMetadataNode>();  String searchurl=this.parseSearchTemplate(baseurl,query.getQueryGoal().getQueryString(false),0,query.itemsPerPage);  try {    MultiProtocolURL aurl=new MultiProtocolURL(searchurl);    try {      this.lastaccesstime=System.currentTimeMillis();      final HTTPClient httpClient=new HTTPClient(ClientIdentification.yacyInternetCrawlerAgent);      byte[] result=httpClient.GETbytes(aurl,null,null,false);      RSSReader rssReader=RSSReader.parse(RSSFeed.DEFAULT_MAXSIZE,result);      if (rssReader != null) {        final RSSFeed feed=rssReader.getFeed();        if (feed != null) {          for (          final RSSMessage item : feed) {            try {              DigestURL uri=new DigestURL(item.getLink());              URIMetadataNode doc=new URIMetadataNode(uri);              doc.setField(CollectionSchema.charset_s.getSolrFieldName(),StandardCharsets.UTF_8.name());              doc.setField(CollectionSchema.author.getSolrFieldName(),item.getAuthor());              doc.setField(CollectionSchema.title.getSolrFieldName(),item.getTitle());              doc.setField(CollectionSchema.language_s.getSolrFieldName(),item.getLanguage());              doc.setField(CollectionSchema.last_modified.getSolrFieldName(),item.getPubDate());              final String mime=TextParser.mimeOf(uri);              if (mime != null) {                doc.setField(CollectionSchema.content_type.getSolrFieldName(),mime);              }              if (item.getCategory().isEmpty()) {                doc.setField(CollectionSchema.keywords.getSolrFieldName(),Arrays.toString(item.getSubject()));              } else {                doc.setField(CollectionSchema.keywords.getSolrFieldName(),Arrays.toString(item.getSubject()) + " " + item.getCategory());              }              doc.setField(CollectionSchema.publisher_t.getSolrFieldName(),item.getCopyright());              doc.setField(CollectionSchema.text_t.getSolrFieldName(),item.getDescriptions());              doc.setField(CollectionSchema.collection_sxt.getSolrFieldName(),"dht");              if (item.getLat() != 0.0 && item.getLon() != 0.0) {                doc.setField(CollectionSchema.coordinate_p.getSolrFieldName(),item.getLat() + "," + item.getLon());              }              if (item.getSize() > 0) {                doc.setField(CollectionSchema.size_i.getSolrFieldName(),item.getSize());              }              docs.add(doc);            } catch (            final MalformedURLException e) {            }          }          ConcurrentLog.info("OpenSerachConnector","received " + docs.size() + " results from "+ this.instancename);        }      }    } catch (    IOException ex) {      ConcurrentLog.logException(ex);      ConcurrentLog.info("OpenSearchConnector","no connection to " + searchurl);    }  } catch (  MalformedURLException ee) {    ConcurrentLog.warn("OpenSearchConnector","malformed url " + searchurl);  }  return docs;}  }
class C{  protected void handleUnknownProperty(JsonParser jp,DeserializationContext ctxt,Object instanceOrClass,String propName) throws IOException, JsonProcessingException {  if (instanceOrClass == null) {    instanceOrClass=getValueClass();  }  if (ctxt.handleUnknownProperty(jp,this,instanceOrClass,propName)) {    return;  }  reportUnknownProperty(ctxt,instanceOrClass,propName);  jp.skipChildren();}  }
class C{  public void applyFromResolveInfo(PackageManager pm,ResolveInfo info,WidgetPreviewLoader loader){  mInfo=info;  CharSequence label=info.loadLabel(pm);  mWidgetName.setText(label);  mWidgetDims.setText(String.format(mDimensionsFormatString,1,1));  mWidgetPreviewLoader=loader;}  }
class C{  public boolean isMatch(List<Parameter> params){  if (this.isCompleteList && paramTypes.size() != params.size()) {    return false;  } else   if (paramTypes.size() > params.size()) {    return false;  }  for (int i=0; i < paramTypes.size(); i++) {    if (!paramTypes.get(i).isMatch(params.get(i))) {      return false;    }  }  return true;}  }
class C{  public static void init(LogLevel logLevel,String debugTag,Context context){  init(0,logLevel,debugTag,context);}  }
class C{  public Iterator keyIterator(){  return map.keySet().iterator();}  }
class C{  public static double percentDiv(final double a,final double b){  return ((long)((a / b) * 10000) / 100.);}  }
class C{  public void removeParameter(String parameterName){  if (!(address instanceof SipUri))   throw new RuntimeException("address is not a SipUri");  SipUri uri=(SipUri)address;  uri.removeParameter(parameterName);}  }
class C{  public void clearOutputs(){  unCache();  for (  TransactionOutput output : outputs) {    output.setParent(null);  }  outputs.clear();  this.length=this.bitcoinSerialize().length;}  }
class C{  public synchronized int capacity(){  return elementData.length;}  }
class C{  public int emitJump(int opcode){  if (fatcode) {    if (opcode == goto_ || opcode == jsr) {      emitop4(opcode + goto_w - goto_,0);    } else {      emitop2(negate(opcode),8);      emitop4(goto_w,0);      alive=true;      pendingStackMap=needStackMap;    }    return cp - 5;  } else {    emitop2(opcode,0);    return cp - 3;  }}  }
class C{  public void removeHandler(String path){  getReader().removeHandler(path);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:07.607 -0500",hash_original_method="D0F21E4A05814ED295A9D395C58D6229",hash_generated_method="54241B07FD1B5E036235ECB3CFF82126") private synchronized void sendMessageAtFrontOfQueue(Message msg){  if (mBlockMessages) {    return;  }  if (mMessages != null) {    mMessages.add(0,msg);  } else {    mHandler.sendMessageAtFrontOfQueue(msg);  }}  }
class C{  public void adjustForIllegalMove(String statusText,boolean adjustClocks){  if (LOG.isDebugEnabled()) {    LOG.debug("adjustForIllegalMove ");  }  if (!getPreferences().getBoolean(PreferenceKeys.BOARD_QUEUED_PREMOVE_ENABLED)) {    onClearPremoves();  } else {    onClearLastPremove();  }  board.unhidePieces();  if (adjustClocks) {    refresh();  } else {    refreshBoard();  }  if (StringUtils.isNotBlank(statusText)) {    board.getStatusLabel().setText(statusText);  }  SoundService.getInstance().playSound("illegalMove");}  }
class C{  public String buttonGetCaption(){  return buttonGetCaption(0);}  }
class C{  public BusinessObjectDataCreateRequest createBusinessObjectDataCreateRequest(BusinessObjectFormatEntity businessObjectFormatEntity,String uuid,String businessObjectDataStatus,List<Attribute> attributes,StorageEntity storageEntity,String storageDirectoryPath,String storageFilePath,Long storageFileSizeBytes,Long storageFileRowCount){  BusinessObjectDataCreateRequest request=new BusinessObjectDataCreateRequest();  request.setNamespace(businessObjectFormatEntity.getBusinessObjectDefinition().getNamespace().getCode());  request.setBusinessObjectDefinitionName(businessObjectFormatEntity.getBusinessObjectDefinition().getName());  request.setBusinessObjectFormatUsage(businessObjectFormatEntity.getUsage());  request.setBusinessObjectFormatFileType(businessObjectFormatEntity.getFileType().getCode());  request.setBusinessObjectFormatVersion(businessObjectFormatEntity.getBusinessObjectFormatVersion());  request.setPartitionKey(businessObjectFormatEntity.getPartitionKey());  request.setPartitionValue(uuid);  request.setStatus(businessObjectDataStatus);  StorageUnitCreateRequest storageUnitCreateRequest=new StorageUnitCreateRequest();  request.setStorageUnits(Arrays.asList(storageUnitCreateRequest));  storageUnitCreateRequest.setStorageName(storageEntity.getName());  storageUnitCreateRequest.setStorageDirectory(new StorageDirectory(storageDirectoryPath));  storageUnitCreateRequest.setStorageFiles(Arrays.asList(new StorageFile(storageFilePath,storageFileSizeBytes,storageFileRowCount)));  request.setAttributes(attributes);  request.setCreateNewVersion(false);  return request;}  }
class C{  public DeadEvent(Object source,Object event){  this.source=checkNotNull(source);  this.event=checkNotNull(event);}  }
class C{  @Override protected void onStop(){  super.onStop();  Log.d(TAG,"onStop() - the activity is no longer visible (it is now \"stopped\")");}  }
class C{  @Override public void keyReleased(KeyEvent e){synchronized (keyLock) {    keysDown.remove(e.getKeyCode());  }}  }
class C{  public BufferedWriter(Writer out){  this(out,defaultCharBufferSize);}  }
class C{  private boolean isSpecialColumn(int col){  return col == 0;}  }
class C{  public static <T>T withObjectInputStream(File file,ClassLoader classLoader,@ClosureParams(value=SimpleType.class,options="java.io.ObjectInputStream") Closure<T> closure) throws IOException {  return IOGroovyMethods.withStream(newObjectInputStream(file,classLoader),closure);}  }
class C{  @RequestMapping(value="/container/{containerId}/application/{applicationName}",method=RequestMethod.POST) @ResponseBody public JsonResponse createDirectory(@PathVariable final String containerId,@PathVariable final String applicationName,@RequestParam("path") String path) throws ServiceException, CheckException, IOException {  if (logger.isDebugEnabled()) {    logger.debug("containerId:" + containerId);    logger.debug("applicationName:" + applicationName);    logger.debug("path:" + path);  }  fileService.createDirectory(applicationName,containerId,path);  return new HttpOk();}  }
class C{  public Collection<String> files() throws IOException {  Collection<String> files=new HashSet<>(info.files());  info.getCodec().liveDocsFormat().files(this,files);  for (  Set<String> updatefiles : dvUpdatesFiles.values()) {    files.addAll(updatefiles);  }  files.addAll(fieldInfosFiles);  return files;}  }
class C{  public boolean isTempBlobName(String blobName){  return blobName.startsWith(ChecksumBlobStoreFormat.TEMP_FILE_PREFIX);}  }
class C{  private boolean execute(boolean readResponse) throws IOException {  try {    httpEngine.sendRequest();    if (readResponse) {      httpEngine.readResponse();    }    return true;  } catch (  IOException e) {    if (handleFailure(e)) {      return false;    } else {      throw e;    }  }}  }
class C{  public JSONArray add(float value){  values.add(JSON.value(value));  return this;}  }
class C{  @Override public boolean removeFromWorld(){  removeNPC("Fidorea");  final StendhalRPZone zone=SingletonRepository.getRPWorld().getZone("0_ados_city_n");  new MakeupArtistNPC().buildFidorea(zone,20,13);  return true;}  }
class C{  public ServiceInfo serviceInfo(){  return this.serviceInfo;}  }
class C{  @Override public UpdateResponse commit(boolean waitFlush,boolean waitSearcher) throws SolrServerException, IOException {  UpdateResponse ur=null;  if (this.solr0 != null)   ur=this.solr0.commit(waitFlush,waitSearcher);  if (this.solr1 != null)   ur=this.solr1.commit(waitFlush,waitSearcher);  return ur;}  }
class C{  public JavacMessages(Context context){  this(defaultBundleName,context.get(Locale.class));  context.put(messagesKey,this);}  }
class C{  public boolean tryReadLock(){  int cnt=readLockEntryCnt.get();  if (cnt > 0 || Thread.currentThread().getId() == writeLockOwner) {    assert state > 0 || state == -1;    readLockEntryCnt.set(cnt + 1);    return true;  }  while (true) {    int cur=state;    if (cur == -1 || pendingWLocks > 0)     return false;    if (compareAndSet(STATE_OFFS,cur,cur + 1)) {      readLockEntryCnt.set(1);      return true;    }  }}  }
class C{  void checkLabel(final Label label,final boolean checkVisited,final String msg){  if (label == null) {    throw new IllegalArgumentException("Invalid " + msg + " (must not be null)");  }  if (checkVisited && labels.get(label) == null) {    throw new IllegalArgumentException("Invalid " + msg + " (must be visited first)");  }}  }
class C{  public Implementation(){  super();  plugin=this;}  }
class C{  public static long parseDateAsEpoch(String dateStr){  try {    return DateUtils.parseDate(dateStr).getTime();  } catch (  DateParseException e) {    return 0;  }}  }
class C{  @Override public PrintStream openStream(String filename) throws IOException {  return newStream(filename);}  }
class C{  protected int add(I i){  return iMap.add(i);}  }
class C{  public ProcessContextEditor(Process process,ProcessContext alternativeContext){  inputEditor=new RepositoryLocationsEditor<OutputPorts>(true,"context.input","input");  outputEditor=new RepositoryLocationsEditor<InputPorts>(false,"context.output","result");  macroEditor=new MacroEditor(true);  setLayout(new GridLayout(3,1));  ((GridLayout)getLayout()).setHgap(0);  ((GridLayout)getLayout()).setVgap(10);  add(inputEditor);  add(outputEditor);  add(macroEditor);  setProcess(process,alternativeContext);}  }
class C{  private void initializeRatioSlider(){  ratioSlider.setMajorTickSpacing(10);  ratioSlider.setMinorTickSpacing(2);  ratioSlider.setPaintTicks(true);  Hashtable<Integer,JLabel> labelTable=new Hashtable<Integer,JLabel>();  labelTable.put(new Integer(0),new JLabel("0/100"));  labelTable.put(new Integer(25),new JLabel("25/75"));  labelTable.put(new Integer(50),new JLabel("50/50"));  labelTable.put(new Integer(75),new JLabel("75/25"));  labelTable.put(new Integer(100),new JLabel("100/0"));  ratioSlider.setLabelTable(labelTable);  ratioSlider.setPaintLabels(true);}  }
class C{  private static int computeDimension(ResultPoint topLeft,ResultPoint topRight,ResultPoint bottomLeft,float moduleSize) throws NotFoundException {  int tltrCentersDimension=MathUtils.round(ResultPoint.distance(topLeft,topRight) / moduleSize);  int tlblCentersDimension=MathUtils.round(ResultPoint.distance(topLeft,bottomLeft) / moduleSize);  int dimension=((tltrCentersDimension + tlblCentersDimension) >> 1) + 7;switch (dimension & 0x03) {case 0:    dimension++;  break;case 2:dimension--;break;case 3:throw NotFoundException.getNotFoundInstance();}return dimension;}  }
class C{  private static String stripQuotes(final String line,final char quote,final char separator,final char replacement){  String ret=line;  int p, q;  while ((p=ret.indexOf(quote)) >= 0) {    q=ret.indexOf(quote,p + 1);    if (q < 0) {      return ret.substring(0,p) + ret.substring(p + 1);    }    ret=ret.substring(0,p) + ret.substring(p + 1,q).replace(separator,replacement) + ret.substring(q + 1);  }  return ret;}  }
class C{  public int describeContents(){  return 0;}  }
class C{  private String readLine() throws IOException {  StringBuilder sb=new StringBuilder();  int c;  while ((c=ctrlInput.read()) != '\n') {    sb.append((char)c);  }  return sb.toString();}  }
class C{  public InternalDistributedMember(ServerLocation location){  this.hostName=location.getHostName();  InetAddress addr=null;  try {    addr=InetAddress.getByName(this.hostName);  } catch (  UnknownHostException e) {    throw new GemFireConfigException("Unable to resolve server location " + location,e);  }  this.netMbr=MemberFactory.newNetMember(addr,location.getPort());  this.vmKind=DistributionManager.NORMAL_DM_TYPE;  this.versionObj=Version.CURRENT;}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 1682) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public boolean remove(Object o){  if (!(o instanceof IInterval)) {    return false;  }  IInterval e=(IInterval)o;  if (root == null) {    return false;  }  return root.remove(e);}  }
class C{  public static void validate(String xml) throws Exception {  validate(new StreamSource(new StringReader(xml)));}  }
class C{  public ImageData(){  this.dataArray=new byte[0];  this.byteSize=0;}  }
class C{  void redoDelete(int tableId,long key){  Index index=metaObjects.get(tableId);  PageDataIndex scan=(PageDataIndex)index;  Row row=scan.getRowWithKey(key);  if (row == null || row.getKey() != key) {    trace.error(null,"Entry not found: " + key + " found instead: "+ row+ " - ignoring");    return;  }  redo(tableId,row,false);}  }
class C{  public void windowOpened(WindowEvent e){  if (AWTEventMonitor.windowListener_private != null) {    AWTEventMonitor.windowListener_private.windowOpened(e);  }}  }
class C{  public V put(K key,V value){  typeCheck(key);  int index=key.ordinal();  Object oldValue=vals[index];  vals[index]=maskNull(value);  if (oldValue == null)   size++;  return unmaskNull(oldValue);}  }
class C{  protected void insert(Object[] row,boolean commitIndex) throws SQLException {  String query=getQuery(row);  Document doc=new Document();  doc.add(new Field(LUCENE_FIELD_QUERY,query,Field.Store.YES,Field.Index.NOT_ANALYZED));  long time=System.currentTimeMillis();  doc.add(new Field(LUCENE_FIELD_MODIFIED,DateTools.timeToString(time,DateTools.Resolution.SECOND),Field.Store.YES,Field.Index.NOT_ANALYZED));  StatementBuilder buff=new StatementBuilder();  for (  int index : indexColumns) {    String columnName=columns[index];    String data=asString(row[index],columnTypes[index]);    if (columnName.startsWith(LUCENE_FIELD_COLUMN_PREFIX)) {      columnName=LUCENE_FIELD_COLUMN_PREFIX + columnName;    }    doc.add(new Field(columnName,data,Field.Store.NO,Field.Index.ANALYZED));    buff.appendExceptFirst(" ");    buff.append(data);  }  Field.Store storeText=STORE_DOCUMENT_TEXT_IN_INDEX ? Field.Store.YES : Field.Store.NO;  doc.add(new Field(LUCENE_FIELD_DATA,buff.toString(),storeText,Field.Index.ANALYZED));  try {    indexAccess.writer.addDocument(doc);    if (commitIndex) {      commitIndex();    }  } catch (  IOException e) {    throw convertException(e);  }}  }
class C{  public JSchSftpChannel openSftpChannel() throws JSchException, SftpException {  ChannelSftp chan=(ChannelSftp)session.openChannel("sftp");  chan.connect(timeout);  if (url.getPath().isPresent()) {    String dir=url.getPath().get();    try {      chan.cd(dir);    } catch (    SftpException e) {      logger.warning(e.toString());      mkdirs(chan,dir);      chan.cd(dir);    }  }  return new JSchSftpChannel(chan);}  }
class C{  public void removeIndexInterval(int index0,int index1){  int rmMinIndex=Math.min(index0,index1);  int rmMaxIndex=Math.max(index0,index1);  int gapLength=(rmMaxIndex - rmMinIndex) + 1;  for (int i=rmMinIndex; i <= maxIndex; i++) {    setState(i,value.get(i + gapLength));  }}  }
class C{  private void recordStoragePortEvent(OperationTypeEnum opType,String description,URI storagePort){  String evType;  evType=opType.getEvType(true);  RecordableBourneEvent event=new RecordableBourneEvent(evType,null,URI.create("ViPR-User"),null,null,EVENT_SERVICE_TYPE,storagePort,description,System.currentTimeMillis(),"",null,RecordType.Event.name(),EVENT_SERVICE_SOURCE,"","");  try {    _evtMgr.recordEvents(event);  } catch (  Exception ex) {    _log.error("Failed to record event. Event description: {}. Error: {}.",description,ex);  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ANONYMOUS_DERIVED_ATTRIBUTE_3__MORE_CODE_1:    return getMoreCode_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public ParallelTaskBuilder prepareHttpDelete(String url){  reinitIfClosed();  ParallelTaskBuilder cb=new ParallelTaskBuilder();  cb.getHttpMeta().setHttpMethod(HttpMethod.DELETE);  cb.getHttpMeta().setRequestUrlPostfix(url);  return cb;}  }
class C{  public DelaunayVertex isOutside(DelaunayVertex[] simplex){  int[] result=this.relation(simplex);  for (int i=0; i < result.length; i++) {    if (result[i] > 0) {      return simplex[i];    }  }  return null;}  }
class C{  public h1 addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public ToastBuilder customView(View customView){  this.customView=customView;  return this;}  }
class C{  public List<Exception> validateAnnotatedClass(TestClass testClass){  return NO_VALIDATION_ERRORS;}  }
class C{  public static Graph createGraph(boolean trace){  return new Graph(false,trace);}  }
class C{  public SwipeDismissAdapter(@NonNull final BaseAdapter baseAdapter,@NonNull final OnDismissCallback onDismissCallback){  super(baseAdapter);  mOnDismissCallback=onDismissCallback;}  }
class C{  public static boolean isSorted(final float[] array){  if (array == null || array.length < 2) {    return true;  }  float previous=array[0];  final int n=array.length;  for (int i=1; i < n; i++) {    final float current=array[i];    if (Float.compare(previous,current) > 0) {      return false;    }    previous=current;  }  return true;}  }
class C{  @Override protected void process(DistributionManager dm){  AdminWaiters.sendResponse(this);}  }
class C{  protected CompletableFuture<Long> configure(Collection<Member> members){  final long index;  try (ConfigurationEntry entry=context.getLog().create(ConfigurationEntry.class)){    entry.setTerm(context.getTerm()).setTimestamp(System.currentTimeMillis()).setMembers(members);    index=context.getLog().append(entry);    LOGGER.debug("{} - Appended {} to log at index {}",context.getCluster().member().address(),entry,index);    configuring=index;    context.getClusterState().configure(new Configuration(entry.getIndex(),entry.getTerm(),entry.getTimestamp(),entry.getMembers()));  }   return appender.appendEntries(index).whenComplete(null);}  }
class C{  static private MPrintFormatItem[] createItems(Properties ctx,MPrintFormat format){  s_log.fine("From window Tab ...");  ArrayList<MPrintFormatItem> list=new ArrayList<MPrintFormatItem>();  String sql="SELECT AD_Column_ID " + "FROM AD_Field " + "WHERE AD_Tab_ID=(SELECT MIN(AD_Tab_ID) FROM AD_Tab WHERE AD_Table_ID=?)"+ " AND IsEncrypted='N' AND ObscureType IS NULL "+ "ORDER BY COALESCE(IsDisplayed,'N') DESC, SortNo, SeqNo, Name";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,format.get_TrxName());    pstmt.setInt(1,format.getAD_Table_ID());    rs=pstmt.executeQuery();    int seqNo=1;    while (rs.next()) {      MPrintFormatItem pfi=MPrintFormatItem.createFromColumn(format,rs.getInt(1),seqNo++);      if (pfi != null) {        list.add(pfi);        s_log.finest("Tab: " + pfi);      }    }  } catch (  SQLException e) {    s_log.log(Level.SEVERE,"(tab) - " + sql,e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  if (list.size() == 0) {    s_log.fine("From Table ...");    sql="SELECT AD_Column_ID " + "FROM AD_Column " + "WHERE AD_Table_ID=? "+ "ORDER BY IsIdentifier DESC, SeqNo, Name";    try {      pstmt=DB.prepareStatement(sql,format.get_TrxName());      pstmt.setInt(1,format.getAD_Table_ID());      rs=pstmt.executeQuery();      int seqNo=1;      while (rs.next()) {        MPrintFormatItem pfi=MPrintFormatItem.createFromColumn(format,rs.getInt(1),seqNo++);        if (pfi != null) {          list.add(pfi);          s_log.finest("Table: " + pfi);        }      }    } catch (    SQLException e) {      s_log.log(Level.SEVERE,"(table) - " + sql,e);    } finally {      DB.close(rs,pstmt);      rs=null;      pstmt=null;    }  }  MPrintFormatItem[] retValue=new MPrintFormatItem[list.size()];  list.toArray(retValue);  s_log.info(format + " - #" + retValue.length);  return retValue;}  }
class C{  public MutableKeysRaba(final byte[][] a){  this(0,a.length,a.length,a);}  }
class C{  protected int findByte(byte value,int pos){  for (int i=pos; i < tail; i++) {    if (buffer[i] == value) {      return i;    }  }  return -1;}  }
class C{  public void enableErrorMessageCollection(boolean pNewState){  mMessageCollectionEnabled=pNewState;  if (mMessages == null && mMessageCollectionEnabled) {    mMessages=new ArrayList<String>();  }}  }
class C{  private final void fillCache(long index) throws IOException {  assert inCache(index) < 0;  if (inCache(index) >= 0)   return;  final long fs=this.filesize();  if (index + this.cache.length / this.recordsize > fs) {    index=fs - this.cache.length / this.recordsize;  }  if (index < 0)   index=0;  this.cachecount=(int)Math.min(this.cache.length / this.recordsize,this.filesize() - index);  assert this.cachecount >= 0;  this.cacheindex=index;  if (this.cachecount == 0)   return;  this.raf.seek(this.recordsize * index);  this.raf.readFully(this.cache,0,this.recordsize * this.cachecount);}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  if (getUIClassID().equals(uiClassID)) {    byte count=JComponent.getWriteObjCounter(this);    JComponent.setWriteObjCounter(this,--count);    if (count == 0 && ui != null) {      ui.installUI(this);    }  }}  }
class C{  @Override public MapIterator<K,V> mapIterator(){  return new ReferenceMapIterator<K,V>(this);}  }
class C{  public RARArchiveImpl(final Archive<?> delegate){  super(RARArchive.class,delegate);}  }
class C{  public InternalFrameWindowFocusedState(){  super("WindowFocused");}  }
class C{  public static Validator<CharSequence> noWhitespace(@NonNull final Context context){  return new NoWhitespaceValidator(context,R.string.default_error_message);}  }
class C{  @SuppressWarnings({"ProhibitedExceptionDeclared","ProhibitedExceptionThrown","CatchGenericClass"}) @Around("execution(@org.apache.ignite.compute.gridify.GridifySetToSet * *(..)) && !cflow(call(* org.apache.ignite.compute.ComputeJob.*(..)))") public Object gridify(ProceedingJoinPoint joinPnt) throws Throwable {  Method mtd=((MethodSignature)joinPnt.getSignature()).getMethod();  GridifySetToSet ann=mtd.getAnnotation(GridifySetToSet.class);  assert ann != null : "Intercepted method does not have gridify annotation.";  String gridName=F.isEmpty(ann.gridName()) ? null : ann.gridName();  if (G.state(gridName) != STARTED)   throw new IgniteCheckedException("Grid is not locally started: " + gridName);  GridifyNodeFilter nodeFilter=null;  if (!ann.nodeFilter().equals(GridifyNodeFilter.class))   nodeFilter=ann.nodeFilter().newInstance();  checkMethodSignature(mtd);  GridifyArgumentBuilder argBuilder=new GridifyArgumentBuilder();  GridifyRangeArgument arg=argBuilder.createTaskArgument(mtd.getDeclaringClass(),mtd.getName(),mtd.getReturnType(),mtd.getParameterTypes(),mtd.getParameterAnnotations(),joinPnt.getArgs(),joinPnt.getTarget());  if (!ann.interceptor().equals(GridifyInterceptor.class)) {    if (!ann.interceptor().newInstance().isGridify(ann,arg))     return joinPnt.proceed();  }  if (ann.threshold() < 0)   return joinPnt.proceed();  if (arg.getInputSize() != UNKNOWN_SIZE && arg.getInputSize() <= ann.threshold())   return joinPnt.proceed();  checkIsSplitToJobsAllowed(arg,ann);  try {    Ignite ignite=G.ignite(gridName);    return execute(ignite.compute(),joinPnt.getSignature().getDeclaringType(),arg,nodeFilter,ann.threshold(),ann.splitSize(),ann.timeout());  } catch (  Exception e) {    for (    Class<?> ex : ((MethodSignature)joinPnt.getSignature()).getMethod().getExceptionTypes()) {      Throwable cause=e.getCause();      while (cause != null) {        if (ex.isAssignableFrom(cause.getClass()))         throw cause;        cause=cause.getCause();      }      if (ex.isAssignableFrom(e.getClass()))       throw e;    }    throw new GridifyRuntimeException("Undeclared exception thrown: " + e.getMessage(),e);  }}  }
class C{  public static void notifyDebit(final TransactionObserver observer,final Account account,final Amount amount){  observer.notify(new BalanceAdjustmentNotification(NotificationType.BalanceDebit,account,amount));}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  double zConvFactor=1;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  zConvFactor=Double.parseDouble(args[2]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    double[] N=new double[8];    float slope;    float progress=0;    int[] Dy={-1,0,1,1,1,0,-1,-1};    int[] Dx={1,1,1,0,-1,-1,-1,0};    final double radToDeg=180 / Math.PI;    double Zx, Zy, Zxx, Zyy, Zxy, Zx2, Zy2, p, q;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=true;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double gridRes=inputFile.getCellSizeX();    double gridResTimes2=gridRes * 2;    double eightGridRes=8 * gridRes;    double gridResSquared=gridRes * gridRes;    double fourTimesGridResSquared=gridResSquared * 4;    double curv;    double noData=inputFile.getNoDataValue();    if (inputFile.getXYUnits().toLowerCase().contains("deg") || inputFile.getProjection().toLowerCase().contains("geog")) {      double midLat=(inputFile.getNorth() - inputFile.getSouth()) / 2.0;      if (midLat <= 90 && midLat >= -90) {        zConvFactor=1.0 / (113200 * Math.cos(Math.toRadians(midLat)));      }    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("blue_white_red.pal");    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          for (int i=0; i < 8; i++) {            N[i]=inputFile.getValue(row + Dy[i],col + Dx[i]);            if (N[i] != noData) {              N[i]=N[i] * zConvFactor;            } else {              N[i]=z * zConvFactor;            }          }          Zx=(N[1] - N[5]) / gridResTimes2;          Zy=(N[7] - N[3]) / gridResTimes2;          Zxx=(N[1] - 2 * z + N[5]) / gridResSquared;          Zyy=(N[7] - 2 * z + N[3]) / gridResSquared;          Zxy=(-N[6] + N[0] + N[4] - N[2]) / fourTimesGridResSquared;          Zx2=Zx * Zx;          Zy2=Zy * Zy;          p=Zx2 + Zy2;          q=p + 1;          if (p > 0) {            curv=(Zxx * Zy2 - 2 * Zxy * Zx* Zy + Zyy * Zx2) / (p * Math.pow(q,1.5));            outputFile.setValue(row,col,curv * radToDeg * 100);          } else {            outputFile.setValue(row,col,noData);          }        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void doTestRecoveryAfterAnError(int useNewBits,HadoopErrorSimulator.Kind simulatorKind) throws Exception {  try {    IgfsPath inDir=new IgfsPath(PATH_INPUT);    igfs.mkdirs(inDir);    IgfsPath inFile=new IgfsPath(inDir,HadoopWordCount2.class.getSimpleName() + "-input");    generateTestFile(inFile.toString(),"red",red,"blue",blue,"green",green,"yellow",yellow);    boolean useNewMapper=(useNewBits & 1) == 0;    boolean useNewCombiner=(useNewBits & 2) == 0;    boolean useNewReducer=(useNewBits & 4) == 0;    for (int i=0; i < 12; i++) {      int bits=1 << i;      System.out.println("############################ Simulator kind = " + simulatorKind + ", Stage bits = "+ bits);      HadoopErrorSimulator sim=HadoopErrorSimulator.create(simulatorKind,bits);      doTestWithErrorSimulator(sim,inFile,useNewMapper,useNewCombiner,useNewReducer);    }  } catch (  Throwable t) {    t.printStackTrace();    fail("Unexpected throwable: " + t);  }}  }
class C{  public String quoteString(String str){  StringBuilder sb=new StringBuilder();  sb.append('"');  if (StringUtils.isNotBlank(str)) {    sb.append(escapeQuotes(str));  }  sb.append('"');  return sb.toString();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node testAddr;  Attr newAttr;  Attr newAddrAttr;  String newName;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagName("emp:address");  testAddr=elementList.item(0);  assertNotNull("empAddrNotNull",testAddr);  newAttr=doc.createAttributeNS("http://www.nist.gov","xxx:domestic");  newAddrAttr=((Element)testAddr).setAttributeNodeNS(newAttr);  newName=newAddrAttr.getNodeName();  assertEquals("nodeName","emp:domestic",newName);}  }
class C{  public HttpRoute(HttpHost target,InetAddress local,HttpHost proxy,boolean secure,TunnelType tunnelled,LayerType layered){  this(local,target,toChain(proxy),secure,tunnelled,layered);}  }
class C{  private void generateInvoices(){  String trxName=Trx.createTrxName("IVG");  Trx trx=Trx.get(trxName,true);  m_selectionActive=false;  statusBar.setStatusLine(Msg.getMsg(Env.getCtx(),"InvGenerateGen"));  statusBar.setStatusDB(String.valueOf(selection.size()));  int AD_Process_ID=0;  KeyNamePair docTypeKNPair=(KeyNamePair)cmbDocType.getSelectedItem();  if (docTypeKNPair.getKey() == MRMA.Table_ID) {    AD_Process_ID=52002;  } else {    AD_Process_ID=134;  }  MPInstance instance=new MPInstance(Env.getCtx(),AD_Process_ID,0);  if (!instance.save()) {    info.setText(Msg.getMsg(Env.getCtx(),"ProcessNoInstance"));    return;  }  StringBuffer insert=new StringBuffer();  insert.append("INSERT INTO T_SELECTION(AD_PINSTANCE_ID, T_SELECTION_ID) ");  int counter=0;  for (  Integer selectedId : selection) {    counter++;    if (counter > 1)     insert.append(" UNION ");    insert.append("SELECT ");    insert.append(instance.getAD_PInstance_ID());    insert.append(", ");    insert.append(selectedId);    insert.append(" FROM DUAL ");    if (counter == 1000) {      if (DB.executeUpdate(insert.toString(),trxName) < 0) {        String msg="No Shipments";        log.config(msg);        info.setText(msg);        trx.rollback();        return;      }      insert=new StringBuffer();      insert.append("INSERT INTO T_SELECTION(AD_PINSTANCE_ID, T_SELECTION_ID) ");      counter=0;    }  }  if (counter > 0) {    if (DB.executeUpdate(insert.toString(),trxName) < 0) {      String msg="No Shipments";      log.config(msg);      info.setText(msg);      trx.rollback();      return;    }  }  ProcessInfo pi=new ProcessInfo("",AD_Process_ID);  pi.setAD_PInstance_ID(instance.getAD_PInstance_ID());  MPInstancePara para=new MPInstancePara(instance,10);  para.setParameter("Selection","Y");  if (!para.save()) {    String msg="No Selection Parameter added";    info.setText(msg);    log.log(Level.SEVERE,msg);    return;  }  para=new MPInstancePara(instance,20);  para.setParameter("DocAction","CO");  if (!para.save()) {    String msg="No DocAction Parameter added";    info.setText(msg);    log.log(Level.SEVERE,msg);    return;  }  ProcessCtl worker=new ProcessCtl(this,Env.getWindowNo(this),pi,trx);  worker.start();}  }
class C{  public void addMessageEventNotificationListener(MessageEventNotificationListener messageEventNotificationListener){synchronized (messageEventNotificationListeners) {    if (!messageEventNotificationListeners.contains(messageEventNotificationListener)) {      messageEventNotificationListeners.add(messageEventNotificationListener);    }  }}  }
class C{  public CDebuggerControlPanel(final JFrame parent,final CDebugPerspectiveModel debugPerspectiveModel){  super(new BorderLayout());  m_toolbarPanel=new CToolbarPanel(parent,debugPerspectiveModel);  add(m_toolbarPanel,BorderLayout.SOUTH);}  }
class C{  private String convertToHtml(final String string){  return "<pre><br/>" + string.replaceAll("\n","<br/>") + "<br/></pre>";}  }
class C{  public static <T,K,V,M extends Map<K,V>>M addToMap(Iterable<T> iterable,Function<? super T,? extends K> keyFunction,Function<? super T,? extends V> valueFunction,M map){  Iterate.forEach(iterable,new MapCollectProcedure<>(map,keyFunction,valueFunction));  return map;}  }
class C{  @Override public synchronized void updateNull(int columnIndex) throws SQLException {  if (!this.onInsertRow) {    if (!this.doingUpdates) {      this.doingUpdates=true;      syncUpdate();    }    this.updater.setNull(columnIndex,0);  } else {    this.inserter.setNull(columnIndex,0);    this.thisRow.setColumnValue(columnIndex - 1,null);  }}  }
class C{  public LockGrantorId peekLockGrantorId(){  Assert.assertHoldsLock(this.destroyLock,false);synchronized (this.lockGrantorIdLock) {    LockGrantorId currentLockGrantorId=this.lockGrantorId;    if (currentLockGrantorId != null) {      return currentLockGrantorId;    }  }  long statStart=getStats().startGrantorWait();  LockGrantorId theLockGrantorId=null;  try {    GrantorInfo gi=peekGrantor();    InternalDistributedMember lockGrantorMember=gi.getId();    if (lockGrantorMember == null) {      return null;    }    theLockGrantorId=new LockGrantorId(this.dm,lockGrantorMember,gi.getVersionId(),gi.getSerialNumber());    return theLockGrantorId;  }  finally {    boolean getLockGrantorIdFailed=theLockGrantorId == null;    getStats().endGrantorWait(statStart,getLockGrantorIdFailed);  }}  }
class C{  public static @NotNull String stringifyErrors(@Nullable Collection<VcsException> errors){  if (errors == null) {    return "";  }  StringBuilder content=new StringBuilder();  for (  VcsException e : errors) {    for (    String message : e.getMessages()) {      content.append(message.replace("\n","<br/>")).append("<br/>");    }  }  return content.toString();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 15:47:28.900 -0500",hash_original_method="243500F1445933375EAF83B185206C46",hash_generated_method="929939B76AC27F3A6404EAF1F8A34505") @DSVerified @DSSafe(DSCat.UTIL_FUNCTION) public static byte[] md5(InputStream data) throws IOException {  return digest(getMd5Digest(),data);}  }
class C{  public XPath createXPath(String xpathExpression,VariableContext variableContext){  XPath xpath=createXPath(xpathExpression);  xpath.setVariableContext(variableContext);  return xpath;}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writeAttributedString(this.attributedLabel,stream);  SerialUtilities.writeShape(this.shape,stream);  SerialUtilities.writePaint(this.fillPaint,stream);  SerialUtilities.writeStroke(this.outlineStroke,stream);  SerialUtilities.writePaint(this.outlinePaint,stream);  SerialUtilities.writeShape(this.line,stream);  SerialUtilities.writeStroke(this.lineStroke,stream);  SerialUtilities.writePaint(this.linePaint,stream);  SerialUtilities.writePaint(this.labelPaint,stream);}  }
class C{  public void preventDefault(){  this.preventDefault=true;}  }
class C{  public String TO_NUMBER(BigDecimal number,int displayType){  if (number == null)   return "NULL";  BigDecimal result=number;  int scale=DisplayType.getDefaultPrecision(displayType);  if (scale > number.scale()) {    try {      result=number.setScale(scale,BigDecimal.ROUND_HALF_UP);    } catch (    Exception e) {    }  }  return result.toString();}  }
class C{  private void emitCodePoint(int codePoint){}  }
class C{  public static long offsetOfField(StructObject o,String name){  for (  StructFieldDescription desc : o.io.desc.fields) {    if (desc.name.equals(name)) {      return desc.byteOffset;    }  }  throw new NoSuchFieldError(name);}  }
class C{  public synchronized void add(byte[] bytes){  if (null == mQueue) {    mQueue=new ArrayList<byte[]>();  }  if (null != bytes) {    mQueue.add(bytes);  }  print();}  }
class C{  public void killCurrentRequest(){  current.kill();}  }
class C{  public CLIQUESubspace(int dimension){  super(dimension);  denseUnits=new ArrayList<>();  coverage=0;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:32.763 -0500",hash_original_method="F8E32D9ECB9A19E8EE9CCF27EE20F097",hash_generated_method="BDAA0031048EE5BC279C6822D8F87545") public static Bitmap extractThumbnail(Bitmap source,int width,int height,int options){  if (source == null) {    return null;  }  float scale;  if (source.getWidth() < source.getHeight()) {    scale=width / (float)source.getWidth();  } else {    scale=height / (float)source.getHeight();  }  Matrix matrix=new Matrix();  matrix.setScale(scale,scale);  Bitmap thumbnail=transform(matrix,source,width,height,OPTIONS_SCALE_UP | options);  return thumbnail;}  }
class C{  public void test_DivideBigDecimalRoundingModeHALF_UP(){  String a="3736186567876876578956958765675671119238118911893939591735";  String b="74723342238476237823787879183470";  RoundingMode rm=RoundingMode.HALF_UP;  String c="50000260373164286401361913";  BigDecimal aNumber=new BigDecimal(new BigInteger(a));  BigDecimal bNumber=new BigDecimal(new BigInteger(b));  BigDecimal result=aNumber.divide(bNumber,rm);  assertEquals("incorrect value",c,result.toString());}  }
class C{  public TermsBuilder shardSize(int shardSize){  bucketCountThresholds.setShardSize(shardSize);  return this;}  }
class C{  public void write(final PrintStream stream){  stream.print("time\ttime\tdepartures_all\tarrivals_all\tstuck_all\ten-route_all");  for (  String legMode : this.data.keySet()) {    stream.print("\tdepartures_" + legMode + "\tarrivals_"+ legMode+ "\tstuck_"+ legMode+ "\ten-route_"+ legMode);  }  stream.print("\n");  int allEnRoute=0;  int[] modeEnRoute=new int[this.data.size()];  for (int i=0; i < this.allModesData.countsDep.length; i++) {    allEnRoute=allEnRoute + this.allModesData.countsDep[i] - this.allModesData.countsArr[i] - this.allModesData.countsStuck[i];    stream.print(Time.writeTime(i * this.binSize) + "\t" + i * this.binSize);    stream.print("\t" + this.allModesData.countsDep[i] + "\t"+ this.allModesData.countsArr[i]+ "\t"+ this.allModesData.countsStuck[i]+ "\t"+ allEnRoute);    int mode=0;    for (    ModeData modeData : this.data.values()) {      modeEnRoute[mode]=modeEnRoute[mode] + modeData.countsDep[i] - modeData.countsArr[i] - modeData.countsStuck[i];      stream.print("\t" + modeData.countsDep[i] + "\t"+ modeData.countsArr[i]+ "\t"+ modeData.countsStuck[i]+ "\t"+ modeEnRoute[mode]);      mode++;    }    stream.print("\n");  }}  }
class C{  public static long hash64(final String text,int from,int length){  return hash64(text.substring(from,from + length));}  }
class C{  public RadioButton(Image icon){  this("",icon);}  }
class C{  protected boolean insertVertex(G graph,V vertex){  return graph.insertVertex(vertex);}  }
class C{  protected ObjectMatrix1D viewSelectionLike(int[] offsets){  return new SelectedSparseObjectMatrix1D(this.elements,offsets);}  }
class C{  public static GdsTypeRule excludes(String... excludedTypes){  final Set<String> excludedTypesSet=new HashSet<>(Arrays.asList(excludedTypes));  return new GdsTypeRule(not(isIn(excludedTypesSet)));}  }
class C{  public static <T,V>ObjectAnimator ofObject(T target,Property<T,V> property,TypeEvaluator<V> evaluator,V... values){  ObjectAnimator anim=new ObjectAnimator(target,property);  anim.setObjectValues(values);  anim.setEvaluator(evaluator);  return anim;}  }
class C{  public boolean contains(String str){  return indexOf(str,0) >= 0;}  }
class C{  public static Intent forgeIntentInvitation(Context ctx,Intent invitation){  invitation.setClass(ctx,GroupTalkView.class);  invitation.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK);  invitation.putExtra(GroupTalkView.EXTRA_MODE,GroupChatMode.INCOMING);  return invitation;}  }
class C{  private void processCharacter(StringBuilder sb,char nextChar){  if (escapechar != NO_ESCAPE_CHARACTER && (nextChar == quotechar || nextChar == escapechar)) {    sb.append(escapechar).append(nextChar);  } else {    sb.append(nextChar);  }}  }
class C{  public Configuration buildForServer(String hostname){  return new Builder(this).addServer(hostname).buildConfiguration();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:57.167 -0400",hash_original_method="4CB8AA7B1D906B7A66A8C8C627A8AF2C",hash_generated_method="868D92C22DE0D5C172D2A41DDB223CA7") protected DirectoryWalker(){  this(null,-1);}  }
class C{  public InstrumentHeader createInstrumentHeader(InstrumentType instrumentType,String instrumentNum,Double instrumentAmount,Date instrumentDate,String statusCode,User user){  InstrumentHeader instrumentHeader=createUnsavedInstrumentHeader(instrumentType,instrumentNum,instrumentAmount,instrumentDate,statusCode,user);  session.saveOrUpdate(instrumentHeader);  return instrumentHeader;}  }
class C{  @Override public void onSuccess(){  Log.v(TAG,"onSuccess, mEnlargedImage");  if (savedInstanceState == null) {    runEnteringAnimation();  } else {  }}  }
class C{  @RequestMapping(value="/account/contacts",method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_VALUE) @Timed @RolesAllowed(AuthoritiesConstants.USER) @Transactional public ResponseEntity<Void> createForUser(@RequestBody @Valid Contact contact) throws URISyntaxException {  log.debug("REST request to save Contact for account : {}",contact);  if (contact.getId() != null) {    return ResponseEntity.badRequest().header("Failure","A new contact cannot already have an ID").build();  }  final Contact saved=contactRepository.save(contact);  emailRepository.findAllForLogin(securityUtils.getCurrentLogin()).stream().forEach(null);  return ResponseEntity.created(new URI("/api/contacts/" + contact.getId())).build();}  }
class C{  public void describeCUI(Actor actor){  checkNotNull(actor);  if (!hasCUISupport) {    return;  }  if (selector instanceof CUIRegion) {    CUIRegion tempSel=(CUIRegion)selector;    if (tempSel.getProtocolVersion() > cuiVersion) {      tempSel.describeLegacyCUI(this,actor);    } else {      tempSel.describeCUI(this,actor);    }  }}  }
class C{  private void onFormatButtonClick(ToggleButton toggleButton,String tag){  Spannable s=mContentEditText.getText();  if (s == null)   return;  int selectionStart=mContentEditText.getSelectionStart();  mStyleStart=selectionStart;  int selectionEnd=mContentEditText.getSelectionEnd();  if (selectionStart > selectionEnd) {    int temp=selectionEnd;    selectionEnd=selectionStart;    selectionStart=temp;  }  Class styleClass=null;  if (tag.equals(TAG_FORMAT_BAR_BUTTON_STRONG) || tag.equals(TAG_FORMAT_BAR_BUTTON_EM))   styleClass=StyleSpan.class; else   if (tag.equals(TAG_FORMAT_BAR_BUTTON_UNDERLINE))   styleClass=WPUnderlineSpan.class; else   if (tag.equals(TAG_FORMAT_BAR_BUTTON_STRIKE))   styleClass=StrikethroughSpan.class; else   if (tag.equals(TAG_FORMAT_BAR_BUTTON_QUOTE))   styleClass=QuoteSpan.class;  if (styleClass == null)   return;  Object[] allSpans=s.getSpans(selectionStart,selectionEnd,styleClass);  boolean textIsSelected=selectionEnd > selectionStart;  if (mIsLocalDraft) {    boolean shouldAddSpan=true;    for (    Object span : allSpans) {      if (span instanceof StyleSpan) {        StyleSpan styleSpan=(StyleSpan)span;        if ((styleSpan.getStyle() == Typeface.BOLD && !tag.equals(TAG_FORMAT_BAR_BUTTON_STRONG)) || (styleSpan.getStyle() == Typeface.ITALIC && !tag.equals(TAG_FORMAT_BAR_BUTTON_EM))) {          continue;        }      }      if (!toggleButton.isChecked() && textIsSelected) {        s.removeSpan(span);        shouldAddSpan=false;        break;      } else       if (!toggleButton.isChecked()) {        Object[] spans=s.getSpans(mStyleStart - 1,mStyleStart,styleClass);        for (        Object removeSpan : spans) {          selectionStart=s.getSpanStart(removeSpan);          selectionEnd=s.getSpanEnd(removeSpan);          s.removeSpan(removeSpan);        }      }    }    if (shouldAddSpan) {      if (tag.equals(TAG_FORMAT_BAR_BUTTON_STRONG)) {        s.setSpan(new StyleSpan(android.graphics.Typeface.BOLD),selectionStart,selectionEnd,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);      } else       if (tag.equals(TAG_FORMAT_BAR_BUTTON_EM)) {        s.setSpan(new StyleSpan(android.graphics.Typeface.ITALIC),selectionStart,selectionEnd,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);      } else {        try {          s.setSpan(styleClass.newInstance(),selectionStart,selectionEnd,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);        } catch (        java.lang.InstantiationException e) {          AppLog.e(T.POSTS,e);        }catch (        IllegalAccessException e) {          AppLog.e(T.POSTS,e);        }      }    }  } else {    String startTag="<" + tag + ">";    String endTag="</" + tag + ">";    Editable content=mContentEditText.getText();    if (textIsSelected) {      content.insert(selectionStart,startTag);      content.insert(selectionEnd + startTag.length(),endTag);      toggleButton.setChecked(false);      mContentEditText.setSelection(selectionEnd + startTag.length() + endTag.length());    } else     if (toggleButton.isChecked()) {      content.insert(selectionStart,startTag);      mContentEditText.setSelection(selectionEnd + startTag.length());    } else     if (!toggleButton.isChecked()) {      content.insert(selectionEnd,endTag);      mContentEditText.setSelection(selectionEnd + endTag.length());    }  }}  }
class C{  public static void debug(Throwable t){  StringWriter writer=new StringWriter();  t.printStackTrace(new PrintWriter(writer));  String str=writer.toString();  if (str.endsWith("\n"))   str=str.substring(0,str.length() - 2);  debug(str);}  }
class C{  private void assertNamespaceIamRoleAuthorizationNotExist(NamespaceEntity namespaceEntity){  if (CollectionUtils.isNotEmpty(namespaceIamRoleAuthorizationDao.getNamespaceIamRoleAuthorizations(namespaceEntity))) {    throw new AlreadyExistsException(String.format("Namespace IAM role authorizations with namespace \"%s\" already exist",namespaceEntity.getCode()));  }}  }
class C{  public void sendNotModified(ChannelHandlerContext ctx){  FullHttpResponse response=new DefaultFullHttpResponse(HttpVersion.HTTP_1_1,HttpResponseStatus.NOT_MODIFIED);  setDateHeader(response);  ctx.writeAndFlush(response).addListener(ChannelFutureListener.CLOSE);}  }
class C{  void delete(String fileName) throws IOException {  send("DELE " + fileName);  readCode(226,250);}  }
class C{  public static List<TimeSynchronizationSample> createIntolerableSamples(final int count){  final List<TimeSynchronizationSample> samples=new ArrayList<>();  for (int i=1; i <= count; i++) {    samples.add(createTimeSynchronizationSample(TOLERATED_DEVIATION_START + i));  }  return samples;}  }
class C{  protected void buildRelationTableFields(ManagedClass managedClass,Attribute managedAttribute,LinkedList<Entity> intrinsicEntity,LinkedList<Attribute> intrinsicAttribute,boolean inverse,boolean isInherited,ForeignReferenceMapping mapping,TableDefinition table,List<DatabaseField> fkFields,List<DatabaseField> targetFields){  assert fkFields.size() > 0 && fkFields.size() == targetFields.size();  DatabaseField fkField;  DatabaseField targetField=null;  List<String> fkFieldNames=new ArrayList();  List<String> targetFieldNames=new ArrayList();  for (int index=0; index < fkFields.size(); index++) {    fkField=fkFields.get(index);    targetField=targetFields.get(index);    fkFieldNames.add(fkField.getNameDelimited(databasePlatform));    targetFieldNames.add(targetField.getNameDelimited(databasePlatform));    fkField=resolveDatabaseField(fkField,targetField);    setFieldToRelationTable(intrinsicEntity.get(0),intrinsicAttribute,managedAttribute,inverse,isInherited,fkField,table);  }  DatabaseTable targetTable=targetField.getTable();  TableDefinition targetTblDef=getTableDefFromDBTable(managedClass,managedAttribute,intrinsicEntity,targetTable);  if (mapping.getDescriptor().hasTablePerClassPolicy()) {    return;  }  if (mapping.getReferenceDescriptor().hasTablePerClassPolicy() && mapping.getReferenceDescriptor().getTablePerClassPolicy().hasChild()) {    return;  }  addForeignKeyConstraint(table,targetTblDef,fkFieldNames,targetFieldNames,mapping.isCascadeOnDeleteSetOnDatabase());}  }
class C{  public DestinationTable.Builder buildTemporaryTable(){  return new DestinationTable.Builder().datasetId(TEMP_DATASET_NAME).type(TableType.TABLE).name(getRandomTableName()).timeToLive(TEMP_TABLE_TTL).overwrite(overwrite);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void parsePackets(Thread thread){  try {    int eventType=parser.getEventType();    do {      if (eventType == XmlPullParser.START_TAG) {        int parserDepth=parser.getDepth();        ParsingExceptionCallback callback=connection.getParsingExceptionCallback();        if (parser.getName().equals("message")) {          Packet packet;          try {            packet=PacketParserUtils.parseMessage(parser);          } catch (          Exception e) {            String content=PacketParserUtils.parseContentDepth(parser,parserDepth);            UnparsablePacket message=new UnparsablePacket(content,e);            if (callback != null) {              callback.handleUnparsablePacket(message);            }            continue;          }          processPacket(packet);        } else         if (parser.getName().equals("iq")) {          IQ iq;          try {            iq=PacketParserUtils.parseIQ(parser,connection);          } catch (          Exception e) {            String content=PacketParserUtils.parseContentDepth(parser,parserDepth);            UnparsablePacket message=new UnparsablePacket(content,e);            if (callback != null) {              callback.handleUnparsablePacket(message);            }            continue;          }          processPacket(iq);        } else         if (parser.getName().equals("presence")) {          Presence presence;          try {            presence=PacketParserUtils.parsePresence(parser);          } catch (          Exception e) {            String content=PacketParserUtils.parseContentDepth(parser,parserDepth);            UnparsablePacket message=new UnparsablePacket(content,e);            if (callback != null) {              callback.handleUnparsablePacket(message);            }            continue;          }          processPacket(presence);        } else         if (parser.getName().equals("stream")) {          if ("jabber:client".equals(parser.getNamespace(null))) {            for (int i=0; i < parser.getAttributeCount(); i++) {              if (parser.getAttributeName(i).equals("id")) {                connectionID=parser.getAttributeValue(i);                if (!"1.0".equals(parser.getAttributeValue("","version"))) {                  releaseConnectionIDLock();                }              } else               if (parser.getAttributeName(i).equals("from")) {                connection.config.setServiceName(parser.getAttributeValue(i));              }            }          }        } else         if (parser.getName().equals("error")) {          throw new XMPPException(PacketParserUtils.parseStreamError(parser));        } else         if (parser.getName().equals("features")) {          parseFeatures(parser);        } else         if (parser.getName().equals("proceed")) {          connection.proceedTLSReceived();          resetParser();        } else         if (parser.getName().equals("failure")) {          String namespace=parser.getNamespace(null);          if ("urn:ietf:params:xml:ns:xmpp-tls".equals(namespace)) {            throw new Exception("TLS negotiation has failed");          } else           if ("http://jabber.org/protocol/compress".equals(namespace)) {            connection.streamCompressionDenied();          } else {            final Failure failure=PacketParserUtils.parseSASLFailure(parser);            processPacket(failure);            connection.getSASLAuthentication().authenticationFailed();          }        } else         if (parser.getName().equals("challenge")) {          String challengeData=parser.nextText();          processPacket(new Challenge(challengeData));          connection.getSASLAuthentication().challengeReceived(challengeData);        } else         if (parser.getName().equals("success")) {          processPacket(new Success(parser.nextText()));          connection.packetWriter.openStream();          resetParser();          connection.getSASLAuthentication().authenticated();        } else         if (parser.getName().equals("compressed")) {          connection.startStreamCompression();          resetParser();        }      } else       if (eventType == XmlPullParser.END_TAG) {        if (parser.getName().equals("stream")) {          connection.disconnect();        }      }      eventType=parser.next();    } while (!done && eventType != XmlPullParser.END_DOCUMENT && thread == readerThread);  } catch (  Exception e) {    if (!(done || connection.isSocketClosed())) {      connection.notifyConnectionError(e);    }  }}  }
class C{  void addTerm(MapBuilderTermType type,JClass jclass,String alias){  MapBuilderTerm newTerm=new MapBuilderTerm();  newTerm.type=type;  newTerm.jclass=jclass;  newTerm.alias=alias;  terms.add(newTerm);}  }
class C{  public void appendTextString(byte[] textString){  if (null == textString) {    throw new NullPointerException("Text-string is null.");  }  if (null == mData) {    mData=new byte[textString.length];    System.arraycopy(textString,0,mData,0,textString.length);  } else {    ByteArrayOutputStream newTextString=new ByteArrayOutputStream();    try {      newTextString.write(mData);      newTextString.write(textString);    } catch (    IOException e) {      Log.e(TAG,"exception thrown",e);      throw new NullPointerException("appendTextString: failed when write a new Text-string");    }    mData=newTextString.toByteArray();  }}  }
class C{  public void removeQuad(int index){  assert (index >= 0 && index < totalQuads_) : "removeQuadAtIndex: Invalid index";  int remaining=(totalQuads_ - 1) - index;  if (remaining > 0) {    arraycopyTexture(textureCoordinates,index + 1,textureCoordinates,index,remaining);    arraycopyVertex(vertexCoordinates,index + 1,vertexCoordinates,index,remaining);    if (withColorArray_) {      arraycopyColor(colors,index + 1,colors,index,remaining);    }  }  totalQuads_--;}  }
class C{  public List<String> orderedGroups(){  int groupCount=groupCount();  List<String> groups=new ArrayList<String>(groupCount);  for (int i=1; i <= groupCount; i++) {    groups.add(group(i));  }  return groups;}  }
class C{  public RadialLayoutTool(GraphModel layoutGraph,EdgeMatcher<String> edgeMatcher,int circumference){  super(layoutGraph,edgeMatcher);  this.circumference=circumference;  this.radiansPerLeaf=2.0 * Math.PI / this.circumference;}  }
class C{  public static ArrayList<Coords> intervening(Coords src,Coords dest){  return intervening(src,dest,false);}  }
class C{  protected static void recursiveBuild(int streamNum,Stack<Integer> streamCallStack,QueryGraph queryGraph,OuterInnerDirectionalGraph outerInnerGraph,InnerJoinGraph innerJoinGraph,Set<Integer> completedStreams,LinkedHashMap<Integer,int[]> substreamsPerStream,boolean[] requiredPerStream,DependencyGraph dependencyGraph) throws ExprValidationException {  completedStreams.add(streamNum);  if (dependencyGraph.hasDependency(streamNum)) {    Set<Integer> dependencies=dependencyGraph.getDependenciesForStream(streamNum);    for (    Integer dependentStream : dependencies) {      if (!streamCallStack.contains(dependentStream)) {        throw new ExprValidationException("Historical stream " + streamNum + " parameter dependency originating in stream "+ dependentStream+ " cannot or may not be satisfied by the join");      }    }  }  Set<Integer> navigableStreams=queryGraph.getNavigableStreams(streamNum);  Set<Integer> unqualifiedNavigable=outerInnerGraph.getUnqualifiedNavigableStreams().get(streamNum);  if (unqualifiedNavigable != null) {    navigableStreams.addAll(unqualifiedNavigable);  }  navigableStreams.removeAll(completedStreams);  Set<Integer> requiredStreams=getOuterStreams(streamNum,navigableStreams,outerInnerGraph);  innerJoinGraph.addRequiredStreams(streamNum,requiredStreams,completedStreams);  Set<Integer> optionalStreams=getInnerStreams(streamNum,navigableStreams,outerInnerGraph,innerJoinGraph,completedStreams);  requiredStreams.removeAll(optionalStreams);  if (navigableStreams.isEmpty()) {    substreamsPerStream.put(streamNum,new int[0]);    return;  }  int[] substreams=new int[requiredStreams.size() + optionalStreams.size()];  substreamsPerStream.put(streamNum,substreams);  int count=0;  for (  int stream : requiredStreams) {    substreams[count++]=stream;    requiredPerStream[stream]=true;  }  for (  int stream : optionalStreams) {    substreams[count++]=stream;  }  for (  int stream : requiredStreams) {    completedStreams.add(stream);  }  for (  int stream : requiredStreams) {    streamCallStack.push(stream);    recursiveBuild(stream,streamCallStack,queryGraph,outerInnerGraph,innerJoinGraph,completedStreams,substreamsPerStream,requiredPerStream,dependencyGraph);    streamCallStack.pop();  }  for (  int stream : optionalStreams) {    streamCallStack.push(stream);    recursiveBuild(stream,streamCallStack,queryGraph,outerInnerGraph,innerJoinGraph,completedStreams,substreamsPerStream,requiredPerStream,dependencyGraph);    streamCallStack.pop();  }}  }
class C{  public boolean sharesVariableWith(DefUse du){  return varName.equals(du.varName);}  }
class C{  public JAXBModifier(String contextPath){  super(contextPath);  this.outputFormat=new OutputFormat();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentgetelementbyid01.class,args);}  }
class C{  public void upsert(final String key,final Integer value){  final Integer currentValue=get(key);  if (null == currentValue) {    put(key,value);  } else {    put(key,currentValue + value);  }}  }
class C{  private void cancel(){  m_frame.setVisible(false);  m_frame.dispose();  System.exit(0);}  }
class C{  public int optInt(int index){  return this.optInt(index,0);}  }
class C{  public boolean isEditable(){  return editable;}  }
class C{  protected void sequence_ExtendedRuntimeEnvironment(ISerializationContext context,ExtendedRuntimeEnvironment semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,N4mfPackage.Literals.EXTENDED_RUNTIME_ENVIRONMENT__EXTENDED_RUNTIME_ENVIRONMENT) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4mfPackage.Literals.EXTENDED_RUNTIME_ENVIRONMENT__EXTENDED_RUNTIME_ENVIRONMENT));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getExtendedRuntimeEnvironmentAccess().getExtendedRuntimeEnvironmentProjectReferenceParserRuleCall_3_0(),semanticObject.getExtendedRuntimeEnvironment());  feeder.finish();}  }
class C{  boolean isSelected(int index){  if (eventType == ItemEvent.SELECTED && index == eventIndex) {    return true;  }  for (int i=0; i < selected.length; i++) {    if (selected[i] == index) {      return true;    }  }  return false;}  }
class C{  public Node(final String name,final InetAddress address,final int port){  this.name=name;  m_address=address;  this.port=port;}  }
class C{  @Override public boolean containsKey(Object key){  return _map.containsKey(unwrapKey(key));}  }
class C{  public long lonToPixel(double lon){  return (long)((lon + 180) / 360 * Math.pow(2,zoom) * 256);}  }
class C{  public static Main create(String propertiesFile){  Debug.init();  return new Main(configurePropertyHandler(propertiesFile));}  }
class C{  public Long incr(final byte[] key){  checkIsInMulti();  client.incr(key);  return client.getIntegerReply();}  }
class C{  public void finishReregister(){  buildFinalClassLoader();  callInitMethod("initPlugin",new Class[]{},new Object[]{},false);  callInitMethod("initGui",new Class[]{MainFrame.class},new Object[]{RapidMinerGUI.getMainFrame()},false);  callInitMethod("initFinalChecks",new Class[]{},new Object[]{},false);  callInitMethod("initPluginManager",new Class[]{},new Object[]{},false);}  }
class C{  public Map<Context,List<OutlierClassificationResult>> searchContextGivenOutliers(List<ContextualDatum> data,List<ContextualDatum> inputOutliers) throws Exception {  List<Context> result=new ArrayList<Context>();  if (inputOutliers == null || inputOutliers.size() == 0) {    log.info("There is no input outliers");    return context2Outliers;  }  Stopwatch sw=Stopwatch.createUnstarted();  log.debug("Find global context outliers on data num tuples: {} , MBs {} ",data.size());  sw.start();  HashSet<ContextualDatum> sample=randomSampling(data,100);  globalContext=new Context(sample,densityPruning,dependencyPruning,alpha);  List<Datum> globalOutliers=contextualOutlierDetection(data,globalContext);  if (globalOutliers != null && globalOutliers.contains(inputOutliers)) {    result.add(globalContext);  }  sw.stop();  long globalOutlierDetecionTime=sw.elapsed(TimeUnit.MILLISECONDS);  sw.reset();  log.debug("Done global context outlier remaining data size {} : (duration: {}ms)",data.size(),globalOutlierDetecionTime);  List<LatticeNode> preLatticeNodes=new ArrayList<LatticeNode>();  List<LatticeNode> curLatticeNodes=new ArrayList<LatticeNode>();  for (int level=1; level <= totalContextualDimensions; level++) {    if (level > maxPredicates)     break;    log.debug("Build {}-dimensional contexts on all attributes",level);    sw.start();    if (level == 1) {      curLatticeNodes=buildOneDimensionalLatticeNodesGivenOutliers(data,inputOutliers);    } else {      curLatticeNodes=levelUpLattice(preLatticeNodes,data);    }    sw.stop();    long latticeNodesBuildTimeCurLevel=sw.elapsed(TimeUnit.MILLISECONDS);    sw.reset();    log.debug("Done building {}-dimensional contexts on all attributes (duration: {}ms)",level,latticeNodesBuildTimeCurLevel);    log.debug("Memory Usage: {}",MemoryUtil.checkMemoryUsage());    if (curLatticeNodes.size() == 0) {      log.debug("No more dense contexts, thus no need to level up anymore");      break;    }    log.debug("Find {}-dimensional contextual outliers",level);    sw.start();    int numDenseContextsCurLevel=0;    for (    LatticeNode node : curLatticeNodes) {      for (      Context context : node.getDenseContexts()) {        List<Datum> outliers=contextualOutlierDetection(data,context);        if (outliers != null && outliers.containsAll(inputOutliers)) {          result.add(context);        }        numDenseContextsCurLevel++;      }    }    sw.stop();    long contextualOutlierDetectionTimeCurLevel=sw.elapsed(TimeUnit.MILLISECONDS);    sw.reset();    log.debug("Done Find {}-dimensional contextual outliers (duration: {}ms)",level,contextualOutlierDetectionTimeCurLevel);    log.debug("Done Find {}-dimensional contextual outliers, there are {} dense contexts(average duration per context: {}ms)",level,numDenseContextsCurLevel,(numDenseContextsCurLevel == 0) ? 0 : contextualOutlierDetectionTimeCurLevel / numDenseContextsCurLevel);    log.debug("Done Find {}-dimensional contextual outliers, densityPruning2: {}, " + "numOutlierDetectionRunsWithoutTrainingWithoutScoring: {},  " + "numOutlierDetectionRunsWithoutTrainingWithScoring: {},  "+ "numOutlierDetectionRunsWithTrainingWithScoring: {}",level,densityPruning2,numOutlierDetectionRunsWithoutTrainingWithoutScoring,numOutlierDetectionRunsWithoutTrainingWithScoring,numOutlierDetectionRunsWithTrainingWithScoring);    log.debug("----------------------------------------------------------");    if (level >= 2) {      for (      LatticeNode node : preLatticeNodes) {        for (        Context context : node.getDenseContexts()) {          context2BitSet.remove(context);        }      }    }    preLatticeNodes=curLatticeNodes;  }  Map<Context,List<OutlierClassificationResult>> context2OutlierClassifierGivenOutlier=new HashMap<>();  for (  Context context : result) {    context2OutlierClassifierGivenOutlier.put(context,context2Outliers.get(context));  }  return context2OutlierClassifierGivenOutlier;}  }
class C{  public SimpleDigitalOut(boolean b){  set(b);}  }
class C{  public void unsetSubject(){  this.subject=null;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static Iterable<Integer> range(final int min,final int max){  return range(min,max,1);}  }
class C{  public RendererState(PlotRenderingInfo info){  this.info=info;  this.elementHinting=false;}  }
class C{  public void updatePoiTypeLastUse(long id){  PoiType poiType=poiTypeDao.queryForId(id);  if (poiType != null) {    poiType.setLastUse(new DateTime());    Timber.d("Update date of : %s",poiType);    poiTypeDao.createOrUpdate(poiType);  }}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (isCashTrx() && !MSysConfig.getBooleanValue("CASH_AS_PAYMENT",true,getAD_Client_ID())) {    if (getC_CashBook_ID() <= 0) {      log.saveError("Error",Msg.parseTranslation(getCtx(),"@Mandatory@: @C_CashBook_ID@"));      return false;    }  } else {    if (getC_BankAccount_ID() <= 0) {      log.saveError("Error",Msg.parseTranslation(getCtx(),"@Mandatory@: @C_BankAccount_ID@"));      return false;    }  }  if (getC_Charge_ID() != 0) {    if (newRecord || is_ValueChanged("C_Charge_ID")) {      setC_Order_ID(0);      setC_Invoice_ID(0);      setWriteOffAmt(Env.ZERO);      setDiscountAmt(Env.ZERO);      setIsOverUnderPayment(false);      setOverUnderAmt(Env.ZERO);      setIsPrepayment(false);    }  } else   if (getC_BPartner_ID() == 0 && !isCashTrx()) {    if (getC_Invoice_ID() != 0)     ; else     if (getC_Order_ID() != 0)     ; else {      log.saveError("Error",Msg.parseTranslation(getCtx(),"@NotFound@: @C_BPartner_ID@"));      return false;    }  }  if (newRecord || is_ValueChanged("C_Charge_ID") || is_ValueChanged("C_Invoice_ID")|| is_ValueChanged("C_Order_ID")|| is_ValueChanged("C_Project_ID"))   setIsPrepayment(getC_Charge_ID() == 0 && getC_BPartner_ID() != 0 && (getC_Order_ID() != 0 || (getC_Project_ID() != 0 && getC_Invoice_ID() == 0)));  if (isPrepayment()) {    if (newRecord || is_ValueChanged("C_Order_ID") || is_ValueChanged("C_Project_ID")) {      setWriteOffAmt(Env.ZERO);      setDiscountAmt(Env.ZERO);      setIsOverUnderPayment(false);      setOverUnderAmt(Env.ZERO);    }  }  if (getC_DocType_ID() == 0)   setC_DocType_ID(); else {    MDocType dt=MDocType.get(getCtx(),getC_DocType_ID());    setIsReceipt(dt.isSOTrx());  }  setDocumentNo();  if (getDateAcct() == null)   setDateAcct(getDateTrx());  if (!isOverUnderPayment())   setOverUnderAmt(Env.ZERO);  if ((newRecord || is_ValueChanged("C_BankAccount_ID")) && getC_Charge_ID() == 0) {    MBankAccount ba=MBankAccount.get(getCtx(),getC_BankAccount_ID());    if (ba.getAD_Org_ID() != 0)     setAD_Org_ID(ba.getAD_Org_ID());  }  if (getC_BPartner_ID() != 0 && (getC_Invoice_ID() != 0 || getC_Order_ID() != 0)) {    if (getC_Invoice_ID() != 0) {      MInvoice inv=new MInvoice(getCtx(),getC_Invoice_ID(),get_TrxName());      if (inv.getC_BPartner_ID() != getC_BPartner_ID()) {        log.saveError("Error",Msg.parseTranslation(getCtx(),"BP different from BP Invoice"));        return false;      }    }    if (getC_Order_ID() != 0) {      MOrder ord=new MOrder(getCtx(),getC_Order_ID(),get_TrxName());      if (ord.getC_BPartner_ID() != getC_BPartner_ID()) {        log.saveError("Error",Msg.parseTranslation(getCtx(),"BP different from BP Order"));        return false;      }    }  }  return true;}  }
class C{  private void processUnprocessed(){  boolean clean_processings=Boolean.getBoolean("Archive.processings.clean");  logger.info("Archives processing clean instead of recovery " + "(Archive.processings.clean) requested by user (" + clean_processings + ")");  productService.processUnprocessed(!clean_processings);}  }
class C{  public String replace(String text){  String value=System.getenv(text);  if (value != null) {    return value;  }  if (filter != null) {    return filter.replace(text);  }  return null;}  }
class C{  public MultiPixelPackedSampleModel(int dataType,int w,int h,int numberOfBits,int scanlineStride,int dataBitOffset){  super(dataType,w,h,1);  if (dataType != DataBuffer.TYPE_BYTE && dataType != DataBuffer.TYPE_USHORT && dataType != DataBuffer.TYPE_INT) {    throw new IllegalArgumentException("Unsupported data type " + dataType);  }  this.dataType=dataType;  this.pixelBitStride=numberOfBits;  this.scanlineStride=scanlineStride;  this.dataBitOffset=dataBitOffset;  this.dataElementSize=DataBuffer.getDataTypeSize(dataType);  this.pixelsPerDataElement=dataElementSize / numberOfBits;  if (pixelsPerDataElement * numberOfBits != dataElementSize) {    throw new RasterFormatException("MultiPixelPackedSampleModel " + "does not allow pixels to " + "span data element boundaries");  }  this.bitMask=(1 << numberOfBits) - 1;}  }
class C{  public static <K,V>Map<K,V> synchronizedMap(Map<K,V> map){  if (map == null) {    throw new NullPointerException("map == null");  }  return new SynchronizedMap<K,V>(map);}  }
class C{  public boolean ge(DD y){  return (hi > y.hi) || (hi == y.hi && lo >= y.lo);}  }
class C{  public void put(int key,int value){  if (key == 0) {    zeroKey=true;    zeroValue=value;    return;  }  checkSizePut();  internalPut(key,value);}  }
class C{  private boolean shouldImport(Generator gen,Type type){  final DependencyManager mgr=gen.getDependencyMgr();  final String typeName=stripGenerics(type.getTypeName());  if (mgr.isIgnored(typeName)) {    return false;  }  if (mgr.isLoaded(typeName)) {    return false;  }  final Optional<String> current=mgr.getCurrentPackage();  final Optional<String> suggested=packageName(typeName);  return !(current.isPresent() && suggested.isPresent() && current.get().equals(suggested.get()));}  }
class C{  private void validateViPRServiceDown(){  for (  String serviceName : serviceNames) {    boolean isRunning=isServiceRunning(serviceName);    if (isRunning) {      log.info("{} is still running",serviceName);      throw new IllegalStateException(serviceName + " is running");    }  }  log.info(String.format(OUTPUT_FORMAT,"ViPR service down validation",Validation.passed.name()));}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void showContent(){  mSlidingMenu.showContent();}  }
class C{  public boolean sync(){  if (ulog == null) {    return false;  }  log.info(msg() + "START replicas=" + replicas+ " nUpdates="+ nUpdates);  if (!(ulog.getState() == UpdateLog.State.ACTIVE || ulog.getState() == UpdateLog.State.REPLAYING)) {    log.error(msg() + "ERROR, update log not in ACTIVE or REPLAY state. " + ulog);  }  if (debug) {    if (startingVersions != null) {      log.debug(msg() + "startingVersions=" + startingVersions.size()+ " "+ startingVersions);    }  }  for (  String replica : replicas) {    requestVersions(replica);  }  recentUpdates=ulog.getRecentUpdates();  try {    ourUpdates=recentUpdates.getVersions(nUpdates);  }  finally {    recentUpdates.close();  }  Collections.sort(ourUpdates,absComparator);  if (startingVersions != null) {    if (startingVersions.size() == 0) {      log.warn("no frame of reference to tell if we've missed updates");      return false;    }    Collections.sort(startingVersions,absComparator);    ourLowThreshold=percentile(startingVersions,0.8f);    ourHighThreshold=percentile(startingVersions,0.2f);    long smallestNewUpdate=Math.abs(ourUpdates.get(ourUpdates.size() - 1));    if (Math.abs(startingVersions.get(0)) < smallestNewUpdate) {      log.warn(msg() + "too many updates received since start - startingUpdates no longer overlaps with our currentUpdates");      return false;    }    List<Long> newList=new ArrayList<>(ourUpdates);    for (    Long ver : startingVersions) {      if (Math.abs(ver) < smallestNewUpdate) {        newList.add(ver);      }    }    ourUpdates=newList;  } else {    if (ourUpdates.size() > 0) {      ourLowThreshold=percentile(ourUpdates,0.8f);      ourHighThreshold=percentile(ourUpdates,0.2f);    } else {      log.info(msg() + "DONE.  We have no versions.  sync failed.");      return false;    }  }  ourUpdateSet=new HashSet<>(ourUpdates);  requestedUpdateSet=new HashSet<>(ourUpdates);  for (; ; ) {    ShardResponse srsp=shardHandler.takeCompletedOrError();    if (srsp == null)     break;    boolean success=handleResponse(srsp);    if (!success) {      log.info(msg() + "DONE. sync failed");      shardHandler.cancelAll();      return false;    }  }  log.info(msg() + "DONE. sync succeeded");  return true;}  }
class C{  public AverageLinkDissimilarity(DistanceMetric dm){  super(dm);}  }
class C{  public static String stripXMLEntities(String text){  return stripHTMLEntities(text,' ');}  }
class C{  @Override public void updateArray(int columnIndex,Array x) throws SQLException {  throw unsupported("setArray");}  }
class C{  public static long parseDate(String dateString){  return HttpDateTime.parse(dateString);}  }
class C{  private void close(){  try {    in.close();  } catch (  Exception e) {  }  try {    out.close();  } catch (  Exception e) {  }}  }
class C{  static int applyMaskPenaltyRule4(ByteMatrix matrix){  int numDarkCells=0;  byte[][] array=matrix.getArray();  int width=matrix.getWidth();  int height=matrix.getHeight();  for (int y=0; y < height; y++) {    byte[] arrayY=array[y];    for (int x=0; x < width; x++) {      if (arrayY[x] == 1) {        numDarkCells++;      }    }  }  int numTotalCells=matrix.getHeight() * matrix.getWidth();  int fivePercentVariances=Math.abs(numDarkCells * 2 - numTotalCells) * 10 / numTotalCells;  return fivePercentVariances * N4;}  }
class C{  public static void addListener(IgnitionListener lsnr){  IgnitionEx.addListener(lsnr);}  }
class C{  void close(MultiplexedSocket multiplexed){  multiplexingXXXSocketSupport.close(multiplexed);}  }
class C{  public boolean isSubmittdBySctyHldr(){  return submittdBySctyHldr;}  }
class C{  public Object nextValue() throws JSONException {  int c=nextCleanInternal();switch (c) {case -1:    throw syntaxError("End of input");case '{':  return readObject();case '[':return readArray();case '\'':case '"':return nextString((char)c);default :pos--;return readLiteral();}}  }
class C{  public ProjectDependencyScope createProjectDependencyScopeFromString(EDataType eDataType,String initialValue){  ProjectDependencyScope result=ProjectDependencyScope.get(initialValue);  if (result == null)   throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '"+ eDataType.getName()+ "'");  return result;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Agent a=(Agent)stack.pop();  return (a == null) ? "" : a.getKeyword();}  }
class C{  public CroutonView(Context context,String text){  super(context);  if (!isInEditMode()) {    init(context,text);  }}  }
class C{  public Matrix arrayTimes(Matrix B){  checkMatrixDimensions(B);  Matrix X=new Matrix(m,n);  double[][] C=X.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      C[i][j]=A[i][j] * B.A[i][j];    }  }  return X;}  }
class C{  public boolean containsValue(long val){  byte[] states=_states;  long[] vals=_values;  for (int i=vals.length; i-- > 0; ) {    if (states[i] == FULL && val == vals[i]) {      return true;    }  }  return false;}  }
class C{  public void dumpPTAForContext(PrintStream file,Context ptaContext){  for (  IVarAbstraction pn : ptsProvider.pointers) {    CgEdge context=(CgEdge)ptaContext;    IVarAbstraction orig=pn;    pn=pn.getRepresentative();    Node val=pn.getWrappedNode();    if (val instanceof LocalVarNode) {      LocalVarNode lvn=(LocalVarNode)val;      SootMethod sm=lvn.getMethod();      long l=context.map_offset;      long r=l + ptsProvider.max_context_size_block[context.s];      file.printf("%s: %s \n",sm,val);      Obj_1cfa_extractor contextObjsVisitor=new Obj_1cfa_extractor();      pn.get_all_context_sensitive_objects(l,r,contextObjsVisitor);      for (      ContextVar cobj : contextObjsVisitor.outList) {        if (cobj != null && cobj.var != null)         file.printf("%s: %s\n",cobj.var.getClass(),cobj.var); else         file.printf("%s: %s\n",cobj,"No Var");      }    } else {      Obj_1cfa_extractor contextObjsVisitor=new Obj_1cfa_extractor();      pn.get_all_context_sensitive_objects(1,soot.jimple.spark.geom.geomPA.Constants.MAX_CONTEXTS,contextObjsVisitor);      for (      ContextVar cobj : contextObjsVisitor.outList) {        if (cobj != null)         file.print(" " + cobj.getNumber());      }      file.println();    }    file.println();  }  file.print("======================= dumpPTA () Done =====================================\n");}  }
class C{  private void checkSerialization(KerberosHadoopFileSystemFactory fac) throws Exception {  ByteArrayOutputStream baos=new ByteArrayOutputStream();  ObjectOutput oo=new ObjectOutputStream(baos);  oo.writeObject(fac);  ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(baos.toByteArray()));  KerberosHadoopFileSystemFactory fac2=(KerberosHadoopFileSystemFactory)in.readObject();  assertEquals(fac.getUri(),fac2.getUri());  Assert.assertArrayEquals(fac.getConfigPaths(),fac2.getConfigPaths());  assertEquals(fac.getKeyTab(),fac2.getKeyTab());  assertEquals(fac.getKeyTabPrincipal(),fac2.getKeyTabPrincipal());  assertEquals(fac.getReloginInterval(),fac2.getReloginInterval());}  }
class C{  @GuardedBy("lock") private void cleanState(){  long eventTime=timeSource.get();  long bucketsToSkip=(eventTime - headTime) / window.getResolution();  while (bucketsToSkip > 0) {    headIndex=(headIndex + 1) % interimValues.length;    bucketsToSkip--;    overallValue-=interimValues[headIndex];    interimValues[headIndex]=0L;    headTime+=window.getResolution();  }}  }
class C{  private void updateSyncDriveSummary(){  String googleAccount=PreferencesUtils.getString(this,R.string.google_account_key,PreferencesUtils.GOOGLE_ACCOUNT_DEFAULT);  boolean hasAccount=!PreferencesUtils.GOOGLE_ACCOUNT_DEFAULT.equals(googleAccount);  syncDrivePreference.setSummaryOn(hasAccount ? getString(R.string.settings_google_drive_sync_summary_on,googleAccount) : "");}  }
class C{  public void resetFileFilters(){  JFileChooser embeddedEditor=(JFileChooser)m_fileEditor.getCustomEditor();  embeddedEditor.resetChoosableFileFilters();}  }
class C{  public void write(int c){  if (text != null) {    text.append(String.valueOf((char)c));    if (++col > wrap)     println();  } else   super.write(c);}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  private static int readCode(boolean[] rawbits,int startIndex,int length){  int res=0;  for (int i=startIndex; i < startIndex + length; i++) {    res<<=1;    if (rawbits[i]) {      res++;    }  }  return res;}  }
class C{  private void createRecentFileMenu(){  String[] recentFiles=PrefManager.get().getRecentFiles();  recentFilesMenu=new JMenu(ResourceManager.translate("file.recentfiles"));  recentFilesMenu.setMnemonic(KeyStroke.getKeyStroke(ResourceManager.translate("file.recentfiles.mnem")).getKeyCode());  if (recentFiles.length > 1) {    for (int i=1; i < recentFiles.length; i++) {      if (!recentFiles[i].equals("")) {        JMenuItem item=new JMenuItem(recentFiles[i]);        ((JMenu)recentFilesMenu).add(item);        item.addActionListener(listener);      }    }  } else {    recentFilesMenu.setEnabled(false);  }}  }
class C{  @Override public boolean isFactoryForType(Object object){  if (object == modelPackage) {    return true;  }  if (object instanceof EObject) {    return ((EObject)object).eClass().getEPackage() == modelPackage;  }  return false;}  }
class C{  public static Key<Cursor> createGlobalKey(CursorType cursorType){  checkArgument(cursorType.getScopeClass().equals(EntityGroupRoot.class),"Cursor type is not a global cursor.");  return Key.create(getCrossTldKey(),Cursor.class,generateId(cursorType,EntityGroupRoot.getCrossTldKey()));}  }
class C{  public void init(final int dims){  upstairs=new Dataset(dims);  downstairs=new Dataset(2);  fireProjectorDataChanged();}  }
class C{  public static char binaryToHexDigitMsb0_4bits(final boolean[] src,final int srcPos){  if (src.length > 8) {    throw new IllegalArgumentException("src.length>8: src.length=" + src.length);  }  if (src.length - srcPos < 4) {    throw new IllegalArgumentException("src.length-srcPos<4: src.length=" + src.length + ", srcPos="+ srcPos);  }  if (src[srcPos + 3]) {    if (src[srcPos + 2]) {      if (src[srcPos + 1]) {        return src[srcPos] ? 'f' : '7';      }      return src[srcPos] ? 'b' : '3';    }    if (src[srcPos + 1]) {      return src[srcPos] ? 'd' : '5';    }    return src[srcPos] ? '9' : '1';  }  if (src[srcPos + 2]) {    if (src[srcPos + 1]) {      return src[srcPos] ? 'e' : '6';    }    return src[srcPos] ? 'a' : '2';  }  if (src[srcPos + 1]) {    return src[srcPos] ? 'c' : '4';  }  return src[srcPos] ? '8' : '0';}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected void assertAddress(Address actual,Address expected){  assertThat(actual,is(not(nullValue())));  assertThat(actual.getStreet(),is(expected.getStreet()));  assertThat(actual.getHouseNumber(),is(expected.getHouseNumber()));  assertThat(actual.getPostalCode(),is(expected.getPostalCode()));  assertThat(actual.getCity(),is(expected.getCity()));  assertThat(actual.getCountry(),is(expected.getCountry()));}  }
class C{  public void testNewClassLoaderHotRedeploymentContinuousMode() throws Exception {  processTestClassLoaderHotRedeployment(DeploymentMode.CONTINUOUS);}  }
class C{  protected void reportException(String methodCall,SQLException exception){  log.exceptionOccured(this,methodCall,exception,null,-1L);}  }
class C{  public void checkDNSRBL(SMTPSession session,String ipAddress){  if (session.isRelayingAllowed()) {    session.getLogger().info("Ipaddress " + session.getRemoteAddress().getAddress() + " is allowed to relay. Don't check it");    return;  }  if (whitelist != null || blacklist != null) {    StringBuffer sb=new StringBuffer();    StringTokenizer st=new StringTokenizer(ipAddress," .",false);    while (st.hasMoreTokens()) {      sb.insert(0,st.nextToken() + ".");    }    String reversedOctets=sb.toString();    if (whitelist != null) {      String[] rblList=whitelist;      for (      String rbl : rblList) {        if (resolve(reversedOctets + rbl)) {          if (session.getLogger().isInfoEnabled()) {            session.getLogger().info("Connection from " + ipAddress + " whitelisted by "+ rbl);          }          return;        } else {          if (session.getLogger().isDebugEnabled()) {            session.getLogger().debug("IpAddress " + session.getRemoteAddress().getAddress() + " not listed on "+ rbl);          }        }      }    }    if (blacklist != null) {      String[] rblList=blacklist;      for (      String rbl : rblList) {        if (resolve(reversedOctets + rbl)) {          if (session.getLogger().isInfoEnabled()) {            session.getLogger().info("Connection from " + ipAddress + " restricted by "+ rbl+ " to SMTP AUTH/postmaster/abuse.");          }          if (getDetail) {            Collection<String> txt=resolveTXTRecords(reversedOctets + rbl);            if (!txt.isEmpty()) {              String blocklistedDetail=txt.iterator().next().toString();              session.setAttachment(RBL_DETAIL_MAIL_ATTRIBUTE_NAME,blocklistedDetail,State.Connection);            }          }          session.setAttachment(RBL_BLOCKLISTED_MAIL_ATTRIBUTE_NAME,"true",State.Connection);          return;        } else {          if (session.getLogger().isDebugEnabled()) {            session.getLogger().debug("unknown host exception thrown:" + rbl);          }        }      }    }  }}  }
class C{  public void removeListener(final IViewListener listener){  viewListeners.removeListener(listener);}  }
class C{  public static Object popParameterObject(){  return parametersObject.pop();}  }
class C{  private void checkFailure(Exec.Result result,String prefix) throws LocalRepositoryException {  if (!result.exitedNormally() || result.getExitValue() != _SYSTOOL_SUCCESS) {    _log.info(prefix + " failed. Result exit value: " + result.getExitValue());    if (result.getExitValue() == _SYSTOOL_DEVKIT_ERROR) {      throw SyssvcException.syssvcExceptions.localRepoError("Command failed since executed not on an appliance");    } else {      throw SyssvcException.syssvcExceptions.localRepoError(prefix + "Command failed: " + result);    }  }  _log.info(prefix + "Success!");}  }
class C{  @SuppressLint("NewApi") private boolean checkIfMaximumBitmapExceed(Canvas canvas){  Log_OC.v(TAG,"Canvas maximum: " + canvas.getMaximumBitmapWidth() + " - "+ canvas.getMaximumBitmapHeight());  return mBitmapWidth > canvas.getMaximumBitmapWidth() || mBitmapHeight > canvas.getMaximumBitmapHeight();}  }
class C{  private void handleHtmlShowRestoreDbBackupCommand(RequestAndResponse requestAndResponse) throws IOException, ServletException {  final String title=servletText.pageTitleRestoreBackupCommandDb();  if (addTitle(requestAndResponse,title)) {    return;  }  final PageWrapper pageWrapper=new PageWrapper(requestAndResponse,title,true);  pageWrapper.addHeader();  if (!isUserAnAdmin(requestAndResponse)) {    requestAndResponse.print(servletText.errorPageNotAllowed());  } else {    final String name=requestAndResponse.getParameter("name");    if (name == null) {      requestAndResponse.print(servletText.errorNoNameSpecifiedForRestoration());    } else {      final File source=new File(new File(dbLogic.getDbDirectory().getParent(),"backups"),name);      boolean isOnlineBackup=false;      final File[] listOfFiles=source.listFiles();      if (listOfFiles != null) {        for (int i=0; i < listOfFiles.length; i++) {          if (listOfFiles[i].getName().endsWith(".csv")) {            isOnlineBackup=true;            break;          }        }      }      String cmd=null;      if (isOnlineBackup) {        cmd="DELETE * FROM USR;\n";        cmd+="DELETE * FROM ENTRY;\n";        cmd+="INSERT INTO USR SELECT * FROM CSVREAD('" + (source.getAbsolutePath() + File.separator).replace("\\","\\\\") + "usr.csv');\n";        cmd+="INSERT INTO ENTRY SELECT * FROM CSVREAD('" + (source.getAbsolutePath() + File.separator).replace("\\","\\\\") + "entry.csv');";      } else {        final String destination=dbLogic.getDbDirectory().getAbsolutePath();        cmd=CommandLineUtil.getArgsForCopyAndPaste(CommandLineUtil.getRmDirArgs(destination)) + " && " + CommandLineUtil.getArgsForCopyAndPaste(CommandLineUtil.getCopyDirectoryArgs(source.getAbsolutePath(),destination));      }      String htmlCmd=StringEscapeUtils.escapeHtml4(cmd);      htmlCmd=htmlCmd.replace("\n","<br><br>");      requestAndResponse.print(servletText.sentenceCmdForDbRestore() + "<br><br>" + htmlCmd);    }  }  pageWrapper.addFooter();}  }
class C{  public void resetCache(){  super.resetCache();  Debug.message("rpf","RpfFrameCacheHandler: reset frame cache.");}  }
class C{  public synchronized boolean compile(String argv[]){  String sourcePathArg=null;  String classPathArg=null;  String sysClassPathArg=null;  String extDirsArg=null;  boolean verbosePath=false;  String targetArg=null;  short majorVersion=JAVA_DEFAULT_VERSION;  short minorVersion=JAVA_DEFAULT_MINOR_VERSION;  File destDir=null;  File covFile=null;  String optJcov="-Xjcov";  String optJcovFile="-Xjcov:file=";  int flags=F_WARNINGS | F_DEBUG_LINES | F_DEBUG_SOURCE;  long tm=System.currentTimeMillis();  Vector v=new Vector();  boolean nowrite=false;  String props=null;  String encoding=null;  String prior_g=null;  String prior_O=null;  exitStatus=EXIT_OK;  try {    argv=CommandLine.parse(argv);  } catch (  FileNotFoundException e) {    error("javac.err.cant.read",e.getMessage());    System.exit(1);  }catch (  IOException e) {    e.printStackTrace();    System.exit(1);  }  for (int i=0; i < argv.length; i++) {    if (argv[i].equals("-g")) {      if (prior_g != null && !(prior_g.equals("-g")))       error("main.conflicting.options",prior_g,"-g");      prior_g="-g";      flags|=F_DEBUG_LINES;      flags|=F_DEBUG_VARS;      flags|=F_DEBUG_SOURCE;    } else     if (argv[i].equals("-g:none")) {      if (prior_g != null && !(prior_g.equals("-g:none")))       error("main.conflicting.options",prior_g,"-g:none");      prior_g="-g:none";      flags&=~F_DEBUG_LINES;      flags&=~F_DEBUG_VARS;      flags&=~F_DEBUG_SOURCE;    } else     if (argv[i].startsWith("-g:")) {      if (prior_g != null && !(prior_g.equals(argv[i])))       error("main.conflicting.options",prior_g,argv[i]);      prior_g=argv[i];      String args=argv[i].substring("-g:".length());      flags&=~F_DEBUG_LINES;      flags&=~F_DEBUG_VARS;      flags&=~F_DEBUG_SOURCE;      while (true) {        if (args.startsWith("lines")) {          flags|=F_DEBUG_LINES;          args=args.substring("lines".length());        } else         if (args.startsWith("vars")) {          flags|=F_DEBUG_VARS;          args=args.substring("vars".length());        } else         if (args.startsWith("source")) {          flags|=F_DEBUG_SOURCE;          args=args.substring("source".length());        } else {          error("main.bad.debug.option",argv[i]);          usage_error();          return false;        }        if (args.length() == 0)         break;        if (args.startsWith(","))         args=args.substring(",".length());      }    } else     if (argv[i].equals("-O")) {      if (prior_O != null && !(prior_O.equals("-O")))       error("main.conflicting.options",prior_O,"-O");      prior_O="-O";    } else     if (argv[i].equals("-nowarn")) {      flags&=~F_WARNINGS;    } else     if (argv[i].equals("-deprecation")) {      flags|=F_DEPRECATION;    } else     if (argv[i].equals("-verbose")) {      flags|=F_VERBOSE;    } else     if (argv[i].equals("-nowrite")) {      nowrite=true;    } else     if (argv[i].equals("-classpath")) {      if ((i + 1) < argv.length) {        if (classPathArg != null) {          error("main.option.already.seen","-classpath");        }        classPathArg=argv[++i];      } else {        error("main.option.requires.argument","-classpath");        usage_error();        return false;      }    } else     if (argv[i].equals("-sourcepath")) {      if ((i + 1) < argv.length) {        if (sourcePathArg != null) {          error("main.option.already.seen","-sourcepath");        }        sourcePathArg=argv[++i];      } else {        error("main.option.requires.argument","-sourcepath");        usage_error();        return false;      }    } else     if (argv[i].equals("-sysclasspath")) {      if ((i + 1) < argv.length) {        if (sysClassPathArg != null) {          error("main.option.already.seen","-sysclasspath");        }        sysClassPathArg=argv[++i];      } else {        error("main.option.requires.argument","-sysclasspath");        usage_error();        return false;      }    } else     if (argv[i].equals("-bootclasspath")) {      if ((i + 1) < argv.length) {        if (sysClassPathArg != null) {          error("main.option.already.seen","-bootclasspath");        }        sysClassPathArg=argv[++i];      } else {        error("main.option.requires.argument","-bootclasspath");        usage_error();        return false;      }    } else     if (argv[i].equals("-extdirs")) {      if ((i + 1) < argv.length) {        if (extDirsArg != null) {          error("main.option.already.seen","-extdirs");        }        extDirsArg=argv[++i];      } else {        error("main.option.requires.argument","-extdirs");        usage_error();        return false;      }    } else     if (argv[i].equals("-encoding")) {      if ((i + 1) < argv.length) {        if (encoding != null)         error("main.option.already.seen","-encoding");        encoding=argv[++i];      } else {        error("main.option.requires.argument","-encoding");        usage_error();        return false;      }    } else     if (argv[i].equals("-target")) {      if ((i + 1) < argv.length) {        if (targetArg != null)         error("main.option.already.seen","-target");        targetArg=argv[++i];        int j;        for (j=0; j < releases.length; j++) {          if (releases[j].equals(targetArg)) {            majorVersion=majorVersions[j];            minorVersion=minorVersions[j];            break;          }        }        if (j == releases.length) {          error("main.unknown.release",targetArg);          usage_error();          return false;        }      } else {        error("main.option.requires.argument","-target");        usage_error();        return false;      }    } else     if (argv[i].equals("-d")) {      if ((i + 1) < argv.length) {        if (destDir != null)         error("main.option.already.seen","-d");        destDir=new File(argv[++i]);        if (!destDir.exists()) {          error("main.no.such.directory",destDir.getPath());          usage_error();          return false;        }      } else {        error("main.option.requires.argument","-d");        usage_error();        return false;      }    } else     if (argv[i].equals(optJcov)) {      flags|=F_COVERAGE;      flags&=~F_OPT;      flags&=~F_OPT_INTERCLASS;    } else     if ((argv[i].startsWith(optJcovFile)) && (argv[i].length() > optJcovFile.length())) {      covFile=new File(argv[i].substring(optJcovFile.length()));      flags&=~F_OPT;      flags&=~F_OPT_INTERCLASS;      flags|=F_COVERAGE;      flags|=F_COVDATA;    } else     if (argv[i].equals("-XO")) {      if (prior_O != null && !(prior_O.equals("-XO")))       error("main.conflicting.options",prior_O,"-XO");      prior_O="-XO";      flags|=F_OPT;    } else     if (argv[i].equals("-Xinterclass")) {      if (prior_O != null && !(prior_O.equals("-Xinterclass")))       error("main.conflicting.options",prior_O,"-Xinterclass");      prior_O="-Xinterclass";      flags|=F_OPT;      flags|=F_OPT_INTERCLASS;      flags|=F_DEPENDENCIES;    } else     if (argv[i].equals("-Xdepend")) {      flags|=F_DEPENDENCIES;    } else     if (argv[i].equals("-Xdebug")) {      flags|=F_DUMP;    } else     if (argv[i].equals("-xdepend") || argv[i].equals("-Xjws")) {      flags|=F_PRINT_DEPENDENCIES;      if (out == System.err) {        out=System.out;      }    } else     if (argv[i].equals("-Xstrictdefault")) {      flags|=F_STRICTDEFAULT;    } else     if (argv[i].equals("-Xverbosepath")) {      verbosePath=true;    } else     if (argv[i].equals("-Xstdout")) {      out=System.out;    } else     if (argv[i].equals("-X")) {      error("main.unsupported.usage");      return false;    } else     if (argv[i].equals("-Xversion1.2")) {      flags|=F_VERSION12;    } else     if (argv[i].endsWith(".java")) {      v.addElement(argv[i]);    } else {      error("main.no.such.option",argv[i]);      usage_error();      return false;    }  }  if (v.size() == 0 || exitStatus == EXIT_CMDERR) {    usage_error();    return false;  }  BatchEnvironment env=BatchEnvironment.create(out,sourcePathArg,classPathArg,sysClassPathArg,extDirsArg);  if (verbosePath) {    output(getText("main.path.msg",env.sourcePath.toString(),env.binaryPath.toString()));  }  env.flags|=flags;  env.majorVersion=majorVersion;  env.minorVersion=minorVersion;  env.covFile=covFile;  env.setCharacterEncoding(encoding);  String noMemoryErrorString=getText("main.no.memory");  String stackOverflowErrorString=getText("main.stack.overflow");  env.error(0,"warn.class.is.deprecated","sun.tools.javac.Main");  try {    for (Enumeration e=v.elements(); e.hasMoreElements(); ) {      File file=new File((String)e.nextElement());      try {        env.parseFile(new ClassFile(file));      } catch (      FileNotFoundException ee) {        env.error(0,"cant.read",file.getPath());        exitStatus=EXIT_CMDERR;      }    }    for (Enumeration e=env.getClasses(); e.hasMoreElements(); ) {      ClassDeclaration c=(ClassDeclaration)e.nextElement();      if (c.getStatus() == CS_PARSED) {        if (c.getClassDefinition().isLocal())         continue;        try {          c.getClassDefinition(env);        } catch (        ClassNotFound ee) {        }      }    }    ByteArrayOutputStream buf=new ByteArrayOutputStream(4096);    boolean done;    do {      done=true;      env.flushErrors();      for (Enumeration e=env.getClasses(); e.hasMoreElements(); ) {        ClassDeclaration c=(ClassDeclaration)e.nextElement();        SourceClass src;switch (c.getStatus()) {case CS_UNDEFINED:          if (!env.dependencies()) {            break;          }case CS_SOURCE:        if (tracing)         env.dtEvent("Main.compile (SOURCE): loading, " + c);      done=false;    env.loadDefinition(c);  if (c.getStatus() != CS_PARSED) {    if (tracing)     env.dtEvent("Main.compile (SOURCE): not parsed, " + c);    break;  }case CS_PARSED:if (c.getClassDefinition().isInsideLocal()) {  if (tracing)   env.dtEvent("Main.compile (PARSED): skipping local class, " + c);  continue;}done=false;if (tracing) env.dtEvent("Main.compile (PARSED): checking, " + c);src=(SourceClass)c.getClassDefinition(env);src.check(env);c.setDefinition(src,CS_CHECKED);case CS_CHECKED:src=(SourceClass)c.getClassDefinition(env);if (src.getError()) {if (tracing) env.dtEvent("Main.compile (CHECKED): bailing out on error, " + c);c.setDefinition(src,CS_COMPILED);break;}done=false;buf.reset();if (tracing) env.dtEvent("Main.compile (CHECKED): compiling, " + c);src.compile(buf);c.setDefinition(src,CS_COMPILED);src.cleanup(env);if (src.getNestError() || nowrite) {continue;}String pkgName=c.getName().getQualifier().toString().replace('.',File.separatorChar);String className=c.getName().getFlatName().toString().replace('.',SIGC_INNERCLASS) + ".class";File file;if (destDir != null) {if (pkgName.length() > 0) {file=new File(destDir,pkgName);if (!file.exists()) {file.mkdirs();}file=new File(file,className);} else {file=new File(destDir,className);}} else {ClassFile classfile=(ClassFile)src.getSource();if (classfile.isZipped()) {env.error(0,"cant.write",classfile.getPath());exitStatus=EXIT_CMDERR;continue;}file=new File(classfile.getPath());file=new File(file.getParent(),className);}try {FileOutputStream out=new FileOutputStream(file.getPath());buf.writeTo(out);out.close();if (env.verbose()) {output(getText("main.wrote",file.getPath()));}} catch (IOException ee) {env.error(0,"cant.write",file.getPath());exitStatus=EXIT_CMDERR;}if (env.print_dependencies()) {src.printClassDependencies(env);}}}} while (!done);} catch (OutOfMemoryError ee) {env.output(noMemoryErrorString);exitStatus=EXIT_SYSERR;return false;}catch (StackOverflowError ee) {env.output(stackOverflowErrorString);exitStatus=EXIT_SYSERR;return false;}catch (Error ee) {if (env.nerrors == 0 || env.dump()) {ee.printStackTrace();env.error(0,"fatal.error");exitStatus=EXIT_ABNORMAL;}}catch (Exception ee) {if (env.nerrors == 0 || env.dump()) {ee.printStackTrace();env.error(0,"fatal.exception");exitStatus=EXIT_ABNORMAL;}}int ndepfiles=env.deprecationFiles.size();if (ndepfiles > 0 && env.warnings()) {int ndeps=env.ndeprecations;Object file1=env.deprecationFiles.elementAt(0);if (env.deprecation()) {if (ndepfiles > 1) {env.error(0,"warn.note.deprecations",new Integer(ndepfiles),new Integer(ndeps));} else {env.error(0,"warn.note.1deprecation",file1,new Integer(ndeps));}} else {if (ndepfiles > 1) {env.error(0,"warn.note.deprecations.silent",new Integer(ndepfiles),new Integer(ndeps));} else {env.error(0,"warn.note.1deprecation.silent",file1,new Integer(ndeps));}}}env.flushErrors();env.shutdown();boolean status=true;if (env.nerrors > 0) {String msg="";if (env.nerrors > 1) {msg=getText("main.errors",env.nerrors);} else {msg=getText("main.1error");}if (env.nwarnings > 0) {if (env.nwarnings > 1) {msg+=", " + getText("main.warnings",env.nwarnings);} else {msg+=", " + getText("main.1warning");}}output(msg);if (exitStatus == EXIT_OK) {exitStatus=EXIT_ERROR;}status=false;} else {if (env.nwarnings > 0) {if (env.nwarnings > 1) {output(getText("main.warnings",env.nwarnings));} else {output(getText("main.1warning"));}}}if (env.covdata()) {Assembler CovAsm=new Assembler();CovAsm.GenJCov(env);}if (env.verbose()) {tm=System.currentTimeMillis() - tm;output(getText("main.done_in",Long.toString(tm)));}return status;}  }
class C{  protected Class<?> findClass(String name) throws ClassNotFoundException {  Class<?> clazz=findLoadedClass(name);  if (clazz != null)   return clazz;  byte[] data=this.byteCode.get(name);  if (data == null || data.length < 1) {    return null;  }  return defineClass(name,data,0,data.length);}  }
class C{  @SuppressWarnings("unchecked") public static <T>Consumer<T> discard(){  return (Consumer<T>)DISCARDER;}  }
class C{  public static int parseInt(String s,int offset,int length,int base) throws NumberFormatException {  int value=0;  if (length < 0)   length=s.length() - offset;  for (int i=0; i < length; i++) {    char c=s.charAt(offset + i);    int digit=c - '0';    if (digit < 0 || digit >= base || digit >= 10) {      digit=10 + c - 'A';      if (digit < 10 || digit >= base)       digit=10 + c - 'a';    }    if (digit < 0 || digit >= base)     throw new NumberFormatException(s.substring(offset,offset + length));    value=value * base + digit;  }  return value;}  }
class C{  private void selectLastUsedCommand(){  if (commands.isEmpty()) {    setEmptyCommand();  } else {    final CommandImpl command=commands.get(0);    commandsListWidget.selectElement(command.getName(),command.getName());  }}  }
class C{  public K encoding(String encoding){  this.encoding=encoding;  return self();}  }
class C{  public JSONNode(String name,Double value){  this(name,value,NodeType.PRIMITIVE);}  }
class C{  public void encodeSnmpPdu(SnmpPdu p,int maxDataLength) throws SnmpStatusException, SnmpTooBigException {  SnmpScopedPduPacket pdu=(SnmpScopedPduPacket)p;  if (SNMP_LOGGER.isLoggable(Level.FINER)) {    final StringBuilder strb=new StringBuilder().append("PDU to marshall: \n").append("security parameters : ").append(pdu.securityParameters).append("\n").append("type : ").append(pdu.type).append("\n").append("version : ").append(pdu.version).append("\n").append("requestId : ").append(pdu.requestId).append("\n").append("msgId : ").append(pdu.msgId).append("\n").append("msgMaxSize : ").append(pdu.msgMaxSize).append("\n").append("msgFlags : ").append(pdu.msgFlags).append("\n").append("msgSecurityModel : ").append(pdu.msgSecurityModel).append("\n").append("contextEngineId : ").append(pdu.contextEngineId).append("\n").append("contextName : ").append(pdu.contextName).append("\n");    SNMP_LOGGER.logp(Level.FINER,SnmpV3Message.class.getName(),"encodeSnmpPdu",strb.toString());  }  version=pdu.version;  address=pdu.address;  port=pdu.port;  msgId=pdu.msgId;  msgMaxSize=pdu.msgMaxSize;  msgFlags=pdu.msgFlags;  msgSecurityModel=pdu.msgSecurityModel;  contextEngineId=pdu.contextEngineId;  contextName=pdu.contextName;  securityParameters=pdu.securityParameters;  data=new byte[maxDataLength];  try {    BerEncoder benc=new BerEncoder(data);    benc.openSequence();    encodeVarBindList(benc,pdu.varBindList);switch (pdu.type) {case pduGetRequestPdu:case pduGetNextRequestPdu:case pduInformRequestPdu:case pduGetResponsePdu:case pduSetRequestPdu:case pduV2TrapPdu:case pduReportPdu:      SnmpPduRequestType reqPdu=(SnmpPduRequestType)pdu;    benc.putInteger(reqPdu.getErrorIndex());  benc.putInteger(reqPdu.getErrorStatus());benc.putInteger(pdu.requestId);break;case pduGetBulkRequestPdu:SnmpPduBulkType bulkPdu=(SnmpPduBulkType)pdu;benc.putInteger(bulkPdu.getMaxRepetitions());benc.putInteger(bulkPdu.getNonRepeaters());benc.putInteger(pdu.requestId);break;default :throw new SnmpStatusException("Invalid pdu type " + String.valueOf(pdu.type));}benc.closeSequence(pdu.type);dataLength=benc.trim();} catch (ArrayIndexOutOfBoundsException x) {throw new SnmpTooBigException();}}  }
class C{  public AbstractInsnNode[] toArray(){  int i=0;  AbstractInsnNode elem=first;  AbstractInsnNode[] insns=new AbstractInsnNode[size];  while (elem != null) {    insns[i]=elem;    elem.index=i++;    elem=elem.next;  }  return insns;}  }
class C{  public static void reposition(Closeable o,long offset) throws FitsException {  if (o == null) {    throw new FitsException("Attempt to reposition null stream");  } else   if (!(o instanceof RandomAccess) || offset < 0) {    throw new FitsException("Invalid attempt to reposition stream " + o + " of type "+ o.getClass().getName()+ " to "+ offset);  }  try {    ((RandomAccess)o).seek(offset);  } catch (  IOException e) {    throw new FitsException("Unable to repostion stream " + o + " of type "+ o.getClass().getName()+ " to "+ offset+ "   Exception:"+ e.getMessage(),e);  }}  }
class C{  public static void readURL(Scanner input,ArrayList<String> list){  for (int i=0; i < 5; i++) {    list.add(i,input.next());  }}  }
class C{  @Deprecated public static void streamSchematic(final File file,final FaweLocation loc){  try {    final FileInputStream is=new FileInputStream(file);    streamSchematic(is,loc);  } catch (  final IOException e) {    MainUtil.handleError(e);  }}  }
class C{  @Override public void updateLong(String columnLabel,long x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateLong(" + quote(columnLabel) + ", "+ x+ "L);");    }    update(columnLabel,ValueLong.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  @Override public void addComputedTypeAnnotations(Element elt,AnnotatedTypeMirror type){  if (!type.isAnnotatedInHierarchy(LINEAR) && elt.getKind().isClass()) {    type.addAnnotation(UNUSABLE);  }  super.addComputedTypeAnnotations(elt,type);}  }
class C{  public void addNumInput(long numInputAdd){  numInput.addAndGet(numInputAdd);}  }
class C{  public SolutionDetail(X509Certificate certificate){  super(null);  this.certificate=certificate;}  }
class C{  public void flush(){  if (needFlush) {    storePage();    needFlush=false;  }}  }
class C{  public void close(String clientHandle){  MqttConnection client=getConnection(clientHandle);  client.close();}  }
class C{  public int indexOfAnyOf(final char[] c,final int from){  final int n=c.length;  if (n == 0)   return -1;  if (n == 1)   return indexOf(c[0],from);  return indexOfAnyOf(c,n,from,buildFilter(c,n));}  }
class C{  private void scanForFacesServlet(ServletContext context){  InputStream in=context.getResourceAsStream(WEB_XML_PATH);  if (in == null) {    if (context.getMajorVersion() < 3) {      throw new ConfigurationException("no web.xml present");    }  }  SAXParserFactory factory=getConfiguredFactory();  if (in != null) {    try {      SAXParser parser=factory.newSAXParser();      parser.parse(in,new WebXmlHandler());    } catch (    ParserConfigurationException|SAXException|IOException e) {      warnProcessingError(e,context);      facesServletPresent=true;      return;    } finally {      if (in != null) {        try {          in.close();        } catch (        Exception ioe) {          if (LOGGER.isLoggable(Level.FINEST)) {            LOGGER.log(Level.FINEST,"Closing stream",ioe);          }        }      }    }  }  if (!facesServletPresent && context.getMajorVersion() >= 3) {    ClassLoader cl=Util.getCurrentLoader(this);    Enumeration<URL> urls;    try {      urls=cl.getResources(WEB_FRAGMENT_PATH);    } catch (    IOException ioe) {      throw new ConfigurationException(ioe);    }    if (urls != null) {      while (urls.hasMoreElements() && !facesServletPresent) {        InputStream fragmentStream=null;        try {          URL url=urls.nextElement();          URLConnection conn=url.openConnection();          conn.setUseCaches(false);          fragmentStream=conn.getInputStream();          SAXParser parser=factory.newSAXParser();          parser.parse(fragmentStream,new WebXmlHandler());        } catch (        IOException|ParserConfigurationException|SAXException e) {          warnProcessingError(e,context);          facesServletPresent=true;          return;        } finally {          if (fragmentStream != null) {            try {              fragmentStream.close();            } catch (            IOException ioe) {              if (LOGGER.isLoggable(Level.WARNING)) {                LOGGER.log(Level.WARNING,"Exception whil scanning for FacesServlet",ioe);              }            }          }        }      }    }  }}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:15.109 -0500",hash_original_method="15C049C524B86A812CBA705875D88ECC",hash_generated_method="BD32B7EA335E67CCD4B57B00481C37AC") public byte[] sign(){  try {    if (md5 != null && md5_hash == null) {      md5_hash=new byte[16];      md5.digest(md5_hash,0,md5_hash.length);    }    if (md5_hash != null) {      if (signature != null) {        signature.update(md5_hash);      } else       if (cipher != null) {        cipher.update(md5_hash);      }    }    if (sha != null && sha_hash == null) {      sha_hash=new byte[20];      sha.digest(sha_hash,0,sha_hash.length);    }    if (sha_hash != null) {      if (signature != null) {        signature.update(sha_hash);      } else       if (cipher != null) {        cipher.update(sha_hash);      }    }    if (signature != null) {      return signature.sign();    } else     if (cipher != null) {      return cipher.doFinal();    }    return EmptyArray.BYTE;  } catch (  DigestException e) {    return EmptyArray.BYTE;  }catch (  SignatureException e) {    return EmptyArray.BYTE;  }catch (  BadPaddingException e) {    return EmptyArray.BYTE;  }catch (  IllegalBlockSizeException e) {    return EmptyArray.BYTE;  }}  }
class C{  public void addActionListener(ActionListener al){  emblem.addActionListener(al);}  }
class C{  static void accumMultiGeneric(int counts[],int startTermIndex,SortedSetDocValues si,DocIdSetIterator disi,int subIndex,OrdinalMap map) throws IOException {  final LongValues ordMap=map == null ? null : map.getGlobalOrds(subIndex);  int doc;  while ((doc=disi.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {    if (si.advanceExact(doc)) {      int term=(int)si.nextOrd();      do {        if (map != null) {          term=(int)ordMap.get(term);        }        int arrIdx=term - startTermIndex;        if (arrIdx >= 0 && arrIdx < counts.length)         counts[arrIdx]++;      } while ((term=(int)si.nextOrd()) >= 0);    } else     if (startTermIndex == -1) {      counts[0]++;    }  }}  }
class C{  public void createBuffer(BufferInfo bufferInfo,BufferType type,Buffer buffer,int target,int usage){  int byteSize=FLOAT_SIZE_BYTES;  if (type == BufferType.SHORT_BUFFER)   byteSize=SHORT_SIZE_BYTES; else   if (type == BufferType.BYTE_BUFFER)   byteSize=BYTE_SIZE_BYTES; else   if (type == BufferType.INT_BUFFER)   byteSize=INT_SIZE_BYTES;  bufferInfo.byteSize=byteSize;  int buff[]=new int[1];  GLES20.glGenBuffers(1,buff,0);  int handle=buff[0];  if (buffer != null) {    buffer.rewind();    GLES20.glBindBuffer(target,handle);    GLES20.glBufferData(target,buffer.capacity() * byteSize,buffer,usage);    GLES20.glBindBuffer(target,0);  }  bufferInfo.buffer=buffer;  bufferInfo.bufferHandle=handle;  bufferInfo.bufferType=type;  bufferInfo.target=target;  bufferInfo.usage=usage;}  }
class C{  public ExportPathParams calculateExportPathParamForVolumes(Collection<URI> blockObjectURIs,Integer overrideNumPaths,URI storageSystemURI,URI exportGroupURI){  ExportPathParams param=new ExportPathParams(0,0,0);  ExportGroup exportGroup=_dbClient.queryObject(ExportGroup.class,exportGroupURI);  if (overrideNumPaths != null && overrideNumPaths > 0) {    param=new ExportPathParams(overrideNumPaths,0,0);    param.setAllowFewerPorts(true);    return param;  }  if (blockObjectURIs != null) {    for (    URI uri : blockObjectURIs) {      BlockObject blockObject=BlockObject.fetch(_dbClient,uri);      if (blockObject == null) {        continue;      }      if (storageSystemURI != null && !storageSystemURI.equals(blockObject.getStorageController())) {        continue;      }      ExportPathParams volParam=null;      if (exportGroup != null) {        if (exportGroup.getPathParameters().containsKey(uri.toString())) {          URI exportPathParamsUri=URI.create(exportGroup.getPathParameters().get(uri.toString()));          volParam=_dbClient.queryObject(ExportPathParams.class,exportPathParamsUri);        }      }      if (volParam == null) {        URI vPoolURI=getBlockObjectVPoolURI(blockObject,_dbClient);        volParam=getExportPathParam(blockObject,vPoolURI,_dbClient);      }      if (volParam.getMaxPaths() > param.getMaxPaths()) {        param=volParam;      }    }  }  if (param.getMaxPaths() == 0) {    param=ExportPathParams.getDefaultParams();  }  return param;}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (getM_Product_ID() == 0 && getM_InOut_ID() == 0 && getM_InOutLine_ID() == 0) {    log.saveError("Error",Msg.parseTranslation(getCtx(),"@NotFound@ @M_Product_ID@ | @M_InOut_ID@ | @M_InOutLine_ID@"));    return false;  }  if (getM_InOutLine_ID() != 0 && getM_Product_ID() != 0)   setM_Product_ID(0);  return true;}  }
class C{  @Override public String toString(){  if (operands[0] == null) {    return ("NULL LHS");  }  StringBuilder result=new StringBuilder(operands[0].toString());  result.append(' ');  result.append(operator);  result.append(' ');  for (int i=1; i < operands.length; i++) {    result.append(operands[i]);    result.append("  ");  }  return result.toString();}  }
class C{  public StacktraceFingerprintingRecoveryStrategy(Class<E> exceptionClass,String... samples){  Assert.notNull(exceptionClass,"exceptionClass should not be null");  Assert.notEmpty(samples,"samples should not be null or empty");  this.exceptionClass=exceptionClass;  initFingerprints(samples);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void showProfiles(boolean update){  if (!isShowProfiles()) {    profileSelection.setSelection(true);    environmentSelection.setSelection(false);  }  performUpdate(update);}  }
class C{  public GOETreeNode(){  super();}  }
class C{  public Boolean hasUnlimitedEnrollment(){  for (Iterator i=getInstrOfferingConfigs().iterator(); i.hasNext(); ) {    if (((InstrOfferingConfig)i.next()).isUnlimitedEnrollment().booleanValue()) {      return Boolean.TRUE;    }  }  return Boolean.FALSE;}  }
class C{  public boolean lengthValid(){  return lengthValid;}  }
class C{  @Override public void update(){  super.update();  for (int i=0; i < this.sendingConnections.size(); ) {    boolean removeCurrent=false;    Connection con=sendingConnections.get(i);    if (con.isMessageTransferred()) {      if (con.getMessage() != null) {        transferDone(con);        con.finalizeTransfer();      }      removeCurrent=true;    } else     if (!con.isUp()) {      if (con.getMessage() != null) {        transferAborted(con);        con.abortTransfer();      }      removeCurrent=true;    }    if (removeCurrent) {      if (this.getFreeBufferSize() < 0) {        this.makeRoomForMessage(0);      }      sendingConnections.remove(i);    } else {      i++;    }  }  if (SimClock.getTime() - lastTtlCheck >= TTL_CHECK_INTERVAL && sendingConnections.size() == 0) {    dropExpiredMessages();    lastTtlCheck=SimClock.getTime();  }  if (energy != null) {    NetworkInterface iface=getHost().getInterface(1);    energy.update(iface,getHost().getComBus());  }}  }
class C{  public static String findPathTo(Class<?> cls,boolean errIfFromDirectory) throws IllegalStateException {  if (cls == null) {    cls=CheckerMain.class;  }  String name=cls.getName();  String classFileName;{    int idx=name.lastIndexOf('.');    classFileName=(idx == -1 ? name : name.substring(idx + 1)) + ".class";  }  String uri=cls.getResource(classFileName).toString();  if (uri.startsWith("file:")) {    if (errIfFromDirectory) {      return uri;    } else {      throw new IllegalStateException("This class has been loaded from a directory and not from a jar file.");    }  }  if (!uri.startsWith("jar:file:")) {    int idx=uri.indexOf(':');    String protocol=idx == -1 ? "(unknown)" : uri.substring(0,idx);    throw new IllegalStateException("This class has been loaded remotely via the " + protocol + " protocol. Only loading from a jar on the local file system is supported.");  }  int idx=uri.indexOf('!');  if (idx == -1) {    throw new IllegalStateException("You appear to have loaded this class from a local jar file, but I can't make sense of the URL!");  }  try {    String fileName=URLDecoder.decode(uri.substring("jar:file:".length(),idx),Charset.defaultCharset().name());    return new File(fileName).getAbsolutePath();  } catch (  UnsupportedEncodingException e) {    throw new InternalError("Default charset doesn't exist. Your VM is borked.");  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:57.975 -0500",hash_original_method="FC4FA64E8CF6D16D369F4D51265A00D0",hash_generated_method="91C873E2F616E76DAD27EEAF82611155") protected boolean scrollPageDown(TextView widget,Spannable buffer){  final Layout layout=widget.getLayout();  final int innerHeight=getInnerHeight(widget);  final int bottom=widget.getScrollY() + innerHeight + innerHeight;  int bottomLine=layout.getLineForVertical(bottom);  if (bottomLine <= layout.getLineCount() - 1) {    Touch.scrollTo(widget,layout,widget.getScrollX(),layout.getLineTop(bottomLine + 1) - innerHeight);    return true;  }  return false;}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("LoginDTO[");  buffer.append("m_user = ").append(m_user);  buffer.append(", m_pwd = ****");  buffer.append(", m_cntsTriesNum = ").append(m_cntsTriesNum);  buffer.append(", m_language = ").append(m_language);  buffer.append("]");  return buffer.toString();}  }
class C{  public void rejoinGroupChat() throws PayloadException, NetworkException {  if (sLogger.isActivated()) {    sLogger.info("Rejoin group chat session related to the conversation " + mChatId);  }  ServerApiUtils.testIms();  RejoinGroupChatSession session=mImService.rejoinGroupChatSession(mChatId);  session.addListener(this);  mChatService.addGroupChat(this);  session.startSession();}  }
class C{  private long timeSinceLastPrecacheMs(Context context){  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);  long lastPrecacheTimeMs=prefs.getLong(PREF_PRECACHE_LAST_TIME,0L);  if (lastPrecacheTimeMs > getElapsedRealtimeOnSystem()) {    lastPrecacheTimeMs=0L;  }  return getElapsedRealtimeOnSystem() - lastPrecacheTimeMs;}  }
class C{  public Connection initConnectionRestoreFromBackup(String backedUpDBLocation) throws AdeException {  final String connectionUrl=dbURL + ";rollForwardRecoveryFrom=" + backedUpDBLocation+ File.separator+ dbName;  mLogger.debug("Loading driver " + dbDriver);  try {    Class.forName(dbDriver);  } catch (  ClassNotFoundException e) {    throw new AdeInternalException("Loading driver failed",e);  }  mLogger.info("Connecting to database " + connectionUrl + " to restore from backup.");  Connection con;  try {    if (dbUserName == null || dbUserPassword == null) {      con=DriverManager.getConnection(connectionUrl);    } else {      con=DriverManager.getConnection(connectionUrl,dbUserName,dbUserPassword);    }    if (con != null) {      try {        con.commit();        con.close();      } catch (      SQLException e) {        mLogger.error("The restored connection could not be closed.",e);        throw new AdeExtUsageException("The connection could not be closed.",e);      }    }    initConnection();  } catch (  SQLException e) {    throw new AdeInternalException("Failed obtaining connection",e);  }  return con;}  }
class C{  @SuppressWarnings("unchecked") public static Set<Short> toSet(short[] array){  return toSet(DefaultTypeTransformation.primitiveArrayToList(array));}  }
class C{  private boolean createVplexCG(StorageSystem vplexSystem,BlockConsistencyGroup cg,Volume protoVolume,String stepId){  try {    VPlexApiClient client=getVPlexAPIClient(vplexApiFactory,vplexSystem,dbClient);    log.info("Got VPLEX API client.");    if (cg.created(vplexSystem.getId())) {      StringSet cgNames=cg.getSystemConsistencyGroups().get(vplexSystem.getId().toString());      log.info("Consistency group(s) already created: " + cgNames.toString());      return true;    }    ClusterConsistencyGroupWrapper clusterConsistencyGroup=getClusterConsistencyGroup(protoVolume,cg);    String cgName=clusterConsistencyGroup.getCgName();    String clusterName=clusterConsistencyGroup.getClusterName();    boolean isDistributed=clusterConsistencyGroup.isDistributed();    URI vaURI=protoVolume.getVirtualArray();    log.info("Got virtual array for VPLEX volume.");    client.createConsistencyGroup(cgName,clusterName,isDistributed);    log.info("Created VPLEX consistency group.");    cg.setVirtualArray(vaURI);    cg.addSystemConsistencyGroup(vplexSystem.getId().toString(),BlockConsistencyGroupUtils.buildClusterCgName(clusterName,cgName));    cg.addConsistencyGroupTypes(Types.VPLEX.name());    dbClient.updateObject(cg);    log.info("Updated consistency group in DB.");  } catch (  VPlexApiException vex) {    log.error("Exception creating consistency group: " + vex.getMessage(),vex);    WorkflowStepCompleter.stepFailed(stepId,vex);    return false;  }catch (  Exception ex) {    log.error("Exception creating consistency group: " + ex.getMessage(),ex);    String opName=ResourceOperationTypeEnum.CREATE_CONSISTENCY_GROUP.getName();    ServiceError serviceError=VPlexApiException.errors.createConsistencyGroupFailed(opName,ex);    WorkflowStepCompleter.stepFailed(stepId,serviceError);    return false;  }  return true;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypesPackage.ENUMERATION_TYPE__ENUMERATOR:    getEnumerator().clear();  return;}super.eUnset(featureID);}  }
class C{  @Override public void encode(WbXmlEncoder encoder,WbXmlElement element,WbXmlAttribute attr,String value) throws IOException {  boolean isIcon=false;  if (element.getTag().equals("PARM")) {    WbXmlAttribute name=element.getAttribute("NAME");    if (name != null && name.getValue().equals("ICON")) {      isIcon=true;      BASE64Decoder dec=new BASE64Decoder();      encoder.writeOpaque(dec.decodeBuffer(value));    }  }  if (!isIcon) {    encoder.encodeAttributeValue(value);  }}  }
class C{  private <T>void writeNameOrValue(TypedParser<T> helper,T val) throws TException {  getCurrentContext().write();  try {    if (getCurrentContext().isMapKey()) {      getCurrentWriter().writeFieldName(val.toString());    } else {      helper.writeValue(getCurrentWriter(),val);    }  } catch (  IOException ex) {    throw new TException(ex);  }}  }
class C{  public MultiplexingSocket(InetAddress address,int port,InetAddress localAddr,int localPort){  this((Socket)null);}  }
class C{  public void append(final StringBuffer buffer,final String fieldName,final short[] array,final Boolean fullDetail){  appendFieldStart(buffer,fieldName);  if (array == null) {    appendNullText(buffer,fieldName);  } else   if (isFullDetail(fullDetail)) {    appendDetail(buffer,fieldName,array);  } else {    appendSummary(buffer,fieldName,array);  }  appendFieldEnd(buffer,fieldName);}  }
class C{  protected void fireRunStatus(String property,Object old,Object status){  if (!ThreadingUtil.isLayoutThread())   log.error("invoked on wrong thread",new Exception("traceback"));  firePropertyChange(property,old,status);}  }
class C{  public void addObjectToLocation(final Object obj,final int x,final int y,final int z){  Bag[] fieldxy=field[x][y];  if (fieldxy[z] == null)   buildBag(fieldxy,z);  fieldxy[z].add(obj);}  }
class C{  protected SVGPathSegItem newItem(short command,float[] parameters,int[] j){switch (command) {case SVGPathSeg.PATHSEG_ARC_ABS:case SVGPathSeg.PATHSEG_ARC_REL:    return new SVGPathSegArcItem(command,PATHSEG_LETTERS[command],parameters[j[0]++],parameters[j[0]++],parameters[j[0]++],parameters[j[0]++] != 0,parameters[j[0]++] != 0,parameters[j[0]++],parameters[j[0]++]);case SVGPathSeg.PATHSEG_CLOSEPATH:  return new SVGPathSegItem(command,PATHSEG_LETTERS[command]);case SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS:case SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL:return new SVGPathSegCurvetoCubicItem(command,PATHSEG_LETTERS[command],parameters[j[0]++],parameters[j[0]++],parameters[j[0]++],parameters[j[0]++],parameters[j[0]++],parameters[j[0]++]);case SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS:case SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL:return new SVGPathSegCurvetoCubicSmoothItem(command,PATHSEG_LETTERS[command],parameters[j[0]++],parameters[j[0]++],parameters[j[0]++],parameters[j[0]++]);case SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS:case SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL:return new SVGPathSegCurvetoQuadraticItem(command,PATHSEG_LETTERS[command],parameters[j[0]++],parameters[j[0]++],parameters[j[0]++],parameters[j[0]++]);case SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS:case SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL:return new SVGPathSegCurvetoQuadraticSmoothItem(command,PATHSEG_LETTERS[command],parameters[j[0]++],parameters[j[0]++]);case SVGPathSeg.PATHSEG_LINETO_ABS:case SVGPathSeg.PATHSEG_LINETO_REL:case SVGPathSeg.PATHSEG_MOVETO_ABS:case SVGPathSeg.PATHSEG_MOVETO_REL:return new SVGPathSegMovetoLinetoItem(command,PATHSEG_LETTERS[command],parameters[j[0]++],parameters[j[0]++]);case SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL:case SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS:return new SVGPathSegLinetoHorizontalItem(command,PATHSEG_LETTERS[command],parameters[j[0]++]);case SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL:case SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS:return new SVGPathSegLinetoVerticalItem(command,PATHSEG_LETTERS[command],parameters[j[0]++]);}return null;}  }
class C{  private int rdHexByte(){  int hi=rdHexDigit();  int lo=rdHexDigit();  if ((hi < 16) && (lo < 16)) {    return (hi * 16 + lo);  } else {    return 0;  }}  }
class C{  public int next(){  final int node=_currentNode;  if (node != NULL) {    _currentNode=getNextAttributeIdentity(node);    return returnNode(makeNodeHandle(node));  }  return NULL;}  }
class C{  @Override public void run(){  try {    BufferedReader br=new BufferedReader(new InputStreamReader(streamToGrab));    String line;    while ((line=br.readLine()) != null && !isInterrupted()) {      if (line.startsWith(PID_MSG_PREFIX))       pid=line.substring(PID_MSG_PREFIX.length()); else       if (printC != null)       printC.apply(line);    }  } catch (  IOException e) {    U.error(log,"Caught IOException while grabbing stream",e);    try {      proc.exitValue();      if (procKilledC != null)       procKilledC.apply();    } catch (    IllegalThreadStateException e1) {      if (!interrupted())       U.error(log,"Failed to get exit value from process.",e1);    }  }}  }
class C{  public void propertyChange(java.beans.PropertyChangeEvent e){  if (_programmingVar == null && _programmingCV == null && _programmingIndexedCV == null) {    log.warn("unexpected propertChange: " + e);    return;  } else   if (log.isDebugEnabled()) {    log.debug("property changed: " + e.getPropertyName() + " new value: "+ e.getNewValue());  }  if (e.getSource() == _programmingVar && e.getPropertyName().equals("Busy") && ((Boolean)e.getNewValue()).equals(Boolean.FALSE)) {    if (_programmingVar.getState() == VariableValue.UNKNOWN) {      if (retry == 0) {        varListIndex--;        retry++;        if (_read) {          _programmingVar.setToRead(true);        } else {          _programmingVar.setToWrite(true);        }      } else {        retry=0;      }    }    replyWhileProgrammingVar();    return;  } else   if (e.getSource() == _programmingCV && e.getPropertyName().equals("Busy") && ((Boolean)e.getNewValue()).equals(Boolean.FALSE)) {    replyWhileProgrammingCV();    return;  } else   if (e.getSource() == _programmingIndexedCV && e.getPropertyName().equals("Busy") && ((Boolean)e.getNewValue()).equals(Boolean.FALSE)) {    if (_programmingIndexedCV.getState() == VariableValue.UNKNOWN) {      if (retry == 0) {        indexedCvListIndex--;        retry++;      } else {        retry=0;      }    }    replyWhileProgrammingIndxCV();    return;  } else {    if (log.isDebugEnabled() && e.getPropertyName().equals("Busy")) {      log.debug("ignoring change of Busy " + e.getNewValue() + " "+ (((Boolean)e.getNewValue()).equals(Boolean.FALSE)));    }    return;  }}  }
class C{  private void animatePropertyBy(int constantName,float byValue){  float fromValue=getValue(constantName);  animatePropertyBy(constantName,fromValue,byValue);}  }
class C{  public ASN1Primitive toASN1Primitive(){  ASN1EncodableVector dev=new ASN1EncodableVector();  dev.add(commitmentTypeIdentifier);  if (qualifier != null) {    dev.add(qualifier);  }  return new DERSequence(dev);}  }
class C{  @Override public void revalidate(){  UIManager.put("TitledBorder.border",null);  Border border=UIManager.getBorder("TitledBorder.border");  if (border instanceof BorderUIResource.EtchedBorderUIResource) {    Color highlight=UIManager.getColor("ToolBar.highlight");    Color shadow=UIManager.getColor("ToolBar.shadow");    border=new BorderUIResource.EtchedBorderUIResource(highlight,shadow);    UIManager.put("TitledBorder.border",border);  }  if (IS_GTK) {    UIManager.put("TitledBorder.titleColor",UIManager.getColor("Label.foreground"));    UIManager.put("TitledBorder.font",UIManager.getFont("Label.font"));  }  super.revalidate();}  }
class C{  @Override public int hashCode(){  return Ints.fromBytes(bytes[LENGTH - 4],bytes[LENGTH - 3],bytes[LENGTH - 2],bytes[LENGTH - 1]);}  }
class C{  private TextImpl nextTextNode(){  Node nextSibling=getNextSibling();  if (nextSibling == null) {    return null;  }  short nodeType=nextSibling.getNodeType();  return nodeType == Node.TEXT_NODE || nodeType == Node.CDATA_SECTION_NODE ? (TextImpl)nextSibling : null;}  }
class C{  @Nullable private Beacon calculateNearestBeacon(Collection<Beacon> beacons){  Beacon nearestBeacon=null;  Double shortestDistance=null;  for (  Beacon beacon : beacons) {    double distance=Utils.computeAccuracy(beacon);    if (nearestBeacon != null) {      if (distance < shortestDistance) {        nearestBeacon=beacon;        shortestDistance=distance;      }    } else {      nearestBeacon=beacon;      shortestDistance=distance;    }  }  return nearestBeacon;}  }
class C{  private PerMessageCompressionExtension findAgreedPerMessageCompressionExtension(){  if (mAgreedExtensions == null) {    return null;  }  for (  WebSocketExtension extension : mAgreedExtensions) {    if (extension instanceof PerMessageCompressionExtension) {      return (PerMessageCompressionExtension)extension;    }  }  return null;}  }
class C{  private void checkHeapUtilization(){  long heapMaxSize=Runtime.getRuntime().maxMemory();  long heapSize=Runtime.getRuntime().totalMemory();  long freeSize=Runtime.getRuntime().freeMemory();  double loadFactor=(double)(heapSize - freeSize) / heapMaxSize;  if (loadFactor > MAX_HEAP_LOAD_FACTOR) {    cache.clear();  }}  }
class C{  protected void emit_ArrowFunctionTypeExpression_FunctionTypeExpressionOLD_LeftParenthesisKeyword_1_or___LeftCurlyBracketKeyword_1_FunctionKeyword_3_LeftParenthesisKeyword_5__(EObject semanticObject,ISynNavigable transition,List<INode> nodes){  acceptNodes(transition,nodes);}  }
class C{  public static void continuePendingRequestIfPossible(PermissionListener listener){  checkInstanceNotNull();  instance.continuePendingRequestIfPossible(listener,ThreadFactory.makeMainThread());}  }
class C{  public void addStepsForImportClonesOfApplicationVolumes(Workflow workflow,String waitFor,List<URI> sourceVolumes,String opId){  _log.info("Creating steps for importing clones");  for (  URI vplexSrcUri : sourceVolumes) {    Volume vplexSrcVolume=getDataObject(Volume.class,vplexSrcUri,_dbClient);    Volume backendSrc=VPlexUtil.getVPLEXBackendVolume(vplexSrcVolume,true,_dbClient);    long size=backendSrc.getProvisionedCapacity();    Volume backendHASrc=VPlexUtil.getVPLEXBackendVolume(vplexSrcVolume,false,_dbClient);    StringSet backSrcCopies=backendSrc.getFullCopies();    if (backSrcCopies != null && !backSrcCopies.isEmpty()) {      for (      String copy : backSrcCopies) {        List<VolumeDescriptor> vplexVolumeDescriptors=new ArrayList<VolumeDescriptor>();        List<VolumeDescriptor> blockDescriptors=new ArrayList<VolumeDescriptor>();        Volume backCopy=getDataObject(Volume.class,URI.create(copy),_dbClient);        String name=backCopy.getLabel();        _log.info(String.format("Creating steps for import clone %s.",name));        VolumeDescriptor vplexCopyVolume=prepareVolumeDescriptor(vplexSrcVolume,name,VolumeDescriptor.Type.VPLEX_VIRT_VOLUME,size,false);        Volume vplexCopy=getDataObject(Volume.class,vplexCopyVolume.getVolumeURI(),_dbClient);        vplexCopy.setAssociatedVolumes(new StringSet());        StringSet assVol=vplexCopy.getAssociatedVolumes();        if (null == assVol) {          assVol=new StringSet();          vplexCopy.setAssociatedVolumes(assVol);        }        assVol.add(backCopy.getId().toString());        VirtualPoolCapabilityValuesWrapper capabilities=getCapabilities(backCopy,size);        VolumeDescriptor backCopyDesc=new VolumeDescriptor(VolumeDescriptor.Type.VPLEX_IMPORT_VOLUME,backCopy.getStorageController(),backCopy.getId(),backCopy.getPool(),capabilities);        blockDescriptors.add(backCopyDesc);        if (backendHASrc != null) {          name=name + "-ha";          VolumeDescriptor haDesc=prepareVolumeDescriptor(backendHASrc,name,VolumeDescriptor.Type.BLOCK_DATA,size,true);          blockDescriptors.add(haDesc);          assVol.add(haDesc.getVolumeURI().toString());        }        vplexCopy.setFullCopySetName(backCopy.getFullCopySetName());        vplexCopy.setAssociatedSourceVolume(vplexSrcUri);        StringSet srcClones=vplexSrcVolume.getFullCopies();        if (srcClones == null) {          srcClones=new StringSet();        }        srcClones.add(vplexCopy.getId().toString());        backCopy.setFullCopySetName(NullColumnValueGetter.getNullStr());        backCopy.addInternalFlags(Flag.INTERNAL_OBJECT);        _dbClient.updateObject(backCopy);        _dbClient.updateObject(vplexCopy);        _dbClient.updateObject(vplexSrcVolume);        vplexVolumeDescriptors.add(vplexCopyVolume);        createStepsForFullCopyImport(workflow,vplexSrcVolume.getStorageController(),vplexVolumeDescriptors,blockDescriptors,waitFor);      }    }  }  _log.info("Created workflow steps to import the backend full copies");}  }
class C{  public <K,V>GeodeJavaRegionRDD<K,V> geodeRegion(String regionPath){  GeodeConnectionConf connConf=GeodeConnectionConf.apply(sc.getConf());  return geodeRegion(regionPath,connConf,new Properties());}  }
class C{  public static Map<String,Object> performFind(DispatchContext dctx,Map<String,?> context){  String entityName=(String)context.get("entityName");  String orderBy=(String)context.get("orderBy");  Map<String,?> inputFields=checkMap(context.get("inputFields"),String.class,Object.class);  String noConditionFind=(String)context.get("noConditionFind");  String distinct=(String)context.get("distinct");  List<String> fieldList=UtilGenerics.<String>checkList(context.get("fieldList"));  GenericValue userLogin=(GenericValue)context.get("userLogin");  Locale locale=(Locale)context.get("locale");  Delegator delegator=dctx.getDelegator();  if (UtilValidate.isEmpty(noConditionFind)) {    noConditionFind=(String)inputFields.get("noConditionFind");  }  if (UtilValidate.isEmpty(noConditionFind)) {    noConditionFind=EntityUtilProperties.getPropertyValue("widget","widget.defaultNoConditionFind",delegator);  }  String filterByDate=(String)context.get("filterByDate");  if (UtilValidate.isEmpty(filterByDate)) {    filterByDate=(String)inputFields.get("filterByDate");  }  Timestamp filterByDateValue=(Timestamp)context.get("filterByDateValue");  Integer viewSize=(Integer)context.get("viewSize");  Integer viewIndex=(Integer)context.get("viewIndex");  Integer maxRows=null;  if (viewSize != null && viewIndex != null) {    maxRows=viewSize * (viewIndex + 1);  }  LocalDispatcher dispatcher=dctx.getDispatcher();  Map<String,Object> prepareResult=null;  try {    prepareResult=dispatcher.runSync("prepareFind",UtilMisc.toMap("entityName",entityName,"orderBy",orderBy,"inputFields",inputFields,"filterByDate",filterByDate,"noConditionFind",noConditionFind,"filterByDateValue",filterByDateValue,"userLogin",userLogin,"locale",context.get("locale"),"timeZone",context.get("timeZone")));  } catch (  GenericServiceException gse) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"CommonFindErrorPreparingConditions",UtilMisc.toMap("errorString",gse.getMessage()),locale));  }  EntityConditionList<EntityCondition> exprList=UtilGenerics.cast(prepareResult.get("entityConditionList"));  List<String> orderByList=checkList(prepareResult.get("orderByList"),String.class);  Map<String,Object> executeResult=null;  try {    executeResult=dispatcher.runSync("executeFind",UtilMisc.toMap("entityName",entityName,"orderByList",orderByList,"fieldList",fieldList,"entityConditionList",exprList,"noConditionFind",noConditionFind,"distinct",distinct,"locale",context.get("locale"),"timeZone",context.get("timeZone"),"maxRows",maxRows));  } catch (  GenericServiceException gse) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"CommonFindErrorRetrieveIterator",UtilMisc.toMap("errorString",gse.getMessage()),locale));  }  if (executeResult.get("listIt") == null) {    if (Debug.verboseOn())     Debug.logVerbose("No list iterator found for query string + [" + prepareResult.get("queryString") + "]",module);  }  Map<String,Object> results=ServiceUtil.returnSuccess();  results.put("listIt",executeResult.get("listIt"));  results.put("listSize",executeResult.get("listSize"));  results.put("queryString",prepareResult.get("queryString"));  results.put("queryStringMap",prepareResult.get("queryStringMap"));  return results;}  }
class C{  public static cuDoubleComplex cuCmul(cuDoubleComplex x,cuDoubleComplex y){  cuDoubleComplex prod;  prod=cuCmplx((cuCreal(x) * cuCreal(y)) - (cuCimag(x) * cuCimag(y)),(cuCreal(x) * cuCimag(y)) + (cuCimag(x) * cuCreal(y)));  return prod;}  }
class C{  public ListenerList(Mode mode){  this.identity=Mode.IDENTITY.equals(mode);}  }
class C{  public boolean hasGeoPoint(){  return hasExtension(W3CPoint.class);}  }
class C{  public static void assertSchemaEquals(SQLiteDatabase expectedDb,SQLiteDatabase db){  Set<String> expectedSchema=getSchemaSet(expectedDb);  Set<String> schema=getSchemaSet(db);  MoreAsserts.assertEquals(expectedSchema,schema);}  }
class C{  private AbstractStorageLabelType<?> ensureLabelType(){  AbstractCustomStorageLabelType<?> labelType=availableTypes[valueTypeSelection.getSelectionIndex()];  labelType.setName(name.getText().trim());  labelType.setOnePerStorage(yesButton.getSelection());  if ((selectedImageKeyIndex >= 0) && (selectedImageKeyIndex < imageKeys.length)) {    labelType.setImageKey(imageKeys[selectedImageKeyIndex]);  }  return labelType;}  }
class C{  public final boolean areSpacesAllowed(){  return allowSpaces;}  }
class C{  protected void prepareGraph(MvcComponent overridingComponent) throws Exception {}  }
class C{  public void dispose(){  SceneFramework.getInstance().getFrameHandler().removeCanvas(canvas);  SceneFramework.getInstance().getFrameHandler().removeUpdater(SceneCanvasPanel.this);  canvas.removeGLEventListener(listener);  remove(canvas);}  }
class C{  public void markDirty(){  super.markDirty();  this.container.onCraftMatrixChanged((IInventory)this);}  }
class C{  public IpcOutOfSystemResourcesException(String msg,@Nullable Throwable cause){  super(msg,cause);}  }
class C{  public static void convert(IR ir){  Instruction nextInstr;  for (Instruction s=ir.firstInstructionInCodeOrder(); s != null; s=nextInstr) {switch (s.getOpcode()) {case FLOAT_IFCMP_opcode:case DOUBLE_IFCMP_opcode:      nextInstr=fp_ifcmp(s);    break;case FLOAT_2INT_opcode:  nextInstr=float_2int(s,ir);break;case FLOAT_2LONG_opcode:nextInstr=float_2long(s,ir);break;case DOUBLE_2INT_opcode:nextInstr=double_2int(s,ir);break;case DOUBLE_2LONG_opcode:nextInstr=double_2long(s,ir);break;case LONG_MUL_opcode:if (VM.BuildFor32Addr) {nextInstr=long_mul(s,ir);break;}case LONG_SHL_opcode:if (VM.BuildFor32Addr) {nextInstr=long_shl(s,ir);break;}case LONG_SHR_opcode:if (VM.BuildFor32Addr) {nextInstr=long_shr(s,ir);break;}case LONG_USHR_opcode:if (VM.BuildFor32Addr) {nextInstr=long_ushr(s,ir);break;}case LONG_IFCMP_opcode:{if (VM.BuildFor32Addr) {Operand val2=IfCmp.getVal2(s);if (val2 instanceof RegisterOperand) {nextInstr=long_ifcmp(s,ir);} else {nextInstr=long_ifcmp_imm(s,ir);}break;}}default :nextInstr=s.nextInstructionInCodeOrder();break;}}DefUse.recomputeSpansBasicBlock(ir);}  }
class C{  public static TransTypes instance(Context context){  TransTypes instance=context.get(transTypesKey);  if (instance == null)   instance=new TransTypes(context);  return instance;}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  public IndexBufferObject(boolean isStatic,int maxIndices){  isDirect=true;  buffer=BufferUtils.newShortBuffer(maxIndices);  buffer.flip();  bufferHandle=Gdx.gl20.glGenBuffer();  usage=isStatic ? GL20.GL_STATIC_DRAW : GL20.GL_DYNAMIC_DRAW;}  }
class C{  public boolean isOnTuesday(){  Object oo=get_Value(COLUMNNAME_OnTuesday);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static int countOfOffsetSources(int[][] sourcesOffsets){  int countOfSources=0;  for (int index=0; index < sourcesOffsets.length; index++) {    if ((sourcesOffsets[index][ROW_INDEX] != 0) && (sourcesOffsets[index][COLUMN_INDEX] != 0)) {      countOfSources++;    }  }  return countOfSources;}  }
class C{  private void unregisterMbean(Object o,@Nullable String cacheName,boolean near){  assert o != null;  MBeanServer srvr=ctx.config().getMBeanServer();  assert srvr != null;  cacheName=U.maskName(cacheName);  cacheName=near ? cacheName + "-near" : cacheName;  for (  Class<?> itf : o.getClass().getInterfaces()) {    if (itf.getName().endsWith("MBean") || itf.getName().endsWith("MXBean")) {      try {        srvr.unregisterMBean(U.makeCacheMBeanName(ctx.gridName(),cacheName,o.getClass().getName()));      } catch (      JMException e) {        U.error(log,"Failed to unregister MBean for component: " + o,e);      }      break;    }  }}  }
class C{  public void back() throws JSONException {  if (this.usePrevious || this.index <= 0) {    throw new JSONException("Stepping back two steps is not supported");  }  this.index-=1;  this.character-=1;  this.usePrevious=true;  this.eof=false;}  }
class C{  public static long parseDate(String dateString){  return HttpDateTime.parse(dateString);}  }
class C{  public int size(){  return 5;}  }
class C{  public void registerInput(String varName,JavaPairRDD<MatrixIndexes,MatrixBlock> rdd,long rlen,long clen,int brlen,int bclen) throws DMLRuntimeException {  registerInput(varName,rdd,rlen,clen,brlen,bclen,-1);}  }
class C{  public static Var evaluate(NodeSelector nodeSelector,ElementGroup elementGroup,Var variable,LDPathEvaluatorConfiguration evaluatorConfiguration){  Map<Class<? extends NodeSelector>,Class<QueryEvaluator>> defaultEvaluators=evaluatorConfiguration.getDefaultEvaluators();  Map<Class<? extends TestFunction>,Class<QueryEvaluator>> testFunctionEvaluators=evaluatorConfiguration.getTestFunctionEvaluators();  Map<Class<? extends NodeTest>,Class<TestEvaluator>> testEvaluators=evaluatorConfiguration.getTestEvaluators();  Map<Class<? extends SelectorFunction>,Class<QueryEvaluator>> functionEvaluators=evaluatorConfiguration.getFunctionEvaluators();  try {    if (defaultEvaluators.containsKey(nodeSelector.getClass())) {      return defaultEvaluators.get(nodeSelector.getClass()).newInstance().evaluate(nodeSelector,elementGroup,variable,evaluatorConfiguration);    } else     if (nodeSelector instanceof TestingSelector) {      TestingSelector testingSelector=(TestingSelector)nodeSelector;      if (testingSelector.getTest() instanceof FunctionTest) {        FunctionTest functionTest=(FunctionTest)testingSelector.getTest();        if (testFunctionEvaluators.containsKey(functionTest.getTest().getClass())) {          return testFunctionEvaluators.get(functionTest.getTest().getClass()).newInstance().evaluate(nodeSelector,elementGroup,variable,evaluatorConfiguration);        } else {          throw new IllegalStateException("No FunctionTest evaluator for " + functionTest.getClass().getCanonicalName());        }      } else {        NodeTest nodeTest=testingSelector.getTest();        if (testEvaluators.containsKey(nodeTest.getClass())) {          return testEvaluators.get(nodeTest.getClass()).newInstance().evaluate(nodeSelector,elementGroup,variable,evaluatorConfiguration);        } else {          throw new IllegalStateException("No NodeTest evaluator for " + nodeTest.getClass().getCanonicalName());        }      }    } else     if (nodeSelector instanceof FunctionSelector) {      FunctionSelector functionSelector=(FunctionSelector)nodeSelector;      if (functionEvaluators.containsKey(functionSelector.getFunction().getClass())) {        return functionEvaluators.get(functionSelector.getFunction().getClass()).newInstance().evaluate(nodeSelector,elementGroup,variable,evaluatorConfiguration);      } else {        throw new IllegalStateException("No Function evaluator found for " + functionSelector.getClass().getCanonicalName());      }    } else {      throw new IllegalStateException(nodeSelector.getClass() + " is not supported.");    }  } catch (  Exception e) {    logger.error("{}",e);    throw new IllegalStateException("Could not instantiate evaluator for " + nodeSelector.getClass());  }}  }
class C{  public static void writeXML(XMLOutput xmlOutput,String elementName,BugAnnotation annotation,XMLAttributeList attributeList,boolean addMessages) throws IOException {  SourceLineAnnotation src=null;  if (annotation instanceof BugAnnotationWithSourceLines) {    src=((BugAnnotationWithSourceLines)annotation).getSourceLines();  }  if (addMessages || src != null) {    xmlOutput.openTag(elementName,attributeList);    if (src != null) {      src.writeXML(xmlOutput,addMessages,false);    }    if (addMessages) {      xmlOutput.openTag(BugAnnotation.MESSAGE_TAG);      xmlOutput.writeText(annotation.toString());      xmlOutput.closeTag(BugAnnotation.MESSAGE_TAG);    }    xmlOutput.closeTag(elementName);  } else {    xmlOutput.openCloseTag(elementName,attributeList);  }}  }
class C{  void add(JavaProject javaProject,IPath pathToAdd,int includeMask,HashSet projectsToBeAdded,HashSet visitedProjects,IClasspathEntry referringEntry) throws JavaModelException {  IProject project=javaProject.getProject();  if (!project.isAccessible() || !visitedProjects.add(project))   return;  IPath projectPath=project.getFullPath();  String projectPathString=projectPath.toString();  addEnclosingProjectOrJar(projectPath);  IClasspathEntry[] entries=javaProject.getResolvedClasspath();  IJavaModel model=javaProject.getJavaModel();  JavaModelManager.PerProjectInfo perProjectInfo=javaProject.getPerProjectInfo();  for (int i=0, length=entries.length; i < length; i++) {    IClasspathEntry entry=entries[i];    AccessRuleSet access=null;    ClasspathEntry cpEntry=(ClasspathEntry)entry;    if (referringEntry != null) {      if (!entry.isExported() && entry.getEntryKind() != IClasspathEntry.CPE_SOURCE) {        continue;      }      cpEntry=cpEntry.combineWith((ClasspathEntry)referringEntry);    }    access=cpEntry.getAccessRuleSet();switch (entry.getEntryKind()) {case IClasspathEntry.CPE_LIBRARY:      IClasspathEntry rawEntry=null;    Map rootPathToRawEntries=perProjectInfo.rootPathToRawEntries;  if (rootPathToRawEntries != null) {    rawEntry=(IClasspathEntry)rootPathToRawEntries.get(entry.getPath());  }if (rawEntry == null) break;rawKind: switch (rawEntry.getEntryKind()) {case IClasspathEntry.CPE_LIBRARY:case IClasspathEntry.CPE_VARIABLE:if ((includeMask & APPLICATION_LIBRARIES) != 0) {  IPath path=entry.getPath();  if (pathToAdd == null || pathToAdd.equals(path)) {    Object target=JavaModel.getTarget(path,false);    if (target instanceof IFolder)     path=((IFolder)target).getFullPath();    String pathToString=path.getDevice() == null ? path.toString() : path.toOSString();    add(projectPath.toString(),"",pathToString,false,access);    addEnclosingProjectOrJar(entry.getPath());  }}break;case IClasspathEntry.CPE_CONTAINER:IClasspathContainer container=JavaCore.getClasspathContainer(rawEntry.getPath(),javaProject);if (container == null) break;switch (container.getKind()) {case IClasspathContainer.K_APPLICATION:if ((includeMask & APPLICATION_LIBRARIES) == 0) break rawKind;break;case IClasspathContainer.K_SYSTEM:case IClasspathContainer.K_DEFAULT_SYSTEM:if ((includeMask & SYSTEM_LIBRARIES) == 0) break rawKind;break;default :break rawKind;}IPath path=entry.getPath();if (pathToAdd == null || pathToAdd.equals(path)) {Object target=JavaModel.getTarget(path,false);if (target instanceof IFolder) path=((IFolder)target).getFullPath();String pathToString=path.getDevice() == null ? path.toString() : path.toOSString();add(projectPath.toString(),"",pathToString,false,access);addEnclosingProjectOrJar(entry.getPath());}break;}break;case IClasspathEntry.CPE_PROJECT:if ((includeMask & REFERENCED_PROJECTS) != 0) {IPath path=entry.getPath();if (pathToAdd == null || pathToAdd.equals(path)) {JavaProject referencedProject=(JavaProject)model.getJavaProject(path.toOSString());if (!projectsToBeAdded.contains(referencedProject)) {add(referencedProject,null,includeMask,projectsToBeAdded,visitedProjects,cpEntry);}}}break;case IClasspathEntry.CPE_SOURCE:if ((includeMask & SOURCES) != 0) {IPath path=entry.getPath();if (pathToAdd == null || pathToAdd.equals(path)) {add(projectPath.toString(),Util.relativePath(path,projectPath.segmentCount()),projectPathString,false,access);}}break;}}}  }
class C{  private boolean checkCoarseCollision(BaseRect target,float left,float right,float bottom,float top){  float xpos, ypos, xscale, yscale;  float targLeft, targRight, targBottom, targTop;  xpos=target.getXPosition();  ypos=target.getYPosition();  xscale=target.getXScale();  yscale=target.getYScale();  targLeft=xpos - xscale;  targRight=xpos + xscale;  targBottom=ypos - yscale;  targTop=ypos + yscale;  float checkLeft=targLeft > left ? targLeft : left;  float checkRight=targRight < right ? targRight : right;  float checkTop=targBottom > bottom ? targBottom : bottom;  float checkBottom=targTop < top ? targTop : top;  if (checkRight > checkLeft && checkBottom > checkTop) {    return true;  }  return false;}  }
class C{  public static Reflect on(String name,ClassLoader classLoader) throws ReflectException {  return on(forName(name,classLoader));}  }
class C{  public static ImageTypeSpecifier createGrayscale(int bits,int dataType,boolean isSigned){  return new ImageTypeSpecifier.Grayscale(bits,dataType,isSigned,false,false);}  }
class C{  public Graph search(List<Node> nodes){  return search(new Fas(initialGraph,getIndependenceTest()),nodes);}  }
class C{  private static List<CacheKey> fromAcceptOptions(Request request){  if (request == null) {    throw new IllegalArgumentException("request == null");  }  List<CacheKey> cacheKeys=new LinkedList<ProxyCacheResource.CacheKey>();  String proxyUri=request.getOptions().getProxyUri();  try {    proxyUri=URLEncoder.encode(proxyUri,"ISO-8859-1");  } catch (  UnsupportedEncodingException e) {    LOGGER.severe("ISO-8859-1 encoding not supported: " + e.getMessage());  }  byte[] payload=request.getPayload();  int accept=request.getOptions().getAccept();  if (accept < 0) {    for (    Integer acceptType : MediaTypeRegistry.getAllMediaTypes()) {      cacheKeys.add(new CacheKey(proxyUri,acceptType,payload));    }  } else {    cacheKeys.add(new CacheKey(proxyUri,accept,payload));  }  return cacheKeys;}  }
class C{  protected String defaultClassifierString(){  return "weka.classifiers.trees.REPTree";}  }
class C{  public MultiCopyEnableImageResponse enableImageCopies(MultiCopyEnableImageRequestParams request) throws RecoverPointException {  MultiCopyEnableImageResponse response=new MultiCopyEnableImageResponse();  RecoverPointImageManagementUtils imageManager=new RecoverPointImageManagementUtils();  RecoverPointBookmarkManagementUtils bookmarkManager=new RecoverPointBookmarkManagementUtils();  String mgmtIPAddress=_endpoint.toASCIIString();  if (null == mgmtIPAddress) {    throw RecoverPointException.exceptions.noRecoverPointEndpoint();  }  Set<String> wwnSet=request.getVolumeWWNSet();  if (wwnSet == null) {    throw RecoverPointException.exceptions.noWWNsFoundInRequest();  }  Set<String> unmappedWWNs=new HashSet<String>();  CreateBookmarkRequestParams mapRequest=new CreateBookmarkRequestParams();  mapRequest.setBookmark(request.getBookmark());  mapRequest.setVolumeWWNSet(wwnSet);  Map<String,RPConsistencyGroup> rpCGMap=bookmarkManager.mapCGsForWWNs(functionalAPI,mapRequest,unmappedWWNs);  if (!unmappedWWNs.isEmpty()) {    throw RecoverPointException.exceptions.couldNotMapWWNsToAGroup(unmappedWWNs);  }  if (rpCGMap == null) {    throw RecoverPointException.exceptions.couldNotMapWWNsToAGroup(wwnSet);  }  Set<RPConsistencyGroup> cgSetToEnable=new HashSet<RPConsistencyGroup>();  for (  String volume : rpCGMap.keySet()) {    cgSetToEnable.add(rpCGMap.get(volume));  }  for (  RPConsistencyGroup rpcg : cgSetToEnable) {    Set<RPCopy> copies=rpcg.getCopies();    for (    RPCopy copy : copies) {      try {        String cgCopyName=functionalAPI.getGroupCopyName(copy.getCGGroupCopyUID());        String cgName=functionalAPI.getGroupName(copy.getCGGroupCopyUID().getGroupUID());        if (!imageManager.verifyCopyCapableOfEnableImageAccess(functionalAPI,copy.getCGGroupCopyUID(),request.getBookmark(),false)) {          logger.info("Copy " + cgCopyName + " of group "+ cgName+ " is in a mode that disallows enabling the CG copy.");          throw RecoverPointException.exceptions.notAllowedToEnableImageAccessToCG(cgName,cgCopyName);        }      } catch (      FunctionalAPIActionFailedException_Exception e) {        throw RecoverPointException.exceptions.notAllowedToEnableImageAccessToCGException(e);      }catch (      FunctionalAPIInternalError_Exception e) {        throw RecoverPointException.exceptions.notAllowedToEnableImageAccessToCGException(e);      }    }  }  for (  RPConsistencyGroup rpcg : cgSetToEnable) {    Set<RPCopy> copies=rpcg.getCopies();    for (    RPCopy copy : copies) {      boolean waitForLinkState=true;      imageManager.enableCGCopy(functionalAPI,copy.getCGGroupCopyUID(),waitForLinkState,ImageAccessMode.LOGGED_ACCESS,request.getBookmark(),request.getAPITTime());    }  }  response.setReturnCode(RecoverPointReturnCode.SUCCESS);  return response;}  }
class C{  private void addMenuItems(Menu mMenu,boolean subMenu){  int groupId=R.id.material_drawer_menu_default_group;  for (int i=0; i < mMenu.size(); i++) {    MenuItem mMenuItem=mMenu.getItem(i);    IDrawerItem iDrawerItem;    if (!subMenu && mMenuItem.getGroupId() != groupId && mMenuItem.getGroupId() != 0) {      groupId=mMenuItem.getGroupId();      iDrawerItem=new DividerDrawerItem();      getAdapter().addDrawerItems(iDrawerItem);    }    if (mMenuItem.hasSubMenu()) {      iDrawerItem=new PrimaryDrawerItem().withName(mMenuItem.getTitle().toString()).withIcon(mMenuItem.getIcon()).withIdentifier(mMenuItem.getItemId()).withEnabled(mMenuItem.isEnabled()).withSelectable(false);      getAdapter().addDrawerItems(iDrawerItem);      addMenuItems(mMenuItem.getSubMenu(),true);    } else     if (mMenuItem.getGroupId() != 0 || subMenu) {      iDrawerItem=new SecondaryDrawerItem().withName(mMenuItem.getTitle().toString()).withIcon(mMenuItem.getIcon()).withIdentifier(mMenuItem.getItemId()).withEnabled(mMenuItem.isEnabled());      getAdapter().addDrawerItems(iDrawerItem);    } else {      iDrawerItem=new PrimaryDrawerItem().withName(mMenuItem.getTitle().toString()).withIcon(mMenuItem.getIcon()).withIdentifier(mMenuItem.getItemId()).withEnabled(mMenuItem.isEnabled());      getAdapter().addDrawerItems(iDrawerItem);    }  }}  }
class C{  public static boolean hasBaseContract(FInterface api){  if (api.getBase() != null) {    return api.getBase().getContract() != null || hasBaseContract(api.getBase());  }  return false;}  }
class C{  public byte[] toBlock(boolean compress) throws IOException {  ByteArrayOutputStream baos=new ByteArrayOutputStream();  baos.write(0);  baos.write(0);  baos.write(0);  baos.write(0);  byte[] payload=this.getBytes();  if (payload.length < 128) {    compress=false;  }  baos.write(compress ? 1 : 0);  baos.write(Varint.encodeSignedLong(this.baseTimestamp));  OutputStream out=baos;  if (compress) {    out=new GZIPOutputStream(out);  }  out.write(payload,0,payload.length);  out.flush();  out.close();  byte[] data=baos.toByteArray();  int len=data.length;  data[0]=(byte)((len >>> 24) & 0xff);  data[1]=(byte)((len >>> 16) & 0xff);  data[2]=(byte)((len >>> 8) & 0xff);  data[3]=(byte)(len & 0xff);  return data;}  }
class C{  public static void main(String... args){  new Coverage().run(args);}  }
class C{  public String toString(Map cpInt2Str,Map lbInt2Str){  String str="";  String labelStr=(String)lbInt2Str.get(new Integer(label));  if (labelStr != null) {    str+=labelStr + " ";  }  String cpStr=(String)cpInt2Str.get(new Integer(cp));  if (cpStr != null) {    str+=cpStr + " ";  }  str+=Integer.toString(idx) + " " + Double.toString(wgt);  return str;}  }
class C{  public static WorldBuilder createSilentPlayerless(){  return new WorldBuilder(new ImmutablePlayerInformationCache(PlayerInformation.theSingleplayerPlayer()),SeedHistoryLogger.createDisabled());}  }
class C{  public TextEditorPane(int textMode,boolean wordWrapEnabled,FileLocation loc,String defaultEnc) throws IOException {  super(textMode);  setLineWrap(wordWrapEnabled);  init(loc,defaultEnc);}  }
class C{  public EightPuzzleViewCtrl(StackPane viewRoot){  GridPane gridPane=new GridPane();  viewRoot.getChildren().add(gridPane);  viewRoot.setAlignment(Pos.CENTER);  gridPane.maxWidthProperty().bind(Bindings.min(viewRoot.widthProperty(),viewRoot.heightProperty()).subtract(20));  gridPane.maxHeightProperty().bind(Bindings.min(viewRoot.widthProperty(),viewRoot.heightProperty()).subtract(10));  RowConstraints c1=new RowConstraints();  c1.setPercentHeight(100.0 / 3);  ColumnConstraints c2=new ColumnConstraints();  c2.setPercentWidth(100.0 / 3);  gridPane.setHgap(10);  gridPane.setVgap(10);  for (int i=0; i < 3; i++) {    gridPane.getRowConstraints().add(c1);    gridPane.getColumnConstraints().add(c2);  }  Font font=Font.font(40);  for (int i=0; i < 9; i++) {    Button btn=new Button();    btn.setOnAction(null);    btn.setFont(font);    btn.setMaxSize(Double.MAX_VALUE,Double.MAX_VALUE);    tileBtns[i]=btn;    gridPane.add(btn,i % 3,i / 3);  }}  }
class C{  public WeightedChoice(Map<T,? extends Number> item_weights,Random random,double threshold){  if (item_weights.isEmpty())   throw new IllegalArgumentException("Item weights must be non-empty");  int item_count=item_weights.size();  item_pairs=new ArrayList<ItemPair>(item_count);  double sum=0;  for (  Map.Entry<T,? extends Number> entry : item_weights.entrySet()) {    double value=entry.getValue().doubleValue();    if (value <= 0)     throw new IllegalArgumentException("Weights must be > 0");    sum+=value;  }  double bucket_weight=1.0 / item_weights.size();  Queue<ItemPair> light_weights=new LinkedList<ItemPair>();  Queue<ItemPair> heavy_weights=new LinkedList<ItemPair>();  for (  Map.Entry<T,? extends Number> entry : item_weights.entrySet()) {    double value=entry.getValue().doubleValue() / sum;    enqueueItem(entry.getKey(),value,bucket_weight,light_weights,heavy_weights);  }  while (!heavy_weights.isEmpty() || !light_weights.isEmpty()) {    ItemPair heavy_item=heavy_weights.poll();    ItemPair light_item=light_weights.poll();    double light_weight=0;    T light=null;    T heavy=null;    if (light_item != null) {      light_weight=light_item.weight;      light=light_item.light;    }    if (heavy_item != null) {      heavy=heavy_item.heavy;      double new_weight=heavy_item.weight - (bucket_weight - light_weight);      if (new_weight > threshold)       enqueueItem(heavy,new_weight,bucket_weight,light_weights,heavy_weights);    }    light_weight*=item_count;    item_pairs.add(new ItemPair(light,heavy,light_weight));  }  this.random=random;}  }
class C{  public ImmutableListMultimap<String,String> parameters(){  return parameters;}  }
class C{  private void handleIntent(Intent intent){  trackId=intent.getLongExtra(EXTRA_TRACK_ID,-1L);  markerId=intent.getLongExtra(EXTRA_MARKER_ID,-1L);  if (markerId != -1L) {    Waypoint waypoint=myTracksProviderUtils.getWaypoint(markerId);    if (waypoint == null) {      finish();      return;    }    trackId=waypoint.getTrackId();  }  if (trackId == -1L) {    finish();    return;  }  Track track=myTracksProviderUtils.getTrack(trackId);  if (track == null) {    if (markerId == -1L) {      track=myTracksProviderUtils.getLastTrack();      if (track != null) {        trackId=track.getId();        return;      }    }    finish();    return;  }}  }
class C{  public synchronized void config(String msg){  LogRecord record=new LogRecord(Level.CONFIG,msg);  log(record);}  }
class C{  @SuppressWarnings("unchecked") public void output(Database db,Result r,StreamFactory streamOpener,Pattern filter) throws IOException {  List<Relation<?>> ra=new LinkedList<>();  List<OrderingResult> ro=new LinkedList<>();  List<Clustering<?>> rc=new LinkedList<>();  List<IterableResult<?>> ri=new LinkedList<>();  List<SettingsResult> rs=new LinkedList<>();  List<Result> otherres=new LinkedList<>();{    List<Result> results=ResultUtil.filterResults(db.getHierarchy(),r,Result.class);    for (    Result res : results) {      if (filter != null) {        final String nam=res.getShortName();        if (nam == null || !filter.matcher(nam).find()) {          continue;        }      }      if (res instanceof Database) {        continue;      }      if (res instanceof Relation) {        ra.add((Relation<?>)res);        continue;      }      if (res instanceof OrderingResult) {        ro.add((OrderingResult)res);        continue;      }      if (res instanceof Clustering) {        rc.add((Clustering<?>)res);        continue;      }      if (res instanceof IterableResult) {        ri.add((IterableResult<?>)res);        continue;      }      if (res instanceof SettingsResult) {        rs.add((SettingsResult)res);        continue;      }      otherres.add(res);    }  }  writeSettingsResult(streamOpener,rs);  for (  IterableResult<?> rii : ri) {    writeIterableResult(streamOpener,rii);  }  for (  Clustering<?> c : rc) {    NamingScheme naming=new SimpleEnumeratingScheme(c);    for (    Cluster<?> clus : c.getAllClusters()) {      writeClusterResult(db,streamOpener,(Clustering<Model>)c,(Cluster<Model>)clus,ra,naming);    }  }  for (  OrderingResult ror : ro) {    writeOrderingResult(db,streamOpener,ror,ra);  }  for (  Result otherr : otherres) {    writeOtherResult(streamOpener,otherr);  }}  }
class C{  private void configureKeyInputs(){  getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke(45,0,false),ZoomDirection.IN);  getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke(47,0,false),ZoomDirection.OUT);  visualisation.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke(38,0,false),TranslationDirection.NORTH);  visualisation.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke(40,0,false),TranslationDirection.SOUTH);  visualisation.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke(37,0,false),TranslationDirection.WEST);  visualisation.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke(39,0,false),TranslationDirection.EAST);  getActionMap().put(ZoomDirection.OUT,new ZoomAction(ZoomDirection.OUT));  getActionMap().put(ZoomDirection.IN,new ZoomAction(ZoomDirection.IN));  visualisation.getActionMap().put(TranslationDirection.NORTH,new TranslationAction(TranslationDirection.NORTH));  visualisation.getActionMap().put(TranslationDirection.SOUTH,new TranslationAction(TranslationDirection.SOUTH));  visualisation.getActionMap().put(TranslationDirection.WEST,new TranslationAction(TranslationDirection.WEST));  visualisation.getActionMap().put(TranslationDirection.EAST,new TranslationAction(TranslationDirection.EAST));}  }
class C{  private void checkViewsAreValid(DbObject tableOrView){  for (  DbObject view : tableOrView.getChildren()) {    if (view instanceof TableView) {      String sql=((TableView)view).getQuery();      session.prepare(sql);      checkViewsAreValid(view);    }  }}  }
class C{  public void actionPerformed(ActionEvent e){  DataModel dataModel=getDataEditor().getSelectedDataModel();  if (dataModel instanceof DataSet) {    DataSet dataSet=(DataSet)dataModel;    int[] selectedIndices=dataSet.getSelectedIndices();    if (selectedIndices.length == 0) {      JOptionPane.showMessageDialog(getDataEditor(),"No columns have been selected.");      return;    }    DataSet selection=dataSet.subsetColumns(selectedIndices);    DataModelList list=new DataModelList();    list.add(selection);    getDataEditor().reset(list);    getDataEditor().selectFirstTab();  } else   if (dataModel instanceof CorrelationMatrix) {    CorrelationMatrix corrMatrix=(CorrelationMatrix)dataModel;    List<String> selectedNames=corrMatrix.getSelectedVariableNames();    if (selectedNames.isEmpty()) {      JOptionPane.showMessageDialog(getDataEditor(),"No columns have been selected.");      return;    }    CorrelationMatrix submatrix=corrMatrix.getSubCorrMatrix(selectedNames.toArray(new String[0]));    DataModelList list=new DataModelList();    list.add(submatrix);    getDataEditor().reset(list);    getDataEditor().selectFirstTab();  } else   if (dataModel instanceof ICovarianceMatrix) {    ICovarianceMatrix corrMatrix=(ICovarianceMatrix)dataModel;    List<String> selectedNames=corrMatrix.getSelectedVariableNames();    if (selectedNames.isEmpty()) {      JOptionPane.showMessageDialog(getDataEditor(),"No columns have been selected.");      return;    }    ICovarianceMatrix submatrix=corrMatrix.getSubmatrix(selectedNames.toArray(new String[0]));    DataModelList list=new DataModelList();    list.add(submatrix);    getDataEditor().reset(list);    getDataEditor().selectFirstTab();  } else {    throw new IllegalArgumentException("Data subsetting requires a tabular " + "data set or a covariance (correlation) matrix.");  }}  }
class C{  public static boolean narrows(DataKey source,DataKey target){  return target.getElements().containsAll(source.getElements());}  }
class C{  public static final String makeXmlJavaIdentifier(String name){  if (name.indexOf('-') >= 0)   name=replace(name,'-',"$1");  if (name.indexOf('.') >= 0)   name=replace(name,'.',"$2");  if (name.indexOf(':') >= 0)   name=replace(name,':',"$3");  return name;}  }
class C{  public void sendRequestEntity(final HttpEntityEnclosingRequest request) throws HttpException, IOException {  if (request == null) {    throw new IllegalArgumentException("HTTP request may not be null");  }  assertOpen();  if (request.getEntity() == null) {    return;  }  this.entityserializer.serialize(this.outbuffer,request,request.getEntity());}  }
class C{  public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(4);  newVector.addElement(new Option("\tMinimize expected misclassification cost. Default is to\n" + "\treweight training instances according to costs per class","M",0,"-M"));  newVector.addElement(new Option("\tFile name of a cost matrix to use. If this is not supplied,\n" + "\ta cost matrix will be loaded on demand. The name of the\n" + "\ton-demand file is the relation name of the training data\n"+ "\tplus \".cost\", and the path to the on-demand file is\n"+ "\tspecified with the -N option.","C",1,"-C <cost file name>"));  newVector.addElement(new Option("\tName of a directory to search for cost files when loading\n" + "\tcosts on demand (default current directory).","N",1,"-N <directory>"));  newVector.addElement(new Option("\tThe cost matrix in Matlab single line format.","cost-matrix",1,"-cost-matrix <matrix>"));  newVector.addAll(Collections.list(super.listOptions()));  return newVector.elements();}  }
class C{  public VolatileSurfaceManager createVolatileManager(SunVolatileImage vImg,Object context){  GraphicsConfiguration gc=vImg.getGraphicsConfig();  if (gc instanceof GLXGraphicsConfig) {    return new GLXVolatileSurfaceManager(vImg,context);  } else   if (gc instanceof XRGraphicsConfig) {    return new XRVolatileSurfaceManager(vImg,context);  } else {    return new X11VolatileSurfaceManager(vImg,context);  }}  }
class C{  public static String formatDateTime(Context context,long time){  return DateUtils.formatDateTime(context,time,DateUtils.FORMAT_SHOW_DATE | DateUtils.FORMAT_NUMERIC_DATE) + " " + DateUtils.formatDateTime(context,time,DateUtils.FORMAT_SHOW_TIME).toString();}  }
class C{  public void registerContext(@Observes final AfterBeanDiscovery event,BeanManager manager){  Context context=NGSessionScopeContext.getINSTANCE();  event.addContext(context);}  }
class C{  public static int[] insert(int[] dest,int[] src,int offset){  int[] temp=new int[dest.length + src.length];  System.arraycopy(dest,0,temp,0,offset);  System.arraycopy(src,0,temp,offset,src.length);  System.arraycopy(dest,offset,temp,src.length + offset,dest.length - offset);  return temp;}  }
class C{  public int length(){  return str().length();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public OMWarpingImage(BufferedImage bi,GeoCoordTransformation transform,WorldFile worldfile){  setWarp(bi,transform,worldfile);}  }
class C{  static Matsim4UrbansimConfigType unmarschal(String matsim4urbansimConfigFilename){  JAXBUnmarshalV3 um=new JAXBUnmarshalV3();  Matsim4UrbansimConfigType m4uConfigType=null;  m4uConfigType=um.unmarshal(matsim4urbansimConfigFilename);  if (m4uConfigType == null) {    throw new RuntimeException("Unmarschalling failed. SHUTDOWN MATSim!");  }  return m4uConfigType;}  }
class C{  public static void writeAttribute(final XMLStreamWriter writer,final String attributeName,final float value) throws XMLStreamException {  writer.writeAttribute(attributeName,XMLConvert.toString(value));}  }
class C{  public File chooseForWrite(){  if (mWriting) {    throw new IllegalStateException("uncommitted write already in progress");  }  if (!mReal.exists()) {    try {      mReal.createNewFile();    } catch (    IOException e) {    }  }  if (mTemp.exists()) {    mTemp.delete();  }  mWriting=true;  return mTemp;}  }
class C{  public void clearExif(){  mData=new ExifData(DEFAULT_BYTE_ORDER);}  }
class C{  public RrdSyncThreadPool(ScheduledExecutorService syncExecutor){  if (syncExecutor == null) {    throw new NullPointerException("syncExecutor");  }  this.syncExecutor=syncExecutor;}  }
class C{  public boolean add(int key,double value){  return add(tuple(key,value));}  }
class C{  public static MethodOperand STATIC(MethodReference ref,RVMMethod target){  return new MethodOperand(ref,target,STATIC);}  }
class C{  @Override public Object convert(byte[] tuple){  String str;  if (tuple == null) {    if (err.isConnected()) {      err.emit(new KeyValPair<String,String>(null,"null tuple"));    }    errorTupleCount++;    return null;  }  try {    str=new String(tuple,"UTF-8");  } catch (  UnsupportedEncodingException e1) {    if (err.isConnected()) {      err.emit(new KeyValPair<String,String>(tuple.toString(),"Encoding not supported"));    }    errorTupleCount++;    LOG.error("Encoding not supported",e1);    throw new RuntimeException(e1);  }  try {    finder.setKeyCount(0);    finder.getKeyValMap().clear();    while (!finder.isEnd()) {      jsonParser.parse(str,finder,true);      if (finder.getKeyCount() == columnFields.size()) {        break;      }    }    jsonParser.reset();    return setPojoFields(finder.getKeyValMap());  } catch (  ParseException|IllegalAccessException|InstantiationException e) {    if (err.isConnected()) {      err.emit(new KeyValPair<String,String>(str,e.getMessage()));    }    errorTupleCount++;    LOG.error("Exception in parsing the record",e);    throw new RuntimeException(e);  }}  }
class C{  public long logIndex(){  return logIndex;}  }
class C{  public static void main(String[] args){  jh61b.junit.textui.runClasses(TestGuitarString.class);}  }
class C{  public void remove(Aspect aspect){  this.aspect.remove(aspect);}  }
class C{  public void addOtherDef(Element definition){  if (otherDefs == null) {    otherDefs=new LinkedList();  }  otherDefs.add(definition);}  }
class C{  private static long freeSpaceCalculation(String path){  StatFs stat=new StatFs(path);  long blockSize=stat.getBlockSize();  long availableBlocks=stat.getAvailableBlocks();  return availableBlocks * blockSize / 1024;}  }
class C{  public void accessBreakpoint(int lineNumber,int op,BPINSTRUCTION_STATUS status){  if (this.rtprog != null) {    HashMap<String,FunctionProgramBlock> funcMap=this.rtprog.getFunctionProgramBlocks();    if (funcMap != null && !funcMap.isEmpty()) {      for (      Entry<String,FunctionProgramBlock> e : funcMap.entrySet()) {        location=e.getKey();        FunctionProgramBlock fpb=e.getValue();        if (fpb instanceof ExternalFunctionProgramBlock)         continue; else {          for (          ProgramBlock pb : fpb.getChildBlocks())           accessProgramBlockBreakpoint(pb,lineNumber,op,status);        }      }    }    location=DMLProgram.constructFunctionKey(DMLProgram.DEFAULT_NAMESPACE,"main");    for (    ProgramBlock pb : this.rtprog.getProgramBlocks()) {      if (pb != null)       accessProgramBlockBreakpoint(pb,lineNumber,op,status);    }  }}  }
class C{  private void removeStaleSpans(){  Iterator<Entry<String,TreeSet<CacheSpan>>> iterator=cachedSpans.entrySet().iterator();  while (iterator.hasNext()) {    Entry<String,TreeSet<CacheSpan>> next=iterator.next();    Iterator<CacheSpan> spanIterator=next.getValue().iterator();    boolean isEmpty=true;    while (spanIterator.hasNext()) {      CacheSpan span=spanIterator.next();      if (!span.file.exists()) {        spanIterator.remove();        if (span.isCached) {          totalSpace-=span.length;        }        notifySpanRemoved(span);      } else {        isEmpty=false;      }    }    if (isEmpty) {      iterator.remove();    }  }}  }
class C{  public IPlayer opponent(IPlayer p){  if (p == xPlayer) {    return oPlayer;  }  if (p == oPlayer) {    return xPlayer;  }  return null;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  float progress=0;  int a;  int filterSize=3;  double n;  double sum;  int[] dX;  int[] dY;  double[] weightsD;  double[] weightsI;  int midPoint;  int numPixelsInFilter;  boolean reflectAtBorders=false;  double sigmaD=0;  double sigmaI=0;  double recipRoot2PiTimesSigmaD;  double recipRoot2PiTimesSigmaI;  double twoSigmaSqrD;  double twoSigmaSqrI;  double zN, zFinal;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      sigmaD=Double.parseDouble(args[i]);    } else     if (i == 3) {      sigmaI=Double.parseDouble(args[i]);    } else     if (i == 4) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if (sigmaD < 0.5) {    sigmaD=0.5;  } else   if (sigmaD > 20) {    sigmaD=20;  }  if (sigmaI < 0.001) {    sigmaI=0.001;  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    recipRoot2PiTimesSigmaD=1 / (Math.sqrt(2 * Math.PI) * sigmaD);    twoSigmaSqrD=2 * sigmaD * sigmaD;    recipRoot2PiTimesSigmaI=1 / (Math.sqrt(2 * Math.PI) * sigmaI);    twoSigmaSqrI=2 * sigmaI * sigmaI;    double weight;    for (int i=0; i <= 250; i++) {      weight=recipRoot2PiTimesSigmaD * Math.exp(-1 * (i * i) / twoSigmaSqrD);      if (weight <= 0.001) {        filterSize=i * 2 + 1;        break;      }    }    if (filterSize % 2 == 0) {      filterSize++;    }    if (filterSize < 3) {      filterSize=3;    }    numPixelsInFilter=filterSize * filterSize;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    weightsD=new double[numPixelsInFilter];    weightsI=new double[numPixelsInFilter];    midPoint=(int)Math.floor(filterSize / 2) + 1;    a=0;    for (row=0; row < filterSize; row++) {      for (col=0; col < filterSize; col++) {        x=col - midPoint;        y=row - midPoint;        dX[a]=x;        dY[a]=y;        weight=recipRoot2PiTimesSigmaD * Math.exp(-1 * (x * x + y * y) / twoSigmaSqrD);        weightsD[a]=weight;        a++;      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          sum=0;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            zN=inputFile.getValue(y,x);            if (zN != noData) {              weight=recipRoot2PiTimesSigmaI * Math.exp(-1 * ((zN - z) * (zN - z)) / twoSigmaSqrI);              weight=weightsD[a] * weight;              weightsI[a]=weight;              sum+=weight;            }          }          zFinal=0;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            zN=inputFile.getValue(y,x);            if (zN != noData) {              zFinal+=weightsI[a] * zN / sum;            }          }          outputFile.setValue(row,col,zFinal);        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void close(){  maxSizeProperty.get().unbind();  prefSizeProperty.get().unbind();  if (sizeProperty.get().get() > getDefaultDrawerSize()) {    tempDrawerSize=prefSizeProperty.get().get();    ParallelTransition parallelTransition=new ParallelTransition(new OutDrawerSizeTransition(),new DrawerTransition(translateProperty.get(),initTranslate.doubleValue()));    parallelTransition.setOnFinished(null);    parallelTransition.play();  } else {    if (((partialTransition != null && partialTransition.getStatus().equals(Status.STOPPED)) || partialTransition == null)) {      drawerTransition.setRate(-1);      drawerTransition.setOnFinished(null);      if (this.drawerTransition.getStatus().equals(Status.STOPPED)) {        if (isShown())         this.drawerTransition.playFrom(this.drawerTransition.getCycleDuration()); else         this.drawerTransition.play();      }    } else {      partialClose();    }    tempDrawerSize=getDefaultDrawerSize();  }}  }
class C{  private void filterInitiators(Collection<Initiator> initiators){  Iterator<Initiator> initiatorIterator=initiators.iterator();  while (initiatorIterator.hasNext()) {    Initiator initiator=initiatorIterator.next();    if (!initiator.getProtocol().equalsIgnoreCase(Initiator.Protocol.RBD.name())) {      initiatorIterator.remove();    }  }}  }
class C{  private Map<Id<ActivityFacility>,SimpleFeature> initShapeFeatures(String shapefile){  try {    SimpleFeatureSource fts=ShapeFileReader.readDataFile(shapefile);    SimpleFeatureIterator fIt=fts.getFeatures().features();    Map<Id<ActivityFacility>,SimpleFeature> featureMap=new ConcurrentHashMap<>();    while (fIt.hasNext()) {      SimpleFeature feature=fIt.next();      featureMap.put(Id.create(feature.getAttribute(ZONE_ID).toString(),ActivityFacility.class),feature);    }    fIt.close();    return featureMap;  } catch (  IOException ioe) {    ioe.printStackTrace();  }  log.warn("Could not initialize zone freatures from shape-file. Using radius (" + radius + " meter) and the zone centroid instead to distribute locations.");  return null;}  }
class C{  public boolean hasMoreToFeed(){  if (eof)   return pendinglen > 0; else   refillBuffer();  return pendinglen > 0;}  }
class C{  public WebappTemplateLoader(ServletContext servletContext,String subdirPath){  if (servletContext == null) {    throw new IllegalArgumentException("servletContext == null");  }  if (subdirPath == null) {    throw new IllegalArgumentException("path == null");  }  subdirPath=subdirPath.replace('\\','/');  if (!subdirPath.endsWith("/")) {    subdirPath+="/";  }  if (!subdirPath.startsWith("/")) {    subdirPath="/" + subdirPath;  }  this.subdirPath=subdirPath;  this.servletContext=servletContext;}  }
class C{  public int number(){  return numStates;}  }
class C{  public void addLayoutComponent(Component comp,Object constraints){synchronized (comp.getTreeLock()) {    if (constraints == null) {      constraints="";    }    if (constraints instanceof String) {      addLayoutComponent((String)constraints,comp);    } else {      throw new IllegalArgumentException("cannot add to layout: constraint must be a string");    }  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case DomPackage.TEXT__TEXT:    setText(TEXT_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  void discoverInitiatorsOnCluster(VPlexClusterInfo clusterInfo) throws VPlexApiException {  ClientResponse response=null;  try {    URI requestURI=_vplexApiClient.getBaseURI().resolve(VPlexApiConstants.URI_INITIATOR_DISCOVERY);    s_logger.info("Initiator discovery URI is {}",requestURI.toString());    Map<String,String> argsMap=new HashMap<String,String>();    argsMap.put(VPlexApiConstants.ARG_DASH_C,clusterInfo.getPath());    JSONObject postDataObject=VPlexApiUtils.createPostData(argsMap,false);    s_logger.info("Initiator discovery POST data is {}",postDataObject.toString());    response=_vplexApiClient.post(requestURI,postDataObject.toString());    String responseStr=response.getEntity(String.class);    s_logger.info("Initiator discovery response is {}",responseStr);    if (response.getStatus() != VPlexApiConstants.SUCCESS_STATUS) {      if (response.getStatus() == VPlexApiConstants.ASYNC_STATUS) {        _vplexApiClient.waitForCompletion(response);      } else {        throw new VPlexApiException(String.format("Request initiator discovery failed with Status: %s",response.getStatus()));      }    }  } catch (  VPlexApiException vae) {    throw vae;  }catch (  Exception e) {    throw new VPlexApiException(String.format("Exception during initiator discovery: %s",e.getMessage()),e);  } finally {    if (response != null) {      response.close();    }  }}  }
class C{  public boolean isIncludeInternalDTDDeclarations(){  return includeInternalDTDDeclarations;}  }
class C{  public static boolean save(Bitmap orgBitmap,String filePath){  if (orgBitmap == null) {    return false;  }  if (filePath == null) {    return false;  }  boolean isSaveSuccess=true;  int width=orgBitmap.getWidth();  int height=orgBitmap.getHeight();  int dummySize=0;  byte[] dummyBytesPerRow=null;  boolean hasDummy=false;  if (isBmpWidth4Times(width)) {    hasDummy=true;    dummySize=BMP_WIDTH_OF_TIMES - (width % BMP_WIDTH_OF_TIMES);    dummyBytesPerRow=new byte[dummySize * BYTE_PER_PIXEL];    for (int i=0; i < dummyBytesPerRow.length; i++) {      dummyBytesPerRow[i]=(byte)0xFF;    }  }  int[] pixels=new int[width * height];  int imageSize=pixels.length * BYTE_PER_PIXEL + (height * dummySize * BYTE_PER_PIXEL);  int imageDataOffset=0x36;  int fileSize=imageSize + imageDataOffset;  orgBitmap.getPixels(pixels,0,width,0,0,width,height);  ByteBuffer buffer=ByteBuffer.allocate(fileSize);  try {    buffer.put((byte)0x42);    buffer.put((byte)0x4D);    buffer.put(writeInt(fileSize));    buffer.put(writeShort((short)0));    buffer.put(writeShort((short)0));    buffer.put(writeInt(imageDataOffset));    buffer.put(writeInt(0x28));    buffer.put(writeInt(width));    buffer.put(writeInt(height));    buffer.put(writeShort((short)1));    buffer.put(writeShort((short)24));    buffer.put(writeInt(0));    buffer.put(writeInt(imageSize));    buffer.put(writeInt(0));    buffer.put(writeInt(0));    buffer.put(writeInt(0));    buffer.put(writeInt(0));    int row=height;    int col=width;    int startPosition=0;    int endPosition=0;    while (row > 0) {      startPosition=(row - 1) * col;      endPosition=row * col;      for (int i=startPosition; i < endPosition; i++) {        buffer.put(write24BitForPixcel(pixels[i]));        if (hasDummy) {          if (isBitmapWidthLastPixcel(width,i)) {            buffer.put(dummyBytesPerRow);          }        }      }      row--;    }    FileOutputStream fos=new FileOutputStream(filePath);    fos.write(buffer.array());    fos.close();  } catch (  IOException e1) {    e1.printStackTrace();    isSaveSuccess=false;  } finally {  }  return isSaveSuccess;}  }
class C{  public LimeTextField(int columns){  super(columns);  init();}  }
class C{  @Override protected void register(PackagerFactory packagerFactory){}  }
class C{  public DrawerBuilder withItemAnimator(RecyclerView.ItemAnimator itemAnimator){  mItemAnimator=itemAnimator;  return this;}  }
class C{  protected void assertScript(String text) throws Exception {  assertScript(text,getTestClassName());}  }
class C{  public G createGraph(){  return factory.createGraph();}  }
class C{  private void onMouseOver(){  tooltip.getStyle().setLeft(panel.getOffsetWidth() / 2 - tooltipArrow.getOffsetWidth() / 2,Style.Unit.PX);  tooltip.getStyle().setTop(3,Style.Unit.PX);  int screenSize=Document.get().getClientWidth();  if (panel.getAbsoluteLeft() + tooltip.getOffsetWidth() > screenSize) {    tooltipBody.getStyle().setRight(panel.getAbsoluteLeft() + tooltip.getOffsetWidth() - screenSize,Style.Unit.PX);  }  panel.setStyleName(toolbarResources.toolbar().popupButtonPanelOver());}  }
class C{  public static int intersection(int a[],int lena,int b[],int lenb,int[] target){  if (lena > lenb) {    int ti=lena;    lena=lenb;    lenb=ti;    int[] ta=a;    a=b;    b=ta;  }  if (lena == 0)   return 0;  if ((lenb >> 3) >= lena) {    return intersectionBinarySearch(a,lena,b,lenb,target);  }  int icount=0;  int i=0, j=0;  int doca=a[i], docb=b[j];  for (; ; ) {    if (doca > docb) {      if (++j >= lenb)       break;      docb=b[j];    } else     if (doca < docb) {      if (++i >= lena)       break;      doca=a[i];    } else {      target[icount++]=doca;      if (++i >= lena)       break;      doca=a[i];      if (++j >= lenb)       break;      docb=b[j];    }  }  return icount;}  }
class C{  public void remove(final String logName){  final AutoFile file=new AutoFile(logName);  file.delete();}  }
class C{  public MosaicDefinitionMetaDataPair(final MosaicDefinition mosaicDefinition,final DefaultMetaData metaData){  super("mosaic","meta",mosaicDefinition,metaData);}  }
class C{  private Socket[] newSocketChannelPair() throws IOException {  ServerSocketChannel serverSocketChannel=ServerSocketChannel.open();  serverSocketChannel.socket().bind(new InetSocketAddress(0));  SocketChannel clientSocketChannel=SocketChannel.open();  clientSocketChannel.connect(serverSocketChannel.socket().getLocalSocketAddress());  SocketChannel server=serverSocketChannel.accept();  serverSocketChannel.close();  return new Socket[]{clientSocketChannel.socket(),server.socket()};}  }
class C{  public IllegalAuthConfTypeException(String message){  super(message);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public FilterFunctionEnvironment(FrameManager frameManager){  super(frameManager);}  }
class C{  public boolean discharge(ItemStack stack,int limit){  if (stack == null || !Info.isIc2Available())   return false;  double amount=capacity - energyStored;  if (amount <= 0)   return false;  if (limit > 0 && limit < amount)   amount=limit;  amount=ElectricItem.manager.discharge(stack,amount,tier,limit > 0,true,false);  energyStored+=amount;  return amount > 0;}  }
class C{  public void updateContents(){  clear();  String displayCategory=getDisplayCategory();  Display[] displays=mDisplayManager.getDisplays(displayCategory);  addAll(displays);  Log.d(TAG,"There are currently " + displays.length + " displays connected.");  for (  Display display : displays) {    Log.d(TAG,"  " + display);  }}  }
class C{  public StaticMap http(){  this.https=false;  return this;}  }
class C{  public Vec3D(){}  }
class C{  public void callVisitors(ExpressionOwner owner,XPathVisitor visitor){  m_mainExp.callVisitors(this,visitor);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String f=getString(stack);  if (f != null)   Seeker.getInstance().addArchiveDirectory(f,Seeker.PICTURE_DIR_MASK);  return null;}  }
class C{  @Override public void respond(String response){  getBot().sendRaw().rawLine(response);}  }
class C{  private void prepareForEncoding(){  Attribute msgIntAttr=removeAttribute(Attribute.MESSAGE_INTEGRITY);  Attribute fingerprint=removeAttribute(Attribute.FINGERPRINT);  String software=System.getProperty(StackProperties.SOFTWARE);  if (getAttribute(Attribute.SOFTWARE) == null && software != null && software.length() > 0) {    putAttribute(AttributeFactory.createSoftwareAttribute(software.getBytes()));  }  if (msgIntAttr != null) {    putAttribute(msgIntAttr);  }  if (fingerprint == null && Boolean.getBoolean(StackProperties.ALWAYS_SIGN)) {    fingerprint=AttributeFactory.createFingerprintAttribute();  }  if (fingerprint != null) {    putAttribute(fingerprint);  }}  }
class C{  public boolean menuOpenSlideAllowed(float dx){  if (mMode == SlidingMenu.LEFT) {    return dx < 0;  } else   if (mMode == SlidingMenu.RIGHT) {    return dx > 0;  } else   if (mMode == SlidingMenu.LEFT_RIGHT) {    return true;  }  return false;}  }
class C{  String formatRomanNumerals(int num){  return formatRomanNumerals(0,num);}  }
class C{  private void copyToArrays(final float minX,final float minY,final float maxX,final float maxY,final boolean keepFont,final boolean breakOnSpace,final boolean findLines,final String punctuation,final boolean isWordlist) throws PdfException {  final boolean debugSplit=false;  int count=pdf_data.getRawTextElementCount() + increment;  initArrays(count);  boolean linesScanned=false;  count-=increment;  float last_pt, min, max, pt, linePos;  String char_width="";  StringBuilder text=new StringBuilder();  Fragment fragment;  for (int i=0; i < count; i++) {    fragment=new Fragment(pdf_data,i);    if (debugSplit) {      System.out.println("raw data=" + fragment.getRawData());      System.out.println("text data=" + PdfGroupingAlgorithms.removeHiddenMarkers(fragment.getRawData()));    }    if (isFragmentWithinArea(fragment,minX,minY,maxX,maxY)) {      if (!linesScanned && findLines) {        findVerticalLines(minX,minY,maxX,maxY,fragment.getWritingMode());        linesScanned=true;      }      if (fragment.getWritingMode() == PdfData.HORIZONTAL_LEFT_TO_RIGHT || fragment.getWritingMode() == PdfData.HORIZONTAL_RIGHT_TO_LEFT) {        pt=fragment.getX1();        last_pt=fragment.getX1();        min=minX;        max=maxX;      } else {        pt=fragment.getY2();        last_pt=fragment.getY2();        min=minY;        max=maxY;      }      linePos=-1;      final char[] line=fragment.getRawData().toCharArray();      final int end=line.length;      int pointer=0;      String value, textValue="", pt_reached;      if (!fragment.getRawData().contains(MARKER)) {        text=new StringBuilder(fragment.getRawData());      }      boolean isFirstValue=true, breakPointset=false;      while (pointer < end) {        while (true) {          if (line[pointer] != MARKER2) {            final int startPointer=pointer;            while ((pointer < end) && (line[pointer] != MARKER2)) {              pointer++;            }            value=fragment.getRawData().substring(startPointer,pointer);          } else {            while ((pointer < end) && (line[pointer] != MARKER2)) {              pointer++;            }            pointer++;            int startPointer=pointer;            while ((pointer < end) && (line[pointer] != MARKER2)) {              pointer++;            }            pt_reached=fragment.getRawData().substring(startPointer,pointer);            pointer++;            startPointer=pointer;            while ((pointer < end) && (line[pointer] != MARKER2)) {              pointer++;            }            char_width=fragment.getRawData().substring(startPointer,pointer);            pointer++;            startPointer=pointer;            while ((pointer < end) && (line[pointer] != MARKER2)) {              pointer++;            }            value=fragment.getRawData().substring(startPointer,pointer);            textValue=value;            if (!pt_reached.isEmpty()) {              last_pt=pt;              pt=Float.parseFloat(pt_reached);              if (breakPointset) {                alterCoordsBasedOnWritingMode(fragment,pt);                breakPointset=false;              }            }            if (isXMLExtraction && last_pt < min && pt > min && !value.startsWith(Fonts.fb)) {              value=Fonts.getActiveFontTag(fragment.getRawData(),"") + value;            }          }          if (!char_width.isEmpty()) {            final float midPoint=pt + (Float.parseFloat(char_width) * 0.3f);            if ((midPoint > min) & (midPoint < max)) {              setFragmentCoord(fragment,min,max,pt);              break;            }          }          value="";          textValue="";          if (pointer >= end) {            break;          }        }        if (isFirstValue) {          isFirstValue=false;          if ((isXMLExtraction) && (keepFont) && (!value.startsWith(Fonts.fb))&& (!value.startsWith(GenericColorSpace.cb))) {            text.append(Fonts.getActiveFontTag(text.toString(),fragment.getRawData()));          }        }        boolean is_broken=false;        if (findLines && fragment.getCharacterSpacing() > 0 && text.toString().endsWith(" ")) {          final int counts=lineBreaks.size();          for (int jj=0; jj < counts; jj++) {            final int test_x=lineBreaks.elementAt(jj);            if ((last_pt < test_x) & (pt > test_x)) {              jj=counts;              is_broken=true;            }          }        }        final boolean endsWithPunctuation=checkForPunctuation(textValue,punctuation);        if (is_broken) {          text=writeOutFragment(keepFont,isWordlist,debugSplit,last_pt,pt,char_width,text,fragment,i,end,value);        } else         if (endsWithPunctuation || (breakOnSpace && (textValue.indexOf(' ') != -1 || value.endsWith(" "))) || textValue.contains("   ")) {          if (debugSplit) {            System.out.println("Break 2 endsWithPunctuation=" + endsWithPunctuation + " textValue="+ textValue+ '<'+ " value="+ value+ '<'+ " text="+ text+ '<');          }          pt=writeOut(keepFont,isWordlist,debugSplit,pt,char_width,text,fragment,i,value,textValue,endsWithPunctuation);          if (!char_width.isEmpty()) {            int ptr=0;            if (textValue.indexOf(' ') != -1) {              ptr=textValue.indexOf(' ');            }            if (isWordlist) {              final int len=textValue.length();              while (ptr < len && textValue.charAt(ptr) == ' ') {                ptr++;              }            }            if (ptr > 0) {              pt+=ptr * Float.parseFloat(char_width);            } else {              pt+=Float.parseFloat(char_width);            }            breakPointset=ptr > 0;          }          if ((breakOnSpace) & (nextSlot > 0)) {            hadSpace[nextSlot - 1]=true;          }          text=new StringBuilder(Fonts.getActiveFontTag(text.toString(),fragment.getRawData()));          alterCoordsBasedOnWritingMode(fragment,pt);        } else         if ((linePos != -1) & (pt > linePos)) {          text=writeOnVerticalLineBreak(keepFont,isWordlist,linePos,text,fragment,i,value);          linePos=-1;        } else {          if ((isXMLExtraction) && (value.endsWith(' ' + Fonts.fe))) {            value=Fonts.fe;            textValue="";            alterCoordsBasedOnWritingMode(fragment,last_pt);          }          text.append(value);        }      }      if (keepFont && isXMLExtraction && !text.toString().endsWith(Fonts.fe)&& !text.toString().endsWith(GenericColorSpace.ce)) {        text.append(Fonts.fe);      }      completeLine(keepFont,isWordlist,text,fragment,i);      text=new StringBuilder();    }  }  isUsed=new boolean[nextSlot];}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:43.823 -0500",hash_original_method="E2C49012EEA8722F341B549129350038",hash_generated_method="79103D178E82611667C3864ED717FAAA") public TestCase(String name){  fName=name;}  }
class C{  public ObjectColumn(Class type,int nrows,int capacity,Object defaultValue){  super(type,defaultValue);  if (capacity < nrows) {    throw new IllegalArgumentException("Capacity value can not be less than the row count.");  }  m_values=new Object[capacity];  try {    Cloneable def=(Cloneable)defaultValue;    Method m=def.getClass().getMethod("clone",(Class[])null);    for (int i=0; i < capacity; ++i) {      m_values[i]=m.invoke(m_defaultValue,(Object[])null);    }  } catch (  Exception e) {    if (defaultValue != null) {      Logger.getLogger(getClass().getName()).fine("Default value of type \"" + defaultValue.getClass().getName() + "\" is not "+ "cloneable. Using Object reference directly.");    }    Arrays.fill(m_values,defaultValue);  }  m_size=nrows;}  }
class C{  @Override public void closeWrite() throws IOException {  getDelegate().closeWrite();  logStream().close();}  }
class C{  public synchronized void releaseUpdateLock(){  updateCount--;  notifyAll();}  }
class C{  public void importFileData(IVeriniceArchive veriniceArchive) throws IOException, CommandException {  SaveAttachment saveFileCommand=new SaveAttachment();  IBaseDao<AttachmentFile,Serializable> dao=getDao(AttachmentFile.class);  for (  String fileName : attachmentMap.keySet()) {    Attachment attachment=attachmentMap.get(fileName);    AttachmentFile attachmentFile=dao.findById(attachment.getDbId());    attachmentFile.setFileData(veriniceArchive.getFileData(fileName));    if (attachmentFile.getFileData() != null) {      saveFileCommand.setElement(attachmentFile);      saveFileCommand=getCommandService().executeCommand(saveFileCommand);      saveFileCommand.clear();      dao.flush();      dao.clear();    } else {      log.warn("File was not imported. No file data: " + fileName);    }  }}  }
class C{  public static byte toByte(final String value){  return Byte.parseByte(value);}  }
class C{  public static void checkMainThread(){  checkState(sIsMainThread.get(),"Not main thread.");}  }
class C{  private void verifyUserPermisions(Initiator initiator){  if (initiator.getHost() == null) {    verifySystemAdminOrMonitorUser();  } else {    Host host=queryObject(Host.class,initiator.getHost(),false);    verifyAuthorizedInTenantOrg(host.getTenant(),getUserFromContext());  }}  }
class C{  protected void paintBorder(Graphics g){  if (isBorderPainted()) {    super.paintBorder(g);  }}  }
class C{  public BlockingObservableAssert<T> valuesCountIs(int count){  isNotNull();  assertThat(getBlockingObservableExecutor().getValuesEmitted().size()).isEqualTo(count);  return this;}  }
class C{  private Node createTryCatchFinally(Node tryBlock,Node catchBlocks,Node finallyBlock,int lineno){  boolean hasFinally=(finallyBlock != null) && (finallyBlock.getType() != Token.BLOCK || finallyBlock.hasChildren());  if (tryBlock.getType() == Token.BLOCK && !tryBlock.hasChildren() && !hasFinally) {    return tryBlock;  }  boolean hasCatch=catchBlocks.hasChildren();  if (!hasFinally && !hasCatch) {    return tryBlock;  }  Node handlerBlock=new Node(Token.LOCAL_BLOCK);  Jump pn=new Jump(Token.TRY,tryBlock,lineno);  pn.putProp(Node.LOCAL_BLOCK_PROP,handlerBlock);  if (hasCatch) {    Node endCatch=Node.newTarget();    pn.addChildToBack(makeJump(Token.GOTO,endCatch));    Node catchTarget=Node.newTarget();    pn.target=catchTarget;    pn.addChildToBack(catchTarget);    Node catchScopeBlock=new Node(Token.LOCAL_BLOCK);    Node cb=catchBlocks.getFirstChild();    boolean hasDefault=false;    int scopeIndex=0;    while (cb != null) {      int catchLineNo=cb.getLineno();      Node name=cb.getFirstChild();      Node cond=name.getNext();      Node catchStatement=cond.getNext();      cb.removeChild(name);      cb.removeChild(cond);      cb.removeChild(catchStatement);      catchStatement.addChildToBack(new Node(Token.LEAVEWITH));      catchStatement.addChildToBack(makeJump(Token.GOTO,endCatch));      Node condStmt;      if (cond.getType() == Token.EMPTY) {        condStmt=catchStatement;        hasDefault=true;      } else {        condStmt=createIf(cond,catchStatement,null,catchLineNo);      }      Node catchScope=new Node(Token.CATCH_SCOPE,name,createUseLocal(handlerBlock));      catchScope.putProp(Node.LOCAL_BLOCK_PROP,catchScopeBlock);      catchScope.putIntProp(Node.CATCH_SCOPE_PROP,scopeIndex);      catchScopeBlock.addChildToBack(catchScope);      catchScopeBlock.addChildToBack(createWith(createUseLocal(catchScopeBlock),condStmt,catchLineNo));      cb=cb.getNext();      ++scopeIndex;    }    pn.addChildToBack(catchScopeBlock);    if (!hasDefault) {      Node rethrow=new Node(Token.RETHROW);      rethrow.putProp(Node.LOCAL_BLOCK_PROP,handlerBlock);      pn.addChildToBack(rethrow);    }    pn.addChildToBack(endCatch);  }  if (hasFinally) {    Node finallyTarget=Node.newTarget();    pn.setFinally(finallyTarget);    pn.addChildToBack(makeJump(Token.JSR,finallyTarget));    Node finallyEnd=Node.newTarget();    pn.addChildToBack(makeJump(Token.GOTO,finallyEnd));    pn.addChildToBack(finallyTarget);    Node fBlock=new Node(Token.FINALLY,finallyBlock);    fBlock.putProp(Node.LOCAL_BLOCK_PROP,handlerBlock);    pn.addChildToBack(fBlock);    pn.addChildToBack(finallyEnd);  }  handlerBlock.addChildToBack(pn);  return handlerBlock;}  }
class C{  public boolean dataPacket(DataPacket packet){  return this.dataPacket(packet,false) != -1;}  }
class C{  protected void correctLink(Element e) throws BadLocationException, IOException {  int length=e.getEndOffset() - e.getStartOffset();  boolean endOfDoc=e.getEndOffset() == getLength() + 1;  if (endOfDoc)   length--;  String text=getText(e.getStartOffset(),length);  setOuterHTML(e,text);  Matcher spaceMatcher=Pattern.compile("(\\s+)$").matcher(text);  if (spaceMatcher.find()) {    String endingSpaces=spaceMatcher.group(1);    insertString(Math.min(getLength(),e.getEndOffset()),endingSpaces,null);  }}  }
class C{  public ExistsRequest preference(String preference){  this.preference=preference;  return this;}  }
class C{  public boolean equals(Object objectToCompare){  if (super.equals(objectToCompare))   return true;  if (objectToCompare instanceof Money) {    if (CoreUtils.nullSafeComparator(((Money)objectToCompare).getBigDecimalValue(),this.getBigDecimalValue()) == 0)     return true;  }  return false;}  }
class C{  public void componentRemoved(ContainerEvent e){  Layer childLayer=(Layer)e.getChild();  removeProjectionListener(childLayer);  removedLayers.addElement(childLayer);  changeLayers(e);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case GamlPackage.ACTION_ARGUMENTS__ARGS:    return args != null && !args.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public SplitPaneDividerVerticalState(){  super("Vertical");}  }
class C{  public static ILaunchConfiguration createLaunchConfig(String launchConfigName,final IProject project) throws CoreException, OperationCanceledException {  ILaunchManager manager=DebugPlugin.getDefault().getLaunchManager();  ILaunchConfigurationType type=manager.getLaunchConfigurationType(GwtSuperDevModeLaunchConfiguration.TYPE_ID);  ILaunchConfigurationWorkingCopy launchConfig=type.newInstance(null,launchConfigName);  LaunchConfigurationUtilities.setProjectName(launchConfig,project.getName());  launchConfig.setMappedResources(new IResource[]{project});  setDefaults(launchConfig,project);  ILaunchConfiguration ilaunchConfig=launchConfig.doSave();  return ilaunchConfig;}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public static int parseUnsignedVarintLength(int firstByte){  int varIntLength=-1;  for (int i=0; i < VARINT_LENGTH_MASKS.length; i++) {    if ((VARINT_LENGTH_MASKS[i] & firstByte) != 0) {      varIntLength=i + 1;      break;    }  }  return varIntLength;}  }
class C{  @Override public void propertyChange(PropertyChangeEvent evt){  wasModified(evt);  support.firePropertyChange("",null,null);}  }
class C{  private void validateSOAPHeader(Node noteToValidate,Validator validator){  assert validator != null;  assert noteToValidate != null;  DOMSource validationSource=new DOMSource(noteToValidate);  try {    validator.validate(validationSource);  } catch (  Exception e) {    logger.error("SOAP header validation failed: {}",e.getMessage());    SOAPFaultHandler.throwSoapFault(new WSFaultException(FaultKey.WSSE_INVALID_SECURITY,e));  }}  }
class C{  private void appendOpenBodyTag(String style,String lang){  StringBuilder sb=new StringBuilder("<body");  if (style != null) {    sb.append(" style=\"");    sb.append(style);    sb.append("\"");  }  if (lang != null) {    sb.append(" xml:lang=\"");    sb.append(lang);    sb.append("\"");  }  sb.append(">");  text.append(sb.toString());}  }
class C{  public JSONWriter(Writer w){  this.comma=false;  this.mode='i';  this.stack=new JSONObject[maxdepth];  this.top=0;  this.writer=w;}  }
class C{  public static int[] convert2rgba(IImageLineArray line,PngChunkPLTE pal,PngChunkTRNS trns,int[] buf){  ImageInfo imi=line.getImageInfo();  int nsamples=imi.cols * 4;  if (buf == null || buf.length < nsamples)   buf=new int[nsamples];  int maxval=imi.bitDepth == 16 ? (1 << 16) - 1 : 255;  Arrays.fill(buf,maxval);  if (imi.indexed) {    int tlen=trns != null ? trns.getPalletteAlpha().length : 0;    for (int s=0; s < imi.cols; s++) {      int index=line.getElem(s);      pal.getEntryRgb(index,buf,s * 4);      if (index < tlen) {        buf[s * 4 + 3]=trns.getPalletteAlpha()[index];      }    }  } else   if (imi.greyscale) {    int[] unpack=null;    if (imi.bitDepth < 8)     unpack=ImageLineHelper.DEPTH_UNPACK[imi.bitDepth];    for (int s=0, i=0, p=0; p < imi.cols; p++) {      buf[s++]=unpack != null ? unpack[line.getElem(i++)] : line.getElem(i++);      buf[s]=buf[s - 1];      s++;      buf[s]=buf[s - 1];      s++;      if (imi.channels == 2)       buf[s++]=unpack != null ? unpack[line.getElem(i++)] : line.getElem(i++); else       buf[s++]=maxval;    }  } else {    for (int s=0, i=0, p=0; p < imi.cols; p++) {      buf[s++]=line.getElem(i++);      buf[s++]=line.getElem(i++);      buf[s++]=line.getElem(i++);      buf[s++]=imi.alpha ? line.getElem(i++) : maxval;    }  }  return buf;}  }
class C{  public void addVetoableChangeListener(String propertyName,VetoableChangeListener in_vcl){  beanContextChildSupport.addVetoableChangeListener(propertyName,in_vcl);}  }
class C{  @Override public boolean markSupported(){  return in.markSupported();}  }
class C{  public TReplicationJob(TReplicationJob other){  __isset_bitfield=other.__isset_bitfield;  this.id=other.id;  this.createTime=other.createTime;  this.updateTime=other.updateTime;  if (other.isSetOperation()) {    this.operation=other.operation;  }  if (other.isSetStatus()) {    this.status=other.status;  }  if (other.isSetSrcPath()) {    this.srcPath=other.srcPath;  }  if (other.isSetSrcCluster()) {    this.srcCluster=other.srcCluster;  }  if (other.isSetSrcDb()) {    this.srcDb=other.srcDb;  }  if (other.isSetSrcTable()) {    this.srcTable=other.srcTable;  }  if (other.isSetSrcPartitions()) {    List<String> __this__srcPartitions=new ArrayList<String>(other.srcPartitions);    this.srcPartitions=__this__srcPartitions;  }  if (other.isSetSrcModifiedTime()) {    this.srcModifiedTime=other.srcModifiedTime;  }  if (other.isSetRenameToDb()) {    this.renameToDb=other.renameToDb;  }  if (other.isSetRenameToTable()) {    this.renameToTable=other.renameToTable;  }  if (other.isSetRenameToPath()) {    this.renameToPath=other.renameToPath;  }  if (other.isSetExtras()) {    Map<String,String> __this__extras=new HashMap<String,String>(other.extras);    this.extras=__this__extras;  }  if (other.isSetWaitingOnJobs()) {    List<Long> __this__waitingOnJobs=new ArrayList<Long>(other.waitingOnJobs);    this.waitingOnJobs=__this__waitingOnJobs;  }}  }
class C{  public void reduceDiscoveryEnergy(){  reduceEnergy(this.scanResponseEnergy);}  }
class C{  private void emitEscapedUTF16Char(PrintWriter writer,int codePoint){  if (codePoint <= 0xFFFF) {    emitEscapedBMPChar(writer,codePoint);  } else {    if (codePoint <= 0x10FFFF) {      for (      char surrogate : Character.toChars(codePoint))       emitEscapedBMPChar(writer,(int)surrogate);    } else {      writer.append("<").append(Integer.toHexString(codePoint)).append(">");    }  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:57.529 -0400",hash_original_method="CBD79E787706545FAE689509F9416DE8",hash_generated_method="19850840D646CCBB1B96E6D8E37DA470") public static String separatorsToUnix(String path){  if (path == null || path.indexOf(WINDOWS_SEPARATOR) == -1) {    return path;  }  return path.replace(WINDOWS_SEPARATOR,UNIX_SEPARATOR);}  }
class C{  public void stopSpinning(){  isSpinning=false;  progress=0;  postInvalidate();}  }
class C{  public void init(Context context,String uniqueName,int cacheSize,CompressFormat compressFormat,int quality,CacheType type){switch (type) {case DISK:    mImageCache=new DiskLruImageCache(context,uniqueName,cacheSize,compressFormat,quality);  break;case MEMORY:mImageCache=new BitmapLruImageCache(cacheSize);default :mImageCache=new BitmapLruImageCache(cacheSize);break;}mImageLoader=new ImageLoader(VolleyHelper.getRequestQueue(),mImageCache);}  }
class C{  public SpriteSheetDrawer customFrameList(List<Integer> list){  mSpriteSheet.customFrameList=list;  return this;}  }
class C{  public void removeExceptionMessage(ExceptionMessage message){  m_exceptionMessages.removeElement(message);}  }
class C{  @Override protected void refresh(){  super.refresh();  KMLRoot kmlRoot=this.getFeature().getNetworkResource();  if (kmlRoot == null || kmlRoot.getFeature() == null)   return;  if (kmlRoot.getFeature() instanceof KMLDocument) {    KMLDocument doc=(KMLDocument)kmlRoot.getFeature();    for (    KMLAbstractFeature child : doc.getFeatures()) {      if (child != null)       this.addFeatureNode(child);    }  } else {    this.addFeatureNode(kmlRoot.getFeature());  }}  }
class C{  public void switchTo(int n){  assert n < layers.size() : "Invalid index passed to MultiplexLayer.switchTo";  removeChild(layers.get(enabledLayer),true);  enabledLayer=n;  addChild(layers.get(enabledLayer));}  }
class C{  public static int createProgram(String vertexSource,String fragmentSource){  int vertexShader=loadShader(GLES20.GL_VERTEX_SHADER,vertexSource);  if (vertexShader == 0) {    return 0;  }  int pixelShader=loadShader(GLES20.GL_FRAGMENT_SHADER,fragmentSource);  if (pixelShader == 0) {    return 0;  }  int program=GLES20.glCreateProgram();  checkGlError("glCreateProgram");  if (program == 0) {    Log.e(TAG,"Could not create program");  }  GLES20.glAttachShader(program,vertexShader);  checkGlError("glAttachShader");  GLES20.glAttachShader(program,pixelShader);  checkGlError("glAttachShader");  GLES20.glLinkProgram(program);  int[] linkStatus=new int[1];  GLES20.glGetProgramiv(program,GLES20.GL_LINK_STATUS,linkStatus,0);  if (linkStatus[0] != GLES20.GL_TRUE) {    Log.e(TAG,"Could not link program: ");    Log.e(TAG,GLES20.glGetProgramInfoLog(program));    GLES20.glDeleteProgram(program);    program=0;  }  return program;}  }
class C{  public static Keymap removeKeymap(String nm){  return getKeymapTable().remove(nm);}  }
class C{  public static boolean isTargetAmbiguous(Expression expression,boolean expressionIsExplicitlyTyped){  StructuralPropertyDescriptor locationInParent=expression.getLocationInParent();  while (locationInParent == ParenthesizedExpression.EXPRESSION_PROPERTY || locationInParent == ConditionalExpression.THEN_EXPRESSION_PROPERTY || locationInParent == ConditionalExpression.ELSE_EXPRESSION_PROPERTY) {    expression=(Expression)expression.getParent();    locationInParent=expression.getLocationInParent();  }  ASTNode parent=expression.getParent();  IMethodBinding methodBinding;  int argumentIndex;  int argumentCount;  Expression invocationQualifier=null;  if (locationInParent == MethodInvocation.ARGUMENTS_PROPERTY) {    MethodInvocation methodInvocation=(MethodInvocation)parent;    methodBinding=methodInvocation.resolveMethodBinding();    argumentIndex=methodInvocation.arguments().indexOf(expression);    argumentCount=methodInvocation.arguments().size();    invocationQualifier=methodInvocation.getExpression();  } else   if (locationInParent == SuperMethodInvocation.ARGUMENTS_PROPERTY) {    SuperMethodInvocation superMethodInvocation=(SuperMethodInvocation)parent;    methodBinding=superMethodInvocation.resolveMethodBinding();    argumentIndex=superMethodInvocation.arguments().indexOf(expression);    argumentCount=superMethodInvocation.arguments().size();    invocationQualifier=superMethodInvocation.getQualifier();  } else   if (locationInParent == ConstructorInvocation.ARGUMENTS_PROPERTY) {    ConstructorInvocation constructorInvocation=(ConstructorInvocation)parent;    methodBinding=constructorInvocation.resolveConstructorBinding();    argumentIndex=constructorInvocation.arguments().indexOf(expression);    argumentCount=constructorInvocation.arguments().size();  } else   if (locationInParent == SuperConstructorInvocation.ARGUMENTS_PROPERTY) {    SuperConstructorInvocation superConstructorInvocation=(SuperConstructorInvocation)parent;    methodBinding=superConstructorInvocation.resolveConstructorBinding();    argumentIndex=superConstructorInvocation.arguments().indexOf(expression);    argumentCount=superConstructorInvocation.arguments().size();  } else   if (locationInParent == ClassInstanceCreation.ARGUMENTS_PROPERTY) {    ClassInstanceCreation creation=(ClassInstanceCreation)parent;    methodBinding=creation.resolveConstructorBinding();    argumentIndex=creation.arguments().indexOf(expression);    argumentCount=creation.arguments().size();  } else   if (locationInParent == EnumConstantDeclaration.ARGUMENTS_PROPERTY) {    EnumConstantDeclaration enumConstantDecl=(EnumConstantDeclaration)parent;    methodBinding=enumConstantDecl.resolveConstructorBinding();    argumentIndex=enumConstantDecl.arguments().indexOf(expression);    argumentCount=enumConstantDecl.arguments().size();  } else {    return false;  }  if (methodBinding != null) {    ITypeBinding invocationTargetType;    if (parent instanceof MethodInvocation || parent instanceof SuperMethodInvocation) {      if (invocationQualifier != null) {        invocationTargetType=invocationQualifier.resolveTypeBinding();        if (invocationTargetType != null && parent instanceof SuperMethodInvocation) {          invocationTargetType=invocationTargetType.getSuperclass();        }      } else {        ITypeBinding enclosingType=getEnclosingType(parent);        if (enclosingType != null && parent instanceof SuperMethodInvocation) {          enclosingType=enclosingType.getSuperclass();        }        if (enclosingType != null) {          IMethodBinding methodInHierarchy=Bindings.findMethodInHierarchy(enclosingType,methodBinding.getName(),methodBinding.getParameterTypes());          if (methodInHierarchy != null) {            invocationTargetType=enclosingType;          } else {            invocationTargetType=methodBinding.getDeclaringClass();          }        } else {          invocationTargetType=methodBinding.getDeclaringClass();        }      }    } else {      invocationTargetType=methodBinding.getDeclaringClass();    }    if (invocationTargetType != null) {      TypeBindingVisitor visitor=new AmbiguousTargetMethodAnalyzer(invocationTargetType,methodBinding,argumentIndex,argumentCount,expressionIsExplicitlyTyped);      return !(visitor.visit(invocationTargetType) && Bindings.visitHierarchy(invocationTargetType,visitor));    }  }  return true;}  }
class C{  public void createPictScenario01() throws Exception {  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-05-01 00:00:00"));  String supplierAdminId="Pict01Supplier";  VOOrganization supplier=orgSetup.createOrganization(basicSetup.getPlatformOperatorUserKey(),supplierAdminId,"Pict01SupplierOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_DE,OrganizationRoleType.TECHNOLOGY_PROVIDER,OrganizationRoleType.SUPPLIER);  VOUser supplierAdmin=orgSetup.getUser(supplierAdminId,true);  VOMarketplace supplMarketplace=orgSetup.createMarketplace("Pict01Supplier_MP",false,supplier);  paymentSetup.createPaymentForSupplier(basicSetup.getPlatformOperatorUserKey(),supplierAdmin.getKey(),supplier);  setCutOffDay(supplierAdmin.getKey(),5);  String customerAdminId="Pict01DiscountedCustomer";  VOOrganization customer=orgSetup.registerCustomer("Pict01DiscountedCustomerOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_UK,customerAdminId,supplMarketplace.getMarketplaceId(),supplier.getOrganizationId());  VOUser customerAdmin=orgSetup.getUser(customerAdminId,true);  orgSetup.updateCustomerDiscount(customer,new BigDecimal("15.00"),DateTimeHandling.calculateMillis("2013-05-06 00:00:00"),DateTimeHandling.calculateMillis("2013-05-16 23:59:59"));  orgSetup.saveAllVats(supplierAdmin.getKey(),VOVatRateFactory.newVOVatRate(new BigDecimal("13.00")),null,null);  orgSetup.createMarketingPermission(basicSetup.getSupplierAdminKey(),supplier.getOrganizationId(),technicalService);  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(supplierAdmin.getKey(),"PICT_TEST_01",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PICT01_RATA_DAY,technicalService,supplMarketplace);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("PICT_TEST_01",serviceDetails,customerAdmin,role);  VOServiceDetails perUnitService=serviceSetup.createPublishAndActivateMarketableService(supplierAdmin.getKey(),"PICT01_PERUNIT_SERVICE",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PERUNIT_WEEK_ROLES,technicalService,supplMarketplace);  serviceSetup.registerCompatibleServices(supplierAdmin.getKey(),serviceDetails,perUnitService);  long usageUpgradeTime=DateTimeHandling.calculateMillis("2013-05-21 13:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(usageUpgradeTime);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails upgradedSubDetails=subscrSetup.upgradeSubscription(subDetails,perUnitService);  resetCutOffDay(supplierAdmin.getKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_01",subDetails);  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_01",upgradedSubDetails);  BillingIntegrationTestBase.updateCustomerListForTests("PICT_TEST_01",customer);}  }
class C{  public static ReferenceQueue<Object> startFinalizer(Class<?> finalizableReferenceClass,Object frq){  if (!finalizableReferenceClass.getName().equals(FINALIZABLE_REFERENCE)) {    throw new IllegalArgumentException("Expected " + FINALIZABLE_REFERENCE + ".");  }  Finalizer finalizer=new Finalizer(finalizableReferenceClass,frq);  finalizer.start();  return finalizer.queue;}  }
class C{  public static <T>EqPredicate<T> eq(Property<T> property,T value){  return new EqPredicate<>(property(property),value);}  }
class C{  public ExtrudedPolygon(Iterable<? extends LatLon> corners,Double height){  this();  if (corners == null) {    String message=Logging.getMessage("nullValue.IterableIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (height != null && height <= 0) {    String message=Logging.getMessage("generic.ArgumentOutOfRange","height <= 0");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.setOuterBoundary(corners,height);}  }
class C{  protected AbstractAttr(){}  }
class C{  protected boolean substitute(final StrBuilder buf,final int offset,final int length){  return substitute(buf,offset,length,null) > 0;}  }
class C{  public void start(){  log.info("Starting spider...");  this.timeStarted=System.currentTimeMillis();  fetchFilterSeeds();  if (seedList == null || seedList.isEmpty()) {    log.warn("No seeds available for the Spider. Cancelling scan...");    notifyListenersSpiderComplete(false);    notifyListenersSpiderProgress(100,0,0);    return;  }  if (scanUser != null)   log.info("Scan will be performed from the point of view of User: " + scanUser.getName());  this.controller.init();  this.stopped=false;  this.paused=false;  this.initialized=false;  this.threadPool=Executors.newFixedThreadPool(spiderParam.getThreadCount(),new SpiderThreadFactory("ZAP-SpiderThreadPool-" + id + "-thread-"));  httpSender=new HttpSender(connectionParam,true,HttpSender.SPIDER_INITIATOR);  httpSender.setFollowRedirect(false);  for (  URI uri : seedList) {    if (log.isDebugEnabled()) {      log.debug("Adding seed for spider: " + uri);    }    controller.addSeed(uri,HttpRequestHeader.GET);  }  initialized=true;}  }
class C{  static public boolean handleQuit(){  return AppsBase.handleQuit();}  }
class C{  public void multiplyMatrix4x4ByMatrix(Matrixf4x4 matrixf){  if (matrixValid && matrixf.isMatrixValid()) {    float[] bufferMatrix={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};    float[] matrix=matrixf.getMatrix();    multiplyMatrix(matrix,0,bufferMatrix,0);    matrixf.setMatrix(bufferMatrix);  } else   Log.e("matrix","Matrix is invalid, internal is " + matrix.length + " long"+ " , input matrix is "+ matrixf.getMatrix().length+ " long");}  }
class C{  public boolean multipleInstances(){  return true;}  }
class C{  protected Refactoring createRefactoring(final RefactoringDescriptor descriptor,final RefactoringStatus status,final IProgressMonitor monitor) throws CoreException {  try {    Assert.isNotNull(descriptor);    return createRefactoring(descriptor,status);  }  finally {    if (monitor != null) {      monitor.done();    }  }}  }
class C{  public DTMNamedNodeMap(DTM dtm,int element){  this.dtm=dtm;  this.element=element;}  }
class C{  public boolean isValid(INode state){  SmallPuzzle tp=(SmallPuzzle)state;  return (tp.s[0] % 2 == 0) && (tp.s[1] % 2 == 0);}  }
class C{  private Response<Bitmap> doParse(NetworkResponse response){  byte[] data=response.data;  BitmapFactory.Options decodeOptions=new BitmapFactory.Options();  Bitmap bitmap=null;  if (mMaxWidth == 0 && mMaxHeight == 0) {    decodeOptions.inPreferredConfig=mDecodeConfig;    bitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);  } else {    decodeOptions.inJustDecodeBounds=true;    BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);    int actualWidth=decodeOptions.outWidth;    int actualHeight=decodeOptions.outHeight;    int desiredWidth=getResizedDimension(mMaxWidth,mMaxHeight,actualWidth,actualHeight,mScaleType);    int desiredHeight=getResizedDimension(mMaxHeight,mMaxWidth,actualHeight,actualWidth,mScaleType);    decodeOptions.inJustDecodeBounds=false;    decodeOptions.inSampleSize=findBestSampleSize(actualWidth,actualHeight,desiredWidth,desiredHeight);    Bitmap tempBitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);    if (tempBitmap != null && (tempBitmap.getWidth() > desiredWidth || tempBitmap.getHeight() > desiredHeight)) {      bitmap=Bitmap.createScaledBitmap(tempBitmap,desiredWidth,desiredHeight,true);      tempBitmap.recycle();    } else {      bitmap=tempBitmap;    }  }  if (bitmap == null) {    return Response.error(new ParseError(response));  } else {    return Response.success(bitmap,HttpHeaderParser.parseCacheHeaders(response));  }}  }
class C{  public final InputStream openContentInputStream(Uri uri) throws FileNotFoundException {  ContentProviderClient contentProviderClient=null;  try {    contentProviderClient=mContentResolver.acquireContentProviderClient(uri);    return contentProviderClient.getLocalContentProvider().openAssetFile(uri,"r").createInputStream();  } catch (  IOException e) {    throw new FileNotFoundException("Unable to create stream");  } finally {    if (contentProviderClient != null) {      contentProviderClient.release();    }  }}  }
class C{  @Override public String toString(){  return super.toString();}  }
class C{  public static boolean isJarURL(URL url){  String protocol=url.getProtocol();  return (URL_PROTOCOL_JAR.equals(protocol) || URL_PROTOCOL_ZIP.equals(protocol) || URL_PROTOCOL_VFSZIP.equals(protocol)|| URL_PROTOCOL_WSJAR.equals(protocol));}  }
class C{  public void verify(EvolutionState state){  if (!(state.initializer instanceof GPInitializer)) {    state.output.error("Initializer is not a GPInitializer");    return;  }  if (trees == null) {    state.output.error("Null trees in GPIndividual.");    return;  }  for (int x=0; x < trees.length; x++)   if (trees[x] == null) {    state.output.error("Null tree (#" + x + ") in GPIndividual.");    return;  }  for (int x=0; x < trees.length; x++)   trees[x].verify(state);  state.output.exitIfErrors();}  }
class C{  public static void main(String[] args){}  }
class C{  @Override public void checkExec(String command){  if (!protectionEnabled) {    return;  }  if (isCalledByRunQuery()) {    throw new ReportSecurityException(Messages.UNAUTHORIZED_EXECUTION_CALL_DETECTED);  }}  }
class C{  static public int extractApp(U64 cookie){  return (int)((cookie.getValue() >>> APP_ID_SHIFT) & APP_ID_MASK);}  }
class C{  @Nullable static Argument findRealArgument(@NotNull final CommandLineArgument argument){  final ValidationResult validationResult=getValidationResult(argument);  if (validationResult == null) {    return null;  }  return validationResult.getArgument(argument);}  }
class C{  public boolean isTitleExact(){  return getStringCustomParameter(TITLE_EXACT) != null;}  }
class C{  public HashMap<String,Object> createMapFromJSONObject(JSONObject jsonObject){  HashMap<String,Object> metaMap=new HashMap<>();  for (Iterator<String> iter=jsonObject.keys(); iter.hasNext(); ) {    String key=iter.next();    try {      metaMap.put(key,jsonObject.get(key));    } catch (    JSONException e) {      Logger.debug("JSON does not contain " + key + ".");    }  }  return metaMap;}  }
class C{  public void testBug61332() throws Exception {  Properties props=new Properties();  props.setProperty("useInformationSchema","true");  props.setProperty("statementInterceptors",StatementInterceptorBug61332.class.getName());  createDatabase("dbbug61332");  Connection testConn=getConnectionWithProps(props);  if (versionMeetsMinimum(5,0,7)) {    try {      createTable("dbbug61332.bug61332","(c1 char(1))");      DatabaseMetaData metaData=testConn.getMetaData();      this.rs=metaData.getColumns("dbbug61332",null,"bug61332",null);      this.rs.next();    }  finally {    }  }}  }
class C{  protected Ignition(){}  }
class C{  public static String collapseNewlines(String str){  return collapseCharacter(str,'\n');}  }
class C{  public void write(OutputStream out) throws SocksException, IOException {  if (data == null) {    Socks5Message msg;    if (addrType == SOCKS_ATYP_DOMAINNAME)     msg=new Socks5Message(command,host,port); else {      if (ip == null) {        try {          ip=InetAddress.getByName(host);        } catch (        UnknownHostException uh_ex) {          throw new SocksException(SocksConstants.SOCKS_JUST_ERROR);        }      }      msg=new Socks5Message(command,ip,port);    }    data=msg.data;  }  out.write(data);}  }
class C{  public void tryToDeleteGeolocSharings(ContactId contact){  mGeolocSharingDeleteOperationHandler.post(new GeolocSharingDeleteTask(mGeolocSharingService,this,mLocalContentResolver,contact));}  }
class C{  public final void append(String value){  if (value == null)   return;  int strlen=value.length();  if (0 == strlen)   return;  int copyfrom=0;  char[] chunk=m_array[m_lastChunk];  int available=m_chunkSize - m_firstFree;  while (strlen > 0) {    if (available > strlen)     available=strlen;    value.getChars(copyfrom,copyfrom + available,m_array[m_lastChunk],m_firstFree);    strlen-=available;    copyfrom+=available;    if (strlen > 0) {      int i=m_array.length;      if (m_lastChunk + 1 == i) {        char[][] newarray=new char[i + 16][];        System.arraycopy(m_array,0,newarray,0,i);        m_array=newarray;      }      chunk=m_array[++m_lastChunk];      if (chunk == null) {        if (m_lastChunk == 1 << m_rebundleBits && m_chunkBits < m_maxChunkBits) {          m_innerFSB=new FastStringBuffer(this);        }        chunk=m_array[m_lastChunk]=new char[m_chunkSize];      }      available=m_chunkSize;      m_firstFree=0;    }  }  m_firstFree+=available;}  }
class C{  public static double logAdd(double x1,double x2){  if (x1 == Double.NEGATIVE_INFINITY)   return x2; else   if (x2 == Double.NEGATIVE_INFINITY)   return x1; else   if (x1 > x2)   return x2 + log(1 + exp(x1 - x2)); else   return x1 + log(1 + exp(x2 - x1));}  }
class C{  @PUT @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/acl") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN,ACL.ALL}) public TaskResourceRep updateBucketACL(@PathParam("id") URI id,ObjectBucketACLUpdateParams param) throws InternalException {  _log.info("Update bucket acl request received. BucketId: {}",id.toString());  _log.info("Request body: {}",param.toString());  Bucket bucket=null;  ArgValidator.checkFieldUriType(id,Bucket.class,"id");  bucket=_dbClient.queryObject(Bucket.class,id);  ArgValidator.checkEntity(bucket,id,isIdEmbeddedInURL(id));  if (bucket.getVersion() == null) {    syncBucketACL(bucket);  }  BucketACLUtility bucketACLUtil=new BucketACLUtility(_dbClient,bucket.getName(),bucket.getId());  bucketACLUtil.verifyBucketACL(param);  _log.info("Request payload verified. No errors found.");  StorageSystem storageSystem=_dbClient.queryObject(StorageSystem.class,bucket.getStorageDevice());  ObjectController controller=getController(ObjectController.class,storageSystem.getSystemType());  String task=UUID.randomUUID().toString();  _log.info(String.format("Bucket ACL Update --- Bucket id: %1$s, Task: %2$s",id,task));  Operation op=_dbClient.createTaskOpStatus(Bucket.class,bucket.getId(),task,ResourceOperationTypeEnum.UPDATE_BUCKET_ACL);  op.setDescription("Bucket ACL update");  controller.updateBucketACL(bucket.getStorageDevice(),id,param,task);  auditOp(OperationTypeEnum.UPDATE_BUCKET_ACL,true,AuditLogManager.AUDITOP_BEGIN,bucket.getId().toString(),bucket.getStorageDevice().toString());  return toTask(bucket,task,op);}  }
class C{  public GenericEntry retrieveOrganizaionUser(String customerId,String orgUserEmail) throws AppsForYourDomainException, MalformedURLException, IOException, ServiceException {  return service.getEntry(new URL("https://apps-apis.google.com/a/feeds/orguser/2.0/" + customerId + "/"+ orgUserEmail),GenericEntry.class);}  }
class C{  public CannotCompileException(String msg,Throwable e){  this(msg);  initCause(e);}  }
class C{  protected void doDeactivate(URI id){  client.post(String.class,getDeactivateUrl(),id);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:42.896 -0500",hash_original_method="F3D792B6EB8BC145BAF2830A3B203CAC",hash_generated_method="09D3D4C78918C1EF2B20F0543EDEDAE8") public TestSuiteBuilder includePackages(String... packageNames){  testGrouping.addPackagesRecursive(packageNames);  return this;}  }
class C{  @DataBoundConstructor public DockerSlaveTemplate(@Nonnull String id,List<? extends NodeProperty<?>> nodePropertiesUI) throws FormException {  this(id);  setNodeProperties(nodePropertiesUI);}  }
class C{  @SuppressWarnings("nullness") static <T extends Object>T[] newArray(T[] reference,int length){  Class<?> type=reference.getClass().getComponentType();  @SuppressWarnings("unchecked") T[] result=(T[])Array.newInstance(type,length);  return result;}  }
class C{  public void testToString() throws Exception {  assertTrue(CoderResult.OVERFLOW.toString().indexOf("OVERFLOW") != -1);  assertTrue(CoderResult.UNDERFLOW.toString().indexOf("UNDERFLOW") != -1);  assertTrue(CoderResult.malformedForLength(666).toString().indexOf("666") != -1);  assertTrue(CoderResult.unmappableForLength(666).toString().indexOf("666") != -1);}  }
class C{  public SecurityServerHeader createSecurityServerHeader(){  SecurityServer secServer=new SecurityServer();  return secServer;}  }
class C{  public void testPutLenString(){  byte[] expectedResult={4,0,0,1,3,'a','b','c'};  String string="abc";  MySQLPacket array=new MySQLPacket(16,(byte)1);  ByteArrayOutputStream output=new ByteArrayOutputStream();  try {    array.putLenString(string);    array.write(output);    compareBytes(expectedResult,output.toByteArray());  } catch (  IOException e) {    fail("This should not happen!");  }}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public ModifiableSolrParams(Map<String,String[]> v){  vals=v;}  }
class C{  public String lastString(){  return current;}  }
class C{  private void readDownloadApps(XmlPullParser parser,Set<DownloadAppInfo> apps) throws XmlPullParserException, IOException {  while (parser.next() != XmlPullParser.END_TAG) {    if (parser.getEventType() != XmlPullParser.START_TAG) {      continue;    }    String name=parser.getName();    if (TAG_APP.equals(name)) {      String packageName=parser.getAttributeValue(null,ATTRIBUTE_PACKAGE_NAME);      String downloadLocation=parser.getAttributeValue(null,ATTRIBUTE_DOWNLOAD_LOCATION);      if (packageName != null && downloadLocation != null) {        apps.add(new DownloadAppInfo(packageName,downloadLocation));      }      skipCurrentTag(parser);    }  }}  }
class C{  @Override public int compareTo(Object object){  Segment other=(Segment)object;  if (this.before(other)) {    return -1;  } else   if (this.after(other)) {    return +1;  } else {    return 0;  }}  }
class C{  public PKCS7(InputStream in) throws ParsingException, IOException {  DataInputStream dis=new DataInputStream(in);  byte[] data=new byte[dis.available()];  dis.readFully(data);  parse(new DerInputStream(data));}  }
class C{  public boolean merge(final Frame<? extends V> frame,final boolean[] access){  boolean changes=false;  for (int i=0; i < locals; ++i) {    if (!access[i] && !values[i].equals(frame.values[i])) {      values[i]=frame.values[i];      changes=true;    }  }  return changes;}  }
class C{  public static void writeFastaFileEntry(Writer writer,String identifier,String sequence,int lineLength) throws IOException {  writer.write('>');  writer.write(identifier);  writer.write('\n');  for (int index=0; index < sequence.length(); index+=lineLength) {    if (sequence.length() > index + lineLength) {      writer.write(sequence.substring(index,index + lineLength));    } else {      writer.write(sequence.substring(index));    }    writer.write('\n');  }}  }
class C{  private Pair<Boolean,String> isOnLocal(URL url){  File dir=new File("CoursePickerData");  if (!dir.exists()) {    dir.mkdir();  }  String filename=url.getFile();  int index=filename.lastIndexOf("/");  String localFileName=filename.substring(index + 1,filename.length() - 4) + ".txt";  File localFile=new File(dir + "/" + localFileName);  return new Pair<>(localFile.exists() && localFile.isFile(),localFile.getAbsolutePath());}  }
class C{  public void addUserStatusListener(UserStatusListener listener){synchronized (userStatusListeners) {    if (!userStatusListeners.contains(listener)) {      userStatusListeners.add(listener);    }  }}  }
class C{  private void addToList(Vector<String> list,String line){  list.addElement(line);}  }
class C{  ASCIIBits clear(char min,char max){  int i=min;  for (int n=Math.min(max,63); i <= n; ++i) {    _lowerMask&=~(1L << i);  }  for (; i <= max; ++i) {    _upperMask&=~(1L << i);  }  return this;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return new Long(Sage.getDiskTotalSpace(getString(stack)));}  }
class C{  public ProjectLocationComputedValue(IObservableValue projectName,IObservableValue useDefaultLocation,IObservableValue alternativeLocation){  this.projectName=Preconditions.checkNotNull(projectName);  this.useDefaultLocation=Preconditions.checkNotNull(useDefaultLocation);  this.alternativeLocation=Preconditions.checkNotNull(alternativeLocation);}  }
class C{  public Point offsetToCell(int offset){  return table.offsetToCell(offset);}  }
class C{  public OverTheTopLayer scale(float scale){  if (scale <= 0) {    throw new OverTheTopLayerException("Scaling should be > 0");  }  this.mScalingFactor=scale;  return this;}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  private void onRoomTypings(){  mLatestTypingMessage=null;  ArrayList<String> typingUsers=mRoom.getTypingUsers();  if ((null != typingUsers) && (typingUsers.size() > 0)) {    String myUserId=mSession.getMyUserId();    ArrayList<String> names=new ArrayList<>();    for (int i=0; i < typingUsers.size(); i++) {      RoomMember member=mRoom.getMember(typingUsers.get(i));      if ((null != member) && !TextUtils.equals(myUserId,member.getUserId()) && (null != member.displayname)) {        names.add(member.displayname);      }    }    if (0 == names.size()) {      mLatestTypingMessage=null;    } else     if (1 == names.size()) {      mLatestTypingMessage=String.format(this.getString(R.string.room_one_user_is_typing),names.get(0));    } else     if (2 == names.size()) {      mLatestTypingMessage=String.format(this.getString(R.string.room_two_users_are_typing),names.get(0),names.get(1));    } else     if (names.size() > 2) {      mLatestTypingMessage=String.format(this.getString(R.string.room_many_users_are_typing),names.get(0),names.get(1));    }  }  refreshNotificationsArea();}  }
class C{  public void testConstrCharIntIntMathContextException2(){  char value[]={'-','1','2','3','8','0',',','4','7','3','8','E','-','4','2','3'};  int offset=3;  int len=120;  int precision=4;  RoundingMode rm=RoundingMode.CEILING;  MathContext mc=new MathContext(precision,rm);  try {    new BigDecimal(value,offset,len,mc);    fail("NumberFormatException has not been thrown");  } catch (  NumberFormatException e) {  }}  }
class C{  public PointCloud3D center(ReadonlyVec3D origin){  getCentroid();  Vec3D delta=origin != null ? origin.sub(centroid) : centroid.getInverted();  for (  Vec3D p : points) {    p.addSelf(delta);  }  min.addSelf(delta);  max.addSelf(delta);  centroid.addSelf(delta);  return this;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.605 -0400",hash_original_method="F0ECCB0CC9BF3CE73728CA922CC18037",hash_generated_method="A7E4CE96CF292916155BCD2729422107") @Override public boolean accept(File dir,String name){  for (  String name2 : names) {    if (caseSensitivity.checkEquals(name,name2)) {      return true;    }  }  return false;}  }
class C{  private boolean weWouldLeaveArea(final Creature creature,final Direction d){  return (creature.getY() + d.getdy() < minY) || (creature.getY() + d.getdy() > maxY) || (creature.getX() + d.getdx() < minX)|| (creature.getX() + d.getdx() > maxX);}  }
class C{  public void registerTunnel(GuacamoleTunnel tunnel){  tunnels.register(tunnel);}  }
class C{  public boolean isSetSyncValue(){  return this.syncValue != null;}  }
class C{  public static String decoceJSON(JSONObject json){  String jsonStr=json.toString();  jsonStr=jsonStr.replace("\\/","/");  return jsonStr;}  }
class C{  public InlineSequence(NormalMethod method){  this(method,null,-1);}  }
class C{  public void insertSorted(T value){  add(value);  @SuppressWarnings("unchecked") Comparable<T> cmp=(Comparable<T>)value;  for (int i=size() - 1; i > 0 && cmp.compareTo(get(i - 1)) < 0; i--) {    Collections.swap(this,i,i - 1);  }}  }
class C{  public void translate(int x,int y){  gc.translate(x,y);}  }
class C{  @Override public void force(boolean metaData) throws IOException {  randomFileSource.sync();}  }
class C{  @Dev public StartRecordingRandomItemCollectionAction(final String questname,@Dev(defaultValue="1") final int index,final Map<String,Integer> items,final String message){  this.questname=checkNotNull(questname);  this.index=index;  this.items=ImmutableMap.copyOf(items);  this.message=checkNotNull(message);}  }
class C{  void generateRandomDistributions(int nNodes,int nValues){  int nMaxParentCardinality=1;  for (int iAttribute=0; iAttribute < nNodes; iAttribute++) {    if (m_ParentSets[iAttribute].getCardinalityOfParents() > nMaxParentCardinality) {      nMaxParentCardinality=m_ParentSets[iAttribute].getCardinalityOfParents();    }  }  m_Distributions=new Estimator[m_Instances.numAttributes()][nMaxParentCardinality];  for (int iAttribute=0; iAttribute < nNodes; iAttribute++) {    int[] nPs=new int[nValues + 1];    nPs[0]=0;    nPs[nValues]=1000;    for (int iParent=0; iParent < m_ParentSets[iAttribute].getCardinalityOfParents(); iParent++) {      for (int iValue=1; iValue < nValues; iValue++) {        nPs[iValue]=random.nextInt(1000);      }      for (int iValue=1; iValue < nValues; iValue++) {        for (int iValue2=iValue + 1; iValue2 < nValues; iValue2++) {          if (nPs[iValue2] < nPs[iValue]) {            int h=nPs[iValue2];            nPs[iValue2]=nPs[iValue];            nPs[iValue]=h;          }        }      }      DiscreteEstimatorBayes d=new DiscreteEstimatorBayes(nValues,getEstimator().getAlpha());      for (int iValue=0; iValue < nValues; iValue++) {        d.addValue(iValue,nPs[iValue + 1] - nPs[iValue]);      }      m_Distributions[iAttribute][iParent]=d;    }  }}  }
class C{  public Vector3f(float value){  this.points[0]=value;  this.points[1]=value;  this.points[2]=value;}  }
class C{  public static void main(String[] args){  final Path rootPath=findRootPath(args);  if (rootPath == null || !rootPath.toFile().exists() || !rootPath.toFile().isDirectory()) {    System.out.println("ERROR: not found or does not point to a folder.");    System.out.println("Root path must either be given as first command line argument\n" + "OR the current working directory must lie in an N4JS git repository.");    System.exit(1);    return;  }  for (  String repoMandatory : REPOS_MANDATORY) {    if (!rootPath.resolve(repoMandatory).toFile().isDirectory()) {      System.out.println("ERROR: root folder does not contain a sub folder \"" + repoMandatory + "\"");      System.exit(1);      return;    }  }  final Path[] repoPaths=Arrays.asList(REPOS).stream().map(null).toArray(null);  final boolean success=new FileChecker().run(repoPaths);  System.exit(success ? 0 : 1);}  }
class C{  public DeterministicKey dropParent(){  DeterministicKey key=new DeterministicKey(getPath(),getChainCode(),pub,priv,null);  key.parentFingerprint=parentFingerprint;  return key;}  }
class C{  @Override public double adaptTicsMin(double min,double ticSize){  return Math.floor(min / ticSize) * ticSize;}  }
class C{  private void applyOverviewDocumentExtension(Context context){  for (  OverviewDocumentExtension extension : extensionRegistry.getOverviewDocumentExtensions()) {    extension.apply(context);  }}  }
class C{  private void correctErrors(byte[] codewordBytes,int numDataCodewords) throws ChecksumException {  int numCodewords=codewordBytes.length;  int[] codewordsInts=new int[numCodewords];  for (int i=0; i < numCodewords; i++) {    codewordsInts[i]=codewordBytes[i] & 0xFF;  }  int numECCodewords=codewordBytes.length - numDataCodewords;  try {    rsDecoder.decode(codewordsInts,numECCodewords);  } catch (  ReedSolomonException ignored) {    throw ChecksumException.getChecksumInstance();  }  for (int i=0; i < numDataCodewords; i++) {    codewordBytes[i]=(byte)codewordsInts[i];  }}  }
class C{  public synchronized boolean hasCapabilities(List<String> capabilities){  String[] arr=new String[capabilities.size()];  capabilities.toArray(arr);  return hasCapabilities(arr);}  }
class C{  public String query(SolrQueryRequest req) throws Exception {  return query(req.getParams().get(CommonParams.QT),req);}  }
class C{  private void handleUpdate(){  try {    final ClassLoader classLoader=createClassloader(true,true);    boolean initialDownload=false;    try {      classLoader.loadClass(className);      classLoader.loadClass("org.apache.log4j.Logger");      classLoader.loadClass("marauroa.common.Logger");      classLoader.loadClass("marauroa.client.ClientFramework");      if (classLoader.getResource(ClientGameConfiguration.get("GAME_ICON")) == null) {        throw new ClassNotFoundException(ClientGameConfiguration.get("GAME_ICON"));      }      if (classLoader.getResource("data/gui/offline.png") == null) {        throw new ClassNotFoundException(ClientGameConfiguration.get("data/gui/offline.png"));      }    } catch (    final ClassNotFoundException e) {      initialDownload=true;      System.out.println("Initial Download triggered by the following missing classes: " + e);    }    final Class<?> clazz=classLoader.loadClass("games.stendhal.client.update.UpdateManager");    final Method method=clazz.getMethod("process",String.class,Properties.class,Boolean.class,ClassLoader.class);    method.invoke(clazz.newInstance(),jarFolder,bootProp,initialDownload,classLoader);  } catch (  final SecurityException e) {    throw e;  }catch (  final Exception e) {    unexpectedErrorHandling("State: UpdateManager\r\n",e);  }}  }
class C{  protected void checkCloudletCompletion(){  List<? extends Host> list=getVmAllocationPolicy().getHostList();  for (int i=0; i < list.size(); i++) {    Host host=list.get(i);    for (    Vm vm : host.getVmList()) {      while (vm.getCloudletScheduler().isFinishedCloudlets()) {        Cloudlet cl=vm.getCloudletScheduler().getNextFinishedCloudlet();        if (cl != null) {          sendNow(cl.getUserId(),CloudSimTags.CLOUDLET_RETURN,cl);        }      }    }  }}  }
class C{  @Override public final void perform(IR ir){  java.util.HashMap<Register,Register> newMap=new java.util.HashMap<Register,Register>(5);  for (Enumeration<BasicBlock> be=ir.getBasicBlocks(); be.hasMoreElements(); ) {    BasicBlock bb=be.nextElement();    for (Enumeration<Instruction> ie=bb.forwardInstrEnumerator(); ie.hasMoreElements(); ) {      Instruction s=ie.nextElement();      ;      newMap.clear();      if (s.isPEI() && s.operator() != IR_PROLOGUE) {        if (bb.hasApplicableExceptionalOut(s) || !RegisterRestrictions.SCRATCH_IN_PEI) {          splitAllLiveRanges(s,newMap,ir,false);        }      }switch (s.getOpcode()) {case MIR_LOWTABLESWITCH_opcode:{          RegisterOperand rOp=MIR_LowTableSwitch.getIndex(s);          RegisterOperand temp=findOrCreateTemp(rOp,newMap,ir);          insertMoveBefore(temp,rOp.copyRO(),s);          rOp.setRegister(temp.getRegister());        }      break;  }}}}  }
class C{  public Filter createFilter(BridgeContext ctx,Element filterElement,Element filteredElement,GraphicsNode filteredNode,Filter inputFilter,Rectangle2D filterRegion,Map filterMap){  Filter in=getIn(filterElement,filteredElement,filteredNode,inputFilter,filterMap,ctx);  if (in == null) {    return null;  }  Rectangle2D defaultRegion=in.getBounds2D();  Rectangle2D primitiveRegion=SVGUtilities.convertFilterPrimitiveRegion(filterElement,filteredElement,filteredNode,defaultRegion,filterRegion,ctx);  int type=convertType(filterElement,ctx);  ColorMatrixRable colorMatrix;switch (type) {case ColorMatrixRable.TYPE_HUE_ROTATE:    float a=convertValuesToHueRotate(filterElement,ctx);  colorMatrix=ColorMatrixRable8Bit.buildHueRotate(a);break;case ColorMatrixRable.TYPE_LUMINANCE_TO_ALPHA:colorMatrix=ColorMatrixRable8Bit.buildLuminanceToAlpha();break;case ColorMatrixRable.TYPE_MATRIX:float[][] matrix=convertValuesToMatrix(filterElement,ctx);colorMatrix=ColorMatrixRable8Bit.buildMatrix(matrix);break;case ColorMatrixRable.TYPE_SATURATE:float s=convertValuesToSaturate(filterElement,ctx);colorMatrix=ColorMatrixRable8Bit.buildSaturate(s);break;default :throw new Error("invalid convertType:" + type);}colorMatrix.setSource(in);handleColorInterpolationFilters(colorMatrix,filterElement);Filter filter=new PadRable8Bit(colorMatrix,primitiveRegion,PadMode.ZERO_PAD);updateFilterMap(filterElement,filter,filterMap);return filter;}  }
class C{  public static JavacMessages instance(Context context){  JavacMessages instance=context.get(messagesKey);  if (instance == null)   instance=new JavacMessages(context);  return instance;}  }
class C{  public void charMBToAscii() throws IOException {  writeCode(MB_CHAR_TO_ASCII);}  }
class C{  private MethodType(Class<?> rtype,Class<?>[] ptypes,boolean trusted){  checkRtype(rtype);  checkPtypes(ptypes);  this.rtype=rtype;  this.ptypes=trusted ? ptypes : Arrays.copyOf(ptypes,ptypes.length);}  }
class C{  public void clearCodeOrder(){  SpaceEffGraphNode cur=_firstNode;  if (cur == null)   return;  while (true) {    SpaceEffGraphNode next=cur.next;    if (next == null)     break;    cur.next=null;    next.prev=null;    cur=next;  }  _firstNode=null;  _lastNode=null;}  }
class C{  public Long hdel(final byte[] key,final byte[]... fields){  checkIsInMulti();  client.hdel(key,fields);  return client.getIntegerReply();}  }
class C{  public void addScriptsChangeEventListener(ScriptsChangeEventListener listener){  addScriptChangeEventListener(Threading.USER_THREAD,listener);}  }
class C{  public synchronized List<Baustein> loadBausteine(IProgress mon) throws GSServiceException, IOException {  if (config instanceof BSIConfigurationRemoteSource) {    LOG.debug(Messages.BSIMassnahmenModel_0);    return loadBausteineRemote();  }  final int maxTaskSteps=5;  String gsPath=config.getGsPath();  String dsPath=config.getDsPath();  boolean fromZipFile=config.isFromZipFile();  IGSSource gsSource=null;  String cacheDir=config.getCacheDir();  if (LOG.isInfoEnabled()) {    LOG.info("Loading Grundschutzkatalog, path: " + gsPath);    LOG.info("Loading Datenschutzbaustein, path: " + dsPath);  }  if (LOG.isDebugEnabled()) {    LOG.debug("Cache dir is: " + cacheDir);    LOG.debug("Grundschutzkatalog isFromZipFile=" + fromZipFile);  }  if (!(previouslyReadFile.equals(gsPath) && previouslyReadFileDS.equals(dsPath))) {    previouslyReadFile=gsPath;    previouslyReadFileDS=dsPath;    try {      if (fromZipFile) {        gsSource=new ZIPGSSource(gsPath);      } else {        gsSource=new URLGSSource(gsPath);      }    } catch (    IOException e) {      LOG.error(Messages.BSIMassnahmenModel_9 + gsPath + Messages.BSIMassnahmenModel_2);      if (LOG.isDebugEnabled()) {        LOG.debug("stacktrace: ",e);      }      return null;    }    if (gsSource.getVintage().equals(IGSSource.VINTAGE_2009)) {      scrape=new GSScraper(gsSource,new PatternGSHB2009());    } else {      scrape=new GSScraper(gsSource,new PatternGSHB2005_2006());    }    scrape.setCacheDir(cacheDir);    Logger.getLogger(BSIMassnahmenModel.class).debug("Setting GS-Cache to " + scrape.getCacheDir());    mon.beginTask(Messages.BSIMassnahmenModel_3,maxTaskSteps);    List<Baustein> alleBst=new ArrayList<Baustein>();    processBausteinLayer(mon,alleBst,GSScraper.CATALOG_MODULE_B01,0);    processBausteinLayer(mon,alleBst,GSScraper.CATALOG_MODULE_B02,1);    processBausteinLayer(mon,alleBst,GSScraper.CATALOG_MODULE_B03,2);    processBausteinLayer(mon,alleBst,GSScraper.CATALOG_MODULE_B04,3);    processBausteinLayer(mon,alleBst,GSScraper.CATALOG_MODULE_B05,4);    processBausteinLayer(mon,alleBst,GSScraper.CATALOG_MODULE_B00,5);    this.language=scrape.getLanguage();    cache=handleDataPrivacyModule(dsPath,cacheDir,alleBst);    mon.done();    Logger.getLogger(BSIMassnahmenModel.class).debug(Messages.BSIMassnahmenModel_4);  }  return cache;}  }
class C{  public void aliasAttribute(final String alias,final String attributeName){  if (attributeAliasingMapper == null) {    throw new InitializationException("No " + AttributeAliasingMapper.class.getName() + " available");  }  attributeAliasingMapper.addAliasFor(attributeName,alias);}  }
class C{  private String i18n(int key,Object... args){  return getContext().getString(key,args);}  }
class C{  private static byte crc8PushByte(byte crc,byte add){  crc=(byte)(crc ^ add);  for (int i=0; i < 8; i++) {    if ((crc & 0x1) != 0x0) {      crc=(byte)(((crc & 0xFF) >> 1) ^ 0x8C);    } else {      crc=(byte)((crc & 0xFF) >> 1);    }  }  return crc;}  }
class C{  int flipTriangles(long[] flippedA,long[] flippedB){  int numflips=0;  BitsUtil.zeroI(flippedB);  for (int i=BitsUtil.nextSetBit(flippedA,0); i > -1; i=BitsUtil.nextSetBit(flippedA,i + 1)) {    if (!BitsUtil.get(flippedB,i) && flipTriangle(i,flippedB) >= 0) {      numflips+=2;    }  }  if (LOG.isDebuggingFinest()) {    LOG.debugFinest("Flips: " + numflips);  }  return numflips;}  }
class C{  private char[] zeroLengthCheck(String s){  return (s.trim().length() == 0) ? null : s.toCharArray();}  }
class C{  public boolean hasSingleTableMultitenant(){  return hasMultitenant() && m_descriptor.getMultitenantPolicy().isSingleTableMultitenantPolicy();}  }
class C{  public T caseAnonymous_traceEntity_1_(Anonymous_traceEntity_1_ object){  return null;}  }
class C{  public static String quote(char ch){switch (ch) {case '\b':    return "\\b";case '\f':  return "\\f";case '\n':return "\\n";case '\r':return "\\r";case '\t':return "\\t";case '\'':return "\\'";case '\"':return "\\\"";case '\\':return "\\\\";default :return (isPrintableAscii(ch)) ? String.valueOf(ch) : String.format("\\u%04x",(int)ch);}}  }
class C{  protected PlanNode fillGroupLoopBranches(PlanNode input,TableGroupJoinNode parentTable,TableGroupJoinNode rootTable){  TableGroupJoinNode leafTable=parentTable;  if (isParent(parentTable)) {    leafTable=parentTable.getFirstChild();    List<TableSource> tables=new ArrayList<>();    input=new BranchLookup(input,parentTable.getTable().getTable(),leafTable.getTable().getTable(),tables);    input=fillBranch(input,tables,leafTable,parentTable,leafTable);  }  return fillSideBranches(input,leafTable,rootTable);}  }
class C{  private String warehouseOwnership(){  log.info("warehouseOwnership - M_Warehouse_ID=" + p_M_Warehouse_ID);  if (p_AD_Org_ID == 0)   throw new IllegalArgumentException("Warehouse - Org cannot be * (0)");  StringBuffer sql=new StringBuffer();  sql.append("UPDATE M_Warehouse " + "SET AD_Org_ID=").append(p_AD_Org_ID).append(" WHERE M_Warehouse_ID=").append(p_M_Warehouse_ID).append(" AND AD_Client_ID=").append(getAD_Client_ID()).append(" AND AD_Org_ID<>").append(p_AD_Org_ID);  int no=DB.executeUpdate(sql.toString(),get_TrxName());  addLog(0,null,new BigDecimal(no),Msg.translate(getCtx(),"M_Warehouse_ID"));  sql=new StringBuffer();  sql.append("UPDATE M_Warehouse_Acct " + "SET AD_Org_ID=").append(p_AD_Org_ID).append(" WHERE M_Warehouse_ID=").append(p_M_Warehouse_ID).append(" AND AD_Client_ID=").append(getAD_Client_ID()).append(" AND AD_Org_ID<>").append(p_AD_Org_ID);  no=DB.executeUpdate(sql.toString(),get_TrxName());  addLog(0,null,new BigDecimal(no),Msg.translate(getCtx(),"C_AcctSchema_ID"));  sql=new StringBuffer();  sql.append("UPDATE M_Locator " + "SET AD_Org_ID=").append(p_AD_Org_ID).append(" WHERE M_Warehouse_ID=").append(p_M_Warehouse_ID).append(" AND AD_Client_ID=").append(getAD_Client_ID()).append(" AND AD_Org_ID<>").append(p_AD_Org_ID);  no=DB.executeUpdate(sql.toString(),get_TrxName());  addLog(0,null,new BigDecimal(no),Msg.translate(getCtx(),"M_Locator_ID"));  sql=new StringBuffer();  sql.append("UPDATE M_Storage s " + "SET AD_Org_ID=").append(p_AD_Org_ID).append(" WHERE EXISTS " + "(SELECT * FROM M_Locator l WHERE l.M_Locator_ID=s.M_Locator_ID" + " AND l.M_Warehouse_ID=").append(p_M_Warehouse_ID).append(") AND AD_Client_ID=").append(getAD_Client_ID()).append(" AND AD_Org_ID<>").append(p_AD_Org_ID);  no=DB.executeUpdate(sql.toString(),get_TrxName());  addLog(0,null,new BigDecimal(no),Msg.translate(getCtx(),"Storage"));  return "";}  }
class C{  private boolean onCheckCanRefresh(){  return mRefreshEnabled && !canChildScrollUp() && mHasHeaderView&& mRefreshTriggerOffset > 0;}  }
class C{  public boolean equals(String productId,Map<String,GenericValue> additionalProductFeatureAndAppls,Map<String,Object> attributes,String prodCatalogId,BigDecimal selectedAmount){  return equals(productId,additionalProductFeatureAndAppls,attributes,prodCatalogId,selectedAmount,null,null,false);}  }
class C{  public String globalInfo(){  return "This class performs Bias-Variance decomposion on any classifier using the " + "sub-sampled cross-validation procedure as specified in (1).\n" + "The Kohavi and Wolpert definition of bias and variance is specified in (2).\n"+ "The Webb definition of bias and variance is specified in (3).\n\n"+ getTechnicalInformation().toString();}  }
class C{  public World(InputStream stream,int maxMoves) throws IOException {  this(new InputStreamReader(stream),maxMoves);}  }
class C{  private void init(){  pesNumber=cloudlet.getNumberOfPes();  if (pesNumber > 1) {    machineArrayId=new int[pesNumber];    peArrayId=new int[pesNumber];  }  arrivalTime=CloudSim.clock();  cloudlet.setSubmissionTime(arrivalTime);  finishedTime=NOT_FOUND;  machineId=NOT_FOUND;  peId=NOT_FOUND;  index=0;  totalCompletionTime=0.0;  startExecTime=0.0;  cloudletFinishedSoFar=cloudlet.getCloudletFinishedSoFar() * Consts.MILLION;}  }
class C{  public void testRandomness(){  final double value1=MatsimRandom.getRandom().nextDouble();  final double value2=MatsimRandom.getRandom().nextDouble();  final double value3=MatsimRandom.getRandom().nextDouble();  assertTrue(Math.abs(value1 - value2) > EPSILON);  assertTrue(Math.abs(value1 - value3) > EPSILON);  assertTrue(Math.abs(value2 - value3) > EPSILON);}  }
class C{  public void updatePosition(Particle particle,long elapsedTime){  Vector3f speed=particle.getSpeed();  float delta=elapsedTime / 1000.0f;  float dx=speed.x * delta;  float dy=speed.y * delta;  float dz=speed.z * delta;  Vector3f pos=particle.getPosition();  particle.setPosition(pos.x + dx,pos.y + dy,pos.z + dz);}  }
class C{  public boolean isDefaultFullDetail(){  return super.isDefaultFullDetail();}  }
class C{  private void createTriangularNetwork(){  GenerateFundamentalDiagramData.LOG.info("==========Creating network=========");  Network network=scenario.getNetwork();  if (isTimeDependentNetwork) {    scenario.getConfig().network().setTimeVariantNetwork(true);    Network netImpl=(Network)scenario.getNetwork();    netImpl.getFactory().setLinkFactory(new VariableIntervalTimeVariantLinkFactory());  }  for (int i=0; i < SUBDIVISION_FACTOR + 1; i++) {    double x=0, y=0;    x=(LINK_LENGTH / SUBDIVISION_FACTOR) * i;    Coord coord=new Coord(x,y);    Id<Node> id=Id.createNodeId(i);    Node node=scenario.getNetwork().getFactory().createNode(id,coord);    network.addNode(node);  }  for (int i=0; i < SUBDIVISION_FACTOR; i++) {    double x=LINK_LENGTH - ((LINK_LENGTH / SUBDIVISION_FACTOR)) * Math.cos(Math.PI / 3) * (i + 1);    double y=(LINK_LENGTH / SUBDIVISION_FACTOR) * Math.sin(Math.PI / 3) * (i + 1);    Coord coord=new Coord(x,y);    Id<Node> id=Id.createNodeId(SUBDIVISION_FACTOR + i + 1);    Node node=scenario.getNetwork().getFactory().createNode(id,coord);    network.addNode(node);  }  for (int i=0; i < SUBDIVISION_FACTOR - 1; i++) {    double x=LINK_LENGTH / 2 - (LINK_LENGTH / SUBDIVISION_FACTOR) * Math.cos(Math.PI / 3) * (i + 1);    double y=Math.tan(Math.PI / 3) * x;    Coord coord=new Coord(x,y);    Id<Node> id=Id.createNodeId(2 * SUBDIVISION_FACTOR + i + 1);    Node node=scenario.getNetwork().getFactory().createNode(id,coord);    network.addNode(node);  }  double x=-50.0;  Coord coord=new Coord(x,0.0);  Node startNode=scenario.getNetwork().getFactory().createNode(Id.createNodeId("home"),coord);  network.addNode(startNode);  coord=new Coord(LINK_LENGTH + 50.0,0.0);  Id<Node> endNodeId=Id.createNodeId("work");  Node endNode=scenario.getNetwork().getFactory().createNode(endNodeId,coord);  network.addNode(endNode);  Set<String> allowedModes=new HashSet<>(Arrays.asList(this.travelModes));  for (int i=0; i < 3 * SUBDIVISION_FACTOR; i++) {    Id<Node> idFrom=Id.createNodeId(i);    Id<Node> idTo;    if (i != 3 * SUBDIVISION_FACTOR - 1)     idTo=Id.createNodeId(i + 1); else     idTo=Id.createNodeId(0);    Node from=network.getNodes().get(idFrom);    Node to=network.getNodes().get(idTo);    Link link=scenario.getNetwork().getFactory().createLink(Id.createLinkId(i),from,to);    link.setCapacity(LINK_CAPACITY);    link.setFreespeed(FREESPEED_KM_H / 3.6);    link.setLength(LINK_LENGTH);    link.setNumberOfLanes(NO_OF_LANES);    link.setAllowedModes(allowedModes);    network.addLink(link);  }  Id<Link> startLinkId=Id.createLinkId("home");  Link startLink=scenario.getNetwork().getFactory().createLink(startLinkId,startNode,scenario.getNetwork().getNodes().get(Id.createNodeId(0)));  startLink.setCapacity(10 * LINK_CAPACITY);  startLink.setFreespeed(FREESPEED_KM_H / 3.6);  startLink.setLength(25.);  startLink.setNumberOfLanes(1.);  startLink.setAllowedModes(allowedModes);  network.addLink(startLink);  Id<Link> endLinkId=Id.createLinkId("work");  Link endLink=scenario.getNetwork().getFactory().createLink(endLinkId,scenario.getNetwork().getNodes().get(Id.createNodeId(SUBDIVISION_FACTOR)),endNode);  endLink.setCapacity(10 * LINK_CAPACITY);  endLink.setFreespeed(FREESPEED_KM_H / 3.6);  endLink.setLength(25.);  endLink.setNumberOfLanes(1.);  endLink.setAllowedModes(allowedModes);  network.addLink(endLink);}  }
class C{  public SerialTurnout(String systemName,String userName){  super(systemName,userName);  tSystemName=systemName;  tBit=SerialAddress.getBitFromSystemName(systemName);}  }
class C{  public void onFailure(R result,Throwable failure){}  }
class C{  public boolean isInverted(){  return mInverted;}  }
class C{  public void propertyChange(PropertyChangeEvent e){  if (e.getSource() == noteLabel && e.getPropertyName() == "text") {    firePropertyChange(ACCESSIBLE_TEXT_PROPERTY,null,0);  }}  }
class C{  public static double[] matrixToArray(double[][] input,int fromRow,int rows,int fromColumn,int columns){  double[] output=new double[rows * columns];  for (int c=0; c < columns; c++) {    for (int r=0; r < rows; r++) {      output[c * rows + r]=input[r + fromRow][c + fromColumn];    }  }  return output;}  }
class C{  public void testCertificateFactory09(){  if (!X509Support) {    fail(NotSupportMsg);    return;  }  CertificateFactory[] certFs=initCertFs();  assertNotNull("CertificateFactory objects were not created",certFs);  Iterator<String> it1=certFs[0].getCertPathEncodings();  Iterator<String> it2=certFs[1].getCertPathEncodings();  assertEquals("Incorrect encodings",it1.hasNext(),it2.hasNext());  while (it1.hasNext()) {    it2=certFs[1].getCertPathEncodings();    String s1=it1.next();    boolean yesNo=false;    while (it2.hasNext()) {      if (s1.equals(it2.next())) {        yesNo=true;        break;      }    }    assertTrue("Encoding: ".concat(s1).concat(" does not define for certF2 CertificateFactory"),yesNo);  }  it1=certFs[0].getCertPathEncodings();  it2=certFs[2].getCertPathEncodings();  assertEquals("Incorrect encodings",it1.hasNext(),it2.hasNext());  while (it1.hasNext()) {    it2=certFs[2].getCertPathEncodings();    String s1=it1.next();    boolean yesNo=false;    while (it2.hasNext()) {      if (s1.equals(it2.next())) {        yesNo=true;        break;      }    }    assertTrue("Encoding: ".concat(s1).concat(" does not define for certF3 CertificateFactory"),yesNo);  }}  }
class C{  public DrawerBuilder withHeader(@NonNull View headerView){  this.mHeaderView=headerView;  return this;}  }
class C{  public boolean equals(String name,String key){  if (name != null) {    if (!this.name.equals(name)) {      return false;    }  }  if (key != null) {    if (!this.key.equals(key)) {      return false;    }  }  return true;}  }
class C{  public void remove(symbol sym) throws internal_error {  not_null(sym);  _all.remove(sym.name());}  }
class C{  public static void checkArgument(boolean expression){  if (ExoPlayerLibraryInfo.ASSERTIONS_ENABLED && !expression) {    throw new IllegalArgumentException();  }}  }
class C{  public static void addContextParam(WebXml webXml,String name,String value){  WebXmlTag tag=(WebXmlTag)webXml.getDescriptorType().getTagByName("context-param");  ContextParam contextParam=new ContextParam(tag,name,value);  webXml.addTag(contextParam);}  }
class C{  public static String parseCharset(Map<String,String> headers){  return parseCharset(headers,HTTP.DEFAULT_CONTENT_CHARSET);}  }
class C{  public void endGetDurableCQs(long startTime,boolean timedOut,boolean failed){  long duration=getStatTime() - startTime;  endClientOp(duration,timedOut,failed);  this.stats.incInt(getDurableCQsInProgressId,-1);  int endGetDurableCQsId;  if (timedOut) {    endGetDurableCQsId=getDurableCQsTimedOutId;  } else   if (failed) {    endGetDurableCQsId=getDurableCQsFailedId;  } else {    endGetDurableCQsId=getDurableCQsId;  }  this.stats.incInt(endGetDurableCQsId,1);  this.stats.incLong(getDurableCQsDurationId,duration);}  }
class C{  public void quit(){  super.quit();  if (displayFrame != null)   displayFrame.dispose();  displayFrame=null;  display=null;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_TRACE_TYPE_1__VERBISTY_1:    return VERBISTY_1_EDEFAULT == null ? verbisty_1 != null : !VERBISTY_1_EDEFAULT.equals(verbisty_1);}return super.eIsSet(featureID);}  }
class C{  public Aggregate duplicate() throws IOException, ClassNotFoundException {  Aggregate result=new Aggregate();  ByteArrayOutputStream baos=new ByteArrayOutputStream();  ObjectOutputStream oos=new ObjectOutputStream(baos);  writeExternal(oos);  oos.close();  byte[] buf=baos.toByteArray();  baos.close();  ByteArrayInputStream bais=new ByteArrayInputStream(buf);  ObjectInputStream ois=new ObjectInputStream(bais);  result.readExternal(ois);  ois.close();  bais.close();  if (header != null) {    result.setHeader(header.clone());  }  return result;}  }
class C{  public static void checkArgument(boolean expression,Object errorMessage){  if (ExoPlayerLibraryInfo.ASSERTIONS_ENABLED && !expression) {    throw new IllegalArgumentException(String.valueOf(errorMessage));  }}  }
class C{  boolean shouldPreviousTapResolve(@Nullable URL url){  if (isTapResolveBeyondTheLimit()) {    return false;  }  if (isPromoAvailable()) {    return isBasePageHTTP(url);  }  return true;}  }
class C{  public void close(){synchronized (this) {    if (enableMonitorThread && this.notifier != null) {      this.notifier.stop();    }  }}  }
class C{  public Resource subtractAbsolute(Resource other){  double cpuDifference=this.getCpu() - other.getCpu();  double extraCpu=Math.max(0,cpuDifference);  long ramDifference=this.getRam() - other.getRam();  long extraRam=Math.max(0,ramDifference);  long diskDifference=this.getDisk() - other.getDisk();  long extraDisk=Math.max(0,diskDifference);  return new Resource(extraCpu,extraRam,extraDisk);}  }
class C{  public String toHexString(){  final StringBuilder buf=new StringBuilder(24);  for (  final byte b : toByteArray()) {    buf.append(String.format("%02x",b & 0xff));  }  return buf.toString();}  }
class C{  private final void invertGeneral(Matrix3d m1){  double result[]=new double[9];  int row_perm[]=new int[3];  int i, r, c;  double[] tmp=new double[9];  tmp[0]=m1.m00;  tmp[1]=m1.m01;  tmp[2]=m1.m02;  tmp[3]=m1.m10;  tmp[4]=m1.m11;  tmp[5]=m1.m12;  tmp[6]=m1.m20;  tmp[7]=m1.m21;  tmp[8]=m1.m22;  if (!Matrix4x4.LUDecomposition(tmp,row_perm,3)) {    throw new SingularMatrixException();  }  for (i=0; i < 9; i++) {    result[i]=0.0;  }  result[0]=1.0;  result[4]=1.0;  result[8]=1.0;  luBacksubstitution(tmp,row_perm,result);  this.m00=result[0];  this.m01=result[1];  this.m02=result[2];  this.m10=result[3];  this.m11=result[4];  this.m12=result[5];  this.m20=result[6];  this.m21=result[7];  this.m22=result[8];}  }
class C{  public VersionBlockTreeTermsWriter(SegmentWriteState state,PostingsWriterBase postingsWriter,int minItemsInBlock,int maxItemsInBlock) throws IOException {  BlockTreeTermsWriter.validateSettings(minItemsInBlock,maxItemsInBlock);  maxDoc=state.segmentInfo.maxDoc();  final String termsFileName=IndexFileNames.segmentFileName(state.segmentInfo.name,state.segmentSuffix,TERMS_EXTENSION);  out=state.directory.createOutput(termsFileName,state.context);  boolean success=false;  IndexOutput indexOut=null;  try {    fieldInfos=state.fieldInfos;    this.minItemsInBlock=minItemsInBlock;    this.maxItemsInBlock=maxItemsInBlock;    CodecUtil.writeIndexHeader(out,TERMS_CODEC_NAME,VERSION_CURRENT,state.segmentInfo.getId(),state.segmentSuffix);    final String termsIndexFileName=IndexFileNames.segmentFileName(state.segmentInfo.name,state.segmentSuffix,TERMS_INDEX_EXTENSION);    indexOut=state.directory.createOutput(termsIndexFileName,state.context);    CodecUtil.writeIndexHeader(indexOut,TERMS_INDEX_CODEC_NAME,VERSION_CURRENT,state.segmentInfo.getId(),state.segmentSuffix);    this.postingsWriter=postingsWriter;    postingsWriter.init(out,state);    success=true;  }  finally {    if (!success) {      IOUtils.closeWhileHandlingException(out,indexOut);    }  }  this.indexOut=indexOut;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof XYPointerAnnotation)) {    return false;  }  XYPointerAnnotation that=(XYPointerAnnotation)obj;  if (this.angle != that.angle) {    return false;  }  if (this.tipRadius != that.tipRadius) {    return false;  }  if (this.baseRadius != that.baseRadius) {    return false;  }  if (this.arrowLength != that.arrowLength) {    return false;  }  if (this.arrowWidth != that.arrowWidth) {    return false;  }  if (!this.arrowPaint.equals(that.arrowPaint)) {    return false;  }  if (!ObjectUtilities.equal(this.arrowStroke,that.arrowStroke)) {    return false;  }  if (this.labelOffset != that.labelOffset) {    return false;  }  return super.equals(obj);}  }
class C{  private void suspendApp(){  GcmRegistrationManager gcmRegistrationManager=Matrix.getInstance(VectorApp.this).getSharedGCMRegistrationManager();  if (!gcmRegistrationManager.isBackgroundSyncAllowed() || (gcmRegistrationManager.useGCM() && gcmRegistrationManager.hasRegistrationToken())) {    Log.d(LOG_TAG,"suspendApp ; pause the event stream");    CommonActivityUtils.pauseEventStream(VectorApp.this);  } else {    Log.d(LOG_TAG,"suspendApp ; the event stream is not paused because GCM is disabled.");  }  ArrayList<MXSession> sessions=Matrix.getInstance(this).getSessions();  for (  MXSession session : sessions) {    if (session.isAlive()) {      session.setIsOnline(false);      session.setSyncDelay(gcmRegistrationManager.getBackgroundSyncDelay());      session.setSyncTimeout(gcmRegistrationManager.getBackgroundSyncTimeOut());    }  }  PIDsRetriever.getIntance().onAppBackgrounded();  MyPresenceManager.advertiseAllUnavailable();}  }
class C{  @Override public int read(byte[] buffer,int offset,int length) throws IOException {  int b=-1;  if (_isPartDone)   return -1;  int i=0;  while (_peekOffset + 1 < _peekLength && length > 0) {    buffer[offset + i++]=_peek[_peekOffset++];    length--;  }  while (i < length && (b=read()) >= 0) {    boolean hasCr=false;    if (b == '\r') {      hasCr=true;      b=read();      if (b != '\n') {        buffer[offset + i++]=(byte)'\r';        _peek[0]=(byte)b;        _peekOffset=0;        _peekLength=1;        continue;      }    } else     if (b != '\n') {      buffer[offset + i++]=(byte)b;      continue;    }    int j;    for (j=0; j < _boundaryLength && (b=read()) >= 0 && _boundaryBuffer[j] == b; j++) {    }    if (j == _boundaryLength) {      _isPartDone=true;      if ((b=read()) == '-') {        if ((b=read()) == '-') {          _isDone=true;          _isComplete=true;        }      }      for (; b > 0 && b != '\r' && b != '\n'; b=read()) {      }      if (b == '\r' && (b=read()) != '\n') {        _peek[0]=(byte)b;        _peekOffset=0;        _peekLength=1;      }      return i > 0 ? i : -1;    }    _peekLength=0;    if (hasCr && i + 1 < length) {      buffer[offset + i++]=(byte)'\r';      buffer[offset + i++]=(byte)'\n';    } else     if (hasCr) {      buffer[offset + i++]=(byte)'\r';      _peek[_peekLength++]=(byte)'\n';    } else {      buffer[offset + i++]=(byte)'\n';    }    int k=0;    while (k < j && i + 1 < length)     buffer[offset + i++]=_boundaryBuffer[k++];    while (k < j)     _peek[_peekLength++]=_boundaryBuffer[k++];    _peek[_peekLength++]=(byte)b;    _peekOffset=0;  }  if (i <= 0) {    _isPartDone=true;    if (b < 0)     _isDone=true;    return -1;  } else {    return i;  }}  }
class C{  public short[][] production_table(){  return _production_table;}  }
class C{  public static ActionLocation outputAssembly(DebugCLI cli,DSwfInfo swf,int start,int end){  ActionLocation lStart=swf.locate(start);  ActionLocation lEnd=(end > -1) ? swf.locate(end) : swf.locateSourceLineEnd(lStart);  return outputAssembly(cli,swf,lStart,lEnd);}  }
class C{  public int traversal(){  return soot.PhaseOptions.getInt(options,"traversal");}  }
class C{  public RFC3394WrapEngine(BlockCipher engine,boolean useReverseDirection){  this.engine=engine;  this.wrapCipherMode=(useReverseDirection) ? false : true;}  }
class C{  public Tabs(int tabP){  super(new BorderLayout());  focusListener=new TabFocusListener();  contentPane.setUIID("TabbedPane");  super.addComponent(BorderLayout.CENTER,contentPane);  tabsContainer=new Container();  tabsContainer.setUIID("TabsContainer");  tabsContainer.setScrollVisible(false);  tabsContainer.getStyle().setMargin(0,0,0,0);  if (tabP == -1) {    setTabPlacement(tabPlacement);  } else {    setTabPlacement(tabP);  }  press=new SwipeListener(SwipeListener.PRESS);  drag=new SwipeListener(SwipeListener.DRAG);  release=new SwipeListener(SwipeListener.RELEASE);  setUIID("Tabs");  BorderLayout bd=(BorderLayout)super.getLayout();  if (bd != null) {    if (UIManager.getInstance().isThemeConstant("tabsOnTopBool",false)) {      bd.setCenterBehavior(BorderLayout.CENTER_BEHAVIOR_TOTAL_BELOW);    } else {      bd.setCenterBehavior(BorderLayout.CENTER_BEHAVIOR_SCALE);    }  }}  }
class C{  public boolean containsValue(int val){  byte[] states=_states;  int[] vals=_values;  for (int i=vals.length; i-- > 0; ) {    if (states[i] == FULL && val == vals[i]) {      return true;    }  }  return false;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String n=getString(stack);  String s=getString(stack);  EPG.getInstance().setOverride(EPG.getInstance().getProviderIDForEPGDSName(s),getChannel(stack).getStationID(),n);  return null;}  }
class C{  public Builder textSize(int size){  ensurePositiveInt(size,"text size must be > 0");  textSize=size;  return this;}  }
class C{  @SuppressWarnings("UnusedParameters") public final String extractTextInRectangle(int x1,int y1,int x2,int y2,final int page_number,final boolean estimateParagraphs,final boolean breakFragments) throws PdfException {  reset();  if ((breakFragments) && (!pdf_data.IsEmbedded())) {    throw new PdfException("[PDF] Request to breakfragments and width not added. Please add call to init(true) of PdfDecoder to your code.");  }  final int[] v=validateCoordinates(x1,y1,x2,y2);  x1=v[0];  y1=v[1];  x2=v[2];  y2=v[3];  final int master;  final int count;  if (breakFragments) {    copyToArrays(x1,y2,x2,y1,(isXMLExtraction),false,false,null,false);  } else {    copyToArrays();  }  removeEncoding();  cleanupShadowsAndDrownedObjects(false);  final int[] items=getsortedUnusedFragments(true,false);  count=items.length;  if (count == 0) {    LogWriter.writeLog("Less than 1 text item on page");    return null;  }  final int writingMode=getWritingMode(items,count);  createLines(count,items,writingMode,false,isXMLExtraction,false,false);  master=mergeLinesTogether(writingMode,estimateParagraphs,x1,x2,y1,y2);  if (isXMLExtraction) {    content[master]=new StringBuilder(Fonts.cleanupTokens(content[master].toString()));    content[master].insert(0,"<p>");    content[master].append("</p>");  }  LogWriter.writeLog("Text extraction completed");  return cleanup(content[master]).toString();}  }
class C{  public WildFly8xCliConfigurationFactory(Configuration configuration){  this.configuration=configuration;}  }
class C{  public CRelationBox(final CAbstractCriterium criterium){  this.criterium=criterium;  addItem("<");  addItem("=");  addItem(">");  addActionListener(comboBoxListener);}  }
class C{  IonFloatLite(ContainerlessContext context,boolean isNull){  super(context,isNull);}  }
class C{  public boolean addStackChangedListener(StackChangedListener listener){  return listeners.add(listener);}  }
class C{  private FetchSourceContext normalizeFetchSourceContent(@Nullable FetchSourceContext context,@Nullable String[] gFields){  if (context != null) {    return context;  }  if (gFields == null) {    return FetchSourceContext.FETCH_SOURCE;  }  for (  String field : gFields) {    if (SourceFieldMapper.NAME.equals(field)) {      return FetchSourceContext.FETCH_SOURCE;    }  }  return FetchSourceContext.DO_NOT_FETCH_SOURCE;}  }
class C{  private static List<com.google.security.zynamics.reil.ReilInstruction> convert(final List<ReilInstruction> instructions){  final List<com.google.security.zynamics.reil.ReilInstruction> converted=new ArrayList<com.google.security.zynamics.reil.ReilInstruction>();  for (  final ReilInstruction reilInstruction : instructions) {    if (reilInstruction.getNative() == null) {      throw new IllegalArgumentException("Error: The list of REIL instructions contains null-elements");    }    converted.add(reilInstruction.getNative());  }  return converted;}  }
class C{  protected boolean isKeyInCache(ResultProducer rp,Object[] key) throws Exception {  for (int i=0; i < m_Cache.size(); i++) {    if (m_Cache.get(i).equals(key[m_CacheKeyIndex])) {      return true;    }  }  return false;}  }
class C{  public boolean isMasterMute(){  return AudioSystem.getMasterMute();}  }
class C{  public static Bitmap createIconBitmap(Drawable icon,Context context){  return createIconBitmap(icon,context,1.0f);}  }
class C{  public void add(final Number operand){  this.value+=operand.intValue();}  }
class C{  public boolean isNamespaceDeclUris(){  return namespaceDeclUris;}  }
class C{  public UnrecoverableException(Throwable cause){  super(cause);}  }
class C{  public boolean blockDelegateExecution(final int timeToWaitMS) throws InterruptedException {  final boolean rVal=m_readWriteLock.writeLock().tryLock(timeToWaitMS,TimeUnit.MILLISECONDS);  if (!rVal) {    if (sm_logger.isLoggable(Level.FINE)) {      sm_logger.fine("Could not block delegate execution. Read Lock count: " + m_readWriteLock.getReadLockCount() + " Write Hold count: "+ m_readWriteLock.getWriteHoldCount()+ " Queue Length: "+ m_readWriteLock.getQueueLength()+ " Current Thread Has Lock: "+ m_readWriteLock.isWriteLockedByCurrentThread()+ " Has Queued Threads: "+ m_readWriteLock.hasQueuedThreads()+ " Is Write Locked: "+ m_readWriteLock.isWriteLocked()+ " toString: "+ m_readWriteLock.toString());    } else {      HeadlessGameServer.log("Could not block delegate execution. Read Lock count: " + m_readWriteLock.getReadLockCount() + " Write Hold count: "+ m_readWriteLock.getWriteHoldCount()+ " Queue Length: "+ m_readWriteLock.getQueueLength()+ " Current Thread Has Lock: "+ m_readWriteLock.isWriteLockedByCurrentThread()+ " Has Queued Threads: "+ m_readWriteLock.hasQueuedThreads()+ " Is Write Locked: "+ m_readWriteLock.isWriteLocked()+ " toString: "+ m_readWriteLock.toString());    }  } else {    if (sm_logger.isLoggable(Level.FINE)) {      sm_logger.fine(Thread.currentThread().getName() + " block delegate execution.");    }  }  return rVal;}  }
class C{  public void clear(){  final Object[] items=this.items;  final ReentrantLock lock=this.lock;  lock.lock();  try {    int k=count;    if (k > 0) {      final int putIndex=this.putIndex;      int i=takeIndex;      do {        items[i]=null;      } while ((i=inc(i)) != putIndex);      takeIndex=putIndex;      count=0;      if (itrs != null)       itrs.queueIsEmpty();      for (; k > 0 && lock.hasWaiters(notFull); k--)       notFull.signal();    }  }  finally {    lock.unlock();  }}  }
class C{  private void requestCopyOperation(Intent data,int resultCode){  OCFile folderToMoveAt=data.getParcelableExtra(FolderPickerActivity.EXTRA_FOLDER);  OCFile targetFile=data.getParcelableExtra(FolderPickerActivity.EXTRA_FILE);  getFileOperationsHelper().copyFile(folderToMoveAt,targetFile);  Log.d(TAG,"requestCopyOperation result code : " + resultCode);}  }
class C{  public static boolean overlapConvexPolygons(Polygon p1,Polygon p2){  return overlapConvexPolygons(p1,p2,null);}  }
class C{  public static double[][] unboxVectors(List<? extends NumberVector> means){  double[][] ret=new double[means.size()][];  for (int i=0; i < ret.length; i++) {    ret[i]=means.get(i).toArray();  }  return ret;}  }
class C{  void requestLayout(SurfacePriviledged<T> surface){  if (surface.getIsDragging() || surface.isLocked())   return;  if (surface.getNodeList().size() < 1) {    throw new IllegalStateException("Cannot layout an empty surface.");  }  long start=System.nanoTime();  PathIterator<T> pathIterator=surface.getPathIterator();  if (surface.getIsInit()) {    connectNodes(surface);    pathIterator.assemblePaths(surface.getRoot());  }  pathIterator.accept(visitors.get(surface)[LAYOUT_INDEX]);  pathIterator.accept(visitors.get(surface)[ALIGNMENT_INDEX]);  pathIterator.accept(visitors.get(surface)[WEIGHT_INDEX]);  surface.setIsInit(false);  doStats(surface,start);}  }
class C{  public final static boolean isGenericDelimiter(int c){switch (c) {case ':':case '/':case '?':case '#':case '[':case ']':case '@':    return true;default :  return false;}}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  private Node max(Node x){  if (x.right == null)   return x;  return max(x.right);}  }
class C{  public DictItem addDictItem(long userId,long dictCollectionId,String itemCode,Map<Locale,String> itemNameMap,long parentId,ServiceContext serviceContext) throws SystemException, NoSuchDictItemException {  return dictItemLocalService.addDictItem(userId,dictCollectionId,itemCode,itemNameMap,null,parentId,serviceContext);}  }
class C{  @Deprecated public static String toString(byte[] input) throws IOException {  return new String(input);}  }
class C{  public XMLX509SKI itemSKI(int i) throws XMLSecurityException {  Element e=XMLUtils.selectDsNode(this.constructionElement.getFirstChild(),Constants._TAG_X509SKI,i);  if (e != null) {    return new XMLX509SKI(e,this.baseURI);  }  return null;}  }
class C{  @SuppressWarnings("unchecked") public Builder map(String fullyQualifiedColumnNames,String mapperClassName,Configuration config){  Class<ColumnMapper> mapperClass=null;  if (mapperClassName != null) {    try {      mapperClass=(Class<ColumnMapper>)getClass().getClassLoader().loadClass(mapperClassName);    } catch (    ClassNotFoundException e) {      throw new ConnectException("Unable to find column mapper class " + mapperClassName + ": "+ e.getMessage(),e);    }catch (    ClassCastException e) {      throw new ConnectException("Column mapper class must implement " + ColumnMapper.class + " but does not: "+ e.getMessage(),e);    }  }  return map(fullyQualifiedColumnNames,mapperClass,config);}  }
class C{  public ServerManager(){  this(new RealmVerifierFactory(new YadisResolver(new HttpFetcherFactory())));}  }
class C{  private AlarmEvent enable(AlarmPoint alarm){  AlarmStatus status=alarm.currentStatus();  if (status.name(null).equals(AlarmPoint.STATUS_DISABLED)) {    AlarmStatus newStatus=createStatus(AlarmPoint.STATUS_NORMAL);    return createEvent((alarm.identity().get()),status,newStatus,AlarmPoint.EVENT_ENABLING);  }  return null;}  }
class C{  public static void i(String msg){  log(LEVEL.INFO,null,msg,null);}  }
class C{  public static void addMacKeyboardActions(){  if (MiscUtil.OS_MAC) {    addMacKeyboardActionsTo("TextField.focusInputMap");    addMacKeyboardActionsTo("TextArea.focusInputMap");    addMacKeyboardActionsTo("TextPane.focusInputMap");  }}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.main);  _serviceIntent=new Intent(TalkActivity.this,TalkService.class);  startService(_serviceIntent);}  }
class C{  public synchronized void clear(){  size=0;  Arrays.fill(table,null);}  }
class C{  public Matrix4x3d normalize3x3(){  return normalize3x3(this);}  }
class C{  @Override public Long rpush(final String key,final String... strings){  checkIsInMultiOrPipeline();  client.rpush(key,strings);  return client.getIntegerReply();}  }
class C{  public EnumSet<Flags> flags(){  return Flags.asSet(this.flagsAsInt());}  }
class C{  private Bookmarks(){}  }
class C{  public static final String interpretHostManufacturerDevice(Integer hostMfr,Integer hostDevice){  String s;  s="Unknown Host Manufacturer/Device";switch (hostMfr) {case LnConstants.RE_IPL_MFR_DIGITRAX:{switch (hostDevice) {case LnConstants.RE_IPL_DIGITRAX_HOST_DCS51:        s="Digitrax DCS51";      break;case LnConstants.RE_IPL_DIGITRAX_HOST_DT402:    s="Digitrax DT402(x)";  break;case LnConstants.RE_IPL_DIGITRAX_HOST_PR3:s="Digitrax PR3";break;case LnConstants.RE_IPL_DIGITRAX_HOST_UR92:s="Digitrax UR92";break;case LnConstants.RE_IPL_DIGITRAX_HOST_UT4:s="Digitrax UT4(x)";break;default :s="Digitrax (unknown device)";break;}break;}case LnConstants.RE_IPL_MFR_RR_CIRKITS:{switch (hostDevice) {case LnConstants.RE_IPL_RRCIRKITS_HOST_TC64:s="RR-Cirkits TC-64";break;default :s="RR-Cirkits (unknown device)";break;}break;}default :break;}return s;}  }
class C{  public void testSimpleWritePerformance(String store) throws Exception {  waitForFullMesh(5000);  final int count=1000000;  IStoreClient<String,String> client0=syncManagers[0].getStoreClient(store,String.class,String.class);  IStoreClient<String,String> client2=syncManagers[2].getStoreClient(store,String.class,String.class);  long then=System.currentTimeMillis();  for (int i=1; i <= count; i++) {    client0.put("" + i,"" + i);  }  long donewriting=System.currentTimeMillis();  waitForValue(client2,"" + count,null,count,"client2");  long now=System.currentTimeMillis();  logger.info("Simple write ({}): {} values in {}+/-100 " + "millis ({} synced writes/s) ({} local writes/s)",new Object[]{store,count,(now - then),1000.0 * count / (now - then),1000.0 * count / (donewriting - then)});}  }
class C{  protected EntryImpl(){  super();}  }
class C{  public boolean isClusterStable(){  log.info("Checking if local cluster is stable...");  return ((((DbClientImpl)dbClient).getCoordinatorClient().getControlNodesState() == ClusterInfo.ClusterState.STABLE) && isGeodbServiceStable());}  }
class C{  String calculateSuffix(String body){  if (value < minValue) {    value=minValue;  }  if (value > maxValue) {    value=maxValue;  }  if (value + value2 < minValue || value2 < 0) {    value2=0;  }  if (value + value2 > maxValue) {    value2=maxValue - value;  }  double unitSize=(maxValue - minValue) / (fullBlocks * partialBlocks);  double blockWidth=unitSize * partialBlocks;  int redWhole=(int)Math.floor(value / blockWidth);  int redPart=(int)Math.floor((value - redWhole * blockWidth) / unitSize);  int bluePart1=redPart > 0 ? Math.min((int)Math.floor(value2 / unitSize),partialBlocks - redPart) : 0;  int blueWhole=(int)Math.max(0,Math.ceil(value2 / blockWidth) - (redPart > 0 ? 1 : 0));  int bluePart2=(int)Math.floor((value2 - (blueWhole * blockWidth) - (bluePart1 * unitSize)) / unitSize);  StringBuilder buf=new StringBuilder();  if (showA) {    String format=WHITE_LEFT_BORDER;    if (redWhole > 0 || redPart > 0) {      format=RED_LEFT_BORDER;    } else     if (bluePart1 == 0 && (blueWhole > 0 || bluePart2 > 0)) {      format=BLUE_LEFT_BORDER;    }    buf.append(MessageFormat.format(body,new Object[]{format}));  }  String fullRedBody=MessageFormat.format(body,partialBlocks + "+0");  for (int i=0; i < redWhole; i++) {    buf.append(fullRedBody);  }  if (redPart > 0) {    String partialBody=MessageFormat.format(body,redPart + "+" + bluePart1);    buf.append(partialBody);  }  String fullBlueBody=MessageFormat.format(body,"0+" + partialBlocks);  for (int i=0; i < blueWhole; i++) {    buf.append(fullBlueBody);  }  if (bluePart2 > 0) {    String partialBody=MessageFormat.format(body,"0+" + bluePart2);    buf.append(partialBody);  }  int emptyBlocks=showEmptyBlocks ? fullBlocks - (redWhole + blueWhole + (redPart > 0 ? 1 : 0)+ (bluePart2 > 0 ? 1 : 0)) : 0;  if (emptyBlocks > 0) {    String emptyBody=MessageFormat.format(body,"0+0");    for (int i=0; i < emptyBlocks; i++) {      buf.append(emptyBody);    }  }  if (showB) {    String format=WHITE_RIGHT_BORDER;    if (redWhole == fullBlocks) {      format=RED_RIGHT_BORDER;    } else     if (redWhole + (redPart + bluePart1 == partialBlocks ? 1 : 0) + blueWhole == fullBlocks) {      format=BLUE_RIGHT_BORDER;    }    buf.append(MessageFormat.format(body,new Object[]{format}));  }  return buf.toString();}  }
class C{  @Override public void drawString(String str,float x,float y,Font font,FontRenderContext frc,float targetW){  if (str.length() == 0) {    return;  }  if (WPrinterJob.shapeTextProp) {    super.drawString(str,x,y,font,frc,targetW);    return;  }  boolean layoutNeeded=strNeedsTextLayout(str,font);  if ((font.hasLayoutAttributes() || layoutNeeded) && !printingGlyphVector) {    TextLayout layout=new TextLayout(str,font,frc);    layout.draw(this,x,y);    return;  } else   if (layoutNeeded) {    super.drawString(str,x,y,font,frc,targetW);    return;  }  AffineTransform deviceTransform=getTransform();  AffineTransform fontTransform=new AffineTransform(deviceTransform);  fontTransform.concatenate(font.getTransform());  int transformType=fontTransform.getType();  boolean directToGDI=((transformType != AffineTransform.TYPE_GENERAL_TRANSFORM) && ((transformType & AffineTransform.TYPE_FLIP) == 0));  WPrinterJob wPrinterJob=(WPrinterJob)getPrinterJob();  try {    wPrinterJob.setTextColor((Color)getPaint());  } catch (  ClassCastException e) {    directToGDI=false;  }  if (!directToGDI) {    super.drawString(str,x,y,font,frc,targetW);    return;  }  Point2D.Float userpos=new Point2D.Float(x,y);  Point2D.Float devpos=new Point2D.Float();  if (font.isTransformed()) {    AffineTransform fontTx=font.getTransform();    float translateX=(float)(fontTx.getTranslateX());    float translateY=(float)(fontTx.getTranslateY());    if (Math.abs(translateX) < 0.00001)     translateX=0f;    if (Math.abs(translateY) < 0.00001)     translateY=0f;    userpos.x+=translateX;    userpos.y+=translateY;  }  deviceTransform.transform(userpos,devpos);  if (getClip() != null) {    deviceClip(getClip().getPathIterator(deviceTransform));  }  float fontSize=font.getSize2D();  double devResX=wPrinterJob.getXRes();  double devResY=wPrinterJob.getYRes();  double fontDevScaleY=devResY / DEFAULT_USER_RES;  int orient=getPageFormat().getOrientation();  if (orient == PageFormat.LANDSCAPE || orient == PageFormat.REVERSE_LANDSCAPE) {    double tmp=devResX;    devResX=devResY;    devResY=tmp;  }  double devScaleX=devResX / DEFAULT_USER_RES;  double devScaleY=devResY / DEFAULT_USER_RES;  fontTransform.scale(1.0 / devScaleX,1.0 / devScaleY);  Point2D.Double pty=new Point2D.Double(0.0,1.0);  fontTransform.deltaTransform(pty,pty);  double scaleFactorY=Math.sqrt(pty.x * pty.x + pty.y * pty.y);  float scaledFontSizeY=(float)(fontSize * scaleFactorY * fontDevScaleY);  Point2D.Double ptx=new Point2D.Double(1.0,0.0);  fontTransform.deltaTransform(ptx,ptx);  double scaleFactorX=Math.sqrt(ptx.x * ptx.x + ptx.y * ptx.y);  float awScale=getAwScale(scaleFactorX,scaleFactorY);  int iangle=getAngle(ptx);  ptx=new Point2D.Double(1.0,0.0);  deviceTransform.deltaTransform(ptx,ptx);  double advanceScaleX=Math.sqrt(ptx.x * ptx.x + ptx.y * ptx.y);  pty=new Point2D.Double(0.0,1.0);  deviceTransform.deltaTransform(pty,pty);  double advanceScaleY=Math.sqrt(pty.x * pty.x + pty.y * pty.y);  Font2D font2D=FontUtilities.getFont2D(font);  if (font2D instanceof TrueTypeFont) {    textOut(str,font,(TrueTypeFont)font2D,frc,scaledFontSizeY,iangle,awScale,advanceScaleX,advanceScaleY,x,y,devpos.x,devpos.y,targetW);  } else   if (font2D instanceof CompositeFont) {    CompositeFont compFont=(CompositeFont)font2D;    float userx=x, usery=y;    float devx=devpos.x, devy=devpos.y;    char[] chars=str.toCharArray();    int len=chars.length;    int[] glyphs=new int[len];    compFont.getMapper().charsToGlyphs(len,chars,glyphs);    int startChar=0, endChar=0, slot=0;    while (endChar < len) {      startChar=endChar;      slot=glyphs[startChar] >>> 24;      while (endChar < len && ((glyphs[endChar] >>> 24) == slot)) {        endChar++;      }      String substr=new String(chars,startChar,endChar - startChar);      PhysicalFont slotFont=compFont.getSlotFont(slot);      textOut(substr,font,slotFont,frc,scaledFontSizeY,iangle,awScale,advanceScaleX,advanceScaleY,userx,usery,devx,devy,0f);      Rectangle2D bds=font.getStringBounds(substr,frc);      float xAdvance=(float)bds.getWidth();      userx+=xAdvance;      userpos.x+=xAdvance;      deviceTransform.transform(userpos,devpos);      devx=devpos.x;      devy=devpos.y;    }  } else {    super.drawString(str,x,y,font,frc,targetW);  }}  }
class C{  private static byte[] encode3to4(byte[] b4,byte[] threeBytes,int numSigBytes){  encode3to4(threeBytes,0,numSigBytes,b4,0);  return b4;}  }
class C{  public final boolean isFatalEnabled(){  return false;}  }
class C{  public HTTPConnectionImpl openGetConnection(final String string) throws IOException {  return this.openRequestConnection(this.createGetRequest(string));}  }
class C{  public static long[] truncateI(long[] v,int len){  final int zap=(v.length * Long.SIZE) - len;  final int zapWords=(zap >>> LONG_LOG2_SIZE);  final int zapbits=zap & LONG_LOG2_MASK;  Arrays.fill(v,v.length - zapWords,v.length,0);  if (zapbits > 0) {    v[v.length - zapWords - 1]&=(LONG_ALL_BITS >>> zapbits);  }  return v;}  }
class C{  public static void processResponseHeaders(ServiceContext context){  HtmlSpeedHttpExchange exchange=context.exchange;  HttpServletResponse response=context.response;  int status=context.status;  String[] responseHeaders=context.responseHeaders;  ArrayList<String> cachedHeaders=context.cachedHeaders;  boolean isStateFull=context.isStateFull;  boolean isVersionedRsrc=context.isVersionedRsrc;  boolean isServiceWithIframe=context.isServiceWithIframe;  boolean isRouter=context.isRouter;  boolean isHtml=context.isHtml;  ConfigData configData=context.configData;  boolean foundVaryHeader=false;  long minMaxAge=configData.minStateLessMaxAge;  final long minMaxAgeForContentFirst=(minMaxAge < 32 ? minMaxAge : 32);  long maxAge=CacheUtils.maxAgeOf(exchange,!isStateFull,configData);  for (int h=0; h + 1 < responseHeaders.length; h+=2) {    String header=responseHeaders[h].toLowerCase();    if (!isRouter) {      cachedHeaders.add(responseHeaders[h]);      cachedHeaders.add(responseHeaders[h + 1]);      if (status == 200) {        if (header.equals("content-length") || header.equals("content-encoding"))         continue;        if (header.equals("etag"))         continue;        if ((!isStateFull) && (header.equals("etag") || header.equals("cache-control") || header.equals("expires")|| header.equals("set-cookie")|| (header.equals("pragma") && responseHeaders[h + 1].equalsIgnoreCase("no-cache"))))         continue;        if (isStateFull && !isServiceWithIframe && header.equals("cache-control")&& responseHeaders[h + 1].contains("no-store")) {          response.addHeader("Cache-Control","max-age=0");          continue;        }        if (isStateFull && isServiceWithIframe && (header.equals("cache-control") || header.equals("expires") || (header.equalsIgnoreCase("pragma") && responseHeaders[h + 1].equalsIgnoreCase("no-cache"))))         continue;      }    }    if (isHtml && header.equals("vary")) {      foundVaryHeader=true;      if (responseHeaders[h + 1].toLowerCase().contains("user-agent"))       response.addHeader(responseHeaders[h],responseHeaders[h + 1]); else       response.addHeader(responseHeaders[h],responseHeaders[h + 1] + ",User-Agent");    } else     if (!header.equals("date")) {      response.addHeader(responseHeaders[h],responseHeaders[h + 1]);    }  }  if (isHtml && !foundVaryHeader)   response.addHeader("Vary","User-Agent");  if (isRouter) {  } else   if (status != 200) {  } else   if (!isStateFull) {    if (isVersionedRsrc)     maxAge=31536000;    response.setHeader("Cache-Control","max-age=" + maxAge);  } else   if (isServiceWithIframe) {    if (maxAge < minMaxAgeForContentFirst)     maxAge=minMaxAgeForContentFirst;    response.setHeader("Cache-Control","max-age=" + maxAge);  }  String reason=exchange.getResponseReason();  if (reason != null)   response.setStatus(status,reason); else   response.setStatus(status);}  }
class C{  public boolean containsContext(String name){  return localContext.containsKey(name);}  }
class C{  public boolean addService(PlaceNameService placeNameService,boolean replace){  if (placeNameService == null) {    String message=Logging.getMessage("nullValue.PlaceNameServiceIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  for (int i=0; i < this.serviceList.size(); i++) {    final PlaceNameService other=this.serviceList.get(i);    if (placeNameService.getService().equals(other.getService()) && placeNameService.getDataset().equals(other.getDataset())) {      if (replace) {        this.serviceList.set(i,placeNameService);        return true;      } else {        return false;      }    }  }  this.serviceList.add(placeNameService);  return true;}  }
class C{  public int nextchar(){  int c;  if (textPos >= text.length()) {    textPos=text.length() + 1;    return 0;  }  c=text.charAt(textPos++);  return c;}  }
class C{  private Workflow.Method rollbackDeleteCGMethod(URI cgURI,String deleteStepId){  return new Workflow.Method(RB_DELETE_CG_METHOD_NAME,cgURI,deleteStepId);}  }
class C{  @Override public void onConfigurationChanged(Configuration newConfig){  super.onConfigurationChanged(newConfig);  if (this.appView == null) {    return;  }  PluginManager pm=this.appView.getPluginManager();  if (pm != null) {    pm.onConfigurationChanged(newConfig);  }}  }
class C{  public List<String> addZonesStrategy(List<Zone> zones,Integer vsanId) throws Exception {  List<String> addedZoneNames=new ArrayList<String>();  boolean inSession=false;  boolean commit=true;  CIMObjectPath zonesetServicePath=getZoneService(vsanId.toString());  if (zonesetServicePath == null) {    throw new DeviceControllerException("Couldn't locate ZoneSetService vsan: " + vsanId);  }  CIMInstance zonesetService=_client.getInstance(zonesetServicePath,false,false,null);  try {    inSession=startSession(_client,zonesetService);    List<Zoneset> zonesets=getZonesets(vsanId);    if (zonesets == null || zonesets.isEmpty()) {      throw new DeviceControllerException("no zonesets");    }    Zoneset activeZoneset=zonesets.get(0);    if (activeZoneset.getActive() != true) {      throw new DeviceControllerException("no active zoneset");    }    for (    Zone zone : zones) {      CIMObjectPath zonePath=addZone(_client,zonesetService,((CIMObjectPath)activeZoneset.getCimObjectPath()),zone.getName());    }  }  finally {    if (inSession) {      endSession(_client,zonesetService,commit);    }  }  return addedZoneNames;}  }
class C{  @Override public final void onMediaScannerConnected(){  final File[] files=mFolder.listFiles();  for (  final File file : files) {    if (file.getName().endsWith(".xml") || file.getName().endsWith(".gpx") || file.getName().endsWith(".map")|| file.getName().endsWith(".sqlite")) {      mScanner.scanFile(file.getAbsolutePath(),null);    }  }}  }
class C{  public boolean equals(Object obj){  return obj instanceof JapaneseImperialCalendar && super.equals(obj);}  }
class C{  public static void compactDescription(String head,List<String> dest,List<String> src){  if (src.size() > 0) {    if (src.size() == 1) {      final String line=src.get(0);      dest.add(head + " " + line);    } else {      dest.add(head);      addAllIndented(dest,src);    }  }}  }
class C{  public <T extends JCTree>T translate(T tree,Type pt){  Type prevPt=this.pt;  try {    this.pt=pt;    return translate(tree);  }  finally {    this.pt=prevPt;  }}  }
class C{  public void addUser(CredentialedUser user){synchronized (this) {    allUsers.put(user.getEmail(),user);    setActiveUser(user.getEmail());  }}  }
class C{  public void addUrl(String url){  urls.add(url);}  }
class C{  private String initUsingIiopUrl(ORB defOrb,String url,Hashtable<?,?> env) throws NamingException {  if (defOrb == null)   defOrb=getDefaultOrb();  try {    IiopUrl parsedUrl=new IiopUrl(url);    NamingException savedException=null;    for (    IiopUrl.Address addr : parsedUrl.getAddresses()) {      try {        try {          String tmpUrl="corbaloc:iiop:" + addr.host + ":"+ addr.port+ "/NameService";          if (debug) {            System.err.println("Using url: " + tmpUrl);          }          org.omg.CORBA.Object rootCtx=defOrb.string_to_object(tmpUrl);          setOrbAndRootContext(defOrb,rootCtx);          return parsedUrl.getStringName();        } catch (        Exception e) {        }        if (debug) {          System.err.println("Getting ORB for " + addr.host + " and port "+ addr.port);        }        setOrbAndRootContext(defOrb,(String)null);        return parsedUrl.getStringName();      } catch (      NamingException ne) {        savedException=ne;      }    }    if (savedException != null) {      throw savedException;    } else {      throw new ConfigurationException("Problem with URL: " + url);    }  } catch (  MalformedURLException e) {    throw new ConfigurationException(e.getMessage());  }}  }
class C{  private String createDCATFeed(){  StringBuilder feed=new StringBuilder();  if (!prefixes.isEmpty()) {    feed.append(createPrefixesInformation());    feed.append("\n");  }  feed.append(createDCATCatalogInformation());  feed.append("\n");  Set<String> organisations=new HashSet<String>();  String publisherBaselink=settings.get(PUBLISHER_BASELINK_KEY);  if (registrationManager.getHostingOrganisation() != null && publisherBaselink != null) {    Organisation org=registrationManager.getHostingOrganisation();    String publisher=publisherBaselink + org.getKey() + "#Organization";    String organisation=encapsulateObject(publisher,ObjectTypes.RESOURCE) + " a foaf:Agent ; foaf:name \"" + org.getName()+ "\"";    if (org.getHomepageURL() != null) {      organisation+=" ; foaf:homepage " + encapsulateObject(org.getHomepageURL(),ObjectTypes.RESOURCE);    }    organisation+=" .";    organisations.add(organisation);  }  Set<String> themes=new HashSet<String>();  String themeUri=settings.get(THEME_URI_KEY);  String datasetThemeLabel=settings.get(DATASET_THEME_LABEL_KEY);  String themeTaxonomyUri=settings.get(THEME_TAXONOMY_URI_KEY);  boolean foundDatasets=false;  for (  Resource resource : resourceManager.listPublishedPublicVersions()) {    if (themeUri != null && datasetThemeLabel != null && themeTaxonomyUri != null && publisherBaselink != null) {      BigDecimal v=resource.getLastPublishedVersionsVersion();      String shortname=resource.getShortname();      File versionEmlFile=cfg.getDataDir().resourceEmlFile(shortname,v);      Resource publishedPublicVersion=ResourceUtils.reconstructVersion(v,resource.getShortname(),resource.getAssignedDoi(),resource.getOrganisation(),resource.findVersionHistory(v),versionEmlFile,resource.getKey());      if (publishedPublicVersion.getRecordsPublished() > 0 && publishedPublicVersion.getEml() != null && publishedPublicVersion.getEml().parseLicenseUrl() != null) {        feed.append(createDCATDatasetInformation(publishedPublicVersion));        feed.append("\n");        feed.append(createDCATDistributionInformation(publishedPublicVersion));        feed.append("\n");        foundDatasets=true;        if (publishedPublicVersion.getOrganisation() != null) {          String publisher=publisherBaselink + publishedPublicVersion.getOrganisation().getKey() + "#Organization";          String organisation=encapsulateObject(publisher,ObjectTypes.RESOURCE) + " a foaf:Agent ; foaf:name \"" + publishedPublicVersion.getOrganisation().getName()+ "\"";          if (publishedPublicVersion.getOrganisation().getHomepageURL() != null) {            organisation+=" ; foaf:homepage " + encapsulateObject(publishedPublicVersion.getOrganisation().getHomepageURL(),ObjectTypes.RESOURCE);          }          organisation+=" .";          organisations.add(organisation);        }        themes.add(encapsulateObject(themeUri,ObjectTypes.RESOURCE) + " a skos:Concept ; skos:prefLabel \"" + datasetThemeLabel+ "\"@en ; skos:inScheme <"+ themeTaxonomyUri+ "> .");      }    }  }  if (foundDatasets) {    LOG.debug("Resources appended to DCAT feed.");  } else {    feed.append("\n#No published public resources added to DCAT feed, a valid DCAT feed requires at least one!\n");  }  for (  String organisation : organisations) {    feed.append(organisation);    feed.append("\n");  }  feed.append("\n");  for (  String theme : themes) {    feed.append(theme);    feed.append("\n");  }  return feed.toString();}  }
class C{  public void trimTrailingWhitespace(){  while (length > 0 && Character.isWhitespace(c[length - 1])) {    length--;  }}  }
class C{  private int measureHeight(int measureSpec){  float result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=mPaintSelected.getStrokeWidth() + getPaddingTop() + getPaddingBottom();    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return (int)Math.ceil(result);}  }
class C{  public SocketFactory socketFactory(){  return socketFactory;}  }
class C{  @Override public void releaseSavepoint(Savepoint savepoint) throws SQLException {  try {    debugCode("releaseSavepoint(savepoint);");    checkClosed();    convertSavepoint(savepoint).release();  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  protected void initAnalytics(){}  }
class C{  public void onActivityResult(int requestCode,int resultCode,Intent data){  if (requestCode == RequestCode.GOOGLE_PLAY_SERVICES) {    get(false);  } else {    if (activeProvider != null && activeProvider.requiresActivityResult()) {      activeProvider.onActivityResult(requestCode,resultCode,data);    }  }}  }
class C{  public boolean idResolved(){  return idResolved;}  }
class C{  public void clearText(){  Editable text;  text=mLetters.getText();  text.clear();  text=mDigits.getText();  text.clear();  if (mIsQwerty) {    setMode(DIGITS_AND_LETTERS);  } else {    setMode(DIGITS_ONLY);  }}  }
class C{  @Override public boolean shouldPerform(OptOptions options){  if (options.getOptLevel() < 2) {    return false;  }  return options.SSA_GCP || options.SSA_GCSE;}  }
class C{  public Envelope(Coordinate p){  init(p.x,p.x,p.y,p.y);}  }
class C{  protected TModuleImpl(){  super();}  }
class C{  @Ignore @Test public void shouldCheckDifferentGroups() throws Exception {  final long updatePeriod=10;  final long delta=4;  Context.get().getConfig().setResourceWatcherUpdatePeriod(updatePeriod);  final CacheKey key1=new CacheKey(GROUP_NAME,ResourceType.JS,true);  final CacheKey key2=new CacheKey(GROUP_NAME,ResourceType.CSS,true);  final long start=System.currentTimeMillis();  victim.get(key1);  Thread.sleep(updatePeriod);  do {    victim.get(key1);  } while (System.currentTimeMillis() - start < updatePeriod - delta);  victim.get(key2);  verify(mockResourceWatcher,times(2)).check(key1);  verify(mockResourceWatcher,times(1)).check(key2);}  }
class C{  @Override public void onViewDragStateChanged(int state){  if (state == dragState) {    return;  }  if ((dragState == ViewDragHelper.STATE_DRAGGING || dragState == ViewDragHelper.STATE_SETTLING) && state == ViewDragHelper.STATE_IDLE && (dragOffset == draggerListener.dragHorizontalDragRange() || dragOffset == draggerListener.dragVerticalDragRange())) {    draggerListener.finishActivity();  }  dragState=state;}  }
class C{  public TokenCounter count(Reader stream) throws IOException {  doTokenize(stream);  return this;}  }
class C{  static void useChisel(final ChiselMode mode,final EntityPlayer player,final World world,final BlockPos pos,final EnumFacing side,final float hitX,final float hitY,final float hitZ,final EnumHand hand){  final BitLocation location=new BitLocation(new RayTraceResult(RayTraceResult.Type.BLOCK,new Vec3d(hitX,hitY,hitZ),side,pos),false,ChiselToolType.CHISEL);  final PacketChisel pc=new PacketChisel(false,location,side,mode,hand);  final int extractedState=pc.doAction(player);  if (extractedState != 0) {    ClientSide.breakSound(world,pos,extractedState);    NetworkRouter.instance.sendToServer(pc);  }}  }
class C{  private void readHeader(ByteBuffer buf) throws IOException {  String description;  int version;  byte[] endianIndicator=new byte[2];  byte[] descriptionBuffer=new byte[116];  buf.get(descriptionBuffer);  description=zeroEndByteArrayToString(descriptionBuffer);  if (!description.matches("MATLAB 5.0 MAT-file.*")) {    throw new MatlabIOException("This is not a valid MATLAB 5.0 MAT-file.");  }  buf.position(buf.position() + 8);  byte[] bversion=new byte[2];  buf.get(bversion);  buf.get(endianIndicator);  if ((char)endianIndicator[0] == 'I' && (char)endianIndicator[1] == 'M') {    byteOrder=ByteOrder.LITTLE_ENDIAN;    version=bversion[1] & 0xff | bversion[0] << 8;  } else {    byteOrder=ByteOrder.BIG_ENDIAN;    version=bversion[0] & 0xff | bversion[1] << 8;  }  buf.order(byteOrder);  matFileHeader=new MatFileHeader(description,version,endianIndicator);}  }
class C{  public void addUser(String user,String password) throws Exception {  final StringReader reader=new StringReader(script);  addUser(user,password,reader);}  }
class C{  public static boolean applyTo(ImageHolder imageHolder,ImageView imageView,String tag){  if (imageHolder != null && imageView != null) {    return imageHolder.apply(imageHolder,imageView,tag);  }  return false;}  }
class C{  public UsePosList usePosList(){  return usePosList;}  }
class C{  private boolean checkNextPageHasEntry(ScoreDoc after,EnumSet<QueryOption> options,IndexSearcher s,Query tq,Sort sort,int count,QuerySpecification qs,long queryStartTimeMicros) throws Throwable {  boolean hasValidNextPageEntry=false;  while (after != null) {    TopDocs nextPageResults;    if (sort == null) {      nextPageResults=s.searchAfter(after,tq,count);    } else {      nextPageResults=s.searchAfter(after,tq,count,sort,false,false);    }    if (nextPageResults == null) {      break;    }    ScoreDoc[] hits=nextPageResults.scoreDocs;    if (hits.length == 0) {      break;    }    ServiceDocumentQueryResult rspForNextPage=new ServiceDocumentQueryResult();    rspForNextPage.documents=new HashMap<>();    after=processQueryResults(qs,options,count,s,rspForNextPage,hits,queryStartTimeMicros);    if (rspForNextPage.documentCount > 0) {      hasValidNextPageEntry=true;      break;    }  }  return hasValidNextPageEntry;}  }
class C{  public boolean isProtected(){  return Modifier.isProtected(this.getModifiers());}  }
class C{  public TFloatObjectHashMap(TFloatHashingStrategy strategy){  _hashingStrategy=strategy;}  }
class C{  public void readUnlock(){  int cnt=readLockEntryCnt.get();  if (cnt == 0)   throw new IllegalMonitorStateException();  if (cnt > 1 || Thread.currentThread().getId() == writeLockOwner) {    assert state > 0 || state == -1;    readLockEntryCnt.set(cnt - 1);    return;  }  while (true) {    int cur=state;    assert cur > 0;    if (compareAndSet(STATE_OFFS,cur,cur - 1)) {      readLockEntryCnt.set(0);      return;    }  }}  }
class C{  public void reset(){  m_refs.removeAllElements();}  }
class C{  @Override public Clustering<M> run(Database database,Relation<V> relation){  MutableProgress prog=LOG.isVerbose() ? new MutableProgress("X-means number of clusters",k_max,LOG) : null;  innerKMeans.setK(k_min);  if (LOG.isStatistics()) {    LOG.statistics(new StringStatistic(KEY + ".initialization",initializer.toString()));  }  splitInitializer.setInitialMeans(initializer.chooseInitialMeans(database,relation,k_min,getDistanceFunction()));  Clustering<M> clustering=innerKMeans.run(database,relation);  if (prog != null) {    prog.setProcessed(k_min,LOG);  }  ArrayList<Cluster<M>> clusters=new ArrayList<>(clustering.getAllClusters());  while (clusters.size() <= k_max) {    ArrayList<Cluster<M>> nextClusters=new ArrayList<>();    for (    Cluster<M> cluster : clusters) {      List<Cluster<M>> childClusterList=splitCluster(cluster,database,relation);      nextClusters.addAll(childClusterList);      if (childClusterList.size() > 1) {        k+=childClusterList.size() - 1;        if (prog != null) {          if (k >= k_max) {            prog.setTotal(k + 1);          }          prog.setProcessed(k,LOG);        }      }    }    if (clusters.size() == nextClusters.size()) {      break;    }    splitInitializer.setInitialClusters(nextClusters);    innerKMeans.setK(nextClusters.size());    clustering=innerKMeans.run(database,relation);    clusters.clear();    clusters.addAll(clustering.getAllClusters());  }  if (prog != null) {    prog.setTotal(k);    prog.setProcessed(k,LOG);  }  if (LOG.isDebugging()) {    LOG.debug("X-means returned k=" + k + " clusters.");  }  Clustering<M> result=new Clustering<>("X-Means Result","X-Means",clusters);  return result;}  }
class C{  public static void e(String tag,String msg){  e(tag,msg,null);}  }
class C{  void list(String fname,String files[]) throws IOException {  ZipFile zf=new ZipFile(fname);  Enumeration<? extends ZipEntry> zes=zf.entries();  while (zes.hasMoreElements()) {    printEntry(zes.nextElement(),files);  }  zf.close();}  }
class C{  @Override public boolean createScopedRequired(){  return scopes.isEmpty();}  }
class C{  public static List<CommandOperation> parse(Reader rdr) throws IOException {  JSONParser parser=new JSONParser(rdr);  ObjectBuilder ob=new ObjectBuilder(parser);  if (parser.lastEvent() != JSONParser.OBJECT_START) {    throw new RuntimeException("The JSON must be an Object of the form {\"command\": {...},...");  }  List<CommandOperation> operations=new ArrayList<>();  for (; ; ) {    int ev=parser.nextEvent();    if (ev == JSONParser.OBJECT_END)     return operations;    Object key=ob.getKey();    ev=parser.nextEvent();    Object val=ob.getVal();    if (val instanceof List) {      List list=(List)val;      for (      Object o : list) {        if (!(o instanceof Map)) {          operations.add(new CommandOperation(String.valueOf(key),list));          break;        } else {          operations.add(new CommandOperation(String.valueOf(key),o));        }      }    } else {      operations.add(new CommandOperation(String.valueOf(key),val));    }  }}  }
class C{  public IndicesAliasesRequestBuilder addAlias(String index,String alias,String filter){  AliasActions action=new AliasActions(AliasAction.Type.ADD,index,alias).filter(filter);  request.addAliasAction(action);  return this;}  }
class C{  @Override public void initComponents() throws Exception {}  }
class C{  public static RecyclerViewLicenseFragment newInstance(int[] licenseIDs){  return (RecyclerViewLicenseFragment)onNewInstance(new RecyclerViewLicenseFragment(),licenseIDs);}  }
class C{  public N4JSBuilderPreferencePage(){  super(new ArrayList<Triple<String,String,CompilerDescriptor>>());  List<IComposedGenerator> composedGenerators=ComposedGeneratorRegistry.getComposedGenerators();  for (  IComposedGenerator composedGenerator : composedGenerators) {    for (    CompilerDescriptor compilerDescriptor : composedGenerator.getCompilerDescriptors()) {      this.components.add(Tuples.create(compilerDescriptor.getIdentifier(),compilerDescriptor.getName(),compilerDescriptor));    }  }}  }
class C{  public JSONObject toJSONObject(JSONArray names) throws JSONException {  if (names == null || names.length() == 0 || this.length() == 0) {    return null;  }  JSONObject jo=new JSONObject();  for (int i=0; i < names.length(); i+=1) {    jo.put(names.getString(i),this.opt(i));  }  return jo;}  }
class C{  public boolean isMandatory(){  Object oo=get_Value(COLUMNNAME_IsMandatory);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private static final boolean validType(TypeMirror type){  if (type == null) {    return false;  }switch (type.getKind()) {case ERROR:case OTHER:case PACKAGE:    return false;default :  return true;}}  }
class C{  public static MatteBorder createMatteBorder(int top,int left,int bottom,int right,Icon tileIcon){  return new MatteBorder(top,left,bottom,right,tileIcon);}  }
class C{  public void error(Throwable t,String s,Object... params){  if (isEnabled(TraceSystem.ERROR)) {    s=MessageFormat.format(s,params);    traceWriter.write(TraceSystem.ERROR,module,s,t);  }}  }
class C{  public FatalError(JCDiagnostic d,Throwable t){  super(d.toString(),t);}  }
class C{  public String output(){  StringBuilder sb=new StringBuilder();  int supply_offset=1;  int w_offset=1 + m;  int demand_offset=1 + m + 2 * w;  sb.append("Solution:").append("\n");  sb.append("Direct shipping results").append("\n");  sb.append("\t");  for (int j=0; j < n; j++) {    sb.append((j + 1) + " ");  }  sb.append("\n");  for (int i=0; i < m; i++) {    sb.append((i + 1) + "\t");    for (int j=0; j < n; j++) {      EdgeInfo cei=info[supply_offset + i][demand_offset + j];      sb.append(cei.getFlow() + " ");    }    sb.append("\n");  }  sb.append("Shipping results to warehouses").append("\n");  for (int j=0; j < w; j++) {    sb.append("w" + (j + 1) + " ");    for (int i=0; i < m; i++) {      EdgeInfo cei=info[supply_offset + i][w_offset + 2 * j];      sb.append(cei.getFlow() + " ");    }    sb.append("\n");  }  sb.append("Shipping from warehouses").append("\n");  for (int j=0; j < w; j++) {    sb.append("w" + (j + 1) + " ");    for (int i=0; i < n; i++) {      EdgeInfo cei=info[w_offset + (2 * j + 1)][demand_offset + i];      sb.append(cei.getFlow() + " ");    }    sb.append("\n");  }  sb.append("Computed cost:" + getCost()).append("\n");  return sb.toString();}  }
class C{  public static boolean isWindows2003(){  return win2003;}  }
class C{  public ExtraTree(int selectionCount,int stopSize){  this.stopSize=stopSize;  this.selectionCount=selectionCount;  this.impMeasure=ImpurityMeasure.NMI;}  }
class C{  public static boolean intersectLineSegmentTriangle(double p0X,double p0Y,double p0Z,double p1X,double p1Y,double p1Z,double v0X,double v0Y,double v0Z,double v1X,double v1Y,double v1Z,double v2X,double v2Y,double v2Z,double epsilon,Vector3d intersectionPoint){  double dirX=p1X - p0X;  double dirY=p1Y - p0Y;  double dirZ=p1Z - p0Z;  double t=intersectRayTriangle(p0X,p0Y,p0Z,dirX,dirY,dirZ,v0X,v0Y,v0Z,v1X,v1Y,v1Z,v2X,v2Y,v2Z,epsilon);  if (t >= 0.0 && t <= 1.0) {    intersectionPoint.x=p0X + dirX * t;    intersectionPoint.y=p0Y + dirY * t;    intersectionPoint.z=p0Z + dirZ * t;    return true;  }  return false;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:02.079 -0500",hash_original_method="E3DD503D765939306C71AF759AB54F6B",hash_generated_method="188E3C1641DB9ED9F0D08995BAA63E36") public boolean addAll(Collection<? extends E> c){  if (c == null)   throw new NullPointerException();  if (c == this)   throw new IllegalArgumentException();  boolean modified=false;  for (  E e : c)   if (add(e))   modified=true;  return modified;}  }
class C{  public Builder with(String apiKey){  if (apiKey == null) {    throw new IllegalArgumentException("SoundCloud api can't be null");  }  this.apiKey=apiKey;  return this;}  }
class C{  public JMXControlService(String domain,Hashtable<String,String> additionalKeys){  mbs=ManagementFactory.getPlatformMBeanServer();  this.domain=domain;  this.additionalKeys=additionalKeys;}  }
class C{  public boolean isAllowed(){  return "true".equals(this.record.get("moderated"));}  }
class C{  @Override public String generateLabel(XYDataset dataset,int series){  ParamChecks.nullNotPermitted(dataset,"dataset");  StringBuilder label=new StringBuilder();  label.append(MessageFormat.format(this.formatPattern,createItemArray(dataset,series)));  Integer key=new Integer(series);  List extraLabels=(List)this.seriesLabelLists.get(key);  if (extraLabels != null) {    Object[] temp=new Object[1];    for (int i=0; i < extraLabels.size(); i++) {      temp[0]=extraLabels.get(i);      String labelAddition=MessageFormat.format(this.additionalFormatPattern,temp);      label.append(labelAddition);    }  }  return label.toString();}  }
class C{  @Inline public static void zero(Address start,Extent bytes){  if (VM.VERIFY_ASSERTIONS) {    assertAligned(start);    assertAligned(bytes);  }  if (bytes.GT(Extent.fromIntZeroExtend(SMALL_REGION_THRESHOLD)))   VM.memory.zero(false,start,bytes); else   zeroSmall(start,bytes);}  }
class C{  @Uninterruptible public static CompiledMethod findMethodForInstruction(Address ip){  for (int i=0, n=numCompiledMethods(); i < n; ++i) {    CompiledMethod compiledMethod=getCompiledMethodUnchecked(i);    if (compiledMethod == null || !compiledMethod.isCompiled()) {      continue;    }    if (compiledMethod.containsReturnAddress(ip)) {      return compiledMethod;    }  }  return null;}  }
class C{  public boolean isALeaf(){  return (m_Left == null && m_Right == null);}  }
class C{  protected synchronized Class loadClass(String name,boolean resolve) throws ClassNotFoundException {  if (inDefine) {    if (name.equals(REFLECTOR))     return Reflector.class;  }  return super.loadClass(name,resolve);}  }
class C{  public int lengthDEREncodedKeyValue(){  return this.length(Constants.SignatureSpec11NS,Constants._TAG_DERENCODEDKEYVALUE);}  }
class C{  public static void main(String[] args){  try {    StopWatch stopWatch=new StopWatch();    stopWatch.start();    CommandLine cmd=parseCommandLine(args);    CmdType cmdType=new ServerCmd(new JmxServerProbe(cmd.getOptionValue(HOST_OPT_LONG),getPort(cmd))).executeCommandLine(cmd);    stopWatch.split();    print(new String[]{Joiner.on(' ').join(cmdType.getCommand(),"command executed sucessfully in",stopWatch.getSplitTime(),"ms.")},System.out);    stopWatch.stop();    System.exit(0);  } catch (  JamesCliException e) {    failWithMessage(e.getMessage());  }catch (  ParseException e) {    failWithMessage("Error parsing command line : " + e.getMessage());  }catch (  IOException ioe) {    failWithMessage("Error connecting to remote JMX agent : " + ioe.getMessage());  }catch (  Exception e) {    failWithMessage("Error while executing command:" + e.getMessage());  }}  }
class C{  protected AbstractChartPanel(String title){  this(title,null);}  }
class C{  public DefaultBlueprintsValueFactory(final String graphNamespace,final String vertexNamespace,final String edgeNamespace,final URI type,final URI vertex,final URI edge,final URI label){  this(new ValueFactoryImpl(),graphNamespace,vertexNamespace,edgeNamespace,type,vertex,edge,label);}  }
class C{  public static void write(GenericKeyczar input,Appendable output){  gson.toJson(input,output);}  }
class C{  private void startIfReady(Animator dependencyAnimation){  if (mAnimatorSet.mTerminated) {    return;  }  Dependency dependencyToRemove=null;  int numDependencies=mNode.tmpDependencies.size();  for (int i=0; i < numDependencies; ++i) {    Dependency dependency=mNode.tmpDependencies.get(i);    if (dependency.rule == mRule && dependency.node.animation == dependencyAnimation) {      dependencyToRemove=dependency;      dependencyAnimation.removeListener(this);      break;    }  }  mNode.tmpDependencies.remove(dependencyToRemove);  if (mNode.tmpDependencies.size() == 0) {    mNode.animation.start();    mAnimatorSet.mPlayingSet.add(mNode.animation);  }}  }
class C{  @SuppressWarnings("unused") private UnescapedCharSequence(UnescapedCharSequence text){  this.chars=new char[text.length()];  this.wasEscaped=new boolean[text.length()];  for (int i=0; i <= text.length(); i++) {    this.chars[i]=text.chars[i];    this.wasEscaped[i]=text.wasEscaped[i];  }}  }
class C{  private CarrotParams(){}  }
class C{  public boolean isCoinBase(){  maybeParse();  return outpoint.getHash().equals(Sha256Hash.ZERO_HASH) && (outpoint.getIndex() & 0xFFFFFFFFL) == 0xFFFFFFFFL;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case MappingPackage.INFO_MODEL_ATTRIBUTE_SOURCE__ATTRIBUTE:    return getAttribute();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @Override protected void initData(){}  }
class C{  private void initAtpTab(){  if (m_modelAtp != null)   return;  Vector<String> columnNames=new Vector<String>();  columnNames.add(Msg.translate(Env.getCtx(),"Date"));  columnNames.add(Msg.translate(Env.getCtx(),"QtyOnHand"));  columnNames.add(Msg.translate(Env.getCtx(),"C_BPartner_ID"));  columnNames.add(Msg.translate(Env.getCtx(),"QtyOrdered"));  columnNames.add(Msg.translate(Env.getCtx(),"QtyReserved"));  columnNames.add(Msg.translate(Env.getCtx(),"M_Locator_ID"));  columnNames.add(Msg.translate(Env.getCtx(),"M_AttributeSetInstance_ID"));  columnNames.add(Msg.translate(Env.getCtx(),"DocumentNo"));  columnNames.add(Msg.translate(Env.getCtx(),"M_Warehouse_ID"));  boolean showDetail=CLogMgt.isLevelFine();  String sql="SELECT s.QtyOnHand, s.QtyReserved, s.QtyOrdered," + " productAttribute(s.M_AttributeSetInstance_ID), s.M_AttributeSetInstance_ID,";  if (!showDetail)   sql="SELECT SUM(s.QtyOnHand), SUM(s.QtyReserved), SUM(s.QtyOrdered)," + " productAttribute(s.M_AttributeSetInstance_ID), 0,";  sql+=" w.Name, l.Value " + "FROM M_Storage s" + " INNER JOIN M_Locator l ON (s.M_Locator_ID=l.M_Locator_ID)"+ " INNER JOIN M_Warehouse w ON (l.M_Warehouse_ID=w.M_Warehouse_ID) "+ "WHERE M_Product_ID=?";  if (m_M_Warehouse_ID != 0)   sql+=" AND l.M_Warehouse_ID=?";  if (m_M_AttributeSetInstance_ID > 0)   sql+=" AND s.M_AttributeSetInstance_ID=?";  sql+=" AND (s.QtyOnHand<>0 OR s.QtyReserved<>0 OR s.QtyOrdered<>0)";  if (!showDetail)   sql+=" GROUP BY productAttribute(s.M_AttributeSetInstance_ID), w.Name, l.Value";  sql+=" ORDER BY l.Value";  Vector<Vector<Object>> data=new Vector<Vector<Object>>();  double qty=0;  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,m_M_Product_ID);    if (m_M_Warehouse_ID != 0)     pstmt.setInt(2,m_M_Warehouse_ID);    if (m_M_AttributeSetInstance_ID > 0)     pstmt.setInt(3,m_M_AttributeSetInstance_ID);    rs=pstmt.executeQuery();    while (rs.next()) {      Vector<Object> line=new Vector<Object>(9);      line.add(null);      double qtyOnHand=rs.getDouble(1);      qty+=qtyOnHand;      line.add(new Double(qtyOnHand));      line.add(null);      line.add(new Double(rs.getDouble(3)));      line.add(new Double(rs.getDouble(2)));      line.add(rs.getString(7));      String asi=rs.getString(4);      if (showDetail && (asi == null || asi.length() == 0))       asi="{" + rs.getInt(5) + "}";      line.add(asi);      line.add(null);      line.add(rs.getString(6));      data.add(line);    }  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  sql="SELECT o.DatePromised, ol.QtyReserved," + " productAttribute(ol.M_AttributeSetInstance_ID), ol.M_AttributeSetInstance_ID," + " dt.DocBaseType, bp.Name,"+ " dt.PrintName || ' ' || o.DocumentNo As DocumentNo, w.Name "+ "FROM C_Order o"+ " INNER JOIN C_OrderLine ol ON (o.C_Order_ID=ol.C_Order_ID)"+ " INNER JOIN C_DocType dt ON (o.C_DocType_ID=dt.C_DocType_ID)"+ " INNER JOIN M_Warehouse w ON (ol.M_Warehouse_ID=w.M_Warehouse_ID)"+ " INNER JOIN C_BPartner bp  ON (o.C_BPartner_ID=bp.C_BPartner_ID) "+ "WHERE ol.QtyReserved<>0"+ " AND ol.M_Product_ID=?";  if (m_M_Warehouse_ID != 0)   sql+=" AND ol.M_Warehouse_ID=?";  if (m_M_AttributeSetInstance_ID > 0)   sql+=" AND ol.M_AttributeSetInstance_ID=?";  sql+=" ORDER BY o.DatePromised";  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,m_M_Product_ID);    if (m_M_Warehouse_ID != 0)     pstmt.setInt(2,m_M_Warehouse_ID);    if (m_M_AttributeSetInstance_ID > 0)     pstmt.setInt(3,m_M_AttributeSetInstance_ID);    rs=pstmt.executeQuery();    while (rs.next()) {      Vector<Object> line=new Vector<Object>(9);      line.add(rs.getTimestamp(1));      double oq=rs.getDouble(2);      String DocBaseType=rs.getString(5);      Double qtyReserved=null;      Double qtyOrdered=null;      if (MDocType.DOCBASETYPE_PurchaseOrder.equals(DocBaseType)) {        qtyOrdered=new Double(oq);        qty+=oq;      } else {        qtyReserved=new Double(oq);        qty-=oq;      }      line.add(new Double(qty));      line.add(rs.getString(6));      line.add(qtyOrdered);      line.add(qtyReserved);      line.add(null);      String asi=rs.getString(3);      if (showDetail && (asi == null || asi.length() == 0))       asi="{" + rs.getInt(4) + "}";      line.add(asi);      line.add(rs.getString(7));      line.add(rs.getString(8));      data.add(line);    }  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  m_modelAtp=new ListModelTable(data);  m_tableAtp.setData(m_modelAtp,columnNames);  m_tableAtp.setColumnClass(0,Timestamp.class,true);  m_tableAtp.setColumnClass(1,Double.class,true);  m_tableAtp.setColumnClass(2,String.class,true);  m_tableAtp.setColumnClass(3,Double.class,true);  m_tableAtp.setColumnClass(4,Double.class,true);  m_tableAtp.setColumnClass(5,String.class,true);  m_tableAtp.setColumnClass(6,String.class,true);  m_tableAtp.setColumnClass(7,String.class,true);  m_tableAtp.setColumnClass(8,String.class,true);  m_tableAtp.autoSize();}  }
class C{  public void fireSettingsChanged(){  for (  ChartSettingsListener listener : settingsListenerList) {    listener.chartSettingsUpdated();  }}  }
class C{  public BlobAsync(Subspace subspace){  this.subspace=subspace;}  }
class C{  public static boolean isFloating(TypeMirror type){switch (type.getKind()) {case DOUBLE:case FLOAT:    return true;default :  return false;}}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:17.503 -0500",hash_original_method="8AEABE91EB74288702D500EE9C97116A",hash_generated_method="5FE078E65308257A905D025017A215A6") public boolean isStorageAvailable(){  return mStorageAvailable;}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(4);  newVector.addElement(new Option("\tSpecify the random number seed (default 1)","S",1,"-S <num>"));  newVector.addElement(new Option("\tThe maximum class distribution spread.\n" + "\t0 = no maximum spread, 1 = uniform distribution, 10 = allow at most\n" + "\ta 10:1 ratio between the classes (default 0)","M",1,"-M <num>"));  newVector.addElement(new Option("\tAdjust weights so that total weight per class is maintained.\n" + "\tIndividual instance weighting is not preserved. (default no\n" + "\tweights adjustment","W",0,"-W"));  newVector.addElement(new Option("\tThe maximum count for any class value (default 0 = unlimited).\n","X",0,"-X <num>"));  return newVector.elements();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case FunctionblockPackage.EVENT__NAME:    return getName();case FunctionblockPackage.EVENT__PROPERTIES:  return getProperties();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void addListener(StateListener l){  listeners.add(l);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public boolean createFrom(final IScope scope,final List<Map<String,Object>> inits,final Integer max,final Object input,final Arguments init,final CreateStatement statement){  Map<String,Object> nullMap=null;  if (init == null) {    nullMap=GamaMapFactory.create();  }  final int num=max == null ? 1 : max;  for (int i=0; i < num; i++) {    final Map<String,Object> map=init == null ? nullMap : GamaMapFactory.create(Types.NO_TYPE,Types.NO_TYPE);    statement.fillWithUserInit(scope,map);    inits.add(map);  }  return true;}  }
class C{  public void testPathExpressionNextMatchCumulativeNonRecursive(){  GraphModel graph=new GraphModel();  GraphNode[] nodes=fillGraphModel(graph);  PathExpression pathExpression=createPathExpression(false,true,false);  Collection<GraphNode> output=pathExpression.nextMatch(graph,buildSingleSet(nodes[0]));  assertEquals(2,output.size());  assertGraphContainsElement(output,nodes,5);  assertGraphContainsElement(output,nodes,6);}  }
class C{  @SuppressWarnings({"MethodMayBeStatic"}) public boolean useDifferentVarDeclarationAlignment(ASTNode node,AlignmentInColumnsConfig config,int blankLinesToBeKeptOnReformat){  ASTNode prev=getPreviousAdjacentNodeOfTargetType(node,config,blankLinesToBeKeptOnReformat);  if (prev == null) {    return true;  }  ASTNode curr=deriveNodeOfTargetType(node,TokenSet.create(prev.getElementType()));  if (curr == null) {    return true;  }  ASTNode prevSubNode=getSubNodeThatStartsNewLine(prev.getFirstChildNode(),config);  ASTNode currSubNode=getSubNodeThatStartsNewLine(curr.getFirstChildNode(),config);  while (true) {    boolean prevNodeIsDefined=prevSubNode != null;    boolean currNodeIsDefined=currSubNode != null;    if (prevNodeIsDefined ^ currNodeIsDefined) {      return true;    }    if (prevSubNode == null) {      break;    }    if (prevSubNode.getElementType() != currSubNode.getElementType()) {      return true;    }    prevSubNode=getSubNodeThatStartsNewLine(prevSubNode.getTreeNext(),config);    currSubNode=getSubNodeThatStartsNewLine(currSubNode.getTreeNext(),config);  }  ASTNode currentFieldToUse=curr;  ASTNode nextNode=curr.getTreeNext();  for (; nextNode != null && nextNode.getTreeParent() == curr.getTreeParent(); nextNode=nextNode.getTreeNext()) {    IElementType type=nextNode.getElementType();    if (config.getWhiteSpaceTokenTypes().contains(type)) {      ASTNode previous=nextNode.getTreePrev();      if ((previous != null && previous.getElementType() == curr.getElementType()) || StringUtil.countNewLines(nextNode.getChars()) > 1) {        break;      }      continue;    }    if (config.getCommentTokenTypes().contains(type)) {      continue;    }    if (type == curr.getElementType()) {      currentFieldToUse=nextNode;    }  }  List<IElementType> prevTypes=findSubNodeTypes(prev,config.getDistinguishableTypes());  List<IElementType> currTypes=findSubNodeTypes(currentFieldToUse,config.getDistinguishableTypes());  return !prevTypes.equals(currTypes);}  }
class C{  public static double expm1(double x){  return expm1(x,null);}  }
class C{  public static <K,V>Map<K,V> asMap(K k1,V v1,K k2,V v2){  Map<K,V> map=new GridLeanMap<>(2);  map.put(k1,v1);  map.put(k2,v2);  return map;}  }
class C{  public FinalSalsaIteration(SalsaInternalState salsaInternalState){  super(salsaInternalState,new SalsaNodeVisitor.NodeVisitorWithSocialProof(salsaInternalState.getVisitedRightNodes()));}  }
class C{  protected Object[] args(Object... args){  return args;}  }
class C{  private void showContactAsBarcode(Uri contactUri){  Log.i(TAG,"Showing contact URI as barcode: " + contactUri);  if (contactUri == null) {    return;  }  ContentResolver resolver=getContentResolver();  Bundle bundle=new Bundle();  Cursor cursor;  try {    cursor=resolver.query(contactUri,null,null,null,null);  } catch (  IllegalArgumentException e) {    return;  }  if (cursor == null) {    return;  }  String id;  String name;  boolean hasPhone;  try {    if (!cursor.moveToFirst()) {      return;    }    id=cursor.getString(cursor.getColumnIndex(BaseColumns._ID));    name=cursor.getString(cursor.getColumnIndex(ContactsContract.Contacts.DISPLAY_NAME));    hasPhone=cursor.getInt(cursor.getColumnIndex(ContactsContract.Contacts.HAS_PHONE_NUMBER)) > 0;  }  finally {    cursor.close();  }  if (name != null && name.length() > 0) {    bundle.putString(ContactsContract.Intents.Insert.NAME,massageContactData(name));  }  if (hasPhone) {    Cursor phonesCursor=resolver.query(ContactsContract.CommonDataKinds.Phone.CONTENT_URI,null,ContactsContract.CommonDataKinds.Phone.CONTACT_ID + '=' + id,null,null);    if (phonesCursor != null) {      try {        int foundPhone=0;        int phonesNumberColumn=phonesCursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER);        while (phonesCursor.moveToNext() && foundPhone < Contents.PHONE_KEYS.length) {          String number=phonesCursor.getString(phonesNumberColumn);          if (number != null && number.length() > 0) {            bundle.putString(Contents.PHONE_KEYS[foundPhone],massageContactData(number));          }          foundPhone++;        }      }  finally {        phonesCursor.close();      }    }  }  Cursor methodsCursor=resolver.query(ContactsContract.CommonDataKinds.StructuredPostal.CONTENT_URI,null,ContactsContract.CommonDataKinds.StructuredPostal.CONTACT_ID + '=' + id,null,null);  if (methodsCursor != null) {    try {      if (methodsCursor.moveToNext()) {        String data=methodsCursor.getString(methodsCursor.getColumnIndex(ContactsContract.CommonDataKinds.StructuredPostal.FORMATTED_ADDRESS));        if (data != null && data.length() > 0) {          bundle.putString(ContactsContract.Intents.Insert.POSTAL,massageContactData(data));        }      }    }  finally {      methodsCursor.close();    }  }  Cursor emailCursor=resolver.query(ContactsContract.CommonDataKinds.Email.CONTENT_URI,null,ContactsContract.CommonDataKinds.Email.CONTACT_ID + '=' + id,null,null);  if (emailCursor != null) {    try {      int foundEmail=0;      int emailColumn=emailCursor.getColumnIndex(ContactsContract.CommonDataKinds.Email.DATA);      while (emailCursor.moveToNext() && foundEmail < Contents.EMAIL_KEYS.length) {        String email=emailCursor.getString(emailColumn);        if (email != null && email.length() > 0) {          bundle.putString(Contents.EMAIL_KEYS[foundEmail],massageContactData(email));        }        foundEmail++;      }    }  finally {      emailCursor.close();    }  }  Intent intent=new Intent(Intents.Encode.ACTION);  intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);  intent.putExtra(Intents.Encode.TYPE,Contents.Type.CONTACT);  intent.putExtra(Intents.Encode.DATA,bundle);  intent.putExtra(Intents.Encode.FORMAT,BarcodeFormat.QR_CODE.toString());  Log.i(TAG,"Sending bundle for encoding: " + bundle);  startActivity(intent);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public FacebookSdkNotInitializedException(Throwable throwable){  super(throwable);}  }
class C{  public boolean hasPrimaryForDurableClient(String durableId){  for (Iterator iter=this._clientProxies.values().iterator(); iter.hasNext(); ) {    CacheClientProxy proxy=(CacheClientProxy)iter.next();    ClientProxyMembershipID proxyID=proxy.getProxyID();    if (durableId.equals(proxyID.getDurableId())) {      if (proxy.isPrimary()) {        return true;      } else {        return false;      }    }  }  return false;}  }
class C{  public void add(final String source,final T destination){  String path=source.replaceAll("/+",PATH_SLASH);  path=(path.endsWith(PATH_SLASH) && path.length() > 1) ? path.substring(0,path.length() - 1) : path;  String[] parts=path.split(PATH_SLASH);  StringBuilder sb=new StringBuilder();  List<String> groupNames=new ArrayList<>();  for (  String part : parts) {    Matcher groupMatcher=GROUP_PATTERN.matcher(part);    if (groupMatcher.matches()) {      PathPart pathPart=createPathPart(groupMatcher.group(1));      groupNames.add(pathPart.getName());      if (pathPart.getPattern() != null) {        sb.append('(');        sb.append(pathPart.getPattern());        sb.append(')');      } else {        sb.append("([^/]+?)");      }    } else     if (WILD_CARD_PATTERN.matcher(part).matches()) {      sb.append(".*?");    } else {      sb.append(part);    }    sb.append(PATH_SLASH);  }  if (sb.length() > 0) {    sb.setLength(sb.length() - 1);  }  Pattern pattern=Pattern.compile(sb.toString());  patternRouteList.add(ImmutablePair.of(pattern,new RouteDestinationWithGroups(destination,groupNames)));}  }
class C{  static public void executeDml(Connection con,String sql) throws AdeException {  final ConnectionWrapper cw=new ConnectionWrapper(con);  try {    cw.executeDml(sql);    cw.close();  } catch (  SQLException e) {    cw.failed(e);  } finally {    cw.quietCleanup();  }}  }
class C{  public SQLInvalidAuthorizationSpecException(String reason,String sqlState){  super(reason,sqlState,0);}  }
class C{  public final boolean isRelationValued(){  return (m_Type == RELATIONAL);}  }
class C{  protected int matchLevel(ImportReference importRef){  return IMPOSSIBLE_MATCH;}  }
class C{  public SubscriptionNotEnabledException(){}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  public ByteVector putShort(final int s){  int length=this.length;  if (length + 2 > data.length) {    enlarge(2);  }  byte[] data=this.data;  data[length++]=(byte)(s >>> 8);  data[length++]=(byte)s;  this.length=length;  return this;}  }
class C{  private JsonObject createDelegate(List<HttpMethod> methods,String pattern,JsonArray requests){  JsonObject body=new JsonObject();  JsonArray jsonMethods=new JsonArray();  methods.forEach(null);  body.put("methods",methods);  body.put("pattern",pattern);  body.put("requests",requests);  return body;}  }
class C{  public String extract_classname(String fullname){  return fullname.replaceFirst("^.*[.]","");}  }
class C{  private void doDelete(HttpServletRequest request,SubjectAreaEditForm frm) throws Exception {  Session hibSession=null;  Transaction tx=null;  sessionContext.checkPermission(frm.getUniqueId(),"SubjectArea",Right.SubjectAreaDelete);  try {    SubjectAreaDAO sdao=new SubjectAreaDAO();    hibSession=sdao.getSession();    tx=hibSession.beginTransaction();    SubjectArea sa=sdao.get(frm.getUniqueId());    String className=ApplicationProperty.ExternalActionCourseOfferingRemove.value();    if (className != null && className.trim().length() > 0) {      ExternalCourseOfferingRemoveAction removeAction=(ExternalCourseOfferingRemoveAction)(Class.forName(className).newInstance());      for (Iterator i=sa.getCourseOfferings().iterator(); i.hasNext(); ) {        CourseOffering co=(CourseOffering)i.next();        removeAction.performExternalCourseOfferingRemoveAction(co,hibSession);      }    }    Set s=sa.getInstructionalOfferings();    for (Iterator i=s.iterator(); i.hasNext(); ) {      InstructionalOffering io=(InstructionalOffering)i.next();      io.deleteAllDistributionPreferences(hibSession);      io.deleteAllClasses(hibSession);      io.deleteAllCourses(hibSession);      hibSession.delete(io);    }    for (Iterator i=sa.getCourseOfferings().iterator(); i.hasNext(); ) {      CourseOffering co=(CourseOffering)i.next();      hibSession.delete(co);    }    ChangeLog.addChange(hibSession,sessionContext,sa,ChangeLog.Source.SUBJECT_AREA_EDIT,ChangeLog.Operation.DELETE,null,sa.getDepartment());    hibSession.delete(sa);    tx.commit();    hibSession.flush();    HibernateUtil.clearCache();  } catch (  Exception e) {    if (tx != null)     tx.rollback();    throw (e);  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:32.313 -0500",hash_original_method="8393782C8F932A1D751AE7869AA4907E",hash_generated_method="A9A2EF97EF85CEE324CE88E14FCBF07C") public void addLine(String line){  int index=line.indexOf(":");  if (index == -1) {    add("",line);  } else {    add(line.substring(0,index),line.substring(index + 1));  }}  }
class C{  @Override public void addConverter(Converter converter,String attributeName){  converters.put(attributeName,converter);}  }
class C{  public static String formatTimeStamp(long timeStamp){  SimpleDateFormat formatter=new SimpleDateFormat("h:mm.ss a");  Calendar calendar=Calendar.getInstance();  calendar.setTimeInMillis(timeStamp);  return formatter.format(calendar.getTime());}  }
class C{  public InlineQueryResultPhoto.InlineQueryResultPhotoBuilder photoUrl(URL photoUrl){  this.photo_url=photoUrl;  return this;}  }
class C{  public int hashCode(){  return getActions().hashCode() + scheme.hashCode() + authority.hashCode()+ (path == null ? 0 : path.hashCode());}  }
class C{  public MySecondMockAccessibilityService(){  sInstance=this;}  }
class C{  private boolean onTap(float rawX,float rawY){  return false;}  }
class C{  public File tmpFile(String prefix,String suffix){  String random=String.valueOf(RANDOM.nextInt());  return tmpFile(prefix + random + suffix);}  }
class C{  public void visitVarInsn(int opcode,int var){  if (mv != null) {    mv.visitVarInsn(opcode,var);  }}  }
class C{  public void initPlayers(){  for (  Player p : Bukkit.getOnlinePlayers()) {    create(p);    if ((boolean)SettingsManager.getConfig().get("Menu-Item.Give-On-Join") && (SettingsManager.getConfig().getStringList("Enabled-Worlds")).contains(p.getWorld().getName()))     getUltraPlayer(p).giveMenuItem();  }}  }
class C{  public DiskBasedCache(File rootDirectory){  this(rootDirectory,DEFAULT_DISK_USAGE_BYTES);}  }
class C{  public static Typeface droidSerifBoldItalic(Context context){  sDroidSerifBoldItalic=getFontFromRes(R.raw.droidserif_bolditalic,context);  return sDroidSerifBoldItalic;}  }
class C{  private void completeCalculateFitness(T c){  for (  FitnessFunction<T> fitnessFunction : fitnessFunctions) {    fitnessFunction.getFitness(c);  }}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public TransformerException(Throwable e){  super(e.toString());  this.containedException=e;  this.locator=null;}  }
class C{  public BadBinaryOpValueExpException(ValueExp exp){  this.exp=exp;}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public Sequence(Schema schema,String name,long startValue,long increment){  this(schema,name,startValue,increment,null,null,null,false,false);}  }
class C{  public boolean isEnabled(){  boolean enabled=false;  if (getValue(BASE_UI_WIDGET_ENABLED).equalsIgnoreCase("true")) {    enabled=true;  }  return enabled;}  }
class C{  public boolean isUnique(){  return this.isUnique;}  }
class C{  public BarabasiAlbertRelationshipGenerator(BarabasiAlbertConfig configuration){  super(configuration);}  }
class C{  public TupleManager(Table t,Graph g,Class tupleType){  init(t,g,tupleType);}  }
class C{  public static boolean isConformantSchemeName(String p_scheme){  if (p_scheme == null || p_scheme.trim().length() == 0) {    return false;  }  if (!isAlpha(p_scheme.charAt(0))) {    return false;  }  char testChar;  for (int i=1; i < p_scheme.length(); i++) {    testChar=p_scheme.charAt(i);    if (!isAlphanum(testChar) && SCHEME_CHARACTERS.indexOf(testChar) == -1) {      return false;    }  }  return true;}  }
class C{  public boolean handleRequest(MessageContext context){  String username=null;  String password=null;  int compatLevel=0;  if (context instanceof SOAPMessageContext) {    SOAPMessageContext smsg=(SOAPMessageContext)context;    try {      SOAPHeader header=smsg.getMessage().getSOAPHeader();      if (header != null) {        @SuppressWarnings("unchecked") Iterator<SOAPHeaderElement> headers=header.examineAllHeaderElements();        while (headers.hasNext()) {          SOAPHeaderElement he=headers.next();          if (he.getElementName().getLocalName().equals("Access")) {            @SuppressWarnings("unchecked") Iterator<SOAPElement> elements=he.getChildElements();            while (elements.hasNext()) {              SOAPElement e=elements.next();              String name=e.getElementName().getLocalName();              if (name.equals("username"))               username=e.getValue(); else               if (name.equals("password"))               password=e.getValue(); else               if (name.equals("compatLevel")) {                try {                  compatLevel=Integer.parseInt(e.getValue());                } catch (                NumberFormatException ex) {                  compatLevel=-1;                }              }            }          }        }        if (compatLevel < compatibilityLevel) {          replaceByJPlagException(smsg,"Client outdated!","Please update your client " + "to compatibility level " + compatibilityLevel + ".");          return false;        }        if (username != null && password != null) {          int state=JPlagCentral.getInstance().getUserAdmin().getLoginState(username,password);          if ((state & UserAdmin.MASK_EXPIRED) != 0) {            replaceByJPlagException(smsg,"Access denied!","Your account has " + "expired! Please contact the JPlag " + "administrator to reactivate it!");            return false;          } else           if ((state & UserAdmin.MASK_DEACTIVATED) != 0) {            replaceByJPlagException(smsg,"Access denied!","Your account has " + "been deactivated! Please contact the " + "JPlag administrator to reactivate it!");            return false;          } else           if (state != UserAdmin.USER_INVALID)           return true;        }      } else {        System.out.println("No header available!");        replaceByJPlagException(smsg,"Access denied!","The SOAP message doesn't contain an access header!");        return false;      }    } catch (    SOAPException x) {      x.printStackTrace();    }    System.out.println("[" + new Date() + "] Access denied for user \""+ username+ "\"!");    replaceByJPlagException(smsg,"Access denied!","Check your username and password!");    return false;  }  System.out.println("Not a SOAP message context!!!");  return false;}  }
class C{  public Task<FileSnapshotRestRep> createForFileSystem(URI fileSystemId,FileSystemSnapshotParam input){  return postTask(input,getByFileSystemUrl(),fileSystemId);}  }
class C{  public int loadSigned16(int addr){  return (loadSigned8(addr) << 8) | loadUnsigned8(addr + 1);}  }
class C{  public JSONArray put(int index,boolean value) throws JSONException {  this.put(index,value ? Boolean.TRUE : Boolean.FALSE);  return this;}  }
class C{  public void test_ticket_bg1899_g() throws Exception {  new TestHelper("ticket_bg1899g","ticket_bg1899g.rq","ticket_bg1899g.nt","ticket_bg1899g.srx").runTest();}  }
class C{  public static String toHexString(byte[] input){  String result="";  for (int i=0; i < input.length; i++) {    result+=HEX_CHARS[(input[i] >>> 4) & 0x0f];    result+=HEX_CHARS[(input[i]) & 0x0f];  }  return result;}  }
class C{  public UnicodeReader(InputStream in) throws IOException {  this(in,null);}  }
class C{  private void updateOver(boolean o){  boolean old=isRollover();  this.over=o && isEnabled();  boolean newo=isRollover();  if (shouldActLikeButton() && old != newo) {    comboBox.repaint();  }}  }
class C{  public static void printCombinations(int[] numbers){  for (int i=0; i < numbers.length; i++) {    for (int j=0; j < numbers.length; j++) {      if (i != j)       System.out.println(numbers[i] + " " + numbers[j]);    }  }}  }
class C{  public void alias(String alias){  this.alias=alias;}  }
class C{  public static void sortReversed(final int[] a){  if (a.length <= 1)   return;  Arrays.sort(a);  final int last=a.length - 1;  for (int i=last / 2; i >= 0; i--) {    final int temp=a[i];    a[i]=a[last - i];    a[last - i]=temp;  }}  }
class C{  private void addIndex(Partition partition,String... attrs){  HashSet<Index<?,ServerEntry,Long>> indexedAttributes=new HashSet<Index<?,ServerEntry,Long>>();  for (  String attribute : attrs) {    indexedAttributes.add(new JdbmIndex<String,ServerEntry>(attribute));  }  ((JdbmPartition)partition).setIndexedAttributes(indexedAttributes);}  }
class C{  public StringBuilderPrinter(StringBuilder builder){  mBuilder=builder;}  }
class C{  public static int hash32(final byte[] data,int length){  return hash32(data,length,0x9747b28c);}  }
class C{  public static void addToList(Context context,int keyId,String defaultValue,String value){  String list=getString(context,keyId,defaultValue);  if (defaultValue.equals(list)) {    setString(context,keyId,value);    return;  }  String[] items=TextUtils.split(list,";");  for (  String item : items) {    if (value.equals(item)) {      return;    }  }  setString(context,keyId,list + ";" + value);}  }
class C{  public void addCustomProperty(CustomProperty customProperty){  getCustomProperties().add(customProperty);}  }
class C{  public PipelineCpeBuilder(String pipelineName,InputStream inputStream) throws BaleenException {  super(pipelineName,inputStream);}  }
class C{  @Override public void close(){}  }
class C{  private void streamPositionRandom(int pos){  streamPosition(pos);  matching=false;}  }
class C{  public boolean isStart(){  return mDialStart;}  }
class C{  public Tradestrategy findTradestrategyById(final Integer id) throws PersistentModelException {  Tradestrategy instance=m_tradestrategyHome.findById(id);  if (null == instance)   throw new PersistentModelException("Tradestrategy not found for id: " + id);  return instance;}  }
class C{  public final AlertDialog initiateScan(int cameraId){  return initiateScan(ALL_CODE_TYPES,cameraId);}  }
class C{  private static byte[] bitmapToByte(Bitmap b){  if (b == null) {    return null;  }  ByteArrayOutputStream o=new ByteArrayOutputStream();  b.compress(Bitmap.CompressFormat.PNG,100,o);  return o.toByteArray();}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (deprecated: ");  result.append(deprecated);  result.append(", comment: ");  result.append(comment);  result.append(", optional: ");  result.append(optional);  result.append(')');  return result.toString();}  }
class C{  protected BaseGameActivity(){  super();}  }
class C{  public Class defineClass(String name,byte[] data){  return super.defineClass(name,data,0,data.length,codeSource);}  }
class C{  public DoubleMatrix1D like1D(int size){  return content.like1D(size);}  }
class C{  private static void updateQuizzes(SQLiteDatabase writableDatabase,List<Quiz> quizzes){  Quiz quiz;  ContentValues quizValues=new ContentValues();  String[] quizArgs=new String[1];  for (int i=0; i < quizzes.size(); i++) {    quiz=quizzes.get(i);    quizValues.clear();    quizValues.put(QuizTable.COLUMN_SOLVED,quiz.isSolved());    quizArgs[0]=quiz.getQuestion();    writableDatabase.update(QuizTable.NAME,quizValues,QuizTable.COLUMN_QUESTION + "=?",quizArgs);  }}  }
class C{  private static long addDigest(long digest,long v){  digest=Crc64.generate(digest,(byte)(v >> 24));  digest=Crc64.generate(digest,(byte)(v >> 16));  digest=Crc64.generate(digest,(byte)(v >> 8));  digest=Crc64.generate(digest,(byte)v);  return digest;}  }
class C{  public boolean isInHeadersTransition(){  return mHeadersTransition != null;}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getInterfaceDefinition_();}  }
class C{  public final double splitCritValue(Distribution bags){  return newEnt(bags);}  }
class C{  public PlaceLevelOfDetailSelector(Resources resources,Place place){  this.resources=resources;  this.place=place;}  }
class C{  protected String toString(int level){  try {    StringBuffer text=new StringBuffer();    if (m_Attribute == -1) {      return leafString();    } else     if (m_Info.attribute(m_Attribute).isNominal()) {      for (int i=0; i < m_Successors.length; i++) {        text.append("\n");        for (int j=0; j < level; j++) {          text.append("|   ");        }        text.append(m_Info.attribute(m_Attribute).name() + " = " + m_Info.attribute(m_Attribute).value(i));        text.append(m_Successors[i].toString(level + 1));      }    } else {      text.append("\n");      for (int j=0; j < level; j++) {        text.append("|   ");      }      text.append(m_Info.attribute(m_Attribute).name() + " < " + Utils.doubleToString(m_SplitPoint,2));      text.append(m_Successors[0].toString(level + 1));      text.append("\n");      for (int j=0; j < level; j++) {        text.append("|   ");      }      text.append(m_Info.attribute(m_Attribute).name() + " >= " + Utils.doubleToString(m_SplitPoint,2));      text.append(m_Successors[1].toString(level + 1));    }    return text.toString();  } catch (  Exception e) {    e.printStackTrace();    return "RandomTree: tree can't be printed";  }}  }
class C{  public SpiderSitemapXMLParser(SpiderParam params){  super();  if (params == null) {    throw new IllegalArgumentException("Parameter params must not be null.");  }  this.params=params;}  }
class C{  public void testBug3557() throws Exception {  boolean populateDefaults=((com.mysql.jdbc.ConnectionProperties)this.conn).getPopulateInsertRowWithDefaultValues();  try {    ((com.mysql.jdbc.ConnectionProperties)this.conn).setPopulateInsertRowWithDefaultValues(true);    this.stmt.executeUpdate("DROP TABLE IF EXISTS testBug3557");    this.stmt.executeUpdate("CREATE TABLE testBug3557 (`a` varchar(255) NOT NULL default 'XYZ', `b` varchar(255) default '123', PRIMARY KEY  (`a`(100)))");    Statement updStmt=this.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE);    this.rs=updStmt.executeQuery("SELECT * FROM testBug3557");    assertTrue(this.rs.getConcurrency() == ResultSet.CONCUR_UPDATABLE);    this.rs.moveToInsertRow();    assertEquals("XYZ",this.rs.getObject(1));    assertEquals("123",this.rs.getObject(2));  }  finally {    ((com.mysql.jdbc.ConnectionProperties)this.conn).setPopulateInsertRowWithDefaultValues(populateDefaults);    this.stmt.executeUpdate("DROP TABLE IF EXISTS testBug3557");  }}  }
class C{  public void printComment(char[] text) throws IOException {  if (prettyPrinter.getFormat()) {    if (canIndent) {      printNewline();      printString(margin.toString());    }    printString("<!--");    if (column + text.length + 3 < prettyPrinter.getDocumentWidth()) {      printCharacters(text);    } else {      formatText(text,margin.toString(),false);      printCharacter(' ');    }    if (column + 3 > prettyPrinter.getDocumentWidth()) {      printNewline();      printString(margin.toString());    }    printString("-->");  } else {    printString("<!--");    printCharacters(text);    printString("-->");  }}  }
class C{  @Deprecated public CronTriggerImpl(String name,String group,String jobName,String jobGroup,Date startTime,Date endTime,String cronExpression) throws ParseException {  super(name,group,jobName,jobGroup);  setCronExpression(cronExpression);  if (startTime == null) {    startTime=new Date();  }  setStartTime(startTime);  if (endTime != null) {    setEndTime(endTime);  }  setTimeZone(TimeZone.getDefault());}  }
class C{  public RequestRegistersCommand(final int packetId){  super(DebugCommandType.CMD_REGISTERS,packetId);}  }
class C{  public static Supply readFrom(final Deserializer deserializer,final String label){  return new Supply(deserializer.readLong(label));}  }
class C{  public CachedRowSet createCopySchema() throws SQLException {  int nRows=numRows;  numRows=0;  CachedRowSet crs=this.createCopy();  numRows=nRows;  return crs;}  }
class C{  public static HashMap<ClassKey,JsonDeserializer<Object>> constructAll(){  return new StdDeserializers()._deserializers;}  }
class C{  public T caseTransition_(Transition_ object){  return null;}  }
class C{  public Property dayOfMonth(){  return new Property(this,DAY_OF_MONTH);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodechildnodesappendchild.class,args);}  }
class C{  public EnchantmentStorageMetaBuilder start(){  return new EnchantmentStorageMetaBuilder();}  }
class C{  public void findAndUndo(Object someObj){  Component menuItems[]=getMenuComponents();  for (int i=0; i < menuItems.length; i++) {    Component item=menuItems[i];    if (item instanceof LightMapHandlerChild) {      ((LightMapHandlerChild)item).findAndUndo(someObj);    }  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.736 -0400",hash_original_method="132500B6DBD3ECFEDBE720096796962F",hash_generated_method="BD0A7FA2DE3D20C4B8C67471E576A5F6") @Override public synchronized long skip(final long length) throws IOException {  final long skip=super.skip(length);  this.count+=skip;  return skip;}  }
class C{  @Override public boolean shouldVisit(Page referringPage,WebURL url){  String href=url.getURL().toLowerCase();  if (urlNotPattern.matcher(href).matches()) {    return false;  }  if (urlPattern.matcher(href).matches()) {    return true;  }  if (propertyConfig.getUrlsToSearch() == null) {    return true;  }  return false;}  }
class C{  @Override protected boolean addShortTermCredentialAttributes(Request request){  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:36.455 -0500",hash_original_method="6166267645AF08CBDE09E0034E28CA3C",hash_generated_method="A5E6C725D739B892A0631EB910719174") public static Date parseDate(String dateValue) throws DateParseException {  return parseDate(dateValue,null,null);}  }
class C{  public void exitApplication(boolean restart){  boolean keyStoresClosed=(kseFrame.getActiveKeyStoreHistory() != null);  if (!closeAllKeyStores()) {    return;  }  applicationSettings.setSizeAndPosition(kseFrame.getSizeAndPosition(keyStoresClosed));  applicationSettings.setRecentFiles(kseFrame.getRecentFiles());  applicationSettings.setCurrentDirectory(CurrentDirectory.get());  applicationSettings.save();  if (restart) {    KseRestart.restart();  }  System.exit(0);}  }
class C{  public static boolean isNormalized(CharSequence src,Form form){  return NormalizerBase.isNormalized(src.toString(),form);}  }
class C{  public void testPseudoLegalMoves() throws ChessParseError {  String fen="8/3k4/8/2n2pP1/1P6/1NB5/2QP4/R3K2R w KQ f6 0 2";  Position pos=TextIO.readFEN(fen);  assertEquals(fen,TextIO.toFEN(pos));  List<String> strMoves=getMoveList(pos,false);  assertTrue(strMoves.contains("Ra1-d1"));  assertTrue(!strMoves.contains("Ra1-e1"));  assertTrue(!strMoves.contains("Ra1-f1"));  assertTrue(strMoves.contains("Ra1-a7+"));  assertTrue(strMoves.contains("Ke1-f2"));  assertTrue(!strMoves.contains("Ke1-g3"));  assertTrue(strMoves.contains("Bc3-f6"));  assertTrue(!strMoves.contains("Nb3xd2"));  assertTrue(strMoves.contains("O-O"));  assertTrue(strMoves.contains("O-O-O"));  assertEquals(49,strMoves.size());  pos.setPiece(Position.getSquare(4,3),Piece.BROOK);  strMoves=getMoveList(pos,false);  assertTrue(!strMoves.contains("O-O"));  assertTrue(!strMoves.contains("O-O-O"));  pos.setPiece(Position.getSquare(4,3),Piece.EMPTY);  pos.setPiece(Position.getSquare(5,3),Piece.BROOK);  strMoves=getMoveList(pos,false);  assertTrue(!strMoves.contains("O-O"));  assertTrue(strMoves.contains("O-O-O"));  pos.setPiece(Position.getSquare(5,3),Piece.EMPTY);  pos.setPiece(Position.getSquare(6,3),Piece.BBISHOP);  strMoves=getMoveList(pos,false);  assertTrue(strMoves.contains("O-O"));  assertTrue(!strMoves.contains("O-O-O"));  pos.setPiece(Position.getSquare(6,3),Piece.EMPTY);  pos.setCastleMask(1 << Position.A1_CASTLE);  strMoves=getMoveList(pos,false);  assertTrue(!strMoves.contains("O-O"));  assertTrue(strMoves.contains("O-O-O"));}  }
class C{  public void addVirtualMethod(EncodedMethod method){  if (method == null) {    throw new NullPointerException("method == null");  }  virtualMethods.add(method);}  }
class C{  private GeofenceErrorMessages(){}  }
class C{  public boolean start(){  if (m_active) {    log.warning("Trx in progress " + m_trxName);    return false;  }  m_active=true;  m_startTime=System.currentTimeMillis();  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:15.112 -0500",hash_original_method="19503CD9A5095168C8826497974984EF",hash_generated_method="3B202AB2B61DB7B9D4BF59F0F08CBF8C") public boolean verifySignature(byte[] data){  if (signature != null) {    try {      signature.update(sha_hash);      return signature.verify(data);    } catch (    SignatureException e) {      return false;    }  }  if (cipher != null) {    final byte[] decrypt;    try {      decrypt=cipher.doFinal(data);    } catch (    IllegalBlockSizeException e) {      return false;    }catch (    BadPaddingException e) {      return false;    }    final byte[] md5_sha;    if (md5_hash != null && sha_hash != null) {      md5_sha=new byte[md5_hash.length + sha_hash.length];      System.arraycopy(md5_hash,0,md5_sha,0,md5_hash.length);      System.arraycopy(sha_hash,0,md5_sha,md5_hash.length,sha_hash.length);    } else     if (md5_hash != null) {      md5_sha=md5_hash;    } else {      md5_sha=sha_hash;    }    return Arrays.equals(decrypt,md5_sha);  } else   if (data == null || data.length == 0) {    return true;  } else {    return false;  }}  }
class C{  @Override public int[] indexX(){  int[] index=new int[this.xValues.length];  for (int k=0; k < index.length; k++) {    index[k]=indexX(k);  }  return index;}  }
class C{  public static Function fromString(String name){  if (name != null) {    for (    Function func : Function.values()) {      if (name.equalsIgnoreCase(func.getName())) {        return func;      }    }  }  throw new IllegalArgumentException(name);}  }
class C{  public void writeRawVarint64(long value) throws IOException {  while (true) {    if ((value & ~0x7FL) == 0) {      writeRawByte((int)value);      return;    } else {      writeRawByte(((int)value & 0x7F) | 0x80);      value>>>=7;    }  }}  }
class C{  private void createDriverTask(List<VolumeClone> clones){  String taskId=String.format("%s+%s+%s",StorageDriverSimulator.DRIVER_NAME,OP_NAME,UUID.randomUUID().toString());  _log.info("Creating task {} for operation of type {}",taskId,OP_NAME);  _task=new RestoreFromCloneDriverTask(taskId,clones);  _task.setStatus(DriverTask.TaskStatus.PROVISIONING);}  }
class C{  public void test_tx_begin_commit() throws RepositoryException {  assertFalse(cxn.isActive());  cxn.begin();  assertTrue(cxn.isActive());  cxn.commit();  assertFalse(cxn.isActive());}  }
class C{  private int readAnnotationValue(int v,final char[] buf,final String name,final AnnotationVisitor av){  int i;  if (av == null) {switch (b[v] & 0xFF) {case 'e':      return v + 5;case '@':    return readAnnotationValues(v + 3,buf,true,null);case '[':  return readAnnotationValues(v + 1,buf,false,null);default :return v + 3;}}switch (b[v++] & 0xFF) {case 'I':case 'J':case 'F':case 'D':av.visit(name,readConst(readUnsignedShort(v),buf));v+=2;break;case 'B':av.visit(name,new Byte((byte)readInt(items[readUnsignedShort(v)])));v+=2;break;case 'Z':av.visit(name,readInt(items[readUnsignedShort(v)]) == 0 ? Boolean.FALSE : Boolean.TRUE);v+=2;break;case 'S':av.visit(name,new Short((short)readInt(items[readUnsignedShort(v)])));v+=2;break;case 'C':av.visit(name,new Character((char)readInt(items[readUnsignedShort(v)])));v+=2;break;case 's':av.visit(name,readUTF8(v,buf));v+=2;break;case 'e':av.visitEnum(name,readUTF8(v,buf),readUTF8(v + 2,buf));v+=4;break;case 'c':av.visit(name,Type.getType(readUTF8(v,buf)));v+=2;break;case '@':v=readAnnotationValues(v + 2,buf,true,av.visitAnnotation(name,readUTF8(v,buf)));break;case '[':int size=readUnsignedShort(v);v+=2;if (size == 0) {return readAnnotationValues(v - 2,buf,false,av.visitArray(name));}switch (this.b[v++] & 0xFF) {case 'B':byte[] bv=new byte[size];for (i=0; i < size; i++) {bv[i]=(byte)readInt(items[readUnsignedShort(v)]);v+=3;}av.visit(name,bv);--v;break;case 'Z':boolean[] zv=new boolean[size];for (i=0; i < size; i++) {zv[i]=readInt(items[readUnsignedShort(v)]) != 0;v+=3;}av.visit(name,zv);--v;break;case 'S':short[] sv=new short[size];for (i=0; i < size; i++) {sv[i]=(short)readInt(items[readUnsignedShort(v)]);v+=3;}av.visit(name,sv);--v;break;case 'C':char[] cv=new char[size];for (i=0; i < size; i++) {cv[i]=(char)readInt(items[readUnsignedShort(v)]);v+=3;}av.visit(name,cv);--v;break;case 'I':int[] iv=new int[size];for (i=0; i < size; i++) {iv[i]=readInt(items[readUnsignedShort(v)]);v+=3;}av.visit(name,iv);--v;break;case 'J':long[] lv=new long[size];for (i=0; i < size; i++) {lv[i]=readLong(items[readUnsignedShort(v)]);v+=3;}av.visit(name,lv);--v;break;case 'F':float[] fv=new float[size];for (i=0; i < size; i++) {fv[i]=Float.intBitsToFloat(readInt(items[readUnsignedShort(v)]));v+=3;}av.visit(name,fv);--v;break;case 'D':double[] dv=new double[size];for (i=0; i < size; i++) {dv[i]=Double.longBitsToDouble(readLong(items[readUnsignedShort(v)]));v+=3;}av.visit(name,dv);--v;break;default :v=readAnnotationValues(v - 3,buf,false,av.visitArray(name));}}return v;}  }
class C{  private void fillBuf() throws IOException {  int result=in.read(buf,0,buf.length);  if (result == -1) {    throw new EOFException();  }  pos=0;  end=result;}  }
class C{  @Override public Long zrank(final String key,final String member){  checkIsInMultiOrPipeline();  client.zrank(key,member);  return client.getIntegerReply();}  }
class C{  protected byte[] loadBytes(InputStream is) throws IOException {  BufferedInputStream bufInputStream=new BufferedInputStream(is,8192);  ByteArrayOutputStream byteOutStream=new ByteArrayOutputStream();  int c;  int bufferSize=8192;  byte[] buffer=new byte[bufferSize];  while ((c=bufInputStream.read(buffer)) != -1) {    byteOutStream.write(buffer,0,c);  }  return byteOutStream.toByteArray();}  }
class C{  public static boolean isMacOSX(){  return isOS(MAC_OSX_NAME);}  }
class C{  public static void grabSupportedInterfaceNames(Set<String> interfaces,TypeSymbol type){  if (type == null) {    return;  }  if (Util.isInterface(type)) {    interfaces.add(type.getQualifiedName().toString());  }  if (type instanceof ClassSymbol) {    for (    Type t : ((ClassSymbol)type).getInterfaces()) {      grabSupportedInterfaceNames(interfaces,t.tsym);    }    grabSupportedInterfaceNames(interfaces,((ClassSymbol)type).getSuperclass().tsym);  }}  }
class C{  public static void shuffle(Object[] a,int lo,int hi){  if (a == null)   throw new NullPointerException("argument array is null");  if (lo < 0 || lo > hi || hi >= a.length) {    throw new IndexOutOfBoundsException("Illegal subarray range");  }  for (int i=lo; i <= hi; i++) {    int r=i + uniform(hi - i + 1);    Object temp=a[i];    a[i]=a[r];    a[r]=temp;  }}  }
class C{  protected void resetOptions(){  m_maxStale=5;  m_searchDirection=SELECTION_FORWARD;  m_starting=null;  m_startRange=new Range();  m_classIndex=-1;  m_totalEvals=0;  m_cacheSize=1;  m_debug=false;}  }
class C{  public MovieSetAddAction(boolean withTitle){  if (withTitle) {    putValue(NAME,BUNDLE.getString("movieset.add.desc"));  }  putValue(LARGE_ICON_KEY,IconManager.LIST_ADD);  putValue(SMALL_ICON,IconManager.LIST_ADD);  putValue(SHORT_DESCRIPTION,BUNDLE.getString("movieset.add.desc"));}  }
class C{  protected void updateAllPatterns(){  if (updatePattern != null) {    for (int i=0; i < patternCount; i++) {      updatePattern[i]=true;    }  }  likelihoodKnown=false;}  }
class C{  public void sort(){  Collections.sort(m_docIds);  DocumentalSearchRowResult documentalSearchRowResult;  int lastArchive=Integer.MIN_VALUE, lastFolder=Integer.MIN_VALUE, lastDocument=Integer.MIN_VALUE;  Iterator iterator=m_docIds.iterator();  while (iterator.hasNext()) {    documentalSearchRowResult=(DocumentalSearchRowResult)iterator.next();    if (lastArchive == documentalSearchRowResult.getArchId() && lastFolder == documentalSearchRowResult.getFdrId() && lastDocument == documentalSearchRowResult.getDocId()) {      iterator.remove();    }    lastArchive=documentalSearchRowResult.getArchId();    lastFolder=documentalSearchRowResult.getFdrId();    lastDocument=documentalSearchRowResult.getDocId();  }}  }
class C{  public final void popSubContextList(){  m_axesIteratorStack.pop();}  }
class C{  private void updateDateTimeElements(final AbstractAttributeStatisticsModel model){  nominalValueFiller.setVisible(false);  labelStatsValues.setVisible(false);  labelStatsDuration.setText(((DateTimeAttributeStatisticsModel)model).getDuration());  labelStatsDuration.setToolTipText(labelStatsDuration.getText());  labelStatsFrom.setText(((DateTimeAttributeStatisticsModel)model).getFrom());  labelStatsFrom.setToolTipText(labelStatsFrom.getText());  labelStatsUntil.setText(((DateTimeAttributeStatisticsModel)model).getUntil());  labelStatsUntil.setToolTipText(labelStatsUntil.getText());}  }
class C{  public XObject eval(Node contextNode,String str) throws TransformerException {  return eval(contextNode,str,contextNode);}  }
class C{  public void accept(final ClassVisitor cv){  String[] interfaces=new String[this.interfaces.size()];  this.interfaces.toArray(interfaces);  cv.visit(version,access,name,signature,superName,interfaces);  if (sourceFile != null || sourceDebug != null) {    cv.visitSource(sourceFile,sourceDebug);  }  if (outerClass != null) {    cv.visitOuterClass(outerClass,outerMethod,outerMethodDesc);  }  int i, n;  n=visibleAnnotations == null ? 0 : visibleAnnotations.size();  for (i=0; i < n; ++i) {    AnnotationNode an=visibleAnnotations.get(i);    an.accept(cv.visitAnnotation(an.desc,true));  }  n=invisibleAnnotations == null ? 0 : invisibleAnnotations.size();  for (i=0; i < n; ++i) {    AnnotationNode an=invisibleAnnotations.get(i);    an.accept(cv.visitAnnotation(an.desc,false));  }  n=visibleTypeAnnotations == null ? 0 : visibleTypeAnnotations.size();  for (i=0; i < n; ++i) {    TypeAnnotationNode an=visibleTypeAnnotations.get(i);    an.accept(cv.visitTypeAnnotation(an.typeRef,an.typePath,an.desc,true));  }  n=invisibleTypeAnnotations == null ? 0 : invisibleTypeAnnotations.size();  for (i=0; i < n; ++i) {    TypeAnnotationNode an=invisibleTypeAnnotations.get(i);    an.accept(cv.visitTypeAnnotation(an.typeRef,an.typePath,an.desc,false));  }  n=attrs == null ? 0 : attrs.size();  for (i=0; i < n; ++i) {    cv.visitAttribute(attrs.get(i));  }  for (i=0; i < innerClasses.size(); ++i) {    innerClasses.get(i).accept(cv);  }  for (i=0; i < fields.size(); ++i) {    fields.get(i).accept(cv);  }  for (i=0; i < methods.size(); ++i) {    methods.get(i).accept(cv);  }  cv.visitEnd();}  }
class C{  @Override public CompilerPhase newExecution(IR ir){  return this;}  }
class C{  public int value(){  return getElement(5) & 0xFF;}  }
class C{  public static BFloat exp(float iX){  int iN=(int)Math.round(iX / iLogRange);  return new BFloat((float)Math.exp(iX - iN * iLogRange),iN);}  }
class C{  public int nextInt(int n){  int result=super.nextInt(n);  println("nextInt(" + n + ")="+ result);  return result;}  }
class C{  protected Map<Id<Node>,Path> constructPaths(Node fromNode,Set<Node> toNodes,double startTime,Map<Id<Node>,Double> arrivalTimes){  Map<Id<Node>,Path> paths=new HashMap<Id<Node>,Path>();  for (  Node toNode : toNodes) {    Double arrivalTime=arrivalTimes.get(toNode.getId());    Path path=null;    if (arrivalTime != null) {      ArrayList<Node> nodes=new ArrayList<Node>();      ArrayList<Link> links=new ArrayList<Link>();      nodes.add(0,toNode);      Link tmpLink=getData(toNode).getPrevLink();      if (tmpLink != null) {        while (tmpLink.getFromNode() != fromNode) {          links.add(0,tmpLink);          nodes.add(0,tmpLink.getFromNode());          tmpLink=getData(tmpLink.getFromNode()).getPrevLink();        }        links.add(0,tmpLink);        nodes.add(0,tmpLink.getFromNode());      }      DijkstraNodeData toNodeData=getData(toNode);      path=new Path(nodes,links,arrivalTime - startTime,toNodeData.getCost());    }    paths.put(toNode.getId(),path);  }  return paths;}  }
class C{  public void registerOutParam(int index,int type) throws SQLException {  FBProcedureParam param=getInputParam(index);  if (param == null || param == NullParam.NULL_PARAM) {    param=getOutputParam(index);  } else {    addOutputParam(param);    if (!param.isValueSet()) {      inputParams.set(param.getPosition(),null);    }  }  if (param == null || param == NullParam.NULL_PARAM) {    throw new SQLException("Cannot find parameter with the specified position.",SQLStateConstants.SQL_STATE_INVALID_COLUMN);  }  param.setType(type);}  }
class C{  @UiHandler("okButton") public void handleOkClick(final ClickEvent event){  this.actionDelegate.accepted();}  }
class C{  public static Model readFrom(VirtualFile file) throws ServerException, ForbiddenException, IOException {  requireNonNull(file,"Required not null virtual file");  return fetchModel(XMLTree.from(file.getContent().getStream()));}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  boolean state;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(1);  state=employeeNode.hasChildNodes();  assertTrue("nodeHasChildAssert1",state);}  }
class C{  public int nextNode(){  if ((m_next) < this.size()) {    int next=this.elementAt(m_next);    m_next++;    return next;  } else   return DTM.NULL;}  }
class C{  public void testSinglePointRoundTrip() throws SQLException {  PointGenerator pg=new PointGenerator();  pg.setGeometryFactory(geometryFactory);  pg.setBoundingBox(new Envelope(0,10,0,10));  Point pt=(Point)pg.create();  OraWriter ow=new OraWriter();  STRUCT st=ow.write(pt,getConnection());  OraReader or=new OraReader();  Point pt2=(Point)or.read(st);  assertTrue("The input Point is not the same as the output Point",pt.equals(pt2));}  }
class C{  private void waitForService(Class serviceImpl,long timeout){  Class serviceInterface=serviceImpl.getInterfaces()[0];  BundleContext bundleContext=FrameworkUtil.getBundle(serviceInterface).getBundleContext();  ServiceReference factoryRef=bundleContext.getServiceReference(serviceInterface.getName());  ServiceTracker serviceTracker=new ServiceTracker(bundleContext,factoryRef,null);  serviceTracker.open();  try {    serviceTracker.waitForService(timeout);  } catch (  InterruptedException e) {    LOGGER.error("Could not get service",e);  }  serviceTracker.close();}  }
class C{  public static void updateBarsColor(Window window,@ColorRes int colorID,boolean applyDarken){  updateBarsColor(ContextCompat.getColor(window.getContext(),colorID),window);}  }
class C{  protected int calculateThreshold(int newCapacity,float factor){  return (int)(newCapacity * factor);}  }
class C{  public String toString(){  if (isCoinBase())   return "TxIn: COINBASE";  try {    return "TxIn for [" + outpoint + "]: "+ getScriptSig();  } catch (  ScriptException e) {    throw new RuntimeException(e);  }}  }
class C{  public boolean isSensor(){  return this.sensor;}  }
class C{  public void populateDAO(Object value,int row,int column){  final Portfolio element=(Portfolio)getData().getAspect().get(row);switch (column) {case 0:{      element.setName((String)value);      break;    }case 1:{    element.setAlias((String)value);    break;  }case 2:{  element.setDescription((String)value);  break;}case 3:{element.setAllocationMethod(((AllocationMethod)value).getCode());break;}case 4:{Account account=(Account)((DAOAccount)value).getObject();boolean exists=false;for (PortfolioAccount item : element.getPortfolioAccounts()) {if (account.getAccountNumber().equals(item.getAccount().getAccountNumber())) exists=true;}if (!exists) {PortfolioAccount portfolioAccount=new PortfolioAccount(element,account);element.getPortfolioAccounts().add(portfolioAccount);}break;}case 5:{for (Aspect item : getData().getAspect()) {Portfolio portfolio=(Portfolio)item;if (!portfolio.getName().equals(element.getName()) && portfolio.getIsDefault()) {portfolio.setIsDefault(false);portfolio.setDirty(true);}}element.setIsDefault(new Boolean(((YesNo)value).getCode()));break;}default :{}}element.setLastUpdateDate(TradingCalendar.getDateTimeNowMarketTimeZone());element.setDirty(true);}  }
class C{  public static String send4LetterWord(String host,int port,String cmd) throws IOException {  log.info("connecting to " + host + " "+ port);  Socket sock=new Socket(host,port);  BufferedReader reader=null;  try {    OutputStream outstream=sock.getOutputStream();    outstream.write(cmd.getBytes(StandardCharsets.US_ASCII));    outstream.flush();    sock.shutdownOutput();    reader=new BufferedReader(new InputStreamReader(sock.getInputStream(),"US-ASCII"));    StringBuilder sb=new StringBuilder();    String line;    while ((line=reader.readLine()) != null) {      sb.append(line + "\n");    }    return sb.toString();  }  finally {    sock.close();    if (reader != null) {      reader.close();    }  }}  }
class C{  public void skipChildren(){  int childLen=(currentChildren != null) ? currentChildren.getLength() : 0;  for (int i=0; i < childLen; i++) {    Node child=nodes.peek();    if (child.equals(currentChildren.item(i))) {      nodes.pop();    }  }}  }
class C{  private CheckIn findCheckIn(final Long id){  return ofy().load().type(CheckIn.class).id(id).now();}  }
class C{  @Override public Value convertTo(int t){  if (t == type) {    return this;  } else   if (t == Value.CLOB) {    if (small != null) {      return ValueLobDb.createSmallLob(t,small);    } else {      return ValueLobDb.createTempClob(getReader(),-1);    }  } else   if (t == Value.BLOB) {    if (small != null) {      return ValueLobDb.createSmallLob(t,small);    } else {      return ValueLobDb.createTempBlob(getInputStream(),-1);    }  }  return super.convertTo(t);}  }
class C{  public EventPoint min(){  BalancedBinaryNode<EventPoint,EventPoint> bn=events.firstNode();  EventPoint key=bn.key();  events.remove(key);  return bn.value();}  }
class C{  private void initStreamOutput() throws SAXException {  boolean firstElementIsHTML=isFirstElemHTML();  if (firstElementIsHTML) {    SerializationHandler oldHandler=m_handler;    Properties htmlProperties=OutputPropertiesFactory.getDefaultMethodProperties(Method.HTML);    Serializer serializer=SerializerFactory.getSerializer(htmlProperties);    m_handler=(SerializationHandler)serializer;    Writer writer=oldHandler.getWriter();    if (null != writer)     m_handler.setWriter(writer); else {      OutputStream os=oldHandler.getOutputStream();      if (null != os)       m_handler.setOutputStream(os);    }    m_handler.setVersion(oldHandler.getVersion());    m_handler.setDoctypeSystem(oldHandler.getDoctypeSystem());    m_handler.setDoctypePublic(oldHandler.getDoctypePublic());    m_handler.setMediaType(oldHandler.getMediaType());    m_handler.setTransformer(oldHandler.getTransformer());  }  if (m_needToCallStartDocument) {    m_handler.startDocument();    m_needToCallStartDocument=false;  }  m_wrapped_handler_not_initialized=false;}  }
class C{  public int unpad(byte[] in,int off,int len){  if ((in == null) || (len == 0)) {    return 0;  }  byte lastByte=in[off + len - 1];  int padValue=(int)lastByte & 0x0ff;  if ((padValue < 0x01) || (padValue > blockSize)) {    return -1;  }  int start=off + len - ((int)lastByte & 0x0ff);  if (start < off) {    return -1;  }  for (int i=0; i < ((int)lastByte & 0x0ff); i++) {    if (in[start + i] != lastByte) {      return -1;    }  }  return start;}  }
class C{  public Set<RawProtein<T>> process(Resource fastaFile,Resource modelFile) throws IOException {  final String additionalArguments=new StringBuilder().append(modelFile.getFile().getAbsolutePath()).append(' ').append(fastaFile.getFile().getAbsolutePath()).toString();  return parser.parse(run(additionalArguments));}  }
class C{  @Override public void onClick(AjaxRequestTarget aTarget){  curationPanel.resetEditor(aTarget);  List<SourceDocument> listOfSourceDocuements=getListOfDocs();  int currentDocumentIndex=listOfSourceDocuements.indexOf(bModel.getDocument());  if (currentDocumentIndex == listOfSourceDocuements.size() - 1) {    aTarget.appendJavaScript("alert('This is the last document!')");  } else {    bModel.setDocumentName(listOfSourceDocuements.get(currentDocumentIndex + 1).getName());    bModel.setDocument(listOfSourceDocuements.get(currentDocumentIndex + 1));    try {      aTarget.add(getFeedbackPanel());      repository.upgradeCasAndSave(bModel.getDocument(),Mode.CURATION,bModel.getUser().getUsername());      loadDocumentAction(aTarget);    } catch (    IOException|UIMAException|ClassNotFoundException|BratAnnotationException e) {      aTarget.add(getFeedbackPanel());      error(e.getCause().getMessage());    }  }}  }
class C{  public void syncTraktMovieWatched(List<Movie> moviesInTmm){  if (!isEnabled()) {    return;  }  List<Movie> tmmMovies=new ArrayList<>(moviesInTmm);  List<BaseMovie> traktMovies=new ArrayList<>();  try {    traktMovies=TRAKT.sync().watchedMovies(Extended.DEFAULT_MIN);  } catch (  RetrofitError e) {    handleRetrofitError(e);    return;  }catch (  OAuthUnauthorizedException e) {    try {      refreshAccessToken();      traktMovies=TRAKT.sync().watchedMovies(Extended.DEFAULT_MIN);    } catch (    Exception e1) {      if (e1.getCause() instanceof RetrofitError) {        handleRetrofitError((RetrofitError)e1.getCause());      } else {        LOGGER.error("could not retrieve trakt.tv response: ",e1.getMessage());      }      return;    }  }  LOGGER.info("You have " + traktMovies.size() + " movies marked as 'watched' in your Trakt.tv collection");  for (  BaseMovie traktWatched : traktMovies) {    for (    Movie tmmMovie : tmmMovies) {      if (matches(tmmMovie,traktWatched.movie.ids)) {        boolean dirty=updateIDs(tmmMovie,traktWatched.movie.ids);        if (!tmmMovie.isWatched()) {          LOGGER.info("Marking movie '" + tmmMovie.getTitle() + "' as watched");          tmmMovie.setWatched(true);          dirty=true;        }        if (traktWatched.last_watched_at != null && !(traktWatched.last_watched_at.toDate().equals(tmmMovie.getLastWatched()))) {          LOGGER.trace("Marking movie '" + tmmMovie.getTitle() + "' as watched on "+ traktWatched.last_watched_at.toDate()+ " (was "+ tmmMovie.getLastWatched()+ ")");          tmmMovie.setLastWatched(traktWatched.last_watched_at.toDate());          dirty=true;        }        if (dirty) {          tmmMovie.writeNFO();          tmmMovie.saveToDb();        }      }    }  }  List<Movie> tmmWatchedMovies=new ArrayList<>();  for (  Movie movie : tmmMovies) {    if (movie.isWatched()) {      tmmWatchedMovies.add(movie);    }  }  LOGGER.info("You have now " + tmmWatchedMovies.size() + " movies marked as 'watched' in your TMM database");  for (int i=tmmWatchedMovies.size() - 1; i >= 0; i--) {    for (    BaseMovie traktWatched : traktMovies) {      Movie tmmMovie=tmmWatchedMovies.get(i);      if (matches(tmmMovie,traktWatched.movie.ids)) {        tmmWatchedMovies.remove(i);        break;      }    }  }  if (tmmWatchedMovies.size() == 0) {    LOGGER.info("no new watched movies for Trakt sync found.");    return;  }  LOGGER.debug("prepare " + tmmWatchedMovies.size() + " movies for Trakt.tv sync");  List<SyncMovie> movies=new ArrayList<>();  int nosync=0;  for (  Movie tmmMovie : tmmWatchedMovies) {    if (tmmMovie.getIdAsInt(providerInfo.getId()) != 0 || !tmmMovie.getIdAsString(Constants.IMDB).isEmpty() || tmmMovie.getIdAsInt(Constants.TMDB) != 0) {      movies.add(toSyncMovie(tmmMovie,true));    } else {      nosync++;      continue;    }  }  if (nosync > 0) {    LOGGER.debug("skipping " + nosync + " movies, because they have not been scraped yet!");  }  if (movies.size() == 0) {    LOGGER.info("no new watched movies for Trakt sync found.");    return;  }  try {    LOGGER.info("Marking " + movies.size() + " movies as 'watched' to Trakt.tv collection");    SyncItems items=new SyncItems().movies(movies);    response=TRAKT.sync().addItemsToWatchedHistory(items);    LOGGER.info("Trakt mark-as-watched status:");    printStatus(response);  } catch (  RetrofitError e) {    handleRetrofitError(e);    return;  }catch (  OAuthUnauthorizedException e) {    handleRetrofitError((RetrofitError)e.getCause());    return;  }}  }
class C{  public void compose(StylesheetRoot sroot){  if (DEBUG) {    System.out.println("Before wildcard insert...");    dumpAssociationTables();  }  if (null != m_wildCardPatterns) {    Enumeration associations=m_patternTable.elements();    while (associations.hasMoreElements()) {      TemplateSubPatternAssociation head=(TemplateSubPatternAssociation)associations.nextElement();      TemplateSubPatternAssociation wild=m_wildCardPatterns;      while (null != wild) {        try {          head=insertAssociationIntoList(head,(TemplateSubPatternAssociation)wild.clone(),true);        } catch (        CloneNotSupportedException cnse) {        }        wild=wild.getNext();      }    }  }  if (DEBUG) {    System.out.println("After wildcard insert...");    dumpAssociationTables();  }}  }
class C{  private void iconify(){  Frame frame=getFrame();  if (frame != null) {    frame.setExtendedState(state | Frame.ICONIFIED);  }}  }
class C{  public CeFanSearchRunner(DataWrapper dataWrapper,Parameters params){  super(dataWrapper,params,null);}  }
class C{  public static LocalResult read(Session session,ResultSet rs,int maxrows){  Expression[] cols=Expression.getExpressionColumns(session,rs);  int columnCount=cols.length;  LocalResult result=new LocalResult(session,cols,columnCount);  try {    for (int i=0; (maxrows == 0 || i < maxrows) && rs.next(); i++) {      Value[] list=new Value[columnCount];      for (int j=0; j < columnCount; j++) {        int type=result.getColumnType(j);        list[j]=DataType.readValue(rs,j + 1,type);      }      result.addRow(list);    }  } catch (  SQLException e) {    throw DbException.convert(e);  }  result.done();  return result;}  }
class C{  public int read() throws IOException {  if (this.closed) {    throw new IOException("Attempted read from closed stream.");  }  if (this.eof) {    return -1;  }  if (this.pos >= this.chunkSize) {    nextChunk();    if (this.eof) {      return -1;    }  }  pos++;  return in.read();}  }
class C{  public static void checkArgument(boolean expression,Object errorMessage){  if (ExoPlayerLibraryInfo.ASSERTIONS_ENABLED && !expression) {    throw new IllegalArgumentException(String.valueOf(errorMessage));  }}  }
class C{  MimeEmailMessageWrapper(){  multipartRoot=new MimeMultipart("mixed");  final MimeBodyPart contentRelated=new MimeBodyPart();  multipartRelated=new MimeMultipart("related");  final MimeBodyPart contentAlternativeMessages=new MimeBodyPart();  multipartAlternativeMessages=new MimeMultipart("alternative");  try {    multipartRoot.addBodyPart(contentRelated);    contentRelated.setContent(multipartRelated);    multipartRelated.addBodyPart(contentAlternativeMessages);    contentAlternativeMessages.setContent(multipartAlternativeMessages);  } catch (  final MessagingException e) {    throw new MailSenderException(e.getMessage(),e);  }}  }
class C{  public CcdRunner(DataWrapper dataWrapper,Parameters params){  super(dataWrapper,params,null);}  }
class C{  public void clearUndoStack(){  m_undoStack=new ArrayList<UndoAction>();  m_nCurrentEditAction=-1;  m_nSavedPointer=-1;}  }
class C{  public static String decapitalize(String name){  if (name.length() == 0) {    return name;  }  if (name.length() > 1 && Character.isUpperCase(name.charAt(1)) && Character.isUpperCase(name.charAt(0))) {    return name;  }  char chars[]=name.toCharArray();  char c=chars[0];  char modifiedChar=Character.toLowerCase(c);  if (modifiedChar == c) {    return name;  }  chars[0]=modifiedChar;  return new String(chars);}  }
class C{  public void park(ParallelCollector context){  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(isMember(context));  lock.lock();  context.lastTriggerCount++;  if (context.lastTriggerCount == triggerCount) {    contextsParked++;    if (contextsParked == contexts.length) {      aborted=false;    }    lock.broadcast();    while (context.lastTriggerCount == triggerCount) {      lock.await();    }  }  lock.unlock();}  }
class C{  public Vertex sentence(Vertex source,Vertex[] arguments){  Network network=source.getNetwork();  Vertex result=null;  Vertex nil=network.createVertex(Primitive.NULL);  if (arguments.length == 0) {    result=nil;  } else   if (arguments.length == 1) {    result=arguments[0];    if (!(result.getData() instanceof String)) {      StringWriter writer=new StringWriter();      Vertex text=Language.getWordFollowing(result,nil,nil,network);      writer.write(text.getDataValue());      result=network.createSentence(writer.toString());    } else {      result=network.createSentence((String)result.getData());    }  } else {    StringWriter writer=new StringWriter();    List<Vertex> words=new ArrayList<Vertex>();    for (    Vertex argument : arguments) {      words.add(argument);    }    Vertex previousWord=nil;    for (int index=0; index < words.size(); index++) {      Vertex word=words.get(index);      Vertex nextWord=nil;      if (words.size() > (index + 1)) {        nextWord=words.get(index + 1);      }      word=Language.getWordFollowing(word,previousWord,nextWord,network);      writer.write(String.valueOf(word.getData()));      if ((index + 1) < words.size()) {        writer.write(" ");      }      previousWord=word;    }    result=network.createSentence(writer.toString());  }  return result;}  }
class C{  public static MosaicProperties createMosaicPropertiesWithInitialSupply(final Long initialSupply){  return createMosaicProperties(initialSupply,3,null,null);}  }
class C{  protected DeterministicKeyChain makeKeyChainFromSeed(DeterministicSeed seed){  return new DeterministicKeyChain(seed);}  }
class C{  public static Matcher<Exception> fbMessageEquals(int fbErrorCode,String... messageParameters){  return message(equalTo(getFbMessage(fbErrorCode,messageParameters)));}  }
class C{  public FormOmittedITCase(String name){  super(name);}  }
class C{  private static String normalizeGetter(final String name){  final int size=name.startsWith("is") ? 2 : 3;  final char chars[]=name.substring(size).toCharArray();  chars[0]=Character.toLowerCase(chars[0]);  return new String(chars);}  }
class C{  private void waitLatch(){  wait=true;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList childList;  DocumentFragment newdocFragment;  Node newChild1;  Node newChild2;  Node child;  String childName;  java.util.List result=new java.util.ArrayList();  int nodeType;  Node appendedChild;  java.util.List expected=new java.util.ArrayList();  expected.add("employeeId");  expected.add("name");  expected.add("position");  expected.add("salary");  expected.add("gender");  expected.add("address");  expected.add("newChild1");  expected.add("newChild2");  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(1);  childList=employeeNode.getChildNodes();  newdocFragment=doc.createDocumentFragment();  newChild1=doc.createElement("newChild1");  newChild2=doc.createElement("newChild2");  appendedChild=newdocFragment.appendChild(newChild1);  appendedChild=newdocFragment.appendChild(newChild2);  appendedChild=employeeNode.appendChild(newdocFragment);  for (int indexN1009F=0; indexN1009F < childList.getLength(); indexN1009F++) {    child=(Node)childList.item(indexN1009F);    nodeType=(int)child.getNodeType();    if (equals(1,nodeType)) {      childName=child.getNodeName();      result.add(childName);    }  }  assertEquals("elementNames",expected,result);}  }
class C{  protected void insertIntoCharStats(final DBTransaction transaction,final Player player) throws SQLException {  final String query="INSERT INTO character_stats" + " (name, admin, sentence, age, level," + " outfit, outfit_colors, xp, money, married, atk, def, hp,"+ " karma, head, armor, lhand, rhand,"+ " legs, feet, cloak, finger, zone, lastseen)"+ " VALUES ('[name]', '[admin]', '[sentence]', '[age]', '[level]',"+ " '[outfit]', '[outfit_colors]', '[xp]', '[money]', '[married]',"+ " '[atk]', '[atk]', '[hp]', '[karma]', '[head]', '[armor]',"+ " '[lhand]', '[rhand]', '[legs]', '[feet]', '[cloak]', '[finger]',"+ " '[zone]', '[lastseen]')";  Map<String,Object> params=getParamsFromPlayer(player);  logger.debug("storeCharacter is running: " + query);  transaction.execute(query,params);}  }
class C{  public XMLWriter(boolean encodeText){  this.encodeText=encodeText;}  }
class C{  public boolean isNavBarTintEnabled(){  return mNavBarTintEnabled;}  }
class C{  public CGroupNodeUpdater(final ZyGraph zygraph,final INaviGroupNode node){  Preconditions.checkNotNull(zygraph,"IE00992: Graph argument can't be null");  Preconditions.checkNotNull(node,"IE00993: Node argument can't be null");  m_graph=zygraph.getGraph();  m_node=node;  m_listener=new CTagUpdater(zygraph.getGraph());  initializeListeners();}  }
class C{  private View moveSelection(View oldSel,View newSel,int delta,int childrenTop,int childrenBottom){  int fadingEdgeLength=getVerticalFadingEdgeLength();  final int selectedPosition=mSelectedPosition;  View sel;  final int topSelectionPixel=getTopSelectionPixel(childrenTop,fadingEdgeLength,selectedPosition);  final int bottomSelectionPixel=getBottomSelectionPixel(childrenTop,fadingEdgeLength,selectedPosition);  if (delta > 0) {    oldSel=makeAndAddView(selectedPosition - 1,oldSel.getTop(),true,mListPadding.left,false);    final int dividerHeight=mDividerHeight;    sel=makeAndAddView(selectedPosition,oldSel.getBottom() + dividerHeight,true,mListPadding.left,true);    if (sel.getBottom() > bottomSelectionPixel) {      int spaceAbove=sel.getTop() - topSelectionPixel;      int spaceBelow=sel.getBottom() - bottomSelectionPixel;      int halfVerticalSpace=(childrenBottom - childrenTop) / 2;      int offset=Math.min(spaceAbove,spaceBelow);      offset=Math.min(offset,halfVerticalSpace);      oldSel.offsetTopAndBottom(-offset);      sel.offsetTopAndBottom(-offset);    }    if (!mStackFromBottom) {      fillUp(mSelectedPosition - 2,sel.getTop() - dividerHeight);      adjustViewsUpOrDown();      fillDown(mSelectedPosition + 1,sel.getBottom() + dividerHeight);    } else {      fillDown(mSelectedPosition + 1,sel.getBottom() + dividerHeight);      adjustViewsUpOrDown();      fillUp(mSelectedPosition - 2,sel.getTop() - dividerHeight);    }  } else   if (delta < 0) {    if (newSel != null) {      sel=makeAndAddView(selectedPosition,newSel.getTop(),true,mListPadding.left,true);    } else {      sel=makeAndAddView(selectedPosition,oldSel.getTop(),false,mListPadding.left,true);    }    if (sel.getTop() < topSelectionPixel) {      int spaceAbove=topSelectionPixel - sel.getTop();      int spaceBelow=bottomSelectionPixel - sel.getBottom();      int halfVerticalSpace=(childrenBottom - childrenTop) / 2;      int offset=Math.min(spaceAbove,spaceBelow);      offset=Math.min(offset,halfVerticalSpace);      sel.offsetTopAndBottom(offset);    }    fillAboveAndBelow(sel,selectedPosition);  } else {    int oldTop=oldSel.getTop();    sel=makeAndAddView(selectedPosition,oldTop,true,mListPadding.left,true);    if (oldTop < childrenTop) {      int newBottom=sel.getBottom();      if (newBottom < childrenTop + 20) {        sel.offsetTopAndBottom(childrenTop - sel.getTop());      }    }    fillAboveAndBelow(sel,selectedPosition);  }  return sel;}  }
class C{  public SearchSourceBuilder sort(String name,SortOrder order){  return sort(SortBuilders.fieldSort(name).order(order));}  }
class C{  public static String appendPluignName(String pluginName,String baseName){  if (StringUtils.isEmpty(baseName)) {    return baseName;  }  return StringUtils.isEmpty(pluginName) ? baseName : pluginName + "." + baseName;}  }
class C{  private static final String ProbabilityToString(double val,int significantDigits){  if (val == 0) {    return "0.0";  }  String valString=Double.toString(val);  int valStringLen=valString.length();  String result="";  int next=0;  int significantDigitsFound=0;  while ((next < valStringLen) && (valString.charAt(next) == '0')) {    next++;  }  while ((next < valStringLen) && Character.isDigit(valString.charAt(next))) {    result=result + valString.charAt(next);    significantDigitsFound++;    next++;  }  if (next == valStringLen) {    return result;  } else   if (valString.charAt(next) != '.') {    return valString;  }  if (significantDigitsFound >= significantDigits) {    next++;    while ((next < valStringLen) && Character.isDigit(valString.charAt(next))) {      next++;    }  } else {    next++;    result=result + ".";    if (significantDigitsFound == 0) {      while ((next < valStringLen) && (valString.charAt(next) == '0')) {        next++;        result=result + "0";      }    }    while ((next < valStringLen) && Character.isDigit(valString.charAt(next)) && significantDigitsFound < significantDigits) {      result=result + valString.charAt(next);      next++;      significantDigitsFound++;    }    if ((next < valStringLen) && Character.isDigit(valString.charAt(next)) && Character.digit(valString.charAt(next),10) >= 5) {      int prev=result.length() - 1;      boolean done=false;      while (!done) {        if (prev < 0) {          result="1" + result;          done=true;        } else {          char prevChar=result.charAt(prev);          String front=result.substring(0,prev);          String back=result.substring(prev + 1);          if (Character.isDigit(prevChar)) {            if (prevChar == '9') {              result=front + '0' + back;            } else {              result=front + Character.forDigit(Character.digit(prevChar,10) + 1,10) + back;              done=true;            }          } else {          }        }        prev--;      }    }    while ((next < valStringLen) && Character.isDigit(valString.charAt(next))) {      next++;    }  }  if (next >= valStringLen) {    return result;  }  if (valString.charAt(next) == 'E') {    next++;    result=result + "E";    while (next < valStringLen) {      result=result + valString.charAt(next);      next++;    }    return result;  }  return valString;}  }
class C{  private void reportInterruptAfterWait(int interruptMode) throws InterruptedException {  if (interruptMode == THROW_IE)   throw new InterruptedException(); else   if (interruptMode == REINTERRUPT)   selfInterrupt();}  }
class C{  final void sync(Tree node){  builder.sync(((JCTree)node).getStartPosition());}  }
class C{  protected int calculateThreshold(int newCapacity,float factor){  return (int)(newCapacity * factor);}  }
class C{  private DefaultMutableTreeNode icomponent(int AD_Client_ID,int PP_Product_BOMLine_ID,int M_Product_ID,DefaultMutableTreeNode bom){  final String sql="SELECT pbom.M_Product_ID , pbom.Value , pbom.PP_Product_BOM_ID FROM  PP_Product_BOMLine pboml" + " INNER JOIN PP_Product_BOM pbom ON (pbom.PP_Product_BOM_ID = pboml.PP_Product_BOM_ID)" + " WHERE pbom.IsActive=? AND pboml.IsActive=? AND pboml.AD_Client_ID=? AND pboml.PP_Product_BOMLine_ID=? ";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,m_trxName);    DB.setParameters(pstmt,new Object[]{true,true,AD_Client_ID,PP_Product_BOMLine_ID});    rs=pstmt.executeQuery();    while (rs.next()) {      if (M_Product_ID != rs.getInt(1)) {        if (!tableproduct(rs.getInt(1),rs.getInt(3))) {          bom.add(iparent(AD_Client_ID,rs.getInt(1),rs.getInt(3)));        } else {          throw new AdempiereException("Cycle BOM & Formula:" + rs.getString(2) + "("+ rs.getString(3)+ ")");        }      } else {        MProduct product=MProduct.get(m_ctx,M_Product_ID);        throw new AdempiereException("Cycle BOM & Formula:" + rs.getString(2) + "("+ rs.getString(3)+ ")"+ " - Component: "+ product.getValue()+ "("+ product.getM_Product_ID()+ ")");      }    }  } catch (  SQLException e) {    throw new DBException(e,sql);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  return null;}  }
class C{  public static Mac createMac(SecurityAlgorithm algorithm,byte[] secret) throws ServiceResultException {  return getCryptoProvider().createMac(algorithm,secret);}  }
class C{  private void resize(int capacity){  Item[] a=(Item[])new Object[capacity];  System.arraycopy(items,0,a,0,size);  items=a;}  }
class C{  default <U>Zippable<Tuple2<T,U>> zip(final Stream<? extends U> other){  return zip(other,null);}  }
class C{  public static boolean isInsidePolygon(ReadOnlyVector3 p,ReadOnlyVector3[] vertex){  return (windingNumber(p,vertex) != 0);}  }
class C{  public void clear(){  for (int j=0; j < _size; j++) {    for (int k=0; k < _size; k++) {      _cells[j][k].reset();    }  }  setVisible(true);}  }
class C{  static String add_escapes(String str){  StringBuilder retval=new StringBuilder();  char ch;  for (int i=0; i < str.length(); i++) {switch (str.charAt(i)) {case 0:      continue;case '\b':    retval.append("\\b");  continue;case '\t':retval.append("\\t");continue;case '\n':retval.append("\\n");continue;case '\f':retval.append("\\f");continue;case '\r':retval.append("\\r");continue;case '\"':retval.append("\\\"");continue;case '\'':retval.append("\\\'");continue;case '\\':retval.append("\\\\");continue;default :if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) {String s="0000" + Integer.toString(ch,16);retval.append("\\u" + s.substring(s.length() - 4,s.length()));} else {retval.append(ch);}continue;}}return retval.toString();}  }
class C{  protected AppletListener remove(AppletListener oldl){  if (oldl == a)   return b;  if (oldl == b)   return a;  AppletListener a2=removeInternal(a,oldl);  AppletListener b2=removeInternal(b,oldl);  if (a2 == a && b2 == b) {    return this;  }  return addInternal(a2,b2);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public final void testGetPublicExponent(){  RSAPrivateCrtKeySpec ks=new RSAPrivateCrtKeySpec(BigInteger.ONE,BigInteger.valueOf(5L),BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE);  assertTrue(BigInteger.valueOf(5L).equals(ks.getPublicExponent()));}  }
class C{  public void invalidateAllLoads(){  if (!doMemory)   return;  int i=0;  while (i < cache.size()) {    AvailableExpression ae=cache.get(i);    if (ae.isLoadOrStore()) {      cache.remove(i);      continue;    }    i++;  }}  }
class C{  protected int update(Object newObject){  SQLiteDatabase db=openDatabase();  int rows=-1;  if (newObject instanceof FileItem) {    ContentValues cv=new ContentValues();    cv.put(SyncFile.Columns.FILENAME,((FileItem)newObject).getFilename());    cv.put(SyncFile.Columns.PATH,((FileItem)newObject).getPath());    cv.put(SyncFile.Columns.IS_FOLDER,((FileItem)newObject).isFolder());    cv.put(SyncFile.Columns.PARENT_ID,((FileItem)newObject).getParentId());    cv.put(SyncFile.Columns.CREATE_TIME,((FileItem)newObject).getCreateTime());    cv.put(SyncFile.Columns.HASH_VALUE,((FileItem)newObject).getHashValue());    String[] args={String.valueOf(((FileItem)newObject).getId())};    rows=db.update(SyncFile.TABLE_NAME,cv,SyncFile.Columns.ID + "=?",args);  } else   if (newObject instanceof ActionItem) {    ContentValues cv=new ContentValues();    cv.put(SyncAction.Columns.TYPE,((ActionItem)newObject).getType());    cv.put(SyncAction.Columns.REMOTE_PATH,((ActionItem)newObject).getRemotePath());    cv.put(SyncAction.Columns.LOCAL_PATH,((ActionItem)newObject).getLocalPath());    cv.put(SyncAction.Columns.CREATE_TIME,((ActionItem)newObject).getCreateTime());    cv.put(SyncAction.Columns.STATE,((ActionItem)newObject).getState());    cv.put(SyncAction.Columns.MISC,((ActionItem)newObject).getMisc());    String[] args={String.valueOf(((ActionItem)newObject).getId())};    rows=db.update(SyncAction.TABLE_NAME,cv,SyncAction.Columns.ID + "=?",args);  } else {    throw new IllegalArgumentException("unsupported parameter");  }  closeDatabase();  return rows;}  }
class C{  public FloatColumn(int nrows){  this(nrows,nrows,0f);}  }
class C{  protected void sendTestMessage(SerialMessage m,SerialListener l){  if (log.isDebugEnabled()) {    log.debug("sendTestMessage    [" + m + "]");  }  notifyMessage(m,l);  return;}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  response.setContentType("text/html");  PrintWriter out=response.getWriter();  out.println(HTML_DOCTYPE);  out.println(getStylesheetHTML(request));  String pathInfo=request.getPathInfo();  if (pathInfo == null) {    selectDB(request,response);    return;  }  int findex=pathInfo.indexOf('/',1);  if (findex < 0) {    findex=pathInfo.length();  }  String libname=pathInfo.substring(1,findex);  try {    LibrarySelectionTable lst=getLST(libname);    if (lst == null) {      out.println("VPF Database not configured: " + libname);      return;    }    String dbname=lst.getDatabaseName();    out.println("<HTML>\n<HEAD><TITLE>Describe VPF Database " + dbname + "</TITLE></HEAD>\n<BODY>\n<H1>VPF Database "+ dbname+ "</H1>\n");    ListElement dble=new ListBodyElement();    WrapElement dblist=new WrapElement("ul",dble);    dble.addElement("Database Description: " + lst.getDatabaseDescription());    dble.addElement("Database Description Table: " + buildURL(request,response,libname,"dht"));    List<String> libraries=lst.getLibraryNames();    StringBuffer libnames=new StringBuffer("Database Libraries: ");    for (    String libName : libraries) {      libnames.append("<A HREF=\"#").append(libName);      libnames.append("\">").append(libName);      libnames.append("</A>").append(" ");    }    libnames.append("(from ");    libnames.append(buildURL(request,response,libname,"lat"));    libnames.append(")");    dble.addElement(libnames.toString());    dblist.generate(out);    for (    String libName : libraries) {      printLibrary(request,response,libname,lst.getCAT(libName));    }    out.println("</body></html>");  } catch (  FormatException fe) {    throw new ServletException("FormatException: ",fe);  }}  }
class C{  public void exportPEMObject(Object pemObject,String filename) throws IOException {  Writer writer;  writer=new FileWriter(filename);  JcaPEMWriter jcaPemWriter=new JcaPEMWriter(writer);  jcaPemWriter.writeObject(pemObject);  jcaPemWriter.flush();  jcaPemWriter.close();}  }
class C{  private void checkExportability(){  if ((fileLocTextField.getText() == null) || fileLocTextField.getText().length() == 0) {    exportButton.setEnabled(false);  } else {    exportButton.setEnabled(true);  }}  }
class C{  public PeakAndDeclineModel(String name,Parameter peakValueParameter,Parameter shapeParameter,Parameter peakTimeParameter,Type units){  super(name);  flexibleGrowth=new FlexibleGrowth(units);  this.peakValueParameter=peakValueParameter;  addVariable(peakValueParameter);  peakValueParameter.addBounds(new Parameter.DefaultBounds(Double.POSITIVE_INFINITY,0.0,1));  this.peakTimeParameter=peakTimeParameter;  addVariable(peakTimeParameter);  peakTimeParameter.addBounds(new Parameter.DefaultBounds(0,Double.NEGATIVE_INFINITY,1));  this.shapeParameter=shapeParameter;  addVariable(shapeParameter);  shapeParameter.addBounds(new Parameter.DefaultBounds(0,Double.NEGATIVE_INFINITY,1));  setUnits(units);}  }
class C{  public long longValue(){  return 0l;}  }
class C{  protected void countSortFromTo(int from,int to,short min,short max){  if (size == 0)   return;  checkRangeFromTo(from,to,size);  final int width=(int)(max - min + 1);  int[] counts=new int[width];  short[] theElements=elements;  for (int i=from; i <= to; )   counts[(int)(theElements[i++] - min)]++;  int fromIndex=from;  short val=min;  for (int i=0; i < width; i++, val++) {    int c=counts[i];    if (c > 0) {      if (c == 1)       theElements[fromIndex++]=val; else {        int toIndex=fromIndex + c - 1;        fillFromToWith(fromIndex,toIndex,val);        fromIndex=toIndex + 1;      }    }  }}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case EipPackage.METADATA__KEY:    setKey((String)newValue);  return;case EipPackage.METADATA__VALUES:getValues().clear();getValues().addAll((Collection<? extends String>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  @ResponseBody @RequestMapping(value="/{applicationName}/alias",method=RequestMethod.GET) public List<String> aliases(JsonInput jsonInput) throws ServiceException, CheckException {  logger.debug("application.name = " + jsonInput.getApplicationName());  User user=this.authentificationUtils.getAuthentificatedUser();  Application application=applicationService.findByNameAndUser(user,jsonInput.getApplicationName());  List<String> aliases=applicationService.getListAliases(application);  if (logger.isDebugEnabled() && aliases != null)   logger.debug(aliases.toString());  return aliases;}  }
class C{  public void testMTGrouped() throws Exception {  tryMT(1,true);}  }
class C{  protected static void checkRangeFromTo(int from,int to,int theSize){  if (from < 0 || from > to || to >= theSize)   throw new IndexOutOfBoundsException("from: " + from + ", to: "+ to+ ", size="+ theSize);}  }
class C{  public void commitEditing(){  TableCellEditor editor=getCellEditor();  if (editor != null) {    editor.stopCellEditing();  }}  }
class C{  public EventId createEventId(String rawEventId){  if (rawEventId.toLowerCase().startsWith("ora:"))   return new OracleEventId(rawEventId);  if (rawEventId.startsWith("mysql") || rawEventId.indexOf(":") > -1)   return new MySQLEventId(rawEventId); else   return null;}  }
class C{  @Override public void onClick(View v){switch (v.getId()) {case R.id.data_base_add_bt:    MySQLiteHelper.getInstance(this.context).insert("Save you from anything");  this.refresh();break;case R.id.data_base_del_bt:{MySQLiteHelper.getInstance(this.context).deleteAll();this.refresh();break;}case R.id.data_base_mod_bt:{MySQLiteHelper.getInstance(this.context).updateFirst();this.refresh();break;}case R.id.data_base_query_bt:{this.refresh();break;}}}  }
class C{  public boolean generate(Projection proj){  if (!isUseImage() || image == null) {    return super.generate(proj);  }  if (proj == null) {    Debug.message("omgraphic","OMPoint: null projection in generate!");    setNeedToRegenerate(true);    return false;  }  int imageHeight=image.getHeight(null);  int imageWidth=image.getWidth(null);  int imageOffsetX=imageWidth / 2;  int imageOffsetY=imageHeight / 2;switch (renderType) {case RENDERTYPE_XY:    imageX=x - imageOffsetX;  imageY=y - imageOffsetY;break;case RENDERTYPE_OFFSET:case RENDERTYPE_LATLON:if (!proj.isPlotable(lat1,lon1)) {setNeedToRegenerate(true);return false;}Point2D p1=proj.forward(lat1,lon1);imageX=(int)p1.getX() + x - imageOffsetX;imageY=(int)p1.getY() + y - imageOffsetY;break;case RENDERTYPE_UNKNOWN:System.err.println("OMPoint.Image.generate(): invalid RenderType");return false;}setShape(createBoxShape(imageX,imageY,imageWidth,imageHeight));initLabelingDuringGenerate();setLabelLocation(new Point(imageX + imageWidth,imageY + imageOffsetY),proj);setNeedToRegenerate(false);return true;}  }
class C{  protected static boolean primitive(String type){  return ((GeneratorUtil.convertToPrimitive(type) != null));}  }
class C{  public boolean putRegisterContent(int registerNumber,String content){  try {    registers[registerNumber]=Double.parseDouble(content);  } catch (  NumberFormatException nfe) {    return false;  }  return true;}  }
class C{  public NGramDistance(){  this(2);}  }
class C{  public static double nextUp(final double start){  if (start < Double.POSITIVE_INFINITY) {    final long bits=Double.doubleToRawLongBits(start + 0.0);    return Double.longBitsToDouble(bits + (bits >= 0 ? 1 : -1));  } else   if (start == Double.POSITIVE_INFINITY) {    return Double.POSITIVE_INFINITY;  } else {    return start;  }}  }
class C{  public void myMethod(){  return "";}  }
class C{  public ByteVector putShort(final int s){  int length=this.length;  if (length + 2 > data.length) {    enlarge(2);  }  byte[] data=this.data;  data[length++]=(byte)(s >>> 8);  data[length++]=(byte)s;  this.length=length;  return this;}  }
class C{  public void addRouter(final Class<?> router){  Method[] methods=router.getMethods();  if (null == methods || methods.length == 0) {    return;  }  String nameSpace=null, suffix=null;  if (null != router.getAnnotation(Controller.class)) {    nameSpace=router.getAnnotation(Controller.class).value();    suffix=router.getAnnotation(Controller.class).suffix();  }  if (null != router.getAnnotation(RestController.class)) {    nameSpace=router.getAnnotation(RestController.class).value();    suffix=router.getAnnotation(RestController.class).suffix();  }  if (null == nameSpace && null == suffix) {    LOGGER.warn("Route [{}] not controller annotation",router.getName());    return;  }  for (int i=0, len=methods.length; i < len; i++) {    Method method=methods[i];    Route mapping=method.getAnnotation(Route.class);    if (null != mapping) {      HttpMethod methodType=mapping.method();      String[] paths=mapping.value();      if (null != paths && paths.length > 0) {        for (int j=0, plen=paths.length; j < plen; j++) {          String pathV=getRoutePath(paths[j],nameSpace,suffix);          this.buildRoute(router,method,pathV,methodType);        }      }    }  }}  }
class C{  @Override public void launchAuthenticationFlow(){  if (tabsIntentBuilder == null) {    tabsIntentBuilder=newTabsIntentBuilder();  }  CustomTabsIntent tabsIntent=tabsIntentBuilder.build();  addReferrerToIntent(tabsIntent.intent,context.getPackageName());  tabsIntent.intent.setPackage(browserPackageName);  tabsIntent.launchUrl(context,Uri.parse(loginUrl()));}  }
class C{  public Task<ProtectionSystemRestRep> update(URI id,ProtectionSystemUpdateRequestParam input){  return putTask(input,getIdUrl(),id);}  }
class C{  public void beginGroup(String groupName,PrintWriter out){}  }
class C{  public void constValueIndex(char value) throws IOException {  constValueIndex('C',pool.addIntegerInfo(value));}  }
class C{  public static String s2(int v){  char[] result=new char[5];  if (v < 0) {    result[0]='-';    v=-v;  } else {    result[0]='+';  }  for (int i=0; i < 4; i++) {    result[4 - i]=Character.forDigit(v & 0x0f,16);    v>>=4;  }  return new String(result);}  }
class C{  public static double quantile(List<Double> values,double q){  double a=1.0, b=-1.0, c=0.0, d=1.0;  int n=values.size();  double x=a + (n + b) * q - 1.0;  double xInt=(int)x;  double xFrac=x - xInt;  if (xInt < 0) {    return values.get(0);  } else   if (xInt >= n) {    return values.get(n - 1);  }  int i=(int)xInt;  if (xFrac == 0) {    return values.get(i);  }  return values.get(i) + (values.get(i + 1) - values.get(i)) * (c + d * xFrac);}  }
class C{  public static void write(SpannableString spannableString){  buffer.append(spannableString);  scheduleBufferPrint();}  }
class C{  public void java_io_FileSystem_getFileSystem(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  helper.assignObjectTo(returnVar,Environment.v().getFileSystemObject());}  }
class C{  private void persistServerURI(String serverURI){  File fileDir=newConnection.getFilesDir();  File presited=new File(fileDir,"hosts.txt");  BufferedWriter bfw=null;  try {    bfw=new BufferedWriter(new FileWriter(presited));    bfw.write(serverURI);    bfw.newLine();  } catch (  IOException e) {    e.printStackTrace();  } finally {    try {      if (bfw != null) {        bfw.close();      }    } catch (    IOException e) {      e.printStackTrace();    }  }}  }
class C{  protected char whatFeatureType(VPFWarehouse warehouse,String featureName){  char featureType=SKIP_FEATURETYPE;  FeatureClassInfo fci=getFeatureClassInfo(featureName);  if (fci == null) {    return featureType;  }  char type=fci.getFeatureType();  if ((type == AREA_FEATURETYPE && warehouse.drawAreaFeatures()) || (type == TEXT_FEATURETYPE && warehouse.drawTextFeatures()) || (type == EDGE_FEATURETYPE && warehouse.drawEdgeFeatures())|| (type == EPOINT_FEATURETYPE && warehouse.drawEPointFeatures())|| (type == CPOINT_FEATURETYPE && warehouse.drawCPointFeatures())) {    featureType=type;  }  return featureType;}  }
class C{  private void generateH(VelocityEngine ve,String templateDir,File file,VelocityContext context){  Template tm=ve.getTemplate(templateDir + File.separator + PIPELINE_HTEMPLATE);  StringWriter sw=new StringWriter();  tm.merge(context,sw);  try (PrintWriter writer=new PrintWriter(file.getParentFile().getAbsolutePath() + File.separator + file.getName().replace(".cpp",".h"),"UTF-8")){    writer.println(sw);  } catch (  UnsupportedEncodingException|FileNotFoundException e) {    logger.log(Level.SEVERE,"Unable to write to file",e);  }}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) public LiteralExtensionIV createIV(Object[] components){  final long[] componentsAsLongArr=componentsAsLongArr(components,datatypeConfig);  final byte[] zOrderByteArray=toZOrderByteArray(componentsAsLongArr,datatypeConfig);  final byte[] zOrderByteArrayTwoCompl=padLeadingZero(zOrderByteArray);  final BigInteger bi=new BigInteger(zOrderByteArrayTwoCompl);  final AbstractLiteralIV delegate=new XSDIntegerIV(bi);  return new LiteralExtensionIV(delegate,datatype.getIV());}  }
class C{  protected void notifyDataChangedEvent(){  if (datasetObservers != null) {    for (    DataSetObserver observer : datasetObservers) {      observer.onChanged();    }  }}  }
class C{  private void maybeSetDataReductionProxyUsed(){  String url=getUrl();  if (url != null && url.toLowerCase(Locale.US).startsWith("chrome://")) {    return;  }  mUsedSpdyProxy=false;  mUsedSpdyProxyWithPassthrough=false;  if (isSpdyProxyEnabledForUrl(url)) {    mUsedSpdyProxy=true;    if (mLastPageLoadHasSpdyProxyPassthroughHeaders) {      mLastPageLoadHasSpdyProxyPassthroughHeaders=false;      mUsedSpdyProxyWithPassthrough=true;    }  }}  }
class C{  private static void attemptRetryOnException(String logPrefix,Request<?> request,VolleyError exception) throws VolleyError {  RetryPolicy retryPolicy=request.getRetryPolicy();  int oldTimeout=request.getTimeoutMs();  try {    retryPolicy.retry(exception);  } catch (  VolleyError e) {    request.addMarker(String.format("%s-timeout-giveup [timeout=%s]",logPrefix,oldTimeout));    throw e;  }  request.addMarker(String.format("%s-retry [timeout=%s]",logPrefix,oldTimeout));}  }
class C{  public static void fitToScreenVertical(Rectangle rectangle,int top,int bottom,boolean rightAligned){  Rectangle screen=getScreenRectangle(rectangle.x,rectangle.y);  if (rectangle.width > screen.width) {    rectangle.width=screen.width;  }  if (rightAligned) {    rectangle.x-=rectangle.width;  }  if (rectangle.x < screen.x) {    rectangle.x=screen.x;  } else {    int max=screen.x + screen.width;    if (rectangle.x > max) {      rectangle.x=max - rectangle.width;    }  }  int above=rectangle.y - screen.y - top;  int below=screen.height - above - top- bottom;  if (below > rectangle.height) {    rectangle.y+=bottom;  } else   if (above > rectangle.height) {    rectangle.y-=rectangle.height + top;  } else   if (below > above) {    rectangle.y+=bottom;    rectangle.height=below;  } else {    rectangle.y-=rectangle.height + top;    rectangle.height=above;  }}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){  m_mainExp.fixupVariables(vars,globalsSize);}  }
class C{  public PunycodeException(final String m){  super(m);}  }
class C{  public static void dumpStack(final VM vm){  vm.invoke(org.apache.geode.test.dunit.ThreadUtils.class,"dumpStack");}  }
class C{  public MultiMatchQueryBuilder maxExpansions(int maxExpansions){  this.maxExpansions=maxExpansions;  return this;}  }
class C{  public void removeFactor(String factor){  try {    lagGraph.removeFactor(factor);    getPropertyChangeManager().firePropertyChange("nodeRemoved",factor,null);    ArrayList toDelete=new ArrayList();    SortedSet factors=getFactors();    Iterator f=factors.iterator();    while (f.hasNext()) {      String destFactor=(String)f.next();      SortedSet parents=lagGraph.getParents(destFactor);      Iterator p=parents.iterator();      while (p.hasNext()) {        LaggedFactor lf=(LaggedFactor)p.next();        if (lf.getFactor().equals(factor)) {          toDelete.add(lf);        }      }      Iterator d=toDelete.iterator();      while (d.hasNext()) {        removeEdge(destFactor,(LaggedFactor)d.next());      }      toDelete.clear();    }  } catch (  Exception e) {  }}  }
class C{  public ProblemFactory(){  super();  customProviders=new ArrayList<ProblemProvider>();}  }
class C{  public static void send(InternalDistributedMember recipient,int processorId,DM dm) throws ForceReattemptException {  InterestEventReplyMessage m=new InterestEventReplyMessage(processorId);  m.setRecipient(recipient);  dm.putOutgoing(m);}  }
class C{  @Override public final int hashCode(){  return super.hashCode();}  }
class C{  public static List<List<String>> tokensAsStrings(List<Constituent> tokens,List<Constituent> sentences,String rawText){  List<List<String>> strTokens=new ArrayList<>();  int sentNum=0;  Constituent sentence=sentences.get(sentNum);  strTokens.add(new ArrayList<String>());  for (  Constituent token : tokens) {    if (token.getStartSpan() >= sentence.getEndSpan()) {      strTokens.add(new ArrayList<String>());      sentNum++;      sentence=sentences.get(sentNum);    }    strTokens.get(sentNum).add(rawText.substring(token.getStartCharOffset(),token.getEndCharOffset()));  }  return strTokens;}  }
class C{  private void validateIteratorSize(CloseableIterator iterator,int expectedSize){  try {    int actualSize=0;    while (iterator.hasNext()) {      iterator.next();      actualSize++;    }    assertEquals("Iterator provided differing number of values",expectedSize,actualSize);  }  finally {    if (iterator != null) {      iterator.close();    }  }}  }
class C{  protected WifiP2pDnsSdServiceResponse(int status,int tranId,WifiP2pDevice dev,byte[] data){  super(WifiP2pServiceInfo.SERVICE_TYPE_BONJOUR,status,tranId,dev,data);  if (!parse()) {    throw new IllegalArgumentException("Malformed bonjour service response");  }}  }
class C{  public static String makeUpperCaseWord(final String word){  final StringBuilder res=new StringBuilder();  if (word.length() > 0) {    res.append(Character.toUpperCase(word.charAt(0)));    if (word.length() > 1) {      res.append(word.substring(1));    }  }  return res.toString();}  }
class C{  public static boolean isSignEqual(Context ctx,String apkFile){  String packageSign=getInstallPackageSignature(ctx,ctx.getPackageName());  String apkFileSign=getApkSignature(apkFile);  return TextUtils.equals(packageSign,apkFileSign);}  }
class C{  public static TraktTvOauth2AccessTokenManager from(Context context){  SharedPreferences sharedPreferences=context.getSharedPreferences("TraktTvAccessTokenStorage",Context.MODE_PRIVATE);  SharedPreferencesOAuth2AccessTokenStorage<OAuth2AccessToken> tokenStorage=new SharedPreferencesOAuth2AccessTokenStorage<>(sharedPreferences,OAuth2AccessToken.class);  return new TraktTvOauth2AccessTokenManager(tokenStorage);}  }
class C{  public Log(){  super(Number.class,Number.class);}  }
class C{  private void adjustCategories(DiscreteVariable variable,int numCategories){  List<String> categories=new LinkedList<>(variable.getCategories());  List<String> newCategories=new LinkedList<>(categories);  if (categories.size() > numCategories) {    for (int i=variable.getCategories().size() - 1; i >= numCategories; i++) {      newCategories.remove(i);    }  } else   if (categories.size() < numCategories) {    for (int i=categories.size(); i < numCategories; i++) {      String category=DataUtils.defaultCategory(i);      if (categories.contains(category)) {        continue;      }      newCategories.add(category);    }  }  DiscreteVariable to=new DiscreteVariable(variable.getName(),newCategories);  changeVariable(variable,to);}  }
class C{  protected CSSParseException createCSSParseException(String key){  return createCSSParseException(key,null);}  }
class C{  public BannerPatternType(final String enumName,final String identifier){  super(enumName);  this.identifier=identifier;}  }
