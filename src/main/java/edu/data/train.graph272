class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:11.511 -0500",hash_original_method="AFB9B131464BD8BEA4E9664B02B81FAF",hash_generated_method="A6CDB5BE793C81EFAEC5214801083006") private String formatCertificateDate(Context context,Date certificateDate){  if (certificateDate == null) {    return "";  }  return DateFormat.getDateFormat(context).format(certificateDate);}  }
class C{  public ReplyKeyboardMarkupBuilder oneTime(boolean oneTime){  this.one_time_keyboard=oneTime;  return this;}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  HttpSession sess=request.getSession(true);  sess.setMaxInactiveInterval(WebEnv.TIMEOUT);  if (configLoaded && !fatalError) {    String requestURL=request.getRequestURL().toString();    String serverName=request.getServerName();    String baseURL=requestURL.substring(0,requestURL.indexOf(serverName) + serverName.length() + 6) + request.getContextPath();    String relativeURL=requestURL.substring(baseURL.length());    if (relativeURL.indexOf('/') >= 0)     relativeURL=relativeURL.substring(relativeURL.lastIndexOf('/') + 1);    Integer mediaID=null;    try {      if (relativeURL.indexOf('.') >= 0) {        mediaID=Integer.parseInt(relativeURL.substring(0,relativeURL.indexOf('.')));      } else {        mediaID=Integer.parseInt(relativeURL);      }    } catch (    NumberFormatException ne) {    }    if (mediaID != null && mediaID.intValue() > 0) {      MMedia thisMedia=new org.compiere.model.MMedia(webProjectCache.getCtx(),mediaID,null);      if (thisMedia != null && thisMedia.get_ID() > 0) {        if (thisMedia.getMediaType().equals("CSS")) {          response.setContentType("text/css");          response.setContentLength(thisMedia.getContentText().length());          PrintWriter out;          out=response.getWriter();          out.print(thisMedia.getContentText());          out.close();        } else {          response.setContentType(thisMedia.getMediaType());          MImage thisImage=thisMedia.getImage();          if (thisImage != null) {            response.setContentLength(thisImage.getData().length);            byte[] buffer=thisImage.getData();            ByteArrayInputStream in=new ByteArrayInputStream(buffer);            OutputStream out=response.getOutputStream();            byte[] buf=new byte[1024];            int count=0;            while ((count=in.read(buf)) >= 0) {              out.write(buf,0,count);            }            in.close();            out.close();          }        }      } else {        response.sendError(404);      }    } else {      response.sendError(404);    }  } else   if (fatalError) {    response.sendError(500,ErrorMessage);  }}  }
class C{  void redo(int tableId,Row row,boolean add){  if (tableId == META_TABLE_ID) {    if (add) {      addMeta(row,pageStoreSession,true);    } else {      removeMeta(row);    }  }  Index index=metaObjects.get(tableId);  if (index == null) {    throw DbException.throwInternalError("Table not found: " + tableId + " "+ row+ " "+ add);  }  Table table=index.getTable();  if (add) {    table.addRow(pageStoreSession,row);  } else {    table.removeRow(pageStoreSession,row);  }}  }
class C{  protected CharSet(String setStr){  super();  add(setStr);}  }
class C{  public double angle(){  return rect.angle;}  }
class C{  public static byte[] copyOfRange(byte[] source,int from,int to){  if (source == null || from < 0 || to < 0) {    return null;  }  int length=to - from;  if (length < 0) {    return null;  }  if (source.length < from + length) {    return null;  }  byte[] destination=new byte[length];  System.arraycopy(source,from,destination,0,length);  return destination;}  }
class C{  public PlanMutateEndFirstActivity(final Map<Id<Person>,Double> originalTimes,final double mutationRange,final Random random){  this.originalTimes=originalTimes;  this.mutationRange=mutationRange;  this.random=random;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.386 -0400",hash_original_method="41BA5D3E6CD82551F6C2FAFF3850B986",hash_generated_method="AAA0E9FA70DCC42A6EF6C686E3CCDC7E") @Override public boolean markSupported(){  return in.markSupported();}  }
class C{  private static double[] subvector(double[] v,int head,int tail){  assert (head >= 0) && (head < tail);  assert tail <= v.length;  double[] result=new double[tail - head];  for (int i=head; i < tail; i++) {    result[i - head]=v[i];  }  return result;}  }
class C{  private StandardTokens(){}  }
class C{  public void replaceStopFacilityInRoute(TransitRoute transitRoute,Id<TransitStopFacility> toReplaceId,Id<TransitStopFacility> replaceWithId){  TransitStopFacility toReplace=schedule.getFacilities().get(toReplaceId);  TransitStopFacility replaceWith=schedule.getFacilities().get(replaceWithId);  if (toReplace == null) {    throw new IllegalArgumentException("StopFacility " + toReplaceId + " not found in schedule!");  } else   if (replaceWith == null) {    throw new IllegalArgumentException("StopFacility " + replaceWithId + " not found in schedule!");  }  replaceStopFacilityInRoute(transitRoute,toReplace,replaceWith);}  }
class C{  public Mustache compilePackageRelative(Class<?> packageClass,String templateName){  String packagePath=packageClass.getPackage().getName().replace('.','/') + "/";  return compile(packagePath + templateName);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Deprecated public ResumableHttpFileUploader(URL url,File file,ExecutorService executor,ProgressListener progressListener,long progressIntervalMillis) throws IOException {  this(new Builder().setUrl(url).setFile(file).setExecutorService(executor).setProgressListener(progressListener).setProgressIntervalMillis(progressIntervalMillis));}  }
class C{  private void tearDown(){  try {    rootOperator.processFinished();  } catch (  OperatorException e) {    getLogger().log(Level.WARNING,"Problem during finishing the process: " + e.getMessage(),e);  }  clearReportStreams();  clearStorage();  clearUnknownParameters();  ResultService.close();}  }
class C{  public static int bitCount(long longValue){  longValue=longValue - ((longValue >>> 1) & 0x5555555555555555L);  longValue=(longValue & 0x3333333333333333L) + ((longValue >>> 2) & 0x3333333333333333L);  longValue=(longValue + (longValue >>> 4)) & 0x0f0f0f0f0f0f0f0fL;  longValue=longValue + (longValue >>> 8);  longValue=longValue + (longValue >>> 16);  longValue=longValue + (longValue >>> 32);  return (int)longValue & 0x7f;}  }
class C{  public void addWord(String aWord){  KeyValueNode<String,Integer> parent=root;  for (int i=0; i < aWord.length(); i++) {    String subword=aWord.substring(0,i + 1);    KeyValueNode<String,Integer> child=parent.getChild(subword);    if (child != null) {      if (!subword.equals(aWord)) {        child.setValue(child.getValue() + 1);      }    } else {      Integer value=1;      if (subword.equals(aWord)) {        value=0;      }      child=new KeyValueNode<String,Integer>(subword,value);      parent.addChild(child);    }    parent=child;  }}  }
class C{  public FacesException(Throwable cause){  super(cause == null ? null : cause.toString());  this.cause=cause;}  }
class C{  public void show(){  view.show();  fetchConfigurations();}  }
class C{  public void updateDeltas(int deltaX,int deltaY){  if (mLeftBorderActive) {    mDeltaX=Math.max(-mBaselineX,deltaX);    mDeltaX=Math.min(mBaselineWidth - 2 * mTouchTargetWidth,mDeltaX);  } else   if (mRightBorderActive) {    mDeltaX=Math.min(mDragLayer.getWidth() - (mBaselineX + mBaselineWidth),deltaX);    mDeltaX=Math.max(-mBaselineWidth + 2 * mTouchTargetWidth,mDeltaX);  }  if (mTopBorderActive) {    mDeltaY=Math.max(-mBaselineY,deltaY);    mDeltaY=Math.min(mBaselineHeight - 2 * mTouchTargetWidth,mDeltaY);  } else   if (mBottomBorderActive) {    mDeltaY=Math.min(mDragLayer.getHeight() - (mBaselineY + mBaselineHeight),deltaY);    mDeltaY=Math.max(-mBaselineHeight + 2 * mTouchTargetWidth,mDeltaY);  }}  }
class C{  Cipher(CipherSpi cipherSpi,String transformation){  this.spi=cipherSpi;  this.transformation=transformation;  this.cryptoPerm=CryptoAllPermission.INSTANCE;  this.lock=null;}  }
class C{  private boolean addIvrZone(MDSDialog edgeDialog,IvrZone ivrZone){  boolean isSameHost=ivrZone.getIvrNetworkSystem().getIpAddress().equals(edgeDialog.getSession().getSession().getHost());  boolean added=false;  MDSDialog dialog=isSameHost ? edgeDialog : null;  try {    if (dialog == null) {      dialog=setUpDialog(ivrZone.getIvrNetworkSystem());    }    List<IvrZone> fabricIvrZones=dialog.showIvrZones(false);    IvrZoneset activeIvrZoneset=dialog.showActiveIvrZoneset();    if (activeIvrZoneset == null) {      _log.info("No active ivr zoneset...create one");      activeIvrZoneset=createActiveIvrZoneset(dialog);    }    dialog.config();    added=createIvrZone(dialog,ivrZone,fabricIvrZones,activeIvrZoneset);    if (added) {      dialog.ivrZonesetName(activeIvrZoneset.getName(),false);      dialog.ivrZonesetMember(ivrZone.getName(),false);      commitIvrZones(dialog,activeIvrZoneset);      dialog.copyRunningConfigToStartupFabric();    }    ;    dialog.endConfig();  } catch (  Exception ex) {    throw NetworkDeviceControllerException.exceptions.addZonesStrategyFailed(ex);  } finally {    if (dialog.isInSession()) {      dialog.endConfig();      dialog.config();      dialog.ivrAbort();      dialog.endConfig();    }    if (!isSameHost) {      disconnect(dialog);    }  }  return added;}  }
class C{  private void connectPublicMethodsToFrame(){  for (  ClassCallNode ccgNode : ccg.vertexSet()) {    RawControlFlowGraph cfg=getRCFG(ccgNode);    if (cfg.isPublicMethod()) {      addEdge(getFrameNode(FrameNodeType.CALL),methodEntries.get(ccgNode.getMethod()),new CCFGFrameEdge());      addEdge(methodExits.get(ccgNode.getMethod()),getFrameNode(FrameNodeType.RETURN),new CCFGFrameEdge());      publicMethods.add(methodEntries.get(ccgNode.getMethod()));    }  }}  }
class C{  public static void checkProxyPackageAccess(Class<?> clazz){  SecurityManager s=System.getSecurityManager();  if (s != null) {    if (Proxy.isProxyClass(clazz)) {      for (      Class<?> intf : clazz.getInterfaces()) {        checkPackageAccess(intf);      }    }  }}  }
class C{  public BrightnessEffect(float brightnessvalue){  if (brightnessvalue < 0.1f)   brightnessvalue=0.1f;  if (brightnessvalue > 2.0f)   brightnessvalue=2.0f;  this.brightnessValue=brightnessvalue;}  }
class C{  public boolean containSound(String soundName){  return musicMap.containsKey(soundName);}  }
class C{  public String docidfield(){  return docidfield;}  }
class C{  public void testUpdateProcessorParamDeprecationRemoved() throws Exception {  SolrCore core=h.getCore();  UpdateRequestHandler handler=new UpdateRequestHandler();  handler.init(null);  MapSolrParams params=new MapSolrParams(new HashMap<String,String>());  params.getMap().put("update.processor","nonexistant");  SolrQueryResponse rsp=new SolrQueryResponse();  SolrQueryRequestBase req=new SolrQueryRequestBase(core,params){  };  try {    handler.handleRequestBody(req,rsp);    assertTrue("Old param update.processor should not have any effect anymore",true);  } catch (  Exception e) {    assertFalse("Got wrong exception while testing update.chain",e.getMessage().equals("unknown UpdateRequestProcessorChain: nonexistant"));  }  params.getMap().remove("update.processor");  params.getMap().put(UpdateParams.UPDATE_CHAIN,"nonexistant");  req.setParams(params);  try {    handler.handleRequestBody(req,rsp);    assertFalse("Faulty update.chain parameter not causing an error - i.e. it is not detected",true);  } catch (  Exception e) {    assertEquals("Got wrong exception while testing update.chain",e.getMessage(),"unknown UpdateRequestProcessorChain: nonexistant");  }}  }
class C{  public static double[][] reduceMatrix(double[][] matrix){  int row, col, currCol, currRow, nrows, ncols, nonZeroRows=0, nonZeroColumns=0;  double[] rtotal, ctotal;  double[][] newMatrix;  nrows=matrix.length;  ncols=matrix[0].length;  rtotal=new double[nrows];  ctotal=new double[ncols];  for (row=0; row < nrows; row++) {    for (col=0; col < ncols; col++) {      rtotal[row]+=matrix[row][col];      ctotal[col]+=matrix[row][col];    }  }  for (row=0; row < nrows; row++) {    if (Utils.gr(rtotal[row],0)) {      nonZeroRows++;    }  }  for (col=0; col < ncols; col++) {    if (Utils.gr(ctotal[col],0)) {      nonZeroColumns++;    }  }  newMatrix=new double[nonZeroRows][nonZeroColumns];  currRow=0;  for (row=0; row < nrows; row++) {    if (Utils.gr(rtotal[row],0)) {      currCol=0;      for (col=0; col < ncols; col++) {        if (Utils.gr(ctotal[col],0)) {          newMatrix[currRow][currCol]=matrix[row][col];          currCol++;        }      }      currRow++;    }  }  return newMatrix;}  }
class C{  @Transactional public void updatePlanningBudget(final BudgetReAppropriation reAppropriation){  getSession().flush();  final BudgetDetail budgetDetail=budgetDetailService.find("from BudgetDetail where id=?",reAppropriation.getBudgetDetail().getId());  BigDecimal budgetAvailable=budgetDetail.getBudgetAvailable() == null ? BigDecimal.ZERO : budgetDetail.getBudgetAvailable();  BigDecimal Budgetapproved=BigDecimal.ZERO;  BigDecimal planningBudgetApproved=BigDecimal.ZERO;  BigDecimal planningBudgetUsage=BigDecimal.ZERO;  Budgetapproved=budgetDetail.getApprovedAmount().add(budgetDetail.getApprovedReAppropriationsTotal());  if (reAppropriation.getAdditionAmount() != null && reAppropriation.getAdditionAmount().compareTo(BigDecimal.ZERO) == 1)   Budgetapproved=Budgetapproved.add(reAppropriation.getAdditionAmount()); else   if (reAppropriation.getDeductionAmount() != null && reAppropriation.getDeductionAmount().compareTo(BigDecimal.ZERO) == 1)   Budgetapproved=Budgetapproved.subtract(reAppropriation.getDeductionAmount());  if (budgetDetail.getPlanningPercent() == null)   planningBudgetApproved=Budgetapproved; else   planningBudgetApproved=Budgetapproved.multiply(budgetDetail.getPlanningPercent()).divide(new BigDecimal(String.valueOf(100)));  planningBudgetUsage=budgetDetailsDAO.getPlanningBudgetUsage(budgetDetail);  budgetAvailable=planningBudgetApproved.subtract(planningBudgetUsage);  budgetDetail.setBudgetAvailable(budgetAvailable);  budgetDetailService.update(budgetDetail);  getSession().flush();}  }
class C{  public boolean isOrderReady(final Player player){  final String orderString=player.getQuest(questSlot);  final String[] order=orderString.split(";");  final int numberOfProductItems=Integer.parseInt(order[0]);  final String productName=order[1];  final long orderTime=Long.parseLong(order[2]);  final long timeNow=new Date().getTime();  return timeNow - orderTime >= getProductionTime(productName,numberOfProductItems) * 1000L;}  }
class C{  public void addListener(final ITagListener listener){  m_listeners.addListener(listener);}  }
class C{  private void uploadFile(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  FileUpload upload=new FileUpload(request);  String error=upload.getError();  if (error != null) {    WebUtil.createForwardPage(response,error,"requests.jsp",10);    return;  }  Properties ctx=JSPEnv.getCtx(request);  int R_Request_ID=upload.getParameterAsInt("R_Request_ID");  MRequest req=null;  if (R_Request_ID != 0)   req=new MRequest(ctx,R_Request_ID,null);  if (R_Request_ID == 0 || req == null || req.get_ID() != R_Request_ID) {    WebUtil.createForwardPage(response,"Request not found","requests.jsp",10);    return;  }  if (!req.isWebCanUpdate()) {    WebUtil.createForwardPage(response,"Request cannot be updated","requests.jsp",10);    return;  }  String fileName=upload.getFileName();  log.fine("R_Request_ID=" + R_Request_ID + " - "+ fileName);  MAttachment attachment=req.createAttachment();  attachment.addEntry(fileName,upload.getData());  if (attachment.save()) {    String msg=Msg.parseTranslation(ctx,"@Added@: @AD_Attachment_ID@ " + fileName);    req.webUpdate(msg);    req.saveEx();    WebUtil.createForwardPage(response,msg,"requests.jsp",10);  } else   WebUtil.createForwardPage(response,"File Upload Error - Please try again","requests.jsp",10);  log.fine(attachment.toString());}  }
class C{  public void writeShapeFile(String shapeFileName){  setProperties(prefix,loadProperties());  writeShapeFile(shapeFileName,getRectangle());}  }
class C{  public static boolean isValidLongitude(double longitude){  return longitude <= MAX_LONGITUDE && MIN_LONGITUDE <= longitude;}  }
class C{  public static void normalise(double[][] matrix,double[] means,double[] stds){  for (int r=0; r < matrix.length; r++) {    for (int c=0; c < matrix[r].length; c++) {      matrix[r][c]=matrix[r][c] - means[c];      if (!Double.isInfinite(1.0 / stds[c])) {        matrix[r][c]/=stds[c];      }    }  }}  }
class C{  static final public int parseInt(float what){  return (int)what;}  }
class C{  public Property dayOfWeek(){  return new Property(this,getChronology().dayOfWeek());}  }
class C{  public WorkingDayMovement(Settings settings){  super(settings);  busTravellerMM=new BusTravellerMovement(settings);  workerMM=new OfficeActivityMovement(settings);  homeMM=new HomeActivityMovement(settings);  eveningActivityMovement=new EveningActivityMovement(settings);  carMM=new CarMovement(settings);  ownCarProb=settings.getDouble(PROBABILITY_TO_OWN_CAR_SETTING);  if (rng.nextDouble() < ownCarProb) {    movementUsedForTransfers=carMM;  } else {    movementUsedForTransfers=busTravellerMM;  }  doEveningActivityProb=settings.getDouble(PROBABILITY_TO_GO_SHOPPING_SETTING);  setCurrentMovementModel(homeMM);  mode=HOME_MODE;}  }
class C{  @Override public boolean handles(ResultHistoryList history,int index){  return (getClassifier(history,index) instanceof IncrementalMultiLabelClassifier);}  }
class C{  private void addListRule(final Var subjVar,final Set<Value> subjValues,final URI predicate,final Var objVar,final Set<Value> objValues) throws QueryRulesetException {  ListMemberOperator subjCondition=null;  ListMemberOperator objCondition=null;  if (subjValues != null) {    subjCondition=new ListMemberOperator();    subjCondition.addArgument(subjVar);    for (    final Value constant : subjValues) {      subjCondition.addArgument(new Var(constant.toString(),constant));    }  }  if (objValues != null) {    objCondition=new ListMemberOperator();    objCondition.addArgument(objVar);    for (    final Value constant : objValues) {      objCondition.addArgument(new Var(constant.toString(),constant));    }  }  final Var predVar=new Var(predicate.toString(),predicate);  final CopyRule listRule=new CopyRule(new StatementPattern(subjVar,predVar,objVar));  if (subjCondition != null && objCondition != null) {    listRule.addCondition(new Or(subjCondition,objCondition));  } else   if (subjCondition != null) {    listRule.addCondition(subjCondition);  } else   if (objCondition != null) {    listRule.addCondition(objCondition);  }  rules.add(listRule);}  }
class C{  public void updateCheque_DD_Card_Deposit(final Long payInId,final String toBankaccountGlcode,final InstrumentHeader instrumentHeader,final Map valuesMap){  if (LOGGER.isDebugEnabled())   LOGGER.debug(" updateCheque_DD_Card_Deposit | Start");  if (LOGGER.isDebugEnabled())   LOGGER.debug(" updateCheque_DD_Card_Deposit for" + instrumentHeader + "and payin id"+ payInId);  final CVoucherHeader payIn=(CVoucherHeader)persistenceService.find("from CVoucherHeader where id=?",payInId);  updateInstrumentAndPayin(payIn,(Bankaccount)valuesMap.get("depositedBankAccount"),instrumentHeader,(EgwStatus)persistenceService.find("from EgwStatus where id = ?",Integer.valueOf(valuesMap.get("instrumentDepositedStatus").toString())));  final ContraJournalVoucher cjv=addToContra(payIn,(Bankaccount)valuesMap.get("depositedBankAccount"),instrumentHeader);  addToBankRecon(payIn,instrumentHeader,(EgwStatus)persistenceService.find("from EgwStatus where id = ?",Integer.valueOf(valuesMap.get("instrumentReconciledStatus").toString())));  if (LOGGER.isDebugEnabled())   LOGGER.debug(" updateCheque_DD_Card_Deposit | End");}  }
class C{  protected void update(){  double perc;  Dimension size;  perc=(double)m_Memory.getCurrent() / (double)m_Memory.getMax();  perc=Math.round(perc * 1000) / 10;  setToolTipText("" + perc + "% used");  m_History.insertElementAt(perc,0);  size=getSize();  while (m_History.size() > size.getWidth()) {    m_History.remove(m_History.size() - 1);  }  repaint();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:04.341 -0500",hash_original_method="F0F69185D92A35C507C6F9D582B32E71",hash_generated_method="09BDFB2D812B6667ABA6764C2FE121E8") public static Sampler WRAP_LINEAR_MIP_LINEAR(RenderScript rs){  if (rs.mSampler_WRAP_LINEAR_MIP_LINEAR == null) {    Builder b=new Builder(rs);    b.setMinification(Value.LINEAR_MIP_LINEAR);    b.setMagnification(Value.LINEAR);    b.setWrapS(Value.WRAP);    b.setWrapT(Value.WRAP);    rs.mSampler_WRAP_LINEAR_MIP_LINEAR=b.create();  }  return rs.mSampler_WRAP_LINEAR_MIP_LINEAR;}  }
class C{  private int calculateTotalDictionaryChunkCountsToBeRead(List<CarbonDictionaryColumnMetaChunk> dictionaryChunkMetaList,long dictionaryChunkStartOffset,long dictionaryChunkEndOffset){  boolean chunkWithStartOffsetFound=false;  int dictionaryChunkCount=0;  for (  CarbonDictionaryColumnMetaChunk metaChunk : dictionaryChunkMetaList) {    if (!chunkWithStartOffsetFound && dictionaryChunkStartOffset == metaChunk.getStart_offset()) {      chunkWithStartOffsetFound=true;    }    if (chunkWithStartOffsetFound) {      dictionaryChunkCount=dictionaryChunkCount + metaChunk.getChunk_count();    }    if (dictionaryChunkEndOffset == metaChunk.getEnd_offset()) {      break;    }  }  return dictionaryChunkCount;}  }
class C{  private void updateEffectiveDimensionsIfChanged(int newWidth,int newHeight){  if (width != newWidth || height != newHeight) {    width=newWidth;    height=newHeight;    updateEffectiveDimensions();    updatePaths();  }}  }
class C{  protected ObjectMapper mapper(){  if (_mapper == null) {    _mapper=new ObjectMapper();    _setAnnotations(_mapper,_defaultAnnotationsToUse);  }  return _mapper;}  }
class C{  public final boolean isActiveRemote(){  ClientSocketFactory pool=getClusterSocketPool();  return pool != null && pool.isActive();}  }
class C{  private void zkInit() throws Exception {  Borderlayout layout=new Borderlayout();  layout.setWidth("100%");  layout.setHeight("100%");  layout.setStyle("position: absolute;");  this.setHeight("100%");  this.setWidth("100%");  appendChild(layout);  Center center=new Center();  layout.appendChild(center);  Div div=new Div();  div.setStyle("width: 100%; height:100%; overflow: auto");  div.appendChild(info);  center.appendChild(div);  center.setFlex(true);  South south=new South();  layout.appendChild(south);  south.setStyle("border: none");  south.appendChild(confirmPanel);  confirmPanel.addActionListener(this);  confirmPanel.getOKButton().setEnabled(false);  LayoutUtils.sendDeferLayoutEvent(layout,100);}  }
class C{  private static int length(String p){  if (p.endsWith("$") || p.endsWith(" "))   return p.length() - 1;  return p.length();}  }
class C{  public void accept(final AnnotationVisitor av){  if (av != null) {    if (values != null) {      for (int i=0; i < values.size(); i+=2) {        String name=(String)values.get(i);        Object value=values.get(i + 1);        accept(av,name,value);      }    }    av.visitEnd();  }}  }
class C{  @SuppressWarnings("unchecked") public static <T>Task<T> fromFuture(Future<T> future){  if (future instanceof Task) {    return (Task<T>)future;  }  if (future instanceof CompletionStage) {    return from((CompletionStage<T>)future);  }  final Task<T> t=new Task<>();  if (future.isDone()) {    try {      t.internalComplete(future.get());    } catch (    Throwable ex) {      t.internalCompleteExceptionally(ex);    }    return t;  }  commonPool.execute(new TaskFutureAdapter<>(t,future,commonPool,5,TimeUnit.MILLISECONDS));  return t;}  }
class C{  public void addAll(AnnotationStatistics<OUTCOME_TYPE> that){  this.referenceOutcomes.addAll(that.referenceOutcomes);  this.predictedOutcomes.addAll(that.predictedOutcomes);  this.correctOutcomes.addAll(that.correctOutcomes);  this.confusionMatrix.add(that.confusionMatrix);}  }
class C{  public void initialize(Geo g){  x=g.x;  y=g.y;  z=g.z;}  }
class C{  private static String buildMessage(String format,Object... args){  String msg=(args == null) ? format : String.format(Locale.US,format,args);  StackTraceElement[] trace=new Throwable().fillInStackTrace().getStackTrace();  String caller="<unknown>";  for (int i=2; i < trace.length; i++) {    Class<?> clazz=trace[i].getClass();    if (!clazz.equals(VolleyLog.class)) {      String callingClass=trace[i].getClassName();      callingClass=callingClass.substring(callingClass.lastIndexOf('.') + 1);      callingClass=callingClass.substring(callingClass.lastIndexOf('$') + 1);      caller=callingClass + "." + trace[i].getMethodName();      break;    }  }  return String.format(Locale.US,"[%d] %s: %s",Thread.currentThread().getId(),caller,msg);}  }
class C{  public static Number intdiv(Character left,Character right){  return intdiv(Integer.valueOf(left),right);}  }
class C{  protected void rehash(){  Entry[] oldTable=table;  table=new Entry[oldTable.length * 2 + 1];  for (int i=oldTable.length - 1; i >= 0; i--) {    for (Entry old=oldTable[i]; old != null; ) {      Entry e=old;      old=old.next;      int index=e.hash % table.length;      e.next=table[index];      table[index]=e;    }  }}  }
class C{  private TableHeaderCell headerCell(String content,int rowSpan,int colSpan){  TableHeaderCell cell=new TableHeaderCell();  cell.setRowSpan(rowSpan);  cell.setColSpan(colSpan);  cell.setNoWrap(true);  cell.setAlign("left");  cell.setValign("top");  cell.addContent("<font size=\"-1\">");  cell.addContent(content);  cell.addContent("</font>");  return (cell);}  }
class C{  public void stop(){  if (isStarted) {    isStarted=false;    offset=0;    invalidate();  }}  }
class C{  public void testBug4510() throws Exception {  try {    this.stmt.executeUpdate("DROP TABLE IF EXISTS testBug4510");    this.stmt.executeUpdate("CREATE TABLE testBug4510 (field1 INT NOT NULL PRIMARY KEY AUTO_INCREMENT, field2 VARCHAR(100))");    this.stmt.executeUpdate("INSERT INTO testBug4510 (field1, field2) VALUES (32767, 'bar')");    PreparedStatement p=this.conn.prepareStatement("insert into testBug4510 (field2) values (?)",Statement.RETURN_GENERATED_KEYS);    p.setString(1,"blah");    p.executeUpdate();    ResultSet genKeysRs=p.getGeneratedKeys();    genKeysRs.next();    System.out.println("Id: " + genKeysRs.getInt(1));    genKeysRs.close();  }  finally {    this.stmt.executeUpdate("DROP TABLE IF EXISTS testBug4510");  }}  }
class C{  private String createSfxMomentXml(String momentId,String nextMomentId,String pathToResource){  String xml="";  xml+=createStartMomentXml("sfx",momentId);  xml+=createNextMomentXml(nextMomentId);  xml+="<uri>" + pathToResource + "</uri>";  xml+=createEndMomentXml();  return xml;}  }
class C{  @Override public boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent event){  if (event.getEventType() == AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED) {    event.getText().clear();    int flags=DateUtils.FORMAT_SHOW_DATE | DateUtils.FORMAT_SHOW_YEAR | DateUtils.FORMAT_SHOW_WEEKDAY;    String dateString=DateUtils.formatDateTime(getContext(),mDateMillis,flags);    event.getText().add(dateString);    return true;  }  return super.dispatchPopulateAccessibilityEvent(event);}  }
class C{  public static Bound named(String name){  return new Bound().named(name);}  }
class C{  public long writeLongUnary(long x) throws IOException {  if (x < 0)   throw new IllegalArgumentException("The argument " + x + " is negative");  if (x < free)   return writeInCurrent(1,(int)x + 1);  final int shift=free;  x-=shift;  writtenBits+=shift;  write(current);  free=8;  current=0;  long i=x >> 3;  writtenBits+=(x & 0x7FFFFFFFFFFFFFF8L);  while (i-- != 0)   write(0);  writeInCurrent(1,(int)(x & 7) + 1);  return x + shift + 1;}  }
class C{  public Tasks<FileShareRestRep> stopFileContinuousCopies(URI id,FileReplicationParam input){  TaskList tasks=client.post(TaskList.class,input,getContinuousCopiesUrl() + "/stop",id);  return new Tasks<FileShareRestRep>(client,tasks.getTaskList(),FileShareRestRep.class);}  }
class C{  public void saveExpansionState(JTree tree){  saveSelectionPaths(tree.getSelectionPaths());  expandedNodes=new HashSet<>();  expandedRepositories=new HashSet<>();  for (int i=0; i < tree.getRowCount(); i++) {    TreePath path=tree.getPathForRow(i);    if (tree.isExpanded(path)) {      Entry entry=(Entry)path.getLastPathComponent();      String absoluteLocation=entry.getLocation().getAbsoluteLocation();      if (entry instanceof Repository) {        expandedRepositories.add(absoluteLocation);      } else {        expandedNodes.add(absoluteLocation);      }    }  }}  }
class C{  public static XContent xContent(CharSequence content){  XContentType type=xContentType(content);  if (type == null) {    throw new ElasticsearchParseException("Failed to derive xcontent");  }  return xContent(type);}  }
class C{  public void init(SocketChannel channel){  _channel=channel;  _readBuffer.clear();  _readBuffer.flip();  _needsFlush=false;}  }
class C{  @Override public boolean isEnabled(){  return m_enabled;}  }
class C{  private boolean sort(){  final int[] d=this.d;  if (LOGGER.isDebugEnabled())   LOGGER.debug("Peeling hypergraph (" + numVariables + " vertices, "+ numEdges+ " edges)...");  top=0;  for (int i=0; i < numVariables; i++)   if (d[i] == 1)   peel(i);  if (top == numEdges) {    if (LOGGER.isDebugEnabled())     LOGGER.debug("Peeling completed.");    return true;  }  if (LOGGER.isDebugEnabled())   LOGGER.debug("Peeled " + top + " edges out of "+ numEdges+ ".");  return false;}  }
class C{  public String toStringMethod(){  return this;}  }
class C{  boolean cancel(int propertyConstant){  if ((mPropertyMask & propertyConstant) != 0 && mNameValuesHolder != null) {    int count=mNameValuesHolder.size();    for (int i=0; i < count; ++i) {      NameValuesHolder nameValuesHolder=mNameValuesHolder.get(i);      if (nameValuesHolder.mNameConstant == propertyConstant) {        mNameValuesHolder.remove(i);        mPropertyMask&=~propertyConstant;        return true;      }    }  }  return false;}  }
class C{  public void persistBeanList(List beans,boolean printOnly){  for (  Object bean : beans) {    persistBeanTryCatch(bean);  }  callPersistEmittedKeyValue(printOnly);}  }
class C{  protected int defaultNumAttributes(){  return 10;}  }
class C{  public void handleAddressBookHasChanged() throws PayloadException, NetworkException {  Set<ContactId> rcsNumbers=mContactManager.getRcsContactsWithSocialPresence();  for (  ContactId contact : rcsNumbers) {    if (!PresenceUtils.isNumberInAddressBook(contact)) {      if (sLogger.isActivated()) {        sLogger.debug("The RCS number " + contact + " was not found in the address book any more.");      }      if (mContactManager.isNumberShared(contact) || mContactManager.isNumberInvited(contact)) {        if (sLogger.isActivated()) {          sLogger.debug(contact + " is either active or invited");          sLogger.debug("We remove it from the buddy list");        }        boolean result=revokeSharedContact(contact);        if (result) {          result=removeRevokedContact(contact);          if (result) {            mContactManager.updateRcsStatusOrCreateNewContact(contact,RcsStatus.RCS_CAPABLE);          } else {            if (sLogger.isActivated()) {              sLogger.error("Something went wrong when revoking shared contact");            }          }        }      } else       if (mContactManager.isNumberBlocked(contact)) {        if (sLogger.isActivated()) {          sLogger.debug(contact + " is blocked");          sLogger.debug("We remove it from the blocked list");        }        boolean result=removeBlockedContact(contact);        if (result) {          mContactManager.updateRcsStatusOrCreateNewContact(contact,RcsStatus.RCS_CAPABLE);        } else {          if (sLogger.isActivated()) {            sLogger.error("Something went wrong when removing blocked contact");          }        }      } else {        if (mContactManager.isNumberWilling(contact)) {          if (sLogger.isActivated()) {            sLogger.debug(contact + " is willing");            sLogger.debug("Nothing to do");          }        } else {          if (mContactManager.isNumberCancelled(contact)) {            if (sLogger.isActivated()) {              sLogger.debug(contact + " is cancelled");              sLogger.debug("We remove it from rich address book provider");            }            mContactManager.updateRcsStatusOrCreateNewContact(contact,RcsStatus.RCS_CAPABLE);          }        }      }    }  }}  }
class C{  public boolean isStereo(){  return (worldScene.getViewpointNode().getCamera() instanceof AnaglyphCamera);}  }
class C{  public MapModel(Map map,BeansWrapper wrapper){  super(map,wrapper);}  }
class C{  public void removePropertyChangeListener(PropertyChangeListener listener){  props.removeListener(listener);}  }
class C{  default boolean registerModel(IModel model,ResourceLocation location){  return false;}  }
class C{  public BigdataSailRepositoryConnection cxn(){  return tlTx.get();}  }
class C{  public boolean isSelected(){  return checkBox.isSelected();}  }
class C{  @DebugLog public void attemptLogin(){  if (userLoginTask != null) {    return;  }  usernameView.setError(null);  passwordView.setError(null);  if (isRequestingNewAccount) {    username=usernameView.getText().toString();  }  password=passwordView.getText().toString();  View focusView=null;  if (TextUtils.isEmpty(password)) {    passwordView.setError(getString(R.string.error_field_required));    focusView=passwordView;  }  if (TextUtils.isEmpty(username)) {    usernameView.setError(getString(R.string.error_field_required));    focusView=usernameView;  }  if (focusView != null) {    focusView.requestFocus();  } else {    loginStatusMessageView.setText(R.string.login_progress_signing_in);    showProgress(true);    userLoginTask=new UserLoginTask();    userLoginTask.execute((Void)null);  }}  }
class C{  public static void appendInstruction(OFFlowMod.Builder fmb,OFInstruction inst){  List<OFInstruction> newIl=new ArrayList<OFInstruction>();  List<OFInstruction> oldIl=fmb.getInstructions();  if (oldIl != null) {    newIl.addAll(fmb.getInstructions());  }  for (  OFInstruction i : newIl) {    if (i.getType() == inst.getType()) {      newIl.remove(i);    }  }  newIl.add(inst);  fmb.setInstructions(newIl);}  }
class C{  @Override public boolean isFactoryForType(Object object){  if (object == modelPackage) {    return true;  }  if (object instanceof EObject) {    return ((EObject)object).eClass().getEPackage() == modelPackage;  }  return false;}  }
class C{  public boolean reject(){  return mSession.reject();}  }
class C{  protected byte[] hexStringToByteArray(String hexString){  int len=hexString.length();  byte[] data=new byte[len / 2];  for (int i=0; i < len; i+=2) {    data[i / 2]=(byte)((Character.digit(hexString.charAt(i),16) << 4) + Character.digit(hexString.charAt(i + 1),16));  }  return data;}  }
class C{  public static File createDirIfNotExists(File directory) throws IOException {  if (!directory.isDirectory()) {    if (!directory.mkdirs()) {      throw new IOException("Failed to create directory: " + directory.getAbsolutePath());    }  }  return directory;}  }
class C{  @Override public Instances generateExamples() throws Exception {  Instances result;  int i;  result=new Instances(m_DatasetFormat,0);  m_Random=new Random(getSeed());  for (i=0; i < getNumExamplesAct(); i++) {    result.add(generateExample());  }  return result;}  }
class C{  public boolean canInsertItem(int slot,ItemStack stack,int par){  return this.isItemValidForSlot(slot,stack);}  }
class C{  public boolean isCompleted(){  return total == completed;}  }
class C{  private BreakpointHelpers(){}  }
class C{  private void removeEndpoint(InetAddress endpoint){  Gossiper.instance.removeEndpoint(endpoint);  SystemKeyspace.removeEndpoint(endpoint);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.EXPORTED_VARIABLE_DECLARATION__DEFINED_VARIABLE:    setDefinedVariable((TVariable)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public Vec4 computeCenterPoint(Globe globe,double exaggeration){  if (globe == null) {    String msg=Logging.getMessage("nullValue.GlobeIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  double lat=0.5 * (this.minLatitude.degrees + this.maxLatitude.degrees);  double lon=0.5 * (this.minLongitude.degrees + this.maxLongitude.degrees);  Angle cLat=Angle.fromDegrees(lat);  Angle cLon=Angle.fromDegrees(lon);  return globe.computePointFromPosition(cLat,cLon,exaggeration * globe.getElevation(cLat,cLon));}  }
class C{  public static SipResponse create200OkUpdateResponse(SipDialogPath dialog,SipRequest request) throws PayloadException {  try {    Response response=SipUtils.MSG_FACTORY.createResponse(200,request.getStackMessage());    response.addHeader(dialog.getSipStack().getContact());    response.addHeader(SipUtils.buildServerHeader());    Header requireHeader=SipUtils.HEADER_FACTORY.createHeader(RequireHeader.NAME,"timer");    response.addHeader(requireHeader);    Header sessionExpiresHeader=request.getHeader(SipUtils.HEADER_SESSION_EXPIRES);    if (sessionExpiresHeader != null) {      response.addHeader(sessionExpiresHeader);    }    SipResponse resp=new SipResponse(response);    resp.setStackTransaction(request.getStackTransaction());    return resp;  } catch (  ParseException e) {    throw new PayloadException("Can't create SIP message!",e);  }}  }
class C{  public static String randomAscii(int count){  return random(count,32,127,false,false);}  }
class C{  public static int EPROTOTYPE(){  return Errno.EPROTOTYPE.intValue();}  }
class C{  public void testBlendingType() throws IOException {  BytesRef pl=new BytesRef("lake");  long w=20;  Input keys[]=new Input[]{new Input("top of the lake",w,pl)};  Path tempDir=createTempDir("BlendedInfixSuggesterTest");  Analyzer a=new StandardAnalyzer(CharArraySet.EMPTY_SET);  BlendedInfixSuggester suggester=new BlendedInfixSuggester(newFSDirectory(tempDir),a);  suggester.build(new InputArrayIterator(keys));  assertEquals(w,getInResults(suggester,"top",pl,1));  assertEquals((int)(w * (1 - 0.10 * 2)),getInResults(suggester,"the",pl,1));  assertEquals((int)(w * (1 - 0.10 * 3)),getInResults(suggester,"lake",pl,1));  suggester.close();  suggester=new BlendedInfixSuggester(newFSDirectory(tempDir),a,a,AnalyzingInfixSuggester.DEFAULT_MIN_PREFIX_CHARS,BlendedInfixSuggester.BlenderType.POSITION_RECIPROCAL,1,false);  suggester.build(new InputArrayIterator(keys));  assertEquals(w,getInResults(suggester,"top",pl,1));  assertEquals((int)(w * 1 / (1 + 2)),getInResults(suggester,"the",pl,1));  assertEquals((int)(w * 1 / (1 + 3)),getInResults(suggester,"lake",pl,1));  suggester.close();  suggester=new BlendedInfixSuggester(newFSDirectory(tempDir),a,a,AnalyzingInfixSuggester.DEFAULT_MIN_PREFIX_CHARS,BlendedInfixSuggester.BlenderType.POSITION_EXPONENTIAL_RECIPROCAL,1,4.0,false,true,false);  suggester.build(new InputArrayIterator(keys));  assertEquals(w,getInResults(suggester,"top",pl,1));  assertEquals((int)(w * 1 / (Math.pow(1 + 2,4.0))),getInResults(suggester,"the",pl,1));  assertEquals((int)(w * 1 / (Math.pow(1 + 3,4.0))),getInResults(suggester,"lake",pl,1));  suggester.close();}  }
class C{  public static <V0 extends Vec,V1 extends Vec>List<List<? extends VecPaired<V0,Double>>> allNearestNeighbors(VectorCollection<V0> collection,V1[] search,int k){  return allNearestNeighbors(collection,Arrays.asList(search),k);}  }
class C{  public CheckBoxList(){  this(null);}  }
class C{  public Executor env(Map<String,String> env){  this.env=env;  return this;}  }
class C{  public void processMenuDragMouseEvent(MenuDragMouseEvent e){switch (e.getID()) {case MouseEvent.MOUSE_ENTERED:    isMouseDragged=false;  fireMenuDragMouseEntered(e);break;case MouseEvent.MOUSE_EXITED:isMouseDragged=false;fireMenuDragMouseExited(e);break;case MouseEvent.MOUSE_DRAGGED:isMouseDragged=true;fireMenuDragMouseDragged(e);break;case MouseEvent.MOUSE_RELEASED:if (isMouseDragged) fireMenuDragMouseReleased(e);break;default :break;}}  }
class C{  private void listenToDancingBee(){  IMovingAgent[] agents=this.getObjectsWithinMyDistance(1.0,true,true,this.getSphereRadius(),false,null);  agents=(IMovingAgent[])Filter.filter(agents,Bee.class);  if (agents.length > 0) {    int index=r.nextInt(agents.length);    Bee b=(Bee)agents[index];    if (b.getState() == Bee.State.dancing) {      double comNoise=getSimulation().comNoise;      copySourceInformationFrom(b);      sourceDistance+=Math.round((r.nextGaussian() * comNoise) * sourceDistance);      sourceDirection+=(r.nextGaussian() * comNoise) * 360;      sourceDirection=Geometric.clampAngleDegree(sourceDirection);      receptive=false;      double nectar=nectarForReturn + sourceDistance * nectarForOneStep + r.nextDouble() * 5;      nectarLoad=requestNectarFromHive(nectar);      repeatedTrip=0;      repeatedDance=0;      setState(State.leaveHive);    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:02.373 -0500",hash_original_method="00F8174F9E89D0C972FA6D3F19742382",hash_generated_method="D90463461B2A94FF94D13FDF69BB80C9") public int describeContents(){  return 0;}  }
class C{  public void characters(String chars) throws SAXException {  final int length=chars.length();  if (length > m_charsBuff.length) {    m_charsBuff=new char[length * 2 + 1];  }  chars.getChars(0,length,m_charsBuff,0);  this.characters(m_charsBuff,0,length);}  }
class C{  public JSONStringer endObject() throws JSONException {  return close(Scope.EMPTY_OBJECT,Scope.NONEMPTY_OBJECT,"}");}  }
class C{  public boolean isEmpty(){  return minNode == null;}  }
class C{  public void populateMetrics(Map<String,String> metrics){  if (mMetrics.isEmpty()) {    mMetrics.putAll(metrics);    return;  }  Map<String,String> metricsCopy=new HashMap<String,String>(metrics);  combineMetrics(metricsCopy,DeviceInfoConstants.PHONE_NUMBER,DeviceInfoConstants.IMSI,DeviceInfoConstants.IMSI,DeviceInfoConstants.SERIAL_NUMBER);  checkMetrics(metricsCopy,DeviceInfoConstants.BUILD_FINGERPRINT,DeviceInfoConstants.BUILD_MODEL,DeviceInfoConstants.BUILD_BRAND,DeviceInfoConstants.BUILD_MANUFACTURER,DeviceInfoConstants.BUILD_BOARD,DeviceInfoConstants.BUILD_DEVICE,DeviceInfoConstants.PRODUCT_NAME,DeviceInfoConstants.BUILD_ABI,DeviceInfoConstants.BUILD_ABI2,DeviceInfoConstants.SCREEN_SIZE);}  }
class C{  @Override public int hashCode(){  int result;  result=(this.key != null ? this.key.hashCode() : 0);  result=29 * result + (this.value != null ? this.value.hashCode() : 0);  return result;}  }
class C{  public void hideTableInfoPane(){  if (tableBorderPane.getChildren().contains(tableInfoHBox)) {    tableBorderPane.getChildren().remove(tableInfoHBox);    showingTableInfoPaneProperty.set(false);    LOG.debug("Hiding info pane");  }}  }
class C{  private void drawSecondAnimation(Canvas canvas){  if (arcO == limite)   arcD+=6;  if (arcD >= 290 || arcO > limite) {    arcO+=6;    arcD-=6;  }  if (arcO > limite + 290) {    limite=arcO;    arcO=limite;    arcD=1;  }  rotateAngle+=4;  canvas.rotate(rotateAngle,getWidth() / 2,getHeight() / 2);  Bitmap bitmap=Bitmap.createBitmap(canvas.getWidth(),canvas.getHeight(),Bitmap.Config.ARGB_8888);  Canvas temp=new Canvas(bitmap);  Paint paint=new Paint();  paint.setAntiAlias(true);  paint.setColor(backgroundColor);  temp.drawArc(new RectF(0,0,getWidth(),getHeight()),arcO,arcD,true,paint);  Paint transparentPaint=new Paint();  transparentPaint.setAntiAlias(true);  transparentPaint.setColor(getResources().getColor(android.R.color.transparent));  transparentPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));  temp.drawCircle(getWidth() / 2,getHeight() / 2,(getWidth() / 2) - Utils.dpToPx(4,getResources()),transparentPaint);  canvas.drawBitmap(bitmap,0,0,new Paint());}  }
class C{  public ZookeeperStateMachinePersist(CuratorFramework curatorClient,String path){  this(curatorClient,path,null,0);}  }
class C{  public void resize(int toAtLeast){  if (objs.length >= toAtLeast)   return;  if (objs.length * 2 > toAtLeast)   toAtLeast=objs.length * 2;  Object[] newobjs=new Object[toAtLeast];  System.arraycopy(objs,0,newobjs,0,numObjs);  objs=newobjs;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:19.682 -0500",hash_original_method="1D1918AFC608107C503CFA70B5918395",hash_generated_method="AABF32DAB549552287D3114C5BC8E5FA") void finishInputLocked(){  mNextServedView=null;  if (mServedView != null) {    if (DEBUG)     Log.v(TAG,"FINISH INPUT: " + mServedView);    if (mCurrentTextBoxAttribute != null) {      try {        mService.finishInput(mClient);      } catch (      RemoteException e) {      }    }    if (mServedInputConnection != null) {      Handler vh=mServedView.getHandler();      if (vh != null) {        vh.sendMessage(vh.obtainMessage(ViewRootImpl.FINISH_INPUT_CONNECTION,mServedInputConnection));      }    }    mServedView=null;    mCompletions=null;    mServedConnecting=false;    clearConnectionLocked();  }}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof DialValueIndicator)) {    return false;  }  DialValueIndicator that=(DialValueIndicator)obj;  if (this.datasetIndex != that.datasetIndex) {    return false;  }  if (this.angle != that.angle) {    return false;  }  if (this.radius != that.radius) {    return false;  }  if (!this.frameAnchor.equals(that.frameAnchor)) {    return false;  }  if (!this.templateValue.equals(that.templateValue)) {    return false;  }  if (!ObjectUtilities.equal(this.maxTemplateValue,that.maxTemplateValue)) {    return false;  }  if (!this.font.equals(that.font)) {    return false;  }  if (!PaintUtilities.equal(this.paint,that.paint)) {    return false;  }  if (!PaintUtilities.equal(this.backgroundPaint,that.backgroundPaint)) {    return false;  }  if (!this.outlineStroke.equals(that.outlineStroke)) {    return false;  }  if (!PaintUtilities.equal(this.outlinePaint,that.outlinePaint)) {    return false;  }  if (!this.insets.equals(that.insets)) {    return false;  }  if (!this.valueAnchor.equals(that.valueAnchor)) {    return false;  }  if (!this.textAnchor.equals(that.textAnchor)) {    return false;  }  return super.equals(obj);}  }
class C{  public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  try {    super.execute(mapping,form,request,response);    InstructorEditForm frm=(InstructorEditForm)form;    MessageResources rsc=getResources(request);    ActionMessages errors=new ActionMessages();    String instructorId=request.getParameter("instructorId");    String op=frm.getOp();    String reloadCause=request.getParameter("reloadCause");    if (op.equals(rsc.getMessage("button.reload")) || op.equals(MSG.actionAddTimePreference()) || op.equals(MSG.actionAddRoomPreference())|| op.equals(MSG.actionAddBuildingPreference())|| op.equals(MSG.actionAddRoomFeaturePreference())|| op.equals(MSG.actionAddDistributionPreference())|| op.equals(MSG.actionAddRoomGroupPreference())|| op.equals(MSG.actionUpdatePreferences())|| op.equals(MSG.actionClearInstructorPreferences())|| op.equals(MSG.actionBackToDetail())|| op.equals(MSG.actionNextInstructor())|| op.equals(MSG.actionPreviousInstructor())) {      instructorId=frm.getInstructorId();    }    if (op == null || op.trim().length() == 0 || (op.equals(rsc.getMessage("button.reload")) && (reloadCause == null || reloadCause.trim().length() == 0))) {      op="init";    }    if (op == null || op.trim() == "")     throw new Exception(MSG.exceptionNullOperationNotSupported());    if (instructorId == null || instructorId.trim() == "")     throw new Exception(MSG.exceptionInstructorInfoNotSupplied());    sessionContext.checkPermission(instructorId,"DepartmentalInstructor",Right.InstructorPreferences);    boolean timeVertical=CommonValues.VerticalGrid.eq(sessionContext.getUser().getProperty(UserProperty.GridOrientation));    frm.setScreenName("instructorPref");    DepartmentalInstructorDAO idao=new DepartmentalInstructorDAO();    DepartmentalInstructor inst=idao.get(new Long(instructorId));    LookupTables.setupInstructorDistribTypes(request,sessionContext,inst);    if (op.equals(MSG.actionBackToDetail()) && instructorId != null && instructorId.trim() != "") {      ActionRedirect redirect=new ActionRedirect(mapping.findForward("showDetail"));      redirect.addParameter("instructorId",frm.getInstructorId());      return redirect;    }    if (op.equals(MSG.actionClearInstructorPreferences())) {      Set s=inst.getPreferences();      s.clear();      inst.setPreferences(s);      idao.update(inst);      op="init";      ChangeLog.addChange(null,sessionContext,inst,ChangeLog.Source.INSTRUCTOR_PREF_EDIT,ChangeLog.Operation.CLEAR_PREF,null,inst.getDepartment());      ActionRedirect redirect=new ActionRedirect(mapping.findForward("showDetail"));      redirect.addParameter("instructorId",instructorId);      return redirect;    }    if (op.equals("init")) {      frm.reset(mapping,request);    }    doLoad(request,frm,inst,instructorId);    if (op.equals(MSG.actionUpdatePreferences()) || op.equals(MSG.actionNextInstructor()) || op.equals(MSG.actionPreviousInstructor())) {      errors=frm.validate(mapping,request);      if (errors.size() == 0) {        Set s=inst.getPreferences();        s.clear();        super.doUpdate(request,frm,inst,s,timeVertical);        ChangeLog.addChange(null,sessionContext,inst,ChangeLog.Source.INSTRUCTOR_PREF_EDIT,ChangeLog.Operation.UPDATE,null,inst.getDepartment());        idao.saveOrUpdate(inst);        if (op.equals(MSG.actionNextInstructor())) {          response.sendRedirect(response.encodeURL("instructorPrefEdit.do?instructorId=" + frm.getNextId()));          return null;        }        if (op.equals(MSG.actionPreviousInstructor())) {          response.sendRedirect(response.encodeURL("instructorPrefEdit.do?instructorId=" + frm.getPreviousId()));          return null;        }        ActionRedirect redirect=new ActionRedirect(mapping.findForward("showDetail"));        redirect.addParameter("instructorId",frm.getInstructorId());        redirect.addParameter("showPrefs","true");        return redirect;      } else {        saveErrors(request,errors);      }    }    Set timePatterns=new HashSet();    frm.setAvailableTimePatterns(null);    if (op.equals("init")) {      initPrefs(frm,inst,null,true);      timePatterns.add(new TimePattern(new Long(-1)));    }    if (!inst.getClasses().isEmpty()) {      WebTable classTable=new WebTable(3,null,new String[]{"class","Type","Limit"},new String[]{"left","left","left"},null);      for (Iterator iterInst=inst.getClasses().iterator(); iterInst.hasNext(); ) {        ClassInstructor ci=(ClassInstructor)iterInst.next();        Class_ c=ci.getClassInstructing();        classTable.addLine(null,new String[]{c.getClassLabel(),c.getItypeDesc(),c.getExpectedCapacity().toString()},null,null);      }      String tblData=classTable.printTable();      request.setAttribute("classTable",tblData);    }    processPrefAction(request,frm,errors);    for (    Preference pref : inst.getPreferences()) {      if (pref instanceof TimePref) {        frm.setAvailability(((TimePref)pref).getPreference());        break;      }    }    LookupTables.setupRooms(request,inst);    LookupTables.setupBldgs(request,inst);    LookupTables.setupRoomFeatures(request,inst);    LookupTables.setupRoomGroups(request,inst);    BackTracker.markForBack(request,"instructorDetail.do?instructorId=" + frm.getInstructorId(),MSG.backInstructor(frm.getName() == null ? "null" : frm.getName().trim()),true,false);    return mapping.findForward("showEdit");  } catch (  Exception e) {    Debug.error(e);    throw e;  }}  }
class C{  private void updatePeekBuffer(int bytesConsumed){  peekBufferLength-=bytesConsumed;  peekBufferPosition=0;  System.arraycopy(peekBuffer,bytesConsumed,peekBuffer,0,peekBufferLength);}  }
class C{  protected String doIt() throws java.lang.Exception {  StringBuffer sql=null;  int no=0;  String clientCheck=" AND AD_Client_ID=" + m_AD_Client_ID;  if (m_deleteOldImported) {    sql=new StringBuffer("DELETE I_ElementValue " + "WHERE I_IsImported='Y'").append(clientCheck);    no=DB.executeUpdate(sql.toString(),get_TrxName());    log.fine("Delete Old Impored =" + no);  }  sql=new StringBuffer("UPDATE I_ElementValue " + "SET AD_Client_ID = COALESCE (AD_Client_ID, ").append(m_AD_Client_ID).append(")," + " AD_Org_ID = COALESCE (AD_Org_ID, 0)," + " IsActive = COALESCE (IsActive, 'Y'),"+ " Created = COALESCE (Created, SysDate),"+ " CreatedBy = COALESCE (CreatedBy, 0),"+ " Updated = COALESCE (Updated, SysDate),"+ " UpdatedBy = COALESCE (UpdatedBy, 0),"+ " I_ErrorMsg = ' ',"+ " Processed = 'N', "+ " I_IsImported = 'N' "+ "WHERE I_IsImported<>'Y' OR I_IsImported IS NULL");  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Reset=" + no);  if (m_C_Element_ID != 0) {    sql=new StringBuffer("UPDATE I_ElementValue " + "SET ElementName=(SELECT Name FROM C_Element WHERE C_Element_ID=").append(m_C_Element_ID).append(") " + "WHERE ElementName IS NULL AND C_Element_ID IS NULL" + " AND I_IsImported<>'Y'").append(clientCheck);    no=DB.executeUpdate(sql.toString(),get_TrxName());    log.fine("Set Element Default=" + no);  }  sql=new StringBuffer("UPDATE I_ElementValue i " + "SET C_Element_ID = (SELECT C_Element_ID FROM C_Element e" + " WHERE i.ElementName=e.Name AND i.AD_Client_ID=e.AD_Client_ID)"+ "WHERE C_Element_ID IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set Element=" + no);  sql=new StringBuffer("UPDATE I_ElementValue " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid Element, ' " + "WHERE C_Element_ID IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.config("Invalid Element=" + no);  sql=new StringBuffer("UPDATE I_ElementValue " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=No Name, ' " + "WHERE (Value IS NULL OR Name IS NULL)"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.config("Invalid Name=" + no);  sql=new StringBuffer("UPDATE I_ElementValue i " + "SET AD_Column_ID = (SELECT AD_Column_ID FROM AD_Column c" + " WHERE UPPER(i.Default_Account)=UPPER(c.ColumnName)"+ " AND c.AD_Table_ID IN (315,266) AND AD_Reference_ID=25) "+ "WHERE Default_Account IS NOT NULL AND AD_Column_ID IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set Column=" + no);  sql=new StringBuffer("UPDATE I_ElementValue " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid Column, ' " + "WHERE AD_Column_ID IS NULL AND Default_Account IS NOT NULL"+ " AND UPPER(Default_Account)<>'DEFAULT_ACCT'"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.config("Invalid Column=" + no);  String[] yColumns=new String[]{"PostActual","PostBudget","PostStatistical","PostEncumbrance"};  for (int i=0; i < yColumns.length; i++) {    sql=new StringBuffer("UPDATE I_ElementValue SET ").append(yColumns[i]).append("='Y' WHERE ").append(yColumns[i]).append(" IS NULL OR ").append(yColumns[i]).append(" NOT IN ('Y','N')" + " AND I_IsImported<>'Y'").append(clientCheck);    no=DB.executeUpdate(sql.toString(),get_TrxName());    log.fine("Set " + yColumns[i] + " Default="+ no);  }  sql=new StringBuffer("UPDATE I_ElementValue " + "SET IsSummary='N' " + "WHERE IsSummary IS NULL OR IsSummary NOT IN ('Y','N')"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set IsSummary Default=" + no);  sql=new StringBuffer("UPDATE I_ElementValue " + "SET IsDocControlled = CASE WHEN AD_Column_ID IS NOT NULL THEN 'Y' ELSE 'N' END " + "WHERE IsDocControlled IS NULL OR IsDocControlled NOT IN ('Y','N')"+ " AND I_IsImported='N'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set IsDocumentControlled Default=" + no);  sql=new StringBuffer("UPDATE I_ElementValue " + "SET AccountType='E' " + "WHERE AccountType IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set AccountType Default=" + no);  sql=new StringBuffer("UPDATE I_ElementValue " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid AccountType, ' " + "WHERE AccountType NOT IN ('A','E','L','M','O','R')"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.config("Invalid AccountType=" + no);  sql=new StringBuffer("UPDATE I_ElementValue " + "SET AccountSign='N' " + "WHERE AccountSign IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set AccountSign Default=" + no);  sql=new StringBuffer("UPDATE I_ElementValue " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid AccountSign, ' " + "WHERE AccountSign NOT IN ('N','C','D')"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.config("Invalid AccountSign=" + no);  sql=new StringBuffer("UPDATE I_ElementValue " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=No Key, ' " + "WHERE (Value IS NULL OR Value='')"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.config("Invalid Key=" + no);  sql=new StringBuffer("UPDATE I_ElementValue i " + "SET C_ElementValue_ID=(SELECT C_ElementValue_ID FROM C_ElementValue ev" + " INNER JOIN C_Element e ON (ev.C_Element_ID=e.C_Element_ID)"+ " WHERE i.C_Element_ID=e.C_Element_ID AND i.AD_Client_ID=e.AD_Client_ID"+ " AND i.Value=ev.Value) "+ "WHERE C_ElementValue_ID IS NULL"+ " AND I_IsImported='N'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Found ElementValue=" + no);  sql=new StringBuffer("UPDATE I_ElementValue i " + "SET C_Charge_ID = (SELECT C_Charge_ID FROM C_Charge c" + " WHERE i.ChargeName=c.Name AND i.AD_Client_ID=c.AD_Client_ID)"+ "WHERE C_Charge_ID IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set Charge=" + no);  sql=new StringBuffer("UPDATE I_ElementValue i " + "SET C_TaxCategory_ID = (SELECT C_TaxCategory_ID FROM C_TaxCategory c" + " WHERE i.TaxCategoryName=c.Name AND i.AD_Client_ID=c.AD_Client_ID)"+ "WHERE C_TaxCategory_ID IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set Tax Category=" + no);  commitEx();  int noInsert=0;  int noUpdate=0;  sql=new StringBuffer("SELECT * " + "FROM I_ElementValue " + "WHERE I_IsImported='N'").append(clientCheck).append(" ORDER BY I_ElementValue_ID");  try {    PreparedStatement pstmt=DB.prepareStatement(sql.toString(),get_TrxName());    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      X_I_ElementValue impEV=new X_I_ElementValue(getCtx(),rs,get_TrxName());      int C_ElementValue_ID=impEV.getC_ElementValue_ID();      int I_ElementValue_ID=impEV.getI_ElementValue_ID();      if (C_ElementValue_ID == 0) {        MElementValue ev=new MElementValue(impEV);        if (ev.save()) {          noInsert++;          if (!ev.isSummary())           updateCharge(impEV,ev);          impEV.setC_ElementValue_ID(ev.getC_ElementValue_ID());          impEV.setI_IsImported(true);          impEV.saveEx();        } else {          sql=new StringBuffer("UPDATE I_ElementValue i " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||").append(DB.TO_STRING("Insert ElementValue ")).append("WHERE I_ElementValue_ID=").append(I_ElementValue_ID);          DB.executeUpdate(sql.toString(),get_TrxName());        }      } else {        MElementValue ev=new MElementValue(getCtx(),C_ElementValue_ID,get_TrxName());        if (ev.get_ID() != C_ElementValue_ID) {        }        ev.set(impEV);        if (ev.save()) {          noUpdate++;          if (!ev.isSummary())           updateCharge(impEV,ev);          impEV.setI_IsImported(true);          impEV.saveEx();        } else {          sql=new StringBuffer("UPDATE I_ElementValue i " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||").append(DB.TO_STRING("Update ElementValue")).append("WHERE I_ElementValue_ID=").append(I_ElementValue_ID);          DB.executeUpdate(sql.toString(),get_TrxName());        }      }    }    rs.close();    pstmt.close();  } catch (  SQLException e) {    throw new Exception("create",e);  }  sql=new StringBuffer("UPDATE I_ElementValue " + "SET I_IsImported='N', Updated=SysDate " + "WHERE I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  addLog(0,null,new BigDecimal(no),"@Errors@");  addLog(0,null,new BigDecimal(noInsert),"@C_ElementValue_ID@: @Inserted@");  addLog(0,null,new BigDecimal(noUpdate),"@C_ElementValue_ID@: @Updated@");  commitEx();  sql=new StringBuffer("UPDATE I_ElementValue i " + "SET ParentElementValue_ID=(SELECT C_ElementValue_ID" + " FROM C_ElementValue ev WHERE i.C_Element_ID=ev.C_Element_ID"+ " AND i.ParentValue=ev.Value AND i.AD_Client_ID=ev.AD_Client_ID) "+ "WHERE ParentElementValue_ID IS NULL"+ " AND I_IsImported='Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Found Parent ElementValue=" + no);  sql=new StringBuffer("UPDATE I_ElementValue " + "SET I_ErrorMsg=I_ErrorMsg||'Info=ParentNotFound, ' " + "WHERE ParentElementValue_ID IS NULL AND ParentValue IS NOT NULL"+ " AND I_IsImported='Y' AND Processed='N'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.config("Not Found Parent ElementValue=" + no);  sql=new StringBuffer("SELECT i.ParentElementValue_ID, i.I_ElementValue_ID," + " e.AD_Tree_ID, i.C_ElementValue_ID, i.Value||'-'||i.Name AS Info " + "FROM I_ElementValue i"+ " INNER JOIN C_Element e ON (i.C_Element_ID=e.C_Element_ID) "+ "WHERE i.C_ElementValue_ID IS NOT NULL AND e.AD_Tree_ID IS NOT NULL"+ " AND i.ParentElementValue_ID IS NOT NULL"+ " AND i.I_IsImported='Y' AND Processed='N' AND i.AD_Client_ID=").append(m_AD_Client_ID);  int noParentUpdate=0;  try {    PreparedStatement pstmt=DB.prepareStatement(sql.toString(),get_TrxName());    ResultSet rs=pstmt.executeQuery();    String updateSQL="UPDATE AD_TreeNode SET Parent_ID=?, SeqNo=? " + "WHERE AD_Tree_ID=? AND Node_ID=?";    PreparedStatement updateStmt=DB.prepareStatement(updateSQL,ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_UPDATABLE,get_TrxName());    while (rs.next()) {      updateStmt.setInt(1,rs.getInt(1));      updateStmt.setInt(2,rs.getInt(2));      updateStmt.setInt(3,rs.getInt(3));      updateStmt.setInt(4,rs.getInt(4));      try {        no=updateStmt.executeUpdate();        noParentUpdate+=no;      } catch (      SQLException ex) {        log.log(Level.SEVERE,"(ParentUpdate)",ex);        no=0;      }      if (no == 0)       log.info("Parent not found for " + rs.getString(5));    }    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,"(ParentUpdateLoop) " + sql.toString(),e);  }  addLog(0,null,new BigDecimal(noParentUpdate),"@ParentElementValue_ID@: @Updated@");  commitEx();  sql=new StringBuffer("UPDATE I_ElementValue " + "SET Processing='-'" + "WHERE I_IsImported='Y' AND Processed='N' AND Processing='Y'"+ " AND C_ElementValue_ID IS NOT NULL").append(clientCheck);  if (m_updateDefaultAccounts)   sql.append(" AND AD_Column_ID IS NULL");  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Reset Processing Flag=" + no);  if (m_updateDefaultAccounts)   updateDefaults(clientCheck);  sql=new StringBuffer("SELECT * FROM C_ValidCombination vc " + "WHERE EXISTS (SELECT * FROM I_ElementValue i " + "WHERE vc.Account_ID=i.C_ElementValue_ID)");  sql=new StringBuffer("UPDATE I_ElementValue " + "SET Processing='N', Processed='Y'" + "WHERE I_IsImported='Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Processed=" + no);  return "";}  }
class C{  public static ComponentUI createUI(JComponent c){  BETextFieldUI.addOtherListener(c);  return new BETextPaneUI();}  }
class C{  float ascent(int pos){  if (mSpanned == null) {    return mPaint.ascent();  }  pos+=mStart;  MetricAffectingSpan[] spans=mSpanned.getSpans(pos,pos + 1,MetricAffectingSpan.class);  if (spans.length == 0) {    return mPaint.ascent();  }  TextPaint wp=mWorkPaint;  wp.set(mPaint);  for (  MetricAffectingSpan span : spans) {    span.updateMeasureState(wp);  }  return wp.ascent();}  }
class C{  private void placeFreeHoles(List shellList,List freeHoleList){  for (Iterator it=freeHoleList.iterator(); it.hasNext(); ) {    EdgeRing hole=(EdgeRing)it.next();    if (hole.getShell() == null) {      EdgeRing shell=findEdgeRingContaining(hole,shellList);      if (shell == null)       throw new TopologyException("unable to assign hole to a shell",hole.getCoordinate(0));      hole.setShell(shell);    }  }}  }
class C{  byte[] resizeByteArray(byte[] array,int newLength){  byte[] newArray=new byte[newLength];  int oldLength=array.length;  System.arraycopy(array,0,newArray,0,Math.min(oldLength,newLength));  return newArray;}  }
class C{  public void returnValue(){  mv.visitInsn(returnType.getOpcode(Opcodes.IRETURN));}  }
class C{  public static byte[] toByteArray(Long[] array){  byte[] result=new byte[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i].byteValue();  }  return result;}  }
class C{  public void close() throws IOException {  flushBits();  out.close();}  }
class C{  public static synchronized AnnotatedSequencesReader createDefaultSequencesReader(final File dir,LongRange region) throws IOException {  try {    final DefaultSequencesReader r=new DefaultSequencesReader(dir,region);    logSDF(r);    return r;  } catch (  final FileNotFoundException e) {    if (dir.isDirectory()) {      throw new IOException("The specified SDF, \"" + dir.getPath() + "\", does not seem to contain a valid SDF index");    } else     if (dir.exists()) {      throw new IOException("The specified file, \"" + dir.getPath() + "\", is not an SDF.");    } else {      throw new IOException("The specified SDF, \"" + dir.getPath() + "\", does not exist.");    }  }}  }
class C{  public MqttPublish(byte info,byte[] data) throws MqttException, IOException {  super(MqttWireMessage.MESSAGE_TYPE_PUBLISH);  message=new MqttReceivedMessage();  message.setQos((info >> 1) & 0x03);  if ((info & 0x01) == 0x01) {    message.setRetained(true);  }  if ((info & 0x08) == 0x08) {    ((MqttReceivedMessage)message).setDuplicate(true);  }  ByteArrayInputStream bais=new ByteArrayInputStream(data);  CountingInputStream counter=new CountingInputStream(bais);  DataInputStream dis=new DataInputStream(counter);  topicName=decodeUTF8(dis);  if (message.getQos() > 0) {    msgId=dis.readUnsignedShort();  }  byte[] payload=new byte[data.length - counter.getCounter()];  dis.readFully(payload);  dis.close();  message.setPayload(payload);}  }
class C{  public void decodeJBIG2(String file) throws IOException, JBIG2Exception {  decodeJBIG2(new FileInputStream(file));}  }
class C{  private void purgeClipboard(){  try {    CLIPBOARD.setContents(empty,empty);  } catch (  IllegalStateException isx) {  }}  }
class C{  public VNXeCommandJob deleteLunsFromLunGroup(String lunGroupId,List<String> luns){  LunGroupModifyParam param=new LunGroupModifyParam();  List<LunAddParam> lunDelete=new ArrayList<LunAddParam>();  for (  String lunId : luns) {    VNXeBase lun=new VNXeBase(lunId);    LunAddParam lunAdd=new LunAddParam();    lunAdd.setLun(lun);    lunDelete.add(lunAdd);  }  param.setLunDelete(lunDelete);  LunGroupRequests req=new LunGroupRequests(_khClient);  return req.modifyLunGroupAsync(lunGroupId,param);}  }
class C{  public synchronized int size(){  return providers.size();}  }
class C{  private boolean confirmAndExecuteUsersDeletion(){  ExtensionUserManagement usersExtension=(ExtensionUserManagement)Control.getSingleton().getExtensionLoader().getExtension(ExtensionUserManagement.NAME);  if (usersExtension != null) {    if (usersExtension.getSharedContextUsers(getUISharedContext()).size() > 0) {      authenticationMethodsComboBox.transferFocus();      int choice=JOptionPane.showConfirmDialog(this,Constant.messages.getString("authentication.dialog.confirmChange.label"),Constant.messages.getString("authentication.dialog.confirmChange.title"),JOptionPane.OK_CANCEL_OPTION);      if (choice == JOptionPane.CANCEL_OPTION) {        return false;      }      usersExtension.removeSharedContextUsers(getUISharedContext());    }  }  return true;}  }
class C{  public void createWindowSurface(Object surface){  if (mEGLSurface != EGL14.EGL_NO_SURFACE) {    throw new IllegalStateException("surface already created");  }  mEGLSurface=mEglCore.createWindowSurface(surface);}  }
class C{  public static Profilers instance(){  return Singleton.INSTANCE;}  }
class C{  public static synchronized void progress(final String message){  sLastProgress=message;  final PrintStream prog=getProgressStream();  if (prog != null) {    prog.println(now() + message);    prog.flush();    if (prog.checkError()) {      sProgressStream=null;    }  }}  }
class C{  private static void xstaticSetRandomGenerator(RandomEngine randomGenerator){synchronized (shared) {    shared.setRandomGenerator(randomGenerator);  }}  }
class C{  public boolean hasMoreElements(Instances structure){  boolean result;  result=false;  if (isIncremental()) {    if (m_IncrementalBuffer != null) {      result=true;    } else {      try {        m_IncrementalBuffer=m_Loader.getNextInstance(structure);        result=(m_IncrementalBuffer != null);      } catch (      Exception e) {        e.printStackTrace();        result=false;      }    }  } else {    result=(m_BatchCounter < m_BatchBuffer.numInstances());  }  return result;}  }
class C{  @CanIgnoreReturnValue public CharEscaperBuilder addEscape(char c,String r){  map.put(c,checkNotNull(r));  if (c > max) {    max=c;  }  return this;}  }
class C{  public boolean updateSnap(long dt){  final float step=dt * SNAP_SPEED / 1000.0f;  final float x=updateSnap(step,mRenderX,mX);  final float y=updateSnap(step,mRenderY,mY);  final boolean change=x != mRenderX || y != mRenderY;  mRenderX=x;  mRenderY=y;  return change;}  }
class C{  public static void writeChargingTimes(HashMap<Id<Person>,ChargingTimes> chargingTimes,String outputFilePath){  ArrayList<String> list=new ArrayList<String>();  list.add("linkId\tagentId\tstartChargingTime\tendChargingTime\tstartSOC\tendSOC");  for (  Id<Person> personId : chargingTimes.keySet()) {    ChargingTimes curChargingTime=chargingTimes.get(personId);    String line="";    for (    ChargeLog chargeLog : curChargingTime.getChargingTimes()) {      line="";      line+=chargeLog.getLinkId().toString() + "\t";      line+=personId.toString() + "\t";      line+=chargeLog.getStartChargingTime() + "\t";      line+=chargeLog.getEndChargingTime() + "\t";      line+=chargeLog.getStartSOC() + "\t";      line+=chargeLog.getEndSOC();      list.add(line);    }  }  GeneralLib.writeList(list,outputFilePath);}  }
class C{  public void randomizeNeurons(){  for (  Neuron n : neuronList) {    n.randomize();  }}  }
class C{  final long now(){  return System.nanoTime();}  }
class C{  @Override public Task<Revision> next() throws ArticleReaderException {  this.startTime=System.currentTimeMillis();  Task<Revision> task=super.next();  processingTimeRead+=System.currentTimeMillis() - startTime;  if (task != null) {    if (task.getTaskType() == TaskTypes.TASK_PARTIAL_LAST || task.getTaskType() == TaskTypes.TASK_FULL) {      lastTaskCompleted=true;      ArticleInformation info=task.getHeader();      info.setEnteringTime(enteringTime);      info.setOriginalSize(this.getBytePosition() - taskStartPosition);      info.setProcessingTimeRead(processingTimeRead);      info.setReadRevisionCounter(readRevisionCounter);    } else {      lastTaskCompleted=false;    }  } else {    lastTaskCompleted=true;  }  return task;}  }
class C{  public TransitionsData(Collection<TransitionData<S,E>> transitionsData){  this(transitionsData,null,null,null,null,null,null,null);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.009 -0400",hash_original_method="5F26663935B789F5D9F1572A43B05D98",hash_generated_method="0A8B10A755FBED95A35B2D069F7FFDE0") public final void debug(Object message,Throwable t){  if (isLevelEnabled(SimpleLog.LOG_LEVEL_DEBUG)) {    log(SimpleLog.LOG_LEVEL_DEBUG,message,t);  }}  }
class C{  public double cdf(double x){  throw new RuntimeException("Not yet implemented");}  }
class C{  EclipseNamespaceStack(){  prefixes=new Stack();  uris=new Stack();}  }
class C{  public void processRequest(RequestEvent requestEvent){  Request request=requestEvent.getRequest();  boolean loggerActivated=sLogger.isActivated();  if (loggerActivated) {    sLogger.debug("<<< Receive SIP " + request.getMethod());  }  if (mSipTraceEnabled) {    System.out.println("<<< " + request.toString());    System.out.println(TRACE_SEPARATOR);  }  try {    ServerTransaction transaction=requestEvent.getServerTransaction();    if (transaction == null) {      SipProvider srcSipProvider=(SipProvider)requestEvent.getSource();      transaction=srcSipProvider.getNewServerTransaction(request);    }    SipRequest req=new SipRequest(request);    req.setStackTransaction(transaction);    if (Request.ACK.equals(req.getMethod())) {      String transactionId=SipTransactionContext.getTransactionContextId(req);      notifyTransactionContext(transactionId,req);      return;    }    for (    SipEventListener listener : mListeners) {      listener.receiveSipRequest(req);    }  } catch (  TransactionAlreadyExistsException|TransactionUnavailableException e) {    if (sLogger.isActivated()) {      sLogger.debug(e.getMessage());    }  }}  }
class C{  public static void closeQuietly(Closeable closeable){  if (closeable != null) {    try {      closeable.close();    } catch (    RuntimeException rethrown) {      throw rethrown;    }catch (    Exception ignored) {    }  }}  }
class C{  public CompareToBuilder appendSuper(final int superCompareTo){  if (comparison != 0) {    return this;  }  comparison=superCompareTo;  return this;}  }
class C{  public ForeignKey(String name){  this(name,null);}  }
class C{  public static void e(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_ERROR) {    return;  }  Log.e(tag,msg,throwable);}  }
class C{  protected void updateRadioLinks(){  m_SetTestBut.setEnabled(m_TestSplitBut.isSelected());  if ((m_SetTestFrame != null) && (!m_TestSplitBut.isSelected())) {    m_SetTestFrame.setVisible(false);  }  m_PercentText.setEnabled(m_PercentBut.isSelected());  m_PercentLab.setEnabled(m_PercentBut.isSelected());  m_ClassCombo.setEnabled(m_ClassesToClustersBut.isSelected());  updateCapabilitiesFilter(m_ClustererEditor.getCapabilitiesFilter());}  }
class C{  protected LinesToCharsResult diff_linesToChars(String text1,String text2){  List<String> lineArray=new ArrayList<String>();  Map<String,Integer> lineHash=new HashMap<String,Integer>();  lineArray.add("");  String chars1=diff_linesToCharsMunge(text1,lineArray,lineHash);  String chars2=diff_linesToCharsMunge(text2,lineArray,lineHash);  return new LinesToCharsResult(chars1,chars2,lineArray);}  }
class C{  public int byteSize(){  return this.buffer.length();}  }
class C{  public void SendSettingsKeyToKeypad(){  for (  InputDevice idev : events.m_Devs) {    if (idev.getOpen() && idev.getName().contains("keypad")) {      idev.SendKey(139,true);      idev.SendKey(139,false);    }  }}  }
class C{  static public PrintWriter createWriter(File file){  try {    OutputStream output=new FileOutputStream(file);    if (file.getName().toLowerCase().endsWith(".gz")) {      output=new GZIPOutputStream(output);    }    return createWriter(output);  } catch (  Exception e) {    if (file == null) {      throw new RuntimeException("File passed to createWriter() was null");    } else {      e.printStackTrace();      throw new RuntimeException("Couldn't create a writer for " + file.getAbsolutePath());    }  }}  }
class C{  protected void handleEntityDamage(Entity entityTarget,Vector<Report> vPhaseReport,Building bldg,int hits,int nCluster,int bldgAbsorbs){  int nDamage;  missed=false;  hit=entityTarget.rollHitLocation(toHit.getHitTable(),toHit.getSideTable(),waa.getAimedLocation(),waa.getAimingMode(),toHit.getCover());  hit.setGeneralDamageType(generalDamageType);  hit.setCapital(wtype.isCapital());  hit.setBoxCars(roll == 12);  hit.setCapMisCritMod(getCapMisMod());  hit.setFirstHit(firstHit);  hit.setAttackerId(getAttackerId());  if (weapon.isWeaponGroup()) {    hit.setSingleAV(attackValue);  }  boolean isIndirect=wtype.hasModes() && weapon.curMode().equals("Indirect");  if (!isIndirect && entityTarget.removePartialCoverHits(hit.getLocation(),toHit.getCover(),Compute.targetSideTable(ae,entityTarget,weapon.getCalledShot().getCall()))) {    handlePartialCoverHit(entityTarget,vPhaseReport,hit,bldg,hits,nCluster,bldgAbsorbs);    return;  }  if (!bSalvo) {    Report r=new Report(3405);    r.subject=subjectId;    r.add(toHit.getTableDesc());    r.add(entityTarget.getLocationAbbr(hit));    vPhaseReport.addElement(r);    if (weapon.isRapidfire()) {      r.newlines=0;      r=new Report(3225);      r.subject=subjectId;      r.add(numRapidFireHits * 3);      vPhaseReport.add(r);    }  } else {    Report.addNewline(vPhaseReport);  }  if (hit.hitAimedLocation() && !bSalvo) {    Report r=new Report(3410);    r.subject=subjectId;    vPhaseReport.lastElement().newlines=0;    vPhaseReport.addElement(r);  }  nDamage=nDamPerHit * Math.min(nCluster,hits);  if (bDirect) {    hit.makeDirectBlow(toHit.getMoS() / 3);  }  if (calcDmgPerHitReport.size() > 0) {    vPhaseReport.addAll(calcDmgPerHitReport);  }  if (bldgAbsorbs > 0) {    int toBldg=Math.min(bldgAbsorbs,nDamage);    nDamage-=toBldg;    Report.addNewline(vPhaseReport);    Vector<Report> buildingReport=server.damageBuilding(bldg,toBldg,entityTarget.getPosition());    for (    Report report : buildingReport) {      report.subject=subjectId;    }    vPhaseReport.addAll(buildingReport);  } else   if (bldgAbsorbs == Integer.MIN_VALUE) {    Report.addNewline(vPhaseReport);    Report r=new Report(9976);    r.subject=ae.getId();    r.indent(2);    vPhaseReport.add(r);  } else   if (bldgAbsorbs < 0) {    int toBldg=-bldgAbsorbs;    Report.addNewline(vPhaseReport);    Vector<Report> buildingReport=server.damageBuilding(bldg,toBldg,entityTarget.getPosition());    for (    Report report : buildingReport) {      report.subject=subjectId;    }    vPhaseReport.addAll(buildingReport);  }  nDamage=checkTerrain(nDamage,entityTarget,vPhaseReport);  nDamage=checkLI(nDamage,entityTarget,vPhaseReport);  if (null != bldg) {    nDamage=(int)Math.floor(bldg.getDamageToScale() * nDamage);  }  if (nDamage == 0) {    Report r=new Report(3415);    r.subject=subjectId;    r.indent(2);    r.addDesc(entityTarget);    vPhaseReport.addElement(r);    missed=true;  } else {    if (bGlancing) {      hit.makeGlancingBlow();    }    vPhaseReport.addAll(server.damageEntity(entityTarget,hit,nDamage,false,ae.getSwarmTargetId() == entityTarget.getId() ? DamageType.IGNORE_PASSENGER : damageType,false,false,throughFront,underWater,nukeS2S));    if (hit.hitAimedLocation() && bSalvo) {      Report r=new Report(3410);      r.subject=subjectId;      vPhaseReport.lastElement().newlines=0;      vPhaseReport.addElement(r);    }  }  if ((ae instanceof BattleArmor) && (target instanceof Infantry)) {    nDamPerHit=calcDamagePerHit();  }}  }
class C{  public ActionPanel(final GameData data,final MapPanel map){  m_data=data;  m_map=map;  setLayout(new BoxLayout(this,BoxLayout.Y_AXIS));  setBorder(new EmptyBorder(5,5,0,0));}  }
class C{  private void processFiles() throws CompilationFailedException, IOException, URISyntaxException {  GroovyShell groovy=new GroovyShell(conf);  setupContextClassLoader(groovy);  Script s=groovy.parse(getScriptSource(isScriptFile,script));  if (args.isEmpty()) {    BufferedReader reader=new BufferedReader(new InputStreamReader(System.in));    PrintWriter writer=new PrintWriter(System.out);    try {      processReader(s,reader,writer);    }  finally {      reader.close();      writer.close();    }  } else {    Iterator i=args.iterator();    while (i.hasNext()) {      String filename=(String)i.next();      File file=huntForTheScriptFile(filename);      processFile(s,file);    }  }}  }
class C{  private void processQueue(){  SoftValue sv;  while ((sv=(SoftValue)queue.poll()) != null) {    map.remove(sv.key);  }}  }
class C{  public void createGraphic(GraphicAttributes ga){  init();  stateMachine.setUndefined();  int renderType=OMGraphic.RENDERTYPE_UNKNOWN;  if (ga != null) {    renderType=ga.getRenderType();  }switch (renderType) {case (OMGraphic.RENDERTYPE_LATLON):    text=new OMText(90f,-180f,"Text",OMText.JUSTIFY_LEFT);  break;case (OMGraphic.RENDERTYPE_OFFSET):text=new OMText(90f,-180f,0,0,"Text",OMText.JUSTIFY_LEFT);break;default :text=new OMText(0,0,"Text",OMText.JUSTIFY_LEFT);}if (ga != null) {ga.setTo(text,true);text.setLinePaint(ga.getLinePaint());}assertGrabPoints();}  }
class C{  private CentroidClusterModel assinePoints(CentroidClusterModel model){  double[] values=new double[attributes.size()];  int i=0;  for (  Example example : exampleSet) {    double[] exampleValues=getAsDoubleArray(example,attributes,values);    double nearestDistance=measure.calculateDistance(model.getCentroidCoordinates(0),exampleValues);    int nearestIndex=0;    int id=0;    for (    Centroid cr : model.getCentroids()) {      double distance=measure.calculateDistance(cr.getCentroid(),exampleValues);      if (distance < nearestDistance) {        nearestDistance=distance;        nearestIndex=id;      }      id++;    }    centroidAssignments[i]=nearestIndex;    i++;  }  model.setClusterAssignments(centroidAssignments,exampleSet);  return model;}  }
class C{  public void testUnpackNothingMulti() throws InvalidAdviceException {  BaggageAPIForTest baggage=new BaggageAPIForTest();  baggage.put("bag1",new Object[][]{{"v1","v2"}});  baggage.put("bag2",new Object[][]{});  baggage.put("bag3",new Object[][]{{"v5","v6"}});  EmitAPIForTest results=new EmitAPIForTest();  Advice advice=AdviceTestUtils.newAdvice().observe("a","b").unpack("bag1","c","d").unpack("bag2","e","f").unpack("bag3","g","h").emit("test1","a","b","c","d","e","f","g","h").build(baggage,results);  assertTrue("Expect nothing emitted yet",results.emitted.size() == 0);  advice.advise("vva","vvb");  advice.advise("vva","vvc");  advice.advise("vva","vve");  results.check();  assertTrue("Expect 0 output tuple emitted",results.emitted.size() == 0);}  }
class C{  public boolean isNumberWilling(ContactId contact){  return RcsStatus.PENDING_OUT.equals(getContactSharingStatus(contact));}  }
class C{  protected void diagnose(){  System.err.print("Found multistep iterators: " + this.getLength() + "  ");  MultistepExprHolder next=this;  while (null != next) {    System.err.print("" + next.m_stepCount);    next=next.m_next;    if (null != next)     System.err.print(", ");  }  System.err.println();}  }
class C{  public JSONObject accumulate(String key,Object value) throws JSONException {  testValidity(value);  Object object=this.opt(key);  if (object == null) {    this.put(key,value instanceof JSONArray ? new JSONArray().put(value) : value);  } else   if (object instanceof JSONArray) {    ((JSONArray)object).put(value);  } else {    this.put(key,new JSONArray().put(object).put(value));  }  return this;}  }
class C{  @Override public void init(IWorkbench workbench,IStructuredSelection selection){  this.selection=selection;}  }
class C{  public CodecException(Throwable arg0){  super(arg0);}  }
class C{  @DSComment("URL matching utility") @DSSafe(DSCat.UTIL_FUNCTION) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:39.376 -0500",hash_original_method="4993091A11603906CAD34405800B45EB",hash_generated_method="8CB2911C750473F32C631C38B9D04CC5") public int match(Uri uri){  final List<String> pathSegments=uri.getPathSegments();  final int li=pathSegments.size();  UriMatcher node=this;  if (li == 0 && uri.getAuthority() == null) {    return this.mCode;  }  for (int i=-1; i < li; i++) {    String u=i < 0 ? uri.getAuthority() : pathSegments.get(i);    ArrayList<UriMatcher> list=node.mChildren;    if (list == null) {      break;    }    node=null;    int lj=list.size();    for (int j=0; j < lj; j++) {      UriMatcher n=list.get(j);      which_switch: switch (n.mWhich) {case EXACT:        if (n.mText.equals(u)) {          node=n;        }      break;case NUMBER:    int lk=u.length();  for (int k=0; k < lk; k++) {    char c=u.charAt(k);    if (c < '0' || c > '9') {      break which_switch;    }  }node=n;break;case TEXT:node=n;break;}if (node != null) {break;}}if (node == null) {return NO_MATCH;}}return node.mCode;}  }
class C{  public void dispose(int index){  if (index < 0 || index > m_windows.size())   throw new IllegalArgumentException("Index invalid: " + index);  WBWindow win=(WBWindow)m_windows.get(index);  if (win.mWindow != null)   win.mWindow.dispose();  win.mWindow=null;}  }
class C{  public FormatException(){  super();}  }
class C{  private int compareParameterListPreferability_cmpTypeSpecificty(final Class paramType1,final Class paramType2){  final Class nonPrimParamType1=paramType1.isPrimitive() ? ClassUtil.primitiveClassToBoxingClass(paramType1) : paramType1;  final Class nonPrimParamType2=paramType2.isPrimitive() ? ClassUtil.primitiveClassToBoxingClass(paramType2) : paramType2;  if (nonPrimParamType1 == nonPrimParamType2) {    if (nonPrimParamType1 != paramType1) {      if (nonPrimParamType2 != paramType2) {        return 0;      } else {        return 1;      }    } else     if (nonPrimParamType2 != paramType2) {      return -1;    } else {      return 0;    }  } else   if (nonPrimParamType2.isAssignableFrom(nonPrimParamType1)) {    return 2;  } else   if (nonPrimParamType1.isAssignableFrom(nonPrimParamType2)) {    return -2;  }  if (nonPrimParamType1 == Character.class && nonPrimParamType2.isAssignableFrom(String.class)) {    return 2;  }  if (nonPrimParamType2 == Character.class && nonPrimParamType1.isAssignableFrom(String.class)) {    return -2;  } else {    return 0;  }}  }
class C{  private void writeObject(java.io.ObjectOutputStream out) throws IOException {  out.defaultWriteObject();  Set roleNames=new HashSet(this.missingRoles.size());  for (Iterator iter=this.missingRoles.iterator(); iter.hasNext(); ) {    String name=((Role)iter.next()).getName();    roleNames.add(name);  }  out.writeObject(roleNames);}  }
class C{  public char[] ts2String(double[] vals,double[] cuts){  char[] res=new char[vals.length];  for (int i=0; i < vals.length; i++) {    res[i]=num2char(vals[i],cuts);  }  return res;}  }
class C{  public String name(){  return name;}  }
class C{  private void updateFlagsAndProjectForInternalFileShares(){  DbClient dbClient=this.getDbClient();  List<URI> fileShareKeys=dbClient.queryByType(FileShare.class,false);  Iterator<FileShare> fileShareObjs=dbClient.queryIterativeObjects(FileShare.class,fileShareKeys);  while (fileShareObjs.hasNext()) {    FileShare fs=fileShareObjs.next();    log.debug("Examining FileShare (id={}) for upgrade",fs.getId().toString());    if (fs.getProject() == null) {      fs.setProject(new NamedURI(FileShare.INTERNAL_OBJECT_PROJECT_URN,fs.getLabel()));      fs.addInternalFlags(Flag.INTERNAL_OBJECT,Flag.NO_PUBLIC_ACCESS,Flag.NO_METERING);      dbClient.updateAndReindexObject(fs);      log.info("Converted internal FileShare (id={}) to use internal flags",fs.getId().toString());    }  }}  }
class C{  public static OutputNode write(Writer result) throws Exception {  return write(result,new Format());}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  void foo(){}  }
class C{  public int describeContents(){  return 0;}  }
class C{  public Origin3D(){  this(new Vec3D());}  }
class C{  public static String lookupTag(List<LanguageRange> priorityList,Collection<String> tags){  return null;}  }
class C{  private ExampleSetBasedIndividual searchBest(){  try {    return Collections.max(individuals,PERFORMANCE_COMPARATOR);  } catch (  NullPointerException e) {    return null;  }catch (  NoSuchElementException e) {    return null;  }}  }
class C{  public SoftReference(T referent,ReferenceQueue<? super T> q){  super(referent,q);  this.timestamp=clock;}  }
class C{  protected static String dockerMachineCertsDirectoryPath(@NotNull Map<String,String> env){  Objects.requireNonNull(env,"Required non-null env variables");  String certPath=env.get(DOCKER_CERT_PATH_PROPERTY);  if (certPath != null) {    if (new File(certPath).exists()) {      return certPath;    } else {      LOG.error(String.format("The directory provided by property %s doesn't exists. Returning default value",certPath));    }  }  return DEFAULT_DOCKER_MACHINE_CERTS_DIR;}  }
class C{  @Override @CanIgnoreReturnValue public boolean add(E e){  checkNotNull(e);  if (maxSize == 0) {    return true;  }  if (size() == maxSize) {    delegate.remove();  }  delegate.add(e);  return true;}  }
class C{  public static void applyLightingDirectionalFromViewer(GL2 gl,int light,Vec4 direction){  if (gl == null) {    String message=Logging.getMessage("nullValue.GLIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (direction == null)   direction=DEFAULT_LIGHT_DIRECTION;  float[] ambient={1f,1f,1f,0f};  float[] diffuse={1f,1f,1f,0f};  float[] specular={1f,1f,1f,0f};  float[] position={(float)direction.x,(float)direction.y,(float)direction.z,0.0f};  gl.glLightfv(light,GL2.GL_AMBIENT,ambient,0);  gl.glLightfv(light,GL2.GL_DIFFUSE,diffuse,0);  gl.glLightfv(light,GL2.GL_SPECULAR,specular,0);  OGLStackHandler ogsh=new OGLStackHandler();  ogsh.pushModelviewIdentity(gl);  try {    gl.glLightfv(light,GL2.GL_POSITION,position,0);  }  finally {    ogsh.pop(gl);  }}  }
class C{  protected String defaultClassifierString(){  return "weka.classifiers.trees.RandomTree";}  }
class C{  public synchronized void close(){  done=true;  if (socket != null) {    try {      socket.close();    } catch (    IOException e) {      logger.warn(e.getMessage());    } finally {      socket=null;    }  }}  }
class C{  public static void decodeToFile(String dataToDecode,String filename) throws java.io.IOException {  Base64.OutputStream bos=null;  try {    bos=new Base64.OutputStream(new java.io.FileOutputStream(filename),Base64.DECODE);    bos.write(dataToDecode.getBytes(PREFERRED_ENCODING));  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bos.close();    } catch (    Exception e) {    }  }}  }
class C{  public int doFinal(byte[] out,int outOff) throws DataLengthException, IllegalStateException, InvalidCipherTextException {  try {    int resultLen=0;    if (outOff + bufOff > out.length) {      throw new OutputLengthException("output buffer too short for doFinal()");    }    if (bufOff != 0) {      if (!partialBlockOkay) {        throw new DataLengthException("data not block size aligned");      }      cipher.processBlock(buf,0,buf,0);      resultLen=bufOff;      bufOff=0;      System.arraycopy(buf,0,out,outOff,resultLen);    }    return resultLen;  }  finally {    reset();  }}  }
class C{  public static void w(String tag,String msg){  if (sLevel > LEVEL_WARNING) {    return;  }  Log.w(tag,msg);}  }
class C{  protected void initNewTask(final int taskID){  super.initNewTask(taskID);  this.processingTimeDiff=0;  this.revisionCounter=0;  this.ignoredRevisionsCounter=0;  this.diffPartCounter=0;  this.diffedSize=0;}  }
class C{  public long[] toNativeArray(int offset,int len){  long[] rv=new long[len];  toNativeArray(rv,offset,len);  return rv;}  }
class C{  public final boolean equals(ObjectIdentifier id){  return algid.equals((Object)id);}  }
class C{  private void updateButtons(){  boolean enabled=somethingSelected();  useAllButton.setEnabled(enabled);  useTitleButton.setEnabled(enabled);  useGameButton.setEnabled(enabled);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static FontImage createFixed(String text,Font fnt,int color,int width,int height){  FontImage f=new FontImage();  f.text=text;  f.color=color;  f.width=width;  f.fnt=sizeFont(fnt,Math.min(width,height),f.padding);  f.height=height;  return f;}  }
class C{  public OButton(final Composite parent,final int style){  super(parent,checkStyle(style) | SWT.DOUBLE_BUFFERED);  this.selectionListeners=new ArrayList<SelectionListener>();  this.buttonRenderer=DefaultButtonRenderer.getInstance();  this.width=this.height=-1;  addListeners();}  }
class C{  public static ProductFragment newInstance(long productId){  Bundle args=new Bundle();  args.putLong(PRODUCT_ID,productId);  ProductFragment fragment=new ProductFragment();  fragment.setArguments(args);  return fragment;}  }
class C{  public static KeyStore loadKeystore(final String keyStoreFile,final String keyStorePassword,final KeyStoreTypeEnum keyStoreType) throws IOException, KeyStoreException, NoSuchAlgorithmException, CertificateException {  final FileInputStream inputStream=new FileInputStream(keyStoreFile);  KeyStore keyStore;  try {    keyStore=getKeyStoreInstance(keyStoreType);    keyStore.load(inputStream,keyStorePassword.toCharArray());  }  finally {    if (inputStream != null) {      inputStream.close();    }  }  return keyStore;}  }
class C{  public GCIRMapElement createTwin(Instruction inst){  return new GCIRMapElement(inst,this.regSpillList);}  }
class C{  public static int hashThem(Object one,Object two){  return hashIt(one) | hashIt(two);}  }
class C{  protected int writeObject(STWriter out,InstanceScope scope,Object o,String[] options){  int n=0;  if (o == null) {    if (options != null && options[Option.NULL.ordinal()] != null) {      o=options[Option.NULL.ordinal()];    } else     return 0;  }  if (o instanceof ST) {    scope=new InstanceScope(scope,(ST)o);    if (options != null && options[Option.WRAP.ordinal()] != null) {      try {        out.writeWrap(options[Option.WRAP.ordinal()]);      } catch (      IOException ioe) {        errMgr.IOError(scope.st,ErrorType.WRITE_IO_ERROR,ioe);      }    }    n=exec(out,scope);  } else {    o=convertAnythingIteratableToIterator(scope,o);    try {      if (o instanceof Iterator)       n=writeIterator(out,scope,o,options); else       n=writePOJO(out,scope,o,options);    } catch (    IOException ioe) {      errMgr.IOError(scope.st,ErrorType.WRITE_IO_ERROR,ioe,o);    }  }  return n;}  }
class C{  public HyperlinkEvent(Object source,EventType type,URL u,String desc,Element sourceElement,InputEvent inputEvent){  super(source);  this.type=type;  this.u=u;  this.desc=desc;  this.sourceElement=sourceElement;  this.inputEvent=inputEvent;}  }
class C{  private void labelIsolatedEdge(Edge e,int targetIndex,Geometry target){  if (target.getDimension() > 0) {    int loc=ptLocator.locate(e.getCoordinate(),target);    e.getLabel().setAllLocations(targetIndex,loc);  } else {    e.getLabel().setAllLocations(targetIndex,Location.EXTERIOR);  }}  }
class C{  public AbstractNumberConstraint(Number constraintValue){  this.constraintValue=constraintValue;}  }
class C{  public CF3(int numberOfVariables){  super(numberOfVariables,2,1);}  }
class C{  public void close(){  if (size() == 0 || get(size() - 1).type == SegType.CLOSE) {    throw new IllegalPathStateException("close is only allowed when a path segment is open");  }  add(new Segment(SegType.CLOSE));}  }
class C{  public InverseGammaDistributionModel(Variable<Double> shape,Variable<Double> scale){  super(INVERSE_GAMMA_DISTRIBUTION_MODEL);  this.shape=shape;  this.scale=scale;  addVariable(shape);  shape.addBounds(new Parameter.DefaultBounds(Double.POSITIVE_INFINITY,0.0,1));  addVariable(scale);  scale.addBounds(new Parameter.DefaultBounds(Double.POSITIVE_INFINITY,0.0,1));}  }
class C{  @Override public boolean equals(Object object){  return object == null || object == this;}  }
class C{  @SuppressWarnings("unchecked") private void prepareBlockDropDownData(final boolean wardExists,final boolean blockExists){  if (LOGGER.isDebugEnabled()) {    LOGGER.debug("Entered into prepareBlockDropDownData method");    LOGGER.debug("Ward Exists ? : " + wardExists + ", "+ "Block Exists ? : "+ blockExists);  }  if (wardExists && blockExists) {    List<Boundary> blockList=new ArrayList<Boundary>();    blockList=boundaryService.getActiveChildBoundariesByBoundaryId(getWardId());    addDropdownData("blockList",blockList);  } else   addDropdownData("blockList",Collections.EMPTY_LIST);  if (LOGGER.isDebugEnabled())   LOGGER.debug("Exit from prepareWardDropDownData method");}  }
class C{  protected void afterStarting(PLIView view,PLIPanorama currentPanorama,PLIPanorama newPanorama,PLICamera currentPanoramaCamera,PLICamera newPanoramaCamera){  mNewPanoramaBlendStep=newPanorama.getDefaultAlpha() / (this.getInterval() * this.iterationsPerSecond());  newPanorama.setAlpha(0.0f);  currentPanoramaCamera.clonePropertiesOf(currentPanorama.getCamera());  newPanoramaCamera.clonePropertiesOf(newPanorama.getCamera());  if (mZoomFactor != -1.0f && mZoomFactor > currentPanoramaCamera.getZoomFactor())   currentPanoramaCamera.setZoomFactor(mZoomFactor,true);}  }
class C{  protected void exceptionReceivedFromServer(Exception ex) throws Exception {  serverException=ex;  StackTraceElement[] serverTrace=ex.getStackTrace();  StackTraceElement[] clientTrace=(new Throwable()).getStackTrace();  StackTraceElement[] combinedTrace=new StackTraceElement[serverTrace.length + clientTrace.length];  System.arraycopy(serverTrace,0,combinedTrace,0,serverTrace.length);  System.arraycopy(clientTrace,0,combinedTrace,serverTrace.length,clientTrace.length);  ex.setStackTrace(combinedTrace);  if (UnicastRef.clientCallLog.isLoggable(Log.BRIEF)) {    TCPEndpoint ep=(TCPEndpoint)conn.getChannel().getEndpoint();    UnicastRef.clientCallLog.log(Log.BRIEF,"outbound call " + "received exception: [" + ep.getHost() + ":"+ ep.getPort()+ "] exception: ",ex);  }  throw ex;}  }
class C{  private void fetchCoreHealthStatus(Map<String,Map<String,String>> sourceCollectionToNodeMap,Set<SolrCore> cluterCoresStatus,String sourceCollection){  Map<String,String> sourceCoreToNodeMap=sourceCollectionToNodeMap.get(sourceCollection);  for (  String core : sourceCoreToNodeMap.keySet()) {    String sourceNode=sourceCoreToNodeMap.get(core);    SolrCore sourceSolrCore=new SolrCore(sourceNode,core);    try {      sourceSolrCore.loadStatus();    } catch (    Exception e) {      logger.info("Core " + sourceSolrCore.name + " is unhealthy/unavailable...");      sourceSolrCore.available=false;    } finally {      cluterCoresStatus.add(sourceSolrCore);    }  }}  }
class C{  public static boolean isAbsoluteURI(String systemId){  if (isWindowsAbsolutePath(systemId)) {    return false;  }  final int fragmentIndex=systemId.indexOf('#');  final int queryIndex=systemId.indexOf('?');  final int slashIndex=systemId.indexOf('/');  final int colonIndex=systemId.indexOf(':');  int index=systemId.length() - 1;  if (fragmentIndex > 0)   index=fragmentIndex;  if ((queryIndex > 0) && (queryIndex < index))   index=queryIndex;  if ((slashIndex > 0) && (slashIndex < index))   index=slashIndex;  return ((colonIndex > 0) && (colonIndex < index));}  }
class C{  public void addComponent(String includeClass){  classes.add(includeClass);}  }
class C{  private boolean validTenderDate(){  if (abstractEstimate != null)   return abstractEstimate != null && tenderHeader != null && tenderHeader.getTenderDate() != null && abstractEstimate.getCurrentState().getCreatedDate() != null && abstractEstimate.getCurrentState().getValue().equalsIgnoreCase(WorksConstants.END) && !DateConversionUtil.isBeforeByDate(tenderHeader.getTenderDate(),abstractEstimate.getCurrentState().getCreatedDate()) && !DateConversionUtil.isBeforeByDate(new Date(),tenderHeader.getTenderDate());  if (worksPackage != null)   return worksPackage != null && tenderHeader != null && tenderHeader.getTenderDate() != null && worksPackage.getCurrentState().getCreatedDate() != null && worksPackage.getEgwStatus().getCode().equalsIgnoreCase(WorksPackage.WorkPacakgeStatus.APPROVED.toString()) && !DateConversionUtil.isBeforeByDate(tenderHeader.getTenderDate(),worksPackage.getWpDate()) && !DateConversionUtil.isBeforeByDate(new Date(),tenderHeader.getTenderDate());  return Boolean.TRUE;}  }
class C{  @SmallTest public void testInBeamTrumpsOutOfBeamOverlapping(){  assertBetterCandidate(View.FOCUS_DOWN,new Rect(0,0,50,50),new Rect(0,60,50,110),new Rect(51,1,101,51));}  }
class C{  public Plane(final double x,final double y){  super(y,-x,0.0);  D=0.0;}  }
class C{  @VisibleForTesting void doHandle(ConfigEvent event,Context context,AmazonConfig configClient) throws IOException {  JsonNode invokingEvent=OBJECT_MAPPER.readTree(event.getInvokingEvent());  failForIncompatibleEventTypes(invokingEvent);  Evaluation evaluation=new Evaluation().withComplianceResourceId(getResourceId(invokingEvent)).withComplianceResourceType(getResourceType(invokingEvent)).withOrderingTimestamp(getCiCapturedTime(invokingEvent)).withComplianceType(evaluateCompliance(event));  doPutEvaluations(configClient,event,evaluation);}  }
class C{  public boolean isIscsiSupported(){  return iscsiSupported;}  }
class C{  public void dropComplete(boolean success) throws InvalidDnDOperationException {  DropTargetContextPeer peer=getDropTargetContextPeer();  if (peer != null) {    peer.dropComplete(success);  }}  }
class C{  public QuarterDateFormat(TimeZone zone){  this(zone,REGULAR_QUARTERS);}  }
class C{  public static Compressor compressor(int pcmID){  return compressorRegistrar.fetch(pcmID,Compressor.class,null);}  }
class C{  public static void main(String[] args){  Application app;  String os=System.getProperty("os.name").toLowerCase();  if (os.startsWith("mac")) {    app=new OSXApplication();  } else   if (os.startsWith("win")) {    app=new SDIApplication();  } else {    app=new SDIApplication();  }  DefaultApplicationModel model=new PertApplicationModel();  model.setName("JHotDraw Pert");  model.setVersion(Main.class.getPackage().getImplementationVersion());  model.setCopyright("Copyright 2006-2010 (c) by the authors of JHotDraw and all its contributors.\n" + "This software is licensed under LGPL and Creative Commons 3.0 Attribution.");  model.setViewClassName("org.jhotdraw.samples.pert.PertView");  app.setModel(model);  app.launch(args);}  }
class C{  public static MockThreeAxisAccelerometer accelerometer3Axis(){  return new MockThreeAxisAccelerometer();}  }
class C{  private static HeaderElement generalizeMIMEType(HeaderElement mimeTypeElem){  int parameterCount=mimeTypeElem.getParameterCount();  if (parameterCount > 0) {    mimeTypeElem.removeParameter(parameterCount - 1);  } else {    String mimeType=mimeTypeElem.getValue();    int slashIdx=mimeType.indexOf('/');    if (slashIdx > 0) {      String type=mimeType.substring(0,slashIdx);      String subType=mimeType.substring(slashIdx + 1);      if (!subType.equals("*")) {        mimeTypeElem.setValue(type + "/*");      } else       if (!type.equals("*")) {        mimeTypeElem.setValue("*/*");      } else {        mimeTypeElem=null;      }    } else {      mimeTypeElem=null;    }  }  return mimeTypeElem;}  }
class C{  public static HashMap<CellIndex,Double> readDMLMatrixFromHDFS(String filePath){  HashMap<CellIndex,Double> expectedValues=new HashMap<CellIndex,Double>();  try {    FileSystem fs=FileSystem.get(conf);    Path outDirectory=new Path(filePath);    String line;    FileStatus[] outFiles=fs.listStatus(outDirectory);    for (    FileStatus file : outFiles) {      FSDataInputStream outIn=fs.open(file.getPath());      BufferedReader reader=new BufferedReader(new InputStreamReader(outIn));      while ((line=reader.readLine()) != null) {        StringTokenizer st=new StringTokenizer(line," ");        int i=Integer.parseInt(st.nextToken());        int j=Integer.parseInt(st.nextToken());        double v=Double.parseDouble(st.nextToken());        expectedValues.put(new CellIndex(i,j),v);      }      outIn.close();    }  } catch (  IOException e) {    assertTrue("could not read from file " + filePath,false);  }  return expectedValues;}  }
class C{  @Override public CallableStatement prepareCall(String sql,int resultSetType,int resultSetConcurrency) throws SQLException {  try {    int id=getNextId(TraceObject.CALLABLE_STATEMENT);    if (isDebugEnabled()) {      debugCodeAssign("CallableStatement",TraceObject.CALLABLE_STATEMENT,id,"prepareCall(" + quote(sql) + ", "+ resultSetType+ ", "+ resultSetConcurrency+ ")");    }    checkTypeConcurrency(resultSetType,resultSetConcurrency);    checkClosed();    sql=translateSQL(sql);    return new JdbcCallableStatement(this,sql,id,resultSetType,resultSetConcurrency);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public ImmutableClassToInstanceMap<B> build(){  ImmutableMap<Class<? extends B>,B> map=mapBuilder.build();  if (map.isEmpty()) {    return of();  } else {    return new ImmutableClassToInstanceMap<B>(map);  }}  }
class C{  public void startCollect(IgniteEx ignite,String visorKey){synchronized (listenVisor) {    if (cleanupStopped) {      scheduleCleanupJob(ignite);      cleanupStopped=false;    }    listenVisor.put(visorKey,true);    ignite.events().enableLocal(VISOR_TASK_EVTS);  }}  }
class C{  public void replace(String statement) throws CannotCompileException {  try {    replace2(statement);  } catch (  CompileError e) {    throw new CannotCompileException(e);  }catch (  NotFoundException e) {    throw new CannotCompileException(e);  }catch (  BadBytecode e) {    throw new CannotCompileException("broken method");  }}  }
class C{  public Version(Class<? extends Service> serviceClass,int major,int minor,Version... impliedVersions) throws NullPointerException, IllegalArgumentException {  if (serviceClass == null) {    throw new NullPointerException("Null service class");  }  if (major < 0 && major != ANY) {    throw new IllegalArgumentException("Invalid major version:" + major);  }  if (minor < 0 && minor != ANY) {    throw new IllegalArgumentException("Invalid minor version:" + minor);  }  this.serviceClass=serviceClass;  this.major=major;  this.minor=minor;  computeImpliedVersions(impliedVersions);}  }
class C{  public void submitCloudletList(List<? extends NetworkCloudlet> list){  getCloudletList().addAll(list);}  }
class C{  public static <V,E>Graph<V,E> synchronizedGraph(Graph<V,E> graph){  return new SynchronizedGraph<V,E>(graph);}  }
class C{  @Override public CharsRef clone(){  return new CharsRef(chars,offset,length);}  }
class C{  public void info(CharSequence message,Throwable e){  log(Level.INFO,message,e);}  }
class C{  DangerIndicator(int maxSkulls){  setLayout(new SBoxLayout(SBoxLayout.HORIZONTAL));  indicators=new JComponent[maxSkulls];  for (int i=0; i < maxSkulls; i++) {    JLabel indicator=new JLabel(skullIcon);    indicator.setVisible(false);    add(indicator);    indicators[i]=indicator;  }}  }
class C{  public static <A>List<A> of(A x1,A x2,A x3){  return new List<A>(x1,of(x2,x3));}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (obj instanceof XYItemEntity && super.equals(obj)) {    XYItemEntity ie=(XYItemEntity)obj;    if (this.series != ie.series) {      return false;    }    if (this.item != ie.item) {      return false;    }    return true;  }  return false;}  }
class C{  public void externalEntityDecl(String name,String publicId,String systemId) throws SAXException {  if (DEBUG)   System.out.println("TransformerHandlerImpl#externalEntityDecl: " + name + ", "+ publicId+ ", "+ systemId);  if (null != m_declHandler) {    m_declHandler.externalEntityDecl(name,publicId,systemId);  }}  }
class C{  @Override public void run(int connId,String[] args){  if (!canRunRestrictedCommand(connId)) {    server.sendServerChat(connId,"Observers are restricted from resetting.");    return;  }  if (!server.isPassworded() || (args.length > 1 && server.isPassword(args[1]))) {    reset(connId);  } else {    server.sendServerChat(connId,"The password is incorrect.  Usage: /reset <password>");  }}  }
class C{  @Override public Date parse(String source,ParsePosition pos){  return null;}  }
class C{  public TypeScriptAnnotationIterator(Iterator<Annotation> iterator,boolean skipIrrelevants,boolean returnAllAnnotations){  fReturnAllAnnotations=returnAllAnnotations;  fIterator=iterator;  fSkipIrrelevants=skipIrrelevants;  skip();}  }
class C{  private void handleIllegalStateException(Exception ex){  handleGenericException(ex);}  }
class C{  protected void removeTag(short tagId){  mExifTags.remove(tagId);}  }
class C{  private static String property(String string){  int length=string.length();  if (length == 0) {    return "";  } else   if (length == 1) {    return string.toLowerCase();  } else {    return string.substring(0,1).toLowerCase() + string.substring(1);  }}  }
class C{  @Override protected void onSetChannelLimit(String target,String sourceNick,String sourceLogin,String sourceHostname,int limit){  Message message=new Message(service.getString(R.string.message_set_channel_limit,sourceNick,limit));  message.setColor(Message.COLOR_BLUE);  server.getConversation(target).addMessage(message);  service.sendBroadcast(Broadcast.createConversationIntent(Broadcast.CONVERSATION_MESSAGE,server.getId(),target));}  }
class C{  @Override public void onSuccess(IMqttToken asyncActionToken){switch (action) {case CONNECT:    connect();  break;case DISCONNECT:disconnect();break;case SUBSCRIBE:subscribe();break;case PUBLISH:publish();break;}}  }
class C{  public static void main(String[] args){  showPanel(new JythonPanel(),args);}  }
class C{  public boolean isSwipeable(){  return mSwipeable;}  }
class C{  public Matrix fitScreen(){  Matrix save=new Matrix();  save.set(mMatrixTouch);  float[] vals=new float[9];  save.getValues(vals);  vals[Matrix.MTRANS_X]=0f;  vals[Matrix.MTRANS_Y]=0f;  vals[Matrix.MSCALE_X]=1f;  vals[Matrix.MSCALE_Y]=1f;  save.setValues(vals);  return save;}  }
class C{  private DestinationTable(Builder b){  table=b.table.clone();  type=b.type;  writeDisposition=b.writeDisposition;}  }
class C{  public boolean equals(Object obj){  if (obj instanceof mxPoint) {    mxPoint pt=(mxPoint)obj;    return pt.getX() == getX() && pt.getY() == getY();  }  return false;}  }
class C{  private boolean evaluate(List<String> eq,List<Integer> qty,ExpNode n){  if (n.children.size() == 0) {    Iterator<String> eqIter=eq.iterator();    Iterator<Integer> qtyIter=qty.iterator();    while (eqIter.hasNext()) {      String currEq=eqIter.next();      int currQty=qtyIter.next();      if (currEq.equals(n.name) && currQty >= n.qty)       return true;    }    return false;  }  boolean retVal;  if (n.operation == BoolOp.AND)   retVal=true; else   retVal=false;  Iterator<ExpNode> childIter=n.children.iterator();  while (childIter.hasNext()) {    ExpNode child=childIter.next();    if (n.operation == BoolOp.AND)     retVal=retVal && evaluate(eq,qty,child); else     retVal=retVal || evaluate(eq,qty,child);  }  return retVal;}  }
class C{  public boolean computeScrollOffset(){  return mScroller.computeScrollOffset();}  }
class C{  @Override public void onMouseUp(MouseUpEvent event){}  }
class C{  protected void parse(DataInputStream stream) throws Exception {  value=stream.readUTF();}  }
class C{  public Task delete(String id) throws IOException {  String path=String.format("%s/%s",getBasePath(),id);  HttpResponse response=this.restClient.perform(RestClient.Method.DELETE,path,null);  this.restClient.checkResponse(response,HttpStatus.SC_CREATED);  return parseTaskFromHttpResponse(response);}  }
class C{  protected void reestimateAlpha(int selectedBasis){  alpha[selectedBasis]=s * s / (q * q - s);}  }
class C{  public Groestl384(){  super();}  }
class C{  public static Token newInteger(String text,int startLine,int startColumn){  return new Token(Types.INTEGER_NUMBER,text,startLine,startColumn);}  }
class C{  public NodeC(CategoricalResults crResult){  super();  this.crResult=crResult;  children=null;}  }
class C{  final public SyntaxTreeNode OldSubstitution() throws ParseException {  SyntaxTreeNode zn[]=new SyntaxTreeNode[3];  SyntaxTreeNode tn=null;  Token t;  anchor=null;  String n;  bpa("Substitution");switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case IDENTIFIER:    tn=Identifier();  zn[0]=tn;break;case op_76:case op_26:case op_29:case op_58:case CASESEP:case op_61:case op_112:case op_113:case op_114:case op_115:case op_116:tn=NonExpPrefixOp();zn[0]=tn;break;case op_1:case AND:case op_3:case op_4:case OR:case op_6:case op_7:case op_8:case op_9:case op_10:case op_11:case op_12:case op_13:case op_14:case op_15:case op_16:case op_17:case op_18:case op_19:case IN:case op_21:case op_22:case op_23:case op_24:case op_25:case op_27:case op_30:case op_31:case op_32:case op_33:case op_34:case op_35:case op_36:case op_37:case op_38:case op_39:case op_40:case op_41:case op_42:case op_43:case op_44:case op_45:case op_46:case op_47:case op_48:case op_49:case op_50:case op_51:case op_52:case op_53:case op_54:case op_55:case op_56:case op_59:case op_62:case op_63:case op_64:case EQUALS:case op_66:case op_67:case op_71:case op_72:case op_73:case op_74:case op_75:case op_77:case op_78:case op_79:case op_80:case op_81:case op_82:case op_83:case op_84:case op_85:case op_86:case op_87:case op_88:case op_89:case op_90:case op_91:case op_92:case op_93:case op_94:case op_95:case op_96:case op_97:case op_98:case op_100:case op_101:case op_102:case op_103:case op_104:case op_105:case op_106:case op_107:case op_108:case op_109:case op_110:case op_111:case op_117:case op_118:case op_119:tn=InfixOp();zn[0]=tn;break;case op_57:case op_68:case op_69:case op_70:tn=PostfixOp();zn[0]=tn;break;default :jj_la1[36]=jj_gen;jj_consume_token(-1);throw new ParseException();}expecting="<-";t=jj_consume_token(SUBSTITUTE);n=tn.getImage();zn[1]=new SyntaxTreeNode(mn,t);expecting="Expression or Op. Symbol";try {if (jj_2_13(2147483647)) {t=jj_consume_token(op_76);SyntaxTreeNode zzn[]=new SyntaxTreeNode[2];zzn[0]=new SyntaxTreeNode(mn,N_IdPrefix,new SyntaxTreeNode[0]);zzn[1]=new SyntaxTreeNode(mn,N_NonExpPrefixOp,t);tn=new SyntaxTreeNode(mn,N_GenNonExpPrefixOp,zzn);} else if (jj_2_14(1)) {tn=Expression();} else {switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case LAMBDA:tn=Lambda();break;default :jj_la1[37]=jj_gen;jj_consume_token(-1);throw new ParseException();}}} catch (ParseException e) {if (OperatorStack.isWellReduced()) OperatorStack.popStack(); else {if (true) throw e;}if ((anchor != null) && (anchor.isKind(N_GenPrefixOp) || anchor.isKind(N_GenInfixOp) || anchor.isKind(N_GenPostfixOp)|| anchor.isKind(N_GenNonExpPrefixOp))) {tn=anchor;anchor=null;} else {if (true) throw e;}}epa();zn[2]=tn;{if (true) return new SyntaxTreeNode(mn,N_Substitution,zn);}throw new Error("Missing return statement in function");}  }
class C{  private double match_bitapScore(int e,int x,int loc,String pattern){  float accuracy=(float)e / pattern.length();  int proximity=Math.abs(loc - x);  if (Match_Distance == 0) {    return proximity == 0 ? accuracy : 1.0;  }  return accuracy + (proximity / (float)Match_Distance);}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public void updateNCharacterStream(String columnLabel,java.io.Reader reader) throws SQLException {  throw new SQLFeatureNotSupportedException(resBundle.handleGetObject("cachedrowsetimpl.featnotsupp").toString());}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void derEncode(OutputStream out) throws IOException {  DerOutputStream tmp=new DerOutputStream();  DerOutputStream tmp2=new DerOutputStream();  tmp.putOID(oid);  value.encode(tmp);  tmp2.write(DerValue.tag_Sequence,tmp);  out.write(tmp2.toByteArray());}  }
class C{  @Override public Variable emitConditionalMove(PlatformKind cmpKind,Value left,Value right,Condition cond,boolean unorderedIsTrue,Value trueValue,Value falseValue){  boolean mirrored=emitCompare(cmpKind,left,right,cond,unorderedIsTrue);  Condition finalCondition=mirrored ? cond.mirror() : cond;  boolean finalUnorderedIsTrue=mirrored ? !unorderedIsTrue : unorderedIsTrue;  ConditionFlag cmpCondition=toConditionFlag(((AArch64Kind)cmpKind).isInteger(),finalCondition,finalUnorderedIsTrue);  Variable result=newVariable(trueValue.getValueKind());  append(new CondMoveOp(result,cmpCondition,loadReg(trueValue),loadReg(falseValue)));  return result;}  }
class C{  public void paintComponent(Graphics g){  if (getFrame() != null) {    setState(getFrame().getExtendedState());  }  JRootPane rootPane=getRootPane();  Window window=getWindow();  boolean leftToRight=(window == null) ? rootPane.getComponentOrientation().isLeftToRight() : window.getComponentOrientation().isLeftToRight();  boolean isSelected=(window == null) ? true : window.isActive();  int width=getWidth();  int height=getHeight();  Color background;  Color foreground;  Color darkShadow;  MetalBumps bumps;  if (isSelected) {    background=activeBackground;    foreground=activeForeground;    darkShadow=activeShadow;    bumps=activeBumps;  } else {    background=inactiveBackground;    foreground=inactiveForeground;    darkShadow=inactiveShadow;    bumps=inactiveBumps;  }  g.setColor(background);  g.fillRect(0,0,width,height);  g.setColor(darkShadow);  g.drawLine(0,height - 1,width,height - 1);  g.drawLine(0,0,0,0);  g.drawLine(width - 1,0,width - 1,0);  int xOffset=leftToRight ? 5 : width - 5;  if (getWindowDecorationStyle() == JRootPane.FRAME) {    xOffset+=leftToRight ? IMAGE_WIDTH + 5 : -IMAGE_WIDTH - 5;  }  String theTitle=getTitle();  if (theTitle != null) {    FontMetrics fm=SwingUtilities2.getFontMetrics(rootPane,g);    g.setColor(foreground);    int yOffset=((height - fm.getHeight()) / 2) + fm.getAscent();    Rectangle rect=new Rectangle(0,0,0,0);    if (iconifyButton != null && iconifyButton.getParent() != null) {      rect=iconifyButton.getBounds();    }    int titleW;    if (leftToRight) {      if (rect.x == 0) {        rect.x=window.getWidth() - window.getInsets().right - 2;      }      titleW=rect.x - xOffset - 4;      theTitle=SwingUtilities2.clipStringIfNecessary(rootPane,fm,theTitle,titleW);    } else {      titleW=xOffset - rect.x - rect.width- 4;      theTitle=SwingUtilities2.clipStringIfNecessary(rootPane,fm,theTitle,titleW);      xOffset-=SwingUtilities2.stringWidth(rootPane,fm,theTitle);    }    int titleLength=SwingUtilities2.stringWidth(rootPane,fm,theTitle);    SwingUtilities2.drawString(rootPane,g,theTitle,xOffset,yOffset);    xOffset+=leftToRight ? titleLength + 5 : -5;  }  int bumpXOffset;  int bumpLength;  if (leftToRight) {    bumpLength=width - buttonsWidth - xOffset- 5;    bumpXOffset=xOffset;  } else {    bumpLength=xOffset - buttonsWidth - 5;    bumpXOffset=buttonsWidth + 5;  }  int bumpYOffset=3;  int bumpHeight=getHeight() - (2 * bumpYOffset);  bumps.setBumpArea(bumpLength,bumpHeight);  bumps.paintIcon(this,g,bumpXOffset,bumpYOffset);}  }
class C{  public void initialize(){  addDots(0);}  }
class C{  public static ReuseResult loadReuse(byte[] data,Bitmap dest) throws ImageLoadException {  return loadBitmapReuse(new MemorySource(data),dest);}  }
class C{  @SuppressWarnings("rawtypes") public static void assertIsEmpty(final Collection objs) throws Exception {  if ((objs != null) && !objs.isEmpty()) {    throw new AssertionFailedError("Collection is empty");  }}  }
class C{  protected void appendAndPush(StylesheetHandler handler,ElemTemplateElement elem) throws SAXException {  super.appendAndPush(handler,elem);  elem.setDOMBackPointer(handler.getOriginatingNode());  handler.getStylesheet().setTemplate((ElemTemplate)elem);}  }
class C{  public int callInt(String key){  Double d=(Double)call(key);  return d.intValue();}  }
class C{  public void test_EXPORT_TURTLE_RDR() throws Exception {  if (!BigdataStatics.runKnownBadTests) {    return;  }  final long ntriples=3L;  InputStream is=null;  try {    is=new FileInputStream(new File(packagePath + "rdr_01.ttlx"));    final AddOp add=new AddOp(is,ServiceProviderHook.TURTLE_RDR);    assertEquals(ntriples,m_repo.add(add));  }  finally {    if (is != null) {      is.close();    }  }  fail("write export test for TURTLE-RDR");}  }
class C{  private String findCharsetNameFor(String[] aliases){  String cs=null;  String res=null;  for (  String a : aliases) {    final String k=a.toUpperCase();    String cachedCs=charsetMap.get(k);    if (cs == null) {      cs=cachedCs;    }    if (cachedCs != null && cs != null && !Charset.forName(cachedCs).name().equals(Charset.forName(cs).name())) {      throw new ConflictingCharsetError(a,cs,cachedCs);    }    try {      final String rcs=Charset.forName(a).name();      if (cs != null && !Charset.forName(cs).name().equals(rcs)) {        throw new ConflictingCharsetError(a,cs,rcs);      }      if (res == null) {        if (a.equals(aliases[0])) {          res=a;        } else {          res=cs;        }      }      cs=rcs;      charsetMap.put(k,res == null ? cs : res);    } catch (    Exception x) {      continue;    }  }  return res == null ? cs : res;}  }
class C{  public static int characterSize(int character) throws JSONException {  if (character < 0 || character > 0x10FFFF) {    throw new JSONException("Bad character " + character);  }  return character <= 0x7F ? 1 : character <= 0x3FFF ? 2 : 3;}  }
class C{  public void destroy(){  mListeners.clear();  mSpringSystem.deregisterSpring(this);}  }
class C{  public Vector4d sub(double x,double y,double z,double w){  this.x-=x;  this.y-=y;  this.z-=z;  this.w-=w;  return this;}  }
class C{  public boolean isConstant(){  if (implementation != null)   return implementation.isConstant();  if ((field != null) && (right == null || right instanceof TypeExpression || (right.op == THIS && right.where == where))) {    return field.isConstant();  }  return false;}  }
class C{  public static double computeDimension(double[][] parameters){  if (parameters.length == 0) {    return 0.0;  }  List<Double> X=new ArrayList<Double>();  List<Double> Y=new ArrayList<Double>();  for (double r=R_MAX; r >= R_MIN; r-=R_MIN) {    double lr=Math.log(r);    double lc=Math.log(computeCorrelationSum(parameters,r));    if (lc == Double.NEGATIVE_INFINITY) {      break;    }    X.add(lr);    Y.add(lc);  }  int n=X.size();  if (n < 5) {    return 0.0;  }  double sumX=0.0;  double sumXX=0.0;  double sumY=0.0;  double sumXY=0.0;  int remove=getCorrelationDimensionBounds(X,Y);  for (int i=remove; i < n - remove; i++) {    sumX+=X.get(i);    sumXX+=X.get(i) * X.get(i);    sumY+=Y.get(i);    sumXY+=X.get(i) * Y.get(i);  }  return (sumX * sumY - n * sumXY) / (sumX * sumX - n * sumXX);}  }
class C{  public void printStackTrace(PrintWriter writer){  super.printStackTrace(writer);  if (this.encapsulatedException != null) {    writer.println("*** Nested Exception:");    this.encapsulatedException.printStackTrace(writer);  }}  }
class C{  public void merge(RefactoringStatus other){  if (other == null)   return;  fEntries.addAll(other.fEntries);  fSeverity=Math.max(fSeverity,other.getSeverity());}  }
class C{  @NonNull public static <T>Collection<T> checkNotEmpty(Collection<T> collection,@NonNull String errorMessage){  checkState(collection != null && !collection.isEmpty(),errorMessage);  return collection;}  }
class C{  @Category(FlakyTest.class) @Test public void testColocationPartitionedRegionWithNullColocationSpecifiedOnOneNode() throws Throwable {  try {    createCacheInAllVms();    getCache().getLogger().info("<ExpectedException action=add>" + "IllegalStateException" + "</ExpectedException>");    redundancy=new Integer(1);    localMaxmemory=new Integer(50);    totalNumBuckets=new Integer(11);    regionName=CustomerPartitionedRegionName;    colocatedWith=null;    isPartitionResolver=new Boolean(true);    attributeObjects=new Object[]{regionName,redundancy,localMaxmemory,totalNumBuckets,null,isPartitionResolver};    dataStore1.invoke(PRColocationDUnitTest.class,"createPR",attributeObjects);    createPR(regionName,redundancy,localMaxmemory,totalNumBuckets,null,isPartitionResolver,false);    regionName=OrderPartitionedRegionName;    colocatedWith=CustomerPartitionedRegionName;    isPartitionResolver=new Boolean(true);    attributeObjects=new Object[]{regionName,redundancy,localMaxmemory,totalNumBuckets,colocatedWith,isPartitionResolver};    dataStore1.invoke(PRColocationDUnitTest.class,"createPR",attributeObjects);    createPR(regionName,redundancy,localMaxmemory,totalNumBuckets,null,isPartitionResolver,false);    fail("test failed due to illgal colocation settings did not thorw expected exception");  } catch (  IllegalStateException expected) {    assertTrue(expected.getMessage().contains("The colocatedWith="));  } finally {    getCache().getLogger().info("<ExpectedException action=remove>" + "IllegalStateException" + "</ExpectedException>");  }}  }
class C{  @Inject public MetricReporter(MetricWriter metricWriter,@Named("metricsWriteInterval") long writeInterval,@Named("metricsBackgroundThreadFactory") ThreadFactory threadFactory){  this(metricWriter,writeInterval,threadFactory,MetricRegistryImpl.getDefault(),new ArrayBlockingQueue<Optional<ImmutableList<MetricPoint<?>>>>(1000));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:47.472 -0500",hash_original_method="9CB95CDEC2272D9103D9B302315B1CF0",hash_generated_method="23C0CBA286C0E63CA9505736A14F161D") protected final void addState(State state,State parent){  mSmHandler.addState(state,parent);}  }
class C{  public void load(Element element,Object o){}  }
class C{  public Object mapTo(final Object objectToMap,final JBBPMapperCustomFieldProcessor customFieldProcessor){  return JBBPMapper.map(this,objectToMap,customFieldProcessor);}  }
class C{  static void url(String urls) throws Exception {  Authenticator.setDefault(new MyAuthenticator());  URL url=new URL(urls);  InputStream ins=url.openConnection().getInputStream();  BufferedReader reader=new BufferedReader(new InputStreamReader(ins));  String str;  while ((str=reader.readLine()) != null)   System.out.println(str);}  }
class C{  public TagExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  public int fetchChildren(String userAgent){  int nbNodes=0;  HTMLResponse response=downloadUrl(this.url,userAgent);  if (!response.hasSucceeded())   return nbNodes;  String html=response.getHtml();  Document doc=Jsoup.parse(html,this.url);  if (!doc.select("span.comparison").isEmpty()) {    String parentUrl="";    Elements parentLinks=doc.select("a[href=..]");    if (parentLinks.size() == 1)     parentUrl=parentLinks.get(0).absUrl("href"); else {      Elements parentLinks2=doc.select("a[href=../index.html]");      if (parentLinks2.size() == 1)       parentUrl=parentLinks.get(0).absUrl("href");    }    if (!parentUrl.equals(this.url)) {      this.url=parentUrl;      String htmlBis=downloadUrl(parentUrl,userAgent).getHtml();      if (!html.equals("")) {        html=htmlBis;        doc=Jsoup.parse(html,this.url);      }    }  }  if (html.contains("MunStrap")) {    Elements domains=doc.select("ul.groupview > li > a.link-domain");    if (domains.size() > 0) {      if (domains.size() == 1 && !domains.get(0).text().equals("localdomain"))       this.name=domains.get(0).text(); else       this.generateName();      int previousPosition=-1;      for (      Element domain : domains) {        Elements hosts=domain.parent().select("ul>li");        for (        Element host : hosts) {          Elements infosList=host.select("a.link-host");          if (infosList.size() == 0)           continue;          Element infos=infosList.get(0);          MuninNode serv=new MuninNode(infos.text(),infos.attr("abs:href"));          serv.setParent(this);          previousPosition++;          serv.setPosition(previousPosition);          nbNodes++;        }      }    }  } else {    Elements domains=doc.select("span.domain");    if (domains.size() > 0) {      if (domains.size() == 1 && !domains.get(0).text().equals("localdomain")) {        Element a=domains.get(0).child(0);        this.name=a.text();      } else       this.generateName();      int previousPosition=-1;      for (      Element domain : domains) {        Elements hosts=domain.parent().select("span.host");        for (        Element host : hosts) {          String nodeUrl=host.child(0).attr("abs:href");          if (!this.has(nodeUrl)) {            MuninNode node=new MuninNode(host.child(0).text(),nodeUrl);            node.setParent(this);            previousPosition++;            node.setPosition(previousPosition);            nbNodes++;          }        }      }    }  }  return nbNodes;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer(getClass().getName()).append("=[");  sb.append(p_po.get_ID());  if (getDescription() != null)   sb.append(",").append(getDescription());  if (getM_Product_ID() != 0)   sb.append(",M_Product_ID=").append(getM_Product_ID());  sb.append(",Qty=").append(m_qty).append(",Amt=").append(getAmtSource()).append("]");  return sb.toString();}  }
class C{  public static NbtOutputStream writeDeflated(NbtTag tag,OutputStream outputStream,Deflater def) throws IOException {  NbtOutputStream out=new NbtOutputStream(new DeflaterOutputStream(outputStream,def));  out.write(tag);  return out;}  }
class C{  private void ensureBufferCapacity(int desiredCapacity){  int capacity=pixelBuffer.length;  while (capacity < desiredCapacity) {    capacity*=2;  }  if (capacity > pixelBuffer.length) {    pixelBuffer=new byte[capacity];  }}  }
class C{  @Override public boolean add(T element){  if (nodes.containsKey(element)) {    return false;  }  Node<T> node=new Node<T>(this,element);  nodes.put(element,node);  return true;}  }
class C{  @SuppressWarnings({"UnusedDeclaration"}) protected static Cylinder computeVerticalBoundsFromSectorLatitudeRange(Globe globe,Sector sector,double minHeight,double maxHeight){  if (sector == null) {    String msg=Logging.getMessage("nullValue.SectorIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  Vec4 centerPoint=Vec4.ZERO;  Vec4 axis=Vec4.UNIT_Y;  double radius=globe.getEquatorialRadius() + maxHeight;  Vec4 extremePoint=globe.computePointFromPosition(sector.getMinLatitude(),sector.getMinLongitude(),maxHeight);  double minProj=extremePoint.subtract3(centerPoint).dot3(axis);  extremePoint=globe.computePointFromPosition(sector.getMaxLatitude(),sector.getMaxLongitude(),maxHeight);  double maxProj=extremePoint.subtract3(centerPoint).dot3(axis);  Vec4 bottomCenterPoint=axis.multiply3(minProj).add3(centerPoint);  Vec4 topCenterPoint=axis.multiply3(maxProj).add3(centerPoint);  if (radius == 0)   radius=1;  if (bottomCenterPoint.equals(topCenterPoint))   topCenterPoint=bottomCenterPoint.add3(new Vec4(1,0,0));  return new Cylinder(bottomCenterPoint,topCenterPoint,radius);}  }
class C{  public void flush() throws IOException {  flushBuffer();  if (out != null) {    out.flush();  } else {    response.setCharacterEncoding(response.getCharacterEncoding());    response.flushBuffer();  }}  }
class C{  static public void shuffle(int[] array,Random rand){  shuffle(array,0,array.length,rand);}  }
class C{  private void checkResponseCode(Context context,long requestId,int responseCodeIndex){  Intent intent=new Intent(Consts.ACTION_RESPONSE_CODE);  intent.setClass(context,BillingService.class);  intent.putExtra(Consts.INAPP_REQUEST_ID,requestId);  intent.putExtra(Consts.INAPP_RESPONSE_CODE,responseCodeIndex);  context.startService(intent);}  }
class C{  public BoundaryPanelDistributed(int panelWidth,int panelHeight){  super(panelWidth,panelHeight);}  }
class C{  @Override public int hashCode(){  return (messageType | delegate.hashCode());}  }
class C{  public static void assertU(String message,String update){  checkUpdateU(message,update,true);}  }
class C{  public void removeActionListener(ActionListener listener){  m_text.removeActionListener(listener);}  }
class C{  @Override public void registerResourceFactories(ResourceSet resourceSet){  super.registerResourceFactories(resourceSet);}  }
class C{  private int readFromResponse(State state,InnerState innerState,byte[] data,InputStream entityStream) throws StopRequest {  try {    return entityStream.read(data);  } catch (  IOException ex) {    logNetworkState();    mInfo.mCurrentBytes=innerState.mBytesSoFar;    mDB.updateDownload(mInfo);    if (cannotResume(innerState)) {      String message="while reading response: " + ex.toString() + ", can't resume interrupted download with no ETag";      throw new StopRequest(DownloaderService.STATUS_CANNOT_RESUME,message,ex);    } else {      throw new StopRequest(getFinalStatusForHttpError(state),"while reading response: " + ex.toString(),ex);    }  }}  }
class C{  public void test_SelectPrepared() throws SQLException {  String sql="SELECT finteger, ftext, fcharacter, fdecimal, fnumeric," + " fsmallint, ffloat, freal, fdouble, fdate, ftime" + " FROM " + DatabaseCreator.TEST_TABLE2 + " WHERE finteger = ? AND ftext = ? AND fcharacter = ? AND"+ " fdecimal = ? AND fnumeric = ? AND fsmallint = ? AND"+ " freal = ? AND fdouble = ? AND fdate = ?"+ " AND ftime = ?";  PreparedStatement prepStatement=conn.prepareStatement(sql);  CharArrayReader reader=new CharArrayReader(new String(DatabaseCreator.defaultCharacter + "1").toCharArray());  prepStatement.setInt(1,1);  prepStatement.setString(2,DatabaseCreator.defaultString + "1");  prepStatement.setInt(6,1);  prepStatement.setDouble(7,1.1);  prepStatement.setDouble(8,1.1);  prepStatement.setDate(9,date);  prepStatement.setTime(10,time);  int counter=0;  ResultSet result=prepStatement.executeQuery();  while (result.next()) {    int id=result.getInt("finteger");    assertEquals("expected value doesn't equal actual",DatabaseCreator.defaultString + id,result.getString("ftext"));    assertEquals("expected value doesn't equal actual",DatabaseCreator.defaultCharacter + id,result.getString("fcharacter"));    assertEquals("expected value doesn't equal actual",id,result.getInt("fsmallint"));    assertEquals("expected value doesn't equal actual",(float)(id + 0.1),result.getFloat("ffloat"));    assertEquals("expected value doesn't equal actual",(double)(id + 0.1),result.getDouble("freal"));    assertEquals("expected value doesn't equal actual",(double)(id + 0.1),result.getDouble("fdouble"));    assertEquals("expected value doesn't equal actual",date.toString(),result.getDate("fdate").toString());    assertEquals("expected value doesn't equal actual",time.toString(),result.getTime("ftime").toString());    counter++;  }  prepStatement.close();  result.close();}  }
class C{  private Token modelToToken(int offs){  if (offs >= 0) {    try {      int line=getLineOfOffset(offs);      Token t=getTokenListForLine(line);      while (t != null && t.isPaintable()) {        if (t.containsPosition(offs)) {          return t;        }        t=t.getNextToken();      }    } catch (    BadLocationException ble) {      ble.printStackTrace();    }  }  return null;}  }
class C{  public CacheLoaderException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  public Label mark(){  Label label=new Label();  mv.visitLabel(label);  return label;}  }
class C{  private Map<String,TimestampClass> wrapCompiledClasses(Map<String,Class> compiledClasses){  Map<String,TimestampClass> compiledTimestampClasses=new HashMap<>();  for (  Map.Entry<String,Class> entry : compiledClasses.entrySet()) {    compiledTimestampClasses.put(entry.getKey(),new TimestampClass(entry.getValue(),getCurrentTimestamp()));  }  return compiledTimestampClasses;}  }
class C{  public DTM createDocumentFragment(){  return m_dtmManager.createDocumentFragment();}  }
class C{  public static void registerDataPersisters(DataPersister... dataPersisters){  List<DataPersister> newList=new ArrayList<DataPersister>();  if (registeredPersisters != null) {    newList.addAll(registeredPersisters);  }  for (  DataPersister persister : dataPersisters) {    newList.add(persister);  }  registeredPersisters=newList;}  }
class C{  public LineStringExtracter(List comps){  this.comps=comps;}  }
class C{  private static Address copyClassToBootImage(Address scalarImageAddress,Object jdkObject,Class<?> jdkType,RVMClass rvmScalarType,boolean allocOnly,Address overwriteAddress,Object parentObject,boolean untraced) throws IllegalAccessException {  if (verbosity.isAtLeast(DETAILED)) {    if (depth == DEPTH_CUTOFF)     say(SPACES.substring(0,depth + 1),"TOO DEEP: cutting off"); else     if (depth < DEPTH_CUTOFF) {      String tab=SPACES.substring(0,depth + 1);      if (depth == 0 && jtocCount >= 0)       tab=tab + "jtoc #" + String.valueOf(jtocCount)+ " ";      int scalarSize=rvmScalarType.getInstanceSize();      say(tab,"Copying object ",jdkType.getName(),"   size=",String.valueOf(scalarSize),(scalarSize >= LARGE_SCALAR_SIZE) ? " large object!!!" : "");    }  }  RVMField[] rvmFields=rvmScalarType.getInstanceFields();  for (int i=0; i < rvmFields.length; ++i) {    RVMField rvmField=rvmFields[i];    TypeReference rvmFieldType=rvmField.getType();    Address rvmFieldAddress=scalarImageAddress.plus(rvmField.getOffset());    String rvmFieldName=rvmField.getName().toString();    Field jdkFieldAcc=getJdkFieldAccessor(jdkType,i,INSTANCE_FIELD);    boolean untracedField=rvmField.isUntraced() || untraced;    if (jdkFieldAcc == null) {      if (!copyKnownInstanceField(jdkObject,rvmFieldName,rvmFieldType,rvmFieldAddress)) {        if (verbosity.isAtLeast(DETAILED))         traceContext.push(rvmFieldType.toString(),jdkType.getName(),rvmFieldName);        if (verbosity.isAtLeast(DETAILED))         traceContext.traceFieldNotInHostJdk();        if (verbosity.isAtLeast(DETAILED))         traceContext.pop();        if (rvmFieldType.isPrimitiveType()) {switch (rvmField.getType().getMemoryBytes()) {case 1:            bootImage.setByte(rvmFieldAddress,0);          break;case 2:        bootImage.setHalfWord(rvmFieldAddress,0);      break;case 4:    bootImage.setFullWord(rvmFieldAddress,0);  break;case 8:bootImage.setDoubleWord(rvmFieldAddress,0L);break;default :fail("unexpected field type: " + rvmFieldType);break;}} else {bootImage.setNullAddressWord(rvmFieldAddress,!untracedField,!untracedField,false);}}continue;}if (rvmFieldType.isPrimitiveType()) {if (rvmFieldType.isBooleanType()) {bootImage.setByte(rvmFieldAddress,jdkFieldAcc.getBoolean(jdkObject) ? 1 : 0);} else if (rvmFieldType.isByteType()) {bootImage.setByte(rvmFieldAddress,jdkFieldAcc.getByte(jdkObject));} else if (rvmFieldType.isCharType()) {bootImage.setHalfWord(rvmFieldAddress,jdkFieldAcc.getChar(jdkObject));} else if (rvmFieldType.isShortType()) {bootImage.setHalfWord(rvmFieldAddress,jdkFieldAcc.getShort(jdkObject));} else if (rvmFieldType.isIntType()) {try {bootImage.setFullWord(rvmFieldAddress,jdkFieldAcc.getInt(jdkObject));} catch (IllegalArgumentException ex) {if (jdkObject instanceof java.util.WeakHashMap && rvmFieldName.equals("loadFactor")) {bootImage.setFullWord(rvmFieldAddress,7500);} else if (jdkObject instanceof java.lang.ref.ReferenceQueue && rvmFieldName.equals("head")) {bootImage.setFullWord(rvmFieldAddress,0);} else {System.out.println("type " + rvmScalarType + ", field "+ rvmField);throw ex;}}} else if (rvmFieldType.isLongType()) {bootImage.setDoubleWord(rvmFieldAddress,jdkFieldAcc.getLong(jdkObject));} else if (rvmFieldType.isFloatType()) {float f=jdkFieldAcc.getFloat(jdkObject);bootImage.setFullWord(rvmFieldAddress,Float.floatToIntBits(f));} else if (rvmFieldType.isDoubleType()) {double d=jdkFieldAcc.getDouble(jdkObject);bootImage.setDoubleWord(rvmFieldAddress,Double.doubleToLongBits(d));} else if (rvmFieldType.equals(TypeReference.Address) || rvmFieldType.equals(TypeReference.Word) || rvmFieldType.equals(TypeReference.Extent)|| rvmFieldType.equals(TypeReference.Offset)) {Object o=jdkFieldAcc.get(jdkObject);String msg=" instance field " + rvmField.toString();boolean warn=rvmFieldType.equals(TypeReference.Address);bootImage.setAddressWord(rvmFieldAddress,getWordValue(o,msg,warn),false,false);} else {fail("unexpected primitive field type: " + rvmFieldType);}} else {Object value=jdkFieldAcc.get(jdkObject);if (!allocOnly) {Class<?> jdkClass=jdkFieldAcc.getDeclaringClass();if (verbosity.isAtLeast(DETAILED)) {String typeName=(value == null) ? "(unknown: value was null)" : value.getClass().getName();traceContext.push(typeName,jdkClass.getName(),jdkFieldAcc.getName());}copyReferenceFieldToBootImage(rvmFieldAddress,value,jdkObject,!untracedField,!(untracedField || rvmField.isFinal()),rvmFieldName,rvmFieldType);if (verbosity.isAtLeast(DETAILED)) {traceContext.pop();}}}}return scalarImageAddress;}  }
class C{  @Override public int write(ByteBuffer src) throws IOException {  throw new NonWritableChannelException();}  }
class C{  public void processChangedLines(int offset,int length) throws BadLocationException {  String content=m_Self.getText(0,m_Self.getLength());  int startLine=m_RootElement.getElementIndex(offset);  int endLine=m_RootElement.getElementIndex(offset + length);  if (getMultiLineComment()) {    setInsideMultiLineComment(commentLinesBefore(content,startLine));  }  for (int i=startLine; i <= endLine; i++) {    applyHighlighting(content,i);  }  if (isMultiLineComment()) {    commentLinesAfter(content,endLine);  } else {    highlightLinesAfter(content,endLine);  }}  }
class C{  protected boolean equals(IPath path1,IPath path2){  return equalsOrNull(path1,path2);}  }
class C{  public Selector printOptions(){  if (header != null) {    out.println(header);  }  for (int i=0; i < options.size(); i++) {    out.println((i + 1) + ":" + formatter.apply(options.get(i)));  }  if (footer != null) {    out.println(footer);  }  return this;}  }
class C{  @Override public void addConnectionEventListener(final ConnectionEventListener l){  if (ActiveMQRAManagedConnection.trace) {    ActiveMQRALogger.LOGGER.trace("addConnectionEventListener(" + l + ")");  }  eventListeners.add(l);}  }
class C{  @Override public void write(byte[] b,int off,int len){  checkNotNull(b);}  }
class C{  public StateMachineException(IOException e){  super(e.getMessage(),e);}  }
class C{  public final Iterator<KnowledgeEdge> explicitlyForbiddenEdgesIterator(){  Set<OrderedPair<Set<MyNode>>> copy=new HashSet<>(forbiddenRulesSpecs);  copy.removeAll(forbiddenTierRules());  for (  KnowledgeGroup group : knowledgeGroups) {    copy.remove(knowledgeGroupRules.get(group));  }  Set<KnowledgeEdge> edges=new HashSet<>();  for (  OrderedPair<Set<MyNode>> o : copy) {    final Set<MyNode> first=o.getFirst();    for (    MyNode s1 : first) {      final Set<MyNode> second=o.getSecond();      for (      MyNode s2 : second) {        edges.add(new KnowledgeEdge(s1.getName(),s2.getName()));      }    }  }  return edges.iterator();}  }
class C{  public boolean isBlinking(){  return modifiers.contains(SGR.BLINK);}  }
class C{  public SerializedInstancesTest(String name){  super(name);}  }
class C{  public static int createDescriptor(){  discontiguousSpaceIndex+=DISCONTIG_INDEX_INCREMENT;  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert((discontiguousSpaceIndex & TYPE_CONTIGUOUS) != TYPE_CONTIGUOUS);  return discontiguousSpaceIndex;}  }
class C{  public void testNonExistingXmlAttributeReplacement(){  final String file="target/jboss-standalone-nonexisting-xml-attribute.xml";  final String nonExistingAttribute="nonexisting";  final String test="nonexisting=\"test\"";  this.fileHandler.copyFile("src/test/resources/jboss-standalone.xml",file,true);  XmlReplacement xmlReplacement=new XmlReplacement(file,"//server/socket-binding-group/socket-binding[@name='http']",nonExistingAttribute,false,"test");  this.fileHandler.replaceInXmlFile(xmlReplacement);  String read=this.fileHandler.readTextFile(file,"UTF-8");  assertTrue("File " + file + " does not contain: "+ test,read.contains(test));}  }
class C{  private boolean accept(char... acceptableSymbols){  boolean symbolPresent=false;  for (  char c : acceptableSymbols) {    if (data[index] == c)     symbolPresent=true;  }  return symbolPresent;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:11.444 -0500",hash_original_method="C9600F8F1BB8A8C873CC4C3FEC87FEF5",hash_generated_method="5678E8178F7A23A79FE55C21B97D7D2C") @Deprecated public SslCertificate(String issuedTo,String issuedBy,String validNotBefore,String validNotAfter){  this(issuedTo,issuedBy,parseDate(validNotBefore),parseDate(validNotAfter),null);}  }
class C{  public void visitBaseType(char descriptor){}  }
class C{  public void onGoogleLogin(){  String googleAccessToken;  if (!mUpdate) {    googleAccessToken=((RegistrationProcessActivity)getActivity()).getPlusManager().getAccessToken();  } else {    googleAccessToken=((EditProfileActivity)getActivity()).getPlusManager().getAccessToken();  }  fetchProfileDetails(googleAccessToken);  if (!TextUtils.isEmpty(googleAccessToken)) {  }}  }
class C{  public Boolean isSupportsCpuHotRemove(){  return supportsCpuHotRemove;}  }
class C{  public WriteLock(File lockFile) throws ReplicatorException {  this.lockFile=lockFile;}  }
class C{  static public String dirname(String fileName){  if (fileName.contains(File.separator))   return fileName.substring(0,fileName.lastIndexOf(File.separator));  return ".";}  }
class C{  VMAssignmentResult resetAndGetSuccessfullyAssignedRequests(){  if (assignmentResults.isEmpty())   return null;  Set<TaskAssignmentResult> result=new HashSet<>();  for (  Map.Entry<TaskRequest,TaskAssignmentResult> entry : assignmentResults.entrySet())   if (entry.getValue().isSuccessful())   result.add(entry.getValue());  if (result.isEmpty())   return null;  VMAssignmentResult vmar=new VMAssignmentResult(hostname,new ArrayList<>(leasesMap.values()),result);  if (!singleLeaseMode) {    for (    String l : leasesMap.keySet())     leaseIdToHostnameMap.remove(l);    leasesMap.clear();  }  assignmentResults.clear();  return vmar;}  }
class C{  public void invalidate(){}  }
class C{  protected XTIFFDirectory(SeekableStream stream,int directory) throws IOException {  this.stream=stream;  long global_save_offset=stream.getFilePointer();  long ifd_offset;  readHeader();  ifd_offset=readUnsignedInt(stream);  for (int i=0; i < directory; i++) {    if (ifd_offset == 0L) {      throw new IllegalArgumentException(JaiI18N.getString("XTIFFDirectory3"));    }    stream.seek(ifd_offset);    int entries=readUnsignedShort(stream);    stream.skip(12 * entries);    ifd_offset=readUnsignedInt(stream);  }  stream.seek(ifd_offset);  initialize();  stream.seek(global_save_offset);}  }
class C{  public ExtendedErrorDialog(Window owner,String key,Throwable error,Object... arguments){  this(owner,key,error,false,arguments);}  }
class C{  public List<List<Integer>> threeSumB(int[] num){  List<List<Integer>> res=new ArrayList<>();  Arrays.sort(num);  for (int i=0; i < num.length - 2; i++) {    if (num[i] > 0) {      break;    }    if (i == 0 || (i > 0 && num[i] != num[i - 1])) {      int lo=i + 1, hi=num.length - 1, sum=0 - num[i];      while (lo < hi) {        if (num[lo] + num[hi] == sum) {          res.add(Arrays.asList(num[i],num[lo],num[hi]));          while (lo < hi && num[lo] == num[lo + 1])           lo++;          while (lo < hi && num[hi] == num[hi - 1])           hi--;          lo++;          hi--;        } else         if (num[lo] + num[hi] < sum) {          while (lo < hi && num[lo] == num[lo + 1])           lo++;          lo++;        } else {          while (lo < hi && num[hi] == num[hi - 1])           hi--;          hi--;        }      }    }  }  return res;}  }
class C{  private static int med3(int x[],int a,int b,int c,IntComparator comp){  int ab=comp.compare(x[a],x[b]);  int ac=comp.compare(x[a],x[c]);  int bc=comp.compare(x[b],x[c]);  return (ab < 0 ? (bc < 0 ? b : ac < 0 ? c : a) : (bc > 0 ? b : ac > 0 ? c : a));}  }
class C{  private void checkIfCreateLDAPGroupPropertiesSupported(AuthnCreateParam createParam){  boolean checkCompatibleVersion=false;  if (createParam != null) {    if (StringUtils.isNotEmpty(createParam.getGroupAttribute())) {      checkCompatibleVersion=true;    } else     if (!CollectionUtils.isEmpty(createParam.getGroupWhitelistValues())) {      checkCompatibleVersion=true;    } else     if (!CollectionUtils.isEmpty(createParam.getGroupObjectClasses())) {      checkCompatibleVersion=true;    } else     if (!CollectionUtils.isEmpty(createParam.getGroupMemberAttributes())) {      checkCompatibleVersion=true;    }  }  if (checkCompatibleVersion) {    checkCompatibleVersionForLDAPGroupSupport();  }}  }
class C{  public void removeTracker(){  this.properties.getTrackers().remove(this);}  }
class C{  protected void drawTriangles(DrawContext dc,Iterable<NodeLayout> nodes){  GL2 gl=dc.getGL().getGL2();  Dimension symbolSize=this.getNodeStateSymbolSize();  int halfHeight=symbolSize.height / 2;  int halfWidth=symbolSize.width / 2;  int iconSpace=this.getActiveAttributes().getIconSpace();  int pickWidth=symbolSize.width + iconSpace;  if (!dc.isPickingMode()) {    TreeAttributes attributes=this.getActiveAttributes();    Color color=attributes.getColor();    gl.glPolygonMode(GL2.GL_FRONT,GL2.GL_FILL);    gl.glLineWidth(1f);    OGLUtil.applyColor(gl,color,1,false);    gl.glBegin(GL2.GL_TRIANGLES);  } else {    gl.glBegin(GL2.GL_QUADS);  }  try {    for (    NodeLayout layout : nodes) {      if (!layout.node.isLeaf()) {        int x=layout.drawPoint.x;        int y=layout.drawPoint.y;        if (!dc.isPickingMode()) {          x+=halfWidth;          y+=halfHeight;          if (this.tree.isNodeExpanded(layout.node)) {            int vertAdjust=layout.bounds.height - halfWidth - (this.lineHeight - halfWidth) / 2;            y+=vertAdjust;            gl.glVertex2i(x - halfHeight,y);            gl.glVertex2i(x,-halfWidth + y);            gl.glVertex2i(x + halfHeight,y);          } else {            int vertAdjust=layout.bounds.height - symbolSize.height - (this.lineHeight - symbolSize.height) / 2;            y+=vertAdjust;            gl.glVertex2f(x,-halfHeight + y - 0.5f);            gl.glVertex2f(x + halfWidth,y);            gl.glVertex2f(x,halfHeight + y - 0.5f);          }        } else {          Color color=dc.getUniquePickColor();          int colorCode=color.getRGB();          this.pickSupport.addPickableObject(colorCode,this.createTogglePathControl(this.tree,layout.node));          gl.glColor3ub((byte)color.getRed(),(byte)color.getGreen(),(byte)color.getBlue());          x=this.screenLocation.x;          int width=(layout.drawPoint.x + pickWidth) - x;          y=(int)layout.screenBounds.getMaxY() - this.lineHeight;          gl.glVertex2f(x,y);          gl.glVertex2f(x,y + this.lineHeight);          gl.glVertex2f(x + width,y + this.lineHeight);          gl.glVertex2f(x + width,y);        }      }      if (this.isDrawNodeStateSymbol())       layout.drawPoint.x+=this.getNodeStateSymbolSize().width + this.getActiveAttributes().getIconSpace();    }  }  finally {    gl.glEnd();  }}  }
class C{  public int generate(byte[] output,byte[] additionalInput,boolean predictionResistant){  int numberOfBits=output.length * 8;  if (numberOfBits > MAX_BITS_REQUEST) {    throw new IllegalArgumentException("Number of bits per request limited to " + MAX_BITS_REQUEST);  }  if (_reseedCounter > RESEED_MAX) {    return -1;  }  if (predictionResistant) {    reseed(additionalInput);    additionalInput=null;  }  if (additionalInput != null) {    byte[] newInput=new byte[1 + _V.length + additionalInput.length];    newInput[0]=0x02;    System.arraycopy(_V,0,newInput,1,_V.length);    System.arraycopy(additionalInput,0,newInput,1 + _V.length,additionalInput.length);    byte[] w=hash(newInput);    addTo(_V,w);  }  byte[] rv=hashgen(_V,numberOfBits);  byte[] subH=new byte[_V.length + 1];  System.arraycopy(_V,0,subH,1,_V.length);  subH[0]=0x03;  byte[] H=hash(subH);  addTo(_V,H);  addTo(_V,_C);  byte[] c=new byte[4];  c[0]=(byte)(_reseedCounter >> 24);  c[1]=(byte)(_reseedCounter >> 16);  c[2]=(byte)(_reseedCounter >> 8);  c[3]=(byte)_reseedCounter;  addTo(_V,c);  _reseedCounter++;  System.arraycopy(rv,0,output,0,output.length);  return numberOfBits;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_ACTION_1__CODE_LANG_1:    return codeLang_1 != null && !codeLang_1.isEmpty();case UmplePackage.ANONYMOUS_ACTION_1__CODE_LANGS_1:  return codeLangs_1 != null && !codeLangs_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public Vector3i mul(int scalar,Vector3i dest){  dest.x=x * scalar;  dest.y=y * scalar;  dest.y=z * scalar;  return dest;}  }
class C{  public static ValueNamePair retrieveInfo(){  ValueNamePair vp=(ValueNamePair)Env.getCtx().remove(LAST_INFO);  return vp;}  }
class C{  GridMBeanServerData(ObjectName mbean){  assert mbean != null;  this.mbean=mbean;}  }
class C{  @Deprecated public static TaskService.State convertMiddleEndToBackEnd(TaskEntity taskEntity){  TaskService.State taskServiceState=new TaskService.State();  taskServiceState.entityId=taskEntity.getEntityId();  taskServiceState.entityKind=taskEntity.getEntityKind();  taskServiceState.queuedTime=taskEntity.getQueuedTime();  taskServiceState.startedTime=taskEntity.getStartedTime();  taskServiceState.endTime=taskEntity.getEndTime();  taskServiceState.projectId=taskEntity.getProjectId();  taskServiceState.operation=taskEntity.getOperation() != null ? taskEntity.getOperation().toString() : null;switch (taskEntity.getState()) {case COMPLETED:    taskServiceState.state=TaskService.State.TaskState.COMPLETED;  break;case STARTED:taskServiceState.state=TaskService.State.TaskState.STARTED;break;case QUEUED:taskServiceState.state=TaskService.State.TaskState.QUEUED;break;case ERROR:taskServiceState.state=TaskService.State.TaskState.ERROR;break;default :String errorMessage=String.format("Unknown task state found in taskEntity {%s}",taskEntity);throw new IllegalArgumentException(errorMessage);}if (taskEntity.getSteps() != null && !taskEntity.getSteps().isEmpty()) {taskServiceState.steps=new ArrayList<>();taskEntity.getSteps().forEach(null);}return taskServiceState;}  }
class C{  protected KeyManagerFactory(KeyManagerFactorySpi factorySpi,Provider provider,String algorithm){  this.factorySpi=factorySpi;  this.provider=provider;  this.algorithm=algorithm;}  }
class C{  public void register(){  getPreferenceStore().addPropertyChangeListener(this);}  }
class C{  protected void fireStartEntity(String name) throws org.xml.sax.SAXException {  if (m_tracer != null) {    flushMyWriter();    m_tracer.fireGenerateEvent(SerializerTrace.EVENTTYPE_ENTITYREF,name);  }}  }
class C{  public Name canonicalize(){  boolean canonical=true;  for (int i=0; i < name.length; i++) {    if (lowercase[name[i] & 0xFF] != name[i]) {      canonical=false;      break;    }  }  if (canonical)   return this;  Name newname=new Name();  newname.appendSafe(name,offset(0),getlabels());  for (int i=0; i < newname.name.length; i++)   newname.name[i]=lowercase[newname.name[i] & 0xFF];  return newname;}  }
class C{  public ContinuousDistribution toContinuous(){  if (continuousCache == null) {    if (variables.size() != 1) {      throw new RuntimeException("cannot convert distribution to continuous for P(" + variables + ")");    }    String headVar=variables.iterator().next();    continuousCache=createContinuous(headVar);  }  return continuousCache;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private String addColumntoSelection(final String colName,final String selectionIn){  String selection=colName + " = ?";  if (null != selectionIn) {    selection+=" AND " + selectionIn;  }  return selection;}  }
class C{  public synchronized void stopPreview(){  if (autoFocusManager != null) {    autoFocusManager.stop();    autoFocusManager=null;  }  if (camera != null && previewing) {    camera.stopPreview();    previewCallback.setHandler(null,0);    previewing=false;  }}  }
class C{  public RDFObject createObject(Resource resource,Set<URI> types){  assert resource != null;  if (IDGenerator.BLANK_RESOURCE.equals(resource)) {    if (idGenerator == null) {      throw new IllegalStateException("No ID generator available");    } else {      resource=idGenerator.generateID(types);    }  }  return createBean(resource,getObjectClass(resource,types));}  }
class C{  public IType findType(String name,IPackageFragment pkg,boolean partialMatch,int acceptFlags,boolean waitForIndices,boolean considerSecondaryTypes){  if (pkg == null)   return null;  SingleTypeRequestor typeRequestor=new SingleTypeRequestor();  seekTypes(name,pkg,partialMatch,acceptFlags,typeRequestor,considerSecondaryTypes);  IType type=typeRequestor.getType();  if (type == null && considerSecondaryTypes) {    type=findSecondaryType(pkg.getElementName(),name,pkg.getJavaProject(),waitForIndices,null);  }  return type;}  }
class C{  public final boolean isBounded(){  return ((Variable)getTerm()).isBounded();}  }
class C{  protected boolean[] runBasicTest(boolean nominalPredictor,boolean numericPredictor,boolean stringPredictor,boolean datePredictor,boolean relationalPredictor,boolean multiInstance,int classType,int classIndex,int missingLevel,boolean predictorMissing,boolean classMissing,int numTrain,int numTest,int numClasses,ArrayList<String> accepts){  boolean[] result=new boolean[2];  Instances train=null;  Instances test=null;  Classifier classifier=null;  Evaluation evaluation=null;  boolean built=false;  try {    train=makeTestDataset(42,numTrain,nominalPredictor ? getNumNominal() : 0,numericPredictor ? getNumNumeric() : 0,stringPredictor ? getNumString() : 0,datePredictor ? getNumDate() : 0,relationalPredictor ? getNumRelational() : 0,numClasses,classType,classIndex,multiInstance);    test=makeTestDataset(24,numTest,nominalPredictor ? getNumNominal() : 0,numericPredictor ? getNumNumeric() : 0,stringPredictor ? getNumString() : 0,datePredictor ? getNumDate() : 0,relationalPredictor ? getNumRelational() : 0,numClasses,classType,classIndex,multiInstance);    if (missingLevel > 0) {      addMissing(train,missingLevel,predictorMissing,classMissing);      addMissing(test,Math.min(missingLevel,50),predictorMissing,classMissing);    }    classifier=AbstractClassifier.makeCopies(getClassifier(),1)[0];    evaluation=new Evaluation(train);  } catch (  Exception ex) {    ex.printStackTrace();    throw new Error("Error setting up for tests: " + ex.getMessage());  }  try {    classifier.buildClassifier(train);    built=true;    if (!testWRTZeroR(classifier,evaluation,train,test)[0]) {      result[0]=true;      result[1]=true;      throw new Exception("Scheme performs worse than ZeroR");    }    println("yes");    result[0]=true;  } catch (  Exception ex) {    boolean acceptable=false;    String msg;    if (ex.getMessage() == null) {      msg="";    } else {      msg=ex.getMessage().toLowerCase();    }    if (msg.indexOf("not in classpath") > -1) {      m_ClasspathProblems=true;    }    if (msg.indexOf("worse than zeror") >= 0) {      println("warning: performs worse than ZeroR");      result[0]=true;      result[1]=true;    } else {      for (int i=0; i < accepts.size(); i++) {        if (msg.indexOf(accepts.get(i)) >= 0) {          acceptable=true;        }      }      println("no" + (acceptable ? " (OK error message)" : ""));      result[1]=acceptable;    }    if (m_Debug) {      println("\n=== Full Report ===");      print("Problem during");      if (built) {        print(" testing");      } else {        print(" training");      }      println(": " + ex.getMessage() + "\n");      if (!acceptable) {        if (accepts.size() > 0) {          print("Error message doesn't mention ");          for (int i=0; i < accepts.size(); i++) {            if (i != 0) {              print(" or ");            }            print('"' + accepts.get(i) + '"');          }        }        println("here are the datasets:\n");        println("=== Train Dataset ===\n" + train.toString() + "\n");        println("=== Test Dataset ===\n" + test.toString() + "\n\n");      }    }  }  return result;}  }
class C{  public static synchronized void initializeSecurityManagerForSUT(){  initializeSecurityManagerForSUT(null);}  }
class C{  @Override public String toString(){  StringBuilder description=new StringBuilder("categories ").append(included.isEmpty() ? "[all]" : included);  if (!excluded.isEmpty()) {    description.append(" - ").append(excluded);  }  return description.toString();}  }
class C{  public PoolingByteArrayOutputStream(ByteArrayPool pool){  this(pool,DEFAULT_SIZE);}  }
class C{  public void translate(float tx,float ty,float tz){  showMissingWarning("translate");}  }
class C{  public static CProjectTreeNode<?> findDatabaseNode(final JTree tree,final IDatabase database){  final List<CProjectTreeNode<?>> nodes=new ArrayList<CProjectTreeNode<?>>();  nodes.add((CProjectTreeNode<?>)tree.getModel().getRoot());  while (!nodes.isEmpty()) {    final CProjectTreeNode<?> current=nodes.get(0);    nodes.remove(0);    if ((current instanceof CDatabaseNode) && (((CDatabaseNode)current).getObject() == database)) {      return current;    }    for (final Enumeration<?> e=current.children(); e.hasMoreElements(); ) {      nodes.add((CProjectTreeNode<?>)e.nextElement());    }  }  throw new IllegalStateException("IE01200: Database node not found");}  }
class C{  public IsInstanceOf(Class<?> expectedClass){  this.expectedClass=expectedClass;  this.matchableClass=matchableClass(expectedClass);}  }
class C{  private float[] pointListToLinePointsArray(final Iterable<? extends GeoPoint> nodes){  ArrayList<Float> points=new ArrayList<Float>();  BoundingBox box=getViewBox();  GeoPoint prevNode=null;  float prevX=0f;  float prevY=0f;  int w=getWidth();  int h=getHeight();  for (  GeoPoint node : nodes) {    int nodeLon=node.getLon();    int nodeLat=node.getLat();    boolean interrupted=false;    if (node instanceof InterruptibleGeoPoint) {      interrupted=((InterruptibleGeoPoint)node).isInterrupted();    }    float X=Float.MIN_VALUE;    float Y=Float.MIN_VALUE;    if (!interrupted && prevNode != null && box.intersects(nodeLat,nodeLon,prevNode.getLat(),prevNode.getLon())) {      X=GeoMath.lonE7ToX(w,box,nodeLon);      Y=GeoMath.latE7ToY(h,w,box,nodeLat);      if (prevX == Float.MIN_VALUE) {        prevX=GeoMath.lonE7ToX(w,box,prevNode.getLon());        prevY=GeoMath.latE7ToY(h,w,box,prevNode.getLat());      }      points.add(prevX);      points.add(prevY);      points.add(X);      points.add(Y);    }    prevNode=node;    prevX=X;    prevY=Y;  }  float[] result=new float[points.size()];  int i=0;  for (  Float f : points)   result[i++]=f;  return result;}  }
class C{  private static void enlargeTable(){  VM.sysFail("Statics.enlargeTable: jtoc is full");}  }
class C{  public void testSync(){  EndToEndTestUtils.findMenuItem(trackListActivity.getString(R.string.menu_settings),true);  EndToEndTestUtils.SOLO.clickOnText(trackListActivity.getString(R.string.menu_sync_drive));  if (!EndToEndTestUtils.SOLO.waitForText(GMAIL_COM,1,EndToEndTestUtils.TINY_WAIT_TIME)) {    return;  }  EndToEndTestUtils.SOLO.clickOnText(GMAIL_COM,0);  instrumentation.waitForIdleSync();  EndToEndTestUtils.getButtonOnScreen(trackListActivity.getString(R.string.generic_ok),true,true);  EndToEndTestUtils.SOLO.waitForText(trackListActivity.getString(R.string.sync_drive_confirm_message).split("%")[0],1,EndToEndTestUtils.SHORT_WAIT_TIME);  EndToEndTestUtils.SOLO.clickOnText(trackListActivity.getString(R.string.generic_no));  EndToEndTestUtils.SOLO.goBack();  assertEquals(false,EndToEndTestUtils.findMenuItem(trackListActivity.getString(R.string.menu_sync_now),false));}  }
class C{  public static List<File> applyCwd(File cwd,List<File> files){  if (files != null) {    List<File> result=new ArrayList<File>(files.size());    for (    File f : files) {      result.add(applyCwd(cwd,f));    }    return result;  } else {    return null;  }}  }
class C{  public void testChains() throws GridClientException {  testChains(1,100);  testChains(10,10);  testChains(100,1);  testChains(1000,0);}  }
class C{  public ServiceChangedException(Reason reason){  super("Service changed");  setMessageKey(getMessageKey() + "." + reason.toString());}  }
class C{  public static void register(){  CommandCenter.register(ATTACK,new AttackAction());}  }
class C{  public String valueReplacementsTipText(){  return "A comma separated list of values to replace and their " + "replacements. E.g. red:green, blue:purple, fred:bob";}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  public static synchronized BiolinguaDigraph BiolinguaAlgorithm(SymMatrixF correlMatrix,BiolinguaDigraph initGraph,float vBitsAnnotat,float vBitsErrors,float vbitsLinks,float vBitsPredic){  return doBiolinguaAlgorithm(correlMatrix,null,initGraph,vbitsLinks,vBitsPredic,vBitsAnnotat,vBitsErrors);}  }
class C{  public boolean isCmltvVtngIndctr(){  return cmltvVtngIndctr;}  }
class C{  public static Message create(){  return new Message();}  }
class C{  public boolean isEmpty(){  return (impl.isEmpty());}  }
class C{  @Override public Void visitVariable(VariableElement e,Void p){  if (!checkForSerial(e)) {    if (e.getKind() == ENUM_CONSTANT || e.getConstantValue() != null || heuristicallyConstant(e))     checkAllCaps(e); else     checkCamelCase(e,false);  }  return null;}  }
class C{  static void checkSignedShort(final int value,final String msg){  if (value < Short.MIN_VALUE || value > Short.MAX_VALUE) {    throw new IllegalArgumentException(msg + " (must be a signed short): " + value);  }}  }
class C{  public static void createAlias(String host,String alias,String collection) throws IOException {  String createAliasTemplate="http://%s:%s/solr/admin/collections?action=CREATEALIAS&name=%s&collections=%s";  String createAliasCommand=String.format(createAliasTemplate,host,DEFAULT_SOLR_PORT,alias,collection);  String result=executeSolrCommand(createAliasCommand);  logger.info(result);}  }
class C{  @Override public void onBoxOfficeMoviesLoaded(ArrayList<Movie> listMovies){  L.m("FragmentBoxOffice: onBoxOfficeMoviesLoaded Fragment");  if (mSwipeRefreshLayout.isRefreshing()) {    mSwipeRefreshLayout.setRefreshing(false);  }  mAdapter.setMovies(listMovies);}  }
class C{  public void simulate(double limit){  pq=new MinPQ<Event>();  for (int i=0; i < particles.length; i++) {    predict(particles[i],limit);  }  pq.insert(new Event(0,null,null));  while (!pq.isEmpty()) {    Event e=pq.delMin();    if (!e.isValid())     continue;    Particle a=e.a;    Particle b=e.b;    for (int i=0; i < particles.length; i++)     particles[i].move(e.time - t);    t=e.time;    if (a != null && b != null)     a.bounceOff(b); else     if (a != null && b == null)     a.bounceOffVerticalWall(); else     if (a == null && b != null)     b.bounceOffHorizontalWall(); else     if (a == null && b == null)     redraw(limit);    predict(a,limit);    predict(b,limit);  }}  }
class C{  protected boolean isStrtblUsed(){  return strtblUsed;}  }
class C{  public TimeZoneField(String name){  super(name,Field.Type.TIMEZONE);}  }
class C{  public static void cleanVehicles(TransitSchedule schedule,Vehicles vehicles){  log.info("Removing not used vehicles...");  int removed=0;  final Set<Id<Vehicle>> usedVehicles=new HashSet<>();  for (  TransitLine transitLine : schedule.getTransitLines().values()) {    for (    TransitRoute transitRoute : transitLine.getRoutes().values()) {      for (      Departure departure : transitRoute.getDepartures().values()) {        usedVehicles.add(departure.getVehicleId());      }    }  }  for (  Id<Vehicle> vehicleId : new HashSet<>(vehicles.getVehicles().keySet())) {    if (!usedVehicles.contains(vehicleId)) {      vehicles.removeVehicle(vehicleId);      removed++;    }  }  log.info(removed + " vehicles removed");}  }
class C{  public static Entity stackingViolation(IGame game,Entity entering,int elevation,Coords dest,Entity transport){  return stackingViolation(game,entering,entering.getPosition(),elevation,dest,transport);}  }
class C{  public static Result serializableInstance(){  return new Result("X1",new ArrayList<String>(),new double[1],new double[1],0,0,0,new double[1],new double[1],new double[1],1.5,0.0,new String[0],0.0,0.05);}  }
class C{  public static String longestCommonPrefix(String[] strs){  for (int i=strs.length - 2; i >= 0; i--) {    strs[i]=commonPrefix(strs[i + 1],strs[i]);  }  return strs[0];}  }
class C{  public boolean isDefaultPartition(int position){  assert (position >= 0);  assert (position <= _document.getLength());  try {    ITypedRegion region=TextUtilities.getPartition(_document,_partitioning,position,false);    return region.getType().equals(_partition);  } catch (  BadLocationException e) {  }  return false;}  }
class C{  public static NumericDolphinBinder<Double> bindDouble(Property<Double> property){  requireNonNull(property,"property");  return new DoubleDolphinBinder(property);}  }
class C{  public SecP256R1Point(ECCurve curve,ECFieldElement x,ECFieldElement y,boolean withCompression){  super(curve,x,y);  if ((x == null) != (y == null)) {    throw new IllegalArgumentException("Exactly one of the field elements is null");  }  this.withCompression=withCompression;}  }
class C{  public boolean isSelected(){  return mbSelected;}  }
class C{  public static DeleteSessionsForSessionIdE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  DeleteSessionsForSessionIdE object=new DeleteSessionsForSessionIdE();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    java.util.Vector handledAttributes=new java.util.Vector();    while (!reader.isEndElement()) {      if (reader.isStartElement()) {        if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org","deleteSessionsForSessionId").equals(reader.getName())) {          object.setDeleteSessionsForSessionId(DeleteSessionsForSessionId.Factory.parse(reader));        } else {          throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());        }      } else {        reader.next();      }    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  protected void fillStatement(PreparedStatement stmt,Object[] params,int[] paramTypes) throws SQLException {  if (params == null) {    return;  }  if ((paramTypes != null) && (params.length != paramTypes.length)) {    throw new IllegalArgumentException("Sizes of params and paramTypes must be equal!");  }  for (int i=0; i < params.length; i++) {    if (params[i] != null) {      if (paramTypes == null)       stmt.setObject(i + 1,params[i]); else       stmt.setObject(i + 1,params[i],paramTypes[i]);    } else {      if (paramTypes == null)       stmt.setNull(i + 1,Types.VARCHAR); else       stmt.setNull(i + 1,paramTypes[i]);    }  }}  }
class C{  public MapConverter(final Mapper mapper,@SuppressWarnings("rawtypes") final Class<? extends Map> type){  super(mapper);  @SuppressWarnings("unchecked") final Class<? extends Map<?,?>> checkedType=(Class<? extends Map<?,?>>)type;  this.type=checkedType;  if (type != null && !Map.class.isAssignableFrom(type)) {    throw new IllegalArgumentException(type + " not of type " + Map.class);  }}  }
class C{  public static String readResourceUtf8(Class<?> contextClass,String filename){  return resourceToString(getResource(contextClass,filename));}  }
class C{  private void validate() throws GeneratorException, InterruptedException {  checkForInterruption();  setState(STATE.VALIDATING);  try {    Archive arch=ArchiveFactory.openArchive(dwcaFolder);    loadBasisOfRecordMapFromVocabulary();    validateCoreDataFile(arch.getCore(),!arch.getExtensions().isEmpty());    if (isEventCore(arch)) {      validateEventCore(arch);    }    if (!arch.getExtensions().isEmpty()) {      validateExtensionDataFiles(arch.getExtensions());    }  } catch (  IOException e) {    throw new GeneratorException("Problem occurred while validating DwC-A",e);  }  addMessage(Level.INFO,"Archive validated");}  }
class C{  public boolean hasSinkInfoKind(SootMethod method){  if (sinksMapping.containsKey(method))   return true;  if (API.v().isSystemMethod(method)) {    for (    SootMethod parent : SootUtils.getOverriddenMethodsFromSuperclasses(method)) {      if (sinksMapping.containsKey(parent))       return true;    }  }  return false;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void adoptTreeStructure(Tree donor){  for (int i=this.externalNodeCount; i < this.nodeCount; i++) {    int childCount=nodes[i].getChildCount();    for (int j=0; j < childCount; j++) {      nodes[i].removeChild(j);    }  }  addNodeStructure(donor,donor.getRoot());}  }
class C{  public static ICalDataType find(String value){  if ("CID".equalsIgnoreCase(value)) {    return CONTENT_ID;  }  return enums.find(value);}  }
class C{  public static byte[] decode(byte[] data){  ByteArrayOutputStream bOut=new ByteArrayOutputStream();  try {    encoder.decode(data,0,data.length,bOut);  } catch (  Exception e) {    throw new DecoderException("exception decoding Hex data: " + e.getMessage(),e);  }  return bOut.toByteArray();}  }
class C{  public static boolean containsOnlyWhitespaces(String s){  int size=s.length();  for (int i=0; i < size; i++) {    if (!CharOperation.isWhitespace(s.charAt(i)))     return false;  }  return true;}  }
class C{  public void addEndpoints(){  int maxSegIndex=edge.pts.length - 1;  add(edge.pts[0],0,0.0);  add(edge.pts[maxSegIndex],maxSegIndex,0.0);}  }
class C{  public boolean handleTouch(MotionEvent event){  int action=event.getAction();  if (mRenderer != null && action == MotionEvent.ACTION_MOVE) {    if (oldX >= 0 || oldY >= 0) {      float newX=event.getX(0);      float newY=event.getY(0);      if (event.getPointerCount() > 1 && (oldX2 >= 0 || oldY2 >= 0) && mRenderer.isZoomEnabled()) {        float newX2=event.getX(1);        float newY2=event.getY(1);        float newDeltaX=Math.abs(newX - newX2);        float newDeltaY=Math.abs(newY - newY2);        float oldDeltaX=Math.abs(oldX - oldX2);        float oldDeltaY=Math.abs(oldY - oldY2);        float zoomRate=1;        float tan1=Math.abs(newY - oldY) / Math.abs(newX - oldX);        float tan2=Math.abs(newY2 - oldY2) / Math.abs(newX2 - oldX2);        if (tan1 <= 0.25 && tan2 <= 0.25) {          zoomRate=newDeltaX / oldDeltaX;          applyZoom(zoomRate,Zoom.ZOOM_AXIS_X);        } else         if (tan1 >= 3.73 && tan2 >= 3.73) {          zoomRate=newDeltaY / oldDeltaY;          applyZoom(zoomRate,Zoom.ZOOM_AXIS_Y);        } else {          if (Math.abs(newX - oldX) >= Math.abs(newY - oldY)) {            zoomRate=newDeltaX / oldDeltaX;          } else {            zoomRate=newDeltaY / oldDeltaY;          }          applyZoom(zoomRate,Zoom.ZOOM_AXIS_XY);        }        oldX2=newX2;        oldY2=newY2;      } else       if (mRenderer.isPanEnabled()) {        mPan.apply(oldX,oldY,newX,newY);        oldX2=0;        oldY2=0;      }      oldX=newX;      oldY=newY;      graphicalView.repaint();      return true;    }  } else   if (action == MotionEvent.ACTION_DOWN) {    oldX=event.getX(0);    oldY=event.getY(0);    if (mRenderer != null && mRenderer.isZoomEnabled() && zoomR.contains(oldX,oldY)) {      if (oldX < zoomR.left + zoomR.width() / 3) {        graphicalView.zoomIn();      } else       if (oldX < zoomR.left + zoomR.width() * 2 / 3) {        graphicalView.zoomOut();      } else {        graphicalView.zoomReset();      }      return true;    }  } else   if (action == MotionEvent.ACTION_UP || action == MotionEvent.ACTION_POINTER_UP) {    oldX=0;    oldY=0;    oldX2=0;    oldY2=0;    if (action == MotionEvent.ACTION_POINTER_UP) {      oldX=-1;      oldY=-1;    }  }  return !mRenderer.isClickEnabled();}  }
class C{  public static byte[] checkIndexHeaderID(DataInput in,byte[] expectedID) throws IOException {  byte id[]=new byte[StringHelper.ID_LENGTH];  in.readBytes(id,0,id.length);  if (!Arrays.equals(id,expectedID)) {    throw new CorruptIndexException("file mismatch, expected id=" + StringHelper.idToString(expectedID) + ", got="+ StringHelper.idToString(id),in);  }  return id;}  }
class C{  private StatementBlock vectorizeElementwiseUnary(StatementBlock sb,StatementBlock csb,Hop from,Hop to,Hop increment,String itervar) throws HopsException {  StatementBlock ret=sb;  if (!(increment instanceof LiteralOp && ((LiteralOp)increment).getDoubleValue() == 1.0)) {    return ret;  }  boolean apply=false;  boolean rowIx=false;  if (csb.get_hops() != null && csb.get_hops().size() == 1) {    Hop root=csb.get_hops().get(0);    if (root.getDataType() == DataType.MATRIX && root.getInput().get(0) instanceof LeftIndexingOp) {      LeftIndexingOp lix=(LeftIndexingOp)root.getInput().get(0);      Hop lixlhs=lix.getInput().get(0);      Hop lixrhs=lix.getInput().get(1);      if (lixlhs instanceof DataOp && lixrhs instanceof UnaryOp && lixrhs.getInput().get(0) instanceof IndexingOp&& lixrhs.getInput().get(0).getInput().get(0) instanceof DataOp) {        IndexingOp rix=(IndexingOp)lixrhs.getInput().get(0);        if (lix.getRowLowerEqualsUpper() && rix.getRowLowerEqualsUpper() && lix.getInput().get(2).getName().equals(itervar)&& rix.getInput().get(1).getName().equals(itervar)) {          apply=true;          rowIx=true;        }        if (lix.getColLowerEqualsUpper() && rix.getColLowerEqualsUpper() && lix.getInput().get(4).getName().equals(itervar)&& rix.getInput().get(3).getName().equals(itervar)) {          apply=true;          rowIx=false;        }      }    }  }  if (apply) {    Hop root=csb.get_hops().get(0);    LeftIndexingOp lix=(LeftIndexingOp)root.getInput().get(0);    UnaryOp uop=(UnaryOp)lix.getInput().get(1);    IndexingOp rix=(IndexingOp)uop.getInput().get(0);    int index1=rowIx ? 2 : 4;    int index2=rowIx ? 3 : 5;    HopRewriteUtils.removeChildReferenceByPos(lix,lix.getInput().get(index1),index1);    HopRewriteUtils.addChildReference(lix,from,index1);    HopRewriteUtils.removeChildReferenceByPos(lix,lix.getInput().get(index2),index2);    HopRewriteUtils.addChildReference(lix,to,index2);    HopRewriteUtils.removeChildReferenceByPos(rix,rix.getInput().get(index1 - 1),index1 - 1);    HopRewriteUtils.addChildReference(rix,from,index1 - 1);    HopRewriteUtils.removeChildReferenceByPos(rix,rix.getInput().get(index2 - 1),index2 - 1);    HopRewriteUtils.addChildReference(rix,to,index2 - 1);    rix.refreshSizeInformation();    uop.refreshSizeInformation();    lix.refreshSizeInformation();    ret=csb;    LOG.debug("Applied vectorizeElementwiseUnaryForLoop.");  }  return ret;}  }
class C{  private void renderFormsOntoG2WithSwing(final Object raw,final int pageIndex,final int currentIndent,final int currentRotation,final Map componentsToIgnore,final FormFactory formFactory,final int pageHeight){  this.componentsToIgnore=componentsToIgnore;  Component comp;  FormObject formObject;  final boolean isPrinting=formFactory != null;  if (JVMBugRightAlignFix && isPrinting) {    maxLengthForTextOnPage=0;    for (    final FormObject o : formsOrdered[pageIndex]) {      if (o != null) {        formObject=o;        comp=(Component)checkGUIObjectResolved(formObject);        if (comp instanceof JTextField) {          final JTextField text=(JTextField)comp;          final int newLength=text.getText().length();          if (newLength > maxLengthForTextOnPage && text.getHorizontalAlignment() == JTextField.RIGHT) {            maxLengthForTextOnPage=newLength;          }        }      }    }  }  final Graphics2D g2=(Graphics2D)raw;  final AffineTransform defaultAf=g2.getTransform();  final AffineTransform aff=g2.getTransform();  aff.scale(1,-1);  aff.translate(0,-pageHeight - insetH);  g2.setTransform(aff);  if (dummyPanel == null) {    dummyPanel=new JFrame();    dummyPanel.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);    dummyPanel.pack();  }  for (  final FormObject nextVal : formsOrdered[pageIndex]) {    if (nextVal != null) {      formObject=nextVal;      final boolean[] flags=formObject.getCharacteristics();      if (((flags[1] || (isPrinting && !flags[2])))) {        continue;      }      checkGUIObjectResolved(formObject);      comp=(Component)formObject.getGUIComponent();      if (comp != null && comp.isVisible()) {        final Rectangle bounds=formObject.getBoundingRectangle();        final float boundHeight=bounds.height;        final int swingHeight=comp.getPreferredSize().height + 6;        if (this.componentsToIgnore != null && (this.componentsToIgnore.containsKey(formObject.getParameterConstant(PdfDictionary.Subtype)) || this.componentsToIgnore.containsKey(formObject.getParameterConstant(PdfDictionary.Type)))) {        } else         if (comp instanceof JList && ((JList)comp).getSelectedIndex() != -1 && boundHeight < swingHeight) {          final JList comp2=(JList)comp;          dummyPanel.add(comp);          final ListModel model=comp2.getModel();          final Object[] array=new Object[model.getSize()];          final int selectedIndex=comp2.getSelectedIndex();          int c=0;          array[c++]=model.getElementAt(selectedIndex);          for (int i=0; i < array.length; i++) {            if (i != selectedIndex) {              array[c++]=model.getElementAt(i);            }          }          comp2.setListData(array);          comp2.setSelectedIndex(0);          renderComponent(g2,formObject,comp2,currentRotation,false,currentIndent,isPrinting);          dummyPanel.remove(comp2);        } else {          boolean customPrintoverRide=false;          if (customFormPrint != null) {            scaleComponent(formObject,1,rotation,comp,false,indent,isPrinting);            customPrintoverRide=customFormPrint.print(g2,formObject,this);          }          if (!customPrintoverRide) {            if (comp instanceof AbstractButton) {              final Object obj=((AbstractButton)comp).getIcon();              if (obj != null) {                if (obj instanceof FixImageIcon) {                  ((FixImageIcon)(obj)).setPrinting(true,1);                } else                 if (readOnlyScaling > 0 && obj instanceof ReadOnlyTextIcon) {                  ((ReadOnlyTextIcon)(obj)).setPrinting(true,readOnlyScaling);                }              }            }            dummyPanel.add(comp);            renderComponent(g2,formObject,comp,currentRotation,false,currentIndent,isPrinting);            dummyPanel.remove(comp);            if (comp instanceof AbstractButton) {              final Object obj=((AbstractButton)comp).getIcon();              if (obj instanceof FixImageIcon) {                ((FixImageIcon)(obj)).setPrinting(false,1);              } else               if (obj instanceof ReadOnlyTextIcon) {                ((ReadOnlyTextIcon)(obj)).setPrinting(false,1);              }            }          }        }      }    }  }  g2.setTransform(defaultAf);  if (currentPage == pageIndex && panel != null) {    resetScaledLocation(displayScaling,rotation,indent);  }}  }
class C{  public boolean equals(Object other){  if (!(other instanceof GF2Vector)) {    return false;  }  GF2Vector otherVec=(GF2Vector)other;  return (length == otherVec.length) && IntUtils.equals(v,otherVec.v);}  }
class C{  public long add(long instant,int value){  return getDurationField().add(instant,value);}  }
class C{  public String md5(String str){  try {    MessageDigest localMessageDigest=MessageDigest.getInstance("MD5");    localMessageDigest.update(str.getBytes());    byte[] arrayOfByte=localMessageDigest.digest();    StringBuffer localStringBuffer=new StringBuffer();    for (int i=0; i < arrayOfByte.length; i++) {      int j=0xFF & arrayOfByte[i];      if (j < 16)       localStringBuffer.append("0");      localStringBuffer.append(Integer.toHexString(j));    }    return localStringBuffer.toString();  } catch (  NoSuchAlgorithmException localNoSuchAlgorithmException) {    Ln.e("MD5Utility","getMD5 error");    localNoSuchAlgorithmException.printStackTrace();  }  return "";}  }
class C{  @Override public void bindView(View view,Context context,Cursor cursor){  final ViewHolder holder=(ViewHolder)view.getTag();  final String photoUri=cursor.getString(ContactsQuery.PHOTO_THUMBNAIL_DATA);  final String displayName=cursor.getString(ContactsQuery.DISPLAY_NAME);  final int startIndex=indexOfSearchQuery(displayName);  if (startIndex == -1) {    holder.text1.setText(displayName);    if (TextUtils.isEmpty(mSearchTerm)) {      holder.text2.setVisibility(View.GONE);    } else {      holder.text2.setVisibility(View.VISIBLE);    }  } else {    final SpannableString highlightedName=new SpannableString(displayName);    highlightedName.setSpan(highlightTextSpan,startIndex,startIndex + mSearchTerm.length(),0);    holder.text1.setText(highlightedName);    holder.text2.setVisibility(View.GONE);  }  final Uri contactUri=Uri.withAppendedPath(Contacts.CONTENT_URI,String.valueOf(cursor.getLong(ContactsQuery.ID)));  holder.icon.assignContactUri(contactUri);  mImageLoader.loadImage(contactUri,holder.icon);}  }
class C{  public void notifyVerticalEdgeReached(int startY,int finalY,int overY){  mScrollerY.notifyEdgeReached(startY,finalY,overY);}  }
class C{  public static void write(float lt,float ln,int w,int h,byte[] bytes,Color[] colorTable,int trans,LinkProperties properties,DataOutputStream dos) throws IOException {  dos.write(Link.RASTER_HEADER.getBytes());  dos.writeByte(GRAPHICTYPE_RASTER);  dos.writeByte(RENDERTYPE_LATLON);  dos.writeByte(COLORMODEL_INDEXED);  dos.writeFloat(lt);  dos.writeFloat(ln);  dos.writeInt(w);  dos.writeInt(h);  dos.writeInt(bytes.length);  dos.write(bytes,0,bytes.length);  dos.writeInt(colorTable.length);  int i;  for (i=0; i < colorTable.length; i++) {    dos.writeInt(colorTable[i].getRGB());  }  dos.writeInt(trans);  properties.write(dos);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public Achievement(String identifier,String title,Category category,String description,int baseScore,boolean active,ChatCondition condition){  this.identifier=identifier;  this.title=title;  this.category=category;  this.condition=condition;  this.description=description;  this.baseScore=baseScore;  this.active=active;}  }
class C{  public String nodeLabel(){  return Formatter.convert(score);}  }
class C{  protected void assertMessagesReceivedAreValid(List<Message> receivedMessages) throws JMSException {  List<Object> copyOfMessages=Arrays.asList(receivedMessages.toArray());  int counter=0;  if (data.length != copyOfMessages.size()) {    for (Iterator<Object> iter=copyOfMessages.iterator(); iter.hasNext(); ) {      TextMessage message=(TextMessage)iter.next();      if (LOG.isInfoEnabled()) {        LOG.info("<== " + counter++ + " = "+ message.getText());      }    }  }  assertEquals("Not enough messages received",data.length,receivedMessages.size());  for (int i=0; i < data.length; i++) {    TextMessage received=(TextMessage)receivedMessages.get(i);    String text=received.getText();    String stringProperty=received.getStringProperty("stringProperty");    int intProperty=received.getIntProperty("intProperty");    if (verbose) {      if (LOG.isDebugEnabled()) {        LOG.info("Received Text: " + text);      }    }    assertEquals("Message: " + i,data[i],text);    assertEquals(data[i],stringProperty);    assertEquals(i,intProperty);  }}  }
class C{  private Operation initTaskStatus(ExportGroup exportGroup,String task,Operation.Status status,ResourceOperationTypeEnum opType){  if (exportGroup.getOpStatus() == null) {    exportGroup.setOpStatus(new OpStatusMap());  }  Operation op=new Operation();  op.setResourceType(opType);  if (status == Operation.Status.ready) {    op.ready();  }  _dbClient.createTaskOpStatus(ExportGroup.class,exportGroup.getId(),task,op);  return op;}  }
class C{  public void defineDictionary(String name,Map<String,Object> mapping){  dictionaries.put(name,mapping);}  }
class C{  @Override public void put(double val){  final double nn=this.n + 1.0;  final double delta=val - m1;  final double delta_nn=delta / nn;  final double delta_nn2=delta_nn * delta_nn;  final double inc=delta * delta_nn * this.n;  m4+=inc * delta_nn2 * (nn * nn - 3. * nn + 3.) + 6. * delta_nn2 * m2 - 4. * delta_nn * m3;  m3+=inc * delta_nn * (nn - 2) - 3. * delta_nn * m2;  m2+=inc;  m1+=delta_nn;  n=nn;  min=Math.min(min,val);  max=Math.max(max,val);}  }
class C{  public static void streamContent(OutputStream out,InputStream in,int length) throws IOException {  int bufferSize=512;  if (out == null) {    throw new IOException("Attempt to write to null output stream");  }  if (in == null) {    throw new IOException("Attempt to read from null input stream");  }  if (length == 0) {    throw new IOException("Attempt to write 0 bytes of content to output stream");  }  BufferedOutputStream bos=new BufferedOutputStream(out,bufferSize);  BufferedInputStream bis=new BufferedInputStream(in,bufferSize);  byte[] buffer=new byte[length];  int read=0;  try {    while ((read=bis.read(buffer,0,buffer.length)) != -1) {      bos.write(buffer,0,read);    }  } catch (  IOException e) {    Debug.logError(e,"Problem reading/writing buffers",module);    bis.close();    bos.close();    throw e;  } finally {    if (bis != null) {      bis.close();    }    if (bos != null) {      bos.flush();      bos.close();    }  }}  }
class C{  public PublicKey build(){  return PublicKey.fromHexString(this.publicKey);}  }
class C{  public int hashCode(){  return 0;}  }
class C{  public static <E,T,U extends T,V extends T>T inject(Iterator<E> self,U initialValue,@ClosureParams(value=FromString.class,options="U,E") Closure<V> closure){  T value=initialValue;  Object[] params=new Object[2];  while (self.hasNext()) {    Object item=self.next();    params[0]=value;    params[1]=item;    value=closure.call(params);  }  return value;}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) @Test public void testNodeProcessing(){  LogicalCompareToConstant<Integer> oper=new LogicalCompareToConstant<Integer>(){  };  CollectorTestSink eSink=new CollectorTestSink();  CollectorTestSink neSink=new CollectorTestSink();  CollectorTestSink gtSink=new CollectorTestSink();  CollectorTestSink gteSink=new CollectorTestSink();  CollectorTestSink ltSink=new CollectorTestSink();  CollectorTestSink lteSink=new CollectorTestSink();  oper.equalTo.setSink(eSink);  oper.notEqualTo.setSink(neSink);  oper.greaterThan.setSink(gtSink);  oper.greaterThanOrEqualTo.setSink(gteSink);  oper.lessThan.setSink(ltSink);  oper.lessThanOrEqualTo.setSink(lteSink);  oper.setConstant(2);  oper.beginWindow(0);  oper.input.process(1);  oper.input.process(2);  oper.input.process(3);  oper.endWindow();  Assert.assertEquals("number emitted tuples",1,eSink.collectedTuples.size());  Assert.assertEquals("tuples were",eSink.collectedTuples.get(0).equals(2),true);  Assert.assertEquals("number emitted tuples",2,neSink.collectedTuples.size());  Assert.assertEquals("tuples were",neSink.collectedTuples.get(0).equals(1),true);  Assert.assertEquals("tuples were",neSink.collectedTuples.get(1).equals(3),true);  Assert.assertEquals("number emitted tuples",1,gtSink.collectedTuples.size());  Assert.assertEquals("tuples were",gtSink.collectedTuples.get(0).equals(1),true);  Assert.assertEquals("number emitted tuples",2,gteSink.collectedTuples.size());  Assert.assertEquals("tuples were",gteSink.collectedTuples.get(0).equals(1),true);  Assert.assertEquals("tuples were",gteSink.collectedTuples.get(1).equals(2),true);  Assert.assertEquals("number emitted tuples",1,ltSink.collectedTuples.size());  Assert.assertEquals("tuples were",ltSink.collectedTuples.get(0).equals(3),true);  Assert.assertEquals("number emitted tuples",2,lteSink.collectedTuples.size());  Assert.assertEquals("tuples were",lteSink.collectedTuples.get(0).equals(2),true);  Assert.assertEquals("tuples were",lteSink.collectedTuples.get(1).equals(3),true);}  }
class C{  public static void main(String[] args){  Integer[] listArray={2,3,2,5,6,1,-2,3,14,12};  Double[] doubleArray={3.4,1.3,-22.1,14.8,6.0,2.3,12.2};  Character[] charArray={'a','J','r'};  String[] stringArray={"Tom","Susan","Kim"};  bubbleSort(listArray);  bubbleSort(doubleArray);  bubbleSort(charArray);  bubbleSort(stringArray);  printList(listArray);  printList(charArray);  printList(stringArray);  printList(doubleArray);  GeometricObject[] list={new Circle(5),new Rectangle(4,5),new Circle(5.5),new Rectangle(2.4,5),new Circle(0.5),new Rectangle(4,65),new Circle(4.5),new Rectangle(4.4,1),new Circle(6.5),new Rectangle(4,5)};  bubbleSort(list,new GeometricObjectComparator());  printList(list);}  }
class C{  public SVGOMFEFuncAElement(String prefix,AbstractDocument owner){  super(prefix,owner);}  }
class C{  private void buildGui(){  if (repProc.replay.trackerEvents == null) {    addNorth(new XLabel("Precise Build Order information is available only from replay version 2.0.8. This replay has version " + repProc.replay.header.versionString(false) + ".").boldFont().allBorder(10).color(Color.RED));    return;  }  if (repProc.replay.getBalanceData() == null) {    addNorth(new XLabel("Precise Build Order information requires Balance Data which is not available for this replay version. This replay has version " + repProc.replay.header.versionString(false) + ".").boldFont().allBorder(10).color(Color.RED));    return;  }  table=new XTable();  addCenter(table.createWrapperBox(true,table.createToolBarParams(this)));  rebuildTableData();}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public TransferEntropyCalculatorMultiVariateGaussian() throws InstantiationException, IllegalAccessException, ClassNotFoundException {  super(COND_MI_CALCULATOR_GAUSSIAN);}  }
class C{  private void createSampler(){  this.sampler=glGenSamplers();  glSamplerParameteri(this.sampler,GL_TEXTURE_MIN_FILTER,GL_NEAREST);  glSamplerParameteri(this.sampler,GL_TEXTURE_MAG_FILTER,GL_NEAREST);}  }
class C{  public int toFaceIJOrientation(MutableInteger pi,MutableInteger pj,MutableInteger orientation){  int face=this.face();  int bits=(face & SWAP_MASK);  for (int k=7; k >= 0; --k) {    bits=getBits1(pi,pj,k,bits);  }  if (orientation != null) {    if ((lowestOnBit() & 0x1111111111111110L) != 0) {      bits^=S2.SWAP_MASK;    }    orientation.setValue(bits);  }  return face;}  }
class C{  public void mergeSavingsToAssetAccountMappingChanges(final JsonElement element,final String paramName,final Long productId,final int accountTypeId,final String accountTypeName,final Map<String,Object> changes){  mergeProductToAccountMappingChanges(element,paramName,productId,accountTypeId,accountTypeName,changes,GLAccountType.ASSET,PortfolioProductType.SAVING);}  }
class C{  public JarMap(){  _entries=new JarList[1024];  _mask=_entries.length - 1;}  }
class C{  public static Object removeProperty(Node node,Collection.Key k,boolean caseSensitive){  boolean isXMLChildren;  if (k.getLowerString().startsWith("xml")) {    if (k.equals(XMLCOMMENT)) {      StringBuffer sb=new StringBuffer();      NodeList list=node.getChildNodes();      int len=list.getLength();      for (int i=0; i < len; i++) {        Node n=list.item(i);        if (n instanceof Comment) {          sb.append(((Comment)n).getData());          node.removeChild(XMLCaster.toRawNode(n));        }      }      return sb.toString();    } else     if (k.equals(XMLTEXT)) {      if (node instanceof Text || node instanceof CDATASection)       return ((CharacterData)node).getData();      StringBuilder sb=new StringBuilder();      NodeList list=node.getChildNodes();      int len=list.getLength();      for (int i=0; i < len; i++) {        Node n=list.item(i);        if (n instanceof Text || n instanceof CDATASection) {          sb.append(((CharacterData)n).getData());          node.removeChild(XMLCaster.toRawNode(n));        }      }      return sb.toString();    } else     if ((isXMLChildren=k.equals(XMLCHILDREN)) || k.equals(XMLNODES)) {      NodeList list=node.getChildNodes();      Node child;      for (int i=list.getLength() - 1; i >= 0; i--) {        child=XMLCaster.toRawNode(list.item(i));        if (isXMLChildren && child.getNodeType() != Node.ELEMENT_NODE)         continue;        node.removeChild(child);      }      return list;    }  }  NodeList nodes=node.getChildNodes();  Array array=new ArrayImpl();  for (int i=nodes.getLength() - 1; i >= 0; i--) {    Object o=nodes.item(i);    if (o instanceof Element) {      Element el=(Element)o;      if (nameEqual(el,k.getString(),caseSensitive)) {        array.appendEL(XMLCaster.toXMLStruct(el,caseSensitive));        node.removeChild(XMLCaster.toRawNode(el));      }    }  }  if (array.size() > 0) {    try {      return new XMLMultiElementStruct(array,false);    } catch (    PageException e) {    }  }  return null;}  }
class C{  public static void eachByte(Path self,@ClosureParams(value=SimpleType.class,options="byte") Closure closure) throws IOException {  BufferedInputStream is=newInputStream(self);  IOGroovyMethods.eachByte(is,closure);}  }
class C{  @Override public void delete(DBIDRef id){  assert (!ids.contains(id));  if (content instanceof WritableDoubleDataStore) {    ((WritableDoubleDataStore)content).delete(id);  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_SINGLE_IS_A1__EXTENDS_NAME_1:    return EXTENDS_NAME_1_EDEFAULT == null ? extendsName_1 != null : !EXTENDS_NAME_1_EDEFAULT.equals(extendsName_1);}return super.eIsSet(featureID);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodeelementnodeattributes.class,args);}  }
class C{  @Override public void notifyShutdown(ShutdownEvent event){  int benchmarkID=this.benchmark.addMeasure("Agent performance services");  long carModeCounter=0;  long ptModeCounter=0;  long bicycleModeCounter=0;  long walkModeCounter=0;  MatsimServices controler=event.getServices();  Network network=controler.getScenario().getNetwork();  Population population=controler.getScenario().getPopulation();  Iterator<? extends Person> persons=population.getPersons().values().iterator();  while (persons.hasNext()) {    double duration_home_work_min=-1.;    double distance_home_work_meter=-1.;    double duration_work_home_min=-1.;    double distance_work_home_meter=-1.;    String mode="none";    Person p=persons.next();    Plan plan=p.getSelectedPlan();    boolean isHomeActivity=true;    if (plan.getPlanElements().size() <= 1) {      write(duration_home_work_min,distance_home_work_meter,duration_work_home_min,distance_work_home_meter,mode,p);      continue;    }    Coord homeCoord=getActivityLocation(plan,InternalConstants.ACT_HOME);    Coord workCoord=getActivityLocation(plan,InternalConstants.ACT_WORK);    for (    PlanElement pe : plan.getPlanElements()) {      if (pe instanceof Activity) {        Activity activity=(Activity)pe;        if (activity.getType().endsWith(InternalConstants.ACT_HOME))         isHomeActivity=true; else         isHomeActivity=false;      } else       if (pe instanceof Leg) {        Leg leg=(Leg)pe;        mode=((Leg)pe).getMode();        double distance=-1.;        if (mode.equalsIgnoreCase(TransportMode.car)) {          Route route=leg.getRoute();          distance=RouteUtils.calcDistanceExcludingStartEndLink((NetworkRoute)route,network);        } else         if (mode.equalsIgnoreCase(TransportMode.pt)) {          if (homeCoord != null && workCoord != null && ptMatrix != null)           distance=ptMatrix.getTotalTravelDistance_meter(homeCoord,workCoord);        }        if (isHomeActivity) {          distance_home_work_meter=distance;          duration_home_work_min=leg.getTravelTime() / 60.;        } else {          distance_work_home_meter=distance;          duration_work_home_min=leg.getTravelTime() / 60.;        }      }    }    if (mode.equalsIgnoreCase(TransportMode.car))     carModeCounter++; else     if (mode.equalsIgnoreCase(TransportMode.pt))     ptModeCounter++; else     if (mode.equalsIgnoreCase(TransportMode.bike))     bicycleModeCounter++; else     if (mode.equalsIgnoreCase(TransportMode.walk))     walkModeCounter++;    write(duration_home_work_min,distance_home_work_meter,duration_work_home_min,distance_work_home_meter,mode,p);  }  UrbanSimPersonCSVWriter.close(module);  log.info("Used transport modes ...");  log.info("Car " + carModeCounter);  log.info("Pt " + ptModeCounter);  log.info("Bicycle " + bicycleModeCounter);  log.info("Walk " + walkModeCounter);  if (this.benchmark != null && benchmarkID > 0) {    this.benchmark.stoppMeasurement(benchmarkID);    log.info("Agent Performance Feedback with population size:" + population.getPersons().size() + " took "+ this.benchmark.getDurationInSeconds(benchmarkID)+ " seconds ("+ this.benchmark.getDurationInSeconds(benchmarkID) / 60. + " minutes).");  }}  }
class C{  public AppProcessInfo(String processName,int pid,int uid){  super();  this.processName=processName;  this.pid=pid;  this.uid=uid;}  }
class C{  @PreAuthorize("hasRole('ROLE_DOWNLOAD')") @Transactional(readOnly=true,propagation=Propagation.REQUIRED) public boolean hasProducts(Long u_id){  return countProductsInCart(u_id) != 0;}  }
class C{  public boolean isShowImportedFunctions(){  return m_importedFunctionCheckbox.isSelected();}  }
class C{  public static File savepointFile(File instancePath){  File tempDir=new File(Collect.CACHE_PATH);  return new File(tempDir,instancePath.getName() + ".save");}  }
class C{  public static void makeCompactGrid(Container parent,int rows,int cols,int initialX,int initialY,int xPad,int yPad){  SpringLayout layout;  try {    layout=(SpringLayout)parent.getLayout();  } catch (  ClassCastException exc) {    System.err.println("The first argument to makeCompactGrid must use SpringLayout.");    return;  }  Spring x=Spring.constant(initialX);  for (int c=0; c < cols; c++) {    Spring width=Spring.constant(0);    for (int r=0; r < rows; r++) {      width=Spring.max(width,getConstraintsForCell(r,c,parent,cols).getWidth());    }    for (int r=0; r < rows; r++) {      SpringLayout.Constraints constraints=getConstraintsForCell(r,c,parent,cols);      constraints.setX(x);      constraints.setWidth(width);    }    x=Spring.sum(x,Spring.sum(width,Spring.constant(xPad)));  }  Spring y=Spring.constant(initialY);  for (int r=0; r < rows; r++) {    Spring height=Spring.constant(0);    for (int c=0; c < cols; c++) {      height=Spring.max(height,getConstraintsForCell(r,c,parent,cols).getHeight());    }    for (int c=0; c < cols; c++) {      SpringLayout.Constraints constraints=getConstraintsForCell(r,c,parent,cols);      constraints.setY(y);      constraints.setHeight(height);    }    y=Spring.sum(y,Spring.sum(height,Spring.constant(yPad)));  }  SpringLayout.Constraints pCons=layout.getConstraints(parent);  pCons.setConstraint(SpringLayout.SOUTH,y);  pCons.setConstraint(SpringLayout.EAST,x);}  }
class C{  @Path("{name}") @Timed @ExceptionMetered @POST @Consumes(APPLICATION_JSON) public Response createOrUpdateSecret(@Auth User user,@PathParam("name") String secretName,@Valid CreateOrUpdateSecretRequestV2 request){  logger.info("User '{}' createOrUpdate secret '{}'.",user,secretName);  Secret secret=secretController.builder(secretName,request.content(),user.getName(),request.expiry()).withDescription(request.description()).withMetadata(request.metadata()).withType(request.type()).createOrUpdate();  URI uri=UriBuilder.fromResource(SecretsResource.class).path(secretName).build();  Response response=Response.created(uri).entity(secretDetailResponseFromId(secret.getId())).build();  if (response.getStatus() == HttpStatus.SC_CREATED) {    Map<String,String> extraInfo=new HashMap<>();    if (request.description() != null && !request.description().isEmpty()) {      extraInfo.put("description",request.description());    }    if (request.metadata() != null && !request.metadata().isEmpty()) {      extraInfo.put("metadata",request.metadata().toString());    }    extraInfo.put("expiry",Long.toString(request.expiry()));    auditLog.recordEvent(new Event(Instant.now(),EventTag.SECRET_CREATEORUPDATE,user.getName(),secretName,extraInfo));  }  return response;}  }
class C{  public static long round(final double value){  final long bits=Double.doubleToRawLongBits(value);  final int biasedExp=(int)(bits >> 52) & 0x7FF;  final int shift=52 - 1 + MAX_DOUBLE_EXPONENT - biasedExp;  if ((shift & -64) == 0) {    long extendedMantissa=0x0010000000000000L | bits & 0x000FFFFFFFFFFFFFL;    if (bits < 0) {      extendedMantissa=-extendedMantissa;    }    return (extendedMantissa >> shift) + 1L >> 1;  } else {    if (ANTI_SLOW_CASTS) {      if (Math.abs(value) >= -(double)Long.MIN_VALUE) {        return value < 0.0 ? Long.MIN_VALUE : Long.MAX_VALUE;      }    }    return (long)value;  }}  }
class C{  public void pause(){  mediaPlayer.pause();  mState=State.PAUSED;  buildNotification();  notifyPlayerStopped();}  }
class C{  public void testClassRegexp(){  m_Filter=getFilter("CLASS regexp '(r|g)'");  Instances result=useFilter();  assertEquals(m_Instances.numAttributes(),result.numAttributes());  assertEquals(15,result.numInstances());}  }
class C{  public boolean isDelegated(){  return is(DELEGATED);}  }
class C{  public static String loadCartFromShoppingList(HttpServletRequest request,HttpServletResponse response){  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");  HttpSession session=request.getSession();  GenericValue userLogin=(GenericValue)session.getAttribute("userLogin");  String shoppingListId=request.getParameter("shoppingListId");  ShoppingCart cart=null;  try {    Map<String,Object> outMap=dispatcher.runSync("loadCartFromShoppingList",UtilMisc.<String,Object>toMap("shoppingListId",shoppingListId,"userLogin",userLogin));    cart=(ShoppingCart)outMap.get("shoppingCart");  } catch (  GenericServiceException exc) {    request.setAttribute("_ERROR_MESSAGE_",exc.getMessage());    return "error";  }  session.setAttribute("shoppingCart",cart);  session.setAttribute("productStoreId",cart.getProductStoreId());  session.setAttribute("orderMode",cart.getOrderType());  session.setAttribute("orderPartyId",cart.getOrderPartyId());  return "success";}  }
class C{  public static void showLong(Context context,String text){  Assert.notNull(context,"Context cant be NULL!");  safeShow(context,text,Toast.LENGTH_LONG);}  }
class C{  private void parsePilot(Element pilotNode){  parsePilot(pilotNode,null);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public Object adapt(Object object,Object type){  if (isFactoryForType(type)) {    Object adapter=super.adapt(object,type);    if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {      return adapter;    }  }  return null;}  }
class C{  protected CSVData(){  records=new ArrayList<>();}  }
class C{  public static IWritableMount createSaveDirMount(World world,String subPath,long capacity){  findCC();  if (computerCraft_createSaveDirMount != null) {    try {      return (IWritableMount)computerCraft_createSaveDirMount.invoke(null,world,subPath,capacity);    } catch (    Exception e) {    }  }  return null;}  }
class C{  private void readCertsFromHarddrive() throws StorageResolverException {  File certDir=new File(this.merlinsCertificatesDir);  List<String> al=new ArrayList<String>();  String[] names=certDir.list();  for (int i=0; i < names.length; i++) {    String currentFileName=names[i];    if (currentFileName.endsWith(".crt")) {      al.add(names[i]);    }  }  CertificateFactory cf=null;  try {    cf=CertificateFactory.getInstance("X.509");  } catch (  CertificateException ex) {    throw new StorageResolverException("empty",ex);  }  if (cf == null) {    throw new StorageResolverException("empty");  }  for (int i=0; i < al.size(); i++) {    String filename=certDir.getAbsolutePath() + File.separator + al.get(i);    File file=new File(filename);    boolean added=false;    String dn=null;    FileInputStream fis=null;    try {      fis=new FileInputStream(file);      X509Certificate cert=(X509Certificate)cf.generateCertificate(fis);      cert.checkValidity();      this.certs.add(cert);      dn=cert.getSubjectX500Principal().getName();      added=true;    } catch (    FileNotFoundException ex) {      if (log.isLoggable(java.util.logging.Level.FINE)) {        log.log(java.util.logging.Level.FINE,"Could not add certificate from file " + filename,ex);      }    }catch (    CertificateNotYetValidException ex) {      if (log.isLoggable(java.util.logging.Level.FINE)) {        log.log(java.util.logging.Level.FINE,"Could not add certificate from file " + filename,ex);      }    }catch (    CertificateExpiredException ex) {      if (log.isLoggable(java.util.logging.Level.FINE)) {        log.log(java.util.logging.Level.FINE,"Could not add certificate from file " + filename,ex);      }    }catch (    CertificateException ex) {      if (log.isLoggable(java.util.logging.Level.FINE)) {        log.log(java.util.logging.Level.FINE,"Could not add certificate from file " + filename,ex);      }    } finally {      try {        if (fis != null) {          fis.close();        }      } catch (      IOException ex) {        if (log.isLoggable(java.util.logging.Level.FINE)) {          log.log(java.util.logging.Level.FINE,"Could not add certificate from file " + filename,ex);        }      }    }    if (added && log.isLoggable(java.util.logging.Level.FINE)) {      log.log(java.util.logging.Level.FINE,"Added certificate: " + dn);    }  }}  }
class C{  public static boolean isBlank(List<Object> list){  return list == null || list.isEmpty();}  }
class C{  public MultisigCosignatoryModification(final MultisigModificationType modificationType,final Account cosignatoryAccount){  this.modificationType=modificationType;  this.cosignatoryAccount=cosignatoryAccount;  this.validate();}  }
class C{  public TFloatArrayList grep(TFloatProcedure condition){  TFloatArrayList list=new TFloatArrayList();  for (int i=0; i < _pos; i++) {    if (condition.execute(_data[i])) {      list.add(_data[i]);    }  }  return list;}  }
class C{  public static long[][] genNativeParamForm(List<long[][]> objstack,long[][] fidinfostack){  return convertTo2DArrayForm(getNativeParamForm(objstack,fidinfostack));}  }
class C{  private void addElementInternal(@NotNull final LookupElementBuilder lookupElementBuilder,@Nullable final String help,@Nullable final Integer priority){  myMaxLength=Math.max(myMaxLength,lookupElementBuilder.getLookupString().length());  myMap.put(lookupElementBuilder,Pair.create(help,priority));  if (priority != null) {    myHasPriority=true;  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override protected void invokeContainer(String action,JvmLauncher java) throws Exception {  java.addClasspathEntries(new File(getHome(),"bin/tomcat-juli.jar"));  super.invokeContainer(action,java);}  }
class C{  public static EclipseRelease createWithIdVersionUpdatesite(String id,String version,String updateSite){  EclipseRelease official=officialReleaseMaybe(id);  if (official != null) {    throw new IllegalArgumentException("User-generated version cannot conflict with built-in " + id + ", change the ID or use EclipseRelease.forVersion("+ id+ ")");  }  return new EclipseRelease(Objects.requireNonNull(id),Version.parseVersion(version),Objects.requireNonNull(updateSite));}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public List busquedaElementos(int tipoBusqueda,Map ids,String pattern) throws GestorGeograficosException {  String cadenaIterador="/geograficos";  for (int i=0; i < tipos.length && tipos[i] <= tipoBusqueda; i++) {switch (i) {case PAIS:      cadenaIterador+="/paises";    String idPais=(String)ids.get(new Integer(PAIS));  if (StringUtils.isNotEmpty(idPais))   cadenaIterador+="/pais[@id='" + idPais + "']"; else   cadenaIterador+="/pais";break;case PROVINCIA:cadenaIterador+="/provincias";String idProvincia=(String)ids.get(new Integer(PROVINCIA));if (StringUtils.isNotEmpty(idProvincia)) cadenaIterador+="/provincia[@id='" + idProvincia + "']"; else cadenaIterador+="/provincia";break;case MUNICIPIO:cadenaIterador+="/municipios";String idMunicipio=(String)ids.get(new Integer(MUNICIPIO));if (StringUtils.isNotEmpty(idMunicipio)) cadenaIterador+="/municipio[@id='" + idMunicipio + "']"; else cadenaIterador+="/municipio";break;case POBLACION:cadenaIterador+="/localidades";String idPoblacion=(String)ids.get(new Integer(POBLACION));if (StringUtils.isNotEmpty(idPoblacion)) cadenaIterador+="/localidad[@id='" + idPoblacion + "']"; else cadenaIterador+="/localidad";break;}}return recuperarElementos(cadenaIterador,tipoBusqueda,ids,pattern);}  }
class C{  public void reset(){  localStores=new HashMap<String,ListenerStorageEngine>();}  }
class C{  private static void pipe(InputStream source,OutputStream dest) throws IOException {  byte[] buf=new byte[1024];  int read=0;  while ((read=source.read(buf)) >= 0) {    if (null != dest)     dest.write(buf,0,read);  }  if (null != dest)   dest.flush();}  }
class C{  public SVGGVTGlyphVector(GVTFont font,Glyph[] glyphs,FontRenderContext frc){  this.font=font;  this.glyphs=glyphs;  this.frc=frc;  outline=null;  bounds2D=null;  logicalBounds=null;  glyphLogicalBounds=new Shape[glyphs.length];  glyphVisible=new boolean[glyphs.length];  for (int i=0; i < glyphs.length; i++) {    glyphVisible[i]=true;  }  endPos=glyphs[glyphs.length - 1].getPosition();  endPos=new Point2D.Float((float)(endPos.getX() + glyphs[glyphs.length - 1].getHorizAdvX()),(float)endPos.getY());}  }
class C{  public void commit() throws IOException {  if (hasErrors) {    completeEdit(this,false);    remove(entry.key);  } else {    completeEdit(this,true);  }  committed=true;}  }
class C{  public void init(Controller c){  super.init(c);  display=new Display3D(600,600,this,1);  display.attach(cellPortrayal,"HyperCycle Cells");  cellPortrayal.valueName="HyperCycle Cells";  HyperCycleSimulation hcsState=(HyperCycleSimulation)state;  HyperCycleParameters p=hcsState.getParameters();  display.translate((p.getWidth() - 1) / -2.0,(p.getHeight() - 1) / -2.0,0);  display.scale(1.0 / Math.max(p.getWidth(),p.getHeight()));  displayFrame=display.createFrame();  c.registerFrame(displayFrame);  displayFrame.setVisible(true);}  }
class C{  protected boolean isNotSameAsOwner(MultistepExprHolder head,ElemTemplateElement ete){  MultistepExprHolder next=head;  while (null != next) {    ElemTemplateElement elemOwner=getElemFromExpression(next.m_exprOwner.getExpression());    if (elemOwner == ete)     return false;    next=next.m_next;  }  return true;}  }
class C{  @Override public Iterator<SolrClient> iterator(){  return this.server.iterator();}  }
class C{  public void seekTo(int milliSeconds){  if (videoControls != null) {    videoControls.showLoading(false);  }  videoViewImpl.seekTo(milliSeconds);}  }
class C{  protected void createSupply(int AD_Org_ID,int PP_MRP_ID,MProduct product,BigDecimal QtyPlanned,Timestamp DemandDateStartSchedule,String trxName) throws AdempiereException, SQLException {  if (isSynchronize() && m_product_planning.getDD_NetworkDistribution_ID() > 0) {    createDDOrder(AD_Org_ID,PP_MRP_ID,product,QtyPlanned,DemandDateStartSchedule,trxName);  } else   if (product.isPurchased()) {    createRequisition(AD_Org_ID,PP_MRP_ID,product,QtyPlanned,DemandDateStartSchedule,trxName);  } else   if (product.isBOM()) {    createPPOrder(AD_Org_ID,PP_MRP_ID,product,QtyPlanned,DemandDateStartSchedule,trxName);  } else {    throw new IllegalStateException("MRP Internal Error: Don't know what document to " + "create for " + product + "("+ m_product_planning+ ")");  }}  }
class C{  public RecurrenceExceptionEntry addWhere(Where where){  super.addElement(Where.KEY,where);  return this;}  }
class C{  public static int peekClassIndex(File file){  int result;  DataSource source;  Instances structure;  result=Integer.MAX_VALUE;  try {    source=new DataSource(file.getAbsolutePath());    structure=source.getStructure();    prepareData(structure);    result=structure.classIndex();  } catch (  Exception e) {  }  return result;}  }
class C{  public String toString(){  StringBuilder result=new StringBuilder();  result.append("Classifier=").append(Utils.toCommandLine(m_Classifier)).append(",");  result.append("Relation=").append(m_Relation).append(",");  result.append(super.toString());  return result.toString();}  }
class C{  public TIntFloatHashMap(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor);}  }
class C{  static boolean nonZeroDroppedBits(int numberOfBits,int digits[]){  int intCount=numberOfBits >> 5;  int bitCount=numberOfBits & 31;  int i;  for (i=0; (i < intCount) && (digits[i] == 0); i++) {  }  return ((i != intCount) || (digits[i] << (32 - bitCount) != 0));}  }
class C{  public void testMoveRenameFile() throws Exception {  create(igfs,paths(DIR,SUBDIR,DIR_NEW,SUBDIR_NEW),paths(FILE));  igfs.rename(FILE,FILE_NEW);  checkExist(igfs,igfsSecondary,FILE_NEW);  checkNotExist(igfs,igfsSecondary,FILE);}  }
class C{  public static IProposalComputer newUiFieldAttributeProposalComputer(ContentAssistRequest contentAssistRequest){  IDOMNode node=(IDOMNode)contentAssistRequest.getNode();  if (node.getNodeType() != IDOMNode.ELEMENT_NODE) {    return null;  }  if (XmlUtilities.getAttribute(node,UiBinderConstants.UI_BINDER_FIELD_ATTRIBUTE_NAME,true,UiBinderConstants.UI_BINDER_XML_NAMESPACE) != null) {    return null;  }  boolean isWidget=UiBinderXmlModelUtilities.computeQualifiedWidgetTypeName(node) != null;  boolean isLikelyHtmlElement=node.getNamespaceURI() == null;  if (!(isWidget || isLikelyHtmlElement)) {    return null;  }  return createStaticTextProposalComputerForUiAttribute(UiBinderConstants.UI_BINDER_FIELD_ATTRIBUTE_NAME,node,contentAssistRequest);}  }
class C{  public static ComponentUI createUI(JComponent b){  return new SeaGlassCheckBoxUI();}  }
class C{  public LuceneSearcher(){  this(new RAMDirectory(),FIELD,false);}  }
class C{  public int[] analyze(ServiceContext context){  byte[] in=context.orig;  if (!context.isHtml && !context.isCss)   return new int[0];  if (context.isHtml) {    if (!isHtml(in))     return new int[0];  }  _inStyle=context.isCss;  boolean withATags=context.isServiceWithIframe;  boolean withFormTags=context.isServiceWithIframe;  HashMap<String,Integer> urlToOffset=new HashMap<String,Integer>(256);  int i=0;  while (i < in.length) {switch (in[i]) {case '"':case '\'':      if (_inHtmlComment || _inScript) {      } else       if (_inQuotes) {        if (_quotesChar == in[i] && ((in[i + 1] <= ' ' && in[i + 1] >= 0) || in[i + 1] == '/' || in[i + 1] == '>' || in[i + 1] == ')' || in[i + 1] == '\'' || in[i + 1] == '"' || _inEventAttr)) {          if (!_inAttrWithoutQuotes) {            if (_inSrcAttr) {              _inSrcAttr=false;              _srcAttrLast=i;              if (_inImg)               addImg(in,urlToOffset); else               if (_inInput)               addInput(in,i,urlToOffset);            } else             if (_inStyleAttr) {              _inStyleAttr=false;              _styleAttrLast=i;            } else             if (_inTypeAttr) {              _inTypeAttr=false;              _typeAttrLast=i;            } else             if (_inRelAttr) {              _inRelAttr=false;              _relAttrLast=i;            } else             if (_inMediaAttr) {              _inMediaAttr=false;              _mediaAttrLast=i;            } else             if (_inOnloadAttr) {              _inOnloadAttr=false;              _onloadAttrLast=i;            } else             if (_inEventAttr) {              _inEventAttr=false;              _eventAttrLast=i;              addEvent();            } else             if (_inTargetAttr) {              _inTargetAttr=false;              _targetAttrLast=i;              if (_inAStart)               addA(in,-1);            } else             if (_inHrefAttr) {              _inHrefAttr=false;              _hrefAttrLast=i;            } else             if (_inHttpEquivAttr) {              _inHttpEquivAttr=false;              _httpEquivAttrLast=i;            } else             if (_inContentAttr) {              _inContentAttr=false;              _contentAttrLast=i;            }          }          _inQuotes=false;        }      } else       if ((_inTag && (in[i - 1] == '=' || in[i - 1] <= ' '))) {        _inQuotes=true;        _quotesChar=in[i];      }    break;case '<':  if (isMatching(in,i,START_IE_COMMENT)) {    _inIEComment=true;  } else   if (isMatching(in,i,END_IE_COMMENT)) {    _inIEComment=false;  }if (_inHtmlComment || _inQuotes || (_inScript && !isMatching(in,i,SCRIPT_END))) {} else {  if (!_inIEComment && isMatching(in,i,HTML_COMMENT)) {    _inHtmlComment=true;    i+=HTML_COMMENT.length;    continue;  } else {    _inTag=true;    _inStyleAttr=false;    if (isMatching(in,i,STYLE_START)) {      _inStyleStart=true;      _styleStartFirst=i;      i+=STYLE_START.length;      continue;    }    if (isMatching(in,i,STYLE_END)) {      _inStyle=false;      _inStyleEnd=true;      _styleEndFirst=i;      i+=STYLE_END.length;      continue;    }    if (isMatching(in,i,SCRIPT_START)) {      _inScriptStart=true;      _scriptStartFirst=i;      _scriptStartLast=(-1);      _inSrcAttr=false;      _inTypeAttr=false;      i+=SCRIPT_START.length;      continue;    }    if (isMatching(in,i,SCRIPT_END)) {      _inScriptEnd=true;      _scriptEndFirst=i;      i+=SCRIPT_END.length;      continue;    }    if (isMatching(in,i,IMG)) {      _inImg=true;      _inSrcAttr=false;      i+=IMG.length;      continue;    }    if (isMatching(in,i,LINK)) {      _inLink=true;      _linkFirst=i;      _inHrefAttr=false;      _inTypeAttr=false;      _inRelAttr=false;      _inMediaAttr=false;      i+=LINK.length;      continue;    }    if (isMatching(in,i,INPUT)) {      _inInput=true;      _inputFirst=i;      _inTypeAttr=false;      _inSrcAttr=false;      _typeAttrFirst=(-1);      _srcAttrFirst=(-1);      i+=INPUT.length;      continue;    }    if (isMatching(in,i,FRAME)) {      _inFrame=true;      _inSrcAttr=false;      i+=FRAME.length;      continue;    }    if (isMatching(in,i,IFRAME)) {      _inIframe=true;      _iframeFirst=i;      _inSrcAttr=false;      i+=IFRAME.length;      continue;    }    if (isMatching(in,i,HEAD)) {      _inHeadStart=true;      _headStartFirst=i;      i+=HEAD.length;      continue;    }    if (isMatching(in,i,BODY)) {      _inBodyStart=true;      _bodyStartFirst=i;      _inOnloadAttr=false;      i+=BODY.length;      continue;    }    if (isMatching(in,i,BASE)) {      _inBase=true;      _inHrefAttr=false;      i+=BASE.length;      continue;    }    if (isMatching(in,i,META)) {      _inMeta=true;      _inHttpEquivAttr=false;      _inContentAttr=false;      i+=META.length;      continue;    }    if (withATags && i + 2 < in.length && (in[i + 1] == 'a' || in[i + 1] == 'A') && in[i + 2] == ' ') {      _inAStart=true;      _aStartFirst=i;      _inTargetAttr=false;      _targetAttrFirst=(-1);      _targetAttrLast=(-1);      i+=3;      continue;    }    if (withFormTags && isMatching(in,i,FORM)) {      _inFormStart=true;      _formStartFirst=i;      _inTargetAttr=false;      i+=3;      continue;    }  }}break;case '>':if (_inHtmlComment && in[i - 1] == '-' && in[i - 2] == '-') {_inHtmlComment=false;} else if (_inHtmlComment || _inQuotes || (_inScript && !isMatching(in,i - SCRIPT_END.length,SCRIPT_END))) {} else if (_inTag) {_inTag=false;_inStyleAttr=false;if (_inSrcAttr) {_srcAttrLast=i;_inSrcAttr=false;if (_inImg) addImg(in,urlToOffset); else if (_inInput) addInput(in,i,urlToOffset);} else if (_inEventAttr) {_eventAttrLast=i;_inEventAttr=false;addEvent();}if (_inLink) {if (_inHrefAttr) {  _hrefAttrLast=i;  _inHrefAttr=false;}if (_inTypeAttr) {  _typeAttrLast=i;  _inTypeAttr=false;}if (_inRelAttr) {  _relAttrLast=i;  _inRelAttr=false;}if (_inMediaAttr) {  _mediaAttrLast=i;  _inMediaAttr=false;}ensureCapacity(LINK_INFO_LEN);_out[_outLen]=LINK_KIND;_out[_outLen + 1]=checkDuplicates(in,_out,urlToOffset,_hrefAttrFirst,_hrefAttrLast,_outLen + 1);_out[_outLen + LINK_FIRST]=_linkFirst;_out[_outLen + LINK_LAST]=i + 1;_out[_outLen + LINK_HREF_FIRST]=_hrefAttrFirst;_out[_outLen + LINK_HREF_LAST]=_hrefAttrLast;_out[_outLen + LINK_TYPE_FIRST]=_typeAttrFirst;_out[_outLen + LINK_TYPE_LAST]=_typeAttrLast;_out[_outLen + LINK_REL_FIRST]=_relAttrFirst;_out[_outLen + LINK_REL_LAST]=_relAttrLast;_out[_outLen + LINK_MEDIA_FIRST]=_mediaAttrFirst;_out[_outLen + LINK_MEDIA_LAST]=_mediaAttrLast;_out[_outLen + LINK_IN_IE_COMMENT]=(_inIEComment ? 1 : 0);_outLen+=LINK_INFO_LEN;_inLink=false;_linkFirst=(-1);_hrefAttrFirst=(-1);_hrefAttrLast=(-1);_typeAttrFirst=(-1);_typeAttrLast=(-1);_relAttrFirst=(-1);_relAttrLast=(-1);_mediaAttrFirst=(-1);_mediaAttrLast=(-1);} else if (_inInput) {_inInput=false;_inputFirst=(-1);_typeAttrFirst=(-1);_typeAttrLast=(-1);_srcAttrFirst=(-1);_srcAttrLast=(-1);} else if (_inFrame) {ensureCapacity(FRAME_INFO_LEN);_out[_outLen]=FRAME_KIND;_out[_outLen + FRAME_SRC_FIRST]=_srcAttrFirst;_out[_outLen + FRAME_SRC_LAST]=_srcAttrLast;_outLen+=FRAME_INFO_LEN;_inFrame=false;_srcAttrFirst=(-1);_srcAttrLast=(-1);} else if (_inIframe) {ensureCapacity(IFRAME_INFO_LEN);_out[_outLen]=IFRAME_KIND;_out[_outLen + IFRAME_FIRST]=_iframeFirst;_out[_outLen + IFRAME_LAST]=i + 1;_out[_outLen + IFRAME_SRC_FIRST]=_srcAttrFirst;_out[_outLen + IFRAME_SRC_LAST]=_srcAttrLast;_outLen+=IFRAME_INFO_LEN;_inIframe=false;_iframeFirst=(-1);_srcAttrFirst=(-1);_srcAttrLast=(-1);} else if (_inHeadStart) {ensureCapacity(HEAD_INFO_LEN);_out[_outLen]=HEAD_KIND;_out[_outLen + HEAD_START_FIRST]=_headStartFirst;_out[_outLen + HEAD_START_LAST]=i + 1;_outLen+=HEAD_INFO_LEN;_inHeadStart=false;} else if (_inBodyStart) {if (_inOnloadAttr) {  _onloadAttrLast=i;  _inOnloadAttr=false;}ensureCapacity(BODY_INFO_LEN);_out[_outLen]=BODY_KIND;_out[_outLen + BODY_START_FIRST]=_bodyStartFirst;_out[_outLen + BODY_START_LAST]=i + 1;_out[_outLen + BODY_ONLOAD_FIRST]=_onloadAttrFirst;_out[_outLen + BODY_ONLOAD_LAST]=_onloadAttrLast;_outLen+=BODY_INFO_LEN;_inBodyStart=false;_onloadAttrFirst=(-1);_onloadAttrLast=(-1);} else if (_inBase) {if (_inHrefAttr) {  _hrefAttrLast=i;  _inHrefAttr=false;}if (_hrefAttrFirst > 0) _base=new String(in,_hrefAttrFirst,_hrefAttrLast - _hrefAttrFirst);_out[_outLen]=BASE_KIND;_out[_outLen + BASE_HREF_FIRST]=_hrefAttrFirst;_out[_outLen + BASE_HREF_LAST]=_hrefAttrLast;_outLen+=BASE_INFO_LEN;_inBase=false;_hrefAttrFirst=(-1);_hrefAttrLast=(-1);} else if (_inMeta) {if (_inHttpEquivAttr) {  _httpEquivAttrLast=i;  _inHttpEquivAttr=false;}if (_inContentAttr) {  _contentAttrLast=i;  _inContentAttr=false;}if (_httpEquivAttrFirst > 0 && _contentAttrFirst > 0 && isMatching(in,_httpEquivAttrFirst,CONTENT_TYPE)) _metaContentType=new String(in,_contentAttrFirst,_contentAttrLast - _contentAttrFirst);_inMeta=false;_httpEquivAttrFirst=(-1);_httpEquivAttrLast=(-1);_contentAttrFirst=(-1);_contentAttrLast=(-1);} else if (_inAStart) {if (_inHrefAttr) {  _hrefAttrLast=i;  _inHrefAttr=false;}addA(in,i + 1);} else if (_inFormStart) {if (_inTargetAttr) {  _targetAttrLast=i;  _inTargetAttr=false;}ensureCapacity(FORM_INFO_LEN);_out[_outLen]=FORM_KIND;_out[_outLen + FORM_START_FIRST]=_formStartFirst;_out[_outLen + FORM_START_LAST]=i + 1;_out[_outLen + FORM_TARGET_FIRST]=_targetAttrFirst;_out[_outLen + FORM_TARGET_LAST]=_targetAttrLast;_outLen+=FORM_INFO_LEN;_inFormStart=false;_targetAttrFirst=(-1);_targetAttrLast=(-1);} else if (_inStyleStart) {_inStyleStart=false;_inStyle=true;ensureCapacity(STYLE_START_INFO_LEN);_out[_outLen]=STYLE_START_KIND;_out[_outLen + STYLE_START_FIRST]=_styleStartFirst;_out[_outLen + STYLE_START_LAST]=i + 1;_outLen+=STYLE_START_INFO_LEN;_styleStartFirst=(-1);} else if (_inStyleEnd) {_inStyleEnd=false;_inStyle=false;ensureCapacity(STYLE_END_INFO_LEN);_out[_outLen]=STYLE_END_KIND;_out[_outLen + STYLE_END_FIRST]=_styleEndFirst;_out[_outLen + STYLE_END_LAST]=i + 1;_outLen+=STYLE_END_INFO_LEN;_styleEndFirst=(-1);} else if (_inScriptStart) {_inScript=true;_inScriptStart=false;_scriptStartLast=i + 1;if (_inTypeAttr) {  _typeAttrLast=i;  _inTypeAttr=false;}} else if (_inScriptEnd) {ensureCapacity(SCRIPT_INFO_LEN);_out[_outLen]=SCRIPT_KIND;_out[_outLen + 1]=checkDuplicates(in,_out,urlToOffset,_srcAttrFirst,_srcAttrLast,_outLen + 1);_out[_outLen + SCRIPT_START_FIRST]=_scriptStartFirst;_out[_outLen + SCRIPT_SRC_FIRST]=_srcAttrFirst;_out[_outLen + SCRIPT_SRC_LAST]=_srcAttrLast;_out[_outLen + SCRIPT_TYPE_FIRST]=_typeAttrFirst;_out[_outLen + SCRIPT_TYPE_LAST]=_typeAttrLast;_out[_outLen + SCRIPT_START_LAST]=_scriptStartLast;_out[_outLen + SCRIPT_END_FIRST]=_scriptEndFirst;_out[_outLen + SCRIPT_END_LAST]=i + 1;_out[_outLen + SCRIPT_IS_DYNAMIC]=0;_out[_outLen + SCRIPT_IN_IE_COMMENT]=(_inIEComment ? 1 : 0);_outLen+=SCRIPT_INFO_LEN;_inScript=false;_inScriptEnd=false;_scriptStartFirst=(-1);_srcAttrFirst=(-1);_srcAttrLast=(-1);_typeAttrFirst=(-1);_typeAttrLast=(-1);_scriptStartLast=(-1);_scriptEndFirst=(-1);}}break;case 's':case 'S':if (_inHtmlComment) {} else if (!_inQuotes && !_inImg && _inTag&& !_inStyleAttr&& isMatching(in,i,STYLE_ATTR)) {_inStyleAttr=true;i+=STYLE_ATTR.length;while (i < in.length && (in[i] == '=' || in[i] <= ' ')) i++;_inAttrWithoutQuotes=(in[i] != '"' && in[i] != '\'');_styleAttrFirst=(_inAttrWithoutQuotes ? i : i + 1);continue;} else if (!_inQuotes && (_inImg || _inInput || _inIframe|| _inScriptStart) && !_inSrcAttr&& isMatching(in,i,SRC_ATTR)) {_inSrcAttr=true;i+=SRC_ATTR.length;while (i < in.length && (in[i] == '=' || in[i] <= ' ')) i++;_inAttrWithoutQuotes=(in[i] != '"' && in[i] != '\'');_srcAttrFirst=(_inAttrWithoutQuotes ? i : i + 1);continue;}break;case 'r':case 'R':if (_inHtmlComment) {} else if (!_inQuotes && _inLink && !_inRelAttr&& isMatching(in,i,REL_ATTR)) {_inRelAttr=true;i+=REL_ATTR.length;while (i < in.length && (in[i] == '=' || in[i] <= ' ')) i++;_inAttrWithoutQuotes=(in[i] != '"' && in[i] != '\'');_relAttrFirst=(_inAttrWithoutQuotes ? i : i + 1);continue;}break;case 'm':case 'M':if (_inHtmlComment) {} else if (!_inQuotes && _inLink && !_inMediaAttr&& isMatching(in,i,MEDIA_ATTR)) {_inMediaAttr=true;i+=MEDIA_ATTR.length;while (i < in.length && (in[i] == '=' || in[i] <= ' ')) i++;_inAttrWithoutQuotes=(in[i] != '"' && in[i] != '\'');_mediaAttrFirst=(_inAttrWithoutQuotes ? i : i + 1);continue;}break;case 't':case 'T':if (_inHtmlComment) {} else if (!_inQuotes && (_inScriptStart || _inInput) && !_inTypeAttr&& isMatching(in,i,TYPE_ATTR)) {_inTypeAttr=true;i+=TYPE_ATTR.length;while (i < in.length && (in[i] == '=' || in[i] <= ' ')) i++;_inAttrWithoutQuotes=(in[i] != '"' && in[i] != '\'');_typeAttrFirst=(_inAttrWithoutQuotes ? i : i + 1);continue;} else if (!_inQuotes && (_inAStart || _inFormStart) && !_inTargetAttr&& isMatching(in,i,TARGET_ATTR)) {_inTargetAttr=true;i+=TARGET_ATTR.length;while (i < in.length && (in[i] == '=' || in[i] <= ' ')) i++;_inAttrWithoutQuotes=(in[i] != '"' && in[i] != '\'');_targetAttrFirst=(_inAttrWithoutQuotes ? i : i + 1);continue;}break;case 'o':case 'O':if (_inHtmlComment) {} else if (!_inQuotes && _inTag && !_inEventAttr&& context.isServiceWithIframe&& (isMatching(in,i,ONCLICK_ATTR) || isMatching(in,i,ONMOUSE_ATTR))) {_inEventAttr=true;i+=ONCLICK_ATTR.length;while (i < in.length && (in[i] != '=')) i++;while (i < in.length && (in[i] == '=' || in[i] <= ' ')) i++;_inAttrWithoutQuotes=(in[i] != '"' && in[i] != '\'');_eventAttrFirst=(_inAttrWithoutQuotes ? i : i + 1);if (isMatching(in,_eventAttrFirst,JAVA_SCRIPT)) _eventAttrFirst+=JAVA_SCRIPT.length;continue;} else if (!_inQuotes && _inBodyStart && !_inOnloadAttr&& isMatching(in,i,ONLOAD_ATTR)) {_inOnloadAttr=true;i+=ONLOAD_ATTR.length;while (i < in.length && (in[i] == '=' || in[i] <= ' ')) i++;_inAttrWithoutQuotes=(in[i] != '"' && in[i] != '\'');_onloadAttrFirst=(_inAttrWithoutQuotes ? i : i + 1);continue;}break;case 'h':case 'H':if (_inHtmlComment) {} else if (!_inQuotes && _inTag && !_inEventAttr&& context.isServiceWithIframe&& (isMatching(in,i,HREF_EVENT1_ATTR) || isMatching(in,i,HREF_EVENT2_ATTR))) {_inEventAttr=true;i+=HREF_ATTR.length;while (i < in.length && (in[i] == '=' || in[i] <= ' ')) i++;_inAttrWithoutQuotes=(in[i] != '"' && in[i] != '\'');_eventAttrFirst=(_inAttrWithoutQuotes ? i : i + 1);if (isMatching(in,_eventAttrFirst,JAVA_SCRIPT)) _eventAttrFirst+=JAVA_SCRIPT.length;continue;} else if (!_inQuotes && (_inBase || _inLink || _inAStart) && !_inHrefAttr&& isMatching(in,i,HREF_ATTR)) {_inHrefAttr=true;i+=HREF_ATTR.length;while (i < in.length && (in[i] == '=' || in[i] <= ' ')) i++;_inAttrWithoutQuotes=(in[i] != '"' && in[i] != '\'');_hrefAttrFirst=(_inAttrWithoutQuotes ? i : i + 1);continue;} else if (!_inQuotes && _inMeta && !_inHttpEquivAttr&& isMatching(in,i,HTTP_EQUIV_ATTR)) {_inHttpEquivAttr=true;i+=HTTP_EQUIV_ATTR.length;while (i < in.length && (in[i] == '=' || in[i] <= ' ')) i++;_inAttrWithoutQuotes=(in[i] != '"' && in[i] != '\'');_httpEquivAttrFirst=(_inAttrWithoutQuotes ? i : i + 1);continue;}break;case 'c':case 'C':if (_inHtmlComment) {} else if (!_inQuotes && _inMeta && !_inContentAttr&& isMatching(in,i,CONTENT_ATTR)) {_inContentAttr=true;i+=CONTENT_ATTR.length;while (i < in.length && (in[i] == '=' || in[i] <= ' ')) i++;_inAttrWithoutQuotes=(in[i] != '"' && in[i] != '\'');_contentAttrFirst=(_inAttrWithoutQuotes ? i : i + 1);continue;}break;case ' ':if (_inHtmlComment) {} else if (!_inQuotes && _inAttrWithoutQuotes) {_inAttrWithoutQuotes=false;if (_inSrcAttr) {_inSrcAttr=false;_srcAttrLast=i;if (_inImg) addImg(in,urlToOffset); else if (_inInput) addInput(in,i,urlToOffset);} else if (_inStyleAttr) {_inStyleAttr=false;_styleAttrLast=i;} else if (_inTypeAttr) {_inTypeAttr=false;_typeAttrLast=i;} else if (_inOnloadAttr) {_inOnloadAttr=false;_onloadAttrLast=i;} else if (_inEventAttr) {_inEventAttr=false;_eventAttrLast=i;addEvent();} else if (_inHrefAttr) {_inHrefAttr=false;_hrefAttrLast=i;} else if (_inHttpEquivAttr) {_inHttpEquivAttr=false;_httpEquivAttrLast=i;} else if (_inContentAttr) {_inContentAttr=false;_contentAttrLast=i;}}break;case 'b':case 'B':if (_inHtmlComment) {} else if (_inStyle || _inStyleAttr) {int matchLen;if (isMatching(in,i,BGD)) {_inCssBgd=true;i+=BGD.length;continue;} else if ((matchLen=getMatchLen(in,i,BGD_IMG)) >= 0) {_inCssBgd=true;i+=matchLen;continue;}}break;case 'u':case 'U':if (_inHtmlComment) {} else if ((_inStyle || _inStyleAttr) && _inCssBgd && isMatching(in,i,URL)) {i+=URL.length;while (i < in.length && (in[i] == '(' || in[i] <= ' ' || in[i] == '"' || in[i] == '\'')) i++;int first=i;int last=first;while (last < in.length && in[last] != ')' && in[last] != '"' && in[last] != '\'') last++;if (last < in.length) {ensureCapacity(CSS_IMG_INFO_LEN);_out[_outLen]=CSS_IMG_KIND;_out[_outLen + 1]=checkDuplicates(in,_out,urlToOffset,first,last,_outLen + 1);_out[_outLen + CSS_IMG_FIRST]=first;_out[_outLen + CSS_IMG_LAST]=last;_outLen+=CSS_IMG_INFO_LEN;i=last;continue;}}break;case ';':case '}':_inCssBgd=false;break;}i++;}ensureCapacity(1);_out[_outLen]=EOF_KIND;return _out;}  }
class C{  protected void internalTransform(Body b,String phaseName,Map options){  if (Options.v().verbose())   G.v().out.println("[" + b.getMethod().getName() + "]     Removing Critical Edges...");  removeCriticalEdges(b);  if (Options.v().verbose())   G.v().out.println("[" + b.getMethod().getName() + "]     Removing Critical Edges done.");}  }
class C{  public boolean rFlagFunctionForRecompileOnce(StatementBlock sb,boolean inLoop){  boolean ret=false;  if (sb instanceof FunctionStatementBlock) {    FunctionStatementBlock fsb=(FunctionStatementBlock)sb;    FunctionStatement fstmt=(FunctionStatement)fsb.getStatement(0);    for (    StatementBlock c : fstmt.getBody())     ret|=rFlagFunctionForRecompileOnce(c,inLoop);  } else   if (sb instanceof WhileStatementBlock) {    ret=true;  } else   if (sb instanceof IfStatementBlock) {    IfStatementBlock isb=(IfStatementBlock)sb;    IfStatement istmt=(IfStatement)isb.getStatement(0);    ret|=(inLoop && isb.requiresPredicateRecompilation());    for (    StatementBlock c : istmt.getIfBody())     ret|=rFlagFunctionForRecompileOnce(c,inLoop);    for (    StatementBlock c : istmt.getElseBody())     ret|=rFlagFunctionForRecompileOnce(c,inLoop);  } else   if (sb instanceof ForStatementBlock) {    ret=true;  } else {    ret|=(inLoop && sb.requiresRecompilation());  }  return ret;}  }
class C{  @Override public void close(MessageContext context){}  }
class C{  public static void main(String[] args){  float af=1.0f / 3.0f;  float bf=5 / 3.0f;  float cf=33.0f;  float df=165.0f;  float ef=19;  float ff=95;  float fval=(cf - af) * (ff - bf) - (df - bf) * (ef - af);  double ad=1.0 / 3.0;  double bd=5 / 3.0;  double cd=33;  double dd=165;  double ed=19;  double fd=95;  double dval=(cd - ad) * (fd - bd) - (dd - bd) * (ed - ad);  System.out.println("\t\t\tfloat\t\tdouble");  System.out.println("a=1/3\t\t\t" + af + "\t"+ ad);  System.out.println("b=5/3\t\t\t" + bf + "\t"+ bd);  System.out.println("c=33\t\t\t" + cf + "\t\t"+ cd);  System.out.println("d=165\t\t\t" + df + "\t\t"+ dd);  System.out.println("e=19\t\t\t" + ef + "\t\t"+ ed);  System.out.println("f=95\t\t\t" + ff + "\t\t"+ fd);  System.out.println("(c-a)*(f-b)-(d-b)*(e-a)\t" + fval + "\t"+ dval);  System.out.println("\t\t\t" + "(0x" + Integer.toHexString(Float.floatToIntBits(fval)) + ")\t"+ "(0x"+ Long.toHexString(Double.doubleToLongBits(dval))+ ")");}  }
class C{  public void pop(){  popDownTo(stack.size() - 1);}  }
class C{  boolean merge(final ClassWriter cw,final Frame frame,final int edge){  boolean changed=false;  int i, s, dim, kind, t;  int nLocal=inputLocals.length;  int nStack=inputStack.length;  if (frame.inputLocals == null) {    frame.inputLocals=new int[nLocal];    changed=true;  }  for (i=0; i < nLocal; ++i) {    if (outputLocals != null && i < outputLocals.length) {      s=outputLocals[i];      if (s == 0) {        t=inputLocals[i];      } else {        dim=s & DIM;        kind=s & KIND;        if (kind == BASE) {          t=s;        } else {          if (kind == LOCAL) {            t=dim + inputLocals[s & VALUE];          } else {            t=dim + inputStack[nStack - (s & VALUE)];          }          if ((s & TOP_IF_LONG_OR_DOUBLE) != 0 && (t == LONG || t == DOUBLE)) {            t=TOP;          }        }      }    } else {      t=inputLocals[i];    }    if (initializations != null) {      t=init(cw,t);    }    changed|=merge(cw,t,frame.inputLocals,i);  }  if (edge > 0) {    for (i=0; i < nLocal; ++i) {      t=inputLocals[i];      changed|=merge(cw,t,frame.inputLocals,i);    }    if (frame.inputStack == null) {      frame.inputStack=new int[1];      changed=true;    }    changed|=merge(cw,edge,frame.inputStack,0);    return changed;  }  int nInputStack=inputStack.length + owner.inputStackTop;  if (frame.inputStack == null) {    frame.inputStack=new int[nInputStack + outputStackTop];    changed=true;  }  for (i=0; i < nInputStack; ++i) {    t=inputStack[i];    if (initializations != null) {      t=init(cw,t);    }    changed|=merge(cw,t,frame.inputStack,i);  }  for (i=0; i < outputStackTop; ++i) {    s=outputStack[i];    dim=s & DIM;    kind=s & KIND;    if (kind == BASE) {      t=s;    } else {      if (kind == LOCAL) {        t=dim + inputLocals[s & VALUE];      } else {        t=dim + inputStack[nStack - (s & VALUE)];      }      if ((s & TOP_IF_LONG_OR_DOUBLE) != 0 && (t == LONG || t == DOUBLE)) {        t=TOP;      }    }    if (initializations != null) {      t=init(cw,t);    }    changed|=merge(cw,t,frame.inputStack,nInputStack + i);  }  return changed;}  }
class C{  static public BigDecimal convertProductFrom(Properties ctx,int M_Product_ID,int C_UOM_To_ID,BigDecimal qtyPrice){  if (qtyPrice == null || qtyPrice.compareTo(Env.ZERO) == 0 || C_UOM_To_ID == 0 || M_Product_ID == 0) {    s_log.fine("No Conversion - QtyPrice=" + qtyPrice);    return qtyPrice;  }  BigDecimal retValue=getProductRateFrom(ctx,M_Product_ID,C_UOM_To_ID);  if (retValue != null) {    if (Env.ONE.compareTo(retValue) == 0)     return qtyPrice;    MUOM uom=MUOM.get(ctx,C_UOM_To_ID);    if (uom != null)     return uom.round(retValue.multiply(qtyPrice),true);    return retValue.multiply(qtyPrice);  }  s_log.fine("No Rate M_Product_ID=" + M_Product_ID);  return null;}  }
class C{  public final void free(){  _source=null;  TempBufferData tempWrite=_tempWrite;  _tempWrite=null;  _writeBuffer=null;  if (tempWrite != null) {    tempWrite.free();  }}  }
class C{  public java.awt.Color convertColor(final Color c){  return new java.awt.Color(c.getRed(),c.getGreen(),c.getBlue());}  }
class C{  public static Number mul(Number a,Number b){  if (isFloatingPoint(a) || isFloatingPoint(b)) {    return a.doubleValue() * b.doubleValue();  } else {    return a.longValue() * b.longValue();  }}  }
class C{  @Override public void run(){  amIActive=true;  try {    String inputFilesString="";    String sagaHeaderFile="";    String sagaDataFile="";    int i=0;    int row, col, rows=0, cols=0;    double north=0, south=0, east=0, west=0, cellSize=0;    long dataFileOffset=0;    double zFactor=1.0;    String description="";    String xyUnit="not specified";    String dataFormat="";    boolean topToBottom=false;    int rowStart=0;    int rowIncrement=1;    java.nio.ByteOrder byteorder=java.nio.ByteOrder.BIG_ENDIAN;    String[] imageFiles;    int numImages=0;    double noData=-32768;    String returnHeaderFile="";    DataInputStream in=null;    BufferedReader br=null;    if (args.length <= 0) {      showFeedback("Plugin parameters have not been set.");      return;    }    inputFilesString=args[0];    if ((inputFilesString == null)) {      showFeedback("One or more of the input parameters have not been set properly.");      return;    }    imageFiles=inputFilesString.split(";");    numImages=imageFiles.length;    for (i=0; i < numImages; i++) {      int progress=(int)(100f * i / (numImages - 1));      if (numImages > 1) {        updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      }      String inputFile=imageFiles[i];      File file=new File(inputFile);      if (!file.exists()) {        showFeedback("Image file does not exist.");        break;      }      String fileExtension=whitebox.utilities.FileUtilities.getFileExtension(inputFile).toLowerCase();      if (fileExtension.equals("sgrd")) {        sagaHeaderFile=inputFile;        sagaDataFile=inputFile.replace(fileExtension,"sdat");        if (!new File(sagaDataFile).exists()) {          showFeedback("Image file does not exist.");          break;        }      } else {        sagaDataFile=inputFile;        sagaHeaderFile=inputFile.replace(fileExtension,"sgrd");        if (!new File(sagaHeaderFile).exists()) {          showFeedback("Image file does not exist.");          break;        }      }      FileInputStream fstream=new FileInputStream(sagaHeaderFile);      in=new DataInputStream(fstream);      br=new BufferedReader(new InputStreamReader(in));      String delimiter="\t";      String line;      String[] str;      while ((line=br.readLine()) != null) {        str=line.split(delimiter);        if (str.length <= 1) {          delimiter=" ";          str=line.split(delimiter);          if (str.length <= 1) {            delimiter=",";            str=line.split(delimiter);          }        }        if (str[0].toLowerCase().contains("description")) {          description=str[str.length - 1].replace("=","").trim();        } else         if (str[0].toLowerCase().contains("unit")) {          if (!str[str.length - 1].replace("=","").trim().isEmpty()) {            xyUnit=str[str.length - 1].replace("=","").trim();          }        } else         if (str[0].toLowerCase().contains("datafile_offset")) {          dataFileOffset=Long.parseLong(str[str.length - 1].replace("=","").trim());        } else         if (str[0].toLowerCase().contains("dataformat")) {          dataFormat=str[str.length - 1].replace("=","").trim().toLowerCase();        } else         if (str[0].toLowerCase().contains("byteorder_big")) {          if (str[str.length - 1].toLowerCase().contains("f")) {            byteorder=java.nio.ByteOrder.LITTLE_ENDIAN;          } else {            byteorder=java.nio.ByteOrder.BIG_ENDIAN;          }        } else         if (str[0].toLowerCase().contains("position_xmin")) {          west=Double.parseDouble(str[str.length - 1].replace("=","").trim());        } else         if (str[0].toLowerCase().contains("position_ymin")) {          south=Double.parseDouble(str[str.length - 1].replace("=","").trim());        } else         if (str[0].toLowerCase().contains("cellcount_x")) {          cols=Integer.parseInt(str[str.length - 1].replace("=","").trim());        } else         if (str[0].toLowerCase().contains("cellcount_y")) {          rows=Integer.parseInt(str[str.length - 1].replace("=","").trim());        } else         if (str[0].toLowerCase().contains("cellsize")) {          cellSize=Double.parseDouble(str[str.length - 1].replace("=","").trim());        } else         if (str[0].toLowerCase().contains("z_factor")) {          zFactor=Double.parseDouble(str[str.length - 1].replace("=","").trim());        } else         if (str[0].toLowerCase().contains("nodata_value")) {          noData=Double.parseDouble(str[str.length - 1].replace("=","").trim());        } else         if (str[0].toLowerCase().contains("toptobottom")) {          topToBottom=!str[str.length - 1].toLowerCase().contains("f");        }      }      north=south + cellSize * rows;      east=west + cellSize * cols;      if (!topToBottom) {        rowStart=rows - 1;        rowIncrement=-1;      }      in.close();      br.close();      WhiteboxRasterBase.DataType outputDataType;switch (dataFormat) {case "bit":case "byte_unsigned":case "byte":case "shortint_unsigned":case "shortint":        outputDataType=WhiteboxRasterBase.DataType.INTEGER;      break;case "float":    outputDataType=WhiteboxRasterBase.DataType.FLOAT;  break;default :outputDataType=WhiteboxRasterBase.DataType.DOUBLE;break;}if (zFactor < 1.0 && outputDataType == WhiteboxRasterBase.DataType.INTEGER) {outputDataType=WhiteboxRasterBase.DataType.FLOAT;}String whiteboxHeaderFile=imageFiles[i].replace(fileExtension,"dep");if (i == 0) {returnHeaderFile=whiteboxHeaderFile;}WhiteboxRaster output=new WhiteboxRaster(whiteboxHeaderFile,north,south,east,west,rows,cols,WhiteboxRasterBase.DataScale.CONTINUOUS,outputDataType,noData,noData);file=new File(sagaDataFile);int fileLength=(int)file.length();RandomAccessFile rIn=null;FileChannel inChannel=null;ByteBuffer buf=ByteBuffer.allocate(fileLength);rIn=new RandomAccessFile(sagaDataFile,"r");inChannel=rIn.getChannel();inChannel.position(0);inChannel.read(buf);buf.order(byteorder);buf.rewind();byte[] ba=new byte[(int)fileLength];buf.get(ba);double z;row=0;col=0;int pos=(int)dataFileOffset;int oldProgress=-1;boolean flag=true;row=rowStart;switch (dataFormat) {case "bit":byte b;while (flag) {b=buf.get(pos);for (int bit=0; bit < 8; bit++) {if (BitOps.checkBit(b,bit)) {output.setValue(row,col,1.0);} else {output.setValue(row,col,0.0);}col++;if (col >= cols) {row+=rowIncrement;progress=(int)(100f * (row - rowStart) / (rows - 1));if (progress != oldProgress) {  updateProgress("Importing SAGA file...",progress);  oldProgress=progress;}}if (row >= rows || row < 0) {flag=false;}}pos+=1;if (pos >= fileLength) {flag=false;}}case "byte_unsigned":while (flag) {for (col=0; col < cols; col++) {z=(double)(Unsigned.getUnsignedByte(buf,pos)) * zFactor;output.setValue(row,col,z);pos+=1;}progress=(int)(100f * (row - rowStart) / (rows - 1));if (progress != oldProgress) {updateProgress("Importing SAGA file...",progress);oldProgress=progress;}row+=rowIncrement;if (row >= rows || row < 0) {flag=false;}}case "byte":while (flag) {for (col=0; col < cols; col++) {z=(double)buf.get(pos) * zFactor;output.setValue(row,col,z);pos+=1;}progress=(int)(100f * (row - rowStart) / (rows - 1));if (progress != oldProgress) {updateProgress("Importing SAGA file...",progress);oldProgress=progress;}row+=rowIncrement;if (row >= rows || row < 0) {flag=false;}}case "shortint_unsigned":while (flag) {for (col=0; col < cols; col++) {z=(double)(Unsigned.getUnsignedShort(buf,pos)) * zFactor;output.setValue(row,col,z);pos+=2;}progress=(int)(100f * (row - rowStart) / (rows - 1));if (progress != oldProgress) {updateProgress("Importing SAGA file...",progress);oldProgress=progress;}row+=rowIncrement;if (row >= rows || row < 0) {flag=false;}}case "shortint":while (flag) {for (col=0; col < cols; col++) {z=(double)buf.getShort(pos) * zFactor;output.setValue(row,col,z);pos+=2;}progress=(int)(100f * (row - rowStart) / (rows - 1));if (progress != oldProgress) {updateProgress("Importing SAGA file...",progress);oldProgress=progress;}row+=rowIncrement;if (row >= rows || row < 0) {flag=false;}}case "integer":while (flag) {for (col=0; col < cols; col++) {z=(double)buf.getInt(pos) * zFactor;output.setValue(row,col,z);pos+=4;}progress=(int)(100f * (row - rowStart) / (rows - 1));if (progress != oldProgress) {updateProgress("Importing SAGA file...",progress);oldProgress=progress;}row+=rowIncrement;if (row >= rows || row < 0) {flag=false;}}break;case "integer_unsigned":while (flag) {for (col=0; col < cols; col++) {z=(double)(Unsigned.getUnsignedInt(buf,pos)) * zFactor;output.setValue(row,col,z);pos+=4;}progress=(int)(100f * (row - rowStart) / (rows - 1));if (progress != oldProgress) {updateProgress("Importing SAGA file...",progress);oldProgress=progress;}row+=rowIncrement;if (row >= rows || row < 0) {flag=false;}}case "float":while (flag) {for (col=0; col < cols; col++) {z=(double)buf.getFloat(pos) * zFactor;output.setValue(row,col,z);pos+=4;}progress=(int)(100f * (row - rowStart) / (rows - 1));if (progress != oldProgress) {updateProgress("Importing SAGA file...",progress);oldProgress=progress;}row+=rowIncrement;if (row >= rows || row < 0) {flag=false;}}break;default :while (flag) {for (col=0; col < cols; col++) {z=buf.getDouble(pos) * zFactor;output.setValue(row,col,z);pos+=8;}progress=(int)(100f * (row - rowStart) / (rows - 1));if (progress != oldProgress) {updateProgress("Importing SAGA file...",progress);oldProgress=progress;}row+=rowIncrement;if (row >= rows || row < 0) {flag=false;}}break;}inChannel.close();output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");output.addMetadataEntry("Created on " + new Date());output.flush();output.findMinAndMaxVals();output.writeHeaderFile();output.close();}returnData(returnHeaderFile);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(4);  newVector.addElement(new Option("\tDo not use ADTree data structure\n","D",0,"-D"));  newVector.addElement(new Option("\tBIF file to compare with\n","B",1,"-B <BIF file>"));  newVector.addElement(new Option("\tSearch algorithm\n","Q",1,"-Q weka.classifiers.bayes.net.search.SearchAlgorithm"));  newVector.addElement(new Option("\tEstimator algorithm\n","E",1,"-E weka.classifiers.bayes.net.estimate.SimpleEstimator"));  newVector.addAll(Collections.list(super.listOptions()));  newVector.addElement(new Option("","",0,"\nOptions specific to search method " + getSearchAlgorithm().getClass().getName() + ":"));  newVector.addAll(Collections.list(getSearchAlgorithm().listOptions()));  newVector.addElement(new Option("","",0,"\nOptions specific to estimator method " + getEstimator().getClass().getName() + ":"));  newVector.addAll(Collections.list(getEstimator().listOptions()));  return newVector.elements();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void save(Graph<V,E> g,String filename,Function<V,String> vs,Function<E,Number> nev,Function<V,Point2D> vld) throws IOException {  save(g,new FileWriter(filename),vs,nev,vld);}  }
class C{  public boolean isAppendTransients(){  return this.appendTransients;}  }
class C{  @Override public boolean isSpecified(){  return true;}  }
class C{  public String globalInfo(){  return "SMOreg implements the support vector machine for regression. " + "The parameters can be learned using various algorithms. The " + "algorithm is selected by setting the RegOptimizer. The most "+ "popular algorithm (" + RegSMOImproved.class.getName().replaceAll(".*\\.","") + ") is due to Shevade, Keerthi "+ "et al and this is the default RegOptimizer.\n\n"+ "For more information see:\n\n"+ getTechnicalInformation().toString();}  }
class C{  private void refreshListViewHeight(ListView listView){  ListAdapter listAdapter=listView.getAdapter();  int totalHeight=0;  for (int i=0; i < listAdapter.getCount(); i++) {    View listItem=listAdapter.getView(i,null,listView);    listItem.measure(0,0);    totalHeight+=listItem.getMeasuredHeight();  }  ViewGroup.LayoutParams params=listView.getLayoutParams();  params.height=totalHeight + (listView.getDividerHeight() * (listAdapter.getCount() - 1));  listView.setLayoutParams(params);  listView.requestLayout();}  }
class C{  public void doFilter(ServletRequest request,ServletResponse response,FilterChain filterChain) throws IOException, ServletException {  HttpMon httpMon=null;  try {    httpMon=httpMonFactory.start(request,response);    filterChain.doFilter(request,response);  } catch (  Throwable e) {    httpMon.throwException(e);  } finally {    httpMon.stop();  }}  }
class C{  public Matrix(int rows,int columns){  this.rows=rows;  this.columns=columns;  values=new double[rows][columns];}  }
class C{  private boolean removeMapping(Object key,Object value){  Object k=maskNull(key);  Object[] tab=table;  int len=tab.length;  int i=hash(k,len);  while (true) {    Object item=tab[i];    if (item == k) {      if (tab[i + 1] != value)       return false;      modCount++;      size--;      tab[i]=null;      tab[i + 1]=null;      closeDeletion(i);      return true;    }    if (item == null)     return false;    i=nextKeyIndex(i,len);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:49.697 -0500",hash_original_method="129EA72B0C9F078142A2BC814FB30CFA",hash_generated_method="1395F39F0AFF24A9D7E47FBD6C73F711") public boolean isMWIClearMessage(){  return mWrappedSmsMessage.isMWIClearMessage();}  }
class C{  @ReactMethod public void share(ReadableMap content,String dialogTitle,Promise promise){  if (content == null) {    promise.reject(ERROR_INVALID_CONTENT,"Content cannot be null");    return;  }  try {    Intent intent=new Intent(Intent.ACTION_SEND);    intent.setTypeAndNormalize("text/plain");    if (content.hasKey("title")) {      intent.putExtra(Intent.EXTRA_SUBJECT,content.getString("title"));    }    if (content.hasKey("message")) {      intent.putExtra(Intent.EXTRA_TEXT,content.getString("message"));    }    Intent chooser=Intent.createChooser(intent,dialogTitle);    chooser.addCategory(Intent.CATEGORY_DEFAULT);    Activity currentActivity=getCurrentActivity();    if (currentActivity != null) {      currentActivity.startActivity(chooser);    } else {      getReactApplicationContext().startActivity(chooser);    }    WritableMap result=Arguments.createMap();    result.putString("action",ACTION_SHARED);    promise.resolve(result);  } catch (  Exception e) {    promise.reject(ERROR_UNABLE_TO_OPEN_DIALOG,"Failed to open share dialog");  }}  }
class C{  public double logValue(final double x){  QL.require(x > 0.0,"positive argument required");  double temp=x + 5.5;  temp-=(x + 0.5) * Math.log(temp);  double ser=1.000000000190015;  ser+=c1_ / (x + 1.0);  ser+=c2_ / (x + 2.0);  ser+=c3_ / (x + 3.0);  ser+=c4_ / (x + 4.0);  ser+=c5_ / (x + 5.0);  ser+=c6_ / (x + 6.0);  return -temp + Math.log(2.5066282746310005 * ser / x);}  }
class C{  public ChunkCoordIntPair toPair(){  return new ChunkCoordIntPair(xCoord,zCoord);}  }
class C{  public void clear(){  int max=bits.length;  for (int i=0; i < max; i++) {    bits[i]=0;  }}  }
class C{  protected void checkSignature(byte[] buf){  if (!Arrays.equals(buf,PngHelperInternal.getPngIdSignature()))   throw new PngjInputException("Bad PNG signature");}  }
class C{  public static void w(String tag,String s){  if (LOG.WARN >= LOGLEVEL)   Log.w(tag,s);}  }
class C{  public static void closeSafely(@Nullable Iterable<? extends CloseableReference<?>> references){  if (references != null) {    for (    CloseableReference<?> ref : references) {      closeSafely(ref);    }  }}  }
class C{  @TargetApi(21) public static AddonOverviewFragment newInstance(AddonListFragment.ViewHolder vh){  AddonOverviewFragment fragment=new AddonOverviewFragment();  Bundle args=new Bundle();  args.putString(AddonDetailsFragment.BUNDLE_KEY_ADDONID,vh.addonId);  args.putString(AddonDetailsFragment.BUNDLE_KEY_NAME,vh.addonName);  args.putString(AddonDetailsFragment.BUNDLE_KEY_AUTHOR,vh.author);  args.putString(AddonDetailsFragment.BUNDLE_KEY_VERSION,vh.version);  args.putString(AddonDetailsFragment.BUNDLE_KEY_SUMMARY,vh.summary);  args.putString(AddonDetailsFragment.BUNDLE_KEY_DESCRIPTION,vh.description);  args.putString(AddonDetailsFragment.BUNDLE_KEY_FANART,vh.fanart);  args.putString(AddonDetailsFragment.BUNDLE_KEY_POSTER,vh.poster);  args.putBoolean(AddonDetailsFragment.BUNDLE_KEY_ENABLED,vh.enabled);  args.putBoolean(AddonDetailsFragment.BUNDLE_KEY_BROWSABLE,vh.browsable);  if (Utils.isLollipopOrLater()) {    args.putString(AddonDetailsFragment.POSTER_TRANS_NAME,vh.artView.getTransitionName());  }  fragment.setArguments(args);  return fragment;}  }
class C{  public long totalTimeMS(){  return totalTime() / 1000000;}  }
class C{  public void addAllOf(IntArrayList list){  int listSize=list.size();  if (this.size + listSize >= this.capacity)   flush();  this.target.addAllOf(list);}  }
class C{  public static boolean moveToMarker(InputStream is,int markerToFind) throws IOException {  Preconditions.checkNotNull(is);  while (StreamProcessor.readPackedInt(is,1,false) == MARKER_FIRST_BYTE) {    int marker=MARKER_FIRST_BYTE;    while (marker == MARKER_FIRST_BYTE) {      marker=StreamProcessor.readPackedInt(is,1,false);    }    if (markerToFind == MARKER_SOFn && isSOFn(marker)) {      return true;    }    if (marker == markerToFind) {      return true;    }    if (marker == MARKER_SOI || marker == MARKER_TEM) {      continue;    }    if (marker == MARKER_EOI || marker == MARKER_SOS) {      return false;    }    int length=StreamProcessor.readPackedInt(is,2,false) - 2;    is.skip(length);  }  return false;}  }
class C{  public Integer peek(){  return next;}  }
class C{  @Override public boolean isEmpty(){  return size == 0;}  }
class C{  private static void printResult(GoogleBaseFeed feed){  if (feed.getTotalResults() == 0) {    System.out.println("No matches.");  } else {    for (    GoogleBaseEntry entry : feed.getEntries()) {      System.out.println(entry.getGoogleBaseAttributes().getItemType() + ": " + entry.getTitle().getPlainText()+ " - "+ entry.getId());    }  }}  }
class C{  private PostgreSQLDataImporter(){}  }
class C{  private void drawCircle(Canvas canvas,float cx,float cy,int color,float pct){  mPaint.setColor(color);  canvas.save();  canvas.translate(cx,cy);  float radiusScale=INTERPOLATOR.getInterpolation(pct);  canvas.scale(radiusScale,radiusScale);  canvas.drawCircle(0,0,cx,mPaint);  canvas.restore();}  }
class C{  private void repaintLine(int line){  int y=textArea.getInsets().top;  y+=line * cellHeight;  repaint(0,y,cellWidth,cellHeight);}  }
class C{  public static boolean isWhiteSpace(String s){  if (null != s) {    int n=s.length();    for (int i=0; i < n; i++) {      if (!isWhiteSpace(s.charAt(i)))       return false;    }  }  return true;}  }
class C{  public void postIndex(Engine.Index index,Throwable ex){}  }
class C{  final private boolean isPotentiallyAssigned(int position){  if (position < BitCacheSize) {    return (this.potentialInits & (1L << position)) != 0;  }  if (this.extra == null) {    return false;  }  int vectorIndex;  if ((vectorIndex=(position / BitCacheSize) - 1) >= this.extra[0].length) {    return false;  }  return ((this.extra[1][vectorIndex]) & (1L << (position % BitCacheSize))) != 0;}  }
class C{  public File createPDF(){  try {    File temp=File.createTempFile(get_TableName() + get_ID() + "_",".pdf");    return createPDF(temp);  } catch (  Exception e) {    log.severe("Could not create PDF - " + e.getMessage());  }  return null;}  }
class C{  public static String decodeString(String s){  int backSlashIdx=s.indexOf('\\');  if (backSlashIdx == -1) {    return s;  }  int startIdx=0;  int sLength=s.length();  StringBuilder sb=new StringBuilder(sLength);  while (backSlashIdx != -1) {    sb.append(s.substring(startIdx,backSlashIdx));    if (backSlashIdx + 1 >= sLength) {      throw new IllegalArgumentException("Unescaped backslash in: " + s);    }    char c=s.charAt(backSlashIdx + 1);    if (c == 't') {      sb.append('\t');      startIdx=backSlashIdx + 2;    } else     if (c == 'n') {      sb.append('\n');      startIdx=backSlashIdx + 2;    } else     if (c == 'r') {      sb.append('\r');      startIdx=backSlashIdx + 2;    } else     if (c == 'b') {      sb.append('\b');      startIdx=backSlashIdx + 2;    } else     if (c == 'f') {      sb.append('\f');      startIdx=backSlashIdx + 2;    } else     if (c == '"') {      sb.append('"');      startIdx=backSlashIdx + 2;    } else     if (c == '\\') {      sb.append('\\');      startIdx=backSlashIdx + 2;    } else     if (c == 'u') {      if (backSlashIdx + 5 >= sLength) {        throw new IllegalArgumentException("Incomplete Unicode escape sequence in: " + s);      }      String xx=s.substring(backSlashIdx + 2,backSlashIdx + 6);      try {        c=(char)Integer.parseInt(xx,16);        sb.append(c);        startIdx=backSlashIdx + 6;      } catch (      NumberFormatException e) {        throw new IllegalArgumentException("Illegal Unicode escape sequence '\\u" + xx + "' in: "+ s);      }    } else     if (c == 'U') {      if (backSlashIdx + 9 >= sLength) {        throw new IllegalArgumentException("Incomplete Unicode escape sequence in: " + s);      }      String xx=s.substring(backSlashIdx + 2,backSlashIdx + 10);      try {        c=(char)Integer.parseInt(xx,16);        sb.append(c);        startIdx=backSlashIdx + 10;      } catch (      NumberFormatException e) {        throw new IllegalArgumentException("Illegal Unicode escape sequence '\\U" + xx + "' in: "+ s);      }    } else {      throw new IllegalArgumentException("Unescaped backslash in: " + s);    }    backSlashIdx=s.indexOf('\\',startIdx);  }  sb.append(s.substring(startIdx));  return sb.toString();}  }
class C{  protected int decrementThreadCount(){  return threadCount.decrementAndGet();}  }
class C{  public Attribute parseAttribute() throws IOException {  int nameIndex=readShort();  String name=_cp.getUtf8(nameIndex).getValue();  if (name.equals("Code")) {    CodeAttribute code=new CodeAttribute(name);    code.read(this);    return code;  } else   if (name.equals("Exceptions")) {    ExceptionsAttribute code=new ExceptionsAttribute(name);    code.read(this);    return code;  } else   if (name.equals("Signature")) {    SignatureAttribute attr=new SignatureAttribute();    attr.read(this);    return attr;  } else   if (name.equals("BootstrapMethods")) {    BootstrapMethodAttribute attr=new BootstrapMethodAttribute();    attr.read(this);    return attr;  }  OpaqueAttribute attr=new OpaqueAttribute(name);  int length=readInt();  byte[] bytes=new byte[length];  read(bytes,0,bytes.length);  attr.setValue(bytes);  return attr;}  }
class C{  private GuacamoleInstruction expect(GuacamoleReader reader,String opcode) throws GuacamoleException {  GuacamoleInstruction instruction=reader.readInstruction();  if (instruction == null)   throw new GuacamoleServerException("End of stream while waiting for \"" + opcode + "\".");  if (!instruction.getOpcode().equals(opcode))   throw new GuacamoleServerException("Expected \"" + opcode + "\" instruction but instead received \""+ instruction.getOpcode()+ "\".");  return instruction;}  }
class C{  public static String addRestrictions(String sql,boolean queryOnly,MGoalRestriction[] restrictions,MRole role,String tableName,String orgColumn,String bpColumn,String pColumn){  StringBuffer sb=new StringBuffer(sql);  if (orgColumn != null) {    ArrayList<Integer> list=new ArrayList<Integer>();    for (int i=0; i < restrictions.length; i++) {      if (MGoalRestriction.GOALRESTRICTIONTYPE_Organization.equals(restrictions[i].getGoalRestrictionType()))       list.add(restrictions[i].getOrg_ID());    }    if (list.size() == 1)     sb.append(" AND ").append(orgColumn).append("=").append(list.get(0)); else     if (list.size() > 1) {      sb.append(" AND ").append(orgColumn).append(" IN (");      for (int i=0; i < list.size(); i++) {        if (i > 0)         sb.append(",");        sb.append(list.get(i));      }      sb.append(")");    }  }  if (bpColumn != null) {    ArrayList<Integer> listBP=new ArrayList<Integer>();    ArrayList<Integer> listBPG=new ArrayList<Integer>();    for (int i=0; i < restrictions.length; i++) {      if (MGoalRestriction.GOALRESTRICTIONTYPE_BusinessPartner.equals(restrictions[i].getGoalRestrictionType()))       listBP.add(restrictions[i].getC_BPartner_ID());      if (MGoalRestriction.GOALRESTRICTIONTYPE_BusPartnerGroup.equals(restrictions[i].getGoalRestrictionType()))       listBPG.add(restrictions[i].getC_BP_Group_ID());    }    if (listBP.size() == 1)     sb.append(" AND ").append(bpColumn).append("=").append(listBP.get(0)); else     if (listBP.size() > 1) {      sb.append(" AND ").append(bpColumn).append(" IN (");      for (int i=0; i < listBP.size(); i++) {        if (i > 0)         sb.append(",");        sb.append(listBP.get(i));      }      sb.append(")");    }    if (bpColumn.indexOf('.') == -1)     bpColumn=tableName + "." + bpColumn;    if (listBPG.size() == 1)     sb.append(" AND EXISTS (SELECT * FROM C_BPartner bpx WHERE ").append(bpColumn).append("=bpx.C_BPartner_ID AND bpx.C_BP_GROUP_ID=").append(listBPG.get(0)).append(")"); else     if (listBPG.size() > 1) {      sb.append(" AND EXISTS (SELECT * FROM C_BPartner bpx WHERE ").append(bpColumn).append("=bpx.C_BPartner_ID AND bpx.C_BP_GROUP_ID IN (");      for (int i=0; i < listBPG.size(); i++) {        if (i > 0)         sb.append(",");        sb.append(listBPG.get(i));      }      sb.append("))");    }  }  if (pColumn != null) {    ArrayList<Integer> listP=new ArrayList<Integer>();    ArrayList<Integer> listPC=new ArrayList<Integer>();    for (int i=0; i < restrictions.length; i++) {      if (MGoalRestriction.GOALRESTRICTIONTYPE_Product.equals(restrictions[i].getGoalRestrictionType()))       listP.add(restrictions[i].getM_Product_ID());      if (MGoalRestriction.GOALRESTRICTIONTYPE_ProductCategory.equals(restrictions[i].getGoalRestrictionType()))       listPC.add(restrictions[i].getM_Product_Category_ID());    }    if (listP.size() == 1)     sb.append(" AND ").append(pColumn).append("=").append(listP.get(0)); else     if (listP.size() > 1) {      sb.append(" AND ").append(pColumn).append(" IN (");      for (int i=0; i < listP.size(); i++) {        if (i > 0)         sb.append(",");        sb.append(listP.get(i));      }      sb.append(")");    }    if (pColumn.indexOf('.') == -1)     pColumn=tableName + "." + pColumn;    if (listPC.size() == 1)     sb.append(" AND EXISTS (SELECT * FROM M_Product px WHERE ").append(pColumn).append("=px.M_Product_ID AND px.M_Product_Category_ID=").append(listPC.get(0)).append(")"); else     if (listPC.size() > 1) {      sb.append(" AND EXISTS (SELECT * FROM M_Product px WHERE ").append(pColumn).append("=px.M_Product_ID AND px.M_Product_Category_ID IN (");      for (int i=0; i < listPC.size(); i++) {        if (i > 0)         sb.append(",");        sb.append(listPC.get(i));      }      sb.append("))");    }  }  String finalSQL=sb.toString();  if (queryOnly)   return finalSQL;  if (role == null)   role=MRole.getDefault();  String retValue=role.addAccessSQL(finalSQL,tableName,true,false);  return retValue;}  }
class C{  @SuppressWarnings("deprecation") static HttpUriRequest createHttpRequest(Request<?> request,Map<String,String> additionalHeaders) throws AuthFailureError {switch (request.getMethod()) {case Method.DEPRECATED_GET_OR_POST:{      byte[] postBody=request.getPostBody();      if (postBody != null) {        HttpPost postRequest=new HttpPost(request.getUrl());        postRequest.addHeader(HEADER_CONTENT_TYPE,request.getPostBodyContentType());        HttpEntity entity;        entity=new ByteArrayEntity(postBody);        postRequest.setEntity(entity);        return postRequest;      } else {        return new HttpGet(request.getUrl());      }    }case Method.GET:  return new HttpGet(request.getUrl());case Method.DELETE:return new HttpDelete(request.getUrl());case Method.POST:{HttpPost postRequest=new HttpPost(request.getUrl());postRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(postRequest,request);return postRequest;}case Method.PUT:{HttpPut putRequest=new HttpPut(request.getUrl());putRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(putRequest,request);return putRequest;}case Method.HEAD:return new HttpHead(request.getUrl());case Method.OPTIONS:return new HttpOptions(request.getUrl());case Method.TRACE:return new HttpTrace(request.getUrl());case Method.PATCH:{HttpPatch patchRequest=new HttpPatch(request.getUrl());patchRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(patchRequest,request);return patchRequest;}default :throw new IllegalStateException("Unknown request method.");}}  }
class C{  public void postStickyRemote(Object event){  sendEventOverGooglePlayServices(event,true);}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:24.410 -0500",hash_original_method="BE481800D6C8FAA522EB6457C475667B",hash_generated_method="F44233FB347E5FD4543E20B51FB6AAAB") public Window destroyActivity(String id,boolean finish){  LocalActivityRecord r=mActivities.get(id);  Window win=null;  if (r != null) {    win=performDestroy(r,finish);    if (finish) {      mActivities.remove(id);      mActivityArray.remove(r);    }  }  return win;}  }
class C{  public final void consume(Product product){  if (product.subscription() || !product.purchased()) {    throw new IllegalArgumentException("Only inapp purchases can be consumed");  }  try {    final Purchase purchase=inventory.getPurchase(product.sku());    helper.consumeAsync(purchase,consumeFinishedListener);    LOG.info("product " + product.sku() + " consumed (async).");  } catch (  IabHelper.IabAsyncInProgressException e) {    LOG.error("Error consuming purchase. Another async operation in progress.",e);  }catch (  Throwable e) {    LOG.error("Error consuming purchase.",e);  }}  }
class C{  public BitmapAjaxCallback bitmap(Bitmap bm){  this.bm=bm;  return this;}  }
class C{  public void updateCallbackBufferAndSwap(FloatBuffer callbackBuffer,int pointCount,double timestamp,TangoPoseData pointCloudPose){synchronized (PointCloudManager.mPointCloudLock) {    newTimestamp=timestamp;    this.pointCloudPose=pointCloudPose;    mSharedPointCloudData.floatBuffer.position(0);    mCallbackPointCloudData.floatBuffer.position(0);    mCallbackPointCloudData.floatBuffer.put(callbackBuffer);    FloatBuffer temp=mSharedPointCloudData.floatBuffer;    mSharedPointCloudData.floatBuffer=mCallbackPointCloudData.floatBuffer;    mSharedPointCloudData.pointCount=mCallbackPointCloudData.pointCount;    mCallbackPointCloudData.floatBuffer=temp;    mCallbackPointCloudData.pointCount=pointCount;    mSwapSignal=true;  }}  }
class C{  private void scheduleCacheCleanup(Context context){  if (!isAlarmActive(context)) {    mAlarmManager.setInexactRepeating(AlarmManager.ELAPSED_REALTIME_WAKEUP,SystemClock.elapsedRealtime() + CLEANUP_SCHEDULER_TIME_INTERVAL,CLEANUP_SCHEDULER_TIME_INTERVAL,DeleteCacheReceiver.makeReceiverPendingIntent(context));  }}  }
class C{  public static Sentence parse(final String text,final ConversationContext ctx,final ExpressionMatcher matcher){  Sentence sentence;  if (matcher == null) {    sentence=parse(text,ctx);  } else {    sentence=matcher.parseSentence(text,ctx);  }  return sentence;}  }
class C{  protected int skipWhitespace(int c) throws IOException {  while (c == ' ' || c == '\t') {    c=reader.read();  }  return c;}  }
class C{  private byte[] doUdpQuery(Packet pkt,InetAddress server,int port,int retry,int xid) throws IOException, NamingException {  int minTimeout=50;synchronized (udpSocket) {    DatagramPacket opkt=new DatagramPacket(pkt.getData(),pkt.length(),server,port);    DatagramPacket ipkt=new DatagramPacket(new byte[8000],8000);    udpSocket.connect(server,port);    int pktTimeout=(timeout * (1 << retry));    try {      udpSocket.send(opkt);      int timeoutLeft=pktTimeout;      int cnt=0;      do {        if (debug) {          cnt++;          dprint("Trying RECEIVE(" + cnt + ") retry("+ (retry + 1)+ ") for:"+ xid+ "    sock-timeout:"+ timeoutLeft+ " ms.");        }        udpSocket.setSoTimeout(timeoutLeft);        long start=System.currentTimeMillis();        udpSocket.receive(ipkt);        long end=System.currentTimeMillis();        byte[] data=new byte[ipkt.getLength()];        data=ipkt.getData();        if (isMatchResponse(data,xid)) {          return data;        }        timeoutLeft=pktTimeout - ((int)(end - start));      } while (timeoutLeft > minTimeout);    }  finally {      udpSocket.disconnect();    }    return null;  }}  }
class C{  @GET @Path("restore/status") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.SYSTEM_MONITOR,Role.RESTRICTED_SYSTEM_ADMIN}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public BackupRestoreStatus queryRestoreStatus(@QueryParam("backupname") String backupName,@QueryParam("isLocal") @DefaultValue("false") boolean isLocal){  log.info("Query restore status backupName={} isLocal={}",backupName,isLocal);  BackupRestoreStatus status=backupOps.queryBackupRestoreStatus(backupName,isLocal);  status.setBackupName(backupName);  if (isLocal) {    File backupDir=backupOps.getBackupDir(backupName,true);    String[] files=backupDir.list();    if (files.length == 0) {      throw BackupException.fatals.backupFileNotFound(backupName);    }    for (    String f : files) {      if (backupOps.isGeoBackup(f)) {        log.info("{} is a geo backup",backupName);        status.setGeo(true);        break;      }    }  } else {    checkExternalServer();    SchedulerConfig cfg=backupScheduler.getCfg();    BackupClient client=getExternalServerClient(cfg);    List<String> backupFiles=new ArrayList();    try {      backupFiles=client.listFiles(backupName);      log.info("The remote backup files={}",backupFiles);      if (backupFiles.isEmpty()) {        throw BackupException.fatals.backupFileNotFound(backupName);      }    } catch (    Exception e) {      log.error("Failed to list {} from server {} e=",backupName,cfg.getExternalServerUrl(),e);      throw BackupException.fatals.externalBackupServerError(backupName);    }  }  log.info("The backup/restore status:{}",status);  return status;}  }
class C{  public void removeGroupFileTransfer(String fileTransferId){  if (sLogger.isActivated()) {    sLogger.debug("Remove a file transfer from the list (size=" + mGroupFileTransferCache.size() + ")");  }  mGroupFileTransferCache.remove(fileTransferId);}  }
class C{  @Override protected SmileParser _createJsonParser(InputStream in,IOContext ctxt) throws IOException, JsonParseException {  return new SmileParserBootstrapper(ctxt,in).constructParser(_parserFeatures,_smileParserFeatures,_objectCodec,_rootByteSymbols);}  }
class C{  public static int maxIndex(int[] ints){  int maximum=0;  int maxIndex=0;  for (int i=0; i < ints.length; i++) {    if ((i == 0) || (ints[i] > maximum)) {      maxIndex=i;      maximum=ints[i];    }  }  return maxIndex;}  }
class C{  private void lockFocus(){  try {    mPreviewRequestBuilder.set(CaptureRequest.CONTROL_AF_TRIGGER,CameraMetadata.CONTROL_AF_TRIGGER_START);    mState=STATE_WAITING_LOCK;    mCaptureSession.capture(mPreviewRequestBuilder.build(),mCaptureCallback,mBackgroundHandler);  } catch (  CameraAccessException e) {    e.printStackTrace();  }}  }
class C{  private void raster(){  glUseProgram(rasterProgram);  glUniformMatrix4fv(viewMatrixUniform,false,viewMatrix.get(matrixBuffer));  glUniformMatrix4fv(projectionMatrixUniform,false,projMatrix.get(matrixBuffer));  glBindVertexArray(vaoScene);  glBindBufferBase(GL_UNIFORM_BUFFER,samplersUboBinding,samplersUbo);  glDrawArraysInstanced(GL_TRIANGLES,0,6 * 6,boxes.length / 2);  glBindBufferBase(GL_UNIFORM_BUFFER,samplersUboBinding,0);  glBindVertexArray(0);  glUseProgram(0);}  }
class C{  public boolean isSearchLightBit(int bit){  if (nodeType != SMINI) {    log.error("Invalid query of Searchlights bits - not SMINI node");    return (false);  }  if ((bit < 0) || (bit > 47)) {    log.error("Invalid bit number in query of SMINI Searchlights bits: " + Integer.toString(bit));    return (false);  }  if (locSearchLightBits[bit] == 1) {    return (true);  }  return (false);}  }
class C{  private void evictAll(IgniteCache<Integer,CacheValue> cache) throws Exception {  resetCounters();  Set<Integer> keys=new HashSet<>();  for (  Cache.Entry<Integer,CacheValue> e : cache.localEntries())   keys.add(e.getKey());  cache.localEvict(keys);  for (int i=0; i < ENTRY_CNT; i++)   assert cache.localPeek(i,CachePeekMode.ONHEAP) == null;  assert swapCnt.get() == ENTRY_CNT;  assert unswapCnt.get() == 0;}  }
class C{  public static String[] subarray(String[] buffer,int offset,int length){  String temp[]=new String[length];  System.arraycopy(buffer,offset,temp,0,length);  return temp;}  }
class C{  public void onCreate(Bundle savedInstanceState){  mSlidingMenu=(SlidingMenu)LayoutInflater.from(mActivity).inflate(R.layout.slidingmenumain,null);}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:55.857 -0500",hash_original_method="7C2BF1F364031ACAC78067E68F83C77E",hash_generated_method="DBC8946E26182285CBFCD652E9A61948") public void notifyAppWidgetViewDataChanged(int[] appWidgetIds,int viewId){  try {    sService.notifyAppWidgetViewDataChanged(appWidgetIds,viewId);  } catch (  RemoteException e) {    throw new RuntimeException("system server dead?",e);  }}  }
class C{  public static IMethodBinding findMethodInHierarchy(ITypeBinding type,String methodName,String[] parameters){  IMethodBinding method=findMethodInType(type,methodName,parameters);  if (method != null)   return method;  ITypeBinding superClass=type.getSuperclass();  if (superClass != null) {    method=findMethodInHierarchy(superClass,methodName,parameters);    if (method != null)     return method;  }  ITypeBinding[] interfaces=type.getInterfaces();  for (int i=0; i < interfaces.length; i++) {    method=findMethodInHierarchy(interfaces[i],methodName,parameters);    if (method != null)     return method;  }  return null;}  }
class C{  public static IDPConfiguration createIDPConfigurationWithoutSiteAffinity(String alias,String entityID,X509Certificate signingCertificate,List<String> nameIDFormats,List<SingleSignOnService> singleSignOnServices,List<SingleLogoutService> singleLogoutServices){  return new IDPConfiguration(alias,entityID,signingCertificate,nameIDFormats,singleSignOnServices,singleLogoutServices,DEFAULT_CLOCK_TOLERANCE_SEC,false);}  }
class C{  public void close() throws IOException {  gifWriter.endWriteSequence();}  }
class C{  public boolean isLockScreenDisabled(){  return !isSecure() && getLong(DISABLE_LOCKSCREEN_KEY,0) != 0;}  }
class C{  @Override public Class<OFFeaturesReply> handledType(){  return OFFeaturesReply.class;}  }
class C{  @Override public JAMonListener copy(){  if (factory) {    SharedJAMonBufferListener listener=new SharedJAMonBufferListener("_" + getName() + getNextID(),getBufferList().copy());    listener.setFactoryInstance(false);    JAMonListenerFactory.put(listener);    return listener;  } else   return this;}  }
class C{  protected Object notifyInternal(final ProceedingJoinPoint pjp,final boolean newPerson) throws Throwable {  final Object[] args=pjp.getArgs();  final RegisteredPerson registeredPerson=(RegisteredPerson)args[0];  final Shop shop=(Shop)args[1];  final String token=!newPerson ? (String)args[2] : null;  if (registeredPerson instanceof Customer && ((Customer)registeredPerson).isGuest()) {    return pjp.proceed();  }  final String generatedPassword;  final String generatedPasswordHash;  final String generatedToken;  final Date generatedTokenExpiry;  if (newPerson) {    if (StringUtils.isNotBlank(registeredPerson.getPassword())) {      generatedPassword=registeredPerson.getPassword();    } else {      generatedPassword=phrazeGenerator.getNextPassPhrase();    }    generatedPasswordHash=passwordHashHelper.getHash(generatedPassword);    generatedToken=null;    generatedTokenExpiry=null;  } else {    if (StringUtils.isNotBlank(token)) {      if (!isCallcenterToken(shop,token)) {        if (!token.equals(registeredPerson.getAuthToken()) || registeredPerson.getAuthTokenExpiry() == null || new Date().after(registeredPerson.getAuthTokenExpiry())) {          throw new BadCredentialsException(Constants.PASSWORD_RESET_AUTH_TOKEN_INVALID);        }      }      generatedPassword=phrazeGenerator.getNextPassPhrase();      generatedPasswordHash=passwordHashHelper.getHash(generatedPassword);      generatedToken=null;      generatedTokenExpiry=null;    } else {      generatedPassword=null;      generatedPasswordHash=registeredPerson.getPassword();      generatedToken=phrazeGenerator.getNextPassPhrase();      generatedTokenExpiry=determineExpiryTime(shop);    }  }  final RegistrationMessage registrationMessage=createRegistrationMessage(newPerson,registeredPerson,shop,generatedPassword,generatedPasswordHash,generatedToken,generatedTokenExpiry,newPerson ? "customer-registered" : "customer-change-password");  sendNotification(registrationMessage);  ShopCodeContext.getLog(this).info("Person message was send to queue {}",registrationMessage);  return pjp.proceed();}  }
class C{  public static InetAddress decrement(InetAddress address){  byte[] addr=address.getAddress();  int i=addr.length - 1;  while (i >= 0 && addr[i] == (byte)0x00) {    addr[i]=(byte)0xff;    i--;  }  Preconditions.checkArgument(i >= 0,"Decrementing %s would wrap.",address);  addr[i]--;  return bytesToInetAddress(addr);}  }
class C{  boolean isRetMerged(){  return retMerged;}  }
class C{  @SuppressWarnings("unused") @Subscribe public void onEvent(final AssetsInstalledEvent event){  pluginInternalPrefs.setAppBuildVersion(VersionHelper.applicationVersionCode(cordova.getActivity()));  pluginInternalPrefs.setWwwFolderInstalled(true);  pluginInternalPrefsStorage.storeInPreference(pluginInternalPrefs);  isPluginReadyForWork=true;  PluginResult result=PluginResultHelper.pluginResultFromEvent(event);  sendMessageToDefaultCallback(result);  if (chcpXmlConfig.isAutoDownloadIsAllowed() && !UpdatesInstaller.isInstalling() && !UpdatesLoader.isExecuting()) {    fetchUpdate();  }}  }
class C{  public static <T>void clearTable(SQLiteDatabase connectionSource,Class clazz) throws SQLException {  clearTable(connectionSource,loadTableMapper(clazz).getTableConfig().getTableName());}  }
class C{  public void calcMaxDistances(boolean mobile){  if (mobile) {    maxXDistanceFromCenter=Math.sqrt(this.width * this.width + this.height * this.height) / 2;    maxYDistanceFromCenter=maxXDistanceFromCenter;  } else {    DenseMatrix rotated=Polygon.rotationTranslationMatrix2D(this.getOrientation().radians,new Double2D(0,0)).times(this.vertices);    maxXDistanceFromCenter=0;    maxYDistanceFromCenter=0;    for (int i=0; i < 3; i++) {      if (rotated.vals[0][i] > maxXDistanceFromCenter)       maxXDistanceFromCenter=rotated.vals[0][i];      if (rotated.vals[1][i] > maxYDistanceFromCenter)       maxYDistanceFromCenter=rotated.vals[1][i];    }  }  maxXDistanceFromCenter+=.1;  maxYDistanceFromCenter+=.1;}  }
class C{  protected Link createLink(final String relation,final URI href){  return new Link(relation,href);}  }
class C{  public boolean isMajorGridY(){  return majorGridY;}  }
class C{  private static boolean isSpecialFat32(char character){switch (character) {case '$':case '%':case '\'':case '-':case '_':case '@':case '~':case '`':case '!':case '(':case ')':case '{':case '}':case '^':case '#':case '&':case '+':case ',':case ';':case '=':case '[':case ']':case ' ':    return true;default :  return false;}}  }
class C{  public boolean hasFeedLink(){  return super.hasElement(FeedLink.KEY);}  }
class C{  public int addLoadParameters(CtClass[] params,int offset){  int stacksize=0;  if (params != null) {    int n=params.length;    for (int i=0; i < n; ++i)     stacksize+=addLoad(stacksize + offset,params[i]);  }  return stacksize;}  }
class C{  @Inline public static Address allocateSpace(CollectorContext context,int bytes,int align,int offset,int allocator,ObjectReference from){  bytes=org.jikesrvm.runtime.Memory.alignUp(bytes,MIN_ALIGNMENT);  Address region;  region=context.allocCopy(from,bytes,align,offset,allocator);  if (CHECK_MEMORY_IS_ZEROED)   Memory.assertIsZeroed(region,bytes);  return region;}  }
class C{  public static long[] longs(long... elements){  return elements;}  }
class C{  TransformBlock(Expression transformExpression,Map namedArgs,TemplateElements children){  this.transformExpression=transformExpression;  this.namedArgs=namedArgs;  setChildren(children);}  }
class C{  public static void returnUserTransaction(UserTransaction userTransaction){  if ((userTransaction != null) && (userTransaction instanceof UserTransactionWithContext)) {    UserTransactionWithContext userTransactionWithContext=(UserTransactionWithContext)userTransaction;    userTransactionWithContext.closeContext();  }}  }
class C{  public double entropyJoint(){  return entropyJoint;}  }
class C{  public boolean retainEntries(TDoubleFloatProcedure procedure){  boolean modified=false;  byte[] states=_states;  double[] keys=_set;  float[] values=_values;  for (int i=keys.length; i-- > 0; ) {    if (states[i] == FULL && !procedure.execute(keys[i],values[i])) {      removeAt(i);      modified=true;    }  }  return modified;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case StextPackage.STATECHART_ROOT__DEF:    return basicSetDef(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public CommonMenuBar(Client parent){  this();  client=parent;}  }
class C{  public Map<Feature,Point3d> adjustModel1(){  Map<Feature,Point3d> map=new HashMap<>();  Matrix p=new Matrix(3,1);  for (  Entry<Feature,Point3d> e : model1.getPointMap().entrySet()) {    p.set(0,0,e.getValue().x);    p.set(1,0,e.getValue().y);    p.set(2,0,e.getValue().z);    p=R.times(p).times(scaleFactor).plus(T);    map.put(e.getKey(),new Point3d(p.get(0,0),p.get(1,0),p.get(2,0)));  }  return map;}  }
class C{  protected void scrollForward(){  int selectedIndex=tabPane.getSelectedIndex();  if (++selectedIndex >= tabPane.getTabCount()) {    tabPane.setSelectedIndex(tabPane.getTabCount() - 1);  } else {    tabPane.setSelectedIndex(selectedIndex);  }  tabPane.repaint();}  }
class C{  SessionTicket(final ProtocolVersion protocolVersion,final CipherSuite cipherSuite,final CompressionMethod compressionMethod,final byte[] masterSecret,final Principal clientIdentity,final long timestamp){  if (protocolVersion == null) {    throw new NullPointerException("Protcol version must not be null");  } else   if (cipherSuite == null) {    throw new NullPointerException("Cipher suite must not be null");  } else   if (compressionMethod == null) {    throw new NullPointerException("Compression method must not be null");  } else   if (masterSecret == null) {    throw new NullPointerException("Master secret must not be null");  } else {    this.protocolVersion=protocolVersion;    this.masterSecret=masterSecret;    this.cipherSuite=cipherSuite;    this.compressionMethod=compressionMethod;    this.clientIdentity=clientIdentity;    this.timestamp=timestamp;  }}  }
class C{  public ImageLoadOption maxHeight(int maxHeight){  this.maxHeight=maxHeight;  return this;}  }
class C{  private double[] lineIntersect(double x1,double y1,double x2,double y2,double x,double y,double offset){  double xval;  double yval;  double xn=-100, yn=-100;  double change;  if (x == 0) {    if ((x1 <= offset && offset < x2) || (x1 >= offset && offset > x2)) {      xval=x1 - x2;      change=(offset - x2) / xval;      yn=(y1 - y2) * change + y2;      if (0 <= yn && yn <= y) {        xn=offset;      } else {        xn=-100;      }    }  } else   if (y == 0) {    if ((y1 <= offset && offset < y2) || (y1 >= offset && offset > y2)) {      yval=(y1 - y2);      change=(offset - y2) / yval;      xn=(x1 - x2) * change + x2;      if (0 <= xn && xn <= x) {        yn=offset;      } else {        xn=-100;      }    }  }  double[] ret=new double[2];  ret[0]=xn;  ret[1]=yn;  return ret;}  }
class C{  private static int hashIntArray(int[] oid){  int intHash=0;  for (int i=0; i < oid.length && i < 4; i++) {    intHash+=oid[i] << (8 * i);  }  return intHash & 0x7FFFFFFF;}  }
class C{  public CFunctionNodeUpdater(final ZyGraph graph,final INaviFunctionNode node,final BackEndDebuggerProvider provider){  m_graph=Preconditions.checkNotNull(graph,"IE00989: Graph argument can't be null");  m_node=Preconditions.checkNotNull(node,"IE00990: Node argument can't be null");  Preconditions.checkNotNull(provider,"IE02241: Provider argument can not be null");  m_nodeModifier=new CDefaultModifier(graph.getSettings(),provider);  initializeListeners();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected boolean forceAddWithoutCheck(Solution newSolution){  return super.add(newSolution);}  }
class C{  public DistributedLogClientBuilder streamFailfast(boolean enabled){  DistributedLogClientBuilder newBuilder=newBuilder(this);  newBuilder._clientConfig.setStreamFailfast(enabled);  return newBuilder;}  }
class C{  protected File test(MultivariateFunction function) throws Exception {  double[][] input=new Saltelli().generate(1000 * 8,3);  double[] output=evaluate(function,input);  File outputFile=TestUtils.createTempFile();  File parameterFile=TestUtils.createTempFile();  File inputFile=TestUtils.createTempFile();  createParameterFile(parameterFile,3);  save(inputFile,output);  SobolAnalysis.main(new String[]{"--parameterFile",parameterFile.getPath(),"--input",inputFile.getPath(),"--metric","0","--output",outputFile.getPath()});  return outputFile;}  }
class C{  public void testBatteryUsage_showChartView(){  recordingLongTrack(false,R.string.track_detail_chart_tab);}  }
class C{  private boolean isValidApplicationDomainTarget(String arg){  for (  ApplicationDomainTarget appDomain : ApplicationDomainTarget.values()) {    if (appDomain.applicationDomainValue.equals(arg))     return true;  }  return false;}  }
class C{  @DELETE @CheckPermission(roles={Role.SECURITY_ADMIN}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}") public Response deleteUserGroup(@PathParam("id") URI id){  checkCompatibleVersion();  UserGroup userGroup=getUserGroupById(id,false);  ArgValidator.checkEntityNotNull(userGroup,id,isIdEmbeddedInURL(id));  checkForActiveUsageOfUserGroup(userGroup.getDomain(),userGroup.getLabel());  _dbClient.removeObject(userGroup);  auditOp(OperationTypeEnum.DELETE_USERGROUP,true,null,userGroup.getId().toString());  return Response.ok().build();}  }
class C{  private void removePreference(String key){  Preference pref=findPreference(key);  PreferenceScreen screen=getPreferenceScreen();  if (pref != null && screen != null) {    screen.removePreference(pref);  }}  }
class C{  @Override public void write(T value) throws Exception {  marshaller.marshal(value,os);}  }
class C{  public void sort(String column) throws PageException {  sort(column,Query.ORDER_ASC);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.MORE_OP___MORE_OP_1:    setMoreOp_1((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public static final String longToBinString(long a){  StringBuffer sb=new StringBuffer(64);  for (int i=0; i < 64; i++)   sb.append(BIT[(int)(a >>> (63 - i)) & 0x1]);  return sb.toString();}  }
class C{  public FontFormatException(String reason){  super(reason);}  }
class C{  public void addTabStop(int stop){  boundsCheck(stop);  tabstops.add(stop);}  }
class C{  private static Script scriptFromFile(String scriptFilePath,ScriptType scriptType){  String scriptString=getScriptStringFromFile(scriptFilePath);  return scriptFromString(scriptString,scriptType).setName(scriptFilePath);}  }
class C{  @Override public boolean equals(final Object other){  return (other instanceof Entry) && (((Entry)other).tripId.equals(tripId));}  }
class C{  @SuppressWarnings("unchecked") public void pan(PointND<? extends Number> deltas){  PlotArea plotArea=plot.getPlotArea();  PointND<Number> center=(PointND<Number>)getCenter();  double x=center.get(0).doubleValue();  x+=deltas.get(0).doubleValue() / plotArea.getWidth();  double y=center.get(1).doubleValue();  y+=deltas.get(1).doubleValue() / plotArea.getHeight();  center.set(0,x);  center.set(1,y);  setCenter(center);}  }
class C{  public void clearReminder(){  super.removeElement(Reminder.KEY);}  }
class C{  final boolean transferForSignal(Node node){  if (!compareAndSetWaitStatus(node,Node.CONDITION,0))   return false;  Node p=enq(node);  int ws=p.waitStatus;  if (ws > 0 || !compareAndSetWaitStatus(p,ws,Node.SIGNAL))   LockSupport.unpark(node.thread);  return true;}  }
class C{  public void filterValues(Predicate<Value> predicate){  Stack<String> toRemove=new Stack<String>();  for (  String var : map.keySet()) {    if (!predicate.test(map.get(var))) {      toRemove.add(var);    }  }  while (!toRemove.isEmpty()) {    map.remove(toRemove.pop());  }  cachedHash=0;}  }
class C{  protected void reset(){  this.navigatorEvents.reset();  this.renderResourceCache.clear();  this.viewport.setEmpty();  this.clearFrameQueue();  Choreographer.getInstance().removeFrameCallback(this);  this.mainThreadHandler.removeMessages(MSG_ID_REQUEST_REDRAW);  this.isWaitingForRedraw=false;}  }
class C{  @Override public String partBackground(){  return "#292C2F";}  }
class C{  public void testDoCheckWithEmptyElements(){  LOGGER.debug("doCheckWithEmptyElements");  mockTestSolutionHandler.addTestSolution(TestSolution.NOT_APPLICABLE);  expectLastCall().once();  TextEmptinessChecker instance=new TextEmptinessChecker(mockTextElementBuilder,TEXT_EMPTY_MSG,TEXT_NOT_EMPTY_MSG);  replay(mockTextElementBuilder,mockSSPHandler,mockTestSolutionHandler);  instance.doCheck(mockSSPHandler,elements,mockTestSolutionHandler);  verify(mockTextElementBuilder,mockSSPHandler,mockTestSolutionHandler);}  }
class C{  @Override public int graphType(){  return Drawable.TREE;}  }
class C{  private void handleExportToPDF(){  FileChooser chooser=new FileChooser();  chooser.setTitle("Export to PDF");  ExtensionFilter filter=new FileChooser.ExtensionFilter("Portable Document Format (PDF)","pdf");  chooser.getExtensionFilters().add(filter);  File file=chooser.showSaveDialog(getScene().getWindow());  if (file != null) {    ExportUtils.writeAsPDF(this.chart,(int)getWidth(),(int)getHeight(),file);  }}  }
class C{  public TAnnotableElement createTAnnotableElement(){  TAnnotableElementImpl tAnnotableElement=new TAnnotableElementImpl();  return tAnnotableElement;}  }
class C{  public static Process openInConsole(@Nullable File workFolder,String... args) throws IOException {  return openInConsole(workFolder,null,args);}  }
class C{  public void fingerprintFont(boolean fingerprint){  this.fingerprint=fingerprint;}  }
class C{  public static void writeFile(byte[] fileData,File file) throws OpenStegoException {  OutputStream os=null;  try {    if (file == null) {      os=System.out;    } else {      os=new FileOutputStream(file);    }    os.write(fileData);    os.close();  } catch (  IOException ioEx) {    throw new OpenStegoException(ioEx);  }}  }
class C{  public static boolean hasExceptionData(InvocationSequenceData data){  return (null != data.getExceptionSensorDataObjects()) && !data.getExceptionSensorDataObjects().isEmpty();}  }
class C{  @EventHandler public void onPlayerQuit(PlayerQuitEvent event){  playerChannels.remove(event.getPlayer());}  }
class C{  public static void init() throws IOException {  if (initialized) {    return;  }  initHome();  initDataDir();  initLogging();  initStdOut();  initStdErr();  initSystemProperties();  showEnvironment();  initialized=true;}  }
class C{  static void testInterface(ClassLoader loader){  Class getDoubledClass;  Object obj;  try {    getDoubledClass=loader.loadClass("GetDoubled");  } catch (  ClassNotFoundException cnfe) {    System.err.println("loadClass failed: " + cnfe);    return;  }  try {    obj=getDoubledClass.newInstance();  } catch (  InstantiationException ie) {    System.err.println("newInstance failed: " + ie);    return;  }catch (  IllegalAccessException iae) {    System.err.println("newInstance failed: " + iae);    return;  }catch (  LinkageError le) {    System.out.println("Got LinkageError on GD");    return;  }  IGetDoubled iface=(IGetDoubled)obj;  try {    DoubledExtendOkay de=iface.getDoubled();    String str=de.getStr();  } catch (  LinkageError le) {    System.out.println("Got LinkageError on GD");    return;  }  System.err.println("Should have failed by now on GetDoubled");}  }
class C{  public void clear(IValidatable bean){  for (Iterator iter=_optComponents.values().iterator(); iter.hasNext(); ) {    ((Binding)iter.next()).clear(bean);  }  for (Iterator iter=_bindings.values().iterator(); iter.hasNext(); ) {    ((Binding)iter.next()).clear(bean);  }  _modified=false;}  }
class C{  public int hashCode(){  int retval=0;  for (int i=0; i < octetString.length; i++)   retval+=octetString[i] * i;  return retval;}  }
class C{  private MessageObserverImpl(CoapHandler handler){  this.handler=handler;}  }
class C{  public synchronized BooleanSetting createBooleanSetting(String key,boolean defaultValue){  BooleanSetting result=new BooleanSettingImpl(DEFAULT_PROPS,PROPS,key,defaultValue);  handleSettingInternal((AbstractSetting)result,null);  return result;}  }
class C{  private void requestLocationInternal(){  Log.v(TAG,ACTION_REQUEST_LOCATION);  GoogleApiClient googleApiClient=new GoogleApiClient.Builder(this).addApi(LocationServices.API).build();  ConnectionResult connectionResult=googleApiClient.blockingConnect(Constants.GOOGLE_API_CLIENT_TIMEOUT_S,TimeUnit.SECONDS);  if (connectionResult.isSuccess() && googleApiClient.isConnected()) {    Intent locationUpdatedIntent=new Intent(this,UtilityService.class);    locationUpdatedIntent.setAction(ACTION_LOCATION_UPDATED);    Location location=FusedLocationApi.getLastLocation(googleApiClient);    if (location != null) {      Intent lastLocationIntent=new Intent(locationUpdatedIntent);      lastLocationIntent.putExtra(FusedLocationProviderApi.KEY_LOCATION_CHANGED,location);      startService(lastLocationIntent);    }    LocationRequest mLocationRequest=new LocationRequest().setPriority(LocationRequest.PRIORITY_BALANCED_POWER_ACCURACY);    FusedLocationApi.requestLocationUpdates(googleApiClient,mLocationRequest,PendingIntent.getService(this,0,locationUpdatedIntent,0));    googleApiClient.disconnect();  } else {    Log.e(TAG,String.format(Constants.GOOGLE_API_CLIENT_ERROR_MSG,connectionResult.getErrorCode()));  }}  }
class C{  @Uninterruptible @Override public void deliverException(CompiledMethod compiledMethod,Address catchBlockInstructionAddress,Throwable exceptionObject,AbstractRegisters registers){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);}  }
class C{  @Override public void onClick(View v){switch (v.getId()) {case R.id.dialog_weather_button:    dismiss();  break;case R.id.dialog_weather_container_day:for (AnimatorSet a : iconAnimatorSets[0]) {  if (a != null) {    a.start();  }}break;case R.id.dialog_weather_container_night:for (AnimatorSet a : iconAnimatorSets[1]) {if (a != null) {a.start();}}break;}}  }
class C{  public void cancel(){  cancelSoftwareAnimations();}  }
class C{  public Index addToTable(Table table) throws IOException {  return new TableUpdater((TableImpl)table).addIndex(this);}  }
class C{  public PriorityQueue(SortedSet<? extends E> c){  getFromSortedSet(c);}  }
class C{  public static URI createServiceURI(VerificationHost host,URI peerURI,String factoryLink){  URI uri=(peerURI != null) ? UriUtils.buildUri(peerURI,factoryLink) : UriUtils.buildUri(host,factoryLink);  return uri;}  }
class C{  public static Date convertStartTimeStringToDate(final String startTimeString){  Date date;  try {    date=START_TIME_FORMATTER.parse(startTimeString);  } catch (  final ParseException e) {    log.error("Could not parse date",e);    return null;  }  return date;}  }
class C{  private static boolean askLayout(final JFrame parent,final ZyGraph graph){  if (graph.visibleNodeCount() >= graph.getSettings().getLayoutSettings().getLayoutCalculationTimeWarningThreshold()) {    return JOptionPane.YES_OPTION == CMessageBox.showYesNoQuestion(parent,"Layouting this graph can take a while. Do you want to continue?");  }  return true;}  }
class C{  public void process(JCas jcas){  try {    tagger.process(jcas);  } catch (  AnalysisEngineProcessException e) {    e.printStackTrace();  }}  }
class C{  private void connect(final String databaseUrl,final Properties properties) throws SQLException {  if (m_connection != null) {    closeConnection();  }  try {    m_connection=DriverManager.getConnection(databaseUrl,properties);  } catch (  final SQLException exception) {    NaviLogger.severe("Error: Connection to the database server could not be established: %s",exception);    throw exception;  }}  }
class C{  private void startPlayback(boolean forceStart){  if (forceStart || playlistManager.getCurrentPosition() != selectedIndex) {    playlistManager.setCurrentPosition(selectedIndex);    playlistManager.play(0,false);  }}  }
class C{  public RrdDef(String path,long startTime,long step){  this(path,step);  if (startTime < 0) {    throw new IllegalArgumentException("Invalid RRD start time specified: " + startTime);  }  this.startTime=startTime;}  }
class C{  private void handleError(@NotNull Throwable throwable,@NotNull String remoteUrl,Notification notification){  String errorMessage=throwable.getMessage();  notification.setType(ERROR);  if (errorMessage == null) {    console.printError(constant.pullFail(remoteUrl));    notification.setMessage(constant.pullFail(remoteUrl));    return;  }  try {    errorMessage=dtoFactory.createDtoFromJson(errorMessage,ServiceError.class).getMessage();    if (errorMessage.equals("Unable get private ssh key")) {      console.printError(constant.messagesUnableGetSshKey());      notification.setMessage(constant.messagesUnableGetSshKey());      return;    }    console.printError(errorMessage);    notification.setMessage(errorMessage);  } catch (  Exception e) {    console.printError(errorMessage);    notification.setMessage(errorMessage);  }}  }
class C{  @Override public byte[] buffer(){  return _writeBuffer;}  }
class C{  public void loadMetaData(ArrayList<String> sourceCustomPrefixes,ArrayList<String> sourceCustomEntities){  s_logger.log(Level.CONFIG,"");  s_logger.log(Level.CONFIG,"loadMetadata",getDirection());  loadDBVendor();  loadDBCatalog();  loadDBSchema();  if (s_parameters.isCopy() && isTarget())   reCreateDBSchema();  connectDBSchema();  loadDBCharSize();  loadDBisSavepointReleaseable();  m_tables=new HashMap<String,DBObject>(loadDBObjects(DBObject_Table.class));  m_views=new HashMap<String,DBObject>(loadDBObjects(DBObject_View.class));  m_operators=new HashMap<String,DBObject>(loadDBObjects(DBObject_Operator.class));  m_triggers=new HashMap<String,DBObject>(loadDBObjects(DBObject_Trigger.class));  m_functions=new HashMap<String,DBObject>(loadDBObjects(DBObject_Function.class));  m_sequences=new HashMap<String,DBObject>(loadDBObjects(DBObject_Sequence.class));  m_primaryKeys=new HashMap<String,DBObject>(loadDBObjects(DBObject_PrimaryKey.class));  m_foreignKeys=new HashMap<String,DBObject>(loadDBObjects(DBObject_ForeignKey.class));  m_checks=new HashMap<String,DBObject>(loadDBObjects(DBObject_Check.class));  m_uniques=new HashMap<String,DBObject>(loadDBObjects(DBObject_Unique.class));  m_indexes=new HashMap<String,DBObject>(loadDBObjects(DBObject_Index.class));  loadCustomPrefixes(sourceCustomPrefixes);  loadCustomEntities(sourceCustomEntities);  m_systemClients=new HashMap<Integer,String>(loadSystemClients());  m_systemLanguages=new ArrayList<String>(loadSystemLanguages());  if (isPreserveTableIDs())   loadADSequences();  loadCustomizationLevel(DBObject_Table.class);  loadCustomizationLevel(DBObject_View.class);  loadCustomizationLevel(DBObject_Operator.class);  loadCustomizationLevel(DBObject_Trigger.class);  loadCustomizationLevel(DBObject_Function.class);  loadCustomizationLevel(DBObject_Sequence.class);  loadCustomizationLevel(DBObject_PrimaryKey.class);  loadCustomizationLevel(DBObject_ForeignKey.class);  loadCustomizationLevel(DBObject_Check.class);  loadCustomizationLevel(DBObject_Unique.class);  loadCustomizationLevel(DBObject_Index.class);  s_logger.log(Level.CONFIG,"metadataLoaded",getDirection());  s_logger.flush();}  }
class C{  public synchronized void showErrorDialog(String message){  showErrorDialog(message,null);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private int measureLong(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=(int)(getPaddingLeft() + getPaddingRight() + (count * 2 * mRadius)+ (count - 1) * mRadius + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  @Override public void markerChanged(MarkerChangeEvent event){  this.lastEvent=event;}  }
class C{  public RenameKeyAction(KseFrame kseFrame){  super(kseFrame);  putValue(LONG_DESCRIPTION,res.getString("RenameKeyAction.statusbar"));  putValue(NAME,res.getString("RenameKeyAction.text"));  putValue(SHORT_DESCRIPTION,res.getString("RenameKeyAction.tooltip"));  putValue(SMALL_ICON,new ImageIcon(Toolkit.getDefaultToolkit().createImage(getClass().getResource(res.getString("RenameKeyAction.image")))));}  }
class C{  private static void assertEqualExceptPadding(ByteKey expected,ByteKey key){  ByteString shortKey=expected.getValue();  ByteString longKey=key.getValue();  if (shortKey.size() > longKey.size()) {    shortKey=key.getValue();    longKey=expected.getValue();  }  for (int i=0; i < shortKey.size(); ++i) {    if (shortKey.byteAt(i) != longKey.byteAt(i)) {      fail(String.format("Expected %s (up to trailing zeros), got %s",expected,key));    }  }  for (int j=shortKey.size(); j < longKey.size(); ++j) {    if (longKey.byteAt(j) != 0) {      fail(String.format("Expected %s (up to trailing zeros), got %s",expected,key));    }  }}  }
class C{  public double nextDouble(){  return nextDouble(lambda);}  }
class C{  public static void attribute(String name,boolean value){  openAttribute(name);  Log.write(value);  closeAttribute();}  }
class C{  public double readDoubleFromXML(Element node) throws Exception {  if (DEBUG) {    trace(new Throwable(),node.getAttribute(ATT_NAME));  }  m_CurrentNode=node;  return ((Double)getPrimitive(node)).doubleValue();}  }
class C{  boolean doNetWrite(CacheEvent event,Set netWriteRecipients,CacheWriter localWriter,int paction) throws CacheWriterException, TimeoutException {  int action=paction;  this.requestInProgress=true;  Scope scope=this.region.getScope();  if (localWriter != null) {    doLocalWrite(localWriter,event,action);    this.requestInProgress=false;    return true;  }  if (scope == Scope.LOCAL && (region.getPartitionAttributes() == null)) {    return false;  }  @Released CacheEvent listenerEvent=getEventForListener(event);  try {    if (action == BEFOREUPDATE && listenerEvent.getOperation().isCreate()) {      action=BEFORECREATE;    }    boolean cacheWrote=netWrite(listenerEvent,action,netWriteRecipients);    this.requestInProgress=false;    return cacheWrote;  }  finally {    if (event != listenerEvent) {      if (listenerEvent instanceof EntryEventImpl) {        ((EntryEventImpl)listenerEvent).release();      }    }  }}  }
class C{  public static void write(final byte[] data,final OutputStream output) throws IOException {  if (data != null) {    output.write(data);  }}  }
class C{  @Override protected void doAction(){  showKeySelectedEntry();}  }
class C{  public static BinaryBufferedFile create(String name,int buffersize){  BinaryBufferedFile bf=null;  try {    bf=new BinaryBufferedFile(name,buffersize);  } catch (  IOException ioe) {  }  return bf;}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();  if (subSignature.equals("java.lang.Class[] getClassContext()")) {    java_util_ResourceBundle_getClassContext(method,thisVar,returnVar,params);    return;  } else {    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  public double angle(){  return Math.atan2(p1.y - p0.y,p1.x - p0.x);}  }
class C{  public void unregisterTypeSerializer(Class<?> clazz){  mSerializers.remove(clazz);}  }
class C{  public static int parseEAc3SyncframeSize(byte[] data){  return 2 * (((data[2] & 0x07) << 8) + (data[3] & 0xFF) + 1);}  }
class C{  private GridCacheDhtTestUtils(){}  }
class C{  public InsertDelta(Chunk<T> original,Chunk<T> revised){  super(original,revised);}  }
class C{  public void dumpLog(String containerId,File logFile) throws DockerException, InterruptedException {  LogStream errorStream=null;  FileChannel fileChannel=null;  FileOutputStream fileOutputStream=null;  try {    if (logFile.exists()) {      logFile.delete();    }    logFile.createNewFile();    fileOutputStream=new FileOutputStream(logFile);    fileChannel=fileOutputStream.getChannel();    errorStream=dockerClient.logs(containerId,LogsParam.stderr());    while (errorStream.hasNext()) {      LogMessage message=errorStream.next();      ByteBuffer buffer=message.content();      fileChannel.write(buffer);    }  } catch (  FileNotFoundException e) {    throw new DockerException("File " + logFile + " not found");  }catch (  IOException e) {    throw new DockerException(e);  } finally {    if (errorStream != null) {      errorStream.close();    }    if (fileChannel != null) {      try {        fileChannel.close();      } catch (      IOException e) {        logger.error("Failed to close file channel",e);      }    }    if (fileOutputStream != null) {      try {        fileOutputStream.close();      } catch (      IOException e) {        logger.error("Failed to close file output stream",e);      }    }  }}  }
class C{  public String toString(){  return toXML(false);}  }
class C{  @ReactMethod public void rFind(Integer notificationID,Callback errorCallback,Callback successCallback){  try {    Notification n=mNotificationManager.find(notificationID);    successCallback.invoke(n.getAttributes().asReadableMap());  } catch (  Exception e) {    errorCallback.invoke(e.getMessage());    Log.e("ReactSystemNotification","NotificationModule: rFind Error: " + Log.getStackTraceString(e));  }}  }
class C{  public PingTask(String targetHost,PingMeta pingMeta){  this.targetHost=targetHost;  this.pingMeta=pingMeta;}  }
class C{  protected Hashtable<String,Object> readConfiguration(RuntimeConfiguration configuration){  logger=configuration.getLogger();  String username=configuration.getPropertyValue(RemotePropertySet.USERNAME);  String password=configuration.getPropertyValue(RemotePropertySet.PASSWORD);  String jndiUrl=configuration.getPropertyValue(RemotePropertySet.URI);  mejbJndiPath=configuration.getPropertyValue(JonasPropertySet.JONAS_MEJB_JNDI_PATH);  initialContextFactory=configuration.getPropertyValue(JonasPropertySet.JONAS_MEJB_JNDI_INIT_CTX_FACT);  if (jndiUrl == null || jndiUrl.trim().isEmpty()) {    jndiUrl=DEFAULT_PROVIDER_URI;    String port=configuration.getPropertyValue(GeneralPropertySet.RMI_PORT);    if (port != null) {      jndiUrl=jndiUrl.replace("1099",port);    }    String hostname=configuration.getPropertyValue(GeneralPropertySet.HOSTNAME);    if (hostname != null) {      jndiUrl=jndiUrl.replace("localhost",hostname);    }  }  if (mejbJndiPath == null) {    mejbJndiPath=DEFAULT_JNDI_MEJB_PATH;  }  if (initialContextFactory == null) {    initialContextFactory=DEFAULT_JNDI_INITIAL_CTX_FACTORY;  }  Hashtable<String,Object> props=new Hashtable<String,Object>();  props.put(Context.INITIAL_CONTEXT_FACTORY,initialContextFactory);  props.put(Context.PROVIDER_URL,jndiUrl);  if (username != null && !username.trim().isEmpty() && password != null && !password.trim().isEmpty()) {    this.username=username;    this.password=password;    props.put(Context.SECURITY_PRINCIPAL,username);    props.put(Context.SECURITY_CREDENTIALS,password);    logger.debug("Credentials will be used when doing JNDI lookups",this.getClass().getName());  } else {    logger.debug("No credentials will be used when doing JNDI lookups",this.getClass().getName());  }  jaasFile=configuration.getPropertyValue(JonasPropertySet.JONAS_MEJB_JAAS_FILE);  jaasEntry=configuration.getPropertyValue(JonasPropertySet.JONAS_MEJB_JAAS_ENTRY);  if (jaasEntry == null) {    if (jaasFile == null) {      logger.debug("No JAAS options will be used when doing EJB calls",this.getClass().getName());    } else {      throw new IllegalArgumentException("The " + JonasPropertySet.JONAS_MEJB_JAAS_FILE + " option has been set without any "+ JonasPropertySet.JONAS_MEJB_JAAS_ENTRY);    }  } else {    if (jaasFile == null) {      jaasFile=DEFAULT_JAAS_FILE;    }    logger.debug("JAAS options will be used when doing EJB calls, based on the file \"" + jaasFile + "\" and entry \""+ jaasEntry+ "\"",this.getClass().getName());  }  return props;}  }
class C{  private boolean createZone(WBEMClient client,CIMInstance zoneServiceIns,String fabricId,String fabricWwn,CIMObjectPath zonesetPath,Zone zone) throws WBEMException {  _log.info("Creating a new zone " + zone.getName());  CIMObjectPath zonePath=_smisHelper.addZone(client,zoneServiceIns,zonesetPath,zone.getName(),fabricId,fabricWwn);  if (zonePath != null) {    boolean success=false;    String name=null;    for (    ZoneMember member : zone.getMembers()) {      name=member.getAlias() == null ? member.getAddress() : member.getAlias();      _log.info("Creating zone member: " + name + " zone: "+ zone.getName());      success=_smisHelper.addZoneOrAliasMember(client,zoneServiceIns,fabricWwn,zonePath,name);      if (!success) {        _log.info("Failed to create memeber " + name + " for zone : "+ zone.getName());        throw NetworkDeviceControllerException.exceptions.addZonesMemberFailedPath(zone.getName(),name);      }    }  } else {    _log.info("Failed to create zone : " + zone.getName());    throw NetworkDeviceControllerException.exceptions.addZonesStrategyFailedPath();  }  return true;}  }
class C{  public void gotoNext(final boolean force){  if (D)   LOG.info("Going to next track");synchronized (this) {    if (mPlayListLen <= 0) {      if (D)       LOG.info("No play queue");      scheduleDelayedShutdown();      return;    }    final int pos=getNextPosition(force);    if (scheduleShutdownAndNotifyPlayStateChange(pos))     return;    mPlayPos=pos;    stop(false);    mPlayPos=pos;    openCurrentAndNext();    play();    notifyChange(META_CHANGED);  }}  }
class C{  public static void skipFully(Reader reader,long skip) throws IOException {  try {    while (skip > 0) {      long skipped=reader.skip(skip);      if (skipped <= 0) {        throw new EOFException();      }      skip-=skipped;    }  } catch (  Exception e) {    throw DbException.convertToIOException(e);  }}  }
class C{  public static List<ErrorLogger.ErrorObject> validateIMFTrackFileHeaderMetadata(List<PayloadRecord> essencesHeaderPartitionPayloads) throws IOException {  IMFErrorLogger imfErrorLogger=new IMFErrorLoggerImpl();  List<PayloadRecord> essencesHeaderPartition=Collections.unmodifiableList(essencesHeaderPartitionPayloads);  for (  PayloadRecord payloadRecord : essencesHeaderPartition) {    if (payloadRecord.getPayloadAssetType() != PayloadRecord.PayloadAssetType.EssencePartition) {      imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMP_VALIDATOR_PAYLOAD_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.FATAL,String.format("Payload asset type is %s, expected asset type %s",payloadRecord.getPayloadAssetType(),PayloadRecord.PayloadAssetType.EssencePartition.toString()));      continue;    }    HeaderPartition headerPartition=null;    try {      headerPartition=new HeaderPartition(new ByteArrayDataProvider(payloadRecord.getPayload()),0L,(long)payloadRecord.getPayload().length,imfErrorLogger);      MXFOperationalPattern1A.HeaderPartitionOP1A headerPartitionOP1A=MXFOperationalPattern1A.checkOperationalPattern1ACompliance(headerPartition,imfErrorLogger);      IMFConstraints.checkIMFCompliance(headerPartitionOP1A,imfErrorLogger);    } catch (    IMFException|MXFException e) {      if (headerPartition != null) {        Preface preface=headerPartition.getPreface();        GenericPackage genericPackage=preface.getContentStorage().getEssenceContainerDataList().get(0).getLinkedPackage();        SourcePackage filePackage=(SourcePackage)genericPackage;        UUID packageUUID=filePackage.getPackageMaterialNumberasUUID();        imfErrorLogger.addError(new ErrorLogger.ErrorObject(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_COMPONENT_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.FATAL,String.format("IMFTrackFile with ID %s has fatal errors",packageUUID.toString())));      }      if (e instanceof IMFException) {        IMFException imfException=(IMFException)e;        imfErrorLogger.addAllErrors(imfException.getErrors());      } else       if (e instanceof MXFException) {        MXFException mxfException=(MXFException)e;        imfErrorLogger.addAllErrors(mxfException.getErrors());      }    }  }  return imfErrorLogger.getErrors();}  }
class C{  public void attachTo(RecyclerView recycler){  attachTo(recycler,false);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:48.079 -0500",hash_original_method="E185CA33D450CA66833DFDB97B746452",hash_generated_method="EE09CEB717C5A8328067564E6B457ED5") public static void dataChanged(String packageName){  checkServiceBinder();  if (sService != null) {    try {      sService.dataChanged(packageName);    } catch (    RemoteException e) {      Log.d(TAG,"dataChanged(pkg) couldn't connect");    }  }}  }
class C{  public static INaviInstruction lineToInstruction(final INaviCodeNode codeNode,final int line){  Preconditions.checkArgument(line >= 0,"IE00061: Line number can not be negative");  Preconditions.checkNotNull(codeNode,"IE01784: Code node argument can not be null");  int lineCounter=getInitialLineCounter(codeNode);  final HashMap<INaviInstruction,INaviFunction> functionMap=CReferenceFinder.getCodeReferenceMap(codeNode);  for (  final INaviInstruction instruction : codeNode.getInstructions()) {    final int instructionLines=getInstructionLineCount(codeNode,instruction,functionMap.get(instruction));    if ((line >= lineCounter) && (line < (lineCounter + instructionLines))) {      return instruction;    }    lineCounter+=instructionLines;  }  return null;}  }
class C{  protected void emit_ClassImplementsList_CommaKeyword_1_0_0_or_ExtendsKeyword_1_0_2_or_ImplementsKeyword_1_0_1(EObject semanticObject,ISynNavigable transition,List<INode> nodes){  acceptNodes(transition,nodes);}  }
class C{  public static void removeMarkers(IResource res) throws CoreException {  if (CheckerPlugin.DEBUG) {    System.out.println("Removing Checker Framework markers in " + res.getLocation());  }  res.deleteMarkers(MarkerReporter.NAME,true,IResource.DEPTH_INFINITE);}  }
class C{  private void handleAbout(){  GUIMediator.showAboutWindow();}  }
class C{  public static void logAndShow(Activity activity,String tag,Throwable t){  Log.e(tag,"Error",t);  String message=t.getMessage();  if (t instanceof GoogleJsonResponseException) {    GoogleJsonError details=((GoogleJsonResponseException)t).getDetails();    if (details != null) {      message=details.getMessage();    }  } else   if (t.getCause() instanceof GoogleAuthException) {    message=((GoogleAuthException)t.getCause()).getMessage();  }  showError(activity,message);}  }
class C{  @Before public void before() throws IOException {  final String pkcsPath="src/test/resources/internal.p12";  Path path=Paths.get(pkcsPath);  if (Files.exists(path)) {    Files.delete(path);  }}  }
class C{  public List<String> makeURLList(String shard){  List<String> urls=StrUtils.splitSmart(shard,"|",true);  for (int i=0; i < urls.size(); i++) {    urls.set(i,buildUrl(urls.get(i)));  }  if (urls.size() > 1)   Collections.shuffle(urls,r);  return urls;}  }
class C{  public long readRawLittleEndian64() throws IOException {  final byte b1=readRawByte();  final byte b2=readRawByte();  final byte b3=readRawByte();  final byte b4=readRawByte();  final byte b5=readRawByte();  final byte b6=readRawByte();  final byte b7=readRawByte();  final byte b8=readRawByte();  return (((long)b1 & 0xff)) | (((long)b2 & 0xff) << 8) | (((long)b3 & 0xff) << 16)| (((long)b4 & 0xff) << 24)| (((long)b5 & 0xff) << 32)| (((long)b6 & 0xff) << 40)| (((long)b7 & 0xff) << 48)| (((long)b8 & 0xff) << 56);}  }
class C{  public static String article_noun(final String noun,final boolean definite){  if (definite) {    return "the " + noun;  } else {    return a_noun(noun);  }}  }
class C{  public static boolean isValid(final String uri){  try {    new URL(uri);  } catch (  final MalformedURLException e) {    return false;  }  return true;}  }
class C{  public boolean pass(final DCPEvent dcpEvent){  return dcpEvent.message() instanceof MutationMessage || dcpEvent.message() instanceof RemoveMessage;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private static void checkJNetPcapNativeAssembly(){  File parent=FileUtils.getUserDirectory();  File file=FileUtils.getFile(parent,Environment.APPLICATION_NAME);  file.mkdir();  JNWizard jnw=new JNWizard();  boolean firstRun=jnw.libSize() == 0L;  if (!jnw.isPresent()) {    jnw.run();    JNWizard.errors.stream().map(null).forEach(null);    if (firstRun) {      JOptionPane.showMessageDialog(null,"Grassmarlin is done being configured. Please restart the application.","Restart Required",JOptionPane.INFORMATION_MESSAGE);      System.exit(0);    }  }}  }
class C{  public boolean hasMoreTokens(){  if (!retDelims) {    while (pos < len && delim.indexOf(str.charAt(pos)) >= 0)     pos++;  }  return pos < len;}  }
class C{  public ServletCaller(){  this(BufferServletOutputStream.BUFFER_SIZE);}  }
class C{  protected final void sendErrorMessage(final String linkId,final boolean closeLink){  sendMessage(linkId,getErrorMessage(linkId,closeLink));}  }
class C{  private void onTrigger5(){  addInstruction(R.string.accessibility_tutorial_lesson_1_text_6,true,getContext().getString(R.string.accessibility_tutorial_next));}  }
class C{  public boolean dropDatabase(Connection sysConn){  log.info(m_databaseName);  return executeCommands(m_dbTarget.getCommands(AdempiereDatabase.CMD_DROP_DATABASE),sysConn,true,false);}  }
class C{  public void printStackTrace(PrintWriter s){  super.printStackTrace(s);}  }
class C{  void addFillComponents(Container panel,int[] cols,int[] rows){  Dimension filler=new Dimension(10,10);  boolean filled_cell_11=false;  CellConstraints cc=new CellConstraints();  if (cols.length > 0 && rows.length > 0) {    if (cols[0] == 1 && rows[0] == 1) {      panel.add(Box.createRigidArea(filler),cc.xy(1,1));      filled_cell_11=true;    }  }  for (int index=0; index < cols.length; index++) {    if (cols[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(cols[index],1));  }  for (int index=0; index < rows.length; index++) {    if (rows[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(1,rows[index]));  }}  }
class C{  public boolean containsOutpoint(Outpoint outpoint){  return contains(outpoint.toWire());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:43.749 -0500",hash_original_method="11B95004E66CA25E019ACFB4385C511B",hash_generated_method="11F57C26AF426CB557A303F7133CD963") public static boolean isEncryptedFilesystemEnabled(){  return SystemProperties.getBoolean(SYSTEM_PROPERTY_EFS_ENABLED,false);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static Enum castToEnum(Object object,Class<? extends Enum> type){  if (object == null)   return null;  if (type.isInstance(object))   return (Enum)object;  if (object instanceof String || object instanceof GString) {    return Enum.valueOf(type,object.toString());  }  throw new GroovyCastException(object,type);}  }
class C{  public EipTests(String name){  super(name);}  }
class C{  public final void partChannel(String channel){  this.sendRawLine("PART " + channel);}  }
class C{  protected void finalize(){  keyStored=null;}  }
class C{  private static Set<String> printSidewikiEntries(SidewikiService service,URL feedUrl) throws IOException, ServiceException {  Set<String> authors=new HashSet<String>();  SidewikiEntryFeed resultFeed=service.getFeed(feedUrl,SidewikiEntryFeed.class);  System.out.println(resultFeed.getTitle().getPlainText());  for (int i=0; i < resultFeed.getEntries().size(); i++) {    SidewikiEntry entry=resultFeed.getEntries().get(i);    printEntry(entry);    SidewikiAuthor author=(SidewikiAuthor)entry.getAuthors().get(0);    authors.add(author.getResourceId().getValue());  }  return authors;}  }
class C{  @Ignore @Test public void test_PGS_Started_DR_CREATED_NO_RECEIVER() throws Exception {  try {    Integer lnPort=(Integer)vm0.invoke(null);    Integer nyPort=(Integer)vm1.invoke(null);    vm4.invoke(null);    vm4.invoke(null);    vm4.invoke(null);    vm4.invoke(null);    vm4.invoke(null);  } catch (  Exception e) {    Assert.fail("Unexpected exception",e);  }}  }
class C{  public CSelectionHistoryTreeNode(final String name){  super(name);  m_snapshot=new CSelectionSnapshot(new ArrayList<NaviNode>());  m_root=true;}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  log.info("Get from " + request.getRemoteHost() + " - "+ request.getRemoteAddr());  HttpSession session=request.getSession(true);  session.removeAttribute(WebSessionCtx.HDR_MESSAGE);  WebUser wu=(WebUser)session.getAttribute(WebUser.NAME);  WebBasket wb=(WebBasket)session.getAttribute(WebBasket.NAME);  String url="/login.jsp";  if (wb == null || wb.getLineCount() == 0)   url="/basket.jsp"; else {    session.setAttribute(ATTR_CHECKOUT,"Y");    if (wu != null && wu.isLoggedIn())     url="/addressInfo.jsp";  }  log.info("Forward to " + url);  RequestDispatcher dispatcher=getServletContext().getRequestDispatcher(url);  dispatcher.forward(request,response);}  }
class C{  public Boolean isInstanceUuid(){  return instanceUuid;}  }
class C{  public Set<K> keySet(){  HashSet<K> keys=new HashSet<K>(m_keys);  return keys;}  }
class C{  private void newLine(int align){  if (curLine.getComponentCount() == 0) {    curLine.setPreferredH(font.getHeight());  } else   if (maxSuperscript != 0) {    for (int i=0; i < curLine.getComponentCount(); i++) {      Component cmp=curLine.getComponentAt(i);      Style style=cmp.getStyle();      style.setMargin(Component.TOP,style.getMargin(Component.TOP) + maxSuperscript - style.getMargin(Component.BOTTOM));      style.setMargin(Component.BOTTOM,0);      if (cmp instanceof HTMLLink) {        style=cmp.getSelectedStyle();        style.setMargin(Component.TOP,style.getMargin(Component.TOP) + maxSuperscript - style.getMargin(Component.BOTTOM));        style.setMargin(Component.BOTTOM,0);        style=((HTMLLink)cmp).getPressedStyle();        style.setMargin(Component.TOP,style.getMargin(Component.TOP) + maxSuperscript - style.getMargin(Component.BOTTOM));        style.setMargin(Component.BOTTOM,0);      }    }    maxSuperscript=0;  }  lastWasEmpty=(curLine.getComponentCount() == 0);  curContainer.addComponent(curLine);  curLine=new Container();  curLine.getStyle().setBgTransparency(0);  if (!FIXED_WIDTH) {    FlowLayout fl=new FlowLayout(align);    fl.setValign(Component.BOTTOM);    fl.setValignByRow(true);    curLine.setLayout(fl);  } else {    FlowLayout fl=(FlowLayout)curLine.getLayout();    fl.setValign(Component.BOTTOM);  }  curLine.setScrollableX(false);  curLine.getStyle().setMargin(Component.LEFT,leftIndent);  x=leftIndent;}  }
class C{  public static int[] flatten(int M[][]){  int v[]=new int[M.length * M[0].length];  int k=0;  for (int i=0; i < M.length; i++) {    for (int j=0; j < M[i].length; j++) {      v[k++]=M[i][j];    }  }  return v;}  }
class C{  public BuiltinFont(String baseFont,PDFObject fontObj) throws IOException {  super(baseFont,fontObj,null);  parseFont(baseFont);}  }
class C{  public String sslKeyStorePath(){  return reader.getString(SSL_KEY_STORE_PATH);}  }
class C{  @Override protected Object convertArray(final Object value){  return value;}  }
class C{  public void render(java.awt.Graphics graphics){  for (  EditableOMGraphic eomg : getEditables()) {    eomg.render(graphics);  }}  }
class C{  private void checkTLSServer(X509Certificate cert,String parameter) throws CertificateException {  Set<String> exts=getCriticalExtensions(cert);  if (KU_SERVER_ENCRYPTION.contains(parameter)) {    if (checkKeyUsage(cert,KU_KEY_ENCIPHERMENT) == false) {      throw new ValidatorException("KeyUsage does not allow key encipherment",ValidatorException.T_EE_EXTENSIONS,cert);    }  } else   if (KU_SERVER_SIGNATURE.contains(parameter)) {    if (checkKeyUsage(cert,KU_SIGNATURE) == false) {      throw new ValidatorException("KeyUsage does not allow digital signatures",ValidatorException.T_EE_EXTENSIONS,cert);    }  } else   if (KU_SERVER_KEY_AGREEMENT.contains(parameter)) {    if (checkKeyUsage(cert,KU_KEY_AGREEMENT) == false) {      throw new ValidatorException("KeyUsage does not allow key agreement",ValidatorException.T_EE_EXTENSIONS,cert);    }  } else {    throw new CertificateException("Unknown authType: " + parameter);  }  if (checkEKU(cert,exts,OID_EKU_TLS_SERVER) == false) {    if ((checkEKU(cert,exts,OID_EKU_MS_SGC) == false) && (checkEKU(cert,exts,OID_EKU_NS_SGC) == false)) {      throw new ValidatorException("Extended key usage does not permit use for TLS " + "server authentication",ValidatorException.T_EE_EXTENSIONS,cert);    }  }  if (!SimpleValidator.getNetscapeCertTypeBit(cert,NSCT_SSL_SERVER)) {    throw new ValidatorException("Netscape cert type does not permit use for SSL server",ValidatorException.T_EE_EXTENSIONS,cert);  }  exts.remove(SimpleValidator.OID_KEY_USAGE);  exts.remove(SimpleValidator.OID_EXTENDED_KEY_USAGE);  exts.remove(SimpleValidator.OID_NETSCAPE_CERT_TYPE);  checkRemainingExtensions(exts);}  }
class C{  public static byte[] toByteArray(final Reader input) throws IOException {  return IOUtils.toByteArray(input,Charset.defaultCharset());}  }
class C{  protected void checkInvalidOptionsInferSignatures(){  if (checker.useUncheckedCodeDefault("source") || checker.useUncheckedCodeDefault("bytecode")) {    ErrorReporter.errorAbort("The option -Ainfer cannot be" + " used together with unchecked code defaults.");  }}  }
class C{  @Override public Object readObject(int index) throws IOException {  openElement(index);  Object o;  String ref=getAttribute("ref",null);  String id=getAttribute("id",null);  if (ref != null && id != null) {    throw new IOException("Element has both an id and a ref attribute: <" + getTagName() + " id="+ id+ " ref="+ ref+ ">");  }  if (id != null && idobjects.containsKey(id)) {    throw new IOException("Duplicate id attribute: <" + getTagName() + " id="+ id+ ">");  }  if (ref != null && !idobjects.containsKey(ref)) {    throw new IOException("Illegal ref attribute value: <" + getTagName() + " ref="+ ref+ ">");  }  if (ref != null) {    o=idobjects.get(ref);  } else {    o=factory.read(this);    if (id != null) {      idobjects.put(id,o);    }    if (o instanceof DOMStorable) {      ((DOMStorable)o).read(this);    }  }  closeElement();  return o;}  }
class C{  public String toHttpRequestLine(){  return getMethod().name().concat(StringUtils.SPACE).concat(UriUtils.decode(getHref().toString()));}  }
class C{  public boolean mustRefresh(){  try {    if (currentSnapshot == null || sourceFile.countFiles() != currentSnapshot.size())     return true;    if (currentOpenFile != null) {      if (!Files.exists(currentOpenFile.getPath())) {        LOGGER.debug("Current file {} does not exist anymore. Must refresh.",currentOpenFile.getPath());        return true;      }      BasicFileAttributes newAttr=Files.readAttributes(currentOpenFile.getPath(),BasicFileAttributes.class);      FileId newId=FileId.get(newAttr);      if (!newId.equals(currentOpenFile.getId())) {        LOGGER.debug("ID for current file ({}) changed from {} to {}. Must refresh.",currentOpenFile.getPath(),currentOpenFile.getId(),newId);        return true;      }      if (newAttr.size() < currentOpenFile.getSize()) {        LOGGER.debug("Current file ({}) shrunk in size from {} to {}. Must refresh.",currentOpenFile.getPath(),currentOpenFile.getSize(),newAttr.size());        return true;      }    }  } catch (  IOException e) {    LOGGER.error("Error while status of current file snapshot. Must refresh.",e);    return true;  }  return false;}  }
class C{  public Integer evaluate(float fraction,Integer startValue,Integer endValue){  int startInt=startValue;  return (int)(startInt + fraction * (endValue - startInt));}  }
class C{  public boolean isNightMode(){  return null == nightMode ? _nightMode : nightMode.get();}  }
class C{  public void pauseAll() throws SchedulerException {  try {    getRemoteScheduler().pauseAll();  } catch (  RemoteException re) {    throw invalidateHandleCreateException("Error communicating with remote scheduler.",re);  }}  }
class C{  private void internalWrite(byte[] b,int off,int len,boolean finish) throws IOException {  coder.output=embiggen(coder.output,coder.maxOutputSize(len));  if (!coder.process(b,off,len,finish)) {    throw new Base64DataException("bad base-64");  }  out.write(coder.output,0,coder.op);}  }
class C{  @Override public void write(int c){  int newcount=count + 1;  if (newcount > buf.length) {    buf=Arrays.copyOf(buf,Math.max(buf.length << 1,newcount));  }  buf[count]=(char)c;  count=newcount;}  }
class C{  public void writeThrift(TBase indexObject) throws IOException {  thriftWriter.write(indexObject);}  }
class C{  protected RegionFactory(GemFireCacheImpl cache,RegionShortcut pra){  this.cache=cache;  RegionAttributes ra=cache.getRegionAttributes(pra.toString());  if (ra == null) {    throw new IllegalStateException("The region shortcut " + pra + " has been removed.");  }  this.attrsFactory=new AttributesFactory<K,V>(ra);}  }
class C{  public SubscriptionTopicSummaryProperties(final Boolean show,final Integer count,final T message,final int maxPayloadLength){  super(message,maxPayloadLength);  this.show=new SimpleBooleanProperty(show);  this.count=new SimpleIntegerProperty(count);}  }
class C{  public String intToRoman(int num){  for (int i=0; i < intDict.length; i++) {    if (intDict[i] <= num) {      return romanDict[i] + intToRoman(num - intDict[i]);    }  }  return "";}  }
class C{  @Override public void run(){  amIActive=true;  String demHeader=null;  String streamHeadsHeader=null;  String elevationModifiedHeader=null;  String correctedDemHeader=null;  List<StreamHead> streamHeadList=new ArrayList<>();  int counter=0;  float progress=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      demHeader=args[i];    } else     if (i == 1) {      streamHeadsHeader=args[i];    } else     if (i == 2) {      elevationModifiedHeader=args[i];    } else     if (i == 3) {      correctedDemHeader=args[i];    } else     if (i == 4) {      maxRadius=Double.parseDouble(args[i]);    }  }  if ((demHeader == null) || (streamHeadsHeader == null) || (elevationModifiedHeader == null)|| (correctedDemHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    dem=new WhiteboxRaster(demHeader,"r");    streamHeads=new WhiteboxRaster(streamHeadsHeader,"r");    numRows=dem.getNumberRows();    numCols=dem.getNumberColumns();    noData=dem.getNoDataValue();    gridRes=dem.getCellSizeX();    elevationModified=new WhiteboxRaster(elevationModifiedHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,0);    elevationModified.setPreferredPalette("blueyellow.pal");    elevationModified.setDataScale(WhiteboxRasterBase.DataScale.CONTINUOUS);    elevationModified.setZUnits("dimensionless");    correctedDEM=new WhiteboxRaster(correctedDemHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,0);    correctedDEM.setPreferredPalette("blueyellow.pal");    correctedDEM.setDataScale(WhiteboxRasterBase.DataScale.CONTINUOUS);    correctedDEM.setZUnits("dimensionless");    if (streamHeads.getNumberColumns() != numCols || streamHeads.getNumberRows() != numRows) {      showFeedback("Input images must have the same dimensions.");      return;    }    updateProgress("Loop 1 of 4:",0);    for (int row=0; row < numRows; row++) {      for (int col=0; col < numCols; col++) {        if (dem.getValue(row,col) != noData) {          elevationModified.setValue(row,col,0);        } else {          elevationModified.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (numRows - 1));      updateProgress("Loop 1 of 4:",(int)progress);    }    updateProgress("Loop 2 of 4:",0);    for (int row=0; row < numRows; row++) {      for (int col=0; col < numCols; col++) {        if (streamHeads.getValue(row,col) == 1) {          streamHeadList.add(new StreamHead(col,row,dem.getValue(row,col)));        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (numRows - 1));      updateProgress("Loop 2 of 4:",(int)progress);    }    streamHeadList=OrderStreamHeads(streamHeadList);    updateProgress("Loop 3 of 4:",0);    for (    StreamHead streamHead : streamHeadList) {      CheckFlowPath(streamHead.GetXCoord(),streamHead.GetYCoord());      counter=counter + 1;      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * counter / streamHeadList.size());      updateProgress("Loop 3 of 4:",(int)progress);    }    updateProgress("Loop 4 of 4:",0);    for (int row=0; row < numRows; row++) {      for (int col=0; col < numCols; col++) {        if (elevationModified.getValue(row,col) != noData) {          correctedDEM.setValue(row,col,dem.getValue(row,col) - elevationModified.getValue(row,col));        } else {          correctedDEM.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (numRows - 1));      updateProgress("Loop 4 of 4:",(int)progress);    }    elevationModified.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    elevationModified.addMetadataEntry("Created on " + new Date());    correctedDEM.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    correctedDEM.addMetadataEntry("Created on " + new Date());    dem.close();    streamHeads.close();    elevationModified.close();    correctedDEM.close();    returnData(correctedDemHeader);  } catch (  Exception e) {    showFeedback(e.getMessage());  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public WindowsArrowButton(int direction){  super(direction);}  }
class C{  public Set<String> keySet(){  return map.keySet();}  }
class C{  public void paint(Graphics g,int width,int height){  CGMDisplay cgmDisplay=new CGMDisplay(this);  cgmDisplay.scale(width,height);  cgmDisplay.paint(g);}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMGlyphElement(prefix,(AbstractDocument)doc);}  }
class C{  protected NameValue qheader() throws ParseException {  String name=lexer.getNextToken('=');  lexer.consume(1);  String value=hvalue();  return new NameValue(name,value,false);}  }
class C{  public boolean isDelivered(){  Object oo=get_Value(COLUMNNAME_IsDelivered);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public DictItem updateDictItem(long dictItemId,long dictCollectionId,long dictVersionId,String itemCode,Map<Locale,String> itemNameMap,long parentItemId,ServiceContext serviceContext) throws NoSuchDictItemException, SystemException, NoSuchDictVersionException {  return dictItemLocalService.updateDictItem(dictItemId,dictCollectionId,dictVersionId,itemCode,itemNameMap,null,parentItemId,serviceContext);}  }
class C{  public CollectionLikeType constructRawCollectionLikeType(Class<?> collectionClass){  return CollectionLikeType.construct(collectionClass,unknownType());}  }
class C{  protected void moveTouchPoint(double x,double y){  labelText.set(createLabelText(x,y,touchId));  Bounds cb=circle.getBoundsInParent();  this.relocate(x - cb.getMinX() - cb.getWidth() / 2,y - cb.getMinY() - cb.getHeight() / 2);}  }
class C{  public ObjectName[] manageStats() throws AdminException, MalformedObjectNameException {  return Helper.manageStats(this);}  }
class C{  public String toString(){  return "PointD, x: " + x + ", y: "+ y;}  }
class C{  public Exports createExports(){  return mAdapter.create(Exports.class);}  }
class C{  public static void checkOperationalPattern1ACompliance(List<PartitionPack> partitionPacks){  IMFErrorLogger imfErrorLogger=new IMFErrorLoggerImpl();  for (  PartitionPack partitionPack : partitionPacks) {    byte[] bytes=partitionPack.getOperationalPattern();    for (int i=0; i < bytes.length; i++) {      if ((MXFOperationalPattern1A.OPERATIONAL_PATTERN1A_KEY_MASK[i] != 0) && (MXFOperationalPattern1A.OPERATIONAL_PATTERN1A_KEY[i] != bytes[i])) {        imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_COMPONENT_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.FATAL,MXFOperationalPattern1A.OP1A_EXCEPTION_PREFIX + String.format("Operational Pattern field in preface = 0x%x at position (zero-indexed) = %d, is different from expected value = 0x%x",bytes[i],i,MXFOperationalPattern1A.OPERATIONAL_PATTERN1A_KEY[i]));      }    }    if (partitionPack.getNumberOfEssenceContainerULs() < 1) {      imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_COMPONENT_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.FATAL,MXFOperationalPattern1A.OP1A_EXCEPTION_PREFIX + String.format("Number of EssenceContainer ULs in partition pack = %d, at least 1 is expected",partitionPack.getNumberOfEssenceContainerULs()));    }  }  if (imfErrorLogger.hasFatalErrors()) {    throw new MXFException(String.format("Found fatal errors in the IMFTrackFile that violate IMF OP1A compliance"),imfErrorLogger);  }}  }
class C{  public void testSetBitLeftmostNegative(){  byte aBytes[]={1,-128,56,100,-15,35,26};  int aSign=-1;  int number=48;  byte rBytes[]={-1,127,-57,-101,14,-36,-26,49};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.setBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  static byte[] hexToBytes(String hex){  if (hex == null) {    return EMPTY_BYTES;  }  hex=hex.replaceAll("\\s+","");  if (hex.length() == 0) {    return EMPTY_BYTES;  }  ByteArrayOutputStream baos=new ByteArrayOutputStream(hex.length() / 2);  byte b;  for (int i=0; i < hex.length(); i++) {    int high=charToNibble(hex.charAt(i));    int low=0;    if (i < hex.length() - 1) {      i++;      low=charToNibble(hex.charAt(i));    }    b=(byte)(high << 4 | low);    baos.write(b);  }  return baos.toByteArray();}  }
class C{  public void dispose(){  removeListeners(m_graph.getRawView());  m_edgeDrawingSynchronizer.dispose();  m_settingsSynchronizer.dispose();}  }
class C{  @Override public boolean canTransferCriticals(int loc){  return false;}  }
class C{  public FileOperationFailedException(String operation,String entity,String name,Throwable cause){  super(String.format(_errorMessage,operation,entity,name),cause);}  }
class C{  @Override public QualifiedNameResolver withoutRoots(){  myWithoutRoots=true;  return this;}  }
class C{  public void testGetObject1() throws Exception {  KeyGenerator kg=KeyGenerator.getInstance("DES");  Key key=kg.generateKey();  IvParameterSpec ips=new IvParameterSpec(new byte[]{1,2,3,4,5,6,7,8});  Cipher cipher=Cipher.getInstance("DES/CBC/PKCS5Padding");  cipher.init(Cipher.ENCRYPT_MODE,key,ips);  String secret="secret string";  Mock_SealedObject so=new Mock_SealedObject(secret,cipher);  assertEquals("The returned object does not equals to the " + "original object.",secret,so.getObject(key));  assertTrue("The encodedParams field of SealedObject object " + "should contain the encoded algorithm parameters.",Arrays.equals(so.get_encodedParams(),cipher.getParameters().getEncoded()));  try {    so.getObject((Key)null);    fail("InvalidKeyException expected");  } catch (  InvalidKeyException e) {  }catch (  NullPointerException e) {  }}  }
class C{  public JSONTokener(String s){  this(new StringReader(s));}  }
class C{  public DerbyDatabase(){  dbms=DBMS.DERBY;}  }
class C{  public Textifier visitTypeAnnotation(final int typeRef,final TypePath typePath,final String desc,final boolean visible){  buf.setLength(0);  buf.append(tab).append('@');  appendDescriptor(FIELD_DESCRIPTOR,desc);  buf.append('(');  text.add(buf.toString());  Textifier t=createTextifier();  text.add(t.getText());  buf.setLength(0);  buf.append(") : ");  appendTypeReference(typeRef);  buf.append(", ").append(typePath);  buf.append(visible ? "\n" : " // invisible\n");  text.add(buf.toString());  return t;}  }
class C{  public Array mul(final Array array){  QL.require(cols() == array.size(),ARRAY_IS_INCOMPATIBLE);  final Array result=new Array(rows(),this.flags());  final Address.MatrixAddress.MatrixOffset toff=this.addr.offset();  final Address.ArrayAddress.ArrayOffset aoff=array.addr.offset();  final int offsetT=this.addr.isFortran() ? 1 : 0;  final int offsetA=array.addr.isFortran() ? 1 : 0;  for (int row=offsetT; row < result.size() + offsetT; row++) {    toff.setRow(row);    toff.setCol(offsetT);    aoff.setIndex(offsetA);    double sum=0.0;    for (int col=offsetT; col < this.cols() + offsetT; col++) {      final double telem=this.$[toff.op()];      final double aelem=array.$[aoff.op()];      sum+=telem * aelem;      toff.nextCol();      aoff.nextIndex();    }    result.$[result._(row)]=sum;  }  return result;}  }
class C{  public byte[] encrypt(byte[] plainTextAsBytes,CharSequence password) throws KeyCrypterException {  try {    byte[] salt=new byte[SALT_LENGTH];    secureRandom.nextBytes(salt);    ParametersWithIV key=(ParametersWithIV)getAESPasswordKey(password,salt);    BufferedBlockCipher cipher=new PaddedBufferedBlockCipher(new CBCBlockCipher(new AESFastEngine()));    cipher.init(true,key);    byte[] encryptedBytes=new byte[cipher.getOutputSize(plainTextAsBytes.length)];    final int processLength=cipher.processBytes(plainTextAsBytes,0,plainTextAsBytes.length,encryptedBytes,0);    final int doFinalLength=cipher.doFinal(encryptedBytes,processLength);    return concat(salt,Arrays.copyOf(encryptedBytes,processLength + doFinalLength));  } catch (  Exception e) {    throw new KeyCrypterException("Could not encrypt bytes '" + Utils.bytesToHexString(plainTextAsBytes) + "'",e);  }}  }
class C{  private String removeHtmlTagsAndSpaces(final String strValue){  String returnValue=null;  if (strValue != null) {    final Reader strReader=new StringReader(strValue);    final MyHtmlParser parser=new MyHtmlParser();    returnValue=parser.parseMyHtml(strReader,true);  }  return returnValue;}  }
class C{  public void addAll(int position,Collection<? extends T> items){  mItems.addAll(position,items);  notifyDataSetChanged();}  }
class C{  @ApiOperation(value="Register the specified node for the single engine") @RequestMapping(value="/engine/registernode",method=RequestMethod.POST) @ResponseStatus(HttpStatus.OK) @ResponseBody public final RegistrationInfo postRegisterNode(@RequestParam(value="externalId") String externalId,@RequestParam(value="nodeGroupId") String nodeGroupId,@RequestParam(value="databaseType") String databaseType,@RequestParam(value="databaseVersion") String databaseVersion,@RequestParam(value="hostName") String hostName){  return postRegisterNode(getSymmetricEngine().getEngineName(),externalId,nodeGroupId,databaseType,databaseVersion,hostName);}  }
class C{  public void updateSeries(CandleSeries source,int skip,boolean newBar){  if (source == null) {    throw new IllegalArgumentException("Null source (CandleSeries).");  }  if (getLength() == null || getLength() < 1) {    throw new IllegalArgumentException("MA period must be greater than zero.");  }  if (getVostroPeriod() == null || getVostroPeriod() < 1) {    throw new IllegalArgumentException("Vostro period must be greater than zero.");  }  if (getLength() < getVostroPeriod()) {    throw new IllegalArgumentException("MA period must be greater than Vostro period.");  }  if (source.getItemCount() > skip) {    CandleItem candleItem=(CandleItem)source.getDataItem(skip);    if (0 != this.getPrice(candleItem)) {      double price=this.getPrice(candleItem);      if (this.yyValues.size() == getLength()) {        if (newBar) {          sum=sum - this.yyValues.getLast() + price;          this.yyValues.removeLast();          this.yyValues.addFirst(price);          this.volValues.removeLast();          this.volValues.addFirst(candleItem.getVolume());        } else {          sum=sum - this.yyValues.getFirst() + price;          this.yyValues.removeFirst();          this.yyValues.addFirst(price);        }      } else {        if (newBar) {          sum=sum + price;          this.yyValues.addFirst(price);          this.volValues.addFirst(candleItem.getVolume());        } else {          sum=sum + price - this.yyValues.getFirst();          this.yyValues.removeFirst();          this.yyValues.addFirst(price);          this.volValues.removeFirst();          this.volValues.addFirst(candleItem.getVolume());        }      }      if (this.highPlusLowValues.size() == getVostroPeriod()) {        if (newBar) {          this.highPlusLowSum=this.highPlusLowSum - this.highPlusLowValues.getLast() + (candleItem.getHigh() + candleItem.getLow());          this.highPlusLowValues.removeLast();          this.highPlusLowValues.addFirst((candleItem.getHigh() + candleItem.getLow()));          this.highLessLowSum=this.highLessLowSum - this.highLessLowValues.getLast() + (candleItem.getHigh() - candleItem.getLow());          this.highLessLowValues.removeLast();          this.highLessLowValues.addFirst((candleItem.getHigh() - candleItem.getLow()));        } else {          this.highPlusLowSum=this.highPlusLowSum - this.highPlusLowValues.getFirst() + (candleItem.getHigh() + candleItem.getLow());          this.highPlusLowValues.removeFirst();          this.highPlusLowValues.addFirst((candleItem.getHigh() + candleItem.getLow()));          this.highLessLowSum=this.highLessLowSum - this.highLessLowValues.getFirst() + (candleItem.getHigh() - candleItem.getLow());          this.highLessLowValues.removeFirst();          this.highLessLowValues.addFirst((candleItem.getHigh() - candleItem.getLow()));        }      } else {        if (newBar) {          this.highPlusLowSum=this.highPlusLowSum + (candleItem.getHigh() + candleItem.getLow());          this.highPlusLowValues.addFirst((candleItem.getHigh() + candleItem.getLow()));          this.highLessLowSum=this.highLessLowSum + (candleItem.getHigh() - candleItem.getLow());          this.highLessLowValues.addFirst((candleItem.getHigh() - candleItem.getLow()));        } else {          this.highPlusLowSum=this.highPlusLowSum + (candleItem.getHigh() + candleItem.getLow()) - this.highPlusLowValues.getFirst();          this.highPlusLowValues.removeFirst();          this.highPlusLowValues.addFirst((candleItem.getHigh() + candleItem.getLow()));          this.highLessLowSum=this.highLessLowSum + (candleItem.getHigh() - candleItem.getLow()) - this.highLessLowValues.getFirst();          this.highLessLowValues.removeFirst();          this.highLessLowValues.addFirst((candleItem.getHigh() - candleItem.getLow()));        }      }      if (this.yyValues.size() == getLength()) {        double ma=calculateMA(this.getMAType(),this.yyValues,this.volValues,sum);        double gd_128=this.highPlusLowSum / 2.0d / this.getVostroPeriod();        double gd_136=(this.highLessLowSum / this.getVostroPeriod()) / this.getVostroPeriod();        if (newBar && this.vostro1 != Double.MAX_VALUE) {          vostro1Values.addFirst(this.vostro1);          vostro2Values.addFirst(this.vostro2);          if (vostro1Values.size() > 2) {            vostro1Values.removeLast();            vostro2Values.removeLast();          }        }        this.vostro1=(candleItem.getLow() - gd_128) / gd_136;        this.vostro2=(candleItem.getHigh() - gd_128) / gd_136;        double vostro=0;        if (vostro2 > this.getVostroRange().doubleValue() && candleItem.getHigh() > ma) {          vostro=90.0;        } else {          if (vostro1 < (-1 * this.getVostroRange().doubleValue()) && candleItem.getLow() < ma) {            vostro=-90.0;          } else {            vostro=0.0;          }        }        if (vostro2Values.size() > 0) {          if (vostro2 > this.getVostroRange().doubleValue() && vostro2Values.getFirst() > this.getVostroRange().doubleValue()) {            vostro=0;          }        }        if (vostro2Values.size() > 1) {          if (vostro2 > this.getVostroRange().doubleValue() && vostro2Values.getFirst() > this.getVostroRange().doubleValue() && vostro2Values.getLast() > this.getVostroRange().doubleValue()) {            vostro=0;          }        }        if (vostro2Values.size() > 0) {          if (vostro1 < (-1 * this.getVostroRange().doubleValue()) && vostro1Values.getFirst() < (-1 * this.getVostroRange().doubleValue())) {            vostro=0;          }        }        if (vostro1Values.size() > 1) {          if (vostro1 < (-1 * this.getVostroRange().doubleValue()) && vostro1Values.getFirst() < (-1 * this.getVostroRange().doubleValue()) && vostro1Values.getLast() < (-1 * this.getVostroRange().doubleValue())) {            vostro=0;          }        }        if (newBar) {          VostroItem dataItem=new VostroItem(candleItem.getPeriod(),new BigDecimal(vostro));          this.add(dataItem,false);        } else {          VostroItem dataItem=(VostroItem)this.getDataItem(this.getItemCount() - 1);          dataItem.setVostro(vostro);        }      }    }  }}  }
class C{  public Dimension preferredLayoutSize(Container parent){  return calculateLayoutSize(parent,'P');}  }
class C{  public String sprintf(double x) throws IllegalArgumentException {  Enumeration e=vFmt.elements();  ConversionSpecification cs=null;  char c=0;  StringBuffer sb=new StringBuffer();  while (e.hasMoreElements()) {    cs=(ConversionSpecification)e.nextElement();    c=cs.getConversionCharacter();    if (c == '\0')     sb.append(cs.getLiteral()); else     if (c == '%')     sb.append("%"); else     sb.append(cs.internalsprintf(x));  }  return sb.toString();}  }
class C{  static IntersectionImpl wrapInstance(Memory srcMem,long seed){  int preLongs=CONST_PREAMBLE_LONGS;  long[] preArr=new long[preLongs];  srcMem.getLongArray(0,preArr,0,preLongs);  long pre0=preArr[0];  int preLongsMem=extractPreLongs(pre0);  if (preLongsMem != CONST_PREAMBLE_LONGS) {    throw new SketchesArgumentException("PreambleLongs must = 3.");  }  int serVer=extractSerVer(pre0);  if (serVer != 3) {    throw new SketchesArgumentException("Ser Version must = 3");  }  int famID=extractFamilyID(pre0);  Family.INTERSECTION.checkFamilyID(famID);  short seedHash=computeSeedHash(seed);  short seedHashMem=(short)extractSeedHash(pre0);  Util.checkSeedHashes(seedHashMem,seedHash);  IntersectionImpl impl=new IntersectionImpl(seedHash);  impl.lgArrLongs_=extractLgArrLongs(pre0);  impl.maxLgArrLongs_=checkMaxLgArrLongs(srcMem);  int flags=extractFlags(pre0);  impl.empty_=(flags & EMPTY_FLAG_MASK) > 0;  impl.curCount_=extractCurCount(preArr[1]);  impl.thetaLong_=preArr[2];  if (impl.empty_) {    if (impl.curCount_ != 0) {      throw new SketchesArgumentException("srcMem empty state inconsistent with curCount: " + impl.empty_ + ","+ impl.curCount_);    }  }  impl.mem_=srcMem;  return impl;}  }
class C{  protected void deepMarkSizeInvalid(){  markSizeInvalid();  for (int counter=getChildCount() - 1; counter >= 0; counter--)   ((TreeStateNode)getChildAt(counter)).deepMarkSizeInvalid();}  }
class C{  public <E extends T>E max(Iterable<E> iterable){  Iterator<E> iterator=iterable.iterator();  E maxSoFar=iterator.next();  while (iterator.hasNext()) {    maxSoFar=max(maxSoFar,iterator.next());  }  return maxSoFar;}  }
class C{  public static RepositoryType toRepositoryType(Vector<Object> xmlRpcParameters){  RepositoryType repositoryType=null;  if (!xmlRpcParameters.isEmpty()) {    log.debug("Extracting repository type from XML-RPC parameters %s",xmlRpcParameters);    repositoryType=RepositoryType.newInstance((String)xmlRpcParameters.get(REPOSITORY_TYPE_NAME_IDX));    String repositoryClass=(String)xmlRpcParameters.get(REPOSITORY_TYPE_REPOCLASS_IDX);    repositoryType.setClassName(repositoryClass);    repositoryType.setDocumentUrlFormat(StringUtils.stripToNull((String)xmlRpcParameters.get(REPOSITORY_TYPE_NAME_FORMAT_IDX)));    repositoryType.setTestUrlFormat(StringUtils.stripToNull((String)xmlRpcParameters.get(REPOSITORY_TYPE_URI_FORMAT_IDX)));  }  return repositoryType;}  }
class C{  @Override public void close(){  closeStream(this.stdinStream,"STDIN");  this.stdinStream=null;  if (this.proc != null) {    try {      this.proc.destroy();      this.proc.waitFor();    } catch (    Exception e) {      log.error("Exception when closing child process",e);    }  }  if (this.backgroundThreads != null) {    for (    Thread t : this.backgroundThreads) {      try {        t.join();      } catch (      Exception e) {        log.error("Failed to join thread",e);      }    }    this.backgroundThreads=null;  }  closeStream(this.stdoutStream,"STDOUT");  this.stdoutStream=null;  closeStream(this.stderrStream,"STDERR");  this.stderrStream=null;}  }
class C{  public String optString(String key){  return this.optString(key,"");}  }
class C{  public final void readFully(byte[] b) throws java.io.IOException {  readFully(b,0,b.length);}  }
class C{  private void sendSelfPatch(State state){  Operation patch=Operation.createPatch(UriUtils.buildUri(getHost(),getSelfLink())).setBody(state);  this.sendRequest(patch);}  }
class C{  @Override public Id<Link> chooseNextLinkId(){  if (this.cachedNextLinkId != null) {    return this.cachedNextLinkId;  }  if (this.cachedRouteLinkIds == null) {    if (this.currentLeg.getRoute() instanceof NetworkRoute) {      this.cachedRouteLinkIds=((NetworkRoute)this.currentLeg.getRoute()).getLinkIds();    } else {      return null;    }  }  if (this.currentLinkIdIndex >= this.cachedRouteLinkIds.size()) {    Link currentLink=this.simulation.getScenario().getNetwork().getLinks().get(this.currentLinkId);    Link destinationLink=this.simulation.getScenario().getNetwork().getLinks().get(this.cachedDestinationLinkId);    if (currentLink.getToNode().equals(destinationLink.getFromNode())) {      this.cachedNextLinkId=destinationLink.getId();      return this.cachedNextLinkId;    }    if (!(this.currentLinkId.equals(this.cachedDestinationLinkId))) {      log.error("The vehicle with driver " + this.getPerson().getId() + ", currently on link "+ this.currentLinkId.toString()+ ", is at the end of its route, but has not yet reached its destination link "+ this.cachedDestinationLinkId.toString());    }    return null;  }  Id<Link> nextLinkId=this.cachedRouteLinkIds.get(this.currentLinkIdIndex);  Link currentLink=this.simulation.getScenario().getNetwork().getLinks().get(this.currentLinkId);  Link nextLink=this.simulation.getScenario().getNetwork().getLinks().get(nextLinkId);  if (currentLink.getToNode().equals(nextLink.getFromNode())) {    this.cachedNextLinkId=nextLinkId;    return this.cachedNextLinkId;  }  log.warn(this + " [no link to next routenode found: routeindex= " + this.currentLinkIdIndex+ " ]");  return null;}  }
class C{  public boolean isOutputMethodSet(){  return m_outputMethodSet;}  }
class C{  private static int indexOfLeastSignificantZeroBit(int value){  int index=1;  while ((value & 1) != 0) {    value>>=1;    index++;  }  return index;}  }
class C{  @Override public void removeVirtualFileListener(@NotNull VirtualFileListener listener){  myEventDispatcher.removeListener(listener);}  }
class C{  private static double multiplier(char unitPrefix,boolean base2){  long result;  long multiplier=base2 ? MULTIPLIER_2 : MULTIPLIER_10;switch (Character.toUpperCase(unitPrefix)) {case PREFIX_KILO:    result=multiplier;  break;case PREFIX_MEGA:result=multiplier * multiplier;break;case PREFIX_GIGA:result=multiplier * multiplier * multiplier;break;case PREFIX_TERA:result=multiplier * multiplier * multiplier* multiplier;break;case PREFIX_PETA:result=multiplier * multiplier * multiplier* multiplier* multiplier;break;default :throw new IllegalArgumentException("Invalid unit prefix: " + unitPrefix);}return result;}  }
class C{  @Override public void onClick(View v){  v.setEnabled(false);  task=new LoadGiveawayLinkTask(this,uuid);  task.execute();}  }
class C{  public static int appendLocalEdgeComment(final AbstractSQLProvider provider,final INaviEdge edge,final String commentText,final Integer userId) throws CouldntSaveDataException {  Preconditions.checkNotNull(provider,"IE00486: provider argument can not be null");  Preconditions.checkNotNull(edge,"IE00502: edge argument can not be null");  Preconditions.checkNotNull(commentText,"IE00503: comment argument can not be null");  Preconditions.checkNotNull(userId,"IE00504: userId argument can not be null");  final Connection connection=provider.getConnection().getConnection();  final String function="{ ? = call append_local_edge_comment( ?, ?, ?) }";  try {    final CallableStatement appendCommentFunction=connection.prepareCall(function);    try {      appendCommentFunction.registerOutParameter(1,Types.INTEGER);      appendCommentFunction.setInt(2,edge.getId());      appendCommentFunction.setInt(3,userId);      appendCommentFunction.setString(4,commentText);      appendCommentFunction.execute();      final int commentId=appendCommentFunction.getInt(1);      if (appendCommentFunction.wasNull()) {        throw new CouldntSaveDataException("Error: Database returned null for comment id");      }      return commentId;    }  finally {      appendCommentFunction.close();    }  } catch (  final SQLException exception) {    throw new CouldntSaveDataException(exception);  }}  }
class C{  @Override public boolean remove(Object object){  return removeElement(object);}  }
class C{  public BinaryProperty(String uri){  this.uri=uri;}  }
class C{  public boolean checkNoBottomLatitudeBound(){  return noBottomLatitudeBound;}  }
class C{  public void removeAll(final Collection elements){  adjusting=true;  Set oldSelection=new HashSet(selection);  boolean rv=selection.removeAll(elements);  adjusting=false;  if (rv) {    fireSelectionChanged(oldSelection,selection);  }}  }
class C{  public Object nextValue() throws JSONException {  char c=this.nextClean();  String string;switch (c) {case '"':case '\'':    return this.nextString(c);case '{':  this.back();return new JSONObject(this);case '[':this.back();return new JSONArray(this);}StringBuilder sb=new StringBuilder();while (c >= ' ' && ",:]}/\\\"[{;=#".indexOf(c) < 0) {sb.append(c);c=this.next();}this.back();string=sb.toString().trim();if ("".equals(string)) {throw this.syntaxError("Missing value");}return JSONObject.stringToValue(string);}  }
class C{  public static String encode(String raw){  StringBuilder sb=new StringBuilder((raw.length() * 3) / 2);  Escaping.escapeXml(raw,false,sb);  return sb.toString();}  }
class C{  @Override protected TemplateModel invokeGenericGet(Map keyMap,Class clazz,String key) throws TemplateModelException {  try {    return wrap(((ResourceBundle)object).getObject(key));  } catch (  MissingResourceException e) {    throw new _TemplateModelException(e,"No ",new _DelayedJQuote(key)," key in the ResourceBundle. " + "Note that conforming to the ResourceBundle Java API, this is an error and not just " + "a missing sub-variable (a null).");  }}  }
class C{  private static <K,V>CacheConfiguration<K,V> cacheParking(){  CacheConfiguration<K,V> ccfg=cacheConfiguration(PARKING_CACHE_NAME);  Collection<QueryEntity> qryEntities=new ArrayList<>();  QueryEntity type=new QueryEntity();  qryEntities.add(type);  type.setKeyType(Integer.class.getName());  type.setValueType(Parking.class.getName());  LinkedHashMap<String,String> qryFlds=new LinkedHashMap<>();  qryFlds.put("id","java.lang.Integer");  qryFlds.put("name","java.lang.String");  qryFlds.put("capacity","java.lang.Integer");  type.setFields(qryFlds);  ccfg.setQueryEntities(qryEntities);  return ccfg;}  }
class C{  public Events(){  super(Event.class);}  }
class C{  @Override protected boolean beforeSave(boolean newRecord){  if (getAD_Org_ID() != 0)   setAD_Org_ID(0);  String et=getElementType();  if (isMandatory() && (ELEMENTTYPE_UserList1.equals(et) || ELEMENTTYPE_UserList2.equals(et) || ELEMENTTYPE_UserElement1.equals(et)|| ELEMENTTYPE_UserElement2.equals(et)))   setIsMandatory(false);  if (ELEMENTTYPE_Account.equals(et) || ELEMENTTYPE_Organization.equals(et)) {    if (!isMandatory())     setIsMandatory(true);    if (!isActive())     setIsActive(true);  } else   if (isMandatory()) {    String errorField=null;    if (ELEMENTTYPE_Account.equals(et) && getC_ElementValue_ID() == 0)     errorField=COLUMNNAME_C_ElementValue_ID; else     if (ELEMENTTYPE_Activity.equals(et) && getC_Activity_ID() == 0)     errorField=COLUMNNAME_C_Activity_ID; else     if (ELEMENTTYPE_BPartner.equals(et) && getC_BPartner_ID() == 0)     errorField=COLUMNNAME_C_BPartner_ID; else     if (ELEMENTTYPE_Campaign.equals(et) && getC_Campaign_ID() == 0)     errorField=COLUMNNAME_C_Campaign_ID; else     if (ELEMENTTYPE_LocationFrom.equals(et) && getC_Location_ID() == 0)     errorField=COLUMNNAME_C_Location_ID; else     if (ELEMENTTYPE_LocationTo.equals(et) && getC_Location_ID() == 0)     errorField=COLUMNNAME_C_Location_ID; else     if (ELEMENTTYPE_Organization.equals(et) && getOrg_ID() == 0)     errorField=COLUMNNAME_Org_ID; else     if (ELEMENTTYPE_OrgTrx.equals(et) && getOrg_ID() == 0)     errorField=COLUMNNAME_Org_ID; else     if (ELEMENTTYPE_Product.equals(et) && getM_Product_ID() == 0)     errorField=COLUMNNAME_M_Product_ID; else     if (ELEMENTTYPE_Project.equals(et) && getC_Project_ID() == 0)     errorField=COLUMNNAME_C_Project_ID; else     if (ELEMENTTYPE_SalesRegion.equals(et) && getC_SalesRegion_ID() == 0)     errorField=COLUMNNAME_C_SalesRegion_ID;    if (errorField != null) {      log.saveError("Error",Msg.parseTranslation(getCtx(),"@IsMandatory@: @" + errorField + "@"));      return false;    }  }  if (getAD_Column_ID() == 0 && (ELEMENTTYPE_UserElement1.equals(et) || ELEMENTTYPE_UserElement2.equals(et))) {    log.saveError("Error",Msg.parseTranslation(getCtx(),"@IsMandatory@: @AD_Column_ID@"));    return false;  }  return true;}  }
class C{  protected List<VideoDTO> extractVideosFromCursor(Cursor cursor,int offset,int limit){  List<VideoDTO> videos=new ArrayList<>();  int count=0;  int begin=offset > 0 ? offset : 0;  if (cursor.moveToPosition(begin)) {    do {      VideoDTO video=extractOneVideoFromCursor(cursor);      videos.add(video);      count++;      if (limit > 0 && count > limit) {        break;      }    } while (cursor.moveToNext());  }  cursor.close();  return videos;}  }
class C{  private SubscriberBlockingStub subscriberStub() throws IOException {  if (cachedSubscriberStub == null) {    cachedSubscriberStub=SubscriberGrpc.newBlockingStub(newChannel());  }  return cachedSubscriberStub.withDeadlineAfter(timeoutSec,TimeUnit.SECONDS);}  }
class C{  private static String parsePartFromURI(String id,int index){  String vdcId=null;  if (id != null) {    String[] segments=StringUtils.split(id,':');    if ((segments.length > index) && StringUtils.isNotBlank(segments[index])) {      vdcId=segments[index];    }  }  return vdcId;}  }
class C{  @Field(20) public __VARIANT_NAME_3_union pdblVal(Pointer<Double> pdblVal){  this.io.setPointerField(this,20,pdblVal);  return this;}  }
class C{  public static double magnitude(double base,double n){  double logN=Math.log(Math.abs(n)) / Math.log(base);  return Math.signum(n) * Math.pow(base,Math.floor(logN));}  }
class C{  WhirlpoolCore(long[] T0,long[] T1,long[] T2,long[] T3,long[] T4,long[] T5,long[] T6,long[] T7,long[] RC){  super(false,32);  this.T0=T0;  this.T1=T1;  this.T2=T2;  this.T3=T3;  this.T4=T4;  this.T5=T5;  this.T6=T6;  this.T7=T7;  this.RC=RC;}  }
class C{  protected void initServletMapping(ServletContext servletContext){  servletContext.getServletRegistration("default").addMapping("*.html","*.jpg","*.png","*.gif","*.css","*.js","*.svg","*.map","*.json","*.yaml","*.woff","*.woff2","*.ttf");}  }
class C{  static ScenarioForEvalData createPlanfallModeSwitch(ScenarioForEvalData nullfall){  ScenarioForEvalData planfall=nullfall.createDeepCopy();  Values planfallForOD=planfall.getByODRelation("BC");{    ValuesForAMode railValues=planfallForOD.getByMode(Mode.rail);    railValues.getByDemandSegment(DemandSegment.PV_NON_COMMERCIAL).incByEntry(Attribute.hrs,-4.);    double delta=90.;    railValues.getByDemandSegment(DemandSegment.PV_NON_COMMERCIAL).incByEntry(Attribute.XX,delta);    planfall.getByODRelation("BC").getByMode(Mode.road).getByDemandSegment(DemandSegment.PV_NON_COMMERCIAL).incByEntry(Attribute.XX,-delta);  }  return planfall;}  }
class C{  @Beta public VirtualFileImpl copy(VirtualFileImpl source,VirtualFileImpl parent,String name,boolean overWrite) throws ForbiddenException, ConflictException, ServerException {  if (source.getVirtualFilePath().equals(parent.getVirtualFilePath())) {    throw new ForbiddenException("Item cannot be copied to itself. ");  }  if (!parent.isFolder()) {    throw new ForbiddenException("Unable copy item. Item specified as parent is not a folder. ");  }  if (!hasPermission(parent,BasicPermissions.WRITE,true)) {    throw new ForbiddenException(String.format("Unable copy item '%s' to %s. Operation not permitted. ",source.getPath(),parent.getPath()));  }  String newName=nullToEmpty(name).trim().isEmpty() ? source.getName() : name;  final Path newPath=parent.getVirtualFilePath().newPath(newName);  final File theFile=new File(ioRoot,toIoPath(newPath));  final VirtualFileImpl destination=new VirtualFileImpl(theFile,newPath,pathToId(newPath),this);  if (destination.exists()) {    doOverWrite(overWrite,destination,newPath);  }  doCopy(source,destination);  eventService.publish(new CreateEvent(workspaceId,destination.getPath(),source.isFolder()));  return destination;}  }
class C{  protected void drawTasks(Graphics2D g2,CategoryItemRendererState state,Rectangle2D dataArea,CategoryPlot plot,CategoryAxis domainAxis,ValueAxis rangeAxis,GanttCategoryDataset dataset,int row,int column){  int count=dataset.getSubIntervalCount(row,column);  if (count == 0) {    drawTask(g2,state,dataArea,plot,domainAxis,rangeAxis,dataset,row,column);  }  PlotOrientation orientation=plot.getOrientation();  for (int subinterval=0; subinterval < count; subinterval++) {    RectangleEdge rangeAxisLocation=plot.getRangeAxisEdge();    Number value0=dataset.getStartValue(row,column,subinterval);    if (value0 == null) {      return;    }    double translatedValue0=rangeAxis.valueToJava2D(value0.doubleValue(),dataArea,rangeAxisLocation);    Number value1=dataset.getEndValue(row,column,subinterval);    if (value1 == null) {      return;    }    double translatedValue1=rangeAxis.valueToJava2D(value1.doubleValue(),dataArea,rangeAxisLocation);    if (translatedValue1 < translatedValue0) {      double temp=translatedValue1;      translatedValue1=translatedValue0;      translatedValue0=temp;    }    double rectStart=calculateBarW0(plot,plot.getOrientation(),dataArea,domainAxis,state,row,column);    double rectLength=Math.abs(translatedValue1 - translatedValue0);    double rectBreadth=state.getBarWidth();    Rectangle2D bar=null;    RectangleEdge barBase=null;    if (plot.getOrientation() == PlotOrientation.HORIZONTAL) {      bar=new Rectangle2D.Double(translatedValue0,rectStart,rectLength,rectBreadth);      barBase=RectangleEdge.LEFT;    } else     if (plot.getOrientation() == PlotOrientation.VERTICAL) {      bar=new Rectangle2D.Double(rectStart,translatedValue0,rectBreadth,rectLength);      barBase=RectangleEdge.BOTTOM;    }    Rectangle2D completeBar=null;    Rectangle2D incompleteBar=null;    Number percent=dataset.getPercentComplete(row,column,subinterval);    double start=getStartPercent();    double end=getEndPercent();    if (percent != null) {      double p=percent.doubleValue();      if (orientation == PlotOrientation.HORIZONTAL) {        completeBar=new Rectangle2D.Double(translatedValue0,rectStart + start * rectBreadth,rectLength * p,rectBreadth * (end - start));        incompleteBar=new Rectangle2D.Double(translatedValue0 + rectLength * p,rectStart + start * rectBreadth,rectLength * (1 - p),rectBreadth * (end - start));      } else       if (orientation == PlotOrientation.VERTICAL) {        completeBar=new Rectangle2D.Double(rectStart + start * rectBreadth,translatedValue0 + rectLength * (1 - p),rectBreadth * (end - start),rectLength * p);        incompleteBar=new Rectangle2D.Double(rectStart + start * rectBreadth,translatedValue0,rectBreadth * (end - start),rectLength * (1 - p));      }    }    if (getShadowsVisible()) {      getBarPainter().paintBarShadow(g2,this,row,column,bar,barBase,true);    }    getBarPainter().paintBar(g2,this,row,column,bar,barBase);    if (completeBar != null) {      g2.setPaint(getCompletePaint());      g2.fill(completeBar);    }    if (incompleteBar != null) {      g2.setPaint(getIncompletePaint());      g2.fill(incompleteBar);    }    if (isDrawBarOutline() && state.getBarWidth() > BAR_OUTLINE_WIDTH_THRESHOLD) {      g2.setStroke(getItemStroke(row,column));      g2.setPaint(getItemOutlinePaint(row,column));      g2.draw(bar);    }    if (subinterval == count - 1) {      int datasetIndex=plot.indexOf(dataset);      Comparable columnKey=dataset.getColumnKey(column);      Comparable rowKey=dataset.getRowKey(row);      double xx=domainAxis.getCategorySeriesMiddle(columnKey,rowKey,dataset,getItemMargin(),dataArea,plot.getDomainAxisEdge());      updateCrosshairValues(state.getCrosshairState(),dataset.getRowKey(row),dataset.getColumnKey(column),value1.doubleValue(),datasetIndex,xx,translatedValue1,orientation);    }    if (state.getInfo() != null) {      EntityCollection entities=state.getEntityCollection();      if (entities != null) {        addItemEntity(entities,dataset,row,column,bar);      }    }  }}  }
class C{  public static long normalize(long timestamp,long step){  return timestamp - timestamp % step;}  }
class C{  @Override public MarkupDocument build(){  Swagger swagger=globalContext.getSwagger();  Info info=swagger.getInfo();  buildDocumentTitle(info.getTitle());  applyOverviewDocumentExtension(new Context(Position.DOCUMENT_BEFORE,this.markupDocBuilder));  buildOverviewTitle(OVERVIEW);  applyOverviewDocumentExtension(new Context(Position.DOCUMENT_BEGIN,this.markupDocBuilder));  buildDescriptionParagraph(info.getDescription(),this.markupDocBuilder);  buildVersionInfoSection(info.getVersion());  buildContactInfoSection(info.getContact());  buildLicenseInfoSection(info.getLicense(),info.getTermsOfService());  buildUriSchemeSection(swagger);  buildTagsSection(swagger.getTags());  buildConsumesSection(swagger.getConsumes());  buildProducesSection(swagger.getProduces());  applyOverviewDocumentExtension(new Context(Position.DOCUMENT_END,this.markupDocBuilder));  applyOverviewDocumentExtension(new Context(Position.DOCUMENT_AFTER,this.markupDocBuilder));  return new MarkupDocument(markupDocBuilder);}  }
class C{  public JSONObject put(String key,long value){  super.put(key,new Long(value));  return this;}  }
class C{  public static boolean equals(String as[],String as1[]){  if (as.length != as1.length) {    return false;  }  for (int i=0; i < as.length; i++) {    if (as[i].equals(as1[i]) == false) {      return false;    }  }  return true;}  }
class C{  public Class toClass() throws CannotCompileException {  return getClassPool().toClass(this);}  }
class C{  public final void testNegate(){  assertNotNull(Constraints.negate(Constraints.minLength(1)));}  }
class C{  protected void fireTimeoutTimer(){  if (sipStack.isLoggingEnabled())   sipStack.getStackLogger().logDebug("fireTimeoutTimer " + this);  SIPDialog dialog=(SIPDialog)this.getDialog();  if (TransactionState.CALLING == this.getState() || TransactionState.TRYING == this.getState() || TransactionState.PROCEEDING == this.getState()) {    if (dialog != null && (dialog.getState() == null || dialog.getState() == DialogState.EARLY)) {      if (((SIPTransactionStack)getSIPStack()).isDialogCreated(this.getOriginalRequest().getMethod())) {        dialog.delete();      }    } else     if (dialog != null) {      if (getOriginalRequest().getMethod().equalsIgnoreCase(Request.BYE) && dialog.isTerminatedOnBye()) {        dialog.delete();      }    }  }  if (TransactionState.COMPLETED != this.getState()) {    raiseErrorEvent(SIPTransactionErrorEvent.TIMEOUT_ERROR);    if (this.getOriginalRequest().getMethod().equalsIgnoreCase(Request.CANCEL)) {      SIPClientTransaction inviteTx=(SIPClientTransaction)this.getOriginalRequest().getInviteTransaction();      if (inviteTx != null && ((inviteTx.getState() == TransactionState.CALLING || inviteTx.getState() == TransactionState.PROCEEDING)) && inviteTx.getDialog() != null) {        inviteTx.setState(TransactionState.TERMINATED);      }    }  } else {    this.setState(TransactionState.TERMINATED);  }}  }
class C{  public static void enableUserConfigurations(){  allowUserConfigurations=true;}  }
class C{  public void endQuery(){}  }
class C{  public static <T1,T2,R>Function2<T1,T2,R> memoizeBiFunction(Function2<T1,T2,R> fn,Cacheable<R> cache){  val memoise2=memoizeFunction(null,cache);  return null;}  }
class C{  public boolean isSubscriptionLimitReached(){  return subscriptionLimitReached;}  }
class C{  public static boolean isParityAdjusted(byte[] key,int offset) throws InvalidKeyException {  if (key == null) {    throw new InvalidKeyException("key == null");  }  if (key.length - offset < DES_KEY_LEN) {    throw new InvalidKeyException("key too short");  }  int byteKey=0;  for (int i=offset; i < DES_KEY_LEN; i++) {    byteKey=key[i];    byteKey^=byteKey >> 1;    byteKey^=byteKey >> 2;    byteKey^=byteKey >> 4;    if ((byteKey & 1) == 0) {      return false;    }  }  return true;}  }
class C{  public Element(String tagName,boolean isTextElement){  this(tagName);  textElement=isTextElement;}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildHouseArea(zone);}  }
class C{  private void findTypes(String prefix,ISearchRequestor storage,int type){  SearchableEnvironmentRequestor requestor=new SearchableEnvironmentRequestor(storage,this.unitToSkip,this.project,this.nameLookup);  int index=prefix.lastIndexOf('.');  if (index == -1) {    this.nameLookup.seekTypes(prefix,null,true,type,requestor);  } else {    String packageName=prefix.substring(0,index);    JavaElementRequestor elementRequestor=new JavaElementRequestor();    this.nameLookup.seekPackageFragments(packageName,false,elementRequestor);    IPackageFragment[] fragments=elementRequestor.getPackageFragments();    if (fragments != null) {      String className=prefix.substring(index + 1);      for (int i=0, length=fragments.length; i < length; i++)       if (fragments[i] != null)       this.nameLookup.seekTypes(className,fragments[i],true,type,requestor);    }  }}  }
class C{  private boolean conditionCH1(String value,int index){  return ((contains(value,0,4,"VAN ","VON ") || contains(value,0,3,"SCH")) || contains(value,index - 2,6,"ORCHES","ARCHIT","ORCHID") || contains(value,index + 2,1,"T","S")|| ((contains(value,index - 1,1,"A","O","U","E") || index == 0) && (contains(value,index + 2,1,L_R_N_M_B_H_F_V_W_SPACE) || index + 1 == value.length() - 1)));}  }
class C{  public void deleteTag(int tagId,int ifdId){  mData.removeTag(getTrueTagKey(tagId),ifdId);}  }
class C{  public void handleEvent(EventObject sipEvent,SIPTransaction transaction){  if (sipStack.isLoggingEnabled()) {    sipStack.getStackLogger().logDebug("handleEvent " + sipEvent + "currentTransaction = "+ transaction+ "this.sipListener = "+ this.getSipListener()+ "sipEvent.source = "+ sipEvent.getSource());    if (sipEvent instanceof RequestEvent) {      Dialog dialog=((RequestEvent)sipEvent).getDialog();      if (sipStack.isLoggingEnabled())       sipStack.getStackLogger().logDebug("Dialog = " + dialog);    } else     if (sipEvent instanceof ResponseEvent) {      Dialog dialog=((ResponseEvent)sipEvent).getDialog();      if (sipStack.isLoggingEnabled())       sipStack.getStackLogger().logDebug("Dialog = " + dialog);    }    sipStack.getStackLogger().logStackTrace();  }  EventWrapper eventWrapper=new EventWrapper(sipEvent,transaction);  if (!sipStack.reEntrantListener) {    this.eventScanner.addEvent(eventWrapper);  } else {    this.eventScanner.deliverEvent(eventWrapper);  }}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder("PlotEntity: ");  sb.append("tooltip = ");  sb.append(getToolTipText());  return sb.toString();}  }
class C{  public void sendUserMessage(Collection<? extends ClusterNode> nodes,Object msg) throws IgniteCheckedException {  sendUserMessage(nodes,msg,null,false,0);}  }
class C{  @RequestMapping(value="/activate",method=RequestMethod.GET,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<String> activateAccount(@RequestParam(value="key") String key){  return Optional.ofNullable(userService.activateRegistration(key)).map(null).orElse(new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR));}  }
class C{  public static UnsignedByte parseUnsignedByte(String s){  return valueOf(Integer.parseInt(s));}  }
class C{  public static void printTree(UIComponent root,PrintStream out){  PrintWriter writer;  try {    writer=new PrintWriter(new PrintStream(out,true,RIConstants.CHAR_ENCODING));    printTree(root,writer);    writer.flush();  } catch (  UnsupportedEncodingException ex) {    System.out.println(ex.getMessage());  }}  }
class C{  private static void checkNotStrictISO(Collection<DateTimeFieldType> fields,boolean strictISO){  if (strictISO) {    throw new IllegalArgumentException("No valid ISO8601 format for fields: " + fields);  }}  }
class C{  public void addTickMarkSection(final Section SECTION){  if (null == SECTION)   return;  tickMarkSections.add(SECTION);  Collections.sort(tickMarkSections,new SectionComparator());  fireUpdateEvent(REDRAW_EVENT);}  }
class C{  private void updateView(){  final RunnersDescriptor runners=dataObject.getProject().getRunners();  if (runners != null) {    final String defaultRunner=runners.getDefault();    view.selectRunnerEnvironment(defaultRunner);  }}  }
class C{  protected void loadFile(String filename,AbstractFileLoader... loaders){  AbstractFileLoader loader;  Instances data;  if (loaders == null || loaders.length == 0) {    loader=ConverterUtils.getLoaderForFile(filename);  } else {    loader=loaders[0];  }  if (loader != null) {    try {      loader.setFile(new File(filename));      data=loader.getDataSet();      MLUtils.fixRelationName(data);      MLUtils.prepareData(data);      setInstances(data);    } catch (    Exception e) {      ComponentHelper.showMessageBox(null,"Error loading file...",e.toString(),JOptionPane.OK_CANCEL_OPTION,JOptionPane.ERROR_MESSAGE);      System.out.println(e);      setInstances(null);    }  }}  }
class C{  public synchronized void step(){  currentIteration++;  while (true) {    try {      for (      V v1 : getGraph().getVertices()) {        calcRepulsion(v1);      }      break;    } catch (    ConcurrentModificationException cme) {    }  }  while (true) {    try {      for (      E e : getGraph().getEdges()) {        calcAttraction(e);      }      break;    } catch (    ConcurrentModificationException cme) {    }  }  while (true) {    try {      for (      V v : getGraph().getVertices()) {        if (isLocked(v))         continue;        calcPositions(v);      }      break;    } catch (    ConcurrentModificationException cme) {    }  }  cool();}  }
class C{  public static String readAndCloseQuietly(InputStream inputStream) throws IOException {  try {    return readStream(inputStream);  } catch (  IOException e) {    LOG.error(e.getLocalizedMessage(),e);    throw e;  } finally {    if (inputStream != null) {      try {        inputStream.close();      } catch (      IOException e) {        LOG.error(e.getLocalizedMessage(),e);      }    }  }}  }
class C{  @Override public boolean input(Instance instance){  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (m_NewBatch) {    resetQueue();    m_NewBatch=false;  }  if (m_Converter != null) {    Instance datum=(Instance)instance.copy();    if (!datum.isMissing(m_ClassAttribute)) {      datum.setClassValue(m_Converter[(int)datum.classValue()]);    }    push(datum);    return true;  }  if (!instance.isMissing(m_ClassAttribute)) {    m_ClassCounts[(int)instance.classValue()]+=instance.weight();  }  bufferInput(instance);  return false;}  }
class C{  private void attemptModifyShowTitle(){  this.showTitle=this.showTitleCheckBox.isSelected();  this.enableOrDisableControls();}  }
class C{  public void writeMatrixFiles(String foldername,String studyArea){  String withinFilename=foldername + studyArea + "_WithinChainMatrix.txt";  writeMatrixFile(withinFilename,withinMatrix);  String throughFilename=foldername + studyArea + "_ThroughChainMatrix.txt";  writeMatrixFile(throughFilename,throughMatrix);}  }
class C{  public ProgressIndicator(@Nullable String message,@Nullable String note){  this(message,note,0,100,true);}  }
class C{  private void ib6(int a,int b,int c,int d){  int t1=~a;  int t2=a ^ b;  int t3=c ^ t2;  int t4=c | t1;  int t5=d ^ t4;  X1=t3 ^ t5;  int t7=t3 & t5;  int t8=t2 ^ t7;  int t9=b | t8;  X3=t5 ^ t9;  int t11=b | X3;  X0=t8 ^ t11;  X2=(d & t1) ^ (t3 ^ t11);}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String[] imageFiles=null;  String outputHeader=null;  WhiteboxRasterInfo[] images=null;  WhiteboxRaster ouptut=null;  int nCols=0;  int nRows=0;  double z;  int numClasses;  int numImages;  int progress=0;  int col, row;  int a, i, j;  double[][] data;  double noData=-32768;  double[][] classCentres;  double[][] imageMetaData;  long[] numPixelsInEachClass;  int maxIterations=100;  double dist, minDist;  int whichClass;  double minAdjustment=10;  byte initializationMode=0;  long numCellsChanged=0;  long totalNumCells=0;  boolean totalNumCellsCounted=false;  double percentChanged=0;  double percentChangedThreshold=1.0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  outputHeader=args[1];  numClasses=Integer.parseInt(args[2]);  maxIterations=Integer.parseInt(args[3]);  percentChangedThreshold=Double.parseDouble(args[4]);  if (args[5].toLowerCase().contains("random")) {    initializationMode=1;  } else {    initializationMode=0;  }  try {    imageFiles=inputFilesString.split(";");    numImages=imageFiles.length;    images=new WhiteboxRasterInfo[numImages];    imageMetaData=new double[numImages][3];    for (i=0; i < numImages; i++) {      images[i]=new WhiteboxRasterInfo(imageFiles[i]);      if (i == 0) {        nCols=images[i].getNumberColumns();        nRows=images[i].getNumberRows();        noData=images[i].getNoDataValue();      } else {        if (images[i].getNumberColumns() != nCols || images[i].getNumberRows() != nRows) {          showFeedback("All input images must have the same dimensions (rows and columns).");          return;        }      }      imageMetaData[i][0]=images[i].getNoDataValue();      imageMetaData[i][1]=images[i].getMinimumValue();      imageMetaData[i][2]=images[i].getMaximumValue();    }    data=new double[numImages][];    numPixelsInEachClass=new long[numImages];    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",imageFiles[0],WhiteboxRaster.DataType.INTEGER,0);    output.setDataScale(DataScale.CATEGORICAL);    output.setPreferredPalette("qual.pal");    if (initializationMode == 1) {      Random generator=new Random();      double range;      classCentres=new double[numClasses][numImages];      for (a=0; a < numClasses; a++) {        for (i=0; i < numImages; i++) {          range=imageMetaData[i][2] - imageMetaData[i][1];          classCentres[a][i]=imageMetaData[i][1] + generator.nextDouble() * range;        }      }    } else {      double range, spacing;      classCentres=new double[numClasses][numImages];      for (a=0; a < numClasses; a++) {        for (i=0; i < numImages; i++) {          range=imageMetaData[i][2] - imageMetaData[i][1];          spacing=range / numClasses;          classCentres[a][i]=imageMetaData[i][1] + spacing * a;        }      }    }    j=0;    whichClass=0;    do {      j++;      updateProgress("Loop " + j,1);      double[][] classCentreData=new double[numClasses][numImages];      numPixelsInEachClass=new long[numClasses];      numCellsChanged=0;      for (row=0; row < nRows; row++) {        for (i=0; i < numImages; i++) {          data[i]=images[i].getRowValues(row);        }        for (col=0; col < nCols; col++) {          if (data[0][col] != noData) {            if (!totalNumCellsCounted) {              totalNumCells++;            }            minDist=Double.POSITIVE_INFINITY;            for (a=0; a < numClasses; a++) {              dist=0;              for (i=0; i < numImages; i++) {                dist+=(data[i][col] - classCentres[a][i]) * (data[i][col] - classCentres[a][i]);              }              if (dist < minDist) {                minDist=dist;                whichClass=a;              }            }            z=output.getValue(row,col);            if ((int)z != whichClass) {              numCellsChanged++;            }            output.setValue(row,col,whichClass);            numPixelsInEachClass[whichClass]++;            for (i=0; i < numImages; i++) {              classCentreData[whichClass][i]+=data[i][col];            }          } else {            output.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (nRows - 1));        updateProgress("Loop " + j,progress);      }      totalNumCellsCounted=true;      for (a=0; a < numClasses; a++) {        if (numPixelsInEachClass[a] > 0) {          double[] newClassCentre=new double[numImages];          for (i=0; i < numImages; i++) {            newClassCentre[i]=classCentreData[a][i] / numPixelsInEachClass[a];          }          for (i=0; i < numImages; i++) {            classCentres[a][i]=newClassCentre[i];          }        }      }      percentChanged=(double)numCellsChanged / totalNumCells * 100;    } while ((percentChanged > percentChangedThreshold) && (j < maxIterations));    double[] totalDeviations=new double[numClasses];    for (row=0; row < nRows; row++) {      for (i=0; i < numImages; i++) {        data[i]=images[i].getRowValues(row);      }      for (col=0; col < nCols; col++) {        if (data[0][col] != noData) {          whichClass=(int)(output.getValue(row,col));          dist=0;          for (i=0; i < numImages; i++) {            dist+=(data[i][col] - classCentres[whichClass][i]) * (data[i][col] - classCentres[whichClass][i]);          }          totalDeviations[whichClass]+=dist;        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (nRows - 1));      updateProgress("Loop " + j,progress);    }    double[] standardDeviations=new double[numClasses];    for (a=0; a < numClasses; a++) {      standardDeviations[a]=Math.sqrt(totalDeviations[a] / (numPixelsInEachClass[a] - 1));    }    DecimalFormat df;    df=new DecimalFormat("0.00");    String retStr="k-Means Classification Report\n\n";    retStr+="     \tCentroid Vector\n";    retStr+="     \t";    for (i=0; i < numImages; i++) {      retStr+="Image" + (i + 1) + "\t";    }    retStr+="SD\tPixels\t% Area\n";    for (a=0; a < numClasses; a++) {      String str="";      for (i=0; i < numImages; i++) {        str+=df.format(classCentres[a][i]) + "\t";      }      retStr+="Cluster " + a + "\t"+ str+ df.format(standardDeviations[a])+ "\t"+ numPixelsInEachClass[a]+ "\t"+ df.format((double)numPixelsInEachClass[a] / totalNumCells * 100)+ "\n";    }    retStr+="\n";    for (i=0; i < numImages; i++) {      retStr+="Image" + (i + 1) + " = "+ images[i].getShortHeaderFile()+ "\n";    }    retStr+="\nCluster Centroid Distance Analysis:\n";    for (a=0; a < numClasses; a++) {      retStr+="\tClus. " + a;    }    retStr+="\n";    for (a=0; a < numClasses; a++) {      retStr+="Cluster " + a;      for (int b=0; b < numClasses; b++) {        if (b >= a) {          dist=0;          for (i=0; i < numImages; i++) {            dist+=(classCentres[a][i] - classCentres[b][i]) * (classCentres[a][i] - classCentres[b][i]);          }          retStr+="\t" + df.format(Math.sqrt(dist));        } else {          retStr+="\t";        }      }      retStr+="\n";    }    returnData(retStr);    Dendrogram plot=new Dendrogram(classCentres,numPixelsInEachClass);    returnData(plot);    for (i=0; i < numImages; i++) {      images[i].close();    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public void init(RandomGenerator random){}  }
class C{  public void error(String msg,Object[] args){  String themsg=XSLMessages.createMessage(msg,args);  throw new RuntimeException(XSLMessages.createMessage(XSLTErrorResources.ER_ELEMTEMPLATEELEM_ERR,new Object[]{themsg}));}  }
class C{  public static void createMavenGwtProjectIsCreated1(SWTWorkbenchBot bot,String projectName,String packageName){  String groupId=projectName;  String artifactId=projectName;  String archetypeGroupId="com.github.branflake2267.archetypes";  String archetypeArtifactId="gwt-test-gwt27-archetype";  String archetypeVersion="1.0-SNAPSHOT";  String archetypeUrl="https://oss.sonatype.org/content/repositories/snapshots";  SwtBotProjectActions.createMavenProjectFromArchetype(bot,groupId,artifactId,packageName,archetypeGroupId,archetypeArtifactId,archetypeVersion,archetypeUrl);  SwtBotWorkbenchActions.waitForIdle(bot);}  }
class C{  @Override public String toString(){  if (type != null) {    return type.toString();  } else {    return typeRef.getName().toString();  }}  }
class C{  private static int findOpeningParenMatch(IDocument document,int position,String partitioning){  final char CLOSING_PAREN=')';  final char OPENING_PAREN='(';  Assert.isTrue(position < document.getLength());  Assert.isTrue(position >= 0);  Assert.isTrue(isDefaultPartition(document,position,partitioning));  try {    Assert.isTrue(document.getChar(position) == CLOSING_PAREN);    int depth=1;    while (true) {      position=scanBackward(document,position - 1,partitioning,-1,new char[]{CLOSING_PAREN,OPENING_PAREN});      if (position == -1)       return -1;      if (document.getChar(position) == CLOSING_PAREN)       depth++; else       depth--;      if (depth == 0)       return position;    }  } catch (  BadLocationException e) {    return -1;  }}  }
class C{  public NSObject put(String key,NSObject obj){  if (key == null)   return null;  if (obj == null)   return dict.get(key);  return dict.put(key,obj);}  }
class C{  protected void DrawLabels(int i){  paint.setColor(Color.BLACK);  if (i > 1) {    float colwidth=horizontal_width_list.get(1) - horizontal_width_list.get(0);    canvas.drawText(values.get(i - 1).getLabels(),horizontal_width - (colwidth + 5),height - 38,paint);  } else   if (i != 0 && i == 1) {    canvas.drawText(values.get(i - 1).getLabels(),horizontal_width / 2,height - 38,paint);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize){  return new ScheduledThreadPoolExecutor(corePoolSize);}  }
class C{  public SampleCreature(double e){  super("samplecreature");  energy=e;}  }
class C{  private String buildCapabilities(String timestamp,Capabilities capabilities){  String publicUri=ImsModule.getImsUserProfile().getPublicUri();  return new StringBuilder("<tuple id=\"t1\">").append(SipUtils.CRLF).append("  <status><basic>").append(buildBooleanStatus(capabilities.isFileTransferMsrpSupported())).append("</basic></status>").append(SipUtils.CRLF).append("  <op:service-description>").append(SipUtils.CRLF).append("    <op:service-id>").append(PresenceUtils.FEATURE_RCS2_FT).append("</op:service-id>").append(SipUtils.CRLF).append("    <op:version>1.0</op:version>").append(SipUtils.CRLF).append("  </op:service-description>").append(SipUtils.CRLF).append("  <contact>").append(publicUri).append("</contact>").append(SipUtils.CRLF).append("  <timestamp>").append(timestamp).append("</timestamp>").append(SipUtils.CRLF).append("</tuple>").append(SipUtils.CRLF).append("<tuple id=\"t2\">").append(SipUtils.CRLF).append("  <status><basic>").append(buildBooleanStatus(capabilities.isImageSharingSupported())).append("</basic></status>").append(SipUtils.CRLF).append("  <op:service-description>").append(SipUtils.CRLF).append("    <op:service-id>").append(PresenceUtils.FEATURE_RCS2_IMAGE_SHARE).append("</op:service-id>").append(SipUtils.CRLF).append("    <op:version>1.0</op:version>").append(SipUtils.CRLF).append("  </op:service-description>").append(SipUtils.CRLF).append("  <contact>").append(publicUri).append("</contact>").append(SipUtils.CRLF).append("  <timestamp>").append(timestamp).append("</timestamp>").append(SipUtils.CRLF).append("</tuple>").append(SipUtils.CRLF).append("<tuple id=\"t3\">").append(SipUtils.CRLF).append("  <status><basic>").append(buildBooleanStatus(capabilities.isVideoSharingSupported())).append("</basic></status>").append(SipUtils.CRLF).append("  <op:service-description>").append(SipUtils.CRLF).append("    <op:service-id>").append(PresenceUtils.FEATURE_RCS2_VIDEO_SHARE).append("</op:service-id>").append(SipUtils.CRLF).append("    <op:version>1.0</op:version>").append(SipUtils.CRLF).append("  </op:service-description>").append(SipUtils.CRLF).append("  <contact>").append(publicUri).append("</contact>").append(SipUtils.CRLF).append("  <timestamp>").append(timestamp).append("</timestamp>").append(SipUtils.CRLF).append("</tuple>").append(SipUtils.CRLF).append("<tuple id=\"t4\">").append(SipUtils.CRLF).append("  <status><basic>").append(buildBooleanStatus(capabilities.isImSessionSupported())).append("</basic></status>").append(SipUtils.CRLF).append("  <op:service-description>").append(SipUtils.CRLF).append("    <op:service-id>").append(PresenceUtils.FEATURE_RCS2_CHAT).append("</op:service-id>").append(SipUtils.CRLF).append("    <op:version>1.0</op:version>").append(SipUtils.CRLF).append("  </op:service-description>").append(SipUtils.CRLF).append("  <contact>").append(publicUri).append("</contact>").append(SipUtils.CRLF).append("  <timestamp>").append(timestamp).append("</timestamp>").append(SipUtils.CRLF).append("</tuple>").append(SipUtils.CRLF).append("<tuple id=\"t5\">").append(SipUtils.CRLF).append("  <status><basic>").append(buildBooleanStatus(capabilities.isCsVideoSupported())).append("</basic></status>").append(SipUtils.CRLF).append("  <op:service-description>").append(SipUtils.CRLF).append("    <op:service-id>").append(PresenceUtils.FEATURE_RCS2_CS_VIDEO).append("</op:service-id>").append(SipUtils.CRLF).append("    <op:version>1.0</op:version>").append(SipUtils.CRLF).append("  </op:service-description>").append(SipUtils.CRLF).append("  <contact>").append(publicUri).append("</contact>").append(SipUtils.CRLF).append("  <timestamp>").append(timestamp).append("</timestamp>").append(SipUtils.CRLF).append("</tuple>").append(SipUtils.CRLF).toString();}  }
class C{  private double scoringFn2(int node,int instancePtr){  int hits=0;  double scoreNI=0;  for (int i=0; i <= (nodeDimension[node] - 1); i++) {    int count=counts[instancePtr + i];    hits+=count;    scoreNI+=logfact[count];  }  scoreNI+=logfact[nodeDimension[node] - 1] - logfact[hits + nodeDimension[node] - 1];  return scoreNI;}  }
class C{  public Frame(int locals,int stack){  this.locals=new Type[locals];  this.stack=new Type[stack];}  }
class C{  public Object validateValue() throws Throwable {  if (tag == ERROR) {    rethrowError();  }  if (value == NO_VALUE) {    return null;  }  if (elementType == value.getClass() || elementType.isInstance(value)) {    return copyValue();  } else {    throw new AnnotationTypeMismatchException(definingMethod,value.getClass().getName());  }}  }
class C{  private void createHyponymCountMap() throws WikiApiException {  if (hyponymCountMap != null) {    return;  }  File hyponymCountMapSerializedFile=new File(wiki.getWikipediaId() + "_" + hyponymCountMapFilename);  hyponymCountMap=new HashMap<Integer,Integer>();  if (hyponymCountMapSerializedFile.exists()) {    logger.info("Loading saved hyponymyCountMap ...");    hyponymCountMap=this.deserializeMap(hyponymCountMapSerializedFile);    logger.info("Done loading saved hyponymyCountMap");    return;  }  List<Integer> queue=new ArrayList<Integer>();  Set<Integer> visited=new HashSet<Integer>();  Set<Integer> leafNodes=this.__getLeafNodes();  queue.addAll(leafNodes);  logger.info(leafNodes.size() + " leaf nodes.");  while (!queue.isEmpty()) {    int currNode=queue.get(0);    queue.remove(0);    if (visited.contains(currNode)) {      continue;    }    Set<Integer> children=__getChildren(currNode);    int validChildren=0;    int sumChildHyponyms=0;    boolean invalid=false;    for (    int child : children) {      if (graph.containsVertex(child)) {        if (hyponymCountMap.containsKey(child)) {          sumChildHyponyms+=hyponymCountMap.get(child);          validChildren++;        } else {          invalid=true;        }      }    }    if (invalid) {      queue.add(currNode);      continue;    }    visited.add(currNode);    int currNodeHyponomyCount=validChildren + sumChildHyponyms;    hyponymCountMap.put(currNode,currNodeHyponomyCount);    for (    int parent : __getParents(currNode)) {      if (graph.containsVertex(parent)) {        queue.add(parent);      }    }  }  logger.info(visited.size() + " nodes visited");  if (visited.size() != graph.vertexSet().size()) {    throw new WikiApiException("Visited only " + visited.size() + " out of "+ graph.vertexSet().size()+ " nodes.");  }  if (hyponymCountMap.size() != graph.vertexSet().size()) {    throw new WikiApiException("HyponymCountMap does not contain an entry for each node in the graph." + hyponymCountMap.size() + "/"+ graph.vertexSet().size());  }  scaleHyponymCountMap();  logger.info("Computed hyponymCountMap");  serializeMap(hyponymCountMap,hyponymCountMapSerializedFile);  logger.info("Serialized hyponymCountMap");}  }
class C{  void expireTheEventOrThreadIdentifier(EntryEvent event) throws CacheException {  final boolean isDebugEnabled=logger.isDebugEnabled();  if (isDebugEnabled) {    logger.debug("HARegionQueue::afterInvalidate. Entry Event being invalidated:{}, isPrimaryQueue:{}",event,HARegionQueue.this.isPrimary());  }  Object key=event.getKey();  if (key instanceof ThreadIdentifier) {    DispatchedAndCurrentEvents dace=(DispatchedAndCurrentEvents)HARegionQueue.this.eventsMap.get(key);    Assert.assertTrue(dace != null);    Long expirySequenceID=(Long)event.getOldValue();    boolean expired=dace.expireOrUpdate(expirySequenceID.longValue(),(ThreadIdentifier)key);    if (isDebugEnabled) {      logger.debug("HARegionQueue::afterInvalidate:Size of the region after expiring or updating the ThreadIdentifier={}",HARegionQueue.this.region.keys().size());      logger.debug("HARegionQueue::afterInvalidate:ThreadIdentifier expired={}",expired);    }  } else   if (key instanceof Long) {    destroyFromQueue(key);    Conflatable cf=(Conflatable)event.getOldValue();    EventID id=cf.getEventId();    byte[] memID=id.getMembershipID();    long threadId=id.getThreadID();    DispatchedAndCurrentEvents dace=(DispatchedAndCurrentEvents)eventsMap.get(new ThreadIdentifier(memID,threadId));    if (shouldBeConflated(cf)) {      dace.destroy((Long)key,cf.getKeyToConflate(),cf.getRegionToConflate());    } else {      dace.destroy((Long)key);    }  } else {  }}  }
class C{  public SecP224K1Point(ECCurve curve,ECFieldElement x,ECFieldElement y){  this(curve,x,y,false);}  }
class C{  private void assertUlogDir(String... collections){  for (  String collection : collections) {    Collection<Slice> slices=cloudClient.getZkStateReader().getClusterState().getCollection(collection).getSlices();    for (    Slice slice : slices) {      for (      Replica replica : slice.getReplicas()) {        Map<String,Object> properties=replica.getProperties();        String coreName=replica.getCoreName();        String curUlogDir=(String)properties.get(CoreDescriptor.CORE_ULOGDIR);        String prevUlogDir=collectionUlogDirMap.get(coreName);        if (curUlogDir != null) {          if (prevUlogDir == null) {            collectionUlogDirMap.put(coreName,curUlogDir);          } else {            assertEquals(prevUlogDir,curUlogDir);          }        }      }    }  }}  }
class C{  public static int readSingleByte(InputStream in) throws IOException {  byte[] buffer=new byte[1];  int result=in.read(buffer,0,1);  return (result != -1) ? buffer[0] & 0xff : -1;}  }
class C{  private void startDraining(boolean overflow){  byteBuffer.flip();  if (overflow && byteBuffer.remaining() == 0) {    byteBuffer=ByteBuffer.allocate(byteBuffer.capacity() * 2);  } else {    draining=true;  }}  }
class C{  public YearMonth withYear(int year){  int[] newValues=getValues();  newValues=getChronology().year().set(this,YEAR,newValues,year);  return new YearMonth(this,newValues);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:20.951 -0500",hash_original_method="AF3AE9DC0CDAD307E486533822C2C506",hash_generated_method="3C49423376453313A9A85C8A313C60F2") public static void snapToCycleDay(Time time,int cycleDay){  if (cycleDay > time.getActualMaximum(MONTH_DAY)) {    time.month+=1;    time.monthDay=1;    time.second=-1;  } else {    time.monthDay=cycleDay;  }  time.normalize(true);}  }
class C{  public static void agentmain(String agentArgs,Instrumentation inst) throws Exception {synchronized (JVMAgent.class) {    if (instance == null) {      instance=new JVMAgent(inst);      waitForInstance.countDown();    }  }}  }
class C{  public String replace(String text){  String value=System.getProperty(text);  if (value != null) {    return value;  }  if (filter != null) {    return filter.replace(text);  }  return null;}  }
class C{  @Override public void reset() throws IOException {  line=lineMark;  column=columnMark;  super.reset();}  }
class C{  public BaseDateTime(int year,int monthOfYear,int dayOfMonth,int hourOfDay,int minuteOfHour,int secondOfMinute,int millisOfSecond,Chronology chronology){  super();  iChronology=checkChronology(chronology);  long instant=iChronology.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);  iMillis=checkInstant(instant,iChronology);}  }
class C{  public int iterate() throws Exception {  if (page == null) {    return Watchable.COMPLETED;  }  if (imageRef != null) {    final BiCa bica=imageRef.get();    if (bica == null) {      System.out.println("Image went away.  Stopping");      return Watchable.STOPPED;    }    g=bica.createCa();  }  if (currentCommand >= page.getCommandCount()) {    if (page.isFinished()) {      return Watchable.COMPLETED;    } else {      return Watchable.NEEDS_DATA;    }  }  final PDFCmd cmd=page.getCommand(currentCommand++);  if (cmd == null) {    throw new PDFParseException("Command not found!");  }  if (!PDFParser.RELEASE) {    cmdCnt+=1;    Log.i(TAG,"CMD[" + cmdCnt + "]: "+ cmd.toString()+ ": "+ cmd.getDetails());  }  RectF dirtyRegion=null;  try {    dirtyRegion=cmd.execute(this);  } catch (  Exception e) {    Log.e(TAG,e.getMessage(),e);  }  globalDirtyRegion=addDirtyRegion(dirtyRegion,globalDirtyRegion);  unupdatedRegion=addDirtyRegion(dirtyRegion,unupdatedRegion);  final long now=System.currentTimeMillis();  if (now > then || rendererFinished()) {    unupdatedRegion=null;    then=now + UPDATE_DURATION;  }  if (imageRef != null) {    g=null;  }  return Watchable.RUNNING;}  }
class C{  public static void checkParamsOfAction(Method method,int position,List<Symbol> rhsSymbols,SymbolValueClasses symbolValueClasses) throws Exception {  Type[] parameters=method.getGenericParameterTypes();  int curPosition=0;  It<Symbol> rhs=new It<Symbol>(rhsSymbols);  for (int i=0; i < parameters.length; i++) {    Type paramType=parameters[i];    while (true) {      if (!rhs.hasNext()) {        throw new IllegalSpecException("Parameters do not match for an action for the RHS: " + rhsSymbols.toString());      }      Symbol rhsSymbol=rhs.next();      curPosition++;      if (curPosition > position) {        throw new IllegalSpecException("The action occurs too early or it's method requires too much parameters: " + rhsSymbols.toString());      }      Class<SymbolValue<Object>> symbolClass=symbolValueClasses.get(rhsSymbol);      if (symbolClass != null) {        Type expectedType=((ParameterizedType)symbolClass.getGenericSuperclass()).getActualTypeArguments()[0];        if (expectedType instanceof ParameterizedType)         expectedType=((ParameterizedType)expectedType).getRawType();        if (paramType instanceof ParameterizedType)         paramType=((ParameterizedType)paramType).getRawType();        Class<?> resolvedClass=resolvePrimitiveTypes(((Class<?>)paramType));        if (resolvedClass.isAssignableFrom((Class<?>)expectedType))         break; else {          throw new IllegalSpecException("Parameters do not match for an action for the RHS: " + rhsSymbols.toString() + "(expected "+ expectedType+ ", found "+ paramType+ ")");        }      }      if (rhsSymbol instanceof AuxiliaryLHS4SemanticShiftAction) {        AuxiliaryLHS4SemanticShiftAction auxNT=(AuxiliaryLHS4SemanticShiftAction)rhsSymbol;        if (auxNT.symbolValueType == Void.TYPE)         continue;        if (((Class<?>)paramType).isAssignableFrom(auxNT.symbolValueType))         break; else         throw new IllegalSpecException("Parameters do not match for an action for the RHS: " + rhsSymbols.toString() + "(expected "+ auxNT.symbolValueType+ ", found "+ paramType+ ")");      }      if (SpecialTerminals.Error.equals(rhsSymbol)) {        if (paramType.equals(ErrorInformation.class))         break; else         throw new IllegalSpecException("Parameters do not match for an action for the RHS: " + rhsSymbols.toString() + "(expected ErrorInformation, found "+ paramType+ ")");      }    }  }  if (curPosition < position) {    while (curPosition < position) {      if (!rhs.hasNext())       throw new IllegalSpecException("Parameters do not match for an action for the RHS: " + rhsSymbols.toString());      Symbol rhsSymbol=rhs.next();      curPosition++;      Class<SymbolValue<Object>> symbolClass=symbolValueClasses.get(rhsSymbol);      if (symbolClass != null || (rhsSymbol instanceof AuxiliaryLHS4SemanticShiftAction && ((AuxiliaryLHS4SemanticShiftAction)rhsSymbol).symbolValueType != Void.TYPE) || SpecialTerminals.Error.equals(rhsSymbol))       throw new IllegalSpecException("The action occurs too late or it's method requires too less parameters: " + rhsSymbols.toString());    }  }}  }
class C{  public void testResourcesAvailable(){  new ItalianAnalyzer().close();}  }
class C{  public void bind(Object object){  Class<?> objectClass=object.getClass();  while (objectClass != null && objectClass != Object.class) {    BinderCache cache=classBinderCacheMap.get(objectClass);    if (cache == null) {      cache=createCache(objectClass);      classBinderCacheMap.put(objectClass,cache);    }    bind(object,cache);    objectClass=objectClass.getSuperclass();  }}  }
class C{  public void testOnQuerySubmitted_filtersBySearchTerm(){  mController.onQuerySubmitted("foo");  verify(mMockAppModel).fetchPatients(mFakeCrudEventBus,PatientDbFilters.getDefaultFilter(),"foo");}  }
class C{  protected void init(Table table,Graph graph,int row){  m_table=table;  m_graph=graph;  m_row=m_table.isValidRow(row) ? row : -1;}  }
class C{  @Override public int numValues(){  return m_AttValues.length;}  }
class C{  public BreadcrumbItem(final Breadcrumb parent){  this(parent,SWT.NONE);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public ConcurrentSet(){  this.map=new ConcurrentHashMap<>(10);}  }
class C{  public void testSyncSuccess_StopsRefresh(){  mController.init();  SyncFinishedEvent event=new SyncSucceededEvent();  mFakeEventBus.post(event);  verify(mMockUi).stopRefreshAnimation();}  }
class C{  protected void detailsButtonListener(){  int index=tableViewer.getTable().getSelectionIndex();  ApplicationInsightsResource resource=ApplicationInsightsResourceRegistry.getAppInsightsResrcList().get(index);  ApplicationInsightsDetailsDialog dialog=new ApplicationInsightsDetailsDialog(getShell(),resource);  dialog.open();}  }
class C{  public Permuter(int n){  if (n < 0) {    throw new IllegalArgumentException();  }  modulus=n;  if (n == 1) {    return;  }  multiplier=(int)Math.sqrt(n);  while (gcd(multiplier,n) != 1) {    if (++multiplier == n) {      multiplier=1;    }  }}  }
class C{  @Override public TopicPublisher createPublisher(final Topic topic) throws JMSException {  lock();  try {    TopicSession session=getTopicSessionInternal();    if (ActiveMQRASession.trace) {      ActiveMQRALogger.LOGGER.trace("createPublisher " + session + " topic="+ topic);    }    TopicPublisher result=session.createPublisher(topic);    result=new ActiveMQRATopicPublisher(result,this);    if (ActiveMQRASession.trace) {      ActiveMQRALogger.LOGGER.trace("createdPublisher " + session + " publisher="+ result);    }    addProducer(result);    return result;  }  finally {    unlock();  }}  }
class C{  public ColladaEffect(String ns){  super(ns);}  }
class C{  @Override public List<Node> generate(int popSize){  List<Node> population=new ArrayList<>();  for (int i=0; i < popSize; ) {    Node candidate=full(1);    if (candidate.isValid()) {      population.add(candidate);      i++;    }  }  return population;}  }
class C{  public static String convertU8ToHexString(char u8){  return Integer.toHexString(u8);}  }
class C{  public boolean isEmpty(){  return head == null && tail == null;}  }
class C{  public static void prependThreadId(){  getLog().setThreadIdFlag();}  }
class C{  @SuppressWarnings("all") protected boolean writeArrayType(Output out,Object arrType){  if (arrType instanceof Collection) {    out.writeArray((Collection<Object>)arrType,this);  } else   if (arrType instanceof Iterator) {    writeIterator(out,(Iterator<Object>)arrType);  } else   if (arrType.getClass().isArray() && arrType.getClass().getComponentType().isPrimitive()) {    out.writeArray(arrType,this);  } else   if (arrType instanceof Object[]) {    out.writeArray((Object[])arrType,this);  } else {    return false;  }  return true;}  }
class C{  public Vector3f divideLocal(float scalar){  scalar=1f / scalar;  x*=scalar;  y*=scalar;  z*=scalar;  return this;}  }
class C{  protected static final int selectColorFormat(final MediaCodecInfo codecInfo,final String mimeType){  if (DEBUG)   Log.i(TAG,"selectColorFormat: ");  int result=0;  final MediaCodecInfo.CodecCapabilities caps;  try {    Thread.currentThread().setPriority(Thread.MAX_PRIORITY);    caps=codecInfo.getCapabilitiesForType(mimeType);  }  finally {    Thread.currentThread().setPriority(Thread.NORM_PRIORITY);  }  int colorFormat;  for (int i=0; i < caps.colorFormats.length; i++) {    colorFormat=caps.colorFormats[i];    if (isRecognizedViewoFormat(colorFormat)) {      if (result == 0)       result=colorFormat;      break;    }  }  if (result == 0)   Log.e(TAG,"couldn't find a good color format for " + codecInfo.getName() + " / "+ mimeType);  return result;}  }
class C{  @Secured public void addPay_Full(User user,PaymentBase payData,Date nowPreset) throws Exception {  checkAccessFor_ADMIN();  Date now=nowPreset == null ? new Date() : nowPreset;  long userId=user.id;  cache.removeCacheAsync(getPayReqCacheKey(userId));  cache.removeCacheAsync(getConfirmPayCacheKey(userId));  PaymentExt payment=new PaymentExt(payData);  payment.id=universal.nextSeqFor(payments);  payment.userId=userId;  payment.payType=PaymentType.REPLENISHMENT;  payment.updated=now;  BigDecimal minActiveBalance=props.getBigDecimalVal(billing_minActiveBalance);  BigDecimal[] updatedBalance={null};  boolean[] unblocked={false};  doInSingleTxMode(null);  if (updatedBalance[0] != null) {    cache.tryPutCache(getBalanceCacheKey(userId),updatedBalance[0].toString());  }  if (unblocked[0]) {    sendAccsBlocked(props,db,cache,userId,false);  }  sendPaymentConfimedEmailAsync(user.email);  log.info("pay finished: userId=" + userId + ", login="+ user.login+ (updatedBalance[0] != null ? ", newBalance=" + updatedBalance[0] : "")+ ", req="+ getReqInfoStr());}  }
class C{  protected void reportMatching(AbstractMethodDeclaration method,TypeDeclaration type,IJavaElement parent,int accuracy,boolean typeInHierarchy,MatchingNodeSet nodeSet) throws CoreException {  IJavaElement enclosingElement=null;  if (accuracy > -1) {    enclosingElement=createHandle(method,parent);    if (enclosingElement != null) {      Scanner scanner=this.parser.scanner;      int nameSourceStart=method.sourceStart;      scanner.setSource(this.currentPossibleMatch.getContents());      scanner.resetTo(nameSourceStart,method.sourceEnd);      try {        scanner.getNextToken();      } catch (      InvalidInputException e) {      }      if (encloses(enclosingElement)) {        SearchMatch match=null;        if (method.isDefaultConstructor()) {          int offset=type.sourceStart;          match=this.patternLocator.newDeclarationMatch(type,parent,type.binding,accuracy,type.sourceEnd - offset + 1,this);        } else {          int length=scanner.currentPosition - nameSourceStart;          match=this.patternLocator.newDeclarationMatch(method,enclosingElement,method.binding,accuracy,length,this);        }        if (match != null) {          report(match);        }      }    }  }  if ((method.bits & ASTNode.HasLocalType) != 0) {    if (enclosingElement == null) {      enclosingElement=createHandle(method,parent);    }    ASTNode[] nodes=typeInHierarchy ? nodeSet.matchingNodes(method.declarationSourceStart,method.declarationSourceEnd) : null;    boolean report=(this.matchContainer & PatternLocator.METHOD_CONTAINER) != 0 && encloses(enclosingElement);    MemberDeclarationVisitor declarationVisitor=new MemberDeclarationVisitor(enclosingElement,report ? nodes : null,nodeSet,this,typeInHierarchy);    try {      method.traverse(declarationVisitor,(ClassScope)null);    } catch (    WrappedCoreException e) {      throw e.coreException;    }    if (nodes != null) {      int length=nodes.length;      for (int i=0; i < length; i++) {        Integer level=(Integer)nodeSet.matchingNodes.removeKey(nodes[i]);        if (report && level != null) {          this.patternLocator.matchReportReference(nodes[i],enclosingElement,declarationVisitor.getLocalElement(i),declarationVisitor.getOtherElements(i),method.binding,level.intValue(),this);        }      }    }  }  TypeParameter[] typeParameters=method.typeParameters();  if (typeParameters != null) {    if (enclosingElement == null) {      enclosingElement=createHandle(method,parent);    }    if (enclosingElement != null) {      reportMatching(typeParameters,enclosingElement,parent,method.binding,nodeSet);    }  }  if (method.annotations != null) {    if (enclosingElement == null) {      enclosingElement=createHandle(method,parent);    }    if (enclosingElement != null) {      reportMatching(method.annotations,enclosingElement,null,method.binding,nodeSet,true,true);    }  }  if (typeInHierarchy) {    ASTNode[] nodes=nodeSet.matchingNodes(method.declarationSourceStart,method.declarationSourceEnd);    if (nodes != null) {      if ((this.matchContainer & PatternLocator.METHOD_CONTAINER) != 0) {        if (enclosingElement == null) {          enclosingElement=createHandle(method,parent);        }        if (encloses(enclosingElement)) {          if (this.pattern.mustResolve) {            MemberDeclarationVisitor declarationVisitor=new MemberDeclarationVisitor(enclosingElement,nodes,nodeSet,this,typeInHierarchy);            method.traverse(declarationVisitor,(ClassScope)null);            int length=nodes.length;            for (int i=0; i < length; i++) {              Integer level=(Integer)nodeSet.matchingNodes.removeKey(nodes[i]);              if (level != null) {                this.patternLocator.matchReportReference(nodes[i],enclosingElement,declarationVisitor.getLocalElement(i),declarationVisitor.getOtherElements(i),method.binding,level.intValue(),this);              }            }          } else {            for (int i=0, l=nodes.length; i < l; i++) {              ASTNode node=nodes[i];              Integer level=(Integer)nodeSet.matchingNodes.removeKey(node);              if (level != null) {                this.patternLocator.matchReportReference(node,enclosingElement,null,null,method.binding,level.intValue(),this);              }            }          }          return;        }      }      for (int i=0, l=nodes.length; i < l; i++) {        nodeSet.matchingNodes.removeKey(nodes[i]);      }    }  }}  }
class C{  public static void markLoaded(){  configState=LOADED;  if (userConfigSupplied) {    if (parms.getBoolean("hs")) {      getRedundantProperties(parmsInternal.cmdLineProps,"(from commandline)");      getRedundantProperties(parmsInternal.fileProps,"(from file)");    }  }  try {    displayHelpIfNeeded();  } catch (  ApplicationPropertyError e) {  }  if (invalid)   exit();}  }
class C{  public Set<UserParticipant> leaveRoom(String participantId) throws RoomException {  log.debug("Request [LEAVE_ROOM] ({})",participantId);  Participant participant=getParticipant(participantId);  Room room=participant.getRoom();  String roomName=room.getName();  if (room.isClosed()) {    log.warn("'{}' is trying to leave from room '{}' but it is closing",participant.getName(),roomName);    throw new RoomException(Code.ROOM_CLOSED_ERROR_CODE,"'" + participant.getName() + "' is trying to leave from room '"+ roomName+ "' but it is closing");  }  room.leave(participantId);  Set<UserParticipant> remainingParticipants=null;  try {    remainingParticipants=getParticipants(roomName);  } catch (  RoomException e) {    log.debug("Possible collision when closing the room '{}' (not found)");    remainingParticipants=Collections.emptySet();  }  if (remainingParticipants.isEmpty()) {    log.debug("No more participants in room '{}', removing it and closing it",roomName);    room.close();    rooms.remove(roomName);    log.warn("Room '{}' removed and closed",roomName);  }  return remainingParticipants;}  }
class C{  public static void test3(){  DataFlavor df1=new DataFlavor("text/plain-test3",null);  DataFlavor df2=new DataFlavor("text/plain-test3; charset=Unicode; class=java.io.Reader",null);  String nat="native3";  List<String> natives=fm.getNativesForFlavor(df2);  fm.addUnencodedNativeForFlavor(df1,nat);  List<String> nativesNew=fm.getNativesForFlavor(df2);  if (!natives.equals(nativesNew)) {    System.err.println("orig=" + natives);    System.err.println("new=" + nativesNew);    throw new RuntimeException("Test failed");  }}  }
class C{  public Socks5(SocketAddress socketAddress){  this(null,socketAddress);}  }
class C{  public void calculateTextPosition(int canvasW,int canvasH,ShowcaseView showcaseView,boolean shouldCentreText){  Rect showcase=showcaseView.hasShowcaseView() ? calculator.getShowcaseRect() : new Rect();  int[] areas=new int[5];  areas[0]=showcase.left * canvasH;  areas[1]=showcase.top * canvasW;  areas[2]=(canvasW - showcase.right) * canvasH;  areas[3]=(canvasH - showcase.bottom) * canvasW;  areas[4]=showcase.top * (canvasH / 2);  int largest=0;  for (int i=1; i < areas.length; i++) {    if (areas[i] > areas[largest])     largest=i;  }switch (largest) {case 0:    mBestTextPosition[0]=2 * padding;  mBestTextPosition[1]=padding + showcase.top;mBestTextPosition[2]=canvasW - 2 * padding;break;case 1:mBestTextPosition[0]=2 * padding;mBestTextPosition[1]=padding + (canvasH / 2);mBestTextPosition[2]=canvasW - 2 * padding;break;case 2:mBestTextPosition[0]=showcase.right + padding;mBestTextPosition[1]=padding;mBestTextPosition[2]=(canvasW - showcase.right) - 2 * padding;break;case 3:mBestTextPosition[0]=padding;mBestTextPosition[1]=showcase.bottom + padding;mBestTextPosition[2]=canvasW - 2 * padding;break;case 4:mBestTextPosition[0]=padding;mBestTextPosition[1]=padding + (canvasH / 2);mBestTextPosition[2]=canvasW - 2 * padding;break;}if (shouldCentreText) {switch (largest) {case 0:case 2:mBestTextPosition[1]+=canvasH / 4;break;case 1:case 3:mBestTextPosition[2]/=2;mBestTextPosition[0]+=canvasW / 4;break;}} else {switch (largest) {case 0:case 2:mBestTextPosition[1]+=actionBarOffset;break;}}hasRecalculated=true;}  }
class C{  public OutputProperties(){  this(org.apache.xml.serializer.Method.XML);}  }
class C{  public byte readByte() throws IOException {  require(1);  return buffer[position++];}  }
class C{  public void evicted(final IHardReferenceQueue<T> cache,final T ref){  sharedQueue.add(ref);}  }
class C{  public boolean isSuspenseBalancing(){  if (m_gl == null)   getAcctSchemaGL();  return m_gl.isUseSuspenseBalancing() && m_gl.getSuspenseBalancing_Acct() != 0;}  }
class C{  @HLEFunction(nid=0x08FFF7A0,version=150,checkInsideInterrupt=true) public int sceNetAdhocctlScan(){  checkInitialized();  doScan=true;  networkAdapter.sceNetAdhocctlScan();  return 0;}  }
class C{  @Override public void updateBinaryStream(int columnIndex,InputStream x) throws SQLException {  updateBinaryStream(columnIndex,x,-1);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public long optLong(String key){  return this.optLong(key,0);}  }
class C{  public void sendMessage(MqttMessage msg,String clientId,Integer packetId,boolean flush){  ChannelHandlerContext ctx=getSession(clientId);  if (ctx == null) {    String pid=packetId == null || packetId <= 0 ? "" : String.valueOf(packetId);    logger.debug("Message failed: Message {} {} failed to send to {}: Client not connected to this node",msg.fixedHeader().messageType(),pid,clientId);    return;  }  sendMessage(ctx,msg,clientId,packetId,flush);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private BusinessObjectDataAvailability createBusinessObjectDataAvailability(BusinessObjectDataAvailabilityRequest request){  BusinessObjectDataAvailability businessObjectDataAvailability=new BusinessObjectDataAvailability();  businessObjectDataAvailability.setNamespace(request.getNamespace());  businessObjectDataAvailability.setBusinessObjectDefinitionName(request.getBusinessObjectDefinitionName());  businessObjectDataAvailability.setBusinessObjectFormatUsage(request.getBusinessObjectFormatUsage());  businessObjectDataAvailability.setBusinessObjectFormatFileType(request.getBusinessObjectFormatFileType());  businessObjectDataAvailability.setBusinessObjectFormatVersion(request.getBusinessObjectFormatVersion());  businessObjectDataAvailability.setPartitionValueFilters(request.getPartitionValueFilters());  businessObjectDataAvailability.setPartitionValueFilter(request.getPartitionValueFilter());  businessObjectDataAvailability.setBusinessObjectDataVersion(request.getBusinessObjectDataVersion());  businessObjectDataAvailability.setStorageNames(request.getStorageNames());  businessObjectDataAvailability.setStorageName(request.getStorageName());  return businessObjectDataAvailability;}  }
class C{  public static boolean isSynchronized(int mod){  return (mod & SYNCHRONIZED) != 0;}  }
class C{  public void startTransfer(String fileName){  if (0 == filesCount) {    downloadStartTime=System.currentTimeMillis();  }  currentFileReal=0;  currentFileSize=getFileSize(files.get(fileName).longValue());}  }
class C{  private void disableButtons(){  setKickEnabled(false);  setPunchEnabled(false);  setPushEnabled(false);  setTripEnabled(false);  setGrappleEnabled(false);  setJumpJetEnabled(false);  setClubEnabled(false);  setBrushOffEnabled(false);  setThrashEnabled(false);  setDodgeEnabled(false);  setProtoEnabled(false);  setVibroEnabled(false);  setExplosivesEnabled(false);  butDone.setEnabled(false);  setNextEnabled(false);}  }
class C{  public void aggregate(VisorIgfsProfilerUniformityCounters other){  if (fileSize < other.fileSize)   compact(other.fileSize); else   if (fileSize > other.fileSize)   other.compact(fileSize);  int cnt=other.counters.size();  if (counters.size() < cnt)   capacity(cnt);  for (int i=0; i < cnt; i++)   counters.set(i,counters.get(i) + other.counters.get(i));}  }
class C{  public void paintProgressBarForeground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintForeground(context,g,x,y,w,h,orientation);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void updateShadowMap(){  if (!GUIPreferences.getInstance().getShadowMap())   return;  IBoard board=game.getBoard();  if (board == null)   return;  if (board.inSpace())   return;  if (boardSize == null)   updateBoardSize();  if (!isTileImagesLoaded())   return;  if (game.getPhase() == IGame.Phase.PHASE_UNKNOWN)   return;  long stT=System.nanoTime();  Image hexShadow=createBlurredShadow(tileManager.getHexMask());  if (hexShadow == null) {    repaint(1000);    return;  }  int width=game.getBoard().getWidth() * HEX_WC + (int)(HEX_W / 4);  int height=game.getBoard().getHeight() * (int)(HEX_H) + (int)(HEX_H / 2);  GraphicsConfiguration config=GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDefaultConfiguration();  shadowMap=config.createCompatibleImage(width,height,Transparency.TRANSLUCENT);  Graphics2D g=(Graphics2D)(shadowMap.createGraphics());  if ((game.getPlanetaryConditions().getLight() == PlanetaryConditions.L_MOONLESS) || (game.getPlanetaryConditions().getLight() == PlanetaryConditions.L_PITCH_BLACK)) {    lightDirection=new double[]{0,0};  } else   if (game.getPlanetaryConditions().getLight() == PlanetaryConditions.L_DUSK) {    lightDirection=new double[]{-38,14};  } else {    lightDirection=new double[]{-19,7};  }  double angle=Math.atan2(-lightDirection[1],lightDirection[0]);  int mDir=(int)(0.5 + 1.5 - angle / Math.PI * 3);  int[] sDirs={mDir % 6,(mDir + 1) % 6,(mDir + 5) % 6};  HashMap<Integer,Set<Coords>> sortedHexes=new HashMap<Integer,Set<Coords>>();  HashMap<Integer,Set<Coords>> shadowCastingHexes=new HashMap<Integer,Set<Coords>>();  for (  Coords c : allBoardHexes()) {    IHex hex=board.getHex(c);    int level=hex.getLevel();    if (!sortedHexes.containsKey(level)) {      sortedHexes.put(level,new HashSet<Coords>());    }    if (!shadowCastingHexes.containsKey(level)) {      shadowCastingHexes.put(level,new HashSet<Coords>());    }    sortedHexes.get(level).add(c);    boolean surrounded=true;    for (    int dir : sDirs) {      if (!board.contains(c.translated(dir))) {        surrounded=false;      } else {        IHex nhex=board.getHex(c.translated(dir));        int lv=nhex.getLevel();        if (lv < level)         surrounded=false;      }    }    if (!surrounded)     shadowCastingHexes.get(level).add(c);  }  HashMap<Integer,Shape> levelClips=new HashMap<Integer,Shape>();  for (  Integer h : sortedHexes.keySet()) {    Path2D path=new Path2D.Float();    for (    Coords c : sortedHexes.get(h)) {      Point p=getHexLocationLargeTile(c.getX(),c.getY(),1);      AffineTransform t=AffineTransform.getTranslateInstance(p.x + HEX_W / 2,p.y + HEX_H / 2);      t.scale(1.02,1.02);      t.translate(-HEX_W / 2,-HEX_H / 2);      path.append(t.createTransformedShape(hexPoly),false);    }    levelClips.put(h,path);  }  final int maxDiff=35;  Set<Integer> lDiffs=new TreeSet<Integer>();  for (int shadowed=board.getMinElevation(); shadowed < board.getMaxElevation(); shadowed++) {    if (levelClips.get(shadowed) == null)     continue;    for (int shadowcaster=shadowed + 1; shadowcaster <= board.getMaxElevation(); shadowcaster++) {      if (levelClips.get(shadowcaster) == null)       continue;      lDiffs.add(Math.min(shadowcaster - shadowed,maxDiff));    }  }  int n=10;  double deltaX=lightDirection[0] / n;  double deltaY=lightDirection[1] / n;  Map<Integer,BufferedImage> hS=new HashMap<Integer,BufferedImage>();  for (  int lDiff : lDiffs) {    Dimension eSize=new Dimension((int)(Math.abs(lightDirection[0]) * lDiff + HEX_W) * 2,(int)(Math.abs(lightDirection[1]) * lDiff + HEX_H) * 2);    BufferedImage elevShadow=config.createCompatibleImage(eSize.width,eSize.height,Transparency.TRANSLUCENT);    Graphics gS=elevShadow.getGraphics();    Point2D p1=new Point2D.Double(eSize.width / 2,eSize.height / 2);    for (int i=0; i < n * lDiff; i++) {      gS.drawImage(hexShadow,(int)p1.getX(),(int)p1.getY(),null);      p1.setLocation(p1.getX() + deltaX,p1.getY() + deltaY);    }    gS.dispose();    hS.put(lDiff,elevShadow);  }  for (int shadowed=board.getMinElevation(); shadowed < board.getMaxElevation(); shadowed++) {    if (levelClips.get(shadowed) == null)     continue;    Shape saveClip=g.getClip();    g.setClip(levelClips.get(shadowed));    for (int shadowcaster=shadowed + 1; shadowcaster <= board.getMaxElevation(); shadowcaster++) {      if (levelClips.get(shadowcaster) == null)       continue;      int lDiff=shadowcaster - shadowed;      for (      Coords c : shadowCastingHexes.get(shadowcaster)) {        Point2D p0=getHexLocationLargeTile(c.getX(),c.getY(),1);        g.drawImage(hS.get(Math.min(lDiff,maxDiff)),(int)p0.getX() - (int)(Math.abs(lightDirection[0]) * Math.min(lDiff,maxDiff) + HEX_W),(int)p0.getY() - (int)(Math.abs(lightDirection[1]) * Math.min(lDiff,maxDiff) + HEX_H),null);      }    }    g.setClip(saveClip);  }  n=5;  deltaX=lightDirection[0] / n;  deltaY=lightDirection[1] / n;  for (int shadowed=board.getMinElevation(); shadowed <= board.getMaxElevation(); shadowed++) {    if (levelClips.get(shadowed) == null)     continue;    Shape saveClip=g.getClip();    g.setClip(levelClips.get(shadowed));    for (int shadowcaster=board.getMinElevation(); shadowcaster <= board.getMaxElevation(); shadowcaster++) {      if (levelClips.get(shadowcaster) == null)       continue;      for (      Coords c : sortedHexes.get(shadowcaster)) {        Point2D p0=getHexLocationLargeTile(c.getX(),c.getY(),1);        Point2D p1=new Point2D.Double();        IHex hex=board.getHex(c);        List<Image> supers=tileManager.supersFor(hex);        if (!supers.isEmpty()) {          Image lastSuper=createBlurredShadow(supers.get(supers.size() - 1));          if (lastSuper == null) {            clearShadowMap();            return;          }          if (hex.containsTerrain(Terrains.WOODS) || hex.containsTerrain(Terrains.JUNGLE)) {            p1.setLocation(p0);            if ((shadowcaster + 1.5 - shadowed) > 0) {              for (int i=0; i < n * (shadowcaster + 1.5 - shadowed); i++) {                g.drawImage(lastSuper,(int)p1.getX(),(int)p1.getY(),null);                p1.setLocation(p1.getX() + deltaX,p1.getY() + deltaY);              }            }          }          if (hex.containsTerrain(Terrains.BUILDING)) {            int h=hex.terrainLevel(Terrains.BLDG_ELEV);            if ((shadowcaster + h - shadowed) > 0) {              p1.setLocation(p0);              for (int i=0; i < n * (shadowcaster + h - shadowed); i++) {                g.drawImage(lastSuper,(int)p1.getX(),(int)p1.getY(),null);                p1.setLocation(p1.getX() + deltaX,p1.getY() + deltaY);              }            }          }        }        if (hex.containsTerrain(Terrains.BRIDGE)) {          supers=tileManager.orthoFor(hex);          if (supers.isEmpty())           break;          Image maskB=createBlurredShadow(supers.get(supers.size() - 1));          if (maskB == null) {            clearShadowMap();            return;          }          int h=hex.terrainLevel(Terrains.BRIDGE_ELEV);          p1.setLocation(p0.getX() + deltaX * n * (shadowcaster + h - shadowed),p0.getY() + deltaY * n * (shadowcaster + h - shadowed));          for (int i=0; i < n; i++)           g.drawImage(maskB,(int)p1.getX(),(int)p1.getY(),null);        }      }    }    g.setClip(saveClip);  }  long tT5=System.nanoTime() - stT;  System.out.println("Time to prepare the shadow map: " + tT5 / 1e6 + " ms");}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.903 -0400",hash_original_method="6F22E04E6B2233AB267E29E6FFA8C482",hash_generated_method="240936CBCDAFBFE729A39816CE834244") @Override public synchronized void mark(int readlimit){  markFbIndex=fbIndex;  markedAtStart=firstBytes == null;  in.mark(readlimit);}  }
class C{  public SubscriptionsExtension(List<Subscription> subList){  super(PubSubElementType.SUBSCRIPTIONS);  if (subList != null)   items=subList;}  }
class C{  protected Attribute(final String type){  this.type=type;}  }
class C{  private ResolvedType resolveType(EObject obj){  return obj == null ? null : typeResolver.resolve(obj);}  }
class C{  public SortClause(String item,ORDER order){  this.item=item;  this.order=order;}  }
class C{  public Cosh(){  super(Number.class,Number.class);}  }
class C{  public void closeWriter() throws IOException {  if (writer != null)   writer.close(Reporter.NULL);}  }
class C{  public static int findWhitespace(CharSequence s,int start){  final int len=s.length();  for (int i=start; i < len; i++) {    if (Character.isWhitespace(s.charAt(i))) {      return i;    }  }  return len;}  }
class C{  public static QueryExp eq(ValueExp v1,ValueExp v2){  return new BinaryRelQueryExp(EQ,v1,v2);}  }
class C{  public MaterialBadge(String text,String textColor,String bgColor){  this();  setText(text);  setTextColor(textColor);  setBackgroundColor(bgColor);}  }
class C{  public static boolean validateHostName(String hostName){  if (hostName == null || hostName.isEmpty()) {    return false;  }  if (hostName.length() > 255) {    return false;  }  if (validateIpAddr(hostName)) {    return true;  }  String[] hostLabels=hostName.split("\\.",-1);  if (hostLabels.length == 0) {    return false;  }  Pattern labelPattern=Pattern.compile(VALID_HOST_NAME_LABEL_PATTERN);  Matcher matcher=null;  for (  String label : hostLabels) {    if (label.length() == 0 || label.length() > 63) {      return false;    }    matcher=labelPattern.matcher(label);    if (!matcher.matches()) {      return false;    }  }  return true;}  }
class C{  public static void error(int WindowNo,Container c,String AD_Message){  error(WindowNo,c,AD_Message,null);}  }
class C{  private void debugSpaces(CopySpace scannedSpace){  Log.write("SSGCspyMutator.gcspyGatherData: gather data for active semispace ");  Log.write(scannedSpace.getStart());  Log.write("-",ss.getCursor());  Log.flush();  Log.write(". The space is: ");  Log.writeln(ss.getSpace().getName());  Log.write("scannedSpace is ");  Log.writeln(scannedSpace.getName());  Log.write("The range is ");  Log.write(ss.getSpace().getStart());  Log.write(" to ");  Log.writeln(ss.getCursor());  SSGCspy.reportSpaces();}  }
class C{  void reuse(String sql,PreparedStatement prep){  if (SysProperties.CHECK2) {    if (!Thread.holdsLock(database)) {      throw DbException.throwInternalError();    }  }  prepared.put(sql,prep);}  }
class C{  public boolean rowUpdated() throws SQLException {  checkState();  return rs.rowUpdated();}  }
class C{  public String refreshSendSuccessMessage(){  addMessage(null,FacesMessage.SEVERITY_INFO,INFO_ORGANIZATION_SUPPORTMAIL_SENT);  return OUTCOME_SUCCESS;}  }
class C{  public static BigDecimal arctan(int inverseX,int scale){  BigDecimal result, numer, term;  BigDecimal invX=BigDecimal.valueOf(inverseX);  BigDecimal invX2=BigDecimal.valueOf(inverseX * inverseX);  numer=BigDecimal.ONE.divide(invX,scale,roundingMode);  result=numer;  int i=1;  do {    numer=numer.divide(invX2,scale,roundingMode);    int denom=2 * i + 1;    term=numer.divide(BigDecimal.valueOf(denom),scale,roundingMode);    if ((i % 2) != 0) {      result=result.subtract(term);    } else {      result=result.add(term);    }    i++;  } while (term.compareTo(BigDecimal.ZERO) != 0);  return result;}  }
class C{  public void testHasMainActivity() throws Exception {  mEnabled=Collections.singleton(MainActivityDetector.ISSUE);  String expected="No warnings.";  String result=lintProject(xml(FN_ANDROID_MANIFEST_XML,"" + "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n" + "<manifest package=\"com.example.android.custom-lint-rules\"\n"+ "          xmlns:android=\"http://schemas.android.com/apk/res/android\">\n"+ "    <application>\n"+ "        <activity android:name=\"com.example.android.custom-lint-rules"+ ".OtherActivity\">\n"+ "        </activity>\n"+ "\n"+ "        <activity android:name=\"com.example.android.custom-lint-rules"+ ".MainActivity\">\n"+ "            <intent-filter>\n"+ "                <action android:name=\"android.intent.action.MAIN\"/>\n"+ "                <category android:name=\"android.intent.category.LAUNCHER\"/>\n"+ "            </intent-filter>\n"+ "        </activity>\n"+ "    </application>\n"+ "</manifest>"));  assertEquals(expected,result);}  }
class C{  public void paint(Graphics g){  try {    super.paint(g);  } catch (  Exception e) {  }  int focusedRow=getFocusedRow(true);  if (focusedRow != -1 && focusedRow < getRowCount()) {    Border rowBorder=UIManager.getBorder("Table.focusRowHighlightBorder");    if (rowBorder != null) {      Rectangle rect=getCellRect(focusedRow,0,true);      rect.width=getWidth();      rowBorder.paintBorder(this,g,rect.x,rect.y,rect.width,rect.height);    }  }}  }
class C{  @Override public void insertUpdate(javax.swing.event.DocumentEvent e){}  }
class C{  private void enableSelectionButtons(){  if ((tblWeapons.getSelectedRow() != -1) || (tblEquipment.getSelectedRow() != -1)) {    btnAdd.setEnabled(true);  }  btnLeftParen.setEnabled(true);}  }
class C{  private FgsRunner.Type computeType(){  Object model=getDataModel();  if (model == null && getSourceGraph() != null) {    model=getSourceGraph();  }  if (model == null) {    throw new RuntimeException("Data source is unspecified. You may need to double click all your data boxes, \n" + "then click Save, and then right click on them and select Propagate Downstream. \n" + "The issue is that we use a seed to simulate from IM's, so your data is not saved to \n"+ "file when you save the session. It can, however, be recreated from the saved seed.");  }  if (model instanceof Graph) {    type=FgsRunner.Type.GRAPH;  } else   if (model instanceof DataSet) {    DataSet dataSet=(DataSet)model;    if (dataSet.isContinuous()) {      type=FgsRunner.Type.CONTINUOUS;    } else     if (dataSet.isDiscrete()) {      type=FgsRunner.Type.DISCRETE;    } else {      throw new IllegalStateException("Data set must either be continuous or discrete.");    }  } else   if (model instanceof ICovarianceMatrix) {    type=FgsRunner.Type.CONTINUOUS;  } else   if (model instanceof DataModelList) {    DataModelList list=(DataModelList)model;    if (allContinuous(list)) {      type=FgsRunner.Type.CONTINUOUS;    } else     if (allDiscrete(list)) {      type=FgsRunner.Type.DISCRETE;    } else {      throw new IllegalArgumentException("Data must be either all discrete or all continuous.");    }  }  return type;}  }
class C{  protected void processSsoRequest(Locale locale,String tenant,HttpServletRequest request,HttpServletResponse response,AuthenticationFilter<AuthnRequestState> authenticator,AuthnRequestState requestState,MessageSource messageSource,SessionManager sessionManager){  requestState.setLocal(locale);  requestState.setMessageSource(messageSource);  requestState.setNeedLoginView(false);  try {    try {      requestState.parseRequestForTenant(tenant,authenticator);    } catch (    IllegalStateException e) {      logger.error("Could not parse tenant request {}",e.toString());    }    Document token=null;    if (requestState.getValidationResult().isValid()) {      token=requestState.authenticate(tenant,authenticator);      if (requestState.isProxying() && requestState.getValidationResult().isValid()) {        return;      }    }    ValidationResult vr=requestState.getValidationResult();    Validate.notNull(vr,"Null validation result.");    requestState.addResponseHeaders(response);    if (vr.needsLogonView()) {      requestState.setNeedLoginView(true);      return;    }    SAMLResponseSenderFactory responseSenderFactory=new SAMLAuthnResponseSenderFactory();    SAMLResponseSender responseSender=responseSenderFactory.buildResponseSender(tenant,response,locale,null,requestState,requestState.getAuthnMethod(),requestState.getSessionId(),requestState.getPrincipalId(),messageSource,sessionManager);    AuthnRequest authnReq=requestState.getAuthnRequest();    String rpID=authnReq == null ? null : authnReq.getIssuer().getValue();    responseSender.sendResponseToRP(rpID,token);    logger.info("End processing SP-Initiated SSO response. Session was created.");  } catch (  IOException e) {    logger.error("Caught IO exception " + e.toString());  }}  }
class C{  public SQLDataException(String reason,Throwable cause){  super(reason,cause);}  }
class C{  public static int rotate90(int type,int data){switch (type) {case BlockID.TORCH:case BlockID.REDSTONE_TORCH_OFF:case BlockID.REDSTONE_TORCH_ON:switch (data) {case 1:      return 3;case 2:    return 4;case 3:  return 2;case 4:return 1;}break;case BlockID.MINECART_TRACKS:switch (data) {case 6:return 7;case 7:return 8;case 8:return 9;case 9:return 6;}case BlockID.POWERED_RAIL:case BlockID.DETECTOR_RAIL:case BlockID.ACTIVATOR_RAIL:switch (data & 0x7) {case 0:return 1 | (data & ~0x7);case 1:return 0 | (data & ~0x7);case 2:return 5 | (data & ~0x7);case 3:return 4 | (data & ~0x7);case 4:return 2 | (data & ~0x7);case 5:return 3 | (data & ~0x7);}break;case 203:case BlockID.RED_SANDSTONE_STAIRS:case BlockID.OAK_WOOD_STAIRS:case BlockID.COBBLESTONE_STAIRS:case BlockID.BRICK_STAIRS:case BlockID.STONE_BRICK_STAIRS:case BlockID.NETHER_BRICK_STAIRS:case BlockID.SANDSTONE_STAIRS:case BlockID.SPRUCE_WOOD_STAIRS:case BlockID.BIRCH_WOOD_STAIRS:case BlockID.JUNGLE_WOOD_STAIRS:case BlockID.QUARTZ_STAIRS:case BlockID.ACACIA_STAIRS:case BlockID.DARK_OAK_STAIRS:switch (data) {case 0:return 2;case 1:return 3;case 2:return 1;case 3:return 0;case 4:return 6;case 5:return 7;case 6:return 5;case 7:return 4;}break;case BlockID.STONE_BUTTON:case BlockID.WOODEN_BUTTON:{int thrown=data & 0x8;switch (data & ~0x8) {case 1:return 3 | thrown;case 2:return 4 | thrown;case 3:return 2 | thrown;case 4:return 1 | thrown;}break;}case BlockID.LEVER:{int thrown=data & 0x8;switch (data & ~0x8) {case 1:return 3 | thrown;case 2:return 4 | thrown;case 3:return 2 | thrown;case 4:return 1 | thrown;case 5:return 6 | thrown;case 6:return 5 | thrown;case 7:return 0 | thrown;case 0:return 7 | thrown;}break;}case BlockID.WOODEN_DOOR:case BlockID.IRON_DOOR:if ((data & 0x8) != 0) {break;}case BlockID.COCOA_PLANT:case BlockID.TRIPWIRE_HOOK:{int extra=data & ~0x3;int withoutFlags=data & 0x3;switch (withoutFlags) {case 0:return 1 | extra;case 1:return 2 | extra;case 2:return 3 | extra;case 3:return 0 | extra;}break;}case BlockID.SIGN_POST:return (data + 4) % 16;case BlockID.LADDER:case BlockID.WALL_SIGN:case BlockID.CHEST:case BlockID.FURNACE:case BlockID.BURNING_FURNACE:case BlockID.ENDER_CHEST:case BlockID.TRAPPED_CHEST:case BlockID.HOPPER:{int extra=data & 0x8;int withoutFlags=data & ~0x8;switch (withoutFlags) {case 2:return 5 | extra;case 3:return 4 | extra;case 4:return 2 | extra;case 5:return 3 | extra;}break;}case 198:case BlockID.DISPENSER:case BlockID.DROPPER:int dispPower=data & 0x8;switch (data & ~0x8) {case 2:return 5 | dispPower;case 3:return 4 | dispPower;case 4:return 2 | dispPower;case 5:return 3 | dispPower;}break;case BlockID.PUMPKIN:case BlockID.JACKOLANTERN:switch (data) {case 0:return 1;case 1:return 2;case 2:return 3;case 3:return 0;}break;case BlockID.HAY_BLOCK:case BlockID.LOG:case BlockID.LOG2:if (data >= 4 && data <= 11) data^=0xc;break;case BlockID.COMPARATOR_OFF:case BlockID.COMPARATOR_ON:case BlockID.REDSTONE_REPEATER_OFF:case BlockID.REDSTONE_REPEATER_ON:int dir=data & 0x03;int delay=data - dir;switch (dir) {case 0:return 1 | delay;case 1:return 2 | delay;case 2:return 3 | delay;case 3:return 0 | delay;}break;case BlockID.TRAP_DOOR:case BlockID.IRON_TRAP_DOOR:int withoutOrientation=data & ~0x3;int orientation=data & 0x3;switch (orientation) {case 0:return 3 | withoutOrientation;case 1:return 2 | withoutOrientation;case 2:return 0 | withoutOrientation;case 3:return 1 | withoutOrientation;}break;case BlockID.PISTON_BASE:case BlockID.PISTON_STICKY_BASE:case BlockID.PISTON_EXTENSION:final int rest=data & ~0x7;switch (data & 0x7) {case 2:return 5 | rest;case 3:return 4 | rest;case 4:return 2 | rest;case 5:return 3 | rest;}break;case BlockID.BROWN_MUSHROOM_CAP:case BlockID.RED_MUSHROOM_CAP:if (data >= 10) return data;return (data * 3) % 10;case BlockID.VINE:return ((data << 1) | (data >> 3)) & 0xf;case BlockID.FENCE_GATE:return ((data + 1) & 0x3) | (data & ~0x3);case BlockID.ANVIL:int damage=data & ~0x3;switch (data & 0x3) {case 0:return 3 | damage;case 2:return 1 | damage;case 1:return 0 | damage;case 3:return 2 | damage;}break;case BlockID.BED:return data & ~0x3 | (data + 1) & 0x3;case BlockID.HEAD:switch (data) {case 2:return 5;case 3:return 4;case 4:return 2;case 5:return 3;}}return data;}  }
class C{  public void emitDirect(int taskId,Tuple anchor,List<Object> tuple){  emitDirect(taskId,Utils.DEFAULT_STREAM_ID,anchor,tuple);}  }
class C{  protected Node newNode(){  return new SVGOMFEPointLightElement();}  }
class C{  public BEComboBoxRenderer(BEComboBoxUI ui){  super();  this.ui=ui;  setOpaque(false);  setBorder(BorderFactory.createEmptyBorder(5,4,5,8));}  }
class C{  public boolean hasChanged(String key){  Boolean changed=changes.get(key);  boolean result=(changed == null) ? false : changed;  log.trace("result: {}",result);  return result;}  }
class C{  public PatternGuardExpr(String namespace,String name,List<Expression> parameters){  super(namespace,name,parameters);  this.guarded=new ArrayList<PatternExpr>();}  }
class C{  public static final char[][] deepCopy(char[][] toCopy){  int toCopyLength=toCopy.length;  char[][] result=new char[toCopyLength][];  for (int i=0; i < toCopyLength; i++) {    char[] toElement=toCopy[i];    int toElementLength=toElement.length;    char[] resultElement=new char[toElementLength];    System.arraycopy(toElement,0,resultElement,0,toElementLength);    result[i]=resultElement;  }  return result;}  }
class C{  @Nullable public static File findExecutableFile(File parent,String name){  if (SystemInfo.isWindows || SystemInfo.isOS2) {    for (    String suffix : WINDOWS_EXECUTABLE_SUFFIXES) {      File file=new File(parent,name + "." + suffix);      if (file.exists())       return file;    }  } else   if (SystemInfo.isUnix) {    File file=new File(parent,name);    if (file.exists())     return file;  }  return null;}  }
class C{  public void actionPerformed(ActionEvent e){  ((ActionListener)a).actionPerformed(e);  ((ActionListener)b).actionPerformed(e);}  }
class C{  @GwtIncompatible("Predicates.instanceOf") public void testIsInstanceOf_apply(){  Predicate<Object> isInteger=Predicates.instanceOf(Integer.class);  assertTrue(isInteger.test(1));  assertFalse(isInteger.test(2.0f));  assertFalse(isInteger.test(""));  assertFalse(isInteger.test(null));}  }
class C{  public VerletPhysics2D(){  this(null,50,0,1);}  }
class C{  @Override public int read() throws java.io.IOException {  if (position < 0) {    if (encode) {      byte[] b3=new byte[3];      int numBinaryBytes=0;      for (int i=0; i < 3; i++) {        int b=in.read();        if (b >= 0) {          b3[i]=(byte)b;          numBinaryBytes++;        } else {          break;        }      }      if (numBinaryBytes > 0) {        encode3to4(b3,0,numBinaryBytes,buffer,0,options);        position=0;        numSigBytes=4;      } else {        return -1;      }    } else {      byte[] b4=new byte[4];      int i=0;      for (i=0; i < 4; i++) {        int b=0;        do {          b=in.read();        } while (b >= 0 && decodabet[b & 0x7f] <= WHITE_SPACE_ENC);        if (b < 0) {          break;        }        b4[i]=(byte)b;      }      if (i == 4) {        numSigBytes=decode4to3(b4,0,buffer,0,options);        position=0;      } else       if (i == 0) {        return -1;      } else {        throw new java.io.IOException("Improperly padded Base64 input.");      }    }  }  if (position >= 0) {    if (position >= numSigBytes) {      return -1;    }    if (encode && breakLines && lineLength >= MAX_LINE_LENGTH) {      lineLength=0;      return '\n';    } else {      lineLength++;      int b=buffer[position++];      if (position >= bufferLength) {        position=-1;      }      return b & 0xFF;    }  } else {    throw new java.io.IOException("Error in Base64 code reading stream.");  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Channel c=getChannel(stack);  if (c == null)   return new Integer(0);  return new Integer(c.getLogoCount(Channel.LOGO_MED));}  }
class C{  public static void deleteCookie(HttpServletResponse response,Cookie cookie,String path){  if (cookie != null) {    cookie.setMaxAge(0);    cookie.setPath(path);    response.addCookie(cookie);  }}  }
class C{  protected <T>double initialWeights(WritableDoubleDataStore weights,DBIDs ids,T latest,DistanceQuery<? super T> distQ){  double weightsum=0.;  for (DBIDIter it=ids.iter(); it.valid(); it.advance()) {    double weight=distQ.distance(latest,it);    weights.putDouble(it,weight);    weightsum+=weight;  }  return weightsum;}  }
class C{  public img addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  void put(final CodeWriter owner,final ByteVector out,final int source,final boolean wideOffset){  if (CodeWriter.CHECK) {    if (this.owner == null) {      this.owner=owner;    } else     if (this.owner != owner) {      throw new IllegalArgumentException();    }  }  if (resolved) {    if (wideOffset) {      out.put4(position - source);    } else {      out.put2(position - source);    }  } else {    if (wideOffset) {      addReference(-1 - source,out.length);      out.put4(-1);    } else {      addReference(source,out.length);      out.put2(-1);    }  }}  }
class C{  public Address __mul__(final Object rhs){  return new Address(m_value.multiply(getBigInteger(rhs)));}  }
class C{  @Override public int shardId(){  return this.shardId;}  }
class C{  public static Date parseDate(String dateValue) throws DateParseException {  return parseDate(dateValue,null,null);}  }
class C{  public void quit(){  mQuit=true;  interrupt();}  }
class C{  public synchronized void addTextListener(TextListener cl){  m_textListeners.addElement(cl);}  }
class C{  public void error(SAXParseException spe){  if (LOG.isErrorEnabled()) {    LOG.error("Error: " + spe.toString() + ": "+ spe.getMessage());  }}  }
class C{  public com.codename1.ui.Font createBitmapFont(){  BufferedImage image=new BufferedImage(5000,100,BufferedImage.TYPE_INT_RGB);  Graphics2D g2d=(Graphics2D)image.getGraphics();  g2d.setRenderingHint(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_QUALITY);  g2d.setRenderingHint(RenderingHints.KEY_COLOR_RENDERING,RenderingHints.VALUE_COLOR_RENDER_QUALITY);  g2d.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL,RenderingHints.VALUE_STROKE_NORMALIZE);  g2d.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,ANTI_ALIASING_VALUES[antiAliasing.getSelectedIndex()]);  g2d.setColor(Color.BLACK);  g2d.fillRect(0,0,image.getWidth(),image.getHeight());  g2d.setColor(new Color(0xff0000));  g2d.setFont(preview.getFont());  FontMetrics metrics=g2d.getFontMetrics();  FontRenderContext context=g2d.getFontRenderContext();  int height=(int)Math.ceil(metrics.getMaxDescent() + metrics.getMaxAscent());  int baseline=(int)Math.ceil(metrics.getMaxAscent());  String charsetStr=charset.getText();  int[] offsets=new int[charsetStr.length()];  int[] widths=new int[offsets.length];  int currentOffset=0;  for (int iter=0; iter < charsetStr.length(); iter++) {    offsets[iter]=currentOffset;    String currentChar=charsetStr.substring(iter,iter + 1);    g2d.drawString(currentChar,currentOffset,baseline);    Rectangle2D rect=preview.getFont().getStringBounds(currentChar,context);    widths[iter]=(int)Math.ceil(rect.getWidth());    if (preview.getFont().isItalic()) {      currentOffset+=metrics.getMaxAdvance();    } else {      currentOffset+=widths[iter] + 1;    }  }  g2d.dispose();  BufferedImage shrunk=new BufferedImage(currentOffset,height,BufferedImage.TYPE_INT_RGB);  g2d=(Graphics2D)shrunk.getGraphics();  g2d.drawImage(image,0,0,null);  g2d.dispose();  int[] rgb=new int[shrunk.getWidth() * shrunk.getHeight()];  shrunk.getRGB(0,0,shrunk.getWidth(),shrunk.getHeight(),rgb,0,shrunk.getWidth());  com.codename1.ui.Image bitmap=com.codename1.ui.Image.createImage(rgb,shrunk.getWidth(),shrunk.getHeight());  return com.codename1.ui.Font.createBitmapFont(bitmap,offsets,widths,charsetStr);}  }
class C{  public void testNextDoubleBoundNonPositive(){  ThreadLocalRandom rnd=ThreadLocalRandom.current();  double[] badBounds={0.0d,-17.0d,-Double.MIN_VALUE,Double.NEGATIVE_INFINITY,Double.NaN};  for (  double bound : badBounds) {    try {      rnd.nextDouble(bound);      shouldThrow();    } catch (    IllegalArgumentException success) {    }  }}  }
class C{  public Ellipse(){  this.rect=new RotatedRect();}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"cmpxchg8b");  Preconditions.checkArgument(instruction.getOperands().size() == 1,"Error: Argument instruction is not a cmpxchg8b instruction (invalid number of operands)");  final long baseOffset=instruction.getAddress().toLong() * 0x100;  final long offset=baseOffset;  final List<? extends IOperandTree> operands=instruction.getOperands();  final IOperandTree targetOperand=operands.get(0);  final TranslationResult firstResult=Helpers.translateOperand(environment,offset,targetOperand,false);  instructions.addAll(firstResult.getInstructions());  final String loadResult=environment.getNextVariableString();  instructions.add(ReilHelpers.createLdm(baseOffset + instructions.size(),OperandSize.DWORD,firstResult.getAddress(),OperandSize.QWORD,loadResult));  final String combinedEdxEax=environment.getNextVariableString();  instructions.add(ReilHelpers.createBsh(baseOffset + instructions.size(),OperandSize.DWORD,"edx",OperandSize.DWORD,"32",OperandSize.QWORD,combinedEdxEax));  instructions.add(ReilHelpers.createOr(baseOffset + instructions.size(),OperandSize.QWORD,"eax",OperandSize.QWORD,combinedEdxEax,OperandSize.QWORD,combinedEdxEax));  final String comparisonResult=environment.getNextVariableString();  instructions.add(ReilHelpers.createSub(baseOffset + instructions.size(),OperandSize.QWORD,combinedEdxEax,OperandSize.QWORD,loadResult,OperandSize.QWORD,comparisonResult));  instructions.add(ReilHelpers.createBisz(baseOffset + instructions.size(),OperandSize.QWORD,comparisonResult,OperandSize.BYTE,Helpers.ZERO_FLAG));  final String jmpGoal=String.format("%d.%d",instruction.getAddress().toLong(),instructions.size() + 4);  instructions.add(ReilHelpers.createJcc(baseOffset + instructions.size(),OperandSize.BYTE,Helpers.ZERO_FLAG,OperandSize.ADDRESS,jmpGoal));  instructions.add(ReilHelpers.createAnd(baseOffset + instructions.size(),OperandSize.QWORD,loadResult,OperandSize.QWORD,String.valueOf(TranslationHelpers.getAllBitsMask(OperandSize.DWORD)),OperandSize.DWORD,"eax"));  instructions.add(ReilHelpers.createBsh(baseOffset + instructions.size(),OperandSize.QWORD,loadResult,OperandSize.DWORD,"-32",OperandSize.DWORD,"edx"));  final String jmpGoal2=String.format("%d.%d",instruction.getAddress().toLong(),instructions.size() + 4);  instructions.add(ReilHelpers.createJcc(baseOffset + instructions.size(),OperandSize.BYTE,"1",OperandSize.ADDRESS,jmpGoal2));  instructions.add(ReilHelpers.createBsh(baseOffset + instructions.size(),OperandSize.DWORD,"ecx",OperandSize.DWORD,"32",OperandSize.QWORD,combinedEdxEax));  instructions.add(ReilHelpers.createOr(baseOffset + instructions.size(),OperandSize.QWORD,"ebx",OperandSize.QWORD,combinedEdxEax,OperandSize.QWORD,combinedEdxEax));  instructions.add(ReilHelpers.createStm(baseOffset + instructions.size(),OperandSize.QWORD,combinedEdxEax,OperandSize.DWORD,firstResult.getAddress()));  instructions.add(ReilHelpers.createNop(baseOffset + instructions.size()));}  }
class C{  public void removeMediaElement(String participantId,MediaElement element) throws RoomException {  log.debug("Remove media element {} from participant {}",element.getId(),participantId);  Participant participant=getParticipant(participantId);  String name=participant.getName();  if (participant.isClosed()) {    throw new RoomException(Code.USER_CLOSED_ERROR_CODE,"Participant '" + name + "' has been closed");  }  participant.getPublisher().revert(element);}  }
class C{  public int indexOf(Number x){  if (this.autoSort) {    return Collections.binarySearch(this.data,new XYDataItem(x,null));  } else {    for (int i=0; i < this.data.size(); i++) {      XYDataItem item=(XYDataItem)this.data.get(i);      if (item.getX().equals(x)) {        return i;      }    }    return -1;  }}  }
class C{  protected boolean readFields(DataInputStream d) throws IOException {  field_info fi;  int i;  fields=new field_info[fields_count];  for (i=0; i < fields_count; i++) {    fi=new field_info();    fi.access_flags=d.readUnsignedShort();    fi.name_index=d.readUnsignedShort();    fi.descriptor_index=d.readUnsignedShort();    fi.attributes_count=d.readUnsignedShort();    if (fi.attributes_count > 0) {      fi.attributes=new attribute_info[fi.attributes_count];      readAttributes(d,fi.attributes_count,fi.attributes);    }    fields[i]=fi;  }  return true;}  }
class C{  public void doNextOp(DhcpStateMachine machine){  machine.onDiscoverReceived(mBroadcast,mTransId,mClientMac,mRequestedParams);}  }
class C{  protected void begin() throws MailboxException {  try {    getSession().refresh(true);  } catch (  RepositoryException e) {  }}  }
class C{  public SpatialArgs parse(String v,SpatialContext ctx) throws ParseException, InvalidShapeException {  int idx=v.indexOf('(');  int edx=v.lastIndexOf(')');  if (idx < 0 || idx > edx) {    throw new ParseException("missing parens: " + v,-1);  }  SpatialOperation op=SpatialOperation.get(v.substring(0,idx).trim());  String body=v.substring(idx + 1,edx).trim();  if (body.length() < 1) {    throw new ParseException("missing body : " + v,idx + 1);  }  Shape shape=parseShape(body,ctx);  SpatialArgs args=newSpatialArgs(op,shape);  if (v.length() > (edx + 1)) {    body=v.substring(edx + 1).trim();    if (body.length() > 0) {      Map<String,String> aa=parseMap(body);      readNameValuePairs(args,aa);      if (!aa.isEmpty()) {        throw new IllegalArgumentException("unused parameters: " + aa);      }    }  }  args.validate();  return args;}  }
class C{  private ESResultSet convertResponse(boolean useLateral) throws SQLException {  if (esResponse.getHits().getHits().length == 0 && esResponse.getScrollId() != null) {    esResponse=client.prepareSearchScroll(esResponse.getScrollId()).setScroll(new TimeValue(Utils.getIntProp(props,Utils.PROP_SCROLL_TIMEOUT_SEC,60) * 1000)).execute().actionGet();  }  if (esResponse.getAggregations() != null) {    ESResultSet rs=new ESResultSet(this);    for (    Aggregation agg : esResponse.getAggregations()) {      aggParser.parseAggregation(agg,rs);    }    if (rs.getNrRows() == 0)     return null;    if (having != null)     rs.filterHaving(having);    rs.setTotal(rs.getNrRows());    if (!orderings.isEmpty()) {      rs.orderBy(orderings);    }    if (this.limit > -1)     rs.limit(limit);    rs.executeComputations();    return rs;  } else {    long total=esResponse.getHits().getTotalHits();    if (limit > 0)     total=Math.min(total,limit);    ESResultSet rs=hitParser.parse(esResponse.getHits(),this.heading,total,Utils.getIntProp(props,Utils.PROP_DEFAULT_ROW_LENGTH,1000),useLateral,0,null);    while (rs.rowCount() < Math.min(maxRowsRS,rs.getTotal() - rs.getOffset())) {      esResponse=client.prepareSearchScroll(esResponse.getScrollId()).setScroll(new TimeValue(Utils.getIntProp(props,Utils.PROP_SCROLL_TIMEOUT_SEC,60) * 1000)).execute().actionGet();      rs=hitParser.parse(esResponse.getHits(),this.heading,total,Utils.getIntProp(props,Utils.PROP_DEFAULT_ROW_LENGTH,1000),useLateral,0,rs);      rs.setTotal(Math.min(esResponse.getHits().getTotalHits(),limit > 0 ? limit : esResponse.getHits().getTotalHits()));    }    rs.executeComputations();    return rs;  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_elementchangeattributevalue.class,args);}  }
class C{  TypePath(byte[] b,int offset){  this.b=b;  this.offset=offset;}  }
class C{  public double[][][] computeLocal(int states[][][],int[][] offsetOfDestFromSources){  initialise();  int[][] cleanedSourcesOffsets=cleanOffsetOfDestFromSources(offsetOfDestFromSources);  addObservations(states,cleanedSourcesOffsets,true);  return computeLocalFromPreviousObservations(states,cleanedSourcesOffsets,true);}  }
class C{  public static <T>Streamable<T> reversedOf(final T... elements){  return fromStream(ReactiveSeq.reversedOf(elements));}  }
class C{  void finishPacket(ByteBuffer buffer){  byte[] clientId=new byte[7];  clientId[0]=CLIENT_ID_ETHER;  System.arraycopy(mClientMac,0,clientId,1,6);  addTlv(buffer,DHCP_MESSAGE_TYPE,DHCP_MESSAGE_TYPE_REQUEST);  addTlv(buffer,DHCP_PARAMETER_LIST,mRequestedParams);  addTlv(buffer,DHCP_REQUESTED_IP,mRequestedIp);  addTlv(buffer,DHCP_SERVER_IDENTIFIER,mServerIdentifier);  addTlv(buffer,DHCP_CLIENT_IDENTIFIER,clientId);  addTlvEnd(buffer);}  }
class C{  public SQFPrivateDeclClassic(@NotNull SQFVariable privateVariable,@NotNull SQFPrivateDecl declarationElement){  super(privateVariable,declarationElement);}  }
class C{  public static Builder builder(ReconfigureResponse response){  return new Builder(response);}  }
class C{  private void parseAttributres(String str){  if (str.indexOf("[Flat ") != -1) {    m_type=TYPE_FLAT;    m_primaryColor=ThemeUtils.parseColor(str,new ColorUIResource(m_primaryColor));  } else   if (str.indexOf("[Gradient ") != -1) {    m_type=TYPE_GRADIENT;    m_primaryColor=ThemeUtils.parseColor(str.substring(str.indexOf(" Upper=") + 7,str.indexOf(",Lower=")),new ColorUIResource(m_primaryColor));    m_secondaryColor=ThemeUtils.parseColor(str.substring(str.indexOf(",Lower=") + 7,str.indexOf(",Start=")),new ColorUIResource(m_secondaryColor));    m_startPoint=Integer.parseInt(str.substring(str.indexOf(",Start=") + 7,str.indexOf(",RDistance=")));    setGradientRepeatDistance(str.substring(str.indexOf(",RDistance=") + 11,str.lastIndexOf(']')));  } else   if (str.indexOf("[Line ") != -1) {    m_type=TYPE_LINES;    m_primaryColor=ThemeUtils.parseColor(str.substring(str.indexOf(" Color=") + 7,str.indexOf(",BackColor=")),new ColorUIResource(m_primaryColor));    m_secondaryColor=ThemeUtils.parseColor(str.substring(str.indexOf(",BackColor=") + 11,str.indexOf(",Width=")),new ColorUIResource(m_secondaryColor));    setLineWidth(str.substring(str.indexOf(",Width=") + 7,str.indexOf(",Distance=")));    setLineDistance(str.substring(str.indexOf(",Distance=") + 10,str.lastIndexOf(']')));  } else   if (str.indexOf("[Texture ") != -1) {    m_type=TYPE_TEXTURE;    setTextureURL(str.substring(str.indexOf(" GraphURL=") + 10,str.indexOf(",Taint=")));    m_primaryColor=ThemeUtils.parseColor(str.substring(str.indexOf(",Taint=") + 7,str.indexOf(",Alpha=")),new ColorUIResource(m_primaryColor));    setTextureCompositeAlpha(str.substring(str.indexOf(",Alpha=") + 7,str.lastIndexOf(']')));  }}  }
class C{  public void testGetVersion(AbstractDosPlugin instance){  String result=instance.getVersion();  assertTrue(result.length() > 0);}  }
class C{  public BlobStore openBlobStore(String url) throws IOException {  return openBlobStore(url,null);}  }
class C{  public static boolean containsPrefix(Collection c,String pref){synchronized (c) {    Iterator i=c.iterator();    while (i.hasNext()) {      Object s=i.next();      if (s instanceof String && ((String)s).startsWith(pref))       return true;    }  }  return false;}  }
class C{  private void revertPojosJavaNames(Collection<PojoDescriptor> selPojos){  for (  PojoDescriptor pojo : selPojos)   pojo.revertJavaNames();}  }
class C{  public java.lang.String trim(){  return null;}  }
class C{  public Matrix3 multiplyByMatrix(Matrix3 matrix){  if (matrix == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Matrix3","multiplyByMatrix","missingMatrix"));  }  double[] ma=this.m;  double[] mb=matrix.m;  double ma0, ma1, ma2;  ma0=ma[0];  ma1=ma[1];  ma2=ma[2];  ma[0]=(ma0 * mb[0]) + (ma1 * mb[3]) + (ma2 * mb[6]);  ma[1]=(ma0 * mb[1]) + (ma1 * mb[4]) + (ma2 * mb[7]);  ma[2]=(ma0 * mb[2]) + (ma1 * mb[5]) + (ma2 * mb[8]);  ma0=ma[3];  ma1=ma[4];  ma2=ma[5];  ma[3]=(ma0 * mb[0]) + (ma1 * mb[3]) + (ma2 * mb[6]);  ma[4]=(ma0 * mb[1]) + (ma1 * mb[4]) + (ma2 * mb[7]);  ma[5]=(ma0 * mb[2]) + (ma1 * mb[5]) + (ma2 * mb[8]);  ma0=ma[6];  ma1=ma[7];  ma2=ma[8];  ma[6]=(ma0 * mb[0]) + (ma1 * mb[3]) + (ma2 * mb[6]);  ma[7]=(ma0 * mb[1]) + (ma1 * mb[4]) + (ma2 * mb[7]);  ma[8]=(ma0 * mb[2]) + (ma1 * mb[5]) + (ma2 * mb[8]);  return this;}  }
class C{  private void writeTag(){  if (dataPos == dataSize)   return;  int tag=data[dataPos++];  if (isEOC(tag) && (data[dataPos] == 0)) {    dataPos++;    writeTag();  } else   newData[newDataPos++]=(byte)tag;}  }
class C{  public static String javascriptEscape(String input){  ParamChecks.nullNotPermitted(input,"input");  StringBuilder result=new StringBuilder();  int length=input.length();  for (int i=0; i < length; i++) {    char c=input.charAt(i);    if (c == '\"') {      result.append("\\\"");    } else     if (c == '\'') {      result.append("\\'");    } else     if (c == '\\') {      result.append("\\\\");    } else {      result.append(c);    }  }  return result.toString();}  }
class C{  public static String removeTicks(String tickedString){  int indexFirst=tickedString.indexOf('`');  int indexLast=tickedString.lastIndexOf('`');  if ((indexFirst != indexLast) && (indexFirst != -1) && (indexLast != -1)) {    return tickedString.substring(indexFirst + 1,indexLast);  }  return tickedString;}  }
class C{  protected void clear(){  resultListModel.clear();  resultTable.getSelectionModel().clearSelection();  resultTableModel.fireTableDataChanged();  metricListModel.clear();  metricList.getSelectionModel().clearSelection();  paintHelper.clear();  chartContainer.removeAll();  chartContainer.revalidate();  chartContainer.repaint();}  }
class C{  public ObjectFactory(){}  }
class C{  private void squireAlvarezWeightUpdate(final Neuron neuron){  for (  Synapse synapse : neuron.getFanIn()) {    double deltaw=learningRate * synapse.getTarget().getActivation() * (synapse.getSource().getActivation() - synapse.getTarget().getAverageInput());    synapse.setStrength(synapse.clip(synapse.getStrength() + deltaw));  }}  }
class C{  private char normalizedKatakana(char c,char m){switch (m) {case KATAKANA_ITERATION_MARK:    return isKatakanaDakuten(c) ? (char)(c - 1) : c;case KATAKANA_VOICED_ITERATION_MARK:  return lookupKatakanaDakuten(c);default :return c;}}  }
class C{  @Override public void writeTo(ChannelBuffer data){  data.writeInt(dataType);}  }
class C{  public static double[] copyOfRange(double[] original,int from,int to){  int newLength=to - from;  if (newLength < 0)   throw new IllegalArgumentException(from + " > " + to);  double[] copy=new double[newLength];  System.arraycopy(original,from,copy,0,Math.min(original.length - from,newLength));  return copy;}  }
class C{  public PriceModelException(Reason reason){  super(reason.toString());  setMessageKey(getMessageKey() + "." + reason.toString());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:47.721 -0400",hash_original_method="0AF56B72B76C0484915AB9E07E067DAB",hash_generated_method="EDC6FA6AC807C838C86EF2098F93DF3F") public void error(Object message,Throwable t){}  }
class C{  public static ImmutableSet<DomainApplication> loadActiveApplicationsByDomainName(String fullyQualifiedDomainName,DateTime now){  DomainApplicationIndex index=load(fullyQualifiedDomainName);  if (index == null) {    return ImmutableSet.of();  }  ImmutableSet.Builder<DomainApplication> apps=new ImmutableSet.Builder<>();  for (  DomainApplication app : ofy().load().keys(index.getKeys()).values()) {    DateTime forwardedNow=latestOf(now,app.getUpdateAutoTimestamp().getTimestamp());    if (app.getDeletionTime().isAfter(forwardedNow)) {      apps.add(app.cloneProjectedAtTime(forwardedNow));    }  }  return apps.build();}  }
class C{  public final LC insets(String s){  insets=ConstraintParser.parseInsets(s,true);  return this;}  }
class C{  public NotificationChain basicSetBogusTypeRef(TypeRef newBogusTypeRef,NotificationChain msgs){  TypeRef oldBogusTypeRef=bogusTypeRef;  bogusTypeRef=newBogusTypeRef;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.METHOD_DECLARATION__BOGUS_TYPE_REF,oldBogusTypeRef,newBogusTypeRef);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  final boolean isVolatile(){  return Modifier.isVolatile(getModifiers());}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.COMPLEX_ATTRIBUTE___UNIQUE_1:    setUnique_1((Boolean)newValue);  return;case UmplePackage.COMPLEX_ATTRIBUTE___LAZY_1:setLazy_1((Boolean)newValue);return;case UmplePackage.COMPLEX_ATTRIBUTE___MODIFIER_1:setModifier_1((String)newValue);return;case UmplePackage.COMPLEX_ATTRIBUTE___ANONYMOUS_COMPLEX_ATTRIBUTE_11:getAnonymous_complexAttribute_1_1().clear();getAnonymous_complexAttribute_1_1().addAll((Collection<? extends Anonymous_complexAttribute_1_>)newValue);return;case UmplePackage.COMPLEX_ATTRIBUTE___ANONYMOUS_COMPLEX_ATTRIBUTE_21:getAnonymous_complexAttribute_2_1().clear();getAnonymous_complexAttribute_2_1().addAll((Collection<? extends Anonymous_complexAttribute_2_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public void testDivideBigDecimalScaleRoundingModeDOWN(){  String a="-37361671119238118911893939591735";  int aScale=10;  String b="74723342238476237823787879183470";  int bScale=15;  int newScale=31;  RoundingMode rm=RoundingMode.DOWN;  String c="-50000.0000000000000000000000000000000";  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,newScale,rm);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",newScale,result.scale());}  }
class C{  public final AC gap(String size,int... indexes){  BoundSize bsa=size != null ? ConstraintParser.parseBoundSize(size,true,true) : null;  for (int i=indexes.length - 1; i >= 0; i--) {    int ix=indexes[i];    makeSize(ix + 1);    if (bsa != null)     cList.get(ix).setGapAfter(bsa);  }  return this;}  }
class C{  protected String dumpByteArray(byte[] theByteArray){  StringBuilder buf=new StringBuilder();  for (  byte b : theByteArray) {    buf.append(Integer.toHexString(b));  }  return buf.toString();}  }
