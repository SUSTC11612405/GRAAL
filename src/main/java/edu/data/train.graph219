class C{  public static boolean filterAcceptsAnyResource(final ISelection selection,final ResourceFilter filter){  if (selection instanceof IStructuredSelection == false) {    return false;  }  final IStructuredSelection ss=(IStructuredSelection)selection;  @SuppressWarnings("rawtypes") final Iterator it;  for (it=ss.iterator(); it.hasNext(); ) {    final IResource resource=(IResource)Adapters.getAdapter(it.next(),IResource.class);    if (resource == null) {      continue;    }    if (filter.filter(resource).isAccept()) {      return true;    }  }  return false;}  }
class C{  public Filter createFilter(BridgeContext ctx,Element filterElement,Element filteredElement,GraphicsNode filteredNode,Filter inputFilter,Rectangle2D filterRegion,Map filterMap){  CompositeRule rule=convertOperator(filterElement,ctx);  Filter in=getIn(filterElement,filteredElement,filteredNode,inputFilter,filterMap,ctx);  if (in == null) {    return null;  }  Filter in2=getIn2(filterElement,filteredElement,filteredNode,inputFilter,filterMap,ctx);  if (in2 == null) {    return null;  }  Rectangle2D defaultRegion;  defaultRegion=(Rectangle2D)in.getBounds2D().clone();  defaultRegion.add(in2.getBounds2D());  Rectangle2D primitiveRegion=SVGUtilities.convertFilterPrimitiveRegion(filterElement,filteredElement,filteredNode,defaultRegion,filterRegion,ctx);  List srcs=new ArrayList(2);  srcs.add(in2);  srcs.add(in);  Filter filter=new CompositeRable8Bit(srcs,rule,true);  handleColorInterpolationFilters(filter,filterElement);  filter=new PadRable8Bit(filter,primitiveRegion,PadMode.ZERO_PAD);  updateFilterMap(filterElement,filter,filterMap);  return filter;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childData;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("name");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  child.insertData(15,", Esquire");  childData=child.getData();  assertEquals("characterdataInsertDataEndAssert","Margaret Martin, Esquire",childData);}  }
class C{  public void resetAll(){  String sql="UPDATE FileScanner SET status = '" + FileScanner.STATUS_ERROR + "', statusMessage = "+ "'Scanner was stopped because system was shutdown.' "+ " WHERE status = '"+ FileScanner.STATUS_RUNNING+ "'";  getHibernateTemplate().bulkUpdate(sql);}  }
class C{  public void addMonths(final int months){  setMillis(getChronology().months().add(getMillis(),months));}  }
class C{  private void removeKeyAndSubFolders(String key){  Set<String> keySet=mFragment.getMusicFoldersHashMap().keySet();  String[] keyArray=new String[keySet.size()];  keySet.toArray(keyArray);  if (keyArray == null || keyArray.length == 0)   return;  for (int i=0; i < keyArray.length; i++)   if (keyArray[i].startsWith(key))   mFragment.getMusicFoldersHashMap().remove(keyArray[i]);}  }
class C{  public void addTagToVmAsync(final String vmId,Tag tag,final FutureCallback<Task> responseCallback) throws IOException {  String path=String.format("%s/%s/tags",getBasePath(),vmId);  createObjectAsync(path,serializeObjectAsJson(tag),responseCallback);}  }
class C{  protected final void assertValid(final OperatedClientConnection wrappedConn){  if (wrappedConn == null) {    throw new IllegalStateException("No wrapped connection.");  }}  }
class C{  public boolean apply(ObjectName name) throws BadStringOperationException, BadBinaryOpValueExpException, BadAttributeValueExpException, InvalidApplicationException {  ValueExp val1=exp1.apply(name);  ValueExp val2=exp2.apply(name);  ValueExp val3=exp3.apply(name);  boolean numeric=val1 instanceof NumericValueExp;  if (numeric) {    if (((NumericValueExp)val1).isLong()) {      long lval1=((NumericValueExp)val1).longValue();      long lval2=((NumericValueExp)val2).longValue();      long lval3=((NumericValueExp)val3).longValue();      return lval2 <= lval1 && lval1 <= lval3;    } else {      double dval1=((NumericValueExp)val1).doubleValue();      double dval2=((NumericValueExp)val2).doubleValue();      double dval3=((NumericValueExp)val3).doubleValue();      return dval2 <= dval1 && dval1 <= dval3;    }  } else {    String sval1=((StringValueExp)val1).getValue();    String sval2=((StringValueExp)val2).getValue();    String sval3=((StringValueExp)val3).getValue();    return sval2.compareTo(sval1) <= 0 && sval1.compareTo(sval3) <= 0;  }}  }
class C{  protected Attribute(final String type){  this.type=type;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public String ignoredAttributeIndicesTipText(){  return "The range of attributes to be ignored by the clusterer. eg: first-3,5,9-last";}  }
class C{  public static boolean isSupported(){  return Display.impl.isTransformSupported();}  }
class C{  @Override public boolean supportsDb(String type){  return true;}  }
class C{  @Override public void run(){  if (asInitiator) {    Log.i(TAG,"About to send friends.");    sendFriends();    Log.i(TAG,"Sent friends. About to send messages.");    sendMessages();    Log.i(TAG,"Sent messages. About to receive friends.");    receiveFriends();    Log.i(TAG,"Received friends. About to receive messages.");    receiveMessages();  } else {    receiveFriends();    receiveMessages();    sendFriends();    sendMessages();  }  if (getExchangeStatus() == Status.IN_PROGRESS) {    setExchangeStatus(Status.SUCCESS);  }  if (callback == null) {    Log.w(TAG,"No callback provided to exchange.");    return;  }  if (getExchangeStatus() == Status.SUCCESS) {    callback.success(this);    return;  } else {    callback.failure(this,mErrorMessage);    return;  }}  }
class C{  protected AnnotableN4MemberDeclarationImpl(){  super();}  }
class C{  public static void shuffle(Object[] a,int lo,int hi){  if (a == null)   throw new NullPointerException("argument array is null");  if (lo < 0 || lo > hi || hi >= a.length) {    throw new IndexOutOfBoundsException("Illegal subarray range");  }  for (int i=lo; i <= hi; i++) {    int r=i + uniform(hi - i + 1);    Object temp=a[i];    a[i]=a[r];    a[r]=temp;  }}  }
class C{  public static TableType fromTableName(String tableName){  for (  TableType type : TableType.values()) {    if (type.getTableName().equals(tableName)) {      return type;    }  }  throw new SystemException(new IllegalArgumentException("Unknown table name: " + tableName));}  }
class C{  @Override protected void onPause(){  super.onPause();  Log.d(TAG,"onPause() - another activity is taking focus (this activity " + "is about to be \"paused\")");}  }
class C{  protected void updateLocalClock(){  if (localClockThread != null) {synchronized (localClockLock) {      localClockLock.notifyAll();    }  }}  }
class C{  public boolean existsLocally(){  if (this.op == OP_NULL) {    return !Token.isRemoved(getOriginalValue());  } else {    return this.op > OP_D_DESTROY;  }}  }
class C{  public void destroy(){  mDestroyed=true;  mHandler.removeCallbacksAndMessages(null);  if (mService != null) {    try {      mService.listenTo(null,mCallback);      mContext.unbindService(mConnection);    } catch (    RemoteException e) {    }  }}  }
class C{  public static char convertToChar(String string,int start,int end){  return (decode(string.substring(start,end)).charAt(0));}  }
class C{  private static void plotDataset(ArrayList<DataSet> DataSetList){  XYSeriesCollection c=new XYSeriesCollection();  int dscounter=1;  for (  DataSet ds : DataSetList) {    INDArray features=ds.getFeatures();    INDArray outputs=ds.getLabels();    int nRows=features.rows();    XYSeries series=new XYSeries("S" + dscounter);    for (int i=0; i < nRows; i++) {      series.add(features.getDouble(i),outputs.getDouble(i));    }    c.addSeries(series);  }  String title="title";  String xAxisLabel="xAxisLabel";  String yAxisLabel="yAxisLabel";  PlotOrientation orientation=PlotOrientation.VERTICAL;  boolean legend=false;  boolean tooltips=false;  boolean urls=false;  JFreeChart chart=ChartFactory.createScatterPlot(title,xAxisLabel,yAxisLabel,c,orientation,legend,tooltips,urls);  JPanel panel=new ChartPanel(chart);  JFrame f=new JFrame();  f.add(panel);  f.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);  f.pack();  f.setTitle("Training Data");  f.setVisible(true);}  }
class C{  public void visitAttribute(Attribute attr){  if (cv != null) {    cv.visitAttribute(attr);  }}  }
class C{  public void createPictScenario04() throws Exception {  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-02-28 00:00:00"));  String supplierAdminId="Pict04Supplier";  VOOrganization supplier=orgSetup.createOrganization(basicSetup.getPlatformOperatorUserKey(),supplierAdminId,"Pict04SupplierOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_DE,OrganizationRoleType.TECHNOLOGY_PROVIDER,OrganizationRoleType.SUPPLIER);  VOUser supplierAdmin=orgSetup.getUser(supplierAdminId,true);  paymentSetup.createPaymentForSupplier(basicSetup.getPlatformOperatorUserKey(),supplierAdmin.getKey(),supplier);  setCutOffDay(supplierAdmin.getKey(),7);  String customerAdminId="Pict04DiscountedCustomer";  VOOrganization customer=orgSetup.registerCustomer("Pict04DiscountedCustomerOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_UK,customerAdminId,supplierMarketplace.getMarketplaceId(),supplier.getOrganizationId());  VOUser customerAdmin=orgSetup.getUser(customerAdminId,true);  orgSetup.updateCustomerDiscount(customer,new BigDecimal("10.00"),DateTimeHandling.calculateMillis("2013-03-04 00:00:00"),DateTimeHandling.calculateMillis("2013-03-16 23:59:59"));  orgSetup.saveAllVats(supplierAdmin.getKey(),VOVatRateFactory.newVOVatRate(new BigDecimal("13.00")),Arrays.asList(VOVatRateFactory.newVOCountryVatRate(new BigDecimal("20.00"),TestOrganizationSetup.ORGANIZATION_DOMICILE_UK),VOVatRateFactory.newVOCountryVatRate(new BigDecimal("19.00"),TestOrganizationSetup.ORGANIZATION_DOMICILE_DE)),Arrays.asList(VOVatRateFactory.newVOOrganizationVatRate(new BigDecimal("17.00"),customer)));  orgSetup.createMarketingPermission(basicSetup.getSupplierAdminKey(),supplier.getOrganizationId(),technicalServiceAsync);  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(supplierAdmin.getKey(),"PICT_TEST_04",TestService.EXAMPLE_ASYNC,TestPriceModel.EXAMPLE_PICT04_PERUNIT_DAY,technicalServiceAsync,supplierMarketplace);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"GUEST");  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("PICT_TEST_04",serviceDetails,customerAdmin,role);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-01 00:00:00"));  subDetails=subscrSetup.completeAsyncSubscription(basicSetup.getSupplierAdminKey(),customerAdmin,subDetails);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-05 00:00:00"));  subDetails=subscrSetup.modifyUserRole(subDetails.getUsageLicenses().get(0),VOServiceFactory.getRole(serviceDetails,"USER"),subDetails.getSubscriptionId());  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-03-05 12:00:00"),"PERIOD",DateTimeHandling.daysToMillis(100) + "");  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-06 00:00:00"));  subDetails=subscrSetup.completeAsyncModifySubscription(basicSetup.getSupplierAdminKey(),customerAdmin,subDetails);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-07 06:00:00"));  VOPriceModel newSubPriceModel=VOPriceModelFactory.modifyPriceModel(subDetails.getPriceModel(),PriceModelType.PER_UNIT,PricingPeriod.DAY,"EUR",new BigDecimal("0.00"),new BigDecimal("7.00"),new BigDecimal("8.00"),4);  subscrSetup.savePriceModelForSubscription(supplierAdmin.getKey(),subDetails,newSubPriceModel,customer);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-07 12:00:00"));  paymentSetup.deleteCustomerPaymentTypes(customer);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-07 18:00:00"));  paymentSetup.reassignCustomerPaymentTypes(customer);  subDetails=subscrSetup.getSubscriptionDetails(customerAdmin.getKey(),subDetails.getSubscriptionId());  container.login(basicSetup.getSupplierAdminKey(),ROLE_SERVICE_MANAGER,ROLE_TECHNOLOGY_MANAGER);  subscrSetup.recordEventForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-03-09 12:00:00"),"FILE_DOWNLOAD",15);  subscrSetup.recordEventForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-03-09 18:00:00"),"FILE_UPLOAD",3);  VOServiceDetails freeService=serviceSetup.createPublishAndActivateMarketableService(supplierAdmin.getKey(),"PICT04_FREE_SERVICE",TestService.EXAMPLE_ASYNC,TestPriceModel.FREE,technicalServiceAsync,supplierMarketplace);  serviceSetup.registerCompatibleServices(supplierAdmin.getKey(),serviceDetails,freeService);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-10 00:00:00"));  VOSubscriptionDetails upgradedSubDetails=subscrSetup.upgradeSubscription(subDetails,freeService);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-11 00:00:00"));  upgradedSubDetails=subscrSetup.completeAsyncUpgradeSubscription(basicSetup.getSupplierAdminKey(),customerAdmin,upgradedSubDetails);  upgradedSubDetails=subscrSetup.modifyParameterForSubscription(upgradedSubDetails,DateTimeHandling.calculateMillis("2013-03-11 12:00:00"),"PERIOD",DateTimeHandling.daysToMillis(110) + "");  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-12 00:00:00"));  upgradedSubDetails=subscrSetup.completeAsyncModifySubscription(basicSetup.getSupplierAdminKey(),customerAdmin,upgradedSubDetails);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-13 00:00:00"));  VOSubscriptionDetails upgradedSubDetailsOld=upgradedSubDetails;  upgradedSubDetails.setSubscriptionId("PICT_TEST_04" + "_SubID2");  upgradedSubDetails=subscrSetup.modifySubscription(upgradedSubDetails,null);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-14 00:00:00"));  upgradedSubDetails=subscrSetup.completeAsyncModifySubscription(basicSetup.getSupplierAdminKey(),customerAdmin,upgradedSubDetailsOld);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-15 12:00:00"));  upgradedSubDetails=subscrSetup.revokeUser(customerAdmin,upgradedSubDetails.getSubscriptionId());  VOServiceDetails proRataService=serviceSetup.createPublishAndActivateMarketableService(supplierAdmin.getKey(),"PICT04_PRORATA_SERVICE",TestService.EXAMPLE_ASYNC,TestPriceModel.EXAMPLE_PRORATA_MONTH_ROLES,technicalServiceAsync,supplierMarketplace);  serviceSetup.registerCompatibleServices(supplierAdmin.getKey(),freeService,proRataService);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-16 00:00:00"));  VOSubscriptionDetails upgradedSubDetails2=subscrSetup.upgradeSubscription(upgradedSubDetails,proRataService);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-17 00:00:00"));  upgradedSubDetails2=subscrSetup.completeAsyncUpgradeSubscription(basicSetup.getSupplierAdminKey(),customerAdmin,upgradedSubDetails2);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-18 12:00:00"));  upgradedSubDetails2=subscrSetup.addUser(customerAdmin,VOServiceFactory.getRole(serviceDetails,"USER"),upgradedSubDetails2.getSubscriptionId());  upgradedSubDetails2=subscrSetup.modifyParameterForSubscription(upgradedSubDetails2,DateTimeHandling.calculateMillis("2013-03-23 00:00:00"),"PERIOD",DateTimeHandling.daysToMillis(90) + "");  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-24 00:00:00"));  upgradedSubDetails2=subscrSetup.completeAsyncModifySubscription(basicSetup.getSupplierAdminKey(),customerAdmin,upgradedSubDetails2);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-28 12:00:00"));  upgradedSubDetails2=subscrSetup.modifyUserRole(upgradedSubDetails2.getUsageLicenses().get(0),VOServiceFactory.getRole(proRataService,"ADMIN"),upgradedSubDetails2.getSubscriptionId());  resetCutOffDay(supplierAdmin.getKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_04",subDetails);  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_04",upgradedSubDetails);  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_04",upgradedSubDetails2);  BillingIntegrationTestBase.updateCustomerListForTests("PICT_TEST_04",customer);}  }
class C{  @Override public final char readChar() throws IOException {  dis.readFully(work,0,2);  return (char)((work[1] & 0xff) << 8 | (work[0] & 0xff));}  }
class C{  private void showSystemMenu(){  Insets insets=frame.getInsets();  if (!frame.isIcon()) {    systemPopupMenu.show(frame,insets.left,getY() + getHeight());  } else {    systemPopupMenu.show(menuButton,getX() - insets.left - insets.right,getY() - systemPopupMenu.getPreferredSize().height - insets.bottom- insets.top);  }}  }
class C{  public boolean understandsProperty(String propertyToTest){  return resolverSpi.understandsProperty(propertyToTest);}  }
class C{  public SearchMatch(IJavaElement element,int accuracy,int offset,int length,SearchParticipant participant,IResource resource){  this.element=element;  this.offset=offset;  this.length=length;  this.accuracy=accuracy & A_INACCURATE;  if (accuracy > A_INACCURATE) {    int genericFlavors=accuracy & ALL_GENERIC_FLAVORS;    if (genericFlavors > 0) {      this.rule&=~ALL_GENERIC_FLAVORS;    }    this.rule|=accuracy & ~A_INACCURATE;  }  this.participant=participant;  this.resource=resource;}  }
class C{  protected BoolLiteralImpl(){  super();}  }
class C{  public static boolean isRoutable(String ipStr){  return isRoutable(toIP(ipStr));}  }
class C{  public void importData(final File theFile){  try {    CSVParser theParser=new CSVParser(new FileInputStream(theFile),"","","#");    String[][] values=theParser.getAllValues();    String[] line;    double[] vector;    int dimension=values[0].length;    init(dimension);    for (int i=0; i < values.length; i++) {      line=values[i];      vector=new double[values[0].length];      for (int j=0; j < line.length; j++) {        vector[j]=Double.parseDouble(line[j]);      }      addDatapoint(new DataPointColored(vector));    }  } catch (  IOException e) {    throw new RuntimeException(e);  }  projectionMethod.init();  projectionMethod.project();  fireProjectorDataChanged();}  }
class C{  public void flush(){}  }
class C{  public RecentFilesHandlerWithCommandline(String propsFile,M menu){  super(propsFile,menu);}  }
class C{  public FlipHorizontalAnimation(View view){  this.view=view;  degrees=360;  pivot=PIVOT_CENTER;  interpolator=new AccelerateDecelerateInterpolator();  duration=DURATION_LONG;  listener=null;}  }
class C{  public static void loadMimeMappings(){  final String[] CONTENT_TYPES=new String[]{"application/atom+xml","application/rss+xml","application/json"};  final String CONTENT_HANDLER=";; x-java-content-handler" + "=com.google.gdata.data.media.GDataContentHandler";  CommandMap commandMap=CommandMap.getDefaultCommandMap();  if (commandMap instanceof MailcapCommandMap) {    MailcapCommandMap mailcapMap=(MailcapCommandMap)commandMap;    for (int i=0; i < CONTENT_TYPES.length; i++) {      CommandInfo[] comm=mailcapMap.getAllCommands(CONTENT_TYPES[i]);      if (comm == null || comm.length == 0) {        mailcapMap.addMailcap(CONTENT_TYPES[i] + CONTENT_HANDLER);      }    }  } else {    LOGGER.warning("Unable to find MailcapCommandMap, skipping dynamic mailcap config.");  }}  }
class C{  public boolean hasMIMEType(String mimeType){  if (mimeType == null)   return false;  String type=mimeType;  if (mimeType.indexOf(';') > 0) {    type=mimeType.substring(0,mimeType.indexOf(';'));  }  for (  String mt : this.mimeTypes) {    if (mt.equalsIgnoreCase(mimeType)) {      return true;    }    if (mimeType != type && mt.equalsIgnoreCase(type)) {      return true;    }  }  return false;}  }
class C{  @Override public void paint(Graphics g){  super.paint(g);  if (!initialized) {    initialized=true;    updateLayout();    if (objectViewerSplitPane != null) {      objectViewerSplitPane.setDividerLocation(0.9);    }  }}  }
class C{  public boolean isExtended(){  return false;}  }
class C{  @Override public boolean hasChildren(){  return false;}  }
class C{  public void flip(int i){  bits[i / 32]^=1 << (i & 0x1F);}  }
class C{  @Override protected LR1State createStartState(){  return new LR1State(ArrayTools.toHashSet(new LR1Item(grammar.getStartProduction(),0,grammarInfo.getTerminalSet(Placeholder))));}  }
class C{  public Asteroids(long seed){  super(seed);}  }
class C{  public static ResourceEnumerationTaskState createResourceEnumerationTask(String resourcePoolLink,String parentComputeLink,String adapterServiceLink,boolean isMock,List<String> tenantLinks){  ResourceEnumerationTaskState enumerationTaskState=new ResourceEnumerationTaskState();  enumerationTaskState.parentComputeLink=parentComputeLink;  enumerationTaskState.enumerationAction=EnumerationAction.START;  enumerationTaskState.adapterManagementReference=UriUtils.buildUri(adapterServiceLink);  enumerationTaskState.resourcePoolLink=resourcePoolLink;  if (isMock) {    enumerationTaskState.options=EnumSet.of(TaskOption.IS_MOCK);  }  if (tenantLinks != null) {    enumerationTaskState.tenantLinks=tenantLinks;  }  return enumerationTaskState;}  }
class C{  void addNode(Node newNode){  if (nodes != null) {    nodes.add(newNode);  }}  }
class C{  public static void close(){  try {    in.close();  } catch (  IOException e) {    e.printStackTrace();    throw new RuntimeException("Could not close BinaryStdIn");  }}  }
class C{  @Override public boolean checkBounds(final IScope scope,final Object index,final boolean forAdding){  return true;}  }
class C{  private boolean checkIfVolumeSizeExceedingPoolSize(CIMArgument[] inArgs,CIMArgument[] outArgs){  if (getVolumeSize(inArgs) > getVolumeSize(outArgs)) {    return true;  }  return false;}  }
class C{  private void clear(int mask){  attributes&=~mask;}  }
class C{  public JSONWriter object() throws JSONException {  if (this.mode == 'i') {    this.mode='o';  }  if (this.mode == 'o' || this.mode == 'a') {    this.append("{");    this.push(new JSONObject());    this.comma=false;    return this;  }  throw new JSONException("Misplaced object.");}  }
class C{  protected CheckImpl(){  super();}  }
class C{  private static void resolveTypeQualifierDefaults(AnnotationValue value,ElementType defaultFor,LinkedList<AnnotationValue> result){  try {    XClass c=Global.getAnalysisCache().getClassAnalysis(XClass.class,value.getAnnotationClass());    AnnotationValue defaultAnnotation=c.getAnnotation(typeQualifierDefault);    if (defaultAnnotation == null) {      return;    }    for (    Object o : (Object[])defaultAnnotation.getValue("value")) {      if (o instanceof EnumValue) {        EnumValue e=(EnumValue)o;        if (e.desc.equals(elementTypeDescriptor) && e.value.equals(defaultFor.name())) {          for (          ClassDescriptor d : c.getAnnotationDescriptors()) {            if (!d.equals(typeQualifierDefault)) {              resolveTypeQualifierNicknames(c.getAnnotation(d),result,new LinkedList<ClassDescriptor>());            }          }          break;        }      }    }  } catch (  MissingClassException e) {    logMissingAnnotationClass(e);  }catch (  CheckedAnalysisException e) {    AnalysisContext.logError("Error resolving " + value.getAnnotationClass(),e);  }catch (  ClassCastException e) {    AnalysisContext.logError("ClassCastException " + value.getAnnotationClass(),e);  }}  }
class C{  public static void recoverRmtElder(ArrayList grantors,ArrayList grantorVersions,ArrayList grantorSerialNumbers,ArrayList nonGrantors){synchronized (services) {    Iterator entries=services.entrySet().iterator();    while (entries.hasNext()) {      Map.Entry entry=(Map.Entry)entries.next();      String serviceName=(String)entry.getKey();      DLockService service=(DLockService)entry.getValue();      boolean foundGrantor=false;      DLockGrantor grantor=service.getGrantor();      if (grantor != null && grantor.getVersionId() != -1 && !grantor.isDestroyed()) {        foundGrantor=true;        grantors.add(serviceName);        grantorVersions.add(Long.valueOf(grantor.getVersionId()));        grantorSerialNumbers.add(Integer.valueOf(service.getSerialNumber()));      }      if (!foundGrantor) {        nonGrantors.add(serviceName);      }    }  }}  }
class C{  private static boolean isIPv4MappedAddress(byte[] addr){  if (addr.length < INADDR16SZ) {    return false;  }  if ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00)&& (addr[3] == 0x00)&& (addr[4] == 0x00)&& (addr[5] == 0x00)&& (addr[6] == 0x00)&& (addr[7] == 0x00)&& (addr[8] == 0x00)&& (addr[9] == 0x00)&& (addr[10] == (byte)0xff)&& (addr[11] == (byte)0xff)) {    return true;  }  return false;}  }
class C{  public TvShowUpdateDatasourceTask(){  super(BUNDLE.getString("update.datasource"));  tvShowList=TvShowList.getInstance();  dataSources=new ArrayList<>(TvShowModuleManager.SETTINGS.getTvShowDataSource());}  }
class C{  public void drawLegendShape(Canvas canvas,SimpleSeriesRenderer renderer,float x,float y,int seriesIndex,Paint paint){  mStep--;  canvas.drawCircle(x + SHAPE_WIDTH - mStep,y,mStep,paint);}  }
class C{  public ProgressDialog(){  setUndecorated(true);  setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);  setAlwaysOnTop(true);  setModal(true);  setResizable(false);  Dimension screen=Toolkit.getDefaultToolkit().getScreenSize();  setBounds(screen.width - 450,0,450,200);  getContentPane().setLayout(new BoxLayout(getContentPane(),BoxLayout.Y_AXIS));  Component glue=Box.createGlue();  getContentPane().add(glue);  JLabel lblImage=new JLabel("");  lblImage.setAlignmentX(Component.CENTER_ALIGNMENT);  lblImage.setHorizontalAlignment(SwingConstants.CENTER);  lblImage.setIcon(new ImageIcon(ProgressDialog.class.getResource("/tk/wurst_client/updater/resources/wurst_253x64.png")));  getContentPane().add(lblImage);{    lblProgress=new JLabel("<html>\r\n<center>\r\n<h1>Updating...</h1>");    lblProgress.setAlignmentX(Component.CENTER_ALIGNMENT);    lblProgress.setFont(new Font("Verdana",Font.PLAIN,16));    getContentPane().add(lblProgress);    lblProgress.setHorizontalAlignment(SwingConstants.CENTER);  }  Component glue_1=Box.createGlue();  getContentPane().add(glue_1);}  }
class C{  protected void work(IWorkbenchPart part,final IResource resource,final List<WorkItem> resources){  FindBugsJob runFindBugs=new StartedFromViewJob("Finding bugs in " + resource.getName() + "...",resource,resources,part);  runFindBugs.scheduleInteractive();}  }
class C{  public List<GenericEntry> retrieveAllUserAliases(String userEmail) throws AppsForYourDomainException, MalformedURLException, IOException, ServiceException {  return retrieveAllPages(new URL("https://apps-apis.google.com/a/feeds/alias/2.0/" + domain + "?userEmail="+ userEmail));}  }
class C{  public long delete(IChunkedOrderedIterator<BigdataValue> itr){  throw new UnsupportedOperationException();}  }
class C{  public String extractMessageFromJson(String json){  String message=null;  try {    JsonObject result=new JsonParser().parse(json).getAsJsonObject();    if (result.has("error")) {      JsonObject errorObject=result.getAsJsonObject("error");      JsonElement element=errorObject.get("message");      if (element == null || element.isJsonNull()) {        element=errorObject.get("code");      }      if (element != null && element.isJsonPrimitive()) {        message=element.getAsString();      }    }  } catch (  JsonParseException|IllegalStateException|UnsupportedOperationException e) {    LOG.w("Problem parsing error message: " + e.getMessage());  }  return message;}  }
class C{  @MediumTest @UiThreadTest public void testClearSelection(){  mListView.setSelection(0);  assertEquals("Set selection",0,mListView.getSelectedItemPosition());  mListView.setSelection(ListView.INVALID_POSITION);  assertEquals("Set selection",0,mListView.getSelectedItemPosition());}  }
class C{  public void introduce(){  mContext.startActivity(compile());}  }
class C{  public static DocumentEvent mergeProcessedDocumentEvents(List<DocumentEvent> documentEvents) throws BadLocationException {  if (documentEvents.size() == 0)   return null;  final ListIterator<DocumentEvent> iterator=documentEvents.listIterator(documentEvents.size());  final DocumentEvent firstEvent=iterator.previous();  final Document document=firstEvent.getDocument();  int offset=firstEvent.getOffset();  int length=firstEvent.getLength();  int textLength=firstEvent.getText() == null ? 0 : firstEvent.getText().length();  while (iterator.hasPrevious()) {    final int delta=length - textLength;    final DocumentEvent event=(DocumentEvent)iterator.previous();    final int eventOffset=event.getOffset();    final int eventLength=event.getLength();    final int eventTextLength=event.getText() == null ? 0 : event.getText().length();    if (eventOffset > offset + textLength + delta) {      length=(eventOffset - delta) - (offset + textLength) + length + eventLength;      textLength=(eventOffset - delta) + eventTextLength - offset;    } else     if (eventOffset + eventTextLength < offset) {      length=offset - (eventOffset + eventTextLength) + length + eventLength;      textLength=offset + textLength - eventOffset;      offset=eventOffset;    } else {      final int start=Math.max(0,eventOffset - offset);      final int end=Math.min(length,eventTextLength + eventOffset - offset);      length+=eventLength - (end - start);      offset=Math.min(offset,eventOffset);      final int totalDelta=delta + eventLength - eventTextLength;      textLength=length - totalDelta;    }  }  final String text=document.get(offset,textLength);  return new DocumentEvent(document,offset,length,text);}  }
class C{  public static List<ErrorLogger.ErrorObject> buildIMP_2016(@Nonnull String annotationText,@Nonnull String issuer,@Nonnull List<? extends Composition.VirtualTrack> virtualTracks,@Nonnull Composition.EditRate compositionEditRate,@Nonnull String applicationId,@Nonnull Map<UUID,IMFTrackFileMetadata> trackFileHeaderPartitionMap,@Nonnull File workingDirectory) throws IOException, ParserConfigurationException, SAXException, JAXBException, URISyntaxException {  IMFErrorLogger imfErrorLogger=new IMFErrorLoggerImpl();  int numErrors=imfErrorLogger.getNumberOfErrors();  UUID cplUUID=IMFUUIDGenerator.getInstance().generateUUID();  Composition.VirtualTrack mainImageVirtualTrack=null;  for (  Composition.VirtualTrack virtualTrack : virtualTracks) {    if (virtualTrack.getSequenceTypeEnum() == Composition.SequenceTypeEnum.MainImageSequence) {      mainImageVirtualTrack=virtualTrack;      break;    }  }  if (mainImageVirtualTrack == null) {    throw new IMFAuthoringException(String.format("Exactly 1 MainImageSequence virtual track is required to create an IMP, none present"));  }  long totalRunningTime=0L;  long totalNumberOfImageEditUnits=0L;  for (  IMFTrackFileResourceType trackResource : (List<IMFTrackFileResourceType>)mainImageVirtualTrack.getResourceList()) {    totalNumberOfImageEditUnits+=trackResource.getSourceDuration().longValue() * trackResource.getRepeatCount().longValue();  }  totalRunningTime=totalNumberOfImageEditUnits / (compositionEditRate.getNumerator() / compositionEditRate.getDenominator());  CompositionPlaylistBuilder_2016 compositionPlaylistBuilder_2016=new CompositionPlaylistBuilder_2016(cplUUID,CompositionPlaylistBuilder_2016.buildCPLUserTextType_2016(annotationText,"en"),CompositionPlaylistBuilder_2016.buildCPLUserTextType_2016(issuer,"en"),CompositionPlaylistBuilder_2016.buildCPLUserTextType_2016("Photon PackingListBuilder","en"),virtualTracks,compositionEditRate,applicationId,totalRunningTime,trackFileHeaderPartitionMap,workingDirectory);  compositionPlaylistBuilder_2016.build();  if (compositionPlaylistBuilder_2016.getErrors().stream().filter(null).count() > 0) {    throw new IMFAuthoringException(String.format("Fatal errors occurred while generating the CompositionPlaylist. Please see following error messages %s",Utilities.serializeObjectCollectionToString(imfErrorLogger.getErrors(IMFErrorLogger.IMFErrors.ErrorLevels.FATAL,numErrors,imfErrorLogger.getNumberOfErrors()))));  }  numErrors=(imfErrorLogger.getNumberOfErrors() > 0) ? imfErrorLogger.getNumberOfErrors() - 1 : 0;  File cplFile=new File(workingDirectory + File.separator + compositionPlaylistBuilder_2016.getCPLFileName());  if (!cplFile.exists()) {    throw new IMFAuthoringException(String.format("CompositionPlaylist file does not exist in the working directory %s, cannot generate the rest of the documents",workingDirectory.getAbsolutePath()));  }  byte[] cplHash=IMFUtils.generateSHA1HashAndBase64Encode(cplFile);  UUID pklUUID=IMFUUIDGenerator.getInstance().generateUUID();  PackingListBuilder packingListBuilder=new PackingListBuilder(pklUUID,IMFUtils.createXMLGregorianCalendar(),workingDirectory,imfErrorLogger);  org.smpte_ra.schemas.st2067_2_2016.PKL.UserText pklAnnotationText=PackingListBuilder.buildPKLUserTextType_2016(annotationText,"en");  org.smpte_ra.schemas.st2067_2_2016.PKL.UserText creator=PackingListBuilder.buildPKLUserTextType_2016("Photon PackingListBuilder","en");  org.smpte_ra.schemas.st2067_2_2016.PKL.UserText pklIssuer=PackingListBuilder.buildPKLUserTextType_2016(issuer,"en");  List<PackingListBuilder.PackingListBuilderAsset_2016> packingListBuilderAssets=new ArrayList<>();  PackingListBuilder.PackingListBuilderAsset_2016 cplAsset=new PackingListBuilder.PackingListBuilderAsset_2016(cplUUID,PackingListBuilder.buildPKLUserTextType_2016(annotationText,"en"),Arrays.copyOf(cplHash,cplHash.length),packingListBuilder.buildDefaultDigestMethodType(),cplFile.length(),PackingListBuilder.PKLAssetTypeEnum.TEXT_XML,PackingListBuilder.buildPKLUserTextType_2016(compositionPlaylistBuilder_2016.getCPLFileName(),"en"));  packingListBuilderAssets.add(cplAsset);  Set<Map.Entry<UUID,IMFTrackFileMetadata>> trackFileMetadataEntriesSet=trackFileHeaderPartitionMap.entrySet();  for (  Map.Entry<UUID,IMFTrackFileMetadata> entry : trackFileMetadataEntriesSet) {    PackingListBuilder.PackingListBuilderAsset_2016 asset=new PackingListBuilder.PackingListBuilderAsset_2016(entry.getKey(),PackingListBuilder.buildPKLUserTextType_2016(annotationText,"en"),Arrays.copyOf(entry.getValue().getHash(),entry.getValue().getHash().length),packingListBuilder.buildDefaultDigestMethodType(),entry.getValue().getLength(),PackingListBuilder.PKLAssetTypeEnum.APP_MXF,PackingListBuilder.buildPKLUserTextType_2016(entry.getValue().getOriginalFileName(),"en"));    packingListBuilderAssets.add(asset);  }  packingListBuilder.buildPackingList_2016(pklAnnotationText,pklIssuer,creator,packingListBuilderAssets);  if (imfErrorLogger.getErrors(IMFErrorLogger.IMFErrors.ErrorLevels.FATAL,numErrors,imfErrorLogger.getNumberOfErrors()).size() > 0) {    throw new IMFAuthoringException(String.format("Fatal errors occurred while generating the PackingList. Please see following error messages %s",Utilities.serializeObjectCollectionToString(imfErrorLogger.getErrors(IMFErrorLogger.IMFErrors.ErrorLevels.FATAL,numErrors,imfErrorLogger.getNumberOfErrors()))));  }  numErrors=(imfErrorLogger.getNumberOfErrors() > 0) ? imfErrorLogger.getNumberOfErrors() - 1 : 0;  File pklFile=new File(workingDirectory + File.separator + packingListBuilder.getPKLFileName());  if (!pklFile.exists()) {    throw new IMFAuthoringException(String.format("PackingList file does not exist in the working directory %s, cannot generate the rest of the documents",workingDirectory.getAbsolutePath()));  }  UUID assetMapUUID=IMFUUIDGenerator.getInstance().generateUUID();  List<AssetMapBuilder.Asset> assetMapAssets=new ArrayList<>();  for (  PackingListBuilder.PackingListBuilderAsset_2016 pklAsset : packingListBuilderAssets) {    AssetMapBuilder.Chunk chunk=new AssetMapBuilder.Chunk(pklAsset.getOriginalFileName().getValue(),pklAsset.getSize().longValue());    List<AssetMapBuilder.Chunk> chunkList=new ArrayList<>();    chunkList.add(chunk);    AssetMapBuilder.Asset amAsset=new AssetMapBuilder.Asset(UUIDHelper.fromUUIDAsURNStringToUUID(pklAsset.getUUID()),AssetMapBuilder.buildAssetMapUserTextType_2007(pklAsset.getAnnotationText().getValue(),"en"),false,chunkList);    assetMapAssets.add(amAsset);  }  List<AssetMapBuilder.Chunk> chunkList=new ArrayList<>();  AssetMapBuilder.Chunk chunk=new AssetMapBuilder.Chunk(pklFile.getName(),pklFile.length());  chunkList.add(chunk);  AssetMapBuilder.Asset amAsset=new AssetMapBuilder.Asset(pklUUID,AssetMapBuilder.buildAssetMapUserTextType_2007(pklAnnotationText.getValue(),"en"),true,chunkList);  assetMapAssets.add(amAsset);  AssetMapBuilder assetMapBuilder=new AssetMapBuilder(assetMapUUID,AssetMapBuilder.buildAssetMapUserTextType_2007(annotationText,"en"),AssetMapBuilder.buildAssetMapUserTextType_2007("Photon AssetMapBuilder","en"),IMFUtils.createXMLGregorianCalendar(),AssetMapBuilder.buildAssetMapUserTextType_2007(issuer,"en"),assetMapAssets,workingDirectory,imfErrorLogger);  assetMapBuilder.build();  if (imfErrorLogger.getErrors(IMFErrorLogger.IMFErrors.ErrorLevels.FATAL,numErrors,imfErrorLogger.getNumberOfErrors()).size() > 0) {    throw new IMFAuthoringException(String.format("Fatal errors occurred while generating the AssetMap. Please see following error messages %s",Utilities.serializeObjectCollectionToString(imfErrorLogger.getErrors(IMFErrorLogger.IMFErrors.ErrorLevels.FATAL,numErrors,imfErrorLogger.getNumberOfErrors()))));  }  File assetMapFile=new File(workingDirectory + File.separator + assetMapBuilder.getAssetMapFileName());  if (!assetMapFile.exists()) {    throw new IMFAuthoringException(String.format("AssetMap file does not exist in the working directory %s",workingDirectory.getAbsolutePath()));  }  return imfErrorLogger.getErrors();}  }
class C{  public File tofile(byte[] buf,String[] generalTitle){  byte[] bytes=buf;  String path=System.getProperty("java.io.tmpdir");  if (!(path.endsWith("/") || path.endsWith("\\")))   path=path + System.getProperty("file.separator");  String prefix=StringUtils.makePrefix(generalTitle[0]);  if (log.isLoggable(Level.FINE)) {    log.log(Level.FINE,"Path=" + path + " Prefix="+ prefix);  }  File file=new File(path + prefix + ".pdf");  try {    if (file.exists())     file.delete();  } catch (  Exception e) {    log.log(Level.SEVERE,"file",e);    return null;  }  FileOutputStream fos;  try {    fos=new FileOutputStream(file);    fos.write(bytes);    fos.flush();    fos.close();  } catch (  FileNotFoundException e) {    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  }  return file;}  }
class C{  public void resetUpdates(){  updates=new LinkedList<>();}  }
class C{  public static <A>OptionalTValue<A> fromAnyM(final AnyMValue<A> anyM){  return of(anyM.map(null));}  }
class C{  public SimpleQueryStringBuilder queryName(String name){  this.queryName=name;  return this;}  }
class C{  public void addRow(double value,double prob){  addRow(ValueFactory.create(value),prob);}  }
class C{  private void handleAsynchronousError(Exception ex,AsyncResponse asyncResponse){  Status status;  Message msg;  if (ex instanceof EJBException && ex.getCause() instanceof EntityNotFoundException) {    status=Status.NOT_FOUND;    msg=ErrorMessages.NOT_FOUND_ERR;  } else   if (ex instanceof EJBException && ex.getCause() instanceof OptimisticLockException) {    status=Status.CONFLICT;    msg=ErrorMessages.CONFLICT_ERR;  } else {    status=Status.INTERNAL_SERVER_ERROR;    msg=new Message(ex.getClass().getSimpleName(),ex.getMessage());  }  Response resp=Response.status(status).entity(msg).build();  asyncResponse.resume(resp);}  }
class C{  public boolean isPath(){  return false;}  }
class C{  @Override public int hashCode(){  int result;  result=minLatitude.hashCode();  result=29 * result + maxLatitude.hashCode();  result=29 * result + minLongitude.hashCode();  result=29 * result + maxLongitude.hashCode();  return result;}  }
class C{  public void close() throws IOException {  zipOS.finish();}  }
class C{  public SerialNode(int address,int type){  setNodeAddress(address);  setNodeType(type);  for (int i=0; i < MAXSENSORS + 1; i++) {    sensorArray[i]=null;    sensorLastSetting[i]=Sensor.UNKNOWN;    sensorTempSetting[i]=Sensor.UNKNOWN;  }  for (int i=0; i < 256; i++) {    outputArray[i]=0;    outputByteChanged[i]=false;  }  setMustSend();  hasActiveSensors=false;  SerialTrafficController.instance().registerNode(this);  if (log.isDebugEnabled()) {    log.debug("new serial node " + this);  }}  }
class C{  public void destroy(){  Display.impl.browserDestroy(internal);}  }
class C{  protected WeblogicEjbJarXmlIo(){  super(WeblogicEjbJarXmlType.getInstance());}  }
class C{  protected int writeObject(STWriter out,InstanceScope scope,Object o,String[] options){  int n=0;  if (o == null) {    if (options != null && options[Option.NULL.ordinal()] != null) {      o=options[Option.NULL.ordinal()];    } else     return 0;  }  if (o instanceof ST) {    scope=new InstanceScope(scope,(ST)o);    if (options != null && options[Option.WRAP.ordinal()] != null) {      try {        out.writeWrap(options[Option.WRAP.ordinal()]);      } catch (      IOException ioe) {        errMgr.IOError(scope.st,ErrorType.WRITE_IO_ERROR,ioe);      }    }    n=exec(out,scope);  } else {    o=convertAnythingIteratableToIterator(scope,o);    try {      if (o instanceof Iterator)       n=writeIterator(out,scope,o,options); else       n=writePOJO(out,scope,o,options);    } catch (    IOException ioe) {      errMgr.IOError(scope.st,ErrorType.WRITE_IO_ERROR,ioe,o);    }  }  return n;}  }
class C{  public NATURAL_LEFT_JOIN NATURAL_LEFT_JOIN(String tableToJoin){  return new NATURAL_LEFT_JOIN(this,tableToJoin);}  }
class C{  public ChangeableHighlightPainter(Paint paint,boolean rounded,float alpha){  setPaint(paint);  setRoundedEdges(rounded);  setAlpha(alpha);}  }
class C{  public static double[] convertFloatsToDoubles(float[] input){  if (input == null)   return null;  double[] output=new double[input.length];  for (int i=0; i < input.length; ++i) {    output[i]=(double)input[i];  }  return output;}  }
class C{  public void printSpaces(char[] text,boolean opt) throws IOException {  if (prettyPrinter.getFormat()) {    if (!opt) {      printCharacter(' ');    }  } else {    printCharacters(text);  }}  }
class C{  public boolean cgModifyRollbackStep(URI rpSystemId,String token) throws WorkflowException {  WorkflowStepCompleter.stepSucceded(token);  return true;}  }
class C{  public void testSameNodeInFromToSetCheapest(boolean fastRouter){  Fixture f=new Fixture();  TestTimeCost tc=new TestTimeCost();  tc.setData(Id.create(1,Link.class),2.0,2.0);  tc.setData(Id.create(2,Link.class),1.0,1.0);  tc.setData(Id.create(3,Link.class),3.0,3.0);  tc.setData(Id.create(4,Link.class),2.0,2.0);  tc.setData(Id.create(5,Link.class),1.0,1.0);  tc.setData(Id.create(6,Link.class),3.0,3.0);  tc.setData(Id.create(7,Link.class),4.0,4.0);  MultiNodeDijkstra dijkstra=makeMultiNodeDikstra(f.network,tc,tc,fastRouter);  List<InitialNode> fromNodes=new ArrayList<InitialNode>();  List<InitialNode> toNodes=new ArrayList<InitialNode>();  fromNodes.add(new InitialNode(f.network.getNodes().get(Id.create(2,Node.class)),2.0,2.0));  fromNodes.add(new InitialNode(f.network.getNodes().get(Id.create(4,Node.class)),1.0,1.0));  toNodes.add(new InitialNode(f.network.getNodes().get(Id.create(4,Node.class)),1.0,1.0));  toNodes.add(new InitialNode(f.network.getNodes().get(Id.create(6,Node.class)),3.0,3.0));  Node fromNode=dijkstra.createImaginaryNode(fromNodes);  Node toNode=dijkstra.createImaginaryNode(toNodes);  Path p=createPath(dijkstra,fromNode,toNode);  Assert.assertNotNull("no path found!",p);  Assert.assertEquals(0,p.links.size());  Assert.assertEquals(1,p.nodes.size());  Assert.assertEquals("4",p.nodes.get(0).getId().toString());}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case ImPackage.DELEGATING_METHOD_DECLARATION__DELEGATION_BASE_TYPE:    if (resolve)     return getDelegationBaseType();  return basicGetDelegationBaseType();case ImPackage.DELEGATING_METHOD_DECLARATION__DELEGATION_SUPER_CLASS_STEPS:return getDelegationSuperClassSteps();case ImPackage.DELEGATING_METHOD_DECLARATION__DELEGATION_TARGET:if (resolve) return getDelegationTarget();return basicGetDelegationTarget();case ImPackage.DELEGATING_METHOD_DECLARATION__DELEGATION_TARGET_IS_ABSTRACT:return isDelegationTargetIsAbstract();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public List<VirtualArrayRestRep> findByConnectedHost(URI hostId){  return search().byHost(hostId).run();}  }
class C{  public static <K,V>boolean putMapNotNullKey(Map<K,V> map,K key,V value){  if (map == null || key == null) {    return false;  }  map.put(key,value);  return true;}  }
class C{  public WebPermission(String name,boolean authenticated){  this(name,authenticated,null,new String[]{});}  }
class C{  public void unparsedEntityDecl(StylesheetHandler handler,String name,String publicId,String systemId,String notationName){}  }
class C{  public TestLogyyyymm selectByPrimaryKey(Integer id){  if (id == null)   return null;  this.model.id=id;  this.model.load();  if (this.model.entity()) {    return this.model;  } else {    return null;  }}  }
class C{  public Element createElementNS(String namespaceURI,String qualifiedName) throws DOMException {  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  return null;}  }
class C{  public void addDescription(String description){  String desc=getDescription();  if (desc == null)   setDescription(description); else   setDescription(desc + " | " + description);}  }
class C{  private String validateEmail(InternetAddress ia){  if (ia == null)   return "NoEmail"; else   return ia.getAddress();}  }
class C{  public InfoHandler(final CoreContainer coreContainer){  this.coreContainer=coreContainer;  systemInfoHandler=new SystemInfoHandler(coreContainer);  loggingHandler=new LoggingHandler(coreContainer);}  }
class C{  private final int compare(Comparable item,RedBlackNode t){  if (t == header)   return 1; else   return item.compareTo(t.element);}  }
class C{  private void callBindOrRebind(NameComponent[] pth,Name name,java.lang.Object obj,boolean rebind) throws NamingException {  if (_nc == null)   throw new ConfigurationException("Context does not have a corresponding NamingContext");  try {    obj=NamingManager.getStateToBind(obj,name,this,_env);    if (obj instanceof CNCtx) {      obj=((CNCtx)obj)._nc;    }    if (obj instanceof org.omg.CosNaming.NamingContext) {      NamingContext nobj=NamingContextHelper.narrow((org.omg.CORBA.Object)obj);      if (rebind)       _nc.rebind_context(pth,nobj); else       _nc.bind_context(pth,nobj);    } else     if (obj instanceof org.omg.CORBA.Object) {      if (rebind)       _nc.rebind(pth,(org.omg.CORBA.Object)obj); else       _nc.bind(pth,(org.omg.CORBA.Object)obj);    } else     throw new IllegalArgumentException("Only instances of org.omg.CORBA.Object can be bound");  } catch (  BAD_PARAM e) {    NamingException ne=new NotContextException(name.toString());    ne.setRootCause(e);    throw ne;  }catch (  Exception e) {    throw ExceptionMapper.mapException(e,this,pth);  }}  }
class C{  void add(S3TimeData timeData){  assert timeData != null;synchronized (mux) {    map.put(timeData.getKey(),timeData);    mux.notifyAll();  }}  }
class C{  protected final static boolean isListed(final String hostlow,final String path,final Map<String,Set<Pattern>> blacklistMapMatched,final Map<String,Set<Pattern>> blacklistMapNotMatched){  long beginTime=0;  if (log.isFine()) {    beginTime=System.nanoTime();  }  final String p=(!path.isEmpty() && path.charAt(0) == '/') ? path.substring(1) : path;  Pattern[] app;  boolean matched=false;  Pattern pp;  if (!matched && blacklistMapMatched.get(hostlow) != null) {    app=blacklistMapMatched.get(hostlow).toArray(new Pattern[0]);    for (int i=app.length - 1; !matched && i > -1; i--) {      pp=app[i];      matched|=pp.matcher(p).matches();    }  }  int index=0;  while (!matched && (index=hostlow.indexOf('.',index + 1)) != -1) {    if (blacklistMapMatched.get(hostlow.substring(0,index + 1) + "*") != null) {      app=blacklistMapMatched.get(hostlow.substring(0,index + 1) + "*").toArray(new Pattern[0]);      for (int i=app.length - 1; !matched && i > -1; i--) {        pp=app[i];        matched|=pp.matcher(p).matches();      }    }    if (blacklistMapMatched.get(hostlow.substring(0,index)) != null) {      app=blacklistMapMatched.get(hostlow.substring(0,index)).toArray(new Pattern[0]);      for (int i=app.length - 1; !matched && i > -1; i--) {        pp=app[i];        matched|=pp.matcher(p).matches();      }    }  }  index=hostlow.length();  while (!matched && (index=hostlow.lastIndexOf('.',index - 1)) != -1) {    if (blacklistMapMatched.get("*" + hostlow.substring(index,hostlow.length())) != null) {      app=blacklistMapMatched.get("*" + hostlow.substring(index,hostlow.length())).toArray(new Pattern[0]);      for (int i=app.length - 1; !matched && i > -1; i--) {        pp=app[i];        matched|=pp.matcher(p).matches();      }    }    if (blacklistMapMatched.get(hostlow.substring(index + 1,hostlow.length())) != null) {      app=blacklistMapMatched.get(hostlow.substring(index + 1,hostlow.length())).toArray(new Pattern[0]);      for (int i=app.length - 1; !matched && i > -1; i--) {        pp=app[i];        matched|=pp.matcher(p).matches();      }    }  }  if (!matched) {    String key;    for (    final Entry<String,Set<Pattern>> entry : blacklistMapNotMatched.entrySet()) {      key=entry.getKey();      try {        if (Pattern.matches(key,hostlow)) {          app=entry.getValue().toArray(new Pattern[0]);          for (          final Pattern ap : app) {            if (ap.matcher(p).matches()) {              return true;            }          }        }      } catch (      final PatternSyntaxException e) {      }    }  }  if (log.isFine()) {    long timeInSeconds=(System.nanoTime() - beginTime) / 1000000000;    if (timeInSeconds > 10) {      log.fine("Long processing : " + timeInSeconds + " seconds. URL :  "+ hostlow+ path);    }  }  return matched;}  }
class C{  public DVector(double[] v){  if (v.length == 0)   vector=new double[defaultCapacity]; else {    vector=v;    size=vector.length;  }}  }
class C{  public float readFloat(){  return Float.intBitsToFloat(readInt());}  }
class C{  public int findFirstVisibleItemPosition(){  final View child=findOneVisibleChild(0,layoutManager.getChildCount(),false,true);  return child == null ? NO_POSITION : recyclerView.getChildAdapterPosition(child);}  }
class C{  public static double min(double[] values){  double min=Double.NaN;  for (  double value : values) {    min=Util.min(min,value);  }  return min;}  }
class C{  public void drawItem(Graphics2D g2,XYItemRendererState state,Rectangle2D dataArea,PlotRenderingInfo info,XYPlot plot,ValueAxis domainAxis,ValueAxis rangeAxis,XYDataset dataset,int series,int item,CrosshairState crosshairState,int pass){  double x=dataset.getXValue(series,item);  double y=dataset.getYValue(series,item);  double z=0.0;  if (dataset instanceof XYZDataset) {    z=((XYZDataset)dataset).getZValue(series,item);  }  Paint p=this.paintScale.getPaint(z);  double xx0=domainAxis.valueToJava2D(x + this.xOffset,dataArea,plot.getDomainAxisEdge());  double yy0=rangeAxis.valueToJava2D(y + this.yOffset,dataArea,plot.getRangeAxisEdge());  double xx1=domainAxis.valueToJava2D(x + this.blockWidth + this.xOffset,dataArea,plot.getDomainAxisEdge());  double yy1=rangeAxis.valueToJava2D(y + this.blockHeight + this.yOffset,dataArea,plot.getRangeAxisEdge());  Rectangle2D block;  PlotOrientation orientation=plot.getOrientation();  if (orientation.equals(PlotOrientation.HORIZONTAL)) {    block=new Rectangle2D.Double(Math.min(yy0,yy1),Math.min(xx0,xx1),Math.abs(yy1 - yy0),Math.abs(xx0 - xx1));  } else {    block=new Rectangle2D.Double(Math.min(xx0,xx1),Math.min(yy0,yy1),Math.abs(xx1 - xx0),Math.abs(yy1 - yy0));  }  g2.setPaint(p);  g2.fill(block);  g2.setColor(gridLineColor);  g2.setStroke(new BasicStroke(1.0f));  g2.draw(block);  if (x == realX && y == realY) {    if (z == 0) {      g2.setColor(Color.black);    } else {      g2.setColor(Color.white);    }    int xx=(int)block.getMinX() + 1;    int yy=(int)block.getMinY() + 1;    g2.drawLine(xx,yy,xx + (int)block.getWidth(),yy + (int)block.getHeight());    g2.drawLine(xx,yy + (int)block.getHeight(),xx + (int)block.getWidth(),yy);  }  EntityCollection entities=state.getEntityCollection();  if (entities != null) {    addEntity(entities,block,dataset,series,item,0.0,0.0);  }}  }
class C{  public double compute(double... dataset){  return computeInPlace(dataset.clone());}  }
class C{  public void testFilterPrivateMode() throws Exception {  processFilterTest(DeploymentMode.PRIVATE);}  }
class C{  public static long generate(long crc,long value){  crc=next(crc,(byte)(value >> 56));  crc=next(crc,(byte)(value >> 48));  crc=next(crc,(byte)(value >> 40));  crc=next(crc,(byte)(value >> 32));  crc=next(crc,(byte)(value >> 24));  crc=next(crc,(byte)(value >> 16));  crc=next(crc,(byte)(value >> 8));  crc=next(crc,(byte)(value >> 0));  return crc;}  }
class C{  public synchronized void shutdown(){  log.debug("Cleaning up freeConnections. Count = " + freeConnections.size());  Iterator iter=freeConnections.iterator();  while (iter.hasNext()) {    final HttpConnection conn=(HttpConnection)iter.next();    iter.remove();    conn.close();  }  shutdownCheckedOutConnections(this);  log.debug("Interrupting waitingThreads. Count = " + waitingThreads.size());  iter=waitingThreads.iterator();  while (iter.hasNext()) {    final WaitingThread waiter=(WaitingThread)iter.next();    iter.remove();    waiter.interruptedByConnectionPool=true;    waiter.thread.interrupt();  }  mapHosts.clear();  log.debug("Removing all idle connections.");  idleConnectionHandler.removeAll();}  }
class C{  private void generateJDKWrongElem(long X){  for (long newTotal; X >= 2 * minRun + 1; X=newTotal) {    newTotal=X / 2 + 1;    if (3 * minRun + 3 <= X && X <= 4 * minRun + 1) {      newTotal=2 * minRun + 1;    } else     if (5 * minRun + 5 <= X && X <= 6 * minRun + 5) {      newTotal=3 * minRun + 3;    } else     if (8 * minRun + 9 <= X && X <= 10 * minRun + 9) {      newTotal=5 * minRun + 5;    } else     if (13 * minRun + 15 <= X && X <= 16 * minRun + 17) {      newTotal=8 * minRun + 9;    }    runs.add(0,X - newTotal);  }  runs.add(0,X);}  }
class C{  public MLContext(SparkContext sc) throws DMLRuntimeException {  initializeSpark(sc,false,false);}  }
class C{  public DoubleList(){  this(10);}  }
class C{  private boolean checkForRingerModeChange(int oldIndex,int direction,int step){  boolean adjustVolumeIndex=true;  int ringerMode=getRingerMode();switch (ringerMode) {case RINGER_MODE_NORMAL:    if (direction == AudioManager.ADJUST_LOWER) {      if (mHasVibrator) {        if (step <= oldIndex && oldIndex < 2 * step) {          ringerMode=RINGER_MODE_VIBRATE;          if (mVoiceCapable)           adjustVolumeIndex=false;        }      } else {        if ((oldIndex < step) && mPrevVolDirection != AudioManager.ADJUST_LOWER) {          ringerMode=RINGER_MODE_SILENT;          if (mVoiceCapable)           adjustVolumeIndex=false;        }      }    }  break;case RINGER_MODE_VIBRATE:if (!mHasVibrator) {  Log.e(TAG,"checkForRingerModeChange() current ringer mode is vibrate" + "but no vibrator is present");  break;}if ((direction == AudioManager.ADJUST_LOWER)) {if (mPrevVolDirection != AudioManager.ADJUST_LOWER) {  ringerMode=RINGER_MODE_SILENT;}} else if (direction == AudioManager.ADJUST_RAISE) {ringerMode=RINGER_MODE_NORMAL;}adjustVolumeIndex=false;break;case RINGER_MODE_SILENT:if (direction == AudioManager.ADJUST_RAISE) {if (mHasVibrator) {ringerMode=RINGER_MODE_VIBRATE;} else {ringerMode=RINGER_MODE_NORMAL;}}adjustVolumeIndex=false;break;default :Log.e(TAG,"checkForRingerModeChange() wrong ringer mode: " + ringerMode);break;}setRingerMode(ringerMode);mPrevVolDirection=direction;return adjustVolumeIndex;}  }
class C{  public static ImageDecodeOptions defaults(){  return DEFAULTS;}  }
class C{  public CannotCompileException(Throwable e){  super("by " + e.toString());  message=null;  initCause(e);}  }
class C{  public static boolean isUnquotedSqlIdentifier(String identifier){  return SQL_UNQUOTED_ID.matcher(identifier).matches();}  }
class C{  public void updateWithParameters(ClusterConfig clusterConfig){  if (isMapPortsToHost() != null) {    clusterConfig.setMapPortsToHost(isMapPortsToHost());  }  if (clusterConfig.getZookeeper() == null) {    clusterConfig.setZookeeper(new ZooKeeperConfig());  }  if (clusterConfig.getMaster() == null) {    clusterConfig.setMaster(new MesosMasterConfig(ClusterConfig.DEFAULT_MESOS_VERSION));  }}  }
class C{  protected static final double absDev(int attr,Instances inst){  int i;  double average=0.0, absdiff=0.0, absDev;  for (i=0; i <= inst.numInstances() - 1; i++) {    average+=inst.instance(i).value(attr);  }  if (inst.numInstances() > 1) {    average/=inst.numInstances();    for (i=0; i <= inst.numInstances() - 1; i++) {      absdiff+=Math.abs(inst.instance(i).value(attr) - average);    }    absDev=absdiff / inst.numInstances();  } else {    absDev=0.0;  }  return absDev;}  }
class C{  public int compareTo(Object o){  SweepLineEvent pe=(SweepLineEvent)o;  if (xValue < pe.xValue)   return -1;  if (xValue > pe.xValue)   return 1;  if (eventType < pe.eventType)   return -1;  if (eventType > pe.eventType)   return 1;  return 0;}  }
class C{  protected void addAttr(WbXmlAttributeDef attr){  TreeSet set=this.attrsByName.get(attr.getNameWithPrefix());  if (set == null) {    set=new TreeSet<WbXmlAttributeDef>();    this.attrsByName.put(attr.getNameWithPrefix(),set);  }  set.add(attr);  this.attrsByToken.put(attr.getToken(),attr);}  }
class C{  public boolean equals(String ns,String localPart){  String thisnamespace=getNamespaceURI();  return getLocalName().equals(localPart) && (((null != thisnamespace) && (null != ns)) ? thisnamespace.equals(ns) : ((null == thisnamespace) && (null == ns)));}  }
class C{  private void createTvShowFromDirectory(File dir,String datasource){  TvShow tvShow=tvShowList.getTvShowByPath(dir);  if (tvShow == null) {    tvShow=TvShow.parseNFO(dir);    if (tvShow == null) {      tvShow=new TvShow();      tvShow.setPath(dir.getPath());      String[] ty=ParserUtils.detectCleanMovienameAndYear(dir.getName());      tvShow.setTitle(ty[0]);      if (!ty[1].isEmpty()) {        tvShow.setYear(ty[1]);      }    }    if (tvShow != null) {      tvShow.setDataSource(datasource);      tvShow.setNewlyAdded(true);      tvShowList.addTvShow(tvShow);    }  }  if (tvShow != null) {    findAdditionalTvShowFiles(tvShow,dir);    findTvEpisodes(tvShow,dir);    if (tvShow.isNewlyAdded() || tvShow.hasNewlyAddedEpisodes()) {      tvShow.saveToDb();    }  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:07:26.218 -0400",hash_original_method="7FC6D92DBB3FA2099CE881A91E960ACF",hash_generated_method="DFA69983BA330C9F88F2FBEEDDC89058") public synchronized int addRfcommServiceRecord(String serviceName,ParcelUuid uuid,int channel,IBinder b){  mContext.enforceCallingOrSelfPermission(BLUETOOTH_PERM,"Need BLUETOOTH permission");  if (!isEnabledInternal())   return -1;  if (serviceName == null || uuid == null || channel < 1 || channel > BluetoothSocket.MAX_RFCOMM_CHANNEL) {    return -1;  }  if (BluetoothUuid.isUuidPresent(BluetoothUuid.RESERVED_UUIDS,uuid)) {    Log.w(TAG,"Attempted to register a reserved UUID: " + uuid);    return -1;  }  int handle=addRfcommServiceRecordNative(serviceName,uuid.getUuid().getMostSignificantBits(),uuid.getUuid().getLeastSignificantBits(),(short)channel);  if (DBG)   Log.d(TAG,"new handle " + Integer.toHexString(handle));  if (handle == -1) {    return -1;  }  ServiceRecordClient client=new ServiceRecordClient();  client.pid=Binder.getCallingPid();  client.binder=b;  client.death=new Reaper(handle,client.pid,RFCOMM_RECORD_REAPER);  mServiceRecordToPid.put(new Integer(handle),client);  try {    b.linkToDeath(client.death,0);  } catch (  RemoteException e) {    Log.e(TAG,"",e);    client.death=null;  }  return handle;}  }
class C{  private void parsePackages(SensorContext sensorContext){  for (  Directory directory : packageList) {    sensorContext.saveMeasure(directory,CoreMetrics.DIRECTORIES,1.0);    sensorContext.saveMeasure(directory,CoreMetrics.FILES,(double)filesCount.get(directory));  }}  }
class C{  public NullChange(String name){  Assert.isNotNull(name);  fName=name;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:21.183 -0500",hash_original_method="18F04DADB801BEC6FD2BF5A5509D8E24",hash_generated_method="E79DB73A536926B98FC83AF3DDCD828E") private static String convertInt(AbstractStringBuilder sb,int i){  String str=new String();  str.addTaint(i);  if (sb != null) {    sb.append0(str);    return null;  } else {    return str;  }}  }
class C{  public AndroidAuthenticator(Context context,Account account,String authTokenType){  this(context,account,authTokenType,false);}  }
class C{  protected Class findClass(String name) throws ClassNotFoundException {  byte[] classfile;  try {    if (source != null) {      if (translator != null)       translator.onLoad(source,name);      try {        classfile=source.get(name).toBytecode();      } catch (      NotFoundException e) {        return null;      }    } else {      String jarname="/" + name.replace('.','/') + ".class";      InputStream in=this.getClass().getResourceAsStream(jarname);      if (in == null)       return null;      classfile=ClassPoolTail.readStream(in);    }  } catch (  Exception e) {    throw new ClassNotFoundException("caught an exception while obtaining a class file for " + name,e);  }  int i=name.lastIndexOf('.');  if (i != -1) {    String pname=name.substring(0,i);    if (getPackage(pname) == null)     try {      definePackage(pname,null,null,null,null,null,null,null);    } catch (    IllegalArgumentException e) {    }  }  if (domain == null)   return defineClass(name,classfile,0,classfile.length); else   return defineClass(name,classfile,0,classfile.length,domain);}  }
class C{  public static void simulateRPU(Gate g,GateLibrary gate_library,Args options){  if (g.is_unvisited()) {    g.set_unvisited(false);    ArrayList<Gate> children=g.getChildren();    for (    Gate child : children) {      if (child.is_unvisited()) {        Evaluate.simulateRPU(child,gate_library,options);      }    }    if (g.get_variable_names().size() > 1) {      setBestVariableMapping(g,gate_library,options);    }    g.get_outrpus().clear();    g.get_inrpus().clear();    for (int i=0; i < g.get_logics().size(); ++i) {      GateUtil.mapWiresToVariables(g,g.get_variable_names());      HashMap<String,Double> variable_values=GateUtil.getVariableValues(g,i,gate_library,options);      for (      String v : variable_values.keySet()) {        if (!g.get_inrpus().containsKey(v)) {          g.get_inrpus().put(v,new ArrayList<Double>());        }        g.get_inrpus().get(v).add(variable_values.get(v));      }      double output_rpu=ResponseFunction.computeOutput(variable_values,g.get_params(),g.get_equation());      g.get_outrpus().add(output_rpu);    }  }}  }
class C{  public static final String toHex(byte[] b){  return toHex(b,0,b.length);}  }
class C{  public OpenEntity(Reader reader,String location,String baseUri,String encoding){  this.reader=reader;  this.location=location;  this.baseUri=baseUri;  this.encoding=encoding;}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == TMember.class) {switch (baseOperationID) {case TypesPackage.TMEMBER___GET_MEMBER_ACCESS_MODIFIER:      return TypesPackage.TSTRUCT_GETTER___GET_MEMBER_ACCESS_MODIFIER;case TypesPackage.TMEMBER___IS_STATIC:    return TypesPackage.TSTRUCT_GETTER___IS_STATIC;default :  return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == TMemberWithAccessModifier.class) {switch (baseOperationID) {case TypesPackage.TMEMBER_WITH_ACCESS_MODIFIER___GET_MEMBER_ACCESS_MODIFIER:return TypesPackage.TSTRUCT_GETTER___GET_MEMBER_ACCESS_MODIFIER;default :return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == TStructMember.class) {switch (baseOperationID) {case TypesPackage.TSTRUCT_MEMBER___GET_DEFAULT_MEMBER_ACCESS_MODIFIER:return TypesPackage.TSTRUCT_GETTER___GET_DEFAULT_MEMBER_ACCESS_MODIFIER;case TypesPackage.TSTRUCT_MEMBER___IS_STATIC:return TypesPackage.TSTRUCT_GETTER___IS_STATIC;case TypesPackage.TSTRUCT_MEMBER___GET_MEMBER_ACCESS_MODIFIER:return TypesPackage.TSTRUCT_GETTER___GET_MEMBER_ACCESS_MODIFIER;default :return -1;}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  public PlaceProperty(double latitude,double longitude){  setCoordinates(latitude,longitude);}  }
class C{  public boolean isStartProcess(){  return m_OKpressed;}  }
class C{  @Override protected NdefMessage createNdefMessage(){  Message message=new Message();  AndroidApplicationRecord androidApplicationRecord=new AndroidApplicationRecord();  androidApplicationRecord.setPackageName(getPlayIdentifier());  message.add(androidApplicationRecord);  EditText text=(EditText)findViewById(R.id.text);  TextRecord textRecord=new TextRecord();  textRecord.setText(text.getText().toString());  textRecord.setEncoding(Charset.forName("UTF-8"));  textRecord.setLocale(Locale.ENGLISH);  message.add(textRecord);  return message.getNdefMessage();}  }
class C{  private void scanCodebase(IClassPath classPath,LinkedList<WorkListItem> workList,DiscoveredCodeBase discoveredCodeBase) throws InterruptedException {  if (DEBUG) {    System.out.println("Scanning " + discoveredCodeBase.getCodeBase().getCodeBaseLocator());  }  IScannableCodeBase codeBase=(IScannableCodeBase)discoveredCodeBase.getCodeBase();  ICodeBaseIterator i=codeBase.iterator();  while (i.hasNext()) {    ICodeBaseEntry entry=i.next();    if (VERBOSE) {      System.out.println("Entry: " + entry.getResourceName());    }    if (!NO_PARSE_CLASS_NAMES && codeBase.isApplicationCodeBase() && DescriptorFactory.isClassResource(entry.getResourceName())&& !(entry instanceof SingleFileCodeBaseEntry)) {      parseClassName(entry);    }    discoveredCodeBase.addCodeBaseEntry(entry);    if (scanNestedArchives && (codeBase.isApplicationCodeBase() || codeBase instanceof DirectoryCodeBase) && Archive.isLibraryFileName(entry.getResourceName())) {      if (VERBOSE) {        System.out.println("Entry is an library!");      }      ICodeBaseLocator nestedArchiveLocator=classFactory.createNestedArchiveCodeBaseLocator(codeBase,entry.getResourceName());      addToWorkList(workList,new WorkListItem(nestedArchiveLocator,codeBase.isApplicationCodeBase(),ICodeBase.Discovered.NESTED));    }  }}  }
class C{  private void scrollTo(int position){  int totalWidth=0;  for (int i=0; i < position; i++) {    int width=tabs.get(i).getView().getWidth();    if (width == 0) {      if (!isTablet)       width=(int)(tabs.get(i).getTabMinWidth() + (24 * density)); else       width=(int)(tabs.get(i).getTabMinWidth() + (48 * density));    }    totalWidth+=width;  }  scrollView.smoothScrollTo(totalWidth,0);}  }
class C{  protected void highlightEdge(final EdgeLabel label){  CEdgeHighlighter.highlightEdge(label.getOwner(),true);}  }
class C{  public static long secureRandomLong(){  SecureRandom sr=getSecureRandom();synchronized (sr) {    return sr.nextLong();  }}  }
class C{  public FastCharStream(Reader r){  input=r;}  }
class C{  private int postDirectory(File dir,OutputStream out,String type){  if (dir.isHidden() && !dir.getName().equals("."))   return (0);  info("Indexing directory " + dir.getPath() + " ("+ dir.listFiles(fileFilter).length+ " files, depth="+ currentDepth+ ")");  int posted=0;  posted+=postFiles(dir.listFiles(fileFilter),out,type);  if (recursive > currentDepth) {    for (    File d : dir.listFiles()) {      if (d.isDirectory()) {        currentDepth++;        posted+=postDirectory(d,out,type);        currentDepth--;      }    }  }  return posted;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public RecordsMatcher<T> exactlyNOfThem(int n){  return new RecordsMatcher<>(MatcherCombiner.exactly(matchers,n));}  }
class C{  public static void createAndAddSignal(SignalSystemData sys,SignalSystemsDataFactory factory,Id<Signal> signalId,Id<Link> linkId,List<Id<Lane>> laneIds){  SignalData signal=factory.createSignalData(signalId);  sys.addSignalData(signal);  signal.setLinkId(linkId);  if (laneIds != null) {    for (    Id<Lane> laneId : laneIds) {      signal.addLaneId(laneId);    }  }}  }
class C{  public boolean canStripWhiteSpace(){  StylesheetRoot sroot=this.getStylesheetRoot();  return (null != sroot) ? sroot.canStripWhiteSpace() : false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:41.841 -0500",hash_original_method="4E65A3A585AE016FD322D2CFB53AD9E7",hash_generated_method="4570EDCB0C4DE7D1D2C196AA5B8DC406") synchronized public boolean allowPurging(boolean allowPurging) throws IOException {  boolean oldValue=mAllowPurging;  if (oldValue != allowPurging) {    native_pin(mFD,!allowPurging);    mAllowPurging=allowPurging;  }  return oldValue;}  }
class C{  public int size(){synchronized (lock) {    return count;  }}  }
class C{  public void testNulls(){  Path file=Paths.get("foo");  byte[] bytes=new byte[100];  List<String> lines=Collections.emptyList();  checkNullPointerException(null);  checkNullPointerException(null);  checkNullPointerException(null);  checkNullPointerException(null);  checkNullPointerException(null);  checkNullPointerException(null);  checkNullPointerException(null);  checkNullPointerException(null);  checkNullPointerException(null);  checkNullPointerException(null);  checkNullPointerException(null);  checkNullPointerException(null);  checkNullPointerException(null);  checkNullPointerException(null);  checkNullPointerException(null);  checkNullPointerException(null);  checkNullPointerException(null);}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.DEBUGGER_STATEMENT;}  }
class C{  private void startNodes() throws Exception {  if (mode != PRIMARY)   startSecondary();  startGrids(4);}  }
class C{  protected void sequence_MemberExpression_ParameterizedPropertyAccessExpressionTail_TypeArguments(ISerializationContext context,ParameterizedPropertyAccessExpression semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public double optDouble(String key,double defaultValue){  try {    return this.getDouble(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  public static String createGridNodeId(int x,int y){  return (x + "_" + y);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:06.796 -0500",hash_original_method="94D120157B0912550580C1CAC9F20DA0",hash_generated_method="BB3A53AFD57574A4D4A63B3DE6E61CDE") public String listHelp() throws IOException {  StringWriter help;  Reader reader;  if (!NNTPReply.isInformational(help()))   return null;  help=new StringWriter();  reader=new DotTerminatedMessageReader(_reader_);  Util.copyReader(reader,help);  reader.close();  help.close();  return help.toString();}  }
class C{  synchronized int id(Class<?> type){  Integer id=ids.get(type);  if (id != null)   return id;  Class<?> baseType=findBaseType(type,abstractFactories);  if (baseType != null) {    id=ids.get(baseType);    if (id != null) {      return id;    }  }  return 0;}  }
class C{  public void updateWriteStats(OFMessage ofm){switch (ofm.getType()) {case BARRIER_REPLY:    ctrWriteBarrierReply.increment();  break;case BARRIER_REQUEST:ctrWriteBarrierRequest.increment();break;case ECHO_REPLY:ctrWriteEchoReply.increment();break;case ECHO_REQUEST:ctrWriteEchoRequest.increment();break;case ERROR:ctrWriteError.increment();break;case EXPERIMENTER:ctrWriteExperimenter.increment();break;case FEATURES_REPLY:ctrWriteFeaturesReply.increment();break;case FEATURES_REQUEST:ctrWriteFeaturesRequest.increment();break;case FLOW_MOD:ctrWriteFlowMod.increment();break;case FLOW_REMOVED:ctrWriteFlowRemoved.increment();break;case GET_ASYNC_REPLY:ctrWriteGetAsyncReply.increment();break;case GET_ASYNC_REQUEST:ctrWriteGetAsyncRequest.increment();break;case GET_CONFIG_REPLY:ctrWriteGetConfigReply.increment();break;case GET_CONFIG_REQUEST:ctrWriteGetConfigRequest.increment();break;case GROUP_MOD:ctrWriteGroupMod.increment();break;case HELLO:ctrWriteHello.increment();break;case METER_MOD:ctrWriteMeterMod.increment();break;case PACKET_IN:ctrWritePacketIn.increment();break;case PACKET_OUT:ctrWritePacketOut.increment();break;case PORT_MOD:ctrWritePortMod.increment();break;case PORT_STATUS:ctrWritePortStatus.increment();break;case QUEUE_GET_CONFIG_REPLY:ctrWriteQueueGetConfigReply.increment();break;case QUEUE_GET_CONFIG_REQUEST:ctrWriteQueueGetConfigRequest.increment();break;case ROLE_REPLY:ctrWriteRoleReply.increment();break;case ROLE_REQUEST:ctrWriteRoleRequest.increment();break;case SET_ASYNC:ctrWriteSetAsync.increment();break;case SET_CONFIG:ctrWriteSetConfig.increment();break;case STATS_REPLY:ctrWriteStatsReply.increment();break;case STATS_REQUEST:ctrWriteStatsRequest.increment();break;case TABLE_MOD:ctrWriteTableMod.increment();break;case BUNDLE_ADD_MESSAGE:ctrWriteBundleAdd.increment();break;case BUNDLE_CONTROL:ctrWriteBundleControl.increment();break;case REQUESTFORWARD:ctrWriteRequestForward.increment();break;case ROLE_STATUS:ctrWriteRoleStatus.increment();break;case TABLE_STATUS:ctrWriteTableStatus.increment();break;default :logger.warn(ofm.getType().toString() + ": Invalid OpenFlow Messaqe!");break;}}  }
class C{  private void buildAccentChar(float x,float y,char a,char b,Path gp){  Path pathAorig=getOutline(a,getWidth(a,null));  Path pathA=new Path(pathAorig);  Matrix xformA=new Matrix();  if (at.invert(xformA)) {    pathA.transform(xformA);    Matrix xformA2=new Matrix();    xformA2.setTranslate(0,y);    pathA.transform(xformA2);  } else {    Matrix xformA2=new Matrix();    xformA2.setTranslate(0,y);    pathA.transform(xformA2);  }  Path pathBorig=getOutline(b,getWidth(b,null));  Path pathB=(Path)new Path(pathBorig);  Matrix xformB=new Matrix();  if (at.invert(xformB)) {    pathB.transform(xformB);  } else {  }  gp.addPath(pathB);  gp.addPath(pathA);}  }
class C{  public static ItemStack toStack(IItemStack iStack){  if (iStack == null)   return null;  return getItemStack(iStack);}  }
class C{  public static XMLObjectReader newInstance(Reader in) throws XMLStreamException {  XMLObjectReader reader=new XMLObjectReader();  reader.setInput(in);  return reader;}  }
class C{  protected void installKeyboardActions(){  InputMap km=getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);  SwingUtilities.replaceUIInputMap(splitPane,JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT,km);  LazyActionMap.installLazyActionMap(splitPane,BasicSplitPaneUI.class,"SplitPane.actionMap");}  }
class C{  public List<PhotoItem> queryAll(){  return queryAll(PhotoDataQuery.CONTENT_URI,FilmstripItemBase.QUERY_ALL_MEDIA_ID);}  }
class C{  private boolean[] attsTestedBelow(){  boolean[] attsBelow=new boolean[m_numAttributes];  boolean[] attsBelowLeft=null;  boolean[] attsBelowRight=null;  if (m_right != null) {    attsBelowRight=m_right.attsTestedBelow();  }  if (m_left != null) {    attsBelowLeft=m_left.attsTestedBelow();  }  for (int i=0; i < m_numAttributes; i++) {    if (attsBelowLeft != null) {      attsBelow[i]=(attsBelow[i] || attsBelowLeft[i]);    }    if (attsBelowRight != null) {      attsBelow[i]=(attsBelow[i] || attsBelowRight[i]);    }  }  if (!m_isLeaf) {    attsBelow[m_splitAtt]=true;  }  return attsBelow;}  }
class C{  public Parser createNewParser(){  Parser parser=new Parser(this);  parser.setDirectives(runtimeDirectives);  return parser;}  }
class C{  public SaveAsAction(final GuiComponent guiComponent){  super("Save As...");  if (guiComponent == null) {    throw new IllegalArgumentException("component must not be null");  }  putValue(SMALL_ICON,ResourceManager.getImageIcon("SaveAs.png"));  putValue(SHORT_DESCRIPTION,"Save this component with a new name");  this.guiComponent=guiComponent;}  }
class C{  private static Script scriptFromUrl(URL scriptUrl,ScriptType scriptType){  String scriptString=getScriptStringFromUrl(scriptUrl);  return scriptFromString(scriptString,scriptType).setName(scriptUrl.toString());}  }
class C{  public void addPortUniqueId(java.lang.String param){  if (localPortUniqueId == null) {    localPortUniqueId=new java.lang.String[]{};  }  localPortUniqueIdTracker=true;  java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(localPortUniqueId);  list.add(param);  this.localPortUniqueId=(java.lang.String[])list.toArray(new java.lang.String[list.size()]);}  }
class C{  private String updateReceiptWorkflowStatus(final String wfAction,final String remarks){  for (  final Long receiptId : receiptIds) {    final ReceiptHeader receiptHeader=receiptHeaderService.findByNamedQuery(CollectionConstants.QUERY_RECEIPT_BY_ID_AND_STATUSNOTCANCELLED,receiptId);    if (receiptHeader != null) {      receiptHeaderService.performWorkflow(wfAction,receiptHeader,remarks);      approverName=collectionsUtil.getApproverName(receiptHeader.getState().getOwnerPosition());    }  }  getSession().put(CollectionConstants.SESSION_VAR_RECEIPT_IDS,receiptIds);  return SUCCESS;}  }
class C{  public boolean nextRegistrar(){  return nextElement(RDE_REGISTRAR_URI,"registrar");}  }
class C{  public static String date2String(Date date){  return date2String(date,DateConstants.DATETIME_FORMAT_19);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.203 -0400",hash_original_method="51199DDDF4151039B212F3260E0B0706",hash_generated_method="DE7AD0E6623CC0642C95B9F1FB992791") public LockableFileWriter(File file,String encoding) throws IOException {  this(file,encoding,false,null);}  }
class C{  private boolean isTransient(Field field){  int modifier=field.getModifiers();  if (Modifier.isTransient(modifier)) {    return true;  }  return false;}  }
class C{  public static String[] explode(String source){  return StringUtils.explode(source," ");}  }
class C{  public SnackbarCallbackWrapper(Callback callback){  this.callback=callback;}  }
class C{  public final float[] toFloatArray(float[] array,int offset,int length){  if (array == null) {    String msg=Logging.getMessage("nullValue.ArrayIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (offset < 0) {    String msg=Logging.getMessage("generic.OffsetIsInvalid",offset);    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (length < 1) {    String msg=Logging.getMessage("generic.LengthIsInvalid",length);    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (array.length < offset + length) {    String msg=Logging.getMessage("generic.ArrayInvalidLength",array.length);    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  array[offset]=(float)this.x;  array[offset + 1]=(float)this.y;  if (length > 2)   array[offset + 2]=(float)this.z;  if (length > 3)   array[offset + 3]=(float)this.w;  return array;}  }
class C{  private void initializeIntrospection() throws Exception {  String rm=getString(RuntimeConstants.UBERSPECT_CLASSNAME);  if (rm != null && rm.length() > 0) {    Object o=null;    try {      o=Class.forName(rm).newInstance();    } catch (    ClassNotFoundException cnfe) {      String err="The specified class for Uberspect (" + rm + ") does not exist (or is not accessible to the current classlaoder.";      error(err);      throw new Exception(err);    }    if (!(o instanceof Uberspect)) {      String err="The specified class for Uberspect (" + rm + ") does not implement org.apache.flex.forks.velocity.util.introspector.Uberspect."+ " Velocity not initialized correctly.";      error(err);      throw new Exception(err);    }    uberSpect=(Uberspect)o;    if (uberSpect instanceof UberspectLoggable) {      ((UberspectLoggable)uberSpect).setRuntimeLogger(this);    }    uberSpect.init();  } else {    String err="It appears that no class was specified as the" + " Uberspect.  Please ensure that all configuration" + " information is correct.";    error(err);    throw new Exception(err);  }}  }
class C{  protected void sequence_DoubleLiteral(ISerializationContext context,DoubleLiteral semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.NUMERIC_LITERAL__VALUE) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.NUMERIC_LITERAL__VALUE));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getDoubleLiteralAccess().getValueDOUBLETerminalRuleCall_0(),semanticObject.getValue());  feeder.finish();}  }
class C{  static int svd_imax(int a,int b){  return Math.max(a,b);}  }
class C{  public static VOUserDetails toVOUserDetails(PlatformUser platformUser){  if (platformUser == null) {    return null;  }  VOUserDetails userDetails=new VOUserDetails(platformUser.getKey(),platformUser.getVersion());  updateVoUser(platformUser,userDetails);  updateVoUserDetails(platformUser,userDetails);  return userDetails;}  }
class C{  public static _BooleanOperatorEnum fromString(final String value) throws SOAPSerializationException {  return (_BooleanOperatorEnum)Enumeration.fromString(value,_BooleanOperatorEnum.VALUES_TO_INSTANCES);}  }
class C{  private void checkQuery(String queryString) throws Exception {  ParsedQuery query=parser.parseQuery(queryString,null);  TupleExpr tupleExpr=query.getTupleExpr();  Collection<SearchQueryEvaluator> queries=process(interpreter,tupleExpr);  assertEquals("expect one query",1,queries.size());}  }
class C{  public String toString(){  return String.format("ToastModuleContainer[name:%s, version:%s, class:%s]",name,version,moduleClass);}  }
class C{  private void addUsage(Offer offer){  Usage newUsage=new Usage();  newUsage=newUsage.offerToUsage(offer);  usageModel.setNewUsage(newUsage);  view.displayNewUsage(newUsage);}  }
class C{  public int read(char cbuf[],int off,int len) throws IOException {  if (_inputStream == null)   throw new IOException("No input stream or stream closed");  if (_start >= _end) {    _start=0;    _end=_inputStream.read(_bytes,0,_bytes.length);    if (_end <= 0) {      return _end;    }  }  final int off_plus_len=off + len;  for (int i=off; i < off_plus_len; ) {    byte b=_bytes[_start];    if ((b >= 0) && (++_start < _end)) {      cbuf[i++]=(char)b;    } else     if (b < 0) {      if (i < off_plus_len - 1) {        int code=read2();        if (code < 0x10000) {          cbuf[i++]=(char)code;        } else         if (code <= 0x10ffff) {          cbuf[i++]=(char)(((code - 0x10000) >> 10) + 0xd800);          cbuf[i++]=(char)(((code - 0x10000) & 0x3ff) + 0xdc00);        } else {          throw new CharConversionException("Cannot convert U+" + Integer.toHexString(code) + " to char (code greater than U+10FFFF)");        }        if (_start < _end) {          continue;        }      }      return i - off;    } else {      cbuf[i++]=(char)b;      return i - off;    }  }  return len;}  }
class C{  public NodeTest(int whatToShow){  initNodeTest(whatToShow);}  }
class C{  public int size(){  return parts.size();}  }
class C{  public String paramString(){  String typeStr;switch (id) {case WINDOW_OPENED:    typeStr="WINDOW_OPENED";  break;case WINDOW_CLOSING:typeStr="WINDOW_CLOSING";break;case WINDOW_CLOSED:typeStr="WINDOW_CLOSED";break;case WINDOW_ICONIFIED:typeStr="WINDOW_ICONIFIED";break;case WINDOW_DEICONIFIED:typeStr="WINDOW_DEICONIFIED";break;case WINDOW_ACTIVATED:typeStr="WINDOW_ACTIVATED";break;case WINDOW_DEACTIVATED:typeStr="WINDOW_DEACTIVATED";break;case WINDOW_GAINED_FOCUS:typeStr="WINDOW_GAINED_FOCUS";break;case WINDOW_LOST_FOCUS:typeStr="WINDOW_LOST_FOCUS";break;case WINDOW_STATE_CHANGED:typeStr="WINDOW_STATE_CHANGED";break;default :typeStr="unknown type";}typeStr+=",opposite=" + getOppositeWindow() + ",oldState="+ oldState+ ",newState="+ newState;return typeStr;}  }
class C{  protected void init(){  CPanel main=new CPanel();  main.setLayout(new BorderLayout(2,6));  main.setPreferredSize(new Dimension(400,600));  getContentPane().add(main);  panel=new CPanel(new GridBagLayout());  main.add(panel,BorderLayout.CENTER);  panel.setBorder(new TitledBorder(Msg.getMsg(p_ctx,"Cash Functions")));  GridBagConstraints gbc=new GridBagConstraints();  gbc.gridx=0;  gbc.gridy=0;  gbc.anchor=GridBagConstraints.CENTER;  gbc.weightx=.3;  gbc.weighty=0.05;  f_displayInitialChange=createButtonAction("InitialChange",null);  f_displayInitialChange.setText("Initial Change");  f_displayInitialChange.setActionCommand("displayInitialChange");  f_displayInitialChange.setMaximumSize(new Dimension(160,35));  f_displayInitialChange.setMinimumSize(new Dimension(160,35));  f_displayInitialChange.setPreferredSize(new Dimension(160,35));  panel.add(f_displayInitialChange,gbc);  f_closingCash=createButtonAction("InitialChange",null);  f_closingCash.setText("Cash Closing");  f_closingCash.setActionCommand("CashClosing");  f_closingCash.setPreferredSize(new Dimension(160,35));  f_closingCash.setMaximumSize(new Dimension(160,35));  f_closingCash.setMinimumSize(new Dimension(160,35));  gbc.gridy=1;  panel.add(f_closingCash,gbc);  f_displayCashScrutiny=createButtonAction("Scrutiny",null);  f_displayCashScrutiny.setText("Cash Scrutiny");  f_displayCashScrutiny.setActionCommand("displayCashScrutiny");  f_displayCashScrutiny.setPreferredSize(new Dimension(160,35));  f_displayCashScrutiny.setMaximumSize(new Dimension(160,35));  f_displayCashScrutiny.setMinimumSize(new Dimension(160,35));  gbc.gridy=2;  panel.add(f_displayCashScrutiny,gbc);  f_inputsOutputs=createButtonAction("Inputs",null);  f_inputsOutputs.setText("Inputs and Outputs");  f_inputsOutputs.setActionCommand("InputsOutputs");  f_inputsOutputs.setPreferredSize(new Dimension(160,35));  f_inputsOutputs.setMaximumSize(new Dimension(160,35));  f_inputsOutputs.setMinimumSize(new Dimension(160,35));  gbc.gridy=3;  panel.add(f_inputsOutputs,gbc);  f_tickets=createButtonAction("Tickets",null);  f_tickets.setText("Tickets");  f_tickets.setPreferredSize(new Dimension(160,35));  f_tickets.setMaximumSize(new Dimension(160,35));  f_tickets.setMinimumSize(new Dimension(160,35));  gbc.gridy=4;  panel.add(f_tickets,gbc);  f_pos=createButtonAction("End",null);  f_pos.setText("POS");  f_pos.setPreferredSize(new Dimension(160,35));  f_pos.setMaximumSize(new Dimension(160,35));  f_pos.setMinimumSize(new Dimension(160,35));  gbc.gridy=5;  panel.add(f_pos,gbc);  gbc.gridx=1;  gbc.anchor=GridBagConstraints.WEST;  gbc.gridy=0;  gbc.gridheight=5;  c=new CPanel(new GridBagLayout());  c.setBorder(new TitledBorder(""));  c.setMaximumSize(new Dimension(400,400));  c.setMinimumSize(new Dimension(400,400));  c.setPreferredSize(new Dimension(400,400));  panel.add(c,gbc);  gbc.gridx=1;  gbc.anchor=GridBagConstraints.WEST;  gbc.gridy=0;  gbc.gridheight=5;  cInitial=new CPanel(new GridBagLayout());  cInitial.setBorder(new TitledBorder("Initial Change"));  cInitial.setVisible(false);  panel.add(cInitial,gbc);  GridBagConstraints gbc0=new GridBagConstraints();  gbc0.anchor=GridBagConstraints.CENTER;  gbc0.gridx=0;  gbc0.gridy=0;  l_PreviousChange=new CLabel("Previous Change");  cInitial.add(l_PreviousChange,gbc0);  gbc0.gridx=1;  v_PreviousChange=new VNumber("PreviousChange",false,true,false,DisplayType.Amount,"PreviousChange");  v_PreviousChange.setColumns(10,25);  cInitial.add(v_PreviousChange,gbc0);  v_PreviousChange.setValue(Env.ZERO);  gbc0.gridx=0;  gbc0.gridy=1;  l_change=new CLabel("Initial Change");  cInitial.add(l_change,gbc0);  gbc0.gridx=1;  v_change=new VNumber("Change",false,false,true,DisplayType.Amount,"Change");  v_change.setColumns(10,25);  cInitial.add(v_change,gbc0);  v_change.setValue(Env.ZERO);  gbc0.gridy=2;  gbc0.gridx=0;  gbc0.gridwidth=2;  f_change=createButtonAction("InitialChange",null);  f_change.setText("Save Change");  f_change.setActionCommand("saveChange");  cInitial.add(f_change,gbc0);  f_change.setPreferredSize(new Dimension(160,35));  f_change.setMaximumSize(new Dimension(160,35));  f_change.setMinimumSize(new Dimension(160,35));  cInitial.setMaximumSize(new Dimension(400,400));  cInitial.setMinimumSize(new Dimension(400,400));  cInitial.setPreferredSize(new Dimension(400,400));  gbc.gridx=1;  gbc.anchor=GridBagConstraints.WEST;  gbc.gridy=0;  gbc.gridheight=5;  cScrutiny=new CPanel(new GridBagLayout());  cScrutiny.setBorder(new TitledBorder("Cash Scrutiny"));  cScrutiny.setVisible(false);  panel.add(cScrutiny,gbc);  GridBagConstraints gbc1=new GridBagConstraints();  gbc1.anchor=GridBagConstraints.CENTER;  gbc1.gridx=0;  gbc1.gridy=0;  l_previousBalance=new CLabel("Previous Balance");  cScrutiny.add(l_previousBalance,gbc1);  gbc1.gridx=1;  v_previousBalance=new VNumber("PreviousBalance",false,true,false,DisplayType.Amount,"PreviousBalance");  v_previousBalance.setColumns(10,25);  cScrutiny.add(v_previousBalance,gbc1);  v_previousBalance.setValue(Env.ZERO);  gbc1.gridx=0;  gbc1.gridy=1;  l_ActualBalance=new CLabel("Actual Balance");  cScrutiny.add(l_ActualBalance,gbc1);  gbc1.gridx=1;  v_ActualBalance=new VNumber("ActualBalance",false,false,true,DisplayType.Amount,"ActualBalance");  v_ActualBalance.setColumns(10,25);  v_ActualBalance.addActionListener(this);  v_ActualBalance.addInputMethodListener(this);  cScrutiny.add(v_ActualBalance,gbc1);  v_ActualBalance.setValue(Env.ZERO);  gbc1.gridx=0;  gbc1.gridy=2;  l_difference=new CLabel("Difference");  cScrutiny.add(l_difference,gbc1);  gbc1.gridx=1;  v_difference=new VNumber("Difference",false,true,false,DisplayType.Amount,"Difference");  v_difference.setColumns(10,25);  cScrutiny.add(v_difference,gbc1);  v_difference.setValue(Env.ZERO);  gbc1.gridx=0;  gbc1.gridy=4;  gbc1.gridwidth=2;  gbc1.fill=GridBagConstraints.HORIZONTAL;  f_calculateDifference=createButtonAction("InitialChange",null);  f_calculateDifference.setText("Annotate Difference");  f_calculateDifference.setActionCommand("AnnotateDiference");  cScrutiny.add(f_calculateDifference,gbc1);  cScrutiny.setMaximumSize(new Dimension(400,400));  cScrutiny.setMinimumSize(new Dimension(400,400));  cScrutiny.setPreferredSize(new Dimension(400,400));}  }
class C{  public ComputeUserUndeclaredException(Throwable cause){  this(cause.getMessage(),cause);}  }
class C{  public boolean excludeUnplaced(){  return mExcludeUnplaced;}  }
class C{  private CompoundInterval spillMinUnitCost(CompoundInterval newInterval){  if (LinearScan.VERBOSE_DEBUG) {    System.out.println(" interval caused a spill: " + newInterval);  }  GenericRegisterRestrictions restrict=ir.stackManager.getRestrictions();  Register r=newInterval.getRegister();  double minCost=spillCost.getCost(r);  if (LinearScan.VERBOSE_DEBUG) {    System.out.println(" spill cost: " + r + " "+ minCost);  }  CompoundInterval result=newInterval;  if (restrict.mustNotSpill(result.getRegister())) {    if (LinearScan.VERBOSE_DEBUG) {      System.out.println(" must not spill: " + result.getRegister());    }    result=null;    minCost=Double.MAX_VALUE;  }  for (Iterator<BasicInterval> e=iterator(); e.hasNext(); ) {    MappedBasicInterval b=(MappedBasicInterval)e.next();    CompoundInterval i=b.container;    Register newR=i.getRegister();    if (LinearScan.VERBOSE_DEBUG) {      if (i.isSpilled(regAllocState)) {        System.out.println(" not candidate, already spilled: " + newR);      }      if ((r.getType() != newR.getType()) || (r.isNatural() && newR.isNatural())) {        System.out.println(" not candidate, type mismatch : " + r.getType() + " "+ newR+ " "+ newR.getType());      }      if (restrict.mustNotSpill(newR)) {        System.out.println(" not candidate, must not spill: " + newR);      }    }    if (!newR.isPhysical() && !i.isSpilled(regAllocState) && (r.getType() == newR.getType() || (r.isNatural() && newR.isNatural()))&& !restrict.mustNotSpill(newR)) {      if (checkAssignmentIfSpilled(newInterval,i)) {        double iCost=spillCost.getCost(newR);        if (LinearScan.VERBOSE_DEBUG) {          System.out.println(" potential candidate " + i + " cost "+ iCost);        }        if (iCost < minCost) {          if (LinearScan.VERBOSE_DEBUG)           System.out.println(" best candidate so far" + i);          minCost=iCost;          result=i;        }      } else {        if (LinearScan.VERBOSE_DEBUG) {          System.out.println(" not a candidate, insufficient range: " + i);        }      }    }  }  if (VM.VerifyAssertions) {    VM._assert(result != null);  }  return result;}  }
class C{  protected void initTour(ProjectActionEvent event){  loadData(event);}  }
class C{  public String nodeLabel(){  StringBuilder sb=new StringBuilder();  sb.append("{");  sb.append("{value|" + value + "}");  sb.append("}");  return sb.toString();}  }
class C{  public WriteStreamOld openAppend() throws IOException {  return getWrappedPath().openAppend();}  }
class C{  protected CCSpawn(CCFiniteTimeAction one_,CCFiniteTimeAction two_){  super(Math.max(one_.getDuration(),two_.getDuration()));  float d1=one_.getDuration();  float d2=two_.getDuration();  one=one_;  two=two_;  if (d1 > d2)   two=new CCSequence(two_,new CCDelayTime(d1 - d2)); else   if (d1 < d2)   one=new CCSequence(one_,new CCDelayTime(d2 - d1));}  }
class C{  public col addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  public NewCustomControlVisualPanel1(){  this.proj=proj;  initComponents();}  }
class C{  public BufferedDocumentScanner(int size){  Assert.isTrue(size >= 1);  fBuffer=new char[size];}  }
class C{  public byte[] bitcoinSerialize(){  if (headerBytesValid && transactionBytesValid) {    Preconditions.checkNotNull(bytes,"Bytes should never be null if headerBytesValid && transactionBytesValid");    if (length == bytes.length) {      return bytes;    } else {      byte[] buf=new byte[length];      System.arraycopy(bytes,offset,buf,0,length);      return buf;    }  }  ByteArrayOutputStream stream=new UnsafeByteArrayOutputStream(length == UNKNOWN_LENGTH ? HEADER_SIZE + guessTransactionsLength() : length);  try {    writeHeader(stream);    writeTransactions(stream);  } catch (  IOException e) {  }  return stream.toByteArray();}  }
class C{  public static boolean removeFromCache(String imageUri,DiskCache diskCache){  File image=diskCache.get(imageUri);  return image != null && image.exists() && image.delete();}  }
class C{  private static int positionIndexToCreateOrderIndex(final int[] columnOrder,final int positionIndex){  return columnOrder[positionIndex];}  }
class C{  public static boolean showEnableSync(Context context){  return getValue(context,SHOW_ENABLE_SYNC_PREFERENCE_KEY,true);}  }
class C{  protected Converter createConverter(FaceletContext ctx) throws FacesException, ELException, FaceletException {  return ctx.getFacesContext().getApplication().createConverter(NumberConverter.CONVERTER_ID);}  }
class C{  public void testCreateBigIndex() throws IOException {  ArrayList<String> images=FileUtils.getAllImages(new File(testExtensive),true);  indexFiles("ColorHist: ",images,DocumentBuilderFactory.getColorHistogramDocumentBuilder(),indexPath + "-extensive");  indexFiles("CEDD: ",images,DocumentBuilderFactory.getCEDDDocumentBuilder(),indexPath + "-extensive");  indexFiles("ColorHist: ",images,DocumentBuilderFactory.getColorHistogramDocumentBuilder(),indexPath + "-extensive");  indexFiles("ACC: ",images,DocumentBuilderFactory.getAutoColorCorrelogramDocumentBuilder(),indexPath + "-extensive");  indexFiles("FCTH: ",images,DocumentBuilderFactory.getFCTHDocumentBuilder(),indexPath + "-extensive");  indexFiles("Gabor: ",images,DocumentBuilderFactory.getGaborDocumentBuilder(),indexPath + "-extensive");  indexFiles("Tamura: ",images,DocumentBuilderFactory.getTamuraDocumentBuilder(),indexPath + "-extensive");  indexFiles("All: ",images,DocumentBuilderFactory.getFullDocumentBuilder(),indexPath + "-extensive");}  }
class C{  @Override public void run(){  amIActive=true;  String outputHeader=null;  WhiteboxRaster image=null;  WhiteboxRaster output=null;  int cols=0;  int rows=0;  double imageNoData=-32768;  double outputNoData=-32768;  int numImages;  double z;  int progress=0;  int col, row;  int a, i;  String inputFilesString=null;  String[] imageFiles;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  outputHeader=args[1];  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  if (numImages < 2) {    showFeedback("At least two images must be specified.");    return;  }  try {    double[] data;    updateProgress("Calculating min values:",0);    for (a=0; a < numImages; a++) {      image=new WhiteboxRaster(imageFiles[a],"r");      imageNoData=image.getNoDataValue();      String label="Loop " + String.valueOf(a + 1) + " of "+ String.valueOf(numImages)+ ":";      if (a == 0) {        rows=image.getNumberRows();        cols=image.getNumberColumns();        outputNoData=imageNoData;        output=new WhiteboxRaster(outputHeader,"rw",imageFiles[0],WhiteboxRaster.DataType.FLOAT,outputNoData);        output.setPreferredPalette(image.getPreferredPalette());      } else {        if (image.getNumberColumns() != cols || image.getNumberRows() != rows) {          showFeedback("All input images must have the same dimensions (rows and columns).");          return;        }      }      for (row=0; row < rows; row++) {        data=image.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] != imageNoData) {            z=output.getValue(row,col);            if (z != outputNoData) {              if (data[col] > z) {                output.setValue(row,col,data[col]);              }            } else {              output.setValue(row,col,data[col]);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(label,progress);      }      image.close();      progress=a / (numImages - 1) * 100;      updateProgress("Calculating image average:",(int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private boolean isPartitionRegular(String partition){  return RegularPartitionPattern.matcher(partition).find();}  }
class C{  public PdfRendererBuilder withW3cDocument(org.w3c.dom.Document doc,String baseUri){  this._document=doc;  this._baseUri=baseUri;  return this;}  }
class C{  public void installUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).installUI(a);  }}  }
class C{  @Override public void close() throws IOException {}  }
class C{  @SuppressWarnings("unchecked") public LinkedHashTreeMap(){  this((Comparator<? super K>)NATURAL_ORDER);}  }
class C{  public double SumInlinkHubScore(Page page){  List<String> inLinks=page.getInlinks();  double hubScore=0;  for (int i=0; i < inLinks.size(); i++) {    Page inLink=pTable.get(inLinks.get(i));    if (inLink != null) {      hubScore+=inLink.hub;    } else {      continue;    }  }  return hubScore;}  }
class C{  public static String normalizeSlashes(String path){  return path.replaceAll("\\\\","/");}  }
class C{  public static Integer makeInteger(String s){  if (WWUtil.isEmpty(s)) {    return null;  }  try {    return Integer.valueOf(s);  } catch (  NumberFormatException e) {    return null;  }}  }
class C{  private void checkCamelCase(Element e,boolean initialCaps){  String name=e.getSimpleName().toString();  boolean previousUpper=false;  boolean conventional=true;  int firstCodePoint=name.codePointAt(0);  if (Character.isUpperCase(firstCodePoint)) {    previousUpper=true;    if (!initialCaps) {      messager.printMessage(WARNING,"Name, ``" + name + "'', should start in lowercase.",e);      return;    }  } else   if (Character.isLowerCase(firstCodePoint)) {    if (initialCaps) {      messager.printMessage(WARNING,"Name, ``" + name + "'', should start in uppercase.",e);      return;    }  } else   conventional=false;  if (conventional) {    int cp=firstCodePoint;    for (int i=Character.charCount(cp); i < name.length(); i+=Character.charCount(cp)) {      cp=name.codePointAt(i);      if (Character.isUpperCase(cp)) {        if (previousUpper) {          conventional=false;          break;        }        previousUpper=true;      } else       previousUpper=false;    }  }  if (!conventional)   messager.printMessage(WARNING,"Name, ``" + name + "'', should be in camel case.",e);}  }
class C{  public String group(){  return group(0);}  }
class C{  public synchronized boolean addJob(Job jobToAdd){  LOG.debug("Adding job " + jobToAdd + " requiring locks "+ jobToAdd.getRequiredLocks());  LockSet lockSet=jobToAdd.getRequiredLocks();  if (canGetAllLocks(jobToAdd)) {    for (    String exclusiveLock : lockSet.getExclusiveLocks()) {      grantExclusiveLock(exclusiveLock,jobToAdd);      addLockToJobsNeedingLock(exclusiveLock,jobToAdd);    }    for (    String sharedLock : lockSet.getSharedLocks()) {      grantSharedLock(sharedLock,jobToAdd);      addLockToJobsNeedingLock(sharedLock,jobToAdd);    }    jobsWithAllRequiredLocks.add(jobToAdd);    return true;  }  Set<Job> parents=new HashSet<>();  for (  String exclusiveLockToGet : lockSet.getExclusiveLocks()) {    if (!lockToJobsNeedingLock.containsKey(exclusiveLockToGet)) {      continue;    }    List<Job> jobs=lockToJobsNeedingLock.get(exclusiveLockToGet);    for (int i=jobs.size() - 1; i >= 0; i--) {      Job otherJob=jobs.get(i);      Lock.Type requiredLockType=otherJob.getRequiredLocks().getType(exclusiveLockToGet);      if (requiredLockType == Lock.Type.EXCLUSIVE) {        parents.add(otherJob);        break;      } else       if (requiredLockType == Lock.Type.SHARED) {        parents.add(otherJob);      }    }  }  for (  String lockToGet : lockSet.getSharedLocks()) {    if (!lockToJobsNeedingLock.containsKey(lockToGet)) {      continue;    }    List<Job> jobs=lockToJobsNeedingLock.get(lockToGet);    for (int i=jobs.size() - 1; i >= 0; i--) {      Job otherJob=jobs.get(i);      Lock.Type requiredLockType=otherJob.getRequiredLocks().getType(lockToGet);      if (requiredLockType == Lock.Type.EXCLUSIVE) {        parents.add(otherJob);        break;      }    }  }  if (parents.size() == 0) {    throw new RuntimeException("Shouldn't happen!");  }  for (  Job parent : parents) {    jobToAdd.addParent(parent);    parent.addChild(jobToAdd);  }  for (  String lock : lockSet.getExclusiveLocks()) {    addLockToJobsNeedingLock(lock,jobToAdd);  }  for (  String lock : lockSet.getSharedLocks()) {    addLockToJobsNeedingLock(lock,jobToAdd);  }  LOG.debug("Added job " + jobToAdd + " with parents "+ parents);  return false;}  }
class C{  public int size(){  return m_Size;}  }
class C{  public static int murmurhash3_x86_32(byte[] data,int offset,int len,int seed){  final int c1=0xcc9e2d51;  final int c2=0x1b873593;  int h1=seed;  int roundedEnd=offset + (len & 0xfffffffc);  for (int i=offset; i < roundedEnd; i+=4) {    int k1=(data[i] & 0xff) | ((data[i + 1] & 0xff) << 8) | ((data[i + 2] & 0xff) << 16)| (data[i + 3] << 24);    k1*=c1;    k1=(k1 << 15) | (k1 >>> 17);    k1*=c2;    h1^=k1;    h1=(h1 << 13) | (h1 >>> 19);    h1=h1 * 5 + 0xe6546b64;  }  int k1=0;  int r=len & 0x03;  if (r == 3) {    k1=(data[roundedEnd + 2] & 0xff) << 16;  } else   if (r == 2) {    k1|=(data[roundedEnd + 1] & 0xff) << 8;  } else   if (r == 1) {    k1|=(data[roundedEnd] & 0xff);    k1*=c1;    k1=(k1 << 15) | (k1 >>> 17);    k1*=c2;    h1^=k1;  }  h1^=len;  h1^=h1 >>> 16;  h1*=0x85ebca6b;  h1^=h1 >>> 13;  h1*=0xc2b2ae35;  h1^=h1 >>> 16;  return h1;}  }
class C{  void clear(){  if (mViewTypeCount == 1) {    final ArrayList<View> scrap=mCurrentScrap;    final int scrapCount=scrap.size();    for (int i=0; i < scrapCount; i++) {      removeDetachedView(scrap.remove(scrapCount - 1 - i),false);    }  } else {    final int typeCount=mViewTypeCount;    for (int i=0; i < typeCount; i++) {      final ArrayList<View> scrap=mScrapViews[i];      final int scrapCount=scrap.size();      for (int j=0; j < scrapCount; j++) {        removeDetachedView(scrap.remove(scrapCount - 1 - j),false);      }    }  }  if (mTransientStateViews != null) {    mTransientStateViews.clear();  }}  }
class C{  private void handlePossibleCancellationInterrupt(int s){  if (s == INTERRUPTING)   while (state == INTERRUPTING)   Thread.yield();}  }
class C{  public TestParams excludeParams(String method){  mExcludeParams.add(method);  return this;}  }
class C{  public long longValue(){  return value;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:12.834 -0500",hash_original_method="886709B501C0AFC116858EC5EEF3AF72",hash_generated_method="FF7142E40F3C67BB9E9DD08AA3829490") public MessageChannel createMessageChannel(HostPort targetHostPort) throws UnknownHostException {  return new UDPMessageChannel(targetHostPort.getInetAddress(),targetHostPort.getPort(),sipStack,this);}  }
class C{  public boolean declaresMethod(String name,List parameterTypes){  checkLevel(SIGNATURES);  Iterator<SootMethod> methodIt=methodIterator();  while (methodIt.hasNext()) {    SootMethod method=methodIt.next();    if (method.getName().equals(name) && method.getParameterTypes().equals(parameterTypes))     return true;  }  return false;}  }
class C{  public static void readFully(InputStream in,byte[] dst) throws IOException {  readFully(in,dst,0,dst.length);}  }
class C{  public static Resource[] decodeContexts(String[] encodedValues,ValueFactory valueFactory){  Resource[] result;  if (encodedValues == null) {    result=new Resource[0];  } else {    result=new Resource[encodedValues.length];    for (int index=0; index < encodedValues.length; index++) {      result[index]=decodeContext(encodedValues[index],valueFactory);    }  }  return result;}  }
class C{  @SuppressWarnings("unchecked") public static <T extends Packet>void registerOutListener(final Class<T> type,Player player,Predicate<T> listener){  NetworkManagerWrapper wrapper=wrapNetworkManager(player);  wrapper.registerOutgoingListener(type,listener);}  }
class C{  void cleanup(){}  }
class C{  public Node removeFirst(){  Node node=header.getNextNode();  firstByte+=node.ba.last();  return removeNode(node);}  }
class C{  public static double sinh(double value){  if (USE_JDK_MATH) {    return Math.sinh(value);  }  double h;  if (value < 0.0) {    value=-value;    h=-0.5;  } else {    h=0.5;  }  if (value < 22.0) {    if (value < TWO_POW_N28) {      return h < 0.0 ? -value : value;    } else {      final double t=expm1(value);      return h * (t + t / (t + 1.0));    }  } else   if (value < LOG_DOUBLE_MAX_VALUE) {    return h * exp(value);  } else {    final double t=exp(value * 0.5);    return h * t * t;  }}  }
class C{  public static XObject eval(Node contextNode,String str) throws TransformerException {  return eval(contextNode,str,contextNode);}  }
class C{  public void addItem(Item item){synchronized (items) {    items.add(item);  }}  }
class C{  protected void doParse() throws ParseException, IOException {  angleHandler.startAngle();  current=reader.read();  skipSpaces();  try {    float f=parseFloat();    angleHandler.angleValue(f);    s:     if (current != -1) {switch (current) {case 0xD:case 0xA:case 0x20:case 0x9:        break s;    }switch (current) {case 'd':      current=reader.read();    if (current != 'e') {      reportCharacterExpectedError('e',current);      break;    }  current=reader.read();if (current != 'g') {  reportCharacterExpectedError('g',current);  break;}angleHandler.deg();current=reader.read();break;case 'g':current=reader.read();if (current != 'r') {reportCharacterExpectedError('r',current);break;}current=reader.read();if (current != 'a') {reportCharacterExpectedError('a',current);break;}current=reader.read();if (current != 'd') {reportCharacterExpectedError('d',current);break;}angleHandler.grad();current=reader.read();break;case 'r':current=reader.read();if (current != 'a') {reportCharacterExpectedError('a',current);break;}current=reader.read();if (current != 'd') {reportCharacterExpectedError('d',current);break;}angleHandler.rad();current=reader.read();break;default :reportUnexpectedCharacterError(current);}}skipSpaces();if (current != -1) {reportError("end.of.stream.expected",new Object[]{new Integer(current)});}} catch (NumberFormatException e) {reportUnexpectedCharacterError(current);}angleHandler.endAngle();}  }
class C{  protected String buildRegex2(Map<String,List<String>> tags){  SortedMap<Integer,List<Integer>> tagHash=new TreeMap<Integer,List<Integer>>();  for (  Map.Entry<String,List<String>> entry : tags.entrySet()) {    String tagName=entry.getKey();    List<String> stringValues=entry.getValue();    List<Integer> hashValues=new ArrayList<Integer>(1);    for (    String value : stringValues) {      hashValues.add(value.hashCode());    }    tagHash.put(tagName.hashCode(),hashValues);  }  StringBuilder sb=new StringBuilder();  sb.append("(?s)");  sb.append("^(?:.{12})");  sb.append("(?:.{").append(8).append("})*");  for (  Map.Entry<Integer,List<Integer>> entry : tagHash.entrySet()) {    try {      sb.append("\\Q");      sb.append(new String(ByteUtil.intToBytes(entry.getKey()),"ISO-8859-1")).append("\\E");      List<Integer> hashValues=entry.getValue();      sb.append("(?:");      boolean first=true;      for (      Integer value : hashValues) {        if (!first) {          sb.append('|');        }        sb.append("\\Q");        sb.append(new String(ByteUtil.intToBytes(value),"ISO-8859-1"));        sb.append("\\E");        first=false;      }      sb.append(")");      sb.append("(?:.{").append(8).append("})*");    } catch (    Exception ex) {      LOG.error("Constructing regex error",ex);    }  }  sb.append("$");  if (LOG.isDebugEnabled()) {    LOG.debug("Pattern is " + sb.toString());  }  return sb.toString();}  }
class C{  protected FinalizableWeakReference(T referent,FinalizableReferenceQueue queue){  super(referent,queue.queue);  queue.cleanUp();}  }
class C{  public static Paint newBackgroundPaint(Context context){  final Paint paint=new Paint();  paint.setColor(Color.parseColor(DEFAULT_BACKGROUND_COLOR_ID));  return paint;}  }
class C{  public void abort(){}  }
class C{  public static <T extends ServiceDocument>boolean mergeWithState(T currentState,Operation op) throws NoSuchFieldException, IllegalAccessException {  ServiceStateCollectionUpdateRequest requestBody=op.getBody(ServiceStateCollectionUpdateRequest.class);  if (ServiceStateCollectionUpdateRequest.KIND.equals(requestBody.kind)) {    Utils.updateCollections(currentState,requestBody);    return true;  }  return false;}  }
class C{  public void replaceDefaultTables() throws EclipseLinkException {  replaceDefaultTables(true,true,true);}  }
class C{  public CourtHouse(){  super();}  }
class C{  public NickAlreadyInUseException(String e){  super(e);}  }
class C{  public void searchStarted(String searchString){  int index=filterPopup.getSelectionModel().getSelectedIndex();  if (index == -1)   index=0;  TreeViewer.TextSearchType searchType=TreeViewer.TextSearchType.values()[index];  treeViewer.selectTaxa("!name",searchType,searchString,false);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:49.228 -0500",hash_original_method="8ABD66F1955A5164E5EB5D68E76EE993",hash_generated_method="74DEFB6A6A350EBAE0C8DB21B4AF57E7") protected boolean isHttpSeparator(char ch){  return (HTTP_SEPARATORS.indexOf(ch) >= 0);}  }
class C{  public void paintText(SynthContext ss,Graphics g,String text,int x,int y,int mnemonicIndex){  if (text != null) {    JComponent c=ss.getComponent();    FontMetrics fm=SwingUtilities2.getFontMetrics(c,g);    y+=fm.getAscent();    SwingUtilities2.drawStringUnderlineCharAt(c,g,text,mnemonicIndex,x,y);  }}  }
class C{  public void prepareForEmptyTile(MapTileFactory factory){  EmptyTileHandler empTileHandler=factory.getEmptyTileHandler();  if (empTileHandler instanceof SimpleEmptyTileHandler) {    ((SimpleEmptyTileHandler)empTileHandler).setNoCoverageAtts(null);  }}  }
class C{  protected GlassfishUpdater(){}  }
class C{  public boolean hasMoreElements(){  return this.iterator.hasNext();}  }
class C{  public void processComment(Token<HtmlTokenType> commentToken){  String text=commentToken.text.substring("<!--".length(),commentToken.text.lastIndexOf("--"));  Comment comment=doc.createComment(text);  comment.setUserData("COMMENT_TYPE",commentToken.type.toString(),null);  if (needsDebugData) {    Nodes.setFilePositionFor(comment,commentToken.pos);  }  doAppend(comment,getBottom().n);}  }
class C{  @Inline(value=Inline.When.ArgumentsAreConstant,arguments={1}) private static void checkReadAccess(Object obj,RVMField field,Field jlrField,RVMClass accessingClass) throws IllegalAccessException, IllegalArgumentException, ExceptionInInitializerError {  RVMClass declaringClass=field.getDeclaringClass();  if (!field.isStatic()) {    if (obj == null) {      throwNewNullPointerException();    }    RVMType objType=ObjectModel.getObjectType(obj);    if (objType != declaringClass && !RuntimeEntrypoints.isAssignableWith(declaringClass,objType)) {      throwNewIllegalArgumentException();    }  }  if (!field.isPublic() && !jlrField.isAccessible()) {    checkAccess(field,accessingClass);  }  if (field.isStatic() && !declaringClass.isInitialized()) {    runClassInitializer(declaringClass);  }}  }
class C{  public void indicate(EventBean newEvent,EventBean oldEvent){  try {    if (statementResultService.isMakeNatural()) {      NaturalEventBean natural=new NaturalEventBean(eventType,new Object[]{newEvent.getUnderlying()},newEvent);      NaturalEventBean naturalOld=new NaturalEventBean(eventType,new Object[]{oldEvent.getUnderlying()},oldEvent);      this.updateChildren(new NaturalEventBean[]{natural},new NaturalEventBean[]{naturalOld});    } else {      this.updateChildren(new EventBean[]{newEvent},new EventBean[]{oldEvent});    }  } catch (  RuntimeException ex) {    log.error("Unexpected error updating child view: " + ex.getMessage());  }}  }
class C{  public GenericFeed retrieveFirstPageOfOrganizationUsersByOrgUnit(String customerId,String orgUnitPath) throws AppsForYourDomainException, MalformedURLException, IOException, ServiceException {  return service.getFeed(new URL("https://apps-apis.google.com/a/feeds/orguser/2.0/" + customerId + "?get=children&orgUnitPath="+ URLEncoder.encode(orgUnitPath,"UTF-8")),GenericFeed.class);}  }
class C{  public static IUser editUserName(final SQLProvider provider,final IUser user,final String userName) throws CouldntSaveDataException {  Preconditions.checkNotNull(provider,"IE00117: provider argument can not be null");  Preconditions.checkNotNull(user,"IE00118: user argument can not be null");  Preconditions.checkNotNull(userName,"IE00205: userName argument can not be null");  final Connection connection=provider.getConnection().getConnection();  final String query="UPDATE " + CTableNames.USER_TABLE + " SET user_name = ? WHERE user_id = ?;";  try (PreparedStatement statement=connection.prepareStatement(query)){    statement.setString(1,userName);    statement.setInt(2,user.getUserId());    statement.execute();  } catch (  final SQLException exception) {    throw new CouldntSaveDataException(exception);  }  return new CUser(user.getUserId(),userName);}  }
class C{  public static void convertChildPropToParentProp(final Configuration childConfig,final Configuration parentConfig,final String parentPropertyName){  final String childValue=parentConfig.get(parentPropertyName + MergeTool.CHILD_SUFFIX,"");  childConfig.set(parentPropertyName,childValue);}  }
class C{  protected SVGStylableElement(String prefix,AbstractDocument owner){  super(prefix,owner);  initializeLiveAttributes();}  }
class C{  private void assertGraphInNamedDataset(final BigdataURI uri,final DatasetNode dataSet){  if (dataSet == null) {    return;  }  if (uri == null)   throw new IllegalArgumentException();  final DataSetSummary namedGraphs=dataSet.getNamedGraphs();  if (namedGraphs == null) {    return;  }  if (!namedGraphs.getGraphs().contains(uri.getIV())) {  }}  }
class C{  public Fasts(Graph graph,IndependenceTest test){  this.graph=graph;  this.test=test;}  }
class C{  protected void fixComposedWordEndOffset(CompletionInitializationContext context){  PsiElement element=context.getFile().findElementAt(context.getStartOffset());  if (element == null) {    return;  }  OffsetMap offsetMap=context.getOffsetMap();  if (endTokens.contains(element.getNode().getElementType())) {    offsetMap.addOffset(START_OFFSET,element.getTextOffset());    offsetMap.addOffset(IDENTIFIER_END_OFFSET,element.getTextOffset());    return;  }  if (wordTokens.contains(element.getNode().getElementType())) {    if (fixReplacementOffsetInString(element,offsetMap)) {      return;    }  }  if (!(element instanceof BashWord)) {    element=element.getParent();  }  if (element instanceof BashWord) {    offsetMap.addOffset(START_OFFSET,element.getTextOffset());    if (!fixReplacementOffsetInString(element,offsetMap)) {      offsetMap.addOffset(IDENTIFIER_END_OFFSET,element.getTextRange().getEndOffset());    }  }}  }
class C{  public void delete(int key){  int i=ContainerHelpers.binarySearch(mKeys,mSize,key);  if (i >= 0) {    System.arraycopy(mKeys,i + 1,mKeys,i,mSize - (i + 1));    System.arraycopy(mValues,i + 1,mValues,i,mSize - (i + 1));    mSize--;  }}  }
class C{  @Override public void actionPerformed(ActionEvent event){  String command=event.getActionCommand();  double screenX=-1.0;  double screenY=-1.0;  if (this.zoomPoint != null) {    screenX=this.zoomPoint.getX();    screenY=this.zoomPoint.getY();  }  if (command.equals(PROPERTIES_COMMAND)) {    doEditChartProperties();  } else   if (command.equals(COPY_COMMAND)) {    doCopy();  } else   if (command.equals(SAVE_AS_PNG_COMMAND)) {    try {      doSaveAs();    } catch (    IOException e) {      JOptionPane.showMessageDialog(this,"I/O error occurred.",localizationResources.getString("Save_as_PNG"),JOptionPane.WARNING_MESSAGE);    }  } else   if (command.equals(SAVE_AS_SVG_COMMAND)) {    try {      saveAsSVG(null);    } catch (    IOException e) {      JOptionPane.showMessageDialog(this,"I/O error occurred.",localizationResources.getString("Save_as_SVG"),JOptionPane.WARNING_MESSAGE);    }  } else   if (command.equals(SAVE_AS_PDF_COMMAND)) {    saveAsPDF(null);  } else   if (command.equals(PRINT_COMMAND)) {    createChartPrintJob();  } else   if (command.equals(ZOOM_IN_BOTH_COMMAND)) {    zoomInBoth(screenX,screenY);  } else   if (command.equals(ZOOM_IN_DOMAIN_COMMAND)) {    zoomInDomain(screenX,screenY);  } else   if (command.equals(ZOOM_IN_RANGE_COMMAND)) {    zoomInRange(screenX,screenY);  } else   if (command.equals(ZOOM_OUT_BOTH_COMMAND)) {    zoomOutBoth(screenX,screenY);  } else   if (command.equals(ZOOM_OUT_DOMAIN_COMMAND)) {    zoomOutDomain(screenX,screenY);  } else   if (command.equals(ZOOM_OUT_RANGE_COMMAND)) {    zoomOutRange(screenX,screenY);  } else   if (command.equals(ZOOM_RESET_BOTH_COMMAND)) {    restoreAutoBounds();  } else   if (command.equals(ZOOM_RESET_DOMAIN_COMMAND)) {    restoreAutoDomainBounds();  } else   if (command.equals(ZOOM_RESET_RANGE_COMMAND)) {    restoreAutoRangeBounds();  }}  }
class C{  public JComboBox<String> fullRosterComboBox(){  return matchingComboBox(null,null,null,null,null,null,null,null,null,null);}  }
class C{  void discardCompilationUnit(final ICompilationUnit u){  try {    u.close();    u.delete(true,null);  } catch (  final JavaModelException e) {    monitor.logEvaluationError(this,e);  }catch (  final NullPointerException e) {    monitor.logEvaluationError(this,e);  }}  }
class C{  public boolean hasNegativeCycle(){  return hasNegativeCycle;}  }
class C{  private void run(){  try {    Pdu loginPdu=clientConnection.getIn().read();    Message loginMessage=messageFactory.fromPdu(loginPdu);    if (loginMessage.getType() != Login) {      throw new IllegalStateException("Expected Login");    }    Long userId=loginMessage.getLong("userId");    if (userId == null) {      throw new PduException("No user id in login");    }    sessionState.setUserId(userId);    Object clientSeed=loginMessage.get("clientSeed");    if (clientSeed == null || !(clientSeed instanceof Integer)) {      throw new PduException("Expected client seed in login message");    }    Clash7Random prng=new Clash7Random((Integer)clientSeed);    Message encryptionMessage=messageFactory.newMessage(Encryption);    byte[] nonce=new byte[24];    ThreadLocalRandom.current().nextBytes(nonce);    encryptionMessage.set("serverRandom",nonce);    encryptionMessage.set("version",1);    clientConnection.getOut().write(messageFactory.toPdu(encryptionMessage));    clientConnection.setKey(prng.scramble(nonce));    Message loginOkMessage=messageFactory.newMessage(LoginOk);    loginOkMessage.set("userId",userId);    loginOkMessage.set("homeId",userId);    loginOkMessage.set("userToken",loginMessage.get("userToken"));    loginOkMessage.set("majorVersion",loginMessage.get("majorVersion"));    loginOkMessage.set("minorVersion",loginMessage.get("minorVersion"));    loginOkMessage.set("environment","prod");    loginOkMessage.set("loginCount",1);    loginOkMessage.set("timeOnline",1);    loginOkMessage.set("lastLoginDate","" + System.currentTimeMillis() / 1000);    loginOkMessage.set("country","US");    clientConnection.getOut().write(messageFactory.toPdu(loginOkMessage));    clientConnection.getOut().write(messageFactory.toPdu(loadHome()));    processRequests(clientConnection);  } catch (  PduException|IOException e) {    log.error("Key exchange did not complete: " + e,e);  }}  }
class C{  public TableIterableBuilder withSystemTablesOnly(){  setIncludeNormalTables(false);  setIncludeSystemTables(true);  return setIncludeLinkedTables(false);}  }
class C{  protected void skipped(AssumptionViolatedException e,Description description){  org.junit.internal.AssumptionViolatedException asInternalException=e;  skipped(asInternalException,description);}  }
class C{  @Deprecated private void prepareBackendVolumeForMigration(StorageSystem vplexSystem,Volume virtualVolume,Volume sourceVolume,VirtualArray varray,VirtualPool vpool,Long capacity,String taskId,List<URI> newVolumes,Map<URI,URI> migrationMap,Map<URI,URI> poolVolumeMap){  URI sourceVolumeURI=null;  Project targetProject=null;  String targetLabel=null;  if (sourceVolume != null) {    sourceVolumeURI=sourceVolume.getId();    targetProject=_dbClient.queryObject(Project.class,sourceVolume.getProject().getURI());    targetLabel=sourceVolume.getLabel();    if (!targetLabel.endsWith(MIGRATION_LABEL_SUFFIX)) {      targetLabel+=MIGRATION_LABEL_SUFFIX;    } else {      targetLabel=targetLabel.substring(0,targetLabel.length() - 1);    }  } else {    targetProject=getVplexProject(vplexSystem,_dbClient,_tenantsService);    targetLabel=virtualVolume.getLabel();    if (virtualVolume.getVirtualArray().equals(varray.getId())) {      targetLabel+=SRC_BACKEND_VOL_LABEL_SUFFIX;    } else {      targetLabel+=HA_BACKEND_VOL_LABEL_SUFFIX;    }  }  URI cgURI=null;  if (!NullColumnValueGetter.isNullURI(sourceVolume.getConsistencyGroup())) {    cgURI=sourceVolume.getConsistencyGroup();  }  Set<URI> requestedVPlexSystems=new HashSet<URI>();  requestedVPlexSystems.add(vplexSystem.getId());  VirtualPoolCapabilityValuesWrapper cosWrapper=new VirtualPoolCapabilityValuesWrapper();  cosWrapper.put(VirtualPoolCapabilityValuesWrapper.SIZE,capacity);  cosWrapper.put(VirtualPoolCapabilityValuesWrapper.RESOURCE_COUNT,new Integer(1));  if (cgURI != null) {    cosWrapper.put(VirtualPoolCapabilityValuesWrapper.BLOCK_CONSISTENCY_GROUP,cgURI);  }  List<Recommendation> recommendations=getBlockScheduler().scheduleStorage(varray,requestedVPlexSystems,null,vpool,false,null,null,cosWrapper,targetProject,VpoolUse.ROOT,new HashMap<VpoolUse,List<Recommendation>>());  if (recommendations.isEmpty()) {    throw APIException.badRequests.noStorageFoundForVolumeMigration(vpool.getLabel(),varray.getLabel(),sourceVolumeURI);  }  s_logger.info("Got recommendation");  URI targetStorageSystem=recommendations.get(0).getSourceStorageSystem();  URI targetStoragePool=recommendations.get(0).getSourceStoragePool();  Volume targetVolume=prepareVolumeForRequest(capacity,targetProject,varray,vpool,targetStorageSystem,targetStoragePool,targetLabel,ResourceOperationTypeEnum.CREATE_BLOCK_VOLUME,taskId,_dbClient);  if (cgURI != null) {    targetVolume.setConsistencyGroup(cgURI);  }  targetVolume.addInternalFlags(Flag.INTERNAL_OBJECT);  _dbClient.updateObject(targetVolume);  s_logger.info("Prepared volume {}",targetVolume.getId());  URI targetVolumeURI=targetVolume.getId();  newVolumes.add(targetVolumeURI);  poolVolumeMap.put(targetStoragePool,targetVolumeURI);  Migration migration=prepareMigration(virtualVolume.getId(),sourceVolumeURI,targetVolumeURI,taskId);  migrationMap.put(targetVolumeURI,migration.getId());  s_logger.info("Prepared migration {}.",migration.getId());}  }
class C{  private boolean isIncluded_L2(final IRepFilterBean filterBean,final Context context){switch ((FilterBy)filterBean.getFilterBy()) {case ALL_CHAT_MESSAGES:    if (context.replay.getMessageEvents() != null)     for (    final IEvent e : context.replay.getMessageEvents().getEvents())     if (e.getId() == IMessageEvents.ID_CHAT)     if (!evalTextOp((String)filterBean.getValue(),(Operator)filterBean.getOperator(),((IChatEvent)e).getText()))     return false;  return true;case ANY_CHAT_MESSAGE:if (context.replay.getMessageEvents() != null) for (final IEvent e : context.replay.getMessageEvents().getEvents()) if (e.getId() == IMessageEvents.ID_CHAT) if (evalTextOp((String)filterBean.getValue(),(Operator)filterBean.getOperator(),((IChatEvent)e).getText())) return true;return false;case APM:return evalIntegerOp(filterBean,context.user.getApm());case AVG_APM:return evalIntegerOp(filterBean,context.repProc.getAvgAPM());case AVG_LEAGUE:return evalEnumOp(filterBean,(League)context.repProc.getAvgLeague());case AVG_LEVELS:return evalIntegerOp(filterBean,context.repProc.getAvgLevels());case AVG_SPM:return evalIntegerOp(filterBean,context.repProc.getAvgSPM());case AVG_SQ:return evalIntegerOp(filterBean,context.repProc.getAvgSQ());case AVG_SUPPLY_CAPPED:return evalIntegerOp(filterBean,context.repProc.getAvgSupplyCappedPercent());case BASE_BUILD:return evalIntegerOp(filterBean,context.replay.getHeader().getBaseBuild());case BUILD_NUMBER:return evalIntegerOp(filterBean,context.replay.getHeader().getBuild());case CHAT_MESSAGES_COUNT:return evalIntegerOp(filterBean,context.repProc.getChatMessagesCount());case CLAN:return evalTextOp(filterBean,context.user.getUid() == null ? null : context.user.getUid().getClanTag());case COLOR:return evalEnumOp(filterBean,(PlayerColor)context.user.getSlot().getPlayerColor());case COMPETITIVE:return evalBoolOp(filterBean,context.gd.getCompetitiveOrRanked());case CONTROL:return evalEnumOp(filterBean,(Controller)context.user.getSlot().getController());case EXPANSION:return evalEnumOp(filterBean,(ExpansionLevel)context.gd.getExpansionLevel());case FILE_ACCESSED:try {final BasicFileAttributes attr=Files.readAttributes(context.repProc.getFile(),BasicFileAttributes.class);return evalDateOp(filterBean,attr.lastAccessTime().toMillis());} catch (final IOException ie) {Env.LOGGER.error("Failed to get file attributes: " + context.repProc.getFile(),ie);return false;}case FILE_CREATED:try {final BasicFileAttributes attr=Files.readAttributes(context.repProc.getFile(),BasicFileAttributes.class);return evalDateOp(filterBean,attr.creationTime().toMillis());} catch (final IOException ie) {Env.LOGGER.error("Failed to get file attributes: " + context.repProc.getFile(),ie);return false;}case FILE_MODIFIED:try {return evalDateOp(filterBean,Files.getLastModifiedTime(context.repProc.getFile()).toMillis());} catch (final IOException ie) {Env.LOGGER.error("Failed to get file last modified time: " + context.repProc.getFile(),ie);return false;}case FILE_NAME:return evalTextOp(filterBean,context.repProc.getFile().getFileName().toString());case FILE_PATH:return evalTextOp(filterBean,context.repProc.getFile().toString());case FILE_SIZE:try {return evalIntegerOp(filterBean,(int)Files.size(context.repProc.getFile()));} catch (final IOException ie) {Env.LOGGER.error("Failed to get file size: " + context.repProc.getFile(),ie);return false;}case FORMAT:return evalEnumOp(filterBean,(Format)context.repProc.getFormat());case FULL_NAME:return evalTextOp(filterBean,context.user.getFullName());case GAME_MODE:return evalEnumOp(filterBean,(GameMode)context.replay.getAttributesEvents().getGameMode());case GAME_SPEED:return evalEnumOp(filterBean,(GameSpeed)context.gd.getGameSpeed());case LEAGUE:return evalEnumOp(filterBean,(League)(context.user.getUid() == null ? null : context.user.getUid().getHighestLeague()));case LEAGUE_MATCHUP:if (filterBean.getOperator() == Operator.MATCHES) return evalTextOp(filterBean,RepUtils.normalizeMatchup(context.repProc.getLeagueMatchup())); else {String normu=matchupNormuMap.get(filterBean.getValue());if (normu == null) matchupNormuMap.put((String)filterBean.getValue(),normu=RepUtils.normalizeMatchup((String)filterBean.getValue()));return evalTextOp(normu,(Operator)filterBean.getOperator(),RepUtils.normalizeMatchup(context.repProc.getLeagueMatchup()));}case LENGTH:return evalIntegerOp(filterBean,(int)(context.repProc.getLengthMs() / 1000));case LEVELS:return evalIntegerOp(filterBean,context.user.getUid() == null ? null : context.user.getUid().getCombinedRaceLevels());case MAP_FILE_NAME:{final ICacheHandle cacheHandle=context.repProc.getMapCacheHandle();return evalTextOp(filterBean,cacheHandle == null ? null : cacheHandle.getFileName());}case MAP_HEIGHT:return evalIntegerOp(filterBean,context.gd.getMapSizeY());case MAP_NAME:return evalTextOp(filterBean,context.replay.getDetails().getTitle());case MAP_WIDTH:return evalIntegerOp(filterBean,context.gd.getMapSizeX());case NAME:return evalTextOp(filterBean,context.user.getName());case BETA_PTR:return evalBoolOp(filterBean,Protocol.BETA_BASE_BUILD_SET.contains(context.replay.getHeader().getBaseBuild()));case RACE:return evalEnumOp(filterBean,(Race)(filterBean.getValue() == Race.RANDOM ? context.user.getSlot().getChosenRace() : context.user.getPlayer().getRace()));case RACE_MATCHUP:if (filterBean.getOperator() == Operator.MATCHES) return evalTextOp(filterBean,RepUtils.normalizeMatchup(context.repProc.getRaceMatchup())); else {String normu=matchupNormuMap.get(filterBean.getValue());if (normu == null) matchupNormuMap.put((String)filterBean.getValue(),normu=RepUtils.normalizeMatchup((String)filterBean.getValue()));return evalTextOp(normu,(Operator)filterBean.getOperator(),RepUtils.normalizeMatchup(context.repProc.getRaceMatchup()));}case REGION:return evalEnumOp(filterBean,(Region)context.gd.getRegion());case REPLAY_DATE:return evalDateOp(filterBean,context.replay.getDetails().getTime());case RESULT:return evalEnumOp(filterBean,(Result)context.user.getPlayer().getResult());case SPM:return evalIntegerOp(filterBean,context.user.getSpm());case SQ:return evalIntegerOp(filterBean,context.user.getSq());case START_DIR:return evalIntegerOp(filterBean,context.user.getStartDirection());case SUPPLY_CAPPED:return evalIntegerOp(filterBean,context.user.getSupplyCappedPercent());case TEAM:return evalIntegerOp(filterBean,context.user.getSlot().getTeamId() + 1);case TOON:{final IToon toon=context.user.getToon();return evalTextOp(filterBean,toon == null ? null : toon.toString());}case VERSION:return evalVersionOp(filterBean,context.replay.getHeader().getVersionView());default :throw new RuntimeException("Unhandled filter by: " + filterBean.getFilterBy());}}  }
class C{  static public int copyDirectory(StringBuffer out,StringBuffer err,String source,String destination){  return ThreadedSynchronousStreamReader.exec(out,err,getCopyDirectoryArgs(source,destination));}  }
class C{  static ReviewsFragment newInstance(long restaurantId,Type type,boolean addReview){  ReviewsFragment frag=new ReviewsFragment();  frag.mRestaurantId=restaurantId;  frag.mTypeId=type.id;  frag.mEditing=addReview;  return frag;}  }
class C{  private Response save(Response response){  String jsonBody;  String key=response.request().url().toString();  log("----- SAVE FOR OFFLINE : saving starts");  log("---------- for request : " + key);  log("---------- trying to parse response body");  BufferedReader reader;  StringBuilder sb=new StringBuilder();  log("---------- trying to parse response body");  InputStream bodyStream=response.body().byteStream();  InputStreamReader bodyReader=new InputStreamReader(bodyStream,Charset.forName("UTF-8"));  reader=new BufferedReader(bodyReader);  String line;  try {    while ((line=reader.readLine()) != null) {      sb.append(line);    }    bodyReader.close();    bodyReader.close();    reader.close();  } catch (  IOException e) {    Log.e(TAG,"IOException : " + e.getMessage());  }  jsonBody=sb.toString();  log("---------- trying to save response body for offline");  mCacheQueryHandler.put(key,jsonBody);  log("---------- url : " + key);  log("---------- body : " + jsonBody);  log("----- SAVE FOR OFFLINE : saving ends");  return response.newBuilder().body(ResponseBody.create(response.body().contentType(),jsonBody)).build();}  }
class C{  private static boolean test3() throws Exception {  return doTest("3",null);}  }
class C{  @MediumTest public void testBindable(){  Intent startIntent=new Intent();  startIntent.setClass(getContext(),LocalService.class);  IBinder service=bindService(startIntent);}  }
class C{  public static DuplicateEventException parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  DuplicateEventException object=new DuplicateEventException();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");    if ("true".equals(nillableValue) || "1".equals(nillableValue)) {      while (!reader.isEndElement())       reader.next();      return object;    }    java.util.Vector handledAttributes=new java.util.Vector();    while (!reader.isEndElement()) {      if (reader.isStartElement()) {        if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org","DuplicateEventException").equals(reader.getName())) {          nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");          if ("true".equals(nillableValue) || "1".equals(nillableValue)) {            object.setDuplicateEventException(null);            reader.next();          } else {            object.setDuplicateEventException(ApplicationExceptionBean.Factory.parse(reader));          }        } else {          throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());        }      } else {        reader.next();      }    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public void add(Cluster cluster){  clusters.add(cluster);}  }
class C{  public void testErrorFlagNominal(){  performTest(false,false,false,true,false);}  }
class C{  private String readByteArray(){  final byte[] stream_=this.stream;  final StringBuffer buf=new StringBuffer();  int count=0;  char w=(char)0;  for (int to=stream_.length; (loc < to) && (stream_[loc] != '>'); ) {    final char c=(char)stream_[loc];    byte b=(byte)0;    if (c >= '0' && c <= '9') {      b=(byte)(c - '0');    } else     if (c >= 'a' && c <= 'f') {      b=(byte)(10 + (c - 'a'));    } else     if (c >= 'A' && c <= 'F') {      b=(byte)(10 + (c - 'A'));    } else {      loc++;      continue;    }    final int offset=1 - (count % 2);    w|=(0xf & b) << (offset << 2);    if (offset == 0) {      buf.append(w);      w=(char)0;    }    ++count;    ++loc;  }  ++loc;  return buf.toString();}  }
class C{  private void calculateAndNextTag(){  String localName=current.getElement().getTag();  String prefix=null;  String namespaceURI=current.getNamespace();  int idx=localName.indexOf(':');  if (idx >= 0) {    prefix=localName.substring(0,idx);    localName=localName.substring(idx + 1);  }  if (namespaceURI != null && !namespaceURI.isEmpty()) {    prefix=def.getPrefixWithLinked(namespaceURI);  } else   if (prefix != null && !prefix.isEmpty()) {    namespaceURI=current.getContext().getNamespaceURI(prefix);    if (namespaceURI != null) {      prefix=def.getPrefixWithLinked(namespaceURI);    }  } else {    if (current.getContext().isDefaultNamespaceDefined()) {      prefix=def.getPrefixWithLinked(current.getContext().getDefaultNamespace());    }  }  if (prefix != null && !prefix.isEmpty()) {    localName=new StringBuilder(prefix).append(":").append(localName).toString();  }  current.getElement().setTag(localName);  if (this.parents.isEmpty()) {    current=new ElementContext();  } else {    current=this.parents.pop();  }}  }
class C{  public void testNearTx() throws Exception {  Ignite ignite0=startGrid(0);  IgniteCache<Integer,Integer> cache=ignite0.cache(null);  Ignite ignite1=startGrid(1);  final Integer key=ignite0.configuration().getMarshaller() instanceof OptimizedMarshaller ? 2 : 7;  assertNull(cache.getAndPut(key,key));  awaitPartitionMapExchange();  assertTrue(ignite0.affinity(null).isPrimary(ignite1.cluster().localNode(),key));}  }
class C{  public static <T>Iterator<T> iterator(Iterator<T> self){  return self;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:52.094 -0500",hash_original_method="F6A3921BF2DA3805D24A4DD375373A7E",hash_generated_method="B93955B76AECF570145E6D79A55D84AB") protected String encodeBody(){  StringBuffer s=new StringBuffer();  s.append(protocol);  if (parameters != null && !parameters.isEmpty())   s.append(SEMICOLON).append(parameters.encode());  return s.toString();}  }
class C{  @Override public boolean scrollToEnd(Selector obj,boolean isVertical,int maxSwipes,int steps) throws UiObjectNotFoundException {  UiScrollable scrollable=new UiScrollable(obj.toUiSelector());  if (isVertical)   scrollable.setAsVerticalList(); else   scrollable.setAsHorizontalList();  return scrollable.scrollToEnd(maxSwipes,steps);}  }
class C{  private void onDatatypeAttribute(Element xsdElement,DatatypeElementFactory elementFactory,Element xsdAttribute){  String name=xsdAttribute.attributeValue("name");  QName qname=getQName(name);  XSDatatype dataType=dataTypeForXsdAttribute(xsdAttribute);  if (dataType != null) {    elementFactory.setAttributeXSDatatype(qname,dataType);  } else {    String type=xsdAttribute.attributeValue("type");    System.out.println("Warning: Couldn't find XSDatatype for type: " + type + " attribute: "+ name);  }}  }
class C{  public boolean isPaintOuterBorderFirst(){  return paintOuterBorderFirst;}  }
class C{  private void buildOperation(PathOperation operation){  if (config.isSeparatedOperationsEnabled()) {    MarkupDocBuilder pathDocBuilder=copyMarkupDocBuilder();    buildOperation(operation,pathDocBuilder);    java.nio.file.Path operationFile=outputPath.resolve(resolveOperationDocument(operation));    pathDocBuilder.writeToFileWithoutExtension(operationFile,StandardCharsets.UTF_8);    if (logger.isInfoEnabled()) {      logger.info("Separate operation file produced : '{}'",operationFile);    }    buildOperationRef(operation,this.markupDocBuilder);  } else {    buildOperation(operation,this.markupDocBuilder);  }  if (logger.isInfoEnabled()) {    logger.info("Operation processed : '{}' (normalized id = '{}')",operation,normalizeName(operation.getId()));  }}  }
class C{  public UDViewGroup createUserdata(Globals globals,LuaValue metaTable,Varargs varargs){  return new UDViewGroup(this,globals,metaTable,varargs);}  }
class C{  @Override public int write(@NonNull ByteBuffer src) throws IOException {  if (out == null)   return 0;  out.write(src.array(),src.arrayOffset(),src.array().length - src.arrayOffset());  return src.array().length;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:26.719 -0500",hash_original_method="98F59EFFB83342DD2236B59D91A5E4B5",hash_generated_method="BC0D2AE19D2DC7555F63320B9322EFB5") public UpdateLinkPropertyResult updateLinkPropertiesDataCallStateSync(DataCallState newState){  Message response=sendMessageSynchronously(REQ_UPDATE_LINK_PROPERTIES_DATA_CALL_STATE,newState);  if ((response != null) && (response.what == RSP_UPDATE_LINK_PROPERTIES_DATA_CALL_STATE)) {    return rspUpdateLinkPropertiesDataCallState(response);  } else {    log("getLinkProperties error response=" + response);    return new UpdateLinkPropertyResult(new LinkProperties());  }}  }
class C{  public IOException(){}  }
class C{  public boolean isExpired(Element entityEle) throws ParseException, DatatypeConfigurationException {  if (entityEle == null) {    throw new IllegalArgumentException("Null entity element");  }  String expDateStr=entityEle.getAttribute(SAMLNames.VALIDUNTIL);  if (expDateStr.isEmpty()) {    return false;  }  DatatypeFactory dateFactory=DatatypeFactory.newInstance();  XMLGregorianCalendar expCal=dateFactory.newXMLGregorianCalendar(expDateStr);  if (expCal.getTimezone() != DatatypeConstants.FIELD_UNDEFINED && expCal.getTimezone() != 0) {    throw new IllegalArgumentException(expDateStr + "SAML spec does not allow time zoon offset.");  }  GregorianCalendar gregorianCalendar=new GregorianCalendar();  XMLGregorianCalendar now=dateFactory.newXMLGregorianCalendar(gregorianCalendar);  if (expCal == null) {    throw new ParseException("Unable to read " + expDateStr + " into XMLGregorianCalendar.",0);  }  if (now.normalize().compare(expCal) == DatatypeConstants.GREATER) {    return true;  } else {    return false;  }}  }
class C{  public void addFunctionImport(Class<?> cls){  EdmFunctionImport functionImportAnnotation=cls.getAnnotation(EdmFunctionImport.class);  FunctionImportImpl.Builder functionImportBuilder=new FunctionImportImpl.Builder().setEntitySetName(functionImportAnnotation.entitySet()).setFunctionName(functionImportAnnotation.namespace() + "." + functionImportAnnotation.function()).setIncludeInServiceDocument(functionImportAnnotation.includeInServiceDocument()).setName(functionImportAnnotation.name()).setJavaClass(cls);  functionImportBuilders.add(functionImportBuilder);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MReportLineSet[").append(get_ID()).append(" - ").append(getName()).append("]");  return sb.toString();}  }
class C{  public void prerenderUrl(String url){  if (mService == null)   return;  Message msg=Message.obtain(null,ChromePrerenderService.MSG_PRERENDER_URL,0,0);  Bundle data=new Bundle();  data.putString(ChromePrerenderService.KEY_PRERENDERED_URL,url);  msg.setData(data);  try {    mService.send(msg);  } catch (  RemoteException e) {    e.printStackTrace();  }}  }
class C{  public static int readFully(InputStream in,byte[] buffer,int max) throws IOException {  try {    int result=0, len=Math.min(max,buffer.length);    while (len > 0) {      int l=in.read(buffer,result,len);      if (l < 0) {        break;      }      result+=l;      len-=l;    }    return result;  } catch (  Exception e) {    throw DbException.convertToIOException(e);  }}  }
class C{  private String[][] toStrings(List<List<Feature>> features) throws CleartkEncoderException {  List<List<String>> encodedFeatures=new ArrayList<List<String>>(features.size());  for (  List<Feature> features1 : features) {    List<NameNumber> nameNumbers=this.featuresEncoder.encodeAll(features1);    List<String> encodedFeatures1=new ArrayList<String>();    for (    NameNumber nameNumber : nameNumbers) {      encodedFeatures1.add(nameNumber.name);    }    encodedFeatures.add(encodedFeatures1);  }  String[][] encodedFeaturesArray=new String[encodedFeatures.size()][];  for (int i=0; i < encodedFeatures.size(); i++) {    String[] encodedFeaturesArray1=encodedFeatures.get(i).toArray(new String[0]);    encodedFeaturesArray[i]=encodedFeaturesArray1;  }  return encodedFeaturesArray;}  }
class C{  public static boolean contains(char[] array,char value){  return indexOf(array,value) != -1;}  }
class C{  public boolean isStopped(){  return this.stopped;}  }
class C{  public TypedRead<K,V> withTimestampFn2(SerializableFunction<KafkaRecord<K,V>,Instant> timestampFn){  checkNotNull(timestampFn);  return new TypedRead<K,V>(topics,topicPartitions,keyCoder,valueCoder,timestampFn,watermarkFn,consumerFactoryFn,consumerConfig,maxNumRecords,maxReadTime);}  }
class C{  private void putSomeEntries(){  assertTrue("Cache is found as null ",cache != null);  Region rgn=cache.getRegion(regionName);  for (int i=0; i < maxEntries; i++) {    rgn.put(new Long(i),new Long(i));  }}  }
class C{  public int error_sym(){  return 1;}  }
class C{  public CodeSearchEntry(BaseEntry sourceEntry){  super(sourceEntry);  getCategories().add(CODESEARCH_CATEGORY);}  }
class C{  @NotNull @ObjectiveCName("leaveGroupWithGid:") public Promise<Void> leaveGroup(final int gid){  return modules.getGroupsModule().leaveGroup(gid);}  }
class C{  public static synchronized boolean isEmpty(){  return services.isEmpty();}  }
class C{  static Pair<DistributedLogClient,MonitorServiceClient> createDistributedLogClient(SocketAddress host,DistributedLogClientBuilder clientBuilder){  DistributedLogClientBuilder newBuilder=DistributedLogClientBuilder.newBuilder(clientBuilder).host(host);  return ClientUtils.buildClient(newBuilder);}  }
class C{  public boolean isActive(){  return active;}  }
class C{  public ParameterTypeText(String key,String description,TextType type){  super(key,description,true);  setTextType(type);}  }
class C{  static byte[] toIntegerBytes(final BigInteger bigInt){  int bitlen=bigInt.bitLength();  bitlen=((bitlen + 7) >> 3) << 3;  final byte[] bigBytes=bigInt.toByteArray();  if (((bigInt.bitLength() % 8) != 0) && (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {    return bigBytes;  }  int startSrc=0;  int len=bigBytes.length;  if ((bigInt.bitLength() % 8) == 0) {    startSrc=1;    len--;  }  final int startDst=bitlen / 8 - len;  final byte[] resizedBytes=new byte[bitlen / 8];  System.arraycopy(bigBytes,startSrc,resizedBytes,startDst,len);  return resizedBytes;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:56.418 -0400",hash_original_method="BF05C25EF740B0B2989A55D0BCB5E47A",hash_generated_method="41BBD58874EB33676CAB5C7BF3C43288") long parseDir(String line,String path) throws IOException {  int bytesStart=0;  int bytesEnd=0;  int j=line.length() - 1;  innerLoop1:   while (j >= 0) {    char c=line.charAt(j);    if (Character.isDigit(c)) {      bytesEnd=j + 1;      break innerLoop1;    }    j--;  }  innerLoop2:   while (j >= 0) {    char c=line.charAt(j);    if (!Character.isDigit(c) && c != ',' && c != '.') {      bytesStart=j + 1;      break innerLoop2;    }    j--;  }  if (j < 0) {    throw new IOException("Command line 'dir /-c' did not return valid info " + "for path '" + path + "'");  }  StringBuilder buf=new StringBuilder(line.substring(bytesStart,bytesEnd));  for (int k=0; k < buf.length(); k++) {    if (buf.charAt(k) == ',' || buf.charAt(k) == '.') {      buf.deleteCharAt(k--);    }  }  return parseBytes(buf.toString(),path);}  }
class C{  public void hookUpGraphicLoaderWithLayer(GraphicLoader gl){  if (gl != null) {    GraphicLoaderPlugIn glpi=new GraphicLoaderPlugIn();    gl.setReceiver(glpi);    glpi.setGraphicLoader(gl);    LayerHandler lh=getLayerHandler();    PlugInLayer pl=new PlugInLayer();    pl.setPlugIn(glpi);    pl.setName(gl.getName());    pl.setVisible(newLayerVisible);    if (lh != null) {      lh.addLayer(pl,newLayerIndex);    } else {      if (orphanGraphicLoaderPlugIns == null) {        orphanGraphicLoaderPlugIns=new LinkedList();      }      orphanGraphicLoaderPlugIns.add(pl);    }  }}  }
class C{  public static <T,V>Predicate<T> where(Function<T,V> function,Predicate<? super V> predicate){  Preconditions.notNull(function,"function must not be null");  Preconditions.notNull(predicate,"predicate must not be null");  return null;}  }
class C{  private void sendErrorgMessage(final SimulatedUpdate update,final List<String> updateResultMessages){  final Message message=createActionStatusMessage(update,updateResultMessages,ActionStatus.ERROR);  sendMessage(spExchange,message);}  }
class C{  @Override public void windowDeiconified(WindowEvent e){}  }
class C{  public static void launchEmailIntent(final Activity activity,String addr,String text){  Log.i(LOG_TAG,"Launch email intent from " + activity.getLocalClassName());  Intent emailIntent=new Intent(Intent.ACTION_SEND);  emailIntent.putExtra(Intent.EXTRA_EMAIL,new String[]{addr});  emailIntent.setType("text/plain");  PackageManager emailpackageManager=activity.getPackageManager();  List<ResolveInfo> emailresolveInfos=emailpackageManager.queryIntentActivities(emailIntent,0);  if (emailresolveInfos.size() > 0) {    activity.startActivity(emailIntent);  }}  }
class C{  protected UnManagedCifsShareACL checkUnManagedFsCifsACLExistsInDB(DbClient dbClient,String cifsACLNativeGuid){  UnManagedCifsShareACL unManagedCifsAcl=null;  URIQueryResultList result=new URIQueryResultList();  dbClient.queryByConstraint(AlternateIdConstraint.Factory.getFileCifsACLNativeGUIdConstraint(cifsACLNativeGuid),result);  Iterator<URI> iter=result.iterator();  while (iter.hasNext()) {    URI cifsAclURI=iter.next();    unManagedCifsAcl=dbClient.queryObject(UnManagedCifsShareACL.class,cifsAclURI);    return unManagedCifsAcl;  }  return unManagedCifsAcl;}  }
class C{  private void validateNoServices() throws Throwable {  URI exampleFactoryUri=UriUtils.buildFactoryUri(this.host,ExampleService.class);  ServiceDocumentQueryResult exampleServices=this.host.getServiceState(null,ServiceDocumentQueryResult.class,exampleFactoryUri);  assertNotNull(exampleServices);  assertNotNull(exampleServices.documentLinks);  assertEquals(exampleServices.documentLinks.size(),0);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader1=null;  String inputHeader2=null;  int row, col;  double z;  float progress=0;  int m, n;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader1=args[0];  inputHeader2=args[1];  if ((inputHeader1 == null) || (inputHeader2 == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRasterInfo image1=new WhiteboxRasterInfo(inputHeader1);    int rows=image1.getNumberRows();    int cols=image1.getNumberColumns();    double noData1=image1.getNoDataValue();    WhiteboxRasterInfo image2=new WhiteboxRasterInfo(inputHeader2);    if (image2.getNumberRows() != rows || image2.getNumberColumns() != cols) {      showFeedback("The input images must have the same number of rows and columns");      return;    }    double noData2=image2.getNoDataValue();    int image1Min=(int)image1.getMinimumValue();    int image2Min=(int)image2.getMinimumValue();    int image1Max=(int)image1.getMaximumValue();    int image2Max=(int)image2.getMaximumValue();    int image1Range=image1Max - image1Min + 1;    int image2Range=image2Max - image2Min + 1;    int[][] featureSpace=new int[image1Range][image2Range];    double data1[]=null;    double data2[]=null;    for (row=0; row < rows; row++) {      data1=image1.getRowValues(row);      data2=image2.getRowValues(row);      for (col=0; col < cols; col++) {        if (data1[col] != noData1 && data2[col] != noData2) {          m=(int)(data1[col] - image1Min);          n=(int)(data2[col] - image2Min);          featureSpace[m][n]++;        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    Plot plot=new Plot(featureSpace,image1.getShortHeaderFile(),image2.getShortHeaderFile(),image1Min,image1Max,image2Min,image2Max,myHost.getDefaultFont());    image1.close();    image2.close();    returnData(plot);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public void onQueryComplete(int taskId,Object cookie,Cursor cursor){}  }
class C{  public static void sendNormalizedSAXcharacters(char ch[],int start,int length,org.xml.sax.ContentHandler handler) throws org.xml.sax.SAXException {  sendNormalizedSAXcharacters(ch,start,length,handler,SUPPRESS_BOTH);}  }
class C{  public static void registerResourceFormatter(String format,Class<? extends ManagedResourceFormatter> formatterClass){  s_resourceFormatters.put(format,formatterClass);}  }
class C{  public void testScrollToCommand() throws Exception {  ScrollView scrollView=getViewAtPath(0);  ScrollViewTestModule jsModule=getReactContext().getCatalystInstance().getJSModule(ScrollViewTestModule.class);  assertEquals(0,scrollView.getScrollY());  jsModule.scrollTo(0,300);  waitForBridgeAndUIIdle();  getInstrumentation().waitForIdleSync();  long timeout=10000;  long interval=50;  long start=System.currentTimeMillis();  while (System.currentTimeMillis() - start < timeout) {    if (scrollView.getScrollY() > 0) {      break;    }    Thread.sleep(interval);  }  assertNotSame(0,scrollView.getScrollY());  assertFalse("Drag should not be called with scrollTo",mScrollListenerModule.dragEventsMatch());}  }
class C{  private static void checkNonDebugLabel(final Label label){  Field f=getLabelStatusField();  int status=0;  try {    status=f == null ? 0 : ((Integer)f.get(label)).intValue();  } catch (  IllegalAccessException e) {    throw new Error("Internal error");  }  if ((status & 0x01) != 0) {    throw new IllegalArgumentException("Labels used for debug info cannot be reused for control flow");  }}  }
class C{  public void putInMergeTable(SIPServerTransaction sipTransaction,SIPRequest sipRequest){  String mergeKey=sipRequest.getMergeId();  if (mergeKey != null) {    this.mergeTable.put(mergeKey,sipTransaction);  }}  }
class C{  public int scaleToPixel(double reach){  return (Double.isInfinite(reach) || Double.isNaN(reach)) ? 0 : (int)Math.round(scale.getScaled(reach,height - .5,.5));}  }
class C{  @Override protected int calcAttackValue(){  int av=100;  if (bDirect) {    av=Math.min(av + (toHit.getMoS() / 3),av * 2);  }  if (bGlancing) {    av=(int)Math.floor(av / 2.0);  }  av=(int)Math.floor(getBracketingMultiplier() * av);  return av;}  }
class C{  public void init() throws ServletException {}  }
class C{  @Override public void onTurnReached(int currentTurn){  SingletonRepository.getTurnNotifier().notifyInSeconds(EXPIRATION_CHECKING_PERIOD,this);  for (  String zoneName : zones) {    for (    Entity trackerEntity : new HashSet<Entity>(getTrackers(zoneName))) {      ExpirationTracker tracker=(ExpirationTracker)trackerEntity;      if (tracker.getExpirationTime() - WARN_TIME * 1000 <= System.currentTimeMillis() + EXPIRATION_CHECKING_PERIOD * 1000 && tracker.getExpirationTime() - WARN_TIME * 1000 > System.currentTimeMillis()) {        long diff=tracker.getExpirationTime() - WARN_TIME * 1000 - System.currentTimeMillis();        SingletonRepository.getTurnNotifier().notifyInSeconds((int)diff / 1000,warnPlayers);      }      if (tracker.getExpirationTime() <= System.currentTimeMillis() + EXPIRATION_CHECKING_PERIOD * 1000 && tracker.getExpirationTime() > System.currentTimeMillis()) {        long diff=tracker.getExpirationTime() - System.currentTimeMillis();        SingletonRepository.getTurnNotifier().notifyInSeconds((int)diff / 1000,kickPlayers);      }    }  }}  }
class C{  public boolean isClear(){  return m_clear;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void expandAcronymSync(View v){  final String acronym=Utils.uppercaseInput(this,mEditText.getText().toString().trim(),true);  if (acronym != null) {    Log.d(TAG,"calling expandAcronymSync() for " + acronym);    if (getOps().expandAcronymSync(acronym) == false)     Utils.showToast(this,"Call already in progress");    mEditText.requestFocus();    mEditText.selectAll();  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  Node newNode;  String newValue;  NamedNodeMap nodeMap;  doc=(Document)load("staff",true);  docType=doc.getDoctype();  assertNotNull("docTypeNotNull",docType);  nodeMap=docType.getNotations();  assertNotNull("notationsNotNull",nodeMap);  newNode=nodeMap.getNamedItem("notation1");  assertNotNull("notationNotNull",newNode);  newValue=newNode.getNodeValue();  assertNull("initiallyNull",newValue);  newNode.setNodeValue("This should have no effect");  newValue=newNode.getNodeValue();  assertNull("nullAfterAttemptedChange",newValue);}  }
class C{  private Boolean isValidDCT(JCas jcas){  FSIterator dctIter=jcas.getAnnotationIndex(Dct.type).iterator();  if (!dctIter.hasNext()) {    return true;  } else {    Dct dct=(Dct)dctIter.next();    String dctVal=dct.getValue();    if (dctVal == null)     return false;    if (dctVal.matches("\\d{8}") || dctVal.matches("\\d{4}.\\d{2}.\\d{2}.*")) {      return true;    } else {      return false;    }  }}  }
class C{  public void unlockUdocsExecuteLogic(ActionMapping mappings,ActionForm form,HttpServletRequest request,HttpServletResponse response){  RelacionEntregaVO relacionEntrega=(RelacionEntregaVO)getFromTemporalSession(request,TransferenciasConstants.RELACION_KEY);  String[] udocsToUnlock=((UnidadDocumentalForm)form).getSelectedUdoc();  try {    if (udocsToUnlock != null) {      ServiceRepository services=ServiceRepository.getInstance(ServiceClient.create(getAppUser(request)));      GestionRelacionesEntregaBI relacionesBI=services.lookupGestionRelacionesBI();      relacionesBI.unlockUnidadesDocumentales(relacionEntrega,udocsToUnlock);    }    goLastClientExecuteLogic(mappings,form,request,response);  } catch (  ActionNotAllowedException anae) {    guardarError(request,anae);    goLastClientExecuteLogic(mappings,form,request,response);  }}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getNegativeConstraint_();}  }
class C{  private void run(){  long startTime=System.nanoTime();  ShapeFile output=null;  ShapeFile output2=null;  int progress, oldProgress;  boolean conductFineSearch=false;  int j;  int refNeighbourhoodStart=40;  int refNeighbourhoodStep=20;  maxNeighbourhoodSize=500;  epsilon=1.2;  int polyOrder=2;  StringBuilder str;  KdTree<Double> controlPointTree=new KdTree.SqrEuclid<>(2,new Integer(2000));  try {    String ppFile1="/Users/johnlindsay/Documents/Teaching/GEOG2420/airphotos/test point3.shp";    String referenceFile="/Users/johnlindsay/Documents/Teaching/GEOG2420/airphotos/GuelphCampus_C6430-74072-L9_254_Blue_clipped.dep";    String transformedFile="/Users/johnlindsay/Documents/Teaching/GEOG2420/airphotos/GuelphCampus_C6430-74072-L9_253_Blue_clipped.dep";    String referenceTiePoints="/Users/johnlindsay/Documents/Teaching/GEOG2420/airphotos/campus 254 tie points.shp";    String transformedTiePoints="/Users/johnlindsay/Documents/Teaching/GEOG2420/airphotos/campus 253 tie points.shp";    String outputFile="/Users/johnlindsay/Documents/Teaching/GEOG2420/airphotos/tmp6.shp";    DBFField[] fields=new DBFField[1];    fields[0]=new DBFField();    fields[0].setName("r1");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setDecimalCount(4);    fields[0].setFieldLength(10);    output=new ShapeFile(outputFile,ShapeType.POINT,fields);    fields=new DBFField[1];    fields[0]=new DBFField();    fields[0].setName("r1");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setDecimalCount(4);    fields[0].setFieldLength(10);    output2=new ShapeFile(outputFile.replace(".shp","_2.shp"),ShapeType.POINT,fields);    referenceImage=new WhiteboxRaster(referenceFile,"r");    referenceImage.setForceAllDataInMemory(true);    int rows1=referenceImage.getNumberRows();    int cols1=referenceImage.getNumberColumns();    referenceNoData=referenceImage.getNoDataValue();    transformedImage=new WhiteboxRaster(transformedFile,"r");    transformedImage.setForceAllDataInMemory(true);    transformedNoData=transformedImage.getNoDataValue();    ShapeFile pp1=new ShapeFile(ppFile1);    if (pp1.getShapeType().getBaseType() != ShapeType.POINT && pp1.getShapeType().getBaseType() != ShapeType.MULTIPOINT) {      return;    }    ShapeFileRecord record=pp1.getRecord(0);    double[][] point;    ShapeFile refTiePoints=new ShapeFile(referenceTiePoints);    if (refTiePoints.getShapeType().getBaseType() != ShapeType.POINT) {      return;    }    ShapeFile transTiePoints=new ShapeFile(transformedTiePoints);    if (transTiePoints.getShapeType().getBaseType() != ShapeType.POINT) {      return;    }    int numTiePoints=refTiePoints.getNumberOfRecords();    if (transTiePoints.getNumberOfRecords() != numTiePoints) {      return;    }    calculateOffsets();    conductFineSearch=true;    ArrayList<XYPoint> tiePointsRef=new ArrayList<>();    ArrayList<XYPoint> tiePointsTransform=new ArrayList<>();    for (int r=0; r < refTiePoints.getNumberOfRecords(); r++) {      double[][] refPoint=refTiePoints.getRecord(r).getGeometry().getPoints();      int refCol=referenceImage.getColumnFromXCoordinate(refPoint[0][0]);      int refRow=referenceImage.getRowFromYCoordinate(refPoint[0][1]);      point=transTiePoints.getRecord(r).getGeometry().getPoints();      int transCol=transformedImage.getColumnFromXCoordinate(point[0][0]);      int transRow=transformedImage.getRowFromYCoordinate(point[0][1]);      RowPriorityGridCell gc=findPixelMatch(refCol,refRow,transCol,transRow,conductFineSearch,refNeighbourhoodStart,refNeighbourhoodStep,30,1.0);      System.out.println("Control Point " + (r + 1) + ": "+ gc.z);      int matchedCol=gc.col;      int matchedRow=gc.row;      double matchedCorrelation=gc.z;      if (matchedCorrelation >= 0.95) {        double x2=transformedImage.getXCoordinateFromColumn(matchedCol);        double y2=transformedImage.getYCoordinateFromRow(matchedRow);        whitebox.geospatialfiles.shapefile.Point PP=new whitebox.geospatialfiles.shapefile.Point(x2,y2);        Object[] rowData=new Object[1];        rowData[0]=new Double(matchedCorrelation);        output.addRecord(PP,rowData);        PP=new whitebox.geospatialfiles.shapefile.Point(refPoint[0][0],refPoint[0][1]);        rowData=new Object[2];        rowData[0]=new Double(matchedCorrelation);        rowData[1]=new Double(0.0);        output2.addRecord(PP,rowData);        tiePointsRef.add(new XYPoint(refPoint[0][0],refPoint[0][1]));        tiePointsTransform.add(new XYPoint(x2,y2));      } else {        System.out.println("No suitable match could be located.");      }    }    conductFineSearch=false;    List<KdTree.Entry<Double>> results;    int newPolyOrder=polyOrder;    if (newPolyOrder == 4 && tiePointsRef.size() < 15) {      newPolyOrder--;    }    if (newPolyOrder == 3 && tiePointsRef.size() < 10) {      newPolyOrder--;    }    if (newPolyOrder == 2 && tiePointsRef.size() < 6) {      newPolyOrder--;    }    numTiePoints=0;    for (    XYPoint tie : tiePointsRef) {      double[] entry={tie.x,tie.y};      controlPointTree.addPoint(entry,(double)numTiePoints);      numTiePoints++;    }    PolynomialLeastSquares2DFitting pls=new PolynomialLeastSquares2DFitting(tiePointsRef,tiePointsTransform,newPolyOrder);    double rmse=pls.getOverallRMSE();    System.out.println("\nRMSE: " + rmse);    double north=transformedImage.getNorth();    double south=transformedImage.getSouth();    double east=transformedImage.getEast();    double west=transformedImage.getWest();    int totalPointsSearched=0;    int interval=1000;    double intervalSteps=1.5;    int loopNum=1;    do {      System.out.println("Interval: " + interval);      oldProgress=-1;      for (int r=0; r < rows1; r+=interval) {        for (int c=0; c < cols1; c+=interval) {          if (referenceImage.getValue(r,c) != referenceNoData) {            double refXCoord=referenceImage.getXCoordinateFromColumn(c);            double refYCoord=referenceImage.getYCoordinateFromRow(r);            double[] entry={refXCoord,refYCoord};            int numNearestNeighbours=15;            if (numTiePoints < 15) {              numNearestNeighbours=numTiePoints;            }            results=controlPointTree.nearestNeighbor(entry,numNearestNeighbours,true);            j=results.size();            double[] X1=new double[j];            double[] Y1=new double[j];            double[] X2=new double[j];            double[] Y2=new double[j];            for (int k=0; k < j; k++) {              double val=results.get(k).value;              X1[k]=tiePointsRef.get((int)val).x;              Y1[k]=tiePointsRef.get((int)val).y;              X2[k]=tiePointsTransform.get((int)val).x;              Y2[k]=tiePointsTransform.get((int)val).y;            }            int count=0;            double scaleFactor=0;            for (int k=0; k < j; k++) {              double x1Ref=X1[k];              double y1Ref=Y1[k];              double x1Tr=X2[k];              double y1Tr=Y2[k];              for (int m=k + 1; m < j; m++) {                double x2Ref=X1[m];                double y2Ref=Y1[m];                double x2Tr=X2[m];                double y2Tr=Y2[m];                double dist1=sqrt((x2Ref - x1Ref) * (x2Ref - x1Ref) + (y2Ref - y1Ref) * (y2Ref - y1Ref));                double dist2=sqrt((x2Tr - x1Tr) * (x2Tr - x1Tr) + (y2Tr - y1Tr) * (y2Tr - y1Tr));                if (dist1 > 0) {                  scaleFactor+=dist2 / dist1;                  count++;                }              }            }            scaleFactor=scaleFactor / count;            pls=new PolynomialLeastSquares2DFitting(X1,Y1,X2,Y2,1);            rmse=pls.getOverallRMSE();            XYPoint transCoords=pls.getForwardCoordinates(refXCoord,refYCoord);            if (transCoords.x <= east && transCoords.x >= west && transCoords.y >= south && transCoords.y <= north) {              totalPointsSearched++;              int transCol=transformedImage.getColumnFromXCoordinate(transCoords.x);              int transRow=transformedImage.getRowFromYCoordinate(transCoords.y);              int searchWindowRadius=(int)rmse * 2;              if (searchWindowRadius < 80) {                searchWindowRadius=80;              }              RowPriorityGridCell gc=findPixelMatch(c,r,transCol,transRow,conductFineSearch,refNeighbourhoodStart,refNeighbourhoodStep,searchWindowRadius,scaleFactor);              int matchedCol=gc.col;              int matchedRow=gc.row;              double matchedCorrelation=gc.z;              if (matchedCorrelation >= 0.95) {                double x2=transformedImage.getXCoordinateFromColumn(matchedCol);                double y2=transformedImage.getYCoordinateFromRow(matchedRow);                whitebox.geospatialfiles.shapefile.Point PP=new whitebox.geospatialfiles.shapefile.Point(x2,y2);                Object[] rowData=new Object[1];                rowData[0]=new Double(matchedCorrelation);                output.addRecord(PP,rowData);                PP=new whitebox.geospatialfiles.shapefile.Point(refXCoord,refYCoord);                rowData=new Object[1];                rowData[0]=new Double(matchedCorrelation);                output2.addRecord(PP,rowData);                tiePointsRef.add(new XYPoint(refXCoord,refYCoord));                tiePointsTransform.add(new XYPoint(x2,y2));                entry=new double[]{refXCoord,refYCoord};                controlPointTree.addPoint(entry,(double)numTiePoints);                numTiePoints++;                newPolyOrder=polyOrder;                if (newPolyOrder == 4 && tiePointsRef.size() < 15) {                  newPolyOrder--;                }                if (newPolyOrder == 3 && tiePointsRef.size() < 10) {                  newPolyOrder--;                }                if (newPolyOrder == 2 && tiePointsRef.size() < 6) {                  newPolyOrder--;                }              }            }          }        }        progress=(int)((100.0 * r) / rows1);        if (progress > oldProgress) {          System.out.println("Loop " + loopNum + " "+ progress+ "%"+ ", Num. tie points: "+ tiePointsRef.size()+ " of "+ totalPointsSearched+ " ("+ (100f * tiePointsRef.size() / totalPointsSearched)+ "%)");          oldProgress=progress;        }      }      loopNum++;      interval=(int)(interval / intervalSteps);    } while (interval >= 200);    referenceImage.close();    transformedImage.close();    output.write();    output2.write();    System.out.println("\nOperation complete!");    long endTime=System.nanoTime();    double duration=(endTime - startTime);    int secs=(int)(duration / 1000000000);    int hours=secs / 3600;    secs=secs - 3600 * hours;    int minutes=secs / 60;    secs=secs - minutes * 60;    int seconds=secs;    str=new StringBuilder();    str.append("Duration: ");    if (hours > 0) {      str.append(hours).append(" hours, ");    }    if (minutes > 0) {      str.append(minutes).append(" minutes, ");    }    if (seconds > 0) {      str.append(seconds).append(" seconds, ");    }    System.out.println(str.toString());  } catch (  Exception e) {    if (output != null && output2 != null) {      try {        output.write();        output2.write();      } catch (      Exception e2) {      }    }    e.printStackTrace();  }}  }
class C{  public static boolean isGwtVersionlessThan25(IJavaProject javaProject){  String gwtVersionCompareTo="2.5.0";  String gwtVersionCurrentProject=getProjectGwtVersion(javaProject);  int comparison=SdkUtils.compareVersionStrings(gwtVersionCurrentProject,gwtVersionCompareTo);  return comparison < 0;}  }
class C{  public void onPurpleButtonClick(View v){  if (isSubscribed()) {    final SharedPreferences settings=getSharedPreferencesForCurrentUser();    boolean entitled=settings.getBoolean(PURPLE_BUTTON,false);    if (!entitled) {      String requestId=PurchasingManager.initiatePurchaseRequest(getResources().getString(R.string.entitlement_sku_purple));      storeRequestId(requestId,PURPLE_BUTTON);      Log.v("Amazon-IAP",String.format("Sending Request for Sku: %s Request ID: %s" + requestId,getResources().getString(R.string.entitlement_sku_purple),requestId));    } else {      centerButton.setBackgroundDrawable(getResources().getDrawable(R.drawable.purplebutton));    }  } else {    generateSubscribeDialog();  }}  }
class C{  public String toStringUnmasked(){  String str="";  str+=STR_IN_PORT + "=" + U16.f(this.inputPort);  str+="," + STR_DL_DST + "="+ HexString.toHexString(this.dataLayerDestination);  str+="," + STR_DL_SRC + "="+ HexString.toHexString(this.dataLayerSource);  str+="," + STR_DL_TYPE + "=0x"+ Integer.toHexString(U16.f(this.dataLayerType));  str+="," + STR_DL_VLAN + "=0x"+ Integer.toHexString(U16.f(this.dataLayerVirtualLan));  str+="," + STR_DL_VLAN_PCP + "="+ Integer.toHexString(U8.f(this.dataLayerVirtualLanPriorityCodePoint));  str+="," + STR_NW_DST + "="+ cidrToString(networkDestination,getNetworkDestinationMaskLen());  str+="," + STR_NW_SRC + "="+ cidrToString(networkSource,getNetworkSourceMaskLen());  str+="," + STR_NW_PROTO + "="+ this.networkProtocol;  str+="," + STR_NW_TOS + "="+ this.getNetworkTypeOfService();  str+="," + STR_TP_DST + "="+ this.transportDestination;  str+="," + STR_TP_SRC + "="+ this.transportSource;  str+=", wildcards=" + debugWildCards(wildcards);  return "OFMatch[" + str + "]";}  }
class C{  public void addObservations(int[][] states,int[] groupOffsets){  for (int t=0; t < states.length; t++) {    for (int c=0; c < states[t].length; c++) {      int jointValue=0;      for (int i=0; i < numVars; i++) {        int thisValue=states[t][(c + groupOffsets[i] + states.length) % states.length];        marginalCounts[i][thisValue]++;        jointValue*=base;        jointValue+=thisValue;      }      jointCount[jointValue]++;      observations++;    }  }}  }
class C{  public static MinecraftServer createFakeServer(){  PlayerList playerList=mock(PlayerList.class);  MinecraftServer server=mock(MinecraftServer.class);  when(server.getPlayerList()).thenReturn(playerList);  server.worldTickTimes=new Hashtable<>();  return server;}  }
class C{  private boolean createTaxCorrection(MAcctSchema as,Fact fact,DocLine_Allocation line,MAccount DiscountAccount,MAccount WriteOffAccoint,boolean isSOTrx){  log.info(line.toString());  BigDecimal discount=Env.ZERO;  if (as.isTaxCorrectionDiscount())   discount=line.getDiscountAmt();  BigDecimal writeOff=Env.ZERO;  if (as.isTaxCorrectionWriteOff())   writeOff=line.getWriteOffAmt();  Doc_AllocationTax tax=new Doc_AllocationTax(DiscountAccount,discount,WriteOffAccoint,writeOff,isSOTrx);  String sql="SELECT * " + "FROM Fact_Acct " + "WHERE AD_Table_ID=318 AND Record_ID=?"+ " AND C_AcctSchema_ID=?"+ " AND Line_ID IS NULL";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,getTrxName());    pstmt.setInt(1,line.getC_Invoice_ID());    pstmt.setInt(2,as.getC_AcctSchema_ID());    rs=pstmt.executeQuery();    while (rs.next())     tax.addInvoiceFact(new MFactAcct(getCtx(),rs,fact.get_TrxName()));  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  if (tax.getLineCount() == 0) {    log.warning("Invoice not posted yet - " + line);    return false;  }  if (tax.getLineCount() < 2)   return true;  return tax.createEntries(as,fact,line);}  }
class C{  public byte[] toZOrderByteArray(AbstractLiteralIV<BigdataLiteral,?> literalIV){  if (!(literalIV instanceof XSDIntegerIV)) {    throw new RuntimeException("zOrder value IV must be XSDInteger");  }  return toZOrderByteArray(literalIV.integerValue());}  }
class C{  private RegOps(){}  }
class C{  public static void saveFloatToPreference(Context context,String key,float value){  SharedPreferences pref=PreferenceManager.getDefaultSharedPreferences(context);  if (Float.MIN_VALUE == value) {    pref.edit().remove(key).apply();  } else {    pref.edit().putFloat(key,value).apply();  }}  }
class C{  @Override public Collection<IAgent> selectAgent(final int x,final int y){  final ILocation pp=getModelCoordinatesFrom(x,y,null,null);  return scope.getRoot().getTopology().getNeighborsOf(scope,new GamaPoint(pp.getX(),pp.getY()),renderer.getMaxEnvDim() / 100,Different.with());}  }
class C{  public CompiledST defineTemplate(String name,String argsS,String template){  if (name.charAt(0) != '/')   name="/" + name;  String[] args=argsS.split(",");  List<FormalArgument> a=new ArrayList<FormalArgument>();  for (  String arg : args) {    a.add(new FormalArgument(arg));  }  return defineTemplate(name,new CommonToken(GroupParser.ID,name),a,template,null);}  }
class C{  public static byte[] asByteArray(String hex){  byte[] bts=new byte[hex.length() / 2];  for (int i=0; i < bts.length; i++) {    bts[i]=(byte)Integer.parseInt(hex.substring(2 * i,2 * i + 2),16);  }  return bts;}  }
class C{  public static String xmlStartDoc(){  return "<?xml version=\"1.0\"?>\n";}  }
class C{  protected EclipseSourceContainer(N4JSEclipseProject project,SourceFragmentType type,IContainer container){  super(project,type,container.getProjectRelativePath().toString());  this.container=container;}  }
class C{  protected List<Pair<byte[],byte[]>> makeHBaseColumns(ImmutableBitSet selectedColBlocks){  List<Pair<byte[],byte[]>> result=Lists.newArrayList();  int colBlkIndex=1;  HBaseMappingDesc hbaseMapping=cubeSeg.getCubeDesc().getHbaseMapping();  for (  HBaseColumnFamilyDesc familyDesc : hbaseMapping.getColumnFamily()) {    byte[] byteFamily=Bytes.toBytes(familyDesc.getName());    for (    HBaseColumnDesc hbaseColDesc : familyDesc.getColumns()) {      if (selectedColBlocks.get(colBlkIndex)) {        byte[] byteQualifier=Bytes.toBytes(hbaseColDesc.getQualifier());        result.add(Pair.newPair(byteFamily,byteQualifier));      }      colBlkIndex++;    }  }  return result;}  }
class C{  public void notationDecl(String name,String publicId,String systemId) throws SAXException {}  }
class C{  protected AbstractAttr(final T aValue){  value=aValue;}  }
class C{  public ImageMapOutputFormat(){}  }
class C{  public SecurityException(@Nullable Throwable cause){  super(cause);}  }
class C{  public void removeFeature(String feature){synchronized (features) {    features.remove(feature);    renewEntityCapsVersion();  }}  }
class C{  public DSubjectAlternativeName(JDialog parent){  super(parent);  setTitle(res.getString("DSubjectAlternativeName.Title"));  initComponents();}  }
class C{  public SpacingManager(String prop){  property=prop;}  }
class C{  public boolean isReadonly(){  return readonly;}  }
class C{  public static int parseInt(String text) throws DataParseException {  try {    return Integer.parseInt(text);  } catch (  NumberFormatException e) {    throw new DataParseException(e);  }}  }
class C{  public JaspellTernarySearchTrie(Path file) throws IOException {  this(file,false);}  }
class C{  public BoundsOutlineHandle(Figure owner,boolean isTransformHandle,boolean isHoverHandle){  super(owner);  if (isTransformHandle) {    if (isHoverHandle) {      stroke1Enabled=HandleAttributeKeys.TRANSFORM_BOUNDS_STROKE_1_HOVER;      strokeColor1Enabled=HandleAttributeKeys.TRANSFORM_BOUNDS_COLOR_1_HOVER;      stroke2Enabled=HandleAttributeKeys.TRANSFORM_BOUNDS_STROKE_2_HOVER;      strokeColor2Enabled=HandleAttributeKeys.TRANSFORM_BOUNDS_COLOR_2_HOVER;    } else {      stroke1Enabled=HandleAttributeKeys.TRANSFORM_BOUNDS_STROKE_1;      strokeColor1Enabled=HandleAttributeKeys.TRANSFORM_BOUNDS_COLOR_1;      stroke2Enabled=HandleAttributeKeys.TRANSFORM_BOUNDS_STROKE_2;      strokeColor2Enabled=HandleAttributeKeys.TRANSFORM_BOUNDS_COLOR_2;    }    stroke1Disabled=HandleAttributeKeys.TRANSFORM_BOUNDS_STROKE_1_DISABLED;    strokeColor1Disabled=HandleAttributeKeys.TRANSFORM_BOUNDS_COLOR_1_DISABLED;    stroke2Disabled=HandleAttributeKeys.TRANSFORM_BOUNDS_STROKE_2_DISABLED;    strokeColor2Disabled=HandleAttributeKeys.TRANSFORM_BOUNDS_COLOR_2_DISABLED;  } else {    if (isHoverHandle) {      stroke1Enabled=HandleAttributeKeys.RESIZE_BOUNDS_STROKE_1_HOVER;      strokeColor1Enabled=HandleAttributeKeys.RESIZE_BOUNDS_COLOR_1_HOVER;      stroke2Enabled=HandleAttributeKeys.RESIZE_BOUNDS_STROKE_2_HOVER;      strokeColor2Enabled=HandleAttributeKeys.RESIZE_BOUNDS_COLOR_2_HOVER;    } else {      stroke1Enabled=HandleAttributeKeys.RESIZE_BOUNDS_STROKE_1;      strokeColor1Enabled=HandleAttributeKeys.RESIZE_BOUNDS_COLOR_1;      stroke2Enabled=HandleAttributeKeys.RESIZE_BOUNDS_STROKE_2;      strokeColor2Enabled=HandleAttributeKeys.RESIZE_BOUNDS_COLOR_2;    }    stroke1Disabled=HandleAttributeKeys.RESIZE_BOUNDS_STROKE_1_DISABLED;    strokeColor1Disabled=HandleAttributeKeys.RESIZE_BOUNDS_COLOR_1_DISABLED;    stroke2Disabled=HandleAttributeKeys.RESIZE_BOUNDS_STROKE_2_DISABLED;    strokeColor2Disabled=HandleAttributeKeys.RESIZE_BOUNDS_COLOR_2_DISABLED;  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public boolean isTobeDeleted(){  return mTobeDeleted;}  }
class C{  public void writeData(DataOutput dout) throws IOException {  dout.write(getMessage());}  }
class C{  private boolean notifyStateChange(ScanState newState,String condition){synchronized (ScanManager.this) {    if (state == STOPPED || state == CLOSED)     return false;    switchState(newState,condition);  }  sendQueuedNotifications();  return true;}  }
class C{  public Lucene70Codec(Mode mode){  super("Lucene70");  this.storedFieldsFormat=new Lucene50StoredFieldsFormat(Objects.requireNonNull(mode));}  }
class C{  public static boolean isPublic(Class c){  return Modifier.isPublic(c.getModifiers());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:36.574 -0500",hash_original_method="BE972BED58D414983B801FA7B0B8948D",hash_generated_method="E13A9001291767B2DB837CA14886ABC3") public String encodeMessage(){  String retval;  if (statusLine != null)   retval=statusLine.encode() + super.encodeSIPHeaders(); else   retval=super.encodeSIPHeaders();  return retval;}  }
class C{  public void addObscuredRecipient(String playerName){  obscuredRecipients.addElement(playerName);}  }
class C{  public void raptorMaximize(){  for (  RaptorTabFolder folder : folders) {    if (folder != this) {      folder.setVisible(false);      folder.passivate(true);      folder.setMaximized(false);    }  }  setVisible(true);  for (  RaptorWindowSashForm form : sashes) {    if (form == raptorSash) {      form.setVisible(true);      form.setMaximizedControl(this);    } else {      form.setVisible(false);      form.setMaximizedControl(null);    }  }  List<RaptorWindowSashForm> parents=new ArrayList<RaptorWindowSashForm>(10);  Control currentSashParent=raptorSash;  while (currentSashParent instanceof RaptorWindowSashForm) {    parents.add((RaptorWindowSashForm)currentSashParent);    currentSashParent=currentSashParent.getParent();  }  for (int i=0; i < parents.size() - 1; i++) {    parents.get(i + 1).setVisible(true);    parents.get(i + 1).setMaximizedControl(parents.get(i));  }  setMaximized(true);}  }
class C{  public final AC shrinkPrio(int p,int... indexes){  for (int i=indexes.length - 1; i >= 0; i--) {    int ix=indexes[i];    makeSize(ix);    cList.get(ix).setShrinkPriority(p);  }  return this;}  }
class C{  public static void json(String json){  if (TextUtils.isEmpty(json)) {    d("Empty/Null json content");    return;  }  try {    json=json.trim();    if (json.startsWith("{")) {      JSONObject jsonObject=new JSONObject(json);      String message=jsonObject.toString(JSON_INDENT);      d(message);      return;    }    if (json.startsWith("[")) {      JSONArray jsonArray=new JSONArray(json);      String message=jsonArray.toString(JSON_INDENT);      d(message);    }  } catch (  JSONException e) {    e(e.getCause().getMessage() + "\n" + json);  }}  }
class C{  public Class<?> loadOrGetCachedClass(Context context,CharSequence className,CharSequence packageName){  if (TextUtils.isEmpty(className)) {    LogUtils.log(this,Log.DEBUG,"Missing class name. Failed to load class.");    return null;  }  if (TextUtils.isEmpty(packageName)) {    final int lastDotIndex=TextUtils.lastIndexOf(className,'.');    if (lastDotIndex < 0) {      LogUtils.log(this,Log.DEBUG,"Missing package name. Failed to load class: %s",className);      return null;    }    packageName=TextUtils.substring(className,0,lastDotIndex);  }  final String classNameStr=className.toString();  final String packageNameStr=packageName.toString();  HashSet<String> notFoundClassesSet=null;synchronized (mNotFoundClassesMap) {    notFoundClassesSet=mNotFoundClassesMap.get(packageNameStr);    if ((notFoundClassesSet != null) && notFoundClassesSet.contains(classNameStr)) {      return null;    }  }  final Class<?> clazz=mClassNameToClassMap.get(classNameStr);  if (clazz != null) {    return clazz;  }  try {    final Class<?> insideClazz=getClass().getClassLoader().loadClass(classNameStr);    if (insideClazz != null) {      mClassNameToClassMap.put(classNameStr,insideClazz);      return insideClazz;    }  } catch (  ClassNotFoundException e) {  }  if (context == null) {    return null;  }  try {    final int flags=(Context.CONTEXT_INCLUDE_CODE | Context.CONTEXT_IGNORE_SECURITY);    final Context packageContext=context.createPackageContext(packageNameStr,flags);    final Class<?> outsideClazz=packageContext.getClassLoader().loadClass(classNameStr);    if (outsideClazz != null) {      mClassNameToClassMap.put(classNameStr,outsideClazz);      return outsideClazz;    }  } catch (  Exception e) {    LogUtils.log(this,Log.ERROR,"Error encountered. Failed to load outside class: %s",classNameStr);  }  if (notFoundClassesSet == null) {    notFoundClassesSet=new HashSet<String>();    mNotFoundClassesMap.put(packageNameStr,notFoundClassesSet);  }  notFoundClassesSet.add(classNameStr);  LogUtils.log(Log.DEBUG,"Failed to load class: %s",classNameStr);  return null;}  }
class C{  protected String[] splitIntoMultipleLines(String text){  return text.replace("\r","").split("\n");}  }
class C{  public MechEntry entryFor(Entity entity,int secondaryPos){  if (secondaryPos != -1) {    if (exact.containsKey(entity.getShortNameRaw().toUpperCase() + "_" + secondaryPos)) {      return exact.get(entity.getShortNameRaw().toUpperCase() + "_" + secondaryPos);    }    if (chassis.containsKey(entity.getChassis().toUpperCase() + "_" + secondaryPos)) {      return chassis.get(entity.getChassis().toUpperCase() + "_" + secondaryPos);    }    return genericFor(entity,secondaryPos);  }  if (exact.containsKey(entity.getShortNameRaw().toUpperCase())) {    return exact.get(entity.getShortNameRaw().toUpperCase());  }  if (chassis.containsKey(entity.getChassis().toUpperCase())) {    return chassis.get(entity.getChassis().toUpperCase());  }  return genericFor(entity,secondaryPos);}  }
class C{  public synchronized void remove(DccLocoAddress locoAddress){  if (contains(locoAddress)) {    int position=getPosition(locoAddress);    if (position == DccConsist.POSITION_LEAD || position == DccConsist.POSITION_TRAIL) {      log.info("Can not delete lead or rear loco from a NCE consist!");      notifyConsistListeners(locoAddress,ConsistListener.DELETE_ERROR);      return;    }    removeLocoFromConsist(locoAddress.getNumber(),locoAddress.isLongAddress());    ConsistDir.remove(locoAddress);    ConsistList.remove(locoAddress);    ConsistPosition.remove(locoAddress);    notifyConsistListeners(locoAddress,ConsistListener.OPERATION_SUCCESS);  } else {    log.error("Loco " + locoAddress + " is not part of this consist "+ getConsistAddress());  }}  }
class C{  public static ToHitData toHit(IGame game,int attackerId,Targetable target,int grappleSide,boolean isChainWhip){  final Entity ae=game.getEntity(attackerId);  ToHitData toHit=checkIllegal(game,ae,target,grappleSide);  if ((toHit != null) && !isChainWhip) {    return toHit;  }  Entity te=(Entity)target;  int base=ae.getCrew().getPiloting();  toHit=new ToHitData(base,"base");  setCommonModifiers(toHit,game,ae,target);  if ((ae instanceof Mech) && grappleSide == Entity.GRAPPLE_BOTH) {    if (!ae.hasWorkingSystem(Mech.ACTUATOR_UPPER_ARM,Mech.LOC_LARM)) {      toHit.addModifier(2,"Left upper arm actuator destroyed");    }    if (!ae.hasWorkingSystem(Mech.ACTUATOR_LOWER_ARM,Mech.LOC_LARM)) {      toHit.addModifier(2,"Left lower arm actuator destroyed");    }    if (!ae.hasWorkingSystem(Mech.ACTUATOR_HAND,Mech.LOC_LARM)) {      toHit.addModifier(1,"Left hand actuator destroyed");    }    if (!ae.hasWorkingSystem(Mech.ACTUATOR_UPPER_ARM,Mech.LOC_RARM)) {      toHit.addModifier(2,"Right upper arm actuator destroyed");    }    if (!ae.hasWorkingSystem(Mech.ACTUATOR_LOWER_ARM,Mech.LOC_RARM)) {      toHit.addModifier(2,"Right lower arm actuator destroyed");    }    if (!ae.hasWorkingSystem(Mech.ACTUATOR_HAND,Mech.LOC_RARM)) {      toHit.addModifier(1,"Right hand actuator destroyed");    }    if (ae.hasFunctionalArmAES(Mech.LOC_RARM) && ae.hasFunctionalArmAES(Mech.LOC_LARM)) {      toHit.addModifier(-1,"AES modifer");    }  } else   if (ae instanceof Mech && grappleSide == Entity.GRAPPLE_RIGHT) {    if (!ae.hasWorkingSystem(Mech.ACTUATOR_UPPER_ARM,Mech.LOC_RARM)) {      toHit.addModifier(2,"Right upper arm actuator destroyed");    }    if (!ae.hasWorkingSystem(Mech.ACTUATOR_LOWER_ARM,Mech.LOC_RARM)) {      toHit.addModifier(2,"Right lower arm actuator destroyed");    }    if (!ae.hasWorkingSystem(Mech.ACTUATOR_HAND,Mech.LOC_RARM)) {      toHit.addModifier(1,"Right hand actuator destroyed");    }    if (ae.hasFunctionalArmAES(Mech.LOC_RARM)) {      toHit.addModifier(-1,"AES modifer");    }  } else {    if (!ae.hasWorkingSystem(Mech.ACTUATOR_UPPER_ARM,Mech.LOC_LARM)) {      toHit.addModifier(2,"Left upper arm actuator destroyed");    }    if (!ae.hasWorkingSystem(Mech.ACTUATOR_LOWER_ARM,Mech.LOC_LARM)) {      toHit.addModifier(2,"Left lower arm actuator destroyed");    }    if (!ae.hasWorkingSystem(Mech.ACTUATOR_HAND,Mech.LOC_LARM)) {      toHit.addModifier(1,"Left hand actuator destroyed");    }    if (ae.hasFunctionalArmAES(Mech.LOC_LARM)) {      toHit.addModifier(-1,"AES modifer");    }  }  if ((grappleSide != Entity.GRAPPLE_BOTH) && (ae instanceof Mech)) {    Mech attacker=(Mech)ae;    Mech teMech=(te instanceof Mech) ? (Mech)te : null;    if (attacker.hasTSM() && (attacker.heat >= 9) && ((teMech == null) || !teMech.hasTSM() || (teMech.hasTSM() && (te.heat < 9)))) {      toHit.addModifier(-2,"TSM Active Bonus");    }  }  int wmod=te.getWeightClass() - ae.getWeightClass();  if ((te instanceof Protomech) && !(ae instanceof Protomech)) {    wmod=ae.getWeightClass() * -1;  } else   if ((ae instanceof Protomech) && !(te instanceof Protomech)) {    wmod=te.getWeightClass();  } else   if ((te instanceof Protomech) && (ae instanceof Protomech)) {    wmod=0;  }  if (wmod != 0) {    toHit.addModifier(wmod,"Weight class difference");  }  return toHit;}  }
class C{  public void toAxisAngle(Vector4f output){  if (getW() > 1) {    normalise();  }  float angle=2 * (float)Math.toDegrees(Math.acos(getW()));  float x;  float y;  float z;  float s=(float)Math.sqrt(1 - getW() * getW());  if (s < 0.001) {    x=points[0];    y=points[1];    z=points[2];  } else {    x=points[0] / s;    y=points[1] / s;    z=points[2] / s;  }  output.points[0]=x;  output.points[1]=y;  output.points[2]=z;  output.points[3]=angle;}  }
class C{  public static boolean is64Bits(File file) throws IOException {  return isArchitecture(file,PEFile.Architecture.AMD64);}  }
class C{  public IsilonList<IsilonExport> listExports(String resumeToken,String zoneName) throws IsilonException {  URI uri=URI_NFS_EXPORTS;  if (zoneName != null) {    String baseUrl=getURIWithZoneName(_baseUrl.resolve(uri).toString(),zoneName);    uri=URI.create(baseUrl);    sLogger.info("get list of nfs exports for accesszone {} and uri {} ",zoneName,uri.toString());  } else {    uri=_baseUrl.resolve(uri);  }  return list(uri,"exports",IsilonExport.class,resumeToken);}  }
class C{  @Override public void write(String str){synchronized (lock) {    buf.append(str);  }}  }
class C{  public static Intent addCapabilities(Intent toPlugin,int capabilities){  return toPlugin.putExtra(EXTRA_HOST_CAPABILITIES,capabilities);}  }
class C{  public void clearTable(){  WBrowseListItemRenderer renderer=null;  getModel().clear();  if (getItemRenderer() instanceof WBrowseListItemRenderer) {    renderer=(WBrowseListItemRenderer)getItemRenderer();    renderer.clearSelection();  } else {    throw new IllegalArgumentException("Renderer must be instance of WBrowseListItemRenderer");  }  return;}  }
class C{  @SafeVarargs public static void assertResult(TupleQueryResult result,Matcher<BindingSet>... bindingMatchers){  try {    int position=0;    for (    Matcher<BindingSet> bindingMatcher : bindingMatchers) {      assertTrue("There should be at least " + position + " results",result.hasNext());      assertThat(result.next(),bindingMatcher);      position++;    }    assertFalse("There should be no more than " + position + " result",result.hasNext());    result.close();  } catch (  QueryEvaluationException e) {    throw new RuntimeException(e);  }}  }
class C{  public UnsignedShort add(UnsignedShort increment){  return valueOf(getValue() + increment.getValue());}  }
class C{  @SuppressWarnings("unchecked") public static <T>T cast(Object x){  return (T)x;}  }
class C{  private void beforeValue(boolean root) throws IOException {switch (peek()) {case EMPTY_DOCUMENT:    if (!lenient && !root) {      throw new IllegalStateException("JSON must start with an array or an object.");    }  replaceTop(JsonScope.NONEMPTY_DOCUMENT);break;case EMPTY_ARRAY:replaceTop(JsonScope.NONEMPTY_ARRAY);newline();break;case NONEMPTY_ARRAY:out.append(',');newline();break;case DANGLING_NAME:out.append(separator);replaceTop(JsonScope.NONEMPTY_OBJECT);break;case NONEMPTY_DOCUMENT:throw new IllegalStateException("JSON must have only one top-level value.");default :throw new IllegalStateException("Nesting problem: " + stack);}}  }
class C{  public static ExportPathParams calculateExportPathParamForExportMask(DbClient dbClient,ExportMask mask){  Map<String,Integer> hostInitiatorCounts=new HashMap<String,Integer>();  ExportPathParams param=new ExportPathParams(0,0,0);  if (mask.getZoningMap() != null) {    for (    String initiatorId : mask.getZoningMap().keySet()) {      Initiator initiator=dbClient.queryObject(Initiator.class,URI.create(initiatorId));      if (initiator == null || initiator.getInactive()) {        continue;      }      String host=(initiator.getHost() != null) ? initiator.getHost().toString() : "<unknown>";      if (hostInitiatorCounts.get(host) == null) {        hostInitiatorCounts.put(host,0);      }      Set<String> portIds=mask.getZoningMap().get(initiatorId);      if (portIds == null) {        continue;      }      int ppi=0;      for (      String portId : portIds) {        Integer newValue=hostInitiatorCounts.get(host) + 1;        hostInitiatorCounts.put(host,newValue);        ppi++;      }      if (ppi > param.getPathsPerInitiator()) {        param.setPathsPerInitiator(ppi);      }    }    for (    Integer value : hostInitiatorCounts.values()) {      if (value > param.getMaxPaths()) {        param.setMaxPaths(value);      }    }  } else {    _log.info(String.format("No zoning map for mask %s (%s), will not change zoning",mask.getMaskName(),mask.getId()));    param.setMaxPaths(Integer.MAX_VALUE);  }  return param;}  }
class C{  public RangeNodeImpl(final String loValue,final String hiValue){  from=loValue;  to=hiValue;}  }
class C{  @Override public double[] toDoubleArray(){  double[] newValues=new double[m_NumAttributes];  for (int i=0; i < m_AttValues.length; i++) {    newValues[m_Indices[i]]=m_AttValues[i];  }  return newValues;}  }
class C{  private static void validateGettersSetters(Class<? extends PipelineOptions> iface,List<PropertyDescriptor> descriptors){  List<MissingBeanMethod> missingBeanMethods=new ArrayList<>();  for (  PropertyDescriptor propertyDescriptor : descriptors) {    if (!(IGNORED_METHODS.contains(propertyDescriptor.getWriteMethod()) || propertyDescriptor.getReadMethod() != null)) {      MissingBeanMethod method=new MissingBeanMethod();      method.property=propertyDescriptor;      method.methodType="getter";      missingBeanMethods.add(method);      continue;    }    if (!(IGNORED_METHODS.contains(propertyDescriptor.getReadMethod()) || propertyDescriptor.getWriteMethod() != null)) {      MissingBeanMethod method=new MissingBeanMethod();      method.property=propertyDescriptor;      method.methodType="setter";      missingBeanMethods.add(method);      continue;    }  }  throwForMissingBeanMethod(iface,missingBeanMethods);}  }
class C{  public void startHelperServices(Operation startPost){  Operation patchAWSEnumerationCreationService=Operation.createPatch(this.getHost(),AWSEnumerationAndCreationAdapterService.SELF_LINK).setReferer(this.getUri());  Operation patchAWSEnumerationDeletionService=Operation.createPatch(this.getHost(),AWSEnumerationAndDeletionAdapterService.SELF_LINK).setReferer(this.getUri());  Operation patchAWSStorageEnumerationService=Operation.createPatch(this.getHost(),AWSBlockStorageEnumerationAdapterService.SELF_LINK).setReferer(this.getUri());  this.getHost().startService(patchAWSEnumerationCreationService,new AWSEnumerationAndCreationAdapterService());  this.getHost().startService(patchAWSEnumerationDeletionService,new AWSEnumerationAndDeletionAdapterService());  this.getHost().startService(patchAWSStorageEnumerationService,new AWSBlockStorageEnumerationAdapterService());  getHost().registerForServiceAvailability(null,AWSEnumerationAndCreationAdapterService.SELF_LINK,AWSEnumerationAndDeletionAdapterService.SELF_LINK,AWSBlockStorageEnumerationAdapterService.SELF_LINK);}  }
class C{  private static BitMatrix removeDashedLines(BitMatrix matrix){  int nbDashed=1 + 2 * ((matrix.getWidth() - 1) / 2 / 16);  BitMatrix newMatrix=new BitMatrix(matrix.getWidth() - nbDashed,matrix.getHeight() - nbDashed);  int nx=0;  for (int x=0; x < matrix.getWidth(); x++) {    if ((matrix.getWidth() / 2 - x) % 16 == 0) {      continue;    }    int ny=0;    for (int y=0; y < matrix.getHeight(); y++) {      if ((matrix.getWidth() / 2 - y) % 16 == 0) {        continue;      }      if (matrix.get(x,y)) {        newMatrix.set(nx,ny);      }      ny++;    }    nx++;  }  return newMatrix;}  }
class C{  protected void computeReferencePoint(Terrain terrain,ShapeData shapeData){  LatLon refPos=this.getReferencePosition();  if (refPos == null)   return;  shapeData.setReferencePoint(terrain.getSurfacePoint(refPos.getLatitude(),refPos.getLongitude(),0));}  }
class C{  private void verify(){  if (width <= 0 || height <= 0 || height > (Integer.MAX_VALUE / width)) {    throw new RasterFormatException("Invalid raster dimension");  }  if (scanlineStride < 0 || scanlineStride > (Integer.MAX_VALUE / height)) {    throw new RasterFormatException("Incorrect scanline stride: " + scanlineStride);  }  if ((long)minX - sampleModelTranslateX < 0 || (long)minY - sampleModelTranslateY < 0) {    throw new RasterFormatException("Incorrect origin/translate: (" + minX + ", "+ minY+ ") / ("+ sampleModelTranslateX+ ", "+ sampleModelTranslateY+ ")");  }  if (height > 1 || minY - sampleModelTranslateY > 0) {    for (int i=0; i < data.length; i++) {      if (scanlineStride > data[i].length) {        throw new RasterFormatException("Incorrect scanline stride: " + scanlineStride);      }    }  }  for (int i=0; i < dataOffsets.length; i++) {    if (dataOffsets[i] < 0) {      throw new RasterFormatException("Data offsets for band " + i + "("+ dataOffsets[i]+ ") must be >= 0");    }  }  int lastScanOffset=(height - 1) * scanlineStride;  if ((width - 1) > (Integer.MAX_VALUE - lastScanOffset)) {    throw new RasterFormatException("Invalid raster dimension");  }  int lastPixelOffset=lastScanOffset + (width - 1);  int maxIndex=0;  int index;  for (int i=0; i < numDataElements; i++) {    if (dataOffsets[i] > (Integer.MAX_VALUE - lastPixelOffset)) {      throw new RasterFormatException("Invalid raster dimension");    }    index=lastPixelOffset + dataOffsets[i];    if (index > maxIndex) {      maxIndex=index;    }  }  if (data.length == 1) {    if (data[0].length <= maxIndex * numDataElements) {      throw new RasterFormatException("Data array too small " + "(it is " + data[0].length + " and should be > "+ (maxIndex * numDataElements)+ " )");    }  } else {    for (int i=0; i < numDataElements; i++) {      if (data[i].length <= maxIndex) {        throw new RasterFormatException("Data array too small " + "(it is " + data[i].length + " and should be > "+ maxIndex+ " )");      }    }  }}  }
class C{  private void enableActiveItemState(){  ArticleListFragment fragmentById=(ArticleListFragment)getFragmentManager().findFragmentById(R.id.article_list);  fragmentById.getListView().setChoiceMode(ListView.CHOICE_MODE_SINGLE);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodecloneattributescopied.class,args);}  }
class C{  public boolean rejectCall(BluetoothDevice device){  if (DBG)   log("rejectCall()");  if (mService != null && isEnabled() && isValidDevice(device)) {    try {      return mService.rejectCall(device);    } catch (    RemoteException e) {      Log.e(TAG,Log.getStackTraceString(new Throwable()));    }  }  if (mService == null)   Log.w(TAG,"Proxy not attached to service");  return false;}  }
class C{  static public int roundPositive(float x){  return (int)(x + 0.5f);}  }
class C{  protected void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  String action=(request.getParameter("action")) == null ? "outputIntroPage" : request.getParameter("action");  if ("outputIntroPage".equals(action)) {    processOutputIntroPage(request,response);  } else   if ("acceptAuthSubToken".equals(action)) {    processAcceptAuthSubToken(request,response);  } else   if ("outputSsList".equals(action)) {    processOutputSsList(request,response);  } else   if ("outputWsList".equals(action)) {    processOutputWsList(request,response);  } else   if ("outputColumnList".equals(action)) {    processOutputColumnList(request,response);  } else   if ("listEvents".equals(action)) {    processListEvents(request,response);  } else   if ("publish".equals(action)) {    processPublishEvents(request,response);  }}  }
class C{  private void trackStar(OrthographicCamera camera,float aspectRatio){  camera.viewportHeight=2 * STAR_RADIUS;  camera.viewportWidth=aspectRatio * camera.viewportHeight;  camera.position.set(STAR_CENTER_X,STAR_CENTER_Y,0);  camera.translate(STAR_RADIUS * (aspectRatio - 1),0);}  }
class C{  protected void post(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {}  }
class C{  public static Properties loadProperties(Class<?> clazz,String classpathResource){  return loadProperties(null,classpathResource);}  }
class C{  public boolean isReady(){  return true;}  }
class C{  private void testAlterTableAlterColumnWithConstraint() throws SQLException {  stat.execute("create table test(id int check(id in (1,2)) )");  stat.execute("alter table test alter id rename to id2");  conn.close();  conn=getConnection();  stat=conn.createStatement();  stat.execute("insert into test values(1)");  assertThrows(ErrorCode.CHECK_CONSTRAINT_VIOLATED_1,stat).execute("insert into test values(3)");  stat.execute("drop table test");}  }
class C{  public synchronized CodeTemplate removeTemplate(String id){  if (id == null) {    throw new IllegalArgumentException("id cannot be null");  }  for (Iterator i=templates.iterator(); i.hasNext(); ) {    CodeTemplate template=(CodeTemplate)i.next();    if (id.equals(template.getID())) {      i.remove();      return template;    }  }  return null;}  }
class C{  public static String nowAsString(){  return Long.toString(System.currentTimeMillis());}  }
class C{  public static ConfigurationPartMetadata read(InputStream in) throws Exception {  return new ObjectMapper().readValue(in,ConfigurationPartMetadata.class);}  }
class C{  public void start(AbstractProcessReader processReader){  log.info("");  if (processReader == null)   throw new IllegalArgumentException();  if (readerFuture != null)   throw new IllegalStateException();  is=process.getInputStream();  assert is != null;  if (log.isInfoEnabled())   log.info("starting process reader: " + processReader);  processReader.start(is);  if (log.isInfoEnabled())   log.info("submitting process reader task: " + processReader);  readerFuture=readService.submit(processReader);  if (log.isInfoEnabled())   log.info("readerFuture: done=" + readerFuture.isDone());}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:56.399 -0500",hash_original_method="0EB66BA5E965B83E191719250E0A82FF",hash_generated_method="0D841C721535905DD0E9F7FAE6757EB9") @Override public String toString(){  return name;}  }
class C{  @Override protected void mouseClicked(int par1,int par2,int par3) throws IOException {  if (par2 >= 36 && par2 <= height - 57)   if (par1 >= width / 2 + 140 || par1 <= width / 2 - 126)   blockList.elementClicked(-1,false,0,0);  super.mouseClicked(par1,par2,par3);}  }
class C{  public boolean isRestartOnCrash(){  return restartOnCrash;}  }
class C{  public void update(){  boolean wasEnabled=isEnabled();  boolean isEnabled=(fOperationTarget != null && fOperationTarget.canDoOperation(fOperationCode));  setEnabled(isEnabled);  if (wasEnabled != isEnabled) {    firePropertyChange(ENABLED,wasEnabled ? Boolean.TRUE : Boolean.FALSE,isEnabled ? Boolean.TRUE : Boolean.FALSE);  }}  }
class C{  public final void grabLog(String sourceName){  grabLog(sourceName,true);}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressWarnings(value="TLW_TWO_LOCK_WAIT") private void close(String reason,boolean cleanupEndpoint,boolean p_removeEndpoint,boolean beingSick,boolean forceRemoval){  boolean removeEndpoint=p_removeEndpoint;  boolean onlyCleanup=this.closing.getAndSet(true);  if (onlyCleanup && !forceRemoval) {    return;  }  if (!onlyCleanup) {synchronized (this) {      this.stopped=true;      if (this.connected) {        if (this.asyncQueuingInProgress && this.pusherThread != Thread.currentThread()) {synchronized (this.outgoingQueue) {            while (this.asyncQueuingInProgress) {              boolean interrupted=Thread.interrupted();              try {                this.outgoingQueue.wait();              } catch (              InterruptedException ie) {                interrupted=true;              } finally {                if (interrupted)                 Thread.currentThread().interrupt();              }            }          }        }        this.connected=false;        closeSenderSem();{          final DMStats stats=this.owner.getConduit().stats;          if (this.finishedConnecting) {            if (this.isReceiver) {              stats.decReceivers();            } else {              stats.decSenders(this.sharedResource,this.preserveOrder);            }          }        }        if (logger.isDebugEnabled()) {          logger.debug("Closing socket for {}",this);        }      } else       if (!forceRemoval) {        removeEndpoint=false;      }      asyncClose(false);      nioLengthSet=false;    }    notifyHandshakeWaiter(false);    boolean isIBM=false;    if (this.owner.owner.config.getEnableNetworkPartitionDetection() || this.owner.owner.getLocalAddr().getVmKind() == DistributionManager.ADMIN_ONLY_DM_TYPE || this.owner.owner.getLocalAddr().getVmKind() == DistributionManager.LOCATOR_DM_TYPE) {      isIBM="IBM Corporation".equals(System.getProperty("java.vm.vendor"));    }{      Thread readerThreadSnapshot=this.readerThread;      if (!beingSick && readerThreadSnapshot != null && !isIBM && this.isRunning && !this.readerShuttingDown && readerThreadSnapshot != Thread.currentThread()) {        try {          readerThreadSnapshot.join(500);          readerThreadSnapshot=this.readerThread;          if (this.isRunning && !this.readerShuttingDown && readerThreadSnapshot != null && owner.getDM().getRootCause() == null) {            readerThreadSnapshot.join(1500);            if (this.isRunning) {              logger.info(LocalizedMessage.create(LocalizedStrings.Connection_TIMED_OUT_WAITING_FOR_READERTHREAD_ON_0_TO_FINISH,this));            }          }        } catch (        IllegalThreadStateException ignore) {        }catch (        InterruptedException ignore) {          Thread.currentThread().interrupt();        }      }    }    closeBatchBuffer();    closeAllMsgDestreamers();  }  if (cleanupEndpoint) {    if (this.isReceiver) {      this.owner.removeReceiver(this);    }    if (removeEndpoint) {      if (this.sharedResource) {        if (!this.preserveOrder) {          if (!this.isReceiver) {            if (this.finishedConnecting) {              this.owner.removeEndpoint(this.remoteAddr,reason);            }          }        } else {          this.owner.removeSharedConnection(reason,this.remoteAddr,this.preserveOrder,this);        }      } else       if (!this.isReceiver) {        this.owner.removeThreadConnection(this.remoteAddr,this);      }    } else {      if (this.sharedResource) {        this.owner.removeSharedConnection(reason,this.remoteAddr,this.preserveOrder,this);      } else       if (!this.isReceiver) {        this.owner.removeThreadConnection(this.remoteAddr,this);      }    }  }  if (idleTask != null) {    idleTask.cancel();  }  if (ackTimeoutTask != null) {    ackTimeoutTask.cancel();  }}  }
class C{  public boolean isComposable(Relation relation){  RelationDirection direction=relation.getDirection(this.getDomain().getId());  return direction != RelationDirection.NO_WAY;}  }
class C{  public boolean isSetB(){  return EncodingUtils.testBit(__isset_bitfield,__B_ISSET_ID);}  }
class C{  public void prepareNotification(Event event,RoomState roomState,BingRule bingRule){  String uid=computeEventUID(event);  if (mPendingNotifications.indexOf(uid) >= 0) {    Log.d(LOG_TAG,"prepareNotification : don't bing - the event was already binged");    checkNotification();    return;  }  mPendingNotifications.add(uid);  if (null == bingRule) {    bingRule=mDefaultBingRule;  }  if (!mGcmRegistrationManager.areDeviceNotificationsAllowed()) {    Log.d(LOG_TAG,"prepareNotification : the push has been disable on this device");    return;  }  if (event.isCallEvent()) {    prepareCallNotification(event,bingRule);    return;  }  final String roomId=event.roomId;  if (!VectorApp.isAppInBackground() && (roomId != null) && event.roomId.equals(ViewedRoomTracker.getInstance().getViewedRoomId())) {    Log.d(LOG_TAG,"prepareNotification : don't bing because it is the currently opened room");    return;  }  String senderID=event.getSender();  if (!event.content.getAsJsonObject().has("body")) {    if (!Event.EVENT_TYPE_STATE_ROOM_MEMBER.equals(event.type) && !event.isCallEvent()) {      Log.d(LOG_TAG,"onBingEvent : don't bing - no body and not a call event");      return;    }  }  MXSession session=Matrix.getMXSession(getApplicationContext(),event.getMatrixId());  if ((null == session) || !session.isAlive()) {    Log.d(LOG_TAG,"prepareNotification : don't bing - no session");    return;  }  Room room=session.getDataHandler().getRoom(roomId);  if (null == room) {    Log.d(LOG_TAG,"prepareNotification : don't bing - the room does not exist");    return;  }  boolean isInvitationEvent=false;  String body;  if (Event.EVENT_TYPE_STATE_ROOM_MEMBER.equals(event.type)) {    body=EventDisplay.getMembershipNotice(getApplicationContext(),event,roomState);    try {      isInvitationEvent="invite".equals(event.getContentAsJsonObject().getAsJsonPrimitive("membership").getAsString());    } catch (    Exception e) {      Log.e(LOG_TAG,"prepareNotification : invitation parsing failed");    }  } else {    body=event.getContentAsJsonObject().getAsJsonPrimitive("body").getAsString();  }  String from="";  Bitmap largeBitmap=null;  if (!isInvitationEvent) {    RoomMember member=room.getMember(senderID);    if (null == member) {      return;    }    from=member.getName();    if (!TextUtils.isEmpty(member.avatarUrl)) {      int size=getApplicationContext().getResources().getDimensionPixelSize(R.dimen.profile_avatar_size);      File f=session.getMediasCache().thumbnailCacheFile(member.avatarUrl,size);      if (null != f) {        BitmapFactory.Options options=new BitmapFactory.Options();        options.inPreferredConfig=Bitmap.Config.ARGB_8888;        largeBitmap=BitmapFactory.decodeFile(f.getPath(),options);      } else {        session.getMediasCache().loadAvatarThumbnail(session.getHomeserverConfig(),new ImageView(getApplicationContext()),member.avatarUrl,size);      }    }  }  if (null == largeBitmap) {    largeBitmap=VectorUtils.getAvatar(getApplicationContext(),VectorUtils.getAvatarColor(senderID),TextUtils.isEmpty(from) ? senderID : from,true);  }  mNotificationSessionId=session.getCredentials().userId;  mNotificationRoomId=roomId;  mNotificationEventId=event.eventId;  Log.d(LOG_TAG,"prepareNotification : with sound " + bingRule.isDefaultNotificationSound(bingRule.notificationSound()));  mLatestNotification=NotificationUtils.buildMessageNotification(EventStreamService.this,from,session.getCredentials().userId,Matrix.getMXSessions(getApplicationContext()).size() > 1,largeBitmap,CommonActivityUtils.getBadgeCount(),body,event.roomId,getRoomName(session,room,event),bingRule.isDefaultNotificationSound(bingRule.notificationSound()),isInvitationEvent);}  }
class C{  public IntroduceParameterDescriptor(String project,String description,String comment,Map arguments,int flags){  super(IJavaRefactorings.INTRODUCE_PARAMETER,project,description,comment,arguments,flags);}  }
class C{  public LinePathPoint[] newArray(int size){  return new LinePathPoint[size];}  }
class C{  static AttrPolling createFromString(final String str) throws BOSHException {  if (str == null) {    return null;  } else {    return new AttrPolling(str);  }}  }
class C{  public BufferedShapeLayer(String pathToShpFile){  super(pathToShpFile);  setProjectionChangePolicy(new com.bbn.openmap.layer.policy.StandardPCPolicy(this));}  }
class C{  public EventBinder<E> withName(String name){  this.name=name;  return this;}  }
class C{  private static <T>IPlugin<T> findPlugin(final List<Pair<IPlugin<T>,PluginStatus>> validatedPlugins,final long guid){  for (  final Pair<IPlugin<T>,PluginStatus> pt : validatedPlugins) {    if (pt.first().getGuid() == guid) {      return pt.first();    }  }  return null;}  }
class C{  public CopyException(){  super();}  }
class C{  public FixedGroupsIdentifier(final Households households){  this(extractGroups(households));}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void addParamPost(String name,String value){  addParam(name,value,NameValuePair.TYPE_POST_DATA);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:51.792 -0500",hash_original_method="D83ED9D59CE4DAAE3BDA7C68EE854B3C",hash_generated_method="1AC9EAA50F6993A129EFED22FD356A19") void run() throws ZygoteInit.MethodAndArgsCaller {  int loopCount=ZygoteInit.GC_LOOP_COUNT;  while (true) {    if (loopCount <= 0) {      ZygoteInit.gc();      loopCount=ZygoteInit.GC_LOOP_COUNT;    } else {      loopCount--;    }    if (runOnce()) {      break;    }  }}  }
class C{  public boolean hasWaveAudioEssenceDescriptor(){  return this.hasInterchangeObject(WaveAudioEssenceDescriptor.class);}  }
class C{  @Override public void writeAttribute(String localName,String value) throws XMLStreamException {  writeAttribute(null,null,localName,value);}  }
class C{  public void removeConflicts(final Conflict[] conflicts){  Check.notNull(conflicts,"conflicts");  for (int i=0; i < conflicts.length; i++) {    removeConflict(conflicts[i]);  }}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.paint=SerialUtilities.readPaint(stream);}  }
class C{  public void writeExif(Bitmap bmap,OutputStream exifOutStream) throws IOException {  if (bmap == null || exifOutStream == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  OutputStream s=getExifWriterStream(exifOutStream);  bmap.compress(Bitmap.CompressFormat.JPEG,90,s);  s.flush();}  }
class C{  public PImage(Object nativeObject){  Bitmap bitmap=(Bitmap)nativeObject;  this.bitmap=bitmap;  this.width=bitmap.getWidth();  this.height=bitmap.getHeight();  this.pixels=null;  this.format=bitmap.hasAlpha() ? ARGB : RGB;  this.pixelDensity=1;  this.pixelWidth=width;  this.pixelHeight=height;}  }
class C{  private void bindAuthenticationProviders(Collection<Class<AuthenticationProvider>> authProviders){  for (  Class<AuthenticationProvider> authenticationProvider : authProviders)   bindAuthenticationProvider(authenticationProvider);}  }
class C{  public Matrix4d transpose3x3(){  return transpose3x3(this);}  }
class C{  public EndpointConfiguration clone(){  EndpointConfiguration result=new EndpointConfiguration();  result.OperationTimeout=OperationTimeout;  result.UseBinaryEncoding=UseBinaryEncoding;  result.MaxStringLength=MaxStringLength;  result.MaxByteStringLength=MaxByteStringLength;  result.MaxArrayLength=MaxArrayLength;  result.MaxMessageSize=MaxMessageSize;  result.MaxBufferSize=MaxBufferSize;  result.ChannelLifetime=ChannelLifetime;  result.SecurityTokenLifetime=SecurityTokenLifetime;  return result;}  }
class C{  public static void expand(){  Node root=readTrie();  int length=BinaryStdIn.readInt();  for (int i=0; i < length; i++) {    Node x=root;    while (!x.isLeaf()) {      boolean bit=BinaryStdIn.readBoolean();      if (bit)       x=x.right; else       x=x.left;    }    BinaryStdOut.write(x.ch,8);  }  BinaryStdOut.close();}  }
class C{  public ApplicationProcessDescriptor stop() throws RunnerException, NotFoundException {  final ApplicationProcessDescriptor descriptor=getApplicationProcessDescriptor();  final Link link=descriptor.getLink(Constants.LINK_REL_STOP);  if (link == null) {switch (descriptor.getStatus()) {case STOPPED:case CANCELLED:      LOG.debug("Can't stop process, status is {}",descriptor.getStatus());    return descriptor;default :  throw new RunnerException("Can't stop application. Link for stop application is not available.");}}return runnerRequest(requestFactory.fromLink(link)).asDto(ApplicationProcessDescriptor.class);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:23.157 -0400",hash_original_method="3F3B508809AB9C6785D44F9F17208801",hash_generated_method="D889519C1E920D91ADF12936DFDB860E") public AtomicReferenceArray(int length){  array=new Object[length];}  }
class C{  public void deleteThinImagePair(String hostObjId,String snapshotGroupObjId,String replicationInfoObjId,String model) throws Exception {  InputStream responseStream=null;  ReplicationInfo replicationInfo=null;  try {    if (hostObjId != null && snapshotGroupObjId != null && replicationInfoObjId != null) {      Map<String,Object> attributeMap=new HashMap<String,Object>();      Delete deleteOp=new Delete(HDSConstants.REPLICATION,HDSConstants.INBAND2);      HDSHost host=new HDSHost();      host.setObjectID(hostObjId);      SnapshotGroup snapshotGroup=new SnapshotGroup();      snapshotGroup.setObjectID(snapshotGroupObjId);      replicationInfo=new ReplicationInfo();      replicationInfo.setObjectID(replicationInfoObjId);      attributeMap.put(HDSConstants.DELETE,deleteOp);      attributeMap.put(HDSConstants.HOST,host);      attributeMap.put(HDSConstants.MODEL,model);      attributeMap.put(HDSConstants.SNAPSHOTGROUP,snapshotGroup);      attributeMap.put(HDSConstants.REPLICATION_INFO,replicationInfo);      String deleteThinImagePairInputXML=InputXMLGenerationClient.getInputXMLString(HDSConstants.DELETE_THIN_IMAGE_PAIR_OP,attributeMap,HDSConstants.HITACHI_INPUT_XML_CONTEXT_FILE,HDSConstants.HITACHI_SMOOKS_CONFIG_FILE);      log.info("Query to delete thin image pair : {}",deleteThinImagePairInputXML);      URI endpointURI=hdsApiClient.getBaseURI();      ClientResponse response=hdsApiClient.post(endpointURI,deleteThinImagePairInputXML);      if (HttpStatus.SC_OK == response.getStatus()) {        responseStream=response.getEntityInputStream();        JavaResult result=SmooksUtil.getParsedXMLJavaResult(responseStream,HDSConstants.HITACHI_SMOOKS_THINIMAGE_CONFIG_FILE);        verifyErrorPayload(result);        log.info("Thin Image pair deleted successfully.");      } else {        log.error("Thin Image pair deletion failed with invalid response code {}",response.getStatus());        throw HDSException.exceptions.invalidResponseFromHDS(String.format("Thin Image pair deletion failed due to invalid response %1$s from server",response.getStatus()));      }    }  }  finally {    if (null != responseStream) {      try {        responseStream.close();      } catch (      IOException e) {        log.warn("IOException occurred while closing the response stream");      }    }  }}  }
class C{  public ComparableObjectItem(Comparable x,Object y){  ParamChecks.nullNotPermitted(x,"x");  this.x=x;  this.obj=y;}  }
class C{  @RequestMapping(value="/points/{id}",method=RequestMethod.DELETE,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<Void> delete(@PathVariable Long id){  log.debug("REST request to delete Points : {}",id);  pointsRepository.delete(id);  pointsSearchRepository.delete(id);  return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert("points",id.toString())).build();}  }
class C{  StartupMessage(Collection<String> hostedLocators,boolean isSharedConfigurationEnabled){  this.hostedLocatorsAll=hostedLocators;  this.isSharedConfigurationEnabled=isSharedConfigurationEnabled;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.MODEL__MODEL:    setModel((Program_)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  @Override public String toString(){  String str="";  for (  Condition cond : subconditions) {    str+=cond.toString();switch (operator) {case AND:      str+=" ^ ";    break;case OR:  str+=" v ";break;}}return str.substring(0,str.length() - 3);}  }
class C{  public void stateMachineNetwork(Network network){  Vertex language=network.createVertex(new Primitive(Language.class.getName()));  SelfCompiler compiler=SelfCompiler.getCompiler();  boolean debug=false;  Vertex stateMachine=compiler.parseStateMachine(getClass().getResource("Loop.self"),"",debug,network);  language.addRelationship(Primitive.STATE,stateMachine);  compiler.pin(stateMachine);  stateMachine=compiler.parseStateMachine(getClass().getResource("DefineWord.self"),"",debug,network);  language.addRelationship(Primitive.STATE,stateMachine);  compiler.pin(stateMachine);  stateMachine=compiler.parseStateMachine(getClass().getResource("Math.self"),"",debug,network);  language.addRelationship(Primitive.STATE,stateMachine);  compiler.pin(stateMachine);  stateMachine=compiler.parseStateMachine(getClass().getResource("DateAndTime.self"),"",debug,network);  language.addRelationship(Primitive.STATE,stateMachine);  compiler.pin(stateMachine);  stateMachine=compiler.parseStateMachine(getClass().getResource("Topic.self"),"",debug,network);  language.addRelationship(Primitive.STATE,stateMachine);  compiler.pin(stateMachine);  stateMachine=compiler.parseStateMachine(getClass().getResource("MyNameIs.self"),"",debug,network);  language.addRelationship(Primitive.STATE,stateMachine);  compiler.pin(stateMachine);  stateMachine=compiler.parseStateMachine(getClass().getResource("WhatIs.self"),"",debug,network);  language.addRelationship(Primitive.STATE,stateMachine);  compiler.pin(stateMachine);  stateMachine=compiler.parseStateMachine(getClass().getResource("WhereIs.self"),"",debug,network);  language.addRelationship(Primitive.STATE,stateMachine);  compiler.pin(stateMachine);  stateMachine=compiler.parseStateMachine(getClass().getResource("SayIt.self"),"",debug,network);  language.addRelationship(Primitive.STATE,stateMachine);  compiler.pin(stateMachine);  stateMachine=compiler.parseStateMachine(getClass().getResource("Understanding.self"),"",debug,network);  language.addRelationship(Primitive.STATE,stateMachine);  compiler.pin(stateMachine);  stateMachine=compiler.parseStateMachine(getClass().getResource("Reduction.self"),"",debug,network);  language.addRelationship(Primitive.STATE,stateMachine);  compiler.pin(stateMachine);  stateMachine=new Self4Compiler().parseStateMachine(getClass().getResource("Self.self"),"",debug,network);  language.addRelationship(Primitive.STATE,stateMachine);  SelfCompiler.getCompiler().pin(stateMachine);}  }
class C{  public GeometryLocation[] nearestLocations(){  computeMinDistance();  return minDistanceLocation;}  }
class C{  public RunAutomaton(Automaton a,int maxInterval,boolean tableize,int maxDeterminizedStates){  this.maxInterval=maxInterval;  a=Operations.determinize(a,maxDeterminizedStates);  this.automaton=a;  points=a.getStartPoints();  size=Math.max(1,a.getNumStates());  accept=new boolean[size];  transitions=new int[size * points.length];  Arrays.fill(transitions,-1);  for (int n=0; n < size; n++) {    accept[n]=a.isAccept(n);    for (int c=0; c < points.length; c++) {      int dest=a.step(n,points[c]);      assert dest == -1 || dest < size;      transitions[n * points.length + c]=dest;    }  }  if (tableize) {    classmap=new int[maxInterval + 1];    int i=0;    for (int j=0; j <= maxInterval; j++) {      if (i + 1 < points.length && j == points[i + 1]) {        i++;      }      classmap[j]=i;    }  } else {    classmap=null;  }}  }
class C{  public void loadData() throws BasicException {  saveData();  m_bd.loadData();  m_editorrecord.refresh();  baseMoveTo(0);}  }
class C{  public void removeSystemMethodDesignation(SootMethod sm){  all_sys_methods.removeMethod(sm);  spec_methods.removeMethod(sm);  safe_methods.removeMethod(sm);  banned_methods.removeMethod(sm);  api_modeled_methods.removeMethod(sm);}  }
class C{  public void save(URI uri,Object item) throws IOException {  OutputStreamWriter dst=null;  try {    dst=new FileWriter(new File(uri));    xstream.toXML(item,dst);  }  finally {    if (null != dst) {      dst.close();    }  }}  }
class C{  public void resetOriginals(){  mStartingStartTrim=0;  mStartingEndTrim=0;  mStartingRotation=0;  setStartTrim(0);  setEndTrim(0);  setRotation(0);}  }
class C{  private void createJournalEntriesForRecoveryRepayments(final LoanDTO loanDTO,final LoanTransactionDTO loanTransactionDTO,final Office office){  final Long loanProductId=loanDTO.getLoanProductId();  final Long loanId=loanDTO.getLoanId();  final String currencyCode=loanDTO.getCurrencyCode();  final String transactionId=loanTransactionDTO.getTransactionId();  final Date transactionDate=loanTransactionDTO.getTransactionDate();  final BigDecimal amount=loanTransactionDTO.getAmount();  final boolean isReversal=loanTransactionDTO.isReversed();  final Long paymentTypeId=loanTransactionDTO.getPaymentTypeId();  this.helper.createAccrualBasedJournalEntriesAndReversalsForLoan(office,currencyCode,ACCRUAL_ACCOUNTS_FOR_LOAN.FUND_SOURCE.getValue(),ACCRUAL_ACCOUNTS_FOR_LOAN.INCOME_FROM_RECOVERY.getValue(),loanProductId,paymentTypeId,loanId,transactionId,transactionDate,amount,isReversal);}  }
class C{  public String houseCodeFromSystemName(String systemName){  String hCode="";  if ((!aCodes.reset(systemName).matches()) || (!validSystemNameFormat(systemName,aCodes.group(2).charAt(0)))) {  } else {    if (hCodes.reset(systemName).matches() && hCodes.groupCount() == 2) {      try {        hCode=hCodes.group(1);      } catch (      Exception e) {        log.error("illegal character in house code field system name: " + systemName);        return "";      }    }  }  return hCode;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public boolean isNavBarTintEnabled(){  return mNavBarTintEnabled;}  }
class C{  public ChartPanelAll(String title,String unitName,XYDatasetWithGroups dataset){  super(title,unitName);  addChart(dataset);}  }
class C{  protected boolean isColumnControlActionKey(Object actionKey){  return (actionKey instanceof String) && ((String)actionKey).startsWith(COLUMN_CONTROL_MARKER);}  }
class C{  private void verifyRPVolumeResults() throws Exception {  for (  URI volumeURI : rpTestVolumeURIs) {    Volume volume=_dbClient.queryObject(Volume.class,volumeURI);    Assert.assertNotNull(String.format("rp test volume %s not found",volumeURI),volume);    if ((volume.getPersonality() != null) && !volume.getPersonality().equals(Volume.PersonalityTypes.METADATA.toString())) {      Assert.assertFalse("INTERNAL_OBJECT should NOT be set for a RP volume",volume.checkInternalFlags(Flag.INTERNAL_OBJECT));      Assert.assertFalse("SUPPORTS_FORCE should NOT be set for a RP volume",volume.checkInternalFlags(Flag.SUPPORTS_FORCE));    }    if ((volume.getPersonality() != null) && volume.getPersonality().equals(Volume.PersonalityTypes.METADATA.toString())) {      Assert.assertTrue("INTERNAL_OBJECT should be set for a RP Journal volume",volume.checkInternalFlags(Flag.INTERNAL_OBJECT));      Assert.assertTrue("SUPPORTS_FORCE should be set for a RP Journal volume",volume.checkInternalFlags(Flag.SUPPORTS_FORCE));    }  }}  }
class C{  void shutdown(){  if (shutdownHandler != null) {    shutdownHandler.shutdown();  }}  }
class C{  void checkQueueSizeConstraint() throws InterruptedException {  if (Thread.interrupted())   throw new InterruptedException();}  }
class C{  public TableIterator(){  while (nextIndex < table.length) {    nextEntry=table[nextIndex];    if (nextEntry != null) {      break;    }    nextIndex++;  }  finished=nextEntry == null;}  }
class C{  public static <T extends AbstractBlockBase<T>>AbstractBlockBase<?>[] computeLinearScanOrder(int blockCount,T startBlock){  List<T> order=new ArrayList<>();  BitSet visitedBlocks=new BitSet(blockCount);  PriorityQueue<T> worklist=initializeWorklist(startBlock,visitedBlocks);  computeLinearScanOrder(order,worklist,visitedBlocks);  assert checkOrder(order,blockCount);  return order.toArray(new AbstractBlockBase<?>[0]);}  }
class C{  public void addRow(Object[] rowData){  addRow(convertToVector(rowData));}  }
class C{  public static String nullSafeToString(Class<?>... classes){  return nullSafeToString(null,classes);}  }
class C{  @Override public <U>Eval<U> foldLeft(final U seed,final BiFunction<U,? super T,U> function){  return Eval.later(null);}  }
class C{  public static boolean hasNegative(XList L){  for (int i=0; i < L.size(); i+=1) {    if (L.get(i) < 0) {      return true;    }  }  return false;}  }
class C{  protected ByteArrayList(){  header=new Node();}  }
class C{  public static String signatureClass(String sig){  int pos=sig.indexOf(": ");  return sig.substring(1,pos);}  }
class C{  public void seriesChanged(SeriesChangeEvent event){  this.lastEvent=event;}  }
class C{  public void switchListMode(){  adapter.setListItemSize(adapter.getListItemSize() == Adapter_Alerts.ListItemSize.REDUCED ? Adapter_Alerts.ListItemSize.EXPANDED : Adapter_Alerts.ListItemSize.REDUCED);}  }
class C{  public static <T>T toObject(String json,Class<T> classOfT){  return gson.fromJson(json,classOfT);}  }
class C{  public static <K,V>MapStream<V,K> flip(MapStream<K,V> original){  return MapStream.fromStream(original,null,null);}  }
class C{  Iterator<Entity> listTasks(){  Query<Entity> query=Query.entityQueryBuilder().kind("Task").orderBy(OrderBy.asc("created")).build();  return datastore.run(query);}  }
class C{  public void append(final String str){  if ((str != null) && (str.length() > 0)) {    if (first) {      first=false;    } else {      buffer.append(separator);    }    buffer.append(str);  }}  }
class C{  public static Optional<Integer> determinePageSize(PaginationConfig paginationConfig,Optional<Integer> origPageSize) throws InvalidPageSizeException {  if (!origPageSize.isPresent()) {    return Optional.of(paginationConfig.getDefaultPageSize());  } else   if (origPageSize.get() < 1 || origPageSize.get() > paginationConfig.getMaxPageSize()) {    throw new InvalidPageSizeException(origPageSize.get(),1,paginationConfig.getMaxPageSize());  } else {    return origPageSize;  }}  }
class C{  public static void addCookieWebUser(HttpServletRequest request,HttpServletResponse response,String webUser,String COOKIE_NAME){  Cookie cookie=new Cookie(COOKIE_NAME,webUser);  cookie.setComment("adempiere Web User");  cookie.setPath(request.getContextPath());  cookie.setMaxAge(2592000);  response.addCookie(cookie);}  }
class C{  public ClusterBasedJobCoordinator(Config coordinatorSystemConfig){  MetricsRegistryMap registry=new MetricsRegistryMap();  jobModelManager=buildJobModelManager(coordinatorSystemConfig,registry);  config=jobModelManager.jobModel().getConfig();  state=new SamzaApplicationState(jobModelManager);  clusterManagerConfig=new ClusterManagerConfig(config);  isJmxEnabled=clusterManagerConfig.getJmxEnabled();  jobCoordinatorSleepInterval=clusterManagerConfig.getJobCoordinatorSleepInterval();  containerProcessManager=new ContainerProcessManager(config,state,registry);}  }
class C{  private void initSocket() throws IOException {  _idleTimeout=_port.getKeepaliveTimeout();  _port.ssl(_socket);  writeStream().init(_socket.stream());  _readStream.init(_socket.stream());  if (log.isLoggable(Level.FINEST)) {    log.finest(dbgId() + "starting connection " + this+ ", total="+ _port.getConnectionCount());  }}  }
class C{  public double crossLength(Geo b){  double x=this.y() * b.z() - this.z() * b.y();  double y=this.z() * b.x() - this.x() * b.z();  double z=this.x() * b.y() - this.y() * b.x();  return Math.sqrt(x * x + y * y + z * z);}  }
class C{  protected Map<BindingSetHashKey,List<BindingSet>> makeHashTable(int initialSize){  Map<BindingSetHashKey,List<BindingSet>> nextHashTable;  if (joinAttributes.length > 0) {    nextHashTable=new HashMap<BindingSetHashKey,List<BindingSet>>(initialSize);  } else {    List<BindingSet> l=(initialSize > 0) ? new ArrayList<BindingSet>(initialSize) : null;    nextHashTable=Collections.<BindingSetHashKey,List<BindingSet>>singletonMap(BindingSetHashKey.EMPTY,l);  }  return nextHashTable;}  }
class C{  private void mouseEvent(final Point point,final boolean rightMouse){  if (!rightMouse) {    String name=findTerritoryName(point);    name=JOptionPane.showInputDialog(this,"Enter the territory name:",name);    if (name == null || name.trim().length() == 0) {      return;    }    if (m_centers.containsKey(name) && JOptionPane.showConfirmDialog(this,"Another center exists with the same name. Are you sure you want to replace it with this one?") != 0) {      return;    }    m_centers.put(name,point);  } else {    String centerClicked=null;    for (    final Entry<String,Point> cur : m_centers.entrySet()) {      if (new Rectangle(cur.getValue(),new Dimension(15,15)).intersects(new Rectangle(point,new Dimension(1,1)))) {        centerClicked=cur.getKey();      }    }    if (centerClicked != null && JOptionPane.showConfirmDialog(this,"Are you sure you want to remove this center?") == 0) {      m_centers.remove(centerClicked);    }  }  repaint();}  }
class C{  @Override public double[][] predictIntervals(double conf){  updateWidth();  double val=Statistics.normalInverse(1.0 - (1.0 - conf) / 2);  double min=m_TM.firstKey() - val * m_Width;  double max=m_TM.lastKey() + val * m_Width;  double delta=(max - min) / m_NumIntervals;  double[] probabilities=new double[m_NumIntervals];  double leftVal=Math.exp(logDensity(min));  for (int i=0; i < m_NumIntervals; i++) {    double rightVal=Math.exp(logDensity(min + (i + 1) * delta));    probabilities[i]=0.5 * (leftVal + rightVal) * delta;    leftVal=rightVal;  }  int[] sortedIndices=Utils.sort(probabilities);  double sum=0;  boolean[] toUse=new boolean[probabilities.length];  int k=0;  while ((sum < conf) && (k < toUse.length)) {    toUse[sortedIndices[toUse.length - (k + 1)]]=true;    sum+=probabilities[sortedIndices[toUse.length - (k + 1)]];    k++;  }  probabilities=null;  ArrayList<double[]> intervals=new ArrayList<double[]>();  double[] interval=null;  boolean haveStartedInterval=false;  for (int i=0; i < m_NumIntervals; i++) {    if (toUse[i]) {      if (haveStartedInterval == false) {        haveStartedInterval=true;        interval=new double[2];        interval[0]=min + i * delta;      }      interval[1]=min + (i + 1) * delta;    } else {      if (haveStartedInterval) {        haveStartedInterval=false;        intervals.add(interval);      }    }  }  if (haveStartedInterval) {    intervals.add(interval);  }  return intervals.toArray(new double[0][0]);}  }
class C{  public ChainType checkMapMultChain(){  ChainType chainType=ChainType.NONE;  Hop in1=getInput().get(0);  Hop in2=getInput().get(1);  if (in1 instanceof ReorgOp && ((ReorgOp)in1).getOp() == ReOrgOp.TRANSPOSE) {    Hop X=in1.getInput().get(0);    if (in2 instanceof BinaryOp && ((BinaryOp)in2).getOp() == OpOp2.MULT) {      Hop in3b=in2.getInput().get(1);      if (in3b instanceof AggBinaryOp) {        Hop in4=in3b.getInput().get(0);        if (X == in4)         chainType=ChainType.XtwXv;      }    } else     if (in2 instanceof BinaryOp && ((BinaryOp)in2).getOp() == OpOp2.MINUS) {      Hop in3a=in2.getInput().get(0);      Hop in3b=in2.getInput().get(1);      if (in3a instanceof AggBinaryOp && in3b.getDataType() == DataType.MATRIX) {        Hop in4=in3a.getInput().get(0);        if (X == in4)         chainType=ChainType.XtXvy;      }    } else     if (in2 instanceof AggBinaryOp) {      Hop in3=in2.getInput().get(0);      if (X == in3)       chainType=ChainType.XtXv;    }  }  return chainType;}  }
class C{  public static String encodeAttributeCode(String attributeCode){  return attributeCode.startsWith("+") ? attributeCode : "+" + attributeCode;}  }
class C{  public void writeAll(List<String[]> allLines,boolean applyQuotesToAll){  for (  String[] line : allLines) {    writeNext(line,applyQuotesToAll);  }}  }
class C{  @Override public boolean isInitial(){  return init;}  }
class C{  public static boolean isEquivalent(ArrayList<PathParser.PathDataNode> original,ArrayList<PathParser.PathDataNode> alternative){  int innerStart=0;  for (  PathParser.PathDataNode o : original) {    boolean found=false;    for (int i=innerStart; i < alternative.size() && !found; i++) {      PathParser.PathDataNode n=alternative.get(i);      if ((o.mType == n.mType && Arrays.equals(o.mParams,n.mParams)) || ((o.mType == 'Z' || o.mType == 'z') && n.mType == 'L')) {        found=true;        innerStart=i + 1;      }    }    if (!found)     return false;  }  return true;}  }
class C{  public void rectValueToPixelHorizontal(RectF r,float phaseY){  if (r.left > 0)   r.left*=phaseY; else   r.right*=phaseY;  mMatrixValueToPx.mapRect(r);  mViewPortHandler.getMatrixTouch().mapRect(r);  mMatrixOffset.mapRect(r);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:09.591 -0400",hash_original_method="B00ECC3366986543C948864F6AC687FF",hash_generated_method="4701467D424149486DFEDEFF7F429925") void create(Subject subject,CallbackHandler callbackHandler,Map<String,?> sharedState) throws LoginException {  String klassName=entry.getLoginModuleName();  if (klass == null) {    try {      klass=Class.forName(klassName,false,contextClassLoader);    } catch (    ClassNotFoundException ex) {      throw (LoginException)new LoginException("auth.39 " + klassName).initCause(ex);    }  }  if (module == null) {    try {      module=(LoginModule)klass.newInstance();    } catch (    IllegalAccessException ex) {      throw (LoginException)new LoginException("auth.3A " + klassName).initCause(ex);    }catch (    InstantiationException ex) {      throw (LoginException)new LoginException("auth.3A" + klassName).initCause(ex);    }    module.initialize(subject,callbackHandler,sharedState,entry.getOptions());  }}  }
class C{  public GlobeAnnotation(String text,Position position){  this.init(text,position,null,null);}  }
class C{  public static synchronized void register(PurchaseObserver observer){  sPurchaseObserver=observer;}  }
class C{  public int selectNumTriggers(Connection conn) throws SQLException {  PreparedStatement ps=null;  ResultSet rs=null;  try {    int count=0;    ps=conn.prepareStatement(rtp(SELECT_NUM_TRIGGERS));    rs=ps.executeQuery();    if (rs.next()) {      count=rs.getInt(1);    }    return count;  }  finally {    closeResultSet(rs);    closeStatement(ps);  }}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/deactivate") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public Response deleteBlockVirtualPool(@PathParam("id") URI id){  return deleteVirtualPool(VirtualPool.Type.block,id);}  }
class C{  public boolean isTransactionInputMine(TransactionInput transactionInput,Wallet wallet){  try {    byte[] pubkey=transactionInput.getScriptSig().getPubKey();    return wallet.isPubKeyMine(pubkey);  } catch (  ScriptException e) {    return false;  }}  }
class C{  public int distinctTermCount(){  return terms.size();}  }
class C{  protected void mergeAggregatorID(IntArrayList aggIDList,int aggregatorID){  for (int index=0; index < aggIDList.size(); ++index) {    if (aggIDList.get(index) == aggregatorID) {      return;    }  }  aggIDList.add(aggregatorID);}  }
class C{  public void recycle(){  clear();  sPool.release(this);}  }
class C{  private BugManager(){  localClientInfoFactory=LimeWireModule.instance().getLimeWireGUIModule().getLimeWireGUI().getLocalClientInfoFactory();}  }
class C{  public ProjectionUPS(){  super(NORTH_LIMITS);}  }
class C{  private void addJUnitExcludes(){  if (Properties.JUNIT.isEmpty())   return;  List<String> values=new ArrayList<>(Arrays.asList(excludedPackages));  values.add("org.junit");  for (  String junitClass : Properties.JUNIT.split(":")) {    values.add(junitClass);  }  excludedPackages=new String[values.size()];  excludedPackages=values.toArray(excludedPackages);}  }
class C{  public static long divide(long dividend,long divisor){  if (divisor < 0) {    if (compare(dividend,divisor) < 0) {      return 0;    } else {      return 1;    }  }  if (dividend >= 0) {    return dividend / divisor;  }  long quotient=((dividend >>> 1) / divisor) << 1;  long rem=dividend - quotient * divisor;  return quotient + (compare(rem,divisor) >= 0 ? 1 : 0);}  }
class C{  public WritableRaster createWritableChild(int x,int y,int width,int height,int x0,int y0,int bandList[]){  if (x < this.minX) {    throw new RasterFormatException("x lies outside raster");  }  if (y < this.minY) {    throw new RasterFormatException("y lies outside raster");  }  if ((x + width < x) || (x + width > this.minX + this.width)) {    throw new RasterFormatException("(x + width) is outside raster");  }  if ((y + height < y) || (y + height > this.minY + this.height)) {    throw new RasterFormatException("(y + height) is outside raster");  }  SampleModel sm;  if (bandList != null)   sm=sampleModel.createSubsetSampleModel(bandList); else   sm=sampleModel;  int deltaX=x0 - x;  int deltaY=y0 - y;  return new IntegerInterleavedRaster(sm,dataBuffer,new Rectangle(x0,y0,width,height),new Point(sampleModelTranslateX + deltaX,sampleModelTranslateY + deltaY),this);}  }
class C{  public void exposeInJavaScript(Object o,String name){  Display.impl.browserExposeInJavaScript(internal,o,name);}  }
class C{  private void updateTypeImports(SearchResultGroup typeReferences) throws CoreException {  SearchMatch[] searchResults=typeReferences.getSearchResults();  for (int i=0; i < searchResults.length; i++) {    SearchMatch result=searchResults[i];    IJavaElement enclosingElement=SearchUtils.getEnclosingJavaElement(result);    if (enclosingElement instanceof IImportDeclaration) {      IImportDeclaration importDeclaration=(IImportDeclaration)enclosingElement;      updateImport(typeReferences.getCompilationUnit(),importDeclaration,getUpdatedImport(importDeclaration));    } else {      String reference=getNormalizedTypeReference(result);      if (!reference.startsWith(fPackage.getElementName())) {        reference=cutOffInnerTypes(reference);        ImportChange importChange=fImportsManager.getImportChange(typeReferences.getCompilationUnit());        importChange.removeImport(fPackage.getElementName() + '.' + reference);        importChange.addImport(getNewPackageName() + '.' + reference);      }    }  }}  }
class C{  public static String readString(int hkey,String key,String valueName) throws IllegalArgumentException, IllegalAccessException, InvocationTargetException {  if (hkey == HKEY_LOCAL_MACHINE) {    return readString(systemRoot,hkey,key,valueName);  } else   if (hkey == HKEY_CURRENT_USER) {    return readString(userRoot,hkey,key,valueName);  } else {    throw new IllegalArgumentException("hkey=" + hkey);  }}  }
class C{  public void rotateX(float angle){  rotate(angle,1,0,0);}  }
class C{  public void testDeployWarDefinedWithRootPath() throws Exception {  WAR war=(WAR)new DefaultDeployableFactory().createDeployable(getContainer().getId(),getTestData().getTestDataFileFor("simple-war"),DeployableType.WAR);  war.setContext("/");  getLocalContainer().getConfiguration().addDeployable(war);  URL warPingURL=new URL("http://localhost:" + getTestData().port + "/index.jsp");  getLocalContainer().start();  PingUtils.assertPingTrue(warPingURL.getPath() + " not started","Sample page for testing",warPingURL,getLogger());  getLocalContainer().stop();  PingUtils.assertPingFalse(warPingURL.getPath() + " not stopped",warPingURL,getLogger());}  }
class C{  public boolean equals(Object other){  return other instanceof List && equals(this,(List)other);}  }
class C{  public int readRawLittleEndian32() throws IOException {  final byte b1=readRawByte();  final byte b2=readRawByte();  final byte b3=readRawByte();  final byte b4=readRawByte();  return ((b1 & 0xff)) | ((b2 & 0xff) << 8) | ((b3 & 0xff) << 16)| ((b4 & 0xff) << 24);}  }
class C{  public ThumbnailParameterBuilder size(Dimension size){  size(size.width,size.height);  return this;}  }
class C{  private void header(){  ps.println("# This file contains information required for automatic updates");  ps.println();}  }
class C{  private void fill(int index){  this.choiceLocal[index]++;  for (int i=index + 1; i < getB(); i++) {    this.choiceLocal[i]=this.choiceLocal[i - 1] + 1;  }}  }
class C{  private static void compressLongestRunOfZeroes(int[] hextets){  int bestRunStart=-1;  int bestRunLength=-1;  int runStart=-1;  for (int i=0; i < hextets.length + 1; i++) {    if (i < hextets.length && hextets[i] == 0) {      if (runStart < 0) {        runStart=i;      }    } else     if (runStart >= 0) {      int runLength=i - runStart;      if (runLength > bestRunLength) {        bestRunStart=runStart;        bestRunLength=runLength;      }      runStart=-1;    }  }  if (bestRunLength >= 2) {    Arrays.fill(hextets,bestRunStart,bestRunStart + bestRunLength,-1);  }}  }
class C{  private boolean isMonthly(){  return ExecutionWindowType.MONTHLY.name().equals(window.getExecutionWindowType());}  }
class C{  public void popSchema(){  if (fieldCnt > 0)   schema.pop(fieldCnt);}  }
class C{  public boolean isIndexed(){  Object oo=get_Value(COLUMNNAME_IsIndexed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @SuppressWarnings("deprecation") protected void processStyledAttributes(@NonNull TypedArray a){  float targetAspectRatioX=Math.abs(a.getFloat(R.styleable.ucrop_UCropView_ucrop_aspect_ratio_x,DEFAULT_ASPECT_RATIO));  float targetAspectRatioY=Math.abs(a.getFloat(R.styleable.ucrop_UCropView_ucrop_aspect_ratio_y,DEFAULT_ASPECT_RATIO));  if (targetAspectRatioX == SOURCE_IMAGE_ASPECT_RATIO || targetAspectRatioY == SOURCE_IMAGE_ASPECT_RATIO) {    mTargetAspectRatio=SOURCE_IMAGE_ASPECT_RATIO;  } else {    mTargetAspectRatio=targetAspectRatioX / targetAspectRatioY;  }}  }
class C{  private void deallocate(boolean noNewStreams,boolean released,boolean streamFinished){  RealConnection connectionToClose=null;synchronized (connectionPool) {    if (streamFinished) {      this.stream=null;    }    if (released) {      this.released=true;    }    if (connection != null) {      if (noNewStreams) {        connection.noNewStreams=true;      }      if (this.stream == null && (this.released || connection.noNewStreams)) {        release(connection);        if (connection.streamCount > 0) {          routeSelector=null;        }        if (connection.allocations.isEmpty()) {          connection.idleAtNanos=System.nanoTime();          if (Internal.instance.connectionBecameIdle(connectionPool,connection)) {            connectionToClose=connection;          }        }        connection=null;      }    }  }  if (connectionToClose != null) {    Util.closeQuietly(connectionToClose.getSocket());  }}  }
class C{  public ConfiguredGuacamoleSocket(GuacamoleSocket socket,GuacamoleConfiguration config,GuacamoleClientInformation info) throws GuacamoleException {  this.socket=socket;  this.config=config;  GuacamoleReader reader=socket.getReader();  GuacamoleWriter writer=socket.getWriter();  String select_arg=config.getConnectionID();  if (select_arg == null)   select_arg=config.getProtocol();  writer.writeInstruction(new GuacamoleInstruction("select",select_arg));  GuacamoleInstruction args=expect(reader,"args");  List<String> arg_names=args.getArgs();  String[] arg_values=new String[arg_names.size()];  for (int i=0; i < arg_names.size(); i++) {    String arg_name=arg_names.get(i);    String value=config.getParameter(arg_name);    if (value != null)     arg_values[i]=value; else     arg_values[i]="";  }  writer.writeInstruction(new GuacamoleInstruction("size",Integer.toString(info.getOptimalScreenWidth()),Integer.toString(info.getOptimalScreenHeight()),Integer.toString(info.getOptimalResolution())));  writer.writeInstruction(new GuacamoleInstruction("audio",info.getAudioMimetypes().toArray(new String[0])));  writer.writeInstruction(new GuacamoleInstruction("video",info.getVideoMimetypes().toArray(new String[0])));  writer.writeInstruction(new GuacamoleInstruction("image",info.getImageMimetypes().toArray(new String[0])));  writer.writeInstruction(new GuacamoleInstruction("connect",arg_values));  GuacamoleInstruction ready=expect(reader,"ready");  List<String> ready_args=ready.getArgs();  if (ready_args.isEmpty())   throw new GuacamoleServerException("No connection ID received");  id=ready.getArgs().get(0);}  }
class C{  public AuthenticatorException(String msg,Throwable nested){  super(msg,nested);}  }
class C{  public static String encodeBytes(final byte[] source){  return Base64.encodeBytes(source,0,source.length,Base64.NO_OPTIONS);}  }
class C{  @Override public TransportRequestOptions transportOptions(Settings settings){  return TransportRequestOptions.builder().withType(TransportRequestOptions.Type.REG).build();}  }
class C{  public static void createParentDirs(File file) throws IOException {  checkNotNull(file);  File parent=file.getCanonicalFile().getParentFile();  if (parent == null) {    return;  }  parent.mkdirs();  if (!parent.isDirectory()) {    throw new IOException("Unable to create parent directories of " + file);  }}  }
class C{  private void onNamedSchemaComplexType(Element schemaComplexType){  Attribute nameAttr=schemaComplexType.attribute("name");  if (nameAttr == null) {    return;  }  String name=nameAttr.getText();  QName qname=getQName(name);  DatatypeElementFactory factory=getDatatypeElementFactory(qname);  onSchemaComplexType(schemaComplexType,factory);  namedTypeResolver.registerComplexType(qname,factory);}  }
class C{  public TerminalSeqSet(Terminal[]... sequences){  super();  this.set=new HashSet<TerminalSeqf>();  for (  Terminal[] seqArr : sequences) {    this.set.add(new TerminalSeqf(seqArr));  }}  }
class C{  public String currentDate(String format,String timezone){  DateFormat formatter=getFormatter(format);  if (StringUtils.isNotBlank(timezone)) {    formatter.setTimeZone(TimeZone.getTimeZone(timezone));  }  return formatter.format(new Date());}  }
class C{  protected void removeFromMaintenanceQueue(NodePortTuple npt){  while (maintenanceQueue.remove(npt))   ;}  }
class C{  private WorkerOp nextOp(){  if (complete)   return WorkerOp.NO_OP;  if (isReady()) {    if (needCommit)     return WorkerOp.COMMIT; else     if (needWindow)     return WorkerOp.WINDOW; else     if (endOfStream)     return WorkerOp.END_OF_STREAM; else     if (!pendingEnvelopQueue.isEmpty())     return WorkerOp.PROCESS;  }  return WorkerOp.NO_OP;}  }
class C{  @Override public long skip(long n) throws IOException {  if (defaultSkip) {    return super.skip(n);  }  if (n <= 0) {    return 0;  }  long left=n;  byte[] sBuff=new byte[SKIP_BUFFER_SIZE];  while (left > 0) {    int res=read(sBuff,0,(int)(left < SKIP_BUFFER_SIZE ? left : SKIP_BUFFER_SIZE));    if (res < 0) {      break;    }    left-=res;  }  return n - left;}  }
class C{  public void addUndoableEdit(UndoableEdit edit){}  }
class C{  public void calculateMax(double max){  this.max=Math.max(this.max,max);}  }
class C{  @Override protected void rehash(int newCapacity){  int oldCapacity=_set.length;  int[] oldKeys=_set;  int[] oldVals=_values;  byte[] oldStates=_states;  _set=new int[newCapacity];  _values=new int[newCapacity];  _states=new byte[newCapacity];  for (int i=oldCapacity; i-- > 0; ) {    if (oldStates[i] == FULL) {      int o=oldKeys[i];      int index=insertionIndex(o);      _set[index]=o;      _values[index]=oldVals[i];      _states[index]=FULL;    }  }}  }
class C{  private static MobileDoc createPage(MobileSessionCtx wsc,WWindowStatus ws,String formName,String fieldName,String fieldValue,String locationValue){  MobileDoc doc=MobileDoc.create(true);  body body=doc.getBody();  log.info("Location-createpage: " + locationValue);  StringBuffer sb=new StringBuffer("FieldUpdate - ").append(FIELD_FORM).append("=").append(formName).append(", ").append(FIELD_NAME).append("=").append(fieldName).append(", ").append(FIELD_VALUE).append("=").append(fieldValue).append(LOCATION_VALUE).append("=").append(locationValue);  body.addElement(new p().addElement(sb.toString()));  if (formName == null || fieldName == null)   ; else   if (formName.equals("Login2") && fieldName.equals(WLogin.P_ROLE))   reply_Login2_Role(body,wsc,formName,fieldValue,locationValue); else   if (formName.equals("Login2") && fieldName.equals(WLogin.P_CLIENT))   reply_Login2_Client(body,wsc,formName,fieldValue,locationValue); else   if (formName.equals("Login2") && fieldName.equals(WLogin.P_ORG))   reply_Login2_Org(body,wsc,ws,formName,fieldValue,locationValue);  return doc;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static void main(String[] args){  if (args.length > 0) {    numThreads=Integer.valueOf(args[0]);  }  int NUM_TRIALS=100;  Generator<IPoint> g=new UniformGenerator();  System.out.println("Num Threads:" + numThreads);  TrialSuite tsNative=new TrialSuite();  TrialSuite tsMulti=new TrialSuite();  TrialSuite tsHeur=new TrialSuite();  TrialSuite tsMultiHeur=new TrialSuite();  TrialSuite tsBoth=new TrialSuite();  TrialSuite tsMultiBoth=new TrialSuite();  for (int n=2048; n <= 1048576; n*=2) {    System.out.println(n + "...");    long numRemoved=0;    long numPointsOnHull=0;    for (int t=0; t < NUM_TRIALS; t++) {      IPoint[] master=g.generate(n);      IPoint[] points=new IPoint[master.length];      for (int i=0; i < master.length; i++) {        points[i]=new TwoDPoint(master[i]);      }      System.gc();      long now=System.currentTimeMillis();      IPoint[] hull1=new algs.model.problems.convexhull.andrew.ConvexHullScan().compute(points);      long after=System.currentTimeMillis();      tsNative.addTrial(n,now,after);      System.gc();      now=System.currentTimeMillis();      IPoint[] hull1a=new algs.blog.multithread.convexhull.ConvexHullScan(numThreads).compute(points);      after=System.currentTimeMillis();      tsMulti.addTrial(n,now,after);      System.gc();      now=System.currentTimeMillis();      IPoint[] reduced=algs.model.problems.convexhull.AklToussaint.reduce(points);      long now2=System.currentTimeMillis();      IPoint[] hull2=new algs.model.problems.convexhull.andrew.ConvexHullScan().compute(reduced);      after=System.currentTimeMillis();      tsHeur.addTrial(n,now,now2);      tsBoth.addTrial(n,now,after);      System.gc();      now=System.currentTimeMillis();      IPoint[] reduced2a=algs.blog.multithread.convexhull.AklToussaint.reduce(points);      now2=System.currentTimeMillis();      IPoint[] hull2a=new algs.blog.multithread.convexhull.ConvexHullScan(numThreads).compute(reduced2a);      after=System.currentTimeMillis();      tsMultiHeur.addTrial(n,now,now2);      tsMultiBoth.addTrial(n,now,after);      assert (hull1.length == hull2.length);      assert (hull1a.length == hull1.length);      assert (hull2a.length == hull2.length);      assert (reduced2a.length == reduced.length);      numRemoved+=(master.length - reduced.length);      numPointsOnHull+=hull1.length;    }    System.out.println("NumRemoved:" + (1.0f * numRemoved) / NUM_TRIALS);    System.out.println("NumPointsOnHull:" + (1.0f * numPointsOnHull) / NUM_TRIALS);  }  System.out.println("native:" + tsNative.computeTable());  System.out.println("heuristic:" + tsHeur.computeTable());  System.out.println("both:" + tsBoth.computeTable());  System.out.println();  System.out.println("multithread:" + tsMulti.computeTable());  System.out.println("multi-threadheuristic:" + tsMultiHeur.computeTable());  System.out.println("multi-thread both:" + tsMultiBoth.computeTable());  System.out.println();}  }
class C{  private void fillCache(IgniteCache<Integer,Integer> cache,int keysCnt) throws Exception {  try (Transaction tx=cache.unwrap(Ignite.class).transactions().txStart()){    for (int i=0; i < keysCnt; i++)     cache.put(i,i);    tx.commit();  } }  }
class C{  public LoadSessionAction(){  super("Open Session...");}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:17.138 -0500",hash_original_method="4A983FDB3FF481E2165B7D8D641CDD48",hash_generated_method="3CA4089EBE14436E733AD365EF1361B8") public boolean onTrackballEvent(MotionEvent event){  return false;}  }
class C{  public NetworkBuilder<N,E> expectedNodeCount(int expectedNodeCount){  checkArgument(expectedNodeCount >= 0,"The expected number of nodes can't be negative: %s",expectedNodeCount);  this.expectedNodeCount=Optional.of(expectedNodeCount);  return this;}  }
class C{  public static void clearDBData() throws Exception {  AspectHome aspectHome=new AspectHome();  Aspects contracts=aspectHome.findByClassName(Contract.class.getName());  for (  Aspect aspect : contracts.getAspect()) {    ((Contract)aspect).setTradePosition(null);    aspectHome.persist(aspect);  }  Aspects tradeOrders=aspectHome.findByClassName(TradeOrder.class.getName());  for (  Aspect aspect : tradeOrders.getAspect()) {    aspectHome.remove(aspect);  }  Aspects tradePositions=aspectHome.findByClassName(TradePosition.class.getName());  for (  Aspect aspect : tradePositions.getAspect()) {    aspectHome.remove(aspect);  }  Aspects portfolioAccounts=aspectHome.findByClassName(PortfolioAccount.class.getName());  for (  Aspect aspect : portfolioAccounts.getAspect()) {    aspectHome.remove(aspect);  }  Aspects accounts=aspectHome.findByClassName(Account.class.getName());  for (  Aspect aspect : accounts.getAspect()) {    aspectHome.remove(aspect);  }  Aspects tradestrategies=aspectHome.findByClassName(Tradestrategy.class.getName());  for (  Aspect aspect : tradestrategies.getAspect()) {    aspectHome.remove(aspect);  }  contracts=aspectHome.findByClassName(Contract.class.getName());  for (  Aspect aspect : contracts.getAspect()) {    aspectHome.remove(aspect);  }  Aspects tradingdays=aspectHome.findByClassName(Tradingday.class.getName());  for (  Aspect aspect : tradingdays.getAspect()) {    aspectHome.remove(aspect);  }}  }
class C{  public void testApp(){  assertTrue(true);}  }
class C{  private <T>void assertSameRef(final T expected,final T actual){  if (expected != actual) {    fail("Different reference: expected=" + expected + ", actual="+ actual);  }}  }
class C{  @Override public PermissionCollection newPermissionCollection(){  return (new PackagePermissionCollection());}  }
class C{  public DateTime minus(ReadableDuration duration){  return withDurationAdded(duration,-1);}  }
class C{  public String regString(){  return regString(reg);}  }
class C{  public LiveChatConnection openLiveChat(ChannelConfig channel,LiveChatListener listener){  LiveChatConnection connection=new LiveChatConnection(this.credentials,listener);  connection.connect(channel,this.user);  return connection;}  }
class C{  public void backupBlockState(Block block){  blockStateMap.remove(block.getLocation());  blockStateBackupMap.put(block.getLocation(),new GlowBlockState((GlowBlock)block));}  }
class C{  public static LatLng random(Random r){  return new LatLng((r.nextDouble() * -180.0) + 90.0,(r.nextDouble() * -360.0) + 180.0);}  }
class C{  public boolean deleteAttachmentPoint(DatapathId sw,OFPort port){  AttachmentPoint ap=new AttachmentPoint(sw,port,new Date(0));  if (this.oldAPs != null) {    ArrayList<AttachmentPoint> apList=new ArrayList<AttachmentPoint>();    apList.addAll(this.oldAPs);    int index=apList.indexOf(ap);    if (index > 0) {      apList.remove(index);      this.oldAPs=apList;    }  }  if (this.attachmentPoints != null) {    ArrayList<AttachmentPoint> apList=new ArrayList<AttachmentPoint>();    apList.addAll(this.attachmentPoints);    int index=apList.indexOf(ap);    if (index > 0) {      apList.remove(index);      this.attachmentPoints=apList;      return true;    }  }  return false;}  }
class C{  public static <K1,V1,K2,V2>MutableMap<K2,V2> collect(Map<K1,V1> map,Function<? super K1,? extends K2> keyFunction,Function<? super V1,? extends V2> valueFunction){  return MapIterate.collect(map,keyFunction,valueFunction,UnifiedMap.newMap());}  }
class C{  public void parse(String systemId) throws IOException, SAXException {  parse(new InputSource(systemId));}  }
class C{  @Override public int compare(TransportOrder o1,TransportOrder o2){  if (o1.getPriority().getOrder() > o2.getPriority().getOrder()) {    return -1;  } else   if (o1.getPriority().getOrder() < o2.getPriority().getOrder()) {    return 1;  }  if (o1.getPk() < o2.getPk()) {    return -1;  } else   if (o1.getPk() > o2.getPk()) {    return 1;  }  return 0;}  }
class C{  public void cut(){  if (editable) {    copy();    setSelectedText("");  }}  }
class C{  @Override public void run(){  amIActive=true;  boolean image1Bool=false;  boolean image2Bool=false;  double constant1=0;  double constant2=0;  if (args.length < 3) {    showFeedback("Plugin parameters have not been set.");    return;  }  String inputHeader1=args[0];  File file=new File(inputHeader1);  image1Bool=file.exists();  if (image1Bool) {    constant1=-1;  } else {    constant1=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String inputHeader2=args[1];  file=new File(inputHeader2);  image2Bool=file.exists();  if (image2Bool) {    constant2=-1;  } else {    constant2=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    if (image1Bool && image2Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData1=inputFile1.getNoDataValue();      double noData2=inputFile2.getNoDataValue();      if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {        showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");        return;      }      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.INTEGER,noData1);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          z2=data2[col];          if ((z1 != noData1) && (z2 != noData2)) {            if (z1 == z2) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          } else {            outputFile.setValue(row,col,noData1);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          updateProgress((int)progress);          oldProgress=progress;          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      inputFile2.close();      outputFile.close();    } else     if (image1Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData=inputFile1.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.INTEGER,noData);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          if (z1 != noData) {            if (z1 == constant2) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      outputFile.close();    } else     if (image2Bool) {      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile2.getNumberRows();      int cols=inputFile2.getNumberColumns();      double noData=inputFile2.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader2,WhiteboxRaster.DataType.INTEGER,noData);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row < rows; row++) {        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z2=data2[col];          if (z2 != noData) {            if (z2 == constant1) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile2.close();      outputFile.close();    } else {      showFeedback("At least one of the inputs must be a raster image.");    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void testEscapeProcessing() throws Exception {  String results="select dayname (abs(now())),   -- Today    \n" + "           '1997-05-24',  -- a date                    \n" + "           '10:30:29',  -- a time                     \n" + (versionMeetsMinimum(5,6,4) ? "           '1997-05-24 10:30:29.123', -- a timestamp  \n" : "           '1997-05-24 10:30:29', -- a timestamp  \n") + "          '{string data with { or } will not be altered'   \n"+ "--  Also note that you can safely include { and } in comments";  String exSql="select {fn dayname ({fn abs({fn now()})})},   -- Today    \n" + "           {d '1997-05-24'},  -- a date                    \n" + "           {t '10:30:29' },  -- a time                     \n"+ "           {ts '1997-05-24 10:30:29.123'}, -- a timestamp  \n"+ "          '{string data with { or } will not be altered'   \n"+ "--  Also note that you can safely include { and } in comments";  String escapedSql=this.conn.nativeSQL(exSql);  assertTrue(results.equals(escapedSql));}  }
class C{  public Vector3d sub(Vector3dc v){  x-=v.x();  y-=v.y();  z-=v.z();  return this;}  }
class C{  public void performDefaultLayout(){  logicalBounds=null;  outline=null;  bounds2D=null;  float currentX=0;  float currentY=0;  for (int i=0; i < glyphs.length; i++) {    Glyph g=glyphs[i];    g.setTransform(null);    glyphLogicalBounds[i]=null;    String uni=g.getUnicode();    if ((uni != null) && (uni.length() != 0) && ArabicTextHandler.arabicCharTransparent(uni.charAt(0))) {      int j;      for (j=i + 1; j < glyphs.length; j++) {        uni=glyphs[j].getUnicode();        if ((uni == null) || (uni.length() == 0))         break;        char ch=uni.charAt(0);        if (!ArabicTextHandler.arabicCharTransparent(ch))         break;      }      if (j != glyphs.length) {        Glyph bg=glyphs[j];        float rEdge=currentX + bg.getHorizAdvX();        for (int k=i; k < j; k++) {          g=glyphs[k];          g.setTransform(null);          glyphLogicalBounds[i]=null;          g.setPosition(new Point2D.Float(rEdge - g.getHorizAdvX(),currentY));        }        i=j;        g=bg;      }    }    g.setPosition(new Point2D.Float(currentX,currentY));    currentX+=g.getHorizAdvX();  }  endPos=new Point2D.Float(currentX,currentY);}  }
class C{  protected void init(){  if (bufferPoolMinDirectMemoryOccupancy > bufferPoolMaxDirectMemoryOccupancy) {    throw new BeanInitializationException("Settings for the byte buffer pool are not correct. bufferPoolMinDirectMemoryOccupancy (" + bufferPoolMaxDirectMemoryOccupancy + ") is greater than bufferPoolMaxDirectMemoryOccupancy ("+ bufferPoolMinDirectMemoryOccupancy+ ")");  }  if (poolMinCapacity > poolMaxCapacity) {    throw new BeanInitializationException("Settings for the byte buffer pool are not correct. poolMinCapacity (" + poolMinCapacity + ") is greater than poolMaxCapacity ("+ poolMaxCapacity+ ")");  }  updatePoolProperties();}  }
class C{  private boolean shardExistsInNode(final NodeGatewayStartedShards response){  return response.storeException() != null || response.version() != -1;}  }
class C{  public void add(int value){  ensureCapacity(size + 1);  data[size++]=value;}  }
class C{  protected void processWindowEvent(WindowEvent e){  if (e.getID() == WindowEvent.WINDOW_CLOSING) {    mainPanel.doWindowClose();  } else   if (e.getID() == WindowEvent.WINDOW_OPENED) {    mainPanel.doWindowOpen();  }}  }
class C{  public static boolean equal(long[] x,long[] y){  if (x == null || y == null) {    return (x == null) && (y == null);  }  int p=Math.min(x.length,y.length) - 1;  for (int i=x.length - 1; i > p; i--) {    if (x[i] != 0L) {      return false;    }  }  for (int i=y.length - 1; i > p; i--) {    if (y[i] != 0L) {      return false;    }  }  for (; p >= 0; p--) {    if (x[p] != y[p]) {      return false;    }  }  return true;}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.395 -0500",hash_original_method="B06A6A8CC80D9698711113EFD1E58499",hash_generated_method="57C1CCBA69B4100AD0EB721BFEB07DD9") public ReferencesHeader createReferencesHeader(String callId,String rel) throws ParseException {  ReferencesHeader retval=new References();  retval.setCallId(callId);  retval.setRel(rel);  return retval;}  }
class C{  @Override public StoryObject copy(){  return new StoryObject(this);}  }
class C{  public PerpendicularBar(){  this(10);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:46.749 -0500",hash_original_method="CB97BE8665681C1FD82290A9CE03A1A5",hash_generated_method="1518C88CE2A7455D28F00A07D030AD7B") private Identity(){}  }
class C{  public static List<GenericValue> findPartiesById(Delegator delegator,String idToFind,String partyIdentificationTypeId,boolean searchPartyFirst,boolean searchAllId) throws GenericEntityException {  if (Debug.verboseOn())   Debug.logVerbose("Analyze partyIdentification: entered id = " + idToFind + ", partyIdentificationTypeId = "+ partyIdentificationTypeId,module);  GenericValue party=null;  List<GenericValue> partiesFound=null;  if (searchPartyFirst) {    party=EntityQuery.use(delegator).from("Party").where("partyId",idToFind).cache().queryOne();  }  if (searchAllId || (searchPartyFirst && UtilValidate.isEmpty(party))) {    Map<String,String> conditions=UtilMisc.toMap("idValue",idToFind);    if (UtilValidate.isNotEmpty(partyIdentificationTypeId)) {      conditions.put("partyIdentificationTypeId",partyIdentificationTypeId);    }    partiesFound=EntityQuery.use(delegator).from("PartyIdentificationAndParty").where(conditions).orderBy("partyId").cache(true).queryList();  }  if (!searchPartyFirst) {    party=EntityQuery.use(delegator).from("Party").where("partyId",idToFind).cache().queryOne();  }  if (UtilValidate.isNotEmpty(party)) {    if (UtilValidate.isNotEmpty(partiesFound))     partiesFound.add(party); else     partiesFound=UtilMisc.toList(party);  }  if (Debug.verboseOn())   Debug.logVerbose("Analyze partyIdentification: found party.partyId = " + party + ", and list : "+ partiesFound,module);  return partiesFound;}  }
class C{  private void syncReviewDraft(ContentProviderClient cp,Sync<Review> sync) throws RemoteException {  ContentValues vals=ReviewDrafts.values(sync.object);  Uri uri=ContentUris.withAppendedId(REVIEW_DRAFTS_URI,vals.getAsLong(ReviewDrafts.RESTAURANT_ID));  String[] proj={ReviewDrafts.VERSION};  long version=Cursors.firstLong(cp.query(uri,proj,null,null,null));  if (version >= 0) {    vals.put(ReviewDrafts.VERSION,version + 1);    cp.update(uri,vals,null,null);  } else {    cp.insert(REVIEW_DRAFTS_URI,vals);  }}  }
class C{  protected void preOpenNewTab(){}  }
class C{  public RelatedTo addRelatedTo(String uid){  RelatedTo prop=new RelatedTo(uid);  addRelatedTo(prop);  return prop;}  }
class C{  public UserSession createSession(UserSession src,User user){  List<Role> roles=new ArrayList<>();  for (  UserRole userRole : user.getUserRoles()) {    if (userRole.getRole() != null) {      roles.add(userRole.getRole());    }  }  UserSession session=new UserSession(src,user,roles,src.getLocale());  compilePermissions(session,roles);  if (user.getGroup() == null)   throw new IllegalStateException("User is not in a Group");  compileConstraints(session,user.getGroup());  compileSessionAttributes(session,user.getGroup());  return session;}  }
class C{  private void generateLocator(DistributionLocatorConfig config) throws SAXException {  AttributesImpl atts=new AttributesImpl();  atts.addAttribute("","",PORT,"",String.valueOf(config.getPort()));  handler.startElement("",LOCATOR,LOCATOR,atts);  generateEntityConfig(config);  handler.endElement("",LOCATOR,LOCATOR);}  }
class C{  public static Container encloseCenter(Component... cmps){  return Container.encloseIn(new FlowLayout(Component.CENTER),cmps);}  }
class C{  protected CropImageOptions(Parcel in){  cropShape=CropImageView.CropShape.values()[in.readInt()];  snapRadius=in.readFloat();  touchRadius=in.readFloat();  guidelines=CropImageView.Guidelines.values()[in.readInt()];  scaleType=CropImageView.ScaleType.values()[in.readInt()];  showCropOverlay=in.readByte() != 0;  showProgressBar=in.readByte() != 0;  autoZoomEnabled=in.readByte() != 0;  multiTouchEnabled=in.readByte() != 0;  maxZoom=in.readInt();  initialCropWindowPaddingRatio=in.readFloat();  fixAspectRatio=in.readByte() != 0;  aspectRatioX=in.readInt();  aspectRatioY=in.readInt();  borderLineThickness=in.readFloat();  borderLineColor=in.readInt();  borderCornerThickness=in.readFloat();  borderCornerOffset=in.readFloat();  borderCornerLength=in.readFloat();  borderCornerColor=in.readInt();  guidelinesThickness=in.readFloat();  guidelinesColor=in.readInt();  backgroundColor=in.readInt();  minCropWindowWidth=in.readInt();  minCropWindowHeight=in.readInt();  minCropResultWidth=in.readInt();  minCropResultHeight=in.readInt();  maxCropResultWidth=in.readInt();  maxCropResultHeight=in.readInt();  activityTitle=in.readString();  activityMenuIconColor=in.readInt();  outputUri=in.readParcelable(Uri.class.getClassLoader());  outputCompressFormat=Bitmap.CompressFormat.valueOf(in.readString());  outputCompressQuality=in.readInt();  outputRequestWidth=in.readInt();  outputRequestHeight=in.readInt();  outputRequestSizeOptions=CropImageView.RequestSizeOptions.values()[in.readInt()];  noOutputImage=in.readByte() != 0;  initialCropWindowRectangle=in.readParcelable(Rect.class.getClassLoader());  initialRotation=in.readInt();  allowRotation=in.readByte() != 0;  allowCounterRotation=in.readByte() != 0;  rotationDegrees=in.readInt();}  }
class C{  public void deallocatePesForContainer(Container container){  getContainerScheduler().deallocatePesForContainer(container);}  }
class C{  public boolean isSameNode(Node other){  return this == other;}  }
class C{  public BarEntry copy(){  BarEntry copied=new BarEntry(getVal(),getXIndex(),getData());  copied.mVals=mVals;  return copied;}  }
class C{  public boolean isFresh(){  return (m_next == 0);}  }
class C{  private static Vector<String> insStringToStringifiedComps(String str) throws InvalidNameException {  int len=str.length();  Vector<String> components=new Vector<>(10);  char[] id=new char[len];  char[] kind=new char[len];  int idCount, kindCount;  boolean idMode;  for (int i=0; i < len; ) {    idCount=kindCount=0;    idMode=true;    while (i < len) {      if (str.charAt(i) == compSeparator) {        break;      } else       if (str.charAt(i) == escapeChar) {        if (i + 1 >= len) {          throw new InvalidNameException(str + ": unescaped \\ at end of component");        } else         if (isMeta(str.charAt(i + 1))) {          ++i;          if (idMode) {            id[idCount++]=str.charAt(i++);          } else {            kind[kindCount++]=str.charAt(i++);          }        } else {          throw new InvalidNameException(str + ": invalid character being escaped");        }      } else       if (idMode && str.charAt(i) == kindSeparator) {        ++i;        idMode=false;      } else {        if (idMode) {          id[idCount++]=str.charAt(i++);        } else {          kind[kindCount++]=str.charAt(i++);        }      }    }    components.addElement(stringifyComponent(new NameComponent(new String(id,0,idCount),new String(kind,0,kindCount))));    if (i < len) {      ++i;    }  }  return components;}  }
class C{  public static void writeRefactoringSession(final OutputStream stream,final RefactoringSessionDescriptor descriptor,final boolean stamps) throws CoreException {  final RefactoringSessionTransformer transformer=new RefactoringSessionTransformer(true);  final RefactoringDescriptor[] descriptors=descriptor.getRefactorings();  try {    transformer.beginSession(descriptor.getComment(),descriptor.getVersion());    for (int index=0; index < descriptors.length; index++) {      final RefactoringDescriptor current=descriptors[index];      if (current != null) {        try {          long stamp=stamps ? current.getTimeStamp() : -1;          transformer.beginRefactoring(current.getID(),stamp,current.getProject(),current.getDescription(),current.getComment(),current.getFlags());          final Map arguments=getArgumentMap(current);          if (arguments != null) {            checkArgumentMap(arguments);            for (final Iterator iterator=arguments.entrySet().iterator(); iterator.hasNext(); ) {              final Map.Entry entry=(Entry)iterator.next();              transformer.createArgument((String)entry.getKey(),(String)entry.getValue());            }          }        }  finally {          transformer.endRefactoring();        }      }    }  }  finally {    transformer.endSession();  }  final Document result=transformer.getResult();  writeNode(stream,result);}  }
class C{  public void testArabicSort(){  assertQ("Collated Sort: ",req("fl","id","q","sort_ar:[\u0698 TO \u0633\u0633]","sort","sort_ar asc"),"//*[@numFound='2']","//result/doc[1]/int[@name='id'][.=12]","//result/doc[2]/int[@name='id'][.=1]");}  }
class C{  @Override public boolean containsValue(Object value){  HashMapEntry[] tab=table;  int len=tab.length;  if (value == null) {    for (int i=0; i < len; i++) {      for (HashMapEntry e=tab[i]; e != null; e=e.next) {        if (e.value == null) {          return true;        }      }    }    return entryForNullKey != null && entryForNullKey.value == null;  }  for (int i=0; i < len; i++) {    for (HashMapEntry e=tab[i]; e != null; e=e.next) {      if (value.equals(e.value)) {        return true;      }    }  }  return entryForNullKey != null && value.equals(entryForNullKey.value);}  }
class C{  public void assertArrayEqual(float[] expected,float[] actual,double maxRelativeError){  TestUtils.assertArrayEqual(expected,actual,maxRelativeError);}  }
class C{  private void enlarge(final int size){  int length1=2 * data.length;  int length2=length + size;  byte[] newData=new byte[length1 > length2 ? length1 : length2];  System.arraycopy(data,0,newData,0,length);  data=newData;}  }
class C{  public NecronomiconPotionRitual(String unlocalizedName,int bookType,int dimension,float requiredEnergy,boolean requiresSacrifice,Object potion,Object... offerings){  super(unlocalizedName,bookType,dimension,requiredEnergy,requiresSacrifice,offerings);  this.potion=potion;}  }
class C{  public static int findWordStart(String line,int pos,String noWordSep){  char ch=line.charAt(pos - 1);  if (noWordSep == null)   noWordSep="";  boolean selectNoLetter=(!Character.isLetterOrDigit(ch) && noWordSep.indexOf(ch) == -1);  int wordStart=0;  for (int i=pos - 1; i >= 0; i--) {    ch=line.charAt(i);    if (selectNoLetter ^ (!Character.isLetterOrDigit(ch) && noWordSep.indexOf(ch) == -1)) {      wordStart=i + 1;      break;    }  }  return wordStart;}  }
class C{  public boolean isIconRowHeaderEnabled(){  return gutter.isIconRowHeaderEnabled();}  }
class C{  public PartialMerkleTree(NetworkParameters params,byte[] bits,List<Sha256Hash> hashes,int origTxCount){  super(params);  this.matchedChildBits=bits;  this.hashes=hashes;  this.transactionCount=origTxCount;}  }
class C{  public JSONObject(JSONObject jo,String[] names){  this();  for (int i=0; i < names.length; i+=1) {    try {      this.putOnce(names[i],jo.opt(names[i]));    } catch (    Exception ignore) {    }  }}  }
class C{  public T casePattern(Pattern object){  return null;}  }
class C{  public ColladaProfileCommon(String ns){  super(ns);}  }
class C{  public boolean isLeftAndRightEditingTrigger(){  return leftAndRightEditingTrigger;}  }
class C{  public SecurityException(String msg){  super(msg);}  }
class C{  public int entryPoint(State state){  int pc=curCP();  alive=true;  this.state=state.dup();  Assert.check(state.stacksize <= max_stack);  if (debugCode)   System.err.println("entry point " + state);  pendingStackMap=needStackMap;  return pc;}  }
class C{  static float squaredEuclideanDistance(float[] vector1,float[] vector2){  float squaredDistance=0;  int size=vector1.length;  for (int i=0; i < size; i++) {    float difference=vector1[i] - vector2[i];    squaredDistance+=difference * difference;  }  return squaredDistance / size;}  }
class C{  public DoubleMapper boost(float boost){  this.boost=boost;  return this;}  }
class C{  private void translate(){  if (m_bpartner != null && m_bpartner.getAD_Language() != null) {    String key=m_bpartner.getAD_Language() + get_ID();    MMailTextTrl trl=s_cacheTrl.get(key);    if (trl == null) {      trl=getTranslation(m_bpartner.getAD_Language());      if (trl != null)       s_cacheTrl.put(key,trl);    }    if (trl != null) {      m_MailHeader=trl.MailHeader;      m_MailText=trl.MailText;      m_MailText2=trl.MailText2;      m_MailText3=trl.MailText3;    }  }  m_MailHeader=super.getMailHeader();  m_MailText=super.getMailText();  m_MailText2=super.getMailText2();  m_MailText3=super.getMailText3();}  }
class C{  public boolean isWarning(){  return fSeverity == IStatus.WARNING;}  }
class C{  static public boolean start(ProcessInfo pi,boolean IsDirectPrint){  return start(null,-1,pi,IsDirectPrint);}  }
class C{  public PSOSVMOptimization(ExampleSet exampleSet,Kernel kernel,double c,int maxIterations,int generationsWithoutImprovement,int popSize,double inertiaWeight,double localWeight,double globalWeight,boolean dynamicInertiaWeight,boolean showPlot,RandomGenerator random){  super(popSize < 1 ? exampleSet.size() : popSize,exampleSet.size(),maxIterations,generationsWithoutImprovement,inertiaWeight,localWeight,globalWeight,0.0d,1.0d,dynamicInertiaWeight,random);  this.exampleSet=exampleSet;  this.kernel=kernel;  this.kernel.init(exampleSet);  this.c=c;  if (this.c <= 0.0d) {    this.c=0.0d;    for (int i=0; i < exampleSet.size(); i++) {      this.c+=kernel.getDistance(i,i);    }    this.c=exampleSet.size() / this.c;    exampleSet.getLog().log("Determine probably good value for C: set to " + this.c);  }  setMinValue(0.0d);  setMaxValue(this.c);  this.ys=new double[exampleSet.size()];  Iterator<Example> reader=exampleSet.iterator();  int index=0;  Attribute label=exampleSet.getAttributes().getLabel();  boolean regression=!label.isNominal() && label.getMapping().size() != 2;  while (reader.hasNext()) {    Example example=reader.next();    if (!regression) {      ys[index++]=example.getLabel() == label.getMapping().getPositiveIndex() ? 1.0d : -1.0d;    } else {      ys[index++]=example.getLabel();    }  }  if (!regression) {    this.optimizationFunction=new ClassificationOptimizationFunction(false);  } else {    this.optimizationFunction=new RegressionOptimizationFunction(epsilon);  }  this.showPlot=showPlot;  if (showPlot) {    dataTable=new SimpleDataTable("Fitness vs. Generations",new String[]{"Generations","Best Fitness","Current Fitness"});    plotter=new SimplePlotterDialog(dataTable,false);    plotter.setXAxis(0);    plotter.plotColumn(1,true);    plotter.plotColumn(2,true);    plotter.setVisible(true);  }}  }
class C{  public Map<Integer,Double> compute(int... dataset){  return computeInPlace(intsToDoubles(dataset));}  }
class C{  public BubbleActions withIndicator(Drawable indicator){  this.indicator=indicator;  return this;}  }
class C{  public boolean isDropShip(){  Object oo=get_Value(COLUMNNAME_IsDropShip);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static int[] cs_amd(int order,Scs A){  Scs C, A2, AT;  int Cp[], Ci[], last[], W[], len[], nv[], next[], P[], head[], elen[], degree[], w[], hhead[], ATp[], ATi[], d, dk, dext, lemax=0, e, elenk, eln, i, j, k, k1, k2, k3, jlast, ln, dense, nzmax, mindeg=0, nvi, nvj, nvk, mark, wnvi, cnz, nel=0, p, p1, p2, p3, p4, pj, pk, pk1, pk2, pn, q, n, m, t;  int h;  boolean ok;  if (!Scs_util.CS_CSC(A) || order <= 0 || order > 3)   return (null);  AT=Scs_transpose.cs_transpose(A,false);  if (AT == null)   return (null);  m=A.m;  n=A.n;  dense=Math.max(16,10 * (int)(float)Math.sqrt(n));  dense=Math.min(n - 2,dense);  if (order == 1 && n == m) {    C=Scs_add.cs_add(A,AT,0,0);  } else   if (order == 2) {    ATp=AT.p;    ATi=AT.i;    for (p2=0, j=0; j < m; j++) {      p=ATp[j];      ATp[j]=p2;      if (ATp[j + 1] - p > dense)       continue;      for (; p < ATp[j + 1]; p++)       ATi[p2++]=ATi[p];    }    ATp[m]=p2;    A2=Scs_transpose.cs_transpose(AT,false);    C=(A2 != null) ? Scs_multiply.cs_multiply(AT,A2) : null;    A2=null;  } else {    C=Scs_multiply.cs_multiply(AT,A);  }  AT=null;  if (C == null)   return (null);  Scs_fkeep.cs_fkeep(C,new Cs_diag(),null);  Cp=C.p;  cnz=Cp[n];  P=new int[n + 1];  W=new int[8 * (n + 1)];  t=cnz + cnz / 5 + 2 * n;  Scs_util.cs_sprealloc(C,t);  len=W;  nv=W;  int nv_offset=n + 1;  next=W;  int next_offset=2 * (n + 1);  head=W;  int head_offset=3 * (n + 1);  elen=W;  int elen_offset=4 * (n + 1);  degree=W;  int degree_offset=5 * (n + 1);  w=W;  int w_offset=6 * (n + 1);  hhead=W;  int hhead_offset=7 * (n + 1);  last=P;  for (k=0; k < n; k++)   len[k]=Cp[k + 1] - Cp[k];  len[n]=0;  nzmax=C.nzmax;  Ci=C.i;  for (i=0; i <= n; i++) {    head[head_offset + i]=-1;    last[i]=-1;    next[next_offset + i]=-1;    hhead[hhead_offset + i]=-1;    nv[nv_offset + i]=1;    w[w_offset + i]=1;    elen[elen_offset + i]=0;    degree[degree_offset + i]=len[i];  }  mark=cs_wclear(0,0,w,w_offset,n);  elen[elen_offset + n]=-2;  Cp[n]=-1;  w[w_offset + n]=0;  for (i=0; i < n; i++) {    d=degree[degree_offset + i];    if (d == 0) {      elen[elen_offset + i]=-2;      nel++;      Cp[i]=-1;      w[w_offset + i]=0;    } else     if (d > dense) {      nv[nv_offset + i]=0;      elen[elen_offset + i]=-1;      nel++;      Cp[i]=Scs_util.CS_FLIP(n);      nv[nv_offset + n]++;    } else {      if (head[head_offset + d] != -1)       last[head[head_offset + d]]=i;      next[next_offset + i]=head[head_offset + d];      head[head_offset + d]=i;    }  }  while (nel < n) {    for (k=-1; mindeg < n && (k=head[head_offset + mindeg]) == -1; mindeg++)     ;    if (next[next_offset + k] != -1)     last[next[next_offset + k]]=-1;    head[head_offset + mindeg]=next[next_offset + k];    elenk=elen[elen_offset + k];    nvk=nv[nv_offset + k];    nel+=nvk;    if (elenk > 0 && cnz + mindeg >= nzmax) {      for (j=0; j < n; j++) {        if ((p=Cp[j]) >= 0) {          Cp[j]=Ci[p];          Ci[p]=Scs_util.CS_FLIP(j);        }      }      for (q=0, p=0; p < cnz; ) {        if ((j=Scs_util.CS_FLIP(Ci[p++])) >= 0) {          Ci[q]=Cp[j];          Cp[j]=q++;          for (k3=0; k3 < len[j] - 1; k3++)           Ci[q++]=Ci[p++];        }      }      cnz=q;    }    dk=0;    nv[nv_offset + k]=-nvk;    p=Cp[k];    pk1=(elenk == 0) ? p : cnz;    pk2=pk1;    for (k1=1; k1 <= elenk + 1; k1++) {      if (k1 > elenk) {        e=k;        pj=p;        ln=len[k] - elenk;      } else {        e=Ci[p++];        pj=Cp[e];        ln=len[e];      }      for (k2=1; k2 <= ln; k2++) {        i=Ci[pj++];        if ((nvi=nv[nv_offset + i]) <= 0)         continue;        dk+=nvi;        nv[nv_offset + i]=-nvi;        Ci[pk2++]=i;        if (next[next_offset + i] != -1)         last[next[next_offset + i]]=last[i];        if (last[i] != -1) {          next[next_offset + last[i]]=next[next_offset + i];        } else {          head[head_offset + degree[degree_offset + i]]=next[next_offset + i];        }      }      if (e != k) {        Cp[e]=Scs_util.CS_FLIP(k);        w[w_offset + e]=0;      }    }    if (elenk != 0)     cnz=pk2;    degree[degree_offset + k]=dk;    Cp[k]=pk1;    len[k]=pk2 - pk1;    elen[elen_offset + k]=-2;    mark=cs_wclear(mark,lemax,w,w_offset,n);    for (pk=pk1; pk < pk2; pk++) {      i=Ci[pk];      if ((eln=elen[elen_offset + i]) <= 0)       continue;      nvi=-nv[nv_offset + i];      wnvi=mark - nvi;      for (p=Cp[i]; p <= Cp[i] + eln - 1; p++) {        e=Ci[p];        if (w[w_offset + e] >= mark) {          w[w_offset + e]-=nvi;        } else         if (w[w_offset + e] != 0) {          w[w_offset + e]=degree[degree_offset + e] + wnvi;        }      }    }    for (pk=pk1; pk < pk2; pk++) {      i=Ci[pk];      p1=Cp[i];      p2=p1 + elen[elen_offset + i] - 1;      pn=p1;      for (h=0, d=0, p=p1; p <= p2; p++) {        e=Ci[p];        if (w[w_offset + e] != 0) {          dext=w[w_offset + e] - mark;          if (dext > 0) {            d+=dext;            Ci[pn++]=e;            h+=e;          } else {            Cp[e]=Scs_util.CS_FLIP(k);            w[w_offset + e]=0;          }        }      }      elen[elen_offset + i]=pn - p1 + 1;      p3=pn;      p4=p1 + len[i];      for (p=p2 + 1; p < p4; p++) {        j=Ci[p];        if ((nvj=nv[nv_offset + j]) <= 0)         continue;        d+=nvj;        Ci[pn++]=j;        h+=j;      }      if (d == 0) {        Cp[i]=Scs_util.CS_FLIP(k);        nvi=-nv[nv_offset + i];        dk-=nvi;        nvk+=nvi;        nel+=nvi;        nv[nv_offset + i]=0;        elen[elen_offset + i]=-1;      } else {        degree[degree_offset + i]=Math.min(degree[degree_offset + i],d);        Ci[pn]=Ci[p3];        Ci[p3]=Ci[p1];        Ci[p1]=k;        len[i]=pn - p1 + 1;        h%=n;        next[next_offset + i]=hhead[hhead_offset + h];        hhead[hhead_offset + h]=i;        last[i]=h;      }    }    degree[degree_offset + k]=dk;    lemax=Math.max(lemax,dk);    mark=cs_wclear(mark + lemax,lemax,w,w_offset,n);    for (pk=pk1; pk < pk2; pk++) {      i=Ci[pk];      if (nv[nv_offset + i] >= 0)       continue;      h=last[i];      i=hhead[hhead_offset + h];      hhead[hhead_offset + h]=-1;      for (; i != -1 && next[next_offset + i] != -1; i=next[next_offset + i], mark++) {        ln=len[i];        eln=elen[elen_offset + i];        for (p=Cp[i] + 1; p <= Cp[i] + ln - 1; p++)         w[w_offset + Ci[p]]=mark;        jlast=i;        for (j=next[next_offset + i]; j != -1; ) {          ok=(len[j] == ln) && (elen[elen_offset + j] == eln);          for (p=Cp[j] + 1; ok && p <= Cp[j] + ln - 1; p++) {            if (w[w_offset + Ci[p]] != mark)             ok=false;          }          if (ok) {            Cp[j]=Scs_util.CS_FLIP(i);            nv[nv_offset + i]+=nv[nv_offset + j];            nv[nv_offset + j]=0;            elen[elen_offset + j]=-1;            j=next[next_offset + j];            next[next_offset + jlast]=j;          } else {            jlast=j;            j=next[next_offset + j];          }        }      }    }    for (p=pk1, pk=pk1; pk < pk2; pk++) {      i=Ci[pk];      if ((nvi=-nv[nv_offset + i]) <= 0)       continue;      nv[nv_offset + i]=nvi;      d=degree[degree_offset + i] + dk - nvi;      d=Math.min(d,n - nel - nvi);      if (head[head_offset + d] != -1)       last[head[head_offset + d]]=i;      next[next_offset + i]=head[head_offset + d];      last[i]=-1;      head[head_offset + d]=i;      mindeg=Math.min(mindeg,d);      degree[degree_offset + i]=d;      Ci[p++]=i;    }    nv[nv_offset + k]=nvk;    if ((len[k]=p - pk1) == 0) {      Cp[k]=-1;      w[w_offset + k]=0;    }    if (elenk != 0)     cnz=p;  }  for (i=0; i < n; i++)   Cp[i]=Scs_util.CS_FLIP(Cp[i]);  for (j=0; j <= n; j++)   head[head_offset + j]=-1;  for (j=n; j >= 0; j--) {    if (nv[nv_offset + j] > 0)     continue;    next[next_offset + j]=head[head_offset + Cp[j]];    head[head_offset + Cp[j]]=j;  }  for (e=n; e >= 0; e--) {    if (nv[nv_offset + e] <= 0)     continue;    if (Cp[e] != -1) {      next[next_offset + e]=head[head_offset + Cp[e]];      head[head_offset + Cp[e]]=e;    }  }  for (k=0, i=0; i <= n; i++) {    if (Cp[i] == -1)     k=Scs_tdfs.cs_tdfs(i,k,head,head_offset,next,next_offset,P,0,w,w_offset);  }  return P;}  }
class C{  public void buildSearchableList(){  HashMap<ComponentName,SearchableInfo> newSearchablesMap=new HashMap<ComponentName,SearchableInfo>();  ArrayList<SearchableInfo> newSearchablesList=new ArrayList<SearchableInfo>();  ArrayList<SearchableInfo> newSearchablesInGlobalSearchList=new ArrayList<SearchableInfo>();  List<ResolveInfo> searchList;  final Intent intent=new Intent(Intent.ACTION_SEARCH);  long ident=Binder.clearCallingIdentity();  try {    searchList=queryIntentActivities(intent,PackageManager.GET_META_DATA);    List<ResolveInfo> webSearchInfoList;    final Intent webSearchIntent=new Intent(Intent.ACTION_WEB_SEARCH);    webSearchInfoList=queryIntentActivities(webSearchIntent,PackageManager.GET_META_DATA);    if (searchList != null || webSearchInfoList != null) {      int search_count=(searchList == null ? 0 : searchList.size());      int web_search_count=(webSearchInfoList == null ? 0 : webSearchInfoList.size());      int count=search_count + web_search_count;      for (int ii=0; ii < count; ii++) {        ResolveInfo info=(ii < search_count) ? searchList.get(ii) : webSearchInfoList.get(ii - search_count);        ActivityInfo ai=info.activityInfo;        if (newSearchablesMap.get(new ComponentName(ai.packageName,ai.name)) == null) {          SearchableInfo searchable=SearchableInfo.getActivityMetaData(mContext,ai,mUserId);          if (searchable != null) {            newSearchablesList.add(searchable);            newSearchablesMap.put(searchable.getSearchActivity(),searchable);            if (searchable.shouldIncludeInGlobalSearch()) {              newSearchablesInGlobalSearchList.add(searchable);            }          }        }      }    }    List<ResolveInfo> newGlobalSearchActivities=findGlobalSearchActivities();    ComponentName newGlobalSearchActivity=findGlobalSearchActivity(newGlobalSearchActivities);    ComponentName newWebSearchActivity=findWebSearchActivity(newGlobalSearchActivity);synchronized (this) {      mSearchablesMap=newSearchablesMap;      mSearchablesList=newSearchablesList;      mSearchablesInGlobalSearchList=newSearchablesInGlobalSearchList;      mGlobalSearchActivities=newGlobalSearchActivities;      mCurrentGlobalSearchActivity=newGlobalSearchActivity;      mWebSearchActivity=newWebSearchActivity;    }  }  finally {    Binder.restoreCallingIdentity(ident);  }}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public DriverTask exportVolumesToInitiators(List<Initiator> initiators,List<StorageVolume> volumes,Map<String,String> volumeToHLUMap,List<StoragePort> recommendedPorts,List<StoragePort> availablePorts,StorageCapabilities capabilities,MutableBoolean usedRecommendedPorts,List<StoragePort> selectedPorts){  LOG.info("Exporting volumes to inititators");  DellSCDriverTask task=new DellSCDriverTask("exportVolumes");  ScServer server=null;  List<ScServerHba> preferredHbas=new ArrayList<>();  StringBuilder errBuffer=new StringBuilder();  int volumesMapped=0;  Set<StoragePort> usedPorts=new HashSet<>();  String preferredController=null;  Map<String,StoragePort> discoveredPorts=new HashMap<>();  int maxPaths=-1;  List<ExportPathsServiceOption> pathOptions=capabilities.getCommonCapabilitis().getExportPathParams();  for (  ExportPathsServiceOption pathOption : pathOptions) {    maxPaths=pathOption.getMaxPath();  }  List<String> recommendedServerPorts=new ArrayList<>();  for (  StoragePort port : recommendedPorts) {    recommendedServerPorts.add(port.getNativeId());  }  for (  StorageVolume volume : volumes) {    String ssn=volume.getStorageSystemId();    try {      StorageCenterAPI api=connectionManager.getConnection(ssn);      ScVolume scVol=null;      int dotCount=StringUtils.countMatches(volume.getNativeId(),".");      if (dotCount == 2) {        scVol=api.createReplayView(volume.getNativeId(),String.format("View of %s",volume.getNativeId()));      } else {        scVol=api.getVolume(volume.getNativeId());      }      if (scVol == null) {        throw new DellSCDriverException(String.format("Unable to find volume %s",volume.getNativeId()));      }      if (server == null) {        server=createOrFindScServer(api,ssn,initiators,preferredHbas);      }      if (server == null) {        throw new DellSCDriverException(SERVER_CREATE_FAIL_MSG);      }      if (preferredController == null && scVol.active) {        ScVolumeConfiguration volConfig=api.getVolumeConfig(scVol.instanceId);        if (volConfig != null) {          preferredController=volConfig.controller.instanceId;        }      }      if (preferredController == null && !recommendedPorts.isEmpty()) {        try {          ScControllerPort scPort=api.getControllerPort(recommendedPorts.get(0).getNativeId());          preferredController=scPort.controller.instanceId;        } catch (        Exception e) {          LOG.warn("Failed to get recommended port controller.",e);        }      }      int preferredLun=-1;      if (volumeToHLUMap.containsKey(volume.getNativeId())) {        String hlu=volumeToHLUMap.get(volume.getNativeId());        try {          preferredLun=Integer.parseInt(hlu);        } catch (        NumberFormatException e) {          LOG.warn("Unable to parse preferred LUN {}",hlu);        }      }      ScMappingProfile profile;      ScMappingProfile[] mappingProfiles=api.getServerVolumeMapping(scVol.instanceId,server.instanceId);      if (mappingProfiles.length > 0) {        profile=mappingProfiles[0];      } else {        profile=api.createVolumeMappingProfile(scVol.instanceId,server.instanceId,preferredLun,new String[0],maxPaths,preferredController);      }      ScMapping[] maps=api.getMappingProfileMaps(profile.instanceId);      for (      ScMapping map : maps) {        volumeToHLUMap.put(volume.getNativeId(),String.valueOf(map.lun));        StoragePort port;        if (discoveredPorts.containsKey(map.controllerPort.instanceId)) {          port=discoveredPorts.get(map.controllerPort.instanceId);        } else {          ScControllerPort scPort=api.getControllerPort(map.controllerPort.instanceId);          port=util.getStoragePortForControllerPort(api,scPort);          discoveredPorts.put(map.controllerPort.instanceId,port);        }        usedPorts.add(port);      }      volumesMapped++;      LOG.info("Volume '{}' exported to server '{}'",scVol.name,server.name);    } catch (    StorageCenterAPIException|DellSCDriverException dex) {      String error=String.format("Error mapping volume %s: %s",volume.getDisplayName(),dex);      LOG.error(error);      errBuffer.append(String.format("%s%n",error));      if (SERVER_CREATE_FAIL_MSG.equals(dex.getMessage())) {        break;      }    }  }  usedRecommendedPorts.setValue(recommendedPorts.size() == usedPorts.size());  if (!usedRecommendedPorts.isTrue()) {    selectedPorts.addAll(usedPorts);  }  task.setMessage(errBuffer.toString());  if (volumesMapped == volumes.size()) {    task.setStatus(TaskStatus.READY);  } else   if (volumesMapped == 0) {    task.setStatus(TaskStatus.FAILED);  } else {    task.setStatus(TaskStatus.PARTIALLY_FAILED);  }  return task;}  }
class C{  private void updateLineupList(int position,TeamLineupArrayAdapter teamLineupAdapter,int[] positionNumberRequired,ArrayList<Player> positionPlayers,TextView textLineupPositionDescription){  teamLineupAdapter.playersRequired=positionNumberRequired[position];  teamLineupAdapter.playersSelected.clear();  teamLineupAdapter.players.clear();  positionPlayers.clear();switch (position) {case 0:    textLineupPositionDescription.setText("Name [Yr] Ovr/Pot (Str, Acc, Eva)");  positionPlayers.addAll(userTeam.teamQBs);break;case 1:textLineupPositionDescription.setText("Name [Yr] Ovr/Pot (Pow, Spd, Eva)");positionPlayers.addAll(userTeam.teamRBs);break;case 2:textLineupPositionDescription.setText("Name [Yr] Ovr/Pot (Cat, Spd, Eva)");positionPlayers.addAll(userTeam.teamWRs);break;case 3:textLineupPositionDescription.setText("Name [Yr] Ovr/Pot (Str, RunBlk, PassBlk)");positionPlayers.addAll(userTeam.teamOLs);break;case 4:textLineupPositionDescription.setText("Name [Yr] Ovr/Pot (KStr, KAcc, Clum)");positionPlayers.addAll(userTeam.teamKs);break;case 5:textLineupPositionDescription.setText("Name [Yr] Ovr/Pot (Cov, Spd, Tack)");positionPlayers.addAll(userTeam.teamSs);break;case 6:textLineupPositionDescription.setText("Name [Yr] Ovr/Pot (Cov, Spd, Tack)");positionPlayers.addAll(userTeam.teamCBs);break;case 7:textLineupPositionDescription.setText("Name [Yr] Ovr/Pot (Str, RunDef, PassDef)");positionPlayers.addAll(userTeam.teamF7s);break;}for (int i=0; i < teamLineupAdapter.playersRequired; ++i) {teamLineupAdapter.playersSelected.add(positionPlayers.get(i));}teamLineupAdapter.notifyDataSetChanged();}  }
class C{  @Override public int hashCode(){  return getClass().hashCode();}  }
class C{  public void prePostBreedingExchangeStatistics(final EvolutionState state){  for (int x=0; x < children.length; x++)   children[x].prePostBreedingExchangeStatistics(state);}  }
class C{  protected void clear(){  nodes.clear();}  }
class C{  @Override public void clear(){  Entry tab[]=table;  modCount++;  for (int index=tab.length; --index >= 0; )   tab[index]=null;  count=0;}  }
class C{  public void testNextIntBounded(){  for (int bound=2; bound < MAX_INT_BOUND; bound+=524959) {    int f=ThreadLocalRandom.current().nextInt(bound);    assertTrue(0 <= f && f < bound);    int i=0;    int j;    while (i < NCALLS && (j=ThreadLocalRandom.current().nextInt(bound)) == f) {      assertTrue(0 <= j && j < bound);      ++i;    }    assertTrue(i < NCALLS);  }}  }
class C{  public boolean exists(){  ClassFile dir=binaryPath.getDirectory(pkg);  if (dir != null && dir.isDirectory()) {    return true;  }  if (sourcePath != binaryPath) {    dir=sourcePath.getDirectory(pkg);    if (dir != null && dir.isDirectory()) {      return true;    }  }  String prefix=pkg + File.separator;  return binaryPath.getFiles(prefix,".class").hasMoreElements() || sourcePath.getFiles(prefix,".java").hasMoreElements();}  }
class C{  public boolean hasName(){  return this.name != null;}  }
class C{  public BigDecimal optBigDecimal(int index,BigDecimal defaultValue){  try {    return this.getBigDecimal(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public RCFGNode(Edge eventEdge){  outputEvents=new LinkedHashMap<Edge,OutputEvent>();  this.eventEdge=eventEdge;  if (eventEdge.srcStmt() != null && eventEdge.srcStmt().containsInvokeExpr())   invokeExpr=(InvokeExpr)eventEdge.srcStmt().getInvokeExpr(); else   invokeExpr=null;}  }
class C{  private static OFActionSetNwDst decode_set_dst_ip(String actionToDecode,OFVersion version,Logger log){  Matcher n=Pattern.compile("(?:(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+))").matcher(actionToDecode);  if (n.matches()) {    IPv4Address ipaddr=IPv4Address.of(get_ip_addr(n,actionToDecode,log));    OFActionSetNwDst.Builder ab=OFFactories.getFactory(version).actions().buildSetNwDst();    ab.setNwAddr(ipaddr);    log.debug("action {}",ab.build());    return ab.build();  } else {    log.debug("Invalid action: '{}'",actionToDecode);    return null;  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof StackedXYAreaRenderer2)) {    return false;  }  StackedXYAreaRenderer2 that=(StackedXYAreaRenderer2)obj;  if (this.roundXCoordinates != that.roundXCoordinates) {    return false;  }  return super.equals(obj);}  }
class C{  public void add(int val){  ensureCapacity(_pos + 1);  _data[_pos++]=val;}  }
class C{  public static OptionType newInstance(){  final OptionType returnInstance=new OptionType();  returnInstance.setDefaultCode();  return returnInstance;}  }
class C{  private void initMiniPlayer(){  mMiniPlayerLayout.setVisibility(View.VISIBLE);  mMiniPlayerAlbumArt.setImageBitmap(mApp.getService().getCurrentSong().getAlbumArt());  mTitleText.setText(mApp.getService().getCurrentSong().getTitle());  mSubText.setText(mApp.getService().getCurrentSong().getAlbum() + " - " + mApp.getService().getCurrentSong().getArtist());}  }
class C{  public void testInsert3() throws SQLException {  DatabaseCreator.fillParentTable(conn);  DatabaseCreator.fillFKStrictTable(conn);  statement.execute("INSERT INTO " + DatabaseCreator.TEST_TABLE5 + " SELECT id AS testId, value AS testValue "+ "FROM "+ DatabaseCreator.FKSTRICT_TABLE+ " WHERE name_id = 1");  ResultSet r=statement.executeQuery("SELECT COUNT(*) FROM " + DatabaseCreator.TEST_TABLE5);  r.next();  assertEquals("Should be 2 rows",2,r.getInt(1));  r.close();}  }
class C{  public static void i(String tag,String msg){  if (sLevel > LEVEL_INFO) {    return;  }  Log.i(tag,msg);}  }
class C{  public Object decode(Object ascii) throws DecoderException {  if (ascii == null) {    return EMPTY_BYTE_ARRAY;  }  if (ascii instanceof byte[]) {    return fromAscii((byte[])ascii);  }  if (ascii instanceof char[]) {    return fromAscii((char[])ascii);  }  if (ascii instanceof String) {    return fromAscii(((String)ascii).toCharArray());  }  throw new DecoderException("argument not a byte array");}  }
class C{  public String userToken(){  return userToken;}  }
class C{  private void initPanel(){  BoxLayout layout=new BoxLayout(this,BoxLayout.PAGE_AXIS);  MGoal[] goals=MGoal.getGoals(Env.getCtx());  for (int i=0; i < goals.length; i++) {    PerformanceIndicator pi=new PerformanceIndicator(goals[i]);    pi.addActionListener(this);    add(pi);  }}  }
class C{  public LogEventRotateWriter(File file,long index,boolean checkCRC) throws ReplicatorException {  this.file=file;  this.index=index;  this.checkCRC=checkCRC;}  }
class C{  public static boolean isEmpty(String string){  return string == null || string.length() <= 0;}  }
class C{  private static SolrInputDocument buildRandomDocument(int id){  SolrInputDocument doc=sdoc("id",id);  for (  String prefix : new String[]{"pivot_i","pivot_ti"}) {    if (useField()) {      doc.addField(prefix + "1",skewed(TestUtil.nextInt(random(),20,50),random().nextInt()));    }    if (useField()) {      int numMulti=atLeast(1);      while (0 < numMulti--) {        doc.addField(prefix,skewed(TestUtil.nextInt(random(),20,50),random().nextInt()));      }    }  }  for (  String prefix : new String[]{"pivot_l","pivot_tl"}) {    if (useField()) {      doc.addField(prefix + "1",skewed(TestUtil.nextInt(random(),5000,5100),random().nextLong()));    }    if (useField()) {      int numMulti=atLeast(1);      while (0 < numMulti--) {        doc.addField(prefix,skewed(TestUtil.nextInt(random(),5000,5100),random().nextLong()));      }    }  }  for (  String prefix : new String[]{"pivot_f","pivot_tf"}) {    if (useField()) {      doc.addField(prefix + "1",skewed(1.0F / random().nextInt(13),random().nextFloat() * random().nextInt()));    }    if (useField()) {      int numMulti=atLeast(1);      while (0 < numMulti--) {        doc.addField(prefix,skewed(1.0F / random().nextInt(13),random().nextFloat() * random().nextInt()));      }    }  }  for (  String prefix : new String[]{"pivot_d","pivot_td"}) {    if (useField()) {      doc.addField(prefix + "1",skewed(1.0D / random().nextInt(19),random().nextDouble() * random().nextInt()));    }    if (useField()) {      int numMulti=atLeast(1);      while (0 < numMulti--) {        doc.addField(prefix,skewed(1.0D / random().nextInt(19),random().nextDouble() * random().nextInt()));      }    }  }  for (  String prefix : new String[]{"pivot_dt","pivot_tdt"}) {    if (useField()) {      doc.addField(prefix + "1",skewed(randomSkewedDate(),randomDate()));    }    if (useField()) {      int numMulti=atLeast(1);      while (0 < numMulti--) {        doc.addField(prefix,skewed(randomSkewedDate(),randomDate()));      }    }  }{    String prefix="pivot_b";    if (useField()) {      doc.addField(prefix + "1",random().nextBoolean() ? "t" : "f");    }    if (useField()) {      int numMulti=atLeast(1);      while (0 < numMulti--) {        doc.addField(prefix,random().nextBoolean() ? "t" : "f");      }    }  }  for (  String prefix : new String[]{"pivot_x_s","pivot_y_s","pivot_z_s"}) {    if (useField()) {      doc.addField(prefix + "1",skewed(TestUtil.randomSimpleString(random(),1,1),randomXmlUsableUnicodeString()));    }    if (useField()) {      int numMulti=atLeast(1);      while (0 < numMulti--) {        doc.addField(prefix,skewed(TestUtil.randomSimpleString(random(),1,1),randomXmlUsableUnicodeString()));      }    }  }  for (  String prefix : new String[]{"dense_pivot_x_s","dense_pivot_y_s"}) {    if (useField()) {      doc.addField(prefix + "1",TestUtil.randomSimpleString(random(),1,1));    }    if (useField()) {      int numMulti=atLeast(1);      while (0 < numMulti--) {        doc.addField(prefix,TestUtil.randomSimpleString(random(),1,1));      }    }  }  for (  String prefix : new String[]{"dense_pivot_i","dense_pivot_ti"}) {    if (useField()) {      doc.addField(prefix + "1",TestUtil.nextInt(random(),20,50));    }    if (useField()) {      int numMulti=atLeast(1);      while (0 < numMulti--) {        doc.addField(prefix,TestUtil.nextInt(random(),20,50));      }    }  }  return doc;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node child;  String childName;  String childValue;  int commentCount=0;  int childType;  doc=(Document)load("staff",false);  elementList=doc.getChildNodes();  for (int indexN10057=0; indexN10057 < elementList.getLength(); indexN10057++) {    child=(Node)elementList.item(indexN10057);    childType=(int)child.getNodeType();    if (equals(8,childType)) {      childName=child.getNodeName();      assertEquals("nodeName","#comment",childName);      childValue=child.getNodeValue();      assertEquals("nodeValue"," This is comment number 1.",childValue);      commentCount=commentCount + 1;    }  }  assertEquals("commentCount",1,commentCount);}  }
class C{  public void debug(Object message,Throwable exception){  log(Level.FINE,String.valueOf(message),exception);}  }
class C{  public MqttStreams(Topology topology,String url,String clientId){  this.topology=topology;  MqttConfig config=new MqttConfig();  config.setServerURLs(new String[]{url});  config.setClientId(clientId);  connector=new MqttConnector(null);}  }
class C{  protected void assertContextIsNotMapKey(String invalidKeyType) throws CollectionMapKeyException {  if (writeContext_.isMapKey()) {    throw new CollectionMapKeyException("Cannot serialize a map with keys that are of type " + invalidKeyType);  }}  }
class C{  public static SyntaxScheme loadFromString(String string){  SyntaxScheme scheme=new SyntaxScheme(true);  try {    if (string != null) {      String[] tokens=string.split(",",-1);      if (tokens.length == 0 || !VERSION.equals(tokens[0])) {        return scheme;      }      int tokenTypeCount=Token.NUM_TOKEN_TYPES;      int tokenCount=tokenTypeCount * 7 + 1;      if (tokens.length != tokenCount) {        throw new Exception("Not enough tokens in packed color scheme: expected " + tokenCount + ", found "+ tokens.length);      }      for (int i=0; i < tokenTypeCount; i++) {        int pos=i * 7 + 1;        int integer=Integer.parseInt(tokens[pos]);        if (integer != i)         throw new Exception("Expected " + i + ", found "+ integer);        Color fg=null;        String temp=tokens[pos + 1];        if (!"-".equals(temp)) {          fg=stringToColor(temp);        }        Color bg=null;        temp=tokens[pos + 2];        if (!"-".equals(temp)) {          bg=stringToColor(temp);        }        temp=tokens[pos + 3];        if (!"t".equals(temp) && !"f".equals(temp))         throw new Exception("Expected 't' or 'f', found " + temp);        boolean underline="t".equals(temp);        Font font=null;        String family=tokens[pos + 4];        if (!"-".equals(family)) {          font=new Font(family,Integer.parseInt(tokens[pos + 5]),Integer.parseInt(tokens[pos + 6]));        }        scheme.styles[i]=new Style(fg,bg,font,underline);      }    }  } catch (  Exception e) {    e.printStackTrace();  }  return scheme;}  }
class C{  public boolean containsPoint(ReadonlyVec2D p){  float px=p.x();  float py=p.y();  if (px < x || px >= x + width) {    return false;  }  if (py < y || py >= y + height) {    return false;  }  return true;}  }
class C{  public PropertyHandler(String serverUri,Map<String,Object> props){  this.serverUri=serverUri;  this.props=props;  refreshables=new ArrayList<>();  propertyUrls=new HashMap<>();}  }
class C{  public boolean isDashedHighlightLineEnabled(){  return mHighlightDashPathEffect == null ? false : true;}  }
class C{  private void checkHolesInShell(Polygon p,GeometryGraph graph){  LinearRing shell=(LinearRing)p.getExteriorRing();  PointInRing pir=new MCPointInRing(shell);  for (int i=0; i < p.getNumInteriorRing(); i++) {    LinearRing hole=(LinearRing)p.getInteriorRingN(i);    Coordinate holePt=findPtNotNode(hole.getCoordinates(),shell,graph);    if (holePt == null)     return;    boolean outside=!pir.isInside(holePt);    if (outside) {      validErr=new TopologyValidationError(TopologyValidationError.HOLE_OUTSIDE_SHELL,holePt);      return;    }  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(domimplementationcreatedocument03.class,args);}  }
class C{  protected void completeStoragePolicyTransitionImpl(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto){  BusinessObjectDataKey businessObjectDataKey=storagePolicyTransitionParamsDto.getBusinessObjectDataKey();  BusinessObjectDataEntity businessObjectDataEntity=businessObjectDataDaoHelper.getBusinessObjectDataEntity(businessObjectDataKey);  String businessObjectDataStatus=businessObjectDataEntity.getStatus().getCode();  Assert.isTrue(StoragePolicySelectorServiceImpl.SUPPORTED_BUSINESS_OBJECT_DATA_STATUSES.contains(businessObjectDataStatus),String.format("Business object data status \"%s\" is not supported by the storage policy feature. Business object data: {%s}",businessObjectDataStatus,businessObjectDataHelper.businessObjectDataKeyToString(businessObjectDataKey)));  StorageUnitEntity sourceStorageUnitEntity=storageUnitDaoHelper.getStorageUnitEntity(storagePolicyTransitionParamsDto.getSourceStorageName(),businessObjectDataEntity);  Assert.isTrue(StorageUnitStatusEntity.ENABLED.equals(sourceStorageUnitEntity.getStatus().getCode()),String.format("Source storage unit status is \"%s\", but must be \"%s\" for storage policy transition to proceed. Storage: {%s}, business object data: {%s}",sourceStorageUnitEntity.getStatus().getCode(),StorageUnitStatusEntity.ENABLED,storagePolicyTransitionParamsDto.getSourceStorageName(),businessObjectDataHelper.businessObjectDataKeyToString(businessObjectDataKey)));  StorageUnitEntity destinationStorageUnitEntity=storageUnitDaoHelper.getStorageUnitEntity(storagePolicyTransitionParamsDto.getDestinationStorageName(),businessObjectDataEntity);  Assert.isTrue(StorageUnitStatusEntity.ARCHIVING.equals(destinationStorageUnitEntity.getStatus().getCode()),String.format("Destination storage unit status is \"%s\", but must be \"%s\" for storage policy transition to proceed. Storage: {%s}, business object data: {%s}",destinationStorageUnitEntity.getStatus().getCode(),StorageUnitStatusEntity.ARCHIVING,storagePolicyTransitionParamsDto.getDestinationStorageName(),businessObjectDataHelper.businessObjectDataKeyToString(businessObjectDataKey)));  String reason=StorageUnitStatusEntity.ARCHIVING;  storagePolicyTransitionParamsDto.setOldDestinationStorageUnitStatus(destinationStorageUnitEntity.getStatus().getCode());  storageUnitDaoHelper.updateStorageUnitStatus(destinationStorageUnitEntity,StorageUnitStatusEntity.ENABLED,reason);  storagePolicyTransitionParamsDto.setNewDestinationStorageUnitStatus(destinationStorageUnitEntity.getStatus().getCode());  storagePolicyTransitionParamsDto.setOldSourceStorageUnitStatus(sourceStorageUnitEntity.getStatus().getCode());  storageUnitDaoHelper.updateStorageUnitStatus(sourceStorageUnitEntity,StorageUnitStatusEntity.DISABLED,reason);  storagePolicyTransitionParamsDto.setNewSourceStorageUnitStatus(sourceStorageUnitEntity.getStatus().getCode());}  }
class C{  public static String sendEMail(HttpServletRequest request,WebUser to,String msgType,Object[] parameter){  return WebUtil.sendEMail(request,to,msgType,parameter);}  }
class C{  @Override public String toString(){switch (relation) {case EQUAL:    return variable + "=" + templateValue;case UNEQUAL:  return variable + "!=" + templateValue;case GREATER_THAN:return variable + ">" + templateValue;case LOWER_THAN:return variable + "<" + templateValue;case CONTAINS:return variable + " contains " + templateValue;case NOT_CONTAINS:return variable + " does not contains " + templateValue;case LENGTH:return "length(" + variable + ")="+ templateValue;case IN:return variable + " in " + templateValue;case NOT_IN:return variable + " not in " + templateValue;default :return "";}}  }
class C{  private void ensureDirectoryFor(File targetFile) throws BuildException {  File directory=new File(targetFile.getParent());  if (!directory.exists()) {    if (!directory.mkdirs()) {      throw new BuildException("Unable to create directory: " + directory.getAbsolutePath(),getLocation());    }  }}  }
class C{  public Object readObject() throws IOException {  int tag=_offset < _length ? (_buffer[_offset++] & 0xff) : read();switch (tag) {case 'N':    return null;case 'T':  return Boolean.valueOf(true);case 'F':return Boolean.valueOf(false);case 0x80:case 0x81:case 0x82:case 0x83:case 0x84:case 0x85:case 0x86:case 0x87:case 0x88:case 0x89:case 0x8a:case 0x8b:case 0x8c:case 0x8d:case 0x8e:case 0x8f:case 0x90:case 0x91:case 0x92:case 0x93:case 0x94:case 0x95:case 0x96:case 0x97:case 0x98:case 0x99:case 0x9a:case 0x9b:case 0x9c:case 0x9d:case 0x9e:case 0x9f:case 0xa0:case 0xa1:case 0xa2:case 0xa3:case 0xa4:case 0xa5:case 0xa6:case 0xa7:case 0xa8:case 0xa9:case 0xaa:case 0xab:case 0xac:case 0xad:case 0xae:case 0xaf:case 0xb0:case 0xb1:case 0xb2:case 0xb3:case 0xb4:case 0xb5:case 0xb6:case 0xb7:case 0xb8:case 0xb9:case 0xba:case 0xbb:case 0xbc:case 0xbd:case 0xbe:case 0xbf:return Integer.valueOf(tag - BC_INT_ZERO);case 0xc0:case 0xc1:case 0xc2:case 0xc3:case 0xc4:case 0xc5:case 0xc6:case 0xc7:case 0xc8:case 0xc9:case 0xca:case 0xcb:case 0xcc:case 0xcd:case 0xce:case 0xcf:return Integer.valueOf(((tag - BC_INT_BYTE_ZERO) << 8) + read());case 0xd0:case 0xd1:case 0xd2:case 0xd3:case 0xd4:case 0xd5:case 0xd6:case 0xd7:return Integer.valueOf(((tag - BC_INT_SHORT_ZERO) << 16) + 256 * read() + read());case 'I':return Integer.valueOf(parseInt());case 0xd8:case 0xd9:case 0xda:case 0xdb:case 0xdc:case 0xdd:case 0xde:case 0xdf:case 0xe0:case 0xe1:case 0xe2:case 0xe3:case 0xe4:case 0xe5:case 0xe6:case 0xe7:case 0xe8:case 0xe9:case 0xea:case 0xeb:case 0xec:case 0xed:case 0xee:case 0xef:return Long.valueOf(tag - BC_LONG_ZERO);case 0xf0:case 0xf1:case 0xf2:case 0xf3:case 0xf4:case 0xf5:case 0xf6:case 0xf7:case 0xf8:case 0xf9:case 0xfa:case 0xfb:case 0xfc:case 0xfd:case 0xfe:case 0xff:return Long.valueOf(((tag - BC_LONG_BYTE_ZERO) << 8) + read());case 0x38:case 0x39:case 0x3a:case 0x3b:case 0x3c:case 0x3d:case 0x3e:case 0x3f:return Long.valueOf(((tag - BC_LONG_SHORT_ZERO) << 16) + 256 * read() + read());case BC_LONG_INT:return Long.valueOf(parseInt());case 'L':return Long.valueOf(parseLong());case BC_DOUBLE_ZERO:return Double.valueOf(0);case BC_DOUBLE_ONE:return Double.valueOf(1);case BC_DOUBLE_BYTE:return Double.valueOf((byte)read());case BC_DOUBLE_SHORT:return Double.valueOf((short)(256 * read() + read()));case BC_DOUBLE_MILL:{int mills=parseInt();return Double.valueOf(0.001 * mills);}case 'D':return Double.valueOf(parseDouble());case BC_DATE:return new Date(parseLong());case BC_DATE_MINUTE:return new Date(parseInt() * 60000L);case BC_STRING_CHUNK:case 'S':{_isLastChunk=tag == 'S';_chunkLength=(read() << 8) + read();_sbuf.setLength(0);parseString(_sbuf);return _sbuf.toString();}case 0x00:case 0x01:case 0x02:case 0x03:case 0x04:case 0x05:case 0x06:case 0x07:case 0x08:case 0x09:case 0x0a:case 0x0b:case 0x0c:case 0x0d:case 0x0e:case 0x0f:case 0x10:case 0x11:case 0x12:case 0x13:case 0x14:case 0x15:case 0x16:case 0x17:case 0x18:case 0x19:case 0x1a:case 0x1b:case 0x1c:case 0x1d:case 0x1e:case 0x1f:{_isLastChunk=true;_chunkLength=tag - 0x00;int data;_sbuf.setLength(0);parseString(_sbuf);return _sbuf.toString();}case 0x30:case 0x31:case 0x32:case 0x33:{_isLastChunk=true;_chunkLength=(tag - 0x30) * 256 + read();_sbuf.setLength(0);parseString(_sbuf);return _sbuf.toString();}case BC_BINARY_CHUNK:case 'B':{_isLastChunk=tag == 'B';_chunkLength=(read() << 8) + read();int data;ByteArrayOutputStream bos=new ByteArrayOutputStream();while ((data=parseByte()) >= 0) bos.write(data);return bos.toByteArray();}case 0x20:case 0x21:case 0x22:case 0x23:case 0x24:case 0x25:case 0x26:case 0x27:case 0x28:case 0x29:case 0x2a:case 0x2b:case 0x2c:case 0x2d:case 0x2e:case 0x2f:{_isLastChunk=true;int len=tag - 0x20;_chunkLength=0;byte[] data=new byte[len];for (int i=0; i < len; i++) data[i]=(byte)read();return data;}case 0x34:case 0x35:case 0x36:case 0x37:{_isLastChunk=true;int len=(tag - 0x34) * 256 + read();_chunkLength=0;byte[] buffer=new byte[len];for (int i=0; i < len; i++) {buffer[i]=(byte)read();}return buffer;}case BC_LIST_VARIABLE:{String type=readType();return findSerializerFactory().readList(this,-1,type);}case BC_LIST_VARIABLE_UNTYPED:{return findSerializerFactory().readList(this,-1,null);}case BC_LIST_FIXED:{String type=readType();int length=readInt();Deserializer reader;reader=findSerializerFactory().getListDeserializer(type,null);return reader.readLengthList(this,length);}case BC_LIST_FIXED_UNTYPED:{int length=readInt();Deserializer reader;reader=findSerializerFactory().getListDeserializer(null,null);return reader.readLengthList(this,length);}case 0x70:case 0x71:case 0x72:case 0x73:case 0x74:case 0x75:case 0x76:case 0x77:{String type=readType();int length=tag - 0x70;Deserializer reader;reader=findSerializerFactory().getListDeserializer(type,null);return reader.readLengthList(this,length);}case 0x78:case 0x79:case 0x7a:case 0x7b:case 0x7c:case 0x7d:case 0x7e:case 0x7f:{int length=tag - 0x78;Deserializer reader;reader=findSerializerFactory().getListDeserializer(null,null);return reader.readLengthList(this,length);}case 'H':{return findSerializerFactory().readMap(this,null);}case 'M':{String type=readType();return findSerializerFactory().readMap(this,type);}case 'C':{readObjectDefinition(null);return readObject();}case 0x60:case 0x61:case 0x62:case 0x63:case 0x64:case 0x65:case 0x66:case 0x67:case 0x68:case 0x69:case 0x6a:case 0x6b:case 0x6c:case 0x6d:case 0x6e:case 0x6f:{int ref=tag - 0x60;if (_classDefs.size() <= ref) throw error("No classes defined at reference '" + Integer.toHexString(tag) + "'");ObjectDefinition def=_classDefs.get(ref);return readObjectInstance(null,def);}case 'O':{int ref=readInt();if (_classDefs.size() <= ref) throw error("Illegal object reference #" + ref);ObjectDefinition def=_classDefs.get(ref);return readObjectInstance(null,def);}case BC_REF:{int ref=readInt();return _refs.get(ref);}default :if (tag < 0) throw new EOFException("readObject: unexpected end of file"); else throw error("readObject: unknown code " + codeName(tag));}}  }
class C{  public void addCSSNavigableDocumentListener(CSSNavigableDocumentListener l){  if (cssNavigableDocumentListeners.containsKey(l)) {    return;  }  DOMNodeInsertedListenerWrapper nodeInserted=new DOMNodeInsertedListenerWrapper(l);  DOMNodeRemovedListenerWrapper nodeRemoved=new DOMNodeRemovedListenerWrapper(l);  DOMSubtreeModifiedListenerWrapper subtreeModified=new DOMSubtreeModifiedListenerWrapper(l);  DOMCharacterDataModifiedListenerWrapper cdataModified=new DOMCharacterDataModifiedListenerWrapper(l);  DOMAttrModifiedListenerWrapper attrModified=new DOMAttrModifiedListenerWrapper(l);  cssNavigableDocumentListeners.put(l,new EventListener[]{nodeInserted,nodeRemoved,subtreeModified,cdataModified,attrModified});  addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMNodeInserted",nodeInserted,false,null);  addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMNodeRemoved",nodeRemoved,false,null);  addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMSubtreeModified",subtreeModified,false,null);  addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMCharacterDataModified",cdataModified,false,null);  addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMAttrModified",attrModified,false,null);}  }
class C{  public static ValueExp value(float val){  return new NumericValueExp((double)val);}  }
class C{  private void updateEditPanelPosition(final Rectangle2D loc,final boolean absolute){  int panelX=(int)(loc.getCenterX() * rendererModel.getZoomFactor() - EDIT_PANEL_WIDTH / 2);  int panelY=(int)(loc.getY() * rendererModel.getZoomFactor() - EDIT_PANEL_HEIGHT - BUTTON_PANEL_GAP);  if (panelX < WorkflowAnnotation.MIN_X) {    panelX=WorkflowAnnotation.MIN_X;  }  if (panelY < 0) {    panelY=(int)(loc.getMaxY() * rendererModel.getZoomFactor()) + BUTTON_PANEL_GAP;  }  if (panelY + EDIT_PANEL_HEIGHT > view.getSize().getHeight() - BUTTON_PANEL_GAP * 2) {    panelY=(int)(loc.getMaxY() * rendererModel.getZoomFactor());  }  int index=view.getModel().getProcessIndex(model.getSelected().getProcess());  if (absolute) {    editPanel.setBounds(panelX,panelY,EDIT_PANEL_WIDTH,EDIT_PANEL_HEIGHT);  } else {    Point absoluteP=ProcessDrawUtils.convertToAbsoluteProcessPoint(new Point(panelX,panelY),index,rendererModel);    editPanel.setBounds((int)absoluteP.getX(),(int)absoluteP.getY(),EDIT_PANEL_WIDTH,EDIT_PANEL_HEIGHT);  }}  }
class C{  public RemoteRegionAttributes(RegionAttributes attr){  this.cacheLoaderDesc=getDesc(attr.getCacheLoader());  this.cacheWriterDesc=getDesc(attr.getCacheWriter());  this.cacheListenerDescs=getDescs(attr.getCacheListeners());  this.keyConstraint=attr.getKeyConstraint();  this.valueConstraint=attr.getValueConstraint();  this.rTtl=attr.getRegionTimeToLive();  this.rIdleTimeout=attr.getRegionIdleTimeout();  this.eTtl=attr.getEntryTimeToLive();  this.customEttlDesc=getDesc(attr.getCustomEntryTimeToLive());  this.eIdleTimeout=attr.getEntryIdleTimeout();  this.customEIdleDesc=getDesc(attr.getCustomEntryIdleTimeout());  this.dataPolicy=attr.getDataPolicy();  this.scope=attr.getScope();  this.statsEnabled=attr.getStatisticsEnabled();  this.ignoreJTA=attr.getIgnoreJTA();  this.concurrencyLevel=attr.getConcurrencyLevel();  this.concurrencyChecksEnabled=attr.getConcurrencyChecksEnabled();  this.loadFactor=attr.getLoadFactor();  this.initialCapacity=attr.getInitialCapacity();  this.earlyAck=attr.getEarlyAck();  this.multicastEnabled=attr.getMulticastEnabled();  this.enableSubscriptionConflation=attr.getEnableSubscriptionConflation();  this.publisher=attr.getPublisher();  this.enableAsyncConflation=attr.getEnableAsyncConflation();  this.diskStoreName=attr.getDiskStoreName();  if (this.diskStoreName == null) {    this.diskWriteAttributes=attr.getDiskWriteAttributes();    this.diskDirs=attr.getDiskDirs();    this.diskSizes=attr.getDiskDirSizes();  } else {    this.diskWriteAttributes=null;    this.diskDirs=null;    this.diskSizes=null;  }  this.partitionAttributes=attr.getPartitionAttributes();  this.membershipAttributes=attr.getMembershipAttributes();  this.subscriptionAttributes=attr.getSubscriptionAttributes();  this.cloningEnable=attr.getCloningEnabled();  this.poolName=attr.getPoolName();  this.isDiskSynchronous=attr.isDiskSynchronous();  this.gatewaySendersDescs=getDescs(attr.getGatewaySenderIds().toArray());  this.asyncEventQueueDescs=getDescs(attr.getAsyncEventQueueIds().toArray());  this.compressorDesc=getDesc(attr.getCompressor());  this.offHeap=attr.getOffHeap();}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.TRACE_OPTION___OPTION_1:    return OPTION_1_EDEFAULT == null ? option_1 != null : !OPTION_1_EDEFAULT.equals(option_1);}return super.eIsSet(featureID);}  }
class C{  public void select(){  main.addStyleName(resources.getCss().selectNode());}  }
class C{  @Override public void registerOutParameter(int parameterIndex,int sqlType,int scale) throws SQLException {  registerOutParameter(parameterIndex);}  }
class C{  public void computeStoragePortUsage(){  _log.debug("Begin - recompute all storage ports' usage metrics for all storage systems");  List<URI> storageSysteIds=_dbClient.queryByType(StorageSystem.class,true);  if (storageSysteIds != null) {    for (    URI storageSystemId : storageSysteIds) {      StorageSystem storageSystem=_dbClient.queryObject(StorageSystem.class,storageSystemId);      List<StoragePort> systemPorts=ControllerUtils.getSystemPortsOfSystem(_dbClient,storageSystemId);      computeStoragePortUsage(systemPorts,storageSystem,true);      computeStorageSystemAvgPortMetrics(storageSystemId);    }  }  _log.debug("End - recompute all storage ports' usage metrics for all storage systems");}  }
class C{  public static void addSPText(Command command){  MultiUnion unionGraph=new MultiUnion(new Graph[]{command.getModel().getGraph(),SPIN.getModel().getGraph()});  unionGraph.setBaseGraph(command.getModel().getGraph());  Model unionModel=ModelFactory.createModelForGraph(unionGraph);  Command spinCommand=SPINFactory.asCommand(command.inModel(unionModel));  StringPrintContext p=new StringPrintContext();  p.setUsePrefixes(true);  p.setPrintPrefixes(false);  spinCommand.print(p);  String str=p.getString();  command.addProperty(SP.text,command.getModel().createTypedLiteral(str));}  }
class C{  public static void verifySetterMethods(Class<?> clazz,MappedField... fields){  String methodName=null;  String fieldName=null;  Class<?> fieldType=null;  try {    for (    MappedField field : fields) {      fieldName=field.getName();      fieldType=field.getType();      String customSet=field.setMethod();      if (!isNull(customSet) && !customSet.equals(Constants.DEFAULT_ACCESSOR_VALUE))       try {        clazz.getMethod(customSet,fieldType);        field.setMethod(customSet);        continue;      } catch (      Exception e) {        Error.customMethod("set",customSet,clazz);      }      methodName=mSet(fieldName);      clazz.getMethod(methodName,fieldType);      field.setMethod(methodName);    }  } catch (  Exception e) {    Error.method(methodName,fieldName,clazz);  }}  }
class C{  public static boolean isEmptyListFollowedBy(BashPsiBuilder builder,TokenSet tokens){  if (tokens.contains(builder.getTokenType())) {    return true;  }  int steps=0;  while (builder.lookAhead(steps) == BashTokenTypes.LINE_FEED) {    steps++;  }  if (builder.lookAhead(steps) == BashTokenTypes.SEMI) {    steps++;  }  while (builder.lookAhead(steps) == BashTokenTypes.LINE_FEED) {    steps++;  }  return tokens.contains(builder.lookAhead(steps));}  }
class C{  public CoefficientOfDetermination(){  super();}  }
class C{  @Override public Iterator<Example> iterator(){  return new AttributesExampleReader(parent.iterator(),this);}  }
class C{  public static int value(String s){  return protocols.getValue(s);}  }
class C{  public RandomSubspaceMLTest(String name){  super(name);}  }
class C{  @Deprecated public ListenableFuture<Camera> openLegacyCameraDevice(Lifetime requestLifetime,CameraId cameraId){  CameraDeviceKey key=new CameraDeviceKey(ApiType.CAMERA_API1,cameraId);  return openDevice(requestLifetime,key,mLegacyCameraActionProvider);}  }
class C{  public static Process openInConsole(String... args) throws IOException {  return openInConsole(null,args);}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writePaint(this.aggregatedItemsPaint,stream);  SerialUtilities.writeShape(this.legendItemShape,stream);}  }
class C{  public PinLaterClient(CommandLine cmdLine){  this(cmdLine.getOptionValue("host"),Integer.parseInt(cmdLine.getOptionValue("port")),Integer.parseInt(cmdLine.getOptionValue("concurrency","1")));}  }
class C{  public boolean add(PackingPlan.InstancePlan instancePlan){  if (this.hasSpace(instancePlan.getResource())) {    this.instances.add(instancePlan);    return true;  } else {    return false;  }}  }
class C{  public void arrayStore(final Type type){  mv.visitInsn(type.getOpcode(Opcodes.IASTORE));}  }
class C{  public SchedulerConfigException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  private static void connectImage(URL url) throws Exception {  HttpURLConnection httpCon=prepareConnection(url);  try {    System.out.println("Connecting to URL " + url.toString());    httpCon.setInstanceFollowRedirects(false);    String cookie="CTSESSION=" + _ctsession;    httpCon.setRequestProperty("Cookie",cookie);    httpCon.setRequestMethod("GET");    httpCon.connect();    System.out.println("Cookies for current connection:" + cookie);    if (httpCon.getResponseCode() != HttpURLConnection.HTTP_OK) {      throw new IllegalArgumentException("Http error code:" + httpCon.getResponseCode());    }    System.out.println("Image is located successfully and its size is " + httpCon.getContentLength());    final InputStream in=httpCon.getInputStream();    if (in == null) {      throw new IllegalArgumentException("in is null");    }    byte[] buffer=new byte[0x100000];    int len=in.read(buffer);    if (len <= 0) {      throw new IllegalArgumentException("getImageInputStream failed for ");    } else {      System.out.println("Succeed to read some data from image.");    }    in.close();  } catch (  Exception e) {    throw new IllegalArgumentException(MessageFormat.format("User {0} failed to connect with remote image {1}: {2}",_username,url.toString(),e));  }}  }
class C{  public void addAlias(String alias,DbTableOrView table){  if (aliases == null) {    aliases=New.hashMap();  }  aliases.put(alias,table);}  }
class C{  public SquarifiedTreeMapLayout(String group,double frame){  super(group);  setFrameWidth(frame);}  }
class C{  public ExtendedStateMachine_ createExtendedStateMachine_(){  ExtendedStateMachine_Impl extendedStateMachine_=new ExtendedStateMachine_Impl();  return extendedStateMachine_;}  }
class C{  @Override public void mouseClicked(MouseEvent e){  if (SwingUtilities.isLeftMouseButton(e)) {    if (e.getClickCount() == 2) {      fixedHoverEntry=false;      setFixedStartAt(hoverEntry);    } else {      long actualHoverEntry=findHoverEntry(e.getPoint());      fixedHoverEntry=actualHoverEntry != -1;      if (hoverEntry != actualHoverEntry) {        updateHoverEntry(e.getPoint());      }    }  }}  }
class C{  public long totalMemory(){  return MemoryManager.totalMemory().toLong();}  }
class C{  public void removeModifyListener(final ModifyListener listener){  checkWidget();  this.panel.removeModifyListener(listener);}  }
class C{  private String testConfiguration(File file,int port){  final String path=(file == null) ? null : file.getAbsolutePath();  final String config=(path == null) ? "Default config file" : path;  try {    System.out.println("***");    System.out.println("*** Testing configuration (port=" + port + "): "+ path);    System.out.println("***");    System.setProperty("com.sun.management.jmxremote.port",Integer.toString(port));    if (path != null)     System.setProperty("com.sun.management.config.file",path); else     System.getProperties().remove("com.sun.management.config.file");    log.trace("testConfiguration","com.sun.management.jmxremote.port=" + port);    if (path != null && log.isDebugOn())     log.trace("testConfiguration","com.sun.management.config.file=" + path);    checkSslConfiguration();    final JMXConnectorServer cs;    try {      cs=ConnectorBootstrap.initialize();    } catch (    AgentConfigurationError x) {      final String err="Failed to initialize connector:" + "\n\tcom.sun.management.jmxremote.port=" + port + ((path != null) ? "\n\tcom.sun.management.config.file=" + path : "\n\t" + config)+ "\n\tError is: "+ x;      log.trace("testConfiguration","Expected failure: " + err);      log.debug("testConfiguration",x);      System.out.println("Got expected failure: " + x);      return null;    }catch (    Exception x) {      log.debug("testConfiguration",x);      return x.toString();    }    try {      JMXConnector cc=JMXConnectorFactory.connect(cs.getAddress(),null);      cc.close();    } catch (    IOException x) {      final String err="Failed to initialize connector:" + "\n\tcom.sun.management.jmxremote.port=" + port + ((path != null) ? "\n\tcom.sun.management.config.file=" + path : "\n\t" + config)+ "\n\tError is: "+ x;      log.trace("testConfiguration","Expected failure: " + err);      log.debug("testConfiguration",x);      System.out.println("Got expected failure: " + x);      return null;    }catch (    Exception x) {      log.debug("testConfiguration",x);      return x.toString();    }    try {      cs.stop();    } catch (    Exception x) {      final String err="Failed to terminate: " + x;      log.trace("testConfiguration",err);      log.debug("testConfiguration",x);    }    final String err="Bootstrap should have failed:" + "\n\tcom.sun.management.jmxremote.port=" + port + ((path != null) ? "\n\tcom.sun.management.config.file=" + path : "\n\t" + config);    log.trace("testConfiguration",err);    return err;  } catch (  Exception x) {    final String err="Failed to test bootstrap for:" + "\n\tcom.sun.management.jmxremote.port=" + port + ((path != null) ? "\n\tcom.sun.management.config.file=" + path : "\n\t" + config)+ "\n\tError is: "+ x;    log.trace("testConfiguration",err);    log.debug("testConfiguration",x);    return err;  }}  }
class C{  public void testDelimiterStartsWithTheSameBytesAsLastPreviousDataByte() throws Exception {  byte[] delim=array(F.t(wrap(1,1,2),1));  byte[] data=array(F.t(wrap(1),1),F.t(delim,1),F.t(wrap(1),1));  assertSplit(0,1,0,4,data,delim);  assertSplit(0,2,0,4,data,delim);  assertSplit(0,4,0,4,data,delim);  assertSplit(0,5,0,5,data,delim);  assertSplit(1,4,4,1,data,delim);}  }
class C{  @RequestMapping(value="/test",method=RequestMethod.POST) public BasicCase create(@RequestBody BasicCase basicCase){  return null;}  }
class C{  public boolean isHandle(String handle){  return clientHandle.equals(handle);}  }
class C{  public void releaseLocks(){  if (!didRun) {    return;  }  if (access != null) {    access.release();  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  protected void undo(){  m_DataPanel.undo();}  }
class C{  public JMenuItem add(Action a){  JMenuItem mi=createActionComponent(a);  mi.setAction(a);  add(mi);  return mi;}  }
class C{  public boolean isPasswordValid(String password){  return this.passwordPattern == null || this.passwordPattern.matcher(password).matches();}  }
class C{  protected int consumeRecords(int numberOfRecords) throws InterruptedException {  return consumeRecords(numberOfRecords,null);}  }
class C{  public static boolean sameURL(URL url1,URL url2){  if (url1 == url2) {    return true;  }  if (url1 == null ^ url2 == null) {    return false;  }  final boolean isFile1="file".equalsIgnoreCase(url1.getProtocol());  final boolean isFile2="file".equalsIgnoreCase(url2.getProtocol());  if (isFile1 && isFile2) {    File file1=new File(url1.getFile());    File file2=new File(url2.getFile());    return file1.equals(file2);  }  if (isFile1 ^ isFile2) {    return false;  }  return getExternalForm(url1).equals(getExternalForm(url2));}  }
class C{  public void compact(){  trimToSize(hashIndexSetProperties.size);}  }
class C{  private static void sort(double[] a,int left,int right,boolean leftmost){  int length=right - left + 1;  if (length < INSERTION_SORT_THRESHOLD) {    if (leftmost) {      for (int i=left, j=i; i < right; j=++i) {        double ai=a[i + 1];        while (ai < a[j]) {          a[j + 1]=a[j];          if (j-- == left) {            break;          }        }        a[j + 1]=ai;      }    } else {      do {        if (left >= right) {          return;        }      } while (a[++left] >= a[left - 1]);      for (int k=left; ++left <= right; k=++left) {        double a1=a[k], a2=a[left];        if (a1 < a2) {          a2=a1;          a1=a[left];        }        while (a1 < a[--k]) {          a[k + 2]=a[k];        }        a[++k + 1]=a1;        while (a2 < a[--k]) {          a[k + 1]=a[k];        }        a[k + 1]=a2;      }      double last=a[right];      while (last < a[--right]) {        a[right + 1]=a[right];      }      a[right + 1]=last;    }    return;  }  int seventh=(length >> 3) + (length >> 6) + 1;  int e3=(left + right) >>> 1;  int e2=e3 - seventh;  int e1=e2 - seventh;  int e4=e3 + seventh;  int e5=e4 + seventh;  if (a[e2] < a[e1]) {    double t=a[e2];    a[e2]=a[e1];    a[e1]=t;  }  if (a[e3] < a[e2]) {    double t=a[e3];    a[e3]=a[e2];    a[e2]=t;    if (t < a[e1]) {      a[e2]=a[e1];      a[e1]=t;    }  }  if (a[e4] < a[e3]) {    double t=a[e4];    a[e4]=a[e3];    a[e3]=t;    if (t < a[e2]) {      a[e3]=a[e2];      a[e2]=t;      if (t < a[e1]) {        a[e2]=a[e1];        a[e1]=t;      }    }  }  if (a[e5] < a[e4]) {    double t=a[e5];    a[e5]=a[e4];    a[e4]=t;    if (t < a[e3]) {      a[e4]=a[e3];      a[e3]=t;      if (t < a[e2]) {        a[e3]=a[e2];        a[e2]=t;        if (t < a[e1]) {          a[e2]=a[e1];          a[e1]=t;        }      }    }  }  int less=left;  int great=right;  if (a[e1] != a[e2] && a[e2] != a[e3] && a[e3] != a[e4] && a[e4] != a[e5]) {    double pivot1=a[e2];    double pivot2=a[e4];    a[e2]=a[left];    a[e4]=a[right];    while (a[++less] < pivot1)     ;    while (a[--great] > pivot2)     ;    outer:     for (int k=less - 1; ++k <= great; ) {      double ak=a[k];      if (ak < pivot1) {        a[k]=a[less];        a[less]=ak;        ++less;      } else       if (ak > pivot2) {        while (a[great] > pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less]=a[great];          ++less;        } else {          a[k]=a[great];        }        a[great]=ak;        --great;      }    }    a[left]=a[less - 1];    a[less - 1]=pivot1;    a[right]=a[great + 1];    a[great + 1]=pivot2;    sort(a,left,less - 2,leftmost);    sort(a,great + 2,right,false);    if (less < e1 && e5 < great) {      while (a[less] == pivot1) {        ++less;      }      while (a[great] == pivot2) {        --great;      }      outer:       for (int k=less - 1; ++k <= great; ) {        double ak=a[k];        if (ak == pivot1) {          a[k]=a[less];          a[less]=ak;          ++less;        } else         if (ak == pivot2) {          while (a[great] == pivot2) {            if (great-- == k) {              break outer;            }          }          if (a[great] == pivot1) {            a[k]=a[less];            a[less]=a[great];            ++less;          } else {            a[k]=a[great];          }          a[great]=ak;          --great;        }      }    }    sort(a,less,great,false);  } else {    double pivot=a[e3];    for (int k=less; k <= great; ++k) {      if (a[k] == pivot) {        continue;      }      double ak=a[k];      if (ak < pivot) {        a[k]=a[less];        a[less]=ak;        ++less;      } else {        while (a[great] > pivot) {          --great;        }        if (a[great] < pivot) {          a[k]=a[less];          a[less]=a[great];          ++less;        } else {          a[k]=a[great];        }        a[great]=ak;        --great;      }    }    sort(a,left,less - 1,leftmost);    sort(a,great + 1,right,false);  }}  }
class C{  public List<List<Integer>> threeSum(int[] num){  List<List<Integer>> res=new ArrayList<>();  Arrays.sort(num);  for (int i=0; i < num.length - 2; i++) {    if (i > 0 && num[i] == num[i - 1]) {      continue;    }    if (num[i] > 0) {      break;    }    int j=i + 1;    int k=num.length - 1;    while (j < k) {      if (j > i + 1 && num[j] == num[j - 1]) {        j++;        continue;      }      if (num[i] + num[j] > 0) {        break;      }      if (num[i] + num[j] + num[k] < 0) {        j++;      } else       if (num[i] + num[j] + num[k] > 0) {        k--;      } else {        List<Integer> triplets=new ArrayList<>();        triplets.add(num[i]);        triplets.add(num[j]);        triplets.add(num[k]);        res.add(triplets);        j++;        k--;      }    }  }  return res;}  }
class C{  public String descriptor(){  if (descriptor == null) {    descriptor=((CpUtf8)myclass.constant_pool[descriptor_index]).decodeClassName(0);  }  return descriptor;}  }
class C{  public String format(){  s_logger.info("formatting claimed volume name " + _volumeNativeId);  String volumeName=assembleDefaultName(_storageSystemSerialNumber,_volumeNativeId);  if (volumeName.length() <= VPlexApiConstants.MAX_VOL_NAME_LENGTH) {    return volumeName;  } else {    int shortenBy=volumeName.length() - VPlexApiConstants.MAX_VOL_NAME_LENGTH;    return shortenName(shortenBy);  }}  }
class C{  public static boolean isHour(String s){  if (isEmpty(s))   return defaultEmptyOK;  return isIntegerInRange(s,0,23);}  }
class C{  private void loadDefaultRules(){  mEventSpeechRuleProcessor.addSpeechStrategy(R.raw.speechstrategy_apps);  mEventSpeechRuleProcessor.addSpeechStrategy(R.raw.speechstrategy_googletv);  if (Build.VERSION.SDK_INT >= 19) {    mEventSpeechRuleProcessor.addSpeechStrategy(R.raw.speechstrategy_kitkat);  } else   if (Build.VERSION.SDK_INT >= 16) {    mEventSpeechRuleProcessor.addSpeechStrategy(R.raw.speechstrategy_jellybean);  }  mEventSpeechRuleProcessor.addSpeechStrategy(R.raw.speechstrategy);}  }
class C{  public void removeColumn(int columnIndex){  Comparable columnKey=getColumnKey(columnIndex);  removeColumn(columnKey);}  }
class C{  public void enqueueEventIfNecessary(final IoSessionEvent evt){  logger.debug("??? >> Enqueue {}",evt);  if (proxyIoSession.getRequest() instanceof SocksProxyRequest) {    evt.deliverEvent();    return;  }  if (proxyIoSession.getHandler().isHandshakeComplete()) {    evt.deliverEvent();  } else {    if (evt.getType() == IoSessionEventType.CLOSED) {      if (proxyIoSession.isAuthenticationFailed()) {        proxyIoSession.getConnector().cancelConnectFuture();        discardSessionQueueEvents();        evt.deliverEvent();      } else {        discardSessionQueueEvents();      }    } else     if (evt.getType() == IoSessionEventType.OPENED) {      enqueueSessionEvent(evt);      evt.deliverEvent();    } else {      enqueueSessionEvent(evt);    }  }}  }
class C{  @Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){  mWidth=MeasureSpec.getSize(widthMeasureSpec);  mHeight=MeasureSpec.getSize(heightMeasureSpec);  int minSide=Math.min(mWidth,mHeight);  mWidth=minSide;  mHeight=minSide;  this.setMeasuredDimension(mWidth,mHeight);  mCenterX=mWidth / 2f;  mCenterY=mHeight / 2f;  mCoverRadius=minSide / 2.3f;  mRadiusToggle=mWidth / 40.0f;  sizeDurationText=mHeight / 5;  mDurationPaint.setTextSize(sizeDurationText);  createShader();  if (mBitmapUnselectedAction1 != null && mBitmapSelectedAction1 != null) {    mBitmapSelectedAction1=scaleBitmap(mBitmapSelectedAction1,(int)(mWidth / 13.0f),(int)(mHeight / 13.0f));    mBitmapUnselectedAction1=scaleBitmap(mBitmapUnselectedAction1,(int)(mWidth / 13.0f),(int)(mHeight / 13.0f));  }  if (mBitmapUnselectedAction2 != null && mBitmapSelectedAction2 != null) {    mBitmapSelectedAction2=scaleBitmap(mBitmapSelectedAction2,(int)(mWidth / 13.0f),(int)(mHeight / 13.0f));    mBitmapUnselectedAction2=scaleBitmap(mBitmapUnselectedAction2,(int)(mWidth / 13.0f),(int)(mHeight / 13.0f));  }  if (mBitmapUnselectedAction3 != null && mBitmapSelectedAction3 != null) {    mBitmapSelectedAction3=scaleBitmap(mBitmapSelectedAction3,(int)(mWidth / 13.0f),(int)(mHeight / 13.0f));    mBitmapUnselectedAction3=scaleBitmap(mBitmapUnselectedAction3,(int)(mWidth / 13.0f),(int)(mHeight / 13.0f));  }  middleActionRegion=new Region((int)(mCenterX - (mCenterX / 13.0f)),(int)(mCenterY + (mCenterY / 3.0f) - (mCenterY / 13.0f)),(int)(mCenterX + (mCenterX / 13.0f)),(int)(mCenterY + (mCenterY / 3.0f) + (mCenterY / 13.0f)));  leftActionRegion=new Region((int)(mCenterX - (5 * (mCenterX / 13.0f))),(int)(mCenterY + (mCenterY / 3.0f) - (mCenterY / 13.0f)),(int)(mCenterX - (3 * (mCenterX / 13.0f))),(int)(mCenterY + (mCenterY / 3.0f) + (mCenterY / 13.0f)));  rightActionRegion=new Region((int)(mCenterX + (3 * (mCenterX / 13.0f))),(int)(mCenterY + (mCenterY / 3.0f) - (mCenterY / 13.0f)),(int)(mCenterX + (5 * (mCenterX / 13.0f))),(int)(mCenterY + (mCenterY / 3.0f) + (mCenterY / 13.0f)));  mProgressRectF.set(20.0f,20.0f,mWidth - 20.0f,mHeight - 20.0f);  super.onMeasure(widthMeasureSpec,heightMeasureSpec);}  }
class C{  public void addCcUpdate(CcUpdate ccUpdate){  getCcUpdates().add(ccUpdate);}  }
class C{  public SwitchCase newSwitchCase(){  return new SwitchCase(this);}  }
class C{  public static double P(Instances D,int j[],int v[]){  int N=D.numInstances();  int n=0;  for (  Instance x : D) {    if (match(x,j,v))     n++;  }  return Math.max(0.0001,(double)n / N);}  }
class C{  public IntArrayIterator(ArrayBasedIntToIntArrayMap arrayBasedIntToIntArrayMap){  this.arrayBasedIntToIntArrayMap=arrayBasedIntToIntArrayMap;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:47.348 -0500",hash_original_method="ABB8BC4D82891CF5369714A62A1A931C",hash_generated_method="B18D28F302F23880063E3FA5E3607879") @Override public String toString(){  return "state=" + state.getName() + ",active="+ active+ ",parent="+ ((parentStateInfo == null) ? "null" : parentStateInfo.state.getName());}  }
class C{  public void updateSizes(int size){  if (size == LARGE) {    setSizeParameters(CIRCLE_DIAMETER_LARGE,CIRCLE_DIAMETER_LARGE,CENTER_RADIUS_LARGE,STROKE_WIDTH_LARGE,ARROW_WIDTH_LARGE,ARROW_HEIGHT_LARGE);  } else {    setSizeParameters(CIRCLE_DIAMETER,CIRCLE_DIAMETER,CENTER_RADIUS,STROKE_WIDTH,ARROW_WIDTH,ARROW_HEIGHT);  }}  }
class C{  public T caseServiceInvocation(ServiceInvocation object){  return null;}  }
class C{  private boolean canConnect(final String server){  boolean success=false;  try {    final URL url=new URL(server + "/protocol");    final BufferedReader reader=new BufferedReader(new InputStreamReader(url.openStream()));    try {      Integer.parseInt(reader.readLine());      success=true;    }  finally {      reader.close();    }  } catch (  MalformedURLException e) {    LOGGER.warn(e.toString(),e);  }catch (  IOException e) {    LOGGER.warn(e.toString(),e);  }  return success;}  }
class C{  public boolean contains(JComponent a,int b,int c){  boolean returnValue=((ComponentUI)(uis.elementAt(0))).contains(a,b,c);  for (int i=1; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).contains(a,b,c);  }  return returnValue;}  }
class C{  public double adjustedPow10(double val){  boolean negFlag=(val < 0.0);  if (negFlag) {    val=-val;  }  double res;  if (val < 1.0) {    res=(Math.pow(10,val + 1.0) - 10.0) / 9.0;  } else {    res=Math.pow(10,val);  }  return negFlag ? (-res) : res;}  }
class C{  @Override public void handleStart(Operation start){  ServiceUtils.logInfo(this,"Handling start for service %s",getSelfLink());  State startState=start.getBody(State.class);  InitializationUtils.initialize(startState);  if (null == startState.taskPollDelay) {    startState.taskPollDelay=HostUtils.getDeployerContext(this).getTaskPollDelay();  }  if (null == startState.desiredState) {    startState.desiredState=DeploymentState.PAUSED;  }  if (null == startState.managementVmImageFile) {    startState.managementVmImageFile=DeployerConfig.getManagementImageFile();  }  if (TaskState.TaskStage.CREATED == startState.taskState.stage) {    checkState(null == startState.taskSubStates);    startState.taskSubStates=new ArrayList<>(TaskState.SubStage.values().length);    for (    TaskState.SubStage subStage : TaskState.SubStage.values()) {      startState.taskSubStates.add(subStage.ordinal(),TaskState.TaskStage.CREATED);    }  }  validateState(startState);  if (TaskState.TaskStage.CREATED == startState.taskState.stage) {    startState.taskState.stage=TaskState.TaskStage.STARTED;    startState.taskState.subStage=TaskState.SubStage.PROVISION_MANAGEMENT_HOSTS;    startState.taskSubStates.set(0,TaskState.TaskStage.STARTED);  }  if (startState.documentExpirationTimeMicros <= 0) {    startState.documentExpirationTimeMicros=ServiceUtils.computeExpirationTime(ServiceUtils.DEFAULT_DOC_EXPIRATION_TIME_MICROS);  }  start.setBody(startState).complete();  try {    if (ControlFlags.isOperationProcessingDisabled(startState.controlFlags)) {      ServiceUtils.logInfo(this,"Skipping start operation processing (disabled)");    } else     if (TaskState.TaskStage.STARTED == startState.taskState.stage) {      sendStageProgressPatch(startState.taskState);    }  } catch (  Throwable t) {    failTask(t);  }}  }
class C{  private void installDefaults(){  setFont(UIManager.getFont("InternalFrame.titleFont"));  closeButtonToolTip=UIManager.getString("InternalFrame.closeButtonToolTip");  iconButtonToolTip=UIManager.getString("InternalFrame.iconButtonToolTip");  restoreButtonToolTip=UIManager.getString("InternalFrame.restoreButtonToolTip");  maxButtonToolTip=UIManager.getString("InternalFrame.maxButtonToolTip");  updateStyle(this);}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == FunctionOrFieldAccessor.class) {switch (baseOperationID) {case N4JSPackage.FUNCTION_OR_FIELD_ACCESSOR___IS_ASYNC:      return N4JSPackage.FUNCTION_DEFINITION___IS_ASYNC;default :    return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == TypeDefiningElement.class) {switch (baseOperationID) {default :  return -1;}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  public String toString(){  String printable="DSA Signature";  if (presetP != null && presetQ != null && presetG != null) {    printable+="\n\tp: " + Debug.toHexString(presetP);    printable+="\n\tq: " + Debug.toHexString(presetQ);    printable+="\n\tg: " + Debug.toHexString(presetG);  } else {    printable+="\n\t P, Q or G not initialized.";  }  if (presetY != null) {    printable+="\n\ty: " + Debug.toHexString(presetY);  }  if (presetY == null && presetX == null) {    printable+="\n\tUNINIIALIZED";  }  return printable;}  }
class C{  public static void addLongTermCredentialAttributes(Request request,byte username[],byte realm[],byte nonce[]) throws StunException {  UsernameAttribute usernameAttribute=AttributeFactory.createUsernameAttribute(username);  RealmAttribute realmAttribute=AttributeFactory.createRealmAttribute(realm);  NonceAttribute nonceAttribute=AttributeFactory.createNonceAttribute(nonce);  request.putAttribute(usernameAttribute);  request.putAttribute(realmAttribute);  request.putAttribute(nonceAttribute);  MessageIntegrityAttribute messageIntegrityAttribute;  try {    messageIntegrityAttribute=AttributeFactory.createMessageIntegrityAttribute(new String(username,"UTF-8"));  } catch (  UnsupportedEncodingException ueex) {    throw new StunException("username",ueex);  }  request.putAttribute(messageIntegrityAttribute);}  }
class C{  public DSSDocument generateXAdESContentTimestampAsDSSDocument(final DSSDocument toSignDocument,final XAdESSignatureParameters externalParameters,final TimestampType timestampType){  final TimestampToken timestampToken=generateXAdESContentTimestampAsTimestampToken(toSignDocument,externalParameters,timestampType);  return new InMemoryDocument(timestampToken.getEncoded());}  }
class C{  private void stopStatisticsCollection(){  if (!portStatsCollector.cancel(false)) {    log.error("Could not cancel port stats thread");  } else {    log.warn("Statistics collection thread(s) stopped");  }}  }
class C{  public void decode(int[] received,int twoS) throws ReedSolomonException {  GenericGFPoly poly=new GenericGFPoly(field,received);  int[] syndromeCoefficients=new int[twoS];  boolean noError=true;  for (int i=0; i < twoS; i++) {    int eval=poly.evaluateAt(field.exp(i + field.getGeneratorBase()));    syndromeCoefficients[syndromeCoefficients.length - 1 - i]=eval;    if (eval != 0) {      noError=false;    }  }  if (noError) {    return;  }  GenericGFPoly syndrome=new GenericGFPoly(field,syndromeCoefficients);  GenericGFPoly[] sigmaOmega=runEuclideanAlgorithm(field.buildMonomial(twoS,1),syndrome,twoS);  GenericGFPoly sigma=sigmaOmega[0];  GenericGFPoly omega=sigmaOmega[1];  int[] errorLocations=findErrorLocations(sigma);  int[] errorMagnitudes=findErrorMagnitudes(omega,errorLocations);  for (int i=0; i < errorLocations.length; i++) {    int position=received.length - 1 - field.log(errorLocations[i]);    if (position < 0) {      throw new ReedSolomonException("Bad error location");    }    received[position]=GenericGF.addOrSubtract(received[position],errorMagnitudes[i]);  }}  }
class C{  public void updateVisibleLayers(){  layersPanel.updateVisibleLayers();}  }
class C{  public Object invokeSuper(Object obj,Object[] args) throws Throwable {  try {    init();    FastClassInfo fci=fastClassInfo;    return fci.f2.invoke(fci.i2,obj,args);  } catch (  InvocationTargetException e) {    throw e.getTargetException();  }}  }
class C{  private void midPoint(PointF point,MotionEvent event){  float x=event.getX(0) + event.getX(1);  float y=event.getY(0) + event.getY(1);  point.set(x / 2,y / 2);}  }
class C{  public boolean changeAltitude(double alt){  ReadOnlyVector3 trans=getWorldTranslation();  double z=Landscape.getInstance().getZ(trans.getX(),trans.getY());  if (Double.isNaN(z))   return (false);  location.set(trans);  location.setZ(z + alt);  return (changeLocation(location));}  }
class C{  @Override public void run(){  amIActive=true;  String[] shapefiles=new String[2];  String outputFile;  int progress;  int i, n, FID;  int oneHundredthTotal;  int numRecs;  ShapeType shapeType;  ShapeType outputShapeType=ShapeType.POLYGON;  GeometryFactory factory=new GeometryFactory();  com.vividsolutions.jts.geom.Geometry g1=null;  com.vividsolutions.jts.geom.Geometry g2=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  shapefiles[0]=args[0];  shapefiles[1]=args[1];  outputFile=args[2];  if ((shapefiles[0].length() <= 0) || (shapefiles[1].length() <= 0) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    com.vividsolutions.jts.geom.Geometry[] recJTSGeometries=null;    ArrayList<com.vividsolutions.jts.geom.Geometry> inputGeometryList=new ArrayList<com.vividsolutions.jts.geom.Geometry>();    com.vividsolutions.jts.geom.Geometry outputGeometry=null;    ShapeFile input1=new ShapeFile(shapefiles[0]);    shapeType=input1.getShapeType();    numRecs=input1.getNumberOfRecords();    if (shapeType.getBaseType() == ShapeType.POINT || shapeType.getBaseType() == ShapeType.MULTIPOINT) {      outputShapeType=ShapeType.POINT;    } else     if (shapeType.getBaseType() == ShapeType.POLYLINE && outputShapeType == ShapeType.POLYGON) {      outputShapeType=ShapeType.POLYLINE;    }    oneHundredthTotal=numRecs / 100;    progress=0;    n=0;    for (    ShapeFileRecord record : input1.records) {      if (record.getShapeType() != ShapeType.NULLSHAPE) {        recJTSGeometries=record.getGeometry().getJTSGeometries();        for (int a=0; a < recJTSGeometries.length; a++) {          recJTSGeometries[a].setUserData(record.getRecordNumber());          if (recJTSGeometries[a].isValid()) {            inputGeometryList.add(recJTSGeometries[a]);          } else {            System.out.println(record.getRecordNumber() + " is invalid.");          }        }      }      n++;      if (n >= oneHundredthTotal) {        n=0;        if (cancelOp) {          cancelOperation();          return;        }        progress++;        updateProgress("Loop 1 of " + 2 + ": Reading data:",progress);      }    }    g1=factory.buildGeometry(inputGeometryList);    inputGeometryList.clear();    ShapeFile input2=new ShapeFile(shapefiles[1]);    shapeType=input2.getShapeType();    numRecs=input2.getNumberOfRecords();    if (shapeType.getBaseType() == ShapeType.POINT || shapeType.getBaseType() == ShapeType.MULTIPOINT) {      outputShapeType=ShapeType.POINT;    } else     if (shapeType.getBaseType() == ShapeType.POLYLINE && outputShapeType == ShapeType.POLYGON) {      outputShapeType=ShapeType.POLYLINE;    }    oneHundredthTotal=numRecs / 100;    progress=0;    n=0;    for (    ShapeFileRecord record : input2.records) {      if (record.getShapeType() != ShapeType.NULLSHAPE) {        recJTSGeometries=record.getGeometry().getJTSGeometries();        for (int a=0; a < recJTSGeometries.length; a++) {          recJTSGeometries[a].setUserData(record.getRecordNumber());          if (recJTSGeometries[a].isValid()) {            inputGeometryList.add(recJTSGeometries[a]);          } else {            System.out.println(record.getRecordNumber() + " is invalid.");          }        }      }      n++;      if (n >= oneHundredthTotal) {        n=0;        if (cancelOp) {          cancelOperation();          return;        }        progress++;        updateProgress("Loop 2 of " + 2 + ": Reading data:",progress);      }    }    g2=factory.buildGeometry(inputGeometryList);    inputGeometryList.clear();    updateProgress("Performing operation (progress will not be updated):",-1);    try {      outputGeometry=g1.difference(g2);    } catch (    Exception ex) {      outputGeometry=com.vividsolutions.jts.operation.overlay.snap.SnapOverlayOp.difference(g1,g2);    }    ShapeFile output=null;    AttributeTable reader=input1.getAttributeTable();    int numFields=1 + reader.getFieldCount();    DBFField fields[]=new DBFField[numFields];    fields[0]=new DBFField();    fields[0].setName("FID");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(0);    for (int a=0; a < reader.getFieldCount(); a++) {      DBFField inputField=reader.getField(a);      fields[a + 1]=inputField;      if (inputField.getName().equals("FID")) {        fields[a + 1].setName("PARENT_FID");      }    }    output=new ShapeFile(outputFile,outputShapeType,fields);    output.setProjectionStringFromOtherShapefile(input1);    PreparedGeometry[] tests=new PreparedGeometry[g1.getNumGeometries()];    com.vividsolutions.jts.geom.Geometry[] testGs=new com.vividsolutions.jts.geom.Geometry[g1.getNumGeometries()];    int[] userData=new int[g1.getNumGeometries()];    for (int a=0; a < g1.getNumGeometries(); a++) {      tests[a]=PreparedGeometryFactory.prepare(g1.getGeometryN(a));      userData[a]=Integer.parseInt(g1.getGeometryN(a).getUserData().toString());      testGs[a]=g1.getGeometryN(a);    }    Object[][] attributeTableRecords=new Object[reader.getNumberOfRecords()][numFields];    for (int a=0; a < reader.getNumberOfRecords(); a++) {      Object[] rec=reader.nextRecord();      for (int b=0; b < numFields - 1; b++) {        attributeTableRecords[a][b + 1]=rec[b];      }    }    if (outputGeometry instanceof GeometryCollection) {      int numGeometries=outputGeometry.getNumGeometries();      oneHundredthTotal=(int)(numGeometries / 100.0);      progress=0;      n=0;      FID=0;      int parentRecNum=0;      for (int a=0; a < numGeometries; a++) {        parentRecNum=-99;        com.vividsolutions.jts.geom.Geometry gN=outputGeometry.getGeometryN(a);        if (gN instanceof com.vividsolutions.jts.geom.Point && outputShapeType == ShapeType.POINT) {          for (int m=0; m < tests.length; m++) {            if (tests[m].overlaps(gN) || gN.distance(testGs[m]) < 0.0001) {              parentRecNum=userData[m];              break;            }          }          Coordinate p=gN.getCoordinate();          whitebox.geospatialfiles.shapefile.Point wbGeometry=new whitebox.geospatialfiles.shapefile.Point(p.x,p.y);          FID++;          Object[] rowData=attributeTableRecords[parentRecNum - 1];          rowData[0]=new Double(FID);          output.addRecord(wbGeometry,rowData);        } else         if (gN instanceof LineString && outputShapeType == ShapeType.POLYLINE) {          for (int m=0; m < tests.length; m++) {            if (tests[m].overlaps(gN) || gN.distance(testGs[m]) < 0.0001) {              parentRecNum=userData[m];              break;            }          }          LineString ls=(LineString)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<ShapefilePoint>();          int[] parts={0};          Coordinate[] coords=ls.getCoordinates();          for (i=0; i < coords.length; i++) {            pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.PolyLine wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());          FID++;          Object[] rowData=attributeTableRecords[parentRecNum - 1];          rowData[0]=new Double(FID);          output.addRecord(wbGeometry,rowData);        } else         if (gN instanceof com.vividsolutions.jts.geom.Polygon && outputShapeType == ShapeType.POLYLINE) {          for (int m=0; m < tests.length; m++) {            if (tests[m].contains(gN.getInteriorPoint())) {              parentRecNum=userData[m];              break;            }          }          com.vividsolutions.jts.geom.Polygon p=(com.vividsolutions.jts.geom.Polygon)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<ShapefilePoint>();          int[] parts=new int[p.getNumInteriorRing() + 1];          Coordinate[] coords=p.getExteriorRing().getCoordinates();          if (Topology.isClockwisePolygon(coords)) {            for (i=0; i < coords.length; i++) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          } else {            for (i=coords.length - 1; i >= 0; i--) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          }          for (int b=0; b < p.getNumInteriorRing(); b++) {            parts[b + 1]=pnts.size();            coords=p.getInteriorRingN(b).getCoordinates();            if (Topology.isClockwisePolygon(coords)) {              for (i=coords.length - 1; i >= 0; i--) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            } else {              for (i=0; i < coords.length; i++) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            }          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.PolyLine wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());          FID++;          Object[] rowData=attributeTableRecords[parentRecNum - 1];          rowData[0]=new Double(FID);          output.addRecord(wbGeometry,rowData);        } else         if (gN instanceof com.vividsolutions.jts.geom.Polygon && outputShapeType == ShapeType.POLYGON) {          for (int m=0; m < tests.length; m++) {            if (tests[m].contains(gN.getInteriorPoint())) {              parentRecNum=userData[m];              break;            }          }          com.vividsolutions.jts.geom.Polygon p=(com.vividsolutions.jts.geom.Polygon)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<>();          int[] parts=new int[p.getNumInteriorRing() + 1];          Coordinate[] coords=p.getExteriorRing().getCoordinates();          if (Topology.isClockwisePolygon(coords)) {            for (i=0; i < coords.length; i++) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          } else {            for (i=coords.length - 1; i >= 0; i--) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          }          for (int b=0; b < p.getNumInteriorRing(); b++) {            parts[b + 1]=pnts.size();            coords=p.getInteriorRingN(b).getCoordinates();            if (Topology.isClockwisePolygon(coords)) {              for (i=coords.length - 1; i >= 0; i--) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            } else {              for (i=0; i < coords.length; i++) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            }          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.Polygon wbGeometry=new whitebox.geospatialfiles.shapefile.Polygon(parts,pl.getPointsArray());          FID++;          Object[] rowData=attributeTableRecords[parentRecNum - 1];          rowData[0]=new Double(FID);          output.addRecord(wbGeometry,rowData);        } else {        }        n++;        if (n >= oneHundredthTotal) {          n=0;          if (cancelOp) {            cancelOperation();            return;          }          progress++;          updateProgress("Saving output file",progress);        }      }    } else {      showFeedback("An error was encountered when saving the output file.");      return;    }    output.write();    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public DoubleVector plus(DoubleVector v){  return copy().plusEquals(v);}  }
class C{  public int optInt(String key,int defaultValue){  try {    return this.getInt(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  private void copyRawResource(final int rawResId,final File dest){  try {    final InputStream is=getResources().openRawResource(rawResId);    final FileOutputStream fos=new FileOutputStream(dest);    final byte[] buf=new byte[1024];    int read;    try {      while ((read=is.read(buf)) > 0)       fos.write(buf,0,read);    }  finally {      is.close();      fos.close();    }  } catch (  final IOException e) {    DebugLogger.e(TAG,"Error while copying HEX file " + e.toString());  }}  }
class C{  public double compute(int... dataset){  return computeInPlace(intsToDoubles(dataset));}  }
class C{  @Override protected boolean containsClassReference(String className){  boolean result=false;  for (Iterator<File> iterator=sourceFolders.iterator(); !result && iterator.hasNext(); ) {    File sourceFolder=(File)iterator.next();    String mainClassName=className.split("\\$")[0];    File classFile=new File(sourceFolder,mainClassName.replace('.',File.separatorChar) + ".java");    result=(classFile.exists() && classFile.isFile());  }  return result;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:17.714 -0400",hash_original_method="B75985DBE9C86276C11F49FADAAE7988",hash_generated_method="E604835DDFDA05A5751CD0F5EBE56E60") private E awaitMatch(Node s,Node pred,E e,boolean timed,long nanos){  final long deadline=timed ? System.nanoTime() + nanos : 0L;  Thread w=Thread.currentThread();  int spins=-1;  ThreadLocalRandom randomYields=null;  for (; ; ) {    Object item=s.item;    if (item != e) {      s.forgetContents();      return LinkedTransferQueue.<E>cast(item);    }    if ((w.isInterrupted() || (timed && nanos <= 0)) && s.casItem(e,s)) {      unsplice(pred,s);      return e;    }    if (spins < 0) {      if ((spins=spinsFor(pred,s.isData)) > 0)       randomYields=ThreadLocalRandom.current();    } else     if (spins > 0) {      --spins;      if (randomYields.nextInt(CHAINED_SPINS) == 0)       Thread.yield();    } else     if (s.waiter == null) {      s.waiter=w;    } else     if (timed) {      nanos=deadline - System.nanoTime();      if (nanos > 0L)       LockSupport.parkNanos(this,nanos);    } else {      LockSupport.park(this);    }  }}  }
class C{  public static Object fromXml(Reader reader){  return xstream.fromXML(reader);}  }
class C{  public void componentResized(final ComponentEvent arg0){  workspace.setWorkspaceChanged(true);}  }
class C{  public Node nextSibling(){  return siblingAtOffset(+1);}  }
class C{  public static GridField[] createFields(Properties ctx,int WindowNo,int TabNo,int AD_Tab_ID){  ArrayList<GridFieldVO> listVO=new ArrayList<GridFieldVO>();  int AD_Window_ID=0;  boolean readOnly=false;  String sql=GridFieldVO.getSQL(ctx);  PreparedStatement pstmt=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,AD_Tab_ID);    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      GridFieldVO vo=GridFieldVO.create(ctx,WindowNo,TabNo,AD_Window_ID,AD_Tab_ID,readOnly,rs);      listVO.add(vo);    }    rs.close();    pstmt.close();    pstmt=null;  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);  }  try {    if (pstmt != null)     pstmt.close();    pstmt=null;  } catch (  Exception e) {    pstmt=null;  }  GridField[] retValue=new GridField[listVO.size()];  for (int i=0; i < listVO.size(); i++)   retValue[i]=new GridField((GridFieldVO)listVO.get(i));  return retValue;}  }
class C{  public void testInvokeAny4() throws Throwable {  CountDownLatch latch=new CountDownLatch(1);  ExecutorService e=new ForkJoinPool(1);  PoolCleaner cleaner=null;  try {    cleaner=cleaner(e);    List<Callable<String>> l=new ArrayList<Callable<String>>();    l.add(latchAwaitingStringTask(latch));    l.add(null);    try {      e.invokeAny(l);      shouldThrow();    } catch (    NullPointerException success) {    }    latch.countDown();  }  finally {    if (cleaner != null) {      cleaner.close();    }  }}  }
class C{  public JavaModelStatus(int code,IJavaElement element,IPath path,String string){  this(code,new IJavaElement[]{element});  this.path=path;  this.string=string;}  }
class C{  private void sendAnswer(HttpServletResponse response,String answer) throws IOException {  response.setHeader("Cache-Control","no-cache");  response.setContentType("text/html; charset=UTF-8");  PrintWriter out=response.getWriter();  out.print(answer);  out.flush();}  }
class C{  @Override protected String toString(File obj){  return obj.getAbsolutePath();}  }
class C{  private void writeUpdatedDeviceToStorage(Device device){  try {    cntDeviceStrored.updateCounterWithFlush();    DeviceSyncRepresentation storeDevice=new DeviceSyncRepresentation(device);    storeClient.put(storeDevice.getKey(),storeDevice);  } catch (  ObsoleteVersionException e) {  }catch (  SyncException e) {    cntSyncException.updateCounterWithFlush();    logger.error("Could not write device " + device + " to sync store:",e);  }}  }
class C{  public void replaceTweet(Tweet tweet){  int index=mDataSetManager.setItem(tweet);  if (index > -1) {    notifyItemChanged(index);  }}  }
class C{  public double[] offsetEastingNorthing(double[] en){  return offsetEastingNorthing(en[0],en[1]);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:28.821 -0500",hash_original_method="1F6E08AD78395DDC36B17C9725479A05",hash_generated_method="1CB58370D9C0D265BF2B44F328DE8743") private static HttpHost[] toChain(HttpHost proxy){  if (proxy == null)   return null;  return new HttpHost[]{proxy};}  }
class C{  private DBObject saveEntity(final Entity entity){  return new BasicDBObject().append("text",entity.getCoveredText()).append("type",entity.getTypeName());}  }
class C{  public MLDouble(String name,double[][] vals){  this(name,double2DToDouble(vals),vals.length);}  }
class C{  private SerializerReadImage(){}  }
class C{  private void drawSquare(Canvas canvas,Paint paint,float x,float y){  canvas.drawRect(x - size,y - size,x + size,y + size,paint);}  }
class C{  public ArrayIntCompressed(int size,int leadingClearBits,int trailingClearBits){  init(size,BIT_LENGTH - leadingClearBits - trailingClearBits,trailingClearBits);}  }
class C{  public static void escapeCsv(Writer out,String str) throws IOException {  if (StringUtils.containsNone(str,CSV_SEARCH_CHARS)) {    if (str != null) {      out.write(str);    }    return;  }  out.write(CSV_QUOTE);  for (int i=0; i < str.length(); i++) {    char c=str.charAt(i);    if (c == CSV_QUOTE) {      out.write(CSV_QUOTE);    }    out.write(c);  }  out.write(CSV_QUOTE);}  }
class C{  protected T_State dispatch(){  if (isStateEngine()) {    return currentState;  } else   if (hasSuperState()) {    return superState;  } else {    throw new IllegalStateException("Unhandled event detected.");  }}  }
class C{  public IdentityIntMap(int capacity){  _keys=new Object[capacity];  _values=new int[capacity];  _prime=getBiggestPrime(_keys.length);  _size=0;}  }
class C{  public ExtractTempRefactoring(ICompilationUnit unit,int selectionStart,int selectionLength){  Assert.isTrue(selectionStart >= 0);  Assert.isTrue(selectionLength >= 0);  fSelectionStart=selectionStart;  fSelectionLength=selectionLength;  fCu=unit;  fCompilationUnitNode=null;  fReplaceAllOccurrences=true;  fDeclareFinal=false;  fTempName="";  fLinkedProposalModel=null;  fCheckResultForCompileProblems=true;}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.DOUBLE_LITERAL___TO_DOUBLE:    return toDouble();case N4JSPackage.DOUBLE_LITERAL___GET_VALUE_AS_STRING:  return getValueAsString();}return super.eInvoke(operationID,arguments);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:26.989 -0500",hash_original_method="805CDF65FA82242C2D4B7EB4CBDDF0ED",hash_generated_method="9E8F62F096B91DECF20E03A28B8895A2") public void abort() throws IOException {  completeEdit(this,false);}  }
class C{  public synchronized int failedNodesCount(){  return failedNodesCnt;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:12.594 -0500",hash_original_method="14BDAF38F8E4DBDB46D640654A4FD3CD",hash_generated_method="EE0E5D5A8B29129E0A019FCBD0E7A8E6") static boolean containsIgnoreCaseTrimmed(CharArrayBuffer buffer,int beginIndex,final String str){  int len=buffer.length();  char[] chars=buffer.buffer();  while (beginIndex < len && HTTP.isWhitespace(chars[beginIndex])) {    beginIndex++;  }  int size=str.length();  boolean ok=len >= beginIndex + size;  for (int j=0; ok && (j < size); j++) {    char a=chars[beginIndex + j];    char b=str.charAt(j);    if (a != b) {      a=toLower(a);      b=toLower(b);      ok=a == b;    }  }  return ok;}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected void printDefaultValue(String defaultValue,int typeCode,StringBuilder ddl){  boolean isNull=false;  if (defaultValue == null || defaultValue.equalsIgnoreCase("null")) {    isNull=true;  }  String defaultValueStr=mapDefaultValue(defaultValue,typeCode);  boolean shouldUseQuotes=!isNull && !TypeMap.isNumericType(typeCode) && !(TypeMap.isDateTimeType(typeCode) && (defaultValueStr.toUpperCase().startsWith("TO_DATE(") || defaultValueStr.toUpperCase().startsWith("SYSDATE") || defaultValueStr.toUpperCase().startsWith("SYSTIMESTAMP")|| defaultValueStr.toUpperCase().startsWith("CURRENT_TIMESTAMP")|| defaultValueStr.toUpperCase().startsWith("CURRENT_TIME")|| defaultValueStr.toUpperCase().startsWith("CURRENT_DATE")|| defaultValueStr.toUpperCase().startsWith("CURRENT_USER")|| defaultValueStr.toUpperCase().startsWith("USER")|| defaultValueStr.toUpperCase().startsWith("SYSTEM_USER")|| defaultValueStr.toUpperCase().startsWith("SESSION_USER")|| defaultValueStr.toUpperCase().startsWith("DATE '")|| defaultValueStr.toUpperCase().startsWith("TIME '")|| defaultValueStr.toUpperCase().startsWith("TIMESTAMP '")|| defaultValueStr.toUpperCase().startsWith("INTERVAL '")))&& !(defaultValueStr.toUpperCase().startsWith("N'") && defaultValueStr.endsWith("'"));  if (shouldUseQuotes) {    ddl.append(databaseInfo.getValueQuoteToken());    ddl.append(escapeStringValue(defaultValueStr));    ddl.append(databaseInfo.getValueQuoteToken());  } else {    ddl.append(defaultValueStr);  }}  }
class C{  public Short toShort(){  return Short.valueOf(shortValue());}  }
class C{  public static InlineQueryResultCachedMpeg4GifBuilder builder(){  return new InlineQueryResultCachedMpeg4GifBuilder();}  }
class C{  public Builder writeBufferLowWaterMark(int writeBufferLowWaterMark){  this.writeBufferLowWaterMark=writeBufferLowWaterMark;  return this;}  }
class C{  public GraphicsNodeChangeEvent(GraphicsNode source,int id){  super(source,id);}  }
class C{  public void testInputAvailable() throws Exception {  File f=this.initFile("testInputAvailable");  FileOutputStream fos=new FileOutputStream(f);  DataOutputStream dos=new DataOutputStream(fos);  BufferedFileDataInput bfdi=new BufferedFileDataInput(f);  for (int i=0; i < 100; i++) {    dos.writeInt(i);    dos.flush();    assertEquals("available bytes: " + i,4,bfdi.available());    assertEquals("value of int: " + i,i,bfdi.readInt());  }  dos.close();  bfdi.close();}  }
class C{  public static X509ExtensionSet load(InputStream is) throws X509ExtensionSetLoadException, IOException {  DataInputStream dis=null;  try {    dis=new DataInputStream(is);    long magicNumber=dis.readLong();    if (magicNumber != FILE_MAGIC_NUMBER) {      throw new X509ExtensionSetLoadException(res.getString("NoLoadX509ExtensionSet.BadMagicNumber.exception.message"));    }    int version=dis.readInt();    if (version != FILE_VERSION) {      throw new X509ExtensionSetLoadException(res.getString("NoLoadX509ExtensionSet.WrongVersion.exception.message"));    }    X509ExtensionSet x509ExtensionSet=new X509ExtensionSet();    x509ExtensionSet.criticalExtensions=loadExtensions(dis);    x509ExtensionSet.nonCriticalExtensions=loadExtensions(dis);    return x509ExtensionSet;  } catch (  EOFException ex) {    throw new X509ExtensionSetLoadException(res.getString("NoLoadX509ExtensionSet.NotEnoughBytes.exception.message"));  } finally {    IOUtils.closeQuietly(dis);  }}  }
class C{  public SearchableEnvironmentRequestor(ISearchRequestor requestor,ICompilationUnit unitToSkip,IJavaProject project,NameLookup nameLookup){  this.requestor=requestor;  this.unitToSkip=unitToSkip;  this.project=project;  this.nameLookup=nameLookup;  this.checkAccessRestrictions=!JavaCore.IGNORE.equals(project.getOption(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE,true)) || !JavaCore.IGNORE.equals(project.getOption(JavaCore.COMPILER_PB_DISCOURAGED_REFERENCE,true));}  }
class C{  private void addGroupChatMessage(String chatId,ChatMessage msg,Direction direction,Set<ContactId> recipients,Status status,ReasonCode reasonCode){  String msgId=msg.getMessageId();  ContactId contact=msg.getRemoteContact();  if (sLogger.isActivated()) {    sLogger.debug("Add group chat message; chatId=" + chatId + ", msg="+ msgId+ ", dir="+ direction+ ", contact="+ contact+ ".");  }  ContentValues values=new ContentValues();  values.put(MessageData.KEY_CHAT_ID,chatId);  values.put(MessageData.KEY_MESSAGE_ID,msgId);  if (contact != null) {    values.put(MessageData.KEY_CONTACT,contact.toString());  }  values.put(MessageData.KEY_DIRECTION,direction.toInt());  values.put(MessageData.KEY_READ_STATUS,ReadStatus.UNREAD.toInt());  values.put(MessageData.KEY_STATUS,status.toInt());  values.put(MessageData.KEY_REASON_CODE,reasonCode.toInt());  values.put(MessageData.KEY_MIME_TYPE,msg.getMimeType());  values.put(MessageData.KEY_CONTENT,msg.getContent());  values.put(MessageData.KEY_TIMESTAMP,msg.getTimestamp());  values.put(MessageData.KEY_TIMESTAMP_SENT,msg.getTimestampSent());  values.put(MessageData.KEY_TIMESTAMP_DELIVERED,0);  values.put(MessageData.KEY_TIMESTAMP_DISPLAYED,0);  values.put(MessageData.KEY_DELIVERY_EXPIRATION,0);  values.put(MessageData.KEY_EXPIRED_DELIVERY,0);  mLocalContentResolver.insert(MessageData.CONTENT_URI,values);  if (Direction.OUTGOING == direction) {    try {      GroupDeliveryInfo.Status deliveryStatus=GroupDeliveryInfo.Status.NOT_DELIVERED;      if (mRcsSettings.isAlbatrosRelease()) {        deliveryStatus=GroupDeliveryInfo.Status.UNSUPPORTED;      }      for (      ContactId recipient : recipients) {        mGroupChatDeliveryInfoLog.addGroupChatDeliveryInfoEntry(chatId,recipient,msgId,deliveryStatus,GroupDeliveryInfo.ReasonCode.UNSPECIFIED,0,0);      }    } catch (    Exception e) {      mLocalContentResolver.delete(Uri.withAppendedPath(MessageData.CONTENT_URI,msgId),null,null);      mLocalContentResolver.delete(Uri.withAppendedPath(GroupDeliveryInfoData.CONTENT_URI,msgId),null,null);      if (sLogger.isActivated()) {        sLogger.warn("Group chat message with msgId '" + msgId + "' could not be added to database!");      }    }  }}  }
class C{  public void assertDocsAndPositionsEnum(PostingsEnum leftDocs,PostingsEnum rightDocs) throws Exception {  assertNotNull(leftDocs);  assertNotNull(rightDocs);  assertEquals(-1,leftDocs.docID());  assertEquals(-1,rightDocs.docID());  int docid;  while ((docid=leftDocs.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {    assertEquals(docid,rightDocs.nextDoc());    int freq=leftDocs.freq();    assertEquals(freq,rightDocs.freq());    for (int i=0; i < freq; i++) {      assertEquals(leftDocs.nextPosition(),rightDocs.nextPosition());    }  }  assertEquals(DocIdSetIterator.NO_MORE_DOCS,rightDocs.nextDoc());}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) public <T extends GroupNodeBase>T buildGroup(final T groupNode){  assertValid();  invalid=true;  final boolean isUnion=groupNode instanceof UnionNode;  if (isUnion) {    for (    IGroupMemberNode child : children) {      if (child instanceof JoinGroupNode) {        groupNode.addChild(child);      } else       if (child instanceof UnionNode) {        final UnionNode childUnion=(UnionNode)child;        for (        IGroupMemberNode child2 : childUnion) {          groupNode.addChild(child2);        }      } else {        groupNode.addChild(new JoinGroupNode(child));      }    }  } else {    for (    IGroupMemberNode child : children) {      if (child instanceof QuadData && groupNode instanceof JoinGroupNode) {        final JoinGroupNode newGroup=new JoinGroupNode();        ((QuadData)child).flatten(newGroup);        final StatementPatternNode sp=(StatementPatternNode)newGroup.get(0);        final TermNode context=(TermNode)sp.get(3);        assert context != null;        assert sp.getScope() == Scope.NAMED_CONTEXTS;        newGroup.setContext(context);        groupNode.addChild(newGroup);      } else {        groupNode.addChild(child);      }    }  }  return groupNode;}  }
class C{  public void updateAlertDefinitions(StatAlertDefinition[] alertDefs,int actionCode){  throw new UnsupportedOperationException(LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());}  }
class C{  private void doGenSecretKey(String alias,String keyAlgName,int keysize) throws Exception {  if (alias == null) {    alias=keyAlias;  }  if (keyStore.containsAlias(alias)) {    MessageFormat form=new MessageFormat(rb.getString("Secret.key.not.generated.alias.alias.already.exists"));    Object[] source={alias};    throw new Exception(form.format(source));  }  boolean useDefaultPBEAlgorithm=true;  SecretKey secKey=null;  if (keyAlgName.toUpperCase(Locale.ENGLISH).startsWith("PBE")) {    SecretKeyFactory factory=SecretKeyFactory.getInstance("PBE");    secKey=factory.generateSecret(new PBEKeySpec(promptForCredential()));    if (!"PBE".equalsIgnoreCase(keyAlgName)) {      useDefaultPBEAlgorithm=false;    }    if (verbose) {      MessageFormat form=new MessageFormat(rb.getString("Generated.keyAlgName.secret.key"));      Object[] source={useDefaultPBEAlgorithm ? "PBE" : secKey.getAlgorithm()};      System.err.println(form.format(source));    }  } else {    KeyGenerator keygen=KeyGenerator.getInstance(keyAlgName);    if (keysize == -1) {      if ("DES".equalsIgnoreCase(keyAlgName)) {        keysize=56;      } else       if ("DESede".equalsIgnoreCase(keyAlgName)) {        keysize=168;      } else {        throw new Exception(rb.getString("Please.provide.keysize.for.secret.key.generation"));      }    }    keygen.init(keysize);    secKey=keygen.generateKey();    if (verbose) {      MessageFormat form=new MessageFormat(rb.getString("Generated.keysize.bit.keyAlgName.secret.key"));      Object[] source={new Integer(keysize),secKey.getAlgorithm()};      System.err.println(form.format(source));    }  }  if (keyPass == null) {    keyPass=promptForKeyPass(alias,null,storePass);  }  if (useDefaultPBEAlgorithm) {    keyStore.setKeyEntry(alias,secKey,keyPass,null);  } else {    keyStore.setEntry(alias,new KeyStore.SecretKeyEntry(secKey),new KeyStore.PasswordProtection(keyPass,keyAlgName,null));  }}  }
class C{  public void testThreeChars() throws Exception {  CharacterRunAutomaton single=new CharacterRunAutomaton(new RegExp("...").toAutomaton());  Analyzer a=new MockAnalyzer(random(),single,false);  assertAnalyzesTo(a,"foobar",new String[]{"foo","bar"},new int[]{0,3},new int[]{3,6});  assertTokenStreamContents(a.tokenStream("bogus","fooba"),new String[]{"foo"},new int[]{0},new int[]{3},new int[]{1},new Integer(5));  checkRandomData(random(),a,100);}  }
class C{  public CParentSelectionUpdater(final JTree tree,final DefaultMutableTreeNode parent){  Preconditions.checkNotNull(tree,"IE01293: Tree argument can not be null");  Preconditions.checkNotNull(parent,"IE01294: Parent argument can not be null");  m_tree=tree;  m_parent=parent;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  int mediaMask=DBObject.MEDIA_MASK_ALL;  if (curNumberOfParameters == 1) {    mediaMask=getMediaMask(stack);  }  return Wizard.getInstance().getAllPeople(mediaMask);}  }
class C{  public void update(){  if (this.isRunning) {    if (this.timeRunning < this.duration && this.timeRunning > 0) {      this.timeRunning+=this.runDirection;    } else {      if (this.timeRunning >= this.duration) {        this.timeRunning=this.duration;      } else       if (this.timeRunning <= 0) {        this.timeRunning=0;      }      this.timeIdle=0;      this.isRunning=false;    }  } else   if (this.isOperator) {    if (this.timeIdle < this.minIdleTime) {      this.timeIdle++;    } else {      if (this.rand.nextInt(this.startProbability) == 0) {        this.start();        this.entity.worldObj.setEntityState(this.entity,(byte)(this.entity.getOffsetEntityState() + this.id));      }    }  }}  }
class C{  public static BufferedImage createPattern(String pattern,float scale,Color lineColor){  return createPattern(pattern,defaultDimension,scale,lineColor,defaultBackColor);}  }
class C{  public TlsMasterSecretParameterSpec(SecretKey premasterSecret,int majorVersion,int minorVersion,byte[] clientRandom,byte[] serverRandom,String prfHashAlg,int prfHashLength,int prfBlockSize){  if (premasterSecret == null) {    throw new NullPointerException("premasterSecret must not be null");  }  this.premasterSecret=premasterSecret;  this.majorVersion=checkVersion(majorVersion);  this.minorVersion=checkVersion(minorVersion);  this.clientRandom=clientRandom.clone();  this.serverRandom=serverRandom.clone();  this.prfHashAlg=prfHashAlg;  this.prfHashLength=prfHashLength;  this.prfBlockSize=prfBlockSize;}  }
class C{  private void _serializeDate(Date date,StringBuilder sb) throws ConverterException {  _serializeDateTime(new DateTimeImpl(date),sb);}  }
class C{  public void addDimensionToBookTypeAndName(int dim,int bookType,String name){  addDimensionToBookType(dim,bookType);  addDimensionToName(dim,name);}  }
class C{  public void flush() throws IOException {  out.flush();}  }
class C{  public void init(PrivateKey key){  try {    if (signature != null) {      signature.initSign(key);    } else     if (cipher != null) {      cipher.init(Cipher.ENCRYPT_MODE,key);    }  } catch (  InvalidKeyException e) {    throw new AlertException(AlertProtocol.BAD_CERTIFICATE,new SSLException("init - invalid private key",e));  }}  }
class C{  public void visitLeafBlockValues(int nodeID,IntersectState state) throws IOException {  int leafID=nodeID - leafNodeOffset;  int count=readDocIDs(state.in,leafBlockFPs[leafID],state.scratchDocIDs);  visitDocValues(state.commonPrefixLengths,state.scratchPackedValue,state.in,state.scratchDocIDs,count,state.visitor);}  }
class C{  public static String quoteStringSQL(String s){  if (s == null) {    return "NULL";  }  int length=s.length();  StringBuilder buff=new StringBuilder(length + 2);  buff.append('\'');  for (int i=0; i < length; i++) {    char c=s.charAt(i);    if (c == '\'') {      buff.append(c);    } else     if (c < ' ' || c > 127) {      return "STRINGDECODE(" + quoteStringSQL(javaEncode(s)) + ")";    }    buff.append(c);  }  buff.append('\'');  return buff.toString();}  }
class C{  @Override public final boolean push(final N n){  int spin=0;  for (; ; ) {    final long writeLock=seqLock.tryWriteLock();    if (writeLock > 0L) {      try {        final int stackTop=this.stackTop.get();        if (size > stackTop) {          try {            stack.set(stackTop,n);            stackNotEmptyCondition.signal();            return true;          }  finally {            this.stackTop.set(stackTop + 1);          }        } else {          return false;        }      }  finally {        seqLock.unlock(writeLock);      }    }    spin=Condition.progressiveYield(spin);  }}  }
class C{  public ConfigurationException(List<LocalizedText> messages){  super(messages);}  }
class C{  public boolean isReadOnly(){  return readOnly;}  }
class C{  @Override public void endElement(String uri,String localName,String qName) throws SAXException {  xmlTags.pop();  if (insideEntryTitle) {    insideEntryTitle=false;    System.out.println();  }}  }
class C{  public static String hashPassword(String username,String password){  return Text.md5(Text.md5(username + password) + SALT);}  }
class C{  public void addCapability(String capability){  capabilities.add(capability);}  }
class C{  private void flushLeftOver(CharBuffer input) throws IOException {  if (!_hasLeftOver) {    return;  }  for (; ; ) {    if (input != null && input.hasRemaining()) {      _leftOverBuffer.put(input.get());    }    _leftOverBuffer.flip();    CoderResult cr=_encoder.encode(_leftOverBuffer,_buffer,input == null);    if (cr.isUnderflow()) {      if (_leftOverBuffer.hasRemaining()) {        _leftOverBuffer.compact();      } else {        break;      }    }    if (cr.isOverflow()) {      flushBufferToWriter();    }  }  _hasLeftOver=false;  _leftOverBuffer.clear();}  }
class C{  public boolean isAbstract(){  return Modifier.isAbstract(this.getModifiers());}  }
class C{  protected SVGOMSolidColorElement(){}  }
class C{  public void link(String here){  link(here,null);}  }
class C{  String readMonth(String source,int ofs,String token,boolean adjacent){  if (token.length() < 3) {    if (adjacent) {      return source.substring(ofs,ofs + token.length());    }    if (isNumeric(source.charAt(0))) {      return readNumber(source,ofs,token,adjacent);    }  }  int i=findEndText(source,ofs);  if (i == -1) {    i=source.length();  }  String fragment=source.substring(ofs,i);  for (  String month : getDateFormatSymbols().getMonths()) {    if (fragment.equalsIgnoreCase(month)) {      return source.substring(ofs,ofs + month.length());    }  }  for (  String month : getDateFormatSymbols().getShortMonths()) {    if (fragment.equalsIgnoreCase(month)) {      return source.substring(ofs,ofs + month.length());    }  }  return null;}  }
class C{  public void checkOnEliminar(String[] ids) throws ValoracionActionNotAllowedException {  Collection valoraciones=getValoraciones(ids);  for (Iterator itValoracion=valoraciones.iterator(); itValoracion.hasNext(); ) {    ValoracionSerieVO valoracionVO=(ValoracionSerieVO)itValoracion.next();    checkOnEliminar(valoracionVO);  }}  }
class C{  public static String toString(Object object,ToStringStyle style){  return toString(object,style,false,false,null);}  }
class C{  public static TabularComparison serializableInstance(){  return new TabularComparison(DagWrapper.serializableInstance(),DagWrapper.serializableInstance(),new Parameters());}  }
class C{  protected CCIntervalAction(float d){  super(d);  if (duration == 0)   duration=ccMacros.FLT_EPSILON;  elapsed=0.0f;  firstTick=true;}  }
class C{  public boolean matches(String s){  if (m_SearchString.length() == 0)   return true;  if (m_RegExp)   return m_Pattern.matcher(s).matches(); else   return s.toLowerCase().contains(m_SearchString);}  }
class C{  Map<VolumeInfo,VPlexStorageVolumeInfo> findStorageVolumes(List<VolumeInfo> nativeVolumeInfoList,boolean discoveryRequired,List<VPlexClusterInfo> clusterInfoList) throws VPlexApiException {  Map<VolumeInfo,VPlexStorageVolumeInfo> storageVolumeInfoMap=null;  VPlexApiDiscoveryManager discoveryMgr=_vplexApiClient.getDiscoveryManager();  if (discoveryRequired) {    s_logger.info("Storage volume discovery is required.");    int retryCount=0;    while (++retryCount <= VPlexApiConstants.FIND_STORAGE_VOLUME_RETRY_COUNT) {      try {        s_logger.info("Executing storage volume discovery try {} of {}",retryCount,VPlexApiConstants.FIND_STORAGE_VOLUME_RETRY_COUNT);        List<String> storageSystemGuids=new ArrayList<String>();        for (        VolumeInfo nativeVolumeInfo : nativeVolumeInfoList) {          String storageSystemGuid=nativeVolumeInfo.getStorageSystemNativeGuid();          if (!storageSystemGuids.contains(storageSystemGuid)) {            s_logger.info("Discover storage volumes on array {}",storageSystemGuid);            storageSystemGuids.add(storageSystemGuid);          }        }        discoveryMgr.rediscoverStorageSystems(storageSystemGuids);        s_logger.info("Discovery completed");        clusterInfoList.addAll(discoveryMgr.getClusterInfo(false,true));        s_logger.info("Retrieved storage volume info for VPlex clusters");        storageVolumeInfoMap=discoveryMgr.findStorageVolumes(nativeVolumeInfoList,clusterInfoList);        s_logger.info("Found storage volumes to use for virtual volume");        break;      } catch (      VPlexApiException vae) {        if (retryCount == VPlexApiConstants.FIND_STORAGE_VOLUME_RETRY_COUNT) {          throw vae;        }        clusterInfoList.clear();        VPlexApiUtils.pauseThread(VPlexApiConstants.FIND_STORAGE_VOLUME_SLEEP_TIME_MS);      }    }  } else {    s_logger.info("Storage volume discovery is not required.");    if (clusterInfoList.isEmpty()) {      clusterInfoList.addAll(discoveryMgr.getClusterInfo(false,true));      s_logger.info("Retrieved storage volume info for VPlex clusters");    }    storageVolumeInfoMap=discoveryMgr.findStorageVolumes(nativeVolumeInfoList,clusterInfoList);    s_logger.info("Found storage volumes");  }  return storageVolumeInfoMap;}  }
class C{  public static void sync(SolrCore core,List<String> replicas,int nUpdates){  ShardHandlerFactory shardHandlerFactory=core.getCoreDescriptor().getCoreContainer().getShardHandlerFactory();  ShardHandler shardHandler=shardHandlerFactory.getShardHandler();  for (  String replica : replicas) {    ShardRequest sreq=new ShardRequest();    sreq.shards=new String[]{replica};    sreq.params=new ModifiableSolrParams();    sreq.params.set("qt","/get");    sreq.params.set("distrib",false);    sreq.params.set("getVersions",nUpdates);    shardHandler.submit(sreq,replica,sreq.params);  }  for (  String replica : replicas) {    ShardResponse srsp=shardHandler.takeCompletedOrError();  }}  }
class C{  private int handleL(String value,DoubleMetaphoneResult result,int index){  if (charAt(value,index + 1) == 'L') {    if (conditionL0(value,index)) {      result.appendPrimary('L');    } else {      result.append('L');    }    index+=2;  } else {    index++;    result.append('L');  }  return index;}  }
class C{  public LocalResult(Session session,Expression[] expressions,int visibleColumnCount){  this.session=session;  if (session == null) {    this.maxMemoryRows=Integer.MAX_VALUE;  } else {    this.maxMemoryRows=session.getDatabase().getMaxMemoryRows();  }  rows=New.arrayList(20);  this.visibleColumnCount=visibleColumnCount;  rowId=-1;  this.expressions=expressions;}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,scrollRange,0,DEFAULT_OVERSCROLL_SCALE,isTouchEvent);}  }
class C{  public L fire(){  return proxy;}  }
class C{  protected String formatDelta(long deltaInMillis){  StringBuilder sb=new StringBuilder();  if (deltaInMillis < 0) {    sb.append("-");  }  final long abs=Math.abs(deltaInMillis);  final long millis=abs % SECOND;  final long seconds=(abs % MINUTE) / SECOND;  final long minutes=(abs % HOUR) / MINUTE;  final long hours=(long)Math.floor(((double)abs) / HOUR);  if (hours > 3) {    sb.append(hours).append("h");  } else   if (hours > 0) {    sb.append(hours).append("h");    if (minutes > 0) {      sb.append(" ").append(minutes).append("m");    }  } else   if (minutes > 4) {    sb.append(minutes).append("m");  } else   if (minutes > 0) {    sb.append(minutes).append("m");    if (seconds > 0) {      sb.append(" ").append(seconds).append("s");    }  } else   if (seconds > 3) {    sb.append(seconds).append("s");  } else   if (seconds > 0) {    sb.append(seconds);    if (millis != 0) {      final String s=Long.toString(Math.round((double)millis / 100));      sb.append(",").append(s);    }    sb.append("s");  } else {    sb.append(millis).append("ms");  }  return sb.toString();}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case ExpressionsPackage.PARENTHESIZED_EXPRESSION__EXPRESSION:    return basicSetExpression(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public boolean isShapingOverrideAllowed(){  return shapingOverrideAllowed;}  }
class C{  @Override public void show(Component invoker,int x,int y){  super.show(invoker,x,y);  java.awt.Point location=getLocationOnScreen();  java.awt.Dimension screenSize=getToolkit().getScreenSize();  int maxWidth=(int)(screenSize.getWidth() - location.getX());  int maxHeight=(int)(screenSize.getHeight() - location.getY());  Dimension scrollerSize=m_scroller.getPreferredSize();  int height=(int)scrollerSize.getHeight();  int width=(int)scrollerSize.getWidth();  if (width > maxWidth) {    width=maxWidth;  }  if (height > maxHeight) {    height=maxHeight;  }  m_scroller.setPreferredSize(new Dimension(width,height));  revalidate();  pack();}  }
class C{  void writeSource(PrintWriter out){  for (  ClassObj c : classes.values()) {    out.println("/* " + c.className + " */");    for (    Statement s : c.nativeCode) {      out.println(s.asString());    }    for (    FieldObj f : c.staticFields.values()) {      StringBuilder buff=new StringBuilder();      if (f.isFinal) {        buff.append("const ");      }      buff.append(f.type.asString());      buff.append(" ").append(toC(c.className + "." + f.name));      if (f.value != null) {        buff.append(" = ").append(f.value.asString());      }      buff.append(";");      out.println(buff.toString());    }    for (    ArrayList<MethodObj> list : c.methods.values()) {      for (      MethodObj m : list) {        if (m.isIgnore) {          continue;        }        if (m.isStatic) {          out.print(m.returnType.asString() + " " + toC(c.className + "_" + m.name)+ "(");        } else         if (m.isConstructor) {          out.print(toC(c.className) + "::" + toC(c.className)+ "(");        } else {          out.print(m.returnType.asString() + " " + toC(c.className)+ "::"+ m.name+ "(");        }        int i=0;        for (        FieldObj p : m.parameters.values()) {          if (i > 0) {            out.print(", ");          }          out.print(p.type.asString() + " " + p.name);          i++;        }        out.println(") {");        if (m.isConstructor) {          for (          FieldObj f : c.instanceFields.values()) {            out.print("    ");            out.print("this->" + f.name);            out.print(" = " + f.value.asString());            out.println(";");          }        }        if (m.block != null) {          m.block.setMethod(m);          out.print(m.block.asString());        }        out.println("}");        out.println();      }    }  }}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.WITH_STATEMENT___APPLIES_ONLY_TO_BLOCK_SCOPED_ELEMENTS:    return appliesOnlyToBlockScopedElements();}return super.eInvoke(operationID,arguments);}  }
class C{  public void tagJPEGTables(byte[] jpegEncodingData) throws IOException {  startTag(SWFConstants.TAG_JPEGTABLES,true);  out.write(jpegEncodingData);  completeTag();}  }
class C{  public PreorderTraversal(IBinaryTreeNode<T> node){  super(node);}  }
class C{  private static boolean isPathElementStart(@NotNull PsiBuilder builder){  return (PATH_ELEMENT_START.contains(builder.getTokenType()) || ParserUtils.lookAhead(builder,GroovyTokenTypes.mNLS,GroovyTokenTypes.mDOT) || ParserUtils.lookAhead(builder,GroovyTokenTypes.mNLS,GroovyTokenTypes.mLCURLY));}  }
class C{  public BufferServletOutputStream(){  this(BUFFER_SIZE);}  }
class C{  public ElisionFilter(TokenStream input,CharArraySet articles){  super(input);  this.articles=articles;}  }
class C{  public MockSerializableEntity(final Deserializer deserializer){  this.intValue=deserializer.readInt("int");  this.stringValue=deserializer.readOptionalString("s");  this.longValue=deserializer.readLong("long");}  }
class C{  public static Link createSettingLink(final INodeSetting nodeSetting){  return createSettingLink(nodeSetting,nodeSetting.getName() + " settings...");}  }
class C{  public void elementDecl(String name,String model) throws SAXException {  if (DEBUG)   System.out.println("TransformerHandlerImpl#elementDecl: " + name + ", "+ model);  if (null != m_declHandler) {    m_declHandler.elementDecl(name,model);  }}  }
class C{  public static RoundingParams asCircle(){  return (new RoundingParams()).setRoundAsCircle(true);}  }
class C{  static final int advanceProbe(int probe){  probe^=probe << 13;  probe^=probe >>> 17;  probe^=probe << 5;  setThreadLocalRandomProbe(probe);  return probe;}  }
class C{  public static void executeApiTask(FileService fileService,ExecutorService executorService,DbClient dbClient,VirtualArray varray,Project project,VirtualPool vpool,TenantOrg tenantOrg,DataObject.Flag[] flags,VirtualPoolCapabilityValuesWrapper capabilities,TaskList taskList,String task,ArrayList<String> requestedTypes,FileSystemParam param,FileServiceApi fileServiceImpl,String suggestedNativeFsId){  CreateFileSystemSchedulingThread schedulingThread=new CreateFileSystemSchedulingThread(fileService,varray,project,vpool,tenantOrg,flags,capabilities,taskList,task,requestedTypes,param,fileServiceImpl,suggestedNativeFsId);  try {    executorService.execute(schedulingThread);  } catch (  Exception e) {    for (    TaskResourceRep taskObj : taskList.getTaskList()) {      String message="Failed to execute file creation API task for resource " + taskObj.getResource().getId();      _log.error(message);      taskObj.setMessage(message);      FileShare fileShare=dbClient.queryObject(FileShare.class,taskObj.getResource().getId());      fileShare.setInactive(true);      dbClient.updateObject(fileShare);    }  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  SparseTernaryPolynomial(int N,int[] ones,int[] negOnes){  this.N=N;  this.ones=ones;  this.negOnes=negOnes;}  }
class C{  private synchronized boolean secondsBeforeRetryPrimaryHostIsMet(){  return this.secondsBeforeRetryPrimaryHost > 0 && Util.secondsSinceMillis(this.primaryHostFailTimeMillis) >= this.secondsBeforeRetryPrimaryHost;}  }
class C{  private boolean updateRequests(){  if (!MEASURETYPE_Request.equals(getMeasureType()) || getR_RequestType_ID() == 0)   return false;  MGoal[] goals=MGoal.getMeasureGoals(getCtx(),getPA_Measure_ID());  for (int i=0; i < goals.length; i++) {    MGoal goal=goals[i];    MRole role=null;    if (goal.getAD_Role_ID() != 0)     role=MRole.get(getCtx(),goal.getAD_Role_ID()); else     if (goal.getAD_User_ID() != 0) {      MUser user=MUser.get(getCtx(),goal.getAD_User_ID());      MRole[] roles=user.getRoles(goal.getAD_Org_ID());      if (roles.length > 0)       role=roles[0];    }    if (role == null)     role=MRole.getDefault(getCtx(),false);    MRequestType rt=MRequestType.get(getCtx(),getR_RequestType_ID());    String sql=rt.getSqlPI(goal.getRestrictions(false),goal.getMeasureScope(),getMeasureDataType(),null,role);    BigDecimal ManualActual=DB.getSQLValueBD(null,sql,new Object[]{});    if (ManualActual == null) {      ManualActual=Env.ZERO;      log.fine("No Value = " + sql);    }    goal.setMeasureActual(ManualActual);    goal.save(get_TrxName());  }  return true;}  }
class C{  @SuppressLint("CommitPrefEdits") private void doWrite(List<String> args) throws DumpUsageException {  String usagePrefix="Usage: prefs write <path> <key> <type> <value>, where type is one of: ";  Iterator<String> argsIter=args.iterator();  String path=nextArg(argsIter,"Expected <path>");  String key=nextArg(argsIter,"Expected <key>");  String typeName=nextArg(argsIter,"Expected <type>");  Type type=Type.of(typeName);  if (type == null) {    throw new DumpUsageException(Type.appendNamesList(new StringBuilder(usagePrefix),", ").toString());  }  SharedPreferences sharedPreferences=getSharedPreferences(path);  SharedPreferences.Editor editor=sharedPreferences.edit();switch (type) {case BOOLEAN:    editor.putBoolean(key,Boolean.valueOf(nextArgValue(argsIter)));  break;case INT:editor.putInt(key,Integer.valueOf(nextArgValue(argsIter)));break;case LONG:editor.putLong(key,Long.valueOf(nextArgValue(argsIter)));break;case FLOAT:editor.putFloat(key,Float.valueOf(nextArgValue(argsIter)));break;case STRING:editor.putString(key,nextArgValue(argsIter));break;case SET:putStringSet(editor,key,argsIter);break;}editor.commit();}  }
class C{  public final void testIsSatisfiedFails(){  MinLengthConstraint minLengthConstraint=new MinLengthConstraint(2);  assertFalse(minLengthConstraint.isSatisfied("1"));}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypesPackage.TENUM_LITERAL__NAME:    return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);case TypesPackage.TENUM_LITERAL__VALUE:  return VALUE_EDEFAULT == null ? value != null : !VALUE_EDEFAULT.equals(value);}return super.eIsSet(featureID);}  }
class C{  public Command handleFlowRemoved(IOFSwitch sw,OFFlowRemoved msg,FloodlightContext cntx){  U64 cookie=msg.getCookie();  if (AppCookie.extractApp(cookie) == STATIC_FLOW_APP_ID) {    if (OFFlowRemovedReason.DELETE.equals(msg.getReason()))     log.error("Got a FlowRemove message for a infinite " + "timeout flow: {} from switch {}",msg,sw);    return Command.STOP;  }  return Command.CONTINUE;}  }
class C{  @SuppressWarnings("unchecked") @Override public Object clone(){  HashMap<K,V> result;  try {    result=(HashMap<K,V>)super.clone();  } catch (  CloneNotSupportedException e) {    throw new AssertionError(e);  }  result.makeTable(table.length);  result.entryForNullKey=null;  result.size=0;  result.keySet=null;  result.entrySet=null;  result.values=null;  result.init();  result.constructorPutAll(this);  return result;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public Element element(){  return element;}  }
class C{  public int backingIndexToMerge(ObservableList<? extends T> backingList,int index){  if (index < 0) {    throw new IndexOutOfBoundsException();  }  int size=0;  for (int i=0, listsSize=lists.size(); i < listsSize; i++) {    List<? extends T> list=lists.get(i);    if (backingList == list) {      if (index - size < list.size()) {        return index - size;      } else {        throw new IndexOutOfBoundsException();      }    }    size+=list.size();  }  throw new IllegalArgumentException();}  }
class C{  protected synchronized int removeExpired(){  if (validTime == -1) {    return 0;  }  int count=0;  for (  Entry<K,CacheObject<V>> entry : cache.entrySet()) {    if (entry != null && isExpired(entry.getValue())) {      cache.remove(entry.getKey());      count++;    }  }  return count;}  }
class C{  public static void callSetter(Object o,String prop,Object value) throws SecurityException, NoSuchMethodException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {  prop="set" + StringUtil.ucFirst(prop);  Class c=o.getClass();  Object[] oArg=new Object[]{value};  MethodParameterPair mp=getMethodParameterPairIgnoreCase(c,prop,oArg);  if (!mp.getMethod().getReturnType().getName().equals("void"))   throw new NoSuchMethodException("invalid return Type, method [" + mp.getMethod().getName() + "] must have return type void, now ["+ mp.getMethod().getReturnType().getName()+ "]");  mp.getMethod().invoke(o,mp.getParameters());}  }
class C{  public Iterator<D> iterator(){  return this.container.iterator();}  }
class C{  public void add(String key,Object value){  this.model.put(key,value);}  }
class C{  protected String resolveHref(){  String href=this.parent.getIcon().getHref();  String localAddress=null;  try {    localAddress=this.parent.getRoot().getSupportFilePath(href);  } catch (  IOException ignored) {  }  return localAddress != null ? localAddress : href;}  }
class C{  public Lucene60Codec(){  this(Mode.BEST_SPEED);}  }
class C{  public void call(String name,Writable json) throws IOException {  writeName(name);  verifyValue();  if (json instanceof GString) {    writer.write(JsonOutput.toJson(json.toString()));  } else {    json.writeTo(writer);  }}  }
class C{  public void registerInterestRegistrationListener(InterestRegistrationListener listener){  this.writableInterestRegistrationListeners.add(listener);}  }
class C{  private static boolean isAllowedIfGroupMember(Project project,User user){  return project.hasGroup() && (project.isPublic() || project.isProtected()) && OrganizationUser.isMember(project.organization,user);}  }
class C{  public char[] $clone(){  throw Util.makeJavaArrayWrapperException();}  }
class C{  public TaskList relinkApplicationSnapshotSession(URI id,VolumeGroupSnapshotSessionRelinkTargetsParam input){  UriBuilder uriBuilder=client.uriBuilder(APP_SUPPORT_RELINK_SNAPSHOT_SESSION_URL);  return client.postURI(TaskList.class,input,uriBuilder.build(id));}  }
class C{  private void alignBelowBaseline(GridBagConstraints cons,Rectangle r,int cellY,int cellHeight){  if (layoutInfo.hasBaseline(cons.tempY)) {    if (layoutInfo.hasConstantDescent(cons.tempY)) {      r.y=cellY + cellHeight - layoutInfo.maxDescent[cons.tempY];    } else {      r.y=cellY + layoutInfo.maxAscent[cons.tempY];    }    if (cons.isVerticallyResizable()) {      r.height=cellY + cellHeight - r.y - cons.insets.bottom;    }  } else {    centerVertically(cons,r,cellHeight);  }}  }
class C{  public void removeClassPath(ClassPath cp){  source.removeClassPath(cp);}  }
class C{  public static void register(Context context,MaterialViewPagerAnimator animator){  hashMap.put(context,animator);}  }
class C{  public static PublicKey derivePublicKey(final PrivateKey privateKey){  final byte[] hash=Hashes.sha3_512(toByteArray(privateKey.getRaw()));  final byte[] a=Arrays.copyOfRange(hash,0,32);  a[31]&=0x7F;  a[31]|=0x40;  a[0]&=0xF8;  final Ed25519GroupElement pubKey=scalarMultiplyGroupElement(Ed25519Group.BASE_POINT,toFieldElement(toBigInteger(a)));  return new PublicKey(pubKey.encode().getRaw());}  }
class C{  public JVMStatsService(){  super(JVMStats.class);  toggleOption(ServiceOption.PERIODIC_MAINTENANCE,true);}  }
class C{  public void test_transferFrom_couldDelete() throws Exception {  writeDataToFile(fileOfReadOnlyFileChannel);  writeDataToFile(fileOfWriteOnlyFileChannel);  writeOnlyFileChannel.transferFrom(readOnlyFileChannel,0,2);  readOnlyFileChannel.close();  writeOnlyFileChannel.close();  boolean rDel=fileOfReadOnlyFileChannel.delete();  boolean wDel=fileOfWriteOnlyFileChannel.delete();  assertTrue("File " + readOnlyFileChannel + " exists",rDel);  assertTrue("File " + writeOnlyFileChannel + " exists",wDel);}  }
class C{  public void message(LocoNetMessage m){  log.debug("message");  if (!mRunButton.isSelected()) {    return;  }  if (!(mNextEcho.equals(m))) {    return;  }  startSequenceDelay();}  }
class C{  private boolean logEnabled() throws Exception {  assert fs != null;  Field field=fs.getClass().getDeclaredField("clientLog");  field.setAccessible(true);  return ((IgfsLogger)field.get(fs)).isLogEnabled();}  }
class C{  public IntIterator edgeRows(int node,int direction){  if (direction == OUTEDGES) {    int[] outedges=(int[])m_links.get(node,OUTLINKS);    return new IntArrayIterator(outedges,0,getOutDegree(node));  } else   if (direction == INEDGES) {    int[] inedges=(int[])m_links.get(node,INLINKS);    return new IntArrayIterator(inedges,0,getInDegree(node));  } else   if (direction == UNDIRECTED) {    return new CompositeIntIterator(edgeRows(node,OUTEDGES),edgeRows(node,INEDGES));  } else {    throw new IllegalArgumentException("Unrecognized edge type: " + direction + ". Type should be one of Graph.OUTEDGES, "+ "Graoh.INEDGES, or Graph.ALL");  }}  }
class C{  static void validate(ConfigurationSetting dbConfigSetting,VOConfigurationSetting voConfigurationSetting) throws ValidationException {  validateReadonly(dbConfigSetting,voConfigurationSetting);  String name=voConfigurationSetting.getInformationId().name();  String type=voConfigurationSetting.getInformationId().getType();  String value=voConfigurationSetting.getValue();  BLValidator.isNotNull(FIELD_NAME_CONTEXT_ID,voConfigurationSetting.getContextId());  if (voConfigurationSetting.getInformationId().isMandatory()) {    BLValidator.isNotBlank(name,value);  } else   if (value == null || value.trim().length() == 0) {    return;  }  value=value.trim();  voConfigurationSetting.setValue(value);  if (ConfigurationKey.TYPE_LONG.equals(type)) {    BLValidator.isLong(name,value);    BLValidator.isDescription(name,value,false);    long longValue=Long.parseLong(value);    Long minValue=voConfigurationSetting.getInformationId().getMinValue();    Long maxValue=voConfigurationSetting.getInformationId().getMaxValue();    BLValidator.isInRange(name,longValue,minValue,maxValue);  } else   if (ConfigurationKey.TYPE_URL.equals(type)) {    BLValidator.isUrl(name,value,false);  } else   if (ConfigurationKey.TYPE_MAIL.equals(type)) {    BLValidator.isEmail(name,value,false);  } else   if (ConfigurationKey.TYPE_BOOLEAN.equals(type)) {    BLValidator.isBoolean(name,value);  } else   if (ConfigurationKey.TYPE_STRING.equals(type)) {    Long length=voConfigurationSetting.getInformationId().getLength();    BLValidator.isLongEnough(name,value,length);    BLValidator.isDescription(name,value,false);  } else {    BLValidator.isDescription(name,value,false);  }}  }
class C{  protected DateTimeConverter makeConverter(Object defaultValue){  return new DateConverter(defaultValue);}  }
class C{  public static void remove(Tag tag){  Body body=(Body)tag.getParent();  body.getStatements().remove(tag);}  }
class C{  public int convertObjectToPageNumber(final String offset){  final Integer value=pageLookup.get(offset);  if (value == null) {    return -1;  } else {    return value;  }}  }
class C{  public void addMessage(Message message){synchronized (messages) {    if (messages.size() > messageCacheSize) {      messages.remove(0);    }    messages.add(message);  }}  }
class C{  public static boolean checkIsGaggedAndInformPlayer(final Player player){  final boolean res=GagManager.isGagged(player);  if (res) {    final long timeRemaining=SingletonRepository.getGagManager().getTimeRemaining(player);    player.sendPrivateText("You are gagged, it will expire in " + TimeUtil.approxTimeUntil((int)(timeRemaining / 1000L)));  }  return res;}  }
class C{  public SerialNumber(DerValue val) throws IOException {  construct(val);}  }
class C{  protected void validateStartState(State currentState){  ValidationUtils.validateState(currentState);  ValidationUtils.validateTaskStage(currentState.taskState);}  }
class C{  public boolean parseAttributes(){  return parseAttributes;}  }
class C{  public static void fill(int[][] matrix,int value){  int rows=matrix.length;  for (int r=0; r < rows; r++) {    int cols=matrix[r].length;    for (int c=0; c < cols; c++) {      matrix[r][c]=value;    }  }}  }
class C{  public MP4Descriptor lookup(int type,int number){  int position=0;  for (int i=0; i < children.size(); i++) {    MP4Descriptor descriptor=children.elementAt(i);    if (descriptor.getType() == type) {      if (position >= number) {        return descriptor;      }      position++;    }  }  return null;}  }
class C{  public void write(byte bytes[],int off,int length) throws IOException {  if (binaryMode) {    super.write(bytes,off,length);    return;  }  while (--length >= 0) {    write(bytes[off++]);  }}  }
class C{  @Override public Object callableStatement_getObject(FilterChain chain,CallableStatementProxy statement,int parameterIndex,java.util.Map<String,Class<?>> map) throws SQLException {  Object obj=chain.callableStatement_getObject(statement,parameterIndex,map);  if (obj instanceof ResultSetProxy) {    resultSetOpenAfter((ResultSetProxy)obj);  }  return obj;}  }
class C{  @Override public void postProcess(ResultProducer rp) throws Exception {  if (!(m_OutputFile == null) && !(m_OutputFile.getName().equals("-"))) {    m_Out.close();  }}  }
class C{  public void load(String filename) throws FileNotFoundException, IOException, SAXException, ParserConfigurationException {  String encoding=ExtractXMLEncoding.obtainEncodingStringFromFile(filename);  String alternateEncoding=ExtractXMLEncoding.mapUnsupportedEncoding(encoding);  try {    tryToExtractElements(filename,encoding);  } catch (  SAXException saxe) {    tryToExtractElements(filename,alternateEncoding);  }  return;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element docElem;  NodeList elementList;  doc=(Document)load("staffNS",false);  docElem=doc.getDocumentElement();  elementList=docElem.getElementsByTagNameNS("http://www.nist.gov","address");  assertSize("addresses",3,elementList);}  }
class C{  public synchronized void save() throws IOException, Asn1Exception {  try (FileOutputStream fos=new FileOutputStream(cacheName);CCacheOutputStream cos=new CCacheOutputStream(fos)){    cos.writeHeader(primaryPrincipal,version);    Credentials[] tmp=null;    if ((tmp=getCredsList()) != null) {      for (int i=0; i < tmp.length; i++) {        cos.addCreds(tmp[i]);      }    }  } }  }
class C{  public java.lang.StringBuffer append(float f){  return null;}  }
class C{  public void test_SelectSimple() throws SQLException {  String sql="SELECT * FROM " + DatabaseCreator.TEST_TABLE2;  ResultSet result=statement.executeQuery(sql);  int counter=0;  while (result.next()) {    int id=result.getInt("finteger");    assertEquals("expected value doesn't equal actual",DatabaseCreator.defaultString + id,result.getString("ftext"));    assertEquals("expected value doesn't equal actual",DatabaseCreator.defaultCharacter + id,result.getString("fcharacter"));    assertEquals("expected value doesn't equal actual",BigDecimal.valueOf(id + 0.1).floatValue(),result.getFloat("ffloat"));    assertEquals("expected value doesn't equal actual",BigDecimal.valueOf(id + 0.1).doubleValue(),result.getDouble("freal"));    assertEquals("expected value doesn't equal actual",BigDecimal.valueOf(id + 0.1).doubleValue(),result.getDouble("fdouble"));    assertEquals("expected value doesn't equal actual",date.toString(),result.getDate("fdate").toString());    assertEquals("expected value doesn't equal actual",time.toString(),result.getTime("ftime").toString());    counter++;  }  assertEquals("number of rows in ResultSet is wrong",5,counter);  result.close();}  }
class C{  public PdxInputStream(ByteBufferInputStream existing,int length){  super(existing,length);}  }
class C{  public static <T>int compare(Comparable<T> object1,T object2){  if ((null != object1) && (null != object2)) {    return object1.compareTo(object2);  } else   if (null != object1) {    return 1;  } else   if (null != object2) {    return -1;  } else {    return 0;  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_documentinvalidcharacterexceptioncreateattribute1.class,args);}  }
class C{  public static void main(String[] urls) throws Exception {  GroovyScriptEngine gse=new GroovyScriptEngine(urls);  BufferedReader br=new BufferedReader(new InputStreamReader(System.in));  String line;  while (true) {    System.out.print("groovy> ");    if ((line=br.readLine()) == null || line.equals("quit")) {      break;    }    try {      System.out.println(gse.run(line,new Binding()));    } catch (    Exception e) {      e.printStackTrace();    }  }}  }
class C{  public static Float convertKerning(Element e){  Value v=CSSUtilities.getComputedStyle(e,SVGCSSEngine.KERNING_INDEX);  if (v.getPrimitiveType() == CSSPrimitiveValue.CSS_IDENT) {    return null;  }  return new Float(v.getFloatValue());}  }
class C{  public Acot(){  super("acot",1);}  }
class C{  public void sincronizarBase(){  listaCatalogacao=ControleDAO.getBanco().getCatalogacaoDAO().listar();}  }
class C{  public LoginConfigurationLookupFunction(final Class<T> clazz){  this.configClass=clazz;}  }
class C{  public Voice(final String name,final String gender,final String language){  this.name=name;  this.gender=gender;  this.language=language;}  }
class C{  public EquipItemAction(final String itemName,final int amount){  this(itemName,amount,false);}  }
class C{  public static void main(String args[]){  Debug.init(System.getProperties());  Debug.sampleUsage();}  }
class C{  private RequestBuilder with(List<NameValue> params,Object... args){  if (args != null) {    Validator.isTrue((args.length % 2) == 0,"need even number of arguments");    for (int i=0; i < args.length; i+=2) {      add(params,args[i].toString(),args[i + 1]);    }  }  return this;}  }
class C{  public static Double extractHeightAttribute(ShapefileRecord record){  if (record.getAttributes() == null)   return null;  for (  Map.Entry<String,Object> attr : record.getAttributes().getEntries()) {    String hKey=attr.getKey().trim().toLowerCase();    if (!(hKey.equals("height") || hKey.equals("hgt")))     continue;    Object o=attr.getValue();    if (o instanceof Number)     return ((Number)o).doubleValue();    if (o instanceof String)     return WWUtil.convertStringToDouble(o.toString());  }  return null;}  }
class C{  protected void callChildVisitors(XSLTVisitor visitor,boolean callAttrs){  if (callAttrs) {    if (null != m_name_avt)     m_name_avt.callVisitors(visitor);    if (null != m_namespace_avt)     m_namespace_avt.callVisitors(visitor);  }  super.callChildVisitors(visitor,callAttrs);}  }
class C{  public FakeClock decrementTime(ReadableDuration duration){  incrementTime(-duration.getMillis());  return this;}  }
class C{  public static String doubleToString(double d){  if (Double.isInfinite(d) || Double.isNaN(d)) {    return "null";  }  String string=Double.toString(d);  if (string.indexOf('.') > 0 && string.indexOf('e') < 0 && string.indexOf('E') < 0) {    while (string.endsWith("0")) {      string=string.substring(0,string.length() - 1);    }    if (string.endsWith(".")) {      string=string.substring(0,string.length() - 1);    }  }  return string;}  }
class C{  public final boolean isEnabled(){  return isEnabled(null);}  }
class C{  GregorianCalendar(int year,int month,int dayOfMonth,int hourOfDay,int minute,int second,int millis){  super();  gdate=(BaseCalendar.Date)gcal.newCalendarDate(getZone());  this.set(YEAR,year);  this.set(MONTH,month);  this.set(DAY_OF_MONTH,dayOfMonth);  if (hourOfDay >= 12 && hourOfDay <= 23) {    this.internalSet(AM_PM,PM);    this.internalSet(HOUR,hourOfDay - 12);  } else {    this.internalSet(HOUR,hourOfDay);  }  setFieldsComputed(HOUR_MASK | AM_PM_MASK);  this.set(HOUR_OF_DAY,hourOfDay);  this.set(MINUTE,minute);  this.set(SECOND,second);  this.internalSet(MILLISECOND,millis);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private List<Signature> create(ParameterTable matrix) throws Exception {  List<Signature> list=new ArrayList<Signature>();  int height=matrix.height();  int width=matrix.width();  for (int i=0; i < height; i++) {    Signature signature=new Signature(factory);    for (int j=0; j < width; j++) {      Parameter parameter=matrix.get(j,i);      String path=parameter.getPath();      Object key=parameter.getKey();      if (signature.contains(key)) {        throw new ConstructorException("Parameter '%s' is a duplicate in %s",path,factory);      }      signature.add(parameter);    }    list.add(signature);  }  return list;}  }
class C{  public void repaint(){  if (gui != null) {    gui.repaint();  }}  }
class C{  public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (obj instanceof Ellipse2D) {    Ellipse2D e2d=(Ellipse2D)obj;    return ((getX() == e2d.getX()) && (getY() == e2d.getY()) && (getWidth() == e2d.getWidth())&& (getHeight() == e2d.getHeight()));  }  return false;}  }
class C{  @Nullable public IndexService indexService(String index){  IndexServiceInjectorPair indexServiceInjectorPair=indices.get(index);  if (indexServiceInjectorPair == null) {    return null;  } else {    return indexServiceInjectorPair.getIndexService();  }}  }
class C{  @Override public BatchResult next(){  return queryResultPreparator.prepareQueryResult(queryResultIterator.next());}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_textsplittextthree.class,args);}  }
class C{  protected User authenticateUser(String requestBody){  PutMethod put=new PutMethod(Joiner.on("/").join(zeppelinhubUrl,USER_LOGIN_API_ENDPOINT));  String responseBody=StringUtils.EMPTY;  try {    put.setRequestEntity(new StringRequestEntity(requestBody,JSON_CONTENT_TYPE,UTF_8_ENCODING));    int statusCode=httpClient.executeMethod(put);    if (statusCode != HttpStatus.SC_OK) {      LOG.error("Cannot login user, HTTP status code is {} instead on 200 (OK)",statusCode);      put.releaseConnection();      throw new AuthenticationException("Couldnt login to ZeppelinHub. " + "Login or password incorrect");    }    responseBody=put.getResponseBodyAsString();    put.releaseConnection();  } catch (  IOException e) {    LOG.error("Cannot login user",e);    throw new AuthenticationException(e.getMessage());  }  User account=null;  try {    account=gson.fromJson(responseBody,User.class);  } catch (  JsonParseException e) {    LOG.error("Cannot deserialize ZeppelinHub response to User instance",e);    throw new AuthenticationException("Cannot login to ZeppelinHub");  }  HashSet<String> userAndRoles=new HashSet<String>();  userAndRoles.add(account.login);  ZeppelinServer.notebookWsServer.broadcastReloadedNoteList(new org.apache.zeppelin.user.AuthenticationInfo(account.login),userAndRoles);  return account;}  }
class C{  public static Point angleToPoint(Rectangle r,double angle){  double si=sin(angle);  double co=cos(angle);  double e=0.0001;  int x=0, y=0;  if (abs(si) > e) {    x=(int)((1.0 + co / abs(si)) / 2.0 * r.width);    x=range(0,r.width,x);  } else   if (co >= 0.0) {    x=r.width;  }  if (abs(co) > e) {    y=(int)((1.0 + si / abs(co)) / 2.0 * r.height);    y=range(0,r.height,y);  } else   if (si >= 0.0) {    y=r.height;  }  return new Point(r.x + x,r.y + y);}  }
class C{  public static boolean moveFileSafe(final Path srcFile,final Path destFile) throws IOException {  if (srcFile == null) {    throw new NullPointerException("Source must not be null");  }  if (destFile == null) {    throw new NullPointerException("Destination must not be null");  }  if (!srcFile.toAbsolutePath().toString().equals(destFile.toAbsolutePath().toString())) {    LOGGER.debug("try to move file " + srcFile + " to "+ destFile);    if (!Files.exists(srcFile)) {      throw new FileNotFoundException("Source '" + srcFile + "' does not exist");    }    if (Files.isDirectory(srcFile)) {      throw new IOException("Source '" + srcFile + "' is a directory");    }    if (Files.exists(destFile) && !srcFile.equals(destFile)) {      throw new FileExistsException("Destination '" + destFile + "' already exists");    }    if (Files.isDirectory(destFile)) {      throw new IOException("Destination '" + destFile + "' is a directory");    }    boolean rename=false;    for (int i=0; i < 5; i++) {      try {        Files.move(srcFile,destFile,StandardCopyOption.ATOMIC_MOVE);        rename=true;      } catch (      AtomicMoveNotSupportedException a) {        try {          Files.move(srcFile,destFile,StandardCopyOption.REPLACE_EXISTING);          rename=true;        } catch (        IOException e) {          LOGGER.warn("rename problem: " + e.getMessage());        }      }catch (      IOException e) {        LOGGER.warn("rename problem: " + e.getMessage());      }      if (rename) {        break;      }      try {        LOGGER.debug("rename did not work - sleep a while and try again...");        Thread.sleep(1000);      } catch (      InterruptedException e) {        LOGGER.warn("I'm so excited - could not sleep");      }    }    if (!rename) {      LOGGER.error("Failed to rename file '" + srcFile + " to "+ destFile);      MessageManager.instance.pushMessage(new Message(MessageLevel.ERROR,srcFile,"message.renamer.failedrename"));      return false;    } else {      LOGGER.info("Successfully moved file from " + srcFile + " to "+ destFile);      return true;    }  }  return true;}  }
class C{  @Override public String[] indices(){  return indices;}  }
class C{  public static ProgressDialog createProgressDialog(Context c,String message){  ProgressDialog dialog=new ProgressDialog(c,ProgressDialog.STYLE_SPINNER);  dialog.setIndeterminate(true);  dialog.setMessage(message);  dialog.setCanceledOnTouchOutside(false);  return dialog;}  }
class C{  public Vec2 multiplyByMatrix(Matrix3 matrix){  if (matrix == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Vec2","multiplyByMatrix","missingMatrix"));  }  double[] m=matrix.m;  double x=(m[0] * this.x) + (m[1] * this.y) + m[2];  double y=(m[3] * this.x) + (m[4] * this.y) + m[5];  double z=(m[6] * this.x) + (m[7] * this.y) + m[8];  this.x=x / z;  this.y=y / z;  return this;}  }
class C{  public NormalMessage(){  requestFileName="getstate.query";  responseFile="getstate.answer";}  }
class C{  private Object doInvokeMethod(String methodName,Object name,Object args){  Reference explicitResult=new Reference();  if (checkExplicitMethod(methodName,args,explicitResult)) {    return explicitResult.get();  } else {    try {      return dispatchNodeCall(name,args);    } catch (    MissingMethodException mme) {      if (mme.getMethod().equals(methodName) && methodMissingDelegate != null) {        return methodMissingDelegate.call(new Object[]{methodName,args});      }      throw mme;    }  }}  }
class C{  public static byte[] decode(String s){  return decode(s.toCharArray());}  }
class C{  private Option createMultiArgOpt(String longOpt,String argName,String desc){  return Option.builder().longOpt(longOpt).hasArgs().argName(argName).valueSeparator(',').desc(desc).build();}  }
class C{  public static boolean searchForKey(PartitionedRegion par,Object key){  boolean foundIt=false;  final int numBucks=par.getTotalNumberOfBuckets();  for (int b=0; b < numBucks; b++) {    if (par.getBucketKeys(b).contains(key)) {      foundIt=true;      LogWriterUtils.getLogWriter().severe("Key " + key + " found in bucket "+ b);      break;    }  }  if (!foundIt) {    LogWriterUtils.getLogWriter().severe("Key " + key + " not found in any bucket");  }  return foundIt;}  }
class C{  public void initMutationEventNS(String namespaceURIArg,String typeArg,boolean canBubbleArg,boolean cancelableArg,Node relatedNodeArg,String prevValueArg,String newValueArg,String attrNameArg,short attrChangeArg){  initEventNS(namespaceURIArg,typeArg,canBubbleArg,cancelableArg);  this.relatedNode=relatedNodeArg;  this.prevValue=prevValueArg;  this.newValue=newValueArg;  this.attrName=attrNameArg;  this.attrChange=attrChangeArg;}  }
class C{  private void addToken(int tokenType){  addToken(zzStartRead,zzMarkedPos - 1,tokenType);}  }
class C{  public void unsetMatchColumn(int columnIdx) throws SQLException {  if (!iMatchColumns.get(0).equals(Integer.valueOf(columnIdx))) {    throw new SQLException(resBundle.handleGetObject("cachedrowsetimpl.unsetmatch").toString());  } else   if (strMatchColumns.get(0) != null) {    throw new SQLException(resBundle.handleGetObject("cachedrowsetimpl.unsetmatch1").toString());  } else {    iMatchColumns.set(0,-1);  }}  }
class C{  ICC_ProfileGray(ProfileDeferralInfo pdi){  super(pdi);}  }
class C{  public void testCase15(){  byte aBytes[]={1,2,3,4,5,6,7,1,2,3,4,5,6,7};  byte bBytes[]={10,20,30,40,50,60,70,10,20,30};  int aSign=-1;  int bSign=-1;  byte rBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.subtract(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals(-1,result.signum());}  }
class C{  public void callAsync(String key,Callback callback){  callAsync(key,new Object[]{},callback);}  }
class C{  public static void move(String source,String target){  FilePath.get(source).moveTo(FilePath.get(target),false);}  }
class C{  private void bindAll(){  Log.d(TAG,"Binding services");  Intent i1=new Intent(this,PositioningService.class);  bindService(i1,mPositioningConnection,Context.BIND_AUTO_CREATE);  Intent i2=new Intent(this,WirelessLoggerService.class);  bindService(i2,mWirelessConnection,Context.BIND_AUTO_CREATE);  Intent i3=new Intent(this,GpxLoggerService.class);  bindService(i3,mGpxConnection,Context.BIND_AUTO_CREATE);}  }
class C{  @Override public Long move(final String key,final int dbIndex){  checkIsInMultiOrPipeline();  client.move(key,dbIndex);  return client.getIntegerReply();}  }
class C{  public void finish() throws IOException {  if (!this.finished) {    this.finished=true;    writeEnd();  }  try {    this.out.close();  } catch (  final XMLStreamException e) {    throw new IOException(e);  }}  }
class C{  public boolean isEmpty(){  return first == null;}  }
class C{  private void validateExpectedPartitionValuesCreateRequest(ExpectedPartitionValuesCreateRequest expectedPartitionValuesCreateRequest){  partitionKeyGroupHelper.validatePartitionKeyGroupKey(expectedPartitionValuesCreateRequest.getPartitionKeyGroupKey());  expectedPartitionValuesCreateRequest.setExpectedPartitionValues(validateExpectedPartitionValues(expectedPartitionValuesCreateRequest.getExpectedPartitionValues()));}  }
class C{  public V remove(long key){  int hash=getHash(key);  int segmentIndex=getSegmentIndex(hash);  Segment<V> s=segments[segmentIndex];synchronized (s) {    s=resizeIfNeeded(s,segmentIndex);    return s.remove(key,hash);  }}  }
class C{  private int parseMessageId(final byte[] b,final int off) throws ParseException {  final int messageIdLen=Constants.MESSAGE_ID_LEN;  final int len=b.length - off;  if (len >= messageIdLen) {    messageId_=Arrays.copyOfRange(b,off,off + messageIdLen);    return messageIdLen;  } else {    throw new ParseException("Not enough bytes to parse serial number");  }}  }
class C{  public void testArrayConstructor(){  double[] data={2.3,1.2,5.0};  AlgVector v=new AlgVector(data);  assertEquals("Length differs",data.length,v.numElements());  for (int i=0; i < data.length; i++)   assertEquals((i + 1) + ". value differs",data[i],v.getElement(i));}  }
class C{  public void addMethod(CtMethod m) throws CannotCompileException {  checkModify();}  }
class C{  public ModbusIOException(String message,Object... values){  super(message,values);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static List<Position> computeShiftedPositions(Position oldPosition,Position newPosition,Iterable<? extends Position> positions){  if (oldPosition == null || newPosition == null) {    throw new IllegalArgumentException("Position Is Null");  }  if (positions == null) {    throw new IllegalArgumentException("Positions List Is Null");  }  ArrayList<Position> newPositions=new ArrayList<Position>();  double elevDelta=newPosition.getElevation() - oldPosition.getElevation();  for (  Position pos : positions) {    Angle distance=LatLon.greatCircleDistance(oldPosition,pos);    Angle azimuth=LatLon.greatCircleAzimuth(oldPosition,pos);    LatLon newLocation=LatLon.greatCircleEndPosition(newPosition,azimuth,distance);    double newElev=pos.getElevation() + elevDelta;    newPositions.add(new Position(newLocation,newElev));  }  return newPositions;}  }
class C{  public static byte[] readFully(InputStream in) throws IOException {  byte[] buffer=new byte[1024];  ByteArrayOutputStream bytes=new ByteArrayOutputStream();  while (true) {    int byteCount=in.read(buffer);    if (byteCount == -1) {      return bytes.toByteArray();    }    bytes.write(buffer,0,byteCount);  }}  }
class C{  public NaccacheSternPrivateKeyParameters(BigInteger g,BigInteger n,int lowerSigmaBound,Vector smallPrimes,BigInteger phi_n){  super(true,g,n,lowerSigmaBound);  this.smallPrimes=smallPrimes;  this.phi_n=phi_n;}  }
class C{  public static void addCircles(int n){  if (n > 0) {    Circle circle=new Circle(10 * n);    circle.setFill(Color.WHITE);    circle.setStroke(Color.BLACK);    pane.getChildren().add(circle);    addCircles(n - 1);  }}  }
class C{  public HistoryUpdateResponse clone(){  HistoryUpdateResponse result=new HistoryUpdateResponse();  result.ResponseHeader=ResponseHeader == null ? null : ResponseHeader.clone();  if (Results != null) {    result.Results=new HistoryUpdateResult[Results.length];    for (int i=0; i < Results.length; i++)     result.Results[i]=Results[i].clone();  }  result.DiagnosticInfos=DiagnosticInfos == null ? null : DiagnosticInfos.clone();  return result;}  }
class C{  public void updateNClob(String columnLabel,Reader reader) throws SQLException {  throw new SQLFeatureNotSupportedException(resBundle.handleGetObject("jdbcrowsetimpl.featnotsupp").toString());}  }
class C{  public UIMain(IBurpExtenderCallbacks callbacks){  this.callbacks=callbacks;  initComponents();}  }
class C{  private static void quickSort1(Object x[],int off,int len){  if (len < SMALL) {    for (int i=off; i < len + off; i++)     for (int j=i; j > off && ((Comparable)x[j - 1]).compareTo((Comparable)x[j]) > 0; j--)     swap(x,j,j - 1);    return;  }  int m=off + len / 2;  if (len > SMALL) {    int l=off;    int n=off + len - 1;    if (len > MEDIUM) {      int s=len / 8;      l=med3(x,l,l + s,l + 2 * s);      m=med3(x,m - s,m,m + s);      n=med3(x,n - 2 * s,n - s,n);    }    m=med3(x,l,m,n);  }  Comparable v=(Comparable)x[m];  int a=off, b=a, c=off + len - 1, d=c;  while (true) {    int comparison;    while (b <= c && (comparison=((Comparable)x[b]).compareTo(v)) <= 0) {      if (comparison == 0)       swap(x,a++,b);      b++;    }    while (c >= b && (comparison=((Comparable)x[c]).compareTo(v)) >= 0) {      if (comparison == 0)       swap(x,c,d--);      c--;    }    if (b > c)     break;    swap(x,b++,c--);  }  int s, n=off + len;  s=Math.min(a - off,b - a);  vecswap(x,off,b - s,s);  s=Math.min(d - c,n - d - 1);  vecswap(x,b,n - s,s);  if ((s=b - a) > 1)   quickSort1(x,off,s);  if ((s=d - c) > 1)   quickSort1(x,n - s,s);}  }
class C{  private int validate(File file) throws IOException {  MatrixReader reader=null;  try {    reader=new MatrixReader(file);    int count=0;    while (reader.hasNext()) {      if (reader.next().length > index) {        count++;      } else {        break;      }    }    if (count % (2 * P + 2) != 0) {      System.err.println(file + " is incomplete");    }    return count / (2 * P + 2);  }  finally {    if (reader != null) {      reader.close();    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.203 -0400",hash_original_method="70DFCFEBCCB528E3905963CAD4603A5C",hash_generated_method="42EA5C8AAAFF1F3AB5CACEB7AC4E580A") public LockableFileWriter(File file,Charset encoding) throws IOException {  this(file,encoding,false,null);}  }
class C{  public void lock(long key){  getLock(key).lock();}  }
class C{  public void clear(){  while (n > 0) {    a[--n]=null;  }}  }
class C{  boolean isSuspendLockingToken(){  return DLockService.SUSPEND_LOCKING_TOKEN.equals(this.lockName);}  }
class C{  public static Envelope ensureExtent(Envelope itemEnv,double minExtent){  double minx=itemEnv.getMinX();  double maxx=itemEnv.getMaxX();  double miny=itemEnv.getMinY();  double maxy=itemEnv.getMaxY();  if (minx != maxx && miny != maxy)   return itemEnv;  if (minx == maxx) {    minx=minx - minExtent / 2.0;    maxx=minx + minExtent / 2.0;  }  if (miny == maxy) {    miny=miny - minExtent / 2.0;    maxy=miny + minExtent / 2.0;  }  return new Envelope(minx,maxx,miny,maxy);}  }
class C{  public static MultiPolygon[] toMultiPolygonArray(Collection multiPolygons){  MultiPolygon[] multiPolygonArray=new MultiPolygon[multiPolygons.size()];  return (MultiPolygon[])multiPolygons.toArray(multiPolygonArray);}  }
class C{  public Property secondOfMinute(){  return new Property(this,getChronology().secondOfMinute());}  }
class C{  public ObjectSerializationEncoder(){}  }
class C{  private void traceFixedWidthInt(int x,int length){  if (verbose) {    CharArrayWriter baStream=new CharArrayWriter();    PrintWriter pStream=new PrintWriter(baStream);    pStream.print(x);    String str=baStream.toString();    for (int cnt=length - str.length(); cnt > 0; --cnt)     trace(" ");    trace(str);  }}  }
class C{  public static void dropAllTables(SQLiteDatabase db,boolean ifExists){  SimpleAddressItemDao.dropTable(db,ifExists);  AddressItemDao.dropTable(db,ifExists);  ContactDao.dropTable(db,ifExists);  AddressBookDao.dropTable(db,ifExists);}  }
class C{  @Override public Object evaluate(final Object planoutCode){  if (Operators.isOperator(planoutCode)) {    return Operators.operatorInstance(planoutCode).executeWithLogging(this);  } else   if (planoutCode instanceof List) {    final List<Object> eval=new ArrayList<>();    for (    Object expr : (List)planoutCode) {      eval.add(evaluate(expr));    }    return eval;  } else {    return planoutCode;  }}  }
class C{  public static double convertMetersToFeet(double meters){  return (meters * METERS_TO_FEET);}  }
class C{  public static byte[] randomBytes(char len){  byte[] data=new byte[len];  for (int i=0; i < len; i++) {    data[i]=randomByte();  }  return data;}  }
class C{  public int lastIndexOf(int offset,long value){  for (int i=offset; i-- > 0; ) {    if (_data[i] == value) {      return i;    }  }  return -1;}  }
class C{  public void readEnd() throws IOException {  int code=_offset < _length ? (_buffer[_offset++] & 0xff) : read();  if (code == 'Z')   return; else   if (code < 0)   throw error("unexpected end of file"); else   throw error("unknown code:" + codeName(code));}  }
class C{  @Override public boolean isValidFor(ParsedUrl docUrl){  return docUrl.getTrimmedPath().equalsIgnoreCase(mUrl.getTrimmedPath());}  }
class C{  public void refreshRow() throws SQLException {  checkState();  rs.refreshRow();}  }
class C{  public static void isFalse(boolean val,String msg){  if (val)   throw new IllegalArgumentException(msg);}  }
class C{  public void entityRemoved(String type){  Long count=entityRemovedCounts.get(type);  if (count == null) {    count=0L;  }  count++;  entityRemovedCounts.put(type,count);  logger.trace("Entity of type {} removed",type);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String badString;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("acronym");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();{    boolean success=false;    try {      badString=child.substringData(-5,3);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INDEX_SIZE_ERR);    }    assertTrue("throws_INDEX_SIZE_ERR",success);  }}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj) {    return true;  }  if ((null == obj) || (getClass() != obj.getClass())) {    return false;  }  final ECMInfo other=(ECMInfo)obj;  return Objects.equals(owner,other.owner) && Objects.equals(pos,other.pos) && (strength == other.strength)&& (angelStrength == other.angelStrength)&& (eccmStrength == other.eccmStrength)&& (angelECCMStrength == other.angelECCMStrength)&& (isECMNova == other.isECMNova)&& (range == other.range);}  }
class C{  private void cmd_zoom(){  int M_Lot_ID=0;  KeyNamePair pp=(KeyNamePair)fieldLot.getSelectedItem();  if (pp != null)   M_Lot_ID=pp.getKey();  MQuery zoomQuery=new MQuery("M_Lot");  zoomQuery.addRestriction("M_Lot_ID",MQuery.EQUAL,M_Lot_ID);  log.info(zoomQuery.toString());  setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));  int AD_Window_ID=MWindow.getWindow_ID("Lot");  AWindow frame=new AWindow();  if (frame.initWindow(AD_Window_ID,zoomQuery)) {    this.setVisible(false);    this.setModal(false);    this.setVisible(true);    AEnv.addToWindowManager(frame);    AEnv.showScreen(frame,SwingConstants.EAST);  }  frame=null;  setCursor(Cursor.getDefaultCursor());}  }
class C{  public ParameterizedCallExpression createParameterizedCallExpression(){  ParameterizedCallExpressionImpl parameterizedCallExpression=new ParameterizedCallExpressionImpl();  return parameterizedCallExpression;}  }
class C{  public static Set<ContainerModel> generateContainerModels(int numContainers,int taskCount){  Set<ContainerModel> models=new HashSet<>(numContainers);  int[] taskCountPerContainer=calculateTaskCountPerContainer(taskCount,numContainers);  int j=0;  for (int i=0; i < numContainers; i++) {    int[] partitions=new int[taskCountPerContainer[i]];    for (int k=0; k < taskCountPerContainer[i]; k++) {      partitions[k]=j + k;    }    j+=taskCountPerContainer[i];    models.add(createContainerModel(i,partitions));  }  return models;}  }
class C{  public void unlock(){  if (images != null) {    int ilen=images.length;    for (int iter=0; iter < ilen; iter++) {      if (images[iter] != null) {        images[iter].unlock();      }    }  }}  }
class C{  public ComputeTaskTimeoutException(String msg){  super(msg);}  }
class C{  @PUT @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/san-fabrics/{fabricId}/san-zones") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public TaskResourceRep updateSanZones(SanZoneUpdateParams updateSanZones,@PathParam("id") URI id,@PathParam("fabricId") String fabricId) throws InternalException {  String task=UUID.randomUUID().toString();  String fabricWwn=null;  if (WWNUtility.isValidWWN(fabricId)) {    fabricWwn=fabricId;    fabricId=fabricId.replaceAll(":","");  }  ArgValidator.checkFieldUriType(id,NetworkSystem.class,"id");  NetworkSystem device=queryResource(id);  List<ZoneUpdate> updateZones=new ArrayList<ZoneUpdate>();  for (  SanZoneUpdateParam sz : updateSanZones.getUpdateZones()) {    ZoneUpdate updateZone=new ZoneUpdate(sz.getName());    validateZoneName(sz.getName(),device.getSystemType());    for (    String szm : sz.getAddMembers()) {      if (StringUtils.isEmpty(szm)) {        continue;      }      ZoneMember member=createZoneMember(szm);      updateZone.getAddZones().add(member);    }    for (    String szm : sz.getRemoveMembers()) {      if (StringUtils.isEmpty(szm)) {        continue;      }      ZoneMember member=createZoneMember(szm);      updateZone.getRemoveZones().add(member);    }    updateZones.add(updateZone);    auditOp(OperationTypeEnum.UPDATE_SAN_ZONE,true,AuditLogManager.AUDITOP_BEGIN,updateZone.getName(),device.getId().toString(),device.getLabel(),device.getPortNumber(),device.getUsername(),device.getSmisProviderIP(),device.getSmisPortNumber(),device.getSmisUserName(),device.getSmisUseSSL(),device.getVersion(),device.getUptime());  }  ArgValidator.checkFieldNotEmpty(updateZones,"zones");  Operation op=_dbClient.createTaskOpStatus(NetworkSystem.class,device.getId(),task,ResourceOperationTypeEnum.UPDATE_SAN_ZONE);  NetworkController controller=getNetworkController(device.getSystemType());  controller.updateSanZones(device.getId(),fabricId,fabricWwn,updateZones,false,task);  return toTask(device,task,op);}  }
class C{  private void floatingActionButtonClicked(){  if (mLoadNextChallengeOnFabClick) {    loadNextScreen();    mLoadNextChallengeOnFabClick=false;    return;  }  AnswerFragment currentFragment=(AnswerFragment)getSupportFragmentManager().findFragmentById(R.id.challenge_fragment);  AnswerFragment.ContinueMode continueMode=currentFragment.goToNextState();switch (continueMode) {case CONTINUE_HIDE_FAB:    mFloatingActionButton.setVisibility(View.GONE);  break;case CONTINUE_SHOW_FAB:mLoadNextChallengeOnFabClick=true;mFloatingActionButton.setImageResource(R.drawable.ic_navigate_next_white_24dp);break;case CONTINUE_ABORT:break;}}  }
class C{  public void remove() throws RecurrenceRuleException {  try {    rule.remove();  } catch (  GenericEntityException e) {    throw new RecurrenceRuleException(e.getMessage(),e);  }}  }
class C{  void disablePoll(){  pollDisabled.set(true);  LOG.info("inside disable poll, value of pollDisabled = " + pollDisabled);}  }
class C{  public static ConstantNode forFloat(float f){  return createPrimitive(JavaConstant.forFloat(f));}  }
class C{  public void fireSelectionChanged(final Set oldSelection,final Set selection){  if (isAdjusting()) {    return;  }  Object[] listeners=listenerList.getListenerList();  NetworkSelectionEvent e=null;  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == NetworkSelectionListener.class) {      if (e == null) {        e=new NetworkSelectionEvent(networkPanel,oldSelection,selection);      }      ((NetworkSelectionListener)listeners[i + 1]).selectionChanged(e);    }  }}  }
class C{  public PSPCommunicationException(String message,Reason reason,Throwable cause){  super(message,cause);  setMessageKey(getMessageKey() + "." + reason.toString());}  }
class C{  public BugObject(BugObject parent){  this.id=parent.getId();  this.companyId=parent.getCompanyId();  this.projectId=parent.getProjectId();  this.creatorId=parent.getCreatorId();  this.creatorName=parent.getCreatorName();  this.title=parent.getTitle();  this.description=parent.getDescription();  this.createdTime=parent.getCreatedTime();  this.completedTime=parent.getCompletedTime();  this.status=parent.getStatus();  this.priority=parent.getPriority();  this.assigneeId=parent.getAssigneeId();  this.deleted=parent.getDeleted();  this.dueTime=parent.getDueTime();  this.idInProject=parent.getIdInProject();  this.creatorAvatar=parent.getCreatorAvatar();}  }
class C{  public synchronized boolean canThreadDecoding(Thread t){  ThreadStatus status=mThreadStatus.get(t);  if (status == null) {    return true;  }  boolean result=(status.mState != State.CANCEL);  return result;}  }
class C{  public void init(){  if (initDepth.get() == null) {    initDepth.set(1);  } else {    initDepth.set(initDepth.get() + 1);  }  if (resourceCache.get() == null) {    resourceCache.set(new HashMap<String,Object>());  }  if (cacheLocked.get() == null) {    cacheLocked.set(Boolean.FALSE);  }}  }
class C{  private void constructFan(Node target,Graph graph){  addAllowableAssociates(target,graph);  prune(target,graph);}  }
class C{  public void testDatesWithEmptyStrings() throws Exception {  ObjectMapper mapper=new ObjectMapper();  assertNull(mapper.readValue(quote(""),java.util.Date.class));  assertNull(mapper.readValue(quote(""),java.util.Calendar.class));  assertNull(mapper.readValue(quote(""),java.sql.Date.class));}  }
class C{  public byte[] dataToRGBByteArray(final byte[] data,final int w,final int h){  return data;}  }
class C{  public void testWeaklyConsistentIteration(){  final LinkedBlockingDeque q=new LinkedBlockingDeque(3);  q.add(one);  q.add(two);  q.add(three);  for (Iterator it=q.iterator(); it.hasNext(); ) {    q.remove();    it.next();  }  assertEquals(0,q.size());}  }
class C{  @Override public synchronized void output(Vertex output){  if (!isEnabled()) {    return;  }  Vertex sense=output.mostConscious(Primitive.SENSE);  if (sense == null || (!getPrimitive().equals(sense.getData()))) {    return;  }  if (getWriter() == null) {    log("Missing writer",Level.WARNING);    return;  }  try {    getWriter().write(printInput(output));  } catch (  Exception failed) {    log(failed);  }}  }
class C{  public BTDownloadRowFilteredModel(TableLineFilter<BTDownloadDataLine> f){  if (f == null)   throw new NullPointerException("null filter");  FILTER=f;  HIDDEN=new ArrayList<>();}  }
class C{  public void load(){}  }
class C{  public Call(String functionName,Class<?> returnType,String[] variableNames,Class<?>[] variableTypes){  super(returnType,variableTypes);  this.functionName=functionName;  this.variableNames=variableNames;  this.variableTypes=variableTypes;}  }
class C{  public static char[] asCharArray(byte[] bytes){  char[] chars=new char[bytes.length];  for (int i=0; i != chars.length; i++) {    chars[i]=(char)(bytes[i] & 0xff);  }  return chars;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:01.540 -0500",hash_original_method="793C414C17B853DD540D3B3DFD8290DE",hash_generated_method="EBC18B24C94B678AD7792C2FF9ED4B51") public void activateCellBroadcastSms(int activate,Message response){  Log.e(LOG_TAG,"[CDMAPhone] activateCellBroadcastSms() is obsolete; use SmsManager");  response.sendToTarget();}  }
class C{  public FilterJoinBuilder indices(String... indices){  this.indices=indices;  return this;}  }
class C{  protected IgniteConfiguration configuration(String gridName){  IgniteConfiguration cfg=new IgniteConfiguration();  cfg.setGridName(gridName);  cfg.setLocalHost("127.0.0.1");  TcpDiscoverySpi discoSpi=new TcpDiscoverySpi();  discoSpi.setIpFinder(IP_FINDER);  cfg.setDiscoverySpi(discoSpi);  cfg.setCacheConfiguration(cacheConfiguration());  return cfg;}  }
class C{  @Override public void onReset(){  closeDialog();}  }
class C{  public JMenuItem createAudioMenuItem(JMenu menu,String label,String mnemonic,String accessibleDescription,Action action){  JRadioButtonMenuItem mi=(JRadioButtonMenuItem)menu.add(new JRadioButtonMenuItem(getString(label)));  audioMenuGroup.add(mi);  mi.setMnemonic(getMnemonic(mnemonic));  mi.getAccessibleContext().setAccessibleDescription(getString(accessibleDescription));  mi.addActionListener(action);  return mi;}  }
class C{  public ReOpenApplicationAction(Application app){  super(app);  putValue(Action.NAME,"OSX ReOpen Application");}  }
class C{  public void reset(){  length=0;}  }
class C{  public boolean isCircleImageEnabled(){  return mIsCircleImageEnabled;}  }
class C{  public void fadeOutLayer(int index){  mTransitionState=TRANSITION_STARTING;  mIsLayerOn[index]=false;  invalidateSelf();}  }
class C{  public void reset(){  this.stepFrequency=Settings.DEFAULT_STEP_FREQUENCY;  this.maximumTranslation=Settings.DEFAULT_MAXIMUM_TRANSLATION;  this.maximumTranslationSquared=Settings.DEFAULT_MAXIMUM_TRANSLATION * Settings.DEFAULT_MAXIMUM_TRANSLATION;  this.maximumRotation=Settings.DEFAULT_MAXIMUM_ROTATION;  this.maximumRotationSquared=Settings.DEFAULT_MAXIMUM_ROTATION * Settings.DEFAULT_MAXIMUM_ROTATION;  this.autoSleepingEnabled=true;  this.sleepLinearVelocity=Settings.DEFAULT_SLEEP_LINEAR_VELOCITY;  this.sleepLinearVelocitySquared=Settings.DEFAULT_SLEEP_LINEAR_VELOCITY * Settings.DEFAULT_SLEEP_LINEAR_VELOCITY;  this.sleepAngularVelocity=Settings.DEFAULT_SLEEP_ANGULAR_VELOCITY;  this.sleepAngularVelocitySquared=Settings.DEFAULT_SLEEP_ANGULAR_VELOCITY * Settings.DEFAULT_SLEEP_ANGULAR_VELOCITY;  this.sleepTime=Settings.DEFAULT_SLEEP_TIME;  this.velocityConstraintSolverIterations=Settings.DEFAULT_SOLVER_ITERATIONS;  this.positionConstraintSolverIterations=Settings.DEFAULT_SOLVER_ITERATIONS;  this.warmStartDistance=Settings.DEFAULT_WARM_START_DISTANCE;  this.warmStartDistanceSquared=Settings.DEFAULT_WARM_START_DISTANCE * Settings.DEFAULT_WARM_START_DISTANCE;  this.restitutionVelocity=Settings.DEFAULT_RESTITUTION_VELOCITY;  this.restitutionVelocitySquared=Settings.DEFAULT_RESTITUTION_VELOCITY * Settings.DEFAULT_RESTITUTION_VELOCITY;  this.linearTolerance=Settings.DEFAULT_LINEAR_TOLERANCE;  this.linearToleranceSquared=Settings.DEFAULT_LINEAR_TOLERANCE * Settings.DEFAULT_LINEAR_TOLERANCE;  this.maximumLinearCorrection=Settings.DEFAULT_MAXIMUM_LINEAR_CORRECTION;  this.maximumLinearCorrectionSquared=Settings.DEFAULT_MAXIMUM_LINEAR_CORRECTION * Settings.DEFAULT_MAXIMUM_LINEAR_CORRECTION;  this.angularTolerance=Settings.DEFAULT_ANGULAR_TOLERANCE;  this.angularToleranceSquared=Settings.DEFAULT_ANGULAR_TOLERANCE * Settings.DEFAULT_ANGULAR_TOLERANCE;  this.baumgarte=Settings.DEFAULT_BAUMGARTE;  this.continuousDetectionMode=ContinuousDetectionMode.ALL;}  }
class C{  private static boolean isTrouble(RVMField f){  return f.getDeclaringClass() == RVMType.JavaLangStringType;}  }
class C{  protected int midpoint(int min,int max){  return min + ((max - min) >> 1);}  }
class C{  public static <S extends HasDragCompleteHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    DragCompleteEvent event=new DragCompleteEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  public RSAPrivateKeySpec(BigInteger modulus,BigInteger privateExponent){  this.modulus=modulus;  this.privateExponent=privateExponent;}  }
class C{  public static long buff2long(byte[] bs,int offset){  return (((long)(bs[offset] >= 0 ? bs[offset] : 256 + bs[offset])) << 56) | (((long)(bs[offset + 1] >= 0 ? bs[offset + 1] : 256 + bs[offset + 1])) << 48) | (((long)(bs[offset + 2] >= 0 ? bs[offset + 2] : 256 + bs[offset + 2])) << 40)| (((long)(bs[offset + 3] >= 0 ? bs[offset + 3] : 256 + bs[offset + 3])) << 32)| (((long)(bs[offset + 4] >= 0 ? bs[offset + 4] : 256 + bs[offset + 4])) << 24)| (((long)(bs[offset + 5] >= 0 ? bs[offset + 5] : 256 + bs[offset + 5])) << 16)| (((long)(bs[offset + 6] >= 0 ? bs[offset + 6] : 256 + bs[offset + 6])) << 8)| (bs[offset + 7] >= 0 ? bs[offset + 7] : 256 + bs[offset + 7]);}  }
class C{  @Override public synchronized void clear(){  File[] files=mRootDirectory.listFiles();  if (files != null) {    for (    File file : files) {      file.delete();    }  }  mEntries.clear();  mTotalSize=0;  VolleyLog.d("Cache cleared.");}  }
class C{  public Matrix4x3f m31(float m31){  this.m31=m31;  properties&=~(PROPERTY_IDENTITY);  return this;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  protected void stopWorkers(Collection<WorkerThread> workers){  if (workers == null) {    workers=this.workers;  }  final Iterator<WorkerThread> iter=workers.iterator();  while (iter.hasNext()) {    final WorkerThread worker=iter.next();    if ((worker.getStatus() & (WorkerThread.sENDED | WorkerThread.sENDING)) == 0) {      worker.signalShutdown();      runningWorkers--;    }  }}  }
class C{  public static PolicyLimit findPolicyLimitByUserAndCounter(EntityManager em,PrincipalUser user,PolicyCounter counter){  TypedQuery<PolicyLimit> query=em.createNamedQuery("PolicyLimit.findPolicyLimitByUserAndCounter",PolicyLimit.class);  try {    query.setParameter("user",user);    query.setParameter("counter",counter);    return query.getSingleResult();  } catch (  NoResultException ex) {    return null;  }}  }
class C{  protected String makeFeatureDescription(){  String text;  Object snippet=this.getFeature().getSnippet();  if (snippet instanceof KMLSnippet) {    KMLSnippet kmlSnippet=(KMLSnippet)snippet;    Integer maxLines=kmlSnippet.getMaxLines();    if (maxLines == null || maxLines > 0)     text=kmlSnippet.getCharacters(); else     text=null;  } else {    text=this.getFeature().getDescription();  }  return EntityMap.replaceAll(this.stripHtmlTags(text));}  }
class C{  public InteractionIdentifier(UimaMonitor monitor,int minPatternsInCluster,int minWordOccurances,double threshold){  this.monitor=monitor;  this.minPatternsInCluster=minPatternsInCluster;  this.minWordOccurances=minWordOccurances;  this.threshold=threshold;}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'THREAD_REPLY'";  db.execSQL(sql);}  }
