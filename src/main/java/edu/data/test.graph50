class C{  private PolynomialFunction polynomial(double... c){  return new PolynomialFunction(c);}  }
class C{  static void expandFieldArray(Object instance,String fieldName,Object[] extraElements) throws NoSuchFieldException, IllegalArgumentException, IllegalAccessException {  Field jlrField=findField(instance,fieldName);  Object[] original=(Object[])jlrField.get(instance);  Object[] combined=(Object[])Array.newInstance(original.getClass().getComponentType(),original.length + extraElements.length);  System.arraycopy(extraElements,0,combined,0,extraElements.length);  System.arraycopy(original,0,combined,extraElements.length,original.length);  jlrField.set(instance,combined);}  }
class C{  public static int uniform(int n){  if (n <= 0)   throw new IllegalArgumentException("Parameter N must be positive");  return random.nextInt(n);}  }
class C{  public static int spToPx(Context context,float spValue){  final float fontScale=context.getResources().getDisplayMetrics().scaledDensity;  return (int)(spValue * fontScale + 0.5f);}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase(getSyntax());  CompareWindow viewer=(CompareWindow)getParent();  viewer.setVisible(false);}  }
class C{  public PhotosEditCommentQuery editComment(UserActor actor,int commentId){  return new PhotosEditCommentQuery(getClient(),actor,commentId);}  }
class C{  private void computeCoefficients(final int mu){  final double[] y0Dot=getGlobalPreviousState().getCompleteDerivative();  final double[] y1Dot=getGlobalCurrentState().getCompleteDerivative();  final double[] y1=getGlobalCurrentState().getCompleteState();  final double[] previousState=getGlobalPreviousState().getCompleteState();  final double h=getGlobalCurrentState().getTime() - getGlobalPreviousState().getTime();  for (int i=0; i < previousState.length; ++i) {    final double yp0=h * y0Dot[i];    final double yp1=h * y1Dot[i];    final double ydiff=y1[i] - previousState[i];    final double aspl=ydiff - yp1;    final double bspl=yp0 - ydiff;    polynomials[0][i]=previousState[i];    polynomials[1][i]=ydiff;    polynomials[2][i]=aspl;    polynomials[3][i]=bspl;    if (mu < 0) {      return;    }    final double ph0=0.5 * (previousState[i] + y1[i]) + 0.125 * (aspl + bspl);    polynomials[4][i]=16 * (yMidDots[0][i] - ph0);    if (mu > 0) {      final double ph1=ydiff + 0.25 * (aspl - bspl);      polynomials[5][i]=16 * (yMidDots[1][i] - ph1);      if (mu > 1) {        final double ph2=yp1 - yp0;        polynomials[6][i]=16 * (yMidDots[2][i] - ph2 + polynomials[4][i]);        if (mu > 2) {          final double ph3=6 * (bspl - aspl);          polynomials[7][i]=16 * (yMidDots[3][i] - ph3 + 3 * polynomials[5][i]);          for (int j=4; j <= mu; ++j) {            final double fac1=0.5 * j * (j - 1);            final double fac2=2 * fac1 * (j - 2)* (j - 3);            polynomials[j + 4][i]=16 * (yMidDots[j][i] + fac1 * polynomials[j + 2][i] - fac2 * polynomials[j][i]);          }        }      }    }  }}  }
class C{  public boolean isDone(){  return this.taskManager_.isDone();}  }
class C{  public boolean isDrawHighlightArrowEnabled(){  return mDrawHighlightArrow;}  }
class C{  public static String toString(InputStream input,Charset encoding) throws IOException {  StringBuilderWriter sw=new StringBuilderWriter();  copy(input,sw,encoding);  return sw.toString();}  }
class C{  public int size(){  return args.length;}  }
class C{  public void addLanguage(Integer languageId){  if (languageId != null) {    addLanguage(languageId.toString());  } else {    Logger.warn(this,"Tried to add languageId Null!");  }}  }
class C{  public boolean force_gc(){  return soot.PhaseOptions.getBoolean(options,"force-gc");}  }
class C{  public SafeHtml processHtml(SafeHtml html){  return html;}  }
class C{  public StatelessSection(int headerResourceId,int footerResourceId,int itemResourceId){  this(headerResourceId,itemResourceId);  this.footerResourceId=footerResourceId;  this.hasFooter=true;}  }
class C{  public ViewsFinder filteredWith(@NonNull final ViewFilter viewFilter){  FunctionUtils.checkParameterIsNotNull("viewFilter",viewFilter);  viewFilters.add(viewFilter);  return this;}  }
class C{  public static String numberToString(Number number) throws JSONException {  if (number == null) {    throw new JSONException("Null pointer");  }  testValidity(number);  String string=number.toString();  if (string.indexOf('.') > 0 && string.indexOf('e') < 0 && string.indexOf('E') < 0) {    while (string.endsWith("0")) {      string=string.substring(0,string.length() - 1);    }    if (string.endsWith(".")) {      string=string.substring(0,string.length() - 1);    }  }  return string;}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  Buffer pinNew(String fileName,PageFormatter fmtr){synchronized (prepareAnchor(fileName)) {    int lastReplacedBuff=this.lastReplacedBuff;    int currBlk=(lastReplacedBuff + 1) % bufferPool.length;    while (currBlk != lastReplacedBuff) {      Buffer buff=bufferPool[currBlk];      if (buff.getExternalLock().tryLock()) {        try {          if (!buff.isPinned()) {            this.lastReplacedBuff=currBlk;            BlockId oldBlk=buff.block();            if (oldBlk != null)             blockMap.remove(oldBlk);            buff.assignToNew(fileName,fmtr);            blockMap.put(buff.block(),buff);            if (!buff.isPinned())             numAvailable.decrementAndGet();            buff.pin();            return buff;          }        }  finally {          buff.getExternalLock().unlock();        }      }      currBlk=(currBlk + 1) % bufferPool.length;    }    return null;  }}  }
class C{  public Retry retry(Task task){  return new Retry(this.executor_,task);}  }
class C{  public BaseViewHolder linkify(int viewId){  TextView view=getView(viewId);  Linkify.addLinks(view,Linkify.ALL);  return this;}  }
class C{  public AdaptableList add(Iterator e){  while (e.hasNext()) {    add((IAdaptable)e.next());  }  return this;}  }
class C{  @Path(path="edit",login=true,log=Model.METHOD_POST) public void edit(){  if (method.isPost()) {    long id=login.getId();    JSON j=this.getJSON();    User u=User.loadById(id);    if (u != null) {      String password=this.getString("password");      if (!X.isEmpty(password)) {        u.update(V.create("password",password));        JSON jo=new JSON();        jo.put(X.STATE,200);        this.response(jo);        return;      } else {        u.update(V.create().copy(j,"nickname","title","email","phone"));        this.set(X.MESSAGE,lang.get("save.success"));        u=User.loadById(id);        AuthToken.delete(id);        this.setUser(u);      }      this.set(u.getJSON());    } else {      this.set(X.ERROR,lang.get("save.failed"));    }    this.set(j);  } else {    User u=User.loadById(login.getId());    this.set("u",u);    JSON jo=new JSON();    u.toJSON(jo);    this.set(jo);  }  this.show("/user/user.edit.html");}  }
class C{  public int optInt(String key,int defaultValue){  try {    return this.getInt(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public void init$Children(){  children=new ASTNode[2];}  }
class C{  public FieldRefNode findGlobalFieldRefNode(Object baseValue,SparkField field){  VarNode base=findGlobalVarNode(baseValue);  if (base == null)   return null;  return base.dot(field);}  }
class C{  private static float patternMatchVariance(int[] counters,int[] pattern,float maxIndividualVariance){  int numCounters=counters.length;  int total=0;  int patternLength=0;  for (int i=0; i < numCounters; i++) {    total+=counters[i];    patternLength+=pattern[i];  }  if (total < patternLength) {    return Float.POSITIVE_INFINITY;  }  float unitBarWidth=(float)total / patternLength;  maxIndividualVariance*=unitBarWidth;  float totalVariance=0.0f;  for (int x=0; x < numCounters; x++) {    int counter=counters[x];    float scaledPattern=pattern[x] * unitBarWidth;    float variance=counter > scaledPattern ? counter - scaledPattern : scaledPattern - counter;    if (variance > maxIndividualVariance) {      return Float.POSITIVE_INFINITY;    }    totalVariance+=variance;  }  return totalVariance / total;}  }
class C{  public static <T>T parse(File xml,String[] xsds,String pkg,Class<T> resultClass) throws XmlParsingException, FileNotFoundException {  return parse(new FileInputStream(xml),xml.getAbsolutePath(),xsds,pkg,resultClass);}  }
class C{  public static void xml(String xml){  Logger.xml(xml);}  }
class C{  public boolean isBandInformation(){  return bandInformation;}  }
class C{  public void testWikipediaToCorpus(){  String wikipedia="<doc id=\"123\" url=\"http://www.bitfunnel.org/123\" title=\"one\">\n" + "This is the body text.\n" + "</doc>\n"+ "<doc id=\"456\" url=\"http://www.bitfunnel.org/456\" title=\"two\">\n"+ "Some more body text.\n"+ "</doc>\n";  byte[] expected=("000000000000007b\00000\000one\000\00001\000body\000text\000\000\000" + "00000000000001c8\00000\000two\000\00001\000some\000more\000body\000text\000\000\000" + "\000").getBytes(StandardCharsets.UTF_8);  InputStream input=new ByteArrayInputStream(wikipedia.getBytes(StandardCharsets.UTF_8));  ByteArrayOutputStream output=new ByteArrayOutputStream();  WikipediaDumpProcessor processor=new WikipediaDumpProcessor(input,output);  try {    processor.ProcessFile();    byte[] outputBytes=output.toByteArray();    assertTrue(Arrays.equals(outputBytes,expected));  } catch (  Exception e) {    System.out.println("Exception");    e.printStackTrace();    fail();  }}  }
class C{  public int removeItemFrom(long playlistId,long audioId){  return resolver.delete(MediaStore.Audio.Playlists.Members.getContentUri("external",playlistId),MediaStore.Audio.Playlists.Members.AUDIO_ID + " = ?",new String[]{String.valueOf(audioId)});}  }
class C{  public void clearStyle(){  styler.clearStyle();}  }
class C{  public void init$Children(){}  }
class C{  public boolean isApplicable(){  return getViewer() instanceof ViewerBase;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ResurrectPositional_A_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1201016,skilltarget,skillcaster,skillname);}  }
class C{  public AemContextMenu openContextMenu(int n){  contextMenu.open(currentScope.findElements(By.cssSelector(SELECTOR_FOR_COMPONENT_IN_PARSYS)).get(n));  return contextMenu;}  }
class C{  public MarketSearchQueryWithExtended tags(Integer... value){  return unsafeParam("tags",value);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_QUEST_GET_REWARD_ERROR_NO_QUEST_ITEM_MULTIPLE(String value1,String value0){  return new SM_SYSTEM_MESSAGE(1300603,value1,value0);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_OneTimeBoostSkillAttack_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200844,skillcaster,skillname);}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final int fuzzyThreshold,final float scaleFactor,final boolean isTouchEvent){  Log.i(TAG,"deltaY====" + deltaY);  Log.i(TAG,"scrollY====" + scrollY);  Log.i(TAG,"scrollRange====" + scrollRange);  Log.i(TAG,"fuzzyThreshold====" + fuzzyThreshold);  Log.i(TAG,"scaleFactor====" + scaleFactor);  Log.i(TAG,"isTouchEvent====" + isTouchEvent);  final int deltaValue, currentScrollValue, scrollValue;switch (view.getPullToRefreshScrollDirection()) {case HORIZONTAL:    deltaValue=deltaX;  scrollValue=scrollX;currentScrollValue=view.getScrollX();break;case VERTICAL:default :deltaValue=deltaY;scrollValue=scrollY;currentScrollValue=view.getScrollY();break;}if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {final Mode mode=view.getMode();if (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {final int newScrollValue=(deltaValue + scrollValue);if (PullToRefreshBase.DEBUG) {Log.d(LOG_TAG,"OverScroll. DeltaX: " + deltaX + ", ScrollX: "+ scrollX+ ", DeltaY: "+ deltaY+ ", ScrollY: "+ scrollY+ ", NewY: "+ newScrollValue+ ", ScrollRange: "+ scrollRange+ ", CurrentScroll: "+ currentScrollValue);}if (newScrollValue < (0 - fuzzyThreshold)) {if (mode.showHeaderLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}Log.i(LOG_TAG,"scaleFactor====" + scaleFactor);Log.i(LOG_TAG,"currentScrollValue====" + currentScrollValue);Log.i(LOG_TAG,"newScrollValue====" + newScrollValue);view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue)));}} else if (newScrollValue > (scrollRange + fuzzyThreshold)) {if (mode.showFooterLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}Log.i(LOG_TAG,"scaleFactor====" + scaleFactor);Log.i(LOG_TAG,"currentScrollValue====" + currentScrollValue);Log.i(LOG_TAG,"newScrollValue====" + newScrollValue);Log.i(LOG_TAG,"newScrollValue====" + scrollRange);view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));}} else if (Math.abs(newScrollValue) <= fuzzyThreshold || Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {view.setState(State.RESET);}} else if (isTouchEvent && State.OVERSCROLLING == view.getState()) {view.setState(State.RESET);}}}  }
class C{  public boolean onUpdateAnimation(long time,boolean jumpToEnd){  boolean finished=true;  if (mLayoutAnimations != null) {    if (jumpToEnd) {      finished=mLayoutAnimations.finished();      mLayoutAnimations.updateAndFinish();    } else {      finished=mLayoutAnimations.update(time);    }    if (finished || jumpToEnd) {      mLayoutAnimations=null;      onAnimationFinished();    }    requestUpdate();  }  return finished;}  }
class C{  public static void computeConstraints(ScoutWidget[] list){  ScoutProbabilities table=new ScoutProbabilities();  table.computeConstraints(list);  table.applyConstraints(list);}  }
class C{  public void onMainFrameLoadStarted(String url){}  }
class C{  public void remove(String key){  urlParams.remove(key);  streamParams.remove(key);  fileParams.remove(key);  urlParamsWithObjects.remove(key);}  }
class C{  protected WallDeleteCommentQuery commentId(int value){  return unsafeParam("comment_id",value);}  }
class C{  public boolean isSecondLane(BaseLayoutManager lm,int itemPosition,int lane){  if (lane == 0 || itemPosition == 0) {    return false;  }  int previousLane=Lanes.NO_LANE;  int previousPosition=itemPosition - 1;  while (previousPosition >= 0) {    lm.getLaneForPosition(mTempLaneInfo,previousPosition,Direction.END);    previousLane=mTempLaneInfo.startLane;    if (previousLane != lane) {      break;    }    previousPosition--;  }  final int previousLaneSpan=lm.getLaneSpanForPosition(previousPosition);  if (previousLane == 0) {    return (lane == previousLane + previousLaneSpan);  }  return false;}  }
class C{  public void init$Children(){  children=new ASTNode[2];}  }
class C{  public Object putResource(Object key,Object value){  return (objectCache.put(key,value));}  }
class C{  public PrivateStore(Player owner){  this.owner=owner;  this.items=new LinkedHashMap<Integer,TradePSItem>();}  }
class C{  public boolean isSubsetOf(XSWildcardDecl superWildcard){  if (superWildcard == null)   return false;  if (superWildcard.fType == NSCONSTRAINT_ANY) {    return true;  }  if (fType == NSCONSTRAINT_NOT) {    if (superWildcard.fType == NSCONSTRAINT_NOT && fNamespaceList[0] == superWildcard.fNamespaceList[0]) {      return true;    }  }  if (fType == NSCONSTRAINT_LIST) {    if (superWildcard.fType == NSCONSTRAINT_LIST && subset2sets(fNamespaceList,superWildcard.fNamespaceList)) {      return true;    }    if (superWildcard.fType == NSCONSTRAINT_NOT && !elementInSet(superWildcard.fNamespaceList[0],fNamespaceList) && !elementInSet(ABSENT,fNamespaceList)) {      return true;    }  }  return false;}  }
class C{  public void addNewText(){  if (symbolTree == null) {    return;  }  Object oldValueObj=sldWriter.encodeSLD(null,SelectedSymbol.getInstance().getSld());  TextSymbolizer newTextSymbolizer=DefaultSymbols.createDefaultTextSymbolizer();  DefaultMutableTreeNode ruleNode=getRuleTreeNode();  SelectedSymbol.getInstance().addSymbolizerToRule(newTextSymbolizer);  DefaultMutableTreeNode newNode=sldTree.addObject(ruleNode,newTextSymbolizer,true);  if (newNode != null) {    TreePath newPath=getPath(newNode);    symbolTree.setSelectionPath(newPath);    Object newValueObj=sldWriter.encodeSLD(null,SelectedSymbol.getInstance().getSld());    UndoManager.getInstance().addUndoEvent(new UndoEvent(sldTree.getUndoObject(),getClass().getName(),oldValueObj,newValueObj));  }}  }
class C{  protected MarketAddToAlbumQuery albumIds(int... value){  return unsafeParam("album_ids",value);}  }
class C{  private HashMutableDirectedGraph<EquivalentValue> simpleConservativeInfoFlowAnalysis(SootMethod sm){  if (!sm.isConcrete())   return triviallyConservativeInfoFlowAnalysis(sm);  Body b=sm.retrieveActiveBody();  UnitGraph g=new ExceptionalUnitGraph(b);  HashSet<EquivalentValue> fieldsStaticsParamsAccessed=new HashSet<EquivalentValue>();  for (  Unit u : g) {    Stmt s=(Stmt)u;    if (s instanceof IdentityStmt) {      IdentityStmt is=(IdentityStmt)s;      IdentityRef ir=(IdentityRef)is.getRightOp();      if (ir instanceof ParameterRef) {        ParameterRef pr=(ParameterRef)ir;        fieldsStaticsParamsAccessed.add(InfoFlowAnalysis.getNodeForParameterRef(sm,pr.getIndex()));      }    }    if (s.containsFieldRef()) {      FieldRef ref=s.getFieldRef();      if (ref instanceof StaticFieldRef) {        StaticFieldRef sfr=(StaticFieldRef)ref;        fieldsStaticsParamsAccessed.add(InfoFlowAnalysis.getNodeForFieldRef(sm,sfr.getField()));      } else       if (ref instanceof InstanceFieldRef) {        InstanceFieldRef ifr=(InstanceFieldRef)ref;        Value base=ifr.getBase();        if (base instanceof Local) {          if (dfa.includesInnerFields() || ((!sm.isStatic()) && base.equivTo(b.getThisLocal())))           fieldsStaticsParamsAccessed.add(InfoFlowAnalysis.getNodeForFieldRef(sm,ifr.getField()));        }      }    }  }  HashMutableDirectedGraph<EquivalentValue> dataFlowGraph=new MemoryEfficientGraph<EquivalentValue>();  Iterator<EquivalentValue> accessedIt1=fieldsStaticsParamsAccessed.iterator();  while (accessedIt1.hasNext()) {    EquivalentValue o=accessedIt1.next();    dataFlowGraph.addNode(o);  }  for (int i=0; i < sm.getParameterCount(); i++) {    EquivalentValue parameterRefEqVal=InfoFlowAnalysis.getNodeForParameterRef(sm,i);    if (!dataFlowGraph.containsNode(parameterRefEqVal))     dataFlowGraph.addNode(parameterRefEqVal);  }  for (  SootField sf : sm.getDeclaringClass().getFields()) {    if (sf.isStatic() || !sm.isStatic()) {      EquivalentValue fieldRefEqVal=InfoFlowAnalysis.getNodeForFieldRef(sm,sf);      if (!dataFlowGraph.containsNode(fieldRefEqVal))       dataFlowGraph.addNode(fieldRefEqVal);    }  }  SootClass superclass=sm.getDeclaringClass();  if (superclass.hasSuperclass())   superclass=sm.getDeclaringClass().getSuperclass();  while (superclass.hasSuperclass()) {    for (    SootField scField : superclass.getFields()) {      if (scField.isStatic() || !sm.isStatic()) {        EquivalentValue fieldRefEqVal=InfoFlowAnalysis.getNodeForFieldRef(sm,scField);        if (!dataFlowGraph.containsNode(fieldRefEqVal))         dataFlowGraph.addNode(fieldRefEqVal);      }    }    superclass=superclass.getSuperclass();  }  ParameterRef returnValueRef=null;  if (sm.getReturnType() != VoidType.v()) {    returnValueRef=new ParameterRef(sm.getReturnType(),-1);    dataFlowGraph.addNode(InfoFlowAnalysis.getNodeForReturnRef(sm));  }  if (!sm.isStatic()) {    dataFlowGraph.addNode(InfoFlowAnalysis.getNodeForThisRef(sm));    fieldsStaticsParamsAccessed.add(InfoFlowAnalysis.getNodeForThisRef(sm));  }  accessedIt1=fieldsStaticsParamsAccessed.iterator();  while (accessedIt1.hasNext()) {    EquivalentValue r=accessedIt1.next();    Ref rRef=(Ref)r.getValue();    if (!(rRef.getType() instanceof RefLikeType) && !dfa.includesPrimitiveInfoFlow())     continue;    Iterator<EquivalentValue> accessedIt2=fieldsStaticsParamsAccessed.iterator();    while (accessedIt2.hasNext()) {      EquivalentValue s=accessedIt2.next();      Ref sRef=(Ref)s.getValue();      if (rRef instanceof ThisRef && sRef instanceof InstanceFieldRef)       ; else       if (sRef instanceof ThisRef && rRef instanceof InstanceFieldRef)       ; else       if (sRef instanceof ParameterRef && dfa.includesInnerFields())       ; else       if (sRef.getType() instanceof RefLikeType)       dataFlowGraph.addEdge(r,s);    }    if (returnValueRef != null && (returnValueRef.getType() instanceof RefLikeType || dfa.includesPrimitiveInfoFlow()))     dataFlowGraph.addEdge(r,InfoFlowAnalysis.getNodeForReturnRef(sm));  }  return dataFlowGraph;}  }
class C{  public TextDrawable(String text,int r,int g,int b,float radius){  mRadius=radius;  mText=text;  mBackground=new Paint();  mBackground.setStyle(Paint.Style.FILL);  mBackground.setAntiAlias(true);  mBackground.setColor(Color.rgb(r,g,b));  mTextPaint=new Paint();  mTextPaint.setColor(Color.WHITE);  mTextPaint.setTextSize(radius);  mTextPaint.setAntiAlias(true);  mTextPaint.setTextAlign(Paint.Align.CENTER);}  }
class C{  public FileWriterWithEncoding(File file,CharsetEncoder encoding) throws IOException {  this(file,encoding,false);}  }
class C{  public S1Angle angle(){  if (isEmpty()) {    return S1Angle.radians(-1);  }  return S1Angle.radians(2 * Math.asin(Math.sqrt(0.5 * height)));}  }
class C{  public JSONWriter endArray() throws JSONException {  return this.end('a',']');}  }
class C{  private void initPresenter(){  this.photoInfoPresenter=new PhotoInfoImplementor(photoInfoModel,this);  this.downloadPresenter=new DownloadImplementor(downloadModel);  this.scrollPresenter=new ScrollImplementor(scrollModel,this);  this.popupManagePresenter=new PhotoActivityPopupManageImplementor(this);  this.browsablePresenter=new BrowsableImplementor(browsableModel,this);}  }
class C{  public static AudioInputStream downSampling(AudioInputStream ais,int targetSamplingRate) throws Exception {  float currentSamplingRate=ais.getFormat().getSampleRate();  if (targetSamplingRate >= currentSamplingRate) {    throw new Exception("Requested sampling rate " + targetSamplingRate + " is greater than or equal to Audio sampling rate "+ currentSamplingRate);  }  int noOfbitsPerSample=ais.getFormat().getSampleSizeInBits();  int channels=ais.getFormat().getChannels();  int nBytes=ais.available();  boolean bigEndian=ais.getFormat().isBigEndian();  double[] samples=new AudioDoubleDataSource(ais).getAllData();  double filterCutof=0.5 * targetSamplingRate / currentSamplingRate;  LowPassFilter filter=new LowPassFilter(filterCutof);  samples=filter.apply(samples);  double duration=(double)samples.length / currentSamplingRate;  int newSampleLen=(int)Math.floor(duration * targetSamplingRate);  double fraction=(double)currentSamplingRate / targetSamplingRate;  double[] newSignal=new double[newSampleLen];  for (int i=0; i < newSignal.length; i++) {    double posIdx=fraction * i;    int nVal=(int)Math.floor(posIdx);    double diffVal=posIdx - nVal;    newSignal[i]=(diffVal * samples[nVal + 1]) + ((1 - diffVal) * samples[nVal]);  }  boolean signed=true;  AudioFormat af=new AudioFormat(targetSamplingRate,noOfbitsPerSample,channels,signed,bigEndian);  DDSAudioInputStream oais=new DDSAudioInputStream(new BufferedDoubleDataSource(newSignal),af);  return oais;}  }
class C{  public Vector2f subtract(Vector2f vec,Vector2f store){  if (store == null) {    store=new Vector2f();  }  store.x=x - vec.x;  store.y=y - vec.y;  return store;}  }
class C{  public AdsDeleteClientsQuery(VkApiClient client,UserActor actor,int accountId,String ids){  super(client,"ads.deleteClients",Integer.class);  accessToken(actor.getAccessToken());  accountId(accountId);  ids(ids);}  }
class C{  protected GroupsGetQueryWithExtended extended(Boolean value){  return unsafeParam("extended",value);}  }
class C{  @Override public void comment(XMLString text,Augmentations augs) throws XNIException {  if (fInDTD) {    if (fInternalSubset != null && !fInDTDExternalSubset) {      fInternalSubset.append("<!--");      if (text.length > 0) {        fInternalSubset.append(text.ch,text.offset,text.length);      }      fInternalSubset.append("-->");    }    return;  }  if (!fIncludeComments || fFilterReject) {    return;  }  if (!fDeferNodeExpansion) {    Comment comment=fDocument.createComment(text.toString());    setCharacterData(false);    fCurrentNode.appendChild(comment);    if (fDOMFilter != null && !fInEntityRef && (fDOMFilter.getWhatToShow() & NodeFilter.SHOW_COMMENT) != 0) {      short code=fDOMFilter.acceptNode(comment);switch (code) {case LSParserFilter.FILTER_INTERRUPT:{          throw Abort.INSTANCE;        }case LSParserFilter.FILTER_REJECT:{      }case LSParserFilter.FILTER_SKIP:{      fCurrentNode.removeChild(comment);      fFirstChunk=true;      return;    }default :{  }}}} else {int comment=fDeferredDocumentImpl.createDeferredComment(text.toString());fDeferredDocumentImpl.appendChild(fCurrentNodeIndex,comment);}}  }
class C{  protected DateTimeData parse(String str) throws SchemaDateTimeException {  DateTimeData date=new DateTimeData(str,this);  int len=str.length();  int end=getYearMonth(str,0,len,date);  date.day=DAY;  parseTimeZone(str,end,len,date);  validateDateTime(date);  saveUnnormalized(date);  if (date.utc != 0 && date.utc != 'Z') {    normalize(date);  }  date.position=0;  return date;}  }
class C{  public boolean containsGroup(String group){  return groups.contains(group);}  }
class C{  private FieldRotation<T> composeInternal(final FieldRotation<T> r){  return new FieldRotation<T>(r.q0.multiply(q0).subtract(r.q1.multiply(q1).add(r.q2.multiply(q2)).add(r.q3.multiply(q3))),r.q1.multiply(q0).add(r.q0.multiply(q1)).add(r.q2.multiply(q3).subtract(r.q3.multiply(q2))),r.q2.multiply(q0).add(r.q0.multiply(q2)).add(r.q3.multiply(q1).subtract(r.q1.multiply(q3))),r.q3.multiply(q0).add(r.q0.multiply(q3)).add(r.q1.multiply(q2).subtract(r.q2.multiply(q1))),false);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_OneTimeBoostSkillAttack_A_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200997,skilltarget,skillcaster,skillname);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_DELETE_CASH_ITEM_BY_TIMEOUT_IN_WAREHOUSE(String value0){  return new SM_SYSTEM_MESSAGE(1400406,value0);}  }
class C{  @Override public void any(Augmentations augs) throws XNIException {}  }
class C{  public void assertPingAPIServer(int expectedStatus,APIServerConnector apiServerConnector){  if (!TestBase.pingSuccess) {    response=getPing(expectedStatus,apiServerConnector);    List<Map<String,Object>> list=response.jsonPath().get("componentHealths");    Assert.assertTrue(list.size() >= 2,"Health is reported for at least 2 components. In all: " + Integer.toString(list.size()));    for (    Map temp : list) {      String k=(String)temp.get("componentName");      Boolean v=(Boolean)temp.get("healthy");      LOGGER.info("Ping reports: " + k + ": "+ v);      Assert.assertTrue(v,"Component " + k + "'s healthy value");    }    TestBase.pingSuccess=true;  }}  }
class C{  @Override public void close(){  idx=0;  mark=0;}  }
class C{  public PollsEditQuery question(String value){  return unsafeParam("question",value);}  }
class C{  public float angle(Vector other){  double dot=dot(other) / (length() * other.length());  return (float)Math.acos(dot);}  }
class C{  public static void v(String tag,String msg){  if (sLevel > LEVEL_VERBOSE) {    return;  }  Log.v(tag,msg);}  }
class C{  private boolean zzRefill() throws java.io.IOException {  if (zzStartRead > 0) {    System.arraycopy(zzBuffer,zzStartRead,zzBuffer,0,zzEndRead - zzStartRead);    zzEndRead-=zzStartRead;    zzCurrentPos-=zzStartRead;    zzMarkedPos-=zzStartRead;    zzPushbackPos-=zzStartRead;    zzStartRead=0;  }  if (zzCurrentPos >= zzBuffer.length) {    char newBuffer[]=new char[zzCurrentPos * 2];    System.arraycopy(zzBuffer,0,newBuffer,0,zzBuffer.length);    zzBuffer=newBuffer;  }  int numRead=zzReader.read(zzBuffer,zzEndRead,zzBuffer.length - zzEndRead);  if (numRead < 0) {    return true;  } else {    zzEndRead+=numRead;    return false;  }}  }
class C{  public boolean isSynchronizing(Account account,OCFile file){  return mSyncFolderHandler.isSynchronizing(account,file.getRemotePath());}  }
class C{  public static void createTable(Database db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "\"COLLECT\" ("+ "\"ID\" INTEGER NOT NULL ,"+ "\"DESC\" TEXT,"+ "\"URL\" TEXT PRIMARY KEY NOT NULL ,"+ "\"COLLECT_DATE\" INTEGER NOT NULL );");}  }
class C{  @VisibleForTesting static OMAEntry parseOMAEntry(String entry){  int index=entry.indexOf(",");  long downloadId=Long.parseLong(entry.substring(0,index));  return new OMAEntry(downloadId,entry.substring(index + 1));}  }
class C{  private void init(){  logId=UUID.randomUUID().toString();  info=new LogBlock(logId);  info.add(Durations.class);  info.add(Threads.class);  info.add(Preface.class);  getLoginfoOrder().stream().filter(null).forEachOrdered(null);  times.clear();  threadIds.clear();  threadIds.add(Thread.currentThread().getName());  MDC.put(ID_KEY,logId);}  }
class C{  public void addColor(int color){  if (mColors == null)   mColors=new ArrayList<Integer>();  mColors.add(color);}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  protected H2DatabaseType(){}  }
class C{  public void apply(NexusStreamParser np) throws Exception {}  }
class C{  public static float sqrt(float fValue){  return (float)Math.sqrt(fValue);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_MENTOR_CANT_ENTER(String worldname0){  return new SM_SYSTEM_MESSAGE(1400766,worldname0);}  }
class C{  public HttpClientProvider(String login,String password,String url){  this.login=login;  this.password=password;  this.url=url;}  }
class C{  public Vector<Integer> generateNormalText(int iMeanSize,int iGrammarVincinity){  int iTextSize=(int)(gr.demokritos.iit.jinsect.algorithms.statistics.statisticalCalculation.getPoissonNumber(iMeanSize));  Vector<Integer> vText=new Vector<Integer>(iTextSize);  while (iTextSize-- > 0) {    Vector<Integer> vCur=new Vector();    vCur.addAll(vText.subList(Math.max(vText.size() - iGrammarVincinity,0),vText.size()));    vText.add(generateNextWord(vCur));    System.err.print(".");  }  return vText;}  }
class C{  public DisjointExtended(Expression expression1,Expression expression2){  super(expression1,expression2);}  }
class C{  public PotionData(PotionType type,boolean extended,boolean upgraded){  Validate.notNull(type,"Potion Type must not be null");  Validate.isTrue(!upgraded || type.isUpgradeable(),"Potion Type is not upgradable");  Validate.isTrue(!extended || type.isExtendable(),"Potion Type is not extendable");  Validate.isTrue(!upgraded || !extended,"Potion cannot be both extended and upgraded");  this.type=type;  this.extended=extended;  this.upgraded=upgraded;}  }
class C{  private void logSearchPanelLoadDuration(boolean wasPrefetch,long durationMs){  ContextualSearchUma.logSearchPanelLoadDuration(wasPrefetch,durationMs);}  }
class C{  public InterfasPartida(){  initialize();}  }
class C{  protected void readExternal(ObjectInput in,PlatformLogicalVersion version) throws IOException, ClassNotFoundException {}  }
class C{  public void asin(final double[] operand,final int operandOffset,final double[] result,final int resultOffset){  double[] function=new double[1 + order];  final double x=operand[operandOffset];  function[0]=FastMath.asin(x);  if (order > 0) {    final double[] p=new double[order];    p[0]=1;    final double x2=x * x;    final double f=1.0 / (1 - x2);    double coeff=FastMath.sqrt(f);    function[1]=coeff * p[0];    for (int n=2; n <= order; ++n) {      double v=0;      p[n - 1]=(n - 1) * p[n - 2];      for (int k=n - 1; k >= 0; k-=2) {        v=v * x2 + p[k];        if (k > 2) {          p[k - 2]=(k - 1) * p[k - 1] + (2 * n - k) * p[k - 3];        } else         if (k == 2) {          p[0]=p[1];        }      }      if ((n & 0x1) == 0) {        v*=x;      }      coeff*=f;      function[n]=coeff * v;    }  }  compose(operand,operandOffset,function,result,resultOffset);}  }
class C{  public Min(){  n=0;  value=Double.NaN;}  }
class C{  private static String doGetFullPath(String filename,boolean includeSeparator){  if (filename == null) {    return null;  }  int prefix=getPrefixLength(filename);  if (prefix < 0) {    return null;  }  if (prefix >= filename.length()) {    if (includeSeparator) {      return getPrefix(filename);    } else {      return filename;    }  }  int index=indexOfLastSeparator(filename);  if (index < 0) {    return filename.substring(0,prefix);  }  int end=index + (includeSeparator ? 1 : 0);  if (end == 0) {    end++;  }  return filename.substring(0,end);}  }
class C{  public XMLCatalogResolver(String[] catalogs){  this(catalogs,true);}  }
class C{  public boolean isApplicable(){  return true;}  }
class C{  public Future<?> scheduleRespawn(){  if (!getOwner().getSpawn().isNoRespawn()) {    return RespawnService.scheduleRespawnTask(getOwner());  }  return null;}  }
class C{  @Override public void incrementAccessCount(){  accessCount.incrementAndGet();}  }
class C{  public boolean writeHeader(OutputStream os){  try {    writeInt(os,CACHE_MAGIC);    writeString(os,key);    writeString(os,etag == null ? "" : etag);    writeLong(os,serverDate);    writeLong(os,lastModified);    writeLong(os,ttl);    writeLong(os,softTtl);    writeStringStringMap(responseHeaders,os);    os.flush();    return true;  } catch (  IOException e) {    VolleyLog.d("%s",e.toString());    return false;  }}  }
class C{  public void testWriteReadFull() throws Exception {  ByteArrayOutputStream out=new ByteArrayOutputStream(0);  ObjectOutputStream os=new ObjectOutputStream(out);  os.writeObject(full);  ObjectInputStream is=new ObjectInputStream(new ByteArrayInputStream(out.toByteArray()));  FailOverPolicy copy=(FailOverPolicy)is.readObject();  is.close();  os.close();  assertTrue(helper.areEquals(full,copy));}  }
class C{  public GenericGF(int primitive,int size,int b){  this.primitive=primitive;  this.size=size;  this.generatorBase=b;  expTable=new int[size];  logTable=new int[size];  int x=1;  for (int i=0; i < size; i++) {    expTable[i]=x;    x*=2;    if (x >= size) {      x^=primitive;      x&=size - 1;    }  }  for (int i=0; i < size - 1; i++) {    logTable[expTable[i]]=i;  }  zero=new GenericGFPoly(this,new int[]{0});  one=new GenericGFPoly(this,new int[]{1});}  }
class C{  DescriptiveStatistics(int windowSize,boolean hasInitialValues,double[] initialValues){  if (windowSize < 1 && windowSize != INFINITE_WINDOW) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NOT_POSITIVE_WINDOW_SIZE,windowSize);  }  if (hasInitialValues) {    MathUtils.checkNotNull(initialValues,LocalizedCoreFormats.INPUT_ARRAY);  }  this.windowSize=windowSize;  int initialCapacity=this.windowSize < 0 ? 100 : this.windowSize;  this.eDA=hasInitialValues ? new ResizableDoubleArray(initialValues) : new ResizableDoubleArray(initialCapacity);  maxImpl=new Max();  minImpl=new Min();  sumImpl=new Sum();  sumOfSquaresImpl=new SumOfSquares();  meanImpl=new Mean();  varianceImpl=new Variance();  geometricMeanImpl=new GeometricMean();  kurtosisImpl=new Kurtosis();  skewnessImpl=new Skewness();  percentileImpl=new Percentile();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_UNCHANGE_ITEM_SKIN_SUCCEED(String value0){  return new SM_SYSTEM_MESSAGE(1400372,value0);}  }
class C{  public VideoGetAlbumsQueryWithExtended(VkApiClient client,UserActor actor){  super(client,"video.getAlbums",GetAlbumsExtendedResponse.class);  accessToken(actor.getAccessToken());  extended(true);}  }
class C{  public static FloatBuffer createFloatBuffer(Vector2f... data){  if (data == null) {    return null;  }  FloatBuffer buff=createFloatBuffer(2 * data.length);  for (int x=0; x < data.length; x++) {    if (data[x] != null) {      buff.put(data[x].x).put(data[x].y);    } else {      buff.put(0).put(0);    }  }  buff.flip();  return buff;}  }
class C{  @Override public Filter createFilter(List<Expression> parameterList){  DWithinImpl filter=null;  if ((parameterList == null) || (parameterList.size() != 2)) {    filter=new DWithinExtended();  } else {    filter=new DWithinExtended(parameterList.get(0),parameterList.get(1));  }  return filter;}  }
class C{  private int tempoRule(Element segment){  Element prosody=(Element)DomUtils.getAncestor(segment,MaryXML.PROSODY);  if (prosody != null) {    ProsodicSettings settings=(ProsodicSettings)prosodyMap.get(prosody);    assert settings != null;    int rate=settings.rate();    int durFactor=10000 / rate;    Allophone ph=allophoneSet.getAllophone(segment.getAttribute("p"));    if (ph != null) {      if (ph.isVowel())       durFactor=(durFactor * settings.vowelDuration()) / 100; else       if (ph.isPlosive())       durFactor=(durFactor * settings.plosiveDuration()) / 100; else       if (ph.isFricative())       durFactor=(durFactor * settings.fricativeDuration()) / 100; else       if (ph.isNasal())       durFactor=(durFactor * settings.nasalDuration()) / 100; else       if (ph.isLiquid())       durFactor=(durFactor * settings.liquidDuration()) / 100; else       if (ph.isGlide())       durFactor=(durFactor * settings.glideDuration()) / 100;    }    return durFactor;  }  return 100;}  }
class C{  public YamlConfigurationOptions indent(int value){  Validate.isTrue(value >= 2,"Indent must be at least 2 characters");  Validate.isTrue(value <= 9,"Indent cannot be greater than 9 characters");  this.indent=value;  return this;}  }
class C{  public FileExistsException(File file){  super("File " + file + " exists");}  }
class C{  public Future execute(CompletionCallback<Object> callback){  if (callback == null)   throw new IllegalArgumentException("Callback cannot be null");  TaskManagerImpl taskManager=new TaskManagerImpl(this.executor_,this.conditional_,this.task_,callback);  this.executor_.execute(taskManager);  return new Future(taskManager);}  }
class C{  public MessagesDenyMessagesFromCommunityQuery denyMessagesFromCommunity(UserActor actor,int groupId){  return new MessagesDenyMessagesFromCommunityQuery(getClient(),actor,groupId);}  }
class C{  @Override @Nullable protected final JComponent createCenterPanel(){  myCenterPanel=new JPanel(new BorderLayout());  myCenterPanel.add(myWizard.getContentPane(),BorderLayout.CENTER);  myCenterPanel.add(myIcon,BorderLayout.WEST);  return myCenterPanel;}  }
class C{  public boolean isZoomOverItem(){  return m_zoomOverItem;}  }
class C{  public void clickMenuItemWithUrl(Context context,int menuIndex,String url){  Intent addedIntent=new Intent();  addedIntent.setData(Uri.parse(url));  try {    PendingIntent pendingIntent=mMenuEntries.get(menuIndex).second;    pendingIntent.send(context,0,addedIntent,mOnFinished,null);  } catch (  CanceledException e) {    Log.e(TAG,"Custom tab in Chrome failed to send pending intent.");  }}  }
class C{  public static File join(File dir,String... paths){  if (paths.length == 0) {    return dir;  }  return new File(dir,PATH_JOINER.join(paths));}  }
class C{  public DoublePoint(final int[] point){  this.point=new double[point.length];  for (int i=0; i < point.length; i++) {    this.point[i]=point[i];  }}  }
class C{  public static long microsec2ticks(long us,double tempoMPQ,int resolution){  return (long)((((double)us) * resolution) / tempoMPQ);}  }
class C{  @Override public void exceptionCaught(ChannelHandlerContext ctx,ExceptionEvent e) throws Exception {  try {    throw e.getCause();  } catch (  ClientException ce) {    if (ctx.getChannel().isOpen())     ctx.getChannel().write(CLIENT_ERROR);  }catch (  Throwable tr) {    logger.error("error",tr);    if (ctx.getChannel().isOpen())     ctx.getChannel().write(ERROR);  }}  }
class C{  public CubicBezier(BezierRenderer renderer,FloatBuffer vboBuffer,float p0x,float p0y,float p3x,float p3y,float p1x,float p1y,float p2x,float p2y,float[] color){  this.mRenderer=renderer;  this.starEndPoints=new float[]{p0x,p0y,p3x,p3y};  this.controlPoints=new float[]{p1x,p1y,p2x,p2y};  this.color=color;  final int buffers[]=new int[1];  GLES20.glGenBuffers(1,buffers,0);  GLES20.glBindBuffer(GLES20.GL_ARRAY_BUFFER,buffers[0]);  GLES20.glBufferData(GLES20.GL_ARRAY_BUFFER,vboBuffer.capacity() * Const.BYTES_PER_FLOAT,vboBuffer,GLES20.GL_STATIC_DRAW);  GLES20.glBindBuffer(GLES20.GL_ARRAY_BUFFER,0);  mBufferId=buffers[0];  vboBuffer=null;}  }
class C{  private ZKLogMetadataForWriter(URI uri,String logName,String logIdentifier,Versioned<byte[]> maxLSSNData,Versioned<byte[]> maxTxIdData,Versioned<byte[]> allocationData){  super(uri,logName,logIdentifier);  this.maxLSSNData=maxLSSNData;  this.maxTxIdData=maxTxIdData;  this.allocationData=allocationData;}  }
class C{  private int assignComplexOrdinal(CarbonDimension parentDimension,int complexDimensionOrdianl){  for (int i=0; i < parentDimension.getNumberOfChild(); i++) {    CarbonDimension dimension=parentDimension.getListOfChildDimensions().get(i);    if (dimension.getNumberOfChild() > 0) {      dimension.setComplexTypeOridnal(++complexDimensionOrdianl);      complexDimensionOrdianl=assignComplexOrdinal(dimension,complexDimensionOrdianl);    } else {      parentDimension.getListOfChildDimensions().get(i).setComplexTypeOridnal(++complexDimensionOrdianl);    }  }  return complexDimensionOrdianl;}  }
class C{  public void watchForUpdates(){  Preconditions.checkState(client != null,"You need to call init() before watchForUpdates().");  running=true;  executorService.submit(null);}  }
class C{  public Cluster(Matrix mean){  reset(mean);}  }
class C{  public final void ensureValid(RetryStrategy retryStrategy){  ensureNoErrors(validate(retryStrategy));}  }
class C{  public String toString(){  return (constant_pool[this_class].toString(constant_pool));}  }
class C{  public final static double min(double Num1,double Num2){  return -max(-Num1,-Num2);}  }
class C{  private soot.Local createLocal(polyglot.types.LocalInstance localInst){  soot.Type sootType=Util.getSootType(localInst.type());  String name=localInst.name();  soot.Local sootLocal=createLocal(name,sootType);  localsMap.put(new polyglot.util.IdentityKey(localInst),sootLocal);  return sootLocal;}  }
class C{  public DetectorResult detect() throws NotFoundException {  ResultPoint[] cornerPoints=rectangleDetector.detect();  ResultPoint pointA=cornerPoints[0];  ResultPoint pointB=cornerPoints[1];  ResultPoint pointC=cornerPoints[2];  ResultPoint pointD=cornerPoints[3];  List<ResultPointsAndTransitions> transitions=new ArrayList<>(4);  transitions.add(transitionsBetween(pointA,pointB));  transitions.add(transitionsBetween(pointA,pointC));  transitions.add(transitionsBetween(pointB,pointD));  transitions.add(transitionsBetween(pointC,pointD));  Collections.sort(transitions,new ResultPointsAndTransitionsComparator());  ResultPointsAndTransitions lSideOne=transitions.get(0);  ResultPointsAndTransitions lSideTwo=transitions.get(1);  Map<ResultPoint,Integer> pointCount=new HashMap<>();  increment(pointCount,lSideOne.getFrom());  increment(pointCount,lSideOne.getTo());  increment(pointCount,lSideTwo.getFrom());  increment(pointCount,lSideTwo.getTo());  ResultPoint maybeTopLeft=null;  ResultPoint bottomLeft=null;  ResultPoint maybeBottomRight=null;  for (  Map.Entry<ResultPoint,Integer> entry : pointCount.entrySet()) {    ResultPoint point=entry.getKey();    Integer value=entry.getValue();    if (value == 2) {      bottomLeft=point;    } else {      if (maybeTopLeft == null) {        maybeTopLeft=point;      } else {        maybeBottomRight=point;      }    }  }  if (maybeTopLeft == null || bottomLeft == null || maybeBottomRight == null) {    throw NotFoundException.getNotFoundInstance();  }  ResultPoint[] corners={maybeTopLeft,bottomLeft,maybeBottomRight};  ResultPoint.orderBestPatterns(corners);  ResultPoint bottomRight=corners[0];  bottomLeft=corners[1];  ResultPoint topLeft=corners[2];  ResultPoint topRight;  if (!pointCount.containsKey(pointA)) {    topRight=pointA;  } else   if (!pointCount.containsKey(pointB)) {    topRight=pointB;  } else   if (!pointCount.containsKey(pointC)) {    topRight=pointC;  } else {    topRight=pointD;  }  int dimensionTop=transitionsBetween(topLeft,topRight).getTransitions();  int dimensionRight=transitionsBetween(bottomRight,topRight).getTransitions();  if ((dimensionTop & 0x01) == 1) {    dimensionTop++;  }  dimensionTop+=2;  if ((dimensionRight & 0x01) == 1) {    dimensionRight++;  }  dimensionRight+=2;  BitMatrix bits;  ResultPoint correctedTopRight;  if (4 * dimensionTop >= 7 * dimensionRight || 4 * dimensionRight >= 7 * dimensionTop) {    correctedTopRight=correctTopRightRectangular(bottomLeft,bottomRight,topLeft,topRight,dimensionTop,dimensionRight);    if (correctedTopRight == null) {      correctedTopRight=topRight;    }    dimensionTop=transitionsBetween(topLeft,correctedTopRight).getTransitions();    dimensionRight=transitionsBetween(bottomRight,correctedTopRight).getTransitions();    if ((dimensionTop & 0x01) == 1) {      dimensionTop++;    }    if ((dimensionRight & 0x01) == 1) {      dimensionRight++;    }    bits=sampleGrid(image,topLeft,bottomLeft,bottomRight,correctedTopRight,dimensionTop,dimensionRight);  } else {    int dimension=Math.min(dimensionRight,dimensionTop);    correctedTopRight=correctTopRight(bottomLeft,bottomRight,topLeft,topRight,dimension);    if (correctedTopRight == null) {      correctedTopRight=topRight;    }    int dimensionCorrected=Math.max(transitionsBetween(topLeft,correctedTopRight).getTransitions(),transitionsBetween(bottomRight,correctedTopRight).getTransitions());    dimensionCorrected++;    if ((dimensionCorrected & 0x01) == 1) {      dimensionCorrected++;    }    bits=sampleGrid(image,topLeft,bottomLeft,bottomRight,correctedTopRight,dimensionCorrected,dimensionCorrected);  }  return new DetectorResult(bits,new ResultPoint[]{topLeft,bottomLeft,bottomRight,correctedTopRight});}  }
class C{  public StreamOutputConsole(PrintStream osOut,boolean bOutputProgressPercentage){  Output=osOut;  OutputProgressPercentage=bOutputProgressPercentage;}  }
class C{  public static Bitmap byteToBitmap(byte[] b){  return (b == null || b.length == 0) ? null : BitmapFactory.decodeByteArray(b,0,b.length);}  }
class C{  public String toString(){  return new String(b,0,i_end);}  }
class C{  public MetricInstance(String metricName,MetricMaker maker,String... dependencyMetricNames){  this.metricName=metricName;  this.maker=maker;  this.dependencyMetricNames=Arrays.asList(dependencyMetricNames);}  }
class C{  public Pair<String,String> next(String firstWordInHeader){  while (hasNext()) {    Pair<String,String> pair=next();    if (Basic.getFirstWord(Basic.swallowLeadingGreaterSign(pair.get1())).equals(firstWordInHeader))     return pair;  }  return null;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_UNION_INVITE_HIS_LEADER(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1400559,value0,value1);}  }
class C{  @Override public void writeString(byte[] str,int offset,int length) throws IOException {  if (str == null)   writeInt(0); else {    if (useCompression && length >= Compressor.MIN_SIZE_FOR_DEFLATION) {      if (byteBuffer.length < length)       byteBuffer=new byte[2 * length];      int numberOfBytes=compressor.deflateString2ByteArray(str,offset,length,byteBuffer);      writeInt(numberOfBytes);      io.write(byteBuffer,0,Math.abs(numberOfBytes));    } else {      writeInt(length);      io.write(str,offset,length);    }  }}  }
class C{  public void resumeEncoding(){  this.suspendEncoding=false;}  }
class C{  public BaseResponseContext dispatchRequest(JsonPath jsonPath,String requestType,Map<String,Set<String>> parameters,RepositoryMethodParameterProvider parameterProvider,@SuppressWarnings("SameParameterValue") RequestBody requestBody){  try {    BaseController controller=controllerRegistry.getController(jsonPath,requestType);    Class<?> resourceClass=getRequestedResource(jsonPath);    QueryAdapter queryAdapter=queryAdapterBuilder.build(resourceClass,parameters);    DefaultFilterRequestContext context=new DefaultFilterRequestContext(jsonPath,queryAdapter,parameterProvider,requestBody);    DefaultFilterChain chain=new DefaultFilterChain(controller);    return chain.doFilter(context);  } catch (  Exception e) {    Optional<JsonApiExceptionMapper> exceptionMapper=exceptionMapperRegistry.findMapperFor(e.getClass());    if (exceptionMapper.isPresent()) {      return exceptionMapper.get().toErrorResponse(e);    } else {      logger.error("failed to process request",e);      throw e;    }  }}  }
class C{  public static void checkConstraints(InvocationConstraints constraints) throws UnsupportedConstraintException {  if (constraints == null) {    return;  }  for (Iterator i=constraints.requirements().iterator(); i.hasNext(); ) {    InvocationConstraint c=(InvocationConstraint)i.next();    if (!supported(c)) {      throw new UnsupportedConstraintException("unsupported constraint: " + c);    }  }}  }
class C{  public void postPaint(Display d,Graphics2D g){}  }
class C{  private synchronized int _activityCount(){  return m_activities.size();}  }
class C{  public static byte[] toUTF8(String s){  CharsetEncoder encoder=Charset.forName("UTF-8").newEncoder();  encoder.onMalformedInput(CodingErrorAction.REPORT);  encoder.onUnmappableCharacter(CodingErrorAction.REPORT);  try {    ByteBuffer bb=encoder.encode(CharBuffer.wrap(s));    byte[] bytes=new byte[bb.limit()];    bb.position(0);    bb.get(bytes,0,bytes.length);    return bytes;  } catch (  CharacterCodingException cce) {    throw new IllegalArgumentException(cce);  }}  }
class C{  public void addHeaderView(View v,Object data,boolean isSelectable){  ListAdapter adapter=getAdapter();  if (adapter != null && !(adapter instanceof HeaderViewGridAdapter)) {    throw new IllegalStateException("Cannot add header view to grid -- setAdapter has already been called.");  }  ViewGroup.LayoutParams lyp=v.getLayoutParams();  FixedViewInfo info=new FixedViewInfo();  FrameLayout fl=new FullWidthFixedViewLayout(getContext());  if (lyp != null) {    v.setLayoutParams(new FrameLayout.LayoutParams(lyp.width,lyp.height));    fl.setLayoutParams(new LayoutParams(lyp.width,lyp.height));  }  fl.addView(v);  info.view=v;  info.viewContainer=fl;  info.data=data;  info.isSelectable=isSelectable;  mHeaderViewInfos.add(info);  if (adapter != null) {    ((HeaderViewGridAdapter)adapter).notifyDataSetChanged();  }}  }
class C{  public static double angleToDefaultAngle(double angle){  return (angle + Math.PI) % (-TWOPI) + Math.PI;}  }
class C{  public static IOFileFilter nameFileFilter(String name){  return new NameFileFilter(name);}  }
class C{  public final boolean equals(Object obj){  return super.equals(obj);}  }
class C{  protected UsersGetFollowersQueryWithFields fields(UserField... value){  return unsafeParam("fields",value);}  }
class C{  private void storeLegionMember(LegionMember legionMember,boolean newMember){  if (newMember) {    addCachedLegionMember(legionMember);    DAOManager.getDAO(LegionMemberDAO.class).saveNewLegionMember(legionMember);  } else {    DAOManager.getDAO(LegionMemberDAO.class).storeLegionMember(legionMember.getObjectId(),legionMember);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_DUEL_YOU_LOSE(String value0){  return new SM_SYSTEM_MESSAGE(1300099,value0);}  }
class C{  public ShortStringTranslator(){  list=new ArrayList<String>();  map=new HashMap<String,Short>();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DispelDeBuffMental_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200663,skillcaster,skillname);}  }
class C{  public TagKeyValueMapConverter(){  this(false);}  }
class C{  public void init$Children(){}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_IMMUNED_MAGIC_OTHER_HOSTILE(String skilltarget,String skillcaster){  return new SM_SYSTEM_MESSAGE(1250221,skilltarget,skillcaster);}  }
class C{  @Override public void separator(short separator,Augmentations augs) throws XNIException {  if (fDTDGrammar != null)   fDTDGrammar.separator(separator,augs);  if (fDTDContentModelHandler != null) {    fDTDContentModelHandler.separator(separator,augs);  }}  }
class C{  public static int patchLessMemory(RandomAccessFile oldFile,int oldsize,byte[] diffBuf,int diffSize,File newFile,int extLen) throws IOException {  if (oldFile == null || oldsize <= 0) {    return RETURN_OLD_FILE_ERR;  }  if (newFile == null) {    return RETURN_NEW_FILE_ERR;  }  if (diffBuf == null || diffSize <= 0) {    return RETURN_DIFF_FILE_ERR;  }  int commentLenPos=oldsize - extLen - 2;  if (commentLenPos <= 2) {    return RETURN_OLD_FILE_ERR;  }  DataInputStream diffIn=new DataInputStream(new ByteArrayInputStream(diffBuf,0,diffSize));  diffIn.skip(8);  long ctrlBlockLen=diffIn.readLong();  long diffBlockLen=diffIn.readLong();  int newsize=(int)diffIn.readLong();  diffIn.close();  InputStream in=new ByteArrayInputStream(diffBuf,0,diffSize);  in.skip(BSUtil.HEADER_SIZE);  DataInputStream ctrlBlockIn=new DataInputStream(new GZIPInputStream(in));  in=new ByteArrayInputStream(diffBuf,0,diffSize);  in.skip(ctrlBlockLen + BSUtil.HEADER_SIZE);  InputStream diffBlockIn=new GZIPInputStream(in);  in=new ByteArrayInputStream(diffBuf,0,diffSize);  in.skip(diffBlockLen + ctrlBlockLen + BSUtil.HEADER_SIZE);  InputStream extraBlockIn=new GZIPInputStream(in);  OutputStream outStream=new FileOutputStream(newFile);  try {    int oldpos=0;    int newpos=0;    int[] ctrl=new int[3];    while (newpos < newsize) {      for (int i=0; i <= 2; i++) {        ctrl[i]=ctrlBlockIn.readInt();      }      if (newpos + ctrl[0] > newsize) {        outStream.close();        return RETURN_DIFF_FILE_ERR;      }      byte[] buffer=new byte[ctrl[0]];      if (!BSUtil.readFromStream(diffBlockIn,buffer,0,ctrl[0])) {        outStream.close();        return RETURN_DIFF_FILE_ERR;      }      byte[] oldBuffer=new byte[ctrl[0]];      if (oldFile.read(oldBuffer,0,ctrl[0]) < ctrl[0]) {        outStream.close();        return RETURN_DIFF_FILE_ERR;      }      for (int i=0; i < ctrl[0]; i++) {        if (oldpos + i == commentLenPos) {          oldBuffer[i]=0;          oldBuffer[i + 1]=0;        }        if ((oldpos + i >= 0) && (oldpos + i < oldsize)) {          buffer[i]+=oldBuffer[i];        }      }      outStream.write(buffer);      newpos+=ctrl[0];      oldpos+=ctrl[0];      if (newpos + ctrl[1] > newsize) {        outStream.close();        return RETURN_DIFF_FILE_ERR;      }      buffer=new byte[ctrl[1]];      if (!BSUtil.readFromStream(extraBlockIn,buffer,0,ctrl[1])) {        outStream.close();        return RETURN_DIFF_FILE_ERR;      }      outStream.write(buffer);      outStream.flush();      newpos+=ctrl[1];      oldpos+=ctrl[2];      oldFile.seek(oldpos);    }    ctrlBlockIn.close();    diffBlockIn.close();    extraBlockIn.close();  }  finally {    oldFile.close();    outStream.close();  }  return RETURN_SUCCESS;}  }
class C{  public DistanceEstimator(Distribution tmSymbolsPerRank,Distribution tmNonSymbolsPerRank,NGramSizeEstimator nseEstimator){  SymbolsPerRank=new Distribution();  SymbolsPerRank.asTreeMap().putAll(tmSymbolsPerRank.asTreeMap());  NonSymbolsPerRank=new Distribution();  NonSymbolsPerRank.asTreeMap().putAll(tmNonSymbolsPerRank.asTreeMap());  MinRank=Math.min((Integer)tmSymbolsPerRank.asTreeMap().firstKey(),(Integer)tmNonSymbolsPerRank.asTreeMap().firstKey());  MaxRank=Math.max((Integer)tmSymbolsPerRank.asTreeMap().lastKey(),(Integer)tmNonSymbolsPerRank.asTreeMap().lastKey());  Estimator=nseEstimator;}  }
class C{  public static Map<String,Object> createEmailAddressVerification(DispatchContext dctx,Map<String,? extends Object> context){  Delegator delegator=dctx.getDelegator();  String emailAddress=(String)context.get("emailAddress");  String verifyHash=null;  String expireTime=EntityUtilProperties.getPropertyValue("security","email_verification.expire.hours",delegator);  Integer expTime=Integer.valueOf(expireTime);  Calendar calendar=Calendar.getInstance();  calendar.add(Calendar.HOUR,expTime.intValue());  Date date=calendar.getTime();  Timestamp expireDate=UtilDateTime.toTimestamp(date);  SecureRandom secureRandom=new SecureRandom();synchronized (ContactMechServices.class) {    while (true) {      Long random=secureRandom.nextLong();      verifyHash=HashCrypt.digestHash("MD5",Long.toString(random).getBytes());      List<GenericValue> emailAddVerifications=null;      try {        emailAddVerifications=EntityQuery.use(delegator).from("EmailAddressVerification").where("verifyHash",verifyHash).queryList();      } catch (      GenericEntityException e) {        Debug.logError(e.getMessage(),module);        return ServiceUtil.returnError(e.getMessage());      }      if (UtilValidate.isEmpty(emailAddVerifications)) {        GenericValue emailAddressVerification=delegator.makeValue("EmailAddressVerification");        emailAddressVerification.set("emailAddress",emailAddress);        emailAddressVerification.set("verifyHash",verifyHash);        emailAddressVerification.set("expireDate",expireDate);        try {          delegator.create(emailAddressVerification);        } catch (        GenericEntityException e) {          Debug.logError(e.getMessage(),module);          return ServiceUtil.returnError(e.getMessage());        }        break;      }    }  }  Map<String,Object> result=ServiceUtil.returnSuccess();  result.put("verifyHash",verifyHash);  return result;}  }
class C{  public static AlertDialog showOneButtonsDialog(final Activity activity,final String title,final String text,final String buttonText,final DialogInterface.OnClickListener buttonListener){  if (activity == null || activity.isFinishing()) {    return null;  }  return new AlertDialog.Builder(activity).setTitle(title).setMessage(text).setPositiveButton(buttonText,buttonListener).show();}  }
class C{  public static byte[] loadImageAs32bitRGB(File imageLoc) throws IOException {  BufferedImage img=ImageIO.read(imageLoc);  return int32RGBBufferedImageToByteArray(img);}  }
class C{  public boolean isClosed(){  return journalWriter == null;}  }
class C{  private float sizeOfBlackWhiteBlackRun(int fromX,int fromY,int toX,int toY){  boolean steep=Math.abs(toY - fromY) > Math.abs(toX - fromX);  if (steep) {    int temp=fromX;    fromX=fromY;    fromY=temp;    temp=toX;    toX=toY;    toY=temp;  }  int dx=Math.abs(toX - fromX);  int dy=Math.abs(toY - fromY);  int error=-dx / 2;  int xstep=fromX < toX ? 1 : -1;  int ystep=fromY < toY ? 1 : -1;  int state=0;  int xLimit=toX + xstep;  for (int x=fromX, y=fromY; x != xLimit; x+=xstep) {    int realX=steep ? y : x;    int realY=steep ? x : y;    if ((state == 1) == image.get(realX,realY)) {      if (state == 2) {        return MathUtils.distance(x,y,fromX,fromY);      }      state++;    }    error+=dy;    if (error > 0) {      if (y == toY) {        break;      }      y+=ystep;      error-=dx;    }  }  if (state == 2) {    return MathUtils.distance(toX + xstep,toY,fromX,fromY);  }  return Float.NaN;}  }
class C{  public static SymbolTypeConfig parseSymbolTypeConfig(Class<?> localisationClass,Class<?> panelId,XMLFieldConfigEnumValue valueObj){  SymbolTypeConfig config=new SymbolTypeConfig(panelId);  String groupName=valueObj.getGroupName();  boolean isSeparateGroup=valueObj.isSeparateGroup();  if (groupName != null) {    config.setGroupName(groupName);  }  config.setSeparateGroup(isSeparateGroup);  for (  XMLFieldConfigEnumValueItem itemObj : valueObj.getItem()) {    config.addOption(itemObj.getId(),getLocalisedText(localisationClass,itemObj.getLabel()));  }  FieldList fieldList=valueObj.getFieldList();  if (fieldList != null) {    for (    XMLFieldConfigEnumValueField field : fieldList.getField()) {      config.addField(field.getId(),field.isEnabled());    }  }  return config;}  }
class C{  public static double hypot(double a,double b){  double r;  if (Math.abs(a) > Math.abs(b)) {    r=b / a;    r=Math.abs(a) * Math.sqrt(1 + r * r);  } else   if (b != 0) {    r=a / b;    r=Math.abs(b) * Math.sqrt(1 + r * r);  } else {    r=0.0;  }  return r;}  }
class C{  private void characterize(final BSPTree<S> node,final SubHyperplane<S> sub,final List<BSPTree<S>> splitters){  if (node.getCut() == null) {    final boolean inside=(Boolean)node.getAttribute();    if (inside) {      addInsideTouching(sub,splitters);    } else {      addOutsideTouching(sub,splitters);    }  } else {    final Hyperplane<S> hyperplane=node.getCut().getHyperplane();    final SubHyperplane.SplitSubHyperplane<S> split=sub.split(hyperplane);switch (split.getSide()) {case PLUS:      characterize(node.getPlus(),sub,splitters);    break;case MINUS:  characterize(node.getMinus(),sub,splitters);break;case BOTH:splitters.add(node);characterize(node.getPlus(),split.getPlus(),splitters);characterize(node.getMinus(),split.getMinus(),splitters);splitters.remove(splitters.size() - 1);break;default :throw MathRuntimeException.createInternalError();}}}  }
class C{  public MaxPerAttributeGenerator(int maxTasksPerSelectedAttribute,AttributeSelector attributeSelector){  this.maxTasksPerSelectedAttribute=maxTasksPerSelectedAttribute;  this.attributeSelector=attributeSelector;}  }
class C{  private boolean convertSecurityRequirementExtension(Map<String,Object> extensions,AuthenticationRule.Builder authenticationRuleBuilder,Location location){  if (VendorExtensionUtils.hasExtension(extensions,SECURITY_REQUIREMENT_EXTENSION,List.class,diagCollector)) {    List<Map<String,SecurityReq>> securityRequirements=getSecurityRequirements(extensions.get(SECURITY_REQUIREMENT_EXTENSION));    if (securityRequirements == null) {      diagCollector.addDiag(Diag.error(location,"Extension %s does not have the valid value. Please check " + "the documentation for its schema",SECURITY_REQUIREMENT_EXTENSION));      return false;    }    for (    Map<String,SecurityReq> schemas : securityRequirements) {      for (      Map.Entry<String,SecurityReq> schema : schemas.entrySet()) {        String authSchemaName=schema.getKey();        if (!authProviders.containsKey(authSchemaName)) {          diagCollector.addDiag(Diag.error(location,"Schema '%s' referenced in extension %s does not have the " + "valid value. Please check the documentation for its schema.",authSchemaName,SECURITY_REQUIREMENT_EXTENSION));          return false;        }        List<String> audiences=schema.getValue().getAudiences();        if (audiences == null) {          diagCollector.addDiag(Diag.error(location,"Extension %s does not have the valid value. Please " + "check the documentation for its schema",SECURITY_REQUIREMENT_EXTENSION));          return false;        }        AuthRequirement.Builder authRequirement=AuthRequirement.newBuilder();        authRequirement.setProviderId(authSchemaName);        authRequirement.setAudiences(Joiner.on(",").join(audiences));        authenticationRuleBuilder.addRequirements(authRequirement);      }    }    return true;  }  return false;}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("scrollTo node=");  String name=np.getWordRespectCase();  np.matchWordIgnoreCase(";");  if (getViewer() instanceof ViewerBase) {    ViewerBase viewerBase=(ViewerBase)getViewer();    for (Node v=viewerBase.getGraph().getFirstNode(); v != null; v=v.getNext()) {      String label=viewerBase.getLabel(v);      if (label != null && label.equals(name)) {        viewerBase.scrollToNode(v);        break;      }    }  }}  }
class C{  public FeatureVector readFeatureVector(int currentUnitIndex,ByteBuffer bb) throws IOException {  byte[] bytes=new byte[numByteFeatures];  bb.get(bytes);  short[] shorts=new short[numShortFeatures];  for (int i=0; i < shorts.length; i++) {    shorts[i]=bb.getShort();  }  float[] floats=new float[numContinuousFeatures];  for (int i=0; i < floats.length; i++) {    floats[i]=bb.getFloat();  }  return new FeatureVector(bytes,shorts,floats,currentUnitIndex);}  }
class C{  protected void sendPacket(GsServerPacket msg){  getConnection().sendPacket(msg);}  }
class C{  public boolean canSetLong(){  return canSet(long.class);}  }
class C{  public boolean isSelected(final int position){  return getSelectedItems().contains(position);}  }
class C{  public CacheHeader(String key,Entry entry){  this.key=key;  this.size=entry.data.length;  this.etag=entry.etag;  this.serverDate=entry.serverDate;  this.lastModified=entry.lastModified;  this.ttl=entry.ttl;  this.softTtl=entry.softTtl;  this.responseHeaders=entry.responseHeaders;}  }
class C{  private String genGetColumnMethod(Field field){  return genGetColumnMethod(field.getType());}  }
class C{  private void finishKbMode(boolean updateDisplays){  mInKbMode=false;  if (!mTypedTimes.isEmpty()) {    int values[]=getEnteredTime(null);    mTimePicker.setTime(values[0],values[1]);    if (!mIs24HourMode) {      mTimePicker.setHalfDay(values[2]);    }    mTypedTimes.clear();  }  if (updateDisplays) {    updateDisplay(false);  }}  }
class C{  public GroupsGetBannedQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  private BootUtil(){  throw new AssertionError("org.jini.rio.boot.BootUtil cannot be instantiated");}  }
class C{  @Override public double[] rank(double[] data){  IntDoublePair[] ranks=new IntDoublePair[data.length];  for (int i=0; i < data.length; i++) {    ranks[i]=new IntDoublePair(data[i],i);  }  List<Integer> nanPositions=null;switch (nanStrategy) {case MAXIMAL:    recodeNaNs(ranks,Double.POSITIVE_INFINITY);  break;case MINIMAL:recodeNaNs(ranks,Double.NEGATIVE_INFINITY);break;case REMOVED:ranks=removeNaNs(ranks);break;case FIXED:nanPositions=getNanPositions(ranks);break;case FAILED:nanPositions=getNanPositions(ranks);if (nanPositions.size() > 0) {throw new MathIllegalArgumentException(LocalizedCoreFormats.NAN_NOT_ALLOWED);}break;default :throw MathRuntimeException.createInternalError();}Arrays.sort(ranks);double[] out=new double[ranks.length];int pos=1;out[ranks[0].getPosition()]=pos;List<Integer> tiesTrace=new ArrayList<Integer>();tiesTrace.add(ranks[0].getPosition());for (int i=1; i < ranks.length; i++) {if (Double.compare(ranks[i].getValue(),ranks[i - 1].getValue()) > 0) {pos=i + 1;if (tiesTrace.size() > 1) {resolveTie(out,tiesTrace);}tiesTrace=new ArrayList<Integer>();tiesTrace.add(ranks[i].getPosition());} else {tiesTrace.add(ranks[i].getPosition());}out[ranks[i].getPosition()]=pos;}if (tiesTrace.size() > 1) {resolveTie(out,tiesTrace);}if (nanStrategy == NaNStrategy.FIXED) {restoreNaNs(out,nanPositions);}return out;}  }
class C{  @SuppressLint("NewApi") public static void postInvalidateOnAnimation(View view){  if (Build.VERSION.SDK_INT >= 16)   view.postInvalidateOnAnimation(); else   view.postInvalidateDelayed(10);}  }
class C{  private void buildVmatchEdges(){  for (Iterator iter=pag.loadSourcesIterator(); iter.hasNext(); ) {    final FieldRefNode frn1=(FieldRefNode)iter.next();    for (Iterator iter2=pag.storeInvSourcesIterator(); iter2.hasNext(); ) {      final FieldRefNode frn2=(FieldRefNode)iter2.next();      VarNode base1=frn1.getBase();      VarNode base2=frn2.getBase();      if (frn1.getField().equals(frn2.getField())) {        if (base1.getP2Set().hasNonEmptyIntersection(base2.getP2Set())) {          Node[] src=pag.loadLookup(frn1);          Node[] dst=pag.storeInvLookup(frn2);          for (int i=0; i < src.length; i++) {            vmatches.put(src[i],dst);          }          for (int i=0; i < dst.length; i++) {            invVmatches.put(dst[i],src);          }        }      }    }  }}  }
class C{  public VideoEditQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  private void parse(){  if (lexer == null) {    tokens=null;    return;  }  List<Token> toks=new ArrayList<Token>(getLength() / 10);  long ts=System.nanoTime();  int len=getLength();  try {    Segment seg=new Segment();    getText(0,getLength(),seg);    CharArrayReader reader=new CharArrayReader(seg.array,seg.offset,seg.count);    lexer.yyreset(reader);    Token token;    while ((token=lexer.yylex()) != null) {      toks.add(token);    }  } catch (  BadLocationException ex) {    log.log(Level.SEVERE,null,ex);  }catch (  IOException ex) {    log.log(Level.SEVERE,null,ex);  } finally {    if (log.isLoggable(Level.FINEST)) {      log.finest(String.format("Parsed %d in %d ms, giving %d tokens\n",len,(System.nanoTime() - ts) / 1000000,toks.size()));    }    tokens=toks;  }}  }
class C{  public static String parseCharset(Map<String,String> headers,String defaultCharset){  String contentType=headers.get(HTTP.CONTENT_TYPE);  if (contentType != null) {    String[] params=contentType.split(";");    for (int i=1; i < params.length; i++) {      String[] pair=params[i].trim().split("=");      if (pair.length == 2) {        if (pair[0].equals("charset")) {          return pair[1];        }      }    }  }  return defaultCharset;}  }
class C{  public static void dieSilently(AbstractAI ai2,Creature attacker){  ai2.getOwner().getController().onDie(attacker);}  }
class C{  public ComponentToolbar select(){  verifyIsDisplayed();  currentScope.click();  componentToolbar.verifyIsDisplayed();  return componentToolbar;}  }
class C{  public UTF8Reader(InputStream inputStream,int size,MessageFormatter messageFormatter,Locale locale){  this(inputStream,new byte[size],messageFormatter,locale);}  }
class C{  public void clearSelection(){  geoserverStyleTree.clearSelection();}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("set ignoreUnassigned=");  boolean value=np.getBoolean();  np.matchIgnoreCase(";");  CompareWindow viewer=(CompareWindow)getParent();  viewer.setIgnoreNoHits(value);}  }
class C{  public void addListener(AirMapTrafficListener listener){  if (listeners.isEmpty()) {    listeners.add(listener);    connect();  } else {    listeners.add(listener);  }}  }
class C{  public double sample(){  return sample;}  }
class C{  private void prepareMessageToSend(GSMessageImpl message,int deliveryMode,int priority,long timeToLive,Destination destination) throws JMSException {  if (message instanceof GSBytesMessageImpl) {    try {      ((GSBytesMessageImpl)message).seal();    } catch (    IOException e) {      JMSException jmse=new JMSException("IOException while clearing message body: " + e.toString());      jmse.setLinkedException(e);      throw jmse;    }  }  message.setJMSDeliveryMode(deliveryMode);  message.setJMSPriority(priority);  message.setJMSDestination(destination);  message.setJMSRedelivered(false);  String msgID=m_msgIDPrefix + m_session.nextMessageNum();  message.setJMSMessageID(msgID);  message.__setEntryInfo(null);  Long now=SystemTime.timeMillis();  if (timeToLive == Message.DEFAULT_TIME_TO_LIVE) {    message.setJMSExpiration(Message.DEFAULT_TIME_TO_LIVE);  } else {    message.setJMSExpiration(now.longValue() + timeToLive);  }  message.setTTL(timeToLive);  if (!m_timestampDisabled) {    message.setJMSTimestamp(now.longValue());  }  message.setBodyReadOnly(false);  message.setPropertiesReadOnly(false);  message.setStringProperty(GSMessageImpl.JMS_GSCONNECTION_KEY_NAME,m_connectionKey);  if (messageConverter != null && !message.Properties.containsKey(GSMessageImpl.JMS_GSCONVERTER)) {    message.Properties.put(GSMessageImpl.JMS_GSCONVERTER,messageConverter);  }}  }
class C{  private void createRecordHolderQueue(File[] listFiles){  this.recordHolderHeap=new PriorityQueue<SortTempFileChunkHolder>(listFiles.length);}  }
class C{  boolean mustBeReviewed(String xliffContent){  return xliffContent.contains("MUST REVIEW");}  }
class C{  private static double n(int i,int j,int m,int n,long cnm,boolean strict){  final double[] lag=new double[n];  double last=0;  for (int k=0; k < n; k++) {    lag[k]=c(0,k + 1,m,n,cnm,strict);  }  for (int k=1; k <= i; k++) {    last=c(k,0,m,n,cnm,strict);    for (int l=1; l <= j; l++) {      lag[l - 1]=c(k,l,m,n,cnm,strict) * (last + lag[l - 1]);      last=lag[l - 1];    }  }  return last;}  }
class C{  public void remove(final T object){synchronized (mLock) {    mList.remove(object);  }  notifyDataSetChanged();}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase(getSyntax());  final AlignmentViewer viewer=(AlignmentViewer)getViewer();  final Alignment alignment=viewer.getAlignment();  final Document doc=((Director)getDir()).getDocument();  viewer.getSelectedBlock().clear();  String reference=viewer.getSelectedReference();  if (reference != null) {    final int posDoubleColon=reference.lastIndexOf("::");    if (posDoubleColon > 0 && Basic.isInteger(reference.substring(posDoubleColon + 2)))     reference=reference.substring(0,posDoubleColon);    if (reference.length() > 0) {      doc.getProgressListener().setTasks("Alignment viewer","Calculating alignment");      viewer.getBlast2Alignment().makeAlignment(reference,alignment,viewer.isShowInsertions(),doc.getProgressListener());      viewer.setShowAminoAcids(alignment.getSequenceType().equals(Alignment.PROTEIN));      doc.getProgressListener().setTasks("Alignment viewer","Drawing alignment");      doc.getProgressListener().setMaximum(100);      doc.getProgressListener().setProgress(-1);      viewer.setAlignment(alignment,true);    }  }}  }
class C{  public void showTimesLong(long overall){  System.out.println(" Timer:    " + name);  System.out.println(" Count:    " + count);  if (notReliable) {    System.out.println(" Not reliable");  } else {    if (count == 1) {      System.out.println(" Cur Time: " + fmtTime(curTime));    } else     if (count > 1) {      System.out.println(" Min Time: " + fmtTime(minTime));      System.out.println(" Max Time: " + fmtTime(maxTime));      System.out.println(" Avg Time: " + fmtTime(sum / count / 1000.0));      System.out.println(" Tot Time: " + fmtTime(sum / 1000.0));      if (overall != 0) {        System.out.println(" Percent:  " + percentFormatter.format(sum / overall));      }    }  }  System.out.println();}  }
class C{  public Disk move(){  return new Disk(position.add(speed),speed,radius);}  }
class C{  public VideoGetAlbumsQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public boolean isTouchEnabled(){  return mTouchEnabled;}  }
class C{  public DOMParser createDOMParser(){  SymbolTable symbolTable=fShadowSymbolTable ? new ShadowedSymbolTable(fSynchronizedSymbolTable) : fSynchronizedSymbolTable;  XMLGrammarPool grammarPool=fShadowGrammarPool ? new ShadowedGrammarPool(fSynchronizedGrammarPool) : fSynchronizedGrammarPool;  return new DOMParser(symbolTable,grammarPool);}  }
class C{  @GlobalCallback(PlayerAllianceDisbandCallback.class) public static void disband(PlayerAlliance alliance){  Preconditions.checkState(alliance.onlineMembers() <= 1,"Can't disband alliance with more than one online member");  alliances.remove(alliance.getTeamId());  alliance.onEvent(new AllianceDisbandEvent(alliance));}  }
class C{  public Fraction(double value) throws MathIllegalStateException {  this(value,DEFAULT_EPSILON,100);}  }
class C{  protected void addJob(BundleContext context,Class<? extends Job> clazz,String cronExpression){  String jobName=clazz.getName();  String jobGroup=FrameworkUtil.getBundle(clazz).getSymbolicName();  JobDetail job=new JobDetail(jobName,jobGroup,clazz);  job.setDurability(false);  job.setVolatility(true);  job.setDescription(jobName);  try {    CronTrigger trigger=new CronTrigger(jobName,jobGroup,cronExpression);    if (scheduler == null) {      if (schedulerProperties == null) {        schedulerProperties=getDefaultSchedulerProperties();      }      scheduler=new StdSchedulerFactory(schedulerProperties).getScheduler();      scheduler.start();    }    Date date=scheduler.scheduleJob(job,trigger);    Logger.info(this,"Scheduled job " + jobName + ", next trigger is on "+ date);  } catch (  ParseException e) {    Logger.error(this,"Cron expression '" + cronExpression + "' has an exception. Throwing IllegalArgumentException",e);    throw new IllegalArgumentException(e);  }catch (  SchedulerException e) {    Logger.error(this,"Unable to schedule job " + jobName,e);  }}  }
class C{  private static boolean isAlpha(char p_char){  return ((p_char >= 'a' && p_char <= 'z') || (p_char >= 'A' && p_char <= 'Z'));}  }
class C{  public DistributedLogClientBuilder periodicHandshakeIntervalMs(long intervalMs){  DistributedLogClientBuilder newBuilder=newBuilder(this);  newBuilder._clientConfig.setPeriodicHandshakeIntervalMs(intervalMs);  return newBuilder;}  }
class C{  @TargetApi(VERSION_CODES.GINGERBREAD) public static boolean isExternalStorageRemovable(){  if (Utils.hasGingerbread()) {    return Environment.isExternalStorageRemovable();  }  return true;}  }
class C{  public PhotosDeleteCommentQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  public void showLoading(List<Integer> skipIds){  switchState(LOADING,null,null,null,null,skipIds);}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("add file=");  final String fileName=np.getAbsoluteFileName();  np.matchIgnoreCase(";");  Basic.checkFileReadableNonEmpty(fileName);  CompareWindow viewer=(CompareWindow)getParent();  viewer.addFile(fileName);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_UNCOMPRESS_COMPRESSED_ITEM_CANCELED(int nameId){  return new SM_SYSTEM_MESSAGE(1400453,new DescriptionId(nameId));}  }
class C{  public String voice2sampa(String voicePhoneme){  if (voice2sampaMap != null && voice2sampaMap.containsKey(voicePhoneme))   return voice2sampaMap.get(voicePhoneme); else   return voicePhoneme;}  }
class C{  public void loadData(String classificationName,Integer classId,String name,String key,List<Pair<IReadBlock,IMatchBlock>> readMatchPairs){  this.classificationName=classificationName;  this.className=name;  reference2ReadMatchPairs.clear();  final List<byte[][]> newList=new ArrayList<>(readMatchPairs.size());  for (  Pair<IReadBlock,IMatchBlock> pair : readMatchPairs) {    final IReadBlock readBlock=pair.getFirst();    final IMatchBlock matchBlock=pair.getSecond();    final String readSequence=readBlock.getReadSequence().replaceAll("[\t\r\n ]","");    final String readName=readBlock.getReadHeader();    final String matchText=removeReferenceHeaderFromBlastMatch(truncateBeforeSecondOccurrence(matchBlock.getText(),"Score ="));    newList.add(new byte[][]{readName.getBytes(),readSequence.getBytes(),matchText.getBytes()});  }  reference2ReadMatchPairs.put(key,newList);  totalNumberOfReads=readMatchPairs.size();}  }
class C{  public static int distance1(int[] p1,int[] p2){  int sum=0;  for (int i=0; i < p1.length; i++) {    sum+=Math.abs(p1[i] - p2[i]);  }  return sum;}  }
class C{  public Set<String> stringKeySet(){  return data.keySet().stream().map(null).flatMap(null).collect(Collectors.toSet());}  }
class C{  private void changeSelfIntro(Player activePlayer,String newSelfIntro){  if (legionRestrictions.canChangeSelfIntro(activePlayer,newSelfIntro)) {    LegionMember legionMember=activePlayer.getLegionMember();    legionMember.setSelfIntro(newSelfIntro);    PacketSendUtility.broadcastPacketToLegion(legionMember.getLegion(),new SM_LEGION_UPDATE_SELF_INTRO(activePlayer.getObjectId(),newSelfIntro));    PacketSendUtility.sendPacket(activePlayer,SM_SYSTEM_MESSAGE.STR_GUILD_WRITE_INTRO_DONE);  }}  }
class C{  @Override public void typeSystemInit(TypeSystem typeSystem) throws AnalysisEngineProcessException {  this.sentenceType=AnnotatorUtil.getRequiredTypeParameter(this.context,typeSystem,UimaUtil.SENTENCE_TYPE_PARAMETER);  this.tokenType=AnnotatorUtil.getRequiredTypeParameter(this.context,typeSystem,UimaUtil.TOKEN_TYPE_PARAMETER);  this.posFeature=AnnotatorUtil.getRequiredFeatureParameter(this.context,this.tokenType,UimaUtil.POS_FEATURE_PARAMETER,CAS.TYPE_NAME_STRING);  this.probabilityFeature=AnnotatorUtil.getOptionalFeatureParameter(this.context,this.tokenType,UimaUtil.PROBABILITY_FEATURE_PARAMETER,CAS.TYPE_NAME_DOUBLE);}  }
class C{  private float angle(TouchState s){  return (float)Math.toDegrees(Math.atan2(s.yDown - s.yCurrent,s.xDown - s.xCurrent));}  }
class C{  @Override public double[] makeDensityTestValues(){  return new double[]{0.0115379817652,0.0415948507811,0.0665060119842,0.0919455953114,0.121472591024,0.000433630076361,0.00412780610309,0.00999340341045,0.0193246438937,0.0368460089216};}  }
class C{  public void closeStream(){  CarbonUtil.closeStreams(stream);  executorService.shutdown();}  }
class C{  public <RES>MatcherNext<RES,ARG> as(RES dummy){  return new MatcherNext<>(arg);}  }
class C{  private void drawCircle(Canvas canvas,int index,Paint paint,float radius){  if (isIllegalIndex(index)) {    return;  }  int x=getXByIndex(index);  int y=getYByIndex(index);  float centreY=cellHeight + (y - 1) * cellHeight + cellHeight * 0.5f;  float centreX=cellWidth * (x - 1) + cellWidth * 0.5f;  canvas.drawCircle(centreX,centreY,radius,paint);}  }
class C{  public void removeOrderItemAttribute(String name){  if (orderItemAttributes != null) {    orderItemAttributes.remove(name);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_REJECTED_TRADE(String value0){  return new SM_SYSTEM_MESSAGE(1390115,value0);}  }
class C{  public void showLoading(){  switchState(LOADING,null,null,null,null,null,Collections.<Integer>emptyList());}  }
class C{  public static Map<String,String> tags(Tags tags){  return tags.stream().map(null).flatMap(null).map(null).collect(Collectors.toMap(null,null));}  }
class C{  @NotNull public static BufferedImage trim(@NotNull BufferedImage image){  BufferedImage cropped=ImageUtils.cropBlank(image,null,TYPE_INT_ARGB);  return cropped != null ? cropped : image;}  }
class C{  public AdamsMoultonIntegrator(final int nSteps,final double minStep,final double maxStep,final double[] vecAbsoluteTolerance,final double[] vecRelativeTolerance) throws IllegalArgumentException {  super(METHOD_NAME,nSteps,nSteps + 1,minStep,maxStep,vecAbsoluteTolerance,vecRelativeTolerance);}  }
class C{  @Override public void validate(String content,ValidationContext context) throws InvalidDatatypeValueException {  if (!XMLChar.isValidNmtoken(content)) {    throw new InvalidDatatypeValueException("NMTOKENInvalid",new Object[]{content});  }}  }
class C{  public QueueReader<Edge> listener(){  return reader.clone();}  }
class C{  public Hashtable batchGet(ObjectInfo objInfo,String[] keys,Map failKeys) throws MyException {  return this.batchGet(objInfo,keys,failKeys,ProtoCommon.FDHT_EXPIRES_NONE);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_MPHeal_Instant_HEAL_A_TO_SELF(String skillcaster,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200842,skillcaster,num0,skillname);}  }
class C{  public TabDelegate(boolean incognito){  mIsIncognito=incognito;}  }
class C{  public static void check(){  String javaVersion=System.getProperty("java.version");  if (Float.parseFloat(javaVersion.substring(0,3)) < 1.499) {    throw new Error("Wrong java version: Required 1.5, found " + javaVersion);  }  if (!(MaryXML.newDocument() instanceof DocumentTraversal)) {    throw new Error("XML handling code " + DocumentBuilderFactory.newInstance().getClass() + " does not support DocumentTraversal.\n"+ "Please update your java XML handling code as described in "+ MaryProperties.getProperty("mary.base")+ File.separator+ "README.");  }}  }
class C{  public static byte[] writeInt(int i){  return ByteBuffer.allocate(4).putInt(i).array();}  }
class C{  public UsersGetFollowersQueryWithFields(VkApiClient client,List<UserField> fields){  super(client,"users.getFollowers",GetFollowersFieldsResponse.class);  fields(fields);}  }
class C{  public static Map<String,Object> removeRoleType(DispatchContext ctx,Map<String,? extends Object> context){  Map<String,Object> result=new HashMap<String,Object>();  Delegator delegator=ctx.getDelegator();  String orderId=(String)context.get("orderId");  String partyId=(String)context.get("partyId");  String roleTypeId=(String)context.get("roleTypeId");  GenericValue testValue=null;  try {    testValue=EntityQuery.use(delegator).from("OrderRole").where("orderId",orderId,"partyId",partyId,"roleTypeId",roleTypeId).queryOne();  } catch (  GenericEntityException e) {    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);    result.put(ModelService.ERROR_MESSAGE,"ERROR: Could not add role to order (" + e.getMessage() + ").");    return result;  }  if (testValue == null) {    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);    return result;  }  try {    GenericValue value=EntityQuery.use(delegator).from("OrderRole").where("orderId",orderId,"partyId",partyId,"roleTypeId",roleTypeId).queryOne();    value.remove();  } catch (  GenericEntityException e) {    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);    result.put(ModelService.ERROR_MESSAGE,"ERROR: Could not remove role from order (" + e.getMessage() + ").");    return result;  }  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);  return result;}  }
class C{  public Object call(Object object,String name,Object[] args) throws BSFException {  throw new BSFException("The call method is not yet supported for SimpleMethods");}  }
class C{  private boolean attemptToExtractCountryCallingCode(){  if (nationalNumber.length() == 0) {    return false;  }  StringBuilder numberWithoutCountryCallingCode=new StringBuilder();  int countryCode=phoneUtil.extractCountryCode(nationalNumber,numberWithoutCountryCallingCode);  if (countryCode == 0) {    return false;  }  nationalNumber.setLength(0);  nationalNumber.append(numberWithoutCountryCallingCode);  String newRegionCode=phoneUtil.getRegionCodeForCountryCode(countryCode);  if (PhoneNumberUtil.REGION_CODE_FOR_NON_GEO_ENTITY.equals(newRegionCode)) {    currentMetadata=phoneUtil.getMetadataForNonGeographicalRegion(countryCode);  } else   if (!newRegionCode.equals(defaultCountry)) {    currentMetadata=getMetadataForRegion(newRegionCode);  }  String countryCodeString=Integer.toString(countryCode);  prefixBeforeNationalNumber.append(countryCodeString).append(SEPARATOR_BEFORE_NATIONAL_NUMBER);  extractedNationalPrefix="";  return true;}  }
class C{  public DatabaseGetCitiesQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  public ActivitiEventImpl(ActivitiEventType type){  this(type,null,null,null);}  }
class C{  public AdsGetTargetingStatsQuery(VkApiClient client,UserActor actor,int accountId,String linkUrl){  super(client,"ads.getTargetingStats",TargStats.class);  accessToken(actor.getAccessToken());  accountId(accountId);  linkUrl(linkUrl);}  }
class C{  public String toString(String charsetName) throws UnsupportedEncodingException {  return new String(this.get(),0,this.getCount(),charsetName);}  }
class C{  public void goToNextColor(){  mColorIndex=(mColorIndex + 1) % (mColors.length);}  }
class C{  public void addSuccessMessage(final String successMessage){  successMessageList.add(successMessage);}  }
class C{  public int generateValidTabId(){  return TabIdManager.getInstance().generateValidId(Tab.INVALID_TAB_ID);}  }
class C{  public Map<String,Object> addCategoryDefaults(String catalogId,String categoryId,String itemGroupNumber){  ArrayList<String> errorMsgs=new ArrayList<String>();  Map<String,Object> result=null;  String errMsg=null;  if (categoryId == null || categoryId.length() <= 0) {    errMsg=UtilProperties.getMessage(resource_error,"cart.category_not_specified_to_add_from",this.cart.getLocale());    result=ServiceUtil.returnError(errMsg);    return result;  }  Collection<GenericValue> prodCatMemberCol=null;  try {    prodCatMemberCol=EntityQuery.use(delegator).from("ProductCategoryMember").where("productCategoryId",categoryId).cache(true).queryList();  } catch (  GenericEntityException e) {    Debug.logWarning(e.toString(),module);    Map<String,Object> messageMap=UtilMisc.<String,Object>toMap("categoryId",categoryId);    messageMap.put("message",e.getMessage());    errMsg=UtilProperties.getMessage(resource_error,"cart.could_not_get_products_in_category_cart",messageMap,this.cart.getLocale());    result=ServiceUtil.returnError(errMsg);    return result;  }  if (prodCatMemberCol == null) {    Map<String,Object> messageMap=UtilMisc.<String,Object>toMap("categoryId",categoryId);    errMsg=UtilProperties.getMessage(resource_error,"cart.could_not_get_products_in_category",messageMap,this.cart.getLocale());    result=ServiceUtil.returnError(errMsg);    return result;  }  BigDecimal totalQuantity=BigDecimal.ZERO;  for (  GenericValue productCategoryMember : prodCatMemberCol) {    BigDecimal quantity=productCategoryMember.getBigDecimal("quantity");    if (quantity != null && quantity.compareTo(BigDecimal.ZERO) > 0) {      try {        this.cart.addOrIncreaseItem(productCategoryMember.getString("productId"),null,quantity,null,null,null,null,null,null,null,catalogId,null,null,itemGroupNumber,null,dispatcher);        totalQuantity=totalQuantity.add(quantity);      } catch (      CartItemModifyException e) {        errorMsgs.add(e.getMessage());      }catch (      ItemNotFoundException e) {        errorMsgs.add(e.getMessage());      }    }  }  if (errorMsgs.size() > 0) {    result=ServiceUtil.returnError(errorMsgs);    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);    return result;  }  result=ServiceUtil.returnSuccess();  result.put("totalQuantity",totalQuantity);  return result;}  }
class C{  public static DistributedLogClientBuilder newBuilder(){  return new DistributedLogClientBuilder();}  }
class C{  private int ui(byte b){  return (b & 0x80) == 0x80 ? (b & 0x7F) + 0x80 : b;}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public VarAccess fullCopy(){  VarAccess tree=(VarAccess)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public HNMFeatureFileReader(String fileName) throws IOException, MaryConfigurationException {  load(fileName);}  }
class C{  public static String slurpGBURLNoExceptions(URL u){  try {    return slurpGBURL(u);  } catch (  Exception e) {    e.printStackTrace();    return null;  }}  }
class C{  public SimilarityBasedIndex(Set<NamedDocumentNGramGraph> sNamedObjects,SimilarityComparatorListener sclComparator,INSECTDB<DocumentNGramGraph> dbStorage){  Comparator=sclComparator;  NamedObjects=new HashSet<DocumentNGramGraph>(sNamedObjects);  if (dbStorage == null)   Storage=new INSECTMemoryDB(); else   Storage=dbStorage;  for (  NamedDocumentNGramGraph n : sNamedObjects) {    Storage.saveObject(n,n.getName(),CLUSTER_OBJECT_CATEGORY);  }}  }
class C{  public String toToken(){  if (id == 0) {    return "X";  }  String hex=Long.toHexString(id).toLowerCase(Locale.ENGLISH);  StringBuilder sb=new StringBuilder(16);  for (int i=hex.length(); i < 16; i++) {    sb.append('0');  }  sb.append(hex);  for (int len=16; len > 0; len--) {    if (sb.charAt(len - 1) != '0') {      return sb.substring(0,len);    }  }  throw new RuntimeException("Shouldn't make it here");}  }
class C{  public static byte[] hexToArray(final String data) throws ConversionException {  try {    return Hex.decodeHex(data.toCharArray());  } catch (  DecoderException e) {    throw new ConversionException("Cannot convert given hex text into plain text",e);  }}  }
class C{  public void toggleLockConstraints(ConstraintWidget widget){  int constraintsCreator=getMainConstraintsCreator(widget);  if (constraintsCreator == ConstraintAnchor.USER_CREATOR) {    setConstraintsCreator(widget,ConstraintAnchor.AUTO_CONSTRAINT_CREATOR);  } else   if (constraintsCreator == ConstraintAnchor.AUTO_CONSTRAINT_CREATOR) {    setConstraintsCreator(widget,ConstraintAnchor.USER_CREATOR);  }  mSelection.selectionHasChanged();}  }
class C{  public static boolean putLong(Context context,String key,long value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putLong(key,value);  return editor.commit();}  }
class C{  public PhotosGetAlbumsQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public static SummaryTreeNode createNode(AndroidVersion version,Set<UpdaterTreeNode> children){  Set<UpdaterTreeNode> includedChildren=Sets.newHashSet();  UpdaterTreeNode primaryChild=null;  for (  UpdaterTreeNode child : children) {    if (child.includeInSummary()) {      includedChildren.add(child);    }    if (child.isPrimary()) {      primaryChild=child;    }  }  if (!includedChildren.isEmpty()) {    return new SummaryTreeNode(version,children,includedChildren,primaryChild);  }  return null;}  }
class C{  LockHandle(LockManager lockManager,Transaction tx,Object key){  this.lockManager=lockManager;  this.tx=tx;  this.key=key;}  }
class C{  public Image addImage(String location,Image image){  if (m_maxImageWidth > -1 || m_maxImageHeight > -1) {    image=getScaledImage(image);    image.getWidth(null);  }  imageCache.put(location,image);  return image;}  }
class C{  public void deliveryComplete(final IMqttDeliveryToken token){  logger.trace("Delivery complete for {}",token.getMessageId());}  }
class C{  @Override public void write(byte[] b,int off,int len){  if ((off < 0) || (off > b.length) || (len < 0)|| ((off + len) > b.length)|| ((off + len) < 0)) {    throw new IndexOutOfBoundsException();  } else   if (len == 0) {    return;  }synchronized (this) {    int newcount=count + len;    int remaining=len;    int inBufferPos=count - filledBufferSum;    while (remaining > 0) {      int part=Math.min(remaining,currentBuffer.length - inBufferPos);      System.arraycopy(b,off + len - remaining,currentBuffer,inBufferPos,part);      remaining-=part;      if (remaining > 0) {        needNewBuffer(newcount);        inBufferPos=0;      }    }    count=newcount;  }}  }
class C{  @RequestMapping(value="/rest/activiti/process-instances",method=RequestMethod.POST,consumes="application/json",produces="application/json") public JsonNode listProcessInstances(@RequestBody ObjectNode bodyNode){  log.debug("REST request to get a list of process instances");  JsonNode resultNode=null;  try {    ServerConfig serverConfig=retrieveServerConfig();    resultNode=clientService.listProcesInstances(bodyNode,serverConfig);  } catch (  Exception e) {    log.error("Error processing process instance list request",e);    throw new BadRequestException(e.getMessage());  }  return resultNode;}  }
class C{  public static String extendedTrim(String content){  return content.replaceAll("\\s+"," ").replace("\n"," ").replace("\r"," ").trim();}  }
class C{  @Override public void connect(long timeout) throws AWSIotException, AWSIotTimeoutException {  super.connect(timeout);}  }
class C{  public PhotosRestoreQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  public boolean computeScrollOffset(){  if (isFinished()) {    return false;  }switch (mMode) {case SCROLL_MODE:    long time=AnimationUtils.currentAnimationTimeMillis();  final long elapsedTime=time - mScrollerX.mStartTime;final int duration=mScrollerX.mDuration;if (elapsedTime < duration) {float q=(float)(elapsedTime) / duration;if (mInterpolator == null) {} else {  q=mInterpolator.getInterpolation(q);}mScrollerX.updateScroll(q);mScrollerY.updateScroll(q);} else {abortAnimation();}break;case FLING_MODE:if (!mScrollerX.mFinished) {if (!mScrollerX.update()) {if (!mScrollerX.continueWhenFinished()) {mScrollerX.finish();}}}if (!mScrollerY.mFinished) {if (!mScrollerY.update()) {if (!mScrollerY.continueWhenFinished()) {mScrollerY.finish();}}}break;}return true;}  }
class C{  public byte[] decodeAuto(String s){  int nRemain=s.length() % 4;  if (nRemain == 0) {    return this.decode(s);  } else {    return this.decode(s + new String(this.charToPad,0,4 - nRemain));  }}  }
class C{  public void sendMissionInitDirectToServer(MissionInit minit){  this.stateMachine.setMissionInit(minit);}  }
class C{  public NGramCorrelationForm(){  initComponents();}  }
class C{  @Override public void addDictionaryChunk(List<byte[]> dictionaryChunk){  dictionaryChunks.add(dictionaryChunk);  if (null == dictionaryByteArrayToSurrogateKeyMap) {    createDictionaryByteArrayToSurrogateKeyMap(dictionaryChunk.size());  }  addDataToDictionaryMap();}  }
class C{  public Authentication(String email,String password){  this.email=email;  this.password=password;}  }
class C{  public Long inc(KeyInfo keyInfo,int increment,int expires) throws MyException {  ServerInfo server;  ProtoCommon.PkgHeader header;  byte[] bsPackage;  int offset;  int value_len;  header=new ProtoCommon.PkgHeader();  header.key_hash_code=keyInfo.getHashCode();  server=this.serverGroup.getServer(header.key_hash_code);  if (server == null) {    this.status=2;    return null;  }  try {    header.body_len=keyInfo.getPackLength() + 4;    header.cmd=ProtoCommon.FDHT_PROTO_CMD_INC;    header.keep_alive=(byte)(this.serverGroup.keep_alive ? 1 : 0);    header.timestamp=(int)(System.currentTimeMillis() / 1000);    header.expires=expires;    bsPackage=new byte[ProtoCommon.FDHT_PROTO_PKG_HEADER_SIZE + header.body_len];    ProtoCommon.packHeader(header,bsPackage);    offset=keyInfo.pack(bsPackage,ProtoCommon.FDHT_PROTO_PKG_HEADER_SIZE);    ProtoCommon.int2buff(increment,bsPackage,offset);    OutputStream out=server.sock.getOutputStream();    out.write(bsPackage);    ProtoCommon.PkgInfo pkgInfo=ProtoCommon.recvPackage(server.sock.getInputStream(),ProtoCommon.FDHT_PROTO_CMD_RESP,-1);    this.status=pkgInfo.header.status;    if (this.status != 0) {      return null;    }    if (pkgInfo.body.length < 4) {      this.serverGroup.forceClose(server);      this.status=22;      return null;    }    value_len=ProtoCommon.buff2int(pkgInfo.body,0);    if (value_len + 4 != pkgInfo.body.length) {      this.serverGroup.forceClose(server);      this.status=22;      return null;    }    String value=new String(pkgInfo.body,4,value_len);    return new Long(value);  } catch (  IOException ex) {    System.err.println("server " + server.address.getAddress().getHostAddress() + ":"+ server.address.getPort()+ " IOException, error msg: "+ ex.getMessage());    this.serverGroup.forceClose(server);    this.status=5;    return null;  } finally {    this.serverGroup.closeServer(server);  }}  }
class C{  private void checkIndex(final int index) throws MathIllegalArgumentException {  MathUtils.checkRangeInclusive(index,0,getDimension() - 1);}  }
class C{  public TagAdapter(List<PhotoDetails.Categories> datas){  super(datas);}  }
class C{  public static int widthPixels(Context context){  return displayMetrics(context).widthPixels;}  }
class C{  public static void startTiming(Object caller){  startTiming(caller.getClass().getSimpleName());}  }
class C{  public Builder insertAfter(String columnName){  this.insertAfter=columnName;  return this;}  }
class C{  public boolean isPathBetweenMethods(String sinkSignature,String sourceSignature){  List<ResultSinkInfo> sinkVals=findSinkByMethodSignature(sinkSignature);  for (  ResultSinkInfo si : sinkVals) {    Set<ResultSourceInfo> sources=this.results.get(si);    if (sources == null)     return false;    for (    ResultSourceInfo src : sources)     if (src.getSource().containsInvokeExpr()) {      InvokeExpr expr=src.getSource().getInvokeExpr();      if (expr.getMethod().getSignature().equals(sourceSignature))       return true;    }  }  return false;}  }
class C{  private ProcessFunction showTransformationDialog(ProcessFunction existingProcessFunction){  ProcessFunction processFunction=null;  RenderTransformationDialog dlg=new RenderTransformationDialog(GeoServerConnectionManager.getInstance());  if (dlg.showDialog(existingProcessFunction)) {    processFunction=dlg.getTransformationProcessFunction();  }  return processFunction;}  }
class C{  public void addAddendum(String word,String partOfSpeech,String[] phones){  String pos=fixPartOfSpeech(partOfSpeech);  if (!partsOfSpeech.contains(pos)) {    partsOfSpeech.add(pos);  }  addenda.put(word + pos,phones);}  }
class C{  public NewsfeedSearchQueryWithExtended(VkApiClient client,UserActor actor){  super(client,"newsfeed.search",SearchExtendedResponse.class);  accessToken(actor.getAccessToken());  extended(true);}  }
class C{  public PhotosGetTagsQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  @Override public void notationDecl(String name,XMLResourceIdentifier identifier,Augmentations augs) throws XNIException {  try {    if (fDTDHandler != null) {      String publicId=identifier.getPublicId();      String systemId=fResolveDTDURIs ? identifier.getExpandedSystemId() : identifier.getLiteralSystemId();      fDTDHandler.notationDecl(name,publicId,systemId);    }  } catch (  SAXException e) {    throw new XNIException(e);  }}  }
class C{  public void reverse(){  reverse(0,_pos);}  }
class C{  private void sortDrawablesZA(){  Sort.instance().sort(drawables,null);  refreshDrawableDisplay();}  }
class C{  public AggregationSet minEntry(String path){  return add(new MinEntryAggregator().setPath(path));}  }
class C{  public float[] generateTransformedValuesLine(ILineDataSet data,float phaseX,float phaseY,int from,int to){  final int count=(int)Math.ceil((to - from) * phaseX) * 2;  float[] valuePoints=new float[count];  for (int j=0; j < count; j+=2) {    Entry e=data.getEntryForIndex(j / 2 + from);    if (e != null) {      valuePoints[j]=e.getXIndex();      valuePoints[j + 1]=e.getVal() * phaseY;    }  }  getValueToPixelMatrix().mapPoints(valuePoints);  return valuePoints;}  }
class C{  public static double[] computeAmplitudeSpectrum_FD(final double[] fft){  if (fft == null)   throw new NullPointerException("Received null argument");  int halfN=fft.length / 2;  double[] freqs=new double[halfN];  freqs[0]=fft[0];  for (int i=2; i < fft.length; i+=2) {    freqs[i / 2]=Math.sqrt(fft[i] * fft[i] + fft[i + 1] * fft[i + 1]);  }  return freqs;}  }
class C{  public WallSearchQueryWithExtended count(Integer value){  return unsafeParam("count",value);}  }
class C{  public UrlSpaceFactoryBean(String url){  this.url=url;}  }
class C{  public int size(){  return size;}  }
class C{  public FriendsGetMutualQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  public boolean isSelected(Selection sel){  if (sel == null) {    return false;  }  if (sel.isEmpty()) {    boolean isCompletelyWithin=sel.start() >= start() && sel.end() < end();    boolean isWithin=sel.start() >= start() && sel.end() <= end();    return isCompletelyWithin || (isWithin && mIsLast);  } else {    int start=Math.max(start(),sel.start());    int end=Math.min(end(),sel.end());    return start < end;  }}  }
class C{  public static int insertCollection(String table,Collection<V> values){  MongoCollection<Document> c=getCollection(table);  if (c != null) {    List<Document> list=new ArrayList<Document>(values.size());    for (    V v : values) {      list.add(new Document(v.m));    }    try {      c.insertMany(list);      if (log.isDebugEnabled())       log.debug("inserted collection=" + table + ", list="+ list);      return 1;    } catch (    Exception e) {      if (log.isErrorEnabled())       log.error(e.getMessage(),e);    }  }  return 0;}  }
class C{  @Override public String object2Relation(String fieldType){  if (fieldType != null) {    if (fieldType.equals("int") || fieldType.equals("java.lang.Integer")) {      return "integer";    }    if (fieldType.equals("long") || fieldType.equals("java.lang.Long")) {      return "integer";    }    if (fieldType.equals("short") || fieldType.equals("java.lang.Short")) {      return "integer";    }  }  return null;}  }
class C{  protected void addLanguageVariables(BundleContext context,Language language){  if (languageVariablesNotAdded) {    languageVariablesNotAdded=false;    try {      URL resourceURL=context.getBundle().getResource("conf/Language-ext.properties");      PropertyResourceBundle resourceBundle=new PropertyResourceBundle(resourceURL.openStream());      Map<String,String> languageVariables=new HashMap<String,String>();      for (      String key : resourceBundle.keySet()) {        languageVariables.put(key,resourceBundle.getString(key));      }      addLanguageVariables(languageVariables,language);    } catch (    IOException e) {      Logger.warn(this,"Exception while registering language variables",e);    }  }}  }
class C{  private void createUI(){  readConfigFile(null,this,"Polygon.xml");}  }
class C{  public void onError(int taskId,String reason){  PlayerTransferRequest request=this.transfers.remove(taskId);  PlayerTransferTask task=this.tasks.remove(taskId);  task.status=PlayerTransferTask.STATUS_ERROR;  task.comment=reason;  this.dao.update(task);  GameServerInfo targetServer=GameServerTable.getGameServerInfo(request.targetServerId);  if (targetServer == null || targetServer.getConnection() == null) {    log.error("Player transfer requests offline server! #" + request.targetServerId);    return;  }  request.account.setActivated((byte)1);  request.saccount.setActivated((byte)1);  DAOManager.getDAO(AccountDAO.class).updateAccount(request.account);  DAOManager.getDAO(AccountDAO.class).updateAccount(request.saccount);  targetServer.getConnection().sendPacket(new SM_PTRANSFER_RESPONSE(PlayerTransferResultStatus.ERROR,taskId,reason));}  }
class C{  private static String queryKeyValue(Integer keyHandle,String valueName){  byte[] rawValueName=toByteArray(valueName);  byte[] rawResult=invokeRegistryMethod(_queryValueMethod,keyHandle,rawValueName);  if (rawResult == null)   return null;  String result=new String(rawResult,0,rawResult.length - 1);  return result;}  }
class C{  public static boolean verifyPermissions(int... grantResults){  if (grantResults.length == 0) {    return false;  }  for (  int result : grantResults) {    if (result != PackageManager.PERMISSION_GRANTED) {      return false;    }  }  return true;}  }
class C{  protected ExecuteBatchQuery requests(AbstractQueryBuilder... value){  StringBuilder builder=new StringBuilder();  builder.append("return [");  int requestIndex=0;  for (  AbstractQueryBuilder request : value) {    builder.append("API.").append(request.getMethod()).append("(");    Map<String,String> params=new HashMap<>(request.build());    params.remove("access_token");    params.remove("v");    if (!params.isEmpty()) {      builder.append("{");      int paramIndex=0;      for (      Map.Entry<String,String> param : params.entrySet()) {        builder.append("\"").append(param.getKey()).append("\":").append("\"").append(param.getValue()).append("\"");        if (paramIndex < (params.size() - 1)) {          builder.append(",");        }        paramIndex++;      }      builder.append("}");    }    builder.append(")");    if (requestIndex < (value.length - 1)) {      builder.append(",");    }    requestIndex++;  }  builder.append("];");  return unsafeParam("code",builder.toString());}  }
class C{  public static byte parseByte(String text) throws DataParseException {  try {    return Byte.parseByte(text);  } catch (  NumberFormatException e) {    throw new DataParseException(e);  }}  }
class C{  @Override public void close() throws CannotCloseContainerException {  if (applicationContext instanceof DisposableBean) {    try {      ((DisposableBean)applicationContext).destroy();    } catch (    Exception e) {      throw new CannotCloseContainerException("Failed to close container with application context [" + applicationContext + "]",e);    }  }  super.close();}  }
class C{  public Vector2f(float x,float y){  this.x=x;  this.y=y;}  }
class C{  public boolean optBoolean(int index){  LazyNode token=getOptionalValueToken(index);  if (token == null)   return false;  if (token.type == LazyNode.VALUE_NULL)   return false;  if (token.type == LazyNode.VALUE_TRUE)   return true;  if (token.type == LazyNode.VALUE_FALSE)   return false;  throw new LazyException("Requested value is not a boolean",token);}  }
class C{  public RenameOperation(final PokemonModel pokemon){  super(pokemon);}  }
class C{  public Builder withCameraRequestCode(int startRequestCode,int endRequestCode){  if ((endRequestCode - startRequestCode) < 5) {    throw new IllegalArgumentException("The following formula must be apply for the given arguments: " + "(endRequestCode - startRequestCode) >= 5");  }  this.mCameraRequestCodeStart=startRequestCode;  this.mCameraRequestCodeEnd=endRequestCode;  return this;}  }
class C{  public Dfp newDfp(final int x){  return new Dfp(this,x);}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj == null) {    return false;  }  if (!(obj instanceof TableInfo)) {    return false;  }  TableInfo other=(TableInfo)obj;  if (databaseName == null) {    if (other.databaseName != null) {      return false;    }  } else   if (!tableUniqueName.equals(other.tableUniqueName)) {    return false;  }  if (tableUniqueName == null) {    if (other.tableUniqueName != null) {      return false;    }  } else   if (!tableUniqueName.equals(other.tableUniqueName)) {    return false;  }  return true;}  }
class C{  public static String formatNumber(float number,int digitCount,boolean separateThousands,char separateChar){  char[] out=new char[35];  boolean neg=false;  if (number == 0) {    return "0";  }  boolean zero=false;  if (number < 1 && number > -1) {    zero=true;  }  if (number < 0) {    neg=true;    number=-number;  }  if (digitCount > POW_10.length) {    digitCount=POW_10.length - 1;  }  number*=POW_10[digitCount];  long lval=Math.round(number);  int ind=out.length - 1;  int charCount=0;  boolean decimalPointAdded=false;  while (lval != 0 || charCount < (digitCount + 1)) {    int digit=(int)(lval % 10);    lval=lval / 10;    out[ind--]=(char)(digit + '0');    charCount++;    if (charCount == digitCount) {      out[ind--]=',';      charCount++;      decimalPointAdded=true;    } else     if (separateThousands && lval != 0 && charCount > digitCount) {      if (decimalPointAdded) {        if ((charCount - digitCount) % 4 == 0) {          out[ind--]=separateChar;          charCount++;        }      } else {        if ((charCount - digitCount) % 4 == 3) {          out[ind--]=separateChar;          charCount++;        }      }    }  }  if (zero) {    out[ind--]='0';    charCount+=1;  }  if (neg) {    out[ind--]='-';    charCount+=1;  }  int start=out.length - charCount;  return String.valueOf(out,start,out.length - start);}  }
class C{  public void loaded(int startIndex,List<T> data,boolean cacheData){  loaded(startIndex,data,getTotalRows(),cacheData);}  }
class C{  public boolean isStrict(){  return this.strict;}  }
class C{  public SyncHttpClient(int httpPort){  this(false,httpPort,443);}  }
class C{  public void leftTrim(double second){  trim(second,0);}  }
class C{  static String urlsToPath(URL[] urls){  if (urls.length == 0) {    return null;  } else   if (urls.length == 1) {    return urls[0].toExternalForm();  } else {    StringBuffer path=new StringBuffer(urls[0].toExternalForm());    for (int i=1; i < urls.length; i++) {      path.append(' ');      path.append(urls[i].toExternalForm());    }    return path.toString();  }}  }
class C{  public static void processBomComponent(String mrpId,GenericValue product,BigDecimal eventQuantity,Timestamp startDate,Map<String,Object> routingTaskStartDate,List<BOMNode> listComponent){  Delegator delegator=product.getDelegator();  if (UtilValidate.isNotEmpty(listComponent)) {    for (    BOMNode node : listComponent) {      GenericValue productComponent=node.getProductAssoc();      String routingTask=node.getProductAssoc().getString("routingWorkEffortId");      Timestamp eventDate=(routingTask == null || !routingTaskStartDate.containsKey(routingTask)) ? startDate : (Timestamp)routingTaskStartDate.get(routingTask);      if (EntityUtil.isValueActive(productComponent,eventDate)) {        Map<String,Object> parameters=UtilMisc.<String,Object>toMap("productId",node.getProduct().getString("productId"));        parameters.put("mrpId",mrpId);        parameters.put("eventDate",eventDate);        parameters.put("mrpEventTypeId","MRP_REQUIREMENT");        BigDecimal componentEventQuantity=node.getQuantity();        try {          InventoryEventPlannedServices.createOrUpdateMrpEvent(parameters,componentEventQuantity.negate(),null,product.get("productId") + ": " + eventDate,false,delegator);        } catch (        GenericEntityException e) {          Debug.logError("Error : findOne(\"MrpEvent\", parameters) =" + parameters + "--"+ e.getMessage(),module);          logMrpError(mrpId,node.getProduct().getString("productId"),"Unable to create event (processBomComponent)",delegator);        }      }    }  }}  }
class C{  public PlacesAddQuery add(UserActor actor,String title,float latitude,float longitude){  return new PlacesAddQuery(getClient(),actor,title,latitude,longitude);}  }
class C{  public static String format(Date date,boolean millis){  return format(date,millis,TIMEZONE_UTC);}  }
class C{  private void prepareDataSet(){  dataSet1=Arrays.asList(new String[]{"a","b"});  dataSet2=Arrays.asList(new String[]{"c","d"});  dataSet3=Arrays.asList(new String[]{"e","f"});}  }
class C{  public FocusControl(int clicks,String act){  ccount=clicks;  activity=act;}  }
class C{  public static void showString(String title,String content){  JTextArea area=new JTextArea(content);  area.setEditable(false);  JScrollPane scroll=new JScrollPane(area);  scroll.setPreferredSize(new Dimension(500,300));  JOptionPane.showMessageDialog(null,scroll,title,JOptionPane.INFORMATION_MESSAGE);}  }
class C{  private static String escapeprometheus(String s){  s=s.replaceAll("^[^a-zA-Z_:]+","");  s=s.replaceAll("[^a-zA-Z0-9_:]+","");  return s.toLowerCase();}  }
class C{  public static Unload handle(World world){  Unload event=new Unload(world);  OpenModLoader.getEventBus().post(event);  return event;}  }
class C{  public void push(){  Map<K,V> newMap=new HashMap<K,V>();  this.stackList.add(0,newMap);}  }
class C{  public boolean addFrame(Bitmap im){  if ((im == null) || !started) {    return false;  }  boolean ok=true;  try {    if (!sizeSet) {      setSize(im.getWidth(),im.getHeight());    }    image=im;    getImagePixels();    analyzePixels();    if (firstFrame) {      writeLSD();      writePalette();      if (repeat >= 0) {        writeNetscapeExt();      }    }    writeGraphicCtrlExt();    writeImageDesc();    if (!firstFrame) {      writePalette();    }    writePixels();    firstFrame=false;  } catch (  IOException e) {    ok=false;  }  return ok;}  }
class C{  @SuppressWarnings("unchecked") private void writeNSDecls() throws SAXException {  Enumeration<String> prefixes=(Enumeration<String>)nsSupport.getDeclaredPrefixes();  while (prefixes.hasMoreElements()) {    String prefix=(String)prefixes.nextElement();    String uri=nsSupport.getURI(prefix);    if (uri == null) {      uri="";    }    write(' ');    if ("".equals(prefix)) {      write("xmlns=\"");    } else {      write("xmlns:");      write(prefix);      write("=\"");    }    writeEscUTF16(uri,0,uri.length(),true);    write('\"');  }}  }
class C{  public static float readFloat(byte[] bytes,int start){  return Float.intBitsToFloat(readInt(bytes,start));}  }
class C{  public void init$Children(){  children=new ASTNode[1];  setChild(new List(),0);}  }
class C{  public boolean isCritical(){  return false;}  }
class C{  public static List<ItemStack> handle(World world,IBlockState state,BlockPos pos,float chance,int fortune,List<ItemStack> drops){  BlockEvent.HarvestDrops event=new xyz.openmodloader.event.impl.BlockEvent.HarvestDrops(world,state,pos,chance,fortune,drops);  OpenModLoader.getEventBus().post(event);  return event.getDrops();}  }
class C{  private static Class<? extends Activity> guessErrorActivityClass(Context context){  Class<? extends Activity> resolvedActivityClass;  resolvedActivityClass=CustomActivityOnCrash.getErrorActivityClassWithIntentFilter(context);  if (resolvedActivityClass == null) {    resolvedActivityClass=DefaultErrorActivity.class;  }  return resolvedActivityClass;}  }
class C{  public static float pow(float fBase,float fExponent){  return (float)Math.pow(fBase,fExponent);}  }
class C{  public final boolean canSetString(String field){  return m_table.canSetString(field);}  }
class C{  private static void resplit(final double a[]){  final double c=a[0] + a[1];  final double d=-(c - a[0] - a[1]);  if (c < 8e298 && c > -8e298) {    double z=c * HEX_40000000;    a[0]=(c + z) - z;    a[1]=c - a[0] + d;  } else {    double z=c * 9.31322574615478515625E-10;    a[0]=(c + z - c) * HEX_40000000;    a[1]=c - a[0] + d;  }}  }
class C{  public void addCDirectory(@NotNull String path){  File directory=myFileStructure.createProjectDir(path);  myCDirectories.add(directory);}  }
class C{  public LinearConstraint(final double[] coefficients,final Relationship relationship,final double value){  this(new ArrayRealVector(coefficients),relationship,value);}  }
class C{  public MarketGetQueryWithExtended count(Integer value){  return unsafeParam("count",value);}  }
class C{  public boolean isMarkerVisible(Object parentObj,Object obj){  boolean enabled=false;  if (overallEnableSymbolizersOverride) {    enabled=(obj instanceof Rule) && (geometryType == GeometryTypeEnum.POINT);  }  return enabled;}  }
class C{  private void blackmanHarris4s(int size){  int start=(windowFunction.length - size) / 2;  int stop=(windowFunction.length + size) / 2;  double scale=1.0 / (double)size / 0.4;  for (int i=0; start < stop; start++, i++)   windowFunction[i]=scale * (0.40217 - 0.49703 * Math.cos(twoPI * i / size) + 0.09392 * Math.cos(2 * twoPI * i / size) - 0.00183 * Math.cos(3 * twoPI * i / size));}  }
class C{  public static float normalize(float val,float minVal,float maxVal){  if (val < minVal || val > maxVal)   throw new IllegalArgumentException("Value must be between min and max values. [val, min, max]: [" + val + ","+ minVal+ ", "+ maxVal+ "]");  return (val - minVal) / (maxVal - minVal);}  }
class C{  public void handleEntryTakenSA(EntryTakenPacket packet) throws Exception {  Context context=null;  IEntryHolder entry=packet.getEntryHolder();  boolean anyNotityTakeTemplates=_cacheManager.getTemplatesManager().anyNotifyTakeTemplates();  if (!anyNotityTakeTemplates)   return;  try {    context=_cacheManager.getCacheContext();    context.setFromReplication(packet.isFromReplication());    context.setOperationID(packet.getOperationID());    context.setOperationVisibilityTime(packet.getCreationTime());    NotifyContextsHolder notifyContextHolder=new NotifyContextsHolder(packet.m_EntryValueToNotify,null,context.getOperationID(),NotifyActionType.NOTIFY_TAKE);    _engine.getTemplateScanner().scanNotifyTemplates(notifyContextHolder,context,null,FifoSearch.NO);  }  finally {    _cacheManager.freeCacheContext(context);  }}  }
class C{  public void straightenSelectedItem(Animator.AnimatorListener listener){  if (selectedItemPosition == RecyclerView.NO_POSITION || isSelectAnimationInProcess || isDeselectAnimationInProcess || isSelectedItemStraightened || isWaitingToDeselectAnimation || isWaitingToSelectAnimation || isViewCollapsing) {    return;  }  View viewToRotate=null;  View view;  for (int count=getChildCount(), i=0; i < count; i++) {    view=getChildAt(i);    if (selectedItemPosition == getPosition(view)) {      viewToRotate=view;    }  }  if (viewToRotate != null) {    animationHelper.straightenView(viewToRotate,listener);    isSelectedItemStraightened=true;  }}  }
class C{  public TrackCoverage(String bam,GenomicCoords gc,boolean bs) throws IOException {  this.setGc(gc);  this.setFilename(bam);  this.setBisulf(bs);  this.alnRecCnt=Utils.getAlignedReadCount(new File(bam));  UrlValidator urlValidator=new UrlValidator();  SamReaderFactory srf=SamReaderFactory.make();  srf.validationStringency(ValidationStringency.SILENT);  if (urlValidator.isValid(this.getFilename())) {    this.samReader=srf.open(SamInputResource.of(new URL(bam)).index(new URL(bam + ".bai")));  } else {    this.samReader=srf.open(new File(bam));  }  this.update();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SpellATK_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200412,skillname);}  }
class C{  public VideoDeleteCommentQuery deleteComment(UserActor actor,int commentId){  return new VideoDeleteCommentQuery(getClient(),actor,commentId);}  }
class C{  public void testWriteReadFull() throws Exception {  ByteArrayOutputStream out=new ByteArrayOutputStream(0);  ObjectOutputStream os=new ObjectOutputStream(out);  os.writeObject(full);  ObjectInputStream is=new ObjectInputStream(new ByteArrayInputStream(out.toByteArray()));  ActiveElectionConfig copy=(ActiveElectionConfig)is.readObject();  is.close();  os.close();  assertTrue(helper.areEquals(full,copy));}  }
class C{  public static String stripSignatureToFQN(String signature) throws IllegalArgumentException {  signature=Signature.getTypeErasure(signature);  signature=Signature.getElementType(signature);  return Signature.toString(signature);}  }
class C{  @PostConstruct public void init(){  aliveTimer=new AliveTimer(this);  ProcessConfiguration processConfiguration=getConfigurationController().getProcessConfiguration();  dataTagsBuffer=new SynchroBuffer(200,processConfiguration.getMaxMessageDelay(),100,SynchroBuffer.DUPLICATE_OK);  persistentTagsBuffer=new SynchroBuffer(200,processConfiguration.getMaxMessageDelay(),100,SynchroBuffer.DUPLICATE_OK);  dataTagsBuffer.setSynchroBufferListener(new SynchroBufferEventsListener());  persistentTagsBuffer.setSynchroBufferListener(new SynchroBufferEventsListener());  dataTagsBuffer.enable();  persistentTagsBuffer.enable();}  }
class C{  public void testApp(){  assertTrue(true);}  }
class C{  public SingularOperatorException(){  super(org.hipparchus.migration.exception.util.LocalizedFormats.SINGULAR_OPERATOR);}  }
class C{  public boolean isSetStatus(){  return __isset_bit_vector.get(__STATUS_ISSET_ID);}  }
class C{  public void renew(final Txn<T> newTxn){  if (SHOULD_CHECK) {    requireNonNull(newTxn);    checkNotClosed();    this.txn.checkReadOnly();    newTxn.checkReadOnly();    newTxn.checkReady();  }  checkRc(LIB.mdb_cursor_renew(newTxn.pointer(),ptrCursor));  this.txn=newTxn;}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public LEExpr fullCopy(){  LEExpr tree=(LEExpr)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public TypeDecl lookupLibType(String packageName,String typeName){  java.util.List _parameters=new java.util.ArrayList(2);  _parameters.add(packageName);  _parameters.add(typeName);  if (lookupLibType_String_String_values == null)   lookupLibType_String_String_values=new java.util.HashMap(4);  if (lookupLibType_String_String_values.containsKey(_parameters)) {    return (TypeDecl)lookupLibType_String_String_values.get(_parameters);  }  ASTNode$State state=state();  int num=state.boundariesCrossed;  boolean isFinal=this.is$Final();  TypeDecl lookupLibType_String_String_value=lookupLibType_compute(packageName,typeName);  if (isFinal && num == state().boundariesCrossed)   lookupLibType_String_String_values.put(_parameters,lookupLibType_String_String_value);  return lookupLibType_String_String_value;}  }
class C{  public List<CustomerReview> readCustomerReview(EntityManager em,String reviewXml,List<Product> products){  List<CustomerReview> customerReviews=new ArrayList<CustomerReview>();  Product prod=null;  String product_Id=null;  try {    XMLInputFactory inputFactory=XMLInputFactory.newInstance();    in=getResourceAsInputStream(reviewXml);    eventReader=inputFactory.createXMLEventReader(in);    CustomerReview customerReview=null;    while (eventReader.hasNext()) {      XMLEvent event=eventReader.nextEvent();      if (event.isStartElement()) {        StartElement startElement=event.asStartElement();        if (startElement.getName().getLocalPart() == (CUSTOMERREVIEW)) {          customerReview=new CustomerReview();        }        if (event.asStartElement().getName().getLocalPart().equals(CUSTOMERREVIEW_COMMENT)) {          event=eventReader.nextEvent();          customerReview.setComment(getEvent(event));          continue;        }        if (event.asStartElement().getName().getLocalPart().equals(CUSTOMERREVIEW_CREATIONDATE)) {          event=eventReader.nextEvent();          String datetime=getEvent(event);          Calendar cal=Calendar.getInstance();          Date date=null;          DateFormat formatter=new SimpleDateFormat("yyyymmdd");          date=formatter.parse(datetime);          cal.setTime(date);          customerReview.setCreationDate(cal);          continue;        }        if (event.asStartElement().getName().getLocalPart().equals(CUSTOMERREVIEW_FIRSTNAME)) {          event=eventReader.nextEvent();          customerReview.setFirstName(getEvent(event));          continue;        }        if (event.asStartElement().getName().getLocalPart().equals(CUSTOMERREVIEW_LASTNAME)) {          event=eventReader.nextEvent();          customerReview.setLastName(getEvent(event));          continue;        }        if (event.asStartElement().getName().getLocalPart().equals(CUSTOMERREVIEW_RATING)) {          event=eventReader.nextEvent();          customerReview.setRating(Integer.parseInt(getEvent(event)));          continue;        }        if (event.asStartElement().getName().getLocalPart().equals(CUSTOMERREVIEW_PRODUCT_ID)) {          event=eventReader.nextEvent();          product_Id=getEvent(event);          customerReview.setProductId(product_Id);          continue;        }      }      if (event.isEndElement()) {        EndElement endElement=event.asEndElement();        if (endElement.getName().getLocalPart() == (CUSTOMERREVIEW)) {          if (!(products == null)) {            prod=em.find(Product.class,product_Id);            customerReview.setProduct(prod);          }          em.persist(customerReview);          prod.addReview(customerReview);          customerReviews.add(customerReview);        }      }    }  } catch (  Exception e) {    logger.error("Exception occured",e);    status=false;  } finally {    try {      in.close();      eventReader.close();    } catch (    IOException e) {      logger.error("IO Exception occured",e);      status=false;    }catch (    XMLStreamException e) {      logger.error("XMLStream exception occured",e);      status=false;    }  }  return customerReviews;}  }
class C{  private void loadInstantUploadPath(){  SharedPreferences appPrefs=PreferenceManager.getDefaultSharedPreferences(getApplicationContext());  mUploadPath=appPrefs.getString("instant_upload_path",getString(R.string.instant_upload_path));  mPrefInstantUploadPath.setSummary(mUploadPath);}  }
class C{  public VideoGetCatalogQuery filters(VideoGetCatalogFilter... value){  return unsafeParam("filters",value);}  }
class C{  protected MarketGetAlbumsQuery ownerId(int value){  return unsafeParam("owner_id",value);}  }
class C{  @deprecated public static boolean isSpace(int ch){  return (ch <= 32) && ((ch == 32) || (ch == 9) || (ch == 10)|| (ch == 12)|| (ch == 13));}  }
class C{  public static boolean exists(long id){  try {    return Helper.exists(id,User.class);  } catch (  Exception e1) {    log.error(e1.getMessage(),e1);  }  return false;}  }
class C{  protected static double kernelLength2bandwidth(int kernelLength){  return (double)4 / kernelLength;}  }
class C{  public boolean isApplicable(){  if (getViewer() instanceof ClusterViewer) {    final ClusterViewer clusterViewer=(ClusterViewer)getViewer();    return clusterViewer.isPCoATab() && clusterViewer.getGraphView().getSelectedNodes().size() >= 1;  } else   return true;}  }
class C{  public static <T extends Bean>Beans<T> load(Bson query,Bson orderby,int offset,int limit,Class<T> clazz){  String collection=getCollection(clazz);  if (collection != null) {    return load(collection,query,orderby,offset,limit,clazz);  }  return null;}  }
class C{  public static Schema schemaForStructType(StructType structType){  List<String> fieldNames=Lists.newArrayList();  List<String> fieldTypes=Lists.newArrayList();  for (  StructField field : structType.fields()) {    fieldNames.add(field.name());    DataType fieldType=field.dataType();    if (fieldType.equals(DataTypes.StringType)) {      fieldTypes.add("string");    } else     if (fieldType.equals(DataTypes.FloatType)) {      fieldTypes.add("float");    } else     if (fieldType.equals(DataTypes.DoubleType)) {      fieldTypes.add("double");    } else     if (fieldType.equals(DataTypes.IntegerType)) {      fieldTypes.add("int");    } else     if (fieldType.equals(DataTypes.LongType)) {      fieldTypes.add("long");    } else     if (fieldType.equals(DataTypes.BooleanType)) {      fieldTypes.add("boolean");    } else {      throw new RuntimeException("Unsupported Spark SQL field type: " + fieldType);    }  }  return RecordUtils.schemaFor(fieldNames,fieldTypes);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_CANT_GATHERING_B_LEVEL_CHECK(String value0){  return new SM_SYSTEM_MESSAGE(1400737,value0);}  }
class C{  @deprecated public CompactByteArray(char[] indexArray,byte[] newValues){  if (indexArray.length != 512)   throw new IllegalArgumentException("Index out of bounds.");  for (int i=0; i < 512; i++) {    char index=indexArray[i];    if ((index < 0) || (index >= newValues.length + 128))     throw new IllegalArgumentException("Index out of bounds.");  }  this.indices=indexArray;  this.values=newValues;  this.isCompact=true;}  }
class C{  public Matrix plus(Matrix B){  checkMatrixDimensions(B);  Matrix X=new Matrix(m,n);  double[][] C=X.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      C[i][j]=A[i][j] + B.A[i][j];    }  }  return X;}  }
class C{  public static void createTable(Database db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "\"USER\" ("+ "\"_id\" INTEGER PRIMARY KEY NOT NULL ,"+ "\"NAME\" TEXT,"+ "\"AGE\" INTEGER NOT NULL );");}  }
class C{  public void testWriteReadEmpty() throws Exception {  ByteArrayOutputStream out=new ByteArrayOutputStream(0);  ObjectOutputStream os=new ObjectOutputStream(out);  os.writeObject(empty);  ObjectInputStream is=new ObjectInputStream(new ByteArrayInputStream(out.toByteArray()));  ClusterPolicy copy=(ClusterPolicy)is.readObject();  is.close();  os.close();  assertTrue(helper.areEquals(empty,copy));}  }
class C{  public VideoPutTagQuery taggedName(String value){  return unsafeParam("tagged_name",value);}  }
class C{  private static int parseLine(Class service,URL u,BufferedReader r,int lc,List names,Set returned) throws IOException, ServiceConfigurationError {  String ln=r.readLine();  if (ln == null) {    return -1;  }  int ci=ln.indexOf('#');  if (ci >= 0)   ln=ln.substring(0,ci);  ln=ln.trim();  int n=ln.length();  if (n != 0) {    if ((ln.indexOf(' ') >= 0) || (ln.indexOf('\t') >= 0))     fail(service,u,lc,"Illegal configuration-file syntax");    int cp=ln.codePointAt(0);    if (!Character.isJavaIdentifierStart(cp))     fail(service,u,lc,"Illegal provider-class name: " + ln);    for (int i=Character.charCount(cp); i < n; i+=Character.charCount(cp)) {      cp=ln.codePointAt(i);      if (!Character.isJavaIdentifierPart(cp) && (cp != '.'))       fail(service,u,lc,"Illegal provider-class name: " + ln);    }    if (!returned.contains(ln)) {      names.add(ln);      returned.add(ln);    }  }  return lc + 1;}  }
class C{  public PhotosDeleteAlbumQuery groupId(Integer value){  return unsafeParam("group_id",value);}  }
class C{  public static double sum(double[] nums){  double ret=0;  for (  double d : nums)   ret+=d;  return ret;}  }
class C{  public CMUVoice(String name,Gender gender,Age age,String description,Locale locale,String domain,String organization,CMULexicon lexicon){  super(name,gender,age,description,locale,domain,organization);  setLexicon(lexicon);}  }
class C{  static String formatDateTimeAsUI(OffsetDateTime date,String timeZoneOffset){  try {    return date.format(DateTimeFormatter.ofPattern("MMM d, YYYY HH:mm:ss a").withZone(ZoneId.ofOffset("UTC",ZoneOffset.of(timeZoneOffset))));  } catch (  DateTimeException dateTimeException) {    throw new PaginationException(ErrorCode.FILTER_KEY_UNPROCESSABLE,"Wrong format: Can not parse timezone '" + timeZoneOffset + "' or date "+ date.toString()+ " properly.",dateTimeException);  }}  }
class C{  public void preclose(){  preclosed=true;}  }
class C{  public ChangeSet addToCollection(String path,Serializable newItem){  return add(new AddToCollectionSpaceEntryMutator(path,newItem));}  }
class C{  public DataFile(ModelDataFile modelDataFile){  this.modelDataFile=modelDataFile;}  }
class C{  private int parseExpr(List<Elem> elems,String line,int i){  int braceLevel=1;  StringBuilder sb=new StringBuilder();  while (i < line.length()) {    char ch=line.charAt(i++);switch (ch) {case '{':      sb.append('{');    braceLevel++;  break;case '}':if (--braceLevel == 0) {  TokenStream tokens=new TokenStream(sb.toString());  Elem elem=parseExpr(tokens);  tokens.checkAtEnd();  if (elem != null) {    elems.add(elem);  }  return i;}default :sb.append(ch);break;}}new TokenStream(sb.toString()).syntaxError("expected '}' to close expression");return i;}  }
class C{  public Boolean shouldOpenExternalUrl(String url){  for (  PluginEntry entry : this.entryMap.values()) {    CordovaPlugin plugin=pluginMap.get(entry.service);    if (plugin != null) {      Boolean result=plugin.shouldOpenExternalUrl(url);      if (result != null) {        return result;      }    }  }  return false;}  }
class C{  public static JsonNode removeChild(JsonNode original,String key){  Map<JsonStringNode,JsonNode> existingFields=original.getFields();  Map<JsonStringNode,JsonNode> newMap=new HashMap<>();  for (  Entry<JsonStringNode,JsonNode> entry : existingFields.entrySet()) {    if (!entry.getKey().toString().equals(key)) {      newMap.put(entry.getKey(),entry.getValue());    }  }  return JsonNodeFactories.object(newMap);}  }
class C{  private DataPartitioner instantiatePartitioner(String partitionerTypeName) throws PIRException {  Object obj;  try {    @SuppressWarnings("unchecked") Class<? extends DataPartitioner> c=(Class<? extends DataPartitioner>)Class.forName(partitionerTypeName);    obj=c.newInstance();  } catch (  ClassNotFoundException|InstantiationException|IllegalAccessException|ClassCastException e) {    throw new PIRException("partitioner = " + partitionerTypeName + " cannot be instantiated or does not implement DataPartitioner.",e);  }  return (DataPartitioner)obj;}  }
class C{  public String createAjaxParamsFromUpdateAreas(List<ModelForm.UpdateArea> updateAreas,String extraParams,Map<String,? extends Object> context){  if (updateAreas == null) {    return "";  }  String ajaxUrl="";  boolean firstLoop=true;  for (  ModelForm.UpdateArea updateArea : updateAreas) {    if (firstLoop) {      firstLoop=false;    } else {      ajaxUrl+=",";    }    Map<String,Object> ctx=UtilGenerics.checkMap(context);    Map<String,String> parameters=updateArea.getParameterMap(ctx);    String targetUrl=updateArea.getAreaTarget(context);    String ajaxParams=getAjaxParamsFromTarget(targetUrl);    if (UtilValidate.isNotEmpty(parameters)) {      if (UtilValidate.isEmpty(ajaxParams)) {        ajaxParams="";      }      for (      Map.Entry<String,String> entry : parameters.entrySet()) {        String key=entry.getKey();        String value=entry.getValue();        if (UtilValidate.isNotEmpty(extraParams) && extraParams.contains(value)) {          continue;        }        if (ajaxParams.length() > 0 && ajaxParams.indexOf(key) < 0) {          ajaxParams+="&";        }        if (ajaxParams.indexOf(key) < 0) {          ajaxParams+=key + "=" + value;        }      }    }    if (UtilValidate.isNotEmpty(extraParams)) {      if (ajaxParams.length() > 0 && !extraParams.startsWith("&")) {        ajaxParams+="&";      }      ajaxParams+=extraParams;    }    ajaxUrl+=updateArea.getAreaId() + ",";    ajaxUrl+=this.rh.makeLink(this.request,this.response,UtilHttp.removeQueryStringFromTarget(targetUrl));    ajaxUrl+="," + ajaxParams;  }  Locale locale=UtilMisc.ensureLocale(context.get("locale"));  return FlexibleStringExpander.expandString(ajaxUrl,context,locale);}  }
class C{  public void begin(){  if (currentPrompt == null) {    abandoned=false;    currentPrompt=firstPrompt;    context.getForWhom().beginConversation(this);  }}  }
class C{  public AccountGetInfoQuery fields(AccountGetInfoField... value){  return unsafeParam("fields",value);}  }
class C{  private void saveAllLegendToFolder(File destinationFolder){  if (!destinationFolder.exists()) {    destinationFolder.mkdirs();  }  logger.info(Localisation.getString(LegendTool.class,"LegendTool.saveAllLayerLegends"));  for (  SLDDataInterface sldData : sldDataList) {    StyledLayerDescriptor sld=SLDUtils.createSLDFromString(sldData);    if (sld != null) {      String heading=null;      String filename=null;      String layerName=sldData.getLayerNameWithOutSuffix();      List<String> filenameList=new ArrayList<String>();      LegendManager.getInstance().saveLegendImage(sld,destinationFolder,layerName,heading,filename,filenameList);    }  }}  }
class C{  public byte[] copyToNewArray(){  return Arrays.copyOf(bytes,bytes.length);}  }
class C{  public void apply(NexusStreamParser np) throws Exception {}  }
class C{  @Override public int countMissing(){  int count=0;  for (int i=0; i < size(); i++) {    if (getInt(i) == MISSING_VALUE) {      count++;    }  }  return count;}  }
class C{  public void dismissLoadingDialog(){  Fragment frag=getSupportFragmentManager().findFragmentByTag(DIALOG_WAIT_TAG);  if (frag != null) {    LoadingDialog loading=(LoadingDialog)frag;    loading.dismissAllowingStateLoss();  }}  }
class C{  private boolean canReadCOGS(User user,CategoryOptionGroupSet cogs){  if (cogs == null) {    UserCredentials userCredentials=user.getUserCredentials();    return CollectionUtils.isEmpty(userCredentials.getCogsDimensionConstraints()) && CollectionUtils.isEmpty(userCredentials.getCatDimensionConstraints());  }  return !CollectionUtils.isEmpty(categoryService.getCategoryOptionGroups(cogs));}  }
class C{  public PathSubject containsFiles(String... filenames){  for (  String filename : filenames) {    checkFile(filename);  }  return this;}  }
class C{  public void addClickingListener(OnWheelClickedListener listener){  clickingListeners.add(listener);}  }
class C{  @Override public void processingInstruction(String target,XMLString data,Augmentations augs) throws XNIException {  if (fInDTD) {    if (fInternalSubset != null && !fInDTDExternalSubset) {      fInternalSubset.append("<?");      fInternalSubset.append(target);      if (data.length > 0) {        fInternalSubset.append(' ').append(data.ch,data.offset,data.length);      }      fInternalSubset.append("?>");    }    return;  }  if (DEBUG_EVENTS) {    System.out.println("==>processingInstruction (" + target + ")");  }  if (!fDeferNodeExpansion) {    if (fFilterReject) {      return;    }    ProcessingInstruction pi=fDocument.createProcessingInstruction(target,data.toString());    setCharacterData(false);    fCurrentNode.appendChild(pi);    if (fDOMFilter != null && !fInEntityRef && (fDOMFilter.getWhatToShow() & NodeFilter.SHOW_PROCESSING_INSTRUCTION) != 0) {      short code=fDOMFilter.acceptNode(pi);switch (code) {case LSParserFilter.FILTER_INTERRUPT:{          throw Abort.INSTANCE;        }case LSParserFilter.FILTER_REJECT:{      }case LSParserFilter.FILTER_SKIP:{      fCurrentNode.removeChild(pi);      fFirstChunk=true;      return;    }default :{  }}}} else {int pi=fDeferredDocumentImpl.createDeferredProcessingInstruction(target,data.toString());fDeferredDocumentImpl.appendChild(fCurrentNodeIndex,pi);}}  }
class C{  public void calcRenew(long now){  endTime=lease.getExpiration();  if (renewalsDone()) {    if (null == desiredExpirationListener()) {      renew=Long.MAX_VALUE;    } else {      renew=expiration;    }    return;  }  long delta=endTime - now;  if (delta <= renewalRTT * 2) {    delta=renewalRTT;  } else   if (delta <= renewalRTT * 8) {    delta/=2;  } else   if (delta <= 1000 * 60 * 60* 24* 7) {    delta/=8;  } else   if (delta <= 1000 * 60 * 60* 24* 14) {    delta=1000 * 60 * 60* 24;  } else {    delta=1000 * 60 * 60* 24* 3;  }  renew=endTime - delta;}  }
class C{  private void drawCenterRect(Canvas canvas){  int center=getHeight() / 2;  int offset=(int)(getItemHeight() / 2 * 1.2);  Paint paint=new Paint();  paint.setColor(getResources().getColor(R.color.province_line_border));  paint.setStrokeWidth((float)3);  canvas.drawLine(0,center - offset,getWidth(),center - offset,paint);  canvas.drawLine(0,center + offset,getWidth(),center + offset,paint);}  }
class C{  private List<String> generateTestTasks() throws Exception {  List<String> ids=new ArrayList<String>();  SimpleDateFormat sdf=new SimpleDateFormat("dd/MM/yyyy hh:mm:ss.SSS");  processEngineConfiguration.getClock().setCurrentTime(sdf.parse("01/01/2001 01:01:01.000"));  for (int i=0; i < 2; i++) {    Task task=taskService.newTask();    task.setName("testTask");    task.setDescription("testTask description");    task.setPriority(3);    taskService.saveTask(task);    ids.add(task.getId());    taskService.setVariableLocal(task.getId(),"test","test");    taskService.setVariableLocal(task.getId(),"testBinary","This is a binary variable".getBytes());    taskService.addCandidateUser(task.getId(),"kermit");  }  processEngineConfiguration.getClock().setCurrentTime(sdf.parse("02/02/2002 02:02:02.000"));  Task task=taskService.newTask();  task.setName("gonzoTask");  task.setDescription("gonzo description");  task.setPriority(4);  task.setCategory("testCategory");  taskService.saveTask(task);  taskService.setAssignee(task.getId(),"gonzo");  taskService.setVariableLocal(task.getId(),"testVar","someVariable");  taskService.setVariableLocal(task.getId(),"testVarBinary","This is a binary variable".getBytes());  taskService.setVariableLocal(task.getId(),"testVar2",123);  ids.add(task.getId());  return ids;}  }
class C{  public java.rmi.MarshalledObject convertToMarshalledObject(){  net.jini.io.MarshalledObject privateMO=new net.jini.io.MarshalledObject();  privateMO.objBytes=objBytes;  privateMO.locBytes=locBytes;  privateMO.hash=hash;  java.rmi.MarshalledObject mo=null;  try {    OptimizedByteArrayOutputStream baos=new OptimizedByteArrayOutputStream();    baos.writeByte(buildFlag());    OutputStream os=baos;    if (USE_GZIP) {      os=new GZIPOutputStream(baos);    }    ObjectOutputStream oos=new ObjectOutputStream(os);    oos.writeObject(privateMO);    oos.flush();    os.close();    byte[] bytes=baos.toByteArray();    OptimizedByteArrayInputStream bais=new OptimizedByteArrayInputStream(bytes);    byte flags=bais.readByte();    InputStream is=bais;    if (isGzip(flags)) {      is=new GZIPInputStream(is);    }    ObjectInputStream ois=new ToMOInputStream(is);    mo=(java.rmi.MarshalledObject)ois.readObject();    is.close();  } catch (  IOException ioe) {    throw new AssertionError(ioe);  }catch (  ClassNotFoundException cnfe) {    throw new AssertionError(cnfe);  }  return mo;}  }
class C{  public OrdersChangeStateQuery testMode(Boolean value){  return unsafeParam("test_mode",value);}  }
class C{  private static Map<String,String> extractKeyValuePairs(String props,ObjectName mbean){  Map<String,String> map=new LinkedHashMap<String,String>();  int eq=props.indexOf("=");  while (eq != -1) {    String key=props.substring(0,eq);    String value=mbean.getKeyProperty(key);    map.put(key,value);    props=props.substring(key.length() + 1 + value.length());    if (props.startsWith(",")) {      props=props.substring(1);    }    eq=props.indexOf("=");  }  return map;}  }
class C{  public static String byteToHexString(byte bytes[]){  return byteToHexString(bytes,0,bytes.length);}  }
class C{  public static double forceSide(final int maxEval,final UnivariateFunction f,final BracketedUnivariateSolver<UnivariateFunction> bracketing,final double baseRoot,final double min,final double max,final AllowedSolution allowedSolution) throws MathIllegalArgumentException {  if (allowedSolution == AllowedSolution.ANY_SIDE) {    return baseRoot;  }  final double step=FastMath.max(bracketing.getAbsoluteAccuracy(),FastMath.abs(baseRoot * bracketing.getRelativeAccuracy()));  double xLo=FastMath.max(min,baseRoot - step);  double fLo=f.value(xLo);  double xHi=FastMath.min(max,baseRoot + step);  double fHi=f.value(xHi);  int remainingEval=maxEval - 2;  while (remainingEval > 0) {    if ((fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0)) {      return bracketing.solve(remainingEval,f,xLo,xHi,baseRoot,allowedSolution);    }    boolean changeLo=false;    boolean changeHi=false;    if (fLo < fHi) {      if (fLo >= 0) {        changeLo=true;      } else {        changeHi=true;      }    } else     if (fLo > fHi) {      if (fLo <= 0) {        changeLo=true;      } else {        changeHi=true;      }    } else {      changeLo=true;      changeHi=true;    }    if (changeLo) {      xLo=FastMath.max(min,xLo - step);      fLo=f.value(xLo);      remainingEval--;    }    if (changeHi) {      xHi=FastMath.min(max,xHi + step);      fHi=f.value(xHi);      remainingEval--;    }  }  throw new MathIllegalArgumentException(LocalizedCoreFormats.FAILED_BRACKETING,xLo,xHi,fLo,fHi,maxEval - remainingEval,maxEval,baseRoot,min,max);}  }
class C{  private void loadState(){  try {    IPath pluginStateLocation=SVNProviderPlugin.getPlugin().getStateLocation().append(REPOSITORIES_STATE_FILE);    File file=pluginStateLocation.toFile();    if (file.exists()) {      try {        DataInputStream dis=new DataInputStream(new FileInputStream(file));        readState(dis);        dis.close();      } catch (      IOException e) {        throw new TeamException(new Status(Status.ERROR,SVNProviderPlugin.ID,TeamException.UNABLE,Policy.bind("SVNProvider.ioException"),e));      }    }  } catch (  TeamException e) {    Util.logError(Policy.bind("SVNProvider.errorLoading"),e);  }}  }
class C{  public static DrawFragment newInstance(@Nullable Uri imageUri){  Bundle args=new Bundle();  args.putParcelable(KEY_IMAGE_URI,imageUri);  DrawFragment fragment=new DrawFragment();  fragment.setArguments(args);  return fragment;}  }
class C{  public static int parseInt(String text) throws DataParseException {  try {    return ColorLib.hex(text);  } catch (  Exception e) {    throw new DataParseException(e);  }}  }
class C{  private void createMainMethod(){  SootMethod entryPoint=createEntryPointCreator().createDummyMain();  Scene.v().setEntryPoints(Collections.singletonList(entryPoint));  if (Scene.v().containsClass(entryPoint.getDeclaringClass().getName()))   Scene.v().removeClass(entryPoint.getDeclaringClass());  Scene.v().addClass(entryPoint.getDeclaringClass());}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final int fuzzyThreshold,final float scaleFactor,final boolean isTouchEvent){  final int deltaValue, currentScrollValue, scrollValue;switch (view.getPullToRefreshScrollDirection()) {case HORIZONTAL:    deltaValue=deltaX;  scrollValue=scrollX;currentScrollValue=view.getScrollX();break;case VERTICAL:default :deltaValue=deltaY;scrollValue=scrollY;currentScrollValue=view.getScrollY();break;}if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {final Mode mode=view.getMode();if (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {final int newScrollValue=(deltaValue + scrollValue);if (PullToRefreshBase.DEBUG) {Log.d(LOG_TAG,"OverScroll. DeltaX: " + deltaX + ", ScrollX: "+ scrollX+ ", DeltaY: "+ deltaY+ ", ScrollY: "+ scrollY+ ", NewY: "+ newScrollValue+ ", ScrollRange: "+ scrollRange+ ", CurrentScroll: "+ currentScrollValue);}if (newScrollValue < (0 - fuzzyThreshold)) {if (mode.showHeaderLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue)));}} else if (newScrollValue > (scrollRange + fuzzyThreshold)) {if (mode.showFooterLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));}} else if (Math.abs(newScrollValue) <= fuzzyThreshold || Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {view.setState(State.RESET);}} else if (isTouchEvent && State.OVERSCROLLING == view.getState()) {view.setState(State.RESET);}}}  }
class C{  public byte[] generateNonceForEncapsulationMessage(){  return generateNonceBytes();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Fear_END_ME_TO_B(String skilltarget){  return new SM_SYSTEM_MESSAGE(1200445,skilltarget);}  }
class C{  private void spawnShieldControlRoomTeleporter(){  sendMsg(1402202);  deleteNpc(702010);  deleteNpc(702011);  deleteNpc(702012);  deleteNpc(702013);  spawn(730886,255.47392f,293.56177f,321.18497f,(byte)89);  spawn(730886,255.55742f,216.03549f,321.21344f,(byte)30);  spawn(730886,294.20718f,254.60352f,295.7729f,(byte)60);  spawn(730886,216.97739f,254.4616f,295.77353f,(byte)0);  GENTask.cancel(true);  CNT1Task.cancel(true);  CNT2Task.cancel(true);  CNT3Task.cancel(true);  CNT4Task.cancel(true);  CNT5Task.cancel(true);  CNT6Task.cancel(true);  CNT7Task.cancel(true);  SP1Task.cancel(true);  SP2Task.cancel(true);  SP3Task.cancel(true);  SP4Task.cancel(true);  isEnd=true;}  }
class C{  public static List<String> readLines(InputStream input,String encoding) throws IOException {  return readLines(input,Charsets.toCharset(encoding));}  }
class C{  public final boolean contains(Node n){  int left=0;  int right=size;  int hc=n.getNumber();  while (left < right) {    int mid=(left + right) / 2;    int midhc=nodes[mid].getNumber();    if (midhc < hc) {      left=mid + 1;    } else     if (midhc > hc) {      right=mid;    } else     return true;  }  return false;}  }
class C{  public Scoop bind(Object obj,int toppingId,View view,@Nullable ColorAdapter colorAdapter){  return bind(obj,toppingId,view,colorAdapter,null);}  }
class C{  public SumOfSquares(){  n=0;  value=0;}  }
class C{  private void deleteLegionMemberFromDB(LegionMemberEx legionMember){  this.allCachedLegionMembers.remove(legionMember);  DAOManager.getDAO(LegionMemberDAO.class).deleteLegionMember(legionMember.getObjectId());  Legion legion=legionMember.getLegion();  legion.deleteLegionMember(legionMember.getObjectId());  addHistory(legion,legionMember.getName(),LegionHistoryType.KICK);}  }
class C{  public DatabaseGetUniversitiesQuery cityId(Integer value){  return unsafeParam("city_id",value);}  }
class C{  public int hashCode(){  int hc=13 * sort;  if (sort == OBJECT || sort == ARRAY) {    for (int i=off, end=i + len; i < end; i++) {      hc=17 * (hc + buf[i]);    }  }  return hc;}  }
class C{  @Override public List<CentroidCluster<T>> cluster(final Collection<T> points) throws MathIllegalArgumentException, MathIllegalStateException {  MathUtils.checkNotNull(points);  if (points.size() < k) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED,points.size(),k);  }  List<CentroidCluster<T>> clusters=chooseInitialCenters(points);  int[] assignments=new int[points.size()];  assignPointsToClusters(clusters,points,assignments);  final int max=(maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;  for (int count=0; count < max; count++) {    boolean emptyCluster=false;    List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>();    for (    final CentroidCluster<T> cluster : clusters) {      final Clusterable newCenter;      if (cluster.getPoints().isEmpty()) {switch (emptyStrategy) {case LARGEST_VARIANCE:          newCenter=getPointFromLargestVarianceCluster(clusters);        break;case LARGEST_POINTS_NUMBER:      newCenter=getPointFromLargestNumberCluster(clusters);    break;case FARTHEST_POINT:  newCenter=getFarthestPoint(clusters);break;default :throw new MathIllegalStateException(LocalizedClusteringFormats.EMPTY_CLUSTER_IN_K_MEANS);}emptyCluster=true;} else {newCenter=centroidOf(cluster.getPoints(),cluster.getCenter().getPoint().length);}newClusters.add(new CentroidCluster<T>(newCenter));}int changes=assignPointsToClusters(newClusters,points,assignments);clusters=newClusters;if (changes == 0 && !emptyCluster) {return clusters;}}return clusters;}  }
class C{  public boolean canIssueUserRole(UserAuthorityGroup group,boolean canGrantOwnUserAuthorityGroups){  if (group == null) {    return false;  }  final Set<String> authorities=getAllAuthorities();  if (authorities.contains(UserAuthorityGroup.AUTHORITY_ALL)) {    return true;  }  if (!canGrantOwnUserAuthorityGroups && userAuthorityGroups.contains(group)) {    return false;  }  return authorities.containsAll(group.getAuthorities());}  }
class C{  public void copyEnabled(Set<String> disabledSamples,DataTable originalData){  clear();  String[] origSampleNames=originalData.getSampleNames();  BitSet activeIndices=new BitSet();  for (int i=0; i < origSampleNames.length; i++) {    if (!disabledSamples.contains(origSampleNames[i])) {      activeIndices.set(i);    }  }  Long[] origSampleUIds=originalData.getSampleUIds();  Integer[] origSampleSizes=originalData.getSampleSizes();  BlastMode[] origBlastModes=originalData.getBlastModes();  sampleNames.clear();  int totalReads=0;  for (int origIndex=0; origIndex < origSampleNames.length; origIndex++) {    if (activeIndices.get(origIndex)) {      sampleNames.addElement(origSampleNames[origIndex]);      if (origSampleUIds != null && origSampleUIds.length > origIndex)       sampleUIds.addElement(origSampleUIds[origIndex]);      if (origBlastModes != null && origBlastModes.length > origIndex)       blastModes.addElement(origBlastModes[origIndex]);      sampleSizes.addElement(origSampleSizes[origIndex]);      if (origSampleSizes[origIndex] != null)       totalReads+=origSampleSizes[origIndex];    }  }  setTotalReads(totalReads);  for (  String classification : originalData.classification2class2counts.keySet()) {    Map<Integer,Integer[]> origClass2counts=originalData.classification2class2counts.get(classification);    Map<Integer,Integer[]> class2counts=classification2class2counts.get(classification);    if (class2counts == null) {      class2counts=new HashMap<>();      classification2class2counts.put(classification,class2counts);    }    for (    Integer classId : origClass2counts.keySet()) {      Integer[] origCounts=origClass2counts.get(classId);      Integer[] counts=new Integer[activeIndices.cardinality()];      int index=0;      for (int origIndex=0; origIndex < origCounts.length; origIndex++) {        if (activeIndices.get(origIndex)) {          counts[index++]=origCounts[origIndex];        }      }      class2counts.put(classId,counts);    }  }  this.disabledSamples.addAll(disabledSamples);}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  SubMap(FastConcurrentSkipListMap<K,V> map,K fromKey,boolean fromInclusive,K toKey,boolean toInclusive,boolean isDescending){  if (fromKey != null && toKey != null && map.compare(fromKey,toKey) > 0)   throw new IllegalArgumentException("inconsistent range");  this.m=map;  this.lo=fromKey;  this.hi=toKey;  this.loInclusive=fromInclusive;  this.hiInclusive=toInclusive;  this.isDescending=isDescending;}  }
class C{  public void removeCommunicationListener(FTPCommunicationListener listener){synchronized (lock) {    communicationListeners.remove(listener);    if (communication != null) {      communication.removeCommunicationListener(listener);    }  }}  }
class C{  public FriendsEditListQuery addUserIds(List<Integer> value){  return unsafeParam("add_user_ids",value);}  }
class C{  public View inflateHeaderView(@LayoutRes int res){  return mNavigationView.inflateHeaderView(res);}  }
class C{  public static int lerp(int a,int b,double t){  return a + (int)((b - a) * t);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DelayedFPATK_Instant_INTERVAL_A_TO_ME(int num0,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200656,num0,skillcaster,skillname);}  }
class C{  public void incrementSelectedStyledLayerIndex(){  this.selectedStyledLayerIndex++;}  }
class C{  private void forwardSelectedItems(List<NodeInterface> nodeTypeList,List<SLDDataInterface> sldDataList){  if (toolPanel != null) {    List<Class<?>> uniqueNodeTypeList=new ArrayList<Class<?>>();    if (nodeTypeList != null) {      for (      NodeInterface o : nodeTypeList) {        if (!uniqueNodeTypeList.contains(o.getClass())) {          uniqueNodeTypeList.add(o.getClass());        }      }    }    toolPanel.setSelectedItems(uniqueNodeTypeList,nodeTypeList,sldDataList);  }}  }
class C{  private void writeLine(char[] chars,int start,int len) throws IOException {  if (beginningOfLine && len > 0) {    writeIndent();    beginningOfLine=false;  }  writer.write(chars,start,len);}  }
class C{  public boolean isFinished(){  return this.request == null || request.isDone();}  }
class C{  public void tabTitleChanged(int tabId,String title){  StripLayoutTab tab=findTabById(tabId);  if (tab != null)   tab.setAccessibilityDescription(title);}  }
class C{  public static Object readObject(InputStream in) throws IOException, ClassNotFoundException {  ObjectInputStreamExt objIn=new ObjectInputStreamExt(in);  Object result=objIn.readObject();  return result;}  }
class C{  public void addRenderer(RenderSymbolInterface renderer){  if (!rendererList.contains(renderer)) {    rendererList.add(renderer);  }}  }
class C{  private static boolean resolveBoolean(Context context,@AttrRes int attr,boolean fallback){  TypedArray a=context.getTheme().obtainStyledAttributes(new int[]{attr});  try {    return a.getBoolean(0,fallback);  }  finally {    a.recycle();  }}  }
class C{  public DistributedLogClientBuilder redirectBackoffMaxMs(int ms){  DistributedLogClientBuilder newBuilder=newBuilder(this);  newBuilder._clientConfig.setRedirectBackoffMaxMs(ms);  return newBuilder;}  }
class C{  public void inverseTranslateVect(Vector3f data){  data.x-=m03;  data.y-=m13;  data.z-=m23;}  }
class C{  void writeOnTheBoard(int protocol,String[] splitPacket){  String message;switch (protocol) {case Settings._REQUEST_METEORGAME_REINIT_GAME_PLAY:    message="[protocol : " + socket.getRemoteSocketAddress() + ": "+ splitPacket[1]+ "(RoomName)"+ "] meteorgame reinit";  Platform.runLater(null);break;case Settings._ACCESS_THE_SERVER:message="[protocol : " + socket.getRemoteSocketAddress() + ": "+ "Client connection Check"+ "]";Platform.runLater(null);break;case Settings._REQUEST_THE_ROOM_LIST_INFORMATION:message="[protocol : " + socket.getRemoteSocketAddress() + ": "+ "Create a Room "+ "\""+ splitPacket[1]+ "\""+ " Room Number : "+ gameRooms.size()+ "]";Platform.runLater(null);break;case Settings._ANSWER_THE_ROOM_IS_EXIST:message="[protocol : " + socket.getRemoteSocketAddress() + ": "+ "Fail to Create a Room "+ splitPacket[1]+ "]";Platform.runLater(null);break;case Settings._REQUEST_ROOM_MEMBER_NUMBER:message="[protocol : " + socket.getRemoteSocketAddress() + ": "+ "Send the Room Member Number "+ "]";Platform.runLater(null);break;case Settings._REQUEST_LOGIN:message="[protocol : " + socket.getRemoteSocketAddress() + ": "+ "Login "+ splitPacket[1]+ ","+ splitPacket[2]+ "]";Platform.runLater(null);break;case Settings._REQUEST_MOBILE_LOGIN:message="[protocol : " + socket.getRemoteSocketAddress() + ": "+ "Login "+ splitPacket[1]+ ","+ splitPacket[2]+ "]";Platform.runLater(null);break;case Settings._REQUEST_REGISTER_NEW_USER:message="[protocol : " + socket.getRemoteSocketAddress() + ": "+ "Create New Id "+ splitPacket[1]+ ","+ splitPacket[2]+ "] Success";Platform.runLater(null);break;case Settings._REQUEST_OUT_OF_THE_SERVER:message="[protocol : " + socket.getRemoteSocketAddress() + ": "+ " "+ splitPacket[1]+ "] out of the server Success";Platform.runLater(null);break;case Settings._REQUEST_METEORGAME_OUT_OF_PLAYER:message="[protocol : " + socket.getRemoteSocketAddress() + ": "+ " "+ splitPacket[2]+ "] out of the meteorGame Success";Platform.runLater(null);break;default :System.err.println("[" + protocol + "]"+ "This Protocol hasn't in the server Board Protocol list");break;}}  }
class C{  public int indexOf(Object e,int index){  Object[] elements=getArray();  return indexOf(e,elements,index,elements.length);}  }
class C{  @Deprecated private static SecretKey generatePBEKey(char[] passphraseOrPin,byte[] salt,String algorthm,int iterations,int keyLength) throws NoSuchAlgorithmException, InvalidKeySpecException, NoSuchProviderException {  if (iterations == 0) {    iterations=1000;  }  SecretKeyFactory secretKeyFactory=SecretKeyFactory.getInstance(algorthm,PROVIDER);  KeySpec keySpec=new PBEKeySpec(passphraseOrPin,salt,iterations,keyLength);  SecretKey secretKey=secretKeyFactory.generateSecret(keySpec);  return secretKey;}  }
class C{  @Deprecated public Builder cacheOnDisc(){  return cacheOnDisk(true);}  }
class C{  private static String toString(double[] values){  StringBuilder buf=new StringBuilder();  boolean first=true;  for (  double value : values) {    if (first)     first=false; else     buf.append(", ");    buf.append(String.format("%.3f",value + 0.00001));  }  return buf.toString();}  }
class C{  public CipherTextIvMac(String base64IvAndCiphertext){  String[] civArray=base64IvAndCiphertext.split(":");  if (civArray.length != 3) {    throw new IllegalArgumentException("Cannot parse iv:ciphertext:mac");  } else {    iv=Base64.decode(civArray[0],BASE64_FLAGS);    mac=Base64.decode(civArray[1],BASE64_FLAGS);    cipherText=Base64.decode(civArray[2],BASE64_FLAGS);  }}  }
class C{  public static boolean isSectionExpanded(WebElement section){  boolean isExpanded=false;  if (!section.getAttribute(HtmlTags.Attributes.CLASS).contains(COLLAPSED_CLASS)) {    isExpanded=true;  }  return isExpanded;}  }
class C{  public boolean isInterceptScrollingWhileAnimationRunning(){  return mInterceptScrollingWhileAnimationRunning;}  }
class C{  public static ArrayList<FileListItem> prepareFileListEntries(ArrayList<FileListItem> internalList,File inter,ExtensionFilter filter){  try {    for (    File name : inter.listFiles(filter)) {      if (name.canRead()) {        FileListItem item=new FileListItem();        item.setFilename(name.getName());        item.setDirectory(name.isDirectory());        item.setLocation(name.getAbsolutePath());        item.setTime(name.lastModified());        internalList.add(item);      }    }    Collections.sort(internalList);  } catch (  NullPointerException e) {    e.printStackTrace();    internalList=new ArrayList<>();  }  return internalList;}  }
class C{  public Event(String name){  this.setName(name);}  }
class C{  public DistributedLogClientBuilder periodicOwnershipSyncIntervalMs(long intervalMs){  DistributedLogClientBuilder newBuilder=newBuilder(this);  newBuilder._clientConfig.setPeriodicOwnershipSyncIntervalMs(intervalMs);  return newBuilder;}  }
class C{  @Override public final void writeDouble(double v) throws IOException {  writeLong(Double.doubleToLongBits(v));}  }
class C{  private void writeObject(ObjectOutputStream oos) throws IOException {  oos.defaultWriteObject();  MatrixUtils.serializeRealVector(coefficients,oos);}  }
class C{  private void notifyUploadResult(UploadFileOperation upload,RemoteOperationResult uploadResult){  Log_OC.d(TAG,"NotifyUploadResult with resultCode: " + uploadResult.getCode());  mNotificationManager.cancel(R.string.uploader_upload_in_progress_ticker);  if (!uploadResult.isCancelled() && !ResultCode.LOCAL_FILE_NOT_FOUND.equals(uploadResult.getCode()) && !uploadResult.getCode().equals(ResultCode.DELAYED_FOR_WIFI)&& !uploadResult.getCode().equals(ResultCode.DELAYED_FOR_CHARGING)) {    int tickerId=(uploadResult.isSuccess()) ? R.string.uploader_upload_succeeded_ticker : R.string.uploader_upload_failed_ticker;    String content;    boolean needsToUpdateCredentials=(ResultCode.UNAUTHORIZED.equals(uploadResult.getCode()));    tickerId=(needsToUpdateCredentials) ? R.string.uploader_upload_failed_credentials_error : tickerId;    mNotificationBuilder.setTicker(getString(tickerId)).setContentTitle(getString(tickerId)).setAutoCancel(true).setOngoing(false).setProgress(0,0,false);    content=ErrorMessageAdapter.getErrorCauseMessage(uploadResult,upload,getResources());    if (needsToUpdateCredentials) {      Intent updateAccountCredentials=new Intent(this,AuthenticatorActivity.class);      updateAccountCredentials.putExtra(AuthenticatorActivity.EXTRA_ACCOUNT,upload.getAccount());      updateAccountCredentials.putExtra(AuthenticatorActivity.EXTRA_ACTION,AuthenticatorActivity.ACTION_UPDATE_EXPIRED_TOKEN);      updateAccountCredentials.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);      updateAccountCredentials.addFlags(Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS);      updateAccountCredentials.addFlags(Intent.FLAG_FROM_BACKGROUND);      mNotificationBuilder.setContentIntent(PendingIntent.getActivity(this,(int)System.currentTimeMillis(),updateAccountCredentials,PendingIntent.FLAG_ONE_SHOT));    } else {      mNotificationBuilder.setContentText(content);    }    if (!uploadResult.isSuccess() && !needsToUpdateCredentials) {      Intent showUploadListIntent=new Intent(this,UploadListActivity.class);      showUploadListIntent.putExtra(FileActivity.EXTRA_FILE,upload.getFile());      showUploadListIntent.putExtra(FileActivity.EXTRA_ACCOUNT,upload.getAccount());      showUploadListIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);      mNotificationBuilder.setContentIntent(PendingIntent.getActivity(this,(int)System.currentTimeMillis(),showUploadListIntent,0));    }    mNotificationBuilder.setContentText(content);    mNotificationManager.notify(tickerId,mNotificationBuilder.build());    if (uploadResult.isSuccess()) {      mPendingUploads.remove(upload.getAccount().name,upload.getFile().getRemotePath());      NotificationUtils.cancelWithDelay(mNotificationManager,R.string.uploader_upload_succeeded_ticker,2000);    }  }}  }
class C{  public WagonCARTReader(LeafNode.LeafType leafType){  this.leafType=leafType;}  }
class C{  protected void initializeWorld(){  this.world=new World();  Rectangle floorRect=new Rectangle(15.0,1.0);  GameObject floor=new GameObject();  floor.addFixture(new BodyFixture(floorRect));  floor.setMass(MassType.INFINITE);  floor.translate(0.0,-4.0);  this.world.addBody(floor);  Triangle triShape=new Triangle(new Vector2(0.0,0.5),new Vector2(-0.5,-0.5),new Vector2(0.5,-0.5));  GameObject triangle=new GameObject();  triangle.addFixture(triShape);  triangle.setMass(MassType.NORMAL);  triangle.translate(-1.0,2.0);  triangle.getLinearVelocity().set(5.0,0.0);  this.world.addBody(triangle);  Rectangle rectShape=new Rectangle(1.0,1.0);  GameObject rectangle=new GameObject();  rectangle.addFixture(rectShape);  rectangle.setMass(MassType.NORMAL);  rectangle.translate(0.0,2.0);  rectangle.getLinearVelocity().set(-5.0,0.0);  this.world.addBody(rectangle);  Polygon polyShape=Geometry.createUnitCirclePolygon(10,1.0);  GameObject polygon=new GameObject();  polygon.addFixture(polyShape);  polygon.setMass(MassType.NORMAL);  polygon.translate(-2.5,2.0);  polygon.setAngularVelocity(Math.toRadians(-20.0));  this.world.addBody(polygon);  GameObject issTri=new GameObject();  issTri.addFixture(Geometry.createIsoscelesTriangle(1.0,3.0));  issTri.setMass(MassType.NORMAL);  issTri.translate(2.0,3.0);  this.world.addBody(issTri);  GameObject equTri=new GameObject();  equTri.addFixture(Geometry.createEquilateralTriangle(2.0));  equTri.setMass(MassType.NORMAL);  equTri.translate(3.0,3.0);  this.world.addBody(equTri);  GameObject rightTri=new GameObject();  rightTri.addFixture(Geometry.createRightTriangle(2.0,1.0));  rightTri.setMass(MassType.NORMAL);  rightTri.translate(4.0,3.0);  this.world.addBody(rightTri);}  }
class C{  public static boolean isPartialUpdate(int mod){  return Modifiers.contains(mod,UpdateModifiers.PARTIAL_UPDATE);}  }
class C{  public AvgReducer ignoreExceptions(){  super.ignoreExceptions();  return this;}  }
class C{  public boolean isValid(){  if (startDate == null || endDate == null || periodType == null) {    return false;  }  if (!DailyPeriodType.NAME.equals(periodType.getName()) && getDaysInPeriod() < 2) {    return false;  }  return true;}  }
class C{  public ConversationFactory withTimeout(int timeoutSeconds){  return withConversationCanceller(new InactivityConversationCanceller(plugin,timeoutSeconds));}  }
class C{  public boolean equivTo(Object o){  if (o instanceof DNotExpr) {    return getOpBox().getValue().equivTo(((DNotExpr)o).getOpBox().getValue());  }  return false;}  }
class C{  public Capabilities modifyCapabilities(Capabilities capabilities){  Capabilities modifiedCapabilities=capabilities;  for (  CapabilitiesModifier modifier : capabilitiesModifiers) {    modifiedCapabilities=modifier.modify(capabilities);  }  return modifiedCapabilities;}  }
class C{  private static Method findMethod(Object instance,String name,Class<?>... parameterTypes) throws NoSuchMethodException {  for (Class<?> clazz=instance.getClass(); clazz != null; clazz=clazz.getSuperclass()) {    try {      Method method=clazz.getDeclaredMethod(name,parameterTypes);      if (!method.isAccessible()) {        method.setAccessible(true);      }      return method;    } catch (    NoSuchMethodException e) {    }  }  throw new NoSuchMethodException("Method " + name + " with parameters "+ Arrays.asList(parameterTypes)+ " not found in "+ instance.getClass());}  }
class C{  public boolean isCheckThirdParty(){  return isOptionEnabled(UrlFilterRuleOption.THIRD_PARTY) || isOptionDisabled(UrlFilterRuleOption.THIRD_PARTY);}  }
class C{  public <T9>Pattern9<T1,T2,T3,T4,T5,T6,T7,T8,T9> and(Observable<T9> other){  if (other == null) {    throw new NullPointerException();  }  return new Pattern9<T1,T2,T3,T4,T5,T6,T7,T8,T9>(o1,o2,o3,o4,o5,o6,o7,o8,other);}  }
class C{  public void clearSounds(){  mSoundMap.clear();}  }
class C{  public ObjectFactory(){}  }
class C{  public static int totalBurnTimeInInventory(EntityPlayerMP player){  Integer fromCache=fuelCaches.get(player);  int total=(fromCache != null) ? fromCache : 0;  for (int i=0; i < player.inventory.mainInventory.length; i++) {    ItemStack is=player.inventory.mainInventory[i];    total+=TileEntityFurnace.getItemBurnTime(is);  }  return total;}  }
class C{  public LiteralPanel(ExpressionFilterInterface parent){  this.parent=parent;  createUI();}  }
class C{  Model(){  this.s1=null;}  }
class C{  public LegendOptionPanel createLegendOptionsPanel(LegendPanel legendPanel){  if (legendOptionPanel == null) {    legendOptionPanel=new LegendOptionPanel();    legendOptionPanel.addListener(this);    refreshSymbol=legendPanel;  }  return legendOptionPanel;}  }
class C{  private void annotate(AnnotatedString input,String key,Object value,int beginIndex,int endIndex,String image,LanguageResource langRes){  RegExp allClassesMatcher=langRes.getAllClassesMatcher();  if (allClassesMatcher.matches(image)) {    String tokenClass=this.identifyClass(image,allClassesMatcher,langRes.getClassesDescr());    input.annotate(key,tokenClass,beginIndex,endIndex);  } else {    input.annotate(key,value,beginIndex,endIndex);  }}  }
class C{  protected List<String> parseArgStringMap(String argStr) throws ParseException {  List<String> argList=new ArrayList<>();  if (argStr == null) {    return argList;  }  argStr=argStr.trim();  if (argStr.startsWith("{")) {    argStr=argStr.substring(1).trim();    if (argStr.endsWith("}")) {      argStr=argStr.substring(0,argStr.length() - 1).trim();    } else {      throw new ParseException("Error parsing map variable (in #assign) - unterminated bracket");    }  }  String[] args=argStr.toString().split(",");  for (  String argEntry : args) {    String arg=argEntry.trim();    Matcher m=mapArgSinglePat.matcher(arg);    if (m.matches()) {      String name=m.group(2).trim();      argList.add(name);    } else {      msgHandler.logDebug(" text '" + arg + "' could not be matched");      throw new ParseException("Error parsing map variable (in #assign)." + " WARN: Any non-simple syntax breaks easily here.");    }  }  return argList;}  }
class C{  private static void createAndShowGUI(){  JFrame frame=new JFrame("ToolBarDemo");  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  frame.add(new ToolBarDemo());  frame.pack();  frame.setVisible(true);}  }
class C{  public static void startEditFolderActivity(Context context,BookmarkId idToEdit){  Intent intent=new Intent(context,EnhancedBookmarkAddEditFolderActivity.class);  intent.putExtra(INTENT_IS_ADD_MODE,false);  intent.putExtra(INTENT_BOOKMARK_ID,idToEdit.toString());  context.startActivity(intent);}  }
class C{  public static String formatNumber(final long number){  long divided=number;  final StringBuffer sb=new StringBuffer();  while (divided > 1000) {    long rest=divided % 1000;    sb.insert(0," " + String.format("%03d",rest));    divided=divided / 1000;  }  long rest=divided % 1000;  sb.insert(0,rest);  return sb.toString();}  }
class C{  public DelegateFileFilter(FileFilter filter){  if (filter == null) {    throw new IllegalArgumentException("The FileFilter must not be null");  }  this.fileFilter=filter;  this.filenameFilter=null;}  }
class C{  public SemanticIndex(SymbolicGraph sgGraph){  Graph=sgGraph;  SemanticLink=new HashMap();}  }
class C{  private void increaseEventCount(Map<String,Integer> eventCounts,Predicate<String> predicate){  int impressionCount=eventCounts.getOrDefault("impression",0);  int impressionUniqueCount=Math.min(impressionCount,1);  int jointCounts=0;  if (!predicate.test("click")) {    jointCounts+=eventCounts.getOrDefault("click",0);  }  if (!predicate.test("love it")) {    jointCounts+=eventCounts.getOrDefault("love it",0);  }  int jointUniqueCount=Math.min(jointCounts,1);  impressionCounts.put("eventCount",impressionCounts.getOrDefault("eventCount",0) + impressionCount);  impressionCounts.put("uniqueUserCount",impressionCounts.getOrDefault("uniqueUserCount",0) + impressionUniqueCount);  jointActionCounts.put("eventCount",jointActionCounts.getOrDefault("eventCount",0) + jointCounts);  jointActionCounts.put("uniqueUserCount",jointActionCounts.getOrDefault("uniqueUserCount",0) + jointUniqueCount);}  }
class C{  public State(String state){  if (state == null)   throw new NullPointerException("state is null");  this.state=state.intern();}  }
class C{  private void updateMembersOfDisbandLegion(Legion legion,int unixTime){  for (  Player onlineLegionMember : legion.getOnlineLegionMembers()) {    PacketSendUtility.sendPacket(onlineLegionMember,new SM_LEGION_UPDATE_MEMBER(onlineLegionMember,1300303,unixTime + ""));    PacketSendUtility.broadcastPacketToLegion(legion,new SM_LEGION_EDIT(0x06,unixTime));  }}  }
class C{  @Override public void notationDecl(String name,XMLResourceIdentifier identifier,Augmentations augs) throws XNIException {  if (fValidation) {    DTDGrammar grammar=(fDTDGrammar != null ? fDTDGrammar : fGrammarBucket.getActiveGrammar());    if (grammar.getNotationDeclIndex(name) != -1) {      fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"UniqueNotationName",new Object[]{name},XMLErrorReporter.SEVERITY_ERROR);    }  }  if (fDTDGrammar != null)   fDTDGrammar.notationDecl(name,identifier,augs);  if (fDTDHandler != null) {    fDTDHandler.notationDecl(name,identifier,augs);  }}  }
class C{  public String phonemise(String text,String pos,StringBuilder g2pMethod){  String result=userdictLookup(text,pos);  if (result != null) {    g2pMethod.append("userdict");    return result;  }  result=lexiconLookup(text,pos);  if (result != null) {    g2pMethod.append("lexicon");    return result;  }  String normalised=MaryUtils.normaliseUnicodeLetters(text,getLocale());  if (!normalised.equals(text)) {    result=userdictLookup(normalised,pos);    if (result != null) {      g2pMethod.append("userdict");      return result;    }    result=lexiconLookup(normalised,pos);    if (result != null) {      g2pMethod.append("lexicon");      return result;    }  }  String phones=lts.predictPronunciation(text);  result=lts.syllabify(phones);  if (result != null) {    g2pMethod.append("rules");    return result;  }  return null;}  }
class C{  public void addElementValuePair(ElementValuePair node){  List<ElementValuePair> list=(parent == null || state == null) ? getElementValuePairListNoTransform() : getElementValuePairList();  list.addChild(node);}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  protected Integer defaultTransactionIsolation(){  return this.defaultTransactionIsolation;}  }
class C{  private Map deepCopy(HashMap groupsMap){  HashMap newMap=(HashMap)(groupsMap.clone());  Set eSet=newMap.entrySet();  for (Iterator itr=eSet.iterator(); itr.hasNext(); ) {    Map.Entry pair=(Map.Entry)itr.next();    pair.setValue(((String[])pair.getValue()).clone());  }  return newMap;}  }
class C{  public static void init(){  Logger.init(TAG);}  }
class C{  @NotNull public static LocalResourceRepository create(@NotNull final AndroidFacet facet){  boolean gradleProject=facet.requiresAndroidModel();  if (!gradleProject) {    VirtualFile primaryResourceDir=facet.getPrimaryResourceDir();    if (primaryResourceDir == null) {      return new EmptyRepository();    }    return ResourceFolderRegistry.get(facet,primaryResourceDir);  }  ResourceFolderManager folderManager=facet.getResourceFolderManager();  List<VirtualFile> resourceDirectories=folderManager.getFolders();  List<LocalResourceRepository> resources=Lists.newArrayListWithExpectedSize(resourceDirectories.size());  for (  VirtualFile resourceDirectory : resourceDirectories) {    ResourceFolderRepository repository=ResourceFolderRegistry.get(facet,resourceDirectory);    resources.add(repository);  }  DynamicResourceValueRepository dynamicResources=DynamicResourceValueRepository.create(facet);  resources.add(dynamicResources);  final ModuleResourceRepository repository=new ModuleResourceRepository(facet,resources);  Disposer.register(repository,dynamicResources);  return repository;}  }
class C{  public PaginationParameters withPage(String page) throws BadPaginationException {  return new PaginationParameters(perPage,parseParameter(page,"page"));}  }
class C{  public static LatLng translatePoint(LatLng point,double distance,double bearing){  distance=distance / 1000d;  double lat=Math.toRadians(point.latitude);  double lng=Math.toRadians(point.longitude);  bearing=Math.toRadians(bearing);  double Lat2=Math.asin((Math.sin(lat) * Math.cos(distance / EARTH)) + (Math.cos(lat) * Math.sin(distance / EARTH) * Math.cos(bearing)));  double Long2=lng + Math.atan2(Math.sin(bearing) * Math.sin(distance / EARTH) * Math.cos(lat),Math.cos(distance / EARTH) - (Math.sin(lat) * Math.sin(Lat2)));  Lat2=Math.toDegrees(Lat2);  Long2=Math.toDegrees(Long2);  return new LatLng(Lat2,Long2);}  }
class C{  public DerivativeStructure toDegrees(){  final DerivativeStructure ds=new DerivativeStructure(compiler);  for (int i=0; i < ds.data.length; ++i) {    ds.data[i]=FastMath.toDegrees(data[i]);  }  return ds;}  }
class C{  private boolean showAppMenu(View view,boolean startDragging){  if (!mMenuHandler.isAppMenuShowing() && mMenuHandler.showAppMenu(view,startDragging)) {    if (!startDragging)     RecordUserAction.record("MobileUsingMenuBySwButtonTap");    if (mOnAppMenuShownListener != null) {      mOnAppMenuShownListener.run();    }    return true;  }  return false;}  }
class C{  public ApiResult createKeys(){  String publicKey="APIK-" + RandomStringUtils.randomAlphanumeric(27);  String privateKey=RandomStringUtils.randomAlphanumeric(32);  ApiResult apiResult=new ApiResult(-1,publicKey,privateKey,Values.EMPTYSTRING,Values.EMPTYSTRING);  this.api.saveApi(apiResult);  return apiResult;}  }
class C{  public Webster(int port,String roots,String bindAddress,int minThreads,int maxThreads) throws BindException {  this.port=port;  this.minThreads=minThreads;  this.maxThreads=maxThreads;  initialize(roots,bindAddress);}  }
class C{  public static DimensionColumn addNewDimensionColumn(Schema schema,Dimension d,PhysicalTable physicalTable){  DimensionColumn col=new DimensionColumn(d,physicalTable.getPhysicalColumnName(d.getApiName()));  schema.addColumn(col);  return col;}  }
class C{  public static String toString(InputStream input,Charset encoding) throws IOException {  StringBuilderWriter sw=new StringBuilderWriter();  copy(input,sw,encoding);  return sw.toString();}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  void addUpdateMenuItem(ModelMenuItem modelMenuItem,List<ModelMenuItem> menuItemList,Map<String,ModelMenuItem> menuItemMap,ModelMenuItem.BuildArgs buildArgs){  ModelMenuItem existingMenuItem=menuItemMap.get(modelMenuItem.getName());  if (existingMenuItem != null) {    ModelMenuItem mergedMenuItem;    if ("replace".equals(modelMenuItem.getOverrideMode())) {      mergedMenuItem=modelMenuItem;      int existingItemIndex=menuItemList.indexOf(existingMenuItem);      menuItemList.set(existingItemIndex,mergedMenuItem);    } else     if ("remove-replace".equals(modelMenuItem.getOverrideMode())) {      menuItemList.remove(existingMenuItem);      menuItemMap.remove(modelMenuItem.getName());      mergedMenuItem=modelMenuItem;      menuItemList.add(modelMenuItem);    } else {      mergedMenuItem=existingMenuItem.mergeOverrideModelMenuItem(modelMenuItem,buildArgs);      int existingItemIndex=menuItemList.indexOf(existingMenuItem);      menuItemList.set(existingItemIndex,mergedMenuItem);    }    menuItemMap.put(modelMenuItem.getName(),mergedMenuItem);  } else {    menuItemList.add(modelMenuItem);    menuItemMap.put(modelMenuItem.getName(),modelMenuItem);  }}  }
class C{  protected PsiFile createPsiFile(String filePath,String... contentLines){  return getPsiFile(createFile(filePath,contentLines));}  }
class C{  public static int hash(float value){  assert !Float.isNaN(value) : "Values of NaN are not supported.";  return Float.floatToIntBits(value * 663608941.737f);}  }
class C{  public Builder lineJoin(String lineJoin){  this.lineJoin=lineJoin;  return this;}  }
class C{  public SootClass loadClassAndSupport(String className){  SootClass ret=loadClass(className,SootClass.SIGNATURES);  if (!ret.isPhantom())   ret=loadClass(className,SootClass.BODIES);  return ret;}  }
class C{  public boolean isNodePresent(String path){  return conditions.isConditionMet(nodeExist(session,path));}  }
class C{  public void doUndo(){  if (undo.canUndo()) {    undo.undo();    parse();  }}  }
class C{  public TupleSet removeSet(String name){  TupleSet ts=(TupleSet)m_map.remove(name);  if (ts != null) {    m_sets.remove(ts);    if (m_lstnr != null)     ts.removeTupleSetListener(m_lstnr);  }  return ts;}  }
class C{  public void removeGroup(String group) throws ObjectLacksException {  assertContains(group);  groups.remove(group);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DispelNPCBuff_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1201253,skillcaster,skillname);}  }
class C{  @ManagedOperation(description="Manually remove a given object from the cache (will need re-loading manually from DB)") public boolean remove(K id){  return cache.remove(id);}  }
class C{  @Override public void onCardboardTrigger(){  Log.i(TAG,"onCardboardTrigger");  vibrator.vibrate(50);}  }
class C{  public QuickAdapter(Context context,int layoutResId){  super(context,layoutResId);}  }
class C{  @Override public void write(DataOutput out) throws IOException {  out.writeLong(duration);  out.writeInt(getLength());  frame.write(out);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_PARTY_ALLIANCE_CHANGE_LOOT_TIMEOUT(String value0){  return new SM_SYSTEM_MESSAGE(1300213,value0);}  }
class C{  public Vector3D toSpace(Vector<Euclidean1D> vector){  return toSpace((Point<Euclidean1D>)vector);}  }
class C{  protected void fireGraphEvent(Table t,int first,int last,int col,int type){  if (type == EventConstants.UPDATE && col == VisualItem.IDX_VALIDATED && t == getNodeTable()) {    VisualTable nodes=(VisualTable)t;    VisualTable edges=(VisualTable)getEdgeTable();    for (int i=first; i <= last; ++i) {      if (nodes.isValidated(i))       continue;      if (i < 0) {        System.err.println("catch me - VisualGraph fireGraphEvent");      }      IntIterator erows=edgeRows(i);      while (erows.hasNext()) {        int erow=erows.nextInt();        edges.setValidated(erow,false);      }    }  }  super.fireGraphEvent(t,first,last,col,type);}  }
class C{  public static SecretKey generateBlowfishKey(){  return blowfishKeyGen.generateKey();}  }
class C{  public EnumeratedIntegerDistribution(final int[] data){  final Map<Integer,Integer> dataMap=new HashMap<>();  for (  int value : data) {    Integer count=dataMap.get(value);    if (count == null) {      count=0;    }    dataMap.put(value,++count);  }  final int massPoints=dataMap.size();  final double denom=data.length;  final int[] values=new int[massPoints];  final double[] probabilities=new double[massPoints];  int index=0;  for (  Entry<Integer,Integer> entry : dataMap.entrySet()) {    values[index]=entry.getKey();    probabilities[index]=entry.getValue().intValue() / denom;    index++;  }  innerDistribution=new EnumeratedDistribution<Integer>(createDistribution(values,probabilities));}  }
class C{  @Override public void startParameterEntity(String name,XMLResourceIdentifier identifier,String encoding,Augmentations augmentations) throws XNIException {}  }
class C{  public WallCreateCommentQuery stickerId(Integer value){  return unsafeParam("sticker_id",value);}  }
class C{  public LegendreParametricTest(int numberOfPoints,int maxDegree,double eps,double numUlps){  super(factory.legendre(numberOfPoints),maxDegree,eps,numUlps);}  }
class C{  public AggregateTable(Visualization vis,String group,Schema schema){  super(vis,group,schema,TableAggregateItem.class);  m_aggregated=AGGREGATED_SCHEMA.instantiate();  m_aggregated.index(AGGREGATE);  m_aggregated.index(MEMBER_HASH);}  }
class C{  public static Activity scanForActivity(Context context){  if (context == null)   return null;  if (context instanceof Activity) {    return (Activity)context;  } else   if (context instanceof ContextWrapper) {    return scanForActivity(((ContextWrapper)context).getBaseContext());  }  return null;}  }
class C{  protected boolean retainPresenter(){  return true;}  }
class C{  public static boolean writeFile(String filePath,String content,boolean append){  if (StringUtil.isEmpty(content)) {    return false;  }  FileWriter fileWriter=null;  try {    makeDirs(filePath);    fileWriter=new FileWriter(filePath,append);    fileWriter.write(content);    return true;  } catch (  IOException e) {    throw new RuntimeException("IOException occurred. ",e);  } finally {    IOUtil.close(fileWriter);  }}  }
class C{  private void updateImportListFor(SchemaGrammar grammar){  Vector importedGrammars=grammar.getImportedGrammars();  if (importedGrammars != null) {    for (int i=0; i < importedGrammars.size(); i++) {      SchemaGrammar isg1=(SchemaGrammar)importedGrammars.elementAt(i);      SchemaGrammar isg2=fGrammarBucket.getGrammar(isg1.getTargetNamespace());      if (isg2 != null && isg1 != isg2) {        importedGrammars.set(i,isg2);      }    }  }}  }
class C{  public PhotosEditAlbumQuery editAlbum(UserActor actor,int albumId){  return new PhotosEditAlbumQuery(getClient(),actor,albumId);}  }
class C{  public void addWord(String word){  Item tokenItem=tokenToWords.getTokenItem();  assert (tokenItem != null);  Item wordItem=tokenItem.createDaughter();  FeatureSet featureSet=wordItem.getFeatures();  featureSet.setString("name",word);  relation.appendItem(wordItem);}  }
class C{  public AudioGetAlbumsQuery(VkApiClient client,UserActor actor){  super(client,"audio.getAlbums",GetAlbumsResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  public AuthSignupQuery sid(String value){  return unsafeParam("sid",value);}  }
class C{  public void resetOriginals(){  mStartingStartTrim=0;  mStartingEndTrim=0;  mStartingRotation=0;  setStartTrim(0);  setEndTrim(0);  setRotation(0);}  }
class C{  Node internalInsertBefore(Node newChild,Node refChild,boolean replace) throws DOMException {  boolean errorChecking=ownerDocument.errorChecking;  if (newChild.getNodeType() == Node.DOCUMENT_FRAGMENT_NODE) {    if (errorChecking) {      for (Node kid=newChild.getFirstChild(); kid != null; kid=kid.getNextSibling()) {        if (!ownerDocument.isKidOK(this,kid)) {          throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR,DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"HIERARCHY_REQUEST_ERR",null));        }      }    }    while (newChild.hasChildNodes()) {      insertBefore(newChild.getFirstChild(),refChild);    }    return newChild;  }  if (newChild == refChild) {    refChild=refChild.getNextSibling();    removeChild(newChild);    insertBefore(newChild,refChild);    return newChild;  }  if (needsSyncChildren()) {    synchronizeChildren();  }  if (errorChecking) {    if (isReadOnly()) {      throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR,DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"NO_MODIFICATION_ALLOWED_ERR",null));    }    if (newChild.getOwnerDocument() != ownerDocument && newChild != ownerDocument) {      throw new DOMException(DOMException.WRONG_DOCUMENT_ERR,DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"WRONG_DOCUMENT_ERR",null));    }    if (!ownerDocument.isKidOK(this,newChild)) {      throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR,DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"HIERARCHY_REQUEST_ERR",null));    }    if (refChild != null && refChild.getParentNode() != this) {      throw new DOMException(DOMException.NOT_FOUND_ERR,DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"NOT_FOUND_ERR",null));    }    boolean treeSafe=true;    for (NodeImpl a=this; treeSafe && a != null; a=a.parentNode()) {      treeSafe=newChild != a;    }    if (!treeSafe) {      throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR,DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"HIERARCHY_REQUEST_ERR",null));    }  }  ownerDocument.insertingNode(this,replace);  ChildNode newInternal=(ChildNode)newChild;  Node oldparent=newInternal.parentNode();  if (oldparent != null) {    oldparent.removeChild(newInternal);  }  ChildNode refInternal=(ChildNode)refChild;  newInternal.ownerNode=this;  newInternal.isOwned(true);  if (firstChild == null) {    firstChild=newInternal;    newInternal.isFirstChild(true);    newInternal.previousSibling=newInternal;  } else {    if (refInternal == null) {      ChildNode lastChild=firstChild.previousSibling;      lastChild.nextSibling=newInternal;      newInternal.previousSibling=lastChild;      firstChild.previousSibling=newInternal;    } else {      if (refChild == firstChild) {        firstChild.isFirstChild(false);        newInternal.nextSibling=firstChild;        newInternal.previousSibling=firstChild.previousSibling;        firstChild.previousSibling=newInternal;        firstChild=newInternal;        newInternal.isFirstChild(true);      } else {        ChildNode prev=refInternal.previousSibling;        newInternal.nextSibling=refInternal;        prev.nextSibling=newInternal;        refInternal.previousSibling=newInternal;        newInternal.previousSibling=prev;      }    }  }  changed();  if (fNodeListCache != null) {    if (fNodeListCache.fLength != -1) {      fNodeListCache.fLength++;    }    if (fNodeListCache.fChildIndex != -1) {      if (fNodeListCache.fChild == refInternal) {        fNodeListCache.fChild=newInternal;      } else {        fNodeListCache.fChildIndex=-1;      }    }  }  ownerDocument.insertedNode(this,newInternal,replace);  checkNormalizationAfterInsert(newInternal);  return newChild;}  }
class C{  public static void registerContentType(String type,String classname){  JEditorPane.registerEditorKitForContentType(type,classname);  CONTENTS.add(type);}  }
class C{  public void onStart(final FileAlterationObserver observer){}  }
class C{  protected AbstractWell(final int k){  this(k,null);}  }
class C{  static String printTextPerRole(String[] roles,String[] textLines){  StringBuilder[] textByRoles=new StringBuilder[roles.length];  for (int i=0; i < roles.length; i++) {    textByRoles[i]=new StringBuilder(roles[i] + ":");  }  for (int i=0; i < textLines.length; i++) {    String[] splitLine=textLines[i].split(": ",2);    String role=splitLine[0];    String text=splitLine[1];    int j=0;    while (!roles[j].equals(role)) {      j++;    }    textByRoles[j].append("\n" + (i + 1) + ") "+ text);  }  String result="";  for (  StringBuilder line : textByRoles) {    result+=line + "\n\n";  }  return result;}  }
class C{  public void reportJSException(String instanceId,String function,String exception){  if (WXEnvironment.isApkDebugable()) {    WXLogUtils.e("reportJSException >>>> instanceId:" + instanceId + ", exception function:"+ function+ ", exception:"+ exception);  }  WXSDKInstance instance=WXSDKManager.getInstance().getSDKInstance(instanceId);  if (instance != null) {    instance.onJSException(null,function,exception);  }  WXErrorCode.WX_ERR_JS_EXECUTE.appendErrMsg(exception);  commitJSBridgeAlarmMonitor(instanceId,WXErrorCode.WX_ERR_JS_EXECUTE);}  }
class C{  protected void init(){  calcMinMax();}  }
class C{  public WebShoppingCart(ShoppingCart cart){  super(cart);}  }
class C{  public double distanceFrom(Map hNewEstimations,String sCategory){  if (!SuggestedCategory.equals(sCategory))   return Double.MAX_VALUE;  double dRes=0;  Iterator iIter=hNewEstimations.keySet().iterator();  while (iIter.hasNext()) {    String sCategoryName=(String)iIter.next();    double dCategoryEstimation=((Double)hNewEstimations.get(sCategoryName)).doubleValue();    double dLocal=0.0;    if (CategoryEstimations.containsKey(sCategoryName))     dLocal=((Double)CategoryEstimations.get(sCategoryName)).doubleValue(); else     return Double.MAX_VALUE;    dRes+=Math.pow((dLocal - dCategoryEstimation),2);  }  return dRes;}  }
class C{  public List<CodeResult> formatResults(List<CodeResult> codeResult,String matchTerms,boolean highlightLine){  List<String> lstMatchTerms=splitTerms(matchTerms);  List<CodeResult> results=new ArrayList<>();  for (  CodeResult code : codeResult) {    List<CodeMatchResult> result=matchResults(code.getCode(),lstMatchTerms,highlightLine);    if (result != null) {      code.setMatchingResults(result);      results.add(code);    }  }  return results;}  }
class C{  public ComboBoxRenderer(){  setOpaque(true);}  }
class C{  public void clear(){  thinPath.reset();  thickPath.reset();  pathEvents.clear();  invalidate();}  }
class C{  public MediaFormat(){  mMap=new HashMap<String,Object>();}  }
class C{  private String makeSAM(String queryName,String refName,float bitScore,String line) throws IOException {  return String.format("%s\t0\t%s\t0\t255\t*\t*\t0\t0\t*\t*\tAS:i:%d\t",queryName,refName,Math.round(bitScore)) + String.format("AL:Z:%s\t",Basic.replaceSpaces(line,' '));}  }
class C{  public Application(){  this("");}  }
class C{  private void drawDay(GC gc,int item,int[] days,int columnWidth,int rowHeight){  Color tempBackground=null;  Color tempForeground=null;  boolean validSelection=isValidSelection(item);  if (validSelection && (item == selection)) {    tempBackground=gc.getBackground();    tempForeground=gc.getForeground();    gc.setBackground(selectionBackgroundColor);    gc.setForeground(SELECTION_FOREGROUND);    int height=rowHeight;    int width=columnWidth;    int x=columnWidth * (item % 7);    if (x > 0) {      x++;      width--;    }    int y=rowHeight * (item / 7 + 1) + 1;    height--;    if (y == rowHeight) {      y++;      height--;    }    gc.fillRectangle(x,y,width,height);    gc.setBackground(tempBackground);  }  String dayString=String.valueOf(days[item]);  Point position=getDayPosition(gc,item,days,columnWidth,rowHeight);  gc.drawText(dayString,position.x,position.y,SWT.DRAW_TRANSPARENT);  if (validSelection && (item == selection)) {    gc.setForeground(tempForeground);  }}  }
class C{  public boolean isGenerated(){  return generated;}  }
class C{  private static Complex[] dft(final Complex[] x,final int sgn){  final int n=x.length;  final double[] cos=new double[n];  final double[] sin=new double[n];  final Complex[] y=new Complex[n];  for (int i=0; i < n; i++) {    final double arg=2.0 * FastMath.PI * i / n;    cos[i]=FastMath.cos(arg);    sin[i]=FastMath.sin(arg);  }  for (int i=0; i < n; i++) {    double yr=0.0;    double yi=0.0;    for (int j=0; j < n; j++) {      final int index=(i * j) % n;      final double c=cos[index];      final double s=sin[index];      final double xr=x[j].getReal();      final double xi=x[j].getImaginary();      yr+=c * xr - sgn * s * xi;      yi+=sgn * s * xr + c * xi;    }    y[i]=new Complex(yr,yi);  }  return y;}  }
class C{  static Object find(String factoryId,String fallbackClassName) throws ConfigurationError {  return find(factoryId,null,fallbackClassName);}  }
class C{  public WebDriver modifyWebDriver(WebDriver webDriver){  return driverModifiers.stream().collect(modifyDrivers(webDriver));}  }
class C{  @JsonIgnore @Override public ThetaSketchEstimatePostAggregation withFields(List<PostAggregation> fields){  if (fields.size() != 1) {    LOG.error(INVALID_NUMBER_OF_FIELDS.logFormat(fields));    throw new IllegalArgumentException(INVALID_NUMBER_OF_FIELDS.format(fields));  }  return withField(fields.get(0));}  }
class C{  private static boolean isDigitOrPeriod(char ch){  return isDigit(ch) || ch == '.';}  }
class C{  public void generate(){  messager.printMessage(Kind.NOTE,String.format("%s.generate() for %s",TAG,topLevelPackageString));  generateAll();  if (!errors.isEmpty()) {    messager.printMessage(Kind.ERROR,"Generating injectors failed: ");    for (    String s : errors) {      messager.printMessage(Kind.ERROR,s);    }  }}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public TypeDecl type(){  if (type_computed) {    return type_value;  }  ASTNode$State state=state();  int num=state.boundariesCrossed;  boolean isFinal=this.is$Final();  type_value=type_compute();  if (isFinal && num == state().boundariesCrossed)   type_computed=true;  return type_value;}  }
class C{  public void calculateDayTime(){  int hour=getHour();  if (hour > 21 || hour < 4) {    dayTime=DayTime.NIGHT;  } else   if (hour > 16) {    dayTime=DayTime.EVENING;  } else   if (hour > 8) {    dayTime=DayTime.AFTERNOON;  } else {    dayTime=DayTime.MORNING;  }}  }
class C{  public static <V,V1 extends V,V2 extends V>Map<String,V> toMap(String name1,V1 value1,String name2,V2 value2){  return populateMap(new HashMap<String,V>(),name1,value1,name2,value2);}  }
class C{  @Override protected void runImpl(){  name=ChatUtil.getRealAdminName(name);  String formatname=Util.convertName(name);  Player sender=getConnection().getActivePlayer();  Player receiver=World.getInstance().findPlayer(formatname);  if (LoggingConfig.LOG_CHAT) {    log.info(String.format("[MESSAGE] [%s] Whisper To: %s, Message: %s",sender.getName(),formatname,message));  }  if (receiver == null) {    sendPacket(SM_SYSTEM_MESSAGE.STR_NO_SUCH_USER(formatname));  } else   if (!receiver.isWispable()) {    PacketSendUtility.sendMessage(sender,"You can't talk with this gm.");  } else   if (sender.getLevel() < CustomConfig.LEVEL_TO_WHISPER) {    sendPacket(SM_SYSTEM_MESSAGE.STR_CANT_WHISPER_LEVEL(String.valueOf(CustomConfig.LEVEL_TO_WHISPER)));  } else   if (receiver.getBlockList().contains(sender.getObjectId())) {    sendPacket(SM_SYSTEM_MESSAGE.STR_YOU_EXCLUDED(receiver.getName()));  } else   if ((!CustomConfig.SPEAKING_BETWEEN_FACTIONS) && (sender.getRace().getRaceId() != receiver.getRace().getRaceId()) && (sender.getAccessLevel() < AdminConfig.GM_LEVEL)&& (receiver.getAccessLevel() < AdminConfig.GM_LEVEL)) {    sendPacket(SM_SYSTEM_MESSAGE.STR_NO_SUCH_USER(formatname));  } else {    if (RestrictionsManager.canChat(sender)) {      PacketSendUtility.sendPacket(receiver,new SM_MESSAGE(sender,NameRestrictionService.filterMessage(message),ChatType.WHISPER));    }  }}  }
class C{  public Set<Integer> intKeySet(){  return data.keySet().stream().map(null).flatMap(null).collect(Collectors.toSet());}  }
class C{  private static void validateSwaggerSpec(JsonNode swaggerJsonNode) throws SwaggerConversionException {  ProcessingReport report=null;  try {    URL url=Resources.getResource(SCHEMA_RESOURCE_PATH);    String swaggerSchema=Resources.toString(url,StandardCharsets.UTF_8);    JsonNode schemaNode=Yaml.mapper().readTree(swaggerSchema);    JsonSchema schema=JsonSchemaFactory.byDefault().getJsonSchema(schemaNode);    report=schema.validate(swaggerJsonNode);  } catch (  Exception e) {    throw new SwaggerConversionException("Unable to parse the content. " + e.getMessage(),e);  }  if (!report.isSuccess()) {    String message="";    Iterator itr=report.iterator();    if (itr.hasNext()) {      message+=((ProcessingMessage)itr.next()).toString();    }    while (itr.hasNext()) {      message+="," + ((ProcessingMessage)itr.next()).toString();    }    throw new SwaggerConversionException(String.format("Invalid Swagger spec. Please fix the schema errors:\n%s",message));  }}  }
class C{  public UuidGenerator(){}  }
class C{  @Override public int[] makeCumulativeTestPoints(){  return makeDensityTestPoints();}  }
class C{  public void watchMonitoredDataPoll(PreferenceChangeListener pcl){  addListener(INT_KEY_MONDATA_POLL,pcl);}  }
class C{  @Override public final void endGroup(Augmentations augs) throws XNIException {  final int length=fGroupIndexStackSizes[fDepth];  final int group=length > 0 ? addContentSpecNodes(0,length - 1) : addUniqueLeafNode(null);  --fDepth;  addToCurrentGroup(group);}  }
class C{  protected void onWake(){synchronized (myAgent) {    ResultsAgent aCaller=(ResultsAgent)myAgent;    try {      while (aCaller.InitializedAgents.size() + aCaller.ActiveAgents.size() < aCaller.MaxAgents) {        AgentController acCur=myAgent.getContainerController().createNewAgent("CalcAgent" + aCaller.createAgentID(aCaller.AgentUniqueIDLength),"jinsect.distributed.NGramDocumentComparatorAgent",AgentArgs);        aCaller.InitializedAgents.add(acCur.getName());        acCur.start();        myAgent.addBehaviour(new ReceiveResultBehaviour(aCaller,Interval,OutputStream));      }    } catch (    StaleProxyException ex) {      System.err.println("Cannot execute agent...");      ex.printStackTrace(System.err);    }    if (aCaller.ActiveAgents.size() > 0) {      if (aCaller.CurrentAgent == null)       aCaller.CurrentAgent=aCaller.ActiveAgents.listIterator(aCaller.ActiveAgents.size());      while (aCaller.PendingRequests < aCaller.MaxPendingRequests) {        AgentData adCur=(AgentData)CalcArgs.poll();        if (adCur != null) {          String sNextAgentName;          if (!aCaller.CurrentAgent.hasPrevious())           aCaller.CurrentAgent=aCaller.ActiveAgents.listIterator(aCaller.ActiveAgents.size());          try {            aCaller.CurrentAgent.previous();            aCaller.CurrentAgent.next();          } catch (          ConcurrentModificationException cmeE) {            aCaller.CurrentAgent=aCaller.ActiveAgents.listIterator(aCaller.ActiveAgents.size());          }          sNextAgentName=(String)aCaller.CurrentAgent.previous();          myAgent.addBehaviour(new SendTextsBehaviour(adCur.ID,adCur.Texts[0],adCur.Texts[1],sNextAgentName));          myAgent.addBehaviour(new ReceiveResultBehaviour(aCaller,Interval,OutputStream));          ((ResultsAgent)myAgent).PendingRequests++;        } else         break;      }    }    if ((!CalcArgs.isEmpty()))     myAgent.addBehaviour(new ActivateAgentListBehaviour(aCaller,Interval,CalcArgs,OutputStream,MigrationProbability,AgentArgs));  }}  }
class C{  public OrPredicate(){}  }
class C{  public void logMessage(MessageType type,String msg){  NotificationMessage<LogMessageParams> message=new NotificationMessage<>();  message.setMethod(LSPMethods.WINDOW_LOGMESSAGE.getMethod());  message.setParams(new LogMessageParams().withMessage(msg).withType(type.getType()));  send(message);}  }
class C{  public void addImportDecl(ImportDecl node){  List<ImportDecl> list=(parent == null || state == null) ? getImportDeclListNoTransform() : getImportDeclList();  list.addChild(node);}  }
class C{  @deprecated public static boolean isLeapYear(int year){  int x=(year * 12 + 17) % 19;  return x >= (x < 0 ? -7 : 12);}  }
class C{  public Builder baseUrl(String baseUrl){  checkNotNull(baseUrl,"baseUrl == null");  HttpUrl httpUrl=HttpUrl.parse(baseUrl);  if (httpUrl == null) {    throw new IllegalArgumentException("Illegal URL: " + baseUrl);  }  return baseUrl(httpUrl);}  }
class C{  public Fraction subtract(Fraction fraction){  return addSub(fraction,false);}  }
class C{  public void tabHidden(Tab tab){  mRecentTabs.add(new WeakReference<Tab>(tab));  if (mRecentTabs.size() <= MAX_RECENT_TABS)   return;  freeze(mRecentTabs.remove(0).get());}  }
class C{  public static BKTransmitException transmitException(int transmitResult){  return new BKTransmitException("Failed to write to bookkeeper; Error is (" + transmitResult + ") "+ BKException.getMessage(transmitResult),transmitResult);}  }
class C{  private void processTargetFixup(BBQ bbq){  BasicBlock b, p;  Stmt s;  while (!bbq.isEmpty()) {    try {      b=bbq.pull();    } catch (    NoSuchElementException e) {      break;    }    s=b.getTailJStmt();    if (s instanceof GotoStmt) {      if (b.succ.size() == 1) {        ((GotoStmt)s).setTarget(b.succ.firstElement().getHeadJStmt());      } else {        G.v().out.println("Error :");        for (int i=0; i < b.statements.size(); i++)         G.v().out.println(b.statements.get(i));        throw new RuntimeException(b + " has " + b.succ.size()+ " successors.");      }    } else     if (s instanceof IfStmt) {      if (b.succ.size() != 2)       G.v().out.println("How can an if not have 2 successors?");      if ((b.succ.firstElement()) == b.next) {        ((IfStmt)s).setTarget(b.succ.elementAt(1).getHeadJStmt());      } else {        ((IfStmt)s).setTarget(b.succ.firstElement().getHeadJStmt());      }    } else     if (s instanceof TableSwitchStmt) {      int count=0;      TableSwitchStmt sts=(TableSwitchStmt)s;      for (      BasicBlock basicBlock : b.succ) {        p=(basicBlock);        if (count == 0) {          sts.setDefaultTarget(p.getHeadJStmt());        } else {          sts.setTarget(count - 1,p.getHeadJStmt());        }        count++;      }    } else     if (s instanceof LookupSwitchStmt) {      int count=0;      LookupSwitchStmt sls=(LookupSwitchStmt)s;      for (      BasicBlock basicBlock : b.succ) {        p=(basicBlock);        if (count == 0) {          sls.setDefaultTarget(p.getHeadJStmt());        } else {          sls.setTarget(count - 1,p.getHeadJStmt());        }        count++;      }    }    b.done=false;    for (    BasicBlock basicBlock : b.succ) {      p=(basicBlock);      if (p.done)       bbq.push(p);    }  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_OneTimeBoostHealEffect_A_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200996,skilltarget,skillcaster,skillname);}  }
class C{  public void addName(String name){  m_names.add(name);}  }
class C{  public void nullify(){  for (int iNGramSize=MinSize; iNGramSize <= MaxSize; iNGramSize++) {    UniqueVertexGraph gCurLevel=getGraphLevelByNGramSize(iNGramSize);    java.util.Iterator iIter=gCurLevel.getEdgeSet().iterator();    while (iIter.hasNext()) {      WeightedEdge weEdge=(WeightedEdge)iIter.next();      weEdge.setWeight(0.0);    }  }}  }
class C{  private void initModel(){  this.photoInfoModel=new PhotoInfoObject();  this.downloadModel=new DownloadObject(photoInfoModel.getPhoto());  this.scrollModel=new ScrollObject();  this.browsableModel=new BorwsableObject(getIntent());}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Sleep_A_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200896,skilltarget,skillcaster,skillname);}  }
class C{  public void addElement(int element){  ensureCapacity(size + 1);  data[size++]=element;}  }
class C{  public DocumentWordGraph(){  MinSize=1;  MaxSize=2;  CorrelationWindow=3;  InitGraphs();}  }
class C{  private void verifyOverrideRulesForConnectivity(){  if ((mConnectedLayout != 0 && mDisconnectedLayout == 0)) {    throw new RuntimeException("Error inflating custom connectivity layout. " + "Have you forgot to override the disconnected layout ?");  }  if ((mConnectedLayout == 0 && mDisconnectedLayout != 0)) {    throw new RuntimeException("Error inflating custom connectivity layout. " + "Have you forgot to override the connected layout ?");  }}  }
class C{  @Override public String toString(){  return MoreObjects.toStringHelper(this).add("id",getId()).add("name",getName()).add("url",getUrl()).add("openSource",getOpenSource()).toString();}  }
class C{  public VignetteSubfilter(Context context,int alpha){  this.context=context;  this.alpha=alpha;}  }
class C{  public VirtualInvokeExpr newVirtualInvokeExpr(Local base,SootMethodRef method,Value... args){  return newVirtualInvokeExpr(base,method,Arrays.asList(args));}  }
class C{  private boolean[] correctBits(boolean[] rawbits) throws FormatException {  GenericGF gf;  int codewordSize;  if (ddata.getNbLayers() <= 2) {    codewordSize=6;    gf=GenericGF.AZTEC_DATA_6;  } else   if (ddata.getNbLayers() <= 8) {    codewordSize=8;    gf=GenericGF.AZTEC_DATA_8;  } else   if (ddata.getNbLayers() <= 22) {    codewordSize=10;    gf=GenericGF.AZTEC_DATA_10;  } else {    codewordSize=12;    gf=GenericGF.AZTEC_DATA_12;  }  int numDataCodewords=ddata.getNbDatablocks();  int numCodewords=rawbits.length / codewordSize;  if (numCodewords < numDataCodewords) {    throw FormatException.getFormatInstance();  }  int offset=rawbits.length % codewordSize;  int numECCodewords=numCodewords - numDataCodewords;  int[] dataWords=new int[numCodewords];  for (int i=0; i < numCodewords; i++, offset+=codewordSize) {    dataWords[i]=readCode(rawbits,offset,codewordSize);  }  try {    ReedSolomonDecoder rsDecoder=new ReedSolomonDecoder(gf);    rsDecoder.decode(dataWords,numECCodewords);  } catch (  ReedSolomonException ex) {    throw FormatException.getFormatInstance(ex);  }  int mask=(1 << codewordSize) - 1;  int stuffedBits=0;  for (int i=0; i < numDataCodewords; i++) {    int dataWord=dataWords[i];    if (dataWord == 0 || dataWord == mask) {      throw FormatException.getFormatInstance();    } else     if (dataWord == 1 || dataWord == mask - 1) {      stuffedBits++;    }  }  boolean[] correctedBits=new boolean[numDataCodewords * codewordSize - stuffedBits];  int index=0;  for (int i=0; i < numDataCodewords; i++) {    int dataWord=dataWords[i];    if (dataWord == 1 || dataWord == mask - 1) {      Arrays.fill(correctedBits,index,index + codewordSize - 1,dataWord > 1);      index+=codewordSize - 1;    } else {      for (int bit=codewordSize - 1; bit >= 0; --bit) {        correctedBits[index++]=(dataWord & (1 << bit)) != 0;      }    }  }  return correctedBits;}  }
class C{  static void decodeTo(String eventKey,Collection<String> eventIds){  int startIdx=0;  String prevId=null;  for (int i=0; i < eventKey.length(); i++) {    char ch=eventKey.charAt(i);    if (ch == DELIM_REGULAR || ch == DELIM_SHARED_PREFIX) {      String eventId=checkValid(combine(prevId,eventKey.substring(startIdx,i)));      eventIds.add(eventId);      prevId=(ch == DELIM_REGULAR) ? null : eventId;      startIdx=i + 1;    }  }  eventIds.add(checkValid(combine(prevId,eventKey.substring(startIdx,eventKey.length()))));}  }
class C{  public void addBodyDecl(BodyDecl node){  List<BodyDecl> list=(parent == null || state == null) ? getBodyDeclListNoTransform() : getBodyDeclList();  list.addChild(node);}  }
class C{  @Override public boolean accept(File pathname){  try {    try (InputReader r=new InputReader(pathname,null,null,true)){      return r.readInt() == RMA2File.MAGIC_NUMBER && r.readInt() == 3;    }   } catch (  IOException e) {    return false;  }}  }
class C{  public void flip(int x,int y){  int offset=y * rowSize + (x / 32);  bits[offset]^=1 << (x & 0x1f);}  }
class C{  public Transform lerped(Vector2 dp,double da,double alpha){  Transform result=new Transform();  result.set(this);  result.translate(dp.x * alpha,dp.y * alpha);  result.rotate(da * alpha,result.getTranslationX(),result.getTranslationY());  return result;}  }
class C{  @Override public void updateFields(DataSourceAttributeListInterface attributeData){}  }
class C{  public boolean areAllLocationSettingsEnabled(){  return isChromeLocationSettingEnabled() && isSystemLocationSettingEnabled();}  }
class C{  public ConfigDialog openDialog(){  select().clickOption(ToolbarOptions.CONFIGURE);  configDialog.verifyIsDisplayed();  return configDialog;}  }
class C{  public ContainerContentProvider(){}  }
class C{  public boolean contains(String sCategory){  return CategoryEstimations.containsKey(sCategory);}  }
class C{  public static Future<Void> closeSequence(ExecutorService executorService,boolean ignoreCloseError,AsyncCloseable... closeables){  List<AsyncCloseable> closeableList=Lists.newArrayListWithExpectedSize(closeables.length);  for (  AsyncCloseable closeable : closeables) {    if (null == closeable) {      closeableList.add(AsyncCloseable.NULL);    } else {      closeableList.add(closeable);    }  }  return FutureUtils.processList(closeableList,ignoreCloseError ? AsyncCloseable.CLOSE_FUNC_IGNORE_ERRORS : AsyncCloseable.CLOSE_FUNC,executorService).map(VoidFunctions.LIST_TO_VOID_FUNC);}  }
class C{  public FlowImageLoader resize(int width,int height){  if (!mHasUri) {    throw new RuntimeException("not impl");  } else {    mDna.digest(new ResizeGene(width,height));  }  return this;}  }
class C{  public boolean greaterOrEquals(PlatformLogicalVersion otherVersion){  return !lessThan(otherVersion);}  }
class C{  public void addLookupGroups(String[] groups){  if (operationsLogger.isLoggable(Level.FINER)) {    operationsLogger.entering(JoinStateManager.class.getName(),"addLookupGroups");  }  try {    ((DiscoveryGroupManagement)dm).addGroups(groups);  } catch (  IOException e) {    throw new RuntimeException("Could not change groups");  }  update();  if (operationsLogger.isLoggable(Level.FINER)) {    operationsLogger.exiting(JoinStateManager.class.getName(),"addLookupGroups");  }}  }
class C{  @Override public void textDecl(String version,String encoding,Augmentations augs) throws XNIException {  if (fDocumentHandler != null && !fOnlyPassPrefixMappingEvents) {    fDocumentHandler.textDecl(version,encoding,augs);  }}  }
class C{  public void destroyView() throws CanceledException {  super.destroyView();}  }
class C{  public void removeUserMessageListener(UserMessageListener userMessageListener){  userMessageListeners.remove(userMessageListener);}  }
class C{  private void BUFF_IdeScale(){  applyEffect(21744,getOwner());}  }
class C{  public static final AxisAlignedBounds show(Window owner,AxisAlignedBounds bounds){  SetBoundsDialog dialog=new SetBoundsDialog(owner,bounds);  dialog.setLocationRelativeTo(owner);  dialog.setVisible(true);  if (!dialog.canceled) {    Convex convex=dialog.pnlRectangle.getShape();    Vector2 tx=dialog.pnlTransform.getTranslation();    Rectangle r=(Rectangle)convex;    AxisAlignedBounds b=new AxisAlignedBounds(r.getWidth(),r.getHeight());    b.translate(tx);    return b;  }  return null;}  }
class C{  @Override public double[] makeInverseCumulativeTestValues(){  double[] points=makeCumulativeTestPoints();  double[] points2=new double[points.length - 5];  System.arraycopy(points,5,points2,0,points.length - 5);  return points2;}  }
class C{  @Override public void attributeDecl(String elementName,String attributeName,String type,String[] enumeration,String defaultType,XMLString defaultValue,XMLString nonNormalizedDefaultValue,Augmentations augs) throws XNIException {}  }
class C{  @Override public void start(){  m_line.start();  super.start();}  }
class C{  @Override public Node cloneNode(boolean deep){  EntityReferenceImpl er=(EntityReferenceImpl)super.cloneNode(deep);  er.setReadOnly(true,deep);  return er;}  }
class C{  @Override public Element createElementNS(String namespaceURI,String qualifiedName) throws DOMException {  return new ElementNSImpl(this,namespaceURI,qualifiedName);}  }
class C{  public void updateContactList(List<User> contactInfoList){  for (  User u : contactInfoList) {    contactList.put(u.getUsername(),u);  }  ArrayList<User> mList=new ArrayList<User>();  mList.addAll(contactList.values());  ((DemoHXSDKModel)getModel()).saveContactList(mList);}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public boolean isEnabled(){  return false;}  }
class C{  public static byte[] toByteArray(URLConnection urlConn) throws IOException {  InputStream inputStream=urlConn.getInputStream();  try {    return IOUtils.toByteArray(inputStream);  }  finally {    inputStream.close();  }}  }
class C{  public Vector3f subtractLocal(float subtractX,float subtractY,float subtractZ){  x-=subtractX;  y-=subtractY;  z-=subtractZ;  return this;}  }
class C{  public int size(){  return this.get().length;}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public ByteType fullCopy(){  ByteType tree=(ByteType)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public WordEvaluatorAdapter(){}  }
class C{  public void abort() throws IOException {  completeEdit(this,false);}  }
class C{  public Activity run(String key){  Activity a=get(key);  if (a != null)   ActivityManager.scheduleNow(a);  return a;}  }
class C{  public static List<String> readLines(InputStream input,String encoding) throws IOException {  return readLines(input,Charsets.toCharset(encoding));}  }
class C{  public static long copyLarge(InputStream input,OutputStream output,byte[] buffer) throws IOException {  long count=0;  int n=0;  while (EOF != (n=input.read(buffer))) {    output.write(buffer,0,n);    count+=n;  }  return count;}  }
class C{  public GetEntryTypeDescriptorSpaceOperationResult(){}  }
class C{  public synchronized void parseCatalog(URL aUrl) throws IOException {  catalogCwd=aUrl;  base=aUrl;  default_override=catalogManager.getPreferPublic();  catalogManager.debug.message(4,"Parse catalog: " + aUrl.toString());  DataInputStream inStream=null;  boolean parsed=false;  for (int count=0; !parsed && count < readerArr.size(); count++) {    CatalogReader reader=(CatalogReader)readerArr.get(count);    try {      inStream=new DataInputStream(aUrl.openStream());    } catch (    FileNotFoundException fnfe) {      break;    }    try {      reader.readCatalog(this,inStream);      parsed=true;    } catch (    CatalogException ce) {      if (ce.getExceptionType() == CatalogException.PARSE_FAILED) {        break;      } else {      }    }    try {      inStream.close();    } catch (    IOException e) {    }  }  if (parsed)   parsePendingCatalogs();}  }
class C{  private void writeMap(Map prefs,Writer out,String suffix) throws IOException {  Iterator i=(new TreeSet(prefs.keySet())).iterator();  while (i.hasNext()) {    Object current=i.next();    out.write(NAME_PREFIX + " " + current+ suffix+ "\n");    Object value=prefs.get(current);    if (value instanceof Boolean) {      out.write(PREF_PREFIX + " " + value+ "\n\n");    } else     if (value instanceof Integer) {      int state=((Integer)value).intValue();      if ((state == NAME_PREFERRED) || (state == NAME_PREFERRED_RESOURCE_EXISTS)) {        out.write(PREF_PREFIX + " " + true+ "\n\n");      } else {        out.write(PREF_PREFIX + " " + false+ "\n\n");      }    }  }}  }
class C{  public String post(Context context,String url,Header[] headers,RequestParams params,String contentType) throws HttpException {  HttpEntityEnclosingRequestBase request=new HttpPost(url);  if (params != null)   request.setEntity(paramsToEntity(params));  if (headers != null)   request.setHeaders(headers);  return sendRequest(httpClient,httpContext,request,contentType,context);}  }
class C{  public int readBytes(byte[] value) throws JMSException {  return readBytes(value,value.length);}  }
class C{  public static int limit(int number,int between,int and){  if (number <= between) {    return between;  }  if (number >= and) {    return and;  }  return number;}  }
class C{  public void execute(String command){  dir.execute(command,getCommandManager());}  }
class C{  public Boolean createSalesOrderItem(EntityManager em,String salesOrderId){  boolean status=true;  SalesOrderHeader soHeader=null;  SalesOrderItem soItem=null;  SalesOrderItemId id=new SalesOrderItemId(salesOrderId,1);  try {    em.getTransaction().begin();    soHeader=createSalesOrderHeader(salesOrderId);    soItem=new SalesOrderItem();    soItem.setId(id);    soItem.setCurrencyCode("INR");    soItem.setGrossAmount(BigDecimal.valueOf(13224));    soItem.setNetAmount(BigDecimal.valueOf(11113));    soItem.setTaxAmount(BigDecimal.valueOf(2111));    soHeader.addItem(soItem);    soItem.setSalesOrderHeader(soHeader);    em.persist(soItem);    em.getTransaction().commit();  } catch (  Exception e) {    status=false;    logger.error("Error occured during create of Sales Order Item. Detailed info: " + e);  }  return status;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Shield_PROTECT_ME_to_B(String skilltarget){  return new SM_SYSTEM_MESSAGE(1201173,skilltarget);}  }
class C{  public TablesApiRequest(String tableName,String granularity,String format,@NotNull String perPage,@NotNull String page,UriInfo uriInfo,BardConfigResources bardConfigResources) throws BadApiRequestException {  super(format,perPage,page,uriInfo);  this.tables=generateTables(tableName,bardConfigResources.getLogicalTableDictionary());  if (tableName != null && granularity != null) {    this.granularity=generateGranularity(granularity,bardConfigResources.getGranularityParser());    this.table=generateTable(tableName,this.granularity,bardConfigResources.getLogicalTableDictionary());  } else {    this.table=null;    this.granularity=null;  }  LOG.debug("Api request: Tables: {},\nGranularity: {},\nFormat: {}\nPagination: {}",this.tables,this.granularity,this.format,this.paginationParameters);}  }
class C{  void removedNode(NodeImpl node,boolean replace){}  }
class C{  public static String toString(byte[] input,String encoding) throws IOException {  return new String(input,encoding);}  }
class C{  protected VideoDeleteQuery videoId(int value){  return unsafeParam("video_id",value);}  }
class C{  public static void openDialerActivityWithAction(Context context,String phoneNumber,String action){  Intent callIntent=new Intent(action);  callIntent.setData(Uri.parse("tel:" + phoneNumber));  callIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  List<ResolveInfo> resolveInfos=context.getPackageManager().queryIntentActivities(callIntent,0);  ResolveInfo chosenRi=null;  for (  ResolveInfo ri : resolveInfos) {    if (ri.activityInfo != null && ri.activityInfo.name.startsWith("com.android")) {      chosenRi=ri;    }  }  if (chosenRi != null) {    callIntent.setPackage(chosenRi.activityInfo.packageName);    context.startActivity(callIntent);  }}  }
class C{  private ActivityManager(){  super("prefuse_ActivityManager");  m_activities=new ArrayList();  m_tmp=new ArrayList();  m_nextTime=Long.MAX_VALUE;  int priority=PrefuseConfig.getInt("activity.threadPriority");  if (priority >= Thread.MIN_PRIORITY && priority <= Thread.MAX_PRIORITY) {    this.setPriority(priority);  }  this.setDaemon(true);  this.start();}  }
class C{  public static void updateFile(ContainerConfig config,String containerConfigURL,String schemaPrefixFileName) throws IOException {  ReplaceInFileUtils containerFile=new ReplaceInFileUtils(containerConfigURL);  containerFile.xmlReplace(CONTAINER_NAME_PROP,schemaPrefixFileName);  containerFile.xmlReplace(LOOKUP_ENABLED_PROP,String.valueOf(config.isJiniLusEnabled()));  containerFile.xmlReplace(LOOKUP_JNDI_ENABLED_PROP,String.valueOf(config.isJndiEnabled()));  if (config.jndiUrl != null)   containerFile.xmlReplace(LOOKUP_JNDI_URL_PROP,config.jndiUrl);  if (config.lookupGroups != null)   containerFile.xmlReplace(LOOKUP_GROUP_PROP,config.lookupGroups);  containerFile.xmlReplace(LOOKUP_UNICAST_ENABLED_PROP,String.valueOf(config.unicastEnabled));  if (config.unicastURL != null)   containerFile.xmlReplace(LOOKUP_UNICAST_URL_PROP,config.unicastURL);  containerFile.xmlReplace(LOOKUP_JMS_ENABLED_PROP,String.valueOf(config.jmsEnabled));  containerFile.xmlReplace(LOOKUP_JMS_INTERNAL_ENABLED_PROP,String.valueOf(config.jmsInternalJndiEnabled));  containerFile.xmlReplace(LOOKUP_JMS_EXT_ENABLED_PROP,String.valueOf(config.jmsExtJndiEnabled));  containerFile.close();}  }
class C{  public StaticScript script(String script){  this.script=script;  return this;}  }
class C{  static public void convertDOMTreeFromSystemProperty(Node node){  for (int i=0; i < node.getChildNodes().getLength(); i++) {    Node childNode=node.getChildNodes().item(i);    if (childNode.getNodeType() == Node.TEXT_NODE) {      String childNodeValue=childNode.getNodeValue().trim();      if (childNodeValue.length() != 0) {        childNodeValue=JProperties.getPropertyFromSystem(childNodeValue,null);        childNode.setNodeValue(childNodeValue);      }    } else {      convertDOMTreeFromSystemProperty(childNode);    }  }}  }
class C{  @Override protected void onPostExecute(String result){  if (!isCancelled) {    try {      if (!"".equals(result)) {        if ("No connectivity".equals(result)) {          Log.e("TAG","No connection");        } else {          if (traces.size() > 0 && traces.get(traces.size() - 1).getIp().equals(ipToPing)) {            if (ttl < maxTtl) {              ttl=maxTtl;              traces.remove(traces.size() - 1);              new ExecutePingAsyncTask(maxTtl).execute();            }          } else {            if (ttl < maxTtl) {              ttl++;              new ExecutePingAsyncTask(maxTtl).execute();            }          }        }      }      finishedTasks++;    } catch (    final Exception e) {      e.printStackTrace();    }  }  super.onPostExecute(result);}  }
class C{  private static final String toXml(){  StringBuilder sb=new StringBuilder();  sb.append("<System>").append("<JavaVersion>").append(SystemUtilities.getJavaVersion()).append("</JavaVersion>").append("<JavaVendor>").append(SystemUtilities.getJavaVendor()).append("</JavaVendor>").append("<OperatingSystem>").append(SystemUtilities.getOperatingSystem()).append("</OperatingSystem>").append("<Architecture>").append(SystemUtilities.getArchitecture()).append("</Architecture>").append("<NumberOfCpus>").append(Runtime.getRuntime().availableProcessors()).append("</NumberOfCpus>").append("<Locale>").append(Locale.getDefault().getLanguage()).append("_").append(Locale.getDefault().getCountry()).append("</Locale>").append("</System>");  return sb.toString();}  }
class C{  public SplitQueryRequestHandler(DataRequestHandler next){  this.next=next;}  }
class C{  public String toString(){  return path.toString();}  }
class C{  public static String extractName(JsonElement renderElement){  String s=renderElement.toString();  int beginIndex=s.indexOf("\"") + 1;  int endIndex=s.indexOf("\"",beginIndex + 1);  String extractedName=s.substring(beginIndex,endIndex);  return extractedName;}  }
class C{  private static Map<String,String> convertHeaders(Header[] headers){  Map<String,String> result=new HashMap<String,String>();  for (int i=0; i < headers.length; i++) {    result.put(headers[i].getName(),headers[i].getValue());  }  return result;}  }
class C{  protected String buildPreamble(CommandSender sender){  return ChatColor.GRAY + preamble;}  }
class C{  @NotNull public File createProjectFile(@NotNull String path){  File file=new File(myRootDir,path);  FileUtil.createIfDoesntExist(file);  return file;}  }
class C{  public static final void sort(int[] a,int[] b,int length){  mergesort(a,b,0,length - 1);}  }
class C{  public Object remove(Object key){  processQueue();  return map.remove(Key.create(key,null));}  }
class C{  private int findInsertionIndex(final int key){  return findInsertionIndex(keys,states,key,mask);}  }
class C{  private void updateAndValidateQuietly(final T dataTag,final Object value,final String valueDescription,final Timestamp sourceTimestamp,final Timestamp daqTimestamp,final Timestamp cacheTimestamp){  dataTagCacheObjectFacade.validate(dataTag);  dataTagCacheObjectFacade.update(dataTag,value,valueDescription,sourceTimestamp,daqTimestamp,cacheTimestamp);}  }
class C{  @Override public void revertToDefaultValue(){  internalSetValue(this.defaultValue);}  }
class C{  public TLongObjectHashMap(int initialCapacity,float loadFactor,TLongHashingStrategy strategy){  super(initialCapacity,loadFactor,strategy);}  }
class C{  public Vector3f multLocal(Vector3f vec){  if (vec == null) {    return null;  }  float x=vec.x;  float y=vec.y;  vec.x=m00 * x + m01 * y + m02 * vec.z;  vec.y=m10 * x + m11 * y + m12 * vec.z;  vec.z=m20 * x + m21 * y + m22 * vec.z;  return vec;}  }
class C{  private void onActivePointerUp(){  if (STATUS.isSwipingToRefresh(mStatus)) {    scrollSwipingToRefreshToDefault();  } else   if (STATUS.isSwipingToLoadMore(mStatus)) {    scrollSwipingToLoadMoreToDefault();  } else   if (STATUS.isReleaseToRefresh(mStatus)) {    mRefreshCallback.onRelease();    scrollReleaseToRefreshToRefreshing();  } else   if (STATUS.isReleaseToLoadMore(mStatus)) {    mLoadMoreCallback.onRelease();    scrollReleaseToLoadMoreToLoadingMore();  }}  }
class C{  public static JpaQueryExecutor newExecutor(QueryExpressions expression,ClassMetaData cm,Object[] parameters){  if (expression.projections.length > 0)   return new JpaJdbcQueryExecutor(expression,cm,parameters);  return new JpaSqlQueryExecutor(expression,cm,parameters);}  }
class C{  @Deprecated private boolean isDefinedAccent(String accentAttribute){  if ("H*".equals(accentAttribute))   return true;  if ("L*".equals(accentAttribute))   return true;  if ("L*+H".equals(accentAttribute))   return true;  if ("L*+!H".equals(accentAttribute))   return true;  if ("L+H*".equals(accentAttribute))   return true;  return "!H*".equals(accentAttribute);}  }
class C{  public MonitoredFuturePool(FuturePool futurePool,StatsLogger statsLogger,boolean traceTaskExecution,long traceTaskExecutionWarnTimeUs){  this.futurePool=futurePool;  this.traceTaskExecution=traceTaskExecution;  this.traceTaskExecutionWarnTimeUs=traceTaskExecutionWarnTimeUs;  this.statsLogger=statsLogger;  this.taskPendingTime=statsLogger.getOpStatsLogger("task_pending_time");  this.taskExecutionTime=statsLogger.getOpStatsLogger("task_execution_time");  this.taskEnqueueTime=statsLogger.getOpStatsLogger("task_enqueue_time");  this.taskPendingCounter=statsLogger.getCounter("tasks_pending");}  }
class C{  @RequestMapping(value={"/issue/**"},method=RequestMethod.GET) public String returnIssueDetailsView(){  return "issueDetails";}  }
class C{  @SuppressWarnings("deprecation") @Override public void onFailure(int statusCode,Header[] headers,byte[] binaryData,Throwable error){  onFailure(statusCode,error,null);}  }
class C{  public void java_lang_System_setIn0(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  ReferenceVariable sysIn=helper.staticField("java.lang.System","in");  helper.assign(sysIn,params[0]);}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HOUR_FORE_CAST\"";  db.execSQL(sql);}  }
class C{  public VideoRestoreQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  @Override protected Expression generateExpression(){  Expression expression=null;  return expression;}  }
class C{  public boolean insertIntoTheCurrentSlot(){  if (!getVal(currentPos(),INTEGER).equals(EMPTY_CONST))   return false;  setVal(currentPos(),INUSE_CONST);  return true;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_CAN_ENTER_INSTANCE(String value0){  return new SM_SYSTEM_MESSAGE(1400031,value0);}  }
class C{  public boolean isKeepTags(){  return keepTags;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SpellATKDrain_INTERVAL_TO_ME(int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1201159,num0,skillname);}  }
class C{  public ColourMapModel(ColourMapModelUpdateInterface parent){  this.parentObj=parent;  columnList.add(Localisation.getString(FieldConfigBase.class,"ColourMapModel.number"));  columnList.add(Localisation.getString(FieldConfigBase.class,"ColourMapModel.label"));  columnList.add(Localisation.getString(FieldConfigBase.class,"ColourMapModel.colour"));  columnList.add(Localisation.getString(FieldConfigBase.class,"ColourMapModel.opacity"));  columnList.add(Localisation.getString(FieldConfigBase.class,"ColourMapModel.value"));}  }
class C{  private static void storeGroupID(final String dir,final ActivationGroupID obj) throws IOException {  File log=new File(dir);  String absDir=log.getAbsolutePath();  if (log.exists()) {    throw new IOException("Log " + absDir + " exists."+ " Please delete or select another path");  }  if (!log.mkdir()) {    throw new IOException("Could not create directory: " + absDir);  }  File cookieFile=new File(log,GROUP_COOKIE_FILE);  ObjectOutputStream oos=null;  try {    oos=new ObjectOutputStream(new BufferedOutputStream(new FileOutputStream(cookieFile)));    oos.writeObject(new MarshalledObject(obj));    oos.flush();  } catch (  IOException e) {    cookieFile.delete();    throw (IOException)e.fillInStackTrace();  } finally {    if (oos != null)     oos.close();  }}  }
class C{  public void reset(final Vector2D p,final double alpha){  unlinkReverse();  this.angle=MathUtils.normalizeAngle(alpha,FastMath.PI);  cos=FastMath.cos(this.angle);  sin=FastMath.sin(this.angle);  originOffset=MathArrays.linearCombination(cos,p.getY(),-sin,p.getX());}  }
class C{  public void startFirstSampleTimer(){  timer.start("firstAudio");  firstSample=true;  if (audioMetrics) {    timer.start("firstPlay");    firstPlay=true;  }}  }
class C{  public double predict(double x){  return beta * x + alpha;}  }
class C{  public SpectralSpellInteroperator(String sExecutable,String sInputFile,String[] sArgs){  this(sInputFile,sArgs);  SSpellExecutable=sExecutable;}  }
class C{  public ABTester doNotRetain(){  noSave=true;  return this;}  }
class C{  public static boolean isInteger(String value){  return value != null && INT_VALIDATOR.isValid(value) && INT_PATTERN.matcher(value).matches();}  }
class C{  protected void cleanUnusedStyles(){  Hashtable<String,Style> usedStyles=new Hashtable<>();  Iterator<Caption> itrC=getCaptions().values().iterator();  while (itrC.hasNext()) {    Caption current=itrC.next();    if (current.getStyle() != null) {      String iD=current.getStyle().getiD();      if (!usedStyles.containsKey(iD)) {        usedStyles.put(iD,current.getStyle());      }    }  }  this.setStyling(usedStyles);}  }
class C{  private static void mockPackPanel(JPanel panel){  panel.setSize(panel.getPreferredSize());  panel.doLayout();}  }
class C{  public ResultPoint[] detect() throws NotFoundException {  int height=image.getHeight();  int width=image.getWidth();  int halfHeight=height / 2;  int halfWidth=width / 2;  int deltaY=Math.max(1,height / (MAX_MODULES * 8));  int deltaX=Math.max(1,width / (MAX_MODULES * 8));  int top=0;  int bottom=height;  int left=0;  int right=width;  ResultPoint pointA=findCornerFromCenter(halfWidth,0,left,right,halfHeight,-deltaY,top,bottom,halfWidth / 2);  top=(int)pointA.getY() - 1;  ResultPoint pointB=findCornerFromCenter(halfWidth,-deltaX,left,right,halfHeight,0,top,bottom,halfHeight / 2);  left=(int)pointB.getX() - 1;  ResultPoint pointC=findCornerFromCenter(halfWidth,deltaX,left,right,halfHeight,0,top,bottom,halfHeight / 2);  right=(int)pointC.getX() + 1;  ResultPoint pointD=findCornerFromCenter(halfWidth,0,left,right,halfHeight,deltaY,top,bottom,halfWidth / 2);  bottom=(int)pointD.getY() + 1;  pointA=findCornerFromCenter(halfWidth,0,left,right,halfHeight,-deltaY,top,bottom,halfWidth / 4);  return new ResultPoint[]{pointA,pointB,pointC,pointD};}  }
class C{  public void selectAll(boolean select){  mainViewer.selectAllNodes(select);  mainViewer.repaint();}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase(getSyntax());  if (getViewer() instanceof GroupsViewer) {    GroupsViewer viewer=(GroupsViewer)getViewer();    viewer.getGroupsPanel().addNewGroup(-1);  }}  }
class C{  public static void multiply(Matrix a,double b,Matrix result){  for (int i=0; i < a.rows; i++) {    for (int j=0; j < a.cols; j++) {      result.set(i,j,a.get(i,j) * b);    }  }}  }
class C{  public void addLine(final String line){  if (textArea != null) {    textArea.append(line);    trimExcessLines();    textArea.setCaretPosition(textArea.getDocument().getLength());  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SubTypeBoostResist_A_TO_SELF(String skillcaster,String value0,String skillname){  return new SM_SYSTEM_MESSAGE(1200878,skillcaster,value0,skillname);}  }
class C{  private void dataReceived(ByteBuffer data,InetSocketAddress address){  try {    Message message=Message.createFromByteBuffer(data);    System.out.println("Received " + message);    String id=message.getPeerId();    if (wanVote.vote(message.getDestination())) {      System.out.println("Address changed to " + wanVote.getAddress());      showLocalIpAddress();    }    setWanvote(wanVote.getAddress().toString());    Peer peer=getOrMakePeer(id,address,Peer.INCOMING);    if (peer == null)     return;    peer.received(data);switch (message.getType()) {case Message.INTRODUCTION_REQUEST:      handlIntroductionRequest(peer,(IntroductionRequest)message);    break;case Message.INTRODUCTION_RESPONSE:  handleIntroductionResponse(peer,(IntroductionResponse)message);break;case Message.PUNCTURE:handlePuncture(peer,(Puncture)message);break;case Message.PUNCTURE_REQUEST:handlePunctureRequest(peer,(PunctureRequest)message);break;}updatePeerLists();} catch (BencodeReadException|IOException|MessageException e) {e.printStackTrace();}}  }
class C{  public SM_MESSAGE(Player player,String message,ChatType chatType){  this.player=player;  this.senderObjectId=player.getObjectId();  this.senderName=player.getName();  this.message=message;  this.race=player.getRace();  this.chatType=chatType;  this.x=player.getX();  this.y=player.getY();  this.z=player.getZ();}  }
class C{  public void rightTrim(int numberOfSample){  trim(0,numberOfSample);}  }
class C{  public AemSidekick clickComponentGroupToggle(String groupName){  final Map<String,WebElement> groupByNames=getGroupsByNames();  if (groupByNames.containsKey(groupName)) {    groupByNames.get(groupName).findElement(By.cssSelector(SECTION_TOGGLE_CSS)).click();  }  return this;}  }
class C{  @Override public WebDriver window(String nameOrHandle){  return targetLocator.window(nameOrHandle);}  }
class C{  public static Map<String,Object> endPreviousDay(GenericValue techDataCalendar,Timestamp dateFrom){  Map<String,Object> result=FastMap.newInstance();  Timestamp dateTo=null;  GenericValue techDataCalendarWeek=null;  try {    techDataCalendarWeek=techDataCalendar.getRelatedOne("TechDataCalendarWeek",true);  } catch (  GenericEntityException e) {    Debug.logError("Pb reading Calendar Week associated with calendar" + e.getMessage(),module);    return ServiceUtil.returnError("Pb reading Calendar Week associated with calendar");  }  Calendar cDateTrav=Calendar.getInstance();  cDateTrav.setTime(dateFrom);  Map<String,Object> position=dayEndCapacityAvailable(techDataCalendarWeek,cDateTrav.get(Calendar.DAY_OF_WEEK));  Time startTime=(Time)position.get("startTime");  int moveDay=((Integer)position.get("moveDay")).intValue();  Double capacity=(Double)position.get("capacity");  dateTo=(moveDay == 0) ? dateFrom : UtilDateTime.getDayEnd(dateFrom,Long.valueOf(moveDay));  Timestamp endAvailablePeriod=new Timestamp(UtilDateTime.getDayStart(dateTo).getTime() + startTime.getTime() + capacity.longValue()+ cDateTrav.get(Calendar.ZONE_OFFSET)+ cDateTrav.get(Calendar.DST_OFFSET));  if (dateTo.after(endAvailablePeriod)) {    dateTo=endAvailablePeriod;  } else {    dateTo=UtilDateTime.getDayStart(dateTo,-1);    cDateTrav.setTime(dateTo);    position=dayEndCapacityAvailable(techDataCalendarWeek,cDateTrav.get(Calendar.DAY_OF_WEEK));    startTime=(Time)position.get("startTime");    moveDay=((Integer)position.get("moveDay")).intValue();    capacity=(Double)position.get("capacity");    if (moveDay != 0)     dateTo=UtilDateTime.getDayStart(dateTo,moveDay);    dateTo.setTime(dateTo.getTime() + startTime.getTime() + capacity.longValue()+ cDateTrav.get(Calendar.ZONE_OFFSET)+ cDateTrav.get(Calendar.DST_OFFSET));  }  result.put("dateTo",dateTo);  result.put("previousCapacity",position.get("capacity"));  return result;}  }
class C{  public boolean isApplicable(){  return true;}  }
class C{  private void initializeSoot(String appPath,String libPath,Collection<String> classes,String extraSeed){  logger.info("Resetting Soot...");  soot.G.reset();  Options.v().set_no_bodies_for_excluded(true);  Options.v().set_allow_phantom_refs(true);  if (logger.isDebugEnabled())   Options.v().set_output_format(Options.output_format_jimple); else   Options.v().set_output_format(Options.output_format_none);  if (callgraphAlgorithm == CallgraphAlgorithm.OnDemand) {    Options.v().set_soot_classpath(libPath);    if (appPath != null) {      List<String> processDirs=new LinkedList<String>();      for (      String ap : appPath.split(File.pathSeparator))       processDirs.add(ap);      Options.v().set_process_dir(processDirs);    }  } else {    String path=appPath + (libPath != null && !libPath.isEmpty() ? File.pathSeparator + libPath : "");    if (JadeCfg.isEnable_apklibs()) {      File file=new File(JadeCfg.APK_LIBPATH);      if (file.exists() && file.isDirectory()) {        for (        File libfile : file.listFiles()) {          path=path + File.pathSeparator + libfile.getAbsolutePath();        }      }    }    Options.v().set_soot_classpath(path);  }switch (callgraphAlgorithm) {case AutomaticSelection:    if (extraSeed == null || extraSeed.isEmpty()) {      Options.v().setPhaseOption("cg.spark","on");      Options.v().setPhaseOption("cg.spark","string-constants:true");    } else     Options.v().setPhaseOption("cg.cha","on");  break;case CHA:Options.v().setPhaseOption("cg.cha","on");break;case RTA:Options.v().setPhaseOption("cg.spark","on");Options.v().setPhaseOption("cg.spark","rta:true");Options.v().setPhaseOption("cg.spark","string-constants:true");break;case VTA:Options.v().setPhaseOption("cg.spark","on");Options.v().setPhaseOption("cg.spark","vta:true");Options.v().setPhaseOption("cg.spark","string-constants:true");break;case SPARK:Options.v().setPhaseOption("cg.spark","on");Options.v().setPhaseOption("cg.spark","string-constants:true");if (this.aliasingAlgorithm == AliasingAlgorithm.FlowSensitive) {}break;case OnDemand:break;default :throw new RuntimeException("Invalid callgraph algorithm");}if (callgraphAlgorithm != CallgraphAlgorithm.OnDemand) {Options.v().set_whole_program(true);Options.v().setPhaseOption("cg","trim-clinit:false");}Options.v().setPhaseOption("jb.ulp","off");if (!this.androidPath.isEmpty()) {Options.v().set_src_prec(Options.src_prec_apk);if (this.forceAndroidJar || JadeCfg.isEnable_apklibs()) soot.options.Options.v().set_force_android_jar(this.androidPath); else soot.options.Options.v().set_android_jars(this.androidPath);} else Options.v().set_src_prec(Options.src_prec_java);if (sootConfig != null) sootConfig.setSootOptions(Options.v());for (String className : classes) Scene.v().addBasicClass(className,SootClass.BODIES);Scene.v().loadNecessaryClasses();logger.info("Basic class loading done.");boolean hasClasses=false;for (String className : classes) {SootClass c=Scene.v().forceResolve(className,SootClass.BODIES);if (c != null) {c.setApplicationClass();if (!c.isPhantomClass() && !c.isPhantom()) hasClasses=true;}}if (!hasClasses) {logger.error("Only phantom classes loaded, skipping analysis...");return;}}  }
class C{  public int equivHashCode(){  return (getUnit().hashCode() * 17) + (getValue().equivHashCode() * 101);}  }
class C{  private static String[] toSuffixes(String[] extensions){  String[] suffixes=new String[extensions.length];  for (int i=0; i < extensions.length; i++) {    suffixes[i]="." + extensions[i];  }  return suffixes;}  }
class C{  public XPathMatcher createMatcher(FieldActivator activator,int initialDepth){  return new Selector.Matcher(fXPath,activator,initialDepth);}  }
class C{  public static long copyLarge(Reader input,Writer output,char[] buffer) throws IOException {  long count=0;  int n=0;  while (EOF != (n=input.read(buffer))) {    output.write(buffer,0,n);    count+=n;  }  return count;}  }
class C{  public double distanceSquared(Vector o){  return NumberConversions.square(x - o.x) + NumberConversions.square(y - o.y) + NumberConversions.square(z - o.z);}  }
class C{  private static boolean resolveBoolean(Context context,@AttrRes int attr,boolean fallback){  TypedArray a=context.getTheme().obtainStyledAttributes(new int[]{attr});  try {    return a.getBoolean(0,fallback);  }  finally {    a.recycle();  }}  }
class C{  public MessagesGetHistoryAttachmentsQuery photoSizes(Boolean value){  return unsafeParam("photo_sizes",value);}  }
class C{  public UserDataKeyValueMapConverter(){  this.setId=false;  this.idKey=null;}  }
class C{  private void checkIsInitialized(){  Preconditions.checkNotNull(fileSystemDropExporterConfig,getClass().getSimpleName() + " must be initialized first");}  }
class C{  public EntityQuery distinct(boolean distinct){  this.distinct=distinct;  return this;}  }
class C{  public FieldODEStateAndDerivative<T> mapStateAndDerivative(final T t,final T[] y,final T[] yDot) throws MathIllegalArgumentException {  if (y.length != getTotalDimension()) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSIONS_MISMATCH,y.length,getTotalDimension());  }  if (yDot.length != getTotalDimension()) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSIONS_MISMATCH,yDot.length,getTotalDimension());  }  final int n=getNumberOfEquations();  int index=0;  final T[] state=extractEquationData(index,y);  final T[] derivative=extractEquationData(index,yDot);  if (n < 2) {    return new FieldODEStateAndDerivative<T>(t,state,derivative);  } else {    final T[][] secondaryState=MathArrays.buildArray(t.getField(),n - 1,-1);    final T[][] secondaryDerivative=MathArrays.buildArray(t.getField(),n - 1,-1);    while (++index < getNumberOfEquations()) {      secondaryState[index - 1]=extractEquationData(index,y);      secondaryDerivative[index - 1]=extractEquationData(index,yDot);    }    return new FieldODEStateAndDerivative<T>(t,state,derivative,secondaryState,secondaryDerivative);  }}  }
class C{  public StatelessScrollableDataIterator(String entityName,SessionFactory sessionFactory,int fetchSize,boolean performOrderById,int from,int size){  super(entityName,sessionFactory,fetchSize,performOrderById,from,size);}  }
class C{  public EquipmentAliveSender(final IProcessMessageSender processMessageSender,final Long aliveTagId,final EquipmentLoggerFactory equipmentLoggerFactory){  this.processMessageSender=processMessageSender;  this.aliveTagId=aliveTagId;  this.equipmentLogger=equipmentLoggerFactory.getEquipmentLogger(getClass());}  }
class C{  private void turnOnTracks(int trackCode){  for (int i=0; i < this.tracks.length; i++) {    if ((1 << i & trackCode) != 0) {      this.tracks[i].setLowAnim(TextureAnimationDrawer.trackAnim);    }  }}  }
class C{  public static char[] toCharArray(InputStream is) throws IOException {  return toCharArray(is,Charset.defaultCharset());}  }
class C{  @RequestMapping(value="/race-participants",method=RequestMethod.PUT,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<RaceParticipant> updateRaceParticipant(@RequestBody RaceParticipant raceParticipant) throws URISyntaxException {  log.debug("REST request to update RaceParticipant : {}",raceParticipant);  if (raceParticipant.getRaceParticipantId() == null) {    return createRaceParticipant(raceParticipant);  }  RaceParticipant result=raceParticipantRepository.save(raceParticipant);  return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert("raceParticipant",raceParticipant.getRaceParticipantId().toString())).body(result);}  }
class C{  public LookupSwitchStmt newLookupSwitchStmt(Value key,List<IntConstant> lookupValues,List<? extends Unit> targets,Unit defaultTarget){  return new JLookupSwitchStmt(key,lookupValues,targets,defaultTarget);}  }
class C{  @PostConstruct public void init(){  listenerContainer=cacheRegistrationService.registerBufferedListenerToTags(this);}  }
class C{  public Builder cacheInMemory(boolean cacheInMemory){  this.cacheInMemory=cacheInMemory;  return this;}  }
class C{  public Builder withGradleSync(boolean gradleSync){  myGradleSync=gradleSync;  return this;}  }
class C{  public SOCKS5Connector(String socks5host,int socks5port){  this(socks5host,socks5port,null,null);}  }
class C{  public boolean removeTuple(Tuple t){  throw new UnsupportedOperationException("Changes to graph structure not allowed for spanning trees.");}  }
class C{  public Patch(int bank,int program){  this.bank=bank;  this.program=program;}  }
class C{  private static void copyFile(File file,InputStream is,String mode) throws IOException, InterruptedException {  final String abspath=file.getAbsolutePath();  final FileOutputStream out=new FileOutputStream(file);  byte buf[]=new byte[1024];  int len;  while ((len=is.read(buf)) > 0) {    out.write(buf,0,len);  }  out.close();  is.close();  Runtime.getRuntime().exec("chmod " + mode + " "+ abspath).waitFor();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Heal_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200827,skillcaster,skillname);}  }
class C{  public boolean isCacheExternalDB(){  return _isCacheExternalDB;}  }
class C{  public void requestPermissions(int requestCode){}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public GenericConstructorDecl fullCopy(){  GenericConstructorDecl tree=(GenericConstructorDecl)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  boolean isVariableFieldWidth(){  return variableFieldWidth;}  }
class C{  public Entry copy(){  return new Entry(x,y,data);}  }
class C{  @Override public void accept(TestValueVisitor visitor,FieldIdEnum fieldId){  Expression expression=ff.property(this.expression);  visitor.setTestValue(fieldId,expression);}  }
class C{  public void loadListener(String serverKey) throws GenericServiceException {  Server server=servers.get(serverKey);  if (server == null)   throw new GenericServiceException("No listener found with that serverKey.");  loadListener(serverKey,server);}  }
class C{  public void include(){  this.include(true);}  }
class C{  public int minutes(){  return this.minutes;}  }
class C{  public void addTypeBound(Access node){  List<Access> list=(parent == null || state == null) ? getTypeBoundListNoTransform() : getTypeBoundList();  list.addChild(node);}  }
class C{  public void dismissLoadingDialog(){  Fragment frag=getSupportFragmentManager().findFragmentByTag(DIALOG_WAIT_TAG);  if (frag != null) {    Log_OC.d(TAG,"dismiss loading dialog");    LoadingDialog loading=(LoadingDialog)frag;    loading.dismissAllowingStateLoss();  }}  }
class C{  public PotionEffect(PotionEffectType type,int duration,int amplifier,boolean ambient,boolean particles,Color color){  Validate.notNull(type,"effect type cannot be null");  this.type=type;  this.duration=duration;  this.amplifier=amplifier;  this.ambient=ambient;  this.particles=particles;  this.color=color;}  }
class C{  public ShlExpr newShlExpr(Value op1,Value op2){  return new JShlExpr(op1,op2);}  }
class C{  protected void writeString(String s) throws IOException {  for (int i=0; i < s.length(); i++) {    out.write((byte)s.charAt(i));  }}  }
class C{  public void resetLabelsToSkip(){  mIsAxisModulusCustom=false;}  }
class C{  public FaveGetVideosQuery(VkApiClient client,UserActor actor){  super(client,"fave.getVideos",GetVideosResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  private boolean isViewWasReused(){  String currentCacheKey=engine.getLoadingUriForView(imageAware);  return !memoryCacheKey.equals(currentCacheKey);}  }
class C{  @Commit public void build(){  for (  SubEquipmentConfiguration configuration : subEquipmentConfigurationList) {    subEquipmentConfigurations.put(configuration.getId(),configuration);  }  for (  SourceDataTag tag : sourceDataTagList) {    sourceDataTags.put(tag.getId(),tag);  }  for (  SourceCommandTag tag : sourceCommandTagList) {    sourceCommandTags.put(tag.getId(),tag);  }}  }
class C{  private String prepareSlowConsumerCloseMsg(SocketAddress address,int slowConsumerLatency){  return "Closed slow consumer: " + address + " SlowConsumerRetries="+ _slowConsumerRetries+ " SlowConsumerLatency="+ slowConsumerLatency;}  }
class C{  public RevealBuilder withDelayBetweenChildAnimation(final int delayBetweenChildAnimation){  this.mDelayBetweenChildAnimation=delayBetweenChildAnimation;  return this;}  }
class C{  void dismiss(){  if (isShowing()) {    mPopup.dismiss();  }}  }
class C{  protected void drawLabel(Canvas c,float x,float y,String label){  c.drawText(label,x,y,mLegendLabelPaint);}  }
class C{  private void handleUpdateTimeMessage(){  invalidate();  if (shouldTimerBeRunning()) {    long timeMs=System.currentTimeMillis();    long delayMs=INTERACTIVE_UPDATE_RATE_MS - (timeMs % INTERACTIVE_UPDATE_RATE_MS);    mUpdateTimeHandler.sendEmptyMessageDelayed(MSG_UPDATE_TIME,delayMs);  }}  }
class C{  public static int indexOf(long[] set,int bitsPerElement,int size,long val){  int low=0;  int high=size - 1;  int mid=0;  while (low <= high) {    mid=(low + high) >>> 1;    long curr=get(set,bitsPerElement,mid);    if (curr < val) {      low=mid + 1;    } else     if (curr > val) {      high=mid - 1;    } else {      return mid;    }  }  return -(low + 1);}  }
class C{  public static void init(Context context){  if (cameraManager == null) {    cameraManager=new CameraManager(context);  }}  }
class C{  public void decorate(Object element,IDecoration decoration){  IResource resource=null;  try {    resource=getResource(element);    if (resource != null && resource.getType() == IResource.ROOT)     return;    boolean isIgnored=false;    SVNTeamProvider svnProvider=null;    ISVNLocalResource svnResource=null;    if (resource != null) {      svnProvider=(SVNTeamProvider)RepositoryProvider.getProvider(resource.getProject(),SVNProviderPlugin.getTypeId());      if (svnProvider == null)       return;      svnResource=SVNWorkspaceRoot.getSVNResourceFor(resource);      try {        if (svnResource.isIgnored()) {          isIgnored=true;        }      } catch (      SVNException e) {        return;      }    }    boolean isDirty=false;    boolean isUnversioned=false;    if (resource == null) {      if (element instanceof ResourceMapping) {        IProject[] projects=((ResourceMapping)element).getProjects();        if (projects != null) {          for (          IProject project : projects) {            ISVNLocalResource svnProjectResource=SVNWorkspaceRoot.getSVNResourceFor(project);            if (svnProjectResource != null) {              try {                if (svnProjectResource.isDirty()) {                  decoration.addOverlay(dirty);                  return;                }              } catch (              SVNException e) {                return;              }            }          }        }      }      return;    } else {      LocalResourceStatus status=null;      if (!isIgnored) {        try {          status=svnResource.getStatusFromCache();          isDirty=SVNLightweightDecorator.isDirty(svnResource,status);        } catch (        SVNException e) {          if (!e.operationInterrupted()) {            SVNUIPlugin.log(e.getStatus());            isDirty=true;          }        }        if (status != null) {          isUnversioned=status.isUnversioned();        }        decorateTextLabel(svnResource,status,decoration,isDirty);      }      computeColorsAndFonts(isIgnored,isDirty || isUnversioned,decoration);      if (!isIgnored) {        ImageDescriptor overlay=getOverlay(svnResource,status,isDirty,svnProvider);        if (overlay != null) {          decoration.addOverlay(overlay);        }      }    }  } catch (  Exception e) {    SVNUIPlugin.log(IStatus.ERROR,"Error Decorating " + resource,e);  }}  }
class C{  public static long nextPowOf2(long v){  v--;  v|=v >> 1;  v|=v >> 2;  v|=v >> 4;  v|=v >> 8;  v|=v >> 16;  v++;  return v;}  }
class C{  private Map<String,Object> parse(Json json){  return json.asMap();}  }
class C{  protected void assertClose(RealMatrix m,RealMatrix n,double tolerance){  Assert.assertTrue(m.subtract(n).getNorm() < tolerance);}  }
class C{  private void processJournal() throws IOException {  deleteIfExists(journalFileTmp);  for (Iterator<Entry> i=lruEntries.values().iterator(); i.hasNext(); ) {    Entry entry=i.next();    if (entry.currentEditor == null) {      for (int t=0; t < valueCount; t++) {        size+=entry.lengths[t];      }    } else {      entry.currentEditor=null;      for (int t=0; t < valueCount; t++) {        deleteIfExists(entry.getCleanFile(t));        deleteIfExists(entry.getDirtyFile(t));      }      i.remove();    }  }}  }
class C{  public VideoSaveQuery privacyView(List<String> value){  return unsafeParam("privacy_view",value);}  }
class C{  public int compareTo(byte[] buffer1,int offset1,int length1,byte[] buffer2,int offset2,int length2){  if (buffer1 == buffer2 && offset1 == offset2 && length1 == length2) {    return 0;  }  int minLength=Math.min(length1,length2);  int minWords=minLength / SIZEOF_LONG;  int offset1Adj=offset1 + BYTE_ARRAY_BASE_OFFSET;  int offset2Adj=offset2 + BYTE_ARRAY_BASE_OFFSET;  for (int i=0; i < minWords * SIZEOF_LONG; i+=SIZEOF_LONG) {    long lw=THEUNSAFE.getLong(buffer1,offset1Adj + (long)i);    long rw=THEUNSAFE.getLong(buffer2,offset2Adj + (long)i);    long diff=lw ^ rw;    if (diff != 0) {      if (!LITTLEENDIAN) {        return lessThanUnsigned(lw,rw) ? -1 : 1;      }      int n=0;      int y;      int x=(int)diff;      if (x == 0) {        x=(int)(diff >>> 32);        n=32;      }      y=x << 16;      if (y == 0) {        n+=16;      } else {        x=y;      }      y=x << 8;      if (y == 0) {        n+=8;      }      return (int)(((lw >>> n) & 0xFFL) - ((rw >>> n) & 0xFFL));    }  }  for (int i=minWords * SIZEOF_LONG; i < minLength; i++) {    int a=(buffer1[offset1 + i] & 0xff);    int b=(buffer2[offset2 + i] & 0xff);    if (a != b) {      return a - b;    }  }  return length1 - length2;}  }
class C{  @Override public void check(List<CheckResultInterface> remarks,TransMeta transMeta,StepMeta stepMeta,RowMetaInterface prev,String[] input,String[] output,RowMetaInterface info){  CheckResult checkResVal;  if (input.length > 0) {    checkResVal=new CheckResult(CheckResult.TYPE_RESULT_OK,"Step is receiving info from other steps.",stepMeta);    remarks.add(checkResVal);  } else {    checkResVal=new CheckResult(CheckResult.TYPE_RESULT_ERROR,"No input received from other steps!",stepMeta);    remarks.add(checkResVal);  }}  }
class C{  public DataApiRequest(String tableName,String granularity,List<PathSegment> dimensions,String logicalMetrics,String intervals,String filters,String havings,String sorts,String count,String topN,String format,String timeZoneId,String asyncAfter,@NotNull String perPage,@NotNull String page,UriInfo uriInfo,BardConfigResources bardConfigResources) throws BadApiRequestException {  super(format,asyncAfter,perPage,page,uriInfo);  GranularityParser granularityParser=bardConfigResources.getGranularityParser();  DimensionDictionary dimensionDictionary=bardConfigResources.getDimensionDictionary();  MetricDictionary metricDictionary=bardConfigResources.getMetricDictionary();  timeZone=generateTimeZone(timeZoneId,bardConfigResources.getSystemTimeZone());  this.granularity=generateGranularity(granularity,timeZone,granularityParser);  TableIdentifier tableId=new TableIdentifier(tableName,this.granularity);  this.table=bardConfigResources.getLogicalTableDictionary().get(tableId);  if (this.table == null) {    LOG.debug(TABLE_UNDEFINED.logFormat(tableName));    throw new BadApiRequestException(TABLE_UNDEFINED.format(tableName));  }  DateTimeFormatter dateTimeFormatter=generateDateTimeFormatter(timeZone);  this.intervals=generateIntervals(intervals,this.granularity,dateTimeFormatter);  metricDictionary=metricDictionary.getScope(Collections.singletonList(tableName));  this.filterBuilder=bardConfigResources.getFilterBuilder();  this.logicalMetrics=generateLogicalMetrics(logicalMetrics,metricDictionary,dimensionDictionary,table);  validateMetrics(this.logicalMetrics,this.table);  this.dimensions=generateDimensions(dimensions,dimensionDictionary);  validateRequestDimensions(this.dimensions,this.table);  this.perDimensionFields=generateDimensionFields(dimensions,dimensionDictionary);  this.filters=generateFilters(filters,table,dimensionDictionary);  validateRequestDimensions(this.filters.keySet(),this.table);  try {    this.filter=filterBuilder.buildFilters(this.filters);  } catch (  DimensionRowNotFoundException e) {    LOG.debug(e.getMessage());    throw new BadApiRequestException(e);  }  this.havings=generateHavings(havings,this.logicalMetrics,metricDictionary);  this.having=DruidHavingBuilder.buildHavings(this.havings);  this.sorts=generateSortColumns(sorts,this.logicalMetrics,metricDictionary);  this.count=generateInteger(count,"count");  if (this.count < 0) {    LOG.debug(INTEGER_INVALID.logFormat(count,"count"));    throw new BadApiRequestException(INTEGER_INVALID.logFormat(count,"count"));  }  this.topN=generateInteger(topN,"topN");  if (this.topN < 0) {    LOG.debug(INTEGER_INVALID.logFormat(topN,"topN"));    throw new BadApiRequestException(INTEGER_INVALID.logFormat(topN,"topN"));  } else   if (this.topN > 0 && this.sorts.isEmpty()) {    LOG.debug(TOP_N_UNSORTED.logFormat(topN));    throw new BadApiRequestException(TOP_N_UNSORTED.format(topN));  }  LOG.debug("Api request: TimeGrain: {}," + " Table: {}," + " Dimensions: {},"+ " Dimension Fields: {},"+ " Filters: {},\n"+ " Havings: {},\n"+ " Logical metrics: {},\n\n"+ " Sorts: {},"+ " Count: {},"+ " TopN: {},"+ " AsyncAfter: {}"+ " Format: {}"+ " Pagination: {}",this.granularity,this.table.getName(),this.dimensions,this.perDimensionFields,this.filters,this.havings,this.logicalMetrics,this.sorts,this.count,this.topN,this.asyncAfter,this.format,this.paginationParameters);  validateAggregatability(this.dimensions,this.filters);  validateTimeAlignment(this.granularity,this.intervals);}  }
class C{  public final String toString(){  return (name + ", early reflection delay " + earlyReflectionDelay+ " ns, early reflection intensity "+ earlyReflectionIntensity+ " dB, late deflection delay "+ lateReflectionDelay+ " ns, late reflection intensity "+ lateReflectionIntensity+ " dB, decay time "+ decayTime);}  }
class C{  public boolean isAskForConfirmation(){  return askForConfirmation;}  }
class C{  public static final void isAttrValueWF(DOMErrorHandler errorHandler,DOMErrorImpl error,DOMLocatorImpl locator,NamedNodeMap attributes,Attr a,String value,boolean xml11Version){  if (a instanceof AttrImpl && ((AttrImpl)a).hasStringValue()) {    isXMLCharWF(errorHandler,error,locator,value,xml11Version);  } else {    NodeList children=a.getChildNodes();    for (int j=0; j < children.getLength(); j++) {      Node child=children.item(j);      if (child.getNodeType() == Node.ENTITY_REFERENCE_NODE) {        Document owner=a.getOwnerDocument();        Entity ent=null;        if (owner != null) {          DocumentType docType=owner.getDoctype();          if (docType != null) {            NamedNodeMap entities=docType.getEntities();            ent=(Entity)entities.getNamedItemNS("*",child.getNodeName());          }        }        if (ent == null) {          String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"UndeclaredEntRefInAttrValue",new Object[]{a.getNodeName()});          reportDOMError(errorHandler,error,locator,msg,DOMError.SEVERITY_ERROR,"UndeclaredEntRefInAttrValue");        }      } else {        isXMLCharWF(errorHandler,error,locator,child.getNodeValue(),xml11Version);      }    }  }}  }
class C{  private synchronized void rebuildJournal() throws IOException {  if (journalWriter != null) {    journalWriter.close();  }  Writer writer=new BufferedWriter(new FileWriter(journalFileTmp),IO_BUFFER_SIZE);  writer.write(MAGIC);  writer.write("\n");  writer.write(VERSION_1);  writer.write("\n");  writer.write(Integer.toString(appVersion));  writer.write("\n");  writer.write(Integer.toString(valueCount));  writer.write("\n");  writer.write("\n");  for (  Entry entry : lruEntries.values()) {    if (entry.currentEditor != null) {      writer.write(DIRTY + ' ' + entry.key+ '\n');    } else {      writer.write(CLEAN + ' ' + entry.key+ entry.getLengths()+ '\n');    }  }  writer.close();  journalFileTmp.renameTo(journalFile);  journalWriter=new BufferedWriter(new FileWriter(journalFile,true),IO_BUFFER_SIZE);}  }
class C{  private void transferNamespaces(@NotNull XmlTag tag){  XmlDocument xmlDocument=myFile.getDocument();  assert xmlDocument != null;  XmlTag rootTag=xmlDocument.getRootTag();  assert rootTag != null;  Map<String,String> prefixToNamespace=rootTag.getLocalNamespaceDeclarations();  Map<String,String> namespaceToPrefix=Maps.newHashMap();  for (  Map.Entry<String,String> entry : prefixToNamespace.entrySet()) {    namespaceToPrefix.put(entry.getValue(),entry.getKey());  }  Map<String,String> oldPrefixToPrefix=Maps.newHashMap();  for (  Map.Entry<String,String> entry : tag.getLocalNamespaceDeclarations().entrySet()) {    String namespace=entry.getValue();    String prefix=entry.getKey();    String currentPrefix=namespaceToPrefix.get(namespace);    if (currentPrefix == null) {      String newPrefix=AndroidResourceUtil.ensureNamespaceImported(myFile,namespace,prefix);      if (!prefix.equals(newPrefix)) {        oldPrefixToPrefix.put(prefix,newPrefix);        namespaceToPrefix.put(namespace,newPrefix);      }    } else     if (!prefix.equals(currentPrefix)) {      oldPrefixToPrefix.put(prefix,currentPrefix);    }  }  if (!oldPrefixToPrefix.isEmpty()) {    updatePrefixes(tag,oldPrefixToPrefix);  }}  }
class C{  @deprecated public final int parseOffsetRFC822(String text,ParsePosition pos){  int start=pos.getIndex();  if (start + 2 >= text.length()) {    pos.setErrorIndex(start);    return 0;  }  char signChar=text.charAt(start);  int sign;  if (signChar == '+') {    sign=1;  } else {    int sign;    if (signChar == '-') {      sign=-1;    } else {      pos.setErrorIndex(start);      return 0;    }  }  int sign;  int idx=start + 1;  int numDigits=0;  int[] digits=new int[6];  while ((numDigits < digits.length) && (idx < text.length())) {    int digit="0123456789".indexOf(text.charAt(idx));    if (digit < 0) {      break;    }    digits[numDigits]=digit;    numDigits++;    idx++;  }  if (numDigits == 0) {    pos.setErrorIndex(start);    return 0;  }  int hour=0;  int min=0;  int sec=0;switch (numDigits) {case 1:    hour=digits[0];  break;case 2:hour=digits[0] * 10 + digits[1];break;case 3:hour=digits[0];min=digits[1] * 10 + digits[2];break;case 4:hour=digits[0] * 10 + digits[1];min=digits[2] * 10 + digits[3];break;case 5:hour=digits[0];min=digits[1] * 10 + digits[2];sec=digits[3] * 10 + digits[4];break;case 6:hour=digits[0] * 10 + digits[1];min=digits[2] * 10 + digits[3];sec=digits[4] * 10 + digits[5];}if ((hour > 23) || (min > 59) || (sec > 59)) {pos.setErrorIndex(start);return 0;}pos.setIndex(start + 1 + numDigits);return ((hour * 60 + min) * 60 + sec) * 1000 * sign;}  }
class C{  public void begin(int size){  outputData=new byte[size];  curIndex=0;}  }
class C{  public long addAndGet(final long increment){  long currentValue;  long newValue;  do {    currentValue=get();    newValue=currentValue + increment;  } while (!compareAndSet(currentValue,newValue));  return newValue;}  }
class C{  public void hideButtons(){  mAlert.hideButtons();}  }
class C{  public static Map<String,Object> testCCProcessorCaptureAlwaysDecline(DispatchContext dctx,Map<String,? extends Object> context){  Locale locale=(Locale)context.get("locale");  Map<String,Object> result=ServiceUtil.returnSuccess();  BigDecimal processAmount=(BigDecimal)context.get("captureAmount");  Debug.logInfo("Test Processor Declining Credit Card capture",module);  String refNum=UtilDateTime.nowAsString();  result.put("captureResult",Boolean.FALSE);  result.put("captureAmount",processAmount);  result.put("captureRefNum",refNum);  result.put("captureAltRefNum",refNum);  result.put("captureFlag","D");  result.put("captureMessage",UtilProperties.getMessage(resource,"AccountingPaymentTestCaptureDeclined",locale));  return result;}  }
class C{  public SpaceTypeDescriptorBuilder addCompoundIndex(String[] paths){  return addCompoundIndex(paths,SpaceIndexType.BASIC,false);}  }
class C{  @Override public void onConnectionFailure(){  super.onConnectionFailure();}  }
class C{  public void addToTemplateContext(String name,Object value){  if (templateContext == null) {    templateContext=FastMap.newInstance();  }  templateContext.put(name,value);}  }
class C{  @Override public void onChangeTheme(Theme theme){  mColorModeButtons.get(theme).setChecked(true);}  }
class C{  public static void multiply(Matrix a,Matrix b,Matrix result){  for (int ri=0; ri < result.rows; ri++) {    for (int rc=0; rc < result.cols; rc++) {      double sum=0;      for (int j=0; j < b.rows; j++) {        sum+=a.get(ri,j) * b.get(j,rc);      }      result.set(ri,rc,sum);    }  }}  }
class C{  public boolean isAssignableFrom(Schema s){  int ssize=s.getColumnCount();  if (ssize > m_size)   return false;  for (int i=0; i < ssize; ++i) {    int idx=getColumnIndex(s.getColumnName(i));    if (idx < 0)     return false;    if (!m_types[idx].equals(s.getColumnType(i)))     return false;  }  return true;}  }
class C{  public void init$Children(){  children=new ASTNode[1];}  }
class C{  public static int delete(File f) throws IOException {  int count=0;  if (f.isFile()) {    f.delete();    count++;  } else   if (f.isDirectory()) {    File[] ff=f.listFiles();    if (ff != null && ff.length > 0) {      for (      File f1 : ff) {        count+=delete(f1);      }    }    f.delete();    count++;  }  return count;}  }
class C{  public int indent(){  return indent;}  }
class C{  public PagesGetHistoryQuery groupId(Integer value){  return unsafeParam("group_id",value);}  }
class C{  public static Constructor<?> findInjectedCtor(Class<?> clazz){  Constructor<?>[] ctors=clazz.getDeclaredConstructors();  for (  Constructor<?> ctor : ctors) {    if (isInjected(ctor)) {      return ctor;    }  }  return null;}  }
class C{  protected DocsEditQuery ownerId(int value){  return unsafeParam("owner_id",value);}  }
class C{  public void init$Children(){}  }
class C{  protected final void clean(){  if (!isAlive())   return;synchronized (this) {    _shouldDie=true;    notify();  }  try {    join();  } catch (  InterruptedException e) {  }  if (_expirationList != null)   _expirationList.clear();}  }
class C{  public void add(long n){  total.inc(n);}  }
class C{  public void deactivate(){}  }
class C{  private void pruneIfNeeded(int neededSpace){  if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes) {    return;  }  if (VolleyLog.DEBUG) {    VolleyLog.v("Pruning old cache entries.");  }  long before=mTotalSize;  int prunedFiles=0;  long startTime=SystemClock.elapsedRealtime();  Iterator<Map.Entry<String,CacheHeader>> iterator=mEntries.entrySet().iterator();  while (iterator.hasNext()) {    Map.Entry<String,CacheHeader> entry=iterator.next();    CacheHeader e=entry.getValue();    boolean deleted=getFileForKey(e.key).delete();    if (deleted) {      mTotalSize-=e.size;    } else {      VolleyLog.d("Could not delete cache entry for key=%s, filename=%s",e.key,getFilenameForKey(e.key));    }    iterator.remove();    prunedFiles++;    if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes * HYSTERESIS_FACTOR) {      break;    }  }  if (VolleyLog.DEBUG) {    VolleyLog.v("pruned %d files, %d bytes, %d ms",prunedFiles,(mTotalSize - before),SystemClock.elapsedRealtime() - startTime);  }}  }
class C{  private String readFormatter(List<Character> read,boolean noFormat,boolean bs){  if (noFormat) {    return Joiner.on("").join(read);  }  String formatted="";  for (  char c : read) {    String fmt="\033[";    if (this.rec.getReadPairedFlag() && this.rec.getSecondOfPairFlag()) {      fmt+="4;";    }    if (this.rec.getMappingQuality() < SHADE_MAPQ) {      fmt+="48;5;250;38;5;240";    } else     if (Character.toUpperCase(c) == charM) {      fmt+="97;101";    } else     if (Character.toUpperCase(c) == charU) {      fmt+="97;104";    } else     if (Character.toUpperCase(c) == 'A') {      fmt+="1;107;34";    } else     if (Character.toUpperCase(c) == 'C') {      fmt+="1;107;31";    } else     if (Character.toUpperCase(c) == 'G') {      fmt+="1;107;32";    } else     if (Character.toUpperCase(c) == 'T') {      fmt+="1;107;33";    } else     if (!this.rec.getReadNegativeStrandFlag() && !(bs && !(gc.getBpPerScreenColumn() > 1))) {      fmt+="48;5;147";    } else     if (this.rec.getReadNegativeStrandFlag() && !(bs && !(gc.getBpPerScreenColumn() > 1))) {      fmt+="48;5;225";    }    formatted+=fmt + "m" + c+ "\033[0m";  }  return formatted;}  }
class C{  public Editor edit() throws IOException {  return DiskLruCache.this.edit(key,sequenceNumber);}  }
class C{  public static boolean isValidAndroidPackageName(@NotNull String name){  return validateAndroidPackageName(name) == null;}  }
class C{  private void initPaint(){  mProgressTextPaint.setTextAlign(Paint.Align.CENTER);  mProgressTextPaint.setTextSize(mProgressTextSize);  mProgressPaint.setStyle(mStyle == SOLID ? Paint.Style.FILL : Paint.Style.STROKE);  mProgressPaint.setStrokeWidth(mProgressStrokeWidth);  mProgressPaint.setColor(mProgressStartColor);  mProgressPaint.setStrokeCap(mCap);  mProgressBackgroundPaint.setStyle(mStyle == SOLID ? Paint.Style.FILL : Paint.Style.STROKE);  mProgressBackgroundPaint.setStrokeWidth(mProgressStrokeWidth);  mProgressBackgroundPaint.setColor(mProgressBackgroundColor);  mProgressBackgroundPaint.setStrokeCap(mCap);  mBackgroundPaint.setStyle(Paint.Style.FILL);  mBackgroundPaint.setColor(mBackgroundColor);}  }
class C{  public void cancel(){  cancelButton.click();}  }
class C{  public Reader nextReader() throws IOException {  String line=null;  buf.setLength(0);  while ((line=in.readLine()) != null) {    buf.append(line);    buf.append(System.getProperty("line.separator"));    if (line.indexOf(endMarker) != -1) {      break;    }  }  if (buf.length() == 0)   return null;  return new StringReader(buf.toString());}  }
class C{  public boolean useAuthor(String userId){switch (mode) {case PASS_THRU:    return true;case USE_DEFAULT:  return false;case WHITELIST:return whitelist.contains(userId);default :throw new IllegalStateException(String.format("Mode '%s' not implemented.",mode));}}  }
class C{  public static Map<String,Object> runEntitySync(DispatchContext dctx,Map<String,? extends Object> context){  Locale locale=(Locale)context.get("locale");  EntitySyncContext esc=null;  try {    esc=new EntitySyncContext(dctx,context);    if ("Y".equals(esc.entitySync.get("forPullOnly"))) {      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"EntityExtCannotDoEntitySyncPush",locale));    }    esc.runPushStartRunning();    esc.setSplitStartTime();    while (esc.hasMoreTimeToSync()) {      esc.totalSplits++;      ArrayList<GenericValue> valuesToCreate=esc.assembleValuesToCreate();      ArrayList<GenericValue> valuesToStore=esc.assembleValuesToStore();      List<GenericEntity> keysToRemove=esc.assembleKeysToRemove();      esc.runPushSendData(valuesToCreate,valuesToStore,keysToRemove);      esc.saveResultsReportedFromDataStore();      esc.advanceRunTimes();    }    esc.saveFinalSyncResults();  } catch (  SyncAbortException e) {    return e.returnError(module);  }catch (  SyncErrorException e) {    e.saveSyncErrorInfo(esc);    return e.returnError(module);  }  return ServiceUtil.returnSuccess();}  }
class C{  public void loadingStateChanged(boolean isLoading){  if (mReloadMenuItem != null) {    mReloadMenuItem.getIcon().setLevel(isLoading ? RELOAD_BUTTON_LEVEL_STOP_LOADING : RELOAD_BUTTON_LEVEL_RELOAD);    mReloadMenuItem.setTitle(isLoading ? R.string.accessibility_btn_stop_loading : R.string.accessibility_btn_refresh);  }}  }
class C{  public static final Polygon flip(Polygon polygon,Vector2 axis,Vector2 point){  if (polygon == null)   throw new NullPointerException(Messages.getString("geometry.nullFlipPolygon"));  if (axis == null)   throw new NullPointerException(Messages.getString("geometry.nullFlipAxis"));  if (axis.isZero())   throw new IllegalArgumentException(Messages.getString("geometry.zeroFlipAxis"));  if (point == null)   point=polygon.getCenter();  axis.normalize();  Vector2[] pv=polygon.getVertices();  Vector2[] nv=new Vector2[pv.length];  for (int i=0; i < pv.length; i++) {    Vector2 v0=pv[i];    Vector2 v1=v0.difference(point);    double proj=v1.dot(axis);    Vector2 vp=axis.product(proj);    Vector2 rv=vp.add(vp.x - v1.x,vp.y - v1.y);    nv[i]=rv.add(point);  }  if (Geometry.getWinding(nv) < 0.0) {    Geometry.reverseWinding(nv);  }  return new Polygon(nv);}  }
class C{  public static ODEStateAndDerivative taylor(final EquationsMapper equationsMapper,final ODEStateAndDerivative reference,final double time,final double stepSize,final double[] scaled,final Array2DRowRealMatrix nordsieck){  final double x=time - reference.getTime();  final double normalizedAbscissa=x / stepSize;  double[] stateVariation=new double[scaled.length];  double[] estimatedDerivatives=new double[scaled.length];  final double[][] nData=nordsieck.getDataRef();  for (int i=nData.length - 1; i >= 0; --i) {    final int order=i + 2;    final double[] nDataI=nData[i];    final double power=FastMath.pow(normalizedAbscissa,order);    for (int j=0; j < nDataI.length; ++j) {      final double d=nDataI[j] * power;      stateVariation[j]=stateVariation[j] + d;      estimatedDerivatives[j]=estimatedDerivatives[j] + d * order;    }  }  double[] estimatedState=reference.getCompleteState();  for (int j=0; j < stateVariation.length; ++j) {    stateVariation[j]=stateVariation[j] + scaled[j] * normalizedAbscissa;    estimatedState[j]=estimatedState[j] + stateVariation[j];    estimatedDerivatives[j]=(estimatedDerivatives[j] + scaled[j] * normalizedAbscissa) / x;  }  return equationsMapper.mapStateAndDerivative(time,estimatedState,estimatedDerivatives);}  }
class C{  protected static String[] splitStringByDelimiterPoints(String sStr,Integer[] iRes){  ArrayList alRes=new ArrayList();  for (int iCnt=0; iCnt < iRes.length; iCnt++) {    if (iCnt == 0)     alRes.add(sStr.substring(0,iRes[iCnt])); else     alRes.add(sStr.substring(iRes[iCnt - 1],iRes[iCnt]));  }  if (iRes.length > 0)   alRes.add(sStr.substring(iRes[iRes.length - 1])); else   alRes.add(sStr);  String[] sRes=new String[alRes.size()];  alRes.toArray(sRes);  return sRes;}  }
class C{  @Override public void onUpdateEquipmentConfiguration(final IEquipmentConfiguration equipmentConfiguration,final IEquipmentConfiguration oldEquipmentConfiguration,final ChangeReport changeReport){  if (EquipmentConfigurationChangerHelper.hasAddressChanged(equipmentConfiguration,oldEquipmentConfiguration)) {    changeReport.appendError("Address changes might affect " + "equipment specific behavior. But no changer is " + "registered. You have to restart the DAQ to apply "+ "the changes.");    changeReport.setState(CHANGE_STATE.REBOOT);  }  if (EquipmentConfigurationChangerHelper.hasAliveTagIntervalChanged(equipmentConfiguration,oldEquipmentConfiguration)) {    changeReport.appendError("Equipment alive tag interval changes might affect " + "equipment specific behavior. But no changer is " + "registered. You have to restart the DAQ to apply "+ "the changes.");    changeReport.setState(CHANGE_STATE.REBOOT);  }  if (!changeReport.getState().equals(CHANGE_STATE.REBOOT)) {    changeReport.setState(CHANGE_STATE.SUCCESS);  }}  }
class C{  public String toString(){  return (id + " @" + when+ " = "+ getValue());}  }
class C{  public FriendsGetOnlineQuery order(FriendsGetOnlineOrder value){  return unsafeParam("order",value);}  }
class C{  public DistributedLogClientBuilder maxRedirects(int redirects){  DistributedLogClientBuilder newBuilder=newBuilder(this);  newBuilder._clientConfig.setMaxRedirects(redirects);  return newBuilder;}  }
class C{  private int accentProminenceRule(Element segment){  int returnValue=100;  Element syllable=getSyllable(segment);  if (hasAccent(syllable)) {    Element prosody=(Element)DomUtils.getAncestor(segment,MaryXML.PROSODY);    if (prosody != null) {      ProsodicSettings settings=(ProsodicSettings)prosodyMap.get(prosody);      if (settings != null) {        int accentProminence=settings.accentProminence();        if (accentProminence != 100) {          if (isInNucleus(segment)) {            returnValue=accentProminence;          }          String vq=segment.getAttribute("vq");          if (accentProminence >= 150) {            if (vq.equals("soft") || vq.equals("modal") || vq.equals(""))             vq="loud";          } else           if (accentProminence >= 125) {            if (vq.equals("soft")) {              vq="modal";            } else             if (vq.equals("modal") || vq.equals("")) {              vq="loud";            }          }          if (!vq.equals(segment.getAttribute("vq"))) {            segment.setAttribute("vq",vq);          }        }      }    }  }  return returnValue;}  }
class C{  public Location add(Location vec){  if (vec == null || vec.getWorld() != getWorld()) {    throw new IllegalArgumentException("Cannot add Locations of differing worlds");  }  x+=vec.x;  y+=vec.y;  z+=vec.z;  return this;}  }
class C{  @VisibleForTesting public static void configure(ServiceControlConfigBounds bounds){  ServiceControlConfigValidator.bounds=bounds;}  }
class C{  public boolean isValidTree(){  int nnodes=getNodeCount();  int nedges=getEdgeCount();  if (nnodes != nedges + 1) {    s_logger.warning("Node/edge counts incorrect.");    return false;  }  int root=getRootRow();  IntIterator nodes=getNodeTable().rows();  while (nodes.hasNext()) {    int n=nodes.nextInt();    int id=getInDegree(n);    if (n == root && id > 0) {      s_logger.warning("Root node has a parent.");      return false;    } else     if (id > 1) {      s_logger.warning("Node " + n + " has multiple parents.");      return false;    }  }  int[] counts=new int[]{0,nedges};  isValidHelper(getRootRow(),counts);  if (counts[0] > nedges) {    s_logger.warning("The tree has non-tree edges in it.");    return false;  }  if (counts[0] < nedges) {    s_logger.warning("Not all of the tree was visited. " + "Only " + counts[0] + "/"+ nedges+ " edges encountered");    return false;  }  return true;}  }
class C{  public ComplexFormat(){  this.imaginaryCharacter=DEFAULT_IMAGINARY_CHARACTER;  this.imaginaryFormat=CompositeFormat.getDefaultNumberFormat();  this.realFormat=imaginaryFormat;}  }
class C{  public static IntellijLintClient forEditor(@NotNull State state){  return new EditorLintClient(state);}  }
class C{  public Html remove(String q){  if (d != null) {    d.select(q).remove();  }  return this;}  }
class C{  public static void toPdf(List<Grid> grids,OutputStream out){  if (hasNonEmptyGrid(grids)) {    Document document=openDocument(out);    for (    Grid grid : grids) {      toPdfInternal(grid,document,40F);    }    addPdfTimestamp(document,false);    closeDocument(document);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_InvulnerableWing_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1201220,skillcaster,skillname);}  }
class C{  private boolean isText(Object content){  return content instanceof String;}  }
class C{  public String compile(Map<String,Object> context){  return "{" + attribsExpr.expandString(context) + "}";}  }
class C{  private void complain() throws ParseException {  throw new ParseException("unable to parse line: " + line,0);}  }
class C{  static java.lang.reflect.Type[] resolveActualTypeArguments(final TypeVariable<?>[] vars,final java.lang.reflect.Type[] typeArguments,final Type<?> reference){  java.lang.reflect.Type[] actualTypeArguments=new java.lang.reflect.Type[typeArguments.length];  java.lang.reflect.Type[] defaultTypeArguments=new java.lang.reflect.Type[typeArguments.length];  boolean hasUnresolvedTypes=false;  Type<?> currentReference=reference;  do {    hasUnresolvedTypes=false;    for (int i=0, len=actualTypeArguments.length; i < len; ++i) {      java.lang.reflect.Type typeArg=typeArguments[i];      TypeVariable<?> var=vars[i];      if (typeArg instanceof ParameterizedType || typeArg instanceof Class) {        actualTypeArguments[i]=TypeFactory.valueOf(typeArg);      } else {        if (typeArg instanceof TypeVariable) {          var=(TypeVariable<?>)typeArg;        }        Type<?> typeFromReference=(Type<?>)currentReference.getTypeByVariable(var);        if (typeFromReference != null && typeArg.equals(var)) {          if (actualTypeArguments[i] == null || (actualTypeArguments[i] instanceof Type && ((Type<?>)actualTypeArguments[i]).isAssignableFrom(typeFromReference))) {            actualTypeArguments[i]=typeFromReference;          }        } else {          Type<?> typeFromArgument=TypeFactory.valueOf(typeArg);          try {            defaultTypeArguments[i]=getMostSpecificType(typeFromReference,typeFromArgument,IGNORED_TYPES);          } catch (          IllegalArgumentException e) {            defaultTypeArguments[i]=typeFromArgument;          }          hasUnresolvedTypes=true;        }      }    }    if (hasUnresolvedTypes) {      currentReference=currentReference.getSuperType();    }  } while (hasUnresolvedTypes && !currentReference.equals(TypeFactory.TYPE_OF_OBJECT));  for (int i=0, len=actualTypeArguments.length; i < len; ++i) {    if (actualTypeArguments[i] == null) {      actualTypeArguments[i]=defaultTypeArguments[i];    }  }  return actualTypeArguments;}  }
class C{  public boolean isSelected(){  ClusterViewer viewer=getViewer();  return viewer.getEcologicalIndex().equalsIgnoreCase(CalculateEcologicalIndices.GOODALL_NORMALIZED);}  }
class C{  @Override public int compareTo(BrokerItem o){  return itemUniqueId > o.getItemUniqueId() ? 1 : -1;}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  AlignmentViewer alignmentViewer=(AlignmentViewer)getViewer();  int nSequences=alignmentViewer.getAlignment().getNumberOfSequences();  int step=1;  if (nSequences > 10000 && nSequences <= 20000)   step=2; else   if (nSequences > 20000 && nSequences <= 30000)   step=4; else   if (nSequences > 30000)   step=6;  execute("chart wordCount kmer=25 step=" + step + " mindepth=10;");}  }
class C{  @Override public void printStackTrace(PrintStream ps){  super.printStackTrace(ps);  if (nested != null) {    nested.printStackTrace(ps);  }}  }
class C{  @Deployment public void IGNORE_testSimpleSubProcessWithConcurrentTimer(){  ProcessInstance pi=runtimeService.startProcessInstanceByKey("simpleSubProcessWithConcurrentTimer");  TaskQuery taskQuery=taskService.createTaskQuery().processInstanceId(pi.getId()).orderByTaskName().asc();  Task subProcessTask=taskQuery.singleResult();  assertEquals("Task in subprocess",subProcessTask.getName());  Job job=managementService.createJobQuery().singleResult();  managementService.executeJob(job.getId());  List<Task> tasksAfterTimer=taskQuery.list();  assertEquals(2,tasksAfterTimer.size());  Task taskAfterTimer1=tasksAfterTimer.get(0);  Task taskAfterTimer2=tasksAfterTimer.get(1);  assertEquals("Task after timer 1",taskAfterTimer1.getName());  assertEquals("Task after timer 2",taskAfterTimer2.getName());  taskService.complete(taskAfterTimer1.getId());  taskService.complete(taskAfterTimer2.getId());  assertProcessEnded(pi.getId());}  }
class C{  public void init$Children(){  children=new ASTNode[1];}  }
class C{  public static int indicator(final int x){  return (x >= 0) ? 1 : -1;}  }
class C{  public Builder updateWhenIdle(Boolean updateWhenIdle){  this.updateWhenIdle=updateWhenIdle;  return this;}  }
class C{  public static void main(String args[]){  if (args.length < 2) {    System.out.println("Error: Must have 2 parameters, one is config filename, " + "the other is the local filename to upload");    return;  }  System.out.println("java.version=" + System.getProperty("java.version"));  String conf_filename=args[0];  String local_filename=args[1];  try {    ClientGlobal.init(conf_filename);    System.out.println("network_timeout=" + ClientGlobal.g_network_timeout + "ms");    System.out.println("charset=" + ClientGlobal.g_charset);    long startTime;    String group_name;    String remote_filename;    ServerInfo[] servers;    TrackerClient tracker=new TrackerClient();    TrackerServer trackerServer=tracker.getConnection();    StorageServer storageServer=null;    StorageClient client=new StorageClient(trackerServer,storageServer);    byte[] file_buff;    NameValuePair[] meta_list;    String[] results;    String master_filename;    String prefix_name;    String file_ext_name;    String generated_slave_filename;    int errno;    meta_list=new NameValuePair[4];    meta_list[0]=new NameValuePair("width","800");    meta_list[1]=new NameValuePair("heigth","600");    meta_list[2]=new NameValuePair("bgcolor","#FFFFFF");    meta_list[3]=new NameValuePair("author","Mike");    file_buff="this is a test".getBytes(ClientGlobal.g_charset);    System.out.println("file length: " + file_buff.length);    group_name=null;    StorageServer[] storageServers=tracker.getStoreStorages(trackerServer,group_name);    if (storageServers == null) {      System.err.println("get store storage servers fail, error code: " + tracker.getErrorCode());    } else {      System.err.println("store storage servers count: " + storageServers.length);      for (int k=0; k < storageServers.length; k++) {        System.err.println((k + 1) + ". " + storageServers[k].getInetSocketAddress().getAddress().getHostAddress()+ ":"+ storageServers[k].getInetSocketAddress().getPort());      }      System.err.println("");    }    startTime=System.currentTimeMillis();    results=client.upload_file(file_buff,"txt",meta_list);    System.out.println("upload_file time used: " + (System.currentTimeMillis() - startTime) + " ms");    if (results == null) {      System.err.println("upload file fail, error code: " + client.getErrorCode());      return;    } else {      group_name=results[0];      remote_filename=results[1];      System.err.println("group_name: " + group_name + ", remote_filename: "+ remote_filename);      System.err.println(client.get_file_info(group_name,remote_filename));      servers=tracker.getFetchStorages(trackerServer,group_name,remote_filename);      if (servers == null) {        System.err.println("get storage servers fail, error code: " + tracker.getErrorCode());      } else {        System.err.println("storage servers count: " + servers.length);        for (int k=0; k < servers.length; k++) {          System.err.println((k + 1) + ". " + servers[k].getIpAddr()+ ":"+ servers[k].getPort());        }        System.err.println("");      }      meta_list=new NameValuePair[4];      meta_list[0]=new NameValuePair("width","1024");      meta_list[1]=new NameValuePair("heigth","768");      meta_list[2]=new NameValuePair("bgcolor","#000000");      meta_list[3]=new NameValuePair("title","Untitle");      startTime=System.currentTimeMillis();      errno=client.set_metadata(group_name,remote_filename,meta_list,ProtoCommon.STORAGE_SET_METADATA_FLAG_MERGE);      System.out.println("set_metadata time used: " + (System.currentTimeMillis() - startTime) + " ms");      if (errno == 0) {        System.err.println("set_metadata success");      } else {        System.err.println("set_metadata fail, error no: " + errno);      }      meta_list=client.get_metadata(group_name,remote_filename);      if (meta_list != null) {        for (int i=0; i < meta_list.length; i++) {          System.out.println(meta_list[i].getName() + " " + meta_list[i].getValue());        }      }      startTime=System.currentTimeMillis();      file_buff=client.download_file(group_name,remote_filename);      System.out.println("download_file time used: " + (System.currentTimeMillis() - startTime) + " ms");      if (file_buff != null) {        System.out.println("file length:" + file_buff.length);        System.out.println((new String(file_buff)));      }      file_buff="this is a slave buff".getBytes(ClientGlobal.g_charset);      master_filename=remote_filename;      prefix_name="-part1";      file_ext_name="txt";      startTime=System.currentTimeMillis();      results=client.upload_file(group_name,master_filename,prefix_name,file_buff,file_ext_name,meta_list);      System.out.println("upload_file time used: " + (System.currentTimeMillis() - startTime) + " ms");      if (results != null) {        System.err.println("slave file group_name: " + results[0] + ", remote_filename: "+ results[1]);        generated_slave_filename=ProtoCommon.genSlaveFilename(master_filename,prefix_name,file_ext_name);        if (!generated_slave_filename.equals(results[1])) {          System.err.println("generated slave file: " + generated_slave_filename + "\n != returned slave file: "+ results[1]);        }        System.err.println(client.get_file_info(results[0],results[1]));      }      startTime=System.currentTimeMillis();      errno=client.delete_file(group_name,remote_filename);      System.out.println("delete_file time used: " + (System.currentTimeMillis() - startTime) + " ms");      if (errno == 0) {        System.err.println("Delete file success");      } else {        System.err.println("Delete file fail, error no: " + errno);      }    }    results=client.upload_file(local_filename,null,meta_list);    if (results != null) {      String file_id;      int ts;      String token;      String file_url;      InetSocketAddress inetSockAddr;      group_name=results[0];      remote_filename=results[1];      file_id=group_name + StorageClient1.SPLIT_GROUP_NAME_AND_FILENAME_SEPERATOR + remote_filename;      inetSockAddr=trackerServer.getInetSocketAddress();      file_url="http://" + inetSockAddr.getAddress().getHostAddress();      if (ClientGlobal.g_tracker_http_port != 80) {        file_url+=":" + ClientGlobal.g_tracker_http_port;      }      file_url+="/" + file_id;      if (ClientGlobal.g_anti_steal_token) {        ts=(int)(System.currentTimeMillis() / 1000);        token=ProtoCommon.getToken(file_id,ts,ClientGlobal.g_secret_key);        file_url+="?token=" + token + "&ts="+ ts;      }      System.err.println("group_name: " + group_name + ", remote_filename: "+ remote_filename);      System.err.println(client.get_file_info(group_name,remote_filename));      System.err.println("file url: " + file_url);      errno=client.download_file(group_name,remote_filename,0,0,"c:\\" + remote_filename.replaceAll("/","_"));      if (errno == 0) {        System.err.println("Download file success");      } else {        System.err.println("Download file fail, error no: " + errno);      }      errno=client.download_file(group_name,remote_filename,0,0,new DownloadFileWriter("c:\\" + remote_filename.replaceAll("/","-")));      if (errno == 0) {        System.err.println("Download file success");      } else {        System.err.println("Download file fail, error no: " + errno);      }      master_filename=remote_filename;      prefix_name="-part2";      file_ext_name=null;      startTime=System.currentTimeMillis();      results=client.upload_file(group_name,master_filename,prefix_name,local_filename,null,meta_list);      System.out.println("upload_file time used: " + (System.currentTimeMillis() - startTime) + " ms");      if (results != null) {        System.err.println("slave file group_name: " + results[0] + ", remote_filename: "+ results[1]);        generated_slave_filename=ProtoCommon.genSlaveFilename(master_filename,prefix_name,file_ext_name);        if (!generated_slave_filename.equals(results[1])) {          System.err.println("generated slave file: " + generated_slave_filename + "\n != returned slave file: "+ results[1]);        }        System.err.println(client.get_file_info(results[0],results[1]));      }    }    File f;    f=new File(local_filename);    int nPos=local_filename.lastIndexOf('.');    if (nPos > 0 && local_filename.length() - nPos <= ProtoCommon.FDFS_FILE_EXT_NAME_MAX_LEN + 1) {      file_ext_name=local_filename.substring(nPos + 1);    } else {      file_ext_name=null;    }    results=client.upload_file(null,f.length(),new UploadLocalFileSender(local_filename),file_ext_name,meta_list);    if (results != null) {      group_name=results[0];      remote_filename=results[1];      System.out.println("group name: " + group_name + ", remote filename: "+ remote_filename);      System.out.println(client.get_file_info(group_name,remote_filename));      master_filename=remote_filename;      prefix_name="-part3";      startTime=System.currentTimeMillis();      results=client.upload_file(group_name,master_filename,prefix_name,f.length(),new UploadLocalFileSender(local_filename),file_ext_name,meta_list);      System.out.println("upload_file time used: " + (System.currentTimeMillis() - startTime) + " ms");      if (results != null) {        System.err.println("slave file group_name: " + results[0] + ", remote_filename: "+ results[1]);        generated_slave_filename=ProtoCommon.genSlaveFilename(master_filename,prefix_name,file_ext_name);        if (!generated_slave_filename.equals(results[1])) {          System.err.println("generated slave file: " + generated_slave_filename + "\n != returned slave file: "+ results[1]);        }        System.err.println(client.get_file_info(results[0],results[1]));      }    } else {      System.err.println("Upload file fail, error no: " + errno);    }    storageServer=tracker.getFetchStorage(trackerServer,group_name,remote_filename);    if (storageServer == null) {      System.out.println("getFetchStorage fail, errno code: " + tracker.getErrorCode());      return;    }    System.out.println("active test to storage server: " + ProtoCommon.activeTest(storageServer.getSocket()));    storageServer.close();    System.out.println("active test to tracker server: " + ProtoCommon.activeTest(trackerServer.getSocket()));    trackerServer.close();  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  private void adaptProsody(Element prosodyRule,Element syllable){  Element phrase=(Element)DomUtils.getAncestor(syllable,MaryXML.PHRASE);  Element first=(Element)DomUtils.getAncestor(syllable,MaryXML.TOKEN);  if (DomUtils.hasAncestor(first,MaryXML.MTU)) {    first=(Element)DomUtils.getHighestLevelAncestor(first,MaryXML.MTU);  }  Element lastSyl=DomUtils.getLastElementByTagName(phrase,MaryXML.SYLLABLE);  Element last=(Element)DomUtils.getAncestor(lastSyl,MaryXML.TOKEN);  if (DomUtils.hasAncestor(last,MaryXML.MTU)) {    last=(Element)DomUtils.getHighestLevelAncestor(last,MaryXML.MTU);  }  Element newProsody=DomUtils.encloseNodesWithNewElement(first,last,MaryXML.PROSODY);  newProsody.setAttribute("range",prosodyRule.getAttribute("range"));  determineProsodicSettings(newProsody);  determineProsodyTopBaseConf(newProsody);  TreeWalker tw=((DocumentTraversal)newProsody.getOwnerDocument()).createTreeWalker(newProsody,NodeFilter.SHOW_ELEMENT,new NameNodeFilter(MaryXML.PROSODY),false);  Element p=null;  while ((p=(Element)tw.nextNode()) != null) {    determineProsodyTopBaseConf(p);  }}  }
class C{  public void close(){  Log.d("MusicPlaybackService","MusicMediaPlayerGlue closed!");  mContext.unbindService(mPlaybackServiceConnection);}  }
class C{  public static void executeGraph(LoadModel loadModel,String storeLocation,String kettleHomePath) throws Exception {  System.setProperty("KETTLE_HOME",kettleHomePath);  new File(storeLocation).mkdirs();  String outPutLoc=storeLocation + "/etl";  String databaseName=loadModel.getDatabaseName();  String tableName=loadModel.getTableName();  String tempLocationKey=databaseName + '_' + tableName+ "_1";  CarbonProperties.getInstance().addProperty(tempLocationKey,storeLocation);  CarbonProperties.getInstance().addProperty("store_output_location",outPutLoc);  CarbonProperties.getInstance().addProperty("send.signal.load","false");  CarbonProperties.getInstance().addProperty("carbon.is.columnar.storage","true");  CarbonProperties.getInstance().addProperty("carbon.dimension.split.value.in.columnar","1");  CarbonProperties.getInstance().addProperty("carbon.is.fullyfilled.bits","true");  CarbonProperties.getInstance().addProperty("is.int.based.indexer","true");  CarbonProperties.getInstance().addProperty("aggregate.columnar.keyblock","true");  CarbonProperties.getInstance().addProperty("high.cardinality.value","100000");  CarbonProperties.getInstance().addProperty("is.compressed.keyblock","false");  CarbonProperties.getInstance().addProperty("carbon.leaf.node.size","120000");  String fileNamePrefix="";  String graphPath=outPutLoc + File.separator + loadModel.getDatabaseName()+ File.separator+ tableName+ File.separator+ 0+ File.separator+ 1+ File.separator+ tableName+ ".ktr";  File path=new File(graphPath);  if (path.exists()) {    path.delete();  }  DataProcessTaskStatus dataProcessTaskStatus=new DataProcessTaskStatus(databaseName,tableName);  dataProcessTaskStatus.setCsvFilePath(loadModel.getFactFilePath());  SchemaInfo info=new SchemaInfo();  BlockDetails blockDetails=new BlockDetails(loadModel.getFactFilePath(),0,new File(loadModel.getFactFilePath()).length(),new String[]{"localhost"});  GraphGenerator.blockInfo.put("qwqwq",new BlockDetails[]{blockDetails});  dataProcessTaskStatus.setBlocksID("qwqwq");  dataProcessTaskStatus.setEscapeCharacter("\\");  dataProcessTaskStatus.setQuoteCharacter("\"");  dataProcessTaskStatus.setCommentCharacter("#");  info.setDatabaseName(databaseName);  info.setTableName(tableName);  info.setSerializationNullFormat(TableOptionConstant.SERIALIZATION_NULL_FORMAT.getName() + "," + "\\N");  info.setBadRecordsLoggerEnable(TableOptionConstant.BAD_RECORDS_LOGGER_ENABLE.getName() + "," + "false");  info.setBadRecordsLoggerAction(TableOptionConstant.BAD_RECORDS_ACTION.getName() + "," + "force");  generateGraph(dataProcessTaskStatus,info,loadModel.getTableName(),"0",loadModel.getSchema(),null,loadModel.getLoadMetadataDetails());  DataGraphExecuter graphExecuter=new DataGraphExecuter(dataProcessTaskStatus);  graphExecuter.executeGraph(graphPath,new ArrayList<String>(CarbonCommonConstants.CONSTANT_SIZE_TEN),info,"0",loadModel.getSchema());  writeLoadMetadata(loadModel.schema,loadModel.getTableName(),loadModel.getTableName(),new ArrayList<LoadMetadataDetails>());  String segLocation=storeLocation + "/" + databaseName+ "/"+ tableName+ "/Fact/Part0/Segment_0";  File file=new File(segLocation);  File factFile=null;  File[] folderList=file.listFiles();  File folder=null;  for (int i=0; i < folderList.length; i++) {    if (folderList[i].isDirectory()) {      folder=folderList[i];    }  }  if (folder.isDirectory()) {    File[] files=folder.listFiles();    for (int i=0; i < files.length; i++) {      if (!files[i].isDirectory() && files[i].getName().startsWith("part")) {        factFile=files[i];        break;      }    }    factFile.renameTo(new File(segLocation + "/" + factFile.getName()));    CarbonUtil.deleteFoldersAndFiles(folder);  }}  }
class C{  public SegmentMetadataLoader(PhysicalTableDictionary physicalTableDictionary,DimensionDictionary dimensionDictionary,DruidWebService druidWebService,ObjectMapper mapper){  super(SegmentMetadataLoader.class.getSimpleName(),SYSTEM_CONFIG.getLongProperty(DRUID_SEG_LOADER_TIMER_DELAY_KEY,0),SYSTEM_CONFIG.getLongProperty(DRUID_SEG_LOADER_TIMER_DURATION_KEY,TimeUnit.MILLISECONDS.toMillis(60000)));  this.physicalTableDictionary=physicalTableDictionary;  this.dimensionDictionary=dimensionDictionary;  this.druidWebService=druidWebService;  this.mapper=mapper;  this.errorCallback=getErrorCallback();  this.failureCallback=getFailureCallback();  lastRunTimestamp=new AtomicReference<>();}  }
class C{  public PolyArea(ZoneName zoneName,int worldId,Collection<Point2D> points,float zMin,float zMax){  this(zoneName,worldId,points.toArray(new Point2D[points.size()]),zMin,zMax);}  }
class C{  public void addMainArgs(String... args){  for (  String a : args)   _mainArgs.add(a);}  }
class C{  public static String hexToStringNoException(final String data){  try {    return ConversionUtils.arrayToString(Hex.decodeHex(data.toCharArray()));  } catch (  DecoderException e) {    return "[invalid hex]";  }}  }
class C{  public void refreshListener(String serverKey) throws GenericServiceException {  GenericMessageListener listener=listeners.get(serverKey);  if (listener == null)   throw new GenericServiceException("No listener found with that serverKey.");  listener.refresh();}  }
class C{  @MainThread public static void onResume(@NonNull final String componentId,@NonNull final Object target){  checkMainThread();  activeComponentIdsToTargets.put(componentId,target);  HashMap<String,Thinr> instances=componentIdToThinrInstances.get(componentId);  if (instances != null) {    for (    Map.Entry<String,Thinr> entry : instances.entrySet()) {      if (entry.getValue().suspended) {        entry.getValue().suspended=false;        entry.getValue().next();      }    }  }}  }
class C{  public PartialWeakUniqueIndex(String indexName,Extractor[] extractors){  this.extractors=extractors;  hashStrategy=ExtractorBasedHashStrategy.create(this.extractors);  this.loadFactor=DEFAULT_LOAD_FACTOR;  threshold=(int)(DEFAULT_INITIAL_CAPACITY * DEFAULT_LOAD_FACTOR);  table=new Entry[DEFAULT_INITIAL_CAPACITY];}  }
class C{  protected Class<?> findClass(String maybeMangledName) throws ClassNotFoundException {  if (DEBUG) {    G.v().out.println("AltClassLoader.findClass(" + maybeMangledName + ')');  }  Class<?> result=alreadyFound.get(maybeMangledName);  if (result != null) {    return result;  }  String name=mangledNameToName.get(maybeMangledName);  if (name == null) {    name=maybeMangledName;  }  String pathTail="/" + name.replace('.',File.separatorChar) + ".class";  for (  String element : locations) {    String path=element + pathTail;    try {      FileInputStream stream=new FileInputStream(path);      byte[] classBytes=new byte[stream.available()];      stream.read(classBytes);      replaceAltClassNames(classBytes);      result=defineClass(maybeMangledName,classBytes,0,classBytes.length);      alreadyFound.put(maybeMangledName,result);      stream.close();      return result;    } catch (    java.io.IOException e) {    }catch (    ClassFormatError e) {      if (DEBUG) {        e.printStackTrace(G.v().out);      }    }  }  throw new ClassNotFoundException("Unable to find class" + name + " in alternate classpath");}  }
class C{  private void continueSet(Channel channel,SessionStatus state,byte[] remainder,ChannelHandlerContext channelHandlerContext){  state.cmd.element.setData(remainder);  Channels.fireMessageReceived(channelHandlerContext,state.cmd,channelHandlerContext.getChannel().getRemoteAddress());}  }
class C{  void displayText(String text){  sdf=new SimpleDateFormat("yyyy-MM-dd_HH-mm-ss");  dt=new Date();  textArea.appendText(sdf.format(dt) + ">>" + text+ "\n");}  }
class C{  public DefaultHibernateSpaceDataSourceConfigurer initialLoadChunkSize(int initalLoadChunkSize){  this.initialLoadChunkSize=initalLoadChunkSize;  return this;}  }
class C{  public ClosedException(){  super("Cursor has already been closed");}  }
class C{  @Override public Map<String,ValidationResult.Option> askUser(List<ValidationResult> validationResults) throws OperationCancelledException {  try {    int pid=Kernel32.INSTANCE.GetCurrentProcessId();    for (    ValidationResult result : validationResults) {      for (      NativeFileManager.Process process : NativeFileManager.getProcessesUsing(result.toFile)) {        if (process.pid == pid) {          throw new PatchRunner.RestartRequiredException();        }      }    }  } catch (  PatchRunner.RestartRequiredException e) {    throw e;  }catch (  Throwable e) {  }  return super.askUser(validationResults);}  }
class C{  public AsyncHttpClient(int httpPort){  this(false,httpPort,443);}  }
class C{  @Override public String toString(){  return "Flavor{" + "mName='" + mName + '\''+ ", mStyleResource="+ mStyleResource+ ", mDialogStyleResource="+ mDialogStyleResource+ ", mIsDayNight="+ mIsDayNight+ '}';}  }
class C{  public void changeDirectoryUp() throws IllegalStateException, IOException, FTPIllegalReplyException, FTPException {synchronized (lock) {    if (!connected) {      throw new IllegalStateException("Client not connected");    }    if (!authenticated) {      throw new IllegalStateException("Client not authenticated");    }    communication.sendFTPCommand("CDUP");    FTPReply r=communication.readFTPReply();    touchAutoNoopTimer();    if (!r.isSuccessCode()) {      throw new FTPException(r);    }  }}  }
class C{  private void onPause(){  mSubscription.unsubscribe();  mDispatchedObservablesHistory.clear();}  }
class C{  protected void propagate(D sourceVal,N target,D targetVal,EdgeFunction<V> f,N relatedCallSite,boolean isUnbalancedReturn){  EdgeFunction<V> jumpFnE;  EdgeFunction<V> fPrime;  boolean newFunction;synchronized (jumpFn) {    jumpFnE=jumpFn.reverseLookup(target,targetVal).get(sourceVal);    if (jumpFnE == null)     jumpFnE=allTop;    fPrime=jumpFnE.joinWith(f);    newFunction=!fPrime.equalTo(jumpFnE);    if (newFunction) {      jumpFn.addFunction(sourceVal,target,targetVal,fPrime);    }  }  if (newFunction) {    PathEdge<N,D> edge=new PathEdge<N,D>(sourceVal,target,targetVal);    scheduleEdgeProcessing(edge);    if (targetVal != zeroValue) {      logger.trace("{} - EDGE: <{},{}> -> <{},{}> - {}",getDebugName(),icfg.getMethodOf(target),sourceVal,target,targetVal,fPrime);    }  }}  }
class C{  public MultiDimensionMismatchException(Localizable specific,Integer[] wrong,Integer[] expected){  super(specific,wrong,expected);  this.wrong=wrong.clone();  this.expected=expected.clone();}  }
class C{  public void goToPreviousBackStack() throws NavigatorException {  FragmentManager fragmentManager=((FragmentActivity)mContextReference.getContext()).getSupportFragmentManager();  if (canGoBack(fragmentManager)) {    fragmentManager.popBackStack();  } else {    throw new NavigatorException("You don't go back to this point");  }}  }
class C{  public Object clone(){  Body b=Shimple.v().newBody(getMethod());  b.importBodyContentsFrom(this);  return b;}  }
class C{  public SnapshotDescriptor(X snapshot,String description,Image icon){  super(snapshot,resolveSnapshotName(snapshot),description,icon,resolvePosition(snapshot,POSITION_AT_THE_END,snapshot.isInSnapshot()),EXPAND_NEVER);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_AlwaysParry_ME_TO_B(String skillcaster,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200482,skillcaster,skilltarget,skillname);}  }
class C{  @Override public int hashCode(){  if (isNaN()) {    return 642;  }  return 643 * (164 * MathUtils.hash(x) + 3 * MathUtils.hash(y) + MathUtils.hash(z));}  }
class C{  public Location subtract(double x,double y,double z){  this.x-=x;  this.y-=y;  this.z-=z;  return this;}  }
class C{  public void output(Node input) throws TransformerException {  output(new DOMSource(input));}  }
class C{  private boolean lollipopAndAbove(){  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP;}  }
class C{  public KernelShutdownHook(){  super("KernelShutdownHook");}  }
class C{  public void resetLegionMember(){  setLegionMember(null);}  }
class C{  public void takeDown(){  if (!Silent)   System.err.println(this.getName() + ":" + "Finished.");}  }
class C{  public static void createRMA6FileFromBLAST(String creator,String blastFile,BlastFileFormat format,String queryFile,String rma6FileName,boolean useCompression,Document doc,int maxMatchesPerRead,boolean hasMagnitudes,ProgressListener progressListener) throws IOException, CanceledException {  final RMA6FromBlastCreator rma6Creator=new RMA6FromBlastCreator(creator,format,doc.getBlastMode(),new String[]{blastFile},new String[]{queryFile},rma6FileName,useCompression,doc,maxMatchesPerRead,hasMagnitudes);  rma6Creator.parseFiles(progressListener);}  }
class C{  public static void wrap(ConstraintWidgetContainer root){  ArrayList<ConstraintWidget> widgets=root.getChildren();  Rectangle all=ScoutArrange.getBoundingBox(widgets);  all.x-=sMargin;  all.y-=sMargin;  all.width+=sMargin * 2;  all.height+=sMargin * 2;  for (  ConstraintWidget widget : widgets) {    widget.setX(widget.getX() - all.x);    widget.setY(widget.getY() - all.y);  }  root.setHorizontalDimensionBehaviour(ConstraintWidget.DimensionBehaviour.FIXED);  root.setVerticalDimensionBehaviour(ConstraintWidget.DimensionBehaviour.FIXED);  root.setWidth(all.width);  root.setHeight(all.height);}  }
class C{  public boolean isOrderingAsAdded(){  return mOrderingAsAdded;}  }
class C{  public PhotosSaveQuery save(UserActor actor){  return new PhotosSaveQuery(getClient(),actor);}  }
class C{  private void loadSpecificFields(OpenJPAStateManager sm,BitSet fields,final SpaceTypeInfo typeInfo){  for (  FieldMetaData fmd : sm.getMetaData().getFields()) {    if (fields.get(fmd.getIndex())) {      Object instance=sm.getManagedInstance();      ((PersistenceCapable)instance).pcReplaceStateManager(null);      Object value=typeInfo.getProperty(fmd.getName()).getValue(sm.getManagedInstance());      ((PersistenceCapable)instance).pcReplaceStateManager(sm);      if (fmd.getAssociationType() == FieldMetaData.ONE_TO_MANY) {        loadOneToManyObjects(fmd,sm,value);      } else       if (fmd.getAssociationType() == FieldMetaData.ONE_TO_ONE) {        loadOneToOneObject(fmd,sm,value);      } else       if (fmd.isEmbeddedPC()) {        loadEmbeddedObject(fmd,sm,value);      }    }  }}  }
class C{  public short putIfAbsent(K key,short value){  int index=insertionIndex(key);  if (index < 0)   return _values[-index - 1];  return doPut(key,value,index);}  }
class C{  public static long nowInNanos(){  return System.nanoTime();}  }
class C{  public AWSIotMessage(String topic,AWSIotQos qos){  this.topic=topic;  this.qos=qos;}  }
class C{  public static String diagPrefixForLint(String aspectName,String ruleName){  return String.format("(lint) %s-%s: ",aspectName,ruleName);}  }
class C{  public int degree(){  return coefficients.length - 1;}  }
class C{  public GammaDistribution(final double shape,final double scale,final double inverseCumAccuracy) throws MathIllegalArgumentException {  super(inverseCumAccuracy);  if (shape <= 0) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.SHAPE,shape);  }  if (scale <= 0) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.SCALE,scale);  }  this.shape=shape;  this.scale=scale;  this.shiftedShape=shape + Gamma.LANCZOS_G + 0.5;  final double aux=FastMath.E / (2.0 * FastMath.PI * shiftedShape);  this.densityPrefactor2=shape * FastMath.sqrt(aux) / Gamma.lanczos(shape);  this.logDensityPrefactor2=FastMath.log(shape) + 0.5 * FastMath.log(aux) - FastMath.log(Gamma.lanczos(shape));  this.densityPrefactor1=this.densityPrefactor2 / scale * FastMath.pow(shiftedShape,-shape) * FastMath.exp(shape + Gamma.LANCZOS_G);  this.logDensityPrefactor1=this.logDensityPrefactor2 - FastMath.log(scale) - FastMath.log(shiftedShape) * shape + shape + Gamma.LANCZOS_G;  this.minY=shape + Gamma.LANCZOS_G - FastMath.log(Double.MAX_VALUE);  this.maxLogY=FastMath.log(Double.MAX_VALUE) / (shape - 1.0);}  }
class C{  public void enableGridDashedLine(float lineLength,float spaceLength,float phase){  mGridDashPathEffect=new DashPathEffect(new float[]{lineLength,spaceLength},phase);}  }
class C{  @Override public ListenableFuture<LeaseRevokeResponse> revoke(long leaseId){  LeaseRevokeRequest leaseRevokeRequest=LeaseRevokeRequest.newBuilder().setID(leaseId).build();  return this.leaseFutureStub.leaseRevoke(leaseRevokeRequest);}  }
class C{  public int available(){  return bufferPool.available();}  }
class C{  private void updateVendorOptionPanels(List<VersionData> vendorOptionVersionsList){  if (veList != null) {    for (    VendorOptionInterface vendorOption : veList) {      boolean displayVendorOption=VendorOptionManager.getInstance().isAllowed(vendorOptionVersionsList,vendorOption.getVendorOption());      BasePanel extensionPanel=vendorOption.getPanel();      if (extensionPanel != null) {        BasePanel parentPanel=(BasePanel)vendorOption.getParentPanel();        if (parentPanel != null) {          parentPanel.removePanel(extensionPanel);          if (displayVendorOption) {            parentPanel.insertPanel(this,extensionPanel,this.optionBox);          }        }      }    }  }}  }
class C{  public PolynomialCluster[] train(int tagetClusterSize,String linkageType){  if (clusterList.size() <= tagetClusterSize) {    throw new IllegalArgumentException("taget cluster size should be less than number of samples");  }  if (!("Short".equals(linkageType) || "Complete".equals(linkageType) || "Average".equals(linkageType))) {    throw new IllegalArgumentException("Only Short, Complete, or Average linkage clustering supported");  }  clustering(tagetClusterSize,linkageType);  PolynomialCluster[] clusters=new PolynomialCluster[tagetClusterSize];  int noClusters=clusterList.size();  assert clusterList.size() == tagetClusterSize : "After clustering, number of clusters and the target cluster size should be same, but now the number of clusters are " + clusterList.size();  for (int i=0; i < tagetClusterSize; i++) {    Cluster cl=clusterList.get(i);    ArrayList<String> dataPoints=cl.getAllDataPoints();    Polynomial[] members=new Polynomial[dataPoints.size()];    for (int j=0; j < dataPoints.size(); j++) {      members[j]=this.polynomials[(new Integer(dataPoints.get(j))).intValue()];    }    Polynomial meanMembers=Polynomial.mean(members);    clusters[i]=new PolynomialCluster(meanMembers,members);  }  return clusters;}  }
class C{  public SkillTreeCursor querySkillTrees(){  QueryHelper qh=new QueryHelper();  qh.Distinct=true;  qh.Table=S.TABLE_SKILL_TREES;  qh.Columns=null;  qh.Selection=null;  qh.SelectionArgs=null;  qh.GroupBy=S.COLUMN_SKILL_TREES_NAME;  qh.Having=null;  qh.OrderBy=null;  qh.Limit=null;  return new SkillTreeCursor(wrapHelper(qh));}  }
class C{  @Override public void requestPhotos(Context c,int page,boolean refresh){  if (!model.isRefreshing() && !model.isLoading() && AuthManager.getInstance().getMe() != null) {    if (refresh) {      model.setRefreshing(true);    } else {      model.setLoading(true);    }switch (model.getPhotosType()) {case PhotosObject.PHOTOS_TYPE_PHOTOS:      requestUserPhotos(c,page,refresh,model.getPhotosOrder());    break;case PhotosObject.PHOTOS_TYPE_LIKES:  requestUserLikes(c,page,refresh,model.getPhotosOrder());break;}}}  }
class C{  public BoardDeleteCommentQuery deleteComment(UserActor actor,int groupId,int topicId,int commentId){  return new BoardDeleteCommentQuery(getClient(),actor,groupId,topicId,commentId);}  }
class C{  public IntFilePutter(File file,long limit) throws IOException {  this(file,limit,false);}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 142) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public static double sumSq(final double[] values,final int begin,final int length) throws MathIllegalArgumentException {  return SUM_OF_SQUARES.evaluate(values,begin,length);}  }
class C{  public static void closeReader(){  try {    if (reader != null) {      reader.close();      reader=null;    }  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  protected void processXMLBaseAttributes(XMLAttributes attributes){  String baseURIValue=attributes.getValue(NamespaceContext.XML_URI,"base");  if (baseURIValue != null) {    try {      String expandedValue=XMLEntityManager.expandSystemId(baseURIValue,fCurrentBaseURI.getExpandedSystemId(),false);      fCurrentBaseURI.setLiteralSystemId(baseURIValue);      fCurrentBaseURI.setBaseSystemId(fCurrentBaseURI.getExpandedSystemId());      fCurrentBaseURI.setExpandedSystemId(expandedValue);      saveBaseURI();    } catch (    MalformedURIException e) {    }  }}  }
class C{  public Builder position(String position){  this.position=position;  return this;}  }
class C{  private void writeFileClean(){  PrintWriter pw;  try {    pw=new PrintWriter(Settings.sServerInfo);    pw.println(" ");    pw.close();  } catch (  FileNotFoundException e) {    System.out.println("serverinfo.jrc do not exist");  }catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public AudioDeleteQuery delete(UserActor actor,int audioId,int ownerId){  return new AudioDeleteQuery(getClient(),actor,audioId,ownerId);}  }
class C{  private PacProxySelector createPacSelector(IEProxyConfig ieProxyConfig){  String pacUrl=null;  if (ieProxyConfig.isAutoDetect()) {    Logger.log(getClass(),LogLevel.TRACE,"Autodetecting script URL.");    DWORD dwAutoDetectFlags=new DWORD(WinHttp.WINHTTP_AUTO_DETECT_TYPE_DHCP | WinHttp.WINHTTP_AUTO_DETECT_TYPE_DNS_A);    LPWSTR ppwszAutoConfigUrl=new LPWSTR();    boolean result=WinHttp.INSTANCE.WinHttpDetectAutoProxyConfigUrl(dwAutoDetectFlags,ppwszAutoConfigUrl);    if (result) {      pacUrl=ppwszAutoConfigUrl.getValue();    }  }  if (pacUrl == null) {    pacUrl=ieProxyConfig.getAutoConfigUrl();  }  if (pacUrl != null && pacUrl.trim().length() > 0) {    Logger.log(getClass(),LogLevel.TRACE,"IE uses script: " + pacUrl);    if (pacUrl.startsWith("file://") && !pacUrl.startsWith("file:///")) {      pacUrl="file:///" + pacUrl.substring(7);    }    return ProxyUtil.buildPacSelectorForUrl(pacUrl);  }  return null;}  }
class C{  public double cond(){  return s[0] / s[Math.min(m,n) - 1];}  }
class C{  public void visitPhpFunctionCall(FunctionReference reference){  if (!this.isPropelDefined()) {    return;  }  final String strName=reference.getName();  final PsiElement[] arrParameters=reference.getParameters();  if (arrParameters.length != 1 || StringUtil.isEmpty(strName) || !strName.equals("count")) {    return;  }  PsiElement objParameter=ExpressionSemanticUtil.getExpressionTroughParenthesis(arrParameters[0]);  if (null == objParameter) {    return;  }  if (objParameter instanceof MethodReference) {    this.inspectSignature(((MethodReference)objParameter).getSignature(),objParameter,".count");  }  if (objParameter instanceof Variable) {    this.inspectSignature(((Variable)objParameter).getSignature(),objParameter,".count");  }}  }
class C{  public static String escape(String url,String encoding) throws UnsupportedEncodingException {  return escape(url,encoding,false);}  }
class C{  public static KeyStore createEmptyKeyStore(){  try {    KeyStore keyStore=KeyStore.getInstance(KeyStore.getDefaultType());    keyStore.load(null);    return keyStore;  } catch (  KeyStoreException|NoSuchAlgorithmException|CertificateException|IOException e) {    throw new RuntimeException("Failed to create empty keystore",e);  }}  }
class C{  public static final void emoteStartReturning(Npc owner){  PacketSendUtility.broadcastPacket(owner,new SM_EMOTION(owner,EmotionType.START_EMOTE2,0,0));  PacketSendUtility.broadcastPacket(owner,new SM_EMOTION(owner,EmotionType.NEUTRALMODE,0,0));}  }
class C{  @Override public void endDTD(Augmentations augs) throws XNIException {  fInDTD=false;  try {    if (fLexicalHandler != null) {      fLexicalHandler.endDTD();    }  } catch (  SAXException e) {    throw new XNIException(e);  }  if (fDeclaredAttrs != null) {    fDeclaredAttrs.clear();  }}  }
class C{  @Override public String whoAmI(){  return ("linear");}  }
class C{  public EvolveOperation(final PokemonModel pokemon){  super(pokemon);}  }
class C{  public boolean supportsCommandClass(CommandClass commandClass){  return supportedCommandClasses.containsKey(commandClass);}  }
class C{  public ConnectionRelativeTime(long time){  if (time < 0) {    throw new IllegalArgumentException("invalid duration");  }  this.time=time;}  }
class C{  public static int readVInt(DataInput stream) throws IOException {  return (int)readVLong(stream);}  }
class C{  public static String makeLinkAuto(ServletContext servletContext,HttpServletRequest request,HttpServletResponse response,String uri,Boolean fullPath,Boolean secure,Boolean encode){  RequestHandler rh=RequestHandler.getRequestHandler(servletContext);  return rh.makeLinkAuto(request,response,uri,null,null,null,null,fullPath,secure,encode);}  }
class C{  public Boolean deleteStock(EntityManager em,String id){  Boolean status=true;  Stock stock=null;  try {    if (!em.getTransaction().isActive()) {      em.getTransaction().begin();    }    stock=em.find(Stock.class,id);    em.remove(stock);    em.getTransaction().commit();  } catch (  Exception e) {    status=false;    logger.error("Error occured during delete of Stock. Detailed info: " + e);  }  return status;}  }
class C{  public void oneShot(View emiter,int numParticles){  oneShot(emiter,numParticles,new LinearInterpolator());}  }
class C{  public void removeNotificationListener(){  Listener=null;}  }
class C{  long segmentSize(){  return cardinality() * recordSize();}  }
class C{  public void updateRenderCameraPose(TangoPoseData cameraPose){  float[] translation=cameraPose.getTranslationAsFloats();  float[] rotation=cameraPose.getRotationAsFloats();  getCurrentCamera().setPosition(translation[0],translation[1],translation[2]);  Quaternion quaternion=new Quaternion(rotation[3],rotation[0],rotation[1],rotation[2]);  getCurrentCamera().setRotation(quaternion.conjugate());}  }
class C{  public float length(){  return (float)waveHeader.getSubChunk2Size() / waveHeader.getByteRate();}  }
class C{  public boolean skipPast(String to) throws JSONException {  boolean b;  char c;  int i;  int j;  int offset=0;  int n=to.length();  char[] circle=new char[n];  for (i=0; i < n; i+=1) {    c=next();    if (c == 0) {      return false;    }    circle[i]=c;  }  for (; ; ) {    j=offset;    b=true;    for (i=0; i < n; i+=1) {      if (circle[j] != to.charAt(i)) {        b=false;        break;      }      j+=1;      if (j >= n) {        j-=n;      }    }    if (b) {      return true;    }    c=next();    if (c == 0) {      return false;    }    circle[offset]=c;    offset+=1;    if (offset >= n) {      offset-=n;    }  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CHAT_ROOM_VOICE_START_NOTIFY(String value0){  return new SM_SYSTEM_MESSAGE(1300953,value0);}  }
class C{  public T distance1(final FieldVector3D<T> v){  final T dx=v.x.subtract(x).abs();  final T dy=v.y.subtract(y).abs();  final T dz=v.z.subtract(z).abs();  return dx.add(dy).add(dz);}  }
class C{  public void removeAll(){  DotCacheAdministrator cache=CacheLocator.getCacheAdministrator();  cache.flushGroup(groupName);}  }
class C{  public GroupsGetMembersQuery(VkApiClient client){  super(client,"groups.getMembers",GetMembersResponse.class);}  }
class C{  public Map<String,AbstractIndex> loadAndGetTaskIdToSegmentsMap(Map<String,List<TableBlockInfo>> segmentToTableBlocksInfos,AbsoluteTableIdentifier absoluteTableIdentifier) throws IndexBuilderException {  Map<String,AbstractIndex> taskIdToTableSegmentMap=new HashMap<String,AbstractIndex>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);  addLockObject(absoluteTableIdentifier);  Iterator<Entry<String,List<TableBlockInfo>>> iteratorOverSegmentBlocksInfos=segmentToTableBlocksInfos.entrySet().iterator();  Map<String,Map<String,AbstractIndex>> tableSegmentMapTemp=addTableSegmentMap(absoluteTableIdentifier);  Map<String,AbstractIndex> taskIdToSegmentIndexMap=null;  String segmentId=null;  String taskId=null;  try {    while (iteratorOverSegmentBlocksInfos.hasNext()) {      Entry<String,List<TableBlockInfo>> next=iteratorOverSegmentBlocksInfos.next();      Map<String,List<TableBlockInfo>> taskIdToTableBlockInfoMap=mappedAndGetTaskIdToTableBlockInfo(segmentToTableBlocksInfos);      segmentId=next.getKey();      taskIdToSegmentIndexMap=tableSegmentMapTemp.get(segmentId);      if (taskIdToSegmentIndexMap == null) {        Object segmentLoderLockObject=segmentLockMap.get(segmentId);        if (null == segmentLoderLockObject) {          segmentLoderLockObject=addAndGetSegmentLock(segmentId);        }synchronized (segmentLoderLockObject) {          taskIdToSegmentIndexMap=tableSegmentMapTemp.get(segmentId);          if (null == taskIdToSegmentIndexMap) {            taskIdToSegmentIndexMap=new ConcurrentHashMap<String,AbstractIndex>();            Iterator<Entry<String,List<TableBlockInfo>>> iterator=taskIdToTableBlockInfoMap.entrySet().iterator();            while (iterator.hasNext()) {              Entry<String,List<TableBlockInfo>> taskToBlockInfoList=iterator.next();              taskId=taskToBlockInfoList.getKey();              taskIdToSegmentIndexMap.put(taskId,loadBlocks(taskId,taskToBlockInfoList.getValue(),absoluteTableIdentifier));            }            tableSegmentMapTemp.put(next.getKey(),taskIdToSegmentIndexMap);            segmentLockMap.remove(segmentId);          }        }        taskIdToTableSegmentMap.putAll(taskIdToSegmentIndexMap);      }    }  } catch (  CarbonUtilException e) {    LOGGER.error("Problem while loading the segment");    throw new IndexBuilderException(e);  }  return taskIdToTableSegmentMap;}  }
class C{  public boolean enabled(){  return soot.PhaseOptions.getBoolean(options,"enabled");}  }
class C{  public void animateX(int durationMillis,EasingFunction easing){  if (android.os.Build.VERSION.SDK_INT < 11)   return;  ObjectAnimator animatorX=ObjectAnimator.ofFloat(this,"phaseX",0f,1f);  animatorX.setInterpolator(easing);  animatorX.setDuration(durationMillis);  animatorX.addUpdateListener(mListener);  animatorX.start();}  }
class C{  public static double factorialLog(final int n){  if (n < 0) {    throw MathRuntimeException.createIllegalArgumentException("must have n >= 0 for n!, got n = {0}",n);  }  if (n < 21) {    return Math.log(factorial(n));  }  double logSum=0;  for (int i=2; i <= n; i++) {    logSum+=Math.log(i);  }  return logSum;}  }
class C{  public static String replicateDatabus(){  return format("%s|%s",SYSTEM,REPLICATE_DATABUS);}  }
class C{  public boolean isRange(int start,int end,boolean value){  if (end < start) {    throw new IllegalArgumentException();  }  if (end == start) {    return true;  }  end--;  int firstInt=start / 32;  int lastInt=end / 32;  for (int i=firstInt; i <= lastInt; i++) {    int firstBit=i > firstInt ? 0 : start & 0x1F;    int lastBit=i < lastInt ? 31 : end & 0x1F;    int mask;    if (firstBit == 0 && lastBit == 31) {      mask=-1;    } else {      mask=0;      for (int j=firstBit; j <= lastBit; j++) {        mask|=1 << j;      }    }    if ((bits[i] & mask) != (value ? mask : 0)) {      return false;    }  }  return true;}  }
class C{  public static boolean passwordIsValid(String password){  if (password == null || password.trim().length() < 8 || password.trim().length() > 35) {    return false;  }  return DIGIT_PATTERN.matcher(password).matches() && UPPERCASE_PATTERN.matcher(password).matches();}  }
class C{  public SecureSendNotificationQuery userIds(Integer... value){  return unsafeParam("user_ids",value);}  }
class C{  @Override public void onConnectionCreated(Session session,Connection connection){  WritableMap payload=Arguments.createMap();  payload.putString("connectionId",connection.getConnectionId());  payload.putString("creationTime",connection.getCreationTime().toString());  payload.putString("data",connection.getData());  sendEvent(Events.EVENT_CLIENT_CONNECTED,payload);}  }
class C{  public void queryAddASBSet(long setId){  ASBSet set=getASBSet(setId);  mHelper.queryAddASBSet(set.getName(),set.getRank(),set.getHunterType());}  }
class C{  public IntIterator edgeRows(int node,int direction){  if (direction == OUTEDGES) {    int[] outedges=(int[])m_links.get(node,OUTLINKS);    return new IntArrayIterator(outedges,0,getOutDegree(node));  } else   if (direction == INEDGES) {    int[] inedges=(int[])m_links.get(node,INLINKS);    return new IntArrayIterator(inedges,0,getInDegree(node));  } else   if (direction == UNDIRECTED) {    return new CompositeIntIterator(edgeRows(node,OUTEDGES),edgeRows(node,INEDGES));  } else {    throw new IllegalArgumentException("Unrecognized edge type: " + direction + ". Type should be one of Graph.OUTEDGES, "+ "Graoh.INEDGES, or Graph.ALL");  }}  }
class C{  public static void showShareDialog(Activity activity,SparseArray<ShareEntity> data,int requestCode){  showShareDialog(activity,ShareConstant.SHARE_CHANNEL_ALL,data,requestCode);}  }
class C{  public void unSubscribeTopic(String topicName){  if (PrefsHelper.hasFCMToken(mContext)) {    FirebaseMessaging.getInstance().unsubscribeFromTopic(topicName);  }}  }
class C{  @deprecated public void dump(){  this.fRData.dump();}  }
class C{  private int measureShort(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=(int)(2 * mRadius + getPaddingTop() + getPaddingBottom() + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  @NotNull public StringProperty text(){  return myText;}  }
class C{  private static boolean processFileFilter(@NonNull Module module,@Nullable List<VirtualFile> files,@NonNull LintModuleProject project){  if (files != null && !files.isEmpty()) {    ListIterator<VirtualFile> iterator=files.listIterator();    while (iterator.hasNext()) {      VirtualFile file=iterator.next();      if (module.getModuleContentScope().accept(file)) {        project.addFile(VfsUtilCore.virtualToIoFile(file));        iterator.remove();      }    }    if (files.isEmpty()) {      project.setDirectLibraries(Collections.<Project>emptyList());      return true;    }  }  return false;}  }
class C{  protected EventsEnvelope makeEventEnvelope(Assignment assignment,Event event){  return new EventsEnvelope(assignment,event,transactionFactory.newTransaction());}  }
class C{  protected void ae(String msg,int expected,int actual){  assertEquals(msg,expected,actual);}  }
class C{  @Override protected void validateConfig(final SubEquipment subEquipment){  SubEquipmentCacheObject subEquipmentCacheObject=(SubEquipmentCacheObject)subEquipment;  super.validateConfig(subEquipmentCacheObject);  if (subEquipmentCacheObject.getParentId() == null) {    throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,"Parameter \"parentId\" cannot be null. Each Subequipment MUST be attached to an Equipment.");  }}  }
class C{  public ObjectFactory(){}  }
class C{  private void normalizeWhitespace(XMLString value,boolean collapse){  boolean skipSpace=collapse;  boolean sawNonWS=false;  boolean leading=false;  boolean trailing=false;  char c;  int size=value.offset + value.length;  if (fNormalizedStr.ch == null || fNormalizedStr.ch.length < value.length + 1) {    fNormalizedStr.ch=new char[value.length + 1];  }  fNormalizedStr.offset=1;  fNormalizedStr.length=1;  for (int i=value.offset; i < size; i++) {    c=value.ch[i];    if (XMLChar.isSpace(c)) {      if (!skipSpace) {        fNormalizedStr.ch[fNormalizedStr.length++]=' ';        skipSpace=collapse;      }      if (!sawNonWS) {        leading=true;      }    } else {      fNormalizedStr.ch[fNormalizedStr.length++]=c;      skipSpace=false;      sawNonWS=true;    }  }  if (skipSpace) {    if (fNormalizedStr.length > 1) {      fNormalizedStr.length--;      trailing=true;    } else     if (leading && !fFirstChunk) {      trailing=true;    }  }  if (fNormalizedStr.length > 1) {    if (!fFirstChunk && (fWhiteSpace == XSSimpleType.WS_COLLAPSE)) {      if (fTrailing) {        fNormalizedStr.offset=0;        fNormalizedStr.ch[0]=' ';      } else       if (leading) {        fNormalizedStr.offset=0;        fNormalizedStr.ch[0]=' ';      }    }  }  fNormalizedStr.length-=fNormalizedStr.offset;  fTrailing=trailing;  if (trailing || sawNonWS)   fFirstChunk=false;}  }
class C{  public BytecodeOffsetTag(int offset){  this.offset=offset;}  }
class C{  public boolean isEmpty(){  if (entries == null || entries.length == 0) {    return true;  }  for (  LogEntries x : entries) {    if (x != null) {      return false;    }  }  return true;}  }
class C{  public MailPreviewForm(){  initComponents();}  }
class C{  private void disconnectProducers(PersistentTopic persistentTopic){  List<CompletableFuture<Void>> futures=Lists.newArrayList();  ConcurrentOpenHashSet<Producer> producers=persistentTopic.getProducers();  producers.forEach(null);  FutureUtil.waitForAll(futures).thenRun(null).exceptionally(null);}  }
class C{  public void replaceExifTag(String tag,String value){  if (mExif == null) {    loadExifData();  }  mExif.setAttribute(tag,value);}  }
class C{  private static String unwrap(String expression){  if (expression.startsWith("((")) {    expression=expression.substring(expression.indexOf(")") + 1,expression.length() - 1);    if (expression.endsWith("]")) {      expression=expression.substring(0,expression.lastIndexOf("["));    } else {      expression=expression.substring(0,expression.lastIndexOf("."));    }  }  return expression;}  }
class C{  public void clear(){  n=0;  Arrays.fill(sums,0.0);  Arrays.fill(productsSums,0.0);}  }
class C{  public static final float[] trim(float[] a,int size){  if (a.length == size) {    return a;  } else {    float[] b=new float[size];    System.arraycopy(a,0,b,0,size);    return b;  }}  }
class C{  public ObjectFactory(){}  }
class C{  public boolean notmainentry(){  return soot.PhaseOptions.getBoolean(options,"notmainentry");}  }
class C{  public DocsDeleteQuery delete(UserActor actor,int ownerId,int docId){  return new DocsDeleteQuery(getClient(),actor,ownerId,docId);}  }
class C{  public GroupsCreateQuery create(UserActor actor,String title){  return new GroupsCreateQuery(getClient(),actor,title);}  }
class C{  public TShortLongHashMap(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor);}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  public static void openSendSmsActivity(Context context,String phoneNumber,String body){  Intent intent=new Intent(Intent.ACTION_VIEW);  String phone=phoneNumber != null ? phoneNumber : "";  intent.setData(Uri.parse("sms:" + phone));  if (StringUtils.isNotBlank(body)) {    intent.putExtra("sms_body",body);  }  startIntentIfPossible(context,intent);}  }
class C{  @Override protected void fillUtterance(Utterance utterance,Element sentence){  fillUtterance(utterance,sentence,false,false,false);}  }
class C{  private String createName(polyglot.ast.ProcedureDecl procedure){  return procedure.name();}  }
class C{  public EmailBuilder withBody(String body){  this.body=new DefaultEmailBody(body,TEXT_PLAIN,UTF8);  return this;}  }
class C{  public static float determinant(double m00,double m01,double m02,double m03,double m10,double m11,double m12,double m13,double m20,double m21,double m22,double m23,double m30,double m31,double m32,double m33){  double det01=m20 * m31 - m21 * m30;  double det02=m20 * m32 - m22 * m30;  double det03=m20 * m33 - m23 * m30;  double det12=m21 * m32 - m22 * m31;  double det13=m21 * m33 - m23 * m31;  double det23=m22 * m33 - m23 * m32;  return (float)(m00 * (m11 * det23 - m12 * det13 + m13 * det12) - m01 * (m10 * det23 - m12 * det03 + m13 * det02) + m02 * (m10 * det13 - m11 * det03 + m13 * det01) - m03 * (m10 * det12 - m11 * det02 + m12 * det01));}  }
class C{  public Z Times(Z a,Z b){  double tre;  tre=a.re * b.re - a.im * b.im;  im=a.im * b.re + a.re * b.im;  re=tre;  return this;}  }
class C{  public static JsonArray unmodifiableArray(JsonArray array){  return new JsonArray(array,true);}  }
class C{  boolean scanAndTransferToWaiter(E e,int start){  for (int i=0; i < ARENA_LENGTH; i++) {    int index=(start + i) & ARENA_MASK;    AtomicReference<Object> slot=arena[index];    if ((slot.get() == WAITER) && slot.compareAndSet(WAITER,e)) {      return true;    }  }  return false;}  }
class C{  public Message receiveNoWait() throws JMSException {  return receive(RECEIVE_NO_WAIT_TIMEOUT);}  }
class C{  public PollsGetVotersQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  Object doWork(TaskManager.Task who,Object param){  Integer response=null;  try {    ParticipantHandle handle=(ParticipantHandle)param;    TransactionParticipant par=null;    if (logger.isLoggable(Level.FINEST)) {      logger.log(Level.FINEST,"AbortJob:doWork aborting handle: {0}",handle);    }    int vote=0;    vote=handle.getPrepState();switch (vote) {case NOTCHANGED:      return new Integer(ABORTED);case ABORTED:    if (!handle.isPrepared())     return new Integer(ABORTED);}if (par == null) par=handle.getParticipant();try {  if (!_directCall && attempt(who) > maxtries) {    response=ABORTED;    return response;  }} catch (JobException je) {  return null;}if (par == null) return null;try {  if (handle.isSuitableForCommitFailover()) {    abortPartitionWithEnabledFailover(handle,tr.mgr,tr.id,_xid);  } else {    if (_xid == null)     par.abort(tr.mgr,tr.id); else     ((IRemoteSpace)par).abort(tr.mgr,_xid);  }  response=ABORTED;} catch (TransactionException bte) {  response=ABORTED;}catch (NoSuchObjectException nsoe) {  response=ABORTED;}catch (ConnectException ce) {  if (numberOfRetriesDueToConnectionExceptionExceeded(who))   response=ABORTED;}catch (UnknownHostException uhe) {  response=ABORTED;}catch (ConnectIOException cioe) {  if (numberOfRetriesDueToConnectionExceptionExceeded(who))   response=ABORTED;}catch (MarshalException me) {  response=ABORTED;}catch (AccessException ae) {  response=ABORTED;}catch (ActivateFailedException afe) {  response=ABORTED;}catch (RemoteException re) {  response=ABORTED;}catch (RuntimeException rte) {  response=ABORTED;}if (response != null) {  handle.setPrepState(ABORTED);  try {    log.write(new ParticipantAbortRecord(handle));  } catch (  com.sun.jini.mahalo.log.LogException le) {  }  return response;}return null;}  finally {if (_directCall && response != null) {  this.results[0]=response;  pending=0;}}}  }
class C{  public HalfPhoneUnitSelector() throws Exception {  super();}  }
class C{  public String read(ByteBuffer buf,DictionaryCache dict){  StringBuilder out=new StringBuilder();  if (pre != null)   out.append(pre);  if (type == VOID)   return out.toString();  if (type == NULL) {    out.append("null");    return out.toString();  }  if (type == BYTE) {    out.append(buf.get());    return out.toString();  }  if (type == SHORT) {    out.append(buf.getShort());    return out.toString();  }  if (type == INT) {    out.append(buf.getInt());    return out.toString();  }  if (type == LONG) {    out.append(buf.getLong());    return out.toString();  }  if (type == DOUBLE) {    out.append(buf.getDouble());    return out.toString();  }  if (type == BOOLEAN) {    out.append((buf.get() == 0 ? "false" : "true"));    return out.toString();  }  if (type == STRING) {    short pos=buf.getShort();    if (pos > -1) {      out.append("\"");      out.append(dict.get(pos));      out.append("\"");    } else {      int size=0;      int val=buf.get() & 0xFF;      while (val == 255) {        size+=val;        val=buf.get() & 0xFF;      }      size+=val;      byte[] data=new byte[size];      buf.get(data);      out.append("\"");      out.append(new String(data,StandardCharsets.UTF_8));      out.append("\"");    }    return out.toString();  }  return null;}  }
class C{  public AccountSaveProfileInfoQuery relationPartnerId(Integer value){  return unsafeParam("relation_partner_id",value);}  }
class C{  public int detachChildNamed(String childName){  if (childName == null) {    throw new NullPointerException();  }  for (int x=0, max=children.size(); x < max; x++) {    Spatial child=children.get(x);    if (childName.equals(child.getName())) {      detachChildAt(x);      return x;    }  }  return -1;}  }
class C{  public AemContentFinder expand(){  if (isCollapsed()) {    bobcatWait.withTimeout(Timeouts.MEDIUM).until(ContentFinderActions.expand());    bobcatWait.withTimeout(Timeouts.MEDIUM).until(ExpectedConditions.visibilityOf(collapseButton));  }  return this;}  }
class C{  public boolean isNavigationAtBottom(){  return (mSmallestWidthDp >= 600 || mInPortrait);}  }
class C{  private void compareDictionaryData(List<String> actual,List<String> expected){  assertTrue(expected.size() == actual.size());  for (int i=0; i < actual.size(); i++) {    assertTrue(actual.get(i).equals(expected.get(i)));  }}  }
class C{  public synchronized void release(){  this.state=Input.State.RELEASED;}  }
class C{  public Dfp newInstance(final byte sig,final byte code){  return field.newDfp(sig,code);}  }
class C{  public static <V>Map<String,V> removeMultiFormParameters(Map<String,V> parameters){  Map<String,V> filteredParameters=new HashMap<String,V>();  for (  Map.Entry<String,V> entry : parameters.entrySet()) {    String key=entry.getKey();    if (key != null && (key.indexOf(MULTI_ROW_DELIMITER) != -1 || key.indexOf("_useRowSubmit") != -1 || key.indexOf("_rowCount") != -1)) {      continue;    }    filteredParameters.put(key,entry.getValue());  }  return filteredParameters;}  }
class C{  public Bundler putParcelableArrayList(String key,ArrayList<? extends Parcelable> value){  bundle.putParcelableArrayList(key,value);  return this;}  }
class C{  public void updateDataSources(Set<? extends DataSource> added,Set<? extends DataSource> removed){  super.changeDataSources(added,removed);}  }
class C{  private void logAndHandle(Throwable t,boolean passToHandler){  if (Thread.getDefaultUncaughtExceptionHandler() == null) {    LOG.error("Unhandled exception on thread {}",Thread.currentThread().getName(),t);  } else {    LOG.info("Unhandled exception on thread {}",Thread.currentThread().getName(),t);    if (passToHandler) {      Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(),t);    }  }}  }
class C{  public static double binomialCoefficientDouble(final int n,final int k){  checkBinomial(n,k);  if ((n == k) || (k == 0)) {    return 1d;  }  if ((k == 1) || (k == n - 1)) {    return n;  }  if (k > n / 2) {    return binomialCoefficientDouble(n,n - k);  }  if (n < 67) {    return binomialCoefficient(n,k);  }  double result=1d;  for (int i=1; i <= k; i++) {    result*=(double)(n - k + i) / (double)i;  }  return Math.floor(result + 0.5);}  }
class C{  public T distanceInf(final FieldVector3D<T> v){  final T dx=v.x.subtract(x).abs();  final T dy=v.y.subtract(y).abs();  final T dz=v.z.subtract(z).abs();  if (dx.getReal() <= dy.getReal()) {    if (dy.getReal() <= dz.getReal()) {      return dz;    } else {      return dy;    }  } else {    if (dx.getReal() <= dz.getReal()) {      return dz;    } else {      return dx;    }  }}  }
class C{  public int length(){  return Histogram.length() + Graph.length();}  }
class C{  public Builder attribution(String attribution){  this.attribution=attribution;  return this;}  }
class C{  public static DhisHttpResponse httpDELETE(String requestURL,boolean authorize,String username,String password,Map<String,String> headers,int timeout) throws Exception {  DefaultHttpClient httpclient=null;  DhisHttpResponse dhisHttpResponse=null;  try {    HttpParams params=new BasicHttpParams();    HttpConnectionParams.setConnectionTimeout(params,timeout);    HttpConnectionParams.setSoTimeout(params,timeout);    httpclient=new DefaultHttpClient(params);    HttpDelete httpDelete=new HttpDelete(requestURL);    if (headers instanceof Map) {      for (      Map.Entry<String,String> e : headers.entrySet()) {        httpDelete.addHeader(e.getKey(),e.getValue());      }    }    if (authorize) {      httpDelete.setHeader("Authorization",CodecUtils.getBasicAuthString(username,password));    }    HttpResponse response=httpclient.execute(httpDelete);    dhisHttpResponse=processResponse(requestURL,username,response);    return dhisHttpResponse;  } catch (  Exception e) {    log.error("exception occurred in httpDELETE call with username " + username,e);    throw e;  } finally {    if (httpclient != null) {      httpclient.getConnectionManager().shutdown();    }  }}  }
class C{  public Builder add(String property,Attributes attributes){  Map<String,String> map=attributes.getAttributes();  StringBuilder stringBuilder=new StringBuilder();  stringBuilder.append(property);  stringBuilder.append('.');  stringBuilder.append(Utils.join(map,'.','(',')'));  properties.add(stringBuilder.toString());  return this;}  }
class C{  public AddTypeIndexesRequestInfo(){}  }
class C{  public final void debug(final Object o){  log(Level.DEBUG,o);}  }
class C{  public boolean hasBeanProperties(String beanName){  return getBeanProperties(beanName).size() != 0;}  }
class C{  public void toJSON(JSON jo){  jo.putAll(getAll());}  }
class C{  public static int extractLowUnsignedNibble(int value){  return value & 0x0F;}  }
class C{  protected OpenMapRealVector(OpenMapRealVector v,int resize){  virtualSize=v.getDimension() + resize;  entries=new OpenIntToDoubleHashMap(v.entries);  epsilon=v.epsilon;}  }
class C{  public RollUpBadCallsIntegrationTest() throws Exception {  setResponseLogLengthLimit(1000);  experiment=ExperimentFactory.createExperiment();  experiment.samplingPercent=1.0;  experiment.label="experiment";  experiment.applicationName=QBO + UUID.randomUUID();  DefaultNameExclusionStrategy experimentComparisonStrategy=new DefaultNameExclusionStrategy("creationTime","modificationTime","ruleJson");  experiment.setSerializationStrategy(experimentComparisonStrategy);}  }
class C{  protected void buildExceptionalEdges(Map<Unit,List<Unit>> unitToSuccs,Map<Unit,List<Unit>> unitToPreds){  for (  Trap trap : body.getTraps()) {    Unit first=trap.getBeginUnit();    Unit last=unitChain.getPredOf(trap.getEndUnit());    Unit catcher=trap.getHandlerUnit();    for (Iterator<Unit> unitIt=unitChain.iterator(first,last); unitIt.hasNext(); ) {      Unit trapped=unitIt.next();      addEdge(unitToSuccs,unitToPreds,trapped,catcher);    }  }}  }
class C{  private void attemptLogin(){  if (mAuthTask != null) {    return;  }  mLoginView.setEmailError(null);  mLoginView.setPasswordError(null);  String email=mLoginView.getUserEmail();  String password=mLoginView.getPassword();  boolean cancel=false;  if (TextUtils.isEmpty(email)) {    cancel=mLoginView.setEmailError(mContext.getString(R.string.error_field_required));  } else   if (!mLoginView.isEmailValid(email)) {    cancel=mLoginView.setEmailError(mContext.getString(R.string.error_invalid_email));  } else   if (TextUtils.isEmpty(password)) {    cancel=mLoginView.setPasswordError(mContext.getString(R.string.error_field_required));  } else   if (!mLoginView.isPasswordValid(password)) {    cancel=mLoginView.setPasswordError(mContext.getString(R.string.error_invalid_password));  }  if (!cancel) {    mLoginView.showLoginProgress(true);    mAuthTask=new UserLoginTask(email,password);    mAuthTask.execute((Void)null);  }}  }
class C{  public NGramHistoDocument(){  Graph=new DocumentNGramGraph();  Histogram=new DocumentNGramHistogram();}  }
class C{  public ConditionParameterizedTest(String fieldName,Condition condition,String toFind){  this.condition=condition;  this.toFind=toFind;  this.fieldName=fieldName;}  }
class C{  protected BoardGetCommentsQuery topicId(int value){  return unsafeParam("topic_id",value);}  }
class C{  public static String toString(URI uri) throws IOException {  return toString(uri,Charset.defaultCharset());}  }
class C{  private static String convertString(final float f){  return String.valueOf(f);}  }
class C{  @SuppressWarnings("unchecked") public List<String> onTabComplete(Sender sender,List<String> args){  final List<MainCommand> mains=mainCommands.stream().filter(null).collect(Collectors.toList());  if (args.size() <= 1) {    if (args.isEmpty() || args.get(0).equalsIgnoreCase("")) {      return mains.stream().map(null).collect(Collectors.toList());    }    return mains.stream().map(null).filter(null).collect(Collectors.toList());  }  Optional<MainCommand> o=mains.stream().filter(null).limit(1).findAny();  if (!o.isPresent()) {    return Collections.emptyList();  }  return o.get().onTabComplete(sender,args.subList(1,args.size()),plugin);}  }
class C{  public void buildPathPartWithContextRoot(Appendable buffer,String url) throws WebAppConfigurationException, IOException {  if (contextPath == null) {    throw new IllegalStateException("Context path is unknown");  }  buffer.append(contextPath);  if (!contextPath.endsWith("/") && !url.startsWith("/")) {    buffer.append("/");  }  buffer.append(url);}  }
class C{  public WeaponTreeCursor queryWeaponTreeParent(long id){  QueryHelper qh=new QueryHelper();  qh.Columns=null;  qh.Selection="i1." + S.COLUMN_ITEMS_ID + " = ?";  qh.SelectionArgs=new String[]{String.valueOf(id)};  qh.GroupBy=null;  qh.Having=null;  qh.OrderBy=null;  qh.Limit=null;  return new WeaponTreeCursor(wrapJoinHelper(builderWeaponTreeParent(),qh));}  }
class C{  public void readFrom(Reader from,String endMarker) throws ParserConfigurationException, SAXException, IOException {  Reader r=from;  if (endMarker != null) {    ReaderSplitter fromSplitter=new ReaderSplitter(from,endMarker);    r=fromSplitter.nextReader();  }  readFrom(r);}  }
class C{  public static String noSuchMethodException(String className,String methodName){  return "The " + methodName + " method in "+ className+ " class is necessary which does not exist.";}  }
class C{  private static boolean samePackage(Class c1,Class c2){  if (c1.getClassLoader() == c2.getClassLoader()) {    String n1=c1.getName();    int i1=n1.lastIndexOf('.');    String n2=c2.getName();    int i2=n2.lastIndexOf('.');    return i1 == i2 && (i1 < 0 || n1.regionMatches(0,n2,0,i1));  }  return false;}  }
class C{  public int start(){  return start;}  }
class C{  public static void assignColorsToLocals(Body unitBody,Map<Local,Object> localToGroup,Map<Local,Integer> localToColor,Map<Object,Integer> groupToColorCount){  ExceptionalUnitGraph unitGraph=new ExceptionalUnitGraph(unitBody,PedanticThrowAnalysis.v(),Options.v().omit_excepting_unit_edges());  LiveLocals liveLocals;  liveLocals=new SimpleLiveLocals(unitGraph);  UnitInterferenceGraph intGraph=new UnitInterferenceGraph(unitBody,localToGroup,liveLocals);{    int[] freeColors=new int[10];    for (    Local local : intGraph.getLocals()) {      if (localToColor.containsKey(local)) {        continue;      }      Object group=localToGroup.get(local);      int colorCount=groupToColorCount.get(group).intValue();      if (freeColors.length < colorCount)       freeColors=new int[Math.max(freeColors.length * 2,colorCount)];{        for (int i=0; i < colorCount; i++)         freeColors[i]=1;      }{        Local[] interferences=intGraph.getInterferencesOf(local);        for (        Local element : interferences) {          if (localToColor.containsKey(element)) {            int usedColor=localToColor.get(element).intValue();            freeColors[usedColor]=0;          }        }      }{        boolean found=false;        int assignedColor=0;        for (int i=0; i < colorCount; i++)         if (freeColors[i] == 1) {          found=true;          assignedColor=i;        }        if (!found) {          assignedColor=colorCount++;          groupToColorCount.put(group,new Integer(colorCount));        }        localToColor.put(local,new Integer(assignedColor));      }    }  }}  }
class C{  public AemPathWindow clickOk(){  okButton.click();  return this;}  }
class C{  public static void showSoftKeyboard(Activity activity){  showSoftKeyboard(activity,null);}  }
class C{  public LeastSquaresBuilder model(final MultivariateVectorFunction value,final MultivariateMatrixFunction jacobian){  return model(LeastSquaresFactory.model(value,jacobian));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DispelNPCDeBuffMental_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1201247,skillname);}  }
class C{  public static boolean supportsMultipleUsers(){  return getMaxSupportedUsers() > 1;}  }
class C{  public boolean isEmpty(){  return size() == 0;}  }
class C{  public static <E>Type<E> valueOf(final Class<E> rawType,final java.lang.reflect.Type... actualTypeArguments){  if (rawType == null) {    return null;  } else {    return (Type<E>)intern((Class<E>)rawType,actualTypeArguments,new HashSet<java.lang.reflect.Type>());  }}  }
class C{  public static int nullSafeHashCode(byte[] array){  if (array == null) {    return 0;  }  int hash=INITIAL_HASH;  int arraySize=array.length;  for (int i=0; i < arraySize; i++) {    hash=MULTIPLIER * hash + array[i];  }  return hash;}  }
class C{  public static String formatDate(java.sql.Timestamp timestamp){  if (timestamp == null)   return "";  DateFormat df=DateFormat.getDateTimeInstance(DateFormat.LONG,DateFormat.FULL);  java.util.Date date=timestamp;  return df.format(date);}  }
class C{  public static void pickImage(Context context,android.support.v4.app.Fragment fragment,int requestCode){  try {    fragment.startActivityForResult(getImagePicker(),requestCode);  } catch (  ActivityNotFoundException e) {    showImagePickerError(context);  }}  }
class C{  public void put(String key,InputStream stream){  put(key,stream,null);}  }
class C{  @SuppressWarnings("unchecked") public ValueComboBox(){  setRenderer(new ComboBoxRenderer());  putClientProperty("JComboBox.isTableCellEditor",Boolean.TRUE);}  }
