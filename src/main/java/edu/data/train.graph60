class C{  public MissingDataException(String msg,Throwable ex){  super(msg,ex);}  }
class C{  public void invalidateBitmap(){  ((ToolbarViewResourceAdapter)getToolbarResourceAdapter()).forceInvalidate();}  }
class C{  public ColorRange copy(){  return copy(null,0);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case StextPackage.STATE_ROOT__DEF:    return basicSetDef(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static Clob toClob(Object value) throws PageException {  if (value instanceof Clob)   return (Clob)value; else   if (value instanceof char[])   return toClob(new String((char[])value)); else   if (value instanceof Reader) {    StringWriter sw=new StringWriter();    try {      IOUtil.copy((Reader)value,sw,false,true);    } catch (    IOException e) {      throw ExpressionException.newInstance(e);    }    return toClob(sw.toString());  }  return toClob(Caster.toString(value));}  }
class C{  public void paintPanelBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public static void coerceStreamWithIoError(final HttpResponseStrategy<?> strategy) throws IOException {  final HttpResponse response=Mockito.mock(HttpResponse.class);  mockStatusCode(response,200);  final HttpEntity entity=Mockito.mock(HttpEntity.class);  Mockito.when(response.getEntity()).thenReturn(entity);  Mockito.when(entity.getContent()).thenThrow(new IOException());  strategy.coerce(Mockito.mock(HttpRequestBase.class),response);}  }
class C{  private void printClass(TypeElement typeElement,String outerClass){  List<TypeElement> innerClass=new ArrayList<TypeElement>();  indent();  if (typeElement.getKind() == ElementKind.INTERFACE) {    out.print("interface");  } else   if (typeElement.getKind() == ElementKind.CLASS) {    out.print("class");  } else {    return;  }  out.print(' ');  if (outerClass != null) {    out.print(outerClass + "$");  }  out.print(typeElement.getSimpleName());  if (!typeElement.getTypeParameters().isEmpty()) {    out.print('<');    out.print(formatList(typeElement.getTypeParameters()));    out.print('>');  }  if (typeElement.getSuperclass().getKind() != TypeKind.NONE && !TypesUtils.isObject(typeElement.getSuperclass())) {    out.print(" extends ");    out.print(formatType(typeElement.getSuperclass()));  }  if (!typeElement.getInterfaces().isEmpty()) {    final boolean isInterface=typeElement.getKind() == ElementKind.INTERFACE;    out.print(isInterface ? " extends " : " implements ");    out.print(formatType(formatList(typeElement.getInterfaces())));  }  out.println(" {");  String tempIndention=currentIndention;  currentIndention=currentIndention + INDENTION;  printTypeMembers(typeElement.getEnclosedElements(),innerClass);  currentIndention=tempIndention;  indent();  out.println("}");  for (  TypeElement element : innerClass) {    printClass(element,typeElement.getSimpleName().toString());  }}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) @Test public void testNodeProcessing() throws Exception {  MostFrequentKeyValueMap<String,Integer> oper=new MostFrequentKeyValueMap<String,Integer>();  CollectorTestSink matchSink=new CollectorTestSink();  oper.most.setSink(matchSink);  oper.beginWindow(0);  HashMap<String,Integer> amap=new HashMap<String,Integer>(1);  HashMap<String,Integer> bmap=new HashMap<String,Integer>(1);  HashMap<String,Integer> cmap=new HashMap<String,Integer>(1);  int atot1=5;  int btot1=3;  int ctot1=6;  amap.put("a",1);  bmap.put("b",2);  cmap.put("c",4);  for (int i=0; i < atot1; i++) {    oper.data.process(amap);  }  for (int i=0; i < btot1; i++) {    oper.data.process(bmap);  }  for (int i=0; i < ctot1; i++) {    oper.data.process(cmap);  }  atot1=4;  btot1=3;  ctot1=10;  amap.put("a",5);  bmap.put("b",4);  cmap.put("c",3);  for (int i=0; i < atot1; i++) {    oper.data.process(amap);  }  for (int i=0; i < btot1; i++) {    oper.data.process(bmap);  }  for (int i=0; i < ctot1; i++) {    oper.data.process(cmap);  }  oper.endWindow();  Assert.assertEquals("number emitted tuples",3,matchSink.collectedTuples.size());  int vcount;  for (  Object o : matchSink.collectedTuples) {    HashMap<String,HashMap<Integer,Integer>> omap=(HashMap<String,HashMap<Integer,Integer>>)o;    for (    Map.Entry<String,HashMap<Integer,Integer>> e : omap.entrySet()) {      String key=e.getKey();      if (key.equals("a")) {        vcount=e.getValue().get(1);        Assert.assertEquals("Key \"a\" has value ",5,vcount);      } else       if (key.equals("b")) {        vcount=e.getValue().get(2);        Assert.assertEquals("Key \"a\" has value ",3,vcount);        vcount=e.getValue().get(4);        Assert.assertEquals("Key \"a\" has value ",3,vcount);      } else       if (key.equals("c")) {        vcount=e.getValue().get(3);        Assert.assertEquals("Key \"a\" has value ",10,vcount);      }    }  }}  }
class C{  protected HeadFilter(){  super("HeadFilter");}  }
class C{  protected int engineGetOutputSize(int inputLen){  return core.getOutputSize(inputLen);}  }
class C{  public static void main(final String[] args) throws Exception {  new Installer(args).process();}  }
class C{  protected MultistepExprHolder matchAndEliminatePartialPaths(MultistepExprHolder testee,MultistepExprHolder head,boolean isGlobal,int lengthToTest,ElemTemplateElement varScope){  if (null == testee.m_exprOwner)   return head;  WalkingIterator iter1=(WalkingIterator)testee.m_exprOwner.getExpression();  if (partialIsVariable(testee,lengthToTest))   return head;  MultistepExprHolder matchedPaths=null;  MultistepExprHolder matchedPathsTail=null;  MultistepExprHolder meh=head;  while (null != meh) {    if ((meh != testee) && (null != meh.m_exprOwner)) {      WalkingIterator iter2=(WalkingIterator)meh.m_exprOwner.getExpression();      if (stepsEqual(iter1,iter2,lengthToTest)) {        if (null == matchedPaths) {          try {            matchedPaths=(MultistepExprHolder)testee.clone();            testee.m_exprOwner=null;          } catch (          CloneNotSupportedException cnse) {          }          matchedPathsTail=matchedPaths;          matchedPathsTail.m_next=null;        }        try {          matchedPathsTail.m_next=(MultistepExprHolder)meh.clone();          meh.m_exprOwner=null;        } catch (        CloneNotSupportedException cnse) {        }        matchedPathsTail=matchedPathsTail.m_next;        matchedPathsTail.m_next=null;      }    }    meh=meh.m_next;  }  int matchCount=0;  if (null != matchedPaths) {    ElemTemplateElement root=isGlobal ? varScope : findCommonAncestor(matchedPaths);    WalkingIterator sharedIter=(WalkingIterator)matchedPaths.m_exprOwner.getExpression();    WalkingIterator newIter=createIteratorFromSteps(sharedIter,lengthToTest);    ElemVariable var=createPseudoVarDecl(root,newIter,isGlobal);    if (DIAGNOSE_MULTISTEPLIST)     System.err.println("Created var: " + var.getName() + (isGlobal ? "(Global)" : ""));    while (null != matchedPaths) {      ExpressionOwner owner=matchedPaths.m_exprOwner;      WalkingIterator iter=(WalkingIterator)owner.getExpression();      if (DIAGNOSE_MULTISTEPLIST)       diagnoseLineNumber(iter);      LocPathIterator newIter2=changePartToRef(var.getName(),iter,lengthToTest,isGlobal);      owner.setExpression(newIter2);      matchedPaths=matchedPaths.m_next;    }  }  if (DIAGNOSE_MULTISTEPLIST)   diagnoseMultistepList(matchCount,lengthToTest,isGlobal);  return head;}  }
class C{  public static String utf8Encode(String str){  if (!isEmpty(str) && str.getBytes().length != str.length()) {    try {      return URLEncoder.encode(str,"UTF-8");    } catch (    UnsupportedEncodingException e) {      throw new RuntimeException("UnsupportedEncodingException occurred. ",e);    }  }  return str;}  }
class C{  static <T>GeneralRange<T> all(Comparator<? super T> comparator){  return new GeneralRange<T>(comparator,false,null,OPEN,false,null,OPEN);}  }
class C{  public String fixedPoint(final String from){  return new Trimmer(toolbox).fixed(from);}  }
class C{  public ServiceCall<Void> updateProfile(final Conversation conversation,final Map<String,String> profile){  Validator.notNull(conversation,"conversation cannot be null");  return updateProfile(conversation.getDialogId(),conversation.getClientId(),profile);}  }
class C{  public boolean containsKey(Object key){  return context.getAttribute((String)key) != null;}  }
class C{  private List<Extension> findExtensions(String scope){  String[] orders=null;  String orderlist=conf.get("urlnormalizer.order." + scope);  if (orderlist == null)   orderlist=conf.get("urlnormalizer.order");  if (orderlist != null && !orderlist.trim().equals("")) {    orders=orderlist.split("\\s+");  }  String scopelist=conf.get("urlnormalizer.scope." + scope);  Set<String> impls=null;  if (scopelist != null && !scopelist.trim().equals("")) {    String[] names=scopelist.split("\\s+");    impls=new HashSet<String>(Arrays.asList(names));  }  Extension[] extensions=this.extensionPoint.getExtensions();  HashMap<String,Extension> normalizerExtensions=new HashMap<String,Extension>();  for (int i=0; i < extensions.length; i++) {    Extension extension=extensions[i];    if (impls != null && !impls.contains(extension.getClazz()))     continue;    normalizerExtensions.put(extension.getClazz(),extension);  }  List<Extension> res=new ArrayList<Extension>();  if (orders == null) {    res.addAll(normalizerExtensions.values());  } else {    for (int i=0; i < orders.length; i++) {      Extension e=normalizerExtensions.get(orders[i]);      if (e != null) {        res.add(e);        normalizerExtensions.remove(orders[i]);      }    }    res.addAll(normalizerExtensions.values());  }  return res;}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,scrollRange,0,DEFAULT_OVERSCROLL_SCALE,isTouchEvent);}  }
class C{  public ResequencerTest(String name){  super(name);}  }
class C{  protected Chunk parseChunk(String chunkDefinition,String delimitedTokenText,List<MutableToken> untypedTokens){  if (StringUtils.isEmpty(chunkDefinition)) {    throw new TestConfigurationException("Parameter 'unparsedChunkSpec' cannot be null or empty.");  }  if (StringUtils.isEmpty(delimitedTokenText)) {    throw new TestConfigurationException("Parameter 'delimitedTokenText' cannot be null or empty.");  }  Matcher matcher=CHUNK_DEFINITION_BODY_PATTERN.matcher(chunkDefinition);  if (!matcher.matches()) {    throw new TestConfigurationException(String.format("Could not parse chunk definition from input '%s' using pattern '%s'",chunkDefinition,CHUNK_DEFINITION_BODY_PATTERN.pattern()));  }  String chunkDefinitionBody=matcher.group(1);  if (chunkDefinitionBody == null) {    throw new TestConfigurationException(String.format("Did not find chunk definition body in input '%s'",chunkDefinition));  }  String[] splits=chunkDefinitionBody.split(":");  int splitsLength=splits.length;  if (splitsLength < 1 || splitsLength > 2) {    throw new TestConfigurationException(String.format("Expected format '2-12:TYPE1{2},TYPE2{1}' for chunk definition body but found '%s'.",chunkDefinitionBody));  }  LOGGER.debug("Parsing Chunk definition '{}'",chunkDefinition);  ChunkType chunkType=parseChunkType(chunkDefinition);  String plainText=removeBrackets(delimitedTokenText);  Range chunkRange=parseChunkRange(splits[0]);  Chunk chunk=new Chunk(chunkType,chunkRange.substring(plainText));  if (splitsLength == 1) {    return chunk;  }  String[] tokenTypeNameAndPositions=splits[1].split(",");  for (int i=0; i < tokenTypeNameAndPositions.length; i++) {    TokenTypeOccurrence typeOccurrence=parseTokenTypeOccurrence(tokenTypeNameAndPositions[i]);    if (typeOccurrence.occurrence() > untypedTokens.size()) {      throw new TestConfigurationException(String.format("TokenType specified for value %d but there are only %d Token values.",typeOccurrence.occurrence(),untypedTokens.size()));    }    MutableToken untypedToken=untypedTokens.get(typeOccurrence.zeroIndexOccurrence());    untypedToken.setTokenType(typeOccurrence.tokenType());    chunk.add(untypedToken.toToken());  }  return chunk;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:58.055 -0400",hash_original_method="F32D89C4D68A9F884EB414FBF4D51576",hash_generated_method="49922040A4CE20A615BB17697EE3B720") public void removeObserver(final FileAlterationObserver observer){  if (observer != null) {    while (observers.remove(observer)) {    }  }}  }
class C{  public static int countMatches(CharSequence str,CharSequence sub){  if (isEmpty(str) || isEmpty(sub)) {    return 0;  }  int count=0;  int idx=0;  while ((idx=indexOf(str,sub,idx)) != INDEX_NOT_FOUND) {    count++;    idx+=sub.length();  }  return count;}  }
class C{  public long toMinutes(){  return seconds / SECONDS_PER_MINUTE;}  }
class C{  public void tagDefineFontInfo(int fontId,String fontName,int flags,int[] codes) throws IOException {  if (tags != null) {    tags.tagDefineFontInfo(fontId,fontName,flags,codes);  }}  }
class C{  public SVGBuilder readFromResource(Resources resources,int resId){  this.data=resources.openRawResource(resId);  return this;}  }
class C{  public Path dataDirectory(){  return _dataDirectory;}  }
class C{  public void exportM3U(Playlist playlist){  if (playlist == null) {    return;  }  String suggestedName=CommonUtils.convertFileName(playlist.getName());  File suggested;  File suggestedDirectory=FileChooserHandler.getLastInputDirectory();  if (suggestedDirectory.equals(CommonUtils.getCurrentDirectory())) {    suggestedDirectory=new File(CommonUtils.getUserHomeDir(),"Desktop");  }  suggested=new File(suggestedDirectory,suggestedName + ".m3u");  File selFile=FileChooserHandler.getSaveAsFile(GUIMediator.getAppFrame(),I18n.tr("Save Playlist As"),suggested,new PlaylistListFileFilter());  if (selFile == null) {    return;  }  if (selFile.exists()) {    DialogOption choice=GUIMediator.showYesNoMessage(I18n.tr("Warning: a file with the name {0} already exists in the folder. Overwrite this file?",selFile.getName()),QuestionsHandler.PLAYLIST_OVERWRITE_OK,DialogOption.NO);    if (choice != DialogOption.YES)     return;  }  String path=selFile.getPath();  try {    path=FileUtils.getCanonicalPath(selFile);  } catch (  IOException ignored) {  }  if (!path.toLowerCase().endsWith(".m3u"))   path+=".m3u";  saveM3U(playlist,path);}  }
class C{  private final double readDatum(final DataInput in,final ColumnType columnType) throws IOException {switch (columnType) {case DOUBLE:    return in.readDouble();case INTEGER:  int iValue=in.readInt();if (iValue == Integer.MIN_VALUE + 1) {  boolean isMissing=in.readBoolean();  if (isMissing) {    return Double.NaN;  } else {    return iValue;  }} else {  return iValue;}case NOMINAL_BYTE:byte bValue=in.readByte();if (bValue == -1) {return Double.NaN;} else {return bValue;}case NOMINAL_INTEGER:iValue=in.readInt();if (iValue == -1) {return Double.NaN;} else {return iValue;}case NOMINAL_SHORT:short sValue=in.readShort();if (sValue == -1) {return Double.NaN;} else {return sValue;}default :throw new RuntimeException("Illegal type: " + columnType);}}  }
class C{  @SuppressWarnings("unchecked") public static void checkType(Map<String,Object> map,String name){  Map<String,Object> tmap;  if (map.get(MetamodelGenerator.KEY_TYPE) instanceof Map) {    tmap=(Map<String,Object>)map.get(MetamodelGenerator.KEY_TYPE);  } else   if (map.get(MetamodelGenerator.KEY_TYPE) instanceof String) {    tmap=new HashMap<String,Object>();    tmap.put(MetamodelGenerator.KEY_NAME,map.get(MetamodelGenerator.KEY_TYPE));  } else {    tmap=map;  }  int join=name.indexOf('&');  if (join > 0) {    while (join > 0 && !pointyBracketsEven(name.substring(0,join))) {      join=name.indexOf('&',join + 1);    }    if (join > 0) {      Assert.assertEquals("not an intersection type","i",tmap.get("comp"));      checkTypeParameters(-1,(List<Map<String,Object>>)tmap.get(MetamodelGenerator.KEY_TYPES),name.substring(0,join));      checkTypeParameters(-1,(List<Map<String,Object>>)tmap.get(MetamodelGenerator.KEY_TYPES),name.substring(join + 1));      return;    }  }  join=name.indexOf('|');  if (join > 0) {    while (join > 0 && !pointyBracketsEven(name.substring(0,join))) {      join=name.indexOf('|',join + 1);    }    if (join > 0) {      Assert.assertEquals("not a union type","u",tmap.get("comp"));      checkTypeParameters(-1,(List<Map<String,Object>>)tmap.get(MetamodelGenerator.KEY_TYPES),name.substring(0,join));      checkTypeParameters(-1,(List<Map<String,Object>>)tmap.get(MetamodelGenerator.KEY_TYPES),name.substring(join + 1));      return;    }  }  int sep=name.indexOf('<');  String typeParams=null;  if (sep > 0) {    typeParams=name.substring(sep + 1,name.length() - 1);    name=name.substring(0,sep);  }  if (tmap.containsKey(MetamodelGenerator.KEY_PACKAGE)) {    Assert.assertEquals(name,String.format("%s::%s",packageName(tmap),tmap.get(MetamodelGenerator.KEY_NAME)));  } else {    Assert.assertEquals(name,tmap.get(MetamodelGenerator.KEY_NAME));  }  if (typeParams != null) {    List<Map<String,Object>> tparms=(List<Map<String,Object>>)tmap.get(MetamodelGenerator.KEY_TYPE_PARAMS);    Assert.assertFalse("Type parameters shouldn't be empty",tparms.isEmpty());    checkTypeParameters(0,tparms,typeParams);  }}  }
class C{  public void requestContactCapabilities(final ContactId contact) throws RemoteException {  if (contact == null) {    throw new ServerApiIllegalArgumentException("contact must not be null!");  }  ServerApiUtils.testIms();  mCapabilityService.scheduleCapabilityOperation(new CapabilitiesRequester(contact));}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return new Float(stack.getUIMgrSafe().getVideoFrame().getDisplayAspectRatio());}  }
class C{  public static void stepOver(final JFrame parent,final IDebugger debugger,final ZyGraph graph){  checkArguments(parent,debugger,graph);  if (!debugger.isConnected()) {    return;  }  final TargetProcessThread activeThread=debugger.getProcessManager().getActiveThread();  if (activeThread == null) {    return;  }  final RelocatedAddress currentAddress=activeThread.getCurrentAddress();  if (currentAddress == null) {    CMessageBox.showError(parent,"Could not step because the selected thread is not suspended");    return;  }  final UnrelocatedAddress oldAddress=debugger.memoryToFile(currentAddress);  final Set<BreakpointAddress> relocatedAddresses=CStepOverHelper.getNextInstructions(graph,oldAddress);  if (relocatedAddresses.isEmpty()) {    CMessageBox.showError(parent,"Couldn't step over the current instruction");    return;  } else {    debugger.getProcessManager().setActiveThread(null);    debugger.getBreakpointManager().addBreakpoints(BreakpointType.STEP,relocatedAddresses);    try {      debugger.resume();    } catch (    final DebugExceptionWrapper e) {      debugger.getProcessManager().setActiveThread(activeThread);      CUtilityFunctions.logException(e);      final String innerMessage="E00087: " + "Could not send step over command to the debug client";      final String innerDescription=CUtilityFunctions.createDescription("BinNavi could not send the step over command to the debug client.",new String[]{"There was a problem with the connection to the debug client."},new String[]{"The state of the debugged process remains unchanged."});      NaviErrorDialog.show(parent,innerMessage,innerDescription,e);    }  }}  }
class C{  @Bean public PasswordEncoder passwordEncoder(){  return new BCryptPasswordEncoder();}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  String aggregationType="mean";  int aggregationFactor=2;  int progress, oldProgress;  int rIn, cIn, rOut, cOut, r, c;  double value;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  aggregationFactor=Integer.parseInt(args[2]);  aggregationType=args[3].toLowerCase();  if (inputHeader.isEmpty() || outputHeader.isEmpty() || aggregationType.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  if (aggregationFactor < 2) {    aggregationFactor=2;  }  try {    WhiteboxRaster input=new WhiteboxRaster(inputHeader,"r");    double nodata=input.getNoDataValue();    int nColsIn=input.getNumberColumns();    int nRowsIn=input.getNumberRows();    int nColsOut=(int)((double)nColsIn / aggregationFactor);    int nRowsOut=(int)((double)nRowsIn / aggregationFactor);    double north=input.getNorth();    double south=north - (input.getCellSizeY() * aggregationFactor * nRowsOut);    double west=input.getWest();    double east=west + (input.getCellSizeX() * aggregationFactor * nColsOut);    WhiteboxRaster output=new WhiteboxRaster(outputHeader,north,south,east,west,nRowsOut,nColsOut,input.getDataScale(),input.getDataType(),0,nodata);    output.setPreferredPalette(input.getPreferredPalette());    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    if (aggregationType.equals("mean")) {      oldProgress=-1;      for (rOut=0; rOut < nRowsOut; rOut++) {        for (cOut=0; cOut < nColsOut; cOut++) {          rIn=rOut * aggregationFactor;          cIn=cOut * aggregationFactor;          double stat=0;          double count=0;          for (r=rIn; r < rIn + aggregationFactor; r++) {            for (c=cIn; c < cIn + aggregationFactor; c++) {              value=input.getValue(r,c);              if (value != nodata) {                stat+=value;                count++;              }            }          }          if (count > 0) {            stat=stat / count;            output.setValue(rOut,cOut,stat);          } else {            output.setValue(rOut,cOut,nodata);          }        }        progress=(int)(100f * rOut / (nRowsOut - 1));        if (progress > oldProgress) {          oldProgress=progress;          updateProgress(progress);        }      }    } else     if (aggregationType.equals("sum")) {      oldProgress=-1;      for (rOut=0; rOut < nRowsOut; rOut++) {        for (cOut=0; cOut < nColsOut; cOut++) {          rIn=rOut * aggregationFactor;          cIn=cOut * aggregationFactor;          double stat=0;          double count=0;          for (r=rIn; r < rIn + aggregationFactor; r++) {            for (c=cIn; c < cIn + aggregationFactor; c++) {              value=input.getValue(r,c);              if (value != nodata) {                stat+=value;                count++;              }            }          }          if (count > 0) {            output.setValue(rOut,cOut,stat);          } else {            output.setValue(rOut,cOut,nodata);          }        }        progress=(int)(100f * rOut / (nRowsOut - 1));        if (progress > oldProgress) {          oldProgress=progress;          updateProgress(progress);        }      }    } else     if (aggregationType.contains("max")) {      oldProgress=-1;      for (rOut=0; rOut < nRowsOut; rOut++) {        for (cOut=0; cOut < nColsOut; cOut++) {          rIn=rOut * aggregationFactor;          cIn=cOut * aggregationFactor;          double stat=Double.NEGATIVE_INFINITY;          double count=0;          for (r=rIn; r < rIn + aggregationFactor; r++) {            for (c=cIn; c < cIn + aggregationFactor; c++) {              value=input.getValue(r,c);              if (value != nodata) {                if (value > stat) {                  stat=value;                }                count++;              }            }          }          if (count > 0) {            output.setValue(rOut,cOut,stat);          } else {            output.setValue(rOut,cOut,nodata);          }        }        progress=(int)(100f * rOut / (nRowsOut - 1));        if (progress > oldProgress) {          oldProgress=progress;          updateProgress(progress);        }      }    } else     if (aggregationType.contains("min")) {      oldProgress=-1;      for (rOut=0; rOut < nRowsOut; rOut++) {        for (cOut=0; cOut < nColsOut; cOut++) {          rIn=rOut * aggregationFactor;          cIn=cOut * aggregationFactor;          double stat=Double.POSITIVE_INFINITY;          double count=0;          for (r=rIn; r < rIn + aggregationFactor; r++) {            for (c=cIn; c < cIn + aggregationFactor; c++) {              value=input.getValue(r,c);              if (value != nodata) {                if (value < stat) {                  stat=value;                }                count++;              }            }          }          if (count > 0) {            output.setValue(rOut,cOut,stat);          } else {            output.setValue(rOut,cOut,nodata);          }        }        progress=(int)(100f * rOut / (nRowsOut - 1));        if (progress > oldProgress) {          oldProgress=progress;          updateProgress(progress);        }      }    } else     if (aggregationType.contains("range")) {      oldProgress=-1;      for (rOut=0; rOut < nRowsOut; rOut++) {        for (cOut=0; cOut < nColsOut; cOut++) {          rIn=rOut * aggregationFactor;          cIn=cOut * aggregationFactor;          double min=Double.POSITIVE_INFINITY;          double max=Double.NEGATIVE_INFINITY;          double count=0;          for (r=rIn; r < rIn + aggregationFactor; r++) {            for (c=cIn; c < cIn + aggregationFactor; c++) {              value=input.getValue(r,c);              if (value != nodata) {                if (value < min) {                  min=value;                }                if (value > max) {                  max=value;                }                count++;              }            }          }          if (count > 0) {            output.setValue(rOut,cOut,(max - min));          } else {            output.setValue(rOut,cOut,nodata);          }        }        progress=(int)(100f * rOut / (nRowsOut - 1));        if (progress > oldProgress) {          oldProgress=progress;          updateProgress(progress);        }      }    }    output.addMetadataEntry("Created on " + new Date());    input.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public void removeEventListener(IRcsServiceRegistrationListener listener){synchronized (mLock) {    mRcsServiceRegistrationEventBroadcaster.removeEventListener(listener);  }}  }
class C{  public ElemTemplateElement appendChild(ElemTemplateElement newChild){  error(XSLTErrorResources.ER_CANNOT_ADD,new Object[]{newChild.getNodeName(),this.getNodeName()});  return null;}  }
class C{  public DateTime toDateTimeISO(){  return new DateTime(getMillis(),ISOChronology.getInstance(getZone()));}  }
class C{  public RotateStrategyByTimeOfDay(final long time){  final GregorianCalendar cal=new GregorianCalendar();  cal.set(Calendar.MILLISECOND,0);  cal.set(Calendar.SECOND,0);  cal.set(Calendar.MINUTE,0);  cal.set(Calendar.HOUR_OF_DAY,0);  m_currentRotation=cal.getTime().getTime() + time;  if (m_currentRotation > System.currentTimeMillis()) {    m_currentRotation-=TIME_24_HOURS;  }}  }
class C{  public void clearAllEarcons(){  mEarcons.clear();}  }
class C{  public static Distribution guessC(DataSet d){  return RBFKernel.guessSigma(d);}  }
class C{  public Entry(int hash,String key,int value,Entry next){  this.hash=hash;  this.key=key;  this.value=value;  this.next=next;}  }
class C{  public static void populateField(int fieldSize,ByteProvider byteProvider,Object object,String fieldName) throws IOException {  doPopulateField(fieldSize,byteProvider,object,fieldName);}  }
class C{  public NemProperty(final Deserializer deserializer){  this.name=deserializer.readString("name");  this.value=deserializer.readString("value");}  }
class C{  public void testGetFarmDeployDir(){  this.container.getConfiguration().setProperty(JBossPropertySet.CLUSTERED,"true");  String expected=this.fileHandler.append(CONFIGURATION_HOME,"farm");  JBossInstalledLocalDeployer deployer=new JBossInstalledLocalDeployer(this.container);  assertEquals(expected,deployer.getDeployableDir(null));}  }
class C{  private void waitForKey(Object key){  if (isLoaded()) {    return;  }  String filename=getFilenameForKey((String)key);  Future<CacheHeader> future=mLoadingFiles.get(filename);  if (future != null) {    try {      future.get();    } catch (    InterruptedException ignored) {    }catch (    ExecutionException ignored) {    }  }}  }
class C{  public static byte[] hexString2ByteArray(String hex) throws IllegalArgumentException {  if (hex.length() % 2 != 0)   hex='0' + hex;  char[] chars=hex.toCharArray();  byte[] bytes=new byte[chars.length / 2];  int byteCnt=0;  for (int i=0; i < chars.length; i+=2) {    int newByte=0;    newByte|=hexCharToByte(chars[i]);    newByte<<=4;    newByte|=hexCharToByte(chars[i + 1]);    bytes[byteCnt]=(byte)newByte;    byteCnt++;  }  return bytes;}  }
class C{  protected void engineUpdate(ByteBuffer input){  if (first == true) {    md.update(k_ipad);    first=false;  }  md.update(input);}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  public void rollbackExportMaskZoningMapUpdate(URI exportGroupURI,URI storageURI,String token) throws ControllerException {  _log.info("START - rollbackExportMaskZoningMapUpdate");  WorkflowStepCompleter.stepExecuting(token);  WorkflowStepCompleter.stepSucceded(token);  _log.info("END - rollbackExportMaskZoningMapUpdate");}  }
class C{  @Override public QueryRefAmp addQuery(String address,ResultChain<?> result,ClassLoader loaderCaller){  return queryMap().addQuery(address,result,loaderCaller);}  }
class C{  public HashDocSet(int[] docs,int offset,int len,float inverseLoadFactor){  int tsize=Math.max(BitUtil.nextHighestPowerOfTwo(len),1);  if (tsize < len * inverseLoadFactor) {    tsize<<=1;  }  mask=tsize - 1;  table=new int[tsize];  for (int i=tsize - 1; i >= 0; i--)   table[i]=EMPTY;  int end=offset + len;  for (int i=offset; i < end; i++) {    put(docs[i]);  }  size=len;}  }
class C{  public String toString(){  Object target=getTarget();  String methodName=getMethodName();  Object[] arguments=getArguments();  if (arguments == null) {    arguments=emptyArray;  }  StringBuffer result=new StringBuffer(instanceName(target) + "." + methodName+ "(");  int n=arguments.length;  for (int i=0; i < n; i++) {    result.append(instanceName(arguments[i]));    if (i != n - 1) {      result.append(", ");    }  }  result.append(");");  return result.toString();}  }
class C{  private void applyTradingBonus(Player player){  player.incrementTradescore();}  }
class C{  public static boolean isIndeterminateLoner(GemFireCacheImpl cache){  boolean isLoner=cache.getDistributedSystem().isLoner();  boolean pdxConfigured=cache.getPdxPersistent();  return isLoner && !pdxConfigured;}  }
class C{  protected Shape createOuterFocus(final SegmentType segmentType,final int x,final int y,final int w,final int h){switch (segmentType) {case FIRST:    return shapeGenerator.createRoundRectangle(x - 2,y - 2,w + 3,h + 3,CornerSize.OUTER_FOCUS,CornerStyle.ROUNDED,CornerStyle.ROUNDED,CornerStyle.SQUARE,CornerStyle.SQUARE);case MIDDLE:  return shapeGenerator.createRectangle(x - 2,y - 2,w + 3,h + 3);case LAST:return shapeGenerator.createRoundRectangle(x - 2,y - 2,w + 3,h + 3,CornerSize.OUTER_FOCUS,CornerStyle.SQUARE,CornerStyle.SQUARE,CornerStyle.ROUNDED,CornerStyle.ROUNDED);default :return shapeGenerator.createRoundRectangle(x - 2,y - 2,w + 3,h + 3,CornerSize.OUTER_FOCUS);}}  }
class C{  public static String showArrayType(final int type){switch (type) {case VALUE_IS_INT_ARRAY:    return "VALUE_IS_INT_ARRAY";case VALUE_IS_BOOLEAN_ARRAY:  return "VALUE_IS_BOOLEAN_ARRAY";case VALUE_IS_KEY_ARRAY:return "VALUE_IS_KEY_ARRAY";case VALUE_IS_DOUBLE_ARRAY:return "VALUE_IS_DOUBLE_ARRAY";case VALUE_IS_MIXED_ARRAY:return "VALUE_IS_MIXED_ARRAY";case VALUE_IS_STRING_ARRAY:return "VALUE_IS_STRING_ARRAY";case VALUE_IS_OBJECT_ARRAY:return "VALUE_IS_OBJECT_ARRAY";default :return "not set";}}  }
class C{  public void clear(Class<?> contentType){  if (contentType != null)   cache.remove(contentType); else   cache.clear();}  }
class C{  public ZoneLayer(Set<Zone<T>> zones){  for (  Zone<T> z : zones) {    if (srid < 0) {      srid=z.getGeometry().getSRID();      crs=CRSUtils.getCRS(srid);    } else {      if (z.getGeometry().getSRID() != srid)       throw new RuntimeException("Cannot build a spatial index with zones that have different coordinate reference systems.");    }  }  this.zones=Collections.unmodifiableSet(zones);  quadtree=new Quadtree();  for (  Zone<T> zone : zones) {    quadtree.insert(zone.getGeometry().getEnvelopeInternal(),zone);  }}  }
class C{  private ServerBootstrap createServerBootStrap(){  if (floodlightProvider.getWorkerThreads() == 0) {    return new ServerBootstrap(new NioServerSocketChannelFactory(Executors.newCachedThreadPool(),Executors.newCachedThreadPool()));  } else {    return new ServerBootstrap(new NioServerSocketChannelFactory(Executors.newCachedThreadPool(),Executors.newCachedThreadPool(),floodlightProvider.getWorkerThreads()));  }}  }
class C{  public void testChoiceMissingIconErrorHandling(){  String xml="";  xml+=createStartMissionXml("start","Name");  xml+=createStartChoiceMomentXml("start",0.5,"Example ChoiceMoment Description","choice_2");  xml+=createChoiceXml("fire","Example Choice Description 1","start",true,false,"test_icon");  xml+=createChoiceXml("choice_2","Example Choice Description 2","start",false,false,null);  xml+=createEndChoiceMomentXml();  xml+=createEndMissionXml();  Utils.logDebug(TAG,xml);  InputStream momentInputStream=new ByteArrayInputStream(xml.getBytes());  mMission=new Mission(mMissionData);  boolean didMissionParseFail=false;  try {    mMission.readMoments(momentInputStream);  } catch (  MissionParseException e) {    e.printStackTrace();    didMissionParseFail=true;  }  Assert.assertEquals(true,didMissionParseFail);}  }
class C{  public static int convertToPix(float density,int sizeInDips){  float size=sizeInDips * density;  return (int)size;}  }
class C{  public StandardErrorPrinter(){  this(InternalLogWriter.ALL_LEVEL);}  }
class C{  public void write(char[] cbuf,int off,int len) throws IOException {  if (writer != null) {    writer.write(cbuf,off,len);  } else {    ensureOpen();    if ((off < 0) || (off > cbuf.length) || (len < 0)|| ((off + len) > cbuf.length)|| ((off + len) < 0)) {      throw new IndexOutOfBoundsException();    } else     if (len == 0) {      return;    }    if (len >= bufferSize - nextChar)     reAllocBuff(len);    System.arraycopy(cbuf,off,cb,nextChar,len);    nextChar+=len;  }}  }
class C{  private String extractSpan(String spans,int start,int end) throws IndexOutOfBoundsException {  int offset=getFirstSpanOffset(spans);  assert (start >= offset);  assert (end >= offset);  spans+=HTML_OPEN_SPAN;  int substart=getSpanPos(spans,start - offset);  int subend=getSpanPos(spans,end - offset + 1);  return spans.substring(substart,subend);}  }
class C{  protected void refreshSchemas(){  tableSchemaByTableId.clear();  this.tables.tableIds().forEach(null);}  }
class C{  private void appendTrimmed(final String s){  boolean skip=true;  for (int i=0; i < s.length(); i++) {    final char c=s.charAt(i);    if (c != ' ') {      skip=false;    }    if (!skip) {      append(c);    }  }}  }
class C{  public static String encodeAll(final String unescaped,final String charset) throws URIException {  return encode(unescaped,empty,charset);}  }
class C{  public static Map<String,Object> clearCacheLine(DispatchContext dctx,Map<String,? extends Object> context){  Delegator delegator=dctx.getDelegator();  Boolean distributeBool=(Boolean)context.get("distribute");  boolean distribute=false;  if (distributeBool != null)   distribute=distributeBool.booleanValue();  if (context.containsKey("value")) {    GenericValue value=(GenericValue)context.get("value");    if (Debug.infoOn())     Debug.logInfo("Got a clear cache line by value service call; entityName: " + value.getEntityName(),module);    if (Debug.verboseOn())     Debug.logVerbose("Got a clear cache line by value service call; value: " + value,module);    delegator.clearCacheLine(value,distribute);  } else   if (context.containsKey("dummyPK")) {    GenericEntity dummyPK=(GenericEntity)context.get("dummyPK");    if (Debug.infoOn())     Debug.logInfo("Got a clear cache line by dummyPK service call; entityName: " + dummyPK.getEntityName(),module);    if (Debug.verboseOn())     Debug.logVerbose("Got a clear cache line by dummyPK service call; dummyPK: " + dummyPK,module);    delegator.clearCacheLineFlexible(dummyPK,distribute);  } else   if (context.containsKey("primaryKey")) {    GenericPK primaryKey=(GenericPK)context.get("primaryKey");    if (Debug.infoOn())     Debug.logInfo("Got a clear cache line by primaryKey service call; entityName: " + primaryKey.getEntityName(),module);    if (Debug.verboseOn())     Debug.logVerbose("Got a clear cache line by primaryKey service call; primaryKey: " + primaryKey,module);    delegator.clearCacheLine(primaryKey,distribute);  } else   if (context.containsKey("condition")) {    String entityName=(String)context.get("entityName");    EntityCondition condition=(EntityCondition)context.get("condition");    if (Debug.infoOn())     Debug.logInfo("Got a clear cache line by condition service call; entityName: " + entityName,module);    if (Debug.verboseOn())     Debug.logVerbose("Got a clear cache line by condition service call; condition: " + condition,module);    delegator.clearCacheLineByCondition(entityName,condition,distribute);  }  return ServiceUtil.returnSuccess();}  }
class C{  public Bundler putBooleanArray(String key,boolean[] value){  bundle.putBooleanArray(key,value);  return this;}  }
class C{  public QueryInvocationTargetException(String msg){  super(msg);}  }
class C{  public Vector2D multiply(double n){  return new Vector2D(this.x * n,this.y * n);}  }
class C{  public boolean isObligationType(ClassDescriptor classDescriptor){  try {    return getObligationByType(BCELUtil.getObjectTypeInstance(classDescriptor.toDottedClassName())) != null;  } catch (  ClassNotFoundException e) {    Global.getAnalysisCache().getErrorLogger().reportMissingClass(e);    return false;  }}  }
class C{  public String type(){  return type;}  }
class C{  public RealTimeClient async(){  async=true;  return this;}  }
class C{  public void unmuteSubscribedMedia(String remoteName,String participantId) throws RoomException {  log.debug("Request [UNMUTE_SUBSCRIBED] remoteParticipant={} ({})",remoteName,participantId);  Participant participant=getParticipant(participantId);  String name=participant.getName();  Room room=participant.getRoom();  Participant senderParticipant=room.getParticipantByName(remoteName);  if (senderParticipant == null) {    log.warn("PARTICIPANT {}: Requesting to unmute streaming from {} " + "in room {} but user could not be found",name,remoteName,room.getName());    throw new RoomException(Code.USER_NOT_FOUND_ERROR_CODE,"User " + remoteName + " not found in room "+ room.getName());  }  if (!senderParticipant.isStreaming()) {    log.warn("PARTICIPANT {}: Requesting to unmute streaming from {} " + "in room {} but user is not streaming media",name,remoteName,room.getName());    throw new RoomException(Code.USER_NOT_STREAMING_ERROR_CODE,"User '" + remoteName + " not streaming media in room '"+ room.getName()+ "'");  }  participant.unmuteSubscribedMedia(senderParticipant);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:48.669 -0500",hash_original_method="49FE93A821CCACEE6FBD2E0E30BEDB29",hash_generated_method="070F2E5A32E76C90B92C01E8D3F9080E") public BufferedHeader(final CharArrayBuffer buffer) throws ParseException {  super();  if (buffer == null) {    throw new IllegalArgumentException("Char array buffer may not be null");  }  int colon=buffer.indexOf(':');  if (colon == -1) {    throw new ParseException("Invalid header: " + buffer.toString());  }  String s=buffer.substringTrimmed(0,colon);  if (s.length() == 0) {    throw new ParseException("Invalid header: " + buffer.toString());  }  this.buffer=buffer;  this.name=s;  this.valuePos=colon + 1;}  }
class C{  public boolean incrementAppOpenedCount(){  initAndEdit();  final int appOpenedCount=getAppOpenedCount();  if (enableLog) {    Log.d(tag,"Count before updating " + appOpenedCount);  }  mEditor.putInt(KEYS.OPENED_TIMES_COUNT,(appOpenedCount + 1));  return commit();}  }
class C{  private void checkTrackLocation(int expectedPoint,int expectedPause,int expectedResume){  if (EndToEndTestUtils.isEmulator) {    int point=0;    int pause=0;    int resume=0;    MyTracksProviderUtils myTracksProviderUtils=MyTracksProviderUtils.Factory.get(trackListActivity.getApplicationContext());    long trackId=myTracksProviderUtils.getLastTrack().getId();    LocationIterator locationIterator=myTracksProviderUtils.getTrackPointLocationIterator(trackId,0,false,MyTracksProviderUtils.DEFAULT_LOCATION_FACTORY);    while (locationIterator.hasNext()) {      Location location=locationIterator.next();      double latitude=location.getLatitude();      if (latitude == TrackRecordingService.PAUSE_LATITUDE) {        pause++;      } else       if (latitude == TrackRecordingService.RESUME_LATITUDE) {        resume++;      } else {        point++;      }    }    assertEquals(expectedPoint,point);    assertEquals(expectedPause,pause);    assertEquals(expectedResume,resume);  }}  }
class C{  public static byte[] encode(byte[] data,int off,int length){  ByteArrayOutputStream bOut=new ByteArrayOutputStream();  try {    encoder.encode(data,off,length,bOut);  } catch (  Exception e) {    throw new EncoderException("exception encoding Hex string: " + e.getMessage(),e);  }  return bOut.toByteArray();}  }
class C{  public static Intent makeIntent(Context context,Uri videoUri){  return new Intent(context,UploadVideoService.class).setData(videoUri);}  }
class C{  Env<AttrContext> topLevelEnv(JCCompilationUnit tree){  Env<AttrContext> localEnv=new Env<AttrContext>(tree,new AttrContext());  localEnv.toplevel=tree;  localEnv.enclClass=predefClassDef;  tree.namedImportScope=new ImportScope(tree.packge);  tree.starImportScope=new StarImportScope(tree.packge);  localEnv.info.scope=tree.namedImportScope;  localEnv.info.lint=lint;  return localEnv;}  }
class C{  void recomposeImports(){  m_importNumber=getStylesheetRoot().getImportNumber(this);  StylesheetRoot root=getStylesheetRoot();  int globalImportCount=root.getGlobalImportCount();  m_importCountComposed=(globalImportCount - m_importNumber) - 1;  int count=getImportCount();  if (count > 0) {    m_endImportCountComposed+=count;    while (count > 0)     m_endImportCountComposed+=this.getImport(--count).getEndImportCountComposed();  }  count=getIncludeCountComposed();  while (count > 0) {    int imports=getIncludeComposed(--count).getImportCount();    m_endImportCountComposed+=imports;    while (imports > 0)     m_endImportCountComposed+=getIncludeComposed(count).getImport(--imports).getEndImportCountComposed();  }}  }
class C{  public String cancelLocalize(){  setLocalizeVisible(false);  menuBean.setCurrentPageLink(initUrl);  return null;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NamedNodeMap attributes;  Element element;  Attr attribute;  NodeList elementList;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagNameNS("http://www.nist.gov","address");  element=(Element)elementList.item(1);  attributes=element.getAttributes();  element.removeAttributeNS("http://www.nist.gov","domestic");{    boolean success=false;    try {      attribute=(Attr)attributes.removeNamedItemNS("http://www.nist.gov","domestic");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NOT_FOUND_ERR);    }    assertTrue("throw_NOT_FOUND_ERR",success);  }}  }
class C{  @org.junit.Test public void testKeywordMatching(){  Bot bot=Bot.createInstance();  Language language=bot.mind().getThought(Language.class);  language.setLearningMode(LearningMode.Disabled);  TextEntry text=bot.awareness().getSense(TextEntry.class);  List<String> output=registerForOutput(text);  text.input("this is a very very long sentence that is very long, yes, very long, it has one two three four five size seven eight nine ten or more words");  String response=waitForOutput(output);  if (!response.equals("how long?")) {    fail("did not match: " + response);  }  text.input("ok");  response=waitForOutput(output);  text.input("this is a very very long sentence");  response=waitForOutput(output);  if (!response.equals("how long?")) {    fail("did not match: " + response);  }  text.input("ok");  response=waitForOutput(output);  text.input("very long sentence");  response=waitForOutput(output);  if (!response.equals("how long?")) {    fail("did not match: " + response);  }  text.input("ok");  response=waitForOutput(output);  text.input("sentence");  response=waitForOutput(output);  if (!response.equals("how long?")) {    fail("did not match: " + response);  }  bot.shutdown();}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.PROPERTY_NAME_OWNER;}  }
class C{  public void loadSheet(BufferedReader reader) throws IOException, ServiceException {  SpreadsheetFeed feed=service.getFeed(factory.getSpreadsheetsFeedUrl(),SpreadsheetFeed.class);  List<SpreadsheetEntry> spreadsheets=feed.getEntries();  int spreadsheetIndex=getIndexFromUser(reader,spreadsheets,"spreadsheet");  SpreadsheetEntry spreadsheet=feed.getEntries().get(spreadsheetIndex);  worksheetFeedUrl=spreadsheet.getWorksheetFeedUrl();  System.out.println("Spreadsheet loaded.");}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(CONSTRUCT)) {    return;  }  ElementCreator constructBuilder=registry.build(CONSTRUCT).setContentRequired(false);  constructBuilder.addAttribute(TYPE);  constructBuilder.addAttribute(SRC);  constructBuilder.addAttribute(XML_LANG);  registry.build(KEY);}  }
class C{  protected void keepShapeHighlighted(boolean tf){  if (tf) {    this.lastAttrs=((Attributable)this.editor.getShape()).getAttributes();    ((Attributable)this.editor.getShape()).setAttributes(((Attributable)this.editor.getShape()).getHighlightAttributes());  } else {    ((Attributable)this.editor.getShape()).setAttributes(this.lastAttrs);  }}  }
class C{  public static ReilFunction translate(final View view) throws InternalTranslationException {  Preconditions.checkNotNull(view,"Error: View argument can't be null");  try {    return new ReilFunction(m_translator.translate(new StandardEnvironment(),view.getNative()));  } catch (  final com.google.security.zynamics.reil.translators.InternalTranslationException e) {    throw new InternalTranslationException(e,InstructionFinders.findInstruction(view,e.getInstruction()));  }}  }
class C{  public synchronized final Map<K,V> snapshot(){  return new LinkedHashMap<K,V>(map);}  }
class C{  public String toString(Element el,String attributeName,String defaultValue){  String value=el.getAttribute(attributeName);  return (value == null) ? defaultValue : value;}  }
class C{  public lalr_transition next(){  return _next;}  }
class C{  public boolean isRingOwnedBy(String dcId){  Map<InetAddress,Float> ownerships;  try {    ownerships=effectiveOwnership(null);  } catch (  IllegalStateException ex) {    ownerships=getOwnership();  }  try {    for (    Map.Entry<InetAddress,Float> ownership : ownerships.entrySet()) {      String endpoint=ownership.getKey().getHostAddress();      String dc=snitchProxy.getDatacenter(endpoint);      if (dc.equals(dcId)) {        log.info("endpoint {} active on ring",endpoint);        return true;      }    }  } catch (  UnknownHostException e) {    throw new RuntimeException(e);  }  return false;}  }
class C{  private OptionsTreeNode addOption(final String parentKey,final String childKey,final String label,@SuppressWarnings("unchecked") Class<? extends AbstractPaneItem>... clazzes){  OptionsTreeNode node=TREE_MANAGER.addNode(parentKey,childKey,label,label + " " + extractLabels(clazzes));  node.setClasses(clazzes);  keysToNodes.put(childKey,node);  return node;}  }
class C{  public void message(@Nullable String msg){  this.msg=msg;}  }
class C{  public static final void reverseWinding(List<Vector2> points){  if (points == null)   throw new NullPointerException(Messages.getString("geometry.nullPointList"));  int size=points.size();  if (size == 1 || size == 0)   return;  Collections.reverse(points);}  }
class C{  public void clearCache(){  cache.clearAllCache();}  }
class C{  private byte[] responseToBytes(Request<?> request,HttpResponse response) throws IOException, HttpException {  PoolingByteArrayOutputStream bytes=new PoolingByteArrayOutputStream(ByteArrayPool.get(),(int)response.getContentLength());  byte[] buffer=null;  long totalSize=(int)response.getContentLength();  try {    InputStream in=response.getContentStream();    if (in == null) {      throw new HttpException("server error",HttpError.ERROR_SERVER);    }    buffer=ByteArrayPool.get().getBuf(1024);    int count;    int transferredBytesSize=0;    while ((count=in.read(buffer)) != -1) {      bytes.write(buffer,0,count);      transferredBytesSize+=count;      request.onRequestDownloadProgress(transferredBytesSize,totalSize);    }    return bytes.toByteArray();  }  finally {    try {      response.getContentStream().close();    } catch (    IOException e) {      CLog.d("Error occured when calling consumingContent");    }    ByteArrayPool.get().returnBuf(buffer);    bytes.close();  }}  }
class C{  protected void onSizeChanged(int w,int h,int oldw,int oldh){  super.onSizeChanged(w,h,oldw,oldh);  layoutH=h;  layoutW=w;}  }
class C{  public List convert(final String values){  return getOptions(values);}  }
class C{  public void saveAllToConfig(){  Set<ConfigManager> managersToSave=new HashSet<ConfigManager>(managers.values());  for (  ConfigManager manager : managersToSave) {    manager.saveDataToConfig();  }}  }
class C{  protected boolean includeAuthorityInRequestLine(){  return connection == null ? policy.usingProxy() : connection.getRoute().getProxy().type() == Proxy.Type.HTTP;}  }
class C{  public static boolean isConnectedWifi(Context context){  NetworkInfo info=Connectivity.getNetworkInfo(context);  return (info != null && info.isConnected() && info.getType() == ConnectivityManager.TYPE_WIFI);}  }
class C{  @Override public boolean canUndo(){  return ((ArffSortedTableModel)m_TableArff.getModel()).canUndo();}  }
class C{  public String parseFile(File file){  log.config(file.getAbsolutePath());  String line=null;  try {    BufferedReader in=new BufferedReader(new InputStreamReader(new FileInputStream(file),Ini.getCharset()),10240);    String errMsg="";    int lineNo=1;    while ((line=in.readLine()) != null && errMsg.length() == 0) {      errMsg=parseLine(line,lineNo);      lineNo++;    }    line=null;    in.close();    if (errMsg.length() != 0)     return errMsg;  } catch (  Exception ioe) {    String s=ioe.getLocalizedMessage();    if (s == null || s.length() == 0)     s=ioe.toString();    return "Parse Error: Line=" + line + " - "+ s;  }  return "";}  }
class C{  public static boolean isPubid(int c){  return c < 0x10000 && (CHARS[c] & MASK_PUBID) != 0;}  }
class C{  public BindingsConfigurationProvider overrideRequires(URL url){  requires=url;  return this;}  }
class C{  @Override public void apply(World world,Entity entity,Random random,Object data){  final IEffect effect=getRandomItem(random);  if (effect != null)   effect.apply(world,entity,random,data);}  }
class C{  public void appendValues(T... values){  if (isRootNode()) {    throw new IllegalArgumentException("Cannot set a values on the root node.");  }  if (values != null) {    this.values.addAll(Arrays.asList(values));  }}  }
class C{  public static void decodeFileToFile(String infile,String outfile){  byte[] decoded=Base64.decodeFromFile(infile);  java.io.OutputStream out=null;  try {    out=new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));    out.write(decoded);  } catch (  java.io.IOException ex) {    ex.printStackTrace();  } finally {    try {      out.close();    } catch (    Exception ex) {    }  }}  }
class C{  @Override protected final void closeAll() throws AdeException {  if (m_adeExt != null) {    logger.info("Closing Ade Ext");    m_adeExt.close();    m_adeExt=null;  }  super.closeAll();}  }
class C{  public CategoryAxis(){  this(null);}  }
class C{  void recycleBackgroundTask(@NonNull BackgroundTask task){  task.recycle();  mExecutingTaskWorkQueue.remove(task);  mBackgroundTaskWorkQueue.offer(task);}  }
class C{  public CStatusColumnRenderer(){  setOpaque(true);}  }
class C{  @Override protected void finalize() throws Throwable {  try {    dispose();  }  finally {    super.finalize();  }}  }
class C{  public FakeJobService verifyExecutingProject(String executingProject){  this.executingProject=executingProject;  return this;}  }
class C{  public void replace(Name name,int type,long ttl,String record) throws IOException {  delete(name,type);  add(name,type,ttl,record);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:43.325 -0500",hash_original_method="56956838CAE54304087255CB840E79B1",hash_generated_method="D82620E518F3C5A9651F630088CD1A5F") public TestGrouping removePackagesRecursive(String... packageNames){  for (  String packageName : packageNames) {    testCaseClasses.removeAll(testCaseClassesInPackage(packageName));  }  return this;}  }
class C{  public InputStream newInputStream(int index) throws IOException {synchronized (DiskLruCache.this) {    if (entry.currentEditor != this) {      throw new IllegalStateException();    }    if (!entry.readable) {      return null;    }    return new FileInputStream(entry.getCleanFile(index));  }}  }
class C{  public static boolean isIndependentPooledMudholkerGeorge2(List<IndependenceTest> independenceTests,Node x,Node y,List<Node> condSet){  double alpha=independenceTests.get(0).getAlpha();  List<Double> pValues=getAvailablePValues(independenceTests,x,y,condSet);  double c=Math.sqrt(3 * (5 * pValues.size() + 4) / (double)(pValues.size() * Math.pow(Math.PI,2) * (5 * pValues.size() + 2)));  double tm=0.0;  for (  double pk : pValues) {    tm+=-c * Math.log(pk / (1 - pk));  }  double p=2.0 * (1.0 - ProbUtils.tCdf(Math.abs(tm),5 * pValues.size() + 4));  return (p > alpha);}  }
class C{  public static DateTime parseDateTimeChoice(String value) throws NumberFormatException {  NumberFormatException exception;  try {    return DateTime.parseDateTime(value);  } catch (  NumberFormatException e) {    exception=e;  }  try {    return DateTime.parseDate(value);  } catch (  NumberFormatException e) {    exception=e;  }  throw exception;}  }
class C{  public boolean isDouble(){  return (m_Double != null);}  }
class C{  public List<String> notes(){  return notes;}  }
class C{  synchronized public static List<String> formerIdentities(){  if (instance == null) {    instance=new NodeIdentity();    log.info("Using {} as the JMRI Node identity",instance.getIdentity());  }  return instance.getFormerIdentities();}  }
class C{  public static String generateXPath(String childXPath){  return childXPath.substring(0,childXPath.lastIndexOf("/"));}  }
class C{  public boolean isUnsafe(){  return (this.status == DroidsafeIssueResolutionStatus.UNSAFE);}  }
class C{  private void createQuadProgram() throws IOException {  int program=glCreateProgram();  int vshader=createShader("org/lwjgl/demo/opengl/raytracing/quad.vs",GL_VERTEX_SHADER,"330");  int fshader=createShader("org/lwjgl/demo/opengl/raytracing/quad.fs",GL_FRAGMENT_SHADER,"330");  glAttachShader(program,vshader);  glAttachShader(program,fshader);  glBindAttribLocation(program,0,"vertex");  glBindFragDataLocation(program,0,"color");  glLinkProgram(program);  int linked=glGetProgrami(program,GL_LINK_STATUS);  String programLog=glGetProgramInfoLog(program);  if (programLog.trim().length() > 0) {    System.err.println(programLog);  }  if (linked == 0) {    throw new AssertionError("Could not link program");  }  this.quadProgram=program;}  }
class C{  public static void saveDefaultsToProperties(Properties properties){  properties.setProperty("MapElement.Figure.defaultColor",StringUtil.colorToString(defaultColor));  properties.setProperty("MapElement.Figure.defaultSize",Double.toString(defaultSize));  properties.setProperty("MapElement.Figure.defaultShapeType",defaultShapeType.toString());  properties.setProperty("MapElement.Figure.defaultLabelVisible",Boolean.toString(defaultLabelVisible));  properties.setProperty("MapElement.Figure.defaultAutoScale",Boolean.toString(defaultAutoScale));  properties.setProperty("MapElement.Figure.defaultSurfaceNormalVisible",Boolean.toString(defaultSurfaceNormalVisible));  properties.setProperty("MapElement.Figure.defaultAzimuth",Double.toString(defaultAzimuth));  properties.setProperty("MapElement.Figure.defaultTilt",Double.toString(defaultTilt));}  }
class C{  public ExtrudedPolygon(){  this.boundaries=new ArrayList<List<? extends LatLon>>();  this.boundaries.add(new ArrayList<LatLon>());}  }
class C{  public void deleteTransportZone(String id,FutureCallback<Void> responseCallback) throws IOException {  deleteAsync(TRANSPORT_ZONES_BASE_PATH + "/" + id,HttpStatus.SC_OK,responseCallback);}  }
class C{  public IndentingWriter(Writer out,int indentStep,int tabSize){  super(out);  if (indentStep < 0) {    throw new IllegalArgumentException("negative indent step");  }  if (tabSize < 0) {    throw new IllegalArgumentException("negative tab size");  }  this.indentStep=indentStep;  this.tabSize=tabSize;}  }
class C{  public AccessTokensBuilder refreshPercentLeft(final int refreshPercentLeft){  checkLock();  this.refreshPercentLeft=refreshPercentLeft;  return this;}  }
class C{  public long forceGetValueAsLong(long defaultValue){  long[] l=getValueAsLongs();  if (l != null && l.length >= 1) {    return l[0];  }  byte[] b=getValueAsBytes();  if (b != null && b.length >= 1) {    return b[0];  }  Rational[] r=getValueAsRationals();  if (r != null && r.length >= 1 && r[0].getDenominator() != 0) {    return (long)r[0].toDouble();  }  return defaultValue;}  }
class C{  public boolean hasValueString(){  return super.hasAttribute(VALUE_STRING);}  }
class C{  public static String encodeWebSafe(byte[] source,boolean doPadding){  return encode(source,0,source.length,WEBSAFE_ALPHABET,doPadding);}  }
class C{  public final long readLong(){  read(tempBuffer,0,8);  return (((long)tempBuffer[0] << 56) + ((long)(tempBuffer[1] & 255) << 48) + ((long)(tempBuffer[2] & 255) << 40)+ ((long)(tempBuffer[3] & 255) << 32)+ ((long)(tempBuffer[4] & 255) << 24)+ ((tempBuffer[5] & 255) << 16)+ ((tempBuffer[6] & 255) << 8)+ ((tempBuffer[7] & 255) << 0));}  }
class C{  public String storagePolicyKeyAndVersionToString(StoragePolicyKey storagePolicyKey,Integer storagePolicyVersion){  return String.format("namespace: \"%s\", storagePolicyName: \"%s\", storagePolicyVersion: \"%d\"",storagePolicyKey.getNamespace(),storagePolicyKey.getStoragePolicyName(),storagePolicyVersion);}  }
class C{  public boolean isInDispute(){  Object oo=get_Value(COLUMNNAME_IsInDispute);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void initializeZeroDocVectors() throws IOException {  VerbatimLogger.info("Initializing new document vector store ... \n");  for (int i=0; i < luceneUtils.getNumDocs(); ++i) {    String externalDocId=luceneUtils.getExternalDocId(i);    Vector docVector=VectorFactory.createZeroVector(flagConfig.vectortype(),flagConfig.dimension());    this.docVectors.putVector(externalDocId,docVector);  }}  }
class C{  public void addEnumClass(String name,Class c){  enumClassToNameMap.put(c,name);  nameToEnumClassMap.put(name,c);}  }
class C{  public IntegerProperty(Integer value){  super(value);}  }
class C{  public static long zeroLowerBits(long bits,int nBits){  long invMask=(1L << nBits) - 1L;  long mask=~invMask;  long zeroed=bits & mask;  return zeroed;}  }
class C{  public boolean isAppendTransients(){  return this.appendTransients;}  }
class C{  private int[][] generateWorkingKey(byte[] key,boolean forEncryption){  int KC=key.length / 4;  int t;  if (((KC != 4) && (KC != 6) && (KC != 8)) || ((KC * 4) != key.length)) {    throw new IllegalArgumentException("Key length not 128/192/256 bits.");  }  ROUNDS=KC + 6;  int[][] W=new int[ROUNDS + 1][4];  t=0;  int i=0;  while (i < key.length) {    W[t >> 2][t & 3]=(key[i] & 0xff) | ((key[i + 1] & 0xff) << 8) | ((key[i + 2] & 0xff) << 16)| (key[i + 3] << 24);    i+=4;    t++;  }  int k=(ROUNDS + 1) << 2;  for (i=KC; (i < k); i++) {    int temp=W[(i - 1) >> 2][(i - 1) & 3];    if ((i % KC) == 0) {      temp=subWord(shift(temp,8)) ^ rcon[(i / KC) - 1];    } else     if ((KC > 6) && ((i % KC) == 4)) {      temp=subWord(temp);    }    W[i >> 2][i & 3]=W[(i - KC) >> 2][(i - KC) & 3] ^ temp;  }  if (!forEncryption) {    for (int j=1; j < ROUNDS; j++) {      for (i=0; i < 4; i++) {        W[j][i]=inv_mcol(W[j][i]);      }    }  }  return W;}  }
class C{  @Override public void dispose(){  m_bookmarkTable.dispose();}  }
class C{  @Override public void writeShort(int s) throws IOException {  this.bufferEncoder.writeShort(s);}  }
class C{  @Override public void validateTimestamps(){  for (  final TimestampToken timestampToken : getContentTimestamps()) {    final byte[] timestampBytes=getContentTimestampData(timestampToken);    timestampToken.matchData(timestampBytes);  }  for (  final TimestampToken timestampToken : getSignatureTimestamps()) {    final byte[] timestampBytes=getSignatureTimestampData(timestampToken,null);    timestampToken.matchData(timestampBytes);  }  for (  final TimestampToken timestampToken : getTimestampsX1()) {    final byte[] timestampBytes=getTimestampX1Data(timestampToken,null);    timestampToken.matchData(timestampBytes);  }  for (  final TimestampToken timestampToken : getTimestampsX2()) {    final byte[] timestampBytes=getTimestampX2Data(timestampToken,null);    timestampToken.matchData(timestampBytes);  }  for (  final TimestampToken timestampToken : getArchiveTimestamps()) {    final byte[] timestampData=getArchiveTimestampData(timestampToken,null);    timestampToken.matchData(timestampData);  }}  }
class C{  public void put(String key,InputStream stream,String name){  put(key,stream,name,null);}  }
class C{  protected void configEpsilon(Parameterization config){  DoubleParameter epsilonP=new DoubleParameter(DBSCAN.Parameterizer.EPSILON_ID).addConstraint(CommonConstraints.GREATER_EQUAL_ZERO_DOUBLE);  if (config.grab(epsilonP)) {    settings.epsilon=epsilonP.doubleValue();  }}  }
class C{  @Override public void actionPerformed(ActionEvent event){  boolean wantToFireDataStructureChanged=false;  try {    if (mainFrame != null) {      mainFrame.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));    }    if (dataProvider != null) {      controller.getModel().setUserPreference(CoreModel.PREVIOUS_UNDO_CHANGES_TEXT,dataProvider.getPreviousUndoChangesText());    }    String previousLanguageCode=dataProvider.getPreviousUserLanguageCode();    String newLanguageCode=dataProvider.getNewUserLanguageCode();    controller.getModel().setUserPreference(CoreModel.PREVIOUS_USER_LANGUAGE_CODE,previousLanguageCode);    if (previousLanguageCode != null && !previousLanguageCode.equals(newLanguageCode)) {      controller.getModel().setUserPreference(CoreModel.USER_LANGUAGE_CODE,newLanguageCode);      wantToFireDataStructureChanged=true;    }    String openUriDialog=dataProvider.getOpenUriDialog();    if (openUriDialog != null) {      controller.getModel().setUserPreference(BitcoinModel.OPEN_URI_SHOW_DIALOG,openUriDialog);    }    String openUriUseUri=dataProvider.getOpenUriUseUri();    if (openUriUseUri != null) {      controller.getModel().setUserPreference(BitcoinModel.OPEN_URI_USE_URI,openUriUseUri);    }    boolean fontHasChanged=false;    String previousFontName=dataProvider.getPreviousFontName();    String newFontName=dataProvider.getNewFontName();    controller.getModel().setUserPreference(CoreModel.PREVIOUS_FONT_NAME,previousFontName);    if (newFontName != null) {      controller.getModel().setUserPreference(CoreModel.FONT_NAME,newFontName);      if (!newFontName.equals(previousFontName)) {        fontHasChanged=true;      }    }    String previousFontStyle=dataProvider.getPreviousFontStyle();    String newFontStyle=dataProvider.getNewFontStyle();    controller.getModel().setUserPreference(CoreModel.PREVIOUS_FONT_STYLE,previousFontStyle);    if (newFontStyle != null) {      controller.getModel().setUserPreference(CoreModel.FONT_STYLE,newFontStyle);      if (!newFontStyle.equals(previousFontStyle)) {        fontHasChanged=true;      }    }    String previousFontSize=dataProvider.getPreviousFontSize();    String newFontSize=dataProvider.getNewFontSize();    controller.getModel().setUserPreference(CoreModel.PREVIOUS_FONT_SIZE,previousFontSize);    if (newFontSize != null) {      controller.getModel().setUserPreference(CoreModel.FONT_SIZE,newFontSize);      if (!newFontSize.equals(previousFontSize)) {        fontHasChanged=true;      }    }    boolean lookAndFeelHasChanged=false;    String previousLookAndFeel=dataProvider.getPreviousLookAndFeel();    String newLookAndFeel=dataProvider.getNewLookAndFeel();    controller.getModel().setUserPreference(CoreModel.LOOK_AND_FEEL,previousLookAndFeel);    if (newLookAndFeel != null && (!newLookAndFeel.equals(previousLookAndFeel) && !newLookAndFeel.equals(UIManager.getLookAndFeel().getName()))) {      controller.getModel().setUserPreference(CoreModel.LOOK_AND_FEEL,newLookAndFeel);      lookAndFeelHasChanged=true;    }    boolean showTicker=dataProvider.getNewShowTicker();    boolean showBitcoinConvertedToFiat=dataProvider.getNewShowBitcoinConvertedToFiat();    boolean showCurrency=dataProvider.getNewShowCurrency();    boolean showRate=dataProvider.getNewShowRate();    boolean showBid=dataProvider.getNewShowBid();    boolean showAsk=dataProvider.getNewShowAsk();    boolean showExchange=dataProvider.getNewShowExchange();    boolean restartTickerTimer=false;    if (dataProvider.getPreviousShowCurrency() != showCurrency) {      wantToFireDataStructureChanged=true;      restartTickerTimer=true;    } else     if (dataProvider.getPreviousShowBitcoinConvertedToFiat() != showBitcoinConvertedToFiat) {      wantToFireDataStructureChanged=true;      if (showBitcoinConvertedToFiat) {        restartTickerTimer=true;      }    } else     if (dataProvider.getPreviousShowTicker() != showTicker || showTicker != dataProvider.isTickerVisible()) {      wantToFireDataStructureChanged=true;      if (showTicker) {        restartTickerTimer=true;      }    } else     if (dataProvider.getPreviousShowRate() != showRate) {      wantToFireDataStructureChanged=true;      restartTickerTimer=true;    } else     if (dataProvider.getPreviousShowBid() != showBid) {      wantToFireDataStructureChanged=true;      restartTickerTimer=true;    } else     if (dataProvider.getPreviousShowAsk() != showAsk) {      wantToFireDataStructureChanged=true;      restartTickerTimer=true;    } else     if (dataProvider.getPreviousShowExchange() != showExchange) {      wantToFireDataStructureChanged=true;      restartTickerTimer=true;    }    controller.getModel().setUserPreference(ExchangeModel.TICKER_SHOW,Boolean.valueOf(showTicker).toString());    controller.getModel().setUserPreference(ExchangeModel.SHOW_BITCOIN_CONVERTED_TO_FIAT,Boolean.valueOf(showBitcoinConvertedToFiat).toString());    String columnsToShow="";    if (showCurrency)     columnsToShow=columnsToShow + " " + TickerTableModel.TICKER_COLUMN_CURRENCY;    if (showRate)     columnsToShow=columnsToShow + " " + TickerTableModel.TICKER_COLUMN_LAST_PRICE;    if (showBid)     columnsToShow=columnsToShow + " " + TickerTableModel.TICKER_COLUMN_BID;    if (showAsk)     columnsToShow=columnsToShow + " " + TickerTableModel.TICKER_COLUMN_ASK;    if (showExchange)     columnsToShow=columnsToShow + " " + TickerTableModel.TICKER_COLUMN_EXCHANGE;    if ("".equals(columnsToShow)) {      columnsToShow=TickerTableModel.TICKER_COLUMN_NONE;    }    controller.getModel().setUserPreference(ExchangeModel.TICKER_COLUMNS_TO_SHOW,columnsToShow);    String previousExchange1=dataProvider.getPreviousExchange1();    String newExchange1=dataProvider.getNewExchange1();    if (newExchange1 != null && !newExchange1.equals(previousExchange1)) {      controller.getModel().setUserPreference(ExchangeModel.TICKER_FIRST_ROW_EXCHANGE,newExchange1);      ExchangeData newExchangeData=new ExchangeData();      newExchangeData.setShortExchangeName(newExchange1);      this.exchangeController.getModel().getShortExchangeNameToExchangeMap().put(newExchange1,newExchangeData);      wantToFireDataStructureChanged=true;      restartTickerTimer=true;    }    String previousCurrency1=dataProvider.getPreviousCurrency1();    String newCurrency1=dataProvider.getNewCurrency1();    if (newCurrency1 != null && !newCurrency1.equals(previousCurrency1)) {      controller.getModel().setUserPreference(ExchangeModel.TICKER_FIRST_ROW_CURRENCY,newCurrency1);      String newCurrencyCode=newCurrency1;      if (ExchangeData.BITCOIN_CHARTS_EXCHANGE_NAME.equals(newExchange1)) {        if (newCurrency1.length() >= 3) {          newCurrencyCode=newCurrency1.substring(newCurrency1.length() - 3);        }      }      try {        CurrencyConverter.INSTANCE.setCurrencyUnit(CurrencyUnit.of(newCurrencyCode));      } catch (      org.joda.money.IllegalCurrencyException e) {        e.printStackTrace();      }      wantToFireDataStructureChanged=true;      restartTickerTimer=true;    }    String previousShowSecondRow=Boolean.valueOf(dataProvider.getPreviousShowSecondRow()).toString();    String newShowSecondRow=Boolean.valueOf(dataProvider.getNewShowSecondRow()).toString();    if (newShowSecondRow != null && !newShowSecondRow.equals(previousShowSecondRow)) {      controller.getModel().setUserPreference(ExchangeModel.TICKER_SHOW_SECOND_ROW,newShowSecondRow);      wantToFireDataStructureChanged=true;      restartTickerTimer=true;    }    String previousExchange2=dataProvider.getPreviousExchange2();    String newExchange2=dataProvider.getNewExchange2();    if (newExchange2 != null && !newExchange2.equals(previousExchange2)) {      controller.getModel().setUserPreference(ExchangeModel.TICKER_SECOND_ROW_EXCHANGE,newExchange2);      ExchangeData newExchangeData=new ExchangeData();      newExchangeData.setShortExchangeName(newExchange2);      this.exchangeController.getModel().getShortExchangeNameToExchangeMap().put(newExchange2,newExchangeData);      wantToFireDataStructureChanged=true;      restartTickerTimer=true;    }    String previousCurrency2=dataProvider.getPreviousCurrency2();    String newCurrency2=dataProvider.getNewCurrency2();    if (newCurrency2 != null && !newCurrency2.equals(previousCurrency2)) {      controller.getModel().setUserPreference(ExchangeModel.TICKER_SECOND_ROW_CURRENCY,newCurrency2);      wantToFireDataStructureChanged=true;      restartTickerTimer=true;    }    String previousOerApicode=dataProvider.getPreviousOpenExchangeRatesApiCode();    String newOerApiCode=dataProvider.getNewOpenExchangeRatesApiCode();    if (newOerApiCode != null && !newOerApiCode.equals(previousOerApicode)) {      wantToFireDataStructureChanged=true;      restartTickerTimer=true;      controller.getModel().setUserPreference(ExchangeModel.OPEN_EXCHANGE_RATES_API_CODE,newOerApiCode);    }    controller.getModel().setUserPreference(CoreModel.CAN_UNDO_PREFERENCES_CHANGES,"true");    if (restartTickerTimer) {      CurrencyConverter.INSTANCE.initialise(controller);      if (mainFrame.getTickerTimer1() != null) {        mainFrame.getTickerTimer1().cancel();      }      if (mainFrame.getTickerTimer2() != null) {        mainFrame.getTickerTimer2().cancel();      }      Timer tickerTimer1=new Timer();      mainFrame.setTickerTimer1(tickerTimer1);      TickerTimerTask tickerTimerTask1=new TickerTimerTask(this.exchangeController,mainFrame,true);      tickerTimerTask1.createExchangeObjects(controller.getModel().getUserPreference(ExchangeModel.TICKER_FIRST_ROW_EXCHANGE));      mainFrame.setTickerTimerTask1(tickerTimerTask1);      tickerTimer1.schedule(tickerTimerTask1,0,TickerTimerTask.DEFAULT_REPEAT_RATE);      boolean showSecondRow=Boolean.TRUE.toString().equals(controller.getModel().getUserPreference(ExchangeModel.TICKER_SHOW_SECOND_ROW));      if (showSecondRow) {        Timer tickerTimer2=new Timer();        mainFrame.setTickerTimer2(tickerTimer2);        TickerTimerTask tickerTimerTask2=new TickerTimerTask(this.exchangeController,mainFrame,false);        tickerTimerTask2.createExchangeObjects(controller.getModel().getUserPreference(ExchangeModel.TICKER_SECOND_ROW_EXCHANGE));        mainFrame.setTickerTimerTask2(tickerTimerTask2);        tickerTimer2.schedule(tickerTimerTask2,TickerTimerTask.TASK_SEPARATION,TickerTimerTask.DEFAULT_REPEAT_RATE);      }    }    if (fontHasChanged) {      wantToFireDataStructureChanged=true;    }    if (lookAndFeelHasChanged) {      try {        if (CoreModel.SYSTEM_LOOK_AND_FEEL.equals(newLookAndFeel)) {          UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());        } else {          for (          LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {            if (newLookAndFeel.equalsIgnoreCase(info.getName())) {              UIManager.setLookAndFeel(info.getClassName());              break;            }          }        }      } catch (      ClassNotFoundException e) {        e.printStackTrace();      }catch (      InstantiationException e) {        e.printStackTrace();      }catch (      IllegalAccessException e) {        e.printStackTrace();      }catch (      UnsupportedLookAndFeelException e) {        e.printStackTrace();      }    }    Font newFont=dataProvider.getSelectedFont();    if (newFont != null) {      UIManager.put("ToolTip.font",newFont);    }    if (wantToFireDataStructureChanged || lookAndFeelHasChanged) {      ColorAndFontConstants.init();      FontSizer.INSTANCE.initialise(controller);      HelpContentsPanel.clearBrowser();      this.bitcoinController.getModel().setBlinkEnabled(false);      try {        controller.fireDataStructureChanged();        SwingUtilities.updateComponentTreeUI(mainFrame);      }  finally {        this.bitcoinController.getModel().setBlinkEnabled(true);      }    }  }  finally {    if (mainFrame != null) {      mainFrame.setCursor(Cursor.getDefaultCursor());    }  }}  }
class C{  public void addEvents(Matrix events){  int seriesCount=getSeriesCount();  for (int r=0; r < events.getRowCount(); r++) {    long timestamp=events.getAsLong(r,0);    for (int c=1; c < events.getColumnCount(); c++) {      double value=events.getAsDouble(r,c);      addEvent(timestamp,seriesCount + c - 1,value);    }  }}  }
class C{  public static List<LoggerType> allLoggerTypes(){  List<LoggerType> loggerTypeList=new ArrayList<>();  loggerTypeList.add(LoggerType.Log4j);  loggerTypeList.add(LoggerType.PythonLogger);  return loggerTypeList;}  }
class C{  public World createWorld(String landscapeName,Configuration config){  tileSource=new FileSystemTileSource(landscapeName);  if (!tileSource.connect("dert","dert")) {    return (null);  }  String[][] layerInfo=tileSource.getLayerInfo();  if (layerInfo.length == 0) {    Console.getInstance().println("No valid layers.");    return (null);  }  lighting.initialize();  if (!layerManager.initialize(tileSource)) {    return (null);  }  Landscape.createInstance(tileSource,layerManager,surfaceColor);  world=World.createInstance(name,new Landmarks(config.getLandmarkStates()),new Tools(config.getToolStates()),new LineSets(config.getLineSetStates()),lighting,time);  world.setUseLonLat(useLonLat);  if (verticalExaggeration != 1) {    world.setVerticalExaggeration(verticalExaggeration);  }  return (world);}  }
class C{  public Birthday(Date date,boolean hasTime){  super(date,hasTime);}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMTSpanElement(prefix,(AbstractDocument)doc);}  }
class C{  public int depth(){  return m_Depth;}  }
class C{  public void test_addILjava_lang_Object(){  Object o;  alist.add(50,o=new Object());  assertTrue("Failed to add Object",alist.get(50) == o);  assertTrue("Failed to fix up list after insert",alist.get(51) == objArray[50] && (alist.get(52) == objArray[51]));  Object oldItem=alist.get(25);  alist.add(25,null);  assertNull("Should have returned null",alist.get(25));  assertTrue("Should have returned the old item from slot 25",alist.get(26) == oldItem);  try {    alist.add(-1,null);    fail("IndexOutOfBoundsException expected");  } catch (  IndexOutOfBoundsException e) {  }  try {    alist.add(alist.size() + 1,null);    fail("IndexOutOfBoundsException expected");  } catch (  IndexOutOfBoundsException e) {  }}  }
class C{  public boolean isLocked(){  return (m_flags & LOCKED) == LOCKED;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:10.017 -0500",hash_original_method="53E7CA549C97F6BFF49C614C4416CFEE",hash_generated_method="4EAFC3CE254F643436A6C74B81651199") public static float length(float x,float y,float z){  return (float)Math.sqrt(x * x + y * y + z * z);}  }
class C{  public void clone(Vector3f source){  System.arraycopy(source.points,0,points,0,3);}  }
class C{  public void execute() throws MojoExecutionException, MojoFailureException {  this.outputDirectory=getAbsolutePath(this.outputDirectory);  project.addCompileSourceRoot(outputDirectory.getPath());  List<File> filesIt;  if (lexDefinitions == null) {    getLog().debug("Use lexer files found in (default) " + SRC_MAIN_JFLEX);    filesIt=new ArrayList<File>();    File defaultDir=getAbsolutePath(new File(SRC_MAIN_JFLEX));    if (defaultDir.isDirectory()) {      filesIt.add(defaultDir);    }  } else {    filesIt=Arrays.asList(lexDefinitions);    getLog().debug("Parsing " + lexDefinitions.length + " jflex files or directories given in configuration");  }  for (  File lexDefinition : filesIt) {    lexDefinition=getAbsolutePath(lexDefinition);    parseLexDefinition(lexDefinition);  }}  }
class C{  public void testBoundedLongs(){  AtomicInteger fails=new AtomicInteger(0);  SplittableRandom r=new SplittableRandom();  long size=123L;  for (long least=-86028121; least < MAX_LONG_BOUND; least+=1982451653L) {    for (long bound=least + 2; bound > least && bound < MAX_LONG_BOUND; bound+=Math.abs(bound * 7919)) {      final long lo=least, hi=bound;      r.longs(size,lo,hi).parallel().forEach(null);    }  }  assertEquals(0,fails.get());}  }
class C{  protected void validateAccessBeforeUpdate(final Object object,final Class objectType) throws AccessDeniedException {  if (!federationFacade.isManageable(object,objectType)) {    throw new AccessDeniedException("access denied");  }}  }
class C{  public static GregorianCalendar rawBytesToCalendar(byte[] value,int offset){  if (value.length - offset >= 6) {    GregorianCalendar timestamp=new GregorianCalendar(value[offset] + 2000,value[offset + 1],value[offset + 2],value[offset + 3],value[offset + 4],value[offset + 5]);    int offsetInHours=MiBandCoordinator.getDeviceTimeOffsetHours();    if (offsetInHours != 0)     timestamp.add(Calendar.HOUR_OF_DAY,-offsetInHours);    return timestamp;  }  return createCalendar();}  }
class C{  public void indent(){  indent.append("  ");}  }
class C{  public final void handleTrainingPredconditionException(TrainingPredconditionException tpe){  System.out.flush();  if (tpe.getMessage() != null) {    System.out.println("\n" + tpe.getMessage());  }  final int return_value=14;  systemExitAssist(return_value);}  }
class C{  public void updateTopology(final PackingPlans.PackingPlan existingProtoPackingPlan,final PackingPlans.PackingPlan proposedProtoPackingPlan) throws ExecutionException, InterruptedException, ConcurrentModificationException {  String topologyName=Runtime.topologyName(runtime);  SchedulerStateManagerAdaptor stateManager=Runtime.schedulerStateManagerAdaptor(runtime);  Lock lock=stateManager.getLock(topologyName,"updateTopology");  if (lock.tryLock(5,TimeUnit.SECONDS)) {    try {      PackingPlans.PackingPlan foundPackingPlan=getPackingPlan(stateManager,topologyName);      if (!deserializer.fromProto(existingProtoPackingPlan).equals(deserializer.fromProto(foundPackingPlan))) {        throw new ConcurrentModificationException(String.format("The packing plan in state manager is not the same as the submitted existing " + "packing plan for topology %s. Another actor has changed it and has likely" + "performed an update on it. Failing this request, try again once other "+ "update is complete",topologyName));      }      updateTopology(existingProtoPackingPlan,proposedProtoPackingPlan,stateManager);    }  finally {      lock.unlock();    }  } else {    throw new ConcurrentModificationException(String.format("The update lock can not be obtained for topology %s. Another actor is performing an " + "update on it. Failing this request, try again once current update is complete",topologyName));  }}  }
class C{  public final CompletableFuture<PartitionReceiver> createEpochReceiver(final String consumerGroupName,final String partitionId,final String startingOffset,final long epoch) throws ServiceBusException {  return this.createEpochReceiver(consumerGroupName,partitionId,startingOffset,false,epoch);}  }
class C{  @Override public void onUserProfileAvatarChanged(String avatarUrl){  AppLog.i(this,"onUserProfileAvatarChanged()");  app.getAvatarImageLoader().startImageDownload(navheaderImage,avatarUrl);}  }
class C{  void updateValue(Object value){  super.updateValue(value);  updateMaskIfNecessary();}  }
class C{  public LabelEx(String s){  setText(s);}  }
class C{  public void clear(){  if (map == null) {    map=new CollisionMap(width,height);  }}  }
class C{  public final void removePropertyChangeListener(String propertyName,PropertyChangeListener listener){  pcs.removePropertyChangeListener(propertyName,listener);}  }
class C{  protected void appendSummary(final StringBuffer buffer,final String fieldName,final short[] array){  appendSummarySize(buffer,fieldName,array.length);}  }
class C{  public AllocationSite(Token token){  this(token.beginLine,token.beginColumn);}  }
class C{  public static void gluTessNormal(GLUtessellator tessellator,double x,double y,double z){  GLUtessellatorImpl tess=(GLUtessellatorImpl)tessellator;  tess.gluTessNormal(x,y,z);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:21.723 -0500",hash_original_method="7ECE87C8E0B6AC612BF4B05EB3BE89DA",hash_generated_method="5061C51BA9AB55A45A330545ECB336D2") public void disconnected(){}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypesPackage.TSETTER__FPAR:    return fpar != null;}return super.eIsSet(featureID);}  }
class C{  void regionToRect(int cellX,int cellY,int spanX,int spanY,Rect result){  final int hStartPadding=getPaddingLeft();  final int vStartPadding=getPaddingTop();  final int left=hStartPadding + cellX * (mCellWidth + mWidthGap);  final int top=vStartPadding + cellY * (mCellHeight + mHeightGap);  result.set(left,top,left + (spanX * mCellWidth + (spanX - 1) * mWidthGap),top + (spanY * mCellHeight + (spanY - 1) * mHeightGap));}  }
class C{  public String contentToText(){  StringBuffer buf=new StringBuffer();  IndicatorTreeElementContentProvider contentProvider=(IndicatorTreeElementContentProvider)fContentProvider;  for (  Object rootElement : contentProvider.getSortedRootElements()) {    contentToText(rootElement,0,buf);  }  return buf.toString();}  }
class C{  private boolean needsScrollBars(){  return tileEntity.filters.size() > 4;}  }
class C{  private static int balancedHeight(TreeNode root){  if (root == null)   return 0;  int left=balancedHeight(root.left);  int right=balancedHeight(root.right);  if (left < 0 || right < 0 || Math.abs(left - right) > 1)   return -1;  return Math.max(left,right) + 1;}  }
class C{  public static DataSet serializableInstance(){  List<Node> variables=new ArrayList<>();  variables.add(new ContinuousVariable("X1"));  ColtDataSet data=new ColtDataSet(2,variables);  data.setDouble(0,0,1.0);  data.setDouble(1,0,1.0);  return data;}  }
class C{  public OptionalMethod(Class<?> returnType,String methodName,Class... methodParams){  this.returnType=returnType;  this.methodName=methodName;  this.methodParams=methodParams;}  }
class C{  protected void tearDown(){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:38.381 -0500",hash_original_method="198371BAE7EE824416E49767A8F3C5A9",hash_generated_method="1AB70714505EA6375498FD84B14C7444") public static ParcelFileDescriptor blobFileDescriptorForQuery(SQLiteStatement prog,String[] selectionArgs){  prog.bindAllArgsAsStrings(selectionArgs);  return prog.simpleQueryForBlobFileDescriptor();}  }
class C{  private LinkedHashMap<IVariable,IConstant> copy(final LinkedHashMap<IVariable,IConstant> src,final IVariable[] variablesToKeep){  final LinkedHashMap<IVariable,IConstant> dst=new LinkedHashMap<IVariable,IConstant>(variablesToKeep != null ? variablesToKeep.length : src.size());  final Iterator<Map.Entry<IVariable,IConstant>> itr=src.entrySet().iterator();  while (itr.hasNext()) {    final Map.Entry<IVariable,IConstant> e=itr.next();    boolean keep=true;    if (variablesToKeep != null) {      keep=false;      for (      IVariable<?> x : variablesToKeep) {        if (x == e.getKey()) {          keep=true;          break;        }      }    }    if (keep)     dst.put(e.getKey(),e.getValue());  }  return dst;}  }
class C{  public void removeEmptyCartItems(){  for (int i=0; i < this.cartLines.size(); ) {    ShoppingCartItem cartItem=cartLines.get(i);    if (cartItem.getQuantity().compareTo(BigDecimal.ZERO) == 0) {      this.clearItemShipInfo(cartItem);      cartLines.remove(i);    } else {      i++;    }  }}  }
class C{  public URL(String mimeType){  super(mimeType,"java.net.URL");}  }
class C{  public boolean removeHeaderView(View v){  if (mHeaderViewInfos.size() > 0) {    boolean result=false;    ListAdapter adapter=getAdapter();    if (adapter != null && ((HeaderViewGridAdapter)adapter).removeHeader(v)) {      result=true;    }    removeFixedViewInfo(v,mHeaderViewInfos);    return result;  }  return false;}  }
class C{  public static boolean isAbsoluteURI(String systemId){  if (isWindowsAbsolutePath(systemId)) {    return false;  }  final int fragmentIndex=systemId.indexOf('#');  final int queryIndex=systemId.indexOf('?');  final int slashIndex=systemId.indexOf('/');  final int colonIndex=systemId.indexOf(':');  int index=systemId.length() - 1;  if (fragmentIndex > 0)   index=fragmentIndex;  if ((queryIndex > 0) && (queryIndex < index))   index=queryIndex;  if ((slashIndex > 0) && (slashIndex < index))   index=slashIndex;  return ((colonIndex > 0) && (colonIndex < index));}  }
class C{  public static SQLException toSQLException(Exception e){  if (e instanceof SQLException) {    return (SQLException)e;  }  return convert(e).getSQLException();}  }
class C{  protected int lead(String s){  if (alignment.equals(DECIMAL))   return indexOfDecimalPoint(s);  return super.lead(s);}  }
class C{  private double toLength(String str,double percentFactor) throws IOException {  double scaleFactor=1d;  if (str == null || str.length() == 0) {    return 0d;  }  if (str.endsWith("%")) {    str=str.substring(0,str.length() - 1);    scaleFactor=percentFactor;  } else   if (str.endsWith("px")) {    str=str.substring(0,str.length() - 2);  } else   if (str.endsWith("pt")) {    str=str.substring(0,str.length() - 2);    scaleFactor=1.25;  } else   if (str.endsWith("pc")) {    str=str.substring(0,str.length() - 2);    scaleFactor=15;  } else   if (str.endsWith("mm")) {    str=str.substring(0,str.length() - 2);    scaleFactor=3.543307;  } else   if (str.endsWith("cm")) {    str=str.substring(0,str.length() - 2);    scaleFactor=35.43307;  } else   if (str.endsWith("in")) {    str=str.substring(0,str.length() - 2);    scaleFactor=90;  } else {    scaleFactor=1d;  }  return Double.parseDouble(str) * scaleFactor;}  }
class C{  public V remove(Object key){  Node<K,V> e;  return (e=removeNode(hash(key),key,null,false,true)) == null ? null : e.value;}  }
class C{  public static ConditionOperand CMPL_GREATER_EQUAL(){  return new ConditionOperand(CMPL_GREATER_EQUAL);}  }
class C{  public java.lang.StringBuffer append(long l){  internal.append(l);  return this;}  }
class C{  @Override public void handlePatch(Operation patchOperation){  ServiceUtils.logInfo(this,"Handling patch operation for service %s",getSelfLink());  State currentState=getState(patchOperation);  State patchState=patchOperation.getBody(State.class);  validatePatchState(currentState,patchState);  String clusterId=ServiceUtils.getIDFromDocumentSelfLink(getSelfLink());  MaintenanceOperation maintenanceOperation=processPatchState(currentState,patchState,clusterId);  patchOperation.complete();  try {switch (maintenanceOperation) {case RUN:      startMaintenance(currentState,clusterId);    break;case RETRY:  getHost().schedule(null,currentState.retryIntervalSecond * currentState.retryCount,TimeUnit.SECONDS);break;case SKIP:ServiceUtils.logInfo(this,"Skipping maintenance");break;default :ServiceUtils.logSevere(this,"Unknown maintenance operation %s. Skipping maintenance",maintenanceOperation.toString());break;}} catch (Throwable e) {failTask(e);}}  }
class C{  @Override public String toString(){  if (m_rules == null) {    return "FPGrowth hasn't been trained yet!";  }  StringBuffer result=new StringBuffer();  int numRules=(m_rules.size() < m_numRulesToFind) ? m_rules.size() : m_numRulesToFind;  if (m_rules.size() == 0) {    return "No rules found!";  } else {    result.append("FPGrowth found " + m_rules.size() + " rules");    if (!m_findAllRulesForSupportLevel) {      result.append(" (displaying top " + numRules + ")");    }    if (m_transactionsMustContain.length() > 0 || m_rulesMustContain.length() > 0) {      result.append("\n");      if (m_transactionsMustContain.length() > 0) {        result.append("\nUsing only transactions that contain: " + m_transactionsMustContain);      }      if (m_rulesMustContain.length() > 0) {        result.append("\nShowing only rules that contain: " + m_rulesMustContain);      }    }    result.append("\n\n");  }  int count=0;  for (  AssociationRule r : m_rules) {    result.append(Utils.doubleToString((double)count + 1,(int)(Math.log(numRules) / Math.log(10) + 1),0) + ". ");    result.append(r + "\n");    count++;    if (!m_findAllRulesForSupportLevel && count == m_numRulesToFind) {      break;    }  }  return result.toString();}  }
class C{  public RuntimeCollector(Algorithm algorithm,int frequency,ResultFileWriter writer){  super(algorithm,frequency,FrequencyType.EVALUATIONS);  this.writer=writer;  startTime=System.nanoTime();}  }
class C{  public static <T,P>Optional<T> findByPath(TreeDef<T> treeDef,T node,List<P> path,BiPredicate<T,P> equality){  T value=node;  for (  P segment : path) {    Optional<T> valueOpt=treeDef.childrenOf(value).stream().filter(null).findFirst();    if (!valueOpt.isPresent()) {      return valueOpt;    }    value=valueOpt.get();  }  return Optional.of(value);}  }
class C{  private static void exit(@Nullable String errMsg,@Nullable Options options,int exitCode){  if (errMsg != null)   echo("ERROR: " + errMsg);  String runner=System.getProperty(IGNITE_PROG_NAME,"randignite.{sh|bat}");  int space=runner.indexOf(' ');  runner=runner.substring(0,space == -1 ? runner.length() : space);  if (options != null) {    HelpFormatter formatter=new HelpFormatter();    formatter.printHelp(runner,options);  }  System.exit(exitCode);}  }
class C{  public boolean isBeingAttacked(){  return !attackers.isEmpty();}  }
class C{  public static boolean intersectsCircle(double[] polyPoints,double lat,double lon,double radius){  Geo a=new Geo(polyPoints[0],polyPoints[1]);  Geo b=new Geo();  Geo c=new Geo(lat,lon);  int numCoords=polyPoints.length / 2 - 1;  for (int i=1; i < numCoords; i++) {    double lat2=polyPoints[2 * i];    double lon2=polyPoints[2 * i + 1];    b.initialize(lat2,lon2);    if (intersectsCircle(a,b,c,radius))     return true;    a.initialize(b);  }  return false;}  }
class C{  protected void emitComment(int from,int to){  if (config.enableConditionalComments) {    if (match(CC_IF,from)) {      int endBracketNdx=find(']',from + 3,to);      CharSequence expression=charSequence(from + 1,endBracketNdx);      ndx=endBracketNdx + 1;      char c=input[ndx];      if (c != '>') {        errorInvalidToken();      }      visitor.condComment(expression,true,true,false);      state=DATA_STATE;      return;    }    if (to > CC_ENDIF2.length && match(CC_ENDIF2,to - CC_ENDIF2.length)) {      visitor.condComment(_ENDIF,false,true,true);      state=DATA_STATE;      return;    }  }  CharSequence comment=charSequence(from,to);  visitor.comment(comment);  commentStart=-1;}  }
class C{  public void changeWidthAndHeight(float w,float h){  setContentSize(CGSize.make(w,h));}  }
class C{  public ZoneRulesBuilder addWindowForever(ZoneOffset standardOffset){  return addWindow(standardOffset,LocalDateTime.MAX,TimeDefinition.WALL);}  }
class C{  public SimpleEnumMap(K[] k,V[] v,float f){  super(k,v,f,(Strategy)SimpleEnumHashingStrategy.INSTANCE);}  }
class C{  public double[] asRadiansArray(){  return new double[]{this.getMinLatitude().radians,this.getMaxLatitude().radians,this.getMinLongitude().radians,this.getMaxLongitude().radians};}  }
class C{  private void computeSourceMethodLocationMap(){  sourceMethodLocationMap=new HashMap<String,SourceLocationTag>();  for (  SootMethod method : SourceCallTree.v().collectSourceMethods()) {    SourceLocationTag loc=SootUtils.getMethodLocation(method);    if (loc != null) {      sourceMethodLocationMap.put(method.getSignature(),loc);    }  }}  }
class C{  public void doNotWait(){  dispose();}  }
class C{  public static int codePointAt(char[] seq,int index,int limit){  if (index < 0 || index >= limit || limit < 0 || limit > seq.length) {    throw new IndexOutOfBoundsException();  }  char high=seq[index++];  if (index >= limit) {    return high;  }  char low=seq[index];  if (isSurrogatePair(high,low)) {    return toCodePoint(high,low);  }  return high;}  }
class C{  public int size(){  return m_bookmarks.size();}  }
class C{  public static int clearBacklog(){  return clearBacklog(Level.WARN);}  }
class C{  public boolean isInRange(){  IntegerVectorSpecies _species=(IntegerVectorSpecies)species;  for (int i=0; i < genomeLength(); i++)   if (genome[i] < _species.minGene(i) || genome[i] > _species.maxGene(i))   return false;  return true;}  }
class C{  public static boolean isAncestorLocal(Tree.Declaration decl){  return isAncestorLocal(decl.getDeclarationModel());}  }
class C{  public void add(long element){  elements.add(codeOf(element));  size++;}  }
class C{  @Override public String toString(){  StringBuffer buffer=new StringBuffer();  Iterator<Item> iterator=items.iterator();  while (iterator.hasNext()) {    buffer.append(iterator.next().toString());    if (iterator.hasNext()) {      buffer.append(", ");    }  }  buffer.append(", frequency: ");  buffer.append(Tools.formatNumber(frequency));  return buffer.toString();}  }
class C{  protected Section autoNextSectionChoice(ArrayList<Section> sList,AllocationRequest ar){  if ((savedAR != null) && (savedAR == ar)) {    for (int j=0; j < sList.size(); j++) {      if (savedSection == sList.get(j)) {        return savedSection;      }    }    log.warn("Failure of prepared choice of next Section in AutoAllocate");  }  for (int i=0; i < sList.size(); i++) {    if ((sList.get(i).getOccupancy() == Section.UNOCCUPIED) && (sList.get(i).getState() == Section.FREE) && (_dispatcher.getSignalType() == DispatcherFrame.SIGNALHEAD || (_dispatcher.getSignalType() == DispatcherFrame.SIGNALMAST && _dispatcher.checkBlocksNotInAllocatedSection(ar.getSection(),ar) == null))) {      return sList.get(i);    }  }  int dir=ar.getSectionDirection();  ArrayList<AllocatedSection> allocatedSections=_dispatcher.getAllocatedSectionsList();  for (int m=0; m < sList.size(); m++) {    boolean notFound=true;    for (int k=0; (k < allocatedSections.size()) && notFound; k++) {      if (sList.get(m) == allocatedSections.get(k).getSection()) {        notFound=false;        if (allocatedSections.get(k).getSection().getState() == dir) {          return sList.get(m);        }      }    }  }  return null;}  }
class C{  public FileEntry createFile(String name,byte[] content,String mediaType) throws ForbiddenException, ConflictException, ServerException {  if (isRoot(getVirtualFile())) {    throw new ForbiddenException("Can't create file in root folder.");  }  return createFile(name,content == null ? null : new ByteArrayInputStream(content),mediaType);}  }
class C{  public boolean hasReturn1y(){  return getReturn1y() != null;}  }
class C{  public void logout(){  loggedAccount=null;}  }
class C{  public static void main(String[] args){  Header.printHeader(GfipWinnersAndLosersAnalysis.class.toString(),args);  String file1=args[0];  String file2=args[1];  String outputFilename=args[2];  String crsProjected=args[3];  Scenario sc1=ScenarioUtils.createScenario(ConfigUtils.createConfig());  new PopulationReader(sc1).readFile(file1);  Scenario sc2=ScenarioUtils.createScenario(ConfigUtils.createConfig());  new PopulationReader(sc2).readFile(file2);  CoordinateTransformation ct=TransformationFactory.getCoordinateTransformation(crsProjected,"WGS84");  BufferedWriter bw=IOUtils.getBufferedWriter(outputFilename);  try {    bw.write("Id,Class,First,Second,Long,Lat,X,Y");    bw.newLine();    for (    Id id : sc1.getPopulation().getPersons().keySet()) {      String sId=id.toString();      String[] sa=sId.split("_");      String classId=sa[0];      Coord cp=((Activity)sc1.getPopulation().getPersons().get(id).getSelectedPlan().getPlanElements().get(0)).getCoord();      Coord cu=ct.transform(cp);      double cLong=cu.getX();      double cLat=cu.getY();      double cX=cp.getX();      double cY=cp.getY();      bw.write(String.format("%s,%s,%.2f,%.2f,%.6f,%.6f,%.2f,%.2f\n",id.toString(),classId,((Plan)sc1.getPopulation().getPersons().get(id).getSelectedPlan()).getScore(),((Plan)sc2.getPopulation().getPersons().get(id).getSelectedPlan()).getScore(),cLong,cLat,cX,cY));    }  } catch (  IOException e) {    e.printStackTrace();    throw new RuntimeException("Cannot write to " + outputFilename);  } finally {    try {      bw.close();    } catch (    IOException e) {      e.printStackTrace();      throw new RuntimeException("Cannot close " + outputFilename);    }  }  Header.printFooter();}  }
class C{  public CircleFlowIndicator(Context context,AttributeSet attrs){  super(context,attrs);  TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.CircleFlowIndicator);  int activeType=a.getInt(R.styleable.CircleFlowIndicator_activeType,STYLE_FILL);  int activeDefaultColor=0xFF7DC62D;  int activeColor=a.getColor(R.styleable.CircleFlowIndicator_activeColor,activeDefaultColor);  int inactiveType=a.getInt(R.styleable.CircleFlowIndicator_inactiveType,STYLE_STROKE);  int inactiveDefaultColor=0xFF9D9D9D;  int inactiveColor=a.getColor(R.styleable.CircleFlowIndicator_inactiveColor,inactiveDefaultColor);  mRadius=a.getDimension(R.styleable.CircleFlowIndicator_radius,4.0f);  mRadiusActive=mRadius;  mRadiusInactive=mRadius;  spacing=a.getDimension(R.styleable.CircleFlowIndicator_spacing,4.0f);  spacing+=2 * mRadiusActive;  fadeOutTime=a.getInt(R.styleable.CircleFlowIndicator_fadeOut,0);  mCentered=a.getBoolean(R.styleable.CircleFlowIndicator_centered,false);  mSnap=a.getBoolean(R.styleable.CircleFlowIndicator_snap,true);  initColors(activeColor,inactiveColor,activeType,inactiveType);}  }
class C{  private boolean isFuture(Date date){  return mNow.compareTo(date) < 0;}  }
class C{  public static long remainderUnsigned(long dividend,long divisor){  if (dividend > 0 && divisor > 0) {    return dividend % divisor;  } else {    if (compareUnsigned(dividend,divisor) < 0) {      return dividend;    } else {      return toUnsignedBigInteger(dividend).remainder(toUnsignedBigInteger(divisor)).longValue();    }  }}  }
class C{  protected String doIt() throws Exception {  String finReportMsg=super.doIt();  ArrayList<ProcessInfoParameter> list=new ArrayList<ProcessInfoParameter>();  ProcessInfoParameter oldpara[]=getParameter();  for (int i=0; i < oldpara.length; i++)   list.add(oldpara[i]);  list.add(new ProcessInfoParameter("T_Report_AD_PInstance_ID",new Integer(getAD_PInstance_ID()),null,null,null));  ProcessInfoParameter[] pars=new ProcessInfoParameter[list.size()];  list.toArray(pars);  m_report=new MReport(getCtx(),getRecord_ID(),get_TrxName());  MProcess proc=new MProcess(getCtx(),m_report.getJasperProcess_ID(),get_TrxName());  MPInstance instance=new MPInstance(proc,getRecord_ID());  instance.saveEx();  ProcessInfo poInfo=new ProcessInfo(proc.getName(),proc.getAD_Process_ID());  poInfo.setParameter(pars);  poInfo.setRecord_ID(getRecord_ID());  poInfo.setAD_Process_ID(proc.getAD_Process_ID());  poInfo.setAD_PInstance_ID(instance.getAD_PInstance_ID());  Trx trx=Trx.get(get_TrxName(),true);  trx.commit();  if (proc.getProcedureName() != null && proc.getProcedureName().length() > 0) {    String sql="{call " + proc.getProcedureName() + "(?)}";    try {      CallableStatement cstmt=DB.prepareCall(sql);      cstmt.setInt(1,getAD_PInstance_ID());      cstmt.executeUpdate();      cstmt.close();    } catch (    Exception e) {      log.log(Level.SEVERE,sql,e);      poInfo.setSummary(Msg.getMsg(Env.getCtx(),"ProcessRunError") + " " + e.getLocalizedMessage());    }  }  ProcessUtil.startJavaProcess(getCtx(),poInfo,trx);  return finReportMsg;}  }
class C{  @Ignore public static IntArray instance(int[] value){  throw Util.makeJavaArrayWrapperException();}  }
class C{  public void resetDefaultPortfolio(final Portfolio transientInstance) throws PersistentModelException {  try {    m_portfolioHome.resetDefaultPortfolio(transientInstance);  } catch (  OptimisticLockException ex1) {    throw new PersistentModelException("Error setting default portfolio. Please refresh before save.");  }catch (  Exception e) {    throw new PersistentModelException("Error saving Portfolio: " + transientInstance.getName() + "\n Msg: "+ e.getMessage());  }}  }
class C{  public void incrIntNodeCount(){  m_IntNodeCount++;}  }
class C{  protected boolean equals(TreeNode<E> root1,TreeNode<E> root2){  if (root1 == root2)   return true;  if (root1 == null || root2 == null)   return false;  return root1.element.equals(root2.element) && equals(root1.left,root2.left) && equals(root1.right,root2.right);}  }
class C{  private static void determineFirstDigit(StringBuilder resultString,int lgPatternFound) throws NotFoundException {  for (int d=0; d < 10; d++) {    if (lgPatternFound == FIRST_DIGIT_ENCODINGS[d]) {      resultString.insert(0,(char)('0' + d));      return;    }  }  throw NotFoundException.getNotFoundInstance();}  }
class C{  public void merge(ResinWebXml theMergeWebXml){  if (theMergeWebXml == null) {    throw new IllegalArgumentException("Must pass a resin web xml");  }  super.merge(theMergeWebXml);}  }
class C{  public RootItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public ValidationInfo(@NotNull String message,@Nullable JComponent component){  this.message=message;  this.component=component;}  }
class C{  public long stop(){  final long elapsedNanos=clock.getTick() - startTime;  timer.update(elapsedNanos,TimeUnit.NANOSECONDS);  return elapsedNanos;}  }
class C{  @Override public void connectionStateChanged(State state){  _log.info("connection state changed to {}",state);  if (state.equals(State.CONNECTED)) {    loadParameterFromZK();  }}  }
class C{  public static String formatDuration(final Context context,long seconds){  long h=seconds / 3600;  long m=(seconds - h * 3600) / 60;  long s=seconds - (h * 3600 + m * 60);  String durationValue;  if (h == 0) {    durationValue=String.format(context.getString(R.string.details_ms),m,s);  } else {    durationValue=String.format(context.getString(R.string.details_hms),h,m,s);  }  return durationValue;}  }
class C{  @Override public void onPageScrolled(int position,float positionOffset,int positionOffsetPixels){}  }
class C{  public static void main(String[] args) throws Exception {  new SetContribution().start(args);}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.ANNOTATION__NAME:    setName(NAME_EDEFAULT);  return;case N4JSPackage.ANNOTATION__ARGS:getArgs().clear();return;}super.eUnset(featureID);}  }
class C{  public static <E extends Enum<E>>Field<E> ofEnum(Class<E> enumType,String name){  return ofEnum(enumType,name,null);}  }
class C{  public int recordParams(CtClass[] params,boolean isStatic,String prefix,String paramVarName,String paramsName,boolean use0,int paramBase,String target,SymbolTable tbl) throws CompileError {  int varNo;  paramTypeList=params;  paramArrayName=paramVarName;  paramListName=paramsName;  paramVarBase=paramBase;  useParam0=use0;  if (target != null)   param0Type=MemberResolver.jvmToJavaName(target);  inStaticMethod=isStatic;  varNo=paramBase;  if (use0) {    String varName=prefix + "0";    Declarator decl=new Declarator(CLASS,MemberResolver.javaToJvmName(target),0,varNo++,new Symbol(varName));    tbl.append(varName,decl);  }  for (int i=0; i < params.length; ++i)   varNo+=recordVar(params[i],prefix + (i + 1),varNo,tbl);  if (getMaxLocals() < varNo)   setMaxLocals(varNo);  return varNo;}  }
class C{  public BarResizeEditPolicy(){  thickness=8;}  }
class C{  public final <R>Flux<R> publish(Function<? super Flux<T>,? extends Publisher<? extends R>> transform,int prefetch){  return onAssembly(new FluxPublishMulticast<>(this,transform,prefetch,QueueSupplier.get(prefetch)));}  }
class C{  public void fireVetoableChange(String name,Object oldValue,Object newValue) throws PropertyVetoException {  beanContextChildSupport.fireVetoableChange(name,oldValue,newValue);}  }
class C{  @Override protected void doPost(HttpServletRequest request,HttpServletResponse response){  PrintWriter out=null;  try {    String returnString=processPostRequest(request);    response.setContentType("application/json");    out=response.getWriter();    out.println(returnString);  } catch (  Exception e) {    logger.error(e.toString() + System.lineSeparator() + StackTrace.getStringFromStackTrace(e));  } finally {    if (out != null) {      out.close();    }  }}  }
class C{  private boolean hasColumn(final String tableName,final String columnname) throws CouldntLoadDataException {  return PostgreSQLHelpers.hasColumn(getConnection(),tableName,columnname);}  }
class C{  public void writeRawLittleEndian32(final int value) throws IOException {  writeRawByte((value) & 0xFF);  writeRawByte((value >> 8) & 0xFF);  writeRawByte((value >> 16) & 0xFF);  writeRawByte((value >> 24) & 0xFF);}  }
class C{  public void dispose(){  log.config("");  if (m_pstmt != null) {    try {      m_pstmt.close();    } catch (    SQLException e) {    }  }  m_pstmt=null;  for (  VEditor editor : m_sEditors) {    if (editor instanceof CTextField)     ((CTextField)editor).removeActionListener(this);  }  if (m_targetFields != null)   m_targetFields.clear();  m_targetFields=null;  removeAll();  super.dispose();}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.INLINE_ASSOCIATION___MODIFIER_1:    return MODIFIER_1_EDEFAULT == null ? modifier_1 != null : !MODIFIER_1_EDEFAULT.equals(modifier_1);case UmplePackage.INLINE_ASSOCIATION___INLINE_ASSOCIATION_END_1:  return inlineAssociationEnd_1 != null && !inlineAssociationEnd_1.isEmpty();case UmplePackage.INLINE_ASSOCIATION___ARROW_1:return ARROW_1_EDEFAULT == null ? arrow_1 != null : !ARROW_1_EDEFAULT.equals(arrow_1);case UmplePackage.INLINE_ASSOCIATION___ASSOCIATION_END_1:return associationEnd_1 != null && !associationEnd_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public void visitTypeArgument(){}  }
class C{  public boolean isVendor(){  Object oo=get_Value(COLUMNNAME_IsVendor);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void assertFail(SolrParams p,ErrorCode expCode,String expSubstr) throws Exception {  try {    ignoreException(expSubstr);    query(p);    fail("no exception matching expected: " + expCode.code + ": "+ expSubstr);  } catch (  SolrException e) {    assertEquals(expCode.code,e.code());    assertTrue("Expected substr not found: " + expSubstr + " <!< "+ e.getMessage(),e.getMessage().contains(expSubstr));  } finally {    unIgnoreException(expSubstr);  }}  }
class C{  public DateBuilder atSecond(int atSecond){  validateSecond(atSecond);  this.second=atSecond;  return this;}  }
class C{  public AEADBadTagException(String msg){  super(msg);}  }
class C{  public boolean hasIssueType(){  return hasExtension(CrawlIssueIssueType.class);}  }
class C{  public byte[] toZOrderByteArray(final BigInteger bigInt){  final int numDimensions=datatypeConfig.getNumDimensions();  final byte[] bigIntAsByteArr=bigInt.toByteArray();  final int paddedArraySize=numDimensions * BASE_SIZE + 1;  final byte[] bigIntAsByteArrPad=new byte[paddedArraySize];  int idx=0;  for (int i=0; i < paddedArraySize - bigIntAsByteArr.length; i++) {    bigIntAsByteArrPad[idx++]=0;  }  for (int i=0; i < bigIntAsByteArr.length; i++) {    bigIntAsByteArrPad[idx++]=bigIntAsByteArr[i];  }  final byte[] bigIntAsByteArrUnsigned=unpadLeadingZero(bigIntAsByteArrPad);  return bigIntAsByteArrUnsigned;}  }
class C{  public EvaluatorException(String detail,String sourceName,int lineNumber,String lineSource,int columnNumber){  super(detail);  recordErrorOrigin(sourceName,lineNumber,lineSource,columnNumber);}  }
class C{  public Matrix3 multiplyByScale(double xScale,double yScale){  this.multiplyByMatrix(xScale,0,0,0,yScale,0,0,0,1);  return this;}  }
class C{  public GitlabProject createUserProject(Integer userId,String name) throws IOException {  return createUserProject(userId,name,null,null,null,null,null,null,null,null,null,null);}  }
class C{  public static byte[] decode(byte[] source,int off,int len,int options) throws java.io.IOException {  if (source == null) {    throw new NullPointerException("Cannot decode null source array.");  }  if (off < 0 || off + len > source.length) {    throw new IllegalArgumentException(String.format("Source array with length %d cannot have offset of %d and process %d bytes.",source.length,off,len));  }  if (len == 0) {    return new byte[0];  } else   if (len < 4) {    throw new IllegalArgumentException("Base64-encoded string must have at least four characters, but length specified was " + len);  }  byte[] DECODABET=getDecodabet(options);  int len34=len * 3 / 4;  byte[] outBuff=new byte[len34];  int outBuffPosn=0;  byte[] b4=new byte[4];  int b4Posn=0;  int i=0;  byte sbiCrop=0;  byte sbiDecode=0;  for (i=off; i < off + len; i++) {    sbiCrop=(byte)(source[i] & 0x7f);    sbiDecode=DECODABET[sbiCrop];    if (sbiDecode >= WHITE_SPACE_ENC) {      if (sbiDecode >= EQUALS_SIGN_ENC) {        b4[b4Posn++]=sbiCrop;        if (b4Posn > 3) {          outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,options);          b4Posn=0;          if (sbiCrop == EQUALS_SIGN) {            break;          }        }      }    } else {      throw new java.io.IOException(String.format("Bad Base64 input character '%c' in array position %d",source[i],i));    }  }  byte[] out=new byte[outBuffPosn];  System.arraycopy(outBuff,0,out,0,outBuffPosn);  return out;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.DIRECTIVE___GLOSSARY_1:    return glossary_1 != null && !glossary_1.isEmpty();case UmplePackage.DIRECTIVE___GENERATE_1:  return generate_1 != null && !generate_1.isEmpty();case UmplePackage.DIRECTIVE___GENERATE_PATH_1:return generate_path_1 != null && !generate_path_1.isEmpty();case UmplePackage.DIRECTIVE___USE_STATEMENT_1:return useStatement_1 != null && !useStatement_1.isEmpty();case UmplePackage.DIRECTIVE___NAMESPACE_1:return namespace_1 != null && !namespace_1.isEmpty();case UmplePackage.DIRECTIVE___TRACE_TYPE_1:return traceType_1 != null && !traceType_1.isEmpty();case UmplePackage.DIRECTIVE___ENTITY_1:return entity_1 != null && !entity_1.isEmpty();case UmplePackage.DIRECTIVE___DEBUG_1:return debug_1 != null && !debug_1.isEmpty();case UmplePackage.DIRECTIVE___STRICTNESS_1:return strictness_1 != null && !strictness_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  @SuppressWarnings("unchecked") public <T extends JCTree>T translate(T tree){  if (tree == null) {    return null;  } else {    tree.accept(this);    JCTree result=this.result;    this.result=null;    return (T)result;  }}  }
class C{  public void receiveRtpPacket(RtpPacket packet){  if (baseSeq == -1) {    initSeq(packet.seqnum);  }  updateSeq(packet.seqnum);}  }
class C{  public boolean hasYomi(){  return super.hasAttribute(YOMI);}  }
class C{  public static boolean isSameRow(char[] board){  int[] rows=new int[8];  for (int i=0; i < board.length; i++) {    if (isOccupied(board[i])) {      rows[getRow(i)]++;    }    if (rows[getRow(i)] > 1)     return true;  }  return false;}  }
class C{  public Vector3 abs(){  x=Math.abs(x);  y=Math.abs(y);  z=Math.abs(z);  return this;}  }
class C{  public void testSplitEscapedSemicolons(){  Properties inner=PropertyUtils.splitPropertiesOnSemicolon(PropertyUtils.escapeBackSlashesIfNotNull("foo=bar;baz=blorple\\;zot;windows=c:\\test;glorg=gluux"));  assertEquals(4,inner.size());  assertEquals("bar",inner.getProperty("foo"));  assertEquals("blorple;zot",inner.getProperty("baz"));  assertEquals("gluux",inner.getProperty("glorg"));  assertEquals("c:\\test",inner.getProperty("windows"));}  }
class C{  public boolean isInvalid(){  return createException != null;}  }
class C{  protected void writeToXML(IAnalyzedInterval analyzedInterval,AnalyzedIntervalType jaxbAnalyzedInterval,Marshaller marshaller) throws AdeException {  final File outFile=Ade.getAde().getConfigProperties().getOutputFilenameGenerator().getIntervalXmlFile(analyzedInterval,m_framingFlowType);  if (m_verbose) {    logger.info("saving xml in " + outFile.getAbsolutePath());  }  OutputStreamWriter xmlStreamWriter=null;  FileOutputStream fos=null;  try {    final File parentdir=outFile.getParentFile();    parentdir.mkdirs();    outFile.createNewFile();    fos=new FileOutputStream(outFile);    xmlStreamWriter=new OutputStreamWriter(fos,StandardCharsets.UTF_8);    xmlStreamWriter.write("<?xml version='1.0' encoding='UTF-8' ?> \n");    xmlStreamWriter.write("<?xml-stylesheet href=\"./xslt/AnalyzedInterval.xsl\" type=\"text/xsl\" ?> \n");    final ObjectFactory factory=new ObjectFactory();    marshaller.marshal(factory.createAnalyzedInterval(jaxbAnalyzedInterval),xmlStreamWriter);  } catch (  IOException e) {    throw new AdeInternalException("Failed to create xml file for interval " + outFile.getName() + " of source "+ m_source.getSourceId(),e);  }catch (  JAXBException e) {    throw new AdeInternalException("Failed to write xml file for interval " + outFile.getName() + " of source "+ m_source.getSourceId(),e);  } finally {    if (xmlStreamWriter != null) {      try {        xmlStreamWriter.close();      } catch (      IOException e) {        logger.error("Failed to close file: " + outFile.getName(),e);      }    }    if (fos != null) {      try {        fos.close();      } catch (      IOException e) {        logger.error("Failed to close file: " + outFile.getName(),e);      }    }  }}  }
class C{  public boolean unloadQueuedChunks(){  return false;}  }
class C{  public LZMA2InputStream(InputStream in,int dictSize,byte[] presetDict){  if (in == null)   throw new NullPointerException();  this.in=new DataInputStream(in);  this.lz=new LZDecoder(getDictSize(dictSize),presetDict);  if (presetDict != null && presetDict.length > 0)   needDictReset=false;}  }
class C{  private boolean login(String userid,String passwd){  return authenticator.isAuthentic(userid,passwd);}  }
class C{  public RegionDirectory(ConcurrentMap<String,File> fileRegion,ConcurrentMap<ChunkKey,byte[]> chunkRegion,FileSystemStats stats){  super(new SingleInstanceLockFactory());  fs=new FileSystem(fileRegion,chunkRegion,stats);}  }
class C{  public synchronized void openDriver(SurfaceHolder holder) throws IOException {  Camera theCamera=camera;  if (theCamera == null) {    if (requestedCameraId >= 0) {      theCamera=OpenCameraInterface.open(requestedCameraId);    } else {      theCamera=OpenCameraInterface.open();    }    if (theCamera == null) {      throw new IOException();    }    camera=theCamera;  }  theCamera.setPreviewDisplay(holder);  if (!initialized) {    initialized=true;    configManager.initFromCameraParameters(theCamera);  }  Camera.Parameters parameters=theCamera.getParameters();  String parametersFlattened=parameters == null ? null : parameters.flatten();  try {    configManager.setDesiredCameraParameters(theCamera,false);  } catch (  RuntimeException re) {    Log.w(TAG,"Camera rejected parameters. Setting only minimal safe-mode parameters");    Log.i(TAG,"Resetting to saved camera params: " + parametersFlattened);    if (parametersFlattened != null) {      parameters=theCamera.getParameters();      parameters.unflatten(parametersFlattened);      try {        theCamera.setParameters(parameters);        configManager.setDesiredCameraParameters(theCamera,true);      } catch (      RuntimeException re2) {        Log.w(TAG,"Camera rejected even safe-mode parameters! No configuration");      }    }  }}  }
class C{  private Version(){}  }
class C{  public CompositeFilter(){}  }
class C{  public Wine runForeground(File workingDirectory,String executableToRun,List<String> arguments,Map<String,String> environment) throws CancelException {  Process process=runAndGetProcess(workingDirectory,executableToRun,arguments,environment);  try {    lastReturnCode=process.waitFor();  } catch (  InterruptedException e) {    throw new CancelException(e);  }  return this;}  }
class C{  protected boolean isInside(MutableCoord coord){  if (coord.getX() < 0 || coord.getY() < 0)   return false;  if (coord.getX() > getWidth() || coord.getY() > getHeight())   return false;  return true;}  }
class C{  public String strOfParents(int i){  int[] ap=this.getParents(i);  String s="";  for (  int anAp : ap) {    s=s + " " + anAp;  }  return s;}  }
class C{  public void hashJoinAndEmit(final IBindingSet[] chunk,final BOpStats stats,final IBuffer<IBindingSet> outputBuffer,final IConstraint[] joinConstraints,final IVariable<?> askVar){  if (!getOpen().get())   throw new IllegalStateException();  final HTree rightSolutions=getRightSolutions();  final IKeyBuilder keyBuilder=rightSolutions.getIndexMetadata().getKeyBuilder();  if (log.isInfoEnabled()) {    log.info("rightSolutions: #nnodes=" + rightSolutions.getNodeCount() + ",#leaves="+ rightSolutions.getLeafCount()+ ",#entries="+ rightSolutions.getEntryCount());  }  final boolean noJoinVars=getJoinVars().length == 0;  final int n;  if (stats != null) {    stats.chunksIn.increment();    stats.unitsIn.add(chunk.length);  }  final AtomicInteger vectorSize=new AtomicInteger();  final BS[] a=vector(chunk,getJoinVars(),null,false,vectorSize);  n=vectorSize.get();  nleftConsidered.add(n);  int fromIndex=0;  while (fromIndex < n) {    final int hashCode=a[fromIndex].hashCode;    int toIndex=n;    for (int i=fromIndex + 1; i < n; i++) {      if (a[i].hashCode != hashCode) {        toIndex=i;        break;      }    }    final int bucketSize=toIndex - fromIndex;    if (log.isTraceEnabled())     log.trace("hashCode=" + hashCode + ": #left="+ bucketSize+ ", vectorSize="+ n+ ", firstLeft="+ a[fromIndex]);    int njoined=0;    int nrejected=0;{      final byte[] key=keyBuilder.reset().append(hashCode).getKey();      final ITupleIterator<?> titr=rightSolutions.lookupAll(key);      long sameHashCodeCount=0;      final Set<IBindingSet> leftSolutionsWithoutMatch=new LinkedHashSet<IBindingSet>();      final Set<IBindingSet> existsSolutions=new LinkedHashSet<IBindingSet>();      if (!titr.hasNext()) {        for (int i=fromIndex; i < toIndex; i++) {          final IBindingSet leftSolution=a[i].bset;          leftSolutionsWithoutMatch.add(leftSolution);        }      } else {        while (titr.hasNext()) {          sameHashCodeCount++;          final ITuple<?> t=titr.next();          final IBindingSet rightSolution=decodeSolution(t);          nrightConsidered.increment();          for (int i=fromIndex; i < toIndex; i++) {            final IBindingSet leftSolution=a[i].bset;            leftSolutionsWithoutMatch.add(leftSolution);            final IBindingSet outSolution=BOpContext.bind(leftSolution,rightSolution,getConstraints(),getSelectVars());            nJoinsConsidered.increment();            if (noJoinVars && nJoinsConsidered.get() == getNoJoinVarsLimit()) {              if (nleftConsidered.get() > 1 && nrightConsidered.get() > 1) {                throw new UnconstrainedJoinException();              }            }            if (outSolution == null) {              nrejected++;              if (log.isTraceEnabled())               log.trace("Does not join" + ": hashCode=" + hashCode + ", sameHashCodeCount="+ sameHashCodeCount+ ", #left="+ bucketSize+ ", #joined="+ njoined+ ", #rejected="+ nrejected+ ", left="+ leftSolution+ ", right="+ rightSolution);            } else {              njoined++;              leftSolutionsWithoutMatch.remove(leftSolution);              if (log.isDebugEnabled())               log.debug("JOIN" + ": hashCode=" + hashCode + ", sameHashCodeCount="+ sameHashCodeCount+ ", #left="+ bucketSize+ ", #joined="+ njoined+ ", #rejected="+ nrejected+ ", solution="+ outSolution);            }switch (getJoinType()) {case Normal:case Optional:{                if (outSolution != null) {                  getEncoder().resolveCachedValues(outSolution);                  if (askVar != null) {                    outSolution.set(askVar,new Constant<XSDBooleanIV<?>>(XSDBooleanIV.valueOf(true)));                  }                  outputBuffer.add(outSolution);                }                break;              }case Exists:            if (askVar != null) {              existsSolutions.add(leftSolution);            }          break;case NotExists:        break;default :      throw new AssertionError();  }}}}for (final IBindingSet leftSolutionWithoutMatch : leftSolutionsWithoutMatch) {switch (getJoinType()) {case Optional:case NotExists:outputBuffer.add(leftSolutionWithoutMatch);break;case Exists:{if (askVar != null) {leftSolutionWithoutMatch.set(askVar,new Constant<XSDBooleanIV<?>>(XSDBooleanIV.valueOf(false)));outputBuffer.add(leftSolutionWithoutMatch);}break;}case Normal:break;default :throw new AssertionError();}}for (final IBindingSet existsSolution : existsSolutions) {switch (getJoinType()) {case Optional:case NotExists:break;case Exists:{if (askVar != null) {existsSolution.set(askVar,new Constant<XSDBooleanIV<?>>(XSDBooleanIV.valueOf(true)));outputBuffer.add(existsSolution);}break;}case Normal:break;default :throw new AssertionError();}}}fromIndex=toIndex;}}  }
class C{  @Override public void updateScreen(){  super.updateScreen();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public Task beginSubTask(final String subTask,final int subTaskWork){  Task task=new Task(subTask,subTaskWork);  tasks.add(task);  return task;}  }
class C{  @Override @TransactionAttribute(TransactionAttributeType.NOT_SUPPORTED) public InstanceStatus notifyInstance(String instanceId,ProvisioningSettings settings,Properties properties) throws APPlatformException {  LOGGER.info("notifyInstance({})",LogAndExceptionConverter.getLogText(instanceId,settings));  InstanceStatus status=null;  if (instanceId == null || settings == null || properties == null) {    return status;  }  PropertyHandler propertyHandler=new PropertyHandler(settings);  if ("finish".equals(properties.get("command"))) {    if (FlowState.MANUAL.equals(propertyHandler.getState())) {      propertyHandler.setState(FlowState.FINISHED);      status=setNotificationStatus(settings,propertyHandler);      LOGGER.debug("Got finish event => changing instance status to finished");    } else {      APPlatformException pe=new APPlatformException("Got finish event but instance is in state " + propertyHandler.getState() + " => nothing changed");      LOGGER.debug(pe.getMessage());      throw pe;    }  }  return status;}  }
class C{  public long readRawVarint64() throws IOException {  int shift=0;  long result=0;  while (shift < 64) {    final byte b=readRawByte();    result|=(long)(b & 0x7F) << shift;    if ((b & 0x80) == 0) {      return result;    }    shift+=7;  }  throw InvalidProtocolBufferNanoException.malformedVarint();}  }
class C{  public static void write(OMRect rect,Link link,LinkProperties props) throws IOException {switch (rect.getRenderType()) {case OMRect.RENDERTYPE_LATLON:    LinkRectangle.write((float)rect.getNorthLat(),(float)rect.getWestLon(),(float)rect.getSouthLat(),(float)rect.getEastLon(),rect.getLineType(),props,link.dos);  break;case OMRect.RENDERTYPE_XY:LinkRectangle.write(rect.getLeft(),rect.getTop(),rect.getRight(),rect.getBottom(),props,link.dos);break;case OMRect.RENDERTYPE_OFFSET:LinkRectangle.write((float)rect.getNorthLat(),(float)rect.getWestLon(),rect.getLeft(),rect.getTop(),rect.getRight(),rect.getBottom(),props,link.dos);break;default :Debug.error("LinkRectangle.write: rect rendertype unknown.");}}  }
class C{  public StateMachineTestPlan(Map<Object,StateMachine<S,E>> stateMachines,List<StateMachineTestPlanStep<S,E>> steps,Integer defaultAwaitTime){  this.stateMachines=stateMachines;  this.steps=steps;  if (defaultAwaitTime != null) {    this.defaultAwaitTime=defaultAwaitTime;  }}  }
class C{  public static PlanSet enumOpt(GDFNode node,MemoStructure memo,double maxCosts) throws DMLRuntimeException {  if (memo.constainsEntry(node))   return memo.getEntry(node);  PlanSet P=enumNodePlans(node,memo,maxCosts);  for (  GDFNode c : node.getInputs()) {    PlanSet Pc=enumOpt(c,memo,maxCosts);    if (c instanceof GDFLoopNode)     Pc=Pc.selectChild(node);    P=P.crossProductChild(Pc);    _enumeratedPlans+=P.size();    pruneInvalidPlans(P);  }  pruneSuboptimalPlans(P,maxCosts);  memo.putEntry(node,P);  return P;}  }
class C{  public synchronized void close() throws IOException {  if (in == null)   return;  in.close();  in=null;  buf=null;}  }
class C{  public static void testPeriodOpen(Properties ctx,Timestamp dateAcct,String docBaseType) throws PeriodClosedException {  if (!MPeriod.isOpen(ctx,dateAcct,docBaseType)) {    throw new PeriodClosedException(dateAcct,docBaseType);  }}  }
class C{  @Override public void run(){  amIActive=true;  panel=new CoordinateTransformDialog(myHost);  if (myHost instanceof JFrame) {    JDialog dialog=new JDialog((JFrame)myHost,"Coordinate System Transformation",false);    Container contentPane=dialog.getContentPane();    contentPane.add(panel,BorderLayout.CENTER);    dialog.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);    dialog.pack();    dialog.setLocationRelativeTo(null);    dialog.setVisible(true);  } else {    JFrame frame=new JFrame("Coordinate System Transformation");    Container contentPane=frame.getContentPane();    contentPane.add(panel,BorderLayout.CENTER);    frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);    frame.pack();    frame.setLocationRelativeTo(null);    frame.setVisible(true);  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void updateTime(int columnIndex,Time x) throws SQLException {  checkUpdatable();  getField(columnIndex).setTime(x);}  }
class C{  public static String remove(String s,String sub){  int c=0;  int sublen=sub.length();  if (sublen == 0) {    return s;  }  int i=s.indexOf(sub,c);  if (i == -1) {    return s;  }  StringBuilder sb=new StringBuilder(s.length());  do {    sb.append(s.substring(c,i));    c=i + sublen;  } while ((i=s.indexOf(sub,c)) != -1);  if (c < s.length()) {    sb.append(s.substring(c,s.length()));  }  return sb.toString();}  }
class C{  protected void updateNextObject(){  if (!updateNextIndex()) {    findNextValidParent();  }}  }
class C{  public TechnicalServiceNotAliveException(Reason reason){  super(String.valueOf(reason));  setMessageKey(getMessageKey() + "." + reason);}  }
class C{  public void unbind(Node node){  if (elementNodeMap == null) {    return;  }  GraphicsNode gn=null;  SoftReference sr=(SoftReference)elementNodeMap.get(node);  if (sr != null)   gn=(GraphicsNode)sr.get();  elementNodeMap.remove(node);  if (gn != null)   nodeElementMap.remove(gn);}  }
class C{  public CTag(final int tagId,final String name,final String description,final TagType type,final SQLProvider sqlProvider){  Preconditions.checkArgument(tagId >= 0,"IE00845: Tag IDs must not be negative");  m_name=Preconditions.checkNotNull(name,"IE00846: Name argument can't be null");  m_description=Preconditions.checkNotNull(description,"IE00847: Description argument can't be null");  m_type=Preconditions.checkNotNull(type,"IE00848: Type argument can't be null");  m_sql=Preconditions.checkNotNull(sqlProvider,"IE00849: SQL Provider argument can't be null");  m_id=tagId;}  }
class C{  public synchronized boolean addOwner(Principal caller,Principal owner) throws NotOwnerException {  if (!isOwner(caller))   throw new NotOwnerException();  ownerGroup.addMember(owner);  return false;}  }
class C{  public int nextInt(int least,int bound){  if (least >= bound)   throw new IllegalArgumentException();  return nextInt(bound - least) + least;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  java.io.File f=getFile(stack);  return Boolean.valueOf(f != null && f.isDirectory());}  }
class C{  @Override public Type popValue() throws DataflowAnalysisException {  exactTypeSet.clear(getStackLocation(0));  return super.popValue();}  }
class C{  public static DateTimeFormatter basicDate(){  return Constants.bd;}  }
class C{  public static void write(Object o,String filename) throws JAXBException {  write(o,new File(filename));}  }
class C{  public DistanceMouseMode(String name,boolean consumeEvents,InformationDelegator id){  super(name,consumeEvents);  infoDelegator=id;}  }
class C{  private void checkValidity(SortedMap<String,String> mapping) throws AdeUsageException {  StringBuilder bldinvalidMaps=null;  for (  String key : mapping.keySet()) {    if (!m_allKeys.contains(key)) {      if (bldinvalidMaps == null) {        bldinvalidMaps=new StringBuilder(key);      } else {        bldinvalidMaps.append(", " + key);      }    }  }  if (bldinvalidMaps != null && bldinvalidMaps.toString() != null) {    throw new AdeUsageException("The following result mapping were not found: " + bldinvalidMaps.toString() + ". Valid staistics are "+ m_allKeys);  }}  }
class C{  public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof RC2ParameterSpec)) {    return false;  }  RC2ParameterSpec other=(RC2ParameterSpec)obj;  return ((effectiveKeyBits == other.effectiveKeyBits) && java.util.Arrays.equals(iv,other.iv));}  }
class C{  private Collection<Unit> fireAA(final Route route,final Collection<Unit> units){  if (m_aaInMoveUtil == null) {    m_aaInMoveUtil=new AAInMoveUtil();  }  m_aaInMoveUtil.initialize(m_bridge);  final Collection<Unit> rVal=m_aaInMoveUtil.fireAA(route,units,UnitComparator.getLowestToHighestMovementComparator(),m_currentMove);  m_aaInMoveUtil=null;  return rVal;}  }
class C{  synchronized void unpinImpl(){  if (!permanent && refSet.isEmpty()) {    weakImpl.unpin();  }}  }
class C{  public static Database findDatabase(ResultHierarchy hier,Result baseResult){  final List<Database> dbs=filterResults(hier,baseResult,Database.class);  return (!dbs.isEmpty()) ? dbs.get(0) : null;}  }
class C{  @Override public List<Event> readEvents(int numEvents) throws IOException {  ensureOpen();  List<Event> events=Lists.newLinkedList();  for (int i=0; i < numEvents; i++) {    Event event=readEvent();    if (event != null) {      events.add(event);    } else {      break;    }  }  return events;}  }
class C{  public String toString(final String enc) throws UnsupportedEncodingException {  return new String(this.toByteArray(),enc);}  }
class C{  protected int numShapes(){  return 5;}  }
class C{  protected boolean isDirectPathBetweenPoints(Vec3d posVec31,Vec3d posVec32,int sizeX,int sizeY,int sizeZ){  RayTraceResult movingobjectposition=this.worldObj.rayTraceBlocks(posVec31,new Vec3d(posVec32.xCoord,posVec32.yCoord + (double)this.theEntity.height * 0.5D,posVec32.zCoord),false,true,false);  return movingobjectposition == null || movingobjectposition.typeOfHit == RayTraceResult.Type.MISS;}  }
class C{  @SuppressWarnings({"regex","deterministic"}) public static boolean isRegex(String s,int groups){  Pattern p;  try {    p=Pattern.compile(s);  } catch (  PatternSyntaxException e) {    return false;  }  return getGroupCount(p) >= groups;}  }
class C{  public void insertFront(int x){  IntNode oldFrontNode=sentinel.next;  IntNode newNode=new IntNode(x,oldFrontNode);  sentinel.next=newNode;  size+=1;}  }
class C{  public static void send(Connection connection,Packet packet,List<String> to,List<String> cc,List<String> bcc) throws XMPPException {  send(connection,packet,to,cc,bcc,null,null,false);}  }
class C{  @SuppressWarnings("OverlyLongMethod") private char[] eFormatDigits(final double x,final char eChar){  char[] ca1;  char[] ca2;  final char[] ca3;  String sx;  int i;  int j;  int k;  final int p;  int expon=0;  int ePos;  final int rPos;  final int eSize;  boolean minusSign=false;  if (x > 0.0) {    sx=Double.toString(x);  } else   if (x < 0.0) {    sx=Double.toString(-x);    minusSign=true;  } else {    sx=Double.toString(x);    if (sx.charAt(0) == '-') {      minusSign=true;      sx=sx.substring(1);    }  }  ePos=sx.indexOf('E');  if (ePos == -1) {    ePos=sx.indexOf('e');  }  rPos=sx.indexOf('.');  if (ePos != -1) {    int ie=ePos + 1;    expon=0;    if (sx.charAt(ie) == '-') {      for (++ie; ie < sx.length(); ie++) {        if (sx.charAt(ie) != '0') {          break;        }      }      if (ie < sx.length()) {        expon=-Integer.parseInt(sx.substring(ie));      }    } else {      if (sx.charAt(ie) == '+') {        ++ie;      }      for (; ie < sx.length(); ie++) {        if (sx.charAt(ie) != '0') {          break;        }      }      if (ie < sx.length()) {        expon=Integer.parseInt(sx.substring(ie));      }    }  }  if (rPos != -1) {    expon+=rPos - 1;  }  if (precisionSet) {    p=precision;  } else {    p=defaultDigits - 1;  }  if (rPos != -1 && ePos != -1) {    ca1=(sx.substring(0,rPos) + sx.substring(rPos + 1,ePos)).toCharArray();  } else   if (rPos != -1) {    ca1=(sx.substring(0,rPos) + sx.substring(rPos + 1)).toCharArray();  } else   if (ePos != -1) {    ca1=sx.substring(0,ePos).toCharArray();  } else {    ca1=sx.toCharArray();  }  boolean carry;  int i0;  if (ca1[0] != '0') {    i0=0;  } else {    for (i0=0; i0 < ca1.length; i0++) {      if (ca1[i0] != '0') {        break;      }    }  }  if (i0 + p < ca1.length - 1) {    carry=checkForCarry(ca1,i0 + p + 1);    if (carry) {      carry=startSymbolicCarry(ca1,i0 + p,i0);    }    if (carry) {      ca2=new char[i0 + p + 1];      ca2[i0]='1';      for (j=0; j < i0; j++) {        ca2[j]='0';      }      for (i=i0, j=i0 + 1; j < p + 1; i++, j++) {        ca2[j]=ca1[i];      }      expon++;      ca1=ca2;    }  }  if (Math.abs(expon) < 100 && !optionalL) {    eSize=4;  } else {    eSize=5;  }  if (alternateForm || !precisionSet || precision != 0) {    ca2=new char[2 + p + eSize];  } else {    ca2=new char[1 + eSize];  }  if (ca1[0] != '0') {    ca2[0]=ca1[0];    j=1;  } else {    for (j=1; j < (ePos == -1 ? ca1.length : ePos); j++) {      if (ca1[j] != '0') {        break;      }    }    if ((ePos != -1 && j < ePos) || (ePos == -1 && j < ca1.length)) {      ca2[0]=ca1[j];      expon-=j;      j++;    } else {      ca2[0]='0';      j=2;    }  }  if (alternateForm || !precisionSet || precision != 0) {    ca2[1]='.';    i=2;  } else {    i=1;  }  for (k=0; k < p && j < ca1.length; j++, i++, k++) {    ca2[i]=ca1[j];  }  for (; i < ca2.length - eSize; i++) {    ca2[i]='0';  }  ca2[i++]=eChar;  if (expon < 0) {    ca2[i++]='-';  } else {    ca2[i++]='+';  }  expon=Math.abs(expon);  if (expon >= 100) {switch (expon / 100) {case 1:      ca2[i]='1';    break;case 2:  ca2[i]='2';break;case 3:ca2[i]='3';break;case 4:ca2[i]='4';break;case 5:ca2[i]='5';break;case 6:ca2[i]='6';break;case 7:ca2[i]='7';break;case 8:ca2[i]='8';break;case 9:ca2[i]='9';break;}i++;}switch ((expon % 100) / 10) {case 0:ca2[i]='0';break;case 1:ca2[i]='1';break;case 2:ca2[i]='2';break;case 3:ca2[i]='3';break;case 4:ca2[i]='4';break;case 5:ca2[i]='5';break;case 6:ca2[i]='6';break;case 7:ca2[i]='7';break;case 8:ca2[i]='8';break;case 9:ca2[i]='9';break;}i++;switch (expon % 10) {case 0:ca2[i]='0';break;case 1:ca2[i]='1';break;case 2:ca2[i]='2';break;case 3:ca2[i]='3';break;case 4:ca2[i]='4';break;case 5:ca2[i]='5';break;case 6:ca2[i]='6';break;case 7:ca2[i]='7';break;case 8:ca2[i]='8';break;case 9:ca2[i]='9';break;}int nZeros=0;if (!leftJustify && leadingZeros) {int xThousands=0;if (thousands) {int xlead=0;if (ca2[0] == '+' || ca2[0] == '-' || ca2[0] == ' ') {xlead=1;}int xdp=xlead;for (; xdp < ca2.length; xdp++) {if (ca2[xdp] == '.') {break;}}xThousands=(xdp - xlead) / 3;}if (fieldWidthSet) {nZeros=fieldWidth - ca2.length;}if ((!minusSign && (leadingSign || leadingSpace)) || minusSign) {nZeros--;}nZeros-=xThousands;if (nZeros < 0) {nZeros=0;}}j=0;if ((!minusSign && (leadingSign || leadingSpace)) || minusSign) {ca3=new char[ca2.length + nZeros + 1];j++;} else {ca3=new char[ca2.length + nZeros];}if (!minusSign) {if (leadingSign) {ca3[0]='+';}if (leadingSpace) {ca3[0]=' ';}} else {ca3[0]='-';}for (k=0; k < nZeros; j++, k++) {ca3[j]='0';}for (i=0; i < ca2.length && j < ca3.length; i++, j++) {ca3[j]=ca2[i];}int lead=0;if (ca3[0] == '+' || ca3[0] == '-' || ca3[0] == ' ') {lead=1;}int dp=lead;for (; dp < ca3.length; dp++) {if (ca3[dp] == '.') {break;}}final int nThousands=dp / 3;if (dp < ca3.length) {ca3[dp]=dfs.getDecimalSeparator();}char[] ca4=ca3;if (thousands && nThousands > 0) {ca4=new char[ca3.length + nThousands + lead];ca4[0]=ca3[0];for (i=lead, k=lead; i < dp; i++) {if (i > 0 && (dp - i) % 3 == 0) {ca4[k]=dfs.getGroupingSeparator();ca4[k + 1]=ca3[i];k+=2;} else {ca4[k]=ca3[i];k++;}}for (; i < ca3.length; i++, k++) {ca4[k]=ca3[i];}}return ca4;}  }
class C{  public GraphModel buildExposedGraph(GraphModel graph){  Map<GraphNode,GraphNode> hiddenNodeMap=buildHiddenNodeMap();  if (hiddenNodeMap.isEmpty()) {    return graph;  }  HiddenNodesGizmo gizmo=new HiddenNodesGizmo(hiddenNodeMap);  Collection<GraphNode> nodes=getExposedNodeSet(graph,gizmo);  Collection<GraphEdge> edges=Lists.newArrayList();  gizmo.addExposedEdges(edges,graph.getEdges());  GraphModel result=new GraphModel();  GraphBuilder builder=result.getBuilder();  for (  GraphNode node : nodes) {    builder.newNode(node);  }  for (  GraphEdge edge : edges) {    builder.addEdge(edge);  }  return result;}  }
class C{  protected <T>T post(final String path,final HttpEntity payload,final int expectedResponseStatus,final TypeReference<T> typeReference) throws IOException {  HttpResponse result=restClient.send(RestClient.Method.POST,path,payload);  restClient.check(result,expectedResponseStatus);  return deserializeObjectFromJson(result.getEntity(),typeReference);}  }
class C{  public static int toInt(byte[] bytes,int offset,final int length){  if (length != SIZEOF_INT || offset + length > bytes.length) {    throw explainWrongLengthOrOffset(bytes,offset,length,SIZEOF_INT);  }  int n=0;  for (int i=offset; i < (offset + length); i++) {    n<<=8;    n^=bytes[i] & 0xFF;  }  return n;}  }
class C{  public static Cursor queryURI(Context context,String uri_str,String[] projection,String selection,String[] selectionArgs,String sortOrder){  return context.getContentResolver().query(Uri.parse(uri_str),projection,selection,selectionArgs,sortOrder);}  }
class C{  @Override public void visualizeBlock(Block bb,Analysis<A,S,T> analysis){  this.sbBlock.setLength(0);  List<Node> contents=new LinkedList<>();switch (bb.getType()) {case REGULAR_BLOCK:    contents.addAll(((RegularBlock)bb).getContents());  break;case EXCEPTION_BLOCK:contents.add(((ExceptionBlock)bb).getNode());break;case CONDITIONAL_BLOCK:break;case SPECIAL_BLOCK:break;default :assert false : "All types of basic blocks covered";}boolean notFirst=false;for (Node t : contents) {if (notFirst) {this.sbBlock.append("\\n");}notFirst=true;visualizeBlockNode(t,analysis);}boolean centered=false;if (this.sbBlock.length() == 0) {centered=true;if (bb.getType() == BlockType.SPECIAL_BLOCK) {visualizeSpecialBlock((SpecialBlock)bb);} else if (bb.getType() == BlockType.CONDITIONAL_BLOCK) {this.sbDigraph.append(" \",];\n");return;} else {this.sbDigraph.append("?? empty ?? \",];\n");return;}}if (analysis != null) {visualizeBlockTransferInput(bb,analysis);}this.sbDigraph.append((this.sbBlock.toString() + (centered ? "" : "\\n")).replace("\\n","\\l") + " \",];\n");}  }
class C{  public PatternMatchUntilExpr(Expression low,Expression high,Expression single){  this.low=low;  this.high=high;  this.single=single;}  }
class C{  private Node svol(){  Node node=new Node(NodeType.SVOL,lineargs);  return node;}  }
class C{  public void clearAuthorizationContext(Service s,String userLink){  if (!this.isPrivilegedService(s)) {    throw new RuntimeException("Service not allowed to clear authorization token");  }synchronized (this.state) {    Set<String> tokenSet=this.userLinktoTokenMap.remove(userLink);    if (tokenSet != null) {      for (      String token : tokenSet) {        this.authorizationContextCache.remove(token);      }    }  }}  }
class C{  public void downFocusCycle(Container aContainer){  if (aContainer != null && aContainer.isFocusCycleRoot()) {    aContainer.transferFocusDownCycle();  }}  }
class C{  public GenericFileOutputOperator(){  setTupleSeparator(System.getProperty("line.separator"));  setExpireStreamAfterAccessMillis(DEFAULT_STREAM_EXPIRY_ACCESS_MILL);  setRotationWindows(DEFAULT_ROTATION_WINDOWS);}  }
class C{  public static String readStringUTF16(ByteBuffer buffer,int strLen){  String str=Buffers.readString(buffer,strLen);  for (int i=0; i < str.length(); i++) {    char c=str.charAt(i);    if (c == 0) {      return str.substring(0,i);    }  }  return str;}  }
class C{  @Override public boolean markSupported(){  return true;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:07.609 -0500",hash_original_method="2D908156D971A0132EC1B636390B02E6",hash_generated_method="F1602DC1FC34332C43F6C2E8DA85564E") private synchronized void removeMessages(){  mDrawIsScheduled=false;  mSplitPictureIsScheduled=false;  if (mMessages != null) {    mMessages.clear();  } else {    mHandler.removeCallbacksAndMessages(null);  }}  }
class C{  public void requestFocus(){  if (m_lookup != null && m_lookup.getDisplayType() != DisplayType.Search)   m_combo.requestFocus(); else   m_text.requestFocus();}  }
class C{  public static ArrayList<Post> parsePosts(JSONObject jsonObject){  ArrayList<Post> posts=new ArrayList<>();  try {    JSONArray postArray=jsonObject.getJSONArray("posts");    for (int i=0; i < postArray.length(); i++) {      JSONObject postObject=postArray.getJSONObject(i);      Post post=new Post();      post.setTitle(postObject.optString("title","N/A"));      post.setThumbnailUrl(postObject.optString("thumbnail",Config.DEFAULT_THUMBNAIL_URL));      post.setCommentCount(postObject.optInt("comment_count",0));      post.setDate(postObject.optString("date","N/A"));      post.setContent(postObject.optString("content","N/A"));      post.setAuthor(postObject.getJSONObject("author").optString("name","N/A"));      post.setId(postObject.optInt("id"));      post.setUrl(postObject.optString("url"));      JSONObject featuredImages=postObject.optJSONObject("thumbnail_images");      if (featuredImages != null) {        post.setFeaturedImageUrl(featuredImages.optJSONObject("full").optString("url",Config.DEFAULT_THUMBNAIL_URL));      }      posts.add(post);    }  } catch (  JSONException e) {    Log.d(TAG,"----------------- Json Exception");    Log.d(TAG,e.getMessage());    return null;  }  return posts;}  }
class C{  private String toFilterStr(final BigdataPredicate pred,final String var,final Object val){  final BlueprintsValueFactory factory=graph.factory;  final StringBuilder sb=new StringBuilder();  if (pred == BigdataPredicate.EQ) {    throw new IllegalArgumentException();  } else   if (pred == BigdataPredicate.GT || pred == BigdataPredicate.GTE || pred == BigdataPredicate.LT || pred == BigdataPredicate.LTE || pred == BigdataPredicate.NE) {    final Literal l=factory.toLiteral(val);    sb.append("    filter(").append(var);switch (pred) {case GT:      sb.append(" > ");    break;case GTE:  sb.append(" >= ");break;case LT:sb.append(" < ");break;case LTE:sb.append(" <= ");break;case NE:sb.append(" != ");break;default :break;}sb.append(l).append(") .");} else if (pred == BigdataPredicate.IN || pred == BigdataPredicate.NIN) {sb.append("    filter(");if (pred == BigdataPredicate.NIN) {sb.append("!(");}sb.append(var).append(" in (");final Collection<?> c=(Collection<?>)val;for (Object o : c) {final Literal l=factory.toLiteral(o);sb.append(l).append(", ");}sb.setLength(sb.length() - 2);if (pred == BigdataPredicate.NIN) {sb.append(")");}sb.append(")) .");}return sb.toString();}  }
class C{  @Override public void updateNClob(int columnIndex,NClob x) throws SQLException {  throw unsupported("NClob");}  }
class C{  public ForwardingDrawable(Drawable drawable){  mCurrentDelegate=drawable;  DrawableUtils.setCallbacks(mCurrentDelegate,this,this);}  }
class C{  private void crypt(Cipher cipher) throws BuildException {  FileInputStream in=null;  try {    in=new FileInputStream(this.inputFile);  } catch (  FileNotFoundException e) {    throw new BuildException("Could not find input file " + this.inputFile,e);  }  FileOutputStream fileout=null;  try {    fileout=new FileOutputStream(this.outputFile);  } catch (  FileNotFoundException e) {    throw new BuildException("Invalid output file " + this.outputFile,e);  }  CipherOutputStream out=new CipherOutputStream(fileout,cipher);  byte[] buffer=new byte[8192];  int length;  try {    while ((length=in.read(buffer)) != -1) {      out.write(buffer,0,length);    }    in.close();    out.close();  } catch (  IOException e) {    throw new BuildException("Error writing output file " + this.outputFile,e);  }  this.logInfo("Performed cryptographic transformation on " + this.inputFile.getAbsolutePath() + " to "+ this.outputFile.getAbsolutePath());}  }
class C{  private void growByOne(){  int adding=0;  if (capacityIncrement <= 0) {    if ((adding=elementData.length) == 0) {      adding=1;    }  } else {    adding=capacityIncrement;  }  E[] newData=newElementArray(elementData.length + adding);  System.arraycopy(elementData,0,newData,0,elementCount);  elementData=newData;}  }
class C{  public TIntArrayList grep(TIntProcedure condition){  TIntArrayList list=new TIntArrayList();  for (int i=0; i < _pos; i++) {    if (condition.execute(_data[i])) {      list.add(_data[i]);    }  }  return list;}  }
class C{  public void stop(){  for (  final StoppableTask task : backgroundTasks) {    task.stop();  }}  }
class C{  public static void checkVPoolValidForUnManagedVolumeInProtectedMode(VirtualPool vpool,UnManagedVolume unManagedVolume,DbClient dbClient) throws IngestionException {  boolean haEnabledVpool=VirtualPool.vPoolSpecifiesHighAvailability(vpool);  boolean isVplexVolume=VolumeIngestionUtil.isVplexVolume(unManagedVolume);  boolean isVplexBackendVolume=VolumeIngestionUtil.isVplexBackendVolume(unManagedVolume);  if (haEnabledVpool && !isVplexVolume && !isVplexBackendVolume) {    throw IngestionException.exceptions.cannotIngestNonVplexVolumeIntoVplexVpool(unManagedVolume.getLabel());  }  boolean remoteProtectionEnabled=VirtualPool.vPoolSpecifiesSRDF(vpool);  _logger.debug("Remote protection enabled {}, {}",remoteProtectionEnabled,unManagedVolume.getId());  StringSetMap unManagedVolumeInformation=unManagedVolume.getVolumeInformation();  StringSet copyModes=unManagedVolumeInformation.get(SupportedVolumeInformation.REMOTE_COPY_MODE.toString());  String remoteMirrorEnabledInVolume=unManagedVolume.getVolumeCharacterstics().get(SupportedVolumeCharacterstics.REMOTE_MIRRORING.toString());  String type=PropertySetterUtil.extractValueFromStringSet(SupportedVolumeInformation.REMOTE_VOLUME_TYPE.toString(),unManagedVolumeInformation);  _logger.debug("UnManaged Volume Remote mirror Enabled {}",remoteMirrorEnabledInVolume);  if (remoteProtectionEnabled) {    if (VolumeIngestionUtil.isParentSRDFProtected(unManagedVolume,dbClient)) {      _logger.info("Found a Replica {} and its source volume is SRDF protected.",unManagedVolume.getId());      return;    }    if (RemoteMirrorObject.Types.TARGET.toString().equalsIgnoreCase(type)) {      _logger.warn("UnManaged Volume {} is a SRDF Target, hence cannot be associated with VPool which contains SRDF remote settings configured. Skipping Ingestion",unManagedVolume.getId());      throw IngestionException.exceptions.unmanagedVolumeIsAnSrdfTarget(unManagedVolume.getLabel());    }    if (null == copyModes) {      throw IngestionException.exceptions.unmanagedVolumeWithoutSRDFProtection(unManagedVolume.getLabel());    }    String copyMode=null;    for (    String cMode : copyModes) {      copyMode=cMode;      break;    }    _logger.debug("UnManaged Volume Copy Mode {}",copyMode);    if (!Boolean.parseBoolean(unManagedVolume.getVolumeCharacterstics().get(SupportedVolumeCharacterstics.REMOTE_MIRRORING.toString()))) {      _logger.warn("UnManaged Volume {} is not remote protected, hence cannot be associated with VPool with remote protection configured. Skipping Ingestion",unManagedVolume.getId(),copyMode);      throw IngestionException.exceptions.srdfVpoolRemoteProtectionCopyModeMismatch(unManagedVolume.getLabel(),copyMode);    } else {      Map<String,List<String>> groupCopyModesByVPools=VirtualPool.groupRemoteCopyModesByVPool(vpool,dbClient);      Set<String> supportedVPoolCopyModes=VolumeIngestionUtil.getSupportedCopyModesFromGivenRemoteSettings(groupCopyModesByVPools);      if (null == copyMode || (!SupportedCopyModes.ALL.toString().equalsIgnoreCase(copyMode) && !supportedVPoolCopyModes.contains(copyMode))) {        _logger.warn("UnManaged Volume {} is remote protected via {}, hence cannot be associated " + "with VPool which doesn't contain this mode in at least one of its remote settings. Skipping Ingestion",unManagedVolume.getId(),copyMode);        throw IngestionException.exceptions.srdfVolumeRemoteProtectionCopyModeMismatch(unManagedVolume.getLabel(),copyMode);      }    }  } else   if (RemoteMirrorObject.Types.SOURCE.toString().equalsIgnoreCase(type) && Boolean.parseBoolean(unManagedVolume.getVolumeCharacterstics().get(SupportedVolumeCharacterstics.REMOTE_MIRRORING.toString()))) {    _logger.warn("UnManaged Volume {} is remote protected, hence cannot be associated with VPool without remote protection configured. Skipping Ingestion",unManagedVolume.getId());    throw IngestionException.exceptions.srdfVolumeRemoteProtectionMismatch(unManagedVolume.getLabel());  }}  }
class C{  public Text intern(){  Text txt=INTERN.putIfAbsent(this,this);  return txt == null ? this : txt;}  }
class C{  static public List<OsmElement> sortWays(List<OsmElement> list){  List<OsmElement> result=new ArrayList<OsmElement>();  List<OsmElement> unconnected=new ArrayList<OsmElement>(list);  OsmElement e=unconnected.get(0);  unconnected.remove(0);  if (!e.getName().equals(Way.NAME)) {    return null;  }  result.add(e);  while (true) {    boolean found=false;    for (    OsmElement w : unconnected) {      if (!w.getName().equals(Way.NAME)) {        return null;      }      Node firstNode1=((Way)result.get(0)).getFirstNode();      Node firstNode2=((Way)result.get(0)).getLastNode();      Node lastNode1=((Way)result.get(result.size() - 1)).getFirstNode();      Node lastNode2=((Way)result.get(result.size() - 1)).getLastNode();      Node wFirstNode=((Way)w).getFirstNode();      Node wLastNode=((Way)w).getLastNode();      if (wFirstNode.equals(firstNode1) || wFirstNode.equals(firstNode2) || wLastNode.equals(firstNode1)|| wLastNode.equals(firstNode2)) {        result.add(0,w);        unconnected.remove(w);        found=true;        break;      } else       if (wFirstNode.equals(lastNode1) || wFirstNode.equals(lastNode2) || wLastNode.equals(lastNode1)|| wLastNode.equals(lastNode2)) {        result.add(w);        unconnected.remove(w);        found=true;        break;      }    }    if (!found && unconnected.size() > 0) {      return null;    } else     if (unconnected.size() == 0) {      return result;    }  }}  }
class C{  public void init() throws ServletException {}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col;  int progress=0;  double z, val;  int i;  int[] dX={1,1,1,0,-1,-1,-1,0};  int[] dY={-1,0,1,1,1,0,-1,-1};  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    int rows=image.getNumberRows();    int cols=image.getNumberColumns();    double noData=image.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=image.getValue(row,col);        if (z != noData) {          if (z != 0) {            val=0;            for (i=0; i < 8; i++) {              if (image.getValue(row + dY[i],col + dX[i]) != z) {                val=z;                break;              }            }            output.setValue(row,col,val);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    image.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public Object jjtAccept(ParserVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:37.464 -0500",hash_original_method="F04551903C4B751B14DE46074D4BB62C",hash_generated_method="F04551903C4B751B14DE46074D4BB62C") void onKeyChange(){}  }
class C{  public void free() throws SQLException {}  }
class C{  protected FunctionBlockPropertySourceImpl(){  super();}  }
class C{  private void pruneHash(){  Map<KeyType,Long> prunedHash=new Hashtable<KeyType,Long>();  for (  Entry<KeyType,Long> e : hash.entrySet()) {    if (e.getValue() >= minCount) {      prunedHash.put(e.getKey(),e.getValue());    }  }  hash=null;  hash=prunedHash;  pruned=true;}  }
class C{  private void readObject(ObjectInputStream in) throws ClassNotFoundException, IOException {  in.defaultReadObject();  stroke=(Stroke)SerializationUtils.unwrap((Serializable)in.readObject());}  }
class C{  public void accept(final MethodVisitor mv){  mv.visitLocalVariable(name,desc,signature,start.getLabel(),end.getLabel(),index);}  }
class C{  public static String upperFirstChar(String string){  if (string == null)   return null;  if (string.length() <= 1)   return string.toLowerCase();  StringBuilder sb=new StringBuilder(string);  sb.setCharAt(0,Character.toUpperCase(sb.charAt(0)));  return sb.toString();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @After public void cleanEnv() throws IOException {  FileUtils.deleteDirectory(localTempPath.toFile());  S3FileTransferRequestParamsDto s3FileTransferRequestParamsDto=s3DaoTestHelper.getTestS3FileTransferRequestParamsDto();  s3FileTransferRequestParamsDto.setS3KeyPrefix(testS3KeyPrefix);  s3Dao.deleteDirectory(s3FileTransferRequestParamsDto);}  }
class C{  protected ScopedClassPool(ClassLoader cl,ClassPool src,ScopedClassPoolRepository repository,boolean isTemp){  super(src);  this.repository=repository;  this.classLoader=new WeakReference(cl);  if (cl != null) {    classPath=new LoaderClassPath(cl);    this.insertClassPath(classPath);  }  childFirstLookup=true;  if (!isTemp && cl == null) {    isBootstrapCl=true;  }}  }
class C{  public void endDocument() throws org.xml.sax.SAXException {}  }
class C{  protected void startCacheServer(int port,boolean notifyBySubscription) throws IOException {  Cache cache=CacheFactory.getAnyInstance();  CacheServer bridge=cache.addCacheServer();  bridge.setPort(port);  bridge.setNotifyBySubscription(notifyBySubscription);  bridge.start();  bridgeServerPort=bridge.getPort();}  }
class C{  public Builder disableRenderer(int index){  return apply(new SetSelectedTrack(tag,index,ExoPlayer.TRACK_DISABLED));}  }
class C{  private <K,T>void replaceRegistryObjects(IRegistry<K,T> registry,Map<K,T> map){  List<T> objectsToRemove=new ArrayList<T>(map.size());  Set<K> replacementKeys=map.keySet();  for (  K replacementKey : replacementKeys) {    T obj=registry.getObject(replacementKey);    if (obj != null)     objectsToRemove.add(obj);  }  Iterator<T> it=registry.iterator();  T obj=null;  while (it.hasNext()) {    obj=it.next();    if (objectsToRemove.contains(obj))     it.remove();  }  for (  Entry<K,T> replacement : map.entrySet()) {    registry.putObject(replacement.getKey(),replacement.getValue());  }}  }
class C{  @Override public void endCDATA() throws IOException {  closeStartIfNecessary();  writer.write("]]>");  writingCdata=false;}  }
class C{  public void put(NumberVector val){  assert (val.getDimensionality() == elements.length);  wsum+=1.0;  for (int i=0; i < elements.length; i++) {    final double delta=val.doubleValue(i) - elements[i];    elements[i]+=delta / wsum;  }}  }
class C{  public static Dog maxDog(Dog d1,Dog d2){  if (d1.size >= d2.size)   return d1;  return d2;}  }
class C{  private void parseElement(Element element,Data data){  NodeList nodeList=element.getChildNodes();  for (int i=0; i < nodeList.getLength(); i++) {    Node node=nodeList.item(i);    if (node.getNodeType() == Node.ELEMENT_NODE) {      Element child=(Element)node;      if (hasClass(child,"gs:column")) {        Column column=new Column();        column.setIndex(child.getAttribute("title"));        column.setName(child.getTextContent());        data.addColumn(column);      } else {        parseElement(child,data);      }    }  }}  }
class C{  public static boolean hasNextKeyTyped(){synchronized (keyLock) {    return !keysTyped.isEmpty();  }}  }
class C{  @PrePersist public void onPreInsert(AbstractEntity abstractEntity){  abstractEntity.uid();}  }
class C{  public String toString(){  TextBuilder tmp=new TextBuilder();  final int size=size();  final ByteBuffer buffer=getByteBuffer();  final int start=getByteBufferPosition();  for (int i=0; i < size; i++) {    int b=buffer.get(start + i) & 0xFF;    tmp.append(HEXA[b >> 4]);    tmp.append(HEXA[b & 0xF]);    tmp.append(((i & 0xF) == 0xF) ? '\n' : ' ');  }  return tmp.toString();}  }
class C{  @Inline public final void push(ObjectReference object){  Address addr=object.toAddress();  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(!addr.isZero());  checkHeadInsert(1);  uncheckedHeadInsert(addr);}  }
class C{  protected Attribute createAttribute(Element node) throws Exception {  String typeStr;  String name;  int type;  Attribute result;  ArrayList<String> values;  ProtectedProperties metadata;  Vector<Element> list;  ArrayList<Attribute> atts;  result=null;  name=node.getAttribute(ATT_NAME);  typeStr=node.getAttribute(ATT_TYPE);  if (typeStr.equals(VAL_NUMERIC)) {    type=Attribute.NUMERIC;  } else   if (typeStr.equals(VAL_DATE)) {    type=Attribute.DATE;  } else   if (typeStr.equals(VAL_NOMINAL)) {    type=Attribute.NOMINAL;  } else   if (typeStr.equals(VAL_STRING)) {    type=Attribute.STRING;  } else   if (typeStr.equals(VAL_RELATIONAL)) {    type=Attribute.RELATIONAL;  } else {    throw new Exception("Attribute type '" + typeStr + "' is not supported!");  }  metadata=createMetadata(node);switch (type) {case Attribute.NUMERIC:    if (metadata == null) {      result=new Attribute(name);    } else {      result=new Attribute(name,metadata);    }  break;case Attribute.DATE:if (metadata == null) {  result=new Attribute(name,node.getAttribute(ATT_FORMAT));} else {  result=new Attribute(name,node.getAttribute(ATT_FORMAT),metadata);}break;case Attribute.NOMINAL:values=createLabels(node);if (metadata == null) {result=new Attribute(name,values);} else {result=new Attribute(name,values,metadata);}break;case Attribute.STRING:if (metadata == null) {result=new Attribute(name,(ArrayList<String>)null);} else {result=new Attribute(name,(ArrayList<String>)null,metadata);}break;case Attribute.RELATIONAL:list=getChildTags(node,TAG_ATTRIBUTES);node=list.get(0);atts=createAttributes(node,new int[1]);if (metadata == null) {result=new Attribute(name,new Instances(name,atts,0));} else {result=new Attribute(name,new Instances(name,atts,0),metadata);}break;}return result;}  }
class C{  public void loadFromGtfs(GTFSFeed gtfs,LoadLevel level) throws DuplicateFeedException {  if (feedChecksums.containsKey(gtfs.feedId)) {    throw new DuplicateFeedException(gtfs.feedId);  }  feedChecksums.put(gtfs.feedId,gtfs.checksum);  TObjectIntMap<String> indexForUnscopedStopId=new TObjectIntHashMap<>();  stopsWheelchair=new BitSet(gtfs.stops.size());  for (  Stop stop : gtfs.stops.values()) {    int stopIndex=stopIdForIndex.size();    String scopedStopId=String.join(":",stop.feed_id,stop.stop_id);    indexForUnscopedStopId.put(stop.stop_id,stopIndex);    stopIdForIndex.add(scopedStopId);    stopForIndex.add(stop);    if (stop.wheelchair_boarding != null && stop.wheelchair_boarding.trim().equals("1")) {      stopsWheelchair.set(stopIndex);    }    if (level == LoadLevel.FULL) {      stopNames.add(stop.stop_name);    }  }  TObjectIntMap<String> serviceCodeNumber=new TObjectIntHashMap<>(20,0.5f,-1);  gtfs.services.forEach(null);  gtfs.findPatterns();  LOG.info("Creating trip patterns and schedules.");  Map<String,TripPattern> tripPatternForPatternId=new HashMap<>();  Multimap<String,TripSchedule> tripsForBlock=HashMultimap.create();  TObjectIntMap<String> routeIndexForRoute=new TObjectIntHashMap<>();  int nTripsAdded=0;  TRIPS:   for (  String tripId : gtfs.trips.keySet()) {    Trip trip=gtfs.trips.get(tripId);    Route route=gtfs.routes.get(trip.route_id);    String scopedRouteId=String.join(":",gtfs.feedId,trip.route_id);    TIntList arrivals=new TIntArrayList(TYPICAL_NUMBER_OF_STOPS_PER_TRIP);    TIntList departures=new TIntArrayList(TYPICAL_NUMBER_OF_STOPS_PER_TRIP);    TIntList stopSequences=new TIntArrayList(TYPICAL_NUMBER_OF_STOPS_PER_TRIP);    int previousDeparture=Integer.MIN_VALUE;    int nStops=0;    Iterable<StopTime> stopTimes;    try {      stopTimes=gtfs.getInterpolatedStopTimesForTrip(tripId);    } catch (    GTFSFeed.FirstAndLastStopsDoNotHaveTimes e) {      LOG.warn("First and last stops do not both have times specified on trip {} on route {}, skipping this as interpolation is impossible",trip.trip_id,trip.route_id);      continue TRIPS;    }    for (    StopTime st : stopTimes) {      arrivals.add(st.arrival_time);      departures.add(st.departure_time);      stopSequences.add(st.stop_sequence);      if (previousDeparture > st.arrival_time || st.arrival_time > st.departure_time) {        LOG.warn("Negative-time travel at stop {} on trip {} on route {}, skipping this trip as it will wreak havoc with routing",st.stop_id,trip.trip_id,trip.route_id);        continue TRIPS;      }      if (previousDeparture == st.arrival_time) {        LOG.warn("Zero-length hop at stop {} on trip {} on route {} {}",st.stop_id,trip.trip_id,trip.route_id,route.route_short_name);      }      previousDeparture=st.departure_time;      nStops++;    }    if (nStops == 0) {      LOG.warn("Trip {} on route {} {} has no stops, it will not be used",trip.trip_id,trip.route_id,route.route_short_name);      continue;    }    String patternId=gtfs.tripPatternMap.get(tripId);    TripPattern tripPattern=tripPatternForPatternId.get(patternId);    if (tripPattern == null) {      tripPattern=new TripPattern(String.format("%s:%s",gtfs.feedId,route.route_id),stopTimes,indexForUnscopedStopId);      if (level == LoadLevel.FULL) {        if (!routeIndexForRoute.containsKey(trip.route_id)) {          int routeIndex=routes.size();          RouteInfo ri=new RouteInfo(route,gtfs.agency.get(route.agency_id));          routes.add(ri);          routeIndexForRoute.put(trip.route_id,routeIndex);        }        tripPattern.routeIndex=routeIndexForRoute.get(trip.route_id);      }      tripPatternForPatternId.put(patternId,tripPattern);      tripPattern.originalId=tripPatterns.size();      tripPatterns.add(tripPattern);    }    tripPattern.setOrVerifyDirection(trip.direction_id);    int serviceCode=serviceCodeNumber.get(trip.service_id);    Collection<Frequency> frequencies=gtfs.getFrequencies(trip.trip_id);    TripSchedule tripSchedule=TripSchedule.create(trip,arrivals.toArray(),departures.toArray(),frequencies,stopSequences.toArray(),serviceCode);    if (tripSchedule == null)     continue;    tripPattern.addTrip(tripSchedule);    this.hasFrequencies=this.hasFrequencies || tripSchedule.headwaySeconds != null;    this.hasSchedules=this.hasSchedules || tripSchedule.headwaySeconds == null;    nTripsAdded+=1;    if (!Strings.isNullOrEmpty(trip.block_id)) {      tripsForBlock.put(trip.block_id,tripSchedule);    }  }  LOG.info("Done creating {} trips on {} patterns.",nTripsAdded,tripPatternForPatternId.size());  LOG.info("Chaining trips together according to blocks to model interlining...");  tripsForBlock.asMap().forEach(null);  LOG.info("Done chaining trips together according to blocks.");  LOG.info("Sorting trips on each pattern");  for (  TripPattern tripPattern : tripPatternForPatternId.values()) {    Collections.sort(tripPattern.tripSchedules);  }  LOG.info("done sorting");  LOG.info("Finding the approximate center of the transport network...");  findCenter(gtfs.stops.values());  if (gtfs.agency.size() == 0) {    timeZone=ZoneId.of("GMT");    LOG.warn("graph contains no agencies; API request times will be interpreted as GMT.");  } else {    for (    Agency agency : gtfs.agency.values()) {      if (agency.agency_timezone == null) {        LOG.warn("Agency {} is without timezone",agency.agency_name);        continue;      }      ZoneId tz;      try {        tz=ZoneId.of(agency.agency_timezone);      } catch (      ZoneRulesException z) {        LOG.error("Agency {} in GTFS with timezone '{}' wasn't found in timezone database reason: {}",agency.agency_name,agency.agency_timezone,z.getMessage());        continue;      }catch (      DateTimeException dt) {        LOG.error("Agency {} in GTFS has timezone in wrong format:'{}'. Expected format: area/city ",agency.agency_name,agency.agency_timezone);        continue;      }      if (timeZone == null) {        LOG.info("TransportNetwork time zone set to {} from agency '{}' and agency_timezone:{}",tz,agency.agency_name,agency.agency_timezone);        timeZone=tz;      } else       if (!timeZone.equals(tz)) {        LOG.error("agency time zone {} differs from TransportNetwork time zone: {}. This will be problematic.",tz,timeZone);      }    }    if (timeZone == null) {      timeZone=ZoneId.of("GMT");      LOG.warn("No agency in graph had valid timezone; API request times will be interpreted as GMT.");    }  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:50.330 -0400",hash_original_method="63BD1C8F3C17781753BA16C837ECEC6F",hash_generated_method="E5468C1E2BA5EAE22EA27D6A25B3384C") @Override public void run(){  while (exitWhenFinished == false || trackers.size() > 0) {    try {      Tracker tracker=(Tracker)q.remove();      trackers.remove(tracker);      if (!tracker.delete()) {        deleteFailures.add(tracker.getPath());      }      tracker.clear();    } catch (    InterruptedException e) {      continue;    }  }}  }
class C{  private void createFramebufferTexture(){  this.tex=glGenTextures();  glBindTexture(GL_TEXTURE_2D,tex);  glTexImage2D(GL_TEXTURE_2D,0,GL_RGBA32F,width,height,0,GL_RGBA,GL_FLOAT,(ByteBuffer)null);  glBindTexture(GL_TEXTURE_2D,0);}  }
class C{  @NotNull public static Map<VirtualFile,List<VirtualFile>> sortFilesByGitRoot(@NotNull Collection<VirtualFile> virtualFiles) throws VcsException {  return sortFilesByGitRoot(virtualFiles,false);}  }
class C{  public FSImageWriter(){  this("png");}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void removeConnection(Connection connection){  connections.remove(connection.handle());  persistence.deleteConnection(connection);}  }
class C{  public static <T>T[] newArray(T[] reference,int length){  return Platform.newArray(reference,length);}  }
class C{  public VCardReader(String str,VCardVersion defaultVersion){  this(new StringReader(str),defaultVersion);}  }
class C{  public VNXeCommandJob restoreSnap(String snapId,VNXeSnapRestoreParam restoreParam) throws VNXeException {  StringBuilder urlBuilder=new StringBuilder(URL_INSTANCE);  urlBuilder.append(snapId);  urlBuilder.append(URL_RESTORE);  _url=urlBuilder.toString();  return postRequestAsync(restoreParam);}  }
class C{  public void trace(Object message){}  }
class C{  @Override public String toString(){  return "MEET";}  }
class C{  public synchronized final void incrementSecondaryProgressBy(int diff){  setSecondaryProgress(mSecondaryProgress + diff);}  }
class C{  public JCAProvider(Map<String,Class<? extends SaslClientFactory>> providerMap){  super("AMQSASLProvider",1.0,"A JCA provider that registers all " + "AMQ SASL providers that want to be registered");  register(providerMap);}  }
class C{  public void stopExpiring(){  stateLock.writeLock().lock();  try {    if (running) {      running=false;      expirerThread.interrupt();    }  }  finally {    stateLock.writeLock().unlock();  }}  }
class C{  public void onMouseUp(BasicPanel panel,Box box){  checkForLink(panel,box);}  }
class C{  public CompiledST defineTemplate(String templateName,String template){  if (templateName.charAt(0) != '/')   templateName="/" + templateName;  try {    CompiledST impl=defineTemplate(templateName,new CommonToken(GroupParser.ID,templateName),null,template,null);    return impl;  } catch (  STException se) {  }  return null;}  }
class C{  public void increment(String traceKey,long inc){  MapUtil.setOrIncrementMap(traces,traceKey,inc);  updateBounds(traceKey);}  }
class C{  public <T>T unwrap(java.lang.Class<T> iface) throws java.sql.SQLException {  if (isWrapperFor(iface)) {    return iface.cast(this);  } else {    throw new SQLException("unwrap failed for:" + iface);  }}  }
class C{  public AutoColorCorrelogram(int maxDistance,Mode mode){  this(DEFAULT_NUMBER_COLORS,null,new MLuxAutoCorrelogramExtraction(mode));  int[] D=new int[maxDistance];  for (int i=0; i < maxDistance; i++)   D[i]=i + 1;  this.distanceSet=D;}  }
class C{  @Override public Map<String,Runnable> handleMenu(final ILayer data,final int x,final int y){  return null;}  }
class C{  protected void addToList(ArrayList<java.lang.annotation.Annotation> result,HashSet<Class<? extends java.lang.annotation.Annotation>> cls,Annotation[] annotations){  for (  java.lang.annotation.Annotation a : annotations) {    Class<? extends Annotation> at=a.annotationType();    if (!cls.contains(at)) {      cls.add(at);      result.add(a);    }  }}  }
class C{  protected void StringExpr() throws javax.xml.transform.TransformerException {  int opPos=m_ops.getOp(OpMap.MAPINDEX_LENGTH);  appendOp(2,OpCodes.OP_STRING);  Expr();  m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) - opPos);}  }
class C{  private MWMStrategy applyDefinition(MWMInOutBoundLine line,int WM_Area_Type_ID,int WM_Section_Type_ID){  StringBuffer whereClause=new StringBuffer("(");  whereClause.append(MWMDefinition.COLUMNNAME_M_Product_ID + " IN (0,?) OR ");  whereClause.append(MWMDefinition.COLUMNNAME_M_Product_ID + " IS NULL");  whereClause.append(") AND ");  whereClause.append("(");  whereClause.append(MWMDefinition.COLUMNNAME_M_Product_Category_ID + " IN (0,?) OR ");  whereClause.append(MWMDefinition.COLUMNNAME_M_Product_Category_ID + " IS NULL");  whereClause.append(") AND ");  whereClause.append("(");  whereClause.append(MWMDefinition.COLUMNNAME_Group1 + " IN ('',?) OR ");  whereClause.append(MWMDefinition.COLUMNNAME_Group1 + " IS NULL");  whereClause.append(") AND ");  whereClause.append("(");  whereClause.append(MWMDefinition.COLUMNNAME_Group2 + " IN ('',?) OR ");  whereClause.append(MWMDefinition.COLUMNNAME_Group2 + " IS NULL");  whereClause.append(") AND ");  whereClause.append("(");  whereClause.append(MWMDefinition.COLUMNNAME_Classification + " IN ('',?) OR ");  whereClause.append(MWMDefinition.COLUMNNAME_Classification + " IS NULL");  whereClause.append(") AND ");  whereClause.append("(");  whereClause.append(MWMDefinition.COLUMNNAME_C_BPartner_ID + " IN (0,?) OR ");  whereClause.append(MWMDefinition.COLUMNNAME_C_BPartner_ID + " IS NULL");  whereClause.append(") AND ");  whereClause.append("(");  whereClause.append(MWMDefinition.COLUMNNAME_C_BP_Group_ID + " IN (0,?) OR ");  whereClause.append(MWMDefinition.COLUMNNAME_C_BP_Group_ID + " IS NULL");  whereClause.append(") AND ");  whereClause.append("(");  whereClause.append(MWMDefinition.COLUMNNAME_WM_Area_Type_ID + " IN (0,?) OR ");  whereClause.append(MWMDefinition.COLUMNNAME_WM_Area_Type_ID + " IS NULL");  whereClause.append(") AND ");  whereClause.append("(");  whereClause.append(MWMDefinition.COLUMNNAME_WM_Section_Type_ID + " IN (0,?) OR ");  whereClause.append(MWMDefinition.COLUMNNAME_WM_Section_Type_ID + " IS NULL");  whereClause.append(")");  whereClause.append(" AND EXISTS (SELECT 1 FROM " + MWMStrategy.Table_Name);  whereClause.append(" WHERE ");  whereClause.append(MWMStrategy.Table_Name + "." + MWMStrategy.COLUMNNAME_WM_Strategy_ID+ "=");  whereClause.append(MWMDefinition.Table_Name + "." + MWMDefinition.COLUMNNAME_WM_Strategy_ID);  whereClause.append(" AND ");  whereClause.append(MWMStrategy.COLUMNNAME_InOutBoundType + "=?");  whereClause.append(")");  MProduct product=line.getMProduct();  MBPartner bpartner=line.getMBPartner();  MWMDefinition definition=new Query(line.getCtx(),MWMDefinition.Table_Name,whereClause.toString(),line.get_TrxName()).setClient_ID().setParameters(new Object[]{product.getM_Product_ID(),product.getM_Product_Category_ID(),product.getGroup1(),product.getGroup2(),product.getClassification(),bpartner.getC_BPartner_ID(),bpartner.getC_BP_Group_ID(),WM_Area_Type_ID,WM_Section_Type_ID,MWMStrategy.INOUTBOUNDTYPE_OutboundOperation}).first();  if (definition == null) {    throw new AdempiereException("Can not found valid Definition");  }  return definition.getWMStrategy();}  }
class C{  public static void resolveDynamicLink(OptCompiledMethod cm,Offset offset) throws NoClassDefFoundError {  OptMachineCodeMap map=cm.getMCMap();  int bci=map.getBytecodeIndexForMCOffset(offset);  NormalMethod realMethod=map.getMethodForMCOffset(offset);  if (bci == -1 || realMethod == null) {    VM.sysFail("Mapping to source code location not available at Dynamic Linking point\n");  }  BytecodeStream bcodes=realMethod.getBytecodes();  bcodes.reset(bci);  int opcode=bcodes.nextInstruction();switch (opcode) {case JBC_getfield:case JBC_putfield:case JBC_getstatic:case JBC_putstatic:    TableBasedDynamicLinker.resolveMember(bcodes.getFieldReference());  break;case JBC_invokevirtual:case JBC_invokestatic:case JBC_invokespecial:TableBasedDynamicLinker.resolveMember(bcodes.getMethodReference());break;case JBC_invokeinterface:default :if (VM.VerifyAssertions) {VM._assert(VM.NOT_REACHED,"Unexpected case in OptLinker.resolveDynamicLink");}break;}}  }
class C{  public static void d(String tag,String msg,Throwable tr){  println(DEBUG,tag,msg,tr);}  }
class C{  private void updateNeighborViewsForID(long itemID){  int position=getPositionForID(itemID) - 1;  PlaylistAdapter adapter=(PlaylistAdapter)((HeaderViewListAdapter)getAdapter()).getWrappedAdapter();  mAboveItemId=adapter.getItemId(position - 1);  mBelowItemId=adapter.getItemId(position + 1);}  }
class C{  Item newDouble(final double value){  key.set(value);  Item result=get(key);  if (result == null) {    pool.putByte(DOUBLE).putLong(key.longVal);    result=new Item(index,key);    index+=2;    put(result);  }  return result;}  }
class C{  public byte[] read() throws IOException {  ByteArrayOutputStream bout=new ByteArrayOutputStream();  int b=0;  while ((b=in.read()) >= 0) {    bout.write(b);  }  return bout.toByteArray();}  }
class C{  private int readField(final ClassVisitor classVisitor,final Context context,int u){  char[] c=context.buffer;  int access=readUnsignedShort(u);  String name=readUTF8(u + 2,c);  String desc=readUTF8(u + 4,c);  u+=6;  String signature=null;  int anns=0;  int ianns=0;  int tanns=0;  int itanns=0;  Object value=null;  Attribute attributes=null;  for (int i=readUnsignedShort(u); i > 0; --i) {    String attrName=readUTF8(u + 2,c);    if ("ConstantValue".equals(attrName)) {      int item=readUnsignedShort(u + 8);      value=item == 0 ? null : readConst(item,c);    } else     if (SIGNATURES && "Signature".equals(attrName)) {      signature=readUTF8(u + 8,c);    } else     if ("Deprecated".equals(attrName)) {      access|=Opcodes.ACC_DEPRECATED;    } else     if ("Synthetic".equals(attrName)) {      access|=Opcodes.ACC_SYNTHETIC | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE;    } else     if (ANNOTATIONS && "RuntimeVisibleAnnotations".equals(attrName)) {      anns=u + 8;    } else     if (ANNOTATIONS && "RuntimeVisibleTypeAnnotations".equals(attrName)) {      tanns=u + 8;    } else     if (ANNOTATIONS && "RuntimeInvisibleAnnotations".equals(attrName)) {      ianns=u + 8;    } else     if (ANNOTATIONS && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {      itanns=u + 8;    } else {      Attribute attr=readAttribute(context.attrs,attrName,u + 8,readInt(u + 4),c,-1,null);      if (attr != null) {        attr.next=attributes;        attributes=attr;      }    }    u+=6 + readInt(u + 4);  }  u+=2;  FieldVisitor fv=classVisitor.visitField(access,name,desc,signature,value);  if (fv == null) {    return u;  }  if (ANNOTATIONS && anns != 0) {    for (int i=readUnsignedShort(anns), v=anns + 2; i > 0; --i) {      v=readAnnotationValues(v + 2,c,true,fv.visitAnnotation(readUTF8(v,c),true));    }  }  if (ANNOTATIONS && ianns != 0) {    for (int i=readUnsignedShort(ianns), v=ianns + 2; i > 0; --i) {      v=readAnnotationValues(v + 2,c,true,fv.visitAnnotation(readUTF8(v,c),false));    }  }  if (ANNOTATIONS && tanns != 0) {    for (int i=readUnsignedShort(tanns), v=tanns + 2; i > 0; --i) {      v=readAnnotationTarget(context,v);      v=readAnnotationValues(v + 2,c,true,fv.visitTypeAnnotation(context.typeRef,context.typePath,readUTF8(v,c),true));    }  }  if (ANNOTATIONS && itanns != 0) {    for (int i=readUnsignedShort(itanns), v=itanns + 2; i > 0; --i) {      v=readAnnotationTarget(context,v);      v=readAnnotationValues(v + 2,c,true,fv.visitTypeAnnotation(context.typeRef,context.typePath,readUTF8(v,c),false));    }  }  while (attributes != null) {    Attribute attr=attributes.next;    attributes.next=null;    fv.visitAttribute(attributes);    attributes=attr;  }  fv.visitEnd();  return u;}  }
class C{  public T caseUnscheduleTimeEvent(UnscheduleTimeEvent object){  return null;}  }
class C{  private void importRecords() throws SQLException {  for (  X_I_SalesHistory salesHistoryImport : getRecords(false,m_IsImportOnlyNoErrors)) {    isImported=false;    MSalesHistory salesHistory=importMSalesHistory(salesHistoryImport);    if (salesHistory == null)     isImported=false;    if (isImported) {      salesHistoryImport.setC_SalesHistory_ID(salesHistory.getC_SalesHistory_ID());      salesHistoryImport.setI_IsImported(true);      salesHistoryImport.setProcessed(true);      salesHistoryImport.setI_ErrorMsg("");      salesHistoryImport.saveEx();      imported++;      salesHistoryImport.saveEx();    } else {      salesHistoryImport.setI_IsImported(false);      salesHistoryImport.setProcessed(true);      salesHistoryImport.saveEx();      notimported++;    }    commitEx();  }}  }
class C{  public MonthDay addWrapFieldToCopy(int valueToAdd){  int[] newValues=iBase.getValues();  newValues=getField().addWrapField(iBase,iFieldIndex,newValues,valueToAdd);  return new MonthDay(iBase,newValues);}  }
class C{  public Object createConnectionFactory(ConnectionManager cxManager) throws ResourceException {  start();  return new FBDataSource(this,cxManager);}  }
class C{  private String makeChannelInfoJson(ChannelInfo info){  JSONObject root=new JSONObject();  Map channel=new HashMap();  channel.put("status",info.getStatus());  channel.put("game",info.getGame());  root.put("channel",channel);  return root.toJSONString();}  }
class C{  static String staticFormat(int b1,int b2,int b3,int b4){  String result;  if (b3 < 0) {    return "Node " + (b1 & 0x7F) + " reports software version "+ b2;  }  if ((b1 & 0x7F) == 0) {    result="Error report from node " + b2 + ": ";switch (((b4 & 0x70) >> 4) - 1) {case 0:      result+="Parity Error";    break;case 1:  result+="First Byte Data";break;case 2:result+="Second Byte Address";break;case 3:result+="error 3";break;case 4:result+="Software UART Overflow";break;case 5:result+="Serial Detector Power Failure";break;case 6:result+="Printer Busy";break;case 7:result+="I/O Configuration Not Set";break;default :result+="error number " + ((b4 & 0x70) >> 4);break;}return result;}result="address: " + (b1 & 0x7F) + " data bytes: 0x"+ StringUtil.twoHexFromInt(b2)+ " 0x"+ StringUtil.twoHexFromInt(b4)+ " => ";if ((b2 == 122) && ((b4 & 0x70) == 0x10)) {result+="Shift to high 24 outputs";return result;} else if ((b2 == b4) && (b2 == 0x77)) {result+="software version query";return result;} else if ((b2 == 0x70) && ((b4 & 0xF0) == 0x10)) {result+="Initialize parallel sensors";return result;} else if ((b2 == 0x71) && ((b4 & 0xF0) == 0x00)) {result+="Initialize ASD sensors";return result;} else if ((b4 & 0xF0) <= 0x30) {result+="bank " + ((b4 & 0xF0) >> 4) + " signal "+ ((b2 & 0x78) >> 3);int cmd=b2 & 0x07;result+=" cmd " + cmd;result+=" (set " + colorAsString(cmd);if (cmd == 0) {result+="/closed";}if (cmd == 6) {result+="/thrown";}result+=")";return result;} else if ((b4 & 0xF0) == 0x40) {result+="serial sensor bit " + (((b2 & 0x7E) >> 1) + 1) + " is "+ (((b2 & 0x01) == 0) ? "active" : "inactive");return result;} else if ((b4 & 0xF0) == 0x50) {if ((b2 & 0x20) == 0) {if ((b2 & 0x40) != 0) {result+="2nd connector ";}result+="parallel sensor " + ((b2 & 0x10) != 0 ? "high" : "low") + " nibble:";} else {result+="older serial sensor " + ((b2 & 0x10) != 0 ? "high" : "low") + " nibble:";}result+=((b2 & 0x08) == 0) ? " A" : " I";result+=((b2 & 0x04) == 0) ? " A" : " I";result+=((b2 & 0x02) == 0) ? " A" : " I";result+=((b2 & 0x01) == 0) ? " A" : " I";return result;} else {return result + "bank " + ((b4 & 0xF0) >> 4)+ ", unknown message";}}  }
class C{  public void transformValues(TObjectFunction<V,V> function){  V[] values=_values;  for (int i=values.length; i-- > 0; ) {    if (isFull(values,i)) {      values[i]=wrapNull(function.execute(unwrapNull(values[i])));    }  }}  }
class C{  protected void drawHole(Canvas c){  if (mChart.isDrawHoleEnabled()) {    float transparentCircleRadius=mChart.getTransparentCircleRadius();    float holeRadius=mChart.getHoleRadius();    float radius=mChart.getRadius();    PointF center=mChart.getCenterCircleBox();    if (transparentCircleRadius > holeRadius && mAnimator.getPhaseX() >= 1f && mAnimator.getPhaseY() >= 1f) {      int color=mTransparentCirclePaint.getColor();      mTransparentCirclePaint.setColor(color & 0x60FFFFFF);      mBitmapCanvas.drawCircle(center.x,center.y,radius / 100 * transparentCircleRadius,mTransparentCirclePaint);      mTransparentCirclePaint.setColor(color);    }    mBitmapCanvas.drawCircle(center.x,center.y,radius / 100 * holeRadius,mHolePaint);  }}  }
class C{  public void generate(final ICubePrimer cube,int cubeX,int cubeY,int cubeZ){  generateNoiseArrays(cubeX,cubeY,cubeZ);  generateTerrainArray(cube,cubeX,cubeY,cubeZ);  generateTerrain(cube,this.rawDensity,cubeX,cubeY,cubeZ);}  }
class C{  public int _vint(){  int data, value=0;  for (int shift=0; ; shift+=7) {    data=read_bits_int(8);    value|=(data & 0x7f) << shift;    if ((data & 0x80) == 0)     return (value & 0x01) > 0 ? -(value >> 1) : value >> 1;  }}  }
class C{  protected void debugCodeCall(String methodName,String param){  if (trace.isDebugEnabled()) {    trace.debugCode(getTraceObjectName() + "." + methodName+ "("+ quote(param)+ ");");  }}  }
class C{  private List dbToOrganoVOList(final ResultSet resultSet) throws SQLException {  List ltOrganos=new ArrayList();  OrganizationOrganoVOImpl organo=null;  if (resultSet != null) {    while (resultSet.next()) {      organo=new OrganizationOrganoVOImpl();      organo.setId(resultSet.getString(COL_ID));      organo.setCodigo(resultSet.getString(COL_CODIGO));      organo.setNombre(resultSet.getString(COL_NOMBRE));      organo.setNivel(resultSet.getInt(COL_NIVEL));      organo.setIdPadre(resultSet.getString(COL_ID_ORG_PADRE));      ltOrganos.add(organo);    }  }  return ltOrganos;}  }
class C{  public void postLink(String sharedUrl,String sharedTitle,String sharedDescription,String sharedTags,boolean privateShare) throws IOException {  String encodedShareUrl=URLEncoder.encode(sharedUrl,"UTF-8");  retrievePostLinkToken(encodedShareUrl);  if (isUrl(sharedUrl)) {    this.mSharedUrl=sharedUrl;  }  final String postUrl=this.mShaarliUrl + "?post=" + encodedShareUrl;  Connection postPageConn=this.createShaarliConnection(postUrl,true).data("save_edit","Save").data("token",this.mToken).data("lf_tags",sharedTags).data("lf_linkdate",this.mDatePostLink).data("lf_url",this.mSharedUrl).data("lf_title",sharedTitle).data("lf_description",sharedDescription);  if (privateShare)   postPageConn.data("lf_private","on");  postPageConn.execute();}  }
class C{  public void addListener(Listener aListener){  if (aListener == null)   return;  if (hexEditControl == null) {    if (listOfStatusChangedListeners == null)     listOfStatusChangedListeners=new ArrayList<>();    listOfStatusChangedListeners.add(aListener);  } else {    hexEditControl.addListener(SWT.Modify,aListener);  }}  }
class C{  public static BigDecimal parseBigDecimal(String price){  return new BigDecimal(price);}  }
class C{  public THLManagerCtrl(String configFile,boolean doChecksum) throws Exception {  this.configFile=configFile;  TungstenProperties properties=readConfig();  logDir=properties.getString("replicator.store.thl.log_dir");  this.doChecksum=doChecksum;}  }
class C{  public int costInline(int thresh,Environment env,Context ctx){  int cost=1;  if (body != null) {    cost+=body.costInline(thresh,env,ctx);  }  return cost;}  }
class C{  private void validateNothingWritten(){  Collection entries=((LocalRegion)region).entries.regionEntries();  if (entries.size() != 1) {    fail("expected size to be 1 but is " + entries.size());  }  assertEquals(this.flushCount,getCurrentFlushCount());}  }
class C{  private void saveInstantiator(Instantiator inst){  saveInstantiator(inst.getId(),inst.getClass().getName(),inst.getInstantiatedClass().getName());}  }
class C{  public Dimension stringSize(FontMetrics f){  Dimension d=new Dimension();  int old=0;  String s;  int noa=0;  while ((s=getLine(noa)) != null) {    noa++;    old=f.stringWidth(s);    if (old > d.width) {      d.width=old;    }  }  d.height=noa * f.getHeight();  return d;}  }
class C{  boolean isParagraph(){  return (this == P || this == IMPLIED || this == DT || this == H1 || this == H2 || this == H3 || this == H4 || this == H5 || this == H6);}  }
class C{  public int hashCode(){  return Arrays.hashCode(chars);}  }
class C{  public boolean isExpired() throws Exception {  return false;}  }
class C{  public void stopBlock(){  stopBlock(true);}  }
class C{  public void logDebug(String message){  logDebug(message,null);}  }
class C{  public FDBigInteger multByPow52(int p5,int p2){  if (this.nWords == 0) {    return this;  }  FDBigInteger res=this;  if (p5 != 0) {    int[] r;    int extraSize=(p2 != 0) ? 1 : 0;    if (p5 < SMALL_5_POW.length) {      r=new int[this.nWords + 1 + extraSize];      mult(this.data,this.nWords,SMALL_5_POW[p5],r);      res=new FDBigInteger(r,this.offset);    } else {      FDBigInteger pow5=big5pow(p5);      r=new int[this.nWords + pow5.size() + extraSize];      mult(this.data,this.nWords,pow5.data,pow5.nWords,r);      res=new FDBigInteger(r,this.offset + pow5.offset);    }  }  return res.leftShift(p2);}  }
class C{  public long put(double key,long value){  long previous=0;  int index=insertionIndex(key);  boolean isNewMapping=true;  if (index < 0) {    index=-index - 1;    previous=_values[index];    isNewMapping=false;  }  byte previousState=_states[index];  _set[index]=key;  _states[index]=FULL;  _values[index]=value;  if (isNewMapping) {    postInsertHook(previousState == FREE);  }  return previous;}  }
class C{  public static byte[] decode(byte[] source) throws Base64DecoderException {  return decode(source,0,source.length);}  }
class C{  void addBefore(Element here,Object obj){  Element e=new Element(obj);  e.next=here;  if (here.prev != null) {    here.prev.next=e;  }  e.prev=here.prev;  here.prev=e;  if (root == here) {    root=e;  }  if (last == null) {    last=e;  }  this.size++;}  }
class C{  public static ShoppingCartItem makeItem(Integer cartLocation,String itemType,String itemDescription,String productCategoryId,BigDecimal basePrice,BigDecimal selectedAmount,BigDecimal quantity,Map<String,Object> attributes,String prodCatalogId,ShoppingCart.ShoppingCartItemGroup itemGroup,LocalDispatcher dispatcher,ShoppingCart cart,Boolean triggerExternalOpsBool) throws CartItemModifyException {  Delegator delegator=cart.getDelegator();  ShoppingCartItem newItem=new ShoppingCartItem(delegator,itemType,itemDescription,productCategoryId,basePrice,attributes,prodCatalogId,cart.getLocale(),itemGroup);  if (cartLocation == null) {    cart.addItemToEnd(newItem);  } else {    cart.addItem(cartLocation.intValue(),newItem);  }  boolean triggerExternalOps=triggerExternalOpsBool == null ? true : triggerExternalOpsBool.booleanValue();  try {    newItem.setQuantity(quantity,dispatcher,cart,triggerExternalOps);  } catch (  CartItemModifyException e) {    cart.removeEmptyCartItems();    throw e;  }  if (selectedAmount != null) {    newItem.setSelectedAmount(selectedAmount);  }  return newItem;}  }
class C{  @Override protected List<Vertex> parseArguments(Vertex expression,Primitive type,int index,TextStream stream,Map<String,Map<String,Vertex>> elements,boolean outerBracket,boolean debug,Network network){  List<Vertex> arguments=new ArrayList<Vertex>();  boolean bracket=false;  if (!outerBracket) {    bracket=checkNext('(',stream);  }  boolean moreArguments=true;  stream.skipWhitespace();  char peek=stream.peek();  if (peek == ')') {    moreArguments=false;  }  while (moreArguments) {    stream.skipWhitespace();    peek=stream.peek();    if (peek == ')' || peek == '}') {      break;    }    if ((peek == ',') || (peek == ';')) {      break;    }    Vertex argument=parseElement(stream,elements,debug,network);    arguments.add(argument);    expression.addRelationship(type,argument,index);    if (!bracket && !outerBracket) {      break;    }    stream.skipWhitespace();    peek=stream.peek();    if ((peek == ',') || (peek == ';')) {      stream.skip();    } else {      String previous=stream.peekPreviousWord();      if (!"}".equals(previous)) {        moreArguments=false;      }    }    index++;  }  if (bracket) {    ensureNext(')',stream);  }  return arguments;}  }
class C{  private void _advance(int count){  if (buf != null) {    bufPos+=count;    if (bufPos == buf.length) {      buf=null;    }  } else {    pos.setIndex(pos.getIndex() + count);    if (pos.getIndex() > text.length()) {      pos.setIndex(text.length());    }  }}  }
class C{  public boolean isCascadePersist(){  return m_isCascadePersist;}  }
class C{  public MimeMessageInputStreamSource(String key,InputStream in) throws MessagingException {  super();  try {    out=new DeferredFileOutputStream(THRESHOLD,key,".m64",TMPDIR);    IOUtils.copy(in,out);    sourceId=key;  } catch (  IOException ioe) {    File file=out.getFile();    if (file != null) {      FileUtils.deleteQuietly(file);    }    throw new MessagingException("Unable to retrieve the data: " + ioe.getMessage(),ioe);  } finally {    try {      if (out != null) {        out.close();      }    } catch (    IOException ioe) {    }    try {      if (in != null) {        in.close();      }    } catch (    IOException ioe) {    }  }}  }
class C{  private void fillAttachmentList(){  String username=getAuthService().getUsername();  IAttachmentDao dao=getDaoFactory().getAttachmentDao();  if (getCnAElementId() != null || !isPermissionHandlingNeeded(username)) {    attachmentList=dao.loadAttachmentList(getCnAElementId());  } else {    fillPermissonHandled();  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:22.879 -0500",hash_original_method="D2FB921E1DDA261A52B060B1EF7694C1",hash_generated_method="150A70ABDE25BDAD5B4F87063516A627") public void writeToParcel(Parcel p,int flags){  checkRecycled("Can't parcel a recycled bitmap");  if (!nativeWriteToParcel(mNativeBitmap,mIsMutable,mDensity,p)) {    throw new RuntimeException("native writeToParcel failed");  }}  }
class C{  private static void removeFirst(List<LIRInstruction> seq){  seq.remove(0);}  }
class C{  static public int lerpColor(int c1,int c2,float amt,int mode){  return PGraphics.lerpColor(c1,c2,amt,mode);}  }
class C{  @Override protected void createLabels(){  Iterator altIterator=null;  Object modifier=this.getModifier(SymbologyConstants.ALTITUDE_DEPTH);  if (modifier instanceof Iterable) {    altIterator=((Iterable)modifier).iterator();  } else   if (modifier != null) {    altIterator=Arrays.asList(modifier).iterator();  }  for (int i=0; i < this.rings.size(); i++) {    SurfaceCircle ring=this.rings.get(i);    StringBuilder sb=new StringBuilder();    if (i == 0) {      sb.append("MIN RG ");    } else {      sb.append("MAX RG(");      sb.append(i);      sb.append(") ");    }    sb.append(ring.getRadius());    if (altIterator != null && altIterator.hasNext()) {      Object alt=altIterator.next();      sb.append("\n");      sb.append("ALT ");      sb.append(alt);    }    TacticalGraphicLabel label=this.addLabel(sb.toString());    label.setOffset(LABEL_OFFSET);  }}  }
class C{  private void register(){  coordinatorStreamConsumer.register();}  }
class C{  public GPUImageFilterGroup(List<GPUImageFilter> filters){  mFilters=filters;  if (mFilters == null) {    mFilters=new ArrayList<GPUImageFilter>();  } else {    updateMergedFilters();  }  mGLCubeBuffer=ByteBuffer.allocateDirect(CUBE.length * 4).order(ByteOrder.nativeOrder()).asFloatBuffer();  mGLCubeBuffer.put(CUBE).position(0);  mGLTextureBuffer=ByteBuffer.allocateDirect(TEXTURE_NO_ROTATION.length * 4).order(ByteOrder.nativeOrder()).asFloatBuffer();  mGLTextureBuffer.put(TEXTURE_NO_ROTATION).position(0);  float[] flipTexture=TextureRotationUtil.getRotation(Rotation.NORMAL,false,true);  mGLTextureFlipBuffer=ByteBuffer.allocateDirect(flipTexture.length * 4).order(ByteOrder.nativeOrder()).asFloatBuffer();  mGLTextureFlipBuffer.put(flipTexture).position(0);}  }
class C{  public PickAnyArgumentHint(){  this(0,-1);}  }
class C{  public void checkStateErrors(MediaPlayerStateErrors stateErrors){  assertTrue(!stateErrors.errorInIdleState);  assertTrue(!stateErrors.errorInIdleStateAfterReset);  assertTrue(!stateErrors.errorInPreparedStateAfterStop);  assertTrue(!stateErrors.errorInStartedState);  assertTrue(!stateErrors.errorInStartedStateAfterPause);  assertTrue(!stateErrors.errorInPausedState);  assertTrue(!stateErrors.errorInPreparedState);  assertTrue(!stateErrors.errorInPlaybackCompletedState);  assertTrue(!stateErrors.errorInInitializedState);  assertTrue(!stateErrors.errorInStoppedState);  assertTrue(stateErrors.errorInErrorState);}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=enumToVector(super.listOptions());  result.addElement(new Option("\tThe expression to use for generating y out of x \n" + "\t(default " + defaultExpression() + ").","E",1,"-E <expression>"));  return result.elements();}  }
class C{  public DoubleMatrix1D append(DoubleMatrix1D A,DoubleMatrix1D B){  DoubleMatrix1D matrix=make(A.size() + B.size());  matrix.viewPart(0,A.size()).assign(A);  matrix.viewPart(A.size(),B.size()).assign(B);  return matrix;}  }
class C{  public void test_ticket_605() throws Exception {  final URI s=new URIImpl(":s");  final URI p=new URIImpl(":p");  final URI o=new URIImpl(":o");  final Statement[] a=new Statement[]{ValueFactoryImpl.getInstance().createStatement(s,p,o)};  final AddOp addOp=new AddOp(Arrays.asList(a));  m_repo.add(addOp);  final TupleQueryResult result=m_repo.prepareTupleQuery("SELECT * {?s ?p ?o} LIMIT 100").evaluate();  try {    while (result.hasNext()) {      final BindingSet bset=result.next();      if (log.isInfoEnabled()) {        log.info(bset);      }      System.out.println(bset);    }  }  finally {    result.close();  }}  }
class C{  static public void qsort(short[] array){  qsort_h(array,0,array.length - 1);}  }
class C{  public boolean acceptsOwnerName(String owner){  if (_ownerOption.equals(ALL_OWNERS)) {    return true;  }  if (_ownerOption.equals(INCLUDE_OWNERS)) {    return _ownerList.contains(owner);  }  return !_ownerList.contains(owner);}  }
class C{  protected int lastIndexOf(String content,String needle,int offset){  int index;  while ((index=content.lastIndexOf(needle,offset)) != -1) {    String text=getLine(content,index).trim();    if (text.startsWith(needle) || text.endsWith(needle)) {      break;    } else {      offset=index - 1;    }  }  return index;}  }
class C{  public static String join(String separator,double[] elements){  if (elements == null || elements.length == 0) {    return "";  }  List<Double> list=new ArrayList<Double>(elements.length);  for (  Double element : elements) {    list.add(element);  }  return join(separator,list);}  }
class C{  public Text(String str){  this(str.length() <= BLOCK_SIZE);  _count=str.length();  if (_data != null) {    str.getChars(0,_count,_data,0);  } else {    int half=((_count + BLOCK_SIZE) >> 1) & BLOCK_MASK;    _head=new Text(str.substring(0,half));    _tail=new Text(str.substring(half,_count));  }}  }
class C{  public LIMIT LIMIT(String limit){  return new LIMIT(this,limit);}  }
class C{  public static void main(String[] args) throws Exception {  try {    PicasawebService service=new PicasawebService("exampleClient");    String uname, passwd;    if (args.length == 2) {      uname=args[0];      passwd=args[1];    } else     if (args.length != 0) {      println("Syntax: PicasawebCommandLine <username> <password>");      return;    } else {      uname=getString("Username");      passwd=getString("Password");    }    new PicasawebCommandLine(service,uname,passwd).mainLoop();  } catch (  ExitException ee) {    println("Exiting...");  }}  }
class C{  private final void resetDTX(AffineTransform at){  fsref=null;  dtx=at;  invdtx=null;  if (!dtx.isIdentity()) {    try {      invdtx=dtx.createInverse();    } catch (    NoninvertibleTransformException e) {    }  }  if (gti != null) {    gti.strikesRef=null;  }}  }
class C{  private void createRasterProgram() throws IOException {  int program=glCreateProgram();  int vshader=DemoUtils.createShader("org/lwjgl/demo/opengl/raytracing/rasterInstancedUbo.vs",GL_VERTEX_SHADER);  int fshader=DemoUtils.createShader("org/lwjgl/demo/opengl/raytracing/raster.fs",GL_FRAGMENT_SHADER);  glAttachShader(program,vshader);  glAttachShader(program,fshader);  glBindAttribLocation(program,0,"vertexPosition");  glBindAttribLocation(program,1,"vertexNormal");  glBindAttribLocation(program,2,"boxCenter");  glBindAttribLocation(program,3,"boxHalfSize");  glBindFragDataLocation(program,0,"worldPosition_out");  glBindFragDataLocation(program,1,"worldNormal_out");  glLinkProgram(program);  int linked=glGetProgrami(program,GL_LINK_STATUS);  String programLog=glGetProgramInfoLog(program);  if (programLog.trim().length() > 0) {    System.err.println(programLog);  }  if (linked == 0) {    throw new AssertionError("Could not link program");  }  this.rasterProgram=program;}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;case 2:  return CURSOR_ID;case 3:return VALUES;default :return null;}}  }
class C{  public static double log2(final double x){  return Math.log(x) / 0.6931471805599453;}  }
class C{  public void testEncode(){  assertEquals("SGVsbG8gV29ybGQ=",Base64.encode("Hello World"));}  }
class C{  @Override protected Point2D.Double chop(Figure target,Point2D.Double from){  target=getConnectorTarget(target);  Rectangle2D.Double r=target.getBounds();  if (target.get(DiamondFigure.IS_QUADRATIC)) {    double side=Math.max(r.width,r.height);    r.x-=(side - r.width) / 2;    r.y-=(side - r.height) / 2;    r.width=r.height=side;  }  double growx;  double growy;switch (target.get(STROKE_PLACEMENT)) {case INSIDE:{      growx=growy=0f;      break;    }case OUTSIDE:{    double lineLength=Math.sqrt(r.width * r.width + r.height * r.height);    double scale=getStrokeTotalWidth(target) * 2d / lineLength;    growx=scale * r.height;    growy=scale * r.width;    break;  }case CENTER:default :double lineLength=Math.sqrt(r.width * r.width + r.height * r.height);double scale=getStrokeTotalWidth(target) / lineLength;growx=scale * r.height;growy=scale * r.width;break;}Geom.grow(r,growx,growy);Point2D.Double c1=new Point2D.Double(r.x + r.width / 2,r.y + (r.height / 2));Point2D.Double p2=new Point2D.Double(r.x + r.width / 2,r.y + r.height);Point2D.Double p4=new Point2D.Double(r.x + r.width / 2,r.y);if (r.contains(from)) {if (from.y > r.y && from.y < (r.y + r.height / 2)) {return p2;} else {return p4;}}double ang=Geom.pointToAngle(r,from);Point2D.Double p1=new Point2D.Double(r.x + r.width,r.y + (r.height / 2));Point2D.Double p3=new Point2D.Double(r.x,r.y + (r.height / 2));Point2D.Double rp=null;if (ang > 0 && ang < 1.57) {rp=Geom.intersect(p1.x,p1.y,p2.x,p2.y,c1.x,c1.y,from.x,from.y);} else if (ang > 1.575 && ang < 3.14) {rp=Geom.intersect(p2.x,p2.y,p3.x,p3.y,c1.x,c1.y,from.x,from.y);} else if (ang > -3.14 && ang < -1.575) {rp=Geom.intersect(p3.x,p3.y,p4.x,p4.y,c1.x,c1.y,from.x,from.y);} else if (ang > -1.57 && ang < 0) {rp=Geom.intersect(p4.x,p4.y,p1.x,p1.y,c1.x,c1.y,from.x,from.y);}if (rp == null) {rp=Geom.angleToPoint(r,ang);}return rp;}  }
class C{  private boolean isArrowpointAllowed(Node x,Node y,Graph graph){  if (graph.getEndpoint(x,y) == Endpoint.ARROW) {    return true;  }  if (graph.getEndpoint(x,y) == Endpoint.TAIL) {    return false;  }  if (graph.getEndpoint(y,x) == Endpoint.ARROW) {    if (!knowledge.isForbidden(x.getName(),y.getName()))     return true;  }  if (graph.getEndpoint(y,x) == Endpoint.TAIL) {    if (!knowledge.isForbidden(x.getName(),y.getName()))     return true;  }  return graph.getEndpoint(y,x) == Endpoint.CIRCLE;}  }
class C{  public void remove(SchemaObject obj){  String objName=obj.getName();  HashMap<String,SchemaObject> map=getMap(obj.getType());  if (SysProperties.CHECK && !map.containsKey(objName)) {    DbException.throwInternalError("not found: " + objName);  }  map.remove(objName);  freeUniqueName(objName);}  }
class C{  public void markProcessingTimeStart(){  mCaptureTimeMillis=getElapsedRealTime();}  }
class C{  private void sendMmsListOnXmpp(ArrayList<Mms> mmsList,String preMsg,String postMsg){  XmppMsg message=new XmppMsg();  if (sSettingsMgr.smsReplySeparate) {    if (preMsg != null) {      message.appendBold(preMsg);      sendAndClear(message);    }    for (    Mms mms : mmsList) {      appendMms(message,mms);      sendAndClear(message);      try {        Thread.sleep(100);      } catch (      InterruptedException e) {      }    }    if (postMsg != null) {      message.appendItalicLine(postMsg);      sendAndClear(message);    }  } else {    if (preMsg != null) {      message.appendBoldLine(preMsg);    }    for (    Mms mms : mmsList) {      appendMms(message,mms);    }    if (postMsg != null) {      message.appendItalicLine(postMsg);    }    send(message);  }}  }
class C{  protected void initializePatterns(){  customLevelsParser=new CustomLevelsParser(customLevelDefinitions);  List<String> buildingKeywords=new ArrayList<>();  String newPattern=logFormat;  int index=0;  String current=newPattern;  List<String> propertyNames=new ArrayList<>();  while (index > -1) {    if (current.contains(PROP_START) && current.indexOf(PROP_END) > -1) {      index=current.indexOf(PROP_START);      String longPropertyName=current.substring(current.indexOf(PROP_START),current.indexOf(PROP_END) + 1);      String shortProp=getShortPropertyName(longPropertyName);      buildingKeywords.add(shortProp);      propertyNames.add(longPropertyName);      current=current.substring(longPropertyName.length() + 1 + index);      newPattern=singleReplace(newPattern,longPropertyName,Integer.toString(buildingKeywords.size() - 1));    } else {      index=-1;    }  }  Iterator iter=keywords.iterator();  while (iter.hasNext()) {    String keyword=(String)iter.next();    int index2=newPattern.indexOf(keyword);    if (index2 > -1) {      buildingKeywords.add(keyword);      newPattern=singleReplace(newPattern,keyword,Integer.toString(buildingKeywords.size() - 1));    }  }  String buildingInt="";  for (int i=0; i < newPattern.length(); i++) {    String thisValue=String.valueOf(newPattern.substring(i,i + 1));    if (isInteger(thisValue)) {      buildingInt=buildingInt + thisValue;    } else {      if (isInteger(buildingInt)) {        matchingKeywords.add(buildingKeywords.get(Integer.parseInt(buildingInt)));      }      buildingInt="";    }  }  if (isInteger(buildingInt)) {    matchingKeywords.add(buildingKeywords.get(Integer.parseInt(buildingInt)));  }  newPattern=replaceMetaChars(newPattern);  newPattern=newPattern.replaceAll(MULTIPLE_SPACES_REGEXP,MULTIPLE_SPACES_REGEXP);  newPattern=newPattern.replaceAll(Pattern.quote(PATTERN_WILDCARD),REGEXP_DEFAULT_WILDCARD);  for (int i=0; i < buildingKeywords.size(); i++) {    String keyword=buildingKeywords.get(i);    if (i == (buildingKeywords.size() - 1)) {      newPattern=singleReplace(newPattern,String.valueOf(i),GREEDY_GROUP);    } else     if (TIMESTAMP.equals(keyword)) {      newPattern=singleReplace(newPattern,String.valueOf(i),"(" + timestampPatternText.replaceAll("'","") + ")");    } else     if (LOGGER.equals(keyword) || LEVEL.equals(keyword)) {      newPattern=singleReplace(newPattern,String.valueOf(i),NOSPACE_GROUP);    } else {      newPattern=singleReplace(newPattern,String.valueOf(i),DEFAULT_GROUP);    }  }  regexp=newPattern;  LOG.fine("regexp is " + regexp);}  }
class C{  public void focusLost(FocusEvent e){  comboBox.repaint();}  }
class C{  SSLServerSocketImpl(SSLContextImpl context) throws IOException {  super();  initServer(context);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int col;  int row;  int numCols;  int numRows;  int a;  int i;  float progress;  int range;  boolean blnTextOutput=false;  double z;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      blnTextOutput=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    numRows=image.getNumberRows();    numCols=image.getNumberColumns();    double noData=image.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("spectrum.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    int minValue=(int)(image.getMinimumValue());    int maxValue=(int)(image.getMaximumValue());    range=maxValue - minValue;    double[] data;    double[][] totals=new double[4][range + 1];    double[] radius=new double[range + 1];    double[][] centroid=new double[2][range + 1];    double[] DFCSum=new double[range + 1];    long[][] minRowAndCol=new long[2][range + 1];    for (a=0; a <= range; a++) {      minRowAndCol[0][a]=Long.MAX_VALUE;      minRowAndCol[1][a]=Long.MAX_VALUE;    }    updateProgress("Finding patch min row and columns:",0);    for (row=0; row < numRows; row++) {      data=image.getRowValues(row);      for (col=0; col < numCols; col++) {        if (data[col] > 0) {          a=(int)(data[col] - minValue);          if (row < minRowAndCol[0][a]) {            minRowAndCol[0][a]=row;          }          if (col < minRowAndCol[1][a]) {            minRowAndCol[1][a]=col;          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (numRows - 1));      updateProgress("Finding patch min row and columns:",(int)progress);    }    updateProgress("Loop 1 of 3:",0);    for (row=0; row < numRows; row++) {      data=image.getRowValues(row);      for (col=0; col < numCols; col++) {        if (data[col] > 0) {          a=(int)(data[col] - minValue);          totals[0][a]+=(col - minRowAndCol[1][a]);          totals[1][a]+=(row - minRowAndCol[0][a]);          totals[2][a]++;        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (numRows - 1));      updateProgress("Loop 1 of 3:",(int)progress);    }    for (a=0; a <= range; a++) {      if (totals[2][a] > 0) {        centroid[0][a]=totals[0][a] / totals[2][a] + minRowAndCol[1][a];        centroid[1][a]=totals[1][a] / totals[2][a] + minRowAndCol[0][a];        radius[a]=Math.sqrt((totals[2][a]) / Math.PI) - 0.5;      }    }    updateProgress("Loop 2 of 3:",0);    double d;    for (row=0; row < numRows; row++) {      data=image.getRowValues(row);      for (col=0; col < numCols; col++) {        if (data[col] > 0) {          a=(int)(data[col] - minValue);          d=Math.sqrt(Math.pow((col - centroid[0][a]),2d) + Math.pow((row - centroid[1][a]),2));          DFCSum[a]+=(double)d;        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (numRows - 1));      updateProgress("Loop 2 of 3:",(int)progress);    }    for (a=0; a <= range; a++) {      if (totals[2][a] > 0) {        DFCSum[a]=DFCSum[a] / totals[2][a];      }    }    updateProgress("Loop 3 of 3:",0);    for (row=0; row < numRows; row++) {      data=image.getRowValues(row);      for (col=0; col < numCols; col++) {        if (data[col] > 0) {          a=(int)(data[col] - minValue);          output.setValue(row,col,DFCSum[a]);        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (numRows - 1));      updateProgress("Loop 3 of 3:",(int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    image.close();    output.close();    if (blnTextOutput) {      DecimalFormat df;      df=new DecimalFormat("0.0000");      String retstr="Radius of Gyration\nPatch ID\tValue";      for (a=0; a <= range; a++) {        if (DFCSum[a] > 0) {          retstr=retstr + "\n" + (a + minValue)+ "\t"+ df.format(DFCSum[a]);        }      }      returnData(retstr);    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public Interval(long startInstant,long endInstant,DateTimeZone zone){  super(startInstant,endInstant,ISOChronology.getInstance(zone));}  }
class C{  public void restore(){}  }
class C{  public void selectAllAccessibleSelection(){  TreeModel model=JTree.this.getModel();  if (model != null) {    int childCount=getAccessibleChildrenCount();    TreePath path;    for (int i=0; i < childCount; i++) {      path=getChildTreePath(i);      JTree.this.addSelectionPath(path);    }  }}  }
class C{  public void sendChannelData(ChannelData channelData,TransportAddress sendTo,TransportAddress sendThrough) throws StunException {  try {    getNetAccessManager().sendMessage(channelData,sendThrough,sendTo);  } catch (  StunException stex) {    throw stex;  }catch (  IllegalArgumentException iaex) {    throw new StunException(StunException.ILLEGAL_ARGUMENT,"Failed to send STUN indication: " + channelData,iaex);  }catch (  IOException ioex) {    throw new StunException(StunException.NETWORK_ERROR,"Failed to send STUN indication: " + channelData,ioex);  }}  }
class C{  private static boolean isRecognizedFormat(int colorFormat){switch (colorFormat) {case MediaCodecInfo.CodecCapabilities.COLOR_FormatYUV420Planar:case MediaCodecInfo.CodecCapabilities.COLOR_FormatYUV420PackedPlanar:case MediaCodecInfo.CodecCapabilities.COLOR_FormatYUV420SemiPlanar:case MediaCodecInfo.CodecCapabilities.COLOR_FormatYUV420PackedSemiPlanar:case MediaCodecInfo.CodecCapabilities.COLOR_TI_FormatYUV420PackedSemiPlanar:    return true;default :  return false;}}  }
class C{  protected CatchBlockImpl(){  super();}  }
class C{  public void load(){  files=new HashMap<String,VirtualFile>();  ZipFile zipFile=null;  try {    zipFile=new ZipFile(path);    Enumeration e=zipFile.getEntries();    while (e.hasMoreElements()) {      ZipEntry ze=(ZipEntry)e.nextElement();      InputStream inputStream=zipFile.getInputStream(ze);      VirtualFile f=new InMemoryFile(inputStream,ze.getSize(),path + "$" + ze.getName(),MimeMappings.getMimeType(ze.getName()),ze.getTime());      files.put(ze.getName(),f);    }  } catch (  SwcException.UnknownZipFormat e) {    throw new SwcException.NotASwcFile(path);  }catch (  SwcException e) {    throw e;  }catch (  Exception e) {    throw new SwcException.FilesNotRead(e.getMessage());  } finally {    try {      if (zipFile != null)       zipFile.close();    } catch (    IOException ioe) {    }  }}  }
class C{  public Object[] appendCompletedChunk(Object[] fullChunk){  Node next=new Node(fullChunk);  if (_bufferHead == null) {    _bufferHead=_bufferTail=next;  } else {    _bufferTail.linkNext(next);    _bufferTail=next;  }  int len=fullChunk.length;  _bufferedEntryCount+=len;  if (len < SMALL_CHUNK_SIZE) {    len+=len;  } else {    len+=(len >> 2);  }  return new Object[len];}  }
class C{  private void initData(){  DisplayMetrics metrics=getContext().getResources().getDisplayMetrics();  float density=metrics.density;  mIconMargin=Math.round(DEFAULT_ICON_MARGIN_IN_DP * density);  mCacheDataList=new LinkedList<>();  String lastCache=mCacheMap.get(mRememberId);  if (mAutoFill) {    setText(lastCache);  }  if (lastCache != null) {    mCacheDataList.add(0,lastCache);    for (int i=1; i < mRememberCount; ++i) {      String data=mCacheMap.get(mRememberId + i);      if (data != null) {        mCacheDataList.add(i,data);      }    }    onCacheDataChanged();  }}  }
class C{  public static Section createSectionComposite(Composite parent,String title,String description,FormToolkit toolkit,int sectionFlags,IExpansionListener expansionListener){  Section section=toolkit.createSection(parent,sectionFlags);  TableWrapData td=new TableWrapData(TableWrapData.FILL_GRAB);  td.grabHorizontal=true;  section.setLayoutData(td);  section.setText(title);  section.setDescription(description);  if (expansionListener != null) {    section.addExpansionListener(expansionListener);  }  Composite sectionClient=toolkit.createComposite(section);  TableWrapLayout layout=new TableWrapLayout();  layout.numColumns=1;  sectionClient.setLayout(layout);  section.setClient(sectionClient);  toolkit.paintBordersFor(sectionClient);  return section;}  }
class C{  @Override public void evaluateConstraints(Solution solution) throws JMException {}  }
class C{  public Pair<Quintet<Integer,Integer,int[],int[],int[]>,List<Pair<int[],int[]>>> parsePopulations(int pmin,int radius,int run,int populationNumber,int population,String inputPath,Geometry saGeometry,Geometry gautengGeometry,Geometry ctGeometry,Geometry eThekwiniGeometry,Geometry saEnvelope,Geometry gautengEnvelope,Geometry ctEnvelope,Geometry eThekwiniEnvelope){  String populationFile=String.format("%sresults%d/trainingPopulation_%d_%d_%d_%d.xml.gz",inputPath,run,pmin,radius,run,populationNumber);  LOG.info("Reading population " + population + " for configuration "+ pmin+ "_"+ radius);  Collection<? extends Person> personCollection=readPopulation(populationFile);  int numberChainsNoMinor=0;  int hour=24;  int[] hourArray=new int[24];  int[] activityArray=new int[72];  int[] areaArray=new int[9];  Arrays.fill(areaArray,0);  Arrays.fill(hourArray,0);  Arrays.fill(activityArray,0);  int[] hourArray1=new int[24];  int[] activityArray1=new int[72];  Arrays.fill(activityArray1,0);  Arrays.fill(hourArray1,0);  int[] hourArray2=new int[24];  int[] activityArray2=new int[72];  Arrays.fill(hourArray2,0);  Arrays.fill(activityArray2,0);  int[] hourArray3=new int[24];  int[] activityArray3=new int[72];  Arrays.fill(hourArray3,0);  Arrays.fill(activityArray3,0);  int[] hourArray4=new int[24];  int[] activityArray4=new int[72];  Arrays.fill(hourArray4,0);  Arrays.fill(activityArray4,0);  int[] hourArray5=new int[24];  int[] activityArray5=new int[72];  Arrays.fill(hourArray5,0);  Arrays.fill(activityArray5,0);  int[] hourArray6=new int[24];  int[] activityArray6=new int[72];  Arrays.fill(hourArray6,0);  Arrays.fill(activityArray6,0);  int[] hourArray7=new int[24];  int[] activityArray7=new int[72];  Arrays.fill(hourArray7,0);  Arrays.fill(activityArray7,0);  int[] hourArray8=new int[24];  int[] activityArray8=new int[72];  Arrays.fill(hourArray8,0);  Arrays.fill(activityArray8,0);  int[] hourArray9=new int[24];  int[] activityArray9=new int[72];  Arrays.fill(hourArray9,0);  Arrays.fill(activityArray9,0);  boolean[] a1=new boolean[]{false,false,false,false};  boolean[] a2=new boolean[]{false,false,false,true};  boolean[] a3=new boolean[]{false,false,true,true};  boolean[] a4=new boolean[]{false,true,false,true};  boolean[] a5=new boolean[]{true,false,false,true};  boolean[] a6=new boolean[]{true,true,false,true};  boolean[] a7=new boolean[]{false,true,true,true};  boolean[] a8=new boolean[]{true,true,true,true};  boolean[] a9=new boolean[]{true,false,true,true};  int person=1;  while (personCollection.iterator().hasNext()) {    boolean inSouthAfrica=false;    boolean inGauteng=false;    boolean inCapeTown=false;    boolean inEthekwini=false;    Person vehicle=personCollection.iterator().next();    Plan selectedPlan=vehicle.getSelectedPlan();    List<PlanElement> planElements=selectedPlan.getPlanElements();    if (planElements.size() > 3) {      int numberMinorActivities=0;      for (int j=0; j < planElements.size(); j++) {        PlanElement planElement=planElements.get(j);        if (planElement instanceof Activity) {          Activity activity=(Activity)planElement;          if (j == 0) {            double endTime=activity.getEndTime();            hour=convertSecondsToHourOfDay(endTime);            incrementArray(hour,hourArray);          } else           if (j < planElements.size() - 1) {            Coord coord=activity.getCoord();            double x=coord.getX();            double y=coord.getY();            Coordinate coordinate=new Coordinate(x,y);            boolean activityInSA=false;            boolean activityInGauteng=false;            boolean activityInCapeTown=false;            boolean activityInEthekwini=false;            activityInSA=checkActivityInArea(saGeometry,saEnvelope,coordinate,1);            if (activityInSA) {              inSouthAfrica=true;              if (!inGauteng) {                activityInGauteng=checkActivityInArea(gautengGeometry,gautengEnvelope,coordinate,1);                if (activityInGauteng) {                  inGauteng=true;                } else                 if (!inCapeTown) {                  activityInCapeTown=checkActivityInArea(ctGeometry,ctEnvelope,coordinate,2);                  if (activityInCapeTown) {                    inCapeTown=true;                  } else                   if (!inEthekwini) {                    activityInEthekwini=checkActivityInArea(eThekwiniGeometry,eThekwiniEnvelope,coordinate,1);                    if (activityInEthekwini) {                      inEthekwini=true;                    } else {                    }                  }                }              } else               if (!inCapeTown) {                activityInCapeTown=checkActivityInArea(ctGeometry,ctEnvelope,coordinate,2);                if (activityInCapeTown) {                  inCapeTown=true;                } else                 if (!inEthekwini) {                  activityInEthekwini=checkActivityInArea(eThekwiniGeometry,eThekwiniEnvelope,coordinate,2);                  if (activityInEthekwini) {                    inEthekwini=true;                  } else {                  }                }              } else               if (!inEthekwini) {                activityInEthekwini=checkActivityInArea(eThekwiniGeometry,eThekwiniEnvelope,coordinate,2);                if (activityInEthekwini) {                  inEthekwini=true;                } else {                }              } else {              }            } else {            }            numberMinorActivities++;          } else {          }        }      }      if (numberMinorActivities > 0) {        incrementArray(numberMinorActivities,activityArray);        boolean[] inAreaArray=new boolean[]{inGauteng,inCapeTown,inEthekwini,inSouthAfrica};        if (Arrays.equals(inAreaArray,a1)) {          incrementArray(1,areaArray);          incrementArray(hour,hourArray1);          incrementArray(numberMinorActivities,activityArray1);        } else         if (Arrays.equals(inAreaArray,a2)) {          incrementArray(2,areaArray);          incrementArray(hour,hourArray2);          incrementArray(numberMinorActivities,activityArray2);        } else         if (Arrays.equals(inAreaArray,a3)) {          incrementArray(3,areaArray);          incrementArray(hour,hourArray3);          incrementArray(numberMinorActivities,activityArray3);        } else         if (Arrays.equals(inAreaArray,a4)) {          incrementArray(4,areaArray);          incrementArray(hour,hourArray4);          incrementArray(numberMinorActivities,activityArray4);        } else         if (Arrays.equals(inAreaArray,a5)) {          incrementArray(5,areaArray);          incrementArray(hour,hourArray5);          incrementArray(numberMinorActivities,activityArray5);        } else         if (Arrays.equals(inAreaArray,a6)) {          incrementArray(6,areaArray);          incrementArray(hour,hourArray6);          incrementArray(numberMinorActivities,activityArray6);        } else         if (Arrays.equals(inAreaArray,a7)) {          incrementArray(7,areaArray);          incrementArray(hour,hourArray7);          incrementArray(numberMinorActivities,activityArray7);        } else         if (Arrays.equals(inAreaArray,a8)) {          incrementArray(8,areaArray);          incrementArray(hour,hourArray8);          incrementArray(numberMinorActivities,activityArray8);        } else         if (Arrays.equals(inAreaArray,a9)) {          incrementArray(9,areaArray);          incrementArray(hour,hourArray9);          incrementArray(numberMinorActivities,activityArray9);        }      }    } else {      numberChainsNoMinor++;    }    personCollection.remove(vehicle);    person++;  }  Quintet<Integer,Integer,int[],int[],int[]> populationQuintet=new Quintet<Integer,Integer,int[],int[],int[]>(population,numberChainsNoMinor,areaArray,hourArray,activityArray);  Pair<int[],int[]> a1Pair=new Pair<int[],int[]>(hourArray1,activityArray1);  Pair<int[],int[]> a2Pair=new Pair<int[],int[]>(hourArray2,activityArray2);  Pair<int[],int[]> a3Pair=new Pair<int[],int[]>(hourArray3,activityArray3);  Pair<int[],int[]> a4Pair=new Pair<int[],int[]>(hourArray4,activityArray4);  Pair<int[],int[]> a5Pair=new Pair<int[],int[]>(hourArray5,activityArray5);  Pair<int[],int[]> a6Pair=new Pair<int[],int[]>(hourArray6,activityArray6);  Pair<int[],int[]> a7Pair=new Pair<int[],int[]>(hourArray7,activityArray7);  Pair<int[],int[]> a8Pair=new Pair<int[],int[]>(hourArray8,activityArray8);  Pair<int[],int[]> a9Pair=new Pair<int[],int[]>(hourArray9,activityArray9);  List<Pair<int[],int[]>> pairList=new ArrayList<Pair<int[],int[]>>();  pairList.add(a1Pair);  pairList.add(a2Pair);  pairList.add(a3Pair);  pairList.add(a4Pair);  pairList.add(a5Pair);  pairList.add(a6Pair);  pairList.add(a7Pair);  pairList.add(a8Pair);  pairList.add(a9Pair);  Pair<Quintet<Integer,Integer,int[],int[],int[]>,List<Pair<int[],int[]>>> populationPair=new Pair<Quintet<Integer,Integer,int[],int[],int[]>,List<Pair<int[],int[]>>>(populationQuintet,pairList);  return populationPair;}  }
class C{  public String sqlMetadata_foreignKeyNames(String vendorName,String catalogName,String schemaName){  return m_interfaces.get(getDBVendorID(vendorName)).sqlMetadata_foreignKeyNames(catalogName,schemaName);}  }
class C{  public void prepareExpression(Session session){  if (defaultExpression != null) {    computeTableFilter=new TableFilter(session,table,null,false,null);    defaultExpression.mapColumns(computeTableFilter,0);    defaultExpression=defaultExpression.optimize(session);  }}  }
class C{  private final synchronized void connect(){  if (socket == null) {    String host=null;    String port=null;    boolean ok=false;    if (EngineUtil.isNetEngine(fileName)) {      try {        String[] lines=Util.readFile(fileName);        if (lines.length >= 3) {          host=lines[1];          port=lines[2];          ok=true;        }      } catch (      IOException e1) {      }    }    if (!ok) {      isError=true;      report.reportError(context.getString(R.string.network_engine_config_error));    } else {      try {        int portNr=Integer.parseInt(port);        socket=new Socket(host,portNr);        socket.setTcpNoDelay(true);      } catch (      UnknownHostException e) {        isError=true;        report.reportError(e.getMessage());      }catch (      NumberFormatException nfe) {        isError=true;        report.reportError(context.getString(R.string.invalid_network_port));      }catch (      IOException e) {        isError=true;        report.reportError(e.getMessage());      }    }    if (socket == null)     socket=new Socket();  }}  }
class C{  public ColorConvertOp(ICC_Profile[] profiles,RenderingHints hints){  if (profiles == null) {    throw new NullPointerException("Profiles cannot be null");  }  gotProfiles=true;  profileList=new ICC_Profile[profiles.length];  for (int i1=0; i1 < profiles.length; i1++) {    profileList[i1]=profiles[i1];  }  this.hints=hints;}  }
class C{  public mxCellMarker(mxGraphComponent graphComponent,Color validColor){  this(graphComponent,validColor,mxConstants.DEFAULT_INVALID_COLOR);}  }
class C{  public void defineOpacity(int motionType,int startTime,int duration,int start,int end){  opacity=createMotion(motionType,startTime,duration,start,end);}  }
class C{  private void createAndAttachEvent(long ov) throws WindowsException {  long hEvent=CreateEvent(false,false);  UNSAFE.putAddress(ov + OFFSETOF_HEVENT,hEvent);}  }
class C{  protected boolean hasZoom(){  return true;}  }
class C{  public boolean isClassCapability(){  return ((m_Flags & CLASS_CAPABILITY) == CLASS_CAPABILITY);}  }
class C{  public static PatternNotExpr notFilter(String eventTypeName){  return new PatternNotExpr(new PatternFilterExpr(Filter.create(eventTypeName)));}  }
class C{  public synchronized KeyFrameMeta analyzeKeyFrames(){  if (keyframeMeta != null) {    return keyframeMeta;  }  if (keyframeCache != null) {    keyframeMeta=keyframeCache.loadKeyFrameMeta(file);    if (keyframeMeta != null) {      duration=keyframeMeta.duration;      posTimeMap=new HashMap<Long,Long>();      for (int i=0; i < keyframeMeta.positions.length; i++) {        posTimeMap.put(keyframeMeta.positions[i],(long)keyframeMeta.timestamps[i]);      }      return keyframeMeta;    }  }  List<Long> positionList=new ArrayList<Long>();  List<Integer> timestampList=new ArrayList<Integer>();  List<Long> audioPositionList=new ArrayList<Long>();  List<Integer> audioTimestampList=new ArrayList<Integer>();  long origPos=getCurrentPosition();  setCurrentPosition(9);  boolean audioOnly=true;  while (this.hasMoreTags()) {    long pos=getCurrentPosition();    ITag tmpTag=this.readTagHeader();    duration=tmpTag.getTimestamp();    if (tmpTag.getDataType() == IoConstants.TYPE_VIDEO) {      if (audioOnly) {        audioOnly=false;        audioPositionList.clear();        audioTimestampList.clear();      }      if (firstVideoTag == -1) {        firstVideoTag=pos;      }      fillBuffer(1);      byte frametype=in.get();      if (((frametype & MASK_VIDEO_FRAMETYPE) >> 4) == FLAG_FRAMETYPE_KEYFRAME) {        positionList.add(pos);        timestampList.add(tmpTag.getTimestamp());      }    } else     if (tmpTag.getDataType() == IoConstants.TYPE_AUDIO) {      if (firstAudioTag == -1) {        firstAudioTag=pos;      }      if (audioOnly) {        audioPositionList.add(pos);        audioTimestampList.add(tmpTag.getTimestamp());      }    }    long newPosition=pos + tmpTag.getBodySize() + 15;    if (newPosition >= getTotalBytes()) {      log.error("New position exceeds limit");      break;    } else {      setCurrentPosition(newPosition);    }  }  setCurrentPosition(origPos);  keyframeMeta=new KeyFrameMeta();  keyframeMeta.duration=duration;  posTimeMap=new HashMap<Long,Long>();  if (audioOnly) {    positionList=audioPositionList;    timestampList=audioTimestampList;  }  keyframeMeta.audioOnly=audioOnly;  keyframeMeta.positions=new long[positionList.size()];  keyframeMeta.timestamps=new int[timestampList.size()];  for (int i=0; i < keyframeMeta.positions.length; i++) {    keyframeMeta.positions[i]=positionList.get(i);    keyframeMeta.timestamps[i]=timestampList.get(i);    posTimeMap.put((long)positionList.get(i),(long)timestampList.get(i));  }  if (keyframeCache != null) {    keyframeCache.saveKeyFrameMeta(file,keyframeMeta);  }  return keyframeMeta;}  }
class C{  private void validateMultiVolumeConsistency(BlockVirtualPoolParam createParam){  if (createParam.getProtection() != null && createParam.getProtection().specifiesRPProtection() && (createParam.getMultiVolumeConsistency() == null || !createParam.getMultiVolumeConsistency())) {    throw APIException.badRequests.multiVolumeConsistencyMustBeEnabledWithRP();  }}  }
class C{  public StringTokenizer(String str){  this(str," \t\n\r\f",false);}  }
class C{  public boolean adjustValue(int key,int amount){  int index=index(key);  if (index < 0) {    return false;  } else {    _values[index]+=amount;    return true;  }}  }
class C{  protected void handleManualNameFieldUpdate(String text){  if (text == null)   return;  if (text.length() > 15) {    text=text.substring(0,15);  }  text=text.toUpperCase().replace('*','-');  for (Iterator it=trees.iterator(); it.hasNext(); ) {    SymbolTreeHolder sth=(SymbolTreeHolder)it.next();    if (sth != null) {      DefaultMutableTreeNode node=sth.getNodeForCode(text);      if (node != null) {        if (Debug.debugging("symbology")) {          Debug.output("SymbolChooser: Found node for " + text);        }        sth.getTree().setSelectionPath(new TreePath(node.getPath()));        sth.updateOptionsForCode(text);        setSelectedTreeHolder(sth);      }    }  }}  }
class C{  private boolean isPortUsable(StoragePort storagePort,Set<String> varrays){  boolean isUsable=true;  if (storagePort == null || storagePort.getInactive() || storagePort.getTaggedVirtualArrays() == null || NullColumnValueGetter.isNullURI(storagePort.getNetwork()) || !RegistrationStatus.REGISTERED.toString().equalsIgnoreCase(storagePort.getRegistrationStatus()) || (StoragePort.OperationalStatus.valueOf(storagePort.getOperationalStatus())).equals(StoragePort.OperationalStatus.NOT_OK) || !DiscoveredDataObject.CompatibilityStatus.COMPATIBLE.name().equals(storagePort.getCompatibilityStatus()) || !DiscoveryStatus.VISIBLE.name().equals(storagePort.getDiscoveryStatus())) {    isUsable=false;  } else {    StringSet portVarrays=storagePort.getTaggedVirtualArrays();    portVarrays.retainAll(varrays);    if (portVarrays.isEmpty()) {      isUsable=false;    }  }  return isUsable;}  }
class C{  public synchronized void clear(){  mCategories.clear();  mValues.clear();}  }
class C{  public String lastTaskName() throws IllegalStateException {  if (this.lastTaskInfo == null) {    throw new IllegalStateException("No tests run: can't get last interval");  }  return this.lastTaskInfo.getTaskName();}  }
class C{  public static String macApp(){  return OS.getNative().winMacLinux("",".app","");}  }
class C{  @VisibleForTesting static String decodeHtml(String s){  int firstAmp=s.indexOf('&');  int safeLimit=longestPrefixOfGoodCodeunits(s);  if ((firstAmp & safeLimit) < 0) {    return s;  }  StringBuilder sb;{    int n=s.length();    sb=new StringBuilder(n);    int pos=0;    int amp=firstAmp;    while (amp >= 0) {      long endAndCodepoint=HtmlEntities.decodeEntityAt(s,amp,n);      int end=(int)(endAndCodepoint >>> 32);      int codepoint=(int)endAndCodepoint;      sb.append(s,pos,amp).appendCodePoint(codepoint);      pos=end;      amp=s.indexOf('&',end);    }    sb.append(s,pos,n);  }  stripBannedCodeunits(sb,firstAmp < 0 ? safeLimit : safeLimit < 0 ? firstAmp : Math.min(firstAmp,safeLimit));  return sb.toString();}  }
class C{  public void endContainsKeySend(long startTime,boolean failed){  long duration=getStatTime() - startTime;  endClientOpSend(duration,failed);  this.sendStats.incInt(containsKeySendInProgressId,-1);  int endContainsKeySendId;  if (failed) {    endContainsKeySendId=containsKeySendFailedId;  } else {    endContainsKeySendId=containsKeySendId;  }  this.sendStats.incInt(endContainsKeySendId,1);  this.stats.incLong(containsKeySendDurationId,duration);}  }
class C{  public NaiveTokenizer(boolean useLowerCase){  this.useLowerCase=useLowerCase;}  }
class C{  public static String stringFor(int n){switch (n) {case CU_COMPUTEMODE_DEFAULT:    return "CU_COMPUTEMODE_DEFAULT";case CU_COMPUTEMODE_EXCLUSIVE:  return "CU_COMPUTEMODE_EXCLUSIVE";case CU_COMPUTEMODE_PROHIBITED:return "CU_COMPUTEMODE_PROHIBITED";case CU_COMPUTEMODE_EXCLUSIVE_PROCESS:return "CU_COMPUTEMODE_EXCLUSIVE_PROCESS";}return "INVALID CUcomputemode: " + n;}  }
class C{  public void testAddScenarioAudit(){  System.out.println("addScenarioAudit");  AuditServiceThreadQueueImpl instance=new AuditServiceThreadQueueImpl();  AuditCommand auditCommand=EasyMock.createMock(AuditCommand.class);  AuditServiceThread auditServiceThread=createMockAuditServiceThread(instance);  AuditServiceThreadFactory auditServiceThreadFactory=createMockAuditServiceThreadFactory(auditCommand,auditServiceThread);  instance.setAuditServiceThreadFactory(auditServiceThreadFactory);  instance.addScenarioAudit(auditCommand);  try {    Thread.sleep(500);  } catch (  InterruptedException ex) {    Logger.getLogger(AuditServiceThreadQueueImplTest.class.getName()).log(Level.SEVERE,null,ex);  }  EasyMock.verify(auditServiceThread);  EasyMock.verify(auditServiceThreadFactory);}  }
class C{  @Override public String toString(){  String ivString=Base64.encodeToString(iv,BASE64_FLAGS);  String cipherTextString=Base64.encodeToString(cipherText,BASE64_FLAGS);  String macString=Base64.encodeToString(mac,BASE64_FLAGS);  return String.format(ivString + ":" + macString+ ":"+ cipherTextString);}  }
class C{  public Object execute(ExecutionEvent event) throws ExecutionException {  IWorkbenchWindow window=HandlerUtil.getActiveWorkbenchWindowChecked(event);  MyWizardDialog dialog=new MyWizardDialog(window.getShell(),new StackoverflowWizard());  dialog.open();  return null;}  }
class C{  public void sendEmail(String subject,String message){  processEmail(new EmailData(subject,message));}  }
class C{  public Exchanger(){  participant=new Participant();}  }
class C{  @Override public void readFrom(ChannelBuffer data,int length){  dataType=data.readInt();}  }
class C{  public static void fill(float[] array,float value){  for (int i=0; i < array.length; i++) {    array[i]=value;  }}  }
class C{  protected void startBridgeServer(int port,boolean notifyBySubscription) throws IOException {  Cache cache=getCache();  CacheServer bridge=cache.addCacheServer();  bridge.setPort(port);  bridge.setNotifyBySubscription(notifyBySubscription);  bridge.start();  bridgeServerPort=bridge.getPort();}  }
class C{  public AddGroupAction(final NetworkPanel networkPanel,Class<? extends StandardDialog> dialogClass,final String name){  super(name);  this.dialogClass=dialogClass;  this.networkPanel=networkPanel;  if (networkPanel == null) {    throw new IllegalArgumentException("networkPanel must not be null");  }  putValue(SHORT_DESCRIPTION,"Add " + name + " group to network");}  }
class C{  public GeoDistanceSortBuilder geoDistance(GeoDistance geoDistance){  this.geoDistance=geoDistance;  return this;}  }
class C{  void error(String msg){  System.err.println("Error: " + msg);  errors++;}  }
class C{  public void cast(final Type from,final Type to){  if (from != to) {    if (from == Type.DOUBLE_TYPE) {      if (to == Type.FLOAT_TYPE) {        mv.visitInsn(Opcodes.D2F);      } else       if (to == Type.LONG_TYPE) {        mv.visitInsn(Opcodes.D2L);      } else {        mv.visitInsn(Opcodes.D2I);        cast(Type.INT_TYPE,to);      }    } else     if (from == Type.FLOAT_TYPE) {      if (to == Type.DOUBLE_TYPE) {        mv.visitInsn(Opcodes.F2D);      } else       if (to == Type.LONG_TYPE) {        mv.visitInsn(Opcodes.F2L);      } else {        mv.visitInsn(Opcodes.F2I);        cast(Type.INT_TYPE,to);      }    } else     if (from == Type.LONG_TYPE) {      if (to == Type.DOUBLE_TYPE) {        mv.visitInsn(Opcodes.L2D);      } else       if (to == Type.FLOAT_TYPE) {        mv.visitInsn(Opcodes.L2F);      } else {        mv.visitInsn(Opcodes.L2I);        cast(Type.INT_TYPE,to);      }    } else {      if (to == Type.BYTE_TYPE) {        mv.visitInsn(Opcodes.I2B);      } else       if (to == Type.CHAR_TYPE) {        mv.visitInsn(Opcodes.I2C);      } else       if (to == Type.DOUBLE_TYPE) {        mv.visitInsn(Opcodes.I2D);      } else       if (to == Type.FLOAT_TYPE) {        mv.visitInsn(Opcodes.I2F);      } else       if (to == Type.LONG_TYPE) {        mv.visitInsn(Opcodes.I2L);      } else       if (to == Type.SHORT_TYPE) {        mv.visitInsn(Opcodes.I2S);      }    }  }}  }
class C{  public void put(@Nullable String spaceName,int part,KeyCacheObject key,byte[] keyBytes,byte[] valBytes) throws IgniteCheckedException {  GridOffHeapPartitionedMap m=offheap(spaceName);  if (m == null)   throw new IgniteCheckedException("Failed to write data to off-heap space, no space registered for name: " + spaceName);  if (log.isTraceEnabled())   log.trace("offheap put [key=" + key + ']');  m.put(part,U.hash(key),keyBytes(key,keyBytes),valBytes);}  }
class C{  public IncompatibleComparatorException(String message){  super(message);}  }
class C{  @SafeVarargs public SimpleCompositeService(CompositeServiceEntry<? super I,? extends O>... services){  super(services);}  }
class C{  public boolean isSingleSource(){  return constraint.isSingleSource();}  }
class C{  public boolean isCollapsedByDefault(){  Object oo=get_Value(COLUMNNAME_IsCollapsedByDefault);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static File createUniqueFile(File targetFolder,String originalFile,boolean keepOriginal){  String mimeType=MimeTypeMap.getSingleton().getMimeTypeFromExtension(originalFile);  return createUniqueFile(targetFolder,originalFile,mimeType,keepOriginal);}  }
class C{  public TypeCheckHints(TypeReference targetType,JavaTypeProfile profile,Assumptions assumptions,double minHintHitProbability,int maxHints){  this.profile=profile;  if (targetType != null && targetType.isExact()) {    exact=targetType.getType();  } else {    exact=null;  }  Double[] hitProbability={null};  this.hints=makeHints(targetType,profile,minHintHitProbability,maxHints,hitProbability);  this.hintHitProbability=hitProbability[0];}  }
class C{  public void paintTabbedPaneTabAreaBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  if (orientation == JTabbedPane.LEFT) {    AffineTransform transform=new AffineTransform();    transform.scale(-1,1);    transform.rotate(Math.toRadians(90));    paintBackground(context,g,y,x,h,w,transform);  } else   if (orientation == JTabbedPane.RIGHT) {    AffineTransform transform=new AffineTransform();    transform.rotate(Math.toRadians(90));    transform.translate(0,-(x + w));    paintBackground(context,g,y,0,h,w,transform);  } else   if (orientation == JTabbedPane.BOTTOM) {    AffineTransform transform=new AffineTransform();    transform.translate(x,y);    paintBackground(context,g,0,0,w,h,transform);  } else {    paintBackground(context,g,x,y,w,h,null);  }}  }
class C{  public static Enumeration<GraphNode> enumerateTopSort(Graph G){  return enumerateTopSort(G,G.enumerateNodes());}  }
class C{  public SendRequest fromPaymentDetails(PaymentDetails paymentDetails){  if (paymentDetails.hasMemo())   this.memo=paymentDetails.getMemo();  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:02.461 -0500",hash_original_method="A5632C4BCBF4A04998C8AED30BFA7D34",hash_generated_method="451AC0235001E13CBE31F28EA5F72ECF") @DSVerified @DSSpec(DSCat.IO) @DSSink({DSSinkKind.NETWORK}) public int saml(String reversePath) throws IOException {  return sendCommand(SMTPCommand.SAML,reversePath);}  }
class C{  protected boolean generate(){  return false;}  }
class C{  public static void trace(byte level,String s,Throwable t){  if (s == null)   return;  if (level == SEVERE) {    if (!logged.contains(s)) {      TypeScriptNodejsCorePlugin.getDefault().getLog().log(new Status(IStatus.ERROR,TypeScriptNodejsCorePlugin.PLUGIN_ID,s,t));      logged.add(s);    }  }  if (!TypeScriptNodejsCorePlugin.getDefault().isDebugging())   return;  StringBuilder sb=new StringBuilder(TypeScriptNodejsCorePlugin.PLUGIN_ID);  sb.append(" ");  sb.append(levelNames[level]);  sb.append(" ");  sb.append(sdf.format(new Date()));  sb.append(" ");  sb.append(s);  System.out.println(sb.toString());  if (t != null)   t.printStackTrace();}  }
class C{  private void loadWrapperClasses(){  wrapperClasses=new ArrayList<Class<?>>();  noWrapperClasses=new ArrayList<Class<?>>();  ClassLoader cl=Thread.currentThread().getContextClassLoader();  try {    URL res=cl.getResource("javax/faces/Messages.properties");    File javaxFacesPackage=new File(res.getFile()).getParentFile();    collectWrapperClasses(cl,JAVAX_FACES_PKG,javaxFacesPackage);  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public int columns(){  return columns;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:19.877 -0500",hash_original_method="2D6A09B1457D58571ED784483A3E54F2",hash_generated_method="8B92707DD4A71374670A5694D30393A6") @FindBugsSuppressWarnings("ES_COMPARING_PARAMETER_STRING_WITH_EQ") public boolean equalsIgnoreCase(String string){  return getTaintBoolean();}  }
class C{  public void add(Geometry geom){  if (geom instanceof LineString) {    add(geom.getCoordinates());  } else   if (geom instanceof Polygon) {    Polygon poly=(Polygon)geom;    add(poly.getExteriorRing().getCoordinates());    for (int i=0; i < poly.getNumInteriorRing(); i++) {      add(poly.getInteriorRingN(i).getCoordinates());    }  } else   if (geom instanceof GeometryCollection) {    GeometryCollection gc=(GeometryCollection)geom;    for (int i=0; i < gc.getNumGeometries(); i++) {      add(gc.getGeometryN(i));    }  }}  }
class C{  public static DateFormat createDateFormat(final String formatString){  return new SimpleDateFormat(formatString);}  }
class C{  public KDTree(){  mRootNode=null;}  }
class C{  public static InsertIntoClause create(String streamName,String[] columns,StreamSelector streamSelector){  if (streamSelector == StreamSelector.RSTREAM_ISTREAM_BOTH) {    throw new IllegalArgumentException("Insert into only allows istream or rstream selection, not both");  }  return new InsertIntoClause(streamName,Arrays.asList(columns),streamSelector);}  }
class C{  RawMessage(byte[] messageBytes,int messageLength,TransportAddress remoteAddress,TransportAddress localAddress){  this.messageBytes=new byte[messageLength];  System.arraycopy(messageBytes,0,this.messageBytes,0,messageLength);  this.messageLength=messageLength;  this.localAddress=localAddress;  this.remoteAddress=remoteAddress;}  }
class C{  public SocketPermissionCollection(){  perms=new ArrayList<SocketPermission>();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static String toBytecodeName(String s){  String bn=mangle(s);  assert ((Object)bn == s || looksMangled(bn)) : bn;  assert (s.equals(toSourceName(bn))) : s;  return bn;}  }
class C{  public boolean last() throws SQLException {  checkState();  boolean b=rs.last();  notifyCursorMoved();  return b;}  }
class C{  public float topOfFloatStack(Interpreter interpreter){  return interpreter.floatStack().top();}  }
class C{  private void parseZip(final int mbrSize) throws IOException {  final byte[] buffer=new byte[1024];  String manifestData=null;  ZipEntry ze;  while ((ze=getNextEntry()) != null) {    final String filename=ze.getName();    final ByteArrayOutputStream baos=new ByteArrayOutputStream();    int count;    while ((count=super.read(buffer)) != -1) {      baos.write(buffer,0,count);    }    byte[] source=baos.toByteArray();    if (filename.toLowerCase(Locale.US).endsWith("hex")) {      final HexInputStream is=new HexInputStream(source,mbrSize);      source=new byte[is.available()];      is.read(source);      is.close();    }    if (MANIFEST.equals(filename))     manifestData=new String(source,"UTF-8"); else     entries.put(filename,source);  }  if (manifestData != null) {    final ManifestFile manifestFile=new Gson().fromJson(manifestData,ManifestFile.class);    manifest=manifestFile.getManifest();  }}  }
class C{  final public char yycharat(int pos){  return yy_buffer[yy_startRead + pos];}  }
class C{  public double nonSmooth(double t,DoubleMatrix1D X,DoubleMatrix1D pX){  double nonSmooth=0;  DoubleMatrix1D tlam=lambda.copy().assign(Functions.mult(t));  MGMParams par=new MGMParams(X,p,lsum);  DoubleMatrix2D weightMat=alg.multOuter(weights,weights,null);  DoubleMatrix2D betaWeight=weightMat.viewPart(0,0,p,p);  DoubleMatrix2D betascale=betaWeight.copy().assign(Functions.mult(-tlam.get(0)));  DoubleMatrix2D absBeta=par.beta.copy().assign(Functions.abs);  betascale.assign(absBeta,Functions.div);  betascale.assign(Functions.plus(1));  betascale.assign(Functions.max(0));  double betaNorms=0;  for (int i=0; i < p; i++) {    for (int j=0; j < p; j++) {      double curVal=par.beta.get(i,j);      if (curVal != 0) {        curVal=curVal * betascale.get(i,j);        par.beta.set(i,j,curVal);        betaNorms+=Math.abs(betaWeight.get(i,j) * curVal);      }    }  }  double thetaNorms=0;  for (int i=0; i < p; i++) {    for (int j=0; j < lcumsum.length - 1; j++) {      DoubleMatrix1D tempVec=par.theta.viewColumn(i).viewPart(lcumsum[j],l[j]);      double foo=norm2(tempVec);      double thetaScale=Math.max(0,1 - tlam.get(1) * weightMat.get(i,p + j) / norm2(tempVec));      tempVec.assign(Functions.mult(thetaScale));      thetaNorms+=weightMat.get(i,p + j) * Math.sqrt(alg.norm2(tempVec));    }  }  double phiNorms=0;  for (int i=0; i < lcumsum.length - 1; i++) {    for (int j=i + 1; j < lcumsum.length - 1; j++) {      DoubleMatrix2D tempMat=par.phi.viewPart(lcumsum[i],lcumsum[j],l[i],l[j]);      double phiScale=Math.max(0,1 - tlam.get(2) * weightMat.get(p + i,p + j) / norm2(tempMat));      tempMat.assign(Functions.mult(phiScale));      phiNorms+=weightMat.get(p + i,p + j) * alg.normF(tempMat);    }  }  pX.assign(par.toMatrix1D());  return lambda.get(0) * betaNorms + lambda.get(1) * thetaNorms + lambda.get(2) * phiNorms;}  }
class C{  @Override public void logWarning(String message,Throwable t){  super.logWarning(message,t);  errorString=message;  hasError=true;  handleExecutionResult(ERROR_RESULT);}  }
class C{  @Override public int hashCode(){  return fullyQualifiedName.hashCode();}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  private synchronized void cancelRequest(){  if (activeRequest != null) {    try {      activeRequest.cancel();      activeRequest=null;    } catch (    SQLException e) {      throw DbException.convert(e);    }  }}  }
class C{  public void mousePressed(MouseEvent e){  VisualizationViewer<?,?> vv=(VisualizationViewer<?,?>)e.getSource();  MutableTransformer vt=vv.getRenderContext().getMultiLayerTransformer().getTransformer(Layer.VIEW);  if (vt instanceof LensTransformer) {    vt=((LensTransformer)vt).getDelegate();  }  Point2D p=vt.inverseTransform(e.getPoint());  boolean accepted=checkModifiers(e);  if (accepted) {    vv.setCursor(Cursor.getPredefinedCursor(Cursor.MOVE_CURSOR));    testViewCenter(vv.getRenderContext().getMultiLayerTransformer().getTransformer(Layer.LAYOUT),p);    testViewCenter(vv.getRenderContext().getMultiLayerTransformer().getTransformer(Layer.VIEW),p);    vv.repaint();  }  super.mousePressed(e);}  }
class C{  public boolean isLessThen(Percent Percent){  assertDefined();  BigDecimal thisValue=notNull(this);  BigDecimal parameter=notNull(Percent);  return (thisValue.compareTo(parameter) < 0);}  }
class C{  private static void adjust(AbstractList<Comparable> array,int[] indices,int lower,int upper){  int j, k;  int temp;  j=lower;  k=lower * 2;  while (k <= upper) {    if ((k < upper) && (array.get(indices[k - 1]).compareTo(array.get(indices[k])) < 0)) {      k+=1;    }    if (array.get(indices[j - 1]).compareTo(array.get(indices[k - 1])) < 0) {      temp=indices[j - 1];      indices[j - 1]=indices[k - 1];      indices[k - 1]=temp;    }    j=k;    k*=2;  }}  }
class C{  public boolean isLineWithinLoop(int line){  return modelTools.isLineWithinLoop(line);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof OHLCSeriesCollection)) {    return false;  }  OHLCSeriesCollection that=(OHLCSeriesCollection)obj;  if (!this.xPosition.equals(that.xPosition)) {    return false;  }  return ObjectUtilities.equal(this.data,that.data);}  }
class C{  public Boolean isMutualChapInherited(){  return mutualChapInherited;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:12.756 -0400",hash_original_method="CE3822F666A61014064AFF57BDAE9612",hash_generated_method="0D6727FBA02414B3EEF65BB9705ACCBF") synchronized void receive(char[] chars,int offset,int count) throws IOException {  Arrays.checkOffsetAndCount(chars.length,offset,count);  if (buffer == null) {    throw new IOException("Pipe is closed");  }  if (lastReader != null && !lastReader.isAlive()) {    throw new IOException("Pipe broken");  }  lastWriter=Thread.currentThread();  while (count > 0) {    try {      while (buffer != null && out == in) {        notifyAll();        wait(1000);        if (lastReader != null && !lastReader.isAlive()) {          throw new IOException("Pipe broken");        }      }    } catch (    InterruptedException e) {      throw new InterruptedIOException();    }    if (buffer == null) {      throw new IOException("Pipe is closed");    }    if (in == -1) {      in=0;    }    if (in >= out) {      int length=buffer.length - in;      if (count < length) {        length=count;      }      System.arraycopy(chars,offset,buffer,in,length);      offset+=length;      count-=length;      in+=length;      if (in == buffer.length) {        in=0;      }    }    if (count > 0 && in != out) {      int length=out - in;      if (count < length) {        length=count;      }      System.arraycopy(chars,offset,buffer,in,length);      offset+=length;      count-=length;      in+=length;    }  }}  }
class C{  private static void insertTransactionEntry(FinanceService service,String feedUrl,TransactionEntry entry) throws IOException, MalformedURLException, ServiceException {  System.out.println("Inserting Entry at location: " + feedUrl);  TransactionEntry insertedEntry=service.insert(new URL(feedUrl),entry);  printTransactionEntry(insertedEntry);}  }
class C{  public String numExecutionSlotsTipText(){  return "The number of execution slots (threads) to use. " + "Set equal to the number of available cpu/cores";}  }
class C{  public MiniSolrCloudCluster(int numServers,String hostContext,File solrXml,SortedMap<ServletHolder,String> extraServlets,SortedMap<Class,String> extraRequestFilters) throws Exception {  testDir=Files.createTempDir();  String zkDir=testDir.getAbsolutePath() + File.separator + "zookeeper/server1/data";  zkServer=new ZkTestServer(zkDir);  zkServer.run();  SolrZkClient zkClient=null;  InputStream is=null;  try {    zkClient=new SolrZkClient(zkServer.getZkHost(),AbstractZkTestCase.TIMEOUT,45000,null);    zkClient.makePath("/solr",false,true);    is=new FileInputStream(solrXml);    zkClient.create("/solr/solr.xml",IOUtils.toByteArray(is),ZooDefs.Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT,true);  }  finally {    IOUtils.closeQuietly(is);    if (zkClient != null)     zkClient.close();  }  System.setProperty("solr.solrxml.location","zookeeper");  System.setProperty("zkHost",zkServer.getZkAddress());  jettys=new LinkedList<JettySolrRunner>();  for (int i=0; i < numServers; ++i) {    startJettySolrRunner(hostContext,extraServlets,extraRequestFilters);  }}  }
class C{  public static int showInternalConfirmDialog(Component parentComponent,Object message){  return showInternalConfirmDialog(parentComponent,message,UIManager.getString("OptionPane.titleText"),YES_NO_CANCEL_OPTION);}  }
class C{  public ActivateSessionResponse ActivateSession(ActivateSessionRequest req) throws ServiceFaultException, ServiceResultException {  return (ActivateSessionResponse)channel.serviceRequest(req);}  }
class C{  protected Iterable addHyphenToDateRange(Iterable value,java.util.List<OffsetPair> offsets){  if (offsets.size() != 2)   return value;  Iterator iterator=value.iterator();  Object date1=iterator.hasNext() ? iterator.next() : null;  Object date2=iterator.hasNext() ? iterator.next() : null;  if (date1 != null && date2 != null) {    return Arrays.asList(date1 + "-",date2);  }  return value;}  }
class C{  public boolean refresh(){  if (DBG)   Log.d(TAG,"refresh() - device: " + mDevice.getAddress());  if (mService == null || mClientIf == 0)   return false;  try {    mService.refreshDevice(mClientIf,mDevice.getAddress());  } catch (  RemoteException e) {    Log.e(TAG,"",e);    return false;  }  return true;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:00.400 -0500",hash_original_method="CBA9C9C2A65EACDAD03B36A06DFF64B0",hash_generated_method="AF17EEB713B0DE34C67B2AAB24E2A77B") protected void _connectAction_() throws IOException {  super._connectAction_();  InputStream input;  TelnetInputStream tmp;  if (FromNetASCIIInputStream.isConversionRequired())   input=new FromNetASCIIInputStream(_input_); else   input=_input_;  tmp=new TelnetInputStream(input,this,readerThread);  if (readerThread) {    tmp._start();  }  __input=new BufferedInputStream(tmp);  __output=new ToNetASCIIOutputStream(new TelnetOutputStream(this));}  }
class C{  public static void parseStyleSheetPIData(String data,HashTable table){  char c;  int i=0;  while (i < data.length()) {    c=data.charAt(i);    if (!XMLUtilities.isXMLSpace(c)) {      break;    }    i++;  }  while (i < data.length()) {    c=data.charAt(i);    int d=c / 32;    int m=c % 32;    if ((NAME_FIRST_CHARACTER[d] & (1 << m)) == 0) {      throw new DOMException(DOMException.INVALID_CHARACTER_ERR,"Wrong name initial:  " + c);    }    StringBuffer ident=new StringBuffer();    ident.append(c);    while (++i < data.length()) {      c=data.charAt(i);      d=c / 32;      m=c % 32;      if ((NAME_CHARACTER[d] & (1 << m)) == 0) {        break;      }      ident.append(c);    }    if (i >= data.length()) {      throw new DOMException(DOMException.SYNTAX_ERR,"Wrong xml-stylesheet data: " + data);    }    while (i < data.length()) {      c=data.charAt(i);      if (!XMLUtilities.isXMLSpace(c)) {        break;      }      i++;    }    if (i >= data.length()) {      throw new DOMException(DOMException.SYNTAX_ERR,"Wrong xml-stylesheet data: " + data);    }    if (data.charAt(i) != '=') {      throw new DOMException(DOMException.SYNTAX_ERR,"Wrong xml-stylesheet data: " + data);    }    i++;    while (i < data.length()) {      c=data.charAt(i);      if (!XMLUtilities.isXMLSpace(c)) {        break;      }      i++;    }    if (i >= data.length()) {      throw new DOMException(DOMException.SYNTAX_ERR,"Wrong xml-stylesheet data: " + data);    }    c=data.charAt(i);    i++;    StringBuffer value=new StringBuffer();    if (c == '\'') {      while (i < data.length()) {        c=data.charAt(i);        if (c == '\'') {          break;        }        value.append(c);        i++;      }      if (i >= data.length()) {        throw new DOMException(DOMException.SYNTAX_ERR,"Wrong xml-stylesheet data: " + data);      }    } else     if (c == '"') {      while (i < data.length()) {        c=data.charAt(i);        if (c == '"') {          break;        }        value.append(c);        i++;      }      if (i >= data.length()) {        throw new DOMException(DOMException.SYNTAX_ERR,"Wrong xml-stylesheet data: " + data);      }    } else {      throw new DOMException(DOMException.SYNTAX_ERR,"Wrong xml-stylesheet data: " + data);    }    table.put(ident.toString().intern(),value.toString());    i++;    while (i < data.length()) {      c=data.charAt(i);      if (!XMLUtilities.isXMLSpace(c)) {        break;      }      i++;    }  }}  }
class C{  public ClassMetaobject(String[] params){  try {    javaClass=getClassObject(params[0]);  } catch (  ClassNotFoundException e) {    throw new RuntimeException("not found: " + params[0] + ", useContextClassLoader: "+ Boolean.toString(useContextClassLoader),e);  }  constructors=javaClass.getConstructors();  methods=null;}  }
class C{  public boolean isOneToOnePrimaryKeyRelationship(){  return !m_primaryKeyJoinColumns.isEmpty();}  }
class C{  public static Location parse(CassandraProtos.Location location){  return create(location.getRack(),location.getDataCenter());}  }
class C{  public void drawBackground(Canvas canvas,int backgroundMode){  canvas.drawColor(mBackgroundColor);  if (backgroundMode != BACKGROUND_STYLE_BLANK) {    Paint linePaint=new Paint();    linePaint.setColor(Color.argb(50,0,0,0));    linePaint.setStyle(mStyle);    linePaint.setStrokeJoin(Paint.Join.ROUND);    linePaint.setStrokeWidth(mSize - 2f);switch (backgroundMode) {case BACKGROUND_STYLE_GRAPH_PAPER:      drawGraphPaperBackground(canvas,linePaint);    break;case BACKGROUND_STYLE_NOTEBOOK_PAPER:  drawNotebookPaperBackground(canvas,linePaint);default :break;}}mRedrawBackground=false;}  }
class C{  public FModel loadModel(String filename){  try {    URI uri=FileHelper.createURI(filename);    URI fileURI=ModelPersistenceHandler.normalizeURI(uri);    if (fileURI.segmentCount() > 1) {      return loadModel(fileURI.lastSegment(),fileURI.trimSegments(1).toString() + "/");    } else {      return loadModel(filename,"");    }  } catch (  Exception ex) {    System.err.println("Error: " + ex.getMessage());    return null;  }}  }
class C{  public boolean hasValue(){  return super.hasTextValue();}  }
class C{  public static void ccDrawQuadBezier(GL10 gl,CGPoint origin,CGPoint control,CGPoint destination,int segments){  FloatBuffer vertices=getVertices(2 * (segments + 1));  float t=0.0f;  for (int i=0; i < segments; i++) {    float x=(float)Math.pow(1 - t,2) * origin.x + 2.0f * (1 - t) * t* control.x + t * t * destination.x;    float y=(float)Math.pow(1 - t,2) * origin.y + 2.0f * (1 - t) * t* control.y + t * t * destination.y;    vertices.put(x);    vertices.put(y);    t+=1.0f / segments;  }  vertices.put(destination.x);  vertices.put(destination.y);  vertices.position(0);  gl.glDisable(GL10.GL_TEXTURE_2D);  gl.glDisableClientState(GL10.GL_TEXTURE_COORD_ARRAY);  gl.glDisableClientState(GL10.GL_COLOR_ARRAY);  gl.glVertexPointer(2,GL_FLOAT,0,vertices);  gl.glDrawArrays(GL_LINE_STRIP,0,segments + 1);  gl.glEnableClientState(GL10.GL_COLOR_ARRAY);  gl.glEnableClientState(GL10.GL_TEXTURE_COORD_ARRAY);  gl.glEnable(GL10.GL_TEXTURE_2D);}  }
class C{  public String toString(){  StringBuffer buf=new StringBuffer();  String indent="    ";  buf.append(indent + "Glyf Table: (" + glyphs.length+ " glyphs)\n");  buf.append(indent + "  Glyf 0: " + getGlyph(0));  return buf.toString();}  }
class C{  protected final boolean shouldClearRectBeforePaint(){  return true;}  }
class C{  public static String createClassDeclarationText(String className,Attribute[] attributes){  String class_decl_f="class %s {%s}";  String attribute_f="%s=%s;";  String attributeText="";  if (attributes != null) {    for (    Attribute attribute : attributes) {      attributeText+=String.format(attribute_f,attribute.name,attribute.value);    }  }  return String.format(class_decl_f,className,attributeText);}  }
class C{  public void fastRestore(String database,boolean isSchema){  getBot().log(this,"Restoring",Bot.FINE,this,database);}  }
class C{  public void registerPrefixForURI(String prefix,String uri){  if ((uri != null) && (prefix != null)) {    if (noNamespaceMappings) {      nsStack.push();      noNamespaceMappings=false;    }    String activePrefix=nsStack.getPrefix(uri,true);    if (activePrefix == null || !activePrefix.equals(prefix)) {      nsStack.add(uri,prefix);    }  }}  }
class C{  public static boolean isEmpty(Object o){  return ObjectType.isEmpty(o);}  }
class C{  public static void sort(float[] array){  sort(0,array.length,array);}  }
class C{  public double distanceSq(final MutableInt3D p){  final double dx=(double)this.x - p.x;  final double dy=(double)this.y - p.y;  final double dz=(double)this.z - p.z;  return (dx * dx + dy * dy + dz * dz);}  }
class C{  public MethodInvocationTree buildMethodInvocation(ExpressionTree methodExpr,ExpressionTree argExpr){  return maker.App((JCTree.JCExpression)methodExpr,com.sun.tools.javac.util.List.of((JCTree.JCExpression)argExpr));}  }
class C{  public static boolean isImage(String mimeType){  if (mimeType != null) {    if (mimeType.startsWith("image/"))     return true; else     return false;  } else   return false;}  }
class C{  public boolean isStyleLoaded(){  return styleSheet != null;}  }
class C{  public static Vec4 computeTriangleNormal(Vec4 a,Vec4 b,Vec4 c){  if (a == null || b == null || c == null) {    String message=Logging.getMessage("nullValue.Vec4IsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  double x=((b.y - a.y) * (c.z - a.z)) - ((b.z - a.z) * (c.y - a.y));  double y=((b.z - a.z) * (c.x - a.x)) - ((b.x - a.x) * (c.z - a.z));  double z=((b.x - a.x) * (c.y - a.y)) - ((b.y - a.y) * (c.x - a.x));  double length=(x * x) + (y * y) + (z * z);  if (length == 0d)   return new Vec4(x,y,z);  length=Math.sqrt(length);  return new Vec4(x / length,y / length,z / length);}  }
class C{  public static int rotateRight(int i,int distance){  return (i >>> distance) | (i << -distance);}  }
class C{  @Override public Tag decorate(Tag tag){  Tag noJsfAttributes=defaultTagDecorator.decorate(tag);  if (noJsfAttributes != null) {    tag=noJsfAttributes;  }  Tag t=null;  for (int i=0; i < this.decorators.length; i++) {    t=this.decorators[i].decorate(tag);    if (t != null) {      return t;    }  }  return tag;}  }
class C{  protected boolean hasOutstandingChanges(){  return (fieldValue.hasChanged() || fieldName.hasChanged() || fieldContact.hasChanged()|| fieldEMail.hasChanged()|| fieldPostal.hasChanged()|| fieldPhone.hasChanged()|| checkAND.hasChanged()|| checkCustomer.hasChanged());}  }
class C{  public int size(){  return count;}  }
class C{  private void updateDownloadedFiles(SQLiteDatabase db,String newAccountName,String oldAccountName){  String whereClause=ProviderTableMeta.FILE_ACCOUNT_OWNER + "=? AND " + ProviderTableMeta.FILE_STORAGE_PATH+ " IS NOT NULL";  Cursor c=db.query(ProviderTableMeta.FILE_TABLE_NAME,null,whereClause,new String[]{newAccountName},null,null,null);  try {    if (c.moveToFirst()) {      String oldAccountPath=FileStorageUtils.getSavePath(oldAccountName);      String newAccountPath=FileStorageUtils.getSavePath(newAccountName);      File oldAccountFolder=new File(oldAccountPath);      File newAccountFolder=new File(newAccountPath);      oldAccountFolder.renameTo(newAccountFolder);      do {        String oldPath=c.getString(c.getColumnIndex(ProviderTableMeta.FILE_STORAGE_PATH));        OCFile file=new OCFile(c.getString(c.getColumnIndex(ProviderTableMeta.FILE_PATH)));        String newPath=FileStorageUtils.getDefaultSavePathFor(newAccountName,file);        ContentValues cv=new ContentValues();        cv.put(ProviderTableMeta.FILE_STORAGE_PATH,newPath);        db.update(ProviderTableMeta.FILE_TABLE_NAME,cv,ProviderTableMeta.FILE_STORAGE_PATH + "=?",new String[]{oldPath});        Log_OC.v("SQL","Updated path of downloaded file: old file name == " + oldPath + ", new file name == "+ newPath);      } while (c.moveToNext());    }  }  finally {    c.close();  }}  }
class C{  public void prepare(boolean fullHeap){  if (fullHeap) {    if (VM.VERIFY_ASSERTIONS) {      VM.assertions._assert(treadmill.fromSpaceEmpty());    }    markState=(byte)(MARK_BIT - markState);  }  treadmill.flip(fullHeap);  inNurseryGC=!fullHeap;}  }
class C{  public static X509Certificate retrieveAndVerifyCertificateChain(final String signingCertificateChainUrl) throws CertificateException {  try (InputStream in=getAndVerifySigningCertificateChainUrl(signingCertificateChainUrl).openStream()){    CertificateFactory certificateFactory=CertificateFactory.getInstance(Sdk.SIGNATURE_CERTIFICATE_TYPE);    @SuppressWarnings("unchecked") Collection<X509Certificate> certificateChain=(Collection<X509Certificate>)certificateFactory.generateCertificates(in);    X509Certificate signingCertificate=certificateChain.iterator().next();    signingCertificate.checkValidity();    TrustManagerFactory trustManagerFactory=TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());    trustManagerFactory.init((KeyStore)null);    X509TrustManager x509TrustManager=null;    for (    TrustManager trustManager : trustManagerFactory.getTrustManagers()) {      if (trustManager instanceof X509TrustManager) {        x509TrustManager=(X509TrustManager)trustManager;      }    }    if (x509TrustManager == null) {      throw new IllegalStateException("No X509 TrustManager available. Unable to check certificate chain");    } else {      x509TrustManager.checkServerTrusted(certificateChain.toArray(new X509Certificate[certificateChain.size()]),Sdk.SIGNATURE_KEY_TYPE);    }    if (!subjectAlernativeNameListContainsEchoSdkDomainName(signingCertificate.getSubjectAlternativeNames())) {      throw new CertificateException("The provided certificate is not valid for the Echo SDK");    }    return signingCertificate;  } catch (  KeyStoreException|IOException|NoSuchAlgorithmException ex) {    throw new CertificateException("Unable to verify certificate at URL: " + signingCertificateChainUrl,ex);  }}  }
class C{  private void initializeListeners(){  m_node.addListener(m_internalViewNodeListener);  m_node.addGroupListener(m_internalGroupNodeListener);  final Iterator<CTag> it=m_node.getTagsIterator();  while (it.hasNext()) {    it.next().addListener(m_listener);  }}  }
class C{  private static byte[] pbkdf2(char[] password,byte[] salt,int iterations,int bytes) throws NoSuchAlgorithmException, InvalidKeySpecException {  PBEKeySpec spec=new PBEKeySpec(password,salt,iterations,bytes * 8);  SecretKeyFactory skf=SecretKeyFactory.getInstance(PBKDF2_ALGORITHM);  return skf.generateSecret(spec).getEncoded();}  }
class C{  protected FTPWrap _get(FTPConnection conn) throws IOException, ApplicationException {  FTPWrap wrap=null;  if (!conn.hasLoginData()) {    if (StringUtil.isEmpty(conn.getName())) {      throw new ApplicationException("can't connect ftp server, missing connection defintion");    }    wrap=wraps.get(conn.getName());    if (wrap == null) {      throw new ApplicationException("can't connect ftp server, missing connection [" + conn.getName() + "]");    } else     if (!wrap.getClient().isConnected() || wrap.getConnection().getTransferMode() != conn.getTransferMode()) {      wrap.reConnect(conn.getTransferMode());    }    return wrap;  }  String name=conn.hasName() ? conn.getName() : "__noname__";  wrap=wraps.get(name);  if (wrap != null) {    if (conn.loginEquals(wrap.getConnection())) {      return _get(new FTPConnectionImpl(name,null,null,null,conn.getPort(),conn.getTimeout(),conn.getTransferMode(),conn.isPassive(),conn.getProxyServer(),conn.getProxyPort(),conn.getProxyUser(),conn.getProxyPassword(),conn.getFingerprint(),conn.getStopOnError(),conn.secure()));    }    disconnect(wrap.getClient());  }  wrap=new FTPWrap(conn);  wraps.put(name,wrap);  return wrap;}  }
class C{  private void createPackageDefinition(String className){  int i=className.lastIndexOf('.');  if (i != -1) {    String pkgname=className.substring(0,i);    Package pkg=getPackage(pkgname);    if (pkg == null) {      definePackage(pkgname,null,null,null,null,null,null,null);      logger.info("Defined package (3): " + getPackage(pkgname) + ", "+ getPackage(pkgname).hashCode());    }  }}  }
class C{  public void m(String s1,String s2,int i){}  }
class C{  public PropertyChange(final Object oldValue,final Object newValue){  super();  this.oldValue=oldValue;  this.newValue=newValue;}  }
class C{  @After public void tearDown(){  comparator=null;}  }
class C{  public static void putObject_test3() throws Exception {  println("Test: multipart resume: putObject(String bucketName, String objectName, String fileName)");  String fileName=createFile(13 * MB);  InputStream is=Files.newInputStream(Paths.get(fileName));  try {    client.putObject(bucketName,fileName,is,20 * 1024 * 1024,null);  } catch (  InsufficientDataException e) {    println("Exception occurred as excepted");  }  is.close();  client.putObject(bucketName,fileName,fileName);  Files.delete(Paths.get(fileName));  client.removeObject(bucketName,fileName);}  }
class C{  public MyPatronComparator(){}  }
class C{  public void union(RectF r){  union(r.left,r.top,r.right,r.bottom);}  }
class C{  static public int makePosition(int line,int column){  return line << COLUMN_FIELD_BITS | column;}  }
class C{  public static void updateConnectionTooltip(final MqttAsyncConnection connection,final Tooltip tooltip){  final StringBuffer sb=new StringBuffer();  sb.append("Status: " + connection.getConnectionStatus().toString().toLowerCase());  if (ConnectionStatus.CONNECTED.equals(connection.getConnectionStatus())) {    sb.append(" (" + connection.getLastSuccessfulyConnectionAttempt() + ")");    sb.append(System.getProperty("line.separator"));    final String sslStatus=connection.getProperties().getSSL() != null ? "on" : "off";    final String userAuthStatus=connection.getProperties().getUserCredentials() != null ? "on" : "off";    sb.append("Security: TLS/SSL is " + sslStatus + "; user authentication is "+ userAuthStatus);  }  if (connection.getConnectionAttempts() > 1) {    sb.append(System.getProperty("line.separator"));    sb.append("Connection attempts: " + connection.getConnectionAttempts());  }  if (connection.getDisconnectionReason() != null && !connection.getDisconnectionReason().isEmpty()) {    sb.append(System.getProperty("line.separator"));    sb.append("Last error: " + connection.getDisconnectionReason().toLowerCase());  }  tooltip.setText(sb.toString());}  }
class C{  public void testDoCheckWithEmptyTextAndEmptyResultOverridenByConstructor(){  LOGGER.debug("doCheckWithEmptyTextAndEmptyResultOverridenByConstructor");  elements.add(element);  mockTestSolutionHandler.addTestSolution(TestSolution.NEED_MORE_INFO);  expectLastCall().once();  expect(mockTextElementBuilder.buildTextFromElement(element)).andReturn("");  mockProcessRemarkService.addSourceCodeRemarkOnElement(TestSolution.NEED_MORE_INFO,element,TEXT_EMPTY_MSG);  expectLastCall().once();  TextEmptinessChecker instance=new TextEmptinessChecker(mockTextElementBuilder,new ImmutablePair(TestSolution.NEED_MORE_INFO,TEXT_EMPTY_MSG),new ImmutablePair(TestSolution.PASSED,TEXT_NOT_EMPTY_MSG));  instance.setProcessRemarkService(mockProcessRemarkService);  replay(mockTextElementBuilder,mockSSPHandler,mockTestSolutionHandler,mockProcessRemarkService);  instance.doCheck(mockSSPHandler,elements,mockTestSolutionHandler);  verify(mockTextElementBuilder,mockSSPHandler,mockTestSolutionHandler,mockProcessRemarkService);}  }
class C{  public MColumn(MTable parent,String columnName,int length,int AD_Reference,String defaultValue){  this(parent.getCtx(),0,parent.get_TrxName());  setClientOrg(parent);  setAD_Table_ID(parent.getAD_Table_ID());  setEntityType(parent.getEntityType());  setColumnName(columnName);  M_Element AD_Element=M_Element.get(getCtx(),columnName);  if (AD_Element != null) {    setAD_Element_ID(AD_Element.get_ID());  }  setName(columnName);  setIsActive(true);  setVersion(Env.ONE);  setIsMandatory(true);  setIsAllowLogging(true);  setFieldLength(length);  setAD_Reference_ID(AD_Reference);  setDefaultValue(defaultValue);  setUpdateable(false);}  }
class C{  public void dispose(){  if (saved != null) {    putCachedRaster(model,saved);    saved=null;  }}  }
class C{  public IndicesAliasesRequestBuilder removeAlias(String index,String alias){  request.removeAlias(index,alias);  return this;}  }
class C{  public static StringBuilder computeMessageBuffer(HttpResponse response){  StringBuilder builder=new StringBuilder();  int statusCode=response.getStatusCode();  if (statusCode != 0) {    builder.append(statusCode);  }  String statusMessage=response.getStatusMessage();  if (statusMessage != null) {    if (statusCode != 0) {      builder.append(' ');    }    builder.append(statusMessage);  }  return builder;}  }
class C{  public static List<String> splitSmart(String s,String separator,boolean decode){  ArrayList<String> lst=new ArrayList<>(2);  StringBuilder sb=new StringBuilder();  int pos=0, end=s.length();  while (pos < end) {    if (s.startsWith(separator,pos)) {      if (sb.length() > 0) {        lst.add(sb.toString());        sb=new StringBuilder();      }      pos+=separator.length();      continue;    }    char ch=s.charAt(pos++);    if (ch == '\\') {      if (!decode)       sb.append(ch);      if (pos >= end)       break;      ch=s.charAt(pos++);      if (decode) {switch (ch) {case 'n':          ch='\n';        break;case 't':      ch='\t';    break;case 'r':  ch='\r';break;case 'b':ch='\b';break;case 'f':ch='\f';break;}}}sb.append(ch);}if (sb.length() > 0) {lst.add(sb.toString());}return lst;}  }
class C{  public static PhysicalLocation translate(PhysicalLocation loc,PhysicalLocation ref){  if (loc == null || ref == null) {    return (loc);  }  PhysicalLocation rv=new PhysicalLocation();  rv.setX(loc.getX() - ref.getX());  rv.setY(loc.getY() - ref.getY());  rv.setZ(loc.getZ() - ref.getZ());  return (rv);}  }
class C{  int[] calculateRelative(int[] absolute){  int[] res=new int[absolute.length];  res[0]=absolute[0];  for (int i=1; i < res.length; i++) {    res[i]=absolute[i] - absolute[i - 1];  }  return res;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node testEmployee;  Node textNode;  String prefix;  doc=(Document)load("staffNS",false);  elementList=doc.getElementsByTagName("emp:employeeId");  testEmployee=elementList.item(0);  assertNotNull("empEmployeeNotNull",testEmployee);  textNode=testEmployee.getFirstChild();  prefix=textNode.getPrefix();  assertNull("textNodePrefix",prefix);}  }
class C{  public void addRS(RollingStock rs){  setNumberRS(getNumberRS() + 1);  if (rs.getClass() == Car.class) {    setNumberCars(getNumberCars() + 1);  } else   if (rs.getClass() == Engine.class) {    setNumberEngines(getNumberEngines() + 1);  }  setUsedLength(getUsedLength() + rs.getTotalLength());}  }
class C{  public ClipRable createClip(BridgeContext ctx,Element clipElement,Element clipedElement,GraphicsNode clipedNode){  String s;  AffineTransform Tx;  s=clipElement.getAttributeNS(null,SVG_TRANSFORM_ATTRIBUTE);  if (s.length() != 0) {    Tx=SVGUtilities.convertTransform(clipElement,SVG_TRANSFORM_ATTRIBUTE,s,ctx);  } else {    Tx=new AffineTransform();  }  short coordSystemType;  s=clipElement.getAttributeNS(null,SVG_CLIP_PATH_UNITS_ATTRIBUTE);  if (s.length() == 0) {    coordSystemType=SVGUtilities.USER_SPACE_ON_USE;  } else {    coordSystemType=SVGUtilities.parseCoordinateSystem(clipElement,SVG_CLIP_PATH_UNITS_ATTRIBUTE,s,ctx);  }  if (coordSystemType == SVGUtilities.OBJECT_BOUNDING_BOX) {    Tx=SVGUtilities.toObjectBBox(Tx,clipedNode);  }  Area clipPath=new Area();  GVTBuilder builder=ctx.getGVTBuilder();  boolean hasChildren=false;  for (Node node=clipElement.getFirstChild(); node != null; node=node.getNextSibling()) {    if (node.getNodeType() != Node.ELEMENT_NODE) {      continue;    }    Element child=(Element)node;    GraphicsNode clipNode=builder.build(ctx,child);    if (clipNode == null) {      continue;    }    hasChildren=true;    if (child instanceof SVGOMUseElement) {      Node shadowChild=((SVGOMUseElement)child).getCSSFirstChild();      if (shadowChild != null && shadowChild.getNodeType() == Node.ELEMENT_NODE) {        child=(Element)shadowChild;      }    }    int wr=CSSUtilities.convertClipRule(child);    GeneralPath path=new GeneralPath(clipNode.getOutline());    path.setWindingRule(wr);    AffineTransform at=clipNode.getTransform();    if (at == null)     at=Tx; else     at.preConcatenate(Tx);    Shape outline=at.createTransformedShape(path);    ShapeNode outlineNode=new ShapeNode();    outlineNode.setShape(outline);    ClipRable clip=CSSUtilities.convertClipPath(child,outlineNode,ctx);    if (clip != null) {      Area area=new Area(outline);      area.subtract(new Area(clip.getClipPath()));      outline=area;    }    clipPath.add(new Area(outline));  }  if (!hasChildren) {    return null;  }  ShapeNode clipPathNode=new ShapeNode();  clipPathNode.setShape(clipPath);  ClipRable clipElementClipPath=CSSUtilities.convertClipPath(clipElement,clipPathNode,ctx);  if (clipElementClipPath != null) {    clipPath.subtract(new Area(clipElementClipPath.getClipPath()));  }  Filter filter=clipedNode.getFilter();  if (filter == null) {    filter=clipedNode.getGraphicsNodeRable(true);  }  boolean useAA=false;  RenderingHints hints;  hints=CSSUtilities.convertShapeRendering(clipElement,null);  if (hints != null) {    Object o=hints.get(RenderingHints.KEY_ANTIALIASING);    useAA=(o == RenderingHints.VALUE_ANTIALIAS_ON);  }  return new ClipRable8Bit(filter,clipPath,useAA);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  UIManager uiMgr=stack.getUIMgr();  if (uiMgr == null)   return new Float[]{new Float(0),new Float(0),new Float(0),new Float(0)}; else {    return new Float[]{new Float(uiMgr.getOverscanOffsetY() * 1.0f / (uiMgr.getRootPanel().getHeight() * uiMgr.getOverscanScaleHeight())),new Float(uiMgr.getOverscanOffsetX() * 1.0f / (uiMgr.getRootPanel().getWidth() * uiMgr.getOverscanScaleWidth())),new Float((1.0f - (uiMgr.getOverscanOffsetY() * 1.0f / uiMgr.getRootPanel().getHeight()) - uiMgr.getOverscanScaleHeight()) / uiMgr.getOverscanScaleHeight()),new Float((1.0f - (uiMgr.getOverscanOffsetX() * 1.0f / uiMgr.getRootPanel().getWidth()) - uiMgr.getOverscanScaleWidth()) / uiMgr.getOverscanScaleWidth())};  }}  }
class C{  public Vector3 scale(float scale){  x*=scale;  y*=scale;  z*=scale;  return this;}  }
class C{  public void test_addEdges_correctRejection_002(){  final int CAPACITY=5;  TxDag dag=new TxDag(CAPACITY);  Object tx1="tx1";  Object tx2="tx2";  try {    dag.addEdges(null,new Object[]{tx1});    fail("Expecting exception: " + IllegalArgumentException.class);  } catch (  IllegalArgumentException ex) {    log.info("Expected exception: " + ex);  }  try {    dag.addEdges(tx1,null);    fail("Expecting exception: " + IllegalArgumentException.class);  } catch (  IllegalArgumentException ex) {    log.info("Expected exception: " + ex);  }  try {    dag.addEdges(tx1,new Object[]{tx1,tx2,tx1});    fail("Expecting exception: " + IllegalArgumentException.class);  } catch (  IllegalArgumentException ex) {    log.info("Expected exception: " + ex);  }}  }
class C{  public synchronized boolean imageUpdate(Image img,int infoFlags,int x,int y,int width,int height){  boolean gotInfo=false;  if ((infoFlags & (WIDTH | HEIGHT)) != 0) {    gotInfo=true;    notify();  }  return gotInfo;}  }
class C{  private boolean updateOutBlock(AbstractBlockBase<?> block){  BitSet union=new BitSet(stackSlotMap.length);  for (  AbstractBlockBase<?> succ : block.getSuccessors()) {    union.or(liveInMap.get(succ));  }  BitSet outSet=liveOutMap.get(block);  if (outSet == null || !union.equals(outSet)) {    liveOutMap.put(block,union);    return true;  }  return false;}  }
class C{  public static void cancelAllSuperCardToasts(){  ManagerSuperCardToast.getInstance().cancelAllSuperActivityToasts();}  }
class C{  boolean isLiteral(Map attributes){  return ((attributes == null) || attributes.size() == 0);}  }
class C{  CstBaseMethodRef(CstType definingClass,CstNat nat){  super(definingClass,nat);  String descriptor=getNat().getDescriptor().getString();  this.prototype=Prototype.intern(descriptor);  this.instancePrototype=null;}  }
class C{  protected static Boolean isLockGrantor_DTLS(){  TXLockService dtls=TXLockService.getDTLS();  if (true) {    DLockService service=DLockService.getInternalServiceNamed(((TXLockServiceImpl)dtls).getInternalDistributedLockService().getName());    assertNotNull(service);    assertEquals("DTLS and DLock should both report same isLockGrantor result",true,dtls.isLockGrantor() == service.isLockGrantor());  }  Boolean result=Boolean.valueOf(dtls.isLockGrantor());  logInfo("isLockGrantor_DTLS: " + result);  return result;}  }
class C{  protected void prepareForDragging(){  splitPaneUI.startDragging();}  }
class C{  private int atFieldRead(CtField f,boolean isStatic) throws CompileError {  FieldInfo finfo=f.getFieldInfo2();  boolean is2byte=setFieldType(finfo);  AccessorMaker maker=isAccessibleField(f,finfo);  if (maker != null) {    MethodInfo minfo=maker.getFieldGetter(finfo,isStatic);    bytecode.addInvokestatic(f.getDeclaringClass(),minfo.getName(),minfo.getDescriptor());    return 0;  } else {    int fi=addFieldrefInfo(f,finfo);    if (isStatic) {      bytecode.add(GETSTATIC);      bytecode.growStack(is2byte ? 2 : 1);    } else {      bytecode.add(GETFIELD);      bytecode.growStack(is2byte ? 1 : 0);    }    bytecode.addIndex(fi);    return fi;  }}  }
class C{  public void test_indexOfSubListLjava_util_ListLjava_util_List(){  List list=new ArrayList();  try {    Collections.indexOfSubList(null,list);    fail("Expected NullPointerException for null list first parameter");  } catch (  NullPointerException e) {  }  try {    Collections.indexOfSubList(list,null);    fail("Expected NullPointerException for null list second parameter");  } catch (  NullPointerException e) {  }  String string1="A-B-C-D-E-S-JF-SUB-G-H-I-J-SUBL-K-L-LIST-M-N--S-S-O-SUBLIS-P-Q-R-SUBLIST-S-T-U-V-W-X-Y-Z";  testwithCharList(1,string1,"B",true);  testwithCharList(2,string1,"LIST",true);  testwithCharList(3,string1,"SUBLIST",true);  testwithCharList(4,string1,"NONE",true);  testwithCharList(5,string1,"END",true);  testwithCharList(6,"","",true);  testwithCharList(7,"LIST","",true);  testwithCharList(8,"","SUBLIST",true);}  }
class C{  @Override public int hashCode(){  if (hashCode == 0) {    if (bytes != null && bytes.length != 0) {      int len=bytes.length;      int inc=((len - 32) / 32) + 1;      for (int i=0; i < len; ) {        hashCode=(hashCode * 37) + bytes[i];        i+=inc;      }    }    if (hashCode == 0) {      hashCode=1;    }  }  return hashCode;}  }
class C{  public LinearTarget(String sidc){  super(sidc);}  }
class C{  public boolean contains(double x,double y){  if (shouldRenderFill()) {    return super.contains(x,y);  } else {    return (distance(x,y) == 0);  }}  }
class C{  @Override public void applyConfig(final ConfigSettings config){  Object o=config.getConfigParameter(ConfigurationKeys.WIKIPEDIA_ENCODING);  if (o != null) {    encodingField.setText((String)o);  } else {    encodingField.setText("");  }  o=config.getConfigParameter(ConfigurationKeys.MODE_SURROGATES);  if (o != null) {    controller.setSurrogates((SurrogateModes)o);  } else {    controller.setSurrogates(SurrogateModes.DISCARD_REVISION);  }}  }
class C{  public DateTimeFormatter withChronology(Chronology chrono){  if (iChrono == chrono) {    return this;  }  return new DateTimeFormatter(iPrinter,iParser,iLocale,iOffsetParsed,chrono,iZone,iPivotYear,iDefaultYear);}  }
class C{  public static synchronized AnnotatedSequencesReader createDefaultSequencesReader(final File dir) throws IOException {  return createDefaultSequencesReader(dir,LongRange.NONE);}  }
class C{  @Override public void clearBatch() throws SQLException {  try {    debugCodeCall("clearBatch");    checkClosed();    batchParameters=null;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  JdkMarshallerInputStreamWrapper(InputStream in){  assert in != null;  this.in=in;}  }
class C{  private static String urlencode(String str){  try {    return URLEncoder.encode(str,"UTF-8");  } catch (  UnsupportedEncodingException e) {    throw new RuntimeException(e);  }}  }
class C{  protected void clearCoRoutine(SAXException ex){  if (null != ex)   m_transformer.setExceptionThrown(ex);  if (m_dtm instanceof SAX2DTM) {    if (DEBUG)     System.err.println("In clearCoRoutine...");    try {      SAX2DTM sax2dtm=((SAX2DTM)m_dtm);      if (null != m_contentHandler && m_contentHandler instanceof IncrementalSAXSource_Filter) {        IncrementalSAXSource_Filter sp=(IncrementalSAXSource_Filter)m_contentHandler;        sp.deliverMoreNodes(false);      }      sax2dtm.clearCoRoutine(true);      m_contentHandler=null;      m_dtdHandler=null;      m_entityResolver=null;      m_errorHandler=null;      m_lexicalHandler=null;    } catch (    Throwable throwable) {      throwable.printStackTrace();    }    if (DEBUG)     System.err.println("...exiting clearCoRoutine");  }}  }
class C{  private void doDeleteNamespace(final HttpServletRequest req,final HttpServletResponse resp) throws IOException {  final String namespace=getNamespace(req);  try {    submitApiTask(new RestApiDestroyKBTask(req,resp,namespace)).get();  } catch (  Throwable e) {    launderThrowable(e,resp,"DELETE NAMESPACE: namespace=" + namespace);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:03.505 -0400",hash_original_method="1E57D02199A66E6ABD30D58D7EA98A70",hash_generated_method="1B35907AE3AFDCCD65E323B29EDD415E") public boolean contains(long prefix_hash){  if (prefix_hash == 0) {    return false;  }  int idx=-1 * Arrays.binarySearch(hashes_idx,prefix_hash) - 1;  if (idx == cache_size) {    return false;  } else {    return (hashes_idx[idx] & PREFIX_HASH_MASK) == prefix_hash;  }}  }
class C{  public ServiceParameterException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public void pushSAXLocator(SourceLocator location){  m_saxLocations.push(location);}  }
class C{  public void warning(TransformerException exception) throws TransformerException {  PrintWriter pw=getErrorWriter();  printLocation(pw,exception);  pw.println(exception.getMessage());}  }
class C{  public Element store(Object o){  ConfigureManager cm=InstanceManager.getNullableDefault(jmri.ConfigureManager.class);  if (cm != null) {    cm.registerPref(InstanceManager.getDefault(ManagerDefaultSelector.class));  }  return null;}  }
class C{  private List<URL> parseClipPaths(final String pathName){  String resourcePath=SoundProperties.getInstance(resourceLoader).getProperty(pathName);  if (resourcePath == null) {    resourcePath=SoundProperties.getInstance(resourceLoader).getDefaultEraFolder() + "/" + pathName;  }  resourcePath=resourcePath.replace('\\','/');  final List<URL> availableSounds=new ArrayList<>();  if ("NONE".equals(resourcePath)) {    sounds.put(pathName,availableSounds);    return availableSounds;  }  for (  final String path : resourcePath.split(";")) {    availableSounds.addAll(findClipFiles(ASSETS_SOUNDS_FOLDER + "/" + path));  }  if (availableSounds.isEmpty()) {    final String genericPath=SoundProperties.GENERIC_FOLDER + "/" + pathName;    availableSounds.addAll(findClipFiles(ASSETS_SOUNDS_FOLDER + "/" + genericPath));  }  return availableSounds;}  }
class C{  private void activeRecyclerView(List myMaps){  RecyclerView.LayoutManager layoutManager;  mapsRV=(RecyclerView)findViewById(R.id.my_maps_download_recycler_view);  DefaultItemAnimator animator=new DefaultItemAnimator();  animator.setAddDuration(600);  animator.setRemoveDuration(600);  mapsRV.setItemAnimator(animator);  mapsRV.setHasFixedSize(true);  layoutManager=new LinearLayoutManager(this);  mapsRV.setLayoutManager(layoutManager);  myDownloadAdapter=new MyDownloadAdapter(myMaps,this);  mapsRV.setAdapter(myDownloadAdapter);}  }
class C{  public boolean isPersonal(){  return this.is_personal;}  }
class C{  public XObject(Object obj){  setObject(obj);}  }
class C{  public IncomingMessageEnvelope(SystemStreamPartition systemStreamPartition,String offset,Object key,Object message){  this(systemStreamPartition,offset,key,message,0);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.N4_TYPE_DECLARATION__ANNOTATION_LIST:    setAnnotationList((AnnotationList)newValue);  return;case N4JSPackage.N4_TYPE_DECLARATION__DECLARED_MODIFIERS:getDeclaredModifiers().clear();getDeclaredModifiers().addAll((Collection<? extends N4Modifier>)newValue);return;case N4JSPackage.N4_TYPE_DECLARATION__NAME:setName((String)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public void hide(){  LayoutParams lp=(LayoutParams)mContentView.getLayoutParams();  lp.height=0;  mContentView.setLayoutParams(lp);}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  int whereNode=getArg0AsNode(xctxt);  String fileLocation=null;  if (DTM.NULL != whereNode) {    DTM dtm=xctxt.getDTM(whereNode);    if (DTM.DOCUMENT_FRAGMENT_NODE == dtm.getNodeType(whereNode)) {      whereNode=dtm.getFirstChild(whereNode);    }    if (DTM.NULL != whereNode) {      fileLocation=dtm.getDocumentBaseURI();    }  }  return new XString((null != fileLocation) ? fileLocation : "");}  }
class C{  final public static LatLonPoint sphericalBetween(double phi1,double lambda0,double c,double Az){  double cosphi1=Math.cos(phi1);  double sinphi1=Math.sin(phi1);  double cosAz=Math.cos(Az);  double sinAz=Math.sin(Az);  double sinc=Math.sin(c);  double cosc=Math.cos(c);  return new LatLonPoint.Double(Math.asin(sinphi1 * cosc + cosphi1 * sinc * cosAz),Math.atan2(sinc * sinAz,cosphi1 * cosc - sinphi1 * sinc * cosAz) + lambda0,true);}  }
class C{  void addChildDependency(View childView,ViewChaseChoreography choreography){  if (childChoreography.containsKey(childView)) {    childChoreography.get(childView).addMyChoreography(choreography);  } else {    ChoreographyChain childChain=new ChoreographyChain();    childChain.addMyChoreography(choreography);    childChoreography.put(childView,childChain);  }}  }
class C{  public static void writeln(char[] ca,boolean flush){  write(ca);  writelnWithFlush(flush);}  }
class C{  public OperationCanceledException(){  super();}  }
class C{  public static Map<String,String> toMap(Properties properties){  Map<String,String> result=new HashMap<String,String>(properties.size());  for (  Map.Entry<Object,Object> parameter : properties.entrySet()) {    String value=null;    if (parameter.getValue() != null) {      value=parameter.getValue().toString();    }    result.put(parameter.getKey().toString(),value);  }  return result;}  }
class C{  public CUnhideAndSelectAction(final ZyGraph graph,final ZyProximityNode<INaviViewNode> node){  super("Unhide and select only");  Preconditions.checkNotNull(graph,"IE00948: Graph argument can't be null");  Preconditions.checkNotNull(node,"IE00949: Node argument can't be null");  m_graph=graph;  m_node=node;}  }
class C{  public void addSuffix(DalvInsn insn){  suffix.add(insn);}  }
class C{  public static void refresh(){  try {    if (musicPlaybackService != null) {      musicPlaybackService.refresh();    }  } catch (  final RemoteException ignored) {  }}  }
class C{  public static int deleteOrphans(EntityManager em){  requireArgument(em != null,"Entity manager cannot be null.");  Query query=em.createNamedQuery("History.cullOrphans");  return query.executeUpdate();}  }
class C{  public T caseTypedElement(TypedElement object){  return null;}  }
class C{  public void started(){  startedUpdater.getAndIncrement(this);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:59.508 -0500",hash_original_method="B927CFA0CEDE41C1E5D84D22AEB0E325",hash_generated_method="C2BEED7A0A6543BD3478EEFCD606EE2E") private void ensureBuckets(long start,long end){  start-=start % bucketDuration;  end+=(bucketDuration - (end % bucketDuration)) % bucketDuration;  for (long now=start; now < end; now+=bucketDuration) {    final int index=Arrays.binarySearch(bucketStart,0,bucketCount,now);    if (index < 0) {      insertBucket(~index,now);    }  }}  }
class C{  private Iterator<ObjectToFragment> newSingleValueIterator(EObject value){  ObjectToFragment objectToFragment=new ObjectToFragment(value,result.toString());  return Iterators.singletonIterator(objectToFragment);}  }
class C{  public static String encodeClass(int c_[]){  return "c_" + (new LabelSet(c_).toString());}  }
class C{  @Override public void onCreate(){  mDataFile=new File(getFilesDir(),HugeBackupActivity.DATA_FILE_NAME);}  }
class C{  private HashMap<CellIndex,Double> replaceNaNValues(HashMap<CellIndex,Double> in){  HashMap<CellIndex,Double> out=new HashMap<CellIndex,Double>();  double NaN=0d / 0d;  for (  Entry<CellIndex,Double> e : in.entrySet()) {    if (e.getValue() == Math.pow(10,308))     out.put(e.getKey(),NaN); else     out.put(e.getKey(),e.getValue());  }  return out;}  }
class C{  public boolean sendEMail(int AD_User_ID,String subject,String message,File attachment){  Collection<File> attachments=new ArrayList<File>();  if (attachment != null)   attachments.add(attachment);  return sendEMailAttachments(AD_User_ID,subject,message,attachments);}  }
class C{  public static boolean equals(char[] left,char[] right){  if (left.length != right.length) {    return false;  }  boolean result=true;  for (int i=left.length - 1; i >= 0; i--) {    result&=left[i] == right[i];  }  return result;}  }
class C{  protected void addAll(double[] values,int group){  for (  double value : values) {    add(value,group);  }}  }
class C{  public void clearInserted(){  inserted=false;}  }
class C{  public void handle(int problemId,String[] problemArguments,String[] messageArguments,int problemStartPosition,int problemEndPosition,ReferenceContext referenceContext,CompilationResult unitResult){  this.handle(problemId,problemArguments,0,messageArguments,computeSeverity(problemId),problemStartPosition,problemEndPosition,referenceContext,unitResult);}  }
class C{  @Override public void run(){  isRun=true;  while (isRun) {    try {      Socket tcpSocket=serverSocket.accept();      if (tcpSocket != null) {        MultiplexingSocket multiplexingSocket=new MultiplexingSocket(tcpSocket);        component.getParentStream().getParentAgent().getStunStack().addSocket(new IceTcpSocketWrapper(multiplexingSocket));        sockets.add(multiplexingSocket);      }    } catch (    IOException e) {      logger.info("Failed to accept TCP socket " + e);    }  }}  }
class C{  public void loadContents(PreparedStatementWrapper ps){  if (m_interface.getContentType() != null && m_interface.getContentTypes() != null) {    s_logger.log(Level.FINE,"loadContents",new Object[]{getContentTypes(),getObjectType(),m_name,m_parent.getDirection()});    m_contents=new HashMap<Integer,DBObjectDefinition>();    m_interface.loadContents(m_contents,s_parameters,s_logger,s_dbEngine,m_parent,m_name,m_headers,ps);    int counter=m_contents.size();    String logObject=getContentTypes();    if (counter == 1)     logObject=getContentType();    s_logger.log(Level.FINE,"contentsLoaded",new Object[]{Integer.toString(counter),logObject});  }}  }
class C{  public final AC grow(float w,int... indexes){  Float gw=new Float(w);  for (int i=indexes.length - 1; i >= 0; i--) {    int ix=indexes[i];    makeSize(ix);    cList.get(ix).setGrow(gw);  }  return this;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public javax.xml.xpath.XPath newXPath(){  return new org.apache.xpath.jaxp.XPathImpl(xPathVariableResolver,xPathFunctionResolver,featureSecureProcessing);}  }
class C{  protected void appendContentStart(StringBuffer buffer){  buffer.append(contentStart);}  }
class C{  public void modifyAll(View v){  try {    getOps().updateRaceByName("Beorn","Bear");    if (mNecromancerUri != null)     getOps().updateByUri(mNecromancerUri,"Sauron","Maia");    getOps().deleteByName(new String[]{"Thorin","Kili","Fili"});    getOps().deleteByRace(new String[]{"Dragon","Man"});    getOps().displayAll();  } catch (  RemoteException e) {    Log.d(TAG,"exception " + e);  }}  }
class C{  protected void startupModules(Collection<IFloodlightModule> moduleSet) throws FloodlightModuleException {  for (  IFloodlightModule m : moduleSet) {    if (logger.isDebugEnabled()) {      logger.debug("Starting " + m.getClass().getCanonicalName());    }    m.startUp(floodlightModuleContext);  }}  }
class C{  public void init(boolean forEncryption,CipherParameters params){  if (params instanceof KeyParameter) {    WorkingKey=generateWorkingKey(((KeyParameter)params).getKey(),forEncryption);    this.forEncryption=forEncryption;    return;  }  throw new IllegalArgumentException("invalid parameter passed to AES init - " + params.getClass().getName());}  }
class C{  public Node releaseNode(String id){synchronized (retainedNodes) {    return retainedNodes.remove(id);  }}  }
class C{  private List<BranchCoverageTestFitness> computeCoverageGoals(boolean limitToCUT){  long start=System.currentTimeMillis();  List<BranchCoverageTestFitness> goals=new ArrayList<BranchCoverageTestFitness>();  for (  String className : BranchPool.getInstance(TestGenerationContext.getInstance().getClassLoaderForSUT()).knownClasses()) {    if (limitToCUT && !isCUT(className))     continue;    if (!limitToCUT && (!Properties.INSTRUMENT_LIBRARIES && !DependencyAnalysis.isTargetProject(className)))     continue;    final MethodNameMatcher matcher=new MethodNameMatcher();    for (    String method : BranchPool.getInstance(TestGenerationContext.getInstance().getClassLoaderForSUT()).getBranchlessMethods(className)) {      if (matcher.fullyQualifiedMethodMatches(method)) {        goals.add(createRootBranchTestFitness(className,method));      }    }    for (    String methodName : BranchPool.getInstance(TestGenerationContext.getInstance().getClassLoaderForSUT()).knownMethods(className)) {      if (!matcher.methodMatches(methodName)) {        logger.info("Method " + methodName + " does not match criteria. ");        continue;      }      for (      Branch b : BranchPool.getInstance(TestGenerationContext.getInstance().getClassLoaderForSUT()).retrieveBranchesInMethod(className,methodName)) {        if (!b.isInstrumented()) {          goals.add(createBranchCoverageTestFitness(b,true));          goals.add(createBranchCoverageTestFitness(b,false));        }      }    }  }  goalComputationTime=System.currentTimeMillis() - start;  return goals;}  }
class C{  public HasFigureScorer(int maximumScore){  maxScore=maximumScore;}  }
class C{  public QuickAdapter(Context context,int layoutResId){  super(context,layoutResId);}  }
class C{  protected void reportWrongNumberArgs() throws WrongNumberArgsException {  throw new WrongNumberArgsException(XSLMessages.createXPATHMessage("three",null));}  }
class C{  protected static void addStandardRules(ArrayList2<IPredicateRule> rules,String lineCommentId,String blockCommentId,String docLineCommentId,String docBlockCommentId,String stringId){  if (docLineCommentId != null) {    rules.add(new PatternRule("///",null,new Token(docLineCommentId),NO_ESCAPE_CHAR,true,true));  }  if (docBlockCommentId != null) {    rules.add(new PatternRule("/**","*/",new Token(docBlockCommentId),NO_ESCAPE_CHAR,false,true));  }  if (lineCommentId != null) {    rules.add(new PatternRule("//",null,new Token(lineCommentId),NO_ESCAPE_CHAR,true,true));  }  if (blockCommentId != null) {    rules.add(new PatternRule("/*","*/",new Token(blockCommentId),NO_ESCAPE_CHAR,false,true));  }  if (stringId != null) {    rules.add(new PatternRule("\"","\"",new Token(stringId),'\\',false,true));  }}  }
class C{  public static CompletableFuture<ICluster> join(final ClusterConfig config){  return new Cluster(config).join0();}  }
class C{  public Walker(StackMap sm){  info=sm.get();}  }
class C{  private void cancelHeartbeatTimeout(){  if (heartbeatTimer != null) {    LOGGER.debug("{} - Cancelling heartbeat timer",context.getCluster().member().address());    heartbeatTimer.cancel();  }}  }
class C{  public RRset findExactMatch(Name name,int type){  Object types=exactName(name);  if (types == null)   return null;  return oneRRset(types,type);}  }
class C{  public boolean testPoint(final Vec2 p){  return m_shape.testPoint(m_body.m_xf,p);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.611 -0400",hash_original_method="FF710532FC595330817EE7B661608830",hash_generated_method="F90EC418E7B5B3D57E55F7AE559DF9EC") public boolean isMetaphoneEqual(String str1,String str2){  return metaphone(str1).equals(metaphone(str2));}  }
class C{  public void init(String configurationFile) throws Exception {  overridingProperties=new ExtendedProperties(configurationFile);  init();}  }
class C{  public String buildLogoutRequestHtmlForm(URI postLogoutRedirectEndpointURI,IDToken idToken,State state) throws OIDCClientException {  Validate.notNull(postLogoutRedirectEndpointURI,"postLogoutRedirectEndpointURI");  Validate.notNull(idToken,"idToken");  LogoutRequest logoutRequest=buildLogoutRequest(postLogoutRedirectEndpointURI,idToken,state);  return logoutRequest.toHtmlForm();}  }
class C{  public boolean isOpenNativeNavigationAppSupported(){  return impl.isOpenNativeNavigationAppSupported();}  }
class C{  private boolean atLeastOneTypeSelected(){  for (  TableItem tableItem : table.getItems()) {    if (tableItem.getChecked()) {      return true;    }  }  return false;}  }
class C{  public static String toString(Node node){  return toString(node,new HashMap<String,String>());}  }
class C{  public void init(){  MBeanServer mbs=ManagementFactory.getPlatformMBeanServer();  try {    mbs.registerMBean(this,new ObjectName(MBEAN_NAME));  } catch (  JMException e) {    throw new RuntimeException(e);  }}  }
class C{  public void vmDestroyAll(){  vmDeallocateAll();  for (  Vm vm : getVmList()) {    vm.setHost(null);    setStorage(getStorage() + vm.getSize());  }  getVmList().clear();}  }
class C{  public boolean hasListener(String listenerName){  int rows=getNumListeners();  for (int i=0; i < rows; i++) {    JAMonListener listener=(JAMonListener)listenerList.get(i);    String name=listener.getName();    if (listenerName.equalsIgnoreCase(name))     return true; else     if (listener instanceof CompositeListener) {      return ((CompositeListener)listener).hasListener(listenerName);    }  }  return false;}  }
class C{  public String[] indices(){  return indices;}  }
class C{  public PropertyContainer(PropertyDescriptor desc,Object obj){  super();  m_Descriptor=desc;  m_Object=obj;}  }
class C{  public static byte[] decode(byte[] base64Data){  if (base64Data.length == 0) {    return EMPTY_BYTE_ARRAY;  }  int numberQuadruple=base64Data.length / FOURBYTE;  byte decodedData[]=null;  byte b1=0, b2=0, b3=0, b4=0, marker0=0, marker1=0;  int encodedIndex=0;  int dataIndex=0;{    int lastData=base64Data.length;    while (base64Data[lastData - 1] == PAD) {      if (--lastData == 0) {        return EMPTY_BYTE_ARRAY;      }    }    decodedData=new byte[lastData - numberQuadruple];  }  for (int i=0; i < numberQuadruple; i++) {    dataIndex=i * 4;    marker0=base64Data[dataIndex + 2];    marker1=base64Data[dataIndex + 3];    b1=base64Alphabet[base64Data[dataIndex]];    b2=base64Alphabet[base64Data[dataIndex + 1]];    if (marker0 != PAD && marker1 != PAD) {      b3=base64Alphabet[marker0];      b4=base64Alphabet[marker1];      decodedData[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);      decodedData[encodedIndex + 1]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));      decodedData[encodedIndex + 2]=(byte)(b3 << 6 | b4);    } else     if (marker0 == PAD) {      decodedData[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);    } else     if (marker1 == PAD) {      b3=base64Alphabet[marker0];      decodedData[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);      decodedData[encodedIndex + 1]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));    }    encodedIndex+=3;  }  return decodedData;}  }
class C{  protected Node newNode(){  return new SVGOMGElement();}  }
class C{  private NetworkUtils(){}  }
class C{  public void updateEdgeMatcherSelector(GraphEdgeMatcherDescriptor edgeMatcher,List<GraphEdgeMatcherDescriptor> choices){  edgeMatcherSelector.setInput(edgeMatcher,choices);}  }
class C{  public boolean isMediated(){  return !this.isDirect;}  }
class C{  private static int encodeValueNum(int valueNum,boolean isObjectKind){  assert valueNum > 0;  if (isObjectKind) {    return -valueNum;  }  return valueNum;}  }
class C{  public void acceptInvitation(VideoPlayer player) throws RcsGenericException {  try {    VideoPlayerImpl videoPlayer=new VideoPlayerImpl(player);    mSharingInf.acceptInvitation(videoPlayer);  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  public DBSCANClusterer(final double eps,final int minPts) throws NotPositiveException {  this(eps,minPts,new EuclideanDistance());}  }
class C{  private Response<Bitmap> doParse(NetworkResponse response){  byte[] data=response.data;  BitmapFactory.Options decodeOptions=new BitmapFactory.Options();  Bitmap bitmap=null;  if (mMaxWidth == 0 && mMaxHeight == 0) {    decodeOptions.inPreferredConfig=mDecodeConfig;    bitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);  } else {    decodeOptions.inJustDecodeBounds=true;    BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);    int actualWidth=decodeOptions.outWidth;    int actualHeight=decodeOptions.outHeight;    int desiredWidth=getResizedDimension(mMaxWidth,mMaxHeight,actualWidth,actualHeight,mScaleType);    int desiredHeight=getResizedDimension(mMaxHeight,mMaxWidth,actualHeight,actualWidth,mScaleType);    decodeOptions.inJustDecodeBounds=false;    decodeOptions.inSampleSize=findBestSampleSize(actualWidth,actualHeight,desiredWidth,desiredHeight);    Bitmap tempBitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);    if (tempBitmap != null && (tempBitmap.getWidth() > desiredWidth || tempBitmap.getHeight() > desiredHeight)) {      bitmap=Bitmap.createScaledBitmap(tempBitmap,desiredWidth,desiredHeight,true);      tempBitmap.recycle();    } else {      bitmap=tempBitmap;    }  }  if (bitmap == null) {    return Response.error(new ParseError(response));  } else {    return Response.success(bitmap,HttpHeaderParser.parseCacheHeaders(response));  }}  }
class C{  public ReferenceMap(){  super(HARD,SOFT,DEFAULT_CAPACITY,DEFAULT_LOAD_FACTOR,false);}  }
class C{  public XObject execute(XPathContext xctxt,int context) throws javax.xml.transform.TransformerException {  DTMIterator nl=m_functionExpr.asIterator(xctxt,context);  XNumber score=SCORE_NONE;  if (null != nl) {    int n;    while (DTM.NULL != (n=nl.nextNode())) {      score=(n == context) ? SCORE_OTHER : SCORE_NONE;      if (score == SCORE_OTHER) {        context=n;        break;      }    }  }  nl.detach();  return score;}  }
class C{  public final void testNextBytesbyteArray03() throws NoSuchAlgorithmException, NoSuchProviderException {  SecureRandom sr1;  SecureRandom sr2;  byte[] myBytes1;  byte[] myBytes2;  for (int i=1; i < LENGTH / 2; i+=INCR) {    sr1=SecureRandom.getInstance(algorithm,provider);    sr2=SecureRandom.getInstance(algorithm,provider);    boolean flag=true;    myBytes1=new byte[i];    myBytes2=new byte[i];    sr1.nextBytes(myBytes1);    sr2.nextBytes(myBytes2);    for (int j=0; j < i; j++) {      flag&=myBytes1[j] == myBytes2[j];    }    sr1.nextBytes(myBytes1);    sr2.nextBytes(myBytes2);    for (int j=0; j < i; j++) {      flag&=myBytes1[j] == myBytes2[j];    }    if (flag) {      fail("TESTING RANDOM NUMBER GENERATOR QUALITY: IGNORE THIS FAILURE IF INTERMITTENT :: i=" + i);    }  }}  }
class C{  public String decode(String value) throws DecoderException {  if (value == null) {    return null;  }  try {    return decodeText(value);  } catch (  UnsupportedEncodingException e) {    throw new DecoderException(e.getMessage());  }}  }
class C{  public long readDateTimeAsLong() throws IOException {  return this.readULong() << 32 | this.readULong();}  }
class C{  public void testZeroDateBehavior() throws Exception {  Connection testConn=this.conn;  Connection roundConn=null;  Connection nullConn=null;  Connection exceptionConn=null;  try {    if (versionMeetsMinimum(5,7,4)) {      Properties props=new Properties();      props.put("jdbcCompliantTruncation","false");      if (versionMeetsMinimum(5,7,5)) {        String sqlMode=getMysqlVariable("sql_mode");        if (sqlMode.contains("STRICT_TRANS_TABLES")) {          sqlMode=removeSqlMode("STRICT_TRANS_TABLES",sqlMode);          props.put("sessionVariables","sql_mode='" + sqlMode + "'");        }      }      testConn=getConnectionWithProps(props);      this.stmt=testConn.createStatement();    }    this.stmt.executeUpdate("DROP TABLE IF EXISTS testZeroDateBehavior");    this.stmt.executeUpdate("CREATE TABLE testZeroDateBehavior(fieldAsString VARCHAR(32), fieldAsDateTime DATETIME)");    this.stmt.executeUpdate("INSERT INTO testZeroDateBehavior VALUES ('0000-00-00 00:00:00', '0000-00-00 00:00:00')");    roundConn=getConnectionWithProps("zeroDateTimeBehavior=round");    Statement roundStmt=roundConn.createStatement();    this.rs=roundStmt.executeQuery("SELECT fieldAsString, fieldAsDateTime FROM testZeroDateBehavior");    this.rs.next();    assertEquals("0001-01-01",this.rs.getDate(1).toString());    assertEquals("0001-01-01 00:00:00.0",new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.0",Locale.US).format(this.rs.getTimestamp(1)));    assertEquals("0001-01-01",this.rs.getDate(2).toString());    assertEquals("0001-01-01 00:00:00.0",new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.0",Locale.US).format(this.rs.getTimestamp(2)));    PreparedStatement roundPrepStmt=roundConn.prepareStatement("SELECT fieldAsString, fieldAsDateTime FROM testZeroDateBehavior");    this.rs=roundPrepStmt.executeQuery();    this.rs.next();    assertEquals("0001-01-01",this.rs.getDate(1).toString());    assertEquals("0001-01-01 00:00:00.0",new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.0",Locale.US).format(this.rs.getTimestamp(1)));    assertEquals("0001-01-01",this.rs.getDate(2).toString());    assertEquals("0001-01-01 00:00:00.0",new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.0",Locale.US).format(this.rs.getTimestamp(2)));    nullConn=getConnectionWithProps("zeroDateTimeBehavior=convertToNull");    Statement nullStmt=nullConn.createStatement();    this.rs=nullStmt.executeQuery("SELECT fieldAsString, fieldAsDateTime FROM testZeroDateBehavior");    this.rs.next();    assertNull(this.rs.getDate(1));    assertNull(this.rs.getTimestamp(1));    assertNull(this.rs.getDate(2));    assertNull(this.rs.getTimestamp(2));    PreparedStatement nullPrepStmt=nullConn.prepareStatement("SELECT fieldAsString, fieldAsDateTime FROM testZeroDateBehavior");    this.rs=nullPrepStmt.executeQuery();    this.rs.next();    assertNull(this.rs.getDate(1));    assertNull(this.rs.getTimestamp(1));    assertNull(this.rs.getDate(2));    assertNull(this.rs.getTimestamp(2));    assertNull(this.rs.getString(2));    exceptionConn=getConnectionWithProps("zeroDateTimeBehavior=exception");    Statement exceptionStmt=exceptionConn.createStatement();    this.rs=exceptionStmt.executeQuery("SELECT fieldAsString, fieldAsDateTime FROM testZeroDateBehavior");    this.rs.next();    try {      this.rs.getDate(1);      fail("Exception should have been thrown when trying to retrieve invalid date");    } catch (    SQLException sqlEx) {      assertTrue(SQLError.SQL_STATE_ILLEGAL_ARGUMENT.equals(sqlEx.getSQLState()));    }    try {      this.rs.getTimestamp(1);      fail("Exception should have been thrown when trying to retrieve invalid date");    } catch (    SQLException sqlEx) {      assertTrue(SQLError.SQL_STATE_ILLEGAL_ARGUMENT.equals(sqlEx.getSQLState()));    }    try {      this.rs.getDate(2);      fail("Exception should have been thrown when trying to retrieve invalid date");    } catch (    SQLException sqlEx) {      assertTrue(SQLError.SQL_STATE_ILLEGAL_ARGUMENT.equals(sqlEx.getSQLState()));    }    try {      this.rs.getTimestamp(2);      fail("Exception should have been thrown when trying to retrieve invalid date");    } catch (    SQLException sqlEx) {      assertTrue(SQLError.SQL_STATE_ILLEGAL_ARGUMENT.equals(sqlEx.getSQLState()));    }    PreparedStatement exceptionPrepStmt=exceptionConn.prepareStatement("SELECT fieldAsString, fieldAsDateTime FROM testZeroDateBehavior");    try {      this.rs=exceptionPrepStmt.executeQuery();      this.rs.next();      this.rs.getDate(2);      fail("Exception should have been thrown when trying to retrieve invalid date");    } catch (    SQLException sqlEx) {      assertTrue(SQLError.SQL_STATE_ILLEGAL_ARGUMENT.equals(sqlEx.getSQLState()));    }  }  finally {    this.stmt.executeUpdate("DROP TABLE IF EXISTS testZeroDateBehavior");    if (exceptionConn != null) {      exceptionConn.close();    }    if (nullConn != null) {      nullConn.close();    }    if (roundConn != null) {      roundConn.close();    }    if (testConn != this.conn) {      testConn.close();    }  }}  }
class C{  public void testAddLimitWhenExists() throws Exception {  PrefetchSqlTransformer pst=new PrefetchSqlTransformer();  String[] queries={"select * from foo limit 25","select * from foo LIMIT 1","SELECT count(*) FROM mylimit ORDER by id ascending"};  for (  String q1 : queries) {    String q2=pst.addLimitToQuery(q1,25);    assertEquals("No limited added: " + q1,q1,q2);  }}  }
class C{  public XY(float[] xPoints,float[] yPoints){  super(xPoints,yPoints);  setIsPolygon(false);}  }
class C{  public void updateFromModel(boolean blinkEnabled,boolean useBusyStatus){  if (ColorAndFontConstants.isInverse()) {    inactiveBackGroundColor=new Color(Math.min(255,ColorAndFontConstants.BACKGROUND_COLOR.getRed() + 2 * COLOR_DELTA),Math.min(255,ColorAndFontConstants.BACKGROUND_COLOR.getBlue() + 2 * COLOR_DELTA),Math.min(255,ColorAndFontConstants.BACKGROUND_COLOR.getGreen() + 2 * COLOR_DELTA));  } else {    inactiveBackGroundColor=new Color(Math.max(0,ColorAndFontConstants.BACKGROUND_COLOR.getRed() - COLOR_DELTA),Math.max(0,ColorAndFontConstants.BACKGROUND_COLOR.getBlue() - COLOR_DELTA),Math.max(0,ColorAndFontConstants.BACKGROUND_COLOR.getGreen() - COLOR_DELTA));  }  BigInteger estimatedBalance=perWalletModelData.getWallet().getBalance(BalanceType.ESTIMATED);  String balanceTextToShowBTC=controller.getLocaliser().bitcoinValueToString(estimatedBalance,true,false);  String balanceTextToShowFiat="";  if (CurrencyConverter.INSTANCE.getRate() != null && CurrencyConverter.INSTANCE.isShowingFiat()) {    Money fiat=CurrencyConverter.INSTANCE.convertFromBTCToFiat(estimatedBalance);    balanceTextToShowFiat="(" + CurrencyConverter.INSTANCE.getFiatAsLocalisedString(fiat) + ")";  }  if (useBusyStatus && perWalletModelData.isBusy()) {    if (lastSyncPercent > 0) {      setSyncMessage(controller.getLocaliser().getString(perWalletModelData.getBusyTaskVerbKey()),lastSyncPercent);    } else {      setSyncMessage(controller.getLocaliser().getString(perWalletModelData.getBusyTaskVerbKey()),Message.NOT_RELEVANT_PERCENTAGE_COMPLETE);    }  } else {    if (amountLabelBTC != null && amountLabelBTC.getText() != null && !"".equals(amountLabelBTC.getText()) && !balanceTextToShowBTC.equals(amountLabelBTC.getText()) && blinkEnabled) {      amountLabelBTC.blink(balanceTextToShowBTC);      amountLabelFiat.blink(balanceTextToShowFiat);    } else {      amountLabelBTC.setText(balanceTextToShowBTC);      amountLabelFiat.setText(balanceTextToShowFiat);    }  }  if (perWalletModelData.getWallet() != null) {    setIconForWalletType(perWalletModelData.getWallet().getEncryptionType(),walletTypeButton);  }  if (perWalletModelData.isFilesHaveBeenChangedByAnotherProcess()) {    myRoundedPanel.setOpaque(true);    myRoundedPanel.setBackground(ColorAndFontConstants.VERY_LIGHT_BACKGROUND_COLOR);    walletDescriptionTextField.setBackground(ColorAndFontConstants.VERY_LIGHT_BACKGROUND_COLOR);    walletDescriptionTextField.setText(controller.getLocaliser().getString("singleWalletPanel.dataHasChanged.text"));    walletDescriptionTextField.setForeground(ColorAndFontConstants.DATA_HAS_CHANGED_TEXT_COLOR);    walletDescriptionTextField.setDisabledTextColor(ColorAndFontConstants.DATA_HAS_CHANGED_TEXT_COLOR);    mainFrame.setUpdatesStoppedTooltip(walletDescriptionTextField);    walletDescriptionTextField.setEnabled(false);    walletDescriptionTextField.setEditable(false);    amountLabelBTC.setText("");    amountLabelBTC.setEnabled(false);    amountLabelFiat.setText("");    amountLabelFiat.setEnabled(false);    walletTypeButton.setEnabled(false);  }  invalidate();  revalidate();  repaint();}  }
class C{  public void quit(){  mQuit=true;  interrupt();}  }
class C{  private void removeDownloadIdFromSharedPrefs(int downloadId){  Set<String> downloadIds=getStoredDownloadInfo(DOWNLOAD_NOTIFICATION_IDS);  String id=Integer.toString(downloadId);  if (downloadIds.contains(id)) {    downloadIds.remove(id);    storeDownloadInfo(DOWNLOAD_NOTIFICATION_IDS,downloadIds);  }}  }
class C{  public IconPart compose(List<String> list){  IconPartList ipl=new IconPartList();  for (  String partName : list) {    IconPart part=get(partName);    if (part != null) {      ipl.add(part);    }  }  return ipl;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case BasePackage.DOCUMENTED_ELEMENT__DOCUMENTATION:    setDocumentation(DOCUMENTATION_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  private void onCameraZoomChange(double zoom){  mapFragment.setZoomLevelText(df.format(zoom));  boolean isVectorial=mapFragment.isVectorial();  if (zoom < mapFragment.getZoomVectorial()) {    mapFragment.getLevelBar().setVisibility(View.INVISIBLE);    mapFragment.getAddressView().setVisibility(View.INVISIBLE);    if (isVectorial) {      mapFragment.setVectorial(false);      mapFragment.applyPoiFilter();    }  } else {    LatLng center=mapboxMap.getCameraPosition().target;    mapFragment.getGeocoder().delayedReverseGeocoding(center.getLatitude(),center.getLongitude());    if (mapFragment.getLevelBar().getLevels().length > 1) {      mapFragment.getLevelBar().setVisibility(View.VISIBLE);    }    if (!isVectorial) {      mapFragment.setVectorial(true);      mapFragment.applyPoiFilter();    }  }}  }
class C{  public void close(){  if (bf != null) {    try {      bf.close();    } catch (    IOException e) {      if (Debug.debugging("shape")) {        e.printStackTrace();      }    }  }}  }
class C{  public void propertyChange(PropertyChangeEvent e){  if ("graph".equals(e.getPropertyName())) {    selectArrowTools();  }}  }
class C{  public static boolean areOrthogonal(List<Vertex> vertices){  if (vertices == null || vertices.isEmpty())   return true;  List<List<EObject>> ancestorLists=new ArrayList<List<EObject>>();  for (  Vertex vertex : vertices) {    ancestorLists.add(collectAncestors(vertex,new ArrayList<EObject>()));  }  for (int i=0; i < vertices.size() - 1; i++) {    for (int j=i + 1; j < vertices.size(); j++) {      EObject commonAncestor=findCommonAncestor(ancestorLists.get(i),ancestorLists.get(j));      if (commonAncestor instanceof Region) {        return false;      }    }  }  return true;}  }
class C{  public static void main(String args[]){  int j;  MersenneTwister r;  r=new MersenneTwister(new int[]{0x123,0x234,0x345,0x456});  System.out.println("Output of MersenneTwister with new (2002/1/26) seeding mechanism");  for (j=0; j < 1000; j++) {    long l=r.nextInt();    if (l < 0)     l+=4294967296L;    String s=String.valueOf(l);    while (s.length() < 10)     s=" " + s;    System.out.print(s + " ");    if (j % 5 == 4)     System.out.println();  }  final long SEED=4357;  int xx;  long ms;  System.out.println("\nTime to test grabbing 100000000 ints");  r=new MersenneTwister(SEED);  ms=System.currentTimeMillis();  xx=0;  for (j=0; j < 100000000; j++)   xx+=r.nextInt();  System.out.println("Mersenne Twister: " + (System.currentTimeMillis() - ms) + "          Ignore this: "+ xx);  System.out.println("To compare this with java.util.Random, run this same test on MersenneTwisterFast.");  System.out.println("The comparison with Random is removed from MersenneTwister because it is a proper");  System.out.println("subclass of Random and this unfairly makes some of Random's methods un-inlinable,");  System.out.println("so it would make Random look worse than it is.");  System.out.println("\nGrab the first 1000 booleans");  r=new MersenneTwister(SEED);  for (j=0; j < 1000; j++) {    System.out.print(r.nextBoolean() + " ");    if (j % 8 == 7)     System.out.println();  }  if (!(j % 8 == 7))   System.out.println();  System.out.println("\nGrab 1000 booleans of increasing probability using nextBoolean(double)");  r=new MersenneTwister(SEED);  for (j=0; j < 1000; j++) {    System.out.print(r.nextBoolean((j / 999.0)) + " ");    if (j % 8 == 7)     System.out.println();  }  if (!(j % 8 == 7))   System.out.println();  System.out.println("\nGrab 1000 booleans of increasing probability using nextBoolean(float)");  r=new MersenneTwister(SEED);  for (j=0; j < 1000; j++) {    System.out.print(r.nextBoolean((j / 999.0f)) + " ");    if (j % 8 == 7)     System.out.println();  }  if (!(j % 8 == 7))   System.out.println();  byte[] bytes=new byte[1000];  System.out.println("\nGrab the first 1000 bytes using nextBytes");  r=new MersenneTwister(SEED);  r.nextBytes(bytes);  for (j=0; j < 1000; j++) {    System.out.print(bytes[j] + " ");    if (j % 16 == 15)     System.out.println();  }  if (!(j % 16 == 15))   System.out.println();  byte b;  System.out.println("\nGrab the first 1000 bytes -- must be same as nextBytes");  r=new MersenneTwister(SEED);  for (j=0; j < 1000; j++) {    System.out.print((b=r.nextByte()) + " ");    if (b != bytes[j])     System.out.print("BAD ");    if (j % 16 == 15)     System.out.println();  }  if (!(j % 16 == 15))   System.out.println();  System.out.println("\nGrab the first 1000 shorts");  r=new MersenneTwister(SEED);  for (j=0; j < 1000; j++) {    System.out.print(r.nextShort() + " ");    if (j % 8 == 7)     System.out.println();  }  if (!(j % 8 == 7))   System.out.println();  System.out.println("\nGrab the first 1000 ints");  r=new MersenneTwister(SEED);  for (j=0; j < 1000; j++) {    System.out.print(r.nextInt() + " ");    if (j % 4 == 3)     System.out.println();  }  if (!(j % 4 == 3))   System.out.println();  System.out.println("\nGrab the first 1000 ints of different sizes");  r=new MersenneTwister(SEED);  int max=1;  for (j=0; j < 1000; j++) {    System.out.print(r.nextInt(max) + " ");    max*=2;    if (max <= 0)     max=1;    if (j % 4 == 3)     System.out.println();  }  if (!(j % 4 == 3))   System.out.println();  System.out.println("\nGrab the first 1000 longs");  r=new MersenneTwister(SEED);  for (j=0; j < 1000; j++) {    System.out.print(r.nextLong() + " ");    if (j % 3 == 2)     System.out.println();  }  if (!(j % 3 == 2))   System.out.println();  System.out.println("\nGrab the first 1000 longs of different sizes");  r=new MersenneTwister(SEED);  long max2=1;  for (j=0; j < 1000; j++) {    System.out.print(r.nextLong(max2) + " ");    max2*=2;    if (max2 <= 0)     max2=1;    if (j % 4 == 3)     System.out.println();  }  if (!(j % 4 == 3))   System.out.println();  System.out.println("\nGrab the first 1000 floats");  r=new MersenneTwister(SEED);  for (j=0; j < 1000; j++) {    System.out.print(r.nextFloat() + " ");    if (j % 4 == 3)     System.out.println();  }  if (!(j % 4 == 3))   System.out.println();  System.out.println("\nGrab the first 1000 doubles");  r=new MersenneTwister(SEED);  for (j=0; j < 1000; j++) {    System.out.print(r.nextDouble() + " ");    if (j % 3 == 2)     System.out.println();  }  if (!(j % 3 == 2))   System.out.println();  System.out.println("\nGrab the first 1000 gaussian doubles");  r=new MersenneTwister(SEED);  for (j=0; j < 1000; j++) {    System.out.print(r.nextGaussian() + " ");    if (j % 3 == 2)     System.out.println();  }  if (!(j % 3 == 2))   System.out.println();}  }
class C{  private boolean isValidKey(Object key){  if (key == null)   return false;  Class<?> keyClass=key.getClass();  return keyClass == keyType || keyClass.getSuperclass() == keyType;}  }
class C{  private void parseAllOnToDoList(){  while (!toDoList.isEmpty()) {    LineInfo info=toDoList.iterator().next();    parseLine(getLineNumberByLineInfo(info));  }}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  @Override protected void onLayout(boolean changed,int l,int t,int r,int b){  super.onLayout(changed,l,t,r,b);  mInLayout=true;  layout(0,false);  mInLayout=false;}  }
class C{  public BGResourceLoader(UIManager inUIMgr,SageRenderer renderEngine){  uiMgr=inUIMgr;  if (renderEngine instanceof NativeImageAllocator)   nia=(NativeImageAllocator)renderEngine;  queue=new java.util.ArrayList();}  }
class C{  @Override protected EClass eStaticClass(){  return TypesPackage.Literals.SYNTAX_RELATED_TELEMENT;}  }
class C{  public static ArrayOfDoublesSketch heapifySketch(final Memory mem){  return heapifySketch(mem,DEFAULT_UPDATE_SEED);}  }
class C{  private static int hash(int h){  h+=(h << 15) ^ 0xffffcd7d;  h^=(h >>> 10);  h+=(h << 3);  h^=(h >>> 6);  h+=(h << 2) + (h << 14);  return h ^ (h >>> 16);}  }
class C{  protected void printJson(HttpServletResponse response,String message) throws IOException {  response.setContentType("application/json");  response.setStatus(HttpServletResponse.SC_OK);  print(response,message);}  }
class C{  public void init(boolean encrypting,CipherParameters params){  this.encrypting=encrypting;  if (params instanceof RC2Parameters) {    RC2Parameters param=(RC2Parameters)params;    workingKey=generateWorkingKey(param.getKey(),param.getEffectiveKeyBits());  } else   if (params instanceof KeyParameter) {    byte[] key=((KeyParameter)params).getKey();    workingKey=generateWorkingKey(key,key.length * 8);  } else {    throw new IllegalArgumentException("invalid parameter passed to RC2 init - " + params.getClass().getName());  }}  }
class C{  final void constructSubst(Vector instanceeDecls,SymbolTable instancerST,TreeNode treeNode) throws AbortException {  Vector vtemp=new Vector();  for (int i=0; i < instanceeDecls.size(); i++) {    OpDeclNode decl=(OpDeclNode)instanceeDecls.elementAt(i);    SymbolNode symb=instancerST.resolveSymbol(decl.getName());    if (symb != null) {      if (decl.getKind() == VariableDeclKind || (decl.getKind() == ConstantDeclKind && decl.getArity() == 0)) {        vtemp.addElement(new Subst(decl,new OpApplNode(symb,new ExprOrOpArgNode[0],treeNode,instantiatingModule),null,true));      } else {        vtemp.addElement(new Subst(decl,new OpArgNode(symb,treeNode,instantiatingModule),null,true));      }    }  }  this.substs=new Subst[vtemp.size()];  for (int i=0; i < vtemp.size(); i++) {    this.substs[i]=(Subst)vtemp.elementAt(i);  }}  }
class C{  final Node<K> advance(){  Node<K> e;  if ((e=next) != null)   e=e.next;  for (; ; ) {    Node<K>[] t;    int i, n;    if (e != null)     return next=e;    if (baseIndex >= baseLimit || (t=tab) == null || (n=t.length) <= (i=index) || i < 0)     return next=null;    if ((e=tabAt(t,i)) != null && e.hash < 0) {      if (e instanceof ForwardingNode) {        tab=((ForwardingNode<K>)e).nextTable;        e=null;        pushState(t,i,n);        continue;      } else       if (e instanceof TreeBin)       e=((TreeBin<K>)e).first; else       e=null;    }    if (stack != null)     recoverState(n); else     if ((index=i + baseSize) >= n)     index=++baseIndex;  }}  }
class C{  public Element store(Object o){  Element e=new Element("perform");  PerformFileModel g=(PerformFileModel)o;  e.setAttribute("name",FileUtil.getPortableFilename(g.getFileName()));  e.setAttribute("type","XmlFile");  e.setAttribute("class",this.getClass().getName());  return e;}  }
class C{  private void createLocalFiles(String baseDirectory,long size) throws IOException {  for (  String file : LOCAL_FILES) {    createLocalFile(baseDirectory,file,size);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeprocessinginstructionnodename.class,args);}  }
class C{  public DomainObjectException(String message,DomainObjectExceptionBean bean){  super(message,bean);  this.bean=bean;}  }
class C{  public boolean isDeclaredProvidedByRuntime(){  return declaredProvidedByRuntime;}  }
class C{  int parseAmPmMarker(String source,int ofs) throws ParseException {  String markers[]=getDateFormatSymbols().getAmPmStrings();  for (int i=0; i < markers.length; i++) {    if (markers[i].equalsIgnoreCase(source)) {      return i;    }  }  char ch=source.charAt(0);  if (ch == markers[0].charAt(0)) {    return Calendar.AM;  }  if (ch == markers[1].charAt(0)) {    return Calendar.PM;  }  return throwInvalid("am/pm marker",ofs);}  }
class C{  public void run(){  boolean done=false;  String str;  int res;  boolean logged=false;  boolean waitpass=false;  try {    in=new BufferedReader(new InputStreamReader(client.getInputStream()));    out=new PrintWriter(client.getOutputStream(),true);    out.println("220 tatooine FTP server (SunOS 5.8) ready.");  } catch (  Exception ex) {    return;  }  while (!done) {    try {      str=in.readLine();      res=parseCmd(str);      if ((res > PASS && res != QUIT) && !logged) {        out.println("530 Not logged in.");        continue;      }switch (res) {case ERROR:        out.println("500 '" + str + "': command not understood.");      break;case USER:    if (!logged && !waitpass) {      username=str.substring(5);      password=null;      cwd=null;      if ("user2".equals(username)) {        out.println("230 Guest login ok, access restrictions apply.");        logged=true;      } else {        out.println("331 Password required for " + arg);        waitpass=true;      }    } else {      out.println("503 Bad sequence of commands.");    }  break;case PASS:if (!logged && waitpass) {  out.println("230 Guest login ok, access restrictions apply.");  password=str.substring(5);  logged=true;  waitpass=false;} else out.println("503 Bad sequence of commands.");break;case QUIT:out.println("221 Goodbye.");out.flush();out.close();if (pasv != null) pasv.close();done=true;break;case TYPE:out.println("200 Type set to " + arg + ".");type=arg;break;case CWD:out.println("250 CWD command successful.");if (cwd == null) cwd=str.substring(4); else cwd=cwd + "/" + str.substring(4);break;case CDUP:out.println("250 CWD command successful.");break;case PWD:out.println("257 \"" + cwd + "\" is current directory");break;case PASV:if (!pasvEnabled) {out.println("500 PASV is disabled, use PORT instead.");continue;}try {if (pasv == null) pasv=new ServerSocket(0);int port=pasv.getLocalPort();out.println("227 Entering Passive Mode (127,0,0,1," + (port >> 8) + ","+ (port & 0xff)+ ")");} catch (IOException ssex) {out.println("425 Can't build data connection: Connection refused.");}break;case PORT:if (!portEnabled) {out.println("500 PORT is disabled, use PASV instead");continue;}StringBuffer host;int i=0, j=4;while (j > 0) {i=arg.indexOf(',',i + 1);if (i < 0) break;j--;}if (j != 0) {out.println("500 '" + arg + "': command not understood.");continue;}try {host=new StringBuffer(arg.substring(0,i));for (j=0; j < host.length(); j++) if (host.charAt(j) == ',') host.setCharAt(j,'.');String ports=arg.substring(i + 1);i=ports.indexOf(',');data_port=Integer.parseInt(ports.substring(0,i)) << 8;data_port+=(Integer.parseInt(ports.substring(i + 1)));data_addr=InetAddress.getByName(host.toString());out.println("200 Command okay.");} catch (Exception ex3) {data_port=0;data_addr=null;out.println("500 '" + arg + "': command not understood.");}break;case RETR:{filename=str.substring(5);OutputStream dout=getOutDataStream();if (dout != null) {out.println("200 Command okay.");BufferedOutputStream pout=new BufferedOutputStream(dout);for (int x=0; x < filesize; x++) pout.write(0);pout.flush();pout.close();list=false;} else out.println("425 Can't build data connection: Connection refused.");}break;case NLST:filename=arg;case LIST:{OutputStream dout=getOutDataStream();if (dout != null) {out.println("200 Command okay.");PrintWriter pout=new PrintWriter(new BufferedOutputStream(dout));pout.println("total 130");pout.println("drwxrwxrwt   7 sys      sys          577 May 12 03:30 .");pout.println("drwxr-xr-x  39 root     root        1024 Mar 27 12:55 ..");pout.println("drwxrwxr-x   2 root     root         176 Apr 10 12:02 .X11-pipe");pout.println("drwxrwxr-x   2 root     root         176 Apr 10 12:02 .X11-unix");pout.println("drwxrwxrwx   2 root     root         179 Mar 30 15:09 .pcmcia");pout.println("drwxrwxrwx   2 jladen   staff        117 Mar 30 18:18 .removable");pout.println("drwxrwxrwt   2 root     root         327 Mar 30 15:08 .rpc_door");pout.println("-rw-r--r--   1 root     other         21 May  5 16:59 hello2.txt");pout.println("-rw-rw-r--   1 root     sys         5968 Mar 30 15:08 ps_data");pout.flush();pout.close();list=true;} else out.println("425 Can't build data connection: Connection refused.");}break;case STOR:{InputStream is=getInDataStream();if (is != null) {out.println("200 Command okay.");BufferedInputStream din=new BufferedInputStream(is);int val;do {val=din.read();} while (val != -1);din.close();} else out.println("425 Can't build data connection: Connection refused.");}break;}} catch (IOException ioe) {ioe.printStackTrace();try {out.close();} catch (Exception ex2) {}done=true;}}}  }
class C{  public static boolean isAlphaNumeric(char a){  return isAlpha(a) || isNumeric(a);}  }
class C{  public void addField(DBFField field) throws DBFException {  addField(field,this.fieldCount);}  }
class C{  public void before() throws Throwable {  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {    ProcessBuilder processBuilder=new ProcessBuilder();    processBuilder.command("logcat","-c");    processBuilder.redirectErrorStream();    Process process=processBuilder.start();    process.waitFor();    if (process.exitValue() != 0) {      Log.e(LOG_TAG,"Error while clearing logcat, exitValue=" + process.exitValue());    }  }}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="LI_LAZY_INIT_STATIC",justification="modified is only on Swing thread") protected void handleModified(){  if (getModifiedFlag()) {    this.setVisible(true);    int result=javax.swing.JOptionPane.showOptionDialog(this,Bundle.getMessage("WarnChangedMsg"),Bundle.getMessage("WarnChangedTitle"),javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.WARNING_MESSAGE,null,new String[]{Bundle.getMessage("WarnYesSave"),Bundle.getMessage("WarnNoClose")},Bundle.getMessage("WarnYesSave"));    if (result == javax.swing.JOptionPane.YES_OPTION) {      storeValues();    }  }}  }
class C{  public static void main(String... args) throws Exception {  ModelsTest test=new ModelsTest();  test.init();  test.config.traceTest=true;  test.test();}  }
class C{  public WFG(int k,int l,int M){  super(k + l,M);  this.k=k;  this.l=l;  this.M=M;}  }
class C{  public static double rRRSErawFitness(boolean useTrainingData,GEPIndividual ind,int chromosomeNum){  double sumOfSquaredRelativeError=0.0;  double expectedResult;  double result;  double relativeError;  GEPDependentVariable dv;  if (useTrainingData)   dv=GEPDependentVariable.trainingData; else   dv=GEPDependentVariable.testingData;  double dvValues[]=dv.getDependentVariableValues(chromosomeNum);  double dvSumOfSquaredRelativeError=dv.getDependentVariableSumOfSquaredRelativeError(chromosomeNum);  for (int i=0; i < dvValues.length; i++) {    expectedResult=dvValues[i];    result=ind.eval(chromosomeNum,useTrainingData,i);    if (expectedResult == 0.0) {      expectedResult=RELATIVE_ERROR_ZERO_FACTOR;      result+=RELATIVE_ERROR_ZERO_FACTOR;      System.err.println("Warning: expected result (test value) is 0 in rRRSE fitness calculation. Adjusting to avoid division by zero.");    }    relativeError=(result - expectedResult) / expectedResult;    sumOfSquaredRelativeError+=relativeError * relativeError;  }  if (dvSumOfSquaredRelativeError == 0.0) {    dvSumOfSquaredRelativeError=RELATIVE_ERROR_ZERO_FACTOR;    System.err.println("Warning: sum of squared relative error for dependent variable is 0 in rRRSE fitness calculation. Adjusting to avoid division by zero.");  }  return Math.sqrt(sumOfSquaredRelativeError / dvSumOfSquaredRelativeError);}  }
class C{  public static void checkPermissions(MultiplePermissionsListener listener,Collection<String> permissions){  checkInstanceNotNull();  instance.checkPermissions(listener,permissions,ThreadFactory.makeMainThread());}  }
class C{  public void reflow(boolean flushCache){  Composite c=(Composite)getContent();  Rectangle clientArea=getClientArea();  if (c == null)   return;  Point newSize=c.computeSize(clientArea.width,SWT.DEFAULT,flushCache);  setMinSize(newSize);  updatePageIncrement();  layout(flushCache);}  }
class C{  public RepairableMetaBuilder start(){  return new RepairableMetaBuilder();}  }
class C{  public static String stringFor(int n){switch (n) {case cudaGraphicsRegisterFlagsNone:    return "cudaGraphicsRegisterFlagsNone";case cudaGraphicsRegisterFlagsReadOnly:  return "cudaGraphicsRegisterFlagsReadOnly";case cudaGraphicsRegisterFlagsWriteDiscard:return "cudaGraphicsRegisterFlagsWriteDiscard";case cudaGraphicsRegisterFlagsSurfaceLoadStore:return "cudaGraphicsRegisterFlagsSurfaceLoadStore";case cudaGraphicsRegisterFlagsTextureGather:return "cudaGraphicsRegisterFlagsTextureGather";}return "INVALID cudaGraphicsRegisterFlags: " + n;}  }
class C{  @DSComment("Scroller") @DSSafe(DSCat.GUI) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:11.155 -0500",hash_original_method="FC91CF543B97ECA9AF0E75894ECCBF47",hash_generated_method="E5DEF0A79033BC9B5EEB0B8F9DB1463F") public final boolean isFinished(){  return mFinished;}  }
class C{  public static Intent openDirectoryBrowser(Context context,Uri defaultPath,String title){  return openDirectoryBrowser(context,defaultPath,title,false);}  }
class C{  private GroupByAxis findGroupingJoin(Axis axis,DashboardAnalysis from){  DateExpressionAssociativeTransformationExtractor checker=new DateExpressionAssociativeTransformationExtractor();  ExpressionAST naked1=checker.eval(axis.getDimension() != null ? axis.getReference() : axis.getDefinitionSafe());  IDomain d1=axis.getDefinitionSafe().getImageDomain();  for (  GroupByAxis groupBy : from.getGrouping()) {    IDomain d2=groupBy.getAxis().getDefinitionSafe().getImageDomain();    if (d1.isInstanceOf(IDomain.TEMPORAL) && d2.isInstanceOf(IDomain.TEMPORAL)) {      ExpressionAST naked2=checker.eval(groupBy.getAxis().getDefinitionSafe());      if (naked1.equals(naked2)) {        return groupBy;      }    } else     if (axis.equals(groupBy.getAxis())) {      return groupBy;    }  }  return null;}  }
class C{  private boolean commit(final boolean locked){  assert lock.isHeldByCurrentThread();  firstCauseRef.set(null);  final IResourceManager rm=getResourceManager();  if (rm == null || !rm.isOpen()) {    log.warn("ResourceManager not open?");    resetState();    return false;  }  final AbstractJournal journal=rm.getLiveJournal();  if (!journal.isOpen()) {    log.warn("Journal not open?");    resetState();    return false;  }  try {    if (locked) {      if (overflowLog.isDebugEnabled())       overflowLog.debug("before: " + journal.getRootBlockView());    }    final long byteCountBefore=journal.getRootBlockView().getNextOffset();    final long timestamp=journal.commit();    final long byteCountAfter=journal.getRootBlockView().getNextOffset();    if (timestamp == 0L) {      if (log.isInfoEnabled())       log.info("Nothing to commit");      return true;    }    this.byteCountPerCommit=(byteCountAfter - byteCountBefore);{      assert nwrites.get() == commitGroup.size();      for (      AbstractTask<?> task : commitGroup.values()) {        task.commitTime=timestamp;        try {          task.afterTaskHook(false);        } catch (        Throwable t) {          log.error(t,t);        }      }    }    ngroupCommits.incrementAndGet();    MDC.put("commitCounter","commitCounter=" + ngroupCommits);    MDC.put("taskState","didCommit");    if (log.isInfoEnabled()) {      log.info("commit: #writes=" + nwrites + ", timestamp="+ timestamp);    }    if (locked) {      if (overflowLog.isInfoEnabled())       overflowLog.info("commit: #writes=" + nwrites + ", timestamp="+ timestamp+ ", paused!");      if (overflowLog.isDebugEnabled())       overflowLog.debug("after : " + journal.getRootBlockView());    }    return true;  } catch (  Throwable t) {    final CommitException ex=new CommitException("Commit failed - will abort: " + serviceName + " : "+ t,t);    firstCauseRef.compareAndSet(null,ex);    log.error(ex);    abort();    return false;  } finally {    resetState();  }}  }
class C{  private <T>T readObject(final Class<T> inputClass,final XMLStreamReader reader) throws JAXBException, SecurityException, XMLStreamException {  final T outputObject=reflectNewInstance(inputClass);  final FastTable<AnnotationStackData> outputStack=FastTable.newTable();  AnnotationStackData stackData;  FastSet<CharArray> requiredSet=FastSet.newSet(Order.LEXICAL);  if (_isValidating) {    stackData=new AnnotationStackData(AnnotationStackType.ROOT,null,outputObject,null,inputClass,null,requiredSet,getXmlPropOrder(inputClass));  } else {    stackData=new AnnotationStackData(AnnotationStackType.ROOT,null,outputObject,null,inputClass,null,null,null);  }  outputStack.push(stackData);  int lastEvent=-1;  boolean skipUnmappedMode=false;  CharArray unmappedElement=null;  CharArray characters=null;  CharArray localName;  CharArray localXmlElementName;  CacheData cacheData=null;  CacheData parentCacheData=null;  while (reader.hasNext()) {    boolean continuingSameElement=false;    final int event=reader.next();switch (event) {case XMLStreamConstants.CHARACTERS:      if (reader.isWhiteSpace()) {        characters=null;      } else {        characters=reader.getText();      }    break;case XMLStreamConstants.START_ELEMENT:  if (skipUnmappedMode) {    break;  }if (!reader.hasText()) {  characters=null;}localName=reader.getLocalName();localXmlElementName=getXmlElementName(localName);boolean pushedElement=false;stackData=outputStack.peek();if (lastEvent == XMLStreamConstants.END_ELEMENT) {FastSet<CharArray> mappedElements=null;boolean mappedElement=false;if (stackData._annotationStackType != AnnotationStackType.ROOT) {parentCacheData=_classCacheData.get(stackData._parent._type);mappedElements=parentCacheData._mappedElementsCache.get(localXmlElementName);mappedElement=(mappedElements != null && mappedElements.contains(localXmlElementName));}if (stackData._annotationStackType == AnnotationStackType.UNBOUNDED && ((!mappedElement && localXmlElementName != stackData._xmlElementName) || (mappedElement && !mappedElements.contains(stackData._xmlElementName)))) {outputStack.pop();stackData=outputStack.peek();if (localXmlElementName == stackData._xmlElementName || (mappedElement && mappedElements.contains(stackData._xmlElementName))) {outputStack.pop();stackData=outputStack.peek();}cacheData=_classCacheData.get(stackData._type);if (stackData._annotationStackType != AnnotationStackType.ROOT) {parentCacheData=_classCacheData.get(stackData._parent._type);mappedElements=parentCacheData._mappedElementsCache.get(localXmlElementName);mappedElement=(mappedElements != null && mappedElements.contains(localXmlElementName));}}if (localXmlElementName == stackData._xmlElementName || (mappedElement && mappedElements.contains(stackData._xmlElementName))) {final Class<?> elementClass=_elementClassCache.get(localXmlElementName);final Class<?> currentType=stackData._type;final AnnotationStackData elementStackData;if (isInstanceOfBasicType(elementClass)) {elementStackData=new AnnotationStackData(AnnotationStackType.BASIC,stackData,elementClass,null,elementClass,null,null,null);outputStack.push(elementStackData);lastEvent=event;break;} else {final Object newObject=reflectNewInstance(currentType,parentCacheData,localXmlElementName);FastSet<CharArray> requiredFieldsSet=null;Iterator<CharArray> propOrderIterator=null;if (_isValidating) {requiredFieldsSet=_requiredCache.get(currentType);propOrderIterator=_propOrderCache.get(currentType).iterator();}elementStackData=new AnnotationStackData(AnnotationStackType.BOUNDED,stackData,newObject,null,elementClass,localXmlElementName,requiredFieldsSet,propOrderIterator);if (stackData._annotationStackType == AnnotationStackType.UNBOUNDED) {addToList(stackData._list,newObject,null);} else {setValue(cacheData,stackData._object,newObject,localXmlElementName);}outputStack.push(elementStackData);stackData=elementStackData;pushedElement=true;continuingSameElement=true;}} else if (stackData._annotationStackType == AnnotationStackType.UNBOUNDED) {outputStack.pop();stackData=outputStack.peek();}}Object currentObj=stackData._object;Class<?> currentObjClass=currentObj.getClass();cacheData=_classCacheData.get(currentObjClass);final Field targetField=cacheData._elementFieldCache.get(localXmlElementName);final Class<?> elementClass=_elementClassCache.get(localXmlElementName);FastMap<CharArray,Method> cachedAttributeFields=cacheData._attributeMethodsCache;FastSet<CharArray> requiredFieldsSet=_requiredCache.get(elementClass);if (!continuingSameElement) {if (targetField != null) {stackData=handleFieldStartElement(stackData,localXmlElementName,currentObj,targetField,outputStack,requiredFieldsSet);if (stackData._annotationStackType == AnnotationStackType.BASIC) {lastEvent=event;break;}pushedElement=true;} else if (outputStack.size() > 1) {if (_isValidating) {throw new ValidationException("Unmapped Element");} else {unmappedElement=localXmlElementName;skipUnmappedMode=true;}break;}}final Class<?> originalObjClass=currentObjClass;currentObj=stackData._object;currentObjClass=currentObj.getClass();if (originalObjClass != currentObjClass) {cacheData=_classCacheData.get(currentObjClass);cachedAttributeFields=cacheData._attributeMethodsCache;}for (int i=0; i < reader.getAttributeCount(); i++) {final CharArray attributeName=reader.getAttributeLocalName(i);final Method method=cachedAttributeFields.get(attributeName);parseAttribute(method,attributeName,cacheData._enumValueCache,reader,currentObj,stackData._processedSet);}if (!pushedElement && currentObjClass != inputClass) {if (_isValidating) {throw new ValidationException("Unmapped Element");} else {unmappedElement=localXmlElementName;skipUnmappedMode=true;}}break;case XMLStreamConstants.END_ELEMENT:localName=reader.getLocalName();if (skipUnmappedMode) {if (localName.equals(unmappedElement)) {skipUnmappedMode=false;}break;}stackData=outputStack.pop();if (stackData._annotationStackType == AnnotationStackType.ROOT) break;final AnnotationStackData parentStackData=stackData._parent;if (stackData._annotationStackType == AnnotationStackType.BASIC) {parentCacheData=_classCacheData.get(parentStackData._type);if (parentStackData._annotationStackType == AnnotationStackType.UNBOUNDED) {addToList(parentStackData._list,stackData._object,characters);} else {localXmlElementName=getXmlElementName(localName);setValue(parentCacheData,parentStackData._object,localXmlElementName,characters);}} else if (stackData._annotationStackType == AnnotationStackType.UNBOUNDED) {if (lastEvent == XMLStreamConstants.END_ELEMENT) {stackData=outputStack.pop();if (_isValidating && !stackData._processedSet.containsAll(stackData._requiredSet)) {throw new ValidationException("Missing Required Elements!");}} else {outputStack.push(stackData);}} else {final Method xmlValueMethod=cacheData._xmlValueMethod;if (xmlValueMethod != null && characters != null) {try {xmlValueMethod.invoke(stackData._object,characters.toString().trim());} catch (final Exception e) {throw new UnmarshalException("Error Setting @XmlValue - Field = " + xmlValueMethod.getName(),e);}}}if (_isValidating && stackData._annotationStackType != AnnotationStackType.BASIC && !stackData._processedSet.containsAll(stackData._requiredSet)) {throw new ValidationException(String.format("Missing Required Elements: Has %s, Requires %s",stackData._processedSet,stackData._requiredSet));}lastEvent=event;}}return outputObject;}  }
class C{  public static boolean isLowSurrogate(int c){  return (0xDC00 <= c && c <= 0xDFFF);}  }
class C{  @Nullable public ParsedQuery parseInnerFilter(XContentParser parser) throws IOException {  QueryParseContext context=cache.get();  context.reset(parser);  try {    Query filter=context.parseInnerFilter();    if (filter == null) {      return null;    }    return new ParsedQuery(filter,context.copyNamedQueries());  }  finally {    context.reset(null);  }}  }
class C{  public static EWMA oneMinuteEWMA(){  return new EWMA(M1_ALPHA,INTERVAL,TimeUnit.SECONDS);}  }
class C{  public void removeDateTimeChangeListener(DateTimeChangeListener listener){  dateTimeChangeListeners.remove(listener);}  }
class C{  private void readObject(ObjectInputStream in) throws ClassNotFoundException, IOException {  in.defaultReadObject();  borderStroke=(Stroke)SerializationUtils.unwrap((Serializable)in.readObject());}  }
class C{  void verifyUniqueXids(List<OFMessage> msgs){  if (seenXids == null)   seenXids=new HashSet<Long>();  for (  OFMessage m : msgs) {    long xid=m.getXid();    assertTrue("Xid in messags is 0",xid != 0);    assertFalse("Xid " + xid + " has already been used",seenXids.contains(xid));    seenXids.add(xid);  }}  }
class C{  public QueryStringQueryBuilder enablePositionIncrements(boolean enablePositionIncrements){  this.enablePositionIncrements=enablePositionIncrements;  return this;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  sage.plugin.PluginWrapper pluggy=getPlugin(stack);  if (pluggy.isServerConfiguredPlugin()) {    stack.push(pluggy);    return makeNetworkedCall(stack);  } else   return (pluggy != null && sage.plugin.CorePluginManager.getInstance().isPluginFailed(pluggy.getId())) ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  public AerovisConverter(){  super();}  }
class C{  public void emitInvokestatic(int meth,Type mtype){  int argsize=width(mtype.getParameterTypes());  emitop(invokestatic);  if (!alive)   return;  emit2(meth);  state.pop(argsize);  state.push(mtype.getReturnType());}  }
class C{  @Override public void reset() throws IOException {synchronized (lock) {    super.reset();    lineNumber=markedLineNumber;    lastWasCR=markedLastWasCR;  }}  }
class C{  private Label resolveText(Class type){  if (text != null) {    if (type == String.class) {      return text;    }  }  return null;}  }
class C{  public PurpleDragon(final RPObject object,final Player owner){  super(object,owner);  setRPClass("purple_dragon");  put("type","purple_dragon");  update();}  }
class C{  public static VisorCacheAggregatedMetrics from(VisorCacheMetrics cm){  VisorCacheAggregatedMetrics acm=new VisorCacheAggregatedMetrics();  acm.name=cm.name();  acm.mode=cm.mode();  acm.sys=cm.system();  return acm;}  }
class C{  public void refreshing(){  mHintTextView.setText(R.string.pulltorefresh_listview_header_hint_loading);}  }
class C{  public boolean isPinDebuggingEnabled(){  return isPinDebuggingEnabled;}  }
class C{  void pointToCellExact(int x,int y,int[] result){  final int hStartPadding=getPaddingLeft();  final int vStartPadding=getPaddingTop();  result[0]=(x - hStartPadding) / (mCellWidth + mWidthGap);  result[1]=(y - vStartPadding) / (mCellHeight + mHeightGap);  final int xAxis=mCountX;  final int yAxis=mCountY;  if (result[0] < 0)   result[0]=0;  if (result[0] >= xAxis)   result[0]=xAxis - 1;  if (result[1] < 0)   result[1]=0;  if (result[1] >= yAxis)   result[1]=yAxis - 1;}  }
class C{  public static int executeUpdate(String sql,int param,String trxName,int timeOut){  return executeUpdate(sql,new Object[]{new Integer(param)},false,trxName,timeOut);}  }
class C{  private void readObject(){}  }
class C{  public byte[] contentAsBytes() throws ServerException {  try {    return getVirtualFile().getContentAsBytes();  } catch (  ForbiddenException e) {    throw new IllegalStateException(e.getMessage(),e);  }}  }
class C{  @Override public Vertex parsePattern(TextStream stream,Map<String,Map<String,Vertex>> elements,boolean debug,Network network){  stream.nextWord();  stream.skipWhitespace();  Vertex expression=network.createInstance(Primitive.CASE);  Vertex pattern=null;  if (stream.peek() == '"') {    stream.skip();    pattern=network.createPattern(stream.nextStringDoubleQuotes(),this);  } else {    pattern=parseElement(stream,elements,debug,network);  }  expression.addRelationship(Primitive.PATTERN,pattern);  String next=stream.nextWord().toLowerCase();  Vertex topic=null;  if (next.equals(TOPIC)) {    topic=parseElement(stream,elements,debug,network);    expression.addRelationship(Primitive.TOPIC,topic);    next=stream.nextWord().toLowerCase();  }  Vertex that=null;  if (next.equals(THAT)) {    stream.skipWhitespace();    if (stream.peek() == '"') {      stream.skip();      that=network.createPattern(stream.nextStringDoubleQuotes(),this);    } else {      that=parseElement(stream,elements,debug,network);    }    expression.addRelationship(Primitive.THAT,that);    next=stream.nextWord().toLowerCase();  }  if (next.equals(GOTO)) {    List<Vertex> thens=new ArrayList<Vertex>();    stream.skipWhitespace();    boolean parseGoto=true;    while (parseGoto) {      thens.add(parseElement(stream,elements,debug,network));      stream.skipWhitespace();      if (stream.peek() == ',') {        stream.skip();      } else {        parseGoto=false;      }    }    for (    Vertex then : thens) {      expression.addRelationship(Primitive.GOTO,then);    }  } else   if (next.equals(RETURN)) {    expression.addRelationship(Primitive.GOTO,Primitive.RETURN);  } else   if (next.equals(TEMPLATE) || next.equals(ANSWER)) {    Vertex template=parseElement(stream,elements,debug,network);    expression.addRelationship(Primitive.TEMPLATE,template);  } else {    stream.setPosition(stream.getPosition() - next.length());    throw new SelfParseException("expected one of GOTO, TEMPLATE, RETURN, THAT, TOPIC, found: " + next,stream);  }  ensureNext(';',stream);  Vertex sentenceState=AIMLParser.parser().createSentenceState(elements.get("root").get("root"),network);  Vertex state=AIMLParser.parser().createState(pattern,sentenceState,network);  state.addRelationship(Primitive.DO,expression);  return expression;}  }
class C{  private void handleFadeIn(){  if (fadeIn) {    if (currentPosition == NUMBER_OF_STEPS) {      fadeIn=false;      shellHover.setAlpha(alpha);    } else {      shellHover.setAlpha(currentPosition * alpha / NUMBER_OF_STEPS);    }  }}  }
class C{  public int hashCode(){  int hash=317351877;  hash+=(getLowerLimit() != null ? getLowerLimit().hashCode() : 0);  hash+=(getUpperLimit() != null ? getUpperLimit().hashCode() : 0);  hash+=getBase().hashCode() * 7;  return hash;}  }
class C{  @Override protected boolean isSwitchFor(EPackage ePackage){  return ePackage == modelPackage;}  }
class C{  public static boolean needsShift(int keycode){  if ('A' <= keycode && keycode <= 'Z') {    return true;  }  if (lowerToUpper.contains(keycode)) {    return true;  }  return false;}  }
class C{  public Task delete(String id) throws IOException {  String path=String.format("%s/%s",getBasePath(),id);  HttpResponse response=this.restClient.perform(RestClient.Method.DELETE,path,null);  this.restClient.checkResponse(response,HttpStatus.SC_CREATED);  return parseTaskFromHttpResponse(response);}  }
class C{  public void relayout(){  sharedContext.flushFonts();  super.relayout();}  }
class C{  public static String parseUPN(GeneralName generalName){  ASN1Sequence otherName=(ASN1Sequence)generalName.getName();  ASN1ObjectIdentifier oid=(ASN1ObjectIdentifier)otherName.getObjectAt(0);  if (UPN_OID.equals(oid.getId())) {    DERTaggedObject derTaggedObject=(DERTaggedObject)otherName.getObjectAt(1);    DERUTF8String upn=DERUTF8String.getInstance(derTaggedObject.getObject());    return MessageFormat.format(res.getString("GeneralNameUtil.OtherGeneralName"),"UPN",upn.getString());  }  ASN1Encodable value=otherName.getObjectAt(1);  try {    return MessageFormat.format(res.getString("GeneralNameUtil.OtherGeneralName"),ObjectIdUtil.toString(oid),HexUtil.getHexString(value.toASN1Primitive().getEncoded(ASN1Encoding.DER)));  } catch (  IOException e) {    return MessageFormat.format(res.getString("GeneralNameUtil.OtherGeneralName"),ObjectIdUtil.toString(oid),"");  }}  }
class C{  public void testWriteByte() throws Exception {  ByteArrayOutputStream out=new ByteArrayOutputStream();  BitOutputStream bOut=new BitOutputStream(out);  bOut.writeBit(true);  byte[] bytes=out.toByteArray();  Assert.assertEquals(0,bytes.length);  bOut.write(2);  bytes=out.toByteArray();  Assert.assertEquals(2,bytes.length);  Assert.assertEquals(1,bytes[0]);  Assert.assertEquals(2,bytes[1]);}  }
class C{  public static boolean isObtuse(Coordinate p0,Coordinate p1,Coordinate p2){  double dx0=p0.x - p1.x;  double dy0=p0.y - p1.y;  double dx1=p2.x - p1.x;  double dy1=p2.y - p1.y;  double dotprod=dx0 * dx1 + dy0 * dy1;  return dotprod < 0;}  }
class C{  public boolean isDeclaredContravariant(){  return declaredContravariant;}  }
class C{  @NonNull public static Animator alpha(float alpha,float duration,@Nullable Interpolator interpolator){  TypedAction action=new TypedAction();  setPropertiesForAnimator(action,duration,interpolator);  action.setFloatTargets(alpha);  action.setType(ActionType.ALPHA);  return action;}  }
class C{  @Override public String toString(){  return getName();}  }
class C{  protected int hashCode(Object o1,Object o2,Object o3){  return (o1 == null ? 0 : o1.hashCode()) ^ (o2 == null ? 0 : o2.hashCode()) ^ (o3 == null ? 0 : o3.hashCode());}  }
class C{  public void cleanup() throws SyncException {  for (  SynchronizingStorageEngine store : storeRegistry.values()) {    store.cleanupTask();  }}  }
class C{  String readTimeZone(String source,int ofs){  int sp=source.indexOf(' ',ofs);  String fragment;  if (sp != -1) {    fragment=source.substring(ofs,sp);  } else {    fragment=source.substring(ofs);  }  int len=fragment.length();  if (len == 1) {    return fragment.equals("z") ? source.substring(ofs,1) : null;  }  if (len >= 8 && fragment.startsWith(GMT)) {    return source.substring(ofs);  }  int ch=fragment.charAt(0);  if (len >= 5 && (ch == SIGN_NEGATIVE || ch == SIGN_POSITIVE)) {    return source.substring(ofs,ofs + 5);  }  for (  String timezone[] : getDateFormatSymbols().getZoneStrings()) {    for (    String z : timezone) {      if (z.equalsIgnoreCase(fragment)) {        return source.substring(ofs,ofs + z.length());      }    }  }  return null;}  }
class C{  public ByteVector putByteArray(final byte[] b,final int off,final int len){  if (length + len > data.length) {    enlarge(len);  }  if (b != null) {    System.arraycopy(b,off,data,length,len);  }  length+=len;  return this;}  }
class C{  public static boolean isPowerOf2(int x){  if (x <= 0)   return false; else   return (x & (x - 1)) == 0;}  }
class C{  public void saveInBackground(final SaveCallback saveCallback,ProgressCallback progressCallback){  ParseTaskUtils.callbackOnMainThreadAsync(saveInBackground(progressCallback),saveCallback);}  }
class C{  public boolean isSecure(){  return this.secure;}  }
class C{  public void startDefaultAppium() throws Exception {  cp.runCommand("appium --session-override");  Thread.sleep(5000);}  }
class C{  private boolean checkNameFromNode(DefaultMutableTreeNode node,int startIndex,String startsWith){  Object info=node.getUserObject();  String result=null;  if ((info != null) && (info instanceof AbstractInfo)) {    result=((AbstractInfo)info).getName();  } else   if ((info != null) && (info instanceof String)) {    result=(String)info;  }  if (startIndex > 0) {    result=result.substring(startIndex);  }  return (result != null && result.startsWith(startsWith));}  }
class C{  protected DOMException createDOMException(short type,String key,Object[] args){  return element.createDOMException(type,key,args);}  }
class C{  public boolean isSendDunningLetter(){  Object oo=get_Value(COLUMNNAME_SendDunningLetter);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void checkFunctionNames(DelphiPMDNode node,RuleContext ctx){  List<String> currentNames=buildNames(node,false);  for (  String name : currentNames) {    for (    String globalName : functionNames) {      if (name.equalsIgnoreCase(globalName.toLowerCase()) && !name.equals(globalName)) {        addViolation(ctx,node,"Avoid mixing function names (found: '" + name + "' expected: '"+ globalName+ "').");      }    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:26.689 -0500",hash_original_method="AFE421B2404E9D3449EC1EC9B786EEAC",hash_generated_method="651144D5A2067F7374D2A7B2A2228594") public int rspRefCount(Message response){  int retVal=response.arg1;  if (DBG)   log("rspRefCount=" + retVal);  return retVal;}  }
class C{  public void initialize() throws PayloadException, NetworkException {  try {    UserProfile profile=ImsModule.getImsUserProfile();    xdmServerAddr=profile.getXdmServerAddr();    xdmServerLogin=profile.getXdmServerLogin();    xdmServerPwd=profile.getXdmServerPassword();    HttpResponse response=getXcapDocuments();    if (!response.isSuccessfullResponse()) {      throw new NetworkException("Failed to get successfull response from presence server!");    }    InputSource input=new InputSource(new ByteArrayInputStream(response.getContent()));    XcapDirectoryParser parser=new XcapDirectoryParser(input);    documents=parser.getDocuments();    Folder folder=documents.get("rls-services");    if ((folder == null) || (folder.getEntry() == null)) {      if (sLogger.isActivated()) {        sLogger.debug("The rls-services document does not exist");      }      setRcsList();    } else {      if (sLogger.isActivated()) {        sLogger.debug("The rls-services document already exists");      }    }    folder=documents.get("resource-lists");    if ((folder == null) || (folder.getEntry() == null)) {      if (sLogger.isActivated()) {        sLogger.debug("The resource-lists document does not exist");      }      setResourcesList();    } else {      if (sLogger.isActivated()) {        sLogger.debug("The resource-lists document already exists");      }    }    folder=documents.get("org.openmobilealliance.pres-rules");    if ((folder == null) || (folder.getEntry() == null)) {      if (sLogger.isActivated()) {        sLogger.debug("The org.openmobilealliance.pres-rules document does not exist");      }      setPresenceRules();    } else {      if (sLogger.isActivated()) {        sLogger.debug("The org.openmobilealliance.pres-rules document already exists");      }    }  } catch (  ParserConfigurationException e) {    throw new PayloadException("Can't parse the XCAP directory document!",e);  }catch (  SAXException e) {    throw new PayloadException("Can't parse the XCAP directory document!",e);  }catch (  IOException e) {    throw new NetworkException("Can't parse the XCAP directory document!",e);  }}  }
class C{  public CompositeComparator(Comparator[] cmp){  this(cmp,false);}  }
class C{  public final boolean sendEmptyMessageDelayed(int what,long delayMillis){  return mExec.sendEmptyMessageDelayed(what,delayMillis);}  }
class C{  public int startupNewWorker(final int priority,final String tcpUri,final String temporaryDirectory,int newWorkersCount){  this.newWorkersCount=newWorkersCount;  int actualWorkersStarted=startupNewWorker(priority,tcpUri,temporaryDirectory);  this.newWorkersCount=1;  return actualWorkersStarted;}  }
class C{  private void unregisterJMX() throws Exception {  String jmxObjectName=resources.getJMXObjectName();  MBeanServer mbs=ManagementFactory.getPlatformMBeanServer();  mbs.unregisterMBean(new ObjectName(jmxObjectName));  jmxBean.setSampledStatisticsEnabled(false);  getLog().info("Scheduler unregistered from name '" + jmxObjectName + "' in the local MBeanServer.");}  }
class C{  public Geo cross(Geo b,Geo ret){  ret.initialize(this.y() * b.z() - this.z() * b.y(),this.z() * b.x() - this.x() * b.z(),this.x() * b.y() - this.y() * b.x());  return ret;}  }
class C{  public static double calculateAnalyticalLogLikelihood(IntervalList intervals){  if (!intervals.isCoalescentOnly()) {    throw new IllegalArgumentException("Can only calculate analytical likelihood for pure coalescent intervals");  }  final double lambda=getLambda(intervals);  final int n=intervals.getSampleCount();  return (1 - n) * Math.log(lambda);}  }
class C{  boolean isEnumerator(JCTree t){  return t.hasTag(VARDEF) && (((JCVariableDecl)t).mods.flags & ENUM) != 0;}  }
class C{  private Bitmap scaleBitmap(Bitmap bitmap,float scale){  int width=(int)((float)bitmap.getWidth() * scale);  int height=(int)((float)bitmap.getHeight() * scale);  if (bitmap.getWidth() != width || bitmap.getHeight() != height) {    return Bitmap.createScaledBitmap(bitmap,width,height,true);  } else {    return bitmap;  }}  }
class C{  public static final Query createLuceneQuery(Operator operator,SearchQuery searchQuery){  Query luceneQuery=new MultiSearchParam(operator,searchQuery.getSearchParams().toArray(new SearchParam[0])).getLuceneQuery();  return new MultiSearchParam(operator,searchQuery.getSearchParams().toArray(new SearchParam[0])).getLuceneQuery();}  }
class C{  public static OracleRequest[] generatePkcs1Vectors(Certificate cert,CryptoConstants.Algorithm algorithm,boolean setEncryptedData) throws CryptoAttackException {  return generatePkcs1Vectors((RSAPublicKey)cert.getPublicKey(),algorithm,setEncryptedData);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Boolean.valueOf(Sage.getBoolean("mmc/pentium_4_fix",false));}  }
class C{  @Override public void onTimeTick(){  super.onTimeTick();  if (Log.isLoggable(TAG,Log.DEBUG)) {    Log.e(TAG,"onTimeTick: ambient = " + mAmbient);  }  invalidate();}  }
class C{  protected int validSubmissions(){  if (submissions == null)   return 0;  int size=0;  for (int i=submissions.size() - 1; i >= 0; i--) {    if (!submissions.elementAt(i).errors)     size++;  }  return size;}  }
class C{  public boolean isRouter(){  return router;}  }
class C{  List<HttpParameter> asPostParameterList(final char[] supportedParams,final String perPageParamName){  final List<HttpParameter> pagingParams=new ArrayList<HttpParameter>(supportedParams.length);  addPostParameter(supportedParams,'s',pagingParams,"since_id",getSinceId());  addPostParameter(supportedParams,'m',pagingParams,"max_id",getMaxId());  addPostParameter(supportedParams,'c',pagingParams,perPageParamName,getCount());  addPostParameter(supportedParams,'p',pagingParams,"page",getPage());  if (pagingParams.size() == 0)   return NULL_PARAMETER_LIST; else   return pagingParams;}  }
class C{  public static String[] list_to_strings(List l){  int len=l.size();  String[] ret=new String[len];  for (int i=0; i < len; i++) {    ret[i]=l.get(i).toString();  }  return ret;}  }
class C{  public static StoreResponse createStoreResponse(ParameterList params) throws MessageException {  StoreResponse resp=new StoreResponse(params);  if (!resp.isValid())   throw new MessageException("Invalid parameters for a store response");  if (DEBUG)   _log.debug("Created store response from parameter list:\n" + params);  return resp;}  }
class C{  private void scrollToChild(View child){  child.getDrawingRect(mTempRect);  offsetDescendantRectToMyCoords(child,mTempRect);  int scrollDelta=computeScrollDeltaToGetChildRectOnScreen(mTempRect);  if (scrollDelta != 0) {    scrollBy(0,scrollDelta);  }}  }
class C{  public OnlineBrowser(AssetPackLibrary lib){  initComponents();  this.lib=lib;  jEditorPane1.addHyperlinkListener(this);  try {    URL url=new URL("http://jmonkeyengine.org/assetpacks/list.php");    jEditorPane1.setPage(url);  } catch (  IOException ex) {    Exceptions.printStackTrace(ex);  }}  }
class C{  private static Choice parseChoiceElement(Element choiceElement) throws MissionParseException {  String id=choiceElement.getAttribute(CHOICE_ATTRIBUTE_ID);  String description=getDescription(choiceElement);  String nextMomentId=getNextMomentId(choiceElement);  Outcome outcome=parseOutcomeElement(findSingleChildElementByTag(choiceElement,ELEMENT_OUTCOME));  boolean requiresChargedWeapon=false;  if (id.equals(MissionParser.FIRE_WEAPON_CHOICE_ID)) {    requiresChargedWeapon=true;  }  ArrayList<String> fictionalProgress=parseNestedFictionalProgress(choiceElement);  String iconName=parseIconElement(findSingleChildElementByTag(choiceElement,ELEMENT_ICON));  return new Choice(id,description,nextMomentId,outcome,requiresChargedWeapon,fictionalProgress,iconName);}  }
class C{  public void writeEnd(String name,String prefix) throws Exception {  String text=indenter.pop();  if (last == Tag.START) {    write('/');    write('>');  } else {    if (last != Tag.TEXT) {      write(text);    }    if (last != Tag.START) {      write('<');      write('/');      write(name,prefix);      write('>');    }  }  last=Tag.END;}  }
class C{  public static double distanceKM(double lat1,double lon1,double lat2,double lon2){  return Geo.distanceKM(new Geo(lat1,lon1),new Geo(lat2,lon2));}  }
class C{  @Override public String toString(){  return "" + seconds;}  }
class C{  public double optDouble(int index,double defaultValue){  try {    return this.getDouble(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public static void addToIntersection(List<Type> list,Type type,Unit unit){  if (type == null || !list.isEmpty() && type.isAnything()) {    return;  } else   if (type.isExactlyNothing()) {    list.clear();    list.add(type);  } else   if (type.isIntersection()) {    List<Type> satisfiedTypes=type.getSatisfiedTypes();    for (int i=0, size=satisfiedTypes.size(); i < size; i++) {      Type t=satisfiedTypes.get(i);      addToIntersection(list,t,unit);    }  } else {    if (type.isWellDefined()) {      TypeDeclaration dec=type.getDeclaration();      for (int i=0; i < list.size(); i++) {        Type t=list.get(i).resolveAliases();        if (t.isSubtypeOf(type)) {          return;        } else         if (type.isSubtypeOf(t)) {          list.remove(i);          i--;        } else         if (disjoint(type,t,unit)) {          list.clear();          list.add(unit.getNothingType());          return;        } else {          if (type.isDeclaredType() && t.isDeclaredType() && t.getDeclaration().equals(dec)&& !type.containsUnknowns()&& !t.containsUnknowns()) {            Type pi=principalInstantiation(dec,type,t,unit);            if (pi != null && !pi.containsUnknowns()) {              list.remove(i);              list.add(pi);              return;            }          }        }      }      if (list.size() > 1) {        Type t=canonicalIntersection(list,unit);        if (type.isSupertypeOf(t)) {          return;        }      }      list.add(type);    }  }}  }
class C{  public final void requestSequenceDet(boolean value) throws GSSException {  if (state == STATE_NEW && isInitiator())   sequenceDetState=value;}  }
class C{  private static boolean confirmPerspectiveSwitch(IWorkbenchWindow window,IPerspectiveDescriptor finalPersp){  IPreferenceStore store=IDEWorkbenchPlugin.getDefault().getPreferenceStore();  String pspm=store.getString(IDEInternalPreferences.PROJECT_SWITCH_PERSP_MODE);  if (!IDEInternalPreferences.PSPM_PROMPT.equals(pspm)) {    return IDEInternalPreferences.PSPM_ALWAYS.equals(pspm);  }  String desc=finalPersp.getDescription();  String message;  if (desc == null || desc.length() == 0)   message=NLS.bind(ResourceMessages.NewProject_perspSwitchMessage,finalPersp.getLabel()); else   message=NLS.bind(ResourceMessages.NewProject_perspSwitchMessageWithDesc,new String[]{finalPersp.getLabel(),desc});  MessageDialogWithToggle dialog=MessageDialogWithToggle.openYesNoQuestion(window.getShell(),ResourceMessages.NewProject_perspSwitchTitle,message,null,false,store,IDEInternalPreferences.PROJECT_SWITCH_PERSP_MODE);  int result=dialog.getReturnCode();  if (dialog.getToggleState()) {    String preferenceValue;    if (result == IDialogConstants.YES_ID) {      preferenceValue=IWorkbenchPreferenceConstants.OPEN_PERSPECTIVE_REPLACE;    } else {      preferenceValue=IWorkbenchPreferenceConstants.NO_NEW_PERSPECTIVE;    }    PrefUtil.getAPIPreferenceStore().setValue(IDE.Preferences.PROJECT_OPEN_NEW_PERSPECTIVE,preferenceValue);  }  return result == IDialogConstants.YES_ID;}  }
class C{  protected WizardBranchController(WizardPage onlyPage){  this(WizardPage.createWizardPanelProvider(onlyPage));}  }
class C{  private static String normalizePath(String path){  try {    URI uri=URI.create(path);    uri=uri.normalize();    path=uri.toString();  } catch (  IllegalArgumentException ex) {    EFLogger.error("Illegal path: " + path);    return "";  }catch (  Exception ex) {    EFLogger.error("invalid path: " + path);    return "";  }  if (path.charAt(0) == '/') {    path=path.substring(1);  }  return path;}  }
class C{  @Override public void clear(){  removeAllElements();}  }
class C{  public void run(){  Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);  State state=new State(mInfo,mService);  AndroidHttpClient client=null;  PowerManager.WakeLock wakeLock=null;  int finalStatus=DownloaderService.STATUS_UNKNOWN_ERROR;  try {    PowerManager pm=(PowerManager)mContext.getSystemService(Context.POWER_SERVICE);    wakeLock=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,Constants.TAG);    wakeLock.acquire();    if (Constants.LOGV) {      Log.v(Constants.TAG,"initiating download for " + mInfo.mFileName);      Log.v(Constants.TAG,"  at " + mInfo.mUri);    }    client=AndroidHttpClient.newInstance(userAgent(),mContext);    boolean finished=false;    while (!finished) {      if (Constants.LOGV) {        Log.v(Constants.TAG,"initiating download for " + mInfo.mFileName);        Log.v(Constants.TAG,"  at " + mInfo.mUri);      }      ConnRouteParams.setDefaultProxy(client.getParams(),getPreferredHttpHost(mContext,state.mRequestUri));      HttpGet request=new HttpGet(state.mRequestUri);      try {        executeDownload(state,client,request);        finished=true;      } catch (      RetryDownload exc) {      } finally {        request.abort();        request=null;      }    }    if (Constants.LOGV) {      Log.v(Constants.TAG,"download completed for " + mInfo.mFileName);      Log.v(Constants.TAG,"  at " + mInfo.mUri);    }    finalizeDestinationFile(state);    finalStatus=DownloaderService.STATUS_SUCCESS;  } catch (  StopRequest error) {    Log.w(Constants.TAG,"Aborting request for download " + mInfo.mFileName + ": "+ error.getMessage());    error.printStackTrace();    finalStatus=error.mFinalStatus;  }catch (  Throwable ex) {    Log.w(Constants.TAG,"Exception for " + mInfo.mFileName + ": "+ ex);    finalStatus=DownloaderService.STATUS_UNKNOWN_ERROR;  } finally {    if (wakeLock != null) {      wakeLock.release();      wakeLock=null;    }    if (client != null) {      client.close();      client=null;    }    cleanupDestination(state,finalStatus);    notifyDownloadCompleted(finalStatus,state.mCountRetry,state.mRetryAfter,state.mRedirectCount,state.mGotData,state.mFilename);  }}  }
class C{  @Override public void optimize(TupleExpr tupleExpr,Dataset dataset,BindingSet bindings){  ConstantVisitor visitor=new ConstantVisitor();  tupleExpr.visit(visitor);  Set<String> varsBefore=visitor.varNames;  VarNameCollector varCollector=new VarNameCollector();  tupleExpr.visit(varCollector);  Set<String> varsAfter=varCollector.varNames;  if (varsAfter.size() < varsBefore.size()) {    varsBefore.removeAll(varsAfter);    for (    ProjectionElemList projElems : visitor.projElemLists) {      for (      ProjectionElem projElem : projElems.getElements()) {        String name=projElem.getSourceName();        if (varsBefore.contains(name)) {          UnaryTupleOperator proj=(UnaryTupleOperator)projElems.getParentNode();          Extension ext=new Extension(proj.getArg());          proj.setArg(ext);          Var lostVar=new Var(name);          Value value=bindings.getValue(name);          if (value != null) {            lostVar.setValue(value);          }          ext.addElement(new ExtensionElem(lostVar,name));        }      }    }  }}  }
class C{  public void loadStyledAttributes(AttributeSet attrs,int defStyleAttr){  if (attrs != null) {    final TypedArray attributes=mContext.getTheme().obtainStyledAttributes(attrs,R.styleable.CircularViewPager,defStyleAttr,0);    mBarColor=attributes.getColor(R.styleable.CircularViewPager_progress_arc_clockwise_color,default_bar_color);    mBarWidth=attributes.getDimension(R.styleable.CircularViewPager_progress_arc_clockwise_width,default_bar_width);    setMax(attributes.getInt(R.styleable.CircularViewPager_progress_arc_max,100));    attributes.recycle();    initializePainters();  }}  }
class C{  protected void updateBoundariesAndOrWeights(){  if (m_Weights != null) {    return;  }  double mean=m_WeightedSum / m_SumOfWeights;  double variance=m_WeightedSumSquared / m_SumOfWeights - mean * mean;  if (variance < 0) {    variance=0;  }  m_Width=Math.sqrt(variance) * Math.pow(m_SumOfWeights,m_Exponent);  if (m_Width <= m_MinWidth) {    m_Width=m_MinWidth;  }  if (getUpdateWeightsOnly()) {    updateWeightsOnly();  } else {    updateBoundariesAndWeights();  }}  }
class C{  public boolean addComment(Note bug,NoteComment comment){  if (!bug.isNew()) {    Log.d(DEBUG_TAG,"adding note comment" + bug.getId());    HttpURLConnection connection=null;    try {      try {        String encodedComment=URLEncoder.encode(comment.getText(),"UTF-8");        URL addCommentUrl=getAddCommentUrl(Long.toString(bug.getId()),encodedComment);        connection=openConnectionForWriteAccess(addCommentUrl,"POST","text/url");        OutputStreamWriter out=new OutputStreamWriter(connection.getOutputStream(),Charset.defaultCharset());        out.flush();        if (connection.getResponseCode() != HttpURLConnection.HTTP_OK) {          throwUnexpectedRequestException(connection);        }        parseBug(bug,connection.getInputStream());        return true;      } catch (      XmlPullParserException e) {        Log.e(DEBUG_TAG,"addComment:Exception",e);      }catch (      IOException e) {        Log.e(DEBUG_TAG,"addComment:Exception",e);      }    }  finally {      disconnect(connection);    }  }  return false;}  }
class C{  @PUT @Path("/{id}/role-assignments") @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SECURITY_ADMIN,Role.TENANT_ADMIN},blockProxies=true) public RoleAssignments updateRoleAssignments(@PathParam("id") URI id,RoleAssignmentChanges changes){  TenantOrg tenant=getTenantById(id,true);  _permissionsHelper.updateRoleAssignments(tenant,changes,new TenantRoleInputFilter(tenant));  _dbClient.updateAndReindexObject(tenant);  recordTenantEvent(OperationTypeEnum.MODIFY_TENANT_ROLES,tenant.getId(),tenant.getId());  auditOp(OperationTypeEnum.MODIFY_TENANT_ROLES,true,null,tenant.getId().toString(),tenant.getLabel(),changes);  return getRoleAssignmentsResponse(tenant);}  }
class C{  @Override public void draw(Graphics2D g){  if (getEditor().getTool().supportsHandleInteraction()) {    drawDiamond(g,(Color)getEditor().getHandleAttribute(HandleAttributeKeys.TRANSFORM_HANDLE_FILL_COLOR),(Color)getEditor().getHandleAttribute(HandleAttributeKeys.TRANSFORM_HANDLE_STROKE_COLOR));  } else {    drawDiamond(g,(Color)getEditor().getHandleAttribute(HandleAttributeKeys.TRANSFORM_HANDLE_FILL_COLOR_DISABLED),(Color)getEditor().getHandleAttribute(HandleAttributeKeys.TRANSFORM_HANDLE_STROKE_COLOR_DISABLED));  }}  }
class C{  private static byte[] generateSeed(){  try {    ByteArrayOutputStream seedBuffer=new ByteArrayOutputStream();    DataOutputStream seedBufferOut=new DataOutputStream(seedBuffer);    seedBufferOut.writeLong(System.currentTimeMillis());    seedBufferOut.writeLong(System.nanoTime());    seedBufferOut.writeInt(Process.myPid());    seedBufferOut.writeInt(Process.myUid());    seedBufferOut.write(BUILD_FINGERPRINT_AND_DEVICE_SERIAL);    seedBufferOut.close();    return seedBuffer.toByteArray();  } catch (  IOException e) {    throw new SecurityException("Failed to generate seed",e);  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:22.769 -0500",hash_original_method="78B640B3511AD026106C387D36058FFC",hash_generated_method="079CB038114B3C01EA312AE5CCEF3330") public void clear(){  mSize=0;}  }
class C{  public void insertLocation(Location l){  LocationEntity entity=searchLocationEntity(l);  if (entity == null) {    new DaoMaster(getDatabase()).newSession().getLocationEntityDao().insert(LocationEntity.build(l));  } else {    entity.location=l.location;    entity.realLocation=l.realLocation;    updateLocation(entity);  }}  }
class C{  private void initAttributes() throws ValueStorageException, ProjectTypeConstraintException, ServerException, NotFoundException {  Set<Attribute> invalidAttributes=new HashSet<>();  for (  Map.Entry<String,Attribute> entry : types.getAttributeDefs().entrySet()) {    final Attribute definition=entry.getValue();    final String name=entry.getKey();    AttributeValue value=new AttributeValue(config.getAttributes().get(name));    if (!definition.isVariable()) {      attributes.put(name,definition.getValue());    } else {      final Variable variable=(Variable)definition;      if (variable.isValueProvided()) {        final ValueProvider valueProvider=variable.getValueProviderFactory().newInstance(folder);        if (folder != null) {          if (!valueProvider.isSettable() || value.isEmpty()) {            value=new AttributeValue(valueProvider.getValues(name));          } else {            valueProvider.setValues(name,value.getList());          }        } else {          continue;        }      }      if (value.isEmpty() && variable.isRequired()) {        this.problems.add(new Problem(13,"Value for required attribute is not initialized " + variable.getId()));        invalidAttributes.add(variable);      }      if (!value.isEmpty()) {        this.attributes.put(name,value);      }    }  }  types.reset(invalidAttributes);}  }
class C{  synchronized void cleanup(){  if (debug)   System.err.println("EventSupport clean up");  if (notifiers != null) {    for (    NamingEventNotifier notifier : notifiers.values()) {      notifier.stop();    }    notifiers=null;  }  if (eventQueue != null) {    eventQueue.stop();    eventQueue=null;  }}  }
class C{  private void addMultimediaMessaging(MultimediaMessagingSessionImpl multimediaMessaging){  if (sLogger.isActivated()) {    sLogger.debug("Add a MultimediaMessaging in the list (size=" + mMultimediaMessagingCache.size() + ")");  }  mMultimediaMessagingCache.put(multimediaMessaging.getSessionId(),multimediaMessaging);}  }
class C{  public DualInetAddress loadInetAddressFromCoordinator(String nodeId){  DualInetAddress dualAddress=null;  InterProcessLock lock=null;  try {    lock=getLock(NODE_DUALINETADDR_CONFIG + nodeId);    lock.acquire();    Configuration config=queryConfiguration(Constants.NODE_DUALINETADDR_CONFIG,nodeId);    if (config != null) {      dualAddress=parseInetAddressConfig(config);    }  } catch (  Exception e) {    log.warn("Unexpected exception during loadInetAddressFromCoordinator()",e);  } finally {    if (lock != null) {      try {        lock.release();      } catch (      Exception e) {        log.warn("Unexpected exception unlocking loadInetAddressFromCoordinator()",e);      }    }  }  if (dualAddress != null) {    inetAddressLookupMap.put(nodeId,dualAddress);  }  return dualAddress;}  }
class C{  public void createEndLiveRange(Register reg,BasicBlock block,Instruction inst){  if (DEBUG) {    System.out.println("Marking Register " + reg + "'s live range as ENDing at instruction\n   "+ inst+ " in block #"+ block.getNumber());    printLiveIntervalList(block);  }  if (!containsUnresolvedElement(block,reg)) {    LiveIntervalElement elem=new LiveIntervalElement(reg,null,inst);    prependLiveIntervalElement(block,elem);  }}  }
class C{  private Element drawLine(DBIDRef iter){  SVGPath path=new SVGPath();  double[] yPos=proj.fastProjectDataToRenderSpace(relation.get(iter));  boolean draw=false, drawprev=false, drawn=false;  for (int i=0; i < yPos.length; i++) {    if (yPos[i] != yPos[i]) {      draw=false;      drawprev=false;      continue;    }    if (draw) {      if (drawprev) {        path.moveTo(getVisibleAxisX(i - 1),yPos[i - 1]);        drawprev=false;      }      path.lineTo(getVisibleAxisX(i),yPos[i]);      drawn=true;    } else {      drawprev=true;    }    draw=true;  }  if (!drawn) {    return null;  }  return path.makeElement(svgp);}  }
class C{  private void encodeStubInAddress(RMIServer rmiServer,Map<String,?> attributes) throws IOException {  final String protocol, host;  final int port;  if (address == null) {    if (IIOPHelper.isStub(rmiServer))     protocol="iiop"; else     protocol="rmi";    host=null;    port=0;  } else {    protocol=address.getProtocol();    host=(address.getHost().equals("")) ? null : address.getHost();    port=address.getPort();  }  final String urlPath=encodeStub(rmiServer,attributes);  address=new JMXServiceURL(protocol,host,port,urlPath);}  }
class C{  public void changeMode(){  currentMode=(currentMode + 1) % 4;  Log.v(TAG,"[NatureBinder] changeMode : " + currentMode);  Toast.makeText(MusicService.this,MODE_DESC[currentMode],Toast.LENGTH_SHORT).show();}  }
class C{  @Override public boolean createNodeConnection(UUID node1,UUID node2){  if ((exitNodeMap.containsKey(node1)) || (exitNodeMap.containsKey(node2))) {    return false;  }  return graphServer.addEdge(node1,node2) && graphServer.addEdge(node2,node1);}  }
class C{  public int readSynchSafeInt(){  int b1=readUnsignedByte();  int b2=readUnsignedByte();  int b3=readUnsignedByte();  int b4=readUnsignedByte();  return (b1 << 21) | (b2 << 14) | (b3 << 7)| b4;}  }
class C{  static public void addQueryParams(final StringBuilder urlString,final Map<String,String[]> requestParams) throws UnsupportedEncodingException {  if (requestParams == null)   return;  boolean first=true;  for (  Map.Entry<String,String[]> e : requestParams.entrySet()) {    final String name=e.getKey();    final String[] vals=e.getValue();    if (vals == null) {      urlString.append(first ? "?" : "&");      first=false;      urlString.append(URLEncoder.encode(name,RemoteRepository.UTF8));    } else {      for (      String val : vals) {        urlString.append(first ? "?" : "&");        first=false;        urlString.append(URLEncoder.encode(name,RemoteRepository.UTF8));        urlString.append("=");        if (val != null)         urlString.append(URLEncoder.encode(val,RemoteRepository.UTF8));      }    }  }}  }
class C{  private int calculateTranslation(View view){  int height=view.getHeight();  ViewGroup.MarginLayoutParams params=(ViewGroup.MarginLayoutParams)view.getLayoutParams();  int margins=params.topMargin + params.bottomMargin;  return height + margins;}  }
class C{  public XBeeConfiguration withMaxQueueSize(int size){  if (size <= 0) {    throw new IllegalArgumentException("Size must be > 0");  }  this.maxQueueSize=size;  return this;}  }
class C{  public int minMapQ(){  return mMinMapQ;}  }
class C{  public SQLIntegrityConstraintViolationException(String reason){  super(reason,null,0);}  }
class C{  public static ResourceSnippet createResourceSnippet(Resource res,int startChar,int endChar,String charset){  try {    return createResourceSnippet(res.getInputStream(),startChar,endChar,charset);  } catch (  IOException ex) {    return ResourceSnippet.Empty;  }}  }
class C{  public BitmapDrawer dpSize(@NonNull Context context){  mDpSize=true;  mBitmapDpWidth=Util.convertPixelsToDp(mBitmap.getWidth(),context);  mBitmapDpHeight=Util.convertPixelsToDp(mBitmap.getHeight(),context);  mBitmapRect=new Rect(0,0,mBitmap.getWidth(),mBitmap.getHeight());  mDpSizeRect=new RectF();  return this;}  }
class C{  private static boolean isDeleteKeyChord(KeyEvent event){  int keyCode=event.getKeyCode();  return (keyCode == KeyEvent.KEYCODE_DEL || keyCode == KeyEvent.KEYCODE_FORWARD_DEL) && event.hasModifiers(KeyEvent.META_CTRL_ON);}  }
class C{  private static GetVmNetworkResponse checkGetVmNetworkResponse(GetVmNetworkResponse getVmNetworkResponse) throws RpcException {  logger.info("Checking {}",getVmNetworkResponse);switch (getVmNetworkResponse.getResult()) {case OK:    break;case SYSTEM_ERROR:  throw new SystemErrorException(getVmNetworkResponse.getError());case VM_NOT_FOUND:throw new VmNotFoundException(getVmNetworkResponse.getError());default :throw new RpcException(String.format("Unknown result: %s",getVmNetworkResponse.getResult()));}return getVmNetworkResponse;}  }
class C{  public PopupMenuUnsetActiveSession(){  super(Constant.messages.getString("httpsessions.popup.session.active.unset"));  initialize();}  }
class C{  public void init(DSAParameterGenerationParameters params){  this.use186_3=true;  this.L=params.getL();  this.N=params.getN();  this.certainty=params.getCertainty();  this.random=params.getRandom();  this.usageIndex=params.getUsageIndex();  if ((L < 1024 || L > 3072) || L % 1024 != 0) {    throw new IllegalArgumentException("L values must be between 1024 and 3072 and a multiple of 1024");  } else   if (L == 1024 && N != 160) {    throw new IllegalArgumentException("N must be 160 for L = 1024");  } else   if (L == 2048 && (N != 224 && N != 256)) {    throw new IllegalArgumentException("N must be 224 or 256 for L = 2048");  } else   if (L == 3072 && N != 256) {    throw new IllegalArgumentException("N must be 256 for L = 3072");  }  if (digest.getDigestSize() * 8 < N) {    throw new IllegalStateException("Digest output size too small for value of N");  }}  }
class C{  public boolean isEditable(){  return m_TextCode.isEditable();}  }
class C{  public String readLine() throws IOException {  ByteArrayOutputStream baos=new ByteArrayOutputStream(512);  boolean empty=false;  while (true) {    byte chr=(byte)bis.read();    if (chr != -1) {      if (chr == '\n') {        skipLineFeed=false;        break;      }      if (chr == '\r') {        if (skipLineFeed) {          break;        }        continue;      }      baos.write(chr);    } else {      if (baos.toByteArray().length == 0) {        empty=true;      }      break;    }  }  if (!empty) {    byte[] byteArray=baos.toByteArray();    reverse(byteArray);    return encoding == null ? new String(byteArray) : new String(byteArray,encoding);  }  return null;}  }
class C{  public ConnectionConfig(jmri.jmrix.SerialPortAdapter p){  super(p);}  }
class C{  public boolean isUILocked(){  return m_isLocked;}  }
class C{  public void readToToken(int tok) throws CoreException {  int curr=0;  do {    curr=readNext(false);  } while (curr != tok);}  }
class C{  public static double reweightExamples(ExampleSet exampleSet,ContingencyMatrix cm,boolean allowMarginalSkews) throws OperatorException {  Iterator<Example> reader=exampleSet.iterator();  double totalWeight=0;  Attribute labelAttribute=exampleSet.getAttributes().getLabel();  Attribute predictedLabel=exampleSet.getAttributes().getPredictedLabel();  Attribute weightAttribute=exampleSet.getAttributes().getWeight();  while (reader.hasNext()) {    Example example=reader.next();    int label=(int)example.getValue(labelAttribute);    int predicted=(int)example.getValue(predictedLabel);    double lift=cm.getLift(label,predicted);    if (Double.isNaN(lift) || lift < 0) {      LogService.getRoot().log(Level.WARNING,"com.rapidminer.operator.learner.meta.WeightedPerformanceMeasures.applied_rule_with_illegal_lift",lift);    } else     if (lift == 0 || Double.isInfinite(lift)) {      example.setValue(weightAttribute,0);    } else {      double weight=example.getValue(weightAttribute);      double newWeight;      if (Double.isNaN(weight) || Double.isInfinite(weight) || weight < 0) {        LogService.getRoot().log(Level.WARNING,"com.rapidminer.operator.learner.meta.WeightedPerformanceMeasures.found_illegal_weight",weight);        newWeight=0;      } else       if (weight == 0) {        continue;      } else       if (allowMarginalSkews) {        double prec=cm.getPrecision(label,predicted);        double invPrec=1 - prec;        double beta=invPrec / prec;        if (prec <= 0 || invPrec < 0 || Double.isInfinite(beta) || Double.isNaN(beta)) {          LogService.getRoot().log(Level.WARNING,"com.rapidminer.operator.learner.meta.WeightedPerformanceMeasures.reweighting_uses_invalid_value",new Object[]{prec,invPrec,beta});        }        newWeight=weight * Math.sqrt(beta);      } else {        newWeight=weight / lift;      }      example.setValue(weightAttribute,newWeight);      totalWeight+=newWeight;    }  }  return totalWeight;}  }
class C{  public void recomposeTemplates(boolean flushFirst) throws TransformerException {}  }
class C{  protected static Map<String,String> convertHeaders(Header[] headers){  Map<String,String> result=new TreeMap<String,String>(String.CASE_INSENSITIVE_ORDER);  for (int i=0; i < headers.length; i++) {    result.put(headers[i].getName(),headers[i].getValue());  }  return result;}  }
class C{  public final boolean sendEmptyMessage(int what){  return mExec.sendEmptyMessage(what);}  }
class C{  public ShapeData(DrawContext dc,AbstractGeneralShape shape){  super(dc,shape.minExpiryTime,shape.maxExpiryTime);}  }
class C{  public void updateActionsStatus(){  boolean textSelected=manager.isTextSelected();  boolean lengthModifiable=textSelected && !manager.isOverwriteMode();  IActionBars bars=getEditorSite().getActionBars();  IAction action=bars.getGlobalActionHandler(IWorkbenchCommandConstants.EDIT_UNDO);  if (action != null)   action.setEnabled(manager.canUndo());  action=bars.getGlobalActionHandler(IWorkbenchCommandConstants.EDIT_REDO);  if (action != null)   action.setEnabled(manager.canRedo());  action=bars.getGlobalActionHandler(IWorkbenchCommandConstants.EDIT_CUT);  if (action != null)   action.setEnabled(lengthModifiable);  action=bars.getGlobalActionHandler(IWorkbenchCommandConstants.EDIT_COPY);  if (action != null)   action.setEnabled(textSelected);  action=bars.getGlobalActionHandler(IWorkbenchCommandConstants.EDIT_DELETE);  if (action != null)   action.setEnabled(lengthModifiable);  bars.updateActionBars();}  }
class C{  public Interval withStart(ReadableInstant start){  long startMillis=DateTimeUtils.getInstantMillis(start);  return withStartMillis(startMillis);}  }
class C{  private int readServerResponse() throws IOException {  StringBuffer replyBuf=new StringBuffer(32);  int c;  int continuingCode=-1;  int code;  String response;  serverResponse.setSize(0);  while (true) {    while ((c=in.read()) != -1) {      if (c == '\r') {        if ((c=in.read()) != '\n') {          replyBuf.append('\r');        }      }      replyBuf.append((char)c);      if (c == '\n') {        break;      }    }    response=replyBuf.toString();    replyBuf.setLength(0);    if (logger.isLoggable(PlatformLogger.Level.FINEST)) {      logger.finest("Server [" + serverAddr + "] --> "+ response);    }    if (response.length() == 0) {      code=-1;    } else {      try {        code=Integer.parseInt(response.substring(0,3));      } catch (      NumberFormatException e) {        code=-1;      }catch (      StringIndexOutOfBoundsException e) {        continue;      }    }    serverResponse.addElement(response);    if (continuingCode != -1) {      if (code != continuingCode || (response.length() >= 4 && response.charAt(3) == '-')) {        continue;      } else {        continuingCode=-1;        break;      }    } else     if (response.length() >= 4 && response.charAt(3) == '-') {      continuingCode=code;      continue;    } else {      break;    }  }  return code;}  }
class C{  protected void backgroundImpl(PImage image){  set(0,0,image);}  }
class C{  private static <T>T createEnumerationSetting(final Map<String,String> rawSettings,final String settingName,final T defaultValue,final IParser<T> parser){  final String settingString=rawSettings.get(settingName);  if ((settingString != null) && Convert.isDecString(settingString)) {    try {      return parser.parse(Integer.parseInt(settingString));    } catch (    final Exception exception) {      CUtilityFunctions.logException(exception);      return defaultValue;    }  } else {    return defaultValue;  }}  }
class C{  public boolean equalsIgnoreSource(Country country){  return country != null && mCountryIso.equals(country.getCountryIso());}  }
class C{  public void clear(){  for (int i=0; i < this.counters.length; i++) {    this.cachedCounters[i]=this.counters[i];    this.counters[i]=0;  }  this.cachedContacts.clear();  this.cachedContacts.addAll(this.contacts);  this.contacts.clear();}  }
class C{  public static int findSplitpoint(String s,int width){  int in=s.indexOf(NEWLINE);  if (in < 0) {    in=s.length();  }  if (in < width) {    return in;  }  int iw=s.lastIndexOf(' ',width);  if (iw >= 0 && iw < width) {    return iw;  }  int bp=nextPosition(s.indexOf(' ',width),s.indexOf(NEWLINE,width));  if (bp >= 0) {    return bp;  }  return s.length();}  }
class C{  public double[] distributionForInstance(Instance instance) throws Exception {  int num_classes=(int)(snumClasses);  double[] ranking=new double[num_classes];  SortPair[] sortedActivations=ARTActivateCategories(instance);  java.util.Arrays.sort(sortedActivations);  double s0=sortedActivations[0].getValue();  double diff_act=s0 - sortedActivations[numCategories - 2].getValue();  int largest_activ=1;  double activ_change=0;  for (int i=1; i < sortedActivations.length; i++) {    activ_change=(s0 - sortedActivations[i].getValue()) / s0;    if (activ_change > threshold * diff_act) {      break;    }    largest_activ=largest_activ + 1;  }  double[] best_matches=new double[largest_activ];  java.util.Arrays.fill(best_matches,1);  best_matches[0]=s0;  for (int i=1; i < largest_activ; i++) {    best_matches[i]=sortedActivations[i].getValue();  }  double sum_mat=sumArray(best_matches);  int currentCategory=0;  this.neuronsactivated=new int[largest_activ];  this.neuronsactivity=new double[largest_activ];  for (int i=0; i < largest_activ; i++) {    this.neuronsactivity[i]=best_matches[i];    best_matches[i]=best_matches[i] / sum_mat;    currentCategory=sortedActivations[i].getOriginalIndex();    this.neuronsactivated[i]=currentCategory;    Set<Integer> s1=weightsB[currentCategory].keySet();    for (    int j : s1) {      ranking[j]=ranking[j] + best_matches[i] * (Double)weightsB[currentCategory].get(j);    }  }  this.nrinstclassified+=1;  if (m_userankstoclass) {    return ARAMm_Ranking2Class(ranking);  }  return ranking;}  }
class C{  public static Object[] putAll(){  try {    Region region=cache.getRegion(Region.SEPARATOR + REGION_NAME);    assertNotNull(region);    Map map=new LinkedHashMap();    map.put(PUTALL_KEY1,"value1");    map.put(PUTALL_KEY2,"value1");    map.put(PUTALL_KEY3,"value1");    map.put(PUTALL_KEY4,"value1");    map.put(PUTALL_KEY5,"value1");    region.putAll(map);    Thread.sleep(5000);    EventID[] evids=new EventID[5];    evids[0]=putAlleventId1;    evids[1]=putAlleventId2;    evids[2]=putAlleventId3;    evids[3]=putAlleventId4;    evids[4]=putAlleventId5;    assertNotNull(evids[0]);    assertNotNull(evids[1]);    assertNotNull(evids[2]);    assertNotNull(evids[3]);    assertNotNull(evids[4]);    return evids;  } catch (  Exception e) {    fail("put failed due to ",e);  }  return null;}  }
class C{  private String parseClassName(String className){  String result=className;  if (className.trim().endsWith("[I")) {    result="<html><body><b>int[]</b></body></html>";  } else   if (className.trim().endsWith("[B")) {    result="<html><body><b>byte[]</b></body></html>";  } else   if (className.trim().endsWith("[C")) {    result="<html><body><b>char[]</b></body></html>";  } else   if (className.trim().endsWith("[L")) {    result="<html><body><b>long[]</b></body></html>";  } else   if (className.trim().startsWith("<")) {    className=className.replaceAll("<","&lt;");    className=className.replaceAll(">","&gt;");    result="<html><body><i><b>" + className + "</i></b> [internal HotSpot]</i></body></html>";  } else   if (className.lastIndexOf('.') > 0) {    result="<html><body>" + className.substring(0,className.lastIndexOf('.') + 1) + "<b>"+ className.substring(className.lastIndexOf('.') + 1)+ "</b></body></html>";  }  if (className.trim().startsWith("[[")) {    result=result.replaceAll("\\[\\]","[][]");  }  return (result);}  }
class C{  public void dup2(){  mv.visitInsn(Opcodes.DUP2);}  }
class C{  public boolean equals(Object other){  if (!(other instanceof lr_item_core))   return false; else   return equals((lr_item_core)other);}  }
class C{  public static Angle fromDMS(String dmsString){  if (dmsString == null) {    throw new IllegalArgumentException("String Is Null");  }  String regex="([-|\\+]?\\d{1,3}[d|D|\u00B0|\\s](\\s*\\d{1,2}['|\u2019|\\s])?" + "(\\s*\\d{1,2}[\"|\u201d|\\s])?\\s*([N|n|S|s|E|e|W|w])?\\s?)";  Pattern pattern=Pattern.compile(regex);  Matcher matcher=pattern.matcher(dmsString + " ");  if (!matcher.matches()) {    throw new IllegalArgumentException("Argument Out Of Range");  }  dmsString=dmsString.replaceAll("[D|d|\u00B0|'|\u2019|\"|\u201d]"," ");  dmsString=dmsString.replaceAll("\\s+"," ");  dmsString=dmsString.trim();  int sign=1;  char suffix=dmsString.toUpperCase().charAt(dmsString.length() - 1);  if (!Character.isDigit(suffix)) {    sign=(suffix == 'S' || suffix == 'W') ? -1 : 1;    dmsString=dmsString.substring(0,dmsString.length() - 1);    dmsString=dmsString.trim();  }  char prefix=dmsString.charAt(0);  if (!Character.isDigit(prefix)) {    sign*=(prefix == '-') ? -1 : 1;    dmsString=dmsString.substring(1,dmsString.length());  }  String[] DMS=dmsString.split(" ");  int d=Integer.parseInt(DMS[0]);  int m=DMS.length > 1 ? Integer.parseInt(DMS[1]) : 0;  int s=DMS.length > 2 ? Integer.parseInt(DMS[2]) : 0;  return fromDMS(d,m,s).multiply(sign);}  }
class C{  public void onConfigurationChanged(Configuration newConfig){  for (  CordovaPlugin plugin : this.pluginMap.values()) {    if (plugin != null) {      plugin.onConfigurationChanged(newConfig);    }  }}  }
class C{  public static int cs_ereach(Scs A,int k,int[] parent,int[] s,int s_offset,int[] w){  int i, p, n, len, top, Ap[], Ai[];  if (!Scs_util.CS_CSC(A) || parent == null || s == null || w == null)   return (-1);  top=n=A.n;  Ap=A.p;  Ai=A.i;  Scs_util.CS_MARK(w,k);  for (p=Ap[k]; p < Ap[k + 1]; p++) {    i=Ai[p];    if (i > k)     continue;    for (len=0; !Scs_util.CS_MARKES(w,i); i=parent[i]) {      s[s_offset + len++]=i;      Scs_util.CS_MARK(w,i);    }    while (len > 0)     s[s_offset + --top]=s[s_offset + --len];  }  for (p=top; p < n; p++)   Scs_util.CS_MARK(w,s[s_offset + p]);  Scs_util.CS_MARK(w,k);  return (top);}  }
class C{  public void flush(){  for (int i=0; i < mbBuf.length; ++i) {    mbBuf[i].force();  }}  }
class C{  public int append(final double lhs,final double rhs,final String fieldName){  int comparison=Double.compare(lhs,rhs);  fieldComparisons.setAt(fieldName).value(comparison);  return comparison;}  }
class C{  private StaticClassUtil(){  instanceNotAllowed(getClass());}  }
class C{  private Value unMarshall(Object obj){  if (returnType == Type.VOID) {    return null;  } else   if (obj instanceof Integer) {    assert returnType == Type.INT : "mismatched return types";    return IntValue.valueOf(((Integer)obj).intValue());  } else   if (obj instanceof String) {    assert returnType == Type.STRING : "mismatched return types";    return new StringValue((String)obj);  } else   if (obj instanceof Boolean) {    assert returnType == Type.BOOLEAN : "mismatched return types";    return BoolValue.valueOf(((Boolean)obj).booleanValue());  } else   if (obj instanceof Value) {    return (Value)obj;  }  throw new RuntimeException("Can't unmarshall a " + obj.getClass().getCanonicalName());}  }
class C{  public UserCredentials generateTemporaryCredentials(ModeledAuthenticatedUser user,ActiveConnectionRecord activeConnection,String sharingProfileIdentifier) throws GuacamoleException {  ModeledSharingProfile sharingProfile=sharingProfileService.retrieveObject(user,sharingProfileIdentifier);  String connectionIdentifier=activeConnection.getConnectionIdentifier();  if (sharingProfile == null || !sharingProfile.getPrimaryConnectionIdentifier().equals(connectionIdentifier))   throw new GuacamoleSecurityException("Permission denied.");  String key=keyGenerator.getShareKey();  connectionMap.add(new SharedConnectionDefinition(activeConnection,sharingProfile,key));  activeConnection.registerShareKey(key);  return new UserCredentials(SHARE_KEY,Collections.singletonMap(SHARE_KEY_NAME,key));}  }
class C{  public XMPPException(XMPPError error){  super();  this.error=error;}  }
class C{  private void emitSerializerImpl(List<Type> expandedTypes,int depth,StringBuilder builder,String inVar,String outVar,String i){  Type type=expandedTypes.get(depth);  String childInVar=inVar + "_";  String childOutVar=outVar + "_";  String entryVar="entry" + depth;  Class<?> rawClass=getRawClass(type);  if (isList(rawClass)) {    String childInTypeName=getImplName(expandedTypes.get(depth + 1),false);    builder.append(i).append("JSONArray ").append(outVar).append(" = new JSONArray();\n");    if (depth == 0) {      builder.append(i).append("this.").append(getEnsureName(inVar)).append("();\n");    }    builder.append(i).append("for (").append(childInTypeName).append(" ").append(childInVar).append(" : ").append(depth == 0 ? "this." + inVar : inVar).append(") {\n");  } else   if (isMap(rawClass)) {    String childInTypeName=getImplName(expandedTypes.get(depth + 1),false);    builder.append(i).append("JSONObject ").append(outVar).append(" = new JSONObject();\n");    if (depth == 0) {      builder.append(i).append("this.").append(getEnsureName(inVar)).append("();\n");    }    builder.append(i).append("for (java.util.Map.Entry<String, ").append(childInTypeName).append("> ").append(entryVar).append(" : ").append(depth == 0 ? "this." + inVar : inVar).append(".entrySet()) {\n");    builder.append(i).append("  ").append(childInTypeName).append(" ").append(childInVar).append(" = ").append(entryVar).append(".getValue();\n");  } else   if (rawClass.isEnum()) {    builder.append(i).append("JSONValue ").append(outVar).append(" = (").append(depth == 0 ? "this." + inVar : inVar).append(" == null) ? JSONNull.getInstance() : new JSONString(").append(depth == 0 ? "this." + inVar : inVar).append(".name());\n");  } else   if (getEnclosingTemplate().isDtoInterface(rawClass)) {    builder.append(i).append("JSONValue ").append(outVar).append(" = ").append(depth == 0 ? "this." + inVar : inVar).append(" == null ? JSONNull.getInstance() : ((").append(getImplNameForDto((Class<?>)expandedTypes.get(depth))).append(")").append(inVar).append(").toJsonObject();\n");  } else   if (rawClass.equals(String.class)) {    builder.append(i).append("JSONValue ").append(outVar).append(" = (").append(depth == 0 ? "this." + inVar : inVar).append(" == null) ? JSONNull.getInstance() : new JSONString(").append(depth == 0 ? "this." + inVar : inVar).append(");\n");  } else   if (isNumber(rawClass)) {    if (rawClass.isPrimitive()) {      builder.append(i).append("JSONValue ").append(outVar).append(" = new JSONNumber(").append(depth == 0 ? "this." + inVar : inVar).append(");\n");    } else {      builder.append(i).append("JSONValue ").append(outVar).append(" = ").append(depth == 0 ? " this." + inVar : inVar).append(" == null ? JSONNull.getInstance() : new JSONNumber(").append(depth == 0 ? "this." + inVar : inVar).append(");\n");    }  } else   if (isBoolean(rawClass)) {    if (rawClass.isPrimitive()) {      builder.append(i).append("JSONValue ").append(outVar).append(" = JSONBoolean.getInstance(").append(depth == 0 ? "this." + inVar : inVar).append(");\n");    } else {      builder.append(i).append("JSONValue ").append(outVar).append(" = ").append(depth == 0 ? " this." + inVar : inVar).append(" == null ? JSONNull.getInstance() : JSONBoolean.getInstance(").append(depth == 0 ? "this." + inVar : inVar).append(");\n");    }  } else   if (isAny(rawClass)) {    builder.append(i).append("JSONValue ").append(outVar).append(" = ").append(depth == 0 ? " this." + inVar : inVar).append(" == null ? JSONNull.getInstance() : (");    appendCopyJsonExpression(inVar,builder).append(");\n");  } else {    final Class<?> dtoImplementation=getEnclosingTemplate().getDtoImplementation(rawClass);    if (dtoImplementation != null) {      builder.append(i).append("JSONValue ").append(outVar).append(" = ").append(depth == 0 ? "this." + inVar : inVar).append(" == null ? JSONNull.getInstance() : ((").append(dtoImplementation.getCanonicalName()).append(")").append(depth == 0 ? "this." + inVar : inVar).append(").toJsonObject();\n");    } else {      throw new IllegalArgumentException("Unable to generate client implementation for DTO interface " + getDtoInterface().getCanonicalName() + ". Type "+ rawClass+ " is not allowed to use in DTO interface.");    }  }  if (depth + 1 < expandedTypes.size()) {    emitSerializerImpl(expandedTypes,depth + 1,builder,childInVar,childOutVar,i + "  ");  }  if (isList(rawClass)) {    builder.append(i).append("  ").append(outVar).append(".set(").append(outVar).append(".size(), ").append(childOutVar).append(");\n");    builder.append(i).append("}\n");  } else   if (isMap(rawClass)) {    builder.append(i).append("  ").append(outVar).append(".put(").append(entryVar).append(".getKey(), ").append(childOutVar).append(");\n");    builder.append(i).append("}\n");  }}  }
class C{  public static boolean isOpen(Properties ctx,Timestamp DateAcct,String DocBaseType,int AD_Org_ID){  if (DateAcct == null) {    s_log.warning("No DateAcct");    return false;  }  if (DocBaseType == null) {    s_log.warning("No DocBaseType");    return false;  }  MPeriod period=MPeriod.get(ctx,DateAcct,AD_Org_ID);  if (period == null) {    s_log.warning("No Period for " + DateAcct + " ("+ DocBaseType+ ")");    return false;  }  boolean open=period.isOpen(DocBaseType,DateAcct);  if (!open)   s_log.warning(period.getName() + ": Not open for " + DocBaseType+ " ("+ DateAcct+ ")");  return open;}  }
class C{  public static void main(String[] args) throws Exception {  new ReferenceSetMerger().start(args);}  }
class C{  public Builder jsonMetadata(byte[] metadata){  this.metadata=metadata;  this.isJsonMetadata=true;  return this;}  }
class C{  public AsyncResult CreateMonitoredItemsAsync(CreateMonitoredItemsRequest req){  return channel.serviceRequestAsync(req);}  }
class C{  public boolean is_set_id(){  return this.id != null;}  }
class C{  public Shape triangle_down(float x,float y,float height){  m_path.reset();  m_path.moveTo(x,y);  m_path.lineTo(x + height,y);  m_path.lineTo(x + height / 2,(y + height));  m_path.closePath();  return m_path;}  }
class C{  public static void applyToOrSetInvisible(ImageHolder imageHolder,ImageView imageView){  applyToOrSetInvisible(imageHolder,imageView,null);}  }
class C{  public static UnaryExpression isEmpty(String propertyName){  return new UnaryExpression(Operator.EMPTY,propertyName);}  }
class C{  private void needNewBuffer(int newSize){  int delta=newSize - size;  int newBufferSize=Math.max(minChunkLen,delta);  currentBufferIndex++;  currentBuffer=new byte[newBufferSize];  offset=0;  if (currentBufferIndex >= buffers.length) {    int newLen=buffers.length << 1;    byte[][] newBuffers=new byte[newLen][];    System.arraycopy(buffers,0,newBuffers,0,buffers.length);    buffers=newBuffers;  }  buffers[currentBufferIndex]=currentBuffer;  buffersCount++;}  }
class C{  public FeedFilter withLikes(@Nonnull String username){  FeedFilter copy=basic();  copy.likes=fromNullable(emptyToNull(username.trim()));  return fix(copy);}  }
class C{  @Override public int hashCode(){  return this.axis.hashCode();}  }
class C{  private long inclusiveTimeNanos(){  if (endTimeNanos == -1) {    throw new IllegalStateException("End time hasn't been set yet: " + loadedClass.name);  }  return endTimeNanos - startTimeNanos;}  }
class C{  public InlineQueryResultLocation.InlineQueryResultLocationBuilder inputMessageContent(InputMessageContent inputMessageContent){  this.input_message_content=inputMessageContent;  return this;}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public ChangeCurrencyEventCommandImpl(final ShoppingCartCommandRegistry registry,final PriceService priceService,final PricingPolicyProvider pricingPolicyProvider,final ProductService productService,final ShopService shopService){  super(registry,priceService,pricingPolicyProvider,productService,shopService);}  }
class C{  public boolean contentEquals(StringBuffer strbuf){synchronized (strbuf) {    int size=strbuf.length();    if (count != size) {      return false;    }    return regionMatches(0,new String(0,size,strbuf.getValue()),0,size);  }}  }
class C{  public PointCloudData updateAndGetLatestPointCloudRenderBuffer(){synchronized (PointCloudManager.mPointCloudLock) {    if (mSwapSignal) {      FloatBuffer temp=mRenderPointCloudData.floatBuffer;      int tempCount=mRenderPointCloudData.pointCount;      mRenderPointCloudData.floatBuffer=mSharedPointCloudData.floatBuffer;      mRenderPointCloudData.pointCount=mSharedPointCloudData.pointCount;      mSharedPointCloudData.floatBuffer=temp;      mSharedPointCloudData.pointCount=tempCount;      mSwapSignal=false;    }  }  return mRenderPointCloudData;}  }
class C{  private byte[] GSS_acceptSecContext(byte[] token) throws GSSException {  if (mechContext == null) {    GSSCredential cred=null;    if (myCred != null) {      cred=new GSSCredentialImpl(factory.manager,myCred.getInternalCred());    }    mechContext=factory.manager.createContext(cred);  }  byte[] accept_token=mechContext.acceptSecContext(token,0,token.length);  return accept_token;}  }
class C{  public static void pause(List<String> urls){  getFileDownloadManager().pause(urls);}  }
class C{  public static boolean isValidIANAEncoding(String ianaEncoding){  if (ianaEncoding != null) {    int length=ianaEncoding.length();    if (length > 0) {      char c=ianaEncoding.charAt(0);      if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')) {        for (int i=1; i < length; i++) {          c=ianaEncoding.charAt(i);          if ((c < 'A' || c > 'Z') && (c < 'a' || c > 'z') && (c < '0' || c > '9')&& c != '.' && c != '_' && c != '-') {            return false;          }        }        return true;      }    }  }  return false;}  }
class C{  final public void println(char v){  try {    _out.println(v);  } catch (  IOException e) {    log.log(Level.FINE,e.toString(),e);  }}  }
class C{  public void add(String name,long cnt){  if (_values == null) {    _values=new ArrayList<>(30);  }  _values.add(new Count(this,name,cnt));}  }
class C{  Matcher(Pattern parent,CharSequence text){  this.parentPattern=parent;  this.text=text;  int parentGroupCount=Math.max(parent.capturingGroupCount,10);  groups=new int[parentGroupCount * 2];  locals=new int[parent.localCount];  reset();}  }
class C{  public ApplicationPassivationThread(Application application,PrintStream output){  this(application,output,null);}  }
class C{  private boolean canPush(final Player pusher,final RPEntity pushed){  if (pushed instanceof SpeakerNPC) {    return false;  }  if ((pushed.getArea().getWidth() * pushed.getArea().getHeight()) > 4) {    pusher.sendPrivateText("You're strong, but not that strong!");    return false;  }  if (!pusher.canPush(pushed)) {    pusher.sendPrivateText("Give yourself a breather before you start pushing again.");    return false;  }  return (pusher.nextTo(pushed));}  }
class C{  public static void checkUnmanagedVolumeInactive(UnManagedVolume unManagedVolume) throws IngestionException {  if (unManagedVolume.getInactive()) {    _logger.warn("UnManaged Volume {} is in inactive state. Skipping Ingestion",unManagedVolume.getLabel());    throw IngestionException.exceptions.unmanagedVolumeIsInactive(unManagedVolume.getLabel());  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String name=getString(stack);  byte type=WidgetMeta.getTypeForName(getString(stack));  Widget w=getWidget(stack);  if (w == null)   return null;  Widget[] wkids=(type == -1) ? w.containers() : w.containers(type);  if (name == null)   return (wkids.length > 0) ? wkids[0] : null; else {    for (int i=0; i < wkids.length; i++)     if (wkids[i].getUntranslatedName().equals(name))     return wkids[i];    return null;  }}  }
class C{  public void initializePackageContents(){  if (isInitialized)   return;  isInitialized=true;  setName(eNAME);  setNsPrefix(eNS_PREFIX);  setNsURI(eNS_URI);  endpointEClass.getESuperTypes().add(this.getMetadatable());  channelEClass.getESuperTypes().add(this.getMetadatable());  routerEClass.getESuperTypes().add(this.getEndpoint());  filterEClass.getESuperTypes().add(this.getEndpoint());  transformerEClass.getESuperTypes().add(this.getEndpoint());  gatewayEClass.getESuperTypes().add(this.getEndpoint());  splitterEClass.getESuperTypes().add(this.getEndpoint());  aggregatorEClass.getESuperTypes().add(this.getEndpoint());  routeEClass.getESuperTypes().add(this.getMetadatable());  serviceActivatorEClass.getESuperTypes().add(this.getInvocableEndpoint());  enricherEClass.getESuperTypes().add(this.getInvocableEndpoint());  compositeProcessorEClass.getESuperTypes().add(this.getEndpoint());  recipientListRouterEClass.getESuperTypes().add(this.getRouter());  invocableEndpointEClass.getESuperTypes().add(this.getEndpoint());  contentFilterEClass.getESuperTypes().add(this.getFilter());  resequencerEClass.getESuperTypes().add(this.getAggregator());  initEClass(endpointEClass,Endpoint.class,"Endpoint",IS_ABSTRACT,IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getEndpoint_Name(),ecorePackage.getEString(),"name",null,1,1,Endpoint.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getEndpoint_ToChannels(),this.getChannel(),this.getChannel_FromEndpoint(),"toChannels",null,0,-1,Endpoint.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getEndpoint_FromChannels(),this.getChannel(),this.getChannel_ToEndpoint(),"fromChannels",null,0,-1,Endpoint.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(channelEClass,Channel.class,"Channel",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getChannel_ToEndpoint(),this.getEndpoint(),this.getEndpoint_FromChannels(),"toEndpoint",null,0,1,Channel.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getChannel_FromEndpoint(),this.getEndpoint(),this.getEndpoint_ToChannels(),"fromEndpoint",null,0,1,Channel.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getChannel_Name(),ecorePackage.getEString(),"name",null,0,1,Channel.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getChannel_Guaranteed(),ecorePackage.getEBoolean(),"guaranteed",null,0,1,Channel.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(adapterEClass,Adapter.class,"Adapter",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(routerEClass,Router.class,"Router",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getRouter_OwnedRoutes(),this.getConditionalRoute(),null,"ownedRoutes",null,0,-1,Router.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getRouter_Type(),this.getRoutingType(),"type",null,0,1,Router.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(filterEClass,Filter.class,"Filter",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getFilter_Expression(),ecorePackage.getEString(),"expression",null,0,1,Filter.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(transformerEClass,Transformer.class,"Transformer",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(gatewayEClass,Gateway.class,"Gateway",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(conditionalRouteEClass,ConditionalRoute.class,"ConditionalRoute",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getConditionalRoute_Condition(),ecorePackage.getEString(),"condition",null,0,1,ConditionalRoute.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getConditionalRoute_Channel(),this.getChannel(),null,"channel",null,1,1,ConditionalRoute.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(splitterEClass,Splitter.class,"Splitter",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(aggregatorEClass,Aggregator.class,"Aggregator",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getAggregator_Part(),this.getMessagePart(),"part","HEADER",0,1,Aggregator.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getAggregator_Strategy(),ecorePackage.getEString(),"strategy",null,0,1,Aggregator.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getAggregator_Expression(),ecorePackage.getEString(),"expression",null,0,1,Aggregator.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(routeEClass,Route.class,"Route",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getRoute_OwnedEndpoints(),this.getEndpoint(),null,"ownedEndpoints",null,0,-1,Route.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getRoute_OwnedChannels(),this.getChannel(),null,"ownedChannels",null,0,-1,Route.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getRoute_Name(),ecorePackage.getEString(),"name",null,1,1,Route.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getRoute_ExchangeType(),this.getExchangeType(),"exchangeType",null,0,1,Route.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(serviceActivatorEClass,ServiceActivator.class,"ServiceActivator",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(eipModelEClass,EIPModel.class,"EIPModel",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getEIPModel_OwnedRoutes(),this.getRoute(),null,"ownedRoutes",null,0,-1,EIPModel.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getEIPModel_OwnedServiceRefs(),this.getServiceRef(),null,"ownedServiceRefs",null,0,-1,EIPModel.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(enricherEClass,Enricher.class,"Enricher",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getEnricher_Part(),this.getMessagePart(),"part","PAYLOAD",0,1,Enricher.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(compositeProcessorEClass,CompositeProcessor.class,"CompositeProcessor",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getCompositeProcessor_OwnedEndpoints(),this.getEndpoint(),null,"ownedEndpoints",null,0,-1,CompositeProcessor.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(recipientListRouterEClass,RecipientListRouter.class,"RecipientListRouter",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(serviceRefEClass,ServiceRef.class,"ServiceRef",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getServiceRef_Name(),ecorePackage.getEString(),"name",null,1,1,ServiceRef.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getServiceRef_Reference(),ecorePackage.getEJavaObject(),"reference",null,0,1,ServiceRef.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getServiceRef_Operations(),ecorePackage.getEString(),"operations",null,0,-1,ServiceRef.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(serviceInvocationEClass,ServiceInvocation.class,"ServiceInvocation",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getServiceInvocation_Context(),ecorePackage.getEString(),"context",null,0,1,ServiceInvocation.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getServiceInvocation_OperationName(),ecorePackage.getEString(),"operationName",null,0,1,ServiceInvocation.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getServiceInvocation_ServiceRef(),this.getServiceRef(),null,"serviceRef",null,1,1,ServiceInvocation.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(invocableEndpointEClass,InvocableEndpoint.class,"InvocableEndpoint",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getInvocableEndpoint_OwnedServiceInvocations(),this.getServiceInvocation(),null,"ownedServiceInvocations",null,0,-1,InvocableEndpoint.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(contentFilterEClass,ContentFilter.class,"ContentFilter",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(resequencerEClass,Resequencer.class,"Resequencer",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getResequencer_StreamSequences(),ecorePackage.getEBoolean(),"streamSequences","false",0,1,Resequencer.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(metadataEClass,Metadata.class,"Metadata",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getMetadata_Key(),ecorePackage.getEString(),"key",null,1,1,Metadata.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getMetadata_Values(),ecorePackage.getEString(),"values",null,0,-1,Metadata.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(metadatableEClass,Metadatable.class,"Metadatable",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getMetadatable_OwnedMetadatas(),this.getMetadata(),null,"ownedMetadatas",null,0,-1,Metadatable.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEEnum(messagePartEEnum,MessagePart.class,"MessagePart");  addEEnumLiteral(messagePartEEnum,MessagePart.HEADER);  addEEnumLiteral(messagePartEEnum,MessagePart.PAYLOAD);  initEEnum(routingTypeEEnum,RoutingType.class,"RoutingType");  addEEnumLiteral(routingTypeEEnum,RoutingType.HEADER_VALUE);  addEEnumLiteral(routingTypeEEnum,RoutingType.PAYLOAD_VALUE);  addEEnumLiteral(routingTypeEEnum,RoutingType.PAYLOAD_TYPE);  initEEnum(exchangeTypeEEnum,ExchangeType.class,"ExchangeType");  addEEnumLiteral(exchangeTypeEEnum,ExchangeType.IN_ONLY);  addEEnumLiteral(exchangeTypeEEnum,ExchangeType.IN_OUT);  createResource(eNS_URI);}  }
class C{  public void considerRegionXRegions(GeoRegion r,Collection regions){  Iterator possibles;  if (regions instanceof ExtentIndex) {    possibles=((ExtentIndex)regions).iterator(r);  } else {    possibles=regions.iterator();  }  while (possibles.hasNext()) {    GeoExtent extent=(GeoExtent)possibles.next();    if (extent instanceof GeoRegion) {      considerRegionXRegion(r,(GeoRegion)extent);    } else     if (extent instanceof GeoPath) {      for (GeoPath.SegmentIterator pit=((GeoPath)extent).segmentIterator(); pit.hasNext(); ) {        GeoSegment seg=pit.nextSegment();        if (filter.preConsider(seg,r) && considerSegmentXRegion(seg,r)) {          collector.collect(seg,extent);        }      }    } else {      BoundingCircle bc=extent.getBoundingCircle();      BoundingCircle rbc=r.getBoundingCircle();      if (rbc.intersects(bc.getCenter(),bc.getRadius() + filter.getHRange())) {        GeoArray pts=r.getPoints();        if (isPointInPolygon(bc.getCenter(),pts)) {          collector.collect(r,extent);        } else         if (isPointNearPoly(bc.getCenter(),pts,bc.getRadius() + filter.getHRange())) {          collector.collect(r,extent);        }      }    }  }}  }
class C{  public static String[] values(){  return ALL_VALUES;}  }
class C{  protected void onPlay(SoundCloudTrack track){}  }
class C{  public IPreparedBooleanQuery prepareBooleanQuery(final String query) throws Exception {  return prepareBooleanQuery(query,UUID.randomUUID());}  }
class C{  public boolean userCanDeleteUser(int connectedUserId,int UserId,String entidad) throws Exception {  boolean can=false;  int parentId=Defs.NULL_ID;  int deptMgrId=Defs.NULL_ID;  try {    parentId=getUserParentId(UserId,entidad);    deptMgrId=getDeptMgrId(parentId,entidad);    can=hasUserAuth(connectedUserId,USER_ACTION_ID_DELETE,deptMgrId,Defs.NULL_ID,entidad);  } catch (  Exception e) {    _logger.error(e);    throw e;  }  return can;}  }
class C{  public Dimension minimumLayoutSize(Container parent){synchronized (parent.getTreeLock()) {    Insets insets=parent.getInsets();    int ncomponents=parent.getComponentCount();    int w=0;    int h=0;    for (int i=0; i < ncomponents; i++) {      Component comp=parent.getComponent(i);      Dimension d=comp.getMinimumSize();      if (d.width > w) {        w=d.width;      }      if (d.height > h) {        h=d.height;      }    }    return new Dimension(insets.left + insets.right + w+ hgap * 2,insets.top + insets.bottom + h+ vgap * 2);  }}  }
class C{  protected boolean addFrameToGroup(Group grp,Frame frm,int index) throws MakeTocException {  int i;  int x;  int y;  if (frm.scale == null || grp.scale == null) {    Debug.output("grp and frm scale is null for " + frm.filename + ", skipping");    return false;  } else   if (frm.marked || !frm.scale.equalsIgnoreCase(grp.scale) || frm.zone != grp.zone) {    Debug.message("maketocframedetail","\nMakeToc.addFrameToGroup: no action needed for frame, returning.\n  frm.marked = " + frm.marked + "\n  frm.zone("+ frm.zone+ ") = grp.zone("+ grp.zone+ ")\n  frm.scale("+ frm.scale+ ") = grp.scale("+ grp.scale+ ")\n");    return false;  }  Debug.message("maketocframedetail","MakeToc.addFrameToGroup: adding unmarked frame");  double eps=frm.EPS();  if (frm.left >= grp.vert_pos[grp.left] - eps && frm.right <= grp.vert_pos[grp.right] + eps && frm.bottom >= grp.horiz_pos[grp.bottom] - eps && frm.top <= grp.horiz_pos[grp.top] + eps) {    if (Debug.debugging("maketocdetail")) {      Debug.output(frm.filename + " is in group " + index);    }  } else   if (near(frm.right,grp.vert_pos[grp.left],eps) && frm.top <= grp.horiz_pos[grp.top] + eps && frm.bottom >= grp.horiz_pos[grp.bottom] - eps) {    if (Debug.debugging("maketocdetail")) {      Debug.output(frm.filename + " add frame to group " + index+ ": left side");    }    if (grp.left == 0) {      throw new MakeTocException("Boundary rectangle too small - Increase the boundary size to be larger than " + maxSide);    }    grp.left--;    grp.vert_pos[grp.left]=frm.left;  } else   if (near(frm.left,grp.vert_pos[grp.right],eps) && frm.top <= grp.horiz_pos[grp.top] + eps && frm.bottom >= grp.horiz_pos[grp.bottom] - eps) {    if (Debug.debugging("maketocdetail")) {      Debug.output(frm.filename + ":add frame to group " + index+ ": right side");    }    if (grp.right == maxSide) {      throw new MakeTocException("Boundary rectangle too small - Increase the boundary size to be larger than " + maxSide);    }    grp.vert_pos[grp.right]=frm.left;    grp.right++;    grp.vert_pos[grp.right]=frm.right;  } else   if (near(frm.bottom,grp.horiz_pos[grp.top],eps) && frm.right <= grp.vert_pos[grp.right] + eps && frm.left >= grp.vert_pos[grp.left] - eps) {    if (Debug.debugging("maketocdetail")) {      Debug.output(frm.filename + ":add frame to group " + index+ ": top");    }    if (grp.top == 0) {      throw new MakeTocException("Boundary rectangle too small - Increase the boundary size to be larger than " + maxSide);    }    grp.top--;    grp.horiz_pos[grp.top]=frm.top;  } else   if (near(frm.top,grp.horiz_pos[grp.bottom],eps) && frm.right <= grp.vert_pos[grp.right] + eps && frm.left >= grp.vert_pos[grp.left] - eps) {    if (Debug.debugging("maketocdetail")) {      Debug.output(frm.filename + ":add frame to group " + index+ ": bottom");    }    if (grp.bottom == maxSide) {      throw new MakeTocException("Boundary rectangle too small - Increase the boundary size to be larger than " + maxSide);    }    grp.horiz_pos[grp.bottom]=frm.top;    grp.bottom++;    grp.horiz_pos[grp.bottom]=frm.bottom;  } else {    Debug.message("maketocframedetail","MakeToc.add: frame not close enough to anything else, not adding to group.");    return false;  }  x=y=-1;  for (i=grp.left; i < grp.right; i++) {    if (near(frm.left,grp.vert_pos[i],eps)) {      x=i;      break;    }  }  for (i=grp.top; i < grp.bottom; i++) {    if (near(frm.top,grp.horiz_pos[i],eps)) {      y=i;      break;    }  }  if (x < 0 || y < 0) {    Debug.output("MakeToc: " + frm.filename + ": in rect but can't find boundary (horizontal"+ (x < 0 ? " bad" : " OK")+ ", vertical"+ (y < 0 ? " bad)" : " OK)"));    if (Debug.debugging("maketocframedetail")) {      Debug.output(" - For frame: \n  " + frm.toString());      Debug.output(" - Group horizontal left: " + grp.left + " vs. right: "+ grp.right);      for (i=grp.left; i < grp.right; i++) {        Debug.output(" - Checking horizontal: " + frm.left + " <-> "+ grp.vert_pos[i]);        if (near(frm.left,grp.vert_pos[i],eps)) {          Debug.output(" Last one should have hit.");        }      }      Debug.output(" - Group vertical top: " + grp.horiz_pos[grp.top] + " vs. bottom: "+ grp.horiz_pos[grp.bottom]+ ", frame top = "+ frm.top+ " and frame bottom = "+ frm.bottom);      for (i=grp.top; i < grp.bottom; i++) {        Debug.output(" - Checking vertical: " + frm.top + " <-> "+ grp.horiz_pos[i]);        if (near(frm.top,grp.horiz_pos[i],eps)) {          Debug.output(" Last one should have hit.");        }      }    }    throw new MakeTocException(frm.filename + " in rect but can't find boundary (horizontal" + (x < 0 ? " bad" : " OK")+ ", vertical"+ (y < 0 ? " bad)" : " OK)"));  }  if (Math.abs(frm.h_interval - grp.h_interval) > EPS2 || Math.abs(frm.v_interval - grp.v_interval) > EPS2) {    Debug.error(frm.filename + ": interval mismatch\n  frm.h_interval: " + frm.h_interval+ ", grp.h_interval:"+ grp.h_interval+ "\n  frm.v_interval: "+ frm.v_interval+ ", grp.v_interval: "+ grp.v_interval+ "\n  frm.h_resolution: "+ frm.h_resolution+ ", grp.h_resolution: "+ grp.h_resolution+ "\n  frm.h_resolution: "+ frm.h_resolution+ ", grp.h_resolution: "+ grp.h_resolution);    throw new MakeTocException(frm.filename + " has mismatched frame resolution");  }  frm.marked=true;  frm.group=index;  frm.x=x;  frm.y=y;  grp.cib=frm.cib;  grp.cdted=frm.cdted;  return true;}  }
class C{  public static Map<String,Object> parseProperties(XmlPullParser parser) throws Exception {  Map<String,Object> properties=new HashMap<String,Object>();  while (true) {    int eventType=parser.next();    if (eventType == XmlPullParser.START_TAG && parser.getName().equals("property")) {      boolean done=false;      String name=null;      String type=null;      String valueText=null;      Object value=null;      while (!done) {        eventType=parser.next();        if (eventType == XmlPullParser.START_TAG) {          String elementName=parser.getName();          if (elementName.equals("name")) {            name=parser.nextText();          } else           if (elementName.equals("value")) {            type=parser.getAttributeValue("","type");            valueText=parser.nextText();          }        } else         if (eventType == XmlPullParser.END_TAG) {          if (parser.getName().equals("property")) {            if ("integer".equals(type)) {              value=Integer.valueOf(valueText);            } else             if ("long".equals(type)) {              value=Long.valueOf(valueText);            } else             if ("float".equals(type)) {              value=Float.valueOf(valueText);            } else             if ("double".equals(type)) {              value=Double.valueOf(valueText);            } else             if ("boolean".equals(type)) {              value=Boolean.valueOf(valueText);            } else             if ("string".equals(type)) {              value=valueText;            } else             if ("java-object".equals(type)) {              try {                byte[] bytes=StringUtils.decodeBase64(valueText);                ObjectInputStream in=new ObjectInputStream(new ByteArrayInputStream(bytes));                value=in.readObject();              } catch (              Exception e) {                e.printStackTrace();              }            }            if (name != null && value != null) {              properties.put(name,value);            }            done=true;          }        }      }    } else     if (eventType == XmlPullParser.END_TAG) {      if (parser.getName().equals("properties")) {        break;      }    }  }  return properties;}  }
class C{  public boolean checkProperty(T prop,Object value){  Object attribute=getProperty(prop);  return (attribute != null && attribute.equals(value));}  }
class C{  public int segmentAtLength(float length){  int upperIndex=findUpperIndex(length);  if (upperIndex == -1) {    return -1;  }  if (upperIndex == 0) {    PathSegment upper=(PathSegment)segments.get(upperIndex);    return upper.getIndex();  }  PathSegment lower=(PathSegment)segments.get(upperIndex - 1);  return lower.getIndex();}  }
class C{  @Override public void parseStartElement(){  String ns=validatorInfo.getNameSpace();  String ln=validatorInfo.getLocalName();  String qn=validatorInfo.getQName();  Attributes a=validatorInfo.getAttributes();  FacesValidator validator=validatorInfo.getValidator();  if (isNamingContainerTag(validator,ns,ln)) {    nestedInNamingContainer=true;  } else   if ((ns.equals(RIConstants.HTML_NAMESPACE)) && (requiresIdCount > 0)) {    if ((!(nestedInNamingContainer)) && (!hasIdAttribute(a))) {      failed=true;      requiresIdList.append(qn).append(' ');    }  } else   if ((requiresIdCount == 0) && (!siblingSatisfied)) {    if (((ns.equals(RIConstants.HTML_NAMESPACE)) || (ns.equals(RIConstants.CORE_NAMESPACE))) && (!hasIdAttribute(a)) && (!(nestedInNamingContainer))) {      failed=true;      requiresIdList.append(qn).append(' ');    }    siblingSatisfied=true;  } else   if (requiresIdCount == 0) {    siblingSatisfied=true;  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:21.214 -0500",hash_original_method="1573E83A14D593E0BFADABB9AEDBB7D2",hash_generated_method="0C16F7A946D77FA08793AC10C12614CA") public final boolean isQueued(Thread thread){  return (((thread.getTaintInt() + getTaintInt())) == 1);}  }
class C{  public HalfEdge next(){  return next;}  }
class C{  public static VideoCodec negociateVideoCodec(VideoCodec[] supportedCodecs,Vector<VideoCodec> proposedCodecs){  VideoCodec selectedCodec=null;  int pref=-1;  for (  VideoCodec proposedCodec : proposedCodecs) {    for (int j=0; j < supportedCodecs.length; j++) {      VideoCodec videoCodec=supportedCodecs[j];      int videoCodecPref=supportedCodecs.length - 1 - j;      if (!compareVideoCodec(proposedCodec,videoCodec)) {        continue;      }      if (videoCodecPref <= pref) {        continue;      }      pref=videoCodecPref;      int proposedCodecWidth=proposedCodec.getWidth();      int width=(proposedCodecWidth == 0) ? videoCodec.getWidth() : proposedCodecWidth;      int proposedCodectHeight=proposedCodec.getHeight();      int height=(proposedCodectHeight == 0) ? videoCodec.getHeight() : proposedCodectHeight;      int proposedCodecPayloadType=proposedCodec.getPayloadType();      int payloadType=(proposedCodecPayloadType == 0) ? videoCodec.getPayloadType() : proposedCodecPayloadType;      int proposedCodecClockRate=proposedCodec.getClockRate();      int clockRate=(proposedCodecClockRate == 0) ? videoCodec.getClockRate() : proposedCodecClockRate;      int proposedCodecFrameRate=proposedCodec.getFrameRate();      int frameRate=(proposedCodecFrameRate == 0) ? videoCodec.getFrameRate() : proposedCodecFrameRate;      int proposedCodecBitRate=proposedCodec.getBitRate();      int bitRate=(proposedCodecBitRate == 0) ? videoCodec.getBitRate() : proposedCodecBitRate;      String proposedCodecParameters=proposedCodec.getParameters();      selectedCodec=new VideoCodec(proposedCodec.getEncoding(),payloadType,clockRate,frameRate,bitRate,width,height,(proposedCodecParameters.length() == 0) ? videoCodec.getParameters() : proposedCodecParameters);    }  }  return selectedCodec;}  }
class C{  public ProblemEvaluator(Problem problem,Solution solution){  super();  this.problem=problem;  this.solution=solution;}  }
class C{  public Comment addComment(String comment){  Comment prop=new Comment(comment);  addComment(prop);  return prop;}  }
class C{  public final boolean contains(final BlacklistType blacklistType,final String host,final String path){  boolean ret=false;  if (blacklistType != null && host != null && path != null) {    final Map<String,Set<Pattern>> blacklistMap=getBlacklistMap(blacklistType,isMatchable(host));    final String h=((!isMatchable(host) && !host.isEmpty() && host.charAt(0) == '*') ? "." + host : host).toLowerCase();    final Set<Pattern> hostList=blacklistMap.get(h);    if (hostList != null) {      for (      Pattern hp : hostList) {        String hpxs=hp.pattern();        if (hpxs.equals(path)) {          ret=true;          break;        }      }    }  }  return ret;}  }
class C{  public static double[] cumSum(double[] v){  int m=v.length;  double[] X=new double[m];  double s=0;  for (int i=0; i < m; i++) {    s+=v[i];    X[i]=s;  }  return X;}  }
class C{  public boolean applyTo(ImageView imageView){  return applyTo(imageView,null);}  }
class C{  public void addReachedAchievement(String identifier){  getAchievements().add(identifier);}  }
class C{  public void testShiftRightNegNonZeroes(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,0,0,0,0,0,0,0,0};  int aSign=-1;  int number=68;  byte rBytes[]={-25,-4,121,-80,20,-70,109,42};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.shiftRight(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  @Inline @Uninterruptible private static Offset decodeLongEncoding(Address cursor){  int value;  value=(cursor.loadByte()) & 0x000000fc;  value|=(cursor.loadByte(Offset.fromIntSignExtend(1)) << BITS_IN_BYTE) & 0x0000ff00;  value|=(cursor.loadByte(Offset.fromIntSignExtend(2)) << (2 * BITS_IN_BYTE)) & 0x00ff0000;  value|=(cursor.loadByte(Offset.fromIntSignExtend(3)) << (3 * BITS_IN_BYTE)) & 0xff000000;  return Offset.fromIntSignExtend(value);}  }
class C{  public static void append(Path self,Object text,String charset,boolean writeBom) throws IOException {  Writer writer=null;  try {    Charset resolvedCharset=Charset.forName(charset);    boolean shouldWriteBom=writeBom && !self.toFile().exists();    OutputStream out=Files.newOutputStream(self,CREATE,APPEND);    if (shouldWriteBom) {      IOGroovyMethods.writeUTF16BomIfRequired(out,resolvedCharset);    }    writer=new OutputStreamWriter(out,resolvedCharset);    InvokerHelper.write(writer,text);    writer.flush();    Writer temp=writer;    writer=null;    temp.close();  }  finally {    closeWithWarning(writer);  }}  }
class C{  public void add_return(StoragePort param){  if (local_return == null) {    local_return=new StoragePort[]{};  }  local_returnTracker=true;  java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(local_return);  list.add(param);  this.local_return=(StoragePort[])list.toArray(new StoragePort[list.size()]);}  }
class C{  protected DocTreeMaker(Context context){  context.put(treeMakerKey,this);  diags=JCDiagnostic.Factory.instance(context);  this.pos=Position.NOPOS;}  }
class C{  private void addJoinInfo(String type,QueryBuilder<?,?> joinedQueryBuilder,WhereOperation operation) throws SQLException {  JoinInfo joinInfo=new JoinInfo(type,joinedQueryBuilder,operation);  matchJoinedFields(joinInfo,joinedQueryBuilder);  if (joinList == null) {    joinList=new ArrayList<JoinInfo>();  }  joinList.add(joinInfo);}  }
class C{  List<String> applyNameFilter(List<String> collections){  if (filterType != FilterType.name || filter == null)   return collections;  String regexFilter=(!filter.endsWith(".*") && filter.endsWith("*")) ? filter.substring(0,filter.length() - 1) + ".*" : filter;  if (!regexFilter.startsWith("(?i)"))   regexFilter="(?i)" + regexFilter;  Pattern filterRegex=Pattern.compile(regexFilter);  List<String> filtered=new ArrayList<String>();  for (  String next : collections) {    if (matches(filterRegex,next))     filtered.add(next);  }  return filtered;}  }
class C{  public static String format(final Map<String,Set<String>> parameters,final String encoding){  final StringBuilder result=new StringBuilder();  for (  Map.Entry<String,Set<String>> parameter : parameters.entrySet()) {    final String encodedName=encode(parameter.getKey(),encoding);    final Set<String> values=parameter.getValue();    if (values == null || values.size() == 0) {      result.append(encodedName);      result.append(NAME_VALUE_SEPARATOR);      result.append("");    } else {      for (      String value : values) {        final String encodedValue=value != null ? encode(value,encoding) : "";        if (result.length() > 0)         result.append(PARAMETER_SEPARATOR);        result.append(encodedName);        result.append(NAME_VALUE_SEPARATOR);        result.append(encodedValue);      }    }  }  return result.toString();}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  private static int determineConsecutiveDigitCount(CharSequence msg,int startpos){  int count=0;  int len=msg.length();  int idx=startpos;  if (idx < len) {    char ch=msg.charAt(idx);    while (isDigit(ch) && idx < len) {      count++;      idx++;      if (idx < len) {        ch=msg.charAt(idx);      }    }  }  return count;}  }
class C{  @Override protected void tearDown() throws Exception {  setFixture(null);}  }
class C{  public boolean removeJars(final String[] jarNames,String[] groups){  boolean success=true;  try {    Region<String,Configuration> configRegion=getConfigurationRegion();    if (groups == null) {      Set<String> groupSet=configRegion.keySet();      groups=groupSet.toArray(new String[groupSet.size()]);    }    for (    String group : groups) {      Configuration configuration=(Configuration)configRegion.get(group);      if (configuration != null) {        String dirPath=FilenameUtils.concat(getSharedConfigurationDirPath(),configuration.getConfigName());        removeJarFiles(dirPath,jarNames);      }    }    for (    String group : groups) {      Configuration configuration=(Configuration)configRegion.get(group);      if (configuration != null) {        if (!configuration.getJarNames().isEmpty()) {          configuration.removeJarNames(jarNames);          configRegion.put(group,configuration);        }      }    }  } catch (  Exception e) {    logger.info("Exception occurred while deleting the jar files",e);    success=false;  }  return success;}  }
class C{  public City(String name,int zip){  this.name=name;  this.zip=zip;}  }
class C{  private static boolean checkCollectionMembers(Collection<?> c,Class<?> type){  for (  Object element : c) {    if (element != null && !type.isInstance(element)) {      return false;    }  }  return true;}  }
class C{  public BurlapProtocolException(Throwable rootCause){  super(rootCause);}  }
class C{  public PositionLengthAttributeImpl(){}  }
class C{  public Paragraph_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());}  }
class C{  private static void checkEqualCollection(Collection<ClusterNode> col1,Collection<ClusterNode> col2){  assertEquals(col1.size(),col2.size());  for (  ClusterNode node : col1)   assertTrue(col2.contains(node));}  }
class C{  public void transform(CGPoint[] src,int srcOff,CGPoint[] dst,int dstOff,int length){  while (--length >= 0) {    CGPoint srcPoint=src[srcOff++];    double x=srcPoint.x;    double y=srcPoint.y;    CGPoint dstPoint=dst[dstOff];    if (dstPoint == null) {      dstPoint=CGPoint.zero();    }    dstPoint.x=(float)(x * m00 + y * m01 + m02);    dstPoint.y=(float)(x * m10 + y * m11 + m12);    dst[dstOff++]=dstPoint;  }}  }
class C{  public int export(ConstantPool target){  return target.addUTF8(_value).getIndex();}  }
class C{  private void onWaitTimeout(SceKernelThreadInfo thread){switch (thread.waitType) {case PSP_WAIT_THREAD_END:    if (thread.wait.ThreadEnd_returnExitStatus) {      thread.cpuContext._v0=ERROR_KERNEL_WAIT_TIMEOUT;    }  break;case PSP_WAIT_EVENTFLAG:Managers.eventFlags.onThreadWaitTimeout(thread);break;case PSP_WAIT_SEMA:Managers.semas.onThreadWaitTimeout(thread);break;case JPCSP_WAIT_UMD:Modules.sceUmdUserModule.onThreadWaitTimeout(thread);break;case PSP_WAIT_MUTEX:Managers.mutex.onThreadWaitTimeout(thread);break;case PSP_WAIT_LWMUTEX:Managers.lwmutex.onThreadWaitTimeout(thread);break;case PSP_WAIT_MSGPIPE:Managers.msgPipes.onThreadWaitTimeout(thread);break;case PSP_WAIT_MBX:Managers.mbx.onThreadWaitTimeout(thread);break;case PSP_WAIT_FPL:Managers.fpl.onThreadWaitTimeout(thread);break;case PSP_WAIT_VPL:Managers.vpl.onThreadWaitTimeout(thread);break;}}  }
class C{  public static void loadCompilationUnits(Configuration configuration,FileSpec fileSpec,SourceList sourceList,SourcePath sourcePath,ResourceContainer resources,ResourceBundlePath bundlePath,List sources,List units,int[] checksums,Map<QName,Long> swcDefSignatureChecksums,Map swcFileChecksums,Map<String,Long> archiveFileChecksums,RandomAccessFile f,String cacheName,FontManager fontManager) throws IOException {  LocalizationManager l10n=ThreadLocalToolkit.getLocalizationManager();  PersistenceStore store=new PersistenceStore(configuration,f,fontManager);  int count=-1;  try {    if ((count=store.read(fileSpec,sourceList,sourcePath,resources,bundlePath,sources,units,checksums,swcDefSignatureChecksums,swcFileChecksums,archiveFileChecksums)) < 0) {      throw new IOException(l10n.getLocalizedTextString(new FailedToMatchCacheFile(cacheName)));    }  }  finally {    if (count >= 0 && ThreadLocalToolkit.getBenchmark() != null) {      ThreadLocalToolkit.getBenchmark().benchmark(l10n.getLocalizedTextString(new LoadingCompilationUnits(count)));    }  }}  }
class C{  protected void onPostExecute(String address){  if (!TextUtils.isEmpty(address))   mContactAddressMapper.startMapperActivity(address); else   Toast.makeText(MapFromContactsAsyncActivity.this,"No address found",Toast.LENGTH_SHORT).show();}  }
class C{  public LMSOfflineTrainingPanel(final NetworkPanel panel,final LMSOffline trainer,final Window parentFrame){  this.parentFrame=parentFrame;  this.trainer=trainer;  controlPanel=new LMSOfflineControlPanel(trainer,parentFrame);  controlPanel.setBorder(BorderFactory.createTitledBorder("Controls"));  trainingSetPanel=new TrainingSetPanel(trainer.getTrainableNetwork(),3);  trainingSetPanel.setFrame(parentFrame);  setLayout(new GridBagLayout());  GridBagConstraints gbc=new GridBagConstraints();  gbc.anchor=GridBagConstraints.FIRST_LINE_START;  gbc.fill=GridBagConstraints.HORIZONTAL;  gbc.insets=new Insets(10,10,10,10);  gbc.weightx=0;  gbc.weighty=0.5;  gbc.gridx=0;  gbc.gridy=0;  add(controlPanel,gbc);  gbc.anchor=GridBagConstraints.PAGE_START;  gbc.fill=GridBagConstraints.BOTH;  gbc.insets=new Insets(10,10,10,10);  gbc.weightx=1;  gbc.weighty=0.5;  gbc.gridx=1;  gbc.gridy=0;  add(trainingSetPanel,gbc);}  }
class C{  public CertPathBuilderResult engineBuild(CertPathParameters params) throws CertPathBuilderException, InvalidAlgorithmParameterException {  if (!(params instanceof PKIXBuilderParameters) && !(params instanceof ExtendedPKIXBuilderParameters)) {    throw new InvalidAlgorithmParameterException("Parameters must be an instance of " + PKIXBuilderParameters.class.getName() + " or "+ ExtendedPKIXBuilderParameters.class.getName()+ ".");  }  ExtendedPKIXBuilderParameters pkixParams=null;  if (params instanceof ExtendedPKIXBuilderParameters) {    pkixParams=(ExtendedPKIXBuilderParameters)params;  } else {    pkixParams=(ExtendedPKIXBuilderParameters)ExtendedPKIXBuilderParameters.getInstance((PKIXBuilderParameters)params);  }  Collection targets;  Iterator targetIter;  List certPathList=new ArrayList();  X509Certificate cert;  Selector certSelect=pkixParams.getTargetConstraints();  if (!(certSelect instanceof X509CertStoreSelector)) {    throw new CertPathBuilderException("TargetConstraints must be an instance of " + X509CertStoreSelector.class.getName() + " for "+ this.getClass().getName()+ " class.");  }  try {    targets=CertPathValidatorUtilities.findCertificates((X509CertStoreSelector)certSelect,pkixParams.getStores());    targets.addAll(CertPathValidatorUtilities.findCertificates((X509CertStoreSelector)certSelect,pkixParams.getCertStores()));  } catch (  AnnotatedException e) {    throw new ExtCertPathBuilderException("Error finding target certificate.",e);  }  if (targets.isEmpty()) {    throw new CertPathBuilderException("No certificate found matching targetContraints.");  }  CertPathBuilderResult result=null;  targetIter=targets.iterator();  while (targetIter.hasNext() && result == null) {    cert=(X509Certificate)targetIter.next();    result=build(cert,pkixParams,certPathList);  }  if (result == null && certPathException != null) {    if (certPathException instanceof AnnotatedException) {      throw new CertPathBuilderException(certPathException.getMessage(),certPathException.getCause());    }    throw new CertPathBuilderException("Possible certificate chain could not be validated.",certPathException);  }  if (result == null && certPathException == null) {    throw new CertPathBuilderException("Unable to find certificate chain.");  }  return result;}  }
class C{  private static int blend_hard_light(int a,int b){  int f=(b & ALPHA_MASK) >>> 24;  int ar=(a & RED_MASK) >> 16;  int ag=(a & GREEN_MASK) >> 8;  int ab=(a & BLUE_MASK);  int br=(b & RED_MASK) >> 16;  int bg=(b & GREEN_MASK) >> 8;  int bb=(b & BLUE_MASK);  int cr=(br < 128) ? ((ar * br) >> 7) : (255 - (((255 - ar) * (255 - br)) >> 7));  int cg=(bg < 128) ? ((ag * bg) >> 7) : (255 - (((255 - ag) * (255 - bg)) >> 7));  int cb=(bb < 128) ? ((ab * bb) >> 7) : (255 - (((255 - ab) * (255 - bb)) >> 7));  return (low(((a & ALPHA_MASK) >>> 24) + f,0xff) << 24 | (peg(ar + (((cr - ar) * f) >> 8)) << 16) | (peg(ag + (((cg - ag) * f) >> 8)) << 8) | (peg(ab + (((cb - ab) * f) >> 8))));}  }
class C{  public long updateTtl(long elapsedTime){  this.ttl-=elapsedTime;  this.currentAnimTimeMillis+=elapsedTime;  if (this.currentAnimTimeMillis >= this.getUpdateTextureMillis() && this.animFrames > 0) {    this.currentAnimTimeMillis=0;    int pos=this.getTextPos();    pos++;    if (pos < this.animFrames) {      this.setTextPos(pos);    } else {      this.setTextPos(0);    }  }  return this.ttl;}  }
class C{  public static Writer newWriter(OutputStream stream){  return new OutputStreamWriter(stream);}  }
class C{  public void irvineHash(final InputStream in) throws IOException {  final byte[] buff=new byte[4096];  int len;  while ((len=in.read(buff,0,buff.length)) > 0) {    irvineHash(buff,0,len);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Seeker.getInstance().removeVideoDirectory(getFile(stack));  return null;}  }
class C{  public static WebSocketFrame createPongFrame(String payload){  return createPongFrame().setPayload(payload);}  }
class C{  private final double compute(GeoTimeSerie gts1,GeoTimeSerie gts2,double threshold) throws WarpScriptException {  if (TYPE.LONG != gts1.getType() && TYPE.DOUBLE != gts1.getType()) {    throw new WarpScriptException(getName() + " can only operate on numerical Geo Time Series.");  }  if (TYPE.LONG != gts2.getType() && TYPE.DOUBLE != gts2.getType()) {    throw new WarpScriptException(getName() + " can only operate on numerical Geo Time Series.");  }  GTSHelper.sort(gts1);  GTSHelper.sort(gts2);  double[] values1=GTSHelper.getValuesAsDouble(gts1);  double min=Double.POSITIVE_INFINITY;  double max=Double.NEGATIVE_INFINITY;  for (int i=0; i < values1.length; i++) {    if (values1[i] < min) {      min=values1[i];    }    if (values1[i] > max) {      max=values1[i];    }  }  if (min == max) {    throw new WarpScriptException(getName() + " cannot (yet) operate on constant GTS.");  }  double range=max - min;  for (int i=0; i < values1.length; i++) {    values1[i]=(values1[i] - max) / range;  }  double[] values2=GTSHelper.getValuesAsDouble(gts2);  min=Double.POSITIVE_INFINITY;  max=Double.NEGATIVE_INFINITY;  for (int i=0; i < values2.length; i++) {    if (values2[i] < min) {      min=values2[i];    }    if (values2[i] > max) {      max=values2[i];    }  }  if (min == max) {    throw new WarpScriptException(getName() + " cannot (yet) operate on constant GTS.");  }  range=max - min;  for (int i=0; i < values2.length; i++) {    values2[i]=(values2[i] - max) / range;  }  return compute(values1,0,values1.length,values2,0,values2.length,threshold);}  }
class C{  public int hashCode(){  int retval=cryptoPermission.hashCode();  if (alg != null)   retval^=alg.hashCode();  if (exemptionMechanism != null) {    retval^=exemptionMechanism.hashCode();  }  retval^=maxKeySize;  if (checkParam)   retval^=100;  if (algParamSpec != null) {    retval^=algParamSpec.hashCode();  }  return retval;}  }
class C{  protected UndoEvent createUndoEventForCurrentState(String whatHappened){  if (whatHappened == null) {    whatHappened=i18n.get(this.getClass(),"rangeRingUndoString","Edit");  }  return new OMRangeRingUndoEvent(this,whatHappened);}  }
class C{  public synchronized RPObject remove(final RPObject object){  if (object.isContained()) {    modify(object);    if (object instanceof SpeakerNPC) {      SingletonRepository.getNPCList().remove(((SpeakerNPC)object).getName());    }    if (object instanceof NPC) {      npcs.remove(object);    }    final RPSlot slot=object.getContainerSlot();    return slot.remove(object.getID());  } else {    return remove(object.getID());  }}  }
class C{  public StrBuilder replaceAll(String searchStr,String replaceStr){  int searchLen=(searchStr == null ? 0 : searchStr.length());  if (searchLen > 0) {    int replaceLen=(replaceStr == null ? 0 : replaceStr.length());    int index=indexOf(searchStr,0);    while (index >= 0) {      replaceImpl(index,index + searchLen,searchLen,replaceStr,replaceLen);      index=indexOf(searchStr,index + replaceLen);    }  }  return this;}  }
class C{  public SolrQueryResult query(Map<String,String> params){  SolrQuery query=new SolrQuery();  query.setFacet(true);  List<SolrQueryParameter> filter=new ArrayList<SolrQueryParameter>();  List<SolrQueryParameter> partitionFilter=new ArrayList<SolrQueryParameter>();  Map<String,List<String>> activeFilterValues=new HashMap<String,List<String>>();  String typeFilterValue=params.get(TYPE);  filter.add(new SolrQueryParameter(FILTER_TYPE,TYPE,FilterType.EXCLUSIVE,FacetSort.COUNT));  if (typeFilterValue != null && typeFilterValue.equalsIgnoreCase(TYPE_PARTITION)) {    typeFilterValue=TYPE_PARTITION;    for (    String parameter : fieldEntityService.findDistinctParameters()) {      partitionFilter.add(new SolrQueryParameter("Parameter: " + parameter,parameter + "_s",FilterType.AND,FacetSort.INDEX));    }    for (    SolrQueryParameter pFilter : partitionFilter) {      query.addFacetField(pFilter.getName());      query.add("f." + pFilter.getName() + ".facet.sort","index");      String filterValue=params.get(pFilter.getName());      if (filterValue != null && !filterValue.isEmpty()) {        query.addFilterQuery(pFilter.getName() + ":" + "("+ filterValue.replace(","," AND ")+ ")");      }    }  } else {    typeFilterValue=TYPE_TABLE;  }  query.addFilterQuery("{!tag=" + TYPE + "}"+ TYPE+ ":"+ typeFilterValue);  query.addFacetField("{!ex=" + TYPE + "}"+ TYPE);  String searchQueryValue=params.get(URLUtil.SEARCH_QUERY_PARAM);  if (searchQueryValue == null || searchQueryValue.isEmpty()) {    searchQueryValue="*";    query.setQuery(searchQueryValue);  } else {    String[] queryTerms=searchQueryValue.trim().split(" ");    String queryTerm="";    for (    String term : queryTerms) {      if (term.isEmpty()) {        continue;      }      if (!queryTerm.isEmpty()) {        queryTerm+=" AND ";      }      queryTerm+="*" + term + "*";    }    query.setQuery(queryTerm);    query.setHighlight(true);    query.setHighlightSimplePre("<b>");    query.setHighlightSimplePost("</b>");    query.setHighlightSnippets(100);    query.set("hl.fl","*");  }  for (  SolrQueryParameter queryFilter : facetFields) {    filter.add(queryFilter);    String value=params.get(queryFilter.getName());    String filterQuery="";    String facetField="";    if (queryFilter.isExcludeFromFacet()) {      if (value != null) {        String[] multipleFilter=value.split(",");        value="(";        for (int i=0; i < multipleFilter.length; i++) {          String filterValue=cleanseValue(multipleFilter[i]).replace(" ","*");          value+="(" + filterValue + ")";          if (i < multipleFilter.length - 1) {            value+=" " + getOperator(queryFilter.getFilterType()) + " ";          }        }        value+=")";      }      filterQuery="{!tag=" + queryFilter.getName() + "}"+ queryFilter.getName()+ ":"+ value;      facetField="{!ex=" + queryFilter.getName() + "}"+ queryFilter.getName();    } else {      if (value != null) {        String[] multipleFilter=value.split(",");        value="(";        for (int i=0; i < multipleFilter.length; i++) {          String filterValue=cleanseValue(multipleFilter[i]).replace(" ","*");          value+="(" + filterValue + ")";          if (i < multipleFilter.length - 1) {            value+=" " + getOperator(queryFilter.getFilterType()) + " ";          }        }        value+=")";      }      filterQuery=queryFilter.getName() + ":" + value;      facetField=queryFilter.getName();    }    if (value != null && !value.isEmpty()) {      query.addFilterQuery(filterQuery);    }    query.addFacetField(facetField);    if (queryFilter.getFacetSort().equals(FacetSort.INDEX)) {      query.add("f." + queryFilter.getName() + ".facet.sort","index");    }    query.add("f." + queryFilter.getName() + ".facet.limit","-1");  }  Map<String,String> facetQueryMap=new HashMap<String,String>();  long now=System.currentTimeMillis() / 1000;  for (  SolrFacetQuery solrFacetQuery : facetQueries) {    for (    SolrHourRange range : solrFacetQuery.getRanges()) {      long from=range.getFrom() == Long.MAX_VALUE ? 0 : now - (range.getFrom() * 3600);      String facetQueryString=solrFacetQuery.getName() + ":[" + from+ " TO "+ now+ "]";      query.addFacetQuery("{!ex=" + solrFacetQuery.getName() + "}"+ facetQueryString);      facetQueryMap.put(solrFacetQuery.getName() + range.getName(),facetQueryString);    }    String value=params.get(solrFacetQuery.getName());    if (value != null) {      String fq="{!tag=" + solrFacetQuery.getName() + "}"+ facetQueryMap.get(solrFacetQuery.getName() + value);      query.addFilterQuery(fq);    }  }  query.setSort(ID,ORDER.asc);  int page=getPageParameter(params);  int elements=getElementsParameter(params);  query.setRows(elements);  query.setStart((page - 1) * elements);  QueryResponse queryResponse=null;  try {    queryResponse=solrClient.query(query);  } catch (  Exception e) {    e.printStackTrace();  }  SolrDocumentList list=queryResponse.getResults();  List<SolrQueryResultEntity> resultEntities=new LinkedList<SolrQueryResultEntity>();  String resultType="";  for (  SolrDocument solrDocument : list) {    String id=(String)solrDocument.get(ID);    if (typeFilterValue.equalsIgnoreCase(TYPE_PARTITION)) {      if (!searchQueryValue.equals("*")) {        resultEntities.add(new SolrQueryResultEntity(viewEntityService.findByUrlPath(id),queryResponse.getHighlighting().get(id)));      } else {        resultEntities.add(new SolrQueryResultEntity(viewEntityService.findByUrlPath(id)));      }      resultType=TYPE_PARTITION;    } else     if (typeFilterValue.equalsIgnoreCase(TYPE_TABLE)) {      if (!searchQueryValue.equals("*")) {        resultEntities.add(new SolrQueryResultEntity(tableEntityService.findByFqdn(id),queryResponse.getHighlighting().get(id)));      } else {        resultEntities.add(new SolrQueryResultEntity(tableEntityService.findByFqdn(id)));      }    }  }  if (resultType.isEmpty()) {    resultType=TYPE_TABLE;  }  filter.addAll(partitionFilter);  Map<String,List<SolrFacet>> facetValues=new HashMap<String,List<SolrFacet>>();  for (  SolrQueryParameter f : filter) {    if (!f.getName().equals(URLUtil.SEARCH_QUERY_PARAM)) {      List<SolrFacet> values=new ArrayList<SolrFacet>();      FacetField facet=queryResponse.getFacetField(f.getName());      for (      Count count : facet.getValues()) {        values.add(new SolrFacet(count.getName(),count.getCount()));      }      facetValues.put(f.getName(),values);    }  }  filter.remove(0);  for (  SolrFacetQuery solrFacetQuery : facetQueries) {    filter.add(new SolrQueryParameter(solrFacetQuery.getDisplayName(),solrFacetQuery.getName(),FilterType.EXCLUSIVE));    List<SolrFacet> values=new ArrayList<SolrFacet>();    for (    SolrHourRange range : solrFacetQuery.getRanges()) {      long facetQueryCount=getFacetQueryCount(queryResponse,"{!ex=" + solrFacetQuery.getName() + "}"+ facetQueryMap.get(solrFacetQuery.getName() + range.getName()));      values.add(new SolrFacet(range.getName(),facetQueryCount));    }    facetValues.put(solrFacetQuery.getName(),values);  }  addToActiveFilterValues(activeFilterValues,params,filter);  SolrQueryResult result=new SolrQueryResult().withResultEntities(resultEntities).withResultType(resultType).withFilters(filter).withFacetValues(facetValues).withActiveFilterValues(activeFilterValues).withSearchQuery(searchQueryValue).withPage(page).withElements(elements).withTotalPages((int)Math.ceil(((double)list.getNumFound()) / elements)).withTotalResults(list.getNumFound());  return result;}  }
class C{  private void summonRats(){  final RatsObserver ratsObserver=new RatsObserver();  for (int j=0; j < (RAT_ZONES.size()); j++) {    final StendhalRPZone zone=(StendhalRPZone)SingletonRepository.getRPWorld().getRPZone(RAT_ZONES.get(j));    final int maxRats=(int)Math.round(Math.sqrt(zone.getWidth() * zone.getHeight()) / 4);    final int minRats=(int)Math.round(Math.sqrt(zone.getWidth() * zone.getHeight()) / 12);    final int ratsCount=Rand.rand(maxRats - minRats) + minRats;    logger.debug(ratsCount + " rats selected at " + zone.getName());    for (int i=0; i < ratsCount; i++) {      final int x=Rand.rand(zone.getWidth());      final int y=Rand.rand(zone.getHeight());      final Creature tempCreature=TPPQuestHelperFunctions.getRandomRat();      final Creature rat=new Creature(tempCreature.getNewInstance());      if (zone.collides(rat,x,y)) {        logger.debug("RATS " + zone.getName() + " "+ x+ " "+ y+ " collided.");        continue;      } else       if (zone.getName().startsWith("0")) {        final List<Node> path=Path.searchPath(zone,x,y,zone.getWidth() / 2,zone.getHeight() / 2,(64 + 64) * 2);        if (path == null || path.size() == 0) {          logger.debug("RATS " + zone.getName() + " "+ x+ " "+ y+ " no path to "+ zone.getWidth() / 2 + " " + zone.getHeight() / 2);          continue;        }      }      rat.registerObjectsForNotification(ratsObserver);      if (tempCreature.getName().equals("archrat")) {        final LinkedList<String> ll=new LinkedList<String>(Arrays.asList("We will capture Ados!","Our revenge will awesome!"));        LinkedHashMap<String,LinkedList<String>> lhm=new LinkedHashMap<String,LinkedList<String>>();        lhm.put("idle",ll);        lhm.put("fight",ll);        lhm.put("follow",ll);        rat.setNoises(lhm);      }      StendhalRPAction.placeat(zone,rat,x,y);      rats.add(rat);    }  }}  }
class C{  public static DoubleTag parseDouble(String mojangson) throws MojangsonParseException {  Character lastChar=mojangson.charAt(mojangson.length() - 1);  if (lastChar.toString().toLowerCase().charAt(0) == MojangsonToken.DOUBLE_SUFFIX.getSymbol()) {    mojangson=mojangson.substring(0,mojangson.length() - 1);  }  try {    return new DoubleTag(Double.valueOf(mojangson));  } catch (  NumberFormatException nfe) {    throw new MojangsonParseException("\'" + mojangson + "\'",MojangsonParseException.ParseExceptionReason.INVALID_FORMAT_NUM);  }}  }
class C{  public Builder perExecutorStatsLogger(StatsLogger perExecutorStatsLogger){  this.perExecutorStatsLogger=perExecutorStatsLogger;  return this;}  }
class C{  public void commitOutstandingModelState(long time){  mStacks[1].ensureCleaningUpDyingTabs(time);  mStacks[0].ensureCleaningUpDyingTabs(time);}  }
class C{  public RelationSchema(){  super("__rel",NAMESPACE,KeyType.Unicode);}  }
