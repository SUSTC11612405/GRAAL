class C{  public int countLinesInFile(String filename) throws IOException {  InputStream is=new BufferedInputStream(new FileInputStream(filename));  try {    byte[] c=new byte[1024];    int count=0;    int readChars=0;    while ((readChars=is.read(c)) != -1) {      for (int i=0; i < readChars; ++i) {        if (c[i] == '\n') {          ++count;        }      }    }    return count;  }  finally {    is.close();  }}  }
class C{  public Matrix(int m,int n){  this.m=m;  this.n=n;  A=new double[m][n];}  }
class C{  protected Lock createReadLock(){  return activeReaders.createLock("Read");}  }
class C{  private Method findToStringMethod(Class<?> cls,String methodName){  Method m;  try {    m=cls.getMethod(methodName);  } catch (  NoSuchMethodException ex) {    throw new IllegalArgumentException(ex);  }  if (Modifier.isStatic(m.getModifiers())) {    throw new IllegalArgumentException("Method must not be static: " + methodName);  }  return m;}  }
class C{  private boolean isConcreteType(String signature,IType context) throws JavaModelException {  if (Signature.TYPE_VARIABLE_SIGNATURE == Signature.getTypeSignatureKind(signature))   return false;  if (context.isBinary()) {    return fUnit.getJavaProject().findType(SignatureUtil.stripSignatureToFQN(signature)) != null;  } else {    return context.resolveType(SignatureUtil.stripSignatureToFQN(signature)) != null;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:59.532 -0500",hash_original_method="1312292D5A501DBED2FE9598863C16EA",hash_generated_method="C7EB206572740D5CD6DD593A49E89FBC") public TransformerFactoryConfigurationError(Exception e,String msg){  super(msg);  this.exception=e;}  }
class C{  protected void formatParamAsVer(final CharArrayBuffer buffer,final String name,final String value,int version){  buffer.append(name);  buffer.append("=");  if (value != null) {    if (version > 0) {      buffer.append('\"');      buffer.append(value);      buffer.append('\"');    } else {      buffer.append(value);    }  }}  }
class C{  public WumpusKnowledgeBase(DPLL dpll,int caveXandYDimensions){  super();  this.dpll=dpll;  this.caveXDimension=caveXandYDimensions;  this.caveYDimension=caveXandYDimensions;  tell(new ComplexSentence(Connective.NOT,newSymbol(PIT,1,1)));  tell(new ComplexSentence(Connective.NOT,newSymbol(WUMPUS,1,1)));  for (int y=1; y <= caveYDimension; y++) {    for (int x=1; x <= caveXDimension; x++) {      List<PropositionSymbol> pitsIn=new ArrayList<PropositionSymbol>();      List<PropositionSymbol> wumpsIn=new ArrayList<PropositionSymbol>();      if (x > 1) {        pitsIn.add(newSymbol(PIT,x - 1,y));        wumpsIn.add(newSymbol(WUMPUS,x - 1,y));      }      if (y < caveYDimension) {        pitsIn.add(newSymbol(PIT,x,y + 1));        wumpsIn.add(newSymbol(WUMPUS,x,y + 1));      }      if (x < caveXDimension) {        pitsIn.add(newSymbol(PIT,x + 1,y));        wumpsIn.add(newSymbol(WUMPUS,x + 1,y));      }      if (y > 1) {        pitsIn.add(newSymbol(PIT,x,y - 1));        wumpsIn.add(newSymbol(WUMPUS,x,y - 1));      }      tell(new ComplexSentence(newSymbol(BREEZE,x,y),Connective.BICONDITIONAL,Sentence.newDisjunction(pitsIn)));      tell(new ComplexSentence(newSymbol(STENCH,x,y),Connective.BICONDITIONAL,Sentence.newDisjunction(wumpsIn)));    }  }  List<PropositionSymbol> wumpsAtLeast=new ArrayList<PropositionSymbol>();  for (int x=1; x <= caveXDimension; x++) {    for (int y=1; y <= caveYDimension; y++) {      wumpsAtLeast.add(newSymbol(WUMPUS,x,y));    }  }  tell(Sentence.newDisjunction(wumpsAtLeast));  int numRooms=(caveXDimension * caveYDimension);  for (int i=0; i < numRooms; i++) {    for (int j=i + 1; j < numRooms; j++) {      tell(new ComplexSentence(Connective.OR,new ComplexSentence(Connective.NOT,newSymbol(WUMPUS,(i / caveXDimension) + 1,(i % caveYDimension) + 1)),new ComplexSentence(Connective.NOT,newSymbol(WUMPUS,(j / caveXDimension) + 1,(j % caveYDimension) + 1))));    }  }}  }
class C{  @Override public long nodeNumber(){  throw new UnsupportedOperationException("Unsupported operation");}  }
class C{  public boolean isVisible(){  return debugGui.isVisible();}  }
class C{  public TVariable createTVariable(){  TVariableImpl tVariable=new TVariableImpl();  return tVariable;}  }
class C{  public void registerProvider(Class<?> dtoInterface,DtoProvider<?> provider){  dtoInterface2Providers.put(dtoInterface,provider);}  }
class C{  public boolean load(){  CProgressDialog.showEndless(m_parent,"Loading available drives",m_loaderThread);  m_debugger.removeListener(m_listener);  if (m_loaderThread.getException() != null) {    CUtilityFunctions.logException(m_loaderThread.getException());    final String message="E00038: " + "Could not request remote file system information";    final String description=CUtilityFunctions.createDescription("BinNavi could not retrieve information about the remote file system.",new String[]{"The connection to the debug client was closed before the request could be sent."},new String[]{"You can not select a target file from the remote system."});    NaviErrorDialog.show(m_parent,message,description,m_loaderThread.getException());  } else   if ((m_fileSystem != null) && (m_processList != null)) {    showRemoteBrowser();  }  return m_selectedTarget;}  }
class C{  public BlockHeight prev(){  return new BlockHeight(this.getRaw() - 1);}  }
class C{  public boolean equals(action_part other){  return other != null && super.equals(other) && other.code_string().equals(code_string());}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writeShape(this.legendArea,stream);}  }
class C{  @Override public void respond(String response){  getBot().sendRaw().rawLine(response);}  }
class C{  @IsAllowed(Operation.READ) public static Result searchInAProject(String loginId,String projectName){  String searchTypeValue=request().getQueryString("searchType");  String keyword=request().getQueryString("keyword");  Project project=Project.findByOwnerAndProjectName(loginId,projectName);  PageParam pageParam=getPage();  if (StringUtils.isEmpty(keyword) || StringUtils.isEmpty(searchTypeValue) || project == null) {    return badRequest(ErrorViews.BadRequest.render());  }  User user=UserApp.currentUser();  SearchType searchType=SearchType.getValue(searchTypeValue);  if (searchType == SearchType.NA || searchType == SearchType.PROJECT) {    return badRequest(ErrorViews.BadRequest.render());  }  SearchResult searchResult=getSearchResult(keyword,user,project,searchType);switch (searchResult.getSearchType()) {case ISSUE:    searchResult.setIssues(Search.findIssues(keyword,user,project,pageParam));  break;case USER:searchResult.setUsers(Search.findUsers(keyword,project,pageParam));break;case POST:searchResult.setPosts(Search.findPosts(keyword,user,project,pageParam));break;case MILESTONE:searchResult.setMilestones(Search.findMilestones(keyword,user,project,pageParam));break;case ISSUE_COMMENT:searchResult.setIssueComments(Search.findIssueComments(keyword,user,project,pageParam));break;case POST_COMMENT:searchResult.setPostComments(Search.findPostComments(keyword,user,project,pageParam));break;case REVIEW:searchResult.setReviews(Search.findReviews(keyword,user,project,pageParam));break;}return ok(result.render("title.search",null,project,searchResult));}  }
class C{  public ScriptException(String msg){  super(msg);}  }
class C{  @Override public void declareOutputFields(OutputFieldsDeclarer declarer){}  }
class C{  private Supplier<FeatureVector> initializeFeatureSupplierFromString(){  return Suppliers.memoize(null);}  }
class C{  public static void init(){  System.out.println(RIOdroid.executeCommand("/etc/init.d/adb.sh start"));  try {    m_jadb=new JadbConnection();  } catch (  IOException e) {    System.out.println("Failed at connection");    e.printStackTrace();  }  setCurrentDevice();}  }
class C{  public void updateCharacterStream(String columnLabel,java.io.Reader reader) throws SQLException {  throw new SQLFeatureNotSupportedException(resBundle.handleGetObject("cachedrowsetimpl.featnotsupp").toString());}  }
class C{  @NonNull public static String humanReadableImperialDistance(@NonNull Resources resources,double miles){  String distance;  String units;  if (miles > 1) {    distance=String.format(Locale.getDefault(),"%.2f",miles);    units=resources.getString(R.string.unit_miles);  } else {    distance=String.format(Locale.getDefault(),"%.2f",UnitUtils.milesToFeet(miles));    units=resources.getString(R.string.unit_feet);  }  return distance + " " + units;}  }
class C{  public Trie reduce(Reduce by){  return by.optimize(this);}  }
class C{  public boolean writeHeader(OutputStream os){  try {    writeInt(os,CACHE_MAGIC);    writeString(os,key);    writeString(os,etag == null ? "" : etag);    writeLong(os,serverDate);    writeLong(os,ttl);    writeLong(os,softTtl);    writeStringStringMap(responseHeaders,os);    os.flush();    return true;  } catch (  IOException e) {    VolleyLog.d("%s",e.toString());    return false;  }}  }
class C{  public boolean isNodesetExpr(){  return true;}  }
class C{  public static String format(Collection<String> d,String sep){  if (d == null) {    return "null";  }  if (d.isEmpty()) {    return "";  }  if (d.size() == 1) {    return d.iterator().next();  }  StringBuilder buffer=new StringBuilder();  Iterator<String> it=d.iterator();  buffer.append(it.next());  while (it.hasNext()) {    buffer.append(sep);    buffer.append(it.next());  }  return buffer.toString();}  }
class C{  @SuppressWarnings("deprecation") public boolean evaluate(){  boolean result=true;  int itemType=Conditional.TEST_TO_ITEM[_type];  log.debug("evaluate: \"{}\" type= {} itemType= {}",getName(),_type,itemType);switch (itemType) {case Conditional.ITEM_TYPE_SENSOR:    Sensor sn=(Sensor)getBean();  if (sn == null) {    log.error("invalid sensor name= \"" + getName() + "\" in state variable");    return (false);  }if (_type == Conditional.TYPE_SENSOR_ACTIVE) {  if (sn.getState() == Sensor.ACTIVE) {    result=true;  } else {    result=false;  }} else if (sn.getState() == Sensor.INACTIVE) {  result=true;} else {  result=false;}break;case Conditional.ITEM_TYPE_TURNOUT:Turnout t=(Turnout)getBean();if (t == null) {log.error("invalid turnout name= \"" + getName() + "\" in state variable");return (false);}if (_type == Conditional.TYPE_TURNOUT_THROWN) {if (t.getKnownState() == Turnout.THROWN) {result=true;} else {result=false;}} else if (t.getKnownState() == Turnout.CLOSED) {result=true;} else {result=false;}break;case Conditional.ITEM_TYPE_LIGHT:Light lgt=(Light)getBean();if (lgt == null) {log.error("invalid light name= \"" + getName() + "\" in state variable");return (false);}if (_type == Conditional.TYPE_LIGHT_ON) {if (lgt.getState() == Light.ON) {result=true;} else {result=false;}} else if (lgt.getState() == Light.OFF) {result=true;} else {result=false;}break;case Conditional.ITEM_TYPE_SIGNALMAST:SignalMast f=(SignalMast)getBean();if (f == null) {log.error("invalid signal mast name= \"" + getName() + "\" in state variable");return (false);}switch (_type) {case Conditional.TYPE_SIGNAL_MAST_LIT:result=f.getLit();break;case Conditional.TYPE_SIGNAL_MAST_HELD:result=f.getHeld();break;case Conditional.TYPE_SIGNAL_MAST_ASPECT_EQUALS:if (f.getAspect() == null) {result=false;} else if (f.getAspect().equals(_dataString)) {result=true;} else {result=false;}break;default :log.warn("unexpected type {} in ITEM_TYPE_SIGNALMAST",_type);}break;case Conditional.ITEM_TYPE_SIGNALHEAD:SignalHead h=(SignalHead)getBean();if (h == null) {log.error("invalid signal head name= \"" + getName() + "\" in state variable");return (false);}switch (_type) {case Conditional.TYPE_SIGNAL_HEAD_RED:if (h.getAppearance() == SignalHead.RED) {result=true;} else {result=false;}break;case Conditional.TYPE_SIGNAL_HEAD_YELLOW:if (h.getAppearance() == SignalHead.YELLOW) {result=true;} else {result=false;}break;case Conditional.TYPE_SIGNAL_HEAD_GREEN:if (h.getAppearance() == SignalHead.GREEN) {result=true;} else {result=false;}break;case Conditional.TYPE_SIGNAL_HEAD_DARK:if (h.getAppearance() == SignalHead.DARK) {result=true;} else {result=false;}break;case Conditional.TYPE_SIGNAL_HEAD_FLASHRED:if (h.getAppearance() == SignalHead.FLASHRED) {result=true;} else {result=false;}break;case Conditional.TYPE_SIGNAL_HEAD_FLASHYELLOW:if (h.getAppearance() == SignalHead.FLASHYELLOW) {result=true;} else {result=false;}break;case Conditional.TYPE_SIGNAL_HEAD_FLASHGREEN:if (h.getAppearance() == SignalHead.FLASHGREEN) {result=true;} else {result=false;}break;case Conditional.TYPE_SIGNAL_HEAD_LUNAR:if (h.getAppearance() == SignalHead.LUNAR) {result=true;} else {result=false;}break;case Conditional.TYPE_SIGNAL_HEAD_FLASHLUNAR:if (h.getAppearance() == SignalHead.FLASHLUNAR) {result=true;} else {result=false;}break;case Conditional.TYPE_SIGNAL_HEAD_LIT:result=h.getLit();break;case Conditional.TYPE_SIGNAL_HEAD_HELD:result=h.getHeld();break;default :result=false;}break;case Conditional.ITEM_TYPE_MEMORY:Memory m=(Memory)getBean();if (m == null) {log.error("invalid memory name= \"" + getName() + "\" in state variable");return (false);}String value1=null;String value2=null;if (m.getValue() != null) {value1=m.getValue().toString();}boolean caseInsensitive=((_type == Conditional.TYPE_MEMORY_EQUALS_INSENSITIVE) || (_type == Conditional.TYPE_MEMORY_COMPARE_INSENSITIVE));if ((_type == Conditional.TYPE_MEMORY_COMPARE) || (_type == Conditional.TYPE_MEMORY_COMPARE_INSENSITIVE)) {Memory m2;if (_namedBeanData != null) {m2=(Memory)_namedBeanData.getBean();} else {try {m2=InstanceManager.memoryManagerInstance().provideMemory(_dataString);} catch (IllegalArgumentException ex) {log.error("invalid data memory name= \"" + _dataString + "\" in state variable");return (false);}}if (m2.getValue() != null) {value2=m2.getValue().toString();}} else {value2=_dataString;}result=compare(value1,value2,caseInsensitive);break;case Conditional.ITEM_TYPE_CONDITIONAL:Conditional c=InstanceManager.getDefault(jmri.ConditionalManager.class).getBySystemName(getName());if (c == null) {c=InstanceManager.getDefault(jmri.ConditionalManager.class).getByUserName(getName());if (c == null) {log.error("invalid conditional name= \"" + getName() + "\" in state variable");return (false);}}if (_type == Conditional.TYPE_CONDITIONAL_TRUE) {if (c.getState() == Conditional.TRUE) {result=true;} else {result=false;}} else if (c.getState() == Conditional.FALSE) {result=true;} else {result=false;}break;case Conditional.ITEM_TYPE_WARRANT:Warrant w=InstanceManager.getDefault(WarrantManager.class).getWarrant(getName());if (w == null) {log.error("invalid Warrant name= \"" + getName() + "\" in state variable");return (false);}switch (_type) {case Conditional.TYPE_ROUTE_FREE:result=w.routeIsFree();break;case Conditional.TYPE_ROUTE_OCCUPIED:result=w.routeIsOccupied();break;case Conditional.TYPE_ROUTE_ALLOCATED:result=w.isAllocated();break;case Conditional.TYPE_ROUTE_SET:result=w.hasRouteSet();break;case Conditional.TYPE_TRAIN_RUNNING:result=!(w.getRunMode() == Warrant.MODE_NONE);break;default :result=false;}break;case Conditional.ITEM_TYPE_CLOCK:Timebase fastClock=InstanceManager.getDefault(jmri.Timebase.class);Date currentTime=fastClock.getTime();int currentMinutes=(currentTime.getHours() * 60) + currentTime.getMinutes();int beginTime=fixMidnight(_num1);int endTime=fixMidnight(_num2);if (beginTime <= endTime) {if ((beginTime <= currentMinutes) && (currentMinutes <= endTime)) {result=true;} else {result=false;}} else {if (beginTime <= currentMinutes || currentMinutes <= endTime) {result=true;} else {result=false;}}break;case Conditional.ITEM_TYPE_OBLOCK:OBlock b=InstanceManager.getDefault(jmri.jmrit.logix.OBlockManager.class).getOBlock(getName());if (b == null) {log.error("invalid OBlock name= \"" + getName() + "\" in state variable");return (false);}result=b.statusIs(_dataString);break;case Conditional.ITEM_TYPE_ENTRYEXIT:NamedBean e=getBean();if (_type == Conditional.TYPE_ENTRYEXIT_ACTIVE) {if (e.getState() == 0x02) {result=true;} else {result=false;}} else if (e.getState() == 0x04) {result=true;} else {result=false;}break;default :break;}if (_not) {result=!result;}if (result) {setState(Conditional.TRUE);} else {setState(Conditional.FALSE);}return (result);}  }
class C{  public static Container north(Component north){  return Container.encloseIn(new BorderLayout(),north,BorderLayout.NORTH);}  }
class C{  public InstanceOfExpression(String[] typeNames){  this.typeNames=typeNames;}  }
class C{  public Object extFunction(String ns,String funcName,Vector argVec,Object methodKey) throws javax.xml.transform.TransformerException {  try {    if (funcName == null) {      String fmsg=XSLMessages.createXPATHMessage(XPATHErrorResources.ER_ARG_CANNOT_BE_NULL,new Object[]{"Function Name"});      throw new NullPointerException(fmsg);    }    javax.xml.namespace.QName myQName=new QName(ns,funcName);    if (extensionInvocationDisabled) {      String fmsg=XSLMessages.createXPATHMessage(XPATHErrorResources.ER_EXTENSION_FUNCTION_CANNOT_BE_INVOKED,new Object[]{myQName.toString()});      throw new XPathFunctionException(fmsg);    }    int arity=argVec.size();    javax.xml.xpath.XPathFunction xpathFunction=resolver.resolveFunction(myQName,arity);    ArrayList argList=new ArrayList(arity);    for (int i=0; i < arity; i++) {      Object argument=argVec.elementAt(i);      if (argument instanceof XNodeSet) {        argList.add(i,((XNodeSet)argument).nodelist());      } else       if (argument instanceof XObject) {        Object passedArgument=((XObject)argument).object();        argList.add(i,passedArgument);      } else {        argList.add(i,argument);      }    }    return (xpathFunction.evaluate(argList));  } catch (  XPathFunctionException xfe) {    throw new org.apache.xml.utils.WrappedRuntimeException(xfe);  }catch (  Exception e) {    throw new javax.xml.transform.TransformerException(e);  }}  }
class C{  @SuppressWarnings({"unchecked"}) @Override public byte[] serialize(Map map){  if (map == null)   return null;  final int size=map.size();  final int[] keyIDs=new int[size];  final int[] valueIDs=new int[size];  final byte[][] keyBytes=new byte[size][];  final byte[][] valueBytes=new byte[size][];  int totalSize=4 + size * 16;  int i=0;  Iterator iter=map.entrySet().iterator();  while (iter.hasNext()) {    final Map.Entry entry=(Map.Entry)iter.next();    final Object key=entry.getKey();    final Object value=entry.getValue();    Class<?> keyClass=key.getClass();    Class<?> valueClass=NullObject.class;    if (value != null) {      valueClass=value.getClass();    }    int keyTypeID=EntityDefinitionManager.getIDBySerDerClass(keyClass);    int valueTypeID=0;    if (valueClass != null) {      valueTypeID=EntityDefinitionManager.getIDBySerDerClass(valueClass);    }    if (keyTypeID == -1) {      if (key instanceof Map) {        keyClass=Map.class;        keyTypeID=EntityDefinitionManager.getIDBySerDerClass(keyClass);      } else {        throw new IllegalArgumentException("Unsupported class: " + keyClass.getName());      }    }    if (valueTypeID == -1) {      if (value instanceof Map) {        valueClass=Map.class;        valueTypeID=EntityDefinitionManager.getIDBySerDerClass(valueClass);      } else {        throw new IllegalArgumentException("Unsupported class: " + valueClass.getName());      }    }    keyIDs[i]=keyTypeID;    valueIDs[i]=valueTypeID;    final EntitySerDeser keySerDer=EntityDefinitionManager.getSerDeser(keyClass);    final EntitySerDeser valueSerDer=EntityDefinitionManager.getSerDeser(valueClass);    if (keySerDer == null) {      throw new IllegalArgumentException("Unsupported class: " + keyClass.getName());    }    if (valueSerDer == null) {      throw new IllegalArgumentException("Unsupported class: " + valueClass.getName());    }    keyBytes[i]=keySerDer.serialize(key);    valueBytes[i]=valueSerDer.serialize(value);    totalSize+=keyBytes[i].length + valueBytes[i].length;    ++i;  }  final byte[] result=new byte[totalSize];  int offset=0;  ByteUtil.intToBytes(size,result,offset);  offset+=4;  for (i=0; i < size; ++i) {    ByteUtil.intToBytes(keyIDs[i],result,offset);    offset+=4;    ByteUtil.intToBytes(keyBytes[i].length,result,offset);    offset+=4;    System.arraycopy(keyBytes[i],0,result,offset,keyBytes[i].length);    offset+=keyBytes[i].length;    ByteUtil.intToBytes(valueIDs[i],result,offset);    offset+=4;    ByteUtil.intToBytes(valueBytes[i].length,result,offset);    offset+=4;    System.arraycopy(valueBytes[i],0,result,offset,valueBytes[i].length);    offset+=valueBytes[i].length;  }  return result;}  }
class C{  public MCity(Properties ctx,int C_City_ID,String trxName){  super(ctx,C_City_ID,trxName);  if (C_City_ID == 0) {  }}  }
class C{  public void test_parkFor_2() throws Exception {  CyclicBarrier barrier=new CyclicBarrier(2);  Parker parker=new Parker(barrier,false,1000);  Thread parkerThread=new Thread(parker);  Thread waiterThread=new Thread(new WaitAndUnpark(barrier,300,parkerThread));  parkerThread.start();  waiterThread.start();  parker.assertDurationIsInRange(300);  waiterThread.join();  parkerThread.join();}  }
class C{  public BasePanel createPanel(String id){  if (id == null) {    return null;  }  log.info("Creating panel with id: {}",id);  BasePanel panel=null;switch (id) {case InstallerConstants.CLUSTER_PANEL_ID:    panel=createClusterPanel();  break;case InstallerConstants.NODE_PANEL_ID:panel=createNodePanel();break;case InstallerConstants.NETWORK_INT_PANEL_ID:panel=createNetIfPanel();break;case InstallerConstants.NETWORK_PANEL_ID:panel=createNetworkPanel();break;case InstallerConstants.DISK_PANEL_ID:panel=createDiskPanel();break;case InstallerConstants.SUMMARY_PANEL_ID:panel=createConfirmationPanel();panel.setLastPage(true);break;case "ERROR_PANEL_ID":panel=createErrorPanel();panel.setLastPage(true);break;}return panel;}  }
class C{  @Override public void onClick(View v){  int i=v.getId();  if (i == R.id.quit_team) {    quitTeam();  } else   if (i == R.id.settings_item_name) {    TeamPropertySettingActivity.start(NormalTeamInfoActivity.this,teamId,TeamFieldEnum.Name,teamNameTextView.getText().toString(),REQUEST_CODE_NAME);  } else {  }}  }
class C{  protected Functions(){}  }
class C{  public boolean isOneDotOne(){  return jdkVersion == JDK1_1;}  }
class C{  public TextImpl replaceWithText(){  TextImpl replacement=new TextImpl(document,getData());  parent.insertBefore(replacement,this);  parent.removeChild(this);  return replacement;}  }
class C{  private void updateCheckedItems(){  for (  TableItem item : table.getItems()) {    Profile data=(Profile)item.getData();    item.setChecked(selectedIds.contains(data.getId()));  }}  }
class C{  public void write(int b) throws IOException {  log.info("random-write(0x" + Long.toHexString(getFilePointer()) + ",1)");  _file.write(b);}  }
class C{  public boolean isDoubleMetaphoneEqual(String value1,String value2,boolean alternate){  return doubleMetaphone(value1,alternate).equals(doubleMetaphone(value2,alternate));}  }
class C{  public boolean isParentBatchWindow(){  return isParentBatchWindow;}  }
class C{  public static String sign2(String buf,SecretKey key,String algorithm){  return sign2(buf.getBytes(),key,algorithm);}  }
class C{  private void configureReconciler(final DocumentHandle documentHandle){  final Reconciler reconciler=configuration.getReconciler();  if (reconciler != null) {    reconciler.setDocumentHandle(documentHandle);    documentHandle.getDocEventBus().addHandler(DocumentChangeEvent.TYPE,reconciler);    reconciler.install(textEditor);  }}  }
class C{  public boolean checkBinding(@NotNull ServerConfiguration serverConfiguration,final ProgressHandler progressHandler){  boolean ret=true;  if (!serverConfiguration.isBound()) {    ret=findUnboundModules(serverConfiguration).isEmpty();  }  return ret;}  }
class C{  public static String concernStackString(BlockInfo blockInfo){  String result="";  for (  String stackEntry : blockInfo.threadStackEntries) {    if (Character.isLetter(stackEntry.charAt(0))) {      String[] lines=stackEntry.split(BlockInfo.SEPARATOR);      for (      String line : lines) {        String keyStackString=concernStackString(line);        if (keyStackString != null) {          return keyStackString;        }      }      return classSimpleName(lines[0]);    }  }  return result;}  }
class C{  public final static char[] encodeToChar(byte[] sArr,boolean lineSep){  int sLen=sArr != null ? sArr.length : 0;  if (sLen == 0)   return new char[0];  int eLen=(sLen / 3) * 3;  int cCnt=((sLen - 1) / 3 + 1) << 2;  int dLen=cCnt + (lineSep ? (cCnt - 1) / 76 << 1 : 0);  char[] dArr=new char[dLen];  for (int s=0, d=0, cc=0; s < eLen; ) {    int i=(sArr[s++] & 0xff) << 16 | (sArr[s++] & 0xff) << 8 | (sArr[s++] & 0xff);    dArr[d++]=CA[(i >>> 18) & 0x3f];    dArr[d++]=CA[(i >>> 12) & 0x3f];    dArr[d++]=CA[(i >>> 6) & 0x3f];    dArr[d++]=CA[i & 0x3f];    if (lineSep && ++cc == 19 && d < dLen - 2) {      dArr[d++]='\r';      dArr[d++]='\n';      cc=0;    }  }  int left=sLen - eLen;  if (left > 0) {    int i=((sArr[eLen] & 0xff) << 10) | (left == 2 ? ((sArr[sLen - 1] & 0xff) << 2) : 0);    dArr[dLen - 4]=CA[i >> 12];    dArr[dLen - 3]=CA[(i >>> 6) & 0x3f];    dArr[dLen - 2]=left == 2 ? CA[i & 0x3f] : '=';    dArr[dLen - 1]='=';  }  return dArr;}  }
class C{  public GridSqlSelect clearColumns(){  visibleCols=0;  cols=new ArrayList<>();  return this;}  }
class C{  public synchronized void openDriver(SurfaceHolder holder) throws IOException {  Camera theCamera=camera;  if (theCamera == null) {    theCamera=OpenCameraInterface.open(requestedCameraId);    if (theCamera == null) {      throw new IOException();    }    camera=theCamera;  }  theCamera.setPreviewDisplay(holder);  if (!initialized) {    initialized=true;    configManager.initFromCameraParameters(theCamera);    if (requestedFramingRectWidth > 0 && requestedFramingRectHeight > 0) {      setManualFramingRect(requestedFramingRectWidth,requestedFramingRectHeight);      requestedFramingRectWidth=0;      requestedFramingRectHeight=0;    }  }  Parameters parameters=theCamera.getParameters();  String parametersFlattened=parameters == null ? null : parameters.flatten();  try {    configManager.setDesiredCameraParameters(theCamera,false);  } catch (  RuntimeException re) {    Log.w(TAG,"Camera rejected parameters. Setting only minimal safe-mode parameters");    Log.i(TAG,"Resetting to saved camera params: " + parametersFlattened);    if (parametersFlattened != null) {      parameters=theCamera.getParameters();      parameters.unflatten(parametersFlattened);      try {        theCamera.setParameters(parameters);        configManager.setDesiredCameraParameters(theCamera,true);      } catch (      RuntimeException re2) {        Log.w(TAG,"Camera rejected even safe-mode parameters! No configuration");      }    }  }}  }
class C{  private String printDFormat(short x){  return printDFormat(Short.toString(x));}  }
class C{  public void testMac14() throws NoSuchAlgorithmException, NoSuchProviderException, IllegalArgumentException, IllegalStateException, InvalidKeyException {  if (!DEFSupported) {    fail(NotSupportedMsg);    return;  }  Mac[] macs=createMacs();  assertNotNull("Mac objects were not created",macs);  byte[] b={(byte)0,(byte)0,(byte)0,(byte)0,(byte)0};  byte[] upd1={(byte)0,(byte)1,(byte)5,(byte)4,(byte)3,(byte)2};  byte[] upd2={(byte)5,(byte)4,(byte)3,(byte)2};  byte[] res1;  byte[] res2;  SecretKeySpec scs=new SecretKeySpec(b,"SHA1");  for (int i=0; i < macs.length; i++) {    macs[i].init(scs);    macs[i].update(upd1,2,4);    res1=macs[i].doFinal();    macs[i].init(scs);    macs[i].update(upd2);    res2=macs[i].doFinal();    assertEquals("Results are not the same",res1.length,res2.length);    for (int t=0; t < res1.length; t++) {      assertEquals("Results are not the same",res1[t],res2[t]);    }    macs[i].init(scs);    macs[i].update((byte)5);    res1=macs[i].doFinal();    macs[i].init(scs);    macs[i].update(upd1,2,1);    res2=macs[i].doFinal();    assertEquals("Results are not the same",res1.length,res2.length);    for (int t=0; t < res1.length; t++) {      assertEquals("Results are not the same",res1[t],res2[t]);    }  }}  }
class C{  default B useCanPlaceOnTag(final boolean useCanPlaceOnTag){  this.meta().setUseCanPlaceOnTag(useCanPlaceOnTag);  return this.getBuilder();}  }
class C{  public Dimension minimumLayoutSize(Container parent){  Dimension cpd, mbd, tpd;  int cpWidth=0;  int cpHeight=0;  int mbWidth=0;  int mbHeight=0;  int tpWidth=0;  int tpHeight=0;  Insets i=parent.getInsets();  JRootPane root=(JRootPane)parent;  if (root.getContentPane() != null) {    cpd=root.getContentPane().getMinimumSize();  } else {    cpd=root.getSize();  }  if (cpd != null) {    cpWidth=cpd.width;    cpHeight=cpd.height;  }  if (root.getMenuBar() != null) {    mbd=root.getMenuBar().getMinimumSize();    if (mbd != null) {      mbWidth=mbd.width;      mbHeight=mbd.height;    }  }  if (root.getWindowDecorationStyle() != JRootPane.NONE && (root.getUI() instanceof MetalRootPaneUI)) {    JComponent titlePane=((MetalRootPaneUI)root.getUI()).getTitlePane();    if (titlePane != null) {      tpd=titlePane.getMinimumSize();      if (tpd != null) {        tpWidth=tpd.width;        tpHeight=tpd.height;      }    }  }  return new Dimension(Math.max(Math.max(cpWidth,mbWidth),tpWidth) + i.left + i.right,cpHeight + mbHeight + tpWidth+ i.top+ i.bottom);}  }
class C{  @Override public boolean retainAll(Collection<?> collection){  throw new UnsupportedOperationException();}  }
class C{  public String convertModuleLoaderToString(EDataType eDataType,Object instanceValue){  return instanceValue == null ? null : instanceValue.toString();}  }
class C{  protected void synchWithTarget(Map<String,Monitor> map) throws MonitorException {  long timeLimit=System.currentTimeMillis() + syncWaitMs;  String name="hotspot.rt.hrt.ticks";  LongMonitor ticks=(LongMonitor)pollFor(map,name,timeLimit);  log("synchWithTarget: " + lvmid + " ");  while (ticks.longValue() == 0) {    log(".");    try {      Thread.sleep(20);    } catch (    InterruptedException e) {    }    if (System.currentTimeMillis() > timeLimit) {      lognl("failed: " + lvmid);      throw new MonitorException("Could Not Synchronize with target");    }  }  lognl("success: " + lvmid);}  }
class C{  public synchronized boolean isNullAutofill(){  return nullAutofill;}  }
class C{  public static Set<Feature> deserializeFeatureSet(byte[] bytes) throws IOException {  BufferedReader in=new BufferedReader(new InputStreamReader(new ByteArrayInputStream(bytes)));  Set<Feature> features=new LinkedHashSet<>();  int numFeatures=Integer.parseInt(in.readLine());  for (int i=0; i < numFeatures; i++) {    String s=in.readLine().trim();    if (s.startsWith("d:")) {      features.add(DiscreteFeature.create(s.substring(2)));    } else     if (s.startsWith("r")) {      s=s.substring(2);      String[] parts=s.split("\t");      assert parts.length == 2 : s + " is not in the valid format";      String name=parts[0];      float value=Float.parseFloat(parts[1]);      features.add(RealFeature.create(name,value));    }  }  in.close();  return features;}  }
class C{  public static void main(String[] args){  Header.printHeader(MyGraphAnalyser.class.toString(),args);  DigicoreNetworkParser dnp=new DigicoreNetworkParser();  DigicoreNetwork network=null;  try {    network=dnp.parseNetwork(args[0]);  } catch (  IOException e) {    throw new RuntimeException("Couldn't read network from " + args[0]);  }  int run=Integer.parseInt(args[1]);switch (run) {case 1:    LOG.info("Calculating the degree distribution.");  calculateDegreeDistribution(args,network,false);break;case 2:LOG.info("Calculating the weighted degree distribution.");calculateDegreeDistribution(args,network,true);break;case 3:LOG.info("Calaculating unweighted `Q' from Molloy and Reed.");calculateMolloyReedQ(args,network,false);break;case 4:LOG.info("Just write out ALL the weighted degree values.");writeAllDegreeValues(args,network,true);break;case 5:LOG.info("Just write out ALL the degree values.");writeAllDegreeValues(args,network,false);break;case 6:LOG.info("Write the edge list and weights for R.");writeEdgeListForR(args,network,true);break;case 7:LOG.info("Calculate betweenness and eigenvalue centrality for R visualisation.");calculateBetweennessAndEigenvalueCentrality(args,network);default :break;}LOG.info("========================   DONE   ==========================");}  }
class C{  public CallSpec<Void,HttpError> likeComment(String commentId){  return Resource.<Void,HttpError>newPutSpec(api,"/v1/groups/forums/posts/comments/{comment_id}/like",false).responseAs(Void.class).pathParam("comment_id",commentId).build();}  }
class C{  public static Document makeDom(byte[] in) throws SAXException, IOException, ParserConfigurationException {  InputStream is=new ByteArrayInputStream(in);  Document dom=DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(is);  return dom;}  }
class C{  protected final void SSE2_X87_FROMLONG(Instruction s){  Operand result=Unary.getClearResult(s);  STORE_LONG_FOR_CONV(Unary.getClearVal(s));  int offset=-burs.ir.stackManager.allocateSpaceForConversion();  StackLocationOperand sl=new StackLocationOperand(true,offset,SSE2_SIZE(result));  RegisterOperand st0=new RegisterOperand(getST0(),result.getType());  EMIT(CPOS(s,MIR_Move.create(IA32_FILD,st0,sl)));  EMIT(CPOS(s,MIR_Move.create(IA32_FSTP,sl.copy(),st0.copyD2U())));  EMIT(CPOS(s,MIR_Move.mutate(s,SSE2_MOVE(result),result,sl.copy())));}  }
class C{  public DataObject queryByTag(URI openstackId,StorageOSUser user,Class<? extends DataObject> block){  URI vipr_tenantId=URI.create(user.getTenantId());  URIQueryResultList uris=new URIQueryResultList();  _dbClient.queryByConstraint(PrefixConstraint.Factory.getTagsPrefixConstraint(block,openstackId.toString(),vipr_tenantId),uris);  if (uris != null) {    while (uris.iterator().hasNext()) {      URI blockUri=uris.iterator().next();      DataObject blockObject=_dbClient.queryObject(block,blockUri);      if (blockObject != null) {        return blockObject;      }    }  }  return null;}  }
class C{  public void addOptionName(String optionName){  if (!optionNames.contains(optionName)) {    optionNames.addElement(optionName);  }}  }
class C{  public RaptorImageRegistry(ResourceManager manager){  Assert.isNotNull(manager);  Device dev=manager.getDevice();  if (dev instanceof Display) {    display=(Display)dev;  }  this.manager=manager;  manager.disposeExec(disposeRunnable);}  }
class C{  @Override public void focusGained(FocusEvent event){}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public Builder bodyLocArgs(List<String> value){  bodyLocArgs=Collections.unmodifiableList(value);  return this;}  }
class C{  public static String readAsciiLine(InputStream in) throws IOException {  StringBuilder result=new StringBuilder(80);  while (true) {    int c=in.read();    if (c == -1) {      throw new EOFException();    } else     if (c == '\n') {      break;    }    result.append((char)c);  }  int length=result.length();  if (length > 0 && result.charAt(length - 1) == '\r') {    result.setLength(length - 1);  }  return result.toString();}  }
class C{  protected DocumentFactory createDocumentFactory(DOMImplementation domImpl,String parserClassname){  return new SAXSVGDocumentFactory(parserClassname);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case RegularExpressionPackage.QUANTIFIER__NON_GREEDY:    setNonGreedy(NON_GREEDY_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  public final boolean equals(final CellRecord arg){  return (getMcc().equals(arg.getMcc())) && (getMnc().equals(arg.getMnc())) && (getArea() == arg.getArea())&& (getSystemId().equals(arg.getSystemId()))&& (getNetworkId().equals(arg.getNetworkId()))&& (getBaseId().equals(arg.getBaseId()))&& (getLogicalCellId() == arg.getLogicalCellId());}  }
class C{  protected String encodeBody(){  return Long.toString(this.sequenceNumber);}  }
class C{  private void addColumnAttribute(int i,List<ColumnAttribute> list){  for (  ColumnAttribute attribute : list) {    if (attribute.getIndex() == i) {      return;    }  }  list.add(new ColumnAttribute(i));}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public final static byte[] writeShort(short v,byte[] b,int offset){  b[offset]=(byte)v;  b[offset + 1]=(byte)(v >> 8);  return b;}  }
class C{  public double[] indicesOf(Geometry subLine){  LinearLocation[] locIndex=LocationIndexOfLine.indicesOf(linearGeom,subLine);  double[] index=new double[]{LengthLocationMap.getLength(linearGeom,locIndex[0]),LengthLocationMap.getLength(linearGeom,locIndex[1])};  return index;}  }
class C{  public CompoundTag(){  super(TagType.COMPOUND);}  }
class C{  @Override public int hashCode(){  return value;}  }
class C{  @Override public JettySolrRunner createJetty(File solrHome,String dataDir,String shardList,String solrConfigOverride,String schemaOverride) throws Exception {  return createProxiedJetty(solrHome,dataDir,shardList,solrConfigOverride,schemaOverride);}  }
class C{  public synchronized void startPreview(){  Camera theCamera=camera;  if (theCamera != null && !previewing) {    theCamera.startPreview();    previewing=true;    autoFocusManager=new AutoFocusManager(context,camera);  }}  }
class C{  protected static token do_id() throws java.io.IOException {  StringBuffer result=new StringBuffer();  String result_str;  Integer keyword_num;  char buffer[]=new char[1];  buffer[0]=(char)next_char;  result.append(buffer,0,1);  advance();  while (id_char(next_char)) {    buffer[0]=(char)next_char;    result.append(buffer,0,1);    advance();  }  result_str=result.toString();  keyword_num=(Integer)keywords.get(result_str);  if (keyword_num != null)   return new token(keyword_num.intValue());  return new str_token(sym.ID,result_str);}  }
class C{  private static void printMenu(){  System.out.println("\n");  System.out.println("Choose one of the following demo options:");  System.out.println("\t1) Search for books");  System.out.println("\t2) My list of books (requires authentication)");  System.out.println("\t3) My annotations (requires authentication)");  System.out.println("\t0) Exit");  System.out.println("\nEnter Number (0-3): ");}  }
class C{  public static byte[] hash(byte[] data,int offset,int len){  try {    MessageDigest a=MessageDigest.getInstance("SHA-256");    a.update(data,offset,len);    return a.digest(a.digest());  } catch (  NoSuchAlgorithmException e) {    throw new RuntimeException(e);  }}  }
class C{  private void extractFile(ZipInputStream zipIn,String filePath) throws IOException {  BufferedOutputStream bos=new BufferedOutputStream(new FileOutputStream(filePath));  byte[] bytesIn=new byte[Constant.BUFFER_SIZE];  int read=0;  while ((read=zipIn.read(bytesIn)) != -1) {    bos.write(bytesIn,0,read);  }  bos.close();}  }
class C{  public void registerAboveContentView(View v,LayoutParams params){  if (!mBroadcasting)   mViewAbove=v;}  }
class C{  private Query readSqlQuery(BinaryRawReaderEx reader){  boolean loc=reader.readBoolean();  String sql=reader.readString();  String typ=reader.readString();  final int pageSize=reader.readInt();  Object[] args=readQueryArgs(reader);  boolean distrJoins=reader.readBoolean();  return new SqlQuery(typ,sql).setPageSize(pageSize).setArgs(args).setLocal(loc).setDistributedJoins(distrJoins);}  }
class C{  public static void fixUtil(String util,String utilPath){  getInternals().fixUtil(util,utilPath);}  }
class C{  protected Object doGetValue(){  return text.getText();}  }
class C{  private void createGui(final List<INaviModule> modules){  setLayout(new BorderLayout());  final JTextArea field=new JTextArea("The current graph has more then one module.\nPlease choose the one to search in.");  field.setEditable(false);  add(field,BorderLayout.NORTH);  m_table=new JTable(new CAddressSelectionTableModel(modules));  m_table.addMouseListener(m_listener);  add(new JScrollPane(m_table),BorderLayout.CENTER);  final CPanelTwoButtons panel=new CPanelTwoButtons(m_listener,"OK","Cancel");  add(panel,BorderLayout.SOUTH);  setSize(500,300);}  }
class C{  public static void scaleY(View v,float fromY,float toY,int duration){  scaleY(v,fromY,toY,duration,null);}  }
class C{  public void addBitmapToMemCache(final String data,final Bitmap bitmap){  if (data == null || bitmap == null) {    return;  }  if (getBitmapFromMemCache(data) == null) {    mLruCache.put(data,bitmap);  }}  }
class C{  public void removePermission(RemovePermissionRequest removePermissionRequest) throws AmazonServiceException, AmazonClientException {  amazonSqsToBeExtended.removePermission(removePermissionRequest);}  }
class C{  public E remove(){  return removeFirst();}  }
class C{  public void switchElements(final int first,final int second){  final boolean oldFirst=isChecked(first);  setChecked(first,isChecked(second));  setChecked(second,oldFirst);  final PluginItem<T> oldFirstObject=model.getElementAt(first);  model.remove(first);  model.insertElementAt(oldFirstObject,second);  setSelectedIndex(second);}  }
class C{  protected boolean isDone(){  return this.done;}  }
class C{  public ClassMap(){  parent=null;}  }
class C{  void filterOutgoingMessage(DistributionMessage m){switch (m.getDSFID()) {case JOIN_RESPONSE:    JoinResponseMessage jrsp=(JoinResponseMessage)m;  if (jrsp.getRejectionMessage() == null && services.getConfig().getTransport().isMcastEnabled()) {    Digest digest=(Digest)this.myChannel.getProtocolStack().getTopProtocol().down(Event.GET_DIGEST_EVT);    HeapDataOutputStream hdos=new HeapDataOutputStream(500,Version.CURRENT);    try {      digest.writeTo(hdos);    } catch (    Exception e) {      logger.fatal("Unable to serialize JGroups messaging digest",e);    }    jrsp.setMessengerData(hdos.toByteArray());  }break;default :break;}}  }
class C{  protected byte[] generateGlyphImageStream(List<XRGlyphCacheEntry> glyphList){  boolean isLCDGlyph=glyphList.get(0).getGlyphSet() == lcdGlyphSet;  ByteArrayOutputStream stream=new ByteArrayOutputStream((isLCDGlyph ? 4 : 1) * 48 * glyphList.size());  for (  XRGlyphCacheEntry cacheEntry : glyphList) {    cacheEntry.writePixelData(stream,isLCDGlyph);  }  return stream.toByteArray();}  }
class C{  protected double assignToNearestCluster(ArrayDBIDs means,DBIDs ids,WritableDoubleDataStore nearest,WritableDoubleDataStore second,WritableIntegerDataStore assignment,DistanceQuery<V> distQ){  assert (means.size() == k);  DBIDArrayIter miter=means.iter();  double cost=0.;  for (DBIDIter iditer=ids.iter(); iditer.valid(); iditer.advance()) {    double mindist=Double.POSITIVE_INFINITY, mindist2=Double.POSITIVE_INFINITY;    int minIndex=-1;    for (int i=0; i < k; i++) {      double dist=distQ.distance(iditer,miter.seek(i));      if (dist < mindist) {        mindist2=mindist;        mindist=dist;        minIndex=i;      } else       if (dist < mindist2) {        mindist2=dist;      }    }    if (minIndex < 0) {      throw new AbortException("Too many infinite distances. Cannot assign objects.");    }    assignment.put(iditer,minIndex);    nearest.put(iditer,mindist);    second.put(iditer,mindist2);    cost+=mindist;  }  return cost;}  }
class C{  private void copyLicenseInformation(PriceModel source,PriceModel destination){  List<VOLocalizedText> licenseDescriptions=localizer.getLocalizedValues(source.getKey(),LocalizedObjectTypes.PRICEMODEL_LICENSE);  if (licenseDescriptions != null) {    for (    VOLocalizedText localizedText : licenseDescriptions) {      String license=localizedText.getText();      String locale=localizedText.getLocale();      localizer.storeLocalizedResource(locale,destination.getKey(),LocalizedObjectTypes.PRICEMODEL_LICENSE,license);    }  }}  }
class C{  public static boolean convertColorInterpolationFilters(Element e){  Value v=getComputedStyle(e,SVGCSSEngine.COLOR_INTERPOLATION_FILTERS_INDEX);  return CSS_LINEARRGB_VALUE == v.getStringValue();}  }
class C{  public short[] unCompress(byte[] compInput){  try {    return Snappy.uncompressShortArray(compInput);  } catch (  IOException e) {    LOGGER.error(e,e.getMessage());  }  return null;}  }
class C{  protected SizeRequirements calculateMajorAxisRequirements(int axis,SizeRequirements r){  if (r == null) {    r=new SizeRequirements();  }  if (!spanSetFromAttributes(axis,r,cssWidth,cssHeight)) {    r=super.calculateMajorAxisRequirements(axis,r);  } else {    SizeRequirements parentR=super.calculateMajorAxisRequirements(axis,null);    int margin=(axis == X_AXIS) ? getLeftInset() + getRightInset() : getTopInset() + getBottomInset();    r.minimum-=margin;    r.preferred-=margin;    r.maximum-=margin;    constrainSize(axis,r,parentR);  }  return r;}  }
class C{  public boolean equals(Object obj){  if (obj instanceof FontKey) {    FontKey font=(FontKey)obj;    return (size == font.size) && (style == font.style) && (family == font.family);  }  return false;}  }
class C{  public boolean isSpringXmlLocationSpecified(){  return !StringUtils.isBlank(this.springXmlLocation);}  }
class C{  public LruCache(Context context){  this(Utils.calculateMemoryCacheSize(context));}  }
class C{  protected boolean isStringFlavor(DataFlavor flavor){  DataFlavor[] flavors=stringFlavors;  for (int i=0; i < flavors.length; i++) {    if (flavors[i].equals(flavor))     return true;  }  return false;}  }
class C{  public UnknownHostException(String s,Exception ex){  super(s,ex);}  }
class C{  public double bumpInitialization(double expressionLevel){  return expressionLevel * this.dishBumps[this.dishNumber] / 100.0;}  }
class C{  public synchronized void addGraphListener(GraphListener cl){  m_graphListeners.addElement(cl);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MRfQLineQty[");  sb.append(get_ID()).append(",Qty=").append(getQty()).append(",Offer=").append(isOfferQty()).append(",Purchase=").append(isPurchaseQty()).append("]");  return sb.toString();}  }
class C{  @Override public boolean isInside(Point point){  return attackPoly.contains(point.x - bounds.x,point.y - bounds.y);}  }
class C{  public void clear(){  while (queue.poll() != null)   ;  modCount++;  Entry[] tab=table;  for (int i=0; i < tab.length; ++i)   tab[i]=null;  size=0;  while (queue.poll() != null)   ;}  }
class C{  public void clear(){  instructionMap.clear();  knownMethodNodes.clear();}  }
class C{  protected boolean engineVerify(byte[] signature,int offset,int length) throws SignatureException {  BigInteger r=null;  BigInteger s=null;  try {    DerInputStream in=new DerInputStream(signature,offset,length);    DerValue[] values=in.getSequence(2);    r=values[0].getBigInteger();    s=values[1].getBigInteger();  } catch (  IOException e) {    throw new SignatureException("invalid encoding for signature");  }  if (r.signum() < 0) {    r=new BigInteger(1,r.toByteArray());  }  if (s.signum() < 0) {    s=new BigInteger(1,s.toByteArray());  }  if ((r.compareTo(presetQ) == -1) && (s.compareTo(presetQ) == -1)) {    BigInteger w=generateW(presetP,presetQ,presetG,s);    BigInteger v=generateV(presetY,presetP,presetQ,presetG,w,r);    return v.equals(r);  } else {    throw new SignatureException("invalid signature: out of range values");  }}  }
class C{  public boolean validate(Class type,File source,boolean strict) throws Exception {  InputStream file=new FileInputStream(source);  try {    return validate(type,file,strict);  }  finally {    file.close();  }}  }
class C{  public static long[] join(long[]... arrays){  if (arrays.length == 0) {    return EMPTY_LONGS;  }  if (arrays.length == 1) {    return arrays[0];  }  if (arrays.length == 2) {    return join(arrays[0],arrays[1]);  }  long[] notNull=null;  int finalSize=0;  int nullArrays=0;  LongArrayList list=new LongArrayList(arrays.length * 10);  for (  long[] array : arrays) {    if ((array == null) || (array.length == 0)) {      nullArrays++;    } else {      notNull=array;      finalSize+=array.length;      list.addElements(list.size(),array);    }  }  if (nullArrays == arrays.length) {    return EMPTY_LONGS;  }  if (nullArrays == (arrays.length - 1)) {    return notNull;  }  return list.toArray(new long[list.size()]);}  }
class C{  public void showNow(){  if (!mIsShown) {    mIsShown=true;    if (mIsAttachedToWindow) {      removeCallbacks(mDelayedHide);      if (mStartTime == -1L) {        postDelayed(mDelayedShow,0);      }    }  }}  }
class C{  private ByteBuffer decode() throws PDFParseException {  buf.rewind();  ByteArrayOutputStream baos=new ByteArrayOutputStream();  byte dupAmount=-1;  byte[] buffer=new byte[128];  while ((dupAmount=buf.get()) != -1 && dupAmount != RUN_LENGTH_EOD) {    if (dupAmount <= 127) {      int amountToCopy=dupAmount + 1;      while (amountToCopy > 0) {        buf.get(buffer,0,amountToCopy);        baos.write(buffer,0,amountToCopy);      }    } else {      byte dupByte=buf.get();      for (int i=0; i < 257 - (int)(dupAmount & 0xFF); i++) {        baos.write(dupByte);      }    }  }  return ByteBuffer.wrap(baos.toByteArray());}  }
class C{  @Override public void chartChanged(ChartChangeEvent event){  this.flag=true;}  }
class C{  public Object[] toArray(){  final ReentrantLock lock=this.lock;  lock.lock();  try {    return q.toArray();  }  finally {    lock.unlock();  }}  }
class C{  public static long copyLarge(Reader input,Writer output,char[] buffer) throws IOException {  long count=0;  int n=0;  while (EOF != (n=input.read(buffer))) {    output.write(buffer,0,n);    count+=n;  }  return count;}  }
class C{  @TargetApi(Build.VERSION_CODES.GINGERBREAD) public static boolean isExternalStorageRemovable(){  return !AndroidVersionUtil.hasGingerbread() || Environment.isExternalStorageRemovable();}  }
class C{  protected int drawLabelText(int textDecoration,boolean rtl,boolean isTickerRunning,boolean endsWith3Points,Object nativeFont,int txtW,int textSpaceW,int shiftText,String text,int x,int y,int fontHeight){  if ((!isTickerRunning) || rtl) {    if (txtW > textSpaceW && textSpaceW > 0) {      if (rtl) {        if ((!isTickerRunning) && endsWith3Points) {          String points="...";          int pointsW=impl.stringWidth(nativeFont,points);          drawString(nativeFont,points,shiftText + x,y,textDecoration,fontHeight);          clipRect(pointsW + shiftText + x,y,textSpaceW - pointsW,fontHeight);        }        x=x - txtW + textSpaceW;      } else       if (endsWith3Points) {        String points="...";        int index=1;        int widest=impl.charWidth(nativeFont,'W');        int pointsW=impl.stringWidth(nativeFont,points);        while (fastCharWidthCheck(text,index,textSpaceW - pointsW,widest,nativeFont) && index < text.length()) {          index++;        }        text=text.substring(0,Math.min(text.length(),Math.max(1,index - 1))) + points;        txtW=impl.stringWidth(nativeFont,text);      }    }  }  drawString(nativeFont,text,shiftText + x,y,textDecoration,fontHeight);  return Math.min(txtW,textSpaceW);}  }
class C{  public InterpreterCompletion(InterpreterCompletion other){  if (other.isSetName()) {    this.name=other.name;  }  if (other.isSetValue()) {    this.value=other.value;  }}  }
class C{  protected Node newNode(){  return new SVGOMForeignObjectElement();}  }
class C{  public HashPrintRequestAttributeSet(PrintRequestAttribute attribute){  super(attribute,PrintRequestAttribute.class);}  }
class C{  public static void explain(Map<String,Double>[] result){  int i=0;  for (  Map<String,Double> topicMap : result) {    System.out.printf("topic %d :\n",i++);    explain(topicMap);    System.out.println();  }}  }
class C{  public FlyweightAttribute(String name,String value,Namespace namespace){  this.qname=getDocumentFactory().createQName(name,namespace);  this.value=value;}  }
class C{  public boolean contains(long millis){  return (this.segmentStart <= millis && millis <= this.segmentEnd);}  }
class C{  @Override public String processCommand(final CommandRequest command){  assertState(isConnected(),"Gfsh must be connected to the GemFire Manager in order to process commands remotely!");  try {    ResponseEntity<String> response=send(createHttpRequest(command),String.class,command.getParameters());    return response.getBody();  } catch (  RestApiCallForCommandNotFoundException e) {    return simpleProcessCommand(command,e);  }catch (  ResourceAccessException e) {    return handleResourceAccessException(e);  }}  }
class C{  public boolean registerRefs(List<LiveRef> refs){  assert !Thread.holdsLock(this);  Set<RefEntry> refsToDirty=null;  long sequenceNum;synchronized (this) {    if (removed) {      return false;    }    Iterator<LiveRef> iter=refs.iterator();    while (iter.hasNext()) {      LiveRef ref=iter.next();      assert ref.getEndpoint().equals(endpoint);      RefEntry refEntry=refTable.get(ref);      if (refEntry == null) {        LiveRef refClone=(LiveRef)ref.clone();        refEntry=new RefEntry(refClone);        refTable.put(refClone,refEntry);        if (refsToDirty == null) {          refsToDirty=new HashSet<>(5);        }        refsToDirty.add(refEntry);      }      refEntry.addInstanceToRefSet(ref);    }    if (refsToDirty == null) {      return true;    }    refsToDirty.addAll(invalidRefs);    invalidRefs.clear();    sequenceNum=getNextSequenceNum();  }  makeDirtyCall(refsToDirty,sequenceNum);  return true;}  }
class C{  public static float[] RGBtoHSL(Color color){  return RGBtoHSL(color.getRed(),color.getGreen(),color.getBlue(),null);}  }
class C{  public DiscoveryResource(String name,Resource root){  super(name);  this.root=root;}  }
class C{  public static final MenuMediator instance(){  if (INSTANCE == null) {    INSTANCE=new MenuMediator();  }  return INSTANCE;}  }
class C{  private void cmd_displayInitialChange(){  cScrutiny.setVisible(false);  c.setVisible(false);  cInitial.setVisible(true);  Timestamp today=TimeUtil.getDay(System.currentTimeMillis());  MCash cash=MCash.get(p_pos.getCtx(),p_pos.getC_CashBook_ID(),today,null);  if (cash != null) {    v_PreviousChange.setValue(cash.getEndingBalance());    v_change.setValue(cash.getEndingBalance());  } else   log.severe("No Cash");}  }
class C{  public CoapResponse advanced(Request request){  assignClientUriIfEmpty(request);  return synchronous(request);}  }
class C{  public boolean isMarkRecipientNotFoundSeen(){  return fieldMarkRecipientNotFoundSeen;}  }
class C{  @Override public String graph() throws Exception {  StringBuffer text=new StringBuffer();  text.append("digraph CobwebTree {\n");  m_cobwebTree.graphTree(text);  text.append("}\n");  return text.toString();}  }
class C{  @Override protected void updateFigure(PositionableShape p){  PositionableRoundRect pos=(PositionableRoundRect)p;  _radius=getInteger(_radiusText,_radius);  p._width=getInteger(_widthText,p._width);  p._height=getInteger(_heightText,p._height);  pos.makeShape();  setPositionableParams(pos);}  }
class C{  private void disconnect(){  Connection c=Connections.getInstance(context).getConnection(clientHandle);  if (!c.isConnected()) {    return;  }  try {    c.getClient().disconnect(null,new ActionListener(context,Action.DISCONNECT,clientHandle,null));    c.changeConnectionStatus(ConnectionStatus.DISCONNECTING);  } catch (  MqttException e) {    Log.e(this.getClass().getCanonicalName(),"Failed to disconnect the client with the handle " + clientHandle,e);    c.addAction("Client failed to disconnect");  }}  }
class C{  public static boolean isNumeric(String maybeNumeric){  return maybeNumeric != null && maybeNumeric.matches("[0-9]+");}  }
class C{  public static int choice(final String title,final String text,final int defaultSelection,final ChoiceItem... items){  return choice(null,title,text,defaultSelection,items);}  }
class C{  public static List<String> toRelativeFiles(@NotNull VirtualFile root,@NotNull final Collection<VirtualFile> files){  ArrayList<String> rc=new ArrayList<String>(files.size());  for (  VirtualFile file : files) {    rc.add(relativePath(root,file));  }  return rc;}  }
class C{  private JMenu createMenu(){  JMenu menu=new JMenu("");  menu.setOpaque(false);  if (getWindowDecorationStyle() == JRootPane.FRAME || getWindowDecorationStyle() == JRootPane.PLAIN_DIALOG) {    addMenuItems(menu);  }  return menu;}  }
class C{  private void updateTimeSinceUpdate(){  final String deltaCellString="Last cell update " + getTimeSinceLastUpdate(mLastCellUpdate) + " ago";  final String deltaWifiString="Last cell update " + getTimeSinceLastUpdate(mLastWifiUpdate) + " ago";  Log.d(TAG,deltaCellString);  Log.d(TAG,deltaWifiString);}  }
class C{  public String toString(long addr){  if (addr == 0L)   return _NULL_;  final long encodedOffset=super.getOffset(addr);  final int nbytes=getByteCount(addr);  return "{region=" + IndexSegmentRegion.decodeRegion(encodedOffset) + ",off="+ IndexSegmentRegion.decodeOffset(encodedOffset)+ ",len="+ nbytes+ "}";}  }
class C{  public void playTogether(Animator... items){  if (items != null) {    mNeedsSort=true;    Builder builder=play(items[0]);    for (int i=1; i < items.length; ++i) {      builder.with(items[i]);    }  }}  }
class C{  public org.omg.CORBA.Object readIOR(URL iorURL) throws IOException {  org.omg.CORBA.Object object=null;  if (iorURL != null) {    URLConnection urlConnection=iorURL.openConnection();    InputStream is=urlConnection.getInputStream();    InputStreamReader isr=new InputStreamReader(is);    BufferedReader reader=new BufferedReader(isr);    String ior=reader.readLine();    if (Debug.debugging("corba")) {      Debug.output("CORBASupport.readIOR() using ior: " + ior);    }    reader.close();    if (ior != null) {      object=initORB(null).string_to_object(ior);    }  }  return object;}  }
class C{  public Builder disableBackends(final boolean disableBackends){  this.disableBackends=of(disableBackends);  return this;}  }
class C{  public CCache(String name,int initialCapacity){  this(name,initialCapacity,120);}  }
class C{  public QuestStateGreaterThanCondition(String quest,int index,int expectedSmallerValue){  this.questname=checkNotNull(quest);  this.expectedSmallerValue=expectedSmallerValue;  this.index=index;}  }
class C{  @Override public void mouseReleased(MouseEvent e){  startSort();  e.consume();}  }
class C{  @Override public CompletableFuture<Boolean> anyMatch(final Predicate<? super T> predicate){  return CompletableFuture.supplyAsync(null,exec);}  }
class C{  public static float cuCreal(cuComplex x){  return x.x;}  }
class C{  @Override public ElectronicTaxReceipt findById(ElectronicTaxReceipt entity) throws DataAccessException {  if (!entity.getId().trim().isEmpty()) {    return dynamoDBMapper.load(getType(),entity.getId());  } else {    return null;  }}  }
class C{  @Override public void onChangedAdded(final RPObject object,final RPObject changes){  super.onChangedAdded(object,changes);  if (changes.has("open")) {    open=true;    fireChange(PROP_OPEN);  }}  }
class C{  public int delete(){  Query query=model.dialect().delete(model);  query.use(db());  return query.execute();}  }
class C{  public boolean isComplete(){  return complete >= length;}  }
class C{  private void createLocalRegion() throws ParseException {  Cache cache=CacheUtils.getCache();  AttributesFactory attributesFactory=new AttributesFactory();  attributesFactory.setDataPolicy(DataPolicy.NORMAL);  RegionAttributes regionAttributes=attributesFactory.create();  Region region=cache.createRegion(regionName,regionAttributes);  for (int i=1; i <= numElem; i++) {    putData(i,region);  }}  }
class C{  private static void loadSystem(){  try {    engine.eval("__GLOBAL = this");    loadSystemLib("Map.js");    loadSystemLib("Toast.js");  } catch (  ScriptException e) {    Toast.log().error("Could not load System Library: " + e);    Toast.log().exception(e);  }}  }
class C{  @Override public boolean equals(Object o){  if (this == o) {    return true;  }  if (o == null || getClass() != o.getClass()) {    return false;  }  final AbstractExternalizablePage that=(AbstractExternalizablePage)o;  return id == that.getPageID();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:07.833 -0500",hash_original_method="D72C3AADC526484DACB4DD861B9B7C6F",hash_generated_method="19D5B64634DDA8BB6E0D00E0EFD7FACF") public int breakText(char[] text,int index,int count,float maxWidth,float[] measuredWidth){  if (text == null) {    throw new IllegalArgumentException("text cannot be null");  }  if (index < 0 || text.length - index < Math.abs(count)) {    throw new ArrayIndexOutOfBoundsException();  }  if (text.length == 0 || count == 0) {    return 0;  }  if (!mHasCompatScaling) {    return native_breakText(text,index,count,maxWidth,measuredWidth);  }  final float oldSize=getTextSize();  setTextSize(oldSize * mCompatScaling);  int res=native_breakText(text,index,count,maxWidth * mCompatScaling,measuredWidth);  setTextSize(oldSize);  if (measuredWidth != null)   measuredWidth[0]*=mInvCompatScaling;  return res;}  }
class C{  @Override @Transactional public void updateDemandDetails(final BillReceiptInfo billRcptInfo){  final BigDecimal totalAmount=billRcptInfo.getTotalAmount();  if (LOGGER.isDebugEnabled())   LOGGER.debug("updateDemandDetails : Demand updation for advertisement started. ");  EgDemand demand=getDemandByBillReferenceNumber(Long.valueOf(billRcptInfo.getBillReferenceNum()));  final AgencyWiseCollection agencyWiseCollection=agencyWiseCollectionService.getAgencyWiseCollectionByDemand(demand);  if (agencyWiseCollection != null) {    agencyWiseCollection.setAmountCollected(Boolean.TRUE);    agencyWiseCollection.setDemandUpdated(Boolean.TRUE);    if (billRcptInfo.getEvent().equals(EVENT_RECEIPT_CREATED))     updateAgencyWiseCollectionOnCreate(billRcptInfo,agencyWiseCollection,totalAmount); else     if (billRcptInfo.getEvent().equals(EVENT_RECEIPT_CANCELLED))     updateAgencyWiseCollectionOnCancel(demand,billRcptInfo,agencyWiseCollection,totalAmount);  } else {    demand=generalDemandUpdationForAdvertisement(billRcptInfo,totalAmount);    updateWorkflowState(demand);  }  if (LOGGER.isDebugEnabled())   LOGGER.debug("updateDemandDetails : Demand updation processed. ");}  }
class C{  public void processRequest(StunMessageEvent evt){synchronized (this) {    collectedRequest=(Request)evt.getMessage();    stunStack.removeRequestListener(this);    logger.finest("Received request.");    notifyAll();  }}  }
class C{  protected CCAnimation(String name){  this(name,(ArrayList<CCSpriteFrame>)null);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodedocumentnodename.class,args);}  }
class C{  public void parseForMethod(GenericDeclaration genericDecl,SignatureTag signature,SootClassType[] rawExceptionTypes){  setInput(genericDecl,signature);  if (!eof) {    parseMethodTypeSignature(rawExceptionTypes);  } else {    if (genericDecl instanceof SootMethodType) {      SootMethodType m=(SootMethodType)genericDecl;      this.formalTypeParameters=ListOfVariables.EMPTY;      this.parameterTypes=new ListOfTypes(m.getParameterTypes());      this.exceptionTypes=new ListOfTypes(m.getExceptionTypes());      this.returnType=m.getReturnType();    } else {      this.formalTypeParameters=ListOfVariables.EMPTY;      this.parameterTypes=ListOfTypes.EMPTY;      this.exceptionTypes=ListOfTypes.EMPTY;      this.returnType=new SootTypeType(VoidType.v());    }  }}  }
class C{  public MailOperationException(){}  }
class C{  public CompiledScript compileScript(){  try {    CompiledScript compiled=((Compilable)engine).compile(this.editor.getText());    return compiled;  } catch (  ScriptException e) {    System.out.println(e);  }  return null;}  }
class C{  public ServerBartender selfServer(){  return _selfServer;}  }
class C{  public static FilterStream create(String eventTypeName,Expression filter){  return new FilterStream(Filter.create(eventTypeName,filter));}  }
class C{  @VisibleForTesting void announce(TripStatistics tripStatistics){  if (tripStatistics == null) {    Log.e(TAG,"TripStatistics is null.");    return;  }synchronized (this) {    if (!ready) {      ready=initStatus == TextToSpeech.SUCCESS;      if (ready) {        onTtsReady();      }    }    if (!ready) {      Log.i(TAG,"TTS not ready.");      return;    }  }  if (!speechAllowed) {    Log.i(TAG,"Speech is not allowed at this time.");    return;  }  speakAnnouncement(getAnnouncement(tripStatistics));}  }
class C{  static double hp15cLogp(double x){  double u=1.0 + x;  return (u == 1.0 ? x : StrictMath.log(u) * x / (u - 1));}  }
class C{  public static String ensureMinTextLength(final String text,final int neededLen,final char ch,final int mode){  final int number=neededLen - text.length();  if (number <= 0) {    return text;  }  final StringBuilder result=new StringBuilder(neededLen);switch (mode) {case 0:{      for (int i=0; i < number; i++) {        result.append(ch);      }      result.append(text);    }  break;case 1:{  result.append(text);  for (int i=0; i < number; i++) {    result.append(ch);  }}break;default :{int leftField=number / 2;int rightField=number - leftField;while (leftField-- > 0) {result.append(ch);}result.append(text);while (rightField-- > 0) {result.append(ch);}}}return result.toString();}  }
class C{  private void sampleEdge(){  int rand=randomUtil.nextInt(getNumNodes() * (getNumNodes() - 1));  randomParent=rand / (getNumNodes() - 1);  int rest=rand - randomParent * (getNumNodes() - 1);  if (rest >= randomParent) {    randomChild=rest + 1;  } else {    randomChild=rest;  }}  }
class C{  public static final int bytes2Int(byte b0,byte b1,byte b2,byte b3){  return (((b0 & 0xff) << 24) | ((b1 & 0xff) << 16) | ((b2 & 0xff) << 8)| (b3 & 0xff));}  }
class C{  Enumeration<BasicBlock> domFrontierEnumerator(IR ir){  return ir.getBasicBlocks(dominanceFrontier);}  }
class C{  public final GF2nPolynomial multiply(GF2nPolynomial b) throws RuntimeException {  int i, j;  int aDegree=size();  int bDegree=b.size();  if (aDegree != bDegree) {    throw new IllegalArgumentException("PolynomialGF2n.multiply: this and b must " + "have the same size!");  }  GF2nPolynomial result=new GF2nPolynomial((aDegree << 1) - 1);  for (i=0; i < size(); i++) {    for (j=0; j < b.size(); j++) {      if (result.coeff[i + j] == null) {        result.coeff[i + j]=(GF2nElement)coeff[i].multiply(b.coeff[j]);      } else {        result.coeff[i + j]=(GF2nElement)result.coeff[i + j].add(coeff[i].multiply(b.coeff[j]));      }    }  }  return result;}  }
class C{  private void status(ValueStatus valStatus){  this.valStatus=valStatus;}  }
class C{  private static void correctParameterData(boolean[] parameterData,boolean compact) throws NotFoundException {  int numCodewords;  int numDataCodewords;  if (compact) {    numCodewords=7;    numDataCodewords=2;  } else {    numCodewords=10;    numDataCodewords=4;  }  int numECCodewords=numCodewords - numDataCodewords;  int[] parameterWords=new int[numCodewords];  int codewordSize=4;  for (int i=0; i < numCodewords; i++) {    int flag=1;    for (int j=1; j <= codewordSize; j++) {      if (parameterData[codewordSize * i + codewordSize - j]) {        parameterWords[i]+=flag;      }      flag<<=1;    }  }  try {    ReedSolomonDecoder rsDecoder=new ReedSolomonDecoder(GenericGF.AZTEC_PARAM);    rsDecoder.decode(parameterWords,numECCodewords);  } catch (  ReedSolomonException rse) {    throw NotFoundException.getNotFoundInstance();  }  for (int i=0; i < numDataCodewords; i++) {    int flag=1;    for (int j=1; j <= codewordSize; j++) {      parameterData[i * codewordSize + codewordSize - j]=(parameterWords[i] & flag) == flag;      flag<<=1;    }  }}  }
class C{  public final void testReadbyteArrayintint04() throws IOException {  for (int ii=0; ii < algorithmName.length; ii++) {    try {      MessageDigest md=MessageDigest.getInstance(algorithmName[ii]);      InputStream is=new ByteArrayInputStream(myMessage);      DigestInputStream dis=new DigestInputStream(is,md);      byte[] bArray=new byte[MY_MESSAGE_LEN];      dis.read(bArray,0,bArray.length);      assertEquals("retval1",-1,dis.read(bArray,0,1));      assertEquals("retval2",-1,dis.read(bArray,0,bArray.length));      assertEquals("retval3",-1,dis.read(bArray,0,1));      assertTrue("update",Arrays.equals(dis.getMessageDigest().digest(),MDGoldenData.getDigest(algorithmName[ii])));      return;    } catch (    NoSuchAlgorithmException e) {    }  }  fail(getName() + ": no MessageDigest algorithms available - test not performed");}  }
class C{  public Matrix3f identity(){  MemUtil.INSTANCE.identity(this);  return this;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (stack.getUIMgr() == null)   return Sage.keys(getString(stack)); else   return stack.getUIMgr().keys(getString(stack));}  }
class C{  public static CurvedEdgeRecord curvedEdge(double startX,double startY,double controlX,double controlY,double anchorX,double anchorY){  startX*=TWIPS_PER_PIXEL;  startY*=TWIPS_PER_PIXEL;  controlX*=TWIPS_PER_PIXEL;  controlY*=TWIPS_PER_PIXEL;  anchorX*=TWIPS_PER_PIXEL;  anchorY*=TWIPS_PER_PIXEL;  int dcx=(int)controlX - (int)startX;  int dcy=(int)controlY - (int)startY;  int dax=(int)anchorX - (int)controlX;  int day=(int)anchorY - (int)controlY;  CurvedEdgeRecord cer=new CurvedEdgeRecord();  cer.controlDeltaX=dcx;  cer.controlDeltaY=dcy;  cer.anchorDeltaX=dax;  cer.anchorDeltaY=day;  return cer;}  }
class C{  private void populateBasicProp(){  LOGGER.debug("Entered into populateBasicProp");  if (basicProp == null)   if (indexNumber != null && !indexNumber.trim().isEmpty())   setBasicProp((BasicProperty)getPersistenceService().findByNamedQuery(QUERY_BASICPROPERTY_BY_UPICNO,indexNumber)); else   if (getModelId() != null && !getModelId().equals(""))   setBasicProp(((PropertyImpl)getPersistenceService().findByNamedQuery(QUERY_PROPERTYIMPL_BYID,Long.valueOf(getModelId()))).getBasicProperty());  LOGGER.debug("Exiting from populateBasicProp");}  }
class C{  @Override public void onRegister(){  super.onRegister();  CommandParser parser=CommandParser.getInstance();  this.updateNickMatchPattern();  for (  String command : server.getConnectCommands()) {    parser.parse(command,server,server.getConversation(ServerInfo.DEFAULT_NAME),service);  }  try {    Thread.sleep(1000);  } catch (  InterruptedException e) {  }  if (autojoinChannels != null) {    for (    String channel : autojoinChannels) {      joinChannel(channel);    }  } else {    for (    String channel : server.getAutoJoinChannels()) {      joinChannel(channel);    }  }  Message infoMessage=new Message(service.getString(R.string.message_login_done));  infoMessage.setColor(Message.COLOR_GREY);  server.getConversation(ServerInfo.DEFAULT_NAME).addMessage(infoMessage);  Intent intent=Broadcast.createConversationIntent(Broadcast.CONVERSATION_MESSAGE,server.getId(),ServerInfo.DEFAULT_NAME);  service.sendBroadcast(intent);}  }
class C{  public static CCTintBy action(float t,ccColor3B c){  return new CCTintBy(t,c);}  }
class C{  private boolean save(){  try {    mySaver.saveLocalChanges(GitUtil.getRootsFromRepositories(myRepositories));    return true;  } catch (  VcsException e) {    LOG.info("Couldn't save local changes",e);    VcsNotifier.getInstance(myProject).notifyError("Couldn't save uncommitted changes.",String.format("Tried to save uncommitted changes in stash before %s, but failed with an error.<br/>%s",myOperationTitle,join(e.getMessages())));    return false;  }}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  public void testBasics() throws Exception {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document document=new Document();  document.add(new DoubleRangeField(FIELD_NAME,new double[]{-10.0,-10.0},new double[]{9.1,10.1}));  writer.addDocument(document);  document=new Document();  document.add(new DoubleRangeField(FIELD_NAME,new double[]{10.0,-10.0},new double[]{20.0,10.0}));  writer.addDocument(document);  document=new Document();  document.add(new DoubleRangeField(FIELD_NAME,new double[]{-20.0,-20.0},new double[]{30.0,30.1}));  writer.addDocument(document);  document=new Document();  document.add(new DoubleRangeField(FIELD_NAME,new double[]{-11.1,-11.2},new double[]{1.23,11.5}));  writer.addDocument(document);  document=new Document();  document.add(new DoubleRangeField(FIELD_NAME,new double[]{12.33,1.2},new double[]{15.1,29.9}));  writer.addDocument(document);  document=new Document();  document.add(new DoubleRangeField(FIELD_NAME,new double[]{-122.33,1.2},new double[]{-115.1,29.9}));  writer.addDocument(document);  document=new Document();  document.add(new DoubleRangeField(FIELD_NAME,new double[]{Double.NEGATIVE_INFINITY,1.2},new double[]{-11.0,29.9}));  writer.addDocument(document);  document=new Document();  document.add(new DoubleRangeField(FIELD_NAME,new double[]{-11,-15},new double[]{15,20}));  writer.addDocument(document);  IndexReader reader=writer.getReader();  IndexSearcher searcher=newSearcher(reader);  assertEquals(7,searcher.count(DoubleRangeField.newIntersectsQuery(FIELD_NAME,new double[]{-11.0,-15.0},new double[]{15.0,20.0})));  assertEquals(2,searcher.count(DoubleRangeField.newWithinQuery(FIELD_NAME,new double[]{-11.0,-15.0},new double[]{15.0,20.0})));  assertEquals(2,searcher.count(DoubleRangeField.newContainsQuery(FIELD_NAME,new double[]{-11.0,-15.0},new double[]{15.0,20.0})));  reader.close();  writer.close();  dir.close();}  }
class C{  public static int radioChoice(final Shell shell,final String title,final String text,final int defaultSelection,final String... values){  final Dialog dialog=new Dialog(shell);  dialog.setTitle(ResourceManager.getLabel(ResourceManager.CHOICE));  dialog.getMessageArea().setTitle(title).setText(text).setIcon(Display.getCurrent().getSystemImage(SWT.ICON_QUESTION)).addRadioButtons(defaultSelection,values);  dialog.setButtonType(OpalDialogType.SELECT_CANCEL);  if (dialog.show() == 0) {    return dialog.getMessageArea().getRadioChoice();  } else {    return -1;  }}  }
class C{  private void initRange(){  mMinX=MathHelper.NULL_VALUE;  mMaxX=-MathHelper.NULL_VALUE;  mMinY=MathHelper.NULL_VALUE;  mMaxY=-MathHelper.NULL_VALUE;  int length=getItemCount();  for (int k=0; k < length; k++) {    double x=getX(k);    double y=getY(k);    updateRange(x,y);  }}  }
class C{  public LatLng(double latitude,double longitude){  this.setLatitudeLongitude(latitude,longitude);}  }
class C{  public AttributeInfo copy(ConstPool newCp,Map classnames){  Copier copier=new Copier(this,newCp,classnames);  copier.visit();  return copier.getStackMap();}  }
class C{  public synchronized void report(int id,long seqno,long time,D datum){  processReport(id,seqno,time,datum);  notifyAll();}  }
class C{  public OutSegment openWriterGc(long sequence){  int segmentSize=_segmentSizeGc;  SegmentKelp segment=_segmentService.createSegment(segmentSize,getTableKey(),sequence);  addTableSegmentLength(segmentSize);  return new OutSegment(_table,_table.getTableService(),this,segment);}  }
class C{  public void assertEquals(Object[] expected,Object[] actual){  if (expected == null || actual == null) {    assertTrue(expected == actual);    return;  }  assertEquals(expected.length,actual.length);  for (int i=0; i < expected.length; i++) {    if (expected[i] == null || actual[i] == null) {      if (expected[i] != actual[i]) {        fail("[" + i + "]: expected: "+ expected[i]+ " actual: "+ actual[i]);      }    } else     if (!expected[i].equals(actual[i])) {      fail("[" + i + "]: expected: "+ expected[i]+ " actual: "+ actual[i]);    }  }}  }
class C{  public void dataRefresh(int row,boolean fireEvent){  log.fine("#" + m_vo.TabNo + " - row="+ row);  m_mTable.dataRefresh(row,fireEvent);  setCurrentRow(row,fireEvent);  if (fireEvent)   fireStateChangeEvent(new StateChangeEvent(this,StateChangeEvent.DATA_REFRESH));}  }
class C{  public Luffa384(){  super();}  }
class C{  @VisibleForTesting int findPositionForConnection(Connection conn){  if (mConnections.isEmpty()) {    return 0;  }  int pointerMin=0;  int pointerMax=mConnections.size();  int yPos=conn.getPosition().y;  while (pointerMin < pointerMax) {    int pointerMid=(pointerMin + pointerMax) / 2;    int pointerY=mConnections.get(pointerMid).getPosition().y;    if (pointerY < yPos) {      pointerMin=pointerMid + 1;    } else     if (pointerY > yPos) {      pointerMax=pointerMid;    } else {      pointerMin=pointerMid;      break;    }  }  return pointerMin;}  }
class C{  static String retrievePropertyFile(){  return System.getProperty(AGENT_PROPSFILE_PROPERTY_NAME,DEFAULT_PROPERTY_FILE);}  }
class C{  public static void applyToOr(ColorHolder colorHolder,TextView textView,ColorStateList colorDefault){  if (colorHolder != null && textView != null) {    colorHolder.applyToOr(textView,colorDefault);  } else   if (textView != null) {    textView.setTextColor(colorDefault);  }}  }
class C{  public GlobalFlowDynamicsUpdator(Map<Id<VehicleType>,TravelModesFlowDynamicsUpdator> travelModeFlowDataContainer){  this.travelModesFlowData=travelModeFlowDataContainer;  for (  Id<VehicleType> vehTyp : this.travelModesFlowData.keySet()) {    this.travelModesFlowData.get(vehTyp).initDynamicVariables();  }  this.globalFlowData=new TravelModesFlowDynamicsUpdator();  this.globalFlowData.setnumberOfAgents(person2Mode.size());  this.globalFlowData.initDynamicVariables();  this.permanentRegime=false;}  }
class C{  public IoBuffer doHandshake(IoBuffer input){  log.trace("doHandshake: {}",input);  IoBuffer out=null;  if (input == null) {    out=generateClientRequest1();  } else {    if (log.isDebugEnabled()) {      input.mark();      byte handshakeType=input.get();      log.debug("Handshake type: {}",(handshakeType & 0x0ff));      input.reset();    }    if (decodeServerResponse(input)) {      out=generateClientRequest2();    } else {      log.warn("Decoding server response failed");    }  }  return out;}  }
class C{  public void considerNames(String[] classNames){  if (classNames != null) {    for (    String className : classNames) {      considerName(className);    }  }}  }
class C{  public String numAttributesTipText(){  return "The number of attributes the generated data will contain.";}  }
class C{  public ExtensionDescription(Class<? extends Extension> extensionClass,XmlNamespace namespace,String localName,boolean required,boolean repeatable,boolean aggregate){  this(extensionClass,namespace,localName,required,repeatable,aggregate,false,false);}  }
class C{  IBinding resolveImport(ImportDeclaration importDeclaration){  return null;}  }
class C{  public boolean isAttackerCover(){  return attackerCover >= COVER_LOWLEFT;}  }
class C{  public void testApp(){  assertTrue(true);}  }
class C{  public static void print(String[] inputs){}  }
class C{  public static int fromMillisToInternal(long millis){  if (millis < 0)   throw new IllegalArgumentException("millis must be not positive: " + millis);  if (millis < MILLIS_MAX)   return (int)millis;  long seconds=-(millis / 1000);  return seconds < Integer.MIN_VALUE ? Integer.MIN_VALUE : (int)seconds;}  }
class C{  public Float evaluate(float fraction,Number startValue,Number endValue){  float startFloat=startValue.floatValue();  return startFloat + fraction * (endValue.floatValue() - startFloat);}  }
class C{  public static String toString(final double value){  return Double.toString(value);}  }
class C{  public BigInteger toBigInteger(){  return new BigInteger(1,bytes);}  }
class C{  public ThreadData(String threadName,String threadState,long cpuTimeInNanoSeconds){  this.threadName=threadName;  this.threadState=threadState;  this.cpuTimeInNanoSeconds=cpuTimeInNanoSeconds;}  }
class C{  public ParseException generateParseException(){  jj_expentries.clear();  boolean[] la1tokens=new boolean[33];  if (jj_kind >= 0) {    la1tokens[jj_kind]=true;    jj_kind=-1;  }  for (int i=0; i < 26; i++) {    if (jj_la1[i] == jj_gen) {      for (int j=0; j < 32; j++) {        if ((jj_la1_0[i] & (1 << j)) != 0) {          la1tokens[j]=true;        }        if ((jj_la1_1[i] & (1 << j)) != 0) {          la1tokens[32 + j]=true;        }      }    }  }  for (int i=0; i < 33; i++) {    if (la1tokens[i]) {      jj_expentry=new int[1];      jj_expentry[0]=i;      jj_expentries.add(jj_expentry);    }  }  jj_endpos=0;  jj_rescan_token();  jj_add_error_token(0,0);  int[][] exptokseq=new int[jj_expentries.size()][];  for (int i=0; i < jj_expentries.size(); i++) {    exptokseq[i]=jj_expentries.get(i);  }  return new ParseException(token,exptokseq,tokenImage);}  }
class C{  public static <T>boolean removeFromList(T listener,List<? extends ListenerRegistration<T>> list){  checkNotNull(listener);  ListenerRegistration<T> item=null;  for (  ListenerRegistration<T> registration : list) {    if (registration.listener == listener) {      item=registration;      break;    }  }  return item != null && list.remove(item);}  }
class C{  public static BigInteger[] subArray(BigInteger[] input,int start,int end){  BigInteger[] result=new BigInteger[end - start];  System.arraycopy(input,start,result,0,end - start);  return result;}  }
class C{  private static void sort(ByteArrayOutputStream baos,byte[] unsortedBytes) throws IOException {  PcapByteInputStream pcapIs=new PcapByteInputStream(unsortedBytes);  PcapByteOutputStream pcapOs=new PcapByteOutputStream(baos,pcapIs.getGlobalHeader());  PcapPacket packet;  ArrayList<PcapPacket> packetList=new ArrayList<PcapPacket>();  try {    while (true) {      packet=pcapIs.getPacket();      if (packet == null)       break;      packetList.add(packet);      LOG.debug("Presort packet: " + packet.getPacketHeader().toString());    }  } catch (  EOFException e) {  }  Collections.sort(packetList,PCAP_PACKET_COMPARATOR);  for (  PcapPacket p : packetList) {    pcapOs.write(p);    LOG.debug("Postsort packet: " + p.getPacketHeader().toString());  }  pcapOs.close();}  }
class C{  static public char representingChar(final Class<?> type){  final Character ch=REPRESENTING_CHAR.get(type);  return ch == null ? 0 : ch.charValue();}  }
class C{  private void validateLocations(){  if (fLocationList.size() > 0) {    String loc=null;    for (Iterator<String> iterator=fLocationList.iterator(); iterator.hasNext(); ) {      loc=(String)iterator.next();      if (!ResourceHelper.isValidLibraryLocation(loc)) {        this.preferencePage.setErrorMessage("{0} is not a valid library path location");        this.preferencePage.setValid(false);        return;      }    }  }  this.preferencePage.setValid(true);  this.preferencePage.setErrorMessage(null);}  }
class C{  private void checkUnsorted(Map<Action,Constraints> unsortedMap,Action action,List<Action> result){  Iterator<Map.Entry<Action,Constraints>> itr=unsortedMap.entrySet().iterator();  while (itr.hasNext()) {    Map.Entry<Action,Constraints> entry=itr.next();    String actionId=actionManager.getId(action);    Action relatedAction=entry.getKey();    Constraints relatedConstraints=entry.getValue();    if (relatedConstraints.relativeId.equals(actionId)) {      if (relatedConstraints.myAnchor.equals(Anchor.BEFORE)) {        result.add(result.indexOf(action),relatedAction);      } else       if (relatedConstraints.myAnchor.equals(Anchor.AFTER)) {        result.add(result.indexOf(action) + 1,relatedAction);      }      itr.remove();      checkUnsorted(unsortedMap,relatedAction,result);    }  }}  }
class C{  public boolean accept(Node node){  return pseudoClass.match(node);}  }
class C{  protected void handleToolTip(String tip,MouseEvent me){  if (lastToolTip != null && lastToolTip.equals(tip)) {    return;  }  lastToolTip=tip;  if (layer != null) {    if (lastToolTip != null && lastToolTip.trim().length() > 0) {      layer.fireRequestToolTip(lastToolTip);      ToolTipManager toolTipManager=ToolTipManager.sharedInstance();      toolTipManager.mouseMoved(me);    } else {      layer.fireHideToolTip();    }  }}  }
class C{  public Promise<T> onSuccess(Action1<T> success){  return new Promise<T>(this.observable.doOnNext(success));}  }
class C{  public void scanJarFile(){  fileCombo.removeAllItems();  try {    JarInputStream zin=new JarInputStream(new FileInputStream(JarName));    JarEntry entry;    while ((entry=zin.getNextJarEntry()) != null) {      String nameOfEntry=entry.getName();      if (nameOfEntry.endsWith(".gsci"))       fileCombo.addItem(nameOfEntry);      zin.closeEntry();    }    zin.close();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  @Override ImmutableSortedMap<DateTime,Key<CommitLogManifest>> transformBeforeSave(ImmutableSortedMap<DateTime,Key<CommitLogManifest>> revisions){  DateTime now=ofy().getTransactionTime();  DateTime threshold=now.minus(ENVIRONMENT.config().getCommitLogDatastoreRetention());  DateTime preThresholdTime=firstNonNull(revisions.floorKey(threshold),START_OF_TIME);  return new ImmutableSortedMap.Builder<DateTime,Key<CommitLogManifest>>(Ordering.natural()).putAll(revisions.subMap(preThresholdTime,true,now.withTimeAtStartOfDay(),false)).put(now,ofy().getCommitLogManifestKey()).build();}  }
class C{  private V putImpl(K key,V value){  V item=null;  int hash=key.hashCode() & _mask;  int count=_values.length;  for (; count > 0; count--) {    item=_values[hash];    if (item == null) {      _keys[hash]=key;      _values[hash]=value;      _size++;      return null;    }    if (_keys[hash].equals(key)) {      _values[hash]=value;      return item;    }    hash=(hash + 1) & _mask;  }  throw new IllegalStateException();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:14.313 -0500",hash_original_method="F4B890B3C1A244A1C39416FB7B7BF8FF",hash_generated_method="319DD8CC07E19C06E96272BE0679E8DF") public void clear(){  for (int i=0; i < segments.length; ++i)   segments[i].clear();}  }
class C{  @Override public void updateShort(String columnLabel,short x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateShort(" + quote(columnLabel) + ", (short) "+ x+ ");");    }    update(columnLabel,ValueShort.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public AtlasBatchGeometryVisualPanel1(){  initComponents();}  }
class C{  Item newDouble(final double value){  key.set(value);  Item result=get(key);  if (result == null) {    pool.putByte(DOUBLE).putLong(key.longVal);    result=new Item(index,key);    index+=2;    put(result);  }  return result;}  }
class C{  private void statInit(){  searchPanel.setLayout(new ALayout());  int cols=0;  int col=2;  int row=0;  for (  MBrowseField field : m_Browse.getCriteriaFields()) {    String title=field.getName();    String name=field.getAD_View_Column().getColumnName();    searchPanel.addField(field,row,cols,name,title);    cols=cols + col;    if (field.isRange())     cols=cols + col;    if (cols >= 4) {      cols=0;      row++;    }  }  searchPanel.dynamicDisplay();  if (m_Browse.getAD_Process_ID() > 0) {    m_process=MProcess.get(Env.getCtx(),m_Browse.getAD_Process_ID());    ProcessInfo pi=new ProcessInfo(m_process.getName(),m_Browse.getAD_Process_ID());    pi.setAD_User_ID(Env.getAD_User_ID(Env.getCtx()));    pi.setAD_Client_ID(Env.getAD_Client_ID(Env.getCtx()));    pi.setWindowNo(getWindowNo());    setBrowseProcessInfo(pi);    parameterPanel=new ProcessParameterPanel(pi.getWindowNo(),pi);    parameterPanel.setMode(ProcessParameterPanel.MODE_HORIZONTAL);    parameterPanel.init();    processPanel.add(parameterPanel,BorderLayout.CENTER);  }}  }
class C{  public void xform(Regex regexp,String repl){  String s=regexp.sub(repl,this._str);  s=x.Regex("\\{\\}").sub("",s);  this._str=s;}  }
class C{  public static byte[] toByteArray(Reader input) throws IOException {  ByteArrayOutputStream output=new ByteArrayOutputStream();  copy(input,output);  return output.toByteArray();}  }
class C{  ArrayInitializer(AST ast){  super(ast);}  }
class C{  private void validateWWN(String wwn){  if (!WWNUtility.isValidWWN(wwn)) {    throw APIException.badRequests.illegalWWN(wwn);  }}  }
class C{  public HashNotMatchException(final String message,final Throwable cause,final String hashFunction){  super(message,cause);  this.hashFunction=hashFunction;}  }
class C{  public boolean canGoBack(){  return this.inAppWebView.canGoBack();}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int col;  int row;  int numCols;  int numRows;  int a;  int i;  float progress=0;  int range;  boolean blnTextOutput=false;  double z;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      blnTextOutput=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    numRows=image.getNumberRows();    numCols=image.getNumberColumns();    double noData=image.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette(image.getPreferredPalette());    int minVal=(int)image.getMinimumValue();    int maxVal=(int)image.getMaximumValue();    range=maxVal - minVal;    long[] totalColumns=new long[range + 1];    long[] totalRows=new long[range + 1];    long[] totalN=new long[range + 1];    double[] data=null;    for (row=0; row < numRows; row++) {      data=image.getRowValues(row);      for (col=0; col < numCols; col++) {        if (data[col] > 0) {          a=(int)data[col] - minVal;          totalColumns[a]+=col;          totalRows[a]+=row;          totalN[a]++;        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (numRows - 1));      updateProgress((int)progress);    }    for (a=0; a <= range; a++) {      if (totalN[a] > 0) {        col=(int)(totalColumns[a] / totalN[a]);        row=(int)(totalRows[a] / totalN[a]);        output.setValue(row,col,a + minVal);      }    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    image.close();    output.close();    if (blnTextOutput) {      String retstr="Patch Centroid\nPatch ID\tColumn\tRow";      for (a=0; a <= range; a++) {        if (totalN[a] > 0) {          retstr=retstr + "\n" + (a + minVal)+ "\t"+ ((float)totalColumns[a] / totalN[a])+ "\t"+ ((float)totalRows[a] / totalN[a]);        }      }      returnData(retstr);    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  protected ExtendedRuntimeEnvironmentImpl(){  super();}  }
class C{  public String title(){  return getView() != null ? getView().getTitle() : "";}  }
class C{  public String globalInfo(){  return "Class for a Naive Bayes classifier using estimator classes. Numeric" + " estimator precision values are chosen based on analysis of the " + " training data. For this reason, the classifier is not an"+ " UpdateableClassifier (which in typical usage are initialized with zero"+ " training instances) -- if you need the UpdateableClassifier functionality,"+ " use the NaiveBayesUpdateable classifier. The NaiveBayesUpdateable"+ " classifier will  use a default precision of 0.1 for numeric attributes"+ " when buildClassifier is called with zero training instances.\n\n"+ "For more information on Naive Bayes classifiers, see\n\n"+ getTechnicalInformation().toString();}  }
class C{  public static void registerReferralValuesInAnalytics(){  final String utmSource=SharedPreferenceHelper.getString(R.string.pref_utm_source,"Google Play");  final String utmCampaign=SharedPreferenceHelper.getString(R.string.pref_utm_campaign,"discovery");  final String utmMedium=SharedPreferenceHelper.getString(R.string.pref_utm_medium,"App Store");  final String utmContent=SharedPreferenceHelper.getString(R.string.pref_utm_content,"Store Listing");  final String utmTerm=SharedPreferenceHelper.getString(R.string.pref_utm_term,"Store Listing");  MixpanelAnalytics.getInstance().setReferralInfo(utmSource,utmCampaign,utmMedium,utmContent,utmTerm);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:06.292 -0500",hash_original_method="D2434A1CAFA87CC30850BFCF09357749",hash_generated_method="E11215F902D1914FB169602BEAD50BE4") public void writeToParcel(Parcel p,int flags){  p.addTaint(getTaint());  p.addTaint(flags);}  }
class C{  @DSComment("Layout") @DSSafe(DSCat.GUI) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:36.442 -0500",hash_original_method="959C37211929CCCB2D56BECF55A0682A",hash_generated_method="2BE76C86A36FE34A2D756B4BA1850375") public TableLayout(Context context,AttributeSet attrs){  super(context,attrs);  TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.TableLayout);  String stretchedColumns=a.getString(R.styleable.TableLayout_stretchColumns);  if (stretchedColumns != null) {    if (stretchedColumns.charAt(0) == '*') {      mStretchAllColumns=true;    } else {      mStretchableColumns=parseColumns(stretchedColumns);    }  }  String shrinkedColumns=a.getString(R.styleable.TableLayout_shrinkColumns);  if (shrinkedColumns != null) {    if (shrinkedColumns.charAt(0) == '*') {      mShrinkAllColumns=true;    } else {      mShrinkableColumns=parseColumns(shrinkedColumns);    }  }  String collapsedColumns=a.getString(R.styleable.TableLayout_collapseColumns);  if (collapsedColumns != null) {    mCollapsedColumns=parseColumns(collapsedColumns);  }  a.recycle();  initTableLayout();}  }
class C{  public double weight(){  return weight;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof StandardXYZToolTipGenerator)) {    return false;  }  if (!super.equals(obj)) {    return false;  }  StandardXYZToolTipGenerator that=(StandardXYZToolTipGenerator)obj;  if (!ObjectUtilities.equal(this.zFormat,that.zFormat)) {    return false;  }  if (!ObjectUtilities.equal(this.zDateFormat,that.zDateFormat)) {    return false;  }  return true;}  }
class C{  public static void quickSort(Object[] a,int fromIndex,int toIndex){  rangeCheck(a.length,fromIndex,toIndex);  quickSort1(a,fromIndex,toIndex - fromIndex);}  }
class C{  public static <V,E,F>Graph<E,F> foldHypergraphVertices(Hypergraph<V,E> h,Supplier<Graph<E,F>> graph_factory,Supplier<F> edge_factory){  Graph<E,F> target=graph_factory.get();  for (  E e : h.getEdges())   target.addVertex(e);  for (  V v : h.getVertices()) {    ArrayList<E> incident=new ArrayList<E>(h.getIncidentEdges(v));    for (int i=0; i < incident.size(); i++)     for (int j=i + 1; j < incident.size(); j++)     target.addEdge(edge_factory.get(),incident.get(i),incident.get(j));  }  return target;}  }
class C{  public boolean visit(QualifiedName node){  collectTaint(node,false);  return false;}  }
class C{  public void widgetSelected(SelectionEvent e){  UIHelper.runUIAsync(new DataDisplay(resultPage,columnNumber));}  }
class C{  @Ignore @Test public void test_DR_PGSPERSISTENCE_VALIDATEQUEUE_Restart_Validate_Receiver(){  Integer lnPort=(Integer)vm0.invoke(null);  Integer nyPort=(Integer)vm1.invoke(null);  createCacheInVMs(nyPort,vm2,vm3);  createReceiverInVMs(vm2,vm3);  vm2.invoke(null);  vm3.invoke(null);  createCacheInVMs(lnPort,vm4,vm5,vm6,vm7);  String diskStore1=(String)vm4.invoke(null);  String diskStore2=(String)vm5.invoke(null);  String diskStore3=(String)vm6.invoke(null);  String diskStore4=(String)vm7.invoke(null);  LogWriterUtils.getLogWriter().info("The DS are: " + diskStore1 + ","+ diskStore2+ ","+ diskStore3+ ","+ diskStore4);  vm4.invoke(null);  vm5.invoke(null);  vm6.invoke(null);  vm7.invoke(null);  startSenderInVMs("ln",vm4,vm5,vm6,vm7);  vm4.invoke(null);  vm5.invoke(null);  vm6.invoke(null);  vm7.invoke(null);  vm4.invoke(null);  vm5.invoke(null);  vm6.invoke(null);  vm7.invoke(null);  vm4.invoke(null);  LogWriterUtils.getLogWriter().info("Completed puts in the region");  vm4.invoke(null);  vm5.invoke(null);  vm6.invoke(null);  vm7.invoke(null);  LogWriterUtils.getLogWriter().info("Killed all the senders.");  vm4.invoke(null);  vm5.invoke(null);  vm6.invoke(null);  vm7.invoke(null);  LogWriterUtils.getLogWriter().info("Created back the cache");  vm4.invoke(null);  vm5.invoke(null);  vm6.invoke(null);  vm7.invoke(null);  LogWriterUtils.getLogWriter().info("Created the senders back from the disk store.");  AsyncInvocation inv1=vm4.invokeAsync(null);  AsyncInvocation inv2=vm5.invokeAsync(null);  AsyncInvocation inv3=vm6.invokeAsync(null);  AsyncInvocation inv4=vm7.invokeAsync(null);  try {    inv1.join();    inv2.join();    inv3.join();    inv4.join();  } catch (  InterruptedException e) {    e.printStackTrace();    fail();  }  startSenderInVMsAsync("ln",vm4,vm5,vm6,vm7);  LogWriterUtils.getLogWriter().info("Waiting for senders running.");  vm4.invoke(null);  vm5.invoke(null);  vm6.invoke(null);  vm7.invoke(null);  LogWriterUtils.getLogWriter().info("All the senders are now running...");  vm2.invoke(null);  vm3.invoke(null);  vm4.invoke(null);  vm2.invoke(null);  vm3.invoke(null);}  }
class C{  @Override public boolean isDefined(){  return true;}  }
class C{  void existsAction(NodeRepresentation nodeRep){  int idx=nodeRep.getParentIndex();  Vector<NodeRepresentation> parentVec=nodeRep.parentVector;  Decomposition decomp=nodeRep.decomposition;  hasChanged=true;  if (decomp.definedOp != null) {    if (parentVec == assumeReps) {      assumpDefinitions.add(decomp.definedOp);    } else {      goalDefinitions.add(decomp.definedOp);    }  }  if (!nodeRep.isCreated && this.hasAssumes) {    needsStepNumber=true;  }  QuantifierDecomposition qdc=decomposeQuantifier(nodeRep,false);  qdc.body.isCreated=true;  parentVec.remove(idx);  if ((parentVec == assumeReps) && (andSplitBegin != -1)) {    andSplitEnd=andSplitEnd + qdc.news.size();  }  for (int i=0; i < qdc.news.size(); i++) {    parentVec.add(idx + i,qdc.news.elementAt(i));  }  parentVec.add(idx + qdc.news.size(),qdc.body);  raiseWindow();}  }
class C{  @Nullable public ProblemDescriptor[] checkMethod(@NotNull PsiMethod method,@NotNull InspectionManager manager,boolean isOnTheFly){  return null;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public boolean containsNestedExpression(){  return fse != null;}  }
class C{  private HadoopTask createTask(){  boolean isAbort=taskInfo().type() == HadoopTaskType.ABORT;switch (taskInfo().type()) {case SETUP:    return useNewMapper ? new HadoopV2SetupTask(taskInfo()) : new HadoopV1SetupTask(taskInfo());case MAP:  return useNewMapper ? new HadoopV2MapTask(taskInfo()) : new HadoopV1MapTask(taskInfo());case REDUCE:return useNewReducer ? new HadoopV2ReduceTask(taskInfo(),true) : new HadoopV1ReduceTask(taskInfo(),true);case COMBINE:return useNewCombiner ? new HadoopV2ReduceTask(taskInfo(),false) : new HadoopV1ReduceTask(taskInfo(),false);case COMMIT:case ABORT:return useNewReducer ? new HadoopV2CleanupTask(taskInfo(),isAbort) : new HadoopV1CleanupTask(taskInfo(),isAbort);default :return null;}}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:27.790 -0500",hash_original_method="8402B39923C22D1FB24B49B49F1F42A8",hash_generated_method="48A29604CC980B78A222C3033D186876") static GsmMmiCode newFromDialString(String dialString,GSMPhone phone){  Matcher m;  GsmMmiCode ret=null;  m=sPatternSuppService.matcher(dialString);  if (m.matches()) {    ret=new GsmMmiCode(phone);    ret.poundString=makeEmptyNull(m.group(MATCH_GROUP_POUND_STRING));    ret.action=makeEmptyNull(m.group(MATCH_GROUP_ACTION));    ret.sc=makeEmptyNull(m.group(MATCH_GROUP_SERVICE_CODE));    ret.sia=makeEmptyNull(m.group(MATCH_GROUP_SIA));    ret.sib=makeEmptyNull(m.group(MATCH_GROUP_SIB));    ret.sic=makeEmptyNull(m.group(MATCH_GROUP_SIC));    ret.pwd=makeEmptyNull(m.group(MATCH_GROUP_PWD_CONFIRM));    ret.dialingNumber=makeEmptyNull(m.group(MATCH_GROUP_DIALING_NUMBER));  } else   if (dialString.endsWith("#")) {    ret=new GsmMmiCode(phone);    ret.poundString=dialString;  } else   if (isTwoDigitShortCode(phone.getContext(),dialString)) {    ret=null;  } else   if (isShortCode(dialString,phone)) {    ret=new GsmMmiCode(phone);    ret.dialingNumber=dialString;  }  return ret;}  }
class C{  public void write(Object[] values,EventBean theEvent){  MappedEventBean mappedEvent=(MappedEventBean)theEvent;  Map<String,Object> map=mappedEvent.getProperties();  for (int i=0; i < writers.length; i++) {    writers[i].write(values[i],map);  }}  }
class C{  public static Registrar makeRegistrar2(){  return makeRegistrarCommon().setClientId("TheRegistrar").setRegistrarName("The Registrar").setIanaIdentifier(1L).setPassword("password2").setPhoneNumber("+1.2223334444").setPhonePasscode("22222").build();}  }
class C{  private HttpStream(PathImpl path,String host,int port,Socket s) throws IOException {  _s=s;  _host=host;  _port=port;  _is=_s.getInputStream();  _os=_s.getOutputStream();  _ws=VfsStreamOld.openWrite(_os);  _rs=VfsStreamOld.openRead(_is,_ws);  _attributes=new HashMap<String,Object>();  init(path);}  }
class C{  @Override public boolean batchFinished() throws Exception {  int i;  Instances insts;  Instance inst;  if (getInputFormat() == null) {    throw new NullPointerException("No input instance format defined");  }  insts=getInputFormat();  if (!isFirstBatchDone()) {    setup(insts);  }  for (i=0; i < insts.numInstances(); i++) {    inst=convertInstance(insts.instance(i));    inst.setDataset(getOutputFormat());    push(inst);  }  flushInput();  m_NewBatch=true;  m_FirstBatchDone=true;  return (numPendingOutput() != 0);}  }
class C{  public ScopedElementItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  private void resume(){  log.trace("Resume loop thread");  if (coordinatorRequests.shouldShutdownNow() && coordinatorRequests.commitRequests().isEmpty()) {    shutdownNow=true;  }synchronized (latch) {    latch.notifyAll();  }}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  if (!WebEnv.initWeb(config))   throw new ServletException("CheckOutServlet.init");}  }
class C{  private int peekType(boolean inDeclaration) throws IOException, XmlPullParserException {  if (position >= limit && !fillBuffer(1)) {    return END_DOCUMENT;  }switch (buffer[position]) {case '&':    return ENTITY_REF;case '<':  if (position + 3 >= limit && !fillBuffer(4)) {    throw new XmlPullParserException("Dangling <",this,null);  }switch (buffer[position + 1]) {case '/':  return END_TAG;case '?':if ((position + 5 < limit || fillBuffer(6)) && (buffer[position + 2] == 'x' || buffer[position + 2] == 'X') && (buffer[position + 3] == 'm' || buffer[position + 3] == 'M')&& (buffer[position + 4] == 'l' || buffer[position + 4] == 'L')&& (buffer[position + 5] == ' ')) {  return XML_DECLARATION;} else {  return PROCESSING_INSTRUCTION;}case '!':switch (buffer[position + 2]) {case 'D':return DOCDECL;case '[':return CDSECT;case '-':return COMMENT;case 'E':switch (buffer[position + 3]) {case 'L':return ELEMENTDECL;case 'N':return ENTITYDECL;}break;case 'A':return ATTLISTDECL;case 'N':return NOTATIONDECL;}throw new XmlPullParserException("Unexpected <!",this,null);default :return START_TAG;}case '%':return inDeclaration ? PARAMETER_ENTITY_REF : TEXT;default :return TEXT;}}  }
class C{  public static boolean isMnemonicHidden(){  if (UIManager.getBoolean("Button.showMnemonics") == true) {    isMnemonicHidden=false;  }  return isMnemonicHidden;}  }
class C{  private void updateAgentsCombo(){  agentsCombo.removeAll();  if ((null != availableAgents) && !availableAgents.isEmpty()) {    agentsCombo.setEnabled(true);    int i=0;    int selectedIndex=-1;    for (    PlatformIdent platformIdent : availableAgents) {      agentsCombo.add(TextFormatter.getAgentDescription(platformIdent));      if (ObjectUtils.equals(platformIdent,displayedAgent)) {        selectedIndex=i;      }      i++;    }    if (-1 != selectedIndex) {      agentsCombo.select(selectedIndex);    }  } else {    agentsCombo.setEnabled(false);  }  mainForm.getHead().layout();}  }
class C{  public boolean isHomeAsUpEnabled(){  return enableHomeAsUp;}  }
class C{  public static String encodeLines(byte[] in,int iOff,int iLen,int lineLen,String lineSeparator){  int blockLen=(lineLen * 3) / 4;  if (blockLen <= 0)   throw new IllegalArgumentException();  int lines=(iLen + blockLen - 1) / blockLen;  int bufLen=((iLen + 2) / 3) * 4 + lines * lineSeparator.length();  StringBuilder buf=new StringBuilder(bufLen);  int ip=0;  while (ip < iLen) {    int l=Math.min(iLen - ip,blockLen);    buf.append(encode(in,iOff + ip,l));    buf.append(lineSeparator);    ip+=l;  }  return buf.toString();}  }
class C{  public final void walkGraph(Hashtable semNodesTable){  Integer uid=new Integer(myUID);  if (semNodesTable.get(uid) != null)   return;  semNodesTable.put(new Integer(myUID),this);  if (op != null) {    op.walkGraph(semNodesTable);  }  ;}  }
class C{  public int hashCode(){  int hash=name.hashCode() * 127;  if (tag == ARRAY) {    Class type=value.getClass();    if (type == int[].class) {      return hash ^ Arrays.hashCode((int[])value);    } else     if (type == byte[].class) {      return hash ^ Arrays.hashCode((byte[])value);    } else     if (type == short[].class) {      return hash ^ Arrays.hashCode((short[])value);    } else     if (type == long[].class) {      return hash ^ Arrays.hashCode((long[])value);    } else     if (type == char[].class) {      return hash ^ Arrays.hashCode((char[])value);    } else     if (type == boolean[].class) {      return hash ^ Arrays.hashCode((boolean[])value);    } else     if (type == float[].class) {      return hash ^ Arrays.hashCode((float[])value);    } else     if (type == double[].class) {      return hash ^ Arrays.hashCode((double[])value);    }    return hash ^ Arrays.hashCode((Object[])value);  } else {    return hash ^ value.hashCode();  }}  }
class C{  @SuppressWarnings("unchecked") public static <V>Collection<V> newKnownCollection(Object col){  Class<?> cls=col == null ? null : col.getClass();  if (cls == HashSet.class)   return U.newHashSet(((Collection)col).size()); else   if (cls == LinkedHashSet.class)   return U.newLinkedHashSet(((Collection)col).size()); else   if (!wrapTrees() && cls == TreeSet.class)   return new TreeSet<>(((TreeSet<Object>)col).comparator()); else   if (cls == ConcurrentSkipListSet.class)   return new ConcurrentSkipListSet<>(((ConcurrentSkipListSet<Object>)col).comparator()); else   if (cls == ArrayList.class)   return new ArrayList<>(((Collection)col).size()); else   if (cls == LinkedList.class)   return new LinkedList<>();  return null;}  }
class C{  protected final int reverseAlignForBidi(boolean rtl,int align){  if (rtl) {switch (align) {case Component.RIGHT:      return Component.LEFT;case Component.LEFT:    return Component.RIGHT;}}return align;}  }
class C{  @Override public PipelineRunner startAsync(){  pipelineService.startAsync();  return this;}  }
class C{  public static synchronized void returnClientManager(AWSClientManager clientManager,AwsClientType awsClientType){  AwsClientManagerEntry clientManagerHolder=clientManagersByType.get(awsClientType);  if (clientManagerHolder != null) {    if (clientManager != clientManagerHolder.clientManager) {      throw new IllegalArgumentException("Incorrect client manager reference passed to the method.");    }    clientManagerHolder.clientReferenceCount--;    if (clientManagerHolder.clientReferenceCount == 0) {      clientManagerHolder.clientManager.cleanUp();    }  }}  }
class C{  private void revalidateOwnerTypes(UiBinderSubtypeToOwnerIndex preBuildOwnerIndex,Set<ICompilationUnit> validatedCompilationUnits){  UiBinderSubtypeToOwnerIndex postBuildOwnerIndex=UiBinderReferenceManager.INSTANCE.getSubtypeToOwnerIndex();  Set<UiBinderSubtypeAndOwner> subtypesAndOwners=new HashSet<UiBinderSubtypeAndOwner>(postBuildOwnerIndex.getAllUiBinderTypesAndOwners());  subtypesAndOwners.addAll(preBuildOwnerIndex.getAllUiBinderTypesAndOwners());  Set<ICompilationUnit> cusToTouch=new HashSet<ICompilationUnit>();  for (  UiBinderSubtypeAndOwner entry : subtypesAndOwners) {    if (validatedCompilationUnits.contains(entry.getUiBinderType().getCompilationUnit())) {      IType ownerType=entry.findOwnerType();      if (ownerType != null && !entry.hasCommonCompilationUnit()) {        ICompilationUnit compilationUnit=ownerType.getCompilationUnit();        if (compilationUnit != null && compilationUnit.exists()) {          cusToTouch.add(compilationUnit);        }      }    }  }  if (!cusToTouch.isEmpty()) {    BuilderUtilities.revalidateCompilationUnits(cusToTouch,"Revalidating UiBinder owner classes");  }}  }
class C{  int serializeComponent(final WorkspaceComponent component){  component.save(stream,null);  return getId(component);}  }
class C{  public void clearCache(){  if (mMemoryCache != null) {    mMemoryCache.evictAll();    LOGD(TAG,"Memory cache cleared");  }}  }
class C{  void release(Sample sample){  sample.next=head;  head=sample;}  }
class C{  protected HttpUriRequest newHttpUriRequest(String url){  return new HttpGet(url);}  }
class C{  public void pendingDeliveryTokens(int count) throws Exception {  IMqttDeliveryToken[] tokens=client.getPendingDeliveryTokens();  logToFile("pendingDeliveryTokens [count:" + tokens.length + "]");  if (!client.isConnected() && (tokens.length != count)) {    throw new Exception("Unexpected pending tokens [expected:" + count + "][actual:"+ tokens.length+ "]");  }}  }
class C{  public static JsonApiPath parsePath(URL path){  String[] pathParts=splitPath(path.getPath());  validatePath(pathParts);  String resource=parseResource(pathParts);  Optional<Set<String>> ids=parseIds(pathParts);  Optional<String> relationship=relationship(pathParts);  Optional<String> field=parseField(pathParts);  return new JsonApiPath(resource,ids,relationship,field);}  }
class C{  public void clearSeriesLabels(int series){  Integer key=new Integer(series);  this.seriesLabelLists.put(key,null);}  }
class C{  public CertificateRequest(byte[] certificate_types,X509Certificate[] accepted){  if (accepted == null) {    fatalAlert(AlertProtocol.INTERNAL_ERROR,"CertificateRequest: array of certificate authority certificates is null");  }  this.certificate_types=certificate_types;  int totalPrincipalsLength=0;  certificate_authorities=new X500Principal[accepted.length];  encoded_principals=new byte[accepted.length][];  for (int i=0; i < accepted.length; i++) {    certificate_authorities[i]=accepted[i].getIssuerX500Principal();    encoded_principals[i]=certificate_authorities[i].getEncoded();    totalPrincipalsLength+=encoded_principals[i].length + 2;  }  length=3 + certificate_types.length + totalPrincipalsLength;}  }
class C{  public static void copy(FieldReader input,FieldWriter output){  writeValue(input,output);}  }
class C{  private static Element parseSequenceNode(String name,Element sequenceNode,Element bodyNode,Element xformSchemaNode,Element bindingNode,Hashtable<String,String> problemList,Hashtable<String,String> problemListItems,Hashtable<String,Element> repeatControls,boolean repeatItem,Element modelNode){  Element labelNode=null, controlNode=bodyNode.createElement(NAMESPACE_XFORMS,null);  ;  for (int i=0; i < sequenceNode.getChildCount(); i++) {    if (sequenceNode.isText(i))     continue;    Element node=(Element)sequenceNode.getChild(i);    String itemName=node.getAttributeValue(null,ATTRIBUTE_NAME);    if (repeatItem) {      if (problemListItems.containsKey(itemName)) {        List<String> repeats=repeatSharedKids.get(itemName);        if (repeats == null) {          repeats=new ArrayList<String>();          repeatSharedKids.put(itemName,repeats);        }        repeats.add(problemListItems.get(itemName));      }      problemListItems.put(itemName,name);    }    if (!itemName.equalsIgnoreCase(NODE_VALUE)) {      String type=node.getAttributeValue(null,"type");      if (type != null && !repeatItem) {        if (problemList.containsKey(name))         return addProblemListSection(name,bodyNode,repeatControls,modelNode); else         continue;      }      if (repeatItem) {        String binding=name + "_" + itemName;        if (name.equals(problemListItems.get(binding))) {          repeatChildTypes.put(type,binding);        }      }      if (!itemName.equalsIgnoreCase(NODE_DATE) && !itemName.equalsIgnoreCase(NODE_TIME) && node.getChildCount() > 0)       labelNode=parseMultiSelectNode(name,itemName,node,controlNode,bodyNode,labelNode,bindingNode,problemList,problemListItems,repeatControls,modelNode);      continue;    }    if (node.getAttributeValue(null,ATTRIBUTE_NILLABLE).equalsIgnoreCase("0"))     bindingNode.setAttribute(null,ATTRIBUTE_REQUIRED,XPATH_VALUE_TRUE);    labelNode=parseSequenceValueNode(name,node,labelNode,bodyNode,bindingNode,problemList,problemListItems,repeatControls,modelNode);  }  return labelNode;}  }
class C{  public void printStats(List<? extends JCTree> trees) throws IOException {  for (List<? extends JCTree> l=trees; l.nonEmpty(); l=l.tail) {    align();    printStat(l.head);    println();  }}  }
class C{  public boolean isKeyInCache(String key){  if (!disableCache)   return annotationCache.isKeyInCache(key); else {    logger.error("client called isKeyInCache(), but disableCache is set to 'true'.");    return false;  }}  }
class C{  public void write(Graph graph,String filename) throws IOException {  this.graph=graph;  openFile(filename);  setPrettyPrint(true);  vertexTmpIds=new TObjectIntHashMap<Vertex>();  writeXmlHead();  int indent=0;  setIndentationLevel(indent++);  List<Tuple<String,String>> attrs=new LinkedList<Tuple<String,String>>();  attrs.add(createTuple(GraphML.XMLNS_TAG,GraphML.XMLNS_URL));  writeStartTag(GraphML.GRAPHML_TAG,attrs);  setIndentationLevel(indent++);  writeStartTag(GraphML.GRAPH_TAG,getGraphAttributes());  setIndentationLevel(indent);  writeVertices();  writeEdges();  setIndentationLevel(--indent);  writeEndTag(GraphML.GRAPH_TAG);  setIndentationLevel(--indent);  writeEndTag(GraphML.GRAPHML_TAG);  close();}  }
class C{  public static SubqueryTable fromQuery(Query query,String name){  return new SubqueryTable(null,null,name,query);}  }
class C{  private void createDatabase(){}  }
class C{  @Override public FileLock tryLock(long position,long size,boolean shared) throws IOException {  throw new IOException("Method is unsupported.");}  }
class C{  private void addToMap(HashMap<OperatorPair,AffinityRule> affinitiesMap,AffinityRule rule,OperatorPair operators){  OperatorMeta operator1=getOperatorMeta(operators.first);  OperatorMeta operator2=getOperatorMeta(operators.second);  if (operator1 == null || operator2 == null) {    if (operator1 == null && operator2 == null) {      throw new ValidationException(String.format("Operators %s & %s specified in affinity rule are not part of the dag",operators.first,operators.second));    }    throw new ValidationException(String.format("Operator %s specified in affinity rule is not part of the dag",operator1 == null ? operators.first : operators.second));  }  affinitiesMap.put(operators,rule);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MCStage[").append(get_ID()).append("-").append(getName()).append("]");  return sb.toString();}  }
class C{  @Override public boolean canLoad(Entity unit){  boolean result=false;  if ((unit instanceof Aero) && !(unit instanceof FighterSquadron) && !(unit instanceof SmallCraft)&& !(unit instanceof Jumpship)) {    result=true;  }  if (currentSpace < 1) {    result=false;  }  if (getRecoverySlots() < 1) {    result=false;  }  return result;}  }
class C{  public boolean search(T[] collection,T t){  for (  T item : collection) {    if (item.equals(t)) {      return true;    }  }  return false;}  }
class C{  public Object lookup(String type,String url) throws IOException {  ClassLoader loader=Thread.currentThread().getContextClassLoader();  try {    Class api=Class.forName(type,false,loader);    return factory.create(api,url);  } catch (  Exception e) {    throw new IOException(String.valueOf(e));  }}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  private Images(){}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.987 -0400",hash_original_method="CB513BDE86C193A798DC85AC9115E8A4",hash_generated_method="7FFE9169098715172BAEA6D91F058509") @Override public String toString(){  StringBuilder builder=new StringBuilder(super.toString());  builder.append("(");  builder.append(new String(magicNumbers));  builder.append(",");  builder.append(this.byteOffset);  builder.append(")");  return builder.toString();}  }
class C{  public <S extends T>S save(S entity){  return PMF.get().getPersistenceManager().makePersistent(entity);}  }
class C{  private void initialize(ModelValidator validator,MClient client){  if (client == null)   m_globalValidators.add(validator);  m_validators.add(validator);  validator.initialize(this,client);}  }
class C{  @NonNull private AnimatorSet createEnteringImageAnimation(){  Log.v(TAG,">> createEnteringImageAnimation");  ObjectAnimator positionAnimator=createEnteringImagePositionAnimator();  ObjectAnimator matrixAnimator=createEnteringImageMatrixAnimator();  AnimatorSet enteringImageAnimation=new AnimatorSet();  enteringImageAnimation.playTogether(positionAnimator,matrixAnimator);  Log.v(TAG,"<< createEnteringImageAnimation");  return enteringImageAnimation;}  }
class C{  public DProblem(JDialog parent,String title,Problem problem){  super(parent,ModalityType.DOCUMENT_MODAL);  setTitle(title);  this.problem=problem;  initComponents();}  }
class C{  @Override public boolean nullsAreSortedAtEnd(){  debugCodeCall("nullsAreSortedAtEnd");  return false;}  }
class C{  private void addVideoSharing(VideoSharingImpl videoSharing,String sharingId){  if (sLogger.isActivated()) {    sLogger.debug(new StringBuilder("Add an video sharing in the list (size=").append(mVideoSharingCache.size()).append(")").toString());  }  mVideoSharingCache.put(sharingId,videoSharing);}  }
class C{  public static boolean isClassAvailable(String className){  boolean result=false;  try {    Class.forName(className);    result=true;  } catch (  ClassNotFoundException ex) {  }  return result;}  }
class C{  public static void e(String tag,String msg){  e(tag,msg,null);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public ImmutableSortedMap<K,V> build(){  Entry<?,?>[] entryArray=entries.toArray(new Entry<?,?>[entries.size()]);  sortEntries(entryArray,comparator);  validateEntries(entryArray,comparator);  return new ImmutableSortedMap<K,V>(entryArray,comparator);}  }
class C{  public void addDate(ICalDate icalDate,ICalProperty property,ICalParameters parameters){  if (!icalDate.hasTime()) {    return;  }  if (icalDate.getRawComponents().isUtc()) {    return;  }  String tzid=parameters.getTimezoneId();  if (tzid == null) {    addFloatingDate(property,icalDate);  } else {    addTimezonedDate(tzid,property,icalDate);  }}  }
class C{  @android.view.RemotableViewMethod public void smoothScrollByOffset(int offset){  super.smoothScrollByOffset(offset);}  }
class C{  public boolean isUnique(){switch (this.type) {case IllegalType:case NonUnique:    return false;case Primary:case Unique:  return true;default :return false;}}  }
class C{  protected void tearDown(){}  }
class C{  public static double doubleParsable(JTextField tField){  try {    String text=tField.getText().replaceFirst("\\s+","");    return SimbrainConstants.LOCAL_FORMATTER.parse(text).doubleValue();  } catch (  NullPointerException|NumberFormatException|ParseException ex) {    return Double.NaN;  }}  }
class C{  public static final CButton createProcessButton(String text){  AppsAction aa=new AppsAction(A_PROCESS,KeyStroke.getKeyStroke(KeyEvent.VK_F4,KeyEvent.SHIFT_MASK),text);  CButton button=(CButton)aa.getButton();  button.setMargin(s_insets);  return button;}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  public boolean isCellEditable(int row,int column){  if (column != 0 && (getValueAt(row,0) instanceof Boolean) && !((Boolean)getValueAt(row,0)).booleanValue()) {    return false;  }  if (m_readWriteColumn.contains(new Integer(column))) {    return true;  }  return false;}  }
class C{  @Override public synchronized void clear(){  File[] files=mRootDirectory.listFiles();  if (files != null) {    for (    File file : files) {      file.delete();    }  }  mEntries.clear();  VolleyLog.d("Cache cleared.");}  }
class C{  static NamedBeanHandle<Turnout> makeHandle(int i) throws IllegalArgumentException {  String number="" + i;  return jmri.InstanceManager.getDefault(jmri.NamedBeanHandleManager.class).getNamedBeanHandle(number,InstanceManager.turnoutManagerInstance().provideTurnout(number));}  }
class C{  private void handleHtmlUserRestoreForm(RequestAndResponse requestAndResponse) throws IOException, ServletException {  final String title=servletText.pageTitleUserRestore();  if (addTitle(requestAndResponse,title)) {    return;  }  final PageWrapper pageWrapper=new PageWrapper(requestAndResponse,title,false).setPaneId("restore");  pageWrapper.addHeader();  if (!isUserSignedIn(requestAndResponse)) {    requestAndResponse.print(servletText.errorRequiresSignIn(allowSaveIfNotSignedIn));  } else   if (isUsersAccountClosed(requestAndResponse)) {    requestAndResponse.print(servletText.errorAccountIsClosed());  } else {    pageWrapper.addPageIntroText(servletText.introTextRestore(),null);    requestAndResponse.print("<iframe src=\"/restoreFrame/\" allowtransparency=\"true\"></iframe>");  }  pageWrapper.addFooter();}  }
class C{  public List<Prefix> commonPrefixes(){  if (commonPrefixes == null) {    return new LinkedList<>();  }  return commonPrefixes;}  }
class C{  public void paint(Graphics g,Shape a){  RSyntaxDocument document=(RSyntaxDocument)getDocument();  Rectangle alloc=a.getBounds();  tabBase=alloc.x;  host=(RSyntaxTextArea)getContainer();  Rectangle clip=g.getClipBounds();  clipStart=clip.x;  clipEnd=clipStart + clip.width;  lineHeight=host.getLineHeight();  ascent=host.getMaxAscent();  int heightBelow=(alloc.y + alloc.height) - (clip.y + clip.height);  int linesBelow=Math.max(0,heightBelow / lineHeight);  int heightAbove=clip.y - alloc.y;  int linesAbove=Math.max(0,heightAbove / lineHeight);  int linesTotal=alloc.height / lineHeight;  if (alloc.height % lineHeight != 0) {    linesTotal++;  }  Rectangle lineArea=lineToRect(a,linesAbove);  int y=lineArea.y + ascent;  int x=lineArea.x;  Element map=getElement();  int lineCount=map.getElementCount();  int endLine=Math.min(lineCount,linesTotal - linesBelow);  RSyntaxTextAreaHighlighter h=(RSyntaxTextAreaHighlighter)host.getHighlighter();  Graphics2D g2d=(Graphics2D)g;  Token token;  for (int line=linesAbove; line < endLine; line++) {    Element lineElement=map.getElement(line);    int startOffset=lineElement.getStartOffset();    int endOffset=lineElement.getEndOffset() - 1;    h.paintLayeredHighlights(g2d,startOffset,endOffset,a,host,this);    token=document.getTokenListForLine(line);    drawLine(token,g2d,x,y);    y+=lineHeight;  }}  }
class C{  public ReplaceEdit(int offset,int length,String text){  super(offset,length);  fText=text;}  }
class C{  public boolean isUserApproval(){  if (!ACTION_UserChoice.equals(getAction()))   return false;  return getColumn() != null && "IsApproved".equals(getColumn().getColumnName());}  }
class C{  protected void clearOutEvents(){}  }
class C{  public static boolean isEncrypted(int columnId){  final String sql="SELECT IsEncrypted FROM AD_Column WHERE AD_Column_ID = ?";  return "Y".equals(DB.getSQLValueString(null,sql,columnId));}  }
class C{  public static jMatrix constructWithCopy(double[][] A){  int m=A.length;  int n=A[0].length;  jMatrix X=new jMatrix(m,n);  double[][] C=X.getArray();  for (int i=0; i < m; i++) {    if (A[i].length != n) {      throw new IllegalArgumentException("All rows must have the same length.");    }    for (int j=0; j < n; j++) {      C[i][j]=A[i][j];    }  }  return X;}  }
class C{  public int read() throws IOException {  byte b=_bytes[_start];  return ((b >= 0) && (_start++ < _end)) ? b : read2();}  }
class C{  public Quaternionf fromAxisAngleDeg(Vector3fc axis,float angle){  return fromAxisAngleRad(axis.x(),axis.y(),axis.z(),(float)Math.toRadians(angle));}  }
class C{  public static boolean equals(byte[] array1,byte[] array2){  if (array1 == array2) {    return true;  }  if (array1 == null || array2 == null || array1.length != array2.length) {    return false;  }  for (int i=0; i < array1.length; i++) {    if (array1[i] != array2[i]) {      return false;    }  }  return true;}  }
class C{  private void patchPEIgeneratedValues(){  if (!ir.hasReachableExceptionHandlers())   return;  HashSet<Pair<BasicBlock,RegisterOperand>> needed=new HashSet<Pair<BasicBlock,RegisterOperand>>(4);  Enumeration<BasicBlock> blocks=ir.getBasicBlocks();  while (blocks.hasMoreElements()) {    BasicBlock block=blocks.nextElement();    if (block.getExceptionalOut().hasMoreElements()) {      Instruction pei=block.lastRealInstruction();      if (pei != null && pei.isPEI() && ResultCarrier.conforms(pei)) {        boolean copyNeeded=false;        RegisterOperand v=ResultCarrier.getResult(pei);        if (v != null) {          Register orig=v.getRegister();{            Enumeration<BasicBlock> out=block.getApplicableExceptionalOut(pei);            while (out.hasMoreElements()) {              BasicBlock exp=out.nextElement();              LiveSet explive=live.getLiveInfo(exp).getIn();              if (explive.contains(orig)) {                copyNeeded=true;                break;              }            }          }          if (copyNeeded) {            Enumeration<BasicBlock> out=block.getApplicableExceptionalOut(pei);            while (out.hasMoreElements()) {              BasicBlock exp=out.nextElement();              needed.add(new Pair<BasicBlock,RegisterOperand>(exp,v));            }          }        }      }    }  }  if (!needed.isEmpty()) {    for (    Pair<BasicBlock,RegisterOperand> copy : needed) {      BasicBlock inBlock=copy.first;      RegisterOperand registerOp=copy.second;      TypeReference type=registerOp.getType();      Register register=registerOp.getRegister();      Register temp=ir.regpool.getReg(register);      inBlock.prependInstruction(SSA.makeMoveInstruction(ir,register,temp,type));      Enumeration<BasicBlock> outBlocks=inBlock.getIn();      while (outBlocks.hasMoreElements()) {        BasicBlock outBlock=outBlocks.nextElement();        Instruction x=SSA.makeMoveInstruction(ir,temp,register,type);        SSA.addAtEnd(ir,outBlock,x,true);      }    }    prepare();  }}  }
class C{  public void onScreenOff(){  if (DEBUG) {    Slog.d(TAG,"onScreenOff");  }  try {    mBatteryStats.noteScreenOff();  } catch (  RemoteException ex) {  }}  }
class C{  boolean isLocationSpecified(){  return (getProperty("resource") != null) || (getProperty("file") != null) || (getProperty("url") != null);}  }
class C{  public CBottomPanel(final IFilledList<IResultsPanel> panels){  super(new BorderLayout());  Preconditions.checkNotNull(panels,"IE01658: Panels can't be null");  m_factory=new FilledList<IResultsPanel>(panels);  for (  final IResultsPanel panel : panels) {    panel.addListener(m_internalPanelListener);  }  createGui();}  }
class C{  private OkHttpClient copyWithDefaults(){  OkHttpClient result=new OkHttpClient(this);  result.proxy=proxy;  result.proxySelector=proxySelector != null ? proxySelector : ProxySelector.getDefault();  result.cookieHandler=cookieHandler != null ? cookieHandler : CookieHandler.getDefault();  result.responseCache=responseCache != null ? responseCache : ResponseCache.getDefault();  result.sslSocketFactory=sslSocketFactory != null ? sslSocketFactory : HttpsURLConnection.getDefaultSSLSocketFactory();  result.hostnameVerifier=hostnameVerifier != null ? hostnameVerifier : OkHostnameVerifier.INSTANCE;  result.authenticator=authenticator != null ? authenticator : HttpAuthenticator.SYSTEM_DEFAULT;  result.connectionPool=connectionPool != null ? connectionPool : ConnectionPool.getDefault();  result.followProtocolRedirects=followProtocolRedirects;  result.transports=transports != null ? transports : DEFAULT_TRANSPORTS;  result.connectTimeout=connectTimeout;  result.readTimeout=readTimeout;  return result;}  }
class C{  private long hash(final CharSequence s,final int l,final int k){  final int[] w=weight[k];  long h=init[k];  int i=l;  while (i-- != 0)   h^=(h << 5) + s.charAt(i) * w[i % NUMBER_OF_WEIGHTS] + (h >>> 2);  return (h & 0x7FFFFFFFFFFFFFFFL) % m;}  }
class C{  public void prependProperty(String property,String value){  getPropertyHandler().prependProperty(property,value);}  }
class C{  public static IXMLReader fileReader(String filename) throws FileNotFoundException, IOException {  StdXMLReader r=new StdXMLReader(new FileInputStream(filename));  r.setSystemID(filename);  for (int i=0; i < r.readers.size(); i++) {    StackedReader sr=(StackedReader)r.readers.elementAt(i);    sr.systemId=r.currentReader.systemId;  }  return r;}  }
class C{  public void processSummary(String jobId){  UriBuilder uriBuilder=UriBuilder.fromUri(urlBuilder.buildUrl(ReportService.METHOD_PROCESS_TIMING,jobId));  WebResource webResource=client.resource(uriBuilder.build());  ClientResponse response=webResource.accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);  exceptionHandler.checkStatusCode(response);}  }
class C{  public static int intHash(final long a){  int hash=(int)(a >> 32) + (int)a;  if (a < 0) {    hash++;  }  return hash;}  }
class C{  public static void flush(){  ToolIO.out.flush();  ToolIO.err.flush();}  }
class C{  public static GTRowBlock allocate(GTInfo info){  GTRowBlock b=new GTRowBlock(info);  byte[] array=new byte[info.getMaxColumnLength(info.primaryKey)];  b.primaryKey.set(array);  int maxRows=info.isRowBlockEnabled() ? info.rowBlockSize : 1;  for (int i=0; i < b.cellBlocks.length; i++) {    array=new byte[info.getMaxColumnLength(info.colBlocks[i]) * maxRows];    b.cellBlocks[i].set(array);  }  return b;}  }
class C{  DynamicPlaylistSession createPlaylistSession(){  mSessionReady=false;  mSessionError=false;  EchoNest echoNest=new EchoNest();  String type=generateTasteCatalogIfNeededAndGetType(echoNest);  if (!mSessionError) {    if (DEBUG)     Log.d(TAG,"Creating dynamic playlist.");    String catalogId=(mCatalog != null ? mCatalog.getID() : null);    try {      mPlaylistSession=echoNest.createDynamicPlaylist(type,catalogId,mMoods,mStyles);    } catch (    EchoNestException e) {      Log.e(TAG,"Unable to create the dynamic playlist",e);      mSessionError=true;    }  }  if (!mSessionError) {    DynamicPlaylistSteerParams p=new DynamicPlaylistSteerParams();    if (mEnergy >= 0) {      p.addTargetValue(DynamicPlaylistSteerParams.SteeringParameter.energy,mEnergy);    }    if (mFamiliar >= 0) {      p.addTargetValue(DynamicPlaylistSteerParams.SteeringParameter.artist_familiarity,mFamiliar);    }    if (mSpeechiness >= 0) {      p.add("target_speechiness",mSpeechiness);    }    if (mAdventurousness >= 0) {      p.setAdventurousness(mAdventurousness);    }    if (mSongTypes != null && mSongTypes.length > 0) {      for (      String songType : mSongTypes) {        if (!songType.isEmpty()) {          p.add("song_type",songType);        }      }    }    try {      mPlaylistSession.steer(p);    } catch (    EchoNestException e) {      Log.e(TAG,"Unable to steer session data",e);      mSessionError=true;    }  }  mSessionReady=true;  return mPlaylistSession;}  }
class C{  public static boolean placeat(final StendhalRPZone zone,final Entity entity,int x,int y,final Shape allowedArea){  if (zone == null) {    return false;  }  if (entity instanceof Player) {    final Player player=(Player)entity;    if (player.isDisconnected()) {      return true;    }  }  if (zone.collides(entity,x,y)) {    boolean checkPath=true;    if (zone.collides(entity,x,y,false) && (entity instanceof Player)) {      checkPath=false;    }    final Point newLocation=findLocation(zone,entity,allowedArea,x,y,checkPath);    if (newLocation == null) {      logger.info("Unable to place " + entity.getTitle() + " at "+ zone.getName()+ "["+ x+ ","+ y+ "]");      return false;    }    x=newLocation.x;    y=newLocation.y;  }  final StendhalRPZone oldZone=entity.getZone();  final boolean zoneChanged=(oldZone != zone);  if (entity instanceof RPEntity) {    final RPEntity rpentity=(RPEntity)entity;    if (!Testing.MOVEMENT) {      rpentity.stop();    }    rpentity.stopAttack();    rpentity.clearPath();  }  Sheep sheep=null;  Pet pet=null;  if (oldZone != null) {    if (entity instanceof Player) {      final Player player=(Player)entity;      sheep=player.getSheep();      if (sheep != null) {        sheep.clearPath();        sheep.stop();        player.removeSheep(sheep);      }      pet=player.getPet();      if (pet != null) {        pet.clearPath();        pet.stop();        player.removePet(pet);      }    }    if (zoneChanged) {      oldZone.remove(entity);    }  }  entity.setPosition(x,y);  if (zoneChanged) {    zone.add(entity);  }  if (entity instanceof Player) {    final Player player=(Player)entity;    if (sheep != null) {      if (placePet(zone,player,sheep)) {        player.setSheep(sheep);        sheep.setOwner(player);      } else {        player.sendPrivateText("You seemed to have lost your sheep while trying to squeeze in.");      }    }    if (pet != null) {      if (placePet(zone,player,pet)) {        player.setPet(pet);        pet.setOwner(player);      } else {        player.sendPrivateText("You seemed to have lost your pet while trying to squeeze in.");      }    }    if (zoneChanged) {      transferContent(player);      if (oldZone != null) {        final String source=oldZone.getName();        final String destination=zone.getName();        new GameEvent(player.getName(),"change zone",destination).raise();        TutorialNotifier.zoneChange(player,source,destination);        ZoneNotifier.zoneChange(player,source,destination);      }    }  }  if (logger.isDebugEnabled()) {    logger.debug("Placed " + entity.getTitle() + " at "+ zone.getName()+ "["+ x+ ","+ y+ "]");  }  return true;}  }
class C{  public static void execute(Connection con,ExecutablePool pool,String regionName,Object key,Object value,EntryEventImpl event,Object callbackArg,boolean prSingleHopEnabled){  AbstractOp op=new PutOpImpl(regionName,key,value,null,event,Operation.CREATE,false,null,callbackArg,false,prSingleHopEnabled);  pool.executeOn(con,op);}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getTracePeriod_();}  }
class C{  public void disableAndHide(){  setEnabled(false);  setVisibility(GONE);}  }
class C{  public MLOutput execute(String dmlScriptFilePath,ArrayList<String> argsName,ArrayList<String> argsValues,String configFilePath) throws IOException, DMLException, ParseException {  HashMap<String,String> newNamedArgs=new HashMap<String,String>();  if (argsName.size() != argsValues.size()) {    throw new DMLException("size of argsName " + argsName.size() + " is diff than "+ " size of argsValues");  }  for (int i=0; i < argsName.size(); i++) {    String k=argsName.get(i);    String v=argsValues.get(i);    newNamedArgs.put(k,v);  }  return execute(dmlScriptFilePath,newNamedArgs,configFilePath);}  }
class C{  public DoubleMatrix1D like(int size){  return new DenseDoubleMatrix1D(size);}  }
class C{  @Override public <T extends DataObject>Iterator<T> findAll(Class<T> clazz) throws DatabaseException {  return getDbClient().queryIterativeObjects(clazz,getDbClient().queryByType(clazz,true));}  }
class C{  private void parse(String data){  int begin=0;  int end=data.indexOf(DOUBLE_CRLF,begin);  String block2=data.substring(begin,end);  StringTokenizer lines=new StringTokenizer(block2,CRLF);  Hashtable<String,String> headers=new Hashtable<>();  while (lines.hasMoreTokens()) {    String token=lines.nextToken();    CpimHeader hd=CpimHeader.parseHeader(token);    headers.put(hd.getName(),hd.getValue());  }  begin=end + 4;  end=data.indexOf(DOUBLE_CRLF,begin);  String block3=data.substring(begin,end);  lines=new StringTokenizer(block3,CRLF);  Hashtable<String,String> contentHeaders=new Hashtable<>();  while (lines.hasMoreTokens()) {    String token=lines.nextToken();    CpimHeader hd=CpimHeader.parseHeader(token);    contentHeaders.put(hd.getName(),hd.getValue());  }  begin=end + 4;  String content=data.substring(begin);  mMessage=new CpimMessage(headers,contentHeaders,content);}  }
class C{  private String addExportRemoveVolumesSteps(Workflow workflow,String waitFor,List<VolumeDescriptor> filteredSourceVolumeDescriptors) throws InternalException {  _log.info("Adding steps to remove volumes from export groups.");  String returnStep=waitFor;  Set<URI> volumeURIs=_rpHelper.getVolumesToDelete(VolumeDescriptor.getVolumeURIs(filteredSourceVolumeDescriptors));  _log.info(String.format("Following volume(s) will be unexported from their RP export groups :  [%s]",Joiner.on("--").join(volumeURIs)));  Map<URI,RPExport> rpExports=new HashMap<URI,RPExport>();  for (  URI volumeURI : volumeURIs) {    Volume volume=_dbClient.queryObject(Volume.class,volumeURI);    if (volume == null) {      _log.warn("Could not load volume with given URI: " + volumeURI);      continue;    }    URI rpSystemId=volume.getProtectionController();    ProtectionSystem rpSystem=null;    if (rpSystemId != null) {      rpSystem=_dbClient.queryObject(ProtectionSystem.class,rpSystemId);      if (rpSystem == null || rpSystem.getInactive()) {        _log.warn("No protection system information found for volume {}. Volume cannot be removed from RP export groups.",volume.getLabel());        continue;      }    }    URI storageURI=volume.getStorageController();    VirtualPool virtualPool=_dbClient.queryObject(VirtualPool.class,volume.getVirtualPool());    if (VirtualPool.isRPVPlexProtectHASide(virtualPool)) {      _log.info(String.format("RP+VPLEX protect HA Source Volume [%s] to be removed from RP export group.",volume.getLabel()));      if (volume.getAssociatedVolumes() != null && volume.getAssociatedVolumes().size() == 2) {        for (        String associatedVolURI : volume.getAssociatedVolumes()) {          Volume associatedVolume=_dbClient.queryObject(Volume.class,URI.create(associatedVolURI));          if (associatedVolume.getVirtualArray().toString().equals(virtualPool.getHaVarrayConnectedToRp())) {            ExportGroup exportGroup=getExportGroup(rpSystem,volume.getId(),associatedVolume.getVirtualArray(),associatedVolume.getInternalSiteName());            if (exportGroup != null) {              _log.info(String.format("Removing volume [%s] from RP export group [%s].",volume.getLabel(),exportGroup.getGeneratedName()));            }            addExportGroup(rpExports,exportGroup,volumeURI,storageURI);            break;          }        }      }    } else     if (volume.checkPersonality(PersonalityTypes.SOURCE.toString()) && VirtualPool.vPoolSpecifiesMetroPoint(virtualPool)) {      if (volume.getAssociatedVolumes() != null && volume.getAssociatedVolumes().size() == 2) {        for (        String associatedVolURI : volume.getAssociatedVolumes()) {          _log.info(String.format("MetroPoint Source Volume [%s] to be removed from RP export group.",volume.getLabel()));          Volume associatedVolume=_dbClient.queryObject(Volume.class,URI.create(associatedVolURI));          ExportGroup exportGroup=getExportGroup(rpSystem,volume.getId(),associatedVolume.getVirtualArray(),associatedVolume.getInternalSiteName());          if (exportGroup != null) {            _log.info(String.format("Removing volume [%s] from RP export group [%s].",volume.getLabel(),exportGroup.getGeneratedName()));          }          addExportGroup(rpExports,exportGroup,volumeURI,storageURI);        }      }    } else {      _log.info(String.format("Volume [%s] to be removed from RP export group.",volume.getLabel()));      ExportGroup exportGroup=getExportGroup(rpSystem,volume.getId(),volume.getVirtualArray(),volume.getInternalSiteName());      if (exportGroup != null) {        _log.info(String.format("Removing volume [%s] from RP export group [%s].",volume.getLabel(),exportGroup.getGeneratedName()));      }      addExportGroup(rpExports,exportGroup,volumeURI,storageURI);    }  }  for (  URI exportURI : rpExports.keySet()) {    _log.info(String.format("RP export group will have these volumes removed: [%s]",Joiner.on(',').join(rpExports.get(exportURI).getVolumes())));    RPExport rpExport=rpExports.get(exportURI);    if (!rpExport.getVolumes().isEmpty()) {      _exportWfUtils.generateExportGroupRemoveVolumes(workflow,STEP_DV_REMOVE_VOLUME_EXPORT,waitFor,rpExport.getStorageSystem(),exportURI,rpExport.getVolumes());      returnStep=STEP_DV_REMOVE_VOLUME_EXPORT;    }  }  _log.info("Completed adding steps to remove volumes from RP export groups.");  return returnStep;}  }
class C{  @Override protected void controllerWaitAfterAppStart() throws Exception {  int sleep=10 + random.nextInt(300);  if ((flags & FLAG_NO_DELAY) == 0) {    sleep+=1000;  }  Thread.sleep(sleep);}  }
class C{  public CampoTextoVO insertValue(final CampoTextoVO value){  try {    DbConnection conn=getConnection();    if (!StringUtils.isEmpty(value.getValor())) {      DbInsertFns.insert(conn,TABLE_NAME,DbUtil.getColumnNames(COL_DEFS),new SigiaDbInputRecord(COL_DEFS,value));    }    return value;  } catch (  Exception e) {    logger.error("Error insertando campo de tipo texto corto para el descriptor " + value.getIdObjeto(),e);    throw new DBException("insertando campo de tipo texto corto",e);  }}  }
class C{  private void handleStateChange(World world,Block block,Cancellable event,Object... filter){  Match match=Cardinal.getMatch(world);  if (match == null) {    return;  }  for (  AppliedRegion reg : get(match,ApplyType.BLOCK,ApplyType.BLOCK_PLACE)) {    if (apply(reg,block.getLocation(),null,event,filter)) {      break;    }  }}  }
class C{  public void write(final PrintStream stream){  stream.print("time\ttime_s");  for (  String actType : dataPerActType.keySet()) {    stream.print("\thello_" + actType + "\tgoodbye_"+ actType+ "\tpairs_together_"+ actType);  }  stream.print("\n");  int[] pairsTogetherPerType=new int[dataPerActType.size()];  for (int i=0; i < nofBins; i++) {    int mode=0;    for (    DataFrame data : dataPerActType.values()) {      pairsTogetherPerType[mode]=pairsTogetherPerType[mode] + data.countsHello[i] - data.countsGoodbye[i];      stream.print(Time.writeTime(i * this.binSize) + "\t" + i * this.binSize);      stream.print("\t" + data.countsHello[i] + "\t"+ data.countsGoodbye[i]+ "\t"+ pairsTogetherPerType);      mode++;    }    stream.print("\n");  }}  }
class C{  public SpellGroupsXMLLoader(final URI uri){  this.uri=uri;}  }
class C{  @Override public synchronized int read(byte b[],int off,int len) throws IOException {  int leftover=buf_end - buf_pos;  if (len <= leftover) {    System.arraycopy(buffer,buf_pos,b,off,len);    buf_pos+=len;    return len;  }  for (int i=0; i < len; i++) {    int c=this.read();    if (c != -1)     b[off + i]=(byte)c; else {      return i;    }  }  return len;}  }
class C{  protected IsSorted_Impl(){  super();}  }
class C{  static public boolean isPowerOf2(final int v){  return ((v & -v) == v);}  }
class C{  public Stacks(final File stacksLocation,final String stacksPrefix){  if (!stacksLocation.exists())   stacksLocation.mkdirs();  assert stacksLocation.isDirectory();  this.stacksLocation=stacksLocation;  this.stacksPrefix=stacksPrefix;  this.stacks=new ConcurrentHashMap<String,StackInstance>();  String[] sl=this.stacksLocation.list();  for (  String s : sl) {    if (!s.startsWith(this.stacksPrefix + "_"))     continue;    StackInstance si;    try {      si=new StackInstance(new File(this.stacksLocation,s));      this.stacks.put(si.name,si);    } catch (    final IOException e) {      ConcurrentLog.logException(e);    }  }}  }
class C{  @SuppressWarnings("unchecked") public CopyBausteineService(IProgressObserver progressObserver,List<CnATreeElement> targets,List<Baustein> elementList){  this.progressObserver=progressObserver;  this.selectedTargetList=targets;  this.elements=elementList;}  }
class C{  @Override public boolean equals(Object o){  if (this == o)   return true;  if (o == null || getClass() != o.getClass())   return false;  final gov.nasa.worldwind.geom.Sector sector=(gov.nasa.worldwind.geom.Sector)o;  if (!maxLatitude.equals(sector.maxLatitude))   return false;  if (!maxLongitude.equals(sector.maxLongitude))   return false;  if (!minLatitude.equals(sector.minLatitude))   return false;  if (!minLongitude.equals(sector.minLongitude))   return false;  return true;}  }
class C{  public boolean isExportedAsDefault(){  return (this.isExported() && ((ExportDeclaration)this.eContainer()).isDefaultExport());}  }
class C{  private void finishCompletion(){  for (WaitNode q; (q=waiters) != null; ) {    if (UNSAFE.compareAndSwapObject(this,waitersOffset,q,null)) {      for (; ; ) {        Thread t=q.thread;        if (t != null) {          q.thread=null;          LockSupport.unpark(t);        }        WaitNode next=q.next;        if (next == null)         break;        q.next=null;        q=next;      }      break;    }  }  done();  callable=null;}  }
class C{  public void addNotify(){  super.addNotify();}  }
class C{  @DSComment("OpenGL Math") @DSSafe(DSCat.GRAPHICS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:10.031 -0500",hash_original_method="F6B39D6DC4A22DAD5E2F42A19BD8984E",hash_generated_method="831EB332539CEABDF7F91BDE12A154DF") public static void translateM(float[] m,int mOffset,float x,float y,float z){  for (int i=0; i < 4; i++) {    int mi=mOffset + i;    m[12 + mi]+=m[mi] * x + m[4 + mi] * y + m[8 + mi] * z;  }}  }
class C{  @Deprecated public static void assertNotEquals(int notExpected,int actual){  try {    Verify.assertNotEquals("int",notExpected,actual);  } catch (  AssertionError e) {    Verify.throwMangledException(e);  }}  }
class C{  public static <T>T eachLine(URL url,int firstLine,@ClosureParams(value=FromString.class,options={"String","String,Integer"}) Closure<T> closure) throws IOException {  return IOGroovyMethods.eachLine(url.openConnection().getInputStream(),firstLine,closure);}  }
class C{  public GVector(GVector vector){  values=new double[vector.length];  length=vector.length;  for (int i=0; i < length; i++) {    values[i]=vector.values[i];  }}  }
class C{  private boolean doWorkflowEndProcessing(Workflow workflow,boolean automaticRollback,InterProcessLock workflowLock) throws DeviceControllerException {  Map<String,StepStatus> statusMap=workflow.getStepStatusMap();  printStepStatuses(statusMap.values());  WorkflowState state=workflow.getWorkflowStateFromSteps();  if (statusMap != null && workflow.getSuspendSteps() != null) {    for (    Map.Entry<String,StepStatus> statusEntry : statusMap.entrySet()) {      if (statusEntry.getValue() != null && statusEntry.getValue().state != null && (statusEntry.getValue().state == StepState.SUSPENDED_ERROR || statusEntry.getValue().state == StepState.SUSPENDED_NO_ERROR)) {        _log.info("Removing step " + statusEntry.getValue().description + " from the suspended steps list in workflow "+ workflow._workflowURI.toString());        URI suspendStepURI=workflow.getStepMap().get(statusEntry.getKey()).workflowStepURI;        workflow.getSuspendSteps().remove(suspendStepURI);        persistWorkflow(workflow);      }    }  }  if (workflow._successMessage == null) {    workflow._successMessage=String.format("Operation %s for task %s completed successfully",workflow._orchMethod,workflow._orchTaskId);  }  String[] errorMessage=new String[]{workflow._successMessage};  _log.info(String.format("Workflow %s overall state: %s (%s)",workflow.getOrchTaskId(),state,errorMessage[0]));  ServiceError error=Workflow.getOverallServiceError(statusMap);  if (automaticRollback && !workflow.isRollbackState() && (state == WorkflowState.ERROR || state == WorkflowState.SUSPENDED_ERROR)) {    if (workflow.isSuspendOnError()) {      _log.info(String.format("Suspending workflow %s on error, no rollback initiation",workflow.getWorkflowURI()));      state=WorkflowState.SUSPENDED_ERROR;    } else     if (initiateRollback(workflow)) {      workflow.setWorkflowState(WorkflowState.ROLLING_BACK);      persistWorkflow(workflow);      logWorkflow(workflow,true);      _log.info(String.format("Rollback initiated workflow %s",workflow.getWorkflowURI()));      return false;    }  }  workflow.setWorkflowState(state);  persistWorkflow(workflow);  logWorkflow(workflow,true);  try {    if (workflow.isRollbackState()) {      if (workflow._rollbackHandler != null) {        workflow._rollbackHandler.rollbackComplete(workflow,workflow._rollbackHandlerArgs);      }    }    if (workflow._callbackHandler != null) {      workflow._callbackHandler.workflowComplete(workflow,workflow._callbackHandlerArgs);    }    if (workflow._taskCompleter != null) {switch (state) {case ERROR:        workflow._taskCompleter.error(_dbClient,_locker,error);      break;case SUCCESS:    workflow._taskCompleter.ready(_dbClient,_locker);  break;case SUSPENDED_ERROR:workflow._taskCompleter.suspendedError(_dbClient,_locker,error);break;case SUSPENDED_NO_ERROR:workflow._taskCompleter.suspendedNoError(_dbClient,_locker);break;default :break;}}}  finally {logWorkflow(workflow,true);boolean removed=_ownerLocker.releaseLocks(workflow.getWorkflowURI().toString());if (!removed) {_log.error("Unable to release workflow locks for: " + workflow.getWorkflowURI().toString());}if (workflow.getWorkflowState() != WorkflowState.SUSPENDED_ERROR && workflow.getWorkflowState() != WorkflowState.SUSPENDED_NO_ERROR) {removed=false;if (!workflow._nested) {unlockWorkflow(workflow,workflowLock);destroyWorkflow(workflow);return true;} else {if (isExistingWorkflow(workflow)) {_log.info(String.format("Workflow %s is nested, destruction deferred until parent destroys",workflow.getWorkflowURI()));}logWorkflow(workflow,true);}}}return false;}  }
class C{  public void reset(ActionMapping mapping,HttpServletRequest request){  super.reset(mapping,request);  notas=new String[0];  estados=new String[0];}  }
class C{  private void printGitStatus(String statusText){  console.print("");  String[] lines=statusText.split("\n");  for (  String line : lines) {    if (line.startsWith("\tmodified:") || line.startsWith("#\tmodified:")) {      console.printError(line);      continue;    }    if (line.startsWith("\t") || line.startsWith("#\t")) {      console.printInfo(line);      continue;    }    console.print(line);  }}  }
class C{  @Override public Instance mergeInstance(Instance inst){  int m=0;  double[] newVals=new double[numAttributes() + inst.numAttributes()];  for (int j=0; j < numAttributes(); j++, m++) {    newVals[m]=value(j);  }  for (int j=0; j < inst.numAttributes(); j++, m++) {    newVals[m]=inst.value(j);  }  return new DenseInstance(1.0,newVals);}  }
class C{  private FinalizeDeploymentMigrationWorkflowService.State buildValidPatchState(TaskState.TaskStage stage,FinalizeDeploymentMigrationWorkflowService.TaskState.SubStage patchSubStage){  FinalizeDeploymentMigrationWorkflowService.State patchState=new FinalizeDeploymentMigrationWorkflowService.State();  patchState.taskState=new FinalizeDeploymentMigrationWorkflowService.TaskState();  patchState.taskState.stage=stage;  patchState.taskState.subStage=patchSubStage;  if (TaskState.TaskStage.STARTED == stage) {switch (patchSubStage) {case PAUSE_SOURCE_SYSTEM:      patchState.sourceDeploymentId="deployment2";    patchState.sourceZookeeperQuorum="127.0.0.1";  break;case RESUME_DESTINATION_SYSTEM:case MIGRATE_FINAL:case REINSTALL_AGENTS:case UPGRADE_AGENTS:case STOP_MIGRATE_TASKS:break;}}return patchState;}  }
class C{  private UiUtils(){  throw new AssertionError();}  }
class C{  public DCRemovalFilter_RealBuffer(){}  }
class C{  public ValueRange(ValueRange range1,ValueRange range2){  this();  addRange(range1);  addRange(range2);}  }
class C{  public boolean isRoot(){  return false;}  }
class C{  public ServiceFileTemplate addServiceFile(long serviceInfoId,long templatefileId) throws PortalException, SystemException {  ServiceFileTemplate sft=null;  ServiceFileTemplatePK serviceFilePK=new ServiceFileTemplatePK(serviceInfoId,templatefileId);  sft=serviceFileTemplatePersistence.fetchByPrimaryKey(serviceFilePK);  if (Validator.isNull(sft)) {    sft=serviceFileTemplatePersistence.create(serviceFilePK);    serviceFileTemplatePersistence.update(sft);  }  return sft;}  }
class C{  public void screenshots(Activity activity,boolean isFullScreen){  try {    View decorView=activity.getWindow().getDecorView();    decorView.setDrawingCacheEnabled(true);    decorView.buildDrawingCache();    Bitmap b1=decorView.getDrawingCache();    Rect frame=new Rect();    activity.getWindow().getDecorView().getWindowVisibleDisplayFrame(frame);    int statusBarHeight=frame.top;    Log.e(TAG,"statusBarHeight:" + statusBarHeight);    int width=activity.getWindowManager().getDefaultDisplay().getWidth();    int height=activity.getWindowManager().getDefaultDisplay().getHeight();    Bitmap bitmap;    if (isFullScreen) {      bitmap=Bitmap.createBitmap(b1,0,0,width,height);    } else {      bitmap=Bitmap.createBitmap(b1,0,statusBarHeight,width,height - statusBarHeight);    }    decorView.destroyDrawingCache();    FileOutputStream out=new FileOutputStream(mFileTemp);    bitmap.compress(Bitmap.CompressFormat.JPEG,100,out);  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  protected boolean isCamelCaseMatching(){  String value=JavaCore.getOption(JavaCore.CODEASSIST_CAMEL_CASE_MATCH);  return JavaCore.ENABLED.equals(value);}  }
class C{  public boolean displayable(){  return g.displayable();}  }
class C{  public boolean removeSpringConfig(SpringConfig springConfig){  if (springConfig == null) {    throw new IllegalArgumentException("springConfig is required");  }  return mSpringConfigMap.remove(springConfig) != null;}  }
class C{  public void buildRuleFunction(Parser parser,Rule r){  RuleFunction function=rule(r);  parser.funcs.add(function);  pushCurrentRule(function);  function.fillNamedActions(delegate,r);  if (r instanceof LeftRecursiveRule) {    buildLeftRecursiveRuleFunction((LeftRecursiveRule)r,(LeftRecursiveRuleFunction)function);  } else {    buildNormalRuleFunction(r,function);  }  Grammar g=getGrammar();  for (  ActionAST a : r.actions) {    if (a instanceof PredAST) {      PredAST p=(PredAST)a;      RuleSempredFunction rsf=parser.sempredFuncs.get(r);      if (rsf == null) {        rsf=new RuleSempredFunction(delegate,r,function.ctxType);        parser.sempredFuncs.put(r,rsf);      }      rsf.actions.put(g.sempreds.get(p),new Action(delegate,p));    }  }  popCurrentRule();}  }
class C{  public void incrementRenewedTokens(String tenant) throws Exception {  getService().incrementRenewedTokens(tenant,this.getServiceContext());}  }
class C{  public Beacon(AnalysisMethod method,Rectangle bounds){  this.method=method;  this.bounds=bounds;}  }
class C{  public HashMap<String,Object> save(){  HashMap<String,Object> map=new HashMap<String,Object>();  map.put("Label",label);  map.put("MapElementCount",mapElementCount);  map.put("WorldState",worldState.save());  map.put("HelpState",helpState.save());  map.put("SurfaceAndLayerState",surfAndLayerState.save());  map.put("MapElementsState",mapElementsState.save());  map.put("ColorBarsState",colorBarsState.save());  map.put("LightingState",lightingState.save());  map.put("LightPositionState",lightPosState.save());  map.put("ViewpointState",viewPtState.save());  map.put("ConsoleState",consoleState.save());  map.put("MarbleState",marbleState.save());  map.put("MapElementStateCount",new Integer(mapElementStateList.size()));  for (int i=0; i < mapElementStateList.size(); ++i)   map.put("MapElementState" + i,mapElementStateList.get(i).save());  return (map);}  }
class C{  public DateTimeFormatterBuilder appendSecondOfDay(int minDigits){  return appendDecimal(DateTimeFieldType.secondOfDay(),minDigits,5);}  }
class C{  public void activate(){  if (!isViewAvailable())   return;  if (mActive) {    requestQueryFocus();    return;  }  mTabModelSelector.addObserver(mTabModelSelectorObserver);  for (  TabModel model : mTabModelSelector.getModels()) {    model.addObserver(mTabModelObserver);  }  mCurrentTab=mTabModelSelector.getCurrentTab();  mCurrentTab.addObserver(mTabObserver);  mFindInPageBridge=new FindInPageBridge(mCurrentTab.getWebContents());  mCurrentTab.getChromeWebContentsDelegateAndroid().setFindResultListener(this);  mCurrentTab.getChromeWebContentsDelegateAndroid().setFindMatchRectsListener(this);  initializeFindText();  mFindQuery.requestFocus();  showKeyboard();  setResultsBarVisibility(true);  mActive=true;  updateVisualsForTabModel(mTabModelSelector.isIncognitoSelected());  if (mObserver != null)   mObserver.onFindToolbarShown();}  }
class C{  public void init(Iterator iter,Comparator c){  m_tuples.clear();  m_cmp=c;  while (iter.hasNext()) {    Tuple t=(Tuple)iter.next();    m_tuples.add(t);  }  Collections.sort(m_tuples,m_cmp);  m_iter=m_tuples.iterator();}  }
class C{  public void close() throws IOException {  guard.close();synchronized (this) {    if (channel != null && channel.isOpen()) {      channel.close();      channel=null;    }    IoUtils.close(fd);  }}  }
class C{  public static void main(String args[]){  com.bbn.openmap.util.Debug.init();  ExampleApplication example=new ExampleApplication();  example.setVisible(true);}  }
class C{  public void resetToken(){  tokenIntern=String.valueOf(Math.random());}  }
class C{  private void synchronizeGUIFromSettings(){  final int parentDepth=m_settings.getProximitySettings().getProximityBrowsingParents();  final int childDepth=m_settings.getProximitySettings().getProximityBrowsingChildren();  if (parentDepth == -1) {    m_parentDepthSlider.setValue(0);    m_checkBoxParentDepth.setSelected(false);  } else {    m_parentDepthSlider.setValue(parentDepth);    m_checkBoxParentDepth.setSelected(true);  }  m_parentLabel.setText(parentDepth == -1 ? "all" + "   " : ((Integer)m_parentDepthSlider.getValue()).toString() + "   ");  m_parentDepthSlider.setEnabled(parentDepth != -1);  if (childDepth == -1) {    m_childDepthSlider.setValue(0);    m_checkBoxChildDepth.setSelected(false);  } else {    m_childDepthSlider.setValue(childDepth);    m_checkBoxChildDepth.setSelected(true);  }  m_childLabel.setText(childDepth == -1 ? "all" + "   " : ((Integer)m_childDepthSlider.getValue()).toString() + "   ");  m_childDepthSlider.setEnabled(childDepth != -1);}  }
class C{  public IgniteDeploymentCheckedException(String msg){  super(msg);}  }
class C{  public void endNumberList() throws ParseException {  float[] all=new float[count];  int pos=0;  Iterator it=as.iterator();  while (it.hasNext()) {    float[] b=(float[])it.next();    System.arraycopy(b,0,all,pos,b.length);    pos+=b.length;  }  System.arraycopy(a,0,all,pos,index);  as.clear();  a=all;}  }
class C{  public static int findEndOfString(String str,int loc,int line) throws ParseAlgorithmException {  int pos=loc + 1;  boolean found=false;  while ((!found) && (pos < str.length())) {    char c=str.charAt(pos);    if (c == '"') {      found=true;    } else     if (c == '\\' && (pos < str.length() - 1)) {      pos++;    }    pos++;  }  if (!found) {    throw new ParseAlgorithmException("Unterminated string begun at line " + "\n    line " + (line + 1) + ", column "+ (loc + 1));  }  return pos;}  }
class C{  public boolean isPreviousTokenQuoted(){  return previousTokenQuoted;}  }
class C{  public boolean isInfoEnabled(){  return (getLogger().isLoggable(Level.INFO));}  }
class C{  private SystemFailure(){}  }
class C{  protected Node newNode(){  return new GenericAttr();}  }
class C{  @Override public DataTable sample(int newSize){  return this;}  }
class C{  public int compareTo(cp_info constant_pool[],cp_info cp,cp_info cp_constant_pool[]){  return compareTo(cp);}  }
class C{  public static void closeInputStream(InputStream stream,String tag){  if (stream != null) {    try {      stream.close();    } catch (    IOException e) {      Log.e(tag,"Exception occured when closing InputStream",e);    }  }}  }
class C{  private void generateExampleXml(Class<?> clazz) throws MojoExecutionException {  Object finalInstance=processClass(clazz);  try {    if (finalInstance == null) {      exampleXml="";      log.info("Can't produce XML for a null element for class \"" + clazz + "\" so using the empty string.");    } else {      exampleXml=objectToXml(finalInstance).replaceAll("\r","");    }  } catch (  JAXBException e) {    throw new MojoExecutionException("Unable to serialize XML for class \"" + clazz.getName() + "\". Reason: "+ e.getMessage(),e);  }}  }
class C{  public void done(T response) throws IllegalArgumentException {  lock.lock();  try {    if (response != null) {      this.response=response;      condition.signal();    } else {      throw new IllegalArgumentException("response cannot be null");    }  }  finally {    lock.unlock();  }}  }
class C{  @Override public void mousePressed(MouseEvent e){  events.clear();  if (mapDragOperationFromModifiers(e) != DnDConstants.ACTION_NONE) {    try {      motionThreshold=DragSource.getDragThreshold();    } catch (    Exception exc) {      motionThreshold=5;    }    appendEvent(e);  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:24.430 -0500",hash_original_method="32344AE5A14991821D94A9D2D9260949",hash_generated_method="C05CDFD6C74C04E01C519D3E3FE874EA") private synchronized void addRoute(SIPResponse sipResponse){  try {    if (sipStack.isLoggingEnabled()) {      sipStack.getStackLogger().logDebug("setContact: dialogState: " + this + "state = "+ this.getState());    }    if (sipResponse.getStatusCode() == 100) {      return;    } else     if (this.dialogState == TERMINATED_STATE) {      return;    } else     if (this.dialogState == CONFIRMED_STATE) {      if (sipResponse.getStatusCode() / 100 == 2 && !this.isServer()) {        ContactList contactList=sipResponse.getContactHeaders();        if (contactList != null && SIPRequest.isTargetRefresh(sipResponse.getCSeq().getMethod())) {          this.setRemoteTarget((ContactHeader)contactList.getFirst());        }      }      return;    }    if (!isServer()) {      if (this.getState() != DialogState.CONFIRMED && this.getState() != DialogState.TERMINATED) {        RecordRouteList rrlist=sipResponse.getRecordRouteHeaders();        if (rrlist != null) {          this.addRoute(rrlist);        } else {          this.routeList=new RouteList();        }      }      ContactList contactList=sipResponse.getContactHeaders();      if (contactList != null) {        this.setRemoteTarget((ContactHeader)contactList.getFirst());      }    }  }  finally {    if (sipStack.isLoggingEnabled()) {      sipStack.getStackLogger().logStackTrace();    }  }}  }
class C{  EmulatedFieldsForLoading(ObjectStreamClass streamClass){  this.streamClass=streamClass;  emulatedFields=new EmulatedFields(streamClass.getLoadFields(),streamClass.fields());}  }
class C{  public void printFF(char ch){  view.printFF(ch);  PartPresenter activePart=partStack.getActivePart();  if (activePart == null || !activePart.equals(this)) {    isUnread=true;  }}  }
class C{  public Field highlightQuery(QueryBuilder highlightQuery){  this.highlightQuery=highlightQuery;  return this;}  }
class C{  public void addVariable(String variableName,double variableValue){  variables.put(variableName,TestUtils.getStringRepresentationForDouble(variableValue));}  }
class C{  public RepositoryMetaData repository(String name){  for (  RepositoryMetaData repository : repositories) {    if (name.equals(repository.name())) {      return repository;    }  }  return null;}  }
class C{  void reconnect(){  if (retry) {    logger.info("[{}-{}] Reconnecting socket {} to {}",gondola.getHostId(),memberId,socket,peerId);    Config config=gondola.getConfig();    boolean isSlave=config.getMember(memberId).getShardId() != config.getMember(peerId).getShardId();    boolean initiateCall=memberId > peerId || isSlave;    new SocketCreator(initiateCall).start();  }}  }
class C{  protected void readArguments() throws IOException, Failure {  String argCmd="argument ";  List<String> args=new ArrayList<>();  PacketLineIn packetIn=new PacketLineIn(in);  for (; ; ) {    String s=packetIn.readString();    if (s == PacketLineIn.END) {      break;    }    if (!s.startsWith(argCmd)) {      throw new Failure(1,"fatal: 'argument' token or flush expected");    }    String[] parts=s.substring(argCmd.length()).split("=",2);    for (    String p : parts) {      args.add(p);    }  }  try {    CmdLineParser parser=new CmdLineParser(options);    parser.parseArgument(args);    if (options.path == null || Arrays.asList(".").equals(options.path)) {      options.path=Collections.emptyList();    }  } catch (  CmdLineException e) {    throw new Failure(2,"fatal: unable to parse arguments, " + e);  }}  }
class C{  public void removeMenu(final int index){  menuBar.remove(menuBar.getMenu(index));}  }
class C{  protected String booleanToString(boolean b){  if (b) {    return VAL_YES;  } else {    return VAL_NO;  }}  }
class C{  @Override public void exportGroupCreate(URI storageURI,URI exportGroupURI,List<URI> initiatorURIs,Map<URI,Integer> volumeMap,String token) throws Exception {  ExportOrchestrationTask taskCompleter=null;  try {    BlockStorageDevice device=getDevice();    ExportGroup exportGroup=_dbClient.queryObject(ExportGroup.class,exportGroupURI);    StorageSystem storage=_dbClient.queryObject(StorageSystem.class,storageURI);    taskCompleter=new ExportOrchestrationTask(exportGroupURI,token);    logExportGroup(exportGroup,storageURI);    if (initiatorURIs != null && !initiatorURIs.isEmpty()) {      _log.info("export_create: initiator list non-empty");      Workflow workflow=_workflowService.getNewWorkflow(MaskingWorkflowEntryPoints.getInstance(),"exportGroupCreate",true,token);      boolean createdSteps=determineExportGroupCreateSteps(workflow,null,device,storage,exportGroup,initiatorURIs,volumeMap,false,token);      String zoningStep=generateDeviceSpecificZoningCreateWorkflow(workflow,EXPORT_GROUP_MASKING_TASK,exportGroup,null,volumeMap);      if (createdSteps && null != zoningStep) {        String successMessage=String.format("ExportGroup successfully applied for StorageArray %s",storage.getLabel());        workflow.executePlan(taskCompleter,successMessage);      } else {        _log.info("export_create: no steps created.");        taskCompleter.ready(_dbClient);      }    } else {      _log.info("export_create: initiator list");      taskCompleter.ready(_dbClient);    }  } catch (  DeviceControllerException dex) {    if (taskCompleter != null) {      taskCompleter.error(_dbClient,DeviceControllerException.errors.vmaxExportGroupCreateError(dex.getMessage()));    }  }catch (  Exception ex) {    _log.error("ExportGroup Orchestration failed.",ex);    if (taskCompleter != null) {      ServiceError serviceError=DeviceControllerException.errors.jobFailedMsg(ex.getMessage(),ex);      taskCompleter.error(_dbClient,serviceError);    }  }}  }
class C{  final public char firstChar(){  if (length() == 0)   throw new StringIndexOutOfBoundsException(0);  return array[0];}  }
class C{  public DisruptorBlockingQueue(final int capacity,final SpinPolicy spinPolicy){  super(capacity);switch (spinPolicy) {case BLOCKING:    queueNotFullCondition=new QueueNotFull();  queueNotEmptyCondition=new QueueNotEmpty();break;case SPINNING:queueNotFullCondition=new SpinningQueueNotFull();queueNotEmptyCondition=new SpinningQueueNotEmpty();break;case WAITING:default :queueNotFullCondition=new WaitingQueueNotFull();queueNotEmptyCondition=new WaitingQueueNotEmpty();}}  }
class C{  public static Bitmap decodeBitmap(InputStream is,Context context) throws IOException {  final BitmapFactory.Options options=new BitmapFactory.Options();  options.inJustDecodeBounds=true;  byte[] data=isToByte(is);  BitmapFactory.decodeByteArray(data,0,data.length,options);  options.inSampleSize=calculateInSampleSize(options,context);  options.inJustDecodeBounds=false;  return BitmapFactory.decodeByteArray(data,0,data.length,options);}  }
class C{  public void enableIdmAuthStats(String tenantName) throws Exception {  getService().enableIdmAuthStats(tenantName,this.getServiceContext());}  }
class C{  static void processXForm(final PdfStreamDecoder pdfStreamDecoder,final int dataPointer,final PdfObject XObject,final Shape defaultClip,final CommandParser parser){  final boolean debug=false;  if (debug) {    System.out.println("processImage " + dataPointer + ' '+ XObject.getObjectRefAsString()+ ' '+ defaultClip);  }  final String oldFormName=pdfStreamDecoder.formName;  final String name=parser.generateOpAsString(0,true);  try {    if (ImageCommands.trackImages) {      if (pdfStreamDecoder.imagesInFile == null) {        pdfStreamDecoder.imagesInFile=name + " Form";      } else {        pdfStreamDecoder.imagesInFile=name + " Form\n" + pdfStreamDecoder.imagesInFile;      }    }    parser.reset();    final byte[] objectData=pdfStreamDecoder.currentPdfFile.readStream(XObject,true,true,false,false,false,XObject.getCacheName(pdfStreamDecoder.currentPdfFile.getObjectReader()));    if (objectData != null) {      final String oldIndent=PdfStreamDecoder.indent;      PdfStreamDecoder.indent+="   ";      float[] transformMatrix=new float[6];      float[] matrix=XObject.getFloatArray(PdfDictionary.Matrix);      final float[] formBBox=XObject.getFloatArray(PdfDictionary.BBox);      if (matrix != null && pdfStreamDecoder.BBox != null && formBBox != null) {        final float Bwidth;        final float Bheight;        if (pdfStreamDecoder.parserOptions.isFlattenedForm()) {          Bwidth=(pdfStreamDecoder.BBox[2] - pdfStreamDecoder.BBox[0]);          Bheight=(pdfStreamDecoder.BBox[3] - pdfStreamDecoder.BBox[1]);        } else {          Bwidth=(pdfStreamDecoder.BBox[2] - pdfStreamDecoder.BBox[0]) / matrix[0];          Bheight=(pdfStreamDecoder.BBox[3] - pdfStreamDecoder.BBox[1]) / matrix[3];        }        if (Bwidth == (formBBox[2] - formBBox[0]) && Bheight == (formBBox[3] - formBBox[1]) && matrix[4] == 0 && matrix[5] == 0) {          matrix=null;        }      }      final boolean isIdentity=matrix == null || XForm.isIdentity(matrix);      if (matrix != null) {        transformMatrix=matrix;      }      final float[][] CTM;      final float[][] oldCTM;      final int currentDepth=pdfStreamDecoder.graphicsStates.getDepth();      float lineWidthInForm=-1;      final float[][] currentCTM=new float[3][3];      for (int i=0; i < 3; i++) {        System.arraycopy(pdfStreamDecoder.gs.CTM[i],0,currentCTM[i],0,3);      }      oldCTM=currentCTM;      CTM=pdfStreamDecoder.gs.CTM;      float[][] scaleF=pdfStreamDecoder.gs.scaleFactor;      if (matrix != null && !isIdentity) {        final float[][] scaleFactor={{transformMatrix[0],transformMatrix[1],0},{transformMatrix[2],transformMatrix[3],0},{transformMatrix[4],transformMatrix[5],1}};        scaleF=scaleFactor;        pdfStreamDecoder.gs.CTM=Matrix.multiply(scaleFactor,CTM);        lineWidthInForm=transformMatrix[0] * pdfStreamDecoder.gs.getLineWidth();        if (lineWidthInForm == 0) {          lineWidthInForm=transformMatrix[1] * pdfStreamDecoder.gs.getLineWidth();        }        if (lineWidthInForm < 0) {          lineWidthInForm=-lineWidthInForm;        }        if (debug) {          System.out.println("setMatrix " + pdfStreamDecoder.gs.CTM[0][0] + ' '+ pdfStreamDecoder.gs.CTM[0][1]+ ' '+ pdfStreamDecoder.gs.CTM[1][0]+ ' '+ pdfStreamDecoder.gs.CTM[1][1]+ ' '+ pdfStreamDecoder.gs.CTM[2][0]+ ' '+ pdfStreamDecoder.gs.CTM[2][1]);        }      }      pdfStreamDecoder.formLevel++;      if (pdfStreamDecoder.formLevel == 1) {        pdfStreamDecoder.formName=name;      } else       if (pdfStreamDecoder.formLevel < 20) {        pdfStreamDecoder.formName=pdfStreamDecoder.formName + '_' + name;      }      int mainStrokeColorData=pdfStreamDecoder.gs.strokeColorSpace.getColor().getRGB();      int mainnonStrokeColorData=pdfStreamDecoder.gs.nonstrokeColorSpace.getColor().getRGB();      if (lineWidthInForm > 0) {        pdfStreamDecoder.gs.setLineWidth(lineWidthInForm);      }      final float maxStrokeValue=pdfStreamDecoder.gs.getAlphaMax(GraphicsState.STROKE);      final float maxFillValue=pdfStreamDecoder.gs.getAlphaMax(GraphicsState.FILL);      final float currentFillValue=pdfStreamDecoder.gs.getAlpha(GraphicsState.FILL);      pdfStreamDecoder.gs.setMaxAlpha(GraphicsState.STROKE,pdfStreamDecoder.gs.getAlpha(GraphicsState.STROKE));      if (pdfStreamDecoder.formLevel < 3 && currentFillValue < maxFillValue) {        pdfStreamDecoder.gs.setMaxAlpha(GraphicsState.FILL,currentFillValue);      }      final PdfObjectCache mainCache=pdfStreamDecoder.cache.copy();      pdfStreamDecoder.cache.reset(mainCache);      final PdfObject Resources=XObject.getDictionary(PdfDictionary.Resources);      if (Resources != null) {        pdfStreamDecoder.readResources(Resources,false);      }      pdfStreamDecoder.cache.groupObj=XObject.getDictionary(PdfDictionary.Group);      pdfStreamDecoder.currentPdfFile.checkResolved(pdfStreamDecoder.cache.groupObj);      float[] BBox=XObject.getFloatArray(PdfDictionary.BBox);      Area clip=null;      boolean clipChanged=false;      if (BBox != null && BBox[2] > 1 && BBox[3] > 1 && pdfStreamDecoder.gs.getClippingShape() == null && pdfStreamDecoder.gs.CTM[0][1] == 0 && pdfStreamDecoder.gs.CTM[1][0] == 0 && pdfStreamDecoder.gs.CTM[2][1] != 0 && pdfStreamDecoder.gs.CTM[2][0] < 0) {        if (debug) {          System.out.println("setClip1 ");        }        clip=XForm.setClip(defaultClip,BBox,pdfStreamDecoder.gs,pdfStreamDecoder.current);        clipChanged=true;      } else       if (BBox != null && BBox[0] == 0 && BBox[1] == 0 && BBox[2] > 1 && BBox[3] > 1 && BBox[2] != BBox[3] && (pdfStreamDecoder.gs.CTM[0][0] > 0.99 || pdfStreamDecoder.gs.CTM[2][1] < -1) && (pdfStreamDecoder.gs.CTM[2][0] < -1 || pdfStreamDecoder.gs.CTM[2][0] > 1) && pdfStreamDecoder.gs.CTM[2][1] != 0) {        if (debug) {          System.out.println("setClip2");        }        clip=XForm.setClip(defaultClip,BBox,pdfStreamDecoder.gs,pdfStreamDecoder.current);        clipChanged=true;      } else       if (BBox != null && BBox[0] == 0 && BBox[1] == 0 && BBox[2] > 1 && BBox[3] > 1 && !(pdfStreamDecoder.gs.CTM[2][0] < 0) && (pdfStreamDecoder.formLevel > 0 || pdfStreamDecoder.gs.getClippingShape() != null)) {        if (debug) {          System.out.println("setClip3");        }        clip=XForm.setClip(defaultClip,BBox,pdfStreamDecoder.gs,pdfStreamDecoder.current);        clipChanged=true;      } else       if (pdfStreamDecoder.formLevel > 1 && BBox != null && BBox[0] > 50 && BBox[1] > 50 && pdfStreamDecoder.gs.getClippingShape() != null && (BBox[0] - 1) > pdfStreamDecoder.gs.getClippingShape().getBounds().x && (BBox[1] - 1) > pdfStreamDecoder.gs.getClippingShape().getBounds().y) {        if (debug) {          System.out.println("setClip4");        }        clip=XForm.setClip(defaultClip,BBox,pdfStreamDecoder.gs,pdfStreamDecoder.current);        clipChanged=true;      } else       if (BBox != null && BBox[2] > 1 && BBox[3] > 1 && pdfStreamDecoder.gs.getClippingShape() == null && pdfStreamDecoder.gs.CTM[0][1] > 0 && pdfStreamDecoder.gs.CTM[1][0] < 0 && pdfStreamDecoder.gs.CTM[0][0] == 0 && pdfStreamDecoder.gs.CTM[1][1] == 0) {        if (debug) {          System.out.println("setClip5");        }        clip=XForm.setClip(defaultClip,BBox,pdfStreamDecoder.gs,pdfStreamDecoder.current);        clipChanged=true;      } else       if (debug) {        System.out.println("no Clip set");      }      if (objectData.length > 0) {        final PdfObject newSMask=XForm.getSMask(BBox,pdfStreamDecoder.gs,pdfStreamDecoder.currentPdfFile);        final int blendMode=pdfStreamDecoder.gs.getBMValue();        if ((pdfStreamDecoder.parserOptions.getExtractionMode() & PdfDecoderInt.RASTERIZE_FORMS) == PdfDecoderInt.RASTERIZE_FORMS) {          processXFormAsImage(XObject,pdfStreamDecoder);        }        if (newSMask != null || blendMode != PdfDictionary.Normal) {          processXFormWithMaskOrBlend(debug,newSMask,pdfStreamDecoder,blendMode,XObject,name);        } else {          if (debug) {            System.out.println("decode");          }          final int BM=pdfStreamDecoder.gs.getBMValue();          pdfStreamDecoder.decodeStreamIntoObjects(objectData,false);          pdfStreamDecoder.current.setGraphicsState(GraphicsState.STROKE,pdfStreamDecoder.gs.getAlpha(GraphicsState.STROKE),BM);          pdfStreamDecoder.current.setGraphicsState(GraphicsState.FILL,pdfStreamDecoder.gs.getAlpha(GraphicsState.FILL),BM);        }      }      if (clipChanged) {        pdfStreamDecoder.gs.setClippingShape(clip);        pdfStreamDecoder.current.drawClip(pdfStreamDecoder.gs,clip,false);      }      pdfStreamDecoder.formLevel--;      pdfStreamDecoder.graphicsStates.correctDepth(currentDepth,pdfStreamDecoder.gs,pdfStreamDecoder.current);      if (oldCTM != null) {        pdfStreamDecoder.gs.CTM=oldCTM;      } else       if (pdfStreamDecoder.gs.CTM[0][0] == 1f && pdfStreamDecoder.gs.CTM[1][1] == 1f) {        pdfStreamDecoder.gs.CTM=new float[][]{{1,0,0},{0,1,0},{0,0,1}};      }      pdfStreamDecoder.gs.scaleFactor=scaleF;      pdfStreamDecoder.gs.resetColorSpaces(mainStrokeColorData,mainnonStrokeColorData);      pdfStreamDecoder.cache.restore(mainCache);      pdfStreamDecoder.gs.setMaxAlpha(GraphicsState.STROKE,maxStrokeValue);      pdfStreamDecoder.gs.setMaxAlpha(GraphicsState.FILL,maxFillValue);      PdfStreamDecoder.indent=oldIndent;    }  } catch (  final Error e) {    LogWriter.writeLog("Exception: " + e.getMessage());    pdfStreamDecoder.parserOptions.imagesProcessedFully=false;    pdfStreamDecoder.errorTracker.addPageFailureMessage("Error " + e + " in DO");    if (ExternalHandlers.throwMissingCIDError && e.getMessage() != null && e.getMessage().contains("kochi")) {      throw e;    }  }catch (  final PdfException e) {    LogWriter.writeLog("Exception " + e);    pdfStreamDecoder.parserOptions.imagesProcessedFully=false;    pdfStreamDecoder.errorTracker.addPageFailureMessage("Error " + e + " in DO");  }  pdfStreamDecoder.formName=oldFormName;}  }
class C{  public String toString(int depth){  if (depth <= 0)   return "";  return super.toString(depth) + "  arity: " + arity+ "  orgDefInModule: "+ (originallyDefinedInModule != null ? originallyDefinedInModule.getName().toString() : "<null>");}  }
class C{  boolean run(File baseDir,String... args){  if (args.length == 0) {    usage(System.out);    return true;  }  List<File> files=new ArrayList<File>();  for (int i=0; i < args.length; i++) {    String arg=args[i];    if (arg.equals("-encoding") && i + 1 < args.length)     encoding=args[++i]; else     if (arg.equals("-gui"))     gui=true; else     if (arg.equals("-q"))     quiet=true; else     if (arg.equals("-v"))     verbose=true; else     if (arg.equals("-t") && i + 1 < args.length)     tags.add(args[++i]); else     if (arg.equals("-ef") && i + 1 < args.length)     excludeFiles.add(new File(baseDir,args[++i])); else     if (arg.equals("-et") && i + 1 < args.length)     excludeTags.add(args[++i]); else     if (arg.equals("-r")) {      if (excludeFiles.size() > 0)       throw new Error("-r must be used before -ef");      File d=baseDir;      while (!new File(d,"TEST.ROOT").exists()) {        if (d == null)         throw new Error("cannot find TEST.ROOT");        d=d.getParentFile();      }      baseDir=d;    } else     if (arg.startsWith("-"))     throw new Error("unknown option: " + arg); else {      while (i < args.length)       files.add(new File(baseDir,args[i++]));    }  }  for (  File file : files) {    if (file.exists())     test(file); else     error("File not found: " + file);  }  if (fileCount != 1)   System.err.println(fileCount + " files read");  if (errors > 0)   System.err.println(errors + " errors");  return (gui || errors == 0);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void resolve(AbsoluteTableIdentifier absoluteTableIdentifier){  DimColumnResolvedFilterInfo dimColumnEvaluatorInfo=null;  MeasureColumnResolvedFilterInfo msrColumnEvalutorInfo=null;  int index=0;  if (exp instanceof BinaryLogicalExpression) {    BinaryLogicalExpression conditionalExpression=(BinaryLogicalExpression)exp;    List<ColumnExpression> columnList=conditionalExpression.getColumnList();    for (    ColumnExpression columnExpression : columnList) {      if (columnExpression.isDimension()) {        dimColumnEvaluatorInfo=new DimColumnResolvedFilterInfo();        DimColumnFilterInfo filterInfo=new DimColumnFilterInfo();        dimColumnEvaluatorInfo.setColumnIndex(columnExpression.getCarbonColumn().getOrdinal());        dimColumnEvaluatorInfo.setRowIndex(index++);        dimColumnEvaluatorInfo.setDimension(columnExpression.getDimension());        dimColumnEvaluatorInfo.setDimensionExistsInCurrentSilce(false);        if (columnExpression.getDimension().hasEncoding(Encoding.DIRECT_DICTIONARY)) {          filterInfo.setFilterList(getDirectSurrogateValues(columnExpression));        } else {          filterInfo.setFilterListForNoDictionaryCols(getNoDictionaryRangeValues());        }        filterInfo.setIncludeFilter(isIncludeFilter);        dimColumnEvaluatorInfo.setFilterValues(filterInfo);        dimColumnEvaluatorInfo.addDimensionResolvedFilterInstance(columnExpression.getDimension(),filterInfo);        dimColEvaluatorInfoList.add(dimColumnEvaluatorInfo);      } else {        msrColumnEvalutorInfo=new MeasureColumnResolvedFilterInfo();        msrColumnEvalutorInfo.setRowIndex(index++);        msrColumnEvalutorInfo.setAggregator(((CarbonMeasure)columnExpression.getCarbonColumn()).getAggregateFunction());        msrColumnEvalutorInfo.setColumnIndex(((CarbonMeasure)columnExpression.getCarbonColumn()).getOrdinal());        msrColumnEvalutorInfo.setType(columnExpression.getCarbonColumn().getDataType());        msrColEvalutorInfoList.add(msrColumnEvalutorInfo);      }    }  }}  }
class C{  public ConnectionEvent(PooledConnection con){  super(con);}  }
class C{  public void readFNum(){  float f=0;  boolean neg=false;  int exp=0;  int eval=0;  float mul=1;  byte work=data[pos++];  while (true) {    if (work == (byte)0xdd) {      work=data[pos++];    }    int nyb=(work >> 4) & 0xf;    work=(byte)((work << 4) | 0xd);    if (nyb < 10) {      if (exp != 0) {        eval=eval * 10 + nyb;      } else       if (mul == 1) {        f=f * 10 + nyb;      } else {        f+=nyb * mul;        mul/=10f;      }    } else     if (nyb == 0xa) {      mul=0.1f;    } else     if (nyb == 0xb) {      exp=1;    } else     if (nyb == 0xc) {      exp=-1;    } else     if (nyb == 0xe) {      neg=true;    } else {      break;    }  }  fnum=(neg ? -1 : 1) * f * (float)Math.pow(10,eval * exp);}  }
class C{  public static boolean validateInitiatorPortsRegistered(List<Initiator> initiators){  List<Initiator> regInis=new ArrayList<Initiator>();  for (  Initiator initiator : initiators) {    if (RegistrationStatus.REGISTERED.name().equalsIgnoreCase(initiator.getRegistrationStatus())) {      regInis.add(initiator);    } else {      _logger.info("Initiator {} not registered",initiator.getId());    }  }  return !regInis.isEmpty();}  }
class C{  @Override public int compareTo(String o){  return o.compareTo(clazz);}  }
class C{  private void validateStoragePolicyUpdateRequest(StoragePolicyUpdateRequest request){  Assert.notNull(request,"A storage policy update request must be specified.");  validateStoragePolicyRule(request.getStoragePolicyRule());  validateStoragePolicyFilter(request.getStoragePolicyFilter());  validateStoragePolicyTransition(request.getStoragePolicyTransition());  Assert.hasText(request.getStatus(),"A storage policy status must be specified.");  request.setStatus(request.getStatus().trim());}  }
class C{  public TurnoutOperation loadOne(Element e){  try {    Class<?> myOpClass=Class.forName("jmri.NoFeedbackTurnoutOperation");    return super.loadOne(e,myOpClass.getConstructor(new Class[]{String.class,int.class,int.class}),NoFeedbackTurnoutOperation.getDefaultIntervalStatic(),NoFeedbackTurnoutOperation.getDefaultMaxTriesStatic());  } catch (  ClassNotFoundException e1) {    log.error("while creating NoFeedbackTurnoutOperation",e1);    return null;  }catch (  NoSuchMethodException e2) {    log.error("while creating NoFeedbackTurnoutOperation",e2);    return null;  }}  }
class C{  @Override public void run(){  amIActive=true;  boolean image1Bool=false;  boolean image2Bool=false;  double constant1=0;  double constant2=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  String inputHeader1=args[0];  File file=new File(inputHeader1);  image1Bool=file.exists();  if (image1Bool) {    constant1=-1;  } else {    constant1=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String inputHeader2=args[1];  file=new File(inputHeader2);  image2Bool=file.exists();  if (image2Bool) {    constant2=-1;  } else {    constant2=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    if (image1Bool && image2Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData1=inputFile1.getNoDataValue();      double noData2=inputFile2.getNoDataValue();      if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {        showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");        return;      }      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData1);      outputFile.setPreferredPalette(inputFile1.getPreferredPalette());      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          z2=data2[col];          if ((z1 != noData1) && (z2 != noData2)) {            if (z2 != 0) {              outputFile.setValue(row,col,(int)z1 / (int)z2);            }          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      inputFile2.close();      outputFile.close();    } else     if (image1Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData=inputFile1.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData);      outputFile.setPreferredPalette(inputFile1.getPreferredPalette());      int const2=(int)constant2;      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          if (z1 != noData && constant2 != 0) {            outputFile.setValue(row,col,(int)z1 / const2);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      outputFile.close();    } else     if (image2Bool) {      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile2.getNumberRows();      int cols=inputFile2.getNumberColumns();      double noData=inputFile2.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader2,WhiteboxRaster.DataType.FLOAT,noData);      outputFile.setPreferredPalette(inputFile2.getPreferredPalette());      int const1=(int)constant1;      for (row=0; row < rows; row++) {        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z2=data2[col];          if (z2 != noData && z2 != 0) {            outputFile.setValue(row,col,const1 / (int)z2);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile2.close();      outputFile.close();    } else {      showFeedback("At least one of the inputs must be a raster image.");    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public boolean treeEquals(GPTree tree){  return child.rootedTreeEquals(tree.child);}  }
class C{  public static char[] toCharArray(InputStream is) throws IOException {  return toCharArray(is,Charset.defaultCharset());}  }
class C{  public static ScalingUtils.ScaleType defaultValue(){  return ScalingUtils.ScaleType.CENTER_CROP;}  }
class C{  public void testOuterJoinFunction() throws Exception {  check("t OUTER JOIN t2 ON t.id=t2.id","{oj t OUTER JOIN t2 ON t.id=t2.id}");  check("select * from t OUTER JOIN t2 ON t.id=t2.id","select * from {oj t OUTER JOIN t2 ON t.id=t2.id}");  check("select * from t OUTER JOIN t2 ON t.id=t2.id ORDER BY t2.id","select * from {oj t OUTER JOIN t2 ON t.id=t2.id} ORDER BY t2.id");}  }
class C{  static public void adjustBeginLineColumn(int newLine,int newCol){  int start=tokenBegin;  int len;  if (bufpos >= tokenBegin) {    len=bufpos - tokenBegin + inBuf + 1;  } else {    len=bufsize - tokenBegin + bufpos + 1 + inBuf;  }  int i=0, j=0, k=0;  int nextColDiff=0, columnDiff=0;  while (i < len && bufline[j=start % bufsize] == bufline[k=++start % bufsize]) {    bufline[j]=newLine;    nextColDiff=columnDiff + bufcolumn[k] - bufcolumn[j];    bufcolumn[j]=newCol + columnDiff;    columnDiff=nextColDiff;    i++;  }  if (i < len) {    bufline[j]=newLine++;    bufcolumn[j]=newCol + columnDiff;    while (i++ < len) {      if (bufline[j=start % bufsize] != bufline[++start % bufsize])       bufline[j]=newLine++; else       bufline[j]=newLine;    }  }  line=bufline[j];  column=bufcolumn[j];}  }
class C{  public boolean isShowHint(){  return showHint;}  }
class C{  public void processBatchRequest(BufferedReader reader) throws IOException, ServiceException {  final String BATCH_PROMPT="Enter set operations one by one, " + "then enter submit to send the batch request:\n" + " set row# col# value  [[add a set operation]]\n"+ " submit               [[submit the request]]";  CellFeed batchRequest=new CellFeed();  System.out.println(BATCH_PROMPT);  String operation=reader.readLine();  while (!operation.startsWith("submit")) {    String[] s=operation.split(" ",4);    if (s.length != 4 || !s[0].equals("set")) {      System.out.println("Invalid command: " + operation);      operation=reader.readLine();      continue;    }    int row=Integer.parseInt(s[1]);    int col=Integer.parseInt(s[2]);    String value=s[3];    CellEntry batchOperation=createUpdateOperation(row,col,value);    batchRequest.getEntries().add(batchOperation);    printBatchRequest(batchRequest);    System.out.println(BATCH_PROMPT);    operation=reader.readLine();  }  CellFeed feed=service.getFeed(cellFeedUrl,CellFeed.class);  Link batchLink=feed.getLink(Link.Rel.FEED_BATCH,Link.Type.ATOM);  URL batchUrl=new URL(batchLink.getHref());  CellFeed batchResponse=service.batch(batchUrl,batchRequest);  boolean isSuccess=true;  for (  CellEntry entry : batchResponse.getEntries()) {    String batchId=BatchUtils.getBatchId(entry);    if (!BatchUtils.isSuccess(entry)) {      isSuccess=false;      BatchStatus status=BatchUtils.getBatchStatus(entry);      System.out.println("\n" + batchId + " failed ("+ status.getReason()+ ") "+ status.getContent());    }  }  if (isSuccess) {    System.out.println("Batch operations successful.");  }}  }
class C{  public void testCase1(){  byte aBytes[]={1,2,3,4,5,6,7,1,2,3};  byte bBytes[]={10,20,30,40,50,60,70,10,20,30};  int aSign=-1;  int bSign=-1;  byte rBytes[]={10,40,100,-55,96,51,76,40,-45,85,105,4,28,-86,-117,-52,100,120,90};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.multiply(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public boolean hasId(){  return super.hasTextValue();}  }
class C{  @Transactional public void makeRead(final Collection<JSONObject> notifications) throws ServiceException {  for (  final JSONObject notification : notifications) {    makeRead(notification);  }}  }
class C{  public synchronized void beHealthy(){  if (beingSick || playingDead) {synchronized (startupMutex) {      beingSick=false;      playingDead=false;      startEventProcessing();    }    logger.info("GroupMembershipService.beHealthy invoked for {} - recovering health now",this.address);    if (directChannel != null) {      directChannel.beHealthy();    }    services.getJoinLeave().beHealthy();    services.getHealthMonitor().beHealthy();    services.getMessenger().beHealthy();  }}  }
class C{  public Plot line(String label,List<? extends Number> x,List<? extends Number> y){  return line(label,x,y,null);}  }
class C{  public final boolean hasContended(){  return head != null;}  }
class C{  protected String byteArrayToHexString(byte[] bytes){  StringBuilder sb=new StringBuilder(bytes.length * 2);  for (  byte element : bytes) {    int v=element & 0xff;    if (v < 16) {      sb.append('0');    }    sb.append(Integer.toHexString(v));  }  return sb.toString().toUpperCase(Locale.US);}  }
class C{  @CheckReturnValue public Notice withWorld(World world){  this.world=world;  return this;}  }
class C{  public static ParseTree build(JCas jCas){  final Map<PhraseChunk,Collection<PhraseChunk>> index=JCasUtil.indexCovering(jCas,PhraseChunk.class,PhraseChunk.class);  final Collection<PhraseChunk> phrases=JCasUtil.select(jCas,PhraseChunk.class);  final List<ParseTreeNode> roots=new LinkedList<>();  final Map<PhraseChunk,ParseTreeNode> chunkToNode=new HashMap<>();  for (  final PhraseChunk chunk : phrases) {    ParseTreeNode treeNode=chunkToNode.get(chunk);    if (treeNode == null) {      treeNode=new ParseTreeNode(chunk);      chunkToNode.put(chunk,treeNode);    }    final Collection<PhraseChunk> covering=index.get(chunk);    if (covering == null || covering.isEmpty()) {      roots.add(treeNode);    } else {      final PhraseChunk parent=findSmallest(covering);      ParseTreeNode parentNode=chunkToNode.get(parent);      if (parentNode == null) {        parentNode=new ParseTreeNode(parent);        chunkToNode.put(parent,parentNode);      }      treeNode.setParent(parentNode);      parentNode.addChild(treeNode);    }  }  final Map<PhraseChunk,Collection<WordToken>> wordIndex=JCasUtil.indexCovered(jCas,PhraseChunk.class,WordToken.class);  final Map<WordToken,ParseTreeNode> wordToNode=new HashMap<>();  chunkToNode.values().forEach(null);  roots.sort(SENTENCE_ORDER);  return new ParseTree(roots,chunkToNode,wordToNode);}  }
class C{  @Override protected void drawXLabels(List<Double> xLabels,Double[] xTextLabelLocations,Canvas canvas,Paint paint,int left,int top,int bottom,double xPixelsPerUnit,double minX,double maxX){  int length=xLabels.size();  if (length > 0) {    boolean showLabels=mRenderer.isShowLabels();    boolean showGridY=mRenderer.isShowGridY();    boolean showTickMarks=mRenderer.isShowTickMarks();    DateFormat format=getDateFormat(xLabels.get(0),xLabels.get(length - 1));    for (int i=0; i < length; i++) {      long label=Math.round(xLabels.get(i));      float xLabel=(float)(left + xPixelsPerUnit * (label - minX));      if (showLabels) {        paint.setColor(mRenderer.getXLabelsColor());        if (showTickMarks) {          canvas.drawLine(xLabel,bottom,xLabel,bottom + mRenderer.getLabelsTextSize() / 3,paint);        }        drawText(canvas,format.format(new Date(label)),xLabel,bottom + mRenderer.getLabelsTextSize() * 4 / 3 + mRenderer.getXLabelsPadding(),paint,mRenderer.getXLabelsAngle());      }      if (showGridY) {        paint.setColor(mRenderer.getGridColor(0));        canvas.drawLine(xLabel,bottom,xLabel,top,paint);      }    }  }  drawXTextLabels(xTextLabelLocations,canvas,paint,true,left,top,bottom,xPixelsPerUnit,minX,maxX);}  }
class C{  public T caseArrayLike(ArrayLike object){  return null;}  }
class C{  private static void buildSingleMessageNotification(final Context context,ArrayList<MessageItem> messages,long threadId,final NotificationCompat.Builder builder,ConversationPrefsHelper conversationPrefs,final Integer privateNotifications){  MessageItem message=messages.get(0);  Intent threadIntent=new Intent(context,MainActivity.class);  threadIntent.putExtra(MessageListActivity.ARG_THREAD_ID,threadId);  final PendingIntent threadPI=PendingIntent.getActivity(context,buildRequestCode(threadId,1),threadIntent,PendingIntent.FLAG_UPDATE_CURRENT);  Intent readIntent=new Intent(ACTION_MARK_READ);  readIntent.putExtra("thread_id",threadId);  final PendingIntent readPI=PendingIntent.getBroadcast(context,buildRequestCode(threadId,2),readIntent,PendingIntent.FLAG_UPDATE_CURRENT);  Intent seenIntent=new Intent(ACTION_MARK_SEEN);  final PendingIntent seenPI=PendingIntent.getBroadcast(context,buildRequestCode(threadId,4),seenIntent,PendingIntent.FLAG_UPDATE_CURRENT);  int unreadMessageCount=SmsHelper.getUnreadMessageCount(context);  String body;  String title;  NotificationCompat.Style nstyle=null;switch (privateNotifications) {case 0:    body=message.mBody;  title=message.mContact;nstyle=new NotificationCompat.BigTextStyle().bigText(message.mBody);break;case 1:body=sRes.getString(R.string.new_message);title=message.mContact;break;case 2:body=sRes.getString(R.string.new_message);title="QKSMS";break;default :body=message.mBody;title=message.mContact;nstyle=null;}builder.setContentTitle(title).setContentText(body).setLargeIcon(getLargeIcon(context,Contact.get(message.mAddress,false),privateNotifications)).setContentIntent(threadPI).setNumber(unreadMessageCount).setStyle(nstyle).setColor(ThemeManager.getColor()).addAction(R.drawable.ic_accept,sRes.getString(R.string.read),readPI).extend(RemoteMessagingReceiver.getConversationExtender(context,message.mContact,message.mAddress,threadId)).setDeleteIntent(seenPI);if (Build.VERSION.SDK_INT < 24) {Intent replyIntent=new Intent(context,QKReplyActivity.class);replyIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);replyIntent.putExtra(QKReplyActivity.EXTRA_THREAD_ID,threadId);replyIntent.putExtra(QKReplyActivity.EXTRA_SHOW_KEYBOARD,true);PendingIntent replyPI=PendingIntent.getActivity(context,buildRequestCode(threadId,0),replyIntent,PendingIntent.FLAG_UPDATE_CURRENT);builder.addAction(R.drawable.ic_reply,sRes.getString(R.string.reply),replyPI);} else {builder.addAction(RemoteMessagingReceiver.getReplyAction(context,message.mAddress,threadId));}if (conversationPrefs.getDimissedReadEnabled()) {builder.setDeleteIntent(readPI);}if (conversationPrefs.getCallButtonEnabled()) {Intent callIntent=new Intent(Intent.ACTION_CALL);callIntent.setData(Uri.parse("tel:" + message.mAddress));PendingIntent callPI=PendingIntent.getActivity(context,buildRequestCode(threadId,3),callIntent,PendingIntent.FLAG_UPDATE_CURRENT);builder.addAction(R.drawable.ic_call,sRes.getString(R.string.call),callPI);}if (message.isMms()) {Log.d(TAG,"Message is MMS");SlideshowModel model=message.mSlideshow;if (model != null && model.isSimple() && model.get(0).getImage() != null) {Log.d(TAG,"MMS type: image");ImageModel imageModel=model.get(0).getImage();Bitmap image=imageModel.getBitmap(imageModel.getWidth(),imageModel.getHeight());NotificationCompat.BigPictureStyle style=new NotificationCompat.BigPictureStyle().setBigContentTitle(message.mContact).setSummaryText(message.mBody).bigLargeIcon(getLargeIcon(context,Contact.get(message.mAddress,false),privateNotifications)).bigPicture(image);if (privateNotifications == 0) builder.setStyle(style); else builder.setStyle(null);} else {Log.d(TAG,"MMS Type: not an image lol");if (privateNotifications == 0) builder.setStyle(new NotificationCompat.BigTextStyle().bigText(message.mBody)); else builder.setStyle(null);}}NotificationManager.notify(context,(int)threadId,builder.build());}  }
class C{  @Override public String generateContainerName(String workspaceId,String machineId,String userName,String machineName){  String containerName=workspaceId + '_' + machineId+ '_'+ userName+ '_'+ machineName;  return containerName.toLowerCase().replaceAll("[^a-z0-9_-]+","");}  }
class C{  public boolean isSameLine(){  Object oo=get_Value(COLUMNNAME_IsSameLine);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static void main(String[] args) throws IgniteCheckedException {  try (Ignite g=G.start("examples/config/example-cache.xml")){    if (g.cluster().nodes().size() <= 2)     throw new IgniteCheckedException("At least 2 nodes must be started.");    sample(g,"partitioned");    sample(g,"replicated");    sample(g,"local");  } }  }
class C{  public void move(int x,int y) throws IOException {  moveXY=new int[]{x,y};  outstandingChanges=true;}  }
class C{  public Constraint verticalAlign(int valign){  this.valign=valign;  return this;}  }
class C{  public void move(MouseEvent e){  if (getGraphic().getRenderType() == OMGraphic.RENDERTYPE_LATLON && isMouseEventTouchingTheEdge(e)) {    if (gpr == null) {      gpr=new GrabPoint(-1,-1);    }    gpr.set(e.getX(),e.getY());    movingPoint=gpr;  }}  }
class C{  protected void redefine(int nodetype,String namespace,String localName,int hash){  this.nodetype=nodetype;  this.namespace=namespace;  this.localName=localName;  this.hash=hash;}  }
class C{  public void build(String code,JSONObject data){  try {    result.put(resources.getString(R.string.intent_extra_status),resources.getString(R.string.shared_pref_default_status));    result.put(resources.getString(R.string.intent_extra_code),code);    if (data != null) {      result.put(resources.getString(R.string.intent_extra_data),data);    }    operationListResult.put(result);  } catch (  JSONException e) {    Log.e(TAG,"Invalid JSON format." + e.toString());  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:19.851 -0500",hash_original_method="AC3B57A902A92307655B10B6A320F4FA",hash_generated_method="08EF0D2A48EFF10756158651773C6BD1") public int nextSpanTransition(int start,int limit,Class kind){  int count=mSpanCount;  Object[] spans=mSpans;  int[] starts=mSpanStarts;  int[] ends=mSpanEnds;  int gapstart=mGapStart;  int gaplen=mGapLength;  if (kind == null) {    kind=Object.class;  }  for (int i=0; i < count; i++) {    int st=starts[i];    int en=ends[i];    if (st > gapstart)     st-=gaplen;    if (en > gapstart)     en-=gaplen;    if (st > start && st < limit && kind.isInstance(spans[i]))     limit=st;    if (en > start && en < limit && kind.isInstance(spans[i]))     limit=en;  }  return limit;}  }
class C{  public void checkWarehouse(boolean sbf){  if (warehouse == null) {    logger.fine("need to create warehouse");    warehouse=new VPFAutoFeatureGraphicWarehouse();  }}  }
class C{  public AnnotationDragHelper(final WorkflowAnnotation dragged,final Point origin,final ProcessRendererModel model){  if (dragged == null) {    throw new IllegalArgumentException("dragged must not be null!");  }  if (origin == null) {    throw new IllegalArgumentException("origin must not be null!");  }  if (model == null) {    throw new IllegalArgumentException("model must not be null!");  }  this.dragged=dragged;  this.origin=origin;  this.startingPoint=new Point((int)dragged.getLocation().getX(),(int)dragged.getLocation().getY());  this.model=model;  this.unsnapped=dragged instanceof ProcessAnnotation;}  }
class C{  @Override public MimeDescriptor embeddedMessage(){  return null;}  }
class C{  public CutTrustedCertificateAction(KseFrame kseFrame){  super(kseFrame);  putValue(LONG_DESCRIPTION,res.getString("CutTrustedCertificateAction.statusbar"));}  }
class C{  public static void pushEncryptedMessage(final TextSecureEnvelope envelope){  while (true) {    try {      queue.put(envelope);      return;    } catch (    final InterruptedException e) {    }  }}  }
class C{  public ClientConfig withHostnameVerifier(HostnameVerifier verifier){  setHostnameVerifier(verifier);  return this;}  }
class C{  public Builder subscribedBy(IOwlObserver owlObserver){  this.owlObserver=owlObserver;  return this;}  }
class C{  public static Array listToArray(String list,char delimiter){  if (list.length() == 0)   return new ArrayImpl();  int len=list.length();  int last=0;  Array array=new ArrayImpl();  try {    for (int i=0; i < len; i++) {      if (list.charAt(i) == delimiter) {        array.append(list.substring(last,i));        last=i + 1;      }    }    if (last <= len)     array.append(list.substring(last));  } catch (  PageException e) {  }  return array;}  }
class C{  public DHParameters generateParameters(){  BigInteger[] safePrimes=DHParametersHelper.generateSafePrimes(size,certainty,random);  BigInteger p=safePrimes[0];  BigInteger q=safePrimes[1];  BigInteger g=DHParametersHelper.selectGenerator(p,q,random);  return new DHParameters(p,g,q,TWO,null);}  }
class C{  public static int readExtendedMediumInt(ByteBuffer in){  int result=in.getInt();  result=(result >>> 8) | ((result & 0x000000ff) << 24);  return result;}  }
class C{  public void open() throws MediaException {  player.open();  if (mLogger.isActivated()) {    mLogger.debug("Media capture stream opened");  }}  }
class C{  private static String addTimeInfoToEvent(String message,Long currTime,int delayInMillis){  String eventTimeString=Long.toString((currTime - delayInMillis) / 1000 * 1000);  String dateString=fmt.print(currTime);  message=message + "," + eventTimeString+ ","+ dateString;  return message;}  }
class C{  private void registerEnd(final String prefixSingular,final String prefixPlural,final String endString){  prefixEndList.add(new PrefixEntry(endString,prefixSingular,prefixPlural));  registerPrefix(prefixSingular,prefixPlural);}  }
class C{  public void onNodeLeft(){synchronized (this) {    nodeLeft=true;    if (pendingFut != null) {      pendingFut.onDone(new IgniteCheckedException("Failed to wait for transaction synchronizer " + "completed state (node left grid): " + nodeId));      pendingFut=null;    }  }}  }
class C{  @Override protected void initViews(Bundle savedInstanceState){  ButterKnife.bind(this);}  }
class C{  public List registerInterest(final Object key,final int interestType,final InterestResultPolicy policy,final boolean isDurable,final byte regionDataPolicy){  return registerInterest(key,interestType,policy,isDurable,false,regionDataPolicy);}  }
class C{  public NvpBuilder addEncoded(final String name,final String value){  npv.put(name,encode(value));  return this;}  }
class C{  @Override protected void doAction(){  JFileChooser chooser=FileChooserFactory.getKeyStoreFileChooser();  chooser.setCurrentDirectory(CurrentDirectory.get());  chooser.setDialogTitle(res.getString("OpenAction.OpenKeyStore.Title"));  chooser.setMultiSelectionEnabled(false);  int rtnValue=chooser.showOpenDialog(frame);  if (rtnValue == JFileChooser.APPROVE_OPTION) {    File openFile=chooser.getSelectedFile();    CurrentDirectory.updateForFile(openFile);    openKeyStore(openFile);  }}  }
class C{  public Holder(GeneralNames entityName,int version){  this.entityName=entityName;  this.version=version;}  }
class C{  public ImageRequest build(){  validate();  return new ImageRequest(this);}  }
class C{  private String formatNfsCmd(List<VNXFileExport> exports,Map<String,String> userInfo){  StringBuilder options=new StringBuilder();  options.append(" -Protocol nfs -ignore -option ");  String access=null;  boolean append=false;  boolean first=true;  boolean rwOnly=false;  String rwPerm="rw";  String accessPerm="access";  ArrayList<String> permissions=new ArrayList<String>();  for (  SecurityTypes secType : SecurityTypes.values()) {    _log.debug("Processing security type: {}",secType.name());    for (    VNXFileExport exp : exports) {      permissions.add(exp.getPermissions());    }    if (permissions.size() == 1 && permissions.get(0).equalsIgnoreCase(rwPerm)) {      rwOnly=true;    }    for (    VNXFileExport exp : exports) {      if (secType.name().equals(exp.getSecurityType())) {        _log.debug("Matching export with perms {}",exp.getPermissions());        if (append) {          options.append(",");        } else {          append=true;        }        String perms=exp.getPermissions();        if (first) {          options.append("sec=");          options.append(secType.name());          if (!perms.isEmpty()) {            options.append(":");          }          first=false;        }        if (!perms.isEmpty()) {          String translatedPerm=perms;          if (rwOnly) {            translatedPerm=accessPerm;          }          access=createAccessString(secType.name(),translatedPerm,exp.getClients(),exp.getRootUserMapping(),userInfo);          options.append(access);        }      }    }    first=true;    permissions.clear();  }  _log.info("Validating if requested to delete all export rules");  if (options != null && options.toString() != null && options.toString().trim().endsWith("-option")) {    String command=options.toString();    command=command.replaceAll("-option","");    options.setLength(0);    options.append(command);  }  String comment=exports.get(0).getComment();  if (comment != null && !comment.isEmpty()) {    options.append(" " + "-comment ").append("\"" + comment + "\" ");  }  return options.toString();}  }
class C{  public static int convertToLongArrayLittleEndian(final byte[] vals,final long[] dest){  checkSource(vals.length,8);  checkDestination(vals.length,dest.length,8);  return convertToLongArrayLittleEndianInternal(vals,0,vals.length,dest,0);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:22.882 -0500",hash_original_method="75D570937564149AAA647C007E5ED089",hash_generated_method="EA20EF15157A2F9A31BDEA600DA5B6FF") public Bitmap extractAlpha(){  return extractAlpha(null,null);}  }
class C{  protected void nextToken() throws ParseException {  try {switch (current) {case -1:      type=LexicalUnits.EOF;    return;case '{':  nextChar();type=LexicalUnits.LEFT_CURLY_BRACE;return;case '}':nextChar();type=LexicalUnits.RIGHT_CURLY_BRACE;return;case '=':nextChar();type=LexicalUnits.EQUAL;return;case '+':nextChar();type=LexicalUnits.PLUS;return;case ',':nextChar();type=LexicalUnits.COMMA;return;case ';':nextChar();type=LexicalUnits.SEMI_COLON;return;case '>':nextChar();type=LexicalUnits.PRECEDE;return;case '[':nextChar();type=LexicalUnits.LEFT_BRACKET;return;case ']':nextChar();type=LexicalUnits.RIGHT_BRACKET;return;case '*':nextChar();type=LexicalUnits.ANY;return;case '(':nextChar();type=LexicalUnits.LEFT_BRACE;return;case ')':nextChar();type=LexicalUnits.RIGHT_BRACE;return;case ':':nextChar();type=LexicalUnits.COLON;return;case ' ':case '\t':case '\r':case '\n':case '\f':do {nextChar();} while (ScannerUtilities.isCSSSpace((char)current));type=LexicalUnits.SPACE;return;case '/':nextChar();if (current != '*') {type=LexicalUnits.DIVIDE;return;}nextChar();start=position - 1;do {while (current != -1 && current != '*') {nextChar();}do {nextChar();} while (current != -1 && current == '*');} while (current != -1 && current != '/');if (current == -1) {throw new ParseException("eof",reader.getLine(),reader.getColumn());}nextChar();type=LexicalUnits.COMMENT;return;case '\'':type=string1();return;case '"':type=string2();return;case '<':nextChar();if (current != '!') {throw new ParseException("character",new Object[]{new Character((char)current)},reader.getLine(),reader.getColumn());}nextChar();if (current == '-') {nextChar();if (current == '-') {nextChar();type=LexicalUnits.CDO;return;}}throw new ParseException("character",new Object[]{new Character((char)current)},reader.getLine(),reader.getColumn());case '-':nextChar();if (identifierOrFunction()) return;if (current != '-') {type=LexicalUnits.MINUS;return;}nextChar();if (current == '>') {nextChar();type=LexicalUnits.CDC;return;}throw new ParseException("character",new Object[]{new Character((char)current)},reader.getLine(),reader.getColumn());case '|':nextChar();if (current == '=') {nextChar();type=LexicalUnits.DASHMATCH;return;} else if (type == LexicalUnits.IDENTIFIER) {type=LexicalUnits.NAMESPACE_QUALIFIED;return;}throw new ParseException("character",new Object[]{new Character((char)current)},reader.getLine(),reader.getColumn());case '~':nextChar();if (current == '=') {nextChar();type=LexicalUnits.INCLUDES;return;}throw new ParseException("character",new Object[]{new Character((char)current)},reader.getLine(),reader.getColumn());case '#':nextChar();if (ScannerUtilities.isCSSNameCharacter((char)current)) {start=position - 1;do {nextChar();while (current == '\\') {nextChar();escape();}} while (current != -1 && ScannerUtilities.isCSSNameCharacter((char)current));type=LexicalUnits.HASH;return;}throw new ParseException("character",new Object[]{new Character((char)current)},reader.getLine(),reader.getColumn());case '@':nextChar();switch (current) {case 'c':case 'C':start=position - 1;if (isEqualIgnoreCase(nextChar(),'h') && isEqualIgnoreCase(nextChar(),'a') && isEqualIgnoreCase(nextChar(),'r')&& isEqualIgnoreCase(nextChar(),'s')&& isEqualIgnoreCase(nextChar(),'e')&& isEqualIgnoreCase(nextChar(),'t')) {nextChar();type=LexicalUnits.CHARSET_SYMBOL;return;}break;case 'f':case 'F':start=position - 1;if (isEqualIgnoreCase(nextChar(),'o') && isEqualIgnoreCase(nextChar(),'n') && isEqualIgnoreCase(nextChar(),'t')&& isEqualIgnoreCase(nextChar(),'-')&& isEqualIgnoreCase(nextChar(),'f')&& isEqualIgnoreCase(nextChar(),'a')&& isEqualIgnoreCase(nextChar(),'c')&& isEqualIgnoreCase(nextChar(),'e')) {nextChar();type=LexicalUnits.FONT_FACE_SYMBOL;return;}break;case 'i':case 'I':start=position - 1;if (isEqualIgnoreCase(nextChar(),'m') && isEqualIgnoreCase(nextChar(),'p') && isEqualIgnoreCase(nextChar(),'o')&& isEqualIgnoreCase(nextChar(),'r')&& isEqualIgnoreCase(nextChar(),'t')) {nextChar();type=LexicalUnits.IMPORT_SYMBOL;return;}break;case 'm':case 'M':start=position - 1;if (isEqualIgnoreCase(nextChar(),'e') && isEqualIgnoreCase(nextChar(),'d') && isEqualIgnoreCase(nextChar(),'i')&& isEqualIgnoreCase(nextChar(),'a')) {nextChar();type=LexicalUnits.MEDIA_SYMBOL;return;}break;case 'n':case 'N':start=position - 1;if (isEqualIgnoreCase(nextChar(),'a') && isEqualIgnoreCase(nextChar(),'m') && isEqualIgnoreCase(nextChar(),'e')&& isEqualIgnoreCase(nextChar(),'s')&& isEqualIgnoreCase(nextChar(),'p')&& isEqualIgnoreCase(nextChar(),'a')&& isEqualIgnoreCase(nextChar(),'c')&& isEqualIgnoreCase(nextChar(),'e')) {nextChar();type=LexicalUnits.NAMESPACE;return;}break;case 'p':case 'P':start=position - 1;if (isEqualIgnoreCase(nextChar(),'a') && isEqualIgnoreCase(nextChar(),'g') && isEqualIgnoreCase(nextChar(),'e')) {nextChar();type=LexicalUnits.PAGE_SYMBOL;return;}break;default :if (!ScannerUtilities.isCSSIdentifierStartCharacter((char)current)) {throw new ParseException("identifier.character",new Object[]{new Character((char)current)},reader.getLine(),reader.getColumn());}start=position - 1;}nmCharSequence();type=LexicalUnits.AT_KEYWORD;return;case '!':do {nextChar();} while (current != -1 && ScannerUtilities.isCSSSpace((char)current));if (isEqualIgnoreCase(current,'i') && isEqualIgnoreCase(nextChar(),'m') && isEqualIgnoreCase(nextChar(),'p')&& isEqualIgnoreCase(nextChar(),'o')&& isEqualIgnoreCase(nextChar(),'r')&& isEqualIgnoreCase(nextChar(),'t')&& isEqualIgnoreCase(nextChar(),'a')&& isEqualIgnoreCase(nextChar(),'n')&& isEqualIgnoreCase(nextChar(),'t')) {nextChar();type=LexicalUnits.IMPORTANT_SYMBOL;return;}if (current == -1) {throw new ParseException("eof",reader.getLine(),reader.getColumn());} else {throw new ParseException("character",new Object[]{new Character((char)current)},reader.getLine(),reader.getColumn());}case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':type=number();return;case '.':switch (nextChar()) {case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':type=dotNumber();return;default :type=LexicalUnits.DOT;return;}case 'u':case 'U':nextChar();switch (current) {case '+':boolean impliedRange=false;do {nextChar();if (current == '?') impliedRange=true;} while (current != -1 && (current == '?' || ScannerUtilities.isCSSHexadecimalCharacter((char)current)));if (current == '-' && !impliedRange) {do {nextChar();if (current == 'U') {nextChar();if (current == '+') {nextChar();}}} while (current != -1 && (ScannerUtilities.isCSSHexadecimalCharacter((char)current)));}switch (current) {case ',':case ';':case '}':case '/':break;default :if (!ScannerUtilities.isCSSSpace((char)current)) {throw new ParseException("character",new Object[]{new Character((char)current)},reader.getLine(),reader.getColumn());}}type=LexicalUnits.UNICODE_RANGE;return;case 'r':case 'R':nextChar();switch (current) {case 'l':case 'L':nextChar();switch (current) {case '(':do {nextChar();} while (current != -1 && ScannerUtilities.isCSSSpace((char)current));switch (current) {case '\'':string1();blankCharacters+=2;while (current != -1 && ScannerUtilities.isCSSSpace((char)current)) {blankCharacters++;nextChar();}if (current == -1) {throw new ParseException("eof",reader.getLine(),reader.getColumn());}if (current != ')') {throw new ParseException("character",new Object[]{new Character((char)current)},reader.getLine(),reader.getColumn());}nextChar();type=LexicalUnits.URI;return;case '"':string2();blankCharacters+=2;while (current != -1 && ScannerUtilities.isCSSSpace((char)current)) {blankCharacters++;nextChar();}if (current == -1) {throw new ParseException("eof",reader.getLine(),reader.getColumn());}if (current != ')') {throw new ParseException("character",new Object[]{new Character((char)current)},reader.getLine(),reader.getColumn());}nextChar();type=LexicalUnits.URI;return;case ')':throw new ParseException("character",new Object[]{new Character((char)current)},reader.getLine(),reader.getColumn());default :if (!ScannerUtilities.isCSSURICharacter((char)current)) {throw new ParseException("character",new Object[]{new Character((char)current)},reader.getLine(),reader.getColumn());}start=position - 1;do {nextChar();} while (current != -1 && ScannerUtilities.isCSSURICharacter((char)current));blankCharacters++;while (current != -1 && ScannerUtilities.isCSSSpace((char)current)) {blankCharacters++;nextChar();}if (current == -1) {throw new ParseException("eof",reader.getLine(),reader.getColumn());}if (current != ')') {throw new ParseException("character",new Object[]{new Character((char)current)},reader.getLine(),reader.getColumn());}nextChar();type=LexicalUnits.URI;return;}}}}identifierTail();return;default :if (!identifierOrFunction()) {int tmp=current;nextChar();throw new ParseException("identifier.character",new Object[]{new Character((char)tmp)},reader.getLine(),reader.getColumn());}}} catch (IOException e) {throw new ParseException(e);}}  }
class C{  private void moveLowerThumb(){  int thumbMiddle=0;switch (slider.getOrientation()) {case JSlider.VERTICAL:    int halfThumbHeight=thumbRect.height / 2;  int thumbTop=currentMouseY - offset;int trackTop=trackRect.y;int trackBottom=trackRect.y + (trackRect.height - 1);int vMax=yPositionForValue(slider.getValue() + slider.getExtent());if (drawInverted()) {trackBottom=vMax;} else {trackTop=vMax;}thumbTop=Math.max(thumbTop,trackTop - halfThumbHeight);thumbTop=Math.min(thumbTop,trackBottom - halfThumbHeight);setThumbLocation(thumbRect.x,thumbTop);thumbMiddle=thumbTop + halfThumbHeight;slider.setValue(valueForYPosition(thumbMiddle));break;case JSlider.HORIZONTAL:int halfThumbWidth=thumbRect.width / 2;int thumbLeft=currentMouseX - offset;int trackLeft=trackRect.x;int trackRight=trackRect.x + (trackRect.width - 1);int hMax=xPositionForValue(slider.getValue() + slider.getExtent());if (drawInverted()) {trackLeft=hMax;} else {trackRight=hMax;}thumbLeft=Math.max(thumbLeft,trackLeft - halfThumbWidth);thumbLeft=Math.min(thumbLeft,trackRight - halfThumbWidth);setThumbLocation(thumbLeft,thumbRect.y);thumbMiddle=thumbLeft + halfThumbWidth;slider.setValue(valueForXPosition(thumbMiddle));break;default :return;}}  }
class C{  public InstrumentedAlgorithm(Algorithm algorithm,int frequency){  super(algorithm,frequency,FrequencyType.EVALUATIONS);  accumulator=new Accumulator();  collectors=new ArrayList<Collector>();}  }
class C{  public Object X(ExpressionObject<?> object) throws ScopeException {  if (object instanceof Dimension) {    return A((Dimension)object);  } else   if (object instanceof Metric) {    return M((Metric)object);  } else {    throw new ScopeException("invalid object");  }}  }
class C{  public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>();  newVector.addElement(new Option("\tSet fixed number of iterations for LogitBoost","I",1,"-I <iterations>"));  newVector.addElement(new Option("\tUse stopping criterion on training set (instead of\n" + "\tcross-validation)","S",0,"-S"));  newVector.addElement(new Option("\tUse error on probabilities (rmse) instead of\n" + "\tmisclassification error for stopping criterion","P",0,"-P"));  newVector.addElement(new Option("\tSet maximum number of boosting iterations","M",1,"-M <iterations>"));  newVector.addElement(new Option("\tSet parameter for heuristic for early stopping of\n" + "\tLogitBoost.\n" + "\tIf enabled, the minimum is selected greedily, stopping\n"+ "\tif the current minimum has not changed for iter iterations.\n"+ "\tBy default, heuristic is enabled with value 50. Set to\n"+ "\tzero to disable heuristic.","H",1,"-H <iterations>"));  newVector.addElement(new Option("\tSet beta for weight trimming for LogitBoost. Set to 0 for no weight trimming.\n","W",1,"-W <beta>"));  newVector.addElement(new Option("\tThe AIC is used to choose the best iteration (instead of CV or training error).\n","A",0,"-A"));  newVector.addAll(Collections.list(super.listOptions()));  return newVector.elements();}  }
class C{  public boolean acquire(){  int[] stamp=new int[1];  while (true) {    boolean undeployed=usage.get(stamp);    int r=stamp[0];    if (undeployed && r == 0)     return false;    if (usage.compareAndSet(undeployed,undeployed,r,r + 1))     return true;  }}  }
class C{  private Node(){  super();  previous=this;  next=this;}  }
class C{  private void export_corpus(){  writeToFile("corpus",0,"c0","CORPUS","NULL","0",documentId * 2 - 1);  for (int i=1; i < documentId; i++) {    writeToFile("corpus",i,"d" + i,"DOCUMENT","NULL",i * 2 - 1,i * 2);  }}  }
class C{  public static void encode(File source,File target,int wrapAt) throws IOException {  InputStream inputStream=null;  OutputStream outputStream=null;  try {    inputStream=new FileInputStream(source);    outputStream=new FileOutputStream(target);    Base64.encode(inputStream,outputStream,wrapAt);  }  finally {    if (outputStream != null) {      try {        outputStream.close();      } catch (      Throwable t) {        ;      }    }    if (inputStream != null) {      try {        inputStream.close();      } catch (      Throwable t) {        ;      }    }  }}  }
class C{  public Map<String,Object> processInputs(Map<String,Object> inputs,SBPortProcessorCallback portProcessor) throws SBPortProcessorException {  return processValues(inputs,job.getApp().getInputs(),SBInputPort.class,portProcessor);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:10.524 -0500",hash_original_method="C8834FD4CE389B3AEF157EF49CB23721",hash_generated_method="1C6572A0E985A07720BE27AB01F3C5D5") public void ellipsized(int start,int end){  mEllipsizedStart=start;  mEllipsizedCount=end - start;}  }
class C{  public boolean match(LabeledStatement node,Object other){  if (!(other instanceof LabeledStatement)) {    return false;  }  LabeledStatement o=(LabeledStatement)other;  return (safeSubtreeMatch(node.getLabel(),o.getLabel()) && safeSubtreeMatch(node.getBody(),o.getBody()));}  }
class C{  private static void waitFor(SystemProcess process,Stopwatch sw,long timeout,TimeUnit unit,String successFormat,String timeoutFormat) throws InterruptedException, TimeoutException {  if (!process.waitFor(timeout,unit)) {    throw new TimeoutException(String.format(timeoutFormat + " in %d %s",process,timeout,unit.toString().toLowerCase()));  }  long duration=sw.stop().elapsed(TimeUnit.MILLISECONDS);  log.info(successFormat + " in {} ms.",process,duration);}  }
class C{  protected void collectInsertTargets(SqlInsert call,final RexNode sourceRef,final List<String> targetColumnNames,List<RexNode> columnExprs){  final RelOptTable targetTable=getTargetTable(call);  final RelDataType targetRowType=targetTable.getRowType();  SqlNodeList targetColumnList=call.getTargetColumnList();  if (targetColumnList == null) {    targetColumnNames.addAll(targetRowType.getFieldNames());  } else {    for (int i=0; i < targetColumnList.size(); i++) {      SqlIdentifier id=(SqlIdentifier)targetColumnList.get(i);      targetColumnNames.add(id.getSimple());    }  }  for (int i=0; i < targetColumnNames.size(); i++) {    final RexNode expr=rexBuilder.makeFieldAccess(sourceRef,i);    columnExprs.add(expr);  }}  }
class C{  public String objectName(){  return objectName;}  }
class C{  protected boolean isRenderNullValues(){  return true;}  }
class C{  public static String formatMethodCall(Method m,Object... args){  StringBuilder buff=new StringBuilder();  buff.append(m.getName()).append('(');  for (int i=0; i < args.length; i++) {    Object a=args[i];    if (i > 0) {      buff.append(", ");    }    buff.append(a == null ? "null" : a.toString());  }  buff.append(")");  return buff.toString();}  }
class C{  public CertificateVerify(HandshakeIODataStream in,int length) throws IOException {  if (length == 0) {    fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR: incorrect CertificateVerify");  } else {    if (in.readUint16() != length - 2) {      fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR: incorrect CertificateVerify");    }    signedHash=in.read(length - 2);  }  this.length=length;}  }
class C{  public WrappedByteBuffer putAt(int index,byte v){  _checkForWriteAt(index,1);  _buf.put(index,v);  return this;}  }
class C{  public double optDouble(String key,double defaultValue){  try {    return this.getDouble(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  protected void sequence_LegacyOctalIntLiteral(ISerializationContext context,LegacyOctalIntLiteral semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.NUMERIC_LITERAL__VALUE) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.NUMERIC_LITERAL__VALUE));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getLegacyOctalIntLiteralAccess().getValueLEGACY_OCTAL_INTTerminalRuleCall_0(),semanticObject.getValue());  feeder.finish();}  }
class C{  @Override public int hashCode(){  return (first == null ? 0 : first.hashCode()) ^ (second == null ? 0 : second.hashCode());}  }
class C{  public WeakReference(T referent,ReferenceQueue<? super T> q){  super(referent,q);}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'GroupImage' ("+ "'_id' INTEGER PRIMARY KEY ,"+ "'PARENT_ID' INTEGER,"+ "'NAME' TEXT,"+ "'CREATE_DATE' INTEGER);");}  }
class C{  public Node(final Node left,final Node right,final LongArrayBitVector path){  this.left=left;  this.right=right;  this.path=path;  prefixLeft=prefixRight=MAX_PREFIX;}  }
class C{  protected void addRefsPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_Check_refs_feature"),getString("_UI_PropertyDescriptor_description","_UI_Check_refs_feature","_UI_Check_type"),SexecPackage.Literals.CHECK__REFS,true,false,true,null,null,null));}  }
class C{  private IgfsPath igfsPath(File f) throws IgfsException {  String path=f.getAbsolutePath();  if (workDir != null) {    if (!path.startsWith(workDir))     throw new IgfsException("Path is not located in the work directory [workDir=" + workDir + ", path="+ path+ ']');    path=path.substring(workDir.length(),path.length());  }  return new IgfsPath(path);}  }
class C{  public boolean contains(TypeTag tag){  return cache.containsKey(tag);}  }
class C{  protected String metaDataTableNameForIndexes(Table table){  return table.getName();}  }
class C{  public void visitIntInsn(int opcode,int operand){  if (mv != null) {    mv.visitIntInsn(opcode,operand);  }}  }
class C{  public byte[] fromString(String str){  ByteArrayOutputStream bs=new ByteArrayOutputStream();  byte[] raw=str.getBytes();  for (int i=0; i < raw.length; i++) {    char c=(char)raw[i];    if (!Character.isWhitespace(c)) {      c=Character.toUpperCase(c);      bs.write((byte)c);    }  }  if (padding) {    if (bs.size() % 8 != 0)     return null;  } else {    while (bs.size() % 8 != 0)     bs.write('=');  }  byte[] in=bs.toByteArray();  bs.reset();  DataOutputStream ds=new DataOutputStream(bs);  for (int i=0; i < in.length / 8; i++) {    short[] s=new short[8];    int[] t=new int[5];    int padlen=8;    for (int j=0; j < 8; j++) {      char c=(char)in[i * 8 + j];      if (c == '=')       break;      s[j]=(short)alphabet.indexOf(in[i * 8 + j]);      if (s[j] < 0)       return null;      padlen--;    }    int blocklen=paddingToBlockLen(padlen);    if (blocklen < 0)     return null;    t[0]=(s[0] << 3) | s[1] >> 2;    t[1]=((s[1] & 0x03) << 6) | (s[2] << 1) | (s[3] >> 4);    t[2]=((s[3] & 0x0F) << 4) | ((s[4] >> 1) & 0x0F);    t[3]=(s[4] << 7) | (s[5] << 2) | (s[6] >> 3);    t[4]=((s[6] & 0x07) << 5) | s[7];    try {      for (int j=0; j < blocklen; j++)       ds.writeByte((byte)(t[j] & 0xFF));    } catch (    IOException e) {    }  }  return bs.toByteArray();}  }
class C{  @Override public final int hashCode(){  return holder.hashCode();}  }
class C{  public final CC gapBottom(String boundsSize){  ver.setGapAfter(ConstraintParser.parseBoundSize(boundsSize,true,false));  return this;}  }
class C{  public SOMTrainerControlsPanel(final NetworkPanel panel,final SOMTrainer trainer,final SOMNetwork network){  this.panel=panel;  this.trainer=trainer;  this.network=network;  init();}  }
class C{  private int parseContentType(final byte[] b,final int off) throws ParseException {  contentTypeVal_=PrimitivesParser.parseByte(b,off);  if (ContentType.deserialize(contentTypeVal_) == null) {    throw new BadCiphertextException("Invalid content type in ciphertext.");  }  return 1;}  }
class C{  public static JSONObject JsonReadOnly(String url,String bssid,int serial,int taskTimeout,HeaderPair... headers){  int port=EspProxyServerImpl.getInstance().getEspProxyServerPort();  HeaderPair readHeader=new HeaderPair(HEADER_READ_ONLY,"1");  HeaderPair jsonHeader=new HeaderPair(HEADER_PROTO_TYPE,"" + EspProxyTask.M_PROTO_JSON);  HeaderPair serialHeader=new HeaderPair(HEADER_TASK_SERIAL,"" + serial);  HeaderPair timeoutHeader=new HeaderPair(HEADER_TASK_TIMEOUT,"" + taskTimeout);  HeaderPair[] hps=newDstHeaders(headers,readHeader,jsonHeader,serialHeader,timeoutHeader);  return executeHttpRequest(url,port,METHOD_POST,bssid,null,false,hps);}  }
class C{  public void testBug13277() throws Exception {  createTable("testBug13277","(field1 INT NOT NULL PRIMARY KEY AUTO_INCREMENT, field2 VARCHAR(32))");  try {    this.stmt.executeUpdate("INSERT INTO testBug13277 (field2) VALUES ('abcdefg')",Statement.RETURN_GENERATED_KEYS);    this.rs=this.stmt.getGeneratedKeys();    ResultSetMetaData rsmd=this.rs.getMetaData();    checkRsmdForBug13277(rsmd);    this.rs.close();    for (int i=0; i < 5; i++) {      this.stmt.addBatch("INSERT INTO testBug13277 (field2) VALUES ('abcdefg')");    }    this.stmt.executeBatch();    this.rs=this.stmt.getGeneratedKeys();    rsmd=this.rs.getMetaData();    checkRsmdForBug13277(rsmd);    this.rs.close();    this.pstmt=this.conn.prepareStatement("INSERT INTO testBug13277 (field2) VALUES ('abcdefg')",Statement.RETURN_GENERATED_KEYS);    this.pstmt.executeUpdate();    this.rs=this.pstmt.getGeneratedKeys();    rsmd=this.rs.getMetaData();    checkRsmdForBug13277(rsmd);    this.rs.close();    this.pstmt.addBatch();    this.pstmt.addBatch();    this.pstmt.executeUpdate();    this.rs=this.pstmt.getGeneratedKeys();    rsmd=this.rs.getMetaData();    checkRsmdForBug13277(rsmd);    this.rs.close();  }  finally {    if (this.pstmt != null) {      this.pstmt.close();      this.pstmt=null;    }    if (this.rs != null) {      this.rs.close();      this.rs=null;    }  }}  }
class C{  public HttpRoute(HttpHost target,InetAddress local,HttpHost[] proxies,boolean secure,TunnelType tunnelled,LayerType layered){  this(local,target,toChain(proxies),secure,tunnelled,layered);}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == Reaction.class) {switch (derivedFeatureID) {case SGraphPackage.TRANSITION__TRIGGER:      return SGraphPackage.REACTION__TRIGGER;case SGraphPackage.TRANSITION__EFFECT:    return SGraphPackage.REACTION__EFFECT;case SGraphPackage.TRANSITION__PROPERTIES:  return SGraphPackage.REACTION__PROPERTIES;default :return -1;}}if (baseClass == DocumentedElement.class) {switch (derivedFeatureID) {case SGraphPackage.TRANSITION__DOCUMENTATION:return BasePackage.DOCUMENTED_ELEMENT__DOCUMENTATION;default :return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  void clearAssociatedComponents(){  comps=null;}  }
class C{  protected Light createNewSpecificLight(String systemName,String userName){  if (isInsteon(systemName)) {    return new SpecificInsteonLight(systemName,tc,userName);  } else {    return new SpecificX10Light(systemName,tc,userName);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:20.572 -0500",hash_original_method="35D04CBE96754834C212489B2C606D95",hash_generated_method="F5F6A56CFB66A092A4E32CC53D0B5CC7") public boolean isEventForked(String ename){  if (stackLogger.isLoggingEnabled()) {    stackLogger.logDebug("isEventForked: " + ename + " returning "+ this.forkedEvents.contains(ename));  }  return this.forkedEvents.contains(ename);}  }
class C{  @Override public void updateStatus(JobContext jobContext) throws Exception {  DbClient dbClient=jobContext.getDbClient();  try {    if (_status == JobStatus.IN_PROGRESS) {      return;    }    VNXeApiClient vnxeApiClient=getVNXeClient(jobContext);    String opId=getTaskCompleter().getOpId();    StringBuilder logMsgBuilder=new StringBuilder(String.format("Updating status of job %s to %s",opId,_status.name()));    FileShare fsObj=null;    Snapshot snapObj=null;    URI objId=getTaskCompleter().getId();    StorageSystem storageObj=dbClient.queryObject(StorageSystem.class,getStorageSystemUri());    if (_status == JobStatus.SUCCESS) {      _isSuccess=true;      FileExport newExport=exportInfo.getFileExport();      newExport.setMountPoint(ExportUtils.getFileMountPoint(exportInfo.getStoragePort(),exportInfo.getMountPath()));      if (isFile) {        fsObj=dbClient.queryObject(FileShare.class,objId);        updateFSExport(fsObj,dbClient,vnxeApiClient,newExport);      } else {        snapObj=updateSnapExport(dbClient,vnxeApiClient,newExport);        fsObj=dbClient.queryObject(FileShare.class,snapObj.getParent().getURI());      }    } else     if (_status == JobStatus.FAILED) {      logMsgBuilder.append("\n");      logMsgBuilder.append(String.format("Task %s failed to export file system: %s",opId,objId.toString()));    }    _logger.info(logMsgBuilder.toString());    if (isFile) {      fsObj=dbClient.queryObject(FileShare.class,objId);      FileDeviceController.recordFileDeviceOperation(dbClient,OperationTypeEnum.EXPORT_FILE_SYSTEM,_isSuccess,logMsgBuilder.toString(),"",fsObj,storageObj);    } else {      snapObj=dbClient.queryObject(Snapshot.class,objId);      fsObj=dbClient.queryObject(FileShare.class,snapObj.getParent().getURI());      FileDeviceController.recordFileDeviceOperation(dbClient,OperationTypeEnum.EXPORT_FILE_SNAPSHOT,_isSuccess,logMsgBuilder.toString(),"",snapObj,fsObj,storageObj);    }  } catch (  Exception e) {    _logger.error("Caught an exception while trying to updateStatus for VNXeExportFIleSystemJob",e);    setErrorStatus("Encountered an internal error during file system export job status processing : " + e.getMessage());  } finally {    super.updateStatus(jobContext);  }}  }
class C{  void recomposeIncludes(Stylesheet including){  int n=including.getIncludeCount();  if (n > 0) {    if (null == m_includesComposed)     m_includesComposed=new Vector();    for (int i=0; i < n; i++) {      Stylesheet included=including.getInclude(i);      m_includesComposed.addElement(included);      recomposeIncludes(included);    }  }}  }
class C{  public static void signExtend(final long offset,final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions,final OperandSize firstOperandSize,final String firstOperand,final OperandSize resultOperandSize,final String resultOperand,final int size){  final OperandSize dw=OperandSize.DWORD;  String fMask="";  String eightMask="";  final String tmpVar1=environment.getNextVariableString();  final String tmpVar2=environment.getNextVariableString();  if (size == 8) {    fMask=String.valueOf(0xFFL);    eightMask=String.valueOf(0x80L);  } else   if (size == 16) {    fMask=String.valueOf(0xFFFFL);    eightMask=String.valueOf(0x8000L);  } else {    fMask=String.valueOf(0xFFFFFFFFL);    eightMask=String.valueOf(0x80000000L);  }  long baseOffset=offset;  instructions.add(ReilHelpers.createAdd(baseOffset++,firstOperandSize,firstOperand,dw,eightMask,dw,tmpVar1));  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,tmpVar1,dw,fMask,dw,tmpVar2));  instructions.add(ReilHelpers.createSub(baseOffset++,dw,tmpVar2,dw,eightMask,resultOperandSize,resultOperand));}  }
class C{  void mark(){  marked=true;}  }
class C{  public JCStatement Assignment(Symbol v,JCExpression rhs){  return Exec(Assign(Ident(v),rhs).setType(v.type));}  }
class C{  public static void saveSchema(final LmlParser parser,final Appendable appendable){  try {    new Dtd().getDtdSchema(parser,appendable);  } catch (  final IOException exception) {    throw new GdxRuntimeException("Unable to append to file.",exception);  }}  }
class C{  public static boolean contentEquals(Reader input1,Reader input2) throws IOException {  input1=toBufferedReader(input1);  input2=toBufferedReader(input2);  int ch=input1.read();  while (EOF != ch) {    int ch2=input2.read();    if (ch != ch2) {      return false;    }    ch=input1.read();  }  int ch2=input2.read();  return ch2 == EOF;}  }
class C{  public void sendMessage(SimpleString address,ClientMessage message){  if (address == null) {    throw new IllegalArgumentException("sendMessage failure - queueName is required");  } else   if (message == null) {    throw new IllegalArgumentException("sendMessage failure - a ClientMessage is required");  }  getInternalClient();  internalClient.sendMessage(address,message);}  }
class C{  public void append(E e){  if (e == null) {    throw new IllegalArgumentException("Unable to append 'null' to a list.");  }  Node<E> node=new Node<E>(e);  if (head == null) {    head=tail=node;  } else {    tail.next=node;    tail=tail.next;  }  size++;}  }
class C{  public JTaskPane(){  updateUI();}  }
class C{  @RequestMapping(value="/account/change_password",method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<?> changePassword(@RequestBody String password){  if (!checkPasswordLength(password)) {    return new ResponseEntity<>("Incorrect password",HttpStatus.BAD_REQUEST);  }  userService.changePassword(password);  return new ResponseEntity<>(HttpStatus.OK);}  }
class C{  public static <T>Queue<T> asLifoQueue(Deque<T> deque){  return new AsLIFOQueue<T>(deque);}  }
class C{  public String toString(Instances instances){  StringBuffer text=new StringBuffer();  for (int i=0; i < instances.numAttributes(); i++) {    if (m_items[i] != -1) {      text.append(instances.attribute(i).name() + '=');      text.append(instances.attribute(i).value(m_items[i]) + ' ');    }  }  text.append(m_counter);  return text.toString();}  }
class C{  @SuppressWarnings("unused") public void checkDeliveryTime(Message message) throws JMSException {  long creation=message.getJMSTimestamp();  long min=System.currentTimeMillis() - (offline.max + online.min) * (BROKER_RESTART > 0 ? 4 : 1);  if (false && min > creation) {    SimpleDateFormat df=new SimpleDateFormat("HH:mm:ss.SSS");    exit("" + this + ".checkDeliveryTime failed. Message time: "+ df.format(new Date(creation))+ ", min: "+ df.format(new Date(min))+ "\r\n"+ message);  }}  }
class C{  public void prepareMatrixOffset(boolean inverted){  mMatrixOffset.reset();  if (!inverted)   mMatrixOffset.postTranslate(mViewPortHandler.offsetLeft(),mViewPortHandler.getChartHeight() - mViewPortHandler.offsetBottom()); else {    mMatrixOffset.setTranslate(mViewPortHandler.offsetLeft(),-mViewPortHandler.offsetTop());    mMatrixOffset.postScale(1.0f,-1.0f);  }}  }
class C{  public void addStyleListener(StyleListener l){  if (listeners == null) {    listeners=new EventDispatcher();  }  listeners.addListener(l);}  }
class C{  public void print(String string){  if (!verbose)   return;  if (out != null)   out.println(string); else   System.err.println(string);}  }
class C{  @Override protected void checkCompatibility(ExampleSet exampleSet) throws OperatorException {}  }
class C{  public SimpleMergedSegmentWarmer(InfoStream infoStream){  this.infoStream=infoStream;}  }
class C{  @Override protected final Object clone(){  return this;}  }
class C{  public PlatformJavaObjectFactory factory(GridKernalContext ctx){  Object res;switch (factoryTyp) {case TYP_DEFAULT:    res=new PlatformDefaultJavaObjectFactory();  break;case TYP_USER:res=PlatformUtils.createJavaObject(clsName);break;default :throw new IgniteException("Unsupported Java object factory type: " + factoryTyp);}if (res instanceof PlatformJavaObjectFactoryEx) ((PlatformJavaObjectFactoryEx)res).initialize(payload,props); else {PlatformUtils.initializeJavaObject(res,clsName,props,ctx);if (!(res instanceof PlatformJavaObjectFactory)) res=new PlatformJavaObjectSingletonFactory<>(res);}return (PlatformJavaObjectFactory)res;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:03.586 -0500",hash_original_method="F8B592BECD63B81B7040E19C27BB214C",hash_generated_method="FA02E7F418AA98558E4D9BFA87F69268") public static Uri addMessage(ContentResolver resolver,String address,String body,String subject,Long date,boolean deliveryReport,long threadId){  return addMessageToUri(resolver,CONTENT_URI,address,body,subject,date,true,deliveryReport,threadId);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:01.796 -0500",hash_original_method="53C2DF882AFDD7A7897768491F6FD437",hash_generated_method="DBCE59F40D10F7323AA9FD03BBF4D83A") private int nativeGetNumOfRights(){  return getTaintInt();}  }
class C{  public void send(UUID nodeId,GridCacheMessage msg,byte plc) throws IgniteCheckedException {  ClusterNode n=cctx.discovery().node(nodeId);  if (n == null)   throw new ClusterTopologyCheckedException("Failed to send message because node left grid [nodeId=" + nodeId + ", msg="+ msg+ ']');  send(n,msg,plc);}  }
class C{  public static <T>Supplier<T> wrap(Supplier<T> w){  TaskContext c=current();  if (c != null) {    return null;  }  return w;}  }
class C{  public void addProjectMethod(final ProjectMethod method){  readWriteLock.writeLock().lock();  try {    availableMethods.add(method);  }  finally {    readWriteLock.writeLock().unlock();  }}  }
class C{  public void lockUdocsExecuteLogic(ActionMapping mappings,ActionForm form,HttpServletRequest request,HttpServletResponse response){  RelacionEntregaVO relacionEntrega=(RelacionEntregaVO)getFromTemporalSession(request,TransferenciasConstants.RELACION_KEY);  String[] udocsToLock=((UnidadDocumentalForm)form).getSelectedUdoc();  try {    if (udocsToLock != null) {      ServiceRepository services=ServiceRepository.getInstance(ServiceClient.create(getAppUser(request)));      GestionRelacionesEntregaBI relacionesBI=services.lookupGestionRelacionesBI();      relacionesBI.lockUnidadesDocumentales(relacionEntrega,udocsToLock);    }    goLastClientExecuteLogic(mappings,form,request,response);  } catch (  ActionNotAllowedException anae) {    guardarError(request,anae);    goLastClientExecuteLogic(mappings,form,request,response);  }}  }
class C{  static boolean zoomToAddress(final ZyGraph graph,final IAddress address,final boolean animate,final NaviNode node,final INaviCodeNode codeNode){  for (  final INaviInstruction instruction : codeNode.getInstructions()) {    if (instruction.getAddress().equals(address)) {      uncollapseParents(codeNode);      if (!node.isVisible()) {        graph.showNode(node,true);      }      ZoomFunctions.zoomToNode(graph,node,CCodeNodeHelpers.instructionToLine(codeNode,instruction),animate);      return true;    }  }  return false;}  }
class C{  public Row next(){  Row r=list.get(index++);  return r;}  }
class C{  public static WelcomeTitleFragment newInstance(@DrawableRes int resId,String title,boolean showParallaxAnim,@Nullable String typefacePath){  WelcomeTitleFragment fragment=new WelcomeTitleFragment();  Bundle args=new Bundle();  args.putInt(ARG_DRAWABLE_ID,resId);  args.putString(ARG_TITLE,title);  args.putBoolean(ARG_SHOW_ANIM,showParallaxAnim);  args.putString(ARG_TYPEFACE_PATH,typefacePath);  fragment.setArguments(args);  return fragment;}  }
class C{  public boolean isHorizontal(){  return FloatingPoint.same(start.getY(),end.getY());}  }
class C{  public static void init(final Context context){  init(context,null,0);}  }
class C{  public void load(Element element,Object o){  log.error("Unexpected call of load(Element, Object)");}  }
class C{  public final Enumeration<JIPTerm> parseStream(final PushbackLineNumberInputStream ins,final String streamName,final String encoding) throws UnsupportedEncodingException {  return new TermEnumerator(ins,m_opManager,streamName);}  }
class C{  public final void trimToSize(int trimToSize){synchronized (mLock) {    unsafeTrimToSize(trimToSize);  }}  }
class C{  public void onPlayerStopped(){  if (LogUtils.isActive) {    Log.d(LOGTAG,"onPlayerStopped");  }}  }
class C{  public void add(BasePlan basePlan){  this.basePlan=basePlan;  notifyBinderDataSetChanged();}  }
class C{  public static void log(IStatus status){  GWTPlugin.getDefault().getLog().log(status);}  }
class C{  protected Rectangle layoutRect(Offset offset,Offset hotspot,Dimension size,Object layoutMode,OrderedSymbol osym){  int x=0;  int y=0;  if (offset != null) {    Rectangle rect;    if (LAYOUT_ABSOLUTE.equals(layoutMode))     rect=this.iconRect; else     if (LAYOUT_RELATIVE.equals(layoutMode))     rect=osym.layoutRect; else     rect=this.iconRect;    Point2D p=offset.computeOffset(rect.getWidth(),rect.getHeight(),null,null);    x+=rect.getX() + p.getX();    y+=rect.getY() + p.getY();  }  if (hotspot != null) {    Point2D p=hotspot.computeOffset(size.getWidth(),size.getHeight(),null,null);    x-=p.getX();    y-=p.getY();  }  Rectangle rect=new Rectangle(x,y,size.width,size.height);  if (osym.screenRect != null)   osym.screenRect.add(rect); else   osym.screenRect=new Rectangle(rect);  if (LAYOUT_ABSOLUTE.equals(layoutMode) || LAYOUT_RELATIVE.equals(layoutMode)) {    if (osym.layoutRect != null)     osym.layoutRect.add(rect); else     osym.layoutRect=new Rectangle(rect);  }  return rect;}  }
class C{  public IgniteCheckedException(String msg){  super(msg);}  }
class C{  public static void add(List<String> options,char option,float value){  add(options,"" + option,value);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String setting=getString(stack);  sage.plugin.PluginWrapper pluggy=getPlugin(stack);  if (pluggy != null) {    if (pluggy.isServerPluginInfo()) {      stack.push(pluggy);      stack.push(setting);      return makeNetworkedCall(stack);    }    SageTVPlugin realPlug=sage.plugin.CorePluginManager.getInstance().getRealPlugin(pluggy.getId());    if (realPlug != null) {      if (stack.getUIMgr() != null) {        Catbert.uiContextThreadNames.set(stack.getUIMgr().getLocalUIClientName());      }      return realPlug.getConfigValue(setting);    }  }  return "";}  }
class C{  public JSONArray(String source) throws JSONException {  this(new JSONTokener(source));}  }
class C{  void regionToCenterPoint(int cellX,int cellY,int spanX,int spanY,int[] result){  final int hStartPadding=getPaddingLeft();  final int vStartPadding=getPaddingTop();  result[0]=hStartPadding + cellX * (mCellWidth + mWidthGap) + (spanX * mCellWidth + (spanX - 1) * mWidthGap) / 2;  result[1]=vStartPadding + cellY * (mCellHeight + mHeightGap) + (spanY * mCellHeight + (spanY - 1) * mHeightGap) / 2;}  }
class C{  public ToolTipAnnotation(String text){  super(text,new Point(0,0));  this.initializeAttributes();}  }
class C{  @Override public boolean renameFile(String path,String newFileName){  String parent=new File(path).getParent();  String newPath=parent + File.separator + newFileName;  return moveFile(path,newPath);}  }
class C{  protected void writeProlog() throws IOException {  super.writeProlog();  writeDocType();}  }
class C{  @Override protected void initialize(){  List<String> patterns;  super.initialize();  m_Patterns=new ArrayList<Pattern>();  patterns=read();  for (  String pattern : patterns) {    m_Patterns.add(Pattern.compile(pattern));  }}  }
class C{  public static String computeSignature(UserDetails userDetails,long expires){  StringBuilder signatureBuilder=new StringBuilder();  signatureBuilder.append(userDetails.getUsername());  signatureBuilder.append(":");  signatureBuilder.append(expires);  signatureBuilder.append(":");  signatureBuilder.append(userDetails.getPassword());  signatureBuilder.append(":");  signatureBuilder.append(TokenUtils.MAGIC_KEY);  MessageDigest digest;  try {    digest=MessageDigest.getInstance("MD5");  } catch (  NoSuchAlgorithmException e) {    throw new IllegalStateException("No MD5 algorithm found on platform!");  }  return new String(Sha512DigestUtils.shaHex(digest.digest(signatureBuilder.toString().getBytes())));}  }
class C{  public ObjectRepository createRepository(ObjectRepositoryConfig config,Repository delegate) throws RepositoryConfigException, RepositoryException {  ObjectRepository repo=getRepository(config,delegate.getValueFactory());  repo.setDelegate(delegate);  return repo;}  }
class C{  public boolean isExpired(DrawContext dc){  if (this.expired)   return true;  long now=dc != null ? dc.getFrameTimeStamp() : System.currentTimeMillis();  if (now >= this.expiryTime)   return true;  return false;}  }
class C{  @Override public boolean checkPassword(CharSequence password){  checkNotNull(password);  checkState(keyCrypter != null,"Key chain not encrypted");  return checkAESKey(keyCrypter.deriveKey(password));}  }
class C{  protected void removeHighlight(Highlight highlight,boolean isForced){  if (decorators == null) {    return;  }  for (  HighlightDecorator decorator : decorators) {    decorator.remove(highlight,true);  }  for (  HighlightDecorator decorator : dropSquareDecorators) {    if (decorator != null) {      decorator.remove(highlight,true);    }  }}  }
class C{  public void executeIndexFirst(){  try {    executeMutatorWithRetry(_indexMutator);    executeMutatorWithRetry(_recordMutator);  } catch (  ConnectionException e) {    throw DatabaseException.retryables.connectionFailed(e);  }}  }
class C{  public boolean isFinished(){  return mScroller.isFinished();}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public int processBlock(byte[] in,int inOff,byte[] out,int outOff) throws DataLengthException, IllegalStateException {  return (encrypting) ? encryptBlock(in,inOff,out,outOff) : decryptBlock(in,inOff,out,outOff);}  }
class C{  private void release0(long ptr,long size,AtomicLong cnt){  if (ptr != 0) {    if (SAFE_RELEASE)     fill(ptr,size,(byte)0xAB);    GridUnsafe.freeMemory(ptr);    cnt.addAndGet(-size);    if (lsnr != null)     lsnr.onEvent(RELEASE);  }}  }
class C{  protected int listGetTopIndex(){  return -1;}  }
class C{  private static boolean dontUseMe_isInNonEmptyRange_(int min,int max,int a){  if (ASSERTIONS)   assert (min <= max);  return (Integer.MIN_VALUE + (a - min) <= Integer.MIN_VALUE + (max - min));}  }
class C{  public String name(){  return this.name;}  }
class C{  @SuppressWarnings("unused") private void createLinesForSearch(final int count,int[] items,final int mode,final boolean breakOnSpace,final boolean addMultiplespaceXMLTag,final boolean isSearch) throws PdfException {  String separator;  final boolean debug=false;  final float[] f_x1;  final float[] f_x2;  final float[] f_y1;  final float[] f_y2;  if (mode == PdfData.HORIZONTAL_RIGHT_TO_LEFT || mode == PdfData.VERTICAL_TOP_TO_BOTTOM) {    items=reverse(items);  }switch (mode) {case PdfData.HORIZONTAL_LEFT_TO_RIGHT:    f_x1=this.f_x1;  f_x2=this.f_x2;f_y1=this.f_y1;f_y2=this.f_y2;break;case PdfData.HORIZONTAL_RIGHT_TO_LEFT:f_x2=this.f_x1;f_x1=this.f_x2;f_y1=this.f_y1;f_y2=this.f_y2;break;case PdfData.VERTICAL_BOTTOM_TO_TOP:f_x1=this.f_y2;f_x2=this.f_y1;f_y1=this.f_x2;f_y2=this.f_x1;break;case PdfData.VERTICAL_TOP_TO_BOTTOM:f_x1=this.f_y2;f_x2=this.f_y1;f_y2=this.f_x1;f_y1=this.f_x2;break;default :throw new PdfException("Illegal value " + mode + "for currentWritingMode");}for (int j=0; j < count; j++) {int id=-1, i;final int c=items[j];if (!isUsed[c] && this.writingMode[c] == mode) {if (debug) {System.out.println("Look for match with " + removeHiddenMarkers(content[c].toString()));}for (int j2=0; j2 < count && id == -1; j2++) {i=items[j2];if (!isUsed[i] && c != i && this.writingMode[c] == this.writingMode[i] && f_x1[i] != f_x2[i]) {float mx=f_x1[c] + ((f_x2[c] - f_x1[c]) / 2);float my=f_y2[c] + ((f_y1[c] - f_y2[c]) / 2);float cx=f_x1[i] + ((f_x2[i] - f_x1[i]) / 2);float cy=f_y2[i] + ((f_y1[i] - f_y2[i]) / 2);float smallestHeight=(f_y1[c] - f_y2[c]);float fontDifference=(f_y1[i] - f_y2[i]) - smallestHeight;if (fontDifference < 0) {smallestHeight=(f_y1[i] - f_y2[i]);}if (Math.abs(fontDifference) < smallestHeight * 2) {if (Math.abs(my - cy) < (smallestHeight * 0.5)) {if (mx < cx) {float distance=f_x1[i] - f_x2[c];if (distance <= smallestHeight / 2) {id=i;}}}}if (id != -1) {float possSpace=f_x1[id] - f_x2[c];if (mode == PdfData.HORIZONTAL_RIGHT_TO_LEFT || mode == PdfData.VERTICAL_TOP_TO_BOTTOM) {possSpace=-possSpace;}separator=isGapASpace(c,id,possSpace,addMultiplespaceXMLTag,mode);if ((breakOnSpace) && (hadSpace != null) && ((hadSpace[c]) || (separator.startsWith(" ")))) {break;}if (debug) {System.out.println("Merge items " + c + " & "+ id);System.out.println("c  : " + removeHiddenMarkers(content[c].toString()));System.out.println("id : " + removeHiddenMarkers(content[id].toString()));System.out.println("");}if ((isSearch && (i != c && ((f_x1[i] > f_x1[c] && mode != PdfData.VERTICAL_TOP_TO_BOTTOM) || (f_x1[i] < f_x1[c] && mode == PdfData.VERTICAL_TOP_TO_BOTTOM) && writingMode[c] == mode))) || (!isSearch && (i != c && ((f_x1[i] > f_x1[c] && mode != PdfData.VERTICAL_TOP_TO_BOTTOM) || f_x1[i] < f_x1[c] && mode == PdfData.VERTICAL_TOP_TO_BOTTOM && writingMode[c] == mode)))) {merge(c,id,separator,true);}id=-1;}}}}}}  }
class C{  private void resetNetworkVisited(){  for (  Node node : this.network.getNodes().values()) {    DijkstraNodeData data=getData(node);    data.resetVisited();  }}  }
class C{  public T fetch(Object key){  return get(key);}  }
class C{  @Override public List<AppEntry> loadInBackground(){  List<ApplicationInfo> apps=mPm.getInstalledApplications(PackageManager.GET_UNINSTALLED_PACKAGES | PackageManager.GET_DISABLED_COMPONENTS);  if (apps == null) {    apps=new ArrayList<ApplicationInfo>();  }  final Context context=getContext();  List<AppEntry> entries=new ArrayList<AppEntry>(apps.size());  for (int i=0; i < apps.size(); i++) {    AppEntry entry=new AppEntry(this,apps.get(i));    entry.loadLabel(context);    entries.add(entry);  }  Collections.sort(entries,ALPHA_COMPARATOR);  return entries;}  }
class C{  public boolean hasOrdering(Object preferred,Object other){  DigraphNode preferredPONode=(DigraphNode)poNodes.get(preferred);  DigraphNode otherPONode=(DigraphNode)poNodes.get(other);  return preferredPONode.hasEdge(otherPONode);}  }
class C{  public void disallowOut(){  Rectangle r=new Rectangle(0,0,Integer.MAX_VALUE,Integer.MAX_VALUE);  leavingBarriers.add(r);}  }
class C{  public SelectAllWeightsAction(final NetworkPanel networkPanel){  super("Select All Weights");  if (networkPanel == null) {    throw new IllegalArgumentException("networkPanel must not be null");  }  this.networkPanel=networkPanel;  networkPanel.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke('w'),this);  putValue(SHORT_DESCRIPTION,"Select all weights (w)");  networkPanel.getActionMap().put(this,this);}  }
class C{  public Or(){  super("or",2);}  }
class C{  public void generateJava(@NonNull RaveIR raveIR) throws IOException {  List<MethodSpec> allMethods=generateSubtypeValidationMethods(raveIR);  allMethods.add(generateConstructor(raveIR));  String className=raveIR.getSimpleName() + GENERATED_CLASS_POSTFIX;  TypeSpec.Builder builder=TypeSpec.classBuilder(className);  builder.superclass(BaseValidator.class).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addMethods(allMethods);  TypeSpec validatorClass=builder.build();  JavaFile.builder(raveIR.getPackageName(),validatorClass).build().writeTo(filer);}  }
class C{  public void addIdentity(Identity identity) throws KeyManagementException {}  }
class C{  public int tetradScore(int v1,int v2,int v3,int v4){  int count=0;  double p_12=CorrelationMatrix.getValue(v1,v2);  double p_13=CorrelationMatrix.getValue(v1,v3);  double p_14=CorrelationMatrix.getValue(v1,v4);  double p_23=CorrelationMatrix.getValue(v2,v3);  double p_24=CorrelationMatrix.getValue(v2,v4);  double p_34=CorrelationMatrix.getValue(v3,v4);  for (int i=0; i < 3; i++) {    bvalues[i]=false;  }  if (Math.abs(p_12 * p_34 - p_13 * p_24) < epsilon) {    count++;    bvalues[0]=true;  }  if (Math.abs(p_12 * p_34 - p_14 * p_23) < epsilon) {    count++;    bvalues[1]=true;  }  if (Math.abs(p_13 * p_24 - p_14 * p_23) < epsilon) {    count++;    bvalues[2]=true;  }  return count;}  }
class C{  public IgniteThreadPoolExecutor(int corePoolSize,int maxPoolSize,long keepAliveTime,BlockingQueue<Runnable> workQ,ThreadFactory threadFactory,@Nullable RejectedExecutionHandler hnd){  super(corePoolSize,maxPoolSize,keepAliveTime,TimeUnit.MILLISECONDS,workQ,threadFactory,hnd == null ? new AbortPolicy() : hnd);}  }
class C{  public ProviderMismatchException(String msg){  super(msg);}  }
class C{  public static Headers of(String... namesAndValues){  if (namesAndValues == null || namesAndValues.length % 2 != 0) {    throw new IllegalArgumentException("Expected alternating header names and values");  }  namesAndValues=namesAndValues.clone();  for (int i=0; i < namesAndValues.length; i++) {    if (namesAndValues[i] == null)     throw new IllegalArgumentException("Headers cannot be null");    namesAndValues[i]=namesAndValues[i].trim();  }  for (int i=0; i < namesAndValues.length; i+=2) {    String name=namesAndValues[i];    String value=namesAndValues[i + 1];    if (name.length() == 0 || name.indexOf('\0') != -1 || value.indexOf('\0') != -1) {      throw new IllegalArgumentException("Unexpected header: " + name + ": "+ value);    }  }  return new Headers(namesAndValues);}  }
class C{  @SuppressWarnings("rawtypes") public RegexBOp(final IValueExpression<? extends IV> var,final IValueExpression<? extends IV> pattern,final IValueExpression<? extends IV> flags){  this(new BOp[]{var,pattern,flags},anns(pattern,flags));}  }
class C{  @Override public ClearGraph visit(final ASTClear node,final Object data) throws VisitorException {  final ClearGraph op=new ClearGraph();  if (node.isSilent())   op.setSilent(true);  final ASTGraphRefAll graphRef=node.jjtGetChild(ASTGraphRefAll.class);  if (graphRef.jjtGetNumChildren() > 0) {    final TermNode targetGraph=(TermNode)graphRef.jjtGetChild(0).jjtAccept(this,data);    if (targetGraph instanceof ConstantNode) {      op.setTargetGraph((ConstantNode)targetGraph);    } else {      op.setTargetSolutionSet(targetGraph.getValueExpression().getName());    }  } else {    if (graphRef.isDefault()) {      op.setScope(Scope.DEFAULT_CONTEXTS);    } else     if (graphRef.isNamed()) {      op.setScope(Scope.NAMED_CONTEXTS);    }    if (graphRef.isAllGraphs()) {      op.setAllGraphs(true);    }    if (graphRef.isAllSolutions()) {      op.setAllSolutionSets(true);    }  }  return op;}  }
class C{  public static String toString(byte b){  byte[] ba=new byte[1];  ba[0]=b;  return new String(ba);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private void showRelevantViews(final TraceList trace) throws CouldntLoadDataException {  final IFilledList<UnrelocatedAddress> addresses=new FilledList<UnrelocatedAddress>();  for (  final ITraceEvent traceEvent : trace) {    addresses.add(traceEvent.getOffset().getAddress());  }  final List<INaviView> views=m_container.getViewsWithAddresses(addresses,false);  if (m_container instanceof CProjectContainer) {    for (    final INaviModule module : m_container.getModules()) {      if (module.isLoaded()) {        views.addAll(module.getViewsWithAddresses(addresses,false));      }    }  }  m_model.setViews(views);}  }
class C{  public int[] toArray(){  return Arrays.copyOf(data,size);}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(CONSTRUCT)) {    return;  }  registry.build(ID);  registry.build(UPDATED);  registry.build(TITLE);  registry.build(SUBTITLE);  registry.build(RIGHTS);  registry.build(ICON);  registry.build(LOGO);  ElementCreator builder=registry.build(CONSTRUCT);  builder.addElement(ID);  builder.addElement(UPDATED);  builder.addElement(Category.KEY);  builder.addElement(TITLE);  builder.addElement(SUBTITLE);  builder.addElement(RIGHTS);  builder.addElement(ICON);  builder.addElement(LOGO);  builder.addElement(Link.KEY);  builder.addElement(Author.KEY);  builder.addElement(Contributor.KEY);  builder.addElement(Generator.KEY);  registry.build(KEY);}  }
class C{  public void compactBuffer(){  if (offset != buffer.length) {    byte[] newBuffer=new byte[offset];    System.arraycopy(buffer,0,newBuffer,0,offset);    buffer=newBuffer;  }}  }
class C{  public SDIApplication(){}  }
class C{  private Element extractTokenFromResponse(Node response) throws ParserException, InvalidTokenException {  RequestSecurityTokenResponseType parsedResponse=responseUnmarshaller.parseStsResponse(response);  new SamlTokenValidator().validateTokenType(parsedResponse);  return (Element)parsedResponse.getRequestedSecurityToken().getAny();}  }
class C{  public MDesktop(Properties ctx){  m_ctx=ctx;}  }
class C{  public ExcC14NParameterSpec(){  preList=Collections.emptyList();}  }
class C{  public boolean addLoadName(String load){  if (_loadList.contains(load)) {    return false;  }  _loadList.add(load);  log.debug("train (" + getName() + ") add car load "+ load);  setDirtyAndFirePropertyChange(LOADS_CHANGED_PROPERTY,_loadList.size() - 1,_loadList.size());  return true;}  }
class C{  public boolean hasPermission(String right){  Arrays.sort(permissions);  if (Arrays.binarySearch(permissions,right) >= 0 || Arrays.binarySearch(permissions,AppPermissions.ADMINISTRACION_TOTAL_SISTEMA) >= 0)   return true;  return false;}  }
class C{  private Map<UUID,int[]> reducers(Collection<ClusterNode> top,Map<UUID,Collection<HadoopInputSplit>> mappers,int reducerCnt){  int totalWeight=0;  List<WeightedNode> nodes=new ArrayList<>(top.size());  for (  ClusterNode node : top) {    Collection<HadoopInputSplit> split=mappers.get(node.id());    int weight=reducerNodeWeight(node,split != null ? split.size() : 0);    nodes.add(new WeightedNode(node.id(),weight,weight));    totalWeight+=weight;  }  int totalAdjustedWeight=0;  for (  WeightedNode node : nodes) {    node.floatWeight=((float)node.weight * reducerCnt) / totalWeight;    node.weight=Math.round(node.floatWeight);    totalAdjustedWeight+=node.weight;  }  Collections.sort(nodes);  if (totalAdjustedWeight > reducerCnt) {    ListIterator<WeightedNode> iter=nodes.listIterator(nodes.size() - 1);    while (totalAdjustedWeight != reducerCnt) {      if (!iter.hasPrevious())       iter=nodes.listIterator(nodes.size() - 1);      WeightedNode node=iter.previous();      if (node.weight > 0) {        node.weight-=1;        totalAdjustedWeight--;      }    }  } else   if (totalAdjustedWeight < reducerCnt) {    ListIterator<WeightedNode> iter=nodes.listIterator(0);    while (totalAdjustedWeight != reducerCnt) {      if (!iter.hasNext())       iter=nodes.listIterator(0);      WeightedNode node=iter.next();      if (node.floatWeight > 0.0f) {        node.weight+=1;        totalAdjustedWeight++;      }    }  }  int idx=0;  Map<UUID,int[]> reducers=new HashMap<>(nodes.size(),1.0f);  for (  WeightedNode node : nodes) {    if (node.weight > 0) {      int[] arr=new int[node.weight];      for (int i=0; i < arr.length; i++)       arr[i]=idx++;      reducers.put(node.nodeId,arr);    }  }  return reducers;}  }
class C{  public int size(){  return (tail - head) & (elements.length - 1);}  }
class C{  public static boolean isJWSCompactRepStornoReceipt(String jwsCompactRepresentation){  return isQRCodeRepStornoReceipt(CashBoxUtils.getQRCodeRepresentationFromJWSCompactRepresentation(jwsCompactRepresentation));}  }
class C{  public static SharedStorage load(WorldDataBase<?> worldStorage,NBTTagCompound nbt,boolean packet){  try {    ResourceLocation type=new ResourceLocation(nbt.getString("type"));    UUID uuid=nbt.getUniqueId("uuid");    Class<? extends SharedStorage> storageClass=SharedStorage.getStorageType(type);    if (storageClass == null)     throw new Exception("Shared storage type not mapped");    Constructor<? extends SharedStorage> ctor=storageClass.getConstructor(WorldDataBase.class,UUID.class);    SharedStorage storage=ctor.newInstance(worldStorage,uuid);    if (packet) {      storage.readFromPacketNBT(nbt.getCompoundTag("data"));    } else {      storage.readFromNBT(nbt.getCompoundTag("data"));    }    return storage;  } catch (  Exception ex) {    throw new RuntimeException(ex);  }}  }
class C{  protected void inspectAndReplaceCalls(Chain<Unit> units,AssignStmt parent,InvokeExpr expr,HashMap<String,RString> stringNameToRString,HashMap<String,RStringArray> stringArrayNameToRStringArray){  Collection<SootMethod> targets=PTABridge.v().getTargetsInsNoContext(parent);  for (  SootMethod target : targets) {    boolean replaced=false;    if (((target.getDeclaringClass().toString().equals("android.content.Context")) || (target.getDeclaringClass().toString().equals("android.content.res.Resources"))) && (target.getName().equals("getString") || target.getName().equals("getText"))) {      if (expr.getArgCount() == 1) {        Value arg=expr.getArg(0);        if (arg instanceof IntConstant) {          Integer stringId=new Integer(((IntConstant)arg).value);          String stringName=stringIdToStringName.get(stringId);          if (stringName != null) {            RString rString=stringNameToRString.get(stringName);            if (rString != null) {              String stringValue=rString.value;              if (stringValue != null) {                logger.info("ResolveStringConstants: replacing {} with {}",stringId,stringValue);                parent.setRightOp(StringConstant.v(stringValue));                replaced=true;              }            }          }        }      }    } else {      if (target.getDeclaringClass().toString().equals("android.content.res.Resources") && target.getName().equals("getStringArray")) {        if (expr.getArgCount() == 1) {          Value arg=expr.getArg(0);          if (arg instanceof IntConstant) {            Integer stringId=new Integer(((IntConstant)arg).value);            String stringArrayName=stringIdToStringName.get(stringId);            if (stringArrayName != null) {              RStringArray rStringArray=stringArrayNameToRStringArray.get(stringArrayName);              if (rStringArray != null) {                List<String> stringArrayValues=rStringArray.value;                if (stringArrayValues != null) {                  logger.info("ResolveStringConstants: replacing {} with {}",stringId,Arrays.toString(stringArrayValues.toArray()));                  ArrayType type=ArrayType.v(RefType.v("java.lang.String"),1);                  NewArrayExpr arrayExpr=Jimple.v().newNewArrayExpr(type,IntConstant.v(stringArrayValues.size()));                  parent.setRightOp(arrayExpr);                  for (int k=0; k < stringArrayValues.size(); ++k) {                    String stringArrayValue=stringArrayValues.get(k);                    ArrayRef arrayRef=Jimple.v().newArrayRef(parent.getLeftOp(),IntConstant.v(k));                    AssignStmt arrayAssignStmt=Jimple.v().newAssignStmt(arrayRef,StringConstant.v(stringArrayValue));                    units.insertAfter(arrayAssignStmt,parent);                    replaced=true;                  }                }              }            }          }        }      }    }    if (replaced)     return;  }}  }
class C{  public OsmNetworkReader(final Network network,final CoordinateTransformation transformation){  this(network,transformation,true);}  }
class C{  public static void println(String message){  if (Options.verbose)   out.println(message);}  }
class C{  public static ReceiveResponse receive(String receivingAddress,String callbackUrl,String apiCode) throws APIException, IOException {  Map<String,String> params=new HashMap<String,String>();  params.put("address",receivingAddress);  params.put("callback",callbackUrl);  params.put("method","create");  if (apiCode != null) {    params.put("api_code",apiCode);  }  String response=HttpClient.getInstance().post("api/receive",params);  JsonParser parser=new JsonParser();  JsonObject obj=parser.parse(response).getAsJsonObject();  return new ReceiveResponse(obj.get("fee_percent").getAsInt(),obj.get("destination").getAsString(),obj.get("input_address").getAsString(),obj.get("callback_url").getAsString());}  }
class C{  public PipedWriter(){}  }
class C{  public GetFieldExpression(Type objectType,int instanceId,ReferenceExpression receiverExpr,String fieldName,Object concreteValue){  super(objectType,instanceId,1 + receiverExpr.getSize(),receiverExpr.containsSymbolicVariable());  this.receiverExpr=receiverExpr;  this.fieldName=fieldName;  this.initializeReference(concreteValue);}  }
class C{  private boolean[][] tetradBasedMarkImpurities(List clustering){  printlnMessage("   (searching for impurities....)");  int relations[][]=new int[numVars][numVars];  for (int i=0; i < numVars; i++) {    for (int j=0; j < numVars; j++) {      if (i == j) {        relations[i][j]=PURE;      } else {        relations[i][j]=UNDEFINED;      }    }  }  for (int i=0; i < clustering.size(); i++) {    int cluster1[]=(int[])clustering.get(i);    if (cluster1.length < 3) {      continue;    }    for (int j=0; j < cluster1.length - 1; j++) {      for (int k=j + 1; k < cluster1.length; k++) {        if (relations[cluster1[j]][cluster1[k]] == UNDEFINED) {          boolean found=false;          for (int q=0; q < cluster1.length && !found; q++) {            if (j == q || k == q) {              continue;            }            for (int l=0; l < clustering.size() && !found; l++) {              int cluster2[]=(int[])clustering.get(l);              for (int w=0; w < cluster2.length && !found; w++) {                if (l == i && (j == w || k == w || q == w)) {                  continue;                }                if (tetradTest.tetradScore3(cluster1[j],cluster1[k],cluster1[q],cluster2[w])) {                  found=true;                  relations[cluster1[j]][cluster1[k]]=relations[cluster1[k]][cluster1[j]]=PURE;                  relations[cluster1[j]][cluster1[q]]=relations[cluster1[q]][cluster1[j]]=PURE;                  relations[cluster1[k]][cluster1[q]]=relations[cluster1[q]][cluster1[k]]=PURE;                }              }            }          }        }      }    }  }  for (int i=0; i < clustering.size(); i++) {    int cluster1[]=(int[])clustering.get(i);    for (int j=0; j < clustering.size(); j++) {      if (i == j) {        continue;      }      int cluster2[]=(int[])clustering.get(j);      for (int v1=0; v1 < cluster1.length; v1++) {        for (int v2=0; v2 < cluster2.length; v2++) {          if (relations[cluster1[v1]][cluster2[v2]] == UNDEFINED) {            boolean found1=false;            if (cluster1.length < 3) {              found1=true;            }            for (int v3=0; v3 < cluster1.length && !found1; v3++) {              if (v3 == v1 || relations[cluster1[v1]][cluster1[v3]] == IMPURE || relations[cluster2[v2]][cluster1[v3]] == IMPURE) {                continue;              }              for (int v4=0; v4 < cluster1.length && !found1; v4++) {                if (v4 == v1 || v4 == v3 || relations[cluster1[v1]][cluster1[v4]] == IMPURE || relations[cluster2[v2]][cluster1[v4]] == IMPURE || relations[cluster1[v3]][cluster1[v4]] == IMPURE) {                  continue;                }                if (tetradTest.tetradScore3(cluster1[v1],cluster2[v2],cluster1[v3],cluster1[v4])) {                  found1=true;                }              }            }            if (!found1) {              continue;            }            boolean found2=false;            if (cluster2.length < 3) {              found2=true;              relations[cluster1[v1]][cluster2[v2]]=relations[cluster2[v2]][cluster1[v1]]=PURE;              continue;            }            for (int v3=0; v3 < cluster2.length && !found2; v3++) {              if (v3 == v2 || relations[cluster1[v1]][cluster2[v3]] == IMPURE || relations[cluster2[v2]][cluster2[v3]] == IMPURE) {                continue;              }              for (int v4=0; v4 < cluster2.length && !found2; v4++) {                if (v4 == v2 || v4 == v3 || relations[cluster1[v1]][cluster2[v4]] == IMPURE || relations[cluster2[v2]][cluster2[v4]] == IMPURE || relations[cluster2[v3]][cluster2[v4]] == IMPURE) {                  continue;                }                if (tetradTest.tetradScore3(cluster1[v1],cluster2[v2],cluster2[v3],cluster2[v4])) {                  found2=true;                  relations[cluster1[v1]][cluster2[v2]]=relations[cluster2[v2]][cluster1[v1]]=PURE;                }              }            }          }        }      }    }  }  boolean impurities[][]=new boolean[numVars][numVars];  for (int i=0; i < numVars; i++) {    for (int j=0; j < numVars; j++) {      if (relations[i][j] == UNDEFINED) {        impurities[i][j]=true;      } else {        impurities[i][j]=false;      }    }  }  return impurities;}  }
class C{  public static DbException convertInvocation(InvocationTargetException te,String message){  Throwable t=te.getTargetException();  if (t instanceof SQLException || t instanceof DbException) {    return convert(t);  }  message=message == null ? t.getMessage() : message + ": " + t.getMessage();  return get(ErrorCode.EXCEPTION_IN_FUNCTION_1,t,message);}  }
class C{  @SideEffectFree public void logp(Level level,@Nullable String sourceClass,@Nullable String sourceMethod,@Nullable String msg,@Nullable Object params[]){  throw new RuntimeException();}  }
class C{  public String toString(){  String ret=new String();  ret+="NeuronNode: (" + this.getGlobalFullBounds().x + ")("+ getGlobalFullBounds().y+ ")\n";  return ret;}  }
class C{  public boolean hasPurchase(String sku){  return mPurchaseMap.containsKey(sku);}  }
class C{  public VersionedValue(VersionedValue other){  if (other.isSetValue()) {    this.value=org.apache.thrift.TBaseHelper.copyBinary(other.value);    ;  }  if (other.isSetVersion()) {    this.version=new VectorClock(other.version);  }}  }
class C{  public void close() throws IOException {  if (!closed) {    if (usesDefaultInflater)     inf.end();    in.close();    closed=true;  }}  }
class C{  static final public int unbinary(String what){  return Integer.parseInt(what,2);}  }
class C{  protected RBM createDBM(int d) throws Exception {  return ((m_N == 1) ? new RBM(this.getOptions()) : new DBM(this.getOptions()));}  }
class C{  public void testBug2855() throws Exception {  try {    this.stmt.executeUpdate("DROP TABLE IF EXISTS testBug2855");    this.stmt.executeUpdate("CREATE TABLE testBug2855 (field1 FLOAT)");    this.stmt.executeUpdate("INSERT INTO testBug2855 VALUES (1)");    this.rs=this.stmt.executeQuery("SELECT * from testBug2855");    assertTrue(this.rs.next());    ResultSetMetaData rsmd=this.rs.getMetaData();    assertTrue(rsmd.getColumnClassName(1).equals(this.rs.getObject(1).getClass().getName()));    assertTrue("java.lang.Float".equals(rsmd.getColumnClassName(1)));  }  finally {    this.stmt.executeUpdate("DROP TABLE IF EXISTS testBug2855");  }}  }
class C{  final public MutableString append(final char a[]){  final int l=a.length;  if (l == 0)   return this;  final int newLength=length() + l;  expand(newLength);  System.arraycopy(a,0,array,newLength - l,l);  hashLength=hashLength < 0 ? -1 : newLength;  return this;}  }
class C{  boolean matchAttributeSelections(HTMLElement element){  if (getTagId() == TAG_CSS_ILLEGAL_SELECTOR) {    return false;  }  if (attributeSelections == null) {    return true;  }  for (Enumeration e=attributeSelections.elements(); e.hasMoreElements(); ) {    AttString attStr=(AttString)e.nextElement();    if (attStr.constraint == AttString.LANG) {      String lang=attStr.value;      String elemLang=getLang(element);      if ((elemLang == null) || ((!lang.equals(elemLang)) && (!elemLang.startsWith(lang + "-")))) {        return false;      }    } else {      String elementVal=element.getAttribute(attStr.attribute);      if (elementVal == null) {        return false;      }      if (attStr.value != null) {switch (attStr.constraint) {case AttString.EQUALS:          if (!elementVal.equals(attStr.value)) {            return false;          }        break;case AttString.BEGINS_WITH:      if ((!elementVal.equals(attStr.value)) && (!elementVal.startsWith(attStr.value + "-"))) {        return false;      }    break;case AttString.CONTAINS_WORD:  String str=" " + elementVal + " ";if (str.indexOf(" " + attStr.value + " ") == -1) {  return false;}break;}}}}return true;}  }
class C{  public VolumeLists(){  _volumeListsImpl=new VolumeListsImpl();}  }
class C{  protected static StringBuilder appendURI(StringBuilder sb,URI uri){  sb.append("<").append(uri.stringValue()).append(">");  return sb;}  }
class C{  public boolean isAvailable(){  return true;}  }
class C{  public void sizeWidthToFit(){  if (headerRenderer == null) {    return;  }  Component c=headerRenderer.getTableCellRendererComponent(null,getHeaderValue(),false,false,0,0);  setMinWidth(c.getMinimumSize().width);  setMaxWidth(c.getMaximumSize().width);  setPreferredWidth(c.getPreferredSize().width);  setWidth(getPreferredWidth());}  }
class C{  public static OrderExecutionDialogFragment newInstance(Order order,Interval interval,List<DateTime> executionTimes){  Bundle args=new Bundle();  args.putString("orderUuid",order.uuid);  args.putString("instructions",order.instructions);  args.putLong("orderStartMillis",order.start.getMillis());  args.putLong("intervalStartMillis",interval.getStartMillis());  args.putLong("intervalStopMillis",interval.getEndMillis());  List<Long> millis=new ArrayList<>();  for (  DateTime dt : executionTimes) {    if (interval.contains(dt)) {      millis.add(dt.getMillis());    }  }  args.putLongArray("executionTimes",Utils.toArray(millis));  DateTime encounterTime=DateTime.now();  args.putLong("encounterTimeMillis",encounterTime.getMillis());  args.putBoolean("editable",interval.contains(encounterTime));  OrderExecutionDialogFragment f=new OrderExecutionDialogFragment();  f.setArguments(args);  return f;}  }
class C{  @Override public Long hdel(final byte[] key,final byte[]... fields){  checkIsInMultiOrPipeline();  client.hdel(key,fields);  return client.getIntegerReply();}  }
class C{  @Override public void addManager(Manager m){  super.addManager(m);  TurnoutOperationManager.getInstance().loadOperationTypes();}  }
class C{  public void removeSteppable(Steppable steppable){  toBeRemoved.add(steppable);}  }
class C{  public static IRenderingEngine createRenderingEngineForDisplay(){  return createRenderingEngine(false);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private synchronized void trim(){  while (mCurrentSize > mSizeLimit) {    byte[] buf=mBuffersByLastUse.remove(0);    mBuffersBySize.remove(buf);    mCurrentSize-=buf.length;  }}  }
class C{  static public void addNotificationListener(JMXConnector jmxConnector,Class<?> mbeanInterface,String mbeanName,NotificationListener notificationListener,boolean ignored) throws InstanceNotFoundException, Exception {  MBeanServerConnection mbsc=jmxConnector.getMBeanServerConnection();  ObjectName objectName=generateMBeanObjectName(mbeanInterface.getName(),mbeanName);  mbsc.addNotificationListener(objectName,notificationListener,null,null);}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  log.info("doGet from " + request.getRemoteHost() + " - "+ request.getRemoteAddr());  String url="/rfqs.jsp";  HttpSession session=request.getSession(false);  if (session == null || session.getAttribute(WebInfo.NAME) == null)   url="/login.jsp"; else {    session.removeAttribute(WebSessionCtx.HDR_MESSAGE);    WebInfo info=(WebInfo)session.getAttribute(WebInfo.NAME);    if (info != null)     info.setMessage("");    String msg=streamAttachment(request,response);    if (msg == null || msg.length() == 0)     return;    if (info != null)     info.setMessage(msg);  }  log.info("doGet - Forward to " + url);  RequestDispatcher dispatcher=getServletContext().getRequestDispatcher(url);  dispatcher.forward(request,response);}  }
class C{  public boolean isConnectedOrConnecting(){  return (status == ConnectionStatus.CONNECTED) || (status == ConnectionStatus.CONNECTING);}  }
class C{  public void actionPerformed(ActionEvent e){  if (log.isDebugEnabled()) {    log.debug("actionPerformed");  }  int newVal=(Integer.valueOf(_value.getText()).intValue());  updatedTextField();  prop.firePropertyChange("Value",null,Integer.valueOf(newVal));}  }
class C{  @Override public synchronized String toString(){  if (elementCount == 0) {    return "[]";  }  int length=elementCount - 1;  StringBuffer buffer=new StringBuffer(elementCount * 16);  buffer.append('[');  for (int i=0; i < length; i++) {    if (elementData[i] == this) {      buffer.append("(this Collection)");    } else {      buffer.append(elementData[i]);    }    buffer.append(", ");  }  if (elementData[length] == this) {    buffer.append("(this Collection)");  } else {    buffer.append(elementData[length]);  }  buffer.append(']');  return buffer.toString();}  }
class C{  private void processTSBK(TSBKMessage tsbk){  broadcast(new DecoderStateEvent(this,Event.CONTINUATION,State.CONTROL));  if (tsbk.getVendor() == Vendor.STANDARD) {switch (tsbk.getOpcode()) {case ADJACENT_STATUS_BROADCAST:      if (tsbk instanceof AdjacentStatusBroadcast) {        IAdjacentSite ias=(IAdjacentSite)tsbk;        mNeighborMap.put(ias.getUniqueID(),ias);        updateSystem(ias.getSystemID());      }    break;case ACKNOWLEDGE_RESPONSE:  processTSBKResponse(tsbk);break;case AUTHENTICATION_COMMAND:processTSBKCommand(tsbk);break;case CALL_ALERT:processTSBKPage(tsbk);break;case DENY_RESPONSE:processTSBKResponse(tsbk);break;case EXTENDED_FUNCTION_COMMAND:processTSBKCommand(tsbk);break;case GROUP_AFFILIATION_QUERY:processTSBKQuery(tsbk);break;case GROUP_AFFILIATION_RESPONSE:processTSBKResponse(tsbk);break;case GROUP_DATA_CHANNEL_ANNOUNCEMENT:case GROUP_DATA_CHANNEL_ANNOUNCEMENT_EXPLICIT:processTSBKDataChannelAnnouncement(tsbk);break;case GROUP_DATA_CHANNEL_GRANT:case GROUP_VOICE_CHANNEL_GRANT:case GROUP_VOICE_CHANNEL_GRANT_UPDATE:case GROUP_VOICE_CHANNEL_GRANT_UPDATE_EXPLICIT:case INDIVIDUAL_DATA_CHANNEL_GRANT:case TELEPHONE_INTERCONNECT_VOICE_CHANNEL_GRANT:case TELEPHONE_INTERCONNECT_VOICE_CHANNEL_GRANT_UPDATE:case UNIT_TO_UNIT_VOICE_CHANNEL_GRANT:case UNIT_TO_UNIT_VOICE_CHANNEL_GRANT_UPDATE:processTSBKChannelGrant(tsbk);break;case IDENTIFIER_UPDATE_NON_VUHF:case IDENTIFIER_UPDATE_VHF_UHF_BANDS:IdentifierUpdate iu=(IdentifierUpdate)tsbk;if (!mBands.containsKey(iu.getIdentifier())) {mBands.put(iu.getIdentifier(),iu);}break;case LOCATION_REGISTRATION_RESPONSE:case UNIT_DEREGISTRATION_ACKNOWLEDGE:processTSBKResponse(tsbk);break;case MESSAGE_UPDATE:processTSBKMessage(tsbk);break;case NETWORK_STATUS_BROADCAST:mNetworkStatus=(module.decode.p25.message.tsbk.osp.control.NetworkStatusBroadcast)tsbk;break;case PROTECTION_PARAMETER_UPDATE:processTSBKResponse(tsbk);break;case QUEUED_RESPONSE:processTSBKResponse(tsbk);break;case RADIO_UNIT_MONITOR_COMMAND:processTSBKCommand(tsbk);break;case RFSS_STATUS_BROADCAST:processTSBKRFSSStatus((RFSSStatusBroadcast)tsbk);break;case ROAMING_ADDRESS_COMMAND:processTSBKCommand(tsbk);break;case SECONDARY_CONTROL_CHANNEL_BROADCAST:module.decode.p25.message.tsbk.osp.control.SecondaryControlChannelBroadcast sccb=(module.decode.p25.message.tsbk.osp.control.SecondaryControlChannelBroadcast)tsbk;if (sccb.getDownlinkFrequency1() > 0) {mSecondaryControlChannels.add(sccb);}break;case SNDCP_DATA_CHANNEL_ANNOUNCEMENT_EXPLICIT:mSNDCPDataChannel=(SNDCPDataChannelAnnouncementExplicit)tsbk;break;case SNDCP_DATA_CHANNEL_GRANT:processTSBKChannelGrant(tsbk);break;case STATUS_QUERY:processTSBKQuery(tsbk);break;case STATUS_UPDATE:processTSBKResponse(tsbk);break;case TELEPHONE_INTERCONNECT_ANSWER_REQUEST:case UNIT_TO_UNIT_ANSWER_REQUEST:processTSBKPage(tsbk);break;case UNIT_REGISTRATION_COMMAND:processTSBKCommand(tsbk);break;case UNIT_REGISTRATION_RESPONSE:processTSBKResponse(tsbk);break;default :break;}} else if (tsbk.getVendor() == Vendor.MOTOROLA) {processMotorolaTSBK((MotorolaTSBKMessage)tsbk);}}  }
class C{  public AxisSpace reserveSpace(Graphics2D g2,Plot plot,Rectangle2D plotArea,Rectangle2D dataArea,RectangleEdge edge,AxisSpace space){  AxisSpace result=this.axis.reserveSpace(g2,plot,plotArea,edge,space);  double thickness=calculateBarThickness(dataArea,edge);  result.add(thickness + 2 * this.outerGap,edge);  return result;}  }
class C{  public Iterator<String> iterator(){  List<String> list=new ArrayList<String>();  for (  String element : model) {    list.add(element);  }  return list.iterator();}  }
class C{  private synchronized void initializeRegistry(){  initializeRegistry(cache.hasPool());}  }
class C{  public static String formatXEP0082Date(Date date){synchronized (dateTimeFormatter) {    return dateTimeFormatter.format(date);  }}  }
class C{  public Index maxMergeMb(Integer maxMergeMb){  this.maxMergeMb=maxMergeMb;  return this;}  }
class C{  public boolean isPrimitive(Class type) throws Exception {  if (type == String.class) {    return true;  }  if (type == Float.class) {    return true;  }  if (type == Double.class) {    return true;  }  if (type == Long.class) {    return true;  }  if (type == Integer.class) {    return true;  }  if (type == Boolean.class) {    return true;  }  if (type.isEnum()) {    return true;  }  if (type.isPrimitive()) {    return true;  }  return transform.valid(type);}  }
class C{  public MYear createYear(Locale locale){  if (get_ID() == 0)   return null;  MYear year=new MYear(this);  if (year.save())   year.createStdPeriods(locale);  return year;}  }
class C{  protected void restoreState(){  rateFactor=storedRateFactor;}  }
class C{  public String generatePreparedQuery(String table,String scalarColumn,String[] columns){  StringBuilder buff=new StringBuilder("SELECT D.* FROM ");  buff.append(StringUtils.quoteIdentifier(table)).append(" D, TABLE(_FROM_ BIGINT=?, _TO_ BIGINT=?) WHERE ").append(StringUtils.quoteIdentifier(scalarColumn)).append(" BETWEEN _FROM_ AND _TO_");  for (  String col : columns) {    buff.append(" AND ").append(StringUtils.quoteIdentifier(col)).append("+1 BETWEEN ?+1 AND ?+1");  }  return buff.toString();}  }
class C{  public static ExecutorService newCachedThreadPool(ThreadFactory threadFactory){  return new ThreadPoolExecutor(0,Integer.MAX_VALUE,60L,TimeUnit.SECONDS,new SynchronousQueue<Runnable>(),threadFactory);}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  @Uninterruptible public static boolean validObject(Object ref){  return validRef(ObjectReference.fromObject(ref));}  }
class C{  public void addCommandListener(ActionListener l){  if (commandListener == null) {    commandListener=new EventDispatcher();  }  commandListener.addListener(l);}  }
class C{  private static void removeFromFinishCall(MethodCall call,ArrayList<Integer> removableIndices){  checkSaneCall(call);  Collections.sort(removableIndices);  for (int i=removableIndices.size() - 1; i >= 0; i--) {    int removableIndex=removableIndices.get(i);    Integer removedBranch=call.branchTrace.remove(removableIndex);    Double removedTrue=call.trueDistanceTrace.remove(removableIndex);    Double removedFalse=call.falseDistanceTrace.remove(removableIndex);    Integer removedCounter=call.defuseCounterTrace.remove(removableIndex);    if ((removedCounter == null) || (removedBranch == null) || (removedTrue == null)|| (removedFalse == null)) {      throw new IllegalStateException("trace.finished_calls-traces not allowed to contain null");    }  }}  }
class C{  private final void addClause(SpanQuery clause){  if (field == null) {    field=clause.getField();  } else   if (clause.getField() != null && !clause.getField().equals(field)) {    throw new IllegalArgumentException("Clauses must have same field.");  }  this.clauses.add(clause);}  }
class C{  public static Criteria WHERE(){  return new Example().createCriteria();}  }
class C{  @RequestMapping(value="/weights",method=RequestMethod.PUT,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<Weight> update(@Valid @RequestBody Weight weight) throws URISyntaxException {  log.debug("REST request to update Weight : {}",weight);  if (weight.getId() == null) {    return create(weight);  }  Weight result=weightRepository.save(weight);  weightSearchRepository.save(weight);  return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert("weight",weight.getId().toString())).body(result);}  }
class C{  public static ICluster joinAwait(){  try {    return join().get();  } catch (  Exception e) {    throw Throwables.propagate(Throwables.getRootCause(e));  }}  }
class C{  public R addParams(String key,File file){  addParams(key,file,null,null);  return (R)this;}  }
class C{  @Override public String readLine() throws IOException {  if (this.pointer >= this.length - 1) {    return null;  } else {    final StringBuilder buf=new StringBuilder();    int c;    while ((c=read()) >= 0) {      if ((c == 10) || (c == 13)) {        if (((peek() == 10) || (peek() == 13)) && (peek() != c)) {          read();        }        break;      }      buf.append((char)c);    }    return buf.toString();  }}  }
class C{  public static boolean validateComboBox(final Component parent,final JComboBox baseTypes){  if (validateComboBox(baseTypes)) {    return true;  } else {    CMessageBox.showWarning(parent,"Please select a type from the list of base types.");    return false;  }}  }
class C{  public boolean isCaseSensitive(int column) throws java.sql.SQLException {  Field field=getField(column);  int sqlType=field.getSQLType();switch (sqlType) {case Types.BIT:case Types.TINYINT:case Types.SMALLINT:case Types.INTEGER:case Types.BIGINT:case Types.FLOAT:case Types.REAL:case Types.DOUBLE:case Types.DATE:case Types.TIME:case Types.TIMESTAMP:    return false;case Types.CHAR:case Types.VARCHAR:case Types.LONGVARCHAR:  if (field.isBinary()) {    return true;  }String collationName=field.getCollation();return ((collationName != null) && !collationName.endsWith("_ci"));default :return true;}}  }
class C{  public MouseModePanel(){  super();  setKey(defaultKey);}  }
class C{  public BigDecimal convertDuration(BigDecimal duration,String fromDurationUnit,I_C_UOM toUOM){  double fromMult=getDurationBaseSec(fromDurationUnit);  double toDiv=getDurationBaseSec(toUOM);  BigDecimal convertedDuration=BigDecimal.valueOf(duration.doubleValue() * fromMult / toDiv);  return convertedDuration;}  }
class C{  public boolean equals(DisplayMode dm){  if (dm == null) {    return false;  }  return (getHeight() == dm.getHeight() && getWidth() == dm.getWidth() && getBitDepth() == dm.getBitDepth() && getRefreshRate() == dm.getRefreshRate());}  }
class C{  protected void fireIntervalRemoved(Object source,int index0,int index1){  Object[] listeners=listenerList.getListenerList();  ListDataEvent e=null;  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == ListDataListener.class) {      if (e == null) {        e=new ListDataEvent(source,ListDataEvent.INTERVAL_REMOVED,index0,index1);      }      ((ListDataListener)listeners[i + 1]).intervalRemoved(e);    }  }}  }
class C{  private void putInMultiplePartitionedRegion(int startIndexForRegion,int endIndexForRegion,int startIndexForKey,int endIndexForKey) throws Throwable {  int AsyncInvocationArrSize=4;  AsyncInvocation[] async=new AsyncInvocation[AsyncInvocationArrSize];  int delta=(endIndexForKey - startIndexForKey) / 4;  async[0]=vm[0].invokeAsync(putInMultiplePartitionRegion(prPrefix,startIndexForKey,startIndexForKey + 1 * delta,startIndexForRegion,endIndexForRegion));  async[1]=vm[1].invokeAsync(putInMultiplePartitionRegion(prPrefix,startIndexForKey + 1 * delta,startIndexForKey + 2 * delta,startIndexForRegion,endIndexForRegion));  async[2]=vm[2].invokeAsync(putInMultiplePartitionRegion(prPrefix,startIndexForKey + 2 * delta,startIndexForKey + 3 * delta,startIndexForRegion,endIndexForRegion));  async[3]=vm[3].invokeAsync(putInMultiplePartitionRegion(prPrefix,startIndexForKey + 3 * delta,endIndexForKey,startIndexForRegion,endIndexForRegion));  for (int count=0; count < AsyncInvocationArrSize; count++) {    ThreadUtils.join(async[count],30 * 1000);  }  for (int count=0; count < AsyncInvocationArrSize; count++) {    if (async[count].exceptionOccurred()) {      Assert.fail("exception during " + count,async[count].getException());    }  }}  }
class C{  void bing(){  if (!GUIPreferences.getInstance().getSoundMute() && (bingClip != null)) {    bingClip.play();  }}  }
class C{  private CsrfTokenRepository csrfTokenRepository(){  HttpSessionCsrfTokenRepository repository=new HttpSessionCsrfTokenRepository();  repository.setHeaderName("X-XSRF-TOKEN");  return repository;}  }
class C{  private void doneLoading(boolean isPlaying){  loadCompleted();  updatePlayPauseImage(isPlaying);}  }
class C{  public Duration minusMinutes(long minutesToSubtract){  return (minutesToSubtract == Long.MIN_VALUE ? plusMinutes(Long.MAX_VALUE).plusMinutes(1) : plusMinutes(-minutesToSubtract));}  }
class C{  @SuppressWarnings({"rawtypes","checkstyle:cyclomaticcomplexity"}) private LiteralExtensionIV normalizeIV(Literal l,IV iv){  if (iv instanceof LiteralExtensionIV) {    return (LiteralExtensionIV)iv;  } else {    return createIV(l);  }}  }
class C{  public CharBuffer append(char[] buffer,int offset,int len){  int length=length();  ensureCapacity(length + len);  System.arraycopy(buffer,offset,buffer(),length,len);  length(length + len);  return this;}  }
class C{  void updateChildren(DocumentEvent e,Shape a){  Element elem=getElement();  DocumentEvent.ElementChange ec=e.getChange(elem);  if (e.getType() == DocumentEvent.EventType.CHANGE) {    getContainer().repaint();  } else   if (ec != null) {    Element[] removedElems=ec.getChildrenRemoved();    Element[] addedElems=ec.getChildrenAdded();    View[] added=new View[addedElems.length];    for (int i=0; i < addedElems.length; i++)     added[i]=new WrappedLine(addedElems[i]);    replace(ec.getIndex(),removedElems.length,added);    if (a != null) {      preferenceChanged(null,true,true);      getContainer().repaint();    }  }  updateMetrics();}  }
class C{  public EmulatedFields(ObjectStreamField[] fields,ObjectStreamField[] declared){  buildSlots(fields);  declaredFields=declared;}  }
class C{  public final int toInt(){  return mValue;}  }
class C{  public static byte[] generate(Set<Integer> list,boolean minimal){  ByteArrayOutputStream out=new ByteArrayOutputStream();  generate(list,0,minimal,out);  return compress(out.toByteArray());}  }
class C{  private void addElements(int value,int numberOfElements){  if (m_firstFree + numberOfElements < m_blocksize)   for (int i=0; i < numberOfElements; i++) {    m_map0[m_firstFree++]=value;  } else {    int index=m_firstFree >>> m_SHIFT;    int offset=m_firstFree & m_MASK;    m_firstFree+=numberOfElements;    while (numberOfElements > 0) {      if (index >= m_map.length) {        int newsize=index + m_numblocks;        int[][] newMap=new int[newsize][];        System.arraycopy(m_map,0,newMap,0,m_map.length);        m_map=newMap;      }      int[] block=m_map[index];      if (null == block)       block=m_map[index]=new int[m_blocksize];      int copied=(m_blocksize - offset < numberOfElements) ? m_blocksize - offset : numberOfElements;      numberOfElements-=copied;      while (copied-- > 0)       block[offset++]=value;      ++index;      offset=0;    }  }}  }
class C{  private void readObject(ObjectInputStream ois) throws IOException, ClassNotFoundException {  ois.defaultReadObject();  try {    resBundle=JdbcRowSetResourceBundle.getJdbcRowSetResourceBundle();  } catch (  IOException ioe) {    throw new RuntimeException(ioe);  }}  }
class C{  @Override public int compare(final WritableComparable wc1,final WritableComparable wc2){  final GroupedRow gk1=(GroupedRow)wc1;  final GroupedRow gk2=(GroupedRow)wc2;  return gk1.compareTo(gk2);}  }
class C{  public void dispose(){  m_memoryPanel.dispose();  m_memorySectionPanel.dispose();  m_refreshPanel.dispose();}  }
class C{  public static Object toArray(final Collection collection,final Class componentType){  Check.notNull(collection,"collection");  Check.notNull(componentType,"componentType");  if (!componentType.isPrimitive()) {    throw new IllegalArgumentException("the specified component type [" + componentType.getName() + "] is not primitive");  }  final Object array=Array.newInstance(componentType,collection.size());  int ix=0;  for (final Iterator it=collection.iterator(); it.hasNext(); ) {    final Object currentComponent=it.next();    Array.set(array,ix++,currentComponent);  }  return array;}  }
class C{  private static boolean isHasCustomMember(@NotNull final String refName,@NotNull final PyType type){  return false;}  }
class C{  public void exportTree(Tree tree){  Map<String,Integer> idMap=writeNexusHeader(tree);  out.println("\t\t;");  writeNexusTree(tree,treePrefix + 1,true,idMap);  out.println("End;");}  }
class C{  private void resetPriceModelToFree(){  steppedPrices=null;  pricedEvents=null;  parameters=null;  priceModel=null;  templatePriceModel=null;  updateVOServiceDetails();  if (selectedService == null) {    sessionBean.setSelectedServiceKeyForSupplier(null);    return;  }  sessionBean.setSelectedServiceKeyForSupplier(Long.valueOf(selectedService.getKey()));  if (templatePriceModel != null) {    priceModel=templatePriceModel;  } else {    priceModel=selectedService.getPriceModel();  }  priceModel.setType(PriceModelType.FREE_OF_CHARGE);  steppedPrices=priceModel.getSteppedPrices();  Collections.sort(steppedPrices,new SteppedPriceComparator());  pricedEvents=PricedEventRow.createPricedEventRowList(selectedService.getVoServiceDetails());  parameters=PricedParameterRow.createPricedParameterRowListForPriceModel(selectedService.getVoServiceDetails());  parametersRoles=PricedParameterRow.createPricedParameterRowListForPriceModelRoles(selectedService.getVoServiceDetails());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:10.636 -0500",hash_original_method="9E656F575164E75EE282031F44B3A846",hash_generated_method="806483B9BF809EDA45E3F98ECBB0C618") public static int gluUnProject(float winX,float winY,float winZ,float[] model,int modelOffset,float[] project,int projectOffset,int[] view,int viewOffset,float[] obj,int objOffset){  float[] scratch=sScratch;synchronized (scratch) {    final int PM_OFFSET=0;    final int INVPM_OFFSET=16;    final int V_OFFSET=0;    Matrix.multiplyMM(scratch,PM_OFFSET,project,projectOffset,model,modelOffset);    if (!Matrix.invertM(scratch,INVPM_OFFSET,scratch,PM_OFFSET)) {      return GL10.GL_FALSE;    }    scratch[V_OFFSET + 0]=2.0f * (winX - view[viewOffset + 0]) / view[viewOffset + 2] - 1.0f;    scratch[V_OFFSET + 1]=2.0f * (winY - view[viewOffset + 1]) / view[viewOffset + 3] - 1.0f;    scratch[V_OFFSET + 2]=2.0f * winZ - 1.0f;    scratch[V_OFFSET + 3]=1.0f;    Matrix.multiplyMV(obj,objOffset,scratch,INVPM_OFFSET,scratch,V_OFFSET);  }  return GL10.GL_TRUE;}  }
class C{  public boolean drawImage(Image img,AffineTransform xform,ImageObserver obs){  if (img == null) {    return true;  }  mDrawingArea.addInfinite();  mPrintMetrics.drawImage(this,img);  return mGraphics.drawImage(img,xform,obs);}  }
class C{  private byte[] tryDecodeHostToIp(String host){  if (host.startsWith("[") && host.endsWith("]")) {    return tryDecodeHostToIPv6(host);  }  return tryDecodeHostToIPv4(host);}  }
class C{  public boolean isBIP65(){  return version >= BLOCK_VERSION_BIP65;}  }
class C{  public boolean isInverse(){  return mInverse;}  }
class C{  @ObjectiveCName("onNetworkChanged:") public void onNetworkChanged(@NotNull NetworkState state){  modules.getActorApi().onNetworkChanged(state);}  }
class C{  protected AbstractTripleStore store(){  if (store != null) {    return store;  }  Properties properties=new Properties();  properties.setProperty("com.bigdata.rdf.store.AbstractTripleStore.vocabularyClass",WikibaseVocabulary.VOCABULARY_CLASS.getName());  properties.setProperty("com.bigdata.rdf.store.AbstractTripleStore.inlineURIFactory",WikibaseInlineUriFactory.class.getName());  properties.setProperty("com.bigdata.rdf.store.AbstractTripleStore.extensionFactoryClass",WikibaseExtensionFactory.class.getName());  properties.setProperty("com.bigdata.rdf.store.AbstractTripleStore.geoSpatial","true");  properties.setProperty("com.bigdata.rdf.store.AbstractTripleStore.geoSpatialIncludeBuiltinDatatypes","false");  properties.setProperty("com.bigdata.rdf.store.AbstractTripleStore.geoSpatialDefaultDatatype","http://www.opengis.net/ont/geosparql#wktLiteral");  properties.setProperty("com.bigdata.rdf.store.AbstractTripleStore.geoSpatialDatatypeConfig.0","{\"config\": " + "{ \"uri\": \"" + GeoSparql.WKT_LITERAL + "\", "+ "\"literalSerializer\": \""+ WKTSerializer.class.getName()+ "\",  "+ "\"fields\": [ "+ "{ \"valueType\": \"DOUBLE\", \"multiplier\": \"1000000000\", \"serviceMapping\": \"LONGITUDE\" }, "+ "{ \"valueType\": \"DOUBLE\", \"multiplier\": \"1000000000\", \"serviceMapping\": \"LATITUDE\" }, "+ "{ \"valueType\": \"LONG\", \"multiplier\":\"1\",\"minValue\":\"0\", \"serviceMapping\": \"COORD_SYSTEM\" } "+ "]}}");  store=new TempTripleStore(temporaryStore(),properties,null);  return store;}  }
class C{  @Override public ExecutionState extractState(RVMThread thread,Offset osrFPoff,Offset methFPoff,int cmid){  if (VM.TraceOnStackReplacement) {    VM.sysWriteln("BASE execStateExtractor starting ...");  }  byte[] stack=thread.getStack();  if (VM.VerifyAssertions) {    int fooCmid=Magic.getIntAtOffset(stack,methFPoff.plus(STACKFRAME_METHOD_ID_OFFSET));    if (VM.TraceOnStackReplacement) {      VM.sysWriteln("fooCmid = " + fooCmid);      VM.sysWriteln("   cmid = " + cmid);    }    VM._assert(fooCmid == cmid);  }  BaselineCompiledMethod fooCM=(BaselineCompiledMethod)CompiledMethods.getCompiledMethod(cmid);  NormalMethod fooM=(NormalMethod)fooCM.getMethod();  VM.disableGC();  Address rowIP=Magic.objectAsAddress(stack).loadAddress(osrFPoff.plus(STACKFRAME_RETURN_ADDRESS_OFFSET));  Offset ipOffset=fooCM.getInstructionOffset(rowIP);  VM.enableGC();  int bcIndex=fooCM.findBytecodeIndexForInstruction(ipOffset.plus(INSTRUCTION_WIDTH));  if (VM.VerifyAssertions) {    if (bcIndex == -1) {      VM.sysWriteln("osrFPoff = ",osrFPoff);      VM.sysWriteln("instr_beg = ",Magic.objectAsAddress(fooCM.getEntryCodeArray()));      for (int i=(osrFPoff.toInt()) - 10; i < (osrFPoff.toInt()) + 10; i++) {        VM.sysWriteln("  stack[" + i + "] = "+ stack[i]);      }      Offset ipIndex=ipOffset.toWord().rsha(LG_INSTRUCTION_WIDTH).toOffset();      VM.sysWriteln("ipIndex : ",ipIndex);      VM.sysWriteln("bcIndex : " + bcIndex);    }    VM._assert(bcIndex != -1);  }  ExecutionState state=new ExecutionState(thread,methFPoff,cmid,bcIndex,osrFPoff);  BytecodeTraverser typer=new BytecodeTraverser();  typer.computeLocalStackTypes(fooM,bcIndex);  byte[] localTypes=typer.getLocalTypes();  byte[] stackTypes=typer.getStackTypes();  if (VM.TraceOnStackReplacement) {    VM.sysWrite("BC Index : " + bcIndex + "\n");    VM.sysWrite("Local Types :");    for (    byte localType : localTypes) {      VM.sysWrite(" " + (char)localType);    }    VM.sysWrite("\nStack Types :");    for (    byte stackType : stackTypes) {      VM.sysWrite(" " + (char)stackType);    }    VM.sysWrite("\n");  }  for (int i=0, n=localTypes.length; i < n; i++) {    if (localTypes[i] == ClassTypeCode) {      if (!fooCM.referenceMaps.isLocalRefType(fooM,ipOffset.plus(1 << LG_INSTRUCTION_WIDTH),i)) {        localTypes[i]=VoidTypeCode;        if (VM.TraceOnStackReplacement) {          VM.sysWriteln("GC maps disagrees with type matcher at " + i + "th local\n");        }      }    }  }  Offset startLocalOffset=methFPoff.plus(BaselineCompilerImpl.locationToOffset(fooCM.getGeneralLocalLocation(0)));  Offset stackOffset=methFPoff.plus(fooCM.getEmptyStackOffset());  getVariableValue(stack,startLocalOffset,localTypes,fooCM,LOCAL,state);  getVariableValue(stack,stackOffset,stackTypes,fooCM,STACK,state);  if (VM.TraceOnStackReplacement) {    state.printState();  }  if (VM.TraceOnStackReplacement) {    VM.sysWriteln("BASE executionStateExtractor done ");  }  return state;}  }
class C{  public void removeItemEventListener(ItemEventListener listener){  PacketListener conListener=itemEventToListenerMap.remove(listener);  if (conListener != null)   con.removePacketListener(conListener);}  }
class C{  public void testApostrophe(){  assertFalse(sh.isDefaultSuggestion("don't","don't"));}  }
class C{  public static void cleanupProcess(){  for (  Process p : processes) {{      processes.remove(p);    }  }}  }
class C{  public Configuration(File config,String sevenzipPath,String zipAlignPath) throws IOException, ParserConfigurationException, SAXException {  mWhiteList=new HashMap<>();  mOldResMapping=new HashMap<>();  mOldFileMapping=new HashMap<>();  mCompressPatterns=new HashSet<>();  readXmlConfig(config);  this.m7zipPath=sevenzipPath;  this.mZipalignPath=zipAlignPath;}  }
class C{  private static String[] formGrams(String text,int ng){  int len=text.length();  String[] res=new String[len - ng + 1];  for (int i=0; i < len - ng + 1; i++) {    res[i]=text.substring(i,i + ng);  }  return res;}  }
class C{  public void removePropertyChangeListener(PropertyChangeListener listener){  listenerList.remove(PropertyChangeListener.class,listener);}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentFragment docFragment;  String nodeValue;  Text txtNode;  Node retval;  doc=(Document)load("hc_staff",true);  docFragment=doc.createDocumentFragment();  txtNode=doc.createTextNode("foo");  retval=docFragment.appendChild(txtNode);  txtNode=doc.createTextNode("bar");  retval=docFragment.appendChild(txtNode);  docFragment.normalize();  txtNode=(Text)docFragment.getFirstChild();  nodeValue=txtNode.getNodeValue();  assertEquals("normalizedNodeValue","foobar",nodeValue);  retval=txtNode.getNextSibling();  assertNull("singleChild",retval);}  }
class C{  protected List buildRadialTicks(List allTicks){  List ticks=new ArrayList();  Iterator it=allTicks.iterator();  while (it.hasNext()) {    ValueTick tick=(ValueTick)it.next();    if (isRadiusMinorGridlinesVisible() || TickType.MAJOR.equals(tick.getTickType())) {      ticks.add(tick);    }  }  return ticks;}  }
class C{  public HierarchicalClassLabel(String name,Pattern regex,String separator){  super();  this.separatorPattern=regex;  this.separatorString=separator;  String[] levelwiseStrings=separatorPattern.split(name);  this.levelwiseNames=new Comparable<?>[levelwiseStrings.length];  for (int i=0; i < levelwiseStrings.length; i++) {    try {      levelwiseNames[i]=Integer.valueOf(levelwiseStrings[i]);    } catch (    NumberFormatException e) {      levelwiseNames[i]=levelwiseStrings[i];    }  }}  }
class C{  protected void sequence_S_Equations(ISerializationContext context,S_Equations semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  boolean isValidJimpleName(String prospectiveName){  if (prospectiveName == null)   return false;  for (int i=0; i < prospectiveName.length(); i++) {    char c=prospectiveName.charAt(i);    if (i == 0 && c >= '0' && c <= '9')     return false;    if (!((c >= '0' && c <= '9') || (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')|| (c == '_' || c == '$')))     return false;  }  return true;}  }
class C{  protected void writeTile(Raster raster,int column,int row,int kernelSize,String filePath,LayerType layerType) throws IOException {  int tWidth=tileWidth + 1;  int tLength=tileLength + 1;  int tSize=tLength * tWidth * bytesPerPixel;  int tileTop=0;  int tileLeft=0;  int rasterLeft=leftInset + column;  int rasterTop=topInset + row;  int rasterTWidth=tWidth * kernelSize;  int rasterTLength=tLength * kernelSize;  byte[] bbArray=new byte[tSize];  ByteBuffer bbuf=ByteBuffer.wrap(bbArray);switch (layerType) {case none:case footprint:case viewshed:case derivative:    break;case elevation:case field:case grayimage:  raster.get(rasterTop,rasterLeft,rasterTWidth,rasterTLength,bbuf,tileTop,tileLeft,tWidth,kernelSize);break;case colorimage:bbuf.order(ByteOrder.nativeOrder());bbuf.rewind();raster.getRGBA(rasterTop,rasterLeft,rasterTWidth,rasterTLength,bbuf,tileTop,tileLeft,tWidth,kernelSize);break;}if (isEmpty(bbuf)) {bbuf.limit(0);}writeTile(filePath,bbArray,tWidth,tLength,layerType);}  }
class C{  @Override public Map<Long,String> mapping(Map<Long,String> originalDatapoints,List<String> constants){  SystemAssert.requireArgument(constants != null,"This transform needs constants");  SystemAssert.requireArgument(constants.size() == 2,"This transform must provide exactly 2 constants.");  this.threshold=getOffsetInSeconds(constants.get(0)) * 1000;  this.connectDistance=getOffsetInSeconds(constants.get(1)) * 1000;  Map<Long,String> resultMetric=new TreeMap<Long,String>();  this.keyList=new ArrayList<Long>();  this.resultKeyList=new ArrayList<Long>();  keyList.addAll(originalDatapoints.keySet());  Collections.sort(keyList);  if (keyList.size() > 0) {    connect(0,new ArrayList<>(Arrays.asList(keyList.get(0))));  }  for (  Long resultKey : resultKeyList) {    resultMetric.put(resultKey,originalDatapoints.get(resultKey));  }  return resultMetric;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:26.334 -0500",hash_original_method="5D2FA2739AFC080B35312B93ED4EB821",hash_generated_method="C9445E6D2DF0BA53A84414A6BE854628") public void writeToStream(OutputStream stream){  if (stream == null) {    throw new NullPointerException();  }  stream.addTaint(getTaint());}  }
class C{  WildcardTypeImpl(Type[] upperBounds,Type[] lowerBounds){  this.upperBounds=upperBounds;  this.lowerBounds=lowerBounds;}  }
class C{  protected void pop(){  if (numties > 0) {    --numties;  } else {    heap.poll();  }}  }
class C{  public StandeeAndSittersScoringFunctionFactory(ScoringFunctionFactory delegate,EventsManager events,ScoreTracker scoreTracker,MatsimServices controler){  this.delegate=delegate;  this.events=events;  this.scoreTracker=scoreTracker;  this.controler=controler;}  }
class C{  private void createMovements(){  int noMoves=0;  String info="";  MClient client=null;  MMovement move=null;  int M_Warehouse_ID=0;  int M_WarehouseSource_ID=0;  MWarehouse whSource=null;  MWarehouse wh=null;  X_T_Replenish[] replenishs=getReplenish("M_WarehouseSource_ID IS NOT NULL AND C_BPartner_ID > 0");  for (int i=0; i < replenishs.length; i++) {    X_T_Replenish replenish=replenishs[i];    if (whSource == null || whSource.getM_WarehouseSource_ID() != replenish.getM_WarehouseSource_ID())     whSource=MWarehouse.get(getCtx(),replenish.getM_WarehouseSource_ID());    if (wh == null || wh.getM_Warehouse_ID() != replenish.getM_Warehouse_ID())     wh=MWarehouse.get(getCtx(),replenish.getM_Warehouse_ID());    if (client == null || client.getAD_Client_ID() != whSource.getAD_Client_ID())     client=MClient.get(getCtx(),whSource.getAD_Client_ID());    if (move == null || M_WarehouseSource_ID != replenish.getM_WarehouseSource_ID() || M_Warehouse_ID != replenish.getM_Warehouse_ID()) {      M_WarehouseSource_ID=replenish.getM_WarehouseSource_ID();      M_Warehouse_ID=replenish.getM_Warehouse_ID();      move=new MMovement(getCtx(),0,get_TrxName());      move.setC_DocType_ID(p_C_DocType_ID);      move.setDescription(Msg.getMsg(getCtx(),"Replenishment") + ": " + whSource.getName()+ "->"+ wh.getName());      move.setAD_Org_ID(whSource.getAD_Org_ID());      if (!move.save())       return;      log.fine(move.toString());      noMoves++;      info+=" - " + move.getDocumentNo();    }    int M_LocatorTo_ID=wh.getDefaultLocator().getM_Locator_ID();    MProduct product=MProduct.get(getCtx(),replenish.getM_Product_ID());    String MMPolicy=product.getMMPolicy();    MStorage[] storages=MStorage.getWarehouse(getCtx(),whSource.getM_Warehouse_ID(),replenish.getM_Product_ID(),0,0,true,null,MClient.MMPOLICY_FiFo.equals(MMPolicy),get_TrxName());    BigDecimal target=replenish.getQtyToOrder();    for (int j=0; j < storages.length; j++) {      MStorage storage=storages[j];      if (storage.getQtyOnHand().signum() <= 0)       continue;      BigDecimal moveQty=target;      if (storage.getQtyOnHand().compareTo(moveQty) < 0)       moveQty=storage.getQtyOnHand();      MMovementLine line=new MMovementLine(move);      line.setM_Product_ID(replenish.getM_Product_ID());      line.setMovementQty(moveQty);      if (replenish.getQtyToOrder().compareTo(moveQty) != 0)       line.setDescription("Total: " + replenish.getQtyToOrder());      line.setM_Locator_ID(storage.getM_Locator_ID());      line.setM_AttributeSetInstance_ID(storage.getM_AttributeSetInstance_ID());      line.setM_LocatorTo_ID(M_LocatorTo_ID);      line.setM_AttributeSetInstanceTo_ID(storage.getM_AttributeSetInstance_ID());      line.save();      target=target.subtract(moveQty);      if (target.signum() == 0)       break;    }  }  if (replenishs.length == 0) {    m_info="No Source Warehouse";    log.warning(m_info);  } else {    m_info="#" + noMoves + info;    log.info(m_info);  }}  }
class C{  @Override public boolean equals(Object other){  if (_map.equals(other)) {    return true;  } else   if (other instanceof Map) {    Map that=(Map)other;    if (that.size() != _map.size()) {      return false;    } else {      Iterator it=that.entrySet().iterator();      for (int i=that.size(); i-- > 0; ) {        Map.Entry e=(Map.Entry)it.next();        Object key=e.getKey();        Object val=e.getValue();        if (key instanceof Long && val instanceof Float) {          long k=unwrapKey(key);          float v=unwrapValue(val);          if (_map.containsKey(k) && v == _map.get(k)) {          } else {            return false;          }        } else {          return false;        }      }      return true;    }  } else {    return false;  }}  }
class C{  public boolean isMessageIdRequired(){  return false;}  }
class C{  @NotNull public List<PlayerNbt> createSingleplayerPlayerNbts(){  Log.i("using player from level.dat");  return Arrays.asList(createLevelDatPlayerNbt());}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override public boolean isFileViewable(){  return fileAccess.isFileViewable(getIO());}  }
class C{  public String thresholdTipText(){  return "Threshold for the matrix decompositon, what is considered frequent." + "\n Between 0 and 1.";}  }
class C{  public String toString(cp_info constant_pool[]){  return convert();}  }
class C{  public void load(Element element,Object o){  jmri.jmrit.symbolicprog.ProgDefault.setDefaultProgFile(element.getAttribute("defaultFile").getValue());}  }
class C{  void zoom(){}  }
class C{  public static float[] RGBtoHSL(int r,int g,int b,float[] hsl){  if (hsl == null) {    hsl=new float[3];  } else   if (hsl.length < 3) {    throw new IllegalArgumentException("hsl array must have a length of" + " at least 3");  }  if (r < 0)   r=0; else   if (r > 255)   r=255;  if (g < 0)   g=0; else   if (g > 255)   g=255;  if (b < 0)   b=0; else   if (b > 255)   b=255;  float var_R=(r / 255f);  float var_G=(g / 255f);  float var_B=(b / 255f);  float var_Min;  float var_Max;  float del_Max;  if (var_R > var_G) {    var_Min=var_G;    var_Max=var_R;  } else {    var_Min=var_R;    var_Max=var_G;  }  if (var_B > var_Max) {    var_Max=var_B;  }  if (var_B < var_Min) {    var_Min=var_B;  }  del_Max=var_Max - var_Min;  float H, S, L;  L=(var_Max + var_Min) / 2f;  if (del_Max - 0.01f <= 0.0f) {    H=0;    S=0;  } else {    if (L < 0.5f) {      S=del_Max / (var_Max + var_Min);    } else {      S=del_Max / (2 - var_Max - var_Min);    }    float del_R=(((var_Max - var_R) / 6f) + (del_Max / 2f)) / del_Max;    float del_G=(((var_Max - var_G) / 6f) + (del_Max / 2f)) / del_Max;    float del_B=(((var_Max - var_B) / 6f) + (del_Max / 2f)) / del_Max;    if (var_R == var_Max) {      H=del_B - del_G;    } else     if (var_G == var_Max) {      H=(1 / 3f) + del_R - del_B;    } else {      H=(2 / 3f) + del_G - del_R;    }    if (H < 0) {      H+=1;    }    if (H > 1) {      H-=1;    }  }  hsl[0]=H;  hsl[1]=S;  hsl[2]=L;  return hsl;}  }
class C{  public static void assertEqualsWithinUlps(String message,double expected,double actual,final long maxUlps){  if (expected == actual)   return;  long ulps=getUlps(expected,actual);  if (ulps <= maxUlps) {    return;  }  fail("Expecting " + expected + ", not "+ actual+ ": abs(difference)="+ Math.abs(expected - actual)+ ", ulps="+ ulps);}  }
class C{  private int handleC(String value,DoubleMetaphoneResult result,int index){  if (conditionC0(value,index)) {    result.append('K');    index+=2;  } else   if (index == 0 && contains(value,index,6,"CAESAR")) {    result.append('S');    index+=2;  } else   if (contains(value,index,2,"CH")) {    index=handleCH(value,result,index);  } else   if (contains(value,index,2,"CZ") && !contains(value,index - 2,4,"WICZ")) {    result.append('S','X');    index+=2;  } else   if (contains(value,index + 1,3,"CIA")) {    result.append('X');    index+=3;  } else   if (contains(value,index,2,"CC") && !(index == 1 && charAt(value,0) == 'M')) {    return handleCC(value,result,index);  } else   if (contains(value,index,2,"CK","CG","CQ")) {    result.append('K');    index+=2;  } else   if (contains(value,index,2,"CI","CE","CY")) {    if (contains(value,index,3,"CIO","CIE","CIA")) {      result.append('S','X');    } else {      result.append('S');    }    index+=2;  } else {    result.append('K');    if (contains(value,index + 1,2," C"," Q"," G")) {      index+=3;    } else     if (contains(value,index + 1,1,"C","K","Q") && !contains(value,index + 1,2,"CE","CI")) {      index+=2;    } else {      index++;    }  }  return index;}  }
class C{  @Override public boolean isDisplayAllEvents(){  SharedPreferences preferences=PreferenceManager.getDefaultSharedPreferences(getActivity());  return preferences.getBoolean(getString(R.string.settings_key_display_all_events),false);}  }
class C{  public boolean equals(Object obj){  if (!(obj instanceof MagicCookieAttribute))   return false;  if (obj == this)   return true;  MagicCookieAttribute att=(MagicCookieAttribute)obj;  if (att.getAttributeType() != getAttributeType() || att.getDataLength() != getDataLength() || att.value != value)   return false;  return true;}  }
class C{  @Override public boolean isConnected(){  if (mqttService != null)   return mqttService.isConnected(clientHandle); else   return false;}  }
class C{  public void updateRowId(String columnName,RowId x) throws SQLException {  throw new SQLFeatureNotSupportedException(resBundle.handleGetObject("cachedrowsetimpl.opnotysupp").toString());}  }
class C{  private boolean popFile() throws JasperException {  if (current == null || currFileId < 0) {    return false;  }  String fName=getFile(currFileId);  currFileId=unregisterSourceFile(fName);  if (currFileId < -1) {    err.jspError("jsp.error.file.not.registered",fName);  }  Mark previous=current.popStream();  if (previous != null) {    master=current.baseDir;    current=previous;    return true;  }  return false;}  }
class C{  public void initOptions(){  CHECK_BOX.setSelected(PlayerSettings.USE_OS_DEFAULT_PLAYER.getValue());  VIDEO_PREVIEW_WITH_INTERNAL_PLAYER_CHECK_BOX.setSelected(PlayerSettings.USE_FW_PLAYER_FOR_CLOUD_VIDEO_PREVIEWS.getValue());}  }
class C{  public void onDrawFrame(GL10 glUnused){  boolean isNewFrame=false;  int frameNumber=0;synchronized (this) {    if (updateSurface) {      isNewFrame=true;      frameNumber=mFrameNumber;      mSurface.updateTexImage();      mSurface.getTransformMatrix(mSTMatrix);      updateSurface=false;    }  }  GLES20.glClearColor(0.0f,1.0f,0.0f,1.0f);  GLES20.glClear(GLES20.GL_DEPTH_BUFFER_BIT | GLES20.GL_COLOR_BUFFER_BIT);  GLES20.glUseProgram(mProgram);  checkGlError("glUseProgram");  GLES20.glActiveTexture(GLES20.GL_TEXTURE0);  GLES20.glBindTexture(GL_TEXTURE_EXTERNAL_OES,mTextureID);  mTriangleVertices.position(TRIANGLE_VERTICES_DATA_POS_OFFSET);  GLES20.glVertexAttribPointer(maPositionHandle,3,GLES20.GL_FLOAT,false,TRIANGLE_VERTICES_DATA_STRIDE_BYTES,mTriangleVertices);  checkGlError("glVertexAttribPointer maPosition");  GLES20.glEnableVertexAttribArray(maPositionHandle);  checkGlError("glEnableVertexAttribArray maPositionHandle");  mTriangleVertices.position(TRIANGLE_VERTICES_DATA_UV_OFFSET);  GLES20.glVertexAttribPointer(maTextureHandle,3,GLES20.GL_FLOAT,false,TRIANGLE_VERTICES_DATA_STRIDE_BYTES,mTriangleVertices);  checkGlError("glVertexAttribPointer maTextureHandle");  GLES20.glEnableVertexAttribArray(maTextureHandle);  checkGlError("glEnableVertexAttribArray maTextureHandle");  Matrix.setIdentityM(mMVPMatrix,0);  GLES20.glUniformMatrix4fv(muMVPMatrixHandle,1,false,mMVPMatrix,0);  GLES20.glUniformMatrix4fv(muSTMatrixHandle,1,false,mSTMatrix,0);  GLES20.glDrawArrays(GLES20.GL_TRIANGLE_STRIP,0,4);  checkGlError("glDrawArrays");  GLES20.glFinish();  if (isNewFrame) {    Log.d(TAG,mDrawNumber + "/" + frameNumber+ " before dumping "+ System.currentTimeMillis());    DumpToFile(frameNumber);    Log.d(TAG,mDrawNumber + "/" + frameNumber+ " after  dumping "+ System.currentTimeMillis());    mDrawNumber++;  }}  }
class C{  public final static String cropStreamSmbURL(String url){  if (TextUtils.isEmpty(url)) {    return null;  }  try {    url=URLDecoder.decode(url,"UTF-8");  } catch (  UnsupportedEncodingException e1) {    e1.printStackTrace();  }  if (!url.startsWith(SambaHelper.CONTENT_EXPORT_URI)) {    return url;  }  if (url.length() <= SambaHelper.CONTENT_EXPORT_URI.length()) {    return url;  }  String filePaths=SambaHelper.SMB_URL_LAN + url.substring(SambaHelper.CONTENT_EXPORT_URI.length());  int indexOf=filePaths.indexOf("&");  if (indexOf != -1) {    filePaths=filePaths.substring(0,indexOf);  }  return filePaths;}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0xB509B09E,version=150) public int sceHttpCreateRequestWithURL(int connectionId,int method,PspString url,long contentLength){  HttpConnection httpConnection=getHttpConnection(connectionId);  HttpRequest httpRequest=new HttpRequest();  httpRequest.setUrl(url.getString());  httpRequest.setContentLength(contentLength);  httpConnection.addHttpRequest(httpRequest);  return httpRequest.getId();}  }
class C{  public static Optional<PlayerProfile> lookupProperties(UUID id){  if (idCache.contains(id))   return Optional.of(idCache.get(id));  Object rawResponse=getJson("https://sessionserver.mojang.com/session/minecraft/profile/" + id.toString().replace("-",""));  if (rawResponse == null || !(rawResponse instanceof JSONObject))   return Optional.empty();  JSONObject response=(JSONObject)rawResponse;  PlayerProfile profile=deserializeProfile(response);  if (profile == null)   return Optional.empty();  idCache.put(id,profile);  return Optional.of(profile);}  }
class C{  protected Attribute(final String type){  this.type=type;}  }
class C{  public void subscribeToSyncResellerService() throws Exception {  VendorData supplierData=setupNewSupplier("2013-01-01 08:00:00");  setDateFactory("2013-01-02 20:00:00");  VOServiceDetails supplService=createPublishActivateService(supplierData,TestPriceModel.EXAMPLE_RATA_WEEK_ROLES,"supplSrvForReseller");  VendorData resellerData=setupNewReseller("2013-01-03 08:10:00");  setCutOffDay(resellerData.getAdminKey(),1);  CustomerData resellerCustomerData=registerCustomer(resellerData,"resellerCustomer");  setDateFactory("2013-07-10 20:00:00");  VOServiceDetails resellerService=grantResalePermission(supplierData,supplService,resellerData);  resellerService=publishActivateService(resellerData,resellerService);  subscribe(resellerCustomerData.getAdminUser(),"resellerSubscription",resellerService,"2013-08-18 00:00:00","ADMIN");  resetCutOffDay(supplierData.getAdminKey());  resetCutOffDay(resellerData.getAdminKey());  cacheTestData("subscribeToSyncResellerService",new TestData(supplierData,resellerData));}  }
class C{  public X509CertificateHolderSelector(X500Name issuer,BigInteger serialNumber,byte[] subjectKeyId){  this.issuer=issuer;  this.serialNumber=serialNumber;  this.subjectKeyId=subjectKeyId;}  }
class C{  public void putBytes(int key,byte value[]){  map.put(key,value);}  }
class C{  public static void sort(Object[] array){  sort(0,array.length,array);}  }
class C{  protected boolean skipOutpoint(Outpoint ignored){  return false;}  }
class C{  void release(){  if (sdBuffer != null)   sdBuffer.release();  if (aclBuffer != null)   aclBuffer.release();  if (sidList != null) {    for (    Long sid : sidList) {      LocalFree(sid);    }  }}  }
class C{  private static void innerSetHelperClass(Class<? extends OrmLiteSqliteOpenHelper> openHelperClass){  if (openHelperClass == null) {    throw new IllegalStateException("Helper class was trying to be reset to null");  } else   if (helperClass == null) {    helperClass=openHelperClass;  } else   if (helperClass != openHelperClass) {    throw new IllegalStateException("Helper class was " + helperClass + " but is trying to be reset to "+ openHelperClass);  }}  }
class C{  @Override public void savingComplete(SaveResult saveResult){  dismissDialog(SAVING_DIALOG);  int saveStatus=saveResult.getSaveResult();switch (saveStatus) {case SaveToDiskTask.SAVED:    sendSavedBroadcast();  break;case SaveToDiskTask.SAVED_AND_EXIT:sendSavedBroadcast();finishReturnInstance();break;case SaveToDiskTask.SAVE_ERROR:String message;if (saveResult.getSaveErrorMessage() != null) {message=getString(R.string.data_saved_error) + ": " + saveResult.getSaveErrorMessage();} else {message=getString(R.string.data_saved_error);}Toast.makeText(this,message,Toast.LENGTH_LONG).show();break;case FormEntryController.ANSWER_CONSTRAINT_VIOLATED:case FormEntryController.ANSWER_REQUIRED_BUT_EMPTY:String constraint_behavior=PreferenceManager.getDefaultSharedPreferences(this).getString(PreferencesActivity.KEY_CONSTRAINT_BEHAVIOR,PreferencesActivity.CONSTRAINT_BEHAVIOR_DEFAULT);break;}}  }
class C{  public static Number decodeFloat(byte[] value) throws TlvException {  ByteBuffer floatBb=ByteBuffer.wrap(value);  if (value.length == 4) {    return floatBb.getFloat();  } else   if (value.length == 8) {    return floatBb.getDouble();  } else {    throw new TlvException("Invalid length for a float value: " + value.length);  }}  }
class C{  public void testSenderWithSpringXmlUsingSpring2NamespacesWithEmbeddedBrokerConfiguredViaXmlUsingLocalXsd() throws Exception {  String config="spring-embedded-xbean-local.xml";  assertSenderConfig(config);}  }
class C{  public Object findRecursive(String... args){  NamedList<?> currentList=null;  Object value=null;  for (int i=0; i < args.length; i++) {    String key=args[i];    if (currentList == null) {      currentList=this;    } else {      if (value instanceof NamedList) {        currentList=(NamedList<?>)value;      } else {        value=null;        break;      }    }    value=currentList.get(key,0);  }  return value;}  }
class C{  public void simulate(){  while (!env.isDone() && !CancelableThread.currIsCanceled()) {    env.step();    simPaneCtrl.waitAfterStep();  }  simPaneCtrl.setStatus("Search metrics: " + search.getMetrics());  envViewCtrl.notify("pathCost=" + search.getMetrics().get("pathCost"));}  }
class C{  public static byte[] decode(String s) throws Base64DecoderException {  byte[] bytes=s.getBytes();  return decode(bytes,0,bytes.length);}  }
class C{  @Override public int fillChunkData(byte[] data,int offset,int index,KeyStructureInfo restructuringInfo){  return 0;}  }
class C{  public DateTimeFormatterBuilder appendSecondOfMinute(int minDigits){  return appendDecimal(DateTimeFieldType.secondOfMinute(),minDigits,2);}  }
class C{  public boolean isGREATER_EQUAL(){  return value == GREATER_EQUAL;}  }
class C{  public RendererInfo(java.awt.Frame parent,boolean modal){  super(parent,modal);  initComponents();  updateInfo();}  }
class C{  private void validateLong(FacesContext context,UIComponent uiComponent,String value){  LongValidator toValidate=new LongValidator();  toValidate.validate(context,uiComponent,value);}  }
class C{  public TextEditorGUI(){  super();  underscores_="___________________________________________________________";  worker_=null;  parseRun_=null;  compiledWithoutError_=false;  initComponents();  loadFile(defaultFile);  appWindowsExtantMap_=new HashMap<RTWindowRegistryEntry,Boolean>();  updateButtons();  oslMsg();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:07:23.779 -0400",hash_original_method="1A9890B79CECEEB3AB84980BAB61A32E",hash_generated_method="A885C61797667F9B85CC6D7E7523D081") private void onDeviceRemoved(String deviceObjectPath){  String address=mBluetoothService.getAddressFromObjectPath(deviceObjectPath);  if (address != null) {    mBluetoothService.setBondState(address.toUpperCase(),BluetoothDevice.BOND_NONE,BluetoothDevice.UNBOND_REASON_REMOVED);    mBluetoothService.setRemoteDeviceProperty(address,"UUIDs",null);  }}  }
class C{  public boolean optBoolean(int index,boolean defaultValue){  try {    return this.getBoolean(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  @Override public boolean isLeapYear(){  return chrono.isLeapYear(prolepticYear);}  }
class C{  public JValueSlider(String title,int min,int max,int value){  this(title,new Integer(min),new Integer(max),new Integer(value));  m_smin=min;  m_srange=max - min;  m_slider.setMinimum(min);  m_slider.setMaximum(max);  setValue(new Integer(value));}  }
class C{  public QuestActiveCondition(final String questname){  this.questname=checkNotNull(questname);}  }
class C{  public void actionPerformed(ActionEvent evt){  if (evt.isConsumed()) {    return;  }  Object src=evt.getSource();  if (commandList == null) {    Button source=(Button)src;    for (int iter=0; iter < soft.length; iter++) {      if (source == soft[iter]) {        if (softCommand[iter] == menuCommand) {          showMenu();          return;        }        if (softCommand[iter] != null) {          ActionEvent e=new ActionEvent(softCommand[iter],ActionEvent.Type.Command);          softCommand[iter].actionPerformed(e);          if (!e.isConsumed()) {            parent.actionCommandImpl(softCommand[iter]);          }        }        return;      }    }  } else {    if (src instanceof Button) {      for (int iter=0; iter < soft.length; iter++) {        if (src == soft[iter]) {          Container parent=commandList.getParent();          while (parent != null) {            if (parent instanceof Dialog) {              ((Dialog)parent).actionCommand(softCommand[iter]);              return;            }            parent=parent.getParent();          }        }      }    }    Command c=getComponentSelectedCommand(commandList);    if (!c.isEnabled()) {      return;    }    Container p=commandList.getParent();    while (p != null) {      if (p instanceof Dialog) {        ((Dialog)p).actionCommand(c);        return;      }      p=p.getParent();    }  }}  }
class C{  public void add(Permission permission){  if (!(permission instanceof SocketPermission))   throw new IllegalArgumentException("invalid permission: " + permission);  if (isReadOnly())   throw new SecurityException("attempt to add a Permission to a readonly PermissionCollection");synchronized (this) {    perms.add(0,(SocketPermission)permission);  }}  }
class C{  public BackupRestoreStatus queryBackupRestoreStatus(String backupName,boolean isLocal){  Configuration cfg=coordinatorClient.queryConfiguration(coordinatorClient.getSiteId(),getBackupConfigKind(isLocal),backupName);  Map<String,String> allItems=(cfg == null) ? new HashMap<String,String>() : cfg.getAllConfigs(false);  BackupRestoreStatus restoreStatus=new BackupRestoreStatus(allItems);  return restoreStatus;}  }
class C{  public void dataCenterId(byte dataCenterId){  this.dataCenterId=dataCenterId;  last=new GridCacheVersion(0,0,order.get(),0,dataCenterId);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static void main(String[] args){  TestRunner.run(ResequencerTest.class);}  }
class C{  public byte[] toByteArray(){  return data;}  }
class C{  static int sendDatagram(InetAddress local,NetworkInterface nif,InetAddress group,int port) throws IOException {  ProtocolFamily family=(group instanceof Inet6Address) ? StandardProtocolFamily.INET6 : StandardProtocolFamily.INET;  DatagramChannel dc=DatagramChannel.open(family).bind(new InetSocketAddress(local,0)).setOption(StandardSocketOptions.IP_MULTICAST_IF,nif);  int id=rand.nextInt();  byte[] msg=Integer.toString(id).getBytes("UTF-8");  ByteBuffer buf=ByteBuffer.wrap(msg);  System.out.format("Send message from %s -> group %s (id=0x%x)\n",local.getHostAddress(),group.getHostAddress(),id);  dc.send(buf,new InetSocketAddress(group,port));  dc.close();  return id;}  }
class C{  public int currentIndex(){  return contents.size();}  }
class C{  protected void renderFeatures(KMLTraversalContext tc,DrawContext dc){  List<KMLAbstractFeature> containers=new ArrayList<KMLAbstractFeature>();  for (  KMLAbstractFeature feature : this.getFeatures()) {    if (feature instanceof KMLAbstractContainer)     containers.add(feature); else     feature.render(tc,dc);  }  for (  KMLAbstractFeature feature : containers) {    feature.render(tc,dc);  }}  }
class C{  public boolean allocatePesForVm(Vm vm,List<Double> mipsShare){  return getVmScheduler().allocatePesForVm(vm,mipsShare);}  }
class C{  private String[] parentKey(String name,int idx){  String[] parts=name.split("\\.");  if (idx > parts.length)   return null;  String parent="";  String key=null;  if (idx < parts.length)   key=parts[idx];  for (int i=0; i < idx; i++) {    parent=parent.length() > 0 ? parent + "." + parts[i] : parts[i];  }  return new String[]{parent,key};}  }
class C{  public Building(Coords coords,IBoard board,int structureType,BasementType basementType){  id=coords.hashCode();  coordinates.addElement(coords);  originalHexes++;  burning.put(coords,false);  IHex startHex=board.getHex(coords);  if (!startHex.containsTerrain(structureType)) {    throw new IllegalArgumentException("The coordinates, " + coords.getBoardNum() + ", do not contain a building.");  }  type=startHex.terrainLevel(structureType);  bldgClass=startHex.terrainLevel(Terrains.BLDG_CLASS);  currentCF.put(coords,getDefaultCF(type));  if (currentCF.get(coords) == Building.UNKNOWN) {    throw new IllegalArgumentException("Unknown construction type: " + type + ".  The board is invalid.");  }  if ((structureType == Terrains.BUILDING) && startHex.containsTerrain(Terrains.BLDG_CF)) {    currentCF.put(coords,startHex.terrainLevel(Terrains.BLDG_CF));  }  if ((structureType == Terrains.BRIDGE) && startHex.containsTerrain(Terrains.BRIDGE_CF)) {    currentCF.put(coords,startHex.terrainLevel(Terrains.BRIDGE_CF));  }  if ((structureType == Terrains.FUEL_TANK) && startHex.containsTerrain(Terrains.FUEL_TANK_CF)) {    currentCF.put(coords,startHex.terrainLevel(Terrains.FUEL_TANK_CF));  }  if (startHex.containsTerrain(Terrains.BLDG_ARMOR)) {    armor.put(coords,startHex.terrainLevel(Terrains.BLDG_ARMOR));  } else {    armor.put(coords,0);  }  phaseCF.putAll(currentCF);  basement.put(coords,basementType);  basementCollapsed.put(coords,startHex.terrainLevel(Terrains.BLDG_BASE_COLLAPSED) == 1);  for (int dir=0; dir < 6; dir++) {    if (startHex.containsTerrainExit(structureType,dir)) {      include(coords.translated(dir),board,structureType);    }  }  StringBuffer buffer=new StringBuffer();  if (structureType == Terrains.FUEL_TANK) {    buffer.append("Fuel Tank #");  } else   if (getType() == Building.WALL) {    buffer.append("Wall #");  } else   if (structureType == Terrains.BUILDING) {    buffer.append("Building #");  } else   if (structureType == Terrains.BRIDGE) {    buffer.append("Bridge #");  } else {    buffer.append("Structure #");  }  buffer.append(id);  name=buffer.toString();}  }
class C{  public String toString(){  long ncompleted;  int nworkers, nactive;  final ReentrantLock mainLock=this.mainLock;  mainLock.lock();  try {    ncompleted=completedTaskCount;    nactive=0;    nworkers=workers.size();    for (    Worker w : workers) {      ncompleted+=w.completedTasks;      if (w.isLocked())       ++nactive;    }  }  finally {    mainLock.unlock();  }  int c=ctl.get();  String rs=(runStateLessThan(c,SHUTDOWN) ? "Running" : (runStateAtLeast(c,TERMINATED) ? "Terminated" : "Shutting down"));  return super.toString() + "[" + rs+ ", pool size = "+ nworkers+ ", active threads = "+ nactive+ ", queued tasks = "+ workQueue.size()+ ", completed tasks = "+ ncompleted+ "]";}  }
class C{  public boolean applyOptions() throws IOException {  UpdateManagerSettings.SHOW_PROMOTION_OVERLAYS.setValue(CHECK_BOX.isSelected());  return false;}  }
class C{  private static File logDirectory() throws IgniteCheckedException {  return !F.isEmpty(U.IGNITE_LOG_DIR) ? new File(U.IGNITE_LOG_DIR) : U.resolveWorkDirectory("log",false);}  }
class C{  public void addService(PluginEntry entry){  this.entryMap.put(entry.service,entry);  if (entry.plugin != null) {    entry.plugin.privateInitialize(entry.service,ctx,app,app.getPreferences());    pluginMap.put(entry.service,entry.plugin);  }}  }
class C{  public void shutDown(){  stunStack.removeSocket(serverAddress);  messageSequence.removeAllElements();  localSocket.close();}  }
class C{  private void fillListDown(int bottomEdge,final int offset){  while (bottomEdge + offset < getHeight() && mLastItemPosition < mAdapter.getCount() - 1) {    mLastItemPosition++;    final View newBottomchild=mAdapter.getView(mLastItemPosition,getCachedView(),this);    addAndMeasureChild(newBottomchild,LAYOUT_MODE_BELOW);    bottomEdge+=getChildHeight(newBottomchild);  }}  }
class C{  public WbXmlTagDef locateTag(byte pageCode,byte tag){  return this.tagsByToken.get(new WbXmlToken(pageCode,tag));}  }
class C{  protected Error(String message,Throwable cause,boolean enableSuppression,boolean writableStackTrace){  super(message,cause,enableSuppression,writableStackTrace);}  }
class C{  private boolean rebuildItems(){  boolean updated=false;  ItemsRange range=getItemsRange();  if (itemsLayout != null) {    int first=recycle.recycleItems(itemsLayout,firstItem,range);    updated=firstItem != first;    firstItem=first;  } else {    createItemsLayout();    updated=true;  }  if (!updated) {    updated=firstItem != range.getFirst() || itemsLayout.getChildCount() != range.getCount();  }  if (firstItem > range.getFirst() && firstItem <= range.getLast()) {    for (int i=firstItem - 1; i >= range.getFirst(); i--) {      if (!addViewItem(i,true)) {        break;      }      firstItem=i;    }  } else {    firstItem=range.getFirst();  }  int first=firstItem;  for (int i=itemsLayout.getChildCount(); i < range.getCount(); i++) {    if (!addViewItem(firstItem + i,false) && itemsLayout.getChildCount() == 0) {      first++;    }  }  firstItem=first;  return updated;}  }
class C{  public FrameStateBuilder(GraphBuilderTool tool,ResolvedJavaMethod method,StructuredGraph graph){  this(tool,new ResolvedJavaMethodBytecode(method),graph);}  }
class C{  @Override public void endElement(String namespace,String localName,String qName) throws SAXException {  logger.fine("End element " + qName);  if (unrecognizedElements > 0) {    --unrecognizedElements;    if (curHandler != null && curHandler.innerXml != null) {      try {        curHandler.innerXml.endElement();      } catch (      IOException e) {        throw new SAXException(e);      }    }  } else   if (curHandler != null) {    if (curHandler.xmlBlob != null) {      StringBuffer blob=curHandler.innerXmlStringWriter.getBuffer();      if (blob.length() != 0) {        curHandler.xmlBlob.setBlob(blob.toString());        if (curHandler.fullTextIndex) {          curHandler.xmlBlob.setFullText(curHandler.fullTextIndexWriter.toString());        }      }    }    try {      if (curHandler.buffer != null) {        curHandler.value=curHandler.buffer.toString();        curHandler.buffer=null;      }      curHandler.processEndElement();    } catch (    ParseException e) {      throw new SAXException(e);    }    curHandler=curHandler.parent;  }}  }
class C{  private Map readMap0(@Nullable BinaryMapFactory factory) throws BinaryObjectException {switch (checkFlag(MAP)) {case NORMAL:    return (Map)BinaryUtils.doReadMap(in,ctx,ldr,this,true,factory);case HANDLE:{    int handlePos=BinaryUtils.positionForHandle(in) - in.readInt();    Object obj=getHandle(handlePos);    if (obj == null) {      int retPos=in.position();      streamPosition(handlePos);      obj=readMap0(factory);      streamPosition(retPos);    }    return (Map)obj;  }default :return null;}}  }
class C{  public PaintEvent(Component source,int id,Rectangle updateRect){  super(source,id);  this.updateRect=updateRect;}  }
class C{  protected FilterList buildQualifierFilter(List<QualifierFilterEntity> qualifierFilters){  FilterList list=new FilterList(Operator.MUST_PASS_ALL);  for (  QualifierFilterEntity entry : qualifierFilters) {    if (entry.getKeyType() == TokenType.EXP || entry.getValueType() == TokenType.EXP || entry.getKeyType() != TokenType.ID) {      if (!EagleConfigFactory.load().isCoprocessorEnabled()) {        LOG.warn("Expression in filter may not support, because custom filter and coprocessor is disabled: " + entry.toString());      }      list.addFilter(buildExpressionBasedFilter(entry));      continue;    }    String qualifierName=entry.getKey();    if (!isTag(entry.getKey())) {      Qualifier qualifier=_ed.getDisplayNameMap().get(entry.getKey());      qualifierName=qualifier.getQualifierName();    }    ByteArrayComparable comparable;    if (ComparisonOperator.IN.equals(entry.getOp()) || ComparisonOperator.NOT_IN.equals(entry.getOp())) {      Filter setFilter=buildListQualifierFilter(entry);      if (setFilter != null) {        list.addFilter(setFilter);      }    } else {      if (TokenType.NULL.equals(entry.getValueType())) {        if (ComparisonOperator.EQUAL.equals(entry.getOp()) || ComparisonOperator.NOT_EQUAL.equals(entry.getOp()) || ComparisonOperator.IS.equals(entry.getOp())|| ComparisonOperator.IS_NOT.equals(entry.getOp()))         comparable=new NullComparator(); else         throw new IllegalArgumentException("Operation: " + entry.getOp() + " with NULL is not supported yet: "+ entry.toString()+ ", avaliable options: [=, !=, is, is not] null|NULL");      } else       if (ComparisonOperator.CONTAINS.equals(entry.getOp()) || ComparisonOperator.NOT_CONTAINS.equals(entry.getOp())) {        comparable=new SubstringComparator(entry.getValue());      } else       if (ComparisonOperator.LIKE.equals(entry.getOp()) || ComparisonOperator.NOT_LIKE.equals(entry.getOp())) {        RegexStringComparator _comparator=new RegexStringComparator(buildQualifierRegex(entry.getValue()));        _comparator.setCharset(_charset);        comparable=_comparator;      } else {        Class type=EntityQualifierUtils.getType(_ed,entry.getKey());        if (!EagleConfigFactory.load().isCoprocessorEnabled() || type == null || TypedByteArrayComparator.get(type) == null) {          comparable=new BinaryComparator(EntityQualifierUtils.toBytes(_ed,entry.getKey(),entry.getValue()));        } else {          comparable=new TypedByteArrayComparator(EntityQualifierUtils.toBytes(_ed,entry.getKey(),entry.getValue()),type);        }      }      SingleColumnValueFilter filter=new SingleColumnValueFilter(_ed.getColumnFamily().getBytes(),qualifierName.getBytes(),convertToHBaseCompareOp(entry.getOp()),comparable);      filter.setFilterIfMissing(_filterIfMissing);      list.addFilter(filter);    }  }  return list;}  }
class C{  public boolean containsETag(byte[] check){  if (etag_list == null)   return false;  for (  byte[] etag : etag_list) {    if (Arrays.equals(etag,check))     return true;  }  return false;}  }
class C{  private String escapify(String s){  StringBuilder result=new StringBuilder(s.length() * 2);  for (int i=0; i < s.length(); i++) {    char c=s.charAt(i);switch (c) {case '\'':      result.append("\\\'");    break;case '\"':  result.append("\\\"");break;case '\\':result.append("\\\\");break;case '\t':result.append("\\t");break;case '\r':if (i + 1 == s.length() || s.charAt(i + 1) != '\n') result.append("\"+ZZ_NL+\"");break;case '\n':result.append("\"+ZZ_NL+\"");break;default :result.append(c);}}return result.toString();}  }
class C{  @Override public void flush() throws IOException {  writer.flush();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_textsplittexttwo.class,args);}  }
class C{  protected Size2D arrangeFR(BlockContainer container,Graphics2D g2,RectangleConstraint constraint){  Size2D s=arrangeFN(container,g2,constraint);  if (constraint.getHeightRange().contains(s.height)) {    return s;  } else {    RectangleConstraint c=constraint.toFixedHeight(constraint.getHeightRange().constrain(s.getHeight()));    return arrangeFF(container,g2,c);  }}  }
class C{  public void writeHeader() throws IOException {  out.write(headerWithComment);  totalLength+=headerWithComment.length;  StringBuffer sb=new StringBuffer();  for (  Map.Entry<Long,Long> entry : offsetMap.entrySet()) {    sb.append(entry.getKey()).append(":").append(entry.getValue()).append(";");  }  out.write(sb.toString().getBytes());  totalLength+=sb.toString().getBytes().length;  out.write(new byte[]{0});  totalLength+=1;  crc.reset();}  }
class C{  public static int indexOf(byte[] array,byte value,int startIndex){  for (int i=startIndex; i < array.length; i++) {    if (array[i] == value) {      return i;    }  }  return -1;}  }
class C{  void initFromCameraParameters(OpenCamera camera){  Camera.Parameters parameters=camera.getCamera().getParameters();  WindowManager manager=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);  Display display=manager.getDefaultDisplay();  int displayRotation=display.getRotation();  int cwRotationFromNaturalToDisplay;switch (displayRotation) {case Surface.ROTATION_0:    cwRotationFromNaturalToDisplay=0;  break;case Surface.ROTATION_90:cwRotationFromNaturalToDisplay=90;break;case Surface.ROTATION_180:cwRotationFromNaturalToDisplay=180;break;case Surface.ROTATION_270:cwRotationFromNaturalToDisplay=270;break;default :if (displayRotation % 90 == 0) {cwRotationFromNaturalToDisplay=(360 + displayRotation) % 360;} else {throw new IllegalArgumentException("Bad rotation: " + displayRotation);}}Log.i(TAG,"Display at: " + cwRotationFromNaturalToDisplay);int cwRotationFromNaturalToCamera=camera.getOrientation();Log.i(TAG,"Camera at: " + cwRotationFromNaturalToCamera);if (camera.getFacing() == CameraFacing.FRONT) {cwRotationFromNaturalToCamera=(360 - cwRotationFromNaturalToCamera) % 360;Log.i(TAG,"Front camera overriden to: " + cwRotationFromNaturalToCamera);}cwRotationFromDisplayToCamera=(360 + cwRotationFromNaturalToCamera - cwRotationFromNaturalToDisplay) % 360;Log.i(TAG,"Final display orientation: " + cwRotationFromDisplayToCamera);if (camera.getFacing() == CameraFacing.FRONT) {Log.i(TAG,"Compensating rotation for front camera");cwNeededRotation=(360 - cwRotationFromDisplayToCamera) % 360;} else {cwNeededRotation=cwRotationFromDisplayToCamera;}Log.i(TAG,"Clockwise rotation from display to camera: " + cwNeededRotation);Point theScreenResolution=new Point();display.getSize(theScreenResolution);screenResolution=theScreenResolution;Log.i(TAG,"Screen resolution in current orientation: " + screenResolution);cameraResolution=CameraConfigurationUtils.findBestPreviewSizeValue(parameters,screenResolution);Log.i(TAG,"Camera resolution: " + cameraResolution);bestPreviewSize=CameraConfigurationUtils.findBestPreviewSizeValue(parameters,screenResolution);Log.i(TAG,"Best available preview size: " + bestPreviewSize);boolean isScreenPortrait=screenResolution.x < screenResolution.y;boolean isPreviewSizePortrait=bestPreviewSize.x < bestPreviewSize.y;if (isScreenPortrait == isPreviewSizePortrait) {previewSizeOnScreen=bestPreviewSize;} else {previewSizeOnScreen=new Point(bestPreviewSize.y,bestPreviewSize.x);}Log.i(TAG,"Preview size on screen: " + previewSizeOnScreen);}  }
class C{  public void remove(@NonNull T item){  int removeIndex;synchronized (lock) {    if (items == null) {      return;    }    removeIndex=items.indexOf(item);    if (removeIndex != -1) {      items.remove(removeIndex);    }  }  if (notifyOnChange && removeIndex != -1) {    notifyItemRemoved(removeIndex);  }}  }
class C{  public static Value Assert(Value v1,Value v2){  if ((v1 instanceof BoolValue) && ((BoolValue)v1).val) {    return v1;  }  throw new EvalException(EC.TLC_VALUE_ASSERT_FAILED,Value.ppr(v2.toString()));}  }
class C{  public T execute(DatabaseConnection databaseConnection,ID id,ObjectCache objectCache) throws SQLException {  if (objectCache != null) {    T result=objectCache.get(clazz,id);    if (result != null) {      return result;    }  }  Object[] args=new Object[]{convertIdToFieldObject(id)};  Object result=databaseConnection.queryForOne(statement,args,argFieldTypes,this,objectCache);  if (result == null) {    logger.debug("{} using '{}' and {} args, got no results",label,statement,args.length);  } else   if (result == DatabaseConnection.MORE_THAN_ONE) {    logger.error("{} using '{}' and {} args, got >1 results",label,statement,args.length);    logArgs(args);    throw new SQLException(label + " got more than 1 result: " + statement);  } else {    logger.debug("{} using '{}' and {} args, got 1 result",label,statement,args.length);  }  logArgs(args);  @SuppressWarnings("unchecked") T castResult=(T)result;  return castResult;}  }
class C{  public T caseBinaryLogicalExpression(BinaryLogicalExpression object){  return null;}  }
class C{  public String toString(long bits){  double x=Double.longBitsToDouble(bits);  String numStr=Long.toBinaryString(bits);  String padStr="0000000000000000000000000000000000000000000000000000000000000000" + numStr;  String bitStr=padStr.substring(padStr.length() - 64);  String str=bitStr.substring(0,1) + "  " + bitStr.substring(1,12)+ "(exp) "+ bitStr.substring(12)+ " [ "+ x+ " ]";  return str;}  }
class C{  protected String logMethodname(){  StackTraceElement stackTraceElement=Thread.currentThread().getStackTrace()[2];  String name=stackTraceElement.getClassName() + "." + stackTraceElement.getMethodName()+ "";  return "INSIDE of " + name;}  }
class C{  public final OutputStream openContentOutputStream(Uri uri) throws FileNotFoundException {  ContentProviderClient contentProviderClient=null;  try {    contentProviderClient=mContentResolver.acquireContentProviderClient(uri);    return contentProviderClient.getLocalContentProvider().openAssetFile(uri,"w").createOutputStream();  } catch (  IOException e) {    throw new FileNotFoundException("Unable to create stream");  } finally {    if (contentProviderClient != null) {      contentProviderClient.release();    }  }}  }
class C{  public static RealVariable newReal(double lowerBound,double upperBound){  return new RealVariable(lowerBound,upperBound);}  }
class C{  static String formatTimeLocation(Context context,long startMillis,boolean allDay,String location){  String tz=Utils.getTimeZone(context,null);  Time time=new Time(tz);  time.setToNow();  int today=Time.getJulianDay(time.toMillis(false),time.gmtoff);  time.set(startMillis);  int eventDay=Time.getJulianDay(time.toMillis(false),allDay ? 0 : time.gmtoff);  int flags=DateUtils.FORMAT_ABBREV_ALL;  if (!allDay) {    flags|=DateUtils.FORMAT_SHOW_TIME;    if (DateFormat.is24HourFormat(context)) {      flags|=DateUtils.FORMAT_24HOUR;    }  } else {    flags|=DateUtils.FORMAT_UTC;  }  if (eventDay < today || eventDay > today + 1) {    flags|=DateUtils.FORMAT_SHOW_DATE;  }  StringBuilder sb=new StringBuilder(Utils.formatDateRange(context,startMillis,startMillis,flags));  if (!allDay && tz != Time.getCurrentTimezone()) {    time.set(startMillis);    boolean isDST=time.isDst != 0;    sb.append(" ").append(TimeZone.getTimeZone(tz).getDisplayName(isDST,TimeZone.SHORT,Locale.getDefault()));  }  if (eventDay == today + 1) {    sb.append(", ");    sb.append(context.getString(R.string.tomorrow));  }  String loc;  if (location != null && !TextUtils.isEmpty(loc=location.trim())) {    sb.append(", ");    sb.append(loc);  }  return sb.toString();}  }
class C{  private static ImmutableList<Token> deindentPreCodeBlocks(List<Token> input){  ImmutableList.Builder<Token> output=ImmutableList.builder();  for (PeekingIterator<Token> tokens=peekingIterator(input.iterator()); tokens.hasNext(); ) {    if (tokens.peek().getType() != PRE_OPEN_TAG) {      output.add(tokens.next());      continue;    }    output.add(tokens.next());    List<Token> initialNewlines=new ArrayList<>();    while (tokens.hasNext() && tokens.peek().getType() == FORCED_NEWLINE) {      initialNewlines.add(tokens.next());    }    if (tokens.peek().getType() != LITERAL || !tokens.peek().getValue().matches("[ \t]*[{]@code")) {      output.addAll(initialNewlines);      output.add(tokens.next());      continue;    }    deindentPreCodeBlock(output,tokens);  }  return output.build();}  }
class C{  @Override public boolean batchFinished() throws Exception {  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (m_MinArray == null) {    Instances input=getInputFormat();    m_MinArray=new double[input.numAttributes()];    m_MaxArray=new double[input.numAttributes()];    for (int i=0; i < input.numAttributes(); i++) {      m_MinArray[i]=Double.NaN;    }    for (int j=0; j < input.numInstances(); j++) {      double[] value=input.instance(j).toDoubleArray();      for (int i=0; i < input.numAttributes(); i++) {        if (input.attribute(i).isNumeric() && (input.classIndex() != i)) {          if (!Utils.isMissingValue(value[i])) {            if (Double.isNaN(m_MinArray[i])) {              m_MinArray[i]=m_MaxArray[i]=value[i];            } else {              if (value[i] < m_MinArray[i]) {                m_MinArray[i]=value[i];              }              if (value[i] > m_MaxArray[i]) {                m_MaxArray[i]=value[i];              }            }          }        }      }    }    for (int i=0; i < input.numInstances(); i++) {      convertInstance(input.instance(i));    }  }  flushInput();  m_NewBatch=true;  return (numPendingOutput() != 0);}  }
class C{  public static void main(String[] args){  SpringApplication.run(Application.class,args);}  }
class C{  public EntityMigrationBuilder renameAssociation(String from,String to){  migrationBuilder.builder.entityMigrationRules().addRule(new EntityMigrationRule(migrationBuilder.fromVersion,migrationBuilder.toVersion,entityTypes,new RenameAssociation(from,to)));  return this;}  }
class C{  private void addGeolocSharing(GeolocSharingImpl geolocSharing,String sharingId){  if (sLogger.isActivated()) {    sLogger.debug(new StringBuilder("Add an geoloc sharing in the list (size=").append(mGeolocSharingCache.size()).append(")").toString());  }  mGeolocSharingCache.put(sharingId,geolocSharing);}  }
class C{  Item newNameTypeItem(final String name,final String desc){  key2.set(NAME_TYPE,name,desc,null);  Item result=get(key2);  if (result == null) {    put122(NAME_TYPE,newUTF8(name),newUTF8(desc));    result=new Item(index++,key2);    put(result);  }  return result;}  }
class C{  public static void init(Context context){  if (null == context) {    throw new IllegalArgumentException("context cannot be null.");  }  mContext=context.getApplicationContext();}  }
class C{  public SnmpString(byte[] v){  value=v.clone();}  }
class C{  public PeerTaskResults<T> executeParallel(){  Preconditions.checkArgument(!CollectionUtil.isCollectionEmpty(peerTasks),"No peer task found for execution");  Set<PeerTaskResult<T>> results=executeParallel(peerTasks,false);  peerTasks.clear();  return new PeerTaskResults<>(results);}  }
class C{  @Override public String rpop(final String key){  checkIsInMultiOrPipeline();  client.rpop(key);  return client.getBulkReply();}  }
class C{  public Object eval(BSHType typeNode,CallStack callstack,Interpreter interpreter) throws EvalError {  Object value=null;  if (jjtGetNumChildren() > 0) {    SimpleNode initializer=(SimpleNode)jjtGetChild(0);    if ((typeNode != null) && initializer instanceof BSHArrayInitializer)     value=((BSHArrayInitializer)initializer).eval(typeNode.getBaseType(),typeNode.getArrayDims(),callstack,interpreter); else     value=initializer.eval(callstack,interpreter);  }  if (value == Primitive.VOID)   throw new EvalError("Void initializer.",this,callstack);  return value;}  }
class C{  public void runScript(Reader reader) throws IOException, SQLException {  try {    boolean originalAutoCommit=connection.getAutoCommit();    try {      if (originalAutoCommit != this.autoCommit) {        connection.setAutoCommit(this.autoCommit);      }      runScript(connection,reader);    }  finally {      connection.setAutoCommit(originalAutoCommit);    }  } catch (  IOException|SQLException e) {    throw e;  }catch (  Exception e) {    throw new RuntimeException("Error running script.  Cause: " + e,e);  }}  }
class C{  void stopBridgeServer(Cache cache){  CacheServer bridge=cache.getCacheServers().iterator().next();  bridge.stop();  assertFalse(bridge.isRunning());}  }
class C{  private void updateStyle(JTextComponent c){  SeaGlassContext context=getContext(c,ENABLED);  SynthStyle oldStyle=style;  SynthStyle s=SeaGlassLookAndFeel.updateStyle(context,this);  if (s instanceof SeaGlassStyle) {    style=(SeaGlassStyle)s;    updateSearchStyle(c,context,getPropertyPrefix());    if (style != oldStyle) {      updateStyle(c,context,getPropertyPrefix());      if (oldStyle != null) {        uninstallKeyboardActions();        installKeyboardActions();      }    }  }  context.dispose();  context=getContext(c,SeaGlassRegion.SEARCH_FIELD_FIND_BUTTON,ENABLED);  findStyle=SeaGlassLookAndFeel.updateStyle(context,this);  context.dispose();  context=getContext(c,SeaGlassRegion.SEARCH_FIELD_CANCEL_BUTTON,ENABLED);  cancelStyle=SeaGlassLookAndFeel.updateStyle(context,this);  context.dispose();}  }
class C{  public static void checkFieldValueWithExpected(final boolean condition,final String fieldName,final Object value,final Object... expected){  if (!condition) {    throw APIException.badRequests.invalidParameterValueWithExpected(fieldName,value,expected);  }}  }
class C{  public static String s2(int v){  char[] result=new char[5];  if (v < 0) {    result[0]='-';    v=-v;  } else {    result[0]='+';  }  for (int i=0; i < 4; i++) {    result[4 - i]=Character.forDigit(v & 0x0f,16);    v>>=4;  }  return new String(result);}  }
class C{  public MailContent end(){  if (ends.isEmpty())   throw new IllegalStateException("No pending tag/section to close.");  html.a(ends.pop());  return this;}  }
class C{  public void testAckedMessageAreConsumed() throws Exception {  connection.start();  Session session=connection.createSession(false,Session.CLIENT_ACKNOWLEDGE);  Queue queue=session.createQueue("test");  MessageProducer producer=session.createProducer(queue);  producer.send(session.createTextMessage("Hello"));  MessageConsumer consumer=session.createConsumer(queue);  consumer.setMessageListener(this);  Thread.sleep(10000);  session.close();  session=connection.createSession(false,Session.CLIENT_ACKNOWLEDGE);  consumer=session.createConsumer(queue);  Message msg=consumer.receive(1000);  assertNull(msg);  session.close();}  }
class C{  protected void clearDirtyRect(){  this.dirtyRect=null;}  }
class C{  public void testElementDoesNotExists(){  onView(withId(R.id.navigation_fragment_text)).check(doesNotExist());}  }
class C{  public boolean isCodeAttribute(){  return false;}  }
class C{  protected void sequence_ArrayTypeRef_ParameterizedTypeRefNominal_TypeRefWithModifiers_TypeRefWithoutModifiers(ISerializationContext context,ParameterizedTypeRef semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public static String quote(String name){  return "$" + name;}  }
class C{  public static void registerConfig(){  Config.registerSelf(JNDI.class);  usingJNDI=!"".equals(Config.parms.getString("cf")) || Config.parms.getString("pc").equalsIgnoreCase("jndi");}  }
class C{  private void doTest() throws Exception {  Ignite ignite=startGrid();  try {    IgniteCache<Integer,Integer> cache=ignite.cache(CACHE_NAME);    for (int i=0; i < N_ENTRIES; i++)     load(cache,i,true);    assertEquals(MAX_CACHE_ENTRIES,cache.size());  }  finally {    stopGrid();  }}  }
class C{  public static void main(final String[] args){  try {    if (args.length > 0) {      int i=0;      String username=null;      String password=null;      String character=null;      String host=null;      String port=null;      String targetPlayer=null;      while (i != args.length) {        if (args[i].equals("-u")) {          username=args[i + 1];        } else         if (args[i].equals("-p")) {          password=args[i + 1];        } else         if (args[i].equals("-c")) {          character=args[i + 1];        } else         if (args[i].equals("-h")) {          host=args[i + 1];        } else         if (args[i].equals("-P")) {          port=args[i + 1];        } else         if (args[i].equals("-t")) {          targetPlayer=args[i + 1];        }        i++;      }      if ((username != null) && (password != null) && (character != null)&& (host != null)&& (port != null)) {        final Answer shouter=new Answer(host,username,password,character,port,targetPlayer);        shouter.script();        return;      }    }    System.out.println("Stendhal textClient");    System.out.println();    System.out.println("  games.stendhal.bot.support.Answer -u username -p pass -h host -P port -c character -t targetPlayer");    System.out.println();    System.out.println("Required parameters");    StandardClientFramework.printConnectionParameters();    System.out.println("* -t\tTarget player to answer to");  } catch (  final Exception e) {    e.printStackTrace(System.err);    System.exit(1);  }}  }
class C{  public static void main(String[] args){  try {    int serverPort=Integer.parseInt(System.getProperty("net.floodlightcontroller.packetstreamer.port","9090"));    TTransport transport;    transport=new TFramedTransport(new TSocket("localhost",serverPort));    transport.open();    TProtocol protocol=new TBinaryProtocol(transport);    PacketStreamer.Client client=new PacketStreamer.Client(protocol);    sendPackets(client,(short)2,OFMessageType.PACKET_IN,true);    log.debug("Terminate session1");    client.terminateSession("session1");    transport.close();  } catch (  TException x) {    x.printStackTrace();  }}  }
class C{  public boolean containsDuplicateIdentities(){  List<Identity> checkedIdentities=new LinkedList<Identity>();  for (  Identity i : identities) {    for (    Identity i2 : checkedIdentities) {      if (i.equals(i2))       return true;    }    checkedIdentities.add(i);  }  return false;}  }
class C{  public CityHall(){  super();}  }
class C{  ParsePluginList(){  fMimeTypeToPluginMap=new HashMap<String,List<String>>();  aliases=new HashMap<String,String>();}  }
class C{  public void moveLeft(){  Coord scale=_map.scale(_zoom);  double partX=1.0 * getWidth() / 4;  _center=_center.translate(0,partX * -scale.getLongitude());  _needTiles=true;}  }
class C{  public boolean isInitialized(){  return containerFormat != null;}  }
class C{  public double interpolate(Coord coord){  if (sg != null && coord != null)   return interpolate(coord.getX(),coord.getY());  log.warn("Either the spatial grid is not initialized or the coordinates are zero!");  return Double.NaN;}  }
class C{  public BinaryBlockFrame(DataFrame dataFrame){  this(dataFrame,new FrameMetadata());}  }
class C{  private void fixLeader(){  if (membersAndLastSeen.isEmpty()) {    return;  }  if ((leader == null) || !membersAndLastSeen.containsKey(leader)) {    leader=membersAndLastSeen.keySet().iterator().next();    new GameEvent(leader,"group",leader,"leader fixed").raise();  }}  }
class C{  private void validateServerClientID(){  String serverClientId=getString(R.string.server_client_id);  String suffix=".apps.googleusercontent.com";  if (!serverClientId.trim().endsWith(suffix)) {    String message="Invalid server client ID in strings.xml, must end with " + suffix;    Log.w(TAG,message);    Toast.makeText(this,message,Toast.LENGTH_LONG).show();  }}  }
class C{  public static boolean isDialogCreated(String method){  return dialogCreatingMethods.contains(method);}  }
class C{  public Vec3D constrain(Vec3D min,Vec3D max){  x=MathUtils.clip(x,min.x,max.x);  y=MathUtils.clip(y,min.y,max.y);  z=MathUtils.clip(z,min.z,max.z);  return this;}  }
class C{  @Override protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  processGetRequest(request,response);}  }
class C{  public WriteRequest(final Mode mode,final int objectId,final int objectInstanceId,final Collection<LwM2mResource> resources){  this(mode,ContentFormat.TLV,new LwM2mPath(objectId,objectInstanceId),new LwM2mObjectInstance(objectId,resources));}  }
class C{  public boolean isPad(){  return pad;}  }
class C{  private void follow(final String followerId,final String followingId,final int followingType) throws RepositoryException {  if (followRepository.exists(followerId,followingId)) {    return;  }  if (Follow.FOLLOWING_TYPE_C_TAG == followingType) {    final JSONObject tag=tagRepository.get(followingId);    if (null == tag) {      LOGGER.log(Level.ERROR,"Not found tag [id={0}] to follow",followingId);      return;    }    tag.put(Tag.TAG_FOLLOWER_CNT,tag.optInt(Tag.TAG_FOLLOWER_CNT) + 1);    tagRepository.update(followingId,tag);  } else   if (Follow.FOLLOWING_TYPE_C_ARTICLE == followingType) {    final JSONObject article=articleRepository.get(followingId);    if (null == article) {      LOGGER.log(Level.ERROR,"Not found article [id={0}] to follow",followingId);      return;    }    article.put(Article.ARTICLE_COLLECT_CNT,article.optInt(Article.ARTICLE_COLLECT_CNT) + 1);    articleRepository.update(followingId,article);  }  final JSONObject follow=new JSONObject();  follow.put(Follow.FOLLOWER_ID,followerId);  follow.put(Follow.FOLLOWING_ID,followingId);  follow.put(Follow.FOLLOWING_TYPE,followingType);  followRepository.add(follow);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:27.811 -0500",hash_original_method="58EF09653819A20604D2729AAEA1E73D",hash_generated_method="C87E0A918200362DCA05AAF69DC212CC") public int indexOf(String subString,int start){  this.addTaint(subString.getTaint());  addTaint(start);  return getTaintInt();}  }
class C{  public static String requestPath(URL url){  String fileOnly=url.getFile();  if (fileOnly == null) {    return "/";  } else   if (!fileOnly.startsWith("/")) {    return "/" + fileOnly;  } else {    return fileOnly;  }}  }
class C{  public boolean hasMethod(){  return method(CONCRETE) != null || method(ABSTRACT) != null;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:09.260 -0500",hash_original_method="300271373C98AD70F0D1DFEC9CC1821E",hash_generated_method="59165EC4A27D0BFC06FEA206895769A9") public void offset(float dx,float dy,Path dst){  addTaint(dx + dy);  if (dst != null) {    dst.addTaint(getTaint());  }}  }
class C{  private static int startsWithLenient(String s,String match,int minChars,boolean acceptTrailing){  if (s.charAt(0) != match.charAt(0))   return -1;  if (minChars == -1)   minChars=match.length();  int sSz=s.length();  if (sSz < minChars)   return -1;  int mSz=match.length();  int sIx=0;  for (int mIx=0; mIx < mSz; sIx++, mIx++) {    while (sIx < sSz && (s.charAt(sIx) == ' ' || s.charAt(sIx) == '_'))     sIx++;    if (sIx >= sSz || s.charAt(sIx) != match.charAt(mIx))     return mIx >= minChars && (acceptTrailing || sIx >= sSz) && (sIx >= sSz || s.charAt(sIx - 1) == ' ') ? sIx : -1;  }  return sIx >= sSz || acceptTrailing || s.charAt(sIx) == ' ' ? sIx : -1;}  }
class C{  public String typeName(){  return "utf8";}  }
class C{  public boolean isUsingZOrder(Context context){  return !Settings.getInstance(context).preferStaticShadows();}  }
class C{  public static BookConf bookConf(int bookId,String entidad){  BookConf result=null;  try {    result=ConfiguratorBook.getInstance(entidad).getBookConf(bookId);  } catch (  Exception e) {    log.error("Impossible to load invesicres configuration",e);  }  return result;}  }
class C{  public ImException(String message,Throwable cause){  super(message,cause);}  }
class C{  public VNXeCommandJob deleteLun(String lunId,boolean forceSnapDeletion) throws VNXeException {  _logger.info("deleting lun: " + lunId);  DeleteStorageResourceRequest req=new DeleteStorageResourceRequest(_khClient);  return req.deleteLunAsync(lunId,forceSnapDeletion);}  }
class C{  public SpecificX10Light(String systemName,SerialTrafficController tc,String userName){  super(systemName,tc,userName);  this.tc=tc;  maxDimStep=22;}  }
class C{  public void push(final Handle handle){  mv.visitLdcInsn(handle);}  }
class C{  private boolean checkClassAnnotationCompliace(){  if (mClass.isAnnotation()) {    for (    String inter : implInterfaces) {      if ("java.lang.annotation.Annotation".equals(inter)) {        return true;      }    }    return false;  }  return true;}  }
class C{  public static boolean isValidVector(Vector2f vector){  if (vector == null)   return false;  if (Float.isNaN(vector.x) || Float.isNaN(vector.y))   return false;  if (Float.isInfinite(vector.x) || Float.isInfinite(vector.y))   return false;  return true;}  }
class C{  public static IGraph rewireGraphCount(final IScope scope,final IGraph graph,final Integer count){  final IList edges=graph.getEdges();  for (int i=0; i < count; i++) {    final Object currentEdge=edges.get(scope.getRandom().between(0,graph.getEdges().length(null) - 1));    final Object from=graph.getEdgeSource(currentEdge);    System.err.println("removing " + from);    final Object toNode=getAnotherRandomNode(scope,graph,from);    System.err.println("rewiring " + graph.getEdgeTarget(currentEdge) + " to "+ toNode);    graph.removeEdge(currentEdge);    graph.addEdge(from,toNode,currentEdge);  }  return graph;}  }
class C{  public static void logMapped(@Nullable IgniteLogger log,Class<?> clazz,Collection<ClusterNode> nodes){  log0(log,U.currentTimeMillis(),String.format("[%s]: MAPPED: %s",clazz.getSimpleName(),U.toShortString(nodes)));}  }
class C{  protected RegularEventSpecImpl(){  super();}  }
class C{  @Override protected EClass eStaticClass(){  return GamlPackage.Literals.COLOR_LITERAL;}  }
class C{  public void exitApplication(){  android.os.Process.killProcess(android.os.Process.myPid());}  }
class C{  public WWUnrecognizedException(String msg){  super(msg);}  }
class C{  public long position() throws IOException {  return off - origin;}  }
class C{  public String change() throws SaaSApplicationException {  boolean wasPwdChangeRequired=isPasswordChangeRequired();  try {    getIdService().changePassword(currentPassword,password);  } catch (  SecurityCheckException e) {    VOUserDetails user=getIdService().getCurrentUserDetails();    if (user.getStatus() == UserAccountStatus.LOCKED_FAILED_LOGIN_ATTEMPTS) {      if (!isChangePwdOnLogin()) {        return logoff();      } else {        invalidateSession();      }    }    getRequest().setAttribute(Constants.REQ_ATTR_ERROR_KEY,"error.changePassword");    throw e;  }  if (wasPwdChangeRequired) {    setUserInSession(getIdService().getCurrentUserDetails());  }  try {    ExternalContext ctx=FacesContext.getCurrentInstance().getExternalContext();    HttpServletRequest request=(HttpServletRequest)ctx.getRequest();    HttpServletResponse response=(HttpServletResponse)ctx.getResponse();    ServiceAccess serviceAccess=ServiceAccess.getServiceAcccessFor(getRequest().getSession());    serviceAccess.login(getUserFromSession().getVOUserDetails(),password,request,response);  } catch (  Exception e) {    SaaSSystemException se=new SaaSSystemException("Login failed after changePassword!");    logger.logError(Log4jLogger.SYSTEM_LOG,se,LogMessageIdentifier.ERROR_LOGIN_FAILED_AFTER_CHANGE_PASSWORD);  }  addMessage(null,FacesMessage.SEVERITY_INFO,INFO_PASSWORD_CHANGED);  organizationBean.resetCurrentUser();  if (isMarketplaceSet(getRequest())) {    return getLoginRedirect(getRequest(),getSession(),!wasPwdChangeRequired);  }  return OUTCOME_SUCCESS;}  }
class C{  private void stop(){  StendhalRPZone zone=StendhalRPWorld.get().getZone(ZONE_NAME);  System.getProperties().remove("stendhal.forcezone");  Portal portal=new Portal();  portal.setPosition(15,28);  portal.setDestination("0_semos_city","townhall_entrance");  zone.add(portal);  zone.remove(NPCList.get().get("Megan"));}  }
class C{  static int rendezvous(String where,int expected){  return current("Barrier-" + where,expected).rendezvous();}  }
class C{  private void initializeFocusManager(){  if (mFocusManager != null) {    mFocusManager.removeMessages();  } else {    mMirror=isCameraFrontFacing();    String[] defaultFocusModesStrings=mActivity.getResources().getStringArray(R.array.pref_camera_focusmode_default_array);    CameraCapabilities.Stringifier stringifier=mCameraCapabilities.getStringifier();    ArrayList<CameraCapabilities.FocusMode> defaultFocusModes=new ArrayList<CameraCapabilities.FocusMode>();    for (    String modeString : defaultFocusModesStrings) {      CameraCapabilities.FocusMode mode=stringifier.focusModeFromString(modeString);      if (mode != null) {        defaultFocusModes.add(mode);      }    }    mFocusManager=new FocusOverlayManager(mAppController,defaultFocusModes,mCameraCapabilities,this,mMirror,mActivity.getMainLooper(),mUI.getFocusRing());  }  mAppController.addPreviewAreaSizeChangedListener(mFocusManager);}  }
class C{  public JsonBuilder(){  this.generator=JsonOutput.DEFAULT_GENERATOR;}  }
class C{  protected Category(ElementKey<?,? extends Category> key){  super(key);}  }
class C{  private boolean isNullSetting(boolean makeDest,MappingType mtd,MappingType mts,StringBuilder result){  if (makeDest && (mtd == ALL_FIELDS || mtd == ONLY_VALUED_FIELDS) && mts == ONLY_NULL_FIELDS) {    result.append("   " + stringOfSetDestination + "(null);"+ newLine);    return true;  }  return false;}  }
class C{  public void testMoveFileDestinationRootSourceMissingPartially() throws Exception {  create(igfsSecondary,paths(DIR,SUBDIR),paths(FILE));  create(igfs,paths(DIR),null);  igfs.rename(FILE,IgfsPath.ROOT);  checkExist(igfs,SUBDIR);  checkExist(igfs,igfsSecondary,new IgfsPath("/" + FILE.name()));  checkNotExist(igfs,igfsSecondary,FILE);}  }
class C{  @Override public int indexOf(Object elem){  if (!(elem instanceof CheckBoxListItem)) {    return super.indexOf(new CheckBoxListItem(elem));  } else {    return super.indexOf(elem);  }}  }
class C{  public boolean reverseAccrualIt(){  log.info("reverseAccrualIt - " + toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_REVERSEACCRUAL);  if (m_processMsg != null)   return false;  MJournal[] journals=getJournals(true);  for (int i=0; i < journals.length; i++) {    MJournal journal=journals[i];    if (!journal.isActive())     continue;    if (DOCSTATUS_Completed.equals(journal.getDocStatus()))     ; else {      m_processMsg="All Journals need to be Completed: " + journal.getSummary();      return false;    }  }  MJournalBatch reverse=new MJournalBatch(this);  reverse.setC_Period_ID(0);  reverse.setDateDoc(new Timestamp(System.currentTimeMillis()));  reverse.setDateAcct(reverse.getDateDoc());  String description=reverse.getDescription();  if (description == null)   description="** " + getDocumentNo() + " **"; else   description+=" ** " + getDocumentNo() + " **";  reverse.setDescription(description);  reverse.saveEx();  for (int i=0; i < journals.length; i++) {    MJournal journal=journals[i];    if (!journal.isActive())     continue;    if (journal.reverseAccrualIt(reverse.getGL_JournalBatch_ID()) == null) {      m_processMsg="Could not reverse " + journal;      return false;    }    journal.saveEx();  }  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_REVERSEACCRUAL);  if (m_processMsg != null)   return false;  return true;}  }
class C{  public static GeoTimeSerie dedup(GeoTimeSerie gts){  GeoTimeSerie clone=gts.clone();  if (clone.values < 2) {    return clone;  }  long[] ticks=Arrays.copyOf(clone.ticks,clone.values);  Arrays.sort(ticks);  Map<Long,AtomicInteger> duplicates=new HashMap<Long,AtomicInteger>();  int idx=0;  int idx2=1;  while (idx2 < clone.values) {    while (idx2 < clone.values && ticks[idx] == ticks[idx2]) {      idx2++;    }    if (idx2 - idx > 1) {      duplicates.put(ticks[idx],new AtomicInteger(idx2 - idx));    }    idx=idx2++;  }  if (0 == duplicates.size()) {    return clone;  }  idx=0;  idx=0;  int offset=0;  while (idx + offset < clone.values) {    while (duplicates.containsKey(clone.ticks[idx + offset]) && duplicates.get(clone.ticks[idx + offset]).decrementAndGet() > 0) {      offset++;    }    if (offset > 0) {      clone.ticks[idx]=clone.ticks[idx + offset];      if (null != clone.locations) {        clone.locations[idx]=clone.locations[idx + offset];      }      if (null != clone.elevations) {        clone.elevations[idx]=clone.elevations[idx + offset];      }switch (clone.type) {case LONG:        clone.longValues[idx]=clone.longValues[idx + offset];      break;case DOUBLE:    clone.doubleValues[idx]=clone.doubleValues[idx + offset];  break;case STRING:clone.stringValues[idx]=clone.stringValues[idx + offset];break;case BOOLEAN:clone.booleanValues.set(idx,clone.booleanValues.get(idx + offset));break;}}idx++;}clone.values-=offset;if (offset > 1000) {GTSHelper.shrink(clone);}return clone;}  }
class C{  public float nextTabStop(float x,int tabOffset){  if (tabSize == 0)   return x;  int ntabs=((int)x - tabBase) / tabSize;  return tabBase + ((ntabs + 1) * tabSize);}  }
class C{  protected void fireTupleEvent(Tuple[] added,Tuple[] removed){  if (m_tupleListeners != null && m_tupleListeners.size() > 0) {    Object[] lstnrs=m_tupleListeners.getArray();    added=added == null ? EMPTY_ARRAY : added;    removed=removed == null ? EMPTY_ARRAY : removed;    for (int i=0; i < lstnrs.length; ++i) {      TupleSetListener tsl=(TupleSetListener)lstnrs[i];      tsl.tupleSetChanged(this,added,removed);    }  }}  }
class C{  private void terminatePortManager(){  if (portManager != null) {    portManager.clear();    portManager=null;  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public ActivityQuery(URL feedUrl){  super(feedUrl);}  }
class C{  private JdkUtils(){}  }
class C{  private String parseCss(final String css){  final Map<String,String> map=new HashMap<String,String>();  final StringBuffer sb=new StringBuffer();  final Matcher m=PATTERN_VARIABLES_DEFINITION.matcher(css);  while (m.find()) {    final String variablesBody=m.group(1);    map.putAll(extractVariables(variablesBody));    m.appendReplacement(sb,"");  }  m.appendTail(sb);  return replaceVariables(sb.toString(),map);}  }
class C{  public VDate(String columnName,boolean mandatory,boolean isReadOnly,boolean isUpdateable,int displayType,String title){  super();  super.setName(columnName);  m_columnName=columnName;  m_title=title;  LookAndFeel.installBorder(this,"TextField.border");  this.setLayout(new BorderLayout());  this.setFocusable(false);  this.setPreferredSize(m_text.getPreferredSize());  int height=m_text.getPreferredSize().height;  setMinimumSize(new Dimension(30,height));  VDate_mouseAdapter mouse=new VDate_mouseAdapter(this);  m_text.addMouseListener(mouse);  m_text.setBorder(null);  m_text.setHorizontalAlignment(JTextField.TRAILING);  if (m_displayType == DisplayType.Date) {    m_text.addFocusListener(this);    m_text.addKeyListener(this);    m_text.setCaret(new VOvrCaret());  } else   if (m_displayType == DisplayType.DateTime)   m_text.setColumns(20);  setMandatory(mandatory);  this.add(m_text,BorderLayout.CENTER);  if (displayType == DisplayType.DateTime || displayType == DisplayType.Time)   m_displayType=displayType;  setFormat();  m_button.setIcon(Env.getImageIcon("Calendar10.gif"));  m_button.setMargin(new Insets(0,0,0,0));  m_button.setPreferredSize(new Dimension(height,height));  m_button.addActionListener(this);  m_button.setFocusable(false);  this.add(m_button,BorderLayout.EAST);  this.setPreferredSize(this.getPreferredSize());  if (isReadOnly || !isUpdateable)   setReadWrite(false); else   setReadWrite(true);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:11.590 -0500",hash_original_method="B349C062BB24F17BF02BDCB43C03970C",hash_generated_method="E5AAAA462ED94F752AE89B378C3DDB02") public Object nextValue() throws JSONException {  int c=nextCleanInternal();switch (c) {case -1:    throw syntaxError("End of input");case '{':  return readObject();case '[':return readArray();case '\'':case '"':return nextString((char)c);default :pos--;return readLiteral();}}  }
class C{  public static long lengthSync(@NonNull File file){  assertIoOperationOnNonThread();  return file.length();}  }
class C{  public int[] reset(){  return init;}  }
class C{  private static int removeWhiteSpace(char[] data){  if (data == null) {    return 0;  }  int newSize=0;  int len=data.length;  for (int i=0; i < len; i++) {    if (!isWhiteSpace(data[i])) {      data[newSize++]=data[i];    }  }  return newSize;}  }
class C{  public static AuxiliaryLHS4SemanticShiftAction createAuxLHS4SemanticShiftAction(String name){  AuxiliaryLHS4SemanticShiftAction obj=null;  Exception why=null;  @SuppressWarnings("unchecked") Constructor con=AuxiliaryLHS4SemanticShiftAction.class.getDeclaredConstructors()[0];  try {    Method[] methods=con.getClass().getDeclaredMethods();    for (    Method m : methods) {      if (m.getName().equals("acquireConstructorAccessor")) {        m.setAccessible(true);        m.invoke(con,new Object[0]);      }    }    Field[] fields=con.getClass().getDeclaredFields();    Object ca=null;    for (    Field f : fields) {      if (f.getName().equals("constructorAccessor")) {        f.setAccessible(true);        ca=f.get(con);      }    }    Method m=ca.getClass().getMethod("newInstance",new Class[]{Object[].class});    m.setAccessible(true);    obj=(AuxiliaryLHS4SemanticShiftAction)m.invoke(ca,new Object[]{new Object[]{name,Integer.MAX_VALUE}});  } catch (  Exception e) {    why=e;  }  if (obj == null || why != null) {    IllegalSpecException rte=new IllegalSpecException("Error during creation of artificial enum at runtime : " + why);    rte.initCause(why);    throw rte;  }  return obj;}  }
class C{  protected void writeElementContent(Element element) throws IOException {  boolean trim=format.isTrimText();  boolean oldPreserve=preserve;  if (trim) {    preserve=isElementSpacePreserved(element);    trim=!preserve;  }  if (trim) {    Text lastTextNode=null;    StringBuilder buff=null;    boolean textOnly=true;    for (    Node node : element.content()) {      if (node instanceof Text) {        if (lastTextNode == null) {          lastTextNode=(Text)node;        } else {          if (buff == null) {            buff=new StringBuilder(lastTextNode.getText());          }          buff.append((node).getText());        }      } else {        if (!textOnly && format.isPadText()) {          char firstChar='a';          if (buff != null) {            firstChar=buff.charAt(0);          } else           if (lastTextNode != null) {            firstChar=lastTextNode.getText().charAt(0);          }          if (Character.isWhitespace(firstChar)) {            writer.write(PAD_TEXT);          }        }        if (lastTextNode != null) {          if (buff != null) {            writeString(buff.toString());            buff=null;          } else {            writeString(lastTextNode.getText());          }          if (format.isPadText()) {            char lastTextChar='a';            if (buff != null) {              lastTextChar=buff.charAt(buff.length() - 1);            } else             if (lastTextNode != null) {              String txt=lastTextNode.getText();              lastTextChar=txt.charAt(txt.length() - 1);            }            if (Character.isWhitespace(lastTextChar)) {              writer.write(PAD_TEXT);            }          }          lastTextNode=null;        }        textOnly=false;        writeNode(node);      }    }    if (lastTextNode != null) {      if (!textOnly && format.isPadText()) {        char firstChar='a';        if (buff != null) {          firstChar=buff.charAt(0);        } else {          firstChar=lastTextNode.getText().charAt(0);        }        if (Character.isWhitespace(firstChar)) {          writer.write(PAD_TEXT);        }      }      if (buff != null) {        writeString(buff.toString());        buff=null;      } else {        writeString(lastTextNode.getText());      }      lastTextNode=null;    }  } else {    Node lastTextNode=null;    for (    Node node : element.content()) {      if (node instanceof Text) {        writeNode(node);        lastTextNode=node;      } else {        if ((lastTextNode != null) && format.isPadText()) {          String txt=lastTextNode.getText();          char lastTextChar=txt.charAt(txt.length() - 1);          if (Character.isWhitespace(lastTextChar)) {            writer.write(PAD_TEXT);          }        }        writeNode(node);        lastTextNode=null;      }    }  }  preserve=oldPreserve;}  }
class C{  public void resize(int toThis){  Individual[] temp=new Individual[toThis];  System.arraycopy(individuals,0,temp,0,toThis);  individuals=temp;}  }
class C{  public static Location locateLargest(double[][] a){  return new Location(a);}  }
class C{  public void itemStateChanged(ItemEvent e){  JToggleButton tb=(JToggleButton)e.getSource();  if (JToggleButton.this.accessibleContext != null) {    if (tb.isSelected()) {      JToggleButton.this.accessibleContext.firePropertyChange(AccessibleContext.ACCESSIBLE_STATE_PROPERTY,null,AccessibleState.CHECKED);    } else {      JToggleButton.this.accessibleContext.firePropertyChange(AccessibleContext.ACCESSIBLE_STATE_PROPERTY,AccessibleState.CHECKED,null);    }  }}  }
class C{  private boolean checkFields(){  final String password=new String(passwordField.getPassword());  final String passwordretype=new String(passwordretypeField.getPassword());  final Window owner=getOwner();  if (!password.equals(passwordretype)) {    JOptionPane.showMessageDialog(owner,"The passwords do not match. Please retype both.","Password Mismatch",JOptionPane.WARNING_MESSAGE);    return false;  }  final boolean valPass=validatePassword(usernameField.getText(),password);  if (!valPass) {    if (badPasswordReason != null) {      final int i=JOptionPane.showOptionDialog(owner,badPasswordReason,"Bad Password",JOptionPane.YES_NO_OPTION,JOptionPane.WARNING_MESSAGE,null,null,1);      if (i == JOptionPane.NO_OPTION) {        return false;      }    } else {      return false;    }  }  final String email=(emailField.getText()).trim();  if (!validateEmail(email)) {    final String warning=badEmailReason + "An email address is the only means for administrators to contact with the legitimate owner of an account.\nIf you don't provide one then you won't be able to get a new password for this account if, for example:\n- You forget your password.\n- Another player somehow gets your password and changes it.\nDo you want to continue anyway?";    final int i=JOptionPane.showOptionDialog(owner,warning,badEmailTitle,JOptionPane.YES_NO_OPTION,JOptionPane.WARNING_MESSAGE,null,null,1);    if (i != 0) {      return false;    }  }  return true;}  }
class C{  public static JFreeChart createXYStepChart(String title,String xAxisLabel,String yAxisLabel,XYDataset dataset,PlotOrientation orientation,boolean legend,boolean tooltips,boolean urls){  ParamChecks.nullNotPermitted(orientation,"orientation");  DateAxis xAxis=new DateAxis(xAxisLabel);  NumberAxis yAxis=new NumberAxis(yAxisLabel);  yAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());  XYToolTipGenerator toolTipGenerator=null;  if (tooltips) {    toolTipGenerator=new StandardXYToolTipGenerator();  }  XYURLGenerator urlGenerator=null;  if (urls) {    urlGenerator=new StandardXYURLGenerator();  }  XYItemRenderer renderer=new XYStepRenderer(toolTipGenerator,urlGenerator);  XYPlot plot=new XYPlot(dataset,xAxis,yAxis,null);  plot.setRenderer(renderer);  plot.setOrientation(orientation);  plot.setDomainCrosshairVisible(false);  plot.setRangeCrosshairVisible(false);  JFreeChart chart=new JFreeChart(title,JFreeChart.DEFAULT_TITLE_FONT,plot,legend);  currentTheme.apply(chart);  return chart;}  }
class C{  public boolean verifySignature(byte[] message,BigInteger r,BigInteger s){  DSAParameters params=key.getParameters();  BigInteger m=calculateE(params.getQ(),message);  BigInteger zero=BigInteger.valueOf(0);  if (zero.compareTo(r) >= 0 || params.getQ().compareTo(r) <= 0) {    return false;  }  if (zero.compareTo(s) >= 0 || params.getQ().compareTo(s) <= 0) {    return false;  }  BigInteger w=s.modInverse(params.getQ());  BigInteger u1=m.multiply(w).mod(params.getQ());  BigInteger u2=r.multiply(w).mod(params.getQ());  u1=params.getG().modPow(u1,params.getP());  u2=((DSAPublicKeyParameters)key).getY().modPow(u2,params.getP());  BigInteger v=u1.multiply(u2).mod(params.getP()).mod(params.getQ());  return v.equals(r);}  }
class C{  public static Validator<CharSequence> maxLength(@NonNull final Context context,@StringRes final int resourceId,final int maxLength){  return new MaxLengthValidator(context,resourceId,maxLength);}  }
class C{  public void remove(){  throw new UnsupportedOperationException();}  }
class C{  public static List<MgmtSoftwareModule> toResponse(final Collection<SoftwareModule> softwareModules){  if (softwareModules == null) {    return Collections.emptyList();  }  return softwareModules.stream().map(null).collect(Collectors.toList());}  }
class C{  public static int remainder(int dividend,int divisor){  return (int)(toLong(dividend) % toLong(divisor));}  }
class C{  @Override public void focusLost(FocusEvent e){}  }
class C{  public void playTogether(Animator... items){  if (items != null) {    mNeedsSort=true;    Builder builder=play(items[0]);    for (int i=1; i < items.length; ++i) {      builder.with(items[i]);    }  }}  }
class C{  public static String toTitleCase(String str){  return string(str).replace(new RegExp("/\\w\\S*/g"),null);}  }
class C{  public StateInternal_ createStateInternal_(){  StateInternal_Impl stateInternal_=new StateInternal_Impl();  return stateInternal_;}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj == null) {    return false;  }  if (getClass() != obj.getClass()) {    return false;  }  DoubleIntPair other=(DoubleIntPair)obj;  return (this.first == other.first) && (this.second == other.second);}  }
class C{  private void updateKeyMaskFields(){  mask=fRanges;  if (fContextual) {    mask|=(1 << 31);    key=fDefaultContextIndex;  } else {    key=fSingleRangeIndex;  }}  }
class C{  public void testWrite3() throws Exception {  byte[] data=new byte[]{-127,-100,-50,-10,-1,0,1,10,50,127};  TestOutputStream tos=new TestOutputStream();  CipherOutputStream cos=new CipherOutputStream(tos,new NullCipher());  for (int i=0; i < data.length; i++) {    cos.write(data,i,1);  }  cos.flush();  byte[] result=tos.toByteArray();  if (!Arrays.equals(result,data)) {    fail("CipherOutputStream wrote incorrect data.");  }}  }
class C{  public static void checkFieldSignature(final String signature){  int pos=checkFieldTypeSignature(signature,0);  if (pos != signature.length()) {    throw new IllegalArgumentException(signature + ": error at index " + pos);  }}  }
class C{  @Override public void addEventListener(IRcsServiceRegistrationListener listener){  if (sLogger.isActivated()) {    sLogger.info("Add a service listener");  }synchronized (mLock) {    mRcsServiceRegistrationEventBroadcaster.addEventListener(listener);  }}  }
class C{  public boolean canPace(){  return true;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapchildnoderange.class,args);}  }
class C{  public static boolean printTypevarToPngIfMatches(final AnnotatedTypeVariable typeVariable,final List<String> typeVarNames,final String directory){  return printTypevarIfMatches(typeVariable,typeVarNames,directory,true);}  }
class C{  public int size(){  return fHistory == null ? 0 : fHistory.size();}  }
class C{  private static long globalIdForId(Uri uri,long id){  uri=ContentUris.withAppendedId(uri,id);  String[] proj={GLOBAL_ID};  return Cursors.firstLong(cr().query(uri,proj,null,null,null));}  }
class C{  public List<String> searchWOQuery(final Map<String,Object> criteriaMap,final List<Object> paramList){  logger.info("-------------------------Inside searchWO---------------------------------");  final List<String> qryList=new ArrayList<String>();  StringBuffer commonQueryFilter=new StringBuffer();  final String CountQry=" select count(distinct wo) from WorkOrder wo left join wo.workOrderEstimates workOrderEstimate" + " where wo.id is not null and wo.parent is null and wo.egwStatus.code<>'NEW' ";  final String dynQuery="select distinct wo from WorkOrder wo left join wo.workOrderEstimates workOrderEstimate" + " where wo.id is not null and wo.parent is null and wo.egwStatus.code<>'NEW' ";  final String setStat=worksService.getWorksConfigValue("WorkOrder.setstatus");  if (criteriaMap.get(STATUS) != null)   if (criteriaMap.get(STATUS).equals("APPROVED") || criteriaMap.get(STATUS).equals("CANCELLED")) {    if (criteriaMap.get(SOURCEPAGE) != null && CANCELWO.equals(criteriaMap.get(SOURCEPAGE))) {      commonQueryFilter=commonQueryFilter.append(" and wo.egwStatus.code = ? ");      paramList.add(criteriaMap.get(STATUS));    } else     if (criteriaMap.get(STATUS).equals("APPROVED")) {      commonQueryFilter=commonQueryFilter.append(" and wo.egwStatus.code = ? and " + " wo.id not in (select objectId from OfflineStatus where objectType=?)");      paramList.add(criteriaMap.get(STATUS));      paramList.add("WorkOrder");    } else     if (criteriaMap.get(STATUS).equals("CANCELLED")) {      commonQueryFilter=commonQueryFilter.append(" and wo.egwStatus.code = ? ");      paramList.add(criteriaMap.get(STATUS));    }  } else   if (!criteriaMap.get(STATUS).equals("-1") && Arrays.asList(setStat.split(",")).contains(criteriaMap.get(STATUS))) {    commonQueryFilter=commonQueryFilter.append(" and wo.egwStatus.code = 'APPROVED' and wo.id in(select stat.objectId from " + "OfflineStatus stat where stat.egwStatus.code=? and stat.id = (select" + " max(stat1.id) from OfflineStatus stat1 where wo.id=stat1.objectId and stat1.objectType=?) and stat.objectType=?)");    paramList.add(criteriaMap.get(STATUS));    paramList.add("WorkOrder");    paramList.add("WorkOrder");  } else   if (!criteriaMap.get(STATUS).equals("-1") && !Arrays.asList(setStat.split(",")).contains(criteriaMap.get(STATUS))) {    commonQueryFilter=commonQueryFilter.append(" and wo.egwStatus.code = ?");    paramList.add(criteriaMap.get(STATUS));  }  if (criteriaMap.get(CREATE_DATE) != null) {    commonQueryFilter=commonQueryFilter.append(" and wo.workOrderDate = ? ");    paramList.add(criteriaMap.get(CREATE_DATE));  }  if (criteriaMap.get(FROM_DATE) != null && criteriaMap.get(TO_DATE) == null) {    commonQueryFilter=commonQueryFilter.append(" and wo.workOrderDate >= ? ");    paramList.add(criteriaMap.get(FROM_DATE));  } else   if (criteriaMap.get(TO_DATE) != null && criteriaMap.get(FROM_DATE) == null) {    commonQueryFilter=commonQueryFilter.append(" and wo.workOrderDate <= ? ");    paramList.add(criteriaMap.get(TO_DATE));  } else   if (criteriaMap.get(FROM_DATE) != null && criteriaMap.get(TO_DATE) != null) {    commonQueryFilter=commonQueryFilter.append(" and wo.workOrderDate between ? and ? ");    paramList.add(criteriaMap.get(FROM_DATE));    paramList.add(criteriaMap.get(TO_DATE));  }  if (criteriaMap.get(WORKORDER_NO) != null) {    commonQueryFilter=commonQueryFilter.append(" and UPPER(wo.workOrderNumber) like ? ");    paramList.add("%" + criteriaMap.get(WORKORDER_NO).toString().trim().toUpperCase() + "%");  }  if (criteriaMap.get(WP_NO) != null) {    commonQueryFilter=commonQueryFilter.append(" and UPPER(wo.packageNumber) like ? ");    paramList.add("%" + criteriaMap.get(WP_NO).toString().trim().toUpperCase() + "%");  }  if (criteriaMap.get(TENDER_FILE_NO) != null) {    commonQueryFilter=commonQueryFilter.append(" and wo.negotiationNumber in (select tr1.negotiationNumber from TenderResponse tr1 where " + "UPPER(tr1.tenderEstimate.worksPackage.tenderFileNumber) like ? )");    paramList.add("%" + criteriaMap.get(TENDER_FILE_NO).toString().trim().toUpperCase() + "%");  }  if (criteriaMap.get(CONTRACTOR_ID) != null) {    commonQueryFilter=commonQueryFilter.append(" and wo.contractor.id = ? ");    paramList.add(criteriaMap.get(CONTRACTOR_ID));  }  if (criteriaMap.get("DEPT_ID") != null) {    commonQueryFilter=commonQueryFilter.append(" and wo.id in (select we.workOrder.id from WorkOrderEstimate we where we.workOrder.id=wo.id and " + " we.estimate.executingDepartment.id = ?) ");    paramList.add(criteriaMap.get("DEPT_ID"));  }  if (criteriaMap.get(ESTIMATE_NO) != null) {    commonQueryFilter=commonQueryFilter.append(" and wo.id in (select we.workOrder.id from WorkOrderEstimate we where we.workOrder.id=wo.id and " + " UPPER(we.estimate.estimateNumber) like ? ) ");    paramList.add("%" + criteriaMap.get(ESTIMATE_NO).toString().trim().toUpperCase() + "%");  }  if (criteriaMap.get(TENDER_NO) != null && !"".equalsIgnoreCase((String)criteriaMap.get(TENDER_NO))) {    logger.debug("-------TENDER_NO-----------" + criteriaMap.get(TENDER_NO));    commonQueryFilter=commonQueryFilter.append(" and UPPER(wo.tenderNumber like) ? ) ");    paramList.add("%" + criteriaMap.get(TENDER_NO).toString().trim().toUpperCase() + "%");  }  if (criteriaMap.get(PROJECT_CODE) != null) {    commonQueryFilter=commonQueryFilter.append(" and wo.id in (select we.workOrder.id from WorkOrderEstimate we where we.workOrder.id=wo.id and " + " UPPER(we.estimate.executingDepartment.projectCode.code) like ? ) ");    paramList.add("%" + criteriaMap.get(PROJECT_CODE).toString().trim().toUpperCase() + "%");  }  if (criteriaMap.get(ACTION_FLAG) != null && criteriaMap.get(ACTION_FLAG).toString().equalsIgnoreCase("searchWOForMB")) {    commonQueryFilter=commonQueryFilter.append(" and workOrderEstimate.estimate.projectCode.egwStatus.code!='CLOSED' and workOrderEstimate.id not in (select distinct mbh.workOrderEstimate.id " + "from MBHeader mbh where mbh.egwStatus.code=? " + " or mbh.egwStatus.code=?"+ " or mbh.egwStatus.code=?"+ " or mbh.egwStatus.code=? or mbh.egwStatus.code=? )"+ "and workOrderEstimate.id not in (select distinct mbh.workOrderEstimate.id "+ "from MBHeader mbh where "+ " mbh.egwStatus.code = ? and  mbh.egBillregister.billstatus = ? and "+ " mbh.egBillregister.billtype=?)");    paramList.add(MBHeader.MeasurementBookStatus.CREATED.toString());    paramList.add(MBHeader.MeasurementBookStatus.CHECKED.toString());    paramList.add(MBHeader.MeasurementBookStatus.RESUBMITTED.toString());    paramList.add(MBHeader.MeasurementBookStatus.REJECTED.toString());    paramList.add(MBHeader.MeasurementBookStatus.NEW.toString());    paramList.add(MBHeader.MeasurementBookStatus.APPROVED.toString());    paramList.add(MBHeader.MeasurementBookStatus.APPROVED.toString());    paramList.add(getFinalBillTypeConfigValue());  }  if (criteriaMap.get(ACTION_FLAG) != null && criteriaMap.get(ACTION_FLAG).toString().equalsIgnoreCase("searchWOForBilling")) {    commonQueryFilter=commonQueryFilter.append(" and workOrderEstimate.estimate.projectCode.egwStatus.code!='CLOSED' and workOrderEstimate.id not in " + "(select distinct mbh.workOrderEstimate.id from MBHeader mbh where mbh.egwStatus.code = ? " + " and (mbh.egBillregister.billstatus <> ? and mbh.egBillregister.billtype = ?))");    paramList.add(MBHeader.MeasurementBookStatus.APPROVED.toString());    paramList.add(MBHeader.MeasurementBookStatus.CANCELLED.toString());    paramList.add(getFinalBillTypeConfigValue());  }  final String orderQry=" Order by wo.workOrderDate ";  logger.info("Query is ::" + dynQuery);  qryList.add(CountQry + commonQueryFilter + orderQry);  qryList.add(dynQuery + commonQueryFilter + orderQry);  return qryList;}  }
class C{  public FillArrayDataPayloadDecodedInstruction(InstructionCodec format,int opcode,short[] data){  this(format,opcode,data,data.length,2);}  }
class C{  private int makeAvailable() throws IOException {  if (pos != -1) {    return 0;  }  total+=tail - head - pad;  System.arraycopy(buffer,tail - pad,buffer,0,pad);  head=0;  tail=pad;  for (; ; ) {    int bytesRead=input.read(buffer,tail,bufSize - tail);    if (bytesRead == -1) {      final String msg="Stream ended unexpectedly";      throw new FileUploadException(MalformedStreamException,msg);    }    tail+=bytesRead;    findSeparator();    int av=available();    if (av > 0 || pos != -1) {      return av;    }  }}  }
class C{  public static Matrix sumRows(Matrix A){  Matrix sum=new Matrix(A.getRowDimension(),1);  for (int i=0; i < A.getColumnDimension(); i++)   sum.plusEquals(A.getMatrix(0,A.getRowDimension() - 1,i,i));  return sum;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case FunctionblockPackage.FUNCTION_BLOCK__CONFIGURATION:    setConfiguration((Configuration)null);  return;case FunctionblockPackage.FUNCTION_BLOCK__STATUS:setStatus((Status)null);return;case FunctionblockPackage.FUNCTION_BLOCK__FAULT:setFault((Fault)null);return;case FunctionblockPackage.FUNCTION_BLOCK__EVENTS:getEvents().clear();return;case FunctionblockPackage.FUNCTION_BLOCK__OPERATIONS:getOperations().clear();return;}super.eUnset(featureID);}  }
class C{  public void testFloatVersionField() throws Exception {  updateJ(jsonAdd(sdoc("id","aaa","name","a1","my_version_f","10.01")),params("update.chain","external-version-float"));  assertU(commit());  updateJ(jsonAdd(sdoc("id","aaa","name","XX","my_version_f","4.2")),params("update.chain","external-version-float"));  assertU(commit());  assertJQ(req("qt","/get","id","aaa","fl","name"),"=={'doc':{'name':'a1'}}");  deleteAndGetVersion("aaa",params("del_version","7","update.chain","external-version-float"));  assertJQ(req("qt","/get","id","aaa","fl","name"),"=={'doc':{'name':'a1'}}");  assertU(commit());  updateJ(jsonAdd(sdoc("id","aaa","name","a2","my_version_f","10.02")),params("update.chain","external-version-float"));  deleteAndGetVersion("aaa",params("del_version","8","update.chain","external-version-float"));  assertJQ(req("qt","/get","id","aaa","fl","name"),"=={'doc':{'name':'a2'}}");  assertU(commit());  assertJQ(req("q","+id:aaa"),"/response/numFound==1");  assertJQ(req("q","+id:aaa +name:a2"),"/response/numFound==1");  assertJQ(req("qt","/get","id","aaa","fl","name"),"=={'doc':{'name':'a2'}}");  deleteAndGetVersion("aaa",params("del_version","10.10","update.chain","external-version-float"));  updateJ(jsonAdd(sdoc("id","aaa","name","XX","my_version_f","10.05")),params("update.chain","external-version-float"));  assertJQ(req("qt","/get","id","aaa","fl","my_version_f"),"=={'doc':{'my_version_f':10.10}}}");  assertU(commit());  assertJQ(req("q","+id:aaa"),"/response/numFound==1");  assertJQ(req("q","+id:aaa +name:XX"),"/response/numFound==0");  assertJQ(req("qt","/get","id","aaa","fl","my_version_f"),"=={'doc':{'my_version_f':10.10}}");  updateJ(jsonAdd(sdoc("id","aaa","name","XX","my_version_f","10.09")),params("update.chain","external-version-float"));  assertJQ(req("qt","/get","id","aaa","fl","my_version_f"),"=={'doc':{'my_version_f':10.10}}}");  assertU(commit());  assertJQ(req("q","+id:aaa"),"/response/numFound==1");  assertJQ(req("q","+id:aaa +name:XX"),"/response/numFound==0");  assertJQ(req("qt","/get","id","aaa","fl","my_version_f"),"=={'doc':{'my_version_f':10.10}}");}  }
class C{  private void initPeerList(){  if (currentTargets == null) {    currentTargets=new HashSet<String>();  }  Iterator<Seed> it=Switchboard.getSwitchboard().peers.seedsConnected(true,false,null,0);  while (it.hasNext()) {    Seed s=it.next();    currentTargets.add(s.hash);  }}  }
class C{  protected void storeState(){  likelihoodCore.storeState();  super.storeState();}  }
class C{  public void createPassiveAgents(Scenario scenario){  PopulationFactory pFactory=(PopulationFactory)scenario.getPopulation().getFactory();  for (Integer i=0; i < 5; i++) {    for (Integer j=0; j < 4; j++) {      String idpart=i.toString() + j.toString();      Person person=pFactory.createPerson(Id.create("passive_" + idpart,Person.class));      double xCoord=6563. + (i + 1) * 625;      double yCoord=7188. + (j - 1) * 625;      Plan plan=pFactory.createPlan();      Coord coord=new Coord(xCoord,yCoord);      Activity home=pFactory.createActivityFromCoord("home",coord);      home.setEndTime(1.0);      Leg leg=pFactory.createLeg(TransportMode.walk);      Coord coord2=new Coord(xCoord,yCoord + 1.);      Activity home2=pFactory.createActivityFromCoord("home",coord2);      plan.addActivity(home);      plan.addLeg(leg);      plan.addActivity(home2);      person.addPlan(plan);      scenario.getPopulation().addPerson(person);    }  }}  }
class C{  public static byte[] encodeGif(BufferedImage image) throws IOException {  ByteArrayOutputStream out=new ByteArrayOutputStream();  if (Debug.debugging("acmegifhelper")) {    Debug.output("Got output stream..." + out);  }  Acme.JPM.Encoders.GifEncoder enc=new Acme.JPM.Encoders.GifEncoder(image,out);  if (Debug.debugging("acmegifhelper")) {    Debug.output("Got gif encoder...");  }  enc.encode();  if (Debug.debugging("acmegifhelper")) {    Debug.output("encoded?");  }  return out.toByteArray();}  }
class C{  public static Volume prepareVolume(DbClient dbClient,Volume volume,long size,long thinVolumePreAllocationSize,Project project,VirtualArray neighborhood,VirtualPool vpool,VolumeRecommendation placement,String label,BlockConsistencyGroup consistencyGroup,VirtualPoolCapabilityValuesWrapper cosCapabilities,Boolean createInactive){  if (volume == null) {    List<Volume> volumeList=CustomQueryUtility.queryActiveResourcesByConstraint(dbClient,Volume.class,ContainmentPrefixConstraint.Factory.getFullMatchConstraint(Volume.class,"project",project.getId(),label));    if (!volumeList.isEmpty()) {      throw APIException.badRequests.duplicateLabel(label);    }  }  boolean newVolume=false;  StoragePool pool=null;  if (volume == null) {    newVolume=true;    volume=new Volume();    volume.setId(URIUtil.createId(Volume.class));    volume.setOpStatus(new OpStatusMap());  } else {    volume=dbClient.queryObject(Volume.class,volume.getId());  }  volume.setSyncActive(!Boolean.valueOf(createInactive));  volume.setLabel(label);  volume.setCapacity(size);  if (0 != thinVolumePreAllocationSize) {    volume.setThinVolumePreAllocationSize(thinVolumePreAllocationSize);  }  volume.setThinlyProvisioned(VirtualPool.ProvisioningType.Thin.toString().equalsIgnoreCase(vpool.getSupportedProvisioningType()));  volume.setVirtualPool(vpool.getId());  volume.setProject(new NamedURI(project.getId(),volume.getLabel()));  volume.setTenant(new NamedURI(project.getTenantOrg().getURI(),volume.getLabel()));  volume.setVirtualArray(neighborhood.getId());  URI poolId=placement.getCandidatePools().get(0);  if (null != poolId) {    pool=dbClient.queryObject(StoragePool.class,poolId);    if (null != pool) {      volume.setProtocol(new StringSet());      volume.getProtocol().addAll(VirtualPoolUtil.getMatchingProtocols(vpool.getProtocols(),pool.getProtocols()));    }  }  URI storageControllerUri=placement.getCandidateSystems().get(0);  StorageSystem storageSystem=dbClient.queryObject(StorageSystem.class,storageControllerUri);  String systemType=storageSystem.checkIfVmax3() ? DiscoveredDataObject.Type.vmax3.name() : storageSystem.getSystemType();  volume.setSystemType(systemType);  volume.setStorageController(storageControllerUri);  volume.setPool(poolId);  if (consistencyGroup != null) {    volume.setConsistencyGroup(consistencyGroup.getId());    if (!consistencyGroup.isProtectedCG()) {      String rgName=consistencyGroup.getCgNameOnStorageSystem(volume.getStorageController());      if (rgName == null) {        rgName=consistencyGroup.getLabel();      } else {        VolumeGroup volumeGroup=ControllerUtils.getApplicationForCG(dbClient,consistencyGroup,rgName);        if (volumeGroup != null) {          volume.getVolumeGroupIds().add(volumeGroup.getId().toString());        }      }      volume.setReplicationGroupInstance(rgName);    }  }  if (null != cosCapabilities.getAutoTierPolicyName()) {    URI autoTierPolicyUri=getAutoTierPolicy(poolId,cosCapabilities.getAutoTierPolicyName(),dbClient);    if (null != autoTierPolicyUri) {      volume.setAutoTieringPolicyUri(autoTierPolicyUri);    }  }  if (vpool.getDedupCapable() != null) {    volume.setIsDeduplicated(vpool.getDedupCapable());  }  if (newVolume) {    dbClient.createObject(volume);  } else {    dbClient.updateAndReindexObject(volume);  }  return volume;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static List propertyDescriptors(int apiLevel){  if (apiLevel == AST.JLS2_INTERNAL) {    return PROPERTY_DESCRIPTORS_2_0;  } else {    return PROPERTY_DESCRIPTORS_3_0;  }}  }
class C{  public static boolean convertVisibility(Element e){  Value v=getComputedStyle(e,SVGCSSEngine.VISIBILITY_INDEX);  return v.getStringValue().charAt(0) == 'v';}  }
class C{  @Override public CertificateToken addCertificate(CertificateToken cert){  final ServiceInfo serviceInfo=getMockServiceInfo();  final CertificateToken certToken=addCertificate(cert,serviceInfo);  return certToken;}  }
class C{  public static void write(long l){  boolean negative=l < 0;  int nextDigit;  char nextChar;  int index=TEMP_BUFFER_SIZE - 1;  char[] intBuffer=getIntBuffer();  nextDigit=(int)(l % 10);  nextChar=hexDigitCharacter[negative ? -nextDigit : nextDigit];  intBuffer[index--]=nextChar;  l=l / 10;  while (l != 0) {    nextDigit=(int)(l % 10);    nextChar=hexDigitCharacter[negative ? -nextDigit : nextDigit];    intBuffer[index--]=nextChar;    l=l / 10;  }  if (negative) {    intBuffer[index--]='-';  }  for (index++; index < TEMP_BUFFER_SIZE; index++) {    add(intBuffer[index]);  }}  }
class C{  protected void calculateCutPoints(){  m_CutPoints=new double[getInputFormat().numAttributes()][];  for (int i=getInputFormat().numAttributes() - 1; i >= 0; i--) {    if ((m_DiscretizeCols.isInRange(i)) && (getInputFormat().attribute(i).isNumeric()) && (getInputFormat().classIndex() != i)) {      if (m_FindNumBins) {        findNumBins(i);      } else       if (!m_UseEqualFrequency) {        calculateCutPointsByEqualWidthBinning(i);      } else {        calculateCutPointsByEqualFrequencyBinning(i);      }    }  }}  }
class C{  private void doDdpOrientationFinal(Graph graph,Node l,Node a,Node b,Node c){  changeFlag=true;  List<Node> sepset=new ArrayList<>();  for (  SepsetMapDci msepset : sepsetMaps) {    List<Node> condSet=msepset.get(l,c);    if (condSet != null) {      sepset.addAll(condSet);    }  }  Graph newGraph1=new EdgeListGraph(graph);  newGraph1.setEndpoint(c,b,Endpoint.TAIL);  discrimGraphs.add(newGraph1);  if (sepset.contains(b)) {    return;  }  Graph newGraph2=new EdgeListGraph(graph);  if (!isArrowpointAllowed(graph,a,b)) {    return;  }  if (!isArrowpointAllowed(graph,c,b)) {    return;  }  newGraph2.setEndpoint(a,b,Endpoint.ARROW);  newGraph2.setEndpoint(c,b,Endpoint.ARROW);  discrimGraphs.add(newGraph2);}  }
class C{  public static String determineOriginalFile(Context context,Uri uri) throws IllegalArgumentException {  String originalFile=null;  if (uri != null) {    if (uri.getScheme().startsWith("content")) {      originalFile=getPathFromUri(context,uri);    }    if (uri.toString().matches("https?://\\w+\\.googleusercontent\\.com/.+")) {      originalFile=uri.toString();    }    if (uri.getScheme().startsWith("file")) {      originalFile=uri.toString().substring(7);    }    if (isNullOrEmpty(originalFile)) {      throw new IllegalArgumentException("File path was null");    }  } else {    throw new IllegalArgumentException("Image Uri was null!");  }  return originalFile;}  }
class C{  public boolean match(VariableDeclarationExpression node,Object other){  if (!(other instanceof VariableDeclarationExpression)) {    return false;  }  VariableDeclarationExpression o=(VariableDeclarationExpression)other;  int level=node.getAST().apiLevel;  if (level == AST.JLS2_INTERNAL) {    if (node.getModifiers() != o.getModifiers()) {      return false;    }  }  if (level >= AST.JLS3) {    if (!safeSubtreeListMatch(node.modifiers(),o.modifiers())) {      return false;    }  }  return safeSubtreeMatch(node.getType(),o.getType()) && safeSubtreeListMatch(node.fragments(),o.fragments());}  }
class C{  public ISC_STATUS(long value){  super(SIZE,value);}  }
class C{  public int next(){  int node;  int type;  if (_startNode == NULL) {    return NULL;  }  node=_currentNode;  do {    node++;    type=_type(node);    if (NULL == type || !isDescendant(node)) {      _currentNode=NULL;      return END;    }  } while (type != _nodeType && _exptype(node) != _nodeType);  _currentNode=node;  return returnNode(makeNodeHandle(node));}  }
class C{  public void computeParameters(){  if (ellps == null) {    ellps=Ellipsoid.WGS_84;  }  if (mode == MODE_BELGIUM) {    alpha=0.00014204d;  } else {    alpha=0d;  }  double phi1=ProjMath.degToRad(lambert_sp_one);  double phi2=ProjMath.degToRad(lambert_sp_two);  double phif=ProjMath.degToRad(referenceLatitude);  double e=ellps.ecc;  double sinphi;  sinphi=Math.sin(phi1);  double m1=lambMsfn(sinphi,Math.cos(phi1),e);  double t1=lambTsfn(phi1,sinphi,e);  if (MoreMath.approximately_equal(phi1,phi2,EPS10)) {    n=sinphi;  } else {    sinphi=Math.sin(phi2);    double m2=lambMsfn(sinphi,Math.cos(phi2),e);    double t2=lambTsfn(phi2,sinphi,e);    n=Math.log(m1 / m2) / Math.log(t1 / t2);  }  F=m1 / (n * Math.pow(t1,n));  if (MoreMath.approximately_equal(phi1,phi2,EPS10)) {    rf=0.0d;  } else {    rf=ellps.radius * F * Math.pow(lambTsfn(phif,Math.sin(phif),e),n);  }  lamdaf=ProjMath.degToRad(centralMeridian);  locationCenterXPixel=((double)getWidth() / 2d);  locationCenterYPixel=((double)getHeight() / 2d);  locationPixelsPerLambert=(double)getPPM() / getScale();  LatLonPoint origin=new LatLonPoint.Double(referenceLatitude,centralMeridian);  Point2D lp=LLToWorld(origin.getY(),origin.getX(),new Point2D.Double());  locationOriginX=lp.getX();  locationOriginY=lp.getY();  LatLonPoint center=getCenter();  lp=LLToWorld(center.getY(),center.getX(),lp);  locationCenterXLambert=lp.getX();  locationCenterYLambert=lp.getY();  locationOriginXfPixel=locationCenterXPixel + (locationOriginX - locationCenterXLambert) * locationPixelsPerLambert;  locationOriginYfPixel=locationCenterYPixel - (locationOriginY - locationCenterYLambert) * locationPixelsPerLambert;  if (Debug.debugging("Lambert")) {    Debug.output("Creating LambertConformal: center x = " + locationCenterXLambert + ", center y = "+ locationCenterYLambert);    Debug.output("Creating LambertConformal: origin x = " + locationOriginX + ", origin y = "+ locationOriginY);  }}  }
class C{  private void addDisplay(int parentM_Product_ID,int M_Product_ID,String bomType,String name,String feature,BigDecimal lineQty){  log.fine("M_Product_ID=" + M_Product_ID + ",Type="+ bomType+ ",Name="+ name+ ",feature="+ feature+ ",Qty="+ lineQty);  boolean selected=true;  if (MPPProductBOMLine.COMPONENTTYPE_Component.equals(bomType)) {    String title="";    JCheckBox cb=new JCheckBox(title);    cb.setSelected(true);    cb.setEnabled(false);    m_selectionList.add(cb);    this.add(cb,new ALayoutConstraint(m_bomLine++,0));  } else   if (MPPProductBOMLine.COMPONENTTYPE_Option.equals(bomType)) {    JCheckBox cb=new JCheckBox(feature);    cb.setSelected(false);    selected=false;    cb.addActionListener(this);    m_selectionList.add(cb);    this.add(cb,new ALayoutConstraint(m_bomLine++,0));  } else   if (MPPProductBOMLine.COMPONENTTYPE_Variant.equals(bomType)) {    JRadioButton b=new JRadioButton(feature);    String groupName=feature + "_" + String.valueOf(parentM_Product_ID)+ "_"+ bomType;    ButtonGroup group=(ButtonGroup)m_buttonGroups.get(groupName);    if (group == null) {      log.fine("ButtonGroup=" + groupName);      group=new ButtonGroup();      m_buttonGroups.put(groupName,group);      group.add(b);      b.setSelected(true);    } else {      group.add(b);      b.setSelected(false);      selected=false;    }    b.addActionListener(this);    m_selectionList.add(b);    this.add(b,new ALayoutConstraint(m_bomLine++,0));  }  m_productList.add(new Integer(M_Product_ID));  VNumber qty=new VNumber("Qty",true,false,true,DisplayType.Quantity,name);  qty.setValue(lineQty);  qty.setReadWrite(selected);  m_qtyList.add(qty);  CLabel label=new CLabel(name);  label.setLabelFor(qty);  this.add(label);  this.add(qty);}  }
class C{  private void parseCapabilityDiscovery(Node node){  String pollingPeriod=null;  String capInfoExpiry=null;  String presenceDiscovery=null;  if (node == null) {    return;  }  Node childnode=node.getFirstChild();  if (childnode != null) {    do {      if (childnode.getNodeName().equals("characteristic")) {        NamedNodeMap attributes=childnode.getAttributes();        if (attributes.getLength() > 0) {          Node typenode=attributes.getNamedItem("type");          if (typenode != null) {            if (typenode.getNodeValue().equalsIgnoreCase("Ext")) {              parseExt(childnode);            }          }        }      }      if (pollingPeriod == null) {        if ((pollingPeriod=getValueByParamName("pollingPeriod",childnode,TYPE_INT)) != null) {          mRcsSettings.writeLong(RcsSettingsData.CAPABILITY_POLLING_PERIOD,Long.parseLong(pollingPeriod) * SECONDS_TO_MILLISECONDS_CONVERSION_RATE);          continue;        }      }      if (capInfoExpiry == null) {        if ((capInfoExpiry=getValueByParamName("capInfoExpiry",childnode,TYPE_INT)) != null) {          mRcsSettings.writeLong(RcsSettingsData.CAPABILITY_EXPIRY_TIMEOUT,Long.parseLong(capInfoExpiry) * SECONDS_TO_MILLISECONDS_CONVERSION_RATE);          continue;        }      }      if (presenceDiscovery == null) {        if ((presenceDiscovery=getValueByParamName("presenceDisc",childnode,TYPE_INT)) != null) {          mRcsSettings.writeBoolean(RcsSettingsData.CAPABILITY_PRESENCE_DISCOVERY,!presenceDiscovery.equals("0"));        }      }    } while ((childnode=childnode.getNextSibling()) != null);  }}  }
class C{  public void saveAll(){  LogService.getRoot().log(Level.CONFIG,"com.rapidminer.gui.ApplicationPerspectives.saving_perspectives");  if (model.getSelectedPerspective() != null) {    model.getSelectedPerspective().store(context);  }  for (  Perspective perspective : model.getAllPerspectives()) {    perspective.save();  }}  }
class C{  @Override public void run(){  amIActive=true;  int progress;  int row, col, i;  int baseCol, baseRow, appendCol, appendRow;  double x, y, z, zN, zBase, zAppend;  double w1, w2, dist1, dist2, sumDist;  double r1, g1, b1, r2, g2, b2;  int r, g, b;  boolean performHistoMatching=true;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  String inputBaseHeader=args[0];  String inputHeader=args[1];  String outputHeader=args[2];  String resampleMethod=args[3].toLowerCase().trim();  if (!resampleMethod.equals("nearest neighbour") && !resampleMethod.equals("bilinear") && !resampleMethod.contains("cubic")) {    showFeedback("Resample method not recognized");    return;  }  if (args[4].toLowerCase().contains("true")) {    performHistoMatching=true;  } else {    performHistoMatching=false;  }  double power=Double.parseDouble(args[5]);  if (power > 15.0) {    power=15.0;  }  if (power < 1.0) {    power=1.0;  }  try {    if (performHistoMatching) {      String inputHeaderAdjusted=StringUtilities.replaceLast(inputHeader,".dep","_temp1.dep");      histogramMatching(inputHeader,inputBaseHeader,inputHeaderAdjusted);      inputHeader=inputHeaderAdjusted;    }    WhiteboxRaster baseRaster=new WhiteboxRaster(inputBaseHeader,"r");    WhiteboxRaster appendRaster=new WhiteboxRaster(inputHeader,"r");    boolean rgbMode=((baseRaster.getDataScale() == WhiteboxRasterBase.DataScale.RGB) & (appendRaster.getDataScale() == WhiteboxRasterBase.DataScale.RGB));    double cellSizeX=baseRaster.getCellSizeX();    double cellSizeY=baseRaster.getCellSizeY();    double baseNoData=baseRaster.getNoDataValue();    double appendNoData=appendRaster.getNoDataValue();    double outputNoData=baseNoData;    int baseCols=baseRaster.getNumberColumns();    int baseRows=baseRaster.getNumberRows();    int appendCols=appendRaster.getNumberColumns();    int appendRows=appendRaster.getNumberRows();    double baseNorth=baseRaster.getNorth();    double baseSouth=baseRaster.getSouth();    double baseEast=baseRaster.getEast();    double baseWest=baseRaster.getWest();    double baseNSRange=baseNorth - baseSouth;    double baseEWRange=baseEast - baseWest;    double appendNorth=appendRaster.getNorth();    double appendSouth=appendRaster.getSouth();    double appendEast=appendRaster.getEast();    double appendWest=appendRaster.getWest();    double appendNSRange=appendNorth - appendSouth;    double appendEWRange=appendEast - appendWest;    double north, south, east, west;    if (baseNorth > baseSouth) {      north=Double.NEGATIVE_INFINITY;      south=Double.POSITIVE_INFINITY;      if (baseNorth > north) {        north=baseNorth;      }      if (appendNorth > north) {        north=appendNorth;      }      if (baseSouth < south) {        south=baseSouth;      }      if (appendSouth < south) {        south=appendSouth;      }    } else {      north=Double.POSITIVE_INFINITY;      south=Double.NEGATIVE_INFINITY;      if (baseNorth < north) {        north=baseNorth;      }      if (appendNorth < north) {        north=appendNorth;      }      if (baseSouth > south) {        south=baseSouth;      }      if (appendSouth > south) {        south=appendSouth;      }    }    if (baseEast > baseWest) {      east=Double.NEGATIVE_INFINITY;      west=Double.POSITIVE_INFINITY;      if (baseEast > east) {        east=baseEast;      }      if (appendEast > east) {        east=appendEast;      }      if (baseWest < west) {        west=baseWest;      }      if (appendWest < west) {        west=appendWest;      }    } else {      east=Double.POSITIVE_INFINITY;      west=Double.NEGATIVE_INFINITY;      if (baseEast < east) {        east=baseEast;      }      if (appendEast < east) {        east=appendEast;      }      if (baseWest > west) {        west=baseWest;      }      if (appendWest > west) {        west=appendWest;      }    }    int nRows=(int)Math.round(Math.abs(north - south) / cellSizeY);    int nCols=(int)Math.round(Math.abs(east - west) / cellSizeX);    WhiteboxRaster destination=new WhiteboxRaster(outputHeader,north,south,east,west,nRows,nCols,WhiteboxRasterBase.DataScale.CONTINUOUS,WhiteboxRasterBase.DataType.FLOAT,outputNoData,outputNoData);    if (rgbMode) {      destination.setDataScale(WhiteboxRasterBase.DataScale.RGB);    }    int nRowsLessOne=nRows - 1;    String distToEdgeBaseHeader=StringUtilities.replaceLast(inputBaseHeader,".dep","_temp1.dep");    WhiteboxRaster distToEdgeBase=new WhiteboxRaster(distToEdgeBaseHeader,"rw",inputBaseHeader,WhiteboxRaster.DataType.FLOAT,Float.POSITIVE_INFINITY);    distToEdgeBase.isTemporaryFile=true;    double[] data;    for (row=0; row < baseRows; row++) {      data=baseRaster.getRowValues(row);      for (col=0; col < baseCols; col++) {        if (row == 0 || row == baseRows - 1) {          distToEdgeBase.setValue(row,col,0.0);        } else         if (col == 0 || col == baseCols - 1) {          distToEdgeBase.setValue(row,col,0.0);        } else {          if (data[col] != baseNoData) {            if (data[col - 1] == baseNoData || data[col + 1] == baseNoData) {              distToEdgeBase.setValue(row,col,0.0);            }          } else {            distToEdgeBase.setValue(row,col,0.0);          }        }      }    }    calculateDistance(distToEdgeBase);    String distToEdgeAppendHeader=whitebox.utilities.StringUtilities.replaceLast(inputBaseHeader,".dep","_temp2.dep");    WhiteboxRaster distToEdgeAppend=new WhiteboxRaster(distToEdgeAppendHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,Float.POSITIVE_INFINITY);    distToEdgeAppend.isTemporaryFile=true;    for (row=0; row < appendRows; row++) {      data=appendRaster.getRowValues(row);      for (col=0; col < appendCols; col++) {        if (row == 0 || row == appendRows - 1) {          distToEdgeAppend.setValue(row,col,0.0);        } else         if (col == 0 || col == appendCols - 1) {          distToEdgeAppend.setValue(row,col,0.0);        } else {          if (data[col] != appendNoData) {            if (data[col - 1] == appendNoData || data[col + 1] == appendNoData) {              distToEdgeAppend.setValue(row,col,0.0);            }          } else {            distToEdgeAppend.setValue(row,col,0.0);          }        }      }    }    calculateDistance(distToEdgeAppend);    if (resampleMethod.contains("nearest")) {      for (row=0; row < nRows; row++) {        for (col=0; col < nCols; col++) {          x=destination.getXCoordinateFromColumn(col);          y=destination.getYCoordinateFromRow(row);          baseCol=baseRaster.getColumnFromXCoordinate(x);          baseRow=baseRaster.getRowFromYCoordinate(y);          appendCol=appendRaster.getColumnFromXCoordinate(x);          appendRow=appendRaster.getRowFromYCoordinate(y);          zBase=baseRaster.getValue(baseRow,baseCol);          zAppend=appendRaster.getValue(appendRow,appendCol);          if (zBase != baseNoData && zAppend == appendNoData) {            destination.setValue(row,col,zBase);          } else           if (zBase == baseNoData && zAppend != appendNoData) {            destination.setValue(row,col,zAppend);          } else           if (zBase == baseNoData && zAppend == appendNoData) {            destination.setValue(row,col,outputNoData);          } else {            dist1=distToEdgeBase.getValue(baseRow,baseCol);            dist2=distToEdgeAppend.getValue(appendRow,appendCol);            sumDist=Math.pow(dist1,power) + Math.pow(dist2,power);            w1=Math.pow(dist1,power) / sumDist;            w2=Math.pow(dist2,power) / sumDist;            if (!rgbMode) {              z=w1 * zBase + w2 * zAppend;            } else {              r1=(double)((int)zBase & 0xFF);              g1=(double)(((int)zBase >> 8) & 0xFF);              b1=(double)(((int)zBase >> 16) & 0xFF);              r2=(double)((int)zAppend & 0xFF);              g2=(double)(((int)zAppend >> 8) & 0xFF);              b2=(double)(((int)zAppend >> 16) & 0xFF);              r=(int)((r1 * w1) + (r2 * w2));              g=(int)((g1 * w1) + (g2 * w2));              b=(int)((b1 * w1) + (b2 * w2));              z=(double)((255 << 24) | (b << 16) | (g << 8)| r);            }            destination.setValue(row,col,z);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / nRowsLessOne);        updateProgress("Resampling images: ",progress);      }    } else {      if (destination.getDataType() != WhiteboxRaster.DataType.DOUBLE && destination.getDataType() != WhiteboxRaster.DataType.FLOAT) {        showFeedback("The destination image is not of an appropriate data" + " type (i.e. double or float) to perform this operation.");        return;      }      double dX, dY;      double srcRow, srcCol;      double originRow, originCol;      double rowN, colN;      double sumOfDist;      double[] shiftX;      double[] shiftY;      int numNeighbours=0;      double[][] neighbour;      if (resampleMethod.contains("cubic")) {        shiftX=new double[]{-1,0,1,2,-1,0,1,2,-1,0,1,2,-1,0,1,2};        shiftY=new double[]{-1,-1,-1,-1,0,0,0,0,1,1,1,1,2,2,2,2};        numNeighbours=16;        neighbour=new double[numNeighbours][2];      } else {        shiftX=new double[]{0,1,0,1};        shiftY=new double[]{0,0,1,1};        numNeighbours=4;        neighbour=new double[numNeighbours][2];      }      for (row=0; row < nRows; row++) {        for (col=0; col < nCols; col++) {          x=destination.getXCoordinateFromColumn(col);          y=destination.getYCoordinateFromRow(row);          baseCol=baseRaster.getColumnFromXCoordinate(x);          baseRow=baseRaster.getRowFromYCoordinate(y);          srcRow=(baseNorth - y) / baseNSRange * (baseRows - 0.5);          srcCol=(x - baseWest) / baseEWRange * (baseCols - 0.5);          originRow=Math.floor(srcRow);          originCol=Math.floor(srcCol);          sumOfDist=0;          for (i=0; i < numNeighbours; i++) {            rowN=originRow + shiftY[i];            colN=originCol + shiftX[i];            neighbour[i][0]=baseRaster.getValue((int)rowN,(int)colN);            dY=rowN - srcRow;            dX=colN - srcCol;            if ((dX + dY) != 0 && neighbour[i][0] != baseNoData) {              neighbour[i][1]=1 / (dX * dX + dY * dY);              sumOfDist+=neighbour[i][1];            } else             if (neighbour[i][0] == baseNoData) {              neighbour[i][1]=0;            } else {              neighbour[i][1]=99999999;              sumOfDist+=neighbour[i][1];            }          }          if (sumOfDist > 0) {            z=0;            for (i=0; i < numNeighbours; i++) {              z+=neighbour[i][0] * neighbour[i][1] / sumOfDist;            }            zBase=z;          } else {            zBase=baseNoData;          }          appendCol=appendRaster.getColumnFromXCoordinate(x);          appendRow=appendRaster.getRowFromYCoordinate(y);          srcRow=(appendNorth - y) / appendNSRange * (appendRows - 0.5);          srcCol=(x - appendWest) / appendEWRange * (appendCols - 0.5);          originRow=Math.floor(srcRow);          originCol=Math.floor(srcCol);          sumOfDist=0;          for (i=0; i < numNeighbours; i++) {            rowN=originRow + shiftY[i];            colN=originCol + shiftX[i];            neighbour[i][0]=appendRaster.getValue((int)rowN,(int)colN);            dY=rowN - srcRow;            dX=colN - srcCol;            if ((dX + dY) != 0 && neighbour[i][0] != appendNoData) {              neighbour[i][1]=1 / (dX * dX + dY * dY);              sumOfDist+=neighbour[i][1];            } else             if (neighbour[i][0] == appendNoData) {              neighbour[i][1]=0;            } else {              neighbour[i][1]=99999999;              sumOfDist+=neighbour[i][1];            }          }          if (sumOfDist > 0) {            z=0;            for (i=0; i < numNeighbours; i++) {              z+=(neighbour[i][0] * neighbour[i][1]) / sumOfDist;            }            zAppend=z;          } else {            zAppend=appendNoData;          }          if (zBase != baseNoData && zAppend == appendNoData) {            destination.setValue(row,col,zBase);          } else           if (zBase == baseNoData && zAppend != appendNoData) {            destination.setValue(row,col,zAppend);          } else           if (zBase == baseNoData && zAppend == appendNoData) {            destination.setValue(row,col,outputNoData);          } else {            dist1=distToEdgeBase.getValue(baseRow,baseCol);            dist2=distToEdgeAppend.getValue(appendRow,appendCol);            sumDist=dist1 + dist2;            w1=dist1 / sumDist;            w2=dist2 / sumDist;            z=w1 * zBase + w2 * zAppend;            destination.setValue(row,col,z);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / nRowsLessOne);        updateProgress("Resampling images: ",progress);      }    }    destination.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    destination.addMetadataEntry("Created on " + new Date());    destination.close();    distToEdgeBase.close();    distToEdgeAppend.close();    baseRaster.close();    if (performHistoMatching) {      File header=new File(inputHeader);      if (header.exists()) {        header.delete();      }      File dataFile=new File(StringUtilities.replaceLast(inputHeader,".dep",".tas"));      if (dataFile.exists()) {        dataFile.delete();      }    } else {      appendRaster.close();    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void computeCOFScores(KNNQuery<O> knnq,DBIDs ids,DoubleDataStore acds,WritableDoubleDataStore cofs,DoubleMinMax cofminmax){  FiniteProgress progressCOFs=LOG.isVerbose() ? new FiniteProgress("COF for objects",ids.size(),LOG) : null;  for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {    final KNNList neighbors=knnq.getKNNForDBID(iter,k);    double sum=0.;    for (DBIDIter neighbor=neighbors.iter(); neighbor.valid(); neighbor.advance()) {      if (DBIDUtil.equal(neighbor,iter)) {        continue;      }      sum+=acds.doubleValue(neighbor);    }    final double cof=(sum > 0.) ? (acds.doubleValue(iter) * k / sum) : (acds.doubleValue(iter) > 0. ? Double.POSITIVE_INFINITY : 1.);    cofs.putDouble(iter,cof);    cofminmax.put(cof);    LOG.incrementProcessed(progressCOFs);  }  LOG.ensureCompleted(progressCOFs);}  }
class C{  public void mapDatasetToDomainAxes(int index,List axisIndices){  ParamChecks.requireNonNegative(index,"index");  checkAxisIndices(axisIndices);  this.datasetToDomainAxesMap.put(index,new ArrayList(axisIndices));  datasetChanged(new DatasetChangeEvent(this,getDataset(index)));}  }
class C{  private static boolean isFinalCased(String src,int index,Locale locale){  BreakIterator wordBoundary=BreakIterator.getWordInstance(locale);  wordBoundary.setText(src);  int ch;  for (int i=index; (i >= 0) && !wordBoundary.isBoundary(i); i-=Character.charCount(ch)) {    ch=src.codePointBefore(i);    if (isCased(ch)) {      int len=src.length();      for (i=index + Character.charCount(src.codePointAt(index)); (i < len) && !wordBoundary.isBoundary(i); i+=Character.charCount(ch)) {        ch=src.codePointAt(i);        if (isCased(ch)) {          return false;        }      }      return true;    }  }  return false;}  }
class C{  protected Node bulkConstruct(DBIDRef cur,int maxScale,double parentDist,ModifiableDoubleDBIDList elems){  assert (!elems.contains(cur));  final double max=maxDistance(elems);  final int scale=Math.min(distToScale(max) - 1,maxScale);  final int nextScale=scale - 1;  if (max <= 0 || scale <= scaleBottom || elems.size() < truncate) {    return new Node(cur,max,parentDist,elems);  }  ModifiableDoubleDBIDList candidates=DBIDUtil.newDistanceDBIDList();  excludeNotCovered(elems,scaleToDist(scale),candidates);  if (candidates.size() == 0) {    LOG.warning("Scale not chosen appropriately? " + max + " "+ scaleToDist(scale));    return bulkConstruct(cur,nextScale,parentDist,elems);  }  Node node=new Node(cur,max,parentDist);  final boolean curSingleton=elems.size() == 0;  if (!curSingleton) {    node.children.add(bulkConstruct(cur,nextScale,0,elems));  }  final double fmax=scaleToDist(nextScale);  for (DoubleDBIDListIter it=candidates.iter(); it.valid(); ) {    assert (it.getOffset() == 0);    DBID t=DBIDUtil.deref(it);    elems.clear();    collectByCover(it,candidates,fmax,elems);    assert (DBIDUtil.equal(t,it)) : "First element in candidates must not change!";    if (elems.size() == 0) {      node.singletons.add(it.doubleValue(),it);    } else {      node.children.add(bulkConstruct(it,nextScale,it.doubleValue(),elems));    }    candidates.removeSwap(0);  }  assert (candidates.size() == 0);  if (curSingleton) {    if (node.isLeaf()) {      node.children=null;    } else {      node.singletons.add(parentDist,cur);    }  }  return node;}  }
class C{  @RequestMapping(value=ApiUrl.USER_DEVICE_LOG,method=RequestMethod.POST) public @ResponseBody ResponseEntity<String> deviceLog(HttpServletRequest request){  ApiResponse res=ApiResponse.newInstance();  try {    User currentUser=securityUtils.getCurrentUser();    if (currentUser == null) {      return res.error(getMessage("user.not.found"));    }    String deviceId=request.getParameter("deviceId");    String deviceType=request.getParameter("deviceType");    String deviceOS=request.getParameter("OSVersion");    Device device=deviceRepository.findByDeviceUId(deviceId);    if (device == null) {      device=new Device();      device.setDeviceId(deviceId);    }    device.setType(deviceType);    device.setOSVersion(deviceOS);    device.setLastModifiedDate(new Date());    deviceRepository.save(device);    return res.setDataAdapter(new UserAdapter()).success(getMessage("log.success"),this.getMessage("log.success"));  } catch (  Exception e) {    LOGGER.error("EGOV-API ERROR ",e);    return res.error(getMessage("server.error"));  }}  }
class C{  protected void readContents(){  boolean done=false;  while (!(done || err())) {    int code=read();switch (code) {case 0x2C:      readImage();    break;case 0x21:  code=read();switch (code) {case 0xf9:  readGraphicControlExt();break;case 0xff:readBlock();String app="";for (int i=0; i < 11; i++) {app+=(char)block[i];}if (app.equals("NETSCAPE2.0")) {readNetscapeExt();} else skip();break;default :skip();}break;case 0x3b:done=true;break;case 0x00:break;default :status=STATUS_FORMAT_ERROR;}}}  }
class C{  @Override public void stop(){}  }
class C{  @Override public void validate(final IDescription desc){  final IExpression width=desc.getFacetExpr(WIDTH);  final IExpression height=desc.getFacetExpr(HEIGHT);  final SpeciesDescription sd=(SpeciesDescription)desc;  final IExpression cellWidth=desc.getFacetExpr(CELL_WIDTH);  final IExpression cellHeight=desc.getFacetExpr(CELL_HEIGHT);  if (cellWidth != null && cellHeight == null || cellWidth == null && cellHeight != null) {    sd.error("'cell_width' and 'cell_height' must be defined together",IGamlIssue.CONFLICTING_FACETS,cellWidth == null ? CELL_HEIGHT : CELL_WIDTH);    return;  }  final IExpression neighbours=desc.getFacetExpr(IKeyword.NEIGHBOURS);  final IExpression neighbors=desc.getFacetExpr(IKeyword.NEIGHBORS);  if (neighbours != null && neighbors != null) {    sd.error("'neighbours' and 'neighbors' cannot be defined at the same time",IGamlIssue.CONFLICTING_FACETS,NEIGHBOURS);    return;  }  if (cellWidth != null && width != null) {    sd.error("'cell_width' and 'width' cannot be defined at the same time",IGamlIssue.CONFLICTING_FACETS,WIDTH);    return;  }  if (cellHeight != null && height != null) {    sd.error("'cell_width' and 'width' cannot be defined at the same time",IGamlIssue.CONFLICTING_FACETS,HEIGHT);    return;  }  if (cellHeight != null || cellWidth != null || width != null || height != null || neighbors != null || neighbours != null) {    if (!desc.getKeyword().equals(IKeyword.GRID)) {      sd.warning("Facets related to dimensions and neighboring can only be defined in 'grids' definition",IGamlIssue.CONFLICTING_FACETS);    }  }  final IExpression file=desc.getFacetExpr(FILE);  if (file != null && (height != null || width != null || cellWidth != null || cellHeight != null)) {    sd.error("The use of the 'file' facet prohibits the use of dimension facets ('width', 'height', 'cell_width', 'cell_height')",IGamlIssue.CONFLICTING_FACETS,FILE);  }  final IExpression freq=desc.getFacetExpr(FREQUENCY);  if (freq != null && freq.isConst() && Integer.valueOf(0).equals(freq.value(null))) {    for (    final VariableDescription vd : sd.getAttributes()) {      if (vd.getFacet(UPDATE,VALUE) != null) {        vd.warning(vd.getName() + " will never be updated because " + desc.getName()+ " has a scheduling frequency of 0",IGamlIssue.WRONG_CONTEXT);      }    }    for (    final IDescription bd : sd.getBehaviors()) {      bd.warning(bd.getName() + " will never be run because " + desc.getName()+ " has a scheduling frequency of 0",IGamlIssue.WRONG_CONTEXT);    }  }  final IExpression torus=desc.getFacetExpr(TORUS);  if (torus != null) {    if (desc.getKeyword().equals(IKeyword.SPECIES) || desc.getKeyword().equals(IKeyword.GRID)) {      desc.warning("The 'torus' facet can only be specified for the model topology (i.e. in 'global')",IGamlIssue.WRONG_CONTEXT,TORUS);    }  }  final String name=desc.getName();  if (AbstractGamlAdditions.isUnaryOperator(name)) {    desc.error("The name '" + name + "' cannot be used for naming this "+ desc.getKeyword()+ ", as the derived casting operator ("+ name+ "(...)) would conflict with an existing unary operator");  }}  }
class C{  public void valueForPathChanged(TreePath path,Object newValue){}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public WandEditModeAction(final NetworkPanel networkPanel){  super("Wand",networkPanel,EditMode.WAND);  putValue(SMALL_ICON,ResourceManager.getImageIcon("Wand.png"));  putValue(SHORT_DESCRIPTION,"Wand Mode (I)");  putValue(SHORT_DESCRIPTION,"Enter wand mode (I) for injecting current in to nodes");}  }
class C{  private void delayedHide(int delayMillis){  mHideHandler.removeCallbacks(mHideRunnable);  mHideHandler.postDelayed(mHideRunnable,delayMillis);}  }
class C{  public static List propertyDescriptors(int apiLevel){  return PROPERTY_DESCRIPTORS;}  }
class C{  public static int computeLastColumn(double tileDelta,double maxLongitude){  int col=(int)Math.ceil((maxLongitude + 180) / tileDelta - 1);  if (maxLongitude + 180 < tileDelta) {    col=0;  }  return col;}  }
class C{  public void init(boolean forWrapping,CipherParameters param){  this.forWrapping=forWrapping;  this.engine=new CBCBlockCipher(new RC2Engine());  if (param instanceof ParametersWithRandom) {    ParametersWithRandom pWithR=(ParametersWithRandom)param;    sr=pWithR.getRandom();    param=pWithR.getParameters();  } else {    sr=new SecureRandom();  }  if (param instanceof ParametersWithIV) {    this.paramPlusIV=(ParametersWithIV)param;    this.iv=this.paramPlusIV.getIV();    this.param=this.paramPlusIV.getParameters();    if (this.forWrapping) {      if ((this.iv == null) || (this.iv.length != 8)) {        throw new IllegalArgumentException("IV is not 8 octets");      }    } else {      throw new IllegalArgumentException("You should not supply an IV for unwrapping");    }  } else {    this.param=param;    if (this.forWrapping) {      this.iv=new byte[8];      sr.nextBytes(iv);      this.paramPlusIV=new ParametersWithIV(this.param,this.iv);    }  }}  }
class C{  public TokenMap(boolean ignoreCase){  this(DEFAULT_TOKEN_MAP_SIZE,ignoreCase);}  }
class C{  public void trimToSize(){  elements=cern.colt.Arrays.trimToCapacity(elements,size());}  }
class C{  public boolean currentFuncResultSeen(){  return !m_currentFuncResult.empty() && m_currentFuncResult.peek() != null;}  }
class C{  public static Number acos(Number a){  return Math.acos(a.doubleValue());}  }
class C{  public PropertyTable showDescription(){  showDescription=true;  return rebuild();}  }
class C{  public void findAndInit(Iterator it){  while (it.hasNext()) {    findAndInit((Object)it.next());  }}  }
class C{  private String filterUrl(String url){  if (!filter) {    return url;  }  try {    url=filters.filter(url);  } catch (  Exception e) {    url=null;  }  return url;}  }
class C{  private int measureWidth(int measureSpec){  int result=0;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=IMAGE_WIDTH + MAX_TEXT_WIDTH + TOAST_HEIGHT;    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public String toString(){  StringBuffer buf=new StringBuffer();  for (int i=0; i < size(); i++) {    String word=Vocabulary.word(getWordID(i));    if (i != 0)     buf.append(' ');    buf.append(word);  }  return buf.toString();}  }
class C{  public static Message fromData(Object data){  return withData(data).build();}  }
class C{  public void publish(String topic,String payload,int qos,boolean isRetained){  BaseClient publisher=null;  try {    publisher=publisherObjectPool.borrowObject();    publisher.publish(topic,payload,qos,isRetained);  } catch (  Exception e) {    logger.error("Error on borrow publisher from pool.",e);  } finally {    try {      publisherObjectPool.returnObject(publisher);    } catch (    Exception e) {      logger.error("While returning object to pool.",e);    }  }}  }
class C{  public void clearSelection(){  List<Integer> selection=getSelectedItems();  selectedItems.clear();  for (  Integer i : selection) {    notifyItemChanged(i);  }}  }
class C{  public static void encodeToFile(byte[] dataToEncode,String filename) throws java.io.IOException {  if (dataToEncode == null) {    throw new NullPointerException("Data to encode was null.");  }  Base64.OutputStream bos=null;  try {    bos=new Base64.OutputStream(new java.io.FileOutputStream(filename),Base64.ENCODE);    bos.write(dataToEncode);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bos.close();    } catch (    Exception e) {    }  }}  }
class C{  public static String[] split(String original,String separator){  Vector nodes=new Vector();  int index=original.indexOf(separator);  while (index >= 0) {    nodes.addElement(original.substring(0,index));    original=original.substring(index + separator.length());    index=original.indexOf(separator);  }  nodes.addElement(original);  String[] ret=new String[nodes.size()];  for (int i=0; i < nodes.size(); i++) {    ret[i]=(String)nodes.elementAt(i);  }  return ret;}  }
class C{  private void readReference(){  ArrayList<String> v_value=new ArrayList<String>();  ArrayList<String> v_name=new ArrayList<String>();  ArrayList<String> v_description=new ArrayList<String>();  DocumentEngine.readReferenceList(v_value,v_name,v_description);  int size=v_value.size();  s_value=new String[size];  s_name=new String[size];  s_description=new String[size];  for (int i=0; i < size; i++) {    s_value[i]=(String)v_value.get(i);    s_name[i]=(String)v_name.get(i);    s_description[i]=(String)v_description.get(i);  }}  }
class C{  RSASignature(String algorithm,ObjectIdentifier digestOID,int oidLength){  this.digestOID=digestOID;  try {    md=MessageDigest.getInstance(algorithm);  } catch (  NoSuchAlgorithmException e) {    throw new ProviderException(e);  }  digestReset=true;  encodedLength=baseLength + oidLength + md.getDigestLength();}  }
class C{  public void toXContent(Entry entry,XContentBuilder builder,ToXContent.Params params) throws IOException {  builder.startObject();  builder.field("snapshot",entry.snapshotId().getSnapshot());  builder.field("repository",entry.snapshotId().getRepository());  builder.field("state",entry.state());  builder.startArray("indices");{    for (    String index : entry.indices()) {      builder.value(index);    }  }  builder.endArray();  builder.startArray("shards");{    for (    Map.Entry<ShardId,ShardRestoreStatus> shardEntry : entry.shards.entrySet()) {      ShardId shardId=shardEntry.getKey();      ShardRestoreStatus status=shardEntry.getValue();      builder.startObject();{        builder.field("index",shardId.getIndex());        builder.field("shard",shardId.getId());        builder.field("state",status.state());      }      builder.endObject();    }  }  builder.endArray();  builder.endObject();}  }
