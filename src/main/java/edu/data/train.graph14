class C{  public void addClusterConnection(SimpleString name,DiscoveryGroupConfiguration dg,ClusterConnectionConfiguration config){  ServerLocatorImpl serverLocator=(ServerLocatorImpl)ActiveMQClient.createServerLocatorWithHA(dg);  configAndAdd(name,serverLocator,config);}  }
class C{  public void centerDialog(){  final Toolkit toolkit=Toolkit.getDefaultToolkit();  final Dimension screenSize=toolkit.getScreenSize();  final int x=(screenSize.width - getWidth()) / 2;  final int y=(screenSize.height - getHeight()) / 2;  setLocation(x,y);}  }
class C{  public static String convertToHTMLContent(String content){  content=replace(content,'&',"&amp;");  content=replace(content,'"',"&quot;");  content=replace(content,'<',"&lt;");  return replace(content,'>',"&gt;");}  }
class C{  private Object convertValueToTypeIfNecessary(String name,Object value,PropertyDescriptor[] pd){  for (  PropertyDescriptor aPd : pd) {    if (aPd.getName().equals(name)) {      value=getExpressionFactory().coerceToType(value,aPd.getPropertyType());      break;    }  }  return value;}  }
class C{  public Segment truncate(long index){  assertSegmentOpen();  Assert.index(index >= manager.commitIndex(),"cannot truncate committed index");  long offset=relativeOffset(index);  long lastOffset=offsetIndex.lastOffset();  long diff=Math.abs(lastOffset - offset);  skip=Math.max(skip - diff,0);  if (offset < lastOffset) {    long position=offsetIndex.truncate(offset);    buffer.position(position).zero(position).flush();    termIndex.truncate(offset);  }  return this;}  }
class C{  public static String buildNodeName(InetAddress addr){  String hostname=addr.getHostName();  if (hostname != null)   return hostname;  return String.format(Locale.getDefault(),"node%03d%03d%03d%03d",(int)(addr.getAddress()[0] & 0xFF),(int)(addr.getAddress()[1] & 0xFF),(int)(addr.getAddress()[2] & 0xFF),(int)(addr.getAddress()[3] & 0xFF));}  }
class C{  public static String mangleNativeMethod(String owner,String name){  return mangleNativeMethod(owner,name,null);}  }
class C{  public static Ed25519GroupElement precomputed(final Ed25519FieldElement yPlusx,final Ed25519FieldElement yMinusx,final Ed25519FieldElement xy2d){  return new Ed25519GroupElement(CoordinateSystem.PRECOMPUTED,yPlusx,yMinusx,xy2d,null);}  }
class C{  private void put(final Item i){  if (index + typeCount > threshold) {    int ll=items.length;    int nl=ll * 2 + 1;    Item[] newItems=new Item[nl];    for (int l=ll - 1; l >= 0; --l) {      Item j=items[l];      while (j != null) {        int index=j.hashCode % newItems.length;        Item k=j.next;        j.next=newItems[index];        newItems[index]=j;        j=k;      }    }    items=newItems;    threshold=(int)(nl * 0.75);  }  int index=i.hashCode % items.length;  i.next=items[index];  items[index]=i;}  }
class C{  protected PropertyNameOwnerImpl(){  super();}  }
class C{  @SuppressWarnings("unchecked") public void writeArray(Array x) throws SQLException {  if (x == null) {    attribs.add(null);  } else {    attribs.add(new SerialArray(x,map));  }}  }
class C{  @After public void tearDown() throws Exception {  TradestrategyTest.clearDBData();}  }
class C{  public String format(int indent){  try {    boolean useIndentAmount=false;    TransformerFactory factory=TransformerFactory.newInstance();    if (indent != -1) {      try {        factory.setAttribute("indent-number",indent);      } catch (      IllegalArgumentException e) {        useIndentAmount=true;      }    }    Transformer transformer=factory.newTransformer();    if (indent == -1 || parent == null) {      transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION,"yes");    } else {      transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION,"no");    }    transformer.setOutputProperty(OutputKeys.METHOD,"xml");    if (useIndentAmount) {      transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount",String.valueOf(indent));    }    transformer.setOutputProperty(OutputKeys.ENCODING,"UTF-8");    transformer.setOutputProperty(OutputKeys.INDENT,"yes");    final String decl="<?xml version=\"1.0\" encoding=\"UTF-8\"?>";    final String sep=System.getProperty("line.separator");    StringWriter tempWriter=new StringWriter();    StreamResult tempResult=new StreamResult(tempWriter);    transformer.transform(new DOMSource(node),tempResult);    String[] tempLines=PApplet.split(tempWriter.toString(),sep);    if (tempLines[0].startsWith("<?xml")) {      int declEnd=tempLines[0].indexOf("?>") + 2;      if (tempLines[0].length() == declEnd) {        tempLines=PApplet.subset(tempLines,1);      } else {        tempLines[0]=tempLines[0].substring(declEnd);      }    }    String singleLine=PApplet.join(PApplet.trim(tempLines),"");    if (indent == -1) {      return singleLine;    }    if (singleLine.trim().length() == 0) {      return decl + sep + singleLine;    }    StringWriter stringWriter=new StringWriter();    StreamResult xmlOutput=new StreamResult(stringWriter);    Source source=new StreamSource(new StringReader(singleLine));    transformer.transform(source,xmlOutput);    String outgoing=stringWriter.toString();    if (!outgoing.startsWith(decl)) {      return decl + sep + outgoing;    } else {      return outgoing;    }  } catch (  Exception e) {    e.printStackTrace();  }  return null;}  }
class C{  public final double prob(int classIndex,int intIndex){  if (Utils.gr(m_perBag[intIndex],0)) {    return m_perClassPerBag[intIndex][classIndex] / m_perBag[intIndex];  } else {    return prob(classIndex);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static String toArrayString(Object[] self){  return (self == null) ? "null" : InvokerHelper.toArrayString(self);}  }
class C{  public Organization(){}  }
class C{  @Override protected void doPost(HttpServletRequest request,HttpServletResponse response){  processGetRequest(request,response);}  }
class C{  private void action_treeDelete(ListItem item){  log.info("Item=" + item);  if (item != null) {    SimpleTreeModel model=(SimpleTreeModel)centerTree.getModel();    SimpleTreeNode stn=model.find(model.getRoot(),item.id);    if (stn != null)     model.removeNode(stn);    deleteNode(item);  }}  }
class C{  void disconnect(){synchronized (lock) {    disconnected=true;    lock.notifyAll();  }}  }
class C{  public int mapDcdColumnID(int colID){  for (int i=0; i < _dcdColumnMap.length; i++) {    int st=(i == 0 ? 1 : _dcdColumnMap[i - 1] + 1 + 1);    int end=_dcdColumnMap[i] + 1;    if (colID >= st && colID <= end)     return i + 1;  }  return -1;}  }
class C{  private int extend(final int required){  final int capacity=Math.max(required,capacity() * 2);  if (log.isDebugEnabled())   log.debug("Extending buffer to capacity=" + capacity + " bytes.");  return capacity;}  }
class C{  private CBatchPluginExecuter(){}  }
class C{  private synchronized void rebuildJournal() throws IOException {  if (journalWriter != null) {    journalWriter.close();  }  Writer writer=new BufferedWriter(new FileWriter(journalFileTmp),IO_BUFFER_SIZE);  writer.write(MAGIC);  writer.write("\n");  writer.write(VERSION_1);  writer.write("\n");  writer.write(Integer.toString(appVersion));  writer.write("\n");  writer.write(Integer.toString(valueCount));  writer.write("\n");  writer.write("\n");  for (  Entry entry : lruEntries.values()) {    if (entry.currentEditor != null) {      writer.write(DIRTY + ' ' + entry.key+ '\n');    } else {      writer.write(CLEAN + ' ' + entry.key+ entry.getLengths()+ '\n');    }  }  writer.close();  journalFileTmp.renameTo(journalFile);  journalWriter=new BufferedWriter(new FileWriter(journalFile,true),IO_BUFFER_SIZE);}  }
class C{  public ExceptionTable copy(ConstPool newCp,Map classnames){  ExceptionTable et=new ExceptionTable(newCp);  ConstPool srcCp=constPool;  int len=size();  for (int i=0; i < len; ++i) {    ExceptionTableEntry e=(ExceptionTableEntry)entries.get(i);    int type=srcCp.copy(e.catchType,newCp,classnames);    et.add(e.startPc,e.endPc,e.handlerPc,type);  }  return et;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:06.244 -0500",hash_original_method="99713AAB8FDC91BA4FFF953154B93F70",hash_generated_method="41CB867DCDD72D9ED89078F64DB12175") public boolean quickReject(Rect r){  return (((r.getTaintInt() + getTaintInt())) == 1);}  }
class C{  protected MkTabEntry createNewLeafEntry(DBID id,O object,double parentDistance){  return new MkTabLeafEntry(id,parentDistance,knnDistances(object));}  }
class C{  public void debug(String message,Object... args){  logger.debug(message,args);}  }
class C{  public Result_NB(String title,ResultModel resultModel){  super(title);  this.attacks=resultModel.getAttacks();  btnController=new ResultButtonController(resultModel);  chart=ChartHelper.createDumyChart();  initComponents();  resultTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);}  }
class C{  PolicyChecker(Set<String> initialPolicies,int certPathLen,boolean expPolicyRequired,boolean polMappingInhibited,boolean anyPolicyInhibited,boolean rejectPolicyQualifiers,PolicyNodeImpl rootNode){  if (initialPolicies.isEmpty()) {    this.initPolicies=new HashSet<String>(1);    this.initPolicies.add(ANY_POLICY);  } else {    this.initPolicies=new HashSet<String>(initialPolicies);  }  this.certPathLen=certPathLen;  this.expPolicyRequired=expPolicyRequired;  this.polMappingInhibited=polMappingInhibited;  this.anyPolicyInhibited=anyPolicyInhibited;  this.rejectPolicyQualifiers=rejectPolicyQualifiers;  this.rootNode=rootNode;}  }
class C{  public void replaceFromToWithFrom(int from,int to,AbstractCharList other,int otherFrom){  if (!(other instanceof CharArrayList)) {    super.replaceFromToWithFrom(from,to,other,otherFrom);    return;  }  int length=to - from + 1;  if (length > 0) {    checkRangeFromTo(from,to,size());    checkRangeFromTo(otherFrom,otherFrom + length - 1,other.size());    System.arraycopy(((CharArrayList)other).elements,otherFrom,elements,from,length);  }}  }
class C{  protected void addImpl(Component comp,Object constraints,int index){  if (comp instanceof Separator) {    if (getOrientation() == VERTICAL) {      ((Separator)comp).setOrientation(JSeparator.HORIZONTAL);    } else {      ((Separator)comp).setOrientation(JSeparator.VERTICAL);    }  }  super.addImpl(comp,constraints,index);  if (comp instanceof JButton) {    ((JButton)comp).setDefaultCapable(false);  }}  }
class C{  private void mapCgJournals(UnManagedProtectionSet unManagedProtectionSet,GetCGsResponse cg,Map<String,String> rpCopyAccessStateMap,Map<String,String> rpWwnToNativeWwn,List<String> storageNativeIdPrefixes,DbClient dbClient){  for (  GetCopyResponse copy : cg.getCopies()) {    String accessState=copy.getAccessState();    for (    GetVolumeResponse volume : copy.getJournals()) {      UnManagedVolume unManagedVolume=findUnManagedVolumeForWwn(volume.getWwn(),dbClient,storageNativeIdPrefixes);      Volume managedVolume=DiscoveryUtils.checkManagedVolumeExistsInDBByWwn(dbClient,volume.getWwn());      unManagedProtectionSet.getVolumeWwns().add(volume.getWwn());      if (null == unManagedVolume && null == managedVolume) {        log.info("Protection Set {} contains unknown Journal volume: {}. Skipping.",unManagedProtectionSet.getNativeGuid(),volume.getWwn());        continue;      }      if (null != managedVolume) {        log.info("Protection Set {} contains volume {} that is already managed",unManagedProtectionSet.getNativeGuid(),volume.getWwn());        if (!unManagedProtectionSet.getManagedVolumeIds().contains(managedVolume.getId().toString())) {          unManagedProtectionSet.getManagedVolumeIds().add(managedVolume.getId().toString());        }        if (null != unManagedVolume) {          log.info("Protection Set {} also has an orphaned UnManagedVolume {} that will be removed",unManagedProtectionSet.getNativeGuid(),unManagedVolume.getLabel());          unManagedProtectionSet.getUnManagedVolumeIds().remove(unManagedVolume.getId().toString());          unManagedVolumesToDelete.add(unManagedVolume);        }        continue;      }      log.info("Processing Journal UnManagedVolume {}",unManagedVolume.forDisplay());      rpCopyAccessStateMap.put(volume.getRpCopyName(),accessState);      if (!unManagedProtectionSet.getUnManagedVolumeIds().contains(unManagedVolume.getId().toString())) {        unManagedProtectionSet.getUnManagedVolumeIds().add(unManagedVolume.getId().toString());      }      updateCommonRPProperties(unManagedProtectionSet,unManagedVolume,Volume.PersonalityTypes.METADATA.name(),volume,dbClient);      rpWwnToNativeWwn.put(volume.getWwn(),unManagedVolume.getWwn());      unManagedVolumesToUpdateByWwn.put(unManagedVolume.getWwn(),unManagedVolume);    }  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:20.192 -0500",hash_original_method="C42EF88CC3B7717E7A29DDD6EED6CD2B",hash_generated_method="D3A89CF00F564A9CFE02EBD6D8219414") public boolean clipRect(int left,int top,int right,int bottom){  addTaint(left);  addTaint(top);  addTaint(right);  addTaint(bottom);  return getTaintBoolean();}  }
class C{  private SecureRandom createSecureRandom(){  SecureRandom result=null;  long t1=System.currentTimeMillis();  if (secureRandomClass != null) {    try {      Class<?> clazz=Class.forName(secureRandomClass);      result=(SecureRandom)clazz.newInstance();    } catch (    Exception e) {      log.error("Cannot load secureRandomClass: " + secureRandomClass,e);    }  }  if (result == null) {    try {      if (secureRandomProvider != null && secureRandomProvider.length() > 0) {        result=SecureRandom.getInstance(secureRandomAlgorithm,secureRandomProvider);      } else       if (secureRandomAlgorithm != null && secureRandomAlgorithm.length() > 0) {        result=SecureRandom.getInstance(secureRandomAlgorithm);      }    } catch (    NoSuchAlgorithmException e) {      log.error("SecureRandomAlgorithm " + secureRandomAlgorithm + " not found",e);    }catch (    NoSuchProviderException e) {      log.error("SecureRandomProvider not found " + secureRandomProvider,e);    }  }  if (result == null) {    try {      result=SecureRandom.getInstance("SHA1PRNG");    } catch (    NoSuchAlgorithmException e) {      log.error("SecureRandomAlgorithm " + secureRandomAlgorithm + " not found",e);    }  }  if (result == null) {    result=new SecureRandom();  }  result.nextInt();  long t2=System.currentTimeMillis();  if ((t2 - t1) > 100) {    log.warn("Session took more than 100ms to create! Time taken: " + (t2 - t1) + "ms");  }  return result;}  }
class C{  public static synchronized int generateLocalMsrpPort(RcsSettings rcsSettings){  return generateLocalTcpPort(rcsSettings.getDefaultMsrpPort());}  }
class C{  public FixedWidthTextTableSchema(){}  }
class C{  @Override public Token recoverInline(Parser recognizer) throws RecognitionException {  Token token=recognizer.getCurrentToken();  String message="unexpected token " + getTokenErrorDisplay(token) + " on line ("+ token.getLine()+ ") position ("+ token.getCharPositionInLine()+ ")"+ " was expecting one of "+ recognizer.getExpectedTokens().toString(recognizer.getVocabulary());  ParseException parseException=new ParseException(message,token.getStartIndex());  throw new RuntimeException(parseException);}  }
class C{  private static FreeFormPointSet fromValidatedGeoJson(InputStream is,int n){  JsonFactory f=new MappingJsonFactory();  FreeFormPointSet ret=new FreeFormPointSet(n);  int index=0;  try {    JsonParser jp=f.createParser(is);    JsonToken current=jp.nextToken();    while (jp.nextToken() != JsonToken.END_OBJECT) {      String key=jp.getCurrentName();      current=jp.nextToken();      if (key.equals("properties")) {        JsonNode properties=jp.readValueAsTree();        if (properties.get("id") != null)         ret.id=properties.get("id").asText();        if (properties.get("label") != null)         ret.label=properties.get("label").asText();        if (properties.get("description") != null)         ret.label=properties.get("description").asText();        if (properties.get("schema") != null) {          Iterator<Entry<String,JsonNode>> catIter=properties.get("schema").fields();          while (catIter.hasNext()) {            Entry<String,JsonNode> catEntry=catIter.next();            String catName=catEntry.getKey();            JsonNode catNode=catEntry.getValue();            PropertyMetadata cat=new PropertyMetadata(catName);            if (catNode.get("label") != null)             cat.label=catNode.get("label").asText();            if (catNode.get("style") != null) {              Iterator<Entry<String,JsonNode>> styleIter=catNode.get("style").fields();              while (styleIter.hasNext()) {                Entry<String,JsonNode> styleEntry=styleIter.next();                String styleName=styleEntry.getKey();                JsonNode styleValue=styleEntry.getValue();                cat.addStyle(styleName,styleValue.asText());              }            }            ret.propMetadata.put(catName,cat);          }        }      }      if (key.equals("features")) {        while (jp.nextToken() != JsonToken.END_ARRAY) {          JsonNode feature=jp.readValueAsTree();          ret.addFeature(feature,index++);        }      } else {        jp.skipChildren();      }    }  } catch (  Exception ex) {    LOG.error("GeoJSON parsing failure",ex);    return null;  }  return ret;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public OGLRenderToTextureSupport(){  this.isFramebufferObjectEnabled=true;  this.stackHandler=new OGLStackHandler();}  }
class C{  public NodeList(){  nodes=new ArrayList();}  }
class C{  public final void removeEditorListener(EditorListener l){  listeners.remove(EditorListener.class,l);}  }
class C{  public SearchType searchType(){  return searchType;}  }
class C{  @Override public void replaceSelection(String content){  if (!isEditable()) {    UIManager.getLookAndFeel().provideErrorFeedback(JEditorPane.this);    return;  }  EditorKit kit=getEditorKit();  if (kit instanceof StyledEditorKit) {    try {      Document doc=getDocument();      Caret caret=getCaret();      boolean composedTextSaved=saveComposedText(caret.getDot());      int p0=Math.min(caret.getDot(),caret.getMark());      int p1=Math.max(caret.getDot(),caret.getMark());      if (doc instanceof AbstractDocument) {        ((AbstractDocument)doc).replace(p0,p1 - p0,content,((StyledEditorKit)kit).getInputAttributes());      } else {        if (p0 != p1) {          doc.remove(p0,p1 - p0);        }        if (content != null && content.length() > 0) {          doc.insertString(p0,content,((StyledEditorKit)kit).getInputAttributes());        }      }      if (composedTextSaved) {        restoreComposedText();      }    } catch (    BadLocationException e) {      UIManager.getLookAndFeel().provideErrorFeedback(JEditorPane.this);    }  } else {    super.replaceSelection(content);  }}  }
class C{  public static void generateDOTofCFG(String inputFile,String outputDir,String method,String clas,boolean pdf){  generateDOTofCFG(inputFile,outputDir,method,clas,pdf,null);}  }
class C{  public SymbolTableEntryInternal steFor_Array(){  return getSymbolTableEntryInternal("Array",true);}  }
class C{  private double binomialCoefficient(final int n,final int k){  return Math.floor(0.5 + Math.exp(binomialCoefficientLn(n,k)));}  }
class C{  public ExponentialPower(double tau,RandomEngine randomGenerator){  setRandomGenerator(randomGenerator);  setState(tau);}  }
class C{  public void expandToInclude(double x,double y){  if (isNull()) {    minx=x;    maxx=x;    miny=y;    maxy=y;  } else {    if (x < minx) {      minx=x;    }    if (x > maxx) {      maxx=x;    }    if (y < miny) {      miny=y;    }    if (y > maxy) {      maxy=y;    }  }}  }
class C{  @Override public void mouseClicked(MouseEvent e){  int col;  boolean popup;  col=m_TableData.columnAtPoint(e.getPoint());  popup=((e.getButton() == MouseEvent.BUTTON3) && (e.getClickCount() == 1)) || ((e.getButton() == MouseEvent.BUTTON1) && (e.getClickCount() == 1) && e.isAltDown()&& !e.isControlDown()&& !e.isShiftDown());  popup=popup && (getInstances() != null);  if (e.getSource() == m_TableData.getTableHeader()) {    m_CurrentCol=col;    if (popup) {      e.consume();      setMenu();      initPopupMenus();      m_PopupHeader.show(e.getComponent(),e.getX(),e.getY());    }  } else   if (e.getSource() == m_TableData) {    if (popup) {      e.consume();      setMenu();      initPopupMenus();      m_PopupRows.show(e.getComponent(),e.getX(),e.getY());    }  }  if ((e.getButton() == MouseEvent.BUTTON1) && (e.getClickCount() == 1) && (!e.isAltDown())&& (col > -1)) {    m_TableData.setSelectedColumn(col);  }}  }
class C{  public void removeChangeListener(ChangeListener l){  listenerList.remove(ChangeListener.class,l);}  }
class C{  private IPiece createPiece(Context ctx,Scope parent,ForeignKey foreignKey) throws ScopeException, SQLScopeException {  List<ExpressionAST> joins=new LinkedList<ExpressionAST>();  for (  KeyPair pair : foreignKey.getKeys()) {    joins.add(ExpressionMaker.EQUAL(new ColumnReference(pair.getPrimary()),new ColumnReference(pair.getExported())));  }  if (joins.size() == 1) {    return createPiece(ctx,parent,joins.get(0));  } else   if (joins.size() > 1) {    return createPiece(ctx,parent,ExpressionMaker.AND(joins));  } else {    throw new ScopeException("undefined foreignKey '" + foreignKey.getName() + "' from table "+ foreignKey.getForeignTable()+ " to table "+ foreignKey.getPrimaryTable());  }}  }
class C{  protected void findNearestNeighbours(Instance target,KDTreeNode node,int k,MyHeap heap,double distanceToParents) throws Exception {  if (node.isALeaf()) {    if (m_TreeStats != null) {      m_TreeStats.updatePointCount(node.numInstances());      m_TreeStats.incrLeafCount();    }    double distance;    for (int idx=node.m_Start; idx <= node.m_End; idx++) {      if (target == m_Instances.instance(m_InstList[idx]))       continue;      if (heap.size() < k) {        distance=m_EuclideanDistance.distance(target,m_Instances.instance(m_InstList[idx]),Double.POSITIVE_INFINITY,m_Stats);        heap.put(m_InstList[idx],distance);      } else {        MyHeapElement temp=heap.peek();        distance=m_EuclideanDistance.distance(target,m_Instances.instance(m_InstList[idx]),temp.distance,m_Stats);        if (distance < temp.distance) {          heap.putBySubstitute(m_InstList[idx],distance);        } else         if (distance == temp.distance) {          heap.putKthNearest(m_InstList[idx],distance);        }      }    }  } else {    if (m_TreeStats != null) {      m_TreeStats.incrIntNodeCount();    }    KDTreeNode nearer, further;    boolean targetInLeft=m_EuclideanDistance.valueIsSmallerEqual(target,node.m_SplitDim,node.m_SplitValue);    if (targetInLeft) {      nearer=node.m_Left;      further=node.m_Right;    } else {      nearer=node.m_Right;      further=node.m_Left;    }    findNearestNeighbours(target,nearer,k,heap,distanceToParents);    if (heap.size() < k) {      double distanceToSplitPlane=distanceToParents + m_EuclideanDistance.sqDifference(node.m_SplitDim,target.value(node.m_SplitDim),node.m_SplitValue);      findNearestNeighbours(target,further,k,heap,distanceToSplitPlane);      return;    } else {      double distanceToSplitPlane=distanceToParents + m_EuclideanDistance.sqDifference(node.m_SplitDim,target.value(node.m_SplitDim),node.m_SplitValue);      if (heap.peek().distance >= distanceToSplitPlane) {        findNearestNeighbours(target,further,k,heap,distanceToSplitPlane);      }    }  }}  }
class C{  public void transform(Vector3 v){  tmp2.set(this);  tmp2.conjugate();  tmp2.mulLeft(tmp1.set(v.x,v.y,v.z,0)).mulLeft(this);  v.x=tmp2.x;  v.y=tmp2.y;  v.z=tmp2.z;}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public PaletteCMYKChooser(){}  }
class C{  private CreateVirtualNetworkWorkflowDocument buildPatch(TaskState.TaskStage stage,CreateVirtualNetworkWorkflowDocument.TaskState.SubStage subStage){  CreateVirtualNetworkWorkflowDocument state=new CreateVirtualNetworkWorkflowDocument();  state.taskState=new CreateVirtualNetworkWorkflowDocument.TaskState();  state.taskState.stage=stage;  state.taskState.subStage=subStage;  return state;}  }
class C{  public boolean isSetBeginTime(){  return EncodingUtils.testBit(issetBitfield,BEGINTIME_ISSET_ID);}  }
class C{  private void consolidateDuplicates(){  Map<String,List<ProtectionSet>> labelURIListMap=new HashMap<String,List<ProtectionSet>>();  List<URI> protectionSetURIs=dbClient.queryByType(ProtectionSet.class,true);  log.info("Scanning ProtectionSets for duplicate names.");  for (  URI protectionSetURI : protectionSetURIs) {    ProtectionSet protectionSet=dbClient.queryObject(ProtectionSet.class,protectionSetURI);    if (protectionSet == null || protectionSet.getInactive()) {      log.info("Skipping null or inactive protection set {}",protectionSetURI);      continue;    }    if (!labelURIListMap.containsKey(protectionSet.getLabel())) {      labelURIListMap.put(protectionSet.getLabel(),new ArrayList<ProtectionSet>());    }    labelURIListMap.get(protectionSet.getLabel()).add(protectionSet);  }  List<ProtectionSet> protectionSetsToDelete=new ArrayList<ProtectionSet>();  List<ProtectionSet> protectionSetsToPersist=new ArrayList<ProtectionSet>();  List<Volume> volumesToPersist=new ArrayList<Volume>();  List<BlockSnapshot> snapsToPersist=new ArrayList<BlockSnapshot>();  for (  Entry<String,List<ProtectionSet>> entry : labelURIListMap.entrySet()) {    if (entry.getValue().size() > 1) {      log.info("Duplicate protection sets found {} | {}",entry.getKey(),entry.getValue().toArray());      ProtectionSet protectionSet=entry.getValue().iterator().next();      for (      ProtectionSet duplicate : entry.getValue()) {        if (duplicate.getId().equals(protectionSet.getId())) {          continue;        }        log.info(String.format("duplicating %s protection set %s to %s)",protectionSet.getLabel(),duplicate.getId(),protectionSet.getId()));        protectionSet.getVolumes().addAll(duplicate.getVolumes());        for (        String volid : duplicate.getVolumes()) {          Volume vol=dbClient.queryObject(Volume.class,URI.create(volid));          if (vol == null || vol.getInactive()) {            log.info("Skipping null or inactive volume {}",volid);            continue;          }          log.info(String.format("Changing protection set id on volume %s from %s to %s",vol.getId(),vol.getProtectionSet().getURI(),protectionSet.getId()));          vol.setProtectionSet(new NamedURI(protectionSet.getId(),protectionSet.getLabel()));          volumesToPersist.add(vol);        }        URIQueryResultList blockSnapIds=new URIQueryResultList();        Constraint constraint=ContainmentConstraint.Factory.getProtectionSetBlockSnapshotConstraint(duplicate.getId());        dbClient.queryByConstraint(constraint,blockSnapIds);        Iterator<URI> itr=blockSnapIds.iterator();        while (itr.hasNext()) {          URI snapId=itr.next();          BlockSnapshot snap=dbClient.queryObject(BlockSnapshot.class,snapId);          if (snap == null || snap.getInactive()) {            log.info("Skipping null or inactive volume {}",snapId);            continue;          }          log.info(String.format("Changing protection set id on snapshot %s from %s to %s",snap.getId(),snap.getProtectionSet(),protectionSet.getId()));          snap.setProtectionSet(protectionSet.getId());          snapsToPersist.add(snap);        }        log.info("deleting duplicate protection set {}",duplicate.getId());        protectionSetsToDelete.add(duplicate);      }      protectionSetsToPersist.add(protectionSet);    }  }  dbClient.persistObject(protectionSetsToPersist);  dbClient.persistObject(volumesToPersist);  dbClient.persistObject(snapsToPersist);  dbClient.markForDeletion(protectionSetsToDelete);}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  ElementCreator builder=registry.build(KEY);  builder.addAttribute(END_TIME);  builder.addAttribute(START_TIME).setRequired(true);  builder.addAttribute(VALUE_STRING);  builder.addElement(Reminder.KEY).setCardinality(ElementMetadata.Cardinality.MULTIPLE);}  }
class C{  @Override public String generateLabelString(XYDataset dataset,int series,int item){  String result;  Object[] items;  if (dataset instanceof XYZDataset) {    items=createItemArray((XYZDataset)dataset,series,item);  } else {    items=createItemArray(dataset,series,item);  }  result=MessageFormat.format(getFormatString(),items);  return result;}  }
class C{  public static int floor_int(final float a){  final int intpart=(int)a;  if (a >= intpart || (CHECK_OVERFLOW && intpart == Integer.MIN_VALUE) || CHECK_NAN && Float.isNaN(a)) {    return intpart;  }  return intpart - 1;}  }
class C{  public JSONException syntaxError(String message){  return new JSONException(message + this);}  }
class C{  public static double[] logs2probs(double[] a){  double max=a[maxIndex(a)];  double sum=0.0;  double[] result=new double[a.length];  for (int i=0; i < a.length; i++) {    result[i]=Math.exp(a[i] - max);    sum+=result[i];  }  normalize(result,sum);  return result;}  }
class C{  @Override public boolean inSameL2Domain(DatapathId switch1,DatapathId switch2){  return inSameL2Domain(switch1,switch2,true);}  }
class C{  public static Week parseWeek(String s){  Week result=null;  if (s != null) {    s=s.trim();    int i=Week.findSeparator(s);    if (i != -1) {      String s1=s.substring(0,i).trim();      String s2=s.substring(i + 1,s.length()).trim();      Year y=Week.evaluateAsYear(s1);      int w;      if (y != null) {        w=Week.stringToWeek(s2);        if (w == -1) {          throw new TimePeriodFormatException("Can't evaluate the week.");        }        result=new Week(w,y);      } else {        y=Week.evaluateAsYear(s2);        if (y != null) {          w=Week.stringToWeek(s1);          if (w == -1) {            throw new TimePeriodFormatException("Can't evaluate the week.");          }          result=new Week(w,y);        } else {          throw new TimePeriodFormatException("Can't evaluate the year.");        }      }    } else {      throw new TimePeriodFormatException("Could not find separator.");    }  }  return result;}  }
class C{  public static final void sort(int[] a,int[] b,int length){  mergesort(a,b,0,length - 1);}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:14.460 -0500",hash_original_method="E08EA131E9320463E856348907B813CB",hash_generated_method="664617F0F17BA9E1B53827ED2EDDA9E9") public void addMessageToConsole(String message,int lineNumber,String sourceID,int msgLevel){  if (mWebChromeClient == null) {    return;  }  Message msg=obtainMessage(ADD_MESSAGE_TO_CONSOLE);  msg.getData().putString("message",message);  msg.getData().putString("sourceID",sourceID);  msg.getData().putInt("lineNumber",lineNumber);  msg.getData().putInt("msgLevel",msgLevel);  sendMessage(msg);}  }
class C{  static synchronized void reset(){  caches.clear();}  }
class C{  static boolean tagCloses(String tagName,String elementName){  return tagMatchesElementName(tagName,elementName) || (isHeading(tagName) && isHeading(elementName));}  }
class C{  public static void readAbbrList(String dataFile,Map map) throws IOException {  BufferedReader fin=new BufferedReader(new FileReader(dataFile));  String line;  while ((line=fin.readLine()) != null) {    StringTokenizer strTok=new StringTokenizer(line," \t\r\n");    if (strTok.countTokens() <= 0) {      continue;    }    String token=strTok.nextToken();    map.put(token.toLowerCase(),token.toLowerCase());  }}  }
class C{  public NotificationChain basicSetDeclaredElementType(TypeRef newDeclaredElementType,NotificationChain msgs){  TypeRef oldDeclaredElementType=declaredElementType;  declaredElementType=newDeclaredElementType;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,TypesPackage.TOBJECT_PROTOTYPE__DECLARED_ELEMENT_TYPE,oldDeclaredElementType,newDeclaredElementType);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public boolean createAccounting(KeyNamePair currency,boolean hasProduct,boolean hasBPartner,boolean hasProject,boolean hasMCampaign,boolean hasSRegion,Timestamp startDate,int historyYears,File AccountingFile){  log.info(m_client.toString());  m_hasProject=hasProject;  m_hasMCampaign=hasMCampaign;  m_hasSRegion=hasSRegion;  m_info=new StringBuffer();  String name=null;  StringBuffer sqlCmd=null;  int no=0;  if (!createCalendar(startDate,historyYears))   return false;  name=m_clientName + " " + Msg.translate(m_lang,"Account_ID");  MElement element=new MElement(m_client,name,MElement.ELEMENTTYPE_Account,m_AD_Tree_Account_ID);  if (!element.save()) {    String err="Acct Element NOT inserted";    log.log(Level.SEVERE,err);    m_info.append(err);    m_trx.rollback();    m_trx.close();    return false;  }  C_Element_ID=element.getC_Element_ID();  m_info.append(Msg.translate(m_lang,"C_Element_ID")).append("=").append(name).append("\n");  m_nap=new NaturalAccountMap<String,MElementValue>(m_ctx,m_trx.getTrxName());  String errMsg=m_nap.parseFile(AccountingFile);  if (errMsg.length() != 0) {    log.log(Level.SEVERE,errMsg);    m_info.append(errMsg);    m_trx.rollback();    m_trx.close();    return false;  }  if (m_nap.saveAccounts(getAD_Client_ID(),getAD_Org_ID(),C_Element_ID))   m_info.append(Msg.translate(m_lang,"C_ElementValue_ID")).append(" # ").append(m_nap.size()).append("\n"); else {    String err="Acct Element Values NOT inserted";    log.log(Level.SEVERE,err);    m_info.append(err);    m_trx.rollback();    m_trx.close();    return false;  }  int C_ElementValue_ID=m_nap.getC_ElementValue_ID("DEFAULT_ACCT");  log.fine("C_ElementValue_ID=" + C_ElementValue_ID);  m_as=new MAcctSchema(m_client,currency);  if (!m_as.save()) {    String err="AcctSchema NOT inserted";    log.log(Level.SEVERE,err);    m_info.append(err);    m_trx.rollback();    m_trx.close();    return false;  }  m_info.append(Msg.translate(m_lang,"C_AcctSchema_ID")).append("=").append(m_as.getName()).append("\n");  String sql2=null;  if (Env.isBaseLanguage(m_lang,"AD_Reference"))   sql2="SELECT Value, Name FROM AD_Ref_List WHERE AD_Reference_ID=181"; else   sql2="SELECT l.Value, t.Name FROM AD_Ref_List l, AD_Ref_List_Trl t " + "WHERE l.AD_Reference_ID=181 AND l.AD_Ref_List_ID=t.AD_Ref_List_ID" + " AND t.AD_Language="+ DB.TO_STRING(m_lang);  PreparedStatement stmt=null;  ResultSet rs=null;  try {    int AD_Client_ID=m_client.getAD_Client_ID();    stmt=DB.prepareStatement(sql2,m_trx.getTrxName());    rs=stmt.executeQuery();    while (rs.next()) {      String ElementType=rs.getString(1);      name=rs.getString(2);      String IsMandatory=null;      String IsBalanced="N";      int SeqNo=0;      int C_AcctSchema_Element_ID=0;      if (ElementType.equals("OO")) {        C_AcctSchema_Element_ID=getNextID(AD_Client_ID,"C_AcctSchema_Element");        IsMandatory="Y";        IsBalanced="Y";        SeqNo=10;      } else       if (ElementType.equals("AC")) {        C_AcctSchema_Element_ID=getNextID(AD_Client_ID,"C_AcctSchema_Element");        IsMandatory="Y";        SeqNo=20;      } else       if (ElementType.equals("PR") && hasProduct) {        C_AcctSchema_Element_ID=getNextID(AD_Client_ID,"C_AcctSchema_Element");        IsMandatory="N";        SeqNo=30;      } else       if (ElementType.equals("BP") && hasBPartner) {        C_AcctSchema_Element_ID=getNextID(AD_Client_ID,"C_AcctSchema_Element");        IsMandatory="N";        SeqNo=40;      } else       if (ElementType.equals("PJ") && hasProject) {        C_AcctSchema_Element_ID=getNextID(AD_Client_ID,"C_AcctSchema_Element");        IsMandatory="N";        SeqNo=50;      } else       if (ElementType.equals("MC") && hasMCampaign) {        C_AcctSchema_Element_ID=getNextID(AD_Client_ID,"C_AcctSchema_Element");        IsMandatory="N";        SeqNo=60;      } else       if (ElementType.equals("SR") && hasSRegion) {        C_AcctSchema_Element_ID=getNextID(AD_Client_ID,"C_AcctSchema_Element");        IsMandatory="N";        SeqNo=70;      }      if (IsMandatory != null) {        sqlCmd=new StringBuffer("INSERT INTO C_AcctSchema_Element(");        sqlCmd.append(m_stdColumns).append(",C_AcctSchema_Element_ID,C_AcctSchema_ID,").append("ElementType,Name,SeqNo,IsMandatory,IsBalanced) VALUES (");        sqlCmd.append(m_stdValues).append(",").append(C_AcctSchema_Element_ID).append(",").append(m_as.getC_AcctSchema_ID()).append(",").append("'").append(ElementType).append("','").append(name).append("',").append(SeqNo).append(",'").append(IsMandatory).append("','").append(IsBalanced).append("')");        no=DB.executeUpdate(sqlCmd.toString(),m_trx.getTrxName());        if (no == 1)         m_info.append(Msg.translate(m_lang,"C_AcctSchema_Element_ID")).append("=").append(name).append("\n");        if (ElementType.equals("OO")) {          sqlCmd=new StringBuffer("UPDATE C_AcctSchema_Element SET Org_ID=");          sqlCmd.append(getAD_Org_ID()).append(" WHERE C_AcctSchema_Element_ID=").append(C_AcctSchema_Element_ID);          no=DB.executeUpdate(sqlCmd.toString(),m_trx.getTrxName());          if (no != 1)           log.log(Level.SEVERE,"Default Org in AcctSchamaElement NOT updated");        }        if (ElementType.equals("AC")) {          sqlCmd=new StringBuffer("UPDATE C_AcctSchema_Element SET C_ElementValue_ID=");          sqlCmd.append(C_ElementValue_ID).append(", C_Element_ID=").append(C_Element_ID);          sqlCmd.append(" WHERE C_AcctSchema_Element_ID=").append(C_AcctSchema_Element_ID);          no=DB.executeUpdate(sqlCmd.toString(),m_trx.getTrxName());          if (no != 1)           log.log(Level.SEVERE,"Default Account in AcctSchamaElement NOT updated");        }      }    }  } catch (  SQLException e1) {    log.log(Level.SEVERE,"Elements",e1);    m_info.append(e1.getMessage());    m_trx.rollback();    m_trx.close();    return false;  } finally {    DB.close(rs,stmt);    rs=null;    stmt=null;  }  try {    createAccountingRecord(X_C_AcctSchema_GL.Table_Name);    createAccountingRecord(X_C_AcctSchema_Default.Table_Name);  } catch (  Exception e) {    String err=e.getLocalizedMessage();    log.log(Level.SEVERE,err);    m_info.append(err);    m_trx.rollback();    m_trx.close();    return false;  }  createGLCategory("Standard",MGLCategory.CATEGORYTYPE_Manual,true);  int GL_None=createGLCategory("None",MGLCategory.CATEGORYTYPE_Document,false);  int GL_GL=createGLCategory("Manual",MGLCategory.CATEGORYTYPE_Manual,false);  int GL_ARI=createGLCategory("AR Invoice",MGLCategory.CATEGORYTYPE_Document,false);  int GL_ARR=createGLCategory("AR Receipt",MGLCategory.CATEGORYTYPE_Document,false);  int GL_MM=createGLCategory("Material Management",MGLCategory.CATEGORYTYPE_Document,false);  int GL_API=createGLCategory("AP Invoice",MGLCategory.CATEGORYTYPE_Document,false);  int GL_APP=createGLCategory("AP Payment",MGLCategory.CATEGORYTYPE_Document,false);  int GL_CASH=createGLCategory("Cash/Payments",MGLCategory.CATEGORYTYPE_Document,false);  int GL_Manufacturing=createGLCategory("Manufacturing",MGLCategory.CATEGORYTYPE_Document,false);  int GL_Distribution=createGLCategory("Distribution",MGLCategory.CATEGORYTYPE_Document,false);  int GL_Payroll=createGLCategory("Payroll",MGLCategory.CATEGORYTYPE_Document,false);  int ii=createDocType("GL Journal",Msg.getElement(m_ctx,"GL_Journal_ID"),MDocType.DOCBASETYPE_GLJournal,null,0,0,1000,GL_GL,false);  if (ii == 0) {    String err="Document Type not created";    m_info.append(err);    m_trx.rollback();    m_trx.close();    return false;  }  createDocType("GL Journal Batch",Msg.getElement(m_ctx,"GL_JournalBatch_ID"),MDocType.DOCBASETYPE_GLJournal,null,0,0,100,GL_GL,false);  int DT_I=createDocType("AR Invoice",Msg.getElement(m_ctx,"C_Invoice_ID",true),MDocType.DOCBASETYPE_ARInvoice,null,0,0,100000,GL_ARI,false);  int DT_II=createDocType("AR Invoice Indirect",Msg.getElement(m_ctx,"C_Invoice_ID",true),MDocType.DOCBASETYPE_ARInvoice,null,0,0,150000,GL_ARI,false);  int DT_IC=createDocType("AR Credit Memo",Msg.getMsg(m_ctx,"CreditMemo"),MDocType.DOCBASETYPE_ARCreditMemo,null,0,0,170000,GL_ARI,false);  createDocType("AP Invoice",Msg.getElement(m_ctx,"C_Invoice_ID",false),MDocType.DOCBASETYPE_APInvoice,null,0,0,0,GL_API,false);  int DT_IPC=createDocType("AP CreditMemo",Msg.getMsg(m_ctx,"CreditMemo"),MDocType.DOCBASETYPE_APCreditMemo,null,0,0,0,GL_API,false);  createDocType("Match Invoice",Msg.getElement(m_ctx,"M_MatchInv_ID",false),MDocType.DOCBASETYPE_MatchInvoice,null,0,0,390000,GL_API,false);  createDocType("AR Receipt",Msg.getElement(m_ctx,"C_Payment_ID",true),MDocType.DOCBASETYPE_ARReceipt,null,0,0,0,GL_ARR,false);  createDocType("AP Payment",Msg.getElement(m_ctx,"C_Payment_ID",false),MDocType.DOCBASETYPE_APPayment,null,0,0,0,GL_APP,false);  createDocType("Allocation","Allocation",MDocType.DOCBASETYPE_PaymentAllocation,null,0,0,490000,GL_CASH,false);  int DT_S=createDocType("MM Shipment","Delivery Note",MDocType.DOCBASETYPE_MaterialDelivery,null,0,0,500000,GL_MM,false);  int DT_SI=createDocType("MM Shipment Indirect","Delivery Note",MDocType.DOCBASETYPE_MaterialDelivery,null,0,0,550000,GL_MM,false);  int DT_VRM=createDocType("MM Vendor Return","Vendor Return",MDocType.DOCBASETYPE_MaterialDelivery,null,0,0,590000,GL_MM,true);  createDocType("MM Receipt","Vendor Delivery",MDocType.DOCBASETYPE_MaterialReceipt,null,0,0,0,GL_MM,false);  int DT_RM=createDocType("MM Customer Return","Customer Return",MDocType.DOCBASETYPE_MaterialReceipt,null,0,0,570000,GL_MM,true);  createDocType("Purchase Order",Msg.getElement(m_ctx,"C_Order_ID",false),MDocType.DOCBASETYPE_PurchaseOrder,null,0,0,800000,GL_None,false);  createDocType("Match PO",Msg.getElement(m_ctx,"M_MatchPO_ID",false),MDocType.DOCBASETYPE_MatchPO,null,0,0,890000,GL_None,false);  createDocType("Purchase Requisition",Msg.getElement(m_ctx,"M_Requisition_ID",false),MDocType.DOCBASETYPE_PurchaseRequisition,null,0,0,900000,GL_None,false);  createDocType("Vendor Return Material","Vendor Return Material Authorization",MDocType.DOCBASETYPE_PurchaseOrder,MDocType.DOCSUBTYPESO_ReturnMaterial,DT_VRM,DT_IPC,990000,GL_MM,false);  createDocType("Bank Statement",Msg.getElement(m_ctx,"C_BankStatemet_ID",true),MDocType.DOCBASETYPE_BankStatement,null,0,0,700000,GL_CASH,false);  createDocType("Cash Journal",Msg.getElement(m_ctx,"C_Cash_ID",true),MDocType.DOCBASETYPE_CashJournal,null,0,0,750000,GL_CASH,false);  createDocType("Material Movement",Msg.getElement(m_ctx,"M_Movement_ID",false),MDocType.DOCBASETYPE_MaterialMovement,null,0,0,610000,GL_MM,false);  createDocType("Physical Inventory",Msg.getElement(m_ctx,"M_Inventory_ID",false),MDocType.DOCBASETYPE_MaterialPhysicalInventory,null,0,0,620000,GL_MM,false);  createDocType("Material Production",Msg.getElement(m_ctx,"M_Production_ID",false),MDocType.DOCBASETYPE_MaterialProduction,null,0,0,630000,GL_MM,false);  createDocType("Project Issue",Msg.getElement(m_ctx,"C_ProjectIssue_ID",false),MDocType.DOCBASETYPE_ProjectIssue,null,0,0,640000,GL_MM,false);  createDocType("Binding offer","Quotation",MDocType.DOCBASETYPE_SalesOrder,MDocType.DOCSUBTYPESO_Quotation,0,0,10000,GL_None,false);  createDocType("Non binding offer","Proposal",MDocType.DOCBASETYPE_SalesOrder,MDocType.DOCSUBTYPESO_Proposal,0,0,20000,GL_None,false);  createDocType("Prepay Order","Prepay Order",MDocType.DOCBASETYPE_SalesOrder,MDocType.DOCSUBTYPESO_PrepayOrder,DT_S,DT_I,30000,GL_None,false);  createDocType("Customer Return Material","Customer Return Material Authorization",MDocType.DOCBASETYPE_SalesOrder,MDocType.DOCSUBTYPESO_ReturnMaterial,DT_RM,DT_IC,30000,GL_None,false);  createDocType("Standard Order","Order Confirmation",MDocType.DOCBASETYPE_SalesOrder,MDocType.DOCSUBTYPESO_StandardOrder,DT_S,DT_I,50000,GL_None,false);  createDocType("Credit Order","Order Confirmation",MDocType.DOCBASETYPE_SalesOrder,MDocType.DOCSUBTYPESO_OnCreditOrder,DT_S,DT_I,60000,GL_None,false);  createDocType("Warehouse Order","Order Confirmation",MDocType.DOCBASETYPE_SalesOrder,MDocType.DOCSUBTYPESO_WarehouseOrder,DT_S,DT_I,70000,GL_None,false);  createDocType("Manufacturing Order","Manufacturing Order",MDocType.DOCBASETYPE_ManufacturingOrder,null,0,0,80000,GL_Manufacturing,false);  createDocType("Manufacturing Cost Collector","Cost Collector",MDocType.DOCBASETYPE_ManufacturingCostCollector,null,0,0,81000,GL_Manufacturing,false);  createDocType("Maintenance Order","Maintenance Order",MDocType.DOCBASETYPE_MaintenanceOrder,null,0,0,86000,GL_Manufacturing,false);  createDocType("Quality Order","Quality Order",MDocType.DOCBASETYPE_QualityOrder,null,0,0,87000,GL_Manufacturing,false);  createDocType("Distribution Order","Distribution Order",MDocType.DOCBASETYPE_DistributionOrder,null,0,0,88000,GL_Distribution,false);  createDocType("Payroll","Payroll",MDocType.DOCBASETYPE_Payroll,null,0,0,90000,GL_Payroll,false);  int DT=createDocType("POS Order","Order Confirmation",MDocType.DOCBASETYPE_SalesOrder,MDocType.DOCSUBTYPESO_POSOrder,DT_S,DT_I,80000,GL_None,false);  createPreference("C_DocTypeTarget_ID",String.valueOf(DT),143);  sqlCmd=new StringBuffer("UPDATE AD_ClientInfo SET ");  sqlCmd.append("C_AcctSchema1_ID=").append(m_as.getC_AcctSchema_ID()).append(", C_Calendar_ID=").append(m_calendar.getC_Calendar_ID()).append(" WHERE AD_Client_ID=").append(m_client.getAD_Client_ID());  no=DB.executeUpdate(sqlCmd.toString(),m_trx.getTrxName());  if (no != 1) {    String err="ClientInfo not updated";    log.log(Level.SEVERE,err);    m_info.append(err);    m_trx.rollback();    m_trx.close();    return false;  }  DocumentTypeVerify.createDocumentTypes(m_ctx,getAD_Client_ID(),null,m_trx.getTrxName());  DocumentTypeVerify.createPeriodControls(m_ctx,getAD_Client_ID(),null,m_trx.getTrxName());  log.info("fini");  return true;}  }
class C{  boolean isValidScheme(String scheme){  return true;}  }
class C{  public void loadAIMLFile(InputStream stream,String name,boolean createStates,boolean mergeState,boolean indexStatic,String encoding,int maxSize){  String text=Utils.loadTextFile(stream,encoding,MAX_FILE_SIZE);  loadAIML(text,name,createStates,mergeState,indexStatic);}  }
class C{  public int compareTo(Dog daUddaDog){  return this.size - daUddaDog.size;}  }
class C{  public boolean isSetNewlist(){  return this.newlist != null;}  }
class C{  public CharSet minus(CharSet that){  CharSet result=this.copy();  for (int i=MathLib.min(this._mapping.length,that._mapping.length); --i >= 0; ) {    result._mapping[i]&=~that._mapping[i];  }  return result;}  }
class C{  public Warning(int code,Object... args){  this(Messages.INSTANCE.getValidationWarning(code,args),code);}  }
class C{  @Override public boolean equals(Object other){  if (other == null || this.getClass() != other.getClass()) {    return false;  }  DOMNodeObjectModel otherDOMNodeObjectModel=(DOMNodeObjectModel)other;  if (this.nodeType.equals(otherDOMNodeObjectModel.nodeType) && this.fields.equals(otherDOMNodeObjectModel.fields) && this.childrenDOMNodes.equals(otherDOMNodeObjectModel.childrenDOMNodes)) {    return true;  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:20.554 -0500",hash_original_method="A1F941D6CE0FD78BF39EC8F9AC314942",hash_generated_method="C972BE9BCA555461E0B0F1907BED8AEB") protected void addMessageProcessor(MessageProcessor newMessageProcessor) throws IOException {synchronized (messageProcessors) {    messageProcessors.add(newMessageProcessor);  }}  }
class C{  public void addAuthorization(Authorization authorization){  authorizations.put(authorization.getUsername(),authorization);}  }
class C{  private static void runAnalysis(){  SpatialAnalysis.writePopulationToShape("/home/dhosse/Dokumente/01_eGAP/plansV4.xml.gz","/home/dhosse/Dokumente/01_eGAP/popV4.shp");}  }
class C{  public boolean logModified(Logger log){  return false;}  }
class C{  public static Element addElementFirst(final Element parent,final String name){  final Element ele=parent.getOwnerDocument().createElement(name);  parent.insertBefore(ele,null);  return ele;}  }
class C{  @DSComment("Potential intent to trigger other processing") @DSSafe(DSCat.INTENT_EXCHANGE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:09.517 -0500",hash_original_method="79076492A33BAA4B69A022CE305E32E8",hash_generated_method="1A23CC6FCDD5B5BFDC1538D40AAC1BAC") public Intent putExtra(String name,Bundle value){  mExtras.put(name,value);  return this;}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 198) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  @Override public String toString(){  return "[" + this.getClass().getCanonicalName() + " size="+ _values.length+ ","+ " values="+ Arrays.toString(_values)+ "]";}  }
class C{  default String renderThrows(Generator gen,M model){  return gen.onEach(model.getExceptions()).collect(joinIfNotEmpty(", ","throws ",""));}  }
class C{  public Configurator loadingBackgroundResource(int backgroundRes){  if (backgroundRes > 0) {    viewLoadingBackgroundResource=backgroundRes;  }  return this;}  }
class C{  protected boolean hasZoom(){  return true;}  }
class C{  public StrSubstitutor(final StrLookup<?> variableResolver){  this(variableResolver,DEFAULT_PREFIX,DEFAULT_SUFFIX,DEFAULT_ESCAPE);}  }
class C{  public AccountAttribute asAccountAttribute(Account.Id id){  if (id == null) {    return null;  }  return asAccountAttribute(accountCache.get(id).getAccount());}  }
class C{  static void satisfy(boolean expression,String message){  if (!expression) {    throw new IllegalArgumentException(message);  }}  }
class C{  public void run(String username,String password) throws AuthenticationException {  for (  String s : WELCOME_MESSAGE) {    out.println(s);  }  BufferedReader reader=new BufferedReader(new InputStreamReader(System.in));  login(username,password);  try {    loadSheet(reader);  } catch (  Exception e) {    e.printStackTrace();  }  while (executeCommand(reader)) {  }}  }
class C{  public boolean isFilled(){  return filled;}  }
class C{  void finishDataBlock(boolean bForceFinish) throws IOException {  if (blkAppender == null) {    return;  }  if (bForceFinish || blkAppender.getCompressedSize() >= sizeMinBlock) {    TFileIndexEntry keyLast=new TFileIndexEntry(lastKeyBufferOS.getBuffer(),0,lastKeyBufferOS.size(),blkRecordCount);    tfileIndex.addEntry(keyLast);    blkAppender.close();    blkAppender=null;    blkRecordCount=0;  }}  }
class C{  public void addKeyData(String key,int low,int high){  if (keys == null) {    keys=new ArrayList<String>();    keys_min=new ArrayList<Integer>();    keys_range=new ArrayList<Integer>();  }  keys.add(key);  keys_min.add(low);  keys_range.add(high - low + 1);}  }
class C{  @Override synchronized void verifyCanLogMessage(){  super.verifyCanLogMessage();}  }
class C{  public int hashCode(){  return m_storedObjectArray.length;}  }
class C{  public static int number(){  return _all.size();}  }
class C{  GridMemcachedMessage(){}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private void tryParseResourceElement(IDOMElement element){  if (!UiBinderXmlModelUtilities.isImageElement(element) && !UiBinderXmlModelUtilities.isDataElement(element)) {    return;  }  IDOMAttr srcAttribute=(IDOMAttr)UiBinderXmlModelUtilities.getSrcAttribute(element);  if (srcAttribute == null) {    return;  }  IRegion srcAttributeRegion=XmlUtilities.getAttributeValueRegion(srcAttribute);  if (srcAttributeRegion == null) {    return;  }  IPath classpathRelativePath=classpathRelativeDir.append(srcAttribute.getNodeValue());  IFile file=getExistingFile(classpathRelativePath);  if (classpathRelativePath != null) {    addReference(xmlReferenceLocation,new ClasspathRelativeFileReferenceLocation(classpathRelativePath));  }  if (file == null || classpathRelativePath == null) {    problemMarkerManager.setResourceNotFoundError(srcAttributeRegion,srcAttribute.getNodeValue());  }}  }
class C{  @Override public double[] distributionForInstance(Instance instance) throws Exception {  if (m_NumIterationsPerformed == 0) {    return m_ZeroR.distributionForInstance(instance);  }  if (m_NumIterationsPerformed == 0) {    throw new Exception("No model built");  }  double[] sums=new double[instance.numClasses()];  if (m_NumIterationsPerformed == 1) {    return m_Classifiers[0].distributionForInstance(instance);  } else {    for (int i=0; i < m_NumIterationsPerformed; i++) {      sums[(int)m_Classifiers[i].classifyInstance(instance)]+=m_Betas[i];    }    return Utils.logs2probs(sums);  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void updateBucketACL(String bucketName,String payload) throws ECSException {  _log.debug("ECSApi:updateBucketACL Update bucket ACL initiated for : {}",bucketName);  ClientResponse clientResp=null;  final String path=MessageFormat.format(URI_UPDATE_BUCKET_ACL,bucketName);  try {    clientResp=put(path,payload);    if (null == clientResp) {      throw ECSException.exceptions.bucketACLUpdateFailed(bucketName,"no response from ECS");    } else     if (clientResp.getStatus() != 200) {      throw ECSException.exceptions.bucketACLUpdateFailed(bucketName,getResponseDetails(clientResp));    }  } catch (  Exception e) {    _log.error("Error occured while ACL update for bucket : {}",bucketName,e);    throw ECSException.exceptions.bucketACLUpdateFailed(bucketName,e.getMessage());  } finally {    if (clientResp != null) {      closeResponse(clientResp);    }  }}  }
class C{  public void shutdown(){}  }
class C{  public static Version v2_0(){  return new Version(ICalVersion.V2_0);}  }
class C{  private void analize(){  StringTokenizer tokenizer=new StringTokenizer(sourceData,",");  event=Integer.parseInt(tokenizer.nextToken());  actionType=Integer.parseInt(tokenizer.nextToken());  macroId=Integer.parseInt(tokenizer.nextToken());}  }
class C{  static public PVector random3D(PApplet parent){  return random3D(null,parent);}  }
class C{  @Override public BooleanVal copy(){  return new BooleanVal(b);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public boolean isWindows(){  return operatingSystem == OperatingSystem.WINDOWS;}  }
class C{  protected PrimeFinder(){}  }
class C{  protected void firePathChanged(TreePath path){  Object node=path.getLastPathComponent();  TreePath parentPath=path.getParentPath();  if (parentPath == null) {    fireChildrenChanged(path,null,null);  } else {    Object parent=parentPath.getLastPathComponent();    fireChildChanged(parentPath,getIndexOfChild(parent,node),node);  }}  }
class C{  @Override public Object listField(final FormObject form){  final ObservableList<String> items=FXCollections.observableArrayList(form.getItemsList());  final ListView<String> lists=items == null ? new ListView<String>() : new ListView<String>(items);  final JavaFXControlListener controlListener=new JavaFXControlListener(lists);  final StringBuilder styleBuilder=new StringBuilder(200);  if (!form.getFieldFlags()[FormObject.MULTISELECT_ID]) {    lists.getSelectionModel().setSelectionMode(SelectionMode.SINGLE);  }  if (form.getSelectionIndices() != null) {    lists.getSelectionModel().selectFirst();  } else   if (form.getValuesMap(true) != null) {    lists.getSelectionModel().select(form.getValuesMap(true).get(form.getSelectedItem()));  } else {    lists.getSelectionModel().select(form.getSelectedItem());  }  final int selectionIndex=lists.getSelectionModel().getSelectedIndex();  form.setSelection(new Object[]{lists.getSelectionModel().getSelectedItem()},lists.getSelectionModel().getSelectedItem(),new int[]{selectionIndex},selectionIndex);  setupUniversalFeatures(lists,form,styleBuilder,controlListener);  setBorder(form,styleBuilder);  addFont(form,true,true,styleBuilder);  lists.getStyleClass().add("formsListBox");  lists.setStyle(styleBuilder.toString());  lists.getSelectionModel().selectedIndexProperty().addListener(new JavaFXListListener(lists,form));  return lists;}  }
class C{  private CMenuBuilder(){}  }
class C{  public DTMAxisIterator cloneIterator(){  _isRestartable=false;  try {    final PrecedingIterator clone=(PrecedingIterator)super.clone();    final int[] stackCopy=new int[_stack.length];    System.arraycopy(_stack,0,stackCopy,0,_stack.length);    clone._stack=stackCopy;    return clone;  } catch (  CloneNotSupportedException e) {    throw new DTMException(XMLMessages.createXMLMessage(XMLErrorResources.ER_ITERATOR_CLONE_NOT_SUPPORTED,null));  }}  }
class C{  private boolean isOnlySimAssociated(Set<Long> rawContactIds){  for (  Long rawContactId : rawContactIds) {    if (isSimAccount(rawContactId)) {      return true;    }  }  return false;}  }
class C{  public CompositeName(String n) throws InvalidNameException {  impl=new NameImpl(null,n);}  }
class C{  public static boolean isCglibProxy(Object object){  return ClassUtils.isCglibProxyClass(object.getClass());}  }
class C{  public void semiringPlus(HyperEdge hyperEdge){  if (null == bestHyperedge || bestHyperedge.getBestDerivationScore() < hyperEdge.getBestDerivationScore()) {    bestHyperedge=hyperEdge;  }}  }
class C{  public Data encode(@Nullable Object obj) throws IgniteCheckedException {  if (obj == null)   return new Data(null,(short)0);  byte[] bytes;  short flags=0;  if (obj instanceof String)   bytes=((String)obj).getBytes(); else   if (obj instanceof Boolean) {    bytes=new byte[]{(byte)((Boolean)obj ? '1' : '0')};    flags|=BOOLEAN_FLAG;  } else   if (obj instanceof Integer) {    bytes=U.intToBytes((Integer)obj);    flags|=INT_FLAG;  } else   if (obj instanceof Long) {    bytes=U.longToBytes((Long)obj);    flags|=LONG_FLAG;  } else   if (obj instanceof Date) {    bytes=U.longToBytes(((Date)obj).getTime());    flags|=DATE_FLAG;  } else   if (obj instanceof Byte) {    bytes=new byte[]{(Byte)obj};    flags|=BYTE_FLAG;  } else   if (obj instanceof Float) {    bytes=U.intToBytes(Float.floatToIntBits((Float)obj));    flags|=FLOAT_FLAG;  } else   if (obj instanceof Double) {    bytes=U.longToBytes(Double.doubleToLongBits((Double)obj));    flags|=DOUBLE_FLAG;  } else   if (obj instanceof byte[]) {    bytes=(byte[])obj;    flags|=BYTE_ARR_FLAG;  } else {    bytes=jdkMarshaller.marshal(obj);    flags|=SERIALIZED_FLAG;  }  return new Data(bytes,flags);}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case ImPackage.PARAMETERIZED_TYPE_REF_IM___GET_DECLARED_TYPE_IM:    return getDeclaredType_IM();case ImPackage.PARAMETERIZED_TYPE_REF_IM___SET_DECLARED_TYPE_IM__SYMBOLTABLEENTRY:  setDeclaredType_IM((SymbolTableEntry)arguments.get(0));return null;case ImPackage.PARAMETERIZED_TYPE_REF_IM___GET_DECLARED_TYPE:return getDeclaredType();case ImPackage.PARAMETERIZED_TYPE_REF_IM___SET_DECLARED_TYPE__TYPE:setDeclaredType((Type)arguments.get(0));return null;case ImPackage.PARAMETERIZED_TYPE_REF_IM___GET_ORIGINAL_TARGET_OF_REWIRED_TARGET:return getOriginalTargetOfRewiredTarget();}return super.eInvoke(operationID,arguments);}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException, InvalidObjectException {  s.defaultReadObject();  if (firstDayOfWeek == null) {    throw new InvalidObjectException("firstDayOfWeek is null");  }  if (minimalDays < 1 || minimalDays > 7) {    throw new InvalidObjectException("Minimal number of days is invalid");  }}  }
class C{  private static int selectColorFormat(MediaCodecInfo codecInfo,String mimeType){  MediaCodecInfo.CodecCapabilities capabilities=codecInfo.getCapabilitiesForType(mimeType);  for (int i=0; i < capabilities.colorFormats.length; i++) {    int colorFormat=capabilities.colorFormats[i];    if (isRecognizedFormat(colorFormat)) {      return colorFormat;    }  }  Log.e(TAG,"couldn't find a good color format for " + codecInfo.getName() + " / "+ mimeType);  return 0;}  }
class C{  public boolean isCreatePlainTextDetails(){  return createPlainTextDetails;}  }
class C{  public void removeDragEventHandlers(){  node.removeEventHandler(TouchEvent.ANY,touchHandler);  node.removeEventHandler(MouseEvent.ANY,mouseHandler);}  }
class C{  @Override public void process(KeyValPair<K,V> tuple){  K key=tuple.getKey();  if (!doprocessKey(key) || (tuple.getValue() == null)) {    return;  }  V val=low.get(key);  V eval=tuple.getValue();  if ((val == null) || (val.doubleValue() > eval.doubleValue())) {    low.put(cloneKey(key),eval);  }  val=high.get(key);  if ((val == null) || (val.doubleValue() < eval.doubleValue())) {    high.put(cloneKey(key),eval);  }}  }
class C{  static void validateContactAgainstPolicy(ContactResource contact) throws EppException {  if (contact.getDisclose() != null && !contact.getDisclose().getFlag()) {    throw new DeclineContactDisclosureFieldDisallowedPolicyException();  }}  }
class C{  public WarningsGroup(ICalProperty property,List<ICalComponent> componentHierarchy,List<Warning> warning){  this(null,property,componentHierarchy,warning);}  }
class C{  private void addReference(final int sourcePosition,final int referencePosition){  if (srcAndRefPositions == null) {    srcAndRefPositions=new int[6];  }  if (referenceCount >= srcAndRefPositions.length) {    int[] a=new int[srcAndRefPositions.length + 6];    System.arraycopy(srcAndRefPositions,0,a,0,srcAndRefPositions.length);    srcAndRefPositions=a;  }  srcAndRefPositions[referenceCount++]=sourcePosition;  srcAndRefPositions[referenceCount++]=referencePosition;}  }
class C{  public static String stringFor(int result){switch (result) {case CUDA_SUCCESS:    return "CUDA_SUCCESS";case CUDA_ERROR_INVALID_VALUE:  return "CUDA_ERROR_INVALID_VALUE";case CUDA_ERROR_OUT_OF_MEMORY:return "CUDA_ERROR_OUT_OF_MEMORY";case CUDA_ERROR_NOT_INITIALIZED:return "CUDA_ERROR_NOT_INITIALIZED";case CUDA_ERROR_DEINITIALIZED:return "CUDA_ERROR_DEINITIALIZED";case CUDA_ERROR_PROFILER_DISABLED:return "CUDA_ERROR_PROFILER_DISABLED";case CUDA_ERROR_PROFILER_NOT_INITIALIZED:return "CUDA_ERROR_PROFILER_NOT_INITIALIZED";case CUDA_ERROR_PROFILER_ALREADY_STARTED:return "CUDA_ERROR_PROFILER_ALREADY_STARTED";case CUDA_ERROR_PROFILER_ALREADY_STOPPED:return "CUDA_ERROR_PROFILER_ALREADY_STOPPED";case CUDA_ERROR_NO_DEVICE:return "CUDA_ERROR_NO_DEVICE";case CUDA_ERROR_INVALID_DEVICE:return "CUDA_ERROR_INVALID_DEVICE";case CUDA_ERROR_INVALID_IMAGE:return "CUDA_ERROR_INVALID_IMAGE";case CUDA_ERROR_INVALID_CONTEXT:return "CUDA_ERROR_INVALID_CONTEXT";case CUDA_ERROR_CONTEXT_ALREADY_CURRENT:return "CUDA_ERROR_CONTEXT_ALREADY_CURRENT";case CUDA_ERROR_MAP_FAILED:return "CUDA_ERROR_MAP_FAILED";case CUDA_ERROR_UNMAP_FAILED:return "CUDA_ERROR_UNMAP_FAILED";case CUDA_ERROR_ARRAY_IS_MAPPED:return "CUDA_ERROR_ARRAY_IS_MAPPED";case CUDA_ERROR_ALREADY_MAPPED:return "CUDA_ERROR_ALREADY_MAPPED";case CUDA_ERROR_NO_BINARY_FOR_GPU:return "CUDA_ERROR_NO_BINARY_FOR_GPU";case CUDA_ERROR_ALREADY_ACQUIRED:return "CUDA_ERROR_ALREADY_ACQUIRED";case CUDA_ERROR_NOT_MAPPED:return "CUDA_ERROR_NOT_MAPPED";case CUDA_ERROR_NOT_MAPPED_AS_ARRAY:return "CUDA_ERROR_NOT_MAPPED_AS_ARRAY";case CUDA_ERROR_NOT_MAPPED_AS_POINTER:return "CUDA_ERROR_NOT_MAPPED_AS_POINTER";case CUDA_ERROR_ECC_UNCORRECTABLE:return "CUDA_ERROR_ECC_UNCORRECTABLE";case CUDA_ERROR_UNSUPPORTED_LIMIT:return "CUDA_ERROR_UNSUPPORTED_LIMIT";case CUDA_ERROR_CONTEXT_ALREADY_IN_USE:return "CUDA_ERROR_CONTEXT_ALREADY_IN_USE";case CUDA_ERROR_PEER_ACCESS_UNSUPPORTED:return "CUDA_ERROR_PEER_ACCESS_UNSUPPORTED";case CUDA_ERROR_INVALID_SOURCE:return "CUDA_ERROR_INVALID_SOURCE";case CUDA_ERROR_FILE_NOT_FOUND:return "CUDA_ERROR_FILE_NOT_FOUND";case CUDA_ERROR_SHARED_OBJECT_SYMBOL_NOT_FOUND:return "CUDA_ERROR_SHARED_OBJECT_SYMBOL_NOT_FOUND";case CUDA_ERROR_SHARED_OBJECT_INIT_FAILED:return "CUDA_ERROR_SHARED_OBJECT_INIT_FAILED";case CUDA_ERROR_OPERATING_SYSTEM:return "CUDA_ERROR_OPERATING_SYSTEM";case CUDA_ERROR_INVALID_HANDLE:return "CUDA_ERROR_INVALID_HANDLE";case CUDA_ERROR_NOT_FOUND:return "CUDA_ERROR_NOT_FOUND";case CUDA_ERROR_NOT_READY:return "CUDA_ERROR_NOT_READY";case CUDA_ERROR_LAUNCH_FAILED:return "CUDA_ERROR_LAUNCH_FAILED";case CUDA_ERROR_LAUNCH_OUT_OF_RESOURCES:return "CUDA_ERROR_LAUNCH_OUT_OF_RESOURCES";case CUDA_ERROR_LAUNCH_TIMEOUT:return "CUDA_ERROR_LAUNCH_TIMEOUT";case CUDA_ERROR_LAUNCH_INCOMPATIBLE_TEXTURING:return "CUDA_ERROR_LAUNCH_INCOMPATIBLE_TEXTURING";case CUDA_ERROR_PEER_ACCESS_ALREADY_ENABLED:return "CUDA_ERROR_PEER_ACCESS_ALREADY_ENABLED";case CUDA_ERROR_PEER_ACCESS_NOT_ENABLED:return "CUDA_ERROR_PEER_ACCESS_NOT_ENABLED";case CUDA_ERROR_PEER_MEMORY_ALREADY_REGISTERED:return "CUDA_ERROR_PEER_MEMORY_ALREADY_REGISTERED";case CUDA_ERROR_PEER_MEMORY_NOT_REGISTERED:return "CUDA_ERROR_PEER_MEMORY_NOT_REGISTERED";case CUDA_ERROR_PRIMARY_CONTEXT_ACTIVE:return "CUDA_ERROR_PRIMARY_CONTEXT_ACTIVE";case CUDA_ERROR_CONTEXT_IS_DESTROYED:return "CUDA_ERROR_CONTEXT_IS_DESTROYED";case CUDA_ERROR_ASSERT:return "CUDA_ERROR_ASSERT";case CUDA_ERROR_TOO_MANY_PEERS:return "CUDA_ERROR_TOO_MANY_PEERS";case CUDA_ERROR_HOST_MEMORY_ALREADY_REGISTERED:return "CUDA_ERROR_HOST_MEMORY_ALREADY_REGISTERED";case CUDA_ERROR_HOST_MEMORY_NOT_REGISTERED:return "CUDA_ERROR_HOST_MEMORY_NOT_REGISTERED";case CUDA_ERROR_NOT_PERMITTED:return "CUDA_ERROR_NOT_PERMITTED";case CUDA_ERROR_NOT_SUPPORTED:return "CUDA_ERROR_NOT_SUPPORTED";case CUDA_ERROR_UNKNOWN:return "CUDA_ERROR_UNKNOWN";}return "INVALID CUresult: " + result;}  }
class C{  public void testCase7(){  byte aBytes[]={10,20,30,40,50,60,70,10,20,30};  byte bBytes[]={1,2,3,4,5,6,7,1,2,3};  int aSign=-1;  int bSign=1;  byte rBytes[]={-12,-23,-34,-45,-56,-67,-78,-12,-23,-33};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.subtract(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals(-1,result.signum());}  }
class C{  @Override public Object invoke(final String resourceName,final String operationName,final Object[] params,final String[] signature){  final Link link=findLink(MBEAN_OPERATION_LINK_RELATION);  if (link != null) {    final ClientHttpRequest request=createHttpRequest(link);    request.addParameterValues("resourceName",resourceName);    request.addParameterValues("operationName",operationName);    request.addParameterValues("signature",(Object[])signature);    request.addParameterValues("parameters",params);    final ResponseEntity<byte[]> response=send(request,byte[].class);    try {      return IOUtils.deserializeObject(response.getBody());    } catch (    IOException e) {      throw new MBeanAccessException(String.format("De-serializing the result from invoking operation (%1$s) on MBean (%2$s) failed!",resourceName,operationName),e);    }catch (    ClassNotFoundException e) {      throw new MBeanAccessException(String.format("The Class type of the result from invoking operation (%1$s) on MBean (%2$s) was not found!",resourceName,operationName),e);    }  } else {    printSevere("Invoking operation (%1$s) on MBean (%2$s) is currently an unsupported operation!",operationName,resourceName);    throw new RestApiCallForCommandNotFoundException(MBEAN_OPERATION_LINK_RELATION);  }}  }
class C{  private void logAllViewerstats(){  for (  String channel : c.getOpenChannels()) {    logViewerstats(channel);  }}  }
class C{  public Type basicGetDefinedType(){  return definedType;}  }
class C{  public User createUser(String name,String email){  failIfInvalid(name,email);  User user=new User(name,email);  Key key=keyFactory.newKey(user.getId());  Entity entity=Entity.builder(key).set("id",user.getId()).set("name",name).set("email",email).build();  datastore.add(entity);  return user;}  }
class C{  boolean isValid(){  return valid;}  }
class C{  protected void addToBuildSpec(String builderID) throws CoreException {  IProjectDescription description=getProject().getDescription();  ICommand findBugsCommand=getFindBugsCommand(description);  if (findBugsCommand == null) {    ICommand newCommand=description.newCommand();    newCommand.setBuilderName(builderID);    setFindBugsCommand(description,newCommand);  }}  }
class C{  private void processPrologue(Instruction s){  int numArgs=0;  for (Enumeration<Operand> e=s.getDefs(); e.hasMoreElements(); numArgs++) {    Register formal=((RegisterOperand)e.nextElement()).getRegister();    ValueGraphVertex v=findOrCreateVertex(formal);    v.setLabel(new ValueGraphParamLabel(numArgs),0);  }}  }
class C{  public static OrdersFragment newInstance(String token){  OrdersFragment fragment=new OrdersFragment();  Bundle args=new Bundle();  args.putString(USER_TOKEN,token);  fragment.setArguments(args);  return fragment;}  }
class C{  @Override public TextAnnotation createTextAnnotation(String text) throws IllegalArgumentException {  return createTextAnnotation(DEFAULT_CORPUS_ID,DEFAULT_TEXT_ID,text);}  }
class C{  public ProductsCentralView(final String id,final long categoryId,final NavigationContext navigationContext){  super(id,categoryId,navigationContext);}  }
class C{  public static void assertQ(String message,String response,String... tests){  try {    String m=(null == message) ? "" : message + " ";    String results=FeedChecker.validateXPath(response,tests);    if (null != results) {      throw new RuntimeException(m + "query failed XPath: " + results+ " xml response was: "+ response);    }  } catch (  XPathExpressionException e1) {    throw new RuntimeException("XPath is invalid",e1);  }catch (  Exception e2) {    throw new RuntimeException("Exception during query",e2);  }}  }
class C{  public <T extends Module>void attachModule(Class<T> module){  try {    Constructor<T> constructor=module.getConstructor(DialogueSystem.class);    attachModule(constructor.newInstance(this));    displayComment("Module " + module.getSimpleName() + " successfully attached");  } catch (  InstantiationException|IllegalAccessException|IllegalArgumentException|InvocationTargetException|NoSuchMethodException|SecurityException e) {    log.warning("cannot attach " + module.getSimpleName() + ": "+ e.getCause());    displayComment("cannot attach " + module.getSimpleName() + ": "+ e.getCause());  }}  }
class C{  @DSSink({DSSinkKind.IO}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.021 -0400",hash_original_method="A4829AD80420573041015F28AD207DA9",hash_generated_method="7067DCBCADD401AE5B74A15D12B58AC3") @Override public void write(byte[] b,int off,int len){  if ((off < 0) || (off > b.length) || (len < 0)|| ((off + len) > b.length)|| ((off + len) < 0)) {    throw new IndexOutOfBoundsException();  } else   if (len == 0) {    return;  }synchronized (this) {    int newcount=count + len;    int remaining=len;    int inBufferPos=count - filledBufferSum;    while (remaining > 0) {      int part=Math.min(remaining,currentBuffer.length - inBufferPos);      System.arraycopy(b,off + len - remaining,currentBuffer,inBufferPos,part);      remaining-=part;      if (remaining > 0) {        needNewBuffer(newcount);        inBufferPos=0;      }    }    count=newcount;  }}  }
class C{  protected void request(RequestContext context,String key,String message){  try {    HttpServletRequest request=context.getRequest();    String filename=request.getRemoteAddr();    start(filename,key,"\u001b[33m" + request.getMethod() + " "+ request.getRequestURI()+ "\u001b[0m "+ message);  } catch (  Exception e) {  }}  }
class C{  void decryptBlock(byte[] cipher,int cipherOffset,byte[] plain,int plainOffset){  cipherBlock(cipher,cipherOffset,plain,plainOffset);}  }
class C{  private long[] determinePreferenceVectorByMaxIntersection(ModifiableDBIDs[] neighborIDs,StringBuilder msg){  int dimensionality=neighborIDs.length;  long[] preferenceVector=BitsUtil.zero(dimensionality);  Map<Integer,ModifiableDBIDs> candidates=new HashMap<>(dimensionality);  for (int i=0; i < dimensionality; i++) {    ModifiableDBIDs s_i=neighborIDs[i];    if (s_i.size() > minpts) {      candidates.put(i,s_i);    }  }  if (LOG.isDebugging()) {    msg.append("\n candidates ").append(candidates.keySet());  }  if (!candidates.isEmpty()) {    int i=max(candidates);    ModifiableDBIDs intersection=candidates.remove(i);    BitsUtil.setI(preferenceVector,i);    while (!candidates.isEmpty()) {      ModifiableDBIDs newIntersection=DBIDUtil.newHashSet();      i=maxIntersection(candidates,intersection,newIntersection);      ModifiableDBIDs s_i=candidates.remove(i);      newIntersection=DBIDUtil.intersection(intersection,s_i);      intersection=newIntersection;      if (intersection.size() < minpts) {        break;      } else {        BitsUtil.setI(preferenceVector,i);      }    }  }  if (LOG.isDebugging()) {    msg.append("\n preference ");    msg.append(BitsUtil.toStringLow(preferenceVector,dimensionality));    msg.append('\n');    LOG.debug(msg.toString());  }  return preferenceVector;}  }
class C{  private void cleanupHandler(ContentHandler vh) throws SAXException {  for (PrefixMapping pm=prefixMapping; pm != null; pm=pm.parent)   vh.endPrefixMapping(pm.prefix);  vh.endDocument();}  }
class C{  public Vset checkValue(Environment env,Context ctx,Vset vset,Hashtable exp){  vset=right.checkValue(env,ctx,vset,exp);  if (!right.type.isType(TC_ARRAY)) {    env.error(where,"invalid.length",right.type);  }  return vset;}  }
class C{  public Map<Integer,Integer> graphType(){  Map<Integer,Integer> result;  int i;  result=new HashMap<Integer,Integer>();  if (m_MultiClassifiers != null) {    for (i=0; i < m_MultiClassifiers.length; i++) {      if (m_MultiClassifiers[i] instanceof Drawable) {        result.put(i,((Drawable)m_MultiClassifiers[i]).graphType());      }    }  }  return result;}  }
class C{  public ConePortrayal3D(Color color){  this(color,1f);}  }
class C{  public int mergeCompoundNames(){  final WordList wl=WordList.getInstance();  int changes=0;  boolean changed;  do {    changed=false;    for (int idx=0; idx < expressions.size() - 1; ++idx) {      CompoundName compName=wl.searchCompoundName(expressions,idx);      if (compName != null) {        Expression first=expressions.get(idx);        int wordsMatched=compName.size();        for (int i=1; i < wordsMatched; ++i) {          Expression next=expressions.get(idx + 1);          first.mergeName(next,compName.getType());          expressions.remove(next);        }        changed=true;        break;      }      if (changed) {        ++changes;        break;      }    }  } while (changed);  return changes;}  }
class C{  public boolean hasAttribute(String name){  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  return false;}  }
class C{  public <T>Tuple3<T,A,B> prepend(T t){  return Tuple3.of(t,_1,_2);}  }
class C{  public void dupX1(){  mv.visitInsn(Opcodes.DUP_X1);}  }
class C{  public static String normalizePath(String path){  return path.replace(File.separatorChar,'/');}  }
class C{  private void executeEscaped(String[] specDetails) throws SQLException {  String sql="SELECT " + specDetails[0] + "(";  for (int p=0; p < specDetails.length - 1; p++) {    if (p != 0)     sql=sql + ", ";    sql=sql + specDetails[p + 1];  }  sql=sql + ") ;";  System.out.println("DatabaseMetaDataTest.executeEscaped() " + sql);  Statement st=conn.createStatement();  ResultSet rs=st.executeQuery(sql);  assertNotNull("not supported function: " + sql,rs);  rs.close();  st.close();}  }
class C{  public String[] localizedMessagesFrom(ResourceBundle bundle){  String pattern="Constraint violation in {0}.{1} for method ''{3}'' with constraint \"{4}({6})\", for value ''{5}''";  ArrayList<String> list=new ArrayList<>();  for (  ConstraintViolation violation : constraintViolations) {    Locale locale;    if (bundle != null) {      try {        pattern=bundle.getString("zest.constraint." + mixinTypeName + "."+ methodName);      } catch (      MissingResourceException e1) {        try {          pattern=bundle.getString("zest.constraint");        } catch (        MissingResourceException e2) {        }      }      locale=bundle.getLocale();    } else {      locale=Locale.getDefault();    }    MessageFormat format=new MessageFormat(pattern,locale);    Annotation annotation=violation.constraint();    String name=violation.name();    Object value=violation.value();    String classes;    if (instanceTypes.stream().count() == 1) {      classes=instanceTypes.stream().findFirst().get().getSimpleName();    } else {      classes="[" + instanceTypes.stream().map(null).collect(joining(",")) + "]";    }    Object[] args=new Object[]{instanceToString,classes,mixinTypeName,methodName,annotation.toString(),"" + value,name};    StringBuffer text=new StringBuffer();    format.format(args,text,null);    list.add(text.toString());  }  String[] result=new String[list.size()];  list.toArray(result);  return result;}  }
class C{  public void visitIincInsn(int var,int increment){  if (mv != null) {    mv.visitIincInsn(var,increment);  }}  }
class C{  public void initialiseAllDimensions(int sourceDimensions,int destDimensions,int destPastDimensions) throws Exception {  this.destDimensions=destDimensions;  this.sourceDimensions=sourceDimensions;  this.destPastDimensions=destPastDimensions;  addedMoreThanOneObservationSet=false;  k=1;  teKernelEstimator.initialise(destPastDimensions,sourceDimensions,kernelWidth,kernelWidth);  nextStateKernelEstimator.initialise(destDimensions,kernelWidth);  destPastVectors=null;  destNextVectors=null;  sourceVectors=null;  localProbNextCondPast=null;}  }
class C{  private static void updateNetwork(WifiManager wifiManager,WifiConfiguration config){  Integer foundNetworkID=findNetworkInExistingConfig(wifiManager,config.SSID);  if (foundNetworkID != null) {    Log.i(TAG,"Removing old configuration for network " + config.SSID);    wifiManager.removeNetwork(foundNetworkID);    wifiManager.saveConfiguration();  }  int networkId=wifiManager.addNetwork(config);  if (networkId >= 0) {    if (wifiManager.enableNetwork(networkId,true)) {      Log.i(TAG,"Associating to network " + config.SSID);      wifiManager.saveConfiguration();    } else {      Log.w(TAG,"Failed to enable network " + config.SSID);    }  } else {    Log.w(TAG,"Unable to add network " + config.SSID);  }}  }
class C{  public byte[] pad(byte[] data,int ofs,int len) throws BadPaddingException {  return pad(RSACore.convert(data,ofs,len));}  }
class C{  public static void generateTriStripNormals(FloatBuffer vertices,IntBuffer indices,FloatBuffer normals){  if (vertices == null || indices == null || normals == null) {    String message=Logging.getMessage("nullValue.BufferIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (normals.limit() < vertices.limit()) {    String message=Logging.getMessage("generic.BufferSize",normals.limit());    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  for (int i=0; i < indices.limit() - 2; i++) {    int i1=3 * indices.get(i);    int i2=3 * indices.get(i + 1);    int i3=3 * indices.get(i + 2);    Vec4 t0=new Vec4(vertices.get(i1),vertices.get(i1 + 1),vertices.get(i1 + 2));    Vec4 t1=new Vec4(vertices.get(i2),vertices.get(i2 + 1),vertices.get(i2 + 2));    Vec4 t2=new Vec4(vertices.get(i3),vertices.get(i3 + 1),vertices.get(i3 + 2));    Vec4 va=new Vec4(t1.x - t0.x,t1.y - t0.y,t1.z - t0.z);    Vec4 vb=new Vec4(t2.x - t0.x,t2.y - t0.y,t2.z - t0.z);    Vec4 facetNormal;    if (i % 2 == 0) {      facetNormal=va.cross3(vb).normalize3();    } else {      facetNormal=vb.cross3(va).normalize3();    }    normals.put(i1,normals.get(i1) + (float)facetNormal.x);    normals.put(i1 + 1,normals.get(i1 + 1) + (float)facetNormal.y);    normals.put(i1 + 2,normals.get(i1 + 2) + (float)facetNormal.z);    normals.put(i2,normals.get(i2) + (float)facetNormal.x);    normals.put(i2 + 1,normals.get(i2 + 1) + (float)facetNormal.y);    normals.put(i2 + 2,normals.get(i2 + 2) + (float)facetNormal.z);    normals.put(i3,normals.get(i3) + (float)facetNormal.x);    normals.put(i3 + 1,normals.get(i3 + 1) + (float)facetNormal.y);    normals.put(i3 + 2,normals.get(i3 + 2) + (float)facetNormal.z);  }  for (int i=0; i < indices.limit() - 2; i++) {    int i1=3 * indices.get(i);    int i2=3 * indices.get(i + 1);    int i3=3 * indices.get(i + 2);    Vec4 n1=new Vec4(normals.get(i1),normals.get(i1 + 1),normals.get(i1 + 2)).normalize3();    Vec4 n2=new Vec4(normals.get(i2),normals.get(i2 + 1),normals.get(i2 + 2)).normalize3();    Vec4 n3=new Vec4(normals.get(i3),normals.get(i3 + 1),normals.get(i3 + 2)).normalize3();    normals.put(i1,(float)n1.x);    normals.put(i1 + 1,(float)n1.y);    normals.put(i1 + 2,(float)n1.z);    normals.put(i2,(float)n2.x);    normals.put(i2 + 1,(float)n2.y);    normals.put(i2 + 2,(float)n2.z);    normals.put(i3,(float)n3.x);    normals.put(i3 + 1,(float)n3.y);    normals.put(i3 + 2,(float)n3.z);  }}  }
class C{  public char first(){  return iter.first();}  }
class C{  private void deleteWorksheet(String title) throws IOException, ServiceException {  WorksheetFeed worksheetFeed=service.getFeed(worksheetFeedUrl,WorksheetFeed.class);  for (  WorksheetEntry worksheet : worksheetFeed.getEntries()) {    String currTitle=worksheet.getTitle().getPlainText();    if (currTitle.equals(title)) {      worksheet.delete();      System.out.println("Worksheet deleted.");      return;    }  }  System.out.println("Worksheet not found: " + title);}  }
class C{  public Object next(){  return enm.nextElement();}  }
class C{  void unexecuteNSDecls(TransformerImpl transformer) throws TransformerException {  unexecuteNSDecls(transformer,null);}  }
class C{  public static void swapRows(Matrix matrix,long row1,long row2){  double temp=0;  long cols=matrix.getColumnCount();  for (long col=0; col < cols; col++) {    temp=matrix.getAsDouble(row1,col);    matrix.setAsDouble(matrix.getAsDouble(row2,col),row1,col);    matrix.setAsDouble(temp,row2,col);  }}  }
class C{  public boolean equals(Object obj){  return obj != null && obj instanceof ConnectionDesc && ((ConnectionDesc)obj).conn == conn;}  }
class C{  private static PCalLocation NextLocOf(PCalLocation loc,MappingObject[][] map){  if (loc.getColumn() + 1 < map[loc.getLine()].length) {    return new PCalLocation(loc.getLine(),loc.getColumn() + 1);  }  for (int i=loc.getLine() + 1; i < map.length; i++) {    if (map[i].length > 0) {      return new PCalLocation(i,0);    }  }  return null;}  }
class C{  @UiHandler("cancelButton") public void handleCancelClick(final ClickEvent event){  this.actionDelegate.cancelled();}  }
class C{  private void insertIntoGrid(DBIDRef id,V obj,int d,int v){  final int cn=cells[d];  final int nd=d + 1;  int mi=Math.max(0,(int)Math.floor((obj.doubleValue(d) - offset[d] - epsilon) / gridwidth));  int ma=Math.min(cn - 1,(int)Math.floor((obj.doubleValue(d) - offset[d] + epsilon) / gridwidth));  assert (mi <= ma) : "Grid inconsistent.";  for (int i=mi; i <= ma; i++) {    int c=v * cn + i;    if (nd == cells.length) {      ModifiableDBIDs ids=grid.get(c);      if (ids == null) {        grid.put(c,ids=DBIDUtil.newArray());      }      ids.add(id);    } else {      insertIntoGrid(id,obj,nd,c);    }  }}  }
class C{  public void removeComponentResource(FacesContext context,UIComponent componentResource){  removeComponentResource(context,componentResource,null);}  }
class C{  public List<ProjectTypeResolution> resolveSources(String path,boolean transientOnly) throws ServerException, NotFoundException {  final List<ProjectTypeResolution> resolutions=new ArrayList<>();  for (  ProjectType type : projectTypeRegistry.getProjectTypes(ProjectTypeRegistry.CHILD_TO_PARENT_COMPARATOR)) {    if (transientOnly && type.isPersisted()) {      continue;    }    try {      final ProjectTypeResolution resolution=estimateProject(path,type.getId());      if (resolution.matched()) {        resolutions.add(resolution);      }    } catch (    ValueStorageException e) {      LOG.warn(e.getLocalizedMessage(),e);    }  }  return resolutions;}  }
class C{  private void applyCriteria(int accountSchemaId,int costTypeId,int costElementId,int productId,Timestamp dateAccount,Timestamp dateAccountTo){  deleteParameters=new ArrayList<Object>();  resetCostParameters=new ArrayList<Object>();  deleteCostDetailWhereClause=new StringBuffer("1=1");  resetCostWhereClause=new StringBuffer("1=1");  if (accountSchemaId > 0) {    deleteCostDetailWhereClause.append(" AND ").append(MCostDetail.COLUMNNAME_C_AcctSchema_ID).append("=? ");    deleteParameters.add(accountSchemaId);    resetCostWhereClause.append(" AND ").append(MCostDetail.COLUMNNAME_C_AcctSchema_ID).append("=? ");    resetCostParameters.add(accountSchemaId);  }  if (costTypeId > 0) {    deleteCostDetailWhereClause.append(" AND ").append(MCostDetail.COLUMNNAME_M_CostType_ID).append("=? ");    deleteParameters.add(costTypeId);    resetCostWhereClause.append(" AND ").append(MCostDetail.COLUMNNAME_M_CostType_ID).append("=? ");    resetCostParameters.add(costTypeId);  }  if (costElementId > 0) {    deleteCostDetailWhereClause.append(" AND ").append(MCostDetail.COLUMNNAME_M_CostElement_ID).append("=? ");    deleteParameters.add(costElementId);    resetCostWhereClause.append(" AND ").append(MCostDetail.COLUMNNAME_M_CostElement_ID).append("=? ");    resetCostParameters.add(costElementId);  }  if (productId > 0) {    deleteCostDetailWhereClause.append(" AND ").append(MCostDetail.COLUMNNAME_M_Product_ID).append("=? ");    deleteParameters.add(productId);    resetCostWhereClause.append(" AND ").append(MCostDetail.COLUMNNAME_M_Product_ID).append("=? ");    resetCostParameters.add(productId);  }  if (dateAccount != null) {    deleteCostDetailWhereClause.append(" AND ").append(MCostDetail.COLUMNNAME_DateAcct).append(">=? ");    deleteParameters.add(dateAccount);  }  if (dateAccountTo != null) {    deleteCostDetailWhereClause.append(" AND ").append(MCostDetail.COLUMNNAME_DateAcct).append("<=? ");    deleteParameters.add(dateAccountTo);  }  resetCostWhereClause.append(" AND EXISTS ( SELECT 1 FROM RV_Transaction WHERE M_Product_ID=? AND TRUNC(DateAcct)>=? AND TRUNC(DateAcct)<=?)");  resetCostParameters.add(productId);  resetCostParameters.add(dateAccount);  resetCostParameters.add(dateAccountTo);  return;}  }
class C{  String computeDescription(IMethod method){  StringBuffer buf=new StringBuffer();  buf.append("Callees of ");  buf.append(method.getElementName());  buf.append("(");  boolean first=true;  for (  String paramType : method.getParameterTypes()) {    if (first)     first=false; else     buf.append(",");    buf.append(Signature.toString(paramType));  }  buf.append(")");  return buf.toString();}  }
class C{  public boolean hasOnlyInternalEvents(){  List<CacheEvent<?,?>> txevents=getEvents();  if (txevents == null || txevents.isEmpty()) {    return false;  }  for (  CacheEvent<?,?> txevent : txevents) {    LocalRegion region=(LocalRegion)txevent.getRegion();    if (region != null && !region.isPdxTypesRegion() && !region.isInternalRegion()) {      return false;    }  }  return true;}  }
class C{  public void loadAndInit(String configStr){  config=loadDataConfig(new InputSource(new StringReader(configStr)));}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ASSOCIATION___MODIFIER_1:    return getModifier_1();case UmplePackage.ASSOCIATION___ASSOCIATION_END_1:  return getAssociationEnd_1();case UmplePackage.ASSOCIATION___ARROW_1:return getArrow_1();case UmplePackage.ASSOCIATION___ASSOCIATION_END_2:return getAssociationEnd_2();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static ComponentUI createUI(JComponent pane){  return new StyledOptionPaneUI(StyleUtil.getStyle());}  }
class C{  public StateSwitch createStateSwitch(){  StateSwitchImpl stateSwitch=new StateSwitchImpl();  return stateSwitch;}  }
class C{  public void testComplex() throws IOException {  final String sql1="CREATE TABLE Entity2 ( Id INTEGER AUTO_INCREMENT PRIMARY KEY, Column TEXT NOT NULL, Column2 INTEGER NULL )";  final String sql2="INSERT INTO Entity2 ( Id, Column, Column2 ) SELECT Id, Column, 0 FROM Entity";  final String sql3="DROP TABLE Entity";  final String sql4="ALTER TABLE Entity2 RENAME TO Entity";  final String sql5="INSERT INTO Entity2 ( Id, Column, Column2) VALUES ( 9001 , 42, 'string /* string */ -- string' )";  final InputStream stream=this.getStream(R.raw.complex);  List<String> commands=SqlParser.parse(stream);  assertEquals(5,commands.size());  assertEquals(sql1,commands.get(0));  assertEquals(sql2,commands.get(1));  assertEquals(sql3,commands.get(2));  assertEquals(sql4,commands.get(3));  assertEquals(sql5,commands.get(4));}  }
class C{  void tieScriptsToSwf(DSwfInfo info,int isolateId){  if (!info.hasAllSource()) {    int min=info.getFirstSourceId();    int max=info.getLastSourceId();    for (int i=min; i <= max; i++) {      DModule m=getSource(i,isolateId);      if (m == null) {      } else {        info.addSource(i,m);      }    }  }}  }
class C{  public void testBug9682() throws Exception {  if (!serverSupportsStoredProcedures()) {    return;  }  createProcedure("testBug9682","(decimalParam DECIMAL(18,0))\nBEGIN\n   SELECT 1;\nEND");  CallableStatement cStmt=null;  try {    cStmt=this.conn.prepareCall("Call testBug9682(?)");    cStmt.setDouble(1,18.0);    cStmt.execute();  }  finally {    if (cStmt != null) {      cStmt.close();    }  }}  }
class C{  public static void addEmojis(Context context,Spannable text,int emojiSize,int emojiAlignment,int textSize,boolean useSystemDefault){  addEmojis(context,text,emojiSize,emojiAlignment,textSize,0,-1,useSystemDefault);}  }
class C{  public boolean isModified(PasswordSafeSettings settings){  return getProviderType() != settings.getProviderType();}  }
class C{  @DSSink({DSSinkKind.IO}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.770 -0400",hash_original_method="AF511130F35AA3E3B287C842560F9DCE",hash_generated_method="31E7EB75C8368215C547C5CD1DE26F7C") @Override public Writer append(CharSequence csq) throws IOException {  try {    int len=0;    if (csq != null) {      len=csq.length();    }    beforeWrite(len);    out.append(csq);    afterWrite(len);  } catch (  IOException e) {    handleIOException(e);  }  return this;}  }
class C{  public static void splitTextures(File destination,File texturePack,double scale,boolean alphas,ProgressCallback progress) throws Exception {  if (destination == null)   throw new IllegalArgumentException("destination cannot be null");  Log.info("Exporting textures to \"" + destination + "\"");  if (!destination.exists() || !destination.isDirectory()) {    if (destination.exists())     throw new RuntimeException("Cannot create texture directory! File is in the way!");    if (!destination.mkdir())     throw new RuntimeException("Cannot create texture directory!");  }  getTextures(texturePack,scale,progress,alphas,false,destination);}  }
class C{  public void deleteHDU(int n) throws FitsException {  int size=getNumberOfHDUs();  if (n < 0 || n >= size) {    throw new FitsException("Attempt to delete non-existent HDU:" + n);  }  this.hduList.remove(n);  if (n == 0 && size > 1) {    BasicHDU<?> newFirst=this.hduList.get(0);    if (newFirst.canBePrimary()) {      newFirst.setPrimaryHDU(true);    } else {      insertHDU(BasicHDU.getDummyHDU(),0);    }  }}  }
class C{  public void test_search02(){  int nkeys=3;  int maxKeys=3;  byte[][] keys=new byte[nkeys][];  int i=0;  keys[i++]=new byte[]{1,3,4};  keys[i++]=new byte[]{1,3,4,1,0};  keys[i++]=new byte[]{1,3,4,2};{    MutableKeyBuffer kbuf=new MutableKeyBuffer(nkeys,keys);    assertEquals(3,kbuf.getPrefixLength());    doSearchTest02(kbuf);    try {      kbuf.search(null);      fail("Expecting: " + IllegalArgumentException.class);    } catch (    IllegalArgumentException ex) {      if (log.isInfoEnabled())       log.info("Ignoring expected exception: " + ex);    }  }}  }
class C{  public final void solve22ToOut(Vec2 b,Vec2 out){  final float a11=ex.x, a12=ey.x, a21=ex.y, a22=ey.y;  float det=a11 * a22 - a12 * a21;  if (det != 0.0f) {    det=1.0f / det;  }  out.x=det * (a22 * b.x - a12 * b.y);  out.y=det * (a11 * b.y - a21 * b.x);}  }
class C{  public void test_write$BII() throws Exception {  RandomAccessFile raf=new java.io.RandomAccessFile(fileName,"rw");  byte[] rbuf=new byte[4000];  byte[] testBuf=null;  int bytesRead;  try {    raf.write(testBuf,1,1);    fail("Test 1: NullPointerException expected.");  } catch (  NullPointerException e) {  }  testBuf=testString.getBytes();  try {    raf.write(testBuf,-1,10);    fail("Test 2: IndexOutOfBoundsException expected.");  } catch (  IndexOutOfBoundsException expected) {  }  try {    raf.write(testBuf,0,-1);    fail("Test 3: IndexOutOfBoundsException expected.");  } catch (  IndexOutOfBoundsException expected) {  }  try {    raf.write(testBuf,5,testLength);    fail("Test 4: IndexOutOfBoundsException expected.");  } catch (  IndexOutOfBoundsException expected) {  }  try {    raf.write(testBuf,3,testLength - 5);  } catch (  Exception e) {    fail("Test 5: Unexpected exception: " + e.getMessage());  }  raf.close();  try {    raf.write(new byte[0]);  } catch (  IOException e) {    fail("Test 6: Unexpected IOException: " + e.getMessage());  }  try {    raf.write(testString.getBytes());    fail("Test 7: IOException expected.");  } catch (  IOException e) {  }  FileInputStream fis=new java.io.FileInputStream(fileName);  bytesRead=fis.read(rbuf,0,testLength);  assertEquals("Test 8: Incorrect number of bytes written or read;",testLength - 5,bytesRead);  assertEquals("Test 9: Incorrect bytes written or read; ",testString.substring(3,testLength - 2),new String(rbuf,0,bytesRead));}  }
class C{  public final boolean playerWhite(){switch (modeNr) {case PLAYER_WHITE:case TWO_PLAYERS:case ANALYSIS:case EDIT_GAME:    return true;default :  return false;}}  }
class C{  public void closeLogServer(){  if (serverSocket != null && !serverSocket.isClosed()) {    try {      serverSocket.close();    } catch (    IOException e) {      logger.error("Error in closing log server",e);    }    serverSocket=null;  }}  }
class C{  public static Encoding find(String value){  return enums.find(value);}  }
class C{  private void prepareVoucherdetails(final String[] ids,final Map<String,String[]> parameters,final List<CChartOfAccounts> glcodeList,final List<PaymentBean> billList){  if (LOGGER.isDebugEnabled())   LOGGER.debug("Starting prepareVoucherdetails...");  EgBillregister egBillregister=null;  CGeneralLedger gl=null;  CGeneralLedgerDetail ledgerDetail=null;  String tmp="";  final HashMap<String,BigDecimal> tmpaccdetailsMap=new HashMap<String,BigDecimal>();  final HashMap<String,BigDecimal> tmpsublegDetailMap=new HashMap<String,BigDecimal>();  HashMap<String,Object> accdetailsMap=null;  HashMap<String,Object> sublegDetailMap=null;  List<PaymentBean> tempBillList=new ArrayList<PaymentBean>();  if (ids != null && billList != null)   for (  PaymentBean bean : billList)   for (  String billId : ids)   if (bean.getBillId().toString().equalsIgnoreCase(billId))   tempBillList.add(bean);  final String changePartyName=parameters.get("changePartyName") == null ? "false" : parameters.get("changePartyName")[0];  final String newPartyName=parameters.get("newPartyName") == null ? "" : parameters.get("newPartyName")[0];  if (ids != null)   for (int i=0; i < ids.length; i++) {    egBillregister=(EgBillregister)persistenceService.find("from EgBillregister where id = ? ",Long.valueOf(ids[i]));    if ("true".equalsIgnoreCase(changePartyName))     generateMiscBillForSalary(egBillregister,tempBillList.get(i + conBillIdlength).getPaymentAmt(),tempBillList.get(i + conBillIdlength).getNetAmt(),newPartyName); else     generateMiscBill(egBillregister,tempBillList.get(i + conBillIdlength).getPaymentAmt(),tempBillList.get(i + conBillIdlength).getNetAmt());    gl=getPayableAccount(ids[i],glcodeList,"getGeneralLedger");    if (gl == null)     throw new ValidationException("Voucher is created with invalid netpayble code so payment is not allowed for this bill ","Voucher is created with invalid netpayble code so payment is not allowed for this bill");    tmp=gl.getGlcodeId().getGlcode() + DELIMETER + gl.getGlcodeId().getName();    if (tmpaccdetailsMap.get(tmp) == null)     tmpaccdetailsMap.put(tmp,tempBillList.get(i + conBillIdlength).getPaymentAmt()); else     tmpaccdetailsMap.put(tmp,tmpaccdetailsMap.get(tmp).add(tempBillList.get(i + conBillIdlength).getPaymentAmt()));    if (gl.getGeneralLedgerDetails().size() > 1 && tempBillList.get(i + conBillIdlength).getPaymentAmt().compareTo(BigDecimal.valueOf(gl.getCreditAmount())) != 0)     throw new ValidationException(Arrays.asList(new ValidationError("partial.payment.not.allowed.for","Partial payment not allowed for " + tempBillList.get(i + conBillIdlength).getBillNumber())));    final Iterator it=gl.getGeneralLedgerDetails().iterator();    while (it.hasNext()) {      ledgerDetail=(CGeneralLedgerDetail)it.next();      if ("Salary".equalsIgnoreCase(tempBillList.get(i + conBillIdlength).getExpType()))       tmp=gl.getId() + DELIMETER + gl.getGlcodeId().getGlcode()+ DELIMETER+ ledgerDetail.getDetailTypeId().getId()+ DELIMETER+ ledgerDetail.getDetailKeyId(); else       tmp=gl.getGlcodeId().getGlcode() + DELIMETER + ledgerDetail.getDetailTypeId().getId()+ DELIMETER+ ledgerDetail.getDetailKeyId();      if (tmpsublegDetailMap.get(tmp) == null) {        if (gl.getGeneralLedgerDetails().size() > 1 && tempBillList.get(i + conBillIdlength).getPaymentAmt().compareTo(BigDecimal.valueOf(gl.getCreditAmount())) == 0)         tmpsublegDetailMap.put(tmp,ledgerDetail.getAmount()); else         tmpsublegDetailMap.put(tmp,tempBillList.get(i + conBillIdlength).getPaymentAmt());      } else       if (FinancialConstants.STANDARD_EXPENDITURETYPE_CONTINGENT.equalsIgnoreCase(tempBillList.get(i + conBillIdlength).getExpType()))       tmpsublegDetailMap.put(tmp,tmpsublegDetailMap.get(tmp).add(ledgerDetail.getAmount())); else       if (gl.getGeneralLedgerDetails().size() > 1 && tempBillList.get(i + conBillIdlength).getPaymentAmt().compareTo(BigDecimal.valueOf(gl.getCreditAmount())) == 0)       tmpsublegDetailMap.put(tmp,tmpsublegDetailMap.get(tmp).add(ledgerDetail.getAmount())); else       tmpsublegDetailMap.put(tmp,tmpsublegDetailMap.get(tmp).add(tempBillList.get(i + conBillIdlength).getPaymentAmt()));    }  }  Iterator conIterator=tmpaccdetailsMap.keySet().iterator();  String key="";  while (conIterator.hasNext()) {    key=conIterator.next().toString();    accdetailsMap=new HashMap<String,Object>();    accdetailsMap.put(VoucherConstant.GLCODE,key.split(DELIMETER)[0]);    accdetailsMap.put(VoucherConstant.NARRATION,key.split(DELIMETER)[1]);    accdetailsMap.put(VoucherConstant.DEBITAMOUNT,tmpaccdetailsMap.get(key));    accdetailsMap.put(VoucherConstant.CREDITAMOUNT,0);    accountcodedetails.add(accdetailsMap);  }  conIterator=tmpsublegDetailMap.keySet().iterator();  while (conIterator.hasNext()) {    key=conIterator.next().toString();    sublegDetailMap=new HashMap<String,Object>();    if (key.split(DELIMETER).length == 4) {      sublegDetailMap.put(VoucherConstant.GLCODE,key.split(DELIMETER)[1]);      sublegDetailMap.put(VoucherConstant.DETAILTYPEID,key.split(DELIMETER)[2]);      sublegDetailMap.put(VoucherConstant.DETAILKEYID,key.split(DELIMETER)[3]);    } else {      sublegDetailMap.put(VoucherConstant.GLCODE,key.split(DELIMETER)[0]);      sublegDetailMap.put(VoucherConstant.DETAILTYPEID,key.split(DELIMETER)[1]);      sublegDetailMap.put(VoucherConstant.DETAILKEYID,key.split(DELIMETER)[2]);    }    sublegDetailMap.put(VoucherConstant.DEBITAMOUNT,tmpsublegDetailMap.get(key));    sublegDetailMap.put(VoucherConstant.CREDITAMOUNT,BigDecimal.valueOf(0));    subledgerdetails.add(sublegDetailMap);  }  if (LOGGER.isDebugEnabled())   LOGGER.debug("Completed prepareVoucherdetails.");}  }
class C{  protected static final boolean classEquals(Class first,Class second){  return first.equals(second) || first.getName().equals(second.getName());}  }
class C{  @ApiOperation(value="Update password",notes="Update current password") @ApiResponses({@ApiResponse(code=204,message="OK"),@ApiResponse(code=404,message="Not Found"),@ApiResponse(code=403,message="Invalid password"),@ApiResponse(code=500,message="Internal Server Error")}) @POST @Path("/password") @GenerateLink(rel=LINK_REL_UPDATE_PASSWORD) @RolesAllowed("user") @Consumes(APPLICATION_FORM_URLENCODED) public void updatePassword(@ApiParam(value="New password",required=true) @FormParam("password") String password) throws NotFoundException, ServerException, ForbiddenException, ConflictException {  checkPassword(password);  final User user=userDao.getById(currentUser().getId());  user.setPassword(password);  userDao.update(user);}  }
class C{  public void assertProjectControlsVisible(boolean expectsProject){  boolean chkEnableFindBugsVisible=getChkEnableFindBugs() != null;  boolean chkEnableProjectVisible=getEnableProjectCheck() != null;  boolean hasProject=getProject() != null;  Assert.assertTrue(expectsProject == hasProject);  Assert.assertTrue(expectsProject == chkEnableFindBugsVisible);  Assert.assertTrue(expectsProject == chkEnableProjectVisible);}  }
class C{  public Counter(String id){  name=id;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected String extractClassName(File base,File target){  int len=base.getAbsolutePath().length();  String path=target.getAbsolutePath();  String name=path.substring(len + 1,path.length() - ".java".length());  name=name.replaceAll("/",".");  if (name.contains("\\")) {    name=name.replaceAll("\\\\",".");  }  return name;}  }
class C{  @Override protected void determineCoverageGoals(){  List<MethodTraceCoverageTestFitness> goals=new MethodTraceCoverageFactory().getCoverageGoals();  for (  MethodTraceCoverageTestFitness goal : goals) {    methodCoverageMap.put(goal.getClassName() + "." + goal.getMethod(),goal);    if (Properties.TEST_ARCHIVE)     TestsArchive.instance.addGoalToCover(this,goal);  }}  }
class C{  public ByteList ConstantUtf8Info(String text){  if (show_bytecode) {    cpool_out.write("\n      ConstantUtf8Info " + text);  }  if (utfConstants.containsKey(text)) {    return utfConstants.get(text);  }  byte[] utf8Bytes;  try {    utf8Bytes=text.getBytes("UTF8");  } catch (  IOException ex) {    ex.printStackTrace();    utf8Bytes=new byte[text.length()];  }  int text_length=utf8Bytes.length;  ByteList bytes=allocBytes(text_length + 3);  bytes=Int(bytes,text_length);  bytes.addAll(utf8Bytes);  utfConstants.put(text,bytes);  return bytes;}  }
class C{  public JSONObject put(String key,Map<?,?> value) throws JSONException {  this.put(key,new JSONObject(value));  return this;}  }
class C{  @DSComment("OutputStreamWrite class") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:40.585 -0500",hash_original_method="348EDF61477AE4A3DCAC4870D899F874",hash_generated_method="5D0388D5AAD5F0793DE2F1E9322C0CED") @Override public void close() throws IOException {synchronized (lock) {    if (encoder != null) {      drainEncoder();      flushBytes(false);      out.close();      encoder=null;      bytes=null;    }  }}  }
class C{  public static boolean isSameType(final Object array1,final Object array2){  if (array1 == null || array2 == null) {    throw new IllegalArgumentException("The Array must not be null");  }  return array1.getClass().getName().equals(array2.getClass().getName());}  }
class C{  @Override protected void installDefaults(){  dateRenderer=installRendererIfPossible(Date.class,null);  numberRenderer=installRendererIfPossible(Number.class,null);  doubleRender=installRendererIfPossible(Double.class,null);  floatRenderer=installRendererIfPossible(Float.class,null);  iconRenderer=installRendererIfPossible(Icon.class,null);  imageIconRenderer=installRendererIfPossible(ImageIcon.class,null);  booleanRenderer=installRendererIfPossible(Boolean.class,new SynthBooleanTableCellRenderer());  objectRenderer=installRendererIfPossible(Object.class,new SynthTableCellRenderer());  updateStyle(table);}  }
class C{  public void putNotification(Map<String,Object> notification) throws ResourceNotificationException {synchronized (notifications) {    try {      notifications.put(notification);    } catch (    InterruptedException i) {      throw new ResourceNotificationException("Interrupted while trying to put notification of type=" + type);    }  }}  }
class C{  public JsonArrayRequest(String url,Listener<JSONArray> listener,ErrorListener errorListener){  super(Method.GET,url,null,listener,errorListener);}  }
class C{  public String generatePublishOffer(String participantId) throws RoomException {  log.debug("Request [GET_PUBLISH_SDP_OFFER] ({})",participantId);  Participant participant=getParticipant(participantId);  String name=participant.getName();  Room room=participant.getRoom();  participant.createPublishingEndpoint();  String sdpOffer=participant.preparePublishConnection();  if (sdpOffer == null) {    throw new RoomException(Code.MEDIA_SDP_ERROR_CODE,"Error generating SDP offer for publishing user " + name);  }  room.newPublisher(participant);  return sdpOffer;}  }
class C{  void writeEntry(int position,int offset,int value) throws ArrayIndexOutOfBoundsException {{    if (offset >= slotsize)     throw new ArrayIndexOutOfBoundsException(XMLMessages.createXMLMessage(XMLErrorResources.ER_OFFSET_BIGGER_THAN_SLOT,null));    position*=slotsize;    int chunkpos=position >> lowbits;    int slotpos=position & lowmask;    int[] chunk=chunks.elementAt(chunkpos);    chunk[slotpos + offset]=value;  }}  }
class C{  @Override public ItemStack transferStackInSlot(EntityPlayer par1EntityPlayer,int par1){  ItemStack var2=null;  Slot var3=(Slot)this.inventorySlots.get(par1);  if (var3 != null && var3.getHasStack()) {    ItemStack var4=var3.getStack();    var2=var4.copy();    if (par1 > 1) {      if (this.getSlot(0).isItemValid(var4)) {        if (!this.mergeItemStack(var4,0,1,false)) {          return null;        }      } else       if (this.getSlot(1).isItemValid(var4)) {        if (!this.mergeItemStack(var4,1,2,false)) {          return null;        }      }    } else     if (!this.mergeItemStack(var4,2,36 + 2,false)) {      return null;    }    if (var4.stackSize == 0) {      var3.putStack((ItemStack)null);    } else {      var3.onSlotChanged();    }    if (var4.stackSize == var2.stackSize) {      return null;    }    var3.onPickupFromSlot(par1EntityPlayer,var4);  }  return var2;}  }
class C{  public static String stringFor(int n){switch (n) {case cudaGraphicsCubeFacePositiveX:    return "cudaGraphicsCubeFacePositiveX";case cudaGraphicsCubeFaceNegativeX:  return "cudaGraphicsCubeFaceNegativeX";case cudaGraphicsCubeFacePositiveY:return "cudaGraphicsCubeFacePositiveY";case cudaGraphicsCubeFaceNegativeY:return "cudaGraphicsCubeFaceNegativeY";case cudaGraphicsCubeFacePositiveZ:return "cudaGraphicsCubeFacePositiveZ";case cudaGraphicsCubeFaceNegativeZ:return "cudaGraphicsCubeFaceNegativeZ";}return "INVALID cudaGraphicsCubeFace: " + n;}  }
class C{  public void backupWorkspaceAndCleanup(final String workspaceId,final String srcPath,final String srcAddress) throws ServerException {  ReentrantLock lock=workspacesBackupLocks.get(workspaceId);  if (lock != null) {    lock.lock();    try {      if (workspacesBackupLocks.get(workspaceId) == null) {        LOG.error("Backup with cleanup of the workspace {} was invoked several times simultaneously",workspaceId);        return;      }      backupWorkspace(workspaceId,srcPath,srcAddress,true);    }  finally {      workspacesBackupLocks.remove(workspaceId);      lock.unlock();    }  } else {    LOG.warn("Attempt to backup workspace {} after cleanup",workspaceId);  }}  }
class C{  public void finishTimelineRequest(){  requestInFlight.set(false);}  }
class C{  public static boolean isSpaceChar(char ch){switch (ch) {case ' ':case '\t':case '\r':case '\n':case '\f':    return true;default :  return false;}}  }
class C{  public static long lastModified(String fileName){  return FilePath.get(fileName).lastModified();}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:40.624 -0500",hash_original_method="C6D32BE942F9C5459143EF4AC85BAF30",hash_generated_method="78E448BC19E90CE4BEF7D2000846B9F2") public ClientParamsStack(HttpParams aparams,HttpParams cparams,HttpParams rparams,HttpParams oparams){  applicationParams=aparams;  clientParams=cparams;  requestParams=rparams;  overrideParams=oparams;}  }
class C{  public Path[] generate(Path dbDir,Path segments,int numLists,long topN,long curTime,boolean filter,boolean norm,boolean force,int maxNumSegments) throws IOException {  Path tempDir=new Path(getConf().get("mapred.temp.dir",".") + "/generate-temp-" + System.currentTimeMillis());  Path lock=new Path(dbDir,CrawlDb.LOCK_NAME);  FileSystem fs=FileSystem.get(getConf());  LockUtil.createLockFile(fs,lock,force);  SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");  long start=System.currentTimeMillis();  LOG.info("Generator: starting at " + sdf.format(start));  LOG.info("Generator: Selecting best-scoring urls due for fetch.");  LOG.info("Generator: filtering: " + filter);  LOG.info("Generator: normalizing: " + norm);  if (topN != Long.MAX_VALUE) {    LOG.info("Generator: topN: " + topN);  }  if ("true".equals(getConf().get(GENERATE_MAX_PER_HOST_BY_IP))) {    LOG.info("Generator: GENERATE_MAX_PER_HOST_BY_IP will be ignored, use partition.url.mode instead");  }  JobConf job=new NutchJob(getConf());  job.setJobName("generate: select from " + dbDir);  if (numLists == -1) {    numLists=job.getNumMapTasks();  }  if ("local".equals(job.get("mapred.job.tracker")) && numLists != 1) {    LOG.info("Generator: jobtracker is 'local', generating exactly one partition.");    numLists=1;  }  job.setLong(GENERATOR_CUR_TIME,curTime);  long generateTime=System.currentTimeMillis();  job.setLong(Nutch.GENERATE_TIME_KEY,generateTime);  job.setLong(GENERATOR_TOP_N,topN);  job.setBoolean(GENERATOR_FILTER,filter);  job.setBoolean(GENERATOR_NORMALISE,norm);  job.setInt(GENERATOR_MAX_NUM_SEGMENTS,maxNumSegments);  FileInputFormat.addInputPath(job,new Path(dbDir,CrawlDb.CURRENT_NAME));  job.setInputFormat(SequenceFileInputFormat.class);  job.setMapperClass(Selector.class);  job.setPartitionerClass(Selector.class);  job.setReducerClass(Selector.class);  FileOutputFormat.setOutputPath(job,tempDir);  job.setOutputFormat(SequenceFileOutputFormat.class);  job.setOutputKeyClass(FloatWritable.class);  job.setOutputKeyComparatorClass(DecreasingFloatComparator.class);  job.setOutputValueClass(SelectorEntry.class);  job.setOutputFormat(GeneratorOutputFormat.class);  try {    JobClient.runJob(job);  } catch (  IOException e) {    throw e;  }  List<Path> generatedSegments=new ArrayList<Path>();  FileStatus[] status=fs.listStatus(tempDir);  try {    for (    FileStatus stat : status) {      Path subfetchlist=stat.getPath();      if (!subfetchlist.getName().startsWith("fetchlist-"))       continue;      Path newSeg=partitionSegment(fs,segments,subfetchlist,numLists);      generatedSegments.add(newSeg);    }  } catch (  Exception e) {    LOG.warn("Generator: exception while partitioning segments, exiting ...");    fs.delete(tempDir,true);    return null;  }  if (generatedSegments.size() == 0) {    LOG.warn("Generator: 0 records selected for fetching, exiting ...");    LockUtil.removeLockFile(fs,lock);    fs.delete(tempDir,true);    return null;  }  if (getConf().getBoolean(GENERATE_UPDATE_CRAWLDB,false)) {    Path tempDir2=new Path(getConf().get("mapred.temp.dir",".") + "/generate-temp-" + System.currentTimeMillis());    job=new NutchJob(getConf());    job.setJobName("generate: updatedb " + dbDir);    job.setLong(Nutch.GENERATE_TIME_KEY,generateTime);    for (    Path segmpaths : generatedSegments) {      Path subGenDir=new Path(segmpaths,CrawlDatum.GENERATE_DIR_NAME);      FileInputFormat.addInputPath(job,subGenDir);    }    FileInputFormat.addInputPath(job,new Path(dbDir,CrawlDb.CURRENT_NAME));    job.setInputFormat(SequenceFileInputFormat.class);    job.setMapperClass(CrawlDbUpdater.class);    job.setReducerClass(CrawlDbUpdater.class);    job.setOutputFormat(MapFileOutputFormat.class);    job.setOutputKeyClass(Text.class);    job.setOutputValueClass(CrawlDatum.class);    FileOutputFormat.setOutputPath(job,tempDir2);    try {      JobClient.runJob(job);      CrawlDb.install(job,dbDir);    } catch (    IOException e) {      LockUtil.removeLockFile(fs,lock);      fs.delete(tempDir,true);      fs.delete(tempDir2,true);      throw e;    }    fs.delete(tempDir2,true);  }  LockUtil.removeLockFile(fs,lock);  fs.delete(tempDir,true);  long end=System.currentTimeMillis();  LOG.info("Generator: finished at " + sdf.format(end) + ", elapsed: "+ TimingUtil.elapsedTime(start,end));  Path[] patharray=new Path[generatedSegments.size()];  return generatedSegments.toArray(patharray);}  }
class C{  public void run(MyriadConfiguration cfg) throws Exception {  if (LOGGER.isDebugEnabled()) {    LOGGER.debug("Bindings: " + injector.getAllBindings());  }  JmxReporter.forRegistry(new MetricRegistry()).build().start();  initWebApp(injector);  initHealthChecks(injector);  initProfiles(injector);  validateNMInstances(injector);  initServiceConfigurations(cfg,injector);  initDisruptors(injector);  initRebalancerService(cfg,injector);  initTerminatorService(injector);  startMesosDriver(injector);  startNMInstances(injector);  startJavaBasedTaskInstance(injector);}  }
class C{  public void bindTexture(int textureId){  int textureUnitIndex=this.textureUnit - GLES20.GL_TEXTURE0;  if (this.textureId[textureUnitIndex] != textureId) {    this.textureId[textureUnitIndex]=textureId;    GLES20.glBindTexture(GLES20.GL_TEXTURE_2D,textureId);  }}  }
class C{  public static VcsLogHighlighter.VcsCommitStyle createStyle(@Nullable Color foreground,@Nullable Color background,@Nullable VcsLogHighlighter.TextStyle textStyle){  return new VcsCommitStyleImpl(foreground,background,textStyle);}  }
class C{  public String numArcsTipText(){  return "The number of arcs in the bayesian net, at most: n * (n - 1) / 2 and at least: (n - 1); with n = numAttributes";}  }
class C{  public String toString(){  String s=this.getClass().getName() + " " + this.graphName+ "\n"+ this.nNodes+ "\t// <-- Total # nodes\n"+ "// "+ this.getNumEdges()+ "\t// <-- Total # edges\n";  s=s + "\n// Node names:\n";  for (int i=0; i < this.nNodes; i++) {    s=s + this.getNodeName(i);    s=s + "\t// #" + i+ " \tParents = {"+ this.strOfParents(i)+ " }\n";  }  s=s + "\n// edges:\n";  s=s + this.EdgesToString();  return s;}  }
class C{  public Annotation(Annotation other){  __isset_bitfield=other.__isset_bitfield;  this.timestamp=other.timestamp;  if (other.isSetValue()) {    this.value=other.value;  }  if (other.isSetHost()) {    this.host=new Endpoint(other.host);  }}  }
class C{  @Override public String multiResultsetFull(int baseResultset,int comparisonColumn) throws Exception {  int maxWidthMean=2;  int maxWidthStdDev=2;  double[] sortValues=new double[getNumDatasets()];  for (int i=0; i < getNumDatasets(); i++) {    sortValues[i]=Double.POSITIVE_INFINITY;    for (int j=0; j < getNumResultsets(); j++) {      if (!displayResultset(j)) {        continue;      }      try {        PairedStats pairedStats=calculateStatistics(m_DatasetSpecifiers.specifier(i),baseResultset,j,comparisonColumn);        if (!Double.isInfinite(pairedStats.yStats.mean) && !Double.isNaN(pairedStats.yStats.mean)) {          double width=((Math.log(Math.abs(pairedStats.yStats.mean)) / Math.log(10)) + 1);          if (width > maxWidthMean) {            maxWidthMean=(int)width;          }        }        if (j == baseResultset) {          if (getSortColumn() != -1) {            sortValues[i]=calculateStatistics(m_DatasetSpecifiers.specifier(i),baseResultset,j,getSortColumn()).xStats.mean;          } else {            sortValues[i]=i;          }        }        if (m_ShowStdDevs && !Double.isInfinite(pairedStats.yStats.stdDev) && !Double.isNaN(pairedStats.yStats.stdDev)) {          double width=((Math.log(Math.abs(pairedStats.yStats.stdDev)) / Math.log(10)) + 1);          if (width > maxWidthStdDev) {            maxWidthStdDev=(int)width;          }        }      } catch (      Exception ex) {        System.err.println(ex);      }    }  }  m_SortOrder=Utils.sort(sortValues);  m_ColOrder=new int[getNumResultsets()];  m_ColOrder[0]=baseResultset;  int index=1;  for (int i=0; i < getNumResultsets(); i++) {    if (i == baseResultset) {      continue;    }    m_ColOrder[index]=i;    index++;  }  initResultMatrix();  m_ResultMatrix.setRowOrder(m_SortOrder);  m_ResultMatrix.setColOrder(m_ColOrder);  m_ResultMatrix.setMeanWidth(maxWidthMean);  m_ResultMatrix.setStdDevWidth(maxWidthStdDev);  m_ResultMatrix.setSignificanceWidth(1);  for (int i=0; i < m_ResultMatrix.getColCount(); i++) {    if ((i == baseResultset) && (m_ResultMatrix.getColHidden(i))) {      m_ResultMatrix.setColHidden(i,false);      System.err.println("Note: test base was hidden - set visible!");    }  }  for (int i=0; i < getNumDatasets(); i++) {    m_ResultMatrix.setRowName(i,templateString(m_DatasetSpecifiers.specifier(i)));    for (int j=0; j < getNumResultsets(); j++) {      try {        PairedStats pairedStats=calculateStatistics(m_DatasetSpecifiers.specifier(i),baseResultset,j,comparisonColumn);        m_ResultMatrix.setCount(i,pairedStats.count);        m_ResultMatrix.setMean(j,i,pairedStats.yStats.mean);        m_ResultMatrix.setStdDev(j,i,pairedStats.yStats.stdDev);        if (pairedStats.differencesSignificance < 0) {          m_ResultMatrix.setSignificance(j,i,ResultMatrix.SIGNIFICANCE_WIN);        } else         if (pairedStats.differencesSignificance > 0) {          m_ResultMatrix.setSignificance(j,i,ResultMatrix.SIGNIFICANCE_LOSS);        } else {          m_ResultMatrix.setSignificance(j,i,ResultMatrix.SIGNIFICANCE_TIE);        }      } catch (      Exception e) {        System.err.println(e);      }    }  }  StringBuffer result=new StringBuffer(1000);  try {    result.append(m_ResultMatrix.toStringMatrix());  } catch (  Exception e) {    e.printStackTrace();  }  result.append("\n\n" + m_ResultMatrix.toStringKey());  return result.toString();}  }
class C{  public CSVFile(String name) throws MalformedURLException {  infoUrl=PropUtils.getResourceOrFileOrURL(name);}  }
class C{  public void shutdown(){  final ReentrantLock mainLock=this.mainLock;  mainLock.lock();  try {    checkShutdownAccess();    advanceRunState(SHUTDOWN);    interruptIdleWorkers();    onShutdown2();  }  finally {    mainLock.unlock();  }  tryTerminate2();}  }
class C{  public static void putFloat(byte[] arr,long off,float val){  if (UNALIGNED)   UNSAFE.putFloat(arr,off,val); else   putIntByByte(arr,off,Float.floatToIntBits(val),BIG_ENDIAN);}  }
class C{  protected OMGraphicList constructGraticuleLines(){  OMGraphicList newgraphics=new OMGraphicList(20);  Projection projection=getProjection();  if (projection == null) {    return newgraphics;  }  tenDegreeLines=null;  double ctrLon=((Point2D)projection.getCenter()).getX();  if (projection instanceof GeoProj) {    ctrLon=((GeoProj)projection).getReferenceLon();  }  if (showOneAndFiveLines || showRuler || showBelowOneLines) {    Point2D ul=projection.getUpperLeft();    Point2D lr=projection.getLowerRight();    float left=(float)ul.getX();    float right=(float)lr.getX();    float up=(float)ul.getY();    float down=(float)lr.getY();    if (up > 80.0f)     up=80.0f;    if (down > 80.0f)     down=80f;    if (up < -80.0f)     up=-80.0f;    if (down < -80)     down=-80.0f;    int showWhichLines=evaluateSpacing(up,down,left,right);    if ((left > 0 && right < 0) || (left > right) || (Math.abs(left - right) < 1)) {      if (showWhichLines != SHOW_TENS) {        newgraphics.add(constructGraticuleLines(up,down,left,180.0f,showWhichLines));        newgraphics.add(constructGraticuleLines(up,down,-180.0f,right,showWhichLines));      } else       if (showRuler) {        newgraphics.add(constructTensLabels(up,down,left,180.0f,true));        newgraphics.add(constructTensLabels(up,down,-180.0f,right,false));      }    } else {      if (showWhichLines != SHOW_TENS) {        newgraphics=constructGraticuleLines(up,down,left,right,showWhichLines);      } else       if (showRuler) {        newgraphics.add(constructTensLabels(up,down,left,right,true));      }    }  }  OMGraphicList list;  if (tenDegreeLines == null) {    list=constructTenDegreeLines(ctrLon);    tenDegreeLines=list;  } else {synchronized (tenDegreeLines) {      setLineTypeAndProject(tenDegreeLines,boxy ? OMGraphic.LINETYPE_STRAIGHT : OMGraphic.LINETYPE_RHUMB);    }  }  if (markerLines == null) {    list=constructMarkerLines(ctrLon);    markerLines=list;  } else {synchronized (markerLines) {      setLineTypeAndProject(markerLines,boxy ? OMGraphic.LINETYPE_STRAIGHT : OMGraphic.LINETYPE_RHUMB);    }  }  newgraphics.add(markerLines);  newgraphics.add(tenDegreeLines);  if (Debug.debugging("graticule")) {    Debug.output("GraticuleLayer.constructGraticuleLines(): " + "constructed " + newgraphics.size() + " graticule lines");  }  return newgraphics;}  }
class C{  public final LC alignX(String align){  setAlignX(ConstraintParser.parseUnitValueOrAlign(align,true,null));  return this;}  }
class C{  public void testKafkaInputOperator(int sleepTime,final int totalCount,KafkaConsumer consumer,boolean isValid,boolean idempotent) throws Exception {  latch=new CountDownLatch(1);  KafkaTestProducer p=new KafkaTestProducer(TEST_TOPIC);  p.setSendCount(totalCount);  new Thread(p).start();  LocalMode lma=LocalMode.newInstance();  DAG dag=lma.getDAG();  KafkaSinglePortStringInputOperator node=dag.addOperator("Kafka message consumer",KafkaSinglePortStringInputOperator.class);  if (isSuicide) {    dag.setAttribute(Context.DAGContext.CHECKPOINT_WINDOW_COUNT,1);    dag.setAttribute(Context.OperatorContext.STORAGE_AGENT,new FSStorageAgent("target/ck",new Configuration()));    node.setMaxTuplesPerWindow(500);  }  if (idempotent) {    node.setWindowDataManager(new FSWindowDataManager());  }  consumer.setTopic(TEST_TOPIC);  node.setConsumer(consumer);  consumer.setCacheSize(5000);  if (isValid) {    node.setZookeeper("localhost:" + KafkaOperatorTestBase.TEST_ZOOKEEPER_PORT[0]);  }  CollectorModule<String> collector=dag.addOperator("TestMessageCollector",new CollectorModule<String>());  dag.addStream("Kafka message",node.outputPort,collector.inputPort).setLocality(Locality.CONTAINER_LOCAL);  final LocalMode.Controller lc=lma.getController();  lc.setHeartbeatMonitoringEnabled(false);  lc.runAsync();  Assert.assertTrue("TIMEOUT: 30s ",latch.await(300000,TimeUnit.MILLISECONDS));  Assert.assertTrue("Expected count >= " + totalCount + "; Actual count "+ tupleCount.intValue(),totalCount <= tupleCount.intValue());  logger.debug(String.format("Number of emitted tuples: %d",tupleCount.intValue()));  p.close();  lc.shutdown();}  }
class C{  protected void configureScroller(){  scroller.setFocusable(false);  scroller.getVerticalScrollBar().setFocusable(false);  scroller.setBorder(null);  installScrollerListeners();}  }
class C{  @Override public String toString(){  return super.toString() + " (o.id = " + getRoutingObjectID()+ ")";}  }
class C{  private void renderAxes(Camera camera){  glPushMatrix();  glLoadIdentity();  float rotX=camera.getRotation().x;  float rotY=camera.getRotation().y;  float rotZ=0;  glRotatef(rotX,1.0f,0.0f,0.0f);  glRotatef(rotY,0.0f,1.0f,0.0f);  glRotatef(rotZ,0.0f,0.0f,1.0f);  glLineWidth(2.0f);  glBegin(GL_LINES);  glColor3f(1.0f,0.0f,0.0f);  glVertex3f(0.0f,0.0f,0.0f);  glVertex3f(1.0f,0.0f,0.0f);  glColor3f(0.0f,1.0f,0.0f);  glVertex3f(0.0f,0.0f,0.0f);  glVertex3f(0.0f,1.0f,0.0f);  glColor3f(1.0f,1.0f,1.0f);  glVertex3f(0.0f,0.0f,0.0f);  glVertex3f(0.0f,0.0f,1.0f);  glEnd();  glPopMatrix();}  }
class C{  public void copyAndAddExtension(String oid,boolean critical,X509Certificate cert) throws CertificateParsingException {  byte[] extValue=cert.getExtensionValue(oid);  if (extValue == null) {    throw new CertificateParsingException("extension " + oid + " not present");  }  try {    ASN1Encodable value=X509ExtensionUtil.fromExtensionValue(extValue);    this.addExtension(oid,critical,value);  } catch (  IOException e) {    throw new CertificateParsingException(e.toString());  }}  }
class C{  @Override public ImmutableSortedMap<K,V> build(){switch (size) {case 0:    return emptyMap(comparator);case 1:  return of(comparator,entries[0].getKey(),entries[0].getValue());default :return fromEntries(comparator,false,entries,size);}}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:29.658 -0500",hash_original_method="253E079134F8C2683EC310BD65E6492A",hash_generated_method="E58B924467A604FE4E6873F1C007AADA") public ConnectTimeoutException(final String message){  super(message);}  }
class C{  public boolean hasDetails(String sku){  return mSkuMap.containsKey(sku);}  }
class C{  public String className(CompiledClass info){  if (name == null)   name=decodeNameRef(info);  return name;}  }
class C{  public static boolean isMACAddress(String macAddress){  String[] macBytes=macAddress.split(":");  if (macBytes.length != 6)   return false;  for (int i=0; i < 6; ++i) {    if (HEXES.indexOf(macBytes[i].toUpperCase().charAt(0)) == -1 || HEXES.indexOf(macBytes[i].toUpperCase().charAt(1)) == -1) {      return false;    }  }  return true;}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  protected void tearDown() throws Exception {  if (cleanupMethod != null)   cleanupMethod.invoke(test,null);  TestUtil.separator2();  super.tearDown();}  }
class C{  public Task<FileShareRestRep> update(URI id,FileSystemUpdateParam input){  return putTask(input,getIdUrl(),id);}  }
class C{  public void write(byte[] buf) throws IOException {}  }
class C{  public static ActivateInstanceResponseE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  ActivateInstanceResponseE object=new ActivateInstanceResponseE();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    java.util.Vector handledAttributes=new java.util.Vector();    while (!reader.isEndElement()) {      if (reader.isStartElement()) {        if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org/xsd","activateInstanceResponse").equals(reader.getName())) {          object.setActivateInstanceResponse(org.oscm.xsd.ActivateInstanceResponse.Factory.parse(reader));        } else {          throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());        }      } else {        reader.next();      }    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  protected V entryValue(HashEntry<K,V> entry){  return entry.value;}  }
class C{  private int startFrame(final int offset,final int nLocal,final int nStack){  int n=3 + nLocal + nStack;  if (frame == null || frame.length < n) {    frame=new int[n];  }  frame[0]=offset;  frame[1]=nLocal;  frame[2]=nStack;  return 3;}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAnonymous_constraint_1_();}  }
class C{  @Override public void onServiceConnected(Messenger m){  mRemoteService=DownloaderServiceMarshaller.CreateProxy(m);  mRemoteService.onClientUpdated(mDownloaderClientStub.getMessenger());}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.AFTER_EVERY_EVENT___TIMER_1:    setTimer_1((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  @Override protected void entryRemoved(boolean evicted,String key,BitmapDrawable oldValue,BitmapDrawable newValue){  if (RecyclingBitmapDrawable.class.isInstance(oldValue)) {    ((RecyclingBitmapDrawable)oldValue).setIsCached(false);  } else {  }}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  public IndependenceTest indTestSubset(List<Node> vars){  if (vars.isEmpty()) {    throw new IllegalArgumentException("Subset may not be empty.");  }  for (  Node var : vars) {    if (!variables.contains(var)) {      throw new IllegalArgumentException("All vars must be original vars");    }  }  int[] indices=new int[vars.size()];  for (int i=0; i < indices.length; i++) {    indices[i]=indexMap.get(vars.get(i));  }  ICovarianceMatrix newCovMatrix=covMatrix.getSubmatrix(indices);  double alphaNew=getAlpha();  return new IndTestCorrelationT(newCovMatrix,alphaNew);}  }
class C{  private YadisResult retrieveXrdsLocation(YadisUrl url,boolean useGet,int maxRedirects,Set serviceTypes) throws DiscoveryException {  int maxattempts=1;  if (useGet)   maxattempts=2;  YadisResult result=new YadisResult();  for (int attempt=1; attempt <= maxattempts; attempt++) {    try {      result.setYadisUrl(url);      if (DEBUG)       _log.debug("Performing HTTP " + (useGet ? "GET" : "HEAD") + " on: "+ url+ " ...");      HttpRequestOptions requestOptions=_httpFetcher.getRequestOptions();      requestOptions.setMaxRedirects(maxRedirects);      if (useGet) {        if (attempt == 1)         requestOptions.addRequestHeader("Accept",YADIS_ACCEPT_HEADER); else         requestOptions.addRequestHeader("Accept",YADIS_CONTENT_TYPE);      }      HttpResponse resp=useGet ? _httpFetcher.get(url.getUrl().toString(),requestOptions) : _httpFetcher.head(url.getUrl().toString(),requestOptions);      Header[] locationHeaders=resp.getResponseHeaders(YADIS_XRDS_LOCATION);      Header contentType=resp.getResponseHeader("content-type");      if (HttpStatus.SC_OK != resp.getStatusCode()) {        if (useGet)         throw new YadisException("GET failed on " + url + " : "+ resp.getStatusCode(),OpenIDException.YADIS_GET_ERROR);        if (DEBUG)         _log.debug("Cannot retrieve " + YADIS_XRDS_LOCATION + " using HEAD from "+ url.getUrl().toString()+ "; status="+ resp.getStatusCode());      } else       if ((locationHeaders != null && locationHeaders.length > 1)) {        throw new YadisException("Found " + locationHeaders.length + " "+ YADIS_XRDS_LOCATION+ " headers.",useGet ? OpenIDException.YADIS_GET_INVALID_RESPONSE : OpenIDException.YADIS_HEAD_INVALID_RESPONSE);      } else       if (locationHeaders != null && locationHeaders.length > 0) {        result.setXrdsLocation(locationHeaders[0].getValue(),useGet ? OpenIDException.YADIS_GET_INVALID_RESPONSE : OpenIDException.YADIS_HEAD_INVALID_RESPONSE);        result.setNormalizedUrl(resp.getFinalUri());      } else       if (contentType != null && contentType.getValue() != null && contentType.getValue().split(";")[0].equalsIgnoreCase(YADIS_CONTENT_TYPE) && resp.getBody() != null) {        result.setNormalizedUrl(resp.getFinalUri());        result.setContentType(contentType.getValue());        if (resp.isBodySizeExceeded())         throw new YadisException("More than " + requestOptions.getMaxBodySize() + " bytes in HTTP response body from "+ url,OpenIDException.YADIS_XRDS_SIZE_EXCEEDED);        result.setEndpoints(XRDS_PARSER.parseXrds(resp.getBody(),serviceTypes));      } else       if (resp.getBody() != null) {        String xrdsLocation=getHtmlMeta(resp.getBody());        if (xrdsLocation != null) {          result.setNormalizedUrl(resp.getFinalUri());          result.setXrdsLocation(xrdsLocation,OpenIDException.YADIS_GET_INVALID_RESPONSE);        }      }      return result;    } catch (    ClientProtocolException e) {      if (useGet && attempt == 2)       throw new YadisException("ClientProtocol error: " + e.getMessage(),OpenIDException.YADIS_HEAD_TRANSPORT_ERROR,e); else       if (useGet && attempt == 1)       continue;      return result;    }catch (    IOException e) {      throw new YadisException("I/O transport error: " + e.getMessage(),OpenIDException.YADIS_HEAD_TRANSPORT_ERROR,e);    }  }  return result;}  }
class C{  public static boolean removeRoute(TransitSchedule schedule,Id<TransitLine> transitLineId,Id<TransitRoute> transitRouteId){  TransitLine transitLine=schedule.getTransitLines().get(transitLineId);  return transitLine != null && transitLine.removeRoute(transitLine.getRoutes().get(transitRouteId));}  }
class C{  public boolean isIPCCallback(SootMethod method){  SootClass dClz=method.getDeclaringClass();  if (Hierarchy.inheritsFromAndroidService(dClz) && method.isPublic())   return true;  if (isAIDLCallback(method))   return true;  return ipcCallBackMethods.containsPoly(method);}  }
class C{  public static void main(String[] args){  launch(args);}  }
class C{  @Override public void output(Vertex output){  if (!isEnabled()) {    return;  }  Vertex sense=output.mostConscious(Primitive.SENSE);  if ((sense == null) || (!getPrimitive().equals(sense.getData()))) {    return;  }  String text=printInput(output);  Vertex target=output.mostConscious(Primitive.TARGET);  String replyTo=target.mostConscious(Primitive.WORD).getData().toString();  sendMessage(text,replyTo);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:33.487 -0500",hash_original_method="5509D297F6B8CC0BD321C284BD8D086E",hash_generated_method="1EE4C2A44C632B03EB2CD5B26F7BAC3B") private void handleEfCspData(byte[] data){  int usedCspGroups=data.length / 2;  byte valueAddedServicesGroup=(byte)0xC0;  mCspPlmnEnabled=true;  for (int i=0; i < usedCspGroups; i++) {    if (data[2 * i] == valueAddedServicesGroup) {      Log.i(LOG_TAG,"[CSP] found ValueAddedServicesGroup, value " + data[(2 * i) + 1]);      if ((data[(2 * i) + 1] & 0x80) == 0x80) {        mCspPlmnEnabled=true;      } else {        mCspPlmnEnabled=false;        Log.i(LOG_TAG,"[CSP] Set Automatic Network Selection");        phone.setNetworkSelectionModeAutomatic(null);      }      return;    }  }  Log.w(LOG_TAG,"[CSP] Value Added Service Group (0xC0), not found!");}  }
class C{  public ImageCache(Context context,ImageCacheParams cacheParams){  init(context,cacheParams);}  }
class C{  public static String listing4(String body){  int body_tracker=5;  if (body != null) {    body=body.trim();    body_tracker=12;  }  if (body_tracker != 12 && body.length() < 1) {    body=null;  }  return body;}  }
class C{  private void addPluginMenu(final JComponent menu,final IAddressSpaceMenuPlugin plugin){  try {    final List<JComponent> menuItems=plugin.extendAddressSpaceMenu(getPluginAddressSpaces());    if (menuItems != null) {      for (      final JComponent menuItem : menuItems) {        if (menuItem != null) {          menu.add(menuItem);        }      }    }  } catch (  final Exception exception) {    CUtilityFunctions.logException(exception);    final String innerMessage="E00094: " + "Plugin caused an unexpected exception";    final String innerDescription=CUtilityFunctions.createDescription(String.format("The plugin %s caused an unexpected exception.",plugin.getName()),new String[]{"The plugin contains a bug."},new String[]{"The plugin probably behaves erroneously from this point on but it remains active"});    NaviErrorDialog.show(getParent(),innerMessage,innerDescription,exception);  }}  }
class C{  public GeoJsonObject load(String filePath){  this.filePath=filePath;  File file=null;  try {    file=new File(filePath);    FileInputStream fis=new FileInputStream(file);    JsonReader jsonReader=Json.createReader(fis);    JsonObject root=jsonReader.readObject();    jsonReader.close();    fis.close();    String type=root.getString("type");    GeoJsonObject groot=null;    if (type.equals("FeatureCollection")) {      groot=new GeoJsonFeatureCollection(root);    } else     if (type.equals("Feature")) {      groot=new GeoJsonFeature(root);    }    return (groot);  } catch (  Exception e) {    Console.getInstance().println("Unable to load GeoJSON file " + filePath + ", see log.");    e.printStackTrace();  }  return (null);}  }
class C{  @Override public void draw(Graphics2D g2,DialPlot plot,Rectangle2D frame,Rectangle2D view){  Shape window=getWindow(frame);  Shape outerWindow=getOuterWindow(frame);  Area area1=new Area(outerWindow);  Area area2=new Area(window);  area1.subtract(area2);  g2.setPaint(Color.lightGray);  g2.fill(area1);  g2.setStroke(this.stroke);  g2.setPaint(this.foregroundPaint);  g2.draw(window);  g2.draw(outerWindow);}  }
class C{  private Object readPropertyValue(GetSimplePropertyUriInfo uri_info) throws ODataException {  String targetESName=uri_info.getTargetEntitySet().getName();  EdmProperty target=uri_info.getPropertyPath().get(uri_info.getPropertyPath().size() - 1);  String propName=target.getName();  if (targetESName.equals(V1Model.PRODUCT.getName()) && propName.equals("Metalink")) {    KeyPredicate startKP=uri_info.getKeyPredicates().get(0);    Navigator<Product> navigator=new Navigator<Product>(uri_info.getStartEntitySet(),startKP,uri_info.getNavigationSegments(),Product.class);    Product p=navigator.navigate();    return makeMetalinkDocument(Collections.singletonList(p));  }  return V1Model.getEntitySet(targetESName).readPropertyValue(uri_info);}  }
class C{  public int hashCode(){  return x + 37 * y + 43 * w + 47 * h;}  }
class C{  public static double normalizeAngle(double angle){  double remainder=angle % 360;  if (remainder < 0)   remainder+=360;  return remainder;}  }
class C{  private void addLine(GridField field,WEditor editor,boolean mandatory){  log.fine("Field=" + field);  Label label=editor.getLabel();  editor.setReadWrite(true);  editor.setMandatory(mandatory);  field.addPropertyChangeListener(editor);  if (m_newRow) {    m_row=new Row();    m_row.setStyle("background-color: transparent");    m_rows.appendChild(m_row);  }  Div div=new Div();  div.setStyle("text-align: right");  div.appendChild(label);  m_row.appendChild(div);  m_row.appendChild(editor.getComponent());  editor.dynamicDisplay();  m_newRow=!m_newRow;}  }
class C{  @Override public void close() throws Exception {  EclipseStarter.shutdown();}  }
class C{  private void initType(){switch (type) {case CHANNEL_CODE:    ChannelCode channelCode=new ChannelCode();  channelCode.setNumberOfChannels(barcodeSettings.getChannelCodeChannels());barcode=channelCode;break;case CODABAR:Codabar codabar=new Codabar();barcode=codabar;break;case CODE_11:Code11 code11=new Code11();barcode=code11;break;case CODE_2OF5_DEFAULT:Code2Of5 c25=new Code2Of5();barcode=c25;break;case CODE_2OF5_IATA:Code2Of5 c25iata=new Code2Of5();c25iata.setIATAMode();barcode=c25iata;break;case CODE_2OF5_INDUSTRIAL:Code2Of5 c25ind=new Code2Of5();c25ind.setIndustrialMode();barcode=c25ind;break;case CODE_2OF5_INTERLEAVED:Code2Of5 c25inter=new Code2Of5();c25inter.setInterleavedMode();barcode=c25inter;break;case CODE_2OF5_DATA_LOGIC:Code2Of5 c25logic=new Code2Of5();c25logic.setDataLogicMode();barcode=c25logic;break;case CODE_2OF5_ITF_14:Code2Of5 itf14=new Code2Of5();itf14.setITF14Mode();barcode=itf14;break;case CODE_CODE39_DEFAULT:Code3Of9 code3of9=new Code3Of9();switch (barcodeSettings.getCode39CheckDigit().ordinal()) {case 0:code3of9.setCheckDigit(Code3Of9.CheckDigit.NONE);break;case 1:code3of9.setCheckDigit(Code3Of9.CheckDigit.MOD43);break;}barcode=code3of9;break;case CODE_CODE39_EXTENDED:Code3Of9Extended code3of9ext=new Code3Of9Extended();switch (barcodeSettings.getCode39CheckDigit().ordinal()) {case 0:code3of9ext.setCheckDigit(Code3Of9Extended.CheckDigit.NONE);break;case 1:code3of9ext.setCheckDigit(Code3Of9Extended.CheckDigit.MOD43);break;}barcode=code3of9ext;break;case CODE_93:Code93 code93=new Code93();barcode=code93;break;case CODE_CODE39_LOGMARS:Logmars logmars=new Logmars();barcode=logmars;break;case CODE_CODE128:Code128 code128=new Code128();code128.unsetCc();barcode=code128;break;case CODE_CODE128_NVE18:Nve18 nve18=new Nve18();barcode=nve18;break;case EAN8:Ean ean8=new Ean();ean8.setMode(Ean.Mode.EAN8);barcode=ean8;break;case EAN13:Ean ean13=new Ean();ean13.setMode(Ean.Mode.EAN13);barcode=ean13;break;case MSI_PLESSEY:MsiPlessey msiPlessey=new MsiPlessey();switch (barcodeSettings.getMsiPlesseyCheckDigit().ordinal()) {case 0:msiPlessey.setCheckDigit(MsiPlessey.CheckDigit.NONE);break;case 1:msiPlessey.setCheckDigit(MsiPlessey.CheckDigit.MOD10);break;case 2:msiPlessey.setCheckDigit(MsiPlessey.CheckDigit.MOD10_MOD10);break;case 3:msiPlessey.setCheckDigit(MsiPlessey.CheckDigit.MOD11);break;case 4:msiPlessey.setCheckDigit(MsiPlessey.CheckDigit.MOD11_MOD10);break;}barcode=msiPlessey;break;case TELEPEN_ALPHA:Telepen telepen=new Telepen();telepen.setNormalMode();barcode=telepen;break;case TELEPEN_NUMERIC:Telepen telepenNum=new Telepen();telepenNum.setNumericMode();barcode=telepenNum;break;case UPC_A:Upc upca=new Upc();upca.setMode(Upc.Mode.UPCA);upca.unsetLinkageFlag();barcode=upca;break;case UPC_E:Upc upce=new Upc();upce.setMode(Upc.Mode.UPCE);upce.unsetLinkageFlag();barcode=upce;break;case STACKED_CODABLOCK_F:CodablockF codablockF=new CodablockF();barcode=codablockF;break;case STACKED_CODE_16K:Code16k code16k=new Code16k();barcode=code16k;break;case STACKED_CODE_49:Code49 code49=new Code49();barcode=code49;break;case AZTEC_CODE:AztecCode aztecCode=new AztecCode();if (barcodeSettings.isAztecEccModeEnabled()) {aztecCode.setPreferredEccLevel(barcodeSettings.getAztecCodeEcc().ordinal() + 1);}barcode=aztecCode;break;case AZTEC_RUNES:AztecRune aztecRune=new AztecRune();barcode=aztecRune;break;case DATA_MATRIX:DataMatrix dataMatrix=new DataMatrix();dataMatrix.setDataType(Symbol.DataType.HIBC);dataMatrix.setPreferredSize(barcodeSettings.getDataMatrixSymbolSize());dataMatrix.forceSquare(barcodeSettings.isDataMatrixSupressRectSymbolsinAutoMode());barcode=dataMatrix;break;case CODE_ONE:CodeOne codeOne=new CodeOne();switch (barcodeSettings.getCodeOneVersion().ordinal()) {case 0:codeOne.setPreferredVersion(CodeOne.Version.NONE);break;case 1:codeOne.setPreferredVersion(CodeOne.Version.A);break;case 2:codeOne.setPreferredVersion(CodeOne.Version.B);break;case 3:codeOne.setPreferredVersion(CodeOne.Version.C);break;case 4:codeOne.setPreferredVersion(CodeOne.Version.D);break;case 5:codeOne.setPreferredVersion(CodeOne.Version.E);break;case 6:codeOne.setPreferredVersion(CodeOne.Version.F);break;case 7:codeOne.setPreferredVersion(CodeOne.Version.G);break;case 8:codeOne.setPreferredVersion(CodeOne.Version.H);break;case 9:codeOne.setPreferredVersion(CodeOne.Version.S);break;case 10:codeOne.setPreferredVersion(CodeOne.Version.T);break;}barcode=codeOne;case GRID_MATRIX:GridMatrix gridMatrix=new GridMatrix();if (barcodeSettings.isGridMatrixEccModeEnabled()) {gridMatrix.setPreferredEccLevel(barcodeSettings.getGridMatrixCodeEcc().ordinal());}barcode=gridMatrix;break;case MAXI_CODE:MaxiCode maxiCode=new MaxiCode();barcode=maxiCode;break;case QR_CODE:QrCode qrCode=new QrCode();if (barcodeSettings.isQrEccModeEnabled()) {switch (barcodeSettings.getQrEccMode().ordinal()) {case 0:qrCode.setEccMode(QrCode.EccMode.L);break;case 1:qrCode.setEccMode(QrCode.EccMode.M);break;case 2:qrCode.setEccMode(QrCode.EccMode.Q);break;case 3:qrCode.setEccMode(QrCode.EccMode.H);break;}}barcode=qrCode;break;case QR_CODE_MICRO:MicroQrCode microQrCode=new MicroQrCode();if (barcodeSettings.isQrEccModeEnabled()) {switch (barcodeSettings.getQrEccMode().ordinal()) {case 0:microQrCode.setEccMode(MicroQrCode.EccMode.L);break;case 1:microQrCode.setEccMode(MicroQrCode.EccMode.M);break;case 2:microQrCode.setEccMode(MicroQrCode.EccMode.Q);break;case 3:microQrCode.setEccMode(MicroQrCode.EccMode.H);break;}}barcode=microQrCode;break;case GS1_DATABAR_OMNIDIRECTIONAL:DataBar14 dataBar14=new DataBar14();dataBar14.setLinearMode();barcode=dataBar14;break;case GS1_DATABAR_STACKED:DataBar14 dataBar14s=new DataBar14();dataBar14s.setStackedMode();barcode=dataBar14s;break;case GS1_DATABAR_STACKED_OMNIDIRECTIONAL:DataBar14 dataBar14so=new DataBar14();dataBar14so.setOmnidirectionalMode();barcode=dataBar14so;break;case GS1_DATABAR_LIMITED:DataBarLimited dataBarLimited=new DataBarLimited();barcode=dataBarLimited;break;case GS1_DATABAR_EXPANDED_OMNIDIRECTIONAL:DataBarExpanded dataBarE=new DataBarExpanded();dataBarE.setNotStacked();barcode=dataBarE;break;case GS1_DATABAR_EXPANDED_STACKED_OMNIDIRECTIONAL:DataBarExpanded dataBarES=new DataBarExpanded();dataBarES.setNoOfColumns(barcodeSettings.getDatabarColumns());dataBarES.setStacked();barcode=dataBarES;break;case POSTAL_AUSPOST:AustraliaPost auPost=new AustraliaPost();auPost.setPostMode();barcode=auPost;case POSTAL_AUSPOST_REPLY:AustraliaPost auReply=new AustraliaPost();auReply.setReplyMode();barcode=auReply;case POSTAL_DEUTSCHE_POST_LEITCODE:Code2Of5 dpLeit=new Code2Of5();dpLeit.setDPLeitMode();barcode=dpLeit;break;case POSTAL_DEUTSCHE_POST_IDENTCODE:Code2Of5 dpIdent=new Code2Of5();dpIdent.setDPIdentMode();barcode=dpIdent;break;case POSTAL_JAPAN_POST:JapanPost japanPost=new JapanPost();barcode=japanPost;break;case POSTAL_ROYAL_MAIL:RoyalMail4State royalMail=new RoyalMail4State();barcode=royalMail;break;case POSTAL_USPS_INTELLIGENT_MAIL:UspsOneCode uspsOneCode=new UspsOneCode();barcode=uspsOneCode;break;case POSTAL_USPS_IM_PACKAGE_BC:UspsPackage uspsPackage=new UspsPackage();barcode=uspsPackage;break;case POSTAL_BRAZIL_CEPNET:case POSTAL_USPS_POSTNET:Postnet postnet=new Postnet();postnet.setPostnet();barcode=postnet;break;case POSTAL_USPS_PLANET:Postnet planet=new Postnet();planet.setPlanet();barcode=planet;break;case MEDICAL_CODE32:Code32 code32=new Code32();barcode=code32;break;case MEDICAL_HIBC_AZTEC:AztecCode aztecCodemed=new AztecCode();aztecCodemed.setDataType(Symbol.DataType.HIBC);if (barcodeSettings.isAztecEccModeEnabled()) {aztecCodemed.setPreferredEccLevel(barcodeSettings.getAztecCodeEcc().ordinal() + 1);}barcode=aztecCodemed;break;case MEDICAL_HIBC_CODABLOCK_F:CodablockF codablockFmed=new CodablockF();codablockFmed.setDataType(Symbol.DataType.HIBC);barcode=codablockFmed;break;case MEDICAL_HIBC_CODE39:Code3Of9 code3of9med=new Code3Of9();code3of9med.setDataType(Symbol.DataType.HIBC);switch (barcodeSettings.getCode39CheckDigit().ordinal()) {case 0:code3of9med.setCheckDigit(Code3Of9.CheckDigit.NONE);break;case 1:code3of9med.setCheckDigit(Code3Of9.CheckDigit.MOD43);break;}barcode=code3of9med;break;case MEDICAL_HIBC_CODE128:Code128 hibcCode128=new Code128();hibcCode128.unsetCc();hibcCode128.setDataType(Symbol.DataType.HIBC);barcode=hibcCode128;break;case MEDICAL_DATA_MATRIX:DataMatrix dataMatrixmed=new DataMatrix();dataMatrixmed.setDataType(Symbol.DataType.HIBC);dataMatrixmed.setPreferredSize(barcodeSettings.getDataMatrixSymbolSize());dataMatrixmed.forceSquare(barcodeSettings.isDataMatrixSupressRectSymbolsinAutoMode());barcode=dataMatrixmed;break;case MEDICAL_QR_CODE:QrCode qrCodeHibc=new QrCode();qrCodeHibc.setDataType(Symbol.DataType.HIBC);if (barcodeSettings.isQrEccModeEnabled()) {switch (barcodeSettings.getQrEccMode().ordinal()) {case 0:qrCodeHibc.setEccMode(QrCode.EccMode.L);break;case 1:qrCodeHibc.setEccMode(QrCode.EccMode.M);break;case 2:qrCodeHibc.setEccMode(QrCode.EccMode.Q);break;case 3:qrCodeHibc.setEccMode(QrCode.EccMode.H);break;}}barcode=qrCodeHibc;break;case MEDICAL_PHARMACODE_ONE_TRACK:Pharmacode pharmacode=new Pharmacode();barcode=pharmacode;break;case MEDICAL_PHARMACODE_TWO_TRACK:Pharmacode2Track pharmacode2t=new Pharmacode2Track();barcode=pharmacode2t;break;case MEDICAL_PZN8:Pharmazentralnummer pzn=new Pharmazentralnummer();barcode=pzn;break;}if (barcode == null) {return;}barcode.setHumanReadableLocation(barcodeSettings.getHumanReadableLocation());}  }
class C{  public static void localVarValueChanged(long newValue,String localVar,int lineNumber){  instance.localVarValueChanged(localVar,lineNumber,newValue);}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == TypableElement.class) {switch (baseOperationID) {default :      return -1;  }}if (baseClass == IdentifiableElement.class) {switch (baseOperationID) {case TypesPackage.IDENTIFIABLE_ELEMENT___GET_CONTAINING_MODULE:    return N4JSPackage.VARIABLE___GET_CONTAINING_MODULE;default :  return -1;}}if (baseClass == NamedElement.class) {switch (baseOperationID) {case N4JSPackage.NAMED_ELEMENT___GET_NAME:return N4JSPackage.VARIABLE___GET_NAME;default :return -1;}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  public void branchConditionally(ConditionFlag condition){  super.b(condition,0);}  }
class C{  public void findAndInit(Object someObj){  if (someObj instanceof OMDrawingTool) {    Debug.message("omdtl","OMDrawingToolLauncher found a DrawingTool.");    setDrawingTool((DrawingTool)someObj);  }  if (someObj instanceof DrawingToolRequestor) {    if (Debug.debugging("omdtl")) {      Debug.output("OMDrawingToolLauncher found a DrawingToolRequestor - " + ((DrawingToolRequestor)someObj).getName());    }    drawingToolRequestors.add((DrawingToolRequestor)someObj);    resetCombo();  }}  }
class C{  public synchronized void enableAttribute(String name) throws java.lang.IllegalArgumentException {  if (name == null) {    throw new java.lang.IllegalArgumentException("The name cannot be null.");  }  if (!enabledAttributes.contains(name)) {    enabledAttributes.addElement(name);  }}  }
class C{  public void changeAtom(FixedCharAtom a){  textSymbol=false;  type=-1;  el=a;}  }
class C{  @RequestMapping(value=EMR_CLUSTER_DEFINITIONS_URI_PREFIX + "/namespaces/{namespace}/emrClusterDefinitionNames/{emrClusterDefinitionName}",method=RequestMethod.PUT,consumes={"application/xml","application/json"}) @Secured(SecurityFunctions.FN_EMR_CLUSTER_DEFINITIONS_PUT) public EmrClusterDefinitionInformation updateEmrClusterDefinition(@PathVariable("namespace") String namespace,@PathVariable("emrClusterDefinitionName") String emrClusterDefinitionName,@RequestBody EmrClusterDefinitionUpdateRequest request) throws Exception {  return emrClusterDefinitionService.updateEmrClusterDefinition(new EmrClusterDefinitionKey(namespace,emrClusterDefinitionName),request);}  }
class C{  public boolean isStandbyDataSource(){  return isStandbyDataSource;}  }
class C{  public OMWarpingImage(int[] pix,int width,int height){  setWarp(pix,width,height,LatLonGCT.INSTANCE,new DataBounds(-180,-90,180,90));}  }
class C{  TimerImpl(String name,boolean isDaemon){  this.setName(name);  this.setDaemon(isDaemon);  this.start();}  }
class C{  public void openPicture(Activity activity){  Intent intent=new Intent(Intent.ACTION_PICK);  intent.setDataAndType(android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI,"image/*");  activity.startActivityForResult(intent,PICTURE_REQ_CODE);}  }
class C{  public void add(Object[] data){  internalAdd(data);  notifyObservers();}  }
class C{  public void renderListHead(ListHead head){  Component header;  WTableColumn column;  for (int columnIndex=0; columnIndex < m_tableColumns.size(); columnIndex++) {    column=m_tableColumns.get(columnIndex);    header=getListHeaderComponent(column.getHeaderValue(),columnIndex,column.getColumnClass());    head.appendChild(header);  }  head.setSizable(true);  return;}  }
class C{  Mark skipUntil(String limit) throws JasperException {  Mark ret=null;  int limlen=limit.length();  int ch;  skip:   for (ret=mark(), ch=nextChar(); ch != -1; ret=mark(), ch=nextChar()) {    if (ch == limit.charAt(0)) {      Mark restart=mark();      for (int i=1; i < limlen; i++) {        if (peekChar() == limit.charAt(i))         nextChar(); else {          reset(restart);          continue skip;        }      }      return ret;    }  }  return null;}  }
class C{  public void sendWarning(Object source,String msg){  try {    String s=getClass().getSimpleName() + ": " + msg;    System.err.println(s);    for (    WarningHandler handler : _priorityHandlers) {      handler.warning(source,msg);    }    for (    WarningHandler handler : _handlers) {      handler.warning(source,msg);    }    log.warning(msg);  } catch (  Throwable e) {    log.log(Level.WARNING,e.toString(),e);  }}  }
class C{  protected void removeAllCombinations(KeyCombination keyCombination){synchronized (combinations) {    if (combinations.containsKey(keyCombination)) {      combinations.remove(keyCombination);    }  }}  }
class C{  public void trainModel(TaskContext taskContext,File trainingFile,double paramC,int paramOrderE,int paramOrderT,double paramEpsilon,int paramB) throws Exception {  File tmpModel=trainModelAtTemporaryLocation(trainingFile,paramC,paramOrderE,paramOrderT,paramEpsilon,paramB);  FileInputStream stream=new FileInputStream(tmpModel);  taskContext.storeBinary(MODEL_NAME,stream);  IOUtils.closeQuietly(stream);  FileUtils.deleteQuietly(tmpModel);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  int h=getInt(stack);  int w=getInt(stack);  Object o=stack.pop();  if (Sage.EMBEDDED)   return null;  if (!(o instanceof MetaImage)) {    o=MetaImage.getMetaImage(o == null ? null : o.toString(),stack.getUIComponent());  }  if (o instanceof MetaImage) {    java.awt.image.BufferedImage rv=ImageUtils.createBestScaledImage(((MetaImage)o).getJavaImage(0),w,h);    ((MetaImage)o).removeJavaRef(0);    return rv;  }  return null;}  }
class C{  protected void clearDatacenters(){  for (  Vm vm : getVmsCreatedList()) {    Log.printConcatLine(CloudSim.clock(),": ",getName(),": Destroying VM #",vm.getId());    sendNow(getVmsToDatacentersMap().get(vm.getId()),CloudSimTags.VM_DESTROY,vm);  }  getVmsCreatedList().clear();}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypesPackage.TSTRUCT_FIELD__DEFINED_MEMBER:    return definedMember != null;}return super.eIsSet(featureID);}  }
class C{  public void onMerge(ReduceFn<?,?,?,W>.OnMergeContext context){  WindowTracing.debug("WatermarkHold.onMerge: for key:{}; window:{}; inputWatermark:{}; " + "outputWatermark:{}",context.key(),context.window(),timerInternals.currentInputWatermarkTime(),timerInternals.currentOutputWatermarkTime());  StateMerging.mergeWatermarks(context.state(),elementHoldTag,context.window());  StateMerging.clear(context.state(),EXTRA_HOLD_TAG);  addEndOfWindowOrGarbageCollectionHolds(context,false);}  }
class C{  public int size(){  return 2;}  }
class C{  public static void writeAll(String filename,Object[] o) throws Exception {  writeAll(new FileOutputStream(filename),o);}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  ElementCreator builder=registry.build(KEY);  builder.addAttribute(TYPE).setRequired(true);}  }
class C{  public void reconfigureZoom(){  if (ricon == null)   return;  final int iconWidth=ricon.get().getIconWidth();  final int iconHeight=ricon.get().getIconHeight();  final Zoom zoom=zoomComboBox.getSelectedItem();  int height=0;  if (zoom == Zoom.FIT_TO_WINDOW) {    if (iconWidth > 0 || iconHeight > 0) {      final float xScale=(float)getParent().getWidth() / iconWidth;      final float yScale=(float)getParent().getHeight() / iconHeight;      if (xScale > yScale)       height=getParent().getHeight(); else       height=(int)(iconHeight * xScale);    }  } else   if (zoom == Zoom.HALF)   height=iconHeight / 2; else   height=iconHeight * zoom.factor;  icon=ricon.size(height);  setPreferredSize(new Dimension(icon.getIconWidth(),icon.getIconHeight()));  revalidate();  repaint();}  }
class C{  public void addPostProcessing(DataMatrixTransform dataMatrixTransform){  this.postProcessing.add(dataMatrixTransform);}  }
class C{  public void testProhibitedClause() throws Exception {  Query required=new TermQuery(new Term("field","this"));  Query prohibited=new TermQuery(new Term("field","3"));  BooleanQuery.Builder bq=new BooleanQuery.Builder();  bq.add(new AssertNeedsScores(required,true),BooleanClause.Occur.MUST);  bq.add(new AssertNeedsScores(prohibited,false),BooleanClause.Occur.MUST_NOT);  assertEquals(4,searcher.search(bq.build(),5).totalHits);}  }
class C{  public SimpleDigitalOut(){}  }
class C{  NormalSsaInsn(final Insn insn,final SsaBasicBlock block){  super(insn.getResult(),block);  this.insn=insn;}  }
class C{  public RegisterOperand makeTempFloat(){  return new RegisterOperand(getFloat(),TypeReference.Float);}  }
class C{  public ExecWSHScriptCommand(String playlist,File[] files){  this.playlist=playlist;  this.files=files;}  }
class C{  public kbd addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  public XObject operate(XObject left,XObject right) throws javax.xml.transform.TransformerException {  return left.equals(right) ? XBoolean.S_TRUE : XBoolean.S_FALSE;}  }
class C{  public KeyStoreLoadException(String message,Throwable causeThrowable,KeyStoreType keyStoreType){  super(message,causeThrowable);  this.keyStoreType=keyStoreType;}  }
class C{  private int hash(long[] h,long objectToHash){  long obj=(objectToHash < Integer.MAX_VALUE) ? objectToHash : objectToHash - bigPrime;  long h0=h[0];  long h1=(h[1] < (Long.MAX_VALUE / 2)) ? h[1] : h[1] - bigPrime;  long ret=(obj * h0) % bigPrime;  ret=(ret < (Long.MAX_VALUE / 2)) ? ret : ret - bigPrime;  return (int)(((ret + h1) % bigPrime) % (long)filterSize);}  }
class C{  public String globalInfo(){  return "Reads a source that is in svm light format.\n\n" + "For more information about svm light see:\n\n" + "http://svmlight.joachims.org/";}  }
class C{  public void testDigitsInRussianCharset() throws IOException {  RussianAnalyzer ra=new RussianAnalyzer();  assertAnalyzesTo(ra,"text 1000",new String[]{"text","1000"});  ra.close();}  }
class C{  @Override public int hashCode(){  return this.hashCode;}  }
class C{  public void release(){  super.release();  init();}  }
class C{  private static void checkNotNull(Object v){  if (v == null)   throw new NullPointerException();}  }
class C{  public void supportTlsIntolerantServer(SSLSocket socket){  socket.setEnabledProtocols(new String[]{"SSLv3"});}  }
class C{  public boolean remoteEquals(RemoteRef ref){  if (ref instanceof ActivatableRef)   return id.equals(((ActivatableRef)ref).id);  return false;}  }
class C{  @Override public View create(Element elem){  return new PasswordView(elem);}  }
class C{  public void testWrite4() throws Exception {  try {    new CipherOutputStream(new BufferedOutputStream((OutputStream)null),new NullCipher()).write(new byte[]{0},1,Integer.MAX_VALUE);  } catch (  IllegalArgumentException e) {  }}  }
class C{  @Override public N peek(){  return stack[(stackTop - 1) & mask];}  }
class C{  public synchronized String addUser(final JSONObject requestJSONObject) throws ServiceException {  final Transaction transaction=userRepository.beginTransaction();  try {    final String userEmail=requestJSONObject.optString(User.USER_EMAIL).trim().toLowerCase();    final String userName=requestJSONObject.optString(User.USER_NAME);    JSONObject user=userRepository.getByName(userName);    if (null != user && UserExt.USER_STATUS_C_VALID == user.optInt(UserExt.USER_STATUS)) {      if (transaction.isActive()) {        transaction.rollback();      }      throw new ServiceException(langPropsService.get("duplicatedUserNameLabel") + " [" + userName+ "]");    }    boolean toUpdate=false;    String ret=null;    String avatarURL=null;    user=userRepository.getByEmail(userEmail);    int userNo=0;    if (null != user) {      if (UserExt.USER_STATUS_C_VALID == user.optInt(UserExt.USER_STATUS)) {        if (transaction.isActive()) {          transaction.rollback();        }        throw new ServiceException(langPropsService.get("duplicatedEmailLabel"));      }      toUpdate=true;      ret=user.optString(Keys.OBJECT_ID);      userNo=user.optInt(UserExt.USER_NO);      avatarURL=user.optString(UserExt.USER_AVATAR_URL);    }    user=new JSONObject();    user.put(User.USER_NAME,userName);    String realName=requestJSONObject.optString(UserExt.USER_REAL_NAME);    if (Strings.isEmptyOrNull(realName)) {      user.put(UserExt.USER_REAL_NAME,userName);    } else {      user.put(UserExt.USER_REAL_NAME,realName);    }    user.put(User.USER_EMAIL,userEmail);    user.put(UserExt.USER_APP_ROLE,requestJSONObject.optInt(UserExt.USER_APP_ROLE));    user.put(User.USER_PASSWORD,requestJSONObject.optString(User.USER_PASSWORD));    user.put(User.USER_ROLE,requestJSONObject.optString(User.USER_ROLE,Role.DEFAULT_ROLE));    user.put(User.USER_URL,"");    user.put(UserExt.USER_ARTICLE_COUNT,0);    user.put(UserExt.USER_COMMENT_COUNT,0);    user.put(UserExt.USER_TAG_COUNT,0);    user.put(UserExt.USER_STATUS,0);    user.put(UserExt.USER_INTRO,"");    user.put(UserExt.USER_AVATAR_TYPE,UserExt.USER_AVATAR_TYPE_C_UPLOAD);    user.put(UserExt.USER_QQ,"");    user.put(UserExt.USER_ONLINE_FLAG,false);    user.put(UserExt.USER_LATEST_ARTICLE_TIME,0L);    user.put(UserExt.USER_LATEST_CMT_TIME,0L);    user.put(UserExt.USER_LATEST_LOGIN_TIME,0L);    user.put(UserExt.USER_LATEST_LOGIN_IP,"");    user.put(UserExt.USER_CURRENT_CHECKIN_STREAK_START,0);    user.put(UserExt.USER_CURRENT_CHECKIN_STREAK_END,0);    user.put(UserExt.USER_LONGEST_CHECKIN_STREAK_START,0);    user.put(UserExt.USER_LONGEST_CHECKIN_STREAK_END,0);    user.put(UserExt.USER_LONGEST_CHECKIN_STREAK,0);    user.put(UserExt.USER_CURRENT_CHECKIN_STREAK,0);    user.put(UserExt.USER_POINT,0);    user.put(UserExt.USER_USED_POINT,0);    user.put(UserExt.USER_JOIN_POINT_RANK,UserExt.USER_JOIN_POINT_RANK_C_JOIN);    user.put(UserExt.USER_JOIN_USED_POINT_RANK,UserExt.USER_JOIN_USED_POINT_RANK_C_JOIN);    user.put(UserExt.USER_TAGS,"");    user.put(UserExt.USER_SKIN,Symphonys.get("skinDirName"));    user.put(UserExt.USER_COUNTRY,"");    user.put(UserExt.USER_PROVINCE,"");    user.put(UserExt.USER_CITY,"");    user.put(UserExt.USER_TEAM,requestJSONObject.optString(UserExt.USER_TEAM));    user.put(UserExt.USER_UPDATE_TIME,0L);    user.put(UserExt.USER_GEO_STATUS,UserExt.USER_GEO_STATUS_C_PUBLIC);    final int status=requestJSONObject.optInt(UserExt.USER_STATUS,UserExt.USER_STATUS_C_NOT_VERIFIED);    user.put(UserExt.USER_STATUS,status);    if (toUpdate) {      user.put(UserExt.USER_NO,userNo);      if (Symphonys.getBoolean("qiniu.enabled")) {        user.put(UserExt.USER_AVATAR_URL,Symphonys.get("qiniu.domain") + "/avatar/" + ret+ "?"+ new Date().getTime());      } else {        user.put(UserExt.USER_AVATAR_URL,avatarURL + "?" + new Date().getTime());      }      userRepository.update(ret,user);      try {        final Query query=new Query();        final List<Filter> filters=new ArrayList<Filter>();        filters.add(new PropertyFilter(User.USER_NAME,FilterOperator.EQUAL,userName));        filters.add(new PropertyFilter(User.USER_EMAIL,FilterOperator.NOT_EQUAL,userEmail));        filters.add(new PropertyFilter(UserExt.USER_STATUS,FilterOperator.EQUAL,UserExt.USER_STATUS_C_NOT_VERIFIED));        query.setFilter(new CompositeFilter(CompositeFilterOperator.AND,filters));        final JSONArray others=userRepository.get(query).optJSONArray(Keys.RESULTS);        for (int i=0; i < others.length(); i++) {          final JSONObject u=others.optJSONObject(i);          final String id=u.optString(Keys.OBJECT_ID);          u.put(User.USER_NAME,UserExt.NULL_USER_NAME);          userRepository.update(id,u);          LOGGER.log(Level.INFO,"Defeated a user [email=" + u.optString(User.USER_EMAIL) + "]");        }      } catch (      final Exception e) {        LOGGER.log(Level.ERROR,"Defeat others error",e);      }    } else {      ret=Ids.genTimeMillisId();      user.put(Keys.OBJECT_ID,ret);      try {        final BufferedImage img=avatarQueryService.createAvatar(MD5.hash(ret),512);        final ByteArrayOutputStream baos=new ByteArrayOutputStream();        ImageIO.write(img,"jpg",baos);        baos.flush();        final byte[] bytes=baos.toByteArray();        baos.close();        if (Symphonys.getBoolean("qiniu.enabled")) {          final Auth auth=Auth.create(Symphonys.get("qiniu.accessKey"),Symphonys.get("qiniu.secretKey"));          final UploadManager uploadManager=new UploadManager();          uploadManager.put(bytes,"avatar/" + ret,auth.uploadToken(Symphonys.get("qiniu.bucket")),null,"image/jpeg",false);          user.put(UserExt.USER_AVATAR_URL,Symphonys.get("qiniu.domain") + "/avatar/" + ret+ "?"+ new Date().getTime());        } else {          final String fileName=UUID.randomUUID().toString().replaceAll("-","") + ".jpg";          final OutputStream output=new FileOutputStream(Symphonys.get("upload.dir") + fileName);          IOUtils.write(bytes,output);          IOUtils.closeQuietly(output);          user.put(UserExt.USER_AVATAR_URL,Latkes.getServePath() + "/upload/" + fileName);        }      } catch (      final Exception e) {        LOGGER.log(Level.ERROR,"Generates avatar error",e);        user.put(UserExt.USER_AVATAR_URL,"");      }      final JSONObject memberCntOption=optionRepository.get(Option.ID_C_STATISTIC_MEMBER_COUNT);      final int memberCount=memberCntOption.optInt(Option.OPTION_VALUE) + 1;      user.put(UserExt.USER_NO,memberCount);      userRepository.add(user);      memberCntOption.put(Option.OPTION_VALUE,String.valueOf(memberCount));      optionRepository.update(Option.ID_C_STATISTIC_MEMBER_COUNT,memberCntOption);    }    transaction.commit();    if (UserExt.USER_STATUS_C_VALID == status) {      pointtransferMgmtService.transfer(Pointtransfer.ID_C_SYS,ret,Pointtransfer.TRANSFER_TYPE_C_INIT,Pointtransfer.TRANSFER_SUM_C_INIT,ret);    }    archiveMgmtService.refreshTeams(System.currentTimeMillis());    return ret;  } catch (  final RepositoryException e) {    if (transaction.isActive()) {      transaction.rollback();    }    LOGGER.log(Level.ERROR,"Adds a user failed",e);    throw new ServiceException(e);  }}  }
class C{  public void testBug71923() throws Exception {  final String tableDDL="(id INT AUTO_INCREMENT PRIMARY KEY, ch CHAR(1) UNIQUE KEY, ct INT, dt VARCHAR(100))";  final String defaultQuery="Insert into testBug71923 (ch, ct) values ('A', 1), ('B', 2)";  final String[] testQueriesPositiveMatches=new String[]{"INSERT INTO testBug71923 (ch, ct) VALUES ('B', 2), ('C', 3) ON DUPLICATE KEY UPDATE ct = ABS(ct) + VALUES(ct)","INSERT INTO testBug71923 (ch, ct) VALUES ('B', 2), ('C', 3) ON  DUPLICATE  KEY  UPDATE ct = ABS(ct) + VALUES(ct)","INSERT INTO testBug71923 (ch, ct) VALUES ('B', 2), ('C', 3) /*! ON   DUPLICATE */ KEY /*!UPDATE*/ ct = ABS(ct) + VALUES(ct)","INSERT INTO testBug71923 (ch, ct) VALUES ('B', 2), ('C', 3) ON/* ON */DUPLICATE /* DUPLICATE */KEY/* KEY *//* KEY */ UPDATE /* UPDATE */ ct = ABS(ct) + VALUES(ct)","INSERT INTO testBug71923 (ch, ct) VALUES ('B', 2), ('C', 3) ON -- new line\n DUPLICATE KEY UPDATE ct = ABS(ct) + VALUES(ct)","INSERT INTO testBug71923 (ch, ct) VALUES ('B', 2), ('C', 3) ON DUPLICATE # new line\n KEY UPDATE ct = ABS(ct) + VALUES(ct)","INSERT INTO testBug71923 (ch, ct) VALUES ('B', 2), ('C', 3) ON/* comment */DUPLICATE# new line\nKEY-- new line\nUPDATE ct = ABS(ct) + VALUES(ct)"};  final String[] testQueriesNegativeMatches=new String[]{"INSERT INTO testBug71923 (ch, ct, dt) VALUES ('C', 3, NULL), ('D', 4, NULL) /* ON DUPLICATE KEY UPDATE */","INSERT INTO testBug71923 (ch, ct, dt) VALUES ('C', 3, NULL), ('D', 4, NULL) -- ON DUPLICATE KEY UPDATE","INSERT INTO testBug71923 (ch, ct, dt) VALUES ('C', 3, NULL), ('D', 4, NULL) # ON DUPLICATE KEY UPDATE","INSERT INTO testBug71923 (ch, ct, dt) VALUES ('C', 3, NULL), ('D', 4, 'ON DUPLICATE KEY UPDATE')"};  int c=0;  for (  String query : testQueriesPositiveMatches) {    c++;    createTable("testBug71923",tableDDL);    assertEquals(2,this.stmt.executeUpdate(defaultQuery));    assertFalse(this.stmt.execute(query,Statement.RETURN_GENERATED_KEYS));    this.rs=this.stmt.getGeneratedKeys();    assertTrue(c + ".A Statement.execute() - generated keys row expected",this.rs.next());    assertEquals(c + ".A Statement.execute() - wrong generated key value",3,this.rs.getInt(1));    assertFalse(c + ".A Statement.execute() - no more generated keys rows expected",this.rs.next());    this.rs.close();    dropTable("testBug71923");    createTable("testBug71923",tableDDL);    assertEquals(2,this.stmt.executeUpdate(defaultQuery));    assertEquals(versionMeetsMinimum(5,5) ? 3 : 4,this.stmt.executeUpdate(query,Statement.RETURN_GENERATED_KEYS));    this.rs=this.stmt.getGeneratedKeys();    assertTrue(c + ".B Statement.executeUpdate() - generated keys row expected",this.rs.next());    assertEquals(c + ".B Statement.executeUpdate() - wrong generated key value",3,this.rs.getInt(1));    assertFalse(c + ".B Statement.executeUpdate() - no more generated keys rows expected",this.rs.next());    this.rs.close();    this.pstmt=this.conn.prepareStatement(query,Statement.RETURN_GENERATED_KEYS);    createTable("testBug71923",tableDDL);    assertEquals(2,this.stmt.executeUpdate(defaultQuery));    assertFalse(this.pstmt.execute(query,Statement.RETURN_GENERATED_KEYS));    this.rs=this.pstmt.getGeneratedKeys();    assertTrue(c + ".C PreparedStatment.execute() - generated keys row expected",this.rs.next());    assertEquals(c + ".C PreparedStatment.execute() - wrong generated key value",3,this.rs.getInt(1));    assertFalse(c + ".C PreparedStatment.execute() - no more generated keys rows expected",this.rs.next());    this.rs.close();    dropTable("testBug71923");    createTable("testBug71923",tableDDL);    assertEquals(2,this.stmt.executeUpdate(defaultQuery));    assertEquals(versionMeetsMinimum(5,5) ? 3 : 4,this.pstmt.executeUpdate(query,Statement.RETURN_GENERATED_KEYS));    this.rs=this.pstmt.getGeneratedKeys();    assertTrue(c + ".D PreparedStatment.executeUpdate() - generated keys row expected",this.rs.next());    assertEquals(c + ".D PreparedStatment.executeUpdate() - wrong generated key value",3,this.rs.getInt(1));    assertFalse(c + ".D PreparedStatment.executeUpdate() - no more generated keys rows expected",this.rs.next());    this.rs.close();    dropTable("testBug71923");  }  c=0;  for (  String query : testQueriesNegativeMatches) {    c++;    createTable("testBug71923",tableDDL);    assertEquals(2,this.stmt.executeUpdate(defaultQuery));    assertFalse(this.stmt.execute(query,Statement.RETURN_GENERATED_KEYS));    this.rs=this.stmt.getGeneratedKeys();    assertTrue(c + ".E Statement.execute() - generated keys 1st row expected",this.rs.next());    assertEquals(c + ".E Statement.execute() - wrong 1st generated key value",3,this.rs.getInt(1));    assertTrue(c + ".E Statement.execute() - generated keys 2nd row expected",this.rs.next());    assertEquals(c + ".E Statement.execute() - wrong 2nd generated key value",4,this.rs.getInt(1));    assertFalse(c + ".E Statement.execute() - no more generated keys rows expected",this.rs.next());    this.rs.close();    dropTable("testBug71923");    createTable("testBug71923",tableDDL);    assertEquals(2,this.stmt.executeUpdate(defaultQuery));    assertEquals(2,this.stmt.executeUpdate(query,Statement.RETURN_GENERATED_KEYS));    this.rs=this.stmt.getGeneratedKeys();    assertTrue(c + ".F Statement.execute() - generated keys 1st row expected",this.rs.next());    assertEquals(c + ".F Statement.execute() - wrong 1st generated key value",3,this.rs.getInt(1));    assertTrue(c + ".F Statement.execute() - generated keys 2nd row expected",this.rs.next());    assertEquals(c + ".F Statement.execute() - wrong 2nd generated key value",4,this.rs.getInt(1));    assertFalse(c + ".F Statement.execute() - no more generated keys rows expected",this.rs.next());    this.rs.close();    this.pstmt=this.conn.prepareStatement(query,Statement.RETURN_GENERATED_KEYS);    createTable("testBug71923",tableDDL);    assertEquals(2,this.stmt.executeUpdate(defaultQuery));    assertFalse(this.pstmt.execute(query,Statement.RETURN_GENERATED_KEYS));    this.rs=this.pstmt.getGeneratedKeys();    assertTrue(c + ".G PreparedStatment.execute() - generated keys 1st row expected",this.rs.next());    assertEquals(c + ".G PreparedStatment.execute() - wrong 1st generated key value",3,this.rs.getInt(1));    assertTrue(c + ".G PreparedStatment.execute() - generated keys 2nd row expected",this.rs.next());    assertEquals(c + ".G PreparedStatment.execute() - wrong 2nd generated key value",4,this.rs.getInt(1));    assertFalse(c + ".G PreparedStatment.execute() - no more generated keys rows expected",this.rs.next());    this.rs.close();    dropTable("testBug71923");    createTable("testBug71923",tableDDL);    assertEquals(2,this.stmt.executeUpdate(defaultQuery));    assertEquals(2,this.pstmt.executeUpdate(query,Statement.RETURN_GENERATED_KEYS));    this.rs=this.pstmt.getGeneratedKeys();    assertTrue(c + ".H PreparedStatment.executeUpdate() - generated keys 1st row expected",this.rs.next());    assertEquals(c + ".H PreparedStatment.executeUpdate() - wrong 1st generated key value",3,this.rs.getInt(1));    assertTrue(c + ".H PreparedStatment.executeUpdate() - generated keys 2nd row expected",this.rs.next());    assertEquals(c + ".H PreparedStatment.executeUpdate() - wrong 2nd generated key value",4,this.rs.getInt(1));    assertFalse(c + ".H PreparedStatment.executeUpdate() - no more generated keys rows expected",this.rs.next());    this.rs.close();    dropTable("testBug71923");  }}  }
class C{  public void notifyTabsExperimentChanged(AbstractExperimenterTab source,Experiment exp){  m_Experiment=exp;  for (  AbstractExperimenterTab tab : m_Tabs) {    if ((source != null) && (tab == source))     continue;    tab.setExperiment(exp);  }}  }
class C{  public NullArgumentException(String argName){  super((argName == null ? "Argument" : argName) + " must not be null.");}  }
class C{  public DoubleArrayList quantileElements(DoubleArrayList phis){  this.sort();  return cern.jet.stat.Descriptive.quantiles(this.buffer,phis);}  }
class C{  private int removeFilteredInstances(CamelCaseFilter filter,GroupTree filteredTree,List<TreePath> expandedPaths,TreePath path){  int hits=0;  Iterator<? extends GroupTree> g=filteredTree.getSubGroups().iterator();  while (g.hasNext()) {    GroupTree child=g.next();    boolean matches=filter.matches(child.getName());    if (matches) {      expandedPaths.add(path);    }    hits+=removeFilteredInstances(filter,child,expandedPaths,path.pathByAddingChild(child));    if (child.getAllOperatorDescriptions().size() == 0 && !matches) {      g.remove();    }  }  boolean groupMatches=filter.matches(filteredTree.getName());  Iterator<OperatorDescription> o=filteredTree.getOperatorDescriptions().iterator();  while (o.hasNext()) {    OperatorDescription description=o.next();    boolean matches=filter.matches(description.getName()) || filter.matches(description.getShortName());    if (!matches) {      for (      String tag : description.getTags()) {        matches=filter.matches(tag);        if (matches) {          break;        }      }    }    if (!filterDeprecated) {      for (      String replaces : description.getReplacedKeys()) {        matches|=filter.matches(replaces);      }    }    if (!matches && !groupMatches) {      o.remove();    } else {      hits++;    }  }  if (hits > 0) {    expandedPaths.add(path);  }  return hits;}  }
class C{  public boolean isCachedInMemory(String typeName) throws AtlasException {  return super.has(typeName);}  }
class C{  public static String cdmaCheckAndProcessPlusCode(String dialStr){  if (!TextUtils.isEmpty(dialStr)) {    if (isReallyDialable(dialStr.charAt(0)) && isNonSeparator(dialStr)) {      String currIso=SystemProperties.get(PROPERTY_OPERATOR_ISO_COUNTRY,"");      String defaultIso=SystemProperties.get(PROPERTY_ICC_OPERATOR_ISO_COUNTRY,"");      if (!TextUtils.isEmpty(currIso) && !TextUtils.isEmpty(defaultIso)) {        return cdmaCheckAndProcessPlusCodeByNumberFormat(dialStr,getFormatTypeFromCountryCode(currIso),getFormatTypeFromCountryCode(defaultIso));      }    }  }  return dialStr;}  }
class C{  public boolean isAdminActive(ComponentName who){  if (mService != null) {    try {      return mService.isAdminActive(who,UserHandle.myUserId());    } catch (    RemoteException e) {      Log.w(TAG,"Failed talking with device policy service",e);    }  }  return false;}  }
class C{  public Object clone(){  try {    return super.clone();  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("PPInstance_Log[");  sb.append(m_Log_ID);  if (m_P_Date != null)   sb.append(",Date=").append(m_P_Date);  if (m_P_ID != 0)   sb.append(",ID=").append(m_P_ID);  if (m_P_Number != null)   sb.append(",Number=").append(m_P_Number);  if (m_P_Msg != null)   sb.append(",").append(m_P_Msg);  sb.append("]");  return sb.toString();}  }
class C{  private boolean isPageActive(){  boolean isActive=false;  if (mPageReference == null || mPageReference.get() == null) {    return isActive;  }  return mPageReference.get().isActive();}  }
class C{  public static HostAddress parse(DerInputStream data,byte explicitTag,boolean optional) throws Asn1Exception, IOException {  if ((optional) && (((byte)data.peekByte() & (byte)0x1F) != explicitTag)) {    return null;  }  DerValue der=data.getDerValue();  if (explicitTag != (der.getTag() & (byte)0x1F)) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  } else {    DerValue subDer=der.getData().getDerValue();    return new HostAddress(subDer);  }}  }
class C{  public GetEventsParams withSinceSecond(long sinceSecond){  this.sinceSecond=sinceSecond;  return this;}  }
class C{  private EncryptedData(DerValue encoding) throws Asn1Exception, IOException {  DerValue der=null;  if (encoding.getTag() != DerValue.tag_Sequence) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  der=encoding.getData().getDerValue();  if ((der.getTag() & (byte)0x1F) == (byte)0x00) {    eType=(der.getData().getBigInteger()).intValue();  } else {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  if ((encoding.getData().peekByte() & 0x1F) == 1) {    der=encoding.getData().getDerValue();    int i=(der.getData().getBigInteger()).intValue();    kvno=new Integer(i);  } else {    kvno=null;  }  der=encoding.getData().getDerValue();  if ((der.getTag() & (byte)0x1F) == (byte)0x02) {    cipher=der.getData().getOctetString();  } else {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  if (encoding.getData().available() > 0) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }}  }
class C{  public boolean unlockIt(){  log.info(toString());  setProcessing(false);  return true;}  }
class C{  public static String fetchCgName(String clusterCgName){  String cgName=null;  if (clusterCgName != null && !clusterCgName.isEmpty()) {    String[] tmp=clusterCgName.split(SPLITTER);    cgName=tmp[1];  }  return cgName;}  }
class C{  protected boolean hasHistory(){  return true;}  }
class C{  private void sendPendingIntent(PendingIntent pi){  try {    pi.send();  } catch (  Exception e) {    Log.d(TAG,"Error sending media controls pending intent",e);  }}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/deactivate") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public Response deleteObjectVirtualPool(@PathParam("id") URI id){  return deleteVirtualPool(VirtualPool.Type.object,id);}  }
class C{  public void testExplodeLimit(){  String[] testStrings={"a:b","a:b:c","a:b:c:d","a:::b:c",":::::","a",""};  for (  String test : testStrings) {    String[] resultExplode=StringUtils.explode(test,':',3);    String[] resultSplit=test.split(":",3);    assertEquals("Different result lengths with test string \"" + test + "\"",resultSplit.length,resultExplode.length);    for (int i=0; i < resultExplode.length; i++) {      assertEquals("Different result part " + i + " when testing string: \""+ test+ "\"",resultSplit[i],resultExplode[i]);    }  }}  }
class C{  @Suspendable public static void removeContextScheduler(){  Context context=Vertx.currentContext();  if (context != null) {    context.remove(FIBER_SCHEDULER_CONTEXT_KEY);  }}  }
class C{  public static Object callStaticMethod(Class staticClass,String methodName,Object[] values) throws PageException {  if (values == null)   values=new Object[0];  MethodParameterPair mp;  try {    mp=getMethodParameterPairIgnoreCase(staticClass,methodName,values);  } catch (  NoSuchMethodException e) {    throw Caster.toPageException(e);  }  try {    return mp.getMethod().invoke(null,mp.getParameters());  } catch (  InvocationTargetException e) {    Throwable target=e.getTargetException();    if (target instanceof PageException)     throw (PageException)target;    throw Caster.toPageException(e.getTargetException());  }catch (  Exception e) {    throw Caster.toPageException(e);  }}  }
class C{  @SuppressWarnings("unchecked") protected synchronized V removeInternal(Object key,boolean countRemove){  if (key == null) {    if (Debug.verboseOn())     Debug.logVerbose("In UtilCache tried to remove with null key, using NullObject" + this.name,module);  }  Object nulledKey=fromKey(key);  CacheLine<V> oldCacheLine;  V oldValue;  if (fileTable != null) {    try {synchronized (this) {        try {          oldValue=fileTable.get(nulledKey);        } catch (        IOException e) {          oldValue=null;          throw e;        }        fileTable.remove(nulledKey);        jdbmMgr.commit();      }    } catch (    IOException e) {      oldValue=null;      Debug.logError(e,module);    }    oldCacheLine=memoryTable.remove(nulledKey);  } else {    oldCacheLine=memoryTable.remove(nulledKey);    oldValue=oldCacheLine != null ? oldCacheLine.getValue() : null;  }  if (oldCacheLine != null) {    cancel(oldCacheLine);  }  if (oldValue != null) {    noteRemoval((K)key,oldValue);    if (countRemove)     removeHitCount.incrementAndGet();    return oldValue;  } else {    if (countRemove)     removeMissCount.incrementAndGet();    return null;  }}  }
class C{  public static LocalDateTime fromCalendarFields(Calendar calendar){  if (calendar == null) {    throw new IllegalArgumentException("The calendar must not be null");  }  return new LocalDateTime(calendar.get(Calendar.YEAR),calendar.get(Calendar.MONTH) + 1,calendar.get(Calendar.DAY_OF_MONTH),calendar.get(Calendar.HOUR_OF_DAY),calendar.get(Calendar.MINUTE),calendar.get(Calendar.SECOND),calendar.get(Calendar.MILLISECOND));}  }
class C{  protected void parsePositions(String prefix,Properties props){  int index=1;  prefix=PropUtils.getScopedPropertyPrefix(prefix);  String entry=props.getProperty(prefix + Integer.toString(index));  while (entry != null) {    addPositionChoice(index,entry,prefix,props);    entry=props.getProperty(prefix + Integer.toString(++index));  }}  }
class C{  public static boolean contains(final Type type){  Set<Type> generatedValues=threadLocal.get();  return generatedValues.contains(type);}  }
class C{  public WorksheetEntry(BaseEntry sourceEntry){  super(sourceEntry);  getCategories().add(CATEGORY);}  }
class C{  public final double KBRelativeInformation() throws Exception {  return m_delegate.KBRelativeInformation();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.SMALLER_OP___SMALLER_OP_1:    return getSmallerOp_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private static void fillBasinReq(DTSweepContext tcx,AdvancingFrontNode node){  if (isShallow(tcx,node)) {    return;  }  fill(tcx,node);  if (node.prev == tcx.basin.leftNode && node.next == tcx.basin.rightNode) {    return;  } else   if (node.prev == tcx.basin.leftNode) {    Orientation o=orient2d(node.point,node.next.point,node.next.next.point);    if (o == Orientation.CW) {      return;    }    node=node.next;  } else   if (node.next == tcx.basin.rightNode) {    Orientation o=orient2d(node.point,node.prev.point,node.prev.prev.point);    if (o == Orientation.CCW) {      return;    }    node=node.prev;  } else {    if (node.prev.point.getY() < node.next.point.getY()) {      node=node.prev;    } else {      node=node.next;    }  }  fillBasinReq(tcx,node);}  }
class C{  public static TermsEnumTermsQueryBuilder termsEnumTermsQuery(String name,byte[] values,int cacheKey){  return new TermsEnumTermsQueryBuilder(name,values,cacheKey);}  }
class C{  public VOParameter(VOParameterDefinition paramDef){  super();  if (paramDef == null) {    throw new IllegalArgumentException("VOParameterDefinition must not be null");  }  parameterDefinition=paramDef;}  }
class C{  public synchronized void removePropertyChangeListener(PropertyChangeListener listener){  if (changeSupport == null) {    return;  }  changeSupport.removePropertyChangeListener(listener);}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public BulkUserImportException(String msg,BulkUserImportExceptionBean bean){  super(msg,bean);  this.bean=bean;}  }
class C{  public static SecretKeys keys(String keysStr) throws InvalidKeyException {  String[] keysArr=keysStr.split(":");  if (keysArr.length != 2) {    throw new IllegalArgumentException("Cannot parse aesKey:hmacKey");  } else {    byte[] confidentialityKey=Base64.decode(keysArr[0],BASE64_FLAGS);    if (confidentialityKey.length != AES_KEY_LENGTH_BITS / 8) {      throw new InvalidKeyException("Base64 decoded key is not " + AES_KEY_LENGTH_BITS + " bytes");    }    byte[] integrityKey=Base64.decode(keysArr[1],BASE64_FLAGS);    if (integrityKey.length != HMAC_KEY_LENGTH_BITS / 8) {      throw new InvalidKeyException("Base64 decoded key is not " + HMAC_KEY_LENGTH_BITS + " bytes");    }    SecretKeys secretKeys=new SecretKeys();    SecretKeySpec secretKeySpec=new SecretKeySpec();    secretKeySpec.generate(confidentialityKey,0,confidentialityKey.length,CIPHER);    SecretKeySpec secretKeySpec1=new SecretKeySpec();    secretKeySpec1.generate(integrityKey,HMAC_ALGORITHM);    secretKeys.setConfidentialityKey(secretKeySpec);    secretKeys.setIntegrityKey(secretKeySpec1);    return secretKeys;  }}  }
class C{  public mxCellState(mxGraphView view,Object cell,Map<String,Object> style){  setView(view);  setCell(cell);  setStyle(style);}  }
class C{  @Override public String format(Date date,String mask){  DateTime dt=(date instanceof DateTime) ? (DateTime)date : new DateTimeImpl(date.getTime(),false);  return format(dt,mask,null);}  }
class C{  public static void initiateClientItemEvent(ItemStack itemStack,int event){  try {    if (NetworkManager_initiateClientItemEvent == null)     NetworkManager_initiateClientItemEvent=Class.forName(getPackage() + ".core.network.NetworkManager").getMethod("initiateClientItemEvent",ItemStack.class,Integer.TYPE);    if (instance == null)     instance=getInstance();    NetworkManager_initiateClientItemEvent.invoke(instance,itemStack,event);  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public DataChangeNotification clone(){  DataChangeNotification result=new DataChangeNotification();  if (MonitoredItems != null) {    result.MonitoredItems=new MonitoredItemNotification[MonitoredItems.length];    for (int i=0; i < MonitoredItems.length; i++)     result.MonitoredItems[i]=MonitoredItems[i].clone();  }  result.DiagnosticInfos=DiagnosticInfos == null ? null : DiagnosticInfos.clone();  return result;}  }
class C{  public ParsedURI resolve(String relURISpec){  ParsedURI relURI=new ParsedURI(relURISpec);  return this.resolve(relURI);}  }
class C{  public static final short secondaryOrder(int order){  return (short)CollationElementIteratorICU.secondaryOrder(order);}  }
class C{  public static void traceThrowable(Throwable e){  PrintWriter writer=DriverManager.getLogWriter();  if (writer != null) {    e.printStackTrace(writer);  }}  }
class C{  public static IProject findProject(String projectName){  IWorkspaceRoot workspaceRoot=ResourcesPlugin.getWorkspace().getRoot();  IProject project=workspaceRoot.getProject(projectName);  if (project == null || !project.exists()) {    return null;  }  return project;}  }
class C{  public TDoubleIntIterator(TDoubleIntHashMap map){  super(map);  _map=map;}  }
class C{  public XMPPException(String message,XMPPError error){  super(message);  this.error=error;}  }
class C{  private boolean deodexApk(ApkLegacy apk){  boolean copyStatus=false;  copyStatus=apk.copyNeededFiles(tempFolder);  if (!copyStatus) {    this.logPan.addLog(R.getString(S.LOG_WARNING) + "[" + apk.origApk.getName()+ "]"+ R.getString("log.copy.to.tmp.failed"));    return false;  } else {    boolean deodexStatus=false;    deodexStatus=Deodexer.deoDexApkLegacy(apk.tempOdex,apk.classes);    if (!deodexStatus) {      this.logPan.addLog(R.getString(S.LOG_WARNING) + "[" + apk.origApk.getName()+ "]"+ R.getString("log.deodex.failed"));      return false;    } else {      ArrayList<File> classes=new ArrayList<File>();      classes.add(apk.classes);      boolean putBack=false;      putBack=Zip.addFilesToExistingZip(apk.tempApk,classes);      if (!putBack) {        this.logPan.addLog(R.getString(S.LOG_WARNING) + "[" + apk.origApk.getName()+ "]"+ R.getString("log.add.classes.failed"));      } else {        if (this.doSign) {          signStatus=Deodexer.signApk(apk.tempApk,apk.tempSigned);          if (!signStatus)           apk.tempApk.renameTo(apk.tempSigned);        } else {          apk.tempApk.renameTo(apk.tempSigned);        }        if (this.doZipalign) {          this.zipAlignStatus=Zip.zipAlignAPk(apk.tempSigned,apk.tempZipaligned);          if (!this.zipAlignStatus)           apk.tempSigned.renameTo(apk.tempZipaligned);        } else {          apk.tempSigned.renameTo(apk.tempZipaligned);        }      }    }  }  boolean pushBack=apk.tempZipaligned.renameTo(apk.origApk);  if (pushBack)   FilesUtils.deleteRecursively(apk.origOdex); else {    this.logPan.addLog(R.getString(S.LOG_ERROR) + "[" + apk.origApk.getName()+ "]"+ R.getString("log.putback.apk.failed"));    return false;  }  FilesUtils.deleteRecursively(apk.tempApk);  FilesUtils.deleteRecursively(apk.tempOdex);  FilesUtils.deleteRecursively(apk.classes);  FilesUtils.deleteRecursively(apk.tempSigned);  FilesUtils.deleteRecursively(apk.tempZipaligned);  return true;}  }
class C{  @Override public void initialize(ResourceManager nerRm){  if (ViewNames.NER_ONTONOTES.equals(getViewName()))   nerRm=new NerOntonotesConfigurator().getConfig(nonDefaultRm); else   nerRm=new NerBaseConfigurator().getConfig(nonDefaultRm);  ParametersForLbjCode.currentParameters.forceNewSentenceOnLineBreaks=false;  Parameters.readConfigAndLoadExternalData(nerRm);  NETaggerLevel1 tagger1=new NETaggerLevel1(ParametersForLbjCode.currentParameters.pathToModelFile + ".level1",ParametersForLbjCode.currentParameters.pathToModelFile + ".level1.lex");  NETaggerLevel2 tagger2=null;  if (ParametersForLbjCode.currentParameters.featuresToUse.containsKey("PredictionsLevel1")) {    tagger2=new NETaggerLevel2(ParametersForLbjCode.currentParameters.pathToModelFile + ".level2",ParametersForLbjCode.currentParameters.pathToModelFile + ".level2.lex");  }  this.t1=tagger1;  this.t2=tagger2;}  }
class C{  public void close() throws IOException {  dataStore.close();}  }
class C{  void renderNormal(){  glEnable(GL_DEPTH_TEST);  glUseProgram(this.normalProgram);  glUniformMatrix4fv(viewMatrixUniform,false,viewMatrix.get(matrixBuffer));  glUniformMatrix4fv(projMatrixUniform,false,projMatrix.get(matrixBuffer));  glUniformMatrix3fv(normalMatrixUniform,false,normalMatrix.get(matrixBuffer));  glBindFramebufferEXT(GL_FRAMEBUFFER_EXT,fbo);  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);  glBindBuffer(GL_ARRAY_BUFFER,this.cubeVbo);  glEnableVertexAttribArray(0);  glVertexAttribPointer(0,3,GL_FLOAT,false,0,0L);  glEnableVertexAttribArray(1);  glVertexAttribPointer(1,3,GL_FLOAT,false,0,this.normalsOffset);  glDrawArrays(GL_TRIANGLES,0,this.numVertices);  glDisableVertexAttribArray(0);  glDisableVertexAttribArray(1);  glBindBuffer(GL_ARRAY_BUFFER,0);  glBindFramebufferEXT(GL_FRAMEBUFFER_EXT,0);  glUseProgram(0);}  }
class C{  private LirsEntry stackBottom(){  LirsEntry bottom=header.previousInStack;  return (bottom == header) ? null : bottom;}  }
class C{  @Override protected void drawGridBandsVertical(Graphics2D g2,Rectangle2D drawArea,Rectangle2D plotArea,boolean firstGridBandIsDark,List ticks){  double xx=plotArea.getX();  double yy1, yy2;  double outlineStrokeWidth;  Stroke outlineStroke=getPlot().getOutlineStroke();  if (outlineStroke != null && outlineStroke instanceof BasicStroke) {    outlineStrokeWidth=((BasicStroke)outlineStroke).getLineWidth();  } else {    outlineStrokeWidth=1d;  }  Iterator iterator=ticks.iterator();  ValueTick tick;  Rectangle2D band;  while (iterator.hasNext()) {    tick=(ValueTick)iterator.next();    int weightIndex=(int)tick.getValue();    yy1=valueToJava2D(tick.getValue() + 0.5d,plotArea,RectangleEdge.LEFT);    yy2=valueToJava2D(tick.getValue() - 0.5d,plotArea,RectangleEdge.LEFT);    g2.setColor(PlotterAdapter.getWeightColor(this.weights[weightIndex],this.maxWeight));    band=new Rectangle2D.Double(xx + outlineStrokeWidth,yy1,plotArea.getMaxX() - xx - outlineStrokeWidth,yy2 - yy1);    g2.fill(band);  }  g2.setPaintMode();}  }
class C{  public static void logCurrent(String msg){  EGLDisplay display;  EGLContext context;  EGLSurface surface;  display=EGL14.eglGetCurrentDisplay();  context=EGL14.eglGetCurrentContext();  surface=EGL14.eglGetCurrentSurface(EGL14.EGL_DRAW);  Log.i(TAG,"Current EGL (" + msg + "): display="+ display+ ", context="+ context+ ", surface="+ surface);}  }
class C{  public static synchronized Server create() throws Exception {  return new LocalTestServer();}  }
class C{  private InputStream writeTriG(Model statements) throws RDFHandlerException {  StringWriter writer=new StringWriter();  RDFWriter trigWriter=new TriGWriter(writer);  trigWriter.startRDF();  for (  Statement nextStatement : statements) {    trigWriter.handleStatement(nextStatement);  }  trigWriter.endRDF();  return new ByteArrayInputStream(writer.toString().getBytes(Charset.forName("UTF-8")));}  }
class C{  public static void applyTypeface(TextView textView){  if (sTypeface != null) {    textView.setTypeface(sTypeface);  }}  }
class C{  public String encrypt(String plainText) throws Exception {  cipher.init(Cipher.ENCRYPT_MODE,key,spec);  byte[] encrypted=cipher.doFinal(plainText.getBytes("UTF-8"));  String encryptedText=new String(Base64.encode(encrypted,Base64.DEFAULT),"UTF-8");  return encryptedText;}  }
class C{  @SuppressWarnings("rawtypes") protected void postProcessPasoFormData(AccionMultientidadForm accionMultientidadForm,HttpServletRequest request,HttpServletResponse response) throws Exception {  if (ConfiguracionAccionMultientidadConstants.PASO_SELECCION_ENTIDADES.equals(accionMultientidadForm.getPaso()) || ConfiguracionAccionMultientidadConstants.PASO_SELECCION_ENTIDADES_ORIGEN.equals(accionMultientidadForm.getPaso()) || ConfiguracionAccionMultientidadConstants.PASO_SELECCION_ENTIDADES_DESTINO.equals(accionMultientidadForm.getPaso())) {    ServicioAdministracion oServicio=LocalizadorServicios.getServicioAdministracion();    String usuario=(String)request.getSession().getAttribute(Defs.PARAMETRO_NOMBRE_USUARIO_TRABAJO);    List entidades=Utilidades.entidadesAdministrar(usuario,oServicio.getEntidades(usuario));    request.setAttribute(Defs.LISTADO_ENTIDADES,entidades);    if ((entidades != null) && (entidades.size() > 0)) {      Entidad entidad=(Entidad)entidades.get(0);      accionMultientidadForm.setEntidades(new String[]{entidad.getIdentificador()});    }    if (ConfiguracionAccionMultientidadConstants.PASO_SELECCION_ENTIDADES.equals(accionMultientidadForm.getPaso())) {      request.setAttribute(Defs.TIPO_LISTADO_ENTIDADES,Defs.TIPO_LISTADO_ENTIDADES_STANDARD);    } else     if (ConfiguracionAccionMultientidadConstants.PASO_SELECCION_ENTIDADES_ORIGEN.equals(accionMultientidadForm.getPaso())) {      request.setAttribute(Defs.TIPO_LISTADO_ENTIDADES,Defs.TIPO_LISTADO_ENTIDADES_ORIGEN);    } else     if (ConfiguracionAccionMultientidadConstants.PASO_SELECCION_ENTIDADES_DESTINO.equals(accionMultientidadForm.getPaso())) {      request.setAttribute(Defs.TIPO_LISTADO_ENTIDADES,Defs.TIPO_LISTADO_ENTIDADES_DESTINO);    }  } else   if (ConfiguracionAccionMultientidadConstants.PASO_SELECCION_OPCION.equals(accionMultientidadForm.getPaso())) {    AccionMultientidadVO accionMultientidadVO=(AccionMultientidadVO)request.getSession().getAttribute(Defs.ACCION_MULTIENTIDAD_WIZARD);    accionMultientidadVO.setOpcionesConfiguracion(accionMultientidadForm.getOpcionesConfiguracion());    if ((accionMultientidadForm.getOpcionesConfiguracion() != null) && (accionMultientidadForm.getOpcionesConfiguracion().length > 0)) {      OpcionConfiguracionVO opcion=(OpcionConfiguracionVO)accionMultientidadForm.getOpcionesConfiguracion()[0];      accionMultientidadForm.setOpcion(opcion.getId());    }  }}  }
class C{  public SequencesWriter(SequenceDataSource source,File outputDir,long sizeLimit,Collection<String> namesToExclude,PrereadType type,boolean compressed,Integer trimQualityThreshold){  mDataSource=source;  mOutputDir=outputDir;  mPrereadType=type;  mSdfId=new SdfId();  if (mDataSource == null) {    throw new NullPointerException("Provided data source was null.");  }  FileUtils.ensureOutputDirectory(mOutputDir);  mSizeLimit=sizeLimit;  mNamesToExclude=namesToExclude == null ? new ArrayList<>() : namesToExclude;  mCompressed=compressed;  if (trimQualityThreshold != null) {    if (System.getProperty("quality-window-size") != null) {      final int windowSize=Integer.parseInt(System.getProperty("quality-window-size"));      mReadTrimmer=new DefaultReadTrimmer(windowSize,trimQualityThreshold);      Diagnostic.userLog("Performing trimming with quality threshold " + trimQualityThreshold + " window size "+ windowSize);    } else {      mReadTrimmer=new BestSumReadTrimmer(trimQualityThreshold);      Diagnostic.userLog("Performing trimming with BestSum, threshold " + trimQualityThreshold);    }  } else {    mReadTrimmer=new NullReadTrimmer();  }}  }
class C{  public T allocate(){  int top=_top.get();  if (top > 0 && _top.compareAndSet(top,top - 1))   return _freeStack.getAndSet(top - 1,null); else   return null;}  }
class C{  public static byte[] decode(byte[] source,int off,int len) throws Base64DecoderException {  return decode(source,off,len,DECODABET);}  }
class C{  public CandlePeriod(ZonedDateTime startOfPeriod){  this(startOfPeriod,startOfPeriod);}  }
class C{  public BadStringOperationException(String message){  this.op=message;}  }
class C{  public DTLZ7(int numberOfVariables,int numberOfObjectives){  super(numberOfVariables,numberOfObjectives);}  }
class C{  public CompiereColor(String type){  if (type == null)   throw new java.lang.IllegalArgumentException(EXCEPTION_TEXT);  if (type.equals(TYPE_FLAT) || type.equals(TYPE_GRADIENT) || type.equals(TYPE_TEXTURE)|| type.equals(TYPE_LINES)) {    m_type=type;  } else   throw new java.lang.IllegalArgumentException("Invalid Type");}  }
class C{  protected void init(FoamApiKeys foamApiKeys){  this.foamApiKeys=foamApiKeys;  services.put(ServiceType.PAGERDUTY,new PagerDuty(context));  services.put(ServiceType.HOCKEYAPP,new HockeyApp(context));  services.put(ServiceType.PAPERTRAIL,new PaperTrail(context));  services.put(ServiceType.LOGENTRIES,new LogEntries(context));  services.put(ServiceType.MIXPANEL,new Mixpanel(context));  services.put(ServiceType.FLURRY,new Flurry(context));  services.put(ServiceType.GOOGLE_ANALYTICS,new GoogleAnalytics(context));  services.put(ServiceType.GRAPHITE,new Graphite(context));}  }
class C{  public static void verifyOptionalAuthInfoForResource(Optional<AuthInfo> authInfo,EppResource resource) throws EppException {  if (authInfo.isPresent()) {    verifyAuthInfoForResource(authInfo.get(),resource);  }}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0x36331294,version=150) public int sceKernelSysEventDispatch(int eventTypeMask,int eventId,String eventName,int param,TPointer32 resultAddr,int breakNonzero,int breakHandler){  return 0;}  }
class C{  public void windowLostFocus(WindowEvent e){}  }
class C{  private BinaryReaderExImpl reader(@Nullable BinaryReaderHandles rCtx,@Nullable ClassLoader ldr,boolean forUnmarshal){  if (ldr == null)   ldr=ctx.configuration().getClassLoader();  return new BinaryReaderExImpl(ctx,BinaryHeapInputStream.create(arr,start),ldr,rCtx,forUnmarshal);}  }
class C{  public EnchantmentType(String enumName,String stringID,int numericID,Predicate<EnchantmentType> isConflicting){  super(enumName);  this.stringID=stringID;  this.numericID=(short)numericID;  this.isConflicting=isConflicting;}  }
class C{  public void registerComponents(ComponentFactory[] components){  for (  ComponentFactory component : components) {    if (!hasComponent(component)) {      addComponent(component.createOptions(this));    }  }}  }
class C{  public static <T>HashSet<T> newHashSet(int size){  return new HashSet<T>(size);}  }
class C{  public void testTicket1363a(){  final JoinGroupNode jgn1a=new JoinGroupNode();  final JoinGroupNode jgn1b=new JoinGroupNode();  jgn1a.addChild(stmtPatternWithVar("y1"));  jgn1b.addChild(stmtPatternWithVar("y1"));  final JoinGroupNode jgn2a=new JoinGroupNode();  final JoinGroupNode jgn2b=new JoinGroupNode();  jgn2a.addChild(stmtPatternWithVar("y2"));  jgn2b.addChild(stmtPatternWithVar("y2"));  final UnionNode unA=new UnionNode();  unA.addChild(jgn1a);  unA.addChild(jgn2a);  final UnionNode unB=new UnionNode();  unB.addChild(jgn1b);  unB.addChild(jgn2b);  new Helper(){{      given=select(varNode(x),where(unA,subqueryWithVars("x1","x2")));      expected=select(varNode(x),where(unB,subqueryWithVars("x1","x2")));    }  }.test();}  }
class C{  public boolean isRTPMarkerSet(){  return (flags & FLAG_RTP_MARKER) != 0;}  }
class C{  protected IoBuffer encodeNotifyOrInvoke(Notify invoke,RTMP rtmp){  IoBuffer out=IoBuffer.allocate(1024);  out.setAutoExpand(true);  encodeNotifyOrInvoke(out,invoke,rtmp);  return out;}  }
class C{  public double pop(){  int numObjs=this.numObjs;  if (numObjs <= 0)   return 0;  double ret=objs[--numObjs];  this.numObjs=numObjs;  return ret;}  }
class C{  public int onDelete(HeaderSet request,HeaderSet reply){  return ResponseCodes.OBEX_HTTP_NOT_IMPLEMENTED;}  }
class C{  public boolean isDestroyed(){  return getState().isDestroyed();}  }
class C{  protected void clearEvents(){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:54.186 -0500",hash_original_method="E237E117068718AE5F81C4213860014E",hash_generated_method="EC8549F6CD04C333D2B4BB4092FBBE60") public ServiceState(Parcel in){  mState=in.readInt();  mRoaming=in.readInt() != 0;  mOperatorAlphaLong=in.readString();  mOperatorAlphaShort=in.readString();  mOperatorNumeric=in.readString();  mIsManualNetworkSelection=in.readInt() != 0;  mRadioTechnology=in.readInt();  mCssIndicator=(in.readInt() != 0);  mNetworkId=in.readInt();  mSystemId=in.readInt();  mCdmaRoamingIndicator=in.readInt();  mCdmaDefaultRoamingIndicator=in.readInt();  mCdmaEriIconIndex=in.readInt();  mCdmaEriIconMode=in.readInt();  mIsEmergencyOnly=in.readInt() != 0;}  }
class C{  @Override public InvitationObject copy(){  return new InvitationObject(this);}  }
class C{  public static Object sum(Object[] self){  return sum(toList(self),null,true);}  }
class C{  public double value(int attIndex){  return m_AttValues[attIndex];}  }
class C{  public int reset(String tableName){  return reset(tableName,0);}  }
class C{  public static boolean writeFile(File file,InputStream is){  return writeFile(file,is,false);}  }
class C{  public PermissionRequestBuilder(final String requestUrl,final IOneDriveClient client,final List<Option> options){  super(requestUrl,client,options);}  }
class C{  public EmptyRegionFunctionException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String streamsHeader="";  String outputHeader=null;  int row, col, x, y;  int progress=0;  double myPointer, neighbourPointer;  int i;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  double[] outflowingVals=new double[]{1,2,4,8,16,32,64,128};  boolean streamsSpecified=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  if (!args[1].toLowerCase().equals("not specified")) {    streamsHeader=args[1];    streamsSpecified=true;  }  outputHeader=args[2];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster pntr=new WhiteboxRaster(inputHeader,"r");    int rows=pntr.getNumberRows();    int cols=pntr.getNumberColumns();    double noData=pntr.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.INTEGER,noData);    output.setDataScale(WhiteboxRaster.DataScale.BOOLEAN);    output.setPreferredPalette("spectrum_black_background.pal");    boolean isParallel;    if (!streamsSpecified) {      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          myPointer=pntr.getValue(row,col);          if (myPointer != noData) {            isParallel=false;            for (i=0; i < 8; i++) {              if (myPointer != outflowingVals[i]) {                neighbourPointer=pntr.getValue(row + dY[i],col + dX[i]);                if (neighbourPointer == myPointer && neighbourPointer != inflowingVals[i]) {                  isParallel=true;                  break;                }              }            }            if (isParallel) {              output.setValue(row,col,1);            } else {              output.setValue(row,col,0);            }          } else {            output.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }    } else {      WhiteboxRaster streams=new WhiteboxRaster(streamsHeader,"r");      if (streams.getNumberRows() != rows || streams.getNumberColumns() != cols) {        showFeedback("The flow pointer and streams file must have the same number " + "\nof rows and columns.");        return;      }      double streamsNoData=streams.getNoDataValue();      double streamVal, neighbourStreamVal;      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          myPointer=pntr.getValue(row,col);          streamVal=streams.getValue(row,col);          if (myPointer != noData && streamVal != streamsNoData && streamVal > 0) {            isParallel=false;            for (i=0; i < 8; i++) {              if (myPointer != outflowingVals[i]) {                neighbourPointer=pntr.getValue(row + dY[i],col + dX[i]);                neighbourStreamVal=streams.getValue(row + dY[i],col + dX[i]);                if (neighbourPointer == myPointer && neighbourPointer != inflowingVals[i] && neighbourStreamVal > 0) {                  isParallel=true;                  break;                }              }            }            if (isParallel) {              output.setValue(row,col,1);            } else {              output.setValue(row,col,0);            }          } else {            output.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }      streams.close();    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void addComponent(Component cmp){  contentPane.addComponent(cmp);}  }
class C{  public static Map<Short,String> generateMapOfValueNameShort(Class<?> clazz){  Map<Short,String> valuesName=new HashMap<>();  try {    for (    Field field : clazz.getFields()) {      if (field.getType().isPrimitive()) {        valuesName.put((Short)field.get(short.class),field.getName());      }    }  } catch (  IllegalAccessException e) {    e.printStackTrace();  }  return valuesName;}  }
class C{  public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data,int width,int height){  Rect rect=getFramingRectInPreview();  if (rect == null) {    return null;  }  return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height(),false);}  }
class C{  public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>();  newVector.addElement(new Option("\tThe construction method to employ. Either TopDown or BottomUp\n" + "\t(default: weka.core.TopDownConstructor)","C",1,"-C <classname and options>"));  newVector.addAll(Collections.list(super.listOptions()));  return newVector.elements();}  }
class C{  void sendMessageToHandlerNoControllerReset(List<OFMessage> messages) throws Exception {  setupMessageEvent(messages);  handler.messageReceived(ctx,messageEvent);}  }
class C{  public void resumeJob(JobKey jobKey) throws SchedulerException {  try {    getRemoteScheduler().resumeJob(jobKey);  } catch (  RemoteException re) {    throw invalidateHandleCreateException("Error communicating with remote scheduler.",re);  }}  }
class C{  private Bitmap processBitmap(int resId){  if (BuildConfig.DEBUG) {    Log.d(TAG,"processBitmap - " + resId);  }  return decodeSampledBitmapFromResource(mResources,resId,mImageWidth,mImageHeight,getImageCache());}  }
class C{  public final boolean isItemEnabled(final int index){  return adapter.isItemEnabled(index);}  }
class C{  private final void validateSurface(SunGraphics2D sg2d){  XRSurfaceData xrsd=(XRSurfaceData)sg2d.surfaceData;  xrsd.validateAsDestination(sg2d,sg2d.getCompClip());  xrsd.maskBuffer.validateCompositeState(sg2d.composite,sg2d.transform,sg2d.paint,sg2d);}  }
class C{  public static UnManagedProtectionSet checkUnManagedProtectionSetExistsInDB(DbClient dbClient,String nativeGuid) throws IOException {  List<UnManagedProtectionSet> cgs=CustomQueryUtility.getUnManagedProtectionSetByNativeGuid(dbClient,nativeGuid);  Iterator<UnManagedProtectionSet> cgsItr=cgs.iterator();  if (cgsItr.hasNext()) {    return cgsItr.next();  }  return null;}  }
class C{  public ProgressDialog showProgressDialog(Context context,String title,String message){  ProgressDialog progressDialog=new ProgressDialog(context);  progressDialog.setTitle(title);  progressDialog.setMessage(message);  progressDialog.setCanceledOnTouchOutside(false);  progressDialog.show();  return progressDialog;}  }
class C{  public NotExpression(){}  }
class C{  @Nullable public GridCacheMvccCandidate candidate(GridCacheVersion ver){  GridCacheMvccCandidate cand=candidate(locs,ver);  if (cand == null)   cand=candidate(rmts,ver);  return cand;}  }
class C{  private void handleInputChange(PropertyChangeEvent evt){  Object newValue=evt.getNewValue();  Object oldValue=evt.getOldValue();  if (!((oldValue != null) ^ (newValue != null))) {    throw new IllegalStateException("Exactly one of old or new values must be non-null for INPUT event");  }  if (newValue != null) {    ConnectionEditPart editPart=createOrFindConnection(newValue);    int modelIndex=getModelTargetConnections().indexOf(newValue);    addTargetConnection(editPart,modelIndex);  } else {    List<?> children=getTargetConnections();    ConnectionEditPart partToRemove=null;    for (Iterator<?> iter=children.iterator(); iter.hasNext(); ) {      ConnectionEditPart part=(ConnectionEditPart)iter.next();      if (part.getModel() == oldValue) {        partToRemove=part;        break;      }    }    if (partToRemove != null)     removeTargetConnection(partToRemove);  }  getContentPane().revalidate();}  }
class C{  public boolean isDigest256(){  return isDigest256;}  }
class C{  public FastIntBuffer(){  this.minChunkLen=1024;}  }
class C{  public JSONArray put(Object value){  this.myArrayList.add(value);  return this;}  }
class C{  @Override protected EClass eStaticClass(){  return SexecPackage.Literals.EXECUTION_SYNCHRONIZATION;}  }
class C{  public byte[] encode(byte[] bytes){  return encodeUrl(WWW_FORM_URL,bytes);}  }
class C{  public boolean isAtLeast(int major,int minor,int buildNumber){  return this.compareTo(new VersionNumber(major,minor,buildNumber)) >= 0;}  }
class C{  public static boolean hasText(@Nullable AccessibilityNodeInfoCompat node){  if (node == null) {    return false;  }  return !TextUtils.isEmpty(node.getText()) || !TextUtils.isEmpty(node.getContentDescription());}  }
class C{  public void recompilationCompleted(CompilationPlan plan){  if (Controller.options.LOGGING_LEVEL >= 2) {    printlnToLogWithTimePrefix("Recompiled (at level " + plan.options.getOptLevel() + ") "+ plan.method);  }}  }
class C{  public MySqlLeaveStatement parseLeave(){  accept(Token.LEAVE);  MySqlLeaveStatement leaveStmt=new MySqlLeaveStatement();  leaveStmt.setLabelName(exprParser.name().getSimpleName());  accept(Token.SEMI);  return leaveStmt;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof CenterArrangement)) {    return false;  }  return true;}  }
class C{  public static String concatenateName(String name1,String name2){  StringBuffer buf=new StringBuffer();  if (name1 != null && name1.length() > 0) {    buf.append(name1);  }  if (name2 != null && name2.length() > 0) {    if (buf.length() > 0) {      buf.append('.');    }    buf.append(name2);  }  return buf.toString();}  }
class C{  public static Size constrainToAspectRatio(Size size,float aspectRatio){  float width=size.getWidth();  float height=size.getHeight();  float currentAspectRatio=width * 1.0f / height;  if (currentAspectRatio > aspectRatio) {    if (width > height) {      width=height * aspectRatio;    } else {      height=width / aspectRatio;    }  } else   if (currentAspectRatio < aspectRatio) {    if (width < height) {      width=height * aspectRatio;    } else {      height=width / aspectRatio;    }  }  return new Size((int)width,(int)height);}  }
class C{  public Matrix4 trn(Vector3 vector){  val[M03]+=vector.x;  val[M13]+=vector.y;  val[M23]+=vector.z;  return this;}  }
class C{  boolean deleteAll(File file){  if (file.isDirectory()) {    for (    File f : file.listFiles())     deleteAll(f);  }  return file.delete();}  }
class C{  public static String unescapeString(String s){  int backSlashIdx=s.indexOf('\\');  if (backSlashIdx == -1) {    return s;  }  int startIdx=0;  int sLength=s.length();  StringBuilder sb=new StringBuilder(sLength);  while (backSlashIdx != -1) {    sb.append(s.substring(startIdx,backSlashIdx));    if (backSlashIdx + 1 >= sLength) {      throw new IllegalArgumentException("Unescaped backslash in: " + s);    }    char c=s.charAt(backSlashIdx + 1);    if (c == 't') {      sb.append('\t');      startIdx=backSlashIdx + 2;    } else     if (c == 'b') {      sb.append('\b');      startIdx=backSlashIdx + 2;    } else     if (c == 'n') {      sb.append('\n');      startIdx=backSlashIdx + 2;    } else     if (c == 'r') {      sb.append('\r');      startIdx=backSlashIdx + 2;    } else     if (c == 'f') {      sb.append('\f');      startIdx=backSlashIdx + 2;    } else     if (c == '"') {      sb.append('"');      startIdx=backSlashIdx + 2;    } else     if (c == '\'') {      sb.append('\'');      startIdx=backSlashIdx + 2;    } else     if (c == '\\') {      sb.append('\\');      startIdx=backSlashIdx + 2;    } else     if (c == 'u') {      if (backSlashIdx + 5 >= sLength) {        throw new IllegalArgumentException("Incomplete Unicode escape sequence in: " + s);      }      String xx=s.substring(backSlashIdx + 2,backSlashIdx + 6);      try {        final int codePoint=Integer.parseInt(xx,16);        sb.append(Character.toChars(codePoint));        startIdx=backSlashIdx + 6;      } catch (      NumberFormatException e) {        throw new IllegalArgumentException("Illegal Unicode escape sequence '\\u" + xx + "' in: "+ s);      }    } else     if (c == 'U') {      if (backSlashIdx + 9 >= sLength) {        throw new IllegalArgumentException("Incomplete Unicode escape sequence in: " + s);      }      String xx=s.substring(backSlashIdx + 2,backSlashIdx + 10);      try {        final int codePoint=Integer.parseInt(xx,16);        sb.append(Character.toChars(codePoint));        startIdx=backSlashIdx + 10;      } catch (      NumberFormatException e) {        throw new IllegalArgumentException("Illegal Unicode escape sequence '\\U" + xx + "' in: "+ s);      }    } else {      throw new IllegalArgumentException("Unescaped backslash in: " + s);    }    backSlashIdx=s.indexOf('\\',startIdx);  }  sb.append(s.substring(startIdx));  return sb.toString();}  }
class C{  public CarrierIdToEntityConverter(final GenericDAO<Carrier,Long> carrierLongGenericDAO){  super(carrierLongGenericDAO);}  }
class C{  public Boolean isUseAutoDetect(){  return useAutoDetect;}  }
class C{  public SQLTransientConnectionException(){}  }
class C{  public Intent putExtra(String name,byte[] value){  if (mExtras == null) {    mExtras=new Bundle();  }  mExtras.putByteArray(name,value);  return this;}  }
class C{  public ScreenAnnotationBalloon(String text,Point point){  super(text);  if (point == null) {    String message=Logging.getMessage("nullValue.PositionIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.screenPoint=point;  this.annotation=this.createAnnotation();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.318 -0500",hash_original_method="C42E665E40D735B4BFD234363CD8C238",hash_generated_method="6FE2D9C0A2B717CDE23FE0708B3F64F1") public JoinHeader createJoinHeader(String callId,String toTag,String fromTag) throws ParseException {  Join join=new Join();  join.setCallId(callId);  join.setFromTag(fromTag);  join.setToTag(toTag);  return join;}  }
class C{  @Override protected void sendFunctionGroup2(){  DCCppMessage msg=DCCppMessage.makeFunctionGroup2OpsMsg(this.getDccAddress(),f5,f6,f7,f8);  queueMessage(msg,THROTTLEIDLE);}  }
class C{  public GenericEntry createMailMonitor(String sourceUser,MailMonitor mailMonitor) throws AppsForYourDomainException, MalformedURLException, IOException, ServiceException {  GenericEntry entry=mailMonitor.toGenericEntry();  return insert(new URL(BASE_URL + "mail/monitor/" + domain+ "/"+ sourceUser),entry);}  }
class C{  public boolean removeEdge(Edge edge){  int i=nodesHash.get(edge.getNode1());  int j=nodesHash.get(edge.getNode2());  graphMatrix[i][j]=0;  graphMatrix[j][i]=0;  return true;}  }
class C{  public void updateAvailabilityIndicators(){  for (  String string : availabilityIndicators.keySet()) {    CommandTarget commandTarget=commands.get(string);    if (commandTarget != null) {      commandTarget.setAvailabilityIndicator(availabilityIndicators.get(string));    }  }}  }
class C{  private static LinkedHashSet<FunctionBlock> findPassedFunctions(final Callgraph callgraph,final Function startFunction,final Function targetFunction){  final FunctionBlock sourceCallgraphNode=findBlock(callgraph,startFunction);  final FunctionBlock targetCallgraphNode=findBlock(callgraph,targetFunction);  Logger.info("Source block: %s\n",sourceCallgraphNode.getFunction().getName());  Logger.info("Target block: %s\n",targetCallgraphNode.getFunction().getName());  final Collection<FunctionBlock> successorFunctions=GraphAlgorithms.getSuccessors(sourceCallgraphNode);  final Collection<FunctionBlock> predecessorFunctions=GraphAlgorithms.getPredecessors(targetCallgraphNode);  final LinkedHashSet<FunctionBlock> sharedFunctions=new LinkedHashSet<FunctionBlock>(successorFunctions);  sharedFunctions.retainAll(predecessorFunctions);  sharedFunctions.add(sourceCallgraphNode);  sharedFunctions.add(targetCallgraphNode);  return sharedFunctions;}  }
class C{  public void flush(){synchronized (mDiskCacheLock) {    if (mDiskLruCache != null) {      try {        mDiskLruCache.flush();      } catch (      Throwable e) {        LogUtils.e(e.getMessage(),e);      }    }  }}  }
class C{  public List<String[]> readAll() throws IOException {  List<String[]> allElements=new ArrayList<String[]>();  while (hasNext) {    String[] nextLineAsTokens=readNext();    if (nextLineAsTokens != null) {      allElements.add(nextLineAsTokens);    }  }  return allElements;}  }
class C{  public static String toString(URI uri,String encoding) throws IOException {  return toString(uri.toURL(),encoding);}  }
class C{  public long readVarLong(){  long x=data[pos++];  if (x >= 0) {    return x;  }  x&=0x7f;  for (int s=7; ; s+=7) {    long b=data[pos++];    x|=(b & 0x7f) << s;    if (b >= 0) {      return x;    }  }}  }
class C{  @Override public void doInitialize(UimaContext aContext) throws ResourceInitializationException {  confidenceThreshold=ConfigUtils.stringToFloat(confidenceThresholdString,0.0f);}  }
class C{  public static void copyView(final JFrame parent,final INaviModule module,final INaviView view){  Preconditions.checkNotNull(parent,"IE01832: Parent argument can not be null");  Preconditions.checkNotNull(module,"IE01833: Module argument can not be null");  Preconditions.checkNotNull(view,"IE01834: View argument can not be null");  if (module.getContent().getViewContainer().hasView(view)) {    if (!view.isLoaded()) {      try {        view.load();      } catch (      final CouldntLoadDataException e) {        CUtilityFunctions.logException(e);        final String innerMessage="E00133: View could not be copied";        final String innerDescription=CUtilityFunctions.createDescription(String.format("The view '%s' could not be copied because it could not be loaded.",view.getName()),new String[]{"There was a problem with the database connection."},new String[]{"The new view was not created."});        NaviErrorDialog.show(parent,innerMessage,innerDescription,e);        return;      }catch (      CPartialLoadException|LoadCancelledException e) {        CUtilityFunctions.logException(e);        return;      }    }    final CView newView=module.getContent().getViewContainer().createView(String.format("Copy of %s",view.getName()),null);    CViewInserter.insertView(view,newView);  }}  }
class C{  private JSONWriter append(String string) throws JSONException {  if (string == null) {    throw new JSONException("Null pointer");  }  if (this.mode == 'o' || this.mode == 'a') {    try {      if (this.comma && this.mode == 'a') {        this.writer.write(',');      }      this.writer.write(string);    } catch (    IOException e) {      throw new JSONException(e);    }    if (this.mode == 'o') {      this.mode='k';    }    this.comma=true;    return this;  }  throw new JSONException("Value out of sequence.");}  }
class C{  public static ComponentUI createUI(JComponent c){  return new WindowsPasswordFieldUI();}  }
class C{  public byte[] readBytes(int length) throws IOException {  byte[] bytes=new byte[length];  readBytes(bytes,0,length);  return bytes;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(notationgetnotationname.class,args);}  }
class C{  public void remove(Comparable x){  throw new UnsupportedOperationException();}  }
class C{  private void historyBack(){  if (historyPosition > 0 && historyPosition <= history.size()) {    historyPosition--;    String text=history.get(historyPosition);    if (text != null) {      setText(text);      historyTextEdited=false;    }  }}  }
class C{  private String nextLiteral(boolean assignOffsetsOnly) throws IOException {  StringBuilder builder=null;  valuePos=-1;  valueLength=0;  int i=0;  findNonLiteralCharacter:   while (true) {    for (; pos + i < limit; i++) {switch (buffer[pos + i]) {case '/':case '\\':case ';':case '#':case '=':        checkLenient();case '{':case '}':case '[':case ']':case ':':case ',':case ' ':case '\t':case '\f':case '\r':case '\n':      break findNonLiteralCharacter;  }}if (i < buffer.length) {  if (fillBuffer(i + 1)) {    continue;  } else {    buffer[limit]='\0';    break;  }}if (builder == null) {  builder=new StringBuilder();}builder.append(buffer,pos,i);valueLength+=i;pos+=i;i=0;if (!fillBuffer(1)) {  break;}}String result;if (assignOffsetsOnly && builder == null) {valuePos=pos;result=null;} else if (skipping) {result="skipped!";} else if (builder == null) {result=stringPool.get(buffer,pos,i);} else {builder.append(buffer,pos,i);result=builder.toString();}valueLength+=i;pos+=i;return result;}  }
class C{  protected boolean isFullDetail(final Boolean fullDetailRequest){  if (fullDetailRequest == null) {    return defaultFullDetail;  }  return fullDetailRequest.booleanValue();}  }
class C{  private static boolean isSeparator(char ch){  return ch == UNIX_SEPARATOR || ch == WINDOWS_SEPARATOR;}  }
class C{  public static CertificateToken loadCertificateFromBase64EncodedString(final String base64Encoded){  final byte[] bytes=Base64.decodeBase64(base64Encoded);  return loadCertificate(bytes);}  }
class C{  public boolean is2D(){  return true;}  }
class C{  public static String join(Iterable<String> input){  StringBuilder builder=new StringBuilder();  for (  String item : input) {    builder.append(item).append(", ");  }  if (builder.length() >= 2) {    builder.setLength(builder.length() - 2);  }  return builder.toString();}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.store=new TreeMap();  int keyCount=stream.readInt();  for (int i=0; i < keyCount; i++) {    Comparable key=(Comparable)stream.readObject();    Stroke stroke=SerialUtilities.readStroke(stream);    this.store.put(key,stroke);  }}  }
class C{  private static void saveToDisk(String vcard,String filename,String path,Context context){  if (TextUtils.isEmpty(vcard) || TextUtils.isEmpty(filename) || context == null) {    return;  }  File peerProfilesFile=new File(path);  if (!peerProfilesFile.exists()) {    peerProfilesFile.mkdirs();  }  FileOutputStream outputStream;  try {    File outputFile=new File(path + File.separator + filename);    outputStream=new FileOutputStream(outputFile);    outputStream.write(vcard.getBytes());    outputStream.close();    Log.d(TAG,"vcard in saveToDisk " + vcard);  } catch (  Exception e) {    Log.e(TAG,"Error while saving VCard to disk",e);  }}  }
class C{  private static boolean doEquals(DerValue d1,DerValue d2){synchronized (d1.data) {synchronized (d2.data) {      d1.data.reset();      d2.data.reset();      return d1.buffer.equals(d2.buffer);    }  }}  }
class C{  private void displayText(){  String output="";  for (  Integer e : list)   output+=e + " ";  textArea.setText(output);  textField.setText("");}  }
class C{  public static IndexType createScan(boolean persistent){  IndexType type=new IndexType();  type.persistent=persistent;  type.scan=true;  return type;}  }
class C{  private IgniteBiTuple<String,Integer> hostPort(String connStr,String hostPortStr) throws IgniteCheckedException {  String[] tokens=hostPortStr.split(":",-1);  String host=tokens[0];  if (F.isEmpty(host))   host=LOCALHOST;  int port;  if (tokens.length == 1)   port=IgfsIpcEndpointConfiguration.DFLT_PORT; else   if (tokens.length == 2) {    String portStr=tokens[1];    try {      port=Integer.valueOf(portStr);      if (port < 0 || port > 65535)       throw new IgniteCheckedException("Invalid port number: " + connStr);    } catch (    NumberFormatException e) {      throw new IgniteCheckedException("Invalid port number: " + connStr);    }  } else   throw new IgniteCheckedException("Invalid connection string format: " + connStr);  return F.t(host,port);}  }
class C{  public Y eq(X value){  return add(" = ?",value);}  }
class C{  public boolean isTurningToDouble(int stage){  return stage == doubleStage;}  }
class C{  public void incrementSent(){  this.sentPackets++;}  }
class C{  public List<Integer> orderNodesByDegree(Bag people){  Bag friends=new Bag();  int[] degreeArray=new int[people.numObjs];  TreeMap<Double,Object> sorted_map=new TreeMap<Double,Object>();  int count=0;  for (  Object person : people) {    socialNetwork.getEdges(person,friends);    degreeArray[count]=friends.numObjs;    count+=1;  }  TreeMap<Integer,List<Integer>> map=new TreeMap<Integer,List<Integer>>();  for (int i=0; i < degreeArray.length; i++) {    List<Integer> ind=map.get(degreeArray[i]);    if (ind == null) {      ind=new ArrayList<Integer>();      map.put(degreeArray[i],ind);    }    ind.add(i);  }  List<Integer> indices=new ArrayList<Integer>();  for (  List<Integer> arr : map.values()) {    indices.addAll(arr);  }  return indices;}  }
class C{  public Address phone(Phone phone){  this.phone=phone;  return this;}  }
class C{  @SuppressWarnings("deprecation") public void testUPDATEWithDiffKeysValuesCount() throws Exception {  OptimizeUpdatesFilter filter=new OptimizeUpdatesFilter();  OneRowChange oneRowChange=generateRowChange("foo","bar",RowChangeData.ActionType.UPDATE);  oneRowChange.setColumnSpec(generateSpec(oneRowChange));  oneRowChange.setColumnValues(generateValues(oneRowChange,333,"two","const"));  ArrayList<ColumnSpec> keySpec=generateSpec(oneRowChange);  keySpec.remove(keySpec.size() - 1);  oneRowChange.setKeySpec(keySpec);  ArrayList<ArrayList<ColumnVal>> keyValues=generateValues(oneRowChange,333,"two","const");  for (Iterator<ArrayList<ColumnVal>> iterator=keyValues.iterator(); iterator.hasNext(); ) {    ArrayList<ColumnVal> arrayList=(ArrayList<ColumnVal>)iterator.next();    arrayList.remove(arrayList.size() - 1);  }  oneRowChange.setKeyValues(keyValues);  ReplDBMSEvent event=generateReplDBMSEvent(oneRowChange);  filter.filter(event);  RowChangeData rdata=(RowChangeData)event.getDBMSEvent().getData().get(0);  OneRowChange orc=rdata.getRowChanges().get(0);  System.out.println(orc.getKeySpec());  System.out.println(orc.getKeyValues());  System.out.println(orc.getColumnSpec());  System.out.println(orc.getColumnValues());  Assert.assertEquals("Two column specs were removed",1,orc.getColumnSpec().size());  Assert.assertEquals("Two column values were removed",1,orc.getColumnValues().get(0).size());  Assert.assertEquals("All key specs are in place",2,orc.getKeySpec().size());  Assert.assertEquals("All key values are in place",2,orc.getKeyValues().get(0).size());}  }
class C{  public void closeEntry() throws IOException {  ensureOpen();  if (current != null) {    ZipEntry e=current.entry;switch (e.method) {case DEFLATED:      def.finish();    while (!def.finished()) {      deflate();    }  if ((e.flag & 8) == 0) {    if (e.size != def.getBytesRead()) {      throw new ZipException("invalid entry size (expected " + e.size + " but got "+ def.getBytesRead()+ " bytes)");    }    if (e.csize != def.getBytesWritten()) {      throw new ZipException("invalid entry compressed size (expected " + e.csize + " but got "+ def.getBytesWritten()+ " bytes)");    }    if (e.crc != crc.getValue()) {      throw new ZipException("invalid entry CRC-32 (expected 0x" + Long.toHexString(e.crc) + " but got 0x"+ Long.toHexString(crc.getValue())+ ")");    }  } else {    e.size=def.getBytesRead();    e.csize=def.getBytesWritten();    e.crc=crc.getValue();    writeEXT(e);  }def.reset();written+=e.csize;break;case STORED:if (e.size != written - locoff) {throw new ZipException("invalid entry size (expected " + e.size + " but got "+ (written - locoff)+ " bytes)");}if (e.crc != crc.getValue()) {throw new ZipException("invalid entry crc-32 (expected 0x" + Long.toHexString(e.crc) + " but got 0x"+ Long.toHexString(crc.getValue())+ ")");}break;default :throw new ZipException("invalid compression method");}crc.reset();current=null;}}  }
class C{  public static void incorrectBodyDefinition(String methodName,String className){  throw new DynamicConversionBodyException(MSG.INSTANCE.message(dynamicConversionBodyException,methodName,className));}  }
class C{  private void handleSendSubject(Intent intent){  AppLog.v(this,"handleSendSubject()");  try {    setSharedTexts(intent.getStringExtra(Intent.EXTRA_SUBJECT),intent.getStringExtra(Intent.EXTRA_TEXT));    openDiasporaUrl(urls.getNewPostUrl());  } catch (  Exception e) {    AppLog.e(this,e.toString());  }}  }
class C{  public static void organizeDistribution(final double[] probabilities,final boolean allowAllZeros){  double sum=0.0;  if (probabilities.length == 0)   throw new ArithmeticException("Distribution has no elements");  for (int x=0; x < probabilities.length; x++) {    if (probabilities[x] < 0.0)     throw new ArithmeticException("Distribution has negative probabilities");    sum+=probabilities[x];  }  if (sum == 0.0)   if (!allowAllZeros)   throw new ArithmeticException("Distribution has all zero probabilities"); else {    for (int x=0; x < probabilities.length; x++)     probabilities[x]=1.0;    sum=probabilities.length;  }  for (int x=0; x < probabilities.length; x++)   probabilities[x]/=sum;  sum=0.0;  for (int x=0; x < probabilities.length; x++) {    sum+=probabilities[x];    probabilities[x]=sum;  }  int x;  for (x=probabilities.length - 1; x > 0; x--)   if (probabilities[x] == probabilities[x - 1])   probabilities[x]=1.0; else   break;  probabilities[x]=1.0;}  }
class C{  static void validateAsciiPostalInfo(@Nullable PostalInfo internationalized) throws EppException {  if (internationalized != null) {    Preconditions.checkState(INTERNATIONALIZED.equals(internationalized.getType()));    ContactAddress address=internationalized.getAddress();    Set<String> fields=Sets.newHashSet(internationalized.getName(),internationalized.getOrg(),address.getCity(),address.getCountryCode(),address.getState(),address.getZip());    fields.addAll(address.getStreet());    for (    String field : fields) {      if (field != null && !CharMatcher.ascii().matchesAllOf(field)) {        throw new BadInternationalizedPostalInfoException();      }    }  }}  }
class C{  public static void make(Project project,MessageType type,String text){  StatusBar statusBar=WindowManager.getInstance().getStatusBar(project);  JBPopupFactory.getInstance().createHtmlTextBalloonBuilder(text,type,null).setFadeoutTime(7500).createBalloon().show(RelativePoint.getCenterOf(statusBar.getComponent()),Balloon.Position.atRight);}  }
class C{  public WizardPreview(Composite parent,int style){  super(parent,style);  this.setLayout(GridLayoutFactory.fillDefaults().numColumns(1).extendedMargins(0,0,0,0).create());  createEditor();  createInfoBar();  inactiveColor=createInactiveColor();  this.sourceViewer.getTextWidget().setData("org.eclipse.e4.ui.css.CssClassName","MPart active");}  }
class C{  public boolean endsWith(Name n){  if (n instanceof CompoundName) {    return (impl.endsWith(n.size(),n.getAll()));  } else {    return false;  }}  }
class C{  private void cmd_selection(Object source){  for (int i=0; i < m_selectionList.size(); i++) {    if (source == m_selectionList.get(i)) {      boolean selected=isSelectionSelected(source);      Decimalbox qty=m_qtyList.get(i);      qty.setReadonly(!selected);      return;    }  }  log.log(Level.SEVERE,"not found - " + source);}  }
class C{  public ResourceList<VirtualSubnet> list(String parentId,String parentKind,Optional<String> name,Optional<Integer> pageSize) throws ExternalException {  final ImmutableMap.Builder<String,String> termsBuilder=new ImmutableMap.Builder<>();  if (parentId != null) {    termsBuilder.put("parentId",parentId);  }  if (parentKind != null) {    termsBuilder.put("parentKind",parentKind);  }  if (name.isPresent()) {    termsBuilder.put("name",name.get());  }  ImmutableMap<String,String> terms=termsBuilder.build();  ServiceDocumentQueryResult queryResult=cloudStoreClient.queryDocuments(VirtualNetworkService.State.class,terms,pageSize,true);  return PaginationUtils.xenonQueryResultToResourceList(VirtualNetworkService.State.class,queryResult,null);}  }
class C{  private static int computeInitialSampleSize(BitmapFactory.Options options,int minSideLength,int maxNumOfPixels){  double w=options.outWidth;  double h=options.outHeight;  int lowerBound=(maxNumOfPixels == -1) ? 1 : (int)Math.ceil(Math.sqrt(w * h / maxNumOfPixels));  int upperBound=(minSideLength == -1) ? 128 : (int)Math.min(Math.floor(w / minSideLength),Math.floor(h / minSideLength));  if (upperBound < lowerBound) {    return lowerBound;  }  if ((maxNumOfPixels == -1) && (minSideLength == -1)) {    return 1;  } else   if (minSideLength == -1) {    return lowerBound;  } else {    return upperBound;  }}  }
class C{  public void addActionListener(ActionListener l){  listeners.addElement(l);}  }
class C{  private void printSpace(int n) throws IOException {  final java.io.Writer writer=m_writer;  for (int i=0; i < n; i++) {    writer.write(' ');  }}  }
class C{  public ListRendererEditor(EditableResources res,com.codename1.ui.Component parentList,String currentUI){  initComponents();  try {    help.setPage(getClass().getResource("/help/renderer.html"));  } catch (  IOException ex) {    ex.printStackTrace();  }  this.parentList=parentList;  this.res=res;  Vector names=new Vector();  for (  String uiName : res.getUIResourceNames()) {    if (uiName.equals(currentUI)) {      continue;    }    com.codename1.ui.util.UIBuilderOverride b=new com.codename1.ui.util.UIBuilderOverride();    if (!(b.createContainer(res,uiName) instanceof com.codename1.ui.Form)) {      names.addElement(uiName);    }  }  if (names.size() == 0) {    errorMessage.setText("<html><body><b>You must create Container objects to use as renderers</b></body></html>");    unselectedEven.setEnabled(false);    selectedEven.setEnabled(false);    unselected.setEnabled(false);    selected.setEnabled(false);    type.setEnabled(false);    return;  }  Collections.sort(names,String.CASE_INSENSITIVE_ORDER);  selected.setModel(new DefaultComboBoxModel(names));  unselected.setModel(new DefaultComboBoxModel(names));  selectedEven.setModel(new DefaultComboBoxModel(names));  unselectedEven.setModel(new DefaultComboBoxModel(names));  Object r;  if (parentList instanceof com.codename1.ui.List) {    r=(com.codename1.ui.list.CellRenderer)((com.codename1.ui.List)parentList).getRenderer();  } else {    r=((com.codename1.ui.list.ContainerList)parentList).getRenderer();  }  if (r instanceof com.codename1.ui.list.GenericListCellRenderer) {    com.codename1.ui.list.GenericListCellRenderer g=(com.codename1.ui.list.GenericListCellRenderer)r;    String selectedRendererName=g.getSelected().getName();    String unselectedRendererName=g.getUnselected().getName();    selected.setSelectedItem(selectedRendererName);    unselected.setSelectedItem(unselectedRendererName);    if (g.getSelectedEven() != null && g.getUnselectedEven() != null) {      selectedEven.setSelectedItem(g.getSelectedEven().getName());      unselectedEven.setSelectedItem(g.getUnselectedEven().getName());      type.setSelectedIndex(2);    } else {      unselectedEven.setEnabled(false);      selectedEven.setEnabled(false);      if (!selectedRendererName.equals(unselectedRendererName)) {        type.setSelectedIndex(1);      } else {        unselected.setEnabled(false);      }    }  } else {    unselectedEven.setEnabled(false);    selectedEven.setEnabled(false);    unselected.setEnabled(false);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdataindexsizeerrreplacedataoffsetnegative.class,args);}  }
class C{  int groupFromChildId(long childId){  if (!mDataValid)   return -1;  int group=-1;  for (mCursor.moveToFirst(); !mCursor.isAfterLast(); mCursor.moveToNext()) {    if (getLong(mIdIndex) == childId) {      int bin=mDateSorter.getIndex(getLong(mDateIndex));      if (DateSorter.DAY_COUNT == mNumberOfBins) {        return bin;      }      group=0;      for (int i=0; i < bin; i++) {        if (mItemMap[i] != 0) {          group++;        }      }      break;    }  }  return group;}  }
class C{  void cancel(){  isCancelled=true;}  }
class C{  public static String validateConnectionDetails(final UserInterfaceMqttConnectionDetails connectionDetails,final boolean finalCheck){  String returnValue=pl.baczkowicz.mqttspy.utils.ConnectionUtils.validateConnectionDetails(connectionDetails);  if (connectionDetails.getUserAuthentication() != null && connectionDetails.getUserCredentials() != null) {    if ((finalCheck || !connectionDetails.getUserAuthentication().isAskForUsername()) && (connectionDetails.getUserCredentials().getUsername() == null || connectionDetails.getUserCredentials().getUsername().trim().isEmpty())) {      returnValue="With user authentication enabled, user name cannot be empty";    }  }  return returnValue;}  }
class C{  public RepeatedFieldBuilder<MType,BType,IType> addAllMessages(Iterable<? extends MType> values){  for (  final MType value : values) {    if (value == null) {      throw new NullPointerException();    }  }  if (values instanceof Collection) {    @SuppressWarnings("unchecked") final Collection<MType> collection=(Collection<MType>)values;    if (collection.size() == 0) {      return this;    }    ensureMutableMessageList();    for (    MType value : values) {      addMessage(value);    }  } else {    ensureMutableMessageList();    for (    MType value : values) {      addMessage(value);    }  }  onChanged();  incrementModCounts();  return this;}  }
class C{  public void addInvokeinterface(CtClass clazz,String name,CtClass returnType,CtClass[] paramTypes,int count){  String desc=Descriptor.ofMethod(returnType,paramTypes);  addInvokeinterface(clazz,name,desc,count);}  }
class C{  public void startThreads(){  int priority=Thread.currentThread().getPriority();  log.debug("startThreads current priority = " + priority + " max available = "+ Thread.MAX_PRIORITY+ " default = "+ Thread.NORM_PRIORITY+ " min available = "+ Thread.MIN_PRIORITY);  Thread retryThread=new Thread(retryHandler,"MX1 retry handler");  retryThread.start();  int xmtpriority=(Thread.MAX_PRIORITY - 1 > priority ? Thread.MAX_PRIORITY - 1 : Thread.MAX_PRIORITY);  Thread xmtThread=new Thread(xmtHandler,"MX1 transmit handler");  log.debug("Xmt thread starts at priority " + xmtpriority);  xmtThread.setPriority(Thread.MAX_PRIORITY - 1);  xmtThread.start();  Thread rcvThread=new Thread(rcvHandler,"MX1 receive handler");  rcvThread.setPriority(Thread.MAX_PRIORITY);  rcvThread.start();}  }
class C{  public void draw(Graphics2D g2,Rectangle2D chartArea,Point2D anchor,ChartRenderingInfo info){  notifyListeners(new ChartProgressEvent(this,this,ChartProgressEvent.DRAWING_STARTED,0));  if (this.elementHinting) {    Map m=new HashMap<String,String>();    if (this.id != null) {      m.put("id",this.id);    }    m.put("ref","JFREECHART_TOP_LEVEL");    g2.setRenderingHint(ChartHints.KEY_BEGIN_ELEMENT,m);  }  EntityCollection entities=null;  if (info != null) {    info.clear();    info.setChartArea(chartArea);    entities=info.getEntityCollection();  }  if (entities != null) {    entities.add(new JFreeChartEntity((Rectangle2D)chartArea.clone(),this));  }  Shape savedClip=g2.getClip();  g2.clip(chartArea);  g2.addRenderingHints(this.renderingHints);  if (this.backgroundPaint != null) {    g2.setPaint(this.backgroundPaint);    g2.fill(chartArea);  }  if (this.backgroundImage != null) {    Composite originalComposite=g2.getComposite();    g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,this.backgroundImageAlpha));    Rectangle2D dest=new Rectangle2D.Double(0.0,0.0,this.backgroundImage.getWidth(null),this.backgroundImage.getHeight(null));    Align.align(dest,chartArea,this.backgroundImageAlignment);    g2.drawImage(this.backgroundImage,(int)dest.getX(),(int)dest.getY(),(int)dest.getWidth(),(int)dest.getHeight(),null);    g2.setComposite(originalComposite);  }  if (isBorderVisible()) {    Paint paint=getBorderPaint();    Stroke stroke=getBorderStroke();    if (paint != null && stroke != null) {      Rectangle2D borderArea=new Rectangle2D.Double(chartArea.getX(),chartArea.getY(),chartArea.getWidth() - 1.0,chartArea.getHeight() - 1.0);      g2.setPaint(paint);      g2.setStroke(stroke);      g2.draw(borderArea);    }  }  Rectangle2D nonTitleArea=new Rectangle2D.Double();  nonTitleArea.setRect(chartArea);  this.padding.trim(nonTitleArea);  if (this.title != null && this.title.isVisible()) {    EntityCollection e=drawTitle(this.title,g2,nonTitleArea,(entities != null));    if (e != null && entities != null) {      entities.addAll(e);    }  }  Iterator iterator=this.subtitles.iterator();  while (iterator.hasNext()) {    Title currentTitle=(Title)iterator.next();    if (currentTitle.isVisible()) {      EntityCollection e=drawTitle(currentTitle,g2,nonTitleArea,(entities != null));      if (e != null && entities != null) {        entities.addAll(e);      }    }  }  Rectangle2D plotArea=nonTitleArea;  PlotRenderingInfo plotInfo=null;  if (info != null) {    plotInfo=info.getPlotInfo();  }  this.plot.draw(g2,plotArea,anchor,null,plotInfo);  g2.setClip(savedClip);  if (this.elementHinting) {    g2.setRenderingHint(ChartHints.KEY_END_ELEMENT,Boolean.TRUE);  }  notifyListeners(new ChartProgressEvent(this,this,ChartProgressEvent.DRAWING_FINISHED,100));}  }
class C{  @Override @Deprecated public BudgetUsage consumeEncumbranceBudget(final String appropriationnumber,final Long financialyearid,final Integer moduleid,final String referencenumber,final Integer departmentid,final Long functionid,final Integer functionaryid,final Integer schemeid,final Integer subschemeid,final Integer boundaryid,final List<Long> budgetheadid,final Integer fundid,final double amount){  return getBudgetUsageDetails(financialyearid,moduleid,referencenumber,departmentid,functionid,functionaryid,schemeid,subschemeid,boundaryid,budgetheadid,fundid,amount,true,appropriationnumber);}  }
class C{  public JSONArray put(int index,int value) throws JSONException {  this.put(index,new Integer(value));  return this;}  }
class C{  private CResultColor(){}  }
class C{  protected void processDataAdd(SimEvent ev,boolean ack){  if (ev == null) {    return;  }  Object[] pack=(Object[])ev.getData();  if (pack == null) {    return;  }  File file=(File)pack[0];  file.setMasterCopy(true);  int sentFrom=((Integer)pack[1]).intValue();  Object[] data=new Object[3];  data[0]=file.getName();  int msg=addFile(file);  if (ack) {    data[1]=Integer.valueOf(-1);    data[2]=Integer.valueOf(msg);    sendNow(sentFrom,DataCloudTags.FILE_ADD_MASTER_RESULT,data);  }}  }
class C{  private void closeExternalStorageFiles(final String storagePath){  stop(true);  notifyChange(QUEUE_CHANGED);  notifyChange(META_CHANGED);}  }
class C{  public NsHead(byte[] input){  wrap(input);}  }
class C{  public static void send(InternalDistributedMember recipient,int processorId,RawValue val,ReplySender replySender) throws RemoteOperationException {  Assert.assertTrue(recipient != null,"PRDistribuedGetReplyMessage NULL reply message");  GetReplyMessage m=new GetReplyMessage(processorId,val);  m.setRecipient(recipient);  replySender.putOutgoing(m);}  }
class C{  public Iterator<Contact> iterator(){  return values().iterator();}  }
class C{  public void tryLock(int key,long timeout,int lockCount){  try {    LockerData data=getData(key,lockCount);    doLock(data.getLock(),timeout);    checkException(data);  }  finally {    _data.remove(key);  }}  }
class C{  public String generateResponseUrlForTenant(LogoutResponse samlResponse,String tenant){  String retval=null;  log.debug("generateResponseUrlForTenant, tenant " + tenant + ", SLO response "+ samlResponse);  try {    Validate.notNull(this.idmAccessor);    Validate.isTrue(this.logoutRequest != null || this.logoutResponse != null);    Validate.notNull(this.getIssuerValue());    this.idmAccessor.setTenant(tenant);    String relyingParty=this.getIssuerValue();    SamlService service=createSamlServiceForTenant(tenant,relyingParty);    String encodedResponse=service.encodeSAMLObject(samlResponse);    String toBeSigned=service.generateRedirectUrlQueryStringParameters(null,encodedResponse,this.getRelayState(),SignatureAlgorithm.RSA_SHA256.toString(),null);    String signature=service.signMessage(toBeSigned);    retval=this.idmAccessor.getSloForRelyingParty(relyingParty,OasisNames.HTTP_REDIRECT);    if (retval == null) {      log.warn(String.format("SLO service for relying party %s does not exist.",relyingParty));      return null;    }    String queryString=service.generateRedirectUrlQueryStringParameters(null,encodedResponse,this.getRelayState(),SignatureAlgorithm.RSA_SHA256.toString(),signature);    retval=retval + "?" + queryString;  } catch (  Exception e) {    this.validationResult=new ValidationResult(HttpServletResponse.SC_BAD_REQUEST,"BadRequest",null);    retval=null;  }  return retval;}  }
class C{  public static boolean isInformational(int status){  return (status >= 100 && status < 200);}  }
class C{  public final double distanceSquared(Point3d p){  return location.distanceSquared(p);}  }
class C{  public void addEntry(int severity,String msg,RefactoringStatusContext context,String pluginId,int code){  fEntries.add(new RefactoringStatusEntry(severity,msg,context,pluginId,code));  fSeverity=Math.max(fSeverity,severity);}  }
class C{  private static void sortedAdd(RatTermVec vec,RatTerm newTerm){  int deg=newTerm.expt;  for (int i=0, size=vec.size(); i < size; i++) {    if (vec.get(i).expt == deg) {      if (vec.get(i).coeff.add(newTerm.coeff).equals(ZERO)) {        vec.remove(i);        return;      } else {        vec.set(new RatTerm(vec.get(i).coeff.add(newTerm.coeff),deg),i);        return;      }    }    if (vec.get(i).expt < deg) {      vec.insert(newTerm,i);      return;    }  }  vec.addElement(newTerm);  return;}  }
class C{  private void onPathButtonClick(IDirectory newSelection){  if ((mDirectoryListener != null) && (newSelection != null)) {    mCurrentPath=newSelection.getAbsolute();    mDirectoryListener.onDirectoryPick(mCurrentPath,this.mDirQueryID);  }}  }
class C{  @Override public void expandMetaVolume(StorageSystem storageSystem,StoragePool storagePool,Volume metaHead,List<String> newMetaMembers,MetaVolumeTaskCompleter metaVolumeTaskCompleter) throws DeviceControllerException {  _log.info(String.format("Expand Meta Volume Start - Array: %s, Head: %s, %n   New members:%s",storageSystem.getSerialNumber(),metaHead.getLabel(),newMetaMembers));  boolean isRPVolume=false;  if (metaHead != null) {    isRPVolume=metaHead.checkForRp() || RPHelper.isAssociatedToAnyRpVplexTypes(metaHead,_dbClient);  }  int attempt=0;  int retries=1;  if (isRPVolume) {    retries=MAX_RP_EXPAND_RETRIES;  }  while (attempt++ <= retries) {    try {      CIMObjectPath elementCompositionServicePath=_cimPath.getElementCompositionSvcPath(storageSystem);      CIMArgument[] inArgs;      inArgs=_helper.getExpandMetaVolumeInputArguments(storageSystem,metaHead,newMetaMembers);      CIMArgument[] outArgs=new CIMArgument[5];      StorageSystem forProvider=_helper.getStorageSystemForProvider(storageSystem,metaHead);      _log.info("Selected Provider : {}",forProvider.getNativeGuid());      SmisJob smisJobCompleter=new SmisVolumeExpandJob(null,forProvider.getId(),storagePool.getId(),metaVolumeTaskCompleter,"ExpandMetaVolume");      if (isRPVolume) {        _log.info(String.format("Attempt %s/%s to expand volume %s, which is associated with RecoverPoint",attempt,MAX_RP_EXPAND_RETRIES,metaHead.getLabel()));      }      _helper.invokeMethodSynchronously(forProvider,elementCompositionServicePath,SmisConstants.CREATE_OR_MODIFY_COMPOSITE_ELEMENT,inArgs,outArgs,smisJobCompleter);      break;    } catch (    WBEMException e) {      _log.error("Problem making SMI-S call: ",e);      ServiceError error=DeviceControllerErrors.smis.unableToCallStorageProvider(e.getMessage());      metaVolumeTaskCompleter.getVolumeTaskCompleter().error(_dbClient,_locker,error);    }catch (    Exception e) {      if (attempt != retries && isRPVolume && e.getMessage().contains("The requested device has active sessions")) {        _log.warn(String.format("Encountered exception attempting to expand RP volume %s.  Waiting %s milliseconds before trying again.  Error: %s",metaHead.getLabel(),RP_EXPAND_WAIT_FOR_RETRY,e.getMessage()));        try {          Thread.sleep(RP_EXPAND_WAIT_FOR_RETRY);        } catch (        InterruptedException e1) {          Thread.currentThread().interrupt();        }      } else {        _log.error("Problem in expandMetaVolume: ",e);        ServiceError error=DeviceControllerErrors.smis.methodFailed("expandVolume",e.getMessage());        metaVolumeTaskCompleter.getVolumeTaskCompleter().error(_dbClient,_locker,error);        break;      }    }  }  _log.info(String.format("Expand Meta Volume End - Array:%s, Head:%s, %n  Head device ID: %s, New members:%s",storageSystem.getSerialNumber(),metaHead.getLabel(),metaHead.getNativeId(),newMetaMembers));}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) public static void main(final String[] args) throws Exception {  if (!prepareHomeDir()) {    System.exit(-1);  }  System.out.println("Preparing Jetty...");  ProtectionDomain domain=Starter.class.getProtectionDomain();  URL warUrl=domain.getCodeSource().getLocation();  File warFile=new File(warUrl.toURI());  JarFile jarFile=null;  ArrayList<URL> execLibs=new ArrayList<URL>();  try {    jarFile=new JarFile(warUrl.getPath());    for (    String execLib : getExecLibs(jarFile)) {      execLibs.add(extractExecLib(warFile,jarFile,"WEB-INF/exec/" + execLib,execLib));    }    File launcherLib=getFileInHomeDir("exec/launcher.jar");    if (!launcherLib.exists() || launcherLib.lastModified() < warFile.lastModified()) {      ZipOutputStream zos=new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(launcherLib)));      for (      String z : new String[]{JETTY_LAUNCHER_CLASS,"com.logsniffer.web.util.WebContextWithExtraConfigurations","com.logsniffer.web.util.WebInfConfigurationHomeUnpacked","com.logsniffer.web.util.WebInfConfigurationUnpackOverridable"}) {        ZipEntry ze1=new ZipEntry(z.replace('.','/') + ".class");        zos.putNextEntry(ze1);        copy(jarFile.getInputStream(jarFile.getEntry("WEB-INF/classes/" + z.replace('.','/') + ".class")),zos);      }      zos.close();    }    execLibs.add(launcherLib.toURI().toURL());  }  finally {    if (jarFile != null) {      jarFile.close();    }  }  ClassLoader urlClassLoader=new URLClassLoader(execLibs.toArray(new URL[execLibs.size()]));  Thread.currentThread().setContextClassLoader(urlClassLoader);  System.out.println("Launching Jetty...");  Class jettyLauncher=urlClassLoader.loadClass(JETTY_LAUNCHER_CLASS);  Method mainMethod=jettyLauncher.getMethod("start",new Class[]{String[].class,URL.class});  mainMethod.invoke(jettyLauncher.newInstance(),new Object[]{args,warUrl});  System.out.println("Jetty stopped");}  }
class C{  @Override public void ensureMapped(Address start,int pages){  int startChunk=addressToMmapChunksDown(start);  int endChunk=addressToMmapChunksUp(start.plus(Conversions.pagesToBytes(pages)));  for (int chunk=startChunk; chunk < endChunk; chunk++) {    if (mapped[chunk] == MAPPED)     continue;    Address mmapStart=mmapChunksToAddress(chunk);    lock.acquire();    if (mapped[chunk] == UNMAPPED) {      int errno=VM.memory.dzmmap(mmapStart,MMAP_CHUNK_BYTES);      if (errno != 0) {        lock.release();        Log.write("ensureMapped failed with errno ");        Log.write(errno);        Log.write(" on address ");        Log.writeln(mmapStart);        VM.assertions.fail("Can't get more space with mmap()");      } else {        if (verbose) {          Log.write("mmap succeeded at chunk ");          Log.write(chunk);          Log.write("  ");          Log.write(mmapStart);          Log.write(" with len = ");          Log.writeln(MMAP_CHUNK_BYTES);        }      }    }    if (mapped[chunk] == PROTECTED) {      if (!VM.memory.munprotect(mmapStart,MMAP_CHUNK_BYTES)) {        lock.release();        VM.assertions.fail("Mmapper.ensureMapped (unprotect) failed");      } else {        if (verbose) {          Log.write("munprotect succeeded at chunk ");          Log.write(chunk);          Log.write("  ");          Log.write(mmapStart);          Log.write(" with len = ");          Log.writeln(MMAP_CHUNK_BYTES);        }      }    }    mapped[chunk]=MAPPED;    lock.release();  }}  }
class C{  public static PlatformProcessor platformProcessor(Ignite grid){  GridKernalContext ctx=((IgniteKernal)grid).context();  return ctx.platform();}  }
class C{  public static CommandlineOptions parseCommandLine(final String[] arguments){  Preconditions.checkNotNull(arguments,"IE02087: Arguments argument can not be null");  final CommandlineOptions options=new CommandlineOptions();  for (  final String argument : arguments) {    if ("-v".equals(argument)) {      options.setVerboseMode();    } else     if ("-vv".equals(argument)) {      options.setVeryVerboseMode();    } else     if (argument.startsWith("-X:")) {      options.setBatchPlugin(arguments[0].substring(3));    }  }  processCommandLineOptions(options);  return options;}  }
class C{  public boolean remove(final Object o){  return remove(((((Character)(o)).charValue())));}  }
class C{  public final int writeFieldName(String name){  if (_type == TYPE_OBJECT) {    if (_currentName != null) {      return STATUS_EXPECT_VALUE;    }    _currentName=name;    return (_index < 0) ? STATUS_OK_AS_IS : STATUS_OK_AFTER_COMMA;  }  return STATUS_EXPECT_VALUE;}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  public static float calculateMaxTurnsAtSafe(Aero aero){  int fuelPoints=aero.getFuel();  float fuelPerTurn;  if (aero.getEntityType() == Entity.ETYPE_CONV_FIGHTER) {    fuelPerTurn=aero.getWalkMP() * 0.5f;  } else {    fuelPerTurn=aero.getWalkMP();  }  return fuelPoints / fuelPerTurn;}  }
class C{  public String toString(){  final String TAB=" ";  StringBuffer retValue=new StringBuffer();  retValue.append("InOperator ( ").append("range = ").append(Arrays.toString(this.range)).append(TAB).append(" )");  return retValue.toString();}  }
class C{  private void configureExtraClasspath(WAR war,Element context){  if (war.getExtraClasspath() != null) {    ((Tomcat5xStandaloneLocalConfiguration)getContainer().getConfiguration()).configureExtraClasspathToken(war,context);  }}  }
class C{  public Object[] lookupCflow(String name){  if (cflow == null)   cflow=new Hashtable();  return (Object[])cflow.get(name);}  }
class C{  public void removeFileTransferListener(final FileTransferListener li){  if (listeners == null) {    return;  }synchronized (this.listeners) {    listeners.remove(li);  }}  }
class C{  private void removeItem(ExpandItem item){  fontListener.removeControl(((SourceViewer)viewers.get(item)).getControl());  final Object data=item.getData(KEY);  items.remove(Integer.parseInt(data.toString()));  item.getControl().dispose();  item.dispose();}  }
class C{  public boolean hasValue(){  return super.hasTextValue();}  }
class C{  public Object nextValue() throws JSONException {  char c=nextClean();  String s;switch (c) {case '"':case '\'':    return nextString(c);case '{':  back();return new JSONObject(this);case '[':back();return new JSONArray(this);}StringBuffer sb=new StringBuffer();char b=c;while (c >= ' ' && ",:]}/\\\"[{;=#".indexOf(c) < 0) {sb.append(c);c=next();}back();s=sb.toString().trim();if (s.equals("")) {throw syntaxError("Missing value.");}if (s.equalsIgnoreCase("true")) {return Boolean.TRUE;}if (s.equalsIgnoreCase("false")) {return Boolean.FALSE;}if (s.equalsIgnoreCase("null")) {return JSONObject.NULL;}if ((b >= '0' && b <= '9') || b == '.' || b == '-' || b == '+') {if (b == '0') {if (s.length() > 2 && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {try {return new Integer(Integer.parseInt(s.substring(2),16));} catch (Exception e) {}} else {try {return new Integer(Integer.parseInt(s,8));} catch (Exception e) {}}}try {return new Integer(s);} catch (Exception e) {try {return new Long(s);} catch (Exception f) {try {return new Double(s);} catch (Exception g) {return s;}}}}return s;}  }
class C{  public static Spacing createDependentLFSpacing(int minSpaces,int maxSpaces,TextRange dependency,boolean keepLineBreaks,int keepBlankLines){  return createDependentLFSpacing(minSpaces,maxSpaces,dependency,keepLineBreaks,keepBlankLines,DependentSpacingRule.DEFAULT);}  }
class C{  public static int loadShader(int type,String shaderCode){  int shader=GLES20.glCreateShader(type);  GLES20.glShaderSource(shader,shaderCode);  GLES20.glCompileShader(shader);  return shader;}  }
class C{  public Mine(){  super();}  }
class C{  public CustomPotionEffect(int potionID,int duration,int amplifier,List<ItemStack> curativeItems){  super(potionID,duration,amplifier);  if (curativeItems == null) {    this.setCurativeItems(new ArrayList<ItemStack>());  } else {    this.setCurativeItems(curativeItems);  }}  }
class C{  private void addDroppableObjects(RPObject obj,List<Pair<RPObject,RPSlot>> list){  boolean droppable=true;  for (  RPSlot slot : obj.slots()) {    for (    RPObject subobj : slot) {      addDroppableObjects(subobj,list);      droppable=false;    }  }  if (obj instanceof Item) {    Item item=(Item)obj;    if (item.isBound() || item.isUndroppableOnDeath()) {      droppable=false;    }  }  if (droppable) {    list.add(new Pair<RPObject,RPSlot>(obj,obj.getContainerSlot()));  }}  }
class C{  public void fireStatusUpdate(LayerStatusEvent evt){  for (  LayerStatusListener listener : lsListeners) {    listener.updateLayerStatus(evt);  }}  }
class C{  public void readSessionState(){  if (!sessionStateChanged || sessionStateUpdating) {    return;  }  sessionStateChanged=false;  sessionState=New.arrayList();  CommandInterface ci=prepareCommand("SELECT * FROM INFORMATION_SCHEMA.SESSION_STATE",Integer.MAX_VALUE);  ResultInterface result=ci.executeQuery(0,false);  while (result.next()) {    Value[] row=result.currentRow();    sessionState.add(row[1].getString());  }}  }
class C{  public FluentFunction<T,R> visitEvent(final Consumer<R> eventConsumer,final Consumer<Throwable> errorConsumer){  return FluentFunctions.of(null);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"cmpsd");  new CmpsGenerator().generate(environment,ReilHelpers.toReilAddress(instruction.getAddress()).toLong(),OperandSize.DWORD,instructions);}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void removeDeadCode(MethodNode method){  try {    Analyzer analyzer=new Analyzer(new BasicInterpreter());    analyzer.analyze(specializedClassName,method);    Frame[] frames=analyzer.getFrames();    AbstractInsnNode[] insns=method.instructions.toArray();    for (int i=0; i < frames.length; i++) {      AbstractInsnNode insn=insns[i];      if (frames[i] == null && insn.getType() != AbstractInsnNode.LABEL) {        method.instructions.remove(insn);        insns[i]=null;      }    }  } catch (  AnalyzerException e) {  }}  }
class C{  public JPanel(){  this(true);}  }
class C{  public void testDoCheckWithDefaultNotDetectionResultAndDetectionResultOverridenByConstructor(){  LOGGER.debug("doCheckWithDefaultNotDetectionResultAndDetectionResultOverridenByConstructor");  elements.add(element);  expect(mockTextElementBuilder.buildTextFromElement(element)).andReturn("test.php");  mockTestSolutionHandler.addTestSolution(TestSolution.PASSED);  expectLastCall().once();  expect(mockNomenclature.getValueList()).andReturn(Arrays.asList("html"));  TextEndsWithChecker instance=new TextEndsWithChecker(mockTextElementBuilder,EXTENSION_NOM_NAME,TestSolution.NEED_MORE_INFO,DETECTION_MSG);  instance.setNomenclatureLoaderService(mockNomenclatureLoaderService);  replay(mockTextElementBuilder,mockSSPHandler,mockTestSolutionHandler,mockNomenclature,mockNomenclatureLoaderService);  instance.doCheck(mockSSPHandler,elements,mockTestSolutionHandler);  verify(mockTextElementBuilder,mockSSPHandler,mockTestSolutionHandler,mockNomenclature,mockNomenclatureLoaderService);}  }
class C{  protected synchronized Instance processBuffers(){  if (m_firstBuffer != null && m_secondBuffer != null && m_firstBuffer.size() > 0 && m_secondBuffer.size() > 0) {    if (m_stopRequested.get()) {      return null;    }    InstanceHolder firstH=m_firstBuffer.peek();    InstanceHolder secondH=m_secondBuffer.peek();    Instance first=firstH.m_instance;    Instance second=secondH.m_instance;    int cmp=compare(first,second,firstH,secondH);    if (cmp == 0) {      Instance newInst=generateMergedInstance(m_firstBuffer.remove(),m_secondBuffer.remove());      return newInst;    } else     if (cmp < 0) {      do {        m_firstBuffer.remove();        if (m_firstBuffer.size() > 0) {          firstH=m_firstBuffer.peek();          first=firstH.m_instance;          cmp=compare(first,second,firstH,secondH);        }      } while (cmp < 0 && m_firstBuffer.size() > 0);    } else {      do {        m_secondBuffer.remove();        if (m_secondBuffer.size() > 0) {          secondH=m_secondBuffer.peek();          second=secondH.m_instance;          cmp=compare(first,second,firstH,secondH);        }      } while (cmp > 0 && m_secondBuffer.size() > 0);    }  }  return null;}  }
class C{  public void curveTo(double x1,double y1,double x2,double y2,double x3,double y3){  if (size() == 0) {    throw new IllegalPathStateException("curveTo only allowed when not empty");  }  Node lastPoint=get(size() - 1);  lastPoint.mask|=C2_MASK;  lastPoint.x[2]=x1;  lastPoint.y[2]=y1;  if ((lastPoint.mask & C1C2_MASK) == C1C2_MASK) {    lastPoint.keepColinear=Math.abs(Geom.angle(lastPoint.x[0],lastPoint.y[0],lastPoint.x[1],lastPoint.y[1]) - Geom.angle(lastPoint.x[2],lastPoint.y[2],lastPoint.x[0],lastPoint.y[0])) < 0.001;  }  add(new Node(C1_MASK,x3,y3,x2,y2,x3,y3));}  }
class C{  public static double pointCircleDistance(Geo p1,Geo p2,Geo center){  Geo n=Geo.crossNormalize(p1,p2,new Geo());  Geo c=center.normalize(new Geo());  double cosTheta=Geo.dot(n,c);  double theta=Math.acos(cosTheta);  return Math.abs(Math.PI / 2 - theta);}  }
class C{  public void addRule(Rule rule){  ruleManager.addRule(rule);}  }
class C{  private String _serializeStruct(Struct struct,Map<Object,String> done,String id) throws ConverterException {  StringBuilder sb=new StringBuilder(goIn() + "<STRUCT ID=\"" + id+ "\">");  Iterator<Key> it=struct.keyIterator();  deep++;  while (it.hasNext()) {    Key key=it.next();    String value=_serialize(struct.get(key,null),done);    sb.append(goIn() + "<ENTRY NAME=\"" + key.toString()+ "\" TYPE=\""+ type+ "\">");    sb.append(value);    sb.append(goIn() + "</ENTRY>");  }  deep--;  sb.append(goIn() + "</STRUCT>");  type="STRUCT";  return sb.toString();}  }
class C{  public synchronized void clear(){  topology.clear();}  }
class C{  public POJOPropertyBuilder withName(String newName){  return new POJOPropertyBuilder(this,newName);}  }
class C{  public void hide(){  hide(false,null);}  }
class C{  public SGenItemProviderAdapterFactory(){  supportedTypes.add(IEditingDomainItemProvider.class);  supportedTypes.add(IStructuredItemContentProvider.class);  supportedTypes.add(ITreeItemContentProvider.class);  supportedTypes.add(IItemLabelProvider.class);  supportedTypes.add(IItemPropertySource.class);}  }
class C{  public synchronized void reopen(int offset) throws FormatException {  try {    if (inputFile == null) {      inputFile=new BinaryBufferedFile(filename);      inputFile.byteOrder(byteOrder);    }    if (offset > 0) {      inputFile.seek(offset);    }  } catch (  IOException i) {    throw new FormatException("DcwThematicIndex: Can't open file " + filename + ": "+ i.getMessage());  }}  }
class C{  @Provides @Config("googleAppsAdminEmailAddress") public static String provideGoogleAppsAdminEmailAddress(RegistryEnvironment environment){switch (environment) {case PRODUCTION:    return "admin@registry.google";default :  return "admin@domainregistry-sandbox.co";}}  }
class C{  protected boolean[] canTakeOptions(){  boolean[] result=new boolean[2];  print("options...");  if (m_Kernel instanceof OptionHandler) {    println("yes");    if (m_Debug) {      println("\n=== Full report ===");      Enumeration<Option> enu=((OptionHandler)m_Kernel).listOptions();      while (enu.hasMoreElements()) {        Option option=enu.nextElement();        print(option.synopsis() + "\n" + option.description()+ "\n");      }      println("\n");    }    result[0]=true;  } else {    println("no");    result[0]=false;  }  return result;}  }
class C{  public final boolean commitProcessReceived(Object key,DM dm){  if (key instanceof TXLockId) {    TXLockId lk=(TXLockId)key;    waitForMemberToDepart(lk.getMemberId(),dm);  } else   if (key instanceof TXId) {    TXId id=(TXId)key;    waitForMemberToDepart(id.getMemberId(),dm);  } else {    Assert.assertTrue(false,"TXTracker received an unknown key class: " + key.getClass());  }  final TXCommitMessage mess;synchronized (this.txInProgress) {    mess=(TXCommitMessage)this.txInProgress.get(key);    if (null != mess && mess.isProcessing()) {      return true;    }    for (int i=this.txHistory.length - 1; i >= 0; --i) {      if (key.equals(this.txHistory[i])) {        return true;      }    }  }  if (mess != null) {synchronized (mess) {      if (!mess.isProcessing()) {        mess.setDontProcess();        return false;      } else {        return true;      }    }  }  return false;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList employeeList;  int length;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("p");  employeeNode=elementList.item(2);  employeeList=employeeNode.getChildNodes();  length=(int)employeeList.getLength();  if (equals(6,length)) {    assertEquals("length_wo_space",6,length);  } else {    assertEquals("length_w_space",13,length);  }}  }
class C{  public OpenDataException(String msg){  super(msg);}  }
class C{  private boolean isEscapingDisabled(){  return m_disableOutputEscapingStates.peekOrFalse();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public boolean isValid(INode staten){  if (!(staten instanceof FifteenPuzzleNode)) {    throw new IllegalArgumentException("SlideMove expects state objects of class EightPuzzleNode");  }  FifteenPuzzleNode state=(FifteenPuzzleNode)staten;  if (fromC < 0 || fromC > FifteenPuzzleNode.MaxR) {    return false;  }  if (fromR < 0 || fromR > FifteenPuzzleNode.MaxC) {    return false;  }  if (toC < 0 || toC > FifteenPuzzleNode.MaxR) {    return false;  }  if (toR < 0 || toR > FifteenPuzzleNode.MaxC) {    return false;  }  return state.isAdjacentAndEmpty(fromC,fromR,toC,toR);}  }
class C{  @Override protected EClass eStaticClass(){  return TypeRefsPackage.Literals.FUNCTION_TYPE_EXPR_OR_REF;}  }
class C{  @LogMessageDoc(level="ERROR",message="No listener dependency solution: " + "No listeners without incoming dependencies",explanation="The set of listeners installed " + "have dependencies with no solution",recommendation="Install a different set of listeners " + "or install all dependencies.  This is a defect in " + "the controller installation.") public void addListener(U type,T listener){  List<T> newlisteners=new ArrayList<T>();  if (listeners != null)   newlisteners.addAll(listeners);  newlisteners.add(listener);  List<T> terminals=new ArrayList<T>();  for (  T i : newlisteners) {    boolean isterm=true;    for (    T j : newlisteners) {      if (ispre(type,i,j)) {        isterm=false;        break;      }    }    if (isterm) {      terminals.add(i);    }  }  if (terminals.size() == 0) {    logger.error("No listener dependency solution: " + "No listeners without incoming dependencies");    listeners=newlisteners;    return;  }  HashSet<T> visited=new HashSet<T>();  List<T> ordering=new ArrayList<T>();  for (  T term : terminals) {    visit(newlisteners,type,visited,ordering,term);  }  listeners=ordering;}  }
class C{  public void writeObjectFieldValueSeparator(JsonGenerator jg) throws IOException, JsonGenerationException {  if (_spacesInObjectEntries) {    jg.writeRaw(" : ");  } else {    jg.writeRaw(':');  }}  }
class C{  private static Vector<Entity> createAngelEnemy(IPlayer owner,IGame mockGame){  Vector<Entity> entitiesVector=new Vector<Entity>();  Entity enemy1=Mockito.mock(Mech.class);  Coords ecm1Pos=new Coords(5,5);  ECMInfo ecm1=new ECMInfo(6,ecm1Pos,owner,0,1);  Mockito.when(enemy1.getOwner()).thenReturn(owner);  Mockito.when(enemy1.getECMInfo()).thenReturn(ecm1);  Mockito.when(enemy1.getGame()).thenReturn(mockGame);  entitiesVector.add(enemy1);  enemy1=Mockito.mock(Mech.class);  ecm1Pos=new Coords(20,20);  ecm1=new ECMInfo(6,ecm1Pos,owner,1,0);  Mockito.when(enemy1.getOwner()).thenReturn(owner);  Mockito.when(enemy1.getECMInfo()).thenReturn(ecm1);  Mockito.when(enemy1.getGame()).thenReturn(mockGame);  entitiesVector.add(enemy1);  enemy1=Mockito.mock(Tank.class);  Mockito.when(enemy1.getOwner()).thenReturn(owner);  Mockito.when(enemy1.getECMInfo()).thenReturn(null);  Mockito.when(enemy1.getGame()).thenReturn(mockGame);  entitiesVector.add(enemy1);  enemy1=Mockito.mock(Aero.class);  Mockito.when(enemy1.getOwner()).thenReturn(owner);  Mockito.when(enemy1.getECMInfo()).thenReturn(null);  Mockito.when(enemy1.getGame()).thenReturn(mockGame);  entitiesVector.add(enemy1);  enemy1=Mockito.mock(BattleArmor.class);  Mockito.when(enemy1.getOwner()).thenReturn(owner);  Mockito.when(enemy1.getECMInfo()).thenReturn(null);  Mockito.when(enemy1.getGame()).thenReturn(mockGame);  entitiesVector.add(enemy1);  enemy1=Mockito.mock(Mech.class);  Mockito.when(enemy1.getOwner()).thenReturn(owner);  Mockito.when(enemy1.getECMInfo()).thenReturn(null);  Mockito.when(enemy1.getGame()).thenReturn(mockGame);  entitiesVector.add(enemy1);  return entitiesVector;}  }
class C{  private String moveToFolder(final String file,final String folder){  final File source=new File(file);  final File destination=new File(folder + File.separator + source.getName());  Log.i(TAG,file + " stored in temp folder. Moving to " + destination.getAbsolutePath());  try {    FileUtils.moveFile(source,destination);  } catch (  final IOException e) {    Log.e(TAG,"I/O error while moving file");  }  return destination.getAbsolutePath();}  }
class C{  public void reader(RecordReader reader){  this.reader=reader;}  }
class C{  public static void main(String[] args){  TestHeadings tester=new TestHeadings();  run(tester,ARGS,TEST,NEGATED_TEST);  tester.printSummary();}  }
class C{  public static FileDetailFragment newInstance(OCFile fileToDetail,Account account){  FileDetailFragment frag=new FileDetailFragment();  Bundle args=new Bundle();  args.putParcelable(ARG_FILE,fileToDetail);  args.putParcelable(ARG_ACCOUNT,account);  frag.setArguments(args);  return frag;}  }
class C{  private void addArcView(){  setClipChildren(false);  progressArc=new ProgressArcView(getContext(),arcColor,arcWidth,roundedStroke);  progressArc.setInternalListener(this);  addView(progressArc,new FrameLayout.LayoutParams(getFabDimension() + arcWidth,getFabDimension() + arcWidth,Gravity.CENTER));}  }
class C{  public Builder add(Element element,String name){  return add(element,name,1);}  }
class C{  static boolean isJavaBaseAssignable(Class lhsType,Class rhsType){  if (lhsType == null)   return false;  if (rhsType == null)   return !lhsType.isPrimitive();  if (lhsType.isPrimitive() && rhsType.isPrimitive()) {    if (lhsType == rhsType)     return true;    if ((rhsType == Byte.TYPE) && (lhsType == Short.TYPE || lhsType == Integer.TYPE || lhsType == Long.TYPE || lhsType == Float.TYPE || lhsType == Double.TYPE))     return true;    if ((rhsType == Short.TYPE) && (lhsType == Integer.TYPE || lhsType == Long.TYPE || lhsType == Float.TYPE || lhsType == Double.TYPE))     return true;    if ((rhsType == Character.TYPE) && (lhsType == Integer.TYPE || lhsType == Long.TYPE || lhsType == Float.TYPE || lhsType == Double.TYPE))     return true;    if ((rhsType == Integer.TYPE) && (lhsType == Long.TYPE || lhsType == Float.TYPE || lhsType == Double.TYPE))     return true;    if ((rhsType == Long.TYPE) && (lhsType == Float.TYPE || lhsType == Double.TYPE))     return true;    if ((rhsType == Float.TYPE) && (lhsType == Double.TYPE))     return true;  } else   if (lhsType.isAssignableFrom(rhsType))   return true;  return false;}  }
class C{  public EventStoreBuilder tcpWriteBufferHighWaterMark(int size){  tcpSettingsBuilder.writeBufferHighWaterMark(size);  return this;}  }
class C{  public Response createResponse(int statusCode,CallIdHeader callId,CSeqHeader cSeq,FromHeader from,ToHeader to,List via,MaxForwardsHeader maxForwards,ContentTypeHeader contentType,Object content) throws ParseException {  if (callId == null || cSeq == null || from == null || to == null || via == null || maxForwards == null || content == null || contentType == null)   throw new NullPointerException("missing parameters");  SIPResponse sipResponse=new SIPResponse();  StatusLine statusLine=new StatusLine();  statusLine.setStatusCode(statusCode);  String reason=SIPResponse.getReasonPhrase(statusCode);  if (reason == null)   throw new ParseException(statusCode + " Unknown",0);  statusLine.setReasonPhrase(reason);  sipResponse.setStatusLine(statusLine);  sipResponse.setCallId(callId);  sipResponse.setCSeq(cSeq);  sipResponse.setFrom(from);  sipResponse.setTo(to);  sipResponse.setVia(via);  sipResponse.setContent(content,contentType);  if (userAgent != null) {    sipResponse.setHeader(userAgent);  }  return sipResponse;}  }
class C{  protected DoubleMatrix1D viewSelectionLike(int[] offsets){  return new SelectedDenseDoubleMatrix1D(this.elements,offsets);}  }
class C{  private void dumpOption(String option,Object value){  String label=Localization.Main.getText("config." + option + ".label");  label=Helper.pad(label,' ',50) + " : ";  if (label.startsWith(doNot)) {    if (value.toString().equalsIgnoreCase(yes))     value=no; else     value=yes;  }  logger.info(label + value);}  }
class C{  protected void fillVersionedObjectList(VersionedObjectList list){  for (  PutAllEntryData entry : this.putAllData) {    if (entry.versionTag != null) {      list.addKeyAndVersion(entry.key,entry.versionTag);    }  }}  }
class C{  private static void processPendingEntries() throws IllegalAccessException {  while (!pendingEntries.isEmpty()) {    BootImageMap.Entry mapEntry=pendingEntries.remove();    mapEntry.clearPendingEntry();    if (mapEntry.imageAddress.EQ(OBJECT_NOT_ALLOCATED)) {      mapEntry.imageAddress=copyToBootImage(mapEntry.jdkObject,false,Address.max(),null,false,AlignmentEncoding.ALIGN_CODE_NONE);    }    fixupLinkAddresses(mapEntry);  }}  }
class C{  void renderEdge(){  glDisable(GL_DEPTH_TEST);  if (outlineOnly) {    glUseProgram(this.outlineProgram);    glUniform1i(outlineShowEdgeUniform,showEdge ? 1 : 0);  } else {    glUseProgram(this.edgeProgram);    glUniform1i(edgeShowEdgeUniform,showEdge ? 1 : 0);  }  glBindFramebufferEXT(GL_READ_FRAMEBUFFER_EXT,fbo);  glBindFramebufferEXT(GL_DRAW_FRAMEBUFFER_EXT,fbo2);  glBlitFramebufferEXT(0,0,width,height,0,0,width,height,GL_COLOR_BUFFER_BIT,GL_NEAREST);  glBindFramebufferEXT(GL_FRAMEBUFFER_EXT,0);  glUniform1f(invWidthUniform,1.0f / width);  glUniform1f(invHeightUniform,1.0f / height);  glUniform1i(normalTexUniform,0);  glBindTexture(GL_TEXTURE_2D,tex);  glBindBuffer(GL_ARRAY_BUFFER,this.quadVbo);  glEnableVertexAttribArray(0);  glVertexAttribPointer(0,2,GL_FLOAT,false,0,0L);  glDrawArrays(GL_TRIANGLES,0,6);  glDisableVertexAttribArray(0);  glBindBuffer(GL_ARRAY_BUFFER,0);  glBindTexture(GL_TEXTURE_2D,0);  glUseProgram(0);}  }
class C{  @Override protected boolean isPrepared(final Player player){  if (player.isEquipped("money",30)) {    return true;  } else {    player.sendPrivateText("You need 30 coins to make a wish.");    return false;  }}  }
class C{  public static double cauchy(){  return Math.tan(Math.PI * (uniform() - 0.5));}  }
class C{  private static void selectAndPossiblyCenter(JTextArea textArea,int start,int end){  textArea.setSelectionStart(start);  textArea.setSelectionEnd(end);  Rectangle r=null;  try {    r=textArea.modelToView(start);    if (r == null) {      return;    }    if (end != start) {      r=r.union(textArea.modelToView(end));    }  } catch (  BadLocationException ble) {    ble.printStackTrace();    textArea.setSelectionStart(start);    textArea.setSelectionEnd(end);    return;  }  Rectangle visible=textArea.getVisibleRect();  if (visible.contains(r)) {    textArea.setSelectionStart(start);    textArea.setSelectionEnd(end);    return;  }  visible.x=r.x - (visible.width - r.width) / 2;  visible.y=r.y - (visible.height - r.height) / 2;  Rectangle bounds=textArea.getBounds();  Insets i=textArea.getInsets();  bounds.x=i.left;  bounds.y=i.top;  bounds.width-=i.left + i.right;  bounds.height-=i.top + i.bottom;  if (visible.x < bounds.x) {    visible.x=bounds.x;  }  if (visible.x + visible.width > bounds.x + bounds.width) {    visible.x=bounds.x + bounds.width - visible.width;  }  if (visible.y < bounds.y) {    visible.y=bounds.y;  }  if (visible.y + visible.height > bounds.y + bounds.height) {    visible.y=bounds.y + bounds.height - visible.height;  }  textArea.scrollRectToVisible(visible);}  }
class C{  public static float scale(float v,float vMin,float vMax,float pMin,float pMax){  return (pMax - pMin) * (v - vMin) / (vMax - vMin) + pMin;}  }
class C{  public final void addElement(int value){  if ((m_firstFree + 1) >= m_mapSize) {    m_mapSize+=m_blocksize;    int newMap[]=new int[m_mapSize];    System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);    m_map=newMap;  }  m_map[m_firstFree]=value;  m_firstFree++;}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null) {    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  }  return fields;}  }
class C{  private static void swap(double x[],int a,int b){  double t=x[a];  x[a]=x[b];  x[b]=t;}  }
class C{  public void removeListener(final IToolbarPanelSynchronizerListener listener){  m_listeners.removeListener(listener);}  }
class C{  private void cmd_print(){  if (fPaymentRule.getSelectedItem() == null)   return;  String PaymentRule=fPaymentRule.getSelectedItem().toValueNamePair().getValue();  log.info(PaymentRule);  if (!getChecks(PaymentRule))   return;  List<File> pdfList=new ArrayList<File>();  for (int i=0; i < m_checks.length; i++) {    MPaySelectionCheck check=m_checks[i];    ReportEngine re=ReportEngine.get(Env.getCtx(),ReportEngine.CHECK,check.get_ID());    try {      File file=File.createTempFile("WPayPrint",null);      re.getPDF(file);      pdfList.add(file);    } catch (    Exception e) {      log.log(Level.SEVERE,e.getLocalizedMessage(),e);      return;    }  }  SimplePDFViewer chequeViewer=null;  try {    File outFile=File.createTempFile("WPayPrint",null);    AEnv.mergePdf(pdfList,outFile);    chequeViewer=new SimplePDFViewer(form.getFormName(),new FileInputStream(outFile));    chequeViewer.setAttribute(Window.MODE_KEY,Window.MODE_EMBEDDED);    chequeViewer.setWidth("100%");  } catch (  Exception e) {    log.log(Level.SEVERE,e.getLocalizedMessage(),e);    return;  }  int lastDocumentNo=MPaySelectionCheck.confirmPrint(m_checks,m_batch);  if (lastDocumentNo != 0) {    StringBuffer sb=new StringBuffer();    sb.append("UPDATE C_BankAccountDoc SET CurrentNext=").append(++lastDocumentNo).append(" WHERE C_BankAccount_ID=").append(m_C_BankAccount_ID).append(" AND PaymentRule='").append(PaymentRule).append("'");    DB.executeUpdate(sb.toString(),null);  }  SimplePDFViewer remitViewer=null;  if (FDialog.ask(m_WindowNo,form,"VPayPrintPrintRemittance")) {    pdfList=new ArrayList<File>();    for (int i=0; i < m_checks.length; i++) {      MPaySelectionCheck check=m_checks[i];      ReportEngine re=ReportEngine.get(Env.getCtx(),ReportEngine.REMITTANCE,check.get_ID());      try {        File file=File.createTempFile("WPayPrint",null);        re.getPDF(file);        pdfList.add(file);      } catch (      Exception e) {        log.log(Level.SEVERE,e.getLocalizedMessage(),e);      }    }    try {      File outFile=File.createTempFile("WPayPrint",null);      AEnv.mergePdf(pdfList,outFile);      String name=Msg.translate(Env.getCtx(),"Remittance");      remitViewer=new SimplePDFViewer(form.getFormName() + " - " + name,new FileInputStream(outFile));      remitViewer.setAttribute(Window.MODE_KEY,Window.MODE_EMBEDDED);      remitViewer.setWidth("100%");    } catch (    Exception e) {      log.log(Level.SEVERE,e.getLocalizedMessage(),e);    }  }  dispose();  if (chequeViewer != null)   SessionManager.getAppDesktop().showWindow(chequeViewer);  if (remitViewer != null)   SessionManager.getAppDesktop().showWindow(remitViewer);}  }
class C{  @RequestProcessing(value="/kill-browser",method=HTTPRequestMethod.GET) @Before(adviceClass=StopwatchStartAdvice.class) @After(adviceClass=StopwatchEndAdvice.class) public void showKillBrowser(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response){  final AbstractFreeMarkerRenderer renderer=new SkinRenderer();  renderer.setTemplateName("kill-browser.ftl");  context.setRenderer(renderer);  final Map<String,Object> dataModel=renderer.getDataModel();  final Map<String,String> langs=langPropsService.getAll(Locales.getLocale(request));  dataModel.putAll(langs);  Keys.fillRuntime(dataModel);  filler.fillMinified(dataModel);}  }
class C{  protected Object reportReturn(String methodCall,Object value){  reportAllReturns(methodCall,"" + value);  return value;}  }
class C{  public static void extract(int format,Resource[] sources,Resource target) throws IOException {  if (format == FORMAT_ZIP || format == FORMAT_TAR) {    for (int i=0; i < sources.length; i++) {      extract(format,sources[i],target);    }  } else   throw new IOException("can't extract in given format");}  }
class C{  @Override protected void preUpdateMenu(){  super.preUpdateMenu();  m_MinNumParentDirs=determineMinimumNumberOfParentDirs();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public JavaPairRDD<Polygon,HashSet<Point>> SpatialJoinQuery(PointRDD pointRDD,PolygonRDD polygonRDD){  if (pointRDD.gridPointRDD == null) {    throw new NullPointerException("Need to do spatial partitioning first, gridedSRDD is null");  }  JavaPairRDD<Integer,Tuple2<Iterable<Point>,Iterable<Polygon>>> cogroupResult=pointRDD.gridPointRDD.cogroup(this.polygonRDD.gridPolygonRDD);  JavaPairRDD<Polygon,HashSet<Point>> joinResultWithDuplicates=cogroupResult.flatMapToPair(new PointByPolygonJudgement());  JavaPairRDD<Polygon,HashSet<Point>> joinListResultAfterAggregation=aggregateJoinResultPointByPolygon(joinResultWithDuplicates);  return joinListResultAfterAggregation;}  }
class C{  public FocusControl(String focusGroup){  this(1);  group=focusGroup;}  }
class C{  private void killDirectory(File dir){  if (!dir.isDirectory())   throw new RuntimeException("This function only deletes directories");  File[] files=dir.listFiles();  if (files != null) {    for (    File f : files) {      if (!f.delete())       Log.e(LOGTAG,"Could not delete " + f.getAbsolutePath());    }  }  if (!dir.delete())   Log.e(LOGTAG,"Could not delete " + dir.getAbsolutePath());}  }
class C{  public static void write(float lat_1,float lon_1,float lat_2,float lon_2,int lineType,LinkProperties properties,DataOutputStream dos) throws IOException {  LinkLine.write(lat_1,lon_1,lat_2,lon_2,lineType,-1,properties,dos);}  }
class C{  public boolean isShared(){  return shared;}  }
class C{  public boolean isRepeatable(){  for (int i=0; i < parts.length; i++) {    if (!parts[i].isRepeatable()) {      return false;    }  }  return true;}  }
class C{  @Override public void invalidateDrawable(Drawable who){  invalidateSelf();}  }
class C{  public IElementType parsePackage(){  CharSequence tokenText=yytext();  Matcher m=AMBIGUOUS_PACKAGE_PATTERN.matcher(tokenText);  if (m.matches()) {    String packageIdentifier=m.group(1);    preparsedTokensList.clear();    int packageIdentifierEnd=getTokenStart() + packageIdentifier.length();    CustomToken barewordToken=new CustomToken(packageIdentifierEnd,getTokenEnd(),IDENTIFIER);    preparsedTokensList.add(barewordToken);    setTokenEnd(packageIdentifierEnd);    return parsePackageCanonical();  } else {    throw new RuntimeException("Inappropriate package name " + tokenText);  }}  }
class C{  private PostgreSQLViewLoader(){}  }
class C{  private boolean applyFilter(){  boolean needsFiltering=collapsed || length(filterText) > 0 || hasLogTypeFilters();  if (needsFiltering) {    if (entryLookup != null) {      entryLookup.clear();    }    useFilteredFromEntries(entries);    return true;  }  return removeFilter();}  }
class C{  public final AssertSubscriber<T> configureValuesStorage(boolean enabled){  this.valuesStorage=enabled;  return this;}  }
class C{  public int[] keys(){  int[] keys=new int[size()];  int[] k=_set;  Object[] values=_values;  for (int i=k.length, j=0; i-- > 0; ) {    if (isFull(values,i)) {      keys[j++]=k[i];    }  }  return keys;}  }
class C{  private static String long2Str(long value){  return value < 10 ? "0" + value : Long.toString(value);}  }
class C{  public NewBarChartAction(final Workspace workspace){  super("Bar Chart",workspace);  putValue(SMALL_ICON,ResourceManager.getImageIcon("BarChart.png"));  putValue(SHORT_DESCRIPTION,"New Bar Chart");}  }
class C{  public void deliver(List<? extends IOObject> ioObjectList){  Iterator<PortPair> portIterator=getManagedPairs().iterator();  for (  IOObject object : ioObjectList) {    PortPair pair=portIterator.next();    IOObject data=pair.inputPort.getAnyDataOrNull();    while (data == null) {      data=portIterator.next().inputPort.getAnyDataOrNull();    }    pair.outputPort.deliver(object);  }}  }
class C{  public void drawItemStack(ItemStack itemStack,int x,int y,RenderItem renderItem,boolean transparent){  GL11.glColor4f(1.0f,1.0f,1.0f,1.0f);  int colorOverlay=new Color(139,139,139,160).hashCode();  RenderHelper.enableGUIStandardItemLighting();  renderItem.renderItemAndEffectIntoGUI(itemStack,x,y);  GL11.glEnable(GL11.GL_BLEND);  GL11.glBlendFunc(GL11.GL_SRC_ALPHA,GL11.GL_ONE_MINUS_SRC_ALPHA);  GlStateManager.disableDepth();  GlStateManager.colorMask(true,true,true,false);  if (transparent) {    this.zLevel+=50.0f;    renderItem.zLevel+=50.0f;    this.drawGradientRect(x,y,x + 16,y + 16,colorOverlay,colorOverlay);    this.zLevel-=50.0f;    renderItem.zLevel-=50.0f;  }  GlStateManager.colorMask(true,true,true,true);  GlStateManager.enableDepth();  GL11.glColor4f(1.0f,1.0f,1.0f,1.0f);}  }
class C{  @Override public void paintBorder(Component c,Graphics gr,int x,int y,int width,int height){  if (image == null)   return;  Graphics2D g=(Graphics2D)gr;  int top=imageInsets.top;  int left=imageInsets.left;  int bottom=imageInsets.bottom;  int right=imageInsets.right;  int imgWidth=image.getWidth();  int imgHeight=image.getHeight();  if (fillContentArea) {    if (width == imgWidth && height == imgHeight) {      g.drawImage(image,x,y,c);      return;    }  }  if (width == imgWidth) {    left=imgWidth;    right=0;  }  if (height == imgHeight) {    top=imgHeight;    bottom=0;  }  if (width < left + right) {    left=Math.min(left,width / 2);    right=width - left;  }  if (height < top + bottom) {    top=Math.min(top,height / 2);    bottom=height - top;  }  if (top > 0 && left > 0) {    g.drawImage(image,x,y,x + left,y + top,0,0,left,top,c);  }  if (top > 0 && right > 0) {    g.drawImage(image,x + width - right,y,x + width,y + top,imgWidth - right,0,imgWidth,top,c);  }  if (bottom > 0 && left > 0) {    g.drawImage(image,x,y + height - bottom,x + left,y + height,0,imgHeight - bottom,left,imgHeight,c);  }  if (bottom > 0 && right > 0) {    g.drawImage(image,x + width - right,y + height - bottom,x + width,y + height,imgWidth - right,imgHeight - bottom,imgWidth,imgHeight,c);  }  BufferedImage subImg=null;  TexturePaint paint;  if (top > 0 && left + right < width) {    subImg=image.getSubimage(left,0,imgWidth - right - left,top);    paint=new TexturePaint(subImg,new Rectangle(x + left,y,imgWidth - left - right,top));    g.setPaint(paint);    g.fillRect(x + left,y,width - left - right,top);  }  if (bottom > 0 && left + right < width) {    subImg=image.getSubimage(left,imgHeight - bottom,imgWidth - right - left,bottom);    paint=new TexturePaint(subImg,new Rectangle(x + left,y + height - bottom,imgWidth - left - right,bottom));    g.setPaint(paint);    g.fillRect(x + left,y + height - bottom,width - left - right,bottom);  }  if (left > 0 && top + bottom < height) {    subImg=image.getSubimage(0,top,left,imgHeight - top - bottom);    paint=new TexturePaint(subImg,new Rectangle(x,y + top,left,imgHeight - top - bottom));    g.setPaint(paint);    g.fillRect(x,y + top,left,height - top - bottom);  }  if (right > 0 && top + bottom < height) {    subImg=image.getSubimage(imgWidth - right,top,right,imgHeight - top - bottom);    paint=new TexturePaint(subImg,new Rectangle(x + width - right,y + top,right,imgHeight - top - bottom));    g.setPaint(paint);    g.fillRect(x + width - right,y + top,right,height - top - bottom);  }  if (fillContentArea) {    g.setColor(Color.yellow);    if (left + right < width && top + bottom < height) {      subImg=image.getSubimage(left,top,imgWidth - right - left,imgHeight - top - bottom);      paint=new TexturePaint(subImg,new Rectangle(x + left,y + top,imgWidth - right - left,imgHeight - top - bottom));      g.setPaint(paint);      g.fillRect(x + left,y + top,width - right - left,height - top - bottom);    }  }}  }
class C{  public Argument(final String primaryForm,final boolean argRequired,final String... parameterNames){  forms.add(primaryForm);  paramNames=parameterNames;  required=argRequired;}  }
class C{  public static int encode(byte[] data,OutputStream out) throws IOException {  return encoder.encode(data,0,data.length,out);}  }
class C{  private boolean addViewItem(int index,boolean first){  View view=getItemView(index);  if (view != null) {    if (first) {      itemsLayout.addView(view,0);    } else {      itemsLayout.addView(view);    }    return true;  }  return false;}  }
class C{  public static MethodHandle unboxCast(Wrapper type){  return unbox(type,3);}  }
class C{  @VisibleForTesting List<String> parseKeys(List<String> keys){  List<String> parsedKeys=new ArrayList<String>();  for (  String key : keys) {    parsedKeys.addAll(Arrays.asList(StringUtils.split(StringUtils.trim(key),",")));  }  return parsedKeys;}  }
class C{  public ControlTower(){  setAlwaysOnTop(true);  initComponents();  droneConfigWindow=new DroneConfig(this,true);  keyboardControlConfigWindow=new KeyboardControlConfig(this,true);  controlConfigWindow=new ControlConfig(this,true,controlMap);  videoPanel.add(video);  jPanel2.add(gauges);  initController();  initDrone();  flipSticks.set(prefs.getBoolean("FLIP_STICKS",false));  flipSticksCheckbox.setSelected(flipSticks.get());}  }
class C{  public SignatureVisitor visitExceptionType(){  return this;}  }
class C{  @Override public void onPerformSync(Account account,Bundle extras,String authority,ContentProviderClient provider,SyncResult syncResult){  mEventBus.post(new SyncStartedEvent());  if (App.getInstance().getHealthMonitor().isApiUnavailable()) {    LOG.e("Abort sync: Buendia API is unavailable.");    mEventBus.post(new SyncFailedEvent());    return;  }  try {    checkCancellation("before work started");  } catch (  CancellationException e) {    mEventBus.post(new SyncCanceledEvent());    return;  }  Set<SyncPhase> phases=new HashSet<>();  for (  SyncPhase phase : SyncPhase.values()) {    if (extras.getBoolean(phase.name())) {      phases.add(phase);    }  }  boolean fullSync=phases.isEmpty() || extras.getBoolean(SyncOption.FULL_SYNC.name());  if (fullSync) {    Collections.addAll(phases,SyncPhase.values());  }  LOG.i("Requested phases are: %s",phases);  reportProgress(0,R.string.sync_in_progress);  BuendiaProvider buendiaProvider=(BuendiaProvider)(provider.getLocalContentProvider());  SQLiteDatabaseTransactionHelper dbTransactionHelper=buendiaProvider.getDbTransactionHelper();  LOG.i("Setting savepoint %s",SYNC_SAVEPOINT_NAME);  dbTransactionHelper.startNamedTransaction(SYNC_SAVEPOINT_NAME);  TimingLogger timings=new TimingLogger(LOG.tag,"onPerformSync");  try {    if (fullSync) {      Instant syncStartTime=Instant.now();      LOG.i("Recording full sync start time: " + syncStartTime);      storeFullSyncStartTime(provider,syncStartTime);    }    float progressIncrement=100.0f / phases.size();    int completedPhases=0;    for (    SyncPhase phase : SyncPhase.values()) {      if (!phases.contains(phase)) {        continue;      }      checkCancellation("before " + phase);      LOG.i("--- Begin %s ---",phase);      reportProgress((int)(completedPhases * progressIncrement),phase.message);      phase.runnable.sync(mContentResolver,syncResult,provider);      timings.addSplit(phase.name() + " phase completed");      completedPhases++;    }    reportProgress(100,R.string.completing_sync);    if (fullSync) {      Instant syncEndTime=Instant.now();      LOG.i("Recording full sync end time: " + syncEndTime);      storeFullSyncEndTime(provider,syncEndTime);    }  } catch (  CancellationException e) {    rollbackSavepoint(dbTransactionHelper);    LOG.i(e,"Sync canceled");    mEventBus.post(new SyncCanceledEvent());    return;  }catch (  OperationApplicationException e) {    rollbackSavepoint(dbTransactionHelper);    LOG.e(e,"Error updating database during sync");    syncResult.databaseError=true;    mEventBus.post(new SyncFailedEvent());    return;  }catch (  Throwable e) {    rollbackSavepoint(dbTransactionHelper);    LOG.e(e,"Error during sync");    syncResult.stats.numIoExceptions++;    mEventBus.post(new SyncFailedEvent());    return;  } finally {    LOG.i("Releasing savepoint %s",SYNC_SAVEPOINT_NAME);    dbTransactionHelper.releaseNamedTransaction(SYNC_SAVEPOINT_NAME);    dbTransactionHelper.close();  }  timings.dumpToLog();  mEventBus.post(new SyncSucceededEvent());}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  @Override public Range findRangeBounds(XYDataset dataset){  return findRangeBounds(dataset,true);}  }
class C{  public static CommandResult execCommand(List<String> commands,boolean isRoot,boolean isNeedResultMsg){  return execCommand(commands == null ? null : commands.toArray(new String[]{}),isRoot,isNeedResultMsg);}  }
class C{  public SkuListView(final String id,final Collection<ProductSku> skus,final ProductSku currentSku,final boolean productView){  super(id);  this.currentSku=currentSku;  this.productView=productView;  skusToShow=new ArrayList<ProductSku>(skus);}  }
class C{  public ISicresAbstractDocumentVO search(ISicresAbstractDocumentVO document,String path,ContentServiceSoapBindingStub contentRepository,RepositoryServiceSoapBindingStub repository) throws Exception {  Reference reference=new Reference(STORE,document.getId(),path);  Content[] readResult=contentRepository.read(new Predicate(new Reference[]{reference},STORE,null),Constants.PROP_CONTENT);  byte[] contentBytes=null;  if (readResult != null) {    Content content=(Content)readResult[0];    contentBytes=UtilsFile.getByteContent(content);    document.setContent(contentBytes);  }  Predicate predicate=new Predicate(new Reference[]{reference},null,null);  Node[] nodes=repository.get(predicate);  AlfrescoDatosEspecificosVO datosEspecificosVO=(AlfrescoDatosEspecificosVO)document.getDatosEspecificos();  Map metadata=new HashMap();  if (nodes != null) {    for (int i=0; i < nodes.length; i++) {      Node node=nodes[i];      NamedValue[] prop=node.getProperties();      for (int f=0; f < prop.length; f++) {        NamedValue namedValue=(NamedValue)prop[f];        String name=namedValue.getName().split("}")[1];        AlfrescoDatosEspecificosValueVO alfrescoDatosEspecificosValueVO=null;        alfrescoDatosEspecificosValueVO=(AlfrescoDatosEspecificosValueVO)datosEspecificosVO.getValues().get(name);        if (alfrescoDatosEspecificosValueVO != null) {          alfrescoDatosEspecificosValueVO.setValue(namedValue.getValue());          metadata.put(name,alfrescoDatosEspecificosValueVO);        }      }    }  }  AlfrescoDatosEspecificosValueVO alfrescoDatosEspecificosValueVO=(AlfrescoDatosEspecificosValueVO)metadata.get(datosEspecificosVO.getFileKey());  datosEspecificosVO.setValues(metadata);  document.setName(alfrescoDatosEspecificosValueVO.getValue());  return document;}  }
class C{  public static String parseJobHashBody(String s){  return s == null ? PINLATER_JOB_HASH_DEFAULT_BODY : s;}  }
class C{  public void changeHighlight(Object tag,int p0,int p1) throws BadLocationException {  Document doc=component.getDocument();  if (tag instanceof LayeredHighlightInfo) {    LayeredHighlightInfo lhi=(LayeredHighlightInfo)tag;    if (lhi.width > 0 && lhi.height > 0) {      component.repaint(lhi.x,lhi.y,lhi.width,lhi.height);    }    lhi.width=lhi.height=0;    lhi.p0=doc.createPosition(p0);    lhi.p1=doc.createPosition(p1);    safeDamageRange(Math.min(p0,p1),Math.max(p0,p1));  } else {    HighlightInfo info=(HighlightInfo)tag;    int oldP0=info.p0.getOffset();    int oldP1=info.p1.getOffset();    if (p0 == oldP0) {      safeDamageRange(Math.min(oldP1,p1),Math.max(oldP1,p1));    } else     if (p1 == oldP1) {      safeDamageRange(Math.min(p0,oldP0),Math.max(p0,oldP0));    } else {      safeDamageRange(oldP0,oldP1);      safeDamageRange(p0,p1);    }    info.p0=doc.createPosition(p0);    info.p1=doc.createPosition(p1);  }}  }
class C{  public AccessArrayNode(NodeClass<? extends AccessArrayNode> c,Stamp stamp,ValueNode array){  super(c,stamp);  this.array=array;}  }
class C{  public String toString(){  return this.timelineTrackBO.toString();}  }
class C{  public StreamingConfig updateStreamingConfig(StreamingConfig desc) throws IOException {  if (desc.getUuid() == null || desc.getName() == null) {    throw new IllegalArgumentException("SteamingConfig Illegal.");  }  String name=desc.getName();  if (!streamingMap.containsKey(name)) {    throw new IllegalArgumentException("StreamingConfig '" + name + "' does not exist.");  }  String path=desc.getResourcePath();  getStore().putResource(path,desc,STREAMING_SERIALIZER);  StreamingConfig ndesc=loadStreamingConfigAt(path);  streamingMap.put(ndesc.getName(),desc);  return ndesc;}  }
class C{  public static PropertyInfoUpdate configureFtps(ConnectEmcFtps ftps){  PropertyInfoUpdate propInfo=new PropertyInfoUpdate();  propInfo.addProperty("system_connectemc_transport",FTPS_TRANSPORT);  if (ftps.getSafeEncryption() != null) {    propInfo.addProperty("system_connectemc_encrypt",(ftps.getSafeEncryption()));  }  if (ftps.getHostName() != null) {    propInfo.addProperty("system_connectemc_ftps_hostname",ftps.getHostName());  }  if (ftps.getEmailServer() != null) {    propInfo.addProperty("system_connectemc_smtp_server",ftps.getEmailServer());  }  if (ftps.getNotifyEmailAddress() != null) {    propInfo.addProperty("system_connectemc_smtp_to",ftps.getNotifyEmailAddress());  }  if (ftps.getEmailSender() != null) {    propInfo.addProperty("system_connectemc_smtp_from",ftps.getEmailSender());  }  return propInfo;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Boolean.valueOf(java.util.Arrays.asList(stack.getUIMgrSafe().getVideoFrame().getPCRestrictions()).contains(getString(stack)));}  }
class C{  public boolean retainEntries(TFloatFloatProcedure procedure){  boolean modified=false;  byte[] states=_states;  float[] keys=_set;  float[] values=_values;  for (int i=keys.length; i-- > 0; ) {    if (states[i] == FULL && !procedure.execute(keys[i],values[i])) {      removeAt(i);      modified=true;    }  }  return modified;}  }
class C{  private static List<String> rdfOpenTags(String s) throws IOException {  String withoutSpaces=Pattern.compile("^\\s+",Pattern.MULTILINE).matcher(s).replaceAll("");  List<String> rdfLines=new ArrayList<String>();  for (  String l : IOUtils.readLines(new StringReader(withoutSpaces))) {    if (l.startsWith("<rdf:")) {      rdfLines.add(l.replaceAll(" .*",""));    }  }  return rdfLines;}  }
class C{  @SuppressWarnings("rawtypes") public SPOPredicate(final String relationName,final IVariableOrConstant<IV> s,final IVariableOrConstant<IV> p,final IVariableOrConstant<IV> o,final boolean optional){  super(new IVariableOrConstant[]{s,p,o},new NV(Annotations.RELATION_NAME,new String[]{relationName}),new NV(Annotations.OPTIONAL,optional));}  }
class C{  public void createOrUpdateConfig(Object objToPersist,String lockName,String siteId,String configKInd,String configId,String ConfigKey) throws Exception {  InterProcessLock lock=acquireLock(lockName);  try {    if (lock != null) {      Configuration config=coordinator.queryConfiguration(siteId,configKInd,configId);      ConfigurationImpl configImpl=null;      if (config == null) {        configImpl=new ConfigurationImpl();        configImpl.setId(configId);        configImpl.setKind(configKInd);        log.debug("Creating new config");      } else {        configImpl=(ConfigurationImpl)config;        if (config.getKind() == null) {          ((ConfigurationImpl)config).setKind(configKInd);        }        if (config.getId() == null) {          ((ConfigurationImpl)config).setId(configId);        }        log.debug("Updating existing config");      }      configImpl.setConfig(ConfigKey,SerializerUtils.serializeAsBase64EncodedString(objToPersist));      coordinator.persistServiceConfiguration(siteId,configImpl);      log.debug("Updated config successfully");    }  }  finally {    releaseLock(lock);  }}  }
class C{  public boolean isCleanSession(){  return cleanSession;}  }
class C{  public Block(NetworkParameters params,byte[] payloadBytes,MessageSerializer serializer,int length) throws ProtocolException {  super(params,payloadBytes,0,serializer,length);}  }
class C{  public String globalInfo(){  return "Generates random instances based on a Bayes network.";}  }
class C{  @Override public void bindViewHolder(BasePlanViewHolder basePlanViewHolder,int position){  basePlanViewHolder.baseCost.setText(Currency.localize(basePlan.getBaseCost(),false));  basePlanViewHolder.addonCost.setText(Currency.localize(basePlan.getAddonCost(),false));}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @AfterBatch public void afterDeliver(){  SegmentStream nodeStream=_nodeStream;  if (nodeStream != null) {    if (_isBlobDirty) {      _isBlobDirty=false;      nodeStream.fsync(Result.ignore());    } else {      nodeStream.flush(Result.ignore());    }  }}  }
class C{  public static boolean isStatic(int flags){  return (flags & STATIC) != 0;}  }
class C{  protected Category(Wikipedia wiki,long id) throws WikiPageNotFoundException {  this.wiki=wiki;  catDAO=new CategoryDAO(wiki);  createCategory(id);}  }
class C{  private void addNode(Node node) throws SyncException {  Short nodeId=node.getNodeId();  if (allNodes.get(nodeId) != null) {    throw new SyncException("Error adding node " + node + ": a node with that ID already exists");  }  allNodes.put(nodeId,node);  Short domainId=node.getDomainId();  List<Node> localDomain=localDomains.get(domainId);  if (localDomain == null) {    localDomains.put(domainId,localDomain=new ArrayList<Node>());  }  localDomain.add(node);}  }
class C{  public CommonDialogWindow createUpdateSoftwareModuleWindow(final Long baseSwModuleId){  this.baseSwModuleId=baseSwModuleId;  resetComponents();  populateValuesOfSwModule();  createWindow();  return window;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case MappingPackage.FAULT_SOURCE__PROPERTY:    return property != null;}return super.eIsSet(featureID);}  }
class C{  public static double interp(int scale,double val,double dist[]){switch (scale) {case Constants.LINEAR_SCALE:    return linearInterp(val,dist[0],dist[dist.length - 1]);case Constants.LOG_SCALE:  return logInterp(val,dist[0],dist[dist.length - 1]);case Constants.SQRT_SCALE:return sqrtInterp(val,dist[0],dist[dist.length - 1]);case Constants.QUANTILE_SCALE:return quantile(val,dist);}throw new IllegalArgumentException("Unrecognized scale value: " + scale);}  }
class C{  public JobManagerException(){  super();}  }
class C{  @Override protected Object resolve(final Object obj){  final BigdataValue val=(BigdataValue)obj;  final IV iv=val.getIV();  iv.setValue(val);  return obj;}  }
class C{  private void updateNotification(int notificationId,int mediaType,String url){  if (doesNotificationExist(notificationId) && !doesNotificationNeedUpdate(notificationId,mediaType)) {    return;  }  destroyNotification(notificationId);  if (mediaType != MEDIATYPE_NO_MEDIA) {    createNotification(notificationId,mediaType,url);  }  if (mNotifications.size() == 0)   stopSelf();}  }
class C{  public int size(){  return mSize;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public int nextFontRunIndex(CodePointIterator iter){  int cp=iter.next();  int fontIndex=1;  if (cp != CodePointIterator.DONE) {    fontIndex=getFontIndex(cp);    while ((cp=iter.next()) != CodePointIterator.DONE) {      if (getFontIndex(cp) != fontIndex) {        iter.prev();        break;      }    }  }  return fontIndex;}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean equals(Object other){  if (_set.equals(other)) {    return true;  } else   if (other instanceof Set) {    Set that=(Set)other;    if (that.size() != _set.size()) {      return false;    } else {      Iterator it=that.iterator();      for (int i=that.size(); i-- > 0; ) {        Object val=it.next();        if (val instanceof Integer) {          int v=unwrap(val);          if (_set.contains(v)) {          } else {            return false;          }        } else {          return false;        }      }      return true;    }  } else {    return false;  }}  }
class C{  public List<Payment> createPaymentsToAuthorize(final CustomerOrder order,final boolean forceSinglePaymentIn,final Map params,final String transactionOperation){  Assert.notNull(order,"Customer order expected");  final boolean forceSinglePayment=forceSinglePaymentIn || params.containsKey("forceSinglePayment");  final Payment templatePayment=fillPaymentPrototype(order,getPaymentGateway().createPaymentPrototype(transactionOperation,params),transactionOperation,getPaymentGateway().getLabel());  final List<Payment> rez=new ArrayList<Payment>();  if (forceSinglePayment || !getPaymentGateway().getPaymentGatewayFeatures().isSupportAuthorizePerShipment()) {    final List<CustomerOrderPayment> existing=customerOrderPaymentService.findBy(order.getOrdernum(),null,Payment.PAYMENT_STATUS_OK,transactionOperation);    if (existing.isEmpty()) {      Payment payment=(Payment)SerializationUtils.clone(templatePayment);      BigDecimal runningTotal=Total.ZERO;      BigDecimal runningTotalTax=Total.ZERO;      final Iterator<CustomerOrderDelivery> deliveryIt=order.getDelivery().iterator();      while (deliveryIt.hasNext()) {        final CustomerOrderDelivery delivery=deliveryIt.next();        final Pair<BigDecimal,BigDecimal> amountAndTax=fillPayment(order,delivery,payment,true,runningTotal,runningTotalTax,!deliveryIt.hasNext());        runningTotal=runningTotal.add(amountAndTax.getFirst());        runningTotalTax=runningTotalTax.add(amountAndTax.getSecond());      }      rez.add(payment);    }  } else {    BigDecimal runningTotal=Total.ZERO;    BigDecimal runningTotalTax=Total.ZERO;    final Iterator<CustomerOrderDelivery> deliveryIt=order.getDelivery().iterator();    while (deliveryIt.hasNext()) {      final CustomerOrderDelivery delivery=deliveryIt.next();      final List<CustomerOrderPayment> existing=customerOrderPaymentService.findBy(order.getOrdernum(),delivery.getDeliveryNum(),Payment.PAYMENT_STATUS_OK,transactionOperation);      if (existing.isEmpty()) {        Payment payment=(Payment)SerializationUtils.clone(templatePayment);        final Pair<BigDecimal,BigDecimal> amountAndTax=fillPayment(order,delivery,payment,false,runningTotal,runningTotalTax,!deliveryIt.hasNext());        runningTotal=runningTotal.add(amountAndTax.getFirst());        runningTotalTax=runningTotalTax.add(amountAndTax.getSecond());        rez.add(payment);      }    }  }  return rez;}  }
class C{  public void start(GridKernalContext ctx) throws IgniteCheckedException {  this.ctx=ctx;  clockSync=ctx.clockSync();  log=ctx.log(GridClockServer.class);  try {    int startPort=ctx.config().getTimeServerPortBase();    int portRange=ctx.config().getTimeServerPortRange();    int endPort=portRange == 0 ? startPort : startPort + portRange - 1;    InetAddress locHost;    if (F.isEmpty(ctx.config().getLocalHost())) {      try {        locHost=U.getLocalHost();      } catch (      IOException e) {        locHost=InetAddress.getLoopbackAddress();        U.warn(log,"Failed to get local host address, will use loopback address: " + locHost);      }    } else     locHost=InetAddress.getByName(ctx.config().getLocalHost());    for (int p=startPort; p <= endPort; p++) {      try {        sock=new DatagramSocket(p,locHost);        if (log.isDebugEnabled())         log.debug("Successfully bound time server [host=" + locHost + ", port="+ p+ ']');        break;      } catch (      SocketException e) {        if (log.isDebugEnabled())         log.debug("Failed to bind time server socket [host=" + locHost + ", port="+ p+ ", err="+ e.getMessage()+ ']');      }    }    if (sock == null)     throw new IgniteCheckedException("Failed to bind time server socket within specified port range " + "[locHost=" + locHost + ", startPort="+ startPort+ ", endPort="+ endPort+ ']');  } catch (  IOException e) {    throw new IgniteCheckedException("Failed to start time server (failed to get local host address)",e);  }}  }
class C{  public WOrderReceiptIssue(){  Env.setContext(Env.getCtx(),form.getWindowNo(),"IsSOTrx","Y");  try {    fillPicks();    jbInit();    dynInit();    pickcombo.addEventListener(Events.ON_CHANGE,this);  } catch (  Exception e) {    throw new AdempiereException(e);  }}  }
class C{  public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("RSeqParser.parse");  RSeq rseq=new RSeq();  try {    headerName(TokenTypes.RSEQ);    rseq.setHeaderName(SIPHeaderNames.RSEQ);    String number=this.lexer.number();    try {      rseq.setSeqNumber(Long.parseLong(number));    } catch (    InvalidArgumentException ex) {      throw createParseException(ex.getMessage());    }    this.lexer.SPorHT();    this.lexer.match('\n');    return rseq;  }  finally {    if (debug)     dbg_leave("RSeqParser.parse");  }}  }
class C{  public static boolean isExternalStorageWritable(){  return Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState());}  }
class C{  private void pulse(){  primaryThread=Thread.currentThread();  server.getSessionRegistry().pulse();  for (Iterator<GlowTask> it=tasks.values().iterator(); it.hasNext(); ) {    GlowTask task=it.next();switch (task.shouldExecute()) {case RUN:      if (task.isSync()) {        task.run();      } else {        asyncTaskExecutor.submit(task);      }    break;case STOP:  it.remove();}}try {int currentTick=worlds.beginTick();try {asyncTaskExecutor.submit(tickEndRun);} catch (RejectedExecutionException ex) {worlds.stop();return;}Runnable tickTask;synchronized (inTickTaskCondition) {while (!worlds.isTickComplete(currentTick)) {  while ((tickTask=inTickTasks.poll()) != null) {    tickTask.run();  }  inTickTaskCondition.wait();}}} catch (InterruptedException e) {Thread.currentThread().interrupt();}}  }
class C{  public String randomSeedTipText(){  return "Seed for the random number generator.";}  }
class C{  public AbstractTreeNode(TreeNode<?> parent,T data,TreeStructure treeStructure,EventBus eventBus){  this.parent=parent;  this.data=data;  this.treeStructure=treeStructure;  this.eventBus=eventBus;  cachedChildren=new ArrayList<>();}  }
class C{  public mxRectangle(mxRectangle rect){  this(rect.getX(),rect.getY(),rect.getWidth(),rect.getHeight());}  }
class C{  public AsyncServletStreamServerConfigurationImpl(ServletContainerAdapter servletContainerAdapter){  this.servletContainerAdapter=servletContainerAdapter;}  }
class C{  private void arrangeFramesCascading(){  JInternalFrame[] allFrames=getAllFrames();  if (allFrames.length == 0) {    return;  }  manager.setNormalSize();  Insets insets=getInsets();  int x=insets.left;  int y=insets.top;  int frameOffset=0;  for (int i=allFrames.length - 1; i >= 0; i--) {    Point p=SwingUtilities.convertPoint(allFrames[i].getContentPane(),0,0,allFrames[i]);    frameOffset=Math.max(frameOffset,Math.max(p.x,p.y));  }  int frameHeight=(getBounds().height - insets.top - insets.bottom) - allFrames.length * frameOffset;  int frameWidth=(getBounds().width - insets.left - insets.right) - allFrames.length * frameOffset;  for (int i=allFrames.length - 1; i >= 0; i--) {    try {      allFrames[i].setMaximum(false);    } catch (    PropertyVetoException e) {      e.printStackTrace();    }    allFrames[i].setBounds(x,y,frameWidth,frameHeight);    x=x + frameOffset;    y=y + frameOffset;  }  checkDesktopSize();}  }
class C{  private int measureShort(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=(int)(2 * mRadius + getPaddingTop() + getPaddingBottom() + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public static EdgeListGraphSingleConnections serializableInstance(){  return new EdgeListGraphSingleConnections();}  }
class C{  @SuppressWarnings("unchecked") public void extractPath(){  if (states != null)   return;  final int newPrefixLength=varState.depth() + 1;  final int length=original.states.length + newPrefixLength - varPosition - 1;  states=new State[length];  State<S> newState=varState;  for (int i=newPrefixLength - 1; i >= 0 && newState != null; newState=newState.parent(), --i) {    states[i]=newState;  }  for (int i=varPosition + 1, sz=original.states.length, j=newPrefixLength; i < sz; i++, ++j) {    assert j < states.length;    states[j]=original.states[i];  }}  }
class C{  public static File storeVideoInExternalDirectory(Context context,Response response,String videoName){  final File file=getVideoStorageDir(videoName);  if (file != null) {    try {      final InputStream inputStream=response.getBody().in();      final OutputStream outputStream=new FileOutputStream(file);      IOUtils.copy(inputStream,outputStream);      outputStream.close();      inputStream.close();      notifyMediaScanners(context,file);      return file;    } catch (    FileNotFoundException e) {      e.printStackTrace();    }catch (    IOException e) {      e.printStackTrace();    }  }  return null;}  }
class C{  private void showSignInPage(){  setContentView(R.layout.signin_welcome);  Button button=(Button)findViewById(R.id.sign_in);  button.setOnClickListener(this);}  }
class C{  public void writeHeapDump(PrintWriter out) throws IOException {  throw new ConfigException(L.l("HeapDump requires Resin Professional"));}  }
class C{  public void start(){  TaskService.singleton().spawn(getFuture());}  }
class C{  public ComplexDecimator(int rate){  mDecimationRate=rate;}  }
class C{  private void scroll(int row){  int rows=data.getRows();  if (rows < 1) {    return;  }  if (row < 0) {    data.setFirst(0);  } else   if (row >= count()) {    data.setFirst(count() - 1);  } else {    data.setFirst(row - (row % rows));  }}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MReportTree[ElementType=");  sb.append(m_ElementType).append(",TreeType=").append(m_TreeType).append(",").append(m_tree).append("]");  return sb.toString();}  }
class C{  public String extractConsumerNonce(String returnTo,String opUrl){  if (DEBUG)   _log.debug("Extracting consumer nonce...");  String nonce=null;  String signature=null;  URL returnToUrl;  try {    returnToUrl=new URL(returnTo);  } catch (  MalformedURLException e) {    _log.error("Invalid return_to: " + returnTo,e);    return null;  }  String query=returnToUrl.getQuery();  if (query == null) {    _log.error("Missing nonce in return_to query parameters, required for v1 responses");    return null;  }  String[] params=query.split("&");  for (int i=0; i < params.length; i++) {    String keyVal[]=params[i].split("=",2);    try {      if (keyVal.length == 2 && "openid.rpnonce".equals(keyVal[0])) {        nonce=URLDecoder.decode(keyVal[1],"UTF-8");        if (DEBUG)         _log.debug("Extracted consumer nonce: " + nonce);      }      if (keyVal.length == 2 && "openid.rpsig".equals(keyVal[0])) {        signature=URLDecoder.decode(keyVal[1],"UTF-8");        if (DEBUG)         _log.debug("Extracted consumer nonce signature: " + signature);      }    } catch (    UnsupportedEncodingException e) {      _log.error("Error extracting consumer nonce / signarure.",e);      return null;    }  }  if (signature == null) {    _log.error("Null consumer nonce signature.");    return null;  }  String signed=returnTo.substring(0,returnTo.indexOf("&openid.rpsig="));  if (DEBUG)   _log.debug("Consumer signed text:\n" + signed);  try {    if (DEBUG)     _log.debug("Loading private association for opUrl " + opUrl);    Association privateAssoc=_privateAssociations.load(opUrl);    if (privateAssoc == null) {      _log.error("Null private association.");      return null;    }    if (privateAssoc.verifySignature(signed,signature)) {      _log.info("Consumer nonce signature verified.");      return nonce;    } else {      _log.error("Consumer nonce signature failed.");      return null;    }  } catch (  AssociationException e) {    _log.error("Error verifying consumer nonce signature.",e);    return null;  }}  }
class C{  public void clear(float r,float g,float b,float a){  this.clear(r,g,b,a,1.0D);}  }
class C{  public void testVaryingFsync() throws Exception {  long[] fsyncIntervals={20,100,500,2000};  int[] bufferSizes={65536,524288};  int run=0;  for (  long fsync : fsyncIntervals) {    for (    int buffer : bufferSizes) {      run++;      File logDir=prepareLogDir("testVaryingFsync");      DiskLog log=new DiskLog();      log.setDoChecksum(false);      log.setReadOnly(false);      log.setLogDir(logDir.getAbsolutePath());      log.setLogFileSize(1000000);      log.setFlushIntervalMillis(fsync);      log.setBufferSize(buffer);      long start=System.currentTimeMillis();      log.prepare();      writeEventsToLog(log,0,100000);      log.release();      long end=System.currentTimeMillis();      double elapsed=(end - start) / 1000.0;      String msg=String.format("Test %d: fsync ms=%d, buffer=%d, elapsed secs=%f\n",run,fsync,buffer,elapsed);      logger.info(msg);    }  }}  }
class C{  public boolean checkNand(String flag1,String flag2){  if (isSet(flag1) && isSet(flag2)) {    setParseMessage("Only one of " + LONG_FLAG_PREFIX + flag1+ " or "+ LONG_FLAG_PREFIX+ flag2+ " can be set");    return false;  }  return true;}  }
class C{  public boolean changeExecuted(){  return fChangeExecuted;}  }
class C{  private void init(DerValue encoding) throws Asn1Exception, RealmException, KrbApErrException, IOException {  if (((encoding.getTag() & (byte)0x1F) != (byte)0x16) || (encoding.isApplication() != true) || (encoding.isConstructed() != true)) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  DerValue der, subDer;  der=encoding.getData().getDerValue();  if (der.getTag() != DerValue.tag_Sequence) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  subDer=der.getData().getDerValue();  if ((subDer.getTag() & 0x1F) == 0x00) {    pvno=subDer.getData().getBigInteger().intValue();    if (pvno != Krb5.PVNO) {      throw new KrbApErrException(Krb5.KRB_AP_ERR_BADVERSION);    }  } else {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  subDer=der.getData().getDerValue();  if ((subDer.getTag() & 0x1F) == 0x01) {    msgType=subDer.getData().getBigInteger().intValue();    if (msgType != Krb5.KRB_CRED) {      throw new KrbApErrException(Krb5.KRB_AP_ERR_MSG_TYPE);    }  } else {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  subDer=der.getData().getDerValue();  if ((subDer.getTag() & 0x1F) == 0x02) {    DerValue subsubDer=subDer.getData().getDerValue();    if (subsubDer.getTag() != DerValue.tag_SequenceOf) {      throw new Asn1Exception(Krb5.ASN1_BAD_ID);    }    Vector<Ticket> v=new Vector<>();    while (subsubDer.getData().available() > 0) {      v.addElement(new Ticket(subsubDer.getData().getDerValue()));    }    if (v.size() > 0) {      tickets=new Ticket[v.size()];      v.copyInto(tickets);    }  } else {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  encPart=EncryptedData.parse(der.getData(),(byte)0x03,false);  if (der.getData().available() > 0) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }}  }
class C{  public void testTxLocalPessimisticRepeatableRead() throws Exception {  checkTx(LOCAL,PESSIMISTIC,REPEATABLE_READ);}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.TEMPLATE_LITERAL___GET_VALUE_AS_STRING:    return getValueAsString();}return super.eInvoke(operationID,arguments);}  }
class C{  private void handlePhiInsns(){  for (  PhiInsn insn : phiInsns) {    processPhiInsn(insn);  }}  }
class C{  @Override public synchronized void clear(){  for (  CacheElement ce : list) {    Bitmap b=super.get(ce.key);    if (b != null && ce.recycleable) {      b.recycle();    }  }  list.clear();  super.clear();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:18.122 -0500",hash_original_method="6F91201558DE19CA8BB7D7C8218AE116",hash_generated_method="C1453933B6DCD4B8D289D21A9ACAC6E5") public StringBuffer insert(int index,double d){  addTaint(d);  addTaint(index);  return this;}  }
class C{  public static void main(String[] args) throws FloodlightModuleException {  try {    System.setProperty("org.restlet.engine.loggerFacadeClass","org.restlet.ext.slf4j.Slf4jLoggerFacade");    CmdLineSettings settings=new CmdLineSettings();    CmdLineParser parser=new CmdLineParser(settings);    try {      parser.parseArgument(args);    } catch (    CmdLineException e) {      parser.printUsage(System.out);      System.exit(1);    }    FloodlightModuleLoader fml=new FloodlightModuleLoader();    try {      IFloodlightModuleContext moduleContext=fml.loadModulesFromConfig(settings.getModuleFile());      IRestApiService restApi=moduleContext.getServiceImpl(IRestApiService.class);      restApi.run();    } catch (    FloodlightModuleConfigFileNotFoundException e) {      logger.error("Could not read config file: {}",e.getMessage());      System.exit(1);    }    try {      fml.runModules();    } catch (    FloodlightModuleException e) {      logger.error("Failed to run controller modules",e);      System.exit(1);    }  } catch (  Exception e) {    logger.error("Exception in main",e);    System.exit(1);  }}  }
class C{  public TypeMismatchException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  public T caseN4ClassDeclaration(N4ClassDeclaration object){  return null;}  }
class C{  public HeaderRowBehindStartRowException(){  super(MESSAGE);}  }
class C{  @Override public boolean canUpdate(){  return false;}  }
class C{  public boolean isDeleted(){  return isDeleted;}  }
class C{  public final boolean mustBeAbstract(Environment env){  if (isAbstract()) {    return true;  }  collectInheritedMethods(env);  Iterator methods=getMethods();  while (methods.hasNext()) {    MemberDefinition method=(MemberDefinition)methods.next();    if (method.isAbstract()) {      return true;    }  }  return getPermanentlyAbstractMethods().hasNext();}  }
class C{  public void addEntry(NceConsistRosterEntry e){  if (log.isDebugEnabled()) {    log.debug("Add entry " + e);  }  int i=_list.size() - 1;  while (i >= 0) {    if (e.getId().toUpperCase().compareTo(_list.get(i).getId().toUpperCase()) > 0) {      break;    }    i--;  }  _list.add(i + 1,e);  setDirty(true);  firePropertyChange("add",null,e);}  }
class C{  public boolean isActive(int offset){  if (this.activeTimes == null) {    if (this.activePeriods == null) {      return true;    } else {      int timeIndex=(SimClock.getIntTime() + this.activePeriodsOffset + offset) % (this.activePeriods[0] + this.activePeriods[1]);      if (timeIndex <= this.activePeriods[0]) {        return true;      } else {        return false;      }    }  }  if (curRange == null) {    return false;  }  double time=SimClock.getTime() + offset;  if (this.curRange.isOut(time)) {    this.curRange=activeTimes.poll();    if (curRange == null) {      return false;    }  }  return curRange.isInRange(time);}  }
class C{  public Channel createReplicationChannel(){  CoreRemotingConnection connection=(CoreRemotingConnection)sessionFactory.getConnection();  return connection.getChannel(ChannelImpl.CHANNEL_ID.REPLICATION.id,-1);}  }
class C{  public MaxLengthValidator(@NonNull final CharSequence errorMessage,final int maxLength){  super(errorMessage);  setMaxLength(maxLength);}  }
class C{  public boolean isFinal(){  return this.isDeclaredFinal();}  }
class C{  @Override public boolean batchFinished(){  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if ((m_Indices == null) && (getInputFormat().classAttribute().isNumeric())) {    computeAverageClassValues();    setOutputFormat();    for (int i=0; i < getInputFormat().numInstances(); i++) {      convertInstance(getInputFormat().instance(i));    }  }  flushInput();  m_NewBatch=true;  return (numPendingOutput() != 0);}  }
class C{  public static char[] toCharArray(short[] array){  char[] result=new char[array.length];  for (int i=0; i < array.length; i++) {    result[i]=(char)array[i];  }  return result;}  }
class C{  public void incFunctionExecutionCalls(){  this._stats.incInt(_functionExecutionCallsId,1);}  }
class C{  public boolean systemShouldAdvance(){  return !isAtRest() || !wasAtRest();}  }
class C{  @Override protected void initData(){}  }
class C{  public int size(){  return children.size();}  }
class C{  public final static int quickCheckLineClip(int x1,int y1,int x2,int y2,int xleft,int xright,int ytop,int ybottom){  int pt1=_quick_code(x1,y1,xleft,xright,ytop,ybottom);  int pt2=_quick_code(x2,y2,xleft,xright,ytop,ybottom);  if ((pt1 & pt2) != 0)   return -1; else   if ((pt1 | pt2) == 0)   return 1; else   return 0;}  }
class C{  FormatInformation readFormatInformation() throws FormatException {  if (parsedFormatInfo != null) {    return parsedFormatInfo;  }  int formatInfoBits1=0;  for (int i=0; i < 6; i++) {    formatInfoBits1=copyBit(i,8,formatInfoBits1);  }  formatInfoBits1=copyBit(7,8,formatInfoBits1);  formatInfoBits1=copyBit(8,8,formatInfoBits1);  formatInfoBits1=copyBit(8,7,formatInfoBits1);  for (int j=5; j >= 0; j--) {    formatInfoBits1=copyBit(8,j,formatInfoBits1);  }  int dimension=bitMatrix.getHeight();  int formatInfoBits2=0;  int jMin=dimension - 7;  for (int j=dimension - 1; j >= jMin; j--) {    formatInfoBits2=copyBit(8,j,formatInfoBits2);  }  for (int i=dimension - 8; i < dimension; i++) {    formatInfoBits2=copyBit(i,8,formatInfoBits2);  }  parsedFormatInfo=FormatInformation.decodeFormatInformation(formatInfoBits1,formatInfoBits2);  if (parsedFormatInfo != null) {    return parsedFormatInfo;  }  throw FormatException.getFormatInstance();}  }
class C{  private int measureShort(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=(int)(2 * mRadius + getPaddingTop() + getPaddingBottom() + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  @Override public DecompoundedWord highestRank(ValueNode<DecompoundedWord> aParent,List<DecompoundedWord> aPath){  if (aPath != null) {    aPath.add(aParent.getValue());  }  List<DecompoundedWord> children=aParent.getChildrenValues();  if (children.size() == 0) {    return aParent.getValue();  }  children.add(aParent.getValue());  List<DecompoundedWord> result=rank(children);  DecompoundedWord best=result.get(0);  if (best.equals(aParent.getValue())) {    return aParent.getValue();  } else {    for (    ValueNode<DecompoundedWord> split : aParent.getChildren()) {      if (best.equals(split.getValue())) {        return highestRank(split,aPath);      }    }  }  return null;}  }
class C{  public static void removePlugin(String interfaceName,String name){  if (PLUGINS.get(interfaceName) != null) {    PLUGINS.get(interfaceName).remove(name);  }}  }
class C{  public void delete(List<InternalLog> logs) throws IOException {  final List<byte[]> rowkeys=RowkeyHelper.getRowkeysByLogs(logs);  deleteRowkeys(rowkeys);}  }
class C{  public SimulatedTemperatureSensor(double initialTemp,Range<Double> tempRange,double deltaFactor){  Objects.requireNonNull(tempRange,"tempRange");  if (!tempRange.contains(initialTemp))   throw new IllegalArgumentException("initialTemp");  if (deltaFactor <= 0.0)   throw new IllegalArgumentException("deltaFactor");  sensor=new SimpleSimulatedSensor(initialTemp,deltaFactor,tempRange);}  }
class C{  private static void completeInitialSetup(Map<String,String> properties){  SetupUtils.markSetupComplete();  ConfigPropertyUtils.saveProperties(BourneUtil.getSysClient(),properties);  complete();}  }
class C{  public Map<String,String> convertDataToStrings(Map<String,Object> data){  Map<String,String> results=new HashMap<>();  if (data != null) {    for (    String key : data.keySet()) {      Object object=data.get(key);      if (object instanceof WebAuthenticationDetails) {        WebAuthenticationDetails authenticationDetails=(WebAuthenticationDetails)object;        results.put("remoteAddress",authenticationDetails.getRemoteAddress());        results.put("sessionId",authenticationDetails.getSessionId());      } else       if (object != null) {        results.put(key,object.toString());      } else {        results.put(key,"null");      }    }  }  return results;}  }
class C{  public ChunkedOutputStream(OutputStream stream,int bufferSize) throws IOException {  this.cache=new byte[bufferSize];  this.stream=stream;}  }
class C{  @Override protected void doGet(SlingHttpServletRequest request,SlingHttpServletResponse response) throws ServletException, IOException {  final PrintWriter writer=response.getWriter();  response.setCharacterEncoding(CharEncoding.UTF_8);  response.setContentType("application/json");  List<Resource> comments=commentService.getComments(request);  try {    JSONArray jsonArray=new JSONArray();    for (    Resource comment : comments) {      final JSONObject json=new JSONObject();      final ValueMap properties=comment.getValueMap();      final Resource post=commentService.getParentPost(comment);      json.put(PublickConstants.COMMENT_PROPERTY_COMMENT,properties.get(PublickConstants.COMMENT_PROPERTY_COMMENT,String.class));      json.put(JSON_ID,properties.get(JcrConstants.JCR_UUID,String.class));      json.put(JSON_EDITED,properties.get(PublickConstants.COMMENT_PROPERTY_EDITED,false));      json.put(JSON_REPLIES,commentService.numberOfReplies(comment));      json.put(JSON_SPAM,properties.get(PublickConstants.COMMENT_PROPERTY_SPAM,false));      json.put(JSON_POST,new JSONObject().put(JSON_POST_TEXT,post.getValueMap().get(PublickConstants.COMMENT_PROPERTY_TITLE,String.class)).put(JSON_POST_LINK,linkRewriter.rewriteLink(post.getPath(),request.getServerName())));      jsonArray.put(json);    }    response.setStatus(SlingHttpServletResponse.SC_OK);    writer.write(jsonArray.toString());  } catch (  JSONException e) {    LOGGER.error("Could not write JSON",e);    response.setStatus(SlingHttpServletResponse.SC_INTERNAL_SERVER_ERROR);  }}  }
class C{  public void addToCrawler(final Collection<DigestURL> urls,final boolean asglobal){  Map<String,DigestURL> urlmap=new HashMap<String,DigestURL>();  for (  DigestURL url : urls)   urlmap.put(ASCII.String(url.hash()),url);  for (  Map.Entry<String,DigestURL> e : urlmap.entrySet()) {    try {      if (this.index.getLoadTime(e.getKey()) >= 0)       continue;    } catch (    IOException ee) {      continue;    }    DigestURL url=e.getValue();    final Request request=this.loader.request(url,true,true);    final CrawlProfile profile=this.crawler.get(ASCII.getBytes(request.profileHandle()));    String acceptedError=this.crawlStacker.checkAcceptanceChangeable(url,profile,0);    if (acceptedError == null)     acceptedError=this.crawlStacker.checkAcceptanceInitially(url,profile);    if (acceptedError != null) {      this.log.info("addToCrawler: cannot load " + url.toNormalform(true) + ": "+ acceptedError);      continue;    }    final String s;    if (asglobal) {      s=this.crawlQueues.noticeURL.push(StackType.GLOBAL,request,profile,this.robots);    } else {      s=this.crawlQueues.noticeURL.push(StackType.LOCAL,request,profile,this.robots);    }    if (s != null) {      Switchboard.this.log.info("addToCrawler: failed to add " + url.toNormalform(true) + ": "+ s);    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:52.363 -0500",hash_original_method="43FA513912350854847003FDB290D6C5",hash_generated_method="0A756E4CE92F65496C52AC6E1848970C") public boolean hasQValue(){  return super.hasParameter(ParameterNames.Q);}  }
class C{  public boolean shouldRenameColumn(String schema,String table){  if (shouldRenameSpecificColumn(schema,table))   return true; else   if (shouldRenameSpecificColumn("*",table))   return true; else   if (shouldRenameSpecificColumn(schema,"*"))   return true; else   if (shouldRenameSpecificColumn("*","*"))   return true; else   return false;}  }
class C{  public void rowSetPopulated(RowSetEvent event,int numRows) throws SQLException {  if (numRows < 0 || numRows < getFetchSize()) {    throw new SQLException(resBundle.handleGetObject("cachedrowsetimpl.numrows").toString());  }  if (size() % numRows == 0) {    RowSetEvent event_temp=new RowSetEvent(this);    event=event_temp;    notifyRowSetChanged();  }}  }
class C{  @Path("status") @POST @Consumes(MediaType.APPLICATION_JSON) @Produces({MediaType.APPLICATION_JSON,MediaType.TEXT_PLAIN}) public CLIOutputResponse update(final StatusRequest request) throws ApiException, IOException {  request.setProjectPath(getAbsoluteProjectPath(request.getProjectPath()));  return this.subversionApi.status(request);}  }
class C{  protected void addMembers(List<RelationMember> newMembers,boolean atBeginning){  if (atBeginning) {    members.addAll(0,newMembers);  } else {    members.addAll(newMembers);  }}  }
class C{  public static void deactivateToken(String tokenId) throws Exception {  PasswordStore.storePassword(tokenId,null);  LOG.trace("Deactivating token '{}'",tokenId);  execute(new ActivateToken(tokenId,false));}  }
class C{  public Vertex processAssociation(Vertex text,Network network){  Vertex meaning=((Context)getBot().awareness().getSense(Context.class)).top(network);  if (meaning == null) {    return null;  }  text.addRelationship(Primitive.MEANING,meaning);  List<Relationship> words=text.orderedRelationships(Primitive.WORD);  if (words.size() == 1) {    Vertex word=words.get(0).getTarget();    word.addRelationship(Primitive.MEANING,meaning);    meaning.addRelationship(Primitive.WORD,word);  } else   if (words.size() > 1) {    text.addRelationship(Primitive.INSTANTIATION,Primitive.COMPOUND_WORD);    text.addRelationship(Primitive.INSTANTIATION,Primitive.WORD);    meaning.addRelationship(Primitive.WORD,text);    Vertex word=words.get(0).getTarget();    word.addRelationship(Primitive.COMPOUND_WORD,text);  }  Vertex response=meaning.mostConscious(Primitive.WORD);  return response;}  }
class C{  public static String xmlText(String text,boolean escapeNewline){  int length=text.length();  StringBuilder buff=new StringBuilder(length);  for (int i=0; i < length; i++) {    char ch=text.charAt(i);switch (ch) {case '<':      buff.append("&lt;");    break;case '>':  buff.append("&gt;");break;case '&':buff.append("&amp;");break;case '\'':buff.append("&apos;");break;case '\"':buff.append("&quot;");break;case '\r':case '\n':if (escapeNewline) {buff.append("&#x").append(Integer.toHexString(ch)).append(';');} else {buff.append(ch);}break;case '\t':buff.append(ch);break;default :if (ch < ' ' || ch > 127) {buff.append("&#x").append(Integer.toHexString(ch)).append(';');} else {buff.append(ch);}}}return buff.toString();}  }
class C{  public Observable<Location> requestLocation(@NonNull String provider){  return requestLocation(provider,null);}  }
class C{  public void valueChanged(ListSelectionEvent e){  if (m_mTab.getRowCount() == 0)   return;  int rowTable=vTable.getSelectedRow();  int rowCurrent=m_mTab.getCurrentRow();  log.config("(" + m_mTab.toString() + ") Row in Table="+ rowTable+ ", in Model="+ rowCurrent);  if (rowTable == -1) {    if (rowCurrent >= 0) {      vTable.setRowSelectionInterval(rowCurrent,rowCurrent);      return;    }  } else {    if (rowTable != rowCurrent) {      int t=m_mTab.navigate(rowTable);      if (t != rowTable) {        rowTable=t;        vTable.setRowSelectionInterval(rowTable,rowTable);      }    }    dynamicDisplay(0);  }  if (m_tree != null)   m_tree.setSelectedNode(m_mTab.getRecord_ID());}  }
class C{  public static String jdkName(){  return jdkName;}  }
class C{  public Map<String,Object> processMetadata(SBJob job,Object value,SBOutputPort outputPort,Object outputBinding){  if (outputPort.getOutputBinding() != null) {    outputBinding=outputPort.getOutputBinding();  }  Map<String,Object> metadata=SBFileValueHelper.getMetadata(value);  String inputId=SBBindingHelper.getInheritMetadataFrom(outputBinding);  if (StringUtils.isEmpty(inputId)) {    logger.info("Metadata for {} is {}.",outputPort.getId(),metadata);    return metadata;  }  Object input=null;  String normalizedInputId=SBSchemaHelper.normalizeId(inputId);  for (  Entry<String,Object> inputEntry : job.getInputs().entrySet()) {    if (inputEntry.getKey().equals(normalizedInputId)) {      input=inputEntry.getValue();      break;    }  }  List<Map<String,Object>> metadataList=findAllMetadata(input);  Map<String,Object> inheritedMetadata=intersect(metadataList);  if (inheritedMetadata == null) {    return metadata;  }  if (metadata != null) {    inheritedMetadata.putAll(metadata);  }  logger.info("Metadata for {} is {}.",outputPort.getId(),inheritedMetadata);  return inheritedMetadata;}  }
class C{  public boolean isEnabled(){  return enabled;}  }
class C{  public SemIm(SemPm semPm,SemIm oldSemIm,Parameters parameters){  if (semPm == null) {    throw new NullPointerException("Sem PM must not be null.");  }  if (params == null) {    throw new NullPointerException();  }  this.params=parameters;  this.semPm=new SemPm(semPm);  this.variableNodes=Collections.unmodifiableList(semPm.getVariableNodes());  this.measuredNodes=Collections.unmodifiableList(semPm.getMeasuredNodes());  int numVars=this.variableNodes.size();  this.edgeCoef=new TetradMatrix(numVars,numVars);  this.errCovar=new TetradMatrix(numVars,numVars);  this.variableMeans=new double[numVars];  this.variableMeansStdDev=new double[numVars];  this.freeParameters=initFreeParameters();  this.freeMappings=createMappings(getFreeParameters());  this.fixedParameters=initFixedParameters();  this.fixedMappings=createMappings(getFixedParameters());  this.meanParameters=initMeanParameters();  for (int i=0; i < numVars; i++) {    variableMeans[i]=0;    variableMeansStdDev[i]=Double.NaN;  }  initializeValues();  if (oldSemIm != null && this.getParams().getBoolean("retainPreviousValues",false)) {    retainPreviousValues(oldSemIm);  }  this.distributions=new HashMap<>();  this.functions=new HashMap<>();}  }
class C{  private void showToast(@StringRes int resId){  hideToast();  mToast=Toast.makeText(this,resId,Toast.LENGTH_SHORT);  mToast.show();}  }
class C{  public boolean add(Object targetChild){  if (targetChild == null)   throw new IllegalArgumentException();  if (children.containsKey(targetChild))   return false;synchronized (BeanContext.globalHierarchyLock) {    if (children.containsKey(targetChild))     return false;    if (!validatePendingAdd(targetChild)) {      throw new IllegalStateException();    }    BeanContextChild cbcc=getChildBeanContextChild(targetChild);    BeanContextChild bccp=null;synchronized (targetChild) {      if (targetChild instanceof BeanContextProxy) {        bccp=((BeanContextProxy)targetChild).getBeanContextProxy();        if (bccp == null)         throw new NullPointerException("BeanContextPeer.getBeanContextProxy()");      }      BCSChild bcsc=createBCSChild(targetChild,bccp);      BCSChild pbcsc=null;synchronized (children) {        children.put(targetChild,bcsc);        if (bccp != null)         children.put(bccp,pbcsc=createBCSChild(bccp,targetChild));      }      if (cbcc != null) synchronized (cbcc) {        try {          cbcc.setBeanContext(getBeanContextPeer());        } catch (        PropertyVetoException pve) {synchronized (children) {            children.remove(targetChild);            if (bccp != null)             children.remove(bccp);          }          throw new IllegalStateException();        }        cbcc.addPropertyChangeListener("beanContext",childPCL);        cbcc.addVetoableChangeListener("beanContext",childVCL);      }      Visibility v=getChildVisibility(targetChild);      if (v != null) {        if (okToUseGui)         v.okToUseGui(); else         v.dontUseGui();      }      if (getChildSerializable(targetChild) != null)       serializable++;      childJustAddedHook(targetChild,bcsc);      if (bccp != null) {        v=getChildVisibility(bccp);        if (v != null) {          if (okToUseGui)           v.okToUseGui(); else           v.dontUseGui();        }        if (getChildSerializable(bccp) != null)         serializable++;        childJustAddedHook(bccp,pbcsc);      }    }    fireChildrenAdded(new BeanContextMembershipEvent(getBeanContextPeer(),bccp == null ? new Object[]{targetChild} : new Object[]{targetChild,bccp}));  }  return true;}  }
class C{  private int handleZ(String value,DoubleMetaphoneResult result,int index,boolean slavoGermanic){  if (charAt(value,index + 1) == 'H') {    result.append('J');    index+=2;  } else {    if (contains(value,index + 1,2,"ZO","ZI","ZA") || (slavoGermanic && (index > 0 && charAt(value,index - 1) != 'T'))) {      result.append("S","TS");    } else {      result.append('S');    }    index=charAt(value,index + 1) == 'Z' ? index + 2 : index + 1;  }  return index;}  }
class C{  @Override public ImmutableSet<Entry<K,V>> entrySet(){  return super.entrySet();}  }
class C{  protected Array(ArrayType type,List<Object> values){  m_values=new ArrayList<String>();  m_type=type;  for (  Object o : values) {    m_values.add(o.toString());  }}  }
class C{  private void readObject(){}  }
class C{  public static void reverse(int[] list){  int temp;  for (int i=0, j=list.length - 1; i < list.length / 2; i++, j--) {    temp=list[i];    list[i]=list[j];    list[j]=temp;  }}  }
class C{  @Override public final double[] distributionForInstance(Instance instance) throws Exception {  return m_root.distributionForInstance(instance);}  }
class C{  public boolean existsIgnoredSections(){  return containsIgnoredSections;}  }
class C{  private boolean showIfNoAdvanced(IPreferenceNode node){  if (node.getPage() instanceof PropertyPreferencePage) {    if (!((PropertyPreferencePage)node.getPage()).isAllAdvancedProperties()) {      return true;    }  }  if (ArrayUtils.isNotEmpty(node.getSubNodes())) {    for (    IPreferenceNode subNode : node.getSubNodes()) {      if (showIfNoAdvanced(subNode)) {        return true;      }    }  }  return false;}  }
class C{  public static void teardown() throws Exception {  client.removeBucket(bucketName);}  }
class C{  public boolean destroyGuacamoleSession(String authToken){  GuacamoleSession session=tokenSessionMap.remove(authToken);  if (session == null)   return false;  session.invalidate();  return true;}  }
class C{  public boolean isOutside(IMovingAgent agent){  Point3d l=agent.getLocation();  return ((l.x < X_MIN) | (l.x >= X_MAX) | (l.y < Y_MIN)| (l.y >= Y_MAX)| (l.z < Z_MIN)| (l.z >= Z_MAX));}  }
class C{  public boolean isToolsSyncTimeSupported(){  return toolsSyncTimeSupported;}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:50.278 -0500",hash_original_method="0C810F8EA313238CAFFD85BD22D89FC5",hash_generated_method="AFD6F572F23AF378CFA4C5B1328320AA") protected GenericObject first(){  myListIterator=this.listIterator(0);  try {    return (GenericObject)myListIterator.next();  } catch (  NoSuchElementException ex) {    return null;  }}  }
class C{  int encrypt(byte[] in,int inOff,int len,byte[] out,int outOff){  if ((len % blockSize) != 0) {    throw new ProviderException("Internal error in input buffering");  }  for (int i=len; i >= blockSize; i-=blockSize) {    embeddedCipher.encryptBlock(in,inOff,out,outOff);    inOff+=blockSize;    outOff+=blockSize;  }  return len;}  }
class C{  static int findBestSampleSize(int actualWidth,int actualHeight,int desiredWidth,int desiredHeight){  double wr=(double)actualWidth / desiredWidth;  double hr=(double)actualHeight / desiredHeight;  double ratio=Math.min(wr,hr);  float n=1.0f;  while ((n * 2) <= ratio) {    n*=2;  }  return (int)n;}  }
class C{  public static String createVariableList(ModuleNode moduleNode){  if (moduleNode == null) {    return "";  }  StringBuffer buffer=new StringBuffer();  OpDeclNode[] variableDecls=moduleNode.getVariableDecls();  for (int i=0; i < variableDecls.length; i++) {    buffer.append(variableDecls[i].getName().toString());    if (i != variableDecls.length - 1) {      buffer.append(", ");    }  }  return buffer.toString();}  }
class C{  void update(){  double alpha=System.currentTimeMillis() / 1000.0 * 0.5;  float x=(float)Math.sin(alpha);  float z=(float)Math.cos(alpha);  lightPosition.set(lightDistance * x,3 + (float)Math.sin(alpha),lightDistance * z);  light.setPerspective((float)Math.toRadians(45.0f),1.0f,0.1f,60.0f).lookAt(lightPosition,lightLookAt,UP);  camera.setPerspective((float)Math.toRadians(45.0f),(float)width / height,0.1f,30.0f).lookAt(cameraPosition,cameraLookAt,UP);}  }
class C{  public SignatureVisitor visitInterface(){  return this;}  }
class C{  synchronized boolean releaseLock(int leaseIdToRelease,RemoteThread remoteThread,boolean decRecursion){  if (leaseIdToRelease == -1)   return false;  if (this.destroyed) {    return true;  }  if (!isLeaseHeld(leaseIdToRelease) || !isLeaseHeldByCurrentOrRemoteThread(remoteThread)) {    return false;  } else   if (decRecursion && getRecursion() > 0) {    incRecursion(-1);    decUsage();    if (logger.isTraceEnabled(LogMarker.DLS)) {      logger.trace(LogMarker.DLS,"[DLockToken.releaseLock] decremented recursion: {}",this);    }    return true;  } else {    basicReleaseLock();    return true;  }}  }
class C{  final public MutableString replace(final char c){  return replace(0,Integer.MAX_VALUE,c);}  }
class C{  @Override public String toString(){  return currencyCode;}  }
class C{  public boolean processIt(String processAction){  m_processMsg=null;  DocumentEngine engine=new DocumentEngine(this,getDocStatus());  return engine.processIt(processAction,getDocAction());}  }
class C{  public static ObjectAnimator ofFloat(Object target,String propertyName,float... values){  ObjectAnimator anim=new ObjectAnimator(target,propertyName);  anim.setFloatValues(values);  return anim;}  }
class C{  @Override public boolean overrides(){  return overrides;}  }
class C{  private static boolean evalEnumOp(final IRepFilterBean filterBean,final Enum<?> value){  if (value == null)   return false;  final Enum<?> fvalue=(Enum<?>)filterBean.getValue();switch ((Operator)filterBean.getOperator()) {case EQUAL:    return value == fvalue;case GREATER_THAN:  return value.ordinal() > fvalue.ordinal();case GREATER_THAN_OR_EQUAL:return value.ordinal() >= fvalue.ordinal();case LESS_THAN:return value.ordinal() < fvalue.ordinal();case LESS_THAN_OR_EQUAL:return value.ordinal() <= fvalue.ordinal();case NOT_EQUAL:return value != fvalue;default :throw new RuntimeException("Unhandled operator: " + filterBean.getOperator());}}  }
class C{  public boolean isAscending(){  return ascending;}  }
class C{  public Key max(){  final StringBuilder revEnd=new StringBuilder(get().length() + 1);  revEnd.append(get());  revEnd.append('\u9fa5');  return new Key(revEnd.toString());}  }
class C{  public FindServersOnNetworkResponse FindServersOnNetwork(FindServersOnNetworkRequest req) throws ServiceFaultException, ServiceResultException {  return (FindServersOnNetworkResponse)channel.serviceRequest(req);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (negated: ");  result.append(negated);  result.append(')');  return result.toString();}  }
class C{  public static double version(Context cx,Scriptable thisObj,Object[] args,Function funObj){  double result=cx.getLanguageVersion();  if (args.length > 0) {    double d=Context.toNumber(args[0]);    cx.setLanguageVersion((int)d);  }  return result;}  }
class C{  @org.vmmagic.pragma.Uninterruptible public int length(){  return count;}  }
class C{  public DatasourceTransactionInterceptor(){}  }
class C{  @After public void tearDown(){  test=null;}  }
class C{  public DESedeKeySpec(byte[] key,int offset) throws InvalidKeyException {  if (key.length - offset < 24) {    throw new InvalidKeyException("Wrong key size");  }  this.key=new byte[24];  System.arraycopy(key,offset,this.key,0,24);}  }
class C{  public static float[] toFloatArray(Integer[] array){  float[] result=new float[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i].floatValue();  }  return result;}  }
class C{  private Service blackOutService(final TripSchedule schedule){  if (schedule.headwaySeconds != null) {    warnings.add("We do not currently support retaining existing frequency entries when adjusting timetables.");    return null;  }  Service service=servicesCopy.get(schedule.serviceCode);  EnumSet blackoutDays=EnumSet.noneOf(DayOfWeek.class);  int tripStart=schedule.departures[0];  for (  PatternTimetable entry : entries) {    if (entry.firstDepartures != null)     continue;    if (entry.startTime < tripStart && entry.endTime > tripStart) {      blackoutDays.addAll(entry.activeDaysOfWeek());    }  }  if (blackoutDays.isEmpty()) {    return service;  }  Service newService=service.removeDays("SCENARIO_" + service.service_id,blackoutDays);  return newService.hasAnyService() ? newService : null;}  }
class C{  public final void processInteriorEdge(ObjectReference target,Address slot,boolean root){  Address interiorRef=slot.loadAddress();  Offset offset=interiorRef.diff(target.toAddress());  ObjectReference newTarget=traceObject(target,root);  if (VM.VERIFY_ASSERTIONS) {    if (offset.sLT(Offset.zero()) || offset.sGT(Offset.fromIntSignExtend(1 << 24))) {      Log.writeln("ERROR: Suspiciously large delta to interior pointer");      Log.write("       object base = ");      Log.writeln(target);      Log.write("       interior reference = ");      Log.writeln(interiorRef);      Log.write("       delta = ");      Log.writeln(offset);      VM.assertions._assert(false);    }  }  if (overwriteReferenceDuringTrace()) {    slot.store(newTarget.toAddress().plus(offset));  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:03.737 -0500",hash_original_method="DC4E6AC867A43EED90FFB40A290359DB",hash_generated_method="88543127A25C62BC2023719A31B46817") public AssetFileDescriptor(ParcelFileDescriptor fd,long startOffset,long length){  if (length < 0 && startOffset != 0) {    throw new IllegalArgumentException("startOffset must be 0 when using UNKNOWN_LENGTH");  }  mFd=fd;  mStartOffset=startOffset;  mLength=length;}  }
class C{  public void addGameListener(GameListener listener){  if (gameListeners == null) {    gameListeners=new Vector<GameListener>();  }  gameListeners.addElement(listener);}  }
class C{  private void verifyIsRoot(){  if (hierarchyElements.size() != 0) {    throw new IllegalStateException("This is not the root. Can " + "only call addCounter() on the root node. Current node: " + hierarchy);  }}  }
class C{  public int[] Gen_columnIndices(android.database.Cursor cursor){  int[] result=new int[GEN_COUNT];  result[0]=cursor.getColumnIndex(GEN_FIELD__ID);  if (result[0] == -1) {    result[0]=cursor.getColumnIndex("_ID");  }  result[1]=cursor.getColumnIndex(GEN_FIELD_CONNECTION_ID);  result[2]=cursor.getColumnIndex(GEN_FIELD_SHOW_SPLASH_VERSION);  result[3]=cursor.getColumnIndex(GEN_FIELD_TEXT_INDEX);  return result;}  }
class C{  public static void xml(String xml){  printer.xml(xml);}  }
class C{  @Override public void updateAsciiStream(int columnIndex,InputStream x) throws SQLException {  updateAsciiStream(columnIndex,x,-1);}  }
class C{  public static String pad(String string,int n,String padding,boolean right){  if (n < 0) {    n=0;  }  if (n < string.length()) {    return string.substring(0,n);  } else   if (n == string.length()) {    return string;  }  char paddingChar;  if (padding == null || padding.length() == 0) {    paddingChar=' ';  } else {    paddingChar=padding.charAt(0);  }  StringBuilder buff=new StringBuilder(n);  n-=string.length();  if (right) {    buff.append(string);  }  for (int i=0; i < n; i++) {    buff.append(paddingChar);  }  if (!right) {    buff.append(string);  }  return buff.toString();}  }
class C{  public static long deepMemoryUsageOfAll(Instrumentation inst,final Collection<? extends java.lang.Object> objs,final int referenceFilter) throws IOException {  long total=0L;  final Set<Integer> counted=new HashSet<Integer>(objs.size() * 4);  for (  final Object o : objs) {    total+=deepMemoryUsageOf0(inst,counted,o,referenceFilter);  }  return total;}  }
class C{  public LocalDateTime addWrapFieldToCopy(int value){  return iInstant.withLocalMillis(iField.addWrapField(iInstant.getLocalMillis(),value));}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:20.466 -0500",hash_original_method="912DB48513D0A0D8594B2E782158C138",hash_generated_method="4FAB49D11EF46D7525D217150469DD4C") public SIPClientTransaction createClientTransaction(SIPRequest sipRequest,MessageChannel encapsulatedMessageChannel){  SIPClientTransaction ct=new SIPClientTransaction(this,encapsulatedMessageChannel);  ct.setOriginalRequest(sipRequest);  return ct;}  }
class C{  private AFTPClient actionOpen() throws IOException, PageException {  required("server",server);  required("username",username);  required("password",password);  AFTPClient client=getClient();  writeCfftp(client);  return client;}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  private Chunk readChunkHeaderAndFooter(long block){  Chunk header;  try {    header=readChunkHeader(block);  } catch (  Exception e) {    return null;  }  if (header == null) {    return null;  }  Chunk footer=readChunkFooter((block + header.len) * BLOCK_SIZE);  if (footer == null || footer.id != header.id) {    return null;  }  return header;}  }
class C{  public static void writeSingleByte(OutputStream out,int b) throws IOException {  byte[] buffer=new byte[1];  buffer[0]=(byte)(b & 0xff);  out.write(buffer);}  }
class C{  public void invalidateHeaders(){  mHeaderProvider.invalidate();}  }
class C{  public void headObject(HeadObjectRequest headObjectRequest) throws OSSException, ClientException {  assertParameterNotNull(headObjectRequest,"headObjectRequest");  String bucketName=headObjectRequest.getBucketName();  String key=headObjectRequest.getKey();  assertParameterNotNull(bucketName,"bucketName");  ensureBucketNameValid(bucketName);  assertParameterNotNull(key,"key");  ensureObjectKeyValid(key);  Map<String,String> headers=new HashMap<String,String>();  addDateHeader(headers,OSSHeaders.HEAD_OBJECT_IF_MODIFIED_SINCE,headObjectRequest.getModifiedSinceConstraint());  addDateHeader(headers,OSSHeaders.HEAD_OBJECT_IF_UNMODIFIED_SINCE,headObjectRequest.getUnmodifiedSinceConstraint());  addStringListHeader(headers,OSSHeaders.HEAD_OBJECT_IF_MATCH,headObjectRequest.getMatchingETagConstraints());  addStringListHeader(headers,OSSHeaders.HEAD_OBJECT_IF_NONE_MATCH,headObjectRequest.getNonmatchingETagConstraints());  RequestMessage request=new OSSRequestMessageBuilder(getInnerClient()).setEndpoint(getEndpoint()).setMethod(HttpMethod.HEAD).setBucket(bucketName).setKey(key).setHeaders(headers).setOriginalRequest(headObjectRequest).build();  doOperation(request,emptyResponseParser,bucketName,key);}  }
class C{  protected static OptimisationStrategy lessPermissive(OptimisationStrategy left,OptimisationStrategy right){  if (left.ordinal() > right.ordinal())   return left;  return right;}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final int fuzzyThreshold,final float scaleFactor,final boolean isTouchEvent){  final int deltaValue, currentScrollValue, scrollValue;switch (view.getPullToRefreshScrollDirection()) {case HORIZONTAL:    deltaValue=deltaX;  scrollValue=scrollX;currentScrollValue=view.getScrollX();break;case VERTICAL:default :deltaValue=deltaY;scrollValue=scrollY;currentScrollValue=view.getScrollY();break;}if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {final Mode mode=view.getMode();if (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {final int newScrollValue=(deltaValue + scrollValue);if (PullToRefreshBase.DEBUG) {Log.d(LOG_TAG,"OverScroll. DeltaX: " + deltaX + ", ScrollX: "+ scrollX+ ", DeltaY: "+ deltaY+ ", ScrollY: "+ scrollY+ ", NewY: "+ newScrollValue+ ", ScrollRange: "+ scrollRange+ ", CurrentScroll: "+ currentScrollValue);}if (newScrollValue < (0 - fuzzyThreshold)) {if (mode.showHeaderLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue)));}} else if (newScrollValue > (scrollRange + fuzzyThreshold)) {if (mode.showFooterLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));}} else if (Math.abs(newScrollValue) <= fuzzyThreshold || Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {view.setState(State.RESET);}} else if (isTouchEvent && State.OVERSCROLLING == view.getState()) {view.setState(State.RESET);}}}  }
class C{  public PNGPredictor(){  super(PNG);}  }
class C{  public void update(List<Vec> docs){  update(docs,new FakeExecutor());}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:47.544 -0500",hash_original_method="9D9110C540430F2A7712B1C42CF073E5",hash_generated_method="4ADF8EF58038DBFAB17BE2712E47AC52") public final void sendMessageDelayed(Message msg,long delayMillis){  if (mSmHandler == null)   return;  mSmHandler.sendMessageDelayed(msg,delayMillis);}  }
class C{  public ServerSocketChannel(final Socket socket,final IHttpServerEventListener clientListener){  try {    this.mClientListener=clientListener;    this.mSocket=socket;    this.mInputStream=socket.getInputStream();    this.mOutputStream=socket.getOutputStream();    this.mHttpFrameParser=new HttpFrame();  } catch (  IOException e) {  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:35.874 -0500",hash_original_method="6458C2A82CD5BFA5489DF067AE915D84",hash_generated_method="61FDB7FB1F0A162C276160E6FF54B255") public final int matchData(String type,String scheme,Uri data){  final ArrayList<String> types=mDataTypes;  final ArrayList<String> schemes=mDataSchemes;  final ArrayList<AuthorityEntry> authorities=mDataAuthorities;  final ArrayList<PatternMatcher> paths=mDataPaths;  int match=MATCH_CATEGORY_EMPTY;  if (types == null && schemes == null) {    return ((type == null && data == null) ? (MATCH_CATEGORY_EMPTY + MATCH_ADJUSTMENT_NORMAL) : NO_MATCH_DATA);  }  if (schemes != null) {    if (schemes.contains(scheme != null ? scheme : "")) {      match=MATCH_CATEGORY_SCHEME;    } else {      return NO_MATCH_DATA;    }    if (authorities != null) {      int authMatch=matchDataAuthority(data);      if (authMatch >= 0) {        if (paths == null) {          match=authMatch;        } else         if (hasDataPath(data.getPath())) {          match=MATCH_CATEGORY_PATH;        } else {          return NO_MATCH_DATA;        }      } else {        return NO_MATCH_DATA;      }    }  } else {    if (scheme != null && !"".equals(scheme) && !"content".equals(scheme) && !"file".equals(scheme)) {      return NO_MATCH_DATA;    }  }  if (types != null) {    if (findMimeType(type)) {      match=MATCH_CATEGORY_TYPE;    } else {      return NO_MATCH_TYPE;    }  } else {    if (type != null) {      return NO_MATCH_TYPE;    }  }  return match + MATCH_ADJUSTMENT_NORMAL;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodeappendchildgetnodename.class,args);}  }
class C{  private void initialize(){  this.setSize(396,325);  this.setTitle("Add a new user...");  this.setContentPane(getJContentPane());}  }
class C{  protected void checkType(Object object){  if (object == null) {    throw new NullPointerException("Sequences cannot contain null, use a List instead");  }  if (type != null) {    if (!type.isInstance(object)) {      throw new IllegalArgumentException("Invalid type of argument for sequence of type: " + type.getName() + " cannot add object: "+ object);    }  }}  }
class C{  public void loadTableLocal(byte[] tableKey,Result<TableKraken> result){  if (tableKey == null) {    result.ok(null);    return;  }  TableKraken table=_tableManager.getTable(tableKey);  if (table != null) {    result.ok(table);    return;  }  RowCursor cursor=_metaTable.cursor();  cursor.setBytes(1,tableKey,0);  if (_metaTable.getDirect(cursor)) {    String name=cursor.getString(2);    String sql=cursor.getString(3);    if (sql == null || sql.equals("")) {      throw new IllegalStateException(L.l("Broken table: '{0}'\n  sql: {1} {2}",name,sql,AmpSystem.currentManager()));    }    QueryKraken query=QueryParserKraken.parse(_tableManager,sql).build();    query.exec((Result)result);  } else {    KrakenException exn=new KrakenException(L.l("Failed to load table {0}",Hex.toShortHex(tableKey)));    exn.fillInStackTrace();    result.fail(exn);  }}  }
class C{  public Z21ReporterManager(Z21SystemConnectionMemo memo){  _memo=memo;  if (InstanceManager.getDefault(RailComManager.class) == null) {    InstanceManager.setDefault(RailComManager.class,new jmri.managers.DefaultRailComManager());  }}  }
class C{  public synchronized Enumeration<V> elements(){  return this.<V>getEnumeration(VALUES);}  }
class C{  private void generatePatternBitmap(){  if (getBounds().width() <= 0 || getBounds().height() <= 0) {    return;  }  mBitmap=Bitmap.createBitmap(getBounds().width(),getBounds().height(),Config.ARGB_8888);  Canvas canvas=new Canvas(mBitmap);  Rect r=new Rect();  boolean verticalStartWhite=true;  for (int i=0; i <= numRectanglesVertical; i++) {    boolean isWhite=verticalStartWhite;    for (int j=0; j <= numRectanglesHorizontal; j++) {      r.top=i * mRectangleSize;      r.left=j * mRectangleSize;      r.bottom=r.top + mRectangleSize;      r.right=r.left + mRectangleSize;      canvas.drawRect(r,isWhite ? mPaintWhite : mPaintGray);      isWhite=!isWhite;    }    verticalStartWhite=!verticalStartWhite;  }}  }
class C{  public void deployContext(String path,URL config,boolean update,String tag) throws TomcatManagerException, IOException {  deployContext(path,config,null,update,tag);}  }
class C{  public Set<A> plus(A a){  if (isEmpty()) {    return new Set<>(a.hashCode(),List.of(a),Set.empty(),Set.empty());  }  int ahc=a.hashCode();switch (Ordering.compare(ahc,hc)) {case EQ:    return bucket.contains(a) ? this : withBucket(bucket.plus(a));case LT:  return withLeft(left.plus(a));case GT:return withRight(right.plus(a));default :throw new AssertionError();}}  }
class C{  private void checkSuicideUnits(final IDelegateBridge bridge){  if (isDefendingSuicideAndMunitionUnitsDoNotFire()) {    final List<Unit> deadUnits=Match.getMatches(m_attackingUnits,Matches.UnitIsSuicide);    getDisplay(bridge).deadUnitNotification(m_battleID,m_attacker,deadUnits,m_dependentUnits);    remove(deadUnits,bridge,m_battleSite,false,false);  } else {    final List<Unit> deadUnits=new ArrayList<>();    deadUnits.addAll(Match.getMatches(m_defendingUnits,Matches.UnitIsSuicide));    deadUnits.addAll(Match.getMatches(m_attackingUnits,Matches.UnitIsSuicide));    getDisplay(bridge).deadUnitNotification(m_battleID,m_attacker,deadUnits,m_dependentUnits);    getDisplay(bridge).deadUnitNotification(m_battleID,m_defender,deadUnits,m_dependentUnits);    remove(deadUnits,bridge,m_battleSite,false,null);  }}  }
class C{  public static IFilledList<INaviView> loadMixedgraphs(final AbstractSQLProvider provider,final CModule module,final CTagManager viewTagManager,final CTagManager nodeTagManager) throws CouldntLoadDataException {  checkArguments(provider,module,viewTagManager);  final String query="SELECT * FROM load_module_mixed_graph(?)";  try {    final CConnection connection=provider.getConnection();    final PreparedStatement statement=connection.getConnection().prepareStatement(query);    statement.setInt(1,module.getConfiguration().getId());    final ResultSet resultSet=statement.executeQuery();    final Map<Integer,Set<CTag>> tags=loadTags(connection,module,viewTagManager);    return new FilledList<INaviView>(processQueryResults(resultSet,module,tags,nodeTagManager,provider,new ArrayList<CView>(),ViewType.NonNative,GraphType.MIXED_GRAPH));  } catch (  final SQLException exception) {    throw new CouldntLoadDataException(exception);  }}  }
class C{  public String certToString(){  StringBuilder sb=new StringBuilder();  X509CertImpl x509Cert=null;  try {    x509Cert=X509CertImpl.toImpl(cert);  } catch (  CertificateException ce) {    if (debug != null) {      debug.println("Vertex.certToString() unexpected exception");      ce.printStackTrace();    }    return sb.toString();  }  sb.append("Issuer:     ").append(x509Cert.getIssuerX500Principal()).append("\n");  sb.append("Subject:    ").append(x509Cert.getSubjectX500Principal()).append("\n");  sb.append("SerialNum:  ").append(x509Cert.getSerialNumber().toString(16)).append("\n");  sb.append("Expires:    ").append(x509Cert.getNotAfter().toString()).append("\n");  boolean[] iUID=x509Cert.getIssuerUniqueID();  if (iUID != null) {    sb.append("IssuerUID:  ");    for (    boolean b : iUID) {      sb.append(b ? 1 : 0);    }    sb.append("\n");  }  boolean[] sUID=x509Cert.getSubjectUniqueID();  if (sUID != null) {    sb.append("SubjectUID: ");    for (    boolean b : sUID) {      sb.append(b ? 1 : 0);    }    sb.append("\n");  }  try {    SubjectKeyIdentifierExtension sKeyID=x509Cert.getSubjectKeyIdentifierExtension();    if (sKeyID != null) {      KeyIdentifier keyID=sKeyID.get(SubjectKeyIdentifierExtension.KEY_ID);      sb.append("SubjKeyID:  ").append(keyID.toString());    }    AuthorityKeyIdentifierExtension aKeyID=x509Cert.getAuthorityKeyIdentifierExtension();    if (aKeyID != null) {      KeyIdentifier keyID=(KeyIdentifier)aKeyID.get(AuthorityKeyIdentifierExtension.KEY_ID);      sb.append("AuthKeyID:  ").append(keyID.toString());    }  } catch (  IOException e) {    if (debug != null) {      debug.println("Vertex.certToString() unexpected exception");      e.printStackTrace();    }  }  return sb.toString();}  }
class C{  @Nullable public GdbInfoLine next() throws IOException, InterruptedException, DebuggerException {  sendCommand("next");  GdbInfoProgram gdbInfoProgram=infoProgram();  if (gdbInfoProgram.getStoppedAddress() == null) {    return null;  }  return infoLine();}  }
class C{  public static String convertToTitle(int n){  if (n <= 0)   return "";  StringBuilder title=new StringBuilder();  while (n > 0) {    n--;    int r=n % 26;    title.insert(0,(char)('A' + r));    n=n / 26;  }  return title.toString();}  }
class C{  @Nullable private Object[] readQueryArgs(BinaryRawReaderEx reader){  int cnt=reader.readInt();  if (cnt > 0) {    Object[] args=new Object[cnt];    for (int i=0; i < cnt; i++)     args[i]=reader.readObjectDetached();    return args;  } else   return null;}  }
class C{  private void multShiftSub(IntegerPolynomial b,int c,int k,int p){  int N=coeffs.length;  for (int i=k; i < N; i++) {    coeffs[i]=(coeffs[i] - b.coeffs[i - k] * c) % p;  }}  }
class C{  public boolean isShowGridX(){  return mShowGridX;}  }
class C{  private void maybeMovePool(Transaction tx,String context){  checkState(lock.isHeldByCurrentThread());  if (tx.isEveryOwnedOutputSpent(this)) {    if (unspent.remove(tx.getHash()) != null) {      if (log.isInfoEnabled()) {        log.info("  {} {} <-unspent ->spent",tx.getHashAsString(),context);      }      spent.put(tx.getHash(),tx);    }  } else {    if (spent.remove(tx.getHash()) != null) {      if (log.isInfoEnabled()) {        log.info("  {} {} <-spent ->unspent",tx.getHashAsString(),context);      }      unspent.put(tx.getHash(),tx);    }  }}  }
class C{  public void overEquals(double c){  for (int i=0; i < order + 1; i++)   a[i]/=c;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case GamlPackage.GAML_DEFINITION__NAME:    return getName();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public ObjectModel(){}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case SexecPackage.TRACE_STATE_EXITED__STATE:    setState((ExecutionState)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public long key(){  return _map._set[_index];}  }
class C{  public static boolean contains(final String key){  return getOptimusPref().contains(key);}  }
class C{  public void testFailoverReadOnly() throws Exception {  Set<String> downedHosts=new HashSet<String>();  downedHosts.add(HOST_1);  Properties props=new Properties();  props.setProperty("retriesAllDown","2");  for (  boolean foReadOnly : new boolean[]{true,false}) {    props.setProperty("failOverReadOnly",Boolean.toString(foReadOnly));    Connection testConn=getUnreliableFailoverConnection(new String[]{HOST_1,HOST_2,HOST_3},props,downedHosts);    Statement testStmt=null;    try {      assertEquals(HOST_2_OK,UnreliableSocketFactory.getHostFromLastConnection());      assertEquals(foReadOnly,testConn.isReadOnly());      testStmt=testConn.createStatement();      assertSingleValueQuery(testStmt,"SELECT 1",1L);      UnreliableSocketFactory.downHost(HOST_2);      assertEquals(HOST_2_OK,UnreliableSocketFactory.getHostFromLastConnection());      assertSQLException(testStmt,"SELECT 1",COMM_LINK_ERR_PATTERN);      assertEquals(HOST_3_OK,UnreliableSocketFactory.getHostFromLastConnection());      assertEquals(foReadOnly,testConn.isReadOnly());      testStmt=testConn.createStatement();      assertSingleValueQuery(testStmt,"SELECT 1",1L);      UnreliableSocketFactory.dontDownHost(HOST_2);      UnreliableSocketFactory.downHost(HOST_3);      assertEquals(HOST_3_OK,UnreliableSocketFactory.getHostFromLastConnection());      assertSQLException(testStmt,"SELECT 1",COMM_LINK_ERR_PATTERN);      assertEquals(HOST_2_OK,UnreliableSocketFactory.getHostFromLastConnection());      assertEquals(foReadOnly,testConn.isReadOnly());      testStmt=testConn.createStatement();      assertSingleValueQuery(testStmt,"SELECT 1",1L);      UnreliableSocketFactory.dontDownHost(HOST_1);      UnreliableSocketFactory.downHost(HOST_2);      assertEquals(HOST_2_OK,UnreliableSocketFactory.getHostFromLastConnection());      assertSQLException(testStmt,"SELECT 1",COMM_LINK_ERR_PATTERN);      assertEquals(HOST_1_OK,UnreliableSocketFactory.getHostFromLastConnection());      assertFalse(testConn.isReadOnly());      testStmt=testConn.createStatement();      assertSingleValueQuery(testStmt,"SELECT 1",1L);      UnreliableSocketFactory.downHost(HOST_1);      UnreliableSocketFactory.dontDownHost(HOST_3);      assertEquals(HOST_1_OK,UnreliableSocketFactory.getHostFromLastConnection());      assertSQLException(testStmt,"SELECT 1",COMM_LINK_ERR_PATTERN);      assertEquals(HOST_3_OK,UnreliableSocketFactory.getHostFromLastConnection());      assertEquals(foReadOnly,testConn.isReadOnly());      assertConnectionsHistory(HOST_2_OK,HOST_3_OK,HOST_2_OK,HOST_3_FAIL,HOST_2_FAIL,HOST_3_FAIL,HOST_1_OK,HOST_2_FAIL,HOST_3_OK);    }  finally {      if (testStmt != null) {        testStmt.close();      }      if (testConn != null) {        testConn.close();      }    }  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private XMLElement2 createAnotherElement(){  return new XMLElement2(this.entities,this.ignoreWhitespace,false,this.ignoreCase);}  }
class C{  public void cancel(){  cancel=true;}  }
class C{  public void addRoundRectangle(final float x,final float y,final float width,final float height,final float arcWidth,final float arcHeight){  if (this.isDisposed()) {    SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);  }  this.cubicTo(x,y,x,y,x,y + arcHeight);  this.cubicTo(x,y,x,y,x + arcWidth,y);  this.cubicTo(x + width,y,x + width,y,x + width - arcWidth,y);  this.cubicTo(x + width,y,x + width,y,x + width,y + arcHeight);  this.cubicTo(x + width,y + height,x + width,y + height,x + width,y + height - arcHeight);  this.cubicTo(x + width,y + height,x + width,y + height,x + width - arcWidth,y + height);  this.cubicTo(x,y + height,x,y + height,x + arcWidth,y + height);  this.cubicTo(x,y + height,x,y + height,x,y + height - arcHeight);}  }
class C{  public void clearOverlay(){  mRelativeLayout.removeAllViews();  mOverlay.hide();}  }
class C{  public final boolean sendEmptyMessage(int what){  return mExec.sendEmptyMessage(what);}  }
class C{  @Override public byte[] serializeVal(final V obj){  return SerializerUtil.serialize(obj);}  }
class C{  public void update(final String collectionName,final Map<String,Object> query,final Map<String,Object> data){  update(collectionName,query,data,emptyMap());}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean equals(Object obj){  if (!super.equals(obj)) {    return false;  }  CSSAttributeCondition c=(CSSAttributeCondition)obj;  return (c.namespaceURI.equals(namespaceURI) && c.localName.equals(localName) && c.specified == specified);}  }
class C{  public BasicTreeNode(String text){  this(text,null);}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","hebeu");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  public Object clone(){  BooleanArrayList clone=new BooleanArrayList((boolean[])elements.clone());  clone.setSizeRaw(size);  return clone;}  }
class C{  public ReplDBMSEvent filter(ReplDBMSEvent event) throws ReplicatorException, InterruptedException {  boolean schemaChange=false;  boolean truncate=false;  ArrayList<DBMSData> data=event.getData();  if (data == null)   return event;  for (Iterator<DBMSData> iterator=data.iterator(); iterator.hasNext(); ) {    DBMSData dataElem=iterator.next();    if (dataElem instanceof RowChangeData) {    } else     if (dataElem instanceof StatementData) {      StatementData sdata=(StatementData)dataElem;      String schema=null;      String table=null;      Object parsingMetadata=sdata.getParsingMetadata();      if (parsingMetadata == null) {        String query=sdata.getQuery();        parsingMetadata=parser.match(query);        sdata.setParsingMetadata(parsingMetadata);      }      SqlOperation parsed=null;      if (parsingMetadata != null && parsingMetadata instanceof SqlOperation) {        parsed=(SqlOperation)parsingMetadata;        schema=parsed.getSchema();        table=parsed.getName();      }      if (schema == null)       schema=sdata.getDefaultSchema();      if (parsed == null) {        logger.warn("Parsing failure: seqno=" + event.getSeqno());        continue;      } else       if (schema == null) {        final String query=sdata.getQuery();        logger.warn("Ignoring event : No schema found for this event " + event.getSeqno() + (query != null ? " (" + query.substring(0,Math.min(query.length(),200)) + "...)" : ""));        continue;      } else       if (schema.equals(tungstenSchema)) {        if (logger.isDebugEnabled())         logger.debug("Ignoring change to tungsten schema: seqno=" + event.getSeqno());        continue;      }      int objectType=parsed.getObjectType();      int operation=parsed.getOperation();      if (objectType == SqlOperation.SCHEMA) {        if (operation == SqlOperation.CREATE) {          annotate(sdata,schema,null,"CREATE SCHEMA");          schemaChange=true;        } else         if (operation == SqlOperation.DROP) {          annotate(sdata,schema,null,"DROP SCHEMA");          schemaChange=true;        }      } else       if (objectType == SqlOperation.TABLE) {        if (operation == SqlOperation.CREATE) {          annotate(sdata,schema,table,"CREATE TABLE");          schemaChange=true;        } else         if (operation == SqlOperation.DROP) {          annotate(sdata,schema,table,"DROP TABLE");          schemaChange=true;        } else         if (operation == SqlOperation.ALTER) {          annotate(sdata,schema,table,"ALTER TABLE");          schemaChange=true;        } else         if (operation == SqlOperation.RENAME) {          annotate(sdata,schema,table,"RENAME TABLE");          schemaChange=true;        } else         if (operation == SqlOperation.TRUNCATE) {          annotate(sdata,schema,table,"TRUNCATE");          truncate=true;        }      }    }  }  if (schemaChange) {    event.getDBMSEvent().setMetaDataOption(ReplOptionParams.SCHEMA_CHANGE,"");  }  if (truncate) {    event.getDBMSEvent().setMetaDataOption(ReplOptionParams.TRUNCATE,"");  }  return event;}  }
class C{  String waitForCompletion(ClientResponse asyncResponse){  return waitForCompletion(asyncResponse,maxAsyncPollingRetries);}  }
class C{  public static String[] appendSelectionArgs(String[] originalValues,String[] newValues){  if (originalValues == null || originalValues.length == 0) {    return newValues;  }  String[] result=new String[originalValues.length + newValues.length];  System.arraycopy(originalValues,0,result,0,originalValues.length);  System.arraycopy(newValues,0,result,originalValues.length,newValues.length);  return result;}  }
class C{  public boolean reverseCorrectIt(){  log.info(toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_REVERSECORRECT);  if (m_processMsg != null)   return false;  MDocType dt=MDocType.get(getCtx(),getC_DocType_ID());  MPeriod.testPeriodOpen(getCtx(),getMovementDate(),dt.getDocBaseType(),getAD_Org_ID());  MInventory reversal=new MInventory(getCtx(),0,get_TrxName());  copyValues(this,reversal,getAD_Client_ID(),getAD_Org_ID());  reversal.setDocStatus(DOCSTATUS_Drafted);  reversal.setDocAction(DOCACTION_Complete);  reversal.setIsApproved(false);  reversal.setPosted(false);  reversal.setProcessed(false);  reversal.addDescription("{->" + getDocumentNo() + ")");  reversal.setReversal_ID(getM_Inventory_ID());  reversal.saveEx();  reversal.setReversal(true);  MInventoryLine[] oLines=getLines(true);  for (int i=0; i < oLines.length; i++) {    MInventoryLine oLine=oLines[i];    MInventoryLine rLine=new MInventoryLine(getCtx(),0,get_TrxName());    copyValues(oLine,rLine,oLine.getAD_Client_ID(),oLine.getAD_Org_ID());    rLine.setM_Inventory_ID(reversal.getM_Inventory_ID());    rLine.setParent(reversal);    rLine.setReversalLine_ID(oLine.getM_InventoryLine_ID());    rLine.setQtyBook(oLine.getQtyCount());    rLine.setQtyCount(oLine.getQtyBook());    rLine.setQtyInternalUse(oLine.getQtyInternalUse().negate());    rLine.saveEx();    if (rLine.getM_AttributeSetInstance_ID() == 0) {      MInventoryLineMA mas[]=MInventoryLineMA.get(getCtx(),oLines[i].getM_InventoryLine_ID(),get_TrxName());      for (int j=0; j < mas.length; j++) {        MInventoryLineMA ma=new MInventoryLineMA(rLine,mas[j].getM_AttributeSetInstance_ID(),mas[j].getMovementQty().negate());        ma.saveEx();      }    }  }  if (!reversal.processIt(DocAction.ACTION_Complete)) {    m_processMsg="Reversal ERROR: " + reversal.getProcessMsg();    return false;  }  reversal.closeIt();  reversal.setDocStatus(DOCSTATUS_Reversed);  reversal.setDocAction(DOCACTION_None);  reversal.saveEx();  m_processMsg=reversal.getDocumentNo();  addDescription("(" + reversal.getDocumentNo() + "<-)");  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_REVERSECORRECT);  if (m_processMsg != null)   return false;  setProcessed(true);  setReversal_ID(reversal.getM_Inventory_ID());  setDocStatus(DOCSTATUS_Reversed);  setDocAction(DOCACTION_None);  return true;}  }
class C{  public void addChartOptions(final XToolBar toolBar){}  }
class C{  static void generateAttributeMetamodel(final Tree.TypedDeclaration that,final boolean addGetter,final boolean addSetter,GenerateJsVisitor gen){  Scope _scope=that.getScope();  while (_scope != null) {    if (_scope instanceof Declaration) {      if (_scope instanceof Function)       return; else       break;    }    _scope=_scope.getContainer();  }  Declaration d=that.getDeclarationModel();  if (d instanceof Setter)   d=((Setter)d).getGetter();  final String pname=gen.getNames().getter(d,false);  final String pnameMeta=gen.getNames().getter(d,true);  if (!gen.isGeneratedAttribute(d)) {    if (d.isToplevel()) {      gen.out("var ");    } else     if (gen.outerSelf(d)) {      gen.out(".");    }    gen.out(pnameMeta,"={$crtmm$:");    TypeUtils.encodeForRuntime(that,that.getDeclarationModel(),that.getAnnotationList(),gen);    gen.out("}");    gen.endLine(true);    if (d.isToplevel()) {      gen.out("ex$.",pnameMeta,"=",pnameMeta);      gen.endLine(true);    }    gen.addGeneratedAttribute(d);  }  if (addGetter) {    if (!d.isToplevel()) {      if (gen.outerSelf(d))       gen.out(".");    }    gen.out(pnameMeta,".get=");    if (gen.isCaptured(d) && !defineAsProperty(d)) {      gen.out(pname);      gen.endLine(true);      gen.out(pname,".$crtmm$=",pnameMeta,".$crtmm$");    } else {      if (d.isToplevel()) {        gen.out(pname);      } else {        gen.out("function(){return ",gen.getNames().name(d),"}");      }    }    gen.endLine(true);  }  if (addSetter) {    final String pset=gen.getNames().setter(d instanceof Setter ? ((Setter)d).getGetter() : d);    if (!d.isToplevel()) {      if (gen.outerSelf(d))       gen.out(".");    }    gen.out(pnameMeta,".set=",pset);    gen.endLine(true);    gen.out("if(",pset,".$crtmm$===undefined)",pset,".$crtmm$=",pnameMeta,".$crtmm$");    gen.endLine(true);  }}  }
class C{  public final double[] toArray(){  double[][][] field=this.field;  double[][] fieldx=null;  double[] fieldxy=null;  final int width=this.width;  final int height=this.height;  final int length=this.length;  double[] vals=new double[width * height * length];  int i=0;  for (int x=0; x < width; x++) {    fieldx=field[x];    for (int y=0; y < height; y++) {      fieldxy=fieldx[y];      for (int z=0; z < length; z++) {        vals[i++]=fieldxy[z];      }    }  }  return vals;}  }
class C{  private void addFeedback(Utterance utterance,AccessibilityNodeInfoCompat announcedNode){  if (announcedNode == null) {    return;  }  final AccessibilityNodeInfoCompat scrollableNode=AccessibilityNodeInfoUtils.getSelfOrMatchingAncestor(announcedNode,AccessibilityNodeInfoUtils.FILTER_SCROLLABLE);  final boolean userCanScroll=(scrollableNode != null);  AccessibilityNodeInfoUtils.recycleNodes(scrollableNode);  if (mLastNodeWasScrollable != userCanScroll) {    mLastNodeWasScrollable=userCanScroll;    if (userCanScroll) {      utterance.addAuditory(R.raw.chime_up);    } else {      utterance.addAuditory(R.raw.chime_down);    }  }  AccessibilityNodeInfoCompat rootNode=AccessibilityNodeInfoUtils.getRoot(announcedNode);  TraversalStrategy traversalStrategy=new SimpleTraversalStrategy();  try {    if (userCanScroll && AccessibilityNodeInfoUtils.isEdgeListItem(announcedNode,traversalStrategy)) {      utterance.addAuditory(R.raw.scroll_more);    }  }  finally {    traversalStrategy.recycle();    AccessibilityNodeInfoUtils.recycleNodes(rootNode);  }  if (AccessibilityNodeInfoUtils.isActionableForAccessibility(announcedNode)) {    utterance.addAuditory(R.raw.focus_actionable);    utterance.addHaptic(R.array.view_actionable_pattern);  } else {    utterance.addAuditory(R.raw.focus);    utterance.addHaptic(R.array.view_hovered_pattern);  }}  }
class C{  private void fixGetSet(HashMap<String,HashMap<Object,Object>> propertyTable) throws IntrospectionException {  if (propertyTable == null) {    return;  }  for (  Map.Entry<String,HashMap<Object,Object>> entry : propertyTable.entrySet()) {    HashMap<Object,Object> table=entry.getValue();    ArrayList<?> getters=(ArrayList<?>)table.get(STR_GETTERS);    ArrayList<?> setters=(ArrayList<?>)table.get(STR_SETTERS);    Method normalGetter=null;    Method indexedGetter=null;    Method normalSetter=null;    Method indexedSetter=null;    Class<?> normalPropType=null;    Class<?> indexedPropType=null;    if (getters == null) {      getters=new ArrayList<Method>();    }    if (setters == null) {      setters=new ArrayList<Method>();    }    Class<?>[] paramTypes=null;    String methodName=null;    for (    Object _getter : getters) {      Method getter=(Method)_getter;      paramTypes=getter.getParameterTypes();      methodName=getter.getName();      if (paramTypes == null || paramTypes.length == 0) {        if (normalGetter == null || methodName.startsWith(PREFIX_IS)) {          normalGetter=getter;        }      }      if (paramTypes != null && paramTypes.length == 1 && paramTypes[0] == int.class) {        if (indexedGetter == null || methodName.startsWith(PREFIX_GET) || (methodName.startsWith(PREFIX_IS) && !indexedGetter.getName().startsWith(PREFIX_GET))) {          indexedGetter=getter;        }      }    }    if (normalGetter != null) {      Class<?> propertyType=normalGetter.getReturnType();      for (      Object _setter : setters) {        Method setter=(Method)_setter;        if (setter.getParameterTypes().length == 1 && propertyType.equals(setter.getParameterTypes()[0])) {          normalSetter=setter;          break;        }      }    } else {      for (      Object _setter : setters) {        Method setter=(Method)_setter;        if (setter.getParameterTypes().length == 1) {          normalSetter=setter;        }      }    }    if (indexedGetter != null) {      Class<?> propertyType=indexedGetter.getReturnType();      for (      Object _setter : setters) {        Method setter=(Method)_setter;        if (setter.getParameterTypes().length == 2 && setter.getParameterTypes()[0] == int.class && propertyType.equals(setter.getParameterTypes()[1])) {          indexedSetter=setter;          break;        }      }    } else {      for (      Object _setter : setters) {        Method setter=(Method)_setter;        if (setter.getParameterTypes().length == 2 && setter.getParameterTypes()[0] == int.class) {          indexedSetter=setter;        }      }    }    if (normalGetter != null) {      normalPropType=normalGetter.getReturnType();    } else     if (normalSetter != null) {      normalPropType=normalSetter.getParameterTypes()[0];    }    if (indexedGetter != null) {      indexedPropType=indexedGetter.getReturnType();    } else     if (indexedSetter != null) {      indexedPropType=indexedSetter.getParameterTypes()[1];    }    if (normalGetter != null && normalGetter.getReturnType().isArray()) {    }    if (normalGetter != null && normalSetter != null && (indexedGetter == null || indexedSetter == null)) {      table.put(STR_NORMAL,STR_VALID);      table.put(STR_NORMAL + PREFIX_GET,normalGetter);      table.put(STR_NORMAL + PREFIX_SET,normalSetter);      table.put(STR_NORMAL + STR_PROPERTY_TYPE,normalPropType);      continue;    }    if ((normalGetter != null || normalSetter != null) && indexedGetter == null && indexedSetter == null) {      table.put(STR_NORMAL,STR_VALID);      table.put(STR_NORMAL + PREFIX_GET,normalGetter);      table.put(STR_NORMAL + PREFIX_SET,normalSetter);      table.put(STR_NORMAL + STR_PROPERTY_TYPE,normalPropType);      continue;    }    if ((normalGetter != null || normalSetter != null) && (indexedGetter != null || indexedSetter != null)) {      if (normalGetter != null && normalSetter != null && indexedGetter != null && indexedSetter != null) {        if (indexedGetter.getName().startsWith(PREFIX_GET)) {          table.put(STR_NORMAL,STR_VALID);          table.put(STR_NORMAL + PREFIX_GET,normalGetter);          table.put(STR_NORMAL + PREFIX_SET,normalSetter);          table.put(STR_NORMAL + STR_PROPERTY_TYPE,normalPropType);          table.put(STR_INDEXED,STR_VALID);          table.put(STR_INDEXED + PREFIX_GET,indexedGetter);          table.put(STR_INDEXED + PREFIX_SET,indexedSetter);          table.put(STR_INDEXED + STR_PROPERTY_TYPE,indexedPropType);        } else {          if (normalPropType != boolean.class && normalGetter.getName().startsWith(PREFIX_IS)) {            table.put(STR_INDEXED,STR_VALID);            table.put(STR_INDEXED + PREFIX_SET,indexedSetter);            table.put(STR_INDEXED + STR_PROPERTY_TYPE,indexedPropType);          } else {            table.put(STR_NORMAL,STR_VALID);            table.put(STR_NORMAL + PREFIX_GET,normalGetter);            table.put(STR_NORMAL + PREFIX_SET,normalSetter);            table.put(STR_NORMAL + STR_PROPERTY_TYPE,normalPropType);          }        }        continue;      }      if (normalGetter != null && normalSetter == null && indexedGetter != null && indexedSetter != null) {        table.put(STR_NORMAL,STR_VALID);        table.put(STR_NORMAL + PREFIX_GET,normalGetter);        table.put(STR_NORMAL + PREFIX_SET,normalSetter);        table.put(STR_NORMAL + STR_PROPERTY_TYPE,normalPropType);        table.put(STR_INDEXED,STR_VALID);        if (indexedGetter.getName().startsWith(PREFIX_GET)) {          table.put(STR_INDEXED + PREFIX_GET,indexedGetter);        }        table.put(STR_INDEXED + PREFIX_SET,indexedSetter);        table.put(STR_INDEXED + STR_PROPERTY_TYPE,indexedPropType);        continue;      }      if (normalGetter == null && normalSetter != null && indexedGetter != null && indexedSetter != null) {        table.put(STR_INDEXED,STR_VALID);        if (indexedGetter.getName().startsWith(PREFIX_GET)) {          table.put(STR_INDEXED + PREFIX_GET,indexedGetter);        }        table.put(STR_INDEXED + PREFIX_SET,indexedSetter);        table.put(STR_INDEXED + STR_PROPERTY_TYPE,indexedPropType);        continue;      }      if (normalGetter != null && normalSetter == null && indexedGetter != null && indexedSetter == null) {        if (indexedGetter.getName().startsWith(PREFIX_GET)) {          table.put(STR_NORMAL,STR_VALID);          table.put(STR_NORMAL + PREFIX_GET,normalGetter);          table.put(STR_NORMAL + PREFIX_SET,normalSetter);          table.put(STR_NORMAL + STR_PROPERTY_TYPE,normalPropType);          table.put(STR_INDEXED,STR_VALID);          table.put(STR_INDEXED + PREFIX_GET,indexedGetter);          table.put(STR_INDEXED + PREFIX_SET,indexedSetter);          table.put(STR_INDEXED + STR_PROPERTY_TYPE,indexedPropType);        } else {          table.put(STR_NORMAL,STR_VALID);          table.put(STR_NORMAL + PREFIX_GET,normalGetter);          table.put(STR_NORMAL + PREFIX_SET,normalSetter);          table.put(STR_NORMAL + STR_PROPERTY_TYPE,normalPropType);        }        continue;      }      if (normalGetter == null && normalSetter != null && indexedGetter != null && indexedSetter == null) {        if (indexedGetter.getName().startsWith(PREFIX_GET)) {          table.put(STR_NORMAL,STR_VALID);          table.put(STR_NORMAL + PREFIX_GET,normalGetter);          table.put(STR_NORMAL + PREFIX_SET,normalSetter);          table.put(STR_NORMAL + STR_PROPERTY_TYPE,normalPropType);          table.put(STR_INDEXED,STR_VALID);          table.put(STR_INDEXED + PREFIX_GET,indexedGetter);          table.put(STR_INDEXED + PREFIX_SET,indexedSetter);          table.put(STR_INDEXED + STR_PROPERTY_TYPE,indexedPropType);        } else {          table.put(STR_NORMAL,STR_VALID);          table.put(STR_NORMAL + PREFIX_GET,normalGetter);          table.put(STR_NORMAL + PREFIX_SET,normalSetter);          table.put(STR_NORMAL + STR_PROPERTY_TYPE,normalPropType);        }        continue;      }      if (normalGetter != null && normalSetter == null && indexedGetter == null && indexedSetter != null) {        table.put(STR_INDEXED,STR_VALID);        table.put(STR_INDEXED + PREFIX_GET,indexedGetter);        table.put(STR_INDEXED + PREFIX_SET,indexedSetter);        table.put(STR_INDEXED + STR_PROPERTY_TYPE,indexedPropType);        continue;      }      if (normalGetter == null && normalSetter != null && indexedGetter == null && indexedSetter != null) {        table.put(STR_INDEXED,STR_VALID);        table.put(STR_INDEXED + PREFIX_GET,indexedGetter);        table.put(STR_INDEXED + PREFIX_SET,indexedSetter);        table.put(STR_INDEXED + STR_PROPERTY_TYPE,indexedPropType);        continue;      }    }    if (normalSetter == null && normalGetter == null && (indexedGetter != null || indexedSetter != null)) {      if (indexedGetter != null && indexedGetter.getName().startsWith(PREFIX_IS)) {        if (indexedSetter != null) {          table.put(STR_INDEXED,STR_VALID);          table.put(STR_INDEXED + PREFIX_SET,indexedSetter);          table.put(STR_INDEXED + STR_PROPERTY_TYPE,indexedPropType);        }        continue;      }      table.put(STR_INDEXED,STR_VALID);      table.put(STR_INDEXED + PREFIX_GET,indexedGetter);      table.put(STR_INDEXED + PREFIX_SET,indexedSetter);      table.put(STR_INDEXED + STR_PROPERTY_TYPE,indexedPropType);      continue;    }    if ((normalSetter != null || normalGetter != null) && indexedGetter != null && indexedSetter != null) {      table.put(STR_INDEXED,STR_VALID);      table.put(STR_INDEXED + PREFIX_GET,indexedGetter);      table.put(STR_INDEXED + PREFIX_SET,indexedSetter);      table.put(STR_INDEXED + STR_PROPERTY_TYPE,indexedPropType);      continue;    }    table.put(STR_NORMAL,STR_INVALID);    table.put(STR_INDEXED,STR_INVALID);  }}  }
class C{  @Field(6) public __VARIANT_NAME_3_union boolVal(int boolVal){  this.io.setIntField(this,6,boolVal);  return this;}  }
class C{  private String guessParameterName(String value){  if (VCardDataType.find(value) != null) {    return VCardParameters.VALUE;  }  if (Encoding.find(value) != null) {    return VCardParameters.ENCODING;  }  return VCardParameters.TYPE;}  }
class C{  @Override public boolean onTouchEvent(MotionEvent event){  if ((event.getAction() & MotionEvent.ACTION_MASK) == MotionEvent.ACTION_DOWN) {    cancelAllAnimations();  }  if (event.getPointerCount() > 1) {    mMidPntX=(event.getX(0) + event.getX(1)) / 2;    mMidPntY=(event.getY(0) + event.getY(1)) / 2;  }  mGestureDetector.onTouchEvent(event);  if (mIsScaleEnabled) {    mScaleDetector.onTouchEvent(event);  }  if (mIsRotateEnabled) {    mRotateDetector.onTouchEvent(event);  }  if ((event.getAction() & MotionEvent.ACTION_MASK) == MotionEvent.ACTION_UP) {    setImageToWrapCropBounds();  }  return true;}  }
class C{  public K keyAt(int index){  return (K)mArray[index << 1];}  }
class C{  public DiscreteInterpolation(){}  }
class C{  public OMGraphic create(String classname,GraphicAttributes ga,DrawingToolRequestor requestor,boolean showGUI){  if (getCurrentEditable() != null) {    if (DEBUG) {      Debug.output("OMDrawingTool.edit(): can't create " + classname + ", drawing tool busy with another graphic.");    }    return null;  }  if (DEBUG) {    Debug.output("OMDrawingTool.create(" + classname + ")");  }  if (showGUI) {    if (DEBUG) {      Debug.output("OMDrawingTool.create(): showing GUI per request");    }    setMask(SHOW_GUI_BEHAVIOR_MASK);  } else {    if (DEBUG) {      Debug.output("OMDrawingTool.create(): NOT showing GUI per request");    }    unsetMask(SHOW_GUI_BEHAVIOR_MASK);  }  EditableOMGraphic eomg=getEditableGraphic(classname,ga);  if (eomg == null || eomg.getGraphic() == null) {    return null;  }  setAttributes(ga);  eomg.setShowGUI(isMask(SHOW_GUI_BEHAVIOR_MASK));  eomg.setActionMask(OMGraphic.ADD_GRAPHIC_MASK);  return edit(eomg,requestor);}  }
class C{  public void print(StringBuilder sb,int indent,Verbosity verbosity){  indent(sb,indent).append("ledger[").append(ledgerId).append("] allocator: ").append(allocator.name).append("), isOwning: ").append(owningLedger == this).append(", size: ").append(size).append(", references: ").append(bufRefCnt.get()).append(", life: ").append(lCreationTime).append("..").append(lDestructionTime).append(", allocatorManager: [").append(AllocationManager.this.allocatorManagerId).append(", life: ").append(amCreationTime).append("..").append(amDestructionTime);  if (!BaseAllocator.DEBUG) {    sb.append("]\n");  } else {synchronized (buffers) {      sb.append("] holds ").append(buffers.size()).append(" buffers. \n");      for (      ArrowBuf buf : buffers.keySet()) {        buf.print(sb,indent + 2,verbosity);        sb.append('\n');      }    }  }}  }
class C{  private void mapOldFramesToNew(int isolateId){  ArrayList<DStackContext> previousFrames=null;  ArrayList<DStackContext> frames=null;  Map<Long,DValue> previousValues=null;  previousFrames=getIsolateState(isolateId).m_previousFrames;  frames=getIsolateState(isolateId).m_frames;  previousValues=getIsolateState(isolateId).m_previousValues;  int oldSize=previousFrames.size();  int newSize=frames.size();  DValue[] oldFrames=new DValue[oldSize];  for (int depth=0; depth < oldSize; depth++) {    oldFrames[depth]=(DValue)previousValues.remove(Value.BASE_ID - depth);  }  int oldDepth=oldSize - 1;  int newDepth=newSize - 1;  while (oldDepth >= 0 && newDepth >= 0) {    DStackContext oldFrame=previousFrames.get(oldDepth);    DStackContext newFrame=frames.get(newDepth);    if (oldFrame != null && newFrame != null) {      if (stringsEqual(oldFrame.getCallSignature(),newFrame.getCallSignature())) {        DValue frame=oldFrames[oldDepth];        if (frame != null)         previousValues.put(Value.BASE_ID - newDepth,frame);      }    }    oldDepth--;    newDepth--;  }}  }
class C{  public String commandId(String sensorId,String commandId){  return sensorId + "." + commandId;}  }
class C{  public String toValue(){  return value;}  }
class C{  public void reset(){  token=null;  status=S_INIT;  handlerStatusStack=null;}  }
class C{  public OMColor(float a,float r,float g,float b){  super(r,g,b);  argb=(((int)(a * 255)) << 24) | (((int)(r * 255) & 0xFF) << 16) | (((int)(g * 255) & 0xFF) << 8)| (((int)(b * 255) & 0xFF) << 0);}  }
class C{  public MaterialCamera stillShot(){  mStillShot=true;  return this;}  }
class C{  private void fillDots(){  for (int fillLoop=0; fillLoop <= mCurrentPage; fillLoop++) {    ((ImageView)findViewById(fillLoop)).setImageDrawable(mCircleDrawable.getCurrent());  }  for (int unFillLoop=mCurrentPage + 1; unFillLoop < mMaxPage; unFillLoop++) {    ((ImageView)findViewById(unFillLoop)).setImageDrawable(mStrokeDrawable.getCurrent());  }}  }
class C{  public void insert(int index,List<Node> rootNodes){  insert(roots,index,rootNodes);}  }
class C{  public static String toString(DBIDRef id){  return DBIDFactory.FACTORY.toString(id);}  }
class C{  @Check public void checkForInLoop(ForStatement forStatement){  if (forStatement.isForIn()) {    TypeRef loopVarType=null;    EObject location=null;    RuleEnvironment G=(RuleEnvironment)getContext().get(RuleEnvironment.class);    if (G == null)     return;    if (!forStatement.getVarDeclsOrBindings().isEmpty()) {      VariableDeclarationOrBinding varDeclOrBinding=forStatement.getVarDeclsOrBindings().iterator().next();      location=varDeclOrBinding;      if (varDeclOrBinding instanceof VariableDeclaration) {        loopVarType=((VariableDeclaration)varDeclOrBinding).getDeclaredTypeRef();      } else {        VariableBinding varBinding=(VariableBinding)varDeclOrBinding;        Result<TypeRef> res=typeSystem.type(G,varBinding.getExpression());        if (!res.failed()) {          loopVarType=res.getFirst();        }      }    } else     if (forStatement.getInitExpr() != null) {      location=forStatement.getInitExpr();      Result<TypeRef> res=typeSystem.type(G,forStatement.getInitExpr());      if (!res.failed()) {        loopVarType=res.getFirst();      }    }    if (loopVarType != null) {      Result<Boolean> res=typeSystem.subtype(G,RuleEnvironmentExtensions.stringTypeRef(G),loopVarType);      if (res.failed() || !res.getFirst()) {        addIssue(getMessageForTYS_FOR_IN_VAR_STRING(loopVarType.getTypeRefAsString()),location,TYS_FOR_IN_VAR_STRING);      }    }  }}  }
class C{  public AbstractMTreeNode(int capacity,boolean isLeaf,Class<? super E> eclass){  super(capacity,isLeaf,eclass);}  }
class C{  public boolean allEmpty(List list){  int size=list.size();  for (int i=0; i < size; i++) {    if (list.get(i) != null && list.get(i).toString().length() > 0) {      return false;    }  }  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:00.677 -0500",hash_original_method="5393979ADC62E28ADD27F66A98DE94B1",hash_generated_method="E5BF9B5D16592C07021AAD713B61E5BA") public static String decode(byte[] in,char[] out,int offset,int utfSize) throws UTFDataFormatException {  int count=0, s=0, a;  while (count < utfSize) {    if ((out[s]=(char)in[offset + count++]) < '\u0080') {      s++;    } else     if (((a=out[s]) & 0xe0) == 0xc0) {      if (count >= utfSize) {        throw new UTFDataFormatException("bad second byte at " + count);      }      int b=in[offset + count++];      if ((b & 0xC0) != 0x80) {        throw new UTFDataFormatException("bad second byte at " + (count - 1));      }      out[s++]=(char)(((a & 0x1F) << 6) | (b & 0x3F));    } else     if ((a & 0xf0) == 0xe0) {      if (count + 1 >= utfSize) {        throw new UTFDataFormatException("bad third byte at " + (count + 1));      }      int b=in[offset + count++];      int c=in[offset + count++];      if (((b & 0xC0) != 0x80) || ((c & 0xC0) != 0x80)) {        throw new UTFDataFormatException("bad second or third byte at " + (count - 2));      }      out[s++]=(char)(((a & 0x0F) << 12) | ((b & 0x3F) << 6) | (c & 0x3F));    } else {      throw new UTFDataFormatException("bad byte at " + (count - 1));    }  }  return new String(out,0,s);}  }
class C{  private DeleteDocumentCommand(){}  }
class C{  public SolrQuery addSort(SortClause sortClause){  if (sortClauses == null)   sortClauses=new ArrayList<>();  sortClauses.add(sortClause);  serializeSorts();  return this;}  }
class C{  public IssuingDistributionPointExtension(DistributionPointName distributionPoint,ReasonFlags revocationReasons,boolean hasOnlyUserCerts,boolean hasOnlyCACerts,boolean hasOnlyAttributeCerts,boolean isIndirectCRL) throws IOException {  if ((hasOnlyUserCerts && (hasOnlyCACerts || hasOnlyAttributeCerts)) || (hasOnlyCACerts && (hasOnlyUserCerts || hasOnlyAttributeCerts)) || (hasOnlyAttributeCerts && (hasOnlyUserCerts || hasOnlyCACerts))) {    throw new IllegalArgumentException("Only one of hasOnlyUserCerts, hasOnlyCACerts, " + "hasOnlyAttributeCerts may be set to true");  }  this.extensionId=PKIXExtensions.IssuingDistributionPoint_Id;  this.critical=true;  this.distributionPoint=distributionPoint;  this.revocationReasons=revocationReasons;  this.hasOnlyUserCerts=hasOnlyUserCerts;  this.hasOnlyCACerts=hasOnlyCACerts;  this.hasOnlyAttributeCerts=hasOnlyAttributeCerts;  this.isIndirectCRL=isIndirectCRL;  encodeThis();}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case RegularExpressionPackage.REGULAR_EXPRESSION_BODY__PATTERN:    setPattern((Pattern)null);  return;}super.eUnset(featureID);}  }
class C{  public static Pair<String,String> generateSaltedPassword(String password){  String salt=RandomStringUtils.randomAlphanumeric(Default_Salt_Length);  String saltedPassword=new Sha512Hash(password.getBytes(Charsets.UTF_8),salt.getBytes(Charsets.UTF_8),Default_HashIterations).toHex();  return Pair.of(salt,saltedPassword);}  }
class C{  public void initializePackageContents(){  if (isInitialized)   return;  isInitialized=true;  setName(eNAME);  setNsPrefix(eNS_PREFIX);  setNsURI(eNS_URI);  EcorePackage theEcorePackage=(EcorePackage)EPackage.Registry.INSTANCE.getEPackage(EcorePackage.eNS_URI);  docletEClass.getESuperTypes().add(this.getComposite());  compositeEClass.getESuperTypes().add(this.getJSDocNode());  jsDocNodeEClass.getESuperTypes().add(this.getDocletElement());  contentNodeEClass.getESuperTypes().add(this.getJSDocNode());  tagEClass.getESuperTypes().add(this.getDocletElement());  tagValueEClass.getESuperTypes().add(this.getComposite());  tagTitleEClass.getESuperTypes().add(this.getJSDocNode());  lineTagEClass.getESuperTypes().add(this.getTag());  inlineTagEClass.getESuperTypes().add(this.getContentNode());  inlineTagEClass.getESuperTypes().add(this.getTag());  textEClass.getESuperTypes().add(this.getContentNode());  simpleTypeReferenceEClass.getESuperTypes().add(this.getJSDocNode());  simpleTypeReferenceEClass.getESuperTypes().add(this.getContentNode());  fullTypeReferenceEClass.getESuperTypes().add(this.getSimpleTypeReference());  fullMemberReferenceEClass.getESuperTypes().add(this.getFullTypeReference());  variableReferenceEClass.getESuperTypes().add(this.getContentNode());  literalEClass.getESuperTypes().add(this.getContentNode());  composedContentEClass.getESuperTypes().add(this.getComposite());  composedContentEClass.getESuperTypes().add(this.getContentNode());  structuredTextEClass.getESuperTypes().add(this.getText());  initEClass(docletEClass,Doclet.class,"Doclet",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getDoclet_LineTags(),this.getLineTag(),this.getLineTag_Doclet(),"lineTags",null,0,-1,Doclet.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  EOperation op=initEOperation(getDoclet__HasLineTag__String(),theEcorePackage.getEBoolean(),"hasLineTag",0,1,!IS_UNIQUE,IS_ORDERED);  addEParameter(op,theEcorePackage.getEString(),"title",0,1,!IS_UNIQUE,IS_ORDERED);  op=initEOperation(getDoclet__LineTags__String(),this.getLineTag(),"lineTags",0,-1,!IS_UNIQUE,IS_ORDERED);  addEParameter(op,theEcorePackage.getEString(),"title",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(docletElementEClass,DocletElement.class,"DocletElement",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getDocletElement_Begin(),theEcorePackage.getEInt(),"begin",null,0,1,DocletElement.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getDocletElement_End(),theEcorePackage.getEInt(),"end",null,0,1,DocletElement.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  op=initEOperation(getDocletElement__SetRange__int_int(),null,"setRange",0,1,!IS_UNIQUE,IS_ORDERED);  addEParameter(op,theEcorePackage.getEInt(),"begin",0,1,!IS_UNIQUE,IS_ORDERED);  addEParameter(op,theEcorePackage.getEInt(),"end",0,1,!IS_UNIQUE,IS_ORDERED);  op=initEOperation(getDocletElement__Covers__int(),theEcorePackage.getEBoolean(),"covers",0,1,!IS_UNIQUE,IS_ORDERED);  addEParameter(op,theEcorePackage.getEInt(),"offset",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(compositeEClass,Composite.class,"Composite",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getComposite_Contents(),this.getContentNode(),this.getContentNode_Owner(),"contents",null,0,-1,Composite.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(jsDocNodeEClass,JSDocNode.class,"JSDocNode",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getJSDocNode_Markers(),this.getMarker(),null,"markers",null,0,-1,JSDocNode.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  op=initEOperation(getJSDocNode__GetMarkerValue__String(),theEcorePackage.getEString(),"getMarkerValue",0,1,!IS_UNIQUE,IS_ORDERED);  addEParameter(op,theEcorePackage.getEString(),"theKey",0,1,!IS_UNIQUE,IS_ORDERED);  op=initEOperation(getJSDocNode__SetMarker__String_String(),null,"setMarker",0,1,!IS_UNIQUE,IS_ORDERED);  addEParameter(op,theEcorePackage.getEString(),"theKey",0,1,!IS_UNIQUE,IS_ORDERED);  addEParameter(op,theEcorePackage.getEString(),"value",0,1,!IS_UNIQUE,IS_ORDERED);  op=initEOperation(getJSDocNode__IsMarkedAs__String_String(),theEcorePackage.getEBoolean(),"isMarkedAs",0,1,!IS_UNIQUE,IS_ORDERED);  addEParameter(op,theEcorePackage.getEString(),"theKey",0,1,!IS_UNIQUE,IS_ORDERED);  addEParameter(op,theEcorePackage.getEString(),"theValue",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getJSDocNode__ToString(),theEcorePackage.getEString(),"toString",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(contentNodeEClass,ContentNode.class,"ContentNode",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getContentNode_Owner(),this.getComposite(),this.getComposite_Contents(),"owner",null,0,1,ContentNode.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(tagEClass,Tag.class,"Tag",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getTag_Title(),this.getTagTitle(),this.getTagTitle_Tag(),"title",null,0,1,Tag.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getTag_Values(),this.getTagValue(),null,"values",null,0,-1,Tag.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getTag_TagDefinition(),this.getTagDefinition(),"tagDefinition",null,0,1,Tag.class,IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  op=initEOperation(getTag__GetValueByKey__String(),this.getTagValue(),"getValueByKey",0,1,!IS_UNIQUE,IS_ORDERED);  addEParameter(op,theEcorePackage.getEString(),"theKey",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTag__ToString(),theEcorePackage.getEString(),"toString",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(tagValueEClass,TagValue.class,"TagValue",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getTagValue_Key(),theEcorePackage.getEString(),"key",null,0,1,TagValue.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(tagTitleEClass,TagTitle.class,"TagTitle",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getTagTitle_Tag(),this.getTag(),this.getTag_Title(),"tag",null,0,1,TagTitle.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getTagTitle_Title(),theEcorePackage.getEString(),"title",null,0,1,TagTitle.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getTagTitle_ActualTitle(),theEcorePackage.getEString(),"actualTitle",null,0,1,TagTitle.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(lineTagEClass,LineTag.class,"LineTag",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getLineTag_Doclet(),this.getDoclet(),this.getDoclet_LineTags(),"doclet",null,0,1,LineTag.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(inlineTagEClass,InlineTag.class,"InlineTag",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(textEClass,Text.class,"Text",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getText_Text(),theEcorePackage.getEString(),"text",null,0,1,Text.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(simpleTypeReferenceEClass,SimpleTypeReference.class,"SimpleTypeReference",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getSimpleTypeReference_TypeName(),theEcorePackage.getEString(),"typeName",null,0,1,SimpleTypeReference.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getSimpleTypeReference__TypeNameSet(),theEcorePackage.getEBoolean(),"typeNameSet",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getSimpleTypeReference__ToString(),theEcorePackage.getEString(),"toString",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(fullTypeReferenceEClass,FullTypeReference.class,"FullTypeReference",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getFullTypeReference_ModuleName(),theEcorePackage.getEString(),"moduleName",null,0,1,FullTypeReference.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getFullTypeReference__ModuleNameSet(),theEcorePackage.getEBoolean(),"moduleNameSet",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getFullTypeReference__ToString(),theEcorePackage.getEString(),"toString",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getFullTypeReference__FullTypeName(),theEcorePackage.getEString(),"fullTypeName",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(fullMemberReferenceEClass,FullMemberReference.class,"FullMemberReference",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getFullMemberReference_MemberName(),theEcorePackage.getEString(),"memberName",null,0,1,FullMemberReference.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getFullMemberReference_StaticMember(),theEcorePackage.getEBoolean(),"staticMember",null,0,1,FullMemberReference.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getFullMemberReference__MemberNameSet(),theEcorePackage.getEBoolean(),"memberNameSet",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getFullMemberReference__ToString(),theEcorePackage.getEString(),"toString",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(variableReferenceEClass,VariableReference.class,"VariableReference",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getVariableReference_VariableName(),theEcorePackage.getEString(),"variableName",null,0,1,VariableReference.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(genericReferenceEClass,GenericReference.class,"GenericReference",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(literalEClass,Literal.class,"Literal",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getLiteral_Value(),theEcorePackage.getEString(),"value",null,0,1,Literal.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getLiteral_Name(),theEcorePackage.getEString(),"name",null,0,1,Literal.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(markerEClass,Marker.class,"Marker",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getMarker_Key(),theEcorePackage.getEString(),"key",null,0,1,Marker.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getMarker_Value(),theEcorePackage.getEString(),"value",null,0,1,Marker.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(composedContentEClass,ComposedContent.class,"ComposedContent",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(structuredTextEClass,StructuredText.class,"StructuredText",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getStructuredText_RootElement(),theEcorePackage.getEObject(),null,"rootElement",null,0,1,StructuredText.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEDataType(tagDefinitionEDataType,ITagDefinition.class,"TagDefinition",IS_SERIALIZABLE,!IS_GENERATED_INSTANCE_CLASS);  createResource(eNS_URI);}  }
class C{  public Matrix4d translationRotateScale(Vector3dc translation,Quaterniondc quat,double scale){  return translationRotateScale(translation.x(),translation.y(),translation.z(),quat.x(),quat.y(),quat.z(),quat.w(),scale,scale,scale);}  }
class C{  public static IntLiteral makeIntLiteral(char[] token,ASTNode source){  int pS=source == null ? 0 : source.sourceStart, pE=source == null ? 0 : source.sourceEnd;  IntLiteral result;  try {    if (intLiteralConstructor != null) {      result=intLiteralConstructor.newInstance(token,pS,pE);    } else {      result=(IntLiteral)intLiteralFactoryMethod.invoke(null,token,pS,pE);    }  } catch (  InvocationTargetException e) {    throw Lombok.sneakyThrow(e.getCause());  }catch (  IllegalAccessException e) {    throw Lombok.sneakyThrow(e);  }catch (  InstantiationException e) {    throw Lombok.sneakyThrow(e);  }  if (source != null)   setGeneratedBy(result,source);  return result;}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();}  }
class C{  public void warn(String format,Object arg1,Object arg2){  formatAndLog(Log.WARN,format,arg1,arg2);}  }
class C{  public void keyPressed(KeyEvent e){  ((KeyListener)a).keyPressed(e);  ((KeyListener)b).keyPressed(e);}  }
class C{  public void scale(final double scale){  this.matrix.scale(scale);}  }
class C{  public ItemEvent(ItemSelectable source,int id,Object item,int stateChange){  super(source,id);  this.item=item;  this.stateChange=stateChange;}  }
class C{  public static void serializeTableFeaturesReply(List<OFTableFeaturesStatsReply> tableFeaturesReplies,JsonGenerator jGen) throws IOException, JsonProcessingException {  OFTableFeaturesStatsReply tableFeaturesReply=tableFeaturesReplies.get(0);  jGen.writeStringField("version",tableFeaturesReply.getVersion().toString());  jGen.writeFieldName("tableFeatures");  jGen.writeStartArray();  for (  OFTableFeatures tableFeature : tableFeaturesReply.getEntries()) {    jGen.writeStartObject();    jGen.writeNumberField("tableId",tableFeature.getTableId().getValue());    jGen.writeStringField("name",tableFeature.getName());    jGen.writeNumberField("metadataMatch",tableFeature.getMetadataMatch().getValue());    jGen.writeNumberField("metadataWrite",tableFeature.getMetadataWrite().getValue());    jGen.writeNumberField("config",tableFeature.getConfig());    jGen.writeNumberField("maxEntries",tableFeature.getMaxEntries());    jGen.writeFieldName("properties");    jGen.writeStartArray();    for (    OFTableFeatureProp properties : tableFeature.getProperties()) {      jGen.writeStartObject();      short type=(short)properties.getType();      jGen.writeNumberField("tableFeaturePropType",type);switch (type) {case OFTableFeaturePropTypeSerializerVer13.INSTRUCTIONS_VAL:        OFTableFeaturePropInstructions propInstruct=(OFTableFeaturePropInstructions)properties;      jGen.writeFieldName("instructions");    jGen.writeStartArray();  for (  OFInstructionId id : propInstruct.getInstructionIds()) {    jGen.writeStartObject();    jGen.writeString(id.getType().toString());    jGen.writeEndObject();  }jGen.writeEndArray();break;case OFTableFeaturePropTypeSerializerVer13.INSTRUCTIONS_MISS_VAL:OFTableFeaturePropInstructionsMiss propInstructMiss=(OFTableFeaturePropInstructionsMiss)properties;jGen.writeFieldName("instructionsMiss");jGen.writeStartArray();for (OFInstructionId id : propInstructMiss.getInstructionIds()) {jGen.writeStartObject();jGen.writeString(id.getType().toString());jGen.writeEndObject();}jGen.writeEndArray();break;case OFTableFeaturePropTypeSerializerVer13.NEXT_TABLES_VAL:OFTableFeaturePropNextTables propNxtTables=(OFTableFeaturePropNextTables)properties;jGen.writeFieldName("nextTables");jGen.writeStartArray();for (U8 id : propNxtTables.getNextTableIds()) {jGen.writeStartObject();jGen.writeNumber(id.getValue());jGen.writeEndObject();}jGen.writeEndArray();break;case OFTableFeaturePropTypeSerializerVer13.NEXT_TABLES_MISS_VAL:OFTableFeaturePropNextTablesMiss propNxtTablesMiss=(OFTableFeaturePropNextTablesMiss)properties;jGen.writeFieldName("nextTablesMiss");jGen.writeStartArray();for (U8 id : propNxtTablesMiss.getNextTableIds()) {jGen.writeStartObject();jGen.writeNumber(id.getValue());jGen.writeEndObject();}jGen.writeEndArray();break;case OFTableFeaturePropTypeSerializerVer13.WRITE_ACTIONS_VAL:OFTableFeaturePropWriteActions propWrAct=(OFTableFeaturePropWriteActions)properties;jGen.writeFieldName("writeActions");jGen.writeStartArray();for (OFActionId id : propWrAct.getActionIds()) {jGen.writeStartObject();jGen.writeString(id.getType().toString());jGen.writeEndObject();}jGen.writeEndArray();break;case OFTableFeaturePropTypeSerializerVer13.WRITE_ACTIONS_MISS_VAL:OFTableFeaturePropWriteActionsMiss propWrActMiss=(OFTableFeaturePropWriteActionsMiss)properties;jGen.writeFieldName("writeActionsMiss");jGen.writeStartArray();for (OFActionId id : propWrActMiss.getActionIds()) {jGen.writeStartObject();jGen.writeString(id.getType().toString());jGen.writeEndObject();}jGen.writeEndArray();break;case OFTableFeaturePropTypeSerializerVer13.APPLY_ACTIONS_VAL:OFTableFeaturePropApplyActions propAppAct=(OFTableFeaturePropApplyActions)properties;jGen.writeFieldName("applyActions");jGen.writeStartArray();for (OFActionId id : propAppAct.getActionIds()) {jGen.writeStartObject();jGen.writeString(id.getType().toString());jGen.writeEndObject();}jGen.writeEndArray();break;case OFTableFeaturePropTypeSerializerVer13.APPLY_ACTIONS_MISS_VAL:OFTableFeaturePropApplyActionsMiss propAppActMiss=(OFTableFeaturePropApplyActionsMiss)properties;jGen.writeFieldName("applyActionsMiss");jGen.writeStartArray();for (OFActionId id : propAppActMiss.getActionIds()) {jGen.writeStartObject();jGen.writeString(id.getType().toString());jGen.writeEndObject();}jGen.writeEndArray();break;case OFTableFeaturePropTypeSerializerVer13.MATCH_VAL:OFTableFeaturePropMatch propMatch=(OFTableFeaturePropMatch)properties;jGen.writeFieldName("match");jGen.writeStartArray();for (U32 id : propMatch.getOxmIds()) {jGen.writeStartObject();jGen.writeNumber(id.getValue());jGen.writeEndObject();}jGen.writeEndArray();break;case OFTableFeaturePropTypeSerializerVer13.WILDCARDS_VAL:OFTableFeaturePropWildcards propWildcards=(OFTableFeaturePropWildcards)properties;jGen.writeFieldName("wildcards");jGen.writeStartArray();for (U32 id : propWildcards.getOxmIds()) {jGen.writeStartObject();jGen.writeNumber(id.getValue());jGen.writeEndObject();}jGen.writeEndArray();break;case OFTableFeaturePropTypeSerializerVer13.WRITE_SETFIELD_VAL:OFTableFeaturePropWriteSetfield propWrSetfield=(OFTableFeaturePropWriteSetfield)properties;jGen.writeFieldName("writeSetfield");jGen.writeStartArray();for (U32 id : propWrSetfield.getOxmIds()) {jGen.writeStartObject();jGen.writeNumber(id.getValue());jGen.writeEndObject();}jGen.writeEndArray();break;case OFTableFeaturePropTypeSerializerVer13.WRITE_SETFIELD_MISS_VAL:OFTableFeaturePropWriteSetfieldMiss propWrSetfieldMiss=(OFTableFeaturePropWriteSetfieldMiss)properties;jGen.writeFieldName("writeSetfieldMiss");jGen.writeStartArray();for (U32 id : propWrSetfieldMiss.getOxmIds()) {jGen.writeStartObject();jGen.writeNumber(id.getValue());jGen.writeEndObject();}jGen.writeEndArray();break;case OFTableFeaturePropTypeSerializerVer13.APPLY_SETFIELD_VAL:OFTableFeaturePropApplySetfield propAppSetfield=(OFTableFeaturePropApplySetfield)properties;jGen.writeFieldName("applySetfield");jGen.writeStartArray();for (U32 id : propAppSetfield.getOxmIds()) {jGen.writeStartObject();jGen.writeNumber(id.getValue());jGen.writeEndObject();}jGen.writeEndArray();break;case OFTableFeaturePropTypeSerializerVer13.APPLY_SETFIELD_MISS_VAL:OFTableFeaturePropApplySetfieldMiss propAppSetfieldMiss=(OFTableFeaturePropApplySetfieldMiss)properties;jGen.writeFieldName("applySetfieldMiss");jGen.writeStartArray();for (U32 id : propAppSetfieldMiss.getOxmIds()) {jGen.writeStartObject();jGen.writeNumber(id.getValue());jGen.writeEndObject();}jGen.writeEndArray();break;case OFTableFeaturePropTypeSerializerVer13.EXPERIMENTER_VAL:OFTableFeaturePropExperimenter propExp=(OFTableFeaturePropExperimenter)properties;jGen.writeFieldName("experimenter");jGen.writeStartObject();jGen.writeNumberField("subType",propExp.getSubtype());jGen.writeNumberField("experimenter",propExp.getExperimenter());jGen.writeStringField("subType",propExp.getExperimenterData().toString());jGen.writeEndObject();break;case OFTableFeaturePropTypeSerializerVer13.EXPERIMENTER_MISS_VAL:OFTableFeaturePropExperimenterMiss propExpMiss=(OFTableFeaturePropExperimenterMiss)properties;jGen.writeFieldName("experimenterMiss");jGen.writeStartObject();jGen.writeNumberField("subType",propExpMiss.getSubtype());jGen.writeNumberField("experimenter",propExpMiss.getExperimenter());jGen.writeStringField("subType",propExpMiss.getExperimenterData().toString());jGen.writeEndObject();break;default :break;}jGen.writeEndObject();}jGen.writeEndObject();}jGen.writeEndArray();}  }
class C{  public boolean isAllowSyntheticDefaultImports(){  return allowSyntheticDefaultImports;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-06 12:50:59.186 -0400",hash_original_method="443D4D0ED29B98EE49439D994126F289",hash_generated_method="C2F95FF4A943FF66CDE846512C13DDCE") public boolean isCancelling(){  return mCanceling;}  }
class C{  protected void paintActiveLinkArrow(Graphics2D g2,Link activeLink){  if (activeLink == null)   return;  MutableCoord P1=transform(activeLink.getFromNode().getCoord());  MutableCoord P2=transform(activeLink.getToNode().getCoord());  AffineTransform tx=new AffineTransform();  Line2D.Double lines=new Line2D.Double(P1.getX(),P1.getY(),P2.getX(),P2.getY());  Polygon arrowHead=new Polygon();  arrowHead.addPoint(0,4);  arrowHead.addPoint(-4,-4);  arrowHead.addPoint(4,-4);  tx.setToIdentity();  double angle=Math.atan2(lines.y2 - lines.y1,lines.x2 - lines.x1);  tx.translate(lines.x2,lines.y2);  tx.rotate((angle - Math.PI / 2d));  Graphics2D g=(Graphics2D)g2.create();  g.setTransform(tx);  g.fill(arrowHead);  g.dispose();}  }
class C{  private void writeObject(ObjectOutputStream out) throws ClassNotFoundException, IOException {  out.defaultWriteObject();  out.writeObject(SerializationUtils.wrap(errorStroke));}  }
class C{  public static void forEachValuePair(LIR lir,AbstractBlockBase<?> toBlock,AbstractBlockBase<?> fromBlock,PhiValueVisitor visitor){  assert Arrays.asList(toBlock.getPredecessors()).contains(fromBlock) : String.format("%s not in predecessor list: %s",fromBlock,Arrays.toString(toBlock.getPredecessors()));  assert fromBlock.getSuccessorCount() == 1 || toBlock.getPredecessorCount() == 1 : String.format("Critical Edge? %s has %d successors and %s has %d predecessors",fromBlock,fromBlock.getSuccessorCount(),toBlock,toBlock.getPredecessorCount());  assert Arrays.asList(fromBlock.getSuccessors()).contains(toBlock) : String.format("Predecessor block %s has wrong successor: %s, should contain: %s",fromBlock,Arrays.toString(fromBlock.getSuccessors()),toBlock);  BlockEndOp blockEnd=outgoing(lir,fromBlock);  LabelOp label=incoming(lir,toBlock);  assert label.getIncomingSize() == blockEnd.getOutgoingSize() : String.format("In/Out size mismatch: in=%d vs. out=%d, blocks %s vs. %s",label.getIncomingSize(),blockEnd.getOutgoingSize(),toBlock,fromBlock);  assert label.getPhiSize() == blockEnd.getPhiSize() : String.format("Phi In/Out size mismatch: in=%d vs. out=%d",label.getPhiSize(),blockEnd.getPhiSize());  for (int i=0; i < label.getIncomingSize(); i++) {    visitor.visit(label.getIncomingValue(i),blockEnd.getOutgoingValue(i));  }}  }
class C{  @VisibleForTesting public void processEnableFullscreenRunnableForTest(){  if (mHandler.hasMessages(MSG_ID_ENABLE_FULLSCREEN_AFTER_LOAD)) {    mHandler.removeMessages(MSG_ID_ENABLE_FULLSCREEN_AFTER_LOAD);    enableFullscreenAfterLoad();  }}  }
class C{  public ColorStateList withAlpha(int alpha){  int[] colors=new int[mColors.length];  int len=colors.length;  for (int i=0; i < len; i++) {    colors[i]=(mColors[i] & 0xFFFFFF) | (alpha << 24);  }  return new ColorStateList(mStateSpecs,colors);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:21.489 -0500",hash_original_method="4D0156FCE32C3B62D3099FB0908581D6",hash_generated_method="1B3832723BC3034606D499CCE41B0CA4") private void sendSmsAckForEnvelopeResponse(IccIoResult response,int dcs,int pid){  int sw1=response.sw1;  int sw2=response.sw2;  boolean success;  if ((sw1 == 0x90 && sw2 == 0x00) || sw1 == 0x91) {    Log.d(TAG,"USIM data download succeeded: " + response.toString());    success=true;  } else   if (sw1 == 0x93 && sw2 == 0x00) {    Log.e(TAG,"USIM data download failed: Toolkit busy");    acknowledgeSmsWithError(CommandsInterface.GSM_SMS_FAIL_CAUSE_USIM_APP_TOOLKIT_BUSY);    return;  } else   if (sw1 == 0x62 || sw1 == 0x63) {    Log.e(TAG,"USIM data download failed: " + response.toString());    success=false;  } else {    Log.e(TAG,"Unexpected SW1/SW2 response from UICC: " + response.toString());    success=false;  }  byte[] responseBytes=response.payload;  if (responseBytes == null || responseBytes.length == 0) {    if (success) {      mCI.acknowledgeLastIncomingGsmSms(true,0,null);    } else {      acknowledgeSmsWithError(CommandsInterface.GSM_SMS_FAIL_CAUSE_USIM_DATA_DOWNLOAD_ERROR);    }    return;  }  byte[] smsAckPdu;  int index=0;  if (success) {    smsAckPdu=new byte[responseBytes.length + 5];    smsAckPdu[index++]=0x00;    smsAckPdu[index++]=0x07;  } else {    smsAckPdu=new byte[responseBytes.length + 6];    smsAckPdu[index++]=0x00;    smsAckPdu[index++]=(byte)CommandsInterface.GSM_SMS_FAIL_CAUSE_USIM_DATA_DOWNLOAD_ERROR;    smsAckPdu[index++]=0x07;  }  smsAckPdu[index++]=(byte)pid;  smsAckPdu[index++]=(byte)dcs;  if (is7bitDcs(dcs)) {    int septetCount=responseBytes.length * 8 / 7;    smsAckPdu[index++]=(byte)septetCount;  } else {    smsAckPdu[index++]=(byte)responseBytes.length;  }  System.arraycopy(responseBytes,0,smsAckPdu,index,responseBytes.length);  mCI.acknowledgeIncomingGsmSmsWithPdu(success,IccUtils.bytesToHexString(smsAckPdu),null);}  }
class C{  public long replace(ContentValues values){  return insertInternal(values,true);}  }
class C{  public static void uniteSameRoutesWithJustDifferentDepartures(TransitSchedule schedule){  log.info("Combining TransitRoutes with identical stop sequence...");  long totalNumberOfDepartures=0;  long departuresWithChangedSchedules=0;  long totalNumberOfStops=0;  long stopsWithChangedTimes=0;  double changedTotalTimeAtStops=0.;  List<Double> timeChanges=new ArrayList<>();  for (  TransitLine line : schedule.getTransitLines().values()) {    final Map<String,List<TransitRoute>> routeProfiles=new HashMap<>();    for (    TransitRoute transitRoute : line.getRoutes().values()) {      totalNumberOfDepartures+=transitRoute.getDepartures().size();      totalNumberOfStops+=transitRoute.getDepartures().size() * transitRoute.getStops().size();      String routeProfile=transitRoute.getStops().get(0).getStopFacility().getId().toString();      for (int i=1; i < transitRoute.getStops().size(); i++) {        routeProfile=routeProfile + "-" + transitRoute.getStops().get(i).getStopFacility().getId().toString();      }      MapUtils.getList(routeProfile,routeProfiles).add(transitRoute);    }    for (    List<TransitRoute> routesToUnite : routeProfiles.values()) {      TransitRoute finalRoute=routesToUnite.get(0);      for (int i=1; i < routesToUnite.size(); i++) {        TransitRoute routeToAdd=routesToUnite.get(i);        for (        Departure departure : routeToAdd.getDepartures().values()) {          finalRoute.addDeparture(departure);        }        line.removeRoute(routeToAdd);        int numberOfDepartures=routeToAdd.getDepartures().size();        boolean departureWithChangedDepartureTimes=false;        for (int j=0; j < finalRoute.getStops().size(); j++) {          double changedTotalTimeAtStop=Math.abs(finalRoute.getStops().get(j).getArrivalOffset() - routeToAdd.getStops().get(j).getArrivalOffset()) + Math.abs(finalRoute.getStops().get(j).getDepartureOffset() - routeToAdd.getStops().get(j).getDepartureOffset());          if (changedTotalTimeAtStop > 0) {            stopsWithChangedTimes+=numberOfDepartures;            changedTotalTimeAtStops+=changedTotalTimeAtStop * numberOfDepartures;            for (int k=0; k < numberOfDepartures; k++) {              timeChanges.add(changedTotalTimeAtStop);            }            departureWithChangedDepartureTimes=true;          }        }        if (departureWithChangedDepartureTimes) {          departuresWithChangedSchedules+=numberOfDepartures;        }      }    }  }  log.info("   Total Number of Departures: " + totalNumberOfDepartures);  log.info("   Number of Departures with changed schedule: " + departuresWithChangedSchedules);  log.info("   Total Number of Stops: " + totalNumberOfStops);  log.info("   Number of Stops with changed departure or arrival times: " + stopsWithChangedTimes);  log.info("   Total time difference caused by changed departure or arrival times: " + changedTotalTimeAtStops);  log.info("   Average time difference caused by changed times: " + (changedTotalTimeAtStops / stopsWithChangedTimes));  log.info("   Average time difference over all stops caused by changed times: " + (changedTotalTimeAtStops / totalNumberOfStops));}  }
class C{  public void onStartButtonPressed(View view){  mGameViews.getStartMenuFragment().onStartButtonPressed();}  }
class C{  protected void layoutMajorAxis(int targetSpan,int axis,int[] offsets,int[] spans){  if (children == null) {    init();  }  SizeRequirements.calculateTiledPositions(targetSpan,null,getChildRequests(targetSpan,axis),offsets,spans);}  }
class C{  int lanso(SMat A,int iterations,int dimensions,double endl,double endr,double[] ritz,double[] bnd,double[][] wptr,int[] neigp,int n){  double[] alf, eta, oldeta, bet, wrk;  int ll, neig, j=0, intro=0, last, i, l, id3, first;  boolean ENOUGH;  alf=wptr[6];  eta=wptr[7];  oldeta=wptr[8];  bet=wptr[9];  wrk=wptr[5];  double[] ref_rnm=new double[]{0d};  double[] ref_tol=new double[]{0d};  stpone(A,wptr,ref_rnm,ref_tol,n);  double tol=ref_tol[0];  double rnm=ref_rnm[0];  if (0 == rnm || 0 != ierr)   return 0;  eta[0]=eps1;  oldeta[0]=eps1;  ll=0;  first=1;  last=svd_imin(dimensions + svd_imax(8,dimensions),iterations);  ENOUGH=false;  while (!ENOUGH) {    if (rnm <= tol)     rnm=0.0;    int[] ref_ll=new int[]{ll};    boolean[] ref_ENOUGH=new boolean[]{ENOUGH};    double[] ref2_rnm=new double[]{rnm};    double[] ref2_tol=new double[]{tol};    j=lanczos_step(A,first,last,wptr,alf,eta,oldeta,bet,ref_ll,ref_ENOUGH,ref2_rnm,ref2_tol,n);    ll=ref_ll[0];    ENOUGH=ref_ENOUGH[0];    tol=ref2_tol[0];    rnm=ref2_rnm[0];    if (ENOUGH)     j=j - 1; else     j=last - 1;    first=j + 1;    bet[j + 1]=rnm;    l=0;    for (int id2=0; id2 < j; id2++) {      if (l > j)       break;      for (i=l; i <= j; i++)       if (0 == bet[i + 1])       break;      if (i > j)       i=j;      svd_dcopy(i - l + 1,alf,l,1,ritz,l,-1);      svd_dcopy(i - l,bet,l + 1,1,wrk,l + 1,-1);      imtqlb(i - l + 1,ritz,wrk,bnd,l);      if (0 != ierr) {        svd_error("svdLAS2: imtqlb failed to converge (ierr = %ld)\n",ierr);        svd_error("  l = %ld  i = %ld\n",l,i);        for (id3=l; id3 <= i; id3++)         svd_error("  %ld  %lg  %lg  %lg\n",id3,ritz[id3],wrk[id3],bnd[id3]);      }      for (id3=l; id3 <= i; id3++)       bnd[id3]=rnm * fabs(bnd[id3]);      l=i + 1;    }    svd_dsort2((j + 1) / 2,j + 1,ritz,bnd);    boolean[] ref2_ENOUGH=new boolean[]{ENOUGH};    neig=error_bound(ref2_ENOUGH,endl,endr,ritz,bnd,j,tol);    ENOUGH=ref2_ENOUGH[0];    neigp[0]=neig;    if (neig < dimensions) {      if (0 == neig) {        last=first + 9;        intro=first;      } else       last=first + svd_imax(3,1 + ((j - intro) * (dimensions - neig)) / neig);      last=svd_imin(last,iterations);    } else     ENOUGH=true;    ENOUGH=ENOUGH || first >= iterations;  }  store(n,storeVals.STORQ,j,wptr[1]);  return j;}  }
class C{  private UnManagedVolume createUnManagedClone(VolumeClone driverClone,UnManagedVolume parentUnManagedVolume,com.emc.storageos.db.client.model.StorageSystem storageSystem,com.emc.storageos.db.client.model.StoragePool storagePool,List<UnManagedVolume> unManagedVolumesToCreate,List<UnManagedVolume> unManagedVolumesToUpdate,DbClient dbClient){  boolean newVolume=false;  String unManagedVolumeNatvieGuid=NativeGUIDGenerator.generateNativeGuidForPreExistingVolume(storageSystem.getNativeGuid(),driverClone.getNativeId());  UnManagedVolume unManagedVolume=DiscoveryUtils.checkUnManagedVolumeExistsInDB(dbClient,unManagedVolumeNatvieGuid);  if (null == unManagedVolume) {    unManagedVolume=new UnManagedVolume();    unManagedVolume.setId(URIUtil.createId(UnManagedVolume.class));    unManagedVolume.setNativeGuid(unManagedVolumeNatvieGuid);    unManagedVolume.setStorageSystemUri(storageSystem.getId());    if (driverClone.getWwn() == null) {      unManagedVolume.setWwn(String.format("%s:%s",driverClone.getStorageSystemId(),driverClone.getNativeId()));    } else {      unManagedVolume.setWwn(driverClone.getWwn());    }    newVolume=true;  } else {    unManagedVolume.putVolumeCharacterstics(UnManagedVolume.SupportedVolumeCharacterstics.IS_VOLUME_ADDED_TO_CONSISTENCYGROUP.toString(),Boolean.FALSE.toString());    unManagedVolume.putVolumeInfo(UnManagedVolume.SupportedVolumeInformation.UNMANAGED_CONSISTENCY_GROUP_URI.toString(),new StringSet());    unManagedVolume.putVolumeInfo(UnManagedVolume.SupportedVolumeInformation.FULL_COPY_CONSISTENCY_GROUP_NAME.toString(),new StringSet());    unManagedVolume.getUnmanagedExportMasks().clear();  }  unManagedVolume.setLabel(driverClone.getDeviceLabel());  unManagedVolume.putVolumeCharacterstics(UnManagedVolume.SupportedVolumeCharacterstics.IS_VOLUME_EXPORTED.toString(),FALSE);  unManagedVolume.putVolumeCharacterstics(UnManagedVolume.SupportedVolumeCharacterstics.IS_NONRP_EXPORTED.toString(),FALSE);  unManagedVolume.putVolumeCharacterstics(UnManagedVolume.SupportedVolumeCharacterstics.IS_RECOVERPOINT_ENABLED.toString(),FALSE);  StringSet deviceLabel=new StringSet();  deviceLabel.add(driverClone.getDeviceLabel());  unManagedVolume.putVolumeInfo(UnManagedVolume.SupportedVolumeInformation.DEVICE_LABEL.toString(),deviceLabel);  if (driverClone.getAccessStatus() != null) {    StringSet accessState=new StringSet();    accessState.add(driverClone.getAccessStatus().toString());    unManagedVolume.putVolumeInfo(UnManagedVolume.SupportedVolumeInformation.ACCESS.toString(),accessState);  }  StringSet systemTypes=new StringSet();  systemTypes.add(storageSystem.getSystemType());  unManagedVolume.putVolumeInfo(UnManagedVolume.SupportedVolumeInformation.SYSTEM_TYPE.toString(),systemTypes);  StringSet nativeId=new StringSet();  nativeId.add(driverClone.getNativeId());  unManagedVolume.putVolumeInfo(UnManagedVolume.SupportedVolumeInformation.NATIVE_ID.toString(),nativeId);  unManagedVolume.putVolumeCharacterstics(UnManagedVolume.SupportedVolumeCharacterstics.IS_INGESTABLE.toString(),TRUE);  unManagedVolume.putVolumeCharacterstics(UnManagedVolume.SupportedVolumeCharacterstics.IS_THINLY_PROVISIONED.toString(),driverClone.getThinlyProvisioned().toString());  unManagedVolume.putVolumeCharacterstics(UnManagedVolume.SupportedVolumeCharacterstics.IS_FULL_COPY.toString(),TRUE);  StringSet parentVol=new StringSet();  parentVol.add(parentUnManagedVolume.getNativeGuid());  unManagedVolume.putVolumeInfo(UnManagedVolume.SupportedVolumeInformation.LOCAL_REPLICA_SOURCE_VOLUME.toString(),parentVol);  StringSet isSyncActive=new StringSet();  isSyncActive.add(TRUE);  unManagedVolume.putVolumeInfo(UnManagedVolume.SupportedVolumeInformation.IS_SYNC_ACTIVE.toString(),isSyncActive);  StringSet isReadOnly=new StringSet();  Boolean readOnly=Boolean.FALSE;  if (driverClone.getAccessStatus() != null) {    readOnly=(driverClone.getAccessStatus().toString()).equals(StorageObject.AccessStatus.READ_ONLY.toString()) ? Boolean.TRUE : Boolean.FALSE;  }  isReadOnly.add(readOnly.toString());  unManagedVolume.putVolumeInfo(UnManagedVolume.SupportedVolumeInformation.IS_READ_ONLY.toString(),isReadOnly);  StringSet techType=new StringSet();  techType.add(BlockSnapshot.TechnologyType.NATIVE.toString());  unManagedVolume.putVolumeInfo(UnManagedVolume.SupportedVolumeInformation.TECHNOLOGY_TYPE.toString(),techType);  String isParentVolumeInCG=parentUnManagedVolume.getVolumeCharacterstics().get(UnManagedVolume.SupportedVolumeCharacterstics.IS_VOLUME_ADDED_TO_CONSISTENCYGROUP.toString());  if (isParentVolumeInCG.equals(Boolean.TRUE.toString())) {    if (driverClone.getConsistencyGroup() != null && !driverClone.getConsistencyGroup().isEmpty()) {      StringSet cloneCgName=new StringSet();      cloneCgName.add(driverClone.getConsistencyGroup());      unManagedVolume.putVolumeInfo(UnManagedVolume.SupportedVolumeInformation.FULL_COPY_CONSISTENCY_GROUP_NAME.toString(),cloneCgName);    }  }  unManagedVolume.setStoragePoolUri(storagePool.getId());  StringSet pools=new StringSet();  pools.add(storagePool.getId().toString());  unManagedVolume.putVolumeInfo(UnManagedVolume.SupportedVolumeInformation.STORAGE_POOL.toString(),pools);  StringSet driveTypes=storagePool.getSupportedDriveTypes();  if (null != driveTypes) {    unManagedVolume.putVolumeInfo(UnManagedVolume.SupportedVolumeInformation.DISK_TECHNOLOGY.toString(),driveTypes);  }  StringSet provCapacity=new StringSet();  provCapacity.add(String.valueOf(driverClone.getProvisionedCapacity()));  unManagedVolume.putVolumeInfo(UnManagedVolume.SupportedVolumeInformation.PROVISIONED_CAPACITY.toString(),provCapacity);  StringSet allocatedCapacity=new StringSet();  allocatedCapacity.add(String.valueOf(driverClone.getAllocatedCapacity()));  unManagedVolume.putVolumeInfo(UnManagedVolume.SupportedVolumeInformation.ALLOCATED_CAPACITY.toString(),allocatedCapacity);  StringSet replicaState=new StringSet();  replicaState.add(driverClone.getReplicationState().toString());  unManagedVolume.putVolumeInfo(UnManagedVolume.SupportedVolumeInformation.REPLICA_STATE.toString(),replicaState);  StringSet accessStatus=new StringSet();  accessStatus.add(driverClone.getAccessStatus().toString());  unManagedVolume.putVolumeInfo(UnManagedVolume.SupportedVolumeInformation.ACCESS.toString(),accessStatus);  StringSet parentMatchedVPools=parentUnManagedVolume.getSupportedVpoolUris();  if (null != parentMatchedVPools) {    log.info("Parent Matched Virtual Pools : {}",Joiner.on("\t").join(parentMatchedVPools));  }  if (null == parentMatchedVPools || parentMatchedVPools.isEmpty()) {    unManagedVolume.getSupportedVpoolUris().clear();  } else {    unManagedVolume.getSupportedVpoolUris().replace(parentMatchedVPools);    log.info("Replaced Virtual Pools :{}",Joiner.on("\t").join(unManagedVolume.getSupportedVpoolUris()));  }  if (newVolume) {    unManagedVolumesToCreate.add(unManagedVolume);  } else {    unManagedVolumesToUpdate.add(unManagedVolume);  }  return unManagedVolume;}  }
class C{  public StringPrinter(Consumer<String> consumer){  this.consumer=consumer;}  }
class C{  public void gameKeyPress(int gameKey){  TestUtils.gameKeyPress(gameKey);}  }
class C{  public void doTestIndexWriterReopenSegment(boolean doFullMerge) throws Exception {  Directory dir1=getAssertNoDeletesDirectory(newDirectory());  IndexWriter writer=new IndexWriter(dir1,newIndexWriterConfig(new MockAnalyzer(random())));  IndexReader r1=writer.getReader();  assertEquals(0,r1.maxDoc());  createIndexNoClose(false,"index1",writer);  writer.flush(!doFullMerge,true);  IndexReader iwr1=writer.getReader();  assertEquals(100,iwr1.maxDoc());  IndexReader r2=writer.getReader();  assertEquals(r2.maxDoc(),100);  for (int x=10000; x < 10000 + 100; x++) {    Document d=DocHelper.createDocument(x,"index1",5);    writer.addDocument(d);  }  writer.flush(false,true);  IndexReader iwr2=writer.getReader();  assertTrue(iwr2 != r1);  assertEquals(200,iwr2.maxDoc());  IndexReader r3=writer.getReader();  assertTrue(r2 != r3);  assertEquals(200,r3.maxDoc());  r1.close();  iwr1.close();  r2.close();  r3.close();  iwr2.close();  writer.close();  writer=new IndexWriter(dir1,newIndexWriterConfig(new MockAnalyzer(random())));  IndexReader w2r1=writer.getReader();  assertEquals(200,w2r1.maxDoc());  w2r1.close();  writer.close();  dir1.close();}  }
class C{  public MAttachmentEntry(String name,byte[] data,int index){  super();  setName(name);  setData(data);  if (index > 0)   m_index=index; else {    long now=System.currentTimeMillis();    if (s_seed + 3600000l < now) {      s_seed=now;      s_random=new Random(s_seed);    }    m_index=s_random.nextInt();  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public RrdDef(String path,long step){  this(path);  if (step <= 0) {    throw new IllegalArgumentException("Invalid RRD step specified: " + step);  }  this.step=step;}  }
class C{  private boolean checkZoningRequired(String token,URI varrayURI){  if (!isZoningRequired(varrayURI)) {    WorkflowStepCompleter.stepSucceded(token);    return false;  } else {    WorkflowStepCompleter.stepExecuting(token);    return true;  }}  }
class C{  @Ignore("NaN behavior TBD") @Test public void testLinearDistance_WithNaN() throws Exception {  Location begin=new Location(Double.NaN,Double.NaN);  Location end=new Location(34.2,-119.2);  double distance=begin.linearDistance(end);  assertTrue("expecting NaN",Double.isNaN(distance));}  }
class C{  public SqlOperation parse(String statement,String dbmsType){  SqlOperationMatcher matcher=matchers.get(dbmsType);  if (matcher == null)   matcher=new MySQLOperationMatcher();  return matcher.match(statement);}  }
class C{  protected void preorder(TreeNode<E> root){  if (root == null)   return;  System.out.print(root.element + " ");  preorder(root.left);  preorder(root.right);}  }
class C{  public String line(){  return line(false);}  }
class C{  public static boolean removeGlobalPreferences(String namespace){  try {    getGlobalPreferences(namespace).removeNode();    return true;  } catch (  BackingStoreException e) {    return false;  }}  }
class C{  private Map<String,Object> handleMiscProcessorError(Transaction transaction){  logger.warningfmt("Error processing transaction: %s %s %s",transaction.getStatus(),transaction.getProcessorResponseCode(),transaction.getProcessorResponseText());  return JsonResponseHelper.create(ERROR,"Payment failure: " + firstNonNull(emptyToNull(transaction.getProcessorResponseText()),transaction.getStatus().toString()));}  }
class C{  public Iterator<Entry<Double,Double>> weightedValuesIterator(){  return valueMap.entrySet().iterator();}  }
class C{  public HgTestRepository cloneRepository() throws Exception {  final TempDirTestFixture dirFixture=createFixtureDir();  final ProcessOutput processOutput=myTest.runHg(null,"clone",getDirFixture().getTempDirPath(),dirFixture.getTempDirPath());  AbstractVcsTestCase.verify(processOutput);  return new HgTestRepository(myTest,dirFixture);}  }
class C{  public static String b64Hash2hexHash(final String b64Hash){  if (b64Hash.length() > 12) {    return "";  }  return Digest.encodeHex(Base64Order.enhancedCoder.decode(b64Hash));}  }
class C{  private void addTestData(){  User adminUser=User.findByLoginId("admin");  User lazielUser=User.findByLoginId("laziel");  Project project=Project.findByOwnerAndProjectName("yobi","projectYobi");  ct1=addTestThread1(adminUser,lazielUser,project);  ct2=addTestThread2(adminUser,lazielUser,project);  ct3=addTestThread3(adminUser,lazielUser,project);}  }
class C{  public ServiceOperationException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  private Object writeReplace(){  return new SynchronizedList(list);}  }
class C{  public static boolean isEmpty(String str){  return (str == null || str.length() == 0);}  }
class C{  synchronized void transactionResumed() throws InvalidSessionHandleStateException {  TransactionContextStateHandler nextState=state.transactionResumed();  setState(nextState);}  }
class C{  public static Date parseDateDay(String dateString) throws ParseException {  return getSimplDateFormat(DF_DEF).parse(dateString);}  }
class C{  public Variable define(String name) throws IllegalStateException, IllegalArgumentException {  validateIsNotKeyword(name);  Variable value=new Variable(name,this);  this.namedVariables.put(name,value);  return value;}  }
class C{  static void unregister(final Object value){  Set<IDKey> registry=getRegistry();  if (registry != null) {    registry.remove(new IDKey(value));synchronized (HashCodeBuilder.class) {      registry=getRegistry();      if (registry != null && registry.isEmpty()) {        REGISTRY.remove();      }    }  }}  }
class C{  private void onAirplaneModeChanged(){  mCheckBoxPref.setChecked(isAirplaneModeOn(mContext));}  }
class C{  public boolean isGeneric(){  return true;}  }
class C{  protected void print(Object s) throws IOException {  out.write(Convert.escapeUnicode(s.toString()));}  }
class C{  public void clearAccessibleSelection(){synchronized (List.this) {    int selectedIndexes[]=List.this.getSelectedIndexes();    if (selectedIndexes == null)     return;    for (int i=selectedIndexes.length - 1; i >= 0; i--) {      List.this.deselect(selectedIndexes[i]);    }  }}  }
class C{  private static boolean isContactUri(Uri uri){  return ContactsContract.AUTHORITY.equals(uri.getAuthority()) && !uri.getPath().startsWith(DISPLAY_PHOTO_PATH);}  }
class C{  public Vector3f multLocal(float scalar){  x*=scalar;  y*=scalar;  z*=scalar;  return this;}  }
class C{  public CRectFEvaluator(RectF reuseRect){  mRectF=reuseRect;}  }
class C{  public void dump_json(PrintStream fp,String indent){  fp.printf("%s{ %s,\n",indent,json_field("type",type));  fp.printf("%s  %s,\n",indent,json_field("link",link));  fp.printf("%s  %s,\n",indent,json_field("signature",method.getSignature()));  SourceLocationTag slt=(stmt == null) ? SootUtils.getMethodLocation(method) : getSourceLocation(stmt);  if (slt != null) {    fp.printf("%s  %s",indent,json_field("src-loc"));    fp.printf("{ %s, %s},\n",json_field("class",slt.getClz()),json_field("line",slt.getLine()));  }  fp.printf("%s  %s,\n",indent,json_field("syscalls",syscalls));  fp.printf("%s  %s,\n",indent,json_field("calls",calls));  if ((contents != null) && (contents.length > 0)) {    fp.printf("%s  %s,\n",indent,json_field("score",score));    fp.printf("%s  %s [\n",indent,json_field("contents"));    String delim="";    for (    CallChainInfo cci : contents) {      fp.print(delim);      delim=",\n";      cci.dump_json(fp,indent + "  ");    }    fp.printf("\n%s]}",indent);  } else {    fp.printf("%s  %s\n",indent,json_field("score",score));    fp.printf("%s}",indent);  }}  }
class C{  @Override public boolean isConnectionBased(){  return false;}  }
class C{  public void mouseWheelMoved(MouseWheelEvent e){  boolean accepted=checkModifiers(e);  if (accepted == true) {    VisualizationViewer<?,?> vv=(VisualizationViewer<?,?>)e.getSource();    Point2D mouse=e.getPoint();    Point2D center=vv.getCenter();    int amount=e.getWheelRotation();    if (zoomAtMouse) {      if (amount > 0) {        scaler.scale(vv,in,mouse);      } else       if (amount < 0) {        scaler.scale(vv,out,mouse);      }    } else {      if (amount > 0) {        scaler.scale(vv,in,center);      } else       if (amount < 0) {        scaler.scale(vv,out,center);      }    }    e.consume();    vv.repaint();  }}  }
class C{  @Override public String toString(){  return m_Matrix.toString();}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  ElementCreator builder=registry.build(KEY);  builder.addAttribute(ABSOLUTE_TIME);  builder.addAttribute(DAYS);  builder.addAttribute(HOURS);  builder.addAttribute(METHOD);  builder.addAttribute(MINUTES);}  }
class C{  public String select(){  String value=(String)getAccountId().getValue();  int rowIndex=Integer.parseInt(value);  getCustomers().setRowIndex(rowIndex);  return (null);}  }
class C{  public HeaderIterator iterator(final String name){  return new BasicListHeaderIterator(this.headers,name);}  }
class C{  public static List propertyDescriptors(int apiLevel){  return PROPERTY_DESCRIPTORS;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public ProjectExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  public int compareTo(Short object){  return compare(value,object.value);}  }
class C{  public boolean isResolved(){  return fIsResolved;}  }
class C{  public String type(){  return type;}  }
class C{  private boolean zzRefill() throws java.io.IOException {  return true;}  }
class C{  public static StandardEvaluationContext createStandardEvaluationContext(BeanFactory beanFactory){  if (beanFactory == null) {    logger.warn("Creating EvaluationContext with no beanFactory",new RuntimeException("No beanfactory"));  }  return doCreateContext(beanFactory);}  }
class C{  public void enqueue(Collection<MetricDatumWithKey<KeyType>> data){synchronized (queue) {    if (shuttingDown) {      LOG.warn("Dropping metrics {} because CWPublisherRunnable is shutting down.",data);      return;    }    if (LOG.isDebugEnabled()) {      LOG.debug("Enqueueing {} datums for publication",data.size());    }    for (    MetricDatumWithKey<KeyType> datumWithKey : data) {      if (!queue.offer(datumWithKey.key,datumWithKey.datum)) {        LOG.warn("Metrics queue full - dropping metric " + datumWithKey.datum);      }    }    if (lastFlushTime == Long.MAX_VALUE) {      lastFlushTime=getTime();    }    queue.notify();  }}  }
class C{  private void extract() throws Exception {  Extractor extractor=factory.getInstance();  if (extractor != null) {    extract(extractor);  }}  }
class C{  public static byte floatToByte315(float f){  int bits=Float.floatToRawIntBits(f);  int smallfloat=bits >> (24 - 3);  if (smallfloat <= ((63 - 15) << 3)) {    return (bits <= 0) ? (byte)0 : (byte)1;  }  if (smallfloat >= ((63 - 15) << 3) + 0x100) {    return -1;  }  return (byte)(smallfloat - ((63 - 15) << 3));}  }
class C{  public static XPath2FilterContainer04 newInstance(Element element,String BaseURI) throws XMLSecurityException {  return new XPath2FilterContainer04(element,BaseURI);}  }
class C{  public Matrix4(float[] values){  this.set(values);}  }
class C{  public void testTxPartitionedOptimisticSerializable() throws Exception {  checkTx(PARTITIONED,OPTIMISTIC,SERIALIZABLE);}  }
class C{  @NoInline static void compileMethod(DynamicLink dynamicLink,RVMMethod targetMethod){  RVMClass targetClass=targetMethod.getDeclaringClass();  if (!targetMethod.isCompiled()) {    targetMethod.compile();    if (!(targetMethod.isObjectInitializer() || targetMethod.isStatic())) {      targetClass.updateTIBEntry(targetMethod);    }  }  if (targetMethod.isObjectInitializer() || targetMethod.isStatic()) {    targetClass.updateJTOCEntry(targetMethod);  } else   if (dynamicLink.isInvokeSpecial()) {    targetClass.updateTIBEntry(targetMethod);  } else {    VM.disableGC();    Object targetObject;    if (VM.BuildForIA32) {      targetObject=org.jikesrvm.ia32.DynamicLinkerHelper.getReceiverObject();    } else {      if (VM.VerifyAssertions)       VM._assert(VM.BuildForPowerPC);      targetObject=org.jikesrvm.ppc.DynamicLinkerHelper.getReceiverObject();    }    VM.enableGC();    RVMClass recvClass=(RVMClass)Magic.getObjectType(targetObject);    recvClass.updateTIBEntry(targetMethod);  }}  }
class C{  public ColorRange(FloatRange hue,FloatRange sat,FloatRange bri,FloatRange alpha,FloatRange black,FloatRange white,String name){  super();  hueConstraint=new GenericSet<FloatRange>(hue != null ? hue : new FloatRange(0,1));  saturationConstraint=new GenericSet<FloatRange>(sat != null ? sat : new FloatRange(0,1));  brightnessConstraint=new GenericSet<FloatRange>(bri != null ? bri : new FloatRange(0,1));  alphaConstraint=new GenericSet<FloatRange>(alpha != null ? alpha : new FloatRange(1,1));  if (black == null) {    this.black=new FloatRange(0,0);  } else {    this.black=black;  }  if (white == null) {    this.white=new FloatRange(1,1);  } else {    this.white=white;  }  this.name=name != null ? name : "untitled" + (UNTITLED_ID++);}  }
class C{  public Message(Address sender,Address recipient,String type){  if (sender == null)   throw new IllegalArgumentException("sender mustn't be null in Message constructor");  if (recipient == null)   throw new IllegalArgumentException("recipient mustn't be null in Message constructor");  if (type == null)   throw new IllegalArgumentException("type mustn't be null in Message constructor");  this.sender=sender;  this.recipient=recipient;  this.type=type;  this.content=null;}  }
class C{  public IComment editGlobalComment(final IComment comment,final String newComment){  try {    m_node.getComments().editGlobalCodeNodeComment(comment,newComment);  } catch (  final CouldntSaveDataException exception) {    CUtilityFunctions.logException(exception);  }  return null;}  }
class C{  public void saveLaunchConfiguration(ILaunchConfigurationWorkingCopy configuration) throws CoreException {  LaunchConfigurationUpdater configurator=getLaunchConfigurator(configuration);  if (configurator != null) {    configurator.update();  }}  }
class C{  public void decrement(){  mCount--;  if (mCount == 0 && !mLastDecRunnables.isEmpty()) {    int numRunnables=mLastDecRunnables.size();    for (int i=0; i < numRunnables; i++) {      mLastDecRunnables.get(i).run();    }  } else   if (mCount < 0) {    if (mErrorRunnable != null) {      mErrorRunnable.run();    } else {      new Throwable("Invalid ref count").printStackTrace();    }  }}  }
class C{  private void onSchemaComplexType(Element schemaComplexType,DatatypeElementFactory elementFactory){  Iterator<Element> iter=schemaComplexType.elementIterator(XSD_ATTRIBUTE);  while (iter.hasNext()) {    Element xsdAttribute=iter.next();    String name=xsdAttribute.attributeValue("name");    QName qname=getQName(name);    XSDatatype dataType=dataTypeForXsdAttribute(xsdAttribute);    if (dataType != null) {      elementFactory.setAttributeXSDatatype(qname,dataType);    }  }  Element schemaSequence=schemaComplexType.element(XSD_SEQUENCE);  if (schemaSequence != null) {    onChildElements(schemaSequence,elementFactory);  }  Element schemaChoice=schemaComplexType.element(XSD_CHOICE);  if (schemaChoice != null) {    onChildElements(schemaChoice,elementFactory);  }  Element schemaAll=schemaComplexType.element(XSD_ALL);  if (schemaAll != null) {    onChildElements(schemaAll,elementFactory);  }}  }
class C{  protected byte[] pickleMetrics(List<MetricTuple> metrics) throws IOException {  ByteArrayOutputStream out=new ByteArrayOutputStream(metrics.size() * 75);  Writer pickled=new OutputStreamWriter(out,charset);  pickled.append(MARK);  pickled.append(LIST);  for (  MetricTuple tuple : metrics) {    pickled.append(MARK);    pickled.append(STRING);    pickled.append(QUOTE);    pickled.append(tuple.name);    pickled.append(QUOTE);    pickled.append(LF);    pickled.append(MARK);    pickled.append(LONG);    pickled.append(Long.toString(tuple.timestamp));    pickled.append(LONG);    pickled.append(LF);    pickled.append(STRING);    pickled.append(QUOTE);    pickled.append(tuple.value);    pickled.append(QUOTE);    pickled.append(LF);    pickled.append(TUPLE);    pickled.append(TUPLE);    pickled.append(APPEND);  }  pickled.append(STOP);  pickled.flush();  return out.toByteArray();}  }
class C{  public Deathdate(Date date,boolean hasTime){  super(date,hasTime);}  }
class C{  public void displayCursor(Cursor cursor){  mCursor=cursor;  mCursorAdapter.changeCursor(cursor);}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  private int computeFlags(int curFlags){  curFlags&=~(WindowManager.LayoutParams.FLAG_IGNORE_CHEEK_PRESSES | WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE | WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE| WindowManager.LayoutParams.FLAG_WATCH_OUTSIDE_TOUCH| WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS| WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM);  curFlags|=WindowManager.LayoutParams.FLAG_IGNORE_CHEEK_PRESSES;  curFlags|=WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE;  curFlags|=WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE;  curFlags|=WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS;  return curFlags;}  }
class C{  public void unplaceVolumeFromMask(URI volumeURI,URI exportMaskURI){  Map<URI,Volume> map=maskToVolumes.get(exportMaskURI);  if (map != null) {    map.remove(volumeURI);    if (map.isEmpty()) {      maskToVolumes.remove(exportMaskURI);    }  }}  }
class C{  protected void performTest(){  Instances icopy=new Instances(m_Instances);  Instances result=null;  try {    m_Filter.setInputFormat(icopy);  } catch (  Exception ex) {    ex.printStackTrace();    fail("Exception thrown on setInputFormat(): \n" + ex.getMessage());  }  try {    result=Filter.useFilter(icopy,m_Filter);    assertNotNull(result);  } catch (  Exception ex) {    ex.printStackTrace();    fail("Exception thrown on useFilter(): \n" + ex.getMessage());  }  assertEquals((icopy.numAttributes() + 1),result.numAttributes());  assertEquals(icopy.numInstances(),m_Instances.numInstances());}  }
class C{  private void addSharedExternalDependencies(){  Map<String,SortedSet<ExternalDependency>> sharedDependencies=new HashMap<>();  for (  String module : interModuleExternalCompileScopeDependencies.keySet()) {    TreeSet<ExternalDependency> deps=new TreeSet<>();    sharedDependencies.put(module,deps);    Set<String> moduleDependencies=interModuleExternalCompileScopeDependencies.get(module);    if (null != moduleDependencies) {      for (      String otherArtifactId : moduleDependencies) {        SortedSet<ExternalDependency> otherExtDeps=allExternalDependencies.get(otherArtifactId);        if (null != otherExtDeps) {          for (          ExternalDependency otherDep : otherExtDeps) {            if (!otherDep.isTestDependency) {              deps.add(otherDep);            }          }        }      }    }  }  for (  String module : interModuleExternalTestScopeDependencies.keySet()) {    SortedSet<ExternalDependency> deps=sharedDependencies.get(module);    if (null == deps) {      deps=new TreeSet<>();      sharedDependencies.put(module,deps);    }    Set<String> moduleDependencies=interModuleExternalTestScopeDependencies.get(module);    if (null != moduleDependencies) {      for (      String otherArtifactId : moduleDependencies) {        int testScopePos=otherArtifactId.indexOf(":test");        boolean isTestScope=false;        if (-1 != testScopePos) {          otherArtifactId=otherArtifactId.substring(0,testScopePos);          isTestScope=true;        }        SortedSet<ExternalDependency> otherExtDeps=allExternalDependencies.get(otherArtifactId);        if (null != otherExtDeps) {          for (          ExternalDependency otherDep : otherExtDeps) {            if (otherDep.isTestDependency == isTestScope) {              if (!deps.contains(otherDep) && (null == allExternalDependencies.get(module) || !allExternalDependencies.get(module).contains(otherDep))) {                ExternalDependency otherDepTestScope=new ExternalDependency(otherDep.groupId,otherDep.artifactId,otherDep.classifier,true,otherDep.isOptional);                deps.add(otherDepTestScope);              }            }          }        }      }    }  }  for (  String module : sharedDependencies.keySet()) {    SortedSet<ExternalDependency> deps=allExternalDependencies.get(module);    if (null == deps) {      deps=new TreeSet<>();      allExternalDependencies.put(module,deps);    }    for (    ExternalDependency dep : sharedDependencies.get(module)) {      String dependencyCoordinate=dep.groupId + ":" + dep.artifactId;      if (globalOptionalExternalDependencies.contains(dependencyCoordinate) || (perModuleOptionalExternalDependencies.containsKey(module) && perModuleOptionalExternalDependencies.get(module).contains(dependencyCoordinate))) {        dep=new ExternalDependency(dep.groupId,dep.artifactId,dep.classifier,dep.isTestDependency,true);      }      deps.add(dep);    }  }}  }
class C{  public boolean isBlockRemark(){  return blockRemark;}  }
class C{  public void withdraw(double amount){  balance-=amount;}  }
class C{  public static void register(){  CommandCenter.register(FORSAKE,new ForsakeAction());}  }
class C{  private int paramNumberFromMoveParam(NormalSsaInsn ndefInsn){  CstInsn origInsn=(CstInsn)ndefInsn.getOriginalRopInsn();  return ((CstInteger)origInsn.getConstant()).getValue();}  }
class C{  public static int jacobi(BigInteger A,BigInteger B){  BigInteger a, b, v;  long k=1;  k=1;  if (B.equals(ZERO)) {    a=A.abs();    return a.equals(ONE) ? 1 : 0;  }  if (!A.testBit(0) && !B.testBit(0)) {    return 0;  }  a=A;  b=B;  if (b.signum() == -1) {    b=b.negate();    if (a.signum() == -1) {      k=-1;    }  }  v=ZERO;  while (!b.testBit(0)) {    v=v.add(ONE);    b=b.divide(TWO);  }  if (v.testBit(0)) {    k=k * jacobiTable[a.intValue() & 7];  }  if (a.signum() < 0) {    if (b.testBit(1)) {      k=-k;    }    a=a.negate();  }  while (a.signum() != 0) {    v=ZERO;    while (!a.testBit(0)) {      v=v.add(ONE);      a=a.divide(TWO);    }    if (v.testBit(0)) {      k=k * jacobiTable[b.intValue() & 7];    }    if (a.compareTo(b) < 0) {      BigInteger x=a;      a=b;      b=x;      if (a.testBit(1) && b.testBit(1)) {        k=-k;      }    }    a=a.subtract(b);  }  return b.equals(ONE) ? (int)k : 0;}  }
class C{  @Override public void writeEntityToNBT(NBTTagCompound tagCompound){  tagCompound.setShort("xTile",(short)this.blockPos.getX());  tagCompound.setShort("yTile",(short)this.blockPos.getY());  tagCompound.setShort("zTile",(short)this.blockPos.getZ());  tagCompound.setFloat("damage",this.damage);  tagCompound.setInteger("distanceTraveled",this.distanceTraveled);  tagCompound.setInteger("life",this.life);  tagCompound.setInteger("color",this.color);}  }
class C{  @Override protected void onReset(){  super.onReset();  onStopLoading();  if (mPackageObserver != null) {    getContext().unregisterReceiver(mPackageObserver);    mPackageObserver=null;  }}  }
class C{  @Override public void updateCharacterStream(int columnIndex,Reader x,int length) throws SQLException {  updateCharacterStream(columnIndex,x,(long)length);}  }
class C{  public void test_setFormatILjava_text_Format(){  try {    MessageFormat f1=(MessageFormat)format1.clone();    f1.setFormat(0,DateFormat.getTimeInstance());    f1.setFormat(1,DateFormat.getTimeInstance());    f1.setFormat(2,NumberFormat.getInstance());    f1.setFormat(3,new ChoiceFormat("0#off|1#on"));    f1.setFormat(4,new ChoiceFormat("1#few|2#ok|3#a lot"));    f1.setFormat(5,DateFormat.getTimeInstance());    Format[] formats=f1.getFormats();    formats=f1.getFormats();    Format[] correctFormats=new Format[]{DateFormat.getTimeInstance(),DateFormat.getTimeInstance(),NumberFormat.getInstance(),new ChoiceFormat("0#off|1#on"),new ChoiceFormat("1#few|2#ok|3#a lot"),DateFormat.getTimeInstance()};    assertEquals("Test1A:Returned wrong number of formats:",correctFormats.length,formats.length);    for (int i=0; i < correctFormats.length; i++) {      assertEquals("Test1B:wrong format for pattern index " + i + ":",correctFormats[i],formats[i]);    }    try {      f1.setFormat(-1,DateFormat.getDateInstance());      fail("Expected ArrayIndexOutOfBoundsException was not thrown");      f1.setFormat(f1.getFormats().length,DateFormat.getDateInstance());      fail("Expected ArrayIndexOutOfBoundsException was not thrown");    } catch (    ArrayIndexOutOfBoundsException e) {    }  } catch (  Exception e) {    fail("Unexpected exception " + e.toString());  }}  }
class C{  public short[][] reduce_table(){  return _reduce_table;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  private static boolean isNotNullInteresado(InteresadoVO interesado){  boolean result=true;  if (StringUtils.isEmpty(interesado.getId()) && StringUtils.isEmpty(interesado.getNombre())) {    return false;  }  return result;}  }
class C{  public final boolean checkTag(int identifier){  return this.id == identifier || this.constrId == identifier;}  }
class C{  public boolean isReady(){  return true;}  }
class C{  public String toHuman(String prefix,String header){  StringBuilder sb=new StringBuilder(100);  int size=size();  sb.append(prefix);  sb.append(header);  sb.append("catch ");  for (int i=0; i < size; i++) {    Entry entry=get(i);    if (i != 0) {      sb.append(",\n");      sb.append(prefix);      sb.append("  ");    }    if ((i == (size - 1)) && catchesAll()) {      sb.append("<any>");    } else {      sb.append(entry.getExceptionType().toHuman());    }    sb.append(" -> ");    sb.append(Hex.u2or4(entry.getHandler()));  }  return sb.toString();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @SuppressWarnings("unchecked") private P byteBufferToPage(ByteBuffer buffer){  try (InputStream bais=new ByteBufferInputStream(buffer);ObjectInputStream ois=new ObjectInputStream(bais)){    int type=ois.readInt();    if (type == EMPTY_PAGE) {      return null;    } else     if (type == FILLED_PAGE) {      return (P)ois.readObject();    } else {      throw new IllegalArgumentException("Unknown type: " + type);    }  } catch (  IOException|ClassNotFoundException e) {    LoggingUtil.exception(e);    return null;  }}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  private SVGConstants(){}  }
class C{  private void testCountMessagesInMailbox() throws Exception {  LOG.info("countMessagesInMailbox");  long messageCount=messageMapper.countMessagesInMailbox(MBOXES.get(1));  assertEquals(MESSAGE_NO.size(),messageCount);}  }
class C{  private void filterClusterHosts(AssetOptionsContext context,URI datacenter,String storageType,List<HostRestRep> esxHosts){  if (esxHosts != null && !esxHosts.isEmpty() && storageType.equalsIgnoreCase(BlockProvider.SHARED_STORAGE.toString())) {    List<HostRestRep> misfitEsxHosts=api(context).hosts().getByDataCenter(datacenter,HostTypeFilter.ESX.and(REGISTERED.not()).or(INCOMPATIBLE).or(COMPLETE.not()));    Set<URI> misfitEsxClusterIds=new HashSet<>();    if (misfitEsxHosts != null && !misfitEsxHosts.isEmpty()) {      for (      HostRestRep misfitEsxHost : misfitEsxHosts) {        if (misfitEsxHost.getCluster() != null && !NullColumnValueGetter.isNullURI(misfitEsxHost.getCluster().getId())) {          misfitEsxClusterIds.add(misfitEsxHost.getCluster().getId());        }      }      Iterator<HostRestRep> esxHostIter=esxHosts.iterator();      while (esxHostIter.hasNext()) {        HostRestRep esxHost=esxHostIter.next();        if (esxHost.getCluster() != null && !NullColumnValueGetter.isNullURI(esxHost.getCluster().getId()) && misfitEsxClusterIds.contains(esxHost.getCluster().getId())) {          esxHostIter.remove();        }      }    }  }}  }
class C{  public ZoneInfoProvider(String resourcePath) throws IOException {  this(resourcePath,null,false);}  }
class C{  @Override public ImmutableRangeSet<C> subRangeSet(Range<C> range){  if (!isEmpty()) {    Range<C> span=span();    if (range.encloses(span)) {      return this;    } else     if (range.isConnected(span)) {      return new ImmutableRangeSet<C>(intersectRanges(range));    }  }  return of();}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MReport[").append(get_ID()).append(" - ").append(getName());  if (getDescription() != null)   sb.append("(").append(getDescription()).append(")");  sb.append(" - C_AcctSchema_ID=").append(getC_AcctSchema_ID()).append(", C_Calendar_ID=").append(getC_Calendar_ID());  sb.append("]");  return sb.toString();}  }
class C{  public void requestMessage(InfoDisplayEvent event){  fireRequestMessage(new InfoDisplayEvent(this,event.getInformation()));}  }
class C{  public static Pair<String,String> cellMethodSplit(String name){  return split(name,"::",true);}  }
class C{  public void sendData(byte[][] data,int offset,int count,String targetHostName,int targetPort,long interval){  if ((data == null) || (data.length <= 0)) {    if (__IEsptouchTask.DEBUG) {      Log.e(TAG,"sendData(): data == null or length <= 0");    }    return;  }  for (int i=offset; !mIsStop && i < offset + count; i++) {    if (data[i].length == 0) {      continue;    }    try {      DatagramPacket localDatagramPacket=new DatagramPacket(data[i],data[i].length,InetAddress.getByName(targetHostName),targetPort);      this.mSocket.send(localDatagramPacket);    } catch (    UnknownHostException e) {      if (__IEsptouchTask.DEBUG) {        Log.e(TAG,"sendData(): UnknownHostException");      }      e.printStackTrace();      mIsStop=true;      break;    }catch (    IOException e) {      if (__IEsptouchTask.DEBUG) {        Log.e(TAG,"sendData(): IOException, but just ignore it");      }    }    try {      Thread.sleep(interval);    } catch (    InterruptedException e) {      e.printStackTrace();      if (__IEsptouchTask.DEBUG) {        Log.e(TAG,"sendData is Interrupted");      }      mIsStop=true;      break;    }  }  if (mIsStop) {    close();  }}  }
class C{  private static void sendPatchToEnumerationTask(StatelessService service,URI taskLink,Throwable t){  ResourceEnumerationTaskState enumerationTaskBody=new ResourceEnumerationTaskState();  TaskState taskInfo=new TaskState();  if (t == null) {    taskInfo.stage=TaskState.TaskStage.FINISHED;  } else {    taskInfo.failure=Utils.toServiceErrorResponse(t);    taskInfo.stage=TaskState.TaskStage.FAILED;  }  enumerationTaskBody.taskInfo=taskInfo;  service.sendRequest(Operation.createPatch(taskLink).setBody(enumerationTaskBody));}  }
class C{  @Override public void itemStateChanged(ItemEvent e){  JRadioButtonMenuItem c=(JRadioButtonMenuItem)e.getSource();  if (c.getActionCommand().equals("Size 24")) {    changeFontSize(24);  } else   if (c.getActionCommand().equals("Size 22")) {    changeFontSize(22);  } else   if (c.getActionCommand().equals("Size 20")) {    changeFontSize(20);  } else   if (c.getActionCommand().equals("Size 18")) {    changeFontSize(18);  } else   if (c.getActionCommand().equals("Size 16")) {    changeFontSize(16);  } else   if (c.getActionCommand().equals("Size 14")) {    changeFontSize(14);  } else   if (c.getActionCommand().equals("Size 12")) {    changeFontSize(12);  } else   if (c.getActionCommand().equals("Size 10")) {    changeFontSize(10);  } else   if (c.getActionCommand().equals("Size 8")) {    changeFontSize(8);  } else   if (c.getActionCommand().equals("Size 6")) {    changeFontSize(6);  } else   if (c.getActionCommand().equals("Size 4")) {    changeFontSize(4);  } else   if (c.getActionCommand().equals("Size 2")) {    changeFontSize(2);  } else   if (c.getActionCommand().equals("Size 1")) {    changeFontSize(1);  } else   if (c.getActionCommand().equals("Hide Descendants")) {  }}  }
class C{  public ImmutableMap<Service,Long> startupTimes(){  return state.startupTimes();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  protected void initializeLocations(){  for (  V v : getGraph().getVertices()) {    Point2D coord=delegate.apply(v);    if (!dontmove.contains(v))     initializeLocation(v,coord);  }}  }
class C{  public LegHistogram(final int binSize,final int nofBins){  super();  this.binSize=binSize;  this.nofBins=nofBins;  reset(0);}  }
class C{  public static boolean[] nullToEmpty(final boolean[] array){  if (array == null || array.length == 0) {    return ArrayUtils.EMPTY_BOOLEAN_ARRAY;  }  return array;}  }
class C{  public void clearPieSegments(){  mPieSegmentList.clear();}  }
class C{  @RequestMapping(value=STORAGE_POLICIES_URI_PREFIX + "/namespaces/{namespace}/storagePolicyNames/{storagePolicyName}",method=RequestMethod.PUT,consumes={"application/xml","application/json"}) @Secured(SecurityFunctions.FN_STORAGE_POLICIES_PUT) public StoragePolicy updateStoragePolicy(@PathVariable("namespace") String namespace,@PathVariable("storagePolicyName") String storagePolicyName,@RequestBody StoragePolicyUpdateRequest request){  return storagePolicyService.updateStoragePolicy(new StoragePolicyKey(namespace,storagePolicyName),request);}  }
class C{  @Override public boolean willNotMoveInCurrentCollection(ObjectReference object){  return !Space.isInSpace(MC.MARK_COMPACT,object);}  }
class C{  private JsonToken advance() throws IOException {  peek();  JsonToken result=token;  token=null;  value=null;  name=null;  return result;}  }
class C{  public boolean isEmptyBorder(){  return emptyType;}  }
