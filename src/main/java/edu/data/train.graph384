class C{  public void testDeliverableMessageExchange(){  Message m1=new Message(h1,h3,"Dummy1",1);  h1.createNewMessage(m1);  Message m2=new Message(h1,h3,"A_Dummy2",1);  h1.createNewMessage(m2);  Message m3=new Message(h1,h2,msgId1,1);  h1.createNewMessage(m3);  Message m4=new Message(h2,h3,"Dummy3",1);  h2.createNewMessage(m4);  Message m5=new Message(h2,h1,msgId2,1);  h2.createNewMessage(m5);  Message m6=new Message(h2,h3,"Dummy4",1);  h2.createNewMessage(m6);  checkCreates(6);  h1.connect(h2);  updateAllNodes();  assertTrue(mc.next());  assertEquals(mc.TYPE_START,mc.getLastType());  assertEquals(h2,mc.getLastTo());  assertEquals(msgId1,mc.getLastMsg().getId());  clock.advance(10);  updateAllNodes();  assertTrue(mc.next());  assertEquals(mc.TYPE_RELAY,mc.getLastType());  assertTrue(mc.next());  assertEquals(mc.TYPE_START,mc.getLastType());  assertEquals(msgId2,mc.getLastMsg().getId());  assertEquals(h1,mc.getLastTo());}  }
class C{  private void showHint(){  setText(hint);  setTextColor(getResources().getColor(R.color.hint_grey_text));  setContentDescription(getResources().getString(R.string.dropdown_list_prefix) + hint);}  }
class C{  private boolean update(MCost cost) throws Exception {  boolean updated=false;  if (p_SetFutureCostTo.equals(p_SetStandardCostTo)) {    BigDecimal costs=getCosts(cost,p_SetFutureCostTo);    if (costs != null && costs.signum() != 0) {      cost.setFutureCostPrice(costs);      cost.setCurrentCostPrice(costs);      updated=true;    }  } else {    if (p_SetStandardCostTo.length() > 0) {      BigDecimal costs=getCosts(cost,p_SetStandardCostTo);      if (costs != null && costs.signum() != 0) {        cost.setCurrentCostPrice(costs);        updated=true;      }    }    if (p_SetFutureCostTo.length() > 0) {      BigDecimal costs=getCosts(cost,p_SetFutureCostTo);      if (costs != null && costs.signum() != 0) {        cost.setFutureCostPrice(costs);        updated=true;      }    }  }  if (updated)   updated=cost.save();  return updated;}  }
class C{  @Override public ConflictResults parseOutput(final String stdout,final String stderr){  final List<String> contentConflicts=new ArrayList<String>();  final List<String> renameConflicts=new ArrayList<String>();  final List<String> bothConflicts=new ArrayList<String>();  final String[] lines=getLines(stderr);  for (  final String line : lines) {    final int index=line.lastIndexOf(":");    if (index != -1) {      if (StringUtils.endsWith(line,BOTH_CONFLICTS_SUFFIX)) {        bothConflicts.add(line.substring(0,index));      } else       if (StringUtils.endsWith(line,RENAME_CONFLICT_SUFFIX)) {        renameConflicts.add(line.substring(0,index));      } else {        contentConflicts.add(line.substring(0,index));      }    }  }  return new ConflictResults(contentConflicts,renameConflicts,bothConflicts);}  }
class C{  public void fillDefaultValues(){  cbPlasticityType.setSelectedIndex(ShortTermPlasticityRule.DEFAULT_PLASTICITY_TYPE);  tfBaseLineStrength.setText(Double.toString(ShortTermPlasticityRule.DEFAULT_BASE_LINE_STRENGTH));  tfFiringThreshold.setText(Double.toString(ShortTermPlasticityRule.DEFAULT_FIRING_THRESHOLD));  tfBumpRate.setText(Double.toString(ShortTermPlasticityRule.DEFAULT_BUMP_RATE));  tfDecayRate.setText(Double.toString(ShortTermPlasticityRule.DEFAULT_DECAY_RATE));}  }
class C{  String[] initArgs(String[] opts){  List<String> args=new ArrayList<String>();  args.addAll(Arrays.asList(opts));  args.add("-d");  args.add(classesDir.getPath());  args.add(testFile.getPath());  return args.toArray(new String[args.size()]);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public FontData(final String cachedFile){  try {    fontFile=new RandomAccessFile(cachedFile,"r");    fullLength=(int)fontFile.length();  } catch (  final Exception e) {    LogWriter.writeLog("Exception: " + e.getMessage());  }  if (fullLength < maxSizeAllowedInMemory) {    blockSize=maxSizeAllowedInMemory;    adjustForCache(0);    isInMemory=true;  }}  }
class C{  @Override protected void initListeners(){}  }
class C{  private void log(String msg,Throwable cause){  XRLog.exception("Unhandled exception. " + msg,cause);}  }
class C{  public String toDisplayString(Locale locale){  return toDisplayString(defaultResourceBundleName,locale);}  }
class C{  public int size(){  return mArray.size();}  }
class C{  @SuppressWarnings("unused") public UnsupportedIO(DataflowRunner runner,PubsubUnboundedSource<?> transform){  this.transform=transform;}  }
class C{  public DenseDoubleMatrix3D(double[][][] values){  this(values.length,(values.length == 0 ? 0 : values[0].length),(values.length == 0 ? 0 : values[0].length == 0 ? 0 : values[0][0].length));  assign(values);}  }
class C{  private StaticClassUtil(){  instanceNotAllowed(getClass());}  }
class C{  public boolean hasPostcode(){  return hasExtension(PostCode.class);}  }
class C{  private static double[] normalParams(double[] data){  double mean=0.0;  double sd=0.0;  for (int i=0; i < data.length; i++) {    mean+=data[i];  }  mean/=data.length;  for (int i=0; i < data.length; i++) {    sd+=(data[i] - mean) * (data[i] - mean);  }  sd/=data.length - 1.0;  double result[]=new double[3];  result[2]=sd;  sd=Math.sqrt(sd);  result[0]=mean;  result[1]=sd;  return result;}  }
class C{  public int read(InputStream is){  init();  if (is != null) {    if (!(is instanceof BufferedInputStream))     is=new BufferedInputStream(is);    in=(BufferedInputStream)is;    readHeader();    if (!err()) {      readContents();      if (frameCount < 0) {        status=STATUS_FORMAT_ERROR;      }    }  } else {    status=STATUS_OPEN_ERROR;  }  try {    is.close();  } catch (  IOException e) {  }  return status;}  }
class C{  public void run(){  ActivationLibrary.deactivate(this,getID());}  }
class C{  protected void completeTransactionAfterThrowing(TransactionInfo txInfo,Throwable ex){  if (txInfo != null && txInfo.hasTransaction()) {    if (logger.isTraceEnabled()) {      logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() + "] after exception: "+ ex);    }    if (txInfo.transactionAttribute.rollbackOn(ex)) {      try {        txInfo.getTransactionManager().rollback(txInfo.getTransactionStatus());      } catch (      TransactionSystemException ex2) {        logger.error("Application exception overridden by rollback exception",ex);        ex2.initApplicationException(ex);        throw ex2;      }catch (      RuntimeException ex2) {        logger.error("Application exception overridden by rollback exception",ex);        throw ex2;      }catch (      Error err) {        logger.error("Application exception overridden by rollback error",ex);        throw err;      }    } else {      try {        txInfo.getTransactionManager().commit(txInfo.getTransactionStatus());      } catch (      TransactionSystemException ex2) {        logger.error("Application exception overridden by commit exception",ex);        ex2.initApplicationException(ex);        throw ex2;      }catch (      RuntimeException ex2) {        logger.error("Application exception overridden by commit exception",ex);        throw ex2;      }catch (      Error err) {        logger.error("Application exception overridden by commit error",ex);        throw err;      }    }  }}  }
class C{  DbException convertException(IllegalStateException e){  if (DataUtils.getErrorCode(e.getMessage()) == DataUtils.ERROR_TRANSACTION_LOCKED) {    throw DbException.get(ErrorCode.CONCURRENT_UPDATE_1,e,getName());  }  return store.convertIllegalStateException(e);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:02.928 -0400",hash_original_method="3A589B054BD3990220699C0DAB834BCD",hash_generated_method="596C4BDFCCCD9C4AE1B1A29B5618FB41") public X509CertPathImpl(List<? extends java.security.cert.Certificate> certs) throws CertificateException {  super("X.509");  final int size=certs.size();  certificates=new ArrayList<X509Certificate>(size);  for (int i=0; i < size; i++) {    final java.security.cert.Certificate cert=certs.get(i);    if (!(cert instanceof X509Certificate)) {      throw new CertificateException("Certificate " + i + " is not an X.509 certificate");    }    certificates.add((X509Certificate)cert);  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.ITERATION_STATEMENT__STATEMENT:    setStatement((Statement)null);  return;case N4JSPackage.ITERATION_STATEMENT__EXPRESSION:setExpression((Expression)null);return;}super.eUnset(featureID);}  }
class C{  private Type(final int sort,final char[] buf,final int off,final int len){  this.sort=sort;  this.buf=buf;  this.off=off;  this.len=len;}  }
class C{  private static ArgumentParser argParser(){  ArgumentParser parser=ArgumentParsers.newArgumentParser("").defaultHelp(true).description("");  parser.addArgument("--topic").action(store()).required(false).type(String.class).metavar("TOPIC").dest("topic").help("Produce messages to this topic and consume message from this topic");  parser.addArgument("--producer-id").action(store()).required(false).type(String.class).dest("producerId").help("The producerId will be used by producer client and encoded in the messages to the topic");  parser.addArgument("--broker-list").action(store()).required(true).type(String.class).metavar("HOST1:PORT1[,HOST2:PORT2[...]]").dest("brokerList").help("Comma-separated list of Kafka brokers in the form HOST1:PORT1,HOST2:PORT2,...");  parser.addArgument("--zookeeper").action(store()).required(true).type(String.class).metavar("HOST:PORT").dest("zkConnect").help("The connection string for the zookeeper connection in the form host:port");  parser.addArgument("--record-size").action(store()).required(false).type(String.class).metavar("RECORD_SIZE").dest("recordSize").help("The size of each record.");  parser.addArgument("--producer-class").action(store()).required(false).type(String.class).metavar("PRODUCER_CLASS_NAME").dest("producerClassName").help("Specify the class of producer. Available choices include newProducer or class name");  parser.addArgument("--consumer-class").action(store()).required(false).type(String.class).metavar("CONSUMER_CLASS_NAME").dest("consumerClassName").help("Specify the class of consumer. Available choices include oldConsumer, newConsumer, or class name");  parser.addArgument("--producer.config").action(store()).required(false).type(String.class).metavar("PRODUCER_CONFIG").dest("producerConfig").help("Producer config properties file.");  parser.addArgument("--consumer.config").action(store()).required(false).type(String.class).metavar("CONSUMER_CONFIG").dest("consumerConfig").help("Consumer config properties file.");  parser.addArgument("--report-interval-sec").action(store()).required(false).type(String.class).metavar("REPORT_INTERVAL_SEC").dest("reportIntervalSec").help("Interval in sec with which to export stats");  parser.addArgument("--record-delay-ms").action(store()).required(false).type(String.class).metavar("RECORD_DELAY_MS").dest("recordDelayMs").help("The delay in ms before sending next record to the same partition");  parser.addArgument("--latency-percentile-max-ms").action(store()).required(false).type(String.class).metavar("LATENCY_PERCENTILE_MAX_MS").dest("latencyPercentileMaxMs").help("The maximum value in ms expected for latency percentile metric. " + "The percentile will be reported as Double.POSITIVE_INFINITY if its value exceeds the max value.");  parser.addArgument("--latency-percentile-granularity-ms").action(store()).required(false).type(String.class).metavar("LATENCY_PERCENTILE_GRANULARITY_MS").dest("latencyPercentileGranularityMs").help("The granularity in ms of latency percentile metric. This is the width of the bucket used in percentile calculation.");  parser.addArgument("--topic-creation-enabled").action(store()).required(false).type(Boolean.class).metavar("AUTO_TOPIC_CREATION_ENABLED").dest("autoTopicCreationEnabled").help(ProduceServiceConfig.TOPIC_CREATION_ENABLED_DOC);  parser.addArgument("--topic-rebalance-interval-ms").action(store()).required(false).type(Integer.class).metavar("REBALANCE_MS").dest("rebalanceMs").help(TopicManagementServiceConfig.REBALANCE_INTERVAL_MS_DOC);  return parser;}  }
class C{  public <OUTPUT>OUTPUT execute(final OperationChain<OUTPUT> operationChain,final User user) throws OperationException {  for (  final Operation operation : operationChain.getOperations()) {    if (null == operation.getView()) {      operation.setView(view);    } else     if (operation.getView().getEntityGroups().isEmpty() && operation.getView().getEdgeGroups().isEmpty()) {      operation.getView().merge(view);    }  }  for (  final GraphHook graphHook : graphHooks) {    graphHook.preExecute(operationChain,user);  }  OUTPUT result=store.execute(operationChain,user);  for (  final GraphHook graphHook : graphHooks) {    graphHook.postExecute(result,operationChain,user);  }  return result;}  }
class C{  private MBeanAttributeInfo[] nonNullAttributes(){  return (attributes == null) ? MBeanAttributeInfo.NO_ATTRIBUTES : attributes;}  }
class C{  protected Object parseJsonFromRequestBody(Representation entity){  if (entity.getMediaType() == null) {    entity.setMediaType(MediaType.APPLICATION_JSON);  }  if (!entity.getMediaType().equals(MediaType.APPLICATION_JSON,true)) {    String errMsg=String.format(Locale.ROOT,"Invalid content type %s; only %s is supported.",entity.getMediaType(),MediaType.APPLICATION_JSON.toString());    log.error(errMsg);    throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST,errMsg);  }  String text=null;  try {    text=entity.getText();  } catch (  IOException ioExc) {    String errMsg="Failed to read entity text due to: " + ioExc;    log.error(errMsg,ioExc);    throw new ResourceException(Status.SERVER_ERROR_INTERNAL,errMsg,ioExc);  }  if (text == null || text.trim().length() == 0) {    throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST,"Empty request body!");  }  Object parsedJson=null;  try {    parsedJson=ObjectBuilder.fromJSON(text);  } catch (  IOException ioExc) {    String errMsg=String.format(Locale.ROOT,"Failed to parse request [%s] into JSON due to: %s",text,ioExc.toString());    log.error(errMsg,ioExc);    throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST,errMsg,ioExc);  }  return parsedJson;}  }
class C{  public void render(Graphics2D g2){  if (g2.getClip() == null) {    g2.setClip(getMinimumSize());  }  panel.paintComponent(g2);}  }
class C{  public int convertToPixels(float dipCount){  return Math.round(impl.convertToPixels((int)(dipCount * 1000),true) / 1000.0f);}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  @LargeTest public void testThumbnailListH264WVGA() throws Exception {  final String videoItemFilename=INPUT_FILE_PATH + "H264_BP_800x480_15fps_512kbps_AACLC_24KHz_38Kbps_s_1_17.mp4";  final int tnCount=10;  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final MediaVideoItem mediaVideoItem=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",videoItemFilename,renderingMode);  final int outWidth=mediaVideoItem.getWidth() / 2;  final int outHeight=mediaVideoItem.getHeight() / 2;  final long startTime=mediaVideoItem.getDuration() / 3;  final long endTime=mediaVideoItem.getDuration() / 2;  final Bitmap thumbNailBmp[]=mediaVideoItem.getThumbnailList(outWidth,outHeight,startTime,endTime,tnCount);  assertNotNull("Thumbnail Retrived is Null",thumbNailBmp);  assertEquals("Thumbnail Count",tnCount,thumbNailBmp.length);  for (int i=0; i < thumbNailBmp.length; i++) {    validateThumbnail(thumbNailBmp[i],outWidth,outHeight);    thumbNailBmp[i]=null;  }}  }
class C{  static char[] charBufferFromThreadLocal(){  return DEST_TL.get();}  }
class C{  private SyncState(){}  }
class C{  private static <T extends AbstractBlockBase<T>>void computeLinearScanOrder(List<T> order,PriorityQueue<T> worklist,BitSet visitedBlocks){  while (!worklist.isEmpty()) {    T nextImportantPath=worklist.poll();    do {      nextImportantPath=addPathToLinearScanOrder(nextImportantPath,order,worklist,visitedBlocks);    } while (nextImportantPath != null);  }}  }
class C{  public DANN(int kn,int k,double eps){  this(kn,k,eps,new DefaultVectorCollectionFactory<VecPaired<Vec,Integer>>());}  }
class C{  public boolean hasNext(){  return enm.hasMoreElements();}  }
class C{  public void testBug11498() throws Exception {  assertEquals("replace into t1 (id, f1, f4) VALUES(1,\"\",\"tko { zna gdje se sakrio\"),(2,\"a\",\"sedmi { kontinentio\"),(3,\"a\",\"a } cigov si ti?\")",this.conn.nativeSQL("replace into t1 (id, f1, f4) VALUES(1,\"\",\"tko { zna gdje se sakrio\"),(2,\"a\",\"sedmi { kontinentio\"),(3,\"a\",\"a } cigov si ti?\")"));}  }
class C{  public int highestValue(){  if (mapValues.isEmpty()) {    return 0;  }  int max=Integer.MIN_VALUE;  for (  final int value : mapValues.values()) {    if (value > max) {      max=value;    }  }  return max;}  }
class C{  private void loadFromDB(int record_ID){  MImage mimage=MImage.get(Env.getCtx(),record_ID);  if (mimage == null) {    log.log(Level.WARNING,"No Image - record_ID=" + record_ID);    return;  }  byte[] imageData=mimage.getData();  if (imageData != null)   try {    BufferedImage bufferedImage=ImageIO.read(new ByteArrayInputStream(imageData));    m_image=bufferedImage;  } catch (  Exception e) {    log.log(Level.WARNING,"(byteArray)",e);  }  if (m_image != null)   log.fine(mimage.toString() + " - Size=" + imageData.length); else   log.log(Level.WARNING,mimage.toString() + " - not loaded (must be gif or jpg) - record_ID=" + record_ID);}  }
class C{  public boolean addAll(int index,Collection<? extends E> c){  if (index < 0 || index > size)   throw new IndexOutOfBoundsException("Index: " + index + ", Size: "+ size);  Object[] a=c.toArray();  int numNew=a.length;  if (numNew == 0)   return false;  modCount++;  Entry<E> successor=(index == size ? header : entry(index));  Entry<E> predecessor=successor.previous;  for (int i=0; i < numNew; i++) {    Entry<E> e=new Entry<E>((E)a[i],successor,predecessor);    predecessor.next=e;    predecessor=e;  }  successor.previous=predecessor;  size+=numNew;  return true;}  }
class C{  public static void main(String[] args) throws Throwable {  BadExtendedKeyUsageTest test=new BadExtendedKeyUsageTest();  test.start();}  }
class C{  public void updateDisplay(SelectableMultiPoint[] items){  if (items == null) {    return;  }  int width=getCanvas().getWidth();  int height=getCanvas().getHeight();  nativeItems=items;  items=transform(items,width,height);  model.setItems(items);  model.setActiveRectangle(null);  if (styleIndex == bruteForceChoice) {    rangeQueryAlgorithm=new BruteForceRangeQuery(model);    getShowKDtree().setState(false);  } else {    rangeQueryAlgorithm=new KDRangeQuery(model);  }  getCanvas().redrawState();  getCanvas().repaint();}  }
class C{  public String toString(){  String name=getLocalName();  if (name == null) {    return "*";  }  return name;}  }
class C{  GridResourceBasicInjector(T rsrc){  this.rsrc=rsrc;}  }
class C{  public FlatRStarTreeNode(int capacity,boolean isLeaf){  super(capacity,isLeaf,SpatialEntry.class);}  }
class C{  public static double remainder(double dividend,double divisor){  if (USE_JDK_MATH) {  }  if (Double.isInfinite(divisor)) {    if (Double.isInfinite(dividend)) {      return Double.NaN;    } else {      return dividend;    }  }  double value=dividend % divisor;  if (Math.abs(value + value) > Math.abs(divisor)) {    return value + ((value > 0.0) ? -Math.abs(divisor) : Math.abs(divisor));  } else {    return value;  }}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  MyStack stack=new MyStack();  System.out.print("Enter five strings: ");  for (int i=0; i < 5; i++) {    stack.push(input.next());  }  System.out.println("Stack: " + stack.toString());}  }
class C{  public static Border createRaisedBevelBorder(){  return createSharedBevel(BevelBorder.RAISED);}  }
class C{  public boolean isArray(){  return array;}  }
class C{  public void invalidateLayout(Container target){}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == DelegatingMember.class) {switch (baseFeatureID) {case ImPackage.DELEGATING_MEMBER__DELEGATION_BASE_TYPE:      return ImPackage.DELEGATING_METHOD_DECLARATION__DELEGATION_BASE_TYPE;case ImPackage.DELEGATING_MEMBER__DELEGATION_SUPER_CLASS_STEPS:    return ImPackage.DELEGATING_METHOD_DECLARATION__DELEGATION_SUPER_CLASS_STEPS;case ImPackage.DELEGATING_MEMBER__DELEGATION_TARGET:  return ImPackage.DELEGATING_METHOD_DECLARATION__DELEGATION_TARGET;case ImPackage.DELEGATING_MEMBER__DELEGATION_TARGET_IS_ABSTRACT:return ImPackage.DELEGATING_METHOD_DECLARATION__DELEGATION_TARGET_IS_ABSTRACT;default :return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  public static boolean isOnVista(){  boolean rv=false;  String osName=System.getProperty("os.name");  String osVers=System.getProperty("os.version");  if (osName != null && osName.startsWith("Windows") && osVers != null && osVers.length() > 0) {    int p=osVers.indexOf('.');    if (p >= 0) {      osVers=osVers.substring(0,p);    }    try {      rv=(Integer.parseInt(osVers) >= 6);    } catch (    NumberFormatException nfe) {    }  }  return rv;}  }
class C{  private void fixAfterDeletion(BalancedBinaryNode<K,V> x){  while (x != root && colorOf(x) == BalancedBinaryNode.BLACK) {    if (x == leftOf(parentOf(x))) {      BalancedBinaryNode<K,V> sib=rightOf(parentOf(x));      if (colorOf(sib) == BalancedBinaryNode.RED) {        setColor(sib,BalancedBinaryNode.BLACK);        setColor(parentOf(x),BalancedBinaryNode.RED);        rotateLeft(parentOf(x));        sib=rightOf(parentOf(x));      }      if (colorOf(leftOf(sib)) == BalancedBinaryNode.BLACK && colorOf(rightOf(sib)) == BalancedBinaryNode.BLACK) {        setColor(sib,BalancedBinaryNode.RED);        x=parentOf(x);      } else {        if (colorOf(rightOf(sib)) == BalancedBinaryNode.BLACK) {          setColor(leftOf(sib),BalancedBinaryNode.BLACK);          setColor(sib,BalancedBinaryNode.RED);          rotateRight(sib);          sib=rightOf(parentOf(x));        }        setColor(sib,colorOf(parentOf(x)));        setColor(parentOf(x),BalancedBinaryNode.BLACK);        setColor(rightOf(sib),BalancedBinaryNode.BLACK);        rotateLeft(parentOf(x));        x=root;      }    } else {      BalancedBinaryNode<K,V> sib=leftOf(parentOf(x));      if (colorOf(sib) == BalancedBinaryNode.RED) {        setColor(sib,BalancedBinaryNode.BLACK);        setColor(parentOf(x),BalancedBinaryNode.RED);        rotateRight(parentOf(x));        sib=leftOf(parentOf(x));      }      if (colorOf(rightOf(sib)) == BalancedBinaryNode.BLACK && colorOf(leftOf(sib)) == BalancedBinaryNode.BLACK) {        setColor(sib,BalancedBinaryNode.RED);        x=parentOf(x);      } else {        if (colorOf(leftOf(sib)) == BalancedBinaryNode.BLACK) {          setColor(rightOf(sib),BalancedBinaryNode.BLACK);          setColor(sib,BalancedBinaryNode.RED);          rotateLeft(sib);          sib=leftOf(parentOf(x));        }        setColor(sib,colorOf(parentOf(x)));        setColor(parentOf(x),BalancedBinaryNode.BLACK);        setColor(leftOf(sib),BalancedBinaryNode.BLACK);        rotateRight(parentOf(x));        x=root;      }    }  }  setColor(x,BalancedBinaryNode.BLACK);}  }
class C{  @Description(summary="Create the API Javadocs (incl. JDBC API and tools).") public void javadoc(){  compileTools();  delete("docs");  mkdir("docs/javadoc");  javadoc("-sourcepath","src/main","org.h2.jdbc","org.h2.jdbcx","org.h2.tools","org.h2.api","org.h2.engine","org.h2.fulltext","-classpath","ext/lucene-core-3.6.2.jar" + File.pathSeparator + "ext/jts-core-1.14.0.jar","-docletpath","bin" + File.pathSeparator + "temp","-doclet","org.h2.build.doclet.Doclet");  copy("docs/javadoc",files("src/docsrc/javadoc"),"src/docsrc/javadoc");}  }
class C{  private static Pair<String,String> rorImmediate(final long offset,final ITranslationEnvironment environment,final List<ReilInstruction> instructions,final String registerNodeValue,final String immediateNodeValue){  final String shifterOperand=environment.getNextVariableString();  final String shifterCarryOut=environment.getNextVariableString();  long baseOffset=offset;  if (immediateNodeValue.equals("0")) {    final String tmpVar1=environment.getNextVariableString();    final String tmpVar2=environment.getNextVariableString();    instructions.add(ReilHelpers.createBsh(baseOffset++,byteSize,"C",wordSize,thirtyOneSet,dWordSize,tmpVar1));    instructions.add(ReilHelpers.createBsh(baseOffset++,dWordSize,registerNodeValue,byteSize,"-" + String.valueOf(1),dWordSize,tmpVar2));    instructions.add(ReilHelpers.createOr(baseOffset++,dWordSize,tmpVar1,dWordSize,tmpVar2,dWordSize,shifterOperand));    instructions.add(ReilHelpers.createAnd(baseOffset++,dWordSize,registerNodeValue,byteSize,String.valueOf(1),byteSize,shifterCarryOut));    return new Pair<String,String>(shifterOperand,shifterCarryOut);  } else {    final String tmpVar1=environment.getNextVariableString();    final String tmpVar2=environment.getNextVariableString();    final String tmpVar3=environment.getNextVariableString();    final String tmpVar4=environment.getNextVariableString();    instructions.add(ReilHelpers.createBsh(baseOffset++,dWordSize,registerNodeValue,wordSize,"-" + Integer.decode(immediateNodeValue),dWordSize,tmpVar1));    instructions.add(ReilHelpers.createBsh(baseOffset++,dWordSize,registerNodeValue,wordSize,String.valueOf((32 - Integer.decode(immediateNodeValue))),qWordSize,tmpVar2));    instructions.add(ReilHelpers.createOr(baseOffset++,dWordSize,tmpVar1,qWordSize,tmpVar2,qWordSize,tmpVar3));    instructions.add(ReilHelpers.createAnd(baseOffset++,qWordSize,tmpVar3,dWordSize,bitMaskAllBitsSet,dWordSize,shifterOperand));    instructions.add(ReilHelpers.createBsh(baseOffset++,dWordSize,registerNodeValue,dWordSize,String.valueOf(-(Integer.decode(immediateNodeValue) - 1)),dWordSize,tmpVar4));    instructions.add(ReilHelpers.createAnd(baseOffset++,dWordSize,tmpVar4,byteSize,String.valueOf(1),byteSize,shifterCarryOut));    return new Pair<String,String>(shifterOperand,shifterCarryOut);  }}  }
class C{  public static boolean isValidSpawn(Material material){switch (material) {case AIR:case SAPLING:case POWERED_RAIL:case DETECTOR_RAIL:case LONG_GRASS:case DEAD_BUSH:case YELLOW_FLOWER:case RED_ROSE:case BROWN_MUSHROOM:case RED_MUSHROOM:case TORCH:case REDSTONE_WIRE:case CROPS:case RAILS:case LEVER:case REDSTONE_TORCH_OFF:case REDSTONE_TORCH_ON:case STONE_BUTTON:case SNOW:case SUGAR_CANE_BLOCK:case DIODE_BLOCK_OFF:case DIODE_BLOCK_ON:case VINE:case TRIPWIRE_HOOK:case TRIPWIRE:case FLOWER_POT:case WOOD_BUTTON:case SKULL:case GOLD_PLATE:case IRON_PLATE:case REDSTONE_COMPARATOR_OFF:case REDSTONE_COMPARATOR_ON:case ACTIVATOR_RAIL:case CARPET:case DOUBLE_PLANT:    return true;default :  return false;}}  }
class C{  public static void throwAtomikosSQLException(String message) throws AtomikosSQLException {  throwAtomikosSQLException(message,null);}  }
class C{  public static void saveHostIndex(final ReferenceContainerCache<HostReference> index,final File file){  ConcurrentLog.info("BlockRank","saving " + index.size() + " host indexes to file "+ file.toString());  index.dump(file,Segment.writeBufferSize,false);  ConcurrentLog.info("BlockRank","saved " + index.size() + " host indexes to file "+ file.toString());}  }
class C{  protected void testWar(String type) throws MalformedURLException {  Deployable war=new DefaultDeployableFactory().createDeployable(getContainer().getId(),getTestData().getTestDataFileFor(type + "-war"),DeployableType.WAR);  getLocalContainer().getConfiguration().addDeployable(war);  URL warPingURL=new URL("http://localhost:" + getTestData().port + "/"+ type+ "-war/test");  startAndStop(warPingURL);}  }
class C{  public void resetForNewGraphic(){  omdtmm=activateDrawingTool(thingToCreate);}  }
class C{  public PutRequestMessage(PutRequestMessage other){  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }  if (other.isSetStoreName()) {    this.storeName=other.storeName;  }  if (other.isSetKey()) {    this.key=org.apache.thrift.TBaseHelper.copyBinary(other.key);    ;  }  if (other.isSetVersionedValue()) {    this.versionedValue=new VersionedValue(other.versionedValue);  }  if (other.isSetValue()) {    this.value=org.apache.thrift.TBaseHelper.copyBinary(other.value);    ;  }}  }
class C{  public RequestSendingTask(ClientRegistry clientRegistry,LwM2mRequestSender delegateSender,ClientStatusTracker clientStatusTracker,MessageStore messageStore,String endpoint){  this.clientRegistry=clientRegistry;  this.requestSender=delegateSender;  this.clientStatusTracker=clientStatusTracker;  this.endpoint=endpoint;  this.messageStore=messageStore;}  }
class C{  public NotificationChain basicSetRhs(Expression newRhs,NotificationChain msgs){  Expression oldRhs=rhs;  rhs=newRhs;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.RELATIONAL_EXPRESSION__RHS,oldRhs,newRhs);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  protected Node newNode(){  return new SVGOMFontFaceNameElement();}  }
class C{  public Group(String id){  super(id);  groups=new LinkedHashMap<String,Group>();  views=new LinkedHashMap<String,View>();  viewNames=new LinkedHashMap<String,View>();}  }
class C{  public void cancel(){  cancel=true;}  }
class C{  public void createSensorMatrix(){  CreateSensorMatrixDialog d=new CreateSensorMatrixDialog(this);  d.setBounds(100,100,450,550);  d.setVisible(true);}  }
class C{  public bdo removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  protected synchronized void receive(int b) throws IOException {  checkStateForReceive();  writeSide=Thread.currentThread();  if (in == out)   awaitSpace();  if (in < 0) {    in=0;    out=0;  }  buffer[in++]=(byte)(b & 0xFF);  if (in >= buffer.length) {    in=0;  }}  }
class C{  public CellFeed(){  super(CellEntry.class);  getCategories().add(CellEntry.CATEGORY);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:02.101 -0500",hash_original_method="B8E38931A483485D5D42DADC8F66AFA1",hash_generated_method="4AECA1BA2AB25600F1AD63164D2ACAC2") public boolean hasComment(){  return comment != null;}  }
class C{  @SuppressWarnings("unchecked") public static <C extends Result>ArrayList<C> filterResults(ResultHierarchy hier,Result r,Class<? super C> restrictionClass){  ArrayList<C> res=new ArrayList<>();  if (restrictionClass.isInstance(r)) {    res.add((C)restrictionClass.cast(r));  }  for (Hierarchy.Iter<Result> iter=hier.iterDescendants(r); iter.valid(); iter.advance()) {    Result result=iter.get();    if (restrictionClass.isInstance(result)) {      res.add((C)restrictionClass.cast(result));    }  }  return res;}  }
class C{  private static void centroid3(Coordinate p1,Coordinate p2,Coordinate p3,Coordinate c){  c.x=p1.x + p2.x + p3.x;  c.y=p1.y + p2.y + p3.y;  return;}  }
class C{  public boolean isDrawTopYLabelEntryEnabled(){  return mDrawTopYLabelEntry;}  }
class C{  @Override public void doDeleteChild(BaseSolrResource endpoint,String childId){  throw new ResourceException(Status.SERVER_ERROR_NOT_IMPLEMENTED);}  }
class C{  public PSPProcessingException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public long remove(float key){  long prev=0;  int index=index(key);  if (index >= 0) {    prev=_values[index];    removeAt(index);  }  return prev;}  }
class C{  private static Map<String,Counter> calculateScores(TestResults expectedResults){  Map<String,Counter> map=new TreeMap<String,Counter>();  for (  Integer tn : expectedResults.keySet()) {    TestCaseResult tcr=expectedResults.get(tn).get(0);    String cat=translateCategoryToName(tcr.getCategory());    Counter c=map.get(cat);    if (c == null) {      c=new Counter();      map.put(cat,c);    }    if (tcr.isReal() && tcr.isPassed())     c.tp++; else     if (tcr.isReal() && !tcr.isPassed())     c.fn++; else     if (!tcr.isReal() && tcr.isPassed())     c.tn++; else     if (!tcr.isReal() && !tcr.isPassed())     c.fp++;  }  return map;}  }
class C{  public ExclusivePositionUpdater(String category){  fCategory=category;}  }
class C{  public synchronized Relationship removeRelationship(Primitive type,Primitive target){  return removeRelationship(this.network.createVertex(type),this.network.createVertex(target));}  }
class C{  private BusinessObjectDataNotificationRegistrationEntity createBusinessObjectDataNotificationEntity(NamespaceEntity namespaceEntity,NotificationEventTypeEntity notificationEventTypeEntity,BusinessObjectDefinitionEntity businessObjectDefinitionEntity,FileTypeEntity fileTypeEntity,StorageEntity storageEntity,BusinessObjectDataStatusEntity newBusinessObjectDataStatusEntity,BusinessObjectDataStatusEntity oldBusinessObjectDataStatusEntity,NotificationRegistrationKey key,BusinessObjectDataNotificationFilter businessObjectDataNotificationFilter,List<JobAction> jobActions,NotificationRegistrationStatusEntity notificationRegistrationStatusEntity){  BusinessObjectDataNotificationRegistrationEntity businessObjectDataNotificationRegistrationEntity=new BusinessObjectDataNotificationRegistrationEntity();  businessObjectDataNotificationRegistrationEntity.setNamespace(namespaceEntity);  businessObjectDataNotificationRegistrationEntity.setName(key.getNotificationName());  businessObjectDataNotificationRegistrationEntity.setNotificationEventType(notificationEventTypeEntity);  businessObjectDataNotificationRegistrationEntity.setBusinessObjectDefinition(businessObjectDefinitionEntity);  if (StringUtils.isNotBlank(businessObjectDataNotificationFilter.getBusinessObjectFormatUsage())) {    businessObjectDataNotificationRegistrationEntity.setUsage(businessObjectDataNotificationFilter.getBusinessObjectFormatUsage());  }  businessObjectDataNotificationRegistrationEntity.setFileType(fileTypeEntity);  businessObjectDataNotificationRegistrationEntity.setBusinessObjectFormatVersion(businessObjectDataNotificationFilter.getBusinessObjectFormatVersion());  businessObjectDataNotificationRegistrationEntity.setStorage(storageEntity);  businessObjectDataNotificationRegistrationEntity.setNewBusinessObjectDataStatus(newBusinessObjectDataStatusEntity);  businessObjectDataNotificationRegistrationEntity.setOldBusinessObjectDataStatus(oldBusinessObjectDataStatusEntity);  businessObjectDataNotificationRegistrationEntity.setNotificationRegistrationStatus(notificationRegistrationStatusEntity);  List<NotificationActionEntity> notificationActionEntities=new ArrayList<>();  businessObjectDataNotificationRegistrationEntity.setNotificationActions(notificationActionEntities);  for (  JobAction jobAction : jobActions) {    JobDefinitionEntity jobDefinitionEntity=jobDefinitionDaoHelper.getJobDefinitionEntity(jobAction.getNamespace(),jobAction.getJobName());    NotificationJobActionEntity notificationJobActionEntity=new NotificationJobActionEntity();    notificationActionEntities.add(notificationJobActionEntity);    notificationJobActionEntity.setJobDefinition(jobDefinitionEntity);    notificationJobActionEntity.setCorrelationData(jobAction.getCorrelationData());    notificationJobActionEntity.setNotificationRegistration(businessObjectDataNotificationRegistrationEntity);  }  return businessObjectDataNotificationRegistrationEntity;}  }
class C{  public static Short[] toObject(short[] array){  if (array == null) {    return null;  } else   if (array.length == 0) {    return EMPTY_SHORT_OBJECT_ARRAY;  }  final Short[] result=new Short[array.length];  for (int i=0; i < array.length; i++) {    result[i]=new Short(array[i]);  }  return result;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ACTIVE_DEFINITION___ACTIVE_1:    setActive_1((Boolean)newValue);  return;case UmplePackage.ACTIVE_DEFINITION___NAME_1:setName_1((String)newValue);return;case UmplePackage.ACTIVE_DEFINITION___CODE_1:setCode_1((String)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  @Nullable protected InputMap createInputMap(){  return null;}  }
class C{  byte[] update(byte[] input,int inputOffset,int inputLen){  return cipher.update(input,inputOffset,inputLen);}  }
class C{  public static Set<SootClass> systemParents(SootClass clz){  Set<SootClass> supers=SootUtils.getParents(clz);  LinkedHashSet<SootClass> systemSupers=new LinkedHashSet<SootClass>();  for (  SootClass sup : supers) {    if (API.v().isSystemClass(sup))     systemSupers.add(sup);  }  return systemSupers;}  }
class C{  public int dimensionality(DBIDRef id){  return storage.get(id).cdim;}  }
class C{  public void size(final int iwidth,final int iheight,final String irenderer,final String ipath){  if (iwidth != this.width || iheight != this.height || !this.renderer.equals(irenderer)) {    if (insideSettings("size",iwidth,iheight,irenderer,ipath)) {      this.width=iwidth;      this.height=iheight;      this.renderer=irenderer;    }  }}  }
class C{  public static boolean delete(File file){  if (file == null) {    return false;  }  try {    return file.delete();  } catch (  Exception e) {    e.printStackTrace();    return false;  }}  }
class C{  @Override public boolean supportsDb(String type){  return true;}  }
class C{  public void emitDirect(int taskId,List<Object> tuple){  emitDirect(taskId,tuple,null);}  }
class C{  protected HashMap<String,Object> mapMetadata(ArrayList<KeyValue> labelList){  HashMap<String,Object> metadata=new HashMap<String,Object>();  for (int i=0; i < labelList.size(); ++i) {    String objName=labelList.get(i).key;    int p=objName.lastIndexOf(".") + 1;    String tagName=objName.substring(p);    String tagValue=labelList.get(i).value;    PDSType type=tagMap.get(tagName);    if (tagValue.startsWith("\"") || (type == null)) {      type=PDSType.PDS_String;    }    try {switch (type) {case PDS_Object:case PDS_Group:        break;case PDS_String:      tagValue=tagValue.replace('"',' ').trim();    metadata.put(objName,tagValue);  break;case PDS_Double:metadata.put(objName,new Double(getDouble(tagValue)));break;case PDS_Float:metadata.put(objName,new Float(getFloat(tagValue)));break;case PDS_Integer:metadata.put(objName,new Integer(getInteger(tagValue)));break;case PDS_Long:metadata.put(objName,new Long(getLong(tagValue)));break;case PDS_Integer_Array:metadata.put(objName,getIntArray(tagValue));break;case PDS_Double_Array:metadata.put(objName,getDoubleArray(tagValue));break;case PDS_String_Array:metadata.put(objName,getStringArray(tagValue));break;}} catch (Exception e) {throw new IllegalArgumentException("Unable to parse value " + tagValue + " for "+ objName+ ".",e);}}return (metadata);}  }
class C{  public PieChart(CategorySeries dataset,DefaultRenderer renderer){  super(dataset,renderer);  mPieMapper=new PieMapper();}  }
class C{  private void addNestedDriverPropertyTags(){  if (ds.getConnectionProperties() != null && ds.getConnectionProperties().size() != 0) {    Iterator<Object> i=ds.getConnectionProperties().keySet().iterator();    while (i.hasNext()) {      String key=i.next().toString();      buffer.append("      <property name=\"").append(key);      buffer.append("\" value=\"").append(ds.getConnectionProperties().getProperty(key)).append("\" />\n");    }  }}  }
class C{  public long readLittleEndianUnsignedInt(){  return (data[position++] & 0xFFL) | (data[position++] & 0xFFL) << 8 | (data[position++] & 0xFFL) << 16 | (data[position++] & 0xFFL) << 24;}  }
class C{  @DSSink({DSSinkKind.SYNCHRONIZATION_DATA}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:45.552 -0500",hash_original_method="35A5E39A8A1820326BDEA32FA9EDD100",hash_generated_method="CE016FA9F8D335C8879BF83223FA7CD6") public Message sendMessageSynchronously(int what,Object obj){  Message msg=Message.obtain();  msg.what=what;  msg.obj=obj;  Message resultMsg=sendMessageSynchronously(msg);  return resultMsg;}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void privateDnsRouteSet(boolean enabled){  mPrivateDnsRouteSet.set(enabled);}  }
class C{  private static PlanarPolygon3D polyPlane(Geometry poly){  return new PlanarPolygon3D((Polygon)poly);}  }
class C{  public static int hashIntArray(int[] array){  int intHash=0;  for (int i=0; i < array.length && i < 4; i++) {    intHash+=array[i] << (8 * i);  }  return intHash & 0x7FFFFFFF;}  }
class C{  @Override public boolean onUsed(RPEntity user){  if (useListener == null || !(user instanceof Player)) {    return false;  }  return useListener.onUsed(user);}  }
class C{  public boolean isAlert(){  Object oo=get_Value(COLUMNNAME_IsAlert);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static int[] lastIndexOfIgnoreCase(String s,String arr[],int fromIndex){  int arrLen=arr.length;  int index=-1;  int last=-1;  for (int j=0; j < arrLen; j++) {    int i=lastIndexOfIgnoreCase(s,arr[j],fromIndex);    if (i != -1) {      if (i > index) {        index=i;        last=j;      }    }  }  return last == -1 ? null : new int[]{last,index};}  }
class C{  protected void checkBox(int slice,int row,int column,int depth,int height,int width){  if (slice < 0 || depth < 0 || slice + depth > slices || row < 0 || height < 0 || row + height > rows || column < 0 || width < 0 || column + width > columns)   throw new IndexOutOfBoundsException(toStringShort() + ", slice:" + slice+ ", row:"+ row+ " ,column:"+ column+ ", depth:"+ depth+ " ,height:"+ height+ ", width:"+ width);}  }
class C{  public final void yyreset(java.io.Reader reader) throws java.io.IOException {  zzBuffer=s.array;  zzStartRead=s.offset;  zzEndRead=zzStartRead + s.count - 1;  zzCurrentPos=zzMarkedPos=s.offset;  zzLexicalState=YYINITIAL;  zzReader=reader;  zzAtEOF=false;}  }
class C{  public void testConstrStringWithExponentWithoutPoint5(){  String a="238768787678287E214";  int aScale=-214;  BigInteger bA=new BigInteger("238768787678287");  BigDecimal aNumber=new BigDecimal(a);  assertEquals("incorrect value",bA,aNumber.unscaledValue());  assertEquals("incorrect scale",aScale,aNumber.scale());}  }
class C{  public boolean isReadOnly(){  return false;}  }
class C{  public void animateOut(){  animate(OUT);}  }
class C{  public ComplexAnalyticSignal(double[] realSignal){  realPart=realSignal.clone();  CenteredHilbertTransform transformer=new CenteredHilbertTransform(50,0.03,0.97);  double[] tmp=transformer.filter(realPart);  Sequence.zeroShift(tmp,-50);  imagPart=new double[realPart.length];  System.arraycopy(tmp,0,imagPart,0,realPart.length);}  }
class C{  public boolean generate(Projection proj){  Debug.message("eomg","EditableOMLine.generate()");  if (line != null)   line.generate(proj);  if (gp1 != null)   gp1.generate(proj);  if (gp2 != null)   gp2.generate(proj);  if (gpo != null) {    gpo.generate(proj);    gpo.updateOffsets();  }  return true;}  }
class C{  public Stack(){  first=null;  n=0;}  }
class C{  public VcfHeader addColumnHeaderLine(String line){  final String[] split=line.split("\t");  if (split.length < 8) {    throw new VcfFormatException("VCF header line missing required columns");  }  if (split.length == 9) {    throw new VcfFormatException("VCF header line contains format field but no sample fields");  }  for (int i=0; i < 8; i++) {    if (!split[i].equals(HEADER_COLUMNS[i])) {      throw new VcfFormatException("Incorrect VCF header column " + (i + 1) + " expected \""+ HEADER_COLUMNS[i]+ "\" was \""+ split[i]+ "\"");    }  }  if (split.length > 9) {    for (int i=9; i < split.length; i++) {      addSampleName(split[i]);    }  }  return this;}  }
class C{  public void init(){  ToolIO.reset();  ToolIO.setMode(ToolIO.TOOL);}  }
class C{  public boolean areAncestorDescendent(String ancestor,String descendent) throws GitClientException {  try (RevWalk revWalk=new RevWalk(repo)){    RevCommit ancestorHead=revWalk.parseCommit(repo.resolve(ancestor));    RevCommit descendentHead=revWalk.parseCommit(repo.resolve(descendent));    return revWalk.isMergedInto(ancestorHead,descendentHead);  } catch (  Exception e) {    throw new GitClientException("Error checking ancestor/descendent for " + ancestor + " and "+ descendent,e);  }}  }
class C{  protected void doClick(MenuSelectionManager msm){  if (!isInternalFrameSystemMenu()) {    BasicLookAndFeel.playSound(menuItem,getPropertyPrefix() + ".commandSound");  }  if (msm == null) {    msm=MenuSelectionManager.defaultManager();  }  msm.clearSelectedPath();  menuItem.doClick(0);}  }
class C{  public GregorianCalendar(int year,int month,int dayOfMonth){  this(year,month,dayOfMonth,0,0,0,0);}  }
class C{  public void clear(){  int n=mSize;  Object[] values=mValues;  for (int i=0; i < n; i++) {    values[i]=null;  }  mSize=0;  mGarbage=false;}  }
class C{  public Builder nioPoolSize(final int nioPoolSize){  this.nioPoolSize=nioPoolSize;  return this;}  }
class C{  @VisibleForTesting boolean killTopologyHandler(String topologyName){  Scheduler.KillTopologyRequest killTopologyRequest=Scheduler.KillTopologyRequest.newBuilder().setTopologyName(topologyName).build();  if (!schedulerClient.killTopology(killTopologyRequest)) {    LOG.log(Level.SEVERE,"Failed to kill with Scheduler.");    return false;  }  if (!cleanState(topologyName,Runtime.schedulerStateManagerAdaptor(runtime))) {    LOG.severe("Failed to clean topology state");    return false;  }  LOG.fine("Scheduler killed topology successfully.");  return true;}  }
class C{  public static boolean isPackage(int mod){  return (mod & PACKAGE) != 0;}  }
class C{  public void clear(){  for (  TunerConfiguration config : mTunerConfigurations) {    broadcast(new TunerConfigurationEvent(config,Event.REMOVE));  }  int size=mTunerConfigurations.size();  mTunerConfigurations.clear();  fireTableRowsDeleted(0,size - 1);}  }
class C{  public void initImportedKeys(DatabaseMetaData dbmd) throws java.sql.SQLException {  ResultSet fkeys=dbmd.getImportedKeys(catalog,schema,this.sqlName);  while (fkeys.next()) {    String pktable=fkeys.getString(PKTABLE_NAME);    String pkcol=fkeys.getString(PKCOLUMN_NAME);    String fktable=fkeys.getString(FKTABLE_NAME);    String fkcol=fkeys.getString(FKCOLUMN_NAME);    String seq=fkeys.getString(KEY_SEQ);    Integer iseq=new Integer(seq);    getImportedKeys().addForeignKey(pktable,pkcol,fkcol,iseq);  }  fkeys.close();}  }
class C{  protected WebDriver createNativeDriver(){  return new MarionetteDriver(new MarionetteCapabilitiesFactory().createCapabilities(webDriverConfig));}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public Object matchNext(String s){  return matchAfter(s,lastDepth);}  }
class C{  public void errPos(int pos){  errPos=pos;}  }
class C{  @Override public boolean contains(Value subvalue){  return false;}  }
class C{  public static long[] splitLongs(String str) throws IllegalArgumentException {  StringTokenizer tokenizer=new StringTokenizer(str,",");  int n=tokenizer.countTokens();  long[] list=new long[n];  for (int i=0; i < n; i++) {    String token=tokenizer.nextToken();    list[i]=Long.parseLong(token);  }  return list;}  }
class C{  private void $$$setupUI$$$(){  createUIComponents();  myRootComponent=new JPanel();  myRootComponent.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1,1,new java.awt.Insets(0,0,0,0),-1,-1));  myRootComponent.add(myLabel,new com.intellij.uiDesigner.core.GridConstraints(0,0,1,1,com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST,com.intellij.uiDesigner.core.GridConstraints.FILL_NONE,com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED,com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));}  }
class C{  public void registerConfiguration(String containerId,ContainerType containerType,ConfigurationType configurationType,String configurationClassName){  registerImplementation(new RegistrationKey(new FullContainerIdentity(containerId,containerType),configurationType.getType()),configurationClassName);}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:14.700 -0500",hash_original_method="05C617D461D77195B2E85EFC82E4058C",hash_generated_method="77B835C846B7732D948F8F13965F7191") public static synchronized SSLClientSessionCache usingDirectory(File directory) throws IOException {  FileClientSessionCache.Impl cache=caches.get(directory);  if (cache == null) {    cache=new FileClientSessionCache.Impl(directory);    caches.put(directory,cache);  }  return cache;}  }
class C{  protected static long parseIntegerValue(ByteArrayInputStream pduDataStream){  assert (null != pduDataStream);  pduDataStream.mark(1);  int temp=pduDataStream.read();  assert (-1 != temp);  pduDataStream.reset();  if (temp > SHORT_INTEGER_MAX) {    return parseShortInteger(pduDataStream);  } else {    return parseLongInteger(pduDataStream);  }}  }
class C{  public RequestHandle post(Context context,String url,HttpEntity entity,String contentType,ResponseHandlerInterface responseHandler){  return sendRequest(httpClient,httpContext,addEntityToRequestBase(new HttpPost(getURI(url)),entity),contentType,responseHandler,context);}  }
class C{  public final Rect unionRectWith(Rect r){  float x1=MathUtils.min(x,r.x);  float x2=MathUtils.max(x + width,r.x + r.width);  float w=x2 - x1;  float y1=MathUtils.min(y,r.y);  float y2=MathUtils.max(y + height,r.y + r.height);  float h=y2 - y1;  return new Rect(x1,y1,w,h);}  }
class C{  public static synchronized void captureMemoryDump(@NotNull String dumpPath) throws Exception {  ourDumpHeap.invoke(ourMXBean,dumpPath,true);}  }
class C{  protected FinalizableWeakReference(T referent,FinalizableReferenceQueue queue){  super(referent,queue.queue);  queue.cleanUp();}  }
class C{  final public static double sphericalDistance(double phi1,double lambda0,double phi,double lambda){  double pdiff=Math.sin(((phi - phi1) / 2.0));  double ldiff=Math.sin((lambda - lambda0) / 2.0);  double rval=Math.sqrt((pdiff * pdiff) + Math.cos(phi1) * Math.cos(phi) * (ldiff * ldiff));  return 2.0 * Math.asin(rval);}  }
class C{  public static Request createConnectRequest(TransportAddress peerAddress,byte[] transactionId) throws IllegalArgumentException {  Request connectRequest=new Request();  connectRequest.setMessageType(Message.CONNECT_REQUEST);  XorPeerAddressAttribute xorPeerAddressAttribute=AttributeFactory.createXorPeerAddressAttribute(peerAddress,transactionId);  connectRequest.putAttribute(xorPeerAddressAttribute);  return connectRequest;}  }
class C{  protected void digBlock(ChunkPrimer data,int x,int y,int z,int chunkX,int chunkZ,boolean foundTop){  net.minecraft.world.biome.Biome biome=worldObj.getBiome(new BlockPos(x + chunkX * 16,0,z + chunkZ * 16));  IBlockState state=data.getBlockState(x,y,z);  IBlockState top=isExceptionBiome(biome) ? Blocks.GRASS.getDefaultState() : biome.topBlock;  IBlockState filler=isExceptionBiome(biome) ? Blocks.DIRT.getDefaultState() : biome.fillerBlock;  if (state.getBlock() == Blocks.STONE || state.getBlock() == top.getBlock() || state.getBlock() == filler.getBlock()) {    if (y - 1 < 10) {      data.setBlockState(x,y,z,FLOWING_LAVA);    } else {      data.setBlockState(x,y,z,AIR);      if (foundTop && data.getBlockState(x,y - 1,z).getBlock() == filler.getBlock()) {        data.setBlockState(x,y - 1,z,top.getBlock().getDefaultState());      }    }  }}  }
class C{  @Override public void perform(IR ir){  for (BasicBlock bb=ir.firstBasicBlockInCodeOrder(); bb != null; bb=bb.nextBasicBlockInCodeOrder()) {    if (!bb.isEmpty()) {      Instruction lastInstr=bb.lastInstruction();      boolean combined;      boolean remaining;      do {        combined=remaining=false;        Instruction activeNullCheck=null;        Operand activeGuard=null;        for (Instruction instr=bb.firstRealInstruction(), nextInstr=null; instr != lastInstr; instr=nextInstr) {          nextInstr=instr.nextInstructionInCodeOrder();          Operator op=instr.operator();          if (op == GUARD_MOVE) {            if (activeGuard != null && Move.getVal(instr).similar(activeGuard)) {              activeGuard=Move.getResult(instr);            }          } else           if (op == GUARD_COMBINE) {            if (activeGuard != null && (Binary.getVal1(instr) == activeGuard || Binary.getVal2(instr) == activeGuard)) {              activeGuard=null;            }          } else           if (op == NULL_CHECK) {            remaining|=(activeGuard == null);            activeGuard=NullCheck.getGuardResult(instr);            activeNullCheck=instr;          } else           if (isExplicitStore(instr,op)) {            if (instr.isPEI()) {              activeGuard=null;            } else {              if (activeGuard != null && canFold(instr,activeGuard,true)) {                instr.markAsPEI();                activeNullCheck.remove();                activeGuard=null;                combined=true;              }              remaining|=(activeGuard == null);              activeGuard=null;            }          } else           if (isExplicitLoad(instr,op)) {            if (activeGuard != null && canFold(instr,activeGuard,false)) {              instr.markAsPEI();              activeNullCheck.remove();              activeGuard=null;              combined=true;            } else             if (instr.isPEI()) {              activeGuard=null;            }          } else {            if (op.isImplicitStore() || op.isPEI()) {              activeGuard=null;            }          }        }      } while (combined & remaining);      for (Instruction instr=bb.firstRealInstruction(), nextInstr=null; instr != lastInstr; instr=nextInstr) {        nextInstr=instr.nextInstructionInCodeOrder();        Operator op=instr.operator();        if (op == GUARD_MOVE || op == GUARD_COMBINE) {          instr.remove();        } else {          if (GuardResultCarrier.conforms(op)) {            GuardResultCarrier.setGuardResult(instr,null);          }          if (GuardCarrier.conforms(op)) {            GuardCarrier.setGuard(instr,null);          }        }      }    }  }}  }
class C{  @SuppressWarnings("restriction") public void registerDataCallBack(String path){  try {    transport.getZKHandle().getData().usingWatcher(watcher).inBackground((BackgroundCallback)watcher).forPath(path);  } catch (  Exception e) {    LOGGER.error("Exception in setting data call back for path :" + path,e);  }}  }
class C{  public boolean isValid(){  return isSessionIdValid() && isAttrNameValid() && isAgeFromValid()&& isAgeToValid()&& isIdleTimeFromValid()&& isIdleTimeToValid();}  }
class C{  public Builder reconnectionDelay(Duration duration){  this.reconnectionDelay=duration;  return this;}  }
class C{  public static double[] join(double[]... arrays){  if (arrays.length == 0) {    return new double[0];  }  if (arrays.length == 1) {    return arrays[0];  }  int length=0;  for (  double[] array : arrays) {    length+=array.length;  }  double[] result=new double[length];  length=0;  for (  double[] array : arrays) {    System.arraycopy(array,0,result,length,array.length);    length+=array.length;  }  return result;}  }
class C{  private static String toCurl(HttpUriRequest request,boolean logAuthToken) throws IOException {  StringBuilder builder=new StringBuilder();  builder.append("curl ");  for (  Header header : request.getAllHeaders()) {    if (!logAuthToken && (header.getName().equals("Authorization") || header.getName().equals("Cookie"))) {      continue;    }    builder.append("--header \"");    builder.append(header.toString().trim());    builder.append("\" ");  }  URI uri=request.getURI();  if (request instanceof RequestWrapper) {    HttpRequest original=((RequestWrapper)request).getOriginal();    if (original instanceof HttpUriRequest) {      uri=((HttpUriRequest)original).getURI();    }  }  builder.append("\"");  builder.append(uri);  builder.append("\"");  if (request instanceof HttpEntityEnclosingRequest) {    HttpEntityEnclosingRequest entityRequest=(HttpEntityEnclosingRequest)request;    HttpEntity entity=entityRequest.getEntity();    if (entity != null && entity.isRepeatable()) {      if (entity.getContentLength() < 1024) {        ByteArrayOutputStream stream=new ByteArrayOutputStream();        entity.writeTo(stream);        String entityString=stream.toString();        builder.append(" --data-ascii \"").append(entityString).append("\"");      } else {        builder.append(" [TOO MUCH DATA TO INCLUDE]");      }    }  }  return builder.toString();}  }
class C{  private JLabel addNotificationCategoryLabel(JPanel panel,String categoryName){  JLabel jlbl=new JLabel(categoryName);  panel.add(jlbl);  return jlbl;}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMMaskElement(prefix,(AbstractDocument)doc);}  }
class C{  public void finish(){  shutdown();}  }
class C{  public List<FacetResult> runFacetOnly() throws IOException {  index();  return facetsOnly();}  }
class C{  public DefaultFormatterFactory(JFormattedTextField.AbstractFormatter defaultFormat,JFormattedTextField.AbstractFormatter displayFormat,JFormattedTextField.AbstractFormatter editFormat,JFormattedTextField.AbstractFormatter nullFormat){  this.defaultFormat=defaultFormat;  this.displayFormat=displayFormat;  this.editFormat=editFormat;  this.nullFormat=nullFormat;}  }
class C{  private static <T>int gallopRight(T key,T[] a,int base,int len,int hint,Comparator<? super T> c){  if (DEBUG)   assert len > 0 && hint >= 0 && hint < len;  int ofs=1;  int lastOfs=0;  if (c.compare(key,a[base + hint]) < 0) {    int maxOfs=hint + 1;    while (ofs < maxOfs && c.compare(key,a[base + hint - ofs]) < 0) {      lastOfs=ofs;      ofs=(ofs * 2) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    int tmp=lastOfs;    lastOfs=hint - ofs;    ofs=hint - tmp;  } else {    int maxOfs=len - hint;    while (ofs < maxOfs && c.compare(key,a[base + hint + ofs]) >= 0) {      lastOfs=ofs;      ofs=(ofs * 2) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    lastOfs+=hint;    ofs+=hint;  }  if (DEBUG)   assert -1 <= lastOfs && lastOfs < ofs && ofs <= len;  lastOfs++;  while (lastOfs < ofs) {    int m=lastOfs + ((ofs - lastOfs) >>> 1);    if (c.compare(key,a[base + m]) < 0)     ofs=m; else     lastOfs=m + 1;  }  if (DEBUG)   assert lastOfs == ofs;  return ofs;}  }
class C{  public void manageWebClip(org.wso2.emm.agent.beans.Operation operation) throws AndroidAgentException {  String appUrl;  String title;  String operationType;  try {    JSONObject webClipData=new JSONObject(operation.getPayLoad().toString());    appUrl=webClipData.getString(resources.getString(R.string.intent_extra_identity));    title=webClipData.getString(resources.getString(R.string.intent_extra_title));    operationType=webClipData.getString(resources.getString(R.string.operation_type));  } catch (  JSONException e) {    operation.setStatus(resources.getString(R.string.operation_value_error));    operation.setOperationResponse("Error in parsing WebClip payload.");    resultBuilder.build(operation);    throw new AndroidAgentException("Invalid JSON format.",e);  }  operation.setStatus(resources.getString(R.string.operation_value_completed));  resultBuilder.build(operation);  if (appUrl != null && title != null) {    appList.manageWebAppBookmark(appUrl,title,operationType);  }  if (Constants.DEBUG_MODE_ENABLED) {    Log.d(TAG,"Created webclip");  }}  }
class C{  public OrderedRowIterator(final String table,final String whereColumn,final byte[] whereValue,final boolean up) throws IOException {  assert whereColumn != null || whereValue == null;  this.whereColumn=whereColumn;  this.whereValue=whereValue;  this.wherePattern=null;  this.heap=getHeap(table);  this.i=heap.keys(up,false);}  }
class C{  public static <T1,T2>Pair<T1,T2> newPair(T1 a,T2 b){  return new Pair<T1,T2>(a,b);}  }
class C{  public AnimationBuilder scale(float... scale){  scaleX(scale);  scaleY(scale);  return this;}  }
class C{  private void markComment(TaskRepository taskRepository,TaskAttribute commentAttr,String taskId){  IProject project=AppraisePluginUtils.getProjectForRepository(taskRepository);  String filePath=getFilePath(commentAttr);  IResource resource=project;  if (filePath != null) {    resource=project.getFile(filePath);    if (resource == null || !resource.exists()) {      return;    }  }  try {    IMarker marker=resource.createMarker(AppraiseUiPlugin.REVIEW_TASK_MARKER_ID);    marker.setAttribute(IMarker.MESSAGE,getMessage(commentAttr));    marker.setAttribute(IMarker.TRANSIENT,true);    if (filePath != null) {      marker.setAttribute(IMarker.LINE_NUMBER,getLineNumber(commentAttr));    }    marker.setAttribute(IMarker.USER_EDITABLE,false);    TaskAttribute authorAttribute=commentAttr.getMappedAttribute(TaskAttribute.COMMENT_AUTHOR);    if (authorAttribute != null) {      marker.setAttribute(ReviewMarkerAttributes.REVIEW_AUTHOR_MARKER_ATTRIBUTE,authorAttribute.getValue());    }    marker.setAttribute(ReviewMarkerAttributes.REVIEW_DATETIME_MARKER_ATTRIBUTE,commentAttr.getMappedAttribute(TaskAttribute.COMMENT_DATE).getValue());    marker.setAttribute(ReviewMarkerAttributes.REVIEW_ID_MARKER_ATTRIBUTE,getCommentId(commentAttr));    marker.setAttribute(ReviewMarkerAttributes.REVIEW_RESOLVED_MARKER_ATTRIBUTE,getResolvedDisplayText(commentAttr));    marker.setAttribute("TaskId",taskId);  } catch (  CoreException e) {    AppraiseUiPlugin.logError("Failed to create marker at " + filePath,e);  }}  }
class C{  public double coleman_liau(List<String> words,int nrofSentences){  words=filterWords(words);  int nrofLetters=this.getNrofLetters(words);  return coleman_liau(nrofLetters,words.size(),nrofSentences);}  }
class C{  @Override public int calculateBattleValue(boolean ignoreC3,boolean ignorePilot){  double dbv=0;  double obv=0;  dbv+=getTotalArmor();  double dEquipmentBV=0;  for (  Mounted mounted : getEquipment()) {    EquipmentType etype=mounted.getType();    if (mounted.isDestroyed()) {      continue;    }    if (((etype instanceof WeaponType) && etype.hasFlag(WeaponType.F_AMS)) || ((etype instanceof AmmoType) && (((AmmoType)etype).getAmmoType() == AmmoType.T_AMS)) || etype.hasFlag(MiscType.F_ECM)) {      dEquipmentBV+=etype.getBV(this);    }  }  dbv+=dEquipmentBV;  dbv*=0.5;  double weaponBV=0;  boolean hasTargComp=hasTargComp();  for (  Mounted mounted : getWeaponList()) {    WeaponType wtype=(WeaponType)mounted.getType();    double dBV=wtype.getBV(this);    if (mounted.isDestroyed()) {      continue;    }    if (wtype.hasFlag(WeaponType.F_AMS)) {      continue;    }    if (mounted.getLinkedBy() != null) {      Mounted mLinker=mounted.getLinkedBy();      if ((mLinker.getType() instanceof MiscType) && mLinker.getType().hasFlag(MiscType.F_ARTEMIS)) {        dBV*=1.2;      }      if ((mLinker.getType() instanceof MiscType) && mLinker.getType().hasFlag(MiscType.F_ARTEMIS_V)) {        dBV*=1.3;      }      if ((mLinker.getType() instanceof MiscType) && mLinker.getType().hasFlag(MiscType.F_RISC_LASER_PULSE_MODULE)) {        dBV*=1.25;      }    }    if (mounted.getLinkedBy() != null) {      Mounted mLinker=mounted.getLinkedBy();      if ((mLinker.getType() instanceof MiscType) && mLinker.getType().hasFlag(MiscType.F_APOLLO)) {        dBV*=1.15;      }    }    if (wtype.hasFlag(WeaponType.F_DIRECT_FIRE) && hasTargComp) {      dBV*=1.2;    }    weaponBV+=dBV;  }  obv+=weaponBV;  double ammoBV=0;  for (  Mounted mounted : getAmmo()) {    AmmoType atype=(AmmoType)mounted.getType();    if (mounted.getUsableShotsLeft() == 0) {      continue;    }    if (atype.getAmmoType() == AmmoType.T_AMS) {      continue;    }    ammoBV+=atype.getBV(this);  }  obv+=ammoBV;  obv*=0.44;  double finalBV;  if (useGeometricMeanBV()) {    finalBV=2 * Math.sqrt(obv * dbv);    if (finalBV == 0) {      finalBV=obv + dbv;    }  } else {    finalBV=obv + dbv;  }  double xbv=0.0;  if (!ignoreC3 && (game != null)) {    xbv+=getExtraC3BV((int)Math.round(finalBV));  }  finalBV+=xbv;  double pilotFactor=1;  if (!ignorePilot) {    pilotFactor=getCrew().getBVSkillMultiplier(game);  }  int retVal=(int)Math.round((finalBV) * pilotFactor);  return retVal;}  }
class C{  public void testToEngineeringStringPos(){  String a="123809648392384754573567356745735.63567890295784902768787678287E-501";  BigDecimal aNumber=new BigDecimal(a);  String result="123.80964839238475457356735674573563567890295784902768787678287E-471";  assertEquals("incorrect value",result,aNumber.toEngineeringString());}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node testEmployee;  String name;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("position");  testEmployee=elementList.item(1);  name=testEmployee.getNodeName();  assertEquals("nodename","position",name);  name=((Element)testEmployee).getTagName();  assertEquals("tagname","position",name);}  }
class C{  public Panel(){  super(new GridBagLayout());  setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),resources.getString("Panel.title")));  ExtendedGridBagConstraints constraints=new ExtendedGridBagConstraints();  constraints.insets=new Insets(5,5,5,5);  fileCheckBox=new JCheckBox(resources.getString("PanelFileCheckBox.text"));  fileCheckBox.addChangeListener(new FileCheckBoxChangeListener());  constraints.weightx=0;  constraints.weighty=0;  constraints.fill=GridBagConstraints.HORIZONTAL;  constraints.setGridBounds(0,2,3,1);  this.add(fileCheckBox,constraints);  fileLabel=new JLabel(resources.getString("PanelFileLabel.text"));  constraints.weightx=0;  constraints.weighty=0;  constraints.fill=GridBagConstraints.HORIZONTAL;  constraints.setGridBounds(0,3,3,1);  this.add(fileLabel,constraints);  fileTextField=new JTextField(30);  constraints.weightx=1.0;  constraints.weighty=0;  constraints.fill=GridBagConstraints.HORIZONTAL;  constraints.setGridBounds(0,4,2,1);  this.add(fileTextField,constraints);  ButtonFactory bf=new ButtonFactory(bundle,null);  constraints.weightx=0;  constraints.weighty=0;  constraints.fill=GridBagConstraints.NONE;  constraints.anchor=GridBagConstraints.EAST;  constraints.setGridBounds(2,4,1,1);  browseButton=bf.createJButton("PanelFileBrowseButton");  this.add(browseButton,constraints);  browseButton.addActionListener(new FileBrowseButtonAction());  fileLabel.setEnabled(false);  fileTextField.setEnabled(false);  browseButton.setEnabled(false);}  }
class C{  public String globalInfo(){  return "Simple EM (expectation maximisation) class.\n\n" + "EM assigns a probability distribution to each instance which " + "indicates the probability of it belonging to each of the clusters. "+ "EM can decide how many clusters to create by cross validation, or you "+ "may specify apriori how many clusters to generate.\n\n"+ "The cross validation performed to determine the number of clusters "+ "is done in the following steps:\n"+ "1. the number of clusters is set to 1\n"+ "2. the training set is split randomly into 10 folds.\n"+ "3. EM is performed 10 times using the 10 folds the usual CV way.\n"+ "4. the loglikelihood is averaged over all 10 results.\n"+ "5. if loglikelihood has increased the number of clusters is increased "+ "by 1 and the program continues at step 2. \n\n"+ "The number of folds is fixed to 10, as long as the number of "+ "instances in the training set is not smaller 10. If this is the case "+ "the number of folds is set equal to the number of instances.";}  }
class C{  private void showPopupMenu(final MouseEvent event){  final int row=rowAtPoint(event.getPoint());  final int column=columnAtPoint(event.getPoint());  int[] rows=getSelectedRows();  if ((rows.length == 0) || (rows.length == 1)) {    changeSelection(row,column,false,false);    rows=getSelectedRows();  }  final JPopupMenu menu=new JPopupMenu();  menu.add(new JMenuItem(CActionProxy.proxy(new CDeleteAction(m_debuggerProvider,rows))));  if (CBreakpointFunctions.allDisabled(m_debuggerProvider,rows)) {    menu.add(new JMenuItem(CActionProxy.proxy(new CEnableAction(m_debuggerProvider,rows))));  } else   if (CBreakpointFunctions.allNotDisabled(m_debuggerProvider,rows)) {    menu.add(new JMenuItem(CActionProxy.proxy(new CDisableAction(m_debuggerProvider,rows))));  }  if (rows.length == 1) {    menu.addSeparator();    final Pair<IDebugger,Integer> breakpoint=CBreakpointTableHelpers.findBreakpoint(m_debuggerProvider,rows[0]);    final BreakpointManager manager=breakpoint.first().getBreakpointManager();    final int breakpointIndex=breakpoint.second();    final BreakpointAddress address=manager.getBreakpoint(BreakpointType.REGULAR,breakpointIndex).getAddress();    menu.add(new JMenuItem(CActionProxy.proxy(new CZoomBreakpointAction(SwingUtilities.windowForComponent(this),m_graph,m_viewContainer,address))));  }  menu.show(event.getComponent(),event.getX(),event.getY());}  }
class C{  public DoubleParameter(OptionID optionID,double defaultValue){  super(optionID,defaultValue);}  }
class C{  public Object remove(int index){  return index >= 0 && index < this.length() ? this.myArrayList.remove(index) : null;}  }
class C{  private void generatePattern(TransitLayer transitLayer,int directionId){  TripPattern pattern=new TripPattern(intStopIds);  LOG.info("Created {}.",pattern);  for (  PatternTimetable timetable : frequencies) {    TripSchedule schedule=createSchedule(timetable,directionId,transitLayer.services);    if (schedule == null) {      warnings.add("Failed to create a trip.");      continue;    }    pattern.addTrip(schedule);  }  pattern.routeIndex=this.routeIndex;  pattern.routeId=this.routeId;  transitLayer.tripPatterns.add(pattern);  transitLayer.hasFrequencies=true;}  }
class C{  public boolean isRead(){  return read;}  }
class C{  public ApprovalRestRep update(URI id,ApprovalUpdateParam input){  return client.put(ApprovalRestRep.class,input,getIdUrl(),id);}  }
class C{  public AlchemyService(){  super(SERVICE_NAME);  if ((getEndPoint() == null) || getEndPoint().isEmpty()) {    setEndPoint(ENDPOINT);  }}  }
class C{  public ColladaBindVertexInput(String namespaceURI){  super(namespaceURI);}  }
class C{  @Override public void mark(final int readAheadLimit){  mark=idx;}  }
class C{  public RemoteBrandServiceImpl(final DtoBrandService dtoBrandService){  super(dtoBrandService);  this.dtoBrandService=dtoBrandService;}  }
class C{  public void testCameraPairwiseScenario21() throws Exception {  genericPairwiseTestCase(Flash.OFF,Exposure.MIN,WhiteBalance.AUTO,SceneMode.AUTO,PictureSize.MEDIUM,Geotagging.OFF);}  }
class C{  public boolean isTagCountDefined(int tagId){  int info=getTagInfo().get(tagId);  if (info == 0) {    return false;  }  return getComponentCountFromInfo(info) != ExifTag.SIZE_UNDEFINED;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public cudaDeviceProp(){}  }
class C{  public static Object makeCopy(Object source) throws Exception {  SerializedObject so=new SerializedObject(source);  Object result=so.getObject();  return result;}  }
class C{  protected void changeTransferStatus(TransferStatus transferStatus){  contact=persistResource(contact.asBuilder().setTransferData(contact.getTransferData().asBuilder().setTransferStatus(transferStatus).build()).build());  clock.advanceOneMilli();}  }
class C{  public StateChangeAction(Assignment assignment,CSP csp){  this.csp=csp;  this.assignment=assignment;}  }
class C{  public boolean isLeftKnown(){  return left != BeaconColor.UNKNOWN;}  }
class C{  private int selectPartition(T[] d,int from,int to,int pivotIndex){  T pivotValue=d[pivotIndex];  swap(d,pivotIndex,to);  int storeIndex=from;  for (int i=from; i <= to; i++) {    if (comp.compare(d[i],pivotValue) < 0) {      swap(d,storeIndex,i);      storeIndex++;    }  }  swap(d,to,storeIndex);  return storeIndex;}  }
class C{  public HousePortal(final RPObject object){  super(object);  setRPClass(RPCLASS_NAME);  put("type","house_portal");  super.setDestination(get(DESTINATION_ZONE),idToObject(DESTINATION_ID));  super.setIdentifier(idToObject(PORTAL_REFERENCE));  setRejectedMessage("The door is locked.");  store();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:10.217 -0500",hash_original_method="C098D3724E09EEC45853C7E5DAED7824",hash_generated_method="C6B35AE2FA29E9467645051E8EE6EECF") private static InetAddress[] bytesToInetAddresses(byte[][] rawAddresses,String hostName) throws UnknownHostException {  InetAddress[] returnedAddresses=new InetAddress[rawAddresses.length];  for (int i=0; i < rawAddresses.length; i++) {    returnedAddresses[i]=makeInetAddress(rawAddresses[i],hostName);  }  return returnedAddresses;}  }
class C{  public int costInline(int thresh,Environment env,Context ctx){  return 1 + ((left != null) ? left.costInline(thresh,env,ctx) : 0) + ((right != null) ? right.costInline(thresh,env,ctx) : 0);}  }
class C{  public Builder referenceTracking(final boolean referenceTracking){  this.referenceTracking=referenceTracking;  return this;}  }
class C{  public ScriptGenerator addClasses(final Class... classes){  for (  Class<?> c : classes) {    addPath(PathUtil.getJarPathForClass(c));  }  return this;}  }
class C{  public static ContentSharingError isImageCapacityAcceptable(long imageSize,RcsSettings rcsSettings){  boolean fileIsToBig=(ImageTransferSession.getMaxImageSharingSize(rcsSettings) > 0) ? imageSize > ImageTransferSession.getMaxImageSharingSize(rcsSettings) : false;  boolean storageIsTooSmall=(StorageUtils.getExternalStorageFreeSpace() > 0) ? imageSize > StorageUtils.getExternalStorageFreeSpace() : false;  if (fileIsToBig) {    if (sLogger.isActivated()) {      sLogger.warn("Image is too big, reject the image sharing");    }    return new ContentSharingError(ContentSharingError.MEDIA_SIZE_TOO_BIG);  }  if (storageIsTooSmall) {    if (sLogger.isActivated()) {      sLogger.warn("Not enough storage capacity, reject the image sharing");    }    return new ContentSharingError(ContentSharingError.NOT_ENOUGH_STORAGE_SPACE);  }  return null;}  }
class C{  public static FloatRange valueOf(String string){  if (string.isEmpty()) {    return null;  }  String[] nums=null;  int i=0;  boolean firstMinus=string.charAt(0) == '-';  if (firstMinus) {    string=string.substring(1);  }  while ((i < ByteRange.SPLITS.length) && ((nums == null) || (nums.length != 2))) {    nums=StringUtils.splitByWholeSeparator(string,ByteRange.SPLITS[i++],2);  }  if ((nums == null) || (nums.length != 2)) {    return null;  }  Float min=DioriteMathUtils.asFloat(firstMinus ? ("-" + nums[0]) : nums[0]);  if (min == null) {    return null;  }  Float max=DioriteMathUtils.asFloat(nums[1]);  if ((max == null) || (min > max)) {    return null;  }  return new FloatRange(min,max);}  }
class C{  public void initProject(@NotNull VcsRootConfiguration vcsRootConfiguration) throws IOException {  createDirs(vcsRootConfiguration.getMockRoots());  Collection<String> contentRoots=vcsRootConfiguration.getContentRoots();  createProjectStructure(myProject,contentRoots);  if (!contentRoots.isEmpty()) {    for (    String root : contentRoots) {      myProjectRoot.refresh(false,true);      VirtualFile f=myProjectRoot.findFileByRelativePath(root);      if (f != null) {        myRootModel.addContentEntry(f);      }    }  }}  }
class C{  public MoveStep(MovePath path,MoveStepType type){  this.type=type;  if (path != null) {    entity=path.getEntity();    isJumpingPath=path.isJumping();    isCarefulPath=path.isCareful();  }  if ((type == MoveStepType.UNLOAD) || (type == MoveStepType.LAUNCH) || (type == MoveStepType.DROP)|| (type == MoveStepType.UNDOCK)) {    hasEverUnloaded=true;  } else {    hasEverUnloaded=false;  }}  }
class C{  public List<DefaultNPC> load(){  final GroupsXMLLoader groupsLoader=new GroupsXMLLoader(uri);  final List<DefaultNPC> list=new LinkedList<DefaultNPC>();  try {    List<URI> groups=groupsLoader.load();    for (    final URI tempUri : groups) {      final NPCsXMLLoader loader=new NPCsXMLLoader();      try {        list.addAll(loader.load(tempUri));      } catch (      final SAXException ex) {        logger.error("Error loading creature group: " + tempUri,ex);      }    }  } catch (  SAXException e) {    logger.error(e,e);  }catch (  IOException e) {    logger.error(e,e);  }  return list;}  }
class C{  private long[][] generateWorkingKey(byte[] key){  int KC;  int t, rconpointer=0;  int keyBits=key.length * 8;  byte[][] tk=new byte[4][MAXKC];  long[][] W=new long[MAXROUNDS + 1][4];switch (keyBits) {case 128:    KC=4;  break;case 160:KC=5;break;case 192:KC=6;break;case 224:KC=7;break;case 256:KC=8;break;default :throw new IllegalArgumentException("Key length not 128/160/192/224/256 bits.");}if (keyBits >= blockBits) {ROUNDS=KC + 6;} else {ROUNDS=(BC / 8) + 6;}int index=0;for (int i=0; i < key.length; i++) {tk[i % 4][i / 4]=key[index++];}t=0;for (int j=0; (j < KC) && (t < (ROUNDS + 1) * (BC / 8)); j++, t++) {for (int i=0; i < 4; i++) {W[t / (BC / 8)][i]|=(long)(tk[i][j] & 0xff) << ((t * 8) % BC);}}while (t < (ROUNDS + 1) * (BC / 8)) {for (int i=0; i < 4; i++) {tk[i][0]^=S[tk[(i + 1) % 4][KC - 1] & 0xff];}tk[0][0]^=rcon[rconpointer++];if (KC <= 6) {for (int j=1; j < KC; j++) {for (int i=0; i < 4; i++) {tk[i][j]^=tk[i][j - 1];}}} else {for (int j=1; j < 4; j++) {for (int i=0; i < 4; i++) {tk[i][j]^=tk[i][j - 1];}}for (int i=0; i < 4; i++) {tk[i][4]^=S[tk[i][3] & 0xff];}for (int j=5; j < KC; j++) {for (int i=0; i < 4; i++) {tk[i][j]^=tk[i][j - 1];}}}for (int j=0; (j < KC) && (t < (ROUNDS + 1) * (BC / 8)); j++, t++) {for (int i=0; i < 4; i++) {W[t / (BC / 8)][i]|=(long)(tk[i][j] & 0xff) << ((t * 8) % (BC));}}}return W;}  }
class C{  public void start(){  super.start();  try {    parser=new StAndrewsSocialNetworkParser(ST_ANDREWS_SOCIAL_NETWORK_FILENAME,this);  } catch (  FileNotFoundException e) {    e.printStackTrace();  }  socialNetwork=parser.getNetwork();  try {    saEncounterModel=new StAndrewsEncounterModel(ST_ANDREWS_ENCOUNTER_FILENAME,this);  } catch (  FileNotFoundException e) {    e.printStackTrace();  }  Set<StAndrewsEncounter> encounters=((StAndrewsEncounterModel)saEncounterModel).getEncounters();  for (  StAndrewsEncounter encounter : encounters) {    Steppable[] encounterAndMeasurer=new Steppable[2];    encounterAndMeasurer[0]=encounter;    encounterAndMeasurer[1]=measurer;    Sequence s=new Sequence(encounterAndMeasurer);    schedule.scheduleOnce(encounter.startTime,s);  }  schedule.scheduleOnce(measurer);}  }
class C{  void buildNote(Multimap<Integer,Comment> comments,OutputStream out){  if (comments.isEmpty()) {    return;  }  List<Integer> psIds=new ArrayList<>(comments.keySet());  Collections.sort(psIds);  OutputStreamWriter streamWriter=new OutputStreamWriter(out,UTF_8);  try (PrintWriter writer=new PrintWriter(streamWriter)){    String revId=comments.values().iterator().next().revId;    appendHeaderField(writer,REVISION,revId);    for (    int psId : psIds) {      List<Comment> psComments=COMMENT_ORDER.sortedCopy(comments.get(psId));      Comment first=psComments.get(0);      short side=first.side;      appendHeaderField(writer,side <= 0 ? BASE_PATCH_SET : PATCH_SET,Integer.toString(psId));      if (side < 0) {        appendHeaderField(writer,PARENT_NUMBER,Integer.toString(-side));      }      String currentFilename=null;      for (      Comment c : psComments) {        checkArgument(revId.equals(c.revId),"All comments being added must have all the same RevId. The " + "comment below does not have the same RevId as the others " + "(%s).\n%s",revId,c);        checkArgument(side == c.side,"All comments being added must all have the same side. The " + "comment below does not have the same side as the others " + "(%s).\n%s",side,c);        String commentFilename=QuotedString.GIT_PATH.quote(c.key.filename);        if (!commentFilename.equals(currentFilename)) {          currentFilename=commentFilename;          writer.print("File: ");          writer.print(commentFilename);          writer.print("\n\n");        }        appendOneComment(writer,c);      }    }  } }  }
class C{  private float calculateTri(float originalTime,float currentTime){  if (progress < PROGRESS / 3) {    waveHeight=MIN_WAVE_HEIGHT;  } else   if (progress < PROGRESS * 2 / 3) {    waveHeight=maxWaveHeight;  } else {    waveHeight=minWaveHeight;  }  return (float)(waveHeight * Math.sin((Math.PI / 80) * (originalTime + currentTime)));}  }
class C{  private List<TransitRouteStop> routeProfilesTouch(TransitRoute transitRoute,TransitRoute refTransitRoute){  List<TransitRouteStop> stops=new ArrayList<TransitRouteStop>();  for (  TransitRouteStop stop : refTransitRoute.getStops()) {    if (transitRoute.getStops().contains(stop))     stops.add(stop);  }  return stops;}  }
class C{  @Override public boolean equals(final Object o){  if (this == o) {    return true;  }  if (!(o instanceof Type)) {    return false;  }  Type t=(Type)o;  if (sort != t.sort) {    return false;  }  if (sort >= ARRAY) {    if (len != t.len) {      return false;    }    for (int i=off, j=t.off, end=i + len; i < end; i++, j++) {      if (buf[i] != t.buf[j]) {        return false;      }    }  }  return true;}  }
class C{  public String xmlToCsv(UpdateInventoryInput input){  return input.getSupplierId() + "," + input.getPartId()+ ","+ input.getName()+ ","+ input.getAmount();}  }
class C{  protected final void writeOut(byte[] data,int offset,int length) throws IOException {  if (raf != null) {    raf.write(data,offset,length);  } else {    out.write(data,offset,length);  }}  }
class C{  protected void assertFalse(boolean value){  assertFalse("Expected: false got: true",value);}  }
class C{  public QueryStringQueryBuilder autoGeneratePhraseQueries(boolean autoGeneratePhraseQueries){  this.autoGeneratePhraseQueries=autoGeneratePhraseQueries;  return this;}  }
class C{  public static void loadMediaInfo(){  try {    String miv="";    if (!Platform.isLinux()) {      String nativepath="native/";      if (Platform.isWindows()) {        nativepath+="windows";      } else       if (Platform.isLinux()) {        nativepath+="linux";      } else       if (Platform.isMac()) {        nativepath+="mac";      }      if (!Platform.isMac()) {        if (Platform.is64Bit()) {          nativepath+="-x64";        } else {          nativepath+="-x86";        }      }      if (System.getProperty("user.dir","").startsWith("\\\\") || System.getProperty("user.dir","").startsWith("//")) {        LOGGER.debug("We're on a network UNC path!");        File tmpDir=new File(System.getProperty("java.io.tmpdir"),"tmm");        File nativeDir=new File(tmpDir,nativepath);        FileUtils.copyDirectory(new File(nativepath),nativeDir);        System.setProperty("jna.library.path",nativeDir.getAbsolutePath());        LOGGER.debug("Loading native mediainfo lib from: {}",nativeDir.getAbsolutePath());        miv=MediaInfo.version();      } else {        System.setProperty("jna.library.path",nativepath);        LOGGER.debug("Loading native mediainfo lib from: {}",nativepath);        miv=MediaInfo.version();      }    } else {      miv=MediaInfo.version();    }    if (!StringUtils.isEmpty(miv)) {      LOGGER.info("Using " + miv);    } else {      LOGGER.error("could not load MediaInfo!");      if (Platform.isLinux()) {        LOGGER.error("Please try do install the library from your distribution");      }    }  } catch (  IOException e) {    LOGGER.error("Could not load mediainfo",e);  }}  }
class C{  public int createString(ByteBuffer s){  int length=s.remaining();  addByte((byte)0);  startVector(1,length,1);  bb.position(space-=length);  bb.put(s);  return endVector();}  }
class C{  public static Automaton determinizeSimple(Automaton a,Set<Integer> initialset){  if (a.getNumStates() == 0) {    return a;  }  int[] points=a.getStartPoints();  Map<Set<Integer>,Set<Integer>> sets=new HashMap<>();  LinkedList<Set<Integer>> worklist=new LinkedList<>();  Map<Set<Integer>,Integer> newstate=new HashMap<>();  sets.put(initialset,initialset);  worklist.add(initialset);  Automaton.Builder result=new Automaton.Builder();  result.createState();  newstate.put(initialset,0);  Transition t=new Transition();  while (worklist.size() > 0) {    Set<Integer> s=worklist.removeFirst();    int r=newstate.get(s);    for (    int q : s) {      if (a.isAccept(q)) {        result.setAccept(r,true);        break;      }    }    for (int n=0; n < points.length; n++) {      Set<Integer> p=new HashSet<>();      for (      int q : s) {        int count=a.initTransition(q,t);        for (int i=0; i < count; i++) {          a.getNextTransition(t);          if (t.min <= points[n] && points[n] <= t.max) {            p.add(t.dest);          }        }      }      if (!sets.containsKey(p)) {        sets.put(p,p);        worklist.add(p);        newstate.put(p,result.createState());      }      int q=newstate.get(p);      int min=points[n];      int max;      if (n + 1 < points.length) {        max=points[n + 1] - 1;      } else {        max=Character.MAX_CODE_POINT;      }      result.addTransition(r,q,min,max);    }  }  return Operations.removeDeadStates(result.finish());}  }
class C{  public boolean isIconEnabled(){  return mCollapsingIconEnabled;}  }
class C{  @Initiate(priority=AutumnActionPriority.HIGH_PRIORITY) private void parseMacros(){  if (GdxArrays.isEmpty(macros)) {    return;  }  final LmlParser parser=interfaceService.get().getParser();  for (  final FileHandle macro : macros) {    parser.parseTemplate(macro);  }}  }
class C{  private boolean isInitialized(){  return poolNames != null && !poolNames.isEmpty();}  }
class C{  public static double[] toPrimitive(Double[] array,double valueForNull){  if (array == null) {    return null;  } else   if (array.length == 0) {    return EMPTY_DOUBLE_ARRAY;  }  final double[] result=new double[array.length];  for (int i=0; i < array.length; i++) {    Double b=array[i];    result[i]=(b == null ? valueForNull : b.doubleValue());  }  return result;}  }
class C{  public void testStressReplication() throws IOException {  final Journal store1=(Journal)getStore();  final Journal store2=(Journal)getStore();  try {    final RWStore rw1=((RWStrategy)store1.getBufferStrategy()).getStore();    final RWStore rw2=((RWStrategy)store2.getBufferStrategy()).getStore();    assertTrue(rw1 != rw2);    final Random r=new Random();    for (int i=0; i < 100000; i++) {      final int sze=1 + r.nextInt(2000);      final int addr=rw1.alloc(sze,null);      rw2.addAddress(addr,sze);    }  }  finally {    store1.destroy();    store2.destroy();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:59.027 -0500",hash_original_method="69E83F9740A898EB53687AFE8414C4DE",hash_generated_method="69E83F9740A898EB53687AFE8414C4DE") void _stopSpyStream(){  spyStream=null;}  }
class C{  public static LongestPathFinder newInstanceOfLongestPath(int maxMP,MoveStepType stepType,IGame game){  LongestPathFinder lpf=new LongestPathFinder(new LongestPathRelaxer(),new NextStepsAdjacencyMap(stepType),new MovePathMinMPMaxDistanceComparator(),game);  lpf.addFilter(new MovePathLengthFilter(maxMP));  lpf.addFilter(new MovePathLegalityFilter(game));  return lpf;}  }
class C{  @Override public void clear(){  map.clear();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:21.399 -0500",hash_original_method="DB7D0E34713769F576AB6489AD8FC572",hash_generated_method="3666D9FC7AFDAB95F34AC20D2B771CA7") public Chunk handleChunk(Chunk request){  if (false)   Log.v("ddm-heap","Handling " + name(request.type) + " chunk");  int type=request.type;  if (type == CHUNK_MPRS) {    return handleMPRS(request);  } else   if (type == CHUNK_MPRE) {    return handleMPRE(request);  } else   if (type == CHUNK_MPSS) {    return handleMPSS(request);  } else   if (type == CHUNK_MPSE) {    return handleMPSE(request);  } else   if (type == CHUNK_MPRQ) {    return handleMPRQ(request);  } else {    throw new RuntimeException("Unknown packet " + ChunkHandler.name(type));  }}  }
class C{  public static void translucentStatusBar(Activity activity,boolean hideStatusBarBackground){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {    StatusBarCompatLollipop.translucentStatusBar(activity,hideStatusBarBackground);  } else   if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {    StatusBarCompatKitKat.translucentStatusBar(activity);  }}  }
class C{  public String convertTimeEventTypeToString(EDataType eDataType,Object instanceValue){  return instanceValue == null ? null : instanceValue.toString();}  }
class C{  public final void testRemoveHelperTextColor(){  int helperTextColor1=Color.BLACK;  int helperTextColor2=Color.GRAY;  PasswordEditText passwordEditText=new PasswordEditText(getContext());  passwordEditText.addHelperTextColor(helperTextColor1);  passwordEditText.addHelperTextColor(helperTextColor2);  passwordEditText.removeHelperTextColor(helperTextColor1);  passwordEditText.removeHelperTextColor(helperTextColor1);  assertEquals(1,passwordEditText.getHelperTextColors().size());  assertEquals(helperTextColor2,(int)passwordEditText.getHelperTextColors().iterator().next());}  }
class C{  public ToStringBuilder append(String fieldName,short value){  style.append(buffer,fieldName,value);  return this;}  }
class C{  public static void testNullRef2Prim(){  for (  Wrapper from : Wrapper.values()) {    for (    Wrapper to : Wrapper.values()) {      if (from == Wrapper.VOID || to == Wrapper.VOID) {        continue;      }      for (      TestConversionMode mode : TestConversionMode.values()) {        testConversion(mode,from.wrapperType(),to.primitiveType(),null,to.zero(),false,null);      }    }  }}  }
class C{  private void checkUndefendedTransports(final IDelegateBridge bridge,final PlayerID player){  if (player.equals(m_attacker) && (!getAttackerRetreatTerritories().isEmpty() || Match.someMatch(m_attackingUnits,Matches.UnitIsAir))) {    return;  }  final CompositeMatch<Unit> matchAllied=new CompositeMatchAnd<>();  matchAllied.add(Matches.UnitIsTransport);  matchAllied.add(Matches.UnitIsNotCombatTransport);  matchAllied.add(Matches.isUnitAllied(player,m_data));  matchAllied.add(Matches.UnitIsSea);  final List<Unit> alliedTransports=Match.getMatches(m_battleSite.getUnits().getUnits(),matchAllied);  if (alliedTransports.isEmpty()) {    return;  }  final CompositeMatch<Unit> alliedUnitsMatch=new CompositeMatchAnd<>();  alliedUnitsMatch.add(Matches.isUnitAllied(player,m_data));  alliedUnitsMatch.add(Matches.UnitIsNotLand);  alliedUnitsMatch.add(new InverseMatch<>(Matches.unitIsSubmerged(m_data)));  final Collection<Unit> alliedUnits=Match.getMatches(m_battleSite.getUnits().getUnits(),alliedUnitsMatch);  if (alliedTransports.size() == alliedUnits.size()) {    final CompositeMatch<Unit> enemyUnitsMatch=new CompositeMatchAnd<>();    enemyUnitsMatch.add(Matches.UnitIsNotLand);    enemyUnitsMatch.add(Matches.unitIsNotSubmerged(m_data));    enemyUnitsMatch.add(Matches.unitCanAttack(player));    final Collection<Unit> enemyUnits=Match.getMatches(m_battleSite.getUnits().getUnits(),enemyUnitsMatch);    if (enemyUnits.size() > 0) {      final Change change=ChangeFactory.markNoMovementChange(Match.getMatches(enemyUnits,Matches.UnitIsSea));      bridge.addChange(change);      final boolean defender=player.equals(m_defender);      remove(alliedTransports,bridge,m_battleSite,false,defender);    }  }}  }
class C{  private void writeSingleton(XMLStreamWriter writer) throws XMLStreamException, ODataRenderException {  List<Singleton> singletons=getEntityContainer().getSingletons();  LOG.debug("Number of singletons to be written in service document are {}",singletons.size());  for (  Singleton singleton : singletons) {    writeElement(writer,METADATA,SERVICE_SINGLETON,ODATA_METADATA_NS,singleton.getName(),singleton.getName());  }}  }
class C{  @SafeVarargs public final FastItemAdapter<Item> add(Item... items){  mItemAdapter.add(items);  return this;}  }
class C{  public void removeMatchingCoupling(Coupling<?> toRemove){  for (  Coupling<?> coupling : getCouplings()) {    boolean consumersMatch=attributesMatch(coupling.getConsumer(),toRemove.getConsumer());    boolean producersMatch=attributesMatch(coupling.getProducer(),toRemove.getProducer());    if (consumersMatch && producersMatch) {      removeCoupling(coupling);    }  }}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case ExpressionsPackage.LOGICAL_NOT_EXPRESSION__OPERAND:    setOperand((Expression)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public static String[] readAllStrings(){  String[] tokens=WHITESPACE_PATTERN.split(readAll());  if (tokens.length == 0 || tokens[0].length() > 0)   return tokens;  String[] decapitokens=new String[tokens.length - 1];  for (int i=0; i < tokens.length - 1; i++)   decapitokens[i]=tokens[i + 1];  return decapitokens;}  }
class C{  @Override public void commit(Xid xid,boolean onePhase) throws XAException {  if (isDebugEnabled()) {    debugCode("commit(" + JdbcXid.toString(xid) + ", "+ onePhase+ ");");  }  try {    if (onePhase) {      physicalConn.commit();    } else {      try (Statement stat=physicalConn.createStatement()){        stat.execute("COMMIT TRANSACTION " + JdbcXid.toString(xid));        prepared=false;      }     }    physicalConn.setAutoCommit(true);  } catch (  SQLException e) {    throw convertException(e);  }  currentTransaction=null;}  }
class C{  private void ensureBuilders(){  if (this.builders == null) {    this.builders=new ArrayList<SingleFieldBuilder<MType,BType,IType>>(messages.size());    for (int i=0; i < messages.size(); i++) {      builders.add(null);    }  }}  }
class C{  public static int recompileWithOpt(NormalMethod method){  if (VM.BuildForOptCompiler) {    CompilationPlan plan=new CompilationPlan(method,(OptimizationPlanElement[])optimizationPlan,null,(OptOptions)options);    return recompileWithOpt(plan);  } else {    if (VM.VerifyAssertions)     VM._assert(VM.NOT_REACHED);    return -1;  }}  }
class C{  public synchronized void addRemoteTcpServer(RemoteTcpServer server){  Queue<RemoteTcpServer> queue=remoteCurrentServers.get(server.getAddress());  if (queue == null) {    queue=new ConcurrentLinkedQueue<>();    remoteCurrentServers.put(server.getAddress(),queue);  }  queue.add(server);}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  @Nullable public Peer connectToLocalHost(){  lock.lock();  try {    final PeerAddress localhost=PeerAddress.localhost(params);    backoffMap.put(localhost,new ExponentialBackoff(peerBackoffParams));    return connectTo(localhost,true,vConnectTimeoutMillis);  }  finally {    lock.unlock();  }}  }
class C{  public boolean isPlaying(){  return mediaPlayerImpl.isPlaying();}  }
class C{  public static <T>void removeDuplicates(List<T> inputList){  if (inputList != null && inputList.size() > 1) {    List<T> listOfUniqueElements=new ArrayList<>(new LinkedHashSet<T>(inputList));    if (listOfUniqueElements.size() < inputList.size()) {      inputList.clear();      inputList.addAll(listOfUniqueElements);    }  }}  }
class C{  public void deleteEntity(OdorWorldEntity entity){  if (entityList.contains(entity)) {    entityList.remove(entity);    for (    Sensor sensor : entity.getSensors()) {      fireSensorRemoved(sensor);    }    for (    Effector effector : entity.getEffectors()) {      fireEffectorRemoved(effector);    }    recomputeMaxStimulusLength();    fireEntityRemoved(entity);  }}  }
class C{  public static void logExecution(com.ib.client.Execution execution){  _log.debug("execDetails OrderId: " + execution.m_orderId + " ClientId: "+ execution.m_clientId+ " PermId: "+ execution.m_permId+ " ExecId: "+ execution.m_execId+ " Time: "+ execution.m_time+ " CumQty: "+ execution.m_cumQty);}  }
class C{  protected int defineFont1(Movie movie,SWFTagTypes tagwriter) throws IOException {  int id=getNextId(movie);  SWFVectors vecs=tagwriter.tagDefineFont(id,glyphList.size());  for (Iterator it=glyphList.iterator(); it.hasNext(); ) {    FontDefinition.Glyph g=(FontDefinition.Glyph)it.next();    Shape s=g.getShape();    s.writeGlyph(vecs);  }  if (fontDef.getName() != null) {    int flags=0;    if (fontDef.isUnicode()) {      flags|=SWFConstants.FONT_UNICODE;    }    if (fontDef.isShiftJIS()) {      flags|=SWFConstants.FONT_SHIFTJIS;    }    if (fontDef.isAnsi()) {      flags|=SWFConstants.FONT_ANSI;    }    if (fontDef.isItalic()) {      flags|=SWFConstants.FONT_ITALIC;    }    if (fontDef.isBold()) {      flags|=SWFConstants.FONT_BOLD;    }    tagwriter.tagDefineFontInfo(id,fontDef.getName(),flags,getCodes());  }  return id;}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == TypeProvidingElement.class) {switch (baseOperationID) {case N4JSPackage.TYPE_PROVIDING_ELEMENT___GET_DECLARED_TYPE_REF:      return N4JSPackage.FORMAL_PARAMETER___GET_DECLARED_TYPE_REF;default :    return -1;}}if (baseClass == TypedElement.class) {switch (baseOperationID) {default :  return -1;}}if (baseClass == TypableElement.class) {switch (baseOperationID) {default :return -1;}}if (baseClass == IdentifiableElement.class) {switch (baseOperationID) {case TypesPackage.IDENTIFIABLE_ELEMENT___GET_CONTAINING_MODULE:return N4JSPackage.FORMAL_PARAMETER___GET_CONTAINING_MODULE;default :return -1;}}if (baseClass == NamedElement.class) {switch (baseOperationID) {case N4JSPackage.NAMED_ELEMENT___GET_NAME:return N4JSPackage.FORMAL_PARAMETER___GET_NAME;default :return -1;}}if (baseClass == Variable.class) {switch (baseOperationID) {case N4JSPackage.VARIABLE___IS_CONST:return N4JSPackage.FORMAL_PARAMETER___IS_CONST;default :return -1;}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  public static long findRevision(final List<String> output,final Pattern pattern){  long revision=-1;  for (  final String line : output) {    final Matcher matcher=pattern.matcher(line);    if (matcher.find()) {      revision=Long.parseLong(matcher.group(1));      break;    }  }  return revision;}  }
class C{  public int encode(byte[] data,int off,int length,OutputStream out) throws IOException {  int modulus=length % 3;  int dataLength=(length - modulus);  int a1;  int a2;  int a3;  for (int i=off; i < (off + dataLength); i+=3) {    a1=data[i] & 0xff;    a2=data[i + 1] & 0xff;    a3=data[i + 2] & 0xff;    out.write(encodingTable[(a1 >>> 2) & 0x3f]);    out.write(encodingTable[((a1 << 4) | (a2 >>> 4)) & 0x3f]);    out.write(encodingTable[((a2 << 2) | (a3 >>> 6)) & 0x3f]);    out.write(encodingTable[a3 & 0x3f]);  }  int b1;  int b2;  int b3;  int d1;  int d2;switch (modulus) {case 0:    break;case 1:  d1=data[off + dataLength] & 0xff;b1=(d1 >>> 2) & 0x3f;b2=(d1 << 4) & 0x3f;out.write(encodingTable[b1]);out.write(encodingTable[b2]);out.write(padding);out.write(padding);break;case 2:d1=data[off + dataLength] & 0xff;d2=data[off + dataLength + 1] & 0xff;b1=(d1 >>> 2) & 0x3f;b2=((d1 << 4) | (d2 >>> 4)) & 0x3f;b3=(d2 << 2) & 0x3f;out.write(encodingTable[b1]);out.write(encodingTable[b2]);out.write(encodingTable[b3]);out.write(padding);break;}return ((dataLength / 3) * 4) + ((modulus == 0) ? 0 : 4);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:59.595 -0500",hash_original_method="968792542D44AC477F2A3D6E8EC18199",hash_generated_method="582ED73B9C814A91D150B866160080F7") @Deprecated public static Uri addToGroup(ContentResolver resolver,long personId,long groupId){  ContentValues values=new ContentValues();  values.put(GroupMembership.PERSON_ID,personId);  values.put(GroupMembership.GROUP_ID,groupId);  return resolver.insert(GroupMembership.CONTENT_URI,values);}  }
class C{  public static boolean canShow(){  return canShowNativeDialog() || canShowWebFallback();}  }
class C{  public BlackVarianceTermStructure(final int settlementDays,final Calendar cal,final BusinessDayConvention bdc){  this(settlementDays,cal,bdc,new DayCounter());}  }
class C{  public ByteString queryId(PTQuery query){  if (installedQueries.containsKey(query)) {    return installedQueries.get(query).getQueryId();  }  return null;}  }
class C{  public ToStringBuilder append(final String fieldName,final float value){  style.append(buffer,fieldName,value);  return this;}  }
class C{  public Builder removeUnicodeLocaleAttribute(String attribute){  try {    localeBuilder.removeUnicodeLocaleAttribute(attribute);  } catch (  LocaleSyntaxException e) {    throw new IllformedLocaleException(e.getMessage(),e.getErrorIndex());  }  return this;}  }
class C{  public void insertInOrder(int value){  for (int i=0; i < m_firstFree; i++) {    if (value < m_map[i]) {      insertElementAt(value,i);      return;    }  }  addElement(value);}  }
class C{  public final void renameClass(Map classnames){  String jvmNewThisName=(String)classnames.get(Descriptor.toJvmName(thisclassname));  if (jvmNewThisName != null)   thisclassname=Descriptor.toJavaName(jvmNewThisName);  constPool.renameClass(classnames);  AttributeInfo.renameClass(attributes,classnames);  ArrayList list=methods;  int n=list.size();  for (int i=0; i < n; ++i) {    MethodInfo minfo=(MethodInfo)list.get(i);    String desc=minfo.getDescriptor();    minfo.setDescriptor(Descriptor.rename(desc,classnames));    AttributeInfo.renameClass(minfo.getAttributes(),classnames);  }  list=fields;  n=list.size();  for (int i=0; i < n; ++i) {    FieldInfo finfo=(FieldInfo)list.get(i);    String desc=finfo.getDescriptor();    finfo.setDescriptor(Descriptor.rename(desc,classnames));    AttributeInfo.renameClass(finfo.getAttributes(),classnames);  }}  }
class C{  public void accept(final MethodVisitor mv){  mv.visitTryCatchBlock(start.getLabel(),end.getLabel(),handler == null ? null : handler.getLabel(),type);  int n=visibleTypeAnnotations == null ? 0 : visibleTypeAnnotations.size();  for (int i=0; i < n; ++i) {    TypeAnnotationNode an=visibleTypeAnnotations.get(i);    an.accept(mv.visitTryCatchAnnotation(an.typeRef,an.typePath,an.desc,true));  }  n=invisibleTypeAnnotations == null ? 0 : invisibleTypeAnnotations.size();  for (int i=0; i < n; ++i) {    TypeAnnotationNode an=invisibleTypeAnnotations.get(i);    an.accept(mv.visitTryCatchAnnotation(an.typeRef,an.typePath,an.desc,false));  }}  }
class C{  private void createGui(){  setWindowIcons();  actionListener=new MyActionListener();  debugWindow=new DebugWindow(new DebugCheckboxListener());  errorMessage=new ErrorMessage(this,linkLabelListener);  connectionDialog=new ConnectionDialog(this);  GuiUtil.installEscapeCloseOperation(connectionDialog);  tokenDialog=new TokenDialog(this);  tokenGetDialog=new TokenGetDialog(this);  userInfoDialog=new UserInfo(this,contextMenuListener);  GuiUtil.installEscapeCloseOperation(userInfoDialog);  aboutDialog=new About();  setHelpWindowIcons();  channelInfoDialog=new ChannelInfoDialog(this);  channelInfoDialog.addContextMenuListener(contextMenuListener);  adminDialog=new AdminDialog(this);  favoritesDialog=new FavoritesDialog(this,contextMenuListener);  GuiUtil.installEscapeCloseOperation(favoritesDialog);  joinDialog=new JoinDialog(this);  GuiUtil.installEscapeCloseOperation(joinDialog);  liveStreamsDialog=new LiveStreamsDialog(contextMenuListener);  setLiveStreamsWindowIcons();  EmoteContextMenu.setEmoteManager(emoticons);  emotesDialog=new EmotesDialog(this,emoticons,this,contextMenuListener);  GuiUtil.installEscapeCloseOperation(emotesDialog);  followerDialog=new FollowersDialog(FollowersDialog.Type.FOLLOWERS,this,client.api,contextMenuListener);  subscribersDialog=new FollowersDialog(FollowersDialog.Type.SUBSCRIBERS,this,client.api,contextMenuListener);  trayIcon=new TrayIconManager(createImage("app_16.png"));  trayIcon.addActionListener(new TrayMenuListener());  notificationManager=new NotificationManager<>(this);  notificationManager.setNotificationActionListener(new MyNotificationActionListener());  styleManager=new StyleManager(client.settings);  highlightedMessages=new HighlightedMessages(this,styleManager,"Highlighted Messages","Highlighted",contextMenuListener);  ignoredMessages=new HighlightedMessages(this,styleManager,"Ignored Messages","Ignored",contextMenuListener);  channels=new Channels(this,styleManager,contextMenuListener);  channels.getComponent().setPreferredSize(new Dimension(600,300));  add(channels.getComponent(),BorderLayout.CENTER);  channels.setChangeListener(new ChannelChangeListener());  addressbookDialog=new AddressbookDialog(this,client.addressbook);  srl=new SRL(this,client.speedrunsLive,contextMenuListener);  livestreamerDialog=new LivestreamerDialog(this,linkLabelListener,client.settings);  updateMessage=new UpdateMessage(this);  newsDialog=new NewsDialog(this,client.settings);  client.settings.addSettingChangeListener(new MySettingChangeListener());  client.settings.addSettingsListener(new MySettingsListener());  streamChat=new StreamChat(this,styleManager,contextMenuListener,client.settings.getBoolean("streamChatBottom"));  moderationLog=new ModerationLog(this);  chatRulesDialog=new ChatRulesDialog(this);  channels.setOnceOffEditListener(chatRulesDialog);  getSettingsDialog();  MainMenuListener menuListener=new MainMenuListener();  menu=new MainMenu(menuListener,menuListener,linkLabelListener);  setJMenuBar(menu);  state.update();  addListeners();  pack();  setLocationByPlatform(true);  client.api.requestEmoticons(false);  client.twitchemotes.requestEmotesets(false);  if (client.settings.getBoolean("bttvEmotes")) {    client.bttvEmotes.requestEmotes("$global$",false);  }  windowStateManager=new WindowStateManager(this,client.settings);  windowStateManager.addWindow(this,"main",true,true);  windowStateManager.setPrimaryWindow(this);  windowStateManager.addWindow(highlightedMessages,"highlights",true,true);  windowStateManager.addWindow(ignoredMessages,"ignoredMessages",true,true);  windowStateManager.addWindow(channelInfoDialog,"channelInfo",true,true);  windowStateManager.addWindow(liveStreamsDialog,"liveStreams",true,true);  windowStateManager.addWindow(adminDialog,"admin",true,true);  windowStateManager.addWindow(addressbookDialog,"addressbook",true,true);  windowStateManager.addWindow(emotesDialog,"emotes",true,true);  windowStateManager.addWindow(followerDialog,"followers",true,true);  windowStateManager.addWindow(subscribersDialog,"subscribers",true,true);  windowStateManager.addWindow(moderationLog,"moderationLog",true,true);  windowStateManager.addWindow(streamChat,"streamChat",true,true);  windowStateManager.addWindow(userInfoDialog,"userInfo",true,false);  guiCreated=true;}  }
class C{  public int exportToFile(List<MHRPaySelectionCheck> checks,File file,StringBuffer err){  if (checks == null || checks.size() == 0)   return 0;  if (file.isDirectory()) {    err.append("No se puede escribir, el archivo seleccionado es un directorio - " + file.getAbsolutePath());    s_log.log(Level.SEVERE,err.toString());    return -1;  }  try {    if (file.exists())     file.delete();  } catch (  Exception e) {    s_log.log(Level.WARNING,"Could not delete - " + file.getAbsolutePath(),e);  }  char x='"';  int noLines=0;  StringBuffer line=null;  try {    FileWriter fw=new FileWriter(file);    line=new StringBuffer();    line.append(x).append("Value").append(x).append(",").append(x).append("Name").append(x).append(",").append(x).append("Contact").append(x).append(",").append(x).append("Addr1").append(x).append(",").append(x).append("Addr2").append(x).append(",").append(x).append("City").append(x).append(",").append(x).append("State").append(x).append(",").append(x).append("ZIP").append(x).append(",").append(x).append("Country").append(x).append(",").append(x).append("ReferenceNo").append(x).append(",").append(x).append("DocumentNo").append(x).append(",").append(x).append("PayDate").append(x).append(",").append(x).append("Currency").append(x).append(",").append(x).append("PayAmount").append(x).append(",").append(x).append("Comment").append(x).append(Env.NL);    fw.write(line.toString());    noLines++;    for (    MHRPaySelectionCheck mpp : checks) {      if (mpp == null)       continue;      String bp[]=getBPartnerInfo(mpp.getC_BPartner_ID());      StringBuffer comment=new StringBuffer();      List<MHRPaySelectionLine> psls=mpp.getPaySelectionLines(false);      for (      MHRPaySelectionLine psl : psls) {        comment.append(psl.getHR_Movement().getHR_Concept().getName());      }      line=new StringBuffer();      line.append(x).append(bp[BP_VALUE]).append(x).append(",").append(x).append(bp[BP_NAME]).append(x).append(",").append(x).append(bp[BP_CONTACT]).append(x).append(",").append(x).append(bp[BP_ADDR1]).append(x).append(",").append(x).append(bp[BP_ADDR2]).append(x).append(",").append(x).append(bp[BP_CITY]).append(x).append(",").append(x).append(bp[BP_REGION]).append(x).append(",").append(x).append(bp[BP_POSTAL]).append(x).append(",").append(x).append(bp[BP_COUNTRY]).append(x).append(",").append(x).append(bp[BP_REFNO]).append(x).append(",").append(x).append(mpp.getDocumentNo()).append(x).append(",").append(mpp.getParent().getPayDate()).append(",").append(x).append(MCurrency.getISO_Code(Env.getCtx(),mpp.getParent().getC_Currency_ID())).append(x).append(",").append(mpp.getPayAmt()).append(",").append(x).append(comment.toString()).append(x).append(Env.NL);      fw.write(line.toString());      noLines++;    }    fw.flush();    fw.close();  } catch (  Exception e) {    err.append(e.toString());    s_log.log(Level.SEVERE,"",e);    return -1;  }  return noLines;}  }
class C{  @ObjectiveCName("isShowNotificationsText") public boolean isShowNotificationsText(){  return modules.getSettingsModule().isShowNotificationsText();}  }
class C{  @Override public Thread newThread(final Runnable r){  return newThread(GridTestUtils.makeCallable(r,null));}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.N4_GETTER_DECLARATION__DECLARED_MODIFIERS:    getDeclaredModifiers().clear();  getDeclaredModifiers().addAll((Collection<? extends N4Modifier>)newValue);return;case N4JSPackage.N4_GETTER_DECLARATION__OWNER:setOwner((N4ClassifierDefinition)newValue);return;case N4JSPackage.N4_GETTER_DECLARATION__ANNOTATION_LIST:setAnnotationList((N4MemberAnnotationList)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public synchronized void clear(){  mSeries.clear();}  }
class C{  public static void error(int windowNo,String adMessage){  error(windowNo,null,adMessage,null);}  }
class C{  public static void saveObject(String cacheName,Object obj){  SharedPreferences.Editor e=context.getSharedPreferences(APP_ID,Context.MODE_PRIVATE).edit();  String json=gson.toJson(obj);  e.putString(cacheName,json);  e.apply();}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String[] pointFiles;  String outputHeader=null;  int row, col;  int nrows, ncols;  double x, y, z;  int i;  int progress=0;  double weight=1;  int numPointsToUse=8;  int numPoints=0;  int lineNum=0;  int nlines=0;  double maxDist=Double.POSITIVE_INFINITY;  double minX=Double.POSITIVE_INFINITY;  double maxX=Double.NEGATIVE_INFINITY;  double minY=Double.POSITIVE_INFINITY;  double maxY=Double.NEGATIVE_INFINITY;  double north, south, east, west;  double resolution=1;  String delimiter=" ";  boolean firstLineHeader=false;  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  List<KdTree.Entry<Double>> results;  double sumWeights;  double noData=-32768;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  String attributeName=args[1];  firstLineHeader=Boolean.parseBoolean(args[2]);  outputHeader=args[3];  resolution=Double.parseDouble(args[4]);  weight=Double.parseDouble(args[5]);  if (!args[6].equalsIgnoreCase("not specified")) {    maxDist=Double.parseDouble(args[6]);  }  if (maxDist == Double.POSITIVE_INFINITY) {    showFeedback("Unspecified maximum distance.");    return;  }  if ((inputFilesString.length() <= 0) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    pointFiles=inputFilesString.split(";");    int numPointFiles=pointFiles.length;    if (maxDist < Double.POSITIVE_INFINITY) {      maxDist=maxDist * maxDist;    }    updateProgress("Counting the number of points:",0);    numPoints=0;    for (i=0; i < numPointFiles; i++) {      if (pointFiles[i].endsWith(".shp")) {        ShapeFile inputShape=new ShapeFile(pointFiles[i]);        for (int r=0; r < inputShape.getNumberOfRecords(); r++) {          double[][] points=inputShape.getRecord(r).getGeometry().getPoints();          numPoints+=points.length;        }      } else {        nlines=countLinesInFile(pointFiles[i]);        if (firstLineHeader) {          numPoints+=nlines - 1;        } else {          numPoints+=nlines;        }      }    }    if (numPoints < numPointsToUse) {      numPointsToUse=numPoints;    }    KdTree<Double> pointsTree=new KdTree.SqrEuclid<>(2,new Integer(numPoints));    nlines=0;    for (i=0; i < numPointFiles; i++) {      if (pointFiles[i].endsWith(".shp")) {        double[][] vertices;        ShapeFile inputShape=new ShapeFile(pointFiles[i]);        ShapeType shapeType=inputShape.getShapeType();        String[] attributeFieldNames=inputShape.getAttributeTableFields();        int fieldNum=-1;        for (int q=0; q < attributeFieldNames.length; q++) {          String str=attributeFieldNames[q];          if (str.toLowerCase().trim().equals(attributeName.toLowerCase().trim())) {            fieldNum=q;            break;          }        }        boolean useZ=false;        boolean useM=false;        if (fieldNum < 0) {          if (attributeName.toLowerCase().trim().equals("z") && shapeType.getDimension() == ShapeTypeDimension.Z) {            useZ=true;          } else           if (attributeName.toLowerCase().trim().equals("m") && shapeType.getDimension() == ShapeTypeDimension.M) {            useM=true;          }        }        for (        ShapeFileRecord record : inputShape.records) {          int recNumber=record.getRecordNumber();          double[] zArray=null;          double[] mArray=null;switch (shapeType) {case POINT:            whitebox.geospatialfiles.shapefile.Point recPoint=(whitebox.geospatialfiles.shapefile.Point)(record.getGeometry());          vertices=recPoint.getPoints();        break;case POINTZ:      PointZ recPointZ=(PointZ)record.getGeometry();    vertices=recPointZ.getPoints();  zArray=new double[]{recPointZ.getZ()};break;case POINTM:PointM recPointM=(PointM)record.getGeometry();vertices=recPointM.getPoints();mArray=new double[]{recPointM.getM()};break;case MULTIPOINT:MultiPoint recMultiPoint=(MultiPoint)record.getGeometry();vertices=recMultiPoint.getPoints();break;case MULTIPOINTZ:MultiPointZ recMultiPointZ=(MultiPointZ)record.getGeometry();vertices=recMultiPointZ.getPoints();zArray=recMultiPointZ.getzArray();break;case MULTIPOINTM:MultiPointM recMultiPointM=(MultiPointM)record.getGeometry();vertices=recMultiPointM.getPoints();mArray=recMultiPointM.getmArray();break;default :showFeedback("Invalid shape type for interpolation.");return;}if (!useZ && !useM) {Object[] rowData=inputShape.getAttributeTable().getRecord(recNumber - 1);z=(double)rowData[fieldNum];for (int p=0; p < vertices.length; p++) {x=vertices[p][0];y=vertices[p][1];double[] entry={y,x};pointsTree.addPoint(entry,z);if (x < minX) {minX=x;}if (x > maxX) {maxX=x;}if (y < minY) {minY=y;}if (y > maxY) {maxY=y;}}} else if (useZ && zArray != null) {for (int p=0; p < vertices.length; p++) {x=vertices[p][0];y=vertices[p][1];double[] entry={y,x};pointsTree.addPoint(entry,zArray[p]);if (x < minX) {minX=x;}if (x > maxX) {maxX=x;}if (y < minY) {minY=y;}if (y > maxY) {maxY=y;}}} else if (useM && mArray != null) {for (int p=0; p < vertices.length; p++) {x=vertices[p][0];y=vertices[p][1];double[] entry={y,x};pointsTree.addPoint(entry,mArray[p]);if (x < minX) {minX=x;}if (x > maxX) {maxX=x;}if (y < minY) {minY=y;}if (y > maxY) {maxY=y;}}}}} else {DataInputStream in=null;BufferedReader br=null;try {FileInputStream fstream=new FileInputStream(pointFiles[i]);in=new DataInputStream(fstream);br=new BufferedReader(new InputStreamReader(in));String line;String[] str;lineNum=1;while ((line=br.readLine()) != null) {str=line.split(delimiter);if (str.length <= 1) {delimiter="\t";str=line.split(delimiter);if (str.length <= 1) {delimiter=" ";str=line.split(delimiter);if (str.length <= 1) {delimiter=",";str=line.split(delimiter);}}}if ((lineNum > 1 || !firstLineHeader) && (str.length >= 3)) {x=Double.parseDouble(str[0]);y=Double.parseDouble(str[1]);z=Double.parseDouble(str[2]);double[] entry={y,x};pointsTree.addPoint(entry,z);if (x < minX) {minX=x;}if (x > maxX) {maxX=x;}if (y < minY) {minY=y;}if (y > maxY) {maxY=y;}}lineNum++;nlines++;progress=(int)(100d * nlines / numPoints);updateProgress("Reading point data:",progress);}in.close();br.close();} catch (java.io.IOException e) {System.err.println("Error: " + e.getMessage());} finally {try {if (in != null || br != null) {in.close();br.close();}} catch (java.io.IOException ex) {}}}}west=minX - 0.5 * resolution;north=maxY + 0.5 * resolution;nrows=(int)(Math.ceil((north - minY) / resolution));ncols=(int)(Math.ceil((maxX - west) / resolution));south=north - nrows * resolution;east=west + ncols * resolution;fw=new FileWriter(outputHeader,false);bw=new BufferedWriter(fw);out=new PrintWriter(bw,true);str1="Min:\t" + Double.toString(Integer.MAX_VALUE);out.println(str1);str1="Max:\t" + Double.toString(Integer.MIN_VALUE);out.println(str1);str1="North:\t" + Double.toString(north);out.println(str1);str1="South:\t" + Double.toString(south);out.println(str1);str1="East:\t" + Double.toString(east);out.println(str1);str1="West:\t" + Double.toString(west);out.println(str1);str1="Cols:\t" + Integer.toString(ncols);out.println(str1);str1="Rows:\t" + Integer.toString(nrows);out.println(str1);str1="Data Type:\t" + "float";out.println(str1);str1="Z Units:\t" + "not specified";out.println(str1);str1="XY Units:\t" + "not specified";out.println(str1);str1="Projection:\t" + "not specified";out.println(str1);str1="Data Scale:\tcontinuous";out.println(str1);str1="Preferred Palette:\t" + "spectrum.pal";out.println(str1);str1="NoData:\t" + noData;out.println(str1);if (java.nio.ByteOrder.nativeOrder() == java.nio.ByteOrder.LITTLE_ENDIAN) {str1="Byte Order:\t" + "LITTLE_ENDIAN";} else {str1="Byte Order:\t" + "BIG_ENDIAN";}out.println(str1);out.close();WhiteboxRaster image=new WhiteboxRaster(outputHeader,"rw");double northing, easting;double halfResolution=resolution / 2;double dist=0;for (row=0; row < nrows; row++) {for (col=0; col < ncols; col++) {easting=(col * resolution) + (west + halfResolution);northing=(north - halfResolution) - (row * resolution);double[] entry={northing,easting};results=pointsTree.neighborsWithinRange(entry,maxDist);sumWeights=0;for (i=0; i < results.size(); i++) {if ((results.get(i).distance > 0) && (results.get(i).distance < maxDist)) {dist=Math.pow(Math.sqrt(results.get(i).distance),weight);sumWeights+=1 / dist;} else if (results.get(i).distance == 0) {break;}}if (sumWeights > 0) {z=0;for (i=0; i < results.size(); i++) {if ((results.get(i).distance > 0) && (results.get(i).distance < maxDist)) {dist=1 / Math.pow(Math.sqrt(results.get(i).distance),weight);z+=(dist * results.get(i).value) / sumWeights;} else if (results.get(i).distance == 0) {z=results.get(i).value;break;}}image.setValue(row,col,z);} else {image.setValue(row,col,noData);}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * row / (nrows - 1));updateProgress("Interpolating point data:",progress);}image.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");image.addMetadataEntry("Created on " + new Date());image.close();returnData(outputHeader);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public IndicesAliasesRequestBuilder removeAlias(String[] indices,String... aliases){  request.removeAlias(indices,aliases);  return this;}  }
class C{  public HttpsURL(final char[] escaped) throws URIException, NullPointerException {  parseUriReference(new String(escaped),true);  checkValid();}  }
class C{  private void init(){  setTitle("New Hopfield Network");  hopPropertiesPanel=new HopfieldPropertiesPanel(networkPanel);  hopPropertiesPanel.fillFieldValues();  tabLogic.setLayout(new FlowLayout());  tabLogic.add(hopPropertiesPanel);  tabLayout.add(layoutPanel);  layoutPanel=new MainLayoutPanel(false,this);  tabbedPane.addTab("Logic",tabLogic);  tabbedPane.addTab("Layout",layoutPanel);  setContentPane(tabbedPane);  Action helpAction=new ShowHelpAction(hopPropertiesPanel.getHelpPath());  addButton(new JButton(helpAction));}  }
class C{  public void delete(){  this.deleted=true;  this.name=getId() + "_" + this.name;}  }
class C{  @Override public boolean isAuthorizationStale(String header){  HeaderParser p=new HeaderParser(header);  String s=p.findValue("stale");  if (s == null || !s.equals("true"))   return false;  String newNonce=p.findValue("nonce");  if (newNonce == null || "".equals(newNonce)) {    return false;  }  params.setNonce(newNonce);  return true;}  }
class C{  public static void logAndShowError(Activity activity,String tag,String message){  String errorMessage=getErrorMessage(message);  Log.e(tag,errorMessage);  showErrorInternal(activity,errorMessage);}  }
class C{  void fillInCreatedEntryKeys(HashSet ret){  Iterator<Entry<Object,TXEntryState>> it=this.entryMods.entrySet().iterator();  while (it.hasNext()) {    Entry<Object,TXEntryState> me=it.next();    TXEntryState txes=me.getValue();    if (txes.wasCreatedByTX()) {      ret.add(me.getKey());    }  }}  }
class C{  private void bumpVersionInfo(){  if (!m_source.isObjectExists("AD_System",m_source.getTables()))   return;  resetDBObjects(null);  m_counterUpd=new Integer(0);  m_totalUpd=new Integer(0);  s_logger.log(Level.CONFIG,"");  s_logger.log(Level.CONFIG,"bumpVersionInfo",m_direction);  String sourceVendor=m_source.getVendor();  String sourceCatalog=m_source.getCatalog();  String sourceSchema=m_source.getSchema();  String targetVendor=m_target.getVendor();  String targetCatalog=m_target.getCatalog();  String targetSchema=m_target.getSchema();  ArrayList<String> updateColumnNames=new ArrayList<String>();  ArrayList<String> whereColumnNames=new ArrayList<String>();  DBObject table=m_source.getObjectByName("AD_System",m_source.getTables());  Vector<Integer> v=new Vector<Integer>(table.getContents().keySet());  java.util.Collections.sort(v);  for (Iterator<Integer> columnIterator=v.iterator(); columnIterator.hasNext(); ) {    Integer key=columnIterator.next();    DBObject_Table_Column sequenceColumn=(DBObject_Table_Column)table.getContents().get(key);    String columnName=sequenceColumn.getName();    if (columnName.equalsIgnoreCase("Updated") || columnName.equalsIgnoreCase("UpdatedBy") || columnName.equalsIgnoreCase("Version")|| columnName.equalsIgnoreCase("ReleaseNo")) {      updateColumnNames.add(columnName);    }    if (columnName.equalsIgnoreCase("AD_System_ID") || columnName.equalsIgnoreCase("AD_Client_ID")) {      whereColumnNames.add(columnName);    }  }  Savepoint sp=m_target.setSavepoint("update version information");  PreparedStatementWrapper stmtUpdateVersion=m_target.setPreparedStatement(s_dbEngine.sql_updatePreparedStatement(targetVendor,targetCatalog,targetSchema,"AD_System",updateColumnNames,whereColumnNames));  Statement stmt=m_source.setStatement();  ResultSet rs=m_source.executeQuery(stmt,s_dbEngine.sqlAD_getAdempiereVersion(sourceVendor,sourceCatalog,sourceSchema));  while (m_source.getResultSetNext(rs)) {    for (int i=0; i < updateColumnNames.size(); i++) {      String columnName=updateColumnNames.get(i);      int parameterIndex=1 + i;      if (columnName.equalsIgnoreCase("Updated")) {        m_target.setPreparedStatementTimestamp(stmtUpdateVersion,parameterIndex,new java.sql.Timestamp(System.currentTimeMillis()));      } else       if (columnName.equalsIgnoreCase("UpdatedBy")) {        m_target.setPreparedStatementInt(stmtUpdateVersion,parameterIndex,m_source.getResultSetInt(rs,columnName));      } else       if (columnName.equalsIgnoreCase("Version") || columnName.equalsIgnoreCase("ReleaseNo")) {        m_target.setPreparedStatementString(stmtUpdateVersion,parameterIndex,m_source.getResultSetString(rs,columnName));      }    }    for (int i=0; i < whereColumnNames.size(); i++) {      String columnName=whereColumnNames.get(i);      int parameterIndex=updateColumnNames.size() + i + 1;      if (columnName.equalsIgnoreCase("AD_System_ID") || columnName.equalsIgnoreCase("AD_Client_ID")) {        m_target.setPreparedStatementInt(stmtUpdateVersion,parameterIndex,m_source.getResultSetInt(rs,columnName));      }    }    Integer sqlResult=m_target.executeUpdate(stmtUpdateVersion,false);    if (sqlResult != null) {      m_counterUpd=new Integer(m_counterUpd.intValue() + sqlResult.intValue());      m_totalUpd=new Integer(m_totalUpd.intValue() + sqlResult.intValue());    } else {      m_totalUpd=new Integer(m_totalUpd.intValue() + 1);    }  }  m_source.releaseResultSet(rs);  m_source.releaseStatement(stmt);  m_target.releasePreparedStatement(stmtUpdateVersion);  m_target.releaseSavepoint(sp);  logResults();}  }
class C{  public FontSizer(FontSizer source){  restore(source);}  }
class C{  private CViewSettingsGenerator(){}  }
class C{  public static String toHexString(long v){  return IntegralToString.longToHexString(v);}  }
class C{  public static String removeExtension(String filename){  return removeExtension(new File(filename)).getPath();}  }
class C{  public static boolean isCalledFrom(String className){  if (className == null || className.length() == 0)   return false;  return getCallerClass(1).indexOf(className) != -1;}  }
class C{  @NonNull public IconDrawable sizeDp(@NonNull Context context,@IntRange(from=0) int size){  return sizePx((int)TypedValue.applyDimension(COMPLEX_UNIT_DIP,size,context.getResources().getDisplayMetrics()));}  }
class C{  @CacheEvict(value={"customerService-customerByEmail"},allEntries=true) public void addAttribute(final Customer customer,final String attributeCode,final String attributeValue){  if (StringUtils.isNotBlank(attributeValue)) {    AttrValueCustomer attrVal=customer.getAttributeByCode(attributeCode);    if (attrVal != null) {      attrVal.setVal(attributeValue);    } else {      Attribute attr=attributeService.findByAttributeCode(attributeCode);      Hibernate.initialize(attr.getEtype());      if (attr != null) {        attrVal=getGenericDao().getEntityFactory().getByIface(AttrValueCustomer.class);        attrVal.setVal(attributeValue);        attrVal.setAttribute(attr);        attrVal.setCustomer(customer);        customer.getAttributes().add(attrVal);      }    }  }}  }
class C{  @Override public void onClick(View v){  if (v == mBuyButton) {    if (Consts.DEBUG) {      Log.d(TAG,"buying: " + mItemName + " sku: "+ mSku);    }    if (mManagedType != Managed.SUBSCRIPTION && !mBillingService.requestPurchase(mSku,Consts.ITEM_TYPE_INAPP,mPayloadContents)) {      showDialog(DIALOG_BILLING_NOT_SUPPORTED_ID);    } else     if (!mBillingService.requestPurchase(mSku,Consts.ITEM_TYPE_SUBSCRIPTION,mPayloadContents)) {      showDialog(DIALOG_SUBSCRIPTIONS_NOT_SUPPORTED_ID);    }  } else   if (v == mEditPayloadButton) {    showPayloadEditDialog();  } else   if (v == mEditSubscriptionsButton) {    editSubscriptions();  }}  }
class C{  public void onListItemMoveEnd(int fromParentIndex,int fromChildIndexOfParent,int toParentIndex){}  }
class C{  public static void clear(final SortedIntList<?>... lists){  for (  final SortedIntList<?> list : lists) {    if (list != null) {      list.clear();    }  }}  }
class C{  public static GdbClear parse(GdbOutput gdbOutput) throws GdbParseException {  String output=gdbOutput.getOutput();  Matcher matcher=GDB_CLEAR.matcher(output);  if (matcher.find()) {    return new GdbClear();  }  throw new GdbParseException(GdbClear.class,output);}  }
class C{  public InlineQueryResultAudio.InlineQueryResultAudioBuilder audioDuration(Integer audioDuration){  this.audio_duration=audioDuration;  return this;}  }
class C{  public DelayThawEffect(List<Integer> combo){  super(combo);}  }
class C{  public static boolean isValue(Declaration decl){  return JvmBackendUtil.isValue(decl);}  }
class C{  private void unSubscribeAction(Bundle data){  IMqttToken token=removeMqttToken(data);  simpleAction(token,data);}  }
class C{  public static ReportMailingJobConfiguration newInstance(final String name,final String value){  return new ReportMailingJobConfiguration(name,value);}  }
class C{  public SyncRequestMessage(SyncRequestMessage other){  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }  if (other.isSetStore()) {    this.store=new Store(other.store);  }  if (other.isSetKeys()) {    List<ByteBuffer> __this__keys=new ArrayList<ByteBuffer>();    for (    ByteBuffer other_element : other.keys) {      ByteBuffer temp_binary_element=org.apache.thrift.TBaseHelper.copyBinary(other_element);      ;      __this__keys.add(temp_binary_element);    }    this.keys=__this__keys;  }}  }
class C{  public static OutputAnalyzer executeProcess(ProcessBuilder pb) throws Throwable {  OutputAnalyzer output=null;  try {    output=new OutputAnalyzer(pb.start());    return output;  } catch (  Throwable t) {    System.out.println("executeProcess() failed: " + t);    throw t;  } finally {    System.out.println(getProcessLog(pb,output));  }}  }
class C{  public final RenderBuffer putFloat(float x){  unsafe.putFloat(curAddress,x);  curAddress+=SIZEOF_FLOAT;  return this;}  }
class C{  public static double computeTax(int status,double taxableIncome){  double tax, taxRate, incomeTaxed, incomeUntaxed, taxAt15Pecent, taxAt25Pecent, taxAt28Pecent, taxAt33Pecent, taxAt35Pecent;  taxAt15Pecent=taxAt25Pecent=taxAt28Pecent=taxAt33Pecent=taxAt35Pecent=incomeUntaxed=taxRate=tax=0.0;switch (status) {case 0:    taxAt15Pecent=8351;  taxAt25Pecent=33951;taxAt28Pecent=82251;taxAt33Pecent=171551;taxAt35Pecent=372951;break;case 1:taxAt15Pecent=16701;taxAt25Pecent=67901;taxAt28Pecent=137051;taxAt33Pecent=208851;taxAt35Pecent=372951;break;case 2:taxAt15Pecent=8351;taxAt25Pecent=33951;taxAt28Pecent=68526;taxAt33Pecent=104426;taxAt35Pecent=186476;break;case 3:taxAt15Pecent=11951;taxAt25Pecent=45501;taxAt28Pecent=117451;taxAt33Pecent=190201;taxAt35Pecent=372951;}while (taxableIncome >= taxAt15Pecent) {if (taxableIncome >= taxAt35Pecent) {taxRate=0.35;incomeUntaxed=taxAt35Pecent - 1;} else if (taxableIncome >= taxAt33Pecent) {taxRate=0.33;incomeUntaxed=taxAt33Pecent - 1;} else if (taxableIncome >= taxAt28Pecent) {taxRate=0.28;incomeUntaxed=taxAt28Pecent - 1;} else if (taxableIncome >= taxAt25Pecent) {taxRate=0.25;incomeUntaxed=taxAt25Pecent - 1;} else if (taxableIncome >= taxAt15Pecent) {taxRate=0.15;incomeUntaxed=taxAt15Pecent - 1;}tax+=(incomeTaxed=taxableIncome - incomeUntaxed) * taxRate;taxableIncome-=incomeTaxed;}return tax+=taxableIncome * 0.10;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public Builder withRetainStaleSnapshots(boolean retainStaleSnapshots){  storage.retainStaleSnapshots=retainStaleSnapshots;  return this;}  }
class C{  protected void init() throws ConnectException, SOAPException {  Capabilities capabilities=getDevices().getCapabilities();  if (capabilities == null) {    throw new ConnectException("Capabilities not reachable.");  }  String localDeviceUri=capabilities.getDevice().getXAddr();  if (localDeviceUri.startsWith("http://")) {    originalIp=localDeviceUri.replace("http://","");    originalIp=originalIp.substring(0,originalIp.indexOf('/'));  } else {    logger.error("Unknown/Not implemented local procotol!");  }  if (!originalIp.equals(HOST_IP)) {    isProxy=true;  }  if (capabilities.getMedia() != null && capabilities.getMedia().getXAddr() != null) {    serverMediaUri=replaceLocalIpWithProxyIp(capabilities.getMedia().getXAddr());  }  if (capabilities.getPTZ() != null && capabilities.getPTZ().getXAddr() != null) {    serverPtzUri=replaceLocalIpWithProxyIp(capabilities.getPTZ().getXAddr());  }  if (capabilities.getImaging() != null && capabilities.getImaging().getXAddr() != null) {    serverImagingUri=replaceLocalIpWithProxyIp(capabilities.getImaging().getXAddr());  }  if (capabilities.getMedia() != null && capabilities.getEvents().getXAddr() != null) {    serverEventsUri=replaceLocalIpWithProxyIp(capabilities.getEvents().getXAddr());  }}  }
class C{  public static NumericEntityEscaper between(final int codepointLow,final int codepointHigh){  return new NumericEntityEscaper(codepointLow,codepointHigh,true);}  }
class C{  public static boolean isNumber(String s){  try {    Integer.valueOf(s);    return true;  } catch (  Exception e) {    return false;  }}  }
class C{  private Observable<String> searchTermObservable(){  return WidgetObservable.text(view.getSearchView()).map(null).filter(null).debounce(500,TimeUnit.MILLISECONDS,AndroidSchedulers.mainThread()).doOnNext(null).doOnNext(null);}  }
class C{  public void installNativeTheme(){  hasNativeTheme();  if (nativeThemeAvailable) {    try {      InputStream is;      if (android.os.Build.VERSION.SDK_INT < 14 && !isTablet() || Display.getInstance().getProperty("and.hololight","false").equals("true")) {        is=getResourceAsStream(getClass(),"/androidTheme.res");      } else {        is=getResourceAsStream(getClass(),"/android_holo_light.res");      }      Resources r=Resources.open(is);      Hashtable h=r.getTheme(r.getThemeResourceNames()[0]);      h.put("@commandBehavior","Native");      UIManager.getInstance().setThemeProps(h);      is.close();      Display.getInstance().setCommandBehavior(Display.COMMAND_BEHAVIOR_NATIVE);    } catch (    IOException ex) {      ex.printStackTrace();    }  }}  }
class C{  @Override public Vertex parseState(TextStream stream,Map<String,Map<String,Vertex>> elements,boolean debug,Network network){  try {    List<String> comments=null;    String next=stream.nextWord();    if (next == null || !next.equalsIgnoreCase("state")) {      throw new SelfParseException("Expecting state not: " + next,stream);    }    Vertex state=parseElementName(Primitive.STATE,stream,elements,debug,network);    if (!elements.containsKey("root")) {      HashMap<String,Vertex> root=new HashMap<String,Vertex>(1);      root.put("root",state);      elements.put("root",root);    }    BinaryData byteCode=new BinaryData();    ByteArrayOutputStream byteStream=new ByteArrayOutputStream();    DataOutputStream dataStream=new DataOutputStream(byteStream);    dataStream.writeLong(network.createVertex(Primitive.SELF4).getId());    stream.skipWhitespace();    ensureNext('{',stream);    stream.skipWhitespace();    String element=stream.peekWord();    while (!("}".equals(element))) {      if (element == null) {        throw new SelfParseException("Unexpected end of state, missing '}'",stream);      }      element=element.toLowerCase();      if (element.equals(CASE)) {        parseCaseByteCode(stream,dataStream,elements,debug,network);      } else       if (element.equals(PATTERN)) {        parsePatternByteCode(stream,dataStream,elements,debug,network);      } else       if (element.equals(STATE)) {        parseState(stream,elements,debug,network);      } else       if (element.equals(VAR) || element.equals(VARIABLE)) {        parseVariable(stream,elements,debug,network);      } else       if (element.equals(ANSWER)) {        parseAnswerByteCode(stream,dataStream,elements,debug,network);      } else       if (element.equals(FUNCTION) || element.equals(EQUATION)) {        parseFunctionByteCode(stream,elements,debug,network);      } else       if (element.equals(DO)) {        parseDoByteCode(stream,dataStream,elements,debug,network);      } else       if (element.equals(GOTO)) {        parseGotoByteCode(stream,dataStream,elements,debug,network);      } else       if (element.equals(PUSH)) {        parsePushByteCode(stream,dataStream,elements,debug,network);      } else       if (element.equals(RETURN)) {        parseReturnByteCode(stream,dataStream,elements,debug,network);      } else       if (element.equals("/")) {        comments=getComments(stream);        if (comments.isEmpty()) {          throw new SelfParseException("Unknown element: " + element,stream);        }      } else {        throw new SelfParseException("Unknown element: " + element,stream);      }      element=stream.peekWord();    }    ensureNext('}',stream);    dataStream.writeLong(0l);    byteCode.setBytes(byteStream.toByteArray());    state.setData(byteCode);    network.addVertex(state);    return state;  } catch (  IOException exception) {    throw new SelfParseException("IO Error",stream,exception);  }}  }
class C{  public int index(String what){  if (what == null) {    for (int i=0; i < count; i++) {      if (data[i] == null) {        return i;      }    }  } else {    for (int i=0; i < count; i++) {      if (what.equals(data[i])) {        return i;      }    }  }  return -1;}  }
class C{  public void testConstructor_file() throws IOException {  File f=new File(resources,jarName);  Support_Resources.copyFile(resources,null,jarName);  assertTrue(new JarFile(f).getEntry(entryName).getName().equals(entryName));  assertTrue(new JarFile(f.getPath()).getEntry(entryName).getName().equals(entryName));}  }
class C{  public ObjectColumn(int nrows){  this(Object.class,nrows,nrows,null);}  }
class C{  public HessianDebugInputStream(InputStream is,OutputStream os){  this(is,new PrintWriter(os));}  }
class C{  public cleanGautengNetwork(){  log=Logger.getLogger(cleanGautengNetwork.class);}  }
class C{  public SearcherTaxonomyManager(IndexWriter writer,boolean applyAllDeletes,SearcherFactory searcherFactory,DirectoryTaxonomyWriter taxoWriter) throws IOException {  if (searcherFactory == null) {    searcherFactory=new SearcherFactory();  }  this.searcherFactory=searcherFactory;  this.taxoWriter=taxoWriter;  DirectoryTaxonomyReader taxoReader=new DirectoryTaxonomyReader(taxoWriter);  current=new SearcherAndTaxonomy(SearcherManager.getSearcher(searcherFactory,DirectoryReader.open(writer,applyAllDeletes,false),null),taxoReader);  this.taxoEpoch=taxoWriter.getTaxonomyEpoch();}  }
class C{  protected void initialize() throws IOException {  XTIFFField field;  int numEntries=readUnsignedShort(stream);  for (int i=0; i < numEntries; i++) {    try {      field=readField();    } catch (    ArrayIndexOutOfBoundsException ae) {      continue;    }    addField(field);  }}  }
class C{  private boolean requestSave(){  String msg="Save edited domain file?";  int n=JOptionPane.showConfirmDialog(frame,msg);  if (n == 0) {    saveDomain();    return true;  } else   if (n == 1) {    editorTab.rereadFile();    setSavedFlag(true);    return true;  }  return false;}  }
class C{  synchronized public Event end(){  if (complete) {    throw new IllegalStateException();  }  complete=true;  endTime=System.currentTimeMillis();  if (startTime == 0L) {    startTime=endTime;  }  try {    sendEvent();  } catch (  Throwable t) {    log.warn(t);  }  return this;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hasAttribute03.class,args);}  }
class C{  public void testNonexistent() throws Exception {  MockConfigurableSimilarity sim=getSimilarity("text_sim3",MockConfigurableSimilarity.class);  assertEquals("is there an echo?",sim.getPassthrough());}  }
class C{  public OldCTSBlockCipher(BlockCipher cipher){  if ((cipher instanceof OFBBlockCipher) || (cipher instanceof CFBBlockCipher)) {    throw new IllegalArgumentException("CTSBlockCipher can only accept ECB, or CBC ciphers");  }  this.cipher=cipher;  blockSize=cipher.getBlockSize();  buf=new byte[blockSize * 2];  bufOff=0;}  }
class C{  public LocatorState waitOnLocator(){  Throwable t=null;  try {    assert getLocator() != null : "The Locator must first be started with a call to start!";    debug("Waiting on Locator (%1$s) to stop...",getId());    getLocator().waitToStop();  } catch (  InterruptedException e) {    Thread.currentThread().interrupt();    t=e;    debug(e);  }catch (  RuntimeException e) {    t=e;    throw e;  }catch (  Throwable e) {    t=e;    throw e;  } finally {    failOnStart(t);  }  return new LocatorState(this,Status.STOPPED);}  }
class C{  public static boolean attemptInt(Object object,Offset offset,int oldValue,int newValue){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return false;}  }
class C{  public boolean removeAll(K key){  Integer value=refSet.remove(key);  return (value != null);}  }
class C{  public void testMissingMainActivity() throws Exception {  mEnabled.add(LauncherActivityDetector.ISSUE_MORE_THAN_ONE_LAUNCHER);  mEnabled.add(LauncherActivityDetector.ISSUE_MISSING_LAUNCHER);  mEnabled.add(LauncherActivityDetector.ISSUE_LAUNCHER_ACTIVITY_IN_LIBRARY);  String expected="AndroidManifest.xml:4: Warning: Expecting AndroidManifest.xml to have an " + "activity with a launcher intent. [MissingLauncher]\n" + "    <application>\n"+ "    ^\n"+ "0 errors, 1 warnings\n";  String result=lintProject(xml(FN_ANDROID_MANIFEST_XML,"" + "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n" + "<manifest package=\"com.example.android.custom-lint-rules\"\n"+ "          xmlns:android=\"http://schemas.android.com/apk/res/android\">\n"+ "    <application>\n"+ "        <activity android:name=\"com.example.android.custom-lint-rules"+ ".Activity1\">\n"+ "            <intent-filter>\n"+ "                <action android:name=\"android.intent.action.VIEW\" />\n"+ "\n"+ "                <category android:name=\"android.intent.category.HOME\" />\n"+ "                <category android:name=\"android.intent.category.LAUNCHER\" />\n"+ "                <category android:name=\"android.intent.category.DEFAULT\" />\n"+ "                <category android:name=\"android.intent.category.BROWSABLE\" "+ "/>\n"+ "            </intent-filter>\n"+ "        </activity>\n"+ "\n"+ "        <activity android:name=\"com.example.android.custom-lint-rules"+ ".Activity2\">\n"+ "        </activity>\n"+ "\n"+ "        <activity android:name=\"com.example.android.custom-lint-rules"+ ".Activity3\">\n"+ "            <intent-filter>\n"+ "                <action android:name=\"android.intent.action.SEND\"/>\n"+ "                <category android:name=\"android.intent.category.DEFAULT\"/>\n"+ "                <data android:mimeType=\"text/plain\"/>\n"+ "            </intent-filter>\n"+ "        </activity>\n"+ "    </application>\n"+ "</manifest>"));  assertEquals(expected,result);}  }
class C{  public static double incompleteBetaFraction1(double a,double b,double x){  double xk, pk, pkm1, pkm2, qk, qkm1, qkm2;  double k1, k2, k3, k4, k5, k6, k7, k8;  double r, t, ans, thresh;  int n;  k1=a;  k2=a + b;  k3=a;  k4=a + 1.0;  k5=1.0;  k6=b - 1.0;  k7=k4;  k8=a + 2.0;  pkm2=0.0;  qkm2=1.0;  pkm1=1.0;  qkm1=1.0;  ans=1.0;  r=1.0;  n=0;  thresh=3.0 * MACHEP;  do {    xk=-(x * k1 * k2) / (k3 * k4);    pk=pkm1 + pkm2 * xk;    qk=qkm1 + qkm2 * xk;    pkm2=pkm1;    pkm1=pk;    qkm2=qkm1;    qkm1=qk;    xk=(x * k5 * k6) / (k7 * k8);    pk=pkm1 + pkm2 * xk;    qk=qkm1 + qkm2 * xk;    pkm2=pkm1;    pkm1=pk;    qkm2=qkm1;    qkm1=qk;    if (qk != 0) {      r=pk / qk;    }    if (r != 0) {      t=Math.abs((ans - r) / r);      ans=r;    } else {      t=1.0;    }    if (t < thresh) {      return ans;    }    k1+=1.0;    k2+=1.0;    k3+=2.0;    k4+=2.0;    k5+=1.0;    k6-=1.0;    k7+=2.0;    k8+=2.0;    if ((Math.abs(qk) + Math.abs(pk)) > big) {      pkm2*=biginv;      pkm1*=biginv;      qkm2*=biginv;      qkm1*=biginv;    }    if ((Math.abs(qk) < biginv) || (Math.abs(pk) < biginv)) {      pkm2*=big;      pkm1*=big;      qkm2*=big;      qkm1*=big;    }  } while (++n < 300);  return ans;}  }
class C{  public InputContactMessageContent.InputContactMessageContentBuilder lastName(String lastName){  this.last_name=lastName;  return this;}  }
class C{  @Override public String globalInfo(){  return "Classifier Chains. " + "For more information see:\n" + getTechnicalInformation().toString();}  }
class C{  private void checkSerialVersionUID(JCClassDecl tree,ClassSymbol c){  Scope.Entry e=c.members().lookup(names.serialVersionUID);  while (e.scope != null && e.sym.kind != VAR)   e=e.next();  if (e.scope == null) {    log.warning(LintCategory.SERIAL,tree.pos(),"missing.SVUID",c);    return;  }  VarSymbol svuid=(VarSymbol)e.sym;  if ((svuid.flags() & (STATIC | FINAL)) != (STATIC | FINAL))   log.warning(LintCategory.SERIAL,TreeInfo.diagnosticPositionFor(svuid,tree),"improper.SVUID",c); else   if (!svuid.type.hasTag(LONG))   log.warning(LintCategory.SERIAL,TreeInfo.diagnosticPositionFor(svuid,tree),"long.SVUID",c); else   if (svuid.getConstValue() == null)   log.warning(LintCategory.SERIAL,TreeInfo.diagnosticPositionFor(svuid,tree),"constant.SVUID",c);}  }
class C{  @Override protected boolean isAllowed(final RPEntity user){  if (!(user instanceof Player)) {    return false;  }  Player player=(Player)user;  if (!player.hasQuest(questslot)) {    return false;  }  if (requiredState != null) {    return (player.isQuestInState(questslot,0,requiredState));  }  return true;}  }
class C{  public static char[] toCharArray(Short[] array){  char[] result=new char[array.length];  for (int i=0; i < array.length; i++) {    result[i]=(char)array[i].shortValue();  }  return result;}  }
class C{  public void offlineDeferred(TungstenProperties params) throws Exception {  try {    if (params.get(OpenReplicatorParams.OFFLINE_TRANSACTIONAL) != null) {      logger.info("Initiating clean shutdown at next transaction");      pipeline.shutdown(false);      pipeline.getContext().getEventDispatcher().put(new GoOfflineEvent());    } else     if (params.get(OpenReplicatorParams.OFFLINE_AT_SEQNO) != null) {      long seqno=params.getLong(OpenReplicatorParams.OFFLINE_AT_SEQNO);      logger.info("Initializing pipeline to go offline after processing seqno: " + seqno);      pipeline.shutdownAfterSequenceNumber(seqno);    } else     if (params.get(OpenReplicatorParams.OFFLINE_AT_EVENT_ID) != null) {      String eventId=params.getString(OpenReplicatorParams.OFFLINE_AT_EVENT_ID);      logger.info("Initializing pipeline to go offline after processing event ID: " + eventId);      pipeline.shutdownAfterEventId(eventId);    } else     if (params.get(OpenReplicatorParams.OFFLINE_AT_HEARTBEAT) != null) {      String name=params.getString(OpenReplicatorParams.OFFLINE_AT_HEARTBEAT,"*",true);      logger.info("Scheduline pipeline to go offline after processing hearbeat");      pipeline.shutdownAfterHeartbeat(name);    } else     if (params.get(OpenReplicatorParams.OFFLINE_AT_TIMESTAMP) != null) {      long timeMillis=params.getLong(OpenReplicatorParams.OFFLINE_AT_TIMESTAMP);      DateFormat formatter=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");      Date toDate=new Date(timeMillis);      Timestamp ts=new Timestamp(timeMillis);      logger.info("Scheduling pipeline to go offline after processing source timestamp: " + formatter.format(toDate));      pipeline.shutdownAfterTimestamp(ts);    } else {      logger.info("Initiating immediate pipeline shutdown");      context.getEventDispatcher().put(new GoOfflineEvent());    }  } catch (  ReplicatorException e) {    String pendingError="Replicator deferred service shutdown failed";    if (logger.isDebugEnabled())     logger.debug(pendingError,e);    throw e;  }catch (  Throwable e) {    String pendingError="Replicator deferred service shutdown failed due to underlying error";    logger.error(pendingError,e);    throw new ReplicatorException(pendingError + e);  }}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.VARIABLE_DECLARATION;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void saveInstantUploadPathOnPreferences(){  SharedPreferences appPrefs=PreferenceManager.getDefaultSharedPreferences(getApplicationContext());  SharedPreferences.Editor editor=appPrefs.edit();  editor.putString("instant_upload_path",mUploadPath);  editor.commit();}  }
class C{  public long time(){  return time;}  }
class C{  final public boolean endsWithIgnoreCase(final MutableString suffix){  final int l=suffix.length();  int length=length();  if (l > length)   return false;  int i=l;  final char[] a1=suffix.array;  final char[] a2=array;  char c, d;  while (i-- != 0) {    c=Character.toLowerCase(Character.toUpperCase(a1[i]));    d=Character.toLowerCase(Character.toUpperCase(a2[--length]));    if (c != d)     return false;  }  return true;}  }
class C{  public Request addRequestHeader(String header,String value){  if (header == null) {    throw new NullPointerException("header cannot be null");  }  if (header.contains(":")) {    throw new IllegalArgumentException("header may not contain ':'");  }  if (value == null) {    value="";  }  mRequestHeaders.add(Pair.create(header,value));  return this;}  }
class C{  @Override public byte[] serializeVal(Justification jst){  throw new UnsupportedOperationException();}  }
class C{  public void visitOuterClass(String owner,String name,String desc){  if (cv != null) {    cv.visitOuterClass(owner,name,desc);  }}  }
class C{  public boolean lacksRuntimeRetention(String dottedClassName){  Boolean result=annotationRetention.get(dottedClassName);  if (result == null) {    return false;  }  return !result;}  }
class C{  Object physFromBuffer(char[] buffer){  Object result;  try {    if (cnv != null && cnv[cnvSystem] != null) {      long value=ProtoHeader.getParamInt(ofs,bytes,buffer).longValue();      value=(value >> bitOffset);      value=(value & ((1L << numBits) - 1));      value=(value & bitMask);      result=cnv[cnvSystem].memToPhys(value);    } else {      result=String.copyValueOf(buffer,ofs,bytes);    }  } catch (  Exception ex) {    result="n/a";    log.warn(String.format("%s: %s - [%s]",toString(),ex.getMessage(),ProtUtils.hexDumpBuffer(buffer)));    enabled=false;  }  return (result);}  }
class C{  private void updateToolTipText(){  if (isChecked()) {    setToolTipText("Hide Agents which have not sent any data yet.");  } else {    setToolTipText("Show Agents which have not sent any data yet.");  }}  }
class C{  @Override protected List<StoragePool> matchStoragePoolsWithAttributeOn(List<StoragePool> allPools,Map<String,Object> attributeMap,StringBuffer errorMessage){  boolean checkIP=false;  boolean checkFC=false;  if (false == attributeMap.get(Attributes.vpool_type.toString()).equals(VirtualPool.Type.block.name())) {    return allPools;  }  Object highAvailabilityType=attributeMap.get(Attributes.high_availability_type.toString());  if (highAvailabilityType != null && NullColumnValueGetter.isNotNullValue(highAvailabilityType.toString())) {    return allPools;  }  Set<String> protocols=(Set<String>)attributeMap.get(Attributes.protocols.toString());  Set<String> vArrays=(Set<String>)attributeMap.get(Attributes.varrays.toString());  if (protocols != null && protocols.contains(Block.FC.name())) {    checkFC=true;  }  if (protocols != null && protocols.contains(Block.iSCSI.name())) {    checkIP=true;  }  Integer maxPaths=(Integer)attributeMap.get(Attributes.max_paths.toString());  Map<URI,Integer> cachedUsableFCPorts=new HashMap<URI,Integer>();  Map<URI,Integer> cachedUsableIPPorts=new HashMap<URI,Integer>();  Map<URI,Integer> cachedUsableFCHADomains=new HashMap<URI,Integer>();  Map<URI,Integer> cachedUsableIPHADomains=new HashMap<URI,Integer>();  List<StoragePool> matchedPools=new ArrayList<StoragePool>();  Map<URI,StorageSystem> storageSystemMap=new HashMap<URI,StorageSystem>();  for (  StoragePool pool : allPools) {    URI dev=pool.getStorageDevice();    StorageSystem system=getStorageSystem(storageSystemMap,pool);    if (checkFC) {      if (numberOfUsablePorts(dev,Transport.FC,vArrays,cachedUsableFCPorts,cachedUsableFCHADomains) < maxPaths) {        _logger.info("NumPathsMatcher disqualified pool: " + pool.getNativeGuid() + " max_paths: "+ maxPaths+ " because insufficient FC ports");        continue;      }      if (!system.getIsDriverManaged() && !system.getSystemType().equals(DiscoveredSystemObject.Type.scaleio.name()) && !system.getSystemType().equals(DiscoveredSystemObject.Type.xtremio.name())&& !system.getSystemType().equals(DiscoveredSystemObject.Type.ceph.name())) {        if (maxPaths >= 2 && cachedUsableFCHADomains.get(dev) < 2) {          _logger.info("NumPathsMatcher disqualified pool: " + pool.getNativeGuid() + " max_paths: "+ maxPaths+ " because insufficient FC cpus (StorageHADomains)");          continue;        }      }    }    if (checkIP) {      if (numberOfUsablePorts(dev,Transport.IP,vArrays,cachedUsableIPPorts,cachedUsableIPHADomains) < maxPaths) {        _logger.info("NumPathsMatcher disqualified pool: " + pool.getNativeGuid() + " max_paths: "+ maxPaths+ " because insufficient IP ports");        continue;      }      StorageDriverManager storageDriverManager=(StorageDriverManager)StorageDriverManager.getApplicationContext().getBean(StorageDriverManager.STORAGE_DRIVER_MANAGER);      if (!storageDriverManager.isDriverManaged(system.getSystemType()) && !system.getSystemType().equals(DiscoveredSystemObject.Type.scaleio.name()) && !system.getSystemType().equals(DiscoveredSystemObject.Type.xtremio.name())&& !system.getSystemType().equals(DiscoveredSystemObject.Type.ceph.name())) {        if (maxPaths >= 2 && cachedUsableIPHADomains.get(dev) < 2) {          _logger.info("NumPathsMatcher disqualified pool: " + pool.getNativeGuid() + " max_paths: "+ maxPaths+ " because insufficient IP cpus (StorageHADomains)");          continue;        }      }    }    matchedPools.add(pool);  }  if (CollectionUtils.isEmpty(matchedPools)) {    errorMessage.append(String.format("No storage pool is matching with the VPool maximum path parameter %d. ",maxPaths));    _logger.error(errorMessage.toString());  }  _logger.info("NumPathsMatcher maxPaths: " + maxPaths + " passed "+ matchedPools.size()+ " pools");  return matchedPools;}  }
class C{  public void testIntValue(){  DoubleAdder ai=new DoubleAdder();  assertEquals(0,ai.intValue());  ai.add(1.0);  assertEquals(1,ai.intValue());}  }
class C{  public UserNotice(NoticeReference noticeRef,String str){  this(noticeRef,new DisplayText(str));}  }
class C{  public void process(Mat rgbaImage){  Imgproc.pyrDown(rgbaImage,mPyrDownMat);  Imgproc.pyrDown(mPyrDownMat,mPyrDownMat);  Imgproc.cvtColor(mPyrDownMat,mHsvMat,Imgproc.COLOR_RGB2HSV_FULL);  if (upperBound.getScalar().val[0] <= 255) {    Core.inRange(mHsvMat,lowerBound.getScalar(),upperBound.getScalar(),mMask);  } else {    Scalar lower=lowerBound.getScalar().clone();    Scalar upper=upperBound.getScalar().clone();    while (upper.val[0] > 255)     upper.val[0]-=255;    double tmp=lower.val[0];    lower.val[0]=0;    Core.inRange(mHsvMat,lower,upper,mMaskOne);    lower.val[0]=tmp;    upper.val[0]=255;    Core.inRange(mHsvMat,lower,upper,mMask);    Core.bitwise_or(mMaskOne,mMask,mMask);  }  Imgproc.dilate(mMask,mDilatedMask,new Mat());  List<MatOfPoint> contourListTemp=new ArrayList<>();  Imgproc.findContours(mDilatedMask,contourListTemp,mHierarchy,Imgproc.RETR_EXTERNAL,Imgproc.CHAIN_APPROX_SIMPLE);  contours.clear();  for (  MatOfPoint c : contourListTemp) {    Core.multiply(c,new Scalar(4,4),c);    contours.add(new Contour(c));  }}  }
class C{  public int run(TestScenario testScenario){  if (testScenario.getEnvironment().getDockerCompose() != null && testScenario.getEnvironment().getImage() != null) {    throw new IllegalArgumentException("Ambiguous environment: defined docker image and docker-compose" + ", but we expect only one of them to be defined!");  }  log.info(String.format("========================= Starting test scenario: %s",testScenario));  int successfulTestCases=0;  for (  TestCase test : testScenario.getTests()) {    if (test.isSkip()) {      continue;    }    TestEnvironmentExecutor testEnvironmentExecutor=createTestEnvironmentExecutor(testScenario);    try {      runTestCase(testScenario,test,testEnvironmentExecutor);      successfulTestCases++;    } catch (    TestFailException ex) {      log.severe(String.format("Test case failed: %s\n%s",ex.toString(),ex.getMessage()));      ex.printStackTrace();    } finally {      testEnvironmentExecutor.close();    }  }  log.info(String.format("========================= Closing test scenario : %s",testScenario));  return successfulTestCases;}  }
class C{  public String toString(){  return operation;}  }
class C{  public MonthArrayTitleFormatter(CharSequence[] monthLabels){  if (monthLabels == null) {    throw new IllegalArgumentException("Label array cannot be null");  }  if (monthLabels.length < 12) {    throw new IllegalArgumentException("Label array is too short");  }  this.monthLabels=monthLabels;}  }
class C{  public Object clone(){  Matrix4f m1=null;  try {    m1=(Matrix4f)super.clone();  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }  return m1;}  }
class C{  public void testCargo() throws Exception {  final URL url=new URL("http://localhost:" + System.getProperty("http.port") + "/cargocpc/");  final String expected="Cargo Ping Component";  PingUtils.assertPingTrue(url.getPath() + " not started",expected,url,logger);}  }
class C{  public static int safeMultiplyToInt(long val1,long val2){  long val=FieldUtils.safeMultiply(val1,val2);  return FieldUtils.safeToInt(val);}  }
class C{  public void handleConfiguration(Class<OpsType> opsType,Interface instance) throws InstantiationException, IllegalAccessException {  if (mRetainedFragmentManager.firstTimeIn()) {    Log.d(TAG,"First time onCreate() call");    initialize(opsType,instance);  } else {    Log.d(TAG,"Second or subsequent onCreate() call");    mOpsInstance=mRetainedFragmentManager.get(opsType.getSimpleName());    if (mOpsInstance == null)     initialize(opsType,instance); else     mOpsInstance.onConfiguration(instance,false);  }}  }
class C{  public boolean isComposite(){  for (  ModelList list : models) {    for (    Model model : list) {      if (model != null) {        if (!model.isEmpty()) {          return true;        }      }    }  }  return !models.isEmpty();}  }
class C{  protected ContentProtection parseContentProtection(XmlPullParser xpp) throws XmlPullParserException, IOException {  String schemeUriId=xpp.getAttributeValue(null,"schemeUriId");  return new ContentProtection(schemeUriId,null);}  }
class C{  public Integer checkRoleReading(String roleName,String relationTypeName) throws IllegalArgumentException, RelationTypeNotFoundException {  if (roleName == null || relationTypeName == null) {    String excMsg="Invalid parameter.";    throw new IllegalArgumentException(excMsg);  }  RELATION_LOGGER.entering(RelationService.class.getName(),"checkRoleReading",new Object[]{roleName,relationTypeName});  Integer result;  RelationType relType=getRelationType(relationTypeName);  try {    RoleInfo roleInfo=relType.getRoleInfo(roleName);    result=checkRoleInt(1,roleName,null,roleInfo,false);  } catch (  RoleInfoNotFoundException exc) {    result=Integer.valueOf(RoleStatus.NO_ROLE_WITH_NAME);  }  RELATION_LOGGER.exiting(RelationService.class.getName(),"checkRoleReading");  return result;}  }
class C{  public RootHandler(){  this.subHandlers=new Stack();}  }
class C{  public String toStringX(){  StringBuffer sb=new StringBuffer(m_name);  if (m_data != null) {    sb.append(" (");    float size=m_data.length;    if (size <= 1024)     sb.append(m_data.length).append(" B"); else {      size/=1024;      if (size > 1024) {        size/=1024;        sb.append(size).append(" MB");      } else       sb.append(size).append(" kB");    }    sb.append(")");  }  sb.append(" - ").append(getContentType());  return sb.toString();}  }
class C{  public JSONArray(Object array) throws JSONException {  this();  if (array.getClass().isArray()) {    int length=Array.getLength(array);    for (int i=0; i < length; i+=1) {      this.put(JSONObject.wrap(Array.get(array,i)));    }  } else {    throw new JSONException("JSONArray initial value should be a string or collection or array.");  }}  }
class C{  public MemcacheClientBuilder<V> withKeyCharset(final Charset charset){  this.charset=checkNotNull(charset);  return this;}  }
class C{  @Override public boolean equals(Object o){  if (!(o instanceof Literal)) {    return false;  }  Literal otherLiteral=(Literal)o;  if ((this.attribute.equals(otherLiteral.attribute)) && (this.value == otherLiteral.value)) {    return true;  } else {    return false;  }}  }
class C{  private static void reverseRange(Object[] a,int lo,int hi){  hi--;  while (lo < hi) {    Object t=a[lo];    a[lo++]=a[hi];    a[hi--]=t;  }}  }
class C{  ResultColumn(Transfer in) throws IOException {  alias=in.readString();  schemaName=in.readString();  tableName=in.readString();  columnName=in.readString();  columnType=in.readInt();  precision=in.readLong();  scale=in.readInt();  displaySize=in.readInt();  autoIncrement=in.readBoolean();  nullable=in.readInt();}  }
class C{  public List<CustomHandler> customHandlers(){  return subresources().customHandlers();}  }
class C{  public Field field(final Class<?> cls,final String name,final Class<?> definedIn){  final Field field=fieldOrNull(cls,name,definedIn);  if (field == null) {    throw new MissingFieldException(cls.getName(),name);  } else {    return field;  }}  }
class C{  @Override public void close() throws IOException {synchronized (lock) {    out.close();  }}  }
class C{  public CacheHeader(String key,Entry entry){  this.key=key;  this.size=entry.data.length;  this.etag=entry.etag;  this.serverDate=entry.serverDate;  this.lastModified=entry.lastModified;  this.ttl=entry.ttl;  this.softTtl=entry.softTtl;  this.responseHeaders=entry.responseHeaders;}  }
class C{  private static PropertyTable buildPropertyTable(final TabFolder tabFolder,final boolean showButton,final boolean showAsCategory,final boolean showDescription){  final PropertyTable table=new PropertyTable(tabFolder,SWT.NONE);  if (showButton) {    table.showButtons();  } else {    table.hideButtons();  }  if (showAsCategory) {    table.viewAsCategories();  } else {    table.viewAsFlatList();  }  if (showDescription) {    table.showDescription();  } else {    table.hideDescription();  }  table.addProperty(new PTProperty("id","Identifier","Description for identifier","My id")).setCategory("General");  table.addProperty(new PTProperty("text","Description","Description for the description field","blahblah...")).setCategory("General");  table.addProperty(new PTProperty("url","URL:","This is a nice <b>URL</b>","http://www.google.com").setCategory("General")).setEditor(new PTURLEditor());  table.addProperty(new PTProperty("password","Password","Enter your <i>password</i> and keep it secret...","password")).setCategory("General").setEditor(new PTPasswordEditor());  table.addProperty(new PTProperty("int","An integer","Type any integer","123")).setCategory("Number").setEditor(new PTIntegerEditor());  table.addProperty(new PTProperty("float","A float","Type any float","123.45")).setCategory("Number").setEditor(new PTFloatEditor());  table.addProperty(new PTProperty("spinner","Another integer","Use a spinner to enter an integer")).setCategory("Number").setEditor(new PTSpinnerEditor(0,100));  table.addProperty(new PTProperty("directory","Directory","Select a directory")).setCategory("Directory/File").setEditor(new PTDirectoryEditor());  table.addProperty(new PTProperty("file","File","Select a file")).setCategory("Directory/File").setEditor(new PTFileEditor());  table.addProperty(new PTProperty("comboReadOnly","Combo (read-only)","A simple combo with seasons")).setCategory("Combo").setEditor(new PTComboEditor(true,new Object[]{"Spring","Summer","Autumn","Winter"}));  table.addProperty(new PTProperty("combo","Combo","A combo that is not read-only")).setCategory("Combo").setEditor(new PTComboEditor("Value 1","Value 2","Value 3"));  table.addProperty(new PTProperty("cb","Checkbox","A checkbox")).setCategory("Checkbox").setEditor(new PTCheckboxEditor()).setCategory("Checkbox");  table.addProperty(new PTProperty("cb2","Checkbox (disabled)","A disabled checkbox...")).setEditor(new PTCheckboxEditor()).setCategory("Checkbox").setEnabled(false);  table.addProperty(new PTProperty("color","Color","Pick it !")).setCategory("Misc").setEditor(new PTColorEditor());  table.addProperty(new PTProperty("font","Font","Pick again my friend")).setEditor(new PTFontEditor()).setCategory("Misc");  table.addProperty(new PTProperty("dimension","Dimension","A dimension is composed of a width and a height")).setCategory("Misc").setEditor(new PTDimensionEditor());  table.addProperty(new PTProperty("rectangle","Rectangle","A rectangle is composed of a position (x,y) and a dimension(width,height)")).setCategory("Misc").setEditor(new PTRectangleEditor());  table.addProperty(new PTProperty("inset","Inset","An inset is composed of the following fields:top,left,bottom,right)")).setCategory("Misc").setEditor(new PTInsetsEditor());  table.addProperty(new PTProperty("date","Date","Well, is there something more to say ?")).setCategory("Misc").setEditor(new PTDateEditor());  return table;}  }
class C{  boolean removeChild(O child){  if (children == EMPTY) {    return false;  }  for (int i=0; i < numc; i++) {    if (child.equals(children[i])) {      --numc;      System.arraycopy(children,i + 1,children,i,numc - i);      children[numc]=null;      if (numc == 0) {        children=EMPTY;      }      return true;    }  }  return false;}  }
class C{  private void notifyOnDataSetChanged(){  if (notifyOnChange) {    notifyDataSetChanged();  }}  }
class C{  public int hashCode(){  return url.hashCode();}  }
class C{  public boolean isValidGenericTld(String gTld){  gTld=unicodeToASCII(gTld);  return Arrays.binarySearch(GENERIC_TLDS,chompLeadingDot(gTld.toLowerCase(Locale.ENGLISH))) >= 0;}  }
class C{  static public PVector random3D(PVector target){  return random3D(target,null);}  }
class C{  public VirtualMachineError(){}  }
class C{  @Override public int mapString(String str){  if (str == null) {    return -1;  }  int index=getIndex(str);  if (index < 0) {    str=new String(str);    indexToSymbolMap.add(str);    index=indexToSymbolMap.size() - 1;    symbolToIndexMap.put(str,index);  }  return index;}  }
class C{  @Override public void after(PropertyInfoRestRep oldProps,PropertyInfoRestRep newProps){}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public String mergeName(String a,String b) throws MergeFailed {  if (QA.bothNullOrEquals(a,b))   return a;  if (emptyNames.contains(a) && !emptyNames.contains(b))   return b;  if (emptyNames.contains(b) && !emptyNames.contains(a))   return a;  return a;}  }
class C{  public ToStringBuilder append(String fieldName,short[] array){  style.append(buffer,fieldName,array,null);  return this;}  }
class C{  public Stack(){}  }
class C{  public GotoSectionMenu(final List<Section> sections,final long address,final INaviModule module){  setText("Jump to section");  for (  final Section section : sections) {    add(new GotoSectionAction(section,address,module));  }}  }
class C{  public BackgroundPainter(Component parent){  this.parent=parent;}  }
class C{  public static Distribution guessRegularization(DataSet d){  double T2=d.getSampleSize();  T2*=T2;  return new LogUniform(Math.pow(2,-3) / T2,Math.pow(2,3) / T2);}  }
class C{  public PermissionCollectionRequestBuilder(final String requestUrl,final IOneDriveClient client,final List<Option> options){  super(requestUrl,client,options);}  }
class C{  public OpenStackConnectionException(String message,int responseCode){  this(message);  this.responseCode=responseCode;}  }
class C{  public static void assertAllCountersZero(){  assertEquals(count,0);  assertEquals(counterCreate,0);  assertEquals(counterUpdate,0);  assertEquals(counterDestroy,0);}  }
class C{  public void jsFunction_close() throws IOException {  if (reader != null) {    reader.close();    reader=null;  } else   if (writer != null) {    writer.close();    writer=null;  }}  }
class C{  public static void dumpHeader(Object ref){  VM.sysWrite(" TIB=");  VM.sysWrite(Magic.objectAsAddress(getTIB(ref)));  JavaHeader.dumpHeader(ref);  MiscHeader.dumpHeader(ref);}  }
class C{  public int compareTo(final byte[] that){  return WritableComparator.compareBytes(this.data,this.offset,this.length,that,0,that.length);}  }
class C{  public void ifZCmp(final int mode,final Label label){  mv.visitJumpInsn(mode,label);}  }
class C{  @Override public void draw(Canvas canvas){  if (getPicture() != null) {    Rect bounds=getBounds();    canvas.save();    canvas.drawPicture(getPicture(),bounds);    canvas.restore();  }}  }
class C{  public Long lpush(final String key,final String... strings){  checkIsInMulti();  client.lpush(key,strings);  return client.getIntegerReply();}  }
class C{  @Override public void changeCursor(Cursor cursor){  super.changeCursor(cursor);  resetMappings();}  }
class C{  @Override protected EClass eStaticClass(){  return SexecPackage.Literals.CHECK;}  }
class C{  public boolean isLootingRewardable(){  return isLootingRewardable;}  }
class C{  public vec3 copyNormalized(vec3 a){  float x=a.m[0];  float y=a.m[1];  float z=a.m[2];  float s=1.0f / (float)Math.sqrt(x * x + y * y + z * z);  this.m[0]=x * s;  this.m[1]=y * s;  this.m[2]=z * s;  return this;}  }
class C{  public static void validateTimeout(String instanceId,PropertyHandler ph,APPlatformService APPService) throws AuthenticationException, ConfigurationException, APPlatformException {  long readyTimeout=ph.getReadyTimeout();  String startTimeStr=ph.getStartTime();  if (readyTimeout != 0 && startTimeStr != null && TIMEOUT_OPERATION.contains(ph.getState())) {    if (startTimeStr.equals(TIMEOUT)) {      logger.warn("This request already timeout. This should not occur.");      throw new APPlatformException(Messages.getAll("error_operation_timeout",Long.valueOf(readyTimeout)));    }    try {      long startTime=Long.parseLong(startTimeStr);      long currentTime=System.currentTimeMillis();      long timePast=currentTime - startTime;      logger.debug("ExecutionTime: " + timePast + "ms (StartTime: "+ startTime+ "ms, CurrentTime: "+ currentTime+ "ms), ReadyTimeout: "+ readyTimeout+ "ms");      if (timePast > readyTimeout) {        logger.debug("Request timeout: over " + timePast + "ms");        ph.setStartTime(TIMEOUT);        APPService.storeServiceInstanceDetails(OpenStackController.ID,instanceId,ph.getSettings(),ph.getTPAuthentication());        if (ph.getState() == FlowState.START_REQUESTED || ph.getState() == FlowState.STARTING) {          throw new APPlatformException(Messages.getAll("error_starting_operation_timeout",Long.valueOf(readyTimeout)));        } else         if (ph.getState() == FlowState.STOP_REQUESTED || ph.getState() == FlowState.STOPPING) {          throw new APPlatformException(Messages.getAll("error_stopping_operation_timeout",Long.valueOf(readyTimeout)));        }      }    } catch (    NumberFormatException ex) {      logger.warn("The action timeout is not a number and therefore ignored.");    }  }}  }
class C{  public TFloatIntHashMap(){}  }
class C{  public boolean isLocalTransfer(){  return isLocalTx;}  }
class C{  private void checkDirExists(String entidad) throws Exception {  int count;  DirsTable table=new DirsTable();  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession(entidad));    count=DbSelectFns.selectCount(dbConn,table.getDirTableName(),table.getCountDirIdQual(_id,_name));    if (count > 0) {      count=DbSelectFns.selectCount(dbConn,table.getNodeTableName(),table.getCountDirNodeQual(_parentId));      if (count > 0)       AdminException.throwException(DirErrorCodes.EC_DIR_EXITS);    }  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    dbConn.close();  }}  }
class C{  private void checkWebservice() throws ApplicationException {  if (webservice == null)   throw new ApplicationException("attribute webservice must be defined");}  }
class C{  private void createScrollPane(){  AttributeSet attributes=getElement().getAttributes();  String scrolling=(String)attributes.getAttribute(HTML.Attribute.SCROLLING);  if (scrolling == null) {    scrolling="auto";  }  if (!scrolling.equals("no")) {    if (scrolling.equals("yes")) {      scroller=new JScrollPane(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);    } else {      scroller=new JScrollPane();    }  } else {    scroller=new JScrollPane(JScrollPane.VERTICAL_SCROLLBAR_NEVER,JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);  }  JViewport vp=scroller.getViewport();  vp.add(htmlPane);  vp.setBackingStoreEnabled(true);  scroller.setMinimumSize(new Dimension(5,5));  scroller.setMaximumSize(new Dimension(Integer.MAX_VALUE,Integer.MAX_VALUE));}  }
class C{  public void onEnd(Interaction iact){}  }
class C{  public static void closeSilently(Connection conn){  if (conn != null) {    try {      conn.close();    } catch (    SQLException e) {    }  }}  }
class C{  public ObjectReference toObjectReference(){  return new ObjectReference(value);}  }
class C{  public static void main(String[] args){  runClassifier(new M5P(),args);}  }
class C{  public Object remove(int index){  Object o=this.opt(index);  this.myArrayList.remove(index);  return o;}  }
class C{  public int numBuckets(){  return preamble.getConfigK();}  }
class C{  public static Point transformPoint(Point point,MathTransform transform){  if (geoFactory == null)   geoFactory=new GeometryFactory();  double[] points=new double[]{point.getCoordinate().x,point.getCoordinate().y};  try {    transform.transform(points,0,points,0,1);  } catch (  TransformException e) {    e.printStackTrace();  }  Point p=geoFactory.createPoint(new Coordinate(points[0],points[1]));  return p;}  }
class C{  public synchronized FileArraySetting createFileArraySetting(String key,File[] defaultValue){  FileArraySetting result=new FileArraySetting(DEFAULT_PROPS,PROPS,key,defaultValue);  handleSettingInternal(result,null);  return result;}  }
class C{  public static <T>T checkNotNull(T reference,Object errorMessage){  if (ExoPlayerLibraryInfo.ASSERTIONS_ENABLED && reference == null) {    throw new NullPointerException(String.valueOf(errorMessage));  }  return reference;}  }
class C{  public void clearClues(){  clues.clear();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:24.459 -0500",hash_original_method="7D9E11919812D827506D2E4A9106FF10",hash_generated_method="5E8D797A1FD11876E4CCC140AF6F7062") public void removeEventListener(SIPDialogEventListener oldListener){  eventListeners.remove(oldListener);}  }
class C{  protected boolean isValid(){  if (!_parameters.hasParameter("mode") || !"fetch_response".equals(_parameters.getParameterValue("mode"))) {    _log.warn("Invalid mode value in fetch_reponse: " + _parameters.getParameterValue("mode"));    return false;  }  return super.isValid();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:22.927 -0500",hash_original_method="4513E8DEDD790BB664A98AD56B29A135",hash_generated_method="E344EEAD2668EB96BDD6242C7F151494") private void handleBroadcastSms(AsyncResult ar){  try {    byte[] receivedPdu=(byte[])ar.result;    if (false) {      for (int i=0; i < receivedPdu.length; i+=8) {        StringBuilder sb=new StringBuilder("SMS CB pdu data: ");        for (int j=i; j < i + 8 && j < receivedPdu.length; j++) {          int b=receivedPdu[j] & 0xff;          if (b < 0x10) {            sb.append('0');          }          sb.append(Integer.toHexString(b)).append(' ');        }        Log.d(TAG,sb.toString());      }    }    SmsCbHeader header=new SmsCbHeader(receivedPdu);    String plmn=SystemProperties.get(TelephonyProperties.PROPERTY_OPERATOR_NUMERIC);    GsmCellLocation cellLocation=(GsmCellLocation)mPhone.getCellLocation();    int lac=cellLocation.getLac();    int cid=cellLocation.getCid();    byte[][] pdus;    if (header.nrOfPages > 1) {      SmsCbConcatInfo concatInfo=new SmsCbConcatInfo(header,plmn,lac,cid);      pdus=mSmsCbPageMap.get(concatInfo);      if (pdus == null) {        pdus=new byte[header.nrOfPages][];        mSmsCbPageMap.put(concatInfo,pdus);      }      pdus[header.pageIndex - 1]=receivedPdu;      for (int i=0; i < pdus.length; i++) {        if (pdus[i] == null) {          return;        }      }      mSmsCbPageMap.remove(concatInfo);    } else {      pdus=new byte[1][];      pdus[0]=receivedPdu;    }    boolean isEmergencyMessage=SmsCbHeader.isEmergencyMessage(header.messageIdentifier);    dispatchBroadcastPdus(pdus,isEmergencyMessage);    Iterator<SmsCbConcatInfo> iter=mSmsCbPageMap.keySet().iterator();    while (iter.hasNext()) {      SmsCbConcatInfo info=iter.next();      if (!info.matchesLocation(plmn,lac,cid)) {        iter.remove();      }    }  } catch (  RuntimeException e) {    Log.e(TAG,"Error in decoding SMS CB pdu",e);  }}  }
class C{  public static Map<String,Object> prepareFind(DispatchContext dctx,Map<String,?> context){  String entityName=(String)context.get("entityName");  Delegator delegator=dctx.getDelegator();  String orderBy=(String)context.get("orderBy");  Map<String,?> inputFields=checkMap(context.get("inputFields"),String.class,Object.class);  String noConditionFind=(String)context.get("noConditionFind");  if (UtilValidate.isEmpty(noConditionFind)) {    noConditionFind=(String)inputFields.get("noConditionFind");  }  if (UtilValidate.isEmpty(noConditionFind)) {    noConditionFind=EntityUtilProperties.getPropertyValue("widget","widget.defaultNoConditionFind",delegator);  }  String filterByDate=(String)context.get("filterByDate");  if (UtilValidate.isEmpty(filterByDate)) {    filterByDate=(String)inputFields.get("filterByDate");  }  Timestamp filterByDateValue=(Timestamp)context.get("filterByDateValue");  Map<String,Object> queryStringMap=new LinkedHashMap<String,Object>();  ModelEntity modelEntity=delegator.getModelEntity(entityName);  List<EntityCondition> tmpList=createConditionList(inputFields,modelEntity.getFieldsUnmodifiable(),queryStringMap,delegator,context);  if (tmpList.size() > 0 || "Y".equals(noConditionFind)) {    if ("Y".equals(filterByDate)) {      queryStringMap.put("filterByDate",filterByDate);      if (UtilValidate.isEmpty(filterByDateValue)) {        EntityCondition filterByDateCondition=EntityUtil.getFilterByDateExpr();        tmpList.add(filterByDateCondition);      } else {        queryStringMap.put("filterByDateValue",filterByDateValue);        EntityCondition filterByDateCondition=EntityUtil.getFilterByDateExpr(filterByDateValue);        tmpList.add(filterByDateCondition);      }    }  }  EntityConditionList<EntityCondition> exprList=null;  if (tmpList.size() > 0) {    exprList=EntityCondition.makeCondition(tmpList);  }  List<String> orderByList=null;  if (UtilValidate.isNotEmpty(orderBy)) {    orderByList=StringUtil.split(orderBy,"|");  }  Map<String,Object> results=ServiceUtil.returnSuccess();  queryStringMap.put("noConditionFind",noConditionFind);  String queryString=UtilHttp.urlEncodeArgs(queryStringMap);  results.put("queryString",queryString);  results.put("queryStringMap",queryStringMap);  results.put("orderByList",orderByList);  results.put("entityConditionList",exprList);  return results;}  }
class C{  @Override public boolean input(Instance instance){  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (m_NewBatch) {    resetQueue();    m_NewBatch=false;  }  if (isOutputFormatDefined()) {    Instance newInstance=(Instance)instance.copy();    push(newInstance);    return true;  }  bufferInput(instance);  return false;}  }
class C{  public void fling(int startX,int startY,int velocityX,int velocityY,int minX,int maxX,int minY,int maxY){  if (mFlywheel && !mFinished) {    float oldVel=getCurrVelocity();    float dx=(float)(mFinalX - mStartX);    float dy=(float)(mFinalY - mStartY);    float hyp=FloatMath.sqrt(dx * dx + dy * dy);    float ndx=dx / hyp;    float ndy=dy / hyp;    float oldVelocityX=ndx * oldVel;    float oldVelocityY=ndy * oldVel;    if (Math.signum(velocityX) == Math.signum(oldVelocityX) && Math.signum(velocityY) == Math.signum(oldVelocityY)) {      velocityX+=oldVelocityX;      velocityY+=oldVelocityY;    }  }  mMode=FLING_MODE;  mFinished=false;  float velocity=FloatMath.sqrt(velocityX * velocityX + velocityY * velocityY);  mVelocity=velocity;  mDuration=getSplineFlingDuration(velocity);  mStartTime=AnimationUtils.currentAnimationTimeMillis();  mStartX=startX;  mStartY=startY;  float coeffX=velocity == 0 ? 1.0f : velocityX / velocity;  float coeffY=velocity == 0 ? 1.0f : velocityY / velocity;  double totalDistance=getSplineFlingDistance(velocity);  mDistance=(int)(totalDistance * Math.signum(velocity));  mMinX=minX;  mMaxX=maxX;  mMinY=minY;  mMaxY=maxY;  mFinalX=startX + (int)Math.round(totalDistance * coeffX);  mFinalX=Math.min(mFinalX,mMaxX);  mFinalX=Math.max(mFinalX,mMinX);  mFinalY=startY + (int)Math.round(totalDistance * coeffY);  mFinalY=Math.min(mFinalY,mMaxY);  mFinalY=Math.max(mFinalY,mMinY);}  }
class C{  public static double smallEstimatorCutoff(final int m){  return ((double)m * 5) / 2;}  }
class C{  public void increaseExclusiveCount(){  this.exclusiveCount++;}  }
class C{  public boolean forEach(TIntProcedure procedure){  byte[] states=_states;  int[] set=_set;  for (int i=set.length; i-- > 0; ) {    if (states[i] == FULL && !procedure.execute(set[i])) {      return false;    }  }  return true;}  }
class C{  public String hostnamePattern(){  return hostnamePattern;}  }
class C{  public void writeToFile(Context ctx) throws IOException {  if (apiStorage == null || currentStorage == null) {    Log.i("StorageDelegator","storage delegator empty, skipping save");    return;  }  if (!dirty) {    Log.i("StorageDelegator","storage delegator not dirty, skipping save");    return;  }  if (readingLock.tryLock()) {    if (savingHelper.save(ctx,FILENAME,this,true)) {      dirty=false;    } else {      if (ctx != null) {        try {          Toast.makeText(ctx,R.string.toast_statesave_failed,Toast.LENGTH_LONG).show();        } catch (        Exception ignored) {          Log.e(DEBUG_TAG,"Emergency toast failed with " + ignored.getMessage());        }catch (        Error ignored) {          Log.e(DEBUG_TAG,"Emergency toast failed with " + ignored.getMessage());        }      }      SavingHelper.asyncExport(ctx,this);      Log.d("StorageDelegator","save of state file failed, written emergency change file");    }    readingLock.unlock();  } else {    Log.i("StorageDelegator","storage delegator state being read, skipping save");  }}  }
class C{  public void testSHA256(){  Digest oldDigest=new SHA256Digest();  Digest newDigest=new OpenSSLDigest.SHA256();  doTestMessageDigest(oldDigest,newDigest);}  }
class C{  private int convertModelToRow(int index){  int size=list.getModel().getSize();  if ((index < 0) || (index >= size)) {    return -1;  }  if (layoutOrientation != JList.VERTICAL && columnCount > 1 && rowsPerColumn > 0) {    if (layoutOrientation == JList.VERTICAL_WRAP) {      return index % rowsPerColumn;    }    return index / columnCount;  }  return index;}  }
class C{  protected static int[] convertTarget(Element filterElement,int[] orderXY,BridgeContext ctx){  int[] targetXY=new int[2];  String s=filterElement.getAttributeNS(null,SVG_TARGET_X_ATTRIBUTE);  if (s.length() == 0) {    targetXY[0]=orderXY[0] / 2;  } else {    try {      int v=SVGUtilities.convertSVGInteger(s);      if (v < 0 || v >= orderXY[0]) {        throw new BridgeException(ctx,filterElement,ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_TARGET_X_ATTRIBUTE,s});      }      targetXY[0]=v;    } catch (    NumberFormatException nfEx) {      throw new BridgeException(ctx,filterElement,nfEx,ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_TARGET_X_ATTRIBUTE,s,nfEx});    }  }  s=filterElement.getAttributeNS(null,SVG_TARGET_Y_ATTRIBUTE);  if (s.length() == 0) {    targetXY[1]=orderXY[1] / 2;  } else {    try {      int v=SVGUtilities.convertSVGInteger(s);      if (v < 0 || v >= orderXY[1]) {        throw new BridgeException(ctx,filterElement,ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_TARGET_Y_ATTRIBUTE,s});      }      targetXY[1]=v;    } catch (    NumberFormatException nfEx) {      throw new BridgeException(ctx,filterElement,nfEx,ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_TARGET_Y_ATTRIBUTE,s,nfEx});    }  }  return targetXY;}  }
class C{  public PrimitiveValueExpression createPrimitiveValueExpression(){  PrimitiveValueExpressionImpl primitiveValueExpression=new PrimitiveValueExpressionImpl();  return primitiveValueExpression;}  }
class C{  private int nextUnitNumber(int unitNumber){  if (unitNumber == 6) {    return 8;  }  return unitNumber + 1;}  }
class C{  private void computeSharedFriends() throws NoSuchAlgorithmException, IOException {  log.debug("calculating shared contacts");  commonFriends=mClientPSI.getCardinality(getSRTFromServerTuple());  int requiredFriends=SecurityManager.getCurrentProfile(mContext).minSharedContacts;  if (requiredFriends > commonFriends && SecurityManager.getCurrentProfile(mContext).isUseTrust()) {    setExchangeStatus(Status.ERROR);    setErrorMessage("Session rejected by client due to insufficient common friends with server(required:" + requiredFriends + " found:"+ commonFriends+ ").");    throw new IOException("Session rejected by client due to insufficient common friends with server(required:" + requiredFriends + " found:"+ commonFriends+ ").");  }}  }
class C{  public static void buildNetworkTopology(String fileName){  Log.printConcatLine("Topology file: ",fileName);  GraphReaderBrite reader=new GraphReaderBrite();  try {    graph=reader.readGraphFile(fileName);    map=new HashMap<Integer,Integer>();    generateMatrices();  } catch (  IOException e) {    Log.printLine("Problem in processing BRITE file. Network simulation is disabled. Error: " + e.getMessage());  }}  }
class C{  public synchronized StoragePort[] queryStoragePorts(String[] portIds) throws InvalidArgument, InvalidSession, StorageFault, NotImplemented {  final String methodName="queryStoragePorts(): ";  log.debug(methodName + "Entry");  List<StoragePort> retStoragePorts=null;  try {    Boolean supportsBlock=new Boolean(_config.getConfigValue("config/service/storageTopology/storageArray/support-block-profile"));    if (!supportsBlock) {      log.error(methodName + " This function is not implemented");      throw FaultUtil.NotImplemented("This function is not implemented");    }    List<com.emc.storageos.vasa.data.internal.StoragePort> portList=null;    if (Util.isEmpty(portIds)) {      portList=this.getStoragePorts();    } else {      for (      String inputPortId : portIds) {        if (!inputPortId.startsWith(STORAGEPORT_IDENTIFIER_PREFIX)) {          throw FaultUtil.InvalidArgument("Given portId is invalid: " + inputPortId);        }      }      List<String> portIdList=Arrays.asList(portIds);      portList=this.getStoragePorts(portIdList);    }    retStoragePorts=new ArrayList<StoragePort>();    for (    com.emc.storageos.vasa.data.internal.StoragePort storagePortDetail : portList) {      String portType=storagePortDetail.getTransportType();      String portNetworkId=storagePortDetail.getPortNetworkId();      log.trace(methodName + "port type is [" + portType+ "]");      log.trace(methodName + "port nework Id is [" + portNetworkId+ "]");      StoragePort returnStoragePort=new StoragePort();      returnStoragePort.setUniqueIdentifier(storagePortDetail.getId());      returnStoragePort.addAlternateName(storagePortDetail.getPortName());      if ("FC".equalsIgnoreCase(portType)) {        log.trace(methodName + "setting port WWN as port network ID ");        returnStoragePort.setPortWwn(portNetworkId);        returnStoragePort.setPortType(BlockEnum.FC.getValue());      } else       if ("ISCSI".equalsIgnoreCase(portType)) {        log.trace(methodName + "setting iSCSI identifier as port network ID ");        returnStoragePort.setIscsiIdentifier(portNetworkId);        returnStoragePort.setPortType(BlockEnum.ISCSI.getValue());      } else       if ("IP".equalsIgnoreCase(portType)) {        log.trace(methodName + "setting node WWN as port network ID ");        returnStoragePort.setNodeWwn(portNetworkId);        returnStoragePort.setPortType(BlockEnum.Other.getValue());      }      retStoragePorts.add(returnStoragePort);    }  } catch (  InvalidArgument e) {    log.error(methodName + "InvalidArgument occured",e);    throw e;  }catch (  NotImplemented e) {    log.error(methodName + "NotImplemented occured",e);    throw e;  }  log.debug(methodName + "Exit returning storage ports of size[" + retStoragePorts.size()+ "]");  return retStoragePorts.toArray(new StoragePort[0]);}  }
class C{  public void registerClientInterest(String regionName,List keysOfInterest,ClientProxyMembershipID membershipID,boolean isDurable,boolean sendUpdatesAsInvalidates,boolean manageEmptyRegions,int regionDataPolicy,boolean flushState) throws IOException, RegionDestroyedException {  CacheClientProxy proxy=getClientProxy(membershipID,true);  if (logger.isDebugEnabled()) {    logger.debug("CacheClientNotifier: Client {} registering interest in: {} -> {}",proxy,regionName,keysOfInterest);  }  if (proxy == null) {    throw new IOException(LocalizedStrings.CacheClientNotifier_CACHECLIENTPROXY_FOR_THIS_CLIENT_IS_NO_LONGER_ON_THE_SERVER_SO_REGISTERINTEREST_OPERATION_IS_UNSUCCESSFUL.toLocalizedString());  }  proxy.registerClientInterestList(regionName,keysOfInterest,isDurable,sendUpdatesAsInvalidates,flushState);  if (manageEmptyRegions) {    updateMapOfEmptyRegions(proxy.getRegionsWithEmptyDataPolicy(),regionName,regionDataPolicy);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentgetelementsbytagnameNS03.class,args);}  }
class C{  static NativeBuffer allocNativeBuffer(int size){  if (size < 2048)   size=2048;  return new NativeBuffer(size);}  }
class C{  public static <T>void binaryInsertionSort(T[] d,int left,int right,Comparator<T> comp){  for (int i=left + 1; i <= right; i++) {    T t=d[i];    int l=left;    for (int r=i; l < r; ) {      int m=(l + r) >>> 1;      if (comp.compare(t,d[m]) >= 0) {        l=m + 1;      } else {        r=m;      }    }    for (int n=i - l; n > 0; ) {      d[l + n--]=d[l + n];    }    d[l]=t;  }}  }
class C{  public GetChannelGroups(String channeltype){  super();  addParameterToRequest("channeltype",channeltype);}  }
class C{  public void text(String str,float x,float y){  g.text(str,x,y);}  }
class C{  public <X extends Throwable>T orElseThrow(Supplier<? extends X> exc) throws X {  if (value != null)   return value; else   throw exc.get();}  }
class C{  public void onDescriptorWrite(BluetoothGatt gatt,BluetoothGattDescriptor descriptor,int status){}  }
class C{  public String sendMail(String Username,String Userpass,String EMail,String link,Boolean sendEmailWithVerficationCode){  String succ="valid email";  Integer sendEmailAtRegister=Integer.valueOf(cfgManagement.getConfKey(3,"sendEmailAtRegister").getConf_value()).intValue();  if (sendEmailAtRegister == 1) {    Long default_lang_id=Long.valueOf(cfgManagement.getConfKey(3,"default_lang_id").getConf_value()).longValue();    if (sendEmailWithVerficationCode) {      String verification_url=link;      String template=registerUserTemplate.getRegisterUserWithVerificationTemplate(Username,Userpass,EMail,default_lang_id,verification_url);      succ=mailHandler.sendMail(EMail,fieldmanagment.getString(512L,default_lang_id),template);    } else {      String template=registerUserTemplate.getRegisterUserTemplate(Username,Userpass,EMail,default_lang_id);      succ=mailHandler.sendMail(EMail,fieldmanagment.getString(512L,default_lang_id),template);    }    return succ;  } else {    return "success";  }}  }
class C{  @Override public void clearWarnings() throws SQLException {  try {    debugCodeCall("clearWarnings");    checkClosed();  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  protected CCTintTo(float t,ccColor3B c){  super(t);  to=new ccColor3B(c);}  }
class C{  public List<JCCompilationUnit> parseFiles(Iterable<JavaFileObject> fileObjects){  if (shouldStop(CompileState.PARSE))   return List.nil();  ListBuffer<JCCompilationUnit> trees=new ListBuffer<>();  Set<JavaFileObject> filesSoFar=new HashSet<JavaFileObject>();  for (  JavaFileObject fileObject : fileObjects) {    if (!filesSoFar.contains(fileObject)) {      filesSoFar.add(fileObject);      trees.append(parse(fileObject));    }  }  return trees.toList();}  }
class C{  public AsymptoticGrowthModel(Parameter asymptoteValueParameter,Parameter shapeParameter,Type units){  this(AsymptoticGrowthModelParser.ASYMPTOTIC_GROWTH_MODEL,asymptoteValueParameter,shapeParameter,units);}  }
class C{  public static Instances addInstanceId(Instances newData,Instances oldData,boolean isMultilabel) throws Exception {  Instances filteredData;  if (oldData.attribute(Constants.ID_FEATURE_NAME) != null) {    int instanceIdOffset=oldData.attribute(Constants.ID_FEATURE_NAME).index();    Add add=new Add();    add.setAttributeName(Constants.ID_FEATURE_NAME);    if (isMultilabel) {      add.setAttributeIndex("last");    } else {      add.setAttributeIndex("first");    }    add.setAttributeType(new SelectedTag(Attribute.STRING,Add.TAGS_TYPE));    add.setInputFormat(newData);    filteredData=Filter.useFilter(newData,add);    int j=isMultilabel ? filteredData.numAttributes() - 1 : 0;    for (int i=0; i < filteredData.numInstances(); i++) {      String outcomeId=oldData.instance(i).stringValue(instanceIdOffset);      filteredData.instance(i).setValue(j,outcomeId);    }  } else {    filteredData=new Instances(newData);  }  return filteredData;}  }
class C{  public void init(MonProxy monProxy){  String className="(class=" + monProxy.getMonitoredObject().getClass().getName() + ")";  summaryPrefix="MonProxy-Interface " + className + ": ";  exceptionPrefix="MonProxy-Exception: " + className + " Exception: ";}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void showSecondaryMenu(){  mSlidingMenu.showSecondaryMenu();}  }
class C{  public void testNextDoubleBadOriginBound(){  testDoubleBadOriginBound(null);}  }
class C{  public void testStoreRetrieve() throws Exception {  StorageAgent agent=this.configureStorageService("testStoreRetrieve",3);  assertEquals("Initial backups should be 0",0,agent.list().length);  BackupSpecification backupSpecStore=createBackup("testStoreRetrieve",10000);  URI uri=agent.store(backupSpecStore);  BackupSpecification backupSpecRetrieve=agent.retrieve(uri);  assertEquals("Final backups should be 1",1,agent.list().length);  for (int i=0; i < backupSpecStore.getBackupLocators().size(); i++) {    long retrieveLength=backupSpecRetrieve.getBackupLocators().get(i).getContents().length();    compareFileLengths(backupSpecStore.getBackupLocators().get(i).getContents(),backupSpecRetrieve.getBackupLocators().get(i).getContents(),10000,retrieveLength);  }  agent.release();}  }
class C{  public List<A> prepend(A x){  return new List<A>(x,this);}  }
class C{  public boolean forEach(TLongProcedure procedure){  long[] set=_set;  Object[] values=_values;  for (int i=set.length; i-- > 0; ) {    if (isFull(values,i) && !procedure.execute(set[i])) {      return false;    }  }  return true;}  }
class C{  public void removePropertyChangeListener(PropertyChangeListener listener){  propertyChangeSupport.removePropertyChangeListener(listener);}  }
class C{  public Rprop(){}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"stosd");  if (instruction.getOperands().size() != 0) {    throw new InternalTranslationException("Error: Argument instruction is not a stosd instruction (invalid number of operand)");  }  new StosGenerator().generate(environment,ReilHelpers.toReilAddress(instruction.getAddress()).toLong(),OperandSize.DWORD,instructions);}  }
class C{  public static boolean isDominatedBy(BasicBlock block,BasicBlock master,IR ir){  if (block == master) {    return true;  }  block=getIdom(block,ir);  while (block != null && block != master) {    block=getIdom(block,ir);  }  return block == master;}  }
class C{  public boolean isSerializable(){  return serializable;}  }
class C{  private boolean checkIndependence(LineRenderer3D r1,LineRenderer3D r2){  boolean b0=r1.equals(r2);  r1.setBaseLinesVisible(!r1.getBaseLinesVisible());  if (r1.equals(r2)) {    return false;  }  r2.setBaseLinesVisible(r1.getBaseLinesVisible());  if (!r1.equals(r2)) {    return false;  }  r1.setSeriesLinesVisible(1,true);  if (r1.equals(r2)) {    return false;  }  r2.setSeriesLinesVisible(1,true);  if (!r1.equals(r2)) {    return false;  }  r1.setLinesVisible(false);  if (r1.equals(r2)) {    return false;  }  r2.setLinesVisible(false);  if (!r1.equals(r2)) {    return false;  }  r1.setBaseShapesVisible(!r1.getBaseShapesVisible());  if (r1.equals(r2)) {    return false;  }  r2.setBaseShapesVisible(r1.getBaseShapesVisible());  if (!r1.equals(r2)) {    return false;  }  r1.setSeriesShapesVisible(1,true);  if (r1.equals(r2)) {    return false;  }  r2.setSeriesShapesVisible(1,true);  if (!r1.equals(r2)) {    return false;  }  r1.setShapesVisible(false);  if (r1.equals(r2)) {    return false;  }  r2.setShapesVisible(false);  if (!r1.equals(r2)) {    return false;  }  boolean flag=true;  Boolean existing=r1.getShapesFilled();  if (existing != null) {    flag=!existing.booleanValue();  }  r1.setShapesFilled(flag);  boolean b5=!r1.equals(r2);  r2.setShapesFilled(flag);  boolean b6=r1.equals(r2);  r1.setShapesFilled(false);  r2.setShapesFilled(false);  r1.setSeriesShapesFilled(0,false);  r2.setSeriesShapesFilled(0,true);  boolean b7=!r1.equals(r2);  r2.setSeriesShapesFilled(0,false);  boolean b8=(r1.equals(r2));  r1.setBaseShapesFilled(false);  r2.setBaseShapesFilled(true);  boolean b9=!r1.equals(r2);  r2.setBaseShapesFilled(false);  boolean b10=(r1.equals(r2));  return b0 && b5 && b6&& b7&& b8&& b9&& b10;}  }
class C{  static public Timestamp trunc(Timestamp dayTime,String trunc){  if (dayTime == null)   dayTime=new Timestamp(System.currentTimeMillis());  GregorianCalendar cal=new GregorianCalendar(Language.getLoginLanguage().getLocale());  cal.setTimeInMillis(dayTime.getTime());  cal.set(Calendar.MILLISECOND,0);  cal.set(Calendar.SECOND,0);  cal.set(Calendar.MINUTE,0);  cal.set(Calendar.HOUR_OF_DAY,0);  if (trunc == null || trunc.equals(TRUNC_DAY))   return new Timestamp(cal.getTimeInMillis());  if (trunc.equals(TRUNC_WEEK)) {    cal.set(Calendar.DAY_OF_WEEK,cal.getFirstDayOfWeek());    return new Timestamp(cal.getTimeInMillis());  }  cal.set(Calendar.DAY_OF_MONTH,1);  if (trunc.equals(TRUNC_MONTH))   return new Timestamp(cal.getTimeInMillis());  if (trunc.equals(TRUNC_QUARTER)) {    int mm=cal.get(Calendar.MONTH);    if (mm < 4)     mm=1; else     if (mm < 7)     mm=4; else     if (mm < 10)     mm=7; else     mm=10;    cal.set(Calendar.MONTH,mm);    return new Timestamp(cal.getTimeInMillis());  }  cal.set(Calendar.DAY_OF_YEAR,1);  return new Timestamp(cal.getTimeInMillis());}  }
class C{  public boolean isEmpty(){  return (this.getNumberOfQuestions() + this.getNumberOfAnswers() + this.getNumberOfAuthorities()+ this.getNumberOfAdditionals()) == 0;}  }
class C{  public FastStringBuffer append(FastStringBuffer other){  append(other.value,0,other.count);  return this;}  }
class C{  private RotateStream(String formatPath) throws ConfigException {  _rolloverLog=new RolloverLogBase();  _rolloverLog.setPathFormat(formatPath);  _out=new WriteStream(_rolloverLog);  _queue=new RotateStreamQueue(this);}  }
class C{  void updateFromNative(){  mRS.validate();  mName=mRS.nGetName(getID(mRS));}  }
class C{  @Override public synchronized void start(){  m_startTime=getMsClock();  m_running=true;}  }
class C{  public static Set<Integer> hash(Set<String> shingles){  Set<Integer> hashedShingles=new LinkedHashSet<>();  for (  String shingle : shingles) {    int hashValue=shingle.hashCode();    hashedShingles.add(hashValue);  }  return hashedShingles;}  }
class C{  public double sum(){  double s=0;  for (int i=0; i < size(); i++) {    s+=V[i];  }  return s;}  }
class C{  public static void register(){  ServiceRegistry.getInstance().add(SERVICE_KEY,new LabelService());}  }
class C{  protected DatabaseVersionInfo determineVersionInfoForFile(File file){  String[] fileNameParts=file.getName().split("_");  int productMajorVersion=Integer.parseInt(fileNameParts[2]);  int productMinorVersion=Integer.parseInt(fileNameParts[3]);  int schemaVersion=Integer.parseInt(fileNameParts[4].substring(0,fileNameParts[4].indexOf(".")));  return new DatabaseVersionInfo(productMajorVersion,productMinorVersion,schemaVersion);}  }
class C{  public boolean isFillViewport(){  return mFillViewport;}  }
class C{  public void testCase9(){  byte aBytes[]={1,2,3,4,5,6,7,1,2,3,4,5,6,7};  byte bBytes[]={10,20,30,40,50,60,70,10,20,30};  int aSign=-1;  int bSign=-1;  byte rBytes[]={-2,-3,-4,-5,-16,-27,-38,-42,-53,-64,-75,-16,-27,-37};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.add(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  private Instruction scheduleEarly(Instruction inst){  Instruction _earlyPos;  if (getState(inst) >= early)   return getEarlyPos(inst);  setState(inst,early);  setEarlyPos(inst,inst);  if (ir.options.FREQ_FOCUS_EFFORT && getOrigBlock(inst).getInfrequent()) {    return inst;  }  if (!shouldMove(inst,ir)) {    return inst;  }  _earlyPos=scheduleScalarDefsEarly(inst.getUses(),ir.firstInstructionInCodeOrder(),inst);  if (VM.VerifyAssertions)   VM._assert(_earlyPos != null);  if (ir.isHIR()) {    _earlyPos=scheduleHeapDefsEarly(ssad.getHeapUses(inst),_earlyPos,inst);    if (VM.VerifyAssertions)     VM._assert(_earlyPos != null);  }  if ((inst.isPEI() && !ir.options.SSA_LICM_IGNORE_PEI) || inst.isImplicitStore()) {    while (!postDominates(getBlock(inst),getBlock(_earlyPos),ir)) {      _earlyPos=dominanceSuccessor(_earlyPos,inst);    }  }  setEarlyPos(inst,_earlyPos);  if (DEBUG && getBlock(_earlyPos) != getBlock(inst)) {    VM.sysWrite("new earlyBlock: " + getBlock(_earlyPos) + " for "+ getBlock(inst)+ ": "+ inst+ "\n");  }  setBlock(inst,getBlock(_earlyPos));  return _earlyPos;}  }
class C{  public void testGetOwnerElement1() throws Throwable {  Document doc;  NodeList addressList;  Node testNode;  NamedNodeMap attributes;  Attr domesticAttr;  Element elementNode;  String name;  doc=(Document)load("staff",builder);  addressList=doc.getElementsByTagName("address");  testNode=addressList.item(0);  attributes=testNode.getAttributes();  domesticAttr=(Attr)attributes.getNamedItem("domestic");  elementNode=domesticAttr.getOwnerElement();  name=elementNode.getNodeName();  assertEquals("throw_Equals","address",name);}  }
class C{  public static ProcessOutputReader fg(Class main) throws IOException {  return fg(main,null,null);}  }
class C{  public String describeReferenceTo(JavaThing target,Snapshot ss){  JavaThing[] elements=getElements();  for (int i=0; i < elements.length; i++) {    if (elements[i] == target) {      return "Element " + i + " of "+ this;    }  }  return super.describeReferenceTo(target,ss);}  }
class C{  public static char[] encode(byte[] in){  return encode(in,0,in.length);}  }
class C{  public static byte[] hexToBytes(String hexString){  byte[] result=new byte[hexString.length() / 2];  for (int i=0; i < result.length; ++i) {    int offset=i * 2;    result[i]=(byte)Integer.parseInt(hexString.substring(offset,offset + 2),16);  }  return result;}  }
class C{  public static ContactsFragment newInstance(){  return new ContactsFragment();}  }
class C{  public static void main(String[] argv){  Debug.init();  boolean toUpper=true;  ArgParser ap=new ArgParser("ChangeCase");  ap.add("upper","Change file and directory names to UPPER CASE (default). <path> <path> ...",ArgParser.TO_END);  ap.add("lower","Change file and directory names to lower case. <path> <path> ...",ArgParser.TO_END);  ap.add("verbose","Announce all changes, failures will still be reported.");  if (argv.length == 0) {    ap.bail("",true);  }  ap.parse(argv);  String[] dirs;  dirs=ap.getArgValues("lower");  if (dirs != null) {    Debug.output("Converting to lower case names...");    toUpper=false;  } else {    dirs=ap.getArgValues("upper");    if (dirs == null) {      dirs=argv;    }    Debug.output("Converting to UPPER CASE names...");  }  boolean verbose=false;  String[] verboseTest=ap.getArgValues("verbose");  if (verboseTest != null) {    verbose=true;  }  ChangeCase cc=new ChangeCase(toUpper);  cc.setVerbose(verbose);  for (int i=0; i < dirs.length; i++) {    cc.handleEntry(new File(dirs[i]));  }}  }
class C{  public NoRouteToHostException(){}  }
class C{  public static Intent fragmentArgumentsToIntent(Bundle arguments){  Intent intent=new Intent();  if (arguments == null) {    return intent;  }  final Uri data=arguments.getParcelable("_uri");  if (data != null) {    intent.setData(data);  }  intent.putExtras(arguments);  intent.removeExtra("_uri");  return intent;}  }
class C{  public long start_brk(){  return Long.parseLong(fields[46]);}  }
class C{  public PooledExecutorWithDMStats(SynchronousQueue<Runnable> q,int maxPoolSize,PoolStatHelper stats,ThreadFactory tf,int msTimeout,RejectedExecutionHandler reh){  super(getCorePoolSize(maxPoolSize),maxPoolSize,msTimeout,TimeUnit.MILLISECONDS,q,tf,reh);  this.stats=stats;}  }
class C{  protected boolean isOffsetValid(int offset){  return getReplacementOffset() <= offset;}  }
class C{  public static void addStorageSystemsJson(String id){  List<StorageSystemInfo> items=Lists.newArrayList();  for (  StorageSystemRestRep storageSystem : StorageSystemUtils.getStorageSystems()) {    items.add(new StorageSystemInfo(storageSystem));  }  renderJSON(DataTablesSupport.createJSON(items,params));}  }
class C{  void computeFrameCounts(Method m){  Deque<Block> code=dfs(m.entry.to);  int max_stack=0;  int max_scope=0;  Map<Block,Integer> stkin=new TreeMap<Block,Integer>();  Map<Block,Integer> scpin=new TreeMap<Block,Integer>();  stkin.put(m.entry.to,0);  scpin.put(m.entry.to,0);  for (  Block b : code) {    int stkdepth=stkin.get(b);    int scpdepth=scpin.get(b);    for (    Expr e : b) {      assert (!e.isSynthetic());      assert (stkdepth >= e.args.length);      stkdepth-=e.args.length;      if (e.onStack()) {        stkdepth++;      }      if (stkdepth > max_stack)       max_stack=stkdepth;      assert (scpdepth >= e.scopes.length);      if (e.op == OP_popscope)       scpdepth--; else       if (e.onScope())       scpdepth++;      if (scpdepth > max_scope)       max_scope=scpdepth;    }    for (    Edge s : b.succ())     update_depth(s.to,stkdepth,stkin,scpdepth,scpin);    for (    Edge s : b.xsucc)     update_depth(s.to,1,stkin,0,scpin);  }  m.max_stack=max_stack;  m.max_scope=max_scope;}  }
class C{  public String push(final PushParams params,final ProgressMonitor progressMonitor) throws IOException {  final String fullRepo=params.getFullRepo();  try (DockerConnection connection=connectionFactory.openConnection(dockerDaemonUri).method("POST").path(apiVersionPathPrefix + "/images/" + fullRepo+ "/push").header("X-Registry-Auth",authResolver.getXRegistryAuthHeaderValue(params.getRegistry(),params.getAuthConfigs()))){    addQueryParamIfNotNull(connection,"tag",params.getTag());    final DockerResponse response=connection.request();    if (OK.getStatusCode() != response.getStatus()) {      throw getDockerException(response);    }    try (InputStream responseStream=response.getInputStream()){      JsonMessageReader<ProgressStatus> progressReader=new JsonMessageReader<>(responseStream,ProgressStatus.class);      Future<String> digestFuture=executor.submit(null);      return digestFuture.get();    } catch (    ExecutionException e) {      throw new DockerException("Docker image pushing failed. Cause: " + e.getCause().getLocalizedMessage(),500);    }catch (    InterruptedException e) {      throw new DockerException("Docker image pushing was interrupted",500);    }  } }  }
class C{  public MessageBuilder(){  strBuilder=new StringBuilder();}  }
class C{  private synchronized String exec(String js,boolean async){  if (DEBUG) {    Log.p("About to execute(" + async + ") "+ js);  }  if (async) {    browser.execute(installCode() + ";(" + js+ ")");    return null;  } else {    return browser.executeAndReturnString(installCode() + ";(" + js+ ")");  }}  }
class C{  private Object[] newElementArray(int s){  return new Object[s];}  }
class C{  static boolean containsThis(Node fullName){  return fullName.isThis() || (fullName.isGetProp() && containsThis(fullName.getFirstChild()));}  }
class C{  public static void main(String[] args){  int length=1200000000;  try {    byte[] array=new byte[length];  } catch (  OutOfMemoryError ex) {    System.out.println(ex.getMessage());  }  System.out.println("Error handled program continues... ");}  }
class C{  public void testOnSyncRetry_requestsUsers(){  mController.init();  mController.onSyncRetry();  verify(mMockUserManager,times(2)).loadKnownUsers();}  }
class C{  public RrdGraphDefTemplate(InputSource inputSource) throws IOException {  super(inputSource);}  }
class C{  public GemFireBasicDataSource(ConfiguredDataSourceProperties configs) throws SQLException {  super(configs);  loadDriver();}  }
class C{  private Job makeJob(String query){  JobConfigurationQuery jobconfigurationquery=new JobConfigurationQuery();  jobconfigurationquery.setQuery(query);  jobconfigurationquery.setCreateDisposition("CREATE_IF_NEEDED");  JobConfiguration jobconfiguration=new JobConfiguration();  jobconfiguration.setQuery(jobconfigurationquery);  JobReference jobreference=new JobReference();  jobreference.setProjectId(projectId);  Job newJob=new Job();  newJob.setConfiguration(jobconfiguration);  newJob.setJobReference(jobreference);  return newJob;}  }
class C{  public LayoutParams(int width,int height,int x,int y){  super(width,height);  this.x=x;  this.y=y;}  }
class C{  public void addHeadingPitchRollAnimator(Angle beginHeading,Angle endHeading,Angle beginPitch,Angle endPitch,Angle beginRoll,Angle endRoll){  this.gotoAnimControl.remove(VIEW_ANIM_PITCH);  this.gotoAnimControl.remove(VIEW_ANIM_HEADING);  CompoundAnimator headingPitchAnimator=ViewUtil.createHeadingPitchRollAnimator(this.getView(),beginHeading,endHeading,beginPitch,endPitch,beginRoll,endRoll);  this.gotoAnimControl.put(VIEW_ANIM_HEADING_PITCH,headingPitchAnimator);  this.getView().firePropertyChange(AVKey.VIEW,null,this.getView());}  }
class C{  public void store(OutputStream outStream) throws IOException {  Properties properties=new Properties();  for (  Map.Entry<String,Handle> handle : handles.entrySet()) {    String handleId=handle.getKey();    PropertyTable handleProperties=handle.getValue().getProperties();    JSONObject value=new JSONObject();    value.putAll(handleProperties);    properties.put(handleId,value.toJSONString());  }  properties.store(outStream,null);}  }
class C{  public void applyBodyTorque(float torque){  getBody().applyTorque(torque);}  }
class C{  @Override public boolean canSpawnPig(World world,double x,double y,double z){  return getNumPigs() > 0;}  }
class C{  public static void addSingleCrystallization(Block input,ItemStack output,float xp){  addCrystallization(input,output,null,xp);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static void fill(int[] array,int value){  for (int i=0; i < array.length; i++) {    array[i]=value;  }}  }
class C{  public void configure(){  SerialTrafficController.instance().connectPort(this);  jmri.InstanceManager.setTurnoutManager(jmri.jmrix.grapevine.SerialTurnoutManager.instance());  jmri.InstanceManager.setLightManager(jmri.jmrix.grapevine.SerialLightManager.instance());  SerialSensorManager s;  jmri.InstanceManager.setSensorManager(s=jmri.jmrix.grapevine.SerialSensorManager.instance());  SerialTrafficController.instance().setSensorManager(s);  jmri.jmrix.grapevine.ActiveFlag.setActive();}  }
class C{  public static float magnitudeToDb(float squareMag){  if (squareMag == 0)   return 0;  return (float)(20 * Math.log10(squareMag));}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_KEY_1__KEY_ID_1:    setKeyId_1(KEY_ID_1_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  protected double priorVal(double[][] dist){  return ContingencyTables.entropyOverColumns(dist);}  }
class C{  protected void parseData(){  if (parsedData == null) {    if (data == null)     data="";    int nLines=countChar(data,'\n') + 1;    if (nLines <= 1) {      parsedData=new String[1];      parsedData[0]=data;    } else {      int i=0;      int fromIndex=0;      int toIndex=0;      parsedData=new String[nLines];      while ((toIndex=data.indexOf('\n',fromIndex)) != -1) {        parsedData[i]=data.substring(fromIndex,toIndex);        fromIndex=toIndex + 1;        i++;      }      parsedData[nLines - 1]=data.substring(fromIndex,data.length());    }  }}  }
class C{  public void append(int key,Double value){  if (mSize != 0 && key <= mKeys[mSize - 1]) {    put(key,value);    return;  }  if (mGarbage && mSize >= mKeys.length) {    gc();  }  int pos=mSize;  if (pos >= mKeys.length) {    int n=idealIntArraySize(pos + 1);    int[] nkeys=new int[n];    Arrays.fill(nkeys,-1);    Double[] nvalues=new Double[n];    System.arraycopy(mKeys,0,nkeys,0,mKeys.length);    System.arraycopy(mValues,0,nvalues,0,mValues.length);    mKeys=nkeys;    mValues=nvalues;  }  mKeys[pos]=key;  mValues[pos]=value;  mSize=pos + 1;}  }
class C{  public static Vec meanVector(DataSet dataSet){  DenseVector dv=new DenseVector(dataSet.getNumNumericalVars());  meanVector(dv,dataSet);  return dv;}  }
class C{  public TransitionFilter(BufferedImageOp filter,String property,float minValue,float maxValue){  this.filter=filter;  this.property=property;  this.minValue=minValue;  this.maxValue=maxValue;  try {    BeanInfo info=Introspector.getBeanInfo(filter.getClass());    PropertyDescriptor[] pds=info.getPropertyDescriptors();    for (int i=0; i < pds.length; i++) {      PropertyDescriptor pd=pds[i];      if (property.equals(pd.getName())) {        method=pd.getWriteMethod();        break;      }    }    if (method == null)     throw new IllegalArgumentException("No such property in object: " + property);  } catch (  IntrospectionException e) {    throw new IllegalArgumentException(e.toString());  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void checkConvergence(){  double maximum=Math.abs(mGridErrors[mExtremalIndices.get(0)]);  for (int i=1; i < mExtremalIndices.size(); i++) {    double current=Math.abs(mGridErrors[mExtremalIndices.get(i)]);    if (current > maximum) {      maximum=current;    }  }  double convergence=maximum - Math.abs(mDelta);  mConverged=convergence < CONVERGENCE_THRESHOLD;}  }
class C{  public EventBusHandler(Vertx vertx,String apiPath,String sockPath,String addressPrefix,String addressPathPattern){  this.vertx=vertx;  this.apiPath=apiPath;  this.sockPath=sockPath;  this.addressPrefix=addressPrefix;  this.adressPathPattern=Pattern.compile(apiPath + addressPathPattern);}  }
class C{  public void updateCharacterStream(String columnLabel,java.io.Reader reader,long length) throws SQLException {  throw new SQLFeatureNotSupportedException(resBundle.handleGetObject("jdbcrowsetimpl.featnotsupp").toString());}  }
class C{  public DERSequence(ASN1EncodableVector v){  super(v);}  }
class C{  public void waitLocalShardsStarted(){  if (localShardsToStart.size() > 0) {    try {      if (latch.await(600,TimeUnit.SECONDS))       logger.debug("All local shards started."); else       logger.error("Some local shards did not start {}",localShardsToStart);    } catch (    InterruptedException e) {      logger.error("Interrupred before all local shards started",e);    }  } else {    logger.debug("No shard to start");  }  indicesLifecycle.removeListener(this);}  }
class C{  public void initTKF91(){  int iNumNodes=iParent.length;  double iBeta[]=new double[iNumNodes];  iB=new double[iNumNodes];  iE=new double[iNumNodes];  iH=new double[iNumNodes];  iN=new double[iNumNodes];  iInitial=1.0;  for (int i=0; i < iNumNodes; i++) {    if (i == iNumNodes - 1) {      iBeta[i]=1.0 / iMu;      iH[i]=0.0;    } else {      iBeta[i]=Math.exp((iLambda - iMu) * iTau[i]);      iBeta[i]=(1.0 - iBeta[i]) / (iMu - iLambda * iBeta[i]);      iH[i]=Math.exp(-iMu * iTau[i]) * (1.0 - iLambda * iBeta[i]);    }    iB[i]=iLambda * iBeta[i];    iE[i]=iMu * iBeta[i];    iN[i]=(1.0 - iMu * iBeta[i]) * (1.0 - iB[i]) - iH[i];    iInitial*=(1.0 - iB[i]);  }}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public void makePath(String path,byte[] data,CreateMode createMode,boolean retryOnConnLoss) throws KeeperException, InterruptedException {  makePath(path,data,createMode,null,retryOnConnLoss);}  }
class C{  public final TextBuilder append(String str){  return (str == null) ? append("null") : append(str,0,str.length());}  }
class C{  public T findByCommitCounter(final long commitCounter){  if (commitCounter < 0L)   throw new IllegalArgumentException();  final Lock lock=readLock();  lock.lock();  try {    @SuppressWarnings("unchecked") final ITupleIterator<T> itr=rangeIterator(null,null,0,IRangeQuery.DEFAULT | IRangeQuery.REVERSE,null);    while (itr.hasNext()) {      final ITuple<T> t=itr.next();      final T r=t.getObject();      final IRootBlockView rb=r.getRootBlock();      if (rb.getCommitCounter() <= commitCounter) {        return r;      }    }    return null;  }  finally {    lock.unlock();  }}  }
class C{  @Override public T copy(Kryo kryo,T original){  try {    preSerialize(original);    try (CopyStream output=new CopyStream(4096)){      HTMObjectOutput writer=serializer.getObjectOutput(output);      writer.writeObject(original,original.getClass());      writer.close();      try (InputStream input=output.toInputStream()){        HTMObjectInput reader=serializer.getObjectInput(input);        T t=(T)reader.readObject(original.getClass());        postDeSerialize(t);        return t;      }     }   } catch (  Exception e) {    throw new KryoException(e);  }}  }
class C{  @Override protected void finalize() throws Throwable {  mTokens.clear();  mTokens=null;  mTokensData.clear();  mTokensData=null;  super.finalize();}  }
class C{  public void deleteGeneratedFiles(){synchronized (generatedFiles) {    Enumeration<File> enumeration=generatedFiles.elements();    while (enumeration.hasMoreElements()) {      File file=enumeration.nextElement();      file.delete();    }    generatedFiles.removeAllElements();  }}  }
class C{  public BlendedInfixSuggester(Directory dir,Analyzer indexAnalyzer,Analyzer queryAnalyzer,int minPrefixChars,BlenderType blenderType,int numFactor,Double exponent,boolean commitOnBuild,boolean allTermsRequired,boolean highlight) throws IOException {  super(dir,indexAnalyzer,queryAnalyzer,minPrefixChars,commitOnBuild,allTermsRequired,highlight);  this.blenderType=blenderType;  this.numFactor=numFactor;  if (exponent != null) {    this.exponent=exponent;  }}  }
class C{  public Name(String name){  if (name == null) {    throw new NullPointerException("name");  }  if (!isValid(name)) {    throw new IllegalArgumentException(name);  }  this.name=name.intern();}  }
class C{  public static void saveSerializable(Context context,Object objectToSave,String fileName){  File SettingsFile=new File(Environment.getExternalStorageDirectory(),"/Domoticz/DomoticzSettings.txt");  final String sPath=SettingsFile.getPath().substring(0,SettingsFile.getPath().lastIndexOf("/"));  boolean mkdirsResultIsOk=new File(sPath + "/").mkdirs();  String combinedFilename=sPath + "/" + fileName;  try {    ObjectOutputStream output=new ObjectOutputStream(new FileOutputStream(combinedFilename));    output.writeObject(objectToSave);    output.close();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  private double minIgnoreNaN(double a,double b){  if (Double.isNaN(a)) {    return b;  }  if (Double.isNaN(b)) {    return a;  }  return Math.min(a,b);}  }
class C{  int findMinGrandChild(int index){  int leftChildIndex=getLeftChildIndex(index);  if (leftChildIndex < 0) {    return -1;  }  return findMin(getLeftChildIndex(leftChildIndex),4);}  }
class C{  void verboseMessage(String message){  if (verboseFlag) {    System.err.println(message);  }}  }
class C{  public static int ENOPROTOOPT(){  return Errno.ENOPROTOOPT.intValue();}  }
class C{  public long run(String[] args) throws Exception {  int depth=Integer.parseInt(args[0]);  int nbatches=Integer.parseInt(args[1]);  int ncycles=Integer.parseInt(args[2]);  Node[] trees=genTrees(depth,ncycles);  StreamBuffer sbuf=new StreamBuffer();  ObjectOutputStream oout=new ObjectOutputStream(sbuf.getOutputStream());  ObjectInputStream oin=new ObjectInputStream(sbuf.getInputStream());  doReps(oout,oin,sbuf,trees,1);  long start=System.currentTimeMillis();  doReps(oout,oin,sbuf,trees,nbatches);  return System.currentTimeMillis() - start;}  }
class C{  public ClassPatternRule(String glob,String message){  if (glob == null) {    throw new NullPointerException("glob");  }  this.glob=glob;  this.pattern=AsmUtils.glob2Pattern(glob);  this.message=message;}  }
class C{  public static String create(List<String> pathSegments,String defaultHostport,String defaultScheme){  return create(join(pathSegments),defaultHostport,defaultScheme);}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  Log.i(TAG,"called onCreate");  super.onCreate(savedInstanceState);  getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);  setContentView(R.layout.activity_color_blob_detection);  mOpenCvCameraView=(CameraBridgeViewBase)findViewById(R.id.color_blob_detection_activity_surface_view);  mOpenCvCameraView.setCvCameraViewListener(this);}  }
class C{  void offsetMediaView(boolean viewerVisible,float offset){  if (viewerVisible) {    viewer.setTranslationY(-offset);    viewer.setVisibility(View.VISIBLE);    if (repostHint.getVisibility() == View.VISIBLE) {      repostHint.setTranslationY(viewer.getPaddingTop() - repostHint.getPivotY() - offset);    }  } else {    viewer.setVisibility(View.INVISIBLE);  }}  }
class C{  public void addCommand(Command cmd,int offset){  menuBar.addCommand(cmd,offset);}  }
class C{  protected void clearOrCreateWindow(String name){  if (mWindow == null) {    mWindow=new CursorWindow(name);  } else {    mWindow.clear();  }}  }
class C{  void free(ClientSocket stream){  success();  _activeCount.decrementAndGet();synchronized (this) {    int size=(_idleHead - _idleTail + _idle.length) % _idle.length;    if (_state != State.CLOSED && size < _idleSize) {      _idleHead=(_idleHead + 1) % _idle.length;      _idle[_idleHead]=stream;      stream=null;    }    long now=CurrentTime.currentTime();    long prevSuccessTime=_prevSuccessTime;    if (prevSuccessTime > 0) {      _latencyFactor=(0.95 * _latencyFactor + 0.05 * (now - prevSuccessTime));    }    if (_activeCount.get() > 0)     _prevSuccessTime=now; else     _prevSuccessTime=0;    _lastSuccessTime=now;    if (log.isLoggable(Level.FINEST)) {      logFinest(L.l("free: _lastSuccessTime={0}, _failTime={1}",now,_failTime));    }  }  updateWarmup();  long now=CurrentTime.currentTime();  long maxIdleTime=_loadBalanceIdleTime;  ClientSocket oldStream=null;  do {    oldStream=null;synchronized (this) {      if (_idleHead != _idleTail) {        int nextTail=(_idleTail + 1) % _idle.length;        oldStream=_idle[nextTail];        if (oldStream != null && oldStream.getIdleStartTime() + maxIdleTime < now) {          _idle[nextTail]=null;          _idleTail=nextTail;        } else         oldStream=null;      }    }    if (oldStream != null)     oldStream.closeImpl();  } while (oldStream != null);  if (stream != null) {    stream.closeImpl();  }}  }
class C{  static void testPath(String s){  Path path=Paths.get(s);  log.println(path);  URI uri=path.toUri();  log.println("  --> " + uri);  Path result=Paths.get(uri);  log.println("  --> " + result);  if (!result.equals(path.toAbsolutePath())) {    log.println("FAIL: Expected " + path + ", got "+ result);    failures++;  }  log.println();}  }
class C{  public int valueOf(final String str){  final int i=Integer.parseInt(str);  check(i);  return i;}  }
class C{  public void addRule(final Rule rule){  rule.setId(ruleIdCounter++);  rules.add(rule);}  }
class C{  public Swarm fraction(Fraction fraction){  this.explicitlyInstalledFractions.add(fraction);  return this;}  }
class C{  public boolean processCC() throws IllegalArgumentException {  log.fine(p_mpp.getHostAddress() + " " + p_mpp.getHostPort()+ ", Timeout="+ getTimeout()+ "; Proxy="+ p_mpp.getProxyAddress()+ " "+ p_mpp.getProxyPort()+ " "+ p_mpp.getProxyLogon()+ " "+ p_mpp.getProxyPassword());  StringBuffer param=new StringBuffer();  if (p_mp.getTrxType().equals(MPayment.TRXTYPE_Sales))   param.append("TRXTYPE=").append(p_mp.getTrxType()); else   throw new IllegalArgumentException("PP_PayFlowPro TrxType not supported - " + p_mp.getTrxType());  param.append("&TENDER=C").append("&ACCT=").append(MPaymentValidate.checkNumeric(p_mp.getCreditCardNumber()));  param.append("&EXPDATE=");  String month=String.valueOf(p_mp.getCreditCardExpMM());  if (month.length() == 1)   param.append("0");  param.append(month);  int expYY=p_mp.getCreditCardExpYY();  if (expYY > 2000)   expYY-=2000;  String year=String.valueOf(expYY);  if (year.length() == 1)   param.append("0");  param.append(year);  param.append("&AMT=").append(p_mp.getPayAmt());  param.append(createPair("&AUTHCODE",p_mp.getVoiceAuthCode(),6));  param.append(createPair("&ORIGID",p_mp.getOrig_TrxID(),12));  param.append(createPair("&CVV2",p_mp.getCreditCardVV(),4));  param.append(createPair("&NAME",p_mp.getA_Name(),30));  param.append(createPair("&STREET",p_mp.getA_Street(),30));  param.append(createPair("&ZIP",p_mp.getA_Zip(),9));  param.append(createPair("&EMAIL",p_mp.getA_EMail(),64));  param.append(createPair("&SHIPTOZIP",p_mp.getA_Zip(),6));  param.append(createPair("&TAXAMT",p_mp.getTaxAmt(),10));  param.append(createPair("&INVNUM",p_mp.getC_Invoice_ID(),9));  param.append(createPair("&COMMENT1",p_mp.getC_Payment_ID(),128));  param.append(createPair("&COMMENT2",p_mp.getC_BPartner_ID(),128));  return process(param.toString());}  }
class C{  public long rss(){  return Long.parseLong(fields[23]);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private AlignedFormPair backwardPass(){  ForwardSearchState currState=chart[params.src.length()][params.trg.length()];  if (currState == null) {    throw new RuntimeException("Edit distance returned nothing for " + params.src + "-"+ params.trg);  }  double cost=currState.viterbiBackwardCost;  List<Operation> ops=new ArrayList<Operation>();  while (currState.viterbiBackptr != null) {    int thisSrcIdx=currState.srcIndex;    int thisTrgIdx=currState.trgIndex;    int prevSrcIdx=currState.viterbiBackptr.srcIndex;    int prevTrgIdx=currState.viterbiBackptr.trgIndex;    Operation op;    if (prevSrcIdx == thisSrcIdx) {      op=Operation.INSERT;    } else     if (prevTrgIdx == thisTrgIdx) {      op=Operation.DELETE;    } else {      if (params.src.charAt(prevSrcIdx).equals(params.trg.charAt(prevTrgIdx))) {        op=Operation.EQUAL;      } else {        op=Operation.SUBST;      }    }    ops.add(0,op);    currState=currState.viterbiBackptr;  }  return new AlignedFormPair(params.src,params.trg,ops,cost);}  }
class C{  public WebSocketManager(String url,OkHttpClient client,Headers defaultHeaders,String token){  this.url=url;  this.client=client;  this.defaultHeaders=defaultHeaders;  this.token=token;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:05.390 -0500",hash_original_method="248CC4EEE70871BA210925CAD15B2704",hash_generated_method="2D09E4D3F3C30F555B778BB8390517E8") public String encodeBody(){  String retval="";  if (address.getAddressType() == AddressImpl.ADDRESS_SPEC) {    retval+=LESS_THAN;  }  retval+=address.encode();  if (address.getAddressType() == AddressImpl.ADDRESS_SPEC) {    retval+=GREATER_THAN;  }  if (!parameters.isEmpty()) {    retval+=SEMICOLON + parameters.encode();  }  return retval;}  }
class C{  private void prepareAckMsg(){  LOGGER.debug("Entered into prepareAckMsg, ModifyRsn: " + modifyRsn);  String userName=propertyTaxUtil.getApproverUserName(approverPositionId);  final String action=getModifyReasonString();  setAckMessage(getText("property.modify.forward.success",new String[]{action,userName,propertyModel.getApplicationNo()}));  LOGGER.debug("AckMessage: " + getAckMessage() + "\nExiting from prepareAckMsg");}  }
class C{  private static void copyFileWithoutClosingOutputStream(InputStream stream,OutputStream outStream) throws IOException {  final byte[] buffer=new byte[CarbonCommonConstants.BYTEBUFFER_SIZE];  int len;  try {    for (; ; ) {      len=stream.read(buffer);      if (len == -1) {        return;      }      outStream.write(buffer,0,len);    }  } catch (  IOException e) {    throw e;  } finally {    CarbonUtil.closeStreams(stream);  }}  }
class C{  @Override public final int computeHashCode(long val){  return HashFunctions.hash(val);}  }
class C{  public static void nextGreaterElements(int[] a){  int i=0;  Stack<Integer> stack=new LinkedStack<>();  for (; i < a.length - 1; i++) {    stack.push(a[i]);    while (!stack.isEmpty()) {      Integer pop=stack.pop();      if (pop < a[i + 1]) {        System.out.println(pop + "->" + a[i + 1]);      } else {        stack.push(pop);        break;      }    }  }  while (!stack.isEmpty()) {    System.out.println(stack.pop() + "->" + -1);  }  System.out.println(a[i] + "->" + -1);}  }
class C{  public PriorityQueue(int initialCapacity,Comparator<? super E> comparator){  if (initialCapacity < 1) {    throw new IllegalArgumentException();  }  elements=newElementArray(initialCapacity);  this.comparator=comparator;}  }
class C{  private int uint16FromData(int offset){  return twoBytesToInt(Arrays.copyOfRange(data(),offset,offset + 2),Constants.CC2540_BYTE_ORDER);}  }
class C{  protected Component createCell(Object value,int row,int column,boolean editable){  if (row == -1) {    Label header=new Label((String)value);    header.setUIID(getUIID() + "Header");    header.getUnselectedStyle().setAlignment(titleAlignment);    header.getSelectedStyle().setAlignment(titleAlignment);    header.setFocusable(true);    return header;  }  if (editable) {    TextField cell=new TextField("" + value,-1);    cell.setLeftAndRightEditingTrigger(false);    cell.setUIID(getUIID() + "Cell");    return cell;  }  Label cell=new Label("" + value);  cell.setUIID(getUIID() + "Cell");  cell.getUnselectedStyle().setAlignment(cellAlignment);  cell.getSelectedStyle().setAlignment(cellAlignment);  cell.setFocusable(true);  return cell;}  }
class C{  @Ignore("TODO") @Test public void testC2SDeltaPropagationFailedStats2() throws Exception {}  }
class C{  public double efficiency(V v){  double degree=g.degree(v);  if (degree == 0)   return 0; else   return effectiveSize(v) / degree;}  }
class C{  void doFancyVersion() throws Exception {  for (int ii=Character.MIN_CODE_POINT; ii < Character.MIN_SUPPLEMENTARY_CODE_POINT; ii+=4) {    if (ii == Character.MIN_SURROGATE) {      ii=Character.MAX_SURROGATE - 3;      break;    }    doFancyTest(ii,ii + 1,ii + 2,ii + 3);  }  for (int ii=Character.MIN_SUPPLEMENTARY_CODE_POINT; ii <= Character.MAX_CODE_POINT; ii+=2000) {    doFancyTest(ii,ii + 1,ii + 2,ii + 3);  }}  }
class C{  public void waitForCGLinkState(FunctionalAPIImpl impl,ConsistencyGroupUID cgUID,PipeState... desiredPipeState) throws RecoverPointException {  int numRetries=0;  String cgName=null;  try {    cgName=impl.getGroupName(cgUID);  } catch (  FunctionalAPIActionFailedException_Exception e) {    throw RecoverPointException.exceptions.cantCheckLinkState(cgName,e);  }catch (  FunctionalAPIInternalError_Exception e) {    throw RecoverPointException.exceptions.cantCheckLinkState(cgName,e);  }  boolean isInitializing=false;  boolean allLinksInDesiredState=false;  while ((!allLinksInDesiredState && numRetries++ < MAX_RETRIES) || isInitializing) {    ConsistencyGroupState cgState=null;    isInitializing=false;    try {      cgState=impl.getGroupState(cgUID);      List<String> desiredPipeStates=new ArrayList<String>();      if (desiredPipeState != null) {        for (        PipeState pipeState : desiredPipeState) {          desiredPipeStates.add(pipeState.name());        }      }      for (      ConsistencyGroupLinkState linkstate : cgState.getLinksStates()) {        PipeState pipeState=linkstate.getPipeState();        logger.info("CG link state is " + pipeState.toString() + "; desired states are: "+ desiredPipeStates.toString());        if (desiredPipeStates.contains(PipeState.ACTIVE.name())) {          if (PipeState.ACTIVE.equals(pipeState)) {            allLinksInDesiredState=true;          } else           if (PipeState.STAND_BY.equals(pipeState)) {            logger.info("CG link state is STAND_BY, valid state for MetroPoint.");          } else           if (PipeState.PAUSED.equals(pipeState)) {            if (desiredPipeStates.contains(PipeState.PAUSED.name())) {              logger.info("CG link state is PAUSED.");              allLinksInDesiredState=true;            } else {              logger.info("CG link state is PAUSED.  Resume link.");              impl.startGroupTransfer(cgUID);              allLinksInDesiredState=false;              break;            }          } else           if (PipeState.INITIALIZING.equals(pipeState)) {            logger.info("CG link state is INITIALIZING.");            isInitializing=true;            allLinksInDesiredState=false;            break;          } else {            logger.info("CG link state is not active. It is: " + pipeState.toString());            allLinksInDesiredState=false;            break;          }        } else         if (desiredPipeStates.contains(PipeState.SNAP_IDLE.name())) {          if (PipeState.SNAP_IDLE.equals(pipeState) || PipeState.SNAP_SHIPPING.equals(pipeState)) {            allLinksInDesiredState=true;            break;          }        } else {          if (desiredPipeStates.contains(pipeState.name())) {            logger.info("CG link state matches the desired state.");            allLinksInDesiredState=true;          } else {            logger.info("CG link state is not in desired state. It is: " + pipeState.toString());            allLinksInDesiredState=false;            break;          }        }      }      if (allLinksInDesiredState) {        return;      } else {        logger.info("All links not in desired state.  Sleep 15 seconds and retry");        Thread.sleep(WAIT_FOR_LINKS_SLEEP_INTERVAL);      }    } catch (    FunctionalAPIActionFailedException_Exception e) {      throw RecoverPointException.exceptions.cantCheckLinkState(cgName,e);    }catch (    FunctionalAPIInternalError_Exception e) {      throw RecoverPointException.exceptions.cantCheckLinkState(cgName,e);    }catch (    InterruptedException e) {      throw RecoverPointException.exceptions.cantCheckLinkState(cgName,e);    }  }  throw RecoverPointException.exceptions.cgLinksFailedToBecomeActive(cgName);}  }
class C{  private GraphBuilder(boolean directed){  this.directed=directed;}  }
class C{  public static void fill(short[] array,short value){  for (int i=0; i < array.length; i++) {    array[i]=value;  }}  }
class C{  public Object afterInvoke(Object object,String methodName,Object[] arguments,Object result){  ((List)calls.get(methodName)).add(new Long(System.currentTimeMillis()));  return result;}  }
class C{  public static long dateValueFromAbsoluteDay(long absoluteDay){  long d=absoluteDay + 719468;  long y100=0, offset;  if (d > 578040) {    long y400=d / 146097;    d-=y400 * 146097;    y100=d / 36524;    d-=y100 * 36524;    offset=y400 * 400 + y100 * 100;  } else {    d+=292200000002L;    offset=-800000000;  }  long y4=d / 1461;  d-=y4 * 1461;  long y=d / 365;  d-=y * 365;  if (d == 0 && (y == 4 || y100 == 4)) {    y--;    d+=365;  }  y+=offset + y4 * 4;  int m=((int)d * 2 + 1) * 5 / 306;  d-=DAYS_OFFSET[m] - 1;  if (m >= 10) {    y++;    m-=12;  }  return dateValue(y,m + 3,(int)d);}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  public void tabSelectingEffect(long time,int id){  int index=TabModelUtils.getTabIndexById(mTabModel,id);  startAnimation(time,OverviewAnimationType.TAB_FOCUSED,index,-1,false);}  }
class C{  public int height(){  return height;}  }
class C{  public boolean isClosed(){  Object oo=get_Value(COLUMNNAME_IsClosed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public String toString(){  return "" + s;}  }
class C{  private void firePropertyChangeEvent(PropertyChangeEvent event){  Object[] listeners=fClientListeners.getListeners();  for (int i=0; i < listeners.length; i++)   ((IPropertyChangeListener)listeners[i]).propertyChange(event);}  }
class C{  public void removeListener(final IBookmarkManagerListener listener){  m_listeners.removeListener(listener);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private Injector createInjectorFor(final Class<?>[] classes) throws InitializationError {  final List<Module> modules=new ArrayList<>();  if (classes != null) {    for (    final Class<?> module : Arrays.asList(classes)) {      try {        modules.add((Module)module.newInstance());      } catch (      final ReflectiveOperationException exception) {        throw new InitializationError(exception);      }    }  }  return Guice.createInjector(modules);}  }
class C{  public boolean isIndependent(Node x,Node y,List<Node> z){  double v=this.score.localScoreDiff(variables.indexOf(x),variables.indexOf(y),varIndices(z));  this.bump=v;  return v < 0;}  }
class C{  public int recordParams(String target,CtClass[] params,boolean use0,int varNo,boolean isStatic) throws CompileError {  return gen.recordParams(params,isStatic,"$","$args","$$",use0,varNo,target,stable);}  }
class C{  public void log(String message,Exception excp){  getLog().log(new Status(IStatus.ERROR,PLUGIN_ID,message,excp));}  }
class C{  public StrBuilder replaceAll(final String searchStr,final String replaceStr){  final int searchLen=(searchStr == null ? 0 : searchStr.length());  if (searchLen > 0) {    final int replaceLen=(replaceStr == null ? 0 : replaceStr.length());    int index=indexOf(searchStr,0);    while (index >= 0) {      replaceImpl(index,index + searchLen,searchLen,replaceStr,replaceLen);      index=indexOf(searchStr,index + replaceLen);    }  }  return this;}  }
class C{  protected void doClose() throws IOException {  serverSocket.close();  identEntries.clear();  log.info("Closed ident server on port " + port + "/"+ serverSocket.getLocalPort());}  }
class C{  public Automaton<LR1Item,LR1State> createAutomaton(LRGenerator<LR1Item,LR1State> generator,GrammarInfo grammarInfo) throws GeneratorException {  this.generator=generator;  this.grammarInfo=grammarInfo;  initCreation();  LR0Item startStateKernelItem=this.queue.remove(0).getLR0Kernel().getFirstItem();  Set<LR0Item> startStateItemKernel=set();  startStateItemKernel.add(startStateKernelItem);  Set<LALR1CPItem> startStateItem=set();  startStateItem.add(new LALR1CPItem(startStateKernelItem,grammarInfo.getTerminalSet(Placeholder)));  LALR1CPState startStateKernel=new LALR1CPState(startStateItem);  Map<LALR1CPState,LALR1CPState> kernel2closure=map();  Map<LALR1CPItem,CPGoToLink> goToLinks=map();  Map<LALR1CPItem,LALR1CPState> itemStates=map();  Set<Edge> lr0Edges=set();{    Set<LALR1CPState> queue=set();    queue.add(startStateKernel);    kernel2closure.put(startStateKernel,startStateKernel.closure(grammarInfo));    while (!queue.isEmpty()) {      LALR1CPState stateKernel=queue.iterator().next();      queue.remove(stateKernel);      printDebugMessages();      LALR1CPState state=kernel2closure.get(stateKernel);      Set<Symbol> shiftedSymbols=new HashSet<Symbol>();      for (      LALR1CPItem item : state.getItems()) {        itemStates.put(item,state);        if (item.isShiftable()) {          Symbol symbol=item.getNextSymbol();          if (symbol == EndOfInputStream) {            lr0Edges.add(createAcceptEdge(stateKernel,symbol));          } else           if (shiftedSymbols.add(symbol)) {            Tuple2<LALR1CPState,List<CPGoToLink>> s=state.goToCP(symbol);            LALR1CPState shiftedStateKernel=s.get1();            List<CPGoToLink> shiftedStateCPLinks=s.get2();            LALR1CPState equalStateLALR1CP=kernel2closure.get(shiftedStateKernel);            LALR1CPState gotoLinkTargetState=equalStateLALR1CP;            if (equalStateLALR1CP == null) {              LALR1CPState shiftedState=shiftedStateKernel.closure(grammarInfo);              kernel2closure.put(shiftedStateKernel,shiftedState);              queue.add(shiftedStateKernel);              gotoLinkTargetState=shiftedState;            }            for (            CPGoToLink link : shiftedStateCPLinks) {              LALR1CPItem todoItem=link.getSource();              if (goToLinks.containsKey(todoItem))               throw new RuntimeException("Double gotoLink!");              goToLinks.put(todoItem,link.withTargetState(gotoLinkTargetState));            }            lr0Edges.add(new Edge(stateKernel,symbol,shiftedStateKernel,item.getLR0Item()));          }        }      }    }  }  Map<LALR1CPItem,EfficientTerminalSet> lookaheads=map();{    Set<LALR1CPItem> queue=set();    LALR1CPState st=kernel2closure.get(startStateKernel);    LALR1CPItem firstItem=st.getItemWithLookaheadByLR0Item(startStateKernelItem);    queue.add(firstItem);    lookaheads.put(firstItem,firstItem.getLookaheads());    EfficientTerminalSet empty=firstItem.getLookaheads().empty();    for (    LALR1CPState sta : kernel2closure.values()) {      for (      LALR1CPItem ite : sta.getItems()) {        if (ite.getPosition() == 0) {          queue.add(ite);          lookaheads.put(ite,ite.getLookaheads());        } else         lookaheads.put(ite,empty);      }    }    while (!queue.isEmpty()) {      LALR1CPItem item=queue.iterator().next();      queue.remove(item);      EfficientTerminalSet sourceItemLookaheads=lookaheads.get(item);      CPGoToLink gotoLink=goToLinks.get(item);      if (gotoLink != null) {        LALR1CPState targetState=gotoLink.getTargetState();        LALR1CPItem targetItem=targetState.getItemWithLookaheadByLR0Item(gotoLink.getTargetItem());        EfficientTerminalSet before=lookaheads.get(targetItem);        EfficientTerminalSet after=before.plusAll(sourceItemLookaheads);        if (!before.equals(after)) {          lookaheads.put(targetItem,after);          queue.add(targetItem);        }      }      for (      LR0Item closureLink : item.getClosureLinks()) {        LALR1CPState targetState=itemStates.get(item);        LALR1CPItem targetItem=targetState.getItemWithLookaheadByLR0Item(closureLink);        EfficientTerminalSet before=lookaheads.get(targetItem);        EfficientTerminalSet after=before.plusAll(sourceItemLookaheads);        after=after.plusAll(targetItem.getLookaheads());        if (!before.equals(after)) {          lookaheads.put(targetItem,after);          queue.add(targetItem);        }      }    }  }  Map<LALR1CPState,LR1State> lalr1CPToLR1Map=map();  for (  LALR1CPState state : kernel2closure.keySet()) {    HashSet<LR1Item> lr1Items=new HashSet<LR1Item>();    LALR1CPState stateWithClosure=kernel2closure.get(state);    for (    LR0Item strippedItem : state.getStrippedItems()) {      LALR1CPItem item=stateWithClosure.getItemWithLookaheadByLR0Item(strippedItem);      EfficientTerminalSet terminals=lookaheads.get(item);      lr1Items.add(new LR1Item(strippedItem,terminals));    }    LR1State lr1State=new LR1State(lr1Items);    lalr1CPToLR1Map.put(state,lr1State);    dfaStates.add(lr1State);  }  for (  Edge edge : lr0Edges) {    this.dfaEdges.add(new Edge(lalr1CPToLR1Map.get(edge.getSrc()),edge.getSymbol(),lalr1CPToLR1Map.get(edge.getDest()),edge.getSrcItem()));  }  printDebugResult();  return ret;}  }
class C{  private void loadStorage(boolean reload){  if (!reload && m_qtyOnHand != null && m_qtyAvailable != null) {    return;  }  final String sql="SELECT " + " bomQtyAvailable(" + COLUMNNAME_M_Product_ID + ", "+ COLUMNNAME_M_Warehouse_ID+ ", 0)"+ ",bomQtyOnHand("+ COLUMNNAME_M_Product_ID+ ", "+ COLUMNNAME_M_Warehouse_ID+ ", 0)"+ " FROM "+ Table_Name+ " WHERE "+ COLUMNNAME_PP_Order_BOMLine_ID+ "=?";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,get_TrxName());    DB.setParameters(pstmt,new Object[]{get_ID()});    rs=pstmt.executeQuery();    if (rs.next()) {      m_qtyAvailable=rs.getBigDecimal(1);      m_qtyOnHand=rs.getBigDecimal(2);    }  } catch (  SQLException e) {    throw new DBException(e,sql);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case StextPackage.GUARD__EXPRESSION:    return getExpression();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static <T>boolean addAll(Collection<T> self,Iterable<? extends T> items){  boolean changed=false;  for (  T next : items) {    if (self.add(next))     changed=true;  }  return changed;}  }
class C{  protected boolean isUseIdentityHashCode(){  return useIdentityHashCode;}  }
class C{  public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("PPreferredServiceParser.parse");  try {    this.lexer.match(TokenTypes.P_PREFERRED_SERVICE);    this.lexer.SPorHT();    this.lexer.match(':');    this.lexer.SPorHT();    PPreferredService pps=new PPreferredService();    String urn=this.lexer.getBuffer();    if (urn.contains(ParameterNamesIms.SERVICE_ID)) {      if (urn.contains(ParameterNamesIms.SERVICE_ID_LABEL)) {        String serviceID=urn.split(ParameterNamesIms.SERVICE_ID_LABEL + ".")[1];        if (serviceID.trim().equals(""))         try {          throw new InvalidArgumentException("URN should atleast have one sub-service");        } catch (        InvalidArgumentException e) {          e.printStackTrace();        } else         pps.setSubserviceIdentifiers(serviceID);      } else       if (urn.contains(ParameterNamesIms.APPLICATION_ID_LABEL)) {        String appID=urn.split(ParameterNamesIms.APPLICATION_ID_LABEL)[1];        if (appID.trim().equals(""))         try {          throw new InvalidArgumentException("URN should atleast have one sub-application");        } catch (        InvalidArgumentException e) {          e.printStackTrace();        } else         pps.setApplicationIdentifiers(appID);      } else {        try {          throw new InvalidArgumentException("URN is not well formed");        } catch (        InvalidArgumentException e) {          e.printStackTrace();        }      }    }    super.parse();    return pps;  }  finally {    if (debug)     dbg_enter("PPreferredServiceParser.parse");  }}  }
class C{  public void auxConnectionOpened(IOFConnectionBackend connection){  log.debug("[{}] - Switch Handshake - unhandled aux connection event",getDpid());}  }
class C{  public int enumerate(Thread[] threads){  return enumerate(threads,true);}  }
class C{  @Override public CreditCard colorTitle(@ColorRes int colorTitle){  mColorTitle=colorTitle;  return this;}  }
class C{  public IMethod findOverriddenMethodInType(IType overriddenType,IMethod overriding) throws JavaModelException {  int flags=overriding.getFlags();  if (Flags.isPrivate(flags) || Flags.isStatic(flags) || overriding.isConstructor())   return null;  IMethod[] overriddenMethods=overriddenType.getMethods();  for (int i=0; i < overriddenMethods.length; i++) {    IMethod overridden=overriddenMethods[i];    flags=overridden.getFlags();    if (Flags.isPrivate(flags) || Flags.isStatic(flags) || overridden.isConstructor())     continue;    if (isSubsignature(overriding,overridden)) {      return overridden;    }  }  return null;}  }
class C{  public ToStringBuilder append(char value){  style.append(buffer,null,value);  return this;}  }
class C{  private String readLogFile(){  String[] logFileName=Log_OC.getLogFileNames();  StringBuilder text=new StringBuilder();  BufferedReader br=null;  try {    String line;    for (int i=logFileName.length - 1; i >= 0; i--) {      File file=new File(mLogPath,logFileName[i]);      if (file.exists()) {        if (new FileReader(file).ready()) {          br=new BufferedReader(new FileReader(file));          while ((line=br.readLine()) != null) {            text.append(line);            text.append('\n');          }        }      }    }  } catch (  IOException e) {    Log_OC.d(TAG,e.getMessage());  } finally {    if (br != null) {      try {        br.close();      } catch (      IOException e) {      }    }  }  return text.toString();}  }
class C{  public byte[] bytesValue(){  return ((byte[])value);}  }
class C{  private void writeNodeEndTag(Node node) throws IOException {  if (node.getType() != null) {    writeEndTag(node.getType().getNamespace(),node.getType().getLocalName());  } else {    writeEndTag(RDF.NAMESPACE,"Description");  }  writeNewLine();}  }
class C{  @SafeVarargs public static <Type>Validator<Type> conjunctive(@NonNull final Context context,@NonNull final Validator<Type>... validators){  return ConjunctiveValidator.create(context,R.string.default_error_message,validators);}  }
class C{  public boolean evaluate(List<String> eq,List<Integer> qty){  return evaluate(eq,qty,equipmentCriteria.root);}  }
class C{  public boolean hasHref(){  return getHref() != null;}  }
class C{  public void testSerializeDeserializeWithJaxbAnnotations() throws Exception {  ObjectMapper mapper=new ObjectMapper();  mapper.setAnnotationIntrospector(new JaxbAnnotationIntrospector());  mapper.enable(SerializationConfig.Feature.INDENT_OUTPUT);  JaxbExample ex=new JaxbExample();  QName qname=new QName("urn:hi","hello");  ex.setQname(qname);  QName qname1=new QName("urn:hi","hello1");  ex.setQname1(qname1);  ex.setAttributeProperty("attributeValue");  ex.setElementProperty("elementValue");  ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue"));  ex.setEnumProperty(EnumExample.VALUE1);  ex.setPropertyToIgnore("ignored");  StringWriter writer=new StringWriter();  mapper.writeValue(writer,ex);  writer.flush();  writer.close();  String json=writer.toString();  JsonNode node=mapper.readValue(json,JsonNode.class);  assertEquals(qname.toString(),node.get("qname").asText());  JsonNode attr=node.get("myattribute");  assertNotNull(attr);  assertEquals("attributeValue",attr.asText());  assertEquals("elementValue",node.get("myelement").asText());  assertEquals(1,node.get("mywrapped").size());  assertEquals("wrappedElementValue",node.get("mywrapped").get(0).asText());  assertEquals("Value One",node.get("enumProperty").asText());  assertNull(node.get("propertyToIgnore"));  JaxbExample readEx=mapper.readValue(json,JaxbExample.class);  assertEquals(ex.qname,readEx.qname);  assertEquals(ex.qname1,readEx.qname1);  assertEquals(ex.attributeProperty,readEx.attributeProperty);  assertEquals(ex.elementProperty,readEx.elementProperty);  assertEquals(ex.wrappedElementProperty,readEx.wrappedElementProperty);  assertEquals(ex.enumProperty,readEx.enumProperty);  assertNull(readEx.propertyToIgnore);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:16.047 -0500",hash_original_method="14F5A42293D1200CF8E952E9DCB67B90",hash_generated_method="1563039CF8B017832FF7961F544396AE") private long triggerTime(long delay,TimeUnit unit){  return triggerTime(unit.toNanos((delay < 0) ? 0 : delay));}  }
class C{  public boolean isIndicesEmbedded(){  return indicesEmbedded;}  }
class C{  public void insertCellEntry(String spreadsheet,String worksheet,int row,int column,String input) throws Exception {  URL cellFeedUrl=getWorksheet(spreadsheet,worksheet).getCellFeedUrl();  CellEntry newEntry=new CellEntry(row,column,input);  service.insert(cellFeedUrl,newEntry);}  }
class C{  public static String toString(Object object,String tagName) throws JSONException {  StringBuffer sb=new StringBuffer();  int i;  JSONArray ja;  JSONObject jo;  String key;  Iterator keys;  int length;  String string;  Object value;  if (object instanceof JSONObject) {    if (tagName != null) {      sb.append('<');      sb.append(tagName);      sb.append('>');    }    jo=(JSONObject)object;    keys=jo.keys();    while (keys.hasNext()) {      key=keys.next().toString();      value=jo.opt(key);      if (value == null) {        value="";      }      if (value instanceof String) {        string=(String)value;      } else {        string=null;      }      if ("content".equals(key)) {        if (value instanceof JSONArray) {          ja=(JSONArray)value;          length=ja.length();          for (i=0; i < length; i+=1) {            if (i > 0) {              sb.append('\n');            }            sb.append(escape(ja.get(i).toString()));          }        } else {          sb.append(escape(value.toString()));        }      } else       if (value instanceof JSONArray) {        ja=(JSONArray)value;        length=ja.length();        for (i=0; i < length; i+=1) {          value=ja.get(i);          if (value instanceof JSONArray) {            sb.append('<');            sb.append(key);            sb.append('>');            sb.append(toString(value));            sb.append("</");            sb.append(key);            sb.append('>');          } else {            sb.append(toString(value,key));          }        }      } else       if ("".equals(value)) {        sb.append('<');        sb.append(key);        sb.append("/>");      } else {        sb.append(toString(value,key));      }    }    if (tagName != null) {      sb.append("</");      sb.append(tagName);      sb.append('>');    }    return sb.toString();  } else {    if (object.getClass().isArray()) {      object=new JSONArray(object);    }    if (object instanceof JSONArray) {      ja=(JSONArray)object;      length=ja.length();      for (i=0; i < length; i+=1) {        sb.append(toString(ja.opt(i),tagName == null ? "array" : tagName));      }      return sb.toString();    } else {      string=(object == null) ? "null" : escape(object.toString());      return (tagName == null) ? "\"" + string + "\"" : (string.length() == 0) ? "<" + tagName + "/>" : "<" + tagName + ">"+ string+ "</"+ tagName+ ">";    }  }}  }
class C{  private MultiLineString extractLinework(Geometry g){  PolygonalLineworkExtracter extracter=new PolygonalLineworkExtracter();  g.apply(extracter);  List linework=extracter.getLinework();  LineString[] lines=GeometryFactory.toLineStringArray(linework);  return g.getFactory().createMultiLineString(lines);}  }
class C{  public void println(){  System.err.println(prefix + ":");}  }
class C{  public NoekeonEngine(){  _initialised=false;}  }
class C{  @Override public void removeKeyBinding(String keyBinding){  throw new InternalError("Not yet implemented");}  }
class C{  @Override public void initialize(final RPObject object){  super.initialize(object);  hidden=object.has("hidden");}  }
class C{  public void cancel(){  this.send=false;}  }
class C{  public static PDF417DetectorResult detect(BinaryBitmap image,Map<DecodeHintType,?> hints,boolean multiple) throws NotFoundException {  BitMatrix bitMatrix=image.getBlackMatrix();  List<ResultPoint[]> barcodeCoordinates=detect(multiple,bitMatrix);  if (barcodeCoordinates.isEmpty()) {    bitMatrix=bitMatrix.clone();    bitMatrix.rotate180();    barcodeCoordinates=detect(multiple,bitMatrix);  }  return new PDF417DetectorResult(bitMatrix,barcodeCoordinates);}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append(new String(day));  buffer.append('.');  buffer.append(new String(month));  buffer.append('.');  buffer.append(new String(year));  buffer.append(" (DD.MM.YYYY)");  return buffer.toString();}  }
class C{  private void removeTrack(){  asyncTasks.remove(this);  if (asyncTasks.isEmpty() || (getActiveCount() <= 1 && getQueue().isEmpty())) {    completer.accept(TrackingScheduledExecutor.this,null);  }}  }
class C{  @NotNull @ObjectiveCName("transferOwnershipWithGid:withUid:") public Promise<Void> transferOwnership(int gid,int uid){  return modules.getGroupsModule().transferOwnership(gid,uid);}  }
class C{  public void delete(long key){  int i=binarySearch(mKeys,0,mSize,key);  if (i >= 0) {    if (mValues[i] != DELETED) {      mValues[i]=DELETED;      mGarbage=true;    }  }}  }
class C{  public PertApplicationModel(){}  }
class C{  public static ImageTypeSpecifier createGrayscale(int bits,int dataType,boolean isSigned,boolean isAlphaPremultiplied){  return new ImageTypeSpecifier.Grayscale(bits,dataType,isSigned,true,isAlphaPremultiplied);}  }
class C{  public void printQuery(final Query query){  if (query != null) {    final String[] cols=query.getColumns();    final int rows=query.getRowCount();    System.out.println("[Query:" + query.getName() + "]");    for (int i=0; i < cols.length; i++) {      if (i > 0)       System.out.print(", ");      System.out.print(cols[i]);    }    System.out.println();    for (int row=1; row <= rows; row++) {      for (int col=1; col <= cols.length; col++) {        if (col > 1)         System.out.print(", ");        System.out.print(escapeString(query.getData(row,col)));      }      System.out.println();    }  }}  }
class C{  public SyncHttpClient(int httpPort){  super(false,httpPort,443);}  }
class C{  public String toString(){  return "CCache[" + m_name + ",Exp="+ getExpireMinutes()+ ", #"+ super.size()+ "]";}  }
class C{  @Override public void onSurfaceCreated(EGLConfig config){  Log.i(TAG,"onSurfaceCreated");}  }
class C{  public Boolean isAccel3DSupported(){  return accel3DSupported;}  }
class C{  @Override public Buffer clone(){  Buffer result=new Buffer();  if (size == 0)   return result;  result.head=new Segment(head);  result.head.next=result.head.prev=result.head;  for (Segment s=head.next; s != head; s=s.next) {    result.head.prev.push(new Segment(s));  }  result.size=size;  return result;}  }
class C{  protected List<String> edits(String word){  List<String> candidates=new ArrayList<String>();  for (int i=0; i < word.length(); i++) {    candidates.add(word.substring(0,i) + word.substring(i + 1));    for (char c='a'; c <= 'z'; c++) {      candidates.add(word.substring(0,i) + c + word.substring(i + 1));      candidates.add(word.substring(0,i) + c + word.substring(i));    }  }  for (char c='a'; c <= 'z'; c++) {    candidates.add(word + c);  }  for (int i=0; i < word.length() - 1; i++) {    candidates.add(word.substring(0,i) + word.substring(i + 1,i + 2) + word.substring(i,i + 1)+ word.substring(i + 2));  }  return candidates;}  }
class C{  public InterruptedIOException(){}  }
class C{  @Override public void process(V tuple){  sums+=tuple.doubleValue();  tupleAvailable=true;}  }
class C{  public ContentModel contentModel(){  if (state == null) {    return null;  } else {    return state.getModel();  }}  }
class C{  private void closeReader(){  if (dataFileStream != null)   try {    dataFileStream.close();  } catch (  IOException ioException) {    logger.error(AVRO_LOADER_INSTANCE_READ_ERROR + " : {}",ioException);    throw new RuntimeException(AVRO_LOADER_INSTANCE_READ_ERROR + " : " + ioException);  }}  }
class C{  public static void note(Element e,String message){  messager.printMessage(Diagnostic.Kind.NOTE,message,e);}  }
class C{  private void initialiseEigen(){  Eval=new double[stateCount];  Evec=new double[stateCount][stateCount];  Ievc=new double[stateCount][stateCount];  storedEval=new double[stateCount];  storedEvec=new double[stateCount][stateCount];  storedIevc=new double[stateCount][stateCount];  amat=new double[stateCount][stateCount];  q=new double[stateCount][stateCount];  ordr=new int[stateCount];  evali=new double[stateCount];  eigenInitialised=true;  updateMatrix=true;}  }
class C{  public static void inlineFunction(final JFrame parent,final IViewContainer viewContainer,final ZyGraph graph,final INaviCodeNode node,final INaviInstruction instruction,final INaviFunction function){  final INaviFunction inlineFunction=prepareFunctionInlining(parent,node,instruction,function,viewContainer);  if (inlineFunction == null) {    CMessageBox.showError(parent,"Could not inline the function because it is forwarded to an unknown function.");  } else   if (inlineFunction.getBasicBlockCount() == 0) {    CMessageBox.showError(parent,"Could not inline the function because it has 0 basic blocks.");  } else {    try {      if (!inlineFunction.isLoaded()) {        inlineFunction.load();      }      CInliningHelper.inlineCodeNode(graph.getRawView(),node,instruction,inlineFunction);      if (graph.getSettings().getLayoutSettings().getAutomaticLayouting()) {        CGraphLayouter.refreshLayout(parent,graph);      }    } catch (    final CouldntLoadDataException e) {      exceptionDialog(parent,inlineFunction,e);    }  }}  }
class C{  public static void addPieceToGroup(Class<? extends SpellPiece> clazz,String groupName,boolean main){  if (!groupsForName.containsKey(groupName))   addGroup(groupName);  PieceGroup group=groupsForName.get(groupName);  group.addPiece(clazz,main);  groupsForPiece.put(clazz,group);}  }
class C{  @Override public void accept(Object source,Throwable t){  if (t != null) {    Executable.this.setLastError(t);    cleanup();  } else   if (job.getCurrentState() == Job.State.RUNNING && (source == userScheduler || source == userThreads) && !hasActiveTasks()) {  }  notifyCompleter();}  }
class C{  private void deleteMovies(final ContentResolver contentResolver,int hostId,int movieId){  if (movieId == -1) {    String where=MediaContract.MoviesColumns.HOST_ID + "=?";    contentResolver.delete(MediaContract.MovieCast.CONTENT_URI,where,new String[]{String.valueOf(hostId)});    contentResolver.delete(MediaContract.Movies.CONTENT_URI,where,new String[]{String.valueOf(hostId)});  } else {    contentResolver.delete(MediaContract.MovieCast.buildMovieCastListUri(hostId,movieId),null,null);    contentResolver.delete(MediaContract.Movies.buildMovieUri(hostId,movieId),null,null);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.474 -0400",hash_original_method="3830DED98B2371780319D090EC33ABF7",hash_generated_method="A5592C17224B2A723B157A5517F8473C") public static void closeQuietly(LineIterator iterator){  if (iterator != null) {    iterator.close();  }}  }
class C{  protected void addServiceCounter(final String metricName,final IGangliaMetadataMessage decl){  addServiceCounter(metricName,decl,false);}  }
class C{  public RectangularPositionArea(String sidc){  super(sidc);}  }
class C{  protected void arraycopy(byte[] buf,int pos,int length){  mMessage.write(buf,pos,length);  mPosition=mPosition + length;}  }
class C{  public void runProcess(boolean precheckBeforeExecution){  if (getProcessState() == Process.PROCESS_STATE_STOPPED) {    if (isChanged() || getProcess().getProcessLocation() == null) {      if (DecisionRememberingConfirmDialog.confirmAction("save_before_run",PROPERTY_RAPIDMINER_GUI_SAVE_BEFORE_RUN)) {        SaveAction.saveAsync(getProcess());      }    }    if (precheckBeforeExecution && doesProcessContainShowstoppers()) {      return;    }    processThread=new ProcessThread(MainFrame.this.process);    try {      processThread.start();    } catch (    Exception t) {      SwingTools.showSimpleErrorMessage("cannot_start_process",t);    }  } else {    process.resume();  }}  }
class C{  public Node item(int index){  ElemTemplateElement node=m_firstChild;  for (int i=0; i < index && node != null; i++) {    node=node.m_nextSibling;  }  return node;}  }
class C{  public void reset(){  NativeCollation.reset(address);}  }
class C{  public Builder memoryCacheExtraOptions(int maxImageWidthForMemoryCache,int maxImageHeightForMemoryCache){  this.maxImageWidthForMemoryCache=maxImageWidthForMemoryCache;  this.maxImageHeightForMemoryCache=maxImageHeightForMemoryCache;  return this;}  }
class C{  public static void readDiscoveryConfiguration(BinaryRawReader in,IgniteConfiguration cfg){  boolean hasConfig=in.readBoolean();  if (!hasConfig)   return;  TcpDiscoverySpi disco=new TcpDiscoverySpi();  boolean hasIpFinder=in.readBoolean();  if (hasIpFinder) {    byte ipFinderType=in.readByte();    int addrCount=in.readInt();    ArrayList<String> addrs=null;    if (addrCount > 0) {      addrs=new ArrayList<>(addrCount);      for (int i=0; i < addrCount; i++)       addrs.add(in.readString());    }    TcpDiscoveryVmIpFinder finder=null;    if (ipFinderType == 1) {      finder=new TcpDiscoveryVmIpFinder();    } else     if (ipFinderType == 2) {      TcpDiscoveryMulticastIpFinder finder0=new TcpDiscoveryMulticastIpFinder();      finder0.setLocalAddress(in.readString());      finder0.setMulticastGroup(in.readString());      finder0.setMulticastPort(in.readInt());      finder0.setAddressRequestAttempts(in.readInt());      finder0.setResponseWaitTime(in.readInt());      boolean hasTtl=in.readBoolean();      if (hasTtl)       finder0.setTimeToLive(in.readInt());      finder=finder0;    } else {      assert false;    }    finder.setAddresses(addrs);    disco.setIpFinder(finder);  }  disco.setSocketTimeout(in.readLong());  disco.setAckTimeout(in.readLong());  disco.setMaxAckTimeout(in.readLong());  disco.setNetworkTimeout(in.readLong());  disco.setJoinTimeout(in.readLong());  disco.setForceServerMode(in.readBoolean());  disco.setClientReconnectDisabled(in.readBoolean());  disco.setLocalAddress(in.readString());  disco.setReconnectCount(in.readInt());  disco.setLocalPort(in.readInt());  disco.setLocalPortRange(in.readInt());  disco.setMaxMissedHeartbeats(in.readInt());  disco.setMaxMissedClientHeartbeats(in.readInt());  disco.setStatisticsPrintFrequency(in.readLong());  disco.setIpFinderCleanFrequency(in.readLong());  disco.setThreadPriority(in.readInt());  disco.setHeartbeatFrequency(in.readLong());  disco.setTopHistorySize(in.readInt());  cfg.setDiscoverySpi(disco);}  }
class C{  public String format(long timeInMilliseconds){  StringBuffer result=new StringBuffer();  if (timeInMilliseconds > WEEK_MS) {    long weeks=timeInMilliseconds / WEEK_MS;    result.append(numberFormat.format(weeks) + " Week");    if (weeks > 1) {      result.append("s");    }    timeInMilliseconds-=weeks * WEEK_MS;    result.append(" ");  }  boolean showHours=false;  if (timeInMilliseconds > DAY_MS) {    long days=timeInMilliseconds / DAY_MS;    result.append(numberFormat.format(days) + " Day");    if (days > 1) {      result.append("s");    }    timeInMilliseconds-=days * DAY_MS;    result.append(" ");    showHours=true;  }  boolean showMinutes=false;  if (timeInMilliseconds > HOUR_MS) {    long hours=timeInMilliseconds / HOUR_MS;    result.append(appendLeadingZeros(numberFormat.format(hours)) + ":");    timeInMilliseconds-=hours * HOUR_MS;    showMinutes=true;  } else {    if (showHours) {      result.append("00:");      showMinutes=true;    }  }  boolean showSeconds=false;  if (timeInMilliseconds > MIN_MS) {    long minutes=timeInMilliseconds / MIN_MS;    if (showMinutes) {      result.append(appendLeadingZeros(numberFormat.format(minutes)) + ":");    } else {      result.append(numberFormat.format(minutes) + ":");    }    timeInMilliseconds-=minutes * MIN_MS;    showSeconds=true;  } else {    if (showMinutes) {      result.append("00:");      showSeconds=true;    }  }  boolean showUnit=result.length() == 0;  if (timeInMilliseconds > SEC_MS) {    long seconds=timeInMilliseconds / SEC_MS;    if (showSeconds) {      result.append(appendLeadingZeros(numberFormat.format(seconds)));    } else {      result.append(numberFormat.format(seconds));    }  } else {    if (showSeconds) {      result.append("00");    }  }  if ((showUnit) && (result.length() > 0)) {    result.append(" s");  }  if (result.length() == 0) {    result.append("0 s");  }  return result.toString();}  }
class C{  protected void hideContextualSearch(boolean immediately){}  }
class C{  private JSONObject readObject() throws JSONException {  JSONObject result=new JSONObject();  int first=nextCleanInternal();  if (first == '}') {    return result;  } else   if (first != -1) {    pos--;  }  while (true) {    Object name=nextValue();    if (!(name instanceof String)) {      if (name == null) {        throw syntaxError("Names cannot be null");      } else {        throw syntaxError("Names must be strings, but " + name + " is of type "+ name.getClass().getName());      }    }    int separator=nextCleanInternal();    if (separator != ':' && separator != '=') {      throw syntaxError("Expected ':' after " + name);    }    if (pos < in.length() && in.charAt(pos) == '>') {      pos++;    }    result.put((String)name,nextValue());switch (nextCleanInternal()) {case '}':      return result;case ';':case ',':    continue;default :  throw syntaxError("Unterminated object");}}}  }
class C{  protected void parseDefineJPEGTables(InStream in) throws IOException {  tagtypes.tagJPEGTables(in.read());}  }
class C{  public FluxMap(Publisher<? extends T> source,Function<? super T,? extends R> mapper){  super(source);  this.mapper=Objects.requireNonNull(mapper,"mapper");}  }
class C{  private void onTrackPointEnd() throws SAXException {  Location location=getTrackPoint();  if (location == null) {    return;  }  insertTrackPoint(location);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:26.981 -0500",hash_original_method="0CA36CF7485684069EDD095AE8455157",hash_generated_method="113EE03FEC2AB5B9B31E6309FF6709D4") public boolean isPlaying(){  return mAudio != null && mAudio.isPlaying();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Boolean.valueOf(stack.getUIMgrSafe().getVideoFrame().isDVD() || (MediaFile.INCLUDE_BLURAYS_AS_DVDS && stack.getUIMgrSafe().getVideoFrame().isBluRay()));}  }
class C{  public void deregister(UUID transactionId) throws RepositoryException {synchronized (primaryCache) {    CacheEntry entry=primaryCache.getIfPresent(transactionId);    if (entry == null) {      throw new RepositoryException("transaction with id " + transactionId.toString() + " not registered.");    } else {      primaryCache.invalidate(transactionId);      secondaryCache.invalidate(transactionId);      logger.debug("deregistered transaction {}",transactionId);    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.015 -0400",hash_original_method="B7BD90DC8ACEF2F646158B1D5B35155C",hash_generated_method="80CCC5ED6B187D2080367E42AFB90486") public final boolean isDebugEnabled(){  return isLevelEnabled(SimpleLog.LOG_LEVEL_DEBUG);}  }
class C{  public static void main(String[] args){  Out out;  out=new Out();  out.println("Test 1");  out.close();  out=new Out("test.txt");  out.println("Test 2");  out.close();}  }
class C{  public boolean hasGoal(){  return hasExtension(Goal.class);}  }
class C{  public static void createForwardPage(HttpServletResponse response,String title,String forwardURL,int delaySec) throws ServletException, IOException {  response.setContentType("text/html; charset=UTF-8");  WebDoc doc=WebDoc.create(title);  body b=doc.getBody();  b.addElement(getForward(forwardURL,delaySec));  PrintWriter out=response.getWriter();  doc.output(out);  out.flush();  if (out.checkError())   log.log(Level.SEVERE,"Error writing");  out.close();  log.fine(forwardURL + " - " + title);}  }
class C{  @NotNull public static String stripQuotes(@NotNull String text){  if (text.length() > 0) {    final char firstChar=text.charAt(0);    final char lastChar=text.charAt(text.length() - 1);    if (firstChar == '\'' || firstChar == '"') {      if (text.length() > 1 && firstChar == lastChar && !isEscapedChar(text,text.length() - 1)) {        return text.substring(1,text.length() - 1);      }      return text.substring(1);    }  }  return text;}  }
class C{  public boolean isPlaying(){  return videoViewImpl.isPlaying();}  }
class C{  public static Attribute attribute(String name,String customGet,String customSet){  return new Attribute(name,customGet,customSet);}  }
class C{  public SerializerWriteBasic(Datas... classes){  m_classes=classes;}  }
class C{  public List<List<String>> computeSelectedPaths(){  List<List<String>> selectedPaths=new ArrayList<>();  for (int i=0, n=selectedNodes.size(); i < n; i++) {    D nodeData=selectedNodes.get(i);    selectedPaths.add(dataAdapter.getNodePath(nodeData));  }  return selectedPaths;}  }
class C{  public static PhoneNumber emptyPhone(){  return EMPTY_PHONE_NUMBER;}  }
class C{  public SimpleId(final String rootName,final int index){  this.rootName=rootName;  this.index=index;}  }
class C{  public Yytoken yylex() throws java.io.IOException, ParseException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    yychar+=zzMarkedPosL - zzStartRead;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=ZZ_LEXSTATE[zzLexicalState];    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 11:{        sb.append(yytext());      }case 25:    break;case 4:{    sb=null;    sb=new StringBuffer();    yybegin(STRING_BEGIN);  }case 26:break;case 16:{sb.append('\b');}case 27:break;case 6:{return new Yytoken(Yytoken.TYPE_RIGHT_BRACE,null);}case 28:break;case 23:{Boolean val=Boolean.valueOf(yytext());return new Yytoken(Yytoken.TYPE_VALUE,val);}case 29:break;case 22:{return new Yytoken(Yytoken.TYPE_VALUE,null);}case 30:break;case 13:{yybegin(YYINITIAL);return new Yytoken(Yytoken.TYPE_VALUE,sb.toString());}case 31:break;case 12:{sb.append('\\');}case 32:break;case 21:{Double val=Double.valueOf(yytext());return new Yytoken(Yytoken.TYPE_VALUE,val);}case 33:break;case 1:{throw new ParseException(yychar,ParseException.ERROR_UNEXPECTED_CHAR,new Character(yycharat(0)));}case 34:break;case 8:{return new Yytoken(Yytoken.TYPE_RIGHT_SQUARE,null);}case 35:break;case 19:{sb.append('\r');}case 36:break;case 15:{sb.append('/');}case 37:break;case 10:{return new Yytoken(Yytoken.TYPE_COLON,null);}case 38:break;case 14:{sb.append('"');}case 39:break;case 5:{return new Yytoken(Yytoken.TYPE_LEFT_BRACE,null);}case 40:break;case 17:{sb.append('\f');}case 41:break;case 24:{try {int ch=Integer.parseInt(yytext().substring(2),16);sb.append((char)ch);} catch (Exception e) {throw new ParseException(yychar,ParseException.ERROR_UNEXPECTED_EXCEPTION,e);}}case 42:break;case 20:{sb.append('\t');}case 43:break;case 7:{return new Yytoken(Yytoken.TYPE_LEFT_SQUARE,null);}case 44:break;case 2:{Long val=Long.valueOf(yytext());return new Yytoken(Yytoken.TYPE_VALUE,val);}case 45:break;case 18:{sb.append('\n');}case 46:break;case 9:{return new Yytoken(Yytoken.TYPE_COMMA,null);}case 47:break;case 3:{}case 48:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;return null;} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public static byte[] toBytes(char x){  return toBytes(x,new byte[2],0);}  }
class C{  public void showEditorStubPanel(){  view.showWidget(editorStubPanel.getView());}  }
class C{  public static XMLStruct toXMLStruct(Node node,boolean caseSensitive){  return XMLStructFactory.newInstance(node,caseSensitive);}  }
class C{  public static Boolean isComponentDeletable(final Component source){  if (isTargetTable(source) || isDistributionTable(source) || isTargetTag(source)|| isDistributionTag(source)) {    return Boolean.TRUE;  }  return Boolean.FALSE;}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  private void resetSelectMove(){  JToggleButton selectButton=getButtonForType(selectType);  if (!(selectButton.isSelected())) {    selectButton.doClick();    selectButton.requestFocus();  }}  }
class C{  public static File openFile() throws FileNotFoundException {  File file=new File("hangman.txt");  if (!file.exists()) {    System.out.print("File " + file.getName() + " does not exist");    System.exit(1);  }  return file;}  }
class C{  public static Test suite(){  return (new TestSuite(AnnotatedComponentsITCase.class));}  }
class C{  protected CascadedTable(Class tupleType){  super(0,0,tupleType);  m_pnames=new ArrayList();}  }
class C{  private boolean checkNameCompletion(){  this.assistNode=getUnspecifiedReferenceOptimized();  this.lastCheckPoint=this.assistNode.sourceEnd + 1;  this.isOrphanCompletionNode=true;  if (this.hasUnusedModifiers && this.assistNode instanceof CompletionOnSingleNameReference) {    ((CompletionOnSingleNameReference)this.assistNode).isPrecededByModifiers=true;  }  return true;}  }
class C{  public static long flags(JCTree tree){switch (tree.getTag()) {case VARDEF:    return ((JCVariableDecl)tree).mods.flags;case METHODDEF:  return ((JCMethodDecl)tree).mods.flags;case CLASSDEF:return ((JCClassDecl)tree).mods.flags;case BLOCK:return ((JCBlock)tree).flags;default :return 0;}}  }
class C{  public static TaskResourceRep createFailedTaskOnCG(DbClient dbClient,BlockConsistencyGroup cg,ResourceOperationTypeEnum opr,ServiceCoded sc){  String taskId=UUID.randomUUID().toString();  Operation op=new Operation();  op.setResourceType(opr);  dbClient.createTaskOpStatus(BlockConsistencyGroup.class,cg.getId(),taskId,op);  cg=dbClient.queryObject(BlockConsistencyGroup.class,cg.getId());  op=cg.getOpStatus().get(taskId);  op.error(sc);  cg.getOpStatus().updateTaskStatus(taskId,op);  dbClient.updateObject(cg);  return TaskMapper.toTask(cg,taskId,op);}  }
class C{  private static void divideBlockToTasks(Map<String,List<List<Distributable>>> outputMap,String key,List<Distributable> blockOfEachNode){  List<List<Distributable>> taskLists=outputMap.get(key);  int tasksOfNode=taskLists.size();  int i=0;  for (  Distributable block : blockOfEachNode) {    taskLists.get(i % tasksOfNode).add(block);    i++;  }}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @SuppressWarnings("unchecked") public Response onCommand(POP3Session session,Request request){  Response response=null;  if (session.getHandlerState() == POP3Session.AUTHENTICATION_READY || session.getHandlerState() == POP3Session.AUTHENTICATION_USERSET) {    return SIGN_OFF;  }  List<String> toBeRemoved=(List<String>)session.getAttachment(POP3Session.DELETED_UID_LIST,State.Transaction);  Mailbox mailbox=session.getUserMailbox();  try {    String[] uids=toBeRemoved.toArray(new String[toBeRemoved.size()]);    mailbox.remove(uids);    response=SIGN_OFF;  } catch (  Exception ex) {    response=SIGN_OFF_NOT_CLEAN;    session.getLogger().error("Some deleted messages were not removed",ex);  }  try {    mailbox.close();  } catch (  IOException e) {  }  return response;}  }
class C{  public boolean containsValue(Object value){  if (value == null) {    for (int i=0, isize=data.length; i < isize; i++) {      HashEntry entry=data[i];      while (entry != null) {        if (entry.getValue() == null) {          return true;        }        entry=entry.next;      }    }  } else {    for (int i=0, isize=data.length; i < isize; i++) {      HashEntry entry=data[i];      while (entry != null) {        if (isEqualValue(value,entry.getValue())) {          return true;        }        entry=entry.next;      }    }  }  return false;}  }
class C{  public static SplashFragment newInstance(int sectionNumber){  SplashFragment fragment=new SplashFragment();  Bundle args=new Bundle();  args.putInt(ARG_SECTION_NUMBER,sectionNumber);  fragment.setArguments(args);  return fragment;}  }
class C{  @Override public String toString(){  StringBuilder result=new StringBuilder("Matrix3f\n[\n");  result.append(" ");  result.append(m00);  result.append("  ");  result.append(m01);  result.append("  ");  result.append(m02);  result.append(" \n");  result.append(" ");  result.append(m10);  result.append("  ");  result.append(m11);  result.append("  ");  result.append(m12);  result.append(" \n");  result.append(" ");  result.append(m20);  result.append("  ");  result.append(m21);  result.append("  ");  result.append(m22);  result.append(" \n]");  return result.toString();}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  public SipRequest createInvite() throws PayloadException {  return SipMessageFactory.createInvite(getDialogPath(),RichcallService.FEATURE_TAGS_GEOLOC_SHARE,getDialogPath().getLocalContent());}  }
class C{  public IntPair insertNFA(RegExp regExp){  IntPair nfa1, nfa2;  int start, end;  RegExp2 r;  if (Options.DEBUG)   Out.debug("Inserting RegExp : " + regExp);  if (regExp.isCharClass(macros)) {    start=numStates;    end=numStates + 1;    ensureCapacity(end + 1);    if (end + 1 > numStates)     numStates=end + 1;    insertCCLNFA(regExp,start,end);    return new IntPair(start,end);  }switch (regExp.type) {case sym.BAR:    r=(RegExp2)regExp;  nfa1=insertNFA(r.r1);nfa2=insertNFA(r.r2);start=nfa2.end + 1;end=nfa2.end + 2;addEpsilonTransition(start,nfa1.start);addEpsilonTransition(start,nfa2.start);addEpsilonTransition(nfa1.end,end);addEpsilonTransition(nfa2.end,end);return new IntPair(start,end);case sym.CONCAT:r=(RegExp2)regExp;nfa1=insertNFA(r.r1);nfa2=insertNFA(r.r2);addEpsilonTransition(nfa1.end,nfa2.start);return new IntPair(nfa1.start,nfa2.end);case sym.STAR:nfa1=insertNFA((RegExp)((RegExp1)regExp).content);start=nfa1.end + 1;end=nfa1.end + 2;addEpsilonTransition(nfa1.end,end);addEpsilonTransition(start,nfa1.start);addEpsilonTransition(start,end);addEpsilonTransition(nfa1.end,nfa1.start);return new IntPair(start,end);case sym.PLUS:nfa1=insertNFA((RegExp)((RegExp1)regExp).content);start=nfa1.end + 1;end=nfa1.end + 2;addEpsilonTransition(nfa1.end,end);addEpsilonTransition(start,nfa1.start);addEpsilonTransition(nfa1.end,nfa1.start);return new IntPair(start,end);case sym.QUESTION:nfa1=insertNFA((RegExp)((RegExp1)regExp).content);addEpsilonTransition(nfa1.start,nfa1.end);return new IntPair(nfa1.start,nfa1.end);case sym.BANG:return complement(insertNFA((RegExp)((RegExp1)regExp).content));case sym.TILDE:return insertNFA(regExp.resolveTilde(macros));case sym.STRING:return insertStringNFA(false,(String)((RegExp1)regExp).content);case sym.STRING_I:return insertStringNFA(true,(String)((RegExp1)regExp).content);case sym.MACROUSE:return insertNFA(macros.getDefinition((String)((RegExp1)regExp).content));}throw new Error("Unknown expression type " + regExp.type + " in NFA construction");}  }
class C{  @Override public String toString(){  if (m_IterativeClassifier == null) {    return "No classifier built yet.";  } else {    StringBuffer sb=new StringBuffer();    sb.append("Best value found: " + m_bestResult + "\n");    sb.append("Best number of iterations found: " + m_bestNumIts + "\n\n");    if (m_thresholds != null) {      sb.append("Thresholds found: ");      for (int i=0; i < m_thresholds.length; i++) {        sb.append(m_thresholds[i] + " ");      }    }    sb.append("\n\n");    sb.append(m_IterativeClassifier.toString());    return sb.toString();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:47.384 -0500",hash_original_method="A3D128052E6DBB71E212001BDC0EAD27",hash_generated_method="37AE479593AFCE0B900F586B9EA225CE") public final static NameValuePair[] parseParameters(final String value,HeaderValueParser parser) throws ParseException {  if (value == null) {    throw new IllegalArgumentException("Value to parse may not be null");  }  if (parser == null)   parser=BasicHeaderValueParser.DEFAULT;  CharArrayBuffer buffer=new CharArrayBuffer(value.length());  buffer.append(value);  ParserCursor cursor=new ParserCursor(0,value.length());  return parser.parseParameters(buffer,cursor);}  }
class C{  public static Vector2f interpolateTriangle(float v0X,float v0Y,float f0X,float f0Y,float v1X,float v1Y,float f1X,float f1Y,float v2X,float v2Y,float f2X,float f2Y,float x,float y,Vector2f dest){  float v12Y=v1Y - v2Y;  float v21X=v2X - v1X;  float v02X=v0X - v2X;  float yv2Y=y - v2Y;  float xv2X=x - v2X;  float v02Y=v0Y - v2Y;  float invDen=1.0f / (v12Y * v02X + v21X * v02Y);  float l1=(v12Y * xv2X + v21X * yv2Y) * invDen;  float l2=(v02X * yv2Y - v02Y * xv2X) * invDen;  float l3=1.0f - l1 - l2;  dest.x=l1 * f0X + l2 * f1X + l3 * f2X;  dest.y=l1 * f0Y + l2 * f1Y + l3 * f2Y;  return dest;}  }
class C{  private void updateBuckets(){  mAdapter.setBuckets(mAutoMixManager.getBuckets());  mAdapter.notifyDataSetChanged();  if (mAdapter.getCount() == 0) {    mNoBucketTextView.setVisibility(View.VISIBLE);  } else {    mNoBucketTextView.setVisibility(View.GONE);  }}  }
class C{  private CGraphBuilder(){}  }
class C{  public static Vector3 ceil(Vector3 o){  return new Vector3(Math.ceil(o.x),Math.ceil(o.y),Math.ceil(o.z));}  }
class C{  public String id(){  return id;}  }
class C{  public String prettyPrint(PrettyPrintOptions options){  String pp="";  Space parent=this;  while (parent != null) {    if (options != null && options.getScope() != null) {      if (parent.getImageDomain().equals(options.getScope())) {        break;      }    }    if (pp != "") {      pp="." + pp;    }    if (parent.getParent() != null) {      pp=prettyPrintRelation(parent,options) + pp;    } else {      pp=prettyPrintDomain(parent,options) + pp;    }    parent=parent.getParent();  }  return pp;}  }
class C{  public boolean canRedo(){  return m_nCurrentEditAction < m_undoStack.size() - 1;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case ExpressionsPackage.ASSIGNMENT_EXPRESSION__VAR_REF:    return getVarRef();case ExpressionsPackage.ASSIGNMENT_EXPRESSION__OPERATOR:  return getOperator();case ExpressionsPackage.ASSIGNMENT_EXPRESSION__EXPRESSION:return getExpression();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private String formatBoolean(boolean b){  return b ? new String(new byte[]{1}) : "";}  }
class C{  public static void loadEmergencyClasses(){  if (emergencyClassesLoaded)   return;  emergencyClassesLoaded=true;  CachedRegionHelper.loadEmergencyClasses();  ServerConnection.loadEmergencyClasses();}  }
class C{  public static ReadStreamOld openRead(InputStream is){  VfsStreamOld s=new VfsStreamOld(is,null);  return new ReadStreamOld(s);}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0xFDB68C23,version=271) public int sceUsbCamGetSharpness(TPointer32 sharpnessAddr){  sharpnessAddr.setValue(sharpness);  return 0;}  }
class C{  public GeneralPath generateClipPath(Rectangle2D dataArea,ValueAxis horizontalAxis,ValueAxis verticalAxis){  GeneralPath generalPath=new GeneralPath();  double transX=horizontalAxis.valueToJava2D(this.xValue[0],dataArea,RectangleEdge.BOTTOM);  double transY=verticalAxis.valueToJava2D(this.yValue[0],dataArea,RectangleEdge.LEFT);  generalPath.moveTo((float)transX,(float)transY);  for (int k=0; k < this.yValue.length; k++) {    transX=horizontalAxis.valueToJava2D(this.xValue[k],dataArea,RectangleEdge.BOTTOM);    transY=verticalAxis.valueToJava2D(this.yValue[k],dataArea,RectangleEdge.LEFT);    generalPath.lineTo((float)transX,(float)transY);  }  generalPath.closePath();  return generalPath;}  }
class C{  @SuppressWarnings("all") final void reject(Runnable command){  handler.rejectedExecution(command,this);}  }
class C{  public static String fromByteArray(byte[] ba){  if ((ba != null) && (ba.length == 16)) {    StringBuilder result=new StringBuilder(36);    for (int i=0; i < 16; ++i) {      if ((i == 4) || (i == 6) || (i == 8)|| (i == 10)) {        result.append('-');      }      result.append(hexChars.charAt(((ba[i] & 0xF0) >>> 4)));      result.append(hexChars.charAt((ba[i] & 0xF)));    }    return result.toString();  }  return null;}  }
class C{  public boolean isGranted(String permission){  if (!mPerms.containsKey(permission))   return false;  return (mPerms.get(permission) == PackageManager.PERMISSION_GRANTED);}  }
class C{  public void clear(){  Arrays.fill(mReceivedPointerDownX,0);  Arrays.fill(mReceivedPointerDownY,0);  Arrays.fill(mReceivedPointerDownTime,0);  mReceivedPointersDown=0;  mActivePointers=0;  mPrimaryActivePointerId=0;  mHasMovingActivePointer=false;  mLastReceivedUpPointerDownTime=0;  mLastReceivedUpPointerId=0;  mLastReceivedUpPointerActive=false;  mLastReceivedUpPointerDownX=0;  mLastReceivedUpPointerDownY=0;}  }
class C{  public void onPlayerTouch(float xPos){  if (player.isInState(PlayerState.HIT))   return;  xPos=xPos - player.getBitmap().getWidth() / 2;  float yPos=getDefaultPlayerHeight();  this.newPlayerLocation=new PointF(xPos,yPos);}  }
class C{  public Object clone(){  try {    return super.clone();  } catch (  CloneNotSupportedException e) {    return null;  }}  }
class C{  public boolean isDestroyed(){  return this.state == DESTROYED;}  }
class C{  public static TreeWalker createTreeWalker(AbstractDocument doc,Node root,int whatToShow,NodeFilter filter,boolean entityReferenceExpansion){  if (root == null) {    throw doc.createDOMException(DOMException.NOT_SUPPORTED_ERR,"null.root",null);  }  return new DOMTreeWalker(root,whatToShow,filter,entityReferenceExpansion);}  }
class C{  public static double[] readReferenceShares(String filename){  try {    BufferedReader reader=IOUtils.getBufferedReader(filename);    List<String> lines=new ArrayList<String>();    String line=null;    while ((line=reader.readLine()) != null) {      lines.add(line);    }    reader.close();    double[] values=new double[lines.size()];    for (int i=0; i < lines.size(); i++) {      values[i]=Double.parseDouble(lines.get(i));    }    return values;  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  public void removeNotify(){  JRootPane root=SwingUtilities.getRootPane(this);  if (root != null && root.getDefaultButton() == this) {    root.setDefaultButton(null);  }  super.removeNotify();}  }
class C{  private void decodeMultipartData(String boundary,byte[] fbuf,BufferedReader in,Properties parms,Properties files) throws InterruptedException {  try {    int[] bpositions=getBoundaryPositions(fbuf,boundary.getBytes());    int boundarycount=1;    String mpline=in.readLine();    while (mpline != null) {      if (mpline.indexOf(boundary) == -1)       sendError(HTTP_BADREQUEST,"BAD REQUEST: Content type is multipart/form-data but next chunk does not start with boundary. Usage: GET /example/file.html");      boundarycount++;      Properties item=new Properties();      mpline=in.readLine();      while (mpline != null && mpline.trim().length() > 0) {        int p=mpline.indexOf(':');        if (p != -1)         item.put(mpline.substring(0,p).trim().toLowerCase(),mpline.substring(p + 1).trim());        mpline=in.readLine();      }      if (mpline != null) {        String contentDisposition=item.getProperty("content-disposition");        if (contentDisposition == null) {          sendError(HTTP_BADREQUEST,"BAD REQUEST: Content type is multipart/form-data but no content-disposition info found. Usage: GET /example/file.html");        }        StringTokenizer st=new StringTokenizer(contentDisposition,"; ");        Properties disposition=new Properties();        while (st.hasMoreTokens()) {          String token=st.nextToken();          int p=token.indexOf('=');          if (p != -1)           disposition.put(token.substring(0,p).trim().toLowerCase(),token.substring(p + 1).trim());        }        String pname=disposition.getProperty("name");        pname=pname.substring(1,pname.length() - 1);        String value="";        if (item.getProperty("content-type") == null) {          while (mpline != null && mpline.indexOf(boundary) == -1) {            mpline=in.readLine();            if (mpline != null) {              int d=mpline.indexOf(boundary);              if (d == -1)               value+=mpline; else               value+=mpline.substring(0,d - 2);            }          }        } else {          if (boundarycount > bpositions.length)           sendError(HTTP_INTERNALERROR,"Error processing request");          int offset=stripMultipartHeaders(fbuf,bpositions[boundarycount - 2]);          String path=saveTmpFile(fbuf,offset,bpositions[boundarycount - 1] - offset - 4);          files.put(pname,path);          value=disposition.getProperty("filename");          value=value.substring(1,value.length() - 1);          do {            mpline=in.readLine();          } while (mpline != null && mpline.indexOf(boundary) == -1);        }        parms.put(pname,value);      }    }  } catch (  IOException ioe) {    sendError(HTTP_INTERNALERROR,"SERVER INTERNAL ERROR: IOException: " + ioe.getMessage());  }}  }
class C{  protected void onSetupCompleted(){}  }
class C{  private void pop(final int elements){  if (outputStackTop >= elements) {    outputStackTop-=elements;  } else {    owner.inputStackTop-=elements - outputStackTop;    outputStackTop=0;  }}  }
class C{  private void enableDisableView(View view,boolean enabled){  view.setEnabled(enabled);  if (view instanceof ViewGroup) {    ViewGroup group=(ViewGroup)view;    for (int idx=0; idx < group.getChildCount(); idx++) {      enableDisableView(group.getChildAt(idx),enabled);    }  }}  }
class C{  public boolean illegalInputRoadblocking(LogicCircuit lc){  if (_roadblocking_option == false) {    return false;  }  for (  Gate g : lc.get_Gates()) {    Integer n_child_roadblockers_input=0;    if (g.Type == GateType.NOR || g.Type == GateType.OUTPUT_OR) {      for (      Gate child : g.getChildren()) {        if (_input_roadblockers.contains(child.Name)) {          n_child_roadblockers_input++;        }      }      if (n_child_roadblockers_input > 1) {        return true;      }    }  }  return false;}  }
class C{  public static int removeModifier(int modifiers,int mod){  return modifiers & ~mod;}  }
class C{  void shiftGap(int q){  modCenter(q);  int[] sorted=Arrays.clone(coeffs);  sort(sorted);  int maxrange=0;  int maxrangeStart=0;  for (int i=0; i < sorted.length - 1; i++) {    int range=sorted[i + 1] - sorted[i];    if (range > maxrange) {      maxrange=range;      maxrangeStart=sorted[i];    }  }  int pmin=sorted[0];  int pmax=sorted[sorted.length - 1];  int j=q - pmax + pmin;  int shift;  if (j > maxrange) {    shift=(pmax + pmin) / 2;  } else {    shift=maxrangeStart + maxrange / 2 + q / 2;  }  sub(shift);}  }
class C{  public boolean isMask(int mask){  return isMask(value,mask);}  }
class C{  public List<List<Integer>> permuteUnique(int[] num){  List<List<Integer>> res=new ArrayList<List<Integer>>();  if (num == null || num.length == 0)   return res;  Arrays.sort(num);  permute(num,0,res);  return res;}  }
class C{  protected void nodeCompleted(final Object parent,final Object node){  if (parent == null)   insideTask=false;  antElementHandler.onEndElement(null,null,antXmlContext);  lastCompletedNode=node;  if (parent != null && !(parent instanceof Target)) {    log.finest("parent is not null: no perform on nodeCompleted");    return;  }  if (definingTarget != null && definingTarget == parent && node instanceof Task)   return;  if (definingTarget == node) {    definingTarget=null;  }  if (node instanceof Task) {    Task task=(Task)node;    final String taskName=task.getTaskName();    if ("antcall".equals(taskName) && parent == null) {      throw new BuildException("antcall not supported within AntBuilder, consider using 'ant.project.executeTarget('targetName')' instead.");    }    if (saveStreams) {synchronized (AntBuilder.class) {        int currentStreamCount=streamCount++;        if (currentStreamCount == 0) {          savedProjectInputStream=project.getDefaultInputStream();          savedIn=System.in;          savedErr=System.err;          savedOut=System.out;          if (!(savedIn instanceof DemuxInputStream)) {            project.setDefaultInputStream(savedIn);            demuxInputStream=new DemuxInputStream(project);            System.setIn(demuxInputStream);          }          demuxOutputStream=new DemuxOutputStream(project,false);          System.setOut(new PrintStream(demuxOutputStream));          demuxErrorStream=new DemuxOutputStream(project,true);          System.setErr(new PrintStream(demuxErrorStream));        }      }    }    try {      lastCompletedNode=performTask(task);    }  finally {      if (saveStreams) {synchronized (AntBuilder.class) {          int currentStreamCount=--streamCount;          if (currentStreamCount == 0) {            project.setDefaultInputStream(savedProjectInputStream);            System.setOut(savedOut);            System.setErr(savedErr);            if (demuxInputStream != null) {              System.setIn(savedIn);              DefaultGroovyMethodsSupport.closeQuietly(demuxInputStream);              demuxInputStream=null;            }            DefaultGroovyMethodsSupport.closeQuietly(demuxOutputStream);            DefaultGroovyMethodsSupport.closeQuietly(demuxErrorStream);            demuxOutputStream=null;            demuxErrorStream=null;          }        }      }    }    if ("import".equals(taskName)) {      antXmlContext.setCurrentTarget(collectorTarget);    }  } else   if (node instanceof Target) {    antXmlContext.setCurrentTarget(collectorTarget);  } else {    final RuntimeConfigurable r=(RuntimeConfigurable)node;    r.maybeConfigure(project);  }}  }
class C{  public int lastIndexOfAnyBut(final char[] c,int from){  if (from < 0)   return -1;  final int n=c.length;  return lastIndexOfAnyBut(c,n,from,buildFilter(c,n));}  }
class C{  public void put(final long cacheKey,final FilterJoinTerms terms){  logger.debug("{}: New cache entry {}",Thread.currentThread().getName(),cacheKey);  this.cache.put(cacheKey,new CacheEntry(terms.getEncodedTerms(),terms.getSize(),terms.isPruned()));}  }
class C{  void prepareEnterRecentsAnimation(boolean isTaskViewLaunchTargetTask){  if (isTaskViewLaunchTargetTask) {    mThumbnailAlpha=1f;  } else {    mThumbnailAlpha=mConfig.taskViewThumbnailAlpha;  }  updateThumbnailPaintFilter();}  }
class C{  public static String approxTimeUntil(final int seconds){  final StringBuilder sbuf=new StringBuilder();  approxTimeUntil(sbuf,seconds);  return sbuf.toString();}  }
class C{  public static final Vec3D fromYZTheta(float theta){  return new Vec3D(0,(float)Math.cos(theta),(float)Math.sin(theta));}  }
class C{  @Override public void execute(MinecraftServer server,ICommandSender sender,String[] args) throws CommandException {  final NetHandlerPlayClient netHandlerPlayClient=minecraft.getConnection();  if (netHandlerPlayClient != null) {    final Collection<NetworkPlayerInfo> playerInfoMap=netHandlerPlayClient.getPlayerInfoMap();    final GuiPlayerTabOverlay tabOverlay=minecraft.ingameGUI.getTabList();    final String outputText=playerInfoMap.stream().map(null).collect(Collectors.joining(", "));    sender.addChatMessage(new TextComponentTranslation("commands.testmod3:listplayers.players"));    sender.addChatMessage(new TextComponentString(outputText));  }}  }
class C{  public Attr maybeCreateAttribute(String attrName,AttrStub as){  try {    return doc.createAttribute(attrName);  } catch (  DOMException e) {    mq.addMessage(DomParserMessageType.IGNORING_TOKEN,as.nameTok.pos,MessagePart.Factory.valueOf("'" + as.nameTok.text + "'"));    logger.log(Level.FINE,"Ignoring DOMException in maybeCreateAttribute",e);    return null;  }}  }
class C{  public static void writeLines(Collection<?> lines,String lineEnding,OutputStream output) throws IOException {  writeLines(lines,lineEnding,output,Charset.defaultCharset());}  }
class C{  public static char[] trimToCapacity(char[] array,int maxCapacity){  if (array.length > maxCapacity) {    char oldArray[]=array;    array=new char[maxCapacity];    System.arraycopy(oldArray,0,array,0,maxCapacity);  }  return array;}  }
class C{  public boolean hasSendEmail(){  return hasExtension(SendEmail.class);}  }
class C{  protected void annotateProxyClass(Class<?> cl) throws IOException {  annotateClass(cl);}  }
class C{  public void actionPerformed(ActionEvent evt){  if (inspectorFrame == null) {    inspectorFrame=new JFrame("DOM Tree Inspector");  }  if (inspector == null) {    inspector=new DOMInspector(root.panel.view.getDocument(),root.panel.view.getSharedContext(),root.panel.view.getSharedContext().getCss());    inspectorFrame.getContentPane().add(inspector);    inspectorFrame.pack();    inspectorFrame.setSize(500,600);    inspectorFrame.show();  } else {    inspector.setForDocument(root.panel.view.getDocument(),root.panel.view.getSharedContext(),root.panel.view.getSharedContext().getCss());  }  inspectorFrame.show();}  }
class C{  public void push(Player p,Direction d){  if (!this.mayBePushed(d)) {    return;  }  List<BlockTarget> blockTargetsAt=this.getZone().getEntitiesAt(getX(),getY(),BlockTarget.class);  for (  BlockTarget blockTarget : blockTargetsAt) {    blockTarget.untrigger();  }  int x=getXAfterPush(d);  int y=getYAfterPush(d);  this.setPosition(x,y);  blockTargetsAt=this.getZone().getEntitiesAt(x,y,BlockTarget.class);  for (  BlockTarget blockTarget : blockTargetsAt) {    if (blockTarget.doesTrigger(this,p)) {      blockTarget.trigger(this,p);    }  }  if (resetBlock) {    SingletonRepository.getTurnNotifier().dontNotify(this);    SingletonRepository.getTurnNotifier().notifyInSeconds(RESET_TIMEOUT_IN_SECONDS,this);  }  wasMoved=true;  this.sendSound();  this.notifyWorldAboutChanges();  if (logger.isDebugEnabled()) {    logger.debug("Block [" + this.getID().toString() + "] pushed to ("+ this.getX()+ ","+ this.getY()+ ").");  }}  }
class C{  private static void uaSumGtLe(MatrixBlock in,MatrixBlock out,double[] bv,BinaryOperator bOp) throws DMLRuntimeException {  int agg0=sumRowSumGtLeColSumLtGe(0.0,bv,bOp);  int m=in.rlen;  for (int i=0; i < m; i++) {    double ai=in.quickGetValue(i,0);    int cnt=(ai == 0) ? agg0 : sumRowSumGtLeColSumLtGe(ai,bv,bOp);    cnt+=(int)out.quickGetValue(0,0);    out.quickSetValue(0,0,cnt);  }}  }
class C{  public TestTimedOutException(long timeout,TimeUnit timeUnit){  super(String.format("test timed out after %d %s",timeout,timeUnit.name().toLowerCase()));  this.timeUnit=timeUnit;  this.timeout=timeout;}  }
class C{  public DefaultConditionalSelector(SimpleSelector s,Condition c){  simpleSelector=s;  condition=c;}  }
class C{  public int read(){  if (_length <= _offset) {    if (_head == null)     return -1;    TempCharBuffer next=_head.getNext();    if (_isFree)     TempCharBuffer.free(_head);    _head=next;    if (_head == null)     return -1;    _buffer=_head.buffer();    _length=_head.getLength();    _offset=0;  }  return _buffer[_offset++];}  }
class C{  public UtilityNode(String nodeId){  super(nodeId);  distrib=new UtilityTable();}  }
class C{  private void exitProcess(boolean ok,String message){  logger.info(message);  try {    File replicatorHome=ReplicatorRuntimeConf.locateReplicatorHomeDir();    File varDir=new File(replicatorHome,"var");    File pidFile=new File(varDir,"trep.pid");    if (pidFile.exists()) {      logger.info("Removing PID file");      pidFile.delete();    }  } catch (  Throwable t) {    logger.warn("Unable to complete logic to remove PID file",t);  }  logger.info("Exiting process");  if (ok)   System.exit(0); else   System.exit(1);}  }
class C{  public void fromAngleAxis(float angle,Vector3f axis){  Vector3f normAxis=axis.normalize();  fromAngleNormalAxis(angle,normAxis);}  }
class C{  public void endPrefixMapping(String prefix) throws SAXException {}  }
class C{  public static CharBuffer copyOf(CharBuffer buffer,int newSize){  if (newSize < 0 || newSize < buffer.remaining()) {    String message=Logging.getMessage("generic.SizeOutOfRange",newSize);    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  CharBuffer newBuffer=newCharBuffer(newSize,buffer.isDirect());  int pos=buffer.position();  try {    newBuffer.put(buffer);    newBuffer.rewind();  }  finally {    buffer.position(pos);  }  return newBuffer;}  }
class C{  public ProductImagesPagerAdapter(Context context,List<String> images){  this.context=context;  this.images=images;}  }
class C{  public static List<BashIncludeCommand> findIncludeCommands(PsiFile file,@Nullable final PsiFile filterByFile){  String filePath=file.getVirtualFile().getPath();  List<BashIncludeCommand> result=Lists.newLinkedList();  Collection<BashIncludeCommand> commands=StubIndex.getElements(BashIncludeCommandIndex.KEY,filePath,file.getProject(),GlobalSearchScope.fileScope(file),BashIncludeCommand.class);  for (  BashIncludeCommand command : commands) {    if (filterByFile == null || filterByFile.equals(findIncludedFile(command))) {      result.add(command);    }  }  return result;}  }
class C{  public final static double npdAtLat(double latdeg){  double lat=Math.toRadians(latdeg);  return (NPD_LTERM1 * Math.cos(lat) + NPD_LTERM2 * Math.cos(3 * lat) + NPD_LTERM3 * Math.cos(5 * lat));}  }
class C{  @Override public void extractAndApply(){  super.extractAndApply();  type.addAnnotations(typeSymbol.getAnnotationMirrors());  applyAllElementAnnotations(declaredType.getTypeArguments(),typeSymbol.getTypeParameters(),typeFactory);}  }
class C{  public static byte[] decodeFast(String s){  int sLen=s.length();  if (sLen == 0) {    return new byte[0];  }  int sIx=0, eIx=sLen - 1;  while (sIx < eIx && IA[s.charAt(sIx) & 0xff] < 0)   sIx++;  while (eIx > 0 && IA[s.charAt(eIx) & 0xff] < 0)   eIx--;  int pad=s.charAt(eIx) == '=' ? (s.charAt(eIx - 1) == '=' ? 2 : 1) : 0;  int cCnt=eIx - sIx + 1;  int sepCnt=sLen > 76 ? (s.charAt(76) == '\r' ? cCnt / 78 : 0) << 1 : 0;  int len=((cCnt - sepCnt) * 6 >> 3) - pad;  byte[] dArr=new byte[len];  int d=0;  for (int cc=0, eLen=(len / 3) * 3; d < eLen; ) {    int i=IA[s.charAt(sIx++)] << 18 | IA[s.charAt(sIx++)] << 12 | IA[s.charAt(sIx++)] << 6 | IA[s.charAt(sIx++)];    dArr[d++]=(byte)(i >> 16);    dArr[d++]=(byte)(i >> 8);    dArr[d++]=(byte)i;    if (sepCnt > 0 && ++cc == 19) {      sIx+=2;      cc=0;    }  }  if (d < len) {    int i=0;    for (int j=0; sIx <= eIx - pad; j++)     i|=IA[s.charAt(sIx++)] << (18 - j * 6);    for (int r=16; d < len; r-=8)     dArr[d++]=(byte)(i >> r);  }  return dArr;}  }
class C{  private StringTextStore(){  this("");}  }
class C{  protected void initMapAndClassifier(){  view.setMap(new DefaultMap());  viewInfo=new MapStyleFactory().createDefaultClassifier();}  }
class C{  public static void removeNPC(final String npcName){  SingletonRepository.getNPCList().remove(npcName);}  }
class C{  public long optLong(String key){  return this.optLong(key,0);}  }
class C{  public void insertChild(IXMLElement child,int index){  if (child == null) {    throw new IllegalArgumentException("child must not be null");  }  if ((child.getName() == null) && (!this.children.isEmpty())) {    IXMLElement lastChild=(IXMLElement)this.children.get(this.children.size() - 1);    if (lastChild.getName() == null) {      lastChild.setContent(lastChild.getContent() + child.getContent());      return;    }  }  ((XMLElement)child).parent=this;  this.children.add(index,child);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:06.864 -0500",hash_original_method="2DE6D59516911FC4734AA5A206FF4E78",hash_generated_method="91146851C3B6D8130793C4946EE03C6E") public Reader retrieveArticleInfo(int articleNumber) throws IOException {  return __retrieveArticleInfo(Integer.toString(articleNumber));}  }
class C{  public Vector3i add(int x,int y,int z){  this.x+=x;  this.y+=y;  this.z+=z;  return this;}  }
class C{  public static PsiFile findLayoutResource(PsiFile file,Project project,String fileName){  String name=String.format("%s.xml",fileName);  return resolveLayoutResourceFile(file,project,name);}  }
class C{  @Override public void shutdown(){  if (isShuttingDown) {    return;  }  isShuttingDown=true;  logger.info("The server is shutting down...");  pluginManager.clearPlugins();  for (  GlowPlayer player : new ArrayList<>(getRawOnlinePlayers())) {    player.kickPlayer(getShutdownMessage(),false);  }  networkServer.shutdown();  if (queryServer != null) {    queryServer.shutdown();  }  if (rconServer != null) {    rconServer.shutdown();  }  for (  World world : getWorlds()) {    logger.info("Saving world: " + world.getName());    unloadWorld(world,true);  }  scheduler.stop();  consoleManager.stop();  new ShutdownMonitorThread().start();}  }
class C{  @Override public void run(){  amIActive=true;  int numFiles;  String fileName;  File file;  int progress=0;  int a, i;  String inputFilesString=null;  String[] imageFiles;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  imageFiles=inputFilesString.split(";");  numFiles=imageFiles.length;  if (numFiles < 1) {    showFeedback("At least one file must be specified.");    return;  }  try {    updateProgress("Deleting files:",0);    for (a=0; a < numFiles; a++) {      fileName=imageFiles[a];      file=new File(fileName);      if (file.exists()) {        file.delete();      }      if (fileName.toLowerCase().endsWith(".dep")) {        file=new File(fileName.replace(".dep",".tas"));        if (file.exists()) {          file.delete();        }        file=new File(fileName.replace(".dep",".wstat"));        if (file.exists()) {          file.delete();        }      } else       if (fileName.toLowerCase().endsWith(".shp")) {        file=new File(fileName.replace(".shp",".shx"));        if (file.exists()) {          file.delete();        }        file=new File(fileName.replace(".shp",".dbf"));        if (file.exists()) {          file.delete();        }        file=new File(fileName.replace(".shp",".prj"));        if (file.exists()) {          file.delete();        }        file=new File(fileName.replace(".shp",".sbn"));        if (file.exists()) {          file.delete();        }        file=new File(fileName.replace(".shp",".sbx"));        if (file.exists()) {          file.delete();        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * a / (numFiles - 1));      updateProgress(progress);    }    showFeedback("Operation complete.");  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public boolean execute() throws Exception {  boolean result;  Instances data;  Instance filteredInstance;  Instances filteredInstances;  Instance filteredInstanceSource;  Instances filteredInstancesSource;  DataSource source;  Filter filter;  Filter filterSource;  int i;  result=true;  if (getFilter() == null) {    throw new Exception("No filter set!");  }  if (getSourceCode() == null) {    throw new Exception("No source code set!");  }  if (getDataset() == null) {    throw new Exception("No dataset set!");  }  if (!getDataset().exists()) {    throw new Exception("Dataset '" + getDataset().getAbsolutePath() + "' does not exist!");  }  source=new DataSource(getDataset().getAbsolutePath());  data=source.getDataSet();  if (getClassIndex() == -2) {    data.setClassIndex(data.numAttributes() - 1);  } else {    data.setClassIndex(getClassIndex());  }  filter=Filter.makeCopy(getFilter());  filter.setInputFormat(data);  filteredInstances=Filter.useFilter(data,filter);  filterSource=Filter.makeCopy(getSourceCode());  filterSource.setInputFormat(data);  filteredInstancesSource=Filter.useFilter(data,filterSource);  result=compare(filteredInstances,filteredInstancesSource);  if (result) {    filter=Filter.makeCopy(getFilter());    filter.setInputFormat(data);    Filter.useFilter(data,filter);    filterSource=Filter.makeCopy(getSourceCode());    filterSource.setInputFormat(data);    for (i=0; i < data.numInstances(); i++) {      filter.input(data.instance(i));      filter.batchFinished();      filteredInstance=filter.output();      filterSource.input(data.instance(i));      filterSource.batchFinished();      filteredInstanceSource=filterSource.output();      if (!compare(filteredInstance,filteredInstanceSource)) {        System.out.println((i + 1) + ". instance (Filter/Source code): " + filteredInstance+ " != "+ filteredInstanceSource);      }    }  }  return result;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypesPackage.TANNOTATION__NAME:    return getName();case TypesPackage.TANNOTATION__ARGS:  return getArgs();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public TargetRoll(int value,String desc){  addModifier(value,desc);}  }
class C{  java.sql.Timestamp toSqlTimestamp(Calendar calendar){  return new java.sql.Timestamp(getTimeInMillis(calendar));}  }
class C{  protected void doWriteObject(ObjectOutputStream outStream) throws IOException {  outStream.writeFloat(loadFactor);  outStream.writeInt(data.length);  outStream.writeInt(size);  for (MapIterator it=mapIterator(); it.hasNext(); ) {    outStream.writeObject(it.next());    outStream.writeObject(it.getValue());  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void implCreateIfNeeded() throws IOException {  if (!implCreated) {synchronized (this) {      if (!implCreated) {        try {          impl.create(true);        }  finally {          implCreated=true;        }      }    }  }}  }
class C{  public static Document createDocument(){  try {    DocumentBuilderFactory fact=DocumentBuilderFactory.newInstance();    fact.setNamespaceAware(true);    DocumentBuilder db=fact.newDocumentBuilder();    return db.newDocument();  } catch (  ParserConfigurationException e) {    throw new RuntimeException(e);  }}  }
class C{  public RTADefaultInputMap(){  super();  int defaultModifier=getDefaultModifier();  int shift=InputEvent.SHIFT_MASK;  put(KeyStroke.getKeyStroke(KeyEvent.VK_HOME,0),DefaultEditorKit.beginLineAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_HOME,shift),DefaultEditorKit.selectionBeginLineAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_HOME,defaultModifier),DefaultEditorKit.beginAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_HOME,defaultModifier | shift),DefaultEditorKit.selectionBeginAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_END,0),DefaultEditorKit.endLineAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_END,shift),DefaultEditorKit.selectionEndLineAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_END,defaultModifier),DefaultEditorKit.endAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_END,defaultModifier | shift),DefaultEditorKit.selectionEndAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_LEFT,0),DefaultEditorKit.backwardAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_LEFT,shift),DefaultEditorKit.selectionBackwardAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_LEFT,defaultModifier),DefaultEditorKit.previousWordAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_LEFT,defaultModifier | shift),DefaultEditorKit.selectionPreviousWordAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_DOWN,0),DefaultEditorKit.downAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_DOWN,shift),DefaultEditorKit.selectionDownAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_DOWN,defaultModifier),RTextAreaEditorKit.rtaScrollDownAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_DOWN,defaultModifier | shift),RTextAreaEditorKit.rtaLineDownAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT,0),DefaultEditorKit.forwardAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT,shift),DefaultEditorKit.selectionForwardAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT,defaultModifier),DefaultEditorKit.nextWordAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT,defaultModifier | shift),DefaultEditorKit.selectionNextWordAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_UP,0),DefaultEditorKit.upAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_UP,shift),DefaultEditorKit.selectionUpAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_UP,defaultModifier),RTextAreaEditorKit.rtaScrollUpAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_UP,defaultModifier | shift),RTextAreaEditorKit.rtaLineUpAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_PAGE_UP,0),DefaultEditorKit.pageUpAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_PAGE_UP,shift),RTextAreaEditorKit.rtaSelectionPageUpAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_PAGE_UP,defaultModifier | shift),RTextAreaEditorKit.rtaSelectionPageLeftAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_PAGE_DOWN,0),DefaultEditorKit.pageDownAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_PAGE_DOWN,shift),RTextAreaEditorKit.rtaSelectionPageDownAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_PAGE_DOWN,defaultModifier | shift),RTextAreaEditorKit.rtaSelectionPageRightAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_CUT,0),DefaultEditorKit.cutAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_COPY,0),DefaultEditorKit.copyAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_PASTE,0),DefaultEditorKit.pasteAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_X,defaultModifier),DefaultEditorKit.cutAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_C,defaultModifier),DefaultEditorKit.copyAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_V,defaultModifier),DefaultEditorKit.pasteAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_DELETE,0),DefaultEditorKit.deleteNextCharAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_DELETE,shift),DefaultEditorKit.cutAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_DELETE,defaultModifier),RTextAreaEditorKit.rtaDeleteRestOfLineAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_INSERT,0),RTextAreaEditorKit.rtaToggleTextModeAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_INSERT,shift),DefaultEditorKit.pasteAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_INSERT,defaultModifier),DefaultEditorKit.copyAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_A,defaultModifier),DefaultEditorKit.selectAllAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_D,defaultModifier),RTextAreaEditorKit.rtaDeleteLineAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_J,defaultModifier),RTextAreaEditorKit.rtaJoinLinesAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_BACK_SPACE,shift),DefaultEditorKit.deletePrevCharAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_BACK_SPACE,defaultModifier),RTextAreaEditorKit.rtaDeletePrevWordAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_TAB,0),DefaultEditorKit.insertTabAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0),DefaultEditorKit.insertBreakAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,shift),DefaultEditorKit.insertBreakAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,defaultModifier),RTextAreaEditorKit.rtaDumbCompleteWordAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_Z,defaultModifier),RTextAreaEditorKit.rtaUndoAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_Y,defaultModifier),RTextAreaEditorKit.rtaRedoAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_F2,0),RTextAreaEditorKit.rtaNextBookmarkAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_F2,shift),RTextAreaEditorKit.rtaPrevBookmarkAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_F2,defaultModifier),RTextAreaEditorKit.rtaToggleBookmarkAction);}  }
class C{  @Override public void removeDeviceFilter(DiscoveryFilter filter){}  }
class C{  public void testFactoryDynamic() throws Exception {  Similarity sim=getSimilarity("text_sim2");  assertEquals(MockConfigurableSimilarity.class,sim.getClass());  assertEquals("is there an echo?",((MockConfigurableSimilarity)sim).getPassthrough());}  }
class C{  static void deserialize(DataInput in,Serializers serializers) throws IOException, ClassNotFoundException {  int size=in.readInt();  if (size > 0) {    StringBuilder msg=new StringBuilder(String.format("Deserialize %d serializer classes:",size));    if (serializers.serializersArray.length < size) {      serializers.serializersArray=Arrays.copyOf(serializers.serializersArray,size);    }    int max=0;    for (int i=0; i < size; i++) {      int index=in.readInt();      max=Math.max(max,index);      String serializerClassName=in.readUTF();      try {        Class<Serializer> serializerClass=(Class<Serializer>)Class.forName(serializerClassName);        Serializer serializerInstance=serializerClass.newInstance();        serializers.serializers.put(getSerializerType(serializerInstance),new SerializerWrapper(index,serializerInstance));        serializers.serializersArray[index]=serializerInstance;        msg.append(String.format("%n  (%d) %s",index,serializerClassName));      } catch (      Exception ex) {        LOGGER.log(Level.WARNING,(String.format("Can't find the serializer '%s'",serializerClassName)),ex);      }    }    serializers.COUNTER.set(max + 1);    LOGGER.info(msg.toString());  }}  }
class C{  public Object copyValue() throws Throwable {  if (tag != ARRAY || Array.getLength(value) == 0) {    return value;  }  Class type=value.getClass();  if (type == int[].class) {    return ((int[])value).clone();  } else   if (type == byte[].class) {    return ((byte[])value).clone();  } else   if (type == short[].class) {    return ((short[])value).clone();  } else   if (type == long[].class) {    return ((long[])value).clone();  } else   if (type == char[].class) {    return ((char[])value).clone();  } else   if (type == boolean[].class) {    return ((boolean[])value).clone();  } else   if (type == float[].class) {    return ((float[])value).clone();  } else   if (type == double[].class) {    return ((double[])value).clone();  }  return ((Object[])value).clone();}  }
class C{  public static ThreadSafeSourceLocator wrap(Object syncObj,SourceLocator sourceLocator){  if (sourceLocator != null)   return new ThreadSafeSourceLocator(syncObj,sourceLocator); else   return null;}  }
class C{  public int read() throws IOException {  return is.read();}  }
class C{  public CompanyApplicationExample(CompanyApplicationObject sample){  oredCriteria=new ArrayList<Criteria>();  Criteria criteria=this.or();  if (sample.getTeamName() != null) {    criteria.andTeamNameEqualTo(sample.getTeamName());  }  if (sample.getContactEmail() != null) {    criteria.andContactEmailEqualTo(sample.getContactEmail());  }  if (sample.getContactName() != null) {    criteria.andContactNameEqualTo(sample.getContactName());  }  if (sample.getDescription() != null) {    criteria.andDescriptionEqualTo(sample.getDescription());  }  if (sample.getTeamSize() != null) {    criteria.andTeamSizeEqualTo(sample.getTeamSize());  }  if (sample.getCodeHost() != null) {    criteria.andCodeHostEqualTo(sample.getCodeHost());  }  if (sample.getCode() != null) {    criteria.andCodeEqualTo(sample.getCode());  }}  }
class C{  void initFromCameraParameters(Camera camera){  Camera.Parameters parameters=camera.getParameters();  previewFormat=parameters.getPreviewFormat();  previewFormatString=parameters.get("preview-format");  Log.d(TAG,"Default preview format: " + previewFormat + '/'+ previewFormatString);  WindowManager manager=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);  Display display=manager.getDefaultDisplay();  screenResolution=new Point(display.getWidth(),display.getHeight());  Log.d(TAG,"Screen resolution: " + screenResolution);  cameraResolution=getCameraResolution(parameters,screenResolution);  Log.d(TAG,"Camera resolution: " + screenResolution);}  }
class C{  protected void runTests() throws Exception {  startToMain("HelloWorld");  if (!vm().canBeModified()) {    failure("VM says it is read-only");  }  EventRequestManager erm=vm().eventRequestManager();  erm.createMethodEntryRequest().enable();  erm.createClassPrepareRequest().enable();  erm.createThreadDeathRequest().enable();  addListener(this);synchronized (syncer) {    vm().resume();    while (!disconnected) {      try {        syncer.wait();      } catch (      InterruptedException e) {      }    }  }  if (!testFailed) {    println("VMDeathLastTest: passed");  } else {    throw new Exception("VMDeathLastTest: failed");  }}  }
class C{  public static int optionLength(String option){  if (option.equals("-output")) {    return 2;  } else {    return 0;  }}  }
class C{  public void processingInstruction(String target,String data) throws SAXException {}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:14.920 -0500",hash_original_method="561A780B99BF7A4044A2E8788BD03387",hash_generated_method="E3764ABE4D36BE19BCC27AB1D9DDAF59") public URI parseServerAuthority() throws URISyntaxException {  if (!serverAuthority) {    parseAuthority(true);  }  return this;}  }
class C{  public SnackbarBuilder backgroundColor(@ColorInt int backgroundColor){  this.backgroundColor=backgroundColor;  return this;}  }
class C{  public static void sleep(long millis){  try {    Thread.sleep(5000);  } catch (  InterruptedException e) {    e.printStackTrace();  }}  }
class C{  protected void fireDocumentAboutToBeChanged(DocumentEvent event){  if (fDocumentPartitioners != null) {    for (    DocumentPartitioner p : fDocumentPartitioners.values()) {      try {        p.documentAboutToBeChanged(event);      } catch (      Exception ex) {        fail(ex);      }    }  }  aboutToBeChangedForAll(event,fPrenotifiedDocumentListeners.getListeners());  aboutToBeChangedForAll(event,fDocumentListeners.getListeners());}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public static void main(String[] args) throws Exception {  Main main=new Main();  main.run();}  }
class C{  public Boolean isRunWithDebugInfo(){  return runWithDebugInfo;}  }
class C{  public void put(String key,String value){  if ("weather".equals(key) && value != null && value.startsWith(WeatherUpdater.WEATHER_KEYWORD)) {    WeatherUpdater.get().manageAttributes(this,value);  } else   if ("color_method".equals(key) && "time".equals(value)) {    DaylightUpdater.get().manageAttributes(this);  } else {    if ("color".equals(key)) {      try {        if (value.startsWith("0x") || value.startsWith("0X") || value.startsWith("#")) {          value=Integer.decode(value).toString();        }      } catch (      RuntimeException e) {        logger.error("Failed to decode color '" + value + "'",e);      }    }    attr.put(key,value);  }  invalidate();}  }
class C{  public static MethodIdentifier of(final String containingClass,final String methodName,final String signature,final boolean staticMethod){  final String returnType=JavaUtils.getReturnType(signature);  final int parameters=JavaUtils.getParameters(signature).size();  return new MethodIdentifier(containingClass,methodName,returnType,staticMethod,signature,parameters);}  }
class C{  public static RawHeaders fromBytes(InputStream in) throws IOException {  RawHeaders headers;  do {    headers=new RawHeaders();    headers.setStatusLine(Util.readAsciiLine(in));    readHeaders(in,headers);  } while (headers.getResponseCode() == HttpEngine.HTTP_CONTINUE);  return headers;}  }
class C{  @Dimension(unit=Dimension.PX) public static float pxToDp(@Dimension(unit=Dimension.PX) float px){  return px / getContext().getResources().getDisplayMetrics().density;}  }
class C{  public static String viewTypeToString(final ViewType type){  return type == ViewType.Native ? "'native'" : "'non-native'";}  }
class C{  public void clearCaches(){  for (int i=0; i < caches.length; i++) {    if (caches[i] != null) {      caches[i].clearCache();    }  }}  }
class C{  public static boolean isLoggable(int logLevel){  return (logLevel >= LOGLEVEL);}  }
class C{  public static boolean hasDeliveryReceiptRequest(Packet p){  return (p.getExtension(DeliveryReceiptRequest.ELEMENT,DeliveryReceipt.NAMESPACE) != null);}  }
class C{  @Override public void useDefaultVisual(){  m_visual.loadIcons(BeanVisual.ICON_PATH + "Appender.png",BeanVisual.ICON_PATH + "Appender.png");  m_visual.setText("Appender");}  }
class C{  public IntSetFixedSize(int size){  has=new boolean[size];  prev=new int[size];  next=new int[size];  first=STOP;}  }
class C{  public JOSMTolerantFastXMLParser(Sink sink,XMLStreamReader reader,boolean enableDateParsing){  this.sink=sink;  this.enableDateParsing=enableDateParsing;  this.reader=reader;  if (enableDateParsing) {    timestampFormat=new XmlTimestampFormat();  } else {    Calendar calendar;    calendar=Calendar.getInstance();    calendar.set(Calendar.MILLISECOND,0);    dummyTimestampContainer=new SimpleTimestampContainer(calendar.getTime());  }  memberTypeParser=new MemberTypeParser();}  }
class C{  @ValidationErrorPage(value="new") @Action(value="/receipts/receipt-save") public String save(){  List<InstrumentHeader> receiptInstrList=new ArrayList<InstrumentHeader>(0);  LOGGER.info("Receipt creation process is started !!!!!!");  ReceiptHeader rhForValidation=null;  String returnValue="";  final long startTimeMillis=System.currentTimeMillis();  if (manualReceiptNumber != null && manualReceiptDate != null) {    final CFinancialYear financialYear=collectionsUtil.getFinancialYearforDate(manualReceiptDate);    rhForValidation=receiptHeaderService.findByNamedQuery(CollectionConstants.QUERY_RECEIPT_BY_SERVICE_MANUALRECEIPTNO_AND_DATE,manualReceiptNumber,receiptHeader.getService().getCode(),financialYear.getStartingDate(),financialYear.getEndingDate(),CollectionConstants.RECEIPT_STATUS_CODE_CANCELLED);  }  if (rhForValidation == null) {    if (oldReceiptId != null) {      final ReceiptHeader receiptHeaderToBeCancelled=receiptHeaderService.findById(oldReceiptId,false);      receiptHeaderToBeCancelled.setStatus(statusDAO.getStatusByModuleAndCode(CollectionConstants.MODULE_NAME_RECEIPTHEADER,CollectionConstants.RECEIPT_STATUS_CODE_CANCELLED));      receiptHeaderToBeCancelled.setReasonForCancellation(reasonForCancellation);      receiptHeaderToBeCancelled.setIsReconciled(false);      receiptHeaderService.persist(receiptHeaderToBeCancelled);      if (receiptHeaderToBeCancelled.getReceipttype() == CollectionConstants.RECEIPT_TYPE_BILL) {        populateReceiptModelWithExistingReceiptInfo(receiptHeaderToBeCancelled);        LOGGER.info("Receipt Cancelled with Receipt Number(recreateNewReceiptOnCancellation): " + receiptHeaderToBeCancelled.getReceiptnumber() + "; Consumer Code: "+ receiptHeaderToBeCancelled.getConsumerCode());      }    }    if (billSource.equalsIgnoreCase("misc")) {      createMisc();      if (!setMiscReceiptDetails())       returnValue=NEW;    } else {      if (callbackForApportioning && !overrideAccountHeads)       apportionBillAmount();      if (receiptDetailList == null || receiptDetailList.isEmpty() || receiptDetailList.size() == 0)       throw new ApplicationRuntimeException("Receipt could not be created as the apportioned receipt detail list is empty"); else {        BigDecimal totalCreditAmount=BigDecimal.ZERO;        for (        final ReceiptDetail receiptDetail : receiptDetailList)         totalCreditAmount=totalCreditAmount.add(receiptDetail.getCramount());        if (totalCreditAmount.intValue() == 0)         throw new ApplicationRuntimeException("Apportioning Failed at the Billing System: " + receiptHeader.getService().getCode() + ", for bill number: "+ receiptHeader.getReferencenumber()); else         receiptHeader.setReceiptDetails(new HashSet(receiptDetailList));      }    }    int noOfNewlyCreatedReceipts=0;    boolean setInstrument=true;    if (receiptHeader.getStatus() == null) {      noOfNewlyCreatedReceipts++;      if (manualReceiptDate == null)       receiptHeader.setReceiptdate(new Date()); else {        receiptHeader.setManualreceiptdate(manualReceiptDate);        receiptHeader.setReceiptdate(manualReceiptDate);        receiptHeader.setVoucherDate(manualReceiptDate);      }      if (manualReceiptNumber != null)       receiptHeader.setManualreceiptnumber(manualReceiptNumber);      if (isBillSourcemisc()) {        receiptHeader.setReceipttype(CollectionConstants.RECEIPT_TYPE_ADHOC);        receiptHeader.setVoucherDate(voucherDate);        receiptHeader.setReceiptdate(voucherDate);        receiptHeader.setVoucherNum(voucherNum);        receiptHeader.setIsReconciled(Boolean.TRUE);        receiptHeader.setManualreceiptdate(manualReceiptDate);        receiptHeader.setPayeeName(StringEscapeUtils.unescapeHtml(paidBy));      } else {        receiptHeader.setReceipttype(CollectionConstants.RECEIPT_TYPE_BILL);        receiptHeader.setIsModifiable(Boolean.TRUE);        receiptHeader.setIsReconciled(Boolean.FALSE);      }      receiptHeader.setCollectiontype(CollectionConstants.COLLECTION_TYPE_COUNTER);      receiptHeader.setLocation(collectionsUtil.getLocationOfUser(getSession()));      receiptHeader.setStatus(collectionsUtil.getStatusForModuleAndCode(CollectionConstants.MODULE_NAME_RECEIPTHEADER,CollectionConstants.RECEIPT_STATUS_CODE_TO_BE_SUBMITTED));      receiptHeader.setPaidBy(StringEscapeUtils.unescapeHtml(paidBy));      receiptHeader.setSource(Source.SYSTEM.toString());      if (getOldReceiptId() != null)       receiptHeader.setReceiptHeader(receiptHeaderService.findById(getOldReceiptId(),false));      if (setInstrument) {        receiptInstrList=populateInstrumentDetails();        setInstrument=false;      }      receiptHeader.setReceiptInstrument(new HashSet(receiptInstrList));      BigDecimal debitAmount=BigDecimal.ZERO;      for (      final ReceiptDetail creditChangeReceiptDetail : receiptDetailList)       for (      final ReceiptDetail receiptDetail : receiptHeader.getReceiptDetails())       if (creditChangeReceiptDetail.getReceiptHeader().getReferencenumber().equals(receiptDetail.getReceiptHeader().getReferencenumber()) && receiptDetail.getOrdernumber().equals(creditChangeReceiptDetail.getOrdernumber())) {        receiptDetail.setCramount(creditChangeReceiptDetail.getCramount());        receiptDetail.setDramount(creditChangeReceiptDetail.getDramount());        debitAmount=debitAmount.add(creditChangeReceiptDetail.getCramount());        debitAmount=debitAmount.subtract(creditChangeReceiptDetail.getDramount());      }      if (chequeInstrumenttotal != null && chequeInstrumenttotal.compareTo(BigDecimal.ZERO) != 0)       receiptHeader.setTotalAmount(chequeInstrumenttotal);      if (cashOrCardInstrumenttotal != null && cashOrCardInstrumenttotal.compareTo(BigDecimal.ZERO) != 0)       receiptHeader.setTotalAmount(cashOrCardInstrumenttotal);      if (isBillSourcemisc())       receiptHeader.addReceiptDetail(collectionCommon.addDebitAccountHeadDetails(totalDebitAmount,receiptHeader,chequeInstrumenttotal,cashOrCardInstrumenttotal,instrumentTypeCashOrCard)); else       receiptHeader.addReceiptDetail(collectionCommon.addDebitAccountHeadDetails(debitAmount,receiptHeader,chequeInstrumenttotal,cashOrCardInstrumenttotal,instrumentTypeCashOrCard));    }    LOGGER.info("Call back for apportioning is completed");    receiptHeaderService.populateAndPersistReceipts(receiptHeader,receiptInstrList);    selectedReceipts=new Long[noOfNewlyCreatedReceipts];    int i=0;    if (!receiptHeader.getId().equals(oldReceiptId)) {      selectedReceipts[i]=receiptHeader.getId();      i++;    }    final long elapsedTimeMillis=System.currentTimeMillis() - startTimeMillis;    LOGGER.info("$$$$$$ Receipt Persisted with Receipt Number: " + receiptHeader.getReceiptnumber() + (receiptHeader.getConsumerCode() != null ? " and consumer code: " + receiptHeader.getConsumerCode() : "")+ "; Time taken(ms) = "+ elapsedTimeMillis);    if (!receiptBulkUpload)     returnValue=printReceipts(); else     returnValue=SUCCESS;  } else {    if (rhForValidation.getService().getCode().equals(CollectionConstants.SERVICECODE_PROPERTYTAX))     addActionError("Entered Manual receipt number already exists for the index number" + rhForValidation.getConsumerCode() + ".Please enter a valid manual receipt number and create the receipt."); else     addActionError("Receipt already exists for the service ");    returnValue=NEW;  }  return returnValue;}  }
class C{  private final void pingIpAddr(){  try {    String ipAddress="74.125.47.104";    Process p=Runtime.getRuntime().exec("ping -c 1 -w 100 " + ipAddress);    int status=p.waitFor();    if (status == 0) {      mPingIpAddrResult="Pass";    } else {      mPingIpAddrResult="Fail: IP addr not reachable";    }  } catch (  IOException e) {    mPingIpAddrResult="Fail: IOException";  }catch (  InterruptedException e) {    mPingIpAddrResult="Fail: InterruptedException";  }}  }
class C{  public ODataToken lookPrevToken(){  if (this.currentODataToken - 1 < 0) {    return null;  }  return this.tokens.get(this.currentODataToken - 1);}  }
class C{  public Lis(){  super(2,2);}  }
class C{  public String toString(int indentFactor) throws JSONException {  StringWriter sw=new StringWriter();synchronized (sw.getBuffer()) {    return this.write(sw,indentFactor,0).toString();  }}  }
class C{  public String countryCode(){  return countryCode;}  }
class C{  public static void doHierarchicLayout(final JFrame parent,final ZyGraph graph){  checkArguments(parent,graph);  if (!askLayout(parent,graph)) {    return;  }  graph.getSettings().getLayoutSettings().setDefaultGraphLayout(LayoutStyle.HIERARCHIC);  refreshLayout(parent,graph);}  }
class C{  @Override public void activateSingleClone(StorageSystem storageSystem,URI fullCopy,TaskCompleter completer){  log.info("START activateSingleClone for {}",fullCopy);  try {    Volume clone=_dbClient.queryObject(Volume.class,fullCopy);    URI sourceUri=clone.getAssociatedSourceVolume();    BlockObject sourceObj=BlockObject.fetch(_dbClient,sourceUri);    StorageSystem sourceSystem=_dbClient.queryObject(StorageSystem.class,sourceObj.getStorageController());    CIMObjectPath syncObject=_cimPath.getStorageSynchronized(sourceSystem,sourceObj,storageSystem,clone);    CIMInstance instance=_helper.checkExists(storageSystem,syncObject,false,false);    if (instance != null) {      fractureReplica(storageSystem,syncObject);      clone.setSyncActive(true);      clone.setRefreshRequired(true);      clone.setReplicaState(ReplicationState.SYNCHRONIZED.name());      _dbClient.persistObject(clone);      if (completer != null) {        completer.ready(_dbClient);      }      log.info("FINISH activateSingleClone for {}",fullCopy);    } else {      String errorMsg="The clone is already detached. active will not be performed.";      log.info(errorMsg);      ServiceError error=DeviceControllerErrors.smis.methodFailed("activateSingleClone",errorMsg);      if (completer != null) {        completer.error(_dbClient,error);      }    }  } catch (  Exception e) {    String errorMsg=String.format(ACTIVATE_ERROR_MSG_FORMAT,fullCopy);    log.error(errorMsg,e);    if (completer != null) {      completer.error(_dbClient,DeviceControllerException.exceptions.activateVolumeFullCopyFailed(e));    }  }  log.info("activateSingleClone operation END");}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){  for (int i=0; i < m_patterns.length; i++) {    m_patterns[i].fixupVariables(vars,globalsSize);  }}  }
class C{  private Exchange createExchange(String exchangeShortname){  log.debug("creating exchange from exchangeShortname  = " + exchangeShortname);  if (exchangeShortname == null) {    return null;  }  try {    String exchangeClassname=ExchangeData.convertExchangeShortNameToClassname(exchangeShortname);    if (exchangeClassname == null) {      return null;    }    Exchange exchangeToReturn;    if (ExchangeData.OPEN_EXCHANGE_RATES_EXCHANGE_NAME.equalsIgnoreCase(exchangeShortname)) {      ExchangeSpecification exchangeSpecification=new ExchangeSpecification(exchangeClassname);      exchangeSpecification.setPlainTextUri("http://openexchangerates.org");      exchangeSpecification.setApiKey(controller.getModel().getUserPreference(ExchangeModel.OPEN_EXCHANGE_RATES_API_CODE));      exchangeToReturn=ExchangeFactory.INSTANCE.createExchange(exchangeSpecification);    } else {      exchangeToReturn=ExchangeFactory.INSTANCE.createExchange(exchangeClassname);    }    if (this.exchangeController.getModel().getExchangeData(shortExchangeName) == null) {      ExchangeData exchangeData=new ExchangeData();      exchangeData.setShortExchangeName(shortExchangeName);      this.exchangeController.getModel().getShortExchangeNameToExchangeMap().put(exchangeShortname,exchangeData);    }    return exchangeToReturn;  } catch (  com.xeiam.xchange.ExchangeException e) {    log.error(e.getClass().getName() + " " + e.getMessage());  }catch (  NoClassDefFoundError e) {    log.error(e.getClass().getName() + " " + e.getMessage());  }catch (  NullPointerException e) {    log.error(e.getClass().getName() + " " + e.getMessage());  }  return null;}  }
class C{  public void initialize(JobContext job,RuntimeServices services){  InvocationContext<I,O> context=new InvocationContext<I,O>(id,job,services,inputs.size(),outputs,outputContext);  try {    oplet.initialize(context);  } catch (  Exception e) {    logger.error("Error while initializing oplet",e);  }  List<? extends Consumer<I>> streamers=oplet.getInputs();  for (int i=0; i < inputs.size(); i++)   inputs.get(i).setDestination(streamers.get(i));}  }
class C{  public TimestampToken generateCAdESContentTimestampAsTimestampToken(final XAdESSignatureParameters externalParameters){  final byte[] bytes=DSSUtils.toByteArray(externalParameters.getDetachedContent());  final TimestampToken token=generateTimestampToken(TimestampType.CONTENT_TIMESTAMP,externalParameters,bytes);  return token;}  }
class C{  public boolean isWithin(final double x,final double y,final double z){  if (circlePlane == null)   return false;  if (!circlePlane.isWithin(x,y,z))   return false;  for (  final Membership m : cutoffPlanes) {    if (!m.isWithin(x,y,z)) {      return false;    }  }  return true;}  }
class C{  public void addPath(int[] path){  paths.add(path);}  }
class C{  public static double P_FalsePositives(int y[],int ypred[]){  int s=0;  for (int j=0; j < y.length; j++) {    if (ypred[j] == 1 && y[j] == 0)     s++;  }  return s;}  }
class C{  @Override public SampledGraphProjection<G,V,E> createGraph(G delegate){  return new SampledGraphProjection<G,V,E>(delegate);}  }
class C{  public boolean add(final Throwable throwable){  return add(this.stackTraceSet,throwable);}  }
class C{  public void add(int index,DataModel element){  modelList.add(index,element);}  }
class C{  @Override protected void register(DeployableFactory deployableFactory){}  }
class C{  public char[] toCharArray(){  Entity e=root;  char[] chrs=new char[size()];  int off=0;  while (e.next != null) {    e=e.next;    System.arraycopy(e.data,0,chrs,off,e.data.length);    off+=e.data.length;  }  System.arraycopy(buffer,0,chrs,off,pos);  return chrs;}  }
class C{  protected int createFastaFileLoadStepInstance(){  int stepInstancesCreated=0;  if (fastaFilePath != null) {    LOGGER.debug("Creating FASTA file load step.");    Map<String,String> params=new HashMap<>();    params.put(FastaFileLoadStep.FASTA_FILE_PATH_KEY,fastaFilePath);    createBlackBoxParams(params);    stepInstancesCreated=createStepInstancesForJob("jobLoadFromFasta",params);    LOGGER.info("Fasta file load step instance has been created.");  }  return stepInstancesCreated;}  }
class C{  Key unwrap(byte[] wrappedKey,String wrappedKeyAlgorithm,int wrappedKeyType) throws InvalidKeyException, NoSuchAlgorithmException {  byte[] encodedKey;  try {    encodedKey=doFinal(wrappedKey,0,wrappedKey.length);  } catch (  BadPaddingException ePadding) {    throw new InvalidKeyException("The wrapped key is not padded " + "correctly");  }catch (  IllegalBlockSizeException eBlockSize) {    throw new InvalidKeyException("The wrapped key does not have " + "the correct length");  }  return ConstructKeys.constructKey(encodedKey,wrappedKeyAlgorithm,wrappedKeyType);}  }
class C{  void initInputFrame(final ClassWriter cw,final int access,final Type[] args,final int maxLocals){  inputLocals=new int[maxLocals];  inputStack=new int[0];  int i=0;  if ((access & Opcodes.ACC_STATIC) == 0) {    if ((access & MethodWriter.ACC_CONSTRUCTOR) == 0) {      inputLocals[i++]=OBJECT | cw.addType(cw.thisName);    } else {      inputLocals[i++]=UNINITIALIZED_THIS;    }  }  for (int j=0; j < args.length; ++j) {    int t=type(cw,args[j].getDescriptor());    inputLocals[i++]=t;    if (t == LONG || t == DOUBLE) {      inputLocals[i++]=TOP;    }  }  while (i < maxLocals) {    inputLocals[i++]=TOP;  }}  }
class C{  private final String prop(String name){  String value=System.getProperty(name);  if (value == null)   return "?"; else   return value;}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  public static int countMatches(String string,char c){  int n=0;  for (  char tc : string.toCharArray()) {    if (c == tc)     n++;  }  return n;}  }
class C{  private synchronized List<TestListener> cloneListeners(){  List<TestListener> result=new ArrayList<TestListener>();  result.addAll(fListeners);  return result;}  }
class C{  public void addAnimation(AnimationObject o){  AnimationObject[] n=new AnimationObject[animations.length + 1];  System.arraycopy(animations,0,n,0,animations.length);  n[animations.length]=o;  animations=n;}  }
class C{  private static TreeMultimap<String,URI> buildVolumesToExportMasksMap(DbClient dbClient,ExportGroup exportGroup){  TreeMultimap<String,URI> volumesToExportMasks=TreeMultimap.create();  List<ExportMask> exportMasks=ExportMaskUtils.getExportMasks(dbClient,exportGroup);  for (  ExportMask exportMask : exportMasks) {    if (exportMask.getUserAddedVolumes() != null) {      for (      String volUriStr : exportMask.getUserAddedVolumes().values()) {        volumesToExportMasks.put(volUriStr,exportMask.getId());      }    }  }  return volumesToExportMasks;}  }
class C{  public boolean evalPermissions(DispatchContext dctx,Map<String,? extends Object> context){  if (this.containsPermissions()) {    for (    ModelPermGroup group : this.permissionGroups) {      if (!group.evalPermissions(dctx,context)) {        return false;      }    }    return true;  } else {    return true;  }}  }
class C{  public int capacity(){  return sharedQueue.capacity();}  }
class C{  @Override public synchronized void afterPhase(PhaseEvent event){  if (!postInitCompleted && PhaseId.RENDER_RESPONSE.equals(event.getPhaseId())) {    ApplicationAssociate associate=ApplicationAssociate.getInstance(event.getFacesContext().getExternalContext());    associate.setRequestServiced();    LifecycleFactory factory=(LifecycleFactory)FactoryFinder.getFactory(FactoryFinder.LIFECYCLE_FACTORY);    for (Iterator<String> i=factory.getLifecycleIds(); i.hasNext(); ) {      Lifecycle lifecycle=factory.getLifecycle(i.next());      lifecycle.removePhaseListener(this);    }    postInitCompleted=true;  }}  }
class C{  public final void clear(){  int len=super.getLength();  super.clear();  if (MAX <= len) {    m_indexFromQName.clear();  }}  }
class C{  private ReilGraphConverter(){}  }
class C{  public final TextBuilder append(int i){  if (i <= 0) {    if (i == 0)     return append("0");    if (i == Integer.MIN_VALUE)     return append("-2147483648");    append('-');    i=-i;  }  int digits=MathLib.digitLength(i);  if (_capacity < _length + digits)   increaseCapacity();  _length+=digits;  for (int index=_length - 1; ; index--) {    int j=i / 10;    _high[index >> B1][index & M1]=(char)('0' + i - (j * 10));    if (j == 0)     return this;    i=j;  }}  }
class C{  Parsed(){}  }
class C{  public MLContext(SparkContext sc,boolean monitorPerformance) throws DMLRuntimeException {  initializeSpark(sc,monitorPerformance,false);}  }
class C{  private static String packageNameOf(TypeElement type){  while (true) {    Element enclosing=type.getEnclosingElement();    if (enclosing instanceof PackageElement) {      return ((PackageElement)enclosing).getQualifiedName().toString();    }    type=(TypeElement)enclosing;  }}  }
class C{  @Override protected void onPreviewNativeEvent(NativePreviewEvent event){  super.onPreviewNativeEvent(event);  if (event.getTypeInt() == Event.ONKEYDOWN && event.getNativeEvent().getKeyCode() == KeyCodes.KEY_ESCAPE) {    hide();  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();{    boolean success=false;    try {      child.replaceData(-5,3,"ABC");    } catch (    DOMException ex) {      success=(ex.code == DOMException.INDEX_SIZE_ERR);    }    assertTrue("throws_INDEX_SIZE_ERR",success);  }}  }
class C{  public EmailListEntry(){  super();  getCategories().add(EMAIL_LIST_CATEGORY);}  }
class C{  public void show(){  WizardDisplayer.showWizard(this);}  }
class C{  public String decodeClassName(int argNo){  int idx;  if (classes == null) {    classes=new Vector();    idx=0;    while (idx >= 0)     idx=decodeNextClassName(idx);  }  if (argNo == 0)   return (String)classes.elementAt(classes.size() - 1); else   return (String)classes.elementAt(argNo - 1);}  }
class C{  public void myMethod(){  return "";}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodeelementnodevalue.class,args);}  }
class C{  public void testFiles() throws Exception {  BinlogIndex bi=new BinlogIndex(".","mysql-bin",true);  assertEquals("Expect three entries",3,bi.getBinlogFiles().size());  File f0=bi.nextBinlog("foo");  assertNull("Non-existent file should return null",f0);  File f1=bi.nextBinlog("mysql-bin.000001");  assertEquals("Should return 2nd file","mysql-bin.000002",f1.getName());  File f2=bi.nextBinlog("mysql-bin.000002");  assertEquals("Should return 3rd file","mysql-bin.000003",f2.getName());  File f3=bi.nextBinlog("mysql-bin.000003");  assertNull("Last file should return null",f3);}  }
class C{  final int fullyRelease(Node node){  boolean failed=true;  try {    int savedState=getState();    if (release(savedState)) {      failed=false;      return savedState;    } else {      throw new IllegalMonitorStateException();    }  }  finally {    if (failed)     node.waitStatus=Node.CANCELLED;  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementinuseattributeerr.class,args);}  }
class C{  public boolean isDrawSliceTextEnabled(){  return mDrawXLabels;}  }
class C{  @Override public boolean parseAlignments(){  return false;}  }
class C{  public DaVinci tag(String tag){  if (!queues.containsKey(tag)) {    throw new RuntimeException("The pool has not been initialized");  }  mRequestQueue=queues.get(tag);  mDaImageLoader=loaders.get(tag);  return this;}  }
class C{  public void testRun() throws Exception {  StringWriter sw=new StringWriter();  PrintWriter pw=new PrintWriter(sw,true);  final int MAX_DOCS=atLeast(225);  doTest(random(),pw,false,MAX_DOCS);  pw.close();  sw.close();  String multiFileOutput=sw.toString();  sw=new StringWriter();  pw=new PrintWriter(sw,true);  doTest(random(),pw,true,MAX_DOCS);  pw.close();  sw.close();  String singleFileOutput=sw.toString();  assertEquals(multiFileOutput,singleFileOutput);}  }
class C{  public static IVMInstall findOrRegisterStandardVM(String version,File location){  Preconditions.checkNotNull(version);  Preconditions.checkNotNull(location);  return findOrRegisterVM(version,location);}  }
class C{  private void handleResponse(String[] args){  ConsoleUtils.info("responding");  if (currentRespondLatch == null)   currentRespondLatch=new CountDownLatch(1);  AddThread addThread=new AddThread(args[1],parseMarble,prevRespondLatch,currentRespondLatch);  prevRespondLatch=currentRespondLatch;  currentRespondLatch=new CountDownLatch(1);  addThread.start();}  }
class C{  public Address city(String city){  this.city=city;  return this;}  }
class C{  public ImageElement(Image image){  m_image=image;  if (m_image != null)   log.fine("Image=" + image); else   log.log(Level.WARNING,"Image is NULL");}  }
class C{  public static void checkState(boolean expression){  if (!expression) {    throw new IllegalStateException();  }}  }
class C{  @Override public boolean add(MediaModel object){  internalAdd(object);  notifyModelChanged(true);  return true;}  }
class C{  public static String toLowerEnglish(String s){  return s.toLowerCase(Locale.ENGLISH);}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGet(request,response);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:30.759 -0500",hash_original_method="F4F35E6AADE0C2C218C2CEC9E86259B9",hash_generated_method="550227B2DCC771FDF8535ACBAB7BE67A") private void onRestrictedStateChanged(AsyncResult ar){  RestrictedState newRs=new RestrictedState();  if (DBG)   log("onRestrictedStateChanged: E rs " + mRestrictedState);  if (ar.exception == null) {    int[] ints=(int[])ar.result;    int state=ints[0];    newRs.setCsEmergencyRestricted(((state & RILConstants.RIL_RESTRICTED_STATE_CS_EMERGENCY) != 0) || ((state & RILConstants.RIL_RESTRICTED_STATE_CS_ALL) != 0));    if (phone.getIccCard().getState() == IccCard.State.READY) {      newRs.setCsNormalRestricted(((state & RILConstants.RIL_RESTRICTED_STATE_CS_NORMAL) != 0) || ((state & RILConstants.RIL_RESTRICTED_STATE_CS_ALL) != 0));      newRs.setPsRestricted((state & RILConstants.RIL_RESTRICTED_STATE_PS_ALL) != 0);    }    if (DBG)     log("onRestrictedStateChanged: new rs " + newRs);    if (!mRestrictedState.isPsRestricted() && newRs.isPsRestricted()) {      mPsRestrictEnabledRegistrants.notifyRegistrants();      setNotification(PS_ENABLED);    } else     if (mRestrictedState.isPsRestricted() && !newRs.isPsRestricted()) {      mPsRestrictDisabledRegistrants.notifyRegistrants();      setNotification(PS_DISABLED);    }    if (mRestrictedState.isCsRestricted()) {      if (!newRs.isCsRestricted()) {        setNotification(CS_DISABLED);      } else       if (!newRs.isCsNormalRestricted()) {        setNotification(CS_EMERGENCY_ENABLED);      } else       if (!newRs.isCsEmergencyRestricted()) {        setNotification(CS_NORMAL_ENABLED);      }    } else     if (mRestrictedState.isCsEmergencyRestricted() && !mRestrictedState.isCsNormalRestricted()) {      if (!newRs.isCsRestricted()) {        setNotification(CS_DISABLED);      } else       if (newRs.isCsRestricted()) {        setNotification(CS_ENABLED);      } else       if (newRs.isCsNormalRestricted()) {        setNotification(CS_NORMAL_ENABLED);      }    } else     if (!mRestrictedState.isCsEmergencyRestricted() && mRestrictedState.isCsNormalRestricted()) {      if (!newRs.isCsRestricted()) {        setNotification(CS_DISABLED);      } else       if (newRs.isCsRestricted()) {        setNotification(CS_ENABLED);      } else       if (newRs.isCsEmergencyRestricted()) {        setNotification(CS_EMERGENCY_ENABLED);      }    } else {      if (newRs.isCsRestricted()) {        setNotification(CS_ENABLED);      } else       if (newRs.isCsEmergencyRestricted()) {        setNotification(CS_EMERGENCY_ENABLED);      } else       if (newRs.isCsNormalRestricted()) {        setNotification(CS_NORMAL_ENABLED);      }    }    mRestrictedState=newRs;  }  log("onRestrictedStateChanged: X rs " + mRestrictedState);}  }
class C{  public static DataStoreEvent updateEvent(DBIDs updates){  return new DataStoreEvent(DBIDUtil.EMPTYDBIDS,DBIDUtil.EMPTYDBIDS,updates);}  }
class C{  public static double biNormalCdf(double ah,double ak,double r){  return biNormalCdf2(-ah,-ak,r);}  }
class C{  public SourcePosition(File file,JCTree sourceElement,Position startPosition,Position endPosition){  super();  this.file=file;  this.startPosition=startPosition;  this.endPosition=endPosition;  this.sourceElement=sourceElement;}  }
class C{  private static float CallStaticFloatMethodA(JNIEnvironment env,int classJREF,int methodID,Address argAddress) throws Exception {  if (traceJNI)   VM.sysWrite("JNI called: CallStaticFloatMethodA  \n");  Object returnObj=JNIGenericHelpers.callMethodJValuePtr(env,0,methodID,argAddress,TypeReference.Float,true);  return Reflection.unwrapFloat(returnObj);}  }
class C{  EmulatedFieldsForDumping(ObjectOutputStream oos,ObjectStreamClass streamClass){  this.oos=oos;  this.emulatedFields=new EmulatedFields(streamClass.fields(),(ObjectStreamField[])null);}  }
class C{  public void newBraces(EditorState editorState,char ch){  String casName=argumentHelper.readCharacters(editorState);  if (ch == FUNCTION_OPEN_KEY && metaModel.isGeneral(casName)) {    delCharacters(editorState,casName.length());    newFunction(editorState,casName);  } else   if (ch == FUNCTION_OPEN_KEY && metaModel.isFunction(casName)) {    delCharacters(editorState,casName.length());    newFunction(editorState,casName);  } else {    newArray(editorState,1,ch);  }}  }
class C{  public BoyerMoore(char[] pattern,int R){  this.R=R;  this.pattern=new char[pattern.length];  for (int j=0; j < pattern.length; j++)   this.pattern[j]=pattern[j];  right=new int[R];  for (int c=0; c < R; c++)   right[c]=-1;  for (int j=0; j < pattern.length; j++)   right[pattern[j]]=j;}  }
class C{  @Provides @Singleton StatisticsDataSource provideStatisticsDataSource(DaoSession session){  return new StatisticsDataSource(session);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  void updateLinkLiveHandle(HGLink link,HGLiveHandle lHandle){  int arity=link.getArity();  for (int i=0; i < arity; i++) {    HGHandle current=link.getTargetAt(i);    if (current == lHandle)     return; else     if (current.equals(lHandle.getPersistent())) {      link.notifyTargetHandleUpdate(i,lHandle);      return;    }  }}  }
class C{  public CCMenuItem(Object rec,String cb){  targetCallback=rec;  selector=cb;  setAnchorPoint(CGPoint.make(0.5f,0.5f));  invocation=null;  if (rec != null && cb != null) {    Class<?> cls=rec.getClass();    try {      invocation=cls.getMethod(cb,Object.class);    } catch (    SecurityException e) {      e.printStackTrace();    }catch (    NoSuchMethodException e) {      e.printStackTrace();    }  }  isEnabled_=true;  isSelected_=false;}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addAll(Collections.list(super.listOptions()));  result.addElement(new Option("\tSuppresses the 'Valid options are...' prolog in the Javadoc.","noprolog",0,"-noprolog"));  return result.elements();}  }
class C{  public E push(final E o){  add(o);  return o;}  }
class C{  void paintHex(Coords c){  board.resetStoredElevation();  board.setHex(c,curHex.duplicate());}  }
class C{  @ExceptionHandler(value=Exception.class) @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR) @ResponseBody public String exception(Exception exception,WebRequest request){  log.error("RestfulApiAdvice -> [ params={} exception={} message={}] ",request.getParameterMap(),exception.getClass(),exception.getMessage());  return "";}  }
class C{  @Nullable public String message(){  Object value=attributes != null ? attributes.get(ERROR_MESSAGE) : null;  return value != null ? String.valueOf(value) : null;}  }
class C{  public static final String toBitString(int i[]){  StringBuilder sb=new StringBuilder(i.length);  for (  int b : i) {    sb.append(b);  }  return sb.toString();}  }
class C{  public void reverse(){  int tmp;  int limit=size / 2;  int j=size - 1;  int[] theElements=elements;  for (int i=0; i < limit; ) {    tmp=theElements[i];    theElements[i++]=theElements[j];    theElements[j--]=tmp;  }}  }
class C{  @Override public int hashCode(){  return getClass().hashCode() ^ getId().hashCode();}  }
class C{  public void testPutString(){  byte[] expectedResult={4,0,0,1,'a','b','c',0};  String string="abc";  MySQLPacket array=new MySQLPacket(16,(byte)1);  ByteArrayOutputStream output=new ByteArrayOutputStream();  try {    array.putString(string);    array.write(output);    compareBytes(expectedResult,output.toByteArray());  } catch (  IOException e) {    fail("This should not happen!");  }}  }
class C{  public void clear(){  nbBFAccessed=0;  nbBFNodesAccessed=0;  nbSplits=0;  nbMerges=0;  nbRedistributes=0;}  }
class C{  private void delayedHide(int delayMillis){  mHideHandler.removeCallbacks(mHideRunnable);  mHideHandler.postDelayed(mHideRunnable,delayMillis);}  }
class C{  public double normalizeLatitude(double lat){  if (lat > NORTH_POLE) {    return NORTH_POLE;  } else   if (lat < SOUTH_POLE) {    return SOUTH_POLE;  }  return lat;}  }
class C{  public static Corleone context(String jobContext){  if (jobContext == null || jobContext.equals("")) {    throw new IllegalArgumentException("Job context must not be null or empty.");  }  contexts.clear();  contexts.add(jobContext);  return getInstance();}  }
class C{  public final boolean isReadAccess(){  return this.isReadAccess;}  }
class C{  @SuppressWarnings("unchecked") public Enumeration<Permission> elements(){synchronized (this) {    return (Enumeration)Collections.enumeration(perms.values());  }}  }
class C{  static public NetMember newNetMember(InetAddress i,int p,boolean splitBrainEnabled,boolean canBeCoordinator,short version,MemberAttributes payload){  return services.newNetMember(i,p,splitBrainEnabled,canBeCoordinator,payload,version);}  }
class C{  public void animateCheckMark(){  if (getBarView().getCompleted()) {    showCheckMark(true);  } else {    showCheckMark(false);  }}  }
class C{  public static <FV>DynamicTranslationModel<FV> load(String filename,boolean initializeSystemVocabulary) throws IOException {  return load(filename,initializeSystemVocabulary,filename);}  }
class C{  private int decodeCce(ChannelElement che){  int numGain=0;  SingleChannelElement sce=che.ch[0];  ChannelCoupling coup=che.coup;  coup.couplingPoint=2 * br.read1();  coup.numCoupled=br.read(3);  for (int c=0; c <= coup.numCoupled; c++) {    numGain++;    coup.type[c]=br.readBool() ? TYPE_CPE : TYPE_SCE;    coup.idSelect[c]=br.read(4);    if (coup.type[c] == TYPE_CPE) {      coup.chSelect[c]=br.read(2);      if (coup.chSelect[c] == 3) {        numGain++;      }    } else {      coup.chSelect[c]=2;    }  }  coup.couplingPoint+=(br.readBool() || (coup.couplingPoint >> 1) != 0) ? 1 : 0;  boolean sign=br.readBool();  float scale=cce_scale[br.read(2)];  int ret=decodeIcs(sce,false,false);  if (ret != 0) {    return ret;  }  for (int c=0; c < numGain; c++) {    int idx=0;    boolean cge=true;    int gain=0;    float gainCache=1f;    if (c != 0) {      cge=coup.couplingPoint == AFTER_IMDCT ? true : br.readBool();      gain=cge ? vlc_scalefactors.getVLC2(br,3) - 60 : 0;      gainCache=(float)pow(scale,-gain);    }    if (coup.couplingPoint == AFTER_IMDCT) {      coup.gain[c][0]=gainCache;    } else {      for (int g=0; g < sce.ics.numWindowGroups; g++) {        for (int sfb=0; sfb < sce.ics.maxSfb; sfb++, idx++) {          if (sce.bandType[idx] != ZERO_BT) {            if (!cge) {              int t=vlc_scalefactors.getVLC2(br,3) - 60;              if (t != 0) {                int s=1;                gain+=t;                t=gain;                if (sign) {                  s-=2 * (t & 0x1);                  t>>=1;                }                gainCache=(float)pow(scale,-t) * s;              }            }            coup.gain[c][idx]=gainCache;          }        }      }    }  }  return 0;}  }
class C{  public static boolean addSmiles(Context context,Spannable spannable){  boolean hasChanges=false;  for (  Entry<Pattern,Object> entry : emoticons.entrySet()) {    Matcher matcher=entry.getKey().matcher(spannable);    while (matcher.find()) {      boolean set=true;      for (      ImageSpan span : spannable.getSpans(matcher.start(),matcher.end(),ImageSpan.class))       if (spannable.getSpanStart(span) >= matcher.start() && spannable.getSpanEnd(span) <= matcher.end())       spannable.removeSpan(span); else {        set=false;        break;      }      if (set) {        hasChanges=true;        Object value=entry.getValue();        if (value instanceof String && !((String)value).startsWith("http")) {          File file=new File((String)value);          if (!file.exists() || file.isDirectory()) {            return false;          }          spannable.setSpan(new ImageSpan(context,Uri.fromFile(file)),matcher.start(),matcher.end(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);        } else {          spannable.setSpan(new ImageSpan(context,(Integer)value),matcher.start(),matcher.end(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);        }      }    }  }  return hasChanges;}  }
class C{  public void testEmptyTimedOffer(){  SubmissionPublisher<Integer> p=basicPublisher();  long startTime=System.nanoTime();  assertEquals(0,p.offer(1,LONG_DELAY_MS,MILLISECONDS,null));  assertTrue(millisElapsedSince(startTime) < LONG_DELAY_MS / 2);}  }
class C{  public ReloadableRegistrationHandle<T> put(String pluginName,Key<T> key,Provider<T> item){  String exportName=((Export)key.getAnnotation()).value();  NamePair np=new NamePair(pluginName,exportName);  items.put(np,item);  return new ReloadableHandle(np,key,item);}  }
class C{  public boolean isAutoThrottle(){  return autoThrottle;}  }
class C{  public static GeometryComparator createComparator(String geometryType,String axis,String extrema){  GeometryComparator comp=null;switch (geometryType.toUpperCase()) {case "CIRCLE":    if (axis.toUpperCase().equals("X")) {      return extrema.toUpperCase().equals("MAX") ? new CircleXMaxComparator() : new CircleXMinComparator();    } else     if (axis.toUpperCase().equals("Y")) {      return extrema.toUpperCase().equals("MAX") ? new CircleYMaxComparator() : new CircleYMinComparator();    }  break;case "POLYGON":if (axis.toUpperCase().equals("X")) {  return extrema.toUpperCase().equals("MAX") ? new PolygonXMaxComparator() : new PolygonXMinComparator();} else if (axis.toUpperCase().equals("Y")) {  return extrema.toUpperCase().equals("MAX") ? new PolygonYMaxComparator() : new PolygonYMinComparator();}break;case "RECTANGLE":if (axis.toUpperCase().equals("X")) {return extrema.toUpperCase().equals("MAX") ? new RectangleXMaxComparator() : new RectangleXMinComparator();} else if (axis.toUpperCase().equals("Y")) {return extrema.toUpperCase().equals("MAX") ? new RectangleYMaxComparator() : new RectangleYMinComparator();}break;default :break;}return comp;}  }
class C{  public Instances retrieveInstances(String query) throws Exception {  if (m_Debug) {    System.err.println("Executing query: " + query);  }  connectToDatabase();  if (execute(query) == false) {    if (m_PreparedStatement.getUpdateCount() == -1) {      throw new Exception("Query didn't produce results");    } else {      if (m_Debug) {        System.err.println(m_PreparedStatement.getUpdateCount() + " rows affected.");      }      close();      return null;    }  }  ResultSet rs=getResultSet();  if (m_Debug) {    System.err.println("Getting metadata...");  }  Instances result=retrieveInstances(this,rs);  close(rs);  return result;}  }
class C{  @SuppressWarnings("element-type-mismatch") private void removeOrphanContent(){  List<Content> emptyContentSet;  Integer nbOfContent=contentDataService.getNumberOfOrphanRelatedContent(mainWebResource).intValue();  Integer i=0;  Logger.getLogger(CrawlerImpl.class.getName()).debug("remove Orphan related contents  " + nbOfContent + " elements");  while (i.compareTo(nbOfContent) < 0) {    emptyContentSet=contentDataService.getOrphanRelatedContentList(mainWebResource,0,RETRIEVE_WINDOW);    for (    Content content : emptyContentSet) {      Logger.getLogger(CrawlerImpl.class.getName()).debug("Removing " + content.getURI());      contentDataService.delete(content.getId());    }    i=i + RETRIEVE_WINDOW;  }  nbOfContent=contentDataService.getNumberOfOrphanContent(mainWebResource).intValue();  i=0;  Logger.getLogger(CrawlerImpl.class.getName()).debug("remove Orphan SSPs  " + nbOfContent + " elements");  while (i.compareTo(nbOfContent) < 0) {    emptyContentSet=contentDataService.getOrphanContentList(mainWebResource,i,RETRIEVE_WINDOW);    for (    Content content : emptyContentSet) {      contentDataService.delete(content.getId());    }    i=i + RETRIEVE_WINDOW;  }}  }
class C{  private void updateSet(int i1,double a1,double C){  I0[i1]=a1 > 0 && a1 < C;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:21.477 -0500",hash_original_method="59837CA7040CC62FF3A3565A11425127",hash_generated_method="885A3F0ED409E93D0630E978F4CF01F0") public int startDataDownload(SmsMessage smsMessage){  if (sendMessage(obtainMessage(EVENT_START_DATA_DOWNLOAD,smsMessage))) {    return Activity.RESULT_OK;  } else {    Log.e(TAG,"startDataDownload failed to send message to start data download.");    return Intents.RESULT_SMS_GENERIC_ERROR;  }}  }
class C{  protected Link determineAtbLink(final LinksSupport links,final String linkId,final ProductSearchResultDTO product,final CustomerWishList itemData,final String qty){  final PageParameters params=new PageParameters();  params.add(WebParametersKeys.SKU_ID,itemData.getSkus().getSkuId());  return links.newAddToCartLink(linkId,product.getDefaultSkuCode(),qty,params);}  }
class C{  public boolean loadChildren(@NotNull Node parent){  return loadChildren(parent,false);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  double zConvFactor=1;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  zConvFactor=Double.parseDouble(args[2]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    double[] N=new double[8];    double fx, fy;    float aspect;    float progress=0;    int[] Dy={-1,0,1,1,1,0,-1,-1};    int[] Dx={1,1,1,0,-1,-1,-1,0};    final double radToDeg=180 / Math.PI;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=true;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double gridRes=inputFile.getCellSizeX();    double eightGridRes=8 * gridRes;    double noData=inputFile.getNoDataValue();    if (inputFile.getXYUnits().toLowerCase().contains("deg") || inputFile.getProjection().toLowerCase().contains("geog")) {      double midLat=(inputFile.getNorth() - inputFile.getSouth()) / 2.0;      if (midLat <= 90 && midLat >= -90) {        zConvFactor=1.0 / (113200 * Math.cos(Math.toRadians(midLat)));      }    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("circular_bw.pal");    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          for (int i=0; i < 8; i++) {            N[i]=inputFile.getValue(row + Dy[i],col + Dx[i]);            if (N[i] != noData) {              N[i]=N[i] * zConvFactor;            } else {              N[i]=z * zConvFactor;            }          }          fy=(N[6] - N[4] + 2 * (N[7] - N[3]) + N[0] - N[2]) / eightGridRes;          fx=(N[2] - N[4] + 2 * (N[1] - N[5]) + N[0] - N[6]) / eightGridRes;          if (fx != 0) {            aspect=(float)(180 - Math.atan(fy / fx) * radToDeg + 90 * (fx / Math.abs(fx)));            outputFile.setValue(row,col,aspect);          } else {            outputFile.setValue(row,col,-1);          }        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case DomPackage.JS_DOC_NODE___GET_MARKER_VALUE__STRING:    return getMarkerValue((String)arguments.get(0));case DomPackage.JS_DOC_NODE___SET_MARKER__STRING_STRING:  setMarker((String)arguments.get(0),(String)arguments.get(1));return null;case DomPackage.JS_DOC_NODE___IS_MARKED_AS__STRING_STRING:return isMarkedAs((String)arguments.get(0),(String)arguments.get(1));case DomPackage.JS_DOC_NODE___TO_STRING:return toString();}return super.eInvoke(operationID,arguments);}  }
class C{  public double[] computeLocalUsingPreviousObservations(double[][] states) throws Exception {  throw new Exception("Local method for other data not implemented");}  }
class C{  public final boolean canGetFloat(String field){  Column col=getColumn(field);  return (col == null ? false : col.canGetFloat());}  }
class C{  private void launchAnimBackup(){  if (!backupRoundTripFirstLaunched) {    if (backupRoundTrip.getLevel() == 1) {      backupRoundTrip.setLevel(0);    } else {      backupRoundTrip.setLevel(1);    }  } else {    backupRoundTripFirstLaunched=false;  }  currentBackupDrawable=(AnimatedVectorDrawable)backupRoundTrip.getCurrent();  currentBackupDrawable.start();}  }
class C{  public static int indexOf(byte[] array,byte value){  for (int i=0; i < array.length; i++) {    if (array[i] == value) {      return i;    }  }  return -1;}  }
class C{  private void updateRingtonePreferenceSummary(final RingtonePreference ringtonePreference,final String selectedRingtoneUriString){  if (!TextUtils.isEmpty(selectedRingtoneUriString)) {    final Ringtone selectedRingtone=RingtoneManager.getRingtone(getActivity(),Uri.parse(selectedRingtoneUriString));    if (selectedRingtone == null) {      ringtonePreference.setSummary(null);    } else {      ringtonePreference.setSummary(selectedRingtone.getTitle(getActivity()));    }  } else {    ringtonePreference.setSummary(null);  }}  }
class C{  public void fatalError(TransformerException exception) throws TransformerException {  if (m_throwExceptionOnError)   throw exception; else {    PrintWriter pw=getErrorWriter();    printLocation(pw,exception);    pw.println(exception.getMessage());  }}  }
class C{  public void testFailureStackTrace(){  RhinoException.useMozillaStackStyle(false);  final String source1="function f2() { throw 'hello'; }; f2();";  final String source2="function f2() { 'H'.toLowerCase(); throw 'hello'; }; f2();";  final String source3="function f2() { new java.lang.String('H').toLowerCase(); throw 'hello'; }; f2();";  final String result="\tat test.js (f2)" + LS + "\tat test.js"+ LS;  runWithExpectedStackTrace(source1,result);  runWithExpectedStackTrace(source2,result);  runWithExpectedStackTrace(source3,result);}  }
class C{  public boolean validate(String cert,String signedData,String signature) throws NoSuchAlgorithmException, IOException, Exception {  byte[] certBytes=Base64.decode(cert);  byte[] signedDataBytes=Base64.decode(signedData);  byte[] signatureBytes=Base64.decode(signature);  return validate(certBytes,signedDataBytes,signatureBytes);}  }
class C{  @Override public <T>T[] toArray(T[] array){  return newArray(array);}  }
class C{  public void clear(){  if (mManager != null)   mManager.clear();}  }
class C{  public void flush(){  try {    delegate.getCache().flush();  } catch (  IOException ignored) {  }}  }
class C{  public void testHasLoginConfig() throws Exception {  String xml=WEBAPP_TEST_HEADER + "" + "  <login-config>"+ "    <auth-method>BASIC</auth-method>"+ "  </login-config>"+ "</web-app>";  this.builder.build(new ByteArrayInputStream(xml.getBytes("UTF-8")));  WebXml webXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(xml.getBytes("UTF-8")),getEntityResolver());  assertTrue(WebXmlUtils.hasLoginConfig(webXml));}  }
class C{  private OMGraphic generatePlot(){  if (graph != null) {    graph.setDataPoints(selectedGraphics);    graph.plotData();    return graph.getPlotGraphics();  }  return null;}  }
class C{  public void installUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).installUI(a);  }}  }
class C{  private static void expandCounterArrays(){  double[][] temp=new double[counterArrays.length * 2][];  for (int i=0; i < counterArrays.length; i++) {    temp[i]=counterArrays[i];  }  counterArrays=temp;}  }
class C{  public void replacePhase(int oldScheduledPhase,int newScheduledPhase){  for (int i=0; i < scheduledSubPhases.length; i++) {    int scheduledPhase=scheduledSubPhases[i];    if (scheduledPhase == oldScheduledPhase) {      scheduledSubPhases[i]=newScheduledPhase;    } else     if (getSchedule(scheduledPhase) == SCHEDULE_COMPLEX) {      ComplexPhase p=(ComplexPhase)getPhase(getPhaseId(scheduledPhase));      p.replacePhase(oldScheduledPhase,newScheduledPhase);    }  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  SpecialUseRoomForm specialUseRoomForm=(SpecialUseRoomForm)form;  MessageResources rsc=getResources(request);  ActionMessages errors=new ActionMessages();  sessionContext.checkPermission(Right.AddSpecialUseRoom);  Set<Department> departments=Department.getUserDepartments(sessionContext.getUser());  List<Building> buildings=Building.findAll(sessionContext.getUser().getCurrentAcademicSessionId());  if (specialUseRoomForm.getDoit() != null) {    String doit=specialUseRoomForm.getDoit();    if (doit.equals(rsc.getMessage("button.returnToRoomList"))) {      return mapping.findForward("showRoomList");    }    if (doit.equals(rsc.getMessage("button.addNew"))) {      errors=specialUseRoomForm.validate(mapping,request);      if (errors.isEmpty()) {        String forward=update(request,specialUseRoomForm);        if (forward != null)         return mapping.findForward(forward);      } else {        saveErrors(request,errors);      }    }  }  setup(request,departments,buildings);  specialUseRoomForm.setDeptSize(departments.size());  if (departments.size() == 1) {    Department d=departments.iterator().next();    specialUseRoomForm.setDeptCode(d.getDeptCode());  } else   if (sessionContext.getAttribute(SessionAttribute.DepartmentCodeRoom) != null) {    specialUseRoomForm.setDeptCode((String)sessionContext.getAttribute(SessionAttribute.DepartmentCodeRoom));  }  return mapping.findForward("showAdd");}  }
class C{  public void writeFacilityCoordinates(String file){  log.info("Writing facility coordinates to " + file);  BufferedWriter bw=IOUtils.getBufferedWriter(file);  try {    bw.write("FacilityId,Long,Lat,Type");    bw.newLine();    for (    Id<ActivityFacility> id : this.amenities.getFacilities().keySet()) {      ActivityFacility facility=this.amenities.getFacilities().get(id);      bw.write(id.toString());      bw.write(",");      bw.write(String.format("%.0f,%.0f\n",facility.getCoord().getX(),facility.getCoord().getY()));    }  } catch (  IOException e) {    throw new RuntimeException("Could not write to BufferedWriter " + file);  } finally {    try {      bw.close();    } catch (    IOException e) {      throw new RuntimeException("Could not close BufferedWriter " + file);    }  }  log.info("Done writing coordinates to file.");}  }
class C{  public void refresh(){  existingMappings=null;  validationCache=null;  workspaceRoot=null;}  }
class C{  public void delete(Key key){  if (key == null)   throw new NullPointerException("called delete() with a null key");  set.remove(key);}  }
class C{  public SVG12BridgeContext(UserAgent userAgent,DocumentLoader loader){  super(userAgent,loader);}  }
class C{  public static String readAsciiLine(InputStream in) throws IOException {  StringBuilder result=new StringBuilder(80);  while (true) {    int c=in.read();    if (c == -1) {      throw new EOFException();    } else     if (c == '\n') {      break;    }    result.append((char)c);  }  int length=result.length();  if (length > 0 && result.charAt(length - 1) == '\r') {    result.setLength(length - 1);  }  return result.toString();}  }
class C{  public static <T>ObjectAnimator ofFloat(T target,Property<T,Float> property,float... values){  ObjectAnimator anim=new ObjectAnimator(target,property);  anim.setFloatValues(values);  return anim;}  }
class C{  public static final double[] plusTimes(final double[] v1,final double[] v2,final double s2){  assert (v1.length == v2.length) : ERR_VEC_DIMENSIONS;  final double[] result=new double[v1.length];  for (int i=0; i < result.length; i++) {    result[i]=v1[i] + v2[i] * s2;  }  return result;}  }
class C{  public void drawString(AttributedCharacterIterator ati,float x,float y){  if ((textAsShapes) || (usesUnsupportedAttributes(ati))) {    TextLayout layout=new TextLayout(ati,getFontRenderContext());    layout.draw(this,x,y);    return;  }  boolean multiSpans=false;  if (ati.getRunLimit() < ati.getEndIndex())   multiSpans=true;  Element text=getDOMFactory().createElementNS(SVG_NAMESPACE_URI,SVG_TEXT_TAG);  text.setAttributeNS(null,SVG_X_ATTRIBUTE,generatorCtx.doubleString(x));  text.setAttributeNS(null,SVG_Y_ATTRIBUTE,generatorCtx.doubleString(y));  text.setAttributeNS(XML_NAMESPACE_URI,XML_SPACE_QNAME,XML_PRESERVE_VALUE);  Font baseFont=getFont();  Paint basePaint=getPaint();  char ch=ati.first();  setTextElementFill(ati);  setTextFontAttributes(ati,baseFont);  SVGGraphicContext textGC;  textGC=domTreeManager.getGraphicContextConverter().toSVG(gc);  domGroupManager.addElement(text,DOMGroupManager.FILL);  textGC.getContext().put(SVG_STROKE_ATTRIBUTE,SVG_NONE_VALUE);  textGC.getGroupContext().put(SVG_STROKE_ATTRIBUTE,SVG_NONE_VALUE);  boolean firstSpan=true;  AffineTransform savTxf=getTransform();  AffineTransform txtTxf=null;  while (ch != AttributedCharacterIterator.DONE) {    Element tspan=text;    if (multiSpans) {      tspan=getDOMFactory().createElementNS(SVG_NAMESPACE_URI,SVG_TSPAN_TAG);      text.appendChild(tspan);    }    setTextElementFill(ati);    boolean resetTransform=setTextFontAttributes(ati,baseFont);    if (resetTransform || firstSpan) {      txtTxf=transformText(x,y);      firstSpan=false;    }    int start=ati.getIndex();    int end=ati.getRunLimit() - 1;    StringBuffer buf=new StringBuffer(end - start);    buf.append(ch);    for (int i=start; i < end; i++) {      ch=ati.next();      buf.append(ch);    }    String s=buf.toString();    if (generatorCtx.isEmbeddedFontsOn()) {      getDOMTreeManager().getGraphicContextConverter().getFontConverter().recordFontUsage(s,getFont());    }    SVGGraphicContext elementGC;    elementGC=domTreeManager.gcConverter.toSVG(gc);    elementGC.getGroupContext().put(SVG_STROKE_ATTRIBUTE,SVG_NONE_VALUE);    SVGGraphicContext deltaGC;    deltaGC=DOMGroupManager.processDeltaGC(elementGC,textGC);    setTextElementAttributes(deltaGC,ati);    domTreeManager.getStyleHandler().setStyle(tspan,deltaGC.getContext(),domTreeManager.getGeneratorContext());    tspan.appendChild(getDOMFactory().createTextNode(s));    if ((resetTransform || firstSpan) && (txtTxf != null)) {      this.setTransform(savTxf);    }    ch=ati.next();  }  setFont(baseFont);  setPaint(basePaint);}  }
class C{  public void parseRenameDefinitions(String definitionsFile) throws ReplicatorException, IOException {  renameDefinitions=new RenameDefinitions(definitionsFile);  renameDefinitions.parseFile();}  }
class C{  protected void put(String propName,Object propValue){  properties.put(propName,propValue);}  }
class C{  public void remove(@NotNull StatusNotification notification){  stack.remove(notification);  onClose(notification);}  }
class C{  public float[] generateTransformedValuesCandle(List<CandleEntry> entries,float phaseX,float phaseY,int from,int to){  final int count=(int)Math.ceil((to - from) * phaseX) * 2;  float[] valuePoints=new float[count];  for (int j=0; j < count; j+=2) {    CandleEntry e=entries.get(j / 2 + from);    if (e != null) {      valuePoints[j]=e.getXIndex();      valuePoints[j + 1]=e.getHigh() * phaseY;    }  }  getValueToPixelMatrix().mapPoints(valuePoints);  return valuePoints;}  }
class C{  private void doAcquireInterruptibly(int arg) throws InterruptedException {  final Node node=addWaiter(Node.EXCLUSIVE);  boolean failed=true;  try {    for (; ; ) {      final Node p=node.predecessor();      if (p == head && tryAcquire(arg)) {        setHead(node);        p.next=null;        failed=false;        return;      }      if (shouldParkAfterFailedAcquire(p,node) && parkAndCheckInterrupt())       throw new InterruptedException();    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  @Override protected void mouseClicked(int par1,int par2,int par3) throws IOException {  if (par2 >= 36 && par2 <= height - 57)   if (par1 >= width / 2 + 140 || par1 <= width / 2 - 126)   altList.elementClicked(-1,false,0,0);  super.mouseClicked(par1,par2,par3);}  }
class C{  public Object clone(){  try {    return super.clone();  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }}  }
class C{  public TwoSampleTTest(boolean independent){  super(2);  this.independent=independent;}  }
class C{  public static boolean signZip(File unsignedZip,File destination){  final AssetManager am=App.getContext().getAssets();  JarArchiveOutputStream outputJar=null;  JarFile inputJar=null;  try {    X509Certificate publicKey=readPublicKey(am.open(PUBLIC_KEY));    PrivateKey privateKey=readPrivateKey(am.open(PRIVATE_KEY));    long timestamp=publicKey.getNotBefore().getTime() + 3600L * 1000;    inputJar=new JarFile(unsignedZip,false);    FileOutputStream stream=new FileOutputStream(destination);    outputJar=new JarArchiveOutputStream(stream);    outputJar.setLevel(9);    Manifest manifest=addDigestsToManifest(inputJar);    JarArchiveEntry je=new JarArchiveEntry(JarFile.MANIFEST_NAME);    je.setTime(timestamp);    outputJar.putArchiveEntry(je);    manifest.write(outputJar);    ZipSignature signature1=new ZipSignature();    signature1.initSign(privateKey);    ByteArrayOutputStream out=new ByteArrayOutputStream();    writeSignatureFile(manifest,out);    Signature signature=Signature.getInstance("SHA1withRSA");    signature.initSign(privateKey);    je=new JarArchiveEntry(CERT_SF_NAME);    je.setTime(timestamp);    outputJar.putArchiveEntry(je);    byte[] sfBytes=writeSignatureFile(manifest,new SignatureOutputStream(outputJar,signature));    signature1.update(sfBytes);    byte[] signatureBytes=signature1.sign();    je=new JarArchiveEntry(CERT_RSA_NAME);    je.setTime(timestamp);    outputJar.putArchiveEntry(je);    outputJar.write(readContentAsBytes(am.open(TEST_KEY)));    outputJar.write(signatureBytes);    copyFiles(manifest,inputJar,outputJar,timestamp);  } catch (  Exception e) {    Crashlytics.logException(e);    return false;  } finally {    IOUtils.closeQuietly(inputJar);    IOUtils.closeQuietly(outputJar);  }  return true;}  }
class C{  public void readGeneralizedTime() throws IOException {  if (tag == ASN1Constants.TAG_GENERALIZEDTIME) {    readContent();    if (buffer[offset - 1] != 'Z') {      throw new ASN1Exception("ASN.1 GeneralizedTime: encoded format is not implemented");    }    if (length != 15 && (length < 17 || length > 19)) {      throw new ASN1Exception("ASN.1 GeneralizedTime wrongly encoded at [" + contentOffset + "]");    }    if (length > 16) {      byte char14=buffer[contentOffset + 14];      if (char14 != '.' && char14 != ',') {        throw new ASN1Exception("ASN.1 GeneralizedTime wrongly encoded at [" + contentOffset + "]");      }    }    if (times == null) {      times=new int[7];    }    times[0]=strToInt(contentOffset,4);    times[1]=strToInt(contentOffset + 4,2);    times[2]=strToInt(contentOffset + 6,2);    times[3]=strToInt(contentOffset + 8,2);    times[4]=strToInt(contentOffset + 10,2);    times[5]=strToInt(contentOffset + 12,2);    if (length > 16) {      times[6]=strToInt(contentOffset + 15,length - 16);      if (length == 17) {        times[6]=times[6] * 100;      } else       if (length == 18) {        times[6]=times[6] * 10;      }    }  } else   if (tag == ASN1Constants.TAG_C_GENERALIZEDTIME) {    throw new ASN1Exception("Decoding constructed ASN.1 GeneralizedTime type is not supported");  } else {    throw expected("GeneralizedTime");  }}  }
class C{  public void outputGraph(FlowNetwork<?> fn){  outputGraph(fn,false);}  }
class C{  public <E extends Enum<E>>E optEnum(Class<E> clazz,String key,E defaultValue){  try {    Object val=this.opt(key);    if (NULL.equals(val)) {      return defaultValue;    }    if (clazz.isAssignableFrom(val.getClass())) {      @SuppressWarnings("unchecked") E myE=(E)val;      return myE;    }    return Enum.valueOf(clazz,val.toString());  } catch (  IllegalArgumentException|NullPointerException e) {    return defaultValue;  }}  }
class C{  @Path("update") @POST @Consumes(MediaType.APPLICATION_JSON) @Produces({MediaType.APPLICATION_JSON,MediaType.TEXT_PLAIN}) public CLIOutputWithRevisionResponse update(final UpdateRequest request) throws ApiException, IOException {  request.setProjectPath(getAbsoluteProjectPath(request.getProjectPath()));  return this.subversionApi.update(request);}  }
class C{  public Vector(int initialCapacity){  this(initialCapacity,0);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:23.082 -0500",hash_original_method="3BC38476D10A0BB1E7E9CABDBB184EDE",hash_generated_method="7422014396724F0DEB22E6C2D38FCDA5") public int compareTo(Character c){  return compare(value,c.value);}  }
class C{  public Surface drawLine(XY a,XY b,float width){  return drawLine(a.x(),a.y(),b.x(),b.y(),width);}  }
class C{  protected final void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  throw new RuntimeException("Nix da!");}  }
class C{  public void addLabelled(String left,Component right){  add(new JLabel("" + left),right);}  }
class C{  private static float crossProductZ(ResultPoint pointA,ResultPoint pointB,ResultPoint pointC){  float bX=pointB.x;  float bY=pointB.y;  return ((pointC.x - bX) * (pointA.y - bY)) - ((pointC.y - bY) * (pointA.x - bX));}  }
class C{  public static void showToast(Context context,int resourceId){  Toast.makeText(context,context.getString(resourceId),Toast.LENGTH_LONG).show();}  }
class C{  protected void saveLater(){  WalletFiles files=vFileManager;  if (files != null)   files.saveLater();}  }
class C{  @Override public int supportedSpeedModes(){  return (DccThrottle.SpeedStepMode128 | DccThrottle.SpeedStepMode28 | DccThrottle.SpeedStepMode14);}  }
class C{  private void destroyListeners(){  if (onProductUpdateListener == null) {    return;  }  DataChangeListener.removeOnProductUpdateListener(onProductUpdateListener);  DataChangeListener.removeOnImageCreateListener(onImageCreateListener);  DataChangeListener.removeOnImageUpdateListener(onImageUpdateListener);  onProductUpdateListener=null;  onImageCreateListener=null;  onImageUpdateListener=null;}  }
class C{  public S_Assignment createS_Assignment(){  S_AssignmentImpl s_Assignment=new S_AssignmentImpl();  return s_Assignment;}  }
class C{  public void dispose(){  m_criteriumTree.removeListener(m_internalTreeListener);}  }
class C{  public boolean isValid(){  return leftGas != null && rightGas != null;}  }
class C{  @Override public void handleMouseMoved(ChartCanvas canvas,MouseEvent e){  if (!canvas.isTooltipEnabled()) {    return;  }  String text=getTooltipText(canvas,e.getX(),e.getY());  canvas.setTooltip(text,e.getScreenX(),e.getScreenY());}  }
class C{  public boolean toPostInit(){synchronized (this) {    if (_state == STOPPED) {      _state=INIT;      _lastChangeTime=CurrentTime.currentTime();      notifyListeners(STOPPED,INIT);      return true;    } else {      return _state.isInit();    }  }}  }
class C{  public static void post(int what,EO eo){  Message msg=new Message();  msg.what=what;  msg.obj=eo;  post(msg);}  }
class C{  public static byte parseByte(String string) throws NumberFormatException {  return parseByte(string,10);}  }
class C{  public DataSource createZoneNameDataSource(Host host,Initiator initiator,StoragePort port,Network network,StorageSystem storageSystem){  DataSource source=createDataSource(CustomConfigConstants.ZONE_MASK_NAME,new DataObject[]{host,initiator,port,network,storageSystem});  return source;}  }
class C{  protected Border createRolloverBorder(){  Object border=UIManager.get("ToolBar.rolloverBorder");  if (border != null) {    return (Border)border;  }  return new EmptyBorder(0,0,0,0);}  }
class C{  public static JScrollPane newTableScrollPane(JComponent comp){  return new TableScrollPane(comp);}  }
class C{  public String historyLocation(){  return dbHistory.toString();}  }
class C{  public void ensureCapacity(int minCapacity){  minCapacity=Math.max(4,minCapacity);  if (minCapacity >= data.length) {    int[] d=new int[minCapacity];    System.arraycopy(data,0,d,0,data.length);    data=d;  }}  }
class C{  protected LexicalUnit hexcolor(LexicalUnit prev){  String val=scanner.getStringValue();  int len=val.length();  LexicalUnit params=null;switch (len) {case 3:    char rc=Character.toLowerCase(val.charAt(0));  char gc=Character.toLowerCase(val.charAt(1));char bc=Character.toLowerCase(val.charAt(2));if (!ScannerUtilities.isCSSHexadecimalCharacter(rc) || !ScannerUtilities.isCSSHexadecimalCharacter(gc) || !ScannerUtilities.isCSSHexadecimalCharacter(bc)) {throw createCSSParseException("rgb.color",new Object[]{val});}int t;int r=t=(rc >= '0' && rc <= '9') ? rc - '0' : rc - 'a' + 10;t<<=4;r|=t;int g=t=(gc >= '0' && gc <= '9') ? gc - '0' : gc - 'a' + 10;t<<=4;g|=t;int b=t=(bc >= '0' && bc <= '9') ? bc - '0' : bc - 'a' + 10;t<<=4;b|=t;params=CSSLexicalUnit.createInteger(r,null,getLineNumber());LexicalUnit tmp;tmp=CSSLexicalUnit.createSimple(LexicalUnit.SAC_OPERATOR_COMMA,params,getLineNumber());tmp=CSSLexicalUnit.createInteger(g,tmp,getLineNumber());tmp=CSSLexicalUnit.createSimple(LexicalUnit.SAC_OPERATOR_COMMA,tmp,getLineNumber());tmp=CSSLexicalUnit.createInteger(b,tmp,getLineNumber());break;case 6:char rc1=Character.toLowerCase(val.charAt(0));char rc2=Character.toLowerCase(val.charAt(1));char gc1=Character.toLowerCase(val.charAt(2));char gc2=Character.toLowerCase(val.charAt(3));char bc1=Character.toLowerCase(val.charAt(4));char bc2=Character.toLowerCase(val.charAt(5));if (!ScannerUtilities.isCSSHexadecimalCharacter(rc1) || !ScannerUtilities.isCSSHexadecimalCharacter(rc2) || !ScannerUtilities.isCSSHexadecimalCharacter(gc1)|| !ScannerUtilities.isCSSHexadecimalCharacter(gc2)|| !ScannerUtilities.isCSSHexadecimalCharacter(bc1)|| !ScannerUtilities.isCSSHexadecimalCharacter(bc2)) {throw createCSSParseException("rgb.color");}r=(rc1 >= '0' && rc1 <= '9') ? rc1 - '0' : rc1 - 'a' + 10;r<<=4;r|=(rc2 >= '0' && rc2 <= '9') ? rc2 - '0' : rc2 - 'a' + 10;g=(gc1 >= '0' && gc1 <= '9') ? gc1 - '0' : gc1 - 'a' + 10;g<<=4;g|=(gc2 >= '0' && gc2 <= '9') ? gc2 - '0' : gc2 - 'a' + 10;b=(bc1 >= '0' && bc1 <= '9') ? bc1 - '0' : bc1 - 'a' + 10;b<<=4;b|=(bc2 >= '0' && bc2 <= '9') ? bc2 - '0' : bc2 - 'a' + 10;params=CSSLexicalUnit.createInteger(r,null,getLineNumber());tmp=CSSLexicalUnit.createSimple(LexicalUnit.SAC_OPERATOR_COMMA,params,getLineNumber());tmp=CSSLexicalUnit.createInteger(g,tmp,getLineNumber());tmp=CSSLexicalUnit.createSimple(LexicalUnit.SAC_OPERATOR_COMMA,tmp,getLineNumber());tmp=CSSLexicalUnit.createInteger(b,tmp,getLineNumber());break;default :throw createCSSParseException("rgb.color",new Object[]{val});}int line=getLineNumber();nextIgnoreSpaces();return CSSLexicalUnit.createPredefinedFunction(LexicalUnit.SAC_RGBCOLOR,params,prev,line);}  }
class C{  @Override public Object execute(ExecutionEvent event) throws ExecutionException {  IWorkbenchPart view=HandlerUtil.getActivePart(event);  if (view instanceof DroidsafeInfoOutlineViewPart) {    DroidsafeInfoOutlineViewPart outlineView=(DroidsafeInfoOutlineViewPart)view;    DroidsafeInfoTreeElementContentProvider contentProvider=outlineView.getContentProvider();    if (contentProvider.getRootElements() != null) {      IWorkbenchWindow window=HandlerUtil.getActiveWorkbenchWindow(event);      SearchDialog dialog=new SearchDialog(window.getShell(),outlineView);      dialog.open();    }  }  return null;}  }
class C{  public AdempiereUserError(String message,String fixHint){  super(message);  setFixHint(fixHint);}  }
class C{  public Vertex evaluateAND(Vertex expression,List<Relationship> arguments,Map<Vertex,Vertex> variables,Network network,long startTime,long maxTime,int stack){  Vertex first=evaluateExpression(arguments.get(0).getTarget(),variables,network,startTime,maxTime,stack);  if (!first.is(Primitive.TRUE)) {    return network.createVertex(Primitive.FALSE);  }  if (arguments.size() == 1) {    return network.createVertex(Primitive.TRUE);  }  Vertex second=evaluateExpression(arguments.get(1).getTarget(),variables,network,startTime,maxTime,stack);  if (second.is(Primitive.TRUE)) {    return network.createVertex(Primitive.TRUE);  }  return network.createVertex(Primitive.FALSE);}  }
class C{  private Object[] findInheritDoc(KeyPair key){  Object[] inheritDoc=null;  Iterator iter=inheritance.iterator();  CommentsTable baseClassObj=null;  QName baseClass=null;  while (iter.hasNext()) {    QName nextClass=(QName)iter.next();    CommentsTable t=classTable.get(NameFormatter.toDot(nextClass));    if (restoreBuiltinClasses && t == null && nextClass.getNamespace().equals(QName.DEFAULT_NAMESPACE) && !"Object_ASDoc".equals(abcClass.getName())) {      nextClass=new QName(QName.DEFAULT_NAMESPACE,nextClass.getLocalPart() + "_ASDoc");      t=classTable.get(NameFormatter.toDot(nextClass));    }    if (t != null) {      if (!t.isInterface()) {        baseClassObj=t;        baseClass=nextClass;        continue;      }      if (key.type == DocComment.CLASS)       inheritDoc=t.getCommentForInherit(new KeyPair(nextClass.getLocalPart(),DocComment.CLASS)); else       inheritDoc=t.getCommentForInherit(key);    }    if (inheritDoc != null)     break;  }  if (inheritDoc == null && baseClass != null) {    if (key.type == DocComment.CLASS)     inheritDoc=baseClassObj.getCommentForInherit(new KeyPair(baseClass.getLocalPart(),DocComment.CLASS)); else     inheritDoc=baseClassObj.getCommentForInherit(key);  }  return inheritDoc;}  }
class C{  private boolean tryRemoteDownload(){  if (System.currentTimeMillis() < expireTime) {    tryRepoCnt++;    return tryRepoCnt <= MAX_REPO_RETRIES;  } else {    expireTime=System.currentTimeMillis() + TIMEOUT_INTERVAL;    tryRepoCnt=1;    return true;  }}  }
class C{  private void paintMessage(final Graphics2D g){  if (message == null)   return;  g.setColor(COLOR_MESSAGE);  final Font oldFont=g.getFont();  g.setFont(oldFont.deriveFont(Font.BOLD));  g.drawString(message,10,20);  g.setFont(oldFont);}  }
class C{  public Object[] toArray(){  return children.toArray();}  }
class C{  public int next(){  if (_startNode == NULL) {    return NULL;  }  if (_includeSelf && (_currentNode + 1) == _startNode)   return returnNode(makeNodeHandle(++_currentNode));  int node=_currentNode;  int type;  do {    node++;    type=_type(node);    if (NULL == type || !isDescendant(node)) {      _currentNode=NULL;      return END;    }  } while (ATTRIBUTE_NODE == type || TEXT_NODE == type || NAMESPACE_NODE == type);  _currentNode=node;  return returnNode(makeNodeHandle(node));}  }
class C{  public static void logAndShowError(BirthdayListFragment fragment,String tag,String message){  String errorMessage=getErrorMessage(fragment,message);  Log.e(tag,errorMessage);  showErrorInternal(fragment,errorMessage);}  }
class C{  @Deprecated public static <N,E>ImmutableNetwork<N,E> copyOf(ImmutableNetwork<N,E> graph){  return checkNotNull(graph);}  }
class C{  public final String toString(){  return image;}  }
class C{  protected double calculateLogLikelihood(){  if (branchUpdateIndices == null) {    branchUpdateIndices=new int[nodeCount];    branchLengths=new double[nodeCount];    scaleBufferIndices=new int[internalNodeCount];    storedScaleBufferIndices=new int[internalNodeCount];  }  if (operations == null) {    operations=new int[numRestrictedPartials + 1][internalNodeCount * Beagle.OPERATION_TUPLE_SIZE];    operationCount=new int[numRestrictedPartials + 1];  }  recomputeScaleFactors=false;  if (this.rescalingScheme == PartialsRescalingScheme.ALWAYS) {    useScaleFactors=true;    recomputeScaleFactors=true;  } else   if (this.rescalingScheme == PartialsRescalingScheme.DYNAMIC && everUnderflowed) {    useScaleFactors=true;    if (rescalingCountInner < RESCALE_TIMES) {      recomputeScaleFactors=true;      makeDirty();    }    rescalingCountInner++;    rescalingCount++;    if (rescalingCount > rescalingFrequency) {      rescalingCount=0;      rescalingCountInner=0;    }  } else   if (this.rescalingScheme == PartialsRescalingScheme.DELAYED && everUnderflowed) {    useScaleFactors=true;    recomputeScaleFactors=true;    rescalingCount++;  }  if (tipStatesModel != null) {    throw new UnsupportedOperationException("Tip error models not supported by MultiPartitionTreeLikelihood yet");  }  branchUpdateCount=0;  operationListCount=0;  if (hasRestrictedPartials) {    for (int i=0; i <= numRestrictedPartials; i++) {      operationCount[i]=0;    }  } else {    operationCount[0]=0;  }  final NodeRef root=treeModel.getRoot();  traverse(treeModel,root,null,true);  for (int i=0; i < partitionCount; i++) {    if (updateSubstitutionModel[i]) {      substitutionModelDelegates[i].updateSubstitutionModels(beagle);    }    if (updateSiteModel[i]) {      double[] categoryRates=this.siteRateModels.get(i).getCategoryRates();      beagle.setCategoryRates(categoryRates);    }  }  if (branchUpdateCount > 0) {    for (    SubstitutionModelDelegate substitutionModelDelegate : substitutionModelDelegates) {      substitutionModelDelegate.updateTransitionMatrices(beagle,branchUpdateIndices,branchLengths,branchUpdateCount);    }  }  if (COUNT_TOTAL_OPERATIONS) {    totalMatrixUpdateCount+=branchUpdateCount;    for (int i=0; i <= numRestrictedPartials; i++) {      totalOperationCount+=operationCount[i];    }  }  double logL;  boolean done;  boolean firstRescaleAttempt=true;  do {    if (hasRestrictedPartials) {      for (int i=0; i <= numRestrictedPartials; i++) {        beagle.updatePartials(operations[i],operationCount[i],Beagle.NONE);        if (i < numRestrictedPartials) {        }      }    } else {      beagle.updatePartials(operations[0],operationCount[0],Beagle.NONE);    }    int cumulateScaleBufferIndex=Beagle.NONE;    if (useScaleFactors) {      if (recomputeScaleFactors) {        scaleBufferHelper.flipOffset(internalNodeCount);        cumulateScaleBufferIndex=scaleBufferHelper.getOffsetIndex(internalNodeCount);        beagle.resetScaleFactors(cumulateScaleBufferIndex);        beagle.accumulateScaleFactors(scaleBufferIndices,internalNodeCount,cumulateScaleBufferIndex);      } else {        cumulateScaleBufferIndex=scaleBufferHelper.getOffsetIndex(internalNodeCount);      }    } else     if (useAutoScaling) {      beagle.accumulateScaleFactors(scaleBufferIndices,internalNodeCount,Beagle.NONE);    }    for (int i=0; i < partitionCount; i++) {      double[] categoryWeights=this.siteRateModels.get(i).getCategoryProportions();      double[] frequencies=substitutionModelDelegates[i].getRootStateFrequencies();      beagle.setCategoryWeights(i,categoryWeights);      beagle.setStateFrequencies(i,frequencies);    }    double[] sumLogLikelihoods=new double[1];    int rootIndex=partialBufferHelper.getOffsetIndex(root.getNumber());    beagle.calculateRootLogLikelihoods(new int[]{rootIndex},new int[]{0},new int[]{0},new int[]{cumulateScaleBufferIndex},1,sumLogLikelihoods);    logL=sumLogLikelihoods[0];    if (Double.isNaN(logL) || Double.isInfinite(logL)) {      everUnderflowed=true;      logL=Double.NEGATIVE_INFINITY;      if (firstRescaleAttempt && (rescalingScheme == PartialsRescalingScheme.DYNAMIC || rescalingScheme == PartialsRescalingScheme.DELAYED)) {        if (rescalingScheme == PartialsRescalingScheme.DYNAMIC || (rescalingCount == 0)) {          Logger.getLogger("dr.evomodel").info("Underflow calculating likelihood. Attempting a rescaling...");        }        useScaleFactors=true;        recomputeScaleFactors=true;        branchUpdateCount=0;        if (hasRestrictedPartials) {          for (int i=0; i <= numRestrictedPartials; i++) {            operationCount[i]=0;          }        } else {          operationCount[0]=0;        }        traverse(treeModel,root,null,false);        done=false;        firstRescaleAttempt=false;      } else {        done=true;      }    } else {      done=true;    }  } while (!done);  for (int i=0; i < nodeCount; i++) {    updateNode[i]=false;  }  for (int i=0; i < partitionCount; i++) {    updateSubstitutionModel[i]=false;    updateSiteModel[i]=false;  }  return logL;}  }
class C{  public void subQuat(Quaternion input,Quaternion output){  output.setX(getX() - input.getX());  output.setY(getY() - input.getY());  output.setZ(getZ() - input.getZ());  output.setW(getW() - input.getW());}  }
class C{  public SymbolTable removeTable(String name,int version){  SymbolTable removed=null;synchronized (myTablesByName) {    TreeMap<Integer,SymbolTable> versions=myTablesByName.get(name);    if (versions != null) {synchronized (versions) {        removed=versions.remove(version);        if (versions.isEmpty()) {          myTablesByName.remove(name);        }      }    }  }  return removed;}  }
class C{  public boolean isInvoiced(){  Object oo=get_Value(COLUMNNAME_IsInvoiced);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static void rotationY(View v,float fromY,float toY,int duration){  rotationY(v,fromY,toY,duration,null);}  }
class C{  public Subcollection createSubCollection(final String id,final String name){  Subcollection subCol=null;  if (!collectionMap.containsKey(id)) {    subCol=new Subcollection(id,name,getConf());    collectionMap.put(id,subCol);  }  return subCol;}  }
class C{  public void createInitLayout_ID(String layoutName){  logger.info("createInitLayout for {} ",layoutName);  Integer numericId=mNumberToIDMap.inverse().get(layoutName);  if (numericId == null) {    logger.warn("layout {} has no Unique ID",layoutName);    for (    String myStrId : mNumberToIDMap.inverse().keySet()) {      logger.warn("checking key {} <=> {} ",layoutName,myStrId);    }    return;  }  String methodName=String.format("initLayout_%08x",numericId);  if (!mSootClass.declaresMethodByName(methodName)) {    List<Type> params=new LinkedList<Type>();    params.add(RefType.v("android.content.Context"));    mInitLayoutMethod=new SootMethod(methodName,params,VoidType.v(),Modifier.PUBLIC | Modifier.STATIC);    mSootClass.addMethod(mInitLayoutMethod);    API.v().addSafeMethod(mInitLayoutMethod);    mInitLayoutBody=Jimple.v().newBody(mInitLayoutMethod);    mInitLayoutMethod.setActiveBody(mInitLayoutBody);    mLayoutInitMap.put(numericId,mInitLayoutMethod);    mArgContext=Jimple.v().newLocal("paramContext",RefType.v("android.content.Context"));    mInitLayoutBody.getLocals().add(mArgContext);    Chain<Unit> units=mInitLayoutBody.getUnits();    units.add(Jimple.v().newIdentityStmt(mArgContext,Jimple.v().newParameterRef(RefType.v("android.content.Context"),0)));  } else {    mInitLayoutMethod=mSootClass.getMethodByName(methodName);    mInitLayoutBody=(JimpleBody)mInitLayoutMethod.getActiveBody();    for (    Local local : mInitLayoutBody.getLocals()) {      if ("paramContext".equals(local.getName()))       mArgContext=local;    }  }}  }
class C{  public EarthquakeLayer(){  activeSites[0]=true;  setProjectionChangePolicy(new com.bbn.openmap.layer.policy.ListResetPCPolicy(this));}  }
class C{  @Override public boolean batchFinished() throws Exception {  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (outputFormatPeek() == null) {    Instances toFilter=getInputFormat();    m_partitionGenerator.generatePartition(toFilter);    ArrayList<Attribute> attInfo=new ArrayList<Attribute>();    for (int i=0; i < m_partitionGenerator.numElements(); i++) {      attInfo.add(new Attribute("partition_" + i));    }    if (toFilter.classIndex() >= 0) {      attInfo.add((Attribute)toFilter.classAttribute().copy());    }    attInfo.trimToSize();    Instances filtered=new Instances(toFilter.relationName() + "_partitionMembership",attInfo,0);    if (toFilter.classIndex() >= 0) {      filtered.setClassIndex(filtered.numAttributes() - 1);    }    setOutputFormat(filtered);    for (int i=0; i < toFilter.numInstances(); i++) {      convertInstance(toFilter.instance(i));    }  }  flushInput();  m_NewBatch=true;  return (numPendingOutput() != 0);}  }
class C{  private void assertEqualFuzzy(float expected,float actual,float threshold){  boolean fuzzyEqual=actual >= expected - threshold && actual <= expected + threshold;  Assert.assertTrue("Expected: <" + expected + "> but was: <"+ actual+ "> while accepting a variation of: <"+ threshold+ ">",fuzzyEqual);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case ExpressionsPackage.BITWISE_OR_EXPRESSION__LEFT_OPERAND:    return leftOperand != null;case ExpressionsPackage.BITWISE_OR_EXPRESSION__RIGHT_OPERAND:  return rightOperand != null;}return super.eIsSet(featureID);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean isAssignableFrom(JClass cl){  if (getName().equals(cl.getName()))   return true;  JClass[] ifc=cl.getInterfaces();  for (int i=0; i < ifc.length; i++) {    if (isAssignableFrom(ifc[i]))     return true;  }  if (cl.getSuperClass() != null)   return isAssignableFrom(cl.getSuperClass()); else   return false;}  }
class C{  public static void paint(Graphics g,int x,int y,int w,int h,Image image,Insets sInsets,Insets dInsets,PaintType paintType,int mask){  if (image == null || image.getWidth(null) <= 0 || image.getHeight(null) <= 0) {    return;  }  if (sInsets == null) {    sInsets=EMPTY_INSETS;  }  if (dInsets == null) {    dInsets=EMPTY_INSETS;  }  int iw=image.getWidth(null);  int ih=image.getHeight(null);  if (paintType == PaintType.CENTER) {    g.drawImage(image,x + (w - iw) / 2,y + (h - ih) / 2,null);  } else   if (paintType == PaintType.TILE) {    int lastIY=0;    for (int yCounter=y, maxY=y + h; yCounter < maxY; yCounter+=(ih - lastIY), lastIY=0) {      int lastIX=0;      for (int xCounter=x, maxX=x + w; xCounter < maxX; xCounter+=(iw - lastIX), lastIX=0) {        int dx2=Math.min(maxX,xCounter + iw - lastIX);        int dy2=Math.min(maxY,yCounter + ih - lastIY);        g.drawImage(image,xCounter,yCounter,dx2,dy2,lastIX,lastIY,lastIX + dx2 - xCounter,lastIY + dy2 - yCounter,null);      }    }  } else {    int st=sInsets.top;    int sl=sInsets.left;    int sb=sInsets.bottom;    int sr=sInsets.right;    int dt=dInsets.top;    int dl=dInsets.left;    int db=dInsets.bottom;    int dr=dInsets.right;    if (st + sb > ih) {      db=dt=sb=st=Math.max(0,ih / 2);    }    if (sl + sr > iw) {      dl=dr=sl=sr=Math.max(0,iw / 2);    }    if (dt + db > h) {      dt=db=Math.max(0,h / 2 - 1);    }    if (dl + dr > w) {      dl=dr=Math.max(0,w / 2 - 1);    }    boolean stretch=(paintType == PaintType.PAINT9_STRETCH);    if ((mask & PAINT_ALL) != 0) {      mask=(PAINT_ALL - 1) & ~mask;    }    if ((mask & PAINT_LEFT) != 0) {      drawChunk(image,g,stretch,x,y + dt,x + dl,y + h - db,0,st,sl,ih - sb,false);    }    if ((mask & PAINT_TOP_LEFT) != 0) {      drawImage(image,g,x,y,x + dl,y + dt,0,0,sl,st);    }    if ((mask & PAINT_TOP) != 0) {      drawChunk(image,g,stretch,x + dl,y,x + w - dr,y + dt,sl,0,iw - sr,st,true);    }    if ((mask & PAINT_TOP_RIGHT) != 0) {      drawImage(image,g,x + w - dr,y,x + w,y + dt,iw - sr,0,iw,st);    }    if ((mask & PAINT_RIGHT) != 0) {      drawChunk(image,g,stretch,x + w - dr,y + dt,x + w,y + h - db,iw - sr,st,iw,ih - sb,false);    }    if ((mask & PAINT_BOTTOM_RIGHT) != 0) {      drawImage(image,g,x + w - dr,y + h - db,x + w,y + h,iw - sr,ih - sb,iw,ih);    }    if ((mask & PAINT_BOTTOM) != 0) {      drawChunk(image,g,stretch,x + dl,y + h - db,x + w - dr,y + h,sl,ih - sb,iw - sr,ih,true);    }    if ((mask & PAINT_BOTTOM_LEFT) != 0) {      drawImage(image,g,x,y + h - db,x + dl,y + h,0,ih - sb,sl,ih);    }    if ((mask & PAINT_CENTER) != 0) {      drawImage(image,g,x + dl,y + dt,x + w - dr,y + h - db,sl,st,iw - sr,ih - sb);    }  }}  }
class C{  public long[] fromZOrderByteArray(final byte[] byteArr){  final IKeyBuilder kb=getKeyBuilder();  kb.reset();  for (int i=0; i < byteArr.length; i++) {    kb.append(byteArr[i]);  }  final long[] componentsAsLongArr=kb.fromZOrder(datatypeConfig.getNumDimensions());  for (int i=0; i < componentsAsLongArr.length; i++) {    final Long minValue=datatypeConfig.getFields().get(i).getMinValue();    if (minValue != null) {      componentsAsLongArr[i]=decodeRangeShift(componentsAsLongArr[i],minValue);    }  }  return componentsAsLongArr;}  }
class C{  public void visitTypeArgument(){}  }
class C{  public InputStream newInputStream(int index) throws IOException {synchronized (LruDiskCache.this) {    if (entry.currentEditor != this) {      throw new IllegalStateException();    }    if (!entry.readable) {      return null;    }    try {      return new FileInputStream(entry.getCleanFile(index));    } catch (    FileNotFoundException e) {      return null;    }  }}  }
class C{  @Override public boolean isAssignableFrom(final IType<?> l){  return type.isAssignableFrom(l.getType()) && contentsType.isAssignableFrom(l.getContentType()) && keyType.isAssignableFrom(l.getKeyType());}  }
class C{  public ParticleString3D(VerletPhysics3D physics,List<VerletParticle3D> plist,float strength){  this.physics=physics;  particles=new ArrayList<VerletParticle3D>(plist);  links=new ArrayList<VerletSpring3D>(particles.size() - 1);  VerletParticle3D prev=null;  for (  VerletParticle3D p : particles) {    physics.addParticle(p);    if (prev != null) {      VerletSpring3D s=createSpring(prev,p,prev.distanceTo(p),strength);      links.add(s);      physics.addSpring(s);    }    prev=p;  }}  }
class C{  private void readObject(ObjectInputStream in) throws ClassNotFoundException, IOException {  in.defaultReadObject();  iter=col.iterator();}  }
class C{  public void testIssue495() throws Exception {  ObjectMapper mapper=new ObjectMapper();  mapper.getDeserializationConfig().setAnnotationIntrospector(new AnnotationIntrospector.Pair(_jacksonAI,_jaxbAI));  CreatorBean bean=mapper.readValue("{\"name\":\"foo\"}",CreatorBean.class);  assertNotNull(bean);}  }
class C{  private boolean updateAlphas(float ratio){  boolean done=true;  for (int i=0; i < mLayers.length; i++) {    int dir=mIsLayerOn[i] ? +1 : -1;    mAlphas[i]=(int)(mStartAlphas[i] + dir * 255 * ratio);    if (mAlphas[i] < 0) {      mAlphas[i]=0;    }    if (mAlphas[i] > 255) {      mAlphas[i]=255;    }    if (mIsLayerOn[i] && mAlphas[i] < 255) {      done=false;    }    if (!mIsLayerOn[i] && mAlphas[i] > 0) {      done=false;    }  }  return done;}  }
class C{  private FormatPreferences tryEasy(FormatPreferences preferences,boolean force){  int count=0;  for (  Map.Entry<String,String> e : preferences.rawMap.entrySet()) {    if (!"scan".equalsIgnoreCase(e.getValue()))     count++;  }  if (force || count >= FormatPreferences.KEYS.size())   return preferences;  return null;}  }
class C{  private boolean verify(String value,int allowedMask,char[] allowedChars){  return verify(value,allowedMask,allowedChars,-1,-1);}  }
class C{  private static void testAnnotation(AnnotatedElement element,boolean exceptionExpected){  java.lang.annotation.Annotation[] annotations;  try {    annotations=element.getAnnotations();    if (exceptionExpected) {      System.err.println("Error: Did not get an exception reading annotations on " + element);      System.err.println("Annotations found: " + java.util.Arrays.toString(annotations));      throw new RuntimeException();    }    if (annotations.length == 0) {      System.err.println("Error: no annotations found on " + element);      throw new RuntimeException();    }  } catch (  Throwable t) {    if (!exceptionExpected) {      System.err.println("Error: Got an unexpected exception reading annotations on " + element);      throw new RuntimeException(t);    }  }}  }
class C{  public int min(){  if (size() == 0) {    throw new IllegalStateException("cannot find minimum of an empty list");  }  int min=_data[_pos - 1];  for (int i=_pos - 1; i-- > 0; ) {    min=Math.min(min,_data[_pos]);  }  return min;}  }
class C{  public ConcurrentHashMap(Map<? extends K,? extends V> m){  this(Math.max((int)(m.size() / DEFAULT_LOAD_FACTOR) + 1,DEFAULT_INITIAL_CAPACITY),DEFAULT_LOAD_FACTOR,DEFAULT_CONCURRENCY_LEVEL);  putAll(m);}  }
class C{  public EqualsResult append(final boolean lhs,final boolean rhs){  if (!isEqual) {    return this;  }  isEqual=lhs == rhs;  return this;}  }
class C{  public void onAnimationRepeat(Animator animation){}  }
class C{  public void applyQueryTimeout(PreparedStatement pstm){  if (hasQueryTimeout()) {    try {      pstm.setQueryTimeout(getQueryTimeoutInSeconds());    } catch (    SQLException e) {      throw new JDBCException("failed to setQueryTimeout to :" + getQueryTimeoutInSeconds(),e,e.getSQLState());    }  }}  }
class C{  public void propertyChange(PropertyChangeEvent evt){  String property=evt.getPropertyName();  if (property == MapBean.LayersProperty) {    Layer[] layers=(Layer[])evt.getNewValue();    currentLayers=new Layer[layers.length];    System.arraycopy(layers,0,currentLayers,0,layers.length);    setupMouseModesWithLayers(currentLayers);  }  if (property.equals(ProxyMouseModeProperty)) {    Object newObj=evt.getNewValue();    if (newObj instanceof MapMouseMode) {      map.setCursor(((MapMouseMode)newObj).getModeCursor());    } else {      map.setCursor(getActiveMouseMode().getModeCursor());    }    firePropertyChange(ProxyMouseModeProperty,evt.getOldValue(),newObj);  }}  }
class C{  public static StringBuilder leftShift(StringBuilder self,Object value){  self.append(value);  return self;}  }
class C{  public CUipcEventHandle(){}  }
class C{  public void warn(XPathContext xctxt,String msg,Object args[]) throws javax.xml.transform.TransformerException {  String formattedMsg=XSLMessages.createWarning(msg,args);  ErrorListener errHandler=xctxt.getErrorListener();  TransformerException spe=new TransformerException(formattedMsg,(SourceLocator)xctxt.getSAXLocator());  if (null != errHandler)   errHandler.warning(spe); else   System.out.println(formattedMsg);}  }
class C{  private void showPopup(final MouseEvent event){  int[] rows=getSelectedRows();  if ((rows.length == 0) || (rows.length == 1)) {    final int row=rowAtPoint(event.getPoint());    final int column=columnAtPoint(event.getPoint());    if ((row == -1) || (column == -1)) {      return;    }    changeSelection(row,column,false,false);    rows=getSelectedRows();  }  final JPopupMenu menu=new JPopupMenu();  menu.add(new JMenuItem(CActionProxy.proxy(new CDeleteBookmarkAction(m_bookmarkManager,rows))));  menu.show(event.getComponent(),event.getX(),event.getY());}  }
class C{  public final void testSetAllowedCharacters(){  char[] allowedCharacters=new char[]{'-'};  LetterValidator characterValidator=new LetterValidator("foo",Case.CASE_INSENSITIVE,false);  characterValidator.setAllowedCharacters(allowedCharacters);  assertEquals(allowedCharacters,characterValidator.getAllowedCharacters());}  }
class C{  public String checkDependencies(URI uri,Class<? extends DataObject> type,boolean onlyActive,List<Class<? extends DataObject>> excludeTypes){  List<DependencyTracker.Dependency> dependencies=_dependencyTracker.getDependencies(type);  if (dependencies.isEmpty()) {    return null;  }  for (  DependencyTracker.Dependency dependency : dependencies) {    if (excludeTypes != null) {      if (excludeTypes.contains(dependency.getType())) {        continue;      }    }    ContainmentConstraint constraint=new ContainmentConstraintImpl(uri,dependency.getType(),dependency.getColumnField());    URIQueryResultList list=new URIQueryResultList();    _dbClient.queryByConstraint(constraint,list);    if (list.iterator().hasNext()) {      if (!onlyActive || checkIfAnyActive(list,dependency.getType())) {        _log.info("{}: active references of type {} found",uri.toString(),dependency.getType().getSimpleName());        return dependency.getType().getSimpleName();      }    }  }  return null;}  }
class C{  public void createPackageContents(){  if (isCreated)   return;  isCreated=true;  namedElementEClass=createEClass(NAMED_ELEMENT);  createEAttribute(namedElementEClass,NAMED_ELEMENT__NAME);  documentedElementEClass=createEClass(DOCUMENTED_ELEMENT);  createEAttribute(documentedElementEClass,DOCUMENTED_ELEMENT__DOCUMENTATION);  domainElementEClass=createEClass(DOMAIN_ELEMENT);  createEAttribute(domainElementEClass,DOMAIN_ELEMENT__DOMAIN_ID);}  }
class C{  public void testDoubleValueNegNotRounded(){  byte[] a={-128,1,2,3,4,5,-128,23,1,-3,-5};  int aSign=-1;  double result=-1.5474726438794828E26;  double aNumber=new BigInteger(aSign,a).doubleValue();  assertTrue(aNumber == result);}  }
class C{  public void unregister(String group,String handle){  this.group(group).remove(handle);}  }
class C{  public void writeToParcel(Parcel dest,int flags){  dest.writeInt(channel);  dest.writeInt(frequency);  dest.writeInt(ibssAllowed ? 1 : 0);}  }
class C{  private void executeEvent(){  if (!noParamMap.isEmpty()) {    for (    Object object : noParamMap.keySet()) {      try {        noParamMap.get(object).invoke(object,(Object[])null);      } catch (      IllegalAccessException e) {        e.printStackTrace();      }catch (      InvocationTargetException e) {        e.printStackTrace();      }    }  }  if (!hasParamMap.isEmpty()) {    for (    Object object : hasParamMap.keySet()) {      try {        for (        Method m : hasParamMap.get(object).keySet()) {          m.invoke(object,hasParamMap.get(object).get(m));        }      } catch (      IllegalAccessException e) {        e.printStackTrace();      }catch (      InvocationTargetException e) {        e.printStackTrace();      }    }  }}  }
class C{  public double[] modelDistributionForInstance(Instance instance) throws Exception {  m_nominalToBinary.input(instance);  instance=m_nominalToBinary.output();  instance.setDataset(m_numericDataHeader);  return probs(getFs(instance));}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  private void doAcquireInterruptibly(long arg) throws InterruptedException {  final Node node=addWaiter(Node.EXCLUSIVE);  boolean failed=true;  try {    for (; ; ) {      final Node p=node.predecessor();      if (p == head && tryAcquire(arg)) {        setHead(node);        p.next=null;        failed=false;        return;      }      if (shouldParkAfterFailedAcquire(p,node) && parkAndCheckInterrupt())       throw new InterruptedException();    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
