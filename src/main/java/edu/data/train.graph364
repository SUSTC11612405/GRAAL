class C{  @SuppressWarnings("unchecked") public T as(String newAlias){  try {    T clone=(T)clone();    clone.alias=newAlias;    return clone;  } catch (  CloneNotSupportedException e) {    throw new RuntimeException(e);  }}  }
class C{  @Override public int doStartTag() throws JspException {  return (EVAL_BODY_INCLUDE);}  }
class C{  public void close() throws IOException {  isClosed=true;  OutputStream os=this.os;  this.os=null;  InputStream is=this.is;  this.is=null;  if (os != null)   os.close();  if (is != null)   is.close();}  }
class C{  public void mergeWithExisting(Annotation existingAnnotation,Collection<? extends Annotation> annotations){  if (annotations == null || annotations.isEmpty()) {    return;  }  if (!(existingAnnotation instanceof Entity)) {    mergeWithExistingNoCoref(existingAnnotation,annotations);    return;  }  Entity existingEntity=(Entity)existingAnnotation;  for (  Annotation a : annotations) {    if (a instanceof Entity) {      Entity entity=(Entity)a;      mergeEntities(entity,existingEntity);    } else {      mergeWithExistingNoCoref(existingAnnotation,Lists.newArrayList(a));    }  }}  }
class C{  public static void main(String[] args){  TestOverridenPrivateMethods tester=new TestOverridenPrivateMethods();  run(tester,ARGS,TEST,NEGATED_TEST);  tester.printSummary();}  }
class C{  @Override public PLIImage scale(CGSize size){  return this.scale(size.width,size.height);}  }
class C{  @Override public String convertToString(EDataType eDataType,Object instanceValue){switch (eDataType.getClassifierID()) {case N4JSPackage.VARIABLE_STATEMENT_KEYWORD:    return convertVariableStatementKeywordToString(eDataType,instanceValue);case N4JSPackage.PROPERTY_NAME_KIND:  return convertPropertyNameKindToString(eDataType,instanceValue);case N4JSPackage.POSTFIX_OPERATOR:return convertPostfixOperatorToString(eDataType,instanceValue);case N4JSPackage.UNARY_OPERATOR:return convertUnaryOperatorToString(eDataType,instanceValue);case N4JSPackage.MULTIPLICATIVE_OPERATOR:return convertMultiplicativeOperatorToString(eDataType,instanceValue);case N4JSPackage.ADDITIVE_OPERATOR:return convertAdditiveOperatorToString(eDataType,instanceValue);case N4JSPackage.RELATIONAL_OPERATOR:return convertRelationalOperatorToString(eDataType,instanceValue);case N4JSPackage.EQUALITY_OPERATOR:return convertEqualityOperatorToString(eDataType,instanceValue);case N4JSPackage.BINARY_BITWISE_OPERATOR:return convertBinaryBitwiseOperatorToString(eDataType,instanceValue);case N4JSPackage.BINARY_LOGICAL_OPERATOR:return convertBinaryLogicalOperatorToString(eDataType,instanceValue);case N4JSPackage.SHIFT_OPERATOR:return convertShiftOperatorToString(eDataType,instanceValue);case N4JSPackage.ASSIGNMENT_OPERATOR:return convertAssignmentOperatorToString(eDataType,instanceValue);case N4JSPackage.N4_MODIFIER:return convertN4ModifierToString(eDataType,instanceValue);case N4JSPackage.ITERATOR_OF_STATEMENT:return convertIteratorOfStatementToString(eDataType,instanceValue);case N4JSPackage.ITERATOR_OF_RETURN_STATEMENT:return convertIteratorOfReturnStatementToString(eDataType,instanceValue);default :throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");}}  }
class C{  @Override public void onScale(float scaleFactor,float focusX,float focusY){  if (mImageReloadFile != null) {    ImageView imageView=getImageView();    if (imageView != null) {      if (DEBUG) {        LogManager.getLogger().d(LOG_TAG,"onScale: Reloading image from " + mImageReloadFile);      }      try {        if (MAX_IMAGE_DIMENSION < 0) {          MAX_IMAGE_DIMENSION=(Build.VERSION.SDK_INT < Build.VERSION_CODES.FROYO) ? 4096 : HugeImageLoader.getMaxTextureSize();        }        imageView.setImageBitmap(HugeImageLoader.loadImage(mImageReloadFile.getAbsoluteFile(),MAX_IMAGE_DIMENSION,MAX_IMAGE_DIMENSION));        this.setRotationTo(GuiUtil.getRotationFromExifOrientation(mImageReloadFile.getAbsolutePath()));      } catch (      OutOfMemoryError e) {        LogManager.getLogger().e(LOG_TAG,"onScale: Not enought memory to reloading image from " + mImageReloadFile + " failed: "+ e.getMessage());      }      mImageReloadFile=null;    }  }  super.onScale(scaleFactor,focusX,focusY);}  }
class C{  private MultiPoint readMultiPoint(OraGeom oraGeom,int elemIndex){  CoordinateSequence seq;  if (oraGeom.geomType() == OraGeom.GEOM_TYPE.MULTIPOINT) {    seq=extractCoords(oraGeom,oraGeom.ordinates);  } else {    int etype=oraGeom.eType(elemIndex);    int interpretation=oraGeom.interpretation(elemIndex);    checkOrdinates(oraGeom,elemIndex,"MultiPoint");    checkETYPE(etype,OraGeom.ETYPE.POINT,"MultiPoint");    if (!(interpretation >= 1)) {      errorInterpretation(interpretation,"MultiPoint");    }    seq=extractCoords(oraGeom,elemIndex);  }  MultiPoint points=geometryFactory.createMultiPoint(seq);  return points;}  }
class C{  protected Map<String,Object> createDefaultEdgeStyle(){  Map<String,Object> style=new Hashtable<String,Object>();  style.put(mxConstants.STYLE_SHAPE,mxConstants.SHAPE_CONNECTOR);  style.put(mxConstants.STYLE_ENDARROW,mxConstants.ARROW_CLASSIC);  style.put(mxConstants.STYLE_VERTICAL_ALIGN,mxConstants.ALIGN_MIDDLE);  style.put(mxConstants.STYLE_ALIGN,mxConstants.ALIGN_CENTER);  style.put(mxConstants.STYLE_STROKECOLOR,"#6482B9");  style.put(mxConstants.STYLE_FONTCOLOR,"#446299");  return style;}  }
class C{  public String patch_addPadding(LinkedList<Patch> patches){  short paddingLength=this.Patch_Margin;  String nullPadding="";  for (short x=1; x <= paddingLength; x++) {    nullPadding+=String.valueOf((char)x);  }  for (  Patch aPatch : patches) {    aPatch.start1+=paddingLength;    aPatch.start2+=paddingLength;  }  Patch patch=patches.getFirst();  LinkedList<Diff> diffs=patch.diffs;  if (diffs.isEmpty() || diffs.getFirst().operation != Operation.EQUAL) {    diffs.addFirst(new Diff(Operation.EQUAL,nullPadding));    patch.start1-=paddingLength;    patch.start2-=paddingLength;    patch.length1+=paddingLength;    patch.length2+=paddingLength;  } else   if (paddingLength > diffs.getFirst().text.length()) {    Diff firstDiff=diffs.getFirst();    int extraLength=paddingLength - firstDiff.text.length();    firstDiff.text=nullPadding.substring(firstDiff.text.length()) + firstDiff.text;    patch.start1-=extraLength;    patch.start2-=extraLength;    patch.length1+=extraLength;    patch.length2+=extraLength;  }  patch=patches.getLast();  diffs=patch.diffs;  if (diffs.isEmpty() || diffs.getLast().operation != Operation.EQUAL) {    diffs.addLast(new Diff(Operation.EQUAL,nullPadding));    patch.length1+=paddingLength;    patch.length2+=paddingLength;  } else   if (paddingLength > diffs.getLast().text.length()) {    Diff lastDiff=diffs.getLast();    int extraLength=paddingLength - lastDiff.text.length();    lastDiff.text+=nullPadding.substring(0,extraLength);    patch.length1+=extraLength;    patch.length2+=extraLength;  }  return nullPadding;}  }
class C{  private void grow(){  m_allocatedSize*=2;  boolean newVector[]=new boolean[m_allocatedSize];  System.arraycopy(m_values,0,newVector,0,m_index + 1);  m_values=newVector;}  }
class C{  private Builder(com.ebay.jetstream.event.processor.hdfs.TestRecord.Builder other){  super(other);  if (isValidValue(fields()[0],other.key1)) {    this.key1=data().deepCopy(fields()[0].schema(),other.key1);    fieldSetFlags()[0]=true;  }  if (isValidValue(fields()[1],other.key2)) {    this.key2=data().deepCopy(fields()[1].schema(),other.key2);    fieldSetFlags()[1]=true;  }}  }
class C{  public static int write(AudioInputStream stream,AudioFileFormat.Type fileType,File out) throws IOException {  List providers=getAudioFileWriters();  int bytesWritten=0;  boolean flag=false;  for (int i=0; i < providers.size(); i++) {    AudioFileWriter writer=(AudioFileWriter)providers.get(i);    try {      bytesWritten=writer.write(stream,fileType,out);      flag=true;      break;    } catch (    IllegalArgumentException e) {      continue;    }  }  if (!flag) {    throw new IllegalArgumentException("could not write audio file: file type not supported: " + fileType);  } else {    return bytesWritten;  }}  }
class C{  private void initializeLocalAndTargetInfo(String svcId) throws Exception {  localInfo=localRepository.getRepositoryInfo();  log.info("Step2a: Local repository information: {}",localInfo);  coordinator.setNodeSessionScopeInfo(localInfo);  targetInfo=coordinator.getTargetInfo(RepositoryInfo.class);  if (targetInfo == null || !isValidRepo) {    try {      coordinator.setTargetInfo(localInfo,isValidRepo);      targetInfo=coordinator.getTargetInfo(RepositoryInfo.class);      log.info("Step2b: Target repository set to local state: {}",targetInfo);    } catch (    CoordinatorClientException e) {      log.info("Step2b: Wait another control node to set target");      retrySleep();      throw e;    }  }  remoteRepository=RemoteRepository.getInstance();}  }
class C{  private void readEnd(){  long now=System.nanoTime();  readTime+=now - lastTs;  lastTs=now;}  }
class C{  public boolean isNumericallyIdentical(final double otherX,final double otherY,final double otherZ){  final double thisX=y * otherZ - z * otherY;  final double thisY=z * otherX - x * otherZ;  final double thisZ=x * otherY - y * otherX;  return thisX * thisX + thisY * thisY + thisZ * thisZ < MINIMUM_RESOLUTION_SQUARED;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return System.getProperty("os.name");}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  public static ArrayList<Hop> deepCopyHopsDag(ArrayList<Hop> hops) throws HopsException {  ArrayList<Hop> ret=new ArrayList<Hop>();  try {    HashMap<Long,Hop> memo=new HashMap<Long,Hop>();    for (    Hop hopRoot : hops)     ret.add(rDeepCopyHopsDag(hopRoot,memo));  } catch (  Exception ex) {    throw new HopsException(ex);  }  return ret;}  }
class C{  @SuppressWarnings("unchecked") public static <T extends CharSequence>TransformationStrategy<T> prefixFreeUtf16(){  return (TransformationStrategy<T>)PREFIX_FREE_UTF16;}  }
class C{  Item newLong(final long value){  key.set(value);  Item result=get(key);  if (result == null) {    pool.putByte(LONG).putLong(value);    result=new Item(index,key);    index+=2;    put(result);  }  return result;}  }
class C{  @Override public void remove(Object item){  removeElement(item);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:14.673 -0500",hash_original_method="02E1DD31485C74A947A1C6B3E3A51D41",hash_generated_method="808B79FDE09C8AF6033F843984DFE08A") private static String fileName(String host,int port){  if (host == null) {    throw new NullPointerException("host");  }  return host + "." + port;}  }
class C{  public void testBug16634180() throws Exception {  createTable("testBug16634180","(pk integer primary key, val integer)","InnoDB");  this.stmt.executeUpdate("insert into testBug16634180 values(0,0)");  Connection c1=null;  Connection c2=null;  try {    c1=getConnectionWithProps(new Properties());    c1.setAutoCommit(false);    Statement s1=c1.createStatement();    s1.executeUpdate("update testBug16634180 set val=val+1 where pk=0");    c2=getConnectionWithProps(new Properties());    c2.setAutoCommit(false);    Statement s2=c2.createStatement();    try {      s2.executeUpdate("update testBug16634180 set val=val+1 where pk=0");      fail("ER_LOCK_WAIT_TIMEOUT should be thrown.");    } catch (    SQLTransientException ex) {      assertEquals(MysqlErrorNumbers.ER_LOCK_WAIT_TIMEOUT,ex.getErrorCode());      assertEquals(SQLError.SQL_STATE_ROLLBACK_SERIALIZATION_FAILURE,ex.getSQLState());      assertEquals("Lock wait timeout exceeded; try restarting transaction",ex.getMessage());    }  }  finally {    if (c1 != null) {      c1.close();    }    if (c2 != null) {      c2.close();    }  }}  }
class C{  @Override public void nodeChanged(){  log.info("The restore status changed");  onRestoreStatusChange();}  }
class C{  @SuppressWarnings({"SameParameterValue","WeakerAccess"}) public SwingTerminalFrame(TerminalEmulatorAutoCloseTrigger... autoCloseTriggers){  this("SwingTerminalFrame",autoCloseTriggers);}  }
class C{  public CCodeNodeUpdater(final ZyGraph graph,final NaviNode node,final INaviCodeNode codeNode,final BackEndDebuggerProvider debuggerProvider){  this.graph=Preconditions.checkNotNull(graph,"IE00984: Graph argument can't be null");  this.node=Preconditions.checkNotNull(node,"IE02238: Node argument can not be null");  this.codeNode=Preconditions.checkNotNull(codeNode,"IE00985: Code node argument can't be null");  provider=Preconditions.checkNotNull(debuggerProvider,"IE02239: Debugger provider argument can not be null");  nodeModifier=new CDefaultModifier(graph.getSettings(),debuggerProvider);  tagUpdater=new CTagUpdater(graph);  settingsUpdater=new CSettingsUpdater(graph);  operandTreeUpdater=new COperandUpdater(graph);  moduleUpdater=new CModuleUpdater(graph);  instructionUpdater=new CInstructionUpdater(graph);  functionUpdater=new CFunctionUpdater(graph);  debuggerUpdater=new CDebuggerUpdater(graph);  debuggerProviderListener=new CDebuggerProviderUpdater(debuggerUpdater);  substitutionsUpdater=new TypeSubstitutionsUpdater(codeNode,node);  initializeListeners();}  }
class C{  public static double calcDistanceExcludingStartEndLink(final NetworkRoute route,final Network network){  double dist=0;  for (  Id<Link> linkId : route.getLinkIds()) {    dist+=network.getLinks().get(linkId).getLength();  }  return dist;}  }
class C{  public static boolean isRegex(String s){  return isRegex(s,0);}  }
class C{  public HeaderCardBuilder comment(String newComment) throws HeaderCardException {  if (this.card == null) {    this.card=new HeaderCard(this.key.key(),(String)null,null);    this.header.addLine(this.card);  }  this.card.setComment(newComment);  return this;}  }
class C{  public void terminated(){  isSuspended=false;  DebugPlugin.getDefault().getBreakpointManager().removeBreakpointListener(this);  fireTerminateEvent();  try {    if (eventWriter != null) {      eventWriter.close();    }    if (eventReader != null) {      eventReader.close();    }    if (eventSocket != null) {      eventSocket.close();    }    if (serverSocket != null) {      serverSocket.close();    }    if (consoleFacade != null) {      if (isRemoteDebugging) {        consoleFacade.writeLine("Remote connection closed");      }      consoleFacade=null;    }  } catch (  final IOException e) {    e.printStackTrace();  }  if (getProcess() != null) {    try {      getProcess().terminate();    } catch (    final DebugException e) {      e.printStackTrace();    }  }}  }
class C{  private static Map<INaviViewNode,INaviViewNode> convertNodes(final INaviView view,final INaviView prunedView,final List<INaviInstruction> keptInstructions){  final Map<INaviViewNode,INaviViewNode> nodeMap=new HashMap<INaviViewNode,INaviViewNode>();  for (  final INaviViewNode node : view.getGraph().getNodes()) {    if (node instanceof INaviCodeNode) {      final INaviCodeNode cnode=(INaviCodeNode)node;      final ArrayList<INaviInstruction> newInstructions=Lists.newArrayList(cnode.getInstructions());      newInstructions.retainAll(keptInstructions);      if (!newInstructions.isEmpty()) {        CCodeNode newNode;        try {          newNode=prunedView.getContent().createCodeNode(cnode.getParentFunction(),newInstructions);        } catch (        final MaybeNullException e) {          newNode=prunedView.getContent().createCodeNode(null,newInstructions);        }        newNode.setBorderColor(node.getBorderColor());        newNode.setColor(node.getColor());        nodeMap.put(node,newNode);      }    } else     if (node instanceof INaviFunctionNode) {      final INaviFunction function=((INaviFunctionNode)node).getFunction();      final CFunctionNode newNode=prunedView.getContent().createFunctionNode(function);      nodeMap.put(node,newNode);    }  }  return nodeMap;}  }
class C{  public static String truncateCustomStatus(String customStatus){  if (customStatus == null) {    return customStatus;  }  return customStatus.length() > CUSTOM_STATUS_SIZE_BYTES ? customStatus.substring(0,CUSTOM_STATUS_SIZE_BYTES) : customStatus;}  }
class C{  public FilledArrowhead(){  setupControlPoints(3);}  }
class C{  @SuppressWarnings("SimplifiableIfStatement") public static boolean projectScopedTaskExecutionActionsEnabledFor(NodeSelection nodeSelection){  if (nodeSelection.isEmpty()) {    return false;  }  return nodeSelection.hasAllNodesOfType(ProjectNode.class) && nodeSelection.isSingleSelection() && !nodeSelection.getFirstElement(ProjectNode.class).isIncludedProject();}  }
class C{  private static BigDecimal expTaylor(BigDecimal x,int scale){  BigDecimal factorial=BigDecimal.valueOf(1);  BigDecimal xPower=x;  BigDecimal sumPrev;  BigDecimal sum=x.add(BigDecimal.valueOf(1));  int i=2;  do {    xPower=xPower.multiply(x).setScale(scale,BigDecimal.ROUND_HALF_EVEN);    factorial=factorial.multiply(BigDecimal.valueOf(i));    BigDecimal term=xPower.divide(factorial,scale,BigDecimal.ROUND_HALF_EVEN);    sumPrev=sum;    sum=sum.add(term);    ++i;    Thread.yield();  } while (sum.compareTo(sumPrev) != 0);  return sum;}  }
class C{  public final void signalAll(){  if (!isHeldExclusively())   throw new IllegalMonitorStateException();  Node first=firstWaiter;  if (first != null)   doSignalAll(first);}  }
class C{  public List<String> classifierIds(){  return classifierIds;}  }
class C{  public static SharePasswordDialogFragment newInstance(OCFile file,boolean createShare){  SharePasswordDialogFragment frag=new SharePasswordDialogFragment();  Bundle args=new Bundle();  args.putParcelable(ARG_FILE,file);  args.putBoolean(ARG_CREATE_SHARE,createShare);  frag.setArguments(args);  return frag;}  }
class C{  protected List findScrOficByUsuario(Locale locale,String idUsuario) throws HibernateException {  List result=null;  StringBuffer queryUsrOfic=new StringBuffer();  String sqlUsrOfic="id in (select idofic from scr_usrofic where iduser = ";  queryUsrOfic.append(sqlUsrOfic);  queryUsrOfic.append(idUsuario);  queryUsrOfic.append(")");  result=executeCriteriaReturnScrOficList(locale,queryUsrOfic);  return result;}  }
class C{  @SuppressWarnings({"raw","unchecked"}) public static <T>ContainsAllPredicate<T> containsAllVariables(Property<? extends Collection<T>> collectionProperty,Iterable<Variable> variables){  NullArgumentException.validateNotNull("Variables",variables);  return new ContainsAllPredicate(property(collectionProperty),variables);}  }
class C{  void removedAt(int removedIndex){  for (Node o=null, p=head; p != null; ) {    final Itr it=p.get();    final Node next=p.next;    if (it == null || it.removedAt(removedIndex)) {      p.clear();      p.next=null;      if (o == null)       head=next; else       o.next=next;    } else {      o=p;    }    p=next;  }  if (head == null)   itrs=null;}  }
class C{  protected void moveAndResizeGap(int position,int size){  char[] content=null;  int oldSize=this.gapEnd - this.gapStart;  if (size < 0) {    if (oldSize > 0) {      content=new char[this.contents.length - oldSize];      System.arraycopy(this.contents,0,content,0,this.gapStart);      System.arraycopy(this.contents,this.gapEnd,content,this.gapStart,content.length - this.gapStart);      this.contents=content;    }    this.gapStart=this.gapEnd=position;    return;  }  content=new char[this.contents.length + (size - oldSize)];  int newGapStart=position;  int newGapEnd=newGapStart + size;  if (oldSize == 0) {    System.arraycopy(this.contents,0,content,0,newGapStart);    System.arraycopy(this.contents,newGapStart,content,newGapEnd,content.length - newGapEnd);  } else   if (newGapStart < this.gapStart) {    int delta=this.gapStart - newGapStart;    System.arraycopy(this.contents,0,content,0,newGapStart);    System.arraycopy(this.contents,newGapStart,content,newGapEnd,delta);    System.arraycopy(this.contents,this.gapEnd,content,newGapEnd + delta,this.contents.length - this.gapEnd);  } else {    int delta=newGapStart - this.gapStart;    System.arraycopy(this.contents,0,content,0,this.gapStart);    System.arraycopy(this.contents,this.gapEnd,content,this.gapStart,delta);    System.arraycopy(this.contents,this.gapEnd + delta,content,newGapEnd,content.length - newGapEnd);  }  this.contents=content;  this.gapStart=newGapStart;  this.gapEnd=newGapEnd;}  }
class C{  @Override public void tearDown(){  super.tearDown();}  }
class C{  public boolean userHasPermission(String userId,String permissionType,String targetId){  Permission permission=permissionRepository.findTopByPermissionTypeAndTargetId(permissionType,targetId);  if (permission == null) {    return false;  }  if (isSuperAdmin(userId)) {    return true;  }  List<UserRole> userRoles=userRoleRepository.findByUserId(userId);  if (CollectionUtils.isEmpty(userRoles)) {    return false;  }  Set<Long> roleIds=FluentIterable.from(userRoles).transform(null).toSet();  List<RolePermission> rolePermissions=rolePermissionRepository.findByRoleIdIn(roleIds);  if (CollectionUtils.isEmpty(rolePermissions)) {    return false;  }  for (  RolePermission rolePermission : rolePermissions) {    if (rolePermission.getPermissionId() == permission.getId()) {      return true;    }  }  return false;}  }
class C{  private static String applyRFC2732(String hostname){  if (hostname.indexOf(":") != -1) {    return "[" + hostname + "]";  }  return hostname;}  }
class C{  public Option(String opt,String description) throws IllegalArgumentException {  this(opt,null,false,description);}  }
class C{  public static boolean isToday(long sysTime,long dateTime){  String s=getTime(sysTime,DATE_FORMAT);  long l=getTime(s,DATE_FORMAT);  return dateTime - l >= 0;}  }
class C{  @AfterClass public static void tearDownAfterClass() throws Exception {}  }
class C{  public static String findLocalRootPath(final Class<?> klazz){  final String compiledFileName=klazz.getSimpleName() + ".class";  final URL classUrl=klazz.getResource(compiledFileName);  Preconditions.checkNotNull(classUrl,"Cannot find resource for class " + klazz.getCanonicalName());  final String classUrlProto=classUrl.getProtocol();  final String classUrlPath=classUrl.getPath();  final String result;  final int startIdx=SystemHelpers.isRunningWindows() ? 1 : 0;  if (classUrlProto.equals("file")) {    final Package classPackage=klazz.getPackage();    if (classPackage != null) {      final String classPackagePath=classPackage != null ? classPackage.getName().replace('.','/') : "";      result=classUrlPath.substring(startIdx,classUrlPath.lastIndexOf(classPackagePath));    } else {      result=classUrlPath.substring(startIdx,classUrlPath.lastIndexOf('/'));    }  } else {    if (!classUrlProto.equals("jar")) {      throw new RuntimeException("Cannot find root path for remote classes");    }    if (!classUrlPath.startsWith("file:")) {      throw new IllegalArgumentException("Cannot find root path for class " + klazz.getCanonicalName());    }    final String jarPath=classUrlPath.substring(5,classUrlPath.lastIndexOf('!'));    result=jarPath.substring(startIdx,jarPath.lastIndexOf('/'));  }  try {    return URLDecoder.decode(result.replace('/',File.separatorChar),System.getProperty("file.encoding"));  } catch (  final UnsupportedEncodingException e) {    assert false : "Platform default URL encoding should always be available";    throw new RuntimeException(e);  }}  }
class C{  public JRadioButtonMenuItem(String text){  this(text,null,false);}  }
class C{  public void normalizeNode(int nodeIndex){  for (int rowIndex=0; rowIndex < getNumRows(nodeIndex); rowIndex++) {    normalizeRow(nodeIndex,rowIndex);  }}  }
class C{  public void installFeatures(){  profileProperty("org.eclipse.update.install.features","true");}  }
class C{  public String humanize(String words){  if (words.endsWith("_id")) {    words=words.substring(0,words.length() - 3);  }  StringBuilder sb=new StringBuilder(words.length());  sb.append(Character.toUpperCase(words.charAt(0)));  for (int i=1; i < words.length(); i++) {    char ch=words.charAt(i);    if (ch == '_') {      sb.append(' ');    } else {      sb.append(ch);    }  }  return sb.toString();}  }
class C{  public boolean isCharClass(Macros macros){  RegExp1 unary;  RegExp2 binary;switch (type) {case sym.CHAR:case sym.CHAR_I:case sym.CCLASS:case sym.CCLASSNOT:    return true;case sym.BAR:  binary=(RegExp2)this;return binary.r1.isCharClass(macros) && binary.r2.isCharClass(macros);case sym.MACROUSE:unary=(RegExp1)this;return macros.getDefinition((String)unary.content).isCharClass(macros);default :return false;}}  }
class C{  public void addGenerator(Distribution gen){  if (trans != null) {    throw new AbortException("Generators may no longer be added when transformations have been applied.");  }  axes.add(gen);  dim++;}  }
class C{  public boolean hasErrorCount(){  return getErrorCount() != 0;}  }
class C{  protected String encodeBody(){  String retval=Integer.toString(expires);  if (!parameters.isEmpty()) {    retval+=SEMICOLON + parameters.encode();  }  return retval;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static boolean canResize(List constraints){  for (Iterator iter=constraints.iterator(); iter.hasNext(); ) {    DockConstraint dc=(DockConstraint)iter.next();    if (!dc.canResize())     return false;  }  return true;}  }
class C{  public Builder(Meta meta){  if (meta == null) {    throw new IllegalArgumentException("The given Meta can't be null");  }  this.created=meta.created;  this.lastModified=meta.lastModified;  this.location=meta.location;  this.version=meta.version;  this.attributes=meta.attributes;  this.resourceType=meta.resourceType;}  }
class C{  public static double sum(double[] doubles){  double sum=0;  for (  double d : doubles) {    sum+=d;  }  return sum;}  }
class C{  static void write(File file,SharedFsCheckpointData data,Marshaller m,IgniteLogger log) throws IOException, IgniteCheckedException {  assert file != null;  assert m != null;  assert data != null;  assert log != null;  OutputStream out=null;  try {    out=new FileOutputStream(file);    m.marshal(data,out);  }  finally {    U.close(out,log);  }}  }
class C{  private static String processMetadata(String line){  int p, q, s=0;  while ((p=line.indexOf(WIKI_OPEN_METADATA,s)) >= 0 && (q=line.indexOf(WIKI_CLOSE_METADATA,p + 1)) >= 0) {    s=q;    final String a=line.substring(p + LEN_WIKI_OPEN_METADATA,q);    if (a.toLowerCase().startsWith("coordinate")) {      final String b[]=a.split("\\|");      float lon=Float.NaN, lat=Float.NaN;      float lonm=0.0f, latm=0.0f;      String lono="E", lato="N";      String name="";      try {        for (        final String c : b) {          if (c.toLowerCase().startsWith("name=")) {            name=c.substring(5);          }          if (c.toUpperCase().startsWith("NS=")) {            final String d[]=c.substring(3).split("/");            if (d.length == 1) {              float l=Float.parseFloat(d[0]);              if (l < 0) {                lato="S";                l=-l;              }              lat=(float)Math.floor(l);              latm=60.0f * (l - lat);            } else             if (d.length > 1) {              lat=Float.parseFloat(d[0]);              if (!d[1].isEmpty())               latm=Float.parseFloat(d[1]);              if (d.length >= 3 && !d[2].isEmpty()) {                latm+=(Float.parseFloat(d[2]) / 60.0f);              }              if (d[d.length - 1].toUpperCase().equals("S"))               lato="S";            }          }          if (c.toUpperCase().startsWith("EW=")) {            final String d[]=c.substring(3).split("/");            if (d.length == 1) {              float l=Float.parseFloat(d[0]);              if (l < 0) {                lono="W";                l=-l;              }              lon=(float)Math.floor(l);              lonm=60.0f * (l - lon);            } else             if (d.length > 1) {              lon=Float.parseFloat(d[0]);              if (!d[1].isEmpty())               lonm=Float.parseFloat(d[1]);              if (d.length >= 3 && !d[2].isEmpty()) {                lonm+=(Float.parseFloat(d[2]) / 60.0f);              }              if (d[d.length - 1].toUpperCase().equals("W")) {                lono="W";              }            }          }        }      } catch (      NumberFormatException nsExcept) {        continue;      }      if (!Float.isNaN(lon) && !Float.isNaN(lat)) {        line=line.substring(0,p) + (name.length() > 0 ? (" " + name) : "") + " <nobr> "+ lato+ " "+ lat+ "\u00B0 "+ latm+ "'</nobr><nobr>"+ lono+ " "+ lon+ "\u00B0 "+ lonm+ "'</nobr> "+ line.substring(q + WIKI_CLOSE_METADATA.length());        s=p;        continue;      }    }  }  return line;}  }
class C{  public boolean[] toBooleanArray(){  boolean[] bits=new boolean[length];  for (int i=0; i < length; i++) {    bits[i]=get(i);  }  return bits;}  }
class C{  private void initInfo(int record_id,String value){  if (!(record_id == 0) && value != null && value.length() > 0) {    log.severe("Received both a record_id and a value: " + record_id + " - "+ value);  }  if (record_id != 0) {    fieldID=record_id;    String trxName=Trx.createTrxName();    MOrder o=new MOrder(Env.getCtx(),record_id,trxName);    fIsSOTrx.setSelected(o.isSOTrx());    fIsDelivered.setSelected(o.isDelivered());    o=null;    Trx.get(trxName,false).close();  } else {    String id;    id=Env.getContext(Env.getCtx(),p_WindowNo,p_TabNo,"C_BPartner_ID",true);    if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0))     fBPartner_ID.setValue(new Integer(id));    if (value != null && value.length() > 0) {      fDocumentNo.setValue(value);    } else {      id=Env.getContext(Env.getCtx(),p_WindowNo,p_TabNo,"C_Order_ID",true);      if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0)) {        fieldID=new Integer(id).intValue();        String trxName=Trx.createTrxName();        MOrder o=new MOrder(Env.getCtx(),record_id,trxName);        fIsSOTrx.setSelected(o.isSOTrx());        fIsDelivered.setSelected(o.isDelivered());        o=null;        Trx.get(trxName,false).close();      }    }  }}  }
class C{  private void sortUnitsToBombard(final List<Unit> units,final PlayerID player){  if (units.isEmpty()) {    return;  }  Collections.sort(units,UnitComparator.getDecreasingAttackComparator(player));}  }
class C{  public void testRetainAllFull(){  Trie retain=buildTrie(m_Data);  Trie clone=(Trie)m_Trie.clone();  m_Trie.retainAll(retain);  assertEquals("Retaining all strings",clone.size(),m_Trie.size());}  }
class C{  protected static <T>String mkString(Iterable<T> elems,C1<T,String> f,String start,String sep,String end){  SB sb=new SB(start);  boolean first=true;  for (  T elem : elems) {    if (!first)     sb.a(sep);    sb.a(f.apply(elem));    first=false;  }  return sb.a(end).toString();}  }
class C{  @DSSpec(DSCat.IO) @DSSource({DSSourceKind.IO}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:57.504 -0400",hash_original_method="DEBABCFB0D5C81DCE0E37961227F43C9",hash_generated_method="259E44B8B64C1FF49A2A2EC42CFB5CBE") @Override public int read() throws IOException {  return Streams.readSingleByte(this);}  }
class C{  public NokiaOtaBookmark(String name,String url){  name_=name;  url_=url;}  }
class C{  public boolean hasAScale(int index){  return ((getFlag(index) & WE_HAVE_A_SCALE) != 0);}  }
class C{  public String addLimitToQuery(String query,int limit){  if (limit <= 0)   return query; else   if (query.toLowerCase().contains("limit"))   return query; else {    String limitClause=String.format(" LIMIT %d",limit);    return query + limitClause;  }}  }
class C{  public void stratify(int numFolds){  if (numFolds <= 1) {    throw new IllegalArgumentException("Number of folds must be greater than 1");  }  if (m_ClassIndex < 0) {    throw new UnassignedClassException("Class index is negative (not set)!");  }  if (classAttribute().isNominal()) {    int index=1;    while (index < numInstances()) {      Instance instance1=instance(index - 1);      for (int j=index; j < numInstances(); j++) {        Instance instance2=instance(j);        if ((instance1.classValue() == instance2.classValue()) || (instance1.classIsMissing() && instance2.classIsMissing())) {          swap(index,j);          index++;        }      }      index++;    }    stratStep(numFolds);  }}  }
class C{  private String createUniqueServerHash(int port){  StringBuilder sb=new StringBuilder();  byte[] mac=getHardwareAddress();  if (mac != null) {    for (int i=0; i < mac.length; i++) {      if (sb.length() > 0) {        sb.append(":");      }      sb.append(Integer.toHexString(mac[i] & 0xff));    }  }  sb.append(":").append(port);  return sb.toString();}  }
class C{  public Set<Group> findGroupsByNameInGroup(String tenantName,PrincipalId groupId,String searchString,int limit) throws Exception {  return getService().findGroupsByNameInGroup(tenantName,groupId,searchString,limit,this.getServiceContext());}  }
class C{  @Override public void onDestroyFloatView(View floatView){  ((ImageView)floatView).setImageDrawable(null);  mFloatBitmap.recycle();  mFloatBitmap=null;}  }
class C{  public void testInternalTaskBalancing() throws Exception {  customLoadBalancer=true;  ignite=startGrids(GRID_CNT);  assertEquals(TASK_RESULT,ignite.compute().execute(GridInternalTestTask.class.getName(),null));  UUID nid=ignite.cluster().localNode().id();  GridTuple3<Boolean,Long,Long> ping=ignite.compute().execute(VisorNodePingTask.class.getName(),new VisorTaskArgument<>(nid,nid,false));  assertTrue(ping.get1());  try {    ignite.compute().execute(CustomTestTask.class.getName(),null);  } catch (  IgniteException e) {    assertTrue(e.getMessage().startsWith("Node can not be null [mappedJob=org.apache.ignite.spi.loadbalancing.internal.GridInternalTasksLoadBalancingSelfTest$CustomTestJob"));  }}  }
class C{  protected Node deepCopyInto(Node n){  super.deepCopyInto(n);  AbstractEntityReference ae=(AbstractEntityReference)n;  ae.nodeName=nodeName;  return n;}  }
class C{  public int postReplace(IDocument document){  try {    document.removePosition(CATEGORY,fPosition);    document.removePositionUpdater(fPositionUpdater);    document.removePositionCategory(CATEGORY);  } catch (  BadPositionCategoryException e) {    JavaPlugin.log(e);  }  return fPosition.getOffset();}  }
class C{  protected Queue createQueue(String name){  return ActiveMQJMSClient.createQueue(name);}  }
class C{  private int[] cacheEvents(String evtPropsStr) throws Exception {  String[] evtStr=evtPropsStr.split("\\s*,\\s*");  if (evtStr.length == 0)   return EventType.EVTS_CACHE;  int[] evts=new int[evtStr.length];  try {    for (int i=0; i < evtStr.length; i++)     evts[i]=CacheEvt.valueOf(evtStr[i].toUpperCase()).getId();  } catch (  Exception e) {    log.error("Failed to recognize the provided cache event!",e);    throw new Exception(e);  }  return evts;}  }
class C{  private ParallelTaskManager(){  super();synchronized (this) {    logger=LoggerFactory.getLogger(ParallelTaskManager.class);  }  logger.info("Initialized ParallelTaskManager...");}  }
class C{  public CacheHeader(String key,Entry entry){  this.key=key;  this.size=entry.data.length;  this.etag=entry.etag;  this.serverDate=entry.serverDate;  this.ttl=entry.ttl;  this.responseHeaders=entry.responseHeaders;}  }
class C{  public final void testSetConstraint(){  Constraint<Object> constraint=new ConstraintImplementation(true);  NegateConstraint<Object> negateConstraint=NegateConstraint.create(new ConstraintImplementation(false));  negateConstraint.setConstraint(constraint);  assertEquals(constraint,negateConstraint.getConstraint());}  }
class C{  public final void forceFinished(boolean finished){  mFinished=finished;}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HOST;case 2:  return PORT;case 3:return ID;case 4:return V_NODES;case 5:return PING_FREQUENCY;case 6:return SERVICE_NAME;case 7:return STATE;case 8:return TIMESTAMP;default :return null;}}  }
class C{  private static void GetLongArrayRegion(JNIEnvironment env,int arrayJREF,int startIndex,int length,Address bufAddress){  if (traceJNI)   VM.sysWrite("JNI called: GetLongArrayRegion   \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    long[] sourceArray=(long[])env.getJNIRef(arrayJREF);    if ((startIndex < 0) || (startIndex + length > sourceArray.length)) {      env.recordException(new ArrayIndexOutOfBoundsException());      return;    }    Memory.memcopy(bufAddress,Magic.objectAsAddress(sourceArray).plus(startIndex << LOG_BYTES_IN_LONG),length << LOG_BYTES_IN_LONG);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);  }}  }
class C{  public void valueChanged(ListSelectionEvent event){  if (!event.getValueIsAdjusting()) {    ListSelectionModel model=(ListSelectionModel)event.getSource();    if (model.getLeadSelectionIndex() > -1) {      Aspect transferObject=m_tableModel.getData().getAspect().get(m_table.convertRowIndexToModel(model.getLeadSelectionIndex()));      propertiesButton.setEnabled(false);      setChildPanel(transferObject);    }  }}  }
class C{  private void removeEntry(String key){  CacheHeader entry=mEntries.get(key);  if (entry != null) {    mTotalSize-=entry.size;    mEntries.remove(key);  }}  }
class C{  public void finishOption() throws UpdateConstraintException {  cleanupObsoleteOptionDescriptions();  processedOptionLocales.clear();  processedOptionIds.add(parameterOption.getOptionId());  parameterOption=null;}  }
class C{  public static void main(String[] args) throws Exception {  AbstractMultiLabelClassifier.evaluation(new Maniac(),args);}  }
class C{  private boolean __pushUserBin(InetAddress inetAddress,boolean isUser1,byte[] userBin){  ByteArrayEntity arrayEntity=new ByteArrayEntity(userBin);  arrayEntity.setContentType("application/octet-stream");  String url=__getUpgradePushUrl(inetAddress,isUser1);  HttpPost httpPost=new HttpPost(url);  httpPost.setEntity(arrayEntity);  DefaultHttpClient httpClient=new DefaultHttpClient();  __setHttpClientParams(httpClient);  try {    int result=httpClient.execute(httpPost).getStatusLine().getStatusCode();    if (result == HttpStatus.SC_OK) {      log.debug(Thread.currentThread().toString() + "##__pushUserBin(inetAddress=[" + inetAddress+ "],isUser1=["+ isUser1+ "],userBin=["+ userBin+ "]): "+ true);      return true;    }  } catch (  Exception e) {    e.printStackTrace();  } finally {    httpClient.getConnectionManager().shutdown();  }  log.warn(Thread.currentThread().toString() + "##__pushUserBin(inetAddress=[" + inetAddress+ "],isUser1=["+ isUser1+ "],userBin=["+ userBin+ "]): "+ false);  return false;}  }
class C{  public Matrix4f rotateX(float ang){  return rotateX(ang,this);}  }
class C{  public void write(int data) throws IOException {  int xb=0;  int yb=0;  int coeffNum=0;  int coeff=0;  for (int count=0; count < 8; count++) {    if (this.n >= (this.imgWidth * this.imgHeight * 8)) {      throw new IOException("Image size insufficient");    }    do {      xb=Math.abs(this.rand.nextInt()) % (this.imgWidth / DCT.NJPEG);      yb=Math.abs(this.rand.nextInt()) % (this.imgHeight / DCT.NJPEG);    } while (!this.coord.add(xb,yb));    this.dct.fwdDctBlock8x8(this.y,xb * DCT.NJPEG,yb * DCT.NJPEG,this.dcts);    do {      coeffNum=(Math.abs(this.rand.nextInt()) % (DCT.NJPEG * DCT.NJPEG - 2)) + 1;    } while (this.dct.isMidFreqCoeff8x8(coeffNum) == 0);    this.dct.quantize8x8(this.dcts);    coeff=(int)this.dcts[coeffNum / DCT.NJPEG][coeffNum % DCT.NJPEG];    if (((data >> (7 - count)) & 1) == 1) {      coeff|=1;    } else {      coeff&=~(1);    }    this.dcts[coeffNum / DCT.NJPEG][coeffNum % DCT.NJPEG]=coeff;    this.dct.dequantize8x8(this.dcts);    this.dct.invDctBlock8x8(this.dcts,this.y,xb * DCT.NJPEG,yb * DCT.NJPEG);    this.n++;  }}  }
class C{  public static void testHidenChildDispose() throws Exception {  JFrame f=new JFrame();  JDialog dlg=new JDialog(f);  Listener l=new Listener();  dlg.addWindowListener(l);  f.dispose();  waitEvents();  assertEquals(0,l.getCount());}  }
class C{  private boolean lambdaNewClassFilter(TranslationContext<?> context,JCNewClass tree){  if (context != null && tree.encl == null && tree.def == null && !tree.type.getEnclosingType().hasTag(NONE)) {    Type encl=tree.type.getEnclosingType();    Type current=context.owner.enclClass().type;    while (!current.hasTag(NONE)) {      if (current.tsym.isSubClass(encl.tsym,types)) {        return true;      }      current=current.getEnclosingType();    }    return false;  } else {    return false;  }}  }
class C{  public void regenerate(Projection proj){  Debug.message("eomg","EditableOMScalingRaster.regenerate()");  if (raster != null)   raster.regenerate(proj);  setGrabPoints(raster);  generate(proj);}  }
class C{  public void read(Appendable dest) throws IOException {  if (_byteBuffer == null)   throw new IOException("Reader closed");  while (_byteBuffer.hasRemaining()) {    byte b=_byteBuffer.get();    if (b >= 0) {      dest.append((char)b);    } else {      int code=read2(b);      if (code < 0x10000) {        dest.append((char)code);      } else       if (code <= 0x10ffff) {        dest.append((char)(((code - 0x10000) >> 10) + 0xd800));        dest.append((char)(((code - 0x10000) & 0x3ff) + 0xdc00));      } else {        throw new CharConversionException("Cannot convert U+" + Integer.toHexString(code) + " to char (code greater than U+10FFFF)");      }    }  }}  }
class C{  public void close() throws IOException {  this.stream.close();}  }
class C{  public void testServerPrepStmtExecuteLargeBatch() throws Exception {  createTable("testExecuteLargeBatch","(id BIGINT AUTO_INCREMENT PRIMARY KEY, n INT)");  Connection testConn=getConnectionWithProps("useServerPrepStmts=true");  this.pstmt=testConn.prepareStatement("INSERT INTO testExecuteLargeBatch (n) VALUES (?)",Statement.RETURN_GENERATED_KEYS);  this.pstmt.setInt(1,1);  this.pstmt.addBatch();  this.pstmt.setInt(1,2);  this.pstmt.addBatch();  this.pstmt.setInt(1,3);  this.pstmt.addBatch();  this.pstmt.setInt(1,4);  this.pstmt.addBatch();  this.pstmt.addBatch("INSERT INTO testExecuteLargeBatch (n) VALUES (5), (6), (7)");  this.pstmt.setInt(1,8);  this.pstmt.addBatch();  this.pstmt.addBatch("INSERT INTO testExecuteLargeBatch (n) VALUES (9), (10)");  long[] counts=this.pstmt.executeLargeBatch();  assertEquals(7,counts.length);  assertEquals(1,counts[0]);  assertEquals(1,counts[1]);  assertEquals(1,counts[2]);  assertEquals(1,counts[3]);  assertEquals(3,counts[4]);  assertEquals(1,counts[5]);  assertEquals(2,counts[6]);  this.rs=this.pstmt.getGeneratedKeys();  ResultSetMetaData rsmd=this.rs.getMetaData();  assertEquals(1,rsmd.getColumnCount());  assertEquals(JDBCType.BIGINT.getVendorTypeNumber().intValue(),rsmd.getColumnType(1));  assertEquals(20,rsmd.getColumnDisplaySize(1));  long generatedKey=0;  while (this.rs.next()) {    assertEquals(++generatedKey,this.rs.getLong(1));  }  assertEquals(10,generatedKey);  this.rs.close();  createTable("testExecuteLargeBatch","(id BIGINT AUTO_INCREMENT PRIMARY KEY, n INT)");  this.pstmt=testConn.prepareStatement("INSERT INTO testExecuteLargeBatch (n) VALUES (?)",Statement.RETURN_GENERATED_KEYS);  this.pstmt.setInt(1,1);  this.pstmt.addBatch();  this.pstmt.setInt(1,2);  this.pstmt.addBatch();  this.pstmt.setInt(1,3);  this.pstmt.addBatch();  this.pstmt.setInt(1,4);  this.pstmt.addBatch();  this.pstmt.addBatch("INSERT INTO testExecuteLargeBatch (n) VALUES (5), (6), (7)");  this.pstmt.setString(1,"eight");  this.pstmt.addBatch();  this.pstmt.addBatch("INSERT INTO testExecuteLargeBatch (n) VALUES (9), (10)");  try {    this.pstmt.executeLargeBatch();    fail("BatchUpdateException expected");  } catch (  BatchUpdateException e) {    assertEquals("Incorrect integer value: 'eight' for column 'n' at row 1",e.getMessage());    counts=e.getLargeUpdateCounts();    assertEquals(7,counts.length);    assertEquals(1,counts[0]);    assertEquals(1,counts[1]);    assertEquals(1,counts[2]);    assertEquals(1,counts[3]);    assertEquals(3,counts[4]);    assertEquals(Statement.EXECUTE_FAILED,counts[5]);    assertEquals(2,counts[6]);  }  this.rs=this.pstmt.getGeneratedKeys();  generatedKey=0;  while (this.rs.next()) {    assertEquals(++generatedKey,this.rs.getLong(1));  }  assertEquals(9,generatedKey);  this.rs.close();  testConn.close();}  }
class C{  protected boolean osFileMove(File dest,File source){  if (source.renameTo(dest)) {    return true;  }  if (source.exists() && source.isFile() && source.canRead()&& source.canWrite()&& !dest.exists()) {    if (osFileCopy(dest,source)) {      if (osDeleteFile(source)) {        return true;      } else {        osDeleteFile(dest);      }    }  }  return false;}  }
class C{  public int provideDumpInterval(){  return provideBlockThreshold();}  }
class C{  public static Object parseByTypename(String value,String typeName){  Datatype datatype=Datatypes.get(typeName);  try {    return datatype.parse(value);  } catch (  ParseException e) {    throw new IllegalArgumentException(String.format("Cannot parse specified parameter of type '%s'",typeName),e);  }}  }
class C{  @NamespacePermission(fields="#request.namespace",permissions=NamespacePermissionEnum.READ) @Override @Transactional(propagation=Propagation.REQUIRES_NEW) public BusinessObjectFormatDdl generateBusinessObjectFormatDdl(BusinessObjectFormatDdlRequest request){  return generateBusinessObjectFormatDdlImpl(request,false);}  }
class C{  public UnitsFormat(String lengthUnits,String areaUnits){  this(lengthUnits,areaUnits,false);}  }
class C{  void unbox(String sname,Wrapper wt){  visitMethodInsn(Opcodes.INVOKEVIRTUAL,sname,unboxMethod(wt),unboxingDescriptor(wt),false);}  }
class C{  public Bundler putLongArray(String key,long[] value){  bundle.putLongArray(key,value);  return this;}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  System.out.println("Error! Function.execute should not be called!");  return null;}  }
class C{  public boolean isCurrentFilter(long filterVersion){  return statementFilterVersion.isCurrentFilter(filterVersion);}  }
class C{  private void buildList(){  mList=new SnackBarListView(mContext);  mList.setId(R.id.snackbar);  setListAppearance();  adapter=new SnackBarListAdapter(mContext);  mList.setAdapter(adapter);  mTargetParent.addView(mList);  if (mMessagesList.size() > 0) {    show();  } else {    hide();  }}  }
class C{  private void queryIndex(Object key,IndexInfo indexInfo,SelectResults results,CompiledValue iterOperands,RuntimeIterator[] indpndntItrs,ExecutionContext context,List projAttrib,boolean conditioningNeeded) throws TypeMismatchException, FunctionDomainException, NameResolutionException, QueryInvocationTargetException {  assert indexInfo != null;  assert indexInfo._index != null;  IndexInfo contextIndexInfo=new IndexInfo(new CompiledLiteral(key),indexInfo._path(),indexInfo._getIndex(),0,null,indexInfo._operator());  context.cachePut(CompiledValue.INDEX_INFO,contextIndexInfo);  indexInfo._index.query(key,TOK_EQ,results,!conditioningNeeded ? iterOperands : null,indpndntItrs == null ? null : indpndntItrs[0],context,projAttrib,null,false);}  }
class C{  private void resizeFramebufferTexture(){  glDeleteTextures(raytraceTexture);  glDeleteTextures(positionTexture);  glDeleteTextures(normalTexture);  glDeleteRenderbuffers(depthBuffer);  glDeleteFramebuffers(fbo);  createRaytracingTexture();  createRasterizerTextures();  createRasterFrameBufferObject();}  }
class C{  public Kernel(double... values){  this(values.length / 2,values);}  }
class C{  @Override public int compareTo(KeyValue o){  int result=-1;  if (this.getValue() == null) {    result=1;  } else {    if (o != null && o.getValue() != null) {      result=this.getValue().compareTo(o.getValue());    }  }  return result;}  }
class C{  private void cleanupStaleDbConfig(){  coordinatorClient.deletePath(String.format("%s/%s",ZkPath.CONFIG,Constants.DB_CONFIG));  coordinatorClient.deletePath(String.format("%s/%s",ZkPath.CONFIG,Constants.GEODB_CONFIG));  log.info("Removed dbconfig and geodbconfig in zk global area successfully");}  }
class C{  public UpdatableStacking(UpdateableClassifier aggregatingClassifier,List<UpdateableClassifier> baseClassifiers){  if (baseClassifiers.size() < 2)   throw new IllegalArgumentException("base classifiers must contain at least 2 elements, not " + baseClassifiers.size());  this.aggregatingClassifier=aggregatingClassifier;  this.baseClassifiers=baseClassifiers;  boolean allRegressors=aggregatingClassifier instanceof UpdateableRegressor;  for (  UpdateableClassifier cl : baseClassifiers)   if (!(cl instanceof UpdateableRegressor))   allRegressors=false;  if (allRegressors) {    aggregatingRegressor=(UpdateableRegressor)aggregatingClassifier;    baseRegressors=(List)baseClassifiers;  }}  }
class C{  @Override public void doRun(int run) throws Exception {  if (getRawOutput()) {    if (m_ZipDest == null) {      m_ZipDest=new OutputZipper(m_OutputFile);    }  }  if (m_Instances == null) {    throw new Exception("No Instances set");  }  Object[] seKey=m_SplitEvaluator.getKey();  Object[] key=new Object[seKey.length + 2];  key[0]=Utils.backQuoteChars(m_Instances.relationName());  key[1]="" + run;  System.arraycopy(seKey,0,key,2,seKey.length);  if (m_ResultListener.isResultRequired(this,key)) {    Instances train=new Instances(m_Instances);    if (m_randomize) {      Random rand=new Random(run);      train.randomize(rand);    }    if (m_env == null) {      m_env=new Environment();    }    m_env.addVariable("RUN_NUMBER","" + run);    String filename=createFilename(train);    File file=new File(filename);    if (!file.exists()) {      throw new WekaException("Test set '" + filename + "' not found!");    }    Instances test=DataSource.read(filename);    if (train.numAttributes() == test.numAttributes()) {      test.setClassIndex(train.classIndex());    } else {      throw new WekaException("Train and test set (= " + filename + ") "+ "differ in number of attributes: "+ train.numAttributes()+ " != "+ test.numAttributes());    }    if (!train.equalHeaders(test)) {      throw new WekaException("Train and test set (= " + filename + ") "+ "are not compatible:\n"+ train.equalHeadersMsg(test));    }    try {      Object[] seResults=m_SplitEvaluator.getResult(train,test);      Object[] results=new Object[seResults.length + 1];      results[0]=getTimestamp();      System.arraycopy(seResults,0,results,1,seResults.length);      if (m_debugOutput) {        String resultName=("" + run + "."+ Utils.backQuoteChars(train.relationName())+ "."+ m_SplitEvaluator.toString()).replace(' ','_');        resultName=Utils.removeSubstring(resultName,"weka.classifiers.");        resultName=Utils.removeSubstring(resultName,"weka.filters.");        resultName=Utils.removeSubstring(resultName,"weka.attributeSelection.");        m_ZipDest.zipit(m_SplitEvaluator.getRawResultOutput(),resultName);      }      m_ResultListener.acceptResult(this,key,results);    } catch (    Exception e) {      throw e;    }  }}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:21.089 -0500",hash_original_method="EA506AD78E2AE8ACF234FE0610B9A575",hash_generated_method="DB77189C1A49E080001D8DECE7046C83") final boolean isShared(){  return nextWaiter == SHARED;}  }
class C{  private static void swap(float x[],int a,int b){  float t=x[a];  x[a]=x[b];  x[b]=t;}  }
class C{  public XMPPException(String message){  super(message);}  }
class C{  public static Region findRegion(File saveFolder,int dimension,int chunk_x,int chunk_z) throws IOException {  int rx, rz;  rx=chunk_x >> 5;  rz=chunk_z >> 5;  File dir;  if (dimension == 0)   dir=new File(saveFolder.getAbsolutePath(),"region"); else   dir=new File(saveFolder.getAbsolutePath(),"DIM" + dimension + "/region");  File file=new File(dir,"/r." + rx + "."+ rz+ ".mca");  if (!file.exists())   file=new File(dir,"/r." + rx + "."+ rz+ ".mcr");  return new Region(file);}  }
class C{  public int showModalDialog(){  wizardDialog.setModal(true);  wizardDialog.pack();  wizardDialog.setLocationRelativeTo(null);  wizardDialog.setVisible(true);  return returnCode;}  }
class C{  public File createPDF(File file){  return null;}  }
class C{  private static List<String> calculateBundleNames(String baseName,Locale locale){  final List<String> result=new ArrayList<String>(3);  final String language=locale.getLanguage();  final int languageLength=language.length();  final String country=locale.getCountry();  final int countryLength=country.length();  final String variant=locale.getVariant();  final int variantLength=variant.length();  result.add(0,baseName);  if (languageLength + countryLength + variantLength == 0) {    return result;  }  final StringBuilder temp=new StringBuilder(baseName);  temp.append('_');  temp.append(language);  if (languageLength > 0) {    result.add(0,temp.toString());  }  if (countryLength + variantLength == 0) {    return result;  }  temp.append('_');  temp.append(country);  if (countryLength > 0) {    result.add(0,temp.toString());  }  if (variantLength == 0) {    return result;  }  temp.append('_');  temp.append(variant);  result.add(0,temp.toString());  return result;}  }
class C{  public T caseExecution(Execution object){  return null;}  }
class C{  public static JavaClassAndMethod findMethod(JavaClass[] classList,String methodName,String methodSig,JavaClassAndMethodChooser chooser){  JavaClassAndMethod m=null;  for (  JavaClass cls : classList) {    if ((m=findMethod(cls,methodName,methodSig,chooser)) != null) {      break;    }  }  return m;}  }
class C{  public final void add(MapItemValue miv){  if (len >= items.length) {    items=LazyMap.grow(items);  }  items[len]=miv;  len++;}  }
class C{  public static String replaceAll(String source,String pattern,String replace){  StringBuilder sb=new StringBuilder();  int idx=0;  String workingSource=source;  idx=workingSource.indexOf(pattern);  if (idx == -1) {    return source;  }  while (idx != -1) {    sb.append(workingSource.substring(0,idx));    sb.append(replace);    workingSource=workingSource.substring(idx + pattern.length());    idx=workingSource.indexOf(pattern);  }  sb.append(workingSource);  return sb.toString();}  }
class C{  public static Integer createInteger(String str){  if (str == null) {    return null;  }  return Integer.decode(str);}  }
class C{  protected TextAttribute(String name){  super(name);}  }
class C{  private static void vecswap(char[] x,int a,int b,int n){  for (int i=0; i < n; i++, a++, b++)   swap(x,a,b);}  }
class C{  private String parseRaidLevel(String raidLevel){  String result=null;  _logger.debug("Raid Level recived from hds :{}",raidLevel);  if (raidLevel != null && raidLevel.length() > 4 && raidLevel.contains("(")) {    result=raidLevel.substring(0,raidLevel.indexOf("("));    if (result.contains("+")) {      result=new StringBuilder(result).deleteCharAt(result.indexOf("+")).toString();    }  }  _logger.debug("Raid Level after parsing :{}",result);  return result;}  }
class C{  private void save(){  try {    validateServer();    validateIdentity();    if (server == null) {      addServer();    } else {      updateServer();    }    setResult(RESULT_OK);    finish();  } catch (  ValidationException e) {    Toast.makeText(this,e.getMessage(),Toast.LENGTH_SHORT).show();  }  if (nickservCheckbox.isChecked()) {    authentication.setNickservPassword(saslPasswordEditText.toString());  } else   if (saslCheckbox.isChecked()) {    authentication.setSaslUsername(saslUsernameEditText.toString());    authentication.setSaslPassword(saslPasswordEditText.toString());  }}  }
class C{  public void drawResultBitmap(Bitmap barcode){  resultBitmap=barcode;  invalidate();}  }
class C{  public Joiner pushSet(String alias){  if (mapBuilder == null) {    mapBuilder=new MapBuilder(this);  }  mapBuilder.addTerm(MapBuilderTermType.SET,lookupAlias(alias),alias);  return this;}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  public TreeNode findChild(String name){  if (children == null)   return (null);  for (  TreeNode item : children) {    if (name.equals(item.getName()))     return (item);  }  return (null);}  }
class C{  private boolean isFileNull(Player player){  if (editedFile == null) {    Messages.GAME_FILE_NULL.send(player);    return true;  }  return false;}  }
class C{  @Override public void clearCache(){  lastC=-1;}  }
class C{  public void visitLineNumber(int line,Label start){  if (mv != null) {    mv.visitLineNumber(line,start);  }}  }
class C{  public void readFromNBT(final NBTTagCompound nbt){  for (int index=0; index < tileEntity.getSizeInventory(); index++) {    final ItemStack stack=tileEntity.getStackInSlot(index);    if (stack == null) {      if (modules[index] != null) {        modules[index].onDisposed();      }      modules[index]=null;      continue;    }    final Face face=Face.VALUES[index];    final ModuleProvider provider=ModuleAPI.getProviderFor(stack,tileEntity,face);    if (provider == null) {      if (modules[index] != null) {        modules[index].onDisposed();      }      modules[index]=null;      continue;    }    final Module module=provider.createModule(stack,tileEntity,face);    modules[index]=module;  }  final NBTTagList modulesNbt=nbt.getTagList(TAG_MODULES,Constants.NBT.TAG_COMPOUND);  final int moduleCount=Math.min(modulesNbt.tagCount(),modules.length);  for (int i=0; i < moduleCount; i++) {    if (modules[i] != null) {      modules[i].readFromNBT(modulesNbt.getCompoundTagAt(i));    }  }  if (nbt.hasKey(TAG_KEY_MS) && nbt.hasKey(TAG_KEY_LS)) {    lock=Optional.of(new UUID(nbt.getLong(TAG_KEY_MS),nbt.getLong(TAG_KEY_LS)));  } else {    lock=Optional.empty();  }}  }
class C{  public static Sector fromUTMRectangle(int zone,String hemisphere,double minEasting,double maxEasting,double minNorthing,double maxNorthing){  if (zone < 1 || zone > 60) {    String message=Logging.getMessage("generic.ZoneIsInvalid",zone);    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (!AVKey.NORTH.equals(hemisphere) && !AVKey.SOUTH.equals(hemisphere)) {    String message=Logging.getMessage("generic.HemisphereIsInvalid",hemisphere);    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  LatLon ll=UTMCoord.locationFromUTMCoord(zone,hemisphere,minEasting,minNorthing,null);  LatLon lr=UTMCoord.locationFromUTMCoord(zone,hemisphere,maxEasting,minNorthing,null);  LatLon ur=UTMCoord.locationFromUTMCoord(zone,hemisphere,maxEasting,maxNorthing,null);  LatLon ul=UTMCoord.locationFromUTMCoord(zone,hemisphere,minEasting,maxNorthing,null);  return boundingSector(Arrays.asList(ll,lr,ur,ul));}  }
class C{  private boolean handleSpecialTTEFunctions(JSType type,String propName,boolean isStatic,Set<String> classTemplateTypeNames){  FunctionType ftype=type.toMaybeFunctionType();  if (ftype == null)   return false;  boolean hasTTE=false;  for (  TemplateType templateKey : ftype.getTemplateTypeMap().getTemplateKeys()) {    if (templateKey.getTypeTransformation() != null) {      hasTTE=true;      break;    }  }  if (!hasTTE)   return false;  String templateTypeSig=isStatic ? getSignatureForStaticTTEFn(propName,ftype) : getSignatureForInstanceTTEFn(propName,classTemplateTypeNames,ftype);  if (templateTypeSig == null) {    emit("/* function had TTE, but not a known translation. Emitted type is likely wrong. */");    emitBreak();    return false;  }  emit(templateTypeSig);  emitBreak();  return true;}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  public static void main(String[] args) throws Exception {  new LaunchDiagnosticTool().start(args);}  }
class C{  private void savePolygons(){  final String polyName=new FileSave("Where To Save Polygons.txt ?","polygons.txt",s_mapFolderLocation).getPathString();  try {    if (polyName == null) {      return;    }    final FileOutputStream out=new FileOutputStream(polyName);    PointFileReaderWriter.writeOneToManyPolygons(out,m_polygons);    out.flush();    out.close();    System.out.println("Data written to :" + new File(polyName).getCanonicalPath());  } catch (  final Exception ex) {    ClientLogger.logQuietly("file save name: " + polyName,ex);  }}  }
class C{  public final int lastIndexOf(char ch,int start){  if (_length <= start)   start=_length - 1;  char[] buffer=_buffer;  int offset=_offset;  for (; start >= 0; start--) {    if (buffer[start + offset] == ch)     return start;  }  return -1;}  }
class C{  public LoaderClassPath(ClassLoader cl){  clref=new WeakReference(cl);}  }
class C{  public PillionSeatCargoBay(double space,int doors){  totalSpace=(int)(space / 0.025);  weight=space;  currentSpace=(int)(space / 0.025);  this.doors=doors;}  }
class C{  public Compactor withDefaultCompactionMode(Compaction.Mode mode){  Assert.notNull(mode,"mode");  Assert.argNot(mode,mode == Compaction.Mode.DEFAULT,"DEFAULT cannot be the default compaction mode");  this.defaultCompactionMode=mode;  return this;}  }
class C{  boolean validateTimeReference(int actionType,String ref){  if (ref == null || ref.trim().length() == 0) {    displayBadNumberReference(actionType);    return false;  }  try {    return validateTime(actionType,Float.valueOf(ref).floatValue());  } catch (  NumberFormatException e) {    String memRef=ref;    if (ref.length() > 1 && ref.charAt(0) == '@') {      memRef=ref.substring(1);    }    if (!confirmIndirectMemory(memRef)) {      return false;    }    memRef=validateMemoryReference(memRef);    if (memRef != null) {      Memory m=InstanceManager.memoryManagerInstance().getByUserName(memRef);      if (m == null) {        m=InstanceManager.memoryManagerInstance().getBySystemName(memRef);      }      try {        validateTime(actionType,Float.valueOf((String)m.getValue()).floatValue());      } catch (      NumberFormatException ex) {        javax.swing.JOptionPane.showMessageDialog(editConditionalFrame,java.text.MessageFormat.format(rbx.getString("Error24"),memRef),Bundle.getMessage("WarningTitle"),javax.swing.JOptionPane.WARNING_MESSAGE);      }      return true;    }    displayBadNumberReference(actionType);  }  return false;}  }
class C{  public void generateFeatures(){  if (features != null) {    features.clear();  } else {    features=new ArrayList();  }  if (fmap != null) {    fmap.clear();  } else {    fmap=new HashMap();  }  if (currentFeatures != null) {    currentFeatures.clear();  } else {    currentFeatures=new ArrayList();  }  if (data.trnData == null || dict.dict == null) {    System.out.println("No data or dictionary for generating features");    return;  }  for (int i=0; i < data.trnData.size(); i++) {    Observation obsr=(Observation)data.trnData.get(i);    for (int j=0; j < obsr.cps.length; j++) {      Element elem=null;      CountFIdx cntFIdx=null;      elem=(Element)dict.dict.get(new Integer(obsr.cps[j]));      if (elem != null) {        if (elem.count <= option.cpRareThreshold) {          continue;        }        cntFIdx=(CountFIdx)elem.lbCntFidxes.get(new Integer(obsr.humanLabel));        if (cntFIdx != null) {          if (cntFIdx.count <= option.fRareThreshold) {            continue;          }        } else {          continue;        }      } else {        continue;      }      Feature f=new Feature(obsr.humanLabel,obsr.cps[j]);      f.strId2Idx(fmap);      if (f.idx < 0) {        addFeature(f);        cntFIdx.fidx=f.idx;        elem.chosen=1;      }    }  }  option.numFeatures=features.size();}  }
class C{  public boolean isBiometricWeakEverChosen(){  return getBoolean(BIOMETRIC_WEAK_EVER_CHOSEN_KEY,false);}  }
class C{  @Override public PLVertex clone(){  return new PLVertex(x,y,z);}  }
class C{  public static void validateCompositeData(CompositeData cd){  if (cd == null) {    throw new NullPointerException("Null CompositeData");  }  if (!isTypeMatched(monitorInfoCompositeType,cd.getCompositeType())) {    throw new IllegalArgumentException("Unexpected composite type for MonitorInfo");  }}  }
class C{  public boolean addAll(Collection collection){  throw new UnsupportedOperationException("Add all not implemented");}  }
class C{  public void cursorDown(double units){  this.cursor=this.cursor + units;}  }
class C{  public void clearWarnings() throws SQLException {synchronized (getSynchronizationObject()) {    firstWarning=null;  }}  }
class C{  private static int clampShiftAmt(int size,long shiftAmt){  return (int)(shiftAmt & (size - 1));}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypesPackage.PARAMETER__TYPE_SPECIFIER:    setTypeSpecifier((TypeSpecifier)null);  return;case TypesPackage.PARAMETER__NAME:setName(NAME_EDEFAULT);return;case TypesPackage.PARAMETER__ANNOTATIONS:getAnnotations().clear();return;case TypesPackage.PARAMETER__OWNING_OPERATION:setOwningOperation((Operation)null);return;}super.eUnset(featureID);}  }
class C{  public boolean hasBeenInvited(String playerName){  return openInvites.get(playerName) != null;}  }
class C{  public void deleteXmlEntity(final XmlEntity xmlEntity,String[] groups) throws Exception {  Region<String,Configuration> configRegion=getConfigurationRegion();  if (groups == null) {    Set<String> groupSet=configRegion.keySet();    groups=groupSet.toArray(new String[groupSet.size()]);  }  for (  String group : groups) {    Configuration configuration=(Configuration)configRegion.get(group);    if (configuration != null) {      String xmlContent=configuration.getCacheXmlContent();      if (xmlContent != null && !xmlContent.isEmpty()) {        Document doc=createAndUpgradeDocumentFromXml(xmlContent);        XmlUtils.deleteNode(doc,xmlEntity);        configuration.setCacheXmlContent(XmlUtils.prettyXml(doc));        configRegion.put(group,configuration);        writeConfig(configuration);      }    }  }}  }
class C{  public String toValue(){  return value;}  }
class C{  public char next(){  return pos < in.length() ? in.charAt(pos++) : '\0';}  }
class C{  public void testMetricsStatisticsEnabled() throws Exception {  createCaches(true);  populateCacheData(cache1,ENTRY_CNT_CACHE1);  populateCacheData(cache2,ENTRY_CNT_CACHE2);  readCacheData(cache1,ENTRY_CNT_CACHE1);  readCacheData(cache2,ENTRY_CNT_CACHE2);  awaitMetricsUpdate();  Collection<ClusterNode> nodes=grid(0).cluster().forRemotes().nodes();  for (  ClusterNode node : nodes) {    Map<Integer,CacheMetrics> metrics=((TcpDiscoveryNode)node).cacheMetrics();    assertNotNull(metrics);    assertFalse(metrics.isEmpty());  }  assertMetrics(cache1);  assertMetrics(cache2);  destroyCaches();}  }
class C{  public static long swapEndian(final long l){  return ((l & 0xff) << 56) | ((l & 0xff00) << 40) | ((l & 0xff0000) << 24)| ((l & 0xff000000L) << 8)| ((l >>> 8) & 0xff000000L)| ((l >>> 24) & 0xff0000)| ((l >>> 40) & 0xff00)| ((l >>> 56) & 0xff);}  }
class C{  @Override protected Object doConvert(String value){  return Integer.valueOf(value);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override protected void onStop(){  super.onStop();  Log.d(TAG,"onStop() - the activity is no longer visible (it is now \"stopped\")");}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private static long bit(int bitIndex){  return 1L << (bitIndex & BIT_INDEX_MASK);}  }
class C{  public boolean hasData(){  if (!canFlushWriter || ((JspWriterImpl)jspWriter).hasData()) {    return true;  }  return false;}  }
class C{  public cudaIpcEventHandle(){}  }
class C{  public boolean isSignatureValid(){  return ECKey.verify(Utils.doubleDigest(content),signature,params.getAlertSigningKey());}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public boolean hasOverlappingRendering(){  return mNeedsOffscreenAlphaCompositing;}  }
class C{  public boolean evaluate(Object valueObj,String value1){  boolean result=false;  if (valueObj instanceof Number)   result=compareNumber((Number)valueObj,value1,getValue()); else   result=compareString(valueObj,value1,getValue());  return result;}  }
class C{  protected List createStackedValueList(CategoryDataset dataset,Comparable category,int[] includedRows,double base,boolean asPercentages){  List result=new ArrayList();  double posBase=base;  double negBase=base;  double total=0.0;  if (asPercentages) {    total=DataUtilities.calculateColumnTotal(dataset,dataset.getColumnIndex(category),includedRows);  }  int baseIndex=-1;  int rowCount=includedRows.length;  for (int i=0; i < rowCount; i++) {    int r=includedRows[i];    Number n=dataset.getValue(dataset.getRowKey(r),category);    if (n == null) {      continue;    }    double v=n.doubleValue();    if (asPercentages) {      v=v / total;    }    if ((v > 0.0) || (!this.ignoreZeroValues && v >= 0.0)) {      if (baseIndex < 0) {        result.add(new Object[]{null,new Double(base)});        baseIndex=0;      }      posBase=posBase + v;      result.add(new Object[]{new Integer(r),new Double(posBase)});    } else     if (v < 0.0) {      if (baseIndex < 0) {        result.add(new Object[]{null,new Double(base)});        baseIndex=0;      }      negBase=negBase + v;      result.add(0,new Object[]{new Integer(-r - 1),new Double(negBase)});      baseIndex++;    }  }  return result;}  }
class C{  public static ClusterSearchShardsRequest clusterSearchShardsRequest(){  return new ClusterSearchShardsRequest();}  }
class C{  public Expression(final String word,final String typeString){  original=word;  normalized=word;  mainWord=word;  type=new ExpressionType(typeString);}  }
class C{  @Override public List<GenericValue> findAll(String entityName,boolean useCache) throws GenericEntityException {  return this.findList(entityName,null,null,null,null,useCache);}  }
class C{  public Builder create(){  proceed();  return this;}  }
class C{  public boolean isExemptPackage(Identifier id){  if (exemptPackages == null) {    setExemptPackages();  }  return exemptPackages.contains(id);}  }
class C{  private void jbInit() throws Exception {  CompiereColor.setBackground(panel);  newBorder=new TitledBorder("");  accountBorder=new TitledBorder("");  mainPanel.setLayout(mainLayout);  newPanel.setBorder(newBorder);  newPanel.setLayout(newLayout);  newBorder.setTitle(Msg.getMsg(Env.getCtx(),"ChargeNewAccount"));  valueLabel.setText(Msg.translate(Env.getCtx(),"Value"));  isExpense.setSelected(true);  isExpense.setText(Msg.getMsg(Env.getCtx(),"Expense"));  nameLabel.setText(Msg.translate(Env.getCtx(),"Name"));  nameField.setColumns(20);  valueField.setColumns(10);  newButton.setText(Msg.getMsg(Env.getCtx(),"Create") + " " + Util.cleanAmp(Msg.getMsg(Env.getCtx(),"New")));  newButton.addActionListener(this);  accountPanel.setBorder(accountBorder);  accountPanel.setLayout(accountLayout);  accountBorder.setTitle(Msg.getMsg(Env.getCtx(),"ChargeFromAccount"));  accountButton.setText(Msg.getMsg(Env.getCtx(),"Create") + " " + Msg.getMsg(Env.getCtx(),"From")+ " "+ Msg.getElement(Env.getCtx(),"Account_ID"));  accountButton.addActionListener(this);  accountOKPanel.setLayout(accountOKLayout);  accountOKLayout.setAlignment(FlowLayout.RIGHT);  confirmPanel.addActionListener(this);  mainPanel.add(newPanel,BorderLayout.NORTH);  newPanel.add(valueLabel,new GridBagConstraints(0,0,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  newPanel.add(valueField,new GridBagConstraints(1,0,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,0,5,5),0,0));  newPanel.add(nameLabel,new GridBagConstraints(0,1,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  newPanel.add(nameField,new GridBagConstraints(1,1,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,0,5,5),0,0));  newPanel.add(isExpense,new GridBagConstraints(2,0,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  newPanel.add(newButton,new GridBagConstraints(2,1,1,1,0.0,0.0,GridBagConstraints.CENTER,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  mainPanel.add(accountPanel,BorderLayout.CENTER);  accountPanel.add(accountOKPanel,BorderLayout.SOUTH);  accountOKPanel.add(accountButton,null);  accountPanel.add(dataPane,BorderLayout.CENTER);  dataPane.getViewport().add(dataTable,null);}  }
class C{  public Set<String> find(T object){  if (!locations.containsKey(object)) {    locations.put(object,new HashSet<>());  }  return Collections.unmodifiableSet(locations.get(object));}  }
class C{  public void loadRoles(ClassLoader cl) throws ObjectStoreConfigException {  try {    ClassLoader first=RoleClassLoader.class.getClassLoader();    Set<URL> loaded;    loaded=load(new CheckForAnnotation(first),first,"annotations",ANNOTATIONS,true,new HashSet<URL>());    loaded=load(new CheckForAnnotation(cl),cl,"annotations",ANNOTATIONS,true,loaded);    loaded=load(new CheckForConcept(first),first,"concepts",CONCEPTS,true,new HashSet<URL>());    loaded=load(new CheckForConcept(cl),cl,"concepts",CONCEPTS,true,loaded);    loaded=load(new CheckForBehaviour(first),first,"behaviours",BEHAVIOURS,false,new HashSet<URL>());    loaded=load(new CheckForBehaviour(cl),cl,"behaviours",BEHAVIOURS,false,loaded);    scanConceptsWithReflections();    Collection<Class<?>> concepts=roleMapper.getConceptClasses();    for (    Class<?> conceptClass : concepts) {      logger.debug("Registered concept class " + conceptClass.getCanonicalName());    }  } catch (  ObjectStoreConfigException e) {    throw e;  }catch (  Exception e) {    throw new ObjectStoreConfigException(e);  }}  }
class C{  @Override public InlineInfo shouldInlineInvoke(GraphBuilderContext b,ResolvedJavaMethod method,ValueNode[] args){  ResolvedJavaMethod subst=getSubstitutionMethod(method);  if (subst != null) {    if (b.parsingIntrinsic() || InlineDuringParsing.getValue() || InlineIntrinsicsDuringParsing.getValue()) {      return createIntrinsicInlineInfo(subst,bytecodeProvider);    }    return null;  }  if (b.parsingIntrinsic()) {    if (hasGeneratedInvocationPluginAnnotation(method)) {      throw new GraalError("%s should have been handled by a %s",method.format("%H.%n(%p)"),GeneratedInvocationPlugin.class.getSimpleName());    }    if (hasGenericInvocationPluginAnnotation(method)) {      throw new GraalError("%s should have been handled by %s",method.format("%H.%n(%p)"),WordOperationPlugin.class.getSimpleName());    }    assert b.getDepth() < MAX_GRAPH_INLINING_DEPTH : "inlining limit exceeded";    if (method.getName().startsWith("$jacoco")) {      throw new GraalError("Found call to JaCoCo instrumentation method " + method.format("%H.%n(%p)") + ". Placing \"//JaCoCo Exclude\" anywhere in "+ b.getMethod().getDeclaringClass().getSourceFileName()+ " should fix this.");    }    return createIntrinsicInlineInfo(method,bytecodeProvider);  } else {    assert method.getAnnotation(NodeIntrinsic.class) == null : String.format("@%s method %s must only be called from within a replacement%n%s",NodeIntrinsic.class.getSimpleName(),method.format("%h.%n"),b);  }  return null;}  }
class C{  private void createForwarder(){  forwarder=new Forwarder(vertx,client,rule,storage,loggingResourceManager,monitoringHandler,userProfilePath);}  }
class C{  public static void longClickView(InstrumentationTestCase test,View v){  int[] xy=new int[2];  v.getLocationOnScreen(xy);  final int viewWidth=v.getWidth();  final int viewHeight=v.getHeight();  final float x=xy[0] + (viewWidth / 2.0f);  float y=xy[1] + (viewHeight / 2.0f);  Instrumentation inst=test.getInstrumentation();  long downTime=SystemClock.uptimeMillis();  long eventTime=SystemClock.uptimeMillis();  MotionEvent event=MotionEvent.obtain(downTime,eventTime,MotionEvent.ACTION_DOWN,x,y,0);  inst.sendPointerSync(event);  inst.waitForIdleSync();  eventTime=SystemClock.uptimeMillis();  final int touchSlop=ViewConfiguration.get(v.getContext()).getScaledTouchSlop();  event=MotionEvent.obtain(downTime,eventTime,MotionEvent.ACTION_MOVE,x + touchSlop / 2,y + touchSlop / 2,0);  inst.sendPointerSync(event);  inst.waitForIdleSync();  try {    Thread.sleep((long)(ViewConfiguration.getLongPressTimeout() * 1.5f));  } catch (  InterruptedException e) {    e.printStackTrace();  }  eventTime=SystemClock.uptimeMillis();  event=MotionEvent.obtain(downTime,eventTime,MotionEvent.ACTION_UP,x,y,0);  inst.sendPointerSync(event);  inst.waitForIdleSync();}  }
class C{  protected void disable(){  enabled.compareAndSet(true,false);}  }
class C{  private boolean isImmutable(final Class<?> clz){  final Boolean isIm=immutables.get(clz);  if (isIm != null)   return isIm;  if (considerImmutable(clz))   return true;  final Class<?> immutableAnnotation=getImmutableAnnotation();  for (  final Annotation annotation : clz.getDeclaredAnnotations()) {    if (annotation.annotationType() == immutableAnnotation) {      immutables.put(clz,Boolean.TRUE);      return true;    }  }  Class<?> c=clz.getSuperclass();  while (c != null && c != Object.class) {    for (    final Annotation annotation : c.getDeclaredAnnotations()) {      if (annotation.annotationType() == Immutable.class) {        final Immutable im=(Immutable)annotation;        if (im.subClass()) {          immutables.put(clz,Boolean.TRUE);          return true;        }      }    }    c=c.getSuperclass();  }  immutables.put(clz,Boolean.FALSE);  return false;}  }
class C{  public XMLSignature(Element element,String baseURI,boolean secureValidation) throws XMLSignatureException, XMLSecurityException {  super(element,baseURI);  Element signedInfoElem=XMLUtils.getNextElement(element.getFirstChild());  if (signedInfoElem == null) {    Object exArgs[]={Constants._TAG_SIGNEDINFO,Constants._TAG_SIGNATURE};    throw new XMLSignatureException("xml.WrongContent",exArgs);  }  this.signedInfo=new SignedInfo(signedInfoElem,baseURI,secureValidation);  signedInfoElem=XMLUtils.getNextElement(element.getFirstChild());  this.signatureValueElement=XMLUtils.getNextElement(signedInfoElem.getNextSibling());  if (signatureValueElement == null) {    Object exArgs[]={Constants._TAG_SIGNATUREVALUE,Constants._TAG_SIGNATURE};    throw new XMLSignatureException("xml.WrongContent",exArgs);  }  Attr signatureValueAttr=signatureValueElement.getAttributeNodeNS(null,"Id");  if (signatureValueAttr != null) {    signatureValueElement.setIdAttributeNode(signatureValueAttr,true);  }  Element keyInfoElem=XMLUtils.getNextElement(signatureValueElement.getNextSibling());  if (keyInfoElem != null && keyInfoElem.getNamespaceURI().equals(Constants.SignatureSpecNS) && keyInfoElem.getLocalName().equals(Constants._TAG_KEYINFO)) {    this.keyInfo=new KeyInfo(keyInfoElem,baseURI);    this.keyInfo.setSecureValidation(secureValidation);  }  Element objectElem=XMLUtils.getNextElement(signatureValueElement.getNextSibling());  while (objectElem != null) {    Attr objectAttr=objectElem.getAttributeNodeNS(null,"Id");    if (objectAttr != null) {      objectElem.setIdAttributeNode(objectAttr,true);    }    NodeList nodes=objectElem.getChildNodes();    int length=nodes.getLength();    for (int i=0; i < length; i++) {      Node child=nodes.item(i);      if (child.getNodeType() == Node.ELEMENT_NODE) {        Element childElem=(Element)child;        String tag=childElem.getLocalName();        if (tag.equals("Manifest")) {          new Manifest(childElem,baseURI);        } else         if (tag.equals("SignatureProperties")) {          new SignatureProperties(childElem,baseURI);        }      }    }    objectElem=XMLUtils.getNextElement(objectElem.getNextSibling());  }  this.state=MODE_VERIFY;}  }
class C{  public String removeOldClassTipText(){  return "Whether to remove the old class attribute.";}  }
class C{  @Override public void discover(AccessProfile accessProfile) throws VNXeException {  URI storageSystemURI=accessProfile.getSystemId();  StorageSystem viprStorageSystem=null;  String detailedStatusMessage="Unknown Status";  try {    _logger.info("Access Profile Details :  IpAddress : {}, PortNumber : {}",accessProfile.getIpAddress(),accessProfile.getPortNumber());    if (null != accessProfile.getnamespace() && (accessProfile.getnamespace().equals(StorageSystem.Discovery_Namespaces.UNMANAGED_VOLUMES.toString()) || accessProfile.getnamespace().equals(StorageSystem.Discovery_Namespaces.UNMANAGED_FILESYSTEMS.toString()))) {      discoverUnmanagedObjects(accessProfile);    } else {      viprStorageSystem=_dbClient.queryObject(StorageSystem.class,storageSystemURI);      _logger.info(String.format("Discover Vnxe storage system %s at IP:%s, PORT:%s",storageSystemURI.toString(),accessProfile.getIpAddress(),accessProfile.getPortNumber()));      VNXeApiClient client=getVnxeClient(accessProfile);      _logger.debug("Got handle to Vnxe service client");      _logger.info("Discovering storage system properties.");      VNXeStorageSystem system=client.getStorageSystem();      boolean isFASTVPEnabled=false;      if (system != null) {        viprStorageSystem.setSerialNumber(system.getSerialNumber());        String guid=NativeGUIDGenerator.generateNativeGuid(viprStorageSystem);        viprStorageSystem.setNativeGuid(guid);        viprStorageSystem.setLabel(guid);        viprStorageSystem.setCompatibilityStatus(DiscoveredDataObject.CompatibilityStatus.COMPATIBLE.name());        viprStorageSystem.setReachableStatus(true);        isFASTVPEnabled=client.isFASTVPEnabled();        viprStorageSystem.setAutoTieringEnabled(isFASTVPEnabled);        StringSet supportedActions=new StringSet();        supportedActions.add(StorageSystem.AsyncActions.CreateElementReplica.name());        supportedActions.add(StorageSystem.AsyncActions.CreateGroupReplica.name());        viprStorageSystem.setSupportedAsynchronousActions(supportedActions);        StringSet supportedReplica=new StringSet();        supportedReplica.add(StorageSystem.SupportedReplicationTypes.LOCAL.name());        viprStorageSystem.setSupportedReplicationTypes(supportedReplica);        _dbClient.persistObject(viprStorageSystem);        _completer.statusPending(_dbClient,"Completed discovery of system properties");      } else {        _logger.error("Failed to retrieve VNXe system info!");        viprStorageSystem.setReachableStatus(false);      }      BasicSystemInfo info=client.getBasicSystemInfo();      if (info != null) {        viprStorageSystem.setFirmwareVersion(info.getSoftwareVersion());      }      StringSet arraySupportedProtocols=new StringSet();      Map<String,URI> nasServerIdMap=new HashMap<String,URI>();      Map<String,List<StorageHADomain>> nasServers=discoverNasServers(viprStorageSystem,client,nasServerIdMap,arraySupportedProtocols);      _logger.info("No of newly discovered NasServers {}",nasServers.get(NEW).size());      _logger.info("No of existing discovered NasServers {}",nasServers.get(EXISTING).size());      if (!nasServers.get(NEW).isEmpty()) {        _dbClient.createObject(nasServers.get(NEW));      }      if (!nasServers.get(EXISTING).isEmpty()) {        _dbClient.persistObject(nasServers.get(EXISTING));      }      _completer.statusPending(_dbClient,"Completed NAS Server discovery");      List<StoragePort> allExistingPorts=new ArrayList<StoragePort>();      List<StoragePort> allNewPorts=new ArrayList<StoragePort>();      Map<String,List<StoragePort>> ports=discoverFileStoragePorts(viprStorageSystem,client,nasServerIdMap);      if (ports.get(NEW) != null && !ports.get(NEW).isEmpty()) {        allNewPorts.addAll(ports.get(NEW));        _dbClient.createObject(ports.get(NEW));      }      if (ports.get(EXISTING) != null && !ports.get(EXISTING).isEmpty()) {        allExistingPorts.addAll(ports.get(EXISTING));        _dbClient.persistObject(ports.get(EXISTING));      }      _completer.statusPending(_dbClient,"Completed file ports discovery");      Map<String,URI> spIdMap=new HashMap<String,URI>();      Map<String,List<StorageHADomain>> sps=discoverStorageProcessors(viprStorageSystem,client,spIdMap);      if (!sps.get(NEW).isEmpty()) {        _dbClient.createObject(sps.get(NEW));      }      if (!sps.get(EXISTING).isEmpty()) {        _dbClient.persistObject(sps.get(EXISTING));      }      _completer.statusPending(_dbClient,"Completed storage processor discovery");      Map<String,List<StoragePort>> iscsiPorts=discoverIscsiPorts(viprStorageSystem,client,spIdMap);      boolean hasIscsiPorts=false;      if (iscsiPorts.get(NEW) != null && !iscsiPorts.get(NEW).isEmpty()) {        allNewPorts.addAll(iscsiPorts.get(NEW));        hasIscsiPorts=true;        _dbClient.createObject(iscsiPorts.get(NEW));      }      if (iscsiPorts.get(EXISTING) != null && !iscsiPorts.get(EXISTING).isEmpty()) {        allExistingPorts.addAll(iscsiPorts.get(EXISTING));        hasIscsiPorts=true;        _dbClient.persistObject(ports.get(EXISTING));      }      if (hasIscsiPorts) {        arraySupportedProtocols.add(StorageProtocol.Block.iSCSI.name());      }      _completer.statusPending(_dbClient,"Completed iscsi ports discovery");      Map<String,List<StoragePort>> fcPorts=discoverFcPorts(viprStorageSystem,client,spIdMap);      boolean hasFcPorts=false;      if (fcPorts.get(NEW) != null && !fcPorts.get(NEW).isEmpty()) {        allNewPorts.addAll(fcPorts.get(NEW));        hasFcPorts=true;        _dbClient.createObject(fcPorts.get(NEW));      }      if (fcPorts.get(EXISTING) != null && !fcPorts.get(EXISTING).isEmpty()) {        allExistingPorts.addAll(fcPorts.get(EXISTING));        hasFcPorts=true;        _dbClient.persistObject(ports.get(EXISTING));      }      if (hasFcPorts) {        arraySupportedProtocols.add(StorageProtocol.Block.FC.name());      }      _completer.statusPending(_dbClient,"Completed FC ports discovery");      List<StoragePort> allPorts=new ArrayList<StoragePort>(allNewPorts);      allPorts.addAll(allExistingPorts);      List<StoragePort> notVisiblePorts=DiscoveryUtils.checkStoragePortsNotVisible(allPorts,_dbClient,viprStorageSystem.getId());      if (notVisiblePorts != null && !notVisiblePorts.isEmpty()) {        allExistingPorts.addAll(notVisiblePorts);      }      _logger.info("Discovering storage pools.");      List<StoragePool> poolsToMatchWithVpool=new ArrayList<StoragePool>();      List<StoragePool> allPools=new ArrayList<StoragePool>();      Map<String,List<StoragePool>> pools=discoverStoragePools(viprStorageSystem,client,arraySupportedProtocols,poolsToMatchWithVpool);      _logger.info("No of newly discovered pools {}",pools.get(NEW).size());      _logger.info("No of existing discovered pools {}",pools.get(EXISTING).size());      if (!pools.get(NEW).isEmpty()) {        allPools.addAll(pools.get(NEW));        _dbClient.createObject(pools.get(NEW));        StoragePoolAssociationHelper.setStoragePoolVarrays(viprStorageSystem.getId(),pools.get(NEW),_dbClient);      }      if (!pools.get(EXISTING).isEmpty()) {        allPools.addAll(pools.get(EXISTING));        _dbClient.persistObject(pools.get(EXISTING));      }      List<StoragePool> notVisiblePools=DiscoveryUtils.checkStoragePoolsNotVisible(allPools,_dbClient,viprStorageSystem.getId());      if (notVisiblePools != null && !notVisiblePools.isEmpty()) {        poolsToMatchWithVpool.addAll(notVisiblePools);      }      StoragePortAssociationHelper.runUpdatePortAssociationsProcess(allNewPorts,allExistingPorts,_dbClient,_coordinator,poolsToMatchWithVpool);      _completer.statusPending(_dbClient,"Completed pool discovery");      if (isFASTVPEnabled) {        _logger.info("FASTVP is enabled");        HashMap<String,List<AutoTieringPolicy>> policies=discoverAutoTierPolicies(viprStorageSystem,client);        if (!policies.get(NEW).isEmpty()) {          _dbClient.createObject(policies.get(NEW));        }        if (!policies.get(EXISTING).isEmpty()) {          _dbClient.persistObject(policies.get(EXISTING));        }        HashMap<String,List<StorageTier>> tiers=discoverStorageTier(viprStorageSystem,client);        if (!tiers.get(NEW).isEmpty()) {          _dbClient.createObject(tiers.get(NEW));        }        if (!tiers.get(EXISTING).isEmpty()) {          _dbClient.persistObject(tiers.get(EXISTING));        }      }      detailedStatusMessage=String.format("Discovery completed successfully for Storage System: %s",storageSystemURI.toString());    }  } catch (  Exception e) {    detailedStatusMessage=String.format("Discovery failed for VNXe %s: %s",storageSystemURI.toString(),e.getLocalizedMessage());    _logger.error(detailedStatusMessage,e);    throw VNXeException.exceptions.discoveryError("Discovery error",e);  } finally {    if (viprStorageSystem != null) {      try {        viprStorageSystem.setLastDiscoveryStatusMessage(detailedStatusMessage);        _dbClient.persistObject(viprStorageSystem);      } catch (      DatabaseException ex) {        _logger.error("Error while persisting object to DB",ex);      }    }  }}  }
class C{  @Override public void createPartControl(Composite parent){  viewer=new TreeViewer(parent,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL);  viewer.getTree().setHeaderVisible(true);  TreeColumn column=new TreeColumn(viewer.getTree(),SWT.LEFT);  column.setText(NAME);  column.setWidth(150);  column=new TreeColumn(viewer.getTree(),SWT.LEFT);  column.setText(LOCATION);  column.setWidth(500);  viewer.setContentProvider(new GenericListViewContentProvider(this));  viewer.setLabelProvider(new GenericListViewLabelProvider());  viewer.setSorter(new NameSorter());  viewer.setInput(getViewSite());  makeActions();  hookContextMenu();  contributeToActionBars();}  }
class C{  public void clearPriorBlockReferences(){  mBlockRefs.clear();}  }
class C{  public static void initDHKeys(DistributionConfig config) throws Exception {  dhSKAlgo=config.getSecurityClientDHAlgo();  dhPrivateKey=null;  dhPublicKey=null;  if ((dhSKAlgo != null && dhSKAlgo.length() > 0) || securityService.isClientSecurityRequired()) {    KeyPairGenerator keyGen=KeyPairGenerator.getInstance("DH");    DHParameterSpec dhSpec=new DHParameterSpec(dhP,dhG,dhL);    keyGen.initialize(dhSpec);    KeyPair keypair=keyGen.generateKeyPair();    dhPrivateKey=keypair.getPrivate();    dhPublicKey=keypair.getPublic();    random=new SecureRandom();    byte[] someBytes=new byte[48];    random.nextBytes(someBytes);  }}  }
class C{  public void resetRecentStatistic(){  recentAccess.clear();}  }
class C{  @Override public boolean equals(Object obj){  if (obj instanceof MutableInteger) {    return i == ((MutableInteger)obj).i;  }  return false;}  }
class C{  public ColumnVector(final double... vector){  if (null == vector || 0 == vector.length) {    throw new IllegalArgumentException("vector must not be null and have a non-zero size");  }  this.size=vector.length;  this.vector=vector;  this.matrix=new DenseMatrix(this.size,1,this.vector);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:03.961 -0500",hash_original_method="C7EE76D8654D8C691124AB97A0520EED",hash_generated_method="D9D1C48A3F913A5F6D431A91482A34E1") private boolean processSetUpEventList(CommandDetails cmdDet,List<ComprehensionTlv> ctlvs){  CatLog.d(this,"process SetUpEventList");  return true;}  }
class C{  public void addLayerListener(LayerListener ll){  logger.fine("adding layer listener");  listeners.add(ll);  ll.setLayers(new LayerEvent(this,LayerEvent.ALL,getLayers()));  ll.setLayers(new LayerEvent(this,LayerEvent.ADD,getMapLayers()));}  }
class C{  public void createPictScenario10() throws Exception {  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-06-20 10:00:00"));  String supplierAdminId="Pict10Supplier";  VOOrganization supplier=orgSetup.createOrganization(basicSetup.getPlatformOperatorUserKey(),supplierAdminId,"Pict10SupplierOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_DE,OrganizationRoleType.TECHNOLOGY_PROVIDER,OrganizationRoleType.SUPPLIER);  VOUser supplierAdmin=orgSetup.getUser(supplierAdminId,true);  paymentSetup.createPaymentForSupplier(basicSetup.getPlatformOperatorUserKey(),supplierAdmin.getKey(),supplier);  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER,ROLE_TECHNOLOGY_MANAGER);  serviceSetup.importTechnicalServices(BaseAdmUmTest.TECHNICAL_SERVICE_EXAMPLE2_ASYNC_XML);  VOTechnicalService example2TechService=serviceSetup.getTechnicalService(VOTechServiceFactory.TECH_SERVICE_EXAMPLE2_ASYNC_ID);  setCutOffDay(supplierAdmin.getKey(),1);  String customerAdminId="Pict10DiscountedCustomer";  VOOrganization customer=orgSetup.registerCustomer("Pict10DiscountedCustomerOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_UK,customerAdminId,supplierMarketplace.getMarketplaceId(),supplier.getOrganizationId());  VOUser customerAdmin=orgSetup.getUser(customerAdminId,true);  orgSetup.updateCustomerDiscount(customer,new BigDecimal("10.00"),DateTimeHandling.calculateMillis("2013-06-30 00:00:00"),DateTimeHandling.calculateMillis("2013-08-30 00:00:00"));  orgSetup.saveAllVats(supplierAdmin.getKey(),VOVatRateFactory.newVOVatRate(new BigDecimal("10.00")),Arrays.asList(VOVatRateFactory.newVOCountryVatRate(new BigDecimal("20.00"),TestOrganizationSetup.ORGANIZATION_DOMICILE_UK),VOVatRateFactory.newVOCountryVatRate(new BigDecimal("30.00"),TestOrganizationSetup.ORGANIZATION_DOMICILE_DE)),Arrays.asList(VOVatRateFactory.newVOOrganizationVatRate(new BigDecimal("50.00"),customer)));  orgSetup.createMarketingPermission(supplierAdmin.getKey(),supplier.getOrganizationId(),example2TechService);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-06-22 10:00:00"));  VOServiceDetails freeTemplate=serviceSetup.createAndPublishMarketableService(supplierAdmin.getKey(),"PICT10_FREE",TestService.EXAMPLE2_ASYNC,TestPriceModel.FREE,example2TechService,supplierMarketplace);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-06-23 10:00:00"));  VOServiceDetails unitServTemplate=serviceSetup.createAndPublishMarketableService(supplierAdmin.getKey(),"PICT10_UNIT_MONTH_SERVICE",TestService.EXAMPLE2_ASYNC,TestPriceModel.EXAMPLE_PICT10_UNIT_MONTH,example2TechService,supplierMarketplace);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-06-24 10:00:00"));  VOServiceDetails unitServTemplate2=serviceSetup.createAndPublishMarketableService(supplierAdmin.getKey(),"PICT10_2_UNIT_MONTH_SERVICE",TestService.EXAMPLE2_ASYNC,TestPriceModel.EXAMPLE_PICT10_2_UNIT_MONTH,example2TechService,supplierMarketplace);  freeTemplate=serviceSetup.registerCompatibleServices(supplierAdmin.getKey(),freeTemplate,unitServTemplate);  unitServTemplate=serviceSetup.registerCompatibleServices(supplierAdmin.getKey(),unitServTemplate,unitServTemplate2);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-06-25 10:00:00"));  VOServiceDetails serviceFreeDetails=serviceSetup.activateMarketableService(freeTemplate);  VOServiceDetails serviceUnitDetails=serviceSetup.activateMarketableService(unitServTemplate);  VOServiceDetails serviceUnitDetails2=serviceSetup.activateMarketableService(unitServTemplate2);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-06-30 09:00:00"));  VORoleDefinition role=VOServiceFactory.getRole(serviceFreeDetails,"ADMIN");  serviceFreeDetails=serviceSetup.getServiceDetails(supplierAdmin.getKey(),serviceFreeDetails);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("PICT_TEST_10",serviceFreeDetails,customerAdmin,role);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-06-30 10:00:00"));  subDetails=subscrSetup.completeAsyncSubscription(supplierAdmin.getKey(),customerAdmin,subDetails);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-07-05 12:00:00"));  subDetails=subscrSetup.revokeUser(customerAdmin,subDetails.getSubscriptionId());  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-07-10 12:00:00"));  role=VOServiceFactory.getRole(serviceFreeDetails,"ADMIN");  subDetails=subscrSetup.addUser(customerAdmin,role,subDetails.getSubscriptionId());  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-07-13 00:00:00"));  VOSubscriptionDetails upgradedSubDetails=subscrSetup.upgradeSubscription(subDetails,serviceUnitDetails);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-07-14 00:00:00"));  upgradedSubDetails=subscrSetup.completeAsyncUpgradeSubscription(supplierAdmin.getKey(),customerAdmin,upgradedSubDetails);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  upgradedSubDetails=subscrSetup.modifyParameterForSubscription(upgradedSubDetails,DateTimeHandling.calculateMillis("2013-07-14 09:00:00"),"BOOLEAN_PARAMETER","true");  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-07-14 10:00:00"));  upgradedSubDetails=subscrSetup.completeAsyncModifySubscription(supplierAdmin.getKey(),customerAdmin,upgradedSubDetails);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-08-13 00:00:00"));  VOSubscriptionDetails upgradedSubDetails2=subscrSetup.upgradeSubscription(upgradedSubDetails,serviceUnitDetails2);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-08-14 00:00:00"));  upgradedSubDetails2=subscrSetup.completeAsyncUpgradeSubscription(supplierAdmin.getKey(),customerAdmin,upgradedSubDetails2);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  long userterminateTime=DateTimeHandling.calculateMillis("2013-08-20 12:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userterminateTime);  subscrSetup.unsubscribeToService(upgradedSubDetails2.getSubscriptionId());  resetCutOffDay(supplierAdmin.getKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_10",subDetails);  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_10",upgradedSubDetails);  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_10",upgradedSubDetails2);  BillingIntegrationTestBase.updateCustomerListForTests("PICT_TEST_10",customer);}  }
class C{  private void drawGrid(Canvas canvas){  ArrayList<Double> xAxisMarkerPositions=getXAxisMarkerPositions(getXAxisInterval());  for (int i=0; i < xAxisMarkerPositions.size(); i++) {    int x=getX(xAxisMarkerPositions.get(i));    canvas.drawLine(x,topBorder,x,topBorder + effectiveHeight,gridPaint);  }  float rightEdge=getX(maxX);  for (int i=0; i <= Y_AXIS_INTERVALS; i++) {    double percentage=(double)i / Y_AXIS_INTERVALS;    int range=effectiveHeight - 2 * yAxisOffset;    int y=topBorder + yAxisOffset + (int)(percentage * range);    canvas.drawLine(leftBorder,y,rightEdge,y,gridPaint);  }}  }
class C{  public static double[] stdDevs(double[][] matrix,double[] means){  double[] sumSqs=new double[means.length];  for (int m=0; m < matrix.length; m++) {    for (int c=0; c < matrix[m].length; c++) {      sumSqs[c]+=(matrix[m][c] - means[c]) * (matrix[m][c] - means[c]);    }  }  double[] stds=new double[means.length];  for (int c=0; c < stds.length; c++) {    stds[c]=sumSqs[c] / (double)(matrix.length - 1);    stds[c]=Math.sqrt(stds[c]);  }  return stds;}  }
class C{  public AttributeInfo copy(ConstPool newCp,Map classnames){  Copier copier=new Copier(info,constPool,newCp,classnames);  try {    copier.annotationArray();    return new AnnotationsAttribute(newCp,getName(),copier.close());  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public void tasks(){  if (mServerSocket == null && mBluetoothAdapter != null && mBluetoothAdapter.isEnabled() && !mConnectionAcceptingThread.isAlive()) {    try {      Log.v(TAG,"No ServerSocket, creating a new one.");      createListeningSocket();      spawnConnectionAcceptingThread();    } catch (    IOException e) {      Log.e(TAG,"Tasks: failed to create listening BT server socket. " + e);      Log.e(TAG,"Can't receive incoming connections.");    }  }}  }
class C{  public int size(){  return size;}  }
class C{  @SuppressWarnings("unchecked") public <T>JsonStringMap<T> createMapDtoFromJson(Reader json,Class<T> dtoInterface) throws IOException {  final DtoProvider<T> dtoProvider=getDtoProvider(dtoInterface);  final Map<String,JsonElement> map;  try {    map=gson.fromJson(json,mapTypeCache.getUnchecked(JsonElement.class));  } catch (  JsonSyntaxException e) {    final Throwable cause=e.getCause();    if (cause instanceof IOException) {      throw (IOException)cause;    }    throw e;  }  final Map<String,T> result=new LinkedHashMap<>(map.size());  for (  Map.Entry<String,JsonElement> e : map.entrySet()) {    result.put(e.getKey(),dtoProvider.fromJson(e.getValue()));  }  return new JsonStringMapImpl<>(result);}  }
class C{  @Override public Record process(GenericData.Record record,String topic) throws Exception {  GobblinTrackingCompactionRecord eventRecord=null;  if (record != null && record.get("namespace") != null && record.get("name") != null && "compaction.tracking.events".equals(record.get("namespace").toString())) {    final String name=record.get("name").toString();    if (name.equals("CompactionCompleted") || name.equals("CompactionRecordCounts")) {      final long timestamp=(long)record.get("timestamp");      final Map<String,String> metadata=StringUtil.convertObjectMapToStringMap(record.get("metadata"));      final String jobContext="Gobblin:" + name;      final String cluster=ClusterUtil.matchClusterCode(metadata.get("clusterIdentifier"));      final String projectName=metadata.get("azkabanProjectName");      final String flowId=metadata.get("azkabanFlowId");      final String jobId=metadata.get("azkabanJobId");      final int execId=Integer.parseInt(metadata.get("azkabanExecId"));      final String dedupeStatus=metadata.get("dedupeStatus");      String dataset=null;      String partitionType=null;      String partitionName=null;      long recordCount=0;      long lateRecordCount=0;      if (name.equals("CompactionCompleted")) {        dataset=metadata.get("datasetUrn");        partitionName=metadata.get("partition");        recordCount=StringUtil.parseLong(metadata.get("recordCount"));      } else {        final Matcher m=UrnPattern.matcher(metadata.get("DatasetOutputPath"));        if (m.find()) {          dataset=m.group(1);          partitionType=m.group(2);          partitionName=m.group(3);        }        recordCount=StringUtil.parseLong(metadata.get("RegularRecordCount"));        lateRecordCount=StringUtil.parseLong(metadata.get("LateRecordCount"));      }      eventRecord=new GobblinTrackingCompactionRecord(timestamp,jobContext,cluster,projectName,flowId,jobId,execId);      eventRecord.setDatasetUrn(dataset,partitionType,partitionName);      eventRecord.setRecordCount(recordCount);      eventRecord.setLateRecordCount(lateRecordCount);      eventRecord.setDedupeStatus(dedupeStatus);    }  }  return eventRecord;}  }
class C{  public void evaluateCrossValidation(int folds){  evaluateCrossValidation(folds,new Random());}  }
class C{  void optimizeWithinPartitions(final ASTJoinGroupPartitions partitions,final GroupNodeVarBindingInfoMap bindingInfoMap,final boolean assertCorrectnessOnly){  final List<ASTJoinGroupPartition> partitionList=partitions.getPartitionList();  final Set<IVariable<?>> knownBoundFromPrevPartitions=new HashSet<IVariable<?>>();  for (  ASTJoinGroupPartition partition : partitionList) {    optimizeWithinPartition(partition,assertCorrectnessOnly,bindingInfoMap,knownBoundFromPrevPartitions);  }}  }
class C{  public CodesIthaca(){}  }
class C{  public MessageTypeEventHandler(char messageType,T delegate){  if (delegate == null)   throw new NullPointerException("delegate");  this.messageType=messageType;  this.delegate=delegate;}  }
class C{  public MinecraftDirectory(){  this(new File(".minecraft"));}  }
class C{  public void actionPerformed(ActionEvent e){  Graph layoutGraph=layoutEditable.getGraph();  LayoutSelection selection=new LayoutSelection(layoutGraph);  InternalClipboard.getInstance().setContents(selection,this);}  }
class C{  protected void showSnackbar(String msg,View view,int duration){  android.support.design.widget.Snackbar.make(view,msg,duration).show();}  }
class C{  public boolean hasCustomizer(){  return m_hasCustomizer;}  }
class C{  @Override public IBinder onBind(Intent intent){  return null;}  }
class C{  public static void main(String[] args) throws IOException, ClassNotFoundException {  Root root=Root.fromFile(args[0]);  root.baseline=baseline();  for (  LoadedClass loadedClass : root.loadedClasses.values()) {    if (loadedClass.systemClass) {      loadedClass.measureMemoryUsage();    }  }  root.toFile(args[0]);}  }
class C{  public String generateAccessInfo(GuestInfo guestInfo) throws APPlatformException {  String myHOST=guestInfo.getHostName();  String hostName;  if (myHOST != null) {    hostName=guestInfo.getHostName().split("\\.",2)[0];  } else {    hostName="Unkown hostname (probably missing vmware tools).\nInstance name " + paramHandler.getInstanceName() + ".";    myHOST="Unkown(InstanceName " + paramHandler.getInstanceName() + ")";  }  String accessInfoPattern=paramHandler.getAccessInfo();  if (accessInfoPatternUndefined(accessInfoPattern)) {    return hostName;  }  String accessInfo=accessInfoPattern.replace(PATTERN_IP,getIpAddress(guestInfo));  accessInfo=accessInfo.replace(PATTERN_HOST,myHOST);  accessInfo=accessInfo.replace(PATTERN_CPU,Integer.toString(paramHandler.getConfigCPUs()));  accessInfo=accessInfo.replace(PATTERN_MEM,paramHandler.formatMBasGB(paramHandler.getConfigMemoryMB()));  accessInfo=accessInfo.replace(PATTERN_DISKS,paramHandler.getDataDisksAsString());  accessInfo=accessInfo.replace(PATTERN_RESPUSER,getResponsibleUser());  accessInfo=accessInfo.replace("<br>","<br>\r\n");  return accessInfo;}  }
class C{  public boolean isDamaged(){  return hit || destroyed;}  }
class C{  protected void addDatePolyfill(){  ScriptHelper.evalNoResult("if(!Date.now){Date.now=function now(){return new Date().getTime();};}",this);}  }
class C{  private String addSelectionArgs(String selection,String[] selectionArgs,String operation){  if (selection == null || selectionArgs == null)   return null; else {    String selectionResult="";    for (int i=0; i < selectionArgs.length - 1; ++i)     selectionResult+=(selection + " = ? " + operation+ " ");    selectionResult+=(selection + " = ?");    Log.d(TAG,"selection = " + selectionResult + " selectionArgs = ");    for (    String args : selectionArgs)     Log.d(TAG,args + " ");    return selectionResult;  }}  }
class C{  public static char convertByte2Uint8(byte b){  return (char)(b & 0xff);}  }
class C{  public void drag(long time,float x,float y,float deltaX,float deltaY,float totalX,float totalY){  resetResizeTimeout(false);  deltaX=MathUtils.flipSignIf(deltaX,LocalizationUtils.isLayoutRtl());  mNewTabButton.drag(x,y);  if (mLastPressedCloseButton != null) {    if (!mLastPressedCloseButton.drag(x,y))     mLastPressedCloseButton=null;  }  if (mInReorderMode) {    float accumulatedDeltaX=x - mLastReorderX;    if (Math.abs(accumulatedDeltaX) >= 1.f) {      if (!LocalizationUtils.isLayoutRtl()) {        if (deltaX >= 1.f) {          mReorderState|=REORDER_SCROLL_RIGHT;        } else         if (deltaX <= -1.f) {          mReorderState|=REORDER_SCROLL_LEFT;        }      } else {        if (deltaX >= 1.f) {          mReorderState|=REORDER_SCROLL_LEFT;        } else         if (deltaX <= -1.f) {          mReorderState|=REORDER_SCROLL_RIGHT;        }      }      mLastReorderX=x;      updateReorderPosition(accumulatedDeltaX);    }  } else   if (!mScroller.isFinished()) {    mScroller.setFinalX((int)(mScroller.getFinalX() + deltaX));  } else {    float fastExpandDelta=calculateOffsetToMakeTabVisible(mInteractingTab,true,true,true);    if (mInteractingTab != null && fastExpandDelta != 0.f) {      if ((fastExpandDelta > 0 && deltaX > 0) || (fastExpandDelta < 0 && deltaX < 0)) {        mScroller.startScroll(mScrollOffset,0,(int)fastExpandDelta,0,time,EXPAND_DURATION_MS);      }    } else {      updateScrollOffsetPosition((int)(mScrollOffset + deltaX));    }  }  if (!mInReorderMode) {    final float absTotalX=Math.abs(totalX);    final float absTotalY=Math.abs(totalY);    if (totalY > mReorderMoveStartThreshold && absTotalX < mReorderMoveStartThreshold * 2.f && (absTotalX > EPSILON && (absTotalY / absTotalX) > TAN_OF_REORDER_ANGLE_START_THRESHOLD)) {      startReorderMode(time,x,x - totalX);    }  }  if (!mInReorderMode)   mInteractingTab=null;  mUpdateHost.requestUpdate();}  }
class C{  @Override public String toString(){  StringBuilder sbuf;  sbuf=new StringBuilder();  sbuf.append(getUser());  if (getCharacter() != null) {    sbuf.append("/");    sbuf.append(getCharacter());  }  sbuf.append('@');  sbuf.append(getHost());  if (getPort() != DEFAULT_SERVER_PORT) {    sbuf.append(':');    sbuf.append(getPort());  }  return sbuf.toString();}  }
class C{  public void loadArgs(final int arg,final int count){  int index=getArgIndex(arg);  for (int i=0; i < count; ++i) {    Type t=argumentTypes[arg + i];    loadInsn(t,index);    index+=t.getSize();  }}  }
class C{  public static void closeDialogs(SWTWorkbenchBot bot){  if (bot.shells().length > 1) {    System.out.println("Has windows/shells: shells quanity=" + bot.shells().length);    SWTBotShell[] shells=bot.shells();    for (int i=0; i < shells.length; i++) {      if (shells[i].getText().equals("ddms")) {        shells[i].close();      }      if (shells[i].getText().equals("Subclipse Usage")) {        shells[i].close();      }      if (shells[i].getText().equals("Preferences")) {        shells[i].close();      }    }  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public DeferredTreeViewer(Tree tree){  super(tree);}  }
class C{  public Tasks<HostRestRep> provisionBareMetalHosts(ProvisionBareMetalHostsParam param){  return postTasks(param,baseUrl + "/provision-bare-metal");}  }
class C{  public List query(double x1,double x2){  return super.query(new Interval(Math.min(x1,x2),Math.max(x1,x2)));}  }
class C{  public String isValid(String newText){  return (newText.length() < 1 || !newText.matches("\\w")) ? "Illegal Name provided" : null;}  }
class C{  public EmbeddedADS(File workDir) throws Exception {  initDirectoryService(workDir);}  }
class C{  public static <Type>Validator<Type> negate(@NonNull final Context context,@NonNull final Validator<Type> validator){  return NegateValidator.create(context,R.string.default_error_message,validator);}  }
class C{  @Override public Object adapt(Object object,Object type){  if (isFactoryForType(type)) {    Object adapter=super.adapt(object,type);    if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {      return adapter;    }  }  return null;}  }
class C{  private static int decode4to3(byte[] source,int srcOffset,byte[] destination,int destOffset,byte[] decodabet){  if (source[srcOffset + 2] == EQUALS_SIGN) {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);    destination[destOffset]=(byte)(outBuff >>> 16);    return 1;  } else   if (source[srcOffset + 3] == EQUALS_SIGN) {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12) | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);    destination[destOffset]=(byte)(outBuff >>> 16);    destination[destOffset + 1]=(byte)(outBuff >>> 8);    return 2;  } else {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12) | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)| ((decodabet[source[srcOffset + 3]] << 24) >>> 24);    destination[destOffset]=(byte)(outBuff >> 16);    destination[destOffset + 1]=(byte)(outBuff >> 8);    destination[destOffset + 2]=(byte)(outBuff);    return 3;  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodeattributenodetype.class,args);}  }
class C{  public void sendRegistrationForm(Form form) throws XMPPException {  Registration reg=new Registration();  reg.setType(IQ.Type.SET);  reg.setTo(room);  reg.addExtension(form.getDataFormToSend());  PacketFilter filter=new AndFilter(new PacketIDFilter(reg.getPacketID()),new PacketTypeFilter(IQ.class));  PacketCollector collector=connection.createPacketCollector(filter);  connection.sendPacket(reg);  IQ result=(IQ)collector.nextResult(SmackConfiguration.getPacketReplyTimeout());  collector.cancel();  if (result == null) {    throw new XMPPException("No response from server.");  } else   if (result.getType() == IQ.Type.ERROR) {    throw new XMPPException(result.getError());  }}  }
class C{  public void internalFrameActivated(InternalFrameEvent e){  if (e.getSource() == controlPanel) {    activeFrame=CONTROL_PANEL_INDEX;  } else   if (e.getSource() == addressPanel) {    activeFrame=ADDRESS_PANEL_INDEX;  } else   if (e.getSource() == functionPanel) {    activeFrame=FUNCTION_PANEL_INDEX;  }}  }
class C{  public HttpResponse execute(final HttpRequest request,final HttpClientConnection conn,final HttpContext context) throws IOException, HttpException {  if (request == null) {    throw new IllegalArgumentException("HTTP request may not be null");  }  if (conn == null) {    throw new IllegalArgumentException("Client connection may not be null");  }  if (context == null) {    throw new IllegalArgumentException("HTTP context may not be null");  }  try {    HttpResponse response=doSendRequest(request,conn,context);    if (response == null) {      response=doReceiveResponse(request,conn,context);    }    return response;  } catch (  IOException ex) {    conn.close();    throw ex;  }catch (  HttpException ex) {    conn.close();    throw ex;  }catch (  RuntimeException ex) {    conn.close();    throw ex;  }}  }
class C{  public InputStream newInputStream(int index) throws IOException {synchronized (DiskLruCache.this) {    if (entry.currentEditor != this) {      throw new IllegalStateException();    }    if (!entry.readable) {      return null;    }    try {      return new FileInputStream(entry.getCleanFile(index));    } catch (    FileNotFoundException e) {      return null;    }  }}  }
class C{  private void registerPingReceiver(){  IntentFilter intentFilter=new IntentFilter(PingReceiver.ACTION_VIEW_PING);  registerReceiver(mPingReceiver,intentFilter);}  }
class C{  public int discoveryEventType(){  return discoEvtType;}  }
class C{  public boolean isAutenticada(){  return autenticada;}  }
class C{  public static void calibrateNanosConversion(){  long originalMillis=System.currentTimeMillis();  long updatedMillis=originalMillis;  while (originalMillis == updatedMillis) {    updatedMillis=System.currentTimeMillis();  }  TimeUtil.referenceNanos=System.nanoTime();  TimeUtil.referenceMillis=updatedMillis;  TimeUtil.secondsOffset=BigDecimal.valueOf(TimeUtil.referenceMillis,MILLI).subtract(BigDecimal.valueOf(TimeUtil.referenceNanos,NANO));}  }
class C{  public static String toString(JSONObject jo) throws JSONException {  boolean b=false;  Iterator keys=jo.keys();  String string;  StringBuffer sb=new StringBuffer();  while (keys.hasNext()) {    string=keys.next().toString();    if (!jo.isNull(string)) {      if (b) {        sb.append(';');      }      sb.append(Cookie.escape(string));      sb.append("=");      sb.append(Cookie.escape(jo.getString(string)));      b=true;    }  }  return sb.toString();}  }
class C{  public static TextContent html(String html){  TextContent content=new TextContent();  content.setHtml(html);  return content;}  }
class C{  public ReceiveMessageResult receiveMessage(ReceiveMessageRequest receiveMessageRequest){  return amazonSqsToBeExtended.receiveMessage(receiveMessageRequest);}  }
class C{  public QuadTreeNode child(QuadTreeNode node){  return node.getNorthEast();}  }
class C{  public DebugRoutingVisitor(EdgeStore edgeStore){  this.features=new ArrayList<>();  this.edgeStore=edgeStore;}  }
class C{  @Override public void datasetChanged(DatasetChangeEvent event){  fireDatasetChanged();}  }
class C{  public SeriesChangeEvent(Object source){  super(source);}  }
class C{  protected static boolean isMetaDown(int modifiers){  return (modifiers & GraphicsNodeInputEvent.META_MASK) != 0;}  }
class C{  public Object key(){  StringBuilder key=new StringBuilder();  for (int i=0; i < filled.length; i++) {    if (filled[i]) {      key.append('T');    } else {      key.append('F');    }  }  return key.toString();}  }
class C{  public final void mul(float scalar){  m00*=scalar;  m01*=scalar;  m02*=scalar;  m03*=scalar;  m10*=scalar;  m11*=scalar;  m12*=scalar;  m13*=scalar;  m20*=scalar;  m21*=scalar;  m22*=scalar;  m23*=scalar;  m30*=scalar;  m31*=scalar;  m32*=scalar;  m33*=scalar;}  }
class C{  public static void loadDeploymentProperties(Object context,String fileName) throws IOException {  m_theConfig.getProperties(context,fileName);}  }
class C{  public final void testGetEncoded01() throws IOException {  boolean performed=false;  for (int i=0; i < EncryptedPrivateKeyInfoData.algName0.length; i++) {    try {      byte[] enc=EncryptedPrivateKeyInfoData.getValidEncryptedPrivateKeyInfoEncoding(EncryptedPrivateKeyInfoData.algName0[i][0]);      EncryptedPrivateKeyInfo epki=new EncryptedPrivateKeyInfo(enc);      assertTrue(Arrays.equals(enc,epki.getEncoded()));      performed=true;    } catch (    NoSuchAlgorithmException allowedFailure) {    }  }  assertTrue("Test not performed",performed);}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  private String makeHttpRequest(String token,String url,String item,String httpMethod,int expectedResponseCode) throws IOException {  HttpURLConnection connection=(HttpURLConnection)(new URL(url)).openConnection();  connection.setDoInput(true);  connection.setDoOutput(true);  connection.setRequestMethod(httpMethod);  connection.setRequestProperty("Content-Type","application/atom+xml");  connection.setRequestProperty("Authorization","GoogleLogin auth=" + token);  OutputStream outputStream=connection.getOutputStream();  outputStream.write(item.getBytes());  outputStream.close();  int responseCode=connection.getResponseCode();  if (responseCode == expectedResponseCode) {    return toString(connection.getInputStream());  } else {    throw new RuntimeException(toString(connection.getErrorStream()));  }}  }
class C{  protected BaseVO(long key,int version){  this.key=key;  this.version=version;}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public void ctcpCommand(String target,String command){  checkArgument(StringUtils.isNotBlank(target),"Target '%s' is blank",target,command);  checkArgument(StringUtils.isNotBlank(command),"CTCP command '%s' is blank",command,target);  bot.sendRaw().rawLineSplit("PRIVMSG " + target + " :\u0001",command,"\u0001");}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == PropertyAssignment.class) {switch (derivedFeatureID) {default :      return -1;  }}if (baseClass == AnnotablePropertyAssignment.class) {switch (derivedFeatureID) {case N4JSPackage.PROPERTY_SETTER_DECLARATION__ANNOTATION_LIST:    return N4JSPackage.ANNOTABLE_PROPERTY_ASSIGNMENT__ANNOTATION_LIST;default :  return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  public static long bytesToLong(final byte[] bytes){  final ByteBuffer buffer=ByteBuffer.allocate(8);  buffer.put(bytes,0,8);  buffer.flip();  return buffer.getLong();}  }
class C{  public ReflectiveAttribute(Class<O> objectType,Class<A> fieldType,String fieldName){  super(objectType,fieldType,fieldName);  Field field;  try {    field=getField(objectType,fieldName);    if (!field.isAccessible()) {      field.setAccessible(true);    }  } catch (  Exception e) {    throw new IllegalStateException("Invalid attribute definition: No such field '" + fieldName + "' in object '"+ objectType.getName()+ "'");  }  if (!fieldType.isAssignableFrom(field.getType())) {    throw new IllegalStateException("Invalid attribute definition: The type of field '" + fieldName + "', type '"+ field.getType()+ "', in object '"+ objectType.getName()+ "', is not assignable to the type indicated: "+ fieldType.getName());  }  this.field=field;}  }
class C{  @Override protected void swapValues(int a,int b){  long tt=values[a];  values[a]=values[b];  values[b]=tt;}  }
class C{  @Override public int hashCode(){  if (wifiP2pDevice == null) {    return 0;  }  return wifiP2pDevice.hashCode();}  }
class C{  public static GoogleAnalytics initialiseGoogleAnalytics(Context context,String trackerId,final ExceptionParser callback){  mAnalytics=GoogleAnalytics.getInstance(context);  mAnalytics.setLocalDispatchPeriod(1800);  mTracker=mAnalytics.newTracker(trackerId);  mTracker.enableExceptionReporting(true);  mTracker.enableAutoActivityTracking(true);  Thread.UncaughtExceptionHandler handler=Thread.getDefaultUncaughtExceptionHandler();  if (handler != null && handler instanceof ExceptionReporter) {    ExceptionReporter exceptionReporter=(ExceptionReporter)handler;    exceptionReporter.setExceptionParser(callback);    Thread.setDefaultUncaughtExceptionHandler(exceptionReporter);    Log.d(LOG_TAG,"Analytics active.");  } else {    Log.e(LOG_TAG,"Cannot set custom exception parser.");  }  return mAnalytics;}  }
class C{  public TransactionOutput addOutput(BigInteger value,Address address){  return addOutput(new TransactionOutput(params,this,value,address));}  }
class C{  public sun.net.ftp.FtpClient connect(SocketAddress dest,int timeout) throws sun.net.ftp.FtpProtocolException, IOException {  if (!(dest instanceof InetSocketAddress)) {    throw new IllegalArgumentException("Wrong address type");  }  serverAddr=(InetSocketAddress)dest;  tryConnect(serverAddr,timeout);  if (!readReply()) {    throw new sun.net.ftp.FtpProtocolException("Welcome message: " + getResponseString(),lastReplyCode);  }  welcomeMsg=getResponseString().substring(4);  return this;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.CONSTRAINT_TOKEN___CONSTRAINT_1:    getConstraint_1().clear();  getConstraint_1().addAll((Collection<? extends Constraint_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public VectorToTokenPanel(final DisplayWorld world){  super("<html><p>These entries consume vector inputs. " + "When a vector is received (e.g. from a neuron group) " + "the text associated with the closest vector on the left is found and displayed "+ "in the display world.");  this.world=world;  table=SimbrainJTable.createTable(new VectorDictionaryTable(world.getVectorToTokenDict()));  initPanel(table);}  }
class C{  @SuppressWarnings("unchecked") public final <T2,V>Flux<V> zipWith(Publisher<? extends T2> source2,int prefetch,BiFunction<? super T,? super T2,? extends V> combinator){  return zip(null,prefetch,this,source2);}  }
class C{  @ReactMethod public void logEvent(String eventName,double valueToSum,ReadableMap parameters){  mAppEventLogger.logEvent(eventName,valueToSum,Arguments.toBundle(parameters));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:03.216 -0500",hash_original_method="F800EB2F1E580436E49CB51D04E3F37C",hash_generated_method="52E912297D8319959E7727A211EA1F19") public void addAttribute(AttributedCharacterIterator.Attribute attribute,Object value){  if (attribute == null) {    throw new NullPointerException();  }  if (text.length() == 0) {    throw new IllegalArgumentException();  }  List<Range> ranges=attributeMap.get(attribute);  if (ranges == null) {    ranges=new ArrayList<Range>(1);    attributeMap.put(attribute,ranges);  } else {    ranges.clear();  }  ranges.add(new Range(0,text.length(),value));}  }
class C{  private void updateTokenWaitTime(long waitForMills){  final long newTime=DateTime.now().getMillis() + waitForMills;  boolean done=true;  do {    long oldTime=tokenWaitUntil.get();    if (oldTime < newTime) {      done=tokenWaitUntil.compareAndSet(oldTime,newTime);    } else {      done=true;    }  } while (!done);}  }
class C{  public String format(String format){  CharBuffer cb=new CharBuffer();  return format(cb,format).close();}  }
class C{  public String buildLink(String handle){  return String.format(linkFormat,handle);}  }
class C{  public CtClass makeClassIfNew(InputStream classfile) throws IOException, RuntimeException {  compress();  classfile=new BufferedInputStream(classfile);  CtClass clazz=new CtClassType(classfile,this);  clazz.checkModify();  String classname=clazz.getName();  CtClass found=checkNotExists(classname);  if (found != null)   return found; else {    cacheCtClass(classname,clazz,true);    return clazz;  }}  }
class C{  public static <S,E>void replaceStep(final Step<S,E> removeStep,final Step<S,E> insertStep,final Traversal.Admin<?,?> traversal){  traversal.addStep(stepIndex(removeStep,traversal),insertStep);  traversal.removeStep(removeStep);}  }
class C{  private String processPreformattedText(final String hostport,String line){  if (!this.escaped) {    final int positionOfOpeningTag=line.indexOf(WIKI_OPEN_PRE_ESCAPED);    final int positionOfClosingTag=line.indexOf(WIKI_CLOSE_PRE_ESCAPED);    if (positionOfOpeningTag >= 0 && positionOfClosingTag > 0) {      if (positionOfOpeningTag < positionOfClosingTag) {        final StringBuilder preformattedText=new StringBuilder();        preformattedText.append("<pre style=\"border:dotted;border-width:thin;\">");        preformattedText.append(line.substring(positionOfOpeningTag + LEN_WIKI_OPEN_PRE_ESCAPED,positionOfClosingTag));        preformattedText.append("</pre>");        line=processLineOfWikiCode(hostport,line.substring(0,positionOfOpeningTag).replaceAll("!pre!","!pre!!") + "!pre!txt!" + line.substring(positionOfClosingTag + LEN_WIKI_CLOSE_PRE_ESCAPED).replaceAll("!pre!","!pre!!"));        line=line.replace("!pre!txt!",preformattedText.toString().replaceAll("!pre!","!pre!!"));        line=line.replaceAll("!pre!!","!pre!");      } else {        this.processingPreformattedText=true;        final String temp1=processLineOfWikiCode(hostport,line.substring(0,positionOfOpeningTag - 1).replaceAll("!tmp!","!tmp!!") + "!tmp!txt!");        this.noList=true;        final String temp2=processLineOfWikiCode(hostport,line.substring(positionOfOpeningTag));        this.noList=false;        line=temp1.replaceAll("!tmp!txt!",temp2);        line=line.replaceAll("!tmp!!","!tmp!");        this.processingPreformattedText=false;      }    } else     if (positionOfOpeningTag >= 0 && !this.preformattedSpanning) {      this.processingPreformattedText=true;      final StringBuilder openBlockQuoteTags=new StringBuilder();      String preformattedText="<pre style=\"border:dotted;border-width:thin;\">" + line.substring(positionOfOpeningTag + LEN_WIKI_OPEN_PRE_ESCAPED);      preformattedText=preformattedText.replaceAll("!pre!","!pre!!");      while (this.preindented < positionOfOpeningTag && positionOfOpeningTag < line.length() && line.substring(this.preindented,positionOfOpeningTag).charAt(0) == WIKI_INDENTION) {        this.preindented++;        openBlockQuoteTags.append(HTML_OPEN_BLOCKQUOTE);      }      line=processLineOfWikiCode(hostport,line.substring(this.preindented,positionOfOpeningTag).replaceAll("!pre!","!pre!!") + "!pre!txt!");      line=openBlockQuoteTags + line.replace("!pre!txt!",preformattedText);      line=line.replaceAll("!pre!!","!pre!");      this.preformattedSpanning=true;    } else     if (positionOfClosingTag >= 0 && this.preformattedSpanning) {      this.preformattedSpanning=false;      final StringBuilder endBlockQuoteTags=new StringBuilder();      String preformattedText=line.substring(0,positionOfClosingTag) + "</pre>";      preformattedText=preformattedText.replaceAll("!pre!","!pre!!");      while (this.preindented > 0) {        endBlockQuoteTags.append(HTML_CLOSE_BLOCKQUOTE);        this.preindented--;      }      line=processLineOfWikiCode(hostport,"!pre!txt!" + line.substring(positionOfClosingTag + LEN_WIKI_CLOSE_PRE_ESCAPED).replaceAll("!pre!","!pre!!"));      line=line.replace("!pre!txt!",preformattedText) + endBlockQuoteTags;      line=line.replaceAll("!pre!!","!pre!");      this.processingPreformattedText=false;    } else     if (positionOfOpeningTag >= 0 && !this.preformattedSpanning) {      int posTag;      while ((posTag=line.indexOf(WIKI_CLOSE_PRE_ESCAPED)) >= 0) {        line=line.substring(0,posTag) + line.substring(posTag + LEN_WIKI_CLOSE_PRE_ESCAPED);      }      line=processLineOfWikiCode(hostport,line);    }  }  return line;}  }
class C{  public static void blacklistBlockFromMagnet(Block block,int meta){  String key=getMagnetKey(block,meta);  magnetBlacklist.add(key);}  }
class C{  @Xpect @ParameterParser(syntax="('at' arg1=OFFSET)?") public void deadCode(@StringExpectation IStringExpectation expectation,INode offset){  if (offset == null) {    return;  }  String actual=evaluateDeadCode(offset);  expectation.assertEquals(actual);}  }
class C{  public SchemaAgreementException(final String message){  super(message);}  }
class C{  public void testParameterization(){  boolean simulation=true;  SessionNode node1=new SessionNode(Type1.class);  SessionNode node2=new SessionNode(Type2.class);  SessionNode node3=new SessionNode(Type3.class);  Type2 param=new Type2(new Parameters());  node1.putParam(Type1.class,new Parameters());  node1.addParent(node3);  node3.addParent(node2);  try {    node2.createModel(Type2.class,simulation);    node3.createModel(Type3.class,simulation);  } catch (  Exception e) {    e.printStackTrace();    fail("Model not created.");  }  node1.destroyModel();  try {    node1.createModel(simulation);  } catch (  Exception e) {    fail("Model not created.");  }}  }
class C{  public void disconnectCommand(){  sendMessage(CMD_DISCONNECT);}  }
class C{  public UCrop useSourceImageAspectRatio(){  mCropOptionsBundle.putFloat(EXTRA_ASPECT_RATIO_X,0);  mCropOptionsBundle.putFloat(EXTRA_ASPECT_RATIO_Y,0);  return this;}  }
class C{  protected List<VolumeDescriptor> createChangeVirtualPoolDescriptors(StorageSystem vplexSystem,Volume volume,VirtualPool newVpool,String taskId,List<Recommendation> recommendations,VirtualPoolCapabilityValuesWrapper capabilities,ControllerOperationValuesWrapper operationsWrapper) throws InternalException {  URI volumeVarrayURI=volume.getVirtualArray();  VirtualArray volumeVarray=_dbClient.queryObject(VirtualArray.class,volumeVarrayURI);  s_logger.info("Virtual volume varray is {}",volumeVarrayURI);  URI volumeVpoolURI=volume.getVirtualPool();  VirtualPool currentVpool=_dbClient.queryObject(VirtualPool.class,volumeVpoolURI);  List<VolumeDescriptor> descriptors=new ArrayList<VolumeDescriptor>();  VolumeDescriptor vplexVirtualVolumeDesc=new VolumeDescriptor(VolumeDescriptor.Type.VPLEX_VIRT_VOLUME,volume.getStorageController(),volume.getId(),volume.getPool(),null);  Map<String,Object> volumeParams=new HashMap<String,Object>();  volumeParams.put(VolumeDescriptor.PARAM_VPOOL_CHANGE_EXISTING_VOLUME_ID,volume.getId());  volumeParams.put(VolumeDescriptor.PARAM_VPOOL_CHANGE_NEW_VPOOL_ID,newVpool.getId());  volumeParams.put(VolumeDescriptor.PARAM_VPOOL_CHANGE_OLD_VPOOL_ID,volume.getVirtualPool());  if (operationsWrapper != null) {    if (operationsWrapper.getMigrationSuspendBeforeCommit() != null) {      volumeParams.put(VolumeDescriptor.PARAM_MIGRATION_SUSPEND_BEFORE_COMMIT,operationsWrapper.getMigrationSuspendBeforeCommit());    }    if (operationsWrapper.getMigrationSuspendBeforeDeleteSource() != null) {      volumeParams.put(VolumeDescriptor.PARAM_MIGRATION_SUSPEND_BEFORE_DELETE_SOURCE,operationsWrapper.getMigrationSuspendBeforeDeleteSource());    }  }  vplexVirtualVolumeDesc.setParameters(volumeParams);  descriptors.add(vplexVirtualVolumeDesc);  if (VirtualPoolChangeAnalyzer.vpoolChangeRequiresMigration(currentVpool,newVpool)) {    Volume migSrcVolume=getAssociatedVolumeInVArray(volume,volumeVarrayURI);    descriptors.addAll(createBackendVolumeMigrationDescriptors(vplexSystem,volume,migSrcVolume,volumeVarray,newVpool,getVolumeCapacity(migSrcVolume != null ? migSrcVolume : volume),taskId,recommendations,false,capabilities));  }  URI haVarrayURI=VirtualPoolChangeAnalyzer.getHaVarrayURI(currentVpool);  if (haVarrayURI != null) {    VirtualArray haVarray=_dbClient.queryObject(VirtualArray.class,haVarrayURI);    VirtualPool currentHaVpool=VirtualPoolChangeAnalyzer.getHaVpool(currentVpool,_dbClient);    VirtualPool newHaVpool=VirtualPoolChangeAnalyzer.getNewHaVpool(currentVpool,newVpool,_dbClient);    if (VirtualPoolChangeAnalyzer.vpoolChangeRequiresMigration(currentHaVpool,newHaVpool)) {      Volume migSrcVolume=getAssociatedVolumeInVArray(volume,haVarrayURI);      descriptors.addAll(createBackendVolumeMigrationDescriptors(vplexSystem,volume,migSrcVolume,haVarray,newHaVpool,getVolumeCapacity(migSrcVolume != null ? migSrcVolume : volume),taskId,recommendations,true,capabilities));    }  }  return descriptors;}  }
class C{  public void loadByteArray(SdfBuffer buffer){  buffer.setAtIndexAndInc(0x81);  buffer.setAtIndexAndInc(number);  super.loadByteArray(buffer);}  }
class C{  private Response<Bitmap> doParse(NetworkResponse response){  byte[] data=response.data;  BitmapFactory.Options decodeOptions=new BitmapFactory.Options();  Bitmap bitmap=null;  if (mMaxWidth == 0 && mMaxHeight == 0) {    decodeOptions.inPreferredConfig=mDecodeConfig;    bitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);  } else {    decodeOptions.inJustDecodeBounds=true;    BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);    int actualWidth=decodeOptions.outWidth;    int actualHeight=decodeOptions.outHeight;    int desiredWidth=getResizedDimension(mMaxWidth,mMaxHeight,actualWidth,actualHeight,mScaleType);    int desiredHeight=getResizedDimension(mMaxHeight,mMaxWidth,actualHeight,actualWidth,mScaleType);    decodeOptions.inJustDecodeBounds=false;    decodeOptions.inSampleSize=findBestSampleSize(actualWidth,actualHeight,desiredWidth,desiredHeight);    Bitmap tempBitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);    if (tempBitmap != null && (tempBitmap.getWidth() > desiredWidth || tempBitmap.getHeight() > desiredHeight)) {      bitmap=Bitmap.createScaledBitmap(tempBitmap,desiredWidth,desiredHeight,true);      tempBitmap.recycle();    } else {      bitmap=tempBitmap;    }  }  if (bitmap == null) {    return Response.error(new ParseError(response));  } else {    return Response.success(bitmap,HttpHeaderParser.parseCacheHeaders(response));  }}  }
class C{  @Override protected void tearDown() throws Exception {  setFixture(null);}  }
class C{  public PositionRecord(final Location location,final int session,final String source){  if (!GeometryUtils.isValidLocation(location)) {    throw new IllegalArgumentException("Invalid location " + location.toString());  }  setLatitude(location.getLatitude());  setLongitude(location.getLongitude());  setAltitude(location.getAltitude());  setAccuracy(location.getAccuracy());  setTimestampByMillis(location.getTime());  setBearing(location.getBearing());  setSpeed(location.getSpeed());  setSession(session);  setSource(source);  setIsWaypoint(false);}  }
class C{  @Override public int compare(Chromosome c1,Chromosome c2){  int dominate1=0;  int dominate2=0;  int flag;  for (  FitnessFunction<?> ff : c1.getFitnessValues().keySet()) {    double value1=c1.getFitness(ff);    double value2=c2.getFitness(ff);    if (value1 < value2)     flag=-1; else     if (value1 > value2)     flag=1; else     flag=0;    if (flag == -1)     dominate1=1;    if (flag == 1)     dominate2=1;  }  if (dominate1 == dominate2)   return 0;  if (dominate1 == 1)   return -1;  return 1;}  }
class C{  public boolean isCpuAlwaysOn(){  return readBoolean(RcsSettingsData.CPU_ALWAYS_ON);}  }
class C{  public void testDefaultSettings() throws Exception {  JsonFactory jf=new JsonFactory();  assertFalse(jf.isEnabled(JsonParser.Feature.ALLOW_COMMENTS));  JsonParser jp=jf.createJsonParser(new StringReader("[ 1 ]"));  assertFalse(jp.isEnabled(JsonParser.Feature.ALLOW_COMMENTS));}  }
class C{  protected void gatherOrderExprs(Blackboard bb,SqlSelect select,SqlNodeList orderList,List<SqlNode> extraOrderExprs,List<RelFieldCollation> collationList){  assert bb.root != null : "precondition: child != null";  assert select != null;  if (orderList == null) {    return;  }  for (  SqlNode orderItem : orderList) {    collationList.add(convertOrderItem(select,orderItem,extraOrderExprs,RelFieldCollation.Direction.ASCENDING,RelFieldCollation.NullDirection.UNSPECIFIED));  }}  }
class C{  @Override public void drag(int from,int to){}  }
class C{  public EuclideanUtils(int normToUse){  setNormToUse(normToUse);}  }
class C{  @After public void tearDown() throws Exception {  System.clearProperty(GemFireStatSampler.TEST_FILE_SIZE_LIMIT_IN_KB_PROPERTY);  disconnect();}  }
class C{  protected void sequence_LiteralAnnotationArgument(ISerializationContext context,LiteralAnnotationArgument semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.LITERAL_ANNOTATION_ARGUMENT__LITERAL) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.LITERAL_ANNOTATION_ARGUMENT__LITERAL));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getLiteralAnnotationArgumentAccess().getLiteralLiteralParserRuleCall_0(),semanticObject.getLiteral());  feeder.finish();}  }
class C{  public static SnapshotStatus readSnapshotStatus(StreamInput in) throws IOException {  SnapshotStatus snapshotInfo=new SnapshotStatus();  snapshotInfo.readFrom(in);  return snapshotInfo;}  }
class C{  public void testBug13255() throws Exception {  createTable("testBug13255","(field_1 int)");  Properties props=new Properties();  props.setProperty("autoReconnect","true");  Connection reconnectConn=null;  Statement reconnectStmt=null;  PreparedStatement reconnectPStmt=null;  try {    reconnectConn=getConnectionWithProps(props);    reconnectStmt=reconnectConn.createStatement();    String connectionId=getSingleIndexedValueWithQuery(reconnectConn,1,"SELECT CONNECTION_ID()").toString();    reconnectStmt.addBatch("INSERT INTO testBug13255 VALUES (1)");    reconnectStmt.addBatch("INSERT INTO testBug13255 VALUES (2)");    reconnectStmt.addBatch("KILL " + connectionId);    for (int i=0; i < 100; i++) {      reconnectStmt.addBatch("INSERT INTO testBug13255 VALUES (" + i + ")");    }    try {      reconnectStmt.executeBatch();    } catch (    SQLException sqlEx) {    }    assertEquals(2,getRowCount("testBug13255"));    this.stmt.executeUpdate("TRUNCATE TABLE testBug13255");    reconnectConn.close();    reconnectConn=getConnectionWithProps(props);    connectionId=getSingleIndexedValueWithQuery(reconnectConn,1,"SELECT CONNECTION_ID()").toString();    reconnectPStmt=reconnectConn.prepareStatement("INSERT INTO testBug13255 VALUES (?)");    reconnectPStmt.setInt(1,1);    reconnectPStmt.addBatch();    reconnectPStmt.setInt(1,2);    reconnectPStmt.addBatch();    reconnectPStmt.addBatch("KILL " + connectionId);    for (int i=3; i < 100; i++) {      reconnectPStmt.setInt(1,i);      reconnectPStmt.addBatch();    }    try {      reconnectPStmt.executeBatch();    } catch (    SQLException sqlEx) {    }    assertEquals(2,getRowCount("testBug13255"));  }  finally {    if (reconnectStmt != null) {      reconnectStmt.close();    }    if (reconnectConn != null) {      reconnectConn.close();    }  }}  }
class C{  public static void process(ASTQueryContainer qc) throws MalformedQueryException {  StringProcessor visitor=new StringProcessor();  try {    qc.jjtAccept(visitor,null);  } catch (  VisitorException e) {    throw new MalformedQueryException(e.getMessage(),e);  }}  }
class C{  public void close() throws java.io.IOException {  flushBase64();  super.close();  buffer=null;  out=null;}  }
class C{  public boolean isDataFlavorSupported(DataFlavor flavor){  for (int i=0; i < FLAVORS.length; i++) {    if (flavor.equals(FLAVORS[i])) {      return true;    }  }  return false;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodecommentnodetype.class,args);}  }
class C{  public static RegularExpressionFactory init(){  try {    RegularExpressionFactory theRegularExpressionFactory=(RegularExpressionFactory)EPackage.Registry.INSTANCE.getEFactory(RegularExpressionPackage.eNS_URI);    if (theRegularExpressionFactory != null) {      return theRegularExpressionFactory;    }  } catch (  Exception exception) {    EcorePlugin.INSTANCE.log(exception);  }  return new RegularExpressionFactoryImpl();}  }
class C{  private void startIfReady(Animator dependencyAnimation){  if (mAnimatorSet.mTerminated) {    return;  }  Dependency dependencyToRemove=null;  int numDependencies=mNode.tmpDependencies.size();  for (int i=0; i < numDependencies; ++i) {    Dependency dependency=mNode.tmpDependencies.get(i);    if (dependency.rule == mRule && dependency.node.animation == dependencyAnimation) {      dependencyToRemove=dependency;      dependencyAnimation.removeListener(this);      break;    }  }  mNode.tmpDependencies.remove(dependencyToRemove);  if (mNode.tmpDependencies.size() == 0) {    mNode.animation.start();    mAnimatorSet.mPlayingSet.add(mNode.animation);  }}  }
class C{  static String normalizeAT(String str){  String at=str.toUpperCase().trim();  if (at.startsWith("OID")) {    at=at.substring(3);  }  return at;}  }
class C{  public void clear(){  attr.clear();  entries.clear();}  }
class C{  public EObject value(){  throw new UnsupportedOperationException();}  }
class C{  public PatternFollowedByExpr add(PatternExpr expr){  this.getChildren().add(expr);  return this;}  }
class C{  public static Chest chest(String name){  if (name.equals(DEFAULT_DB_NAME))   throw new IronException(DEFAULT_DB_NAME + " name is reserved for default library name");  return getChest(name);}  }
class C{  private JPanel createHistogramPanel(Node selected){  DataSet dataSet=(DataSet)dataEditor.getSelectedDataModel();  Histogram histogram=new Histogram(dataSet);  histogram.setTarget(selected == null ? null : selected.getName());  HistogramView view=new HistogramView(histogram);  Box box=Box.createHorizontalBox();  box.add(view);  box.add(Box.createHorizontalStrut(5));  box.add(Box.createHorizontalGlue());  Box vBox=Box.createVerticalBox();  vBox.add(Box.createVerticalStrut(15));  vBox.add(box);  vBox.add(Box.createVerticalStrut(5));  JPanel panel=new JPanel();  panel.setLayout(new BorderLayout());  panel.add(vBox,BorderLayout.CENTER);  return panel;}  }
class C{  protected String decorate(String aName){  return aName;}  }
class C{  public boolean[] toArray(int start,int len){  int remaining=len;  int pos=0;  boolean[] array=new boolean[len];  if (len == 0) {    return array;  }  int i=0;  while (start >= buffers[i].length) {    start-=buffers[i].length;    i++;  }  while (i < buffersCount) {    boolean[] buf=buffers[i];    int c=Math.min(buf.length - start,remaining);    System.arraycopy(buf,start,array,pos,c);    pos+=c;    remaining-=c;    if (remaining == 0) {      break;    }    start=0;    i++;  }  return array;}  }
class C{  @Override public boolean hasState(){  return hasState;}  }
class C{  private boolean projectIssueHasReceipt(int M_InOutLine_ID){  if (m_projectIssues == null)   m_projectIssues=m_project.getIssues();  for (int i=0; i < m_projectIssues.length; i++) {    if (m_projectIssues[i].getM_InOutLine_ID() == M_InOutLine_ID)     return true;  }  return false;}  }
class C{  public boolean startPrefixMapping(String prefix,String uri,boolean shouldFlush) throws org.xml.sax.SAXException {  boolean pushed;  int pushDepth;  if (shouldFlush) {    flushPending();    pushDepth=m_elemContext.m_currentElemDepth + 1;  } else {    pushDepth=m_elemContext.m_currentElemDepth;  }  pushed=m_prefixMap.pushNamespace(prefix,uri,pushDepth);  if (pushed) {    String name;    if (EMPTYSTRING.equals(prefix)) {      name="xmlns";      addAttributeAlways(XMLNS_URI,name,name,"CDATA",uri,false);    } else {      if (!EMPTYSTRING.equals(uri)) {        name="xmlns:" + prefix;        addAttributeAlways(XMLNS_URI,prefix,name,"CDATA",uri,false);      }    }  }  return pushed;}  }
class C{  @VisibleForTesting void addCoinbaseTransaction(byte[] pubKeyTo,Coin value,final int height){  unCacheTransactions();  transactions=new ArrayList<Transaction>();  Transaction coinbase=new Transaction(params);  final ScriptBuilder inputBuilder=new ScriptBuilder();  if (height >= Block.BLOCK_HEIGHT_GENESIS) {    inputBuilder.number(height);  }  inputBuilder.data(new byte[]{(byte)txCounter,(byte)(txCounter++ >> 8)});  coinbase.addInput(new TransactionInput(params,coinbase,inputBuilder.build().getProgram()));  coinbase.addOutput(new TransactionOutput(params,coinbase,value,ScriptBuilder.createOutputScript(ECKey.fromPublicOnly(pubKeyTo)).getProgram()));  transactions.add(coinbase);  coinbase.setParent(this);  coinbase.length=coinbase.unsafeBitcoinSerialize().length;  adjustLength(transactions.size(),coinbase.length);}  }
class C{  private void processNewText(){  Logger.log("entered");  while (hasNextChar()) {    char character=getNextChar();switch (ansiState) {case ANSISTATE_INITIAL:switch (character) {case '\u0000':        break;case '\u0007':      processBEL();    break;case '\b':  processBackspace();break;case '\t':processTab();break;case '\n':processNewline();if (fCrAfterNewLine) processCarriageReturn();break;case '\r':processCarriageReturn();break;case '\u001b':ansiState=ANSISTATE_ESCAPE;break;default :processNonControlCharacters(character);break;}break;case ANSISTATE_ESCAPE:switch (character) {case '[':ansiState=ANSISTATE_EXPECTING_PARAMETER_OR_COMMAND;nextAnsiParameter=0;for (int i=0; i < ansiParameters.length; ++i) {ansiParameters[i].delete(0,ansiParameters[i].length());}break;case ']':ansiState=ANSISTATE_EXPECTING_OS_COMMAND;ansiOsCommand.delete(0,ansiOsCommand.length());break;case ')':case '(':case '*':case '+':case '-':case '.':case '/':ansiState=ANSISTATE_EXPECTING_CHARSET_DESIGNATION;break;case '7':ansiState=ANSISTATE_INITIAL;break;case '8':ansiState=ANSISTATE_INITIAL;moveCursor(savedCursorLine,savedCursorColumn);break;case 'c':ansiState=ANSISTATE_INITIAL;break;default :Logger.log("Unsupported escape sequence: escape '" + character + "'");ansiState=ANSISTATE_INITIAL;break;}break;case ANSISTATE_EXPECTING_PARAMETER_OR_COMMAND:if (character == '?') {ansiState=ANSISTATE_EXPECTING_DEC_PRIVATE_COMMAND;break;}if (character == '@' || (character >= 'A' && character <= 'Z') || (character >= 'a' && character <= 'z')) {ansiState=ANSISTATE_INITIAL;processAnsiCommandCharacter(character);} else {processAnsiParameterCharacter(character);}break;case ANSISTATE_EXPECTING_OS_COMMAND:if (character == '\u0007') {ansiState=ANSISTATE_INITIAL;processAnsiOsCommand();} else {ansiOsCommand.append(character);}break;case ANSISTATE_EXPECTING_DEC_PRIVATE_COMMAND:if (character == '@' || (character >= 'A' && character <= 'Z') || (character >= 'a' && character <= 'z')) {ansiState=ANSISTATE_INITIAL;processDecPrivateCommandCharacter(character);} else {processAnsiParameterCharacter(character);}break;case ANSISTATE_EXPECTING_CHARSET_DESIGNATION:if (character != '%') ansiState=ANSISTATE_INITIAL;break;default :Logger.log("INVALID ANSI FSA STATE: " + ansiState);ansiState=ANSISTATE_INITIAL;break;}}}  }
class C{  public static String rate2speed(double rate){  return NUMBER_FORMAT0.format(rate) + " " + GENERAL_UNIT_KBPSEC;}  }
class C{  public int rows(){  return rows;}  }
class C{  @Override public boolean isSearchable(int columnIndex){  return true;}  }
class C{  private static ClassNode loadClass(String name,Config config) throws Exception {  String filePath=config.getClassDumpPath() + name.replace('.','/') + ".class";  ClassReader reader=new ClassReader(new FileInputStream(filePath));  ClassNode node=new ClassNode();  reader.accept(node,ClassReader.EXPAND_FRAMES);  return node;}  }
class C{  public static String shardNameFromDBName(String dbName){  String[] tokens=dbName.split("_");  return tokens[1];}  }
class C{  void move(int touchX,int touchY){  setTranslationX(touchX - mRegistrationX + (int)mOffsetX);  setTranslationY(touchY - mRegistrationY + (int)mOffsetY);}  }
class C{  public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof RelativeStrengthIndexDataset)) {    return false;  }  RelativeStrengthIndexDataset that=(RelativeStrengthIndexDataset)obj;  if (!this.xPosition.equals(that.xPosition)) {    return false;  }  return ObjectUtilities.equal(this.data,that.data);}  }
class C{  @Nullable public String readCurrentRevision(){  if (!isDirStateInfoAvailable())   return null;  try {    return Hex.encodeHexString(readHashBytesFromFile(myDirStateFile));  } catch (  IOException e) {    LOG.error("IOException while trying to read current repository state information.",e);    return null;  }}  }
class C{  @Dev public EquipRandomItemAction(final Map<String,Integer> items,final boolean bind){  this.items=items;  this.bind=bind;}  }
class C{  private int find(T key,boolean modify){  if (mapType == MapType.SORTED_LIST) {    int i=binarySearch(key);    if (i < num && keys[i] != null && key.equals(keys[i]))     return i;    if (modify) {      if (locked)       throw new RuntimeException("Cannot make new entry for " + key + ", because map is locked");      if (num == capacity())       changeSortedListCapacity(getCapacity(num + 1,false));      for (int j=num; j > i; j--) {        keys[j]=keys[j - 1];        values[j]=values[j - 1];      }      num++;      values[i]=Double.NaN;      return i;    } else     return -1;  } else   if (mapType == MapType.HASH_TABLE) {    int capacity=capacity();    int keyHash=hash(key);    int i=keyHash % capacity;    if (i < 0)     i=-i;    if (!locked && modify && (num > loadFactor * capacity || capacity <= num + 1)) {      switchMapType(MapType.HASH_TABLE);      return find(key,modify);    }    if (num == capacity)     throw new RuntimeException("Hash table is full: " + capacity);    while (keys[i] != null && !keys[i].equals(key)) {      i++;      numCollisions++;      if (i == capacity)       i=0;    }    if (keys[i] != null) {      assert key.equals(keys[i]);      return i;    }    if (modify) {      num++;      values[i]=Double.NaN;      return i;    } else     return -1;  } else   throw new RuntimeException("Internal bug: " + mapType);}  }
class C{  public void draw(float[] mvpMatrix){  mLayer=mData.getActualLayer();  int layerMin=mLayer - LAYERS_TO_RENDER;  int vertexCount=0;  int vertexCountMin=0;  for (int i=0; i < mLayerArray.length; i++)   if (mLayerArray[i] <= mLayer)   vertexCount++;  for (int i=0; i < mLayerArray.length; i++)   if (mLayerArray[i] <= layerMin)   vertexCountMin++;  int length=0;  GLES20.glUseProgram(mProgram);  GLES20.glBlendFunc(GLES20.GL_SRC_COLOR,GLES20.GL_CONSTANT_COLOR);  mPositionHandle=GLES20.glGetAttribLocation(mProgram,"a_Position");  GLES20.glVertexAttribPointer(mPositionHandle,COORDS_PER_VERTEX,GLES20.GL_FLOAT,false,VERTEX_STRIDE,mVertexBuffer);  GLES20.glEnableVertexAttribArray(mPositionHandle);  mColorHandle=GLES20.glGetAttribLocation(mProgram,"a_Color");  ViewerRenderer.checkGlError("glGetAttribLocation");  GLES20.glVertexAttribPointer(mColorHandle,COLORS_PER_VERTEX,GLES20.GL_FLOAT,false,COLORS_STRIDE,mColorBuffer);  GLES20.glEnableVertexAttribArray(mColorHandle);  mMVPMatrixHandle=GLES20.glGetUniformLocation(mProgram,"u_MVPMatrix");  ViewerRenderer.checkGlError("glGetUniformLocation");  GLES20.glUniformMatrix4fv(mMVPMatrixHandle,1,false,mvpMatrix,0);  ViewerRenderer.checkGlError("glUniformMatrix4fv");  for (int i=0; i < mLineLength.size(); i++) {    if (mLineLength.get(i) > 1) {      if (mTypeArray[length] != DataStorage.FILL || length > vertexCountMin)       GLES20.glDrawArrays(GLES20.GL_LINE_STRIP,length,mLineLength.get(i));      if (length >= vertexCount)       break;    }    length+=mLineLength.get(i);  }}  }
class C{  private void checkAccess(UnixPath file,boolean checkRead,boolean checkWrite){  SecurityManager sm=System.getSecurityManager();  if (sm != null) {    if (checkRead)     file.checkRead();    if (checkWrite)     file.checkWrite();    sm.checkPermission(new RuntimePermission("accessUserInformation"));  }}  }
class C{  @Override public void deleteTableFiles(){  new File(filename).delete();  getRollBackFile(filename).delete();}  }
class C{  public boolean containsConstituent(Constituent c){  return constituents.contains(c);}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0xFCF8C055,version=150) public int sceHttpDeleteTemplate(int templateId){  return 0;}  }
class C{  @Override protected double solveImpl(final Ops.DoubleOp f,final double xAccuracy){  double fl, fh, xl, xh, dx, del, froot;  if (fxMin < 0.0) {    xl=xMin;    fl=fxMin;    xh=xMax;    fh=fxMax;  } else {    xl=xMax;    fl=fxMax;    xh=xMin;    fh=fxMin;  }  dx=xh - xl;  while (evaluationNumber <= getMaxEvaluations()) {    root=xl + dx * fl / (fl - fh);    froot=f.op(root);    evaluationNumber++;    if (froot < 0.0) {      del=xl - root;      xl=root;      fl=froot;    } else {      del=xh - root;      xh=root;      fh=froot;    }    dx=xh - xl;    if (Math.abs(del) < xAccuracy || froot == 0.0)     return root;  }  throw new ArithmeticException("maximum number of function evaluations exceeded");}  }
class C{  public Boolean isReadOnly(){  return readOnly;}  }
class C{  private void checkUserMappingAttribute(List<UserMappingParam> params){  if (params == null) {    return;  }  for (  UserMappingParam param : params) {    List<UserMappingAttributeParam> attrs=param.getAttributes();    if (attrs != null) {      for (      UserMappingAttributeParam attr : attrs) {        if (StringUtils.isEmpty(attr.getKey()) || CollectionUtils.isEmpty(attr.getValues())) {          throw BadRequestException.badRequests.userMappingAttributeIsEmpty();        }        for (        String value : attr.getValues()) {          if (StringUtils.isEmpty(value)) {            throw BadRequestException.badRequests.userMappingAttributeIsEmpty();          }        }      }    }  }}  }
class C{  private BigInteger modPow2(BigInteger exponent,int p){  BigInteger result=ONE;  BigInteger baseToPow2=this.mod2(p);  int expOffset=0;  int limit=exponent.bitLength();  if (this.testBit(0))   limit=(p - 1) < limit ? (p - 1) : limit;  while (expOffset < limit) {    if (exponent.testBit(expOffset))     result=result.multiply(baseToPow2).mod2(p);    expOffset++;    if (expOffset < limit)     baseToPow2=baseToPow2.square().mod2(p);  }  return result;}  }
class C{  public boolean initStream(ReadStream readStream,ReadStream rawStream) throws IOException {  readStream.init(_inStream);  return true;}  }
class C{  @Override protected DF_LatticeCell makeCell(Object key){  return new DominatorCell((BasicBlock)key,ir);}  }
class C{  void doMatchEnds(java.awt.event.ActionEvent e){  int first=_cvMap.get(cvList[0]).getValue();  int last=_cvMap.get(cvList[nValues - 1]).getValue();  log.debug(" first=" + first + " last="+ last);  _cvMap.get(cvList[0]).setValue(last);  for (int i=0; i < nValues; i++) {    int value=first + i * (last - first) / (nValues - 1);    _cvMap.get(cvList[i]).setValue(value);  }}  }
class C{  public void testRandomStrings() throws Exception {  Analyzer analyzer=new CzechAnalyzer();  checkRandomData(random(),analyzer,1000 * RANDOM_MULTIPLIER);  analyzer.close();}  }
class C{  private void generateMRJobs(ArrayList<Lop> execNodes,ArrayList<Instruction> inst,ArrayList<Instruction> writeinst,ArrayList<Instruction> deleteinst,ArrayList<ArrayList<Lop>> jobNodes) throws LopsException, DMLRuntimeException {  printJobNodes(jobNodes);  ArrayList<Instruction> rmvarinst=new ArrayList<Instruction>();  for (  JobType jt : JobType.values()) {    if (jt == JobType.INVALID || jt == JobType.ANY)     continue;    int index=jt.getId();    ArrayList<Lop> currNodes=jobNodes.get(index);    if (currNodes != null && !currNodes.isEmpty()) {      if (LOG.isTraceEnabled())       LOG.trace("Generating " + jt.getName() + " job");      if (jt.allowsRecordReaderInstructions() && hasANode(jobNodes.get(index),ExecLocation.RecordReader)) {        ArrayList<ArrayList<Lop>> rrlist=splitGMRNodesByRecordReader(jobNodes.get(index));        for (int i=0; i < rrlist.size(); i++) {          generateMapReduceInstructions(rrlist.get(i),inst,writeinst,deleteinst,rmvarinst,jt);        }      } else       if (jt.allowsSingleShuffleInstruction()) {        Lop.Type splittingLopType=jt.getShuffleLopType();        ArrayList<Lop> nodesForASingleJob=new ArrayList<Lop>();        for (int i=0; i < jobNodes.get(index).size(); i++) {          if (jobNodes.get(index).get(i).getType() == splittingLopType) {            nodesForASingleJob.clear();            nodesForASingleJob.add(jobNodes.get(index).get(i));            addChildren(jobNodes.get(index).get(i),nodesForASingleJob,jobNodes.get(index));            if (jt.isCompatibleWithParentNodes()) {              addParents(jobNodes.get(index).get(i),nodesForASingleJob,jobNodes.get(index));            }            generateMapReduceInstructions(nodesForASingleJob,inst,writeinst,deleteinst,rmvarinst,jt);          }        }      } else {        generateMapReduceInstructions(jobNodes.get(index),inst,writeinst,deleteinst,rmvarinst,jt);      }    }  }  inst.addAll(rmvarinst);}  }
class C{  public ZyGraphViewSettings(final ZyGraphViewSettings settings){  Preconditions.checkNotNull(settings,"IE00875: Settings argument can't be null");  m_layoutSettings=new ZyGraphLayoutSettings(settings.getLayoutSettings());  m_proximitySettings=new ZyGraphProximitySettings(settings.getProximitySettings());  m_searchSettings=new ZyGraphSearchSettings(settings.getSearchSettings());  m_edgeSettings=new ZyGraphEdgeSettings(settings.getEdgeSettings());  m_displaySettings=new ZyGraphDisplaySettings(settings.getDisplaySettings());  m_mouseSettings=new ZyGraphMouseSettings(settings.getMouseSettings());}  }
class C{  public static void trimIndentation(String[] lines,int tabWidth,int indentWidth){  trimIndentation(lines,tabWidth,indentWidth,true);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:10.268 -0500",hash_original_method="3E3F3B80F1885FD18E0677AD75F46948",hash_generated_method="5B6D4228F03D9A4091FE3AEDB1F8F662") public int previous(){  return this.icuIterator.previous();}  }
class C{  public final void push(Address addr1,Address addr2){  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(!addr1.isZero());  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(!addr2.isZero());  checkHeadInsert(2);  uncheckedHeadInsert(addr2);  uncheckedHeadInsert(addr1);}  }
class C{  public static boolean isColliding(HitBox box1,HitBox box2,double angle1,double angle2){  populateAxes(angle1);  populateAxes(angle2);  corners(box1,angle1,corners1);  corners(box2,angle2,corners2);  boolean result=true;  for (  Vec2 axis : axes) {    float e1Min=getMin(corners1,axis);    float e1Max=getMax(corners1,axis);    float e2Min=getMin(corners2,axis);    float e2Max=getMax(corners2,axis);    if (e1Max < e2Min || e2Max < e1Min) {      result=false;      break;    }  }  cleanArrays();  return result;}  }
class C{  public void end(){  final ScriptObjectMirror end=getFunction(END);  if (end != null) {    try {      end.call(null);    } catch (    RuntimeException e) {      throw new NoTalkbackSlimException("Can't evaluate end function: " + StringUtils.LS + e.getMessage());    }  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static void I2OSP(int value,byte[] output,int outOff){  output[outOff++]=(byte)value;  output[outOff++]=(byte)(value >>> 8);  output[outOff++]=(byte)(value >>> 16);  output[outOff++]=(byte)(value >>> 24);}  }
class C{  public double cumulativeCV(BayesNet bayesNet) throws Exception {  m_BayesNet=bayesNet;  double fAccuracy=0.0;  double fWeight=0.0;  Instances instances=bayesNet.m_Instances;  bayesNet.initCPTs();  for (int iInstance=0; iInstance < instances.numInstances(); iInstance++) {    Instance instance=instances.instance(iInstance);    fAccuracy+=accuracyIncrease(instance);    bayesNet.updateClassifier(instance);    fWeight+=instance.weight();  }  return fAccuracy / fWeight;}  }
class C{  public static Match fromString(String match,OFVersion ofVersion) throws IllegalArgumentException {  boolean ver10=false;  if (match.equals("") || match.equalsIgnoreCase("any") || match.equalsIgnoreCase("all")|| match.equals("[]")) {    match="Match[]";  }  String[] tokens=match.split("[\\[,\\]]");  int initArg=0;  if (tokens[0].equals("Match")) {    initArg=1;  }  int i;  String[] tmp;  ArrayDeque<String[]> llValues=new ArrayDeque<String[]>();  for (i=initArg; i < tokens.length; i++) {    tmp=tokens[i].split("=");    if (tmp.length != 2) {      throw new IllegalArgumentException("Token " + tokens[i] + " does not have form 'key=value' parsing "+ match);    }    tmp[0]=tmp[0].toLowerCase();    llValues.add(tmp);  }  Match.Builder mb=OFFactories.getFactory(ofVersion).buildMatch();  if (ofVersion.equals(OFVersion.OF_10)) {    ver10=true;  }  while (!llValues.isEmpty()) {    IpProtocol ipProto=null;    String[] key_value=llValues.pollFirst();switch (key_value[0]) {case STR_IN_PORT:      mb.setExact(MatchField.IN_PORT,OFPort.of(Integer.valueOf(key_value[1])));    break;case STR_DL_DST:  mb.setExact(MatchField.ETH_DST,MacAddress.of(key_value[1]));break;case STR_DL_SRC:mb.setExact(MatchField.ETH_SRC,MacAddress.of(key_value[1]));break;case STR_DL_TYPE:if (key_value[1].startsWith("0x")) {mb.setExact(MatchField.ETH_TYPE,EthType.of(Integer.valueOf(key_value[1].replaceFirst("0x",""),16)));} else {mb.setExact(MatchField.ETH_TYPE,EthType.of(Integer.valueOf(key_value[1])));}break;case STR_DL_VLAN:if (key_value[1].contains("0x")) {mb.setExact(MatchField.VLAN_VID,OFVlanVidMatch.ofVlan(Integer.valueOf(key_value[1].replaceFirst("0x",""),16)));} else {mb.setExact(MatchField.VLAN_VID,OFVlanVidMatch.ofVlan(Integer.valueOf(key_value[1])));}break;case STR_DL_VLAN_PCP:if (key_value[1].startsWith("0x")) {mb.setExact(MatchField.VLAN_PCP,VlanPcp.of(U8.t(Short.valueOf(key_value[1].replaceFirst("0x",""),16))));} else {mb.setExact(MatchField.VLAN_PCP,VlanPcp.of(U8.t(Short.valueOf(key_value[1]))));}break;case STR_NW_DST:mb.setMasked(MatchField.IPV4_DST,IPv4AddressWithMask.of(key_value[1]));break;case STR_NW_SRC:mb.setMasked(MatchField.IPV4_SRC,IPv4AddressWithMask.of(key_value[1]));break;case STR_IPV6_DST:if (ver10 == true) {throw new IllegalArgumentException("OF Version incompatible");}mb.setMasked(MatchField.IPV6_DST,IPv6AddressWithMask.of(key_value[1]));break;case STR_IPV6_SRC:if (ver10 == true) {throw new IllegalArgumentException("OF Version incompatible");}mb.setMasked(MatchField.IPV6_SRC,IPv6AddressWithMask.of(key_value[1]));break;case STR_IPV6_FLOW_LABEL:if (ver10 == true) {throw new IllegalArgumentException("OF Version incompatible");}if (key_value[1].startsWith("0x")) {mb.setExact(MatchField.IPV6_FLABEL,IPv6FlowLabel.of(Integer.parseInt(key_value[1].replaceFirst("0x",""),16)));} else {mb.setExact(MatchField.IPV6_FLABEL,IPv6FlowLabel.of(Integer.parseInt(key_value[1])));}break;case STR_NW_PROTO:if (key_value[1].startsWith("0x")) {mb.setExact(MatchField.IP_PROTO,IpProtocol.of(Short.valueOf(key_value[1].replaceFirst("0x",""),16)));} else {mb.setExact(MatchField.IP_PROTO,IpProtocol.of(Short.valueOf(key_value[1])));}break;case STR_NW_TOS:if (key_value[1].startsWith("0x")) {mb.setExact(MatchField.IP_ECN,IpEcn.of(U8.t(Short.valueOf(key_value[1].replaceFirst("0x",""),16))));mb.setExact(MatchField.IP_DSCP,IpDscp.of(U8.t(Short.valueOf(key_value[1].replaceFirst("0x",""),16))));} else {mb.setExact(MatchField.IP_ECN,IpEcn.of(U8.t(Short.valueOf(key_value[1]))));mb.setExact(MatchField.IP_DSCP,IpDscp.of(U8.t(Short.valueOf(key_value[1]))));}break;case STR_NW_ECN:if (key_value[1].startsWith("0x")) {mb.setExact(MatchField.IP_ECN,IpEcn.of(U8.t(Short.valueOf(key_value[1].replaceFirst("0x",""),16))));} else {mb.setExact(MatchField.IP_ECN,IpEcn.of(U8.t(Short.valueOf(key_value[1]))));}break;case STR_NW_DSCP:if (key_value[1].startsWith("0x")) {mb.setExact(MatchField.IP_DSCP,IpDscp.of(U8.t(Short.valueOf(key_value[1].replaceFirst("0x",""),16))));} else {mb.setExact(MatchField.IP_DSCP,IpDscp.of(U8.t(Short.valueOf(key_value[1]))));}break;case STR_SCTP_DST:if (mb.get(MatchField.IP_PROTO) == null) {llValues.add(key_value);} else {mb.setExact(MatchField.SCTP_DST,TransportPort.of(Integer.valueOf(key_value[1])));}break;case STR_SCTP_SRC:if (mb.get(MatchField.IP_PROTO) == null) {llValues.add(key_value);} else {mb.setExact(MatchField.SCTP_SRC,TransportPort.of(Integer.valueOf(key_value[1])));}break;case STR_UDP_DST:if (mb.get(MatchField.IP_PROTO) == null) {llValues.add(key_value);} else {mb.setExact(MatchField.UDP_DST,TransportPort.of(Integer.valueOf(key_value[1])));}break;case STR_UDP_SRC:if (mb.get(MatchField.IP_PROTO) == null) {llValues.add(key_value);} else {mb.setExact(MatchField.UDP_SRC,TransportPort.of(Integer.valueOf(key_value[1])));}break;case STR_TCP_DST:if (mb.get(MatchField.IP_PROTO) == null) {llValues.add(key_value);} else {mb.setExact(MatchField.TCP_DST,TransportPort.of(Integer.valueOf(key_value[1])));}break;case STR_TCP_SRC:if (mb.get(MatchField.IP_PROTO) == null) {llValues.add(key_value);} else {mb.setExact(MatchField.TCP_SRC,TransportPort.of(Integer.valueOf(key_value[1])));}break;case STR_TP_DST:if ((ipProto=mb.get(MatchField.IP_PROTO)) == null) {llValues.add(key_value);} else if (ipProto == IpProtocol.TCP) {mb.setExact(MatchField.TCP_DST,TransportPort.of(Integer.valueOf(key_value[1])));} else if (ipProto == IpProtocol.UDP) {mb.setExact(MatchField.UDP_DST,TransportPort.of(Integer.valueOf(key_value[1])));} else if (ipProto == IpProtocol.SCTP) {mb.setExact(MatchField.SCTP_DST,TransportPort.of(Integer.valueOf(key_value[1])));}break;case STR_TP_SRC:if ((ipProto=mb.get(MatchField.IP_PROTO)) == null) {llValues.add(key_value);} else if (ipProto == IpProtocol.TCP) {mb.setExact(MatchField.TCP_SRC,TransportPort.of(Integer.valueOf(key_value[1])));} else if (ipProto == IpProtocol.UDP) {mb.setExact(MatchField.UDP_SRC,TransportPort.of(Integer.valueOf(key_value[1])));} else if (ipProto == IpProtocol.SCTP) {mb.setExact(MatchField.SCTP_SRC,TransportPort.of(Integer.valueOf(key_value[1])));}break;case STR_ICMP_TYPE:if (key_value[1].startsWith("0x")) {mb.setExact(MatchField.ICMPV4_TYPE,ICMPv4Type.of(Short.parseShort(key_value[1].replaceFirst("0x",""),16)));} else {mb.setExact(MatchField.ICMPV4_TYPE,ICMPv4Type.of(Short.parseShort(key_value[1])));}break;case STR_ICMP_CODE:if (key_value[1].startsWith("0x")) {mb.setExact(MatchField.ICMPV4_CODE,ICMPv4Code.of(Short.parseShort(key_value[1].replaceFirst("0x",""),16)));} else {mb.setExact(MatchField.ICMPV4_CODE,ICMPv4Code.of(Short.parseShort(key_value[1])));}break;case STR_ICMPV6_TYPE:if (ver10 == true) {throw new IllegalArgumentException("OF Version incompatible");}mb.setExact(MatchField.ICMPV6_TYPE,U8.of(Short.parseShort(key_value[1])));break;case STR_ICMPV6_CODE:if (ver10 == true) {throw new IllegalArgumentException("OF Version incompatible");}mb.setExact(MatchField.ICMPV6_CODE,U8.of(Short.parseShort(key_value[1])));break;case STR_IPV6_ND_SSL:if (ver10 == true) {throw new IllegalArgumentException("OF Version incompatible");}mb.setExact(MatchField.IPV6_ND_SLL,MacAddress.of(key_value[1]));break;case STR_IPV6_ND_TTL:if (ver10 == true) {throw new IllegalArgumentException("OF Version incompatible");}mb.setExact(MatchField.IPV6_ND_TLL,MacAddress.of(key_value[1]));break;case STR_IPV6_ND_TARGET:if (ver10 == true) {throw new IllegalArgumentException("OF Version incompatible");}mb.setExact(MatchField.IPV6_ND_TARGET,IPv6Address.of(key_value[1]));break;case STR_ARP_OPCODE:if (key_value[1].startsWith("0x")) {mb.setExact(MatchField.ARP_OP,ArpOpcode.of(Integer.parseInt(key_value[1].replaceFirst("0x",""),16)));} else {mb.setExact(MatchField.ARP_OP,ArpOpcode.of(Integer.parseInt(key_value[1])));}break;case STR_ARP_SHA:mb.setExact(MatchField.ARP_SHA,MacAddress.of(key_value[1]));break;case STR_ARP_DHA:mb.setExact(MatchField.ARP_THA,MacAddress.of(key_value[1]));break;case STR_ARP_SPA:mb.setExact(MatchField.ARP_SPA,IPv4Address.of(key_value[1]));break;case STR_ARP_DPA:mb.setExact(MatchField.ARP_TPA,IPv4Address.of(key_value[1]));break;case STR_MPLS_LABEL:if (key_value[1].startsWith("0x")) {mb.setExact(MatchField.MPLS_LABEL,U32.of(Long.parseLong(key_value[1].replaceFirst("0x",""),16)));} else {mb.setExact(MatchField.MPLS_LABEL,U32.of(Long.parseLong(key_value[1])));}break;case STR_MPLS_TC:if (key_value[1].startsWith("0x")) {mb.setExact(MatchField.MPLS_TC,U8.of(Short.parseShort(key_value[1].replaceFirst("0x",""),16)));} else {mb.setExact(MatchField.MPLS_TC,U8.of(Short.parseShort(key_value[1])));}break;case STR_MPLS_BOS:mb.setExact(MatchField.MPLS_BOS,key_value[1].equalsIgnoreCase("true") ? OFBooleanValue.TRUE : OFBooleanValue.FALSE);break;case STR_METADATA:if (key_value[1].startsWith("0x")) {mb.setExact(MatchField.METADATA,OFMetadata.ofRaw(Long.parseLong(key_value[1].replaceFirst("0x",""),16)));} else {mb.setExact(MatchField.METADATA,OFMetadata.ofRaw(Long.parseLong(key_value[1])));}break;case STR_TUNNEL_ID:if (key_value[1].startsWith("0x")) {mb.setExact(MatchField.TUNNEL_ID,U64.of(Long.parseLong(key_value[1].replaceFirst("0x",""),16)));} else {mb.setExact(MatchField.TUNNEL_ID,U64.of(Long.parseLong(key_value[1])));}break;case STR_PBB_ISID:break;default :throw new IllegalArgumentException("unknown token " + key_value + " parsing "+ match);}}return mb.build();}  }
class C{  private void tryScrollBackToTopAbortRefresh(){  tryScrollBackToTop();}  }
class C{  public String readLine() throws IOException {  boolean gotCR=false, gotLF=false;  pos=0;  lineBuf=new StringBuffer();  while (!gotLF) {    int c=is.read();    if (c == -1) {      return null;    }    if (gotCR) {      if (c == LF) {        gotLF=true;      } else {        gotCR=false;        consume(CR);        consume(c);      }    } else {      if (c == CR) {        gotCR=true;      } else {        consume(c);      }    }  }  lineBuf.append(buf,0,pos);  return new String(lineBuf);}  }
class C{  public void sensorChange(int offset,int newState){  if (sensorArray[offset] != null && sensorLastSetting[offset] != newState) {    sensorLastSetting[offset]=newState;    if (log.isDebugEnabled()) {      String newStateStr="Active";      if (newState == Sensor.INACTIVE) {        newStateStr="Inactive";      }      log.debug("setting sensor " + sensorArray[offset].getSystemName() + ": "+ newStateStr);    }    try {      sensorArray[offset].setKnownState(newState);    } catch (    JmriException e) {      log.error("exception in sensorChange: " + e);    }  }}  }
class C{  public AuthenticationRequiredException(String message){  super(message);}  }
class C{  public synchronized long stopTime(){  return stopTime;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:09.452 -0500",hash_original_method="CFCF8DDC5EB4FA9E7ADB1DEB9CFAFA89",hash_generated_method="7620E865C473FDF4D70E129E45CC80E9") public void removeCategory(String category){  if (mCategories != null) {    mCategories.remove(category);    if (mCategories.size() == 0) {      mCategories=null;    }  }}  }
class C{  public MaterialFilePicker withSupportFragment(android.support.v4.app.Fragment fragment){  if (mActivity != null || mFragment != null) {    throw new RuntimeException("You must pass either Activity, Fragment or SupportFragment");  }  mSupportFragment=fragment;  return this;}  }
class C{  public void put(final SessionId id,final SessionTicket ticket){  if (id != null && ticket != null) {    DatagramWriter writer=new DatagramWriter();    ticket.encode(writer);    cache.put(id,writer.toByteArray());  }}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  if (newRecord || is_ValueChanged("Percentage") || is_ValueChanged("IsActive")) {    log.fine("afterSave");    getParent();    m_parent.validate();    m_parent.saveEx();  }  return success;}  }
class C{  public H264Stream(int cameraId){  super(cameraId);  mMimeType="video/avc";  mCameraImageFormat=ImageFormat.NV21;  mVideoEncoder=MediaRecorder.VideoEncoder.H264;  mPacketizer=new H264Packetizer();}  }
class C{  public static long parseLong(String text){  return parseLong(text,0);}  }
class C{  private void disconnect(){  try {    if (connected) {      mqttClient.disconnect();      out(getDate() + Messages.MqttClientView_24);    } else {      out(getDate() + Messages.MqttClientView_25);    }  } catch (  MqttException e) {    out(getDate() + Messages.MqttClientView_26 + e.getMessage());  }  connected=false;}  }
class C{  public static final String replace(String string,String oldString,String newString){  if (string == null) {    return null;  }  if (newString == null) {    return string;  }  int i=0;  if ((i=string.indexOf(oldString,i)) >= 0) {    char[] string2=string.toCharArray();    char[] newString2=newString.toCharArray();    int oLength=oldString.length();    StringBuilder buf=new StringBuilder(string2.length);    buf.append(string2,0,i).append(newString2);    i+=oLength;    int j=i;    while ((i=string.indexOf(oldString,i)) > 0) {      buf.append(string2,j,i - j).append(newString2);      i+=oLength;      j=i;    }    buf.append(string2,j,string2.length - j);    return buf.toString();  }  return string;}  }
class C{  public NeExpr newNeExpr(Value op1,Value op2){  return new JNeExpr(op1,op2);}  }
class C{  @Override public int size(){  return this._map.size();}  }
class C{  public final DD negate(){  if (isNaN())   return this;  return new DD(-hi,-lo);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_TRACE_ENTITY_1__TRACE_ENTITY_1:    return TRACE_ENTITY_1_EDEFAULT == null ? trace_entity_1 != null : !TRACE_ENTITY_1_EDEFAULT.equals(trace_entity_1);}return super.eIsSet(featureID);}  }
class C{  public ResistanceMap(int width,int height){  this.width=width;  this.height=height;  map=new int[width][height];}  }
class C{  public VisibilityFilter(Predicate p){  setPredicate(p);}  }
class C{  protected void init(){  Date date=calendar.getTime();  calendar=Calendar.getInstance(locale);  calendar.setTime(date);  drawDayNames();  drawDays();}  }
class C{  protected FireworkEffectMetaBuilder(){  this.meta=Diorite.getCore().getItemFactory().construct(FireworkEffectMeta.class);}  }
class C{  public FichaVO updateFicha(FichaVO fichaVO){  try {    DbConnection conn=getConnection();    final String qual=new StringBuffer().append(" WHERE ").append(DBUtils.generateEQTokenField(CAMPO_ID,fichaVO.getId())).toString();    DbUpdateFns.update(conn,TABLE_NAME,COLUM_NAMES_LIST,new SigiaDbInputRecord(COL_DEFS,fichaVO),qual.toString());    return fichaVO;  } catch (  Exception e) {    logger.error(e.getMessage());    throw new DBException(e.getMessage());  }}  }
class C{  void bugMessage(Throwable ex){  out.println(getLocalizedString("msg.bug",JavaCompiler.version()));  ex.printStackTrace(out);}  }
class C{  private GeoUtils(){}  }
class C{  public ExecuteRequest(final String path,final String parameters){  this(new LwM2mPath(path),parameters);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public MqttPersistenceException(){  super(REASON_CODE_CLIENT_EXCEPTION);}  }
class C{  public void enable(){  RequestParameters params=new RequestParameters();  params.add("enable","true");  this.getServices().post(params,new StringHandle("{}"));}  }
class C{  @SuppressWarnings("UnusedReturnValue") public boolean signOut(Context ctx,String providerName){  Context appContext=ctx.getApplicationContext();  CookieManager cookieManager=CookieManager.getInstance();  cookieManager.removeAllCookie();  if (providerName != null) {    if (socialAuthManager.getConnectedProvidersIds().contains(providerName))     socialAuthManager.disconnectProvider(providerName);    Editor edit=PreferenceManager.getDefaultSharedPreferences(appContext).edit();    edit.remove(providerName + " key");    edit.apply();    Log.d("SocialAuthAdapter","Disconnecting Provider");    return true;  } else {    Log.d("SocialAuthAdapter","The provider name should be same");    return false;  }}  }
class C{  @SafeVarargs public final <Result,Progress>Promise<Collection<Result>,Progress> allOf(Promise<Result,Progress>... promises){  return allOf(Arrays.asList(promises));}  }
class C{  @Override public void onUIRefreshComplete(PtrFrameLayout frame){  mDrawable.stop();}  }
class C{  public static char[] readPassword(InputStream in) throws IOException {  return readPassword(in,false);}  }
class C{  public void openImageGallery(ActionListener response){  impl.openImageGallery(response);}  }
class C{  public Boolean hasBeenStopped(){  return runner.hasBeenStopped();}  }
class C{  private static ResultPoint[] findVertices(BitMatrix matrix,int startRow,int startColumn){  int height=matrix.getHeight();  int width=matrix.getWidth();  ResultPoint[] result=new ResultPoint[8];  copyToResult(result,findRowsWithPattern(matrix,height,width,startRow,startColumn,START_PATTERN),INDEXES_START_PATTERN);  if (result[4] != null) {    startColumn=(int)result[4].getX();    startRow=(int)result[4].getY();  }  copyToResult(result,findRowsWithPattern(matrix,height,width,startRow,startColumn,STOP_PATTERN),INDEXES_STOP_PATTERN);  return result;}  }
class C{  @Override public LinkedList<Hypothesis> refine(){  LinkedList<Hypothesis> result=new LinkedList<Hypothesis>();  Literal[] lits=new Literal[literals.length + 1];  for (int i=0; i < literals.length; i++) {    lits[i]=literals[i];  }  int lastLiteralIndex=literals[literals.length - 1].getIndex();  for (int literalIndex=lastLiteralIndex + 1; literalIndex < allLiterals.length; literalIndex++) {    for (int valueIndex=0; valueIndex < allLiterals[literalIndex].length; valueIndex++) {      lits[lits.length - 1]=allLiterals[literalIndex][valueIndex];      result.addLast(new Rule(lits,this.prediction));    }  }  return result;}  }
class C{  public NewDataWorldAction(Workspace workspace){  super("Data World",workspace);  putValue(SMALL_ICON,ResourceManager.getImageIcon("Table.png"));}  }
class C{  public NamedIcon(String pUrl,String pName){  super(FileUtil.findURL(pUrl));  URL u=FileUtil.findURL(pUrl);  if (u == null) {    log.warn("Could not load image from " + pUrl + " (file does not exist)");  }  mDefaultImage=getImage();  if (mDefaultImage == null) {    log.warn("Could not load image from " + pUrl + " (image is null)");  }  mName=pName;  mURL=FileUtil.getPortableFilename(pUrl);  mRotation=0;}  }
class C{  public DecoderResult decode(boolean[][] image,Map<DecodeHintType,?> hints) throws ChecksumException, FormatException {  int dimension=image.length;  BitMatrix bits=new BitMatrix(dimension);  for (int i=0; i < dimension; i++) {    for (int j=0; j < dimension; j++) {      if (image[i][j]) {        bits.set(j,i);      }    }  }  return decode(bits,hints);}  }
class C{  void updateVariable(CrowdJob job,String Url,String key,String value){  MultiValueMap<String,String> argumentMap=new LinkedMultiValueMap<String,String>();  argumentMap.add(key,value);  RestTemplate restTemplate=new RestTemplate();  restTemplate.getMessageConverters().add(new FormHttpMessageConverter());  restTemplate.put(Url,argumentMap,job.getId(),apiKey);}  }
class C{  private void initXMLKeys(){  this.keywords=new SingleKeywordTree<WikipediaXMLKeys>();  keywords.addKeyword(WikipediaXMLKeys.KEY_START_PAGE.getKeyword(),WikipediaXMLKeys.KEY_START_PAGE);  keywords.addKeyword(WikipediaXMLKeys.KEY_END_PAGE.getKeyword(),WikipediaXMLKeys.KEY_END_PAGE);  keywords.addKeyword(WikipediaXMLKeys.KEY_START_TITLE.getKeyword(),WikipediaXMLKeys.KEY_START_TITLE);  keywords.addKeyword(WikipediaXMLKeys.KEY_END_TITLE.getKeyword(),WikipediaXMLKeys.KEY_END_TITLE);  keywords.addKeyword(WikipediaXMLKeys.KEY_START_ID.getKeyword(),WikipediaXMLKeys.KEY_START_ID);  keywords.addKeyword(WikipediaXMLKeys.KEY_END_ID.getKeyword(),WikipediaXMLKeys.KEY_END_ID);  keywords.addKeyword(WikipediaXMLKeys.KEY_START_REVISION.getKeyword(),WikipediaXMLKeys.KEY_START_REVISION);  keywords.addKeyword(WikipediaXMLKeys.KEY_END_REVISION.getKeyword(),WikipediaXMLKeys.KEY_END_REVISION);  keywords.addKeyword(WikipediaXMLKeys.KEY_START_TIMESTAMP.getKeyword(),WikipediaXMLKeys.KEY_START_TIMESTAMP);  keywords.addKeyword(WikipediaXMLKeys.KEY_END_TIMESTAMP.getKeyword(),WikipediaXMLKeys.KEY_END_TIMESTAMP);  keywords.addKeyword(WikipediaXMLKeys.KEY_START_TEXT.getKeyword(),WikipediaXMLKeys.KEY_START_TEXT);  keywords.addKeyword(WikipediaXMLKeys.KEY_END_TEXT.getKeyword(),WikipediaXMLKeys.KEY_END_TEXT);  keywords.addKeyword(WikipediaXMLKeys.KEY_MINOR_FLAG.getKeyword(),WikipediaXMLKeys.KEY_MINOR_FLAG);  keywords.addKeyword(WikipediaXMLKeys.KEY_START_COMMENT.getKeyword(),WikipediaXMLKeys.KEY_START_COMMENT);  keywords.addKeyword(WikipediaXMLKeys.KEY_END_COMMENT.getKeyword(),WikipediaXMLKeys.KEY_END_COMMENT);  keywords.addKeyword(WikipediaXMLKeys.KEY_START_IP.getKeyword(),WikipediaXMLKeys.KEY_START_IP);  keywords.addKeyword(WikipediaXMLKeys.KEY_END_IP.getKeyword(),WikipediaXMLKeys.KEY_END_IP);  keywords.addKeyword(WikipediaXMLKeys.KEY_START_USERNAME.getKeyword(),WikipediaXMLKeys.KEY_START_USERNAME);  keywords.addKeyword(WikipediaXMLKeys.KEY_END_USERNAME.getKeyword(),WikipediaXMLKeys.KEY_END_USERNAME);  keywords.addKeyword(WikipediaXMLKeys.KEY_START_CONTRIBUTOR.getKeyword(),WikipediaXMLKeys.KEY_START_CONTRIBUTOR);  keywords.addKeyword(WikipediaXMLKeys.KEY_END_CONTRIBUTOR.getKeyword(),WikipediaXMLKeys.KEY_END_CONTRIBUTOR);  keywords.addKeyword(WikipediaXMLKeys.KEY_START_NAMESPACES.getKeyword(),WikipediaXMLKeys.KEY_START_NAMESPACES);  keywords.addKeyword(WikipediaXMLKeys.KEY_END_NAMESPACES.getKeyword(),WikipediaXMLKeys.KEY_END_NAMESPACES);}  }
class C{  public SnmpUnsignedInt(int v) throws IllegalArgumentException {  super(v);}  }
class C{  private Item(){  setRPClass("item");  put("type","item");  possibleSlots=new LinkedList<String>();  update();}  }
class C{  public void initialise(){  refreshSearchList();  if (tree.getModel() != null) {    tree.getModel().addTreeDataListener(this);  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) private int lookForSelectablePosition(int position,boolean lookDown){  final ListAdapter adapter=getAdapter();  if (adapter == null || isInTouchMode()) {    return INVALID_POSITION;  }  final int count=adapter.getCount();  if (!getAdapter().areAllItemsEnabled()) {    if (lookDown) {      position=Math.max(0,position);      while (position < count && !adapter.isEnabled(position)) {        position++;      }    } else {      position=Math.min(position,count - 1);      while (position >= 0 && !adapter.isEnabled(position)) {        position--;      }    }    if (position < 0 || position >= count) {      return INVALID_POSITION;    }    return position;  } else {    if (position < 0 || position >= count) {      return INVALID_POSITION;    }    return position;  }}  }
class C{  public boolean isAutoLogon(){  return autoLogon;}  }
class C{  void validConversion(Converter converter,Object expected,Object value){  String valueType=(value == null ? "null" : value.getClass().getName());  String msg="Converting '" + valueType + "' value '"+ value+ "'";  try {    Object result=converter.convert(getExpectedType(),value);    Class<?> resultType=(result == null ? null : result.getClass());    Class<?> expectType=(expected == null ? null : expected.getClass());    assertEquals("TYPE " + msg,expectType,resultType);    assertEquals("VALUE " + msg,expected,result);  } catch (  Exception ex) {    fail(msg + " threw " + ex.toString());  }}  }
class C{  public ConstantExpression(double value){  this.value=value;}  }
class C{  public void addPath(Taxonomy source,Integer taxId){  TaxonNode node=source.mNodes.get(taxId);  if (node == null) {    throw new IllegalArgumentException("Taxonomy does not contain node with id " + taxId);  }  TaxonNode child=null;  while (node != null) {    TaxonNode current=mNodes.get(node.getId());    if (current == null) {      current=new TaxonNode(node.getId(),node.getName(),node.getRank());      mNodes.put(current.getId(),current);      node=node.getParent();    } else {      node=null;    }    current.addChild(child);    child=current;  }}  }
class C{  private GridFilenameUtils(){}  }
class C{  static boolean isJavaVersionMatch(String version,String versionPrefix){  if (version == null) {    return false;  }  return version.startsWith(versionPrefix);}  }
class C{  public boolean render(InternalContextAdapter context,Writer writer,Node node) throws IOException, MethodInvocationException {  try {    if (nodeTree != null) {      VMContext vmc=new VMContext(context,rsvc);      for (int i=0; i < argumentNamesArray.length; i++) {        vmc.addVMProxyArg(args[i]);      }      nodeTree.render(vmc,writer);    } else {      rsvc.error("VM error : " + macroName + ". Null AST");    }  } catch (  Exception e) {    if (e instanceof MethodInvocationException) {      throw (MethodInvocationException)e;    }    rsvc.error("VelocimacroProxy.render() : exception VM = #" + macroName + "() : "+ StringUtils.stackTrace(e));  }  return true;}  }
class C{  public int available() throws IOException {  if (in == null)   throw new XZIOException("Stream closed");  if (exception != null)   throw exception;  return uncompressedSize;}  }
class C{  public void cancelImageDownloads(){  if (imageDownloadExecutor != null) {    imageDownloadExecutor.shutdownNow();  }}  }
class C{  public CustomDdlEntity createCustomDdlEntity(String namespaceCode,String businessObjectDefinitionName,String businessObjectFormatUsage,String businessObjectFormatFileType,Integer businessObjectFormatVersion,String customDdlName,String ddl){  BusinessObjectFormatEntity businessObjectFormatEntity=businessObjectFormatDao.getBusinessObjectFormatByAltKey(new BusinessObjectFormatKey(namespaceCode,businessObjectDefinitionName,businessObjectFormatUsage,businessObjectFormatFileType,businessObjectFormatVersion));  if (businessObjectFormatEntity == null) {    businessObjectFormatEntity=businessObjectFormatDaoTestHelper.createBusinessObjectFormatEntity(namespaceCode,businessObjectDefinitionName,businessObjectFormatUsage,businessObjectFormatFileType,businessObjectFormatVersion,AbstractDaoTest.FORMAT_DESCRIPTION,AbstractDaoTest.LATEST_VERSION_FLAG_SET,AbstractDaoTest.PARTITION_KEY);  }  return createCustomDdlEntity(businessObjectFormatEntity,customDdlName,ddl);}  }
class C{  public void enableAllClassDependencies(){  if (doNotCheckCapabilities()) {    return;  }  for (  Capability cap : Capability.values()) {    if (cap.isClass()) {      enableDependency(cap);    }  }}  }
class C{  private static synchronized LinkedList<ControllerPlan> findPlan(RVMMethod method){  return table.get(method);}  }
class C{  private void computeVertexSnaps(NodedSegmentString e){  Coordinate[] pts0=e.getCoordinates();  for (int i=0; i < pts0.length; i++) {    HotPixel hotPixel=new HotPixel(pts0[i],scaleFactor,li);    boolean isNodeAdded=pointSnapper.snap(hotPixel,e,i);    if (isNodeAdded) {      e.addIntersection(pts0[i],i);    }  }}  }
class C{  public static DAOAccount newInstance(){  final DAOAccount returnInstance=new DAOAccount();  returnInstance.setDefaultCode();  return returnInstance;}  }
class C{  private boolean isIPv6Address(String address){  return (address != null && address.indexOf(':') != -1);}  }
class C{  void paintLayeredHighlights(Graphics g,int p0,int p1,Shape viewBounds,JTextComponent editor,View view){  int start=getStartOffset();  int end=getEndOffset();  p0=Math.max(start,p0);  p1=Math.min(end,p1);  if (getColor() != null && (painter instanceof ChangeableColorHighlightPainter)) {    ((ChangeableColorHighlightPainter)painter).setColor(getColor());  }  union(((LayeredHighlighter.LayerPainter)painter).paintLayer(g,p0,p1,viewBounds,editor,view));}  }
class C{  @Override public long longValue(){  return value;}  }
class C{  void recordDeployed(Class<?> cls,boolean recordEvt){  assert !Thread.holdsLock(mux);  boolean isTask=isTask(cls);  String msg=(isTask ? "Task" : "Class") + " was deployed in Private or Isolated mode: " + cls;  if (recordEvt && ctx.event().isRecordable(isTask(cls) ? EVT_TASK_DEPLOYED : EVT_CLASS_DEPLOYED)) {    DeploymentEvent evt=new DeploymentEvent();    evt.type(isTask ? EVT_TASK_DEPLOYED : EVT_CLASS_DEPLOYED);    evt.node(sndNode);    evt.message(msg);    evt.alias(cls.getName());    ctx.event().record(evt);  }  if (log.isInfoEnabled())   log.info(msg);}  }
class C{  public static String[] lateProcessCommandLineArguments(){  for (int i=0; i < app_name_pos; i++) {    String arg=args[i];    PrefixType type=arg_types[i];    if (type == PrefixType.INVALID_ARG)     continue;    Prefix p=findPrefix(type);    if (DEBUG)     VM.sysWriteln(" CommandLineArgs.processCLA(" + p + arg+ " - "+ type+ ")");switch (type) {case ENVIRONMENT_ARG:{        int mid=arg.indexOf('=');        if (mid == -1 || mid + 1 == arg.length()) {          VM.sysWriteln("vm: bad property setting: \"",arg,"\"");          VM.sysExit(EXIT_STATUS_BOGUS_COMMAND_LINE_ARG);        }        String name=arg.substring(0,mid);        String value=arg.substring(mid + 1);        System.getProperties().put(name,value);      }    break;case CLASSPATH_ARG:  RVMClassLoader.setApplicationRepositories(arg);i++;break;case JAR_ARG:java.util.jar.Manifest mf=null;try {java.util.jar.JarFile jf=new java.util.jar.JarFile(arg);mf=jf.getManifest();} catch (Exception e) {VM.sysWriteln("vm: IO Exception opening JAR file ",arg,": ",e.getMessage());VM.sysExit(EXIT_STATUS_BOGUS_COMMAND_LINE_ARG);}if (mf == null) {VM.sysWriteln("The jar file is missing the manifest entry for the main class: ",arg);VM.sysExit(EXIT_STATUS_BOGUS_COMMAND_LINE_ARG);}String s=mf.getMainAttributes().getValue("Main-Class");if (s == null) {VM.sysWriteln("The jar file is missing the manifest entry for the main class: ",arg);VM.sysExit(EXIT_STATUS_BOGUS_COMMAND_LINE_ARG);}RVMClassLoader.setApplicationRepositories(arg);args[i]=s;arg_types[i]=PrefixType.APPLICATION_ARG;app_prefix.count++;i++;break;case JAVAAGENT_ARG:int equalsPos=arg.indexOf('=');String jarPath;if (equalsPos != -1) {jarPath=arg.substring(0,equalsPos);} else {jarPath=arg;}String newClassPath=RVMClassLoader.getApplicationRepositories() + File.pathSeparator + jarPath;RVMClassLoader.setApplicationRepositories(newClassPath);break;}}String[] arglist=getArgs(PrefixType.APPLICATION_ARG);if (DEBUG) {VM.sysWrite("VM.CommandLineArgs(): application arguments " + arglist.length + "\n");for (int i=0; i < arglist.length; i++) {VM.sysWrite(i + ": \"" + arglist[i]+ "\"\n");}}return arglist;}  }
class C{  public void testGetState(){  System.out.println("getState");  final DirectoryScannerConfig bean=new DirectoryScannerConfig("test");  bean.setRootDirectory(System.getProperty("java.io.tmpdir"));  final ResultLogManager log=new ResultLogManager();  DirectoryScanner instance=new DirectoryScanner(bean,log);  ScanState expResult=STOPPED;  ScanState result=instance.getState();  assertEquals(STOPPED,result);  instance.scan();  result=instance.getState();  assertEquals(COMPLETED,result);}  }
class C{  AbstractMap.SimpleImmutableEntry<K,V> createSnapshot(){  V v=getValidValue();  if (v == null)   return null;  return new AbstractMap.SimpleImmutableEntry<K,V>(key,v);}  }
class C{  public void runStrategy(CandleSeries candleSeries,boolean newBar){  try {    CandleItem currentCandleItem=this.getCurrentCandle();    ZonedDateTime startPeriod=currentCandleItem.getPeriod().getStart();    if (this.isThereOpenPosition()) {      _log.info("Strategy complete open position filled symbol: " + getSymbol() + " startPeriod: "+ startPeriod);      if (OrderStatus.PARTIALFILLED.equals(this.getOpenPositionOrder().getStatus())) {        if (isRiskViolated(currentCandleItem.getClose(),this.getTradestrategy().getRiskAmount(),this.getOpenPositionOrder().getQuantity(),this.getOpenPositionOrder().getAverageFilledPrice())) {          this.cancelOrder(this.getOpenPositionOrder());        }      }      this.cancel();      return;    }    if (null != openPositionOrderKey && !this.getTradeOrder(openPositionOrderKey).isActive()) {      _log.info("Strategy complete open position cancelled symbol: " + getSymbol() + " startPeriod: "+ startPeriod);      updateTradestrategyStatus(TradestrategyStatus.CANCELLED);      this.cancel();      return;    }    if (startPeriod.equals(this.getTradestrategy().getTradingday().getOpen().plusMinutes(this.getTradestrategy().getBarSize() / 60)) && newBar) {      CandleItem prevCandleItem=null;      if (getCurrentCandleCount() > 0) {        prevCandleItem=(CandleItem)candleSeries.getDataItem(getCurrentCandleCount() - 1);      }      if (CoreUtils.isBetween(prevCandleItem.getOpen(),prevCandleItem.getClose(),prevCandleItem.getVwap())) {        double barBodyPercent=(Math.abs(prevCandleItem.getOpen() - prevCandleItem.getClose()) / Math.abs(prevCandleItem.getHigh() - prevCandleItem.getLow())) * 100;        if (barBodyPercent < 10) {          _log.info("Bar Body outside % range  Symbol: " + getSymbol() + " Time: "+ startPeriod);          updateTradestrategyStatus(TradestrategyStatus.NBB);          this.cancel();          return;        }      }      Side side=Side.newInstance(Side.SLD);      if (prevCandleItem.isSide(Side.BOT)) {        side=Side.newInstance(Side.BOT);      }      Money price=new Money(prevCandleItem.getHigh());      Money priceStop=new Money(prevCandleItem.getLow());      String action=Action.BUY;      if (Side.SLD.equals(side.getCode())) {        price=new Money(prevCandleItem.getLow());        priceStop=new Money(prevCandleItem.getHigh());        action=Action.SELL;      }      Money priceClose=new Money(prevCandleItem.getClose());      Entrylimit entrylimit=getEntryLimit().getValue(priceClose);      double highLowRange=Math.abs(prevCandleItem.getHigh() - prevCandleItem.getLow());      priceStop=new Money(prevCandleItem.getOpen());      if (((highLowRange) / prevCandleItem.getClose()) < entrylimit.getPercentOfPrice().doubleValue()) {        _log.info("We have a trade!!  Symbol: " + getSymbol() + " Time: "+ startPeriod);        TradeOrder tradeOrder=createRiskOpenPosition(action,price,priceStop,true,null,null,null,null);        openPositionOrderKey=tradeOrder.getOrderKey();      } else {        _log.info("Rule 9:35 5min bar outside % limits. Symbol: " + getSymbol() + " Time: "+ startPeriod);        updateTradestrategyStatus(TradestrategyStatus.PERCENT);        this.cancel();      }    } else {      if (startPeriod.isBefore(this.getTradestrategy().getTradingday().getOpen().plusMinutes(120)) && startPeriod.isAfter(this.getTradestrategy().getTradingday().getOpen().plusMinutes(5))) {        CandleItem firstCandle=this.getCandle(TradingCalendar.getDateAtTime(startPeriod,this.getTradestrategy().getTradingday().getOpen()));        if (firstCandle.getSide()) {          if (currentCandleItem.getVwap() < firstCandle.getLow()) {          }        } else {          if (currentCandleItem.getVwap() > firstCandle.getHigh()) {          }        }      }    }    if (!startPeriod.isBefore(this.getTradestrategy().getTradingday().getOpen().plusMinutes(120))) {      _log.info("Rule 11:30:00 bar, time out unfilled open position Symbol: " + getSymbol() + " Time: "+ startPeriod);      if (!this.isThereOpenPosition() && !TradestrategyStatus.CANCELLED.equals(getTradestrategy().getStatus())) {        updateTradestrategyStatus(TradestrategyStatus.TO);        this.cancelAllOrders();        _log.info("Rule 11:30:00 bar, time out unfilled open position Symbol: " + getSymbol() + " Time: "+ startPeriod);      }      this.cancel();    }  } catch (  StrategyRuleException ex) {    _log.error("Error  runRule exception: " + ex.getMessage(),ex);    error(1,10,"Error  runRule exception: " + ex.getMessage());  }}  }
class C{  protected void zoom(){  log.info("");  Integer factId=miniTable.getSelectedRowKey();  if (factId != null)   AEnv.zoom(270,factId.intValue());}  }
class C{  private void hideSoftKeyboard(){  if (this.getCurrentFocus() != null) {    try {      InputMethodManager imm=(InputMethodManager)this.getSystemService(Context.INPUT_METHOD_SERVICE);      imm.hideSoftInputFromWindow(this.getCurrentFocus().getApplicationWindowToken(),0);    } catch (    RuntimeException e) {    }  }}  }
class C{  public void addValue(float value){  added_values++;  values[last_value++]=value;  if (last_value > values.length - 1)   last_value=0;  dirty=true;}  }
class C{  public void addFirst(Object o){  addBefore(o,header.next);}  }
class C{  public ObjectParser(final Object context){  this(context,Object.class);}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) public void testSchemaNodeProcessing(MinKeyVal oper,String type){  CountAndLastTupleTestSink minSink=new CountAndLastTupleTestSink();  oper.min.setSink(minSink);  oper.beginWindow(0);  int numtuples=10000;  if (type.equals("integer")) {    for (int i=numtuples; i > 0; i--) {      oper.data.process(new KeyValPair("a",new Integer(i)));    }  } else   if (type.equals("double")) {    for (int i=numtuples; i > 0; i--) {      oper.data.process(new KeyValPair("a",(double)i));    }  } else   if (type.equals("long")) {    for (int i=numtuples; i > 0; i--) {      oper.data.process(new KeyValPair("a",(long)i));    }  } else   if (type.equals("short")) {    for (short j=1000; j > 0; j--) {      oper.data.process(new KeyValPair("a",j));    }  } else   if (type.equals("float")) {    for (int i=numtuples; i > 0; i--) {      oper.data.process(new KeyValPair("a",(float)i));    }  }  oper.endWindow();  Assert.assertEquals("number emitted tuples",1,minSink.count);  Number val=((KeyValPair<String,Number>)minSink.tuple).getValue().intValue();  if (type.equals("short")) {    Assert.assertEquals("emitted min value was ",1,val);  } else {    Assert.assertEquals("emitted min value was ",1,val);  }}  }
class C{  public void waitForComplete(){  try {    shellThread.join();  } catch (  InterruptedException e) {    LOGGER.error(e.toString(),e);  }}  }
class C{  public void testDeadlocksDelete() throws Exception {  checkDeadlocksRepeat(5,2,2,2,0,DELETE_CNT,0,0,0);}  }
class C{  public static String encodeFromFile(final String filename){  String encodedData=null;  Base64.InputStream bis=null;  try {    java.io.File file=new java.io.File(filename);    byte[] buffer=new byte[Math.max((int)(file.length() * 1.4),40)];    int length=0;    int numBytes=0;    bis=new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)),Base64.ENCODE);    while ((numBytes=bis.read(buffer,length,4096)) >= 0) {      length+=numBytes;    }    encodedData=new String(buffer,0,length,Base64.PREFERRED_ENCODING);  } catch (  java.io.IOException e) {    System.err.println("Error encoding from file " + filename);  } finally {    try {      bis.close();    } catch (    Exception e) {    }  }  return encodedData;}  }
class C{  public static void cleanDatabases(Context context){  deleteFilesInDirectory(new File(context.getFilesDir().getPath() + context.getPackageName() + "/databases"));}  }
class C{  public void showTab(@NotNull String tabName){  onTabClicked(tabName);}  }
class C{  public void testSetScaleRoundDown(){  String a="1231212478987482988429808779810457634781384756794987";  String b="123121247898748298842980877981045763478138";  int aScale=28;  int newScale=18;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=aNumber.setScale(newScale,BigDecimal.ROUND_DOWN);  assertTrue("incorrect scale",bNumber.scale() == newScale);  assertTrue("incorrect value",bNumber.unscaledValue().toString().equals(b));}  }
class C{  public static boolean putMapNotEmptyKey(Map<String,String> map,String key,String value){  if (map == null || StringUtils.isEmpty(key)) {    return false;  }  map.put(key,value);  return true;}  }
class C{  public synchronized Object put(Object key,Object value){  if (value == null) {    throw new NullPointerException();  }  CacheEntry tab[]=table;  int hash=key.hashCode();  int index=(hash & 0x7FFFFFFF) % tab.length;  CacheEntry ne=null;  for (CacheEntry e=tab[index]; e != null; e=e.next) {    if ((e.hash == hash) && e.key.equals(key)) {      Object old=e.check();      e.setThing(value);      return old;    } else     if (e.check() == null)     ne=e;  }  if (count >= threshold) {    rehash();    return put(key,value);  }  if (ne == null) {    ne=new CacheEntry();    ne.next=tab[index];    tab[index]=ne;    count++;  }  ne.hash=hash;  ne.key=key;  ne.setThing(value);  return null;}  }
class C{  protected void readGraphicControlExt(){  read();  final int packed=read();  currentFrame.dispose=(packed & 0x1c) >> 2;  if (currentFrame.dispose == 0) {    currentFrame.dispose=1;  }  currentFrame.transparency=(packed & 1) != 0;  currentFrame.delay=readShort() * 10;  currentFrame.transIndex=read();  read();}  }
class C{  public Matrix(Reader r) throws Exception {  m_Matrix=new weka.core.matrix.Matrix(r);}  }
class C{  public void onComplete(R result,Throwable failure){}  }
class C{  public RemoteTask perform(DependencyRequest request) throws BuilderException {  final Link link=Links.getLink(Constants.LINK_REL_DEPENDENCIES_ANALYSIS,links);  if (link == null) {    throw new BuilderException("Unable get URL for starting remote process");  }  return perform(DtoFactory.getInstance().clone(link),request);}  }
class C{  public Graph search(){  long time1=System.currentTimeMillis();  graph=new EdgeListGraph(getIndependenceTest().getVariables());  meekRules=new MeekRules();  meekRules.setAggressivelyPreventCycles(isAggressivelyPreventCycles());  meekRules.setKnowledge(knowledge);  meekRules.setUndirectUnforcedEdges(true);  List<Node> nodes=graph.getNodes();  Graph outGraph=null;  int numEdges=nodes.size() * (nodes.size() - 1) / 2;  int index=0;  for (int i=0; i < nodes.size(); i++) {    for (int j=i + 1; j < nodes.size(); j++) {      ++index;      if (index % 1000 == 0) {        log("info",index + " of " + numEdges);      }      Node x=nodes.get(i);      Node y=nodes.get(j);      tryAddingEdge(x,y);    }  }  outGraph=graph;  this.logger.log("graph","\nReturning this graph: " + graph);  long time2=System.currentTimeMillis();  this.elapsedTime=time2 - time1;  return outGraph;}  }
class C{  private void initializeAddressSpaceListeners(final INaviAddressSpace addressSpace){  addressSpace.addListener(m_addressSpaceListener);  addressSpace.getConfiguration().addListener(m_addressSpaceConfigurationListener);  final List<INaviModule> allModules=getModules();  if (addressSpace.isLoaded()) {    addressSpace.getContent().addListener(m_internalContentListener);    for (    final INaviModule module : addressSpace.getContent().getModules()) {      if (CollectionHelpers.count(allModules,module) == 1) {        module.addListener(m_moduleListener);      }    }  }}  }
class C{  public boolean hasCommission(){  return hasExtension(Commission.class);}  }
class C{  Writer write(Writer writer,int indentFactor,int indent) throws JSONException {  try {    boolean commanate=false;    final int length=this.length();    Iterator<String> keys=this.keys();    writer.write('{');    if (length == 1) {      Object key=keys.next();      writer.write(quote(key.toString()));      writer.write(':');      if (indentFactor > 0) {        writer.write(' ');      }      writeValue(writer,this.map.get(key),indentFactor,indent);    } else     if (length != 0) {      final int newindent=indent + indentFactor;      while (keys.hasNext()) {        Object key=keys.next();        if (commanate) {          writer.write(',');        }        if (indentFactor > 0) {          writer.write('\n');        }        indent(writer,newindent);        writer.write(quote(key.toString()));        writer.write(':');        if (indentFactor > 0) {          writer.write(' ');        }        writeValue(writer,this.map.get(key),indentFactor,newindent);        commanate=true;      }      if (indentFactor > 0) {        writer.write('\n');      }      indent(writer,indent);    }    writer.write('}');    return writer;  } catch (  IOException exception) {    throw new JSONException(exception);  }}  }
class C{  static String replyToString(byte[] reply){  String result;  try {    result=new String(reply,DEFAULT_ENCODING);  } catch (  UnsupportedEncodingException uee) {    uee.printStackTrace();    result="";  }  return result;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:43.378 -0500",hash_original_method="12DB780B550F95E5C10FD5998E83FEFD",hash_generated_method="704999B0017ADF597420BBE86A43C1B6") public long simpleQueryForLong(){  if (mState == 0)   throw new SQLiteDoneException("expected 1 row from this query but query returned no data. check the query: " + mSql);  mDatabase.addTaint(this.getTaint());  long ret=(long)this.getTaintInt();  ret+=(long)mDatabase.getTaintInt();  return ret;}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  Calendar dateTime=new GregorianCalendar(GMT);  long localTime=value;  if (tzShift != null) {    localTime+=tzShift.longValue() * 60000;  }  dateTime.setTimeInMillis(localTime);  try {    appendInt(sb,dateTime.get(Calendar.YEAR),4);    sb.append('-');    appendInt(sb,dateTime.get(Calendar.MONTH) + 1,2);    sb.append('-');    appendInt(sb,dateTime.get(Calendar.DAY_OF_MONTH),2);    if (!dateOnly) {      sb.append('T');      appendInt(sb,dateTime.get(Calendar.HOUR_OF_DAY),2);      sb.append(':');      appendInt(sb,dateTime.get(Calendar.MINUTE),2);      sb.append(':');      appendInt(sb,dateTime.get(Calendar.SECOND),2);      if (dateTime.isSet(Calendar.MILLISECOND)) {        sb.append('.');        appendInt(sb,dateTime.get(Calendar.MILLISECOND),3);      }    }    if (tzShift != null) {      if (tzShift.intValue() == 0) {        sb.append('Z');      } else {        int absTzShift=tzShift.intValue();        if (tzShift > 0) {          sb.append('+');        } else {          sb.append('-');          absTzShift=-absTzShift;        }        int tzHours=absTzShift / 60;        int tzMinutes=absTzShift % 60;        appendInt(sb,tzHours,2);        sb.append(':');        appendInt(sb,tzMinutes,2);      }    }  } catch (  ArrayIndexOutOfBoundsException e) {    throw new RuntimeException(e);  }  return sb.toString();}  }
class C{  public SamFilterParamsBuilder minMapQ(final int val){  mMinMapQ=val;  return this;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:53.592 -0500",hash_original_method="011C4920ECDF4CF24EF92E838B11DA6F",hash_generated_method="42F59445F2ECAFD3199C656771D73CB2") private boolean isRoamingBetweenOperators(boolean cdmaRoaming,ServiceState s){  String spn=SystemProperties.get(TelephonyProperties.PROPERTY_ICC_OPERATOR_ALPHA,"empty");  String onsl=s.getOperatorAlphaLong();  String onss=s.getOperatorAlphaShort();  boolean equalsOnsl=onsl != null && spn.equals(onsl);  boolean equalsOnss=onss != null && spn.equals(onss);  return cdmaRoaming && !(equalsOnsl || equalsOnss);}  }
class C{  public MediaCmd(MiniClientConnection myConn){  this.myConn=myConn;  globalMediaCmd=this;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:09.170 -0500",hash_original_method="3CA9EEECBF523F762771968CCD0E129D",hash_generated_method="6A89F7BD8D9E3E6306E3DC771FBF4556") public void rewind(){  isSimplePath=true;  if (mDetectSimplePaths) {    mLastDirection=null;    if (rects != null)     rects.setEmpty();  }}  }
class C{  public boolean acceptsRoadName(String road){  if (_roadOption.equals(ALL_ROADS)) {    return true;  }  if (_roadOption.equals(INCLUDE_ROADS)) {    return _roadList.contains(road);  }  return !_roadList.contains(road);}  }
class C{  @Override public V remove(Object key){  if (key == null) {    key=NULL_OBJECT;  }  boolean hashedOk;  int index, next, hash;  Object result, object;  index=next=findIndex(key,elementData);  if (elementData[index] != key) {    return null;  }  result=elementData[index + 1];  int length=elementData.length;  while (true) {    next=(next + 2) % length;    object=elementData[next];    if (object == null) {      break;    }    hash=getModuloHash(object,length);    hashedOk=hash > index;    if (next < index) {      hashedOk=hashedOk || (hash <= next);    } else {      hashedOk=hashedOk && (hash <= next);    }    if (!hashedOk) {      elementData[index]=object;      elementData[index + 1]=elementData[next + 1];      index=next;    }  }  size--;  modCount++;  elementData[index]=null;  elementData[index + 1]=null;  return massageValue(result);}  }
class C{  public void testDeadlocksUpdate() throws Exception {  checkDeadlocksRepeat(5,2,2,2,0,0,UPDATE_CNT,0,0);}  }
class C{  private void addConnectionGroupDescendants(Collection<ConnectionGroup> parents,List<ObjectPermission.Type> permissions) throws GuacamoleException {  if (parents.isEmpty())   return;  Collection<String> childConnectionIdentifiers=new ArrayList<String>();  Collection<String> childConnectionGroupIdentifiers=new ArrayList<String>();  for (  ConnectionGroup parent : parents) {    childConnectionIdentifiers.addAll(parent.getConnectionIdentifiers());    childConnectionGroupIdentifiers.addAll(parent.getConnectionGroupIdentifiers());  }  if (permissions != null && !permissions.isEmpty())   childConnectionIdentifiers=connectionPermissions.getAccessibleObjects(permissions,childConnectionIdentifiers);  if (!childConnectionIdentifiers.isEmpty()) {    Collection<Connection> childConnections=connectionDirectory.getAll(childConnectionIdentifiers);    addConnections(childConnections);    addConnectionDescendants(childConnections,permissions);  }  if (!childConnectionGroupIdentifiers.isEmpty()) {    Collection<ConnectionGroup> childConnectionGroups=connectionGroupDirectory.getAll(childConnectionGroupIdentifiers);    addConnectionGroups(childConnectionGroups);    addConnectionGroupDescendants(childConnectionGroups,permissions);  }}  }
class C{  private boolean isResourceExist(ClassLoader ldr,String clsName){  String rsrc=clsName.replaceAll("\\.","/") + ".class";  InputStream in=null;  try {    in=ldr instanceof GridUriDeploymentClassLoader ? ((GridUriDeploymentClassLoader)ldr).getResourceAsStreamGarOnly(rsrc) : ldr.getResourceAsStream(rsrc);    return in != null;  }  finally {    U.close(in,log);  }}  }
class C{  public static float[] parseViewBoxAttribute(Element e,String value,BridgeContext ctx){  if (value.length() == 0) {    return null;  }  int i=0;  float[] vb=new float[4];  StringTokenizer st=new StringTokenizer(value," ,");  try {    while (i < 4 && st.hasMoreTokens()) {      vb[i]=Float.parseFloat(st.nextToken());      i++;    }  } catch (  NumberFormatException nfEx) {    throw new BridgeException(ctx,e,nfEx,ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_VIEW_BOX_ATTRIBUTE,value,nfEx});  }  if (i != 4) {    throw new BridgeException(ctx,e,ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_VIEW_BOX_ATTRIBUTE,value});  }  if (vb[2] < 0 || vb[3] < 0) {    throw new BridgeException(ctx,e,ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_VIEW_BOX_ATTRIBUTE,value});  }  if (vb[2] == 0 || vb[3] == 0) {    return null;  }  return vb;}  }
class C{  @SuppressWarnings("unchecked") private void attachJoinFilters(final IEvaluationContext context,final StaticAnalysis sa,final GraphPatternGroup<IGroupMemberNode> group){  for (  IGroupMemberNode child : group) {    if (child instanceof GraphPatternGroup<?>) {      attachJoinFilters(context,sa,(GraphPatternGroup<IGroupMemberNode>)child);    } else     if (child instanceof SubqueryRoot) {      attachJoinFilters(context,sa,((SubqueryRoot)child).getWhereClause());    } else     if (child instanceof ArbitraryLengthPathNode) {      attachJoinFilters(context,sa,((ArbitraryLengthPathNode)child).subgroup());    }  }  if (group instanceof JoinGroupNode) {    attachJoinFilters2(context,sa,(JoinGroupNode)group);  }}  }
class C{  public double quadraticMean(){  return quadraticMean.reduce(this);}  }
class C{  public static <U>Function<U,Predicate<U>> notSelf(){  return null;}  }
class C{  public void testBuildDeployableNameFromFile() throws Exception {  File file=createFile();  assertEquals("cargo.war",deployer.createIdFromFileName(file));}  }
class C{  public void ask(RestAPI api){  api.ask(this);}  }
class C{  private static void loadAllCountries(Properties ctx){  MClient client=MClient.get(ctx);  MLanguage lang=MLanguage.get(ctx,client.getAD_Language());  MCountry usa=null;  s_countries=new CCache<String,MCountry>("C_Country",250);  String sql="SELECT * FROM C_Country WHERE IsActive='Y'";  try {    Statement stmt=DB.createStatement();    ResultSet rs=stmt.executeQuery(sql);    while (rs.next()) {      MCountry c=new MCountry(ctx,rs,null);      s_countries.put(String.valueOf(c.getC_Country_ID()),c);      if (lang != null && lang.getCountryCode().equals(c.getCountryCode()))       s_default=c;      if (c.getC_Country_ID() == 100)       usa=c;    }    rs.close();    stmt.close();  } catch (  SQLException e) {    s_log.log(Level.SEVERE,sql,e);  }  if (s_default == null)   s_default=usa;  s_log.fine("#" + s_countries.size() + " - Default="+ s_default);}  }
class C{  @LogMessageDoc(level="ERROR",message="Invalid subaction: '{subaction}'",explanation="A static flow entry contained an invalid subaction",recommendation=LogMessageDoc.REPORT_CONTROLLER_BUG) private static OFActionOutput decode_output(String actionToDecode,OFVersion version,Logger log){  Matcher n=Pattern.compile("((all)|(controller)|(local)|(ingress-port)|(normal)|(flood))").matcher(actionToDecode);  OFActionOutput.Builder ab=OFFactories.getFactory(version).actions().buildOutput();  OFPort port=OFPort.ANY;  if (n.matches()) {    if (n.group(1) != null && n.group(1).equals("all"))     port=OFPort.ALL; else     if (n.group(1) != null && n.group(1).equals("controller"))     port=OFPort.CONTROLLER; else     if (n.group(1) != null && n.group(1).equals("local"))     port=OFPort.LOCAL; else     if (n.group(1) != null && n.group(1).equals("ingress-port"))     port=OFPort.IN_PORT; else     if (n.group(1) != null && n.group(1).equals("normal"))     port=OFPort.NORMAL; else     if (n.group(1) != null && n.group(1).equals("flood"))     port=OFPort.FLOOD;    ab.setPort(port);    ab.setMaxLen(Integer.MAX_VALUE);    log.debug("action {}",ab.build());    return ab.build();  } else {    try {      port=OFPort.of(Integer.parseInt(actionToDecode));      ab.setPort(port);      ab.setMaxLen(Integer.MAX_VALUE);      return ab.build();    } catch (    NumberFormatException e) {      log.error("Could not parse Integer port: '{}'",actionToDecode);      return null;    }  }}  }
class C{  public boolean isDirect(){  return true;}  }
class C{  public static int cs_spsolve(Dcs G,Dcs B,int k,int[] xi,double[] x,int[] pinv,boolean lo){  int j, J, p, q, px, top, n, Gp[], Gi[], Bp[], Bi[];  double Gx[], Bx[];  if (!Dcs_util.CS_CSC(G) || !Dcs_util.CS_CSC(B) || xi == null || x == null)   return (-1);  Gp=G.p;  Gi=G.i;  Gx=G.x;  n=G.n;  Bp=B.p;  Bi=B.i;  Bx=B.x;  top=Dcs_reach.cs_reach(G,B,k,xi,pinv);  for (p=top; p < n; p++)   x[xi[p]]=0;  for (p=Bp[k]; p < Bp[k + 1]; p++)   x[Bi[p]]=Bx[p];  for (px=top; px < n; px++) {    j=xi[px];    J=pinv != null ? (pinv[j]) : j;    if (J < 0)     continue;    x[j]/=Gx[lo ? (Gp[J]) : (Gp[J + 1] - 1)];    p=lo ? (Gp[J] + 1) : (Gp[J]);    q=lo ? (Gp[J + 1]) : (Gp[J + 1] - 1);    for (; p < q; p++) {      x[Gi[p]]-=Gx[p] * x[j];    }  }  return (top);}  }
class C{  protected void handleOnException(Throwable ex,HttpServletRequest request,HttpServletResponse response){  LOG.warn(ex.toString());  LOG.debug(ex);  if (!response.isCommitted()) {    response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);  }}  }
class C{  public DTipOfTheDay(JFrame parent,boolean showTipsOnStartup,ResourceBundle tips,int tipIndex){  super(parent,Dialog.ModalityType.DOCUMENT_MODAL);  this.tipIndex=tipIndex;  readTips(tips,"TipOfTheDayAction.TipOfTheDay");  initComponents(showTipsOnStartup);}  }
class C{  protected String metaDataTableNameForColumns(Table table){  return table.getName();}  }
class C{  public Object[] explainTypeError(Class[] expectedClasses){  final Member member=getMember();  if (!(member instanceof Method)) {    return null;  }  Method m=(Method)member;  final Class returnType=m.getReturnType();  if (returnType == null || returnType == void.class || returnType == Void.class) {    return null;  }  String mName=m.getName();  if (mName.startsWith("get") && mName.length() > 3 && Character.isUpperCase(mName.charAt(3)) && (m.getParameterTypes().length == 0)) {    return new Object[]{"Maybe using obj.something instead of obj.getSomething will yield the desired value."};  } else   if (mName.startsWith("is") && mName.length() > 2 && Character.isUpperCase(mName.charAt(2)) && (m.getParameterTypes().length == 0)) {    return new Object[]{"Maybe using obj.something instead of obj.isSomething will yield the desired value."};  } else {    return new Object[]{"Maybe using obj.something(",(m.getParameterTypes().length != 0 ? "params" : ""),") instead of obj.something will yield the desired value"};  }}  }
class C{  public void addFileset(FileSet set){  filesets.add(set);}  }
class C{  public void destroy(){  getBuildContextHolder().destroy();  rememberedSet.clear();}  }
class C{  public KeywordMarkerFilterFactory(Map<String,String> args){  super(args);  wordFiles=get(args,PROTECTED_TOKENS);  stringPattern=get(args,PATTERN);  ignoreCase=getBoolean(args,"ignoreCase",false);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public static void makeBucket_test2() throws Exception {  println("Test: makeBucket(String bucketName, String region)");  String name=getRandomName();  client.makeBucket(name,"eu-west-1");  client.removeBucket(name);}  }
class C{  private int readIntegerByKey(BinaryFile in,int key) throws FormatException, EOFException {switch (key & 0x3) {case 0:    return -1;case 1:{    int byteval;    try {      byteval=in.read();    } catch (    IOException ioe) {      throw new FormatException(ioe.getMessage());    }    if (byteval == -1) {      throw new EOFException();    }    return byteval;  }case 2:return MoreMath.signedToInt(in.readShort());case 3:return in.readInteger();}throw new FormatException("This can't happen");}  }
class C{  private void initialize(URI p_other){  m_scheme=p_other.getScheme();  m_userinfo=p_other.getUserinfo();  m_host=p_other.getHost();  m_port=p_other.getPort();  m_path=p_other.getPath();  m_queryString=p_other.getQueryString();  m_fragment=p_other.getFragment();}  }
class C{  public ManagedBeanLifecycleAnnotationITCase(String name){  super(name);}  }
class C{  public void togleIcon(Resource icon){  setIcon(icon);}  }
class C{  private void onError(YokeRequest request,Throwable ex){  String message=null;  if (ex instanceof ReplyException) {    ReplyException rex=(ReplyException)ex;    if (rex.failureCode() == CONFLICT.code()) {      message="The record was modified or deleted by someone else.";    } else     if (rex.failureCode() == NOT_FOUND.code()) {      message="The record cannot be found.";    } else     if (rex.failureCode() == NOT_ACCEPTABLE.code()) {      message=rex.getMessage();    }  }  message=(message == null) ? "Something went wrong." : message;  request.put("message",message);  request.put("exception",ex);  request.put("url",request.uri());  request.response().render("error.hbs");}  }
class C{  public int size(){  return SIZE;}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:37.916 -0500",hash_original_method="D367B8AD3F620DA29FDBF98B146E85CC",hash_generated_method="57AD9C3F19CEBCC5998187D7C8E03D64") public SIPRequest createBYERequest(boolean switchHeaders){  RequestLine requestLine=(RequestLine)this.requestLine.clone();  requestLine.setMethod("BYE");  return this.createSIPRequest(requestLine,switchHeaders);}  }
class C{  public void clear(){  map.clear();}  }
class C{  public SVGOMGElement(String prefix,AbstractDocument owner){  super(prefix,owner);}  }
class C{  private void toggleUnderlayImage(){  if (enableBgImage.isSelected()) {    String imgFile=null;    int[] offsets;    double scale, rotate;    BufferedImage image;    try {      Settings settings=new Settings(UNDERLAY_NS);      imgFile=settings.getSetting("fileName");      offsets=settings.getCsvInts("offset",2);      scale=settings.getDouble("scale");      rotate=settings.getDouble("rotate");      image=ImageIO.read(new File(imgFile));    } catch (    IOException ex) {      warn("Couldn't set underlay image " + imgFile + ". "+ ex.getMessage());      enableBgImage.setSelected(false);      return;    }catch (    SettingsError er) {      warn("Problem with the underlay image settings: " + er.getMessage());      return;    }    field.setUnderlayImage(image,offsets[0],offsets[1],scale,rotate);  } else {    field.setUnderlayImage(null,0,0,0,0);  }}  }
class C{  public static <T>int binarySearch(T[] array,T object,Comparator<? super T> comparator){  return binarySearch(array,0,array.length,object,comparator);}  }
class C{  public void addFilterCondition(String[] properties){  try {    if (properties.length == 2) {      logger.debug(Arrays.toString(properties));      String[] split=properties[0].split("=");      String type=split[1];      String[] split1=properties[1].split("=");      if (split1[1].toLowerCase().equals("true")) {        registry.bind(LogstreamUtil.FILTER,type + "_" + "DEFAULT");      }    } else     if (properties.length > 2) {      String[] split=properties[0].split("=");      String type=split[1];      int typeId=registry.getIndex(LogstreamUtil.LOG_TYPE,type);      String[] keys=new String[properties.length - 2];      System.arraycopy(properties,1,keys,0,keys.length);      String expression=properties[properties.length - 1];      Map<String,String[]> conditions=conditionList.get(typeId);      if (conditions == null) {        conditions=new HashMap<String,String[]>();        conditionList.put(typeId,conditions);      }      conditions.put(expression,keys);      if (registry != null) {        registry.bind(LogstreamUtil.FILTER,expression);      }    } else {      throw new ValidationException("Invalid input property string " + Arrays.toString(properties));    }  } catch (  Exception ex) {    throw new RuntimeException(ex);  }}  }
class C{  public boolean isCellEditable(Object node,int column){  return column == 0;}  }
class C{  @Override public Object readObject() throws IOException {  return readObject(0);}  }
class C{  @NamespacePermission(fields="#emrClusterAlternateKeyDto?.namespace",permissions=NamespacePermissionEnum.EXECUTE) @Override @Transactional(propagation=Propagation.REQUIRES_NEW) public EmrCluster terminateCluster(EmrClusterAlternateKeyDto emrClusterAlternateKeyDto,boolean overrideTerminationProtection,String emrClusterId) throws Exception {  return terminateClusterImpl(emrClusterAlternateKeyDto,overrideTerminationProtection,emrClusterId);}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  if (!success)   return success;  if (newRecord)   insert_Tree(MTree_Base.TREETYPE_SalesRegion);  if (!newRecord && (is_ValueChanged("Value") || is_ValueChanged("Name")))   MAccount.updateValueDescription(getCtx(),"C_SalesRegion_ID=" + getC_SalesRegion_ID(),get_TrxName());  return true;}  }
class C{  protected <K,V>CacheBinding<K,V> cache(String name,TypeLiteral<K> keyType,TypeLiteral<V> valType){  Type type=Types.newParameterizedType(Cache.class,keyType.getType(),valType.getType());  @SuppressWarnings("unchecked") Key<Cache<K,V>> key=(Key<Cache<K,V>>)Key.get(type,Names.named(name));  CacheProvider<K,V> m=new CacheProvider<>(this,name,keyType,valType);  bind(key).toProvider(m).asEagerSingleton();  bind(ANY_CACHE).annotatedWith(Exports.named(name)).to(key);  return m.maximumWeight(1024);}  }
class C{  public static void showReilGraph(final CGraphWindow parent,final IViewContainer viewContainer,final INaviModule module,final INaviView view){  final ReilCreationThread thread=new ReilCreationThread(module,view);  CProgressDialog.showEndless(parent,"Creating REIL graph" + " ...",thread);  final Exception exception=thread.getException();  if (exception != null) {    if (exception instanceof CouldntSaveDataException) {      CUtilityFunctions.logException(exception);    } else {      CUtilityFunctions.logException(exception);      final String innerMessage="E00111: Could not translate view to REIL";      final String innerDescription=CUtilityFunctions.createDescription(String.format("BinNavi could not create the REIL code of view '%s'.",view.getName()),new String[]{"An error occurred in the REIL translator code."},new String[]{"This is an internal error which you can not fix yourself. " + "Please report the bug to the zynamics support team."});      NaviErrorDialog.show(parent,innerMessage,innerDescription);    }    return;  }  CViewOpener.showView(parent,viewContainer,thread.getReilView(),parent);}  }
class C{  public boolean equals(Object other){  if (!(other instanceof TFloatDoubleHashMap)) {    return false;  }  TFloatDoubleHashMap that=(TFloatDoubleHashMap)other;  if (that.size() != this.size()) {    return false;  }  return forEachEntry(new EqProcedure(that));}  }
class C{  public PduPart removePart(int index){  return mParts.remove(index);}  }
class C{  public static void main(String[] args){  Command command=new Command();  command.addOpt("-d","directory","./");  command.addOpt("-a","alpha","" + DEFAULT_ALPHA);  command.addOpt("-s","seed",null);  command.addOpt("-l","lang",null);  command.parse(args);  if (command.hasOpt("--genprofile")) {    command.generateProfile();  } else   if (command.hasOpt("--genprofile-text")) {    command.generateProfileFromText();  } else   if (command.hasOpt("--detectlang")) {    command.detectLang();  } else   if (command.hasOpt("--batchtest")) {    command.batchTest();  }}  }
class C{  public static <T>String toJsonString(T value){  try {    return MAPPER.writeValueAsString(value);  } catch (  JsonProcessingException e) {    return "";  }}  }
class C{  public int calcViewableNodes(AreaPanelSpaceTimeBox newLocalStBox,int minDepth,int earliestOnScreenPoint,int latestOnScreenPoint){  viewNodeThreadManager.registerWritingThread();  try {    if (newLocalStBox != headVn.stBox) {      Log.d("GPS","Turning on all dirty flags");      headVn.turnOnAllDirtyFlags(minDepth);    }    if (headVn.dirtyDescendents == 0) {      Log.d("GPS","Finished because there are no more unkNodes in head");      return 0;    }    if (headVn.dirtyDescendents < 0)     TAssert.fail("why is dirtyDescendents below zero? " + headVn);    ViewNode vn=headVn;    ArrayList<ViewNode> parentsAndCurrent=new ArrayList<ViewNode>(AreaPanel.DEPTH_TO_WIDTH.length);    boolean linesRecalcNeeded=false;    while (!vn.needsProcessing(newLocalStBox)) {      parentsAndCurrent.add(vn);      int minDensity=Integer.MAX_VALUE;      ViewNode bestChild=null;      if (vn.ap().getDepth() == minDepth)       TAssert.fail("Why does node say its dirty but doesn't need processing and is " + " at the lowest level? " + vn + " min depth "+ minDepth);      for (      ViewNode child : vn.children) {        if (child == null)         continue;        if (child.needsProcessing(newLocalStBox)) {          bestChild=child;          break;        }        int childDensity;        if (child.dirtyDescendents > 0 && (childDensity=child.getDensity(newLocalStBox)) < minDensity) {          minDensity=childDensity;          bestChild=child;        }      }      if (bestChild == null) {        TAssert.fail("why is parent dirty without a child: " + parentsAndCurrent + " children "+ Arrays.toString(vn.children));      }      vn=bestChild;    }    parentsAndCurrent.add(vn);    if (vn.stBox == newLocalStBox)     TAssert.fail("Why are we trying to update a view node when the stBox hasn't changed???");    boolean onStatus;    int[] overlappingTimeRange=null;    AreaPanel ap=vn.ap();    ;    if (vn.status == null || vn.stBox == null || vn.stBox.isPathsChanged(newLocalStBox)) {      onStatus=ap.overlapsStbXY(newLocalStBox) && (overlappingTimeRange=vn.checkTimeInterval(newLocalStBox)) != null;    } else {      if (vn.status == ViewNode.VNStatus.SET) {        if (ap.outsideOfXY(newLocalStBox)) {          onStatus=false;        } else         if (!vn.timeDecreasedMeaningfully(newLocalStBox,ap) && vn.overlappingRange[1] != latestOnScreenPoint && vn.overlappingRange[0] != earliestOnScreenPoint) {          onStatus=true;          overlappingTimeRange=vn.overlappingRange;        } else {          onStatus=(overlappingTimeRange=vn.checkTimeInterval(newLocalStBox)) != null;        }      } else {        if (ap.outsideOfXY(newLocalStBox))         onStatus=false; else         if (vn.stBox != null && !vn.outsideOfXY(vn.stBox,ap) && !(vn.timeIncreasedMeaningfully(newLocalStBox,ap)))         onStatus=false; else {          onStatus=(overlappingTimeRange=vn.checkTimeInterval(newLocalStBox)) != null;        }      }    }    if (onStatus) {      vn.overlappingRange=overlappingTimeRange;      boolean childrenDirty;      if (vn.status != VNStatus.SET || vn.stBox.isPathsChanged(newLocalStBox)) {        childrenDirty=true;        vn.clearLineCalcs();        linesRecalcNeeded=true;      } else       if (vn.timeChangedMeaningfullyWithRegardsToChildren(newLocalStBox)) {        childrenDirty=true;        vn.clearLineCalcs();        linesRecalcNeeded=true;      } else       if (vn.xyChangedMeaningfullyWithRegardsToChildren(newLocalStBox))       childrenDirty=true; else       childrenDirty=false;      vn.setSetStatus(parentsAndCurrent,newLocalStBox,childrenDirty,minDepth);    } else     vn.setEmptyStatus(parentsAndCurrent,newLocalStBox);    return CALC_VIEW_NODES_STILL_MORE_NODES_TO_CALC | (linesRecalcNeeded ? CALC_VIEW_NODES_LINES_NEED_RECALC : 0);  }  finally {    viewNodeThreadManager.unregisterWritingThread();  }}  }
class C{  public static <T,X extends Throwable>FutureW<T> fromTry(final Try<T,X> value){  return FutureW.ofSupplier(value);}  }
class C{  protected Cookie decodeCookie(String cookieString){  byte[] bytes=hexStringToByteArray(cookieString);  ByteArrayInputStream byteArrayInputStream=new ByteArrayInputStream(bytes);  Cookie cookie=null;  try {    ObjectInputStream objectInputStream=new ObjectInputStream(byteArrayInputStream);    cookie=((SerializableCookie)objectInputStream.readObject()).getCookie();  } catch (  IOException e) {    Log.d(LOG_TAG,"IOException in decodeCookie",e);  }catch (  ClassNotFoundException e) {    Log.d(LOG_TAG,"ClassNotFoundException in decodeCookie",e);  }  return cookie;}  }
class C{  public MultiProtocolURL(String url) throws MalformedURLException {  if (url == null)   throw new MalformedURLException("url string is null");  this.hostAddress=null;  this.contentDomain=null;  url=url.trim();  if (url.startsWith("//")) {    url="http:" + url;  }  if (url.startsWith("\\\\")) {    url="smb://" + CommonPattern.BACKSLASH.matcher(url.substring(2)).replaceAll("/");  }  if (url.length() > 1 && (url.charAt(1) == ':' && Character.isLetter(url.charAt(0)))) {    url="file://" + url;  }  if (url.length() > 0 && url.charAt(0) == '/') {    url="file://" + url;  }  int p=url.lastIndexOf("://",5);  if (p < 0) {    if (url.length() > 7 && url.substring(0,7).equalsIgnoreCase("mailto:")) {      p=6;    } else {      url="http://" + url;      p=4;    }  }  this.protocol=url.substring(0,p).toLowerCase().trim().intern();  if (url.length() < p + 4)   throw new MalformedURLException("URL not parseable: '" + url + "'");  if (!this.protocol.equals("file") && url.substring(p + 1,p + 3).equals("//")) {    int q=url.indexOf('/',p + 3);    if (q < 0) {      q=url.indexOf("?",p + 3);    } else {      if (url.lastIndexOf("?",q) >= 0) {        q=url.indexOf("?",p + 3);      }    }    int r;    if (q < 0) {      if ((r=url.indexOf('@',p + 3)) < 0) {        this.host=url.substring(p + 3).intern();        this.userInfo=null;      } else {        this.host=url.substring(r + 1).intern();        this.userInfo=url.substring(p + 3,r);      }      this.path="/";    } else {      this.host=url.substring(p + 3,q).trim().intern();      if ((r=this.host.indexOf('@')) < 0) {        this.userInfo=null;      } else {        this.userInfo=this.host.substring(0,r);        this.host=this.host.substring(r + 1).intern();      }      this.path=url.substring(q);    }    if (this.host.length() < 4 && !this.protocol.equals("file"))     throw new MalformedURLException("host too short: '" + this.host + "', url = "+ url);    if (this.host.indexOf('&') >= 0)     throw new MalformedURLException("invalid '&' in host");    this.path=resolveBackpath(this.path);    identPort(url,(isHTTP() ? 80 : (isHTTPS() ? 443 : (isFTP() ? 21 : (isSMB() ? 445 : -1)))));    if (this.port < 0) {      throw new MalformedURLException("unknown protocol: " + url);    }    identAnchor();    identSearchpart();    escape();  } else {    url=UTF8.decodeURL(url);    if (this.protocol.equals("mailto")) {      final int q=url.indexOf('@',p + 3);      if (q < 0) {        throw new MalformedURLException("wrong email address: " + url);      }      this.userInfo=url.substring(p + 1,q);      this.host=url.substring(q + 1);      this.path="";      this.port=-1;      this.searchpart=null;      this.anchor=null;    } else     if (this.protocol.equals("file")) {      String h=url.substring(p + 1);      this.host=null;      if (h.startsWith("///")) {        this.path=h.substring(2);      } else       if (h.startsWith("//")) {        if (h.length() > 4 && h.charAt(3) == ':' && h.charAt(4) != '/' && h.charAt(4) != '\\') {          h=h.substring(0,4) + '/' + h.substring(4);        }        int q=h.indexOf('/',2);        if (q < 0 || h.length() > 3 && h.charAt(3) == ':') {          this.path="/" + h.substring(2);        } else {          this.host=h.substring(2,q);          if (this.host.equalsIgnoreCase(Domains.LOCALHOST))           this.host=null;          this.path=h.substring(q);        }      } else       if (h.startsWith("/")) {        this.path=h;      }      this.userInfo=null;      this.port=-1;      this.searchpart=null;      this.anchor=null;    } else {      throw new MalformedURLException("unknown protocol: " + url);    }  }  if (!Punycode.isBasic(this.host))   try {    this.host=toPunycode(this.host);  } catch (  final PunycodeException e) {  }}  }
class C{  public void applySettings(){  for (int i=0; i < selectedTasks.length; i++) {    TaskMutator mutator=selectedTasks[i].createMutator();    if (originalName == null || !originalName.equals(getTaskName())) {      mutator.setName(getTaskName());    }    if (originalWebLink == null || !originalWebLink.equals(getWebLink())) {      mutator.setWebLink(getWebLink());    }    if (mileStoneCheckBox1 != null) {      if (originalIsMilestone != isMilestone()) {        mutator.setMilestone(isMilestone());      }    } else     if (projectTaskCheckBox1 != null) {      if (originalIsProjectTask != isProjectTask()) {        mutator.setProjectTask(isProjectTask());      }    }    if (!originalStartDate.equals(getStart())) {      mutator.setStart(getStart());    }    if (!originalEndDate.equals(getEnd())) {      mutator.setEnd(getEnd());    }    if (originalEarliestBeginDate == null && getThird() != null || originalEarliestBeginDate != null && getThird() == null || originalEarliestBeginDate != null && !originalEarliestBeginDate.equals(getThird()) || originalEarliestBeginEnabled != getThirdDateConstraint()) {      mutator.setThird(getThird(),getThirdDateConstraint());    }    if (getLength() > 0) {      mutator.setDuration(selectedTasks[i].getManager().createLength(getLength()));    }    if (!Objects.equal(originalNotes,getNotes())) {      mutator.setNotes(getNotes());    }    if (originalCompletionPercentage != getPercentComplete()) {      mutator.setCompletionPercentage(getPercentComplete());    }    if (this.originalPriority != getPriority()) {      mutator.setPriority(getPriority());    }    mutator.setColor(myTaskColorOption.getValue());    if (this.originalShape == null && shapeComboBox.getSelectedIndex() != 0 || originalShape != null && !this.originalShape.equals(shapeComboBox.getSelectedPaint())) {      mutator.setShape(new ShapePaint((ShapePaint)shapeComboBox.getSelectedPaint(),Color.white,myTaskColorOption.getValue()));    }    mutator.commit();    myDependenciesPanel.commit();    myAllocationsPanel.commit();    myCustomColumnPanel.commit();    if (!myShowInTimeline.isSelected()) {      myUIfacade.getCurrentTaskView().getTimelineTasks().remove(selectedTasks[i]);    } else {      myUIfacade.getCurrentTaskView().getTimelineTasks().add(selectedTasks[i]);    }  }}  }
class C{  private CallChainInfo extract_calls(PrintStream fp,SootMethod method,Chain<Unit> insts,Unit start,Unit end){  CallChainInfo cci=new CallChainInfo(method,(Stmt)start,"cblock");  List<CallChainInfo> ccis=new ArrayList<CallChainInfo>();  Set<SootMethod> processed_methods=new HashSet<SootMethod>();  for (Unit u=start; u != end; u=insts.getSuccOf(u)) {    Stmt s=(Stmt)u;    if (s.containsInvokeExpr()) {      List<Edge> allEdgesForContexts=new LinkedList<Edge>();      for (      MethodOrMethodContext momc : PTABridge.v().getMethodContexts(method)) {        List<Edge> outgoingEdges=PTABridge.v().outgoingEdges(momc,s);        allEdgesForContexts.addAll(outgoingEdges);      }      for (      Edge edge : allEdgesForContexts) {        MethodOrMethodContext mc=edge.getTgt();        Stack<SootMethod> stack=new Stack<SootMethod>();        if (dump_all_calls) {          List<String> calls=get_call_chain(mc,stack,"      ");          fp.printf("    method %s (%d)\n",mc.method(),calls.size());          for (          String call : calls)           fp.println(call);        } else {          CallChainBuilder ccb=new CallChainBuilder(timeout - (int)timer.getTime(),true);          CallChainInfo dcall=ccb.process_call_chain(s,mc);          dcall.type="direct-call";          if (ignore_dup_methods) {            if (!processed_methods.contains(mc.method())) {              ccis.add(dcall);              processed_methods.add(mc.method());            }          } else {            ccis.add(dcall);          }        }      }    }  }  cci.contents=ccis.toArray(cci.contents);  if (ignore_dup_methods)   Arrays.sort(cci.contents); else   cci.merge_contents();  return cci;}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0xEDEEB999,version=150) public int sceHttpReadData(int requestId,@BufferInfo(lengthInfo=LengthInfo.returnValue,usage=Usage.out) TPointer data,int dataSize){  HttpRequest httpRequest=getHttpRequest(requestId);  httpRequest.connect();  int readSize=httpRequest.readData(data.getAddress(),dataSize);  if (log.isDebugEnabled()) {    log.debug(String.format("sceHttpReadData returning 0x%X: %s",readSize,Utilities.getMemoryDump(data.getAddress(),readSize)));  }  return readSize;}  }
class C{  public ReadCoilsResponse(int count){  setFunctionCode(Modbus.READ_COILS);  coils=new BitVector(count);  setDataLength(coils.byteSize() + 1);}  }
class C{  private static boolean isValidPort(int port){  return port >= 0 && port <= 65535;}  }
class C{  public Matrix3d zero(){  m00=0.0;  m01=0.0;  m02=0.0;  m10=0.0;  m11=0.0;  m12=0.0;  m20=0.0;  m21=0.0;  m22=0.0;  return this;}  }
class C{  private static String generateNameFromType(Type type){  int typeCode=type.getTypeCode();switch (typeCode) {case TC_BOOLEAN:case TC_BYTE:case TC_CHAR:case TC_SHORT:case TC_INT:case TC_LONG:case TC_FLOAT:case TC_DOUBLE:    return type.toString();case TC_ARRAY:  return "arrayOf_" + generateNameFromType(type.getElementType());case TC_CLASS:return Names.mangleClass(type.getClassName().getName()).toString();default :throw new Error("unexpected type code: " + typeCode);}}  }
class C{  protected static void emit_production_table(PrintStream out){  production all_prods[];  production prod;  long start_time=System.currentTimeMillis();  out.println();  out.println("  /** production table */");  out.println("  protected static final short _production_table[][] = {");  all_prods=new production[production.number()];  for (Enumeration p=production.all(); p.hasMoreElements(); ) {    prod=(production)p.nextElement();    all_prods[prod.index()]=prod;  }  out.print("    ");  for (int i=0; i < production.number(); i++) {    prod=all_prods[i];    out.print("    {");    out.print(prod.lhs().the_symbol().index() + ", ");    out.print(prod.rhs_length() + "}");    if (i < production.number() - 1)     out.print(", ");    if ((i + 1) % 5 == 0) {      out.println();      out.print("    ");    }  }  out.println("  };");  out.println();  out.println("  /** access to production table */");  out.println("  public short[][] production_table() " + "{return _production_table;}");  production_table_time=System.currentTimeMillis() - start_time;}  }
class C{  @SuppressWarnings("unchecked") public void listenDynamicAttributesChanges(final Datasource datasource){  if (datasource != null && datasource.getLoadDynamicAttributes()) {    datasource.addItemPropertyChangeListener(null);  }}  }
class C{  public static String replaceIllegalCharacter(final String text,final char replacement){  final StringBuilder rVal=new StringBuilder();  for (int i=0; i < text.length(); ++i) {    if (!isIllegalFileNameChar(text.charAt(i))) {      rVal.append(text.charAt(i));    } else {      rVal.append(replacement);    }  }  return rVal.toString();}  }
class C{  private void push(PrintData newPD){  m_stack.add(newPD);  m_curPD=newPD;}  }
class C{  public Refresher(GLScene scene){  Preconditions.checkNotNull(scene);  this.scene=scene;}  }
class C{  private void notifyFailedSynchronization(){  NotificationCompat.Builder notificationBuilder=createNotificationBuilder();  boolean needsToUpdateCredentials=(mLastFailedResult != null && (mLastFailedResult.getCode() == ResultCode.UNAUTHORIZED || mLastFailedResult.isIdPRedirection()));  if (needsToUpdateCredentials) {    Intent updateAccountCredentials=new Intent(getContext(),AuthenticatorActivity.class);    updateAccountCredentials.putExtra(AuthenticatorActivity.EXTRA_ACCOUNT,getAccount());    updateAccountCredentials.putExtra(AuthenticatorActivity.EXTRA_ACTION,AuthenticatorActivity.ACTION_UPDATE_EXPIRED_TOKEN);    updateAccountCredentials.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);    updateAccountCredentials.addFlags(Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS);    updateAccountCredentials.addFlags(Intent.FLAG_FROM_BACKGROUND);    notificationBuilder.setTicker(i18n(R.string.sync_fail_ticker_unauthorized)).setContentTitle(i18n(R.string.sync_fail_ticker_unauthorized)).setContentIntent(PendingIntent.getActivity(getContext(),(int)System.currentTimeMillis(),updateAccountCredentials,PendingIntent.FLAG_ONE_SHOT)).setContentText(i18n(R.string.sync_fail_content_unauthorized,getAccount().name));  } else {    notificationBuilder.setTicker(i18n(R.string.sync_fail_ticker)).setContentTitle(i18n(R.string.sync_fail_ticker)).setContentText(i18n(R.string.sync_fail_content,getAccount().name));  }  showNotification(R.string.sync_fail_ticker,notificationBuilder);}  }
class C{  BaseHandler(final AbstractGUIApplicator inner){  this.inner=inner;}  }
class C{  public NotificationChain basicSetTag(Tag newTag,NotificationChain msgs){  msgs=eBasicSetContainer((InternalEObject)newTag,DomPackage.TAG_TITLE__TAG,msgs);  return msgs;}  }
class C{  public DisposableObjectMap(final int initialCapacity){  super(initialCapacity);}  }
class C{  @Override public void execute(Activity activity){  super.execute(activity);}  }
class C{  public int size(){  return size;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public boolean onDrag(View v,DragEvent event){  int action=event.getAction();switch (action) {case DragEvent.ACTION_DROP:{      CharSequence tag=event.getClipDescription().getLabel();      ClipData.Item item=event.getClipData().getItemAt(0);      if (tag.equals("printer")) {        int id=Integer.parseInt(item.getText().toString());        ModelPrinter p=null;        if (id >= 0) {          p=DevicesListController.getPrinter(id);        } else {          p=DevicesListController.getPrinterByPosition(-(id + 1));        }        if (p != null) {          p.setPosition(mPosition);          ;          mAdapter.notifyDataSetChanged();        }      }      v.setBackgroundColor(Resources.getSystem().getColor(android.R.color.transparent));    }  break;case DragEvent.ACTION_DRAG_ENTERED:{  try {    CharSequence tag=event.getClipDescription().getLabel();    if (tag.equals("printer")) {      v.setBackgroundColor(v.getContext().getResources().getColor(R.color.drag_and_drop_hover_background));    }  } catch (  NullPointerException e) {    e.printStackTrace();  }}break;case DragEvent.ACTION_DRAG_EXITED:{v.setBackgroundColor(Resources.getSystem().getColor(android.R.color.transparent));}break;default :break;}return true;}  }
class C{  @Override public void addChild(FXGNode child){  if (child instanceof FilterNode) {    if (filters == null)     filters=new ArrayList<FilterNode>();    filters.add((FilterNode)child);  } else   if (child instanceof MaskPropertyNode) {    mask=((MaskPropertyNode)child).mask;    if (mask instanceof GraphicContentNode) {      ((GraphicContentNode)mask).setParentGraphicContext(createGraphicContext());    }  } else   if (child instanceof MatrixNode) {    if (translateSet || scaleSet || rotationSet)     throw new FXGException(child.getStartLine(),child.getStartColumn(),"InvalidChildMatrixNode");    matrix=(MatrixNode)child;  } else   if (child instanceof ColorTransformNode) {    if (alphaSet)     throw new FXGException(child.getStartLine(),child.getStartColumn(),"InvalidChildColorTransformNode");    colorTransform=(ColorTransformNode)child;  } else {    super.addChild(child);  }}  }
class C{  private static Track createNewSegment(Track track,long startTime){  Track segment=new Track();  segment.setId(track.getId());  segment.setName(track.getName());  segment.setDescription("");  segment.setCategory(track.getCategory());  TripStatistics segmentTripStatistics=segment.getTripStatistics();  segmentTripStatistics.setStartTime(startTime);  return segment;}  }
class C{  public void selectedOwnerChanged(ValueChangeEvent event){  UIComponent uiComponent=event.getComponent();  if (!(uiComponent instanceof HtmlSelectOneRadio)) {    return;  }  HtmlSelectOneRadio radioBtn=(HtmlSelectOneRadio)uiComponent;  List<UIComponent> uiComponents=radioBtn.getChildren();  for (  UIComponent component : uiComponents) {    if (!(component instanceof HtmlInputHidden)) {      continue;    }    HtmlInputHidden hiddenInput=(HtmlInputHidden)component;    String ownerId=(String)hiddenInput.getValue();    if (Boolean.valueOf((String)event.getNewValue()).booleanValue()) {      if (ownerId.trim().isEmpty()) {        deassignOwner();        return;      }      setOwnerSelectedStatus(ownerId);      return;    }    for (    User owner : model.getSubscriptionOwners()) {      if (owner.getUserId().equals(ownerId)) {        owner.setOwnerSelected(false);      }    }  }}  }
class C{  @Override public String toString(){  StringBuilder result=new StringBuilder();  for (  EigenPair eigenPair : eigenPairs) {    result.append('\n').append(eigenPair);  }  return result.toString();}  }
class C{  public double greatCircleAzimuth(Location location){  if (location == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Location","greatCircleAzimuth","missingLocation"));  }  double lat1=Math.toRadians(this.latitude);  double lon1=Math.toRadians(this.longitude);  double lat2=Math.toRadians(location.latitude);  double lon2=Math.toRadians(location.longitude);  if (lat1 == lat2 && lon1 == lon2) {    return 0;  }  if (lon1 == lon2) {    return lat1 > lat2 ? 180 : 0;  }  double y=Math.cos(lat2) * Math.sin(lon2 - lon1);  double x=Math.cos(lat1) * Math.sin(lat2) - Math.sin(lat1) * Math.cos(lat2) * Math.cos(lon2 - lon1);  double azimuthRadians=Math.atan2(y,x);  return Double.isNaN(azimuthRadians) ? 0 : Math.toDegrees(azimuthRadians);}  }
class C{  public SlidingActivityHelper(Activity activity){  mActivity=activity;}  }
class C{  private static <NodeType extends ZyGraphNode<?>>boolean requiresBoldFirstLine(final NodeType node){  return (node != null) && ((node.getRawNode() instanceof ICodeNode) || (node.getRawNode() instanceof IFunctionNode));}  }
class C{  public DynamicRows(){  list=new ArrayList();}  }
class C{  public HelpTipObject(int id,boolean deleted){  this.id=id;  this.deleted=deleted;}  }
class C{  public void forceRewriteExif(String filename,Collection<ExifTag> tags) throws FileNotFoundException, IOException {  if (!rewriteExif(filename,tags)) {    ExifData tempData=mData;    mData=new ExifData(DEFAULT_BYTE_ORDER);    FileInputStream is=null;    ByteArrayOutputStream bytes=null;    try {      is=new FileInputStream(filename);      bytes=new ByteArrayOutputStream();      doExifStreamIO(is,bytes);      byte[] imageBytes=bytes.toByteArray();      readExif(imageBytes);      setTags(tags);      writeExif(imageBytes,filename);    } catch (    IOException e) {      closeSilently(is);      throw e;    } finally {      is.close();      mData=tempData;    }  }}  }
class C{  public static boolean isProblemStatus(int parseStatus){switch (parseStatus) {case IParseConstants.COULD_NOT_FIND_MODULE:case IParseConstants.SEMANTIC_WARNING:case IParseConstants.SEMANTIC_ERROR:case IParseConstants.SYNTAX_ERROR:case IParseConstants.UNKNOWN_ERROR:    return true;case IParseConstants.UNPARSED:case IParseConstants.PARSED:case IParseConstants.UNKNOWN:  return false;default :return false;}}  }
class C{  public String toWireDump() throws IOException {  WireFormat.ArrayWriter writer=new WireFormat.ArrayWriter();  toWire(writer);  return ByteUtils.toHex(writer.toByteArray());}  }
class C{  public void emitAnewarray(int od,Type arrayType){  emitop(anewarray);  if (!alive)   return;  emit2(od);  state.pop(1);  state.push(arrayType);}  }
class C{  public int V(){  return V;}  }
class C{  public void parseSerializedTotem(final String serialized){  if (CURSOR_MARK_START.equals(serialized)) {    values=null;    return;  }  final SortField[] sortFields=sortSpec.getSort().getSort();  final List<SchemaField> schemaFields=sortSpec.getSchemaFields();  List<Object> pieces=null;  try {    final byte[] rawData=Base64.base64ToByteArray(serialized);    ByteArrayInputStream in=new ByteArrayInputStream(rawData);    try {      pieces=(List<Object>)codec.unmarshal(in);      boolean b=false;      for (      Object o : pieces) {        if (o instanceof BytesRefBuilder || o instanceof BytesRef || o instanceof String) {          b=true;          break;        }      }      if (b) {        in.reset();        pieces=(List<Object>)codec.unmarshal(in);      }    }  finally {      in.close();    }  } catch (  Exception ex) {    throw new SolrException(ErrorCode.BAD_REQUEST,"Unable to parse '" + CURSOR_MARK_PARAM + "' after totem: "+ "value must either be '"+ CURSOR_MARK_START+ "' or the "+ "'"+ CURSOR_MARK_NEXT+ "' returned by a previous search: "+ serialized,ex);  }  assert null != pieces : "pieces wasn't parsed?";  if (sortFields.length != pieces.size()) {    throw new SolrException(ErrorCode.BAD_REQUEST,CURSOR_MARK_PARAM + " does not work with current sort (wrong size): " + serialized);  }  this.values=new ArrayList<>(sortFields.length);  final BytesRef tmpBytes=new BytesRef();  for (int i=0; i < sortFields.length; i++) {    SortField curSort=sortFields[i];    SchemaField curField=schemaFields.get(i);    Object rawValue=pieces.get(i);    if (null != curField) {      FieldType curType=curField.getType();      rawValue=curType.unmarshalSortValue(rawValue);    }    this.values.add(rawValue);  }}  }
class C{  public synchronized void addDataUpdateListener(PropertyChangeListener l){  data_updates.addPropertyChangeListener(l);}  }
class C{  @SuppressWarnings("signedness") public static String toUnsignedString(@Unsigned short s,int radix){  return Long.toString(toUnsignedLong(s),radix);}  }
class C{  public Edge(int u,int v){  this.u=u;  this.v=v;}  }
class C{  private boolean checkIGsAndDeleteIfUnassociated(StorageSystem storage,List<CIMObjectPath> igList) throws Exception {  boolean anyFailures=false;  Collection<String> deviceIds=transform(igList,cimObjectPathInstanceId());  _log.info(String.format("Checking the following IGs { %s }",Joiner.on(',').join(deviceIds)));  for (  CIMObjectPath igPath : igList) {    CIMInstance igInstance=_helper.checkExists(storage,igPath,true,true);    if (igInstance == null) {      continue;    }    String igDeviceId=igPath.getKey(SmisConstants.CP_INSTANCE_ID).getValue().toString();    List<CIMObjectPath> associatedMaskingViews=getAssociatedMaskingViews(storage,igPath);    if (associatedMaskingViews.isEmpty()) {      _log.info(String.format("IG %s is not associated to any Masking View",igDeviceId));      List<CIMObjectPath> associatedIGs=getAssociatedParentIGs(storage,igPath);      if (associatedIGs.isEmpty()) {        _log.info(String.format("IG %s is not associated with any other IGs, " + "it can be deleted",igDeviceId));        boolean success=deleteInitiatorGroup(storage,igInstance.getObjectPath());        if (!success) {          anyFailures=true;        }      } else {        Collection<String> igDevIds=transform(associatedIGs,cimObjectPathInstanceId());        _log.info(String.format("IG %s is associated to other IGs {%s}",igDeviceId,Joiner.on(',').join(igDevIds)));      }    } else {      Collection<String> mvDevIds=transform(associatedMaskingViews,cimObjectPathInstanceId());      _log.info(String.format("IG %s is associated to Masking Views {%s}",igDeviceId,Joiner.on(',').join(mvDevIds)));    }  }  return (!anyFailures);}  }
class C{  public boolean hasCapability(String capability){  boolean hasCap=false;  for (  DeviceService service : services.values()) {    if (service.hasCapability(capability)) {      hasCap=true;      break;    }  }  return hasCap;}  }
class C{  public static double blackFormulaImpliedStdDev(final Option.Type optionType,@Real final double strike,@Real final double forward,@Real final double blackPrice,@DiscountFactor final double discount,@Real final double guess){  return blackFormulaImpliedStdDev(optionType,strike,forward,blackPrice,discount,guess,1.0e-6,0.0);}  }
class C{  public String decode(String encoded){  JsonObject object=new JsonObject(encoded);  JsonArray headers=object.getJsonArray("headers");  for (  Object headerObj : headers) {    JsonArray header=(JsonArray)headerObj;    String key=header.getString(0);    String value=header.getString(1);    if (key.equalsIgnoreCase(CONTENT_TYPE) && (value.contains("text/") || value.contains(APPLICATION_JSON))) {      try {        object.put("payloadObject",new JsonObject(new String(object.getBinary(PAYLOAD),Charset.forName(UTF_8))));      } catch (      DecodeException e) {        object.put("payloadString",new String(object.getBinary(PAYLOAD),Charset.forName(UTF_8)));      }      object.remove(PAYLOAD);      break;    }  }  return object.toString();}  }
class C{  public static void main(String[] args){  RenderingImagesOnBodies simulation=new RenderingImagesOnBodies();  simulation.run();}  }
class C{  public final static byte[] decode(byte[] sArr){  int sLen=sArr.length;  int sepCnt=0;  for (int i=0; i < sLen; i++)   if (IA[sArr[i] & 0xff] < 0)   sepCnt++;  if ((sLen - sepCnt) % 4 != 0)   return null;  int pad=0;  for (int i=sLen; i > 1 && IA[sArr[--i] & 0xff] <= 0; )   if (sArr[i] == '=')   pad++;  int len=((sLen - sepCnt) * 6 >> 3) - pad;  byte[] dArr=new byte[len];  for (int s=0, d=0; d < len; ) {    int i=0;    for (int j=0; j < 4; j++) {      int c=IA[sArr[s++] & 0xff];      if (c >= 0)       i|=c << (18 - j * 6); else       j--;    }    dArr[d++]=(byte)(i >> 16);    if (d < len) {      dArr[d++]=(byte)(i >> 8);      if (d < len)       dArr[d++]=(byte)i;    }  }  return dArr;}  }
class C{  @SuppressWarnings("unchecked") public Listener<Void> onEvent(String event,Runnable callback){  return onEvent(event,null);}  }
class C{  public static boolean isEmpty(CharSequence str){  return TextUtils.isEmpty(str);}  }
class C{  public void start(){  thread.start();}  }
class C{  public static Map<String,Page> loadPages(String folderPath){  Map<String,Page> pageTable=new Hashtable<String,Page>();  Page currPage;  File[] listOfFiles;  wlf=new WikiLinkFinder();  File folder=new File(folderPath);  if (folder.exists() && folder.isDirectory()) {    listOfFiles=folder.listFiles();  } else {    return null;  }  for (int i=0; i < listOfFiles.length; i++) {    File currFile=listOfFiles[i];    if (currFile.isFile()) {      currPage=wikiPageFromFile(folder,currFile);      pageTable.put(currPage.getLocation(),currPage);    }  }  return pageTable=determineAllInlinks(pageTable);}  }
class C{  public void stopTrace(){  traceEnabled=false;  if (mqtt != null) {    ;    JOptionPane.showMessageDialog(frame,"Trace file mqe0.trc generated in the current directory","MQTT Trace",JOptionPane.INFORMATION_MESSAGE);  }}  }
class C{  private void init(){  for (int i=0; i < tasks.length; i++) {    init(tasks[i]);  }}  }
class C{  private static double CallNonvirtualDoubleMethod(JNIEnvironment env,int objJREF,int classJREF,int methodID) throws Exception {  if (VM.VerifyAssertions) {    VM._assert(VM.BuildForPowerPC,ERROR_MSG_WRONG_IMPLEMENTATION);  }  if (traceJNI)   VM.sysWrite("JNI called: CallNonvirtualDoubleMethod  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object obj=env.getJNIRef(objJREF);    Object returnObj=JNIHelpers.invokeWithDotDotVarArg(obj,methodID,TypeReference.Double,true);    return Reflection.unwrapDouble(returnObj);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  public void parentImplotion(int PP_Product_BOMLine_ID) throws Exception {  int PP_Product_BOM_ID=0;  int M_Product_ID=0;  X_T_BOMLine tboml=new X_T_BOMLine(ctx,0,null);  PP_Product_BOM_ID=DB.getSQLValue(null,"SELECT PP_Product_BOM_ID FROM PP_Product_BOMLine WHERE PP_Product_BOMLine_ID=?",PP_Product_BOMLine_ID);  if (PP_Product_BOM_ID < 0)   throw new Exception(CLogger.retrieveErrorString("Error: PrintBOM.parentImplotion()"));  M_Product_ID=DB.getSQLValue(null,"SELECT M_Product_ID FROM PP_Product_BOM WHERE PP_Product_BOM_ID=?",PP_Product_BOM_ID);  if (M_Product_ID < 0)   throw new Exception(CLogger.retrieveErrorString("Error: PrintBOM.parentImplotion()"));  tboml.setPP_Product_BOM_ID(PP_Product_BOM_ID);  tboml.setPP_Product_BOMLine_ID(PP_Product_BOMLine_ID);  tboml.setM_Product_ID(M_Product_ID);  tboml.setLevelNo(LevelNo);  tboml.setSel_Product_ID(p_M_Product_ID);  tboml.setImplosion(p_implosion);  if (LevelNo >= 11)   tboml.setLevels(levels + ">" + LevelNo); else   if (LevelNo >= 1)   tboml.setLevels(levels.substring(0,LevelNo) + LevelNo);  tboml.setSeqNo(SeqNo);  tboml.setAD_PInstance_ID(AD_PInstance_ID);  tboml.save();  PreparedStatement stmt=null;  ResultSet rs=null;  String sql="SELECT PP_Product_BOM_ID, M_Product_ID FROM PP_Product_BOM " + "WHERE IsActive = 'Y' AND M_Product_ID = ? ";  try {    stmt=DB.prepareStatement(sql,get_TrxName());    stmt.setInt(1,M_Product_ID);    rs=stmt.executeQuery();    while (rs.next()) {      SeqNo+=1;      component(rs.getInt(2));    }  } catch (  SQLException e) {    log.log(Level.SEVERE,e.getLocalizedMessage() + sql,e);    throw new Exception("SQLException: " + e.getLocalizedMessage());  } finally {    DB.close(rs,stmt);    rs=null;    stmt=null;  }}  }
class C{  public void windowIconified(WindowEvent e){  ((WindowListener)a).windowIconified(e);  ((WindowListener)b).windowIconified(e);}  }
class C{  private void addHyperlinkToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so,true);}  }
class C{  private static Class<?> tryLoadClass(String value){  try {    return CLASSLOADER.loadClass(value);  } catch (  ClassNotFoundException e) {    return null;  }}  }
class C{  public void discoverStoragePortsById(String storageSystemId,List<StoragePort> storagePorts,Registry driverRegistery) throws Exception {  try {    HP3PARApi hp3parApi=getHP3PARDeviceFromNativeId(storageSystemId,driverRegistery);    PortCommandResult portResult=hp3parApi.getPortDetails();    PortStatisticsCommandResult portStatResult=hp3parApi.getPortStatisticsDetail();    for (    PortMembers currMember : portResult.getMembers()) {      StoragePort port=new StoragePort();      if (currMember.getMode() != HP3PARConstants.MODE_TARGET || currMember.getLinkState() != HP3PARConstants.LINK_READY) {        continue;      }      if (currMember.getLabel() == null) {        String label=String.format("port:%s:%s:%s",currMember.getPortPos().getNode(),currMember.getPortPos().getSlot(),currMember.getPortPos().getCardPort());        port.setPortName(label);      } else {        port.setPortName(currMember.getLabel());      }      port.setStorageSystemId(storageSystemId);switch (currMember.getProtocol()) {case 1:        port.setTransportType(TransportType.FC);      break;case 3:    port.setTransportType(TransportType.Ethernet);  break;case 2:port.setTransportType(TransportType.IP);break;default :_log.warn("3PARDriver: discoverStoragePorts Invalid port {}",port.getPortName());break;}for (PortStatMembers currStat : portStatResult.getMembers()) {if (currMember.getPortPos().getNode() == currStat.getNode() && currMember.getPortPos().getSlot() == currStat.getSlot() && currMember.getPortPos().getCardPort() == currStat.getCardPort()) {port.setPortSpeed(currStat.getSpeed() * HP3PARConstants.MEGA_BYTE);}}port.setPortGroup(currMember.getPortPos().getNode().toString());port.setPortSubGroup(currMember.getPortPos().getSlot().toString());if (port.getTransportType().equals(TransportType.FC.toString())) {port.setPortNetworkId(SanUtils.formatWWN(currMember.getPortWWN()));port.setEndPointID(port.getPortNetworkId());port.setTcpPortNumber((long)0);} else if (port.getTransportType().equals(TransportType.IP.toString())) {port.setIpAddress(currMember.getIPAddr());port.setPortNetworkId(currMember.getiSCSINmae());port.setTcpPortNumber(currMember.getiSCSIPortInfo().getiSNSPort());port.setEndPointID(port.getPortNetworkId());}port.setAvgBandwidth(port.getPortSpeed());port.setPortHAZone(String.format("Group-%s",currMember.getPortPos().getNode()));String id=String.format("%s:%s:%s",currMember.getPortPos().getNode(),currMember.getPortPos().getSlot(),currMember.getPortPos().getCardPort());port.setNativeId(id);port.setDeviceLabel(port.getPortName());port.setDisplayName(port.getPortName());port.setOperationalStatus(StoragePort.OperationalStatus.OK);_log.info("3PARDriver: added storage port {}, native id {}",port.getPortName(),port.getNativeId());storagePorts.add(port);}} catch (Exception e) {throw e;}}  }
class C{  public void testGetElementById() throws Throwable {  Document doc;  Element element;  String elementId="---";  doc=(Document)load("staffNS",builder);  element=doc.getElementById(elementId);  assertNull("documentgetelementbyid01",element);}  }
class C{  public Groestl224(){  super();}  }
class C{  @Exported("up_0") protected void startup_0() throws Exception {  startup();}  }
class C{  public boolean hasChangestamp(){  return hasExtension(Changestamp.class);}  }
class C{  public static String encode(String s1){  StringBuffer buf=new StringBuffer();  int i;  for (i=0; i < s1.length(); ++i) {    char ch=s1.charAt(i);    String entity=i2e.get(new Integer((int)ch));    if (entity == null) {      if (((int)ch) > 128) {        buf.append("&#" + ((int)ch) + ";");      } else {        buf.append(ch);      }    } else {      buf.append("&" + entity + ";");    }  }  return buf.toString();}  }
class C{  public void verifyDebug(String substring){  verify(Level.FINE,substring);}  }
class C{  public boolean isCompilingLanguageModule(){  return compilingLanguageModule;}  }
class C{  private void loadNodes(int AD_User_ID){  StringBuffer sql=new StringBuffer("SELECT " + "tn.Node_ID,tn.Parent_ID,tn.SeqNo,tb.IsActive " + "FROM ").append(getNodeTableName()).append(" tn" + " LEFT OUTER JOIN AD_TreeBar tb ON (tn.AD_Tree_ID=tb.AD_Tree_ID" + " AND tn.Node_ID=tb.Node_ID " + (AD_User_ID != -1 ? " AND tb.AD_User_ID=? " : "") + ") "+ "WHERE tn.AD_Tree_ID=?");  if (!m_editable)   sql.append(" AND tn.IsActive='Y'");  sql.append(" ORDER BY COALESCE(tn.Parent_ID, -1), tn.SeqNo");  log.finest(sql.toString());  try {    getNodeDetails();    PreparedStatement pstmt=DB.prepareStatement(sql.toString(),get_TrxName());    int idx=1;    if (AD_User_ID != -1)     pstmt.setInt(idx++,AD_User_ID);    pstmt.setInt(idx++,getAD_Tree_ID());    ResultSet rs=pstmt.executeQuery();    m_root=new MTreeNode(0,0,getName(),getDescription(),0,true,null,false,null);    while (rs.next()) {      int node_ID=rs.getInt(1);      int parent_ID=rs.getInt(2);      int seqNo=rs.getInt(3);      boolean onBar=(rs.getString(4) != null);      if (node_ID == 0 && parent_ID == 0)       ; else       addToTree(node_ID,parent_ID,seqNo,onBar);    }    rs.close();    pstmt.close();    m_nodeRowSet=null;    m_nodeIdMap=null;  } catch (  SQLException e) {    log.log(Level.SEVERE,sql.toString(),e);    m_nodeRowSet=null;    m_nodeIdMap=null;  }  if (m_buffer.size() != 0) {    log.finest("clearing buffer - Adding to: " + m_root);    for (int i=0; i < m_buffer.size(); i++) {      MTreeNode node=(MTreeNode)m_buffer.get(i);      MTreeNode parent=m_root.findNode(node.getParent_ID());      if (parent != null && parent.getAllowsChildren()) {        parent.add(node);        int sizeBeforeCheckBuffer=m_buffer.size();        checkBuffer(node);        if (sizeBeforeCheckBuffer == m_buffer.size())         m_buffer.remove(i);        i=-1;      }    }  }  if (m_buffer.size() != 0) {    log.severe("Nodes w/o parent - adding to root - " + m_buffer);    for (int i=0; i < m_buffer.size(); i++) {      MTreeNode node=(MTreeNode)m_buffer.get(i);      m_root.add(node);      int sizeBeforeCheckBuffer=m_buffer.size();      checkBuffer(node);      if (sizeBeforeCheckBuffer == m_buffer.size())       m_buffer.remove(i);      i=-1;    }    if (m_buffer.size() != 0)     log.severe("Still nodes in Buffer - " + m_buffer);  }  if (!m_editable && m_root.getChildCount() > 0)   trimTree();  if (CLogMgt.isLevelFinest() || m_root.getChildCount() == 0)   log.fine("ChildCount=" + m_root.getChildCount());}  }
class C{  public void print(PrintWriter out){  new NodePrinter(out).print(this);}  }
class C{  protected void editNotes(){  MarkdownDialog dialog;  if (getParentDialog() != null)   dialog=new MarkdownDialog(getParentDialog(),ModalityType.DOCUMENT_MODAL); else   dialog=new MarkdownDialog(getParentFrame(),true);  dialog.setTitle("Edit notes");  dialog.setMarkdown(m_Notes);  dialog.setSize(600,400);  dialog.setLocationRelativeTo(null);  dialog.setVisible(true);  if (dialog.getOption() != MarkdownDialog.APPROVE_OPTION)   return;  m_Notes=dialog.getMarkdown();  setModified(true);  updateButtons();}  }
class C{  public Tasks<VolumeRestRep> failoverCancel(URI id,CopiesParam input){  return postTasks(input,getContinuousCopiesUrl() + "/failover-cancel",id);}  }
class C{  public void test_6() throws Exception {  final String namespace="test" + UUID.randomUUID();  final BigdataSailRepositoryConnection cxn=prepareTest(namespace,true,false,true);  insertSparql(cxn);  IValueCentricTextIndexer<?> searchEngine=cxn.getTripleStore().getLexiconRelation().getSearchEngine();  assertEquals(0,searchEngine.count(query("1")));  assertEquals(0,searchEngine.count(query("2")));  assertEquals(0,searchEngine.count(query("3.0")));  assertEquals(0,searchEngine.count(query("4.0")));  assertEquals(0,searchEngine.count(query("true")));  assertEquals(0,searchEngine.count(query("false")));  assertEquals(1,searchEngine.count(query("plain")));  assertEquals(1,searchEngine.count(query("datatyped")));  assertEquals(1,searchEngine.count(query("english")));  endTest(cxn);}  }
class C{  static public void arrayCopy(Object src,Object dst,int length){  System.arraycopy(src,0,dst,0,length);}  }
class C{  public void storeMail(MailAddress sender,MailAddress recipient,MimeMessage msg){  throw new UnsupportedOperationException("Was removed");}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void testUnsizedDoublesCount(){  LongAdder counter=new LongAdder();  Random r=new Random();  long size=100;  r.doubles().limit(size).parallel().forEach(null);  assertEquals(counter.sum(),size);}  }
class C{  public synchronized int lastIndexOf(Object object,int location){  if (location < elementCount) {    if (object != null) {      for (int i=location; i >= 0; i--) {        if (object.equals(elementData[i])) {          return i;        }      }    } else {      for (int i=location; i >= 0; i--) {        if (elementData[i] == null) {          return i;        }      }    }    return -1;  }  throw arrayIndexOutOfBoundsException(location,elementCount);}  }
class C{  public void boil(){  boil(100);}  }
class C{  public T casePropertyGetterDeclaration(PropertyGetterDeclaration object){  return null;}  }
class C{  public void processSuccess(Response response,Request request){switch (request.getMessageType()) {case Message.CHANNELBIND_REQUEST:    setChannelNumberIsConfirmed(request,true);  break;case Message.CREATEPERMISSION_REQUEST:setChannelBound(request,true);break;default :break;}}  }
class C{  public PathHandler(String path){  this(Paths.get(path));}  }
class C{  public AssertionFailedException(){  super();}  }
class C{  public void validateAttributes(List<Attribute> attributes) throws IllegalArgumentException {  if (!CollectionUtils.isEmpty(attributes)) {    Map<String,String> attributeNameValidationMap=new HashMap<>();    for (    Attribute attribute : attributes) {      attribute.setName(alternateKeyHelper.validateStringParameter("An","attribute name",attribute.getName()));      String validationMapKey=attribute.getName().toLowerCase();      if (attributeNameValidationMap.containsKey(validationMapKey)) {        throw new IllegalArgumentException("Duplicate attribute name found: " + attribute.getName());      }      attributeNameValidationMap.put(validationMapKey,attribute.getValue());    }  }}  }
class C{  public void initializeMapView(){  if (mapView != null) {    mapView.onCreate(null);    mapView.getMapAsync(this);  }}  }
class C{  public void drop(int id){  phlux.drop(key,id);}  }
class C{  DESKey(byte[] key,int offset) throws InvalidKeyException {  if (key == null || key.length - offset < DESKeySpec.DES_KEY_LEN) {    throw new InvalidKeyException("Wrong key size");  }  this.key=new byte[DESKeySpec.DES_KEY_LEN];  System.arraycopy(key,offset,this.key,0,DESKeySpec.DES_KEY_LEN);  DESKeyGenerator.setParityBit(this.key,0);}  }
class C{  @Override public void pushMessageAsync(Message msg) throws org.apache.thrift.TException {  pushMessageSync(msg);  return;}  }
class C{  public static <T>T checkNotNull(T reference){  return com.google.common.base.Preconditions.checkNotNull(reference);}  }
class C{  private void checkDeptExists(String entidad) throws Exception {  int count;  DepartmentsTable table=new DepartmentsTable();  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession(entidad));    if (_id == Defs.NULL_ID)     count=DbSelectFns.selectCount(dbConn,table.getBaseTableName(),table.getCountNameQual(_name)); else     count=DbSelectFns.selectCount(dbConn,table.getBaseTableName(),table.getCountNameIdQual(_id,_name));    if (count > 0)     AdminException.throwException(DeptErrorCodes.EC_DEPT_EXIST_NAME);  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    dbConn.close();  }}  }
class C{  @Override public void validate(final IDescription desc){  final IExpressionDescription position=desc.getFacet(IKeyword.POSITION);  final IExpressionDescription direction=desc.getFacet(IKeyword.DIRECTION);  final IExpressionDescription spotAngle=desc.getFacet(IKeyword.SPOT_ANGLE);  final IExpressionDescription linearAttenuation=desc.getFacet(IKeyword.LINEAR_ATTENUATION);  final IExpressionDescription quadraticAttenuation=desc.getFacet(IKeyword.QUADRATIC_ATTENUATION);  final IExpression idExp=desc.getFacetExpr(IKeyword.ID);  if (idExp != null && idExp.isConst()) {    final int id=Cast.asInt(null,idExp.literalValue());    if (id <= 0 || id > 7) {      desc.error("'id' facet accept values between 1 and 7. (the light \"0\" is only used for the ambient light, which can be changed through the \"ambient_light\" display facet)",IGamlIssue.GENERAL);    }  }  final IExpression spec=desc.getFacetExpr(IKeyword.TYPE);  if (spec != null && spec.isConst()) {    final String typeString=spec.literalValue().toString();    if (typeString.compareTo("direction") == 0) {      if (position != null) {        desc.error("a direction light has no position (only a direction)",IGamlIssue.GENERAL);      }      if (linearAttenuation != null) {        desc.error("a direction light has no attenuation",IGamlIssue.GENERAL);      }      if (quadraticAttenuation != null) {        desc.error("a direction light has no attenuation",IGamlIssue.GENERAL);      }    } else     if (typeString.compareTo("spot") == 0) {    } else {      if (direction != null) {        desc.error("a point light has no direction (only a position)",IGamlIssue.GENERAL);      }      if (spotAngle != null) {        desc.error("a point light has no spot angle (only a spot light does !)",IGamlIssue.GENERAL);      }    }  }}  }
class C{  public synchronized boolean ready() throws IOException {  if (!connected) {    throw new IOException("Pipe not connected");  } else   if (closedByReader) {    throw new IOException("Pipe closed");  } else   if (writeSide != null && !writeSide.isAlive() && !closedByWriter && (in < 0)) {    throw new IOException("Write end dead");  }  if (in < 0) {    return false;  } else {    return true;  }}  }
class C{  public static String html2unicode(String text){  if (text == null)   return null;  text=ampPattern.matcher(text).replaceAll("&");  int p=0, p1, q;  final StringBuilder sb=new StringBuilder(text.length());  String s;  Character r;  while (p < text.length()) {    p1=text.indexOf('&',p);    if (p1 < 0) {      sb.append(text,p,text.length());      break;    }    sb.append(text,p,p1);    p=p1;    if (p >= text.length()) {      break;    }    q=text.indexOf(';',p);    if (q < 0) {      sb.append(text,p,text.length());      break;    }    s=text.substring(p,q + 1);    p=q + 1;    int pp;    while ((pp=s.indexOf('&',1)) >= 0) {      sb.append(s.substring(0,pp));      s=s.substring(pp);    }    if (s.equals(AMP_HTML)) {      sb.append(AMP_UNICODE);      continue;    }    if (s.equals(SPACE_HTML)) {      sb.append(" ");      continue;    }    if ((r=HTML2UNICODE4XML.get(s)) != null) {      sb.append(r.charValue());      continue;    }    if ((r=HTML2UNICODE4HTML.get(s)) != null) {      sb.append(r);      continue;    }    if (s.charAt(1) == '#') {      if (s.charAt(2) == 'x' || s.charAt(2) == 'X') {        sb.append(new char[]{(char)Integer.parseInt(s.substring(3,s.length() - 1),16)});        continue;      }      String ucs=s.substring(2,s.length() - 1);      try {        int uc=Integer.parseInt(ucs);        sb.append(new char[]{(char)uc});      } catch (      final NumberFormatException e) {      }      continue;    }    sb.append(s);  }  return sb.toString();}  }
class C{  public int model(){  return theType.model();}  }
class C{  protected boolean notDeclared(ChooseConfig cc){  return isNull(cc);}  }
class C{  public Object generate(Element element,ElementMetadata<?,?> metadata){  for (  MetadataKey<?> source : sources) {    if (source instanceof ElementKey<?,?>) {      ElementKey<?,?> childKey=(ElementKey<?,?>)source;      Element child=element.getElement(childKey);      if (child != null) {        ElementMetadata<?,?> childMeta=(metadata == null) ? null : metadata.bindElement(childKey);        Object value=(childMeta == null) ? child.getTextValue() : childMeta.generateValue(child,childMeta);        if (value != null) {          return value;        }      }    } else {      AttributeKey<?> attKey=(AttributeKey<?>)source;      AttributeMetadata<?> attMeta=(metadata == null) ? null : metadata.bindAttribute(attKey);      Object value=(attMeta == null) ? element.getAttributeValue(attKey) : attMeta.generateValue(element,metadata);      if (value != null) {        return value;      }    }  }  return null;}  }
class C{  public void insert(Key key){  Node x=new Node();  x.key=key;  x.order=0;  BinomialMinPQ<Key> H=new BinomialMinPQ<Key>();  H.head=x;  this.head=this.union(H).head;}  }
class C{  private Util(){}  }
class C{  public void decode(){  barcodeView.decodeSingle(callback);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.897 -0400",hash_original_method="B6BA1F8A511F86D4BD07A400290A4051",hash_generated_method="FD075556C8202DAD5701750D95F5D0CB") public boolean hasBOM() throws IOException {  return getBOM() != null;}  }
class C{  public String sqlAdmin_optimizeDatabase(int step,String vendorName,String catalogName,String schemaName){  return m_interfaces.get(getDBVendorID(vendorName)).sqlAdmin_optimizeDatabase(step,catalogName,schemaName);}  }
class C{  public ChannelCreateHandler(ImplDiscordAPI api){  super(api,true,"CHANNEL_CREATE");}  }
class C{  public void reverse(int from,int to){  if (from == to) {    return;  }  if (from > to) {    throw new IllegalArgumentException("from cannot be greater than to");  }  for (int i=from, j=to - 1; i < j; i++, j--) {    swap(i,j);  }}  }
class C{  private int[] determineDimensions(int sourceCodeWords,int errorCorrectionCodeWords) throws WriterException {  float ratio=0.0f;  int[] dimension=null;  for (int cols=minCols; cols <= maxCols; cols++) {    int rows=calculateNumberOfRows(sourceCodeWords,errorCorrectionCodeWords,cols);    if (rows < minRows) {      break;    }    if (rows > maxRows) {      continue;    }    float newRatio=((17 * cols + 69) * DEFAULT_MODULE_WIDTH) / (rows * HEIGHT);    if (dimension != null && Math.abs(newRatio - PREFERRED_RATIO) > Math.abs(ratio - PREFERRED_RATIO)) {      continue;    }    ratio=newRatio;    dimension=new int[]{cols,rows};  }  if (dimension == null) {    int rows=calculateNumberOfRows(sourceCodeWords,errorCorrectionCodeWords,minCols);    if (rows < minRows) {      dimension=new int[]{minCols,minRows};    }  }  if (dimension == null) {    throw new WriterException("Unable to fit message in columns");  }  return dimension;}  }
class C{  public boolean isImageIsAttached(){  Object oo=get_Value(COLUMNNAME_ImageIsAttached);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:07.158 -0500",hash_original_method="FB112EA9A2452AC298500FCFB087229A",hash_generated_method="6E2B72B3E31E56E7A74881663748CC80") private void nativeGeolocationPermissionsProvide(String origin,boolean allow,boolean remember){  addTaint(origin.getTaint());  addTaint(allow);  addTaint(remember);}  }
class C{  public Map<Id<Link>,TravelTimeData> buildTravelTimeDataObject(Scenario s,String stat){  log.info("Creating TravelTimeData map using " + stat + " travel times from "+ file.getAbsolutePath());  Map<Id<Link>,TravelTimeData> ttm=new TreeMap<Id<Link>,TravelTimeData>();  Integer index=null;  int linkCounter=0;  int linkMultiplier=1;  try {    BufferedReader br=IOUtils.getBufferedReader(file.getAbsolutePath());    try {      String[] header=br.readLine().split("\t");      boolean found=false;      int i=0;      String string="TRAVELTIME0-1" + stat;      do {        if (header[i].equalsIgnoreCase(string)) {          found=true;          index=i;        } else {          i++;        }      } while (found == false && i < header.length);      if (!found) {        throw new RuntimeException("Could not find and index for " + s + " in "+ file.getAbsolutePath());      }      String line=null;      while ((line=br.readLine()) != null) {        String[] values=line.split("\t");        Id<Link> linkId=Id.create(values[0],Link.class);        Link l=s.getNetwork().getLinks().get(linkId);        TravelTimeData ttd=new TravelTimeDataArray(l,24);        try {          for (i=0; i < 24; i++) {            ttd.addTravelTime(i,Double.parseDouble(values[index + (i * 3)]));          }          ttm.put(l.getId(),ttd);        } catch (        IndexOutOfBoundsException e) {          log.warn("Could not get the travel time for link " + l.getId() + " for hour "+ i);          e.printStackTrace();        }        if (++linkCounter == linkMultiplier) {          log.info("   Links processed: " + linkCounter);          linkMultiplier*=2;        }      }    }  finally {      br.close();    }  } catch (  FileNotFoundException e) {    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  }  return ttm;}  }
class C{  public void draw(Canvas c,Rect bounds){  final RectF arcBounds=mTempBounds;  arcBounds.set(bounds);  arcBounds.inset(mStrokeInset,mStrokeInset);  final float startAngle=(mStartTrim + mRotation) * 360;  final float endAngle=(mEndTrim + mRotation) * 360;  float sweepAngle=endAngle - startAngle;  mPaint.setColor(mColors[mColorIndex]);  c.drawArc(arcBounds,startAngle,sweepAngle,false,mPaint);  drawTriangle(c,startAngle,sweepAngle,bounds);  if (mAlpha < 255) {    mCirclePaint.setColor(mBackgroundColor);    mCirclePaint.setAlpha(255 - mAlpha);    c.drawCircle(bounds.exactCenterX(),bounds.exactCenterY(),bounds.width() / 2,mCirclePaint);  }}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public boolean isDiagnostics(){  return diagnostics;}  }
class C{  public HessianDebugOutputStream(OutputStream os,Logger log,Level level){  this(os,new PrintWriter(new LogWriter(log,level)));}  }
class C{  public MyersDiff(final Equalizer<T> equalizer){  if (equalizer == null) {    throw new IllegalArgumentException("equalizer must not be null");  }  this.equalizer=equalizer;}  }
class C{  public void actionPerformed(ActionEvent evt){  if ((!HTMLComponent.PROCESS_HTML_MP1_ONLY) && (isMap) && (evt.getX() != -1)) {    processLink(htmlC,link + "?" + (evt.getX() - getAbsoluteX())+ ","+ (evt.getY() - getAbsoluteY()));  } else {    processLink(htmlC,link);  }}  }
class C{  public static void compressDbTables(String[] tableNamesArray) throws AdeException {  logger.trace("compressDbTables( names[Array] ) -> entry");  for (  String curr : tableNamesArray) {    compressTable(curr,INPLACE_COMPRESS);  }  logger.trace("compressDbTables( names[Array] ) <- exit");}  }
class C{  public void abort() throws IOException {  completeEdit(this,false);}  }
class C{  public NotificationChain basicSet_lok(LocalArgumentsVariable new_lok,NotificationChain msgs){  LocalArgumentsVariable old_lok=_lok;  _lok=new_lok;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.N4_METHOD_DECLARATION__LOK,old_lok,new_lok);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public void testChangeUserAndCharsets() throws Exception {  if (versionMeetsMinimum(4,1)) {    MysqlConnectionPoolDataSource ds=new MysqlConnectionPoolDataSource();    ds.setURL(BaseTestCase.dbUrl);    ds.setCharacterEncoding("utf-8");    PooledConnection pooledConnection=ds.getPooledConnection();    Connection connToMySQL=pooledConnection.getConnection();    this.rs=connToMySQL.createStatement().executeQuery("SELECT @@character_set_results");    assertTrue(this.rs.next());    String toCheck=null;    if (versionMeetsMinimum(4,1,15)) {      if (versionMeetsMinimum(5,0)) {        if (versionMeetsMinimum(5,0,13)) {          toCheck=null;        } else {          toCheck="NULL";        }      } else {        toCheck=null;      }    } else {      toCheck="NULL";    }    assertEquals(toCheck,this.rs.getString(1));    this.rs=connToMySQL.createStatement().executeQuery("SHOW SESSION VARIABLES LIKE 'character_set_client'");    assertTrue(this.rs.next());    assertEquals(0,this.rs.getString(2).indexOf("utf8"));    connToMySQL.close();    connToMySQL=pooledConnection.getConnection();    this.rs=connToMySQL.createStatement().executeQuery("SELECT @@character_set_results");    assertTrue(this.rs.next());    assertEquals(toCheck,this.rs.getString(1));    this.rs=connToMySQL.createStatement().executeQuery("SHOW SESSION VARIABLES LIKE 'character_set_client'");    assertTrue(this.rs.next());    assertEquals(0,this.rs.getString(2).indexOf("utf8"));    pooledConnection.getConnection().close();  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:54.194 -0400",hash_original_method="8A5824D7D5A6A500513F1327DF553C3E",hash_generated_method="D7286EF119EBFCC6BD22A16C8DC05097") public static InputStream toInputStream(CharSequence input){  return toInputStream(input,Charset.defaultCharset());}  }
class C{  public static String readFileToString(File file,Charset encoding) throws IOException {  InputStream in=null;  try {    in=openInputStream(file);    return IOUtils.toString(in,Charsets.toCharset(encoding));  }  finally {    IOUtils.closeQuietly(in);  }}  }
class C{  public EncryptedPrivateKeyInfo(byte[] encoded) throws IOException {  if (encoded == null) {    throw new NullPointerException("the encoded parameter " + "must be non-null");  }  this.encoded=encoded.clone();  DerValue val=new DerValue(this.encoded);  DerValue[] seq=new DerValue[2];  seq[0]=val.data.getDerValue();  seq[1]=val.data.getDerValue();  if (val.data.available() != 0) {    throw new IOException("overrun, bytes = " + val.data.available());  }  this.algid=AlgorithmId.parse(seq[0]);  if (seq[0].data.available() != 0) {    throw new IOException("encryptionAlgorithm field overrun");  }  this.encryptedData=seq[1].getOctetString();  if (seq[1].data.available() != 0) {    throw new IOException("encryptedData field overrun");  }}  }
class C{  public static int ENOTCONN(){  return Errno.ENOTCONN.intValue();}  }
class C{  public ConnectException(){}  }
class C{  public NonRepeatableRequestException(){  super();}  }
class C{  public int bdd_nodes(){  return soot.PhaseOptions.getInt(options,"bdd-nodes");}  }
class C{  public final void bind(){  if (mIsBound) {    return;  }  bindImpl();  mIsBound=true;}  }
class C{  public static int convertToColumnIndex(String columnName){  columnName=columnName.toUpperCase(Locale.ENGLISH);  int index=0;  for (int i=0; i < columnName.length(); i++) {    index*=26;    index+=columnName.charAt(i) - 'A' + 1;  }  return index - 1;}  }
class C{  public static int[] shuffled(int l){synchronized (random) {    return random.shuffled(l);  }}  }
class C{  public void attempUnjam(){  if (!laserSat.getJammed())   return;  laserSat.setJammed(false);  finished=false;  checkCanRun();}  }
class C{  public boolean pageSetupDialog(PrinterJob job){  PrintRequestAttributeSet prats=getPrintRequestAttributeSet();  PageFormat pf=job.pageDialog(prats);  setPrintRequestAttributeSet(prats);  return true;}  }
class C{  public static int convertDptoPx(Context context,final float dpValue){  final float density=context.getResources().getDisplayMetrics().density;  return (int)(dpValue * density + 0.5f);}  }
class C{  public void test_ticket_bg1899_f() throws Exception {  new TestHelper("ticket_bg1899f","ticket_bg1899f.rq","ticket_bg1899f.nt","ticket_bg1899f.srx").runTest();}  }
class C{  public SRaster(LLPoint ll1,short offset_x1,short offset_y1,short width,short height,short x_hot,short y_hot){  super(GraphicType.GT_Raster,RenderType.RT_Offset,LineType.LT_Unknown,DeclutterType.DC_None);  p1_=new XYPoint(offset_x1,offset_y1);  ll1_=ll1;  width_=width;  height_=height;  x_hot_=x_hot;  y_hot_=y_hot;  pixels_=new byte[height * width];  colorsTotal_=0;  transparent_=0;  ct_=new CTEntry[0];}  }
class C{  private static int findNalStartCode(byte[] data,int index){  int endIndex=data.length - NAL_START_CODE.length;  for (int i=index; i <= endIndex; i++) {    if (isNalStartCode(data,i)) {      return i;    }  }  return -1;}  }
class C{  protected AbstractWizardPage(){}  }
class C{  public static long successor(final long n) throws NoSuccessorException {  if (Long.MAX_VALUE == n) {    throw new NoSuccessorException();  } else {    return n + 1L;  }}  }
class C{  public CLDevice[] createSubDevicesEqually(int computeUnitsForEverySubDevice){  return createSubDevices(pointerToSizeTs(CL_DEVICE_PARTITION_EQUALLY,computeUnitsForEverySubDevice,0,0));}  }
class C{  public static boolean hasLength(String str){  return hasLength((CharSequence)str);}  }
class C{  @POST @Path("/{id}/deactivate") @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.TENANT_ADMIN}) public Response deactivateOrder(@PathParam("id") URI id) throws DatabaseException {  Order order=queryResource(id);  ArgValidator.checkEntity(order,id,true);  if (order.getScheduledEventId() != null) {    throw APIException.badRequests.scheduledOrderNotAllowed("deactivation");  }  orderManager.deleteOrder(order);  auditOpSuccess(OperationTypeEnum.DELETE_ORDER,order.auditParameters());  return Response.ok().build();}  }
class C{  public void addMethod(Method m){  m.resolve(this);  methods.addElement(m);}  }
class C{  @Override public byte[] executeAttack(){  LOG.info("FindIV simple method started");  lastIvByteOriginal=iv[blockSize - 1];  findPaddingMasks();  identifyOracleType();  decryptLastByte();  int searchedBytes;  if (processingLastBlock) {    searchedBytes=blockSize - properties.getByte(blockSize - 1);  } else {    searchedBytes=blockSize - 1;  }  LOG.info("Starting to attack specific bytes with the FindByte method");  byte[] tempIV=iv.clone();  for (int i=0; i < searchedBytes; i++) {    int mask=this.getMaskForPadding(blockSize - i - 1);    tempIV[blockSize - 1]=(byte)(lastIvByteOriginal ^ mask);    CBCOracleRequest req=new CBCOracleRequest(tempIV,c1);    OracleResponse resp=m_Oracle.queryOracle(req);    if (resp.getResult() != OracleResponse.Result.VALID) {      LOG.info("Byte " + i + " was originally '<'.");      tempIV[i]=(byte)(tempIV[i] ^ 1);      properties.setByte(i,(byte)0x3C);    }    if (!properties.isByteDecrypted(i)) {      try {        FindByteMethod findByteMethod=new FindByteMethod(m_Oracle,tempIV,c1);        LOG.info("Attack on byte: " + i);        byte b=findByteMethod.executeAttack(i);        properties.setByte(i,b);        LOG.info("Result " + (char)b + " (0x"+ String.format("%02X",b)+ ")");      } catch (      NoColumnFoundException ncfe) {        LOG.warn("Byte " + i + " could not be decrypted. Is the file using"+ "a different character set or includes strange special"+ " characters?");        LOG.debug("debug ",ncfe);      }    }  }  byte[] decrypted;  if (processingLastBlock) {    decrypted=Arrays.copyOf(properties.getDecryptedBytes(),searchedBytes);  } else {    decrypted=Arrays.copyOf(properties.getDecryptedBytes(),blockSize);  }  return decrypted;}  }
class C{  private void cmd_parent(){  int index=m_curWinTab.getSelectedIndex();  if (index == 0)   return;  if (m_curWinTab instanceof VTabbedPane) {    VTabbedPane tabPane=(VTabbedPane)m_curWinTab;    index--;    while (index >= 0) {      if (tabPane.isEnabledAt(index)) {        m_curGC.getTable().removeEditor();        m_curGC.acceptEditorChanges();        tabPane.setSelectedIndex(index);        break;      } else       index--;    }  } else {    m_curGC.getTable().removeEditor();    m_curGC.acceptEditorChanges();    m_curWinTab.setSelectedIndex(index - 1);  }}  }
class C{  public CountRequest routing(String... routings){  this.routing=Strings.arrayToCommaDelimitedString(routings);  return this;}  }
class C{  @Override public CreditCard title(@NotNull String title){  mTitle=title;  return this;}  }
class C{  private void filtro(String valor,ObservableList<Setor> listaSetor){  FilteredList<Setor> dadosFiltrados=new FilteredList<>(listaSetor,null);  dadosFiltrados.setPredicate(null);  SortedList<Setor> dadosOrdenados=new SortedList<>(dadosFiltrados);  dadosOrdenados.comparatorProperty().bind(tbSetor.comparatorProperty());  Filtro.mensagem(legenda,dadosOrdenados.size(),"Quantidade de setores encontradas");  tbSetor.setItems(dadosOrdenados);}  }
class C{  static int applyMaskPenaltyRule1(ByteMatrix matrix){  return applyMaskPenaltyRule1Internal(matrix,true) + applyMaskPenaltyRule1Internal(matrix,false);}  }
class C{  public Builder(@NonNull Context context,@NonNull Url url){  if (null == context) {    throw new IllegalArgumentException("Context must not be null.");  }  if (null == url) {    throw new IllegalArgumentException("Url must not be null.");  }  this.context=context.getApplicationContext();  this.url=url;}  }
class C{  public Iflt4(){  super("iflt4",4);}  }
class C{  @Override protected void complete(DbClient dbClient,ControllerLockingService locker,Operation.Status status,ServiceCoded coded) throws DeviceControllerException {  unlockCG(dbClient,locker);  complete(dbClient,status,coded);}  }
class C{  public UniqueIdGenerator(int numIds){  if (numIds <= 0) {    throw new IllegalArgumentException(LocalizedStrings.UniqueIdGenerator_NUMIDS_0.toLocalizedString());  }  this.units=new long[(unitIndex(numIds - 1) + 1)];  this.MAX_ID=numIds - 1;  this.ctr=0;}  }
class C{  public void evaluatePerformance(){  final int SIZE=100;  TextAnnotation tat=tab.createTextAnnotation(TEST_INPUT);  try {    getView(tat);  } catch (  AnnotatorException e) {    e.printStackTrace();    fail(e.getMessage());  }  long expectedPerformance=this.measureMachinePerformance();  System.out.println("Expect " + expectedPerformance);{    TextAnnotation ta=tab.createTextAnnotation(TEST_INPUT);    View view=null;    try {      view=getView(ta);    } catch (    AnnotatorException e) {      e.printStackTrace();      fail(e.getMessage());    }    assertTrue(view != null);  }  long start=System.currentTimeMillis();  for (int i=0; i < SIZE; i++) {    TextAnnotation ta=tab.createTextAnnotation(TEST_INPUT);    View view=null;    try {      view=getView(ta);    } catch (    AnnotatorException e) {      e.printStackTrace();      fail(e.getMessage());    }    assertTrue(view != null);    for (    Constituent c : view.getConstituents()) {      assertTrue("No entity named \"" + c.toString() + "\"",entities.contains(c.toString()));    }  }  start=System.currentTimeMillis() - start;  start/=SIZE;  System.out.printf("For text size = %d, average NER runtime = %d, normalized = %f",TEST_INPUT.length(),start,(double)start / (double)expectedPerformance);  assertTrue(start <= expectedPerformance);}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writeShape(this.dataArea,stream);  SerialUtilities.writeShape(this.plotArea,stream);}  }
class C{  public int resumeDownload(long... ids){  initResumeMethod();  if (resumeDownload == null) {    return -1;  }  try {    return ((Integer)resumeDownload.invoke(downloadManager,ids)).intValue();  } catch (  Exception e) {    e.printStackTrace();  }  return -1;}  }
class C{  public double computeAverageLocalOfObservationsWithCorrection() throws Exception {  double te=0.0;  if (debug) {    MatrixUtils.printMatrix(System.out,destNextPastSourceVectors);  }  for (int b=0; b < totalObservations; b++) {    int[] counts=getCounts(destNextPastSourceVectors[b],b);    double cont=0.0;    if (counts[NEXT_PAST_SOURCE] > 0) {      cont=MathsUtils.digamma(counts[NEXT_PAST_SOURCE]) - MathsUtils.digamma(counts[PAST_SOURCE]) - MathsUtils.digamma(counts[NEXT_PAST]) + MathsUtils.digamma(counts[PAST]);    }    te+=cont;  }  lastAverage=te / (double)totalObservations / Math.log(2.0);  return lastAverage;}  }
class C{  @Override public void flush() throws IOException {synchronized (mux) {    checkClosed(null,0);    sendBufferIfNotEmpty();  }}  }
class C{  private Color determineColor(){  float hpRatio=(float)model.getValue();  float r=Math.min((1.0f - hpRatio) * 2.0f,1.0f);  float g=Math.min(hpRatio * 2.0f,1.0f);  return new Color(r,g,0.0f);}  }
class C{  public SimpleObjectPermissionSet(){}  }
class C{  private boolean searchPage(final int page,final int currentKey,final ObservableList<String> resultListModel) throws Exception {  final PdfPageData currentPageData=decode_pdf.getPdfPageData();  final int x1=currentPageData.getMediaBoxX(page);  final int x2=currentPageData.getMediaBoxWidth(page) + x1;  final int y2=currentPageData.getMediaBoxY(page);  final int y1=currentPageData.getMediaBoxHeight(page) + y2;  return searchPage(page,x1,y1,x2,y2,currentKey,resultListModel);}  }
class C{  public static synchronized int insertProviderAt(Provider provider,int position){  int size=providers.size();  if ((position < 1) || (position > size)) {    position=size + 1;  }  providers.add(position - 1,provider);  providersNames.put(provider.getName(),provider);  setNeedRefresh();  return position;}  }
class C{  public void insertElementAt(Node value,int at){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_NOT_MUTABLE,null));  if (null == m_map) {    m_map=new Node[m_blocksize];    m_mapSize=m_blocksize;  } else   if ((m_firstFree + 1) >= m_mapSize) {    m_mapSize+=m_blocksize;    Node newMap[]=new Node[m_mapSize];    System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);    m_map=newMap;  }  if (at <= (m_firstFree - 1)) {    System.arraycopy(m_map,at,m_map,at + 1,m_firstFree - at);  }  m_map[at]=value;  m_firstFree++;}  }
class C{  public static void main(String[] args){  junit.textui.TestRunner.run(UtilsTest.class);}  }
class C{  @Override public boolean resizeImage(final int x,final int y,final boolean force){  return true;}  }
class C{  protected void addSubComponents(){  add(iconButton);  add(maxButton);  add(closeButton);}  }
class C{  public T fetch(Object key){  return get(key);}  }
class C{  public void plot(AbstractDrawer draw){  if (!visible)   return;  draw.setColor(color);  draw.setFont(font);  draw.setBaseOffset(base_offset);  draw.setTextOffset(cornerE,cornerN);  draw.setTextAngle(angle);  draw.drawText(label,coord);  draw.setBaseOffset(null);}  }
class C{  public boolean isPublic(){  return Modifier.isPublic(this.getModifiers());}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MHRPaymentCheck[");  sb.append(get_ID()).append("-").append(getDocumentNo()).append("-").append(getPayAmt()).append(",PaymetRule=").append(getPaymentRule()).append(",Qty=").append(getQty()).append("]");  return sb.toString();}  }
class C{  private String generateRevisionSQLStatement(boolean tableExists,Map<String,Set<Integer>> dataSourceToUse){  StringBuffer output=new StringBuffer();  output.append("CREATE TABLE IF NOT EXISTS " + GeneratorConstants.TABLE_TPLID_REVISIONID + " ("+ "templateId INTEGER UNSIGNED NOT NULL,"+ "revisionId INTEGER UNSIGNED NOT NULL, UNIQUE(templateId, revisionId));\r\n");  output.append(this.generateSQLStatementForDataInTable(dataSourceToUse,GeneratorConstants.TABLE_TPLID_REVISIONID));  if (!tableExists) {    output.append("CREATE INDEX revisionIdx ON " + GeneratorConstants.TABLE_TPLID_REVISIONID + "(revisionID);");    output.append("\r\n");  }  return output.toString();}  }
class C{  @Transactional protected void _setServiceEnabled(boolean enabled){synchronized (_serviceManagementRecordService) {    ServiceManagementRecord record=_serviceManagementRecordService.findServiceManagementRecord(Service.SCHEDULING);    if (record == null) {      record=new ServiceManagementRecord(_userService.findAdminUser(),Service.SCHEDULING,enabled);    }    record.setEnabled(enabled);    _serviceManagementRecordService.updateServiceManagementRecord(record);  }}  }
class C{  public int compareTo(final NV o){  return name.compareTo(o.name);}  }
class C{  public void clearSelections(){  currentSelection.clear();  Overlap2DFacade.getInstance().sendNotification(MsgAPI.ITEM_SELECTION_CHANGED,currentSelection);}  }
class C{  @Field(8) public cl_image_desc num_samples(int num_samples){  this.io.setIntField(this,8,num_samples);  return this;}  }
class C{  private byte[] padPassword(byte[] password){  if (password == null) {    password=new byte[0];  }  byte[] padded=new byte[32];  final int numContributingPasswordBytes=password.length > padded.length ? padded.length : password.length;  System.arraycopy(password,0,padded,0,numContributingPasswordBytes);  if (password.length < padded.length) {    System.arraycopy(PW_PADDING,0,padded,password.length,padded.length - password.length);  }  return padded;}  }
class C{  public void update(){  offsetX=gp.getX() - getX();  offsetY=gp.getY() - getY();  if (gp instanceof OffsetGrabPoint) {    ((OffsetGrabPoint)gp).updateOffsets();  }}  }
class C{  public void takeMultipleColumnFamilySnapshot(String snapshotName,String... columnFamilyList) throws IOException {  if (null != columnFamilyList && columnFamilyList.length != 0) {    ssProxy.takeMultipleColumnFamilySnapshot(snapshotName,columnFamilyList);  } else {    throw new IOException("The column family List  for a snapshot should not be empty or null");  }}  }
class C{  public SearchRequest templateSource(String template){  this.templateSource=new BytesArray(template);  return this;}  }
class C{  public void addParameter(String key,String... values){  if (values != null && values.length > 0) {    when(request.getParameter(key)).thenReturn(values[0]);  }  when(request.getParameterValues(key)).thenReturn(values);  paramMap.put(key,values);  paramNames.add(key);}  }
class C{  public boolean isKeepAlive(){  return keepAlive;}  }
class C{  public Object loadStepData(URI workflowURI,String key,String stepId){  try {    Workflow workflow=loadWorkflowFromUri(workflowURI);    if (workflow == null) {      Exception ex=WorkflowException.exceptions.workflowNotFound(stepId);      _log.error("Can't load step state for step: " + stepId,ex);      return null;    }    String path=getZKStepDataPath(stepId);    Stat stat=_dataManager.checkExists(path);    if (stat != null) {      Object data=_dataManager.getData(path,false);      _log.info(String.format("Loaded WorkflowStepData for %s %s %s",workflowURI,stepId,key));      return data;    }    Object data=null;    WorkflowStepData stepData=getWorkflowStepData(workflow.getWorkflowURI(),stepId,key);    if (stepData != null) {      data=GenericSerializer.deserialize(stepData.getData());      _log.info(String.format("Loaded WorkflowStepData for %s %s %s",workflowURI,stepId,key));    } else {      _log.info(String.format("No WorkflowStepData found for %s %s %s",workflowURI,stepId,key));    }    return data;  } catch (  Exception ex) {    _log.error("Can't load step data for step: " + stepId);  }  return null;}  }
class C{  public synchronized void close() throws IOException {  if (journalWriter == null) {    return;  }  for (  Entry entry : new ArrayList<Entry>(lruEntries.values())) {    if (entry.currentEditor != null) {      entry.currentEditor.abort();    }  }  trimToSize();  journalWriter.close();  journalWriter=null;}  }
class C{  public ExamException(final String msg){  super(msg);}  }
class C{  @Inline @Override public final double doubleRead(ObjectReference objref,Word offset,Word location,int mode){  return Magic.getDoubleAtOffset(objref.toObject(),offset.toOffset());}  }
class C{  public static void main(String[] args){  ResourceSet resourceSet=new ResourceSetImpl();  resourceSet.getResourceFactoryRegistry().getExtensionToFactoryMap().put(Resource.Factory.Registry.DEFAULT_EXTENSION,new XMIResourceFactoryImpl());  resourceSet.getPackageRegistry().put(EipPackage.eNS_URI,EipPackage.eINSTANCE);  if (args.length == 0) {    System.out.println("Enter a list of file paths or URIs that have content like this:");    try {      Resource resource=resourceSet.createResource(URI.createURI("http:///My.eip"));      Channel root=EipFactory.eINSTANCE.createChannel();      resource.getContents().add(root);      resource.save(System.out,null);    } catch (    IOException exception) {      exception.printStackTrace();    }  } else {    for (int i=0; i < args.length; ++i) {      File file=new File(args[i]);      URI uri=file.isFile() ? URI.createFileURI(file.getAbsolutePath()) : URI.createURI(args[i]);      try {        Resource resource=resourceSet.getResource(uri,true);        System.out.println("Loaded " + uri);        for (        EObject eObject : resource.getContents()) {          Diagnostic diagnostic=Diagnostician.INSTANCE.validate(eObject);          if (diagnostic.getSeverity() != Diagnostic.OK) {            printDiagnostic(diagnostic,"");          }        }      } catch (      RuntimeException exception) {        System.out.println("Problem loading " + uri);        exception.printStackTrace();      }    }  }}  }
class C{  protected void init(){  GraphicsConfigTemplate3D template=new GraphicsConfigTemplate3D();  GraphicsEnvironment env=GraphicsEnvironment.getLocalGraphicsEnvironment();  GraphicsDevice device=env.getDefaultScreenDevice();  GraphicsConfiguration config=device.getBestConfiguration(template);  canvas=new Canvas3D(config);  canvas.setSize(new Dimension(DEFAULT_DIMENSION,DEFAULT_DIMENSION));  objRootBG=new BranchGroup();  objRootBG.setCapability(Group.ALLOW_CHILDREN_EXTEND);  constructWorld(objRootBG);}  }
class C{  public SWFText tagDefineText(int id,Rect bounds,Matrix matrix) throws IOException {  if (tags != null) {    return tags.tagDefineText(id,bounds,matrix);  }  return null;}  }
class C{  protected void checkTEForGivenData(double[] var1,double[] var2,int historyK,int historyL,int[] kNNs,double[] expectedResults) throws Exception {  TransferEntropyCalculatorKraskov teCalc=getNewCalc(1);  var1=MatrixUtils.normaliseIntoNewArray(var1);  var2=MatrixUtils.normaliseIntoNewArray(var2);  for (int kIndex=0; kIndex < kNNs.length; kIndex++) {    int k=kNNs[kIndex];    teCalc.setProperty(ConditionalMutualInfoCalculatorMultiVariateKraskov.PROP_K,Integer.toString(k));    teCalc.setProperty(ConditionalMutualInfoCalculatorMultiVariateKraskov.PROP_NORMALISE,Boolean.toString(false));    teCalc.setProperty(ConditionalMutualInfoCalculatorMultiVariateKraskov.PROP_NUM_THREADS,NUM_THREADS_TO_USE);    teCalc.setProperty(ConditionalMutualInfoCalculatorMultiVariateKraskov.PROP_ADD_NOISE,"0");    teCalc.initialise(historyK,1,historyL,1,1);    teCalc.setObservations(var1,var2);    double te=teCalc.computeAverageLocalOfObservations();    System.out.printf("k=%d: Average TE %.8f (expected %.8f)\n",k,te,expectedResults[kIndex]);    assertEquals(expectedResults[kIndex],te,0.000001);  }}  }
class C{  public static Value[] subtractRegisters(Value[] x,Value[] y){  ArrayList<Value> result=new ArrayList<>(x.length);  for (  Value i : x) {    boolean append=true;    for (    Value j : y) {      if (sameRegister(i,j)) {        append=false;        break;      }    }    if (append) {      result.add(i);    }  }  Value[] resultArray=new Value[result.size()];  return result.toArray(resultArray);}  }
class C{  public void testPatchWithNoDeltas(){  final List<String> lines1=fileToLines(TestConstants.MOCK_FOLDER + "issue11_1.txt");  final List<String> lines2=fileToLines(TestConstants.MOCK_FOLDER + "issue11_2.txt");  verify(lines1,lines2,"issue11_1.txt","issue11_2.txt");}  }
class C{  private void triggerDynamicUpdates(){  if (worldObj.isRemote && state != null) {    final VoxelNeighborRenderTracker vns=state.getValue(BlockChiseled.UProperty_VoxelNeighborState);    if (vns != null && vns.isDynamic()) {      return;    }    for (    final EnumFacing f : EnumFacing.VALUES) {      final BlockPos p=getPos().offset(f);      if (worldObj.isBlockLoaded(p)) {        final TileEntity te=worldObj.getTileEntity(p);        if (te instanceof TileEntityBlockChiseledTESR) {          final TileEntityBlockChiseledTESR tesr=(TileEntityBlockChiseledTESR)te;          if (tesr.getRenderChunk() != null) {            tesr.getRenderChunk().rebuild(false);          }        }      }    }  }}  }
class C{  public ZkDataNode(ZkDataNode parent,String myId){  this.parent=parent;  this.myId=myId;  this.nodeData=null;  allChildren=new LinkedList<ZkDataNode>();}  }
class C{  public Comment createComment(String data){  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  return null;}  }
class C{  @Override public void truncate(int size){  truncate(size,new RankComparator());}  }
class C{  protected State buildPatch(TaskState.TaskStage stage,TaskState.SubStage subStage,@Nullable ServiceErrorResponse errorResponse){  State state=new State();  state.taskState=new TaskState();  state.taskState.stage=stage;  state.taskState.subStage=subStage;  state.taskState.failure=errorResponse;  return state;}  }
class C{  @Override public boolean visit(final SingleVariableDeclaration node){  addBinding(node,node.getName(),node.getType());  return true;}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  public void removeAllPrices(final long productId){  ((ProductSkuService)getService()).removeAllPrices(productId);}  }
class C{  boolean isNumeric(char ch){  return (ch >= '0' && ch <= '9');}  }
class C{  public void reset(){  color=null;  background=null;}  }
class C{  @Override public void receive(ComplexBuffer buffer){  super.broadcast(buffer);}  }
class C{  public synchronized BookKeeperClientBuilder statsLogger(StatsLogger statsLogger){  this.statsLogger=statsLogger;  return this;}  }
class C{  protected Set<File> retrieveMatchingFiles(File rootDir,String pattern) throws IOException {  if (!rootDir.exists()) {    if (logger.isDebugEnabled()) {      logger.debug("Skipping [" + rootDir.getAbsolutePath() + "] because it does not exist");    }    return Collections.emptySet();  }  if (!rootDir.isDirectory()) {    if (logger.isWarnEnabled()) {      logger.warn("Skipping [" + rootDir.getAbsolutePath() + "] because it does not denote a directory");    }    return Collections.emptySet();  }  if (!rootDir.canRead()) {    if (logger.isWarnEnabled()) {      logger.warn("Cannot search for matching files underneath directory [" + rootDir.getAbsolutePath() + "] because the application is not allowed to read the directory");    }    return Collections.emptySet();  }  String fullPattern=StringUtils.replace(rootDir.getAbsolutePath(),File.separator,"/");  if (!pattern.startsWith("/")) {    fullPattern+="/";  }  fullPattern=fullPattern + StringUtils.replace(pattern,File.separator,"/");  Set<File> result=new LinkedHashSet<File>(8);  doRetrieveMatchingFiles(fullPattern,rootDir,result);  return result;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (getAD_Org_ID() == 0) {    int context_AD_Org_ID=Env.getAD_Org_ID(getCtx());    if (context_AD_Org_ID != 0) {      setAD_Org_ID(context_AD_Org_ID);      log.warning("Changed Org to Context=" + context_AD_Org_ID);    }  }  if (getAD_Client_ID() == 0) {    m_processMsg="AD_Client_ID = 0";    return false;  }  if (newRecord && getC_DocType_ID() == 0)   setC_DocType_ID(0);  if (getM_Warehouse_ID() == 0) {    int ii=Env.getContextAsInt(getCtx(),"#M_Warehouse_ID");    if (ii != 0)     setM_Warehouse_ID(ii); else {      log.saveError("FillMandatory",Msg.getElement(getCtx(),"M_Warehouse_ID"));      return false;    }  }  if (!newRecord && is_ValueChanged("M_Warehouse_ID")) {    MDDOrderLine[] lines=getLines(false,null);    for (int i=0; i < lines.length; i++) {      if (!lines[i].canChangeWarehouse())       return false;    }  }  if (getC_BPartner_ID() == 0)   setBPartner(MBPartner.getTemplate(getCtx(),getAD_Client_ID()));  if (getC_BPartner_Location_ID() == 0)   setBPartner(new MBPartner(getCtx(),getC_BPartner_ID(),null));  if (getSalesRep_ID() == 0) {    int ii=Env.getContextAsInt(getCtx(),"#AD_User_ID");    if (ii != 0)     setSalesRep_ID(ii);  }  return true;}  }
class C{  public void menuSelectionChanged(boolean isIncluded){  setArmed(isIncluded);}  }
class C{  private void substituteNonTerminalAtPosition(final int[] words,final int position){  assert (FormatUtils.isNonterminal(this.words[position]));  final int[] result=new int[words.length + this.words.length - 1];  int resultIndex=0;  for (int i=0; i < position; i++) {    result[resultIndex++]=this.words[i];  }  for (  int word : words) {    result[resultIndex++]=word;  }  for (int i=position + 1; i < this.words.length; i++) {    result[resultIndex++]=this.words[i];  }  this.words=result;  arity--;}  }
class C{  protected void exportDone(JComponent source,Transferable data,int action){  if (shouldRemove && action == MOVE) {    TextTransferable t=(TextTransferable)data;    t.removeText();    if (withinSameComponent) {      ((RTextArea)source).endAtomicEdit();      withinSameComponent=false;    }  }  exportComp=null;}  }
class C{  public static Border createBevelBorder(int type){  return createSharedBevel(type);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void loadLevel(int lvl){  String temp=playerName;  clear();  playerName=temp;  levelStart=System.currentTimeMillis();  this.level=lvl;  int levelOffset=level * (HEIGHT + 1) + 1;  for (int y=0; y < HEIGHT; y++) {    String line=levelData[y + levelOffset];    if (line.startsWith("--")) {      logger.error("Found level seperator within level " + lvl);    }    for (int x=0; x < WIDTH; x++) {      char chr=line.charAt(x);switch (chr) {case 'x':{          container(x,y);          break;        }case '@':{        int xStart=x;        while (true) {          if ((x >= WIDTH) || (line.charAt(x) != '@')) {            x--;            break;          }          x++;        }        wall(xStart,x - xStart + 1,y);        break;      }case 'o':{      box(x,y);      break;    }case '#':{    container(x,y);    box(x,y);    break;  }case '<':{  player(x,y,Direction.LEFT);  break;}case '>':{player(x,y,Direction.RIGHT);break;}case '^':{player(x,y,Direction.UP);break;}case 'v':{player(x,y,Direction.DOWN);break;}case '(':{container(x,y);player(x,y,Direction.LEFT);break;}case ')':{container(x,y);player(x,y,Direction.RIGHT);break;}case 'A':{container(x,y);player(x,y,Direction.UP);break;}case 'V':{container(x,y);player(x,y,Direction.DOWN);break;}}}}}  }
class C{  private synchronized void drawIsometricSpritesForHex(Coords c,Graphics g,Collection<IsometricSprite> spriteArrayList){  Rectangle view=g.getClipBounds();  for (  IsometricSprite sprite : spriteArrayList) {    Coords cp=sprite.getPosition();    Rectangle spriteBounds=sprite.getBounds();    if (cp.equals(c) && view.intersects(spriteBounds) && !sprite.isHidden()) {      if (!sprite.isReady()) {        sprite.prepare();      }      sprite.drawOnto(g,spriteBounds.x,spriteBounds.y,this,false);    }  }}  }
class C{  public static void e(String msg,Throwable thr){  if (BuildConfig.DEBUG)   android.util.Log.e(TAG,buildMessage(msg),thr);}  }
class C{  public NotificationChain basicSetPattern(Pattern newPattern,NotificationChain msgs){  Pattern oldPattern=pattern;  pattern=newPattern;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,RegularExpressionPackage.REGULAR_EXPRESSION_BODY__PATTERN,oldPattern,newPattern);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public DoubleMatrix1D make(DoubleMatrix1D[] parts){  if (parts.length == 0)   return make(0);  int size=0;  for (int i=0; i < parts.length; i++)   size+=parts[i].size();  DoubleMatrix1D vector=make(size);  size=0;  for (int i=0; i < parts.length; i++) {    vector.viewPart(size,parts[i].size()).assign(parts[i]);    size+=parts[i].size();  }  return vector;}  }
class C{  @SuppressWarnings("unchecked") protected int compare(K k1,K k2){  if (comparator == null) {    return ((Comparable<K>)k1).compareTo(k2);  }  return comparator.compare((K)k1,(K)k2);}  }
class C{  public List<Point> convertActivityToPoint(List<Activity> activities){  List<Point> points=new ArrayList<Point>(activities.size());  GeometryFactory gf=new GeometryFactory();  for (  Activity activity : activities) {    points.add(gf.createPoint(activity.getLocation().getCoordinate()));  }  return points;}  }
class C{  public boolean updateReview(String reviewCommitHash,Review review,String newComment){  if (!displayWriteWarning(UPDATE_REVIEW_WARNING)) {    return false;  }  try {    gitClient.updateReviewWithComment(reviewCommitHash,review,newComment);  } catch (  GitClientException e) {    AppraiseConnectorPlugin.logError("Error updating review " + reviewCommitHash,e);    return false;  }  return true;}  }
class C{  private static String cleanJerseyRoot(String rawJerseyRoot){  String cleaned=rawJerseyRoot;  if (cleaned.endsWith("*")) {    cleaned=cleaned.substring(0,cleaned.length() - 1);  }  if (cleaned.endsWith("/")) {    cleaned=cleaned.substring(0,cleaned.length() - 1);  }  if (!cleaned.startsWith("/")) {    cleaned="/" + cleaned;  }  return cleaned;}  }
class C{  public boolean match(ConditionalExpression node,Object other){  if (!(other instanceof ConditionalExpression)) {    return false;  }  ConditionalExpression o=(ConditionalExpression)other;  return (safeSubtreeMatch(node.getExpression(),o.getExpression()) && safeSubtreeMatch(node.getThenExpression(),o.getThenExpression()) && safeSubtreeMatch(node.getElseExpression(),o.getElseExpression()));}  }
class C{  public void removeNodes(List<String> nodeIds){  for (  String nodeId : nodeIds) {    try {      removeNode(nodeId);      log.info("Remove node({}) from cassandra ring successful",nodeId);    } catch (    Exception e) {      log.warn("Remove node({}) from cassandra ring failed",nodeId,e);    }  }}  }
class C{  protected void recycleTopLevelGroup(boolean recycleConverters){synchronized (groupManagers) {    int nManagers=groupManagers.size();    for (int i=0; i < nManagers; i++) {      DOMGroupManager gm=(DOMGroupManager)groupManagers.get(i);      gm.recycleCurrentGroup();    }  }  topLevelGroup=generatorContext.domFactory.createElementNS(SVG_NAMESPACE_URI,SVG_G_TAG);  if (recycleConverters) {    filterConverter=new SVGBufferedImageOp(generatorContext);    gcConverter=new SVGGraphicContextConverter(generatorContext);  }}  }
class C{  public K peekLast(){  Entry<K> x=tail;  return x == null ? null : x.obj;}  }
class C{  boolean isAvailableTestClass(){  try {    Class.forName(detectClassName);    return true;  } catch (  Exception e) {    return false;  }}  }
class C{  public long create(Statistics statistics){  return mDaoSession.getStatisticsDao().insert(statistics);}  }
class C{  private void addMenuBar(){  final JMenu menu=new JMenu("REIL Code");  final JMenuItem copyItem=new JMenuItem(CActionProxy.proxy(new CActionCopyAllReilCode(m_textArea)));  menu.add(copyItem);  final JMenuBar menuBar=new JMenuBar();  menuBar.add(menu);  setJMenuBar(menuBar);}  }
class C{  protected Vertex createInput(String text,Network network){  Vertex sentence=network.createSentence(text);  Vertex input=network.createInstance(Primitive.INPUT);  input.setName(text);  input.addRelationship(Primitive.SENSE,getPrimitive());  input.addRelationship(Primitive.INPUT,sentence);  sentence.addRelationship(Primitive.INSTANTIATION,Primitive.DIRECTMESSAGE);  return input;}  }
class C{  public CDatabaseNodeComponent(final IDatabase database){  super(new BorderLayout());  Preconditions.checkNotNull(database,"IE01964: Database argument can't be null");  m_panel=new CDatabaseSettingsPanel(database);  final JPanel innerPanel=new JPanel(new BorderLayout());  innerPanel.add(m_panel,BorderLayout.SOUTH);  add(innerPanel,BorderLayout.NORTH);  if (database.isConnecting() || database.isLoading()) {    showProgressPanel();  }}  }
class C{  public void addCc(EncodedStringValue value){  mPduHeaders.appendEncodedStringValue(value,PduHeaders.CC);}  }
class C{  public static ConstParameter integer(int i){  return new IntConstParameter(i);}  }
class C{  public Explicit(T value,boolean explicit){  this.value=value;  this.explicit=explicit;}  }
class C{  public static void resetDefault(){  defaultInstance=null;}  }
class C{  public void acquire(){  if (DEBUG) {    Log.v(TAG,"acquire() : " + this,new RuntimeException("here"));  }  checkService();synchronized (mToken) {    acquireLocked();  }}  }
class C{  private void saveState(Serializable state) throws IOException {  ObjectOutputStream oos=null;  try {    oos=new ObjectOutputStream(new BufferedOutputStream(new FileOutputStream(stateFile)));    oos.writeObject(state);  }  finally {    if (oos != null) {      oos.close();    }  }}  }
class C{  private void visitShellInteriors(Geometry g,PlanarGraph graph){  if (g instanceof Polygon) {    Polygon p=(Polygon)g;    visitInteriorRing(p.getExteriorRing(),graph);  }  if (g instanceof MultiPolygon) {    MultiPolygon mp=(MultiPolygon)g;    for (int i=0; i < mp.getNumGeometries(); i++) {      Polygon p=(Polygon)mp.getGeometryN(i);      visitInteriorRing(p.getExteriorRing(),graph);    }  }}  }
class C{  public static byte[] decrypt(byte[] input,String key,String algorithm,byte[] ivOrSalt,int iterations) throws PageException {  return crypt(input,key,algorithm,ivOrSalt,iterations,true);}  }
class C{  public static Script createMultiSigInputScriptBytes(List<byte[]> signatures){  return createMultiSigInputScriptBytes(signatures,null);}  }
class C{  public synchronized void updateSynchronizeCloudGroups(List<IEspGroup> list){  mSyncCloudGroups.clear();  for (  IEspGroup group : list) {    if (group.getId() != 0) {      mSyncCloudGroups.add(group);    }  }  updateCloudDB();}  }
class C{  public void addLine(int x1,int y1,int x2,int y2,LinkProperties properties) throws IOException {  LinkLine.write(x1,y1,x2,y2,properties,link.dos);}  }
class C{  public KeyPair(final PublicKey publicKey){  this(publicKey,CryptoEngines.defaultEngine());}  }
class C{  public void computeOutputs(){  for (  RDDHolder<?> rddHolder : leafRdds) {    JavaRDDLike<?,?> rdd=rddHolder.getRDD();    rdd.rdd().cache();    rdd.count();  }}  }
class C{  public void onBackPressed(){  if (btc.socket.isConnected()) {    btc.sendToManualMode("stop");    btc.disconnect();  }  Intent changeToMain=new Intent(getApplicationContext(),MainActivity.class);  startActivity(changeToMain);}  }
class C{  static void putUShort(long ptr,int data){  unsafe.putShort(ptr,(short)data);}  }
class C{  boolean isMatch(InputStream is) throws StreamCorruptedException {  int idx=0;  is.mark(getReadlimit());  try {    while (idx < offset) {      int rn=(int)is.skip(offset - idx);      if (rn == -1)       return false;      idx+=rn;    }    idx=0;    while (idx < buffer.length) {      int rn=is.read(buffer,idx,buffer.length - idx);      if (rn == -1)       return false;      idx+=rn;    }    for (int i=0; i < magicNumber.length; i++) {      if (magicNumber[i] != buffer[i])       return false;    }  } catch (  IOException ioe) {    return false;  } finally {    try {      is.reset();    } catch (    IOException ioe) {      throw new StreamCorruptedException(ioe.getMessage());    }  }  return true;}  }
class C{  public synchronized void resize(int dimX){  throw new RSInvalidStateException("Resize not allowed for Adapters.");}  }
class C{  public Bar(){  this(10);}  }
class C{  @Override public Translation next(){synchronized (this) {    if (this.hasNext()) {      Translation t=this.nextTranslation;      this.nextTranslation=null;      return t;    }    return null;  }}  }
class C{  @Override public String name(){  return "analysis-url";}  }
class C{  public DockerMachineSource withRegistry(String registry){  this.registry=registry;  return this;}  }
class C{  public Vertex nextMostConscious(Vertex type,Vertex ignoring,float min,boolean inverse){  Relationship relationship=nextMostConsciousRelationship(type,ignoring,min,inverse);  if (relationship != null) {    return relationship.getTarget();  }  return null;}  }
class C{  private static void checkNotNull(Object v){  if (v == null)   throw new NullPointerException();}  }
class C{  public Builder withGravity(int gravity){  this.gravity=gravity;  return this;}  }
class C{  public WatsonServiceTest(){  if (properties == null) {    loadProperties();  }  setupLogging();}  }
class C{  public boolean apply(ObjectName name) throws BadStringOperationException, BadBinaryOpValueExpException, BadAttributeValueExpException, InvalidApplicationException {  return exp1.apply(name) && exp2.apply(name);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:58.903 -0500",hash_original_method="9272E1238094C237769096913B5B22FF",hash_generated_method="DB6B3FEA0F8483C218336ADDCC728D71") void _setDont(int option){  _options[option]&=~_DO_MASK;  if (optionHandlers[option] != null) {    optionHandlers[option].setDo(false);  }}  }
class C{  public static long readVarLong(ByteBuffer buff){  long x=buff.get();  if (x >= 0) {    return x;  }  x&=0x7f;  for (int s=7; s < 64; s+=7) {    long b=buff.get();    x|=(b & 0x7f) << s;    if (b >= 0) {      break;    }  }  return x;}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(14);  newVector.addElement(new Option("\tLearning Rate for the backpropagation algorithm.\n" + "\t(Value should be between 0 - 1, Default = 0.3).","L",1,"-L <learning rate>"));  newVector.addElement(new Option("\tMomentum Rate for the backpropagation algorithm.\n" + "\t(Value should be between 0 - 1, Default = 0.2).","M",1,"-M <momentum>"));  newVector.addElement(new Option("\tNumber of epochs to train through.\n" + "\t(Default = 500).","N",1,"-N <number of epochs>"));  newVector.addElement(new Option("\tPercentage size of validation set to use to terminate\n" + "\ttraining (if this is non zero it can pre-empt num of epochs.\n" + "\t(Value should be between 0 - 100, Default = 0).","V",1,"-V <percentage size of validation set>"));  newVector.addElement(new Option("\tThe value used to seed the random number generator\n" + "\t(Value should be >= 0 and and a long, Default = 0).","S",1,"-S <seed>"));  newVector.addElement(new Option("\tThe consequetive number of errors allowed for validation\n" + "\ttesting before the netwrok terminates.\n" + "\t(Value should be > 0, Default = 20).","E",1,"-E <threshold for number of consequetive errors>"));  newVector.addElement(new Option("\tGUI will be opened.\n" + "\t(Use this to bring up a GUI).","G",0,"-G"));  newVector.addElement(new Option("\tAutocreation of the network connections will NOT be done.\n" + "\t(This will be ignored if -G is NOT set)","A",0,"-A"));  newVector.addElement(new Option("\tA NominalToBinary filter will NOT automatically be used.\n" + "\t(Set this to not use a NominalToBinary filter).","B",0,"-B"));  newVector.addElement(new Option("\tThe hidden layers to be created for the network.\n" + "\t(Value should be a list of comma separated Natural \n" + "\tnumbers or the letters 'a' = (attribs + classes) / 2, \n"+ "\t'i' = attribs, 'o' = classes, 't' = attribs .+ classes)\n"+ "\tfor wildcard values, Default = a).","H",1,"-H <comma seperated numbers for nodes on each layer>"));  newVector.addElement(new Option("\tNormalizing a numeric class will NOT be done.\n" + "\t(Set this to not normalize the class if it's numeric).","C",0,"-C"));  newVector.addElement(new Option("\tNormalizing the attributes will NOT be done.\n" + "\t(Set this to not normalize the attributes).","I",0,"-I"));  newVector.addElement(new Option("\tReseting the network will NOT be allowed.\n" + "\t(Set this to not allow the network to reset).","R",0,"-R"));  newVector.addElement(new Option("\tLearning rate decay will occur.\n" + "\t(Set this to cause the learning rate to decay).","D",0,"-D"));  newVector.addAll(Collections.list(super.listOptions()));  return newVector.elements();}  }
class C{  public String findFileName(double lat,double lon,int level){  String lonString=DTEDFrameUtil.lonToFileString((float)lon);  String latString=DTEDFrameUtil.latToFileString((float)lat,level);  String partialFile="/" + lonString + "/"+ latString;  String ret=findFileName(dtedDirPaths,partialFile);  return ret;}  }
class C{  public static Builder createBuilder(Header header,WritableFontData data){  return new Builder(header,data);}  }
class C{  public boolean isDiskVolumeOnHost(Disk detail){  if (detail == null) {    return false;  }  if ((detail.getVolumes() == null) || (detail.getVolumes().isEmpty())) {    return false;  }  if (detail.getVolumes().size() > 1) {    return false;  }  return true;}  }
class C{  public Long addExternalMeetingMemberRemindToRoom(String SID,Long room_id,String firstname,String lastname,String email,String baseUrl,Long language_id,String jNameTimeZone,String invitorName) throws AxisFault {  try {    Long users_id=sessionManagement.checkSession(SID);    Long user_level=userManagement.getUserLevelByID(users_id);    if (authLevelManagement.checkWebServiceLevel(user_level)) {      Appointment appointment=appointmentDao.getAppointmentByRoom(room_id);      if (appointment == null) {        return -1L;      }      Long memberId=meetingMemberLogic.addMeetingMember(firstname,lastname,"0","0",appointment.getAppointmentId(),null,email,baseUrl,null,new Boolean(false),language_id,false,"",null,null,invitorName);      return memberId;    } else {      return -2L;    }  } catch (  Exception err) {    log.error("[addExternalMeetingMemberRemindToRoom] ",err);    throw new AxisFault(err.getMessage());  }}  }
class C{  public void readXml(java.io.InputStream iStream) throws SQLException, IOException {  wrs=new WebRowSetImpl();  wrs.readXml(iStream);  crsInternal=(CachedRowSetImpl)wrs;}  }
class C{  private long registerResource(IgfsClientSession ses,Closeable rsrc){  long rsrcId=rsrcIdGen.getAndIncrement();  boolean registered=ses.registerResource(rsrcId,rsrc);  assert registered : "Failed to register resource (duplicate id?): " + rsrcId;  return rsrcId;}  }
class C{  protected SassCss newEngine(){  return new SassCss();}  }
class C{  public static void loadAcademicClassifications(Long sessionId){  List acadClasses=getAcademicClassificationList(sessionId);  for (int i=0; i < acadClasses.size(); i++) {    AcademicClassification acadClass=(AcademicClassification)acadClasses.get(i);    String code=acadClass.getCode();    academicClassifications.put(code,acadClass);  }}  }
class C{  public final boolean isQueued(Thread thread){  if (thread == null)   throw new NullPointerException();  for (Node p=tail; p != null; p=p.prev)   if (p.thread == thread)   return true;  return false;}  }
class C{  private void runMatrixVectorMultiplicationTest(boolean sparseM1,ExecType instType){  RUNTIME_PLATFORM platformOld=rtplatform;  rtplatform=(instType == ExecType.MR) ? RUNTIME_PLATFORM.HADOOP : RUNTIME_PLATFORM.HYBRID;  try {    TestConfiguration config=getTestConfiguration(TEST_NAME);    double sparsityA=sparseM1 ? sparsity2 : sparsity1;    String TEST_CACHE_DIR="";    if (TEST_CACHE_ENABLED) {      TEST_CACHE_DIR="mv" + String.valueOf(sparsityA) + "/";    }    loadTestConfiguration(config,TEST_CACHE_DIR);    String HOME=SCRIPT_DIR + TEST_DIR;    fullDMLScriptName=HOME + TEST_NAME + ".dml";    programArgs=new String[]{"-args",input("A"),Integer.toString(rowsA),Integer.toString(colsA),input("B"),Integer.toString(rowsB),Integer.toString(1),output("C")};    fullRScriptName=HOME + TEST_NAME + ".R";    rCmd="Rscript" + " " + fullRScriptName + " "+ inputDir()+ " "+ expectedDir();    double[][] A=getRandomMatrix(rowsA,colsA,0,1,sparsityA,7);    writeInputMatrix("A",A,true);    double[][] B=getRandomMatrix(rowsB,1,0,1,sparsity1,3);    writeInputMatrix("B",B,true);    boolean exceptionExpected=false;    runTest(true,exceptionExpected,null,-1);    runRScript(true);    HashMap<CellIndex,Double> dmlfile=readDMLMatrixFromHDFS("C");    HashMap<CellIndex,Double> rfile=readRMatrixFromFS("C");    TestUtils.compareMatrices(dmlfile,rfile,eps,"Stat-DML","Stat-R");  }  finally {    rtplatform=platformOld;  }}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.IS_A__SINGLE_IS_A1:    getSingleIsA_1().clear();  getSingleIsA_1().addAll((Collection<? extends SingleIsA_>)newValue);return;case UmplePackage.IS_A__MULTIPLE_IS_A1:getMultipleIsA_1().clear();getMultipleIsA_1().addAll((Collection<? extends MultipleIsA_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public StyleReference(GraphicsNode node,String styleAttribute){  this.node=node;  this.styleAttribute=styleAttribute;}  }
class C{  public static GetSubscriptionKeysForSessionIdE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  GetSubscriptionKeysForSessionIdE object=new GetSubscriptionKeysForSessionIdE();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    java.util.Vector handledAttributes=new java.util.Vector();    while (!reader.isEndElement()) {      if (reader.isStartElement()) {        if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org","getSubscriptionKeysForSessionId").equals(reader.getName())) {          object.setGetSubscriptionKeysForSessionId(GetSubscriptionKeysForSessionId.Factory.parse(reader));        } else {          throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());        }      } else {        reader.next();      }    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public void processUnitResults(UnitTestProvider unitProvider){  if (unitProvider == null) {    logger.info(LOGGING_TAG,"No unit provider available.");    return;  }  if (!unitProvider.resultsAvailable()) {    logger.info(LOGGING_TAG,"No unit results available.");    return;  }  unitResults=unitProvider.getResults();}  }
class C{  public static boolean isVolatile(int flags){  return (flags & VOLATILE) != 0;}  }
class C{  private LifecycleUtils(){}  }
class C{  public final Vec2 skew(){  return new Vec2(-y,x);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:53.488 -0500",hash_original_method="DF2E03043ADDA78F2D8E4BCDFB1D36C4",hash_generated_method="DE9F6F930A27B3DA4B282721C822DF37") protected final static long ul(byte b){  long i=b & 0xFF;  return i;}  }
class C{  RVMClass(TypeReference typeRef,int[] constantPool,short modifiers,short originalModifiers,RVMClass superClass,RVMClass[] declaredInterfaces,RVMField[] declaredFields,RVMMethod[] declaredMethods,TypeReference[] declaredClasses,TypeReference declaringClass,TypeReference enclosingClass,MethodReference enclosingMethod,Atom sourceName,RVMMethod classInitializerMethod,Atom signature,RVMAnnotation[] annotations){  super(typeRef,0,annotations);  if (VM.VerifyAssertions)   VM._assert(!getTypeRef().isUnboxedType());  if (VM.VerifyAssertions && null != superClass)   VM._assert(!superClass.getTypeRef().isUnboxedType());  this.constantPool=constantPool;  this.modifiers=modifiers;  this.originalModifiers=originalModifiers;  this.superClass=superClass;  this.declaredInterfaces=declaredInterfaces;  this.declaredFields=declaredFields;  this.declaredMethods=declaredMethods;  this.declaredClasses=declaredClasses;  this.declaringClass=declaringClass;  this.enclosingClass=enclosingClass;  this.enclosingMethod=enclosingMethod;  this.sourceName=sourceName;  this.classInitializerMethod=classInitializerMethod;  this.signature=signature;  this.subClasses=emptyVMClass;  state=CLASS_LOADED;  Magic.sync();  if (superClass != null) {    superClass.addSubClass(this);  }  this.desiredAssertionStatus=RVMClassLoader.getDesiredAssertionStatus(this);  Callbacks.notifyClassLoaded(this);  if (VM.TraceClassLoading && VM.runningVM) {    VM.sysWriteln("RVMClass: (end)   load file " + typeRef.getName());  }  if (VM.verboseClassLoading)   VM.sysWrite("[Loaded " + toString() + "]\n");}  }
class C{  public void clearListeners(){  listeners.clear();  mainThreadListeners.clear();}  }
class C{  @Override public void handleComment(String s){}  }
class C{  public void testAddAllSelf(){  try {    LinkedBlockingDeque q=populatedDeque(SIZE);    q.addAll(q);    shouldThrow();  } catch (  IllegalArgumentException success) {  }}  }
class C{  public void done(){  if (distinct) {    if (distinctRows != null) {      rows=distinctRows.values();    } else {      if (external != null && sort != null) {        ResultExternal temp=external;        external=null;        temp.reset();        rows=New.arrayList();        while (true) {          Value[] list=temp.next();          if (list == null) {            break;          }          if (external == null) {          }          rows.add(list);          if (rows.size() > maxMemoryRows) {            rowCount=external.addRows(rows);            rows.clear();          }        }        temp.close();      }    }  }  if (external != null) {    addRowsToDisk();    external.done();  } else {    if (sort != null) {      if (offset > 0 || limit > 0) {        sort.sort(rows,offset,limit < 0 ? rows.size() : limit);      } else {        sort.sort(rows);      }    }  }  applyOffset();  applyLimit();  reset();}  }
class C{  public int compare(Value a,Value b){  return a.compareTo(b,compareMode);}  }
class C{  public static byte[] copyOf(byte[] arr,int offset,int newLength){  return copyOf(arr,offset,newLength,0);}  }
class C{  @TargetApi(Build.VERSION_CODES.LOLLIPOP) public static Pair<View,String>[] createSafeTransitionParticipants(@NonNull Activity activity,boolean includeStatusBar,@Nullable Pair... otherParticipants){  View decor=activity.getWindow().getDecorView();  View statusBar=null;  if (includeStatusBar) {    statusBar=decor.findViewById(android.R.id.statusBarBackground);  }  View navBar=decor.findViewById(android.R.id.navigationBarBackground);  List<Pair> participants=new ArrayList<>(3);  addNonNullViewToTransitionParticipants(statusBar,participants);  addNonNullViewToTransitionParticipants(navBar,participants);  if (otherParticipants != null && !(otherParticipants.length == 1 && otherParticipants[0] == null)) {    participants.addAll(Arrays.asList(otherParticipants));  }  return participants.toArray(new Pair[participants.size()]);}  }
class C{  public FileList createSignaturesFileList(){  return addSignaturesResource(new FileList());}  }
class C{  public static VersionNumber fromString(String str){  if (str == null) {    return null;  }  String[] pieces=str.split("\\.");  if (pieces.length != 4) {    return null;  }  VersionNumber version=new VersionNumber();  try {    for (int i=0; i < 4; ++i) {      version.mVersion[i]=Integer.parseInt(pieces[i]);    }  } catch (  NumberFormatException e) {    return null;  }  return version;}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SECURITY_ADMIN,Role.RESTRICTED_SECURITY_ADMIN},blockProxies=true) @Path("/remove") public Response remove(SiteIdListParam idList){  List<String> siteIdList=idList.getIds();  String siteIdStr=StringUtils.join(siteIdList,",");  log.info("Begin to remove standby site from local vdc by uuid: {}",siteIdStr);  List<Site> toBeRemovedSites=new ArrayList<>();  for (  String siteId : siteIdList) {    Site site;    try {      site=drUtil.getSiteFromLocalVdc(siteId);    } catch (    Exception ex) {      log.error("Can't load site {} from ZK",siteId);      throw APIException.badRequests.siteIdNotFound();    }    if (site.getState().equals(SiteState.ACTIVE)) {      log.error("Unable to remove this site {}. It is active",siteId);      throw APIException.badRequests.operationNotAllowedOnActiveSite();    }    if (site.getState().isDROperationOngoing() && !site.getState().equals(SiteState.STANDBY_SYNCING)) {      log.error("Unable to remove this site {} in state {}. " + "DR operation other than STANDBY_SYNCING is ongoing",siteId,site.getState().name());      throw APIException.internalServerErrors.concurrentDROperationNotAllowed(site.getName(),site.getState().toString());    }    toBeRemovedSites.add(site);  }  StringBuilder siteNamesSb=new StringBuilder();  for (  Site site : toBeRemovedSites) {    if (siteNamesSb.length() != 0) {      siteNamesSb.append(", ");    }    siteNamesSb.append(site.getName());  }  String SiteNamesStr=siteNamesSb.toString();  try {    commonPrecheck(siteIdList);  } catch (  APIException e) {    throw e;  }catch (  Exception e) {    throw APIException.internalServerErrors.removeStandbyPrecheckFailed(SiteNamesStr,e.getMessage());  }  InterProcessLock lock=drUtil.getDROperationLock(false);  List<String> sitesString=new ArrayList<>();  try {    log.info("Removing sites");    coordinator.startTransaction();    for (    Site site : toBeRemovedSites) {      site.setState(SiteState.STANDBY_REMOVING);      coordinator.persistServiceConfiguration(site.toConfiguration());      drUtil.recordDrOperationStatus(site.getUuid(),InterState.REMOVING_STANDBY);      sitesString.add(site.toBriefString());    }    log.info("Notify all sites for reconfig");    long vdcTargetVersion=DrUtil.newVdcConfigVersion();    for (    Site standbySite : drUtil.listSites()) {      drUtil.updateVdcTargetVersion(standbySite.getUuid(),SiteInfo.DR_OP_REMOVE_STANDBY,vdcTargetVersion);    }    coordinator.commitTransaction();    auditDisasterRecoveryOps(OperationTypeEnum.REMOVE_STANDBY,AuditLogManager.AUDITLOG_SUCCESS,AuditLogManager.AUDITOP_BEGIN,StringUtils.join(sitesString,','));    return Response.status(Response.Status.ACCEPTED).build();  } catch (  Exception e) {    log.error("Failed to remove site {}",siteIdStr,e);    coordinator.discardTransaction();    auditDisasterRecoveryOps(OperationTypeEnum.REMOVE_STANDBY,AuditLogManager.AUDITLOG_FAILURE,null,StringUtils.join(sitesString,','));    throw APIException.internalServerErrors.removeStandbyFailed(SiteNamesStr,e.getMessage());  } finally {    try {      lock.release();    } catch (    Exception ignore) {      log.error(String.format("Lock release failed when removing standby sites: %s",siteIdStr));    }  }}  }
class C{  public List<Pair<Map<String,String>,List<ClusterNode>>> findFromAllShards(OptionalLimit n){  final List<Pair<Map<String,String>,List<ClusterNode>>> result=Lists.newArrayList();  final Multimap<Map<String,String>,ClusterNode> shards=buildShards(entries);  final Set<Entry<Map<String,String>,Collection<ClusterNode>>> entries=shards.asMap().entrySet();  for (  final Entry<Map<String,String>,Collection<ClusterNode>> e : entries) {    result.add(Pair.of(e.getKey(),pickN(e.getValue(),n)));  }  return result;}  }
class C{  protected boolean isQuiet(){  return false;}  }
class C{  public DefaultRequest serverResponseTime(Integer value){  setInteger(SERVER_RESPONSE_TIME,value);  return this;}  }
class C{  public static TileEntity loadTileEntityHook(NBTTagCompound data,Class<? extends TileEntity> clazz) throws Exception {  if (clazz.equals(FWTile.class)) {    return FWTileLoader.loadTile(data);  } else {    return clazz.newInstance();  }}  }
class C{  public void testMethods() throws Exception {  IgfsPath path=new IgfsPath("/a/s/d/f");  validateParent("/a/s/d/f","/a/s/d");  validateParent("/a/s/d","/a/s");  validateParent("/a/s","/a");  validateParent("/a","/");  validateParent("/",null);  assertEquals(new IgfsPath("/a/s/d/f-2"),path.suffix("-2"));  assertEquals(Arrays.asList("a","s","d","f"),path.components());  assertEquals(4,path.depth());  assertEquals(3,path.parent().depth());  assertEquals("f",path.name());  assertEquals(path,mu(path));  IgfsPath parent=path.parent();  assertTrue(path.compareTo(new IgfsPath(parent,"e")) > 0);  assertTrue(path.compareTo(new IgfsPath(parent,"g")) < 0);}  }
class C{  private void processReader(Script s,BufferedReader reader,PrintWriter pw) throws IOException {  String line;  String lineCountName="count";  s.setProperty(lineCountName,BigInteger.ZERO);  String autoSplitName="split";  s.setProperty("out",pw);  try {    InvokerHelper.invokeMethod(s,"begin",null);  } catch (  MissingMethodException mme) {  }  while ((line=reader.readLine()) != null) {    s.setProperty("line",line);    s.setProperty(lineCountName,((BigInteger)s.getProperty(lineCountName)).add(BigInteger.ONE));    if (autoSplit) {      s.setProperty(autoSplitName,line.split(splitPattern));    }    Object o=s.run();    if (autoOutput && o != null) {      pw.println(o);    }  }  try {    InvokerHelper.invokeMethod(s,"end",null);  } catch (  MissingMethodException mme) {  }}  }
class C{  public void write(OutputNode node,Object source,Class expect,String name) throws Exception {  OutputNode child=node.getChild(name);  Type type=getType(expect);  if (source != null) {    Class actual=source.getClass();    Decorator decorator=getDecorator(actual);    if (decorator != null) {      decorator.decorate(child);    }    if (!context.setOverride(type,source,child)) {      getComposite(actual).write(child,source);    }  }  child.commit();}  }
class C{  public void initForServer(){  if (typeFactory == null) {    throw new IllegalStateException("type factory instance does not exist yet. This is not expected for the server!");  }  LOG.debug("Initializing server's HitroUI framework");  resolverFactory.createResolvers(typeFactory);}  }
class C{  public static boolean putString(Context context,String key,String value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putString(key,value);  return editor.commit();}  }
class C{  public RoutingAllocation.Result reroute(ClusterState clusterState,boolean debug){  return new RoutingAllocation.Result(false,clusterState.routingTable());}  }
class C{  public static MemFileChannel newChannel(InputStream in) throws IOException {  return newChannel(in,DatabaseImpl.RW_CHANNEL_MODE);}  }
class C{  public void addColumn(Column column){  data.columns.add(column);}  }
class C{  public static void sort(long[] array,int start,int end){  if (array == null) {    throw new NullPointerException();  }  checkBounds(array.length,start,end);  sort(start,end,array);}  }
class C{  public Corpse(final RPEntity victim,final String killerName){  setRPClass("corpse");  put("type","corpse");  if (victim.has("class")) {    setEntityClass(victim.get("class"));  } else {    setEntityClass(victim.get("type"));  }  put(ATTR_IMAGE,victim.getCorpseName());  put(ATTR_HARMLESS_IMAGE,victim.getHarmlessCorpseName());  setSize(victim.getCorpseWidth(),victim.getCorpseHeight());  if ("creature".equals(victim.getRPClass().getName())) {    creatureName=victim.getName();  }  if ((killerName != null)) {    put(ATTR_NAME,victim.getTitle());    put(ATTR_KILLER,killerName);  } else   if (has(ATTR_KILLER)) {    logger.error("Corpse: (" + victim + ") with null killer");    remove(ATTR_KILLER);  }  final Rectangle2D rect=victim.getArea();  setPosition((int)(rect.getX() + ((rect.getWidth() - getWidth()) / 2.0)),(int)(rect.getY() + ((rect.getHeight() - getHeight()) / 2.0)));  SingletonRepository.getTurnNotifier().notifyInSeconds(getDegradationStepTimeout(),this.corpseDegradator);  if (victim.getCorpseDeserver() != null) {    setCorpseOwner(victim.getCorpseDeserver());    SingletonRepository.getTurnNotifier().notifyInSeconds(PROTECTION_TIME,this.itemForRewardsReleaser);  }  stage=0;  put("stage",stage);  setResistance(calculateResistance());  final RPSlot slot=new LootableSlot(this);  addSlot(slot);}  }
class C{  private void destroyModel(){  getSessionNode().destroyModel();  getSessionNode().forgetOldModel();}  }
class C{  public ParserConfig addNonFatalError(RioSetting<?> nextNonFatalError){  this.nonFatalErrors.add(nextNonFatalError);  return this;}  }
class C{  protected void startConnected(){}  }
class C{  private boolean partialMasksContainSameSG(Set<URI> partialMasks,Map<ExportMask,ExportMaskPolicy> masks,ExportMask mask){  String sgName=null;  for (  Map.Entry<ExportMask,ExportMaskPolicy> entry : masks.entrySet()) {    ExportMaskPolicy policy=entry.getValue();    sgName=policy.sgName;  }  for (  URI partialMaskURI : partialMasks) {    for (    Map.Entry<ExportMask,ExportMaskPolicy> entry : masks.entrySet()) {      ExportMask myMask=entry.getKey();      if (myMask.getId().equals(partialMaskURI)) {        ExportMaskPolicy policy=entry.getValue();        if (sgName == null || !sgName.equalsIgnoreCase(policy.sgName)) {          return false;        }      }    }  }  return true;}  }
class C{  public HadoopMapReduceCounters(org.apache.ignite.internal.processors.hadoop.counter.HadoopCounters cntrs){  for (  HadoopCounter cntr : cntrs.all())   if (cntr instanceof HadoopLongCounter)   this.cntrs.put(new T2<>(cntr.group(),cntr.name()),(HadoopLongCounter)cntr);}  }
class C{  public LibraryLocation(IPath libraryPath,IPath sourcePath,IPath packageRoot,URL javadocLocation){  this(libraryPath,sourcePath,packageRoot,javadocLocation,null);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:11.005 -0500",hash_original_method="5EC3F5E4185B2190F76F36B4BDD7355A",hash_generated_method="9BE93B36307DB8A68E3698A36E3288BF") public static String toolTypeToString(int toolType){  String symbolicName=TOOL_TYPE_SYMBOLIC_NAMES.get(toolType);  return symbolicName != null ? symbolicName : Integer.toString(toolType);}  }
class C{  public void java_lang_System_getCallerClass(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  helper.assignObjectTo(returnVar,Environment.v().getClassObject());}  }
class C{  public static boolean checkSaveLocationExists(){  String sDCardStatus=Environment.getExternalStorageState();  boolean status;  if (sDCardStatus.equals(Environment.MEDIA_MOUNTED)) {    status=true;  } else   status=false;  return status;}  }
class C{  @Override public void findAll(String sql,Result<Iterable<Cursor>> result,Object... args){  _kraken.query(sql).findAll(result,args);}  }
class C{  private Object readResolve() throws ObjectStreamException {  if (this.equals(CategoryLabelWidthType.CATEGORY)) {    return CategoryLabelWidthType.CATEGORY;  } else   if (this.equals(CategoryLabelWidthType.RANGE)) {    return CategoryLabelWidthType.RANGE;  }  return null;}  }
class C{  public void initialize(Body bA,Body bB,Vec2 anchor){  bodyA=bA;  bodyB=bB;  bodyA.getLocalPointToOut(anchor,localAnchorA);  bodyB.getLocalPointToOut(anchor,localAnchorB);  referenceAngle=bodyB.getAngle() - bodyA.getAngle();}  }
class C{  public static Description createTestDescription(String className,String name,Serializable uniqueId){  return new Description(null,formatDisplayName(name,className),uniqueId);}  }
class C{  public static void logPreferenceState(){  RecordHistogram.recordEnumeratedHistogram("Search.ContextualSearchPreferenceState",getPreferenceValue(),PREFERENCE_HISTOGRAM_BOUNDARY);}  }
class C{  @Override public void replaceMissingValues(double[] array){}  }
class C{  public FitZoom(AbstractChart chart){  super(chart);}  }
class C{  public static EditVariableDialog CreateEditVariableDialog(final JFrame parent,final String existingVariableName){  return new EditVariableDialog(parent,"Edit variable name",existingVariableName);}  }
class C{  @Deprecated public static void removeInvalidTransitRoutes(TransitScheduleValidator.ValidationResult result,TransitSchedule schedule){  Set<Tuple<Id<TransitLine>,Id<TransitRoute>>> toRemove=new HashSet<>();  for (  String error : result.getErrors()) {    String[] lineSplit=error.split(", route ");    String tranistLineId=lineSplit[0].substring(13);    String transitRouteId;    if (lineSplit[1].contains(" contains a link that is not part of the network")) {      transitRouteId=lineSplit[1].split(" contains a link that is not part of the network")[0];    } else     if (lineSplit[1].contains(" has inconsistent network route")) {      transitRouteId=lineSplit[1].split(" has inconsistent network route")[0];    } else     if (lineSplit[1].contains(" has no network route")) {      transitRouteId=lineSplit[1].split(" has no network route")[0];    } else     if (lineSplit[1].contains(" contains a link that is not part of the network: ")) {      transitRouteId=lineSplit[1].split(" contains a link that is not part of the network: ")[0];    } else     if (lineSplit[1].contains(": Stop ")) {      transitRouteId=lineSplit[1].split(": Stop ")[0];    } else     if (lineSplit[1].contains(" has no linkId, but is used by transit line ")) {      transitRouteId=lineSplit[1].split(" has no linkId, but is used by transit line ")[0];    } else     if (lineSplit[1].contains(" contains a stop ")) {      transitRouteId=lineSplit[1].split(" contains a stop ")[0];    } else     if (lineSplit[1].contains(": The ")) {      transitRouteId=lineSplit[1].split(": The ")[0];    } else {      throw new IllegalArgumentException("Error String from ValidationResult not recognised! (" + error + ")");    }    toRemove.add(new Tuple<>(Id.create(tranistLineId,TransitLine.class),Id.create(transitRouteId,TransitRoute.class)));  }  for (  Tuple<Id<TransitLine>,Id<TransitRoute>> t : toRemove) {    ScheduleCleaner.removeRoute(schedule,t.getFirst(),t.getSecond());  }}  }
class C{  @SafeVarargs public static <Type>Validator<Type> conjunctive(@NonNull final Context context,@StringRes final int resourceId,@NonNull final Validator<Type>... validators){  return ConjunctiveValidator.create(context,resourceId,validators);}  }
class C{  public void insertBack(Blorp x){  size+=1;  Node p=sentinel;  while (p.next != null) {    p=p.next;  }  p.next=new Node(x,null);}  }
class C{  public void readGraphics(ObjectInputStream objstream) throws IOException {  Debug.message("omgraphics","OMGeometryList: Reading cached geometries");  try {    while (true) {      try {        OMGeometry omg=(OMGeometry)objstream.readObject();        this.add(omg);      } catch (      ClassNotFoundException e) {        e.printStackTrace();      }catch (      OptionalDataException ode) {        ode.printStackTrace();      }    }  } catch (  EOFException e) {  }}  }
class C{  private pairLinkLink cutLink(Link toCut,MutableCoord p){  Node endPoint=getRandomNode(p);  net.addNode(endPoint);  pairLinkLink pair=fixLink(toCut,endPoint);  diffManager.saveState(null,DifferenceManager.type.CREATE,endPoint,null,pair.link1,pair.link2,null,null,activeLink,null);  controls.updateButtons();  controls.updateTable();  return pair;}  }
class C{  public void accept(MemberValueVisitor visitor){  visitor.visitShortMemberValue(this);}  }
class C{  private void updateDatabase(String targetClass,TestsOnDisk ondisk,Project db,ProjectStaticData current){  String testName=targetClass + Properties.JUNIT_SUFFIX;  CUT cut=ProjectUtil.getCUT(db,targetClass);  if (cut == null) {    cut=new CUT();    cut.setFullNameOfTargetClass(targetClass);    cut.setFullNameOfTestSuite(testName);    db.getCut().add(cut);  }  Generation generation=new Generation();  generation.setId(BigInteger.valueOf(cut.getGeneration().size()));  generation.setFailed(false);  generation.setModified(current.getClassInfo(targetClass).hasChanged());  generation.setTimeBudgetInSeconds(BigInteger.valueOf(current.getClassInfo(targetClass).getTimeBudgetInSeconds()));  generation.setMemoryInMB(BigInteger.valueOf(current.getClassInfo(targetClass).getMemoryInMB()));  if (!current.getClassInfo(targetClass).isToTest()) {    cut.getGeneration().add(generation);    return;  }  File std_err_CLIENT=new File(this.tmpLogs + File.separator + targetClass+ File.separator+ "std_err_CLIENT.log");  assert std_err_CLIENT.exists();  File std_out_CLIENT=new File(this.tmpLogs + File.separator + targetClass+ File.separator+ "std_out_CLIENT.log");  assert std_out_CLIENT.exists();  File std_err_MASTER=new File(this.tmpLogs + File.separator + targetClass+ File.separator+ "std_err_MASTER.log");  assert std_err_MASTER.exists();  File std_out_MASTER=new File(this.tmpLogs + File.separator + targetClass+ File.separator+ "std_out_MASTER.log");  assert std_out_MASTER.exists();  generation.setStdErrCLIENT(std_err_CLIENT.getAbsolutePath());  generation.setStdOutCLIENT(std_out_CLIENT.getAbsolutePath());  generation.setStdErrMASTER(std_err_MASTER.getAbsolutePath());  generation.setStdOutMASTER(std_out_MASTER.getAbsolutePath());  cut.getGeneration().add(generation);  if (ondisk == null) {    if (current.getClassInfo(targetClass).isToTest()) {      generation.setFailed(true);    }    return;  }  assert ondisk.isValid();  CsvJUnitData csv=ondisk.csvData;  if (!isBetterThanAnyExistingTestSuite(db,current,ondisk)) {    return;  }  TestSuite suite=new TestSuite();  suite.setFullPathOfTestSuite(ondisk.testSuite.getAbsolutePath());  suite.setNumberOfTests(BigInteger.valueOf(csv.getNumberOfTests()));  suite.setTotalNumberOfStatements(BigInteger.valueOf(csv.getTotalNumberOfStatements()));  suite.setTotalEffortInSeconds(BigInteger.valueOf(csv.getDurationInSeconds()));  List<Coverage> coverageValues=new ArrayList<Coverage>();  for (  String criterion : csv.getCoverageVariables()) {    Coverage coverage=new Coverage();    coverage.setCriterion(criterion);    coverage.setCoverageValue(Double.parseDouble(this.df.format(csv.getCoverage(criterion))));    coverage.setCoverageBitString(csv.getCoverageBitString(criterion));    coverageValues.add(coverage);  }  suite.getCoverage().addAll(coverageValues);  generation.setSuite(suite);  removeBestTestSuite(testName);  addBestTestSuite(ondisk.testSuite);  File scaffolding=getScaffoldingIfExists(ondisk.testSuite);  if (scaffolding != null) {    addBestTestSuite(scaffolding);  }  if (ondisk.serializedSuite != null) {    File target=new File(getSeedInFolder(),ondisk.serializedSuite.getName());    target.delete();    try {      FileUtils.copyFile(ondisk.serializedSuite,target);    } catch (    IOException e) {      logger.error("Failed to copy over a new generated serialized test suite: " + e.getMessage(),e);    }  }}  }
class C{  private Set<String> arrayToSet(Object[] arr){  HashSet<String> r=new HashSet<>();  if (null == arr)   return r;  for (  Object o : arr) {    if (null != o)     r.add(o.toString());  }  return r;}  }
class C{  protected void forwardReply(AbstractMRListener client,AbstractMRReply m){  ((AcelaListener)client).reply((AcelaReply)m);}  }
class C{  public void put(Object key,Object value){  if (cacheSize <= memoryCache.size()) {    Enumeration e=memoryCache.keys();    long oldest=System.currentTimeMillis();    Object oldestKey=null;    Object[] oldestValue=null;    while (e.hasMoreElements()) {      Object currentKey=e.nextElement();      Object[] currentValue=(Object[])memoryCache.get(currentKey);      long currentAge=((Long)currentValue[0]).longValue();      if (currentAge <= oldest || oldestValue == null) {        oldest=currentAge;        oldestKey=currentKey;        oldestValue=currentValue;      }    }    placeInStorageCache(oldestKey,oldest,oldestValue[1]);    weakCache.put(oldestKey,Display.getInstance().createSoftWeakRef(oldestValue[1]));    memoryCache.remove(oldestKey);  }  long lastAccess=System.currentTimeMillis();  memoryCache.put(key,new Object[]{new Long(lastAccess),value});  if (alwaysStore) {    placeInStorageCache(key,lastAccess,value);  }}  }
class C{  private String validateLinkDetails(String regLinkDetails) throws PSPCommunicationException {  StringTokenizer st=new StringTokenizer(regLinkDetails,"&");  List<NameValuePair> result=new ArrayList<NameValuePair>();  while (st.hasMoreElements()) {    String[] split=st.nextToken().split("=");    String keyString=split[0];    String valueString="";    if (split.length > 1) {      try {        valueString=URLDecoder.decode(split[1],"UTF-8");        valueString=valueString.replaceAll("\r\n","");      } catch (      UnsupportedEncodingException e) {        SaaSSystemException sse=new SaaSSystemException("The link details for the PSP communication could not be validated",e);        logger.logError(Log4jLogger.SYSTEM_LOG,sse,LogMessageIdentifier.ERROR_NOT_SUPPORTED_ENCODING_UTF8);        throw sse;      }    }    result.add(new NameValuePair(keyString,valueString));  }  for (  NameValuePair nvp : result) {    String keyString=nvp.getName();    if (keyString.contains("VALIDATION")) {      if (!nvp.getValue().equals("ACK")) {        PSPCommunicationException pce=new PSPCommunicationException("Accessing the PSP site failed, cannot proceed; " + keyString + "="+ nvp.getValue(),Reason.MISSING_RESPONSE_URL);        logger.logWarn(Log4jLogger.SYSTEM_LOG,LogMessageIdentifier.WARN_RETRIEVE_REDIRECT_URL_INVALID);        throw pce;      }    }  }  String responseURL=getRedirectURL(result);  if (responseURL == null) {    PSPCommunicationException pce=new PSPCommunicationException("PSP response '" + regLinkDetails + "' did not contain valid response URL",Reason.MISSING_RESPONSE_URL);    logger.logWarn(Log4jLogger.SYSTEM_LOG,pce,LogMessageIdentifier.WARN_DETERMINE_PSP_LINK_FAILED,regLinkDetails);    throw pce;  }  return responseURL;}  }
class C{  public void clearWhere(){  super.removeElement(Where.KEY);}  }
class C{  @DSComment("not sensitive, memory stream") @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:51.970 -0500",hash_original_method="A3DCAA229974F9979554B7E0F1F4EF9F",hash_generated_method="BD6D76D575FBB2C104F30D78DCB06376") public char[] toCharArray(){synchronized (lock) {    char[] result=new char[count];    System.arraycopy(buf,0,result,0,count);    return result;  }}  }
class C{  protected BindingElementImpl(){  super();}  }
class C{  public void unsetEndTime(){  issetBitfield=EncodingUtils.clearBit(issetBitfield,ENDTIME_ISSET_ID);}  }
class C{  public boolean isConfidential(){  return is(CONFIDENTIAL);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void resetNotes(){  if (errorInStatus1) {    if (editMode) {      statusText1.setText(editStatus1);    } else {      statusText1.setText(stdStatus1);    }    errorInStatus1=false;  }  resetNotes2();}  }
class C{  public Interview(){  super();  setEntity(new Entity(TYPE_ID));  getEntity().initDefaultValues(getTypeFactory());}  }
class C{  private MemoryExampleTable performLeftJoin(ExampleSet leftExampleSet,ExampleSet rightExampleSet,List<AttributeSource> originalAttributeSources,List<Attribute> unionAttributeList,Pair<Attribute[],Attribute[]> keyAttributes,Set<DoubleArrayWrapper> matchedExamplesInRightTable) throws ProcessStoppedException {  MemoryExampleTable unionTable=new MemoryExampleTable(unionAttributeList);  Attribute[] leftKeyAttributes=null;  Attribute[] rightKeyAttributes=null;  Map<DoubleArrayWrapper,List<Example>> rightKeyMapping=null;  boolean useId=getParameterAsBoolean(PARAMETER_USE_ID);  leftKeyAttributes=keyAttributes.getFirst();  rightKeyAttributes=keyAttributes.getSecond();  if (!useId) {    rightKeyMapping=createKeyMapping(rightExampleSet,rightKeyAttributes,leftKeyAttributes);  }  int progressCounter=0;  for (  Example leftExample : leftExampleSet) {    List<Example> matchingRightExamples=getMatchingExamples(leftExampleSet,rightExampleSet,leftKeyAttributes,rightKeyMapping,useId,leftExample);    if (matchingRightExamples != null) {      for (      Example rightExample : matchingRightExamples) {        addCombinedOccurence(originalAttributeSources,unionAttributeList,unionTable,leftExample,rightExample);        if (matchedExamplesInRightTable != null) {          matchedExamplesInRightTable.add(new DoubleArrayWrapper(getKeyValues(rightExample,rightKeyAttributes)));        }      }    } else {      addLeftOnlyOccurence(originalAttributeSources,unionAttributeList,unionTable,leftExample);    }    ++progressCounter;    if (progressCounter % 100 == 0) {      getProgress().step(100);      progressCounter=0;    }  }  return unionTable;}  }
class C{  public DoubleMatrix2D permuteColumns(DoubleMatrix2D A,int[] indexes,int[] work){  return permuteRows(A.viewDice(),indexes,work);}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  System.out.print("Enter a integer: ");  long number=input.nextLong();  System.out.println("The sum of the digits in " + number + " is "+ sumDigits(number));}  }
class C{  public void dispose(){  getNodeTable().removeTableListener(m_listener);  getEdgeTable().removeTableListener(m_listener);}  }
class C{  public boolean equalTo(Highlight h){  if (h == null)   return false; else {    if (this.mDataSetIndex == h.mDataSetIndex && this.mXIndex == h.mXIndex && this.mStackIndex == h.mStackIndex)     return true; else     return false;  }}  }
class C{  public VcfInfoIntegerAnnotator(AbstractDerivedAnnotation annotation){  assert annotation != null && annotation.getType().getClassType() == Integer.class;  mAnnotation=annotation;}  }
class C{  @RequestMapping(value="/{id}",method=RequestMethod.DELETE) @ResponseBody public RestWrapper delete(@PathVariable("id") Integer busDomainId,Principal principal){  RestWrapper restWrapper=null;  try {    busDomainDAO.delete(busDomainId);    restWrapper=new RestWrapper(null,RestWrapper.OK);    LOGGER.info(RECORDWITHID + busDomainId + " deleted from BusDomain by User:"+ principal.getName());  } catch (  MetadataException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  public PolygonizeDirectedEdge(Node from,Node to,Coordinate directionPt,boolean edgeDirection){  super(from,to,directionPt,edgeDirection);}  }
class C{  private static Class<?> loadProxyClass(ClassLoader loader,Class<?>[] interfaces) throws ClassNotFoundException {  try {    return Proxy.getProxyClass(loader,interfaces);  } catch (  IllegalArgumentException e) {    throw new ClassNotFoundException("error creating dynamic proxy class",e);  }}  }
class C{  public TableInfo(String tableName,RowInfo rowInfo){  this.tableName=tableName;  this.rowInfo=rowInfo;}  }
class C{  protected boolean syncEnclosed(){  try {    OffsetGrabPoint gb0=(OffsetGrabPoint)polyGrabPoints.get(0);    OffsetGrabPoint ogb=(OffsetGrabPoint)polyGrabPoints.get(polyGrabPoints.size() - 1);    if (gb0.getX() == ogb.getX() && gb0.getY() == ogb.getY()) {      gb0.addGrabPoint(ogb);      ogb.addGrabPoint(gb0);      return true;    }  } catch (  ClassCastException cce) {  }catch (  IndexOutOfBoundsException ioobe) {  }  return false;}  }
class C{  void addEntry(int hash,int key,VALUE value,int bucketIndex){  table[bucketIndex]=new IntEntry<>(hash,key,value,table[bucketIndex]);  if (size++ >= threshold)   resize(2 * table.length);}  }
class C{  public boolean upgradeOnlyAncientSegments(){  return upgradeOnlyAncientSegments;}  }
class C{  private void assertByteStringLength(int len) throws DecodingException {  if (len < -1) {    throw new DecodingException(StatusCodes.Bad_DecodingError,"Unexpected byte string length " + len);  }  int maxLen=ctx.getMaxByteStringLength();  if (maxLen > 0 && len > maxLen) {    throw new DecodingException(StatusCodes.Bad_EncodingLimitsExceeded,"MaxByteStringLength " + maxLen + " < "+ len);  }  if (len > remaining()) {    throw new DecodingException(StatusCodes.Bad_EndOfStream,"Buffer underflow");  }}  }
class C{  synchronized void add(StateMachine sm,Message msg,String messageInfo,IState state,IState orgState,IState transToState){  mCount+=1;  if (mLogRecVector.size() < mMaxSize) {    mLogRecVector.add(new LogRec(sm,msg,messageInfo,state,orgState,transToState));  } else {    LogRec pmi=mLogRecVector.get(mOldestIndex);    mOldestIndex+=1;    if (mOldestIndex >= mMaxSize) {      mOldestIndex=0;    }    pmi.update(sm,msg,messageInfo,state,orgState,transToState);  }}  }
class C{  public byte[] toBinary3Sves(){  return ArrayEncoder.encodeMod3Sves(coeffs);}  }
class C{  public SshWorker(int actorMaxOperationTimeoutSec,SshMeta sshMeta,String targetHost){  super();  this.actorMaxOperationTimeoutSec=actorMaxOperationTimeoutSec;  this.sshMeta=sshMeta;  this.targetHost=targetHost;}  }
class C{  @Singleton public static synchronized void loadLicenseMaps(String firstOption) throws InvalidConfigException {  if (licenses == null || licenseTexts == null) {    licenses=new TreeMap<String,String>();    licenses.put("",(firstOption == null) ? "-" : firstOption);    licenseTexts=new TreeMap<String,String>();    Properties properties=licenseProperties();    for (    Map.Entry<Object,Object> entry : properties.entrySet()) {      String key=StringUtils.trim((String)entry.getKey());      String value=StringUtils.trim((String)entry.getValue());      if (key != null && key.startsWith(LICENSE_NAME_PROPERTY_PREFIX) && value != null) {        String keyMinusPrefix=StringUtils.trimToNull(key.replace(LICENSE_NAME_PROPERTY_PREFIX,""));        if (keyMinusPrefix != null) {          String licenseText=StringUtils.trimToNull((properties.getProperty(LICENSE_TEXT_PROPERTY_PREFIX + keyMinusPrefix)));          if (licenseText != null) {            licenses.put(keyMinusPrefix,value);            licenseTexts.put(keyMinusPrefix,licenseText);          }        } else {          String error=LICENSES_PROPFILE_PATH + " has been been configured wrong.";          LOG.error(error);          throw new InvalidConfigException(InvalidConfigException.TYPE.INVALID_PROPERTIES_FILE,error);        }      }    }    if ((licenses.size() - 1) == 0) {      String error="No licenses could be loaded from " + LICENSES_PROPFILE_PATH + ". Please check configuration.";      LOG.error(error);      throw new InvalidConfigException(InvalidConfigException.TYPE.INVALID_PROPERTIES_FILE,error);    }  }}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  @Override public boolean validSubTokenKey(String subtok){  return super.validToken(subtok) && filterBy.containsKey(subtok);}  }
class C{  public boolean shouldEnd(){  return (zombies.size() == 0 || humans.size() == 0) && isGameRunning();}  }
class C{  public void addTransit(TransitLayer transitLayer,PathWithTimes currentTransitPath,int pathIndex,ZonedDateTime fromTimeDateZD,List<TransitJourneyID> transitJourneyIDs){  if (transit == null || pathIndex >= transit.size()) {    stats=new Stats();    stats.max=currentTransitPath.max;    stats.min=currentTransitPath.min;    stats.avg=currentTransitPath.avg;    stats.num=currentTransitPath.length;    addTransit(new TransitSegment(transitLayer,currentTransitPath,pathIndex,fromTimeDateZD,transitJourneyIDs));    LOG.debug("Making new transit segment:{}",currentTransitPath);  } else {    TransitSegment transitSegment=transit.get(pathIndex);    if (transitSegment.hasSameStops(currentTransitPath,pathIndex)) {      transitSegment.addSegmentPattern(transitLayer,currentTransitPath,pathIndex,fromTimeDateZD,transitJourneyIDs);      LOG.debug("Adding segment pattern to existing transit");    } else {      LOG.warn("Incorrect stop in pathIndex:{}",pathIndex);    }  }}  }
class C{  public boolean isOvergrowthAffected(){  return true;}  }
class C{  default B unbreakable(final boolean unbreakable){  this.meta().setUnbreakable(unbreakable);  return this.getBuilder();}  }
class C{  protected PrimitiveValueExpressionImpl(){  super();}  }
class C{  protected OrderPositionKey(){  super();}  }
class C{  private boolean updateCameraParametersPreference(){  setAutoExposureLockIfSupported();  setAutoWhiteBalanceLockIfSupported();  setFocusAreasIfSupported();  setMeteringAreasIfSupported();  if ((mManual3AEnabled & MANUAL_FOCUS) == 0) {    mFocusManager.overrideFocusMode(null);    mParameters.setFocusMode(mFocusManager.getFocusMode(false));  }  String pictureSize=mPreferences.getString(CameraSettings.KEY_PICTURE_SIZE,null);  if (pictureSize == null) {    CameraSettings.initialCameraPictureSize(mActivity,mParameters);  } else {    Size old_size=mParameters.getPictureSize();    Log.v(TAG,"old picture_size = " + old_size.width + " x "+ old_size.height);    List<Size> supported=mParameters.getSupportedPictureSizes();    CameraSettings.setCameraPictureSize(pictureSize,supported,mParameters);    Size size=mParameters.getPictureSize();    Log.v(TAG,"new picture_size = " + size.width + " x "+ size.height);    if (old_size != null && size != null) {      if (!size.equals(old_size) && mCameraState != PREVIEW_STOPPED) {        Log.v(TAG,"Picture Size changed. Restart Preview.");        mRestartPreview=true;      }    }  }  Size size=mParameters.getPictureSize();  List<Size> sizes=mParameters.getSupportedPreviewSizes();  Size optimalSize=CameraUtil.getOptimalPreviewSize(mActivity,sizes,(double)size.width / size.height);  String previewSizeForPhoto=mApplicationContext.getResources().getString(R.string.preview_size_for_photo);  try {    android.util.Size previewSize=android.util.Size.parseSize(previewSizeForPhoto);    for (    Size s : sizes) {      if (s.width == previewSize.getWidth() && s.height == previewSize.getHeight()) {        optimalSize.width=previewSize.getWidth();        optimalSize.height=previewSize.getHeight();      }    }    Log.v(TAG,"Preview resolution hardcoded to " + optimalSize.width + "x"+ optimalSize.height);  } catch (  NumberFormatException e) {    Log.e(TAG,"Invalid preview resolution: " + previewSizeForPhoto);  }catch (  NullPointerException e) {    Log.v(TAG,"No default preview resolution given");  }  Size original=mParameters.getPreviewSize();  if (!original.equals(optimalSize)) {    mParameters.setPreviewSize(optimalSize.width,optimalSize.height);    if (mHandler.getLooper() == Looper.myLooper()) {      setupPreview();    } else {      mCameraDevice.setParameters(mParameters);    }    mParameters=mCameraDevice.getParameters();    Log.v(TAG,"Preview Size changed. Restart Preview");    mRestartPreview=true;  }  Log.v(TAG,"Preview size is " + optimalSize.width + "x"+ optimalSize.height);  size=mParameters.getPictureSize();  List<Size> supported=mParameters.getSupportedJpegThumbnailSizes();  optimalSize=CameraUtil.getOptimalJpegThumbnailSize(supported,(double)size.width / size.height);  original=mParameters.getJpegThumbnailSize();  if (!original.equals(optimalSize)) {    mParameters.setJpegThumbnailSize(optimalSize.width,optimalSize.height);  }  Log.v(TAG,"Thumbnail size is " + optimalSize.width + "x"+ optimalSize.height);  String onValue=mActivity.getString(R.string.setting_on_value);  String hdr=mPreferences.getString(CameraSettings.KEY_CAMERA_HDR,mActivity.getString(R.string.pref_camera_hdr_default));  String hdrPlus=mPreferences.getString(CameraSettings.KEY_CAMERA_HDR_PLUS,mActivity.getString(R.string.pref_camera_hdr_plus_default));  boolean hdrOn=onValue.equals(hdr);  boolean hdrPlusOn=onValue.equals(hdrPlus);  boolean doGcamModeSwitch=false;  if (hdrPlusOn && GcamHelper.hasGcamCapture()) {    doGcamModeSwitch=true;  } else {    if (hdrOn) {      mSceneMode=CameraUtil.SCENE_MODE_HDR;      if (!(Parameters.SCENE_MODE_AUTO).equals(mParameters.getSceneMode()) && !(Parameters.SCENE_MODE_HDR).equals(mParameters.getSceneMode())) {        mParameters.setSceneMode(Parameters.SCENE_MODE_AUTO);        mCameraDevice.setParameters(mParameters);        mParameters=mCameraDevice.getParameters();      }      if (mLgeHdrMode) {        mParameters.set(CameraSettings.KEY_SNAPCAM_HDR_MODE,CameraSettings.LGE_HDR_MODE_ON);        try {          mUI.setPreference(CameraSettings.KEY_ZSL,Parameters.ZSL_ON);        } catch (        NullPointerException e) {        }      }    } else {      if (mLgeHdrMode) {        mParameters.set(CameraSettings.KEY_SNAPCAM_HDR_MODE,CameraSettings.LGE_HDR_MODE_OFF);      }      mSceneMode=mPreferences.getString(CameraSettings.KEY_SCENE_MODE,mActivity.getString(R.string.pref_camera_scenemode_default));    }  }  String refocusOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_refocus_on);  String optizoomOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_optizoom_on);  String chromaFlashOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_chromaflash_on);  if (CameraUtil.isSupported(mSceneMode,mParameters.getSupportedSceneModes())) {    if (!mParameters.getSceneMode().equals(mSceneMode)) {      mParameters.setSceneMode(mSceneMode);      mCameraDevice.setParameters(mParameters);      mParameters=mCameraDevice.getParameters();    }  } else {    if (refocusOn.equals(mSceneMode)) {      try {        mUI.setPreference(CameraSettings.KEY_ADVANCED_FEATURES,refocusOn);      } catch (      NullPointerException e) {      }    } else     if (optizoomOn.equals(mSceneMode)) {      try {        mUI.setPreference(CameraSettings.KEY_ADVANCED_FEATURES,optizoomOn);      } catch (      NullPointerException e) {      }    } else     if (chromaFlashOn.equals(mSceneMode)) {      try {        mUI.setPreference(CameraSettings.KEY_ADVANCED_FEATURES,chromaFlashOn);        mParameters.setSceneMode(Parameters.SCENE_MODE_AUTO);      } catch (      NullPointerException e) {      }    } else {      mSceneMode=mParameters.getSceneMode();      if (mSceneMode == null) {        mSceneMode=Parameters.SCENE_MODE_AUTO;      }    }  }  if (CameraUtil.isSupported(mParameters,CameraSettings.KEY_SNAPCAM_SHUTTER_SPEED)) {    String shutterSpeed=mPreferences.getString(CameraSettings.KEY_SHUTTER_SPEED,null);    if (shutterSpeed != null) {      String oldShutterSpeed=mParameters.get(CameraSettings.KEY_SNAPCAM_SHUTTER_SPEED);      if (!shutterSpeed.equals(oldShutterSpeed) && shutterSpeed.equals("0") && mCameraState != PREVIEW_STOPPED) {        Log.v(TAG,"Shutter speed disabled. Restart Preview.");        mRestartPreview=true;      }    }  }  int value=CameraSettings.readExposure(mPreferences);  int max=mParameters.getMaxExposureCompensation();  int min=mParameters.getMinExposureCompensation();  if (value >= min && value <= max) {    mParameters.setExposureCompensation(value);  } else {    Log.w(TAG,"invalid exposure range: " + value);  }  if (Parameters.SCENE_MODE_AUTO.equals(mSceneMode) || "asd".equals(mSceneMode) || "sports".equals(mSceneMode)) {    String flashMode;    if (mSavedFlashMode == null) {      flashMode=mPreferences.getString(CameraSettings.KEY_FLASH_MODE,mActivity.getString(R.string.pref_camera_flashmode_default));    } else {      flashMode=mSavedFlashMode;    }    List<String> supportedFlash=mParameters.getSupportedFlashModes();    if (CameraUtil.isSupported(flashMode,supportedFlash)) {      mParameters.setFlashMode(flashMode);    } else {      flashMode=mParameters.getFlashMode();      if (flashMode == null) {        flashMode=mActivity.getString(R.string.pref_camera_flashmode_no_flash);      }    }    if ((mManual3AEnabled & MANUAL_WB) == 0) {      String whiteBalance=mPreferences.getString(CameraSettings.KEY_WHITE_BALANCE,mActivity.getString(R.string.pref_camera_whitebalance_default));      if (CameraUtil.isSupported(whiteBalance,mParameters.getSupportedWhiteBalance())) {        mParameters.setWhiteBalance(whiteBalance);      } else {        whiteBalance=mParameters.getWhiteBalance();        if (whiteBalance == null) {          whiteBalance=Parameters.WHITE_BALANCE_AUTO;        }      }    }    if ((mManual3AEnabled & MANUAL_FOCUS) == 0) {      mFocusManager.overrideFocusMode(null);      mParameters.setFocusMode(mFocusManager.getFocusMode(false));    }    mFocusManager.setFocusTime(Integer.decode(mPreferences.getString(CameraSettings.KEY_FOCUS_TIME,mActivity.getString(R.string.pref_camera_focustime_default))));  } else {    mFocusManager.overrideFocusMode(mParameters.getFocusMode());    String flashMode=chromaFlashOn.equals(mSceneMode) ? Parameters.FLASH_MODE_ON : Parameters.FLASH_MODE_OFF;    if (CameraUtil.isSupported(flashMode,mParameters.getSupportedFlashModes())) {      mParameters.setFlashMode(flashMode);    }    if (CameraUtil.isSupported(Parameters.WHITE_BALANCE_AUTO,mParameters.getSupportedWhiteBalance())) {      mParameters.setWhiteBalance(Parameters.WHITE_BALANCE_AUTO);    }  }  if (mContinuousFocusSupported && ApiHelper.HAS_AUTO_FOCUS_MOVE_CALLBACK) {    updateAutoFocusMoveCallback();  }  qcomUpdateCameraParametersPreference();  return doGcamModeSwitch;}  }
class C{  public ChoicePseudoState(List<ChoiceStateData<S,E>> choices){  this.choices=choices;}  }
class C{  public boolean showPopup(){  if (isShowingPopup() || !mIsAttachedToWindow) {    return false;  }  mIsSelectingDefaultActivity=false;  showPopupUnchecked(mInitialActivityCount);  return true;}  }
class C{  private void save(){  try {    m_debugger.setName(m_nameTextField.getText());  } catch (  final CouldntSaveDataException exception) {    CUtilityFunctions.logException(exception);    final String message="E00053: " + "Could not save the new debugger name";    final String description=CUtilityFunctions.createDescription("The new debugger name could not be saved to the database.",new String[]{"There was a problem with the connection to the database while the debugger name was saved"},new String[]{"The debugger name was not saved. Please try to find out what went wrong with the database connection and try to save the debugger name again."});    NaviErrorDialog.show(SwingUtilities.getWindowAncestor(this),message,description,exception);  }  try {    m_debugger.setHost(m_hostTextField.getText());  } catch (  final CouldntSaveDataException exception) {    CUtilityFunctions.logException(exception);    final String message="E00158: " + "Could not save the new debugger description";    final String description=CUtilityFunctions.createDescription("The new debugger description could not be saved to the database.",new String[]{"There was a problem with the connection to the database while the debugger description was saved"},new String[]{"The debugger description was not saved. Please try to find out what went wrong with the database connection and try to save the debugger description again."});    NaviErrorDialog.show(SwingUtilities.getWindowAncestor(this),message,description,exception);  }  try {    m_debugger.setPort(Integer.parseInt(m_portTextField.getText()));  } catch (  final CouldntSaveDataException exception) {    CUtilityFunctions.logException(exception);    final String message="E00159: " + "Could not save the new debugger port";    final String description=CUtilityFunctions.createDescription("The new debugger port could not be saved to the database.",new String[]{"There was a problem with the connection to the database while the debugger port was saved"},new String[]{"The debugger port was not saved. Please try to find out what went wrong with the database connection and try to save the debugger port again."});    NaviErrorDialog.show(SwingUtilities.getWindowAncestor(this),message,description,exception);  }}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public static JSONObject readJSONObject(final JSONArray jsonArray,final int index,final boolean required,final boolean notNull) throws JSONException {  if (required) {    return jsonArray.getJSONObject(index);  }  if (notNull && jsonArray.isNull(index)) {    throw new JSONException(String.format(Locale.US,NULL_VALUE_FORMAT_ARRAY,index));  }  JSONObject value=null;  if (!jsonArray.isNull(index)) {    value=jsonArray.getJSONObject(index);  }  return value;}  }
class C{  protected boolean scanCheckPrimitiveArray(ObjectReference obj,int index,boolean total,int length){  if (VM.objectModel.isPrimitiveArray(obj)) {    arrayPrimitiveStream.increment(index,(short)1);    if (total) {      totalPrimitives++;      totalScalarUsedSpace+=length;    }    return true;  } else {    return false;  }}  }
class C{  public static double min(double[] a){  double min=Double.POSITIVE_INFINITY;  for (int i=0; i < a.length; i++) {    if (Double.isNaN(a[i]))     return Double.NaN;    if (a[i] < min)     min=a[i];  }  return min;}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.REGULAR_EXPRESSION_LITERAL___GET_VALUE_AS_STRING:    return getValueAsString();}return super.eInvoke(operationID,arguments);}  }
class C{  public void run(){  try {    MessageConsoleStream out=CheckerPlugin.findConsole().newMessageStream();    final File srcFofn=PluginUtil.writeTmpSrcFofn("CFPlugin-eclipse",true,PluginUtil.toFiles(fileNames));    final File classpathFofn=PluginUtil.writeTmpCpFile("CFPlugin-eclipse",true,classpath);    final List<String> cmd=createCommand(srcFofn,processors,classpathFofn,bootClasspath,new PrintStream(out));    if (verbose) {      out.println(PluginUtil.join(" ",cmd));      out.println();      out.println("Classpath:\n  " + classpath + "\n");      out.println("Source Files:\n  " + PluginUtil.join("\n\t",fileNames));    }    final String[] cmdArr=cmd.toArray(new String[cmd.size()]);    checkResult=Command.exec(cmdArr);    if (verbose) {      printTrimmedOutput(out,checkResult);      out.println("\n*******************\n");    }    srcFofn.delete();    classpathFofn.delete();  } catch (  IOException e) {    CheckerPlugin.logException(e,"Error calling javac");  }}  }
class C{  public Object jjtAccept(PartitionParserVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  public RemoteProductCategoryServiceImpl(final DtoProductCategoryService dtoProductCategoryService,final ReindexService reindexService,final FederationFacade federationFacade){  super(dtoProductCategoryService);  this.reindexService=reindexService;  this.federationFacade=federationFacade;}  }
class C{  public static boolean loadTexture(int glId,int file){  InputStream is=Resource.getResInputStream(file);  BufferedImage bitmap=loadARGBImage(is);  return loadTexture(glId,bitmap);}  }
class C{  public FacebookAuthorizationException(){  super();}  }
class C{  public boolean supportsCustomEditor(){  return true;}  }
class C{  @Override public int hashCode(){  return key().hashCode();}  }
class C{  public void add(EdgeEnd e){  edges.insert(e);  e.setNode(this);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private int findIndex(Object key,Object[] array){  int length=array.length;  int index=getModuloHash(key,length);  int last=(index + length - 2) % length;  while (index != last) {    if (array[index] == key || (array[index] == null)) {      break;    }    index=(index + 2) % length;  }  return index;}  }
class C{  public static RequestQueue newRequestQueue(int threadPoolSize){  RequestQueue requestQueue=new RequestQueue(threadPoolSize);  requestQueue.start();  return requestQueue;}  }
class C{  @Override public void onUIReset(PtrFrameLayout frame){  mScale=1f;  mDrawable.stop();}  }
class C{  public UnmodifiableConfigurationException(String message,Throwable cause){  super(message,cause);}  }
class C{  public void pause() throws IllegalStateException {  Log.d(TAG,"pause");  if (mediaPlayer != null) {    currentState=State.PAUSED;    mediaPlayer.pause();  } else   throw new RuntimeException("Media Player is not initialized");}  }
class C{  public static Font buildFontFrom(final Control control,final int style){  final Font temp=control.getFont();  final FontData[] fontData=temp.getFontData();  if (fontData == null || fontData.length == 0) {    return temp;  }  return new Font(control.getDisplay(),fontData[0].getName(),fontData[0].getHeight(),style);}  }
class C{  public boolean isVertexBufferObjectAvailable(){  return this.isVertexBufferObjectAvailable;}  }
class C{  public static String formatDate(java.sql.Timestamp timestamp){  if (timestamp == null)   return "";  DateFormat df=DateFormat.getDateTimeInstance(DateFormat.LONG,DateFormat.FULL);  java.util.Date date=timestamp;  return df.format(date);}  }
class C{  @SuppressWarnings("unchecked") public void writeURL(java.net.URL url) throws SQLException {  if (url == null) {    attribs.add(null);  } else {    attribs.add(new SerialDatalink(url));  }}  }
class C{  protected Object eval(String xpath,QName type){  Object result;  try {    result=m_XPath.evaluate(xpath,m_Document,type);  } catch (  Exception e) {    e.printStackTrace();    result=null;  }  return result;}  }
class C{  private void save(String file,String extension) throws IOException {  save(new File(file),extension);}  }
class C{  private OkHttpClient copyWithDefaults(){  OkHttpClient result=new OkHttpClient(this);  result.proxy=proxy;  result.proxySelector=proxySelector != null ? proxySelector : ProxySelector.getDefault();  result.cookieHandler=cookieHandler != null ? cookieHandler : CookieHandler.getDefault();  result.responseCache=responseCache != null ? responseCache : ResponseCache.getDefault();  result.sslSocketFactory=sslSocketFactory != null ? sslSocketFactory : HttpsURLConnection.getDefaultSSLSocketFactory();  result.hostnameVerifier=hostnameVerifier != null ? hostnameVerifier : OkHostnameVerifier.INSTANCE;  result.authenticator=authenticator != null ? authenticator : HttpAuthenticator.SYSTEM_DEFAULT;  result.connectionPool=connectionPool != null ? connectionPool : ConnectionPool.getDefault();  result.followProtocolRedirects=followProtocolRedirects;  result.transports=transports != null ? transports : DEFAULT_TRANSPORTS;  result.connectTimeout=connectTimeout;  result.readTimeout=readTimeout;  return result;}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:22.133 -0500",hash_original_method="688E2F52AD2D71AD93C4E5B7CEC68AD5",hash_generated_method="EC38FB290B862CD0782E2581BAE78C9F") public void processMessage(SIPMessage sipMessage) throws Exception {  try {    if (sipMessage.getFrom() == null || sipMessage.getTo() == null || sipMessage.getCallId() == null || sipMessage.getCSeq() == null || sipMessage.getViaHeaders() == null) {      String badmsg=sipMessage.encode();      if (sipStack.isLoggingEnabled()) {        sipStack.getStackLogger().logDebug(">>> Dropped Bad Msg");        sipStack.getStackLogger().logDebug(badmsg);      }      return;    }    ViaList viaList=sipMessage.getViaHeaders();    if (sipMessage instanceof SIPRequest) {      Via v=(Via)viaList.getFirst();      Hop hop=sipStack.addressResolver.resolveAddress(v.getHop());      this.peerProtocol=v.getTransport();      try {        this.peerAddress=mySock.getInetAddress();        if (v.hasParameter(Via.RPORT) || !hop.getHost().equals(this.peerAddress.getHostAddress())) {          v.setParameter(Via.RECEIVED,this.peerAddress.getHostAddress());        }        v.setParameter(Via.RPORT,Integer.toString(this.peerPort));      } catch (      java.text.ParseException ex) {        InternalErrorHandler.handleException(ex,sipStack.getStackLogger());      }      if (!this.isCached) {        ((TCPMessageProcessor)this.messageProcessor).cacheMessageChannel(this);        this.isCached=true;        int remotePort=((java.net.InetSocketAddress)mySock.getRemoteSocketAddress()).getPort();        String key=IOHandler.makeKey(mySock.getInetAddress(),remotePort);        sipStack.ioHandler.putSocket(key,mySock);      }    }    long receptionTime=System.currentTimeMillis();    if (sipMessage instanceof SIPRequest) {      SIPRequest sipRequest=(SIPRequest)sipMessage;      if (sipStack.isLoggingEnabled()) {        sipStack.getStackLogger().logDebug("----Processing Message---");      }      if (this.sipStack.getStackLogger().isLoggingEnabled(ServerLogger.TRACE_MESSAGES)) {        sipStack.serverLogger.logMessage(sipMessage,this.getPeerHostPort().toString(),this.getMessageProcessor().getIpAddress().getHostAddress() + ":" + this.getMessageProcessor().getPort(),false,receptionTime);      }      if (sipStack.getMaxMessageSize() > 0 && sipRequest.getSize() + (sipRequest.getContentLength() == null ? 0 : sipRequest.getContentLength().getContentLength()) > sipStack.getMaxMessageSize()) {        SIPResponse sipResponse=sipRequest.createResponse(SIPResponse.MESSAGE_TOO_LARGE);        byte[] resp=sipResponse.encodeAsBytes(this.getTransport());        this.sendMessage(resp,false);        throw new Exception("Message size exceeded");      }      ServerRequestInterface sipServerRequest=sipStack.newSIPServerRequest(sipRequest,this);      if (sipServerRequest != null) {        try {          sipServerRequest.processRequest(sipRequest,this);        }  finally {          if (sipServerRequest instanceof SIPTransaction) {            SIPServerTransaction sipServerTx=(SIPServerTransaction)sipServerRequest;            if (!sipServerTx.passToListener())             ((SIPTransaction)sipServerRequest).releaseSem();          }        }      } else {        if (sipStack.isLoggingEnabled())         this.sipStack.getStackLogger().logWarning("Dropping request -- could not acquire semaphore in 10 sec");      }    } else {      SIPResponse sipResponse=(SIPResponse)sipMessage;      try {        sipResponse.checkHeaders();      } catch (      ParseException ex) {        if (sipStack.isLoggingEnabled())         sipStack.getStackLogger().logError("Dropping Badly formatted response message >>> " + sipResponse);        return;      }      if (sipStack.getMaxMessageSize() > 0 && sipResponse.getSize() + (sipResponse.getContentLength() == null ? 0 : sipResponse.getContentLength().getContentLength()) > sipStack.getMaxMessageSize()) {        if (sipStack.isLoggingEnabled())         this.sipStack.getStackLogger().logDebug("Message size exceeded");        return;      }      ServerResponseInterface sipServerResponse=sipStack.newSIPServerResponse(sipResponse,this);      if (sipServerResponse != null) {        try {          if (sipServerResponse instanceof SIPClientTransaction && !((SIPClientTransaction)sipServerResponse).checkFromTag(sipResponse)) {            if (sipStack.isLoggingEnabled())             sipStack.getStackLogger().logError("Dropping response message with invalid tag >>> " + sipResponse);            return;          }          sipServerResponse.processResponse(sipResponse,this);        }  finally {          if (sipServerResponse instanceof SIPTransaction && !((SIPTransaction)sipServerResponse).passToListener())           ((SIPTransaction)sipServerResponse).releaseSem();        }      } else {        sipStack.getStackLogger().logWarning("Application is blocked -- could not acquire semaphore -- dropping response");      }    }  }  finally {  }}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  public void testSmoke(){  RegExp r=new RegExp("a(b+|c+)d");  Automaton a=r.toAutomaton();  assertTrue(a.isDeterministic());  CharacterRunAutomaton run=new CharacterRunAutomaton(a);  assertTrue(run.run("abbbbbd"));  assertTrue(run.run("acd"));  assertFalse(run.run("ad"));}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public void playSequential(Duration dismissDelay){  sq.getChildren().get(1).setDelay(dismissDelay);  sq.play();}  }
class C{  public static void assertCosignatoryModificationNotification(final Notification notification,final Account expectedMultisig,final MultisigCosignatoryModification expectedModification){  final MultisigCosignatoryModificationNotification n=(MultisigCosignatoryModificationNotification)notification;  Assert.assertThat(n.getType(),IsEqual.equalTo(NotificationType.CosignatoryModification));  Assert.assertThat(n.getMultisigAccount(),IsEqual.equalTo(expectedMultisig));  Assert.assertThat(n.getModification(),IsEqual.equalTo(expectedModification));}  }
class C{  public void destroy(){  invoke(connectorDestroy);}  }
class C{  public static XPath2FilterContainer newInstanceIntersect(Document doc,String xpath2filter){  return new XPath2FilterContainer(doc,xpath2filter,XPath2FilterContainer._ATT_FILTER_VALUE_INTERSECT);}  }
class C{  synchronized long parseTime(String t) throws ParseException {  return ISO8601FORMAT.parse(new String(t)).getTime();}  }
class C{  @Override public void dispose(){  commonValues=null;  currentPrinter=null;  if (thumbnails != null) {    thumbnails.dispose();  }  thumbnails=null;  if (properties != null) {    properties.dispose();  }  properties=null;  if (currentGUI != null) {    currentGUI.dispose();  }  currentGUI=null;  searchFrame=null;  currentCommands=null;  if (decode_pdf != null) {    decode_pdf.dispose();  }  decode_pdf=null;  Messages.dispose();}  }
class C{  @Override public void updateStatus(JobContext jobContext) throws Exception {  DbClient dbClient=jobContext.getDbClient();  try {    if (_status == JobStatus.IN_PROGRESS) {      return;    }    String opId=getTaskCompleter().getOpId();    StringBuilder logMsgBuilder=new StringBuilder(String.format("Updating status of job %s to %s",opId,_status.name()));    VNXeApiClient vnxeApiClient=getVNXeClient(jobContext);    URI fsId=getTaskCompleter().getId();    FileShare fsObj=dbClient.queryObject(FileShare.class,fsId);    if (_status == JobStatus.SUCCESS || _status == JobStatus.FAILED) {      VNXeJob.updateStoragePoolCapacity(dbClient,vnxeApiClient,fsObj.getPool(),null);    }    if (_status == JobStatus.SUCCESS && fsObj != null) {      updateFS(fsObj,dbClient,logMsgBuilder,vnxeApiClient);    } else     if (_status == JobStatus.FAILED && fsObj != null) {      logMsgBuilder.append("\n");      logMsgBuilder.append(String.format("Task %s failed to expand file system: %s",opId,fsId.toString()));    } else {      logMsgBuilder.append(String.format("The file system: %s is not found anymore",fsId));    }    _logger.info(logMsgBuilder.toString());    FileDeviceController.recordFileDeviceOperation(dbClient,OperationTypeEnum.EXPAND_FILE_SYSTEM,_isSuccess,logMsgBuilder.toString(),"",fsObj,String.valueOf(fsObj.getCapacity()));  } catch (  Exception e) {    _logger.error("Caught an exception while trying to updateStatus for VNXeCreateFileSystemJob",e);    setErrorStatus("Encountered an internal error during file system create job status processing : " + e.getMessage());  } finally {    super.updateStatus(jobContext);  }}  }
class C{  @Override public View onCreateMediaControlView(Bundle savedInstanceState){  LayoutInflater inflater=getLayoutInflater();  View controls=inflater.inflate(R.layout.custom_media_route_controller_controls_dialog,null);  loadViews(controls);  mState=mCastManager.getPlaybackStatus();  updateMetadata();  updatePlayPauseState(mState);  updateContentMirrorEnabled();  setupCallbacks();  return controls;}  }
class C{  public void writeEOL() throws IOException {  write(LINE_SEPARATOR);  indentationWritten=false;}  }
class C{  public UpnpDeviceHandler(final UpnpDevice device){  this.device=device;}  }
class C{  public static String locateFile(String name){  File file=new File(name);  if (file.exists()) {    return name;  } else {    java.net.URL url=ClassLoader.getSystemResource(name);    if (url != null) {      String newname=url.getFile();      file=new File(newname);      if (file.exists()) {        return newname;      }    }  }  return null;}  }
class C{  public void populateDAO(Object value,int row,int column){  final CodeType element=(CodeType)getData().getAspect().get(row);switch (column) {case 0:{      element.setName((String)value);      break;    }case 1:{    element.setDescription((String)value);    break;  }default :{}}element.setDirty(true);}  }
class C{  public MultipleCategorySeries(String title){  mTitle=title;}  }
class C{  public XMLReaderAdapter(XMLReader xmlReader){  setup(xmlReader);}  }
class C{  public void acquire() throws Exception {  _processLock.acquire();}  }
class C{  public void union(GraphChange other){  removes.addAll(other.removes);  colliders.addAll(other.colliders);  nonColliders.addAll(other.nonColliders);  orients.addAll(other.orients);}  }
class C{  public OracleException(String message,int errorCode){  this(message,null,errorCode);}  }
class C{  public static Uri addImage(ContentResolver resolver,String title,long date,Location location,int orientation,ExifInterface exif,byte[] data,int width,int height,String mimeType) throws IOException {  String path=generateFilepath(title,mimeType);  long fileLength=writeFile(path,data,exif);  if (fileLength >= 0) {    return addImageToMediaStore(resolver,title,date,location,orientation,fileLength,path,width,height,mimeType);  }  return null;}  }
class C{  public String generate() throws OAuthMessageSignerException {  try {    String normalizedUrl=normalizeRequestUrl();    String normalizedParams=normalizeRequestParameters();    return request.getMethod() + '&' + OAuth.percentEncode(normalizedUrl)+ '&'+ OAuth.percentEncode(normalizedParams);  } catch (  Exception e) {    throw new OAuthMessageSignerException(e);  }}  }
class C{  @Override AndroidHttpClientConnection openConnection(Request req) throws IOException {  EventHandler eventHandler=req.getEventHandler();  mCertificate=null;  eventHandler.certificate(mCertificate);  AndroidHttpClientConnection conn=new AndroidHttpClientConnection();  BasicHttpParams params=new BasicHttpParams();  Socket sock=new Socket(mHost.getHostName(),mHost.getPort());  params.setIntParameter(HttpConnectionParams.SOCKET_BUFFER_SIZE,8192);  conn.bind(sock,params);  return conn;}  }
class C{  public void createAdosNPC(StendhalRPZone zone){  final SpeakerNPC npc=new AdosHouseSeller("Reg Denson","ados",houseTax);  zone.add(npc);}  }
class C{  private static String compare(String target,String correct){  int idx=0;  int match=-1;  while (idx < target.length() && idx < correct.length()) {    if (target.charAt(idx) != correct.charAt(idx)) {      break;    }    match++;    idx++;  }  if (match == -1) {    return target;  }  if (idx == target.length()) {    return "[" + target + "]";  }  if (idx == correct.length()) {    return "[" + correct + "]";  }  return "[" + target.substring(0,match + 1) + "]"+ target.substring(match + 1);}  }
class C{  private void orchestrateVPoolChanges(List<Volume> volumes,List<VolumeDescriptor> descriptors,String taskId){  try {    BlockOrchestrationController controller=getController(BlockOrchestrationController.class,BlockOrchestrationController.BLOCK_ORCHESTRATION_DEVICE);    controller.changeVirtualPool(descriptors,taskId);  } catch (  InternalException e) {    if (s_logger.isErrorEnabled()) {      s_logger.error("Controller error",e);    }    String errMsg=String.format("Controller error on changeVolumeVirtualPool: %s",e.getMessage());    Operation statusUpdate=new Operation(Operation.Status.error.name(),errMsg);    for (    Volume volume : volumes) {      _dbClient.updateTaskOpStatus(Volume.class,volume.getId(),taskId,statusUpdate);    }    throw e;  }}  }
class C{  public void show(){  getSysNotificationManager().notify(id,build());  Log.i("ReactSystemNotification","Notification Show: " + id);}  }
class C{  @Override final public boolean isBigdataNativeService(){  return false;}  }
class C{  Node(E item){  UNSAFE.putObject(this,itemOffset,item);}  }
class C{  private boolean hasNextTlsMode(){  return nextTlsMode != TLS_MODE_NULL;}  }
class C{  public static PublicKey generateRandomPublicKey(){  final KeyPair pair=new KeyPair();  return pair.getPublicKey();}  }
class C{  protected boolean mustShowVerticalScrollbar(Dimension contentSize){  if ((!this.isMinimized() && !this.isAnimating())) {    return contentSize.height > this.contentBounds.height;  } else {    return this.showVerticalScrollbar;  }}  }
class C{  @Override public String slaveof(final String host,final int port){  client.slaveof(host,port);  return client.getStatusCodeReply();}  }
class C{  public void removeAllListeners(){  clientgui.getClient().getGame().removeGameListener(this);  clientgui.getBoardView().removeBoardViewListener(this);}  }
class C{  @Override public boolean mayRemoveInstanceAfterFirstBatchDone(){  return true;}  }
class C{  public void ensureFileCopyIsDeletedIfExisting(String transferId){  if (Direction.INCOMING == mMessagingLog.getFileTransferDirection(transferId)) {    return;  }  Uri file=mMessagingLog.getFile(transferId);  if (file != null) {    new File(file.getPath()).delete();  }}  }
class C{  public LocalDateTime withMonthOfYear(int monthOfYear){  return withLocalMillis(getChronology().monthOfYear().set(getLocalMillis(),monthOfYear));}  }
class C{  public static final Position readFEN(String fen) throws ChessParseError {  fen=fen.trim();  Position pos=new Position();  String[] words=fen.split(" ");  if (words.length < 2) {    throw new ChessParseError(R.string.err_too_few_spaces);  }  for (int i=0; i < words.length; i++) {    words[i]=words[i].trim();  }  int row=7;  int col=0;  for (int i=0; i < words[0].length(); i++) {    char c=words[0].charAt(i);switch (c) {case '1':      col+=1;    break;case '2':  col+=2;break;case '3':col+=3;break;case '4':col+=4;break;case '5':col+=5;break;case '6':col+=6;break;case '7':col+=7;break;case '8':col+=8;break;case '/':row--;col=0;break;case 'P':safeSetPiece(pos,col,row,Piece.WPAWN);col++;break;case 'N':safeSetPiece(pos,col,row,Piece.WKNIGHT);col++;break;case 'B':safeSetPiece(pos,col,row,Piece.WBISHOP);col++;break;case 'R':safeSetPiece(pos,col,row,Piece.WROOK);col++;break;case 'Q':safeSetPiece(pos,col,row,Piece.WQUEEN);col++;break;case 'K':safeSetPiece(pos,col,row,Piece.WKING);col++;break;case 'p':safeSetPiece(pos,col,row,Piece.BPAWN);col++;break;case 'n':safeSetPiece(pos,col,row,Piece.BKNIGHT);col++;break;case 'b':safeSetPiece(pos,col,row,Piece.BBISHOP);col++;break;case 'r':safeSetPiece(pos,col,row,Piece.BROOK);col++;break;case 'q':safeSetPiece(pos,col,row,Piece.BQUEEN);col++;break;case 'k':safeSetPiece(pos,col,row,Piece.BKING);col++;break;default :throw new ChessParseError(R.string.err_invalid_piece,pos);}}if (words[1].length() > 0) {boolean wtm;switch (words[1].charAt(0)) {case 'w':wtm=true;break;case 'b':wtm=false;break;default :throw new ChessParseError(R.string.err_invalid_side,pos);}pos.setWhiteMove(wtm);} else {throw new ChessParseError(R.string.err_invalid_side,pos);}int castleMask=0;if (words.length > 2) {for (int i=0; i < words[2].length(); i++) {char c=words[2].charAt(i);switch (c) {case 'K':castleMask|=(1 << Position.H1_CASTLE);break;case 'Q':castleMask|=(1 << Position.A1_CASTLE);break;case 'k':castleMask|=(1 << Position.H8_CASTLE);break;case 'q':castleMask|=(1 << Position.A8_CASTLE);break;case '-':break;default :throw new ChessParseError(R.string.err_invalid_castling_flags,pos);}}}pos.setCastleMask(castleMask);removeBogusCastleFlags(pos);if (words.length > 3) {String epString=words[3];if (!epString.equals("-")) {if (epString.length() < 2) throw new ChessParseError(R.string.err_invalid_en_passant_square,pos);int epSq=getSquare(epString);if (epSq != -1) {if (pos.whiteMove) {if ((Position.getY(epSq) != 5) || (pos.getPiece(epSq) != Piece.EMPTY) || (pos.getPiece(epSq - 8) != Piece.BPAWN)) epSq=-1;} else {if ((Position.getY(epSq) != 2) || (pos.getPiece(epSq) != Piece.EMPTY) || (pos.getPiece(epSq + 8) != Piece.WPAWN)) epSq=-1;}pos.setEpSquare(epSq);}}}try {if (words.length > 4) {pos.halfMoveClock=Integer.parseInt(words[4]);}if (words.length > 5) {pos.fullMoveCounter=Integer.parseInt(words[5]);}} catch (NumberFormatException nfe) {}int[] nPieces=new int[Piece.nPieceTypes];for (int i=0; i < Piece.nPieceTypes; i++) nPieces[i]=0;for (int x=0; x < 8; x++) for (int y=0; y < 8; y++) nPieces[pos.getPiece(Position.getSquare(x,y))]++;if (nPieces[Piece.WKING] != 1) throw new ChessParseError(R.string.err_white_num_kings,pos);if (nPieces[Piece.BKING] != 1) throw new ChessParseError(R.string.err_black_num_kings,pos);int maxWPawns=8;maxWPawns-=Math.max(0,nPieces[Piece.WKNIGHT] - 2);maxWPawns-=Math.max(0,nPieces[Piece.WBISHOP] - 2);maxWPawns-=Math.max(0,nPieces[Piece.WROOK] - 2);maxWPawns-=Math.max(0,nPieces[Piece.WQUEEN] - 1);if (nPieces[Piece.WPAWN] > maxWPawns) throw new ChessParseError(R.string.err_too_many_white_pieces,pos);int maxBPawns=8;maxBPawns-=Math.max(0,nPieces[Piece.BKNIGHT] - 2);maxBPawns-=Math.max(0,nPieces[Piece.BBISHOP] - 2);maxBPawns-=Math.max(0,nPieces[Piece.BROOK] - 2);maxBPawns-=Math.max(0,nPieces[Piece.BQUEEN] - 1);if (nPieces[Piece.BPAWN] > maxBPawns) throw new ChessParseError(R.string.err_too_many_black_pieces,pos);Position pos2=new Position(pos);pos2.setWhiteMove(!pos.whiteMove);if (MoveGen.inCheck(pos2)) {throw new ChessParseError(R.string.err_king_capture_possible,pos);}fixupEPSquare(pos);return pos;}  }
class C{  @Override public void onGeolocationPermissionsShowPrompt(String origin,Callback callback){  super.onGeolocationPermissionsShowPrompt(origin,callback);  callback.invoke(origin,true,false);}  }
class C{  protected void checkEventCompatibility(ReplDBMSHeader header,DBMSEvent event) throws ReplicatorException {  if (supportNonTzAwareMode == false)   return; else   if (event.getMetadata().size() == 0)   return;  boolean timeZoneAwareEvent=event.getMetadataOptionValue(ReplOptionParams.TIME_ZONE_AWARE) != null;  if (nonTzAwareMode) {    if (timeZoneAwareEvent) {      logger.info("Found a time zone-aware event while in non-TZ-aware mode: seqno=" + header.getSeqno() + " fragno="+ header.getFragno());      enableTzAwareMode();    }  } else {    if (!timeZoneAwareEvent) {      logger.info("Found a non-time zone-aware event while in TZ-aware mode: seqno=" + header.getSeqno() + " fragno="+ header.getFragno());      enableNonTzAwareMode();    }  }}  }
class C{  @Override protected LR1State createStartState(){  return new LR1State(toHashSet(new LR1Item(grammar.getStartProduction(),0,grammarInfo.getTerminalSet(Placeholder))));}  }
class C{  @Override public void centerRange(double value){  setRange(value - this.period / 2.0,value + this.period / 2.0);}  }
class C{  public Object nextValue() throws JSONException {  char c=this.nextClean();  String string;switch (c) {case '"':case '\'':    return this.nextString(c);case '{':  this.back();return new JSONObject(this);case '[':this.back();return new JSONArray(this);}StringBuffer sb=new StringBuffer();while (c >= ' ' && ",:]}/\\\"[{;=#".indexOf(c) < 0) {sb.append(c);c=this.next();}this.back();string=sb.toString().trim();if ("".equals(string)) {throw this.syntaxError("Missing value");}return JSONObject.stringToValue(string);}  }
class C{  private static boolean issues(X509CertImpl cert,X509CRLImpl crl,String provider) throws IOException {  boolean matched=false;  AdaptableX509CertSelector issuerSelector=new AdaptableX509CertSelector();  boolean[] usages=cert.getKeyUsage();  if (usages != null) {    usages[6]=true;    issuerSelector.setKeyUsage(usages);  }  X500Principal crlIssuer=crl.getIssuerX500Principal();  issuerSelector.setSubject(crlIssuer);  AuthorityKeyIdentifierExtension crlAKID=crl.getAuthKeyIdExtension();  issuerSelector.setSkiAndSerialNumber(crlAKID);  matched=issuerSelector.match(cert);  if (matched && (crlAKID == null || cert.getAuthorityKeyIdentifierExtension() == null)) {    try {      crl.verify(cert.getPublicKey(),provider);      matched=true;    } catch (    GeneralSecurityException e) {      matched=false;    }  }  return matched;}  }
class C{  public String globalInfo(){  return "This filter takes a dataset and outputs a specified fold for " + "cross validation. If you do not want the folds to be stratified " + "use the unsupervised version.";}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public void invoke(){  try {    Document doc=textComp.getDocument();    int caretPos=textComp.getCaretPosition();    doc.insertString(caretPos,"hack",null);  } catch (  Exception ex) {    Exceptions.printStackTrace(ex);  }}  }
class C{  public boolean isEntryPoint(BasicBlock block){  if (block == null)   throw new IllegalArgumentException("null given");  if (block.containsInstruction(entryPoint)) {    return true;  }  return false;}  }
class C{  public ServiceCall<RecognitionCallback> registerCallback(String callbackUrl,String secret){  Validator.notNull(callbackUrl,"callbackUrl cannot be null");  RequestBuilder requestBuilder=RequestBuilder.post(PATH_REGISTER_CALLBACK);  requestBuilder.query(CALLBACK_URL,callbackUrl);  if (secret != null) {    requestBuilder.query(SECRET,secret);  }  return createServiceCall(requestBuilder.build(),ResponseConverterUtils.getObject(RecognitionCallback.class));}  }
class C{  protected void onNotice(String sourceNick,String sourceLogin,String sourceHostname,String target,String notice){}  }
class C{  public Sector(){}  }
class C{  void testClientJarMagic() throws IOException {  ZipEntry ze=getEntry();  byte[] data=new byte[8];  set16(data,0,TEST_HEADER);  set16(data,2,0);  set16(data,4,JAR_MAGIC);  set16(data,6,0);  ze.setExtra(data);  zos.putNextEntry(ze);  zos.close();  ZipInputStream zis=getInputStream();  ze=zis.getNextEntry();  byte[] e=ze.getExtra();  checkExtra(data,ze.getExtra());  checkEntry(ze,0,0);}  }
class C{  public boolean okToSend(){  return true;}  }
class C{  public Builder url(String url){  if (url == null)   throw new IllegalArgumentException("url == null");  if (url.regionMatches(true,0,"ws:",0,3)) {    url="http:" + url.substring(3);  } else   if (url.regionMatches(true,0,"wss:",0,4)) {    url="https:" + url.substring(4);  }  HttpUrl parsed=HttpUrl.parse(url);  if (parsed == null)   throw new IllegalArgumentException("unexpected url: " + url);  return url(parsed);}  }
class C{  public ParsedDescribeQuery(TupleExpr tupleExpr,Map<String,String> namespaces){  super(tupleExpr,namespaces);}  }
class C{  public static int[][] extractValues(Instances D_){  int numVals=D_.classAttribute().numValues();  int vMap[][]=new int[numVals][];  for (int d=0; d < numVals; d++) {    vMap[d]=MLUtils.toIntArray(D_.classAttribute().value(d));  }  return vMap;}  }
class C{  public void post(String message){  if (mPrintStream != null) {    log.info("Post message = " + message);    mPrintStream.print(message + "\n");    mLastPostTime=SystemClock.elapsedRealtime();  }}  }
class C{  private void tql2(){  for (int i=1; i < n; i++) {    e[i - 1]=e[i];  }  e[n - 1]=0.0;  double f=0.0;  double tst1=0.0;  double eps=Math.pow(2.0,-52.0);  for (int l=0; l < n; l++) {    tst1=Math.max(tst1,Math.abs(d[l]) + Math.abs(e[l]));    int m=l;    while (m < n) {      if (Math.abs(e[m]) <= eps * tst1) {        break;      }      m++;    }    if (m > l) {      int iter=0;      do {        iter=iter + 1;        double g=d[l];        double p=(d[l + 1] - g) / (2.0 * e[l]);        double r=Maths.hypot(p,1.0);        if (p < 0) {          r=-r;        }        d[l]=e[l] / (p + r);        d[l + 1]=e[l] * (p + r);        double dl1=d[l + 1];        double h=g - d[l];        for (int i=l + 2; i < n; i++) {          d[i]-=h;        }        f=f + h;        p=d[m];        double c=1.0;        double c2=c;        double c3=c;        double el1=e[l + 1];        double s=0.0;        double s2=0.0;        for (int i=m - 1; i >= l; i--) {          c3=c2;          c2=c;          s2=s;          g=c * e[i];          h=c * p;          r=Maths.hypot(p,e[i]);          e[i + 1]=s * r;          s=e[i] / r;          c=p / r;          p=c * d[i] - s * g;          d[i + 1]=h + s * (c * g + s * d[i]);          for (int k=0; k < n; k++) {            h=V[k][i + 1];            V[k][i + 1]=s * V[k][i] + c * h;            V[k][i]=c * V[k][i] - s * h;          }        }        p=-s * s2 * c3* el1* e[l] / dl1;        e[l]=s * p;        d[l]=c * p;      } while (Math.abs(e[l]) > eps * tst1);    }    d[l]=d[l] + f;    e[l]=0.0;  }  for (int i=0; i < n - 1; i++) {    int k=i;    double p=d[i];    for (int j=i + 1; j < n; j++) {      if (d[j] < p) {        k=j;        p=d[j];      }    }    if (k != i) {      d[k]=d[i];      d[i]=p;      for (int j=0; j < n; j++) {        p=V[j][i];        V[j][i]=V[j][k];        V[j][k]=p;      }    }  }}  }
class C{  protected boolean convertToUppercase(){  return true;}  }
class C{  public static void pointerPress(float x,float y,String componentName){  if (verbose) {    if (componentName == null) {      log("pointerPress(" + x + ", "+ y+ ", null)");    } else {      log("pointerPress(" + x + ", "+ y+ ", "+ componentName+ ")");    }  }  waitFor(20);  if (componentName != null) {    Component c=findByName(componentName);    int actualX=c.getAbsoluteX() + (int)(x * c.getWidth());    int actualY=c.getAbsoluteY() + (int)(y * c.getHeight());    Display.getInstance().getCurrent().pointerPressed(actualX,actualY);  } else {    Display.getInstance().getCurrent().pointerPressed((int)(x * Display.getInstance().getDisplayWidth()),(int)(y * Display.getInstance().getDisplayHeight()));  }  waitFor(10);}  }
class C{  public TextDrawable(Paint paint,String s){  mText=s;  mPaint=new Paint(paint);  mHeightBounds=new Rect();  init();}  }
class C{  public void revoke() throws AcmeException {  revoke(null);}  }
class C{  public ObjectFactory(){}  }
class C{  public static final byte composeSmeAckNotRequested(byte registeredDelivery){  return composeSmeAck(registeredDelivery,SMPPConstant.REGDEL_SME_ACK_NO);}  }
class C{  public boolean isDrSourceBalance(){  return getSourceBalance().signum() != -1;}  }
class C{  private void outputDocTypeDecl(String name) throws SAXException {  if (true == m_needToOutputDocTypeDecl) {    String doctypeSystem=getDoctypeSystem();    String doctypePublic=getDoctypePublic();    if ((null != doctypeSystem) || (null != doctypePublic)) {      final java.io.Writer writer=m_writer;      try {        writer.write("<!DOCTYPE ");        writer.write(name);        if (null != doctypePublic) {          writer.write(" PUBLIC \"");          writer.write(doctypePublic);          writer.write('"');        }        if (null != doctypeSystem) {          if (null == doctypePublic)           writer.write(" SYSTEM \""); else           writer.write(" \"");          writer.write(doctypeSystem);          writer.write('"');        }        writer.write('>');        outputLineSep();      } catch (      IOException e) {        throw new SAXException(e);      }    }  }  m_needToOutputDocTypeDecl=false;}  }
class C{  private final Collection<Object> handleNonArray(JsonParser jp,DeserializationContext ctxt,Collection<Object> result) throws IOException, JsonProcessingException {  if (!ctxt.isEnabled(DeserializationConfig.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY)) {    throw ctxt.mappingException(_collectionType.getRawClass());  }  JsonDeserializer<Object> valueDes=_valueDeserializer;  final TypeDeserializer typeDeser=_valueTypeDeserializer;  JsonToken t=jp.getCurrentToken();  Object value;  if (t == JsonToken.VALUE_NULL) {    value=null;  } else   if (typeDeser == null) {    value=valueDes.deserialize(jp,ctxt);  } else {    value=valueDes.deserializeWithType(jp,ctxt,typeDeser);  }  result.add(value);  return result;}  }
class C{  public Index findLocalTempTableIndex(String name){  if (localTempTableIndexes == null) {    return null;  }  return localTempTableIndexes.get(name);}  }
class C{  public Warning create(int limit,String message,boolean logAll){  final Warning warning=new Warning(limit,message,logAll);  mWarnings.add(warning);  return warning;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:30.280 -0500",hash_original_method="3BB60B8557B70E4713CB12DD6901C8CC",hash_generated_method="012C2B63A931A3FB2219E4D915578546") public static long reverse(long v){  v=((v >>> 1) & 0x5555555555555555L) | ((v & 0x5555555555555555L) << 1);  v=((v >>> 2) & 0x3333333333333333L) | ((v & 0x3333333333333333L) << 2);  v=((v >>> 4) & 0x0F0F0F0F0F0F0F0FL) | ((v & 0x0F0F0F0F0F0F0F0FL) << 4);  v=((v >>> 8) & 0x00FF00FF00FF00FFL) | ((v & 0x00FF00FF00FF00FFL) << 8);  v=((v >>> 16) & 0x0000FFFF0000FFFFL) | ((v & 0x0000FFFF0000FFFFL) << 16);  return ((v >>> 32)) | ((v) << 32);}  }
class C{  public static long power(long base,long power){  long result=1;  long absPower=Math.abs(power);  for (long p=0; p < absPower; p++) {    result*=base;  }  if (power < 0) {    result=1 / result;  }  return result;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case SRuntimePackage.EXECUTION_CONTEXT__VALUE:    return VALUE_EDEFAULT == null ? value != null : !VALUE_EDEFAULT.equals(value);case SRuntimePackage.EXECUTION_CONTEXT__FQ_NAME:  return FQ_NAME_EDEFAULT == null ? fqName != null : !FQ_NAME_EDEFAULT.equals(fqName);case SRuntimePackage.EXECUTION_CONTEXT__WRITABLE:return writable != WRITABLE_EDEFAULT;case SRuntimePackage.EXECUTION_CONTEXT__TYPE:return type != null;case SRuntimePackage.EXECUTION_CONTEXT__SLOTS:return slots != null && !slots.isEmpty();case SRuntimePackage.EXECUTION_CONTEXT__ACTIVE_STATES:return activeStates != null && !activeStates.isEmpty();case SRuntimePackage.EXECUTION_CONTEXT__EXECUTED_ELEMENTS:return executedElements != null && !executedElements.isEmpty();case SRuntimePackage.EXECUTION_CONTEXT__SUSPENDED_ELEMENTS:return suspendedElements != null && !suspendedElements.isEmpty();case SRuntimePackage.EXECUTION_CONTEXT__SNAPSHOT:return snapshot != SNAPSHOT_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  public KeyConcurrentHashMapPro(int initialCapacity,float loadFactor){  this(initialCapacity,loadFactor,DEFAULT_CONCURRENCY_LEVEL);}  }
class C{  public void logFatal(Object message,Throwable exception){  logInternal(FATAL,message,exception);}  }
class C{  public long readBits(int bitOffset,int bitSize){  if ((bitOffset + bitSize - 1) >> 3 >= this.size())   throw new IllegalArgumentException("Attempt to read outside the Struct");  int offset=bitOffset >> 3;  int bitStart=bitOffset - (offset << 3);  bitStart=(byteOrder() == ByteOrder.BIG_ENDIAN) ? bitStart : 64 - bitSize - bitStart;  int index=getByteBufferPosition() + offset;  long value=readByteBufferLong(index);  value<<=bitStart;  value>>=(64 - bitSize);  return value;}  }
class C{  @Override public void actionPerformed(ActionEvent event){  String command=event.getActionCommand();  if (command.equals("TickUnitValue")) {    validateTickUnit();  } else {    super.actionPerformed(event);  }}  }
class C{  private void tryReduceLevel(){  HeadIndex<K,V> h=head;  HeadIndex<K,V> d;  HeadIndex<K,V> e;  if (h.level > 3 && (d=(HeadIndex<K,V>)h.down) != null && (e=(HeadIndex<K,V>)d.down) != null && e.right == null && d.right == null && h.right == null && casHead(h,d) && h.right != null)   casHead(d,h);}  }
class C{  protected void fireMenuDeselected(){  if (DEBUG) {    System.out.println("In JMenu.fireMenuDeselected");  }  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == MenuListener.class) {      if (listeners[i + 1] == null) {        throw new Error(getText() + " has a NULL Listener!! " + i);      } else {        if (menuEvent == null)         menuEvent=new MenuEvent(this);        ((MenuListener)listeners[i + 1]).menuDeselected(menuEvent);      }    }  }}  }
class C{  @SuppressWarnings("unchecked") public <T>T[] toArray(T[] a){  if (a.length < size)   return (T[])Arrays.copyOf(elementData,size,a.getClass());  System.arraycopy(elementData,0,a,0,size);  if (a.length > size)   a[size]=null;  return a;}  }
class C{  public void testFragmentHandling() throws Exception {  TungstenProperties conf=helper.createRuntimeWithStore(3);  ReplicatorRuntime runtime=new ReplicatorRuntime(conf,new MockOpenReplicatorContext(),ReplicatorMonitor.getInstance());  runtime.configure();  Pipeline pipeline=runtime.getPipeline();  ApplierWrapper wrapper=(ApplierWrapper)pipeline.getStage("apply").getApplier0();  DummyApplier applier=(DummyApplier)wrapper.getApplier();  applier.setStoreAppliedEvents(true);  runtime.prepare();  pipeline.start(new MockEventDispatcher());  Future<ReplDBMSHeader> wait=pipeline.watchForCommittedSequenceNumber(9,false);  ReplDBMSHeader lastEvent=wait.get(10,TimeUnit.SECONDS);  assertEquals("Expected 10 sequence numbers",9,lastEvent.getSeqno());  ArrayList<StatementData> sql=((DummyApplier)applier).getTrx();  assertEquals("Expected 30x2 statements",60,sql.size());  pipeline.shutdown(false);  runtime.release();}  }
class C{  private void connect(InetAddress anAddr,int aPort,int timeout) throws IOException {  InetAddress normalAddr=anAddr.isAnyLocalAddress() ? InetAddress.getLocalHost() : anAddr;  if (streaming && usingSocks()) {    socksConnect(anAddr,aPort,0);  } else {    IoBridge.connect(fd,normalAddr,aPort,timeout);  }  super.address=normalAddr;  super.port=aPort;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:29.254 -0500",hash_original_method="0D9B441EA6B4B8E8347B85C87EDD1299",hash_generated_method="134B791CD0D6796A7817E9FBE2672519") public BERSequence(){}  }
class C{  public static Stream<Transaction> streamDefault(final Block block){  return streamDirectAndFirstChildTransactions(block);}  }
class C{  public void paint(Graphics g,Shape a){  Rectangle alloc=(Rectangle)a;  int y=alloc.y + metrics.getAscent();  int x=alloc.x;  JTextComponent host=(JTextComponent)getContainer();  Highlighter h=host.getHighlighter();  LayeredHighlighter dh=(h instanceof LayeredHighlighter) ? (LayeredHighlighter)h : null;  int start=getStartOffset();  int end=getEndOffset();  int p0=start;  int[] lineEnds=getLineEnds();  for (int i=0; i < lineCount; i++) {    int p1=(lineEnds == null) ? end : start + lineEnds[i];    if (dh != null) {      int hOffset=(p1 == end) ? (p1 - 1) : p1;      dh.paintLayeredHighlights(g,p0,hOffset,a,host,this);    }    drawLine(p0,p1,g,x,y);    p0=p1;    y+=metrics.getHeight();  }}  }
class C{  public boolean isReadWrite(){  Object oo=get_Value(COLUMNNAME_IsReadWrite);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void clearRoutingTasksList(){  this.productionRunRoutingTasks=null;}  }
class C{  public int bisort(int spr_val,boolean direction){  if (left == null) {    if ((value > spr_val) ^ direction) {      int tmpval=spr_val;      spr_val=value;      value=tmpval;    }  } else {    int val=value;    value=left.bisort(val,direction);    boolean ndir=!direction;    spr_val=right.bisort(spr_val,ndir);    spr_val=bimerge(spr_val,direction);  }  return spr_val;}  }
class C{  public static BufferedReader openLogFile(File file) throws AdeUsageException {  BufferedReader logReader;  final String fileName=file.getPath();  try {    if (file.getName().endsWith(ZIP)) {      logReader=new BufferedReader(new InputStreamReader(new GZIPInputStream(new FileInputStream(fileName)),StandardCharsets.UTF_8));    } else {      logReader=new BufferedReader(new InputStreamReader(new FileInputStream(fileName),StandardCharsets.UTF_8));    }  } catch (  IOException e) {    throw new AdeUsageException("Failed opening file " + fileName + ": ",e);  }  return logReader;}  }
class C{  private UnregisterAllInterest(){}  }
class C{  public static String negBitMask(final long bits){  return String.valueOf((0xFFFFFFFFL << bits) & 0xFFFFFFFFL);}  }
class C{  public void run(){  try {    final double sample=sampleTask.call().doubleValue();    final double delta=sample - oldValue;    oldValue=sample;    average=getMovingAverage(average,delta,w);    nsamples++;  } catch (  Exception ex) {    log.warn(name,ex);  }}  }
class C{  public String apiUrl(){  return apiUrl;}  }
class C{  public static ByteBuf heartbeatContent(){  return HEARTBEAT_BUF.duplicate();}  }
class C{  public void stateChanged(ChangeEvent e){  if (e == null) {    return;  }  if (myBar != null) {    Object newModelValue=myBar.getValue();    firePropertyChange(ACCESSIBLE_VALUE_PROPERTY,oldModelValue,newModelValue);    oldModelValue=newModelValue;  }}  }
class C{  public MirroredTypesException(List<? extends TypeMirror> types){  super("Attempt to access Class objects for TypeMirrors " + (types=new ArrayList<TypeMirror>(types)).toString());  this.types=Collections.unmodifiableList(types);}  }
class C{  protected void initializeCredentialsConfigPanel(){  AuthenticationMethodType type=workingContext.getAuthenticationMethod().getType();  if (type.hasCredentialsOptionsPanel()) {    credentialsPanel=type.buildCredentialsOptionsPanel(configuredCredentials,workingContext);    fieldsPanel.add(credentialsPanel,LayoutHelper.getGBC(0,3,2,1,new Insets(4,8,2,4)));    fieldsPanel.revalidate();    this.pack();  }}  }
class C{  public void addRight(int right){  this.rightMask|=right;}  }
class C{  public GameRequestDialog(Fragment fragment){  super(fragment,DEFAULT_REQUEST_CODE);}  }
class C{  public void execute(){  if (this.verbose)   this.displayValues();  if (spec == null || spec.length() == 0) {    log("spec missing!",Project.MSG_ERR);  } else   if (specdir == null || specdir.length() == 0) {    log("specsrc is missing!",Project.MSG_ERR);  } else   if (destdir == null || destdir.length() == 0) {    log("dest is missing!",Project.MSG_ERR);  } else   if (classpath == null) {    log("classpath is missing!",Project.MSG_ERR);  } else {    if (classpath == null)     log("No classpath set! Is this correct?",Project.MSG_WARN);    if (cup2srcdir != null) {      this.compileCup2();    }    compileSpec();    if (verbose)     log(" === Compiling Spec done ===");    try {      this.cup2Specification=this.createCUP2Specification();    } catch (    InstantiationException e) {      log("InstantiationException when trying to create CUP2Specification");      e.printStackTrace();    }catch (    IllegalSpecException e) {      log("CUP2 Specification invalid : " + e);      e.printStackTrace();    }catch (    ClassNotFoundException e) {      log("ClassNotFoundException when trying to create CUP2Specification");      e.printStackTrace();    }catch (    IllegalAccessException e) {      log("IllegalAccessException when trying to create CUP2Specification");      e.printStackTrace();    }    if (this.cup2Specification == null) {      log("Error: could not create CUPSpecification",Project.MSG_ERR);    } else {      if (verbose)       log(" === Checking productivity and reachability ===");      IGrammar orgGram=this.cup2Specification.getGrammar();      CheckedGrammar cg=new CheckedGrammar(orgGram);      if (!cg.isReduced()) {        log("The grammar is not reduced!",Project.MSG_WARN);        if (cg.hasNotProductiveNonTerminals()) {          log("The grammar contains not productive NonTerminals!",Project.MSG_WARN);          LinkedList<NonTerminal> notProductiveNonTerminals=cg.getNotProductiveNonTerminals();          log("Not productive are: " + notProductiveNonTerminals.toString());        }        if (cg.hasNotReachableNonTerminals()) {          log("The grammar contains not reachable NonTerminals!",Project.MSG_WARN);          LinkedList<NonTerminal> notReachableNonTerminals=cg.getNotReachableNonTerminals();          log("Not reachable are: " + notReachableNonTerminals.toString());        }      }      LRParsingTable table=null;      try {        if (verbose)         log(" === Creating parsing table ===");        LRGenerator<?,?> generator=createGenerator(this.cup2Specification);        table=generator.getParsingTable();        LRParser parser=new LRParser(table);        if (verbose)         log(" === Serializing parser ===");        serializeParser(parser);      } catch (      ShiftReduceConflict e) {        log("Shift-Reduce-Conflict during parser generation: " + e.getMessage(),Project.MSG_ERR);      }catch (      ReduceReduceConflict e) {        log("Reduc-Reduce-Conflict during parser generation: " + e.getMessage(),Project.MSG_ERR);      }catch (      GeneratorException e) {        log("GeneratorException occured during parser generation: " + e.getMessage(),Project.MSG_ERR);      }catch (      IllegalSpecException e) {        log("Cup2 Specification invalid : " + e);        e.printStackTrace();      }      if (this.parsetable != null && parsetable.length() > 0) {        printParsingTable(table,this.parsetable);      }    }  }  if (verbose)   log(" === Cup2 Ant Task ended ===",Project.MSG_INFO);}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  Throwable cause=super.getCause();  if (!(cause instanceof IOException))   throw new InvalidObjectException("Cause must be an IOException");}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private int findHeapIdx(int cmid){  if (cmid < map.length) {    int index=map[cmid];    return index;  } else {    return 0;  }}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("DB_MySQL[");  sb.append(m_connectionURL);  try {    StringBuffer logBuffer=new StringBuffer(50);    logBuffer.append("# Connections: ").append(m_ds.getNumConnections());    logBuffer.append(" , # Busy Connections: ").append(m_ds.getNumBusyConnections());    logBuffer.append(" , # Idle Connections: ").append(m_ds.getNumIdleConnections());    logBuffer.append(" , # Orphaned Connections: ").append(m_ds.getNumUnclosedOrphanedConnections());  } catch (  Exception e) {    sb.append("=").append(e.getLocalizedMessage());  }  sb.append("]");  return sb.toString();}  }
class C{  public boolean checkEnvironment(PrintWriter pw){  if (null != pw)   outWriter=pw;  Hashtable hash=getEnvironmentHash();  boolean environmentHasErrors=writeEnvironmentReport(hash);  if (environmentHasErrors) {    logMsg("# WARNING: Potential problems found in your environment!");    logMsg("#    Check any 'ERROR' items above against the Xalan FAQs");    logMsg("#    to correct potential problems with your classes/jars");    logMsg("#    http://xml.apache.org/xalan-j/faq.html");    if (null != outWriter)     outWriter.flush();    return false;  } else {    logMsg("# YAHOO! Your environment seems to be OK.");    if (null != outWriter)     outWriter.flush();    return true;  }}  }
class C{  public final MutableDouble2D addIn(final Double2D other){  x=other.x + x;  y=other.y + y;  return this;}  }
class C{  public LinearBatch(LossFunc loss,double lambda0,double tolerance,Optimizer2 optimizer){  setLoss(loss);  setLambda0(lambda0);  setOptimizer(optimizer);  setTolerance(tolerance);}  }
class C{  public synchronized void removeAllEntailments() throws SailException {  assertWritableConn();  flushStatementBuffers(true,true);  if (quads) {    throw new UnsupportedOperationException();  }  @SuppressWarnings("rawtypes") final IV NULL=null;  database.getAccessPath(NULL,NULL,NULL,InferredSPOFilter.INSTANCE).removeAll();}  }
class C{  private void ensureDirectoryFor(File targetFile) throws BuildException {  File directory=new File(targetFile.getParent());  if (!directory.exists()) {    if (!directory.mkdirs()) {      throw new BuildException("Unable to create directory: " + directory.getAbsolutePath());    }  }}  }
class C{  public static boolean addFilesToExistingZipAapt(File tempApk,ArrayList<File> classesFiles){  ArrayList<String> rmCmd=new ArrayList<String>();  rmCmd.add(S.getAapt());  rmCmd.add("r");  rmCmd.add("-k");  rmCmd.add(tempApk.getAbsolutePath());  for (  File f : classesFiles)   rmCmd.add(f.getName());  String[] cmdRm=new String[rmCmd.size()];  for (int i=0; i < rmCmd.size(); i++)   cmdRm[i]=rmCmd.get(i);  CmdUtils.runCommand(cmdRm);  ArrayList<String> cmds=new ArrayList<String>();  cmds.add(S.getAapt());  cmds.add("a");  cmds.add("-k");  cmds.add(tempApk.getAbsolutePath());  for (  File f : classesFiles)   cmds.add(f.getAbsolutePath());  String[] cmd=new String[cmds.size()];  for (int i=0; i < cmds.size(); i++)   cmd[i]=cmds.get(i);  boolean sucess=(CmdUtils.runCommand(cmd) == 0);  if (!sucess) {    sucess=true;    for (    File f : classesFiles) {      try {        sucess=sucess && ZipTools.isFileinZip(f.getName(),new ZipFile(tempApk));      } catch (      ZipException e) {        e.printStackTrace();      }    }  }  return sucess;}  }
