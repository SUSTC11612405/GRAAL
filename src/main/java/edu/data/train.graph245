class C{  @Override public void close() throws IOException {  Throwable thrown=null;  try {    flush();  } catch (  Throwable e) {    thrown=e;  }  try {    out.close();  } catch (  Throwable e) {    if (thrown == null) {      thrown=e;    }  }  if (thrown != null) {    SneakyThrow.sneakyThrow(thrown);  }}  }
class C{  @org.junit.Test public void testPossesiveRules(){  Bot bot=Bot.createInstance();  Language language=bot.mind().getThought(Language.class);  language.setLearningMode(LearningMode.Disabled);  TextEntry text=bot.awareness().getSense(TextEntry.class);  List<String> output=registerForOutput(text);  text.input("do I like you?");  String response=waitForOutput(output);  assertUnknown(response);  assertKeyword(response,"me");  assertKeyword(response,"you");  text.input("I like you");  response=waitForOutput(output);  assertKeyword(response,"me");  assertKeyword(response,"you");  text.input("do I like you?");  response=waitForOutput(output);  assertTrue(response);  assertKeyword(response,"me");  assertKeyword(response,"you");  text.input("I like you?");  response=waitForOutput(output);  assertTrue(response);  assertKeyword(response,"me");  assertKeyword(response,"you");  text.input("do I like myself?");  response=waitForOutput(output);  assertUncertain(response);  assertKeyword(response,"you");  text.input("I like myself");  response=waitForOutput(output);  assertKeyword(response,"you");  text.input("do I like myself?");  response=waitForOutput(output);  assertTrue(response);  assertKeyword(response,"you");  text.input("I am tall");  response=waitForOutput(output);  assertKeyword(response,"are");  assertKeyword(response,"you");  text.input("am I tall");  response=waitForOutput(output);  assertTrue(response);  assertKeyword(response,"are");  assertKeyword(response,"you");  text.input("You are tall");  response=waitForOutput(output);  assertKeyword(response,"am");  assertKeyword(response,"I");  text.input("Are you tall");  response=waitForOutput(output);  assertTrue(response);  assertKeyword(response,"am");  assertKeyword(response,"I");  bot.shutdown();}  }
class C{  public static boolean isLocalAssetUri(@Nullable Uri uri){  final String scheme=getSchemeOrNull(uri);  return LOCAL_ASSET_SCHEME.equals(scheme);}  }
class C{  public boolean isBaseLanguage(){  return this.equals(getBaseLanguage());}  }
class C{  @Override protected void parse(char[] text,int off,int len){  text[off]=toLower(text[off]);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected int merge_adjacent_actions(production_part rhs_parts[],int len){  int from_loc, to_loc, merge_cnt;  if (rhs_parts == null || len == 0)   return 0;  merge_cnt=0;  to_loc=-1;  for (from_loc=0; from_loc < len; from_loc++) {    if (to_loc < 0 || !rhs_parts[to_loc].is_action() || !rhs_parts[from_loc].is_action()) {      to_loc++;      if (to_loc != from_loc)       rhs_parts[to_loc]=null;    }    if (to_loc != from_loc) {      if (rhs_parts[to_loc] != null && rhs_parts[to_loc].is_action() && rhs_parts[from_loc].is_action()) {        rhs_parts[to_loc]=new action_part(((action_part)rhs_parts[to_loc]).code_string() + ((action_part)rhs_parts[from_loc]).code_string());        merge_cnt++;      } else {        rhs_parts[to_loc]=rhs_parts[from_loc];      }    }  }  return len - merge_cnt;}  }
class C{  protected String doIt() throws Exception {  int[] containers=MContainer.getAllIDs("CM_Container","CM_WebProject_ID=" + p_CM_WebProject_ID,get_TrxName());  for (int i=0; i < containers.length; i++) {    MContainer thisContainer=new MContainer(getCtx(),containers[i],get_TrxName());    thisContainer.reIndex(false);  }  int[] newsChannels=MNewsChannel.getAllIDs("CM_NewsChannel","CM_WebProject_ID=" + p_CM_WebProject_ID,get_TrxName());  for (int i=0; i < newsChannels.length; i++) {    MNewsChannel thisChannel=new MNewsChannel(getCtx(),newsChannels[i],get_TrxName());    thisChannel.reIndex(false);    int[] newsItems=MNewsItem.getAllIDs("CM_NewsItem","CM_NewsChannel_ID=" + newsChannels[i],get_TrxName());    for (int k=0; k < newsItems.length; k++) {      MNewsItem thisItem=new MNewsItem(getCtx(),newsItems[k],get_TrxName());      thisItem.reIndex(false);    }  }  return "finished...";}  }
class C{  public boolean hasListeners(String propertyName){  return this.map.hasListeners(propertyName);}  }
class C{  public final void init(final String current_key){  key=current_key + System.currentTimeMillis();  final File f=new File(temp_dir);  if (!f.exists()) {    f.mkdirs();  }}  }
class C{  public static double[][] diagonal(int m,double c){  if (m < 1)   throw new IllegalArgumentException("First argument must be > 0");  double[][] I=new double[m][m];  for (int i=0; i < I.length; i++)   I[i][i]=c;  return I;}  }
class C{  @Override public void close() throws IOException {synchronized (lock) {    if (encoder != null) {      drainEncoder();      flushBytes(false);      out.close();      encoder=null;      bytes=null;    }  }}  }
class C{  private void formatStmt(ColumnFormat cf) throws ParserException, IOException {  match(FORMAT);  String formatString=lookahead.sval;  matchQuotedString();  cf.setFormat(formatString);  log(pdebug,"Parsed: format -> " + formatString);}  }
class C{  private ResultSetUtil(){  instanceNotAllowed(getClass());}  }
class C{  protected VarDefinitionImpl(){  super();}  }
class C{  public static synchronized void writeSystemFolderFiles(String str){  getlogFileName();  long yourmilliseconds=System.currentTimeMillis();  SimpleDateFormat sdf=new SimpleDateFormat("[HH:mm:ss]");  Date resultdate=new Date(yourmilliseconds);  if (logToStd)   System.out.println(sdf.format(resultdate) + str);  BufferedWriter out;  try {    out=new BufferedWriter(new FileWriter(new File(LOG_FILE.getParentFile().getAbsolutePath() + "/system_files.txt"),true));    out.write(sdf.format(resultdate) + str);    out.newLine();    out.flush();    out.close();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public void detachVolume(String volumeId,String initiator,String[] wwpns,String[] wwnns,String host) throws Exception {  _log.info("CinderApi - start detachVolume");  Gson gson=new Gson();  VolumeDetachRequest volumeDetach=new VolumeDetachRequest();  if (initiator != null) {    volumeDetach.terminateConnection.connector.initiator=initiator;  } else {    if (wwpns != null) {      volumeDetach.terminateConnection.connector.wwpns=Arrays.copyOf(wwpns,wwpns.length);    }    if (null != wwnns) {      volumeDetach.terminateConnection.connector.wwnns=Arrays.copyOf(wwnns,wwnns.length);    }  }  volumeDetach.terminateConnection.connector.host=host;  String volumeDetachmentUri=endPoint.getBaseUri() + String.format(CinderConstants.URI_DETACH_VOLUME,new Object[]{endPoint.getCinderTenantId(),volumeId});  _log.debug("detaching volume from initiator with uri {}",volumeDetachmentUri);  String json=gson.toJson(volumeDetach);  _log.info("detaching volume with body {}",json);  ClientResponse js_response=getClient().postWithHeader(URI.create(volumeDetachmentUri),json);  String s=js_response.getEntity(String.class);  _log.debug("Got the response {}",s);  _log.debug("Response status {}",String.valueOf(js_response.getStatus()));  if (js_response.getStatus() != ClientResponse.Status.ACCEPTED.getStatusCode()) {    if (js_response.getStatus() == ClientResponse.Status.NOT_FOUND.getStatusCode()) {      _log.info("Volume {} is not found on Cinder. It could have been deleted manually.",volumeId);    } else {      throw CinderException.exceptions.volumeDetachFailed(s);    }  }  _log.info("CinderApi - end detachVolume");}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public TaskResourceRep createComputeImageServer(ComputeImageServerCreate createParams){  log.info("Create computeImageServer");  String imageServerName=createParams.getName();  String imageServerAddress=createParams.getImageServerIp();  ArgValidator.checkFieldNotEmpty(imageServerName,"imageServerName");  ArgValidator.checkFieldNotEmpty(imageServerAddress,IMAGESERVER_IP);  checkDuplicateImageServer(null,imageServerAddress,imageServerName);  String bootDir=createParams.getTftpBootDir();  String osInstallAddress=createParams.getImageServerSecondIp();  String username=createParams.getImageServerUser();  String password=createParams.getImageServerPassword();  Integer installTimeout=createParams.getOsInstallTimeout();  Integer sshTimeout=createParams.getSshTimeout();  Integer imageImportTimeout=createParams.getImageImportTimeout();  ArgValidator.checkFieldNotEmpty(bootDir,TFTPBOOTDIR);  ArgValidator.checkFieldNotEmpty(osInstallAddress,IMAGESERVER_SECONDARY_IP);  ArgValidator.checkFieldNotEmpty(username,IMAGESERVER_USER);  ArgValidator.checkFieldNotEmpty(password,IMAGESERVER_PASSWORD);  ArgValidator.checkFieldNotNull(installTimeout,OS_INSTALL_TIMEOUT_MS);  ArgValidator.checkFieldRange(installTimeout,0,2147483,"seconds","osInstallTimeout");  ArgValidator.checkFieldNotNull(sshTimeout,OS_INSTALL_TIMEOUT_MS);  ArgValidator.checkFieldRange(sshTimeout,0,2147483,"seconds","sshTimeout");  ArgValidator.checkFieldNotNull(imageImportTimeout,OS_INSTALL_TIMEOUT_MS);  ArgValidator.checkFieldRange(installTimeout,0,2147483,"seconds","imageImportTimeout");  ComputeImageServer imageServer=new ComputeImageServer();  imageServer.setId(URIUtil.createId(ComputeImageServer.class));  imageServer.setLabel(imageServerName);  imageServer.setImageServerIp(imageServerAddress);  imageServer.setTftpBootDir(bootDir);  imageServer.setImageServerUser(username);  imageServer.setImageServerPassword(password);  imageServer.setOsInstallTimeoutMs(new Long(TimeUnit.SECONDS.toMillis(installTimeout)).intValue());  imageServer.setImageServerSecondIp(osInstallAddress);  imageServer.setImageDir(_coordinator.getPropertyInfo().getProperty(IMAGE_SERVER_IMAGEDIR));  imageServer.setSshTimeoutMs(new Long(TimeUnit.SECONDS.toMillis(sshTimeout)).intValue());  imageServer.setImageImportTimeoutMs(new Long(TimeUnit.SECONDS.toMillis(imageImportTimeout)).intValue());  auditOp(OperationTypeEnum.IMAGESERVER_VERIFY_IMPORT_IMAGES,true,null,imageServer.getId().toString(),imageServer.getImageServerIp());  _dbClient.createObject(imageServer);  ArrayList<AsyncTask> tasks=new ArrayList<AsyncTask>(1);  String taskId=UUID.randomUUID().toString();  AsyncTask task=new AsyncTask(ComputeImageServer.class,imageServer.getId(),taskId);  tasks.add(task);  Operation op=new Operation();  op.setResourceType(ResourceOperationTypeEnum.CREATE_VERIFY_COMPUTE_IMAGE_SERVER);  _dbClient.createTaskOpStatus(ComputeImageServer.class,imageServer.getId(),taskId,op);  ImageServerController controller=getController(ImageServerController.class,null);  controller.verifyImageServerAndImportExistingImages(task,op.getName());  return toTask(imageServer,taskId,op);}  }
class C{  public Military(){  super();}  }
class C{  public AutoColorCorrelogram(int[] distanceSet){  this(DEFAULT_NUMBER_COLORS,distanceSet,null);}  }
class C{  public static <T>SuperclassIterable<T> of(Class<T> type){  return new SuperclassIterable<>(type,false);}  }
class C{  public synchronized void removePropertyChangeListener(PropertyChangeListener l){  m_propertyChangeListeners.removePropertyChangeListener(l);}  }
class C{  @Override public final void check(final Predicate<A> property){  final TheoryRunner<A,A> qc=new TheoryRunner<>(this.state.get(),this.ps,this.assumptions,null,this.ps);  qc.check(property);}  }
class C{  @Override public void draw(Canvas canvas){  PointF detectLeftPosition=mLeftPosition;  PointF detectRightPosition=mRightPosition;  if ((detectLeftPosition == null) || (detectRightPosition == null)) {    return;  }  PointF leftPosition=new PointF(translateX(detectLeftPosition.x),translateY(detectLeftPosition.y));  PointF rightPosition=new PointF(translateX(detectRightPosition.x),translateY(detectRightPosition.y));  float distance=(float)Math.sqrt(Math.pow(rightPosition.x - leftPosition.x,2) + Math.pow(rightPosition.y - leftPosition.y,2));  float eyeRadius=EYE_RADIUS_PROPORTION * distance;  float irisRadius=IRIS_RADIUS_PROPORTION * distance;  PointF leftIrisPosition=mLeftPhysics.nextIrisPosition(leftPosition,eyeRadius,irisRadius);  drawEye(canvas,leftPosition,eyeRadius,leftIrisPosition,irisRadius,mLeftOpen);  PointF rightIrisPosition=mRightPhysics.nextIrisPosition(rightPosition,eyeRadius,irisRadius);  drawEye(canvas,rightPosition,eyeRadius,rightIrisPosition,irisRadius,mRightOpen);}  }
class C{  public AssertionError(char detailMessage){  this(String.valueOf(detailMessage));}  }
class C{  public static Script createInputScript(@Nullable TransactionSignature signature,ECKey pubKey){  byte[] pubkeyBytes=pubKey.getPubKey();  byte[] sigBytes=signature != null ? signature.encodeToBitcoin() : new byte[]{};  return new ScriptBuilder().data(sigBytes).data(pubkeyBytes).build();}  }
class C{  public static TrapCodeOperand StoreCheck(){  return new TrapCodeOperand((byte)RuntimeEntrypoints.TRAP_STORE_CHECK);}  }
class C{  @Override public boolean wasNull() throws SQLException {  return getOpenResultSet().wasNull();}  }
class C{  void prepareDisplayTaskFor(ImageAware imageAware,String memoryCacheKey){  cacheKeysForImageAwares.put(imageAware.getId(),memoryCacheKey);}  }
class C{  public static Color toSwtColor(final Device device,final java.awt.Paint paint){  java.awt.Color color;  if (paint instanceof java.awt.Color) {    color=(java.awt.Color)paint;  } else {    try {      throw new Exception("only color is supported at present... " + "setting paint to uniform black color");    } catch (    final Exception e) {      e.printStackTrace();      color=new java.awt.Color(0,0,0);    }  }  return new org.eclipse.swt.graphics.Color(device,color.getRed(),color.getGreen(),color.getBlue());}  }
class C{  public void refreshSyntaxHighlighting(){  modelChanged();}  }
class C{  private static boolean eq(int v1,int v2){  return v1 == v2;}  }
class C{  private boolean isValid(BusinessTransactionDefinition businessTransactions){  if (null == getValidationErrorStates(businessTransactions)) {    return true;  }  for (  ValidationState state : getValidationErrorStates(businessTransactions)) {    if (!state.isValid()) {      return false;    }  }  return true;}  }
class C{  private String translateTriggerActionOrientation(String sourceVendorName,String targetVendorName,String actionOrientation){  if (actionOrientation == null)   actionOrientation=new String();  return m_interfaces.get(getDBVendorID(targetVendorName)).translateTriggerActionOrientation(sourceVendorName.toUpperCase(),actionOrientation.toUpperCase());}  }
class C{  private boolean basicGetForCompactor(long offsetInOplog,boolean bitOnly,int valueLength,byte userBits,BytesAndBitsForCompactor wrapper){  if (EntryBits.isAnyInvalid(userBits) || EntryBits.isTombstone(userBits) || bitOnly|| valueLength == 0) {    if (EntryBits.isInvalid(userBits)) {      wrapper.setData(DiskEntry.INVALID_BYTES,userBits,DiskEntry.INVALID_BYTES.length,false);    } else     if (EntryBits.isTombstone(userBits)) {      wrapper.setData(DiskEntry.TOMBSTONE_BYTES,userBits,DiskEntry.TOMBSTONE_BYTES.length,false);    } else {      wrapper.setData(DiskEntry.LOCAL_INVALID_BYTES,userBits,DiskEntry.LOCAL_INVALID_BYTES.length,false);    }  } else {    try {synchronized (this.crf) {        final long readPosition=offsetInOplog;        if ((readPosition + valueLength) > this.crf.bytesFlushed && !this.closed) {          flushAll();        }        final long writePosition=(this.doneAppending) ? this.crf.bytesFlushed : this.crf.raf.getFilePointer();        if ((readPosition + valueLength) > writePosition) {          throw new DiskAccessException(LocalizedStrings.Oplog_TRIED_TO_SEEK_TO_0_BUT_THE_FILE_LENGTH_IS_1_OPLOG_FILE_OBJECT_USED_FOR_READING_2.toLocalizedString(new Object[]{readPosition + valueLength,writePosition,this.crf.raf}),getParent().getName());        } else         if (readPosition < 0) {          throw new DiskAccessException(LocalizedStrings.Oplog_CANNOT_FIND_RECORD_0_WHEN_READING_FROM_1.toLocalizedString(new Object[]{Long.valueOf(offsetInOplog),this.diskFile.getPath()}),getParent().getName());        }        try {          this.crf.raf.seek(readPosition);          this.stats.incOplogSeeks();          byte[] valueBytes=null;          if (wrapper.getBytes().length < valueLength) {            valueBytes=new byte[valueLength];            this.crf.raf.readFully(valueBytes);          } else {            valueBytes=wrapper.getBytes();            this.crf.raf.readFully(valueBytes,0,valueLength);          }          this.stats.incOplogReads();          wrapper.setData(valueBytes,userBits,valueLength,true);        }  finally {          if (!this.doneAppending) {            this.crf.raf.seek(writePosition);            this.stats.incOplogSeeks();          }        }      }    } catch (    IOException ex) {      throw new DiskAccessException(LocalizedStrings.Oplog_FAILED_READING_FROM_0_OPLOG_DETAILS_1_2_3_4_5_6.toLocalizedString(new Object[]{this.diskFile.getPath(),Long.valueOf(this.oplogId),Long.valueOf(offsetInOplog),Long.valueOf(this.crf.currSize),Long.valueOf(this.crf.bytesFlushed),Boolean.valueOf(false),Boolean.valueOf(false)}),ex,getParent().getName());    }catch (    IllegalStateException ex) {      checkClosed();      throw ex;    }  }  return true;}  }
class C{  public URI routerUri(){  return clientConfig.routerUri();}  }
class C{  public JRadioButtonMenuItem(){  this(null,null,false);}  }
class C{  public boolean checkPoint(double[] p){  boolean modified=false;  for (int i=0; i < dim; i++) {    if (p[i] < f.getLowerBound(i)) {      p[i]=f.getLowerBound(i);      modified=true;    }    if (p[i] > f.getUpperBound(i)) {      p[i]=f.getUpperBound(i);      modified=true;    }  }  return modified;}  }
class C{  public String sqlObject_createView(String sourceVendorName,String sourceSchemaName,String targetVendorName,String catalogName,String schemaName,String viewName,String viewDefinition,boolean isForceStub){  viewName=normalizeIdentifier(targetVendorName,viewName);  if (isForceStub)   viewDefinition=m_interfaces.get(getDBVendorID(targetVendorName)).translateViewDefinitionStub(sourceVendorName.toUpperCase(),viewDefinition); else   viewDefinition=translateViewDefinition(sourceVendorName,sourceSchemaName,targetVendorName,schemaName,viewDefinition);  return m_interfaces.get(getDBVendorID(targetVendorName)).sqlObject_createView(catalogName,schemaName,viewName,viewDefinition);}  }
class C{  public void testCase8(){  byte aBytes[]={1,100,56,7,98,-1,39,-128,127,5,6,7,8,9};  byte bBytes[]={15,48,-29,7,98,-1,39,-128};  int aSign=1;  int bSign=-1;  byte rBytes[]={-24,-116,-12,-79,-36,11};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.divide(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  protected void createContainer(IPath pathname){  if (directoryEntryCache.containsKey(pathname)) {    return;  }  ZipEntry parent;  if (pathname.segmentCount() == 1) {    parent=root;  } else {    parent=(ZipEntry)directoryEntryCache.get(pathname.removeLastSegments(1));  }  ZipEntry newEntry=new ZipEntry(pathname.toString());  directoryEntryCache.put(pathname,newEntry);  addToChildren(parent,newEntry);}  }
class C{  public void connect(jmri.jmrix.loconet.LnTrafficController t){  if (t != null) {    t.addLocoNetListener(~0,this);  }}  }
class C{  public T forAttr(String value){  return attr("for",value);}  }
class C{  public void selectOperators(List<Operator> ops){  if (nodeHeightPrior == TreePriorType.CONSTANT) {    ops.add(getOperator("constant.popSize"));  } else   if (nodeHeightPrior == TreePriorType.EXPONENTIAL) {    ops.add(getOperator("exponential.popSize"));    if (parameterization == TreePriorParameterizationType.GROWTH_RATE) {      ops.add(getOperator("exponential.growthRate"));    } else {      ops.add(getOperator("exponential.doublingTime"));    }  } else   if (nodeHeightPrior == TreePriorType.LOGISTIC) {    ops.add(getOperator("logistic.popSize"));    if (parameterization == TreePriorParameterizationType.GROWTH_RATE) {      ops.add(getOperator("logistic.growthRate"));    } else {      ops.add(getOperator("logistic.doublingTime"));    }    ops.add(getOperator("logistic.t50"));  } else   if (nodeHeightPrior == TreePriorType.EXPANSION) {    ops.add(getOperator("expansion.popSize"));    if (parameterization == TreePriorParameterizationType.GROWTH_RATE) {      ops.add(getOperator("expansion.growthRate"));    } else {      ops.add(getOperator("expansion.doublingTime"));    }    ops.add(getOperator("expansion.ancestralProportion"));  } else   if (nodeHeightPrior == TreePriorType.SKYLINE) {    ops.add(getOperator("skyline.popSize"));    ops.add(getOperator("skyline.groupSize"));  } else   if (nodeHeightPrior == TreePriorType.GMRF_SKYRIDE) {    ops.add(getOperator("gmrfGibbsOperator"));  } else   if (nodeHeightPrior == TreePriorType.SKYGRID) {    ops.add(getOperator("gmrfSkyGridGibbsOperator"));    ops.add(getOperator("skygrid.precision"));  } else   if (nodeHeightPrior == TreePriorType.EXTENDED_SKYLINE) {    ops.add(getOperator("demographic.populationMean"));    ops.add(getOperator("demographic.popSize"));    ops.add(getOperator("demographic.indicators"));    ops.add(getOperator("demographic.scaleActive"));  } else   if (nodeHeightPrior == TreePriorType.YULE || nodeHeightPrior == TreePriorType.YULE_CALIBRATION) {    ops.add(getOperator("yule.birthRate"));  } else   if (nodeHeightPrior == TreePriorType.BIRTH_DEATH || nodeHeightPrior == TreePriorType.BIRTH_DEATH_INCOMPLETE_SAMPLING) {    ops.add(getOperator(BirthDeathModelParser.MEAN_GROWTH_RATE_PARAM_NAME));    ops.add(getOperator(BirthDeathModelParser.RELATIVE_DEATH_RATE_PARAM_NAME));    if (nodeHeightPrior == TreePriorType.BIRTH_DEATH_INCOMPLETE_SAMPLING)     ops.add(getOperator(BirthDeathModelParser.BIRTH_DEATH + "." + BirthDeathModelParser.SAMPLE_PROB));  } else   if (nodeHeightPrior == TreePriorType.BIRTH_DEATH_SERIAL_SAMPLING) {    ops.add(getOperator(BirthDeathSerialSamplingModelParser.BDSS + "." + BirthDeathSerialSamplingModelParser.LAMBDA));    ops.add(getOperator(BirthDeathSerialSamplingModelParser.BDSS + "." + BirthDeathSerialSamplingModelParser.RELATIVE_MU));    ops.add(getOperator(BirthDeathSerialSamplingModelParser.BDSS + "." + BirthDeathSerialSamplingModelParser.PSI));    ops.add(getOperator(BirthDeathSerialSamplingModelParser.BDSS + "." + BirthDeathSerialSamplingModelParser.ORIGIN));  } else   if (nodeHeightPrior == TreePriorType.BIRTH_DEATH_BASIC_REPRODUCTIVE_NUMBER) {    ops.add(getOperator(BirthDeathEpidemiologyModelParser.ORIGIN));    ops.add(getOperator(BirthDeathEpidemiologyModelParser.R0));    ops.add(getOperator(BirthDeathEpidemiologyModelParser.RECOVERY_RATE));    ops.add(getOperator(BirthDeathEpidemiologyModelParser.SAMPLING_PROBABILITY));  }}  }
class C{  @Override public FetchStatus checkFilter(URI uri){  if (uri == null) {    return FetchStatus.OUT_OF_SCOPE;  }  String otherScheme=normalisedScheme(uri.getRawScheme());  if (port != normalisedPort(otherScheme,uri.getPort())) {    return FetchStatus.OUT_OF_SCOPE;  }  if (!scheme.equals(otherScheme)) {    return FetchStatus.OUT_OF_SCOPE;  }  if (!hasSameHost(uri)) {    return FetchStatus.OUT_OF_SCOPE;  }  if (!startsWith(uri.getRawPath(),path)) {    return FetchStatus.OUT_OF_SCOPE;  }  return FetchStatus.VALID;}  }
class C{  public static <T>void assertNotNull(T expression,String message){  Assert.notNull(expression,message);}  }
class C{  public Builder add(String fieldName,boolean[] values){  intent.putExtra(fieldName,values);  return this;}  }
class C{  public void close(){  if (parent != null) {    parent.releaseBytes(reservation);  }}  }
class C{  public static String escape(String input){  return escape(input,Characters.values());}  }
class C{  void decodeAttributeBody(byte[] attributeValue,char offset,char length) throws StunException {  data=new byte[length];  System.arraycopy(attributeValue,offset,data,0,length);}  }
class C{  private void retireCurrentFile() throws IOException {  Preconditions.checkState(currentFile.isPresent());  File fileToRoll=new File(currentFile.get().getFile().getAbsolutePath());  currentFile.get().getDeserializer().close();  if (fileToRoll.lastModified() == currentFile.get().getLastModified()) {    logger.info("File:{} has not been modified since being read.",fileToRoll.getName());  }  if (fileToRoll.length() == currentFile.get().getLength()) {    logger.info("File:{} has not changed size since being read.",fileToRoll.getName());  }  if (deletePolicy.equalsIgnoreCase(DeletePolicy.NEVER.name())) {    rollCurrentFile(fileToRoll);  } else   if (deletePolicy.equalsIgnoreCase(DeletePolicy.IMMEDIATE.name())) {    deleteCurrentFile(fileToRoll);  } else {    throw new IllegalArgumentException("Unsupported delete policy: " + deletePolicy);  }}  }
class C{  public static Map ordinalMap(TupleSet tuples,String field){  return ordinalMap(tuples,field,DefaultLiteralComparator.getInstance());}  }
class C{  public static void putIntVolatile(Object obj,long off,int val){  UNSAFE.putIntVolatile(obj,off,val);}  }
class C{  public SwipeListView(Context context,int swipeBackView,int swipeFrontView){  super(context);  this.swipeFrontView=swipeFrontView;  this.swipeBackView=swipeBackView;}  }
class C{  public static CommandResult execCommand(String command,boolean isRoot){  return execCommand(new String[]{command},isRoot,true);}  }
class C{  protected N4MethodDeclarationImpl(){  super();}  }
class C{  public <T>T[] toArray(T[] vec){  return elems.toArray(vec);}  }
class C{  private RPRecommendation buildSourceRecommendation(String associatedStorageSystem,VirtualArray varray,VirtualPool vpool,ProtectionSystem ps,StoragePool sourcePool,VirtualPoolCapabilityValuesWrapper capabilities,int satisfiedSourceVolCount,PlacementStatus placementStat,Volume vpoolChangeVolume,boolean isMPStandby){  String sourceInternalSiteName=ProtectionSystem.getAssociatedStorageSystemSiteName(associatedStorageSystem);  URI sourceStorageSytemUri=ConnectivityUtil.findStorageSystemBySerialNumber(ProtectionSystem.getAssociatedStorageSystemSerialNumber(associatedStorageSystem),dbClient,StorageSystemType.BLOCK);  if (!isRpSiteConnectedToVarray(sourceStorageSytemUri,ps.getId(),sourceInternalSiteName,varray)) {    _log.info(String.format("RP Placement: Disqualified RP site [%s] because its initiators are not in a network configured " + "for use by the virtual array [%s]",sourceInternalSiteName,varray.getLabel()));    return null;  }  URI storageSystemUri=ConnectivityUtil.findStorageSystemBySerialNumber(ProtectionSystem.getAssociatedStorageSystemSerialNumber(associatedStorageSystem),dbClient,StorageSystemType.BLOCK);  StorageSystem storageSystem=dbClient.queryObject(StorageSystem.class,storageSystemUri);  String type=storageSystem.getSystemType();  RPRecommendation rpRecommendation=buildRpRecommendation(associatedStorageSystem,varray,vpool,sourcePool,capabilities,satisfiedSourceVolCount,sourceInternalSiteName,sourceStorageSytemUri,type,ps);  String rpPlacementType="Source recommendation ";  if (isMPStandby) {    rpPlacementType="Standby recommendation";  }  _log.info(String.format("RP Placement : %s %s %n",rpPlacementType,rpRecommendation.toString(dbClient,ps)));  return rpRecommendation;}  }
class C{  public static String escapeMetaDataPattern(String pattern){  if (pattern == null || pattern.length() == 0) {    return pattern;  }  return replaceAll(pattern,"\\","\\\\");}  }
class C{  public Configuration(Map<String,Object> properties){  this.filename=null;  for (  Map.Entry<String,Object> entry : properties.entrySet()) {    prop.put(entry.getKey(),String.valueOf(entry.getValue()));  }}  }
class C{  public static void main(String[] args){  weka.gui.GenericObjectEditor.determineClasses();  if (System.getSecurityManager() == null) {    System.setSecurityManager(new RMISecurityManager());  }  int port=1099;  InetAddress localhost=null;  try {    localhost=InetAddress.getLocalHost();    System.err.println("Host name : " + localhost.getHostName());  } catch (  Exception ex) {    ex.printStackTrace();  }  String name;  if (localhost != null) {    name=localhost.getHostName();  } else {    name="localhost";  }  try {    String portOption=Utils.getOption("p",args);    if (!portOption.equals("")) {      port=Integer.parseInt(portOption);    }  } catch (  Exception ex) {    System.err.println("Usage : -p <port>");  }  if (port != 1099) {    name=name + ":" + port;  }  name="//" + name + "/RemoteEngine";  try {    Compute engine=new RemoteEngine(name);    try {      Naming.rebind(name,engine);      System.out.println("RemoteEngine bound in RMI registry");    } catch (    RemoteException ex) {      System.err.println("Attempting to start RMI registry on port " + port + "...");      java.rmi.registry.LocateRegistry.createRegistry(port);      Naming.bind(name,engine);      System.out.println("RemoteEngine bound in RMI registry");    }  } catch (  Exception e) {    System.err.println("RemoteEngine exception: " + e.getMessage());    e.printStackTrace();  }}  }
class C{  public ArrayExpression(ClassNode elementType,List<Expression> expressions){  this(elementType,expressions,null);}  }
class C{  private boolean isSeedHeartbeatValid(){  boolean isSeed=false;  for (  ServerHeartbeat server : _serverSelf.getCluster().getSeedServers()) {    if (server.port() > 0) {      isSeed=true;      if (server.isUp()) {        return true;      }    }  }  return !isSeed;}  }
class C{  public static float cuCabs(cuComplex x){  float p=cuCreal(x);  float q=cuCimag(x);  float r;  if (p == 0)   return q;  if (q == 0)   return p;  p=(float)Math.sqrt(p);  q=(float)Math.sqrt(q);  if (p < q) {    r=p;    p=q;    q=r;  }  r=q / p;  return p * (float)Math.sqrt(1.0f + r * r);}  }
class C{  public void onAuthenticationFailure(byte[] userName){}  }
class C{  public Matches(){  super("text_information.matches");}  }
class C{  @Override public int hashCode(){  return Objects.hashCode(name,url,duration);}  }
class C{  public IndTestDrton(DataSet dataSet,double alpha){  if (!(dataSet.isContinuous())) {    throw new IllegalArgumentException("Data set must be continuous.");  }  this.covMatrix=DataUtils.covarianceNonparanormalDrton(dataSet);  this._covMatrix=covMatrix.getMatrix();  List<Node> nodes=covMatrix.getVariables();  this.variables=Collections.unmodifiableList(nodes);  this.indexMap=indexMap(variables);  this.nameMap=mapNames(variables);  setAlpha(alpha);  this.dataSet=DataUtils.center(this.dataSet);}  }
class C{  protected void fireGraphEvent(Table t,int first,int last,int col,int type){  String table=(t == getNodeTable() ? NODES : EDGES);  if (type != EventConstants.UPDATE) {    fireTupleEvent(t,first,last,type);  }  if (!m_listeners.isEmpty()) {    Object[] lstnrs=m_listeners.getArray();    for (int i=0; i < lstnrs.length; ++i) {      ((GraphListener)lstnrs[i]).graphChanged(this,table,first,last,col,type);    }  }}  }
class C{  public void addLoadingSpinnerRotation(float rotation){  mLoadingSpinnerRotationDegrees=(mLoadingSpinnerRotationDegrees + rotation) % 1080;}  }
class C{  protected JClass loadClass(String name){  if (name.startsWith("java.") || name.startsWith("java/")) {    return getStaticClassLoader().forName(name);  }  String classPath=name.replace('.','/') + ".class";  URL url=_loader.getResource(classPath);  if (url != null) {    JavaClass jClass=new JavaClass(this);    jClass.setURL(url);    jClass.setThisClass(name.replace('.','/'));    return jClass;  }  return null;}  }
class C{  public boolean saveCurrentConfiguration(){  if (currentConfig.toString() == null) {    return (true);  }  int answer=JOptionPane.showConfirmDialog(null,"Save current configuration?","Save Configuration",JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE,Icons.getImageIcon("dert_24.png"));  if (answer == JOptionPane.CANCEL_OPTION) {    return (false);  } else   if (answer == JOptionPane.NO_OPTION) {    return (true);  }  return (saveCurrentConfigurationAs(false));}  }
class C{  public String toString(){  return "(" + this.x + ", "+ this.y+ ", "+ this.z+ ", "+ this.angle+ ")";}  }
class C{  @Override public String globalInfo(){  return "Converts the given set of predictor variables into a kernel matrix. " + "The class value remains unchangedm, as long as the preprocessing " + "filter doesn't change it.\n"+ "By default, the data is preprocessed with the Center filter, but the "+ "user can choose any filter (NB: one must be careful that the filter "+ "does not alter the class attribute unintentionally). With "+ "weka.filters.AllFilter the preprocessing gets disabled.\n\n"+ "For more information regarding preprocessing the data, see:\n\n"+ getTechnicalInformation().toString();}  }
class C{  public static void recordBourneFileEvent(DbClient dbClient,URI id,String evtType,Operation.Status status,String desc) throws Exception {}  }
class C{  public void reset(){  super.reset();  H1=0x6a09e667f3bcc908L;  H2=0xbb67ae8584caa73bL;  H3=0x3c6ef372fe94f82bL;  H4=0xa54ff53a5f1d36f1L;  H5=0x510e527fade682d1L;  H6=0x9b05688c2b3e6c1fL;  H7=0x1f83d9abfb41bd6bL;  H8=0x5be0cd19137e2179L;}  }
class C{  public static void cursorStringToContentValuesIfPresent(Cursor cursor,ContentValues values,String column){  final int index=cursor.getColumnIndex(column);  if (index != -1 && !cursor.isNull(index)) {    values.put(column,cursor.getString(index));  }}  }
class C{  @Override public void unbindAppearEvent(WXComponent component){  setWatch(AppearanceHelper.APPEAR,component,false);}  }
class C{  private void search(String string){  if (!vis().isEmpty()) {    vis().runLater(null);  }}  }
class C{  public void testBug1901() throws Exception {  try {    this.stmt.executeUpdate("DROP TABLE IF EXISTS testBug1901");    this.stmt.executeUpdate("CREATE TABLE testBug1901 (field1 VARCHAR(255))");    this.stmt.executeUpdate("INSERT INTO testBug1901 VALUES ('aaa')");    this.rs=this.stmt.executeQuery("SELECT field1 FROM testBug1901");    this.rs.next();    Clob valueAsClob=this.rs.getClob(1);    Blob valueAsBlob=this.rs.getBlob(1);    PreparedStatement pStmt=this.conn.prepareStatement("INSERT INTO testBug1901 VALUES (?)");    pStmt.setObject(1,valueAsClob,java.sql.Types.CLOB,0);    pStmt.executeUpdate();    pStmt.setObject(1,valueAsBlob,java.sql.Types.BLOB,0);    pStmt.executeUpdate();  }  finally {    this.stmt.executeUpdate("DROP TABLE IF EXISTS testBug1901");  }}  }
class C{  public static void notNull(Object obj,String msg){  if (obj == null)   throw new IllegalArgumentException(msg);}  }
class C{  protected void afterBuildFinished(Notification notification,BuildTaskDescriptor descriptor,SubscriptionHandler<String> buildStatusHandler,SubscriptionHandler<String> buildOutputHandler,final String successMessage,final String errorMessage,final String prefixConsole,BuildFinishedCallback buildFinishedCallback){  try {    messageBus.unsubscribe(BuilderExtension.BUILD_STATUS_CHANNEL + descriptor.getTaskId(),buildStatusHandler);  } catch (  Exception e) {    Log.error(BuilderAgent.class,e);  }  try {    messageBus.unsubscribe(BuilderExtension.BUILD_OUTPUT_CHANNEL + descriptor.getTaskId(),buildOutputHandler);  } catch (  Exception e) {    Log.error(BuilderAgent.class,e);  }  if (descriptor.getStatus() == BuildStatus.SUCCESSFUL) {    buildSuccessful(notification,successMessage,prefixConsole);  } else   if (descriptor.getStatus() == BuildStatus.FAILED) {    notification.setMessage(errorMessage);    notification.setStatus(FINISHED);    notification.setType(ERROR);    console.print(prefixConsole + "::" + errorMessage);  }  importZipResult(descriptor,buildFinishedCallback);}  }
class C{  public boolean releaseAllWorkflowLocks(Workflow workflow){  if (workflow == null) {    return true;  }  boolean releasedLocks=_ownerLocker.releaseLocks(workflow.getWorkflowURI().toString());  if (!releasedLocks) {    _log.error("Unable to release Workflow locks for workflow: " + workflow.getWorkflowURI().toString());  }  return releasedLocks;}  }
class C{  public void addCc(Cc cc){  getCcs().add(cc);}  }
class C{  public static String extendedUncapitalize(String str){  int index=0, length=str.length();  while ((index < length) && Character.isUpperCase(str.charAt(index)) && ((index == 0) || (index == length - 1) || !Character.isLowerCase(str.charAt(index + 1)))) {    ++index;  }  return str.substring(0,index).toLowerCase() + str.substring(index);}  }
class C{  public Path createSrc(){  if (src == null) {    src=new Path(getProject());  }  return src.createPath();}  }
class C{  public GOCDataBuilder withCreatedAt(final long smCreatedAtc){  this.smCreatedAtc=smCreatedAtc;  return this;}  }
class C{  @Deprecated public static int detectSeason(String relativePath){  LOGGER.info("detect season from path " + relativePath);  int season=-1;  Pattern regex=Pattern.compile("(?i)(?:s|season|staffel)[\\s]*(\\d+)");  Matcher m=regex.matcher(relativePath);  if (m.find()) {    try {      season=Integer.parseInt(m.group(1));    } catch (    NumberFormatException nfe) {    }  }  LOGGER.debug("returning result " + season);  return season;}  }
class C{  private static void checkSuppressedExceptions(Throwable[] suppressedExceptions,int bitMap){  if (suppressedExceptions.length != Integer.bitCount(bitMap))   throw new AssertionError("Expected " + Integer.bitCount(bitMap) + " suppressed exceptions, got "+ suppressedExceptions.length);  int prevCloseFailExceptionId=Integer.MAX_VALUE;  for (  Throwable t : suppressedExceptions) {    int id=((Resource.CloseFailException)t).resourceId();    if ((1 << id & bitMap) == 0)     throw new AssertionError("Unexpected suppressed CloseFailException: " + id);    if (id > prevCloseFailExceptionId)     throw new AssertionError("Suppressed CloseFailException" + id + " followed "+ prevCloseFailExceptionId);  }}  }
class C{  public int distanceFrom(Coding that){  int diffdel=this.del - that.del;  if (diffdel < 0)   diffdel=-diffdel;  int diffS=this.S - that.S;  if (diffS < 0)   diffS=-diffS;  int diffB=this.B - that.B;  if (diffB < 0)   diffB=-diffB;  int diffHL;  if (this.H == that.H) {    diffHL=0;  } else {    int thisHL=this.getHL();    int thatHL=that.getHL();    thisHL*=thisHL;    thatHL*=thatHL;    if (thisHL > thatHL)     diffHL=ceil_lg2(1 + (thisHL - 1) / thatHL); else     diffHL=ceil_lg2(1 + (thatHL - 1) / thisHL);  }  int norm=5 * (diffdel + diffS + diffB) + diffHL;  assert (norm != 0 || this.compareTo(that) == 0);  return norm;}  }
class C{  public static void selectNodes(final ZyGraph graph,final CTag tag){  selectNodes(graph,Sets.newHashSet(tag),false);}  }
class C{  protected void exit(int code){  System.exit(code);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:45.507 -0500",hash_original_method="AB6DAC74FF8B2E5B9FEB974F6DCFF3D6",hash_generated_method="87BDA9A9972ECA7310DB39F217B483FA") public void connect(AsyncService srcAsyncService,Messenger dstMessenger){  connect(srcAsyncService,srcAsyncService.getHandler(),dstMessenger);}  }
class C{  public boolean contains(double element){  this.sort();  return values.contains(element);}  }
class C{  public EqualityExpression createEqualityExpression(){  EqualityExpressionImpl equalityExpression=new EqualityExpressionImpl();  return equalityExpression;}  }
class C{  public Scope thatDefines(String name){  boolean isThis="this".equals(name);  boolean isArguments="arguments".equals(name);  boolean isThisOrArguments=isThis || isArguments;  for (Scope s=this; s != null; s=s.parent) {    if (s.locals.containsKey(name)) {      return s;    }    if (isThisOrArguments) {      if (s.type == ScopeType.FUNCTION) {        return s;      }      if (s.type == ScopeType.PROGRAM && isThis) {        return s;      }    }  }  return null;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void processSuccessMsg(){  errors.clear();  if (onlinePaymentReceiptHeader.getReceiptnumber() != null && onlinePaymentReceiptHeader.getReceiptnumber().length() > 0)   receiptResponse="SUCCESS|" + onlinePaymentReceiptHeader.getReceiptnumber(); else {    onlinePaymentReceiptHeader=receiptHeaderService.createOnlineSuccessPayment(onlinePaymentReceiptHeader,paymentResponse.getTxnDate(),paymentResponse.getTxnReferenceNo(),paymentResponse.getTxnAmount(),paymentResponse.getAuthStatus(),null,null);    receiptResponse="SUCCESS|" + onlinePaymentReceiptHeader.getReceiptnumber();  }}  }
class C{  public SlidingActivityHelper(Activity activity){  mActivity=activity;}  }
class C{  public static final int numberOfState(String[] statuses) throws IllegalArgumentException {  int[] statusNumbers=new int[statuses.length];  for (int i=0; i < statuses.length; i++) {    statusNumbers[i]=numberOfProverStatus(i,statuses[i]);  }  return numberOfState(statusNumbers);}  }
class C{  public static InputStream limit(InputStream in,long limit){  return new LimitedInputStream(in,limit);}  }
class C{  @Override public int hashCode(){  return 32;}  }
class C{  public DateMidnight(long instant,Chronology chronology){  super(instant,chronology);}  }
class C{  public FeatureSet combine(final FeatureSet other){  final Set<Feature> enabled=new HashSet<>(this.enabled);  enabled.addAll(other.enabled);  final Set<Feature> disabled=new HashSet<>(this.disabled);  disabled.addAll(other.disabled);  return new FeatureSet(enabled,disabled);}  }
class C{  public boolean isReport(){  Object oo=get_Value(COLUMNNAME_IsReport);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void onNetDisConnect(){}  }
class C{  @Override public Eval<T> reduce(final T identity,final BinaryOperator<T> accumulator){  return Eval.later(null);}  }
class C{  public static <T>List<List<List<T>>> group3(List<T> list){  List<List<List<T>>> result=new ArrayList<>();  for (  List<T> combinationOf2 : combinations(list,2)) {    List<T> r=remaining(list,combinationOf2);    for (    List<T> combinationOf3 : combinations(r,3)) {      result.add(Stream.of(combinationOf2,combinationOf3,remaining(r,combinationOf3)).collect(toList()));    }  }  return result;}  }
class C{  private int readFrameType(final Object[] frame,final int index,int v,final char[] buf,final Label[] labels){  int type=b[v++] & 0xFF;switch (type) {case 0:    frame[index]=Opcodes.TOP;  break;case 1:frame[index]=Opcodes.INTEGER;break;case 2:frame[index]=Opcodes.FLOAT;break;case 3:frame[index]=Opcodes.DOUBLE;break;case 4:frame[index]=Opcodes.LONG;break;case 5:frame[index]=Opcodes.NULL;break;case 6:frame[index]=Opcodes.UNINITIALIZED_THIS;break;case 7:frame[index]=readClass(v,buf);v+=2;break;default :frame[index]=readLabel(readUnsignedShort(v),labels);v+=2;}return v;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  int progress=0;  int a;  int filterSize=3;  double n;  double sum;  int dX[];  int dY[];  int midPoint;  int numPixelsInFilter;  double[] filterShape;  boolean reflectAtBorders=true;  double centreValue=0;  double neighbourhoodDist=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  neighbourhoodDist=Double.parseDouble(args[2]);  if (inputHeader.isEmpty() || outputHeader.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    DEM.isReflectedAtEdges=reflectAtBorders;    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("grey.pal");    filterSize=(int)(neighbourhoodDist / ((DEM.getCellSizeX() + DEM.getCellSizeY()) / 2));    if (Math.floor(filterSize / 2d) == (filterSize / 2d)) {      filterSize++;    }    numPixelsInFilter=filterSize * filterSize;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPoint=(int)Math.floor(filterSize / 2);    double aSqr=midPoint * midPoint;    double bSqr=midPoint * midPoint;    a=0;    for (row=0; row < filterSize; row++) {      for (col=0; col < filterSize; col++) {        dX[a]=col - midPoint;        dY[a]=row - midPoint;        z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;        if (z > 1) {          filterShape[a]=0;        } else {          filterShape[a]=1;        }        a++;      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        centreValue=DEM.getValue(row,col);        if (centreValue != noData) {          n=0;          sum=0;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            if ((x != midPoint) && (y != midPoint)) {              z=DEM.getValue(y,x);              if (z != noData) {                n+=filterShape[a];                sum+=z * filterShape[a];              }            }          }          z=centreValue - sum / n;          output.setValue(row,col,z);        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress((int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public Boolean isEncoded(){  return encoded;}  }
class C{  public HttpURL(final String user,final String password,final String host,final int port,final String path,final String query,final String fragment) throws URIException {  this(toUserinfo(user,password),host,port,path,query,fragment);}  }
class C{  @ConstructorProperties({"border","title","titleJustification","titlePosition","titleFont","titleColor"}) public TitledBorder(Border border,String title,int titleJustification,int titlePosition,Font titleFont,Color titleColor){  this.title=title;  this.border=border;  this.titleFont=titleFont;  this.titleColor=titleColor;  setTitleJustification(titleJustification);  setTitlePosition(titlePosition);  this.label=new JLabel();  this.label.setOpaque(false);  this.label.putClientProperty(BasicHTML.propertyKey,null);}  }
class C{  void isReadyLatch(CountDownLatch readyLatch){  this.readyLatch=readyLatch;}  }
class C{  @Override public boolean hitObject(Object object,DrawInfo2D range){  double SLOP=2.0;  MasonGeometry geom=(MasonGeometry)object;  if (geom.shape == null) {    return false;  }  return geom.shape.intersects(range.clip.x - SLOP / 2,range.clip.y - SLOP / 2,range.clip.width + SLOP / 2,range.clip.height + SLOP / 2);}  }
class C{  public void hint(int which){  g.hint(which);}  }
class C{  public boolean markSupported(){  return in.markSupported();}  }
class C{  void shutdown(){  gameRunning=false;  WtWindowManager.getInstance().save();}  }
class C{  public void addVariant(ProductVariant variant){  productVariants.add(variant);  for (  CartLineItem lineItem : lineItems) {    if (lineItem.getVariantId().equals(variant.getId())) {      lineItem.setQuantity(lineItem.getQuantity() + 1);      return;    }  }  lineItems.add(new CartLineItem(variant));}  }
class C{  public static boolean exchangeLong(Address address,long oldValue,long value){  return getPage(address).exchangeLong(address,oldValue,value);}  }
class C{  public static void logProxyPreferences(){  org.osgi.service.prefs.Preferences rootNode=ConfigurationScope.INSTANCE.getNode(org.eclipse.core.internal.net.Activator.ID);  logNodeProperties(rootNode);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public Channel addChannel(String channelName,Channel.Type type){  if (channels.get(channelName) != null) {    return null;  }  Channel panel;  if (defaultChannel != null) {    panel=defaultChannel;    defaultChannel=null;    panel.setName(channelName);    panel.setType(type);    channelChanged();  } else {    panel=createChannel(channelName,type);    tabs.addTab(panel);    if (type != Channel.Type.WHISPER) {      tabs.setSelectedComponent(panel);    }  }  channels.put(channelName,panel);  return panel;}  }
class C{  public static void main(String[] args) throws FileNotFoundException {  WorkflowGenerator workflowGenerator=new WorkflowGenerator();  workflowGenerator.workflowGenerator(args);}  }
class C{  private void processJavaDocTag(JavaDocTag javaDocTag,Map<String,String> methodParamDescriptions){  TagElement tagElement=(TagElement)javaDocTag.getInternal();  List fragments=tagElement.fragments();  String paramName="";  List subFragments=new ArrayList<>();  if (javaDocTag.getName().equals("@param")) {    paramName=String.valueOf(fragments.get(0));    subFragments=fragments.subList(1,fragments.size());  } else   if (javaDocTag.getName().equals("@return")) {    paramName="@return";    subFragments=fragments;  }  StringBuilder stringBuilder=new StringBuilder();  processFragments(subFragments,stringBuilder);  methodParamDescriptions.put(paramName,stringBuilder.toString());}  }
class C{  public StatementBuilder append(long x){  builder.append(x);  return this;}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) public void testSchemaNodeProcessing(boolean isstring) throws Exception {  final SeedEventClassifier oper=new SeedEventClassifier();  StringSink classifySink=new StringSink();  HashSink hashSink=new HashSink();  Sink inSink1=oper.data1.getSink();  Sink inSink2=oper.data2.getSink();  if (isstring) {    oper.string_data.setSink(classifySink);  } else {    oper.hash_data.setSink(hashSink);  }  oper.setKey1("x");  oper.setKey2("y");  oper.setSeedstart(0);  oper.setSeedend(1000);  oper.setup(null);  oper.beginWindow(0);  int numTuples=1000;  if (isstring) {    String input;    for (int j=0; j < 5; j++) {      for (int i=0; i < numTuples; i++) {        input=Integer.toString(i);        inSink1.put(input);        inSink2.put(input);      }    }  } else {    Integer input;    for (int j=0; j < 5; j++) {      for (int i=0; i < numTuples; i++) {        input=i;        inSink1.put(input);        inSink2.put(input);      }    }  }  oper.endWindow();  if (isstring) {    Assert.assertEquals("number emitted tuples",numTuples * 2 * 5,classifySink.count);    LOG.debug(String.format("\n********************\nProcessed %d tuples with %d uniques\n********************\n",classifySink.count,classifySink.collectedTuples.size()));  } else {    Assert.assertEquals("number emitted tuples",numTuples * 2 * 5,hashSink.count);    LOG.debug(String.format("\n********************\nProcessed %d tuples with %d uniques\n********************\n",hashSink.count,hashSink.collectedTuples.size()));  }}  }
class C{  public AudioInputStream(TargetDataLine line){  TargetDataLineInputStream tstream=new TargetDataLineInputStream(line);  format=line.getFormat();  frameLength=AudioSystem.NOT_SPECIFIED;  frameSize=format.getFrameSize();  if (frameSize == AudioSystem.NOT_SPECIFIED || frameSize <= 0) {    frameSize=1;  }  this.stream=tstream;  framePos=0;  markpos=0;}  }
class C{  protected void drawDimmedLayer(@NonNull Canvas canvas){  canvas.save();  if (mOvalDimmedLayer) {    canvas.clipPath(mCircularPath,Region.Op.DIFFERENCE);  } else {    canvas.clipRect(mCropViewRect,Region.Op.DIFFERENCE);  }  canvas.drawColor(mDimmedColor);  canvas.restore();  if (mOvalDimmedLayer) {    canvas.drawOval(mCropViewRect,mDimmedStrokePaint);  }}  }
class C{  private int caseOf(char word[],int length){  if (dictionary.ignoreCase || length == 0 || !Character.isUpperCase(word[0])) {    return EXACT_CASE;  }  boolean seenUpper=false;  boolean seenLower=false;  for (int i=1; i < length; i++) {    boolean v=Character.isUpperCase(word[i]);    seenUpper|=v;    seenLower|=!v;  }  if (!seenLower) {    return UPPER_CASE;  } else   if (!seenUpper) {    return TITLE_CASE;  } else {    return EXACT_CASE;  }}  }
class C{  public boolean dynInit() throws Exception {  log.config("");  setTitle(Msg.translate(Env.getCtx(),"C_BankStatement_ID") + " .. " + Msg.translate(Env.getCtx(),"CreateFrom"));  return true;}  }
class C{  public void print(String x){  m_Owner.append("" + x);}  }
class C{  public boolean isCreateReciprocalRate(){  Object oo=get_Value(COLUMNNAME_CreateReciprocalRate);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public SnmpAdaptorServer(InetAddressAcl acl,InetAddress addr){  this(false,acl,com.sun.jmx.snmp.ServiceName.SNMP_ADAPTOR_PORT,addr);}  }
class C{  private static String stripIndividualTags(String html){  html=html.trim();  if (html.indexOf('<') < 0) {    return html;  }  html=preStripIndividualTags(html);  int numChars=html.length();  StringBuilder result=new StringBuilder(numChars);  boolean inside=false;  boolean cleanedAnyWhitespace=false;  boolean lastCharSpace=false;  for (int i=0; i < numChars; i++) {    char c=html.charAt(i);switch (c) {default :      if (c < ' ') {        if (!inside) {          lastCharSpace=true;          cleanedAnyWhitespace=true;        }      } else {        if (!inside) {          if (lastCharSpace) {            result.append(' ');            lastCharSpace=false;          }          result.append(c);        }      }    break;case '<':  inside=true;break;case '>':inside=false;break;case ' ':if (!inside) {lastCharSpace=true;}break;case '\r':case '\t':case '\n':case 127:case UNICODE_NBSP_160_0x0a:if (!inside) {lastCharSpace=true;cleanedAnyWhitespace=true;}break;}}return (cleanedAnyWhitespace || result.length() != numChars) ? result.toString().trim() : html;}  }
class C{  public void createSeries(CandleDataset source,int seriesIndex){  if (source.getSeries(seriesIndex) == null) {    throw new IllegalArgumentException("Null source (CandleDataset).");  }  for (int i=0; i < source.getSeries(seriesIndex).getItemCount(); i++) {    this.updateSeries(source.getSeries(seriesIndex),i,true);  }}  }
class C{  private void checkMapKeyToNode(Affinity testAff,Affinity aff){  for (int i=0; i < 10000; i++) {    assertEquals(testAff.mapKeyToNode(i).id(),aff.mapKeyToNode(i).id());    checkEqualCollection(testAff.mapKeyToPrimaryAndBackups(i),aff.mapKeyToPrimaryAndBackups(i));  }}  }
class C{  public boolean isMultipart(){  return (parts.size() > 0);}  }
class C{  public static List<String> readLines(InputStream input,String encoding) throws IOException {  return readLines(input,Charsets.toCharset(encoding));}  }
class C{  @SuppressWarnings("unchecked") public static <T>int binarySearch(List<? extends net.sourceforge.retroweaver.harmony.runtime.java.lang.Comparable<? super T>> list,T object){  if (list == null) {    throw new NullPointerException();  }  if (list.isEmpty()) {    return -1;  }  if (!(list instanceof RandomAccess)) {    ListIterator<? extends net.sourceforge.retroweaver.harmony.runtime.java.lang.Comparable<? super T>> it=list.listIterator();    while (it.hasNext()) {      int result;      if ((result=-it.next().compareTo(object)) <= 0) {        if (result == 0) {          return it.previousIndex();        }        return -it.previousIndex() - 1;      }    }    return -list.size() - 1;  }  int low=0, mid=list.size(), high=mid - 1, result=-1;  while (low <= high) {    mid=(low + high) >> 1;    if ((result=-list.get(mid).compareTo(object)) > 0) {      low=mid + 1;    } else     if (result == 0) {      return mid;    } else {      high=mid - 1;    }  }  return -mid - (result < 0 ? 1 : 2);}  }
class C{  public void throwError(){  throw new InternalError(EXCEPTION_MESSAGE);}  }
class C{  private void synchronizeDBSequencesFromSource(){  resetDBObjects(DBObject_Sequence.class);  s_logger.log(Level.CONFIG,"");  s_logger.log(Level.CONFIG,"synchronizeDBSequencesFromSource",new Object[]{m_objectTypes,m_direction,m_source.getDirection()});  m_counterAdd=new Integer(0);  m_counterUpd=new Integer(0);  m_totalAdd=new Integer(0);  m_totalUpd=new Integer(0);  if (m_sourceMap != null && m_sourceMap.size() > 0) {    Vector<String> v=new Vector<String>(m_sourceMap.keySet());    java.util.Collections.sort(v);    for (Iterator<String> it=v.iterator(); it.hasNext(); ) {      String key=it.next();      DBObject sourceObj=m_sourceMap.get(key);      if (m_target.isObjectExists(sourceObj.getName(),m_targetMap)) {        DBObject targetObj=m_target.getObjectByName(sourceObj.getName(),m_targetMap);        if (targetObj.update(sourceObj))         m_counterUpd=new Integer(m_counterUpd.intValue() + 1);        m_totalUpd=new Integer(m_totalUpd.intValue() + 1);      } else {        if (sourceObj.create(m_target))         m_counterAdd=new Integer(m_counterAdd.intValue() + 1);        m_totalAdd=new Integer(m_totalAdd.intValue() + 1);      }    }  }  logResults();}  }
class C{  private void iterateCategoriesGetArticles(Wikipedia pWiki,CategoryGraph catGraph) throws WikiPageNotFoundException {  Map<Integer,Integer> localDegreeDistribution=new HashMap<Integer,Integer>();  Set<Integer> localCategorizedArticleSet=new HashSet<Integer>();  Set<Integer> categoryNodes=catGraph.getGraph().vertexSet();  int progress=0;  for (  int node : categoryNodes) {    progress++;    ApiUtilities.printProgressInfo(progress,categoryNodes.size(),100,ApiUtilities.ProgressInfoMode.TEXT,"iterate over categories");    Category cat=pWiki.getCategory(node);    if (cat != null) {      Set<Integer> pages=new HashSet<Integer>(cat.__getPages());      int numberOfArticles=pages.size();      if (localDegreeDistribution.containsKey(numberOfArticles)) {        int count=localDegreeDistribution.get(numberOfArticles);        count++;        localDegreeDistribution.put(numberOfArticles,count);      } else {        localDegreeDistribution.put(numberOfArticles,1);      }      for (      int page : pages) {        if (!localCategorizedArticleSet.contains(page)) {          localCategorizedArticleSet.add(page);        }      }    } else {      logger.info(node + " is not a category.");    }  }  this.degreeDistribution=localDegreeDistribution;  this.categorizedArticleSet=localCategorizedArticleSet;}  }
class C{  public void sendDCCppMessage(DCCppMessage m,DCCppListener reply){  if (m.length() != 0) {    sendMessage(m,reply);    java.lang.Thread.yield();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:53.639 -0500",hash_original_method="10EA715D50A25194DE35700E69984D3D",hash_generated_method="CDD45A112A925D806458FA23F19EB086") public To(From from){  super(TO);  setAddress(from.address);  setParameters(from.parameters);}  }
class C{  public Object newProxyInstance(Class<?> interfaceClass,String implClassName,Vector<Object> parm) throws Exception {  MyInvocationHandler handler=new MyInvocationHandler(implClassName,parm);  return Proxy.newProxyInstance(interfaceClass.getClassLoader(),new Class[]{interfaceClass},handler);}  }
class C{  public void invokeAPI(EndPointInfo apiUtilities,APIResultCallBack apiResultCallBack,int requestCode,Context context){  apiResultCall=apiResultCallBack;  apiUtilitiesCurrent=apiUtilities;  if (IdentityProxy.getInstance().getContext() == null) {    IdentityProxy.getInstance().setContext(context);  }  IdentityProxy.getInstance().setRequestCode(requestCode);  IdentityProxy.getInstance().requestToken(IdentityProxy.getInstance().getContext(),this,APIController.clientKey,APIController.clientSecret);}  }
class C{  public Drawable createIconThumbnail(Drawable icon){  int width=mIconWidth;  int height=mIconHeight;  if (icon == null) {    return new EmptyDrawable(width,height);  }  try {    if (icon instanceof PaintDrawable) {      PaintDrawable painter=(PaintDrawable)icon;      painter.setIntrinsicWidth(width);      painter.setIntrinsicHeight(height);    } else     if (icon instanceof BitmapDrawable) {      BitmapDrawable bitmapDrawable=(BitmapDrawable)icon;      Bitmap bitmap=bitmapDrawable.getBitmap();      if (bitmap.getDensity() == Bitmap.DENSITY_NONE) {        bitmapDrawable.setTargetDensity(mMetrics);      }    }    int iconWidth=icon.getIntrinsicWidth();    int iconHeight=icon.getIntrinsicHeight();    if (iconWidth > 0 && iconHeight > 0) {      if (width < iconWidth || height < iconHeight) {        final float ratio=(float)iconWidth / iconHeight;        if (iconWidth > iconHeight) {          height=(int)(width / ratio);        } else         if (iconHeight > iconWidth) {          width=(int)(height * ratio);        }        final Bitmap.Config c=icon.getOpacity() != PixelFormat.OPAQUE ? Bitmap.Config.ARGB_8888 : Bitmap.Config.RGB_565;        final Bitmap thumb=Bitmap.createBitmap(mIconWidth,mIconHeight,c);        final Canvas canvas=mCanvas;        canvas.setBitmap(thumb);        mOldBounds.set(icon.getBounds());        final int x=(mIconWidth - width) / 2;        final int y=(mIconHeight - height) / 2;        icon.setBounds(x,y,x + width,y + height);        icon.draw(canvas);        icon.setBounds(mOldBounds);        icon=new BitmapDrawable(thumb);        ((BitmapDrawable)icon).setTargetDensity(mMetrics);        canvas.setBitmap(null);      } else       if (iconWidth < width && iconHeight < height) {        final Bitmap.Config c=Bitmap.Config.ARGB_8888;        final Bitmap thumb=Bitmap.createBitmap(mIconWidth,mIconHeight,c);        final Canvas canvas=mCanvas;        canvas.setBitmap(thumb);        mOldBounds.set(icon.getBounds());        final int x=(width - iconWidth) / 2;        final int y=(height - iconHeight) / 2;        icon.setBounds(x,y,x + iconWidth,y + iconHeight);        icon.draw(canvas);        icon.setBounds(mOldBounds);        icon=new BitmapDrawable(thumb);        ((BitmapDrawable)icon).setTargetDensity(mMetrics);        canvas.setBitmap(null);      }    }  } catch (  Throwable t) {    icon=new EmptyDrawable(width,height);  }  return icon;}  }
class C{  public boolean isDashedLineEnabled(){  return mDashPathEffect == null ? false : true;}  }
class C{  public void onCancelMarketData(Tradestrategy tradestrategy){  if (m_marketDataRequests.containsKey(tradestrategy.getContract().getId())) {    Contract contract=m_marketDataRequests.get(tradestrategy.getContract().getId());    for (    Tradestrategy item : contract.getTradestrategies()) {      if (item.equals(tradestrategy)) {        contract.removeTradestrategy(tradestrategy);        break;      }    }    if (contract.getTradestrategies().isEmpty()) {      onCancelMarketData(contract);    }  }}  }
class C{  public Integer evaluate(float fraction,Integer startValue,Integer endValue){  int startInt=startValue;  return (int)(startInt + fraction * (endValue - startInt));}  }
class C{  boolean avfSubClass(OwlClass other){  for (  OwlClass avfClass : this.avfClasses) {    Set<Resource> intersection=avfClass.getSuperClasses();    intersection.retainAll(other.allValuesFrom());    if (!intersection.isEmpty()) {      return true;    }  }  return false;}  }
class C{  public static double interpolateTriangle(double v0X,double v0Y,double f0,double v1X,double v1Y,double f1,double v2X,double v2Y,double f2,double x,double y){  double v12Y=v1Y - v2Y;  double v21X=v2X - v1X;  double v02X=v0X - v2X;  double yv2Y=y - v2Y;  double xv2X=x - v2X;  double v02Y=v0Y - v2Y;  double invDen=1.0 / (v12Y * v02X + v21X * v02Y);  double l1=(v12Y * xv2X + v21X * yv2Y) * invDen;  double l2=(v02X * yv2Y - v02Y * xv2X) * invDen;  return l1 * f0 + l2 * f1 + (1.0f - l1 - l2) * f2;}  }
class C{  public int findNode(Point2D.Double p){  BezierPath tp=path;  for (int i=0; i < tp.size(); i++) {    BezierPath.Node p2=tp.get(i);    if (p2.x[0] == p.x && p2.y[0] == p.y) {      return i;    }  }  return -1;}  }
class C{  public void removeDuration(){  super.removeParameter(DURATION);}  }
class C{  public String toString(){  return toStringValue(false);}  }
class C{  @Override public void draw(Graphics2D g2,Rectangle2D area){  draw(g2,area,null);}  }
class C{  public static double variance(double[] x,double mean){  double var=0;  int count=x.length;  for (  double aX : x) {    if (Double.isNaN(aX)) {      count--;    } else {      double diff=aX - mean;      var+=diff * diff;    }  }  if (count < 2) {    count=1;  } else {    count=count - 1;  }  return var / (double)count;}  }
class C{  public static void intWrite(final OutputStream out,final int i) throws IOException {  if (i == 0) {    out.write('0');    return;  }  int t;  if (i < 0) {    if (i == Integer.MIN_VALUE) {      out.write("-2147483648".getBytes());      return;    }    out.write('-');    t=-i;  } else {    t=i;  }  int x=POWERS_10.length - 1;  while (POWERS_10[x] > t) {    x--;  }  while (x >= 0) {    int d=0;    final int pwr=POWERS_10[x];    while (pwr <= t) {      t-=pwr;      d++;    }    out.write('0' + d);    x--;  }  assert t == 0;}  }
class C{  public DeltaOptions(int distance) throws UnsupportedOptionsException {  setDistance(distance);}  }
class C{  public HostStorageDomain addHostStorageDomain(String systemId,String targetPortID,String domainType,String hsdName,String hsdNickName,String hostMode,String hostModeOption,String model) throws Exception {  InputStream responseStream=null;  HostStorageDomain hsd=null;  try {    Map<String,Object> attributeMap=new HashMap<String,Object>();    StorageArray array=new StorageArray(systemId);    Add addOp=new Add(HDSConstants.HOST_STORAGE_DOMAIN);    attributeMap.put(HDSConstants.STORAGEARRAY,array);    attributeMap.put(HDSConstants.ADD,addOp);    attributeMap.put(HDSConstants.MODEL,model);    HostStorageDomain inputHsd=new HostStorageDomain(targetPortID,hsdName,domainType,hsdNickName);    inputHsd.setHostMode(hostMode);    inputHsd.setHostModeOption(hostModeOption);    attributeMap.put(HDSConstants.HOST_STORAGE_DOMAIN,inputHsd);    String addHSDToSystemQuery=InputXMLGenerationClient.getInputXMLString(HDSConstants.ADD_HSD_TO_SYSTEM_OP,attributeMap,HDSConstants.HITACHI_INPUT_XML_CONTEXT_FILE,HDSConstants.HITACHI_SMOOKS_CONFIG_FILE);    log.info("Query to create HostStorageDomain: {}",addHSDToSystemQuery);    URI endpointURI=hdsApiClient.getBaseURI();    ClientResponse response=hdsApiClient.post(endpointURI,addHSDToSystemQuery);    if (HttpStatus.SC_OK == response.getStatus()) {      responseStream=response.getEntityInputStream();      JavaResult javaResult=SmooksUtil.getParsedXMLJavaResult(responseStream,HDSConstants.SMOOKS_CONFIG_FILE);      verifyErrorPayload(javaResult);      hsd=javaResult.getBean(HostStorageDomain.class);      if (null == hsd) {        throw HDSException.exceptions.notAbleToAddHSD(systemId);      }    } else {      throw HDSException.exceptions.invalidResponseFromHDS(String.format("Not able to add HostStorageDomain due to invalid response %1$s from server",response.getStatus()));    }  }  finally {    if (null != responseStream) {      try {        responseStream.close();      } catch (      IOException e) {        log.warn("IOException occurred while closing the response stream");      }    }  }  return hsd;}  }
class C{  @ExceptionHandler(AbstractServerRtException.class) public ResponseEntity<ExceptionInfo> handleSpServerRtExceptions(final HttpServletRequest request,final Exception ex){  logRequest(request,ex);  final ExceptionInfo response=createExceptionInfo(ex);  final HttpStatus responseStatus;  if (ex instanceof AbstractServerRtException) {    responseStatus=getStatusOrDefault(((AbstractServerRtException)ex).getError());  } else {    responseStatus=DEFAULT_RESPONSE_STATUS;  }  return new ResponseEntity<>(response,responseStatus);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList genderList;  Node gender;  Node entRef;  Element entElement;  Attr newAttr;  int nodeType;  Attr badAttr;  doc=(Document)load("staff",true);  genderList=doc.getElementsByTagName("gender");  gender=genderList.item(2);  entRef=gender.getFirstChild();  assertNotNull("entRefNotNull",entRef);  nodeType=(int)entRef.getNodeType();  if (equals(1,nodeType)) {    entRef=doc.createEntityReference("ent4");    assertNotNull("createdEntRefNotNull",entRef);  }  entElement=(Element)entRef.getFirstChild();  assertNotNull("entElementNotNull",entElement);  newAttr=doc.createAttribute("newAttr");{    boolean success=false;    try {      badAttr=entElement.setAttributeNode(newAttr);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  @Override public String rename(final byte[] oldkey,final byte[] newkey){  checkIsInMultiOrPipeline();  client.rename(oldkey,newkey);  return client.getStatusCodeReply();}  }
class C{  @Override protected byte[] encrypt(byte type,byte[] fragment,int offset,int len){  try {    int content_mac_length=len + hash_size;    int padding_length=(block_size == 0) ? 0 : getPaddingSize(++content_mac_length);    byte[] res=new byte[content_mac_length + padding_length];    System.arraycopy(fragment,offset,res,0,len);    mac_material_header[0]=type;    mac_material_header[3]=(byte)((0x00FF00 & len) >> 8);    mac_material_header[4]=(byte)(0x0000FF & len);    encMac.update(write_seq_num);    encMac.update(mac_material_header);    encMac.update(fragment,offset,len);    encMac.doFinal(res,len);    if (block_size != 0) {      Arrays.fill(res,content_mac_length - 1,res.length,(byte)(padding_length));    }    if (logger != null) {      logger.println("SSLRecordProtocol.do_encryption: Generic" + (block_size != 0 ? "BlockCipher with padding[" + padding_length + "]:" : "StreamCipher:"));      logger.print(res);    }    byte[] rez=new byte[encCipher.getOutputSize(res.length)];    encCipher.update(res,0,res.length,rez);    incSequenceNumber(write_seq_num);    return rez;  } catch (  GeneralSecurityException e) {    e.printStackTrace();    throw new AlertException(AlertProtocol.INTERNAL_ERROR,new SSLProtocolException("Error during the encryption"));  }}  }
class C{  public int[] toIndices(String s){  char[] source=s.toCharArray();  int[] target=new int[s.length()];  for (int i=0; i < source.length; i++)   target[i]=toIndex(source[i]);  return target;}  }
class C{  public static long encodeDateTime(long year,long month,long day,long hour,long min,long sec){  return year * DATETIME_YEAR_SCALE + month * DATETIME_MONTH_SCALE + day * DATETIME_DAY_SCALE + hour * DATETIME_HOUR_SCALE + min * DATETIME_MIN_SCALE + sec;}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  SpiderWebPlot clone=(SpiderWebPlot)super.clone();  clone.legendItemShape=ShapeUtilities.clone(this.legendItemShape);  clone.seriesPaintList=(PaintList)this.seriesPaintList.clone();  clone.seriesOutlinePaintList=(PaintList)this.seriesOutlinePaintList.clone();  clone.seriesOutlineStrokeList=(StrokeList)this.seriesOutlineStrokeList.clone();  return clone;}  }
class C{  public ShadowFactory(final int size,final float opacity,final Color color){  hints=new HashMap<Object,Object>();  hints.put(KEY_BLUR_QUALITY,VALUE_BLUR_QUALITY_FAST);  changeSupport=new PropertyChangeSupport(this);  setSize(size);  setOpacity(opacity);  setColor(color);}  }
class C{  public void focusGained(FocusEvent e){  m_infocus=true;  setText(getText());}  }
class C{  public static int EKEYREVOKED(){  return 128;}  }
class C{  public CandlestickRenderer(){  this(-1.0);}  }
class C{  @Override public void deliverResult(List<AppEntry> apps){  if (isReset()) {    if (apps != null) {      onReleaseResources(apps);    }  }  List<AppEntry> oldApps=mApps;  mApps=apps;  if (isStarted()) {    super.deliverResult(apps);  }  if (oldApps != null) {    onReleaseResources(oldApps);  }}  }
class C{  public void storePrefs(){  storePrefs(prefsFile);}  }
class C{  public CacheSet querySequential(Predicate... selectors){  checkNotNull(selectors);  Collection<Object> resultCollection=new ArrayList<>(items);  Collection<Object> filterCollection=new LinkedList<>();  Collection<Object> tempCollection;  int i=0;  while ((i < selectors.length) && (resultCollection.size() > 0)) {    CollectionUtils.select(resultCollection,selectors[i],filterCollection);    tempCollection=resultCollection;    resultCollection=filterCollection;    filterCollection=tempCollection;    filterCollection.clear();    i++;  }  return new CacheSet(resultCollection);}  }
class C{  public boolean removeWatchedScripts(final List<Script> scripts){  lock.lock();  try {    for (    final Script script : scripts) {      if (!watchedScripts.contains(script))       continue;      watchedScripts.remove(script);    }    queueOnScriptsChanged(scripts,false);    saveNow();    return true;  }  finally {    lock.unlock();  }}  }
class C{  private QueryTask.QuerySpecification buildHostQuerySpec(final State current,String fieldName,String matchValue){  QueryTask.Query kindClause=new QueryTask.Query().setTermPropertyName(ServiceDocument.FIELD_NAME_KIND).setTermMatchValue(Utils.buildKind(HostService.State.class));  QueryTask.Query fieldNameClause=new QueryTask.Query().setTermPropertyName(fieldName).setTermMatchValue(matchValue);  QueryTask.Query stateClause=new QueryTask.Query().setTermPropertyName("state").setTermMatchValue(HostState.READY.toString());  QueryTask.QuerySpecification querySpecification=new QueryTask.QuerySpecification();  querySpecification.query.addBooleanClause(kindClause);  querySpecification.query.addBooleanClause(fieldNameClause);  querySpecification.query.addBooleanClause(stateClause);  querySpecification.options=EnumSet.of(QueryTask.QuerySpecification.QueryOption.EXPAND_CONTENT);  return querySpecification;}  }
class C{  public NotificationChain basicSetFirst(Expression newFirst,NotificationChain msgs){  Expression oldFirst=first;  first=newFirst;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,GamlPackage.TYPE_INFO__FIRST,oldFirst,newFirst);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  private void classPrepareEvent(ClassPrepareEvent event){  EventRequestManager mgr=vm.eventRequestManager();  List<Field> fields=event.referenceType().visibleFields();  for (  Field field : fields) {    ModificationWatchpointRequest req=mgr.createModificationWatchpointRequest(field);    for (int i=0; i < excludes.length; ++i) {      req.addClassExclusionFilter(excludes[i]);    }    req.setSuspendPolicy(EventRequest.SUSPEND_NONE);    req.enable();  }}  }
class C{  public EventProducer(int transactions,int fragmentsPerTransaction,int shards,int timestampOffset,int variation){  this.transactions=transactions;  this.fragmentsPerTransaction=fragmentsPerTransaction;  this.shards=shards;  this.timestampOffset=timestampOffset;  this.variation=variation;  expectedEvents=transactions * fragmentsPerTransaction;  baseTimeMillis=System.currentTimeMillis() - (transactions * fragmentsPerTransaction * timestampOffset);}  }
class C{  public TournamentSelection(int size){  this(size,new ParetoDominanceComparator());}  }
class C{  @SuppressWarnings("rawtypes") public void test_putGet3(){  final List<IBindingSet[]> in=new LinkedList<IBindingSet[]>();{    final IVariable<?> x=Var.var("x");    final IVariable<?> y=Var.var("y");    final IVariable<?> z=Var.var("z");{      final List<IBindingSet> t=new LinkedList<IBindingSet>();{        final ListBindingSet b=new ListBindingSet();        b.set(x,new Constant<IV>(termId));        b.set(y,new Constant<IV>(termId2));        t.add(b);      }{        final ListBindingSet b=new ListBindingSet();        b.set(x,new Constant<IV>(termId2));        b.set(y,new Constant<IV>(inlineIV));        b.set(z,new Constant<IV>(blobIV));        t.add(b);      }      in.add(t.toArray(new IBindingSet[0]));    }  }  final String solutionSet=getName();  try {    solutionSetsManager.getSolutions(solutionSet);    fail("Expecting: " + IllegalStateException.class);  } catch (  IllegalStateException ex) {    if (log.isInfoEnabled())     log.info("Ignoring expected exception: " + ex);  }  solutionSetsManager.putSolutions(solutionSet,new CloseableIteratorWrapper<IBindingSet[]>(in.iterator()));  final ICloseableIterator<IBindingSet[]> out=solutionSetsManager.getSolutions(solutionSet);  assertSameSolutionsAnyOrder(flatten(in.iterator()),out);}  }
class C{  private static void bindInjector(InjectorImpl injector){  Key<Injector> key=Key.get(Injector.class);  InjectorFactory injectorFactory=new InjectorFactory(injector);  injector.state.putBinding(key,new ProviderInstanceBindingImpl<>(injector,key,SourceProvider.UNKNOWN_SOURCE,injectorFactory,Scoping.UNSCOPED,injectorFactory,ImmutableSet.<InjectionPoint>of()));}  }
class C{  public int capacity(){  return 0;}  }
class C{  private void cmd_EFT(){  String PaymentRule=((ValueNamePair)fPaymentRule.getSelectedItem()).getValue();  log.info(PaymentRule);  if (!getChecks(PaymentRule))   return;  dispose();}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case SexecPackage.HISTORY_ENTRY__INITIAL_STEP:    setInitialStep((Step)newValue);  return;case SexecPackage.HISTORY_ENTRY__DEEP:setDeep((Boolean)newValue);return;case SexecPackage.HISTORY_ENTRY__REGION:setRegion((ExecutionRegion)newValue);return;case SexecPackage.HISTORY_ENTRY__HISTORY_STEP:setHistoryStep((Step)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.AUTOUNIQUE_ATTRIBUTE___AUTOUNIQUE_1:    setAutounique_1((Boolean)newValue);  return;case UmplePackage.AUTOUNIQUE_ATTRIBUTE___NAME_1:setName_1((String)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:33.416 -0500",hash_original_method="3729AD4A21CE0EDB3800382FBE3F87EC",hash_generated_method="D5A422FE651FB498A1CB1A101ADA4D7D") public void onRefresh(boolean fileChanged,int[] fileList){  if (fileChanged) {    fetchSimRecords();  }}  }
class C{  public static IMultiPoint[] randomOddPoints(int n,int d,int scale){  IMultiPoint points[]=new IMultiPoint[n];  for (int i=0; i < n; i++) {    StringBuilder sb=new StringBuilder();    for (int j=0; j < d; j++) {      int it=(int)(rGen.nextDouble() * scale);      if (it % 2 == 0) {        if (it == scale) {          it=1;        } else {          it++;        }      }      sb.append(it);      if (j < d - 1) {        sb.append(",");      }    }    points[i]=new Hyperpoint(sb.toString());  }  return points;}  }
class C{  public static int EFAULT(){  return Errno.EFAULT.intValue();}  }
class C{  public static WhereBuilder b(String columnName,String op,Object value){  WhereBuilder result=new WhereBuilder();  result.appendCondition(null,columnName,op,value);  return result;}  }
class C{  private List<Response> makeMultiRequest(Command cmd,@Nullable String cacheName,@Nullable Object key,@Nullable Object val,@Nullable Long... extras) throws IgniteCheckedException {  assert cmd != null;  int opaque=opaqueCntr.getAndIncrement();  List<Response> resList=new LinkedList<>();  try {    sock.getOutputStream().write(createPacket(cmd,cacheName,key,val,opaque,extras));  } catch (  IOException e) {    throw new IgniteCheckedException("Failed to send packet.",e);  }  while (true) {    try {      Response res=queue.take();      if (res == QUIT_RESP)       return resList;      if (res.getOpaque() == opaque) {        if (!res.isSuccess() && res.getObject() != null)         throw new IgniteCheckedException((String)res.getObject()); else {          if (res.getObject() == null)           return resList;          resList.add(res);        }      } else       queue.add(res);    } catch (    InterruptedException e) {      throw new IgniteCheckedException("Interrupted while waiting for response.",e);    }  }}  }
class C{  private Node<K,V> findPredecessorOfLast(){  for (; ; ) {    for (Index<K,V> q=head; ; ) {      Index<K,V> d, r;      if ((r=q.right) != null) {        if (r.indexesDeletedNode()) {          q.unlink(r);          break;        }        if (r.node.next != null) {          q=r;          continue;        }      }      if ((d=q.down) != null)       q=d; else       return q.node;    }  }}  }
class C{  public void updateTIBEntry(RVMMethod m){  if (VM.VerifyAssertions) {    RVMMethod vm=findVirtualMethod(m.getName(),m.getDescriptor());    VM._assert(vm == m);  }  typeInformationBlock.setVirtualMethod(m.getOffset(),m.getCurrentEntryCodeArray());  InterfaceInvocation.updateTIBEntry(this,m);}  }
class C{  @Override public void disconnected(DisconnectedEvent e){  PacketTool.this.disconnected(e.getConnection());}  }
class C{  private Options buildIaMameOptions(){  Options opts=new Options();  opts.addOption("noexecmame",false,"");  return opts;}  }
class C{  @Override public void clear(){  modCount++;  IntEntry<VALUE> tab[]=table;  for (int i=0; i < tab.length; i++)   tab[i]=null;  size=0;}  }
class C{  private void rulesR8R9R10(){  List<Node> nodes=graph.getNodes();  for (  Node c : nodes) {    List<Node> intoCArrows=graph.getNodesInTo(c,Endpoint.ARROW);    for (    Node a : intoCArrows) {      if (!(graph.getEndpoint(c,a) == Endpoint.CIRCLE))       continue;      if (!ruleR8(a,c)) {        if (!ruleR9(a,c)) {          ruleR10(a,c);        }      }    }  }}  }
class C{  public void showMenu(){  mSlidingMenu.showMenu();}  }
class C{  @Override public boolean onInterceptTouchEvent(MotionEvent ev){  try {    return super.onInterceptTouchEvent(ev);  } catch (  IllegalArgumentException e) {    e.printStackTrace();    return false;  }}  }
class C{  public boolean isBnfclOwnrDsclsr(){  return bnfclOwnrDsclsr;}  }
class C{  public GenericEntityStreamReaderMT(String serviceName,SearchCondition condition) throws Exception {  this(serviceName,condition,2);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodeelementnodename.class,args);}  }
class C{  public static Object instantiateObject(String className,PackageType packageType,Object... arguments) throws InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException, NoSuchMethodException, ClassNotFoundException {  return instantiateObject(packageType.getClass(className),arguments);}  }
class C{  public static int calcSigHashValue(Transaction.SigHash mode,boolean anyoneCanPay){  Preconditions.checkArgument(SigHash.ALL == mode || SigHash.NONE == mode || SigHash.SINGLE == mode);  int sighashFlags=mode.value;  if (anyoneCanPay)   sighashFlags|=Transaction.SigHash.ANYONECANPAY.value;  return sighashFlags;}  }
class C{  public static void colorSnackbar(Context context,Snackbar snackbar){  snackbar.setActionTextColor(ContextCompat.getColor(context,R.color.white));}  }
class C{  public CheckResult checkCustom(PGPPublicKey key,int depth){  return CheckResult.ok();}  }
class C{  public void addField(String fieldName,Class type,int fieldSize){  this.addField(new FieldDefinition(fieldName,type,fieldSize));}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) public static int selectPivotIndex(Comparable ar[],int left,int right){  int midIndex=(left + right) / 2;  int lowIndex=left;  if (ar[lowIndex].compareTo(ar[midIndex]) >= 0) {    lowIndex=midIndex;    midIndex=left;  }  if (ar[right].compareTo(ar[lowIndex]) <= 0) {    return lowIndex;  } else   if (ar[right].compareTo(ar[midIndex]) <= 0) {    return midIndex;  }  return right;}  }
class C{  synchronized void resume(Thread t){  if (Debugger.TRACE) {    trace("resume threads",t);  }  if (closed) {    throw new IllegalStateException("session closed");  }  setSteppingStrategy(t,SteppingStrategy.createContinue(),true);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_PARAMETER_1__LIST_1:    setList_1(LIST_1_EDEFAULT);  return;case UmplePackage.ANONYMOUS_PARAMETER_1__NAME_1:setName_1(NAME_1_EDEFAULT);return;case UmplePackage.ANONYMOUS_PARAMETER_1__TYPE_1:setType_1(TYPE_1_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  void onUp(){  if (mFlingRunnable.mScroller.isFinished()) {    scrollIntoSlots();  }  dispatchUnpress();}  }
class C{  public static UTMCoord fromLatLon(Angle latitude,Angle longitude){  return fromLatLon(latitude,longitude,(Globe)null);}  }
class C{  public String readString(final Charset charset){  byte ch;  int cnt=0;  final byte[] byteArrBuff=new byte[remaining()];  while (remaining() > 0 && ((ch=buf[position++]) != 0)) {    byteArrBuff[cnt++]=ch;  }  return new String(byteArrBuff,0,cnt,charset);}  }
class C{  protected String resolvePrefix(SerializationHandler rhandler,String prefix,String nodeNamespace) throws TransformerException {  if (null != prefix && (prefix.length() == 0 || prefix.equals("xmlns"))) {    prefix=rhandler.getPrefix(nodeNamespace);    if (null == prefix || prefix.length() == 0 || prefix.equals("xmlns")) {      if (nodeNamespace.length() > 0) {        NamespaceMappings prefixMapping=rhandler.getNamespaceMappings();        prefix=prefixMapping.generateNextPrefix();      } else       prefix="";    }  }  return prefix;}  }
class C{  @Override public Envelope expandEnvelope(final Envelope env){  for (  final GamaPoint p : points) {    env.expandToInclude(p);  }  return env;}  }
class C{  public PageOfCollections fetchPage(PageOfCollections page,SolrZkClient zkClient) throws KeeperException, InterruptedException {  List<String> children=getCollections(zkClient);  page.selected=children;  if (page.start == 0 && page.rows == -1 && page.filter == null && children.size() > 10) {    page.rows=20;    page.start=0;  }  if (page.filterType == FilterType.name && page.filter != null)   children=page.applyNameFilter(children);  if (page.filterType != FilterType.status)   page.selectPage(children);  return page;}  }
class C{  public Boolean isIgnoreSatisfiability(){  return ignoreSatisfiability;}  }
class C{  public static <T extends Comparable<T>>Pair<Integer,T> max(Collection<T> list){  T max=null;  int argMax=-1;  if (list.size() > 0) {    max=list.iterator().next();    argMax=0;  }  int id=0;  for (  T d : list) {    if (d.compareTo(max) > 0) {      max=d;      argMax=id;    }    id++;  }  return new Pair<>(argMax,max);}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  public SearchSourceBuilder postFilter(byte[] postFilter){  return postFilter(postFilter,0,postFilter.length);}  }
class C{  public double[] computeLocalUsingPreviousObservations(double[][] states1,double[][] states2) throws Exception {  throw new Exception("Local method for other data not implemented");}  }
class C{  public String showAuditLogData() throws IOException {  if (!isAuditLogDataAvailable()) {    addMessage(null,FacesMessage.SEVERITY_ERROR,ERROR_SHOW_AUDIT_LOG_DATA);    logger.logError(LogMessageIdentifier.ERROR_GET_USER_OPERATION_LOG_RETURN_NULL);    return OUTCOME_ERROR;  }  SimpleDateFormat sdf=new SimpleDateFormat("yyyy_MM_dd");  String filename=sdf.format(Calendar.getInstance().getTime()) + "_Data.log";  String contentType="application/octet-stream";  writeContentToResponse(model.getAuditLogData(),filename,contentType);  model.setAuditLogData(null);  return OUTCOME_SUCCESS;}  }
class C{  ScheduledExecutorService newScheduledThreadPool(int poolSize,String name){  final ScheduledExecutorService existing=threadPools.get(name);  if (isValidExecutor(existing)) {    return existing;  } else {synchronized (this) {      final ScheduledExecutorService lastChance=threadPools.get(name);      if (isValidExecutor(lastChance)) {        return lastChance;      } else {        final ScheduledExecutorService service=Executors.newScheduledThreadPool(poolSize,new NamedThreadFactory(name));        threadPools.put(name,service);        return service;      }    }  }}  }
class C{  public static long ceil(double value){  return Math.round(Math.ceil(value));}  }
class C{  private boolean anyVolumesPlacedToMultipleMasks(Set<URI> multiplyPlaced,Map<URI,Set<URI>> volumeToMasks){  boolean atLeastOneVolumePlacedToMultipleMasks=false;  for (  URI volumeURI : volumeToMasks.keySet()) {    boolean placedToMultipleMasks=volumeToMasks.get(volumeURI).size() > 1;    if (placedToMultipleMasks) {      multiplyPlaced.add(volumeURI);      atLeastOneVolumePlacedToMultipleMasks=true;    }  }  return atLeastOneVolumePlacedToMultipleMasks;}  }
class C{  public HttpURL(final String host,final String path,final String query,final String fragment) throws URIException {  this(null,null,host,-1,path,query,fragment);}  }
class C{  @RequestMapping(value={"","/"},method=RequestMethod.GET) @ResponseBody public RestWrapper list(@RequestParam(value="page",defaultValue="0") int startPage,@RequestParam(value="size",defaultValue="10") int pageSize,Principal principal){  RestWrapper restWrapper=null;  try {    Integer counter=busDomainDAO.totalRecordCount().intValue();    List<com.wipro.ats.bdre.md.dao.jpa.BusDomain> jpaBusDoaminList=busDomainDAO.list(startPage,pageSize);    List<BusDomain> busDomains=new ArrayList<BusDomain>();    for (    com.wipro.ats.bdre.md.dao.jpa.BusDomain busDomain : jpaBusDoaminList) {      BusDomain returnBusDomain=new BusDomain();      returnBusDomain.setBusDomainId(busDomain.getBusDomainId());      returnBusDomain.setBusDomainName(busDomain.getBusDomainName());      returnBusDomain.setBusDomainOwner(busDomain.getBusDomainOwner());      returnBusDomain.setDescription(busDomain.getDescription());      returnBusDomain.setCounter(counter);      busDomains.add(returnBusDomain);    }    restWrapper=new RestWrapper(busDomains,RestWrapper.OK);    LOGGER.info("All records listed from BusDomain by User:" + principal.getName());  } catch (  MetadataException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public void removeListDataListener(ListDataListener l){  listenerList.remove(ListDataListener.class,l);}  }
class C{  public Integer call(){  try {    mSocket.getOutputStream().write(data);    mSocket.getOutputStream().flush();  } catch (  IOException e) {    return -1;  }  return 0;}  }
class C{  private int readFromResponse(State state,InnerState innerState,byte[] data,InputStream entityStream) throws StopRequest {  try {    return entityStream.read(data);  } catch (  IOException ex) {    logNetworkState();    mInfo.mCurrentBytes=innerState.mBytesSoFar;    mDB.updateDownload(mInfo);    if (cannotResume(innerState)) {      String message="while reading response: " + ex.toString() + ", can't resume interrupted download with no ETag";      throw new StopRequest(DownloaderService.STATUS_CANNOT_RESUME,message,ex);    } else {      throw new StopRequest(getFinalStatusForHttpError(state),"while reading response: " + ex.toString(),ex);    }  }}  }
class C{  @Override public int put(long key){  ArrayBasedLongToInternalIntFixedLengthBiMap map;  int bucket;  for (int i=0; i < readerAccessibleInfo.maps.length - 1; i++) {    map=readerAccessibleInfo.maps[i];    bucket=map.get(key);    if (bucket != defaultGetReturnValue) {      return bucket + readerAccessibleInfo.mapIndexOffsets[i];    }  }  int numStoredKeysBefore=currentActiveMap.getNumStoredKeys();  map=currentActiveMap;  bucket=map.put(key) + currentActiveMapIndexOffset;  numStoredKeysCounter.incr(currentActiveMap.getNumStoredKeys() - numStoredKeysBefore);  if (map.isAtCapacity()) {    addNewMap();  }  return bucket;}  }
class C{  public void notice(String notice){  bot.sendIRC().notice(serverUser.getNick(),notice);}  }
class C{  public void addListener(final PropertyChangeListener listener){  pcs.addPropertyChangeListener(listener);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeelementnodename.class,args);}  }
class C{  public WebHttpHandlerBuilder filters(WebFilter... filters){  if (!ObjectUtils.isEmpty(filters)) {    this.filters.addAll(Arrays.asList(filters));  }  return this;}  }
class C{  protected EnumeratorImpl(){  super();}  }
class C{  public static boolean isEntityImmune(EntityLivingBase entity,Potion potion){  return potion == AbyssalCraftAPI.coralium_plague && isEntityCoralium(entity) || potion == AbyssalCraftAPI.dread_plague && isEntityDread(entity) || potion == AbyssalCraftAPI.antimatter_potion && isEntityAnti(entity);}  }
class C{  public int reversedArcs(BayesNet other){  try {    Sync(other);    int nReversed=0;    for (int iAttribute=0; iAttribute < m_Instances.numAttributes(); iAttribute++) {      for (int iParent=0; iParent < m_ParentSets[iAttribute].getNrOfParents(); iParent++) {        int nParent=m_ParentSets[iAttribute].getParent(iParent);        if (!other.getParentSet(m_order[iAttribute]).contains(m_order[nParent]) && other.getParentSet(m_order[nParent]).contains(m_order[iAttribute])) {          nReversed++;        }      }    }    return nReversed;  } catch (  Exception e) {    System.err.println(e.getMessage());    return 0;  }}  }
class C{  public GridProjectionLocalJobMultipleArgumentsSelfTest(){  super(true);}  }
class C{  public static int computeCellInBlock(long cellIndex,int blockSize){  return (int)((cellIndex - 1) % blockSize);}  }
class C{  public void endDraw(){}  }
class C{  public HeapManager(final Composite parent,final int style){  super(parent,style);  final GridLayout gridLayout=new GridLayout(2,false);  gridLayout.horizontalSpacing=gridLayout.verticalSpacing=0;  setLayout(gridLayout);  createBar();  createButton();  updateContent();  createDefaultColors();}  }
class C{  private Item removeFromWorld(final Player player,final StackableItem stackableItem,final int quantity){  final StackableItem newItem=stackableItem.splitOff(quantity);  new ItemLogger().splitOff(player,stackableItem,newItem,quantity);  return newItem;}  }
class C{  public Observable<Void> deleteItem(FeedItem item,String reason,boolean notifyUser){  return deleteItem(item,reason,notifyUser,null);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col;  double noData;  int progress;  int i;  int numReclassRanges;  int numReclassRangesMinusOne;  String[] reclassRangeStr=null;  double[][] reclassRange;  boolean blnAssignMode=false;  String delimiter="\t";  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  reclassRangeStr=args[2].split(delimiter);  if (reclassRangeStr.length == 1) {    delimiter=";";    reclassRangeStr=args[2].split(delimiter);    if (reclassRangeStr.length == 1) {      delimiter=",";      reclassRangeStr=args[2].split(delimiter);      if (reclassRangeStr.length == 1) {        showFeedback("Unrecognized relcass string delimiter. Please use " + "a tab, semicolon, or comma to delimite relcass values.");        return;      }    }  }  if (reclassRangeStr[2].toLowerCase().equals("not specified")) {    blnAssignMode=true;  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    int rows=image.getNumberRows();    int cols=image.getNumberColumns();    double[] data;    noData=image.getNoDataValue();    numReclassRanges=reclassRangeStr.length / 3;    numReclassRangesMinusOne=numReclassRanges - 1;    reclassRange=new double[3][numReclassRanges];    i=0;    for (int b=0; b < reclassRangeStr.length; b++) {      if (!reclassRangeStr[b].toLowerCase().equals("not specified")) {        if (!reclassRangeStr[b].toLowerCase().equals("nodata")) {          reclassRange[i][b / 3]=Double.parseDouble(reclassRangeStr[b]);        } else {          reclassRange[i][b / 3]=noData;        }      } else {        reclassRange[i][b / 3]=0;      }      i++;      if (i == 3) {        i=0;      }    }    if (numReclassRanges == 0) {      showFeedback("There is an error with the reclass ranges.");      return;    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette(image.getPreferredPalette());    if (blnAssignMode) {      for (row=0; row < rows; row++) {        data=image.getRowValues(row);        for (col=0; col < cols; col++) {          for (i=0; i < numReclassRanges; i++) {            if (data[col] == reclassRange[1][i]) {              output.setValue(row,col,reclassRange[0][i]);              break;            }            if (i == numReclassRangesMinusOne) {              output.setValue(row,col,data[col]);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }    } else {      for (row=0; row < rows; row++) {        data=image.getRowValues(row);        for (col=0; col < cols; col++) {          for (i=0; i < numReclassRanges; i++) {            if (data[col] >= reclassRange[1][i] && data[col] < reclassRange[2][i]) {              output.setValue(row,col,reclassRange[0][i]);              break;            }            if (i == numReclassRangesMinusOne) {              output.setValue(row,col,data[col]);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }    }    image.close();    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void stencil(GL2 gl){  gl.glClear(GL.GL_STENCIL_BUFFER_BIT);  gl.glColorMask(false,false,false,false);  gl.glEnable(GL.GL_STENCIL_TEST);  gl.glStencilFunc(GL.GL_ALWAYS,1,-1);  gl.glStencilOp(GL.GL_KEEP,GL.GL_KEEP,GL.GL_REPLACE);  this.fill(gl);  gl.glStencilFunc(GL.GL_NOTEQUAL,1,-1);  gl.glStencilOp(GL.GL_KEEP,GL.GL_KEEP,GL.GL_REPLACE);  float lw=RenderUtilities.setLineWidth(gl,3.0f);  gl.glColorMask(true,true,true,true);  this.setOutlineColor(gl);  this.draw(gl);  gl.glLineWidth(lw);  gl.glDisable(GL.GL_STENCIL_TEST);  this.setFillColor(gl);  this.fill(gl);}  }
class C{  public ErrorResponseException(ErrorResponse errorResponse,Response response){  super(errorResponse.message());  this.errorResponse=errorResponse;  this.response=response;}  }
class C{  public static double kthSmallestValue(double[] array,int k){  int[] index=initialIndex(array.length);  return array[index[select(array,index,0,array.length - 1,k)]];}  }
class C{  private Set<String> fetchFastPoliciesForVMAX(URI poolID){  Set<String> policyNameSet=new HashSet<String>();  URIQueryResultList fastPolicyResult=new URIQueryResultList();  _objectCache.getDbClient().queryByConstraint(AlternateIdConstraint.Factory.getPoolFASTPolicyConstraint(poolID.toString()),fastPolicyResult);  Iterator<URI> fastPolicyItr=fastPolicyResult.iterator();  while (fastPolicyItr.hasNext()) {    AutoTieringPolicy tierPolicy=_objectCache.queryObject(AutoTieringPolicy.class,fastPolicyItr.next());    if (null != tierPolicy && tierPolicy.getPolicyEnabled()) {      policyNameSet.add(tierPolicy.getPolicyName());    }  }  return policyNameSet;}  }
class C{  public UnlockKeyPairAction(KseFrame kseFrame){  super(kseFrame);  putValue(LONG_DESCRIPTION,res.getString("UnlockKeyPairAction.statusbar"));  putValue(NAME,res.getString("UnlockKeyPairAction.text"));  putValue(SHORT_DESCRIPTION,res.getString("UnlockKeyPairAction.tooltip"));  putValue(SMALL_ICON,new ImageIcon(Toolkit.getDefaultToolkit().createImage(getClass().getResource(res.getString("UnlockKeyPairAction.image")))));}  }
class C{  public void keyPressed(KeyEvent ke){  int keyCode=ke.getKeyCode();  if (keyCode == KeyEvent.VK_B) {    motionBlur=!motionBlur;  } else   if (keyCode == KeyEvent.VK_A) {    useAA=!useAA;    createAnimationImage();  } else   if (keyCode == KeyEvent.VK_C) {    alterColor=!alterColor;    createAnimationImage();  } else   if (keyCode == KeyEvent.VK_I) {    useImage=!useImage;    createAnimationImage();  } else   if (keyCode == KeyEvent.VK_UP) {    changeResolution(true);  } else   if (keyCode == KeyEvent.VK_DOWN) {    changeResolution(false);  } else   if (keyCode == KeyEvent.VK_L) {    linear=!linear;  } else   if (keyCode >= KeyEvent.VK_1 && keyCode <= KeyEvent.VK_9) {    blurSize=keyCode - KeyEvent.VK_0;    prevMoveX=prevMoveY=null;  }}  }
class C{  public void addRoleFactor(Long roleKey,double factor){  UsageDetails details=roleAssignmentDetails.get(roleKey);  if (details == null) {    details=new UsageDetails();    putUsageDetails(roleKey,details);  }  details.setFactor(details.getFactor() + factor);  userFactors.addRoleFactor(roleKey,factor);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  double zConvFactor=1;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  zConvFactor=Double.parseDouble(args[2]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    double[] N=new double[8];    float slope;    float progress=0;    int[] Dy={-1,0,1,1,1,0,-1,-1};    int[] Dx={1,1,1,0,-1,-1,-1,0};    final double radToDeg=180 / Math.PI;    double Zx, Zy, Zxx, Zyy, Zxy, Zx2, Zy2, p, q;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=true;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double gridRes=inputFile.getCellSizeX();    double gridResTimes2=gridRes * 2;    double eightGridRes=8 * gridRes;    double gridResSquared=gridRes * gridRes;    double fourTimesGridResSquared=gridResSquared * 4;    double curv;    double noData=inputFile.getNoDataValue();    if (inputFile.getXYUnits().toLowerCase().contains("deg") || inputFile.getProjection().toLowerCase().contains("geog")) {      double midLat=(inputFile.getNorth() - inputFile.getSouth()) / 2.0;      if (midLat <= 90 && midLat >= -90) {        zConvFactor=1.0 / (113200 * Math.cos(Math.toRadians(midLat)));      }    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("blue_white_red.pal");    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          for (int i=0; i < 8; i++) {            N[i]=inputFile.getValue(row + Dy[i],col + Dx[i]);            if (N[i] != noData) {              N[i]=N[i] * zConvFactor;            } else {              N[i]=z * zConvFactor;            }          }          Zxx=(N[1] - 2 * z + N[5]) / gridResSquared;          Zyy=(N[7] - 2 * z + N[3]) / gridResSquared;          Zxy=(-N[6] + N[0] + N[4] - N[2]) / fourTimesGridResSquared;          curv=Zxx * Zxx + 2 * Zxy * Zxy + Zyy * Zyy;          outputFile.setValue(row,col,curv * radToDeg * 100);        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void updateObject(int columnIndex,Object x,SQLType targetSqlType) throws SQLException {  throw new NotUpdatable();}  }
class C{  public JBBPOut Byte(final int value) throws IOException {  assertNotEnded();  if (this.processCommands) {    _writeByte(value);  }  return this;}  }
class C{  public static boolean isAffectedByECCM(Entity ae,Coords a,Coords b){  ECMInfo ecmInfo=getECMEffects(ae,a,b,false,null);  return (ecmInfo != null) && ecmInfo.isECCM();}  }
class C{  public void addOpposingECMEffects(ECMInfo other){  if (((other.owner == null) || owner.isEnemyOf(other.owner))) {    strength+=other.strength;    angelStrength+=other.angelStrength;    isECMNova|=other.isECMNova;  } else   if ((other.owner != null) && !owner.isEnemyOf(other.owner)) {    eccmStrength+=other.eccmStrength;    angelECCMStrength+=other.angelECCMStrength;  }}  }
class C{  private static String decodeBase900toBase10(int[] codewords,int count) throws FormatException {  BigInteger result=BigInteger.ZERO;  for (int i=0; i < count; i++) {    result=result.add(EXP900[count - i - 1].multiply(BigInteger.valueOf(codewords[i])));  }  String resultString=result.toString();  if (resultString.charAt(0) != '1') {    throw FormatException.getFormatInstance();  }  return resultString.substring(1);}  }
class C{  public void beginReporting(){}  }
class C{  public synchronized void clear(){  super.clear();  mValue.clear();  initRange();}  }
class C{  protected int lengthOfByteStream(AbstractMRMessage m){  return m.getNumDataElements();}  }
class C{  private static String[] tidyOptionsArray(String[] options){  if (options == null || options.length < 1) {    return options;  }  Set<String> parsedOptions=new HashSet<String>();  for (  String optionsArrayItem : options) {    String[] optionsArrayItems=optionsArrayItem.split("[,\\s+]+");    for (    String option : optionsArrayItems) {      if (option != null && !option.equals("")) {        parsedOptions.add(option);      }    }  }  return parsedOptions.toArray(new String[parsedOptions.size()]);}  }
class C{  @Override public int onStartCommand(Intent intent,int flags,int startId){  Log.d(TAG,"onStartCommand()");  return super.onStartCommand(intent,flags,startId);}  }
class C{  public static void addSentenceRequiredMeta(Vertex question,Vertex answer,String required,Network network){  if (required == null || required.trim().isEmpty()) {    clearSentenceMeta(question,answer,Primitive.REQUIRED,network);  } else {    Relationship relationship=question.getRelationship(Primitive.RESPONSE,answer);    if (relationship != null) {      Vertex meta=network.createMeta(relationship);      meta.internalRemoveRelationships(Primitive.REQUIRED);      List<String> words=Utils.getWords(required);      for (      String keyword : words) {        Vertex word=network.createWord(keyword);        meta.addRelationship(Primitive.REQUIRED,word);        word.addRelationship(Primitive.QUESTION,question);      }    }    network.checkReduction(question);    Collection<Relationship> synonyms=question.getRelationships(Primitive.SYNONYM);    if (synonyms != null) {      for (      Relationship synonym : synonyms) {        relationship=synonym.getTarget().getRelationship(Primitive.RESPONSE,answer);        if (relationship != null) {          Vertex meta=network.createMeta(relationship);          meta.internalRemoveRelationships(Primitive.REQUIRED);          List<String> words=Utils.getWords(required);          for (          String keyword : words) {            meta.addRelationship(Primitive.REQUIRED,network.createWord(keyword));          }        }      }    }  }}  }
class C{  public void configureCommandStation(){  log.debug("start command station queuing thread");  commandStation=new jmri.jmrix.sprog.SprogCommandStation(st);  commandStation.setSystemConnectionMemo(this);  jmri.InstanceManager.setCommandStation(commandStation);switch (sprogMode) {case OPS:    slotThread=new Thread(commandStation);  slotThread.start();break;case SERVICE:break;}}  }
class C{  public int length(){  return sb.length();}  }
class C{  public boolean sameAs(InternalDistributedMember someLockGrantorMember,long someLockGrantorVersion,int someLockGrantorSerialNumber){  if (someLockGrantorMember == null) {    throw new IllegalStateException(LocalizedStrings.LockGrantorId_SOMELOCKGRANTORID_MUST_NOT_BE_NULL.toLocalizedString());  }  return someLockGrantorMember.equals(this.lockGrantorMember) && someLockGrantorVersion == this.lockGrantorVersion && someLockGrantorSerialNumber == this.lockGrantorSerialNumber;}  }
class C{  @Override public boolean loadDeferred(){  return true;}  }
class C{  public static StartImageScanResponse checkStartImageScanResponse(StartImageScanResponse response) throws RpcException {  logger.info("Checking {}",response);switch (response.getResult()) {case OK:    break;case SYSTEM_ERROR:  throw new SystemErrorException(response.getError());case DATASTORE_NOT_FOUND:throw new DatastoreNotFoundException(response.getError());case SCAN_IN_PROGRESS:throw new ScanInProgressException(response.getError());case SWEEP_IN_PROGRESS:throw new SweepInProgressException(response.getError());default :throw new RpcException(String.format("Unexpected return code: %s",response.getResult()));}return response;}  }
class C{  public static File workspaces(){  return defOverride(ROOT + "/ide-workspaces",override_workspaces);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:44.071 -0500",hash_original_method="1FEC2A39C917937DB00CBC5BA91E5501",hash_generated_method="BB37420F70B665076F94DCFCD970A581") public void stopProfiling(){  if (mThread.isProfiling()) {    Debug.stopMethodTracing();  }}  }
class C{  protected void adoptNodes(FlexibleNode node,Map<Taxon,Integer> taxonNumberMap){  if (inEdit)   throw new RuntimeException("Mustn't be in an edit transaction to call this method!");  internalNodeCount=0;  externalNodeCount=0;  root=node;  do {    node=(FlexibleNode)Tree.Utils.postorderSuccessor(this,node);    if (node.isExternal()) {      externalNodeCount++;    } else     internalNodeCount++;  } while (node != root);  nodeCount=internalNodeCount + externalNodeCount;  nodes=new FlexibleNode[nodeCount];  node=root;  int i=0;  int j=externalNodeCount;  do {    node=(FlexibleNode)Tree.Utils.postorderSuccessor(this,node);    if (node.isExternal()) {      if (taxonNumberMap != null && taxonNumberMap.size() > 0) {        i=taxonNumberMap.get(node.getTaxon());      }      node.setNumber(i);      nodes[i]=node;      if (taxonNumberMap == null || taxonNumberMap.size() == 0) {        i++;      }    } else {      node.setNumber(j);      nodes[j]=node;      j++;    }  } while (node != root);}  }
class C{  public static boolean isSuspended(RVMThread t){  t.monitor().lockNoHandshake();  boolean isSuspended=t.blockedFor(RVMThread.suspendBlockAdapter);  t.monitor().unlock();  return isSuspended;}  }
class C{  public GuacamoleClientException(Throwable cause){  super(cause);}  }
class C{  protected boolean afterDelete(boolean success){  if (success)   delete_Tree(MTree_Base.TREETYPE_Organization);  return success;}  }
class C{  public void writeToParcel(Parcel dest,int flags){  dest.writeString(mNetworkName);  dest.writeParcelable(mOwner,flags);  dest.writeByte(mIsGroupOwner ? (byte)1 : (byte)0);  dest.writeInt(mClients.size());  for (  WifiP2pDevice client : mClients) {    dest.writeParcelable(client,flags);  }  dest.writeString(mPassphrase);  dest.writeString(mInterface);  dest.writeInt(mNetId);  dest.writeInt(mGoOperFreq);}  }
class C{  private String formatUrl(String path){  String urlPath=path;  if (!path.startsWith("/")) {    urlPath=String.format("/%s",path);  }  return String.format("%s%s",this.baseUrl,urlPath);}  }
class C{  private static ImmutableSet<ResourceRecordSet> fakeDomainRecords(String domainName,int v4InBailiwickNameservers,int v6InBailiwickNameservers,int externalNameservers,int dsRecords){  ImmutableSet.Builder<ResourceRecordSet> recordSetBuilder=new ImmutableSet.Builder<>();  if (v4InBailiwickNameservers > 0) {    ImmutableList.Builder<String> nameserverHostnames=new ImmutableList.Builder<>();    for (int i=0; i < v4InBailiwickNameservers; i++) {      nameserverHostnames.add(i + ".ip4." + domainName+ ".");    }    recordSetBuilder.add(new ResourceRecordSet().setKind("dns#resourceRecordSet").setType("NS").setName(domainName + ".").setTtl((int)DEFAULT_TTL.getStandardSeconds()).setRrdatas(nameserverHostnames.build()));    for (int i=0; i < v4InBailiwickNameservers; i++) {      recordSetBuilder.add(new ResourceRecordSet().setKind("dns#resourceRecordSet").setType("A").setName(i + ".ip4." + domainName+ ".").setTtl((int)DEFAULT_TTL.getStandardSeconds()).setRrdatas(ImmutableList.of(IPv4.toString())));    }  }  if (v6InBailiwickNameservers > 0) {    ImmutableList.Builder<String> nameserverHostnames=new ImmutableList.Builder<>();    for (int i=0; i < v6InBailiwickNameservers; i++) {      nameserverHostnames.add(i + ".ip6." + domainName+ ".");    }    recordSetBuilder.add(new ResourceRecordSet().setKind("dns#resourceRecordSet").setType("NS").setName(domainName + ".").setTtl((int)DEFAULT_TTL.getStandardSeconds()).setRrdatas(nameserverHostnames.build()));    for (int i=0; i < v6InBailiwickNameservers; i++) {      recordSetBuilder.add(new ResourceRecordSet().setKind("dns#resourceRecordSet").setType("AAAA").setName(i + ".ip6." + domainName+ ".").setTtl((int)DEFAULT_TTL.getStandardSeconds()).setRrdatas(ImmutableList.of(IPv6.toString())));    }  }  if (externalNameservers > 0) {    ImmutableList.Builder<String> nameserverHostnames=new ImmutableList.Builder<>();    for (int i=0; i < externalNameservers; i++) {      nameserverHostnames.add(i + ".external.");    }    recordSetBuilder.add(new ResourceRecordSet().setKind("dns#resourceRecordSet").setType("NS").setName(domainName + ".").setTtl((int)DEFAULT_TTL.getStandardSeconds()).setRrdatas(nameserverHostnames.build()));  }  if (dsRecords > 0) {    ImmutableList.Builder<String> dsRecordData=new ImmutableList.Builder<>();    for (int i=0; i < dsRecords; i++) {      dsRecordData.add(DelegationSignerData.create(i,DS_DATA.getAlgorithm(),DS_DATA.getDigestType(),DS_DATA.getDigest()).toRrData());    }    recordSetBuilder.add(new ResourceRecordSet().setKind("dns#resourceRecordSet").setType("DS").setName(domainName + ".").setTtl((int)DEFAULT_TTL.getStandardSeconds()).setRrdatas(dsRecordData.build()));  }  return recordSetBuilder.build();}  }
class C{  public static Builder from(URI swaggerUri){  Validate.notNull(swaggerUri,"swaggerUri must not be null");  String scheme=swaggerUri.getScheme();  if (scheme != null && swaggerUri.getScheme().startsWith("http")) {    try {      return from(swaggerUri.toURL());    } catch (    MalformedURLException e) {      throw new RuntimeException("Failed to convert URI to URL",e);    }  } else   if (scheme != null && swaggerUri.getScheme().startsWith("file")) {    return from(Paths.get(swaggerUri));  } else {    return from(URIUtils.convertUriWithoutSchemeToFileScheme(swaggerUri));  }}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildSeamstress(zone);}  }
class C{  public DeterministicKey(ImmutableList<ChildNumber> childNumberPath,byte[] chainCode,BigInteger priv,@Nullable DeterministicKey parent,int depth,int parentFingerprint){  super(priv,compressPoint(ECKey.publicPointFromPrivate(priv)));  checkArgument(chainCode.length == 32);  this.parent=parent;  this.childNumberPath=checkNotNull(childNumberPath);  this.chainCode=Arrays.copyOf(chainCode,chainCode.length);  this.depth=depth;  this.parentFingerprint=ascertainParentFingerprint(parent,parentFingerprint);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @WorkerThread public void claimDevice(String deviceID) throws ParticleCloudException {  try {    mainApi.claimDevice(deviceID);  } catch (  RetrofitError error) {    throw new ParticleCloudException(error);  }}  }
class C{  public static Color rgbfc(double red,double green,double blue){  return rgbafc(red,green,blue,1F);}  }
class C{  private boolean isValid(String value){  if (value == null) {    return false;  }  Matcher matchUrlPat=URL_PATTERN.matcher(value);  if (!LEGAL_ASCII_PATTERN.matcher(value).matches()) {    return false;  }  if (!matchUrlPat.matches()) {    return false;  }  if (!isValidScheme(matchUrlPat.group(PARSE_URL_SCHEME))) {    return false;  }  if (!isValidAuthority(matchUrlPat.group(PARSE_URL_AUTHORITY))) {    return false;  }  if (!isValidPath(matchUrlPat.group(PARSE_URL_PATH))) {    return false;  }  if (!isValidQuery(matchUrlPat.group(PARSE_URL_QUERY))) {    return false;  }  return true;}  }
class C{  public String populateWard(){  try {    wardList=boundaryService.getChildBoundariesByBoundaryId(zoneId);  } catch (  final Exception e) {    LOGGER.error("Error while loading warda - wards." + e.getMessage());    addFieldError("location",getText("slCode.wardLoad.failure"));    throw new ApplicationRuntimeException("Unable to load ward information",e);  }  return WARDS;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case SexecPackage.EXECUTION_NODE__NAME:    return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);case SexecPackage.EXECUTION_NODE__REACTIONS:  return reactions != null && !reactions.isEmpty();case SexecPackage.EXECUTION_NODE__SIMPLE_NAME:return SIMPLE_NAME_EDEFAULT == null ? simpleName != null : !SIMPLE_NAME_EDEFAULT.equals(simpleName);case SexecPackage.EXECUTION_NODE__REACT_SEQUENCE:return reactSequence != null;}return super.eIsSet(featureID);}  }
class C{  public int searchInsert(ArrayList<Integer> A,int target){  int start=0;  int end=A.size() - 1;  int mid;  if (A == null || A.size() == 0 || target <= A.get(0)) {    return 0;  }  while (start + 1 < end) {    mid=start + (end - start) / 2;    if (A.get(mid) == target) {      return mid;    } else     if (A.get(mid) < target) {      start=mid;    } else {      end=mid;    }  }  if (A.get(end) == target) {    return end;  }  if (A.get(end) < target) {    return end + 1;  }  if (A.get(start) == target) {    return start;  }  return start + 1;}  }
class C{  @Override public NotificationChain eInverseAdd(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case DomPackage.LINE_TAG__DOCLET:    if (eInternalContainer() != null)     msgs=eBasicRemoveFromContainer(msgs);  return basicSetDoclet((Doclet)otherEnd,msgs);}return super.eInverseAdd(otherEnd,featureID,msgs);}  }
class C{  public void createComponents(MapHandler mapHandler){  int i;  if (mapHandler == null) {    logger.fine("no MapHandler to use to handle created components, skipping creation.");    return;  }  ProgressListenerGauge plg=null;  if (updateProgress) {    try {      String internString=i18n.get(this.getClass(),"progressTitle","Progress");      plg=new ProgressListenerGauge(internString);      plg.setWindowSupport(new WindowSupport(plg,new WindowSupport.Frm("",true)));      addProgressListener(plg);    } catch (    Exception e) {    }  }  Vector<String> debugList=PropUtils.parseSpacedMarkers(properties.getProperty(Environment.DebugList));  int size=debugList.size();  for (  String debugMarker : debugList) {    Debug.put(debugMarker);    if (DEBUG) {      logger.fine("adding " + debugMarker + " to Debug list.");    }  }  String propPrefix=PropUtils.getScopedPropertyPrefix(getPropertyPrefix());  String componentProperty=propPrefix + PropertyHandler.componentProperty;  Vector<String> componentList=PropUtils.parseSpacedMarkers(properties.getProperty(componentProperty));  if (logger.isLoggable(Level.FINER)) {    logger.finer("creating components from " + componentList);  }  if (updateProgress) {    fireProgressUpdate(ProgressEvent.START,i18n.get(this.getClass(),"creatingComponentsProgressMessage","Creating Components"),0,100);  }  Vector components=ComponentFactory.create(componentList,properties,(updateProgress ? getProgressSupport() : null),true);  size=components.size();  for (i=0; i < size; i++) {    Object obj=(Object)components.elementAt(i);    try {      if (obj instanceof String) {        logger.warning("finding out that the " + obj + " wasn't created");        continue;      }      mapHandler.addLater(obj);      String markerName=((String)componentList.elementAt(i)).intern();      prefixLibrarian.put(markerName,obj);      addUsedPrefix(markerName);    } catch (    MultipleSoloMapComponentException msmce) {      logger.warning("PropertyHandler.createComponents(): " + "tried to add multiple components of the same " + "type when only one is allowed! - "+ msmce);    }  }  mapHandler.purgeLaterList();  if (updateProgress) {    fireProgressUpdate(ProgressEvent.DONE,i18n.get(this.getClass(),"completedProgressMessage","Created all components, ready..."),size,size);    removeProgressListener(plg);  }}  }
class C{  public SuperReflect call(String name) throws SuperReflectException {  return call(name,new Object[0]);}  }
class C{  private boolean hasEchoBreakpoint(final BreakpointAddress address){  return activeEchoBreakpoints.containsKey(address);}  }
class C{  public static void acceptArmorModifier(EntityLivingBase entity,DamageSource damageSource,DamageModifier modifier,double damage){  Optional<DamageObject> property=modifier.getCause().first(DamageObject.class);  final net.minecraft.item.ItemStack[] inventory=entity instanceof EntityPlayer ? ((EntityPlayer)entity).inventory.armorInventory : entity.armorArray;  if (property.isPresent()) {    damage=Math.abs(damage) * 25;    net.minecraft.item.ItemStack stack=inventory[property.get().slot];    int itemDamage=(int)(damage / 25D < 1 ? 1 : damage / 25D);    stack.damageItem(itemDamage,entity);    if (stack.stackSize <= 0) {      inventory[property.get().slot]=null;    }  }}  }
class C{  public CategoryLabelPosition(RectangleAnchor categoryAnchor,TextBlockAnchor labelAnchor,TextAnchor rotationAnchor,double angle,CategoryLabelWidthType widthType,float widthRatio){  ParamChecks.nullNotPermitted(categoryAnchor,"categoryAnchor");  ParamChecks.nullNotPermitted(labelAnchor,"labelAnchor");  ParamChecks.nullNotPermitted(rotationAnchor,"rotationAnchor");  ParamChecks.nullNotPermitted(widthType,"widthType");  this.categoryAnchor=categoryAnchor;  this.labelAnchor=labelAnchor;  this.rotationAnchor=rotationAnchor;  this.angle=angle;  this.widthType=widthType;  this.widthRatio=widthRatio;}  }
class C{  public boolean markSupported(){  return in.markSupported();}  }
class C{  @Override protected void onStart(){  if (null != mDownloaderClientStub) {    mDownloaderClientStub.connect(this);  }  super.onStart();}  }
class C{  private void initServer() throws Exception {  _server=new Server();  initConnectors();  ServletContextHandler rootHandler=new ServletContextHandler(ServletContextHandler.SESSIONS);  rootHandler.setContextPath("/");  _server.setHandler(rootHandler);  ((AbstractSessionManager)rootHandler.getSessionHandler().getSessionManager()).setUsingCookies(false);  if (_app != null) {    ResourceConfig config=new DefaultResourceConfig();    config.add(_app);    Map<String,MediaType> type=config.getMediaTypeMappings();    type.put(MediaType.TEXT_PLAIN,MediaType.TEXT_PLAIN_TYPE);    rootHandler.addServlet(new ServletHolder(new ServletContainer(config)),"/*");  }}  }
class C{  public void testGetServletMappingsWithMultipleMappings() throws Exception {  String xml=WEBAPP_TEST_HEADER + "  <servlet-mapping>" + "    <servlet-name>s1</servlet-name>"+ "    <url-pattern>/s1mapping1</url-pattern>"+ "  </servlet-mapping>"+ "  <servlet-mapping>"+ "    <servlet-name>s1</servlet-name>"+ "    <url-pattern>/s1mapping2</url-pattern>"+ "  </servlet-mapping>"+ "  <servlet-mapping>"+ "    <servlet-name>s1</servlet-name>"+ "    <url-pattern>/s1mapping3</url-pattern>"+ "  </servlet-mapping>"+ "</web-app>";  this.builder.build(new ByteArrayInputStream(xml.getBytes("UTF-8")));  WebXml webXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(xml.getBytes("UTF-8")),getEntityResolver());  List<String> servletMappings=WebXmlUtils.getServletMappings(webXml,"s1");  assertEquals(3,servletMappings.size());  assertEquals("/s1mapping1",servletMappings.get(0));  assertEquals("/s1mapping2",servletMappings.get(1));  assertEquals("/s1mapping3",servletMappings.get(2));}  }
class C{  public String toString(){  return String.format("SerializableLocation[%s %f, %f acc(%b)=%f alt(%b)=%f bear(%b)=%f speed(%b)=%f time=%d]",provider,latitude,longitude,hasAccuracy,accuracy,hasAltitude,altitude,hasBearing,bearing,hasSpeed,speed,time);}  }
class C{  public static boolean isNotEmpty(IsEmpty o){  return o != null && !o.isEmpty();}  }
class C{  public static boolean every(Object self){  BooleanReturningMethodInvoker bmi=new BooleanReturningMethodInvoker();  for (Iterator iter=InvokerHelper.asIterator(self); iter.hasNext(); ) {    if (!bmi.convertToBoolean(iter.next())) {      return false;    }  }  return true;}  }
class C{  public String readLine() throws IOException {  String res=null;  while (this.len > 0) {    for (int i=this.curr; i < this.len; i++) {      if (this.buff[i] == (byte)'\n' || this.buff[i] == (byte)'\r') {        byte eol=this.buff[i];        String s=new String(this.buff,this.curr,i - this.curr);        if (res == null)         res=s; else         res+=s;        this.skip(i + 1 - this.curr);        if (eol == (byte)'\r' && this.len > 0 && this.buff[this.curr] == (byte)'\n') {          this.readByte();        }        return res;      }    }    String s=new String(this.buff,this.curr,this.len - this.curr);    if (res == null)     res=s; else     res+=s;    this.skip(this.len - this.curr);  }  return res;}  }
class C{  public void putFile(VirtualFile file){  makeDirectory();  try {    File tmp=new File(filePath(file.getName() + ".tmp"));    tmp=FileUtils.getAbsoluteFile(tmp);    if (tmp == null) {      throw new SwcException.FileNotWritten(file.getName(),"");    }    tmp.getParentFile().mkdirs();    OutputStream out=new BufferedOutputStream(new FileOutputStream(tmp));    FileUtil.streamOutput(file.getInputStream(),out);    out.close();    File f=new File(filePath(file.getName()));    FileUtils.renameFile(tmp,f);    if (fileList == null) {      fileList=new HashSet<String>();    }    fileList.add(file.getName());  } catch (  SwcException e) {    throw e;  }catch (  Exception e) {    throw new SwcException.FileNotWritten(file.getName(),e.getMessage());  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0xD1C8945E,version=150,checkInsideInterrupt=true) public int sceHttpEnd(){  checkHttpInit();  isSystemCookieLoaded=false;  isHttpInit=false;  if (memInfo != null) {    Modules.SysMemUserForUserModule.free(memInfo);    memInfo=null;  }  return 0;}  }
class C{  public static String fromUnixTime(int seconds,String format){  format=convertToSimpleDateFormat(format);  SimpleDateFormat formatter=new SimpleDateFormat(format,Locale.ENGLISH);  return formatter.format(new Date(seconds * 1000L));}  }
class C{  public void registerInput(String varName,RDD<String> rdd,String format,long rlen,long clen) throws DMLRuntimeException {  registerInput(varName,rdd.toJavaRDD().mapToPair(new ConvertStringToLongTextPair()),format,rlen,clen,-1,null);}  }
class C{  public MmsException(){  super();}  }
class C{  @Nullable public static MediaSource from(String sourceUrn){  String applicationId=getCastApplicationId(sourceUrn);  if (applicationId == null)   return null;  return new MediaSource(sourceUrn,applicationId);}  }
class C{  public void addFocusListener(FocusListener l){  if (m_textPane == null)   super.addFocusListener(l); else   m_textPane.addFocusListener(l);}  }
class C{  public CharSeq trim(){  return CharSeq.of(str.trim());}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static SimpleScheduleBuilder repeatMinutelyForTotalCount(int count,int minutes){  if (count < 1)   throw new IllegalArgumentException("Total count of firings must be at least one! Given count: " + count);  return simpleSchedule().withIntervalInMinutes(minutes).withRepeatCount(count - 1);}  }
class C{  public void testSimpleClassAsProperty() throws Exception {  Map<String,Object> result=writeAndMap(new Cat("Beelzebub","tabby"));  assertEquals(3,result.size());  assertEquals("Beelzebub",result.get("name"));  assertEquals("tabby",result.get("furColor"));  String classProp=Id.CLASS.getDefaultPropertyName();  assertEquals(Cat.class.getName(),result.get(classProp));}  }
class C{  public AlignmentTemplates(Properties prop,SourceFilter sourceFilter){  this.maxFertility=Double.parseDouble(prop.getProperty(PhraseExtract.MAX_FERTILITY_OPT,Integer.toString(DEFAULT_MAX_FERTILITY)));  this.sourceFilter=sourceFilter;}  }
class C{  public void addUserOverride(String userId,PermissionOverride override){  userOverrides.put(userId,override);}  }
class C{  public int readGamma() throws IOException {  int preComp;  if ((fill >= 16 || refill() >= 16) && (preComp=GAMMA[current >> (fill - 16) & 0xFFFF]) != 0) {    readBits+=preComp >> 16;    fill-=preComp >> 16;    return preComp & 0xFFFF;  }  final int msb=readUnary();  return ((1 << msb) | readInt(msb)) - 1;}  }
class C{  public PositionTermPayloadCoordinator(PositionSpec positionSpec){  this.positionSpec=positionSpec;}  }
class C{  public boolean isSelfService(){  Object oo=get_Value(COLUMNNAME_IsSelfService);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean isPaintable(){  return true;}  }
class C{  public static void closeCoreDBConnections(){synchronized (MyJDBCConnection.class) {    MyJDBCConnection.flagForRenewal();  }}  }
class C{  private String tryUpload(String tag,boolean force) throws InterruptedException {  String lastErrorMessage=null;  setUploadStatus(tag,Status.PENDING,null,null);  for (int i=0; i < UPLOAD_RETRY_TIMES; i++) {    try {      setUploadStatus(tag,Status.IN_PROGRESS,0,null);      log.info("To remove {} from pending upload tasks:{}",tag,pendingUploadTasks);      pendingUploadTasks.remove(tag);      BackupFileSet files=this.cli.getDownloadFiles(tag);      if (files.isEmpty()) {        setUploadStatus(null,Status.FAILED,null,ErrorCode.BACKUP_NOT_EXIST);        return String.format("Cannot find target backup set '%s'.",tag);      }      if (!files.isValid()) {        setUploadStatus(null,Status.FAILED,null,ErrorCode.INVALID_BACKUP);        return "Cannot get enough files for specified backup";      }      String zipName=this.cli.generateZipFileName(tag,files);      if (hasCompleteBackupFileOnServer(tag,zipName)) {        if (force) {          zipName=renameToSolveDuplication(zipName);        } else {          setUploadStatus(null,Status.FAILED,null,ErrorCode.REMOTE_ALREADY_EXIST);          return String.format("Backup(%s) already exist on external server",tag);        }      }      Long existingLen=uploader.getFileSize(zipName);      long len=existingLen == null ? 0 : existingLen;      log.info("Uploading {} at offset {}",tag,existingLen);      try (OutputStream uploadStream=uploader.upload(zipName,len)){        this.cli.uploadTo(files,len,uploadStream);      }       markIncompleteZipFileFinished(zipName,true);      setUploadStatus(null,Status.DONE,100,null);      return null;    } catch (    Exception e) {      lastErrorMessage=e.getMessage();      if (lastErrorMessage == null || lastErrorMessage.isEmpty()) {        lastErrorMessage=e.getClass().getSimpleName();      }      log.warn(String.format("An attempt to upload backup %s is failed",tag),e);    }    Thread.sleep(UPLOAD_RETRY_DELAY_MS);  }  setUploadStatus(null,Status.FAILED,null,ErrorCode.UPLOAD_FAILURE);  return lastErrorMessage;}  }
class C{  private boolean compareLumaPanes(){  int d, e, f=0;  for (int j=0; j < NB_DECODED; j++) {    for (int i=0; i < mSize; i+=10) {      d=(mInitialImage[i] & 0xFF) - (mDecodedVideo[j][i] & 0xFF);      e=(mInitialImage[i + 1] & 0xFF) - (mDecodedVideo[j][i + 1] & 0xFF);      d=d < 0 ? -d : d;      e=e < 0 ? -e : e;      if (d > 50 && e > 50) {        mDecodedVideo[j]=null;        f++;        break;      }    }  }  return f <= NB_DECODED / 2;}  }
class C{  protected void prepare(){}  }
class C{  protected void assertDeliveryStates(final Collection<CustomerOrderDelivery> deliveries,final String expectedState){  for (  CustomerOrderDelivery delivery : deliveries) {    assertEquals("Delivery " + delivery.getDeliveryGroup() + ", no "+ delivery.getDeliveryNum(),expectedState,delivery.getDeliveryStatus());  }}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writePaint(this.arrowPaint,stream);  SerialUtilities.writeStroke(this.arrowStroke,stream);}  }
class C{  public static void isNonNegativeNumber(String member,BigDecimal inputValue) throws ValidationException {  if (inputValue.compareTo(BigDecimal.ZERO) < 0) {    ValidationException vf=new ValidationException(ReasonEnum.POSITIVE_NUMBER,member,new Object[]{inputValue.toPlainString()});    logValidationFailure(vf);    throw vf;  }}  }
class C{  public DtoImageServiceImpl(final DtoFactory dtoFactory,final GenericService<SeoImage> seoImageGenericService,final AdaptersRepository adaptersRepository){  super(dtoFactory,seoImageGenericService,adaptersRepository);  imageService=(ImageService)seoImageGenericService;}  }
class C{  public SuperTypesList(Comparator<E> comparator){  set=new TreeSet<>(comparator);  list=new ArrayList<>();}  }
class C{  public static Long toLong(boolean b){  return Long.valueOf(toLongValue(b));}  }
class C{  public Boolean isZoom(){  return zoom;}  }
class C{  public SoundPlayer(Context appContext){  mAppContext=appContext;  final int audioType=getAudioTypeForSoundPool();  mSoundPool=new SoundPool(1,audioType,0);}  }
class C{  public void updateDatabasePostExecute(){  task=new searchTask();  task.execute(query);}  }
class C{  public void nextCommand(){  commandNo++;  String text="";  if (commandNo >= 0 && commandNo < previousCommands.size()) {    text=((String)previousCommands.elementAt(commandNo)).trim();  } else   if (commandNo >= previousCommands.size()) {    text="";    commandNo=previousCommands.size();  }  textArea=getText();  int pos1=textArea.lastIndexOf(GlobalValues.groovyLabPromptString) + 2;  setText(textArea.substring(0,pos1) + text);  setCaretPosition(getText().length());}  }
class C{  public void addIncludedAttributes(final String elementName,final List attrNames){  List attrNamesList=null;  if ((attrNamesList=(List)_includedElementAttrsMap.get(elementName)) == null) {    attrNamesList=new ArrayList();  }  attrNamesList.addAll(attrNames);  _includedElementAttrsMap.put(elementName,attrNamesList);}  }
class C{  private static int parseType(final String signature,int pos,final SignatureVisitor v){  char c;  int start, end;  boolean visited, inner;  String name;switch (c=signature.charAt(pos++)) {case 'Z':case 'C':case 'B':case 'S':case 'I':case 'F':case 'J':case 'D':case 'V':    v.visitBaseType(c);  return pos;case '[':return parseType(signature,pos,v.visitArrayType());case 'T':end=signature.indexOf(';',pos);v.visitTypeVariable(signature.substring(pos,end));return end + 1;default :start=pos;visited=false;inner=false;for (; ; ) {switch (c=signature.charAt(pos++)) {case '.':case ';':if (!visited) {name=signature.substring(start,pos - 1);if (inner) {v.visitInnerClassType(name);} else {v.visitClassType(name);}}if (c == ';') {v.visitEnd();return pos;}start=pos;visited=false;inner=true;break;case '<':name=signature.substring(start,pos - 1);if (inner) {v.visitInnerClassType(name);} else {v.visitClassType(name);}visited=true;top: for (; ; ) {switch (c=signature.charAt(pos)) {case '>':break top;case '*':++pos;v.visitTypeArgument();break;case '+':case '-':pos=parseType(signature,pos + 1,v.visitTypeArgument(c));break;default :pos=parseType(signature,pos,v.visitTypeArgument('='));break;}}}}}}  }
class C{  public SyncPatternMatcher(long sync,int softModeErrorThreshold){  this(sync);  mSoftModeErrorThreshold=softModeErrorThreshold;}  }
class C{  public void addSession(AbstractIoSession session){  sessions.add(session);  CloseFuture closeFuture=session.getCloseFuture();  closeFuture.addListener(sessionCloseListener);}  }
class C{  public DateTime toDateTimeAtMidnight(DateTimeZone zone){  Chronology chrono=getChronology().withZone(zone);  return new DateTime(getYear(),getMonthOfYear(),getDayOfMonth(),0,0,0,0,chrono);}  }
class C{  protected MimeMessage createMessage() throws MessagingException {  MimeMessage messageOut;  if (isMaxMessageSizeExceeded())   messageOut=createEmptyMessage(); else   messageOut=new MimeMessage(getMessageIn());  messageOut.addHeader("X-fetched-from",getFetchTaskName());  return messageOut;}  }
class C{  public static int max(int a,int b){  return a > b ? a : b;}  }
class C{  public void updateElevationExtremities(double elevation){  elevationExtremities.update(elevation);}  }
class C{  public FileSMBShare(String name,String description,String permissionType,String permission,String maxUsers,String nativeId,String path){  this._name=name;  this._description=description;  this._path=path;  try {    this._permissionType=Enum.valueOf(PermissionType.class,permissionType.toLowerCase());  } catch (  Exception e) {    throw new IllegalArgumentException("Invalid Permission Type:  Must be one of \"allow\" or \"deny\"");  }  try {    this._permission=Enum.valueOf(Permission.class,permission.toLowerCase());  } catch (  Exception e) {    throw new IllegalArgumentException("Invalid Permission:  Must be one of \"read\" or \"change\" or \"full\"");  }  this._maxUsers=Integer.parseInt(maxUsers);  this._nativeId=nativeId;}  }
class C{  public boolean next() throws Exception {  if ((!m_SuitableData) || (m_Classifiers.size() >= m_NumIterations) || (m_Diff <= Utils.SMALL)) {    return false;  }  m_Classifiers.add(AbstractClassifier.makeCopy(m_Classifier));  m_Classifiers.get(m_Classifiers.size() - 1).buildClassifier(m_Data);  m_Data=residualReplace(m_Data,m_Classifiers.get(m_Classifiers.size() - 1),true);  double sum=0;  for (int i=0; i < m_Data.numInstances(); i++) {    sum+=m_Data.instance(i).weight() * m_Data.instance(i).classValue() * m_Data.instance(i).classValue();  }  if (m_Debug) {    System.err.println("Sum of squared residuals : " + sum);  }  m_Diff=m_SSE - sum;  m_SSE=sum;  return true;}  }
class C{  public static List<Element> findSubElements(Element parent) throws IllegalArgumentException {  NodeList l=parent.getChildNodes();  List<Element> elements=new ArrayList<Element>(l.getLength());  for (int i=0; i < l.getLength(); i++) {    Node n=l.item(i);    if (n.getNodeType() == Node.ELEMENT_NODE) {      elements.add((Element)n);    } else     if (n.getNodeType() == Node.TEXT_NODE) {      String text=((Text)n).getNodeValue();      if (text.trim().length() > 0) {        throw new IllegalArgumentException("non-ws text encountered in " + parent + ": "+ text);      }    } else     if (n.getNodeType() == Node.COMMENT_NODE) {    } else {      throw new IllegalArgumentException("unexpected non-element child of " + parent + ": "+ n);    }  }  return elements;}  }
class C{  public Void doInBackground(){  try {    setYahooContractDetails(contract);    this.brokerModel.contractDetails(contract.getId(),contract);    this.brokerModel.contractDetailsEnd(contract.getId());    ZonedDateTime endDate=TradingCalendar.getZonedDateTimeFromDateTimeString(this.endDateTime,"yyyyMMdd HH:mm:ss");    ChartDays chartDays=ChartDays.newInstance();    chartDays.setDisplayName(this.durationStr);    BarSize barSize=BarSize.newInstance();    barSize.setDisplayName(this.barSizeSetting);    ZonedDateTime startDate=endDate.minusDays((Integer.parseInt(chartDays.getCode()) - 1));    startDate=TradingCalendar.getPrevTradingDay(startDate);    startDate=TradingCalendar.getDateAtTime(startDate,0,0,0);    if (BarSize.DAY == Integer.parseInt(barSize.getCode())) {      this.setYahooPriceDataDay(this.reqId,this.contract.getSymbol(),startDate,endDate);    } else {      this.setYahooPriceDataIntraday(this.reqId,this.contract.getSymbol(),Integer.parseInt(chartDays.getCode()),startDate,endDate);    }    _log.debug("YahooBroker.doInBackground finished ReqId: " + this.reqId + " Symbol: "+ this.contract.getSymbol()+ " Start Date: "+ startDate+ " End Date: "+ endDate+ " BarSize: "+ barSize.getCode()+ " ChartDays: "+ chartDays.getCode());    this.brokerModel.historicalData(this.reqId,"finished- at yyyyMMdd HH:mm:ss",0,0,0,0,0,0,0,false);  } catch (  Exception ex) {    _log.error("Error YahooBroker Symbol: " + contract.getSymbol() + " Msg: "+ ex.getMessage(),ex);  }  return null;}  }
class C{  public static Intersection intersect(Line line,Vec4 a,Vec4 b,Vec4 c){  return intersect(line,a.x,a.y,a.z,b.x,b.y,b.z,c.x,c.y,c.z);}  }
class C{  private static int consumeDuplicates(int[] tmp,int tmpIdx,int tmpi){  while (tmpi < tmp.length) {    int nextTmp=tmp[tmpi];    int nextTmpIdx=getSparseIndex(nextTmp);    if (tmpIdx != nextTmpIdx) {      return tmpi;    }    tmpi++;  }  return tmpi;}  }
class C{  private EmrClusterDefinitionEntity createEmrClusterDefinitionEntity(NamespaceEntity namespaceEntity,EmrClusterDefinitionCreateRequest request) throws Exception {  String emrClusterConfiguration=xmlHelper.objectToXml(request.getEmrClusterDefinition());  EmrClusterDefinitionEntity emrClusterDefinitionEntity=new EmrClusterDefinitionEntity();  emrClusterDefinitionEntity.setNamespace(namespaceEntity);  emrClusterDefinitionEntity.setName(request.getEmrClusterDefinitionKey().getEmrClusterDefinitionName());  emrClusterDefinitionEntity.setConfiguration(emrClusterConfiguration);  return emrClusterDefinitionEntity;}  }
class C{  @POST @Path("cluster/poweroff") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.SECURITY_ADMIN,Role.RESTRICTED_SECURITY_ADMIN}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public Response powerOffCluster(@QueryParam("force") String forceSet) throws Exception {  _log.debug("Poweroff cluster");  PowerOffState.State targetPoweroffState=_coordinator.getTargetInfo(PowerOffState.class).getPowerOffState();  _log.info("Current target poweroff state is: {}",targetPoweroffState.toString());  if (targetPoweroffState.equals(PowerOffState.State.FORCESTART) || targetPoweroffState.equals(PowerOffState.State.START)) {    return Response.status(Response.Status.CONFLICT).entity("A poweroff proccess is in progress, cannot accept another poweroff request.").build();  }  PowerOffState poweroffState;  if (FORCE.equals(forceSet)) {    poweroffState=new PowerOffState(PowerOffState.State.FORCESTART);  } else {    poweroffState=new PowerOffState(PowerOffState.State.START);  }  try {    _coordinator.setTargetInfo(poweroffState,false);    vdcManager.wakeupOtherNodes();    _alertsLog.warn("power off start");  } catch (  ClientHandlerException e) {    if (!FORCE.equals(forceSet)) {      throw APIException.internalServerErrors.poweroffWakeupError(e);    } else {      _log.warn("failed to wakeup all nodes. Will poweroff the cluster by force.");    }  }catch (  Exception e) {    throw APIException.internalServerErrors.setObjectToError("target poweroff state","coordinator",e);  }  if (sc != null && sc.getUserPrincipal() != null) {    auditControl(OperationTypeEnum.POWER_OFF_CLUSTER,AuditLogManager.AUDITLOG_SUCCESS,null);  }  try {    return Response.status(Response.Status.ACCEPTED).build();  }  finally {    vdcManager.wakeup();  }}  }
class C{  private synchronized void startMonitoring(){  if (!running) {    running=true;    notifyAll();  }}  }
class C{  public synchronized VisualGraph addGraph(String group,Graph graph,Predicate filter){  return addGraph(group,graph,filter,VisualItem.SCHEMA,VisualItem.SCHEMA);}  }
class C{  public JFontChooser(FontChooserModel model){  super();  this.model=model;  selectedFont=getFont();  updateUI();}  }
class C{  @Override public boolean hasValuesDescription(){  return restrictionClass != null && restrictionClass != Object.class;}  }
class C{  public static void openSettings(Context context){  openSettings(context,Settings.ACTION_SETTINGS);}  }
class C{  public static void assertFailedU(String message,String update){  checkUpdateU(message,update,false);}  }
class C{  public ExtentTest skip(Throwable t){  log(Status.SKIP,t);  return this;}  }
class C{  public Iterator<ExtrudedBoundaryInfo> iterator(){  return this.boundaries.iterator();}  }
class C{  private boolean hasHaRpCopyTarget(VirtualPool vpool){  boolean rpVPlex=false;  if (vpool.getProtectionVarraySettings() != null && !vpool.getProtectionVarraySettings().isEmpty()) {    for (    String protectionVarraURI : vpool.getProtectionVarraySettings().keySet()) {      String settingsURI=vpool.getProtectionVarraySettings().get(protectionVarraURI);      VpoolProtectionVarraySettings settings=dbClient.queryObject(VpoolProtectionVarraySettings.class,URI.create(settingsURI));      URI protectionVpoolId=vpool.getId();      if (settings.getVirtualPool() != null) {        protectionVpoolId=settings.getVirtualPool();      }      VirtualPool protectionVpool=dbClient.queryObject(VirtualPool.class,protectionVpoolId);      if (VirtualPool.vPoolSpecifiesHighAvailability(protectionVpool)) {        rpVPlex=true;        break;      }    }  }  return rpVPlex;}  }
class C{  public static Geometry reduce(Geometry g,PrecisionModel precModel){  SimpleGeometryPrecisionReducer reducer=new SimpleGeometryPrecisionReducer(precModel);  return reducer.reduce(g);}  }
class C{  public NodeList selectNodes(String xpathString){  return new NodeList(XPathCache.getXPath(xpathString).applyTo(nodes),false);}  }
class C{  public String toString(){  return this.assetType;}  }
class C{  private static void print(String identifier,Object object,StringBuffer indentBuf,StringBuffer buf) throws IllegalAccessException, InvocationTargetException {  if (object == null) {  } else   if (object instanceof MessageNano) {    int origIndentBufLength=indentBuf.length();    if (identifier != null) {      buf.append(indentBuf).append(deCamelCaseify(identifier)).append(" <\n");      indentBuf.append(INDENT);    }    Class<?> clazz=object.getClass();    for (    Field field : clazz.getFields()) {      int modifiers=field.getModifiers();      String fieldName=field.getName();      if ((modifiers & Modifier.PUBLIC) == Modifier.PUBLIC && (modifiers & Modifier.STATIC) != Modifier.STATIC && !fieldName.startsWith("_") && !fieldName.endsWith("_")) {        Class<?> fieldType=field.getType();        Object value=field.get(object);        if (fieldType.isArray()) {          Class<?> arrayType=fieldType.getComponentType();          if (arrayType == byte.class) {            print(fieldName,value,indentBuf,buf);          } else {            int len=value == null ? 0 : Array.getLength(value);            for (int i=0; i < len; i++) {              Object elem=Array.get(value,i);              print(fieldName,elem,indentBuf,buf);            }          }        } else {          print(fieldName,value,indentBuf,buf);        }      }    }    for (    Method method : clazz.getMethods()) {      String name=method.getName();      if (name.startsWith("set")) {        String subfieldName=name.substring(3);        Method hazzer=null;        try {          hazzer=clazz.getMethod("has" + subfieldName);        } catch (        NoSuchMethodException e) {          continue;        }        if (!(Boolean)hazzer.invoke(object)) {          continue;        }        Method getter=null;        try {          getter=clazz.getMethod("get" + subfieldName);        } catch (        NoSuchMethodException e) {          continue;        }        print(subfieldName,getter.invoke(object),indentBuf,buf);      }    }    if (identifier != null) {      indentBuf.setLength(origIndentBufLength);      buf.append(indentBuf).append(">\n");    }  } else   if (object instanceof Map) {    Map<?,?> map=(Map<?,?>)object;    identifier=deCamelCaseify(identifier);    for (    Map.Entry<?,?> entry : map.entrySet()) {      buf.append(indentBuf).append(identifier).append(" <\n");      int origIndentBufLength=indentBuf.length();      indentBuf.append(INDENT);      print("key",entry.getKey(),indentBuf,buf);      print("value",entry.getValue(),indentBuf,buf);      indentBuf.setLength(origIndentBufLength);      buf.append(indentBuf).append(">\n");    }  } else {    identifier=deCamelCaseify(identifier);    buf.append(indentBuf).append(identifier).append(": ");    if (object instanceof String) {      String stringMessage=sanitizeString((String)object);      buf.append("\"").append(stringMessage).append("\"");    } else     if (object instanceof byte[]) {      appendQuotedBytes((byte[])object,buf);    } else {      buf.append(object);    }    buf.append("\n");  }}  }
class C{  public Bundler putLong(String key,long value){  bundle.putLong(key,value);  return this;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:57.985 -0400",hash_original_method="DDAF62E14AD15FA9537A3140BB7EB191",hash_generated_method="7D38428E89D3D1CE85DCE6C9EC3906E3") private void doDelete(FileEntry entry){  for (  FileAlterationListener listener : listeners) {    if (entry.isDirectory()) {      listener.onDirectoryDelete(entry.getFile());    } else {      listener.onFileDelete(entry.getFile());    }  }}  }
class C{  private static char[] toCharArray(CharSequence cs){  if (cs instanceof String) {    return ((String)cs).toCharArray();  } else {    int sz=cs.length();    char[] array=new char[cs.length()];    for (int i=0; i < sz; i++) {      array[i]=cs.charAt(i);    }    return array;  }}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.DE_ACTIVATE_FOR___DEACTIVATE_FOR_1:    setDeactivate_for_1((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (!Sage.isNonLocalClient())   return null;  return sage.plugin.CorePluginManager.getInstance().getMyPlugins();}  }
class C{  public void tick(){  if (mStarted) {    --mTicksLeft;    mTimeLeftInMillis=mTicksLeft * mMillisTickDuration;    if (mTimeLeftInMillis < 6000 && !animationStarted) {      animationStarted=true;      mViewCountdown.setTextColor(Color.RED);      mViewCountdown.setTypeface(Typeface.DEFAULT_BOLD);      mViewCountdown.clearAnimation();      mViewCountdown.startAnimation(mAnimationTimerAlpha);    }    if (mSecondsTextValue != mTimeLeftInMillis / 1000) {      mViewCountdown.setText(String.format("%d:%02d",TimeUnit.MILLISECONDS.toMinutes(mTimeLeftInMillis),TimeUnit.MILLISECONDS.toSeconds(mTimeLeftInMillis)));      mSecondsTextValue=mTimeLeftInMillis / 1000;    }    if (mTimeLeftInMillis == 0) {      finished();    }  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case StextPackage.ROOT__ROOTS:    return getRoots();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private static void addEventTypes(Set<Integer> set,int[] items){  for (  int i : items)   set.add(i);}  }
class C{  public LongAdder(){}  }
class C{  public void testNormalize() throws Throwable {  Document doc;  Element root;  NodeList elementList;  Node firstChild;  NodeList textList;  CharacterData textNode;  String data;  doc=(Document)load("staff",builder);  root=doc.getDocumentElement();  root.normalize();  elementList=root.getElementsByTagName("name");  firstChild=elementList.item(2);  textList=firstChild.getChildNodes();  textNode=(CharacterData)textList.item(0);  data=textNode.getData();  assertEquals("data","Roger\n Jones",data);}  }
class C{  protected void checkRange(int index,int width){  if (index < 0 || index + width > size)   throw new IndexOutOfBoundsException("index: " + index + ", width: "+ width+ ", size="+ size);}  }
class C{  protected boolean removeEldestEntry(Map.Entry<K,V> eldest){  return false;}  }
class C{  public void beforeInsert(int index,float element){  if (index > size || index < 0)   throw new IndexOutOfBoundsException("Index: " + index + ", Size: "+ size);  ensureCapacity(size + 1);  System.arraycopy(elements,index,elements,index + 1,size - index);  elements[index]=element;  size++;}  }
class C{  @Override protected int intersectsValidDropTarget(int id){  int mCountX=mView.getCountX();  int mCountY=mView.getCountY();  int x=id % mCountX;  int y=id / mCountX;  LauncherAccessibilityDelegate.DragInfo dragInfo=mDelegate.getDragInfo();  if (dragInfo.dragType == LauncherAccessibilityDelegate.DragType.WIDGET && mView.isHotseat()) {    return INVALID_POSITION;  }  if (dragInfo.dragType == LauncherAccessibilityDelegate.DragType.WIDGET) {    boolean fits=false;    int spanX=dragInfo.info.spanX;    int spanY=dragInfo.info.spanY;    for (int m=0; m < spanX; m++) {      for (int n=0; n < spanY; n++) {        fits=true;        int x0=x - m;        int y0=y - n;        if (x0 < 0 || y0 < 0)         continue;        for (int i=x0; i < x0 + spanX; i++) {          if (!fits)           break;          for (int j=y0; j < y0 + spanY; j++) {            if (i >= mCountX || j >= mCountY || mView.isOccupied(i,j)) {              fits=false;              break;            }          }        }        if (fits) {          return x0 + mCountX * y0;        }      }    }    return INVALID_POSITION;  } else {    View child=mView.getChildAt(x,y);    if (child == null || child == dragInfo.item) {      return id;    } else     if (dragInfo.dragType != LauncherAccessibilityDelegate.DragType.FOLDER) {      ItemInfo info=(ItemInfo)child.getTag();      if (info instanceof AppInfo || info instanceof FolderInfo || info instanceof ShortcutInfo) {        return id;      }    }    return INVALID_POSITION;  }}  }
class C{  protected Field findPropertySetFieldName(String propertyValue) throws Exception {  for (  Class propertySetClasse : PROPERTY_SET_CLASSES) {    Field result=findPropertySetField(propertyValue,propertySetClasse);    if (result != null) {      return result;    }  }  return null;}  }
class C{  protected void assembleTiles(int rows,int columns){  this.tiles.clear();  for (int i=0; i < rows; i++) {    for (int j=0; j < columns; j++) {      ContentTile newTile=new ContentTile(i,j);      this.tiles.add(newTile);    }  }}  }
class C{  protected void assertTitle(BaseFragmentActivity activity,CharSequence title){  ActionBar bar=activity.getSupportActionBar();  assumeNotNull(bar);  assumeNotNull(title);  Typeface type=Typeface.createFromAsset(activity.getAssets(),"fonts/OpenSans-Semibold.ttf");  int titleId=activity.getResources().getIdentifier("action_bar_title","id","android");  TextView titleTextView=(TextView)activity.findViewById(titleId);  assumeNotNull(titleTextView);  assertThat(titleTextView).hasCurrentTextColor(activity.getResources().getColor(R.color.edx_white));  assertEquals(type,titleTextView.getTypeface());  assertEquals(bar.getTitle(),title);}  }
class C{  public void lowerBound(byte[] key,int keyOffset,int keyLen) throws IOException {  seekTo(new ByteArray(key,keyOffset,keyLen),false);}  }
class C{  public void onChatMessageDeliveryExpirationReceived(Intent intent){  ContactId contact=ContactUtil.createContactIdFromTrustedData(intent.getStringExtra(EXTRA_CONTACT));  String msgId=intent.getStringExtra(EXTRA_ID);  onChatMessageDeliveryExpirationReceived(contact,msgId);}  }
class C{  public void deselectAll(){  setAll(0.0d);}  }
class C{  public static void liftingFromBottom(View view,float baseRotation,int duration,int startDelay){  ViewHelper.setRotationX(view,baseRotation);  ViewHelper.setTranslationY(view,view.getHeight() / 3);  ViewPropertyAnimator.animate(view).setInterpolator(ACCELERATE_DECELERATE).setDuration(duration).setStartDelay(startDelay).rotationX(0).translationY(0).start();}  }
class C{  public void requestFrame(int depth,int isolateId) throws NotSuspendedException, NoResponseException, NotConnectedException {  if (playerSupportsGet()) {    if (!isWorkerSuspended(isolateId))     throw new NotSuspendedException();    int timeout=getPreference(SessionManager.PREF_CONTEXT_RESPONSE_TIMEOUT);    DMessage dm=DMessageCache.alloc(4);    dm.setType(DMessage.OutGetFrame);    dm.setTargetIsolate(isolateId);    dm.putDWord(depth);    if (!simpleRequestResponseMessage(dm,DMessage.InFrame,timeout)) {      throw new NoResponseException(timeout);    }    pullUpActivationObjectVariables(depth,isolateId);  }}  }
class C{  public static Resource changeExtension(Resource file,String newExtension){  String ext=getExtension(file,null);  if (ext == null)   return file.getParentResource().getRealResource(file.getName() + '.' + newExtension);  String name=file.getName();  return file.getParentResource().getRealResource(name.substring(0,name.length() - ext.length()) + newExtension);}  }
class C{  public static Object jsonToJava(Object obj){  if (obj instanceof JsonObject) {    return jsonToHash((JsonObject)obj);  } else   if (obj instanceof JsonArray) {    JsonArray arr=(JsonArray)obj;    Object[] objs=new Object[arr.size()];    for (int i=0; i < arr.size(); i++) {      objs[i]=jsonToJava(arr.get(i));    }    return objs;  }  return obj;}  }
class C{  public boolean adjustValue(float key,double amount){  int index=index(key);  if (index < 0) {    return false;  } else {    _values[index]+=amount;    return true;  }}  }
class C{  public ServerCloneException(String s){  super(s);  initCause(null);}  }
class C{  private void limitScopeOfVariables(){  if (true) {    double doubleNumber=someCalculation();    doSomethingWith(doubleNumber);  } else {    Log.i("Coding Guidelines","Nothing to do here");  }}  }
class C{  private final void notifyListeners(int deviceEventType,int screen){  HashMap<AccelDeviceEventListener,Integer> listClone;  Set<AccelDeviceEventListener> cloneSet;synchronized (listeners) {    listClone=new HashMap<AccelDeviceEventListener,Integer>(listeners);  }  cloneSet=listClone.keySet();  Iterator<AccelDeviceEventListener> itr=cloneSet.iterator();  while (itr.hasNext()) {    AccelDeviceEventListener current=itr.next();    Integer i=listClone.get(current);    if (i != null && i.intValue() != screen) {      continue;    }    if (deviceEventType == DEVICE_RESET) {      current.onDeviceReset();    } else     if (deviceEventType == DEVICE_DISPOSED) {      current.onDeviceDispose();    }  }}  }
class C{  private void enableSuppliersDefaultPaymentsForCustomer(OrganizationReference ref){  List<OrganizationRefToPaymentType> paymentTypes=ref.getSource().getPaymentTypes(true,OrganizationRoleType.SUPPLIER,OrganizationRoleType.PLATFORM_OPERATOR.name());  Organization seller=dm.getCurrentUser().getOrganization();  if (seller.getGrantedRoleTypes().contains(OrganizationRoleType.RESELLER)) {    paymentTypes=ref.getSource().getPaymentTypes(true,OrganizationRoleType.RESELLER,OrganizationRoleType.PLATFORM_OPERATOR.name());  }  OrganizationRole role=getOrganizationRole(ref.getTarget(),OrganizationRoleType.CUSTOMER);  for (  OrganizationRefToPaymentType orgToPt : paymentTypes) {    OrganizationRefToPaymentType refToPt=createOrgRefToPt(role,orgToPt.getPaymentType(),false,ref);    ref.getPaymentTypes().add(refToPt);  }}  }
class C{  public JsonArrayRequest(int method,String url,JSONArray jsonRequest,Listener<JSONArray> listener,ErrorListener errorListener){  super(method,url,(jsonRequest == null) ? null : jsonRequest.toString(),listener,errorListener);}  }
class C{  public long run(String[] args) throws Exception {  int size=Integer.parseInt(args[0]);  int nbatches=Integer.parseInt(args[1]);  int ncycles=Integer.parseInt(args[2]);  boolean[][] arrays=new boolean[ncycles][size];  StreamBuffer sbuf=new StreamBuffer();  ObjectOutputStream oout=new ObjectOutputStream(sbuf.getOutputStream());  ObjectInputStream oin=new ObjectInputStream(sbuf.getInputStream());  doReps(oout,oin,sbuf,arrays,1);  long start=System.currentTimeMillis();  doReps(oout,oin,sbuf,arrays,nbatches);  return System.currentTimeMillis() - start;}  }
class C{  public Metadata extract(){  return extract(new Metadata());}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean isSipURI(){  return this instanceof SipUri;}  }
class C{  public void push(final int value){  if (value >= -1 && value <= 5) {    mv.visitInsn(Opcodes.ICONST_0 + value);  } else   if (value >= Byte.MIN_VALUE && value <= Byte.MAX_VALUE) {    mv.visitIntInsn(Opcodes.BIPUSH,value);  } else   if (value >= Short.MIN_VALUE && value <= Short.MAX_VALUE) {    mv.visitIntInsn(Opcodes.SIPUSH,value);  } else {    mv.visitLdcInsn(value);  }}  }
class C{  public int size(){  if (tail == null) {    return 1;  }  return 1 + tail.size();}  }
class C{  public SpecificSynapseRulePanel(Collection<Synapse> synapseList,final Window parent){  this(synapseList,parent,DEFAULT_SP_DISPLAY_STATE);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:59.528 -0500",hash_original_method="F49E93B07FF8266081C24B5E6A3F5360",hash_generated_method="E21F0C39A84A712BC9F7A7B90CA99E04") public TransformerFactoryConfigurationError(Exception e){  super(e.toString());  this.exception=e;}  }
class C{  public MetaTileEntity(int aID,String aBasicName,String aRegionalName,int aInvSlotCount){  if (GregTech_API.sPostloadStarted || !GregTech_API.sPreloadStarted)   throw new IllegalAccessError("This Constructor has to be called in the load Phase");  if (GregTech_API.METATILEENTITIES[aID] == null) {    GregTech_API.METATILEENTITIES[aID]=this;  } else {    throw new IllegalArgumentException("MetaMachine-Slot Nr. " + aID + " is already occupied!");  }  mName=aBasicName.replaceAll(" ","_").toLowerCase(Locale.ENGLISH);  setBaseMetaTileEntity(GregTech_API.constructBaseMetaTileEntity());  getBaseMetaTileEntity().setMetaTileID((short)aID);  GT_LanguageManager.addStringLocalization("gt.blockmachines." + mName + ".name",aRegionalName);  mInventory=new ItemStack[aInvSlotCount];  if (GT.isClientSide()) {    ItemStack tStack=new ItemStack(GregTech_API.sBlockMachines,1,aID);    tStack.getItem().addInformation(tStack,null,new ArrayList<String>(),true);  }}  }
class C{  public EquivalenceDistribution(String variable){  this.baseVar=variable;  sampler=new Random();}  }
class C{  public Scroller(Context context,Interpolator interpolator){  this(context,interpolator,context.getApplicationInfo().targetSdkVersion >= Build.VERSION_CODES.HONEYCOMB);}  }
class C{  public void testLineNoLink() throws Exception {  Assert.assertNull("File with no lines should not work",new PyTestTracebackParser().findLinkInTrace("foo/bar.py file "));  Assert.assertNull("No file name provided, but link found",new PyTestTracebackParser().findLinkInTrace(":12 file "));}  }
class C{  public boolean isOrgAddressUsed(){  return orgAddressUsed;}  }
class C{  private synchronized boolean reconnectModified(boolean pending){  if (readOnly || lock == null || fileLockMethod != FileLock.LOCK_SERIALIZED) {    return true;  }  try {    if (pending == reconnectChangePending) {      long now=System.currentTimeMillis();      if (now > reconnectCheckNext) {        if (pending) {          String pos=pageStore == null ? null : "" + pageStore.getWriteCountTotal();          lock.setProperty("logPos",pos);          lock.save();        }        reconnectCheckNext=now + reconnectCheckDelay;      }      return true;    }    Properties old=lock.load();    if (pending) {      if (old.getProperty("changePending") != null) {        return false;      }      trace.debug("wait before writing");      Thread.sleep((int)(reconnectCheckDelay * 1.1));      Properties now=lock.load();      if (!now.equals(old)) {        return false;      }    }    String pos=pageStore == null ? null : "" + pageStore.getWriteCountTotal();    lock.setProperty("logPos",pos);    if (pending) {      lock.setProperty("changePending","true-" + Math.random());    } else {      lock.setProperty("changePending",null);    }    reconnectCheckNext=System.currentTimeMillis() + 2 * reconnectCheckDelay;    old=lock.save();    if (pending) {      trace.debug("wait before writing again");      Thread.sleep((int)(reconnectCheckDelay * 1.1));      Properties now=lock.load();      if (!now.equals(old)) {        return false;      }    } else {      Thread.sleep(1);    }    reconnectLastLock=old;    reconnectChangePending=pending;    reconnectCheckNext=System.currentTimeMillis() + reconnectCheckDelay;    return true;  } catch (  Exception e) {    trace.error(e,"pending {0}",pending);    return false;  }}  }
class C{  public static boolean isOffline(){  try {    new URL("http://www.apple.com").openConnection().connect();    return true;  } catch (  IOException e) {    return false;  }}  }
class C{  boolean addEquivalentClass(OwlClass c){  boolean change=superClasses.add(c);  change=c.superClasses.add(this) || change;  return change;}  }
class C{  @Deprecated public TEvernoteHttpClient(String url,String userAgent,File tempDir) throws TTransportException {  getHTTPClient();  this.userAgent=userAgent;  try {    this.url=new URL(url);    requestBuffer=new DiskBackedByteStore.Factory(tempDir).create();  } catch (  IOException iox) {    throw new TTransportException(iox);  }}  }
class C{  final boolean changeWeightOfStrategy(final GenericPlanStrategy<T,I> strategy,final String subpopulation,final double newWeight){  final StrategyWeights<T,I> weights=getStrategyWeights(subpopulation);  int idx=weights.strategies.indexOf(strategy);  if (idx != -1) {    double oldWeight=weights.weights.set(idx,newWeight);    weights.totalWeights+=(newWeight - oldWeight);    Logger.getLogger(this.getClass()).info(strategy.toString() + ": oldWeight=" + oldWeight+ " newWeight="+ newWeight);    return true;  }  return false;}  }
class C{  @Override protected boolean validatePage(){  if (super.validatePage()) {    String extension=new Path(getFileName()).getFileExtension();    if (extension == null || !FILE_EXTENSIONS.contains(extension)) {      String key=FILE_EXTENSIONS.size() > 1 ? "_WARN_FilenameExtensions" : "_WARN_FilenameExtension";      setErrorMessage(EipEditorPlugin.INSTANCE.getString(key,new Object[]{FORMATTED_FILE_EXTENSIONS}));      return false;    }    return true;  }  return false;}  }
class C{  public static Angle greatCircleAzimuth(LatLon p1,LatLon p2){  if ((p1 == null) || (p2 == null)) {    String message=Logging.getMessage("nullValue.LatLonIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  double lat1=p1.getLatitude().radians;  double lon1=p1.getLongitude().radians;  double lat2=p2.getLatitude().radians;  double lon2=p2.getLongitude().radians;  if (lat1 == lat2 && lon1 == lon2)   return Angle.ZERO;  if (lon1 == lon2)   return lat1 > lat2 ? Angle.POS180 : Angle.ZERO;  double y=Math.cos(lat2) * Math.sin(lon2 - lon1);  double x=Math.cos(lat1) * Math.sin(lat2) - Math.sin(lat1) * Math.cos(lat2) * Math.cos(lon2 - lon1);  double azimuthRadians=Math.atan2(y,x);  return Double.isNaN(azimuthRadians) ? Angle.ZERO : Angle.fromRadians(azimuthRadians);}  }
class C{  public String date(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  if (value == null)   return "";  mTab.setValue("DateAcct",value);  setDocumentNo(ctx,WindowNo,mTab);  return "";}  }
class C{  public Transfer writeString(String s) throws IOException {  if (s == null) {    out.writeInt(-1);  } else {    int len=s.length();    out.writeInt(len);    for (int i=0; i < len; i++) {      out.writeChar(s.charAt(i));    }  }  return this;}  }
class C{  protected void init(){  try {    File file=new File(stendhal.getGameFolder());    if (!file.exists() && !file.mkdirs()) {      logger.error("Can't create " + file.getAbsolutePath() + " folder");    } else     if (file.exists() && file.isFile()) {      if (!file.delete() || !file.mkdirs()) {        logger.error("Can't removing file " + file.getAbsolutePath() + " and creating a folder instead.");      }    }    file=new File(stendhal.getGameFolder() + "cache");    if (!file.exists() && !file.mkdir()) {      logger.error("Can't create " + file.getAbsolutePath() + " folder");    }  } catch (  final RuntimeException e) {    logger.error("cannot create cach folder",e);  }}  }
class C{  private void addElements(IStorageTreeComponent<DefaultData> treeComponent,int amount) throws IndexingException {  DefaultData element=mock(DefaultData.class);  for (int i=1; i <= amount; i++) {    when(element.getId()).thenReturn((long)i);    treeComponent.put(element);  }}  }
class C{  public boolean isStacked(){  return mVals != null;}  }
class C{  public MvcEvent(Dispatcher d,AppEvent ae){  super(d);  this.dispatcher=d;  this.appEvent=ae;}  }
class C{  @Override public int hashCode(){  int result=super.hashCode();  result=37 * result + Coordinate.hashCode(minz);  result=37 * result + Coordinate.hashCode(maxz);  final int code=result ^ (int)serialVersionUID;  return code;}  }
class C{  public boolean isPosted(){  Object oo=get_Value(COLUMNNAME_Posted);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public String encodeBody(){  if (subject != null) {    return subject;  } else {    return "";  }}  }
class C{  @NoInline public static void write(long value){  write(value,true);}  }
class C{  @Override public void resetOptions(){  super.resetOptions();  setFileExtension(LibSVMLoader.FILE_EXTENSION);}  }
class C{  public void removeLabelRelation(MuninPlugin plugin){  for (  Label label : this.labels) {    for (    MuninPlugin labelPlugin : label.plugins) {      if (labelPlugin.equals(plugin)) {        label.plugins.remove(labelPlugin);        return;      }    }  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String fileName=null;  int i=0;  int row, col, rows, cols;  String[] imageFiles;  int numImages=0;  double noData=-32768;  String returnHeaderFile="";  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  if ((inputFilesString == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  String outDir=(new File(imageFiles[0])).getParentFile().toString();  if (args.length > 1) {    outDir=args[1];  }  if (!outDir.endsWith(File.separator)) {    outDir=outDir + File.separator;  }  try {    for (i=0; i < numImages; i++) {      int progress=(int)(100f * i / (numImages - 1));      if (numImages > 1) {        updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      }      fileName=imageFiles[i];      if (!((new File(fileName)).exists())) {        showFeedback("Image file does not exist.");        break;      }      File file=new File(fileName);      String fileExtension=whitebox.utilities.FileUtilities.getFileExtension(fileName).toLowerCase();      String shortFileName=file.getName().replace("." + fileExtension,"");      long fileLength=file.length();      file=null;      String srtmFormat="SRTM1";      if (fileLength == 3601 * 3601 * 2) {        rows=3601;        cols=3601;      } else       if (fileLength == 1201 * 1201 * 2) {        rows=1201;        cols=1201;        srtmFormat="SRTM3";      } else {        showFeedback("The input SRTM file does not appear to be supported by the import tool.");        return;      }      double cellSize=1.0 / cols;      char[] charArray=shortFileName.toCharArray();      char[] tmp=new char[2];      tmp[0]=charArray[1];      tmp[1]=charArray[2];      double south=Double.parseDouble(new String(tmp));      if (charArray[0] == 'S' || charArray[0] == 's') {        south=-south;      }      south=south - (0.5 * cellSize);      tmp=new char[3];      tmp[0]=charArray[4];      tmp[1]=charArray[5];      tmp[2]=charArray[6];      double west=Double.parseDouble(new String(tmp));      if (charArray[3] == 'W' || charArray[3] == 'w') {        west=-west;      }      west=west - (0.5 * cellSize);      double north=south + 1.0 + cellSize;      double east=west + 1.0 + cellSize;      String whiteboxHeaderFile=outDir + shortFileName + ".dep";      if (i == 0) {        returnHeaderFile=whiteboxHeaderFile;      }      WhiteboxRaster output=new WhiteboxRaster(whiteboxHeaderFile,north,south,east,west,rows,cols,WhiteboxRasterBase.DataScale.CONTINUOUS,WhiteboxRasterBase.DataType.INTEGER,noData,noData);      RandomAccessFile rIn=null;      FileChannel inChannel=null;      ByteBuffer buf=ByteBuffer.allocate((int)fileLength);      rIn=new RandomAccessFile(fileName,"r");      inChannel=rIn.getChannel();      inChannel.position(0);      inChannel.read(buf);      java.nio.ByteOrder byteorder=java.nio.ByteOrder.BIG_ENDIAN;      buf.order(byteorder);      buf.rewind();      byte[] ba=new byte[(int)fileLength];      buf.get(ba);      double z;      row=0;      col=0;      int pos=0;      int oldProgress=-1;      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          z=(double)buf.getShort(pos);          output.setValue(row,col,z);          pos+=2;        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          updateProgress("Importing SRTM file...",progress);          oldProgress=progress;        }      }      inChannel.close();      output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      output.addMetadataEntry("Created on " + new Date());      output.setXYUnits("degrees");      output.setProjection("geographic coordinates");      output.setZUnits("metres");      output.writeHeaderFile();      output.close();    }    returnData(returnHeaderFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void registerForRoleChanges(Consumer<RoleChangeEvent> listener){  listeners.add(listener);}  }
class C{  public Builder maxOperationQueueSize(int maxOperationQueueSize){  this.maxOperationQueueSize=maxOperationQueueSize;  return this;}  }
class C{  public BurlapProxyFactory(){  _resolver=new BurlapProxyResolver(this);}  }
class C{  protected ByteArrayType(SqlType sqlType,Class<?>[] classes){  super(sqlType,classes);}  }
class C{  public boolean equals(Object o){  if (this == o)   return true;  if (!(o instanceof PackageFragmentRoot))   return false;  PackageFragmentRoot other=(PackageFragmentRoot)o;  return resource().equals(other.resource()) && this.parent.equals(other.parent);}  }
class C{  public static String buildSortClause(Map<String,Order> sortKeys){  StringBuilder builder=new StringBuilder();  String prefix="";  for (  Map.Entry<String,Order> sortKey : sortKeys.entrySet()) {    builder.append(prefix);    prefix=", ";    builder.append(sortKey.getKey());    if (sortKey.getValue() != null && sortKey.getValue() == Order.DESCENDING) {      builder.append(" DESC");    } else {      builder.append(" ASC");    }  }  return builder.toString();}  }
class C{  public void replace(int i,byte[] buffer,int offset,int length){  System.arraycopy(buffer,offset,_buffer,i,length);}  }
class C{  public CSpecialInstructionsModel(){  m_descriptions.add(new CCallsDescription());  m_descriptions.add(new CReadsDescription());  m_descriptions.add(new CWritesDescription());}  }
class C{  protected void clearOutEvents(){}  }
class C{  @AfterClass public static void tearDownAfterClass() throws Exception {}  }
class C{  public void add(String marble){  if (marble.contains("&&")) {    String[] temp=marble.split("&&");    marble=temp[0];    ObjectMapper mapper=new ObjectMapper();    try {      argMap=mapper.readValue(temp[1],new TypeReference<Map<String,Map<String,String>>>(){      });    } catch (    Exception e) {      ConsoleUtils.error("couldn't convert argmap");    }  }  if (marble.contains("|") || marble.contains("#")) {    ps.onNext(createObservable(marble));  } else {    ps.onNext(createHotObservable(marble));  }}  }
class C{  public RosterEntities(List<RosterItemEntity> roster){  this.roster=roster;}  }
class C{  protected void declare(ExtensionProfile extProfile,ExtensionDescription description){  extProfile.declare(extClass,description);  if (BaseEntry.class.isAssignableFrom(extClass)) {    extProfile.declare(BaseEntry.class,description);  }}  }
class C{  public static int calculateDigitCount(long value){  if (value < 0) {    if (value != Long.MIN_VALUE) {      return calculateDigitCount(-value) + 1;    } else {      return 20;    }  }  return (value < 10 ? 1 : (value < 100 ? 2 : (value < 1000 ? 3 : (value < 10000 ? 4 : ((int)(Math.log(value) / LOG_10) + 1)))));}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:55.617 -0500",hash_original_method="768CFC89B63FD1F782E3758D2BCFC6C0",hash_generated_method="5015F2E16C69CBCFCDD551A44B3B427A") private void putProviderInfo(){  super.put("Provider.id name",(name != null) ? name : "null");  super.put("Provider.id version",versionString);  super.put("Provider.id info",(info != null) ? info : "null");  super.put("Provider.id className",this.getClass().getName());}  }
class C{  public static long toLong(short a,short b,short c,short d){  return ((long)d << (SHORT_SIZE * 3)) | (((long)c & SHORT_MASK) << (SHORT_SIZE * 2)) | (((long)b & SHORT_MASK) << SHORT_SIZE)| ((long)a & SHORT_MASK);}  }
class C{  @Override protected Instances process(Instances instances) throws Exception {  if (isFirstBatchDone()) {    return new Instances(instances);  }  Instances result=new Instances(instances,instances.numInstances());  double[] sumOfWeightsPerClass=new double[instances.numClasses()];  for (int i=0; i < instances.numInstances(); i++) {    Instance inst=instances.instance(i);    sumOfWeightsPerClass[(int)inst.classValue()]+=inst.weight();  }  double sumOfWeights=Utils.sum(sumOfWeightsPerClass);  double factor=sumOfWeights / (double)instances.numClasses();  for (int i=0; i < instances.numInstances(); i++) {    result.add(instances.instance(i));    Instance newInst=result.instance(i);    copyValues(newInst,false,instances,outputFormatPeek());    newInst.setWeight(factor * newInst.weight() / sumOfWeightsPerClass[(int)newInst.classValue()]);  }  return result;}  }
class C{  @Override public void endWindow(){  int failureCount=0;  for (  Map.Entry<Integer,Integer> e : receivedCount.entrySet()) {    Integer key=e.getKey();    if (!trueCount.get(key).equals(e.getValue())) {      failureCount++;    }  }  if (failureCount != 0) {    failurePort.emit(failureCount);  } else {    successPort.emit(trueCount.size());  }}  }
class C{  public void flush() throws IOException {  this.os.flush();}  }
class C{  public void doFilter(ServletRequest request,ServletResponse response,FilterChain filterChain) throws IOException, ServletException {  HttpServletResponse httpResponse=(HttpServletResponse)response;  HttpServletRequest httpRequest=(HttpServletRequest)request;  Server server=(Server)httpRequest.getAttribute("proxyServer");  if (server == null) {    server=serverChain.evaluate(httpRequest);  }  if (server == null) {    filterChain.doFilter(request,response);  } else {    String uri=server.getRule().process(getURI(httpRequest));    String url=request.getScheme() + "://" + server.getDomainName()+ server.getPath()+ uri;    log.debug("Connecting to " + url);    ResponseHandler responseHandler=null;    try {      httpRequest=server.preExecute(httpRequest);      responseHandler=executeRequest(httpRequest,url);      httpResponse=server.postExecute(httpResponse);      if (responseHandler.getStatusCode() > 399) {        BES_LOGGER.logDebug("Connection to URL " + url + " failed, error code: "+ responseHandler.getStatusCode(),Log4jLogger.PROXY_LOG);        redirectToErrorPage(httpRequest,httpResponse,String.valueOf(responseHandler.getStatusCode()));      } else {        responseHandler.process(httpResponse);      }    } catch (    HttpException e) {      log.error("Problem while connecting to server",e);      httpResponse.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);      server.setConnectionExceptionRecieved(e);    }catch (    UnknownHostException e) {      log.error("Could not connection to the host specified",e);      httpResponse.setStatus(HttpServletResponse.SC_GATEWAY_TIMEOUT);      server.setConnectionExceptionRecieved(e);    }catch (    ConnectException e) {      log.error("Could not connect to the url " + url,e);      logConnectionDebugInformation(url);      redirectToErrorPage(httpRequest,httpResponse,null);      return;    }catch (    IOException e) {      log.error("Problem probably with the input being send, either with a Header or the Stream",e);      logConnectionDebugInformation(url);      httpResponse.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);    }catch (    MethodNotAllowedException e) {      log.error("Incoming method could not be handled",e);      httpResponse.setStatus(HttpServletResponse.SC_METHOD_NOT_ALLOWED);      httpResponse.setHeader("Allow",e.getAllowedMethods());    } finally {      if (responseHandler != null) {        responseHandler.close();      }    }  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public String toString(){  return "Function \"" + name + "\"";}  }
class C{  public void flush() throws IOException {  closeStartIfNecessary();}  }
class C{  protected boolean[] canHandleNClasses(boolean nominalPredictor,boolean numericPredictor,boolean stringPredictor,boolean datePredictor,boolean relationalPredictor,boolean multiInstance,int numClasses){  print("more than two class problems");  printAttributeSummary(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,Attribute.NOMINAL);  print("...");  ArrayList<String> accepts=new ArrayList<String>();  accepts.add("number");  accepts.add("class");  int numTrain=getNumInstances(), numTest=getNumInstances(), missingLevel=0;  boolean predictorMissing=false, classMissing=false;  return runBasicTest(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,Attribute.NOMINAL,missingLevel,predictorMissing,classMissing,numTrain,numTest,numClasses,accepts);}  }
class C{  @TargetApi(Build.VERSION_CODES.HONEYCOMB) public void start(@NonNull Context context,@NonNull Fragment fragment,int requestCode){  fragment.startActivityForResult(getIntent(context),requestCode);}  }
class C{  public void put(String key,InputStream stream,String name){  put(key,stream,name,null);}  }
class C{  private static void showImpl(ProviderImpl impl){  System.out.println("Provider implementation:");  System.out.println("Classname: " + impl.getClassname());  System.out.println("Vendor: " + impl.getVendor());  System.out.println("Version: " + impl.getVersion());  System.out.println("Impl index: " + impl.getIndex());}  }
class C{  public FastUtilByteIterator(byte[] primitiveArray){  super(primitiveArray);}  }
class C{  public int append(final float lhs,final float rhs,final String fieldName){  int comparison=Float.compare(lhs,rhs);  fieldComparisons.setAt(fieldName).value(comparison);  return comparison;}  }
class C{  public boolean isFLAG_OPERATION_FROM_SUB(){switch (value) {case BORROW_FROM_SUB:case NO_BORROW_FROM_SUB:case OVERFLOW_FROM_SUB:case NO_OVERFLOW_FROM_SUB:    return true;default :  return false;}}  }
class C{  @SuppressWarnings("resource") @Override public <T>T query(JdbcTemplate jdbcTemplate,String sql,ResultSetExtractor<T> resultSetExtractor){  LOGGER.debug("sql = " + sql);  MockResultSet mockResultSet=new MockResultSet();  List<List<String>> rows=new ArrayList<>();  MockResultSetMetaData mockResultSetMetaData=new MockResultSetMetaData();  if (CASE_1_SQL.equals(sql)) {    mockResultSetMetaData.setColumnNames(Arrays.asList("COL1","COL2","COL3"));    rows.add(Arrays.asList("A","B","C"));    rows.add(Arrays.asList("D","E","F"));  } else   if (CASE_2_SQL.equals(sql)) {    throw new DataIntegrityViolationException("test",new SQLException("test DataIntegrityViolationException cause"));  }  try {    mockResultSet.setRowIterator(rows.iterator());    mockResultSet.setMockResultSetMetaData(mockResultSetMetaData);    return resultSetExtractor.extractData(mockResultSet);  } catch (  SQLException e) {    throw new RuntimeException(e);  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String arcFile=null;  String whiteboxHeaderFile=null;  int i=0;  int row, col, rows, cols;  String[] imageFiles;  int numImages=0;  double noData=-32768;  InputStream inStream=null;  OutputStream outStream=null;  int progress=0;  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputFilesString=args[i];    }  }  if ((inputFilesString == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  try {    for (i=0; i < numImages; i++) {      if (numImages > 1) {        progress=(int)(100f * i / (numImages - 1));        updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      }      whiteboxHeaderFile=imageFiles[i];      if (!((new File(whiteboxHeaderFile)).exists())) {        showFeedback("Whitebox raster file does not exist.");        break;      }      WhiteboxRaster wbr=new WhiteboxRaster(whiteboxHeaderFile,"r");      rows=wbr.getNumberRows();      cols=wbr.getNumberColumns();      noData=wbr.getNoDataValue();      arcFile=whiteboxHeaderFile.replace(".dep",".txt");      (new File(arcFile)).delete();      fw=new FileWriter(arcFile,false);      bw=new BufferedWriter(fw);      out=new PrintWriter(bw,true);      str1="NCOLS         " + String.valueOf(wbr.getNumberColumns());      out.println(str1);      str1="NROWS         " + String.valueOf(wbr.getNumberRows());      out.println(str1);      str1="XLLCORNER     " + String.valueOf(wbr.getWest());      out.println(str1);      str1="YLLCORNER     " + String.valueOf(wbr.getSouth());      out.println(str1);      str1="CELLSIZE      " + String.valueOf((wbr.getCellSizeX() + wbr.getCellSizeY()) / 2);      out.println(str1);      str1="NODATA_VALUE  -9999";      out.println(str1);      double[] data;      String line;      if (wbr.getDataType() == WhiteboxRaster.DataType.FLOAT || wbr.getDataType() == WhiteboxRaster.DataType.DOUBLE) {        for (row=0; row < rows; row++) {          data=wbr.getRowValues(row);          line="";          str1="";          for (col=0; col < cols; col++) {            if (col != 0) {              str1=" ";            }            if (data[col] != noData) {              str1+=String.valueOf((float)data[col]);            } else {              str1+="-9999";            }            line+=str1;          }          out.println(line);          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(100f * row / (rows - 1));          updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);        }      } else {        for (row=0; row < rows; row++) {          data=wbr.getRowValues(row);          line="";          str1="";          for (col=0; col < cols; col++) {            if (col != 0) {              str1=" ";            }            if (data[col] != noData) {              str1+=String.valueOf((int)data[col]);            } else {              str1+="-9999";            }            line+=str1;          }          out.println(line);          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(100f * row / (rows - 1));          updateProgress(progress);        }      }      wbr.close();      (new File(whiteboxHeaderFile.replace(".dep","_temp.dep"))).delete();    }    showFeedback("Operation complete!");  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    if (out != null || bw != null) {      out.flush();      out.close();    }    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static Dcs cs_spalloc(int m,int n,int nzmax,boolean values,boolean triplet){  Dcs A=new Dcs();  A.m=m;  A.n=n;  A.nzmax=nzmax=Math.max(nzmax,1);  A.nz=triplet ? 0 : -1;  A.p=triplet ? new int[nzmax] : new int[n + 1];  A.i=new int[nzmax];  A.x=values ? new double[nzmax] : null;  return A;}  }
class C{  protected void sequence_TypeRefWithModifiers_UnionTypeExpressionOLD(ISerializationContext context,UnionTypeExpression semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  private void parse(){  try {    FileInputStream xmlStream=new FileInputStream(userFile);    DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();    factory.setIgnoringComments(true);    DocumentBuilder builder=factory.newDocumentBuilder();    doc=builder.parse(xmlStream);    xmlStream.close();    rootElement=doc.getDocumentElement();    NodeList userList=rootElement.getElementsByTagName("user");    System.out.println("Number of users: " + userList.getLength());synchronized (userPassListMutex) {      userPassList=new HashMap<String,PassAndState>((int)(userList.getLength() * 1.4));      for (int j=0; j < userList.getLength(); j++) {        Element user=(Element)userList.item(j);        userPassList.put(user.getAttribute("username"),new PassAndState(user.getAttribute("password"),parseInt(user,"state")));      }    }  } catch (  javax.xml.parsers.ParserConfigurationException e) {    e.printStackTrace();  }catch (  org.xml.sax.SAXException e) {    e.printStackTrace();  }catch (  Exception e) {    System.out.println("File error!");    e.printStackTrace();  }}  }
class C{  public synchronized int add(Object indexKey,Object obj) throws TypeMismatchException {  if (indexKey == null) {    indexKey=IndexManager.NULL;  }  preInsertHook();  HashIndexSetProperties metaData=hashIndexSetProperties;  int indexSlot=insertionIndex(indexKey,metaData);  Object old=metaData.set[indexSlot];  addObjectToSet(metaData.set,indexSlot,obj);  hashIndexSetProperties=metaData;  if (old == null) {    postInsertHook(true);  } else {    postInsertHook(false);  }  return indexSlot;}  }
class C{  private final double calculateNodeRates(Tree tree,NodeRef node,double mu,double k,double lambda){  NodeRef parent=tree.getParent(node);  double time0=0.0;  if (!tree.isExternal(node)) {    NodeRef child1=tree.getChild(node,0);    double t1=calculateNodeRates(tree,child1,mu,k,lambda);    NodeRef child2=tree.getChild(node,1);    double t2=calculateNodeRates(tree,child2,mu,k,lambda);    if (useAveraging) {      time0=(t1 + t2) / 2.0;    } else {      if (t1 > t2) {        time0=t1;      } else {        time0=t2;      }    }  }  if (parent == null)   return 0;  double branchTime=tree.getNodeHeight(parent) - tree.getNodeHeight(node);  double time1=time0 + branchTime;  double branchRate=rateIntegral(time1,mu,k,lambda);  if (time0 > 0.0) {    branchRate-=rateIntegral(time0,mu,k,lambda);  }  rates[node.getNumber()]=branchRate / branchTime;  return time1;}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/precheck") public VdcPreCheckResponse precheckVdcConfig(VdcPreCheckParam checkParam){  log.info("Start vdc config precheck for {} ...",checkParam.getConfigChangeType());  if (service.getId().endsWith("standalone")) {    throw GeoException.fatals.remoteVDCWrongStandaloneInstall();  }  log.info("Loading local vdc config ...");  VirtualDataCenter vdc=VdcUtil.getLocalVdc();  Boolean isFresher=checkParam.getFresher();  if (isFresher != null && isFresher) {    if (VirtualDataCenter.ConnectionStatus.ISOLATED != vdc.getConnectionStatus()) {      throw GeoException.fatals.remoteFreshVDCWrongStatus(vdc.getId());    }  } else {    if (checkParam.getConfigChangeType().equals(VdcConfig.ConfigChangeType.CONNECT_VDC.toString()) || (checkParam.getConfigChangeType().equals(VdcConfig.ConfigChangeType.REMOVE_VDC.toString()))) {      if (vdc.getConnectionStatus() != VirtualDataCenter.ConnectionStatus.CONNECTED) {        throw GeoException.fatals.remoteVDCWrongOperationStatus(vdc.getId(),checkParam.getConfigChangeType());      }    }  }  boolean hasData=false;  if (isFresher) {    hasData=dbClient.hasUsefulData();  }  hasData|=hasDataService();  log.info("Checking software version ...");  SoftwareVersion remoteSoftVer=null;  try {    remoteSoftVer=new SoftwareVersion(checkParam.getSoftwareVersion());    log.info("Software version of remote vdc: {}",remoteSoftVer);  } catch (  Exception e) {    log.info("Cannot get software version from checkParam, the version of remote vdc is lower than v2.3 with exception {}",e.getMessage());  }  SoftwareVersion localSoftVer;  try {    localSoftVer=coordinator.getTargetInfo(RepositoryInfo.class).getCurrentVersion();  } catch (  Exception ex) {    throw GeoException.fatals.remoteVDCFailedToGetVersion(vdc.getId());  }  return toVirtualDataCenterResponse(vdc,hasData,remoteSoftVer,localSoftVer);}  }
class C{  public void handleDOMNodeInsertedEvent(MutationEvent evt){  if (evt.getTarget() instanceof Element) {    handleElementAdded((CompositeGraphicsNode)node,e,(Element)evt.getTarget());  }}  }
class C{  public AnnotationItem(Annotation annotation){  super(ALIGNMENT,-1);  if (annotation == null) {    throw new NullPointerException("annotation == null");  }  this.annotation=annotation;  this.type=null;  this.encodedForm=null;}  }
class C{  public int start_state(){  return 0;}  }
class C{  public void test_unmodifiable_toString_methods(){  ArrayList al=new ArrayList();  al.add("a");  al.add("b");  Collection uc=Collections.unmodifiableCollection(al);  assertEquals("[a, b]",uc.toString());  HashMap m=new HashMap();  m.put("one","1");  m.put("two","2");  Map um=Collections.unmodifiableMap(m);  assertTrue("{one=1, two=2}".equals(um.toString()) || "{two=2, one=1}".equals(um.toString()));}  }
class C{  public GeoLong(){  this(null);}  }
class C{  private List<LdapMod> createAtts(ILdapEntry entry){  String[] attrs=entry.getAttributeNames();  List<LdapMod> objAttributes=new ArrayList<>();  for (  String attr : attrs) {    if (!attr.equalsIgnoreCase("cn") && !attr.equalsIgnoreCase("nTSecurityDescriptor")) {      LdapValue[] values=entry.getAttributeValues(attr);      LdapMod mod=new LdapMod(LdapModOperation.ADD,attr,values);      objAttributes.add(mod);    }  }  return objAttributes;}  }
class C{  public void testIntReverse() throws IOException {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  doc.add(new IntPoint("value",300000));  doc.add(new StoredField("value",300000));  writer.addDocument(doc);  doc=new Document();  doc.add(new IntPoint("value",-1));  doc.add(new StoredField("value",-1));  writer.addDocument(doc);  doc=new Document();  doc.add(new IntPoint("value",4));  doc.add(new StoredField("value",4));  writer.addDocument(doc);  IndexReader ir=UninvertingReader.wrap(writer.getReader(),Collections.singletonMap("value",Type.INTEGER_POINT));  writer.close();  IndexSearcher searcher=newSearcher(ir,false);  Sort sort=new Sort(new SortField("value",SortField.Type.INT,true));  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);  assertEquals(3,td.totalHits);  assertEquals("300000",searcher.doc(td.scoreDocs[0].doc).get("value"));  assertEquals("4",searcher.doc(td.scoreDocs[1].doc).get("value"));  assertEquals("-1",searcher.doc(td.scoreDocs[2].doc).get("value"));  TestUtil.checkReader(ir);  ir.close();  dir.close();}  }
class C{  private Stream<Relation> extractPhrases(JCas jCas,Collection<Interaction> interactions){  return interactions.stream().flatMap(null);}  }
class C{  public void testArgs() throws Exception {  VelocityEngine ve=new VelocityEngine();  ve.init();  String template="#macro(foo) foo #end";  ve.evaluate(new VelocityContext(),new StringWriter(),"foo",template);  template="#foreach(  $i     in  $woogie   ) end #end";  ve.evaluate(new VelocityContext(),new StringWriter(),"foo",template);  template="#macro(   foo $a) $a #end #foo(woogie)";  try {    ve.evaluate(new VelocityContext(),new StringWriter(),"foo",template);    assertTrue(false);  } catch (  ParseErrorException pe) {    System.out.println("Caught pee!");  }}  }
class C{  void initFromCameraParameters(Camera camera){  Camera.Parameters parameters=camera.getParameters();  previewFormat=parameters.getPreviewFormat();  previewFormatString=parameters.get("preview-format");  Log.d(TAG,"Default preview format: " + previewFormat + '/'+ previewFormatString);  WindowManager manager=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);  Display display=manager.getDefaultDisplay();  screenResolution=new Point(display.getWidth(),display.getHeight());  Log.d(TAG,"Screen resolution: " + screenResolution);  Point screenResolutionForCamera=new Point();  screenResolutionForCamera.x=screenResolution.x;  screenResolutionForCamera.y=screenResolution.y;  if (screenResolution.x < screenResolution.y) {    screenResolutionForCamera.x=screenResolution.y;    screenResolutionForCamera.y=screenResolution.x;  }  cameraResolution=getCameraResolution(parameters,screenResolutionForCamera);  Log.d(TAG,"Camera resolution: " + screenResolution);}  }
class C{  private ParameterDefinition findParam(List<ParameterDefinition> paramDefs,String id){  for (  ParameterDefinition param : paramDefs) {    if (param.getParameterType() == ParameterType.SERVICE_PARAMETER && param.getParameterId().equals(id)) {      return param;    }  }  return null;}  }
class C{  public CipherOutputStream(OutputStream os,StreamCipher cipher){  super(os);  this.streamCipher=cipher;}  }
class C{  private void redistribute(BFINode<E> node,BFINode<E> sibling,boolean isRightSibling,InsDelUpdateStatistics stat){  stat.nbRedistributes++;  int nbChildren=node.children.size() + sibling.children.size();  int nbChildren1=nbChildren / 2;  int nbChildren2=nbChildren - nbChildren1;  int nbChildrenToGive=sibling.children.size() - nbChildren2;  stat.nbBFNodesAccessed+=2;  BFINode<E> childToMove;  if (isRightSibling) {    for (int i=0; i < nbChildrenToGive; i++) {      childToMove=sibling.children.remove(0);      node.children.add(childToMove);      childToMove.parent=node;    }  } else {    for (int i=0; i < nbChildrenToGive; i++) {      childToMove=sibling.children.remove(sibling.children.size() - 1);      node.children.add(0,childToMove);      childToMove.parent=node;    }  }  stat.nbBFNodesAccessed+=nbChildrenToGive + 2;  sibling.recomputeValue(stat);  recomputeValueToTheRoot(node,stat);}  }
class C{  static private String portName(StoragePort port){  return BlockStorageScheduler.portName(port);}  }
class C{  @SuppressWarnings("unchecked") public ListIterator<AbstractInsnNode> iterator(int index){  return new InsnListIterator(index);}  }
class C{  public int compareTo(Object o){  if (o instanceof User) {    User other=(User)o;    return other._lowerNick.compareTo(_lowerNick);  }  return -1;}  }
class C{  public RelativeStrengthIndexItem(RegularTimePeriod period,BigDecimal relativeStrengthIndex){  super(period,new RelativeStrengthIndex(relativeStrengthIndex));}  }
class C{  @NoInline private boolean dequeueUnderflow(int arity){  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(arity == queue.getArity());  do {    if (head.NE(Deque.HEAD_INITIAL_VALUE))     queue.free(head);    head=queue.dequeue(arity);  } while (head.NE(Deque.HEAD_INITIAL_VALUE) && bufferOffset(head).isZero());  if (head.EQ(Deque.HEAD_INITIAL_VALUE))   return !headStarved(arity);  return true;}  }
class C{  public void fill(Shape s){  Shape shape=((ShapeTransformer)transformer).transform(s);  delegate.fill(shape);}  }
class C{  static <E>ImmutableList<E> asImmutableList(Object[] elements,int length){switch (length) {case 0:    return of();case 1:  @SuppressWarnings("unchecked") ImmutableList<E> list=new SingletonImmutableList<E>((E)elements[0]);return list;default :if (length < elements.length) {elements=arraysCopyOf(elements,length);}return new RegularImmutableList<E>(elements);}}  }
class C{  public ExampleFileFilter(String[] filters){  this(filters,null);}  }
class C{  @Override protected EClass eStaticClass(){  return N4mfPackage.Literals.EXEC_MODULE;}  }
class C{  public boolean isInherited(){  return (flags & FLAGS_INHERITED) != 0;}  }
class C{  protected boolean launchDMLYarnAppmaster() throws IOException, DMLScriptException {  boolean ret=false;  String hdfsWD=null;  try {    Timing time=new Timing(true);    YarnConfiguration yconf=new YarnConfiguration();    YarnClient yarnClient=YarnClient.createYarnClient();    yarnClient.init(yconf);    yarnClient.start();    YarnClientApplication app=yarnClient.createApplication();    ApplicationSubmissionContext appContext=app.getApplicationSubmissionContext();    ApplicationId appId=appContext.getApplicationId();    LOG.debug("Created application (applicationID: " + appId + ")");    hdfsWD=DMLAppMasterUtils.constructHDFSWorkingDir(_dmlConfig,appId);    copyResourcesToHdfsWorkingDir(yconf,hdfsWD);    String command=constructAMCommand(_args,_dmlConfig);    LOG.debug("Constructed application master command: \n" + command);    ContainerLaunchContext amContainer=Records.newRecord(ContainerLaunchContext.class);    amContainer.setCommands(Collections.singletonList(command));    amContainer.setLocalResources(constructLocalResourceMap(yconf));    amContainer.setEnvironment(constructEnvionmentMap(yconf));    int memHeap=_dmlConfig.getIntValue(DMLConfig.YARN_APPMASTERMEM);    int memAlloc=(int)computeMemoryAllocation(memHeap);    Resource capability=Records.newRecord(Resource.class);    capability.setMemory(memAlloc);    capability.setVirtualCores(NUM_CORES);    LOG.debug("Requested application resources: memory=" + memAlloc + ", vcores="+ NUM_CORES);    String qname=_dmlConfig.getTextValue(DMLConfig.YARN_APPQUEUE);    appContext.setApplicationName(APPMASTER_NAME);    appContext.setAMContainerSpec(amContainer);    appContext.setResource(capability);    appContext.setQueue(qname);    LOG.debug("Configured application meta data: name=" + APPMASTER_NAME + ", queue="+ qname);    yarnClient.submitApplication(appContext);    ApplicationReport appReport=yarnClient.getApplicationReport(appId);    LOG.info("Application tracking-URL: " + appReport.getTrackingUrl());    YarnApplicationState appState=appReport.getYarnApplicationState();    YarnApplicationState oldState=appState;    LOG.info("Application state: " + appState);    while (appState != YarnApplicationState.FINISHED && appState != YarnApplicationState.KILLED && appState != YarnApplicationState.FAILED) {      Thread.sleep(APP_STATE_INTERVAL);      appReport=yarnClient.getApplicationReport(appId);      appState=appReport.getYarnApplicationState();      if (appState != oldState) {        oldState=appState;        LOG.info("Application state: " + appState);      }    }    FinalApplicationStatus finalState=appReport.getFinalApplicationStatus();    LOG.info("Application final status: " + finalState);    double appRuntime=(double)(appReport.getFinishTime() - appReport.getStartTime()) / 1000;    LOG.info("Application runtime: " + appRuntime + " sec.");    LOG.info("Total runtime: " + String.format("%.3f",time.stop() / 1000) + " sec.");    if (finalState != FinalApplicationStatus.SUCCEEDED) {      String stop_msg=readMessageToHDFSWorkingDir(_dmlConfig,yconf,appId);      if (stop_msg != null)       throw new DMLScriptException(stop_msg);      throw new DMLRuntimeException("DML yarn app master finished with final status: " + finalState + ".");    }    ret=true;  } catch (  DMLScriptException ex) {    throw ex;  }catch (  Exception ex) {    LOG.error("Failed to run DML yarn app master.",ex);    ret=false;  } finally {    if (hdfsWD != null)     MapReduceTool.deleteFileIfExistOnHDFS(hdfsWD);  }  return ret;}  }
class C{  public void addModifyListener(final ModifyListener listener){  this.checkWidget();  this.modifyListeners.add(listener);}  }
class C{  public void increment(){  sync.releaseShared(1);}  }
class C{  @Override public <T extends ServiceDocument>ServiceDocumentQueryResult queryDocuments(Class<T> documentType,ImmutableMap<String,String> terms,Optional<Integer> pageSize,boolean expandContent,boolean broadCast) throws BadRequestException, DocumentNotFoundException, TimeoutException, InterruptedException {  checkNotNull(documentType,"Cannot query documents with null documentType");  if (pageSize.isPresent()) {    checkArgument(pageSize.get() >= 1,"Cannot query documents with a page size less than 1");  }  QueryTask.QuerySpecification spec=QueryTaskUtils.buildQuerySpec(documentType,terms);  if (broadCast) {    spec.options=EnumSet.of(QueryTask.QuerySpecification.QueryOption.BROADCAST);  }  if (expandContent) {    spec.options.add(QueryTask.QuerySpecification.QueryOption.EXPAND_CONTENT);  }  if (pageSize.isPresent()) {    spec.resultLimit=pageSize.get();  }  Operation result=query(spec,false);  URI queryServiceUri=QueryTaskUtils.getServiceDocumentUri(result);  result=waitForTaskToFinish(queryServiceUri);  ServiceDocumentQueryResult queryResult=result.getBody(QueryTask.class).results;  if (pageSize.isPresent() && queryResult.nextPageLink != null) {    return queryDocumentPage(encodePageLink(queryResult.nextPageLink));  } else {    return queryResult;  }}  }
class C{  private void initEventTypes(IoEventType... eventTypes){  if ((eventTypes == null) || (eventTypes.length == 0)) {    eventTypes=DEFAULT_EVENT_SET;  }  this.eventTypes=EnumSet.of(eventTypes[0],eventTypes);  if (this.eventTypes.contains(IoEventType.SESSION_CREATED)) {    this.eventTypes=null;    throw new IllegalArgumentException(IoEventType.SESSION_CREATED + " is not allowed.");  }}  }
class C{  public static void assertEquals(String message,char expected,char actual){  Assert.assertEquals(message,expected,actual);}  }
class C{  public void clearErrorMessage(){  errorMessage=null;}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  PeriodAxis clone=(PeriodAxis)super.clone();  clone.timeZone=(TimeZone)this.timeZone.clone();  clone.labelInfo=(PeriodAxisLabelInfo[])this.labelInfo.clone();  return clone;}  }
class C{  public static InetAddress createLocalHost(){  try {    return SocketCreator.getLocalHost();  } catch (  java.net.UnknownHostException e) {    logStackTrace(e);    Assert.assertTrue(false,"Failed to get local host");    return null;  }}  }
class C{  public static final boolean equals(final double[][] m1,final double[][] m2){  return Arrays.equals(m1,m2);}  }
class C{  protected boolean hasAlert(){  return (alert[0] != 0);}  }
class C{  public List<PhotoItem> queryAll(Uri uri,long lastId){  return FilmstripContentQueries.forCameraPath(mContentResolver,uri,PhotoDataQuery.QUERY_PROJECTION,lastId,PhotoDataQuery.QUERY_ORDER,this);}  }
class C{  public void addDateFormat(String propertyName,DateFormat df){  this.dateFormats.put(propertyName,df);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String substring;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("strong");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  substring=child.substringData(0,8);  assertEquals("characterdataSubStringValueAssert","Margaret",substring);}  }
class C{  protected void registerGridGroupAttributes(){  addAttributeProcessor(new GridSpacingLmlAttribute(),"spacing");  addAttributeProcessor(new ItemHeightLmlAttribute(),"itemHeight");  addAttributeProcessor(new ItemSizeLmlAttribute(),"itemSize");  addAttributeProcessor(new ItemWidthLmlAttribute(),"itemWidth");  addAttributeProcessor(new BlockIndexesLmlAttribute(),"blockIndexes");  addAttributeProcessor(new ItemsAmountLmlAttribute(),"itemsAmount");}  }
class C{  public boolean hasComment(){  return comment != null;}  }
class C{  public final LC gridGapY(String boundsSize){  setGridGapY(ConstraintParser.parseBoundSize(boundsSize,true,false));  return this;}  }
class C{  public void createMemory(String database){}  }
class C{  public String replaceTipText(){  return "The regular expression to use for replacing the matching attribute " + "names with.";}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.bouncing_balls);  LinearLayout container=(LinearLayout)findViewById(R.id.container);  container.addView(new MyAnimationView(this));}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  private void handleStaticReferenceImplicitTypeArguments(Tree.QualifiedMemberOrTypeExpression that){  Declaration member=that.getDeclaration();  Tree.TypeArguments tas=that.getTypeArguments();  if (isStaticReference(that)) {    if (member != null && !explicitTypeArguments(member,tas)) {      that.addError("type arguments could not be inferred: '" + member.getName(unit) + "' is generic");    }    Tree.StaticMemberOrTypeExpression smte=(Tree.StaticMemberOrTypeExpression)that.getPrimary();    Tree.TypeArguments typeArgs=smte.getTypeArguments();    TypeDeclaration type=(TypeDeclaration)smte.getDeclaration();    if (type != null && !explicitTypeArguments(type,typeArgs) && typeArgs.getTypeModels() == null) {      Declaration declaration=smte.getDeclaration();      Generic dec=(Generic)declaration;      smte.addError("missing type arguments to generic type qualifying static reference: '" + declaration.getName(unit) + "' declares type parameters "+ typeParameterList(dec));    }  }  Tree.Primary primary=that.getPrimary();  if (!that.getDirectlyInvoked() && (member.isStatic() || isConstructor(member)) && primary instanceof Tree.StaticMemberOrTypeExpression) {    Tree.StaticMemberOrTypeExpression smte=(Tree.StaticMemberOrTypeExpression)primary;    Declaration qtd=smte.getDeclaration();    Tree.TypeArguments qtas=smte.getTypeArguments();    if (!explicitTypeArguments(qtd,qtas) && isGeneric(qtd) && !qtd.isJava()) {      if (!explicitTypeArguments(member,tas)) {        Generic dec=(Generic)qtd;        that.addError("missing explicit type arguments to generic qualifying type: '" + qtd.getName(unit) + "' declares type parameters "+ typeParameterList(dec));      } else {        Type functionType=genericFunctionType((Generic)qtd,that.getScope(),member,that.getTarget(),unit);        that.setTypeModel(functionType);        checkNotJvm(that,"type functions are not supported on the JVM: '" + qtd.getName(unit) + "' is generic (specify explicit type arguments)");      }    }  }}  }
class C{  public static <T extends View>T findViewById(Activity act,int viewId){  View containerView=act.getWindow().getDecorView();  return findViewById(containerView,viewId);}  }
class C{  boolean findCellForSpanThatIntersects(int[] cellXY,int spanX,int spanY,int intersectX,int intersectY){  return findCellForSpanThatIntersectsIgnoring(cellXY,spanX,spanY,intersectX,intersectY,null,mOccupied);}  }
class C{  @Override public void scale(float sx,float sy){  scaleImpl(sx,sy,1);}  }
class C{  @Override protected EClass eStaticClass(){  return TypesPackage.Literals.ACCESSIBLE_TYPE_ELEMENT;}  }
class C{  public int countPendingExports(){  final Cursor cursor=contentResolver.query(ContentProvider.CONTENT_URI_SESSION,new String[]{Schema.COL_ID},Schema.COL_HAS_BEEN_EXPORTED + "= 0",null,null);  final int count=cursor.getCount();  cursor.close();  return count;}  }
class C{  public short nextShort(){  return (short)(next(16));}  }
class C{  public int size(){  return vectorList.size();}  }
class C{  public String optString(int index,String defaultValue){  Object object=this.opt(index);  return JSONObject.NULL.equals(object) ? defaultValue : object.toString();}  }
class C{  void createSceneSSBO(){  KDTree kdtree=new KDTree();  List<Triangle> triangles=new ArrayList<Triangle>();  int trianglesCount=mesh.positions.remaining() / 3 / 3;  sceneBounds=new Box();  Vector3f min=new Vector3f(Float.MAX_VALUE,Float.MAX_VALUE,Float.MAX_VALUE);  Vector3f max=new Vector3f(-Float.MAX_VALUE,-Float.MAX_VALUE,-Float.MAX_VALUE);  sceneBounds.min=min;  sceneBounds.max=max;  for (int i=0; i < trianglesCount; i++) {    Triangle t=new Triangle();    t.v0=new Vector3f(mesh.positions.get(i * 3 * 3 + 0),mesh.positions.get(i * 3 * 3 + 1),mesh.positions.get(i * 3 * 3 + 2));    t.v1=new Vector3f(mesh.positions.get(i * 3 * 3 + 3),mesh.positions.get(i * 3 * 3 + 4),mesh.positions.get(i * 3 * 3 + 5));    t.v2=new Vector3f(mesh.positions.get(i * 3 * 3 + 6),mesh.positions.get(i * 3 * 3 + 7),mesh.positions.get(i * 3 * 3 + 8));    triangles.add(t);    min.min(t.v0).min(t.v1).min(t.v2);    max.max(t.v0).max(t.v1).max(t.v2);  }  kdtree.buildTree(triangles,sceneBounds);  DynamicByteBuffer nodesBuffer=new DynamicByteBuffer();  DynamicByteBuffer trianglesBuffer=new DynamicByteBuffer();  kdTreeToBuffers(kdtree,nodesBuffer,trianglesBuffer);  nodesBuffer.flip();  trianglesBuffer.flip();  this.nodesSsbo=glGenBuffers();  glBindBuffer(GL_ARRAY_BUFFER,nodesSsbo);  glBufferData(GL_ARRAY_BUFFER,nodesBuffer.bb,GL_STATIC_DRAW);  glBindBuffer(GL_ARRAY_BUFFER,0);  this.trianglesSsbo=glGenBuffers();  glBindBuffer(GL_ARRAY_BUFFER,trianglesSsbo);  glBufferData(GL_ARRAY_BUFFER,trianglesBuffer.bb,GL_STATIC_DRAW);  glBindBuffer(GL_ARRAY_BUFFER,0);}  }
class C{  public StandardXYToolTipGenerator(){  this(DEFAULT_TOOL_TIP_FORMAT,NumberFormat.getNumberInstance(),NumberFormat.getNumberInstance());}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public PresentationEntry(){  super();  getCategories().remove(DocumentListEntry.CATEGORY);  getCategories().add(CATEGORY);}  }
class C{  public void addNodeTest(PredicatedNodeTest test){  if (null == m_nodeTests) {    m_nodeTests=new PredicatedNodeTest[1];    m_nodeTests[0]=test;  } else {    PredicatedNodeTest[] tests=m_nodeTests;    int len=m_nodeTests.length;    m_nodeTests=new PredicatedNodeTest[len + 1];    System.arraycopy(tests,0,m_nodeTests,0,len);    m_nodeTests[len]=test;  }  test.exprSetParent(this);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public boolean hasMember(String playerName){  return membersAndLastSeen.get(playerName) != null;}  }
class C{  private List loadQLMasterData(final String query,final String queryType) throws ApplicationRuntimeException {  List list=null;  try {    if (queryType.trim().equalsIgnoreCase(HQL_QUERY_TYPE))     list=queryByHibernate(query); else     if (queryType.trim().equalsIgnoreCase(SQL_QUERY_TYPE))     list=queryByJdbc(query);  } catch (  final Exception e) {    LOGGER.error("Error occurred in EgovMasterDataCaching loadQLMasterData",e);    throw new ApplicationRuntimeException("Error occurred in EgovMasterDataCaching loadQLMasterData",e);  }  return list;}  }
class C{  public static void collectImports(final IJavaProject project,final ASTNode node,final Collection<ITypeBinding> typeBindings,final Collection<IBinding> staticBindings,final boolean declarations){  collectImports(project,node,typeBindings,staticBindings,null,declarations);}  }
class C{  public final void onResume(){  mChronosListener.onResume(mGUIClient);}  }
class C{  public boolean userCanMoveDir(int connectedUserId,int dirId,int dstDirId,String entidad) throws Exception {  boolean can=false;  int parentId;  int parentDirMgrId=Defs.NULL_ID;  int dstDirMgrId=Defs.NULL_ID;  DirsTable table=new DirsTable();  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession(entidad));    parentId=DbSelectFns.selectLongInteger(dbConn,DaoDATNodeTbl.getTblName(),DaoDATNodeTbl.getParentIdColName(true),table.getLoadNodeDirQual(dirId));    if (parentId == Defs.ROOT_DIR_ID)     parentDirMgrId=0; else     parentDirMgrId=this.getDirMgrId(parentId,entidad);    if (dstDirId == Defs.NULL_ID || dstDirId == Defs.ROOT_DIR_ID)     dstDirMgrId=0; else     dstDirMgrId=this.getDirMgrId(dstDirId,entidad);    can=hasUserAuth(connectedUserId,USER_ACTION_ID_MOVE,Defs.NULL_ID,parentDirMgrId,dstDirMgrId,entidad);  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    dbConn.close();  }  return can;}  }
class C{  public static void write(Object o,String filename) throws JAXBException {  write(o,new File(filename));}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  DefaultKeyedValueDataset clone=(DefaultKeyedValueDataset)super.clone();  return clone;}  }
class C{  public int size(){  return size;}  }
class C{  public Result filterOnly(String source){  Result ret=new Result();  for (  ResultEntry l : this.log) {    if (l.getSource().equals(source)) {      ret.add(l);    }  }  return ret;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:30.209 -0500",hash_original_method="7869505C1EE96F329E4F7F0EA5AF9C5D",hash_generated_method="F5B9F1894C2B7AD20F6F29B9231F6283") protected void onLooperPrepared(){}  }
class C{  @ApiOperation(value="Stop the specified engine") @RequestMapping(value="engine/{engine}/stop",method=RequestMethod.POST) @ResponseStatus(HttpStatus.NO_CONTENT) @ResponseBody public final void postStopByEngine(@PathVariable("engine") String engineName){  stopImpl(getSymmetricEngine(engineName));}  }
class C{  public void close() throws IOException {  if (!closed) {    super.close();    eos=true;    closed=true;  }}  }
class C{  @Override public synchronized void addInstanceListener(InstanceListener tsl){  m_instanceListeners.add(tsl);}  }
class C{  private List<FileDescriptor> prepareFileDescriptors(List<FileShare> filesystems,VirtualPoolCapabilityValuesWrapper cosCapabilities,String suggestedId){  final List<FileDescriptor> fileDescriptors=new ArrayList<FileDescriptor>();  for (  FileShare filesystem : filesystems) {    FileDescriptor desc=new FileDescriptor(FileDescriptor.Type.FILE_DATA,filesystem.getStorageDevice(),filesystem.getId(),filesystem.getPool(),filesystem.getCapacity(),cosCapabilities,null,suggestedId);    fileDescriptors.add(desc);  }  return fileDescriptors;}  }
class C{  @Override public CacheHeader remove(Object key){  waitForKey(key);  if (super.containsKey(key)) {    mTotalSize.getAndAdd(-1 * super.get(key).size);  }  return super.remove(key);}  }
class C{  public void addRelation(Relation<?> relation){  this.relations.add(relation);}  }
class C{  public void skip(int count) throws IOException {  int skipCount=Math.min(limit - position,count);  while (true) {    position+=skipCount;    count-=skipCount;    if (count == 0)     break;    skipCount=Math.min(count,capacity);    require(skipCount);  }}  }
class C{  @Override public void addPropertyChangeListener(String name,PropertyChangeListener pcl){  m_bcSupport.addPropertyChangeListener(name,pcl);}  }
class C{  public static String escapeMetaDataPattern(String pattern){  if (pattern == null || pattern.length() == 0) {    return pattern;  }  return replaceAll(pattern,"\\","\\\\");}  }
class C{  private String discoverTagName(RSyntaxDocument doc,int dot){  Stack stack=new Stack();  Element root=doc.getDefaultRootElement();  int curLine=root.getElementIndex(dot);  for (int i=0; i <= curLine; i++) {    Token t=doc.getTokenListForLine(i);    while (t != null && t.isPaintable()) {      if (t.type == Token.MARKUP_TAG_DELIMITER) {        if (t.isSingleChar('<') || t.isSingleChar('[')) {          t=t.getNextToken();          while (t != null && t.isPaintable()) {            if (t.type == Token.MARKUP_TAG_NAME || t.type == Token.MARKUP_TAG_ATTRIBUTE) {              stack.push(t.getLexeme());              break;            }            t=t.getNextToken();          }        } else         if (t.textCount == 2 && t.text[t.textOffset] == '/' && (t.text[t.textOffset + 1] == '>' || t.text[t.textOffset + 1] == ']')) {          if (!stack.isEmpty()) {            stack.pop();          }        } else         if (t.textCount == 2 && (t.text[t.textOffset] == '<' || t.text[t.textOffset] == '[') && t.text[t.textOffset + 1] == '/') {          String tagName=null;          if (!stack.isEmpty()) {            tagName=(String)stack.pop();          }          if (t.offset + t.textCount >= dot) {            return tagName;          }        }      }      t=t.getNextToken();    }  }  return null;}  }
class C{  private CIMObjectPath createHandler() throws WBEMException, ConnectionManagerException {  CimListener listener=_connection.getIndicationListener();  URL listenerURL=listener.getURL();  if (listenerURL == null) {    throw new ConnectionManagerException("Listener URL is not set, Subscription handler cannot be set.");  }  StringBuffer handlerNameBuff=new StringBuffer();  handlerNameBuff.append(_subscriptionsIdentifier);  handlerNameBuff.append(CimConstants.PATH_NAME_DELIMITER);  handlerNameBuff.append(listenerURL.getHost());  handlerNameBuff.append(CimConstants.PATH_NAME_DELIMITER);  handlerNameBuff.append(listenerURL.getPort());  String handlerName=handlerNameBuff.toString();  CIMProperty<?> destinationProperty=new CIMProperty<String>(CimConstants.HANLDER_PROP_DESTINATION,CIMDataType.STRING_T,listenerURL.toString() + '/' + _connection.getConnectionName());  CIMProperty<?>[] handlerProperties=new CIMProperty[]{destinationProperty};  return createInstance(CimConstants.CIM_HANDLER_NAME,handlerName,handlerProperties);}  }
class C{  public String toSExpression(){  return toSExpression(true);}  }
class C{  @Override public synchronized void updateObject(String columnLabel,Object x,int scaleOrLength) throws SQLException {  super.updateObject(columnLabel,JDBC42Helper.convertJavaTimeToJavaSql(x),scaleOrLength);}  }
class C{  public static String translateMemoryConstraint(License license){  String limit;  try {    limit=license.getConstraints().getConstraintValue(ProductConstraintManager.INSTANCE.getMemoryLimitConstraint());  } catch (  ConstraintNotRestrictedException e) {    return I18N.getMessage(I18N.getGUIBundle(),"gui.license.constraint.unlimited_memory.label");  }  return I18N.getMessage(I18N.getGUIBundle(),"gui.license.constraint.memory.label",limit);}  }
class C{  private boolean shouldInjectJavaScript(String url){  if (!isJavaScriptEnabled()) {    return false;  }  if (getAxsUrlParameterValue(url) == ACCESSIBILITY_SCRIPT_INJECTION_OPTED_OUT) {    return false;  }  if (!isScriptInjectionEnabled()) {    return false;  }  return true;}  }
class C{  protected void testInterruptedPeriod(int testMonth,int testDay,String productId,boolean withUser,BigDecimal paramEtalonPrice) throws Exception {  final long billingTime=getBillingTime(testYear,testMonth,testDay);  creSub(productId,getDate(testYear,testMonth,-2,8,0));  if (withUser) {    subAddUser(U_1_ID,getDate(testYear,testMonth,-2,8,0));    subAddUser(U_2_ID,getDate(testYear,testMonth,2,8,0));    subRevokeUser(U_2_ID,getDate(testYear,testMonth,11,8,00));    subAddUser(U_3_ID,getDate(testYear,testMonth,4,14,55));    subRevokeUser(U_3_ID,getDate(testYear,testMonth,5,7,59));    subAddUser(U_3_ID,getDate(testYear,testMonth,12,8,00));    subAddUser(U_4_ID,getDate(testYear,testMonth,11,8,0));  }  updSub(SubscriptionStatus.EXPIRED,getDate(testYear,testMonth,5,8,0));  updSub(SubscriptionStatus.EXPIRED,getDate(testYear,testMonth,8,8,0));  updSub(SubscriptionStatus.ACTIVE,getDate(testYear,testMonth,10,8,0));  updSub(SubscriptionStatus.ACTIVE,getDate(testYear,testMonth,14,8,0));  updSub(SubscriptionStatus.DEACTIVATED,getDate(testYear,testMonth,24,8,0));  startBillingRun(billingTime);  Date periods[][]=new Date[][]{{getStartDate(testYear,testMonth),getDate(testYear,testMonth,5,8,0)},{getDate(testYear,testMonth,10,8,0),getDate(testYear,testMonth,24,8,0)}};  verify(periods,paramEtalonPrice,testMonth);}  }
class C{  private void recreatePhotonMapTexture(){  for (int i=0; i < photonMapTextures.length; i++) {    TextureInfo info=photonMapTextures[i];    if (info != null) {      ARBBindlessTexture.glMakeImageHandleNonResidentARB(info.bindlessImageHandle);      ARBBindlessTexture.glMakeTextureHandleNonResidentARB(info.bindlessTextureAndSamplerHandle);      glDeleteTextures(info.openGlHandle);    }  }  createPhotonMapTextures();}  }
class C{  public void realForwardFull(double[] a){  realForwardFull(a,0);}  }
class C{  public static boolean canClose(List constraints){  for (Iterator iter=constraints.iterator(); iter.hasNext(); ) {    DockConstraint dc=(DockConstraint)iter.next();    if (!dc.canClose())     return false;  }  return true;}  }
class C{  public int run(String[] argv) throws Exception {  Args args=new Args();  CmdLineParser parser=new CmdLineParser(args,ParserProperties.defaults().withUsageWidth(100));  try {    parser.parseArgument(argv);  } catch (  CmdLineException e) {    System.err.println(e.getMessage());    parser.printUsage(System.err);    return -1;  }  if (args.collection.endsWith(".gz")) {    System.out.println("gzipped collection is not seekable: use compressed version!");    return -1;  }  FileSystem fs=FileSystem.get(new Configuration());  initialize(args.index,args.collection,fs);  System.out.println("Query: " + args.query);  long startTime=System.currentTimeMillis();  runQuery(args.query);  System.out.println("\nquery completed in " + (System.currentTimeMillis() - startTime) + "ms");  return 1;}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) @Test public void testNodeProcessing() throws Exception {  MostFrequentKeyMap<String,Integer> oper=new MostFrequentKeyMap<String,Integer>();  CountAndLastTupleTestSink matchSink=new CountAndLastTupleTestSink();  CountAndLastTupleTestSink listSink=new CountAndLastTupleTestSink();  oper.most.setSink(matchSink);  oper.list.setSink(listSink);  oper.beginWindow(0);  HashMap<String,Integer> amap=new HashMap<String,Integer>(1);  HashMap<String,Integer> bmap=new HashMap<String,Integer>(1);  HashMap<String,Integer> cmap=new HashMap<String,Integer>(1);  int atot=5;  int btot=7;  int ctot=6;  amap.put("a",null);  bmap.put("b",null);  cmap.put("c",null);  for (int i=0; i < atot; i++) {    oper.data.process(amap);  }  for (int i=0; i < btot; i++) {    oper.data.process(bmap);  }  for (int i=0; i < ctot; i++) {    oper.data.process(cmap);  }  oper.endWindow();  Assert.assertEquals("number emitted tuples",1,matchSink.count);  HashMap<String,Integer> tuple=(HashMap<String,Integer>)matchSink.tuple;  Integer val=tuple.get("b");  Assert.assertEquals("Count of b was ",btot,val.intValue());  Assert.assertEquals("number emitted tuples",1,listSink.count);  ArrayList<HashMap<String,Integer>> list=(ArrayList<HashMap<String,Integer>>)listSink.tuple;  val=list.get(0).get("b");  Assert.assertEquals("Count of b was ",btot,val.intValue());  matchSink.clear();  listSink.clear();  oper.beginWindow(0);  atot=5;  btot=4;  ctot=5;  for (int i=0; i < atot; i++) {    oper.data.process(amap);  }  for (int i=0; i < btot; i++) {    oper.data.process(bmap);  }  for (int i=0; i < ctot; i++) {    oper.data.process(cmap);  }  oper.endWindow();  Assert.assertEquals("number emitted tuples",1,matchSink.count);  Assert.assertEquals("number emitted tuples",1,listSink.count);  list=(ArrayList<HashMap<String,Integer>>)listSink.tuple;  int acount=0;  int ccount=0;  for (  HashMap<String,Integer> h : list) {    val=h.get("a");    if (val == null) {      ccount=h.get("c");    } else {      acount=val;    }  }  Assert.assertEquals("Count of a was ",atot,acount);  Assert.assertEquals("Count of c was ",ctot,ccount);  HashMap<String,Integer> mtuple=(HashMap<String,Integer>)matchSink.tuple;  val=mtuple.get("a");  if (val == null) {    val=mtuple.get("c");  }  Assert.assertEquals("Count of least frequent key was ",ctot,val.intValue());}  }
class C{  public static void itemDetails(String id){  VirtualArrayRestRep virtualArray=VirtualArrayUtils.getVirtualArray(id);  if (virtualArray == null) {    error(MessagesUtils.get(UNKNOWN,id));  }  Map<String,Set<NamedRelatedResourceRep>> connectivityMap=VirtualArrayUtils.getConnectivityMap(id);  connectivityMap.remove(ConnectivityTypes.RP_VPLEX);  Map<String,Set<String>> attributes=VirtualArrayUtils.getAvailableAttributes(uris(id));  render(virtualArray,connectivityMap,attributes);}  }
class C{  public ServiceResponseException(int statusCode,String message,Response response){  super(message);  this.statusCode=statusCode;  this.response=response;}  }
class C{  public StringRequest(String url,Listener<String> listener,ErrorListener errorListener){  this(Method.GET,url,listener,errorListener);}  }
class C{  @SuppressWarnings("deprecation") protected boolean isFastClockTimeGE(int hr,int min){  Date now=fastClock.getTime();  nowHours=now.getHours();  nowMinutes=now.getMinutes();  if (((nowHours * 60) + nowMinutes) >= ((hr * 60) + min)) {    return true;  }  return false;}  }
class C{  @Override public void addPages(){  pageDrivers=new ConnectionPageDriver(this);  addPage(pageDrivers);  List<DataSourceProviderDescriptor> providers=DataSourceProviderRegistry.getInstance().getDataSourceProviders();  for (  DataSourceProviderDescriptor provider : providers) {    DataSourceViewDescriptor view=provider.getView(IActionConstants.NEW_CONNECTION_POINT);    availableProvides.add(provider);    if (view != null) {      ConnectionPageSettings pageSettings=new ConnectionPageSettings(NewConnectionWizard.this,view);      settingsPages.put(provider,pageSettings);      addPage(pageSettings);    }  }  pageGeneral=new ConnectionPageGeneral(this);  pageNetwork=new ConnectionPageNetwork(this);  addPage(pageGeneral);  addPage(pageNetwork);}  }
class C{  private void logMessage(String msg,Object[] obj){  if (getMonitoringPropertiesLoader().isToLogIndications()) {    _logger.debug(msg,obj);  }}  }
class C{  private void paintBorder(Graphics2D g,JComponent c,int x,int y,int width,int height){  boolean useToolBarColors=isInToolBar(c);  Shape s;  if (focused) {    s=shapeGenerator.createRoundRectangle(x - 2,y - 2,width + 3,height + 3,CornerSize.OUTER_FOCUS);    g.setPaint(getFocusPaint(s,FocusType.OUTER_FOCUS,useToolBarColors));    g.draw(s);    s=shapeGenerator.createRoundRectangle(x - 1,y - 1,width + 1,height + 1,CornerSize.INNER_FOCUS);    g.setPaint(getFocusPaint(s,FocusType.INNER_FOCUS,useToolBarColors));    g.draw(s);  }  if (type != CommonControlState.DISABLED) {    s=shapeGenerator.createRoundRectangle(x + 1,x + 1,width - 2,height - 2,CornerSize.BORDER);    internalShadow.fill(g,s,false,true);  }  s=shapeGenerator.createRoundRectangle(x,y,width - 1,height - 1,CornerSize.BORDER);  g.setPaint(getTextBorderPaint(type,!focused && useToolBarColors));  g.draw(s);}  }
class C{  public void testFinished(Description description) throws Exception {  String printedOutput=this.endCapture();  String printedOutputNoTrailingWS=printedOutput.replaceFirst("\\s+$","");  if (printedOutputNoTrailingWS.length() > 0) {    System.out.println(printedOutputNoTrailingWS);  }  if (mostRecentTestPassed) {    System.out.println("=====> Passed\n");  } else {    System.out.println("=====> FAILED!\n");  }}  }
class C{  public Period minusDays(int days){  return plusDays(-days);}  }
class C{  protected Object configureValue(Object value){  if (value instanceof Integer) {    value=new Font(DefaultMetalTheme.getDefaultFontName(type),DefaultMetalTheme.getDefaultFontStyle(type),((Integer)value).intValue());  }  return super.configureValue(value);}  }
class C{  protected char[] removeFragmentIdentifier(char[] component){  if (component == null) {    return null;  }  final int lastIndex=new String(component).indexOf('#');  if (lastIndex != -1) {    component=new String(component).substring(0,lastIndex).toCharArray();  }  return component;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public boolean optBoolean(String key,boolean defaultValue){  Object o=super.get(key);  if (o == null)   return defaultValue; else   if (o.equals(Boolean.FALSE) || (o instanceof String && ((String)o).equalsIgnoreCase("false")) || (o instanceof Integer && (o).equals(0))) {    return false;  } else   if (o.equals(Boolean.TRUE) || (o instanceof String && ((String)o).equalsIgnoreCase("true")) || (o instanceof Integer && (o).equals(1))) {    return true;  } else   return defaultValue;}  }
class C{  public boolean isTraceEnabled(Marker marker){  return false;}  }
class C{  public int tableVersion(){  return this.data.readFixed(Offset.tableVersion.offset);}  }
class C{  public void clearButHoldMessage(){  logD("List:Change %d = 0 clear",size());  messageHolderList.clear();}  }
class C{  public ClusterGenerator(){  super();  setNumAttributes(defaultNumAttributes());}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.875 -0400",hash_original_method="842F06004C71964D73C76D585C53C035",hash_generated_method="2269A8644752FBCC6369CC307F232B1E") public static IOFileFilter notFileFilter(IOFileFilter filter){  return new NotFileFilter(filter);}  }
class C{  public String toString(){  if (size() == 0) {    return "{}";  }  StringBuilder buf=new StringBuilder(32 * size());  buf.append('{');  MapIterator it=mapIterator();  boolean hasNext=it.hasNext();  while (hasNext) {    Object key=it.next();    Object value=it.getValue();    buf.append(key == this ? "(this Map)" : key).append('=').append(value == this ? "(this Map)" : value);    hasNext=it.hasNext();    if (hasNext) {      buf.append(',').append(' ');    }  }  buf.append('}');  return buf.toString();}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 1634) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public void addPropertyChangeListener(PropertyChangeListener listener){  changeSupport.addPropertyChangeListener(listener);}  }
class C{  public void parseQuotientByteCode(Vertex state,DataInputStream dataStream,Network network) throws IOException {  float correctness=dataStream.readFloat();  long id=dataStream.readLong();  if (id == 0) {    return;  }  Vertex element=network.findById(id);  if (element == null) {    return;  }  Relationship relationship=state.addWeakRelationship(Primitive.QUOTIENT,element,correctness);  id=dataStream.readLong();  if (id == 0) {    return;  }  element=network.findById(id);  if (element == null) {    return;  }  if (element.is(Primitive.PREVIOUS)) {    id=dataStream.readLong();    Vertex meta=network.createTemporyVertex();    relationship.setMeta(meta);    while (id > 0) {      element=network.findById(id);      if (element != null) {        if (element.is(Primitive.NOT)) {          id=dataStream.readLong();          if (id == 0) {            return;          }          element=network.findById(id);          if (element == null) {            continue;          }          meta.removeRelationship(Primitive.PREVIOUS,element);        } else {          meta.addRelationship(Primitive.PREVIOUS,element);        }      }      id=dataStream.readLong();    }  }}  }
class C{  public static void main(String[] args){  System.setProperty("prism.dirtyopts","false");  JFrame frame=new JFrame();  frame.setContentPane(new BowlerStudio3dEngine());  frame.setSize(1024,1024);  frame.setVisible(true);  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);}  }
class C{  private void encodeTypes(List<Type> types,Map<String,Object> m,String key,Declaration from){  if (types == null || types.isEmpty())   return;  List<Map<String,Object>> sats=new ArrayList<>(types.size());  for (  Type st : types) {    sats.add(typeMap(st,from));  }  m.put(key,sats);}  }
class C{  protected String simpleProcessCommand(final CommandRequest command,final RestApiCallForCommandNotFoundException e){  if (getHttpOperationInvoker() != null) {    printWarning("WARNING - No REST API web service endpoint (URI) exists for command (%1$s); using the non-RESTful, simple URI.",command.getName());    return String.valueOf(getHttpOperationInvoker().processCommand(command));  }  throw e;}  }
class C{  private static AdSense initializeAdsense() throws Exception {  Credential credential=authorize();  AdSense adsense=new AdSense.Builder(new NetHttpTransport(),JSON_FACTORY,credential).setApplicationName(APPLICATION_NAME).build();  return adsense;}  }
class C{  void showAllGroupItems(){  Iterator<Integer> itKeys=knownGrpItems.keySet().iterator();  while (itKeys.hasNext()) {    showGroupItems(itKeys.next());  }}  }
class C{  public Permutation computeInverse(){  Permutation result=new Permutation(perm.length);  for (int i=perm.length - 1; i >= 0; i--) {    result.perm[perm[i]]=i;  }  return result;}  }
class C{  public static ItemStack consumeStackOnPlayer(ItemStack itemstack,@Nonnull EntityPlayer player){  if (player.capabilities.isCreativeMode)   return itemstack;  final ItemStack result=consumeStack(itemstack);  replacePlayerCurrentItem(player,result);  return result;}  }
class C{  private void init(final byte[] urlhash,final String line,final boolean isMarked,final ResultClass errorCode,final String errortext){  this.urlhash=urlhash;  this.line=line;  this.isMarked=isMarked;  this.resultStatus=errorCode;  this.error=errortext;}  }
class C{  public void valueChanged(ListSelectionEvent e){  if (e.getValueIsAdjusting() == false && displayList != null) {    int[] indicies=displayList.getSelectedIndices();    if (indicies.length > 0) {      ListModel listModel=getListModel();      OMEvent selectedEvent=(OMEvent)listModel.getElementAt(indicies[0]);      lastSelectedEvent=selectedEvent;      if (selectedEvent != null) {        if (clock != null) {          clock.setTime((long)selectedEvent.getTimeStamp());          Point2D location=selectedEvent.getLocation();          if (location != null && map != null) {            map.setCenter(location);          }        }        String details=selectedEvent.getDetailedInformation();        if (details != null) {          showDetails(details);        } else {          hideDetails();        }      }      for (Iterator<OMEvent> it=getAllEvents(); it.hasNext(); ) {        ((OMEvent)it.next()).putAttribute(OMEvent.ATT_KEY_SELECTED,null);      }      Vector<OMEvent> v=new Vector<OMEvent>();      OMEvent firstInRangeEvent=null;      OMEvent lastSelectedEvent=null;      int lastIndex=-2;      boolean inRange=false;      for (int i=0; i < indicies.length; i++) {        int curIndex=indicies[i];        selectedEvent=(OMEvent)listModel.getElementAt(curIndex);        selectedEvent.putAttribute(OMEvent.ATT_KEY_SELECTED,OMEvent.ATT_VAL_SELECTED);        if (curIndex == lastIndex + 1) {          inRange=true;          if (firstInRangeEvent == null) {            firstInRangeEvent=lastSelectedEvent;            firstInRangeEvent.putAttribute(OMEvent.ATT_KEY_SELECTED,OMEvent.ATT_VAL_SELECTED_START_RANGE);          }        } else         if (inRange && lastSelectedEvent != null) {          lastSelectedEvent.putAttribute(OMEvent.ATT_KEY_SELECTED,OMEvent.ATT_VAL_SELECTED_END_RANGE);          inRange=false;        }        v.add(selectedEvent);        Object src=selectedEvent.getSource();        if (src instanceof OMEventSelectionListener) {          ((OMEventSelectionListener)src).selected(selectedEvent);        }        lastSelectedEvent=selectedEvent;        lastIndex=curIndex;      }      if (inRange && lastSelectedEvent != null) {        lastSelectedEvent.putAttribute(OMEvent.ATT_KEY_SELECTED,OMEvent.ATT_VAL_SELECTED_END_RANGE);      }      if (aesc != null) {        aesc.eventsSelected(v);      }    }  }}  }
class C{  public boolean request(InterruptRequest interruptRequest){  FrInterruptRequest newInterruptRequest=(FrInterruptRequest)interruptRequest;synchronized (interruptRequestQueue) {    for (    InterruptRequest currentInterruptRequest : interruptRequestQueue) {      FrInterruptRequest currentFrInterruptRequest=(FrInterruptRequest)currentInterruptRequest;      if (currentFrInterruptRequest.getInterruptNumber() == newInterruptRequest.getInterruptNumber()) {        if ((newInterruptRequest.isNMI() && !currentFrInterruptRequest.isNMI()) || (newInterruptRequest.getICR() < currentFrInterruptRequest.getICR())) {          interruptRequestQueue.remove(currentFrInterruptRequest);          break;        } else {          return false;        }      }    }    interruptRequestQueue.add(newInterruptRequest);    Collections.sort(interruptRequestQueue);    return true;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.870 -0400",hash_original_method="F7590EA8797F8DD95DFA23DD2455DA0E",hash_generated_method="73A45AF74478191B794C3EC4838AF81C") public static IOFileFilter suffixFileFilter(String suffix,IOCase caseSensitivity){  return new SuffixFileFilter(suffix,caseSensitivity);}  }
class C{  public static void showToastAlways(Context context,String msg){  if (mTN != null) {    return;  }  Toast toast=Toast.makeText(context,msg,Toast.LENGTH_SHORT);  try {    Field field=toast.getClass().getDeclaredField("mTN");    field.setAccessible(true);    mTN=field.get(toast);    Field mNextViewField=mTN.getClass().getDeclaredField("mNextView");    mNextViewField.setAccessible(true);    mNextViewField.set(mTN,toast.getView());    Method method=mTN.getClass().getDeclaredMethod("show",new Class<?>[0]);    method.invoke(mTN,new Object[]{});  } catch (  IllegalArgumentException e) {    e.printStackTrace();  }catch (  IllegalAccessException e) {    e.printStackTrace();  }catch (  InvocationTargetException e) {    e.printStackTrace();  }catch (  NoSuchFieldException e) {    e.printStackTrace();  }catch (  NoSuchMethodException e) {    e.printStackTrace();  }}  }
class C{  public static boolean equalsIgnoreCase(String as[],String as1[]){  if (as == null && as1 == null) {    return true;  }  if (as == null || as1 == null) {    return false;  }  if (as.length != as1.length) {    return false;  }  for (int i=0; i < as.length; i++) {    if (!as[i].equalsIgnoreCase(as1[i])) {      return false;    }  }  return true;}  }
class C{  public ArrayList<IMultiPoint> search(IHypercube hc,IVisitKDNode visitor){  ArrayList<IMultiPoint> retval=new ArrayList<IMultiPoint>();  double[] low_raw=new double[hc.dimensionality()];  double[] high_raw=new double[hc.dimensionality()];  for (int i=0; i < low_raw.length; i++) {    low_raw[i]=hc.getLeft(i + 1);    high_raw[i]=hc.getRight(i + 1);  }  for (int i=0; i < points.size(); i++) {    double[] rawpt=points.get(i);    boolean inResult=true;    for (int j=0; j < low_raw.length; j++) {      if (rawpt[j] < low_raw[j] || rawpt[j] > high_raw[j]) {        inResult=false;        break;      }    }    if (inResult) {      visitor.visit(null);    }  }  return retval;}  }
class C{  public static boolean isGAUseUpdatable(){  return false;}  }
class C{  public static void reset(Context context){  SQLiteDatabase writableDatabase=getWritableDatabase(context);  writableDatabase.delete(CategoryTable.NAME,null,null);  writableDatabase.delete(QuizTable.NAME,null,null);  getInstance(context).preFillDatabase(writableDatabase);}  }
class C{  public void testDoCheckWithDefaultNotDetectionResultAndDetectionResultOverridenByConstructor(){  LOGGER.debug("doCheckWithDefaultNotDetectionResultAndDetectionResultOverridenByConstructor");  elements.add(element);  expect(mockTextElementBuilder.buildTextFromElement(element)).andReturn("test");  mockTestSolutionHandler.addTestSolution(TestSolution.PASSED);  expectLastCall().once();  expect(mockNomenclature.getValueList()).andReturn(Arrays.asList("test1"));  TextBelongsToBlackListChecker instance=new TextBelongsToBlackListChecker(mockTextElementBuilder,BLACKLIST_NOM_NAME,TestSolution.NEED_MORE_INFO,DETECTION_MSG);  instance.setNomenclatureLoaderService(mockNomenclatureLoaderService);  replay(mockTextElementBuilder,mockSSPHandler,mockTestSolutionHandler,mockNomenclature,mockNomenclatureLoaderService);  instance.doCheck(mockSSPHandler,elements,mockTestSolutionHandler);  verify(mockTextElementBuilder,mockSSPHandler,mockTestSolutionHandler,mockNomenclature,mockNomenclatureLoaderService);}  }
class C{  @Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){  setOrientation(LinearLayout.HORIZONTAL);  mSpace.setVisibility(View.GONE);  super.onMeasure(widthMeasureSpec,heightMeasureSpec);  final int contentWidth=getMeasuredWidth() - getPaddingLeft() - getPaddingRight();  final int count=getChildCount();  int totalChildWidth=0;  for (int i=0; i < count; i++) {    final View child=getChildAt(i);    if (child.getVisibility() != GONE) {      measureChildWithMargins(child,widthMeasureSpec,0,heightMeasureSpec,0);      totalChildWidth+=child.getMeasuredWidth();    }  }  if (totalChildWidth > contentWidth) {    setOrientation(LinearLayout.VERTICAL);  } else {    mSpace.setVisibility(View.VISIBLE);  }  super.onMeasure(widthMeasureSpec,heightMeasureSpec);}  }
class C{  public static void run(){  ObjectGetClassToClassConstant transformer=new ObjectGetClassToClassConstant();  for (  SootClass clz : Scene.v().getClasses()) {    for (    SootMethod meth : clz.getMethods()) {      if (meth.isConcrete()) {        try {          transformer.transform(meth.retrieveActiveBody());        } catch (        Exception ex) {          logger.info("Exception retrieving method body {}",ex);          continue;        }      }    }  }}  }
class C{  public String globalInfo(){  return "An instance filter that passes all instances through unmodified." + " Primarily for testing purposes.";}  }
class C{  public IOUtils(){  super();}  }
class C{  static public String numberToString(Object n){  if (n == null) {    return null;  }  return trimNumber(n.toString());}  }
class C{  public BindException(String msg){  super(msg);}  }
class C{  protected Type classEnter(JCTree tree,Env<AttrContext> env){  Env<AttrContext> prevEnv=this.env;  try {    this.env=env;    tree.accept(this);    return result;  } catch (  CompletionFailure ex) {    return chk.completionError(tree.pos(),ex);  } finally {    this.env=prevEnv;  }}  }
class C{  @Uninterruptible private static void checkReference(Address refaddr){  ObjectReference ref=org.mmtk.vm.VM.activePlan.global().loadObjectReference(refaddr);  if (!MemoryManager.validRef(ref)) {    Log.writeln();    Log.writeln("Invalid ref reported while scanning boot image");    Log.writeln();    Log.write(refaddr);    Log.write(":");    Log.flush();    MemoryManager.dumpRef(ref);    Log.writeln();    Log.writeln("Dumping stack:");    RVMThread.dumpStack();    VM.sysFail("\n\nScanStack: Detected bad GC map; exiting RVM with fatal error");  }}  }
class C{  public TypedRegionImpl(int offset,int length,String type){  super(offset,length);  fType=type;}  }
class C{  public Vertex parseOperatorByteCode(DataInputStream dataStream,Network network) throws IOException {  Vertex equation=network.createTemporyVertex();  equation.addRelationship(Primitive.INSTANTIATION,Primitive.EQUATION);  long id=dataStream.readLong();  Vertex operator=network.findById(id);  if (operator == null) {    return equation;  }  equation.addRelationship(Primitive.OPERATOR,operator);  id=dataStream.readLong();  if (id == 0) {    return equation;  }  Vertex next=network.findById(id);  if (next == null) {    return equation;  }  if (next.is(Primitive.NOT)) {    equation.addRelationship(Primitive.NOT,Primitive.NOT);    id=dataStream.readLong();    if (id == 0) {      return equation;    }  }  if (operator.is(Primitive.IF)) {    List<Vertex> stack=new ArrayList<Vertex>();    stack.add(equation);    Vertex top=equation;    next=network.findById(id);    if (next == null) {      return equation;    }    if (next.is(Primitive.ARGUMENT)) {      parseArgumentsByteCode(equation,dataStream,next,network);      id=dataStream.readLong();      if (id == 0) {        return equation;      }      next=network.findById(id);      if (next == null) {        return equation;      }    }    while (next.is(Primitive.AND) || next.is(Primitive.OR)) {      Vertex operation=next;      Vertex condition=network.createTemporyVertex();      condition.addRelationship(Primitive.INSTANTIATION,Primitive.EQUATION);      id=dataStream.readLong();      if (id == 0) {        return equation;      }      next=network.findById(id);      if (next == null) {        return equation;      }      if (next.is(Primitive.NOT)) {        condition.addRelationship(Primitive.NOT,Primitive.NOT);        id=dataStream.readLong();        if (id == 0) {          return equation;        }        next=network.findById(id);        if (next == null) {          return equation;        }      }      boolean bracket=false;      while (next.is(Primitive.LEFTBRACKET)) {        bracket=true;        stack.add(condition);        id=dataStream.readLong();        if (id == 0) {          return equation;        }        next=network.findById(id);        if (next == null) {          return equation;        }      }      condition.addRelationship(Primitive.OPERATOR,operation);      top.addRelationship(Primitive.CONDITION,condition);      parseArgumentsByteCode(condition,dataStream,next,network);      id=dataStream.readLong();      if (id == 0) {        return equation;      }      next=network.findById(id);      if (next == null) {        return equation;      }      if (bracket) {        stack.remove(stack.size() - 1);        top=stack.get(stack.size() - 1);        while (next.is(Primitive.RIGHTBRACKET)) {          stack.remove(stack.size() - 1);          top=stack.get(stack.size() - 1);          id=dataStream.readLong();          if (id == 0) {            return equation;          }          next=network.findById(id);          if (next == null) {            return equation;          }        }      }    }  }  while (id > 0) {    next=network.findById(id);    if (next == null) {      return equation;    }    parseArgumentsByteCode(equation,dataStream,next,network);    id=dataStream.readLong();  }  return equation;}  }
class C{  public static RegistrationState valueOf(int value){  RegistrationState state=mValueToEnum.get(value);  if (state != null) {    return state;  }  return UNKNOWN;}  }
class C{  public char next(){  if (more()) {    char c=this.mySource.charAt(this.myIndex);    this.myIndex+=1;    return c;  }  return 0;}  }
class C{  public boolean hasFileDescriptors(){  if (!mFdsKnown) {    boolean fdFound=false;    if (mParcelledData != null) {      if (mParcelledData.hasFileDescriptors()) {        fdFound=true;      }    } else {      Iterator<Map.Entry<String,Object>> iter=mMap.entrySet().iterator();      while (!fdFound && iter.hasNext()) {        Object obj=iter.next().getValue();        if (obj instanceof Parcelable) {          if ((((Parcelable)obj).describeContents() & Parcelable.CONTENTS_FILE_DESCRIPTOR) != 0) {            fdFound=true;            break;          }        } else         if (obj instanceof Parcelable[]) {          Parcelable[] array=(Parcelable[])obj;          for (int n=array.length - 1; n >= 0; n--) {            if ((array[n].describeContents() & Parcelable.CONTENTS_FILE_DESCRIPTOR) != 0) {              fdFound=true;              break;            }          }        } else         if (obj instanceof SparseArray) {          SparseArray<? extends Parcelable> array=(SparseArray<? extends Parcelable>)obj;          for (int n=array.size() - 1; n >= 0; n--) {            if ((array.get(n).describeContents() & Parcelable.CONTENTS_FILE_DESCRIPTOR) != 0) {              fdFound=true;              break;            }          }        } else         if (obj instanceof ArrayList) {          ArrayList array=(ArrayList)obj;          if ((array.size() > 0) && (array.get(0) instanceof Parcelable)) {            for (int n=array.size() - 1; n >= 0; n--) {              Parcelable p=(Parcelable)array.get(n);              if (p != null && ((p.describeContents() & Parcelable.CONTENTS_FILE_DESCRIPTOR) != 0)) {                fdFound=true;                break;              }            }          }        }      }    }    mHasFds=fdFound;    mFdsKnown=true;  }  return mHasFds;}  }
class C{  public static byte[] intToBytes(int in,ByteOrder order){  return ByteBuffer.allocate(Integer.BYTES).order(order).putInt(in).array();}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public int deleteByNameCreateTime(String name,java.util.Date createTime){  this.model.name=name;  this.model.createTime=createTime;  return this.model.delete();}  }
class C{  public void connected(){}  }
class C{  @Deprecated public void updateSharedNotebook(SharedNotebook sharedNotebook,OnClientCallback<Integer> callback){  AsyncReflector.execute(mClient,callback,"updateSharedNotebook",mAuthenticationToken,sharedNotebook);}  }
class C{  public JSONBuffer append(double cont){  if (stack.empty() || stack.peek() != Operand.ARRAY) {    throw new JSONException("Appending double outside of array context.");  }  buffer.append(Double.toString(cont));  addSeparator();  return this;}  }
class C{  public ColorIcon(int rgb){  this(new Color(rgb));}  }
class C{  int loadFileFlags(){  return 0;}  }
class C{  public static NotificationCompat.Builder newNotificationBuilderWithProgressBar(Context context){  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.ICE_CREAM_SANDWICH) {    return new NotificationBuilderWithProgressBar(context);  } else {    return new NotificationCompat.Builder(context);  }}  }
class C{  public static boolean equals(String a,String b){  if (a == null) {    return b == null;  }  return a.equals(b);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private String determineNodeId(String nodeId,String nodeName){  if (nodeName != null) {    if (nodeId != null) {      throw APIException.badRequests.theParametersAreNotValid("cannot use node_id and node_name");    }    nodeId=_coordinator.getMatchingNodeId(nodeName);    _log.info("Found node id {} for node name {}",nodeId,nodeName);    if (nodeId == null) {      throw APIException.badRequests.parameterIsNotValid("node name");    }  }  return nodeId;}  }
class C{  public KeySet[] newArray(int size){  return new KeySet[size];}  }
class C{  MVStore(HashMap<String,Object> config){  Object o=config.get("compress");  this.compressionLevel=o == null ? 0 : (Integer)o;  String fileName=(String)config.get("fileName");  o=config.get("pageSplitSize");  if (o == null) {    pageSplitSize=fileName == null ? 4 * 1024 : 16 * 1024;  } else {    pageSplitSize=(Integer)o;  }  o=config.get("backgroundExceptionHandler");  this.backgroundExceptionHandler=(UncaughtExceptionHandler)o;  meta=new MVMap<String,String>(StringDataType.INSTANCE,StringDataType.INSTANCE);  HashMap<String,Object> c=New.hashMap();  c.put("id",0);  c.put("createVersion",currentVersion);  meta.init(this,c);  fileStore=(FileStore)config.get("fileStore");  if (fileName == null && fileStore == null) {    cache=null;    cacheChunkRef=null;    return;  }  if (fileStore == null) {    fileStoreIsProvided=false;    fileStore=new FileStore();  } else {    fileStoreIsProvided=true;  }  retentionTime=fileStore.getDefaultRetentionTime();  boolean readOnly=config.containsKey("readOnly");  o=config.get("cacheSize");  int mb=o == null ? 16 : (Integer)o;  if (mb > 0) {    CacheLongKeyLIRS.Config cc=new CacheLongKeyLIRS.Config();    cc.maxMemory=mb * 1024L * 1024L;    o=config.get("cacheConcurrency");    if (o != null) {      cc.segmentCount=(Integer)o;    }    cache=new CacheLongKeyLIRS<Page>(cc);    cc.maxMemory/=4;    cacheChunkRef=new CacheLongKeyLIRS<PageChildren>(cc);  }  o=config.get("autoCommitBufferSize");  int kb=o == null ? 1024 : (Integer)o;  autoCommitMemory=kb * 1024 * 19;  o=config.get("autoCompactFillRate");  autoCompactFillRate=o == null ? 50 : (Integer)o;  char[] encryptionKey=(char[])config.get("encryptionKey");  try {    if (!fileStoreIsProvided) {      fileStore.open(fileName,readOnly,encryptionKey);    }    if (fileStore.size() == 0) {      creationTime=getTimeAbsolute();      lastCommitTime=creationTime;      storeHeader.put("H",2);      storeHeader.put("blockSize",BLOCK_SIZE);      storeHeader.put("format",FORMAT_WRITE);      storeHeader.put("created",creationTime);      writeStoreHeader();    } else {      readStoreHeader();    }  } catch (  IllegalStateException e) {    panic(e);  } finally {    if (encryptionKey != null) {      Arrays.fill(encryptionKey,(char)0);    }  }  lastCommitTime=getTimeSinceCreation();  o=config.get("autoCommitDelay");  int delay=o == null ? 1000 : (Integer)o;  setAutoCommitDelay(delay);}  }
class C{  private void updateIndicators(CandleDataset source,boolean newBar){  for (  IndicatorDataset indicator : indicators) {    if (!IndicatorSeries.CandleSeries.equals(indicator.getType(0))) {      indicator.updateDataset(source,0,newBar);    }  }}  }
class C{  public void optimize(){  for (int i=operations.size() - 1; i >= 0; i--) {    Operation o=operations.get(i);    if (o instanceof ClearOperation) {      while (i > 0) {        operations.remove(i);        i--;      }      return;    }  }}  }
class C{  public EdgeTable(CoverageTable cov,TileDirectory tile) throws FormatException {  super(cov,tile,"edg");  if (Debug.debugging("vpf")) {    Debug.output("EdgeTable(): " + filename);  }  if (cov.cachedLineSchema == null) {    cov.cachedLineSchema=lookupSchema(edgcolumns,false);  }}  }
class C{  public static String encodeId(final String idValueToEncode,final Seo seo){  if (seo != null && StringUtils.isNotBlank(seo.getUri())) {    return seo.getUri();  } else {    return idValueToEncode;  }}  }
class C{  public static void test_callStaticMethod(){  assertSame("blort",Target.blort());}  }
class C{  public void putAvailabilityZone(MockAvailabilityZone availabilityZone){  availabilityZone.setRegionName(name);  this.availabilityZones.put(availabilityZone.getZoneName(),availabilityZone);}  }
class C{  public JaspellTernarySearchTrie(Locale locale){  this.locale=locale;}  }
class C{  public PointsToSet reachingObjects(Context c,Local l){  return reachingObjects(null,l);}  }
class C{  public Matrix4d translation(Vector3fc offset){  return translation(offset.x(),offset.y(),offset.z());}  }
class C{  protected void configureCurrentConverter(int dialogType){  String filename;  File currFile;  if ((getSelectedFile() == null) || (getSelectedFile().isDirectory())) {    return;  }  filename=getSelectedFile().getAbsolutePath();  if (m_CurrentConverter == null) {    if (dialogType == LOADER_DIALOG) {      m_CurrentConverter=ConverterUtils.getLoaderForFile(filename);    } else     if (dialogType == SAVER_DIALOG) {      m_CurrentConverter=ConverterUtils.getSaverForFile(filename);    } else {      throw new IllegalStateException("Cannot determine loader/saver!");    }    if (m_CurrentConverter == null) {      return;    }  }  try {    currFile=((FileSourcedConverter)m_CurrentConverter).retrieveFile();    if ((currFile == null) || (!currFile.getAbsolutePath().equals(filename))) {      ((FileSourcedConverter)m_CurrentConverter).setFile(new File(filename));    }  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  protected void layout(int width,int height){  if (!isVisible()) {    return;  }  super.layout(width,height);}  }
class C{  public static void write(File file,CharSequence data,String encoding) throws IOException {  write(file,data,encoding,false);}  }
class C{  public boolean retainEntries(TDoubleLongProcedure procedure){  boolean modified=false;  byte[] states=_states;  double[] keys=_set;  long[] values=_values;  for (int i=keys.length; i-- > 0; ) {    if (states[i] == FULL && !procedure.execute(keys[i],values[i])) {      removeAt(i);      modified=true;    }  }  return modified;}  }
class C{  protected void parse(PDFObject obj) throws IOException {  PDFObject functionsObj=obj.getDictRef("Functions");  if (functionsObj == null) {    throw new PDFParseException("Functions required for function type 3!");  }  PDFObject[] functionsAry=functionsObj.getArray();  int[] size=new int[functionsAry.length];  for (int i=0; i < functionsAry.length; i++) {    size[i]=functionsAry[i].getIntValue();  }  PDFObject boundsObj=obj.getDictRef("Bounds");  if (boundsObj == null) {    throw new PDFParseException("Bounds required for function type 3!");  }  PDFObject[] boundsAry=boundsObj.getArray();  int[] size1=new int[boundsAry.length];  for (int i=0; i < boundsAry.length; i++) {    size1[i]=boundsAry[i].getIntValue();  }  PDFObject encodeObj=obj.getDictRef("Encode");  if (encodeObj != null) {    throw new PDFParseException("Encode required for function type 3!");  }  PDFObject[] encodeAry=encodeObj.getArray();  float[] encode=new float[encodeAry.length];  for (int i=0; i < encodeAry.length; i++) {    encode[i]=encodeAry[i].getFloatValue();  }  throw new PDFParseException("Unsupported function type 3.");}  }
class C{  private static void sparseFullRepresentationTest(final ISchemaVersion schemaVersion) throws IOException {  final Writer output=openOutput(schemaVersion,"sparse_full_representation",TestType.UNION);  final HLL emptyHLL1=newHLL(HLLType.EMPTY);  final HLL emptyHLL2=newHLL(HLLType.EMPTY);  cumulativeUnionLine(output,emptyHLL1,emptyHLL2,schemaVersion);  final HLL fullHLL=newHLL(HLLType.FULL);  fullHLL.addRaw(constructHLLValue(LOG2M,0,1));  final HLL sparseHLL=newHLL(HLLType.SPARSE);  sparseHLL.addRaw(constructHLLValue(LOG2M,0,1));  output.write(stringCardinality(fullHLL) + "," + toByteA(fullHLL,schemaVersion)+ ","+ stringCardinality(sparseHLL)+ ","+ toByteA(sparseHLL,schemaVersion)+ "\n");  output.flush();  final HLL fullHLL2=newHLL(HLLType.FULL);  fullHLL2.addRaw(constructHLLValue(LOG2M,1,1));  sparseHLL.addRaw(constructHLLValue(LOG2M,1,1));  output.write(stringCardinality(fullHLL2) + "," + toByteA(fullHLL2,schemaVersion)+ ","+ stringCardinality(sparseHLL)+ ","+ toByteA(sparseHLL,schemaVersion)+ "\n");  output.flush();  final HLL fullHLL3=newHLL(HLLType.FULL);  for (int i=2; i < (SPARSE_THRESHOLD + 1); i++) {    fullHLL3.addRaw(constructHLLValue(LOG2M,i,1));    sparseHLL.addRaw(constructHLLValue(LOG2M,i,1));  }  output.write(stringCardinality(fullHLL3) + "," + toByteA(fullHLL3,schemaVersion)+ ","+ stringCardinality(sparseHLL)+ ","+ toByteA(sparseHLL,schemaVersion)+ "\n");  output.flush();}  }
class C{  public Object buildAggregateFromRow(AbstractRecord databaseRow,Object targetObject,CacheKey cacheKey,JoinedAttributeManager joinManager,ObjectBuildingQuery sourceQuery,boolean buildShallowOriginal,AbstractSession executionSession,boolean targetIsProtected) throws DatabaseException {  if (databaseRow.hasSopObject()) {    Object sopAggregate=getAttributeValueFromObject(databaseRow.getSopObject());    if ((targetObject != null) && (targetObject != databaseRow.getSopObject())) {      setAttributeValueInObject(targetObject,sopAggregate);    }    return sopAggregate;  }  if (isNullAllowed() && allAggregateFieldsAreNull(databaseRow)) {    return null;  }  Object aggregate=null;  ClassDescriptor descriptor=getReferenceDescriptor();  boolean refreshing=true;  if (targetObject != null) {    if (descriptor.hasInheritance()) {      Class newAggregateClass=descriptor.getInheritancePolicy().classFromRow(databaseRow,executionSession);      descriptor=getReferenceDescriptor(newAggregateClass,executionSession);      aggregate=getMatchingAttributeValueFromObject(databaseRow,targetObject,executionSession,descriptor);      if ((aggregate != null) && (aggregate.getClass() != newAggregateClass)) {        aggregate=descriptor.getObjectBuilder().buildNewInstance();        refreshing=false;      }    } else {      aggregate=getMatchingAttributeValueFromObject(databaseRow,targetObject,executionSession,descriptor);    }  }  if (aggregate == null) {    aggregate=descriptor.getObjectBuilder().buildNewInstance();    refreshing=false;  }  ObjectBuildingQuery nestedQuery=prepareNestedQuery(sourceQuery);  FetchGroup targetFetchGroup=null;  if (nestedQuery.isObjectLevelReadQuery()) {    targetFetchGroup=((ObjectLevelReadQuery)nestedQuery).getFetchGroup();    if (refreshing && descriptor.hasFetchGroupManager()) {      descriptor.getFetchGroupManager().unionEntityFetchGroupIntoObject(aggregate,descriptor.getFetchGroupManager().getEntityFetchGroup(targetFetchGroup),executionSession,true);    }  }  if (buildShallowOriginal) {    descriptor.getObjectBuilder().buildAttributesIntoShallowObject(aggregate,databaseRow,nestedQuery);  } else   if (executionSession.isUnitOfWork()) {    descriptor.getObjectBuilder().buildAttributesIntoWorkingCopyClone(aggregate,buildWrapperCacheKeyForAggregate(cacheKey,targetIsProtected),nestedQuery,joinManager,databaseRow,(UnitOfWorkImpl)executionSession,refreshing);  } else {    descriptor.getObjectBuilder().buildAttributesIntoObject(aggregate,buildWrapperCacheKeyForAggregate(cacheKey,targetIsProtected),databaseRow,nestedQuery,joinManager,nestedQuery.getExecutionFetchGroup(descriptor),refreshing,executionSession);  }  if ((targetFetchGroup != null) && descriptor.hasFetchGroupManager() && !refreshing&& sourceQuery.shouldMaintainCache()&& !sourceQuery.shouldStoreBypassCache()) {    EntityFetchGroup entityFetchGroup=descriptor.getFetchGroupManager().getEntityFetchGroup(targetFetchGroup);    if (entityFetchGroup != null) {      entityFetchGroup=(EntityFetchGroup)entityFetchGroup.clone();      entityFetchGroup.setRootEntity((FetchGroupTracker)cacheKey.getObject());      entityFetchGroup.setOnEntity(aggregate,executionSession);    }  }  return aggregate;}  }
class C{  public Boolean isNpivOnNonRdmDisks(){  return npivOnNonRdmDisks;}  }
class C{  protected String ratsProblem(){  final String text="Mayor Chalmers shouts: Ados City is being invaded by #rats!" + " Anyone who will help to clean up the city, will be rewarded!";  return (text);}  }
class C{  public static void clearSymbolCache(){  symbolCache.clear();}  }
class C{  public double num(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return (m_left.num(xctxt) / m_right.num(xctxt));}  }
class C{  void appendTextChild(int m_char_current_start,int contentLength){  int w0=TEXT_NODE;  int w1=currentParent;  int w2=m_char_current_start;  int w3=contentLength;  int ourslot=appendNode(w0,w1,w2,w3);  previousSibling=ourslot;}  }
class C{  private void addListeners(){  fHistoryListener=new HistoryListener();  fHistory.addOperationHistoryListener(fHistoryListener);  if (fDocumentListener == null && fDocument != null) {    fDocumentListener=new DocumentListener();    fDocument.addDocumentListener(fDocumentListener);  }  if (fRichDocumentListener == null && fDocument != null) {    fRichDocumentListener=new RichDocumentListener();    fDocument.addRichDocumentListener(fRichDocumentListener);  }}  }
class C{  public void registerInspector(Inspector inspector,Stoppable stopper){  allInspectors.put(inspector,stopper);}  }
class C{  public static void walkFileTree(File directory,FileTreeVisitor visitor){  visitor.preVisitDirectory(directory);  File[] files=directory.listFiles();  if (files != null) {    for (    File file : files) {      if (file.isDirectory()) {        walkFileTree(file,visitor);      } else {        visitor.visitFile(file);      }    }  }  visitor.postVisitDirectory(directory);}  }
class C{  public Bindings add(String property,String stateProperty,JToggleButton button,JTextArea textArea){  registerPropertyChangeListener(button);  registerPropertyChangeListener(textArea);  return add(new OptJTextAreaBinding(property,stateProperty,button,textArea));}  }
class C{  private void initInetNetworks(Collection<String> nets){  initInetNetworks(nets.toArray(new String[nets.size()]));}  }
class C{  private VolumeDescriptor prepareVolumeDescriptor(Volume source,String name,VolumeDescriptor.Type type,long size,boolean isInternal){  Volume volume=new Volume();  volume.setId(URIUtil.createId(Volume.class));  volume.setLabel(name);  volume.setCapacity(size);  URI vpoolUri=source.getVirtualPool();  VirtualPool vpool=getDataObject(VirtualPool.class,vpoolUri,_dbClient);  volume.setThinlyProvisioned(VirtualPool.ProvisioningType.Thin.toString().equalsIgnoreCase(vpool.getSupportedProvisioningType()));  volume.setVirtualPool(vpool.getId());  URI projectId=source.getProject().getURI();  Project project=getDataObject(Project.class,projectId,_dbClient);  volume.setProject(new NamedURI(projectId,volume.getLabel()));  volume.setTenant(new NamedURI(project.getTenantOrg().getURI(),volume.getLabel()));  volume.setVirtualArray(source.getVirtualArray());  volume.setPool(source.getPool());  volume.setProtocol(source.getProtocol());  volume.setStorageController(source.getStorageController());  volume.setSystemType(source.getSystemType());  if (isInternal) {    volume.addInternalFlags(Flag.INTERNAL_OBJECT);  }  _dbClient.createObject(volume);  VirtualPoolCapabilityValuesWrapper capabilities=getCapabilities(source,size);  return new VolumeDescriptor(type,volume.getStorageController(),volume.getId(),volume.getPool(),capabilities);}  }
class C{  private void checkIfUpdateLDAPGroupPropertiesSupported(AuthnUpdateParam updateParam){  boolean checkCompatibleVersion=false;  if (updateParam != null) {    if (StringUtils.isNotBlank(updateParam.getGroupAttribute())) {      checkCompatibleVersion=true;    } else     if (updateParam.getGroupWhitelistValueChanges() != null && (!CollectionUtils.isEmpty(updateParam.getGroupWhitelistValueChanges().getAdd()) || !CollectionUtils.isEmpty(updateParam.getGroupWhitelistValueChanges().getRemove()))) {      checkCompatibleVersion=true;    } else     if (updateParam.getGroupObjectClassChanges() != null && (!CollectionUtils.isEmpty(updateParam.getGroupObjectClassChanges().getAdd()) || !CollectionUtils.isEmpty(updateParam.getGroupObjectClassChanges().getRemove()))) {      checkCompatibleVersion=true;    } else     if (updateParam.getGroupMemberAttributeChanges() != null && (!CollectionUtils.isEmpty(updateParam.getGroupMemberAttributeChanges().getAdd()) || !CollectionUtils.isEmpty(updateParam.getGroupMemberAttributeChanges().getRemove()))) {      checkCompatibleVersion=true;    }  }  if (checkCompatibleVersion) {    checkCompatibleVersionForLDAPGroupSupport();  }}  }
class C{  public static boolean isSynchronized(int flags){  return (flags & AccSynchronized) != 0;}  }
class C{  @Inject public AddRemoteRepositoryPresenter(AddRemoteRepositoryView view,GitServiceClient service,AppContext appContext){  this.view=view;  this.view.setDelegate(this);  this.service=service;  this.appContext=appContext;}  }
class C{  public CompositeLineDecoration(LineDecoration decoration1,LineDecoration decoration2){  addDecoration(decoration1);  addDecoration(decoration2);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private PostgreSQLNativeViewCreator(){}  }
class C{  public ProtocolException(String message){  super(message);}  }
class C{  private int removeExpiredCheckpoints(Connection conn) throws SQLException {  int delCnt=0;  PreparedStatement selSt=null;  PreparedStatement delSt=null;  ResultSet rs=null;  Time time=new Time(U.currentTimeMillis());  CheckpointListener tmp=lsnr;  try {    if (tmp != null) {      selSt=conn.prepareStatement(selExpSql);      selSt.setTime(1,time);      rs=selSt.executeQuery();      while (rs.next())       tmp.onCheckpointRemoved(rs.getString(1));    }    delSt=conn.prepareStatement(delExpSql);    delSt.setTime(1,time);    delCnt=delSt.executeUpdate();  }  finally {    U.close(rs,log);    U.close(selSt,log);    U.close(delSt,log);  }  if (log.isDebugEnabled())   log.debug("Successfully removed expired checkpoints from: " + tblName);  return delCnt;}  }
class C{  public static long decryptTurnOverCounter(final String encryptedTurnOverCounterBase64,final String hashAlgorithm,final String cashBoxIDUTF8String,final String receiptIdentifierUTF8String,final SecretKey aesKey) throws Exception {  final String IVUTF8StringRepresentation=cashBoxIDUTF8String + receiptIdentifierUTF8String;  final MessageDigest messageDigest=MessageDigest.getInstance(hashAlgorithm);  final byte[] hashValue=messageDigest.digest(IVUTF8StringRepresentation.getBytes());  final byte[] concatenatedHashValue=new byte[16];  System.arraycopy(hashValue,0,concatenatedHashValue,0,16);  final ByteBuffer byteBufferIV=ByteBuffer.allocate(16);  byteBufferIV.put(concatenatedHashValue);  final byte[] IV=byteBufferIV.array();  final IvParameterSpec ivSpec=new IvParameterSpec(IV);  final ByteBuffer encryptedTurnOverValueComplete=ByteBuffer.allocate(16);  final byte[] encryptedTurnOverValue=CashBoxUtils.base64Decode(encryptedTurnOverCounterBase64,false);  final int lengthOfEncryptedTurnOverValue=encryptedTurnOverValue.length;  encryptedTurnOverValueComplete.put(encryptedTurnOverValue);  final Cipher cipher=Cipher.getInstance("AES/CTR/NoPadding","BC");  cipher.init(Cipher.DECRYPT_MODE,aesKey,ivSpec);  final byte[] plainTurnOverValueComplete=cipher.doFinal(encryptedTurnOverValue);  byte[] plainTurnOverValueTruncated=new byte[lengthOfEncryptedTurnOverValue];  System.arraycopy(plainTurnOverValueComplete,0,plainTurnOverValueTruncated,0,lengthOfEncryptedTurnOverValue);  return new BigInteger(plainTurnOverValueTruncated).longValue();}  }
class C{  @Override public Iterator<FacetInterval> iterator(){  return new ArrayList<FacetInterval>(Arrays.asList(intervals)).iterator();}  }
class C{  public static ClassFileBytesDisassembler createDefaultClassFileBytesDisassembler(){  return new Disassembler();}  }
class C{  private void handleActionStop(){  startServiceIntent(PlaybackService.COMMAND_STOP);}  }
class C{  protected WebView createWindowsWebView(Dimension frameSize){  return new WindowsWebView(frameSize);}  }
class C{  public void cursorDeallocate(long id){  ArrayCursor cursor=openCursors.remove(id);  if (cursor != null && cursor.byteInput != null) {    try {      cursor.byteInput.close();    } catch (    IOException e) {    }  }}  }
class C{  public void updateavgrtcpsize(int size){  avgrtcpsize=(int)(0.0625 * size + 0.9375 * avgrtcpsize);}  }
class C{  public static String jdkVersion(){  return jdkVer;}  }
class C{  protected void fulfillCompositeAggregatorExtraInfo(){  Map<Set<String>,Integer> keysToCombinationId=getKeysToCombinationId();  final int timeBucketSize=customTimeBuckets.size();  for (int index=0; index < dimensionsDescriptorIDToCompositeAggregatorToAggregateDescriptor.size(); ++index) {    Map<String,FieldsDescriptor> compositeAggregatorNameToDescriptor=dimensionsDescriptorIDToCompositeAggregatorToAggregateDescriptor.get(index);    for (    String compositeAggregatorName : compositeAggregatorNameToDescriptor.keySet()) {      AbstractTopBottomAggregator compositeAggregator=aggregatorRegistry.getNameToTopBottomAggregator().get(compositeAggregatorName);      compositeAggregator.setDimensionDescriptorID(index);      compositeAggregator.setAggregatorID(aggregatorRegistry.getTopBottomAggregatorNameToID().get(compositeAggregatorName));      Set<String> keys=Sets.newHashSet();      DimensionsDescriptor dd=dimensionsDescriptorIDToDimensionsDescriptor.get(index);      keys.addAll(dd.getFields().getFieldsList());{        Set<String> compositeKeys=Sets.newHashSet();        compositeKeys.addAll(keys);        compositeAggregator.setFields(compositeKeys);        compositeAggregator.setAggregateDescriptor(compositeAggregatorNameToDescriptor.get(compositeAggregatorName));      }      keys.addAll(compositeAggregator.getSubCombinations());      Integer combinationId=keysToCombinationId.get(keys);      if (combinationId == null) {        throw new RuntimeException("Can't find combination id for keys: " + keys);      }      for (int ddid=combinationId * timeBucketSize; ddid < (combinationId + 1) * timeBucketSize; ++ddid) {        compositeAggregator.addEmbedAggregatorDdId(ddid);      }    }  }}  }
class C{  @Override public void postProcess() throws Exception {  m_ResultProducer.postProcess();}  }
class C{  public static StorageCapability parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  StorageCapability object=new StorageCapability();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"StorageCapability".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (StorageCapability)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","uniqueIdentifier").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setUniqueIdentifier(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","capabilityDetail").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setCapabilityDetail(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","capabilityName").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setCapabilityName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public void onSaveInstanceState(Bundle outState){  outState.putBoolean("SlidingActivityHelper.open",mSlidingMenu.isMenuShowing());  outState.putBoolean("SlidingActivityHelper.secondary",mSlidingMenu.isSecondaryMenuShowing());}  }
class C{  public void putAll(Map<? extends K,? extends V> m){  putMapEntries(m,true);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element newElement;  NamedNodeMap defaultAttr;  Node child;  String name;  String value;  doc=(Document)load("staff",true);  newElement=doc.createElement("address");  defaultAttr=newElement.getAttributes();  child=defaultAttr.item(0);  assertNotNull("defaultAttrNotNull",child);  name=child.getNodeName();  assertEquals("attrName","street",name);  value=child.getNodeValue();  assertEquals("attrValue","Yes",value);  assertSize("attrCount",1,defaultAttr);}  }
class C{  public String addStyle(StyleSelector styleSelector){  mMaxStyleId++;  String newId="" + mMaxStyleId;  putStyle(newId,styleSelector);  return newId;}  }
class C{  private static OFActionSetNwTos decode_set_tos_bits(String actionToDecode,OFVersion version,Logger log){  Matcher n=Pattern.compile("((?:0x)?\\d+)").matcher(actionToDecode);  if (n.matches()) {    if (n.group(1) != null) {      try {        byte tosbits=get_byte(n.group(1));        OFActionSetNwTos.Builder ab=OFFactories.getFactory(version).actions().buildSetNwTos();        ab.setNwTos(tosbits);        log.debug("action {}",ab.build());        return ab.build();      } catch (      NumberFormatException e) {        log.debug("Invalid dst-port in: {} (error ignored)",actionToDecode);        return null;      }    }  } else {    log.debug("Invalid action: '{}'",actionToDecode);    return null;  }  return null;}  }
class C{  public void rotateZ(float angle){  rotate(angle,0,0,1);}  }
class C{  private void readObject(ObjectInputStream in) throws ClassNotFoundException, IOException {  in.defaultReadObject();  iter=col.iterator();}  }
class C{  private boolean queueRequestIfNodeGroupIsUnavailable(NodeGroupState localState,SelectAndForwardRequest body){  Operation op=body.associatedOp;  if (getHost().isStopping()) {    op.fail(new CancellationException("host is stopping"));    return true;  }  if (op.getExpirationMicrosUtc() < Utils.getSystemNowMicrosUtc()) {    op.fail(new CancellationException(String.format("Operation already expired, will not queue. Exp:%d, now:%d",op.getExpirationMicrosUtc(),Utils.getSystemNowMicrosUtc())));    return true;  }  if (NodeGroupUtils.isNodeGroupAvailable(getHost(),localState)) {    return false;  }  adjustStat(STAT_NAME_QUEUED_REQUEST_COUNT,1);  this.pendingRequests.add(body);  return true;}  }
class C{  public boolean noError(){  return status != ConnectionStatus.ERROR;}  }
class C{  void removeMarkOccurrencesHighlight(Object tag){  removeListHighlight(markedOccurrences,tag);}  }
class C{  public double pathDistance(final DistanceStyle distanceStyle,final double x,final double y,final double z){  if (!isWithin(x,y,z))   return Double.POSITIVE_INFINITY;  return distanceStyle.computeDistance(this.point,x,y,z);}  }
class C{  @RequestMapping(value={"/",""},method=RequestMethod.POST) @ResponseBody public RestWrapper update(@ModelAttribute("propertiesTemplate") @Valid PropertiesTemplate propertiesTemplate,BindingResult bindingResult,Principal principal){  RestWrapper restWrapper=null;  if (bindingResult.hasErrors()) {    BindingResultError bindingResultError=new BindingResultError();    return bindingResultError.errorMessage(bindingResult);  }  try {    PropertiesTemplate propertiesTemplateUpdate=propertiesTemplateDAO.updateProcessTemplate(propertiesTemplate);    restWrapper=new RestWrapper(propertiesTemplateUpdate,RestWrapper.OK);    LOGGER.info("Record with ID:" + propertiesTemplateUpdate.getProcessTemplateId() + " updated in PropertiesTemplate by User:"+ principal.getName()+ propertiesTemplateUpdate);  } catch (  Exception e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == TypableElement.class) {switch (derivedFeatureID) {default :      return -1;  }}if (baseClass == TypeDefiningElement.class) {switch (derivedFeatureID) {case N4JSPackage.N4_TYPE_DEFINITION__DEFINED_TYPE:    return N4JSPackage.TYPE_DEFINING_ELEMENT__DEFINED_TYPE;default :  return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  protected void Predicate() throws javax.xml.transform.TransformerException {  if (tokenIs('[')) {    nextToken();    PredicateExpr();    consumeExpected(']');  }}  }
class C{  public Object next(){  return nextToken();}  }
class C{  public Future<RecoveryInfo> applyBufferedUpdates(){  versionInfo.blockUpdates();  try {    cancelApplyBufferUpdate=false;    if (state != State.BUFFERING)     return null;    operationFlags&=~FLAG_GAP;    if (tlog == null) {      state=State.ACTIVE;      return null;    }    tlog.incref();    state=State.APPLYING_BUFFERED;  }  finally {    versionInfo.unblockUpdates();  }  if (recoveryExecutor.isShutdown()) {    tlog.decref();    throw new RuntimeException("executor is not running...");  }  ExecutorCompletionService<RecoveryInfo> cs=new ExecutorCompletionService<>(recoveryExecutor);  LogReplayer replayer=new LogReplayer(Arrays.asList(new TransactionLog[]{tlog}),true);  return cs.submit(replayer,recoveryInfo);}  }
class C{  public static void json(String tag,String json,int methodCount){  validateMethodCount(methodCount);  if (TextUtils.isEmpty(json)) {    d(tag,"Empty/Null json content",methodCount);    return;  }  try {    if (json.startsWith("{")) {      JSONObject jsonObject=new JSONObject(json);      String message=jsonObject.toString(JSON_INDENT);      d(tag,message,methodCount);      return;    }    if (json.startsWith("[")) {      JSONArray jsonArray=new JSONArray(json);      String message=jsonArray.toString(JSON_INDENT);      d(tag,message,methodCount);    }  } catch (  JSONException e) {    d(tag,e.getCause().getMessage() + "\n" + json,methodCount);  }}  }
class C{  @Override public void previous(Long maxId,Callback<TimelineResult<Tweet>> cb){  createSearchRequest(null,decrementMaxId(maxId)).enqueue(new SearchCallback(cb));}  }
class C{  private Row readRow(Data data,int pos,int columnCount){  Value[] values=new Value[columnCount];synchronized (data) {    data.setPos(pos);    for (int i=0; i < columnCount; i++) {      values[i]=data.readValue();    }  }  return index.getDatabase().createRow(values,Row.MEMORY_CALCULATE);}  }
class C{  protected XAException check(final XAException e) throws XAException {  ActiveMQXARecoveryLogger.LOGGER.xaRecoveryError(e);  close();  throw e;}  }
class C{  public ArrayList<Parameter> selectParameters(){  ArrayList<Parameter> parameters=new ArrayList<Parameter>();  selectTaxonSetsStatistics(parameters);  for (  PartitionSubstitutionModel model : getPartitionSubstitutionModels()) {    model.selectParameters(parameters);  }  for (  PartitionClockModel model : getPartitionClockModels()) {    Set<PartitionSubstitutionModel> substitutionModels=new LinkedHashSet<PartitionSubstitutionModel>();    for (    AbstractPartitionData partition : getDataPartitions()) {      if (partition.getPartitionClockModel() == model) {        substitutionModels.add(partition.getPartitionSubstitutionModel());      }    }    ArrayList<Parameter> relativeRateParameters=new ArrayList<Parameter>();    for (    PartitionSubstitutionModel substitutionModel : substitutionModels) {      relativeRateParameters.addAll(substitutionModel.getRelativeRateParameters());    }    if (relativeRateParameters.size() > 1) {      Parameter allMus=model.getParameter("allMus");      allMus.clearSubParameters();      for (      Parameter mu : relativeRateParameters) {        allMus.addSubParameter(mu);      }      parameters.add(allMus);    }    model.selectParameters(parameters);  }  clockModelOptions.selectParameters();  for (  PartitionClockModelSubstModelLink clockSubst : getTraitClockSubstLinks()) {    clockSubst.selectParameters(parameters);  }  for (  PartitionTreeModel tree : getPartitionTreeModels()) {    tree.selectParameters(parameters);  }  treeModelOptions.selectParameters(parameters);  for (  PartitionTreePrior prior : getPartitionTreePriors()) {    prior.selectParameters(parameters);  }  for (  PartitionClockModelTreeModelLink clockTree : getPartitionClockTreeLinks()) {    clockTree.selectParameters(parameters);    clockTree.selectStatistics(parameters);  }  if (useStarBEAST) {    starBEASTOptions.selectParameters(parameters);  }  if (contains(Microsatellite.INSTANCE)) {    microsatelliteOptions.selectParameters(parameters);  }  selectComponentParameters(this,parameters);  selectComponentStatistics(this,parameters);  return parameters;}  }
class C{  public void addMetadata(final String attribute,final String value){  final String old=metadata.put(attribute,value);  if (old != null)   log.warn("replacing metadata \"" + attribute + "\" from \""+ old+ "\" to \""+ value+ "\"");}  }
class C{  @TargetApi(Build.VERSION_CODES.LOLLIPOP) private static int relaunchTask(boolean incognito,String url){  if (TextUtils.isEmpty(url))   return Tab.INVALID_TAB_ID;  Context context=ApplicationStatus.getApplicationContext();  ActivityManager manager=(ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);  for (  AppTask task : manager.getAppTasks()) {    RecentTaskInfo info=DocumentUtils.getTaskInfoFromTask(task);    if (info == null)     continue;    String initialUrl=ActivityDelegate.getInitialUrlForDocument(info.baseIntent);    if (TextUtils.isEmpty(initialUrl) || !TextUtils.equals(initialUrl,url))     continue;    int id=ActivityDelegate.getTabIdFromIntent(info.baseIntent);    DocumentTabModelSelector.setPrioritizedTabId(id);    if (!ChromeApplication.getDocumentTabModelSelector().getModel(incognito).isRetargetable(id)) {      continue;    }    if (!moveToFront(task))     continue;    return id;  }  return Tab.INVALID_TAB_ID;}  }
class C{  public void cmd_button(){  setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));  int C_AcctSchema_ID=Env.getContextAsInt(Env.getCtx(),m_WindowNo,"C_AcctSchema_ID",false);  if (C_AcctSchema_ID <= 0) {    C_AcctSchema_ID=Env.getContextAsInt(Env.getCtx(),"$C_AcctSchema_ID");  }  VAccountDialog ad=new VAccountDialog(Env.getFrame(this),m_title,m_mAccount,C_AcctSchema_ID);  setCursor(Cursor.getDefaultCursor());  Integer newValue=ad.getValue();  setValue(newValue);  try {    fireVetoableChange(m_columnName,null,newValue);  } catch (  PropertyVetoException pve) {  }}  }
class C{  private static String convertLong(AbstractStringBuilder sb,long n){  int i=(int)n;  if (i == n) {    return convertInt(sb,i);  }  boolean negative=(n < 0);  if (negative) {    n=-n;    if (n < 0) {      String quickResult="-9223372036854775808";      if (sb != null) {        sb.append0(quickResult);        return null;      }      return quickResult;    }  }  int bufLen=20;  char[] buf=(sb != null) ? BUFFER.get() : new char[bufLen];  int low=(int)(n % 1000000000);  int cursor=intIntoCharArray(buf,bufLen,low);  while (cursor != (bufLen - 9)) {    buf[--cursor]='0';  }  n=((n - low) >>> 9) * 0x8E47CE423A2E9C6DL;  if ((n & (-1L << 32)) == 0) {    cursor=intIntoCharArray(buf,cursor,(int)n);  } else {    int lo32=(int)n;    int hi32=(int)(n >>> 32);    int midDigit=MOD_10_TABLE[(0x19999999 * lo32 + (lo32 >>> 1) + (lo32 >>> 3)) >>> 28];    midDigit-=hi32 << 2;    if (midDigit < 0) {      midDigit+=10;    }    buf[--cursor]=DIGITS[midDigit];    int rest=((int)((n - midDigit) >>> 1)) * 0xCCCCCCCD;    cursor=intIntoCharArray(buf,cursor,rest);  }  if (negative) {    buf[--cursor]='-';  }  if (sb != null) {    sb.append0(buf,cursor,bufLen - cursor);    return null;  } else {    return new String(cursor,bufLen - cursor,buf);  }}  }
class C{  public static void main(final String[] args) throws Exception {  int i=0;  int flags=ClassReader.SKIP_DEBUG;  boolean ok=true;  if (args.length < 1 || args.length > 2) {    ok=false;  }  if (ok && "-debug".equals(args[0])) {    i=1;    flags=0;    if (args.length != 2) {      ok=false;    }  }  if (!ok) {    System.err.println("Prints a disassembled view of the given class.");    System.err.println("Usage: Textifier [-debug] " + "<fully qualified class name or class file name>");    return;  }  ClassReader cr;  if (args[i].endsWith(".class") || args[i].indexOf('\\') > -1 || args[i].indexOf('/') > -1) {    cr=new ClassReader(new FileInputStream(args[i]));  } else {    cr=new ClassReader(args[i]);  }  cr.accept(new TraceClassVisitor(new PrintWriter(System.out)),flags);}  }
class C{  @action(name="refuse",args={@arg(name=GamaMessageType.MESSAGE_STR,type=IType.MESSAGE,optional=false,doc=@doc("The message to be replied")),@arg(name=GamaMessage.CONTENTS,type=IType.LIST,optional=false,doc=@doc("The contents of the replying message"))},doc=@doc("Replies a message with a 'refuse' performative message.")) public Object primRefuse(final IScope scope) throws GamaRuntimeException {  final IList originals=getMessageArg(scope);  if (originals == null || originals.size() == 0) {    throw GamaRuntimeException.error("No message to reply",scope);  }  return replyMessage(scope,originals,REFUSE,getContentArg(scope));}  }
class C{  public ExecPermission(String path){  super(path);  init(path);}  }
class C{  public void ensureMaxSize(int width,int height){  if (width > 0 && height > 0) {    this.maxWidth=width;    this.maxHeight=height;  }}  }
class C{  @Override public final void process(final DistributionManager dm){  final boolean isDebugEnabled=logger.isDebugEnabled();  Throwable thr=null;  boolean sendReply=true;  PartitionedRegion pr=null;  try {    if (isDebugEnabled) {      logger.debug("Trying to get pr with id: {}",this.regionId);    }    try {      if (isDebugEnabled) {        logger.debug("Again trying to get pr with id : {}",this.regionId);      }      pr=PartitionedRegion.getPRFromId(this.regionId);      if (isDebugEnabled) {        logger.debug("Index creation message got the pr {}",pr);      }      if (null == pr) {        boolean wait=true;        int attempts=0;        while (wait && attempts < 30) {          dm.getCancelCriterion().checkCancelInProgress(null);          if (isDebugEnabled) {            logger.debug("Waiting for Partitioned Region to be intialized with id {}for processing index creation messages",this.regionId);          }          try {            boolean interrupted=Thread.interrupted();            try {              Thread.sleep(500);            } catch (            InterruptedException e) {              interrupted=true;              dm.getCancelCriterion().checkCancelInProgress(e);            } finally {              if (interrupted)               Thread.currentThread().interrupt();            }            pr=PartitionedRegion.getPRFromId(this.regionId);            if (null != pr) {              wait=false;              if (isDebugEnabled) {                logger.debug("Indexcreation message got the pr {}",pr);              }            }            attempts++;          } catch (          CancelException ignorAndLoopWait) {            if (isDebugEnabled) {              logger.debug("IndexCreationMsg waiting for pr to be properly created with prId : {}",this.regionId);            }          }        }      }    } catch (    CancelException letPRInitialized) {      if (logger.isDebugEnabled()) {        logger.debug("Waiting for notification from pr being properly created on {}",this.regionId);      }      boolean wait=true;      while (wait) {        dm.getCancelCriterion().checkCancelInProgress(null);        try {          boolean interrupted=Thread.interrupted();          try {            Thread.sleep(500);          } catch (          InterruptedException e) {            interrupted=true;            dm.getCancelCriterion().checkCancelInProgress(e);          } finally {            if (interrupted)             Thread.currentThread().interrupt();          }          pr=PartitionedRegion.getPRFromId(this.regionId);          wait=false;          if (logger.isDebugEnabled()) {            logger.debug("Indexcreation message got the pr {}",pr);          }        } catch (        CancelException ignorAndLoopWait) {          if (logger.isDebugEnabled()) {            logger.debug("IndexCreationMsg waiting for pr to be properly created with prId : {}",this.regionId);          }        }      }    }    if (pr == null) {      String msg=LocalizedStrings.IndexCreationMsg_COULD_NOT_GET_PARTITIONED_REGION_FROM_ID_0_FOR_MESSAGE_1_RECEIVED_ON_MEMBER_2_MAP_3.toLocalizedString(new Object[]{Integer.valueOf(this.regionId),this,dm.getId(),PartitionedRegion.dumpPRId()});      throw new PartitionedRegionException(msg,new RegionNotFoundException(msg));    }    sendReply=operateOnPartitionedRegion(dm,pr,0);  } catch (  PRLocallyDestroyedException pre) {    if (isDebugEnabled) {      logger.debug("Region is locally Destroyed ");    }    thr=pre;  }catch (  VirtualMachineError err) {    SystemFailure.initiateFailure(err);    throw err;  }catch (  Throwable t) {    SystemFailure.checkFailure();    if (this.processorId == 0) {      logger.debug("{} exception while processing message:{}",this,t.getMessage(),t);    } else     if (logger.isDebugEnabled(LogMarker.DM) && (t instanceof RuntimeException)) {      logger.debug(LogMarker.DM,"Exception caught while processing message: {}",t.getMessage(),t);    }    if (t instanceof RegionDestroyedException && pr != null) {      if (pr.isClosed) {        logger.info(LocalizedMessage.create(LocalizedStrings.IndexCreationMsg_REGION_IS_LOCALLY_DESTROYED_THROWING_REGIONDESTROYEDEXCEPTION_FOR__0,pr));        thr=new RegionDestroyedException(LocalizedStrings.IndexCreationMsg_REGION_IS_LOCALLY_DESTROYED_ON_0.toLocalizedString(dm.getId()),pr.getFullPath());      }    } else {      thr=t;    }  } finally {    if (sendReply && this.processorId != 0) {      ReplyException rex=null;      if (thr != null) {        rex=new ReplyException(thr);      }      sendReply(getSender(),this.processorId,dm,rex,pr,0);    }  }}  }
class C{  public Geo add(Geo b){  return add(b,new Geo());}  }
class C{  private void calculateEntropy(double stop,KStarWrapper params){  int i, j, k;  Instance train;  double actent=0.0, randent=0.0;  double pstar, tprob, psum=0.0, minprob=1.0;  double actClassProb, randClassProb;  double[][] pseudoClassProb=new double[NUM_RAND_COLS + 1][m_NumClasses];  for (j=0; j <= NUM_RAND_COLS; j++) {    for (i=0; i < m_NumClasses; i++) {      pseudoClassProb[j][i]=0.0;    }  }  for (i=0; i < m_NumInstances; i++) {    train=m_TrainSet.instance(i);    if (!train.isMissing(m_AttrIndex)) {      pstar=PStar(m_Test,train,m_AttrIndex,stop);      tprob=pstar / m_TotalCount;      if (pstar < minprob) {        minprob=pstar;      }      psum+=tprob;      for (k=0; k <= NUM_RAND_COLS; k++) {        pseudoClassProb[k][m_RandClassCols[k][i]]+=tprob;      }    }  }  for (j=m_NumClasses - 1; j >= 0; j--) {    actClassProb=pseudoClassProb[NUM_RAND_COLS][j] / psum;    if (actClassProb > 0) {      actent-=actClassProb * Math.log(actClassProb) / LOG2;    }  }  for (k=0; k < NUM_RAND_COLS; k++) {    for (i=m_NumClasses - 1; i >= 0; i--) {      randClassProb=pseudoClassProb[k][i] / psum;      if (randClassProb > 0) {        randent-=randClassProb * Math.log(randClassProb) / LOG2;      }    }  }  randent/=NUM_RAND_COLS;  params.actEntropy=actent;  params.randEntropy=randent;  params.avgProb=psum;  params.minProb=minprob;}  }
class C{  @Override public void start(){}  }
class C{  private boolean isExistingWorkflow(Workflow workflow){  try {    String path=getZKWorkflowPath(workflow);    if (_dataManager.checkExists(path) != null) {      return true;    }    return false;  } catch (  Exception ex) {    return false;  }}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "\"NEWS_CHANNEL_TABLE\" ("+ "\"NEWS_CHANNEL_NAME\" TEXT PRIMARY KEY NOT NULL ,"+ "\"NEWS_CHANNEL_ID\" TEXT NOT NULL ,"+ "\"NEWS_CHANNEL_TYPE\" TEXT NOT NULL ,"+ "\"NEWS_CHANNEL_SELECT\" INTEGER NOT NULL ,"+ "\"NEWS_CHANNEL_INDEX\" INTEGER NOT NULL ,"+ "\"NEWS_CHANNEL_FIXED\" INTEGER);");  db.execSQL("CREATE INDEX " + constraint + "IDX_NEWS_CHANNEL_TABLE_NEWS_CHANNEL_NAME ON NEWS_CHANNEL_TABLE"+ " (\"NEWS_CHANNEL_NAME\");");}  }
class C{  protected int unwrap() throws IOException {  if (logger != null) {    logger.println("SSLRecordProtocol.unwrap: BEGIN [");  }  int type=in.readUint8();  if ((type < ContentType.CHANGE_CIPHER_SPEC) || (type > ContentType.APPLICATION_DATA)) {    if (logger != null) {      logger.println("Non v3.1 message type:" + type);    }    if (type >= 0x80) {      int length=(type & 0x7f) << 8 | in.read();      byte[] fragment=in.read(length);      handshakeProtocol.unwrapSSLv2(fragment);      if (logger != null) {        logger.println("SSLRecordProtocol:unwrap ] END, SSLv2 type");      }      return ContentType.HANDSHAKE;    }    throw new AlertException(AlertProtocol.UNEXPECTED_MESSAGE,new SSLProtocolException("Unexpected message type has been received: " + type));  }  if (logger != null) {    logger.println("Got the message of type: " + type);  }  if (version != null) {    if ((in.read() != version[0]) || (in.read() != version[1])) {      throw new AlertException(AlertProtocol.UNEXPECTED_MESSAGE,new SSLProtocolException("Unexpected message type has been received: " + type));    }  } else {    in.skip(2);  }  int length=in.readUint16();  if (logger != null) {    logger.println("TLSCiphertext.fragment[" + length + "]: ...");  }  if (length > MAX_CIPHERED_DATA_LENGTH) {    throw new AlertException(AlertProtocol.RECORD_OVERFLOW,new SSLProtocolException("Received message is too big."));  }  byte[] fragment=in.read(length);  if (logger != null) {    logger.print(fragment);  }  if (activeReadState != null) {    fragment=activeReadState.decrypt((byte)type,fragment);    if (logger != null) {      logger.println("TLSPlaintext.fragment:");      logger.print(fragment);    }  }  if (fragment.length > MAX_DATA_LENGTH) {    throw new AlertException(AlertProtocol.DECOMPRESSION_FAILURE,new SSLProtocolException("Decompressed plain data is too big."));  }switch (type) {case ContentType.CHANGE_CIPHER_SPEC:    handshakeProtocol.receiveChangeCipherSpec();  setSession(handshakeProtocol.getSession());if (logger != null) {  logger.println("activeReadState = pendingConnectionState");}activeReadState=pendingConnectionState;break;case ContentType.ALERT:alert(fragment[0],fragment[1]);break;case ContentType.HANDSHAKE:handshakeProtocol.unwrap(fragment);break;case ContentType.APPLICATION_DATA:if (logger != null) {logger.println("TLSCiphertext.unwrap: APP DATA[" + length + "]:");logger.println(new String(fragment));}appData.append(fragment);break;default :throw new AlertException(AlertProtocol.UNEXPECTED_MESSAGE,new SSLProtocolException("Unexpected message type has been received: " + type));}if (logger != null) {logger.println("SSLRecordProtocol:unwrap ] END, type: " + type);}return type;}  }
class C{  public boolean isBrokerDataOnly(){  return this.brokerDataOnly;}  }
class C{  public static <T>T deserialize(InputStream inStream,Class<T> type,SerializationMode mode){  try {    T object;    if (mode == SerializationMode.BIN || mode == SerializationMode.BIN_GZ) {      Kryo kryo=new Kryo();      kryo.setReferences(false);      Input input=new Input(mode == SerializationMode.BIN_GZ ? new GZIPInputStream(inStream) : inStream);      object=kryo.readObject(input,type);    } else {      throw new UnsupportedOperationException();    }    return object;  } catch (  KryoException|IOException e) {    logger.error("Unable to deserialize {} (mode: {})",mode);    logger.error("Deserialization exception",e);    throw new RuntimeException(e);  }}  }
class C{  public static InetAddress toInetAddress(String host){  if (host == null || host.length() == 0) {    return null;  }  try {    if (host.indexOf("/") > -1) {      return InetAddress.getByName(host.substring(host.indexOf("/") + 1));    } else {      return InetAddress.getByName(host);    }  } catch (  java.net.UnknownHostException e) {    logStackTrace(e);    Assert.assertTrue(false,"Failed to get InetAddress: " + host);    return null;  }}  }
class C{  public void loadSystemResource(String n) throws IOException {  ClassLoader cl=getClass().getClassLoader();  load(cl.getResourceAsStream(n));}  }
class C{  protected ClassSpec toClassSpec(File file) throws IOException {  final long size=file.length();  final ClassSpec spec=new ClassSpec();  final InputStream is=new FileInputStream(file);  try {    if (size <= (long)Integer.MAX_VALUE) {      final int castSize=(int)size;      byte[] bytes=new byte[castSize];      int a=0, res;      while ((res=is.read(bytes,a,castSize - a)) > 0) {        a+=res;      }      is.close();      spec.setBytes(bytes);      return spec;    } else {      throw new IOException("Resource is too large to be a valid class file");    }  }  finally {    safeClose(is);  }}  }
class C{  public void disconnect(LDAPConnection ldapConnection){  try {    ldapConnection.disconnect();  } catch (  LDAPException e) {    logger.warn("Unable to disconnect from LDAP server: {}",e.getMessage());    logger.debug("LDAP disconnect failed.",e);  }}  }
class C{  public static boolean isCertificateSelfSigned(X509Certificate cert){  return cert.getIssuerX500Principal().equals(cert.getSubjectX500Principal());}  }
class C{  public final boolean canSetLong(String field){  return m_table.canSetLong(field);}  }
class C{  public VisorGridEvent(int typeId,IgniteUuid id,String name,UUID nid,long ts,@Nullable String msg,String shortDisplay){  this.typeId=typeId;  this.id=id;  this.name=name;  this.nid=nid;  this.ts=ts;  this.msg=msg;  this.shortDisplay=shortDisplay;}  }
class C{  public static void validateRPVolumesAlignWithIngestVpool(IngestionRequestContext requestContext,UnManagedProtectionSet umpset,DbClient dbClient){  VirtualPool sourceVirtualPool=null;  List<URI> targetVarrays=null;  if (umpset.getManagedVolumeIds() != null) {    for (    String volumeID : umpset.getManagedVolumeIds()) {      Volume volume=null;      BlockObject bo=requestContext.getRootIngestionRequestContext().findCreatedBlockObject(URI.create(volumeID));      if (bo != null && bo instanceof Volume) {        volume=(Volume)bo;      }      if (volume == null) {        _logger.error("Unable to retrieve volume : " + volumeID + " from database or created volumes.");        throw IngestionException.exceptions.validationFailedRPIngestionMissingVolume(volumeID,umpset.getCgName());      }      if (sourceVirtualPool == null && volume.checkPersonality(PersonalityTypes.SOURCE.name())) {        sourceVirtualPool=dbClient.queryObject(VirtualPool.class,volume.getVirtualPool());        targetVarrays=new ArrayList<URI>(Collections2.transform(sourceVirtualPool.getProtectionVarraySettings().keySet(),CommonTransformerFunctions.FCTN_STRING_TO_URI));        break;      }    }    List<URI> varraysCovered=new ArrayList<URI>(targetVarrays);    for (    String volumeID : umpset.getManagedVolumeIds()) {      Volume volume=null;      BlockObject bo=requestContext.getRootIngestionRequestContext().findCreatedBlockObject(URI.create(volumeID));      if (bo != null && bo instanceof Volume) {        volume=(Volume)bo;      }      if (volume == null) {        _logger.error("Unable to retrieve volume : " + volumeID + " from database or created volumes.");        throw IngestionException.exceptions.validationFailedRPIngestionMissingVolume(volumeID,umpset.getCgName());      }      if (volume.checkPersonality(PersonalityTypes.TARGET.name())) {        if (!targetVarrays.contains(volume.getVirtualArray())) {          Set<String> targetVarrayNames=new HashSet<String>();          for (          URI targetVarrayId : targetVarrays) {            VirtualArray va=dbClient.queryObject(VirtualArray.class,targetVarrayId);            targetVarrayNames.add(va.forDisplay());          }          VirtualArray va=dbClient.queryObject(VirtualArray.class,volume.getVirtualArray());          throw IngestionException.exceptions.validationFailedRPIngestionVpoolMisalignment(volume.forDisplay(),Joiner.on(",").join(targetVarrayNames),va.forDisplay());        } else {          varraysCovered.remove(volume.getVirtualArray());        }      }    }    if (!varraysCovered.isEmpty()) {      Set<String> targetVarrayNames=new HashSet<String>();      for (      URI targetVarrayId : varraysCovered) {        VirtualArray va=dbClient.queryObject(VirtualArray.class,targetVarrayId);        targetVarrayNames.add(va.forDisplay());      }      throw IngestionException.exceptions.validationFailedRPIngestionMissingTargets(Joiner.on(",").join(targetVarrayNames));    }  }}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == ParameterizedAccess.class) {switch (derivedFeatureID) {case N4JSPackage.NEW_EXPRESSION__TYPE_ARGS:      return N4JSPackage.PARAMETERIZED_ACCESS__TYPE_ARGS;default :    return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  public void parseRequestForTenant(String tenant,ProcessingFilter<LogoutState> processor){  log.debug("parseRequestForTenant, tenant " + tenant);  Validate.notNull(this.idmAccessor);  Validate.notNull(this.request);  if (this.samlRequest != null) {    if (this.requestCache.shouldDenyRequest(this.samlRequest)) {      log.debug("Replay attack detected - DENYING logout request");      this.validationResult=new ValidationResult(HttpServletResponse.SC_FORBIDDEN,"Forbidden",null);      throw new IllegalStateException("Forbidden");    } else {      this.requestCache.storeRequest(this.samlRequest);    }  } else   if (this.samlResponse != null) {    if (this.requestCache.shouldDenyRequest(this.samlResponse)) {      log.debug("Replay attack detected - DENYING logout response");      this.validationResult=new ValidationResult(HttpServletResponse.SC_FORBIDDEN,"Forbidden",null);      throw new IllegalStateException("Forbidden");    } else {      this.requestCache.storeRequest(this.samlResponse);    }  }  try {    processor.preProcess(this);  } catch (  SamlServiceException e) {    this.validationResult=new ValidationResult(HttpServletResponse.SC_FORBIDDEN,"Forbidden",null);    throw new IllegalStateException(e);  }  SamlService service=createSamlServiceForTenant(tenant,null);  try {    setSamlObject(service.decodeSamlRequest(this.request));    if (samlObject instanceof LogoutRequest) {      setLogoutRequest((LogoutRequest)samlObject);    } else     if (samlObject instanceof LogoutResponse) {      setLogoutResponse((LogoutResponse)samlObject);    }  } catch (  MessageDecodingException e) {    this.validationResult=new ValidationResult(HttpServletResponse.SC_BAD_REQUEST,"BadRequest",null);    log.debug("Caught exception " + e.toString());    throw new IllegalStateException(e);  }catch (  SecurityException e) {    this.validationResult=new ValidationResult(HttpServletResponse.SC_BAD_REQUEST,"BadRequest",null);    log.debug("Caught exception " + e.toString());    throw new IllegalStateException(e);  }  Issuer issuer=getIssuer();  if (issuer == null || issuer.getValue() == null) {    service=null;  } else {    this.setIssuerValue(issuer.getValue());    service=createSamlServiceForTenant(tenant,this.getIssuerValue());  }  if (service == null) {    this.validationResult=new ValidationResult(HttpServletResponse.SC_BAD_REQUEST,"BadRequest","Issuer");    throw new IllegalStateException("Issuer not recognized");  }  if (this.sigAlg != null && this.signature != null) {    try {      service.verifySignature(this.signedMessage,this.signature);    } catch (    IllegalStateException e) {      this.validationResult=new ValidationResult(OasisNames.RESPONDER,OasisNames.REQUEST_DENIED);      throw new IllegalStateException(e);    }  }  this.validationResult=validator.validate(this);  if (this.validationResult.isValid()) {    this.processingState=ProcessingState.PARSED;  }}  }
class C{  @Override public void clear(){  this._set.clear();}  }
class C{  public void normal(){  mHintView.setVisibility(View.VISIBLE);  mHintView.setText(R.string.pulltorefresh_listview_footer_hint_normal);  if (footerProgressBarEnabled)   mProgressBar.setVisibility(View.GONE);}  }
class C{  public RefField findField(final RefClass type){  return this.findField(type.clazz);}  }
class C{  public byte[] toArray(int start,int len){  int remaining=len;  int pos=0;  byte[] array=new byte[len];  if (len == 0) {    return array;  }  int i=0;  while (start >= buffers[i].length) {    start-=buffers[i].length;    i++;  }  while (i < buffersCount) {    byte[] buf=buffers[i];    int c=Math.min(buf.length - start,remaining);    System.arraycopy(buf,start,array,pos,c);    pos+=c;    remaining-=c;    if (remaining == 0) {      break;    }    start=0;    i++;  }  return array;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  double total;  float progress=0;  int a;  int filterSizeX=3;  int filterSizeY=3;  int dX[];  int dY[];  int midPointX;  int midPointY;  int numPixelsInFilter;  boolean filterRounded=false;  double[] filterShape;  boolean reflectAtBorders=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      filterSizeX=Integer.parseInt(args[i]);    } else     if (i == 3) {      filterSizeY=Integer.parseInt(args[i]);    } else     if (i == 4) {      filterRounded=Boolean.parseBoolean(args[i]);    } else     if (i == 5) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    if (Math.floor(filterSizeX / 2d) == (filterSizeX / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter x-dimension" + " has been modified.");      filterSizeX++;    }    if (Math.floor(filterSizeY / 2d) == (filterSizeY / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter y-dimension" + " has been modified.");      filterSizeY++;    }    numPixelsInFilter=filterSizeX * filterSizeY;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPointX=(int)Math.floor(filterSizeX / 2);    midPointY=(int)Math.floor(filterSizeY / 2);    if (!filterRounded) {      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          filterShape[a]=1;          a++;        }      }    } else {      double aSqr=midPointX * midPointX;      double bSqr=midPointY * midPointY;      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;          if (z > 1) {            filterShape[a]=0;          } else {            filterShape[a]=1;          }          a++;        }      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          total=0;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            z=inputFile.getValue(y,x);            if (z != noData && filterShape[a] == 1) {              total+=z;            }          }          outputFile.setValue(row,col,total);        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public final CC endGroup(String... xy){switch (xy.length) {default :    throw new IllegalArgumentException("Illegal argument count: " + xy.length);case 2:  endGroupY(xy[1]);case 1:endGroupX(xy[0]);}return this;}  }
class C{  public String noSizeDeterminationTipText(){  return "If enabled, the size determination for train/test/classifier is skipped.";}  }
class C{  public void pause(){  isPaused=true;}  }
class C{  public static Test suite(){  return (new TestSuite(ComponentMiscITCase.class));}  }
class C{  private static int sensorToDeviceRotation(CameraCharacteristics c,int deviceOrientation){  int sensorOrientation=c.get(CameraCharacteristics.SENSOR_ORIENTATION);  deviceOrientation=ORIENTATIONS.get(deviceOrientation);  if (c.get(CameraCharacteristics.LENS_FACING) == CameraCharacteristics.LENS_FACING_FRONT) {    deviceOrientation=-deviceOrientation;  }  return (sensorOrientation + deviceOrientation + 360) % 360;}  }
class C{  public void tagSetBackgroundColor(Color color) throws IOException {  startTag(TAG_SETBACKGROUNDCOLOR,false);  color.writeRGB(out);  completeTag();}  }
class C{  public ParsedGraphQuery(TupleExpr tupleExpr){  super(tupleExpr);}  }
class C{  public void test_ticket_1202m() throws Exception {  new TestHelper("ticket-1202-additional1","ticket-1202-additional1.rq","ticket-1202-additional1.ttl","ticket-1202-additional1.srx").runTest();}  }
class C{  public String classIndexTipText(){  return "Index of the class attribute. If set to -1, the last attribute is taken as class attribute.";}  }
class C{  public void error(String message){  write(message,MSG_ERROR);}  }
class C{  public void ddpOrient(Node a,Node b,Node c,Graph graph){  Queue<Node> Q=new ArrayDeque<Node>();  Set<Node> V=new HashSet<Node>();  Node e=null;  int distance=0;  Map<Node,Node> previous=new HashMap<Node,Node>();  List<Node> cParents=graph.getParents(c);  Q.offer(a);  V.add(a);  V.add(b);  previous.put(a,b);  while (!Q.isEmpty()) {    Node t=Q.poll();    if (e == null || e == t) {      e=t;      distance++;      if (distance > 0 && distance > (maxPathLength == -1 ? 1000 : maxPathLength)) {        return;      }    }    final List<Node> nodesInTo=graph.getNodesInTo(t,Endpoint.ARROW);    for (    Node d : nodesInTo) {      if (V.contains(d)) {        continue;      }      previous.put(d,t);      Node p=previous.get(t);      if (!graph.isDefCollider(d,t,p)) {        continue;      }      previous.put(d,t);      if (!graph.isAdjacentTo(d,c)) {        if (doDdpOrientation(d,a,b,c,previous,graph)) {          return;        }      }      if (cParents.contains(d)) {        Q.offer(d);        V.add(d);      }    }  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case MappingPackage.INFO_MODEL_ATTRIBUTE_SOURCE__ATTRIBUTE:    return attribute != ATTRIBUTE_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  public static boolean hasOldGwtFacet(IProject project){  boolean hasFacet=false;  try {    hasFacet=FacetedProjectFramework.hasProjectFacet(project,"com.google.gwt.facet");  } catch (  CoreException e) {    CorePluginLog.logInfo("hasGetFacet: Error, can't figure GWT facet.",e);  }  return hasFacet;}  }
class C{  public GenericObject next(){  return (NetObject)super.next();}  }
class C{  private void handleMulti(@NonNull String[] permissionNames){  List<String> permissions=declinedPermissionsAsList(context,permissionNames);  if (permissions.isEmpty()) {    permissionCallback.onPermissionGranted(permissionNames);    return;  }  boolean hasAlertWindowPermission=permissions.contains(Manifest.permission.SYSTEM_ALERT_WINDOW);  if (hasAlertWindowPermission) {    int index=permissions.indexOf(Manifest.permission.SYSTEM_ALERT_WINDOW);    permissions.remove(index);  }  context.requestPermissions(permissions.toArray(new String[permissions.size()]),REQUEST_PERMISSIONS);}  }
class C{  public float floatValue(){  return (float)numerator / (float)denominator;}  }
class C{  private void layoutAppearingViews(RecyclerView.Recycler recycler,View referenceView,int referencePosition,int extraCount,int offset){  if (extraCount < 1) {    return;  }  for (int extra=1; extra <= extraCount; extra++) {    final int extraPosition=referencePosition + extra;    if (extraPosition < 0 || extraPosition >= getItemCount()) {      continue;    }    View appearing=recycler.getViewForPosition(extraPosition);    addView(appearing);    final int newRow=getGlobalRowOfPosition(extraPosition + offset);    final int rowDelta=newRow - getGlobalRowOfPosition(referencePosition + offset);    final int newCol=getGlobalColumnOfPosition(extraPosition + offset);    final int colDelta=newCol - getGlobalColumnOfPosition(referencePosition + offset);    layoutTempChildView(appearing,rowDelta,colDelta,referenceView);  }}  }
class C{  public boolean isKrb5AuthSettable(){  return krb5AuthSettable;}  }
class C{  @Override protected boolean logMultipleExceptions(){  return false;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  QuarkStatement(QuarkConnectionImpl connection,Meta.StatementHandle h,int resultSetType,int resultSetConcurrency,int resultSetHoldability){  super(connection,h,resultSetType,resultSetConcurrency,resultSetHoldability);}  }
class C{  @Override protected EClass eStaticClass(){  return GamlPackage.Literals.DOUBLE_LITERAL;}  }
class C{  public final Statement apply(Statement statement,Description description){  beforeContent="\n[TEST START] " + description.getMethodName() + "\n";  afterContent="[TEST ENDED] ";  return printer.apply(statement,description);}  }
class C{  public synchronized void dumpXml(OutputStream destination) throws IOException {  XmlWriter writer=new XmlWriter(destination);  writer.startTag("rrd");  header.appendXml(writer);  for (  Datasource datasource : datasources) {    datasource.appendXml(writer);  }  for (  Archive archive : archives) {    archive.appendXml(writer);  }  writer.closeTag();  writer.flush();}  }
class C{  protected void parse(){  context=new XPathContext();  try {    xpath=new XPath(expression,null,prefixResolver,XPath.MATCH);  } catch (  javax.xml.transform.TransformerException te) {    AbstractDocument doc=(AbstractDocument)contentElement.getOwnerDocument();    throw doc.createXPathException(XPathException.INVALID_EXPRESSION_ERR,"xpath.invalid.expression",new Object[]{expression,te.getMessage()});  }}  }
class C{  public void recenterToAddressLocation(){  setCenter(getTileFactory().geoToPixel(getAddressLocation(),getZoom()));  repaint();}  }
class C{  public int read(byte[] out_buffer,int count){  return read(out_buffer,0,count);}  }
class C{  private static String parseEscapeSequence(String text,int startPos,int len){  assert validSubstring(text,startPos,len);  char firstChar=text.charAt(startPos);  if (firstChar == '{') {    char lastChar=text.charAt(startPos + len - 1);    if (lastChar != '}')     throw new IgniteException("Failed to parse escape sequence because it is not enclosed: " + substring(text,startPos,len));    OdbcEscapeToken token=parseToken(text,startPos,len);    return parseEscapeSequence(text,startPos,len,token);  } else {    if (startPos == 0 || text.length() == len)     return text; else     return substring(text,startPos,len);  }}  }
class C{  ByteBuffer encrypt(ByteBuffer src) throws SSLException {  assert handshakeFinished;  assert isHeldByCurrentThread();  outNetBuf.clear();  while (src.hasRemaining()) {    int outNetRemaining=outNetBuf.capacity() - outNetBuf.position();    if (outNetRemaining < src.remaining() * 2) {      outNetBuf=expandBuffer(outNetBuf,Math.max(outNetBuf.position() + src.remaining() * 2,outNetBuf.capacity() * 2));      if (log.isDebugEnabled())       log.debug("Expanded output net buffer [outNetBufCapacity=" + outNetBuf.capacity() + ", ses="+ ses+ ']');    }    SSLEngineResult res=sslEngine.wrap(src,outNetBuf);    if (log.isDebugEnabled())     log.debug("Encrypted data [status=" + res.getStatus() + ", handshakeStaus="+ res.getHandshakeStatus()+ ", ses="+ ses+ ']');    if (res.getStatus() == SSLEngineResult.Status.OK) {      if (res.getHandshakeStatus() == NEED_TASK)       runTasks();    } else     throw new SSLException("Failed to encrypt data (SSL engine error) [status=" + res.getStatus() + ", handshakeStatus="+ res.getHandshakeStatus()+ ", ses="+ ses+ ']');  }  outNetBuf.flip();  return outNetBuf;}  }
class C{  public void upgradeToLiteral(){  RegisterSpecList oldSources=insn.getSources();  insn=insn.withSourceLiteral();  getBlock().getParent().onSourcesChanged(this,oldSources);}  }
class C{  private void handleCSPShareParticipantConfiguration(PanboxShare share,boolean shareHasParticipants,List<PanboxGUIContact> selectedcontacts){  if (share instanceof DropboxPanboxShare) {    DropboxAdapterFactory dbxFac=(DropboxAdapterFactory)CSPAdapterFactory.getInstance(StorageBackendType.DROPBOX);    DropboxAPIIntegration dbIntegration=(DropboxAPIIntegration)dbxFac.getAPIAdapter();    String shareid=FilenameUtils.getName(share.getPath());    boolean shareIsOnline, shareConfigured=false;    try {      shareIsOnline=((shareid != null) && (shareid.length() > 0) && dbIntegration.exists("/" + shareid));    } catch (    CSPApiException e) {      logger.error("Could not determine if share with path " + share.getPath() + " and shareid: "+ shareid+ " has already been uploaded!");      shareIsOnline=false;    }    if (shareIsOnline) {      String message=bundle.getString("PanboxClientGUI.openDropboxShareConfig");      JCheckBox copyToClipboard=new JCheckBox(bundle.getString("PanboxClientGUI.copyEmailToClipboard"));      Object[] params=new Object[]{message,copyToClipboard};      int res=JOptionPane.showConfirmDialog(this,params,bundle.getString("PanboxClientGUI.openShareConfig"),JOptionPane.YES_NO_OPTION);      if (res == JOptionPane.YES_OPTION) {        if (copyToClipboard.isSelected()) {          String emails=PanboxGUIContact.getMailAsSepteratedValues(selectedcontacts,";",StorageBackendType.DROPBOX);          DesktopApi.copyToClipboard(emails.toString(),false);        }        try {          if (shareHasParticipants) {            dbIntegration.removeUser(shareid);          } else {            dbIntegration.inviteUser(shareid);          }          shareConfigured=true;        } catch (        Exception e) {          logger.error("handleCSPShareParticipantConfiguration: Error opening share configuration",e);          JOptionPane.showMessageDialog(this,bundle.getString("PanboxClientGUI.errorOpeningShareConfig"),bundle.getString("error"),JOptionPane.ERROR_MESSAGE);        }      }    } else {    }    if (Settings.getInstance().isMailtoSchemeSupported()) {      String message;      if (shareConfigured) {        message=bundle.getString("PanboxClientGUI.sendInvitationLink.message");      } else {        if (shareIsOnline) {          message=bundle.getString("PanboxClientGUI.sendInvitationLinkNotConfigured.message");        } else {          message=bundle.getString("PanboxClientGUI.sendInvitationLinkNoSync.message");        }      }      int ret=JOptionPane.showConfirmDialog(this,message,bundle.getString("PanboxClientGUI.InvitationLink.title"),JOptionPane.YES_NO_OPTION);      if (ret == JOptionPane.YES_OPTION) {        String emails=PanboxGUIContact.getMailAsSepteratedValues(selectedcontacts,",",StorageBackendType.DROPBOX);        String mailto="mailto:" + emails + "?subject="+ bundle.getString("client.mailTo.shareInvitationSubject")+ "&body="+ PanboxURICmdShareInvitation.getPanboxLink(share.getUuid().toString(),share.getType().name());        DesktopApi.browse(URI.create(mailto));      }    } else {      String message;      if (shareConfigured) {        message=bundle.getString("PanboxClientGUI.copyInvitationLink.message");      } else {        if (shareIsOnline) {          message=bundle.getString("PanboxClientGUI.copyInvitationLinkNotConfigured.message");        } else {          message=bundle.getString("PanboxClientGUI.copyInvitationLinkNoSync.message");        }      }      int ret=JOptionPane.showConfirmDialog(this,message,bundle.getString("PanboxClientGUI.InvitationLink.title"),JOptionPane.YES_NO_OPTION);      if (ret == JOptionPane.YES_OPTION) {        URI uri=PanboxURICmdShareInvitation.getPanboxLink(share.getUuid().toString(),share.getType().name());        DesktopApi.copyToClipboard(uri.toASCIIString(),true);        JOptionPane.showMessageDialog(this,bundle.getString("PanboxClientGUI.copyInvitationLink.info") + "\n" + uri.toASCIIString(),bundle.getString("PanboxClientGUI.InvitationLink.title"),JOptionPane.INFORMATION_MESSAGE);      }    }  } else {    logger.warn("handleCSPShareParticipantConfiguration: Unknown share type!");  }}  }
class C{  public void addActiveLineRangeListener(ActiveLineRangeListener l){  listenerList.add(ActiveLineRangeListener.class,l);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testNode;  boolean state;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("address");  testNode=(Element)elementList.item(0);  state=testNode.hasAttribute("nomatch");  assertFalse("throw_False",state);}  }
class C{  public NotificationChain basicSetFpar(TFormalParameter newFpar,NotificationChain msgs){  TFormalParameter oldFpar=fpar;  fpar=newFpar;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,TypesPackage.TSETTER__FPAR,oldFpar,newFpar);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  @Factory public static <T extends Throwable>Matcher<T> hasCause(final Matcher<? extends Throwable> matcher){  return new ThrowableCauseMatcher<T>(matcher);}  }
class C{  @EventHandler(priority=EventPriority.MONITOR,ignoreCancelled=true) public void onBlockBreak(BlockBreakEvent event){  Player player=event.getPlayer();  Match match=Cardinal.getMatch(player);  List<Destroyable> destroyables=getDestroyables(match);  if (match == null || !match.hasPlayer(player) || destroyables.size() == 0) {    return;  }  Block block=event.getBlock();  destroyables.forEach(null);}  }
class C{  public static boolean show(String title,String text,int type,Image icon,String okText,String cancelText){  return show(title,text,type,icon,okText,cancelText,0);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col;  int progress=0;  double z, val;  int i;  int[] dX={1,1,1,0,-1,-1,-1,0};  int[] dY={-1,0,1,1,1,0,-1,-1};  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    int rows=image.getNumberRows();    int cols=image.getNumberColumns();    double noData=image.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=image.getValue(row,col);        if (z != noData) {          if (z != 0) {            val=0;            for (i=0; i < 8; i++) {              if (image.getValue(row + dY[i],col + dX[i]) != z) {                val=z;                break;              }            }            output.setValue(row,col,val);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    image.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public GetEventsParams withFilters(Filters filters){  this.filters=filters;  return this;}  }
class C{  public static JPanel stackNorth(JComponent... components){  return stack(BorderLayout.NORTH,components);}  }
class C{  private boolean isParseDataFetchLoaded(String url,String html){  boolean ok=true;  AbstractHtmlParseFilter[] parseFilters=AbstractHtmlParseFilter.getParseFilters(conf);  if (parseFilters != null) {    for (    AbstractHtmlParseFilter htmlParseFilter : parseFilters) {      Boolean ret=htmlParseFilter.isParseDataFetchLoaded(url,html);      Http.LOG.debug("Invoke isParseDataFetchLoaded of {} , return : {}",htmlParseFilter.getClass(),ret);      if (ret == false) {        ok=false;        break;      }    }  }  return ok;}  }
class C{  private void constructDialog(){  JPanel centerPanel=new JPanel(new BorderLayout());  centerPanel.putClientProperty(ThemeMediator.SKIN_PROPERTY_DARK_BOX_BACKGROUND,Boolean.TRUE);  centerPanel.setOpaque(true);  centerPanel.setBorder(BorderFactory.createEtchedBorder(EtchedBorder.LOWERED));  JLabel iconLabel=new JLabel(GUIMediator.getThemeImage("question"));  _foreground=iconLabel.getForeground();  iconLabel.setOpaque(false);  iconLabel.setBorder(BorderFactory.createEmptyBorder(20,20,20,20));  centerPanel.add(iconLabel,BorderLayout.WEST);  JPanel tipPanel=new JPanel(new BorderLayout());  centerPanel.add(tipPanel,BorderLayout.CENTER);  tipPanel.setBackground(UIManager.getColor("TextField.background"));  tipPanel.setOpaque(true);  JLabel titleLabel=new JLabel(TOTD_INTRO);  titleLabel.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createMatteBorder(0,0,1,0,ThemeMediator.LIGHT_BORDER_COLOR),BorderFactory.createEmptyBorder(10,10,10,10)));  Font titleFont=new Font("Dialog",titleLabel.getFont().getStyle(),titleLabel.getFont().getSize() + 5);  titleLabel.setFont(titleFont);  tipPanel.add(titleLabel,BorderLayout.NORTH);  tipPane.setContentType("text");  tipPane.setEditable(false);  Font tipFont=new Font("Dialog",tipPane.getFont().getStyle(),tipPane.getFont().getSize() + 2);  tipPane.setFont(tipFont);  tipPane.addHyperlinkListener(GUIUtils.getHyperlinkListener());  tipPane.setText(I18n.tr("Loading tips..."));  tipPane.setBorder(BorderFactory.createEmptyBorder(10,10,10,10));  JScrollPane tipScroller=new JScrollPane(tipPane);  tipScroller.setPreferredSize(new Dimension(TIP_WIDTH,TIP_HEIGHT));  tipScroller.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);  tipScroller.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);  tipScroller.setBorder(null);  tipPanel.add(tipScroller,BorderLayout.CENTER);  JPanel startupPanel=new JPanel(new FlowLayout(FlowLayout.LEFT));  JCheckBox showTips=new JCheckBox(TOTD_STARTUP);  showTips.setSelected(StartupSettings.SHOW_TOTD.getValue());  startupPanel.add(showTips);  JPanel buttonPanel=new JPanel(new FlowLayout(FlowLayout.RIGHT));  JButton next=new JButton(TOTD_NEXT);  buttonPanel.add(next);  JButton close=new JButton(TOTD_CLOSE);  buttonPanel.add(close);  JPanel navigation=new JPanel(new BorderLayout());  navigation.add(startupPanel,BorderLayout.WEST);  navigation.add(buttonPanel,BorderLayout.EAST);  showTips.addActionListener(new ShowTipListener());  next.addActionListener(new NextTipListener());  close.addActionListener(GUIUtils.getDisposeAction());  dialog.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);  JPanel contentPanel=new JPanel(new BorderLayout());  contentPanel.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));  contentPanel.add(centerPanel,BorderLayout.CENTER);  contentPanel.add(navigation,BorderLayout.SOUTH);  dialog.setContentPane(contentPanel);  GUIUtils.addHideAction((JComponent)dialog.getContentPane());  try {    dialog.pack();  } catch (  OutOfMemoryError oome) {    _canDisplay=false;  }}  }
class C{  public SchedulingThread(String name,LockType lockType){  super(name);  this.lockType=lockType;}  }
class C{  private final int yystate(){  return zzLexicalState;}  }
class C{  public double[] computeLocalFromPreviousObservations(int states[][],int destCol,int[] sourcesAbsolute){  return computeLocalFromPreviousObservations(states,destCol,sourcesAbsolute,false);}  }
class C{  public void clearPrefs(){  this.timePatterns.clear();  this.roomGroups.clear();  this.bldgPrefs.clear();  this.bldgPrefLevels.clear();  this.distPrefs.clear();  this.distPrefLevels.clear();  this.roomPrefs.clear();  this.roomPrefLevels.clear();  this.roomFeaturePrefs.clear();  this.roomFeaturePrefLevels.clear();  this.datePatternPrefs.clear();  this.datePatternPrefLevels.clear();}  }
class C{  public boolean isForceSerialExecution(){  return forceSerialExecution;}  }
class C{  private boolean isDisplayingTagSearchRequest(){  if (!mTagSearchRequest.isEmpty()) {    displayImageListWithSearchResultsForTag(mTagSearchRequest);    mTagSearchRequest="";    return true;  } else   if ((getArguments() != null) && (getArguments().containsKey(ImageActivity.EXTRAS_TAG_SEARCH_QUERY))) {    displayImageListWithSearchResultsForTag(getArguments().getString(ImageActivity.EXTRAS_TAG_SEARCH_QUERY));    getArguments().remove(ImageActivity.EXTRAS_TAG_SEARCH_QUERY);    return true;  }  return false;}  }
class C{  public p removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  public boolean isFailover(){synchronized (this) {    return mIsFailover;  }}  }
class C{  protected TraceNodeExecutedImpl(){  super();}  }
class C{  private UpdateElementEntity<? extends CnATreeElement> createCommand(CnATreeElement element){  return new UpdateElementEntity<CnATreeElement>(element,ChangeLogEntry.STATION_ID);}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) public synchronized List search(CriteriaQuery criteria,int page,int max){  Query query=this.entityManager.createQuery(criteria);  setHints(query);  query.setFirstResult(page * max);  query.setMaxResults(max);  return query.getResultList();}  }
class C{  protected void addEntity(EntityCollection entities,Shape hotspot,CategoryDataset dataset,int row,int column,double entityX,double entityY){  if (!getItemCreateEntity(row,column)) {    return;  }  Shape s=hotspot;  if (hotspot == null) {    double r=getDefaultEntityRadius();    double w=r * 2;    if (getPlot().getOrientation() == PlotOrientation.VERTICAL) {      s=new Ellipse2D.Double(entityX - r,entityY - r,w,w);    } else {      s=new Ellipse2D.Double(entityY - r,entityX - r,w,w);    }  }  String tip=null;  CategoryToolTipGenerator generator=getToolTipGenerator(row,column);  if (generator != null) {    tip=generator.generateToolTip(dataset,row,column);  }  String url=null;  CategoryURLGenerator urlster=getItemURLGenerator(row,column);  if (urlster != null) {    url=urlster.generateURL(dataset,row,column);  }  CategoryItemEntity entity=new CategoryItemEntity(s,tip,url,dataset,dataset.getRowKey(row),dataset.getColumnKey(column));  entities.add(entity);}  }
class C{  @Uninterruptible public int findGCMapIndex(Offset MCOffset){  int entry=findMCEntry(MCOffset);  if (entry == -1)   return OptGCMap.ERROR;  return getGCMapIndex(entry);}  }
class C{  @OnClick(R.id.nested_up_button) public void onNextButton(){  startActivity(new Intent(this,UpNavigationContent.class));}  }
class C{  public CreateNewNoteIntentBuilder addTags(@Nullable ArrayList<String> tags){  ArrayList<String> list=mArgs.getStringArrayList(EvernoteIntent.EXTRA_TAG_NAME_LIST);  if (list == null) {    list=tags;  } else   if (tags != null) {    list.addAll(tags);  }  return setTags(list);}  }
class C{  public static void generateRPClass(){  final RPClass grainFieldClass=new RPClass("growing_entity_spawner");  grainFieldClass.isA("plant_grower");  grainFieldClass.addAttribute("action_name",Type.STRING);  grainFieldClass.addAttribute("max_ripeness",Type.BYTE);  grainFieldClass.addAttribute("ripeness",Type.BYTE);}  }
class C{  public static EventTypeMetadata createValueAdd(String name,TypeClass typeClass){  if ((typeClass != TypeClass.VARIANT) && (typeClass != TypeClass.REVISION)) {    throw new IllegalArgumentException("Type class " + typeClass + " invalid");  }  return new EventTypeMetadata(name,null,typeClass,true,true,true,null,false);}  }
class C{  private void assertSameURI(final TermNode context,final TermNode innerContext){  if (!context.getValue().equals(innerContext.getValue())) {    throw new InvalidGraphContextException("Conflicting GRAPH IRIs: " + context + " and "+ innerContext.getValue());  }}  }
class C{  public static Text toText(Document doc,Object o) throws PageException {  if (o instanceof Text)   return (Text)o; else   if (o instanceof CharacterData)   return doc.createTextNode(((CharacterData)o).getData());  return doc.createTextNode(Caster.toString(o));}  }
class C{  public void volunteerForPrimary(){  if (primaryElector != null) {    return;  }  initializationGate();synchronized (this) {    if (isVolunteering() || isClosed() || !isHosting()) {      return;    }    if (this.volunteeringDelegate == null) {      this.volunteeringDelegate=new VolunteeringDelegate();    }    this.volunteeringDelegate.volunteerForPrimary();  }}  }
class C{  public void removeChannelMap(ChannelMap channelMap){  if (mChannelMaps.contains(channelMap)) {    int index=mChannelMaps.indexOf(channelMap);    mChannelMaps.remove(channelMap);    fireIntervalRemoved(this,index,index);    broadcast(new ChannelMapEvent(channelMap,Event.DELETE));  }}  }
class C{  @Override public PathImpl schemeWalk(String userPath,Map<String,Object> attributes,String filePath,int offset){  int length=filePath.length();  if (length <= offset || filePath.charAt(offset) != '(')   return super.schemeWalk(userPath,attributes,filePath,offset);  MergePath mergePath=createMergePath();  mergePath.setUserPath(userPath);  int head=++offset;  int tail=head;  while (tail < length) {    int ch=filePath.charAt(tail);    if (ch == ')') {      if (head + 1 != tail) {        String subPath=filePath.substring(head,tail);        if (subPath.startsWith("(") && subPath.endsWith(")"))         subPath=subPath.substring(1,subPath.length() - 1);        mergePath.addMergePath(VfsOld.lookup(subPath));      }      if (tail + 1 == length)       return mergePath; else       return mergePath.fsWalk(userPath,attributes,filePath.substring(tail + 1));    } else     if (ch == ';') {      String subPath=filePath.substring(head,tail);      if (subPath.startsWith("(") && subPath.endsWith(")"))       subPath=subPath.substring(1,subPath.length() - 1);      mergePath.addMergePath(VfsOld.lookup(subPath));      head=++tail;    } else     if (ch == '(') {      int depth=1;      for (tail++; tail < length; tail++) {        if (filePath.charAt(tail) == '(')         depth++; else         if (filePath.charAt(tail) == ')') {          tail++;          depth--;          if (depth == 0)           break;        }      }      if (depth != 0)       return new NotFoundPath(getSchemeMap(),filePath);    } else     tail++;  }  return new NotFoundPath(getSchemeMap(),filePath);}  }
class C{  public Announcement(String t){  text=t;}  }
class C{  protected synchronized void stopMonitoring(){  if (logger.isDebugEnabled()) {    logger.debug("{}: Stopping monitoring",ClientHealthMonitor.this);  }  this._isStopped=true;  this.interrupt();  if (logger.isDebugEnabled()) {    logger.debug("{}: Stopped dispatching",ClientHealthMonitor.this);  }}  }
class C{  public void addMarkerElement(String label,double value){  if (markersMap.containsKey(label))   markersMap.get(label).value=value; else   markersMap.put(label,new MarkerProperties(value,DEFAULT_MARKER_COLOR));  dirty=true;}  }
class C{  private static void doSort(short[] a,int left,int right,short[] work,int workBase,int workLen){  if (right - left < QUICKSORT_THRESHOLD) {    sort(a,left,right,true);    return;  }  int[] run=new int[MAX_RUN_COUNT + 1];  int count=0;  run[0]=left;  for (int k=left; k < right; run[count]=k) {    while (k < right && a[k] == a[k + 1])     k++;    if (k == right)     break;    if (a[k] < a[k + 1]) {      while (++k <= right && a[k - 1] <= a[k])       ;    } else     if (a[k] > a[k + 1]) {      while (++k <= right && a[k - 1] >= a[k])       ;      for (int lo=run[count] - 1, hi=k; ++lo < --hi; ) {        short t=a[lo];        a[lo]=a[hi];        a[hi]=t;      }    }    if (run[count] > left && a[run[count]] >= a[run[count] - 1]) {      count--;    }    if (++count == MAX_RUN_COUNT) {      sort(a,left,right,true);      return;    }  }  if (count == 0) {    return;  } else   if (count == 1 && run[count] > right) {    return;  }  right++;  if (run[count] < right) {    run[++count]=right;  }  byte odd=0;  for (int n=1; (n<<=1) < count; odd^=1)   ;  short[] b;  int ao, bo;  int blen=right - left;  if (work == null || workLen < blen || workBase + blen > work.length) {    work=new short[blen];    workBase=0;  }  if (odd == 0) {    System.arraycopy(a,left,work,workBase,blen);    b=a;    bo=0;    a=work;    ao=workBase - left;  } else {    b=work;    ao=0;    bo=workBase - left;  }  for (int last; count > 1; count=last) {    for (int k=(last=0) + 2; k <= count; k+=2) {      int hi=run[k], mi=run[k - 1];      for (int i=run[k - 2], p=i, q=mi; i < hi; ++i) {        if (q >= hi || p < mi && a[p + ao] <= a[q + ao]) {          b[i + bo]=a[p++ + ao];        } else {          b[i + bo]=a[q++ + ao];        }      }      run[++last]=hi;    }    if ((count & 1) != 0) {      for (int i=right, lo=run[count - 1]; --i >= lo; b[i + bo]=a[i + ao])       ;      run[++last]=right;    }    short[] t=a;    a=b;    b=t;    int o=ao;    ao=bo;    bo=o;  }}  }
class C{  public void keepWarm(int temperature,int seconds){}  }
class C{  public T or(T default1){  return value != null ? value : default1;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:07.636 -0500",hash_original_method="64C8195C0C6E03DDD3FCE77D9F18F499",hash_generated_method="7DB5F020C0D78329D215290C0CE9C2E6") public final boolean isFakeBoldText(){  return 1 == ((getFlags() & FAKE_BOLD_TEXT_FLAG) + 0);}  }
class C{  private void configurePlatformApiGwtClients(){  bind(UserServiceClient.class).to(UserServiceClientImpl.class).in(Singleton.class);  bind(UserProfileServiceClient.class).to(UserProfileServiceClientImpl.class).in(Singleton.class);  bind(PreferencesServiceClient.class).to(PreferencesServiceClientImpl.class).in(Singleton.class);  bind(GitServiceClient.class).to(GitServiceClientImpl.class).in(Singleton.class);  bind(OAuthServiceClient.class).to(OAuthServiceClientImpl.class).in(Singleton.class);  bind(FactoryServiceClient.class).to(FactoryServiceClientImpl.class).in(Singleton.class);  bind(ProjectServiceClient.class).to(ProjectServiceClientImpl.class).in(Singleton.class);  bind(WorkspaceServiceClient.class).to(WorkspaceServiceClientImpl.class).in(Singleton.class);  bind(SshServiceClient.class).to(SshServiceClientImpl.class).in(Singleton.class);  bind(ProjectImportersServiceClient.class).to(ProjectImportersServiceClientImpl.class).in(Singleton.class);  bind(ProjectTypeServiceClient.class).to(ProjectTypeServiceClientImpl.class).in(Singleton.class);  bind(ProjectTemplateServiceClient.class).to(ProjectTemplateServiceClientImpl.class).in(Singleton.class);  bind(RecipeServiceClient.class).to(RecipeServiceClientImpl.class).in(Singleton.class);  bind(MachineServiceClient.class).to(MachineServiceClientImpl.class).in(Singleton.class);  bind(ProjectTypeRegistry.class).to(ProjectTypeRegistryImpl.class).in(Singleton.class);  bind(ProjectTemplateRegistry.class).to(ProjectTemplateRegistryImpl.class).in(Singleton.class);  bind(DebuggerServiceClient.class).to(DebuggerServiceClientImpl.class).in(Singleton.class);}  }
class C{  public Geocoder(Context context){  this(context,Locale.getDefault());}  }
class C{  private void initialize(){  this.setText(Constant.messages.getString("enc2.tools.menu.encdec"));}  }
class C{  public long validate(long actual,long max,long min,long defaultVal){  if (actual <= max && actual >= min) {    return actual;  }  return defaultVal;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:43.612 -0500",hash_original_method="F24087B7DF675CB39963D340E9AD0382",hash_generated_method="9FE0F7C23366ECF1FB281F03164A9AF7") public TestCaseClassLoader(String classPath){  scanPath(classPath);  readExcludedPackages();}  }
class C{  public LocalConversionMapper(final Mapper wrapped){  super(wrapped);  readResolve();}  }
class C{  public void commit() throws IOException {  if (hasErrors) {    completeEdit(this,false);    remove(entry.key);  } else {    completeEdit(this,true);  }  committed=true;}  }
class C{  protected void extractDefaultProfile(final String profilePath) throws IOException {synchronized (lockProfile) {    try {      if (!isProfileCreated) {        System.out.println("start create profile");        FileUtility.deleteDirectory(profilePath);        FileUtility.extractJar(profilePath,FireFoxProfileMarker.class);      }    } catch (    Exception ex) {      ex.printStackTrace();    }  }  isProfileCreated=true;}  }
class C{  public void accept(MemberValueVisitor visitor){  visitor.visitEnumMemberValue(this);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private void updatePropertyID(final BasicProperty basicProperty){  final PropertyID propertyId=basicProperty.getPropertyID();  if (propertyId != null) {    propertyId.setEastBoundary(getEastBoundary());    propertyId.setWestBoundary(getWestBoundary());    propertyId.setNorthBoundary(getNorthBoundary());    propertyId.setSouthBoundary(getSouthBoundary());  }}  }
class C{  private static void copyRawResource(final Context context,final int rawResId,final File dest){  try {    final InputStream is=context.getResources().openRawResource(rawResId);    final FileOutputStream fos=new FileOutputStream(dest);    final byte[] buf=new byte[1024];    int read;    try {      while ((read=is.read(buf)) > 0)       fos.write(buf,0,read);    }  finally {      is.close();      fos.close();    }  } catch (  final IOException e) {    DebugLogger.e(TAG,"Error while copying HEX file " + e.toString());  }}  }
class C{  private void resetHeartbeatTimeout(){  context.checkThread();  if (isClosed())   return;  if (heartbeatTimer != null) {    heartbeatTimer.cancel();  }  Duration delay=context.getElectionTimeout().plus(Duration.ofMillis(random.nextInt((int)context.getElectionTimeout().toMillis())));  heartbeatTimer=context.getThreadContext().schedule(delay,null);}  }
class C{  private void airstrike(){  List<Block> blocks=new ArrayList<>();  mController.getWorkspace().getToolboxContents().getAllBlocksRecursive(blocks);  for (int i=0; i < blocks.size(); i++) {    Block copiedModel=blocks.get(i).deepCopy();    copiedModel.setPosition(0,0);    mController.addRootBlock(copiedModel);  }}  }
class C{  public AuthorityKeyIdentifier(SubjectPublicKeyInfo spki,GeneralNames name,BigInteger serialNumber){  Digest digest=AndroidDigestFactory.getSHA1();  byte[] resBuf=new byte[digest.getDigestSize()];  byte[] bytes=spki.getPublicKeyData().getBytes();  digest.update(bytes,0,bytes.length);  digest.doFinal(resBuf,0);  this.keyidentifier=new DEROctetString(resBuf);  this.certissuer=GeneralNames.getInstance(name.toASN1Primitive());  this.certserno=new ASN1Integer(serialNumber);}  }
class C{  public void putListBoolean(String key,ArrayList<Boolean> boolList){  checkForNullKey(key);  ArrayList<String> newList=new ArrayList<String>();  for (  Boolean item : boolList) {    if (item) {      newList.add("true");    } else {      newList.add("false");    }  }  putListString(key,newList);}  }
class C{  protected boolean drawView(){  if (mIsRendererCreated && mRenderer.isRunning() && mPanorama != null) {    if (!mIsValidForFov)     mPanorama.getCamera().rotate(this,mStartPoint,mEndPoint);    mGLSurfaceView.requestRender();    return true;  }  return false;}  }
class C{  public void testCopying1() throws Exception {  TungstenProperties props=makeProperties();  TungstenProperties props2=new TungstenProperties(props.map());  TungstenProperties props3=new TungstenProperties(props.hashMap());  assertEquals("Comparing properties from Map",props,props2);  assertEquals("Comparing properties from HashMap",props,props3);}  }
class C{  public static void sendFirst(int src,int dest,double delay,int tag,Object data){  if (delay < 0) {    throw new IllegalArgumentException("Send delay can't be negative.");  }  SimEvent e=new SimEvent(SimEvent.SEND,clock + delay,src,dest,tag,data);  future.addEventFirst(e);}  }
class C{  public void create(View view){  UserConfig config=new UserConfig();  EditText text=(EditText)findViewById(R.id.userText);  config.user=text.getText().toString().trim();  text=(EditText)findViewById(R.id.passwordText);  config.password=text.getText().toString().trim();  text=(EditText)findViewById(R.id.hintText);  config.hint=text.getText().toString().trim();  text=(EditText)findViewById(R.id.nameText);  config.name=text.getText().toString().trim();  text=(EditText)findViewById(R.id.emailText);  config.email=text.getText().toString().trim();  text=(EditText)findViewById(R.id.websiteText);  config.website=text.getText().toString().trim();  text=(EditText)findViewById(R.id.bioText);  config.bio=text.getText().toString().trim();  CheckBox checkbox=(CheckBox)findViewById(R.id.showNameCheckBox);  config.showName=checkbox.isChecked();  HttpCreateUserAction action=new HttpCreateUserAction(this,config);  action.execute();}  }
class C{  public void suspendResumeResellerService(String testName,double operatorShare) throws Exception {  VendorData supplierData=setupNewSupplier("2013-01-01 08:00:00");  setCutOffDay(supplierData.getAdminKey(),1);  setDateFactory("2013-01-02 20:00:00");  VOServiceDetails supplService=createPublishActivateService(supplierData,TestPriceModel.EXAMPLE_RATA_WEEK_ROLES,"supplSrvForReseller");  updateOperatorRevenueShare(operatorShare,supplService.getKey());  updatePartnerRevenueShares(15.0D,20.0D,supplService);  VendorData resellerData=setupNewReseller("2013-01-03 08:00:00");  setCutOffDay(resellerData.getAdminKey(),1);  CustomerData resellerCustomerData=registerCustomer(resellerData,"resellerCustomer");  updateMarketplaceRevenueShare(10.0D,resellerData.getMarketplaceId(0));  setDateFactory("2013-07-10 20:00:00");  VOServiceDetails resellerService=grantResalePermission(supplierData,supplService,resellerData);  resellerService=publishActivateService(resellerData,resellerService);  subscribe(resellerCustomerData.getAdminUser(),"resellerSubscr",resellerService,"2013-08-01 12:00:00","ADMIN");  setDateFactory("2013-08-10 07:00:00");  paymentSetup.deleteCustomerPaymentTypes(resellerData,resellerCustomerData.getOrganization());  setDateFactory("2013-08-27 12:00:00");  paymentSetup.reassignCustomerPaymentTypes(resellerData,resellerCustomerData.getOrganization());  resetCutOffDay(supplierData.getAdminKey());  resetCutOffDay(resellerData.getAdminKey());  cacheTestData(testName,new TestData(supplierData,resellerData));}  }
class C{  public void removeExistings(){  for (int i=0; i < size(); i++) {    if (get(i).exists())     remove(i--);  }}  }
class C{  @Override public void onSensorChanged(SensorEvent event){  if (event.sensor.getType() == Sensor.TYPE_ACCELEROMETER) {    latestAcc.set(event.values[0],event.values[1],event.values[2]);    tracker.processAcc(latestAcc,event.timestamp);synchronized (gyroBiasEstimatorMutex) {      if (gyroBiasEstimator != null) {        gyroBiasEstimator.processAccelerometer(latestAcc,event.timestamp);      }    }  } else   if (event.sensor.getType() == Sensor.TYPE_GYROSCOPE || event.sensor.getType() == Sensor.TYPE_GYROSCOPE_UNCALIBRATED) {    latestGyroEventClockTimeNs=clock.nanoTime();    if (event.sensor.getType() == Sensor.TYPE_GYROSCOPE_UNCALIBRATED) {      if (firstGyroValue && event.values.length == 6) {        initialSystemGyroBias[0]=event.values[3];        initialSystemGyroBias[1]=event.values[4];        initialSystemGyroBias[2]=event.values[5];      }      latestGyro.set(event.values[0] - initialSystemGyroBias[0],event.values[1] - initialSystemGyroBias[1],event.values[2] - initialSystemGyroBias[2]);    } else {      latestGyro.set(event.values[0],event.values[1],event.values[2]);    }    firstGyroValue=false;synchronized (gyroBiasEstimatorMutex) {      if (gyroBiasEstimator != null) {        gyroBiasEstimator.processGyroscope(latestGyro,event.timestamp);        gyroBiasEstimator.getGyroBias(gyroBias);        Vector3d.sub(this.latestGyro,gyroBias,latestGyro);      }    }    tracker.processGyro(latestGyro,event.timestamp);  } else   if (event.sensor.getType() == Sensor.TYPE_MAGNETIC_FIELD) {    tracker.processMag(event.values,event.timestamp);  }}  }
class C{  public static String slurpURLNoExceptions(URL u,String encoding){  try {    return slurpURL(u,encoding);  } catch (  Exception e) {    e.printStackTrace();    return null;  }}  }
class C{  @NonNull public static MediaProgress obtain(MediaProgress event){  return new MediaProgress(event.position,event.bufferPercent,event.duration);}  }
class C{  public void resetMeasuredValues(){  setMinMeasuredValue(getValue());  setMaxMeasuredValue(getValue());}  }
class C{  public final Iterator<KnowledgeEdge> requiredCommonCausesIterator(){  return Collections.unmodifiableSet(requiredCommonCauses).iterator();}  }
class C{  void validateWindowOrder(TZWindow previous){  if (windowEnd.compareTo(previous.windowEnd) < 0) {    throw new IllegalStateException("Windows must be added in date-time order: " + windowEnd + " < "+ previous.windowEnd);  }}  }
class C{  public Object clone(){  return this.copy();}  }
class C{  private void validateRootResponse(Operation response){  ServiceDocumentQueryResult body=response.getBody(ServiceDocumentQueryResult.class);  assertNotEquals(body,null);  assertNotEquals(body.documentLinks,null);  assertNotEquals(body.documentLinks.size(),0);}  }
class C{  public static Set<Integer> drawSample(int size,int maximum){  if (maximum < size)   return null;  HashSet<Integer> set=new HashSet<Integer>(size);  if (size * 4 > maximum) {    LinkedList<Integer> tmp=new LinkedList<Integer>();    for (int i=0; i < maximum; i++) {      tmp.add(i);    }    while (tmp.size() > size) {      tmp.remove((int)Math.floor(Math.random() * (double)tmp.size()));    }    set.addAll(tmp);  } else {    while (set.size() < size) {      set.add((int)Math.floor((Math.random() * (double)maximum)));    }  }  return set;}  }
class C{  private void polling(long qAddr,boolean polling){  mem.writeByte(qAddr + 10,(byte)(polling ? 1 : 0));}  }
class C{  public static int compareTo(int[] n1,int[] n2){  int off1=0;  int off2=0;  boolean z1=isZero(n1);  boolean z2=isZero(n2);  if (z1 && z2) {    return 0;  }  if (z1) {    return -1;  }  if (z2) {    return +1;  }  while (n1[off1] == 0) {    off1++;  }  while (n2[off2] == 0) {    off2++;  }  int sz1=n1.length - off1;  int sz2=n2.length - off2;  if (sz1 < sz2) {    return -1;  }  if (sz2 < sz1) {    return +1;  }  for (int i=0; i < sz1; i++) {    if (n1[off1 + i] == n2[off2 + i]) {      continue;    }    if (n2[off2 + i] > n1[off1 + i]) {      return -1;    } else {      return +1;    }  }  return 0;}  }
class C{  public void updateSelectedUnit(){  if (getSubscriptionUnitCtrl().isUnitSelected()) {    model.getSubscription().setUnitKey(getSubscriptionUnitCtrl().getModel().getSelectedUnitId());    model.getSubscription().setUnitName(getSubscriptionUnitCtrl().getModel().getSelectedUnitName());    return;  }  model.getSubscription().setUnitKey(0);  model.getSubscription().setUnitName("");}  }
class C{  public boolean isValid(){  boolean isValid=false;  if (this.getText().trim().length() > 0) {    this.setBackground(Color.red);    isValid=true;    this.setBackground(originalColor);  } else {    isValid=true;  }  this.repaint();  return isValid;}  }
class C{  public void testGetColumnsBug1099() throws Exception {  try {    this.stmt.executeUpdate("DROP TABLE IF EXISTS testGetColumnsBug1099");    DatabaseMetaData dbmd=this.conn.getMetaData();    this.rs=dbmd.getTypeInfo();    StringBuilder types=new StringBuilder();    HashMap<String,String> alreadyDoneTypes=new HashMap<String,String>();    while (this.rs.next()) {      String typeName=this.rs.getString("TYPE_NAME");      if ((typeName.indexOf("BINARY") == -1) && !typeName.equals("LONG VARCHAR")) {        if (!alreadyDoneTypes.containsKey(typeName)) {          alreadyDoneTypes.put(typeName,null);          if (types.length() != 0) {            types.append(", \n");          }          int typeNameLength=typeName.length();          StringBuilder safeTypeName=new StringBuilder(typeNameLength);          for (int i=0; i < typeNameLength; i++) {            char c=typeName.charAt(i);            if (Character.isWhitespace(c)) {              safeTypeName.append("_");            } else {              safeTypeName.append(c);            }          }          types.append(safeTypeName.toString());          types.append("Column ");          types.append(typeName);          if (typeName.indexOf("CHAR") != -1) {            types.append(" (1)");          } else           if (typeName.equalsIgnoreCase("enum") || typeName.equalsIgnoreCase("set")) {            types.append("('a', 'b', 'c')");          }        }      }    }    this.stmt.executeUpdate("CREATE TABLE testGetColumnsBug1099(" + types.toString() + ")");    dbmd.getColumns(null,this.conn.getCatalog(),"testGetColumnsBug1099","%");  }  finally {    this.stmt.executeUpdate("DROP TABLE IF EXISTS testGetColumnsBug1099");  }}  }
class C{  @Override public boolean remove(Object object){  return removeElement(object);}  }
class C{  private void translateTexts(){  for (  guiField f : guiFields) {    f.translateTexts();  }}  }
class C{  public boolean contains(Circle2D circle){  return Math.sqrt(Math.pow(circle.getX() - x,2) + Math.pow(circle.getY() - y,2)) <= Math.abs(radius - circle.getRadius());}  }
class C{  public boolean hasGeoRssWhere(){  return hasExtension(GeoRssWhere.class);}  }
class C{  public int hashCode(){  return map.hashCode();}  }
class C{  public String[] computeBinding(String superType,int index) throws JavaModelException, IndexOutOfBoundsException {  IJavaProject project=fUnit.getJavaProject();  IType type=project.findType(superType);  if (type == null)   throw new JavaModelException(new CoreException(new Status(IStatus.ERROR,JavaPlugin.getPluginId(),IStatus.OK,"No such type",null)));  return computeBinding(type,index);}  }
class C{  public SchemaRegistryMultiple(List<String> schemaKeys){  table=new DimensionalTable<Schema>(schemaKeys);}  }
class C{  @Override public boolean equals(Object other){  if (other == null) {    return false;  } else   if (!(other instanceof PeerNetwork)) {    return false;  } else   if (other.getClass() != this.getClass()) {    return false;  } else   if (((PeerNetwork)other).getBluetoothDevice() == null) {    return this.getBluetoothDevice() == null;  }  return ((PeerNetwork)other).getBluetoothDevice().equals(this.getBluetoothDevice());}  }
class C{  public ValueHandler(RootHandler rootHandler,ItemHandler itemHandler){  this.rootHandler=rootHandler;  this.itemHandler=itemHandler;  this.currentText=new StringBuffer();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(localName04.class,args);}  }
class C{  public void processAttribute(String namespace,String qualifiedName,String localName,String attrValue) throws ParseException {  processAttribute(namespace,localName,attrValue);}  }
class C{  public NodeAsHTMLPrinter(PrintStream out,String[] tokenNames){  this.tokenNames=tokenNames;  this.out=out;  this.stack=new Stack();}  }
class C{  public SQLSyntaxErrorException(String reason,String sqlState,int vendorCode){  super(reason,sqlState,vendorCode);}  }
class C{  public boolean isUploading(){  return isUploading;}  }
class C{  private static List<String> determineMimeTypesByFilename(String filename){  String fileExtension=getExtension(filename);  List<String> mimeTypeList=FILE_EXTENSION_TO_MIMETYPE_MAPPING.get(fileExtension);  if (mimeTypeList != null && mimeTypeList.size() > 0) {    return mimeTypeList;  } else {    String mimeType=MimeTypeMap.getSingleton().getMimeTypeFromExtension(fileExtension);    if (mimeType != null) {      return Collections.singletonList(mimeType);    } else {      return new ArrayList<>();    }  }}  }
class C{  static Shape segmentShape(Rectangle r,Shape s){  return segmentShape(r,s,new GeneralPath());}  }
class C{  public DoubleArrayList(int initialCapacity){  this(new double[initialCapacity]);  setSizeRaw(0);}  }
class C{  public static Map<String,Object> createNote(DispatchContext ctx,Map<String,?> context){  Delegator delegator=ctx.getDelegator();  GenericValue userLogin=(GenericValue)context.get("userLogin");  Timestamp noteDate=(Timestamp)context.get("noteDate");  String partyId=(String)context.get("partyId");  String noteName=(String)context.get("noteName");  String note=(String)context.get("note");  String noteId=delegator.getNextSeqId("NoteData");  Locale locale=(Locale)context.get("locale");  if (noteDate == null) {    noteDate=UtilDateTime.nowTimestamp();  }  if (partyId == null) {    if (userLogin != null && userLogin.get("partyId") != null)     partyId=userLogin.getString("partyId");  }  Map<String,Object> fields=UtilMisc.toMap("noteId",noteId,"noteName",noteName,"noteInfo",note,"noteParty",partyId,"noteDateTime",noteDate);  try {    GenericValue newValue=delegator.makeValue("NoteData",fields);    delegator.create(newValue);  } catch (  GenericEntityException e) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"CommonNoteCannotBeUpdated",UtilMisc.toMap("errorString",e.getMessage()),locale));  }  Map<String,Object> result=ServiceUtil.returnSuccess();  result.put("noteId",noteId);  result.put("partyId",partyId);  return result;}  }
class C{  public Builder name(String name){  this.name=name;  return this;}  }
class C{  public void updateTriggerDataMember(Boolean triggerDataMember) throws SecurityException {  checkWriteAccess();  boolean hasAccess=ConfigWebUtil.hasAccess(config,SecurityManager.TYPE_SETTING);  if (!hasAccess)   throw new SecurityException("no access to update trigger-data-member");  Element scope=_getRootElement("component");  scope.setAttribute("trigger-data-member",Caster.toString(triggerDataMember,""));}  }
class C{  public AbstractIntLiteral createAbstractIntLiteral(){  AbstractIntLiteralImpl abstractIntLiteral=new AbstractIntLiteralImpl();  return abstractIntLiteral;}  }
class C{  public PyBlockEvaluator(){  this(new PyEvaluationContext());}  }
class C{  public ProjectContext loadLastProject(){  ProjectRef lastOpenedProject=registry.getLastOpenedProject();  if (lastOpenedProject != null) {    try {      return loadProject(lastOpenedProject);    } catch (    FileNotFoundException fnf) {      Log.error(TAG,fnf.getMessage());      fnf.printStackTrace();    }catch (    AssetNotFoundException anf) {      Log.error(TAG,anf.getMessage());    }catch (    MetaFileParseException mfp) {      Log.error(TAG,mfp.getMessage());    }    return null;  }  return null;}  }
class C{  public String toString(){  return getClass().getSimpleName() + "{timestamp=" + timestamp+ ", namespace="+ namespace+ ", container="+ containerNamespace+ ", indexManager="+ indexManager+ "}";}  }
class C{  protected void validate(){  this.isValid=true;  getParentComponent().getParentStream().firePairPropertyChange(this,IceMediaStream.PROPERTY_PAIR_VALIDATED,false,true);}  }
class C{  public void addLayoutComponent(Component comp,Object constraints){synchronized (comp.getTreeLock()) {    if ((constraints == null) || (constraints instanceof String)) {      addLayoutComponent((String)constraints,comp);    } else {      throw new IllegalArgumentException("cannot add to layout: constraint must be a string (or null)");    }  }}  }
class C{  @Override @Transactional protected void persist(Collection<RawProtein<PrintsRawMatch>> filteredProteins,Map<String,Signature> modelIdToSignatureMap,Map<String,Protein> proteinIdToProteinMap){  for (  RawProtein<PrintsRawMatch> rawProtein : filteredProteins) {    Protein protein=proteinIdToProteinMap.get(rawProtein.getProteinIdentifier());    if (protein == null) {      throw new IllegalStateException("Cannot store match to a protein that is not in database " + "[protein ID= " + rawProtein.getProteinIdentifier() + "]");    }    Set<FingerPrintsMatch.FingerPrintsLocation> locations=null;    String currentSignatureAc=null;    Signature currentSignature=null;    PrintsRawMatch lastRawMatch=null;    final TreeSet<PrintsRawMatch> sortedMatches=new TreeSet<PrintsRawMatch>(PRINTS_RAW_MATCH_COMPARATOR);    sortedMatches.addAll(rawProtein.getMatches());    FingerPrintsMatch match=null;    for (    PrintsRawMatch rawMatch : sortedMatches) {      if (rawMatch == null) {        continue;      }      if (currentSignatureAc == null || !currentSignatureAc.equals(rawMatch.getModelId())) {        if (currentSignatureAc != null) {          if (match != null) {            entityManager.persist(match);          }          match=new FingerPrintsMatch(currentSignature,lastRawMatch.getEvalue(),lastRawMatch.getGraphscan(),locations);          protein.addMatch(match);        }        locations=new HashSet<FingerPrintsMatch.FingerPrintsLocation>();        currentSignatureAc=rawMatch.getModelId();        currentSignature=modelIdToSignatureMap.get(currentSignatureAc);        if (currentSignature == null) {          throw new IllegalStateException("Cannot find PRINTS signature " + currentSignatureAc + " in the database.");        }      }      locations.add(new FingerPrintsMatch.FingerPrintsLocation(rawMatch.getLocationStart(),boundedLocationEnd(protein,rawMatch),rawMatch.getPvalue(),rawMatch.getScore(),rawMatch.getMotifNumber()));      lastRawMatch=rawMatch;    }    if (lastRawMatch != null) {      match=new FingerPrintsMatch(currentSignature,lastRawMatch.getEvalue(),lastRawMatch.getGraphscan(),locations);      protein.addMatch(match);      entityManager.persist(match);    }  }}  }
class C{  private static Object unwrap(Object object){  if (object instanceof Reflect) {    return ((Reflect)object).get();  }  return object;}  }
class C{  public boolean canWinNim(int n){  return n % 4 != 0;}  }
class C{  void initProgram(){  glUseProgram(this.program);  viewMatrixUniform=glGetUniformLocation(this.program,"viewMatrix");  projMatrixUniform=glGetUniformLocation(this.program,"projMatrix");  viewportSizeUniform=glGetUniformLocation(this.program,"viewportSize");  glUseProgram(0);}  }
class C{  public void endVisit(ASTNode node){}  }
class C{  private Spawn parseSpawn(Match match,Element... elements){  String defaultValue=ParseUtil.getFirstAttribute("default",elements);  boolean defaultSpawn=defaultValue != null && Numbers.parseBoolean(defaultValue);  String safeValue=ParseUtil.getFirstAttribute("safe",elements);  boolean safe=safeValue != null && Numbers.parseBoolean(safeValue);  String sequentialValue=ParseUtil.getFirstAttribute("sequential",elements);  boolean sequential=sequentialValue != null && Numbers.parseBoolean(sequentialValue);  String spreadValue=ParseUtil.getFirstAttribute("spread",elements);  boolean spread=spreadValue != null && Numbers.parseBoolean(spreadValue);  String exclusiveValue=ParseUtil.getFirstAttribute("exclusive",elements);  boolean exclusive=exclusiveValue != null && Numbers.parseBoolean(exclusiveValue);  String persistentValue=ParseUtil.getFirstAttribute("persistent",elements);  boolean persistent=persistentValue != null && Numbers.parseBoolean(persistentValue);  Team team=null;  if (!defaultSpawn) {    team=Cardinal.getModule(TeamModule.class).getTeamByName(match,ParseUtil.getFirstAttribute("team",elements));  }  String kitValue=ParseUtil.getFirstAttribute("kit",elements);  Kit kit=kitValue != null ? Cardinal.getModule(KitModule.class).getKit(match,kitValue) : null;  if (kit == null && kitValue != null) {    Located spawn=(Located)elements[0];    errors.add(new ModuleError(this,match.getMap(),new String[]{"Invalid kit specified for spawn","Element at " + spawn.getLine() + ", "+ spawn.getColumn()},false));  }  List<Region> regions=Lists.newArrayList();  Region spawnRegion=getPointProvider(match,"region",true,elements);  if (spawnRegion != null) {    regions.add(spawnRegion);  }  for (  Element regionElement : elements[0].getChildren("region")) {    Region region=getPointProvider(match,"id",false,ParseUtil.addElement(regionElement,elements));    if (region != null) {      regions.add(region);    }  }  if (regions.size() == 0) {    Located located=(Located)elements[0];    errors.add(new ModuleError(this,match.getMap(),new String[]{"No regions specified for spawn at line " + located.getLine() + ", column "+ located.getColumn()},false));    return null;  }  return new Spawn(defaultSpawn,team,safe,sequential,spread,exclusive,persistent,kit,regions);}  }
class C{  public int position(){  return buffer.position();}  }
class C{  public Object put(Object key1,Object key2,Object value){  int hashCode=hash(key1,key2);  int index=map.hashIndex(hashCode,map.data.length);  AbstractHashedMap.HashEntry entry=map.data[index];  while (entry != null) {    if (entry.hashCode == hashCode && isEqualKey(entry,key1,key2)) {      Object oldValue=entry.getValue();      map.updateEntry(entry,value);      return oldValue;    }    entry=entry.next;  }  map.addMapping(index,hashCode,new MultiKey(key1,key2),value);  return null;}  }
class C{  public DelphiProjectHelper(Settings settings,FileSystem fs){  this.settings=settings;  this.fs=fs;  DelphiUtils.LOG.info("Delphi Project Helper creation!!!");  this.excludedSources=detectExcludedSources();}  }
class C{  @Before public void checkSsl() throws SQLException {  boolean isJava7=System.getProperty("java.version").contains("1.7.");  Assume.assumeTrue(haveSsl(sharedConnection));  Assume.assumeFalse(isJava7);  if (System.getProperty("serverCertificatePath") == null) {    ResultSet rs=sharedConnection.createStatement().executeQuery("select @@ssl_cert");    rs.next();    serverCertificatePath=rs.getString(1);    rs.close();  } else {    serverCertificatePath=System.getProperty("serverCertificatePath");  }  clientKeystorePath=System.getProperty("keystorePath");  clientKeystorePassword=System.getProperty("keystorePassword");  Statement stmt=sharedConnection.createStatement();  try {    stmt.execute("DROP USER 'ssltestUser'@'%'");  } catch (  SQLException e) {  }  stmt.execute("CREATE USER 'ssltestUser'@'%'");  stmt.execute("GRANT ALL PRIVILEGES ON *.* TO 'ssltestUser'@'%' REQUIRE SSL");}  }
class C{  private void determineCoverageGoals(){  List<OnlyBranchCoverageTestFitness> goals=new OnlyBranchCoverageFactory().getCoverageGoals();  for (  OnlyBranchCoverageTestFitness goal : goals) {    if (Properties.TEST_ARCHIVE)     TestsArchive.instance.addGoalToCover(this,goal);    branchesId.add(goal.getBranch().getActualBranchId());    if (goal.getBranchExpressionValue())     branchCoverageTrueMap.put(goal.getBranch().getActualBranchId(),goal); else     branchCoverageFalseMap.put(goal.getBranch().getActualBranchId(),goal);  }}  }
class C{  @Override public void stop(){  log.info("Stoping the MqttSourceTask");  try {    mClient.disconnect();    log.info("[{}] Disconnected from Broker.",mMqttClientId);  } catch (  MqttException e) {    log.error("[{}] Disconnecting from Broker failed!",mMqttClientId,e);  }}  }
class C{  private Variable deserialize(String string) throws IOException, ClassNotFoundException {  ObjectInputStream ois=null;  try {    byte[] encoding=Base64.decodeBase64(string);    ByteArrayInputStream baos=new ByteArrayInputStream(encoding);    ois=new ObjectInputStream(baos);    return (Variable)ois.readObject();  }  finally {    if (ois != null) {      ois.close();    }  }}  }
class C{  @SuppressWarnings("ErrorNotRethrown") private void fireDone(){  assert isDone();  DoneCallback cb;  Error err=null;  while ((cb=cbs.poll()) != null)   try {    cb.proceed();  } catch (  Error e) {    if (err == null)     err=e; else     log.log(Level.WARNING,"Failed to notify future callback due to unhandled error.",e);  }  if (err != null)   throw err;}  }
class C{  @Override public int read(final byte[] b,final int off,int len) throws IOException {  if (closed) {    throw new IOException("Attempted read from closed stream.");  }  if (eof) {    return -1;  }  if (pos >= chunkSize) {    nextChunk();    if (eof) {      return -1;    }  }  len=Math.min(len,chunkSize - pos);  final int count=in.read(b,off,len);  pos+=count;  return count;}  }
class C{  public String ridgeTipText(){  return "Set the Ridge value in the log-likelihood.";}  }
class C{  public ReflectedFromAttribute(){  super(REFLECTED_FROM);}  }
class C{  public static void main(final String[] args){  new ConfigGUI().setVisible(true);}  }
class C{  public IRCBinder(IRCService service){  super();  this.service=service;}  }
class C{  public void addInputParam(FBProcedureParam param){  if (inputParams.size() < param.getPosition() + 1) {    inputParams.setSize(param.getPosition() + 1);  }  inputParams.set(param.getPosition(),param);}  }
class C{  public OMGeometry addOMGeometry(OMGeometryList list){  return null;}  }
class C{  public void addFactsValidate(String tableName,FactsValidator listener){  if (tableName == null || listener == null)   return;  String propertyName=m_globalValidators.contains(listener) ? tableName + "*" : tableName + listener.getAD_Client_ID();  ArrayList<FactsValidator> list=(ArrayList<FactsValidator>)m_factsValidateListeners.get(propertyName);  if (list == null) {    list=new ArrayList<FactsValidator>();    list.add(listener);    m_factsValidateListeners.put(propertyName,list);  } else   list.add(listener);}  }
class C{  private void filter(final int ulx,final int uly,final int lrx,final int lry,final FilterMode filter,final int bgcolor){  final int lox=Math.min(Math.max(Math.min(ulx,lrx),0),this.width - 1);  final int loy=Math.min(Math.max(Math.min(uly,lry),0),this.height - 1);  final int rux=Math.min(Math.max(Math.max(ulx,lrx),0),this.width - 1);  final int ruy=Math.min(Math.max(Math.max(uly,lry),0),this.height - 1);  int numberOfNeighbours=0;  int rgbR=0;  int rgbG=0;  int rgbB=0;  int rgb=0;  final int width2=rux - lox + 1;  final int height2=ruy - loy + 1;  boolean border=false;  final BufferedImage image2=new BufferedImage(width2,height2,BufferedImage.TYPE_INT_RGB);  for (int i=lox; i < rux + 1; i++) {    for (int j=loy; j < ruy + 1; j++) {      numberOfNeighbours=0;      rgbR=0;      rgbG=0;      rgbB=0;      if (filter == FilterMode.FILTER_ANTIALIASING || filter == FilterMode.FILTER_BLUR) {        if (i > lox) {          rgb=this.image.getRGB(i - 1,j);          border=(rgb == bgcolor);          rgbR+=rgb >> 16 & 0xff;          rgbG+=rgb >> 8 & 0xff;          rgbB+=rgb & 0xff;          numberOfNeighbours++;        }        if (j > loy) {          rgb=this.image.getRGB(i,j - 1);          border=border || (rgb == bgcolor);          rgbR+=rgb >> 16 & 0xff;          rgbG+=rgb >> 8 & 0xff;          rgbB+=rgb & 0xff;          numberOfNeighbours++;        }        if (i < this.width - 1) {          rgb=this.image.getRGB(i + 1,j);          border=border || (rgb == bgcolor);          rgbR+=rgb >> 16 & 0xff;          rgbG+=rgb >> 8 & 0xff;          rgbB+=rgb & 0xff;          numberOfNeighbours++;        }        if (i < this.height - 1) {          rgb=this.image.getRGB(i,j + 1);          border=border || (rgb == bgcolor);          rgbR+=rgb >> 16 & 0xff;          rgbG+=rgb >> 8 & 0xff;          rgbB+=rgb & 0xff;          numberOfNeighbours++;        }      }      rgb=this.image.getRGB(i,j);      if (filter == FilterMode.FILTER_ANTIALIASING && border || filter == FilterMode.FILTER_BLUR) {        rgbR+=(rgb >> 16 & 0xff);        rgbG+=(rgb >> 8 & 0xff);        rgbB+=(rgb & 0xff);        numberOfNeighbours++;        border=false;      } else       if (filter == FilterMode.FILTER_ANTIALIASING) {        rgbR=(rgb >> 16 & 0xff);        rgbG=(rgb >> 8 & 0xff);        rgbB=(rgb & 0xff);        numberOfNeighbours=1;      } else       if (filter == FilterMode.FILTER_INVERT) {        rgb=rgb ^ 0xffffff;        rgbR=(rgb >> 16 & 0xff);        rgbG=(rgb >> 8 & 0xff);        rgbB=(rgb & 0xff);        numberOfNeighbours=1;      }      rgbR=(rgbR / numberOfNeighbours);      rgbG=(rgbG / numberOfNeighbours);      rgbB=(rgbB / numberOfNeighbours);      rgb=(rgbR << 16) | (rgbG << 8) | rgbB;      image2.setRGB(i - lox,j - loy,rgb);    }  }  insertBitmap(image2,lox,loy);}  }
class C{  public AllStatsTablePanelMulti(DatasetGenerator datasetGenerator,Locker locker){  super("All GC Stats");  addTable(datasetGenerator,locker);}  }
class C{  private boolean saveAnswersForCurrentScreen(boolean evaluateConstraints){  FormController formController=Collect.getInstance().getFormController();  if (formController.currentPromptIsQuestion()) {    LinkedHashMap<FormIndex,IAnswerData> answers=((ODKView)mCurrentView).getAnswers();    try {      FailedConstraint constraint=formController.saveAnswers(answers,evaluateConstraints);      if (constraint != null) {        createConstraintToast(constraint.index,constraint.status);        return false;      }    } catch (    JavaRosaException e) {      Log.e(TAG,e.getMessage(),e);      createErrorDialog(e.getCause().getMessage(),DO_NOT_EXIT);      return false;    }  }  return true;}  }
class C{  public SQLTimeoutException(String reason,String sqlState,int vendorCode,Throwable cause){  super(reason,sqlState,vendorCode,cause);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public void onItemSelected(AdapterView<?> parent,View view,int position,long id){  mItemName=getString(CATALOG[position].nameId);  mSku=CATALOG[position].sku;  mManagedType=CATALOG[position].managed;}  }
class C{  public Boolean deletePackingPlan(String topologyName){  return awaitResult(delegate.deletePackingPlan(topologyName));}  }
class C{  public static void generateParkingFacilties(Scenario scenario){  ActivityFacilities facilities=scenario.getActivityFacilities();  for (  Person person : scenario.getPopulation().getPersons().values()) {    for (int i=0; i < person.getSelectedPlan().getPlanElements().size(); i++) {      if (person.getSelectedPlan().getPlanElements().get(i) instanceof Activity) {        Activity act=(Activity)person.getSelectedPlan().getPlanElements().get(i);        Id<ActivityFacility> facilityId=Id.create("facility_" + act.getLinkId().toString(),ActivityFacility.class);        if (!facilities.getFacilities().containsKey(facilityId)) {          ActivityFacilityImpl facility=(ActivityFacilityImpl)facilities.getFactory().createActivityFacility(facilityId,act.getCoord());          facilities.addActivityFacility(facility);          facility.createAndAddActivityOption(act.getType());          facility.createAndAddActivityOption("parkingArrival");          facility.createAndAddActivityOption("parkingDeparture");        }      }    }  }}  }
class C{  final Node firstDataNode(){  for (Node p=head; p != null; ) {    Object item=p.item;    if (p.isData) {      if (item != null && item != p)       return p;    } else     if (item == null)     break;    if (p == (p=p.next))     p=head;  }  return null;}  }
class C{  public static <V>PropertyValuesHolder ofObject(Property property,TypeEvaluator<V> evaluator,V... values){  PropertyValuesHolder pvh=new PropertyValuesHolder(property);  pvh.setObjectValues(values);  pvh.setEvaluator(evaluator);  return pvh;}  }
class C{  public void forceCloseAll(){synchronized (state) {    for (int i=state.activeConnections.size(); i > 0; i--) {      try {        PooledSocketConn conn=state.activeConnections.remove(i - 1);        conn.invalidate();        close(conn.getSocket());      } catch (      Exception e) {      }    }    for (int i=state.idleConnections.size(); i > 0; i--) {      try {        PooledSocketConn conn=state.idleConnections.remove(i - 1);        conn.invalidate();        close(conn.getSocket());      } catch (      Exception e) {      }    }  }}  }
class C{  public ForwardingResourceAccess(IReferenceFinder.IResourceAccess delegate,IResourceSetProvider resourceSetProvider){  this.delegate=delegate;  this.resourceSetProvider=resourceSetProvider;}  }
class C{  void resetViews(){  for (  Entry<IEntity,EntityView<IEntity>> entry : entities.entrySet()) {    entry.getValue().initialize(entry.getKey());  }}  }
class C{  public MGRecord(Name name,int dclass,long ttl,Name mailbox){  super(name,Type.MG,dclass,ttl,mailbox,"mailbox");}  }
class C{  protected boolean shouldSpawnJvm(){  return true;}  }
class C{  public void initExportedKeys(DatabaseMetaData dbmd) throws java.sql.SQLException {  ResultSet fkeys=dbmd.getExportedKeys(catalog,schema,this.sqlName);  while (fkeys.next()) {    String pktable=fkeys.getString(PKTABLE_NAME);    String pkcol=fkeys.getString(PKCOLUMN_NAME);    String fktable=fkeys.getString(FKTABLE_NAME);    String fkcol=fkeys.getString(FKCOLUMN_NAME);    String seq=fkeys.getString(KEY_SEQ);    Integer iseq=new Integer(seq);    getExportedKeys().addForeignKey(fktable,fkcol,pkcol,iseq);  }  fkeys.close();}  }
class C{  @Override public Object clone(){  TLongArrayList clone=null;  try {    clone=(TLongArrayList)super.clone();    clone._data=_data.clone();  } catch (  CloneNotSupportedException e) {  }  return clone;}  }
class C{  void onCancel(){  onUp();}  }
class C{  protected TaskImage calculateResultImage(ImageToProcess img,int subsample){  final Rect safeCrop=guaranteedSafeCrop(img.proxy,img.crop);  int resultWidth, resultHeight;  if (mThumbnailShape == ThumbnailShape.MAINTAIN_ASPECT_NO_INSET) {    resultWidth=safeCrop.width() / subsample;    resultHeight=safeCrop.height() / subsample;  } else {    final int radius=inscribedCircleRadius(safeCrop.width() / subsample,safeCrop.height() / subsample);    resultWidth=2 * radius;    resultHeight=2 * radius;  }  return new TaskImage(img.rotation,resultWidth,resultHeight,TaskImage.EXTRA_USER_DEFINED_FORMAT_ARGB_8888,null);}  }
class C{  @Override public void run(){  guidedTour.checkTour();}  }
class C{  @Override public void writeByte(byte b){  assert slice != null;  if (slice[upto] != 0) {    upto=pool.allocSlice(slice,upto);    slice=pool.buffer;    offset0=pool.byteOffset;    assert slice != null;  }  slice[upto++]=b;  assert upto != slice.length;}  }
class C{  public boolean lastPageFirst(){  return false;}  }
class C{  public static void json(String json){  json(TAG,json);}  }
class C{  public static Script transferObjectToScript(ScriptTO to){  Script s=new Script();  s.setComments(to.getComments());  s.setCreated(to.getCreated());  s.setCreator(to.getCreator());  s.setId(to.getId() != null ? to.getId() : 0);  s.setModified(to.getModified());  s.setName(to.getName());  s.setProductName(to.getProductName());  s.setRuntime(to.getRuntime());  for (  ScriptStepTO stepTo : to.getSteps()) {    s.addStep(transferObjectToScriptStep(stepTo));  }  return s;}  }
class C{  protected void jumpTo(String url) throws IOException {  LOGGER.trace("Jumping to URL " + url);  HttpMethod method=new GetMethod(url);  int execute=execute(method);  LOGGER.trace("Result status: " + execute);}  }
class C{  public String dump(String prefix){  StringWriter out=new StringWriter(256);  try {    dump(prefix,out);    return out.toString();  } catch (  IOException e) {    throw new RuntimeException("Unexpected I/O error while writing to StringWriter",e);  }}  }
class C{  public void sendSMS(String phoneNumber,String message) throws IOException {  impl.sendSMS(phoneNumber,message,false);}  }
class C{  public Configuration buildConfiguration(){  return new Configuration(this);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:59.022 -0500",hash_original_method="D017ED5C17A9CECD66D6C4AE3017BF4F",hash_generated_method="D017ED5C17A9CECD66D6C4AE3017BF4F") void _registerSpyStream(OutputStream spystream){  spyStream=spystream;}  }
class C{  @Override protected boolean isExported(ServiceRefAmp serviceRef){  return true;}  }
class C{  public void stopServer() throws Exception {  server.stop().join();}  }
class C{  private void layoutItem(MTabBarItem item,IStyleProvider styles){  int contentX=item.contentBounds.x + item.marginWidth;  int contentY=item.contentBounds.y + item.marginHeight;  int contentWidth=item.contentBounds.width - item.marginWidth - item.marginWidth;  int contentHeight=item.contentBounds.height - item.marginHeight - item.marginHeight;  if (item.imageVisible && item.textVisible) {    boolean itemVertical=(item.textPosition & (SWT.TOP | SWT.BOTTOM)) != 0;    boolean imageLeading=(item.textPosition & (SWT.RIGHT | SWT.BOTTOM)) != 0;    Point imageSize=item.imageVisible ? computeImageSize(item.getImage()) : new Point(0,0);    Point textSize=item.textVisible ? computeTextSize(item.getText(),item.font) : new Point(0,0);    int imageWHint=styles.getWidth(item,MTabBarItem.IMAGE,itemVertical ? contentWidth : SWT.DEFAULT);    int imageHHint=styles.getHeight(item,MTabBarItem.IMAGE,itemVertical ? SWT.DEFAULT : contentHeight);    int textWHint=styles.getWidth(item,MTabBarItem.TEXT,itemVertical ? contentWidth : SWT.DEFAULT);    int textHHint=styles.getHeight(item,MTabBarItem.TEXT,itemVertical ? SWT.DEFAULT : contentHeight);    Point imageAreaSize=item.imageVisible ? computePreferredSize(imageSize.x,imageSize.y,imageWHint,imageHHint) : new Point(0,0);    Point textAreaSize=item.textVisible ? computePreferredSize(textSize.x,textSize.y,textWHint,textHHint) : new Point(0,0);    if (itemVertical) {      if (imageHHint > 0 && textHHint < 0) {        textAreaSize.y=Math.max(0,contentHeight - imageAreaSize.y - item.vSpacing);      } else       if (imageHHint < 0 && textHHint > 0) {        imageAreaSize.y=Math.max(0,contentHeight - textAreaSize.y - item.vSpacing);      }    } else {      if (imageWHint > 0 && textWHint < 0) {        textAreaSize.x=Math.max(0,contentWidth - imageAreaSize.x - item.hSpacing);      } else       if (imageWHint < 0 && textWHint > 0) {        imageAreaSize.x=Math.max(0,contentWidth - textAreaSize.x - item.hSpacing);      }    }    imageSize=computeConstrainedSize(imageSize.x,imageSize.y,imageAreaSize.x,imageAreaSize.y);    textSize=computeConstrainedSize(textSize.x,textSize.y,textAreaSize.x,textAreaSize.y);    if (itemVertical) {      item.imageBounds.x=contentX + (contentWidth - imageSize.x) / 2;      item.imageBounds.y=contentY + (imageAreaSize.y - imageSize.y) / 2;      item.textBounds.x=contentX + (contentWidth - textSize.x) / 2;      item.textBounds.y=contentY + (textAreaSize.y - textSize.y) / 2;      if (imageLeading) {        item.textBounds.y+=imageAreaSize.y + item.vSpacing;      } else {        item.imageBounds.y+=textAreaSize.y + item.vSpacing;      }    } else {      item.imageBounds.x=contentX + (imageAreaSize.x - imageSize.x) / 2;      item.imageBounds.y=contentY + (contentHeight - imageSize.y) / 2;      item.textBounds.x=contentX + (textAreaSize.x - textSize.x) / 2;      item.textBounds.y=contentY + (textAreaSize.y - textSize.y) / 2;      if (imageLeading) {        item.textBounds.x+=imageAreaSize.x + item.hSpacing;      } else {        item.imageBounds.x+=textAreaSize.x + item.hSpacing;      }    }    item.imageBounds.width=imageSize.x;    item.imageBounds.height=imageSize.y;    item.textBounds.width=textSize.x;    item.textBounds.height=textSize.y;  } else   if (item.imageVisible) {    Point imageSize=computeImageSize(item.getImage());    Point constrainedSize=computeConstrainedSize(imageSize.x,imageSize.y,contentWidth,contentHeight);    item.imageBounds.x=contentX + (contentWidth - constrainedSize.x) / 2;    item.imageBounds.y=contentY + (contentHeight - constrainedSize.y) / 2;    item.imageBounds.width=constrainedSize.x;    item.imageBounds.height=constrainedSize.y;    item.textBounds.x=0;    item.textBounds.y=0;    item.textBounds.width=0;    item.textBounds.height=0;  } else   if (item.textVisible) {    Point textSize=computeTextSize(item.getText(),item.font);    Point constrainedSize=computeConstrainedSize(textSize.x,textSize.y,contentWidth,contentHeight);    item.imageBounds.x=0;    item.imageBounds.y=0;    item.imageBounds.width=0;    item.imageBounds.height=0;    item.textBounds.x=contentX + (contentWidth - constrainedSize.x) / 2;    item.textBounds.y=contentY + (contentHeight - constrainedSize.y) / 2;    item.textBounds.width=constrainedSize.x;    item.textBounds.height=constrainedSize.y;  } else {    item.imageBounds.x=0;    item.imageBounds.y=0;    item.imageBounds.width=0;    item.imageBounds.height=0;    item.textBounds.x=0;    item.textBounds.y=0;    item.textBounds.width=0;    item.textBounds.height=0;  }}  }
class C{  public List resolveAbstractDispatch(SootClass c,SootMethod m){  c.checkLevel(SootClass.HIERARCHY);  m.getDeclaringClass().checkLevel(SootClass.HIERARCHY);  checkState();  Iterator<SootClass> classesIt=null;  if (c.isInterface()) {    classesIt=getImplementersOf(c).iterator();    HashSet<SootClass> classes=new HashSet<SootClass>();    while (classesIt.hasNext())     classes.addAll(getSubclassesOfIncluding(classesIt.next()));    classesIt=classes.iterator();  } else   classesIt=getSubclassesOfIncluding(c).iterator();  ArraySet s=new ArraySet();  while (classesIt.hasNext()) {    SootClass cl=classesIt.next();    if (Modifier.isAbstract(cl.getModifiers()))     continue;    s.add(resolveConcreteDispatch(cl,m));  }  List l=new ArrayList();  l.addAll(s);  return Collections.unmodifiableList(l);}  }
class C{  private VirtualNAS copyUpdatedPropertiesInVNAS(final StorageSystem system,final IsilonAccessZone isiAccessZone,VirtualNAS vNas){  vNas.setStorageDeviceURI(system.getId());  vNas.setNasName(isiAccessZone.getName());  vNas.setNativeId(isiAccessZone.getId());  vNas.setBaseDirPath(isiAccessZone.getPath());  vNas.setNasState(VirtualNasState.LOADED.toString());  StringMap dbMetrics=vNas.getMetrics();  if (dbMetrics == null) {    dbMetrics=new StringMap();  }  setMaxDbMetricsAz(system,dbMetrics);  vNas.setMetrics(dbMetrics);  return vNas;}  }
class C{  @ObjectiveCName("isNotificationsEnabled") public boolean isNotificationsEnabled(){  return modules.getSettingsModule().isNotificationsEnabled();}  }
class C{  @ZeppelinApi public void run(int idx){  run(idx,interpreterContext);}  }
class C{  public void calculateStopStopInfoForAll(int timeBinSizeInSeconds,String fileName,int batchSize){  int startTime=Integer.MAX_VALUE;  int endTime=Integer.MIN_VALUE;  Map<String,Map<String,List<Tuple<String,String>>>> transitInfo=new HashMap<>();  for (  TransitLine transitLine : scenario.getTransitSchedule().getTransitLines().values()) {    if (transitLine.getId().toString().matches("^[A-Za-z]+"))     continue;    HashMap<String,List<Tuple<String,String>>> lineInfo=new HashMap<String,List<Tuple<String,String>>>();    transitInfo.put(transitLine.getId().toString(),lineInfo);    for (    TransitRoute route : transitLine.getRoutes().values()) {      List<Tuple<String,String>> combinations=new ArrayList<>();      lineInfo.put(route.getId().toString(),combinations);      for (int s=0; s < route.getStops().size() - 1; s++) {        combinations.add(new Tuple<String,String>(route.getStops().get(s).getStopFacility().getId().toString(),route.getStops().get(s + 1).getStopFacility().getId().toString()));        for (        Departure departure : route.getDepartures().values()) {          startTime=(int)min(startTime,departure.getDepartureTime());          endTime=(int)max(endTime,departure.getDepartureTime());        }      }    }  }  endTime+=3600;  int totalTime=endTime - startTime;  int numBins=totalTime / timeBinSizeInSeconds;  ArrayList<String> fromStops=new ArrayList<>(), toStops=new ArrayList<>(), routes=new ArrayList<>(), lines=new ArrayList<>(), times=new ArrayList<>();  int i=0, batchNumber=0;  for (  String l : transitInfo.keySet()) {    for (    String r : transitInfo.get(l).keySet()) {      for (      Tuple<String,String> tuple : transitInfo.get(l).get(r)) {        for (int j=0; j < numBins; j++) {          if (i % batchSize == 0 && i > 0) {            String[] from=fromStops.toArray(new String[i]);            String[] to=toStops.toArray(new String[i]);            String[] route=routes.toArray(new String[i]);            String[] line=lines.toArray(new String[i]);            String[] time=times.toArray(new String[i]);            List<StopToStopInfo> stopToStopInfos=calculateStopStopInfo(from,to,route,line,time);            if (batchNumber == 0)             writeReport(fileName,false,stopToStopInfos); else             writeReport(fileName,true,stopToStopInfos);            fromStops=new ArrayList<>();            toStops=new ArrayList<>();            routes=new ArrayList<>();            lines=new ArrayList<>();            times=new ArrayList<>();            i=0;            batchNumber++;          }          fromStops.add(tuple.getFirst());          toStops.add(tuple.getSecond());          routes.add(r);          lines.add(l);          times.add("" + (j * timeBinSizeInSeconds));          i++;        }      }    }  }  String[] from=fromStops.toArray(new String[i]);  String[] to=toStops.toArray(new String[i]);  String[] route=routes.toArray(new String[i]);  String[] line=lines.toArray(new String[i]);  String[] time=times.toArray(new String[i]);  List<StopToStopInfo> stopToStopInfos=calculateStopStopInfo(from,to,route,line,time);  if (batchNumber == 0)   writeReport(fileName,false,stopToStopInfos); else   writeReport(fileName,true,stopToStopInfos);}  }
class C{  public void loadLocal(final int local){  loadInsn(getLocalType(local),local);}  }
class C{  public static List<Query> parseQueryStrings(SolrQueryRequest req,String[] queries) throws SyntaxError {  if (null == queries || 0 == queries.length)   return null;  List<Query> out=new ArrayList<>(queries.length);  for (  String q : queries) {    if (null != q && 0 != q.trim().length()) {      out.add(QParser.getParser(q,null,req).getQuery());    }  }  return out;}  }
class C{  protected Instances makeTestDataset(int seed,int numInstances,int numNominal,int numNumeric,int numString,int numDate,int numRelational,int numClasses,int classType,boolean multiInstance) throws Exception {  return makeTestDataset(seed,numInstances,numNominal,numNumeric,numString,numDate,numRelational,numClasses,classType,TestInstances.CLASS_IS_LAST,multiInstance);}  }
class C{  private static int med3(int a,int b,int c,IntComparator comp){  int ab=comp.compare(a,b);  int ac=comp.compare(a,c);  int bc=comp.compare(b,c);  return (ab < 0 ? (bc < 0 ? b : ac < 0 ? c : a) : (bc > 0 ? b : ac > 0 ? c : a));}  }
class C{  public CompletionProposalComparator(){  fOrderAlphabetically=false;}  }
class C{  public QualifiedAttributeValueExp(String className,String attr){  super(attr);  this.className=className;}  }
class C{  public static int compare(boolean left,double right){  return compare(left ? 1d : 0d,right);}  }
class C{  private void doSaves(){  Workspace workspace=desktop.getWorkspace();  WorkspaceSerializer serializer=new WorkspaceSerializer(workspace);  try {    FileOutputStream ostream=new FileOutputStream("workspace.zip");    try {      serializer.serialize(ostream);    }  finally {      ostream.close();    }  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public ComponentBuilder strikethrough(Boolean strikethrough){  this.current.setStrikethrough(strikethrough);  return this;}  }
class C{  public static XmlWriter of(BufferedSink source){  return new XmlWriter(source);}  }
class C{  public void updateSkills(){  List<Entity> activeFighters=getActiveSubEntities().orElse(Collections.emptyList());  if (activeFighters.isEmpty()) {    return;  }  int pilotingTotal=0;  int gunneryTotal=0;  int gunneryLTotal=0;  int gunneryMTotal=0;  int gunneryBTotal=0;  for (  Entity fighter : activeFighters) {    pilotingTotal+=fighter.getCrew().getPiloting();    gunneryTotal+=fighter.getCrew().getGunnery();    gunneryLTotal+=fighter.getCrew().getGunneryL();    gunneryMTotal+=fighter.getCrew().getGunneryM();    gunneryBTotal+=fighter.getCrew().getGunneryB();  }  getCrew().setPiloting(pilotingTotal / activeFighters.size());  getCrew().setGunnery(gunneryTotal / activeFighters.size());  getCrew().setGunneryL(gunneryLTotal / activeFighters.size());  getCrew().setGunneryM(gunneryMTotal / activeFighters.size());  getCrew().setGunneryB(gunneryBTotal / activeFighters.size());}  }
class C{  public ImageException(String message,ImageExceptionBean bean,Throwable cause){  super(message,bean,cause);  this.bean=bean;}  }
class C{  public Boolean isInteractiveGuestOperationsReady(){  return interactiveGuestOperationsReady;}  }
class C{  protected void engineInit(SecureRandom random){  this.random=random;}  }
class C{  public int length(){  return nameValuePairs.size();}  }
class C{  public static int compare(double d1,double d2){  if (FloatingPoint.lesser(d1,d2)) {    return -1;  }  if (FloatingPoint.same(d1,d2)) {    return 0;  }  return +1;}  }
class C{  public void onPackageDisappeared(String packageName,int reason){}  }
class C{  public int lineToY(int line){  FontMetrics fm=painter.getFontMetrics();  return (line - firstLine) * fm.getHeight() - (fm.getLeading() + fm.getMaxDescent());}  }
class C{  public String toString(){  String iResult;  if (iE == iInfExp) {    iResult="1.0e+Inf";  } else   if (iE == -iInfExp) {    iResult="1.0e-Inf";  } else {    double iM=(Math.log(iF) + Math.log(iRange) * (double)iE) / Math.log(10.0);    long iExp=(long)Math.floor(iM);    iM-=Math.floor(iM);    float iFM=(float)Math.exp(iM * Math.log(10.0));    if (iFM >= 10.0F) {      iFM=1.0F;      iExp++;    }    iResult=String.valueOf(iFM) + "e";    if (iExp < 0)     iResult+=String.valueOf(iExp); else     iResult+="+" + String.valueOf(iExp);  }  return iResult;}  }
class C{  public FileSystemLoopException(String file){  super(file);}  }
class C{  private void saveCacheXmlForReconnect(){  boolean sharedConfigEnabled=services.getConfig().getDistributionConfig().getUseSharedConfiguration();  saveCacheXmlForReconnect(sharedConfigEnabled);}  }
class C{  public boolean useBadgeLabel(){  return 0 != (mSearchMode & SEARCH_MODE_BADGE_LABEL);}  }
class C{  protected BalancedBinaryNode<K,V> construct(K key,V value,BalancedBinaryNode<K,V> parent){  return new BalancedBinaryNode<K,V>(key,value,parent);}  }
class C{  public final GVector zero(){  for (int i=0; i < length; i++) {    this.values[i]=0.0;  }  return this;}  }
class C{  protected void fireEvent(IoFilterEvent event){  executor.execute(event);}  }
class C{  public void generate(XmlWriter w,ExtensionProfile extProfile) throws IOException {  w.simpleElement(Namespaces.gSpreadNs,TAG_NAME,null,String.valueOf(count));}  }
class C{  public DownwardVisitor(final Mask mask,final RegionFunction function,final int baseY){  super(mask,function);  checkNotNull(mask);  this.baseY=baseY;  final Collection<Vector> directions=this.getDirections();  directions.clear();  directions.add(new Vector(1,0,0));  directions.add(new Vector(-1,0,0));  directions.add(new Vector(0,0,1));  directions.add(new Vector(0,0,-1));  directions.add(new Vector(0,-1,0));}  }
class C{  public int append(byte[] b,int offset,int length){  int oldLength=bytesLength;  bytesLength+=length;  int newCapacity=capacityPolicy.ensureCapacity(bytesLength,bytes.length);  if (newCapacity > bytes.length) {    byte[] newB=new byte[newCapacity];    System.arraycopy(bytes,0,newB,0,bytes.length);    bytes=newB;  }  System.arraycopy(b,offset,bytes,oldLength,length);  normalizeCommandLength();  return bytesLength;}  }
class C{  private static File updateWebstartPluginsCache(){  final String homeUrl=System.getProperty(RapidMiner.PROPERTY_HOME_REPOSITORY_URL);  String dirName;  try {    final byte[] md5hash=MessageDigest.getInstance("MD5").digest(homeUrl.getBytes());    dirName=DatatypeConverter.printBase64Binary(md5hash);  } catch (  NoSuchAlgorithmException e) {    LogService.getRoot().log(Level.WARNING,I18N.getMessage(LogService.getRoot().getResourceBundle(),"com.rapidminer.tools.plugin.Plugin.hashing_remote_url_error",e),e);    return null;  }  File cacheDir=new File(ManagedExtension.getUserExtensionsDir(),dirName);  cacheDir.mkdirs();  File readmeFile=new File(cacheDir,"README.txt");  try {    Tools.writeTextFile(readmeFile,"This directory contains plugins downloaded from RapidMiner Server instance \n" + "  " + homeUrl + ".\n"+ "These plugins are only used if RapidMiner is started via WebStart from this \n"+ "server. You can delete the directory if you no longer need the cached plugins.");  } catch (  IOException e1) {    LogService.getRoot().log(Level.WARNING,I18N.getMessage(LogService.getRoot().getResourceBundle(),"com.rapidminer.tools.plugin.Plugin.creating_file_error",readmeFile,e1),e1);  }  Document pluginsDoc;  try {    URL pluginsListUrl=new URL(homeUrl + "/RAWS/dependencies/resources.xml");    pluginsDoc=XMLTools.parse(pluginsListUrl.openStream());  } catch (  Exception e) {    LogService.getRoot().log(Level.WARNING,I18N.getMessage(LogService.getRoot().getResourceBundle(),"com.rapidminer.tools.plugin.Plugin.loading_extensions_list_error",e),e);    return null;  }  Set<File> cachedFiles=new HashSet<>();  NodeList pluginElements=pluginsDoc.getElementsByTagName("extension");  boolean errorOccurred=false;  for (int i=0; i < pluginElements.getLength(); i++) {    Element pluginElem=(Element)pluginElements.item(i);    String pluginName=pluginElem.getTextContent();    String pluginVersion=pluginElem.getAttribute("version");    File pluginFile=new File(cacheDir,pluginName + "-" + pluginVersion+ ".jar");    cachedFiles.add(pluginFile);    if (pluginFile.exists()) {      LogService.getRoot().log(Level.CONFIG,"com.rapidminer.tools.plugin.Plugin.extension_found_cache_exists",pluginName);    } else {      LogService.getRoot().log(Level.CONFIG,"com.rapidminer.tools.plugin.Plugin.extension_found_downloading",pluginName);      try {        URL pluginUrl=new URL(homeUrl + "/RAWS/dependencies/plugins/" + pluginName);        Tools.copyStreamSynchronously(WebServiceTools.openStreamFromURL(pluginUrl),new FileOutputStream(pluginFile),true);      } catch (      Exception e) {        LogService.getRoot().log(Level.WARNING,I18N.getMessage(LogService.getRoot().getResourceBundle(),"com.rapidminer.tools.plugin.Plugin.downloading_extension_error",e),e);        errorOccurred=true;      }    }  }  if (!errorOccurred) {    for (    File file : cacheDir.listFiles()) {      if (file.getName().equals("README.txt")) {        continue;      }      if (!cachedFiles.contains(file)) {        LogService.getRoot().log(Level.CONFIG,"com.rapidminer.tools.plugin.Plugin.deleting_obsolete_file",file);        file.delete();      }    }  }  return cacheDir;}  }
class C{  public Object put(String name,Object value) throws IllegalArgumentException, ClassCastException {  if (bean != null) {    Object oldValue=get(name);    Method method=getWriteMethod(name);    if (method == null) {      throw new IllegalArgumentException("The bean of type: " + bean.getClass().getName() + " has no property called: "+ name);    }    try {      Object[] arguments=createWriteMethodArguments(method,value);      method.invoke(bean,arguments);      Object newValue=get(name);      firePropertyChange(name,oldValue,newValue);    } catch (    InvocationTargetException e) {      logInfo(e);      throw new IllegalArgumentException(e.getMessage());    }catch (    IllegalAccessException e) {      logInfo(e);      throw new IllegalArgumentException(e.getMessage());    }    return oldValue;  }  return null;}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public TIFFDecodeParam(){}  }
class C{  public String toStringRep(){  StringBuffer sb=new StringBuffer();  sb.append(x);  sb.append(',');  sb.append(y);  sb.append(',');  sb.append(width);  sb.append(',');  sb.append(height);  return sb.toString();}  }
class C{  @Override public List<double[]> generate(int count){  return Collections.unmodifiableList(points);}  }
class C{  protected Anonymous_key_1_Impl(){  super();}  }
class C{  public NetMapListenerSupport(){  this(null);}  }
class C{  public static int readFully(InputStream inStr,byte[] buf,int off,int len) throws IOException {  int totalRead=0;  while (totalRead < len) {    int numRead=inStr.read(buf,off + totalRead,len - totalRead);    if (numRead < 0) {      break;    }    totalRead+=numRead;  }  return totalRead;}  }
class C{  @Override public int parse(char[] buf,int start,int end,T data){  int left_hit=left.parse(buf,start,end,data);  if (left_hit != NO_MATCH) {    int right_hit=right.parse(buf,start,end,data);    if (right_hit == NO_MATCH) {      return left_hit;    }  }  return NO_MATCH;}  }
class C{  private void updateDatabaseFromHeaders(State state,InnerState innerState){  mInfo.mETag=innerState.mHeaderETag;  mDB.updateDownload(mInfo);}  }
class C{  public synchronized void insert(ECKey key){  insert(key.getPubKey());  insert(key.getPubKeyHash());}  }
class C{  public T caseStrictModeRelevant(StrictModeRelevant object){  return null;}  }
class C{  private boolean initNAL(){  boolean ret=initOneNAL();  if (ret) {    ret=initOneNAL();  }  return ret;}  }
class C{  void invalidConversion(Converter converter,Object value){  String valueType=(value == null ? "null" : value.getClass().getName());  String msg="Converting '" + valueType + "' value '"+ value+ "'";  try {    Object result=converter.convert(getExpectedType(),value);    fail(msg + ", expected ConversionException, but result = '" + result+ "'");  } catch (  ConversionException ex) {  }}  }
class C{  protected static void validate(Map<ScheduleUnit,SortedSet<Integer>> unitValues){  if ((!unitValues.containsKey(ScheduleUnit.MONTHS)) || (!unitValues.containsKey(ScheduleUnit.DAYS_OF_WEEK)) || (!unitValues.containsKey(ScheduleUnit.HOURS))|| (!unitValues.containsKey(ScheduleUnit.MINUTES))|| (!unitValues.containsKey(ScheduleUnit.DAYS_OF_MONTH))) {    throw new IllegalArgumentException("Incomplete information for schedule specification, only the following keys are supplied=" + Arrays.toString(unitValues.keySet().toArray()));  }  for (  ScheduleUnit unit : ScheduleUnit.values()) {    if ((unit == ScheduleUnit.SECONDS) && (!unitValues.containsKey(unit))) {      continue;    }    if (unitValues.get(unit) == null) {      continue;    }    SortedSet<Integer> values=unitValues.get(unit);    for (    Integer value : values) {      if ((value < unit.min()) || (value > unit.max())) {        throw new IllegalArgumentException("Invalid value found for schedule unit, value of " + value + " is not valid for unit "+ unit);      }    }  }}  }
class C{  public int format(boolean val,byte[] array){  return format(val,array,0,array.length);}  }
class C{  public void deselectAll(){  checkWidget();  table.deselectAll();}  }
class C{  public static float scrollToScreen(float x,float warpSize){  if (x <= 0)   return 0;  if (x >= 2 * warpSize)   return x - warpSize;  x=(x - warpSize) / (2.0f * warpSize) + 0.5f;  return x * x * warpSize;}  }
class C{  public static Activity scanForActivity(Context context){  if (context == null)   return null;  if (context instanceof Activity) {    return (Activity)context;  } else   if (context instanceof ContextWrapper) {    return scanForActivity(((ContextWrapper)context).getBaseContext());  }  return null;}  }
class C{  public ZoneRulesException(String message,Throwable cause){  super(message,cause);}  }
class C{  public void processSequences(boolean includeQuality,boolean includeNames) throws IOException {  final SdfWriter sdfWriter=new SdfWriter(mOutputDir,mSizeLimit,mPrereadType,mDataSource.hasQualityData() && includeQuality,includeNames,mCompressed,mDataSource.type());  processSequences(sdfWriter,null);}  }
class C{  public boolean deleteFlvRecording(String SID,Long flvRecordingId) throws AxisFault {  try {    Long users_id=sessionManagement.checkSession(SID);    Long user_level=userManagement.getUserLevelByID(users_id);    if (authLevelManagement.checkWebServiceLevel(user_level)) {      return flvRecordingDao.deleteFlvRecording(flvRecordingId);    }  } catch (  Exception err) {    log.error("[deleteFlvRecording] ",err);    throw new AxisFault(err.getMessage());  }  return false;}  }
class C{  public void futureShortResult(long futPtr,int res){  enter();  try {    PlatformCallbackUtils.futureShortResult(envPtr,futPtr,res);  }  finally {    leave();  }}  }
class C{  public int count(){  return n;}  }
class C{  @RequestMapping(value="/businessObjectFormats/namespaces/{namespace}/businessObjectDefinitionNames/{businessObjectDefinitionName}" + "/businessObjectFormatUsages/{businessObjectFormatUsage}/businessObjectFormatFileTypes/{businessObjectFormatFileType}" + "/businessObjectFormatVersions/{businessObjectFormatVersion}",method=RequestMethod.PUT,consumes={"application/xml","application/json"}) @Secured(SecurityFunctions.FN_BUSINESS_OBJECT_FORMATS_PUT) public BusinessObjectFormat updateBusinessObjectFormat(@PathVariable("namespace") String namespace,@PathVariable("businessObjectDefinitionName") String businessObjectDefinitionName,@PathVariable("businessObjectFormatUsage") String businessObjectFormatUsage,@PathVariable("businessObjectFormatFileType") String businessObjectFormatFileType,@PathVariable("businessObjectFormatVersion") Integer businessObjectFormatVersion,@RequestBody BusinessObjectFormatUpdateRequest request){  BusinessObjectFormatKey businessObjectFormatKey=new BusinessObjectFormatKey(namespace,businessObjectDefinitionName,businessObjectFormatUsage,businessObjectFormatFileType,businessObjectFormatVersion);  return businessObjectFormatService.updateBusinessObjectFormat(businessObjectFormatKey,request);}  }
class C{  private boolean isUndeclared(AttributeKey<?> key){  return (metadata == null) || !metadata.isDeclared(key);}  }
class C{  public float nextTabStop(float x,int tabOffset){  if (tabSize == 0) {    return x;  }  int ntabs=(((int)x) - tabBase) / tabSize;  return tabBase + ((ntabs + 1) * tabSize);}  }
class C{  void close(){  _client.destroy();}  }
class C{  public static int translateStatusCode(int statusCode,Rule rule,Logger log){  Integer translatedStatus=null;  if (rule.getTranslateStatus() != null) {    for (    Map.Entry<Pattern,Integer> entry : rule.getTranslateStatus().entrySet()) {      if (entry.getKey().matcher("" + statusCode).matches()) {        if (log != null) {          log.warn("Translated status " + statusCode + " to "+ entry.getValue());        }        translatedStatus=entry.getValue();        break;      }    }  }  if (translatedStatus != null) {    return translatedStatus;  } else {    return statusCode;  }}  }
class C{  protected static void usage(){  println("HOST PING UTILITY (\"hostping\")");  println("Usage: hostping [options] hostname");  println("Options:");  println("  -help          Print usage and exit");  println("  -method name   Ping method to use (default=use all methods)");  println("  -log4j file    Log4j properties file (default=suppress all below WARN)");  println("  -timeout secs  Time out to wait for replication (default=60)");  println("  -verbose       Print verbose error output");}  }
class C{  static public PVector sub(PVector v1,PVector v2){  return sub(v1,v2,null);}  }
class C{  protected void runTest() throws Throwable {  assertNotNull("TestCase.fName cannot be null",fName);  Method runMethod=null;  try {    runMethod=getClass().getMethod(fName,(Class[])null);  } catch (  NoSuchMethodException e) {    fail("Method \"" + fName + "\" not found");  }  if (!Modifier.isPublic(runMethod.getModifiers())) {    fail("Method \"" + fName + "\" should be public");  }  try {    runMethod.invoke(this);  } catch (  InvocationTargetException e) {    e.fillInStackTrace();    throw e.getTargetException();  }catch (  IllegalAccessException e) {    e.fillInStackTrace();    throw e;  }}  }
class C{  public static LangProfile loadFromWikipediaAbstract(String lang,File file) throws LangDetectException {  LangProfile profile=new LangProfile(lang);  BufferedReader br=null;  try {    InputStream is=new FileInputStream(file);    if (file.getName().endsWith(".gz"))     is=new GZIPInputStream(is);    br=new BufferedReader(new InputStreamReader(is,"utf-8"));    TagExtractor tagextractor=new TagExtractor("abstract",100);    XMLStreamReader reader=null;    try {      XMLInputFactory factory=XMLInputFactory.newInstance();      reader=factory.createXMLStreamReader(br);      while (reader.hasNext()) {switch (reader.next()) {case XMLStreamReader.START_ELEMENT:          tagextractor.setTag(reader.getName().toString());        break;case XMLStreamReader.CHARACTERS:      tagextractor.add(reader.getText());    break;case XMLStreamReader.END_ELEMENT:  String text=tagextractor.closeTag();if (text != null) profile.update(text);break;}}} catch (XMLStreamException e) {throw new LangDetectException(ErrorCode.TrainDataFormatError,"Training database file '" + file.getName() + "' is an invalid XML.");} finally {try {if (reader != null) reader.close();} catch (XMLStreamException e) {}}System.out.println(lang + ":" + tagextractor.count());} catch (IOException e) {throw new LangDetectException(ErrorCode.CantOpenTrainData,"Can't open training database file '" + file.getName() + "'");} finally {try {if (br != null) br.close();} catch (IOException e) {}}return profile;}  }
class C{  public void readTransportSystems(final int[] columnsIndices,final BufferedReader reader) throws IOException {  String line=reader.readLine();  while (line != null && line.length() > 0) {    line=reader.readLine();  }}  }
class C{  @Override public void run(){  amIActive=true;  WhiteboxRaster image;  WhiteboxRaster image2;  int cols=0;  int rows=0;  double noData=-32768;  int numImages;  double z;  float progress=0;  int col, row;  int a, b, i;  String inputFilesString=null;  String[] imageFiles;  double[] imageSDs;  String[] shortNames=null;  String[] units=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  if (numImages < 1) {    showFeedback("At least one image must be specified for an image correlation.");    return;  }  try {    imageSDs=new double[numImages];    shortNames=new String[numImages];    units=new String[numImages];    double[] data;    for (a=0; a < numImages; a++) {      updateProgress("Image " + (a + 1) + ", Calculating image averages:",-1);      image=new WhiteboxRaster(imageFiles[a],"r");      noData=image.getNoDataValue();      rows=image.getNumberRows();      cols=image.getNumberColumns();      shortNames[a]=image.getShortHeaderFile();      if (!image.getZUnits().toLowerCase().equals("not specified")) {        units[a]=image.getZUnits();      } else {        units[a]="";      }      double imageTotal=0;      double imageN=0;      for (row=0; row < rows; row++) {        data=image.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] != noData) {            imageTotal+=data[col];            imageN++;          }        }        if (cancelOp) {          cancelOperation();          return;        }      }      double imageAverage=imageTotal / imageN;      double totalDeviation=0;      for (row=0; row < rows; row++) {        data=image.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] != noData) {            totalDeviation+=(data[col] - imageAverage) * (data[col] - imageAverage);          }        }        if (cancelOp) {          cancelOperation();          return;        }      }      imageSDs[a]=Math.sqrt(totalDeviation / (imageN - 1));      image.close();      progress=(int)(100f * (a + 1) / numImages);      updateProgress("Image " + (a + 1) + ", Calculating image average:",(int)progress);    }    String retstr=null;    retstr="IMAGE STANDARD DEVIATION\n";    DecimalFormat df=new DecimalFormat("0.0000");    for (a=0; a < numImages; a++) {      retstr=retstr + "\n" + shortNames[a]+ "\t"+ df.format(imageSDs[a]);    }    returnData(retstr);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void onFailure(int statusCode,Header[] headers,Throwable throwable,JSONObject errorResponse){  AsyncHttpClient.log.w(LOG_TAG,"onFailure(int, Header[], Throwable, JSONObject) was not overriden, but callback was received",throwable);}  }
class C{  public static String byteArrayToJsonString(byte[] bytes){  StringBuilder sb=new StringBuilder(bytes.length * 2);  for (  byte b : bytes) {    if (b >= 32 && b < 127) {      char c=(char)b;      if (c != '%' && c != '\\' && c != '\"') {        sb.append(c);        continue;      }    }    sb.append(String.format("%%%02x",b));  }  return sb.toString();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:09.241 -0500",hash_original_method="A39723146C675E0E04F715D6E89297CC",hash_generated_method="89EE2DA80B5178A23B90617E1CD2B725") public void addOval(RectF oval,Direction dir){  if (oval == null) {    throw new NullPointerException("need oval parameter");  }  isSimplePath=false;  addTaint(oval.getTaintInt() + dir.nativeInt);}  }
class C{  public static void registerColourHandlers(){  final BlockColors blockColors=MINECRAFT.getBlockColors();  final ItemColors itemColors=MINECRAFT.getItemColors();  registerBlockColourHandlers(blockColors);  registerItemColourHandlers(blockColors,itemColors);}  }
class C{  public void testFiveNodesEventsAfterLeaderKill() throws Throwable {  testEventsAfterLeaderKill(5);}  }
class C{  private void startMonitorThread(){  monitorThread=new Thread(new QueueMonitor(resourceManager));  monitorThread.start();  LOG.debug("The monitor thread has started.");}  }
class C{  void computeMinMaxScroll(int itemCount){  mTaskProgressMap.clear();  if (itemCount < 1) {    mMinScrollP=mMaxScrollP=0;    return;  }  int taskHeight=mTaskRect.height();  float pAtBottomOfStackRect=screenYToCurveProgress(mStackVisibleRect.bottom);  float pWithinAffiliateTop=screenYToCurveProgress(mStackVisibleRect.bottom - mWithinAffiliationOffset);  float scale=curveProgressToScale(pWithinAffiliateTop);  int scaleYOffset=(int)(((1f - scale) * taskHeight) / 2);  pWithinAffiliateTop=screenYToCurveProgress(mStackVisibleRect.bottom - mWithinAffiliationOffset + scaleYOffset);  float pWithinAffiliateOffset=pAtBottomOfStackRect - pWithinAffiliateTop;  float pBetweenAffiliateOffset=pAtBottomOfStackRect - screenYToCurveProgress(mStackVisibleRect.bottom - mBetweenAffiliationOffset);  float pTaskHeightOffset=pAtBottomOfStackRect - screenYToCurveProgress(mStackVisibleRect.bottom - taskHeight);  float pNavBarOffset=pAtBottomOfStackRect - screenYToCurveProgress(mStackVisibleRect.bottom - (mStackVisibleRect.bottom - mStackRect.bottom));  float pAtBackMostCardTop=0.5f;  float pAtFrontMostCardTop=pAtBackMostCardTop;  for (int i=0; i < itemCount; i++) {    mTaskProgressMap.put(i,pAtFrontMostCardTop);    if (i < (itemCount - 1)) {      float pPeek=pBetweenAffiliateOffset;      pAtFrontMostCardTop+=pPeek;    }  }  mMaxScrollP=pAtFrontMostCardTop - ((1f - pTaskHeightOffset - pNavBarOffset));  mMinScrollP=itemCount == 1 ? Math.max(mMaxScrollP,0f) : 0f;  mInitialScrollP=Math.max(0,pAtFrontMostCardTop);}  }
class C{  @Override public void dispose(){  Gdx.app.log(TAG,"Application Listener Disposed of");  shapeRenderer.dispose();}  }
class C{  public void update(SimulationThread simulationThread){  if (simulationThread.isCanceled()) {    frame.setStatus("Task canceled.");  } else   if (frame.simulationPaused()) {    frame.setStatus("Task paused.");  } else {    frame.setStatus("Task completed.");  }}  }
class C{  static void println(String key,Object[] arguments){  System.out.println(format(key,arguments));}  }
class C{  protected int indexOf(String content,String needle,int offset){  int index;  while ((index=content.indexOf(needle,offset)) != -1) {    String text=getLine(content,index).trim();    if (text.startsWith(needle) || text.endsWith(needle)) {      break;    } else {      offset=index + 1;    }  }  return index;}  }
class C{  public GuacamoleServerException(String message){  super(message);}  }
class C{  public Vector4d mul(Matrix4x3fc mat){  return mul(mat,this);}  }
class C{  public static String createRGBAString(Color c,double opacity){  return "rgba(" + (c.getRed() * 255) + ","+ (c.getGreen() * 255)+ ","+ (c.getBlue() * 255)+ ", "+ opacity+ ");";}  }
class C{  private float[][] createData(){  float[][] result=new float[2][1000];  for (int i=0; i < result[0].length; i++) {    float x=(float)i + 100;    result[0][i]=x;    result[1][i]=100 + (float)Math.random() * 1000;  }  return result;}  }
class C{  public void scale(double k){  x*=k;  y*=k;  z*=k;}  }
class C{  @SuppressWarnings("unchecked") private static int countRunAndMakeAscending(Object[] a,int lo,int hi){  if (DEBUG)   assert lo < hi;  int runHi=lo + 1;  if (runHi == hi)   return 1;  if (((Comparable)a[runHi++]).compareTo(a[lo]) < 0) {    while (runHi < hi && ((Comparable)a[runHi]).compareTo(a[runHi - 1]) < 0)     runHi++;    reverseRange(a,lo,runHi);  } else {    while (runHi < hi && ((Comparable)a[runHi]).compareTo(a[runHi - 1]) >= 0)     runHi++;  }  return runHi - lo;}  }
class C{  VPlexStorageViewInfo addVirtualVolumesToStorageView(String viewName,String clusterName,Map<String,Integer> virtualVolumeMap) throws VPlexApiException {  VPlexApiDiscoveryManager discoveryMgr=_vplexApiClient.getDiscoveryManager();  VPlexStorageViewInfo storageViewInfo=discoveryMgr.findStorageViewOnCluster(viewName,clusterName,false);  if (storageViewInfo == null) {    throw VPlexApiException.exceptions.couldNotFindStorageView(viewName);  }  addStorageViewVirtualVolumes(storageViewInfo,virtualVolumeMap);  return storageViewInfo;}  }
class C{  public boolean isIntegrate(){  if (integrate == null) {    return false;  } else {    return integrate;  }}  }
class C{  @Nonnull public static <T>Observable.Operator<T,T> niceErrorOperator(){  final StackTraceElement[] stackTraceElements=Thread.currentThread().getStackTrace();  return niceErrorOperator(null,stackTraceElements);}  }
class C{  public boolean isSetCursorRequest(){  return this.cursorRequest != null;}  }
class C{  public QRDecomposition qr(final boolean pivot){  return new QRDecomposition(this,pivot);}  }
class C{  public EaseOut(){}  }
