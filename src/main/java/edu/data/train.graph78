class C{  public static java.sql.Date parseDate(String value){  return Helper.dateFromString(value);}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if ((ui != null) && (getUIClassID().equals(uiClassID))) {    ui.installUI(this);  }  if (getToolTipText() == null && haveRegistered) {    ToolTipManager.sharedInstance().registerComponent(this);  }}  }
class C{  public boolean hasEvaluatedSizeArrays(){  return this.arraySizeEvaluators != null;}  }
class C{  public void showAzimuth(boolean onOff){  showAngle=onOff;}  }
class C{  private void updateAnnotationModel(AnnotationModel annotationModel,final Annotation[] annotationsToRemove,final Map<Annotation,Position> annotationsToAdd){synchronized (annotationModel.getLockObject()) {    annotationModel.replaceAnnotations(annotationsToRemove,annotationsToAdd);  }}  }
class C{  protected void notifyScrollingListenersAboutEnd(){  for (  OnWheelScrollListener listener : scrollingListeners) {    listener.onScrollingFinished(this);  }}  }
class C{  public void zipStorageData(LocalStorageData localStorageData,String zipFileName) throws BusinessException, IOException {  if (!localStorageData.isFullyDownloaded()) {    throw new BusinessException("Zip data for the storage " + localStorageData + ".",StorageErrorCodeEnum.STORAGE_IS_NOT_DOWNLOADED);  } else {    Path zipPath=Paths.get(zipFileName);    if (Files.exists(zipPath)) {      Files.delete(zipPath);    }    try {      super.zipStorageData(localStorageData,zipPath);    } catch (    IOException e) {      Files.deleteIfExists(zipPath);      throw e;    }  }}  }
class C{  public boolean isStreamableFilter(){  int i;  if (!m_StreamableChecked) {    m_Streamable=true;    m_StreamableChecked=true;    for (i=0; i < getFilters().length; i++) {      if (getFilter(i) instanceof MultiFilter) {        m_Streamable=((MultiFilter)getFilter(i)).isStreamableFilter();      } else       if (getFilter(i) instanceof StreamableFilter) {        m_Streamable=true;      } else {        m_Streamable=false;      }      if (!m_Streamable) {        break;      }    }    if (getDebug()) {      System.out.println("Streamable: " + m_Streamable);    }  }  return m_Streamable;}  }
class C{  public TermCompletionAnalyzer(Pattern wordBoundary,Pattern subWordBoundary){  this(wordBoundary,subWordBoundary,null,true);}  }
class C{  public void put(String key,File file,String contentType) throws FileNotFoundException {  put(key,file,contentType,null);}  }
class C{  public static boolean equalsIncludingNaN(float x,float y,float eps){  return equalsIncludingNaN(x,y) || (FastMath.abs(y - x) <= eps);}  }
class C{  public Gas registerFluid(){  if (fluid == null) {    if (FluidRegistry.getFluid(getName()) == null) {      fluid=new Fluid(getName()).setGaseous(true);      FluidRegistry.registerFluid(fluid);    } else {      fluid=FluidRegistry.getFluid(getName());    }  }  return this;}  }
class C{  private void validateLDAPGroupProperties(AuthnProvider authnProvider){  if (authnProvider == null) {    _log.error("Invalid authentication provider");    return;  }  boolean isGroupObjectClassesEmpty=CollectionUtils.isEmpty(authnProvider.getGroupObjectClassNames());  boolean isGroupMemberAttributesEmpty=CollectionUtils.isEmpty(authnProvider.getGroupMemberAttributeTypeNames());  if (isGroupObjectClassesEmpty ^ isGroupMemberAttributesEmpty) {    String param="Group object classes";    if (!isGroupObjectClassesEmpty) {      param="Group member attributes";    }    throw APIException.badRequests.authnProviderGroupObjectClassesAndMemberAttributesRequired(param);  }}  }
class C{  public EulerAngles(float yaw,float pitch,float roll){  this.yaw=yaw;  this.pitch=pitch;  this.roll=roll;}  }
class C{  protected ByteArrayOutputStream parseBytes(ByteArrayOutputStream bos) throws IOException {  int ch;  for (ch=skipWhitespace(); ch >= 0 && ch != '<'; ch=skipWhitespace()) {    int b1=ch;    int b2=read();    int b3=read();    int b4=read();    if (b4 != '=') {      int chunk=((base64Decode[b1] << 18) + (base64Decode[b2] << 12) + (base64Decode[b3] << 6)+ (base64Decode[b4]));      bos.write(chunk >> 16);      bos.write(chunk >> 8);      bos.write(chunk);    } else     if (b3 != '=') {      int chunk=((base64Decode[b1] << 10) + (base64Decode[b2] << 4) + (base64Decode[b3] >> 2));      bos.write(chunk >> 8);      bos.write(chunk);    } else {      int chunk=((base64Decode[b1] << 2) + (base64Decode[b2] >> 4));      bos.write(chunk);    }  }  if (ch == '<')   _peek=ch;  return bos;}  }
class C{  public void mutableAdd(double c,Vec x_t){  mutableAdd(c,x_t,k.getQueryInfo(x_t));}  }
class C{  public void template(Template template){  this.template=template;}  }
class C{  private void ok(){  PixelMatrix pixelMatrix=null;  try {    pixelMatrix=pixelMatrixEditor.createPixelMatrix();  } catch (  PixelMatrixEditorException e) {    JOptionPane.showInternalMessageDialog(this,"Cannot create pixel matrix",e.getMessage(),JOptionPane.ERROR_MESSAGE);    pixelMatrices.requestFocus();  }  visionWorld.getModel().setPixelMatrix(pixelMatrix);  setVisible(false);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  boolean visitIteratorBlock(IteratorBlock.IterationContext ictxt) throws TemplateException, IOException {  pushLocalContext(ictxt);  try {    return ictxt.accept(this);  } catch (  TemplateException te) {    handleTemplateException(te);    return true;  } finally {    localContextStack.pop();  }}  }
class C{  public void unsubscribe(ClientConnection connection){  Set<String> subscriptions=clientSubscriptions.remove(connection);  if (subscriptions == null)   return;  for (  String channelID : subscriptions) {    getChannel(channelID).unsubscribe(connection);  }}  }
class C{  public Number asNumber(){  return (Number)value;}  }
class C{  protected Document createDefaultModel(){  return new PlainDocument();}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentFragment docFragment;  String nodeValue;  Text txtNode;  Node retval;  doc=(Document)load("hc_staff",true);  docFragment=doc.createDocumentFragment();  txtNode=doc.createTextNode("");  retval=docFragment.appendChild(txtNode);  docFragment.normalize();  txtNode=(Text)docFragment.getFirstChild();  assertNull("noChild",txtNode);}  }
class C{  public static boolean checkContentCanBePulledDown(PtrFrameLayout frame,View content,View header){  return !canChildScrollUp(content);}  }
class C{  public void write(byte[] b,int offset,int length) throws IOException {  if (entry.getMethod() == DEFLATED) {    if (length > 0) {      if (!def.finished()) {        def.setInput(b,offset,length);        while (!def.needsInput()) {          deflate();        }      }    }  } else {    writeOut(b,offset,length);    written+=length;  }  crc.update(b,offset,length);}  }
class C{  public AnnotationVisitor visitAnnotation(String name,String desc){  if (av != null) {    return av.visitAnnotation(name,desc);  }  return null;}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:55.649 -0500",hash_original_method="2623207C72797F9950DF9980B680F416",hash_generated_method="2623207C72797F9950DF9980B680F416") void putAttribute(String name,String value){  if ((attributes == null) || (attributes.size() == 0)) {    attributes=new HashMap<String,String>();  }  attributes.put(name,value);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:44.433 -0500",hash_original_method="01B27F7B8478EF280F44E13D1105BCC7",hash_generated_method="A2763C8EB7716C67438AA8D8318493F5") static public void assertSame(String message,Object expected,Object actual){  if (expected == actual)   return;  failNotSame(message,expected,actual);}  }
class C{  public static IndexKeyRange spatialObject(IndexRowType indexRowType,IndexBound indexBound){  if (indexBound == null) {    throw new IllegalArgumentException("spatialObjectIndex must not be null");  }  return new IndexKeyRange(indexRowType,indexBound,true,indexBound,true,IndexKind.SPATIAL_OBJECT);}  }
class C{  private void processVolumes(Iterator<CIMInstance> it,Map<String,Object> keyMap,Operation operation,StoragePool pool,StorageSystem system,Map<String,VolHostIOObject> exportedVolumes,Set<String> existingVolumesInCG,Map<String,RemoteMirrorObject> volumeToRAGroupMap,Map<String,LocalReplicaObject> volumeToLocalReplicaMap,Map<String,Map<String,String>> volumeToSyncAspectMap,Set<String> poolSupportedSLONames,Set<String> boundVolumes,Set<URI> srdfEnabledTargetVPools,Map<String,Set<String>> duplicateSyncAspectElementNameMap){  List<CIMObjectPath> metaVolumes=new ArrayList<CIMObjectPath>();  List<CIMObjectPath> metaVolumeViews=new ArrayList<CIMObjectPath>();  while (it.hasNext()) {    CIMInstance volumeViewInstance=null;    try {      volumeViewInstance=it.next();      String volumeNativeGuid=getVolumeViewNativeGuid(volumeViewInstance.getObjectPath(),keyMap);      Volume volume=checkStorageVolumeExistsInDB(volumeNativeGuid,_dbClient);      if (null != volume) {        _logger.debug("Skipping discovery, as this Volume {} is already being managed by ViPR.",volumeNativeGuid);        continue;      }      BlockSnapshot snap=DiscoveryUtils.checkBlockSnapshotExistsInDB(_dbClient,volumeNativeGuid);      if (null != snap) {        _logger.debug("Skipping discovery, as this discovered volume {} is already a managed BlockSnapshot in ViPR.",volumeNativeGuid);        continue;      }      BlockMirror mirror=checkBlockMirrorExistsInDB(volumeNativeGuid,_dbClient);      if (null != mirror) {        _logger.debug("Skipping discovery, as this discovered volume {} is already a managed BlockMirror in ViPR.",volumeNativeGuid);        continue;      }      if (boundVolumes != null) {        String deviceId=null;        if (system.getUsingSmis80()) {          deviceId=volumeViewInstance.getObjectPath().getKey(DEVICE_ID).getValue().toString();        } else {          deviceId=volumeViewInstance.getObjectPath().getKey(SVDEVICEID).getValue().toString();        }        if (!boundVolumes.contains(deviceId)) {          _logger.info("Skipping volume, as this Volume {} is not bound to this Thin Storage Pool {}",volumeNativeGuid,pool.getLabel());          continue;        }      }      addPath(keyMap,operation.getResult(),volumeViewInstance.getObjectPath());      String unManagedVolumeNativeGuid=getUnManagedVolumeNativeGuid(volumeViewInstance.getObjectPath(),keyMap);      UnManagedVolume unManagedVolume=checkUnManagedVolumeExistsInDB(unManagedVolumeNativeGuid,_dbClient);      unManagedVolume=createUnManagedVolume(unManagedVolume,volumeViewInstance,unManagedVolumeNativeGuid,pool,system,volumeNativeGuid,exportedVolumes,existingVolumesInCG,volumeToRAGroupMap,volumeToLocalReplicaMap,volumeToSyncAspectMap,poolSupportedSLONames,keyMap,srdfEnabledTargetVPools,duplicateSyncAspectElementNameMap);      boolean nonRpExported=false;      @SuppressWarnings("unchecked") Map<String,Set<UnManagedExportMask>> masksMap=(Map<String,Set<UnManagedExportMask>>)keyMap.get(Constants.UNMANAGED_EXPORT_MASKS_MAP);      if (masksMap != null) {        Set<UnManagedExportMask> uems=masksMap.get(unManagedVolume.getNativeGuid());        if (uems != null) {          _logger.info("{} UnManagedExportMasks found in the keyMap for volume {}",uems.size(),unManagedVolume.getNativeGuid());          for (          UnManagedExportMask uem : uems) {            boolean backendMaskFound=false;            _logger.info("   adding UnManagedExportMask {} to UnManagedVolume",uem.getMaskingViewPath());            unManagedVolume.getUnmanagedExportMasks().add(uem.getId().toString());            uem.getUnmanagedVolumeUris().add(unManagedVolume.getId().toString());            if (!_unManagedExportMasksUpdate.contains(uem)) {              _unManagedExportMasksUpdate.add(uem);            }            for (            String initUri : uem.getKnownInitiatorUris()) {              _logger.info("   adding known Initiator URI {} to UnManagedVolume",initUri);              unManagedVolume.getInitiatorUris().add(initUri);              Initiator init=_dbClient.queryObject(Initiator.class,URI.create(initUri));              unManagedVolume.getInitiatorNetworkIds().add(init.getInitiatorPort());            }            for (            String path : uem.getUnmanagedInitiatorNetworkIds()) {              _logger.info("   UnManagedExportMask has this initiator unknown to ViPR: {}",path);            }            Object o=keyMap.get(Constants.UNMANAGED_RECOVERPOINT_MASKS_SET);            if (o != null) {              Set<String> unmanagedRecoverPointMasks=(Set<String>)o;              if (!unmanagedRecoverPointMasks.isEmpty()) {                if (unmanagedRecoverPointMasks.contains(uem.getId().toString())) {                  _logger.info("unmanaged volume {} is an RP volume",unManagedVolume.getLabel());                  unManagedVolume.putVolumeCharacterstics(SupportedVolumeCharacterstics.IS_RECOVERPOINT_ENABLED.toString(),"true");                  backendMaskFound=true;                }              }            }            o=keyMap.get(Constants.UNMANAGED_VPLEX_BACKEND_MASKS_SET);            if (o != null) {              Set<String> unmanagedVplexBackendMasks=(Set<String>)o;              if (!unmanagedVplexBackendMasks.isEmpty()) {                if (unmanagedVplexBackendMasks.contains(uem.getId().toString())) {                  _logger.info("unmanaged volume {} is a vplex backend volume",unManagedVolume.getLabel());                  unManagedVolume.putVolumeCharacterstics(SupportedVolumeCharacterstics.IS_VPLEX_BACKEND_VOLUME.toString(),"true");                }              }            }            if (!backendMaskFound) {              nonRpExported=true;            }          }        }      }      if (nonRpExported) {        _logger.info("unmanaged volume {} is exported to something other than RP.  Marking IS_NONRP_EXPORTED.",unManagedVolume.getLabel());        unManagedVolume.putVolumeCharacterstics(SupportedVolumeCharacterstics.IS_NONRP_EXPORTED.toString(),"true");      } else {        _logger.info("unmanaged volume {} is not exported OR not exported to something other than RP.  Not marking IS_NONRP_EXPORTED.",unManagedVolume.getLabel());        unManagedVolume.putVolumeCharacterstics(SupportedVolumeCharacterstics.IS_NONRP_EXPORTED.toString(),"false");      }      _logger.debug("Going to check if the volume is meta: {}, volume meta property: {}",volumeViewInstance.getObjectPath(),unManagedVolume.getVolumeCharacterstics().get(SupportedVolumeCharacterstics.IS_METAVOLUME.toString()));      String isMetaVolume=unManagedVolume.getVolumeCharacterstics().get(SupportedVolumeCharacterstics.IS_METAVOLUME.toString());      if (null != isMetaVolume && Boolean.valueOf(isMetaVolume)) {        if (keyMap.containsKey(Constants.IS_NEW_SMIS_PROVIDER) && Boolean.valueOf(keyMap.get(Constants.IS_NEW_SMIS_PROVIDER).toString())) {          metaVolumes.add(volumeViewInstance.getObjectPath());        } else {          metaVolumeViews.add(volumeViewInstance.getObjectPath());        }        _logger.info("Found meta volume: {}, name: {}",volumeViewInstance.getObjectPath(),unManagedVolume.getLabel());      }      if (_unManagedVolumesInsert.size() > BATCH_SIZE) {        _partitionManager.insertInBatches(_unManagedVolumesInsert,BATCH_SIZE,_dbClient,UNMANAGED_VOLUME);        _unManagedVolumesInsert.clear();      }      if (_unManagedVolumesUpdate.size() > BATCH_SIZE) {        _partitionManager.updateAndReIndexInBatches(_unManagedVolumesUpdate,BATCH_SIZE,_dbClient,UNMANAGED_VOLUME);        _unManagedVolumesUpdate.clear();      }      if (_unManagedExportMasksUpdate.size() > BATCH_SIZE) {        _partitionManager.updateAndReIndexInBatches(_unManagedExportMasksUpdate,BATCH_SIZE,_dbClient,UNMANAGED_EXPORT_MASK);        _unManagedExportMasksUpdate.clear();      }      unManagedVolumesReturnedFromProvider.add(unManagedVolume.getId());    } catch (    Exception ex) {      _logger.error("Processing UnManaged Storage Volume {} ",volumeViewInstance.getObjectPath(),ex);    }  }  try {    if (metaVolumes != null && !metaVolumes.isEmpty()) {      _metaVolumePaths.addAll(metaVolumes);      _logger.info("Added {} meta volumes.",metaVolumes.size());    }    if (metaVolumeViews != null && !metaVolumeViews.isEmpty()) {      _metaVolumeViewPaths.addAll(metaVolumeViews);      _logger.info("Added {} meta volume views.",metaVolumeViews.size());    }  } catch (  Exception ex) {    _logger.error("Processing UnManaged meta volumes.",ex);  }}  }
class C{  public String officialPath(){  return mOfficialPath;}  }
class C{  private static void installJavaStuff(Document document){  String[] types=new String[]{IJavaScriptPartitions.JAVA_DOC,IJavaScriptPartitions.JAVA_MULTI_LINE_COMMENT,IJavaScriptPartitions.JAVA_SINGLE_LINE_COMMENT,IJavaScriptPartitions.JAVA_STRING,IJavaScriptPartitions.JAVASCRIPT_TEMPLATE_LITERAL,IJavaScriptPartitions.JAVA_CHARACTER,IJSXPartitions.JSX,IDocument.DEFAULT_CONTENT_TYPE};  FastPartitioner partitioner=new FastPartitioner(new FastTypeScriptPartitionScanner(),types);  partitioner.connect(document);  document.setDocumentPartitioner(IJavaScriptPartitions.JAVA_PARTITIONING,partitioner);}  }
class C{  @Override public void resetTask(){  this.target=null;  this.grabDelay=0;  theMinion.targetEntityToGrab=null;}  }
class C{  private boolean openCamera(){  int cameraId=CameraHolder.instance().getBackCameraId();  if (cameraId == -1)   cameraId=0;  if (mCameraDevice == null) {    mCameraDevice=CameraUtil.openCamera(mActivity,cameraId,mMainHandler,mActivity.getCameraOpenErrorCallback());    if (mCameraDevice == null) {      return false;    }  }  mCameraOrientation=CameraUtil.getCameraOrientation(cameraId);  if (cameraId == CameraHolder.instance().getFrontCameraId())   mUsingFrontCamera=true;  return true;}  }
class C{  public synchronized void releaseMemory(FbClientLibrary clientLibrary){  if (size == -1)   return;  try {    if (eventBuffer.getValue() != Pointer.NULL) {      clientLibrary.isc_free(eventBuffer.getValue());      eventBuffer.setValue(Pointer.NULL);    }    if (resultBuffer.getValue() != Pointer.NULL) {      clientLibrary.isc_free(resultBuffer.getValue());      resultBuffer.setValue(Pointer.NULL);    }  }  finally {    size=-1;  }}  }
class C{  public boolean execSQL(String sql,Object[] selectionArgs){  dbOpenHelper.getWritableDatabase().execSQL(sql,selectionArgs);  return true;}  }
class C{  public FrontierQuery buildFrontierQuery(BytesRefHash collectorTerms,Integer frontierSize){  if (collectorTerms == null || collectorTerms.size() == 0) {    return null;  } else {    Query q=null;    if (useAutn) {      Automaton autn=buildAutomaton(collectorTerms);      AutomatonQuery autnQuery=new AutomatonQuery(new Term(fromField),autn);      q=autnQuery;    } else {      List<BytesRef> termList=new ArrayList<>(collectorTerms.size());      for (int i=0; i < collectorTerms.size(); i++) {        BytesRef ref=new BytesRef();        collectorTerms.get(i,ref);        termList.add(ref);      }      q=new TermsQuery(fromField,termList);    }    if (traversalFilter != null) {      BooleanQuery.Builder builder=new BooleanQuery.Builder();      builder.add(q,Occur.MUST);      builder.add(traversalFilter,Occur.MUST);      q=builder.build();    }    FrontierQuery frontier=new FrontierQuery(q,frontierSize);    return frontier;  }}  }
class C{  public static void chordMenuKey(ActivityInstrumentationTestCase test,char shortcutKey){  final Instrumentation inst=test.getInstrumentation();  final KeyEvent pushMenuKey=new KeyEvent(KeyEvent.ACTION_DOWN,KeyEvent.KEYCODE_MENU);  final KeyCharacterMap keyCharMap=KeyCharacterMap.load(pushMenuKey.getDeviceId());  final KeyEvent shortcutKeyEvent=keyCharMap.getEvents(new char[]{shortcutKey})[0];  final int shortcutKeyCode=shortcutKeyEvent.getKeyCode();  inst.sendKeySync(pushMenuKey);  inst.sendKeySync(new KeyEvent(KeyEvent.ACTION_DOWN,shortcutKeyCode));  inst.sendKeySync(new KeyEvent(KeyEvent.ACTION_UP,shortcutKeyCode));  inst.sendKeySync(new KeyEvent(KeyEvent.ACTION_UP,KeyEvent.KEYCODE_MENU));}  }
class C{  public boolean isCached(){  return this.isCached;}  }
class C{  public static String fromCalendar(final Calendar calendar){  Date date=calendar.getTime();  String formatted=new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ").format(date);  return formatted.substring(0,22) + ":" + formatted.substring(22);}  }
class C{  public boolean isClassInitializer(){  return methodInfo.isStaticInitializer();}  }
class C{  public ElasticInterpolator(EasingMode easingMode){  super(easingMode);}  }
class C{  public void paintLineHighlights(Graphics g){  int count=lineHighlights == null ? 0 : lineHighlights.size();  if (count > 0) {    int docLen=textArea.getDocument().getLength();    Rectangle vr=textArea.getVisibleRect();    int lineHeight=textArea.getLineHeight();    try {      for (int i=0; i < count; i++) {        LineHighlightInfo lhi=(LineHighlightInfo)lineHighlights.get(i);        int offs=lhi.getOffset();        if (offs >= 0 && offs <= docLen) {          int y=textArea.yForLineContaining(offs);          if (y > vr.y - lineHeight) {            if (y < vr.y + vr.height) {              g.setColor(lhi.getColor());              g.fillRect(0,y,textArea.getWidth(),lineHeight);            } else {              break;            }          }        }      }    } catch (    BadLocationException ble) {      ble.printStackTrace();    }  }}  }
class C{  public FolderTokenRelFld findById(int fldId) throws Exception {  int i;  FolderTokenRelFld fld=null;  boolean find=false;  for (i=0; i < count(); i++) {    fld=get(i);    if (fld.getId() == fldId) {      find=true;      break;    }  }  if (!find) {    throw new IeciTdException(FolderBaseError.EC_NOT_FOUND,FolderBaseError.EM_NOT_FOUND);  }  return fld;}  }
class C{  public Kursawe(int numberOfVariables){  this(numberOfVariables,-5.0,5.0);}  }
class C{  public OpenDataWorldAction(Workspace workspace){  super("Data World",workspace);  putValue(SMALL_ICON,ResourceManager.getImageIcon("Table.png"));}  }
class C{  @Override public void addOtherMenus(List<JMenu> m,Application app,@Nullable View v){}  }
class C{  public ThrowStatement newThrowStatement(){  return new ThrowStatement(this);}  }
class C{  public static CommandResult execCommand(String command,boolean isRoot,boolean isNeedResultMsg){  return execCommand(new String[]{command},isRoot,isNeedResultMsg);}  }
class C{  public EgDemand updateDemandOnRenewal(AdvertisementPermitDetail advertisementPermitDetail,EgDemand demand){  if (demand != null) {    List<EgDemandDetails> removableDemandDetailList=new ArrayList<EgDemandDetails>();    final Installment installment=demand.getEgInstallmentMaster();    BigDecimal totalDemandAmount=BigDecimal.ZERO;    Boolean enchroachmentFeeAlreadyExistInDemand=false;    EgDemandReason encroachmentFeeReason=getDemandReasonByCodeAndInstallment(AdvertisementTaxConstants.DEMANDREASON_ENCROCHMENTFEE,installment);    EgDemandReason taxReason=getDemandReasonByCodeAndInstallment(AdvertisementTaxConstants.DEMANDREASON_ADVERTISEMENTTAX,installment);    for (    EgDemandDetails dmdDtl : demand.getEgDemandDetails()) {      if (dmdDtl.getEgDemandReason().getId() == taxReason.getId() && advertisementPermitDetail.getTaxAmount().compareTo(BigDecimal.ZERO) >= 0) {        totalDemandAmount=totalDemandAmount.add(advertisementPermitDetail.getTaxAmount().subtract(dmdDtl.getAmount()));        dmdDtl.setAmount(advertisementPermitDetail.getTaxAmount().setScale(0,BigDecimal.ROUND_HALF_UP));      }      if (dmdDtl.getEgDemandReason().getId() == encroachmentFeeReason.getId()) {        enchroachmentFeeAlreadyExistInDemand=true;        if (advertisementPermitDetail.getEncroachmentFee() != null && advertisementPermitDetail.getEncroachmentFee().compareTo(BigDecimal.ZERO) > 0) {          totalDemandAmount=totalDemandAmount.add(advertisementPermitDetail.getEncroachmentFee().subtract(dmdDtl.getAmount()));          dmdDtl.setAmount(advertisementPermitDetail.getEncroachmentFee().setScale(0,BigDecimal.ROUND_HALF_UP));        } else {          totalDemandAmount=totalDemandAmount.subtract(dmdDtl.getAmount());          removableDemandDetailList.add(dmdDtl);        }      }    }    if (!enchroachmentFeeAlreadyExistInDemand && advertisementPermitDetail.getEncroachmentFee() != null && advertisementPermitDetail.getEncroachmentFee().compareTo(BigDecimal.ZERO) > 0) {      demand.addEgDemandDetails(createDemandDetails((advertisementPermitDetail.getEncroachmentFee()),getDemandReasonByCodeAndInstallment(AdvertisementTaxConstants.DEMANDREASON_ENCROCHMENTFEE,installment),BigDecimal.ZERO));      totalDemandAmount=totalDemandAmount.add(advertisementPermitDetail.getEncroachmentFee());    }    for (    EgDemandDetails removableDmdDtl : removableDemandDetailList) {      demand.removeEgDemandDetails(removableDmdDtl);    }    demand.addBaseDemand(totalDemandAmount.setScale(0,BigDecimal.ROUND_HALF_UP));  }  return demand;}  }
class C{  public FailedSynchronizationException(String msg){  super(msg);}  }
class C{  public static void updateRender(BlockPos pos){  refresh(getDimension(),pos);}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case TypesPackage.TOBJECT_PROTOTYPE___GET_OWNED_CTOR:    return getOwnedCtor();case TypesPackage.TOBJECT_PROTOTYPE___IS_FINAL:  return isFinal();case TypesPackage.TOBJECT_PROTOTYPE___IS_PROVIDED_BY_RUNTIME:return isProvidedByRuntime();case TypesPackage.TOBJECT_PROTOTYPE___GET_TYPE_ACCESS_MODIFIER:return getTypeAccessModifier();}return super.eInvoke(operationID,arguments);}  }
class C{  public static Dog maxDog(Dog d1,Dog d2){  if (d1.size >= d2.size)   return d1;  return d2;}  }
class C{  public boolean markUsed(String name){  return used.put(name,Boolean.TRUE) != null;}  }
class C{  public Vector3i zero(){  this.x=0;  this.y=0;  this.z=0;  return this;}  }
class C{  public void closeDriver(){  if (camera != null) {    FlashlightManager.disableFlashlight();    camera.release();    camera=null;  }}  }
class C{  public boolean hasBatchInterrupted(){  return hasExtension(BatchInterrupted.class);}  }
class C{  public static boolean isVideoType(String mime){  return mime.toLowerCase(Locale.getDefault()).startsWith("video/");}  }
class C{  public void resetOriginals(){  mStartingStartTrim=0;  mStartingEndTrim=0;  mStartingRotation=0;  setStartTrim(0);  setEndTrim(0);  setRotation(0);}  }
class C{  private void dumpLog(){synchronized (logLock) {    for (    String logEntry : logBuffer) {      GWTPluginLog.logError(logEntry);    }  }}  }
class C{  private Query createQueryForField(String fieldName,PriorityQueue<USField> q){  BooleanQuery query=new BooleanQuery();  return buildQueryForField(fieldName,q,query);}  }
class C{  public boolean isPresenceDiscoverySupported(){  return mPresenceDiscovery;}  }
class C{  public mxStylesheetCodec(Object template,String[] exclude,String[] idrefs,Map<String,String> mapping){  super(template,exclude,idrefs,mapping);}  }
class C{  public static BufferedImage readRGBImageFromInvertedYCCK(InputStream in,ICC_Profile cmykProfile) throws IOException {  ImageInputStream inputStream=null;  ImageReader reader=createNativeJPEGReader();  inputStream=(in instanceof ImageInputStream) ? (ImageInputStream)in : ImageIO.createImageInputStream(in);  reader.setInput(inputStream);  Raster raster=reader.readRaster(0,null);  raster=convertInvertedYCCKToCMYK(raster);  BufferedImage image=createRGBImageFromCMYK(raster,cmykProfile);  return image;}  }
class C{  public static char[] createIndexKey(char[] selector,int argCount){  char[] countChars=argCount < 10 ? COUNTS[argCount] : ("/" + String.valueOf(argCount)).toCharArray();  return CharOperation.concat(selector,countChars);}  }
class C{  public static int binarySearch(float[] array,float value){  return binarySearch(array,0,array.length,value);}  }
class C{  public void error(String msg,Object arg0,Object arg1,Object arg2){  innerLog(Level.ERROR,null,msg,arg0,arg1,arg2,null);}  }
class C{  public BlendedInfixSuggester(Directory dir,Analyzer indexAnalyzer,Analyzer queryAnalyzer,int minPrefixChars,BlenderType blenderType,int numFactor,boolean commitOnBuild) throws IOException {  super(dir,indexAnalyzer,queryAnalyzer,minPrefixChars,commitOnBuild);  this.blenderType=blenderType;  this.numFactor=numFactor;}  }
class C{  public static int countIgnoreCase(String source,String sub){  int count=0;  int j=0;  int sublen=sub.length();  if (sublen == 0) {    return 0;  }  while (true) {    int i=indexOfIgnoreCase(source,sub,j);    if (i == -1) {      break;    }    count++;    j=i + sublen;  }  return count;}  }
class C{  void clear(LocalRegion region,DiskRegion dr,RegionVersionVector rvv){  acquireCompactorWriteLock();  try {    Object regionLock=region == null ? new Object() : region.getSizeGuard();synchronized (regionLock) {synchronized (this.lock) {        acquireWriteLock(dr);        try {          if (dr.isRegionClosed()) {            throw new RegionDestroyedException(LocalizedStrings.DiskRegion_THE_DISKREGION_HAS_BEEN_CLOSED_OR_DESTROYED.toLocalizedString(),dr.getName());          }          basicClear(region,dr,rvv);          if (rvv == null && region != null) {            region.txClearRegion();            region.clearEntries(null);            dr.incClearCount();          }        }  finally {          releaseWriteLock(dr);        }      }    }  }  finally {    releaseCompactorWriteLock();  }  if (rvv != null && region != null) {    region.txClearRegion();    region.clearEntries(rvv);  }}  }
class C{  public static void init(){  createOptimizationPlan();  BaselineCompiler.options.INVOCATION_COUNTERS=true;}  }
class C{  protected void sequence_RegularExpressionLiteral(ISerializationContext context,RegularExpressionLiteral semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,RegularExpressionPackage.Literals.REGULAR_EXPRESSION_LITERAL__BODY) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,RegularExpressionPackage.Literals.REGULAR_EXPRESSION_LITERAL__BODY));    if (transientValues.isValueTransient(semanticObject,RegularExpressionPackage.Literals.REGULAR_EXPRESSION_LITERAL__FLAGS) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,RegularExpressionPackage.Literals.REGULAR_EXPRESSION_LITERAL__FLAGS));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getRegularExpressionLiteralAccess().getBodyRegularExpressionBodyParserRuleCall_1_0(),semanticObject.getBody());  feeder.accept(grammarAccess.getRegularExpressionLiteralAccess().getFlagsRegularExpressionFlagsParserRuleCall_3_0(),semanticObject.getFlags());  feeder.finish();}  }
class C{  @Override public void stateChanged(ChangeEvent e){  int gotoTime=hostControl.getSimTime();  hostControl.requestTimeStep(gotoTime);}  }
class C{  public AnalyzerScope scope(){  return this.scope;}  }
class C{  int readCorner3(int numRows,int numColumns){  int currentByte=0;  if (readModule(numRows - 1,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(numRows - 1,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 3,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(1,numColumns - 3,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(1,numColumns - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(1,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  return currentByte;}  }
class C{  protected int readComment() throws IOException, XMLException {  if (nextChar() != '-') {    throw createXMLException("malformed.comment");  }  int c=nextChar();  while (c != -1) {    while (c != -1 && c != '-') {      c=nextChar();    }    c=nextChar();    if (c == '-') {      break;    }  }  if (c == -1) {    throw createXMLException("unexpected.eof");  }  c=nextChar();  if (c != '>') {    throw createXMLException("malformed.comment");  }  nextChar();  return LexicalUnits.COMMENT;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:27.314 -0500",hash_original_method="26C25231B8EE38423D74AE317EB8CDCC",hash_generated_method="9EB5B89F8F6E3F86EE9B6CF019F16002") public int inferStreamType(){switch (mType) {case TYPE_ALARM:    return AudioManager.STREAM_ALARM;case TYPE_NOTIFICATION:  return AudioManager.STREAM_NOTIFICATION;default :return AudioManager.STREAM_RING;}}  }
class C{  public static final Criterion modSeqEquals(long value){  return new ModSeqCriterion(new NumericOperator(value,NumericComparator.EQUALS));}  }
class C{  protected void startClients(ChannelPipelineFactory pipelineFactory){  final ClientBootstrap bootstrap=new ClientBootstrap(new NioClientSocketChannelFactory(bossExecutor,workerExecutor));  bootstrap.setOption("child.reuseAddr",true);  bootstrap.setOption("child.keepAlive",true);  bootstrap.setOption("child.tcpNoDelay",true);  bootstrap.setOption("child.sendBufferSize",SEND_BUFFER_SIZE);  bootstrap.setOption("child.connectTimeoutMillis",CONNECT_TIMEOUT);  bootstrap.setPipelineFactory(pipelineFactory);  clientBootstrap=bootstrap;  ScheduledExecutorService ses=syncManager.getThreadPool().getScheduledExecutor();  reconnectTask=new SingletonTask(ses,new ConnectTask());  reconnectTask.reschedule(0,TimeUnit.SECONDS);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypesPackage.TOBJECT_PROTOTYPE__DECLARED_TYPE_ACCESS_MODIFIER:    return declaredTypeAccessModifier != DECLARED_TYPE_ACCESS_MODIFIER_EDEFAULT;case TypesPackage.TOBJECT_PROTOTYPE__DECLARED_PROVIDED_BY_RUNTIME:  return declaredProvidedByRuntime != DECLARED_PROVIDED_BY_RUNTIME_EDEFAULT;case TypesPackage.TOBJECT_PROTOTYPE__DECLARED_ELEMENT_TYPE:return declaredElementType != null;case TypesPackage.TOBJECT_PROTOTYPE__SUPER_TYPE:return superType != null;case TypesPackage.TOBJECT_PROTOTYPE__DECLARED_FINAL:return declaredFinal != DECLARED_FINAL_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  public static void main(String[] options){  try {    Attribute length=new Attribute("length");    Attribute weight=new Attribute("weight");    FastVector my_nominal_values=new FastVector(3);    my_nominal_values.addElement("first");    my_nominal_values.addElement("second");    my_nominal_values.addElement("third");    Attribute position=new Attribute("position",my_nominal_values);    FastVector attributes=new FastVector(3);    attributes.addElement(length);    attributes.addElement(weight);    attributes.addElement(position);    Instances race=new Instances("race",attributes,0);    race.setClassIndex(position.index());    Instance inst=new Instance(3);    inst.setValue(length,5.3);    inst.setValue(weight,300);    inst.setValue(position,"first");    inst.setDataset(race);    System.out.println("The instance: " + inst);    System.out.println("First attribute: " + inst.attribute(0));    System.out.println("Class attribute: " + inst.classAttribute());    System.out.println("Class index: " + inst.classIndex());    System.out.println("Class is missing: " + inst.classIsMissing());    System.out.println("Class value (internal format): " + inst.classValue());    Instance copy=(Instance)inst.copy();    System.out.println("Shallow copy: " + copy);    copy.setDataset(inst.dataset());    System.out.println("Shallow copy with dataset set: " + copy);    copy.setDataset(null);    copy.deleteAttributeAt(0);    copy.insertAttributeAt(0);    copy.setDataset(inst.dataset());    System.out.println("Copy with first attribute deleted and inserted: " + copy);    System.out.println("Enumerating attributes (leaving out class):");    Enumeration Enum=inst.enumerateAttributes();    while (Enum.hasMoreElements()) {      Attribute att=(Attribute)Enum.nextElement();      System.out.println(att);    }    System.out.println("Header of original and copy equivalent: " + inst.equalHeaders(copy));    System.out.println("Length of copy missing: " + copy.isMissing(length));    System.out.println("Weight of copy missing: " + copy.isMissing(weight.index()));    System.out.println("Length of copy missing: " + Instance.isMissingValue(copy.value(length)));    System.out.println("Missing value coded as: " + Instance.missingValue());    System.out.println("Number of attributes: " + copy.numAttributes());    System.out.println("Number of classes: " + copy.numClasses());    double[] meansAndModes={2,3,0};    copy.replaceMissingValues(meansAndModes);    System.out.println("Copy with missing value replaced: " + copy);    copy.setClassMissing();    System.out.println("Copy with missing class: " + copy);    copy.setClassValue(0);    System.out.println("Copy with class value set to first value: " + copy);    copy.setClassValue("third");    System.out.println("Copy with class value set to \"third\": " + copy);    copy.setMissing(1);    System.out.println("Copy with second attribute set to be missing: " + copy);    copy.setMissing(length);    System.out.println("Copy with length set to be missing: " + copy);    copy.setValue(0,0);    System.out.println("Copy with first attribute set to 0: " + copy);    copy.setValue(weight,1);    System.out.println("Copy with weight attribute set to 1: " + copy);    copy.setValue(position,"second");    System.out.println("Copy with position set to \"second\": " + copy);    copy.setValue(2,"first");    System.out.println("Copy with last attribute set to \"first\": " + copy);    System.out.println("Current weight of instance copy: " + copy.weight());    copy.setWeight(2);    System.out.println("Current weight of instance copy (set to 2): " + copy.weight());    System.out.println("Last value of copy: " + copy.toString(2));    System.out.println("Value of position for copy: " + copy.toString(position));    System.out.println("Last value of copy (internal format): " + copy.value(2));    System.out.println("Value of position for copy (internal format): " + copy.value(position));  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  private int binarySearch(int cubeY){  int start=0;  int end=cubes.size() - 1;  int mid=0;  while (start <= end) {    mid=start + end >>> 1;    int at=cubes.get(mid).getY();    if (at < cubeY) {      start=mid + 1;    } else     if (at > cubeY) {      end=mid - 1;    } else {      return mid;    }  }  return mid;}  }
class C{  public static boolean evaluate(Context context,Writer out,String logTag,String instring) throws ParseErrorException, MethodInvocationException, ResourceNotFoundException, IOException {  return evaluate(context,out,logTag,new BufferedReader(new StringReader(instring)));}  }
class C{  public Builder addRoute(InetAddress address,int prefixLength){  check(address,prefixLength);  int offset=prefixLength / 8;  byte[] bytes=address.getAddress();  if (offset < bytes.length) {    for (bytes[offset]<<=prefixLength % 8; offset < bytes.length; ++offset) {      if (bytes[offset] != 0) {        throw new IllegalArgumentException("Bad address");      }    }  }  mRoutes.append(String.format(" %s/%d",address.getHostAddress(),prefixLength));  return this;}  }
class C{  public int kilo(){  return kilo;}  }
class C{  @Override public void run(){  List<String> lines;  try {    lines=marksdb.fetchSignedCsv(marksdbSmdrlLogin,SMDRL_CSV_PATH,SMDRL_SIG_PATH);  } catch (  SignatureException|IOException|PGPException e) {    throw new RuntimeException(e);  }  SignedMarkRevocationList smdrl=SmdrlCsvParser.parse(lines);  smdrl.save();  logger.infofmt("Inserted %,d smd revocations into datastore, created at %s",smdrl.size(),smdrl.getCreationTime());}  }
class C{  public static int nextZipfInt(double z,RandomEngine randomGenerator){  final double b=Math.pow(2.0,z - 1.0);  final double constant=-1.0 / (z - 1.0);  int result=0;  for (; ; ) {    double u=randomGenerator.raw();    double v=randomGenerator.raw();    result=(int)(Math.floor(Math.pow(u,constant)));    double t=Math.pow(1.0 + 1.0 / result,z - 1.0);    if (v * result * (t - 1.0) / (b - 1.0) <= t / b)     break;  }  return result;}  }
class C{  public double normInfinity(DoubleMatrix2D A){  double max=0;  for (int row=A.rows(); --row >= 0; ) {    max=Math.max(max,norm1(A.viewRow(row)));  }  return max;}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  private String c(String str){  return str + count;}  }
class C{  public static String cleanPath(final String path){  if (path == null) {    return null;  }  String pathToUse=replace(path,WINDOWS_FOLDER_SEPARATOR,FOLDER_SEPARATOR);  final int prefixIndex=pathToUse.indexOf(":");  String prefix=EMPTY;  if (prefixIndex != -1) {    prefix=pathToUse.substring(0,prefixIndex + 1);    pathToUse=pathToUse.substring(prefixIndex + 1);  }  if (pathToUse.startsWith(FOLDER_SEPARATOR)) {    prefix=prefix + FOLDER_SEPARATOR;    pathToUse=pathToUse.substring(1);  }  final String[] pathArray=delimitedListToStringArray(pathToUse,FOLDER_SEPARATOR);  final List<String> pathElements=new LinkedList<String>();  int tops=0;  for (int i=pathArray.length - 1; i >= 0; i--) {    final String element=pathArray[i];    if (CURRENT_PATH.equals(element)) {    } else     if (TOP_PATH.equals(element)) {      tops++;    } else {      if (tops > 0) {        tops--;      } else {        pathElements.add(0,element);      }    }  }  for (int i=0; i < tops; i++) {    pathElements.add(0,TOP_PATH);  }  return prefix + collectionToDelimitedString(pathElements,FOLDER_SEPARATOR);}  }
class C{  public void init(KeyGenerationParameters param){  super.init(new KeyGenerationParameters(param.getRandom(),256));}  }
class C{  public static void matchVirtualPoolWithAllStoragePools(VirtualPool vpool,DbClient dbClient,CoordinatorClient coordinator,StringBuffer errorMessage){  List<URI> storagePoolURIs=dbClient.queryByType(StoragePool.class,true);  Iterator<StoragePool> storagePoolList=dbClient.queryIterativeObjects(StoragePool.class,storagePoolURIs);  List<StoragePool> allPoolsToProcess=new ArrayList<StoragePool>();  while (storagePoolList.hasNext()) {    allPoolsToProcess.add(storagePoolList.next());  }  if (!allPoolsToProcess.isEmpty()) {    matchvPoolWithStoragePools(vpool,allPoolsToProcess,dbClient,coordinator,null,errorMessage);  }}  }
class C{  public CheckoutResult checkout() throws Exception {  CheckoutResult checkoutResult=new CheckoutResult();  ShoppingCart currentCart=null;  try {    currentCart=getShoppingCart();  } catch (  Exception e) {    log.error("Could not retrieve shopping cart",e);  }  if (currentCart != null) {    Inventory[] inventory=oAuth2RestTemplate.getForObject(String.format("http://inventory-service/v1/inventory?productIds=%s",currentCart.getLineItems().stream().map(null).collect(Collectors.joining(","))),Inventory[].class);    if (inventory != null) {      Map<String,Long> inventoryItems=Arrays.asList(inventory).stream().map(null).collect(groupingBy(Function.identity(),counting()));      if (checkAvailableInventory(checkoutResult,currentCart,inventoryItems)) {        Order orderResponse=oAuth2RestTemplate.postForObject("http://order-service/v1/orders",currentCart.getLineItems().stream().map(null).collect(Collectors.toList()),Order.class);        if (orderResponse != null) {          checkoutResult.setResultMessage("Order created");          oAuth2RestTemplate.postForEntity(String.format("http://order-service/v1/orders/%s/events",orderResponse.getOrderId()),new OrderEvent(OrderEventType.CREATED,orderResponse.getOrderId()),ResponseEntity.class);          checkoutResult.setOrder(orderResponse);        }        User user=oAuth2RestTemplate.getForObject("http://user-service/uaa/v1/me",User.class);        addCartEvent(new CartEvent(CartEventType.CHECKOUT,user.getId()),user);      }    }  }  return checkoutResult;}  }
class C{  private void drawHorizontal(Canvas c,RecyclerView parent){  final int top=parent.getPaddingTop();  final int bottom=parent.getHeight() - parent.getPaddingBottom();  final int childCount=parent.getChildCount();  for (int i=0; i < childCount; i++) {    final View child=parent.getChildAt(i);    final RecyclerView.LayoutParams params=(RecyclerView.LayoutParams)child.getLayoutParams();    final int left=child.getRight() + params.rightMargin + Math.round(ViewCompat.getTranslationX(child));    final int right=left + mDivider.getIntrinsicHeight();    mDivider.setBounds(left,top,right,bottom);    mDivider.draw(c);  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String fileName=null;  String inputDataFile=null;  String whiteboxHeaderFile=null;  String whiteboxDataFile=null;  WhiteboxRaster output=null;  int i=0;  int row, col, rows, cols;  String[] imageFiles;  int numImages=0;  double noData=-32768;  InputStream inStream=null;  OutputStream outStream=null;  String dataType="float";  String dataScale="rgb";  DataInputStream in=null;  BufferedReader br=null;  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  if ((inputFilesString == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  try {    for (i=0; i < numImages; i++) {      int progress=(int)(100f * i / (numImages - 1));      if (numImages > 1) {        updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      }      fileName=imageFiles[i];      if (!((new File(fileName)).exists())) {        showFeedback("Image file does not exist.");        break;      }      File file=new File(fileName);      String fileExtension=whitebox.utilities.FileUtilities.getFileExtension(fileName).toLowerCase();      String[] formatNames=ImageIO.getReaderFormatNames();      boolean checkForSupportedFormat=false;      for (      String str : formatNames) {        if (str.toLowerCase().equals(fileExtension)) {          checkForSupportedFormat=true;          break;        }      }      if (!checkForSupportedFormat) {        showFeedback("This image file format is not currently supported by this tool.");        return;      }      BufferedImage image=ImageIO.read(new File(fileName));      rows=image.getHeight();      cols=image.getWidth();      if (image.getColorModel().getPixelSize() == 24) {        dataType="float";        dataScale="rgb";      }      int dot=imageFiles[i].lastIndexOf(".");      String imageExtension=imageFiles[i].substring(dot + 1);      whiteboxHeaderFile=imageFiles[i].replace(imageExtension,"dep");      whiteboxDataFile=imageFiles[i].replace(imageExtension,"tas");      char[] extChars=imageExtension.toCharArray();      boolean worldFileFound=false;      String wfExtension=Character.toString(extChars[0]) + Character.toString(extChars[2]) + "w";      String worldFile=imageFiles[i].replace(imageExtension,wfExtension);      if ((new File(worldFile)).exists()) {        worldFileFound=true;      } else {        wfExtension=imageExtension + "w";        worldFile=imageFiles[i].replace(imageExtension,wfExtension);        if ((new File(worldFile)).exists()) {          worldFileFound=true;        } else {          wfExtension=".wld";          worldFile=imageFiles[i].replace(imageExtension,wfExtension);          if ((new File(worldFile)).exists()) {            worldFileFound=true;          }        }      }      if (worldFileFound) {        double A=0, B=0, C=0, D=0, E=0, F=0;        FileInputStream fstream=new FileInputStream(worldFile);        in=new DataInputStream(fstream);        br=new BufferedReader(new InputStreamReader(in));        String line;        int n=0;        while ((line=br.readLine()) != null) {switch (n) {case 0:            A=Double.parseDouble(line);          break;case 1:        D=Double.parseDouble(line);      break;case 2:    B=Double.parseDouble(line);  break;case 3:E=Double.parseDouble(line);break;case 4:C=Double.parseDouble(line);break;case 5:F=Double.parseDouble(line);break;}n++;}if (B == 0 && D == 0) {double west=A * 0 + B * 0 + C;double north=D * 0 + E * 0 + F;double east=A * (cols - 1) + B * (rows - 1) + C;double south=D * (cols - 1) + E * (rows - 1) + F;(new File(whiteboxHeaderFile)).delete();(new File(whiteboxDataFile)).delete();fw=new FileWriter(whiteboxHeaderFile,false);bw=new BufferedWriter(fw);out=new PrintWriter(bw,true);String byteOrder=java.nio.ByteOrder.nativeOrder().toString();str1="Min:\t" + Double.toString(Integer.MAX_VALUE);out.println(str1);str1="Max:\t" + Double.toString(Integer.MIN_VALUE);out.println(str1);str1="North:\t" + Double.toString(north);out.println(str1);str1="South:\t" + Double.toString(south);out.println(str1);str1="East:\t" + Double.toString(east);out.println(str1);str1="West:\t" + Double.toString(west);out.println(str1);str1="Cols:\t" + Integer.toString(cols);out.println(str1);str1="Rows:\t" + Integer.toString(rows);out.println(str1);str1="Data Type:\t" + dataType;out.println(str1);str1="Z Units:\t" + "not specified";out.println(str1);str1="XY Units:\t" + "not specified";out.println(str1);str1="Projection:\t" + "not specified";out.println(str1);str1="Data Scale:\t" + dataScale;out.println(str1);str1="Preferred Palette:\t" + "greyscale.pal";out.println(str1);str1="NoData:\t-32768";out.println(str1);if (byteOrder.toLowerCase().contains("lsb") || byteOrder.toLowerCase().contains("little")) {str1="Byte Order:\t" + "LITTLE_ENDIAN";} else {str1="Byte Order:\t" + "BIG_ENDIAN";}out.println(str1);output=new WhiteboxRaster(whiteboxHeaderFile,"rw");int z, r, g, b;for (row=0; row < rows; row++) {for (col=0; col < cols; col++) {z=image.getRGB(col,row);r=(int)z & 0xFF;g=((int)z >> 8) & 0xFF;b=((int)z >> 16) & 0xFF;output.setValue(row,col,(double)((255 << 24) | (b << 16) | (g << 8)| r));}}output.findMinAndMaxVals();output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");output.addMetadataEntry("Created on " + new Date());output.writeHeaderFile();output.close();} else {showFeedback("We're sorry but Whitebox cannot currently handle the import of rotated images.");break;}} else {double west=0;double north=rows - 1;double east=cols - 1;double south=0;(new File(whiteboxHeaderFile)).delete();(new File(whiteboxDataFile)).delete();fw=new FileWriter(whiteboxHeaderFile,false);bw=new BufferedWriter(fw);out=new PrintWriter(bw,true);String byteOrder=java.nio.ByteOrder.nativeOrder().toString();str1="Min:\t" + Double.toString(Integer.MAX_VALUE);out.println(str1);str1="Max:\t" + Double.toString(Integer.MIN_VALUE);out.println(str1);str1="North:\t" + Double.toString(north);out.println(str1);str1="South:\t" + Double.toString(south);out.println(str1);str1="East:\t" + Double.toString(east);out.println(str1);str1="West:\t" + Double.toString(west);out.println(str1);str1="Cols:\t" + Integer.toString(cols);out.println(str1);str1="Rows:\t" + Integer.toString(rows);out.println(str1);str1="Data Type:\t" + dataType;out.println(str1);str1="Z Units:\t" + "not specified";out.println(str1);str1="XY Units:\t" + "not specified";out.println(str1);str1="Projection:\t" + "not specified";out.println(str1);str1="Data Scale:\t" + dataScale;out.println(str1);str1="Preferred Palette:\t" + "greyscale.pal";out.println(str1);str1="NoData:\t-32768";out.println(str1);if (byteOrder.toLowerCase().contains("lsb") || byteOrder.toLowerCase().contains("little")) {str1="Byte Order:\t" + "LITTLE_ENDIAN";} else {str1="Byte Order:\t" + "BIG_ENDIAN";}out.println(str1);output=new WhiteboxRaster(whiteboxHeaderFile,"rw");int z, r, g, b;for (row=0; row < rows; row++) {for (col=0; col < cols; col++) {z=image.getRGB(col,row);r=(int)z & 0xFF;g=((int)z >> 8) & 0xFF;b=((int)z >> 16) & 0xFF;output.setValue(row,col,(double)((255 << 24) | (b << 16) | (g << 8)| r));}}output.findMinAndMaxVals();output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");output.addMetadataEntry("Created on " + new Date());output.writeHeaderFile();output.close();returnData(whiteboxHeaderFile);}}} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:55.575 -0500",hash_original_method="73ADEB588A693290C2EBE420EE1B60DD",hash_generated_method="73ADEB588A693290C2EBE420EE1B60DD") boolean implementsAlg(String serv,String alg,String attribute,String val){  String servAlg=serv + "." + alg;  String prop=getPropertyIgnoreCase(servAlg);  if (prop == null) {    alg=getPropertyIgnoreCase("Alg.Alias." + servAlg);    if (alg != null) {      servAlg=serv + "." + alg;      prop=getPropertyIgnoreCase(servAlg);    }  }  if (prop != null) {    if (attribute == null) {      return true;    }    return checkAttribute(servAlg,attribute,val);  }  return false;}  }
class C{  @Override public String toString(){  StringBuffer sb=new StringBuffer();  ListIterator<String> it=listIterator();  while (it.hasNext()) {    sb.append(it.next());    if (it.hasNext())     sb.append(", ");  }  return sb.toString();}  }
class C{  private String canonicalize(SortedMap<String,String> sortedParamMap){  if (sortedParamMap.isEmpty()) {    return "";  }  StringBuffer buffer=new StringBuffer();  Iterator<Map.Entry<String,String>> iter=sortedParamMap.entrySet().iterator();  while (iter.hasNext()) {    Map.Entry<String,String> kvpair=iter.next();    buffer.append(percentEncodeRfc3986(kvpair.getKey()));    buffer.append("=");    buffer.append(percentEncodeRfc3986(kvpair.getValue()));    if (iter.hasNext()) {      buffer.append("&");    }  }  String cannoical=buffer.toString();  return cannoical;}  }
class C{  protected static boolean approxUnit(final StringBuilder sbuf,final int amount,final int size,final String name){  int count=amount / size;  int remainder;  if (count == 0) {    return false;  }  remainder=amount - (count * size);  if (remainder >= (size * 95 / 100)) {    count++;    sbuf.append(count);  } else   if (remainder >= (size * 3 / 4)) {    count++;    sbuf.append("just under ");    sbuf.append(count);  } else   if (remainder >= (size * 1 / 4)) {    sbuf.append("about ");    sbuf.append(count);    sbuf.append(" and a half");    count=2;  } else   if (remainder >= (size * 5 / 100)) {    sbuf.append("just over ");    sbuf.append(count);  } else {    sbuf.append(count);  }  sbuf.append(' ');  sbuf.append(Grammar.plnoun(count,name));  return true;}  }
class C{  public void paintComponent(Graphics g){  g.drawImage(track,0,0,null);  Graphics2D g2d=(Graphics2D)g.create();  g2d.translate(carPosition.x,carPosition.y);  g2d.rotate(Math.toRadians(carRotation));  g2d.translate(-(carPosition.x),-(carPosition.y));  g2d.drawImage(car,carPosition.x - carWHalf,carPosition.y - carHHalf,null);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypesPackage.TSETTER__FPAR:    setFpar((TFormalParameter)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:15.602 -0500",hash_original_method="231D340B5B0F8FFDB2D731B0FBBB6D7F",hash_generated_method="4629D1374603155069D144B9514FADD7") public static boolean isSupported(byte[] version){  if (version[0] != 3 || (version[1] != 0 && version[1] != 1)) {    return false;  }  return true;}  }
class C{  public static <S extends HasDataChangedHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    DataChangedEvent event=new DataChangedEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  public FileSystemAlreadyExistsException(){}  }
class C{  public Main(String name,PrintWriter out){  super(name,out);  this.ownName=name;  this.out=out;}  }
class C{  public ToStringBuilder append(char[] array){  style.append(buffer,null,array,null);  return this;}  }
class C{  public SelectOutgoingWeightsAction(final NetworkPanel networkPanel){  super("Select Outgoing Weights");  if (networkPanel == null) {    throw new IllegalArgumentException("networkPanel must not be null");  }  this.networkPanel=networkPanel;  putValue(SHORT_DESCRIPTION,"Select All Outgoing Weights");}  }
class C{  public void startNextStep(final String stepName,final String delegateName,final PlayerID player,final String stepDisplayName){  assertCorrectThread();  if (m_current == null) {    int round=0;    m_history.getGameData().acquireReadLock();    try {      round=m_history.getGameData().getSequence().getRound();    }  finally {      m_history.getGameData().releaseReadLock();    }    startNextRound(round);  }  if (isCurrentEvent()) {    closeCurrent();  }  if (isCurrentStep()) {    closeCurrent();  }  if (!isCurrentRound()) {    throw new IllegalStateException("Not in a round");  }  final Step currentStep=new Step(stepName,delegateName,player,m_history.getChanges().size(),stepDisplayName);  addToAndSetCurrent(currentStep);}  }
class C{  protected void writeSuperTagCallBody(String method,boolean hasReturn) throws IOException {  writer.fwrite("try {\n");  writer.indent();  writer.fwrite((hasReturn ? "return super." : "super."));  writer.write(method);  writer.write("();\n");  writer.outdent();  writer.fwrite("} catch (Exception e) {\n");  writer.indent();  writer.fwrite("Throwable root = e;\n");  writer.fwrite("while (root.getCause() != null) {\n");  writer.indent();  writer.fwrite("root = root.getCause();\n");  writer.outdent();  writer.fwrite("}\n");  writer.fwrite("throw new JspException(root);\n");  writer.outdent();  writer.fwrite("}\n");}  }
class C{  private int deleteFileFromStorage(String fileName){  Storage tempStorage=null;  File tempFile=null;  int msg=DataCloudTags.FILE_DELETE_ERROR;  for (int i=0; i < getStorageList().size(); i++) {    tempStorage=getStorageList().get(i);    tempFile=tempStorage.getFile(fileName);    tempStorage.deleteFile(fileName,tempFile);    msg=DataCloudTags.FILE_DELETE_SUCCESSFUL;  }  return msg;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.STATE_INTERNAL___COMMENT_1:    return ((InternalEList<?>)getComment_1()).basicRemove(otherEnd,msgs);case UmplePackage.STATE_INTERNAL___STATE_ENTITY_1:  return ((InternalEList<?>)getStateEntity_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  @Override protected Money handleTransactionThatIsALateRepaymentOfInstallment(final LoanRepaymentScheduleInstallment currentInstallment,final List<LoanRepaymentScheduleInstallment> installments,final LoanTransaction loanTransaction,final Money transactionAmountUnprocessed,List<LoanTransactionToRepaymentScheduleMapping> transactionMappings){  return handleTransactionThatIsOnTimePaymentOfInstallment(currentInstallment,loanTransaction,transactionAmountUnprocessed,transactionMappings);}  }
class C{  public DViewKeyPair(JDialog parent,String title,PrivateKey privateKey,X509Certificate[] certificateChain,Provider provider){  super(parent,title,ModalityType.DOCUMENT_MODAL);  this.privateKey=privateKey;  this.certificateChain=certificateChain;  this.provider=provider;  initComponents();}  }
class C{  @Override public void onIinLookupComplete(IinDetailsResponse iinResponse){  if (iinResponse.equals(iinDetailsResponse)) {    return;  }  this.iinDetailsResponse=iinResponse;  if (iinResponse.getStatus() == IinStatus.UNKNOWN) {    validationRenderHelper.renderValidationMessage(new ValidationErrorMessage(LUHN_ERROR_ID,CARDNUMBER_POSTFIX,null),inputDataPersister.getPaymentItem());    removeDrawableInEditText();    coBrandRenderer.removeIinCoBrandNotification(renderInputFieldsLayout,CARDNUMBER_POSTFIX);    return;  }  if (iinResponse.getStatus() == IinStatus.NOT_ENOUGH_DIGITS) {    validationRenderHelper.removeValidationMessage((ViewGroup)iinEditText.getParent(),CARDNUMBER_POSTFIX);    coBrandRenderer.removeIinCoBrandNotification(renderInputFieldsLayout,CARDNUMBER_POSTFIX);    return;  }  if (iinResponse.getStatus() == IinStatus.EXISTING_BUT_NOT_ALLOWED) {    validationRenderHelper.renderValidationMessage(new ValidationErrorMessage(NOT_ALLOWED_IN_CONTEXT_ERROR_ID,CARDNUMBER_POSTFIX,null),inputDataPersister.getPaymentItem());    removeDrawableInEditText();    coBrandRenderer.removeIinCoBrandNotification(renderInputFieldsLayout,CARDNUMBER_POSTFIX);    return;  }  validationRenderHelper.removeValidationMessage((ViewGroup)iinEditText.getParent(),CARDNUMBER_POSTFIX);  List<IinDetail> coBrands=iinResponse.getCoBrands();  if (coBrands != null) {    for (    IinDetail coBrand : coBrands) {      if (coBrand.isAllowedInContext() && inputDataPersister.getPaymentItem().getId().equals(coBrand.getPaymentProductId())) {        showDrawableInEditText(coBrand.getPaymentProductId());        renderAndGetCobrands();        return;      }    }  }  session.getPaymentProduct(PaymentInputActivity.this,iinResponse.getPaymentProductId(),paymentContext,PaymentInputActivity.this);}  }
class C{  public DViewAsymmetricKeyFields(JDialog parent,String title,RSAPublicKey rsaPublicKey){  super(parent,title,Dialog.ModalityType.DOCUMENT_MODAL);  key=rsaPublicKey;  initFields();}  }
class C{  public CertificateVerify(byte[] hash){  if (hash == null || hash.length == 0) {    fatalAlert(AlertProtocol.INTERNAL_ERROR,"INTERNAL ERROR: incorrect certificate verify hash");  }  this.signedHash=hash;  length=hash.length + 2;}  }
class C{  public void showMenu(){  mSlidingMenu.showMenu();}  }
class C{  public ExpressionParserBuilder withDynamics(Resolver resolver){  dynamicsResolvers.add(resolver);  return this;}  }
class C{  private void updateAlternativeField(){  final ISearcher searcher=(ISearcher)m_typeBox.getSelectedItem();  if (searcher != null) {    m_altField.setText(searcher.getAlternativeString(m_inputField.getText()));  }}  }
class C{  protected void onStop(double totalMillis,double lastMillis,String reason){}  }
class C{  public Object evaluate(URI uri) throws CompilationFailedException, IOException {  return evaluate(new GroovyCodeSource(uri));}  }
class C{  private double[] alphafunction(double[] x){  if (numberOfObjectives == 2) {    if (pType == 21) {      return new double[]{x[0],1 - Math.sqrt(x[0])};    } else     if (pType == 22) {      return new double[]{x[0],1 - x[0] * x[0]};    } else     if (pType == 23) {      return new double[]{x[0],1 - Math.sqrt(x[0]) - x[0] * Math.sin(10 * x[0] * x[0]* Math.PI)};    } else     if (pType == 24) {      return new double[]{x[0],1 - x[0] - 0.05 * Math.sin(4 * Math.PI * x[0])};    } else {      throw new IllegalStateException();    }  } else   if (numberOfObjectives == 3) {    if (pType == 31) {      return new double[]{Math.cos(x[0] * Math.PI / 2) * Math.cos(x[1] * Math.PI / 2),Math.cos(x[0] * Math.PI / 2) * Math.sin(x[1] * Math.PI / 2),Math.sin(x[0] * Math.PI / 2)};    } else     if (pType == 32) {      return new double[]{1 - Math.cos(x[0] * Math.PI / 2) * Math.cos(x[1] * Math.PI / 2),1 - Math.cos(x[0] * Math.PI / 2) * Math.sin(x[1] * Math.PI / 2),1 - Math.sin(x[0] * Math.PI / 2)};    } else     if (pType == 33) {      return new double[]{x[0],x[1],3 - (Math.sin(3 * Math.PI * x[0]) + Math.sin(3 * Math.PI * x[1])) - 2 * (x[0] + x[1])};    } else     if (pType == 34) {      return new double[]{x[0] * x[1],x[0] * (1 - x[1]),(1 - x[0])};    } else {      throw new IllegalStateException();    }  } else {    throw new IllegalStateException();  }}  }
class C{  private void sendHandshakeDescriptionStatsRequest(){  OFDescStatsRequest descStatsRequest=factory.buildDescStatsRequest().setXid(handshakeTransactionIds--).build();  mainConnection.write(descStatsRequest);}  }
class C{  public static void main(String[] args) throws DocumentListException, IOException, ServiceException, InterruptedException {  SimpleCommandLineParser parser=new SimpleCommandLineParser(args);  String authSub=parser.getValue("authSub","auth","a");  String user=parser.getValue("username","user","u");  String password=parser.getValue("password","pass","p");  String host=parser.getValue("host","s");  boolean help=parser.containsKey("help","h");  if (host == null) {    host=DocumentList.DEFAULT_HOST;  }  if (help || (user == null || password == null) && authSub == null) {    printMessage(USAGE_MESSAGE);    System.exit(1);  }  if (parser.containsKey("log","l")) {    turnOnLogging();  }  DocumentListDemo demo=new DocumentListDemo(System.out,APPLICATION_NAME,host);  if (password != null) {    demo.login(user,password);  } else {    demo.login(authSub);  }  demo.run();}  }
class C{  protected Node newNode(){  return new SVGOMMultiImageElement();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:50.418 -0400",hash_original_method="ACA20742F9E22A6D5539033955270B30",hash_generated_method="617FEADF89CAB1A9DD7AEACA6F0D2EF6") public static long readSwappedUnsignedInteger(InputStream input) throws IOException {  int value1=read(input);  int value2=read(input);  int value3=read(input);  int value4=read(input);  long low=(((value1 & 0xff) << 0) + ((value2 & 0xff) << 8) + ((value3 & 0xff) << 16));  long high=value4 & 0xff;  return (high << 24) + (0xffffffffL & low);}  }
class C{  private static List<Section> parse(InputStream is,boolean readMetaOnly){  try {    if (is.read() != 0xff || is.read() != M_SOI) {      return null;    }    List<Section> sections=new ArrayList<Section>();    int c;    while ((c=is.read()) != -1) {      if (c != 0xff) {        return null;      }      while ((c=is.read()) == 0xff) {      }      if (c == -1) {        return null;      }      int marker=c;      if (marker == M_SOS) {        if (!readMetaOnly) {          Section section=new Section();          section.marker=marker;          section.length=-1;          section.data=new byte[is.available()];          is.read(section.data,0,section.data.length);          sections.add(section);        }        return sections;      }      int lh=is.read();      int ll=is.read();      if (lh == -1 || ll == -1) {        return null;      }      int length=lh << 8 | ll;      if (!readMetaOnly || c == M_APP1) {        Section section=new Section();        section.marker=marker;        section.length=length;        section.data=new byte[length - 2];        is.read(section.data,0,length - 2);        sections.add(section);      } else {        is.skip(length - 2);      }    }    return sections;  } catch (  IOException e) {    Log.d(TAG,"Could not parse file.",e);    return null;  } finally {    if (is != null) {      try {        is.close();      } catch (      IOException e) {      }    }  }}  }
class C{  public void add(float summand){  this.points[0]+=summand;  this.points[1]+=summand;  this.points[2]+=summand;}  }
class C{  public Http1ClientCodec(int maxInitialLineLength,int maxHeaderSize,int maxChunkSize,boolean failOnMissingResponse,boolean validateHeaders){  init(new Decoder(maxInitialLineLength,maxHeaderSize,maxChunkSize,validateHeaders),new Encoder());  this.failOnMissingResponse=failOnMissingResponse;}  }
class C{  protected void put(String propName,Object propValue){  properties.put(propName,propValue);}  }
class C{  public synchronized long size(){  return size;}  }
class C{  public void logError(Throwable exception){  LogUtils.logError(log,exception,"Unexpected Exception");}  }
class C{  protected void doNodeConnect(Node n){  if (!shutDown && n.getNodeId() < syncManager.getLocalNodeId()) {    Short nodeId=n.getNodeId();synchronized (connections) {      NodeConnection c=connections.get(n.getNodeId());      if (c == null) {        connections.put(nodeId,c=new NodeConnection());      }      if (logger.isTraceEnabled()) {        logger.trace("[{}->{}] Connection state: {}",new Object[]{syncManager.getLocalNodeId(),nodeId,c.state});      }      if (c.state.equals(NodeConnectionState.NONE)) {        if (logger.isDebugEnabled()) {          logger.debug("[{}->{}] Attempting connection {} {}",new Object[]{syncManager.getLocalNodeId(),nodeId,n.getHostname(),n.getPort()});        }        SocketAddress sa=new InetSocketAddress(n.getHostname(),n.getPort());        c.pendingFuture=clientBootstrap.connect(sa);        c.pendingFuture.addListener(new ConnectCFListener(n));        c.state=NodeConnectionState.PENDING;      }    }  }}  }
class C{  public Double(){  setSize(0.0,0.0);}  }
class C{  public boolean isStructurallyIdentical(SessionNode node){  if (node == null) {    return false;  }  Set<Class> set1=new HashSet<>(Arrays.asList(getModelClasses()));  Set<Class> set2=new HashSet<>(Arrays.asList(node.getModelClasses()));  if (!set1.equals(set2)) {    return false;  }  Class[] arr1=this.getModelParamTypes();  Class[] arr2=node.getModelParamTypes();  if ((arr1 != null) && (arr2 != null)) {    if (arr1.length != arr2.length) {      return false;    }    for (int i=0; i < arr1.length; i++) {      if (!arr1[i].equals(arr2[i])) {        return false;      }    }  } else   if ((arr1 == null) && (arr2 != null)) {    return false;  }  Object model1=getModel();  Object model2=node.getModel();  if ((model1 == null) && (model2 != null)) {    return false;  } else   if ((model1 != null) && (model2 == null)) {    return false;  } else   if ((model1 != null) && !model1.equals(model2)) {    return false;  }  set1.clear();  for (  SessionNode sessionNode : getParents()) {    Object model=sessionNode.getModel();    if (model != null) {      set1.add(model.getClass());    }  }  set2.clear();  for (  SessionNode sessionNode1 : node.getParents()) {    Object model=sessionNode1.getModel();    if (model != null) {      set2.add(model.getClass());    }  }  if (!set1.equals(set2)) {    return false;  }  set1.clear();  for (  SessionNode sessionNode2 : this.getChildren()) {    Object model=sessionNode2.getModel();    if (model != null) {      set1.add(model.getClass());    }  }  set2.clear();  for (  SessionNode sessionNode3 : node.getChildren()) {    Object model=sessionNode3.getModel();    if (model != null) {      set2.add(model.getClass());    }  }  return set1.equals(set2);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public boolean hasHref(){  return super.hasAttribute(HREF);}  }
class C{  public LinearRing(Coordinate points[],PrecisionModel precisionModel,int SRID){  this(points,new GeometryFactory(precisionModel,SRID));  validateConstruction();}  }
class C{  protected LocoNetMessage startIBComPT(){  LocoNetMessage m=new LocoNetMessage(7);  m.setOpCode(LnConstants.OPC_PEER_XFER);  m.setElement(1,0x07);  m.setElement(2,0x01);  m.setElement(3,0x49);  m.setElement(4,0x42);  m.setElement(5,0x41);  return m;}  }
class C{  private void adjustKNNDistance(RdKNNEntry entry,ArrayDBIDs ids,List<? extends KNNList> knnLists){  RdKNNNode node=getNode(entry);  double knnDist_node=0.;  if (node.isLeaf()) {    for (int i=0; i < node.getNumEntries(); i++) {      RdKNNEntry leafEntry=node.getEntry(i);      DBID id=((LeafEntry)leafEntry).getDBID();      int pos=ids.binarySearch(id);      if (pos >= 0) {        leafEntry.setKnnDistance(knnLists.get(pos).getKNNDistance());      }      knnDist_node=Math.max(knnDist_node,leafEntry.getKnnDistance());    }  } else {    for (int i=0; i < node.getNumEntries(); i++) {      RdKNNEntry dirEntry=node.getEntry(i);      adjustKNNDistance(dirEntry,ids,knnLists);      knnDist_node=Math.max(knnDist_node,dirEntry.getKnnDistance());    }  }  entry.setKnnDistance(knnDist_node);}  }
class C{  public boolean contains(E e){  int bucketIndex=hash(e.hashCode());  if (table[bucketIndex] != null) {    LinkedList<E> bucket=table[bucketIndex];    for (    E element : bucket)     if (element.equals(e))     return true;  }  return false;}  }
class C{  public boolean isGreaterThen(Percent Percent){  assertDefined();  BigDecimal thisValue=notNull(this);  BigDecimal parameter=notNull(Percent);  return (thisValue.compareTo(parameter) > 0);}  }
class C{  @Override public void onUIRefreshComplete(PtrFrameLayout frame){  mDrawable.stop();}  }
class C{  protected int y(double yW){  return (int)Math.round(scale * (yW + offsetY) + borderTop);}  }
class C{  public boolean approveIt(){  log.info(toString());  setIsApproved(true);  return true;}  }
class C{  public static String stripPrefix(String value,String prefix){  if (value != null && prefix != null && value.startsWith(prefix)) {    return value.substring(prefix.length());  }  return value;}  }
class C{  public void beHealthy(){  TCPConduit tc=this.conduit;  if (tc != null) {    tc.beHealthy();  }}  }
class C{  private List<FileDescriptor> prepareFileDescriptors(List<FileShare> filesystems,VirtualPoolCapabilityValuesWrapper cosCapabilities,String suggestedId){  final List<FileDescriptor> fileDescriptors=new ArrayList<FileDescriptor>();  for (  FileShare filesystem : filesystems) {    FileDescriptor.Type fileType=FileDescriptor.Type.FILE_MIRROR_SOURCE;    if (cosCapabilities.createMirrorExistingFileSystem()) {      fileType=FileDescriptor.Type.FILE_EXISTING_MIRROR_SOURCE;    }    if (filesystem.getPersonality() != null && filesystem.getPersonality().equals(FileShare.PersonalityTypes.TARGET.toString())) {      fileType=FileDescriptor.Type.FILE_MIRROR_TARGET;    }    VirtualPoolCapabilityValuesWrapper vpoolCapabilities=new VirtualPoolCapabilityValuesWrapper(cosCapabilities);    FileDescriptor desc=new FileDescriptor(fileType,filesystem.getStorageDevice(),filesystem.getId(),filesystem.getPool(),filesystem.getCapacity(),vpoolCapabilities,null,suggestedId);    fileDescriptors.add(desc);  }  return fileDescriptors;}  }
class C{  private static void initializePropertiesIfNeeded(){  if (translationResources != null) {    return;  }  String lastException="";  try {    translationResources=new Properties();    ClassLoader classLoader=ClassLoader.getSystemClassLoader();    translationResources.load(classLoader.getResourceAsStream(propertiesFileName));  } catch (  Exception exception) {    lastException=exception.toString() + "\n----\n" + exception.getMessage();  }  if (translationResources == null) {    throw new RuntimeException("TranslationSource.initializePropertiesIfNeeded()" + "Could not load TranslationResources.properties file.\n" + "The exception follows:\n"+ lastException);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node oldChild;  Node newChild;  NodeList elementList;  Node elementNode;  Node replacedNode;  doc=(Document)load("staff",true);  newChild=doc.createElement("newChild");  oldChild=doc.createElement("oldChild");  elementList=doc.getElementsByTagName("employee");  elementNode=elementList.item(1);{    boolean success=false;    try {      replacedNode=elementNode.replaceChild(newChild,oldChild);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NOT_FOUND_ERR);    }    assertTrue("throw_NOT_FOUND_ERR",success);  }}  }
class C{  public final Object firstElement(){  return m_Objects[0];}  }
class C{  public void testRegister2(){  Phaser phaser=new Phaser(0);  assertState(phaser,0,0,0);  assertEquals(0,phaser.bulkRegister(maxParties - 10));  assertState(phaser,0,maxParties - 10,maxParties - 10);  for (int i=0; i < 10; i++) {    assertState(phaser,0,maxParties - 10 + i,maxParties - 10 + i);    assertEquals(0,phaser.register());  }  assertState(phaser,0,maxParties,maxParties);  try {    phaser.register();    shouldThrow();  } catch (  IllegalStateException success) {  }  try {    phaser.bulkRegister(Integer.MAX_VALUE);    shouldThrow();  } catch (  IllegalStateException success) {  }  assertEquals(0,phaser.bulkRegister(0));  assertState(phaser,0,maxParties,maxParties);}  }
class C{  public V add(String key,V value){  key=canonicalCase(key);  TrieNode<V> node=root;  int i=0;  while (i < key.length()) {    TrieEdge<V> edge=node.get(key.charAt(i));    if (edge == null) {      TrieNode<V> newNode=new TrieNode<V>(value);      node.put(key.substring(i),newNode);      return null;    }    String label=edge.getLabel();    int j=match(key,i,key.length(),label);    assert j != 0 : "Label didn't start with prefix[0].";    if (j >= 0) {      TrieNode<V> child=edge.getChild();      TrieNode<V> intermediate=new TrieNode<V>();      String a=label.substring(0,j);      String b=label.substring(j);      String c=key.substring(i + j);      if (c.length() > 0) {        TrieNode<V> newNode=new TrieNode<V>(value);        node.remove(label.charAt(0));        node.put(a,intermediate);        intermediate.put(b,child);        intermediate.put(c,newNode);      } else {        node.remove(label.charAt(0));        node.put(a,intermediate);        intermediate.put(b,child);        intermediate.setValue(value);      }      return null;    }    assert j == -1 : "Bad return value from match: " + i;    node=edge.getChild();    i+=label.length();  }  V ret=node.getValue();  node.setValue(value);  return ret;}  }
class C{  private void buildString(StringBuilder sb,TwoDNode node){  if (node == null) {    return;  }  TwoDNode left=node.getBelow();  TwoDNode right=node.getAbove();  if (left != null) {    buildString(sb,left);  }  sb.append(node.toString());  if (right != null) {    buildString(sb,right);  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4mfPackage.TESTED_PROJECT__VERSION_CONSTRAINT:    setVersionConstraint((VersionConstraint)null);  return;case N4mfPackage.TESTED_PROJECT__DECLARED_SCOPE:setDeclaredScope(DECLARED_SCOPE_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:53.859 -0500",hash_original_method="E7A2FB4AC135D29D78CE09D5448C290F",hash_generated_method="74B066602ECC20A74FD97E770D65E8BD") public String encodeBody(){  return encodeBody(new StringBuffer()).toString();}  }
class C{  public void objectRemoved(NamingEvent namingEvent){  try {    LdapName ldapName=new LdapName(namingEvent.getOldBinding().getName());    String match=null;    for (    Rdn rdn : ldapName.getRdns()) {      if (rdn.getType().equals("uid")) {        match=rdn.getValue().toString();      }    }    Set<Role> roles=securityRepository.getMatch(match);    List<Role> rolesToRemove=new ArrayList<>();    for (    Rdn rdn : ldapName.getRdns()) {      if (rdn.getValue().equals(writePermissionValue)) {        logger.debug("Removing write permission");        for (        Role role : roles) {          if (role.isSend()) {            rolesToRemove.add(role);          }        }      } else       if (rdn.getValue().equals(readPermissionValue)) {        logger.debug("Removing read permission");        for (        Role role : roles) {          if (role.isConsume()) {            rolesToRemove.add(role);          }        }      } else       if (rdn.getValue().equals(adminPermissionValue)) {        logger.debug("Removing admin permission");        for (        Role role : roles) {          if (role.isCreateDurableQueue() || role.isCreateNonDurableQueue() || role.isDeleteDurableQueue()|| role.isDeleteNonDurableQueue()) {            rolesToRemove.add(role);          }        }      }      for (      Role roleToRemove : rolesToRemove) {        roles.remove(roleToRemove);      }    }  } catch (  NamingException e) {    e.printStackTrace();  }}  }
class C{  public boolean isFinal(){  return false;}  }
class C{  public double computeAverageEntropyOfObservation1(){  double entropy=0.0;  for (int b=0; b < totalObservations; b++) {    double prob=mvke.getProbability(contObservations[b]);    double cont=0.0;    if (prob > 0.0) {      cont=-Math.log(prob);    }    entropy+=cont;    if (debug) {      System.out.println(b + ": " + prob+ " -> "+ cont / Math.log(2.0) + " -> sum: " + (entropy / Math.log(2.0)));    }  }  return entropy / (double)totalObservations / Math.log(2.0);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected MapMetaBuilder(final MapMeta meta){  this.meta=meta.clone();}  }
class C{  public void createSuccessNullCapacity(){  new Island(null);}  }
class C{  protected SpecificationElementImpl(){  super();}  }
class C{  public JBrowserDriver(){  this(Settings.builder().build());}  }
class C{  public SnapshotException(){}  }
class C{  public static IJavaProject createJavaProject(String projectName) throws CoreException {  return createProject(projectName,PreferenceConstants.getDefaultJRELibrary());}  }
class C{  private Response processCapabilityExchange(){  ViewerResponse.CapabilityExchange.Builder capabilityExchangeBuilder=ViewerResponse.CapabilityExchange.newBuilder();  Capability.Builder c1=Capability.newBuilder();  c1.setCapability(RequestType.CAPABILITY_EXCHANGE);  capabilityExchangeBuilder.addCapabilities(c1);  Capability.Builder c2=Capability.newBuilder();  c2.setCapability(RequestType.ADD_LOG);  capabilityExchangeBuilder.addCapabilities(c2);  Capability.Builder c3=Capability.newBuilder();  c3.setCapability(RequestType.ADD_LOG_BRANCH);  capabilityExchangeBuilder.addCapabilities(c3);  Capability.Builder c4=Capability.newBuilder();  c4.setCapability(RequestType.ADD_LOG_ENTRY);  capabilityExchangeBuilder.addCapabilities(c4);  Capability.Builder c5=Capability.newBuilder();  c5.setCapability(RequestType.DISCONNECT_LOG);  capabilityExchangeBuilder.addCapabilities(c5);  ViewerResponse.Builder viewerResponseBuilder=ViewerResponse.newBuilder();  viewerResponseBuilder.setResponseType(ViewerResponse.ResponseType.CAPABILITY_EXCHANGE);  viewerResponseBuilder.setCapabilityExchange(capabilityExchangeBuilder);  return buildResponse(viewerResponseBuilder);}  }
class C{  @Override public Size2D arrange(BlockContainer container,Graphics2D g2,RectangleConstraint constraint){  LengthConstraintType w=constraint.getWidthConstraintType();  LengthConstraintType h=constraint.getHeightConstraintType();  if (w == LengthConstraintType.NONE) {    if (h == LengthConstraintType.NONE) {      return arrangeNN(container,g2);    } else     if (h == LengthConstraintType.FIXED) {      return arrangeNF(container,g2,constraint);    } else     if (h == LengthConstraintType.RANGE) {      return arrangeNR(container,g2,constraint);    }  } else   if (w == LengthConstraintType.FIXED) {    if (h == LengthConstraintType.NONE) {      return arrangeFN(container,g2,constraint);    } else     if (h == LengthConstraintType.FIXED) {      return arrangeFF(container,g2,constraint);    } else     if (h == LengthConstraintType.RANGE) {      return arrangeFR(container,g2,constraint);    }  } else   if (w == LengthConstraintType.RANGE) {    if (h == LengthConstraintType.NONE) {      return arrangeRN(container,g2,constraint);    } else     if (h == LengthConstraintType.FIXED) {      return arrangeRF(container,g2,constraint);    } else     if (h == LengthConstraintType.RANGE) {      return arrangeRR(container,g2,constraint);    }  }  throw new RuntimeException("Should never get to here!");}  }
class C{  public ReaderAccessibleInfo(ArrayBasedLongToInternalIntFixedLengthBiMap[] maps,int[] mapIndexOffsets,int[] cumulativeMapLengths){  this.maps=maps;  this.mapIndexOffsets=mapIndexOffsets;  this.cumulativeMapLengths=cumulativeMapLengths;}  }
class C{  public int integralHeatSinkCapacity(boolean compact){  if (compact) {    return (engineRating / 25) * 2;  } else {    return engineRating / 25;  }}  }
class C{  LuaString loadString() throws IOException {  int size=this.luacSizeofSizeT == 8 ? (int)loadInt64() : loadInt();  if (size == 0)   return null;  byte[] bytes=new byte[size];  is.readFully(bytes,0,size);  return LuaString.valueOf(bytes,0,bytes.length - 1);}  }
class C{  public void remove(K name){  map.remove(name);}  }
class C{  public static String returnNull(HttpServletRequest request,HttpServletResponse response){  return null;}  }
class C{  public void testApp(){  assertTrue(true);}  }
class C{  public static boolean needsShift(int keycode){  if ('A' <= keycode && keycode <= 'Z') {    return true;  }  if (lowerToUpper.contains(keycode)) {    return true;  }  return false;}  }
class C{  public boolean hasAlbumIdExt(){  return hasExtension(GphotoAlbumId.class);}  }
class C{  public int obtain(){synchronized (this) {    int candidate=this.ctr;    int result=nextClearBit(candidate);    if (result == -1 && candidate != 0) {      result=nextClearBit(0);    }    if (result == -1) {      throw new IllegalStateException(LocalizedStrings.UniqueIdGenerator_RAN_OUT_OF_MESSAGE_IDS.toLocalizedString());    } else {      setBit(result);      if (result == MAX_ID) {        this.ctr=0;      } else {        this.ctr=result + 1;      }      return result;    }  }}  }
class C{  public void resetOriginals(){  mStartingStartTrim=0;  mStartingEndTrim=0;  mStartingRotation=0;  setStartTrim(0);  setEndTrim(0);  setRotation(0);}  }
class C{  public T caseAnonymous_moreCode_1_(Anonymous_moreCode_1_ object){  return null;}  }
class C{  public MutableDateTime(int year,int monthOfYear,int dayOfMonth,int hourOfDay,int minuteOfHour,int secondOfMinute,int millisOfSecond,Chronology chronology){  super(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond,chronology);}  }
class C{  protected void containerVmDeallocate(ContainerVm containerVm){  getContainerVmRamProvisioner().deallocateRamForContainerVm(containerVm);  getContainerVmBwProvisioner().deallocateBwForContainerVm(containerVm);  getContainerVmScheduler().deallocatePesForVm(containerVm);  setStorage(getStorage() + containerVm.getSize());}  }
class C{  public static int width(List<Type> types){  int w=0;  for (List<Type> l=types; l.nonEmpty(); l=l.tail)   w=w + width(l.head);  return w;}  }
class C{  private JVMStats retrievePeriodicStats(){  JVMStats currentState;  try {    currentState=this.reportTestCase.host.getServiceState(null,JVMStats.class,this.jvmStatsInstanceUri);  } catch (  Throwable throwable) {    currentState=new JVMStats();    throwable.printStackTrace();  }  return currentState;}  }
class C{  public void antientropy(){  ArrayList<Node> candidates=new ArrayList<Node>();  for (  Node n : clusterConfig.getNodes())   if (rpcService.isConnected(n.getNodeId()))   candidates.add(n);  int numNodes=candidates.size();  if (numNodes == 0)   return;  Node[] nodes=candidates.toArray(new Node[numNodes]);  int rn=random.nextInt(numNodes);  antientropy(nodes[rn]);}  }
class C{  private Object[] ensureCapacity(int minCapacity){  if (tmp.length < minCapacity) {    int newSize=minCapacity;    newSize|=newSize >> 1;    newSize|=newSize >> 2;    newSize|=newSize >> 4;    newSize|=newSize >> 8;    newSize|=newSize >> 16;    newSize++;    if (newSize < 0)     newSize=minCapacity; else     newSize=Math.min(newSize,a.length >>> 1);    @SuppressWarnings({"unchecked","UnnecessaryLocalVariable"}) Object[] newArray=new Object[newSize];    tmp=newArray;  }  return tmp;}  }
class C{  public String value(){  return this.value;}  }
class C{  public static boolean endsWithChar(String s,char c){  if (s.length() == 0) {    return false;  }  return s.charAt(s.length() - 1) == c;}  }
class C{  public float paint(Graphics2D g,float x,float y,RSyntaxTextArea host,TabExpander e,float clipStart){  int origX=(int)x;  int end=textOffset + textCount;  float nextX=x;  int flushLen=0;  int flushIndex=textOffset;  Color fg=host.getForegroundForToken(this);  Color bg=host.getBackgroundForTokenType(type);  g.setFont(host.getFontForTokenType(type));  FontMetrics fm=host.getFontMetricsForTokenType(type);  for (int i=textOffset; i < end; i++) {switch (text[i]) {case '\t':      nextX=e.nextTabStop(x + fm.charsWidth(text,flushIndex,flushLen),0);    if (bg != null) {      paintBackground(x,y,nextX - x,fm.getHeight(),g,fm.getAscent(),host,bg);    }  if (flushLen > 0) {    g.setColor(fg);    g.drawChars(text,flushIndex,flushLen,(int)x,(int)y);    flushLen=0;  }flushIndex=i + 1;x=nextX;break;default :flushLen+=1;break;}}nextX=x + fm.charsWidth(text,flushIndex,flushLen);if (flushLen > 0 && nextX >= clipStart) {if (bg != null) {paintBackground(x,y,nextX - x,fm.getHeight(),g,fm.getAscent(),host,bg);}g.setColor(fg);g.drawChars(text,flushIndex,flushLen,(int)x,(int)y);}if (host.getUnderlineForToken(this)) {g.setColor(fg);int y2=(int)(y + 1);g.drawLine(origX,y2,(int)nextX,y2);}return nextX;}  }
class C{  public synchronized void add(String category,double minValue,double maxValue){  super.add(category,minValue);  mMaxValues.add(maxValue);}  }
class C{  void processMethod(ExecutableElement method) throws IOException {  generateMethodImplementation(method);  generatePrivateNativeStub(method);}  }
class C{  public static IgniteConfiguration configuration() throws IgniteException {  IgniteConfiguration cfg=new IgniteConfiguration();  cfg.setLocalHost("127.0.0.1");  cfg.setPeerClassLoadingEnabled(true);  SharedFsCheckpointSpi checkpointSpi=new SharedFsCheckpointSpi();  checkpointSpi.setDirectoryPaths(Collections.singletonList("work/checkpoint/sharedfs"));  cfg.setCheckpointSpi(checkpointSpi);  TcpDiscoverySpi discoSpi=new TcpDiscoverySpi();  TcpDiscoveryVmIpFinder ipFinder=new TcpDiscoveryVmIpFinder();  ipFinder.setAddresses(Arrays.asList("127.0.0.1:47500..47509"));  discoSpi.setIpFinder(ipFinder);  cfg.setDiscoverySpi(discoSpi);  return cfg;}  }
class C{  public EOFException(java.lang.String s){}  }
class C{  public void put(String oldname,String newname){  if (oldname == newname)   return;  String oldname2=toJvmName(oldname);  String s=(String)get(oldname2);  if (s == null || !s.equals(oldname2))   super.put(oldname2,toJvmName(newname));}  }
class C{  public final Key doPhase(Key key,boolean lastPhase) throws InvalidKeyException, IllegalStateException {  chooseFirstProvider();  return spi.engineDoPhase(key,lastPhase);}  }
class C{  public Word toWord(){  return null;}  }
class C{  public Stream<InteractionDefinition> toRelations(String type,String subType){  return pairs.stream().map(null);}  }
class C{  public void execute(Runnable command){  if (command == null)   throw new NullPointerException();  int c=ctl.get();  if (workerCountOf(c) < corePoolSize) {    if (addWorker(command,true))     return;    c=ctl.get();  }  if (runStateOf(c) == RUNNING && workQueue.offer(command)) {    int recheck=ctl.get();    if (runStateOf(recheck) >= STOP && remove(command))     reject(command); else     if (workerCountOf(recheck) == 0)     addWorker(null,false);  } else   if (!addWorker(command,false))   reject(command);}  }
class C{  private void changeDynamicsTarget(int block,float target){  incrementAndGetDrawPass();  mDestinationValues[block].setTargetPosition(target);}  }
class C{  @Override public final boolean equals(Object obj){  return super.equals(obj);}  }
class C{  @Override public synchronized void destroy(){  destroyed=true;  for (  Thread t : workersThreads) {    t.interrupt();  }  notifyAll();}  }
class C{  public static final double[][] timesTranspose(final double[][] m1,final double[][] m2){  assert (getColumnDimensionality(m2) == getColumnDimensionality(m1)) : ERR_MATRIX_INNERDIM;  final double[][] re=new double[m1.length][m2.length];  for (int j=0; j < re.length; j++) {    final double[] Browj=m2[j];    for (int i=0; i < m1.length; i++) {      final double[] Arowi=m1[i];      double s=0;      for (int k=0; k < Browj.length; k++) {        s+=Arowi[k] * Browj[k];      }      re[i][j]=s;    }  }  return re;}  }
class C{  static int remainderArrayByInt(int src[],final int srcLength,final int divisor){  long result=0;  for (int i=srcLength - 1; i >= 0; i--) {    long temp=(result << 32) + (src[i] & 0xffffffffL);    long res=divideLongByInt(temp,divisor);    result=(int)(res >> 32);  }  return (int)result;}  }
class C{  public static void clear(AbstractFileSystem fs) throws IOException {  FileStatus[] statuses=fs.listStatus(new Path("/"));  if (statuses != null) {    for (    FileStatus stat : statuses)     fs.delete(stat.getPath(),true);  }}  }
class C{  @Override public boolean handles(ResultHistoryList history,int index){  return (getClassifier(history,index) != null);}  }
class C{  @Override public void clear(){  size=0;  for (int i=0; i < elementData.length; i++) {    elementData[i]=null;  }  modCount++;}  }
class C{  private void handleExpectedExceptionValidateSearchRequest(BusinessObjectDataSearchRequest request,String message){  boolean caughtException=false;  try {    businessObjectDataSearchHelper.validateBusinesObjectDataSearchRequest(request);  } catch (  IllegalArgumentException ex) {    caughtException=true;  }  Assert.isTrue(caughtException,message);}  }
class C{  public TemplateEngine(TemplateContextType contextType){  Assert.isNotNull(contextType);  fContextType=contextType;}  }
class C{  private static <K,V>ImmutableSortedMap<K,V> of(Comparator<? super K> comparator,K k1,V v1){  return new ImmutableSortedMap<K,V>(new RegularImmutableSortedSet<K>(ImmutableList.of(k1),checkNotNull(comparator)),ImmutableList.of(v1));}  }
class C{  public synchronized void reset(){  count=0;}  }
class C{  void composeMessage(final MimeMessageHelper helper,final String textContent,final String htmlContent,final Map<String,byte[]> attachments,final List<String> mailTemplateChain,final String shopCode,final String locale,final String templateName) throws MessagingException, ClassNotFoundException, IOException {  if (textContent == null || htmlContent == null) {    if (textContent != null) {      helper.setText(textContent,false);    }    if (htmlContent != null) {      helper.setText(htmlContent,true);      inlineResources(helper,htmlContent,mailTemplateChain,shopCode,locale,templateName);      addAttachments(helper,attachments);    }  } else {    helper.setText(textContent,htmlContent);    inlineResources(helper,htmlContent,mailTemplateChain,shopCode,locale,templateName);    addAttachments(helper,attachments);  }}  }
class C{  public OutputProperties(){  this(org.apache.xml.serializer.Method.XML);}  }
class C{  public Instantiation findOwner(final int i){  if (!subroutine.get(i)) {    return null;  }  if (!dualCitizens.get(i)) {    return this;  }  Instantiation own=this;  for (Instantiation p=previous; p != null; p=p.previous) {    if (p.subroutine.get(i)) {      own=p;    }  }  return own;}  }
class C{  public GutterIconInfo addOffsetTrackingIcon(int offs,Icon icon) throws BadLocationException {  Position pos=textArea.getDocument().createPosition(offs);  GutterIconImpl ti=new GutterIconImpl(icon,pos);  if (trackingIcons == null) {    trackingIcons=new ArrayList(1);  }  int index=Collections.binarySearch(trackingIcons,ti);  if (index < 0) {    index=-(index + 1);  }  trackingIcons.add(index,ti);  repaint();  return ti;}  }
class C{  public static double computeNewPriority_sigmoidFractionOfFriends(double priority,int sharedFriends,int myFriends){  double trustMultiplier=sigmoid(sharedFriends / (double)myFriends,0.3,13.0);  trustMultiplier=trustMultiplier + getGaussian(MEAN,VAR);  trustMultiplier=Math.min(trustMultiplier,1);  trustMultiplier=Math.max(trustMultiplier,0);  if (sharedFriends == 0) {    trustMultiplier=EPSILON_TRUST;  }  return priority * trustMultiplier;}  }
class C{  @Override public boolean equals(Object object){  if (this == object) {    return true;  }  if (object == null || getClass() != object.getClass()) {    return false;  }  ManifestFile that=(ManifestFile)object;  if (fileName != null ? !fileName.equals(that.fileName) : that.fileName != null) {    return false;  }  return true;}  }
class C{  public XATransactionEmulationDataSourceOnStandaloneConfigurationTest(String testName,EnvironmentTestData testData) throws Exception {  super(testName,testData);}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  public boolean inSensitiveArea(Point2D pt){  Shape sensitive=getSensitiveArea();  if (sensitive == null)   return false;  return sensitive.contains(pt);}  }
class C{  public void start(ClassPool pool) throws NotFoundException {  classPool=pool;  CtClass c=pool.get(sampleClass);  forwardMethod=c.getDeclaredMethod("forward");  forwardStaticMethod=c.getDeclaredMethod("forwardStatic");  proxyConstructorParamTypes=pool.get(new String[]{"javassist.tools.rmi.ObjectImporter","int"});  interfacesForProxy=pool.get(new String[]{"java.io.Serializable","javassist.tools.rmi.Proxy"});  exceptionForProxy=new CtClass[]{pool.get("javassist.tools.rmi.RemoteException")};}  }
class C{  public static synchronized HBaseClusterSingleton build() throws RuntimeException {  LOG.info("Retrieving cluster instance.");  if (cluster == null) {    cluster=new HBaseClusterSingleton();  }  return cluster;}  }
class C{  public void openSession(final File file,final SessionListener callback){  getSession().open(file,callback);}  }
class C{  public void put(int key,E value){  int i=ContainerHelpers.binarySearch(mKeys,mSize,key);  if (i >= 0) {    mValues[i]=value;  } else {    i=~i;    if (i < mSize && mValues[i] == DELETED) {      mKeys[i]=key;      mValues[i]=value;      return;    }    if (mGarbage && mSize >= mKeys.length) {      gc();      i=~ContainerHelpers.binarySearch(mKeys,mSize,key);    }    if (mSize >= mKeys.length) {      int n=ArrayUtils.idealIntArraySize(mSize + 1);      int[] nkeys=new int[n];      Object[] nvalues=new Object[n];      System.arraycopy(mKeys,0,nkeys,0,mKeys.length);      System.arraycopy(mValues,0,nvalues,0,mValues.length);      mKeys=nkeys;      mValues=nvalues;    }    if (mSize - i != 0) {      System.arraycopy(mKeys,i,mKeys,i + 1,mSize - i);      System.arraycopy(mValues,i,mValues,i + 1,mSize - i);    }    mKeys[i]=key;    mValues[i]=value;    mSize++;  }}  }
class C{  private List<URI> volumesToURIs(List<Volume> volumes){  List<URI> uris=new ArrayList<URI>();  for (  Volume v : volumes) {    uris.add(v.getId());  }  return uris;}  }
class C{  private static void checkErrors(Object object) throws LivingDocServerException {  if (object instanceof Exception) {    throw new LivingDocServerException(LivingDocServerErrorKey.CALL_FAILED,((Exception)object).getMessage());  }  if (object instanceof String) {    String msg=(String)object;    if (!StringUtils.isEmpty(msg) && msg.indexOf(LivingDocServerErrorKey.ERROR) > -1) {      String errorId=msg.replace(LivingDocServerErrorKey.ERROR,"");      log.error(errorId);      throw new LivingDocServerException(errorId,errorId);    }  }}  }
class C{  public String multiply(String num1,String num2){  if (num1 == null || num2 == null)   return "";  if (num1.equals("0") || num2.equals("0"))   return "0";  char[] c1=num1.toCharArray();  char[] c2=num2.toCharArray();  int m=c1.length;  int n=c2.length;  int[] res=new int[m + n];  for (int i=m - 1; i >= 0; i--) {    for (int j=n - 1; j >= 0; j--) {      res[m + n - i - j - 2]+=(c1[i] - '0') * (c2[j] - '0');      res[m + n - i - j - 1]+=res[m + n - i - j - 2] / 10;      res[m + n - i - j - 2]%=10;    }  }  StringBuilder ans=new StringBuilder();  for (int i=m + n - 1; i >= 0; i--) {    if (res[i] != 0) {      for (int j=i; j >= 0; j--)       ans.append(res[j]);      return ans.toString();    }  }  return "0";}  }
class C{  public FileCharReader(String fileName){  try {    bufferedReader=new BufferedReader(new InputStreamReader(new FileInputStream(fileName)));  } catch (  FileNotFoundException e) {    Debug.ReportError("Input file " + fileName + " not found.");  }  ;}  }
class C{  public KMLScreenBalloonImpl(ScreenBalloon balloon,KMLAbstractFeature feature){  super(feature);  if (balloon == null) {    String msg=Logging.getMessage("nullValue.BalloonIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  this.balloon=balloon;  this.initialize(balloon);}  }
class C{  public XmlElement(byte[] encodedDocument){  if (encodedDocument == null)   throw new IllegalArgumentException("value is null");  this.encoded=encodedDocument.clone();}  }
class C{  public OutputBitStream(final byte[] a){  os=null;  free=8;  buffer=a;  avail=a.length;  wrapping=true;  fileChannel=null;  repositionableStream=null;}  }
class C{  public DigitalSignatureValidationException(String message,ReasonEnum reason){  super(message);  bean.setReason(reason);  setMessageKey(getMessageKey() + "." + reason.toString());}  }
class C{  public static void main(String argv[]){  if (argv.length == 0) {    System.out.println("Usage : java Yylex <inputfile>");  } else {    for (int i=0; i < argv.length; i++) {      Yylex scanner=null;      try {        scanner=new Yylex(new java.io.FileReader(argv[i]));        do {          System.out.println(scanner.yylex());        } while (!scanner.zzAtEOF);      } catch (      java.io.FileNotFoundException e) {        System.out.println("File not found : \"" + argv[i] + "\"");      }catch (      java.io.IOException e) {        System.out.println("IO error scanning file \"" + argv[i] + "\"");        System.out.println(e);      }catch (      Exception e) {        System.out.println("Unexpected exception:");        e.printStackTrace();      }    }  }}  }
class C{  public boolean isDestroy(){  return this == DESTROY;}  }
class C{  public void wrap(final MutableDirectBuffer directBuffer,final int offset){  this.directBuffer=directBuffer;  this.offset=offset;}  }
class C{  int parseAmPmMarker(String source,int ofs) throws ParseException {  String markers[]=getDateFormatSymbols().getAmPmStrings();  for (int i=0; i < markers.length; i++) {    if (markers[i].equalsIgnoreCase(source)) {      return i;    }  }  char ch=source.charAt(0);  if (ch == markers[0].charAt(0)) {    return Calendar.AM;  }  if (ch == markers[1].charAt(0)) {    return Calendar.PM;  }  return throwInvalid("am/pm marker",ofs);}  }
class C{  public void clearCqQueryMap(){synchronized (cqQueryMapLock) {    cqQueryMap=new HashMap<String,CqQueryImpl>();  }}  }
class C{  public BranchesPropertiesControl(final Composite parent,final int style){  super(parent,style);  stackLayout=new StackLayout();  setLayout(stackLayout);  noBranchHistoryComposite=new Composite(this,SWT.NONE);  final GridLayout noBranchHistoryCompositeLayout=new GridLayout();  noBranchHistoryCompositeLayout.marginWidth=0;  noBranchHistoryCompositeLayout.marginHeight=0;  noBranchHistoryCompositeLayout.horizontalSpacing=getHorizontalSpacing();  noBranchHistoryCompositeLayout.verticalSpacing=getVerticalSpacing();  noBranchHistoryComposite.setLayout(noBranchHistoryCompositeLayout);  final Label noBranchesLabel=new Label(noBranchHistoryComposite,SWT.NONE);  noBranchesLabel.setLayoutData(new GridData(GridData.FILL,GridData.CENTER,true,false));  noBranchesLabel.setText(Messages.getString("BranchesPropertiesControl.NoBranchesLabelText"));  errorComposite=new Composite(this,SWT.NONE);  final GridLayout errorCompositeLayout=new GridLayout();  errorCompositeLayout.marginWidth=0;  errorCompositeLayout.marginHeight=0;  errorCompositeLayout.horizontalSpacing=getHorizontalSpacing();  errorCompositeLayout.verticalSpacing=getVerticalSpacing();  errorComposite.setLayout(errorCompositeLayout);  errorLabel=new Label(errorComposite,SWT.NONE);  errorLabel.setLayoutData(new GridData(GridData.FILL,GridData.CENTER,true,false));  errorLabel.setText(Messages.getString("BranchesPropertiesControl.ErrorLabelText"));  final Composite messageComposite=new Composite(this,SWT.NONE);  final GridLayout messageCompositeLayout=new GridLayout();  messageCompositeLayout.marginWidth=0;  messageCompositeLayout.marginHeight=0;  messageCompositeLayout.horizontalSpacing=getHorizontalSpacing();  messageCompositeLayout.verticalSpacing=getVerticalSpacing();  messageComposite.setLayout(messageCompositeLayout);  final Label messagesLabel=new Label(messageComposite,SWT.NONE);  messagesLabel.setLayoutData(new GridData(GridData.FILL,GridData.CENTER,true,false));  messagesLabel.setText(Messages.getString("BranchesPropertiesControl.MessagesLabelText"));  branchHistoryComposite=new Composite(this,SWT.NONE);  final GridLayout branchHistoryCompositeLayout=new GridLayout();  branchHistoryCompositeLayout.marginWidth=0;  branchHistoryCompositeLayout.marginHeight=0;  branchHistoryCompositeLayout.horizontalSpacing=getHorizontalSpacing();  branchHistoryCompositeLayout.verticalSpacing=getVerticalSpacing();  branchHistoryComposite.setLayout(branchHistoryCompositeLayout);  final Label branchesLabel=new Label(branchHistoryComposite,SWT.NONE);  branchesLabel.setLayoutData(new GridData(GridData.FILL,GridData.CENTER,true,false));  branchesLabel.setText(Messages.getString("BranchesPropertiesControl.BranchesLabelText"));  tableTreeViewer=new TableTreeViewer(branchHistoryComposite,SWT.BORDER);  tableTree=tableTreeViewer.getTableTree();  table=tableTree.getTable();  table.setHeaderVisible(true);  table.setLinesVisible(true);  createTableColumns(table);  tableTree.setLayoutData(new GridData(GridData.FILL,GridData.FILL,true,true));  tableTreeViewer.setContentProvider(new BranchesPropertiesContentProvider());  tableTreeViewer.setLabelProvider(new BranchesPropertiesLabelProvider());  final BranchHistoryTreeItem dummyItem=new BranchHistoryTreeItem();  final Item item=new Item();  item.setChangeSetID(0);  item.setServerItem("");  dummyItem.setItem(item);  tableTreeViewer.setInput(dummyItem);  stackLayout.topControl=messageComposite;}  }
class C{  public void disableShadow(){  disableShadow=true;}  }
class C{  public boolean isPrimaryConnection(){  return sharingProfile == null;}  }
class C{  public void verifyHasAdministrator(Manager manager) throws InvariantException, SQLException {  for (  DBGroupSecret gs : getGroupSecrets()) {    Set<DBIdentity> theseUsers=Sets.newHashSet();    Set<DBGroup> theseGroups=Sets.newHashSet();    gs.getGroup().addTransitiveGroupsAndUsers(manager,DBAcl.modifyGroupSecretsAccess(),theseUsers,theseGroups);    if (!theseUsers.isEmpty()) {      return;    }  }  throw new InvariantException("secret " + getId() + " is orphaned");}  }
class C{  public Builder expected(Class<? extends Throwable> expectedException){  this.expectedException=expectedException;  return this;}  }
class C{  private boolean findAvailability(final JSONObject instance) throws Exception {  ResponseValidator status=new ResponseValidator(instance);  return !status.isFailed();}  }
class C{  @Override public void accept(final MethodVisitor mv){  mv.visitInsn(opcode);  acceptAnnotations(mv);}  }
class C{  void validateTechnoloyProvider(Subscription subscription) throws OperationNotPermittedException {  Organization tp=dataManager.getCurrentUser().getOrganization();  if (!tp.getTechnicalProducts().contains(subscription.getProduct().getTechnicalProduct())) {    OperationNotPermittedException onp=new OperationNotPermittedException();    LOG.logWarn(Log4jLogger.SYSTEM_LOG | Log4jLogger.AUDIT_LOG,onp,LogMessageIdentifier.WARN_ORGANIZATION_OWN_NO_TECHNICAL_PRODUCT_OF_SUBSCRIPTION,subscription.getSubscriptionId());    throw onp;  }}  }
class C{  public boolean isFinalFragment(){  return mMessage.get(FINAL_FRAGMENT_FLAG);}  }
class C{  public void checkJvmThreadCpuTimeMonitoring(EnumJvmThreadCpuTimeMonitoring x) throws SnmpStatusException {  if (JvmThreadCpuTimeMonitoringUnsupported.intValue() == x.intValue()) {    log.debug("checkJvmThreadCpuTimeMonitoring","Try to set to illegal unsupported value");    throw new SnmpStatusException(SnmpDefinitions.snmpRspWrongValue);  }  if ((JvmThreadCpuTimeMonitoringEnabled.intValue() == x.intValue()) || (JvmThreadCpuTimeMonitoringDisabled.intValue() == x.intValue())) {    ThreadMXBean mbean=getThreadMXBean();    if (mbean.isThreadCpuTimeSupported())     return;    log.debug("checkJvmThreadCpuTimeMonitoring","Unsupported operation, can't set state");    throw new SnmpStatusException(SnmpDefinitions.snmpRspInconsistentValue);  }  log.debug("checkJvmThreadCpuTimeMonitoring","unknown enum value ");  throw new SnmpStatusException(SnmpDefinitions.snmpRspWrongValue);}  }
class C{  private String badRegister(long s){  return "Attempt to register more than " + MAX_PARTIES + " parties for "+ stateToString(s);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static String toString(InputStream input) throws IOException {  return toString(input,Charset.defaultCharset());}  }
class C{  synchronized public static HashMap<InetAddress,JmDNS> netServices(){  if (ZeroConfService.netServices.isEmpty()) {    log.debug("JmDNS version: {}",JmDNS.VERSION);    try {      for (      InetAddress address : hostAddresses()) {        log.debug("Calling JmDNS.create({}, null)",address.getHostAddress());        ZeroConfService.netServices.put(address,JmDNS.create(address,null));      }    } catch (    IOException ex) {      log.warn("Unable to create JmDNS with error: {}",ex.getMessage(),ex);    }    InstanceManager.getOptionalDefault(ShutDownManager.class).ifPresent(null);  }  return new HashMap<>(ZeroConfService.netServices);}  }
class C{  public static boolean isOriginalURI(Node node,String uri){  if (node.getUri().equals(uri)) {    return true;  }  if (node.hasProperty(APM_ORIGINAL_URI)) {    return node.getProperties(APM_ORIGINAL_URI).iterator().next().getValue().equals(uri);  }  return false;}  }
class C{  public boolean isOptional(){  return optional;}  }
class C{  public DynamoDBConsumer(AmazonDynamoDBClient client,String tableName,double rateLimit,ExecutorService exec){  this.client=client;  this.tableName=tableName;  this.rateLimiter=RateLimiter.create(rateLimit);  super.threadPool=exec;  super.exec=new ExecutorCompletionService<Void>(threadPool);}  }
class C{  @Override public void drawBackground(Graphics2D g2,Rectangle2D area){  fillBackground(g2,area,this.orientation);  drawQuadrants(g2,area);  drawBackgroundImage(g2,area);}  }
class C{  @Override public void onActivityResult(int requestCode,int resultCode,Intent intent){  if (requestCode == REQUEST_CODE) {    if (resultCode == Activity.RESULT_OK) {      JSONObject obj=new JSONObject();      try {        obj.put(TEXT,intent.getStringExtra("SCAN_RESULT"));        obj.put(FORMAT,intent.getStringExtra("SCAN_RESULT_FORMAT"));        obj.put(CANCELLED,false);      } catch (      JSONException e) {        Log.d(LOG_TAG,"This should never happen");      }      this.callbackContext.success(obj);    } else     if (resultCode == Activity.RESULT_CANCELED) {      JSONObject obj=new JSONObject();      try {        obj.put(TEXT,"");        obj.put(FORMAT,"");        obj.put(CANCELLED,true);      } catch (      JSONException e) {        Log.d(LOG_TAG,"This should never happen");      }      this.callbackContext.success(obj);    } else {      this.callbackContext.error("Unexpected error");    }  }}  }
class C{  public void pruneExceptionalOut(){  if (hasReachableExceptionHandlers()) {    for (Enumeration<BasicBlock> e=getBasicBlocks(); e.hasMoreElements(); ) {      BasicBlock bb=e.nextElement();      bb.pruneExceptionalOut(this);    }  }}  }
class C{  public final void testValidateWhenEmpty(){  LetterValidator characterValidator=new LetterValidator("foo",Case.LOWERCASE,false);  assertTrue(characterValidator.validate(""));}  }
class C{  public GsonBuilder disableHtmlEscaping(){  this.escapeHtmlChars=false;  return this;}  }
class C{  public boolean isEmpty(){  return this.set.isEmpty();}  }
class C{  public IOError(Throwable cause){  super(cause);}  }
class C{  public static synchronized void show(Context context,String msg){  Toast toast=Toast.makeText(context,msg,Toast.LENGTH_SHORT);  Toast previousToast=sPreviousToast.get();  if (previousToast != null) {    previousToast.cancel();  }  sPreviousToast=new WeakReference<>(toast);  toast.show();}  }
class C{  @Override protected EClass eStaticClass(){  return EipPackage.Literals.SPLITTER;}  }
class C{  public static final double decodeLongitude(final long hash){  return unscaleLon(BitUtil.deinterleave(hash));}  }
class C{  public DOMAccessException(){  this(null,null);}  }
class C{  public synchronized <T extends Runnable>T add(T runnable){  if (started)   throw new IllegalThreadStateException("Cannot add another runnable to " + getClass().getSimpleName() + " after it started !");  runners.add(new Runner(runnable));  return runnable;}  }
class C{  public PoolingByteArrayOutputStream(ByteArrayPool pool){  this(pool,DEFAULT_SIZE);}  }
class C{  public void hideBubbleTriangle(){  triangleView.setVisibility(GONE);}  }
class C{  public static boolean CS_CSC(Scs A){  return (A != null && (A.nz == -1));}  }
class C{  static byte[] createChunk(int len,int j){  byte[] bb=new byte[len];  for (int i=0; i < bb.length; i++)   bb[i]=(byte)(i ^ j);  return bb;}  }
class C{  public String globalInfo(){  return "Class for using linear regression for prediction. Uses the Akaike " + "criterion for model selection, and is able to deal with weighted " + "instances.";}  }
class C{  protected Properties locateResource(final String namespace,final long timestamp,final AtomicReference<IIndexManager> foundOn){synchronized (seeAlso) {    for (    IIndexManager indexManager : seeAlso.keySet()) {      Properties properties=null;      try {        properties=locateResourceOn(indexManager,namespace,timestamp);      } catch (      IllegalStateException t) {        if (indexManager instanceof TemporaryStore) {          if (INFO)           log.info("Closed? " + indexManager);        } else {          log.warn("Closed? " + indexManager);        }        continue;      }catch (      Throwable t) {        log.error(t,t);        continue;      }      if (properties != null) {        if (indexManager instanceof IRawStore) {          final UUID storeUUID=(UUID)properties.get(STORE_UUID);          if (storeUUID != null && !storeUUID.equals(((IRawStore)indexManager).getUUID())) {            continue;          }        }        if (INFO) {          log.info("Found: namespace=" + namespace + " on "+ indexManager+ ", properties="+ properties);        }        foundOn.set(indexManager);        return properties;      }    }  }  final Properties properties=locateResourceOn(indexManager,namespace,timestamp);  if (properties != null) {    if (INFO) {      log.info("Found: namespace=" + namespace + " on "+ indexManager);    }    foundOn.set(indexManager);    return properties;  }  return properties;}  }
class C{  @Override public boolean onJsPrompt(WebView view,String url,String message,String defaultValue,JsPromptResult result){  if (defaultValue != null && defaultValue.startsWith("gap")) {    if (defaultValue.startsWith("gap-iab://")) {      PluginResult scriptResult;      String scriptCallbackId=defaultValue.substring(10);      if (scriptCallbackId.startsWith("InAppBrowser")) {        if (message == null || message.length() == 0) {          scriptResult=new PluginResult(PluginResult.Status.OK,new JSONArray());        } else {          try {            scriptResult=new PluginResult(PluginResult.Status.OK,new JSONArray(message));          } catch (          JSONException e) {            scriptResult=new PluginResult(PluginResult.Status.JSON_EXCEPTION,e.getMessage());          }        }        this.webView.sendPluginResult(scriptResult,scriptCallbackId);        result.confirm("");        return true;      }    } else {      LOG.w(LOG_TAG,"InAppBrowser does not support Cordova API calls: " + url + " "+ defaultValue);      result.cancel();      return true;    }  }  return false;}  }
class C{  public static byte[] randomBytes(int count){  Random random=new Random();  byte[] bytes=new byte[count];  random.nextBytes(bytes);  return bytes;}  }
class C{  private JTree createUndoTree(){  final CSelectionHistoryTreeNode rootNode=new CSelectionHistoryTreeNode("Selection History");  final JTree tree=new CUndoTree(rootNode);  m_model=(DefaultTreeModel)tree.getModel();  tree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);  tree.setRootVisible(true);  tree.setCellRenderer(new CSelectionTreeCellRenderer());  return tree;}  }
class C{  private Connection openConnection(boolean autocommit) throws SQLException {  Connection conn=dataSrc != null ? dataSrc.getConnection() : DriverManager.getConnection(connUrl,user,passwd);  if (testMode)   opened.increment();  conn.setAutoCommit(autocommit);  return conn;}  }
class C{  public void initV1From(PostScriptTable src){  src.readFontData().slice(0,V1_TABLE_SIZE).copyTo(v1Data);}  }
class C{  public void checkEndpoint(ClientUpdater ccu,Endpoint endpoint){  QueueConnectionImpl deadConnection=null;synchronized (lock) {    if (shuttingDown)     return;    deadConnection=queueConnections.getConnection(endpoint);    if (deadConnection != null && ccu.equals(deadConnection.getUpdater())) {      queueConnections=queueConnections.removeConnection(deadConnection);      try {        deadConnection.internalClose(pool.getKeepAlive());      } catch (      Exception e) {        logger.warn("Error destroying client to server connection to {}",deadConnection.getEndpoint(),e);      }    }  }  logger.info(LocalizedMessage.create(LocalizedStrings.QueueManagerImpl_CACHE_CLIENT_UPDATER_FOR_ON_ENDPOINT_EXITING_SCHEDULING_RECOVERY,new Object[]{(deadConnection != null && deadConnection.getUpdater() != null) ? (deadConnection.getUpdater().isPrimary() ? "Primary" : "Redundant") : "Queue",endpoint}));  scheduleRedundancySatisfierIfNeeded(0);}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  ElementCreator builder=registry.build(KEY);}  }
class C{  public static IChange replace(IXtextDocument doc,int offset,int length,String replacementText){  return new Replacement(getURI(doc),offset,length,replacementText);}  }
class C{  public final char yycharat(int pos){  return zzBufferArray != null ? zzBufferArray[zzStartRead + pos] : zzBuffer.charAt(zzStartRead + pos);}  }
class C{  private static AbstractTripleStore openTripleStore(JiniFederation fed,long timestamp) throws Exception {  AbstractTripleStore tripleStore=null;  tripleStore=(AbstractTripleStore)fed.getResourceLocator().locate(namespace,timestamp);  if (tripleStore == null) {    throw new RuntimeException("triple store does not exist!");  }  return tripleStore;}  }
class C{  @Override public String numAttributesTipText(){  return "The number of attributes the generated data will contain (Note: they must be covered by the cluster definitions!)";}  }
class C{  public boolean computeScrollOffset(){  return mScroller.computeScrollOffset();}  }
class C{  public VNumber(String columnName,boolean mandatory,boolean isReadOnly,boolean isUpdateable,int displayType,String title){  super();  super.setName(columnName);  m_columnName=columnName;  m_title=title;  setDisplayType(displayType);  LookAndFeel.installBorder(this,"TextField.border");  this.setLayout(new BorderLayout());  m_text.setBorder(null);  m_text.setHorizontalAlignment(JTextField.TRAILING);  m_text.addKeyListener(this);  m_text.addFocusListener(this);  setMandatory(mandatory);  this.add(m_text,BorderLayout.CENTER);  m_button.setIcon(Env.getImageIcon("Calculator10.gif"));  m_button.setMargin(new Insets(0,0,0,0));  m_button.setFocusable(false);  m_button.addActionListener(this);  this.add(m_button,BorderLayout.EAST);  setColumns(SIZE,0);  if (isReadOnly || !isUpdateable)   setReadWrite(false); else   setReadWrite(true);  m_text.addMouseListener(new VNumber_mouseAdapter(this));}  }
class C{  protected SourceFragmentImpl(){  super();}  }
class C{  public boolean isImportDragged(){  return importDragged;}  }
class C{  @Override public void updateBlob(String columnLabel,InputStream x,long length) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateBlob(" + quote(columnLabel) + ", x, "+ length+ "L);");    }    checkClosed();    Value v=conn.createBlob(x,-1);    update(columnLabel,v);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  final public int hashCode(){  return (int)value;}  }
class C{  public void createSubUsageScenario07() throws Exception {  long usageStartTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") - DateTimeHandling.hoursToMillis(253.5);  BillingIntegrationTestBase.setDateFactoryInstance(usageStartTime);  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"SCENARIO07_PERUNIT_HOUR",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PERUNIT_HOUR_ROLES,technicalService,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),1);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(basicSetup.getCustomerAdminKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("SCENARIO07_PERUNIT_HOUR",serviceDetails,basicSetup.getSecondCustomerUser2(),role);  long usageModificationTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") - DateTimeHandling.hoursToMillis(153.5);  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,usageModificationTime,"MAX_FOLDER_NUMBER","17");  usageModificationTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") + DateTimeHandling.hoursToMillis(213.5);  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,usageModificationTime,"MAX_FOLDER_NUMBER","27");  usageModificationTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") + DateTimeHandling.hoursToMillis(213.7);  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,usageModificationTime,"MAX_FOLDER_NUMBER","37");  long usageEndTime=DateTimeHandling.calculateMillis("2013-01-01 00:00:00") - DateTimeHandling.hoursToMillis(85.4);  BillingIntegrationTestBase.setDateFactoryInstance(usageEndTime);  subscrSetup.terminateSubscription(basicSetup.getSupplierAdminKey(),subDetails,"");  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("SCENARIO07_PERUNIT_HOUR",subDetails);}  }
class C{  public static int[] copyIfExceeded(int[] arr,int len){  assert arr != null;  assert 0 <= len && len <= arr.length;  return len == arr.length ? arr : Arrays.copyOf(arr,len);}  }
class C{  public void createFolder(int userId,ArchiveObject arch,FolderObject fdr,String entidad) throws Exception {  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession());    FolderMdoFdr.createFolder(userId,arch.getArchiveToken(),fdr.getFolderToken(),entidad);  } catch (  Exception e) {    throw e;  } finally {    dbConn.close();  }}  }
class C{  @Override public boolean input(Instance instance){  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (m_NewBatch) {    resetQueue();    m_NewBatch=false;  }  if (isFirstBatchDone()) {    push(instance);    return true;  } else {    copyValues(instance,false);    processInstance(instance);    return false;  }}  }
class C{  public static boolean withinGetter(Declaration decl){  Scope s=container(decl);  return isGetter((Declaration)s);}  }
class C{  void add(ThreadLocal<?> key,Object value){  for (int index=key.hash & mask; ; index=next(index)) {    Object k=table[index];    if (k == null) {      table[index]=key.reference;      table[index + 1]=value;      return;    }  }}  }
class C{  public EpisodeNameSorter(boolean ascending){  super(ascending);}  }
class C{  public boolean contains(float x,float y){  return false;}  }
class C{  public void addExcludedClass(String className){  mExcludedClasses.add(className);}  }
class C{  public boolean isOpen(){  return true;}  }
class C{  public static void holdWakeLock(Context context){  PowerManager powerManager=(PowerManager)context.getSystemService(Context.POWER_SERVICE);  wakeLock=powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,"MyWakeLock");  wakeLock.acquire();}  }
class C{  public boolean hasNext(){  return pos + 1 < text.length;}  }
class C{  public LowMemoryException(String msg,final Set<DistributedMember> criticalMembers){  super(msg);  this.critMems=Collections.unmodifiableSet(criticalMembers);}  }
class C{  public boolean isFinal(){  return false;}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  double pos=(double)getPositionInContextNodeList(xctxt);  return new XNumber(pos);}  }
class C{  private void clearSubtreeWithOldInputFocusLocked(long currentInputFocusId){  final int cacheSize=mCacheImpl.size();  for (int i=0; i < cacheSize; i++) {    AccessibilityNodeInfo info=mCacheImpl.valueAt(i);    final long infoSourceId=info.getSourceNodeId();    if (infoSourceId != currentInputFocusId && info.isFocused()) {      clearSubTreeLocked(infoSourceId);      return;    }  }}  }
class C{  @Override public void reset(){  if (heapSize < indices.length / 10) {    for (int i=0; i < heapSize; i++) {      indices[this.getIndex(data[i])]=-1;    }  } else {    for (int i=0; i < indices.length; i++) {      indices[i]=-1;    }  }  for (int i=0; i < heapSize; i++) {    costs[i]=Double.MAX_VALUE;  }  this.heapSize=0;  this.modCount=0;}  }
class C{  public Observable<String> retry(Observable<String> data){  return data.retry();}  }
class C{  public byte[] instrument(byte[] input,InstrumentationSettings settings){  Validate.notNull(input);  Validate.notNull(settings);  Validate.isTrue(input.length > 0);  ClassReader cr=new ClassReader(input);  ClassNode classNode=new SimpleClassNode();  cr.accept(classNode,0);  if ((classNode.access & Opcodes.ACC_INTERFACE) == Opcodes.ACC_INTERFACE) {    return input.clone();  }  FieldNode instrumentedMarkerField=findField(classNode,INSTRUMENTED_FIELD_MARKER_NAME);  if (instrumentedMarkerField != null) {    if (INSTRUMENTED_MARKER_FIELD_ACCESS != instrumentedMarkerField.access) {      throw new IllegalArgumentException("Instrumentation marker found with wrong access: " + instrumentedMarkerField.access);    }    if (!INSTRUMENTED_MARKER_FIELD_TYPE.getDescriptor().equals(instrumentedMarkerField.desc)) {      throw new IllegalArgumentException("Instrumentation marker found with wrong type: " + instrumentedMarkerField.desc);    }    if (!INSTRUMENTED_MARKER_FIELD_VALUE.equals(instrumentedMarkerField.value)) {      throw new IllegalArgumentException("Instrumentation marker found wrong value: " + instrumentedMarkerField.value);    }    return input.clone();  }  List<MethodNode> methodNodesToInstrument=findMethodsWithParameter(classNode.methods,CONTINUATION_CLASS_TYPE);  if (methodNodesToInstrument.isEmpty()) {    return input.clone();  }  instrumentedMarkerField=new FieldNode(INSTRUMENTED_MARKER_FIELD_ACCESS,INSTRUMENTED_FIELD_MARKER_NAME,INSTRUMENTED_MARKER_FIELD_TYPE.getDescriptor(),null,INSTRUMENTED_MARKER_FIELD_VALUE);  classNode.fields.add(instrumentedMarkerField);  MethodAnalyzer analyzer=new MethodAnalyzer(classRepo);  MethodInstrumenter instrumenter=new MethodInstrumenter();  for (  MethodNode methodNode : methodNodesToInstrument) {    MethodAttributes methodAttrs=analyzer.analyze(classNode,methodNode,settings);    if (methodAttrs != null) {      instrumenter.instrument(methodNode,methodAttrs);    }  }  ClassWriter cw=new SimpleClassWriter(ClassWriter.COMPUTE_MAXS | ClassWriter.COMPUTE_FRAMES,classRepo);  classNode.accept(cw);  return cw.toByteArray();}  }
class C{  private byte skipTagForward(){  int initialCharIndex=charIndex;  while (charIndex < length) {    lastChar=text.charAt(charIndex++);    if (lastChar == '>') {      return Character.DIRECTIONALITY_WHITESPACE;    }    if (lastChar == '"' || lastChar == '\'') {      char quote=lastChar;      while (charIndex < length && (lastChar=text.charAt(charIndex++)) != quote) {      }    }  }  charIndex=initialCharIndex;  lastChar='<';  return Character.DIRECTIONALITY_OTHER_NEUTRALS;}  }
class C{  public Env<A> enclosing(JCTree.Tag tag){  Env<A> env1=this;  while (env1 != null && !env1.tree.hasTag(tag))   env1=env1.next;  return env1;}  }
class C{  public OptionFileGUI_NB(){  initComponents();}  }
class C{  public Index maxCachedMb(Integer maxCachedMb){  this.maxCachedMb=maxCachedMb;  return this;}  }
class C{  public void createConnection(NetworkInterface anotherInterface){  if (!isConnected(anotherInterface) && (this != anotherInterface)) {    int conSpeed=anotherInterface.getTransmitSpeed(this);    if (conSpeed > this.transmitSpeed) {      conSpeed=this.transmitSpeed;    }    Connection con=new CBRConnection(this.host,this,anotherInterface.getHost(),anotherInterface,conSpeed);    connect(con,anotherInterface);  }}  }
class C{  public static byte[] decode(byte[] source) throws java.io.IOException {  byte[] decoded=null;  decoded=decode(source,0,source.length,Base64.NO_OPTIONS);  return decoded;}  }
class C{  public boolean addError(int error){  boolean rval=(0 <= error && error < SslError.SSL_MAX_ERROR);  if (rval) {    mErrors|=(0x1 << error);  }  return rval;}  }
class C{  ExportGroup createExportGroup(StorageSystem vplex,StorageSystem array,Map<URI,List<StoragePort>> initiatorPortMap,URI virtualArrayURI,URI projectURI,URI tenantURI){  List<StoragePort> backEndPorts=new ArrayList<StoragePort>();  for (  List<StoragePort> ports : initiatorPortMap.values()) {    backEndPorts.addAll(ports);  }  Set<Initiator> initiators=new HashSet<Initiator>();  for (  StoragePort port : backEndPorts) {    Initiator initiator=ExportUtils.getInitiator(port.getPortNetworkId(),_dbClient);    if (initiator == null || initiator.getInactive()) {      _log.info("Did not find initiator for VPLEX back-end port: " + port.getPortNetworkId());      continue;    }    initiators.add(initiator);  }  int numPaths=computeNumPaths(initiatorPortMap,virtualArrayURI,array);  return ExportUtils.createVplexExportGroup(_dbClient,vplex,array,initiators,virtualArrayURI,projectURI,tenantURI,numPaths,null);}  }
class C{  public static List<String> fullJustify(String[] words,int L){  List<String> res=new ArrayList<String>();  if (words == null || words.length == 0 || L < 0)   return res;  List<String> line=new ArrayList<String>();  String str="";  int len=0, div, mod;  for (int i=0; i < words.length; i++) {    if (len + line.size() + words[i].length() <= L) {      line.add(words[i]);      len+=words[i].length();    } else {      if (line.size() == 1) {        str=line.get(0);        for (int j=L - str.length(); j > 0; j--)         str+=" ";      } else       if (line.size() > 1) {        div=(L - len) / (line.size() - 1);        mod=(L - len) % (line.size() - 1);        str=line.get(0);        for (int j=1; j < line.size(); j++) {          for (int k=0; k < div; k++)           str+=" ";          if (j <= mod)           str+=" ";          str+=line.get(j);        }      }      res.add(str);      line.clear();      line.add(words[i]);      len=words[i].length();    }  }  str=line.get(0);  for (int i=1; i < line.size(); i++)   str+=" " + line.get(i);  for (int i=L - str.length(); i > 0; i--)   str+=" ";  res.add(str);  return res;}  }
class C{  public static void addFilterInitParam(WebXml webXml,String name,String paramName,String paramValue){  WebXmlElement element=(WebXmlElement)webXml.getTagByIdentifier(WebXmlType.FILTER,name);  addTagInitParam(element,paramName,paramValue);}  }
class C{  Item(final int index,final Item i){  this.index=index;  type=i.type;  intVal=i.intVal;  longVal=i.longVal;  strVal1=i.strVal1;  strVal2=i.strVal2;  strVal3=i.strVal3;  hashCode=i.hashCode;}  }
class C{  @Override public synchronized void startExpiryScanner(){  if (reaperPeriod > 0) {    if (reaperRunnable != null)     reaperRunnable.stop();    reaperRunnable=new Reaper(server.getScheduledPool(),server.getExecutorFactory().getExecutor(),reaperPeriod,TimeUnit.MILLISECONDS,false);    reaperRunnable.start();  }}  }
class C{  public String uafAuthentication() throws Exception {  AuthenticationRequest req=invokeAuthentication();  logger.info(" : AuthenticationRequest obtained : ");  logger.info(" : Auth request : " + gson.toJson(req,AuthenticationRequest.class));  AuthenticationRequestProcessing authProcessor=new AuthenticationRequestProcessing();  AuthenticationResponse resp=authProcessor.processRequest(req);  logger.info(" : AuthenticationResponse created : ");  logger.info(" : Auth response : " + gson.toJson(resp,AuthenticationResponse.class));  String accessToken=serverSideAuthResponseProcessing(resp);  return accessToken;}  }
class C{  private void extractCurrentTouchPointInfo(){  mCurrentTouchPointX=mCurrentTouchPoint.getX();  mCurrentTouchPointY=mCurrentTouchPoint.getY();  mCurrentTouchPointDiam=Math.max(MIN_MULTITOUCH_SEPARATION * .71f,!mCurrentTouchPointPosAndScale.isUpdateScale() ? 0.0f : mCurrentTouchPoint.getMultiTouchDiameter());  mCurrentTouchPointWidth=Math.max(MIN_MULTITOUCH_SEPARATION,!mCurrentTouchPointPosAndScale.isUpdateScaleXY() ? 0.0f : mCurrentTouchPoint.getMultiTouchWidth());  mCurrentTouchPointHeight=Math.max(MIN_MULTITOUCH_SEPARATION,!mCurrentTouchPointPosAndScale.isUpdateScaleXY() ? 0.0f : mCurrentTouchPoint.getMultiTouchHeight());  mCurrentTouchPointAng=!mCurrentTouchPointPosAndScale.isUpdateAngle() ? 0.0f : mCurrentTouchPoint.getMultiTouchAngle();}  }
class C{  ComputingConcurrentHashMap(MapMaker builder,Function<? super K,? extends V> computingFunction){  super(builder);  this.computingFunction=checkNotNull(computingFunction);}  }
class C{  public void testEscapeSJISDoubleEscapeBug() throws Exception {  String testString="'It\\'s a boy!'";  byte[] testStringAsBytes=testString.getBytes("SJIS");  byte[] escapedStringBytes=StringUtils.escapeEasternUnicodeByteStream(testStringAsBytes,testString);  String escapedString=new String(escapedStringBytes,"SJIS");  assertTrue(testString.equals(escapedString));  byte[] origByteStream=new byte[]{(byte)0x95,(byte)0x5c,(byte)0x8e,(byte)0x96,(byte)0x5c,(byte)0x62,(byte)0x5c};  String origString="\u955c\u8e96\u5c62\\";  byte[] newByteStream=StringUtils.escapeEasternUnicodeByteStream(origByteStream,origString);  assertTrue((newByteStream.length == (origByteStream.length + 2)) && (newByteStream[1] == 0x5c) && (newByteStream[2] == 0x5c)&& (newByteStream[5] == 0x5c)&& (newByteStream[6] == 0x5c));  origByteStream=new byte[]{(byte)0x8d,(byte)0xb2,(byte)0x93,(byte)0x91,(byte)0x81,(byte)0x40,(byte)0x8c,(byte)0x5c};  testString=new String(origByteStream,"SJIS");  Properties connProps=new Properties();  connProps.put("useUnicode","true");  connProps.put("characterEncoding","sjis");  Connection sjisConn=getConnectionWithProps(connProps);  Statement sjisStmt=sjisConn.createStatement();  try {    sjisStmt.executeUpdate("DROP TABLE IF EXISTS doubleEscapeSJISTest");    sjisStmt.executeUpdate("CREATE TABLE doubleEscapeSJISTest (field1 BLOB)");    PreparedStatement sjisPStmt=sjisConn.prepareStatement("INSERT INTO doubleEscapeSJISTest VALUES (?)");    sjisPStmt.setString(1,testString);    sjisPStmt.executeUpdate();    this.rs=sjisStmt.executeQuery("SELECT * FROM doubleEscapeSJISTest");    this.rs.next();    String retrString=this.rs.getString(1);    System.out.println(retrString.equals(testString));  }  finally {    sjisStmt.executeUpdate("DROP TABLE IF EXISTS doubleEscapeSJISTest");  }}  }
class C{  public static RotationOptions autoRotateAtRenderTime(){  return new RotationOptions(USE_EXIF_ROTATION_ANGLE,true);}  }
class C{  SearchResultDisplayer(){  MAIN_PANEL=new BoxPanel(BoxPanel.Y_AXIS);  MAIN_PANEL.setMinimumSize(new Dimension(0,0));  tabbedPane=new SearchTabbedPane();  results=new JPanel();  results.setPreferredSize(new Dimension(10000,10000));  results.setLayout(switcher);  promoSlides=null;  if (!UpdateManagerSettings.SHOW_PROMOTION_OVERLAYS.getValue()) {    promoSlides=new MultimediaSlideshowPanel(getDefaultSlides());  } else {    promoSlides=new MultimediaSlideshowPanel(UpdateManagerSettings.OVERLAY_SLIDESHOW_JSON_URL.getValue(),getDefaultSlides());  }  JPanel p=(JPanel)promoSlides;  Dimension promoDimensions=new Dimension(717,380);  p.setPreferredSize(promoDimensions);  p.setSize(promoDimensions);  p.setMaximumSize(promoDimensions);  SearchResultMediator DUMMY=new SearchResultMediator(p);  JPanel mainScreen=new JPanel(new BorderLayout());  promoSlides.setupContainerAndControls(mainScreen,true);  mainScreen.add(DUMMY.getComponent(),BorderLayout.CENTER);  results.add("dummy",mainScreen);  switcher.first(results);  setupTabbedPane();  MAIN_PANEL.add(results);  CancelSearchIconProxy.updateTheme();}  }
class C{  public void performRecoveryRestart() throws IOException {synchronized (mutex) {    if (state != IndexShardState.RECOVERING) {      throw new IndexShardNotRecoveringException(shardId,state);    }    final Engine engine=this.currentEngineReference.getAndSet(null);    IOUtils.close(engine);    recoveryState().setStage(RecoveryState.Stage.INIT);  }}  }
class C{  @Override @Pure public String toString(){  return StringUtilities.asciiBytesToString(val);}  }
class C{  private EmrClusterDefinition createValidEmrClusterDefinition(){  EmrClusterDefinition emrClusterDefinition=new EmrClusterDefinition();  emrClusterDefinition.setSubnetId(MockEc2OperationsImpl.SUBNET_1);  InstanceDefinitions instanceDefinitions=new InstanceDefinitions();  MasterInstanceDefinition masterInstanceDefinition=new MasterInstanceDefinition();  masterInstanceDefinition.setInstanceCount(1);  masterInstanceDefinition.setInstanceType(MockEc2OperationsImpl.INSTANCE_TYPE_1);  instanceDefinitions.setMasterInstances(masterInstanceDefinition);  InstanceDefinition coreInstanceDefinition=new InstanceDefinition();  coreInstanceDefinition.setInstanceCount(1);  coreInstanceDefinition.setInstanceType(MockEc2OperationsImpl.INSTANCE_TYPE_1);  instanceDefinitions.setCoreInstances(coreInstanceDefinition);  InstanceDefinition taskInstanceDefinition=new InstanceDefinition();  taskInstanceDefinition.setInstanceCount(1);  taskInstanceDefinition.setInstanceType(MockEc2OperationsImpl.INSTANCE_TYPE_1);  instanceDefinitions.setTaskInstances(taskInstanceDefinition);  emrClusterDefinition.setInstanceDefinitions(instanceDefinitions);  List<NodeTag> nodeTags=new ArrayList<>();{    nodeTags.add(new NodeTag("test_nodeTagName","test_nodeTagValue"));  }  emrClusterDefinition.setNodeTags(nodeTags);  return emrClusterDefinition;}  }
class C{  static int findBestSampleSize(int actualWidth,int actualHeight,int desiredWidth,int desiredHeight){  double wr=(double)actualWidth / desiredWidth;  double hr=(double)actualHeight / desiredHeight;  double ratio=Math.min(wr,hr);  float n=1.0f;  while ((n * 2) <= ratio) {    n*=2;  }  return (int)n;}  }
class C{  @SuppressWarnings("unchecked") @Override public NotificationChain eInverseAdd(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case DomPackage.DOCLET__LINE_TAGS:    return ((InternalEList<InternalEObject>)(InternalEList<?>)getLineTags()).basicAdd(otherEnd,msgs);}return super.eInverseAdd(otherEnd,featureID,msgs);}  }
class C{  private void prepareForUpdating(){  W_deltas=new ArrayList<Matrix>(layersActivation.size());  W_updaters=new ArrayList<List<GradientUpdater>>(layersActivation.size());  B_deltas=new ArrayList<Vec>(layersActivation.size());  B_updaters=new ArrayList<GradientUpdater>(layersActivation.size());  for (int l=1; l < layerSizes.length; l++) {    W_deltas.add(new DenseMatrix(layerSizes[l],layerSizes[l - 1]));    B_deltas.add(new DenseVector(layerSizes[l]));    List<GradientUpdater> W_updaters_l=new ArrayList<GradientUpdater>(layerSizes[l]);    for (int i=0; i < layerSizes[l]; i++) {      GradientUpdater W_updater=updater.clone();      W_updater.setup(layerSizes[l - 1]);      W_updaters_l.add(W_updater);    }    W_updaters.add(W_updaters_l);    B_updaters.add(updater.clone());    B_updaters.get(B_updaters.size() - 1).setup(layerSizes[l]);  }  activations=new Matrix[layersActivation.size()];  unactivated=new Matrix[layersActivation.size()];  deltas=new Matrix[layersActivation.size()];}  }
class C{  public float syncGetProcessCpuUsage(int pid){  String pidStat1=readProcessStat(pid);  String totalStat1=readSystemStat();  if (pidStat1 == null || totalStat1 == null) {    return -1.f;  }  try {    Thread.sleep(1000);  } catch (  Exception e) {    e.printStackTrace();    return -1.f;  }  String pidStat2=readProcessStat(pid);  String totalStat2=readSystemStat();  if (pidStat2 == null || totalStat2 == null) {    return -1.f;  }  String[] toks=totalStat1.split(" ");  long cpu1=getSystemUptime(toks);  toks=totalStat2.split(" ");  long cpu2=getSystemUptime(toks);  return getProcessCpuUsage(pidStat1,pidStat2,cpu2 - cpu1);}  }
class C{  public boolean isJobStoreClustered(){  return jsClustered;}  }
class C{  public static long min(long x,long y){  return (x < y) ? x : y;}  }
class C{  public HeatChart(double[][] zValues){  this(zValues,min(zValues),max(zValues));}  }
class C{  public TriggerProcessStatusException(){}  }
class C{  void updateHeartbeats(){  RackHeartbeat rack=_rack;  if (rack == null) {    return;  }  sendHeartbeats();}  }
class C{  protected static void errorNoIdentifier(String id,String text){  Ansi buffer=Ansi.ansi();  buffer.fg(RED);  buffer.a("No ").a(text).a(" found with identifier '").a(id).a("'.");  buffer.reset();  System.out.println(buffer.toString());}  }
class C{  public static CGPoint ccpFromSize(CGSize s){  return ccp(s.width,s.height);}  }
class C{  @Override public Object[] handle(ResultSet rs) throws SQLException {  return rs.next() ? this.convert.toArray(rs) : null;}  }
class C{  public OffsetDateTime plusDays(long days){  return with(dateTime.plusDays(days),offset);}  }
class C{  public JSONArray optJSONArray(int index){  Object o=opt(index);  return o instanceof JSONArray ? (JSONArray)o : null;}  }
class C{  @Override public ContainerRequest filter(ContainerRequest request) throws WebApplicationException {  if (!request.isSecure()) {    throw WebException.forbidden().message(CommonParams.ERROR_NOT_SECURE).build();  }  if (request.getUserPrincipal() == null) {    throw WebException.forbidden().message(CommonParams.ERROR_NOT_AUTHENTICATED).build();  }  return request;}  }
class C{  protected void paintData(Graphics2D g2,Variate.N xData,Variate.N yData){  double x0=transformX(((Number)xData.get(0)).doubleValue());  double y0=transformY(((Number)yData.get(0)).doubleValue());  GeneralPath path=new GeneralPath();  path.moveTo((float)x0,(float)y0);  double x=x0;  double y=y0;  for (int i=1, n=xData.getCount(); i < n; i++) {    x=transformX(((Number)xData.get(i)).doubleValue());    y=transformY(((Number)yData.get(i)).doubleValue());    path.lineTo((float)x,(float)y);  }  if (xData2 != null & yData2 != null) {    for (int i=xData2.getCount() - 1; i >= 0; i--) {      x=transformX(((Number)xData2.get(i)).doubleValue());      y=transformY(((Number)yData2.get(i)).doubleValue());      path.lineTo((float)x,(float)y);    }  } else {    double y1=transformY(0.0);    path.lineTo((float)x,(float)y1);    path.lineTo((float)x0,(float)y1);    path.lineTo((float)x0,(float)y0);  }  path.closePath();  g2.setPaint(linePaint);  g2.setStroke(lineStroke);  g2.fill(path);}  }
class C{  protected Object clone() throws CloneNotSupportedException {  AbstractAction newAction=(AbstractAction)super.clone();synchronized (this) {    if (arrayTable != null) {      newAction.arrayTable=(ArrayTable)arrayTable.clone();    }  }  return newAction;}  }
class C{  public Node(Rdf type,Map<String,byte[]> set){  this(type);  this.putAll(set);}  }
class C{  private boolean isServiceAlreadyRunning(){  ActivityManager manager=(ActivityManager)application.getSystemService(Context.ACTIVITY_SERVICE);  for (  ActivityManager.RunningServiceInfo service : manager.getRunningServices(Integer.MAX_VALUE)) {    if (StreamService.class.getName().equals(service.service.getClassName())) {      return true;    }  }  return false;}  }
class C{  public void run(){  byte[] buffer=null;  boolean useStream=(ais != null);  if (useStream) {    buffer=new byte[BUFFER_SIZE];  } else {    buffer=audioData;  }  while (wantedState != STATE_STOPPING) {    if (wantedState == STATE_WAITING) {      if (DEBUG || Printer.debug)       Printer.debug("DataPusher.run(): waiting 5 seconds");      try {synchronized (this) {          threadState=STATE_WAITING;          wantedState=STATE_STOPPING;          wait(AUTO_CLOSE_TIME);        }      } catch (      InterruptedException ie) {      }      if (DEBUG || Printer.debug)       Printer.debug("DataPusher.run(): waiting finished");      continue;    }    if (newPos >= 0) {      pos=newPos;      newPos=-1;    }    threadState=STATE_PLAYING;    int toWrite=BUFFER_SIZE;    if (useStream) {      try {        pos=0;        toWrite=ais.read(buffer,0,buffer.length);      } catch (      java.io.IOException ioe) {        toWrite=-1;      }    } else {      if (toWrite > audioDataByteLength - pos) {        toWrite=audioDataByteLength - pos;      }      if (toWrite == 0) {        toWrite=-1;      }    }    if (toWrite < 0) {      if (DEBUG || Printer.debug)       Printer.debug("DataPusher.run(): Found end of stream");      if (!useStream && looping) {        if (DEBUG || Printer.debug)         Printer.debug("DataPusher.run(): setting pos back to 0");        pos=0;        continue;      }      if (DEBUG || Printer.debug)       Printer.debug("DataPusher.run(): calling drain()");      wantedState=STATE_WAITING;      source.drain();      continue;    }    if (DEBUG || Printer.debug)     Printer.debug("> DataPusher.run(): Writing " + toWrite + " bytes");    int bytesWritten=source.write(buffer,pos,toWrite);    pos+=bytesWritten;    if (DEBUG || Printer.debug)     Printer.debug("< DataPusher.run(): Wrote " + bytesWritten + " bytes");  }  threadState=STATE_STOPPING;  if (DEBUG || Printer.debug)   Printer.debug("DataPusher: closing device");  if (Printer.trace)   Printer.trace("DataPusher: source.flush()");  source.flush();  if (DEBUG || Printer.trace)   Printer.trace("DataPusher: source.stop()");  source.stop();  if (DEBUG || Printer.trace)   Printer.trace("DataPusher: source.flush()");  source.flush();  if (DEBUG || Printer.trace)   Printer.trace("DataPusher: source.close()");  source.close();  threadState=STATE_STOPPED;synchronized (this) {    pushThread=null;    notifyAll();  }  if (DEBUG || Printer.debug)   Printer.debug("DataPusher:end of thread");}  }
class C{  public SQLFeatureNotSupportedException(String reason,String sqlState){  super(reason,sqlState,0);}  }
class C{  public static sun.net.ftp.FtpClient create(){  return new FtpClient();}  }
class C{  public int send(byte[] buffer,int offset,int count){  checkArrayBounds(buffer,offset,count);  if (count == 0) {    return 0;  }  byte[] data=buffer;  if (offset > 0) {    data=new byte[count];    System.arraycopy(buffer,offset,data,0,count);  }  IntOut bytesSentOut=new IntOut();  try {    IDevice.checkResult(LibIMobileDevice.idevice_connection_send(getRef(),data,count,bytesSentOut));    return bytesSentOut.getValue();  }  finally {    bytesSentOut.delete();  }}  }
class C{  public boolean userLocked(){  return NotificationData.getUserLocked(row);}  }
class C{  private void selectAndReveal(int offset,int length){  if (fTextViewer instanceof ITextViewerExtension5) {    ITextViewerExtension5 extension=(ITextViewerExtension5)fTextViewer;    extension.exposeModelRange(new Region(offset,length));  } else   if (!fTextViewer.overlapsWithVisibleRegion(offset,length))   fTextViewer.resetVisibleRegion();  fTextViewer.setSelectedRange(offset,length);  fTextViewer.revealRange(offset,length);}  }
class C{  public DetectorResult detect() throws NotFoundException, FormatException {  return detect(null);}  }
class C{  protected synchronized void superposeBitSet(FixedBitSet incomingBitSet,double weight){  weight=(int)Math.round(weight * Math.pow(10,BINARY_VECTOR_DECIMAL_PLACES));  if (weight == 0)   return;  totalNumberOfVotes.set(totalNumberOfVotes.get() + (int)weight);  int logFloorOfWeight=(int)(Math.floor(Math.log(weight) / Math.log(2)));  if (logFloorOfWeight < votingRecord.size() - 1) {    while (logFloorOfWeight > 0) {      superposeBitSetFromRowFloor(incomingBitSet,logFloorOfWeight);      weight=weight - (int)Math.pow(2,logFloorOfWeight);      logFloorOfWeight=(int)(Math.floor(Math.log(weight) / Math.log(2)));    }  }  for (int x=0; x < weight; x++)   superposeBitSetFromRowFloor(incomingBitSet,0);}  }
class C{  public void testWithFail(Attribute att,boolean isClass) throws Exception {  if (!test(att,isClass)) {    throw m_FailReason;  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static void run(AdSense adsense,String adClientId,String adUnitId,int maxPageSize) throws Exception {  System.out.println("=================================================================");  System.out.printf("Listing all custom channels for ad unit %s\n",adUnitId);  System.out.println("=================================================================");  String pageToken=null;  do {    CustomChannels customChannels=adsense.adunits().customchannels().list(adClientId,adUnitId).setMaxResults(maxPageSize).setPageToken(pageToken).execute();    if (customChannels.getItems() != null && !customChannels.getItems().isEmpty()) {      for (      CustomChannel channel : customChannels.getItems()) {        System.out.printf("Custom channel with code \"%s\" and name \"%s\" was found.\n",channel.getCode(),channel.getName());      }    } else {      System.out.println("No custom channels found.");    }    pageToken=customChannels.getNextPageToken();  } while (pageToken != null);  System.out.println();}  }
class C{  public boolean isClosed(){  return this.stats.isClosed();}  }
class C{  protected boolean canPathsBeAdded(TreePath[] paths){  if (paths == null || paths.length == 0 || rowMapper == null || selection == null || selectionMode == TreeSelectionModel.DISCONTIGUOUS_TREE_SELECTION)   return true; else {    BitSet bitSet=new BitSet();    DefaultListSelectionModel lModel=listSelectionModel;    int anIndex;    int counter;    int min=lModel.getMinSelectionIndex();    int max=lModel.getMaxSelectionIndex();    TreePath[] tempPath=new TreePath[1];    if (min != -1) {      for (counter=min; counter <= max; counter++) {        if (lModel.isSelectedIndex(counter))         bitSet.set(counter);      }    } else {      tempPath[0]=paths[0];      min=max=rowMapper.getRowsForPaths(tempPath)[0];    }    for (counter=paths.length - 1; counter >= 0; counter--) {      if (paths[counter] != null) {        tempPath[0]=paths[counter];        int[] rows=rowMapper.getRowsForPaths(tempPath);        if (rows == null) {          return false;        }        anIndex=rows[0];        min=Math.min(anIndex,min);        max=Math.max(anIndex,max);        if (anIndex == -1)         return false;        bitSet.set(anIndex);      }    }    for (counter=min; counter <= max; counter++)     if (!bitSet.get(counter))     return false;  }  return true;}  }
class C{  public void sendCommand(CMD cmdID,int param){  String cmd=createCommand(cmdID,param);  if (cmd != null)   sendTelegram(cmd.toCharArray());}  }
class C{  public void resetRotations(){  this.yawVariation=0.0F;  this.pitchVariation=0.0F;  this.prevYawVariation=0.0F;  this.prevPitchVariation=0.0F;}  }
class C{  public boolean isAllowed(Object o,String displayName){  Enumeration<Object> enm;  Class<?> c;  boolean result;  HashSet<String> list;  result=true;  enm=allowed();  while (enm.hasMoreElements()) {    c=(Class<?>)enm.nextElement();    if (c.isInstance(o)) {      list=m_Allowed.get(c);      result=list.contains(displayName);      break;    }  }  return result;}  }
class C{  public void writeExif(Bitmap bmap,String exifOutFileName) throws FileNotFoundException, IOException {  if (bmap == null || exifOutFileName == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  OutputStream s=null;  try {    s=getExifWriterStream(exifOutFileName);    bmap.compress(Bitmap.CompressFormat.JPEG,90,s);    s.flush();  } catch (  IOException e) {    closeSilently(s);    throw e;  }  s.close();}  }
class C{  public void testSeekFilteredEvent2() throws Exception {  File logDir=prepareLogDir("testSeekFilteredEvent2");  DiskLog log=openLog(logDir,false);  long firstSeqno=25;  long lastSeqno=-1;  long seqno=25;  LogConnection conn=log.connect(false);  for (int i=0; i < 4; i++) {    THLEvent e;    if (i % 2 == 0) {      lastSeqno=seqno + 4;      logger.info("Creating filtered event: start=" + seqno + " end="+ lastSeqno);      e=this.createFilteredTHLEvent(seqno,lastSeqno,(short)0);      seqno+=5;    } else {      logger.info("Creating normal event: seqno=" + seqno);      lastSeqno=seqno;      e=this.createTHLEvent(seqno++);    }    conn.store(e,false);  }  conn.commit();  conn.release();  log.release();  DiskLog log2=openLog(logDir,true);  log2.validate();  LogConnection conn2=log2.connect(true);  for (long s=firstSeqno; s <= lastSeqno; s++) {    logger.info("Seeking seqno: " + s);    boolean found=conn2.seek(s);    Assert.assertTrue("Found initial seqno with seek: " + s,found);    long nextExpectedSeqno=s;    long lastFoundSeqno=-1;    THLEvent thlEvent;    while ((thlEvent=conn2.next(false)) != null) {      ReplDBMSEvent event=(ReplDBMSEvent)thlEvent.getReplEvent();      if (event instanceof ReplDBMSFilteredEvent) {        ReplDBMSFilteredEvent filteredEvent=(ReplDBMSFilteredEvent)event;        logger.info("Found filtered event: start seqno=" + filteredEvent.getSeqno() + " end seqno="+ filteredEvent.getSeqnoEnd());        String msg=String.format("Filtered event contains expected seqno: [%d <= %d <= %d] (Starting seqno: %s)",filteredEvent.getSeqno(),nextExpectedSeqno,filteredEvent.getSeqnoEnd(),s);        Assert.assertTrue(msg,filteredEvent.getSeqno() <= nextExpectedSeqno && nextExpectedSeqno <= filteredEvent.getSeqnoEnd());        lastFoundSeqno=filteredEvent.getSeqnoEnd();      } else {        logger.info("Found normal event: seqno=" + event.getSeqno());        Assert.assertEquals("Seqno of normal event",nextExpectedSeqno,event.getSeqno());        lastFoundSeqno=event.getSeqno();      }      nextExpectedSeqno=lastFoundSeqno + 1;    }    Assert.assertEquals("Expect to be at last seqno of log",lastSeqno,lastFoundSeqno);  }  log2.release();}  }
class C{  public String optString(int index){  return this.optString(index,"");}  }
class C{  private static Attributes encodeObject(char separator,Object obj,Attributes attrs,Attribute objectClass,boolean cloned) throws NamingException {  boolean structural=(objectClass.size() == 0 || (objectClass.size() == 1 && objectClass.contains("top")));  if (structural) {    objectClass.add(JAVA_OBJECT_CLASSES[STRUCTURAL]);  }  if (obj instanceof Referenceable) {    objectClass.add(JAVA_OBJECT_CLASSES[BASE_OBJECT]);    objectClass.add(JAVA_OBJECT_CLASSES[REF_OBJECT]);    if (!cloned) {      attrs=(Attributes)attrs.clone();    }    attrs.put(objectClass);    return (encodeReference(separator,((Referenceable)obj).getReference(),attrs,obj));  } else   if (obj instanceof Reference) {    objectClass.add(JAVA_OBJECT_CLASSES[BASE_OBJECT]);    objectClass.add(JAVA_OBJECT_CLASSES[REF_OBJECT]);    if (!cloned) {      attrs=(Attributes)attrs.clone();    }    attrs.put(objectClass);    return (encodeReference(separator,(Reference)obj,attrs,null));  } else   if (obj instanceof java.io.Serializable) {    objectClass.add(JAVA_OBJECT_CLASSES[BASE_OBJECT]);    if (!(objectClass.contains(JAVA_OBJECT_CLASSES[MAR_OBJECT]) || objectClass.contains(JAVA_OBJECT_CLASSES_LOWER[MAR_OBJECT]))) {      objectClass.add(JAVA_OBJECT_CLASSES[SER_OBJECT]);    }    if (!cloned) {      attrs=(Attributes)attrs.clone();    }    attrs.put(objectClass);    attrs.put(new BasicAttribute(JAVA_ATTRIBUTES[SERIALIZED_DATA],serializeObject(obj)));    if (attrs.get(JAVA_ATTRIBUTES[CLASSNAME]) == null) {      attrs.put(JAVA_ATTRIBUTES[CLASSNAME],obj.getClass().getName());    }    if (attrs.get(JAVA_ATTRIBUTES[TYPENAME]) == null) {      Attribute tAttr=LdapCtxFactory.createTypeNameAttr(obj.getClass());      if (tAttr != null) {        attrs.put(tAttr);      }    }  } else   if (obj instanceof DirContext) {  } else {    throw new IllegalArgumentException("can only bind Referenceable, Serializable, DirContext");  }  return attrs;}  }
class C{  public UnicastServerRef(int port){  super(new LiveRef(port));}  }
class C{  public Boolean isMarkAsSsdSupported(){  return markAsSsdSupported;}  }
class C{  public TurkishAnalyzer(CharArraySet stopwords){  this(stopwords,CharArraySet.EMPTY_SET);}  }
class C{  public void deleteNodes(){  java.util.List untouched=nodes.clearUntouched();  Object[] cells=new Object[untouched.size()];  Iterator i=untouched.iterator();  for (int x=0; i.hasNext(); x++) {    Map.Entry entry=(Map.Entry)i.next();    cells[x]=entry.getValue();  }  graph.removeCells(cells,true);}  }
class C{  public void testTimedInvokeAll5() throws Throwable {  ForkJoinPool e=new ForkJoinPool(1);  PoolCleaner cleaner=null;  try {    cleaner=cleaner(e);    List<Callable<String>> l=new ArrayList<Callable<String>>();    l.add(new StringTask());    l.add(new StringTask());    List<Future<String>> futures=e.invokeAll(l,LONG_DELAY_MS,MILLISECONDS);    assertEquals(2,futures.size());    for (    Future<String> future : futures)     assertSame(TEST_STRING,future.get());  }  finally {    if (cleaner != null) {      cleaner.close();    }  }}  }
class C{  public static JSONArray rowToJSONArray(JSONTokener x) throws JSONException {  JSONArray ja=new JSONArray();  for (; ; ) {    String value=getValue(x);    char c=x.next();    if (value == null || (ja.length() == 0 && value.length() == 0 && c != ',')) {      return null;    }    ja.put(value);    for (; ; ) {      if (c == ',') {        break;      }      if (c != ' ') {        if (c == '\n' || c == '\r' || c == 0) {          return ja;        }        throw x.syntaxError("Bad character '" + c + "' ("+ (int)c+ ").");      }      c=x.next();    }  }}  }
class C{  @Override public void processConnect(WebSocketChannel channel,WSURI uri,String[] protocols){  LOG.entering(CLASS_NAME,"connect",new Object[]{uri,protocols});  WebSocketNativeChannel wsChannel=(WebSocketNativeChannel)channel;  wsChannel.balanced.set(0);  nextHandler.processConnect(channel,uri.addQueryParameter(".kl=Y"),protocols);}  }
class C{  GridClientDataImpl(String cacheName,GridClientImpl client,Collection<GridClientNode> nodes,GridClientPredicate<? super GridClientNode> filter,GridClientLoadBalancer balancer,Set<GridClientCacheFlag> flags,boolean cacheMetrics){  super(client,nodes,filter,balancer);  this.cacheName=cacheName;  this.cacheMetrics=cacheMetrics;  this.flags=flags == null ? Collections.<GridClientCacheFlag>emptySet() : Collections.unmodifiableSet(flags);}  }
class C{  public SimpleTree simulateTree(Tree[] subtrees,DemographicModel model,double rootHeight,boolean preserveSubtreesHeights){  SimpleNode[] roots=new SimpleNode[subtrees.length];  SimpleTree tree;  for (int i=0; i < roots.length; i++) {    roots[i]=new SimpleNode(subtrees[i],subtrees[i].getRoot());  }  if (roots.length == 1) {    tree=new SimpleTree(roots[0]);  } else {    tree=new SimpleTree(simulator.simulateCoalescent(roots,model.getDemographicFunction()));  }  if (!Double.isNaN(rootHeight) && rootHeight > 0.0) {    if (preserveSubtreesHeights) {      limitNodes(tree,rootHeight - 1e-12);      tree.setRootHeight(rootHeight);    } else {      attemptToScaleTree(tree,rootHeight);    }  }  return tree;}  }
class C{  public Replicator(){  super(ResourceType.REPLICATOR,"unknown");  this.dataServiceName="unknown";  this.host="unknown";}  }
class C{  private boolean isSimplePolygonal(Geometry geom){  List rings=LinearComponentExtracter.getLines(geom);  for (Iterator i=rings.iterator(); i.hasNext(); ) {    LinearRing ring=(LinearRing)i.next();    if (!isSimpleLinearGeometry(ring))     return false;  }  return true;}  }
class C{  @SuppressWarnings("serial") public void testFilterExistsAndNotExists(){  final FilterNode exists=(FilterNode)new Helper(){{      tmp=filter(exists(varNode(x),joinGroupNode(statementPatternNode(constantNode(a),constantNode(b),varNode(y)),statementPatternNode(constantNode(a),constantNode(b),varNode(z)))));    }  }.getTmp();  final FilterNode notExists=(FilterNode)new Helper(){{      tmp=filter(exists(varNode(x),joinGroupNode(statementPatternNode(constantNode(a),constantNode(b),varNode(y)),statementPatternNode(constantNode(a),constantNode(b),varNode(z)))));    }  }.getTmp();  final QueryRoot query=new QueryRoot(QueryType.SELECT);  final JoinGroupNode jgn=new JoinGroupNode();  jgn.addChild(exists);  jgn.addChild(notExists);  query.setWhereClause(jgn);  final Set<IVariable<?>> requiredBound=new HashSet<IVariable<?>>(){{      add(Var.var("x"));    }  };  final Set<IVariable<?>> desiredBound=new HashSet<IVariable<?>>();  final AST2BOpContext context=new AST2BOpContext(new ASTContainer(query),store);  final StaticAnalysis sa=new StaticAnalysis(new QueryRoot(QueryType.SELECT),context);  final GlobalAnnotations globals=new GlobalAnnotations(context.getLexiconNamespace(),context.getTimestamp());  AST2BOpUtility.toVE(getBOpContext(),globals,exists.getValueExpressionNode());  AST2BOpUtility.toVE(getBOpContext(),globals,notExists.getValueExpressionNode());  assertEquals(requiredBound,exists.getRequiredBound(sa));  assertEquals(desiredBound,exists.getDesiredBound(sa));  assertEquals(requiredBound,notExists.getRequiredBound(sa));  assertEquals(desiredBound,notExists.getDesiredBound(sa));}  }
class C{  public SwitchPreference(Context context,AttributeSet attrs,int defStyleAttr,int defStyleRes){  super(context,attrs,defStyleAttr,defStyleRes);}  }
class C{  public final CharSequence yytext(){  return zzBuffer.subSequence(zzStartRead,zzMarkedPos);}  }
class C{  private LongConstant parseLongConstant(int index) throws IOException {  long value=readLong();  return new LongConstant(_class.getConstantPool(),index,value);}  }
class C{  public static CCColorLayer node(ccColor4B color){  CGSize size=CCDirector.sharedDirector().winSize();  return new CCColorLayer(color,size.width,size.height);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  ZPseudoComp uiComp=getUIComp(stack);  if (uiComp != null) {    return new Integer(uiComp.getTrueY());  }  return null;}  }
class C{  public void warning(SAXParseException e) throws SAXException {  javax.xml.transform.ErrorListener errorListener=m_transformer.getErrorListener();  if (errorListener instanceof ErrorHandler) {    ((ErrorHandler)errorListener).warning(e);  } else {    try {      errorListener.warning(new javax.xml.transform.TransformerException(e));    } catch (    javax.xml.transform.TransformerException te) {      throw e;    }  }}  }
class C{  @Field(19) public Pointer<Float> pfltVal(){  return this.io.getPointerField(this,19);}  }
class C{  void displayState(){  if (reporter.getCurrentReport() != null) {    if (reporter.getCurrentReport().equals("")) {      setText(Bundle.getMessage("Blank"));    } else {      setText(reporter.getCurrentReport().toString());    }  } else {    setText(Bundle.getMessage("NoReport"));  }  updateSize();  return;}  }
class C{  public StringBuffer insert(int index,int i){  return insert(index,Integer.toString(i));}  }
class C{  public void snackBar(@StringRes int message,@StringRes int actionMessage,View.OnClickListener listener,int priority){  snackBar.message(message,actionMessage,listener,priority);}  }
class C{  public synchronized void openRead() throws ReplicatorException, InterruptedException {  if (!file.exists()) {    throw new THLException("Cannot open log file for reading; file does not exist: " + file.getName());  }  try {    dataInput=new BufferedFileDataInput(file,bufferSize);  } catch (  IOException e) {    throw new THLException("Unable to open file for reading: " + file.getName(),e);  }  mode=AccessMode.read;  checkFileHeader(dataInput);}  }
class C{  public String toEscapedString(){  StringBuilder sb=new StringBuilder();  toStringBuilderEscaped(sb);  return sb.toString();}  }
class C{  public double[] evaluateFunction(double[] x){  return CocoJNI.cocoEvaluateFunction(this.pointer,x);}  }
class C{  @Override protected void initializeValues(){  mCamera=new PLCamera();  mInternalCameraListener=null;  mElements=new ArrayList<PLISceneElement>();  mView=null;  mCollisionData=PLCollisionData.PLCollisionDataMake();  mMatrixGrabber=new MatrixGrabber();  mModelMatrix=mMatrixGrabber.mModelView;  mProjectionMatrix=mMatrixGrabber.mProjection;  mViewport=new int[4];  mPosition=new float[3];  mIsLocked=mIsWaitingForClick=false;  super.initializeValues();}  }
class C{  public CouldntLoadDriverException(final Exception exception){  super(exception);}  }
class C{  public void removeNeuronGroup(NeuronGroup neuronGroup){  numMembers-=neuronGroup.size();  neuronGroupList.remove(neuronGroup);  getParentNetwork().fireGroupRemoved(neuronGroup);}  }
class C{  public TemplatePersistenceData[] read(Reader reader,ResourceBundle bundle) throws IOException {  return read(new InputSource(reader),bundle,null);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public void closeSimulation(final SimulationAgent simulationAgent){  simulationAgent.dispose();}  }
class C{  public void initializeTabUma(TabCreationState creationState){  setTabUma(new TabUma(this,creationState,mActivity.getTabModelSelector().getModel(mActivity.isIncognito())));}  }
class C{  public void filledEllipse(double x,double y,double semiMajorAxis,double semiMinorAxis){  if (semiMajorAxis < 0)   throw new IllegalArgumentException("ellipse semimajor axis can't be negative");  if (semiMinorAxis < 0)   throw new IllegalArgumentException("ellipse semiminor axis can't be negative");  double xs=scaleX(x);  double ys=scaleY(y);  double ws=factorX(2 * semiMajorAxis);  double hs=factorY(2 * semiMinorAxis);  if (ws <= 1 && hs <= 1)   pixel(x,y); else   offscreen.fill(new Ellipse2D.Double(xs - ws / 2,ys - hs / 2,ws,hs));  draw();}  }
class C{  public static TableColumnModel leftShift(TableColumnModel self,TableColumn column){  self.addColumn(column);  return self;}  }
class C{  public void updateRaster(float lt,float ln,int offset_x1,int offset_y1,String url,LinkProperties properties,int graphicUpdateMask) throws IOException {  writeGraphicGestureHeader(graphicUpdateMask);  LinkRaster.write(lt,ln,offset_x1,offset_y1,url,properties,link.dos);}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static Builder from(Path swaggerPath){  Validate.notNull(swaggerPath,"swaggerPath must not be null");  if (Files.notExists(swaggerPath)) {    throw new IllegalArgumentException(String.format("swaggerPath does not exist: %s",swaggerPath));  }  try {    if (Files.isHidden(swaggerPath)) {      throw new IllegalArgumentException("swaggerPath must not be a hidden file");    }  } catch (  IOException e) {    throw new RuntimeException("Failed to check if swaggerPath is a hidden file",e);  }  return new Builder(swaggerPath);}  }
class C{  public AWTPermission(String name,String actions){  super(name,actions);}  }
class C{  public SignatureVisitor visitExceptionType(){  return this;}  }
class C{  final boolean transferForSignal(Node node){  if (!compareAndSetWaitStatus(node,Node.CONDITION,0))   return false;  Node p=enq(node);  int ws=p.waitStatus;  if (ws > 0 || !compareAndSetWaitStatus(p,ws,Node.SIGNAL))   LockSupport.unpark(node.thread);  return true;}  }
class C{  @Override public Role findById(Long id){  Role role=roleRepository.findOne(id);  return role;}  }
class C{  private void initPanel(){  fillFieldValues();  mainPanel.addItem("Initial Learning Rate",tfAlpha);  mainPanel.addItem("Initial Neighborhood Size",tfInitNeighborhoodSize);  mainPanel.addItem("Learning Decay Rate",tfAlphaDecayRate);  mainPanel.addItem("Neighborhood Decay Amount",tfNeigborhoodDecayAmount);  add(mainPanel);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public boolean confirmEnoughOffsetSources(int[] sourcesOffsets){  if (countOfOffsetSources(sourcesOffsets) != numSources) {    throw new RuntimeException("Incorrect number of sources in offsets");  }  return true;}  }
class C{  public static Version fromOrdinalNoThrow(short ordinal,boolean returnNullForCurrent){  if (ordinal == TOKEN_ORDINAL) {    return TOKEN;  }  if (ordinal >= VALUES.length || VALUES[ordinal] == null) {    return returnNullForCurrent ? null : CURRENT;  }  return VALUES[ordinal];}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  String DEMHeader=null;  int row, col, x, y;  int progress=0;  double z;  int i, c;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  boolean flag=false;  double flowDir=0;  double pitElev=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      DEMHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster pntr=new WhiteboxRaster(inputHeader,"r");    int rows=pntr.getNumberRows();    int cols=pntr.getNumberColumns();    double noData=pntr.getNoDataValue();    WhiteboxRaster DEM=new WhiteboxRaster(DEMHeader,"r");    if (DEM.getNumberRows() != rows || DEM.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,-999);    output.setPreferredPalette(DEM.getPreferredPalette());    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        flowDir=pntr.getValue(row,col);        if (output.getValue(row,col) == -999 && flowDir != noData) {          flag=false;          x=col;          y=row;          do {            flowDir=pntr.getValue(y,x);            if (flowDir > 0) {              c=(int)(Math.log(flowDir) / LnOf2);              x+=dX[c];              y+=dY[c];              if (output.getValue(y,x) != -999) {                pitElev=DEM.getValue(y,x) - output.getValue(y,x);                flag=true;              }            } else {              pitElev=DEM.getValue(y,x);              flag=true;            }          } while (!flag);          flag=false;          x=col;          y=row;          do {            z=DEM.getValue(y,x) - pitElev;            output.setValue(y,x,z);            flowDir=pntr.getValue(y,x);            if (flowDir > 0) {              c=(int)(Math.log(flowDir) / LnOf2);              x+=dX[c];              y+=dY[c];              z=output.getValue(y,x);              if (z != -999) {                flag=true;              }            } else {              output.setValue(y,x,0);              flag=true;            }          } while (!flag);        } else         if (flowDir == noData) {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void verifyTranslations(SegmentedTimeline timeline,long startTest){  for (long testCycle=TEST_CYCLE_START; testCycle < TEST_CYCLE_END; testCycle+=TEST_CYCLE_INC) {    long millisecond=startTest + testCycle * timeline.getSegmentSize();    SegmentedTimeline.Segment segment=timeline.getSegment(millisecond);    for (int i=0; i < 1000; i++) {      long translatedValue=timeline.toTimelineValue(segment.getMillisecond());      long newValue=timeline.toMillisecond(translatedValue);      if (segment.inExcludeSegments() || segment.inExceptionSegments()) {        SegmentedTimeline.Segment tempSegment=segment.copy();        tempSegment.moveIndexToStart();        do {          tempSegment.inc();        } while (!tempSegment.inIncludeSegments());        assertEquals(tempSegment.getMillisecond(),newValue);      } else {        assertEquals(segment.getMillisecond(),newValue);      }      segment.inc();    }  }}  }
class C{  public static String capturePhoto(){  return capturePhoto(-1,-1);}  }
class C{  public final synchronized double readDouble(){  String input="";  double value=0.0D;  try {    input=in.readLine();  } catch (  IOException e) {  }  if (input != null) {    try {      value=Double.parseDouble(input);    } catch (    NumberFormatException e) {    }  }  return value;}  }
class C{  public void testConnectionDataSource() throws Exception {  if (!this.isSetForFabricTest) {    return;  }  FabricMySQLDataSource ds=getNewDefaultDataSource();  ds.setFabricServerGroup("fabric_test1_global");  Connection c=ds.getConnection(this.username,this.password);  ResultSet rs=c.createStatement().executeQuery("select user()");  rs.next();  String userFromDb=rs.getString(1).split("@")[0];  assertEquals(this.username,userFromDb);  rs.close();  c.close();}  }
class C{  public void add(String dn,String attributes,String delimiter,String seperator) throws NamingException, PageException {  DirContext ctx=new InitialDirContext(env);  ctx.createSubcontext(dn,toAttributes(attributes,delimiter,seperator));  ctx.close();}  }
class C{  @SuppressWarnings("unchecked") private void processTest(boolean isExpectUndeploy) throws Exception {  try {    Ignite ignite1=startGrid(1);    Ignite ignite2=startGrid(2);    Ignite ignite3=startGrid(3);    Class task1=urlClsLdr1.loadClass("org.apache.ignite.tests.p2p.P2PTestTaskExternalPath1");    Integer res1=(Integer)ignite1.compute().execute(task1,ignite2.cluster().localNode().id());    stopGrid(1);    Thread.sleep(1000);    Integer res2=(Integer)ignite3.compute().execute(task1,ignite2.cluster().localNode().id());    if (isExpectUndeploy)     assert !res1.equals(res2); else     assert res1.equals(res2);  }  finally {    stopGrid(1);    stopGrid(2);    stopGrid(3);  }}  }
class C{  private synchronized void removeFromConsistList(DccLocoAddress LocoAddress){  if (ConsistList.contains(LocoAddress)) {    ConsistDir.remove(LocoAddress);    ConsistList.remove(LocoAddress);  }  notifyConsistListeners(LocoAddress,ConsistListener.OPERATION_SUCCESS);}  }
class C{  public void testRandomStrings() throws Exception {  Analyzer a=new BasqueAnalyzer();  checkRandomData(random(),a,1000 * RANDOM_MULTIPLIER);  a.close();}  }
class C{  public static boolean initAsync(String Version,Context AppContext,LoaderCallbackInterface Callback){  return AsyncServiceHelper.initOpenCV(Version,AppContext,Callback);}  }
class C{  private static File findGuacamoleHome(){  File guacHome;  String desiredDir=System.getProperty("guacamole.home");  if (desiredDir == null)   desiredDir=System.getenv("GUACAMOLE_HOME");  if (desiredDir != null)   guacHome=new File(desiredDir); else   guacHome=new File(System.getProperty("user.home"),".guacamole");  return guacHome;}  }
class C{  @Override public boolean batchFinished() throws Exception {  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  Instances toFilter=getInputFormat();  if (!isFirstBatchDone()) {    Instances toFilterIgnoringAttributes=removeIgnored(toFilter);    File file=getSerializedClustererFile();    if (!file.isDirectory()) {      ObjectInputStream ois=new ObjectInputStream(new FileInputStream(file));      m_ActualClusterer=(Clusterer)ois.readObject();      Instances header=null;      try {        header=(Instances)ois.readObject();      } catch (      Exception e) {      }      ois.close();      if ((header != null) && (!header.equalHeaders(toFilterIgnoringAttributes))) {        throw new WekaException("Training header of clusterer and filter dataset don't match:\n" + header.equalHeadersMsg(toFilterIgnoringAttributes));      }    } else {      m_ActualClusterer=AbstractClusterer.makeCopy(m_Clusterer);      m_ActualClusterer.buildClusterer(toFilterIgnoringAttributes);    }    Instances filtered=new Instances(toFilter,0);    ArrayList<String> nominal_values=new ArrayList<String>(m_ActualClusterer.numberOfClusters());    for (int i=0; i < m_ActualClusterer.numberOfClusters(); i++) {      nominal_values.add("cluster" + (i + 1));    }    filtered.insertAttributeAt(new Attribute("cluster",nominal_values),filtered.numAttributes());    setOutputFormat(filtered);  }  for (int i=0; i < toFilter.numInstances(); i++) {    convertInstance(toFilter.instance(i));  }  flushInput();  m_NewBatch=true;  m_FirstBatchDone=true;  return (numPendingOutput() != 0);}  }
class C{  public LHS toLHS(CallStack callstack,Interpreter interpreter) throws EvalError {  Object obj=eval(true,callstack,interpreter);  if (!(obj instanceof LHS))   throw new EvalError("Can't assign to:",this,callstack); else   return (LHS)obj;}  }
class C{  public static boolean endsWith(String fileName,String suffix){  return isFilesystemCaseSensitive() ? fileName.endsWith(suffix) : fileName.toLowerCase().endsWith(suffix.toLowerCase());}  }
class C{  public void testStatistic() throws Exception {  RangeStatisticImpl stat=new RangeStatisticImpl("myRange","millis","myDescription");  assertStatistic(stat,"myRange","millis","myDescription");  assertRangeStatistic(stat);}  }
class C{  public static void branchWithCommit(GitRepository repository,String name,String file,String content){  GitScenarios.branchWithCommit(repository,name,file,content,true);}  }
class C{  private void checkSize(final int i){  if (i >= max_size) {    final int old_size=max_size;    max_size+=increment_size;    if (max_size <= i) {      max_size=i + increment_size + 2;    }    final int[] temp=items;    items=new int[max_size];    System.arraycopy(temp,0,items,0,old_size);    increment_size=incrementSize(increment_size);  }}  }
class C{  public String trim(){  return value.trim();}  }
class C{  public static void w(String tag,String s,Object... args){  if (LOG.WARN >= LOGLEVEL)   Log.w(tag,String.format(s,args));}  }
class C{  public Executor withInstrumenter(Instrumenter instrumenter){  this.instrumenter=instrumenter;  return this;}  }
class C{  public void fadeUpToLayer(int index){  mTransitionState=TRANSITION_STARTING;  Arrays.fill(mIsLayerOn,0,index + 1,true);  Arrays.fill(mIsLayerOn,index + 1,mLayers.length,false);  invalidateSelf();}  }
class C{  @Override public void println(int priority,String tag,String msg,Throwable tr){  String useMsg=msg;  if (useMsg == null) {    useMsg="";  }  if (tr != null) {    msg+="\n" + Log.getStackTraceString(tr);  }  Log.println(priority,tag,useMsg);  if (mNext != null) {    mNext.println(priority,tag,msg,tr);  }}  }
class C{  public MethodHandleInfo revealDirect(MethodHandle target){  MemberName member=target.internalMemberName();  if (member == null || (!member.isResolved() && !member.isMethodHandleInvoke()))   throw newIllegalArgumentException("not a direct method handle");  Class<?> defc=member.getDeclaringClass();  byte refKind=member.getReferenceKind();  assert (MethodHandleNatives.refKindIsValid(refKind));  if (refKind == REF_invokeSpecial && !target.isInvokeSpecial())   refKind=REF_invokeVirtual;  if (refKind == REF_invokeVirtual && defc.isInterface())   refKind=REF_invokeInterface;  try {    checkAccess(refKind,defc,member);    checkSecurityManager(defc,member);  } catch (  IllegalAccessException ex) {    throw new IllegalArgumentException(ex);  }  if (allowedModes != TRUSTED && member.isCallerSensitive()) {    Class<?> callerClass=target.internalCallerClass();    if (!hasPrivateAccess() || callerClass != lookupClass())     throw new IllegalArgumentException("method handle is caller sensitive: " + callerClass);  }  return new InfoFromMemberName(this,member,refKind);}  }
class C{  public synchronized void print(String s,int log) throws OutputException {  print(s,V_VERBOSE,log);}  }
class C{  protected void addX(float xOffset){  if (xOffset == 0f)   return;  m_position[m_area].x+=xOffset;  log.finest("Page=" + m_pageNo + " ["+ m_area+ "] "+ m_position[m_area].x+ "/"+ m_position[m_area].y);}  }
class C{  public boolean supportsConversion(Class<?> targetType,Object valueToConvert){  boolean rVal=false;  if (StringWrapper.class.isAssignableFrom(targetType)) {    rVal=true;  }  return (rVal);}  }
class C{  @Nullable public static Action findAction(String actionName,Frame frame){  String[] elements=ValuePathHelper.parse(actionName);  if (elements.length > 1) {    String id=elements[elements.length - 1];    String[] subPath=(String[])ArrayUtils.subarray(elements,0,elements.length - 1);    Component component=frame.getComponent(ValuePathHelper.format(subPath));    if (component != null) {      if (component instanceof Component.ActionsHolder) {        return ((Component.ActionsHolder)component).getAction(id);      } else {        throw new IllegalArgumentException(String.format("Component '%s' can't contain actions",Arrays.toString(subPath)));      }    } else {      throw new IllegalArgumentException(String.format("Can't find component '%s'",Arrays.toString(subPath)));    }  } else   if (elements.length == 1) {    String id=elements[0];    return frame.getAction(id);  } else {    throw new IllegalArgumentException("Invalid action name: " + actionName);  }}  }
class C{  public boolean isSetCronExpression(){  return this.cronExpression != null;}  }
class C{  public static double toRadians(double angleDegrees){  return (angleDegrees * Math.PI) / 180.0;}  }
class C{  protected void finalize(){  ((DTEDFrame)obj).dispose();}  }
class C{  protected static Object object(double element){  return new Double(element);}  }
class C{  public Matrix4x3d translationRotateScaleMul(Vector3dc translation,Quaterniond quat,Vector3dc scale,Matrix4x3dc m){  return translationRotateScaleMul(translation.x(),translation.y(),translation.z(),quat.x,quat.y,quat.z,quat.w,scale.x(),scale.y(),scale.z(),m);}  }
class C{  public void diffuseSkylight(Cube cube){  if (cube.getCubicWorld().getProvider().getHasNoSky()) {    cube.setInitialLightingDone(true);    return;  }  ICubicWorld world=cube.getCubicWorld();  int[][] minBlockYArr=new int[16][16];  int[][] maxBlockYArr=new int[16][16];  int minBlockX=cubeToMinBlock(cube.getX());  int maxBlockX=cubeToMaxBlock(cube.getX());  int minBlockZ=cubeToMinBlock(cube.getZ());  int maxBlockZ=cubeToMaxBlock(cube.getZ());  for (int localX=0; localX <= Cube.SIZE - 1; ++localX) {    for (int localZ=0; localZ <= Cube.SIZE - 1; ++localZ) {      Pair<Integer,Integer> minMax=getMinMaxLightUpdateY(cube,localX,localZ);      minBlockYArr[localX][localZ]=minMax == null ? Integer.MAX_VALUE : minMax.getLeft();      maxBlockYArr[localX][localZ]=minMax == null ? Integer.MIN_VALUE : minMax.getRight();    }  }  Int2ObjectMap<FastCubeBlockAccess> blockAccessMap=new Int2ObjectOpenCustomHashMap<>(10,0.75f,CUBE_Y_HASH);  Column column=cube.getColumn();  for (int blockX=minBlockX; blockX <= maxBlockX; blockX++) {    for (int blockZ=minBlockZ; blockZ <= maxBlockZ; blockZ++) {      this.mutablePos.setPos(blockX,this.mutablePos.getY(),blockZ);      int minBlockY=minBlockYArr[blockX - minBlockX][blockZ - minBlockZ];      int maxBlockY=maxBlockYArr[blockX - minBlockX][blockZ - minBlockZ];      if (minBlockY > maxBlockY) {        continue;      }      int topBlockY=getOcclusionHeight(column,blockToLocal(blockX),blockToLocal(blockZ));      Iterable<Cube> cubes=column.getLoadedCubes(blockToCube(maxBlockY),blockToCube(minBlockY));      for (      Cube otherCube : cubes) {        int cubeY=otherCube.getY();        if (otherCube != cube && canStopUpdating(cube,this.mutablePos,topBlockY)) {          break;        }        if (otherCube != cube && !cube.isInitialLightingDone()) {          continue;        }        if (!canUpdateCube(otherCube)) {          int minScheduledY=Math.max(cubeToMinBlock(cubeY),minBlockY);          int maxScheduledY=Math.min(cubeToMaxBlock(cubeY),maxBlockY);          world.getLightingManager().queueDiffuseUpdate(otherCube,this.mutablePos.getX(),this.mutablePos.getZ(),minScheduledY,maxScheduledY);          continue;        }        if (!diffuseSkylightInBlockColumn(otherCube,this.mutablePos,minBlockY,maxBlockY,blockAccessMap)) {          throw new IllegalStateException("Check light failed at " + this.mutablePos + "!");        }      }    }  }  cube.setInitialLightingDone(true);}  }
class C{  public K cookie(String name,String value){  if (cookies == null) {    cookies=new HashMap<String,String>();  }  cookies.put(name,value);  return self();}  }
class C{  public static Position intersectRayWithTerrain(Globe globe,Vec4 origin,Vec4 direction,double sampleLength,double precision){  if (globe == null) {    String msg=Logging.getMessage("nullValue.GlobeIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (origin == null || direction == null) {    String msg=Logging.getMessage("nullValue.Vec4IsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (sampleLength < 0) {    String msg=Logging.getMessage("generic.ArgumentOutOfRange",sampleLength);    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (precision < 0) {    String msg=Logging.getMessage("generic.ArgumentOutOfRange",precision);    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  Position pos=null;  direction=direction.normalize3();  Intersection inters[]=globe.intersect(new Line(origin,direction),globe.getMaxElevation());  if (inters != null) {    Vec4 p1=inters[0].getIntersectionPoint();    Vec4 p2=null;    if (p1.subtract3(origin).dot3(direction) < 0)     p1=null;    if (inters.length == 2) {      p2=inters[1].getIntersectionPoint();      if (p2.subtract3(origin).dot3(direction) < 0)       p2=null;    }    if (p1 == null && p2 == null)     return null;    if (p1 != null && p2 != null) {      if (origin.distanceTo3(p1) > origin.distanceTo3(p2)) {        Vec4 temp=p2;        p2=p1;        p1=temp;      }    } else {      p2=p2 == null ? p1 : p2;      p1=origin;    }    Vec4 point=intersectSegmentWithTerrain(globe,p1,p2,sampleLength,precision);    if (point != null)     pos=globe.computePositionFromPoint(point);  }  return pos;}  }
class C{  public int increment(int offset){  CharSequence txt=getText();  int i;  if (txt != null) {    try {      i=Integer.parseInt(txt.toString());    } catch (    NumberFormatException e) {      i=0;    }  } else {    i=0;  }  i=i + offset;  setText(String.valueOf(i));  return i;}  }
class C{  private void processErrorResponse(StunResponseEvent ev){  Response response=ev.getResponse();  Request originalRequest=ev.getRequest();  ErrorCodeAttribute errorAttr=(ErrorCodeAttribute)response.getAttribute(Attribute.ERROR_CODE);  int cl=errorAttr.getErrorClass();  int co=errorAttr.getErrorNumber() & 0xff;  char errorCode=errorAttr.getErrorCode();  CandidatePair pair=(CandidatePair)ev.getTransactionID().getApplicationData();  logger.finer("Received error code " + ((int)errorCode));  if (errorCode == ErrorCodeAttribute.ROLE_CONFLICT) {    boolean wasControlling=originalRequest.containsAttribute(Attribute.ICE_CONTROLLING);    logger.finer("Swithing to isControlling=" + !wasControlling);    parentAgent.setControlling(!wasControlling);    pair.getParentComponent().getParentStream().getCheckList().scheduleTriggeredCheck(pair);  } else {    int code=cl * 100 + co;    logger.info("Error response for pair: " + pair.toShortString() + ", failing.  Code = "+ code+ "(class="+ cl+ "; number="+ co+ ")");    pair.setStateFailed();  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static String toEditConsolidated(final IDocumentationHolder documentation){  return consolidate(documentation,false);}  }
class C{  public Rule(String pattern,Object tokenType){  this(pattern,tokenType,null);}  }
class C{  public static FetchHealthDiagnosisRequest create(int id,GemFireHealth.Health healthCode){  FetchHealthDiagnosisRequest m=new FetchHealthDiagnosisRequest();  m.init_(id,healthCode);  return m;}  }
class C{  @Override public void pause(boolean pause){  if (frame != null && frame.isVisible()) {    chatTab.refresh();  }}  }
class C{  private String stateToString(long s){  return super.toString() + "[phase = " + phaseOf(s)+ " parties = "+ partiesOf(s)+ " arrived = "+ arrivedOf(s)+ "]";}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:22.594 -0500",hash_original_method="A0BB95EDEC5F19F9948C1664AD39C99B",hash_generated_method="CECCF24EB637E7DDDE076A2842FAEA70") public static Printer create(Printer printer,String prefix){  if (prefix == null || prefix.equals("")) {    return printer;  }  return new PrefixPrinter(printer,prefix);}  }
class C{  public void generateDiffs(File dir,int width,int height) throws Exception {  File[] files=dir.listFiles();  for (int i=0; i < files.length; i++) {    if (files[i].isDirectory()) {      generateDiffs(files[i],width,height);      continue;    }    if (files[i].getName().endsWith(".xhtml")) {      String testfile=files[i].getAbsolutePath();      String difffile=testfile.substring(0,testfile.length() - 6) + ".diff";      generateTestFile(testfile,difffile,width,height);      Uu.p("generated = " + difffile);    }  }}  }
class C{  public ParallelSequence(Collection steps){  this(steps,STEPPABLES);}  }
class C{  public SetShopCartCommandImpl(final ShoppingCartCommandRegistry registry,final ShopService shopService){  super(registry);  this.shopService=shopService;}  }
class C{  public void activateTabletMode(){  isTablet=true;}  }
class C{  public SearchLocalMessages(final String q,final Timeline.Order order_field,final int timezoneOffset,final int resultCount,final int aggregationLimit,final String... aggregationFields){  this.timeline=new Timeline(order_field);  QueryEntry.ElasticsearchQuery sq=new QueryEntry.ElasticsearchQuery(q,timezoneOffset);  long interval=sq.until.getTime() - sq.since.getTime();  IndexName resultIndex;  if (aggregationFields.length > 0 && q.contains("since:")) {    if (q.contains("since:hour")) {      this.query=elasticsearch_client.query((resultIndex=IndexName.messages_hour).name(),sq.queryBuilder,order_field.getMessageFieldName(),timezoneOffset,resultCount,interval,"created_at",aggregationLimit,aggregationFields);    } else     if (q.contains("since:day")) {      this.query=elasticsearch_client.query((resultIndex=IndexName.messages_day).name(),sq.queryBuilder,order_field.getMessageFieldName(),timezoneOffset,resultCount,interval,"created_at",aggregationLimit,aggregationFields);    } else     if (q.contains("since:week")) {      this.query=elasticsearch_client.query((resultIndex=IndexName.messages_week).name(),sq.queryBuilder,order_field.getMessageFieldName(),timezoneOffset,resultCount,interval,"created_at",aggregationLimit,aggregationFields);    } else {      this.query=elasticsearch_client.query((resultIndex=IndexName.messages).name(),sq.queryBuilder,order_field.getMessageFieldName(),timezoneOffset,resultCount,interval,"created_at",aggregationLimit,aggregationFields);    }  } else {    this.query=elasticsearch_client.query((resultIndex=IndexName.messages_hour).name(),sq.queryBuilder,order_field.getMessageFieldName(),timezoneOffset,resultCount,interval,"created_at",aggregationLimit,aggregationFields);    if (!q.contains("since:hour") && insufficient(this.query,resultCount,aggregationLimit,aggregationFields)) {      this.query=elasticsearch_client.query((resultIndex=IndexName.messages_day).name(),sq.queryBuilder,order_field.getMessageFieldName(),timezoneOffset,resultCount,interval,"created_at",aggregationLimit,aggregationFields);      if (!q.contains("since:day") && insufficient(this.query,resultCount,aggregationLimit,aggregationFields)) {        this.query=elasticsearch_client.query((resultIndex=IndexName.messages_week).name(),sq.queryBuilder,order_field.getMessageFieldName(),timezoneOffset,resultCount,interval,"created_at",aggregationLimit,aggregationFields);        if (!q.contains("since:week") && insufficient(this.query,resultCount,aggregationLimit,aggregationFields)) {          this.query=elasticsearch_client.query((resultIndex=IndexName.messages).name(),sq.queryBuilder,order_field.getMessageFieldName(),timezoneOffset,resultCount,interval,"created_at",aggregationLimit,aggregationFields);        }      }    }  }  timeline.setHits(query.hitCount);  timeline.setResultIndex(resultIndex);  for (  Map<String,Object> map : query.result) {    MessageEntry tweet=new MessageEntry(new JSONObject(map));    try {      UserEntry user=users.read(tweet.getScreenName());      assert user != null;      if (user != null) {        timeline.add(tweet,user);      }    } catch (    IOException e) {      Log.getLog().warn(e);    }  }  this.aggregations=query.aggregations;}  }
class C{  private void drawMessages(Graphics2D g2){  int nrofMessages=node.getNrofMessages();  Coord loc=node.getLocation();  drawBar(g2,loc,nrofMessages % 10,1);  drawBar(g2,loc,nrofMessages / 10,2);}  }
class C{  private void createAndReplaceRemToken(HttpServletResponse resp,final long userId,final ClientRemToken oldToken){  ClientRemToken newToken=new ClientRemToken();  int maxAge=365 * 24 * 60* 60;  resp.addCookie(cookie(REM_TOKEN,newToken.encodeToCookie(),true,maxAge));  c.async.invoke(null);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:08.809 -0500",hash_original_method="286B49C8E8E4DF34140969B2D7F609E6",hash_generated_method="98D0D7EFB37D3C55FC7668DF867E92C8") @Override protected void finalize() throws Throwable {  try {    NativeCollation.closeElements(address);  }  finally {    super.finalize();  }}  }
class C{  static public void main(String args[]){}  }
class C{  public AnnotationVisitor visitAnnotation(String desc,boolean visible){  if (cv != null) {    return cv.visitAnnotation(desc,visible);  }  return null;}  }
class C{  public void add(Project project2){  analysisTargets=appendWithoutDuplicates(analysisTargets,project2.analysisTargets);  srcDirList=appendWithoutDuplicates(srcDirList,project2.srcDirList);  auxClasspathEntryList=appendWithoutDuplicates(auxClasspathEntryList,project2.auxClasspathEntryList);}  }
class C{  public boolean isServerStarted(){  if (getJettyServer().isStarted() || getJettyServer().isStarting() || getJettyServer().isRunning()) {    return true;  } else {    return false;  }}  }
class C{  private boolean defaultResolve(){switch (typeString.charAt(0)) {case 'I':    type=int.class;  return true;case 'B':type=byte.class;return true;case 'C':type=char.class;return true;case 'S':type=short.class;return true;case 'Z':type=boolean.class;return true;case 'J':type=long.class;return true;case 'F':type=float.class;return true;case 'D':type=double.class;return true;default :type=Object.class;return false;}}  }
class C{  public void addInstallApk(String apkFileName,String packageName){  mInstallFileNames.add(apkFileName);  mUninstallPackages.add(packageName);}  }
class C{  public IndTestDSepDiminishingPathStrengths(StandardizedSemIm semIm,boolean keepLatents,double alpha){  if (semIm == null) {    throw new NullPointerException();  }  this.graph=semIm.getSemPm().getGraph();  this.graph.setShowErrorTerms(false);  this.semIm=semIm;  this._observedVars=calcVars(graph,keepLatents);  this.observedVars=new HashSet<>(_observedVars);  this.alpha=alpha;}  }
class C{  private File buildFile(File file,String fileName,String type){  StringBuilder fileNameBuilder=new StringBuilder();  fileNameBuilder.append(file.getPath());  fileNameBuilder.append(File.separator);  fileNameBuilder.append(type);  fileNameBuilder.append(fileName);  return new File(fileNameBuilder.toString());}  }
class C{  public ReferenceMap(int keyType,int valueType,int capacity,float loadFactor,boolean purgeValues){  super(keyType,valueType,capacity,loadFactor,purgeValues);}  }
class C{  protected void highlightNode(final Node node){  CNodeHighlighter.highlightNode(node,true);}  }
class C{  public Instrumenter attachAll(){  attachAllMetricCollectors();  attachEpsilonProgressCollector();  attachAdaptiveMultimethodVariationCollector();  attachAdaptiveTimeContinuationCollector();  attachElapsedTimeCollector();  attachApproximationSetCollector();  attachPopulationSizeCollector();  return this;}  }
class C{  public static void resetProcessLocation(RepositoryProcessLocation repositoryLocation){  getMainFrame().getProcess().setProcessLocation(repositoryLocation);  getMainFrame().setTitle();  addToRecentFiles(repositoryLocation);  getMainFrame().updateRecentFileList();}  }
class C{  private void testManySessionsManyEvents(int nodes) throws Throwable {  createServers(nodes);  CopycatClient client=createClient();  client.onEvent("test",null);  createClient().onEvent("test",null);  createClient().onEvent("test",null);  for (int i=0; i < 10; i++) {    client.submit(new TestEvent(false)).thenAccept(null);    await(10000,4);  }}  }
class C{  public Task<HostRestRep> discover(URI id){  return postTask(getIdUrl() + "/discover",id);}  }
class C{  public static boolean isContent(int c){  return (c < 0x10000 && (CHARS[c] & MASK_CONTENT) != 0) || (0x10000 <= c && c <= 0x10FFFF);}  }
class C{  private Intent makeGalleryIntent(Context context,String pathToImageFile){  return UriUtils.buildFileProviderReadUriIntent(context,Uri.fromFile(new File(pathToImageFile)),Intent.ACTION_VIEW,"image/*");}  }
class C{  public Reef(){  super();}  }
class C{  public GPUImageDilationFilter(int radius){  this(getVertexShader(radius),getFragmentShader(radius));}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected void afterBuildFinished(Notification notification,BuildTaskDescriptor descriptor,SubscriptionHandler<String> buildStatusHandler,SubscriptionHandler<String> buildOutputHandler,final String successMessage,final String errorMessage,final String prefixConsole,BuildFinishedCallback buildFinishedCallback){  try {    messageBus.unsubscribe(BuilderExtension.BUILD_STATUS_CHANNEL + descriptor.getTaskId(),buildStatusHandler);  } catch (  Exception e) {    Log.error(BuilderAgent.class,e);  }  try {    messageBus.unsubscribe(BuilderExtension.BUILD_OUTPUT_CHANNEL + descriptor.getTaskId(),buildOutputHandler);  } catch (  Exception e) {    Log.error(BuilderAgent.class,e);  }  if (descriptor.getStatus() == BuildStatus.SUCCESSFUL) {    buildSuccessful(notification,successMessage,prefixConsole);  } else   if (descriptor.getStatus() == BuildStatus.FAILED) {    notification.setMessage(errorMessage);    notification.setStatus(FINISHED);    notification.setType(ERROR);    console.print(prefixConsole + "::" + errorMessage);  }  importZipResult(descriptor,buildFinishedCallback,notification,errorMessage);}  }
class C{  public void init(boolean forEncryption,CipherParameters params){  cipher.init(forEncryption,params);}  }
class C{  public void persistAll(){  m_nvmasvc.persist(m_nid,0L,0L,true);}  }
class C{  public BinLogPosition initialize(MySqlConfig mySqlConfig,ZkBinLogStateConfig zkConfig,LinkedBlockingQueue<TransactionEvent> txEventQueue){  this.openReplicator=new OpenReplicator();  this.openReplicator.setUser(mySqlConfig.getUser());  this.openReplicator.setPassword(mySqlConfig.getPassword());  this.openReplicator.setServerId(mySqlConfig.getServerId());  this.openReplicator.setPort(mySqlConfig.getPort());  this.openReplicator.setHost(mySqlConfig.getHost());  BinLogPosition binLogPosition=getBinLogPositionToStartFrom(mySqlConfig,zkConfig);  this.openReplicator.setBinlogPosition(binLogPosition.getBinLogPosition());  this.openReplicator.setBinlogFileName(binLogPosition.getBinLogFileName());  this.openReplicator.setBinlogEventListener(new SpoutBinLogEventListener(txEventQueue,getSchema(mySqlConfig),binLogPosition.getBinLogFileName()));  return binLogPosition;}  }
class C{  public SampleCollector(StatisticsSampler sampler){  this.sampler=sampler;  if (sampler.getStatisticsModCount() == 0) {    this.statResourcesModCount=-1;  } else {    this.statResourcesModCount=0;  }}  }
class C{  public static Vector2 max(Vector2 o1,Vector2 o2){  return new Vector2(Math.max(o1.x,o2.x),Math.max(o1.z,o2.z));}  }
class C{  public FileExistsException(String message){  super(message);}  }
class C{  public void addProperty(String key,Object value){  if (overridingProperties == null) {    overridingProperties=new ExtendedProperties();  }  overridingProperties.addProperty(key,value);}  }
class C{  public static double[][] newMatrix(int m,int n){  double[][] res=new double[m][];  for (int i=0; i < m; ++i) {    res[i]=new double[n];  }  return (res);}  }
class C{  public EventStoreBuilder tcpReceiveBufferSize(int size){  tcpSettingsBuilder.receiveBufferSize(size);  return this;}  }
class C{  private boolean isStorageArrayInVarray(VirtualArray varray,String serialNumber){  if (serialNumber == null) {    return false;  }  StorageSystem storageSystem=dbClient.queryObject(StorageSystem.class,ConnectivityUtil.findStorageSystemBySerialNumber(serialNumber,dbClient,StorageSystemType.BLOCK));  if (storageSystem == null) {    return false;  }  if (ConnectivityUtil.isAVPlex(storageSystem)) {    String clusterId=storageSystem.getVplexAssemblyIdtoClusterId().get(serialNumber);    return VPlexUtil.checkIfVarrayContainsSpecifiedVplexSystem(varray.getId().toString(),clusterId,storageSystem.getId(),dbClient);  }  if (storageSystem.getSerialNumber().equals(serialNumber)) {    return true;  }  return false;}  }
class C{  public UlawEncoderInputStream(InputStream in,int max){  mIn=in;  mMax=max;}  }
class C{  public FieldVisitor visitField(int access,String name,String desc,String signature,Object value){  if (cv != null) {    return cv.visitField(access,name,desc,signature,value);  }  return null;}  }
class C{  public QueryLanguage(String name){  assert name != null : "name must not be null";  this.name=name;}  }
class C{  public org.smpte_ra.schemas.st2067_2_2013.DigestMethodType buildDigestMethodType(String algorithm){  org.smpte_ra.schemas.st2067_2_2013.DigestMethodType digestMethodType=new org.smpte_ra.schemas.st2067_2_2013.DigestMethodType();  digestMethodType.setAlgorithm(algorithm);  return digestMethodType;}  }
class C{  public void decodeHeader(){  try {    MP4Atom type=MP4Atom.createAtom(fis);    log.debug("Type {}",MP4Atom.intToType(type.getType()));    int topAtoms=0;    while (topAtoms < 2) {      MP4Atom atom=MP4Atom.createAtom(fis);switch (atom.getType()) {case 1836019574:        topAtoms++;      MP4Atom moov=atom;    log.debug("Type {}",MP4Atom.intToType(moov.getType()));  log.debug("moov children: {}",moov.getChildren());moovOffset=fis.getOffset() - moov.getSize();MP4Atom mvhd=moov.lookup(MP4Atom.typeToInt("mvhd"),0);if (mvhd != null) {log.debug("Movie header atom found");timeScale=mvhd.getTimeScale();duration=mvhd.getDuration();log.debug("Time scale {} Duration {}",timeScale,duration);}int loops=0;int tracks=0;do {MP4Atom trak=moov.lookup(MP4Atom.typeToInt("trak"),loops);if (trak != null) {log.debug("Track atom found");log.debug("trak children: {}",trak.getChildren());MP4Atom tkhd=trak.lookup(MP4Atom.typeToInt("tkhd"),0);if (tkhd != null) {log.debug("Track header atom found");log.debug("tkhd children: {}",tkhd.getChildren());if (tkhd.getWidth() > 0) {width=tkhd.getWidth();height=tkhd.getHeight();log.debug("Width {} x Height {}",width,height);}}MP4Atom edts=trak.lookup(MP4Atom.typeToInt("edts"),0);if (edts != null) {log.debug("Edit atom found");log.debug("edts children: {}",edts.getChildren());}MP4Atom mdia=trak.lookup(MP4Atom.typeToInt("mdia"),0);if (mdia != null) {log.debug("Media atom found");int scale=0;MP4Atom mdhd=mdia.lookup(MP4Atom.typeToInt("mdhd"),0);if (mdhd != null) {log.debug("Media data header atom found");scale=mdhd.getTimeScale();log.debug("Time scale {}",scale);}MP4Atom hdlr=mdia.lookup(MP4Atom.typeToInt("hdlr"),0);if (hdlr != null) {log.debug("Handler ref atom found");log.debug("Handler type: {}",MP4Atom.intToType(hdlr.getHandlerType()));String hdlrType=MP4Atom.intToType(hdlr.getHandlerType());if ("vide".equals(hdlrType)) {hasVideo=true;if (scale > 0) {  videoTimeScale=scale * 1.0;  log.debug("Video time scale: {}",videoTimeScale);}} else if ("soun".equals(hdlrType)) {hasAudio=true;if (scale > 0) {  audioTimeScale=scale * 1.0;  log.debug("Audio time scale: {}",audioTimeScale);}}tracks++;}MP4Atom minf=mdia.lookup(MP4Atom.typeToInt("minf"),0);if (minf != null) {log.debug("Media info atom found");MP4Atom smhd=minf.lookup(MP4Atom.typeToInt("smhd"),0);if (smhd != null) {log.debug("Sound header atom found");MP4Atom dinf=minf.lookup(MP4Atom.typeToInt("dinf"),0);if (dinf != null) {  log.debug("Data info atom found");  log.debug("Sound dinf children: {}",dinf.getChildren());  MP4Atom dref=dinf.lookup(MP4Atom.typeToInt("dref"),0);  if (dref != null) {    log.debug("Data reference atom found");  }}MP4Atom stbl=minf.lookup(MP4Atom.typeToInt("stbl"),0);if (stbl != null) {  log.debug("Sample table atom found");  log.debug("Sound stbl children: {}",stbl.getChildren());  MP4Atom stsd=stbl.lookup(MP4Atom.typeToInt("stsd"),0);  if (stsd != null) {    log.debug("Sample description atom found");    MP4Atom mp4a=stsd.getChildren().get(0);    setAudioCodecId(MP4Atom.intToType(mp4a.getType()));    log.debug("Sample size: {}",mp4a.getSampleSize());    int ats=mp4a.getTimeScale();    if (ats > 0) {      audioTimeScale=ats * 1.0;    }    audioChannels=mp4a.getChannelCount();    log.debug("Sample rate (audio time scale): {}",audioTimeScale);    log.debug("Channels: {}",audioChannels);    if (mp4a.getChildren().size() > 0) {      log.debug("Elementary stream descriptor atom found");      MP4Atom esds=mp4a.getChildren().get(0);      log.debug("{}",ToStringBuilder.reflectionToString(esds));      MP4Descriptor descriptor=esds.getEsd_descriptor();      log.debug("{}",ToStringBuilder.reflectionToString(descriptor));      if (descriptor != null) {        Vector<MP4Descriptor> children=descriptor.getChildren();        for (int e=0; e < children.size(); e++) {          MP4Descriptor descr=children.get(e);          log.debug("{}",ToStringBuilder.reflectionToString(descr));          if (descr.getChildren().size() > 0) {            Vector<MP4Descriptor> children2=descr.getChildren();            for (int e2=0; e2 < children2.size(); e2++) {              MP4Descriptor descr2=children2.get(e2);              log.debug("{}",ToStringBuilder.reflectionToString(descr2));              if (descr2.getType() == MP4Descriptor.MP4DecSpecificInfoDescriptorTag) {                audioDecoderBytes=descr2.getDSID();switch (audioDecoderBytes[0]) {case 0x12:default :                  audioCodecType=1;                break;case 0x0a:              audioCodecType=0;            break;case 0x11:case 0x13:          audioCodecType=2;        break;    }    e=99;    break;  }}}}}}}MP4Atom stsc=stbl.lookup(MP4Atom.typeToInt("stsc"),0);if (stsc != null) {log.debug("Sample to chunk atom found");audioSamplesToChunks=stsc.getRecords();log.debug("Record count: {}",audioSamplesToChunks.size());MP4Atom.Record rec=audioSamplesToChunks.firstElement();log.debug("Record data: Description index={} Samples per chunk={}",rec.getSampleDescriptionIndex(),rec.getSamplesPerChunk());}MP4Atom stsz=stbl.lookup(MP4Atom.typeToInt("stsz"),0);if (stsz != null) {log.debug("Sample size atom found");audioSamples=stsz.getSamples();log.debug("Sample size: {}",stsz.getSampleSize());log.debug("Sample count: {}",audioSamples.size());}MP4Atom stco=stbl.lookup(MP4Atom.typeToInt("stco"),0);if (stco != null) {log.debug("Chunk offset atom found");audioChunkOffsets=stco.getChunks();log.debug("Chunk count: {}",audioChunkOffsets.size());}MP4Atom stts=stbl.lookup(MP4Atom.typeToInt("stts"),0);if (stts != null) {log.debug("Time to sample atom found");Vector<MP4Atom.TimeSampleRecord> records=stts.getTimeToSamplesRecords();log.debug("Record count: {}",records.size());MP4Atom.TimeSampleRecord rec=records.firstElement();log.debug("Record data: Consecutive samples={} Duration={}",rec.getConsecutiveSamples(),rec.getSampleDuration());if (records.size() > 1) {log.info("Audio samples have differing durations, audio playback may fail");}audioSampleDuration=rec.getSampleDuration();}}}MP4Atom vmhd=minf.lookup(MP4Atom.typeToInt("vmhd"),0);if (vmhd != null) {log.debug("Video header atom found");MP4Atom dinf=minf.lookup(MP4Atom.typeToInt("dinf"),0);if (dinf != null) {log.debug("Data info atom found");log.debug("Video dinf children: {}",dinf.getChildren());MP4Atom dref=dinf.lookup(MP4Atom.typeToInt("dref"),0);if (dref != null) {log.debug("Data reference atom found");}}MP4Atom stbl=minf.lookup(MP4Atom.typeToInt("stbl"),0);if (stbl != null) {log.debug("Sample table atom found");log.debug("Video stbl children: {}",stbl.getChildren());MP4Atom stsd=stbl.lookup(MP4Atom.typeToInt("stsd"),0);if (stsd != null) {log.debug("Sample description atom found");log.debug("Sample description (video) stsd children: {}",stsd.getChildren());MP4Atom avc1=stsd.lookup(MP4Atom.typeToInt("avc1"),0);if (avc1 != null) {log.debug("AVC1 children: {}",avc1.getChildren());setVideoCodecId(MP4Atom.intToType(avc1.getType()));MP4Atom codecChild=avc1.lookup(MP4Atom.typeToInt("avcC"),0);if (codecChild != null) {avcLevel=codecChild.getAvcLevel();log.debug("AVC level: {}",avcLevel);avcProfile=codecChild.getAvcProfile();log.debug("AVC Profile: {}",avcProfile);log.debug("AVCC size: {}",codecChild.getSize());videoDecoderBytes=codecChild.getVideoConfigBytes();log.debug("Video config bytes: {}",ToStringBuilder.reflectionToString(videoDecoderBytes));} else {MP4Atom pasp=avc1.lookup(MP4Atom.typeToInt("pasp"),0);if (pasp != null) {log.debug("PASP children: {}",pasp.getChildren());codecChild=pasp.lookup(MP4Atom.typeToInt("avcC"),0);if (codecChild != null) {avcLevel=codecChild.getAvcLevel();log.debug("AVC level: {}",avcLevel);avcProfile=codecChild.getAvcProfile();log.debug("AVC Profile: {}",avcProfile);log.debug("AVCC size: {}",codecChild.getSize());videoDecoderBytes=codecChild.getVideoConfigBytes();log.debug("Video config bytes: {}",ToStringBuilder.reflectionToString(videoDecoderBytes));}}}} else {MP4Atom mp4v=stsd.lookup(MP4Atom.typeToInt("mp4v"),0);if (mp4v != null) {log.debug("MP4V children: {}",mp4v.getChildren());setVideoCodecId(MP4Atom.intToType(mp4v.getType()));MP4Atom codecChild=mp4v.lookup(MP4Atom.typeToInt("esds"),0);if (codecChild != null) {MP4Descriptor descriptor=codecChild.getEsd_descriptor();log.debug("{}",ToStringBuilder.reflectionToString(descriptor));if (descriptor != null) {Vector<MP4Descriptor> children=descriptor.getChildren();for (int e=0; e < children.size(); e++) {  MP4Descriptor descr=children.get(e);  log.debug("{}",ToStringBuilder.reflectionToString(descr));  if (descr.getChildren().size() > 0) {    Vector<MP4Descriptor> children2=descr.getChildren();    for (int e2=0; e2 < children2.size(); e2++) {      MP4Descriptor descr2=children2.get(e2);      log.debug("{}",ToStringBuilder.reflectionToString(descr2));      if (descr2.getType() == MP4Descriptor.MP4DecSpecificInfoDescriptorTag) {        videoDecoderBytes=new byte[descr2.getDSID().length - 8];        System.arraycopy(descr2.getDSID(),8,videoDecoderBytes,0,videoDecoderBytes.length);        log.debug("Video config bytes: {}",ToStringBuilder.reflectionToString(videoDecoderBytes));        e=99;        break;      }    }  }}}}}}log.debug("{}",ToStringBuilder.reflectionToString(avc1));}MP4Atom stsc=stbl.lookup(MP4Atom.typeToInt("stsc"),0);if (stsc != null) {log.debug("Sample to chunk atom found");videoSamplesToChunks=stsc.getRecords();log.debug("Record count: {}",videoSamplesToChunks.size());MP4Atom.Record rec=videoSamplesToChunks.firstElement();log.debug("Record data: Description index={} Samples per chunk={}",rec.getSampleDescriptionIndex(),rec.getSamplesPerChunk());}MP4Atom stsz=stbl.lookup(MP4Atom.typeToInt("stsz"),0);if (stsz != null) {log.debug("Sample size atom found");videoSamples=stsz.getSamples();log.debug("Sample size: {}",stsz.getSampleSize());videoSampleCount=videoSamples.size();log.debug("Sample count: {}",videoSampleCount);}MP4Atom stco=stbl.lookup(MP4Atom.typeToInt("stco"),0);if (stco != null) {log.debug("Chunk offset atom found");videoChunkOffsets=stco.getChunks();log.debug("Chunk count: {}",videoChunkOffsets.size());}MP4Atom stss=stbl.lookup(MP4Atom.typeToInt("stss"),0);if (stss != null) {log.debug("Sync sample atom found");syncSamples=stss.getSyncSamples();log.debug("Keyframes: {}",syncSamples.size());}MP4Atom stts=stbl.lookup(MP4Atom.typeToInt("stts"),0);if (stts != null) {log.debug("Time to sample atom found");Vector<MP4Atom.TimeSampleRecord> records=stts.getTimeToSamplesRecords();log.debug("Record count: {}",records.size());MP4Atom.TimeSampleRecord rec=records.firstElement();log.debug("Record data: Consecutive samples={} Duration={}",rec.getConsecutiveSamples(),rec.getSampleDuration());if (records.size() > 1) {log.info("Video samples have differing durations, video playback may fail");}videoSampleDuration=rec.getSampleDuration();}MP4Atom ctts=stbl.lookup(MP4Atom.typeToInt("ctts"),0);if (ctts != null) {log.debug("Composition time to sample atom found");compositionTimes=ctts.getCompositionTimeToSamplesRecords();log.debug("Record count: {}",compositionTimes.size());if (log.isTraceEnabled()) {for (MP4Atom.CompositionTimeSampleRecord rec : compositionTimes) {double offset=rec.getSampleOffset();if (scale > 0d) {offset=(offset / (double)scale) * 1000.0;rec.setSampleOffset((int)offset);}log.trace("Record data: Consecutive samples={} Offset={}",rec.getConsecutiveSamples(),rec.getSampleOffset());}}}}}}}}loops++;} while (loops < 3);log.trace("Busted out of track loop with {} tracks after {} loops",tracks,loops);fps=(videoSampleCount * timeScale) / (double)duration;log.debug("FPS calc: ({} * {}) / {}",new Object[]{videoSampleCount,timeScale,duration});log.debug("FPS: {}",fps);StringBuilder sb=new StringBuilder();double videoTime=((double)duration / (double)timeScale);log.debug("Video time: {}",videoTime);int minutes=(int)(videoTime / 60);if (minutes > 0) {sb.append(minutes);sb.append('.');}NumberFormat df=DecimalFormat.getInstance();df.setMaximumFractionDigits(2);sb.append(df.format((videoTime % 60)));formattedDuration=sb.toString();log.debug("Time: {}",formattedDuration);break;case 1835295092:topAtoms++;long dataSize=0L;MP4Atom mdat=atom;dataSize=mdat.getSize();log.debug("{}",ToStringBuilder.reflectionToString(mdat));mdatOffset=fis.getOffset() - dataSize;break;case 1718773093:case 2003395685:break;default :log.warn("Unexpected atom: {}",MP4Atom.intToType(atom.getType()));}}moovOffset+=8;mdatOffset+=8;log.debug("Offsets moov: {} mdat: {}",moovOffset,mdatOffset);} catch (IOException e) {log.error("Exception decoding header / atoms",e);}}  }
class C{  public static BlockPair createFakeBlock(BlockStore blockStore,int height,Transaction... transactions){  return createFakeBlock(blockStore,Block.BLOCK_VERSION_GENESIS,Utils.currentTimeSeconds(),height,transactions);}  }
class C{  public NetworkBuilder<N,E> expectedEdgeCount(int expectedEdgeCount){  checkArgument(expectedEdgeCount >= 0,"The expected number of edges can't be negative: %s",expectedEdgeCount);  this.expectedEdgeCount=Optional.of(expectedEdgeCount);  return this;}  }
class C{  boolean isAtOnceReady(final int bopId){  final BOp op=innerState.bopIndex.get(bopId);  if (op == null)   throw new NoSuchBOpException(bopId);  final AtomicLong counter=innerState.runningMap.get(bopId);  final boolean didStart=counter != null && counter.get() != 0L;  if (didStart) {    if (INFO)     log.info("Already ran/running: " + bopId);    return false;  }  final Iterator<BOp> itr=BOpUtility.preOrderIterator(op);  while (itr.hasNext()) {    final BOp t=itr.next();    final Integer id=(Integer)t.getProperty(BOp.Annotations.BOP_ID);    if (id == null)     throw new NoBOpIdException(t.toString());    if (bopId == id.intValue()) {      continue;    }{      final AtomicLong runningCount=innerState.runningMap.get(id);      if (runningCount != null && runningCount.get() != 0) {        if (DEBUG)         log.debug("Predecessor running: predecessorId=" + id + ", predecessorRunningCount="+ runningCount);        return false;      }    }{      final AtomicLong availableChunkCount=innerState.availableMap.get(id);      if (availableChunkCount != null && availableChunkCount.get() != 0) {        if (DEBUG)         log.debug("Predecessor can be triggered: predecessorId=" + id + " has "+ availableChunkCount+ " chunks available.");        return false;      }    }  }  if (INFO)   log.info("Ready for 'at-once' evaluation: " + bopId);  return true;}  }
class C{  public String toString(){  StringBuilder buf=new StringBuilder();  NumberFormat nf=NumberFormatUtil.getInstance().getNumberFormat();  for (int i=0; i < getNumNodes(); i++) {    buf.append("\n\nNode: ").append(getNode(i));    if (getNumParents(i) == 0) {      buf.append("\n");    } else {      buf.append("\n\n");      for (int k=0; k < getNumParents(i); k++) {        buf.append(getNode(getParent(i,k))).append("\t");      }    }    for (int j=0; j < getNumRows(i); j++) {      buf.append("\n");      for (int k=0; k < getNumParents(i); k++) {        buf.append(getParentValue(i,j,k));        if (k < getNumParents(i) - 1) {          buf.append("\t");        }      }      if (getNumParents(i) > 0) {        buf.append("\t");      }      for (int k=0; k < getNumColumns(i); k++) {        buf.append(nf.format(getProbability(i,j,k))).append("\t");      }    }  }  buf.append("\n");  return buf.toString();}  }
class C{  public GeneralName(DerValue encName) throws IOException {  this(encName,false);}  }
class C{  public boolean supportsHandleInteraction(){  return true;}  }
class C{  @Dev public StartRecordingKillsAction(final String questSlot,@Dev(defaultValue="1") final int index,final RequiredKillsInfo... requiredKills){  this.toKill=new HashMap<String,Pair<Integer,Integer>>();  for (  RequiredKillsInfo info : requiredKills) {    toKill.put(info.getName(),new Pair<Integer,Integer>(info.getRequiredSolo(),info.getRequiredMaybeShared()));  }  this.questname=checkNotNull(questSlot);  this.index=index;}  }
class C{  public void appendCloseAnchorTag(){  text.append("</a>");}  }
class C{  ServerSessionContext registerSequenceQuery(long sequence,Runnable query){  List<Runnable> queries=this.sequenceQueries.computeIfAbsent(sequence,null);  queries.add(query);  return this;}  }
class C{  private JSONObject copyDirectory(File srcDir,File destinationDir) throws JSONException, IOException, NoModificationAllowedException, InvalidModificationException {  if (destinationDir.exists() && destinationDir.isFile()) {    throw new InvalidModificationException("Can't rename a file to a directory");  }  if (isCopyOnItself(srcDir.getAbsolutePath(),destinationDir.getAbsolutePath())) {    throw new InvalidModificationException("Can't copy itself into itself");  }  if (!destinationDir.exists()) {    if (!destinationDir.mkdir()) {      throw new NoModificationAllowedException("Couldn't create the destination directory");    }  }  for (  File file : srcDir.listFiles()) {    File destination=new File(destinationDir.getAbsoluteFile() + File.separator + file.getName());    if (file.isDirectory()) {      copyDirectory(file,destination);    } else {      copyFile(file,destination);    }  }  return makeEntryForFile(destinationDir);}  }
class C{  public List queryAll(){  List foundItems=new ArrayList();  root.addAllItems(foundItems);  return foundItems;}  }
class C{  public Bundler putCharArray(String key,char[] value){  bundle.putCharArray(key,value);  return this;}  }
class C{  public final void testLetterOrNumberWithCharSequenceParameter(){  assertNotNull(Validators.letterOrNumber("foo",Case.CASE_INSENSITIVE,true,new char[]{'-'}));}  }
class C{  public synchronized int length(){  return value.length;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private RPRecommendation buildRpRecommendation(String associatedStorageSystem,VirtualArray varray,VirtualPool vpool,StoragePool sourcePool,VirtualPoolCapabilityValuesWrapper capabilities,int satisfiedSourceVolCount,String sourceInternalSiteName,URI sourceStorageSytemUri,String type,ProtectionSystem ps){  RPRecommendation rpRecommendation=new RPRecommendation();  rpRecommendation.setRpSiteAssociateStorageSystem(associatedStorageSystem);  rpRecommendation.setSourceStoragePool(sourcePool.getId());  rpRecommendation.setSourceStorageSystem(sourcePool.getStorageDevice());  rpRecommendation.setResourceCount(satisfiedSourceVolCount);  rpRecommendation.setVirtualArray(varray.getId());  rpRecommendation.setVirtualPool(vpool);  rpRecommendation.setInternalSiteName(sourceInternalSiteName);  rpRecommendation.setSize(capabilities.getSize());  if (DiscoveredDataObject.Type.vplex.name().equals(type)) {    VPlexRecommendation virtualVolumeRecommendation=new VPlexRecommendation();    virtualVolumeRecommendation.setVirtualArray(rpRecommendation.getVirtualArray());    virtualVolumeRecommendation.setVirtualPool(rpRecommendation.getVirtualPool());    virtualVolumeRecommendation.setVPlexStorageSystem((sourceStorageSytemUri));    virtualVolumeRecommendation.setSourceStoragePool(sourcePool.getId());    virtualVolumeRecommendation.setSourceStorageSystem(sourcePool.getStorageDevice());    virtualVolumeRecommendation.setResourceCount(1);    rpRecommendation.setVirtualVolumeRecommendation(virtualVolumeRecommendation);  }  return rpRecommendation;}  }
class C{  public boolean isWhitelistRequired(){  return whitelistRequired.get();}  }
class C{  private String parseProduct(Class<?> databaseMetaDataClass,Object databaseMetaData){  return (String)cache.invokeMethod(databaseMetaDataClass,GET_DATABASE_PRODUCT_NAME,null,databaseMetaData,null,null,JAVA_SQL_DATABASE_META_DATA_FQN);}  }
class C{  private void startDeviceActivityInternal(String path,String extraInfo){  GoogleApiClient googleApiClient=new GoogleApiClient.Builder(this).addApi(Wearable.API).build();  ConnectionResult connectionResult=googleApiClient.blockingConnect(Constants.GOOGLE_API_CLIENT_TIMEOUT_S,TimeUnit.SECONDS);  if (connectionResult.isSuccess() && googleApiClient.isConnected()) {    CapabilityApi.GetCapabilityResult result=Wearable.CapabilityApi.getCapability(googleApiClient,getApplicationContext().getString(R.string.show_detail_capability_name),CapabilityApi.FILTER_REACHABLE).await(GET_CAPABILITY_TIMEOUT_S,TimeUnit.SECONDS);    if (result.getStatus().isSuccess()) {      Set<Node> nodes=result.getCapability().getNodes();      for (      Node node : nodes) {        Wearable.MessageApi.sendMessage(googleApiClient,node.getId(),path,extraInfo.getBytes());      }    } else {      Log.e(TAG,"startDeviceActivityInternal() Failed to get capabilities, status: " + result.getStatus().getStatusMessage());    }    googleApiClient.disconnect();  }}  }
class C{  public Boolean isVirtualICH7MPresent(){  return virtualICH7MPresent;}  }
class C{  public NodeCluster(ClusterNode n,NodeClusteringAlgorithm nca,int clusterStep,int id,Method linkMethod,Object[] args){  this.id=id;  this.clusterStepFormed=clusterStep;  this.clusterStepParented=clusterStep;  isLeaf=true;  this.algo=nca;  leafNode=n;  inLinks=new LinkedHashMap<>(n.getInLinks().size());  outLinks=new LinkedHashMap<>(n.getOutLinks().size());  this.nodes=new LinkedHashMap<>();  this.nodes.put(n.getId(),n);  for (  Link l : n.getInLinks().values()) {    inLinks.put(l.getId(),algo.getLinks().get(l.getId()));    inLinks.get(l.getId()).setToCluster(this);  }  for (  Link l : n.getOutLinks().values()) {    outLinks.put(l.getId(),algo.getLinks().get(l.getId()));    outLinks.get(l.getId()).setFromCluster(this);  }  internalFlow=0;  setInvocations(getInvocations() + 1);}  }
class C{  public InvalidPropertiesFormatException(Throwable cause){  super(cause == null ? null : cause.toString());  this.initCause(cause);}  }
class C{  public static String readFile(File file,String charsetName){  StringBuilder fileContent=new StringBuilder("");  if (file == null || !file.isFile()) {    return fileContent.toString();  }  BufferedReader reader=null;  try {    InputStreamReader is=new InputStreamReader(new FileInputStream(file),charsetName);    reader=new BufferedReader(is);    String line=null;    while ((line=reader.readLine()) != null) {      if (!fileContent.toString().equals("")) {        fileContent.append("\r\n");      }      fileContent.append(line);    }    reader.close();  } catch (  IOException e) {    throw new RuntimeException("IOException occurred. ",e);  } finally {    if (reader != null) {      try {        reader.close();      } catch (      IOException e) {        throw new RuntimeException("IOException occurred. ",e);      }    }  }  return fileContent.toString();}  }
class C{  public MgmtRolloutRestRequestBody build(){  return doBuild();}  }
class C{  public static void apply(){  applyOpenSSLFix();  installLinuxPRNGSecureRandom();}  }
class C{  public GradientXYBarPainter(double g1,double g2,double g3){  this.g1=g1;  this.g2=g2;  this.g3=g3;}  }
class C{  @Override public InvitationProjectsObject copy(){  return new InvitationProjectsObject(this);}  }
class C{  private void NV21toI420SemiPlanar(byte[] nv21bytes,byte[] i420bytes,int width,int height){  System.arraycopy(nv21bytes,0,i420bytes,0,width * height);  for (int i=width * height; i < nv21bytes.length; i+=2) {    i420bytes[i]=nv21bytes[i + 1];    i420bytes[i + 1]=nv21bytes[i];  }}  }
class C{  public boolean allowAccessToFullInputFormat(){  return false;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private Object readResponse(ByteBuf buffer){  return context.serializer().readObject(INPUT.get().setByteBuf(buffer));}  }
class C{  public void startProcessing(){  if (isProcessing) {    return;  }  NodeList nl=document.getElementsByTagNameNS(XBL_NAMESPACE_URI,XBL_DEFINITION_TAG);  XBLOMDefinitionElement[] defs=new XBLOMDefinitionElement[nl.getLength()];  for (int i=0; i < defs.length; i++) {    defs[i]=(XBLOMDefinitionElement)nl.item(i);  }  nl=document.getElementsByTagNameNS(XBL_NAMESPACE_URI,XBL_IMPORT_TAG);  Element[] imports=new Element[nl.getLength()];  for (int i=0; i < imports.length; i++) {    imports[i]=(Element)nl.item(i);  }  AbstractDocument doc=(AbstractDocument)document;  XBLEventSupport es=(XBLEventSupport)doc.initializeEventSupport();  es.addImplementationEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMNodeRemoved",docRemovedListener,true);  es.addImplementationEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMNodeInserted",docInsertedListener,true);  es.addImplementationEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMSubtreeModified",docSubtreeListener,true);  for (int i=0; i < defs.length; i++) {    if (defs[i].getAttributeNS(null,XBL_REF_ATTRIBUTE).length() != 0) {      addDefinitionRef(defs[i]);    } else {      String ns=defs[i].getElementNamespaceURI();      String ln=defs[i].getElementLocalName();      addDefinition(ns,ln,defs[i],null);    }  }  for (int i=0; i < imports.length; i++) {    addImport(imports[i]);  }  isProcessing=true;  bind(document.getDocumentElement());}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public Vector3f div(float x,float y,float z){  this.x/=x;  this.y/=y;  this.z/=z;  return this;}  }
class C{  public void testIsValidUtf8_1Byte() throws UnsupportedEncodingException {  IsValidUtf8TestUtil.testBytes(1,IsValidUtf8TestUtil.EXPECTED_ONE_BYTE_ROUNDTRIPPABLE_COUNT);}  }
class C{  @Override public void run(){  amIActive=true;  boolean image1Bool=false;  boolean image2Bool=false;  double constant1=0;  double constant2=0;  if (args.length < 3) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader1=args[0];  File file=new File(inputHeader1);  image1Bool=file.exists();  if (image1Bool) {    constant1=-1;  } else {    constant1=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String inputHeader2=args[1];  file=new File(inputHeader2);  image2Bool=file.exists();  if (image2Bool) {    constant2=-1;  } else {    constant2=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    if (image1Bool && image2Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData1=inputFile1.getNoDataValue();      double noData2=inputFile2.getNoDataValue();      if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {        showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");        return;      }      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData1);      outputFile.setPreferredPalette(inputFile1.getPreferredPalette());      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          z2=data2[col];          if ((z1 != noData1) && (z2 != noData2)) {            outputFile.setValue(row,col,Math.pow(z1,z2));          } else {            outputFile.setValue(row,col,noData1);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      inputFile2.close();      outputFile.close();    } else     if (image1Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData=inputFile1.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData);      outputFile.setPreferredPalette(inputFile1.getPreferredPalette());      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          if (z1 != noData) {            outputFile.setValue(row,col,Math.pow(z1,constant2));          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      outputFile.close();    } else     if (image2Bool) {      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile2.getNumberRows();      int cols=inputFile2.getNumberColumns();      double noData=inputFile2.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader2,WhiteboxRaster.DataType.FLOAT,noData);      outputFile.setPreferredPalette(inputFile2.getPreferredPalette());      for (row=0; row < rows; row++) {        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z2=data2[col];          if (z2 != noData) {            outputFile.setValue(row,col,Math.pow(constant1,z2));          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile2.close();      outputFile.close();    } else {      showFeedback("At least one of the inputs must be a raster image.");    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public boolean isComplete(){  if ((m_state == STATE_VALID_SERVER_RESPONSE) || (m_state == STATE_INVALID_SERVER_RESPONSE) || (m_state == STATE_DISPOSED))   return true; else   return false;}  }
class C{  private BitSet findPreviouslyDeadBlocks() throws DataflowAnalysisException, CFGBuilderException {  BitSet deadBlocks=new BitSet();  ValueNumberDataflow vnaDataflow=classContext.getValueNumberDataflow(method);  for (Iterator<BasicBlock> i=vnaDataflow.getCFG().blockIterator(); i.hasNext(); ) {    BasicBlock block=i.next();    ValueNumberFrame vnaFrame=vnaDataflow.getStartFact(block);    if (vnaFrame.isTop()) {      deadBlocks.set(block.getLabel());    }  }  return deadBlocks;}  }
class C{  public static Instruction definingInstruction(Operand op){  Instruction result=op.instruction;  if (op instanceof RegisterOperand) {    Enumeration<RegisterOperand> defs=DefUse.defs(((RegisterOperand)op).getRegister());    if (!defs.hasMoreElements()) {    } else {      result=defs.nextElement().instruction;      if (defs.hasMoreElements()) {        result=op.instruction;      }    }  }  return result;}  }
class C{  private void addEndToken(int tokenType){  addToken(zzMarkedPos,zzMarkedPos,tokenType);}  }
class C{  public boolean isClusteredHost(StorageSystem storage,List<Initiator> initiators,String exportType){  boolean isClusteredHost=false;  if (null != initiators && !initiators.isEmpty()) {    Set<String> hostNames=new HashSet<String>();    XIVRestClient restExportOpr=getRestClient(storage);    if (null == restExportOpr) {      return isClusteredHost;    }    for (    Initiator initiator : initiators) {      try {        final String hostName=restExportOpr.getHostNameFromPort(storage.getSmisProviderIP(),Initiator.normalizePort(initiator.getInitiatorPort()));        if (null != hostName) {          hostNames.add(hostName);        }      } catch (      Exception e) {        _log.error("Invalid host : {} or Port : {} for HSM from Storage System : {} ",storage.getSmisProviderIP(),initiator.getInitiatorPort(),storage.getLabel());        final String errorMessage="Unable to contact Hyper Scale Manager to execute operation. Either Host or Port could be invalid.";        throw XIVRestException.exceptions.errorInHSMHostConfiguration(errorMessage);      }    }    if (hostNames.isEmpty()) {      if (ExportGroup.ExportGroupType.Cluster.name().equals(exportType)) {        isClusteredHost=true;      }    } else {      Set<Boolean> result=new HashSet<Boolean>();      for (      String hostName : hostNames) {        result.add(isClusteredHostOnArray(storage,hostName));      }      isClusteredHost=(result.size() == 1 ? result.iterator().next() : false);    }  }  return isClusteredHost;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public void modifyVariableId(String oldId,String newId){  if (id.equals(oldId)) {    id=newId;  }}  }
class C{  public void showCircle(boolean onOff){  displayCircle=onOff;}  }
class C{  public void askPermissions(){  mPermissionsToAsk=getNotGrantedPermissions();  if (mPermissionsToAsk.size() > 0 && Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {    requestPermissions(mPermissionsToAsk.toArray(new String[mPermissionsToAsk.size()]),MY_PERMISSION_REQUEST_ALL);  } else {    sendResponse(true);  }}  }
class C{  public static void writeAsPNG(Drawable drawable,int w,int h,File file) throws FileNotFoundException, IOException {  BufferedImage image=new BufferedImage(w,h,BufferedImage.TYPE_INT_ARGB);  Graphics2D g2=image.createGraphics();  drawable.draw(g2,new Rectangle(w,h));  OutputStream out=new BufferedOutputStream(new FileOutputStream(file));  try {    ImageIO.write(image,"png",out);  }  finally {    out.close();  }}  }
class C{  public static <A extends CommonAllocator<A>,ValueT>MemBufferHolder<A> toMemBufferHolder(A ar,ValueT obj) throws IOException {  MemBufferHolder<A> ret=null;  ByteBuffer bb=toByteBuffer(obj);  if (null != bb && bb.remaining() > 0) {    ret=ar.createBuffer(bb.remaining());    ret.get().put(bb);    ret.get().flip();  }  return ret;}  }
class C{  private final static boolean isThaiPreVowel(int ch){  return (ch >= 0x0e40) && (ch <= 0x0e44);}  }
class C{  public static String packageNameOnly(String typeName){  String dotted=descriptorToDot(typeName);  int end=dotted.lastIndexOf(".");  if (end < 0) {    return "";  } else {    return dotted.substring(0,end);  }}  }
class C{  public Object decode(Object pObject){  if (!(pObject instanceof byte[])) {    throw new InvalidParameterException("Parameter supplied to Base64 decode is not a byte[]");  }  return decode((byte[])pObject);}  }
class C{  void selectType(Environment env,Context ctx,int tm){  throw new CompilerError("selectType: " + opNames[op]);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 15:34:30.598 -0500",hash_original_method="DF1E091BE078187B5F780BC493CC7330",hash_generated_method="8D1C1AF6356D648686011C7E04909D37") @DSVerified @DSSafe(DSCat.UTIL_FUNCTION) public byte[] decode(byte[] ascii){  return fromAscii(ascii);}  }
class C{  public static String toString(long s,List<Joinable> items){  StringBuilder str=new StringBuilder("[");  boolean first=true;  for (int i=0; i < 64; i++) {    if (overlaps(s,of(i))) {      if (first)       first=false; else       str.append(", ");      str.append(items.get(i).summaryString(PlanNode.SummaryConfiguration.DEFAULT));    }  }  str.append("]");  return str.toString();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:57.564 -0500",hash_original_method="1D459D842605CA34811091FC29FDA2D4",hash_generated_method="8821A1AED5D498E9724C6CD02B3F85B9") public boolean equalsIgnoreSource(Country country){  return country != null && mCountryIso.equals(country.getCountryIso());}  }
class C{  public TerminalSize withColumns(int columns){  if (this.columns == columns) {    return this;  }  if (columns == 0 && this.rows == 0) {    return ZERO;  }  return new TerminalSize(columns,this.rows);}  }
class C{  protected boolean isTableElement(Node node){  if (node.getNodeType() != Node.NodeType.ELEMENT) {    return false;  }  String elementName=node.getNodeName().toLowerCase();  return elementName.equals("table");}  }
class C{  public OutlierResult run(Relation<V> relation){  WritableDoubleDataStore ranks=DataStoreUtil.makeDoubleStorage(relation.getDBIDs(),DataStoreFactory.HINT_STATIC);  DoubleMinMax minmax=new DoubleMinMax();  KernelDensityEstimator kernel=new KernelDensityEstimator(relation);  long[] subspace=BitsUtil.zero(kernel.dim);  FiniteProgress progress=LOG.isVerbose() ? new FiniteProgress("OUTRES scores",relation.size(),LOG) : null;  for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) {    BitsUtil.zeroI(subspace);    double score=outresScore(0,subspace,iditer,kernel);    ranks.putDouble(iditer,score);    minmax.put(score);    LOG.incrementProcessed(progress);  }  LOG.ensureCompleted(progress);  OutlierScoreMeta meta=new InvertedOutlierScoreMeta(minmax.getMin(),minmax.getMax(),0.,1.,1.);  OutlierResult outresResult=new OutlierResult(meta,new MaterializedDoubleRelation("OUTRES","outres-score",ranks,relation.getDBIDs()));  return outresResult;}  }
class C{  public void registerOptional1(String name,Type arg,InvocationPlugin plugin){  plugins.register(plugin,true,allowOverwrite,declaringType,name,arg);}  }
class C{  private LinearEquationSystem runDerivator(Relation<ParameterizationFunction> relation,int dimensionality,DBIDs ids){  try {    Database derivatorDB=buildDerivatorDB(relation,ids);    PCARunner pca=new PCARunner(new StandardCovarianceMatrixBuilder());    EigenPairFilter filter=new FirstNEigenPairFilter(dimensionality);    DependencyDerivator<DoubleVector> derivator=new DependencyDerivator<>(null,FormatUtil.NF4,pca,filter,0,false);    CorrelationAnalysisSolution<DoubleVector> model=derivator.run(derivatorDB);    LinearEquationSystem les=model.getNormalizedLinearEquationSystem(null);    return les;  } catch (  NonNumericFeaturesException e) {    throw new IllegalStateException("Error during normalization" + e);  }}  }
class C{  public static String formatTime(String millis){  String result;  try {    long time=Long.valueOf(millis);    result=formatTime(time);  } catch (  NumberFormatException e) {    throw new IllegalArgumentException("Provided value must be in integer in milliseconds. Value was: " + millis);  }  return result;}  }
class C{  public void copyContent(){  StringSelection selection;  Clipboard clipboard;  selection=getTable().getStringSelection();  if (selection == null) {    return;  }  clipboard=Toolkit.getDefaultToolkit().getSystemClipboard();  clipboard.setContents(selection,selection);}  }
class C{  public static final Object[] trim(Object[] a,int size){  if (a.length == size) {    return a;  } else {    Object[] b=new Object[size];    System.arraycopy(a,0,b,0,size);    return b;  }}  }
class C{  protected void paintData(Graphics2D g2,Variate.N xData,Variate.N yData){  double x=transformX(((Number)xData.get(0)).doubleValue());  double y=transformY(((Number)yData.get(0)).doubleValue());  GeneralPath path=new GeneralPath();  path.moveTo((float)x,(float)y);  int n=xData.getCount();  boolean failed=false;  for (int i=1; i < n; i++) {    x=transformX(((Number)xData.get(i)).doubleValue());    y=transformY(((Number)yData.get(i)).doubleValue());    if (x == Double.NEGATIVE_INFINITY || y == Double.NEGATIVE_INFINITY || Double.isNaN(x) || Double.isNaN(y)) {      failed=true;    } else     if (failed) {      failed=false;      path.moveTo((float)x,(float)y);    } else {      path.lineTo((float)x,(float)y);    }  }  g2.setPaint(linePaint);  g2.setStroke(lineStroke);  g2.draw(path);}  }
class C{  public synchronized int countObservers(){  return obs.size();}  }
class C{  public void cleanUpNullReferences(){synchronized (cache) {    final Iterator<Map.Entry<Object,Object>> iterator=cache.entrySet().iterator();    while (iterator.hasNext()) {      final Map.Entry<Object,Object> entry=iterator.next();      if (((SoftReference)entry.getValue()).get() == null)       iterator.remove();    }  }}  }
class C{  void deleteAllOutEdges(){  for (BasicBlock bb=gc.getCfg().firstInCodeOrder(); bb != null; bb=bb.nextBasicBlockInCodeOrder()) {    bb.deleteOut();  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return ((Agent)stack.pop()).getChannelName();}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case StextPackage.STATECHART_ROOT__DEF:    return def != null;}return super.eIsSet(featureID);}  }
class C{  public void startSnapshot(Map<URI,List<URI>> snapshots){  Iterator<URI> it=snapshots.keySet().iterator();  while (it.hasNext()) {    URI blockObject=it.next();    List<URI> copyIds=snapshots.get(blockObject);    if (!copyIds.isEmpty()) {      BlockStorageUtils.startSnapshot(copyIds.get(0));      break;    }  }}  }
class C{  private String makePretty(double number){  String r=mFormat.format(number);  r=r.replaceAll("E[0-9]",SUFFIX[Character.getNumericValue(r.charAt(r.length() - 1)) / 3]);  while (r.length() > MAX_LENGTH || r.matches("[0-9]+\\.[a-z]")) {    r=r.substring(0,r.length() - 2) + r.substring(r.length() - 1);  }  return r;}  }
class C{  private void checkConstrMap(Composite parent){  Control[] children=parent.getChildren();  HashSet<Control> parentCompSet=new HashSet<Control>(Arrays.asList(children));  Iterator<Map.Entry<ComponentWrapper,CC>> ccIt=ccMap.entrySet().iterator();  while (ccIt.hasNext()) {    Control c=(Control)ccIt.next().getKey().getComponent();    if (c.isDisposed() || parentCompSet.contains(c) == false) {      ccIt.remove();      scrConstrMap.remove(c);      grid=null;    }  }  for (  Control child : children) {    if (scrConstrMap.get(child) != child.getLayoutData())     setComponentConstraintsImpl(child,child.getLayoutData(),true);  }}  }
class C{  public ObjectWithDynamicAttributes copy(){  ObjectWithDynamicAttributes copy=null;  try {    copy=getClass().newInstance();    copy.attributes.putAll(attributes);  } catch (  Exception ex) {    ex.printStackTrace();  }  return copy;}  }
class C{  public E peek(){  if (!hasPeek && hasNext())   peeking();  if (!hasPeek)   throw new NoSuchElementException();  return peek;}  }
class C{  public void init(Pool cp){  setFreeConnectionTimeout(cp.getFreeConnectionTimeout());  setLoadConditioningInterval(cp.getLoadConditioningInterval());  setSocketBufferSize(cp.getSocketBufferSize());  setReadTimeout(cp.getReadTimeout());  setMinConnections(cp.getMinConnections());  setMaxConnections(cp.getMaxConnections());  setRetryAttempts(cp.getRetryAttempts());  setIdleTimeout(cp.getIdleTimeout());  setPingInterval(cp.getPingInterval());  setStatisticInterval(cp.getStatisticInterval());  setThreadLocalConnections(cp.getThreadLocalConnections());  setSubscriptionEnabled(cp.getSubscriptionEnabled());  setPRSingleHopEnabled(cp.getPRSingleHopEnabled());  setSubscriptionRedundancy(cp.getSubscriptionRedundancy());  setSubscriptionMessageTrackingTimeout(cp.getSubscriptionMessageTrackingTimeout());  setSubscriptionAckInterval(cp.getSubscriptionAckInterval());  setServerGroup(cp.getServerGroup());  setMultiuserAuthentication(cp.getMultiuserAuthentication());  this.attributes.locators.addAll(cp.getLocators());  this.attributes.servers.addAll(cp.getServers());}  }
class C{  protected Token nextToken(Token tkn) throws IOException {  wsBuf.clear();  int lastChar=in.readAgain();  int c=in.read();  boolean eol=isEndOfLine(c);  c=in.readAgain();  while (strategy.getIgnoreEmptyLines() && eol && (lastChar == '\n' || lastChar == ExtendedBufferedReader.UNDEFINED)&& !isEndOfFile(lastChar)) {    lastChar=c;    c=in.read();    eol=isEndOfLine(c);    c=in.readAgain();    if (isEndOfFile(c)) {      tkn.type=TT_EOF;      return tkn;    }  }  if (isEndOfFile(lastChar) || (lastChar != strategy.getDelimiter() && isEndOfFile(c))) {    tkn.type=TT_EOF;    return tkn;  }  while (!tkn.isReady && tkn.type != TT_EOF) {    while (strategy.getIgnoreLeadingWhitespaces() && isWhitespace(c) && !eol) {      wsBuf.append((char)c);      c=in.read();      eol=isEndOfLine(c);    }    if (c == strategy.getCommentStart()) {      in.readLine();      tkn=nextToken(tkn.reset());    } else     if (c == strategy.getDelimiter()) {      tkn.type=TT_TOKEN;      tkn.isReady=true;    } else     if (eol) {      tkn.type=TT_EORECORD;      tkn.isReady=true;    } else     if (c == strategy.getEncapsulator()) {      encapsulatedTokenLexer(tkn,c);    } else     if (isEndOfFile(c)) {      tkn.type=TT_EOF;      tkn.isReady=true;    } else {      if (!strategy.getIgnoreLeadingWhitespaces()) {        tkn.content.append(wsBuf);      }      simpleTokenLexer(tkn,c);    }  }  return tkn;}  }
class C{  public boolean contains(Object o){  return indexOf(o) >= 0;}  }
class C{  @Override public byte[] asBytes(int rowNumber){  return ByteBuffer.allocate(2).putShort(get(rowNumber)).array();}  }
class C{  public static URL toURL(String strUrl,int port,boolean encodeIfNecessary) throws MalformedURLException {  URL url;  try {    url=new URL(strUrl);  } catch (  MalformedURLException mue) {    url=new URL("http://" + strUrl);  }  if (!encodeIfNecessary)   return url;  return encodeURL(url,port);}  }
class C{  public static double[][] extractSelectedPointsMatchingCondition(double[][] data,int[] conditionalData,int conditionalValue){  int numNewRows=0;  for (int t=0; t < data.length; t++) {    if (conditionalData[t] == conditionalValue) {      numNewRows++;    }  }  return extractSelectedPointsMatchingCondition(data,conditionalData,conditionalValue,numNewRows);}  }
class C{  public synchronized void flush() throws IOException {  checkNotClosed();  trimToSize();  journalWriter.flush();}  }
class C{  public XPathFactoryConfigurationException(Throwable cause){  super(cause);}  }
class C{  public static EventTypeMetadata createTable(String tableName){  return new EventTypeMetadata(tableName,null,TypeClass.TABLE,false,false,false,null,false);}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public boolean isInvalidNode(){  ASTNode first=fNodes.get(0);  ASTNode candidate=first.getParent();  if (candidate == null)   return false;  if (candidate.getNodeType() == ASTNode.METHOD_DECLARATION)   return true;  return false;}  }
class C{  private boolean tryRestoreArmour(final IItemHandler inventory,final int slot,final ItemStack stack,final EntityLivingBase entity){  if (slot < inventory.getSlots() && inventory.getStackInSlot(slot) == stack) {    restoreArmour(stack,entity);    return true;  }  return false;}  }
class C{  public void doOpen(){  try {    this.setStatusBarMessage("CSV file format is: SYM,Symbol,SMART,BOT/SLD(opt),DATE(MM/dd/yyyy) (opt), Tier(Opt), Mkt Bias(opt), Mkt Bar(opt), Mkt Gap(opt)",BasePanel.INFORMATION);    JFileChooser fileView=new JFileChooser();    fileView.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);    fileView.addChoosableFileFilter(new CVSFilter());    fileView.setAcceptAllFileFilterUsed(false);    fileView.setMultiSelectionEnabled(true);    if (null == m_defaultDir) {      fileView.setCurrentDirectory(new File(System.getProperty("user.dir")));    } else {      fileView.setCurrentDirectory(new File(m_defaultDir));    }    int returnVal=fileView.showOpenDialog(this);    if (returnVal == JFileChooser.APPROVE_OPTION) {      File[] files=fileView.getSelectedFiles();      if (null == files) {        this.setStatusBarMessage("No file selected ",BasePanel.INFORMATION);        return;      }      int selectedRow=0;      Tradingday tradingday=null;      if (m_tradingdayTable.getSelectionModel().getLeadSelectionIndex() == -1) {        if (m_tradingdays.getTradingdays().size() > 0) {          m_tradingdayTable.setRowSelectionInterval(0,0);        }      }      if (m_tradingdayTable.getSelectionModel().getLeadSelectionIndex() > -1) {        selectedRow=m_tradingdayTable.getSelectionModel().getLeadSelectionIndex();        org.trade.core.valuetype.Date openDate=(org.trade.core.valuetype.Date)m_tradingdayModel.getValueAt(m_tradingdayTable.convertRowIndexToModel(selectedRow),0);        org.trade.core.valuetype.Date closeDate=(org.trade.core.valuetype.Date)m_tradingdayModel.getValueAt(m_tradingdayTable.convertRowIndexToModel(selectedRow),1);        tradingday=m_tradingdayModel.getData().getTradingday(openDate.getZonedDateTime(),closeDate.getZonedDateTime());      }      for (int i=0; i < files.length; i++) {        String fileName=files[i].getPath();        m_tradingdays.populateDataFromFile(fileName,tradingday);      }      m_tradingdayModel.setData(m_tradingdays);      if (m_tradingdays.getTradingdays().size() > 0) {        m_tradingdayTable.setRowSelectionInterval(selectedRow,selectedRow);        spinnerEnd.setValue(((Date)m_tradingdayModel.getValueAt(m_tradingdayTable.convertRowIndexToModel(0),0)).getDate());        spinnerStart.setValue(((Date)m_tradingdayModel.getValueAt(m_tradingdayTable.convertRowIndexToModel(m_tradingdayModel.getRowCount() - 1),1)).getDate());      }    }    this.clearStatusBarMessage();  } catch (  PersistentModelException ex1) {    this.setErrorMessage("Exception while reading csv file.",ex1.getMessage(),ex1);  }catch (  Exception ex) {    this.setErrorMessage("Exception while reading csv file.",ex.getMessage(),ex);  }}  }
class C{  public AddMarketingPermissionException(String message){  super(message);}  }
class C{  public void actionPerformed(ActionEvent e){  if (m_readOnly)   dispose(); else   if (e.getSource() == fValue) {    if (fName.getText() == null || fName.getText().length() == 0)     fName.setText(fValue.getText());  } else   if (e.getSource() == fName) {    if (fContact.getText() == null || fContact.getText().length() == 0)     fContact.setText(fName.getText());  } else   if (e.getActionCommand().equals(ConfirmPanel.A_OK) && actionSave())   dispose(); else   if (e.getActionCommand().equals(ConfirmPanel.A_CANCEL))   dispose();}  }
class C{  public String encodeMessage(){  String retval;  if (statusLine != null)   retval=statusLine.encode() + super.encodeSIPHeaders(); else   retval=super.encodeSIPHeaders();  return retval;}  }
class C{  public String makeTileFile(double uvx,double uvy,ZoomLevelMaker zoomInfo,Proj proj) throws IOException {  byte[] imageBytes=zoomInfo.makeTile(uvx,uvy,this,proj);  String filePath=zoomInfo.formatImageFilePath(getRootDir(),(int)uvx,(int)uvy);  return writeImageFile(imageBytes,filePath,true);}  }
class C{  public boolean isUnitClause(){  return literals.size() == 1;}  }
class C{  public MultiGetRequest(ActionRequest request){  super(request);}  }
class C{  private static String determineLinuxLibrary(final String library,final String osName,final String osArch){  String resourceName;  String platform=null;  String fileExtension="so";switch (osArch) {case "amd64":case "x86_64":    platform="linux-x64";  break;default :unsupportedPlatform(osName,osArch);}resourceName="/" + platform + "/"+ library+ "."+ fileExtension;return resourceName;}  }
class C{  private boolean isCopyOnItself(String src,String dest){  return dest.equals(src) || dest.startsWith(src + File.separator);}  }
class C{  public boolean isFinished(){  return mScroller.isFinished();}  }
class C{  @Override public BasicSplitPaneDivider createDefaultDivider(){  SynthSplitPaneDivider divider=new SynthSplitPaneDivider(this);  divider.setDividerSize(splitPane.getDividerSize());  return divider;}  }
class C{  public Spring createSpring(){  Spring spring=new Spring(this);  registerSpring(spring);  return spring;}  }
class C{  public void close(){  sync.releaseShared(1);}  }
class C{  public static BigDecimal normalize(double value){  return new BigDecimal(value).setScale(PriceConverter.NORMALIZED_PRICE_SCALING,PriceConverter.ROUNDING_MODE);}  }
class C{  private void findRelatedVolumes(){  for (  VolumeSpec volume : volumes) {    volume.relatedVolumes=Lists.newArrayList();    Set<String> volumeWwns=getVolumeWwns(volume);    for (    String relatedWwn : volumeWwns) {      BlockObjectRestRep related=findVolumeRestRepByWwn(relatedWwn);      if (related == null) {        related=BlockStorageUtils.getVolumeByWWN(relatedWwn);      }      if (related != null) {        volume.relatedVolumes.add(related);      }    }  }}  }
class C{  public static <K,V>MutableMap<K,V> toMap(V[] objectArray,Function<? super V,? extends K> keyFunction){  MutableMap<K,V> map=UnifiedMap.newMap();  Procedure<V> procedure=new MapCollectProcedure<>(map,keyFunction);  ArrayIterate.forEach(objectArray,procedure);  return map;}  }
class C{  @OnMessage public void onMessage(Session session,String message){  LOGGER.config(null);  sendMessage(STATUS_ENDPOINT + applicationConfig.getServiceName(),applicationConfig.toJSON());}  }
class C{  @EventHandler public void onTrample(PlayerInteractEvent e){  if (e.getClickedBlock() == null) {    return;  }  if (e.getAction() == Action.PHYSICAL) {    Block block=e.getClickedBlock();    Material material=block.getType();    if (material == Material.CROPS || material == Material.SOIL) {      e.setUseInteractedBlock(PlayerInteractEvent.Result.DENY);      e.setCancelled(true);      block.setType(material);      block.setData(block.getData());    }  }}  }
class C{  public Manifest(InputStream is) throws IOException {  while (is.available() != 0) {    MessageHeader m=new MessageHeader(is);    entries.addElement(m);  }}  }
class C{  private void layoutComponents(){  JMenu file=new JMenu(localization.getString("menu.file"));  file.add(new JMenuItem(saveAction));  file.addSeparator();  file.add(new JMenuItem(exitAction));  JMenuBar menu=new JMenuBar();  menu.add(file);  setJMenuBar(menu);  JTextArea textArea=new JTextArea(results);  textArea.setWrapStyleWord(true);  getContentPane().setLayout(new BorderLayout());  getContentPane().add(new JScrollPane(textArea),BorderLayout.CENTER);}  }
class C{  static public boolean addressCheck(int address,boolean longAddr){  if (address < 0) {    log.error("invalid address " + address);    return false;  }  if (longAddr && (address > (255 + (231 - 192) * 256))) {    log.error("invalid address " + address);    return false;  }  if (!longAddr && (address > 127)) {    log.error("invalid address " + address);    return false;  }  return true;}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  set(s.readDouble());}  }
class C{  public static void assertConfigEquals(DistributionConfig config,GemFireProperties data){  assertEquals(data.getMemberName(),config.getName());  String memberGroups=null;  assertEquals(data.getMcastPort(),config.getMcastPort());  assertEquals(data.getMcastAddress(),config.getMcastAddress().getHostAddress());  assertEquals(data.getBindAddress(),config.getBindAddress());  assertEquals(data.getTcpPort(),config.getTcpPort());  assertEquals(removeVMDir(data.getCacheXMLFile()),removeVMDir(config.getCacheXmlFile().getAbsolutePath()));  assertEquals(data.getMcastTTL(),config.getMcastTtl());  assertEquals(data.getServerBindAddress(),config.getServerBindAddress());  assertEquals(data.getLocators(),config.getLocators());  assertEquals(removeVMDir(data.getStartLocator()),removeVMDir(config.getStartLocator()));  assertEquals(removeVMDir(data.getLogFile()),removeVMDir(config.getLogFile().getAbsolutePath()));  assertEquals(data.getLogLevel(),config.getLogLevel());  assertEquals(data.isStatisticSamplingEnabled(),config.getStatisticSamplingEnabled());  assertEquals(removeVMDir(data.getStatisticArchiveFile()),removeVMDir(config.getStatisticArchiveFile().getAbsolutePath()));  String includeFile=null;  assertEquals(data.getAckWaitThreshold(),config.getAckWaitThreshold());  assertEquals(data.getAckSevereAlertThreshold(),config.getAckSevereAlertThreshold());  assertEquals(data.getArchiveFileSizeLimit(),config.getArchiveFileSizeLimit());  assertEquals(data.getArchiveDiskSpaceLimit(),config.getArchiveDiskSpaceLimit());  assertEquals(data.getLogFileSizeLimit(),config.getLogFileSizeLimit());  assertEquals(data.getLogDiskSpaceLimit(),config.getLogDiskSpaceLimit());  assertEquals(data.isClusterSSLEnabled(),config.getClusterSSLEnabled());  assertEquals(data.getClusterSSLCiphers(),config.getClusterSSLCiphers());  assertEquals(data.getClusterSSLProtocols(),config.getClusterSSLProtocols());  assertEquals(data.isClusterSSLRequireAuthentication(),config.getClusterSSLRequireAuthentication());  assertEquals(data.getSocketLeaseTime(),config.getSocketLeaseTime());  assertEquals(data.getSocketBufferSize(),config.getSocketBufferSize());  assertEquals(data.getMcastSendBufferSize(),config.getMcastSendBufferSize());  assertEquals(data.getMcastRecvBufferSize(),config.getMcastRecvBufferSize());  assertEquals(data.getMcastByteAllowance(),config.getMcastFlowControl().getByteAllowance());  assertEquals(data.getMcastRechargeThreshold(),config.getMcastFlowControl().getRechargeThreshold(),0);  assertEquals(data.getMcastRechargeBlockMs(),config.getMcastFlowControl().getRechargeBlockMs());  assertEquals(data.getUdpFragmentSize(),config.getUdpFragmentSize());  assertEquals(data.getUdpSendBufferSize(),config.getUdpSendBufferSize());  assertEquals(data.getUdpRecvBufferSize(),config.getUdpRecvBufferSize());  assertEquals(data.isDisableTcp(),config.getDisableTcp());  assertEquals(data.isEnableTimeStatistics(),config.getEnableTimeStatistics());  assertEquals(data.isEnableNetworkPartitionDetection(),config.getEnableNetworkPartitionDetection());  assertEquals(data.getMemberTimeout(),config.getMemberTimeout());  int[] configPortRange=config.getMembershipPortRange();  int[] dataPortRange=data.getMembershipPortRange();  assertEquals(dataPortRange.length,configPortRange.length);  for (int i=0; i < dataPortRange.length; i++) {    assertEquals(dataPortRange[i],configPortRange[i]);  }  assertEquals(data.isConserveSockets(),config.getConserveSockets());  assertEquals(data.getRoles(),config.getRoles());  assertEquals(data.getMaxWaitTimeForReconnect(),config.getMaxWaitTimeForReconnect());  assertEquals(data.getMaxNumReconnectTries(),config.getMaxNumReconnectTries());  assertEquals(data.getAsyncDistributionTimeout(),config.getAsyncDistributionTimeout());  assertEquals(data.getAsyncQueueTimeout(),config.getAsyncQueueTimeout());  assertEquals(data.getAsyncMaxQueueSize(),config.getAsyncMaxQueueSize());  assertEquals(data.getClientConflation(),config.getClientConflation());  assertEquals(data.getDurableClientId(),config.getDurableClientId());  assertEquals(data.getDurableClientTimeout(),config.getDurableClientTimeout());  assertEquals(data.getSecurityClientAuthInit(),config.getSecurityClientAuthInit());  assertEquals(data.getSecurityClientAuthenticator(),config.getSecurityClientAuthenticator());  assertEquals(data.getSecurityClientDHAlgo(),config.getSecurityClientDHAlgo());  assertEquals(data.getSecurityPeerAuthInit(),config.getSecurityPeerAuthInit());  assertEquals(data.getSecurityClientAuthenticator(),config.getSecurityPeerAuthenticator());  assertEquals(data.getSecurityClientAccessor(),config.getSecurityClientAccessor());  assertEquals(data.getSecurityClientAccessorPP(),config.getSecurityClientAccessorPP());  assertEquals(data.getSecurityLogLevel(),config.getSecurityLogLevel());  assertEquals(removeVMDir(data.getSecurityLogFile()),removeVMDir(config.getSecurityLogFile().getAbsolutePath()));  assertEquals(data.getSecurityPeerMembershipTimeout(),config.getSecurityPeerMembershipTimeout());  assertEquals(data.isRemoveUnresponsiveClient(),config.getRemoveUnresponsiveClient());  assertEquals(data.isDeltaPropagation(),config.getDeltaPropagation());  assertEquals(data.getRedundancyZone(),config.getRedundancyZone());  assertEquals(data.isEnforceUniqueHost(),config.getEnforceUniqueHost());  assertEquals(data.getStatisticSampleRate(),config.getStatisticSampleRate());}  }
class C{  public static File createFile(String str) throws ParseException {  return new File(str);}  }
class C{  protected void drawTile(TileDirectory tile,VPFGraphicWarehouse warehouse,LatLonPoint ll1,LatLonPoint ll2,float dpplat,float dpplon){  boolean drawedge=warehouse.drawEdgeFeatures();  boolean drawtext=warehouse.drawTextFeatures();  boolean drawarea=warehouse.drawAreaFeatures();  boolean drawepoint=warehouse.drawEPointFeatures();  boolean drawcpoint=warehouse.drawCPointFeatures();  close();  try {    if (drawedge || drawarea) {      edg=new EdgeTable(coverageTable,tile);    }  } catch (  FormatException f) {    if (Debug.debugging("vpf.FormatException")) {      Debug.output("EdgeTable: " + f.getClass() + " "+ f.getMessage());    }  }  try {    if (drawtext) {      tft=new TextTable(coverageTable,tile);    }  } catch (  FormatException f) {    if (Debug.debugging("vpf.FormatException")) {      Debug.output("TextTable: " + f.getClass() + " "+ f.getMessage());    }  }  try {    if (drawepoint) {      ent=new NodeTable(coverageTable,tile,true);    }  } catch (  FormatException f) {    if (Debug.debugging("vpf.FormatException")) {      Debug.output("NodeTable: " + f.getClass() + " "+ f.getMessage());    }  }  try {    if (drawcpoint) {      cnt=new NodeTable(coverageTable,tile,false);    }  } catch (  FormatException f) {    if (Debug.debugging("vpf.FormatException")) {      Debug.output("NodeTable: " + f.getClass() + " "+ f.getMessage());    }  }  try {    if (drawarea && (edg != null)) {      aft=new AreaTable(coverageTable,edg,tile);    }  } catch (  FormatException f) {    if (Debug.debugging("vpf.FormatException")) {      Debug.output("AreaTable: " + f.getClass() + " "+ f.getMessage());    }  }  if ((aft != null) && drawarea) {    for (int i=0; i < coverageTable.areainfo.length; i++) {      coverageTable.areainfo[i].findYourself(aft);    }    aft.drawTile(warehouse,dpplat,dpplon,ll1,ll2);  }  if ((tft != null) && drawtext) {    for (int i=0; i < coverageTable.textinfo.length; i++) {      coverageTable.textinfo[i].findYourself(tft);    }    tft.drawTile(warehouse,dpplat,dpplon,ll1,ll2);  }  if ((edg != null) && drawedge) {    for (int i=0; i < coverageTable.lineinfo.length; i++) {      coverageTable.lineinfo[i].findYourself(edg);    }    edg.drawTile(warehouse,dpplat,dpplon,ll1,ll2);  }  if ((ent != null) && drawepoint) {    for (int i=0; i < coverageTable.epointinfo.length; i++) {      coverageTable.epointinfo[i].findYourself(ent);    }    ent.drawTile(warehouse,dpplat,dpplon,ll1,ll2);  }  if ((cnt != null) && drawcpoint) {    for (int i=0; i < coverageTable.cpointinfo.length; i++) {      coverageTable.cpointinfo[i].findYourself(cnt);    }    cnt.drawTile(warehouse,dpplat,dpplon,ll1,ll2);  }  close();}  }
class C{  private MethodRefConstant parseMethodRefConstant(int index) throws IOException {  int classIndex=readShort();  int nameAndTypeIndex=readShort();  return new MethodRefConstant(_class.getConstantPool(),index,classIndex,nameAndTypeIndex);}  }
class C{  public static boolean deleteQuietly(File file){  if (file == null) {    return false;  }  try {    if (file.isDirectory()) {      cleanDirectory(file);    }  } catch (  Exception ignored) {  }  try {    return file.delete();  } catch (  Exception ignored) {    return false;  }}  }
class C{  public void onBatchScanResults(List<ScanResult> results){}  }
class C{  public static void writeHTMLFooter(StringBuffer buffer){  buffer.append("</div>\n");  buffer.append("</body>\n");  buffer.append("</html>\n");}  }
class C{  void jbInit() throws Exception {  this.setLayout(mainLayout);  mainLayout.setHgap(5);  mainLayout.setVgap(5);  this.add(northPanel,BorderLayout.NORTH);  northLayout.setHgap(5);  northLayout.setVgap(5);  northPanel.setLayout(northLayout);  sqlLabel.setText("SQL");  northPanel.add(sqlLabel,BorderLayout.WEST);  northPanel.add(sqlField,BorderLayout.CENTER);  sqlButton.addActionListener(this);  northPanel.add(sqlButton,BorderLayout.EAST);  this.add(centerPanel,BorderLayout.CENTER);  centerPanel.setLayout(centerLayout);  centerLayout.setHgap(0);  resultField.setReadWrite(false);  centerPanel.add(resultField,BorderLayout.CENTER);}  }
class C{  public void writeXml(java.io.Writer writer) throws SQLException {  createWebRowSet().writeXml(writer);}  }
class C{  private void updateHelper(EnumerationContext ctx,ComputeState computeState,GCPInstance vm,AtomicInteger numOfUpdates){  List<Operation> operations=new ArrayList<>();  ComputeState computeStatePatch=new ComputeState();  assignIPAddress(computeStatePatch,vm);  assignPowerState(computeStatePatch,vm.status);  operations.add(Operation.createPatch(getHost(),computeState.documentSelfLink).setBody(computeStatePatch));  ComputeDescription computeDescription=new ComputeDescription();  computeDescription.instanceType=extractActualInstanceType(vm.machineType);  operations.add(Operation.createPatch(getHost(),computeState.descriptionLink).setBody(computeDescription));  if (vm.disks != null && !vm.disks.isEmpty()) {    for (    GCPDisk gcpDisk : vm.disks) {      if (gcpDisk.boot) {        DiskState diskState=new DiskState();        diskState.customProperties=new HashMap<>();        diskState.customProperties.put(DISK_AUTO_DELETE,gcpDisk.autoDelete.toString());        diskState.documentSelfLink=computeState.diskLinks.get(0);        operations.add(Operation.createPatch(getHost(),diskState.documentSelfLink).setBody(diskState));        break;      }    }  }  OperationJoin.create(operations).setCompletion(null).sendWith(this);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4mfPackage.IMPLEMENTED_PROJECTS__IMPLEMENTED_PROJECTS:    getImplementedProjects().clear();  return;}super.eUnset(featureID);}  }
class C{  public void putSetting(String key,String value){  String nameSpace=getNameSpace();  if (nameSpace == null) {    nameSpace="";  } else {    nameSpace+=".";  }  if (props == null) {    try {      init(null);    } catch (    SettingsError e) {      e.printStackTrace();      System.exit(-1);    }  }  props.put(nameSpace + key,value);}  }
class C{  protected void checkUpdatability() throws SQLException {  try {    if (this.fields == null) {      return;    }    String singleTableName=null;    String catalogName=null;    int primaryKeyCount=0;    if ((this.catalog == null) || (this.catalog.length() == 0)) {      this.catalog=this.fields[0].getDatabaseName();      if ((this.catalog == null) || (this.catalog.length() == 0)) {        throw SQLError.createSQLException(Messages.getString("UpdatableResultSet.43"),SQLError.SQL_STATE_ILLEGAL_ARGUMENT,getExceptionInterceptor());      }    }    if (this.fields.length > 0) {      singleTableName=this.fields[0].getOriginalTableName();      catalogName=this.fields[0].getDatabaseName();      if (singleTableName == null) {        singleTableName=this.fields[0].getTableName();        catalogName=this.catalog;      }      if (singleTableName != null && singleTableName.length() == 0) {        this.isUpdatable=false;        this.notUpdatableReason=Messages.getString("NotUpdatableReason.3");        return;      }      if (this.fields[0].isPrimaryKey()) {        primaryKeyCount++;      }      for (int i=1; i < this.fields.length; i++) {        String otherTableName=this.fields[i].getOriginalTableName();        String otherCatalogName=this.fields[i].getDatabaseName();        if (otherTableName == null) {          otherTableName=this.fields[i].getTableName();          otherCatalogName=this.catalog;        }        if (otherTableName != null && otherTableName.length() == 0) {          this.isUpdatable=false;          this.notUpdatableReason=Messages.getString("NotUpdatableReason.3");          return;        }        if ((singleTableName == null) || !otherTableName.equals(singleTableName)) {          this.isUpdatable=false;          this.notUpdatableReason=Messages.getString("NotUpdatableReason.0");          return;        }        if ((catalogName == null) || !otherCatalogName.equals(catalogName)) {          this.isUpdatable=false;          this.notUpdatableReason=Messages.getString("NotUpdatableReason.1");          return;        }        if (this.fields[i].isPrimaryKey()) {          primaryKeyCount++;        }      }      if ((singleTableName == null) || (singleTableName.length() == 0)) {        this.isUpdatable=false;        this.notUpdatableReason=Messages.getString("NotUpdatableReason.2");        return;      }    } else {      this.isUpdatable=false;      this.notUpdatableReason=Messages.getString("NotUpdatableReason.3");      return;    }    if (this.connection.getStrictUpdates()) {      java.sql.DatabaseMetaData dbmd=this.connection.getMetaData();      java.sql.ResultSet rs=null;      HashMap<String,String> primaryKeyNames=new HashMap<String,String>();      try {        rs=dbmd.getPrimaryKeys(catalogName,null,singleTableName);        while (rs.next()) {          String keyName=rs.getString(4);          keyName=keyName.toUpperCase();          primaryKeyNames.put(keyName,keyName);        }      }  finally {        if (rs != null) {          try {            rs.close();          } catch (          Exception ex) {            AssertionFailedException.shouldNotHappen(ex);          }          rs=null;        }      }      int existingPrimaryKeysCount=primaryKeyNames.size();      if (existingPrimaryKeysCount == 0) {        this.isUpdatable=false;        this.notUpdatableReason=Messages.getString("NotUpdatableReason.5");        return;      }      for (int i=0; i < this.fields.length; i++) {        if (this.fields[i].isPrimaryKey()) {          String columnNameUC=this.fields[i].getName().toUpperCase();          if (primaryKeyNames.remove(columnNameUC) == null) {            String originalName=this.fields[i].getOriginalName();            if (originalName != null) {              if (primaryKeyNames.remove(originalName.toUpperCase()) == null) {                this.isUpdatable=false;                this.notUpdatableReason=Messages.getString("NotUpdatableReason.6",new Object[]{originalName});                return;              }            }          }        }      }      this.isUpdatable=primaryKeyNames.isEmpty();      if (!this.isUpdatable) {        if (existingPrimaryKeysCount > 1) {          this.notUpdatableReason=Messages.getString("NotUpdatableReason.7");        } else {          this.notUpdatableReason=Messages.getString("NotUpdatableReason.4");        }        return;      }    }    if (primaryKeyCount == 0) {      this.isUpdatable=false;      this.notUpdatableReason=Messages.getString("NotUpdatableReason.4");      return;    }    this.isUpdatable=true;    this.notUpdatableReason=null;    return;  } catch (  SQLException sqlEx) {    this.isUpdatable=false;    this.notUpdatableReason=sqlEx.getMessage();  }}  }
class C{  public String gotoMarketplace(){  setMarketplaceId(selectedMarketplace);  return OUTCOME_SUCCESS;}  }
class C{  private boolean isBetterThanPreviousGeneration(Project db,ProjectStaticData current,TestsOnDisk suite){  if (suite.csvData == null) {    return false;  }  if (current.getClassInfo(suite.cut).hasChanged()) {    return true;  }  CUT cut=ProjectUtil.getCUT(db,suite.cut);  Generation latestSuccessfulGeneration=CUTUtil.getLatestSuccessfulGeneration(cut);  if (latestSuccessfulGeneration == null) {    return true;  }  TestSuite previousTestSuite=latestSuccessfulGeneration.getSuite();  File oldFile=getFileForTargetBestTest(cut.getFullNameOfTestSuite());  if (!oldFile.exists()) {    return true;  }  double previousOverallCoverage=GenerationUtil.getOverallCoverage(latestSuccessfulGeneration);  double generatedOverallCoverage=0.0;  for (  Coverage coverage : previousTestSuite.getCoverage()) {    if (!suite.csvData.hasCoverage(coverage.getCriterion())) {      continue;    }    generatedOverallCoverage+=suite.csvData.getCoverage(coverage.getCriterion());  }  generatedOverallCoverage/=suite.csvData.getNumberOfCoverageValues();  double covDif=generatedOverallCoverage - previousOverallCoverage;  if (covDif > 0.01) {    return true;  }  for (  Coverage coverage : previousTestSuite.getCoverage()) {    if (!suite.csvData.hasCoverage(coverage.getCriterion())) {      continue;    }    String generatedCoverage=suite.csvData.getCoverageBitString(coverage.getCriterion());    String previousCoverage=coverage.getCoverageBitString();    if (generatedCoverage.length() != previousCoverage.length()) {      return true;    }    for (int i=0; i < generatedCoverage.length(); i++) {      if (previousCoverage.charAt(i) == '0' && generatedCoverage.charAt(i) == '1') {        return true;      }    }  }  if (covDif < 0.0) {    return false;  }  int oldSize=previousTestSuite.getTotalNumberOfStatements().intValue();  int newSize=suite.csvData.getTotalNumberOfStatements();  if (newSize != oldSize) {    return newSize < oldSize;  }  int oldNumTests=previousTestSuite.getNumberOfTests().intValue();  int newNumTests=suite.csvData.getNumberOfTests();  return newNumTests < oldNumTests;}  }
class C{  public void loadProjectionNormalized(int w,int h){  Matrix4f m1=new Matrix4f();  Matrix4f m2=new Matrix4f();  if (w > h) {    float aspect=((float)w) / h;    m1.loadFrustum(-aspect,aspect,-1,1,1,100);  } else {    float aspect=((float)h) / w;    m1.loadFrustum(-1,1,-aspect,aspect,1,100);  }  m2.loadRotate(180,0,1,0);  m1.loadMultiply(m1,m2);  m2.loadScale(-2,2,1);  m1.loadMultiply(m1,m2);  m2.loadTranslate(0,0,2);  m1.loadMultiply(m1,m2);  load(m1);}  }
class C{  public static boolean nullable(String name,String cls){  return !"_KEY".equalsIgnoreCase(name) && !"_VAL".equalsIgnoreCase(name) && !(boolean.class.getName().equals(cls) || byte.class.getName().equals(cls) || short.class.getName().equals(cls)|| int.class.getName().equals(cls)|| long.class.getName().equals(cls)|| float.class.getName().equals(cls)|| double.class.getName().equals(cls));}  }
class C{  @Override public void onItemDataResponse(final ItemDataResponse itemDataResponse){  Log.v(TAG,"onItemDataResponse recieved");  Log.v(TAG,"ItemDataRequestStatus" + itemDataResponse.getItemDataRequestStatus());  Log.v(TAG,"ItemDataRequestId" + itemDataResponse.getRequestId());  new ItemDataAsyncTask().execute(itemDataResponse);}  }
class C{  public void releaseResourcesForAddress(String address){synchronized (asyncCloseExecutors) {    ThreadPoolExecutor pool=asyncCloseExecutors.get(address);    if (pool != null) {      pool.shutdown();      asyncCloseExecutors.remove(address);    }  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public ObjectFactory(){}  }
class C{  public void attrRemoved(Attr node,String oldv){  fireBaseAttributeListeners();  if (!hasAnimVal) {    fireAnimatedAttributeListeners();  }}  }
class C{  public BackgroundLayer(ImageSource imageSource,ImageOptions imageOptions){  if (imageSource == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"BackgroundLayer","constructor","missingSource"));  }  this.setDisplayName("Background");  this.setPickEnabled(false);  SurfaceImage surfaceImage=new SurfaceImage(new Sector().setFullSphere(),imageSource);  surfaceImage.setImageOptions(imageOptions);  this.addRenderable(surfaceImage);}  }
class C{  @Override protected void onActivityResult(int requestCode,int resultCode,Intent data){  super.onActivityResult(requestCode,resultCode,data);  if (resultCode == RESULT_OK) {    if (requestCode == REQUEST_EXPORT_PATH) {      Uri uri=data.getData();      Logger.getInstance().logInfo("Uri",uri.toString());      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {        getContentResolver().takePersistableUriPermission(uri,Intent.FLAG_GRANT_READ_URI_PERMISSION | Intent.FLAG_GRANT_WRITE_URI_PERMISSION);      }      mSettings.setUri(PlayMusicExporterSettings.PREF_EXPORT_URI,uri);      updatePrefExportPath();    }  }}  }
class C{  @Override public final void perform(IR ir){  if (!ir.method.isInterruptible() || ir.method.getDeclaringClass().isInBootImage() || !Instrumentation.instrumentationEnabled()) {    return;  }  YieldpointCounterData data=AOSDatabase.yieldpointCounterData;  if (InsertYieldpointCounters.DEBUG) {    VM.sysWrite("InsertYieldpointCounters.perform() " + ir.method + "\n");  }  for (Enumeration<BasicBlock> bbe=ir.getBasicBlocks(); bbe.hasMoreElements(); ) {    BasicBlock bb=bbe.nextElement();    if (InsertYieldpointCounters.DEBUG) {      VM.sysWrite("Considering basic block " + bb.toString() + "\n");      bb.printExtended();    }    Instruction i=bb.firstInstruction();    while (i != null && i != bb.lastInstruction()) {      if (i.operator() == YIELDPOINT_PROLOGUE || i.operator() == YIELDPOINT_EPILOGUE || i.operator() == YIELDPOINT_BACKEDGE) {        String prefix=yieldpointPrefix(i.operator());        double incrementValue=1.0;        if (i.operator() == YIELDPOINT_EPILOGUE) {          prefix="METHOD ENTRY ";        } else         if (i.operator() == YIELDPOINT_PROLOGUE) {          prefix="METHOD EXIT ";        } else {          prefix="BACKEDGE ";          incrementValue=1.0;        }        Instruction counterInst=data.getCounterInstructionForEvent(prefix + ir.method.toString(),incrementValue);        i.insertAfter(counterInst);      }      i=i.nextInstructionInCodeOrder();    }  }}  }
class C{  public synchronized void addIncrementalClassifierListener(IncrementalClassifierListener cl){  m_incrementalClassifierListeners.add(cl);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected void initializeTexture(){  Object imageSource=this.getImageSource();  if (imageSource instanceof String || imageSource instanceof URL) {    URL imageURL=WorldWind.getDataFileStore().requestFile(imageSource.toString());    if (imageURL != null) {      this.texture=new BasicWWTexture(imageURL,true);    }  } else   if (imageSource != null) {    this.texture=new BasicWWTexture(imageSource,true);  }}  }
class C{  protected void locatePackageDeclarations(SearchPattern searchPattern,SearchParticipant participant,IJavaProject[] projects) throws CoreException {  if (this.progressMonitor != null && this.progressMonitor.isCanceled()) {    throw new OperationCanceledException();  }  if (searchPattern instanceof OrPattern) {    SearchPattern[] patterns=((OrPattern)searchPattern).patterns;    for (int i=0, length=patterns.length; i < length; i++) {      locatePackageDeclarations(patterns[i],participant,projects);    }  } else   if (searchPattern instanceof PackageDeclarationPattern) {    IJavaElement focus=searchPattern.focus;    if (focus != null) {      if (encloses(focus)) {        SearchMatch match=new PackageDeclarationMatch(focus.getAncestor(IJavaElement.PACKAGE_FRAGMENT),SearchMatch.A_ACCURATE,-1,-1,participant,focus.getResource());        report(match);      }      return;    }    PackageDeclarationPattern pkgPattern=(PackageDeclarationPattern)searchPattern;    boolean isWorkspaceScope=this.scope == JavaModelManager.getJavaModelManager().getWorkspaceScope();    IPath[] scopeProjectsAndJars=isWorkspaceScope ? null : this.scope.enclosingProjectsAndJars();    int scopeLength=isWorkspaceScope ? 0 : scopeProjectsAndJars.length;    SimpleSet packages=new SimpleSet();    for (int i=0, length=projects.length; i < length; i++) {      IJavaProject javaProject=projects[i];      if (this.progressMonitor != null) {        if (this.progressMonitor.isCanceled())         throw new OperationCanceledException();        this.progressWorked++;        if ((this.progressWorked % this.progressStep) == 0)         this.progressMonitor.worked(this.progressStep);      }      if (!isWorkspaceScope) {        boolean found=false;        for (int j=0; j < scopeLength; j++) {          if (javaProject.getPath().equals(scopeProjectsAndJars[j])) {            found=true;            break;          }        }        if (!found)         continue;      }      this.nameLookup=((JavaProject)projects[i]).newNameLookup(this.workingCopies);      IPackageFragment[] packageFragments=this.nameLookup.findPackageFragments(new String(pkgPattern.pkgName),false,true);      int pLength=packageFragments == null ? 0 : packageFragments.length;      for (int p=0; p < pLength; p++) {        IPackageFragment fragment=packageFragments[p];        if (packages.addIfNotIncluded(fragment) == null)         continue;        if (encloses(fragment)) {          IResource resource=fragment.getResource();          if (resource == null)           resource=javaProject.getProject();          try {            if (encloses(fragment)) {              SearchMatch match=new PackageDeclarationMatch(fragment,SearchMatch.A_ACCURATE,-1,-1,participant,resource);              report(match);            }          } catch (          JavaModelException e) {            throw e;          }catch (          CoreException e) {            throw new JavaModelException(e);          }        }      }    }  }}  }
class C{  public static void registerGUIBundle(ResourceBundle bundle){  registerGUIBundle(bundle,false);}  }
class C{  protected Template handleRequest(Context ctx) throws Exception {  throw new Exception("You must override VelocityServlet.handleRequest( Context) " + " or VelocityServlet.handleRequest( HttpServletRequest, " + " HttpServletResponse, Context)");}  }
class C{  public static List<String> parseProgramArgs(ILaunchConfiguration launchConfig) throws CoreException {  return parseArgs(launchConfig.getAttribute(IJavaLaunchConfigurationConstants.ATTR_PROGRAM_ARGUMENTS,""));}  }
class C{  @Restrictions({@Restrict({"SECURITY_ADMIN"}),@Restrict({"RESTRICTED_SECURITY_ADMIN"})}) public static void validatePasswordDynamic(String password,String fieldName){  boolean passed=true;  if (fieldName.contains("root")) {    fieldName="setup.rootPassword";  }  if (fieldName.contains("system")) {    fieldName="setup.systemPasswords";  }  if (PasswordUtil.isNotValid(password)) {    Validation.addError(fieldName + ".value","setup.password.notValid");    passed=false;  }  if (passed) {    String validation=PasswordUtil.validatePassword(password);    if (StringUtils.isNotBlank(validation)) {      Validation.addError(fieldName + ".value",validation);    }  }  if (Validation.hasErrors()) {    renderJSON(ValidationResponse.collectErrors());  } else {    renderJSON(ValidationResponse.valid());  }}  }
class C{  private void queueMsgUnderWakeLock(Handler handler,int msg,int arg1,int arg2,Object obj,int delay){  mMediaEventWakeLock.acquire();  sendMsg(handler,msg,SENDMSG_QUEUE,arg1,arg2,obj,delay);}  }
class C{  public void destroyJoint(Joint joint){  joint.setUserData(null);  world.destroyJoint(joint.joint);  joints.remove(joint.joint);}  }
class C{  public SVGDescriptor toSVG(GraphicContext gc){  return toSVG(gc.getFont(),gc.getFontRenderContext());}  }
class C{  @Override public void runUsing(EclipseRunner runner) throws Exception {  File tempFile=File.createTempFile("goomph-ant-build",".xml");  Files.write(buildXml().getBytes(StandardCharsets.UTF_8),tempFile);  try {    List<String> args=new ArrayList<>();    args.addAll(toArgList());    args.add("-buildfile");    args.add(tempFile.getAbsolutePath());    runner.run(args);  }  finally {    FileMisc.forceDelete(tempFile);  }}  }
class C{  public static double quantile(double val,double loc,double scale,double shape){  return loc - scale * Math.log(Math.exp(Math.log(val) / -shape) - 1);}  }
class C{  public static final String createHashedHostname(String hostname){  SHA1 sha1=new SHA1();  byte[] salt=new byte[sha1.getDigestLength()];  new SecureRandom().nextBytes(salt);  byte[] hash=hmacSha1Hash(salt,hostname);  String base64_salt=new String(Base64.encode(salt));  String base64_hash=new String(Base64.encode(hash));  return new String("|1|" + base64_salt + "|"+ base64_hash);}  }
class C{  public final boolean isDirty(){  for (int i=0, size=OPTIONS_PANE_LIST.size(); i < size; i++) {    OptionsPane op=OPTIONS_PANE_LIST.get(i);    if (op.isDirty())     return true;  }  return false;}  }
class C{  public int typicalIndsProduced(){  return (tossSecondParent ? minChildProduction() : minChildProduction() * 2);}  }
class C{  public void addDataPoints(ArrayList<double[]> dataPoints){synchronized (chartData) {    chartData.addAll(dataPoints);    for (int i=0; i < dataPoints.size(); i++) {      double[] dataPoint=dataPoints.get(i);      xExtremityMonitor.update(dataPoint[0]);      for (int j=0; j < series.length; j++) {        if (!Double.isNaN(dataPoint[j + 1])) {          series[j].update(dataPoint[j + 1]);        }      }    }    updateDimensions();    updatePaths();  }}  }
class C{  public void execute(){  DataModel source=getDataModel();  if (!(source instanceof DataSet)) {    throw new IllegalArgumentException("Expecting a rectangular data set.");  }  DataSet data=(DataSet)source;  if (!data.isContinuous()) {    throw new IllegalArgumentException("Expecting a continuous data set.");  }  Lingam lingam=new Lingam();  Parameters params=getParams();  lingam.setPruneFactor(params.getDouble("pruneFactor",1.0));  Graph graph=lingam.search(data);  if (getSourceGraph() != null) {    GraphUtils.arrangeBySourceGraph(graph,getSourceGraph());  } else {    GraphUtils.circleLayout(graph,200,200,150);  }  setResultGraph(graph);  GraphUtils.arrangeBySourceGraph(getResultGraph(),getSourceGraph());}  }
class C{  public XmlTransformer(){  m_transformer=null;  m_source=null;}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  @Override public String listSessionIds(){  StringBuilder builder=new StringBuilder();  Iterator<String> sessionIds=getSessionCache().keySet().iterator();  while (sessionIds.hasNext()) {    builder.append(sessionIds.next());    if (sessionIds.hasNext()) {      builder.append(" ");    }  }  return builder.toString();}  }
class C{  protected int firstStep(RouteInfo plan){  return (plan.getHopCount() > 1) ? CONNECT_PROXY : CONNECT_TARGET;}  }
class C{  public static File findJavaExecutable(File vmInstallLocation){  for (int i=0; i < fgCandidateJavaFiles.length; i++) {    for (int j=0; j < fgCandidateJavaLocations.length; j++) {      File javaFile=new File(vmInstallLocation,fgCandidateJavaLocations[j] + fgCandidateJavaFiles[i]);      if (javaFile.isFile()) {        return javaFile;      }    }  }  return null;}  }
class C{  public TransportServiceEvent(Object source){  super(source);}  }
class C{  public void putInt24(int i){  ensureCapacity(3);  byte[] b=this.byteBuffer;  b[this.position++]=(byte)(i & 0xff);  b[this.position++]=(byte)(i >>> 8);  b[this.position++]=(byte)(i >>> 16);}  }
class C{  private void printBatchRequest(CellFeed batchRequest){  System.out.println("Current operations in batch");  for (  CellEntry entry : batchRequest.getEntries()) {    String msg="\tID: " + BatchUtils.getBatchId(entry) + " - "+ BatchUtils.getBatchOperationType(entry)+ " row: "+ entry.getCell().getRow()+ " col: "+ entry.getCell().getCol()+ " value: "+ entry.getCell().getInputValue();    System.out.println(msg);  }}  }
class C{  public String toString(){  return "Cube: [" + min[RED] + '-'+ max[RED]+ "] ["+ min[GRN]+ '-'+ max[GRN]+ "] ["+ min[BLU]+ '-'+ max[BLU]+ "] n:"+ count;}  }
class C{  public void testAudit(){  AuditServiceImpl instance=initialiseAuditService();  Audit audit=EasyMock.createMock(Audit.class);  Audit auditReturnedByAuditMethodOfAuditServiceThread=EasyMock.createMock(Audit.class);  AuditServiceThread mockAuditServiceThread=EasyMock.createMock(AuditServiceThread.class);  mockAuditServiceThread.run();  EasyMock.expectLastCall();  EasyMock.expect(mockAuditServiceThread.getAudit()).andReturn(auditReturnedByAuditMethodOfAuditServiceThread).anyTimes();  EasyMock.replay(mockAuditServiceThread);  EasyMock.expect(mockAuditServiceThreadFactory.create(audit)).andReturn(mockAuditServiceThread).anyTimes();  EasyMock.replay(mockAuditServiceThreadFactory);  assertEquals(auditReturnedByAuditMethodOfAuditServiceThread,instance.audit(audit));  EasyMock.verify(mockAuditServiceThread);  EasyMock.verify(mockAuditServiceThreadFactory);}  }
class C{  public Try<UploadResult,Throwable> putSync(String key,Object value){  return put(key,value).map(FluentFunctions.ofChecked(null));}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:24.914 -0500",hash_original_method="61A0B58FC44A88594A723273F46294F0",hash_generated_method="C4173C65484473D7D9921BE854FAB1D7") public PointF createFromParcel(Parcel in){  PointF r=new PointF();  r.readFromParcel(in);  r.addTaintLocal(in.getTaintInt());  return r;}  }
class C{  public void onInputChanged(){  processExpressions();  if (entity != null) {    entity.puzzleExpressionsUpdated();  }}  }
class C{  public void addRequestProperty(String key,String value){  delegate.addRequestProperty(key,value);}  }
class C{  private void addNodesToRight(SortedSet<Integer> L1,SortedSet<Integer> L2,Graph graph,List<Node> nodes,int moved){  for (  int j : new TreeSet<>(L2)) {    if (j > max(L1) && j > moved && addable(j,L1,graph,nodes)) {      L1.add(j);      L2.remove(j);    }  }}  }
class C{  private void offsetChildrenLeftAndRight(int offset){  for (int i=getChildCount() - 1; i >= 0; i--) {    getChildAt(i).offsetLeftAndRight(offset);  }}  }
class C{  public static boolean isEmail(String value){  if (GenericValidator.isEmail(value)) {    return Pattern.matches("\\S.*@[a-zA-Z0-9\\-\\.]*",value);  }  return false;}  }
class C{  public Lock tryReadLock(){  if (writeRequested || isWriterActive()) {    return null;  }synchronized (this) {    if (isWriterActive()) {      return null;    }    return createReadLock();  }}  }
class C{  public static String encodeWithinQuery(final String unescaped,final String charset) throws URIException {  return encode(unescaped,URI.allowed_within_query,charset);}  }
class C{  public PolynomialGF2mSmallM modSquareRoot(PolynomialGF2mSmallM a){  int[] resultCoeff=IntUtils.clone(coefficients);  int[] help=modMultiply(resultCoeff,resultCoeff,a.coefficients);  while (!isEqual(help,coefficients)) {    resultCoeff=normalForm(help);    help=modMultiply(resultCoeff,resultCoeff,a.coefficients);  }  return new PolynomialGF2mSmallM(field,resultCoeff);}  }
class C{  public void __tearDownUnitTest(){  repo.getSail().__tearDownUnitTest();}  }
class C{  public Long zremrangeByScore(final String key,final double start,final double end){  checkIsInMulti();  client.zremrangeByScore(key,start,end);  return client.getIntegerReply();}  }
class C{  public static long geMillisFromZonedDateTime(ZonedDateTime date){  return date.toInstant().toEpochMilli();}  }
class C{  public static boolean fixUtils(String[] utils) throws Exception {  return getInternals().fixUtils(utils);}  }
class C{  public void addColumn(String column,String type) throws Exception {  this.addColumn(column,type,true);}  }
class C{  public synchronized void addServer(ServerLocation location,String[] groups,ServerLoad initialLoad,long loadPollInterval){  serverGroupMap.put(location,groups);  LoadHolder connectionLoad=new LoadHolder(location,initialLoad.getConnectionLoad(),initialLoad.getLoadPerConnection(),loadPollInterval);  addGroups(connectionLoadMap,groups,connectionLoad);  LoadHolder queueLoad=new LoadHolder(location,initialLoad.getSubscriptionConnectionLoad(),initialLoad.getLoadPerSubscriptionConnection(),loadPollInterval);  addGroups(queueLoadMap,groups,queueLoad);  updateLoad(location,initialLoad);}  }
class C{  private void readNamesObject(final PdfObject nameObject,final Javascript javascript,final boolean isKid){  final ObjectDecoder objectDecoder=new ObjectDecoder(objectReader);  objectDecoder.checkResolved(nameObject);  final int[] nameLists={PdfDictionary.Dests,PdfDictionary.EmbeddedFiles,PdfDictionary.JavaScript,PdfDictionary.XFAImages};  int count=nameLists.length;  if (isKid) {    count=1;  }  PdfObject pdfObj;  PdfArrayIterator namesArray;  String name, value;  for (int ii=0; ii < count; ii++) {    if (isKid) {      pdfObj=nameObject;    } else {      pdfObj=nameObject.getDictionary(nameLists[ii]);    }    if (pdfObj == null) {      continue;    }    final byte[][] kidList=pdfObj.getKeyArray(PdfDictionary.Kids);    if (kidList != null) {      final int kidCount=kidList.length;      if (kidCount > 0) {        for (        final byte[] aKidList : kidList) {          final String nextValue=new String(aKidList);          final PdfObject nextObject=new NamesObject(nextValue);          if (aKidList[0] == '<') {            nextObject.setStatus(PdfObject.UNDECODED_DIRECT);          } else {            nextObject.setStatus(PdfObject.UNDECODED_REF);          }          nextObject.setUnresolvedData(aKidList,nameLists[ii]);          nextObject.ignoreRecursion(false);          objectDecoder.checkResolved(nextObject);          readNames(nextObject,javascript,true);        }      }    }    namesArray=pdfObj.getMixedArray(PdfDictionary.Names);    if (namesArray != null && namesArray.getTokenCount() > 0) {      while (namesArray.hasMoreTokens()) {        if (nameLists[ii] == PdfDictionary.EmbeddedFiles) {          name=StringUtils.getTextString(namesArray.getNextValueAsByte(true),false);        } else {          name=namesArray.getNextValueAsString(true);        }        if (!namesArray.hasMoreTokens()) {          continue;        }        value=namesArray.getNextValueAsString(true);switch (nameLists[ii]) {case PdfDictionary.EmbeddedFiles:          embeddedFiles.put(name,value);        break;case PdfDictionary.JavaScript:      setJavaScriptName(value,objectDecoder,javascript,name);    break;case PdfDictionary.XFAImages:  setXFAImage(value,objectDecoder,name);break;default :this.put(name,value);}}}}}  }
class C{  public EditableLabeledOMSpline(LabeledOMSpline omls){  super(omls);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:01.073 -0500",hash_original_method="6CBAE502E931683D712FFCD149457FE9",hash_generated_method="AEA9EF3D50FD5C61970AB9102DFCAECA") public void removeTag(){  parameters.delete(ParameterNames.TAG);}  }
class C{  @SuppressWarnings("ConstantConditions") public static boolean monthBefore(long first,long second){  if (isNotTime(first) || isNotTime(second)) {    return false;  }  DateOnlyCalendar firstCalendar=DateOnlyCalendar.fromTime(first);  DateOnlyCalendar secondCalendar=DateOnlyCalendar.fromTime(second);  boolean before=firstCalendar.monthBefore(secondCalendar);  firstCalendar.recycle();  secondCalendar.recycle();  return before;}  }
class C{  public static boolean hasRepeatedPoints(Coordinate[] coord){  for (int i=1; i < coord.length; i++) {    if (coord[i - 1].equals(coord[i])) {      return true;    }  }  return false;}  }
class C{  public final void notifyAll(){  return;}  }
class C{  public static void write(char[] data,Writer output) throws IOException {  if (data != null) {    output.write(data);  }}  }
class C{  public void addObjectsToLocation(final Collection objs,final int x,final int y,final int z){  if (objs == null)   return;  Bag[] fieldxy=field[x][y];  if (fieldxy[z] == null)   buildBag(fieldxy,z);  fieldxy[z].addAll(objs);}  }
class C{  public DeltaSessionFacade(DeltaSessionInterface session){  super((HttpSession)session);  this.session=session;}  }
class C{  @Override public <V>Callable<V> wrap(Callable<V> callable){  if (isTracing()) {    return new TraceCallable<>(this,this.spanNamer,callable);  }  return callable;}  }
class C{  public VariableTree buildVariableDecl(TypeMirror type,String name,Element owner,ExpressionTree initializer){  DetachedVarSymbol sym=new DetachedVarSymbol(0,names.fromString(name),(Type)type,(Symbol)owner);  VariableTree tree=maker.VarDef(sym,(JCTree.JCExpression)initializer);  sym.setDeclaration(tree);  return tree;}  }
class C{  public int numRows(){  return MaxR + 1;}  }
class C{  private static void findConflictsBeneathNode(IvyNodeElement node){  Map<ModuleId,Collection<IvyNodeElement>> moduleRevisionMap=new HashMap<>();  IvyNodeElement[] deepDependencies=node.getDeepDependencies();  for (int i=0; i < deepDependencies.length; i++) {    if (deepDependencies[i].isEvicted())     continue;    ModuleId moduleId=deepDependencies[i].getModuleRevisionId().getModuleId();    if (moduleRevisionMap.containsKey(moduleId)) {      Collection<IvyNodeElement> conflicts=moduleRevisionMap.get(moduleId);      conflicts.add(deepDependencies[i]);      for (Iterator<IvyNodeElement> iter=conflicts.iterator(); iter.hasNext(); ) {        IvyNodeElement conflict=iter.next();        conflict.setConflicts(conflicts);      }    } else {      List<IvyNodeElement> immutableMatchingSet=Arrays.asList(deepDependencies[i]);      moduleRevisionMap.put(moduleId,new HashSet<>(immutableMatchingSet));    }  }}  }
class C{  public static void registerPlayer(final Player player,final StendhalRPZone zone){  registerPlayer(player);  zone.add(player);}  }
class C{  public static SymbolNode lookupOriginalSymbol(UniqueString name,SemanticNode curNode,Location location,SymbolNode defaultResult){  name=Operators.resolveSynonym(name);  SymbolNode resolvedSymbol=lookupSymbol(name,curNode,location,defaultResult);  if (resolvedSymbol == null) {    return null;  }  if (resolvedSymbol instanceof OpDefNode) {    OpDefNode opdef=(OpDefNode)resolvedSymbol;    if (opdef.getSource() != null) {      resolvedSymbol=opdef.getSource();    }  } else   if (resolvedSymbol instanceof ThmOrAssumpDefNode) {    ThmOrAssumpDefNode opdef=(ThmOrAssumpDefNode)resolvedSymbol;    if (opdef.getSource() != null) {      resolvedSymbol=opdef.getSource();    }  }  return resolvedSymbol;}  }
class C{  public boolean isEmpty(){  return container.isEmpty() && cache.isEmpty();}  }
class C{  public void stepForward(){  changeTimeBy(timeIncrement,timeWrap,TimerStatus.STEP_FORWARD);}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/deregister") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public StorageSystemRestRep deregisterStorageSystem(@PathParam("id") URI id) throws ControllerException {  ArgValidator.checkFieldUriType(id,StorageSystem.class,"id");  StorageSystem storageSystem=_dbClient.queryObject(StorageSystem.class,id);  ArgValidator.checkEntity(storageSystem,id,isIdEmbeddedInURL(id));  if (!RegistrationStatus.UNREGISTERED.toString().equalsIgnoreCase(storageSystem.getRegistrationStatus())) {    storageSystem.setRegistrationStatus(RegistrationStatus.UNREGISTERED.toString());    _dbClient.persistObject(storageSystem);    stopStorageSystem(storageSystem);  }  URIQueryResultList storagePoolURIs=new URIQueryResultList();  _dbClient.queryByConstraint(ContainmentConstraint.Factory.getStorageDeviceStoragePoolConstraint(id),storagePoolURIs);  Iterator<URI> storagePoolIter=storagePoolURIs.iterator();  List<StoragePool> modifiedPools=new ArrayList<StoragePool>();  while (storagePoolIter.hasNext()) {    StoragePool pool=_dbClient.queryObject(StoragePool.class,storagePoolIter.next());    modifiedPools.add(pool);    if (pool.getInactive() || DiscoveredDataObject.RegistrationStatus.UNREGISTERED.toString().equals(pool.getRegistrationStatus())) {      continue;    }    pool.setRegistrationStatus(RegistrationStatus.UNREGISTERED.toString());    _dbClient.persistObject(pool);    auditOp(OperationTypeEnum.DEREGISTER_STORAGE_POOL,true,null,id.toString());  }  URIQueryResultList storagePortURIs=new URIQueryResultList();  _dbClient.queryByConstraint(ContainmentConstraint.Factory.getStorageDeviceStoragePortConstraint(id),storagePortURIs);  Iterator<URI> storagePortIter=storagePortURIs.iterator();  while (storagePortIter.hasNext()) {    StoragePort port=_dbClient.queryObject(StoragePort.class,storagePortIter.next());    if (port.getInactive() || DiscoveredDataObject.RegistrationStatus.UNREGISTERED.toString().equals(port.getRegistrationStatus())) {      continue;    }    port.setRegistrationStatus(RegistrationStatus.UNREGISTERED.toString());    _dbClient.persistObject(port);    auditOp(OperationTypeEnum.DEREGISTER_STORAGE_PORT,true,null,port.getLabel(),port.getId().toString());  }  StringBuffer errorMessage=new StringBuffer();  ImplicitPoolMatcher.matchModifiedStoragePoolsWithAllVirtualPool(modifiedPools,_dbClient,_coordinator,errorMessage);  auditOp(OperationTypeEnum.DEREGISTER_STORAGE_SYSTEM,true,null,storageSystem.getId().toString(),id.toString());  return map(storageSystem);}  }
class C{  public String buildServiceDocument() throws ODataRenderException {  LOG.info("Building service(root) document");  try (ByteArrayOutputStream outputStream=new ByteArrayOutputStream(BUFFER_SIZE)){    XMLStreamWriter writer=startServiceDocument(outputStream);    writeEntitySets(writer);    writeSingleton(writer);    endServiceDocument(writer);    LOG.info("Successfully built service document");    return outputStream.toString();  } catch (  XMLStreamException|IOException e) {    String msg="Something went wrong when writing service document.";    LOG.error(msg,e);    throw new ODataRenderException(msg,e);  }}  }
class C{  public static Matrix33 calculateRotationMatrix(float degrees,Vector3 axis){  float cosD=MathUtil.cos(degrees * Geometry.DEGREES_TO_RADIANS);  float sinD=MathUtil.sin(degrees * Geometry.DEGREES_TO_RADIANS);  float oneMinusCosD=1f - cosD;  float x=axis.x;  float y=axis.y;  float z=axis.z;  float xs=x * sinD;  float ys=y * sinD;  float zs=z * sinD;  float xm=x * oneMinusCosD;  float ym=y * oneMinusCosD;  float zm=z * oneMinusCosD;  float xym=x * ym;  float yzm=y * zm;  float zxm=z * xm;  Matrix33 rotationMatrix=new Matrix33(x * xm + cosD,xym + zs,zxm - ys,xym - zs,y * ym + cosD,yzm + xs,zxm + ys,yzm - xs,z * zm + cosD);  return rotationMatrix;}  }
class C{  private void applyTransform(){  String value=reader.getAttributeValue(null,TRANSFORM_ATTRIBUTE);  transformations.push(currentMatrix);  currentMatrix=currentMatrix.multiply(parseTransform(value));}  }
class C{  public void close() throws IOException {  closeStartIfNecessary();  writer.close();}  }
class C{  public void process(){  header();  status();  destination();  init();  updateFileList();  fileSize();  fileSignature();}  }
class C{  public GenericValue next(){  try {    if (resultSet.next()) {      return currentGenericValue();    } else {      return null;    }  } catch (  SQLException e) {    if (!closed) {      try {        this.close();      } catch (      GenericEntityException e1) {        Debug.logError(e1,"Error auto-closing EntityListIterator on error, so info below for more info on original error; close error: " + e1.toString(),module);      }      Debug.logWarning("Warning: auto-closed EntityListIterator because of exception: " + e.toString(),module);    }    throw new GeneralRuntimeException("Error getting the next result",e);  }catch (  GenericEntityException e) {    if (!closed) {      try {        this.close();      } catch (      GenericEntityException e1) {        Debug.logError(e1,"Error auto-closing EntityListIterator on error, so info below for more info on original error; close error: " + e1.toString(),module);      }      Debug.logWarning("Warning: auto-closed EntityListIterator because of exception: " + e.toString(),module);    }    throw new GeneralRuntimeException("Error creating GenericValue",e);  }}  }
class C{  private boolean greater(int i,int j){  return comp.compare(keys[pq[i + d] + d],keys[pq[j + d] + d]) > 0;}  }
class C{  public IncompatibleRolesException(){}  }
class C{  public static long stringToTime(String dateString) throws ParseException {  return stringToDate(dateString).getTime();}  }
class C{  protected AnnotableScriptElementImpl(){  super();}  }
class C{  protected SelectedSparseDoubleMatrix2D(AbstractIntDoubleMap elements,int[] rowOffsets,int[] columnOffsets,int offset){  this(rowOffsets.length,columnOffsets.length,elements,0,0,1,1,rowOffsets,columnOffsets,offset);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public boolean canUndo(){  return content != null && content.canUndo();}  }
class C{  private static String formatCause(Throwable cause){  if (cause == null) {    return "";  }  String message=cause.getMessage();  if (message != null) {    return message;  }  return cause.toString();}  }
class C{  public RequestBuilder auth(String auth){  request.setAuth(auth);  return this;}  }
class C{  public static boolean assertHoldsLock(Object lock,boolean shouldBeHeld){  try {    if (Thread.holdsLock(lock) != shouldBeHeld) {      throwError(null);    }  } catch (  NullPointerException jrockitSucks) {    assertTrue(lock != null);  }  return true;}  }
class C{  @Override public Object copy(){  DenseInstance result=new DenseInstance(this);  result.m_Dataset=m_Dataset;  return result;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.STATE_MACHINE___ENUM_1:    return enum_1 != null && !enum_1.isEmpty();case UmplePackage.STATE_MACHINE___INLINE_STATE_MACHINE_1:  return inlineStateMachine_1 != null && !inlineStateMachine_1.isEmpty();case UmplePackage.STATE_MACHINE___REFERENCED_STATE_MACHINE_1:return referencedStateMachine_1 != null && !referencedStateMachine_1.isEmpty();case UmplePackage.STATE_MACHINE___ACTIVE_DEFINITION_1:return activeDefinition_1 != null && !activeDefinition_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public StateMachineStateConfigurer<S,E> configureStates(){  return adapter.stateBuilder;}  }
class C{  @RequestMapping(value="/stub/admin/users",method=RequestMethod.POST) public ResponseEntity<?> createUser(@RequestBody UserData userData) throws UserServiceException, UserServiceMailingException {  int responseCode=0;  fr.gael.dhus.service.UserService userService=ApplicationContextProvider.getBean(fr.gael.dhus.service.UserService.class);  System.out.println("userData: " + userData);  User user=new User();  user.setUsername(userData.getUsername());  user.generatePassword();  user.setFirstname(userData.getFirstname());  user.setLastname(userData.getLastname());  user.setAddress(userData.getAddress());  user.setEmail(userData.getEmail());  user.setPhone(userData.getPhone());  List<Role> roles=new ArrayList<Role>();  System.out.println("Roles: " + roles);  for (  RoleData role : userData.getRoles()) {    roles.add(Role.valueOf(role.name()));  }  user.setRoles(roles);  user.setCountry(userService.getCountry(Long.parseLong(userData.getCountry())).getName());  user.setUsage(userData.getUsage());  user.setSubUsage(userData.getSubUsage());  user.setDomain(userData.getDomain());  user.setSubDomain(userData.getSubDomain());  if (userData.getLockedReason() != null) {    LockedAccessRestriction lock=new LockedAccessRestriction();    if (!userData.getLockedReason().trim().isEmpty()) {      lock.setBlockingReason(userData.getLockedReason());    }    user.addRestriction(lock);  }  try {    userService.createUser(user);  } catch (  EmailNotSentException e) {    e.printStackTrace();    return new ResponseEntity<>("{\"code\":\"email_not_sent\"}",HttpStatus.INTERNAL_SERVER_ERROR);  }catch (  AccessDeniedException e) {    return new ResponseEntity<>("{\"code\":\"unauthorized\"}",HttpStatus.FORBIDDEN);  }catch (  Exception e) {    e.printStackTrace();    throw new UserServiceException(e.getMessage());  }  return new ResponseEntity<>("{\"code\":\"" + responseCode + "\"}",HttpStatus.OK);}  }
class C{  public String printShortLocaleDate(){  _date.setTime(_localTimeOfEpoch);  if (_shortDateFormat == null)   _shortDateFormat=DateFormat.getDateInstance(DateFormat.SHORT);  return _shortDateFormat.format(_date);}  }
class C{  public GitHubPullRequestList createPullRequestsList(GHPullRequest ghPullRequest) throws IOException {  GitHubPullRequestList gitHubPullRequestList=DtoFactory.getInstance().createDto(GitHubPullRequestList.class);  List<GitHubPullRequest> dtoPullRequestsList=new ArrayList<>();  dtoPullRequestsList.add(createPullRequest(ghPullRequest));  gitHubPullRequestList.setPullRequests(dtoPullRequestsList);  return gitHubPullRequestList;}  }
class C{  public static boolean isImmutableClass(Class<?> clazz){  do {    Field[] fields=clazz.getDeclaredFields();    for (    Field field : fields) {      if (Modifier.isStatic(field.getModifiers()))       continue;      if (Modifier.isTransient(field.getModifiers()))       continue;      if (!Modifier.isFinal(field.getModifiers()))       return false;      if (field.getType().isPrimitive())       continue;      if (immutableClasses.contains(field.getType()))       continue;      if (field.getType().isEnum()) {        if (isImmutable(field.getType()))         continue;      }      return false;    }    clazz=clazz.getSuperclass();  } while (!Object.class.equals(clazz));  return true;}  }
class C{  protected MimeBodyPart createDSN(Mail originalMail) throws MessagingException {  MimeBodyPart dsn=new MimeBodyPart();  StringWriter sout=new StringWriter();  PrintWriter out=new PrintWriter(sout,true);  String nameType;  nameType="dns";  try {    String myAddress=dns.getHostName(dns.getLocalHost());    out.println("Reporting-MTA: " + nameType + "; "+ myAddress);  } catch (  Exception e) {    log("WARNING: sending DSN without required Reporting-MTA Address");  }  out.println("Received-From-MTA: " + nameType + "; "+ originalMail.getRemoteHost());  for (  MailAddress rec : originalMail.getRecipients()) {    String addressType="rfc822";    out.println();    out.println("Final-Recipient: " + addressType + "; "+ rec.toString());    out.println("Action: failed");    String ex=(String)originalMail.getAttribute("delivery-error");    if (ex == null) {      ex="unknown";    }    out.println("Status: " + ex);    String diagnosticType;    String diagnosticCode=ex;    boolean smtpDiagCodeAvailable=diagPattern.matcher(diagnosticCode).matches();    if (smtpDiagCodeAvailable) {      diagnosticType="smtp";    } else {      diagnosticType="X-James";    }    out.println("Diagnostic-Code: " + diagnosticType + "; "+ diagnosticCode);    out.println("Last-Attempt-Date: " + DateFormats.RFC822_DATE_FORMAT.format(originalMail.getLastUpdated()));  }  dsn.setContent(sout.toString(),"text/plain");  dsn.setHeader("Content-Type","message/delivery-status");  dsn.setDescription("Delivery Status Notification");  dsn.setFileName("status.dat");  return dsn;}  }
class C{  public boolean equals(Object obj){  if (obj instanceof XidImpl) {    XidImpl other=(XidImpl)obj;    if (globalId.length != other.globalId.length || branchId.length != other.branchId.length)     return false;    for (int i=0; i < globalId.length; ++i)     if (globalId[i] != other.globalId[i])     return false;    for (int i=0; i < branchId.length; ++i)     if (branchId[i] != other.branchId[i])     return false;    return true;  }  return false;}  }
class C{  @Override public void process(ResponseBuilder rb) throws IOException {  SolrParams params=rb.req.getParams();  LOG.info("SuggestComponent process with : " + params);  if (!params.getBool(COMPONENT_NAME,false) || suggesters.isEmpty()) {    return;  }  boolean buildAll=params.getBool(SUGGEST_BUILD_ALL,false);  boolean reloadAll=params.getBool(SUGGEST_RELOAD_ALL,false);  Set<SolrSuggester> querySuggesters;  try {    querySuggesters=getSuggesters(params);  } catch (  SolrException ex) {    if (!buildAll && !reloadAll) {      throw ex;    } else {      querySuggesters=new HashSet<>();    }  }  String query=params.get(SUGGEST_Q);  if (query == null) {    query=rb.getQueryString();    if (query == null) {      query=params.get(CommonParams.Q);    }  }  if (query != null) {    int count=params.getInt(SUGGEST_COUNT,1);    boolean highlight=params.getBool(SUGGEST_HIGHLIGHT,false);    boolean allTermsRequired=params.getBool(SUGGEST_ALL_TERMS_REQUIRED,true);    String contextFilter=params.get(SUGGEST_CONTEXT_FILTER_QUERY);    if (contextFilter != null) {      contextFilter=contextFilter.trim();      if (contextFilter.length() == 0) {        contextFilter=null;      }    }    SuggesterOptions options=new SuggesterOptions(new CharsRef(query),count,contextFilter,allTermsRequired,highlight);    Map<String,SimpleOrderedMap<NamedList<Object>>> namedListResults=new HashMap<>();    for (    SolrSuggester suggester : querySuggesters) {      SuggesterResult suggesterResult=suggester.getSuggestions(options);      toNamedList(suggesterResult,namedListResults);    }    rb.rsp.add(SuggesterResultLabels.SUGGEST,namedListResults);  }}  }
class C{  private void deleteEntry(final SQLiteDatabase database,final String stringId){  database.delete(SongPlayCountColumns.NAME,WHERE_ID_EQUALS,new String[]{stringId});}  }
class C{  public CopyTrustedCertificateAction(KseFrame kseFrame){  super(kseFrame);  putValue(LONG_DESCRIPTION,res.getString("CopyTrustedCertificateAction.statusbar"));}  }
class C{  public CalendarIntervalScheduleBuilder withIntervalInDays(int intervalInDays){  validateInterval(intervalInDays);  this.interval=intervalInDays;  this.intervalUnit=IntervalUnit.DAY;  return this;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public final void init(KeyManager[] km,TrustManager[] tm,@Nullable SecureRandom random) throws KeyManagementException {  contextSpi.engineInit(km,tm,random);}  }
class C{  public void createPathMatcherModel(){  pathExpression=new PathExpression();  PathExpression pathExpressionRef=(PathExpression)pathExpression;  for (int i=0; i < pathMatchers.getTable().getItemCount(); i++) {    PathMatcherTerm matchers=(PathMatcherTerm)pathMatchers.getElementAt(i);    pathExpressionRef.addPathMatcher(matchers);  }}  }
class C{  public static byte[] decode(char[] in,int iOff,int iLen){  if (iLen % 4 != 0)   throw new IllegalArgumentException("Length of Base64 encoded input string is not a multiple of 4.");  while (iLen > 0 && in[iOff + iLen - 1] == '=')   iLen--;  int oLen=(iLen * 3) / 4;  byte[] out=new byte[oLen];  int ip=iOff;  int iEnd=iOff + iLen;  int op=0;  while (ip < iEnd) {    int i0=in[ip++];    int i1=in[ip++];    int i2=ip < iEnd ? in[ip++] : 'A';    int i3=ip < iEnd ? in[ip++] : 'A';    if (i0 > 127 || i1 > 127 || i2 > 127 || i3 > 127)     throw new IllegalArgumentException("Illegal character in Base64 encoded data.");    int b0=map2[i0];    int b1=map2[i1];    int b2=map2[i2];    int b3=map2[i3];    if (b0 < 0 || b1 < 0 || b2 < 0 || b3 < 0)     throw new IllegalArgumentException("Illegal character in Base64 encoded data.");    int o0=(b0 << 2) | (b1 >>> 4);    int o1=((b1 & 0xf) << 4) | (b2 >>> 2);    int o2=((b2 & 3) << 6) | b3;    out[op++]=(byte)o0;    if (op < oLen)     out[op++]=(byte)o1;    if (op < oLen)     out[op++]=(byte)o2;  }  return out;}  }
class C{  @Override protected void initData(){}  }
class C{  public SignerInfo[] verify(byte[] bytes) throws NoSuchAlgorithmException, SignatureException {  Vector<SignerInfo> intResult=new Vector<SignerInfo>();  for (int i=0; i < signerInfos.length; i++) {    SignerInfo signerInfo=verify(signerInfos[i],bytes);    if (signerInfo != null) {      intResult.addElement(signerInfo);    }  }  if (!intResult.isEmpty()) {    SignerInfo[] result=new SignerInfo[intResult.size()];    intResult.copyInto(result);    return result;  }  return null;}  }
class C{  protected void editContractSendRequest(Wallet.SendRequest req){}  }
class C{  @Override public boolean performOperation(int generation){  return true;}  }
class C{  public static void main(String[] args) throws IOException {  boolean enableOutput=true;  boolean outputToFile=false;  String inputFolder=IqrRs.class.getClassLoader().getResource("workload/planetlab").getPath();  String outputFolder="output";  String workload="20110303";  String vmAllocationPolicy="iqr";  String vmSelectionPolicy="rs";  String parameter="1.5";  new PlanetLabRunner(enableOutput,outputToFile,inputFolder,outputFolder,workload,vmAllocationPolicy,vmSelectionPolicy,parameter);}  }
class C{  public static int compareInt(int a,int b){  return a == b ? 0 : a < b ? -1 : 1;}  }
class C{  public static int asInteger(Object objArg){  Object obj=asAbstractVector(objArg);  if (obj instanceof RAbstractIntVector) {    return ((RAbstractIntVector)obj).getDataAt(0);  } else   if (obj instanceof RAbstractDoubleVector) {    return double2int(((RAbstractDoubleVector)obj).getDataAt(0));  } else   if (obj instanceof RAbstractLogicalVector) {    return logical2int(((RAbstractLogicalVector)obj).getDataAt(0));  } else   if (obj instanceof RAbstractComplexVector) {    return complex2int(((RAbstractComplexVector)obj).getDataAt(0));  } else   if (obj instanceof RAbstractStringVector) {    return string2int(((RAbstractStringVector)obj).getDataAt(0));  } else {    return INT_NA;  }}  }
class C{  public boolean canTraverseOutsideSubtree(){  return m_xpath.getExpression().canTraverseOutsideSubtree();}  }
class C{  public Map<String,String> removeZonesStrategy(MDSDialog dialog,List<Zone> zones,Integer vsanId,boolean activateZones) throws NetworkDeviceControllerException {  waitForSession(dialog,vsanId);  Long time=System.currentTimeMillis();  Map<String,String> removedZoneNames=new HashMap<String,String>();  Zoneset activeZoneset=getActiveZoneset(dialog,vsanId);  if (activeZoneset == null) {    String defaultZonesetName=getDefaultZonesetName(vsanId.toString());    _log.warn("No active/default zoneset found: " + defaultZonesetName);    throw NetworkDeviceControllerException.exceptions.noActiveZonesetForFabric(vsanId.toString());  }  Integer[] remainingZones=new Integer[1];  List<Zone> zonesToBeDeleted=getZonesToBeDeleted(zones,activeZoneset.getZones(),remainingZones,removedZoneNames);  if (zonesToBeDeleted.isEmpty()) {    return removedZoneNames;  }  try {    dialog.config();    zonesetClone(dialog,vsanId,activeZoneset);    dialog.zonesetNameVsan(activeZoneset.getName(),vsanId,false);    for (    Zone zone : zonesToBeDeleted) {      String zoneName=zone.getName();      _log.info("Removing zone: " + zoneName + "zoneset: "+ activeZoneset.getName()+ "vsan: "+ vsanId);      try {        dialog.zonesetMember(zone.getName(),true);        removedZoneNames.put(zoneName,SUCCESS);      } catch (      Exception ex) {        removedZoneNames.put(zoneName,ERROR + " : " + ex.getMessage());        handleZonesStrategyException(ex,activateZones);      }    }    _log.info("going back to config prompt");    dialog.exitToConfig();    if (activateZones) {      dialog.zonesetActivate(activeZoneset.getName(),vsanId,((remainingZones[0] == 0) ? true : false));    }    if (dialog.isInSession()) {      dialog.zoneCommit(vsanId);      dialog.waitForZoneCommit(vsanId);    }    dialog.copyRunningConfigToStartupFabric();    dialog.endConfig();    time=System.currentTimeMillis() - time;    _log.info("Zone remove time (msec): " + time.toString());    return removedZoneNames;  } catch (  Exception ex) {    throw NetworkDeviceControllerException.exceptions.removeZonesStrategyFailed(ex);  } finally {    safeExitSession(dialog,vsanId);  }}  }
class C{  public void dispose(){  executor.shutdown();  quadTreeCache.dispose();  quadTreeCache=null;}  }
class C{  public final boolean canSetString(String field){  Column col=getColumn(field);  return (col == null ? false : col.canSetString());}  }
class C{  public final void handleDownloads(String file){  Log.i(TAG,"Download completed " + file);  final String[] filenameArray=file.split("\\.");  final String extension="." + filenameArray[filenameArray.length - 1];  file=file.replace("file://","");  if (extension.equals(org.openbmap.Preferences.CATALOG_FILE_EXTENSION)) {    mCurrentCatalogDownloadId=-1;    if (file.contains(SettingsActivity.this.getExternalCacheDir().getPath())) {      Log.i(TAG,"Moving file to " + getCatalogFolder().getAbsolutePath());      file=moveToFolder(file,getCatalogFolder().getAbsolutePath());    }    String version=new SimpleDateFormat("yyyy-MM-dd").format(new Date());    setLocalCatalogVersion(version);    initActiveCatalogControl();    activateWifiCatalog(file);  }}  }
class C{  void removeParserHighlight(Object tag){  removeListHighlight(parserHighlights,tag);}  }
class C{  public boolean produces(final EvolutionState state,final Population newpop,final int subpopulation,final int thread){  if (!super.produces(state,newpop,subpopulation,thread))   return false;  if (newpop.subpops[subpopulation].species instanceof GEPSpecies)   return true;  return false;}  }
class C{  public static String[][] doubleMatrixToStringMatrix(final double[][] matrix){  String[][] ret=new String[matrix.length][matrix[0].length];  for (int i=0; i < matrix.length; i++) {    ret[i]=doubleArrayToStringArray(matrix[i]);  }  return ret;}  }
class C{  public static boolean testCircleCircle(Vector2fc centerA,float radiusSquaredA,Vector2fc centerB,float radiusSquaredB){  return testCircleCircle(centerA.x(),centerA.y(),radiusSquaredA,centerB.x(),centerB.y(),radiusSquaredB);}  }
class C{  public static Dcs cs_load(String fileName){  int i, j;  double x;  Dcs T;  BufferedReader in;  try {    in=new BufferedReader(new FileReader(fileName));  } catch (  FileNotFoundException e1) {    return (null);  }  T=Dcs_util.cs_spalloc(0,0,1,true,true);  String line;  try {    while ((line=in.readLine()) != null) {      String[] tokens=line.trim().split("\\s+");      if (tokens.length != 3) {        return null;      }      i=Integer.parseInt(tokens[0]);      j=Integer.parseInt(tokens[1]);      x=Double.parseDouble(tokens[2]);      if (!Dcs_entry.cs_entry(T,i,j,x))       return (null);    }  } catch (  IOException e) {    return (null);  }  return (T);}  }
class C{  public boolean isAutoCreated(){  return autoCreated;}  }
class C{  protected void draw(Graphics g,LinkedList<Point2D> points){  if (decorations.isEmpty())   throw new NullPointerException("No decorations");  Iterator<ShapeDecoration> decorationIterator=decorations.listIterator();  LinkedList<Point2D> polysegment=new LinkedList<Point2D>();  Point2D[] point2DArrayType=new Point2D.Double[1];  while (!points.isEmpty()) {    if (!decorationIterator.hasNext()) {      decorationIterator=decorations.listIterator();    }    ShapeDecoration decor=decorationIterator.next();    boolean complete=LineUtil.retrievePoints(decor.getLength(),points,polysegment);    decor.draw(g,(Point2D[])polysegment.toArray(point2DArrayType),complete);  }}  }
class C{  @Override public int hashCode(){  int hash=7;  hash=41 * hash + (this.privateFlag ? 1 : 0);  hash=41 * hash + (this.privateFields != null ? this.privateFields.hashCode() : 0);  hash=41 * hash + (this.noCache ? 1 : 0);  hash=41 * hash + (this.noCacheFields != null ? this.noCacheFields.hashCode() : 0);  hash=41 * hash + (this.noStore ? 1 : 0);  hash=41 * hash + (this.noTransform ? 1 : 0);  hash=41 * hash + (this.mustRevalidate ? 1 : 0);  hash=41 * hash + (this.proxyRevalidate ? 1 : 0);  hash=41 * hash + this.maxAge;  hash=41 * hash + this.sMaxAge;  hash=41 * hash + (this.cacheExtension != null ? this.cacheExtension.hashCode() : 0);  hash=31 * hash + (this.publicFlag ? 1231 : 1237);  return hash;}  }
class C{  public AlchemyDataNews(String apiKey){  super(apiKey);}  }
class C{  protected Word_Impl(){  super();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private Object readResolve(){  return iChronology.yearOfEra();}  }
class C{  private static IMultiPoint[] randomPoints(int n,int d,int scale){  IMultiPoint points[]=new IMultiPoint[n];  for (int i=0; i < n; i++) {    StringBuilder sb=new StringBuilder();    for (int j=0; j < d; j++) {      sb.append(rGen.nextDouble() * scale);      if (j < d - 1) {        sb.append(",");      }    }    points[i]=new Hyperpoint(sb.toString());  }  return points;}  }
class C{  @SuppressWarnings("deprecation") private void initToolbar(Context context,OptionView option){  toolbar=(Toolbar)findViewById(R.id.toolbar);  toolbar.setTitle(titleAttr);  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {    if (colorTitleAttr == 0) {      toolbar.setTitleTextColor(ContextCompat.getColor(context,option.getColorTitle()));    } else {      toolbar.setTitleTextColor(colorTitleAttr);    }    if (colorToolbarAttr == 0) {      toolbar.setBackgroundColor((ContextCompat.getColor(context,option.getColorToolbar())));    } else {      toolbar.setBackgroundColor(colorToolbarAttr);    }  } else {    if (colorTitleAttr == 0) {      toolbar.setTitleTextColor(getResources().getColor(option.getColorTitle()));    } else {      toolbar.setTitleTextColor(colorTitleAttr);    }    if (colorToolbarAttr == 0) {      toolbar.setBackgroundColor(getResources().getColor(option.getColorToolbar()));    } else {      toolbar.setBackgroundColor(colorToolbarAttr);    }  }  if (option.isMenuItem()) {    toolbar.getMenu().clear();    toolbar.inflateMenu(option.getMenuItem());    toolbar.setOnMenuItemClickListener(option.getToolbarListener());  }  if (option.isAutoAnimation()) {    toolbar.setOnClickListener(this);  } else {    toolbar.setOnClickListener(null);  }}  }
class C{  protected JViewport createViewport(){  return new JViewport();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdataindexsizeerrsubstringcountnegative.class,args);}  }
class C{  public static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException {  return encodeObject(serializableObject,NO_OPTIONS);}  }
class C{  public void turnOn(){  on=true;}  }
class C{  public boolean rejectIt(){  log.info("rejectIt - " + toString());  return true;}  }
class C{  public static boolean intersectCircleCircle(float aX,float aY,float radiusSquaredA,float bX,float bY,float radiusSquaredB,Vector3f intersectionCenterAndHL){  float dX=bX - aX, dY=bY - aY;  float distSquared=dX * dX + dY * dY;  float h=0.5f + (radiusSquaredA - radiusSquaredB) / distSquared;  float r_i=(float)Math.sqrt(radiusSquaredA - h * h * distSquared);  if (r_i >= 0.0f) {    intersectionCenterAndHL.x=aX + h * dX;    intersectionCenterAndHL.y=aY + h * dY;    intersectionCenterAndHL.z=r_i;    return true;  }  return false;}  }
class C{  protected static void fatal(String msg,Throwable t,int exitCode){  printlnerr(msg);  if (t != null)   t.printStackTrace();  fail(exitCode);}  }
class C{  public static void i(String tag,String message){  if (DEBUG_ON) {    Log.i(tag,message);  }}  }
class C{  public static UpdateUsers parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  UpdateUsers object=new UpdateUsers();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"updateUsers".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (UpdateUsers)org.oscm.xsd.ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    java.util.ArrayList list2=new java.util.ArrayList();    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","instanceId").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setInstanceId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","users").equals(reader.getName())) {      list2.add(org.oscm.xsd.User.Factory.parse(reader));      boolean loopDone2=false;      while (!loopDone2) {        while (!reader.isEndElement())         reader.next();        reader.next();        while (!reader.isStartElement() && !reader.isEndElement())         reader.next();        if (reader.isEndElement()) {          loopDone2=true;        } else {          if (new javax.xml.namespace.QName("","users").equals(reader.getName())) {            list2.add(org.oscm.xsd.User.Factory.parse(reader));          } else {            loopDone2=true;          }        }      }      object.setUsers((org.oscm.xsd.User[])org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(org.oscm.xsd.User.class,list2));    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","requestingUser").equals(reader.getName())) {      object.setRequestingUser(org.oscm.xsd.User.Factory.parse(reader));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement())     throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  private void decode(byte[] data,int width,int height){  long start=System.currentTimeMillis();  Result rawResult=null;  byte[] rotatedData=new byte[data.length];  for (int y=0; y < height; y++) {    for (int x=0; x < width; x++)     rotatedData[x * height + height - y - 1]=data[x + y * width];  }  int tmp=width;  width=height;  height=tmp;  PlanarYUVLuminanceSource source=activity.getCameraManager().buildLuminanceSource(rotatedData,width,height);  if (source != null) {    BinaryBitmap bitmap=new BinaryBitmap(new HybridBinarizer(source));    try {      rawResult=multiFormatReader.decodeWithState(bitmap);    } catch (    ReaderException re) {    } finally {      multiFormatReader.reset();    }  }  Handler handler=activity.getHandler();  if (rawResult != null) {    long end=System.currentTimeMillis();    Log.d(TAG,"Found barcode in " + (end - start) + " ms");    if (handler != null) {      Message message=Message.obtain(handler,R.id.decode_succeeded,rawResult);      Bundle bundle=new Bundle();      bundleThumbnail(source,bundle);      message.setData(bundle);      message.sendToTarget();    }  } else {    if (handler != null) {      Message message=Message.obtain(handler,R.id.decode_failed);      message.sendToTarget();    }  }}  }
class C{  public boolean isFastShareEnabled(){  return fastShareEnabled;}  }
class C{  public SharedAuthenticatedUser(AuthenticationProvider authenticationProvider,Credentials credentials,String shareKey){  super(authenticationProvider,credentials);  this.shareKey=shareKey;  this.identifier=AuthenticatedUser.ANONYMOUS_IDENTIFIER;}  }
class C{  private void updateNotificationsNodeLabel(DefaultMutableTreeNode node,String label){synchronized (mbeansTab.getTree()) {    invalidate();    XNodeInfo oldUserObject=(XNodeInfo)node.getUserObject();    XNodeInfo newUserObject=new XNodeInfo(oldUserObject.getType(),oldUserObject.getData(),label,oldUserObject.getToolTipText());    node.setUserObject(newUserObject);    DefaultTreeModel model=(DefaultTreeModel)mbeansTab.getTree().getModel();    model.nodeChanged(node);    validate();    repaint();  }}  }
class C{  public void requestThrottleSetup(LocoAddress address,boolean control){  XpaThrottle throttle=new XpaThrottle(address,tc);  notifyThrottleKnown(throttle,address);}  }
class C{  public Builder edgeKeyTypes(final Map<String,String> edgeKeyTypes){  this.edgeKeyTypes=edgeKeyTypes;  return this;}  }
class C{  public static ImageIcon createImageIcon(int width,int height,int imageType){  return new ImageIcon(new BufferedImage(width,height,imageType));}  }
class C{  public void renameAttributeAt(int columnIndex,String newName){  if ((columnIndex > 0) && (columnIndex < getColumnCount())) {    addUndoPoint();    m_Data.renameAttribute(columnIndex - 1,newName);    notifyListener(new TableModelEvent(this,TableModelEvent.HEADER_ROW));  }}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("CLogConsole[");  sb.append("Level=").append(getLevel()).append("]");  return sb.toString();}  }
class C{  public void excluir(int idLocal){  try {    String sql="DELETE FROM tb_local WHERE id_local=?";    stm=conector.prepareStatement(sql);    stm.setInt(1,idLocal);    stm.execute();    stm.close();  } catch (  SQLException ex) {    Mensagem.erro("Erro ao excluir local na base de dados! \n" + ex);  }}  }
class C{  public RegExpFromFileTest(String name){  super(name);}  }
class C{  private void markSubroutines(){  BitSet anyvisited=new BitSet();  markSubroutineWalk(mainSubroutine,0,anyvisited);  for (Iterator<Map.Entry<LabelNode,BitSet>> it=subroutineHeads.entrySet().iterator(); it.hasNext(); ) {    Map.Entry<LabelNode,BitSet> entry=it.next();    LabelNode lab=entry.getKey();    BitSet sub=entry.getValue();    int index=instructions.indexOf(lab);    markSubroutineWalk(sub,index,anyvisited);  }}  }
class C{  public static CCMoveBy action(float duration,CGPoint pos){  return new CCMoveBy(duration,pos);}  }
class C{  public synchronized void ensureCapacity(int minimumCapacity){  if (elementData.length < minimumCapacity) {    int next=(capacityIncrement <= 0 ? elementData.length : capacityIncrement) + elementData.length;    grow(minimumCapacity > next ? minimumCapacity : next);  }}  }
class C{  public static double cdf(double x,double mu,double sigma){  if (x <= 0.) {    return 0.;  }  return .5 * (1 + NormalDistribution.erf((Math.log(x) - mu) / (MathUtil.SQRT2 * sigma)));}  }
class C{  public void cancel(){  this.handler.cancel();}  }
class C{  @SuppressWarnings("unchecked") public synchronized List<Vertex> findAll(int pageSize,int page){  if (isShortTerm()) {    return allActive();  }  Query query=this.entityManager.createQuery("Select v from Vertex v");  setHints(query);  query.setFirstResult(page * pageSize);  query.setMaxResults(pageSize);  return query.getResultList();}  }
class C{  @Override public final int readInt() throws IOException {  d.readFully(w,0,4);  return (w[3]) << 24 | (w[2] & 0xff) << 16 | (w[1] & 0xff) << 8 | (w[0] & 0xff);}  }
class C{  private final ResultSetRow unpackBinaryResultSetRow(Field[] fields,Buffer binaryData,int resultSetConcurrency) throws SQLException {  int numFields=fields.length;  byte[][] unpackedRowData=new byte[numFields][];  int nullCount=(numFields + 9) / 8;  int nullMaskPos=binaryData.getPosition();  binaryData.setPosition(nullMaskPos + nullCount);  int bit=4;  for (int i=0; i < numFields; i++) {    if ((binaryData.readByte(nullMaskPos) & bit) != 0) {      unpackedRowData[i]=null;    } else {      if (resultSetConcurrency != ResultSet.CONCUR_UPDATABLE) {        extractNativeEncodedColumn(binaryData,fields,i,unpackedRowData);      } else {        unpackNativeEncodedColumn(binaryData,fields,i,unpackedRowData);      }    }    if (((bit<<=1) & 255) == 0) {      bit=1;      nullMaskPos++;    }  }  return new ByteArrayRow(unpackedRowData,getExceptionInterceptor());}  }
class C{  public static byte[] decode(byte[] source,int off,int len) throws Base64DecoderException {  return decode(source,off,len,DECODABET);}  }
class C{  public void insertNewContacts(Dao<AddressBook,Integer> addressBookDao,Dao<Contact,Integer> contactDao) throws SQLException {  if (this.nonDaoContacts == null) {    return;  }  addressBookDao.assignEmptyForeignCollection(this,"contacts");  for (  Contact contact : nonDaoContacts) {    contact.setAddressBook(this);    contactDao.create(contact);    contacts.add(contact);  }}  }
class C{  public Barbecue(Barcode barcode,boolean showDrawingText){  m_barcode=barcode;  m_barcode.setDrawingText(showDrawingText);}  }
class C{  public char next(){  if (nextOffset >= 0 && nextOffset < nextFencePost) {    char current=peek();    offset=nextOffset;    nextOffset++;    findNextCharacter();    return current;  } else {    return 0;  }}  }
class C{  public SortedListModel(){  super();  set=new TreeSet<T>();}  }
class C{  public static String toJson(Map<String,String> map){  if (map == null || map.size() == 0) {    return null;  }  StringBuilder paras=new StringBuilder();  paras.append("{");  Iterator<Map.Entry<String,String>> ite=map.entrySet().iterator();  while (ite.hasNext()) {    Map.Entry<String,String> entry=(Map.Entry<String,String>)ite.next();    paras.append("\"").append(entry.getKey()).append("\":\"").append(entry.getValue()).append("\"");    if (ite.hasNext()) {      paras.append(",");    }  }  paras.append("}");  return paras.toString();}  }
class C{  public static char[] encode(byte[] in,int iOff,int iLen){  int oDataLen=(iLen * 4 + 2) / 3;  int oLen=((iLen + 2) / 3) * 4;  char[] out=new char[oLen];  int ip=iOff;  int iEnd=iOff + iLen;  int op=0;  while (ip < iEnd) {    int i0=in[ip++] & 0xff;    int i1=ip < iEnd ? in[ip++] & 0xff : 0;    int i2=ip < iEnd ? in[ip++] & 0xff : 0;    int o0=i0 >>> 2;    int o1=((i0 & 3) << 4) | (i1 >>> 4);    int o2=((i1 & 0xf) << 2) | (i2 >>> 6);    int o3=i2 & 0x3F;    out[op++]=map1[o0];    out[op++]=map1[o1];    out[op]=op < oDataLen ? map1[o2] : '=';    op++;    out[op]=op < oDataLen ? map1[o3] : '=';    op++;  }  return out;}  }
class C{  protected String resolvePrefix(SerializationHandler rhandler,String prefix,String nodeNamespace) throws TransformerException {  return prefix;}  }
class C{  public static InputStream createGzipInputStream(InputStream in,int size) throws IOException {  return sOverrideGzip ? new WorkingGzipInputStream(in,size) : new GZIPInputStream(in,size);}  }
class C{  protected void checkValid() throws URIException {  if (!(equals(_scheme,DEFAULT_SCHEME) || _scheme == null)) {    throw new URIException(URIException.PARSING,"wrong class use");  }}  }
class C{  @Override public boolean equals(Object obj){  if (obj == null) {    return false;  }  if (obj == this) {    return true;  }  if (obj instanceof MatrixSeriesCollection) {    MatrixSeriesCollection c=(MatrixSeriesCollection)obj;    return ObjectUtilities.equal(this.seriesList,c.seriesList);  }  return false;}  }
class C{  static Action createActionInCallingWindow(Object obj,final String args[],String name,Icon icon){  java.lang.reflect.Method method=null;  try {    method=obj.getClass().getDeclaredMethod("remoteCalls",String[].class);  } catch (  java.lang.NullPointerException e) {    log.error("Null object passed");    return createEmptyMenuItem(icon,name);  }catch (  SecurityException e) {    log.error("security exception unable to find remoteCalls for " + obj.getClass().getName());    createEmptyMenuItem(icon,name);  }catch (  NoSuchMethodException e) {    log.error("No such method remoteCalls for " + obj.getClass().getName());    return createEmptyMenuItem(icon,name);  }  CallingAbstractAction act=new CallingAbstractAction(name,icon);  act.setMethod(method);  act.setArgs(args);  act.setObject(obj);  act.setEnabled(true);  return act;}  }
class C{  public void createTestDb(){  createDb();}  }
class C{  @Override public RunOptionsBuilder withMemorySize(int memorySize){  this.memorySize=memorySize;  return this;}  }
class C{  public NewPhplikeResourceAction(String title,String description,SVGResource svgIcon,DialogFactory dialogFactory,CoreLocalizationConstant coreLocalizationConstant,EventBus eventBus,AppContext appContext,NotificationManager notificationManager){  super(title,description,svgIcon,dialogFactory,coreLocalizationConstant,eventBus,appContext,notificationManager);  this.appContext=appContext;}  }
class C{  private DeferredResult<String> fetchDocument(String documentLink){  Operation getDocument=Operation.createGet(this,documentLink);  return this.sendWithDeferredResult(getDocument).thenApply(this.contentsMapper);}  }
class C{  public T caseSymbolTableEntryInternal(SymbolTableEntryInternal object){  return null;}  }
class C{  public static <T>boolean put(String key,T value){  return hawkFacade.put(key,value);}  }
class C{  public boolean hasAnnotatedBusiness(){  List bus=this.rootDoc.selectNodes("a-business");  return !bus.isEmpty();}  }
class C{  public static QDate createLocal(){  return new QDate(true);}  }
class C{  @SuppressWarnings("unchecked") private boolean isInputSet(){  List<Object> input=(List<Object>)getTreeViewer().getInput();  if ((input == null) || input.isEmpty()) {    return false;  }  return true;}  }
class C{  @Override public boolean addOutputTurnout(String turnoutName,int turnoutState){  OutputTurnout outputTurnout=new OutputTurnout(turnoutName);  if (!outputTurnout.setState(turnoutState)) {    return false;  }  _outputTurnoutList.add(outputTurnout);  return true;}  }
class C{  protected void checkStatistics(String expr,double stats){  m_Filter=getFilter(expr);  Instances result=useFilter();  assertEquals(m_Instances.numAttributes(),result.numAttributes());  assertEquals(m_Instances.numInstances(),result.numInstances());  boolean equal=true;  for (int i=0; i < result.numInstances(); i++) {    if (!Utils.eq(stats,result.instance(i).value(m_AttIndex))) {      equal=false;      break;    }  }  if (!equal)   fail("Filter and Attribute statistics differ ('" + expr + "')!");}  }
class C{  public static KVManger init(SQLiteDatabase database){  if (instance == null) {synchronized (KVManger.class) {      if (instance == null) {        instance=new KVManagerImpl(database);      }    }  }  return instance;}  }
class C{  private void expandAllNodes(JTree tree,TreePath parentPath){  TreeNode node=(TreeNode)parentPath.getLastPathComponent();  for (int i=0; i < node.getChildCount(); i++) {    expandAllNodes(tree,parentPath.pathByAddingChild(node.getChildAt(i)));  }  tree.expandPath(parentPath);}  }
class C{  static public void assertEquals(String message,float expected,float actual,float delta){  if (Float.isInfinite(expected)) {    if (!(expected == actual))     failNotEquals(message,new Float(expected),new Float(actual));  } else   if (!(Math.abs(expected - actual) <= delta))   failNotEquals(message,new Float(expected),new Float(actual));}  }
class C{  public String dropCar(Car car,boolean isManifest,boolean isTwoColumnTrack){  StringBuffer buf=new StringBuffer();  String[] format;  if (isManifest && !isTwoColumnTrack) {    format=Setup.getDropManifestMessageFormat();  } else   if (!isManifest && !isTwoColumnTrack) {    format=Setup.getDropSwitchListMessageFormat();  } else   if (isManifest && isTwoColumnTrack) {    format=Setup.getDropTwoColumnByTrackManifestMessageFormat();  } else {    format=Setup.getDropTwoColumnByTrackSwitchListMessageFormat();  }  boolean local=false;  if (car.getTrack() == null) {    local=true;  }  for (  String attribute : format) {    String s=getCarAttribute(car,attribute,!PICKUP,local);    buf.append(s);  }  return buf.toString();}  }
class C{  @Override public void updateNClob(String columnLabel,Reader x,long length) throws SQLException {  updateClob(columnLabel,x,length);}  }
class C{  public UniversalMembershipListenerAdapter(){  this(DEFAULT_HISTORY_SIZE);}  }
class C{  default Traversable<T> skipLast(final int num){  return traversable().skipLast(num);}  }
class C{  public boolean delete(String id){  if (!tenants.containsKey(id)) {    logger.debug("TenantManager: Tenant '" + id + "' not found, can not delete");    return false;  }  Timer.Context tim=DropwizardHelper.getTimerContext("tenants." + id + ".delete");  tenants.remove(id);  tim.close();  return true;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  stack.getUIMgr().getModuleGroup().removeWidget(getWidget(stack));  return null;}  }
class C{  public javax2.sip.address.TelURL createTelURL(String uri) throws ParseException {  if (uri == null)   throw new NullPointerException("null url");  String telUrl="tel:" + uri;  try {    StringMsgParser smp=new StringMsgParser();    TelURLImpl timp=(TelURLImpl)smp.parseUrl(telUrl);    return (TelURL)timp;  } catch (  ParseException ex) {    throw new ParseException(ex.getMessage(),0);  }}  }
class C{  public static BufferedImage createCompatibleImage(BufferedImage image,int width,int height){  return getGraphicsConfiguration().createCompatibleImage(width,height,image.getTransparency());}  }
class C{  public void cancel(){  cancel=true;}  }
class C{  public static File zip(File dir,String dest){  File zippedFile=new File(dest + "/" + dir.getName()+ ".zip");  zipTo(dir,zippedFile);  return zippedFile;}  }
class C{  public static ComponentUI createUI(JComponent c){  return new BETableUI();}  }
class C{  void startScanEFeatures(){  eFeatureIdx=0;}  }
class C{  public <Result,Progress>Promise<MultipleResult<Result,Progress>,Progress> afterAll(Collection<Promise<Result,Progress>> promises){  return new AfterAllPromise<>(this,promises);}  }
class C{  public Decision decision(Decision decision,String deciderLabel,String reason,Object... params){  if (debugDecision()) {    return Decision.single(decision.type(),deciderLabel,reason,params);  } else {    return decision;  }}  }
class C{  public static void main(String[] args){  MosesFormatReader reader=new MosesFormatReader();  for (  String line : new LineReader(System.in)) {    Rule rule=reader.parseLine(line);    System.out.println(rule.textFormat());  }}  }
class C{  public void callback(int event,Bundle b){  b.putInt("event",event);  for (int i=0; i < mEventHandler.size(); i++) {    Message msg=Message.obtain();    msg.setData(b);    mEventHandler.get(i).sendMessage(msg);  }}  }
class C{  public static void checkRemoveOK(Resource resource) throws IOException {  if (!resource.exists())   throw new IOException("can't delete resource " + resource + ", resource does not exist");  if (!resource.canWrite())   throw new IOException("can't delete resource " + resource + ", no access");}  }
class C{  public void startPrefixMapping(String prefix,String uri) throws org.xml.sax.SAXException {}  }
class C{  public CEventValueTable(final CEventValueTableModel model){  super(model);  m_model=model;  setRowSorter(new TableRowSorter<CEventValueTableModel>(model));  setFont(GuiHelper.MONOSPACED_FONT);}  }
class C{  private void addListeners(final IDebugger debugger){  debugger.getProcessManager().addListener(m_processListener);  debugger.getBreakpointManager().addListener(m_breakpointManagerListener);  debugger.addListener(m_debugEventListener);}  }
class C{  protected boolean isBlacklistedRecipient(MailAddress recipient){  return getBlacklist().contains(recipient);}  }
class C{  public static void launchFile(File file){  try {    Launcher.launchFile(file);  } catch (  SecurityException se) {    showError(I18n.tr("FrostWire will not launch the specified file for security reasons."));  }catch (  LaunchException e) {    GUIMediator.showError(I18n.tr("FrostWire could not launch the specified file.\n\nExecuted command: {0}.",StringUtils.explode(e.getCommand()," ")));  }catch (  IOException e) {    showError(I18n.tr("FrostWire could not launch the specified file."));  }}  }
class C{  @Override protected Lock createLock(){  return new Lock(DEFAULT_NAME);}  }
class C{  public JSONObject(Object bean){  this();  this.populateMap(bean);}  }
class C{  public boolean containsKey(final K k){  final WeakReference<V> ref=map.get(k);  if (ref != null) {    final V v=ref.get();    if (v != null) {      queue.add(v);      return true;    }  }  return false;}  }
class C{  public SnmpGenericObjectServer(MBeanServer server){  this.server=server;}  }
class C{  protected int[] readColorTable(int ncolors){  int nbytes=3 * ncolors;  int[] tab=null;  byte[] c=new byte[nbytes];  int n=0;  try {    n=in.read(c);  } catch (  IOException e) {  }  if (n < nbytes) {    status=STATUS_FORMAT_ERROR;  } else {    tab=new int[256];    int i=0;    int j=0;    while (i < ncolors) {      int r=((int)c[j++]) & 0xff;      int g=((int)c[j++]) & 0xff;      int b=((int)c[j++]) & 0xff;      tab[i++]=0xff000000 | (r << 16) | (g << 8)| b;    }  }  return tab;}  }
class C{  private String convertLessThanOneMillion(int number){  String soFar=new String();  System.out.println("[convertLessThanOneMillion] number = " + number);  if (number != 0) {    soFar=numNames[number % 10];    if (number != 1 && soFar.equals("\u0e2b\u0e19\u0e36\u0e48\u0e07")) {      soFar="\u0e40\u0e2d\u0e47\u0e14";    }    number/=10;    soFar=tensNames[number % 10] + soFar;    number/=10;    soFar=hundredNames[number % 10] + soFar;    number/=10;    soFar=thousandNames[number % 10] + soFar;    number/=10;    soFar=tenThousandNames[number % 10] + soFar;    number/=10;    soFar=hundredThousandNames[number % 10] + soFar;    number/=10;  }  if (number == 0) {    return soFar;  }  return numNames[number] + "\u0e23\u0e49\u0e2d\u0e22\u0e25\u0e49\u0e32\u0e19" + soFar;}  }
class C{  @Override protected void appendFields(StringBuffer buff){  super.appendFields(buff);  buff.append("; key=").append(getKey());  buff.append("; op=").append(this.op);  if (eventId != null) {    buff.append("; eventId=").append(eventId);  }  if (this.versionTag != null) {    buff.append("; version=").append(this.versionTag);  }}  }
class C{  public void unsetComms(){  this.socket=null;  this.sockCh=null;  this.is=null;  this.os=null;  this.cachedCommBuffer=null;  this.msgStats=null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:11.741 -0500",hash_original_method="ABC17F5FB7BD95EF5278D9B937F06D5F",hash_generated_method="783A8969227B068302CF8EEB89CF506B") public void addProductToken(String pt){  productTokens.add(pt);}  }
class C{  @Override public boolean isReadOnly(int columnIndex){  return true;}  }
class C{  public GeneralAlgorithmRunner(DataWrapper dataWrapper,GeneralAlgorithmRunner runner,Parameters parameters,KnowledgeBoxModel knowledgeBoxModel){  this(dataWrapper,null,parameters,knowledgeBoxModel,null);  this.algorithm=runner.algorithm;}  }
class C{  private void completeWorkflowState(String token,String operation,BiosCommandResult result){  if (Operation.Status.valueOf(result.getCommandStatus()).equals(Operation.Status.ready)) {    WorkflowStepCompleter.stepSucceded(token);  } else   if (Operation.Status.valueOf(result.getCommandStatus()).equals(Operation.Status.error)) {    ServiceError svcError=NetworkDeviceControllerException.errors.zoneOperationFailed(operation,result.getMessage());    WorkflowStepCompleter.stepFailed(token,svcError);  }}  }
class C{  public MPrintFormatItem copyToClient(int To_Client_ID,int AD_PrintFormat_ID){  MPrintFormatItem to=new MPrintFormatItem(p_ctx,0,null);  MPrintFormatItem.copyValues(this,to);  to.setClientOrg(To_Client_ID,0);  to.setAD_PrintFormat_ID(AD_PrintFormat_ID);  to.saveEx();  if (to.getAD_PrintFormatChild_ID() > 0 && to.getPrintFormatType().equals(MPrintFormatItem.PRINTFORMATTYPE_PrintFormat)) {    MPrintFormat child=(MPrintFormat)to.getAD_PrintFormatChild();    if (child != null) {      MPrintFormat childCopy=MPrintFormat.copyToClient(p_ctx,to.getAD_PrintFormatChild_ID(),To_Client_ID);      to.setAD_PrintFormatChild_ID(childCopy.getAD_PrintFormat_ID());      to.saveEx();    }  }  return to;}  }
class C{  private JSONObject readObject() throws JSONException {  JSONObject result=new JSONObject();  int first=nextCleanInternal();  if (first == '}') {    return result;  } else   if (first != -1) {    pos--;  }  while (true) {    Object name=nextValue();    if (!(name instanceof String)) {      if (name == null) {        throw syntaxError("Names cannot be null");      } else {        throw syntaxError("Names must be strings, but " + name + " is of type "+ name.getClass().getName());      }    }    int separator=nextCleanInternal();    if (separator != ':' && separator != '=') {      throw syntaxError("Expected ':' after " + name);    }    if (pos < in.length() && in.charAt(pos) == '>') {      pos++;    }    result.put((String)name,nextValue());switch (nextCleanInternal()) {case '}':      return result;case ';':case ',':    continue;default :  throw syntaxError("Unterminated object");}}}  }
class C{  public DateTimeFormatterBuilder appendHalfdayOfDayText(){  return appendText(DateTimeFieldType.halfdayOfDay());}  }
class C{  @GridifySetToValue(gridName="GridifySetToValueTarget",threshold=2) @Override public Long findMaximumWithoutSplitSize(Collection<Long> input){  return findMaximum0(input);}  }
class C{  public ReverseDFSenumerateByFinish(Graph net){  super(net);}  }
class C{  @SuppressWarnings("unused") @Test public void testStateReaction_WithEntryAction(){  SimpleFlatTSC tsc=new SimpleFlatTSC();  VariableDefinition v1=_createVariableDefinition("v1",TYPE_INTEGER,tsc.s_scope);  LocalReaction entryAction=_createEntryAction(tsc.s2);  AssignmentExpression assign=_createVariableAssignment(v1,AssignmentOperator.ASSIGN,_createValue(21),(ReactionEffect)entryAction.getEffect());  ExecutionFlow flow=sequencer.transform(tsc.sc);  ExecutionState _s1=flow.getStates().get(0);  ExecutionState _s2=flow.getStates().get(1);  assertEquals(tsc.s1.getName(),_s1.getSimpleName());  assertEquals(tsc.s2.getName(),_s2.getSimpleName());  assertEquals(1,_s1.getReactions().size());  Reaction reaction=_s1.getReactions().get(0);  assertNotNull(reaction.getCheck());  assertNotNull(reaction.getEffect());  Sequence seq=(Sequence)reaction.getEffect();  assertEquals(2,seq.getSteps().size());  assertCall(seq,0,_s1.getExitSequence());  assertCall(seq,1,_s2.getEnterSequences().get(0));  assertCall(_s2.getEnterSequences().get(0),0,_s2.getEntryAction());}  }
class C{  private static void inplace_merge(int first,int middle,int last,IntComparator comp,Swapper swapper){  if (first >= middle || middle >= last)   return;  if (last - first == 2) {    if (comp.compare(middle,first) < 0) {      swapper.swap(first,middle);    }    return;  }  int firstCut;  int secondCut;  if (middle - first > last - middle) {    firstCut=first + (middle - first) / 2;    secondCut=lower_bound(middle,last,firstCut,comp);  } else {    secondCut=middle + (last - middle) / 2;    firstCut=upper_bound(first,middle,secondCut,comp);  }  int first2=firstCut;  int middle2=middle;  int last2=secondCut;  if (middle2 != first2 && middle2 != last2) {    int first1=first2;    int last1=middle2;    while (first1 < --last1)     swapper.swap(first1++,last1);    first1=middle2;    last1=last2;    while (first1 < --last1)     swapper.swap(first1++,last1);    first1=first2;    last1=last2;    while (first1 < --last1)     swapper.swap(first1++,last1);  }  middle=firstCut + (secondCut - middle);  inplace_merge(first,firstCut,middle,comp,swapper);  inplace_merge(middle,secondCut,last,comp,swapper);}  }
class C{  public String globalInfo(){  return m_globalInfo;}  }
class C{  public boolean isAvailable(){  return mNetworkInfo.isAvailable();}  }
class C{  void clear(){  valueNumbersUnconditionallyDereferenced.clear();  derefLocationSetMap.clear();}  }
class C{  public static ConditionOperand GREATER(){  return new ConditionOperand(GREATER);}  }
class C{  protected XMouseDragGestureRecognizer(DragSource ds,Component c){  this(ds,c,DnDConstants.ACTION_NONE);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  void pushSpaceHandling(Attributes attrs) throws org.xml.sax.SAXParseException {  String value=attrs.getValue("xml:space");  if (null == value) {    m_spacePreserveStack.push(m_spacePreserveStack.peekOrFalse());  } else   if (value.equals("preserve")) {    m_spacePreserveStack.push(true);  } else   if (value.equals("default")) {    m_spacePreserveStack.push(false);  } else {    SAXSourceLocator locator=getLocator();    ErrorListener handler=m_stylesheetProcessor.getErrorListener();    try {      handler.error(new TransformerException(XSLMessages.createMessage(XSLTErrorResources.ER_ILLEGAL_XMLSPACE_VALUE,null),locator));    } catch (    TransformerException te) {      throw new org.xml.sax.SAXParseException(te.getMessage(),locator,te);    }    m_spacePreserveStack.push(m_spacePreserveStack.peek());  }}  }
class C{  Object stringToValue(String text,Format f) throws ParseException {  if (f == null) {    return text;  }  Object value=f.parseObject(text);  return convertValueToValueClass(value,getValueClass());}  }
class C{  public static RowLimitSpec buildRowLimitSpec(EsperEPL2GrammarParser.RowLimitContext ctx){  Object numRows;  Object offset;  if (ctx.o != null) {    numRows=parseNumOrVariableIdent(ctx.n1,ctx.i1);    offset=parseNumOrVariableIdent(ctx.n2,ctx.i2);  } else   if (ctx.c != null) {    offset=parseNumOrVariableIdent(ctx.n1,ctx.i1);    numRows=parseNumOrVariableIdent(ctx.n2,ctx.i2);  } else {    numRows=parseNumOrVariableIdent(ctx.n1,ctx.i1);    offset=null;  }  Integer numRowsInt=null;  String numRowsVariable=null;  if (numRows instanceof String) {    numRowsVariable=(String)numRows;  } else {    numRowsInt=(Integer)numRows;  }  Integer offsetInt=null;  String offsetVariable=null;  if (offset instanceof String) {    offsetVariable=(String)offset;  } else {    offsetInt=(Integer)offset;  }  return new RowLimitSpec(numRowsInt,offsetInt,numRowsVariable,offsetVariable);}  }
class C{  public static RequestHeader convertHeaderFromJetty(HttpServletRequest request){  RequestHeader result=new RequestHeader();  Enumeration<String> headerNames=request.getHeaderNames();  while (headerNames.hasMoreElements()) {    String headerName=headerNames.nextElement();    Enumeration<String> headers=request.getHeaders(headerName);    while (headers.hasMoreElements()) {      String header=headers.nextElement();      result.add(headerName,header);    }  }  return result;}  }
class C{  public static int bytesToCodePoint(ByteBuffer bytes){  bytes.mark();  byte b=bytes.get();  bytes.reset();  int extraBytesToRead=bytesFromUTF8[(b & 0xFF)];  if (extraBytesToRead < 0) {    return -1;  }  int ch=0;switch (extraBytesToRead) {case 5:    ch+=(bytes.get() & 0xFF);  ch<<=6;case 4:ch+=(bytes.get() & 0xFF);ch<<=6;case 3:ch+=(bytes.get() & 0xFF);ch<<=6;case 2:ch+=(bytes.get() & 0xFF);ch<<=6;case 1:ch+=(bytes.get() & 0xFF);ch<<=6;case 0:ch+=(bytes.get() & 0xFF);}ch-=offsetsFromUTF8[extraBytesToRead];return ch;}  }
class C{  public static BigDecimal bomQtyOrdered(int p_M_Product_ID,int p_M_Warehouse_ID,int p_M_Locator_ID) throws SQLException {  return bomQty(p_M_Product_ID,p_M_Warehouse_ID,p_M_Locator_ID,"QtyOrdered");}  }
class C{  protected void onConfigure(ConfigurationBuilder builder){  if (loggingEnabled) {    LoggingListener loggingListener=new LoggingListener();    builder.addStatementListener(loggingListener);  }}  }
class C{  public Data(Data other){  if (other.is_set_pedigree()) {    this.pedigree=new Pedigree(other.pedigree);  }  if (other.is_set_dataunit()) {    this.dataunit=new DataUnit(other.dataunit);  }}  }
class C{  public void addToWidgetsPanel(Component comp,int index){  removeFromWidgetsPanel(comp);  if (m_LayoutWidgets != null)   m_LayoutWidgets.setRows(m_LayoutWidgets.getRows() + 1);  if (index != -1)   m_PanelWidgets.add(comp,index); else   m_PanelWidgets.add(comp);}  }
class C{  private void addAnnotations(JCas aJCas,Map<Type,Map<AnnotationUnit,List<AnnotationFS>>> aAnnosPerTypePerUnit){  for (  Type type : annotationsPerPostion.keySet()) {    Map<AnnotationUnit,Map<Integer,AnnotationFS>> multiTokUnits=new HashMap<>();    int ref=1;    AnnotationFS prevAnnoFs=null;    for (    AnnotationUnit unit : annotationsPerPostion.get(type).keySet()) {      int end=unit.end;      List<AnnotationFS> annos=aAnnosPerTypePerUnit.get(type).get(unit);      int j=0;      Feature linkeF=null;      Map<AnnotationFS,List<FeatureStructure>> linkFSesPerSlotAnno=new HashMap<>();      if (allLayers.get(type).size() == 0) {        ref=addAnnotationWithNoFeature(aJCas,type,unit,annos,multiTokUnits,end,ref);        continue;      }      for (      Feature feat : allLayers.get(type)) {        String anno=annotationsPerPostion.get(type).get(unit).get(j);        if (!anno.equals("_")) {          int i=0;          int slot=0;          boolean targetAdd=false;          String stackedAnnoRegex="(?<!\\\\)" + Pattern.quote("|");          String[] stackedAnnos=anno.split(stackedAnnoRegex);          for (          String mAnnos : stackedAnnos) {            String multipleSlotAnno="(?<!\\\\)" + Pattern.quote(";");            for (            String mAnno : mAnnos.split(multipleSlotAnno)) {              String depRef="";              String multSpliter="(?<!\\\\)" + Pattern.quote("[");              boolean ambigTarget=false;              if (mAnno.split(multSpliter).length > 1) {                ambigTarget=true;                depRef=mAnno.substring(mAnno.indexOf("[") + 1,mAnno.length() - 1);                ref=depRef.contains("_") ? ref : Integer.valueOf(mAnno.substring(mAnno.indexOf("[") + 1,mAnno.length() - 1));                mAnno=mAnno.substring(0,mAnno.indexOf("["));              }              if (mAnno.equals("*")) {                mAnno=null;              }              boolean isMultitoken=false;              if (!multiTokUnits.isEmpty() && prevAnnoFs != null && prevAnnoFs.getBegin() != unit.begin)               contAnno:               for (              AnnotationUnit u : multiTokUnits.keySet()) {                for (                Integer r : multiTokUnits.get(u).keySet()) {                  if (ref == r) {                    isMultitoken=true;                    prevAnnoFs=multiTokUnits.get(u).get(r);                    break contAnno;                  }                }              }              if (isMultitoken) {                Feature endF=type.getFeatureByBaseName(CAS.FEATURE_BASE_NAME_END);                prevAnnoFs.setIntValue(endF,end);                mAnno=getEscapeChars(mAnno);                prevAnnoFs.setFeatureValueFromString(feat,mAnno);                if (feat.getShortName().equals(REF_LINK)) {                  annos.set(i,prevAnnoFs);                }                setAnnoRefPerUnit(unit,type,ref,prevAnnoFs);              } else {                if (roleLinks.containsKey(feat)) {                  linkeF=feat;                  FeatureStructure link=aJCas.getCas().createFS(slotLinkTypes.get(feat));                  Feature roleFeat=link.getType().getFeatureByBaseName("role");                  mAnno=getEscapeChars(mAnno);                  link.setStringValue(roleFeat,mAnno);                  linkFSesPerSlotAnno.putIfAbsent(annos.get(i),new ArrayList<>());                  linkFSesPerSlotAnno.get(annos.get(i)).add(link);                } else                 if (roleTargets.containsKey(feat)) {                  FeatureStructure link=linkFSesPerSlotAnno.get(annos.get(i)).get(slot);                  int customTypeNumber=0;                  if (mAnno.split("-").length > 2) {                    customTypeNumber=Integer.valueOf(mAnno.substring(mAnno.lastIndexOf("-") + 1));                    mAnno=mAnno.substring(0,mAnno.lastIndexOf("-"));                  }                  AnnotationUnit targetUnit=token2Units.get(mAnno);                  Type tType=null;                  if (customTypeNumber == 0) {                    tType=roleTargets.get(feat);                  } else {                    tType=layerMaps.get(customTypeNumber);                  }                  AnnotationFS targetFs;                  if (ambigTarget) {                    targetFs=annosPerRef.get(tType).get(targetUnit).get(ref);                  } else {                    targetFs=annosPerRef.get(tType).get(targetUnit).entrySet().iterator().next().getValue();                  }                  link.setFeatureValue(feat,targetFs);                  addSlotAnnotations(linkFSesPerSlotAnno,linkeF);                  targetAdd=true;                  slot++;                } else                 if (feat.getShortName().equals(REF_REL)) {                  int chainNo=Integer.valueOf(mAnno.split("->")[1].split("-")[0]);                  int LinkNo=Integer.valueOf(mAnno.split("->")[1].split("-")[1]);                  chainAnnosPerTyep.putIfAbsent(type,new TreeMap<>());                  if (chainAnnosPerTyep.get(type).get(chainNo) != null && chainAnnosPerTyep.get(type).get(chainNo).get(LinkNo) != null) {                    continue;                  }                  String refRel=mAnno.split("->")[0];                  refRel=getEscapeChars(refRel);                  if (refRel.equals("*")) {                    refRel=null;                  }                  annos.get(i).setFeatureValueFromString(feat,refRel);                  chainAnnosPerTyep.putIfAbsent(type,new TreeMap<>());                  chainAnnosPerTyep.get(type).putIfAbsent(chainNo,new TreeMap<>());                  chainAnnosPerTyep.get(type).get(chainNo).put(LinkNo,annos.get(i));                } else                 if (feat.getShortName().equals(REF_LINK)) {                  mAnno=getEscapeChars(mAnno);                  annos.get(i).setFeatureValueFromString(feat,mAnno);                  aJCas.addFsToIndexes(annos.get(i));                } else                 if (depFeatures.get(type) != null && depFeatures.get(type).equals(feat)) {                  int g=depRef.isEmpty() ? 0 : Integer.valueOf(depRef.split("_")[0]);                  int d=depRef.isEmpty() ? 0 : Integer.valueOf(depRef.split("_")[1]);                  Type depType=depTypess.get(type);                  AnnotationUnit govUnit=token2Units.get(mAnno);                  int l=annotationsPerPostion.get(type).get(unit).size();                  String thisUnit=annotationsPerPostion.get(type).get(unit).get(l - 1);                  AnnotationUnit depUnit=token2Units.get(thisUnit);                  AnnotationFS govFs;                  AnnotationFS depFs;                  if (depType.getName().equals(POS.class.getName())) {                    depType=aJCas.getCas().getTypeSystem().getType(Token.class.getName());                    govFs=units2Tokens.get(govUnit);                    depFs=units2Tokens.get(unit);                  } else                   if (depType.getName().equals(Token.class.getName())) {                    govFs=units2Tokens.get(govUnit);                    depFs=units2Tokens.get(unit);                  } else                   if (g == 0 && d == 0) {                    govFs=annosPerRef.get(depType).get(govUnit).entrySet().iterator().next().getValue();                    depFs=annosPerRef.get(depType).get(depUnit).entrySet().iterator().next().getValue();                  } else                   if (g == 0) {                    govFs=annosPerRef.get(depType).get(govUnit).entrySet().iterator().next().getValue();                    depFs=annosPerRef.get(depType).get(depUnit).get(d);                  } else {                    govFs=annosPerRef.get(depType).get(govUnit).get(g);                    depFs=annosPerRef.get(depType).get(depUnit).entrySet().iterator().next().getValue();                  }                  annos.get(i).setFeatureValue(feat,depFs);                  annos.get(i).setFeatureValue(type.getFeatureByBaseName(GOVERNOR),govFs);                  if (depFs.getBegin() <= annos.get(i).getBegin()) {                    Feature beginF=type.getFeatureByBaseName(CAS.FEATURE_BASE_NAME_BEGIN);                    annos.get(i).setIntValue(beginF,depFs.getBegin());                  } else {                    Feature endF=type.getFeatureByBaseName(CAS.FEATURE_BASE_NAME_END);                    annos.get(i).setIntValue(endF,depFs.getEnd());                  }                  aJCas.addFsToIndexes(annos.get(i));                } else {                  mAnno=getEscapeChars(mAnno);                  multiTokUnits.putIfAbsent(unit,new HashMap<>());                  multiTokUnits.get(unit).put(ref,annos.get(i));                  prevAnnoFs=annos.get(i);                  annos.get(i).setFeatureValueFromString(feat,mAnno);                  aJCas.addFsToIndexes(annos.get(i));                  setAnnoRefPerUnit(unit,type,ref,annos.get(i));                }              }              if (stackedAnnos.length > 1)               ref++;            }            if (type.getName().equals(POS.class.getName())) {              units2Tokens.get(unit).setPos((POS)annos.get(i));            }            if (type.getName().equals(Lemma.class.getName())) {              units2Tokens.get(unit).setLemma((Lemma)annos.get(i));            }            i++;          }          if (targetAdd) {            linkFSesPerSlotAnno=new HashMap<>();          }        } else {          prevAnnoFs=null;        }        j++;      }      if (prevAnnoFs != null) {        ref++;      }    }    annosPerRef.put(type,multiTokUnits);  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.CONCRETE_METHOD_DECLARATION___TYPE_1:    setType_1(TYPE_1_EDEFAULT);  return;case UmplePackage.CONCRETE_METHOD_DECLARATION___METHOD_DECLARATOR_1:getMethodDeclarator_1().clear();return;case UmplePackage.CONCRETE_METHOD_DECLARATION___ANONYMOUS_CONCRETE_METHOD_DECLARATION_11:getAnonymous_concreteMethodDeclaration_1_1().clear();return;case UmplePackage.CONCRETE_METHOD_DECLARATION___METHOD_BODY_1:getMethodBody_1().clear();return;case UmplePackage.CONCRETE_METHOD_DECLARATION___ANONYMOUS_CONCRETE_METHOD_DECLARATION_21:getAnonymous_concreteMethodDeclaration_2_1().clear();return;}super.eUnset(featureID);}  }
class C{  public ShadowBorder(int borderWidth,int horizontalDepth,int verticalDepth){  this.borderWidth=borderWidth;  this.hDepth=horizontalDepth;  this.vDepth=verticalDepth;}  }
class C{  private void endTask(){synchronized (lock) {    int numRunning=--runningTasks;    if (numRunning == 0) {      lock.notifyAll();    }  }}  }
class C{  public static boolean ignoringBatteryOptimizations(){  return NgnApplication.ignoringBatteryOptimizations(null);}  }
class C{  private void addNodeStructure(Tree donorTree,NodeRef donorNode){  NodeRef acceptorNode=null;  if (donorTree.isExternal(donorNode)) {    acceptorNode=this.nodes[this.getTaxonIndex(donorTree.getTaxonId(donorNode.getNumber()))];  } else {    acceptorNode=this.nodes[donorNode.getNumber()];  }  setNodeHeight(acceptorNode,donorTree.getNodeHeight(donorNode));  for (int i=0; i < donorTree.getChildCount(donorNode); i++) {    if (donorTree.isExternal(donorTree.getChild(donorNode,i))) {      addChild(acceptorNode,this.nodes[this.getTaxonIndex(donorTree.getTaxonId(donorTree.getChild(donorNode,i).getNumber()))]);    } else {      addChild(acceptorNode,this.nodes[donorTree.getChild(donorNode,i).getNumber()]);    }  }  pushTreeChangedEvent(acceptorNode);  if (!donorTree.isExternal(donorNode)) {    for (int i=0; i < donorTree.getChildCount(donorNode); i++) {      addNodeStructure(donorTree,donorTree.getChild(donorNode,i));    }  }}  }
class C{  private OFVersion computeOFVersionFromBitmap(List<U32> theirs){  Iterator<U32> theirsItr=theirs.iterator();  Iterator<U32> oursItr=ofBitmaps.iterator();  OFVersion version=null;  int pos=0;  int size=32;  while (theirsItr.hasNext() && oursItr.hasNext()) {    int t=theirsItr.next().getRaw();    int o=oursItr.next().getRaw();    int common=t & o;    for (int i=0; i < size; i++) {      int tmp=common & (1 << i);      if (tmp != 0) {        for (        OFVersion v : OFVersion.values()) {          if (v.getWireVersion() == i + (size * pos)) {            version=v;          }        }      }    }    pos++;  }  return version;}  }
class C{  public ParsedQuery(String sourceString,TupleExpr tupleExpr){  this(sourceString);  setTupleExpr(tupleExpr);}  }
class C{  public static boolean rm(String file) throws IOException {  if (!exists(file))   return false;  if (!isFile(file))   throw new IOException(file + " is not a file!");  return (new File(file)).delete();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case ExpressionsPackage.NUMERICAL_UNARY_EXPRESSION__OPERATOR:    return getOperator();case ExpressionsPackage.NUMERICAL_UNARY_EXPRESSION__OPERAND:  return getOperand();}return super.eGet(featureID,resolve,coreType);}  }
class C{  void pause(int H1,int H2){  h1=H1;  h2=H2;  if (kicker != null) {    repaint();  }  try {    Thread.sleep(20);  } catch (  InterruptedException e) {  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:42.919 -0500",hash_original_method="2FFE641FCC31BABE3C1FB0FB6868D963",hash_generated_method="00C0A6F0F2ADCBDD7C7546E14A9F818E") public static boolean isValidIPv4(String address){  if (address.length() == 0) {    return false;  }  int octet;  int octets=0;  String temp=address + ".";  int pos;  int start=0;  while (start < temp.length() && (pos=temp.indexOf('.',start)) > start) {    if (octets == 4) {      return false;    }    try {      octet=Integer.parseInt(temp.substring(start,pos));    } catch (    NumberFormatException ex) {      return false;    }    if (octet < 0 || octet > 255) {      return false;    }    start=pos + 1;    octets++;  }  return octets == 4;}  }
class C{  private void resetLogViews(){  resetTraceLog();  resetWarningLog();  resetErrorLog();}  }
class C{  private boolean verifyEntryAndStoreValue(final String entry,final int keyCode){  final String work;  if (keyCode == SWT.DEL) {    work=StringUtil.removeCharAt(this.text.getText(),this.text.getCaretPosition());  } else   if (keyCode == SWT.BS && this.text.getCaretPosition() == 0) {    work=StringUtil.removeCharAt(this.text.getText(),this.text.getCaretPosition() - 1);  } else   if (keyCode == 0) {    work=entry;  } else {    work=StringUtil.insertString(this.text.getText(),entry,this.text.getCaretPosition());  }  try {    final double d=Double.parseDouble(work.replace(this.decimalFormatSeparator,'.'));    this.storedValue=(int)(d * Math.pow(10,this.getDigits()));  } catch (  final NumberFormatException nfe) {    return false;  }  for (  final SelectionListener s : HorizontalSpinner.this.selectionListeners) {    s.widgetSelected(null);  }  return true;}  }
class C{  public synchronized Entry top() throws IOException {  return po(this.stack.lastKey(),false);}  }
class C{  private TreeMap<Long,IRunningQuery> orderRunningQueries(final UUID[] queryIds,final Map<UUID,RunningQuery> crosswalkMap,final QueryEngine queryEngine){  final TreeMap<Long,IRunningQuery> runningQueryAge=newQueryMap();  for (  UUID queryId : queryIds) {    final IRunningQuery query;    try {      query=queryEngine.getRunningQuery(queryId);      if (query == null) {        continue;      }    } catch (    RuntimeException e) {      if (InnerCause.isInnerCause(e,InterruptedException.class)) {        continue;      }      throw new RuntimeException(e);    }    final Long elapsedTime=new Long(query.getElapsed());    runningQueryAge.put(elapsedTime,query);  }  return runningQueryAge;}  }
class C{  public static void main(String[] argv){  runClassifier(new SMO(),argv);}  }
class C{  private boolean identifySuccessors(AStarNode node){  int x=node.x;  int z=node.z;  ArrayList<AStarNode> successors=findNeighbours(node);  for (  AStarNode s : successors) {    AStarNode jumpPoint=jump(s.x,s.y,s.z,x,z);    if (jumpPoint != null) {      if (closedNodes.contains(jumpPoint)) {        continue;      }      addOrUpdateNode(jumpPoint);    }  }  return false;}  }
class C{  public String quoteIdentifier(String identifier){  if (identifier == null) {    return null;  }  if (isH2 && !isH2ModeMySQL) {    return Parser.quoteIdentifier(identifier);  }  return StringUtils.toUpperEnglish(identifier);}  }
class C{  public AnnotationTypeMemberDeclaration newAnnotationTypeMemberDeclaration(){  AnnotationTypeMemberDeclaration result=new AnnotationTypeMemberDeclaration(this);  return result;}  }
class C{  protected void calcMinMax(List<? extends DataSet<?>> dataSets){  if (dataSets == null || dataSets.size() < 1) {    mYMax=0f;    mYMin=0f;  } else {    mYMin=dataSets.get(0).getYMin();    mYMax=dataSets.get(0).getYMax();    for (int i=0; i < dataSets.size(); i++) {      if (dataSets.get(i).getYMin() < mYMin)       mYMin=dataSets.get(i).getYMin();      if (dataSets.get(i).getYMax() > mYMax)       mYMax=dataSets.get(i).getYMax();    }    T firstLeft=getFirstLeft();    if (firstLeft != null) {      mLeftAxisMax=firstLeft.getYMax();      mLeftAxisMin=firstLeft.getYMin();      for (      DataSet<?> dataSet : dataSets) {        if (dataSet.getAxisDependency() == AxisDependency.LEFT) {          if (dataSet.getYMin() < mLeftAxisMin)           mLeftAxisMin=dataSet.getYMin();          if (dataSet.getYMax() > mLeftAxisMax)           mLeftAxisMax=dataSet.getYMax();        }      }    }    T firstRight=getFirstRight();    if (firstRight != null) {      mRightAxisMax=firstRight.getYMax();      mRightAxisMin=firstRight.getYMin();      for (      DataSet<?> dataSet : dataSets) {        if (dataSet.getAxisDependency() == AxisDependency.RIGHT) {          if (dataSet.getYMin() < mRightAxisMin)           mRightAxisMin=dataSet.getYMin();          if (dataSet.getYMax() > mRightAxisMax)           mRightAxisMax=dataSet.getYMax();        }      }    }    handleEmptyAxis(firstLeft,firstRight);  }}  }
class C{  public void currentState(long state,Model currentModel){  if (state == writeState || (isRepeating && state > 0 && (state % writeState == 0))) {    String timeStamp=new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss").format(Calendar.getInstance().getTime());    DebugUtils.writeStateToFile(new File("beast_debug_" + timeStamp),state,mcmc.getMarkovChain().getCurrentScore());  }}  }
class C{  public ConstantPopulationModel(Parameter N0Parameter,Type units){  this(ConstantPopulationModelParser.CONSTANT_POPULATION_MODEL,N0Parameter,units);}  }
class C{  public static void raiseEvent(String sender,String event_type,Object... data){  for (  ModuleEventListener listener : listeners)   listener.onModuleEvent(sender,event_type,data);}  }
class C{  public static boolean isIntegral(Type type){  if (type == null) {    return false;  }switch (type.getKind()) {case BYTE:case SHORT:case INT:case LONG:    return true;default :  return false;}}  }
class C{  public void moveViewToX(float xIndex){  Runnable job=new MoveViewJob(mViewPortHandler,xIndex,0f,getTransformer(AxisDependency.LEFT),this);  if (mViewPortHandler.hasChartDimens()) {    post(job);  } else {    mJobs.add(job);  }}  }
class C{  public boolean hasChanged(){  if (getValue() != null)   if (m_oldValue != null)   return !m_oldValue.equals(getValue()); else   return true; else   if (m_oldValue != null)   return true; else   return false;}  }
class C{  public void destroy(){  log.info("");}  }
class C{  public static void logCallingProcessLocation(){  File f=new File("testFile11");  try {    f.createNewFile();    f.delete();  } catch (  IOException e1) {    e1.printStackTrace();    Logger.appendLog("[PathUtils][EX]  " + e1.getStackTrace());  }  String calledfrom=f.getAbsolutePath().substring(0,f.getAbsolutePath().lastIndexOf(File.separator));  Logger.appendLog("[PathUtils][I] we were called from " + calledfrom);  Logger.appendLog("[PathUtils][I] we are located in : " + getExcutionPath());}  }
class C{  boolean evaluateArrayMeet(DF_LatticeCell[] operands){  ArrayCell lhs=(ArrayCell)operands[0];  if (lhs.isBOTTOM()) {    return false;  }  for (int j=1; j < operands.length; j++) {    ArrayCell r=(ArrayCell)operands[j];    if (r.isBOTTOM()) {      lhs.setBOTTOM();      return true;    }  }  boolean lhsWasTOP=lhs.isTOP();  ValueNumberPair[] oldNumbers=null;  if (!lhsWasTOP)   oldNumbers=lhs.copyValueNumbers();  lhs.clear();  if (operands.length > 1) {    int firstNonTopRHS=-1;    for (int j=1; j < operands.length; j++) {      ArrayCell r=(ArrayCell)operands[j];      if (!r.isTOP()) {        firstNonTopRHS=j;        break;      }    }    if (firstNonTopRHS == -1) {      lhs.setTOP(true);      return false;    }    ValueNumberPair[] rhsNumbers=((ArrayCell)operands[firstNonTopRHS]).copyValueNumbers();    if (rhsNumbers != null) {      for (      ValueNumberPair pair : rhsNumbers) {        int v1=pair.v1;        int v2=pair.v2;        lhs.add(v1,v2);        for (int j=firstNonTopRHS + 1; j < operands.length; j++) {          ArrayCell r=(ArrayCell)operands[j];          if (!r.contains(v1,v2)) {            lhs.remove(v1,v2);            break;          }        }      }    }  }  if (lhsWasTOP)   return true;  ValueNumberPair[] newNumbers=lhs.copyValueNumbers();  return ArrayCell.setsDiffer(oldNumbers,newNumbers);}  }
class C{  public static Pattern buildStopwordPattern(Collection<String> stopwords,Boolean caseSensitive){  StringJoiner sj=new StringJoiner("|");  for (  String s : stopwords) {    sj.add(Pattern.quote(s));  }  if (caseSensitive) {    return Pattern.compile("\\b(" + sj.toString() + ")\\b");  } else {    return Pattern.compile("\\b(" + sj.toString() + ")\\b",Pattern.CASE_INSENSITIVE);  }}  }
class C{  @Override public Object remove(int index){  return ((CheckBoxListItem)super.remove(index)).getContent();}  }
class C{  public static FragmentBoxOffice newInstance(String param1,String param2){  FragmentBoxOffice fragment=new FragmentBoxOffice();  Bundle args=new Bundle();  fragment.setArguments(args);  return fragment;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:20.254 -0500",hash_original_method="890D392C9C1E85BE5BBE5EB943FF6481",hash_generated_method="687F901A7B0DB72090772A4E5099C96D") public void drawRect(RectF rect,Paint paint){  native_drawRect(mNativeCanvas,rect,paint.mNativePaint);}  }
class C{  public static boolean isAllAlpha(String str){  if (str == null)   return false;  for (int i=str.length() - 1; i >= 0; i--) {    if (!Character.isLetter(str.charAt(i)))     return false;  }  return true;}  }
class C{  public boolean initialize(){  if (mBluetoothManager == null) {    mBluetoothManager=(BluetoothManager)getSystemService(Context.BLUETOOTH_SERVICE);    if (mBluetoothManager == null) {      Log.e(TAG,"Unable to initialize BluetoothManager.");      return false;    }  }  mBluetoothAdapter=mBluetoothManager.getAdapter();  if (mBluetoothAdapter == null) {    Log.e(TAG,"Unable to initialize BluetoothAdapter.");    return false;  }  return true;}  }
class C{  @Override public void onClick(View v){  if (v == mBuyButton) {    if (Consts.DEBUG) {      Log.d(TAG,"buying: " + mItemName + " sku: "+ mSku);    }    if (mManagedType != Managed.SUBSCRIPTION && !mBillingService.requestPurchase(mSku,Consts.ITEM_TYPE_INAPP,mPayloadContents)) {      showDialog(DIALOG_BILLING_NOT_SUPPORTED_ID);    } else     if (!mBillingService.requestPurchase(mSku,Consts.ITEM_TYPE_SUBSCRIPTION,mPayloadContents)) {      showDialog(DIALOG_SUBSCRIPTIONS_NOT_SUPPORTED_ID);    }  } else   if (v == mEditPayloadButton) {    showPayloadEditDialog();  } else   if (v == mEditSubscriptionsButton) {    editSubscriptions();  }}  }
class C{  public static boolean verifySignature(PublicKey key,byte[] message,byte[] signature){  lock.lock();  boolean result=false;  try {    if (signatureEngine == null) {      signatureEngine=Signature.getInstance("SHA1withRSA");    }    signatureEngine.initVerify(key);    result=verifySignature(signatureEngine,message,signature);  } catch (  Exception e) {    e.printStackTrace();  }  lock.unlock();  return result;}  }
class C{  public void hide(){  hide(false,null);}  }
class C{  public static void saveDom(OutputStream os,Element e){  DOMSource source=new DOMSource(e);  TransformerFactory transFactory=TransformerFactory.newInstance();  Transformer transformer;  try {    transformer=transFactory.newTransformer();    transformer.setOutputProperty("indent","yes");    StreamResult result=new StreamResult(os);    transformer.transform(source,result);    os.flush();  } catch (  UnsupportedEncodingException e1) {    LOG.error("Failed with the following UnsupportedEncodingException: ",e1);  }catch (  IOException e1) {    LOG.error("Failed to with the following IOException: ",e1);  }catch (  TransformerConfigurationException e2) {    LOG.error("Failed with the following TransformerConfigurationException: ",e2);  }catch (  TransformerException ex) {    LOG.error("Failed with the following TransformerException: ",ex);  }}  }
class C{  private String classNameFromTypeIndex(int idx){  return mStrings[mTypeIds[idx].descriptorIdx];}  }
class C{  public MHRPaySelectionCheck(MHRPaySelection ps,String PaymentRule){  this(ps.getCtx(),0,ps.get_TrxName());  setClientOrg(ps);  setHR_PaySelection_ID(ps.getHR_PaySelection_ID());  setPaymentRule(PaymentRule);}  }
class C{  private NodeSequence(DTMManager dtmMgr){  super(new NodeVector());  m_last=0;  m_dtmMgr=dtmMgr;}  }
class C{  public int read(InputStream in,int offset,Message overflow) throws IOException {  if (refCount.get() == 0) {    throw new IllegalStateException("Modifying a message while in the pool");  }  int msgSize=offset < 2 ? 2 : byteBuffer.getShort(0);  while (offset < msgSize) {    int max=overflow == null ? Math.max(2,msgSize - offset) : buffer.length - offset;    int n=in.read(buffer,offset,max);    if (n < 0) {      return -1;    }    offset+=n;    if (offset >= msgSize) {      msgSize=byteBuffer.getShort(0);    }  }  int overflowSize=offset - msgSize;  if (overflowSize > 0) {    System.arraycopy(buffer,msgSize,overflow.buffer,0,overflowSize);  }  parse();  return overflowSize;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Reference(authors="J. M. Bernando",title="Algorithm AS 103: Psi (Digamma) Function",booktitle="Statistical Algorithms") public static double digamma(double x){  if (!(x > 0)) {    return Double.NaN;  }  if (x <= 1e-5) {    return -EULERS_CONST - 1. / x;  } else   if (x > 49.) {    final double ix2=1. / (x * x);    return Math.log(x) - 0.5 / x - ix2 * ((1.0 / 12.) + ix2 * (1.0 / 120. - ix2 / 252.));  } else {    return digamma(x + 1.) - 1. / x;  }}  }
class C{  public QueueSubscriberLoop(Subscriber<? super T> subscriber,WorkQueueProcessor<T> processor){  this.processor=processor;  this.subscriber=subscriber;  this.barrier=processor.ringBuffer.newReader();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public CLDevice[] createSubDevicesByAffinity(AffinityDomain affinityDomain){  return createSubDevices(pointerToSizeTs(CL_DEVICE_PARTITION_BY_AFFINITY_DOMAIN,affinityDomain.value(),0));}  }
class C{  public void removePlaceholder(Placeholder placeholder){  Storage.removePlaceholder(placeholder.outputUri);}  }
class C{  @ConstructorProperties({"orientation"}) public JSplitPane(int newOrientation){  this(newOrientation,UIManager.getBoolean("SplitPane.continuousLayout"));}  }
class C{  void addObject(Object object){  this.objects.add(object);}  }
class C{  public ObjectArrayList times(int times){  ObjectArrayList newList=new ObjectArrayList(times * size);  for (int i=times; --i >= 0; ) {    newList.addAllOfFromTo(this,0,size() - 1);  }  return newList;}  }
class C{  protected Node newNode(){  return new SVGOMFEFloodElement();}  }
class C{  public static Matrix fromString(String string,Object... parameters){  string=string.replaceAll(StringUtil.BRACKETS,"");  String[] rows=string.split(StringUtil.SEMICOLONORNEWLINE);  String[] cols=rows[0].split(StringUtil.COLONORSPACES);  Object[][] values=new String[rows.length][cols.length];  for (int r=0; r < rows.length; r++) {    cols=rows[r].split(StringUtil.COLONORSPACES);    for (int c=0; c < cols.length; c++) {      values[r][c]=cols[c];    }  }  return Matrix.Factory.linkToArray(values);}  }
class C{  @Override public synchronized void disconnectionNotification(String eventName,Object source){}  }
class C{  private void rebalance(Node<K,V> unbalanced,boolean insert){  for (Node<K,V> node=unbalanced; node != null; node=node.parent) {    Node<K,V> left=node.left;    Node<K,V> right=node.right;    int leftHeight=left != null ? left.height : 0;    int rightHeight=right != null ? right.height : 0;    int delta=leftHeight - rightHeight;    if (delta == -2) {      Node<K,V> rightLeft=right.left;      Node<K,V> rightRight=right.right;      int rightRightHeight=rightRight != null ? rightRight.height : 0;      int rightLeftHeight=rightLeft != null ? rightLeft.height : 0;      int rightDelta=rightLeftHeight - rightRightHeight;      if (rightDelta == -1 || (rightDelta == 0 && !insert)) {        rotateLeft(node);      } else {        assert (rightDelta == 1);        rotateRight(right);        rotateLeft(node);      }      if (insert) {        break;      }    } else     if (delta == 2) {      Node<K,V> leftLeft=left.left;      Node<K,V> leftRight=left.right;      int leftRightHeight=leftRight != null ? leftRight.height : 0;      int leftLeftHeight=leftLeft != null ? leftLeft.height : 0;      int leftDelta=leftLeftHeight - leftRightHeight;      if (leftDelta == 1 || (leftDelta == 0 && !insert)) {        rotateRight(node);      } else {        assert (leftDelta == -1);        rotateLeft(left);        rotateRight(node);      }      if (insert) {        break;      }    } else     if (delta == 0) {      node.height=leftHeight + 1;      if (insert) {        break;      }    } else {      assert (delta == -1 || delta == 1);      node.height=Math.max(leftHeight,rightHeight) + 1;      if (!insert) {        break;      }    }  }}  }
class C{  private void dfs(char[][] board,int i,int j,TrieNode node,List<String> res){  char c=board[i][j];  if (c == '#' || node.next[c - 'a'] == null)   return;  node=node.next[c - 'a'];  if (node.word != null) {    res.add(node.word);    node.word=null;  }  board[i][j]='#';  if (i > 0)   dfs(board,i - 1,j,node,res);  if (j > 0)   dfs(board,i,j - 1,node,res);  if (i < board.length - 1)   dfs(board,i + 1,j,node,res);  if (j < board[i].length - 1)   dfs(board,i,j + 1,node,res);  board[i][j]=c;}  }
class C{  public void write(ByteBuf dataStream){  dataStream.writeInt(xCoord);  dataStream.writeInt(yCoord);  dataStream.writeInt(zCoord);  dataStream.writeInt(dimensionId);}  }
class C{  public boolean hasPayload(){  return mPayload != null;}  }
class C{  public void putCachedVetor(String entityId,String gloss){  this.put(entityId,gloss);}  }
class C{  public AbstractMethodDeclaration referenceMethod(){  if (this.referenceContext instanceof AbstractMethodDeclaration)   return (AbstractMethodDeclaration)this.referenceContext;  return null;}  }
class C{  private static List<Statement> commmonSuffix(final List<Statement> ss1,final List<Statement> ss2){  final List<Statement> $=new ArrayList<>();  for (; !ss1.isEmpty() && !ss2.isEmpty(); ss2.remove(ss2.size() - 1)) {    final Statement s1=ss1.get(ss1.size() - 1);    final Statement s2=ss2.get(ss2.size() - 1);    if (!wizard.same(s1,s2))     break;    $.add(s1);    ss1.remove(ss1.size() - 1);  }  return $;}  }
class C{  public boolean matches(String riddle,Sentence sentence){  final Sentence answer=sentence.parseAsMatchingSource();  if (riddleMap.get(riddle) == null) {    logger.warn("Accepting any answer for unknown riddle: " + riddle);    return true;  }  for (  String correct : riddleMap.get(riddle)) {    final Sentence expected=ConversationParser.parse(correct,new SimilarExprMatcher());    if (answer.matchesFull(expected)) {      return true;    }  }  return false;}  }
class C{  private SharedDeployment createNewDeployment(GridDeploymentMetadata meta,boolean isCache){  assert Thread.holdsLock(mux);  assert meta.parentLoader() == null;  IgniteUuid ldrId=IgniteUuid.fromUuid(ctx.localNodeId());  GridDeploymentClassLoader clsLdr;  if (meta.deploymentMode() == CONTINUOUS || meta.participants() == null) {    clsLdr=new GridDeploymentClassLoader(ldrId,meta.userVersion(),meta.deploymentMode(),false,ctx,ctx.config().getClassLoader() != null ? ctx.config().getClassLoader() : U.gridClassLoader(),meta.classLoaderId(),meta.senderNodeId(),comm,ctx.config().getNetworkTimeout(),log,ctx.config().getPeerClassLoadingLocalClassPathExclude(),ctx.config().getPeerClassLoadingMissedResourcesCacheSize(),meta.deploymentMode() == CONTINUOUS,false);    if (meta.participants() != null)     for (    Map.Entry<UUID,IgniteUuid> e : meta.participants().entrySet())     clsLdr.register(e.getKey(),e.getValue());    if (log.isDebugEnabled())     log.debug("Created class loader in CONTINUOUS mode or without participants " + "[ldr=" + clsLdr + ", meta="+ meta+ ']');  } else {    assert meta.deploymentMode() == SHARED;    clsLdr=new GridDeploymentClassLoader(ldrId,meta.userVersion(),meta.deploymentMode(),false,ctx,U.gridClassLoader(),meta.participants(),comm,ctx.config().getNetworkTimeout(),log,ctx.config().getPeerClassLoadingLocalClassPathExclude(),ctx.config().getPeerClassLoadingMissedResourcesCacheSize(),false,false);    if (log.isDebugEnabled())     log.debug("Created classloader in SHARED mode with participants " + "[ldr=" + clsLdr + ", meta="+ meta+ ']');  }  SharedDeployment dep=new SharedDeployment(meta.deploymentMode(),clsLdr,ldrId,meta.userVersion(),meta.alias());  if (log.isDebugEnabled())   log.debug("Created new deployment: " + dep);  if (isCache) {    List<SharedDeployment> deps=F.addIfAbsent(cache,meta.userVersion(),new LinkedList<SharedDeployment>());    assert deps != null;    deps.add(dep);    if (log.isDebugEnabled())     log.debug("Added deployment to cache: " + cache);  }  return dep;}  }
class C{  public void put(String hostname,InetAddress[] addresses){  cache.put(hostname,new AddressCacheEntry(addresses));}  }
class C{  public LRS(int L,int R,ClassificationDataSet cds,Classifier evaluater,int folds){  search(cds,L,R,evaluater,folds);}  }
class C{  public static void addMap(Section[] sections,MixedItemSection mapSection){  if (sections == null) {    throw new NullPointerException("sections == null");  }  if (mapSection.items().size() != 0) {    throw new IllegalArgumentException("mapSection.items().size() != 0");  }  ArrayList<MapItem> items=new ArrayList<MapItem>(50);  for (  Section section : sections) {    ItemType currentType=null;    Item firstItem=null;    Item lastItem=null;    int count=0;    for (    Item item : section.items()) {      ItemType type=item.itemType();      if (type != currentType) {        if (count != 0) {          items.add(new MapItem(currentType,section,firstItem,lastItem,count));        }        currentType=type;        firstItem=item;        count=0;      }      lastItem=item;      count++;    }    if (count != 0) {      items.add(new MapItem(currentType,section,firstItem,lastItem,count));    } else     if (section == mapSection) {      items.add(new MapItem(mapSection));    }  }  mapSection.add(new UniformListItem<MapItem>(ItemType.TYPE_MAP_LIST,items));}  }
class C{  public void testCacheImpacts() throws Exception {  assertU(adoc("id","9","str","c","float","-3.2","int","42"));  assertU(adoc("id","7","str","c","float","-3.2","int","-1976"));  assertU(adoc("id","2","str","c","float","-3.2","int","666"));  assertU(adoc("id","0","str","b","float","64.5","int","-42"));  assertU(adoc("id","5","str","b","float","64.5","int","2001"));  assertU(adoc("id","8","str","b","float","64.5","int","4055"));  assertU(adoc("id","6","str","a","float","64.5","int","7"));  assertU(adoc("id","1","str","a","float","64.5","int","7"));  assertU(adoc("id","4","str","a","float","11.1","int","6"));  assertU(adoc("id","3","str","a","float","11.1","int","3"));  assertU(commit());  final Collection<String> allFieldNames=getAllSortFieldNames();  final SolrInfoMBean filterCacheStats=h.getCore().getInfoRegistry().get("filterCache");  assertNotNull(filterCacheStats);  final SolrInfoMBean queryCacheStats=h.getCore().getInfoRegistry().get("queryResultCache");  assertNotNull(queryCacheStats);  final long preQcIn=(Long)queryCacheStats.getStatistics().get("inserts");  final long preFcIn=(Long)filterCacheStats.getStatistics().get("inserts");  final long preFcHits=(Long)filterCacheStats.getStatistics().get("hits");  SentinelIntSet ids=assertFullWalkNoDups(10,params("q","*:*","rows","" + TestUtil.nextInt(random(),1,11),"fq","-id:[1 TO 2]","fq","-id:[6 TO 7]","fl","id","sort",buildRandomSort(allFieldNames)));  assertEquals(6,ids.size());  final long postQcIn=(Long)queryCacheStats.getStatistics().get("inserts");  final long postFcIn=(Long)filterCacheStats.getStatistics().get("inserts");  final long postFcHits=(Long)filterCacheStats.getStatistics().get("hits");  assertEquals("query cache inserts changed",preQcIn,postQcIn);  assertEquals("filter cache did not grow correctly",3,postFcIn - preFcIn);  assertTrue("filter cache did not have any new cache hits",0 < postFcHits - preFcHits);}  }
class C{  protected String doIt() throws Exception {  m_project=new MProject(getCtx(),m_C_Project_ID,get_TrxName());  if (!(MProject.PROJECTCATEGORY_WorkOrderJob.equals(m_project.getProjectCategory()) || MProject.PROJECTCATEGORY_AssetProject.equals(m_project.getProjectCategory())))   throw new IllegalArgumentException("Project not Work Order or Asset =" + m_project.getProjectCategory());  log.info(m_project.toString());  if (m_M_InOut_ID != 0)   return issueReceipt();  if (m_S_TimeExpense_ID != 0)   return issueExpense();  if (m_M_Locator_ID == 0)   throw new IllegalArgumentException("Locator missing");  if (m_C_ProjectLine_ID != 0)   return issueProjectLine();  return issueInventory();}  }
class C{  public HostInfo editHost(int hostId,HostInfo newHostInfo){  ContentValues values=new ContentValues();  values.put(MediaContract.HostsColumns.NAME,newHostInfo.getName());  values.put(MediaContract.HostsColumns.ADDRESS,newHostInfo.getAddress());  values.put(MediaContract.HostsColumns.PROTOCOL,newHostInfo.getProtocol());  values.put(MediaContract.HostsColumns.HTTP_PORT,newHostInfo.getHttpPort());  values.put(MediaContract.HostsColumns.TCP_PORT,newHostInfo.getTcpPort());  values.put(MediaContract.HostsColumns.USERNAME,newHostInfo.getUsername());  values.put(MediaContract.HostsColumns.PASSWORD,newHostInfo.getPassword());  values.put(MediaContract.HostsColumns.MAC_ADDRESS,newHostInfo.getMacAddress());  values.put(MediaContract.HostsColumns.WOL_PORT,newHostInfo.getWolPort());  values.put(MediaContract.HostsColumns.USE_EVENT_SERVER,newHostInfo.getUseEventServer());  values.put(MediaContract.HostsColumns.EVENT_SERVER_PORT,newHostInfo.getEventServerPort());  context.getContentResolver().update(MediaContract.Hosts.buildHostUri(hostId),values,null,null);  hosts=getHosts(true);  HostInfo newHost=null;  for (  HostInfo host : hosts) {    if (host.getId() == hostId) {      newHost=host;      break;    }  }  return newHost;}  }
class C{  public boolean addInKmlFolder(KmlFolder kmlFolder,String url){  Log.d(BonusPackHelper.LOG_TAG,"OverpassAPIProvider:addInKmlFolder:" + url);  String jString=BonusPackHelper.requestStringFromUrl(url);  if (jString == null) {    Log.e(BonusPackHelper.LOG_TAG,"OverpassAPIProvider: request failed.");    return false;  }  try {    JsonParser parser=new JsonParser();    JsonElement json=parser.parse(jString);    JsonObject jResult=json.getAsJsonObject();    JsonArray jElements=jResult.get("elements").getAsJsonArray();    for (    JsonElement j : jElements) {      JsonObject jo=j.getAsJsonObject();      KmlPlacemark placemark=new KmlPlacemark();      placemark.mGeometry=buildGeometry(jo);      placemark.mId=jo.get("id").getAsString();      if (jo.has("tags")) {        JsonObject jTags=jo.get("tags").getAsJsonObject();        if (jTags.has("name"))         placemark.mName=jTags.get("name").getAsString();        Set<Map.Entry<String,JsonElement>> entrySet=jTags.entrySet();        for (        Map.Entry<String,JsonElement> entry : entrySet) {          String key=entry.getKey();          String value=entry.getValue().getAsString();          placemark.setExtendedData(key,value);        }      }      kmlFolder.add(placemark);    }    return true;  } catch (  JsonSyntaxException e) {    Log.e(BonusPackHelper.LOG_TAG,"OverpassAPIProvider: parsing error.");    return false;  }}  }
class C{  @Override public void run(){  Collections.sort(files);  for (int i=files.size() - 1; i >= 0; i--) {    new File(files.get(i)).delete();  }}  }
class C{  @LargeTest public void testThumbnailForH264VGADifferentDuration() throws Exception {  final String videoItemFilename=INPUT_FILE_PATH + "H264_BP_640x480_30fps_256kbps_1_17.mp4";  final int atTime=0;  final int atTime1=100;  final int atTime2=200;  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final MediaVideoItem mediaVideoItem=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",videoItemFilename,renderingMode);  final int outWidth=mediaVideoItem.getWidth();  final int outHeight=mediaVideoItem.getHeight();  final Bitmap thumbNailBmp=mediaVideoItem.getThumbnail(outWidth,outHeight,atTime);  validateThumbnail(thumbNailBmp,outWidth,outHeight);  final Bitmap thumbNailBmpAt100=mediaVideoItem.getThumbnail(outWidth,outHeight,atTime1);  validateThumbnail(thumbNailBmpAt100,outWidth,outHeight);  final Bitmap thumbNailBmpAt200=mediaVideoItem.getThumbnail(outWidth,outHeight,atTime2);  validateThumbnail(thumbNailBmpAt200,outWidth,outHeight);}  }
class C{  public Vector3 add(float values){  return this.set(this.x + values,this.y + values,this.z + values);}  }
class C{  public boolean isIgnoreProcessingTime(){  Object oo=get_Value(COLUMNNAME_IsIgnoreProcessingTime);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private static boolean comprobarNombreLogicoFicheroEnDocumento(List docsRegister,int idDoc,String name){  for (Iterator itDocs=docsRegister.iterator(); itDocs.hasNext(); ) {    AxDoch axdoch=(AxDoch)itDocs.next();    if (axdoch.getId() == idDoc) {      for (Iterator itPages=axdoch.getPages().iterator(); itPages.hasNext(); ) {        AxPageh page=(AxPageh)itPages.next();        if (page.getName().equals(name)) {          return true;        }      }    }  }  return false;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.PROPERTY_ASSIGNMENT__DECLARED_NAME:    return basicSetDeclaredName(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public QLFFilesCollection(Class<F> featureClass){  this.featureClass=featureClass;}  }
class C{  public Instance placeSymbol(Symbol symbol,Transform matrix2,AlphaTransform cxform,int ratio,int clipDepth){  Transform matrix=matrix2;  int depth=timeline.getAvailableDepth();  Instance inst=new Instance(symbol,depth);  timeline.setAvailableDepth(depth + 1);  if (matrix == null) {    matrix=new Transform();  }  Placement placement=new Placement(inst,matrix,cxform,null,ratio,clipDepth,frameNumber,false,false,null);  placements.add(placement);  return inst;}  }
class C{  public static void deleteRecursive(@NonNull File fileOrDirectory){  deleteRecursive(fileOrDirectory,Collections.EMPTY_LIST);}  }
class C{  public static boolean equals(SpatialComparable box1,SpatialComparable box2){  if (box1.getDimensionality() != box2.getDimensionality()) {    return false;  }  for (int i=0; i < box1.getDimensionality(); i++) {    if (box1.getMin(i) != box2.getMin(i)) {      return false;    }    if (box1.getMax(i) != box2.getMax(i)) {      return false;    }  }  return true;}  }
class C{  public static void writeln(double d,int postDecimalDigits){  writeln(d,postDecimalDigits,true);}  }
class C{  public void disconnect(){  mSource=DISCONNECTED;  mPriority=0;}  }
class C{  public Builder stop(){  return apply(new Stop(tag));}  }
class C{  public static void validate(Source source) throws Exception {  validate(schema,source,ErrorCodes.X_MALFORMED_GLOBALCONF);}  }
class C{  @Override public String convertToString(EDataType eDataType,Object instanceValue){switch (eDataType.getClassifierID()) {case SGenPackage.PARAMETER_TYPES:    return convertParameterTypesToString(eDataType,instanceValue);default :  throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");}}  }
class C{  public void testGetPropertyNames(){  Object introspectedTarget=new Target();  Object hashedTarget=new ArbitraryTarget();  Set<String> expResult=new HashSet<>(2);  Set<String> itResult=Beans.getPropertyNames(introspectedTarget);  Set<String> htResult=Beans.getPropertyNames(hashedTarget);  expResult.add(CLASS);  assertEquals(expResult,Beans.getPropertyNames(new Object()));  expResult.add(PROPERTY_NAMES);  expResult.add(STRING_PROPERTY);  expResult.add(INDEXED_PROPERTY);  assertEquals(expResult,itResult);  assertEquals(expResult,htResult);  expResult.add(NOT_A_PROPERTY);  assertNotSame(expResult,htResult);}  }
class C{  @ApiOperation(value="Uninstall SymmetricDS on the specified engine") @RequestMapping(value="engine/{engine}/uninstall",method=RequestMethod.POST) @ResponseStatus(HttpStatus.NO_CONTENT) @ResponseBody public final void postUninstallByEngine(@PathVariable("engine") String engineName){  uninstallImpl(getSymmetricEngine(engineName));}  }
class C{  public short partition(){  return (short)token.vbucketID();}  }
class C{  private static boolean isIdentifierName(String k){  int n=k.length();  if (n == 0) {    return false;  }  if (!Character.isJavaIdentifierStart(k.charAt(0))) {    return false;  }  for (int i=1; i < n; ++i) {    if (!Character.isJavaIdentifierPart(k.charAt(i))) {      return false;    }  }  return true;}  }
class C{  public boolean handleCopyConflict(Cluster srcCluster,Cluster destCluster,Partition srcPartition,Partition existingDestPartition){  return true;}  }
class C{  public final TXCommitMessage processed(TXCommitMessage processedMess){  final TXCommitMessage mess;  final Object key=processedMess.getTrackerKey();synchronized (this.txInProgress) {    mess=(TXCommitMessage)this.txInProgress.remove(key);    if (mess != null) {      this.txHistory[this.lastHistoryItem++]=key;      if (lastHistoryItem >= txHistory.length) {        lastHistoryItem=0;      }      if (txInProgress.isEmpty()) {        this.txInProgress.notifyAll();      }    }  }  if (mess != null) {synchronized (mess) {      mess.setProcessed(true);      mess.notifyAll();    }  }  return mess;}  }
class C{  BinaryMN(int kind,int base_name,int[] plist){  this.kind=kind;  this.baseMN=base_name;  this.params=plist;}  }
class C{  public static Boolean and(Boolean left,Boolean right){  return left && right;}  }
class C{  @Override public void buildTrapEntries(Hashtable<InetAddress,Vector<String>> dest){}  }
class C{  private void performVariationFullDuplication(IR ir){  HashMap<BasicBlock,BasicBlock> origToDupMap=new HashMap<BasicBlock,BasicBlock>();  HashSet<BasicBlock> exceptionHandlerBlocks=new HashSet<BasicBlock>();  cbsReg=ir.regpool.makeTempInt();  duplicateCode(ir,origToDupMap,exceptionHandlerBlocks);  insertCBSChecks(ir,origToDupMap,exceptionHandlerBlocks);  adjustPointersInDuplicatedCode(ir,origToDupMap);  removeInstrumentationFromOrig(ir,origToDupMap);  if (ir.options.fuzzyMatchMETHOD_TO_PRINT(ir.method.toString())) {    ir.verify("End of Framework");  }}  }
class C{  @Override protected List<PhotoItem> doInBackground(ContentResolver... contentResolvers){  if (mMinPhotoId != FilmstripItemBase.QUERY_ALL_MEDIA_ID) {    Log.v(TAG,"updating media metadata with photos newer than id: " + mMinPhotoId);    final ContentResolver cr=contentResolvers[0];    return mPhotoItemFactory.queryAll(PhotoDataQuery.CONTENT_URI,mMinPhotoId);  }  return new ArrayList<>(0);}  }
class C{  public Quaterniond rotateXYZ(double angleX,double angleY,double angleZ){  return rotateXYZ(angleX,angleY,angleZ,this);}  }
class C{  @DSSafe(DSCat.IPC_CALLBACK) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:45.580 -0500",hash_original_method="2469457C965E8FC7C139A1D414384428",hash_generated_method="42C86E9B0B120923F19E3F5FDF13C046") @Override public void handleMessage(Message msg){  mResultMsg=Message.obtain();  mResultMsg.copyFrom(msg);synchronized (mLockObject) {    mLockObject.notify();  }}  }
class C{  public static boolean loadProperties(Properties props,String dir,String file){  File propsFile=new File(dir,file);  try {    InputStream propsStream=new FileInputStream(propsFile);    props.load(propsStream);    if (logger.isLoggable(Level.FINE)) {      logger.fine("Found " + propsFile);    }    return true;  } catch (  java.io.FileNotFoundException e) {    if (logger.isLoggable(Level.FINE)) {      logger.fine("File not found -  \"" + propsFile + "\"");    }  }catch (  java.io.IOException e) {    logger.warning("Caught IO Exception reading \"" + propsFile + "\"");    e.printStackTrace();  }catch (  java.security.AccessControlException ace) {  }  return false;}  }
class C{  public boolean sameRegisterPropertiesAs(RegisterOperand other){  return this.register == other.register && this.flags == other.flags && this.flags2 == other.flags2 && this.guard == other.guard && this.nextInDefUseList == other.nextInDefUseList;}  }
class C{  @Override protected boolean isSuccessful(final Player player){  final int random=Rand.roll1D100();  return (random <= (getSuccessProbability(player) * 100));}  }
class C{  final public MutableString replace(final CharSequence s,final CharSequence r){  final int length=length();  final int ns=s.length();  final int nr=r.length();  if (ns == 0) {    if (nr == 0)     return this;    throw new IllegalArgumentException("You cannot replace the empty string with a nonempty string");  }  final int bloomFilter=buildFilter(s,ns);  final int diff=ns - nr;  int i, j, l;  if (diff >= 0) {    final char[] a=array;    if ((i=indexOf(s,ns,0,bloomFilter)) != -1) {      getChars(r,0,nr,a,i);      j=i + nr;      l=diff;      while ((i=indexOf(s,ns,i + ns,bloomFilter)) != -1) {        if (diff != 0)         System.arraycopy(a,j + l,a,j,i - j - l);        l+=diff;        j=i + ns - l;        getChars(r,0,nr,a,j - nr);      }      if (diff != 0)       System.arraycopy(a,j + l,a,j,length - l - j);      l=length - l;      if (hashLength < 0) {        hashLength=-1;        if (diff != 0) {          final char[] newArray=new char[l];          System.arraycopy(a,0,newArray,0,l);          array=newArray;        }      } else       hashLength=l;    }  } else {    j=0;    i=length;    while ((i=lastIndexOf(s,ns,i - ns,bloomFilter)) != -1)     j++;    if (j != 0) {      int m=l=length + j * -diff;      expand(m);      final char[] a=array;      i=j=length;      while ((i=lastIndexOf(s,ns,i - ns,bloomFilter)) != -1) {        System.arraycopy(a,i + ns,a,l-=j - i - ns,j - i - ns);        getChars(r,0,nr,a,l-=nr);        j=i;      }      if (hashLength < 0)       hashLength=-1; else       hashLength=m;    }  }  return this;}  }
class C{  protected void delete(Object[] row) throws SQLException {  String query=getQuery(row);  try {    Term term=new Term(LUCENE_FIELD_QUERY,query);    indexAccess.writer.deleteDocuments(term);  } catch (  IOException e) {    throw convertException(e);  }}  }
class C{  public static String escape(String s){  return JSONValue.escape(s);}  }
class C{  public static Distribution guessAlpha(DataSet d){  return new LogUniform(1e-12,1e3);}  }
class C{  public static ITextSelection emptySelection(){  return NULL;}  }
class C{  @Override public Object _init_(final IScope scope){  if (scope.interrupted()) {    return null;  }  createSimulation(getParameterValues(),scheduled);  super._init_(scope);  return this;}  }
class C{  public void removeFilter(String pattern){  patterns.remove(pattern);}  }
class C{  private void dispatchMediaKeyEvent(KeyEvent keyEvent,boolean needWakeLock){  if (needWakeLock) {    mMediaEventWakeLock.acquire();  }  Intent keyIntent=new Intent(Intent.ACTION_MEDIA_BUTTON,null);  keyIntent.putExtra(Intent.EXTRA_KEY_EVENT,keyEvent);synchronized (mRCStack) {    if (!mRCStack.empty()) {      try {        mRCStack.peek().mMediaIntent.send(mContext,needWakeLock ? WAKELOCK_RELEASE_ON_FINISHED : 0,keyIntent,AudioService.this,mAudioHandler);      } catch (      CanceledException e) {        Log.e(TAG,"Error sending pending intent " + mRCStack.peek());        e.printStackTrace();      }    } else {      if (needWakeLock) {        keyIntent.putExtra(EXTRA_WAKELOCK_ACQUIRED,WAKELOCK_RELEASE_ON_FINISHED);      }      final long ident=Binder.clearCallingIdentity();      try {        mContext.sendOrderedBroadcastAsUser(keyIntent,UserHandle.ALL,null,mKeyEventDone,mAudioHandler,Activity.RESULT_OK,null,null);      }  finally {        Binder.restoreCallingIdentity(ident);      }    }  }}  }
class C{  @SuppressWarnings("unchecked") public static <K,V>ImmutableSortedMap<K,V> copyOfSorted(SortedMap<K,? extends V> map){  Comparator<? super K> comparator=map.comparator();  if (comparator == null) {    comparator=(Comparator<? super K>)NATURAL_ORDER;  }  if (map instanceof ImmutableSortedMap) {    @SuppressWarnings("unchecked") ImmutableSortedMap<K,V> kvMap=(ImmutableSortedMap<K,V>)map;    if (!kvMap.isPartialView()) {      return kvMap;    }  }  return fromEntries(comparator,true,map.entrySet());}  }
class C{  public RAckParser(String rack){  super(rack);}  }
class C{  public TouchlessScrollView(Context context){  this(context,null);}  }
class C{  public void reset(){  contentDigest.reset();}  }
class C{  @Override public void applyDamage(){  super.applyDamage();  menShooting=men;}  }
class C{  public DrawerBuilder withActionBarDrawerToggle(boolean actionBarDrawerToggleEnabled){  this.mActionBarDrawerToggleEnabled=actionBarDrawerToggleEnabled;  return this;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  double k=0.5;  double z;  int rIn, gIn, bIn, rOut, gOut, bOut;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  k=Double.parseDouble(args[2]);  if (k < 0) {    k=0;  }  if (k > 1) {    k=1;  }  if (inputHeader.isEmpty() || outputHeader.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    int progress=0;    WhiteboxRaster input=new WhiteboxRaster(inputHeader,"r");    if (input.getDataScale() != WhiteboxRasterBase.DataScale.RGB) {      showFeedback("The input image should be of an RGB data scale.");      return;    }    int rows=input.getNumberRows();    int cols=input.getNumberColumns();    double noData=input.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setDataScale(WhiteboxRasterBase.DataScale.RGB);    double[] data;    int minVal;    double rMax=0, gMax=0, bMax=0;    for (row=0; row < rows; row++) {      data=input.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          rIn=((int)z & 0xFF);          gIn=(((int)z >> 8) & 0xFF);          bIn=(((int)z >> 16) & 0xFF);          minVal=rIn;          if (gIn < minVal) {            minVal=gIn;          }          if (bIn < minVal) {            minVal=bIn;          }          rOut=(int)(rIn - k * minVal);          gOut=(int)(gIn - k * minVal);          bOut=(int)(bIn - k * minVal);          if (rOut > 255) {            rOut=255;          }          if (gOut > 255) {            gOut=255;          }          if (bOut > 255) {            bOut=255;          }          if (rOut < 0) {            rOut=0;          }          if (gOut < 0) {            gOut=0;          }          if (bOut < 0) {            bOut=0;          }          if (rOut > rMax) {            rMax=rOut;          }          if (gOut > gMax) {            gMax=gOut;          }          if (bOut > bMax) {            bMax=bOut;          }          z=(double)((255 << 24) | (bOut << 16) | (gOut << 8)| rOut);          output.setValue(row,col,z);        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    for (row=0; row < rows; row++) {      data=input.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          rIn=((int)z & 0xFF);          gIn=(((int)z >> 8) & 0xFF);          bIn=(((int)z >> 16) & 0xFF);          rOut=(int)(rIn / rMax * 255);          gOut=(int)(gIn / gMax * 255);          bOut=(int)(bIn / bMax * 255);          if (rOut > 255) {            rOut=255;          }          if (gOut > 255) {            gOut=255;          }          if (bOut > 255) {            bOut=255;          }          if (rOut < 0) {            rOut=0;          }          if (gOut < 0) {            gOut=0;          }          if (bOut < 0) {            bOut=0;          }          z=(double)((255 << 24) | (bOut << 16) | (gOut << 8)| rOut);          output.setValue(row,col,z);        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    input.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  float dependentUpdate(float newTime){  time=newTime;  if (creator != null) {    return creator.handleTimebaseUpdate(this,time);  }  return Float.POSITIVE_INFINITY;}  }
class C{  private static BinaryEnumObjectImpl doReadBinaryEnum(BinaryInputStream in,BinaryContext ctx,EnumType type){  return new BinaryEnumObjectImpl(ctx,type.typeId,type.clsName,in.readInt());}  }
class C{  public boolean appliesOnlyToBlockScopedElements(){  return false;}  }
class C{  public void commitTransaction() throws SQLException {  try {    this.currentConection.commit();  } catch (  SQLException e) {    if (this.currentConection != null) {      this.currentConection.rollback();    }  } finally {    this.currentConection.setAutoCommit(false);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Boolean.valueOf(stack.getUIMgr() != null && stack.getUIMgr().getUIClientType() == UIClient.REMOTE_UI);}  }
class C{  public void addNode(final int index,BezierPath.Node p){  path.add(index,p);  invalidate();}  }
class C{  public Date lastModified(){  return this.lastModified.toDate();}  }
class C{  public static boolean checkVolumesForVolumeGroupPartialRequest(DbClient dbClient,List<BlockObject> volumes){  boolean partial=false;  for (  BlockObject volume : volumes) {    if (volume.checkInternalFlags(Flag.VOLUME_GROUP_PARTIAL_REQUEST)) {      partial=true;      break;    }  }  return partial;}  }
class C{  public SmtpClient(String host) throws IOException {  super();  if (host != null) {    try {      openServer(host);      mailhost=host;      return;    } catch (    Exception e) {    }  }  try {    String s;    mailhost=java.security.AccessController.doPrivileged(new sun.security.action.GetPropertyAction("mail.host"));    if (mailhost != null) {      openServer(mailhost);      return;    }  } catch (  Exception e) {  }  try {    mailhost="localhost";    openServer(mailhost);  } catch (  Exception e) {    mailhost="mailhost";    openServer(mailhost);  }}  }
class C{  public static Bitmap scaleAndCenterCropBitmap(Bitmap source,int newHeight,int newWidth){  if (source == null) {    return null;  }  int sourceWidth=source.getWidth();  int sourceHeight=source.getHeight();  float xScale=(float)newWidth / sourceWidth;  float yScale=(float)newHeight / sourceHeight;  float scale=Math.max(xScale,yScale);  float scaledWidth=scale * sourceWidth;  float scaledHeight=scale * sourceHeight;  float left=(newWidth - scaledWidth) / 2;  float top=(newHeight - scaledHeight) / 2;  RectF targetRect=new RectF(left,top,left + scaledWidth,top + scaledHeight);  Bitmap destination=Bitmap.createBitmap(newWidth,newHeight,source.getConfig());  Canvas canvas=new Canvas(destination);  canvas.drawBitmap(source,null,targetRect,null);  return destination;}  }
class C{  public boolean isString(String key){  Object val=get(key);  return val instanceof String;}  }
class C{  private void validateUnion(InputNode node,LabelMap map,Label label) throws Exception {  String[] list=label.getPaths();  for (  String key : list) {    map.getLabel(key);  }  if (label.isInline()) {    criteria.set(label,null);  }  validate(node,label);}  }
class C{  public boolean containsKey(final E key){  return entries.containsKey(key);}  }
