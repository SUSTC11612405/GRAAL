class C{  public SHAvite512(){  super();}  }
class C{  public boolean isCreditApproved(){  Object oo=get_Value(COLUMNNAME_IsCreditApproved);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public ActionListener(Context context,Connection connection,Action action,String clientHandle,String... additionalArgs){  this.context=context;  this.c=connection;  this.action=action;  this.clientHandle=clientHandle;  this.additionalArgs=additionalArgs;}  }
class C{  public void connect(DTNHost h){  if (DEBUG)   Debug.p("WARNING: using deprecated DTNHost.connect" + "(DTNHost) Use DTNHost.forceConnection(DTNHost,null,true) instead");  forceConnection(h,null,true);}  }
class C{  @Override public boolean loadDeferred(){  return true;}  }
class C{  public AgentAppEnvironmentView createEnvironmentView(){  return new EightPuzzleView();}  }
class C{  public String string(){  return this.value.toLowerCase(Locale.ENGLISH);}  }
class C{  public void putEntryInNotifRegionMap(DistributedMember member,Region<NotificationKey,Notification> region){  notifRegionMap.put(member,region);}  }
class C{  public void resetOriginals(){  mStartingStartTrim=0;  mStartingEndTrim=0;  mStartingRotation=0;  setStartTrim(0);  setEndTrim(0);  setRotation(0);}  }
class C{  public Builder flushIntervalMs(int flushIntervalMs){  this._flushIntervalMs=flushIntervalMs;  return this;}  }
class C{  private static float[] RGBtoCMYK(float[] rgb,float[] cmyk){  if (cmyk == null) {    cmyk=new float[4];  }  float max=ColorModelHSL.max(rgb[0],rgb[1],rgb[2]);  if (max > 0.0f) {    cmyk[0]=1.0f - rgb[0] / max;    cmyk[1]=1.0f - rgb[1] / max;    cmyk[2]=1.0f - rgb[2] / max;  } else {    cmyk[0]=0.0f;    cmyk[1]=0.0f;    cmyk[2]=0.0f;  }  cmyk[3]=1.0f - max;  return cmyk;}  }
class C{  public JSONWriter key(String string) throws JSONException {  if (string == null) {    throw new JSONException("Null key.");  }  if (this.mode == 'k') {    try {      this.stack[this.top - 1].putOnce(string,Boolean.TRUE);      if (this.comma) {        this.writer.write(',');      }      this.writer.write(JSONObject.quote(string));      this.writer.write(':');      this.comma=false;      this.mode='o';      return this;    } catch (    IOException e) {      throw new JSONException(e);    }  }  throw new JSONException("Misplaced key.");}  }
class C{  public boolean isConstant(){  return false;}  }
class C{  protected OFControllerRole extractNiciraRoleReply(OFMessage vendorMessage){  if (!(vendorMessage instanceof OFNiciraControllerRoleReply))   return null;  OFNiciraControllerRoleReply roleReply=(OFNiciraControllerRoleReply)vendorMessage;  return NiciraRoleUtils.niciraToOFRole(roleReply);}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public static boolean openInBlender(FileObject file){  String path=file.getPath().replace("/",File.separator);  return runBlender(path,true);}  }
class C{  public static void main(String[] args) throws IOException {  FileInputStream in=new FileInputStream(args[0]);  byte[] buf=new byte[in.available()];  in.read(buf);  SWFParser parser=new SWFParser();  ParseResult parseResult=parser.getParse(new Content("file:" + args[0],"file:" + args[0],buf,"application/x-shockwave-flash",new Metadata(),NutchConfiguration.create()));  Parse p=parseResult.get("file:" + args[0]);  System.out.println("Parse Text:");  System.out.println(p.getText());  System.out.println("Parse Data:");  System.out.println(p.getData());}  }
class C{  public void testGetElementsByTagNameNS1() throws Throwable {  Document doc;  Document newDoc;  DocumentType docType=null;  DOMImplementation domImpl;  NodeList childList;  String nullNS=null;  doc=(Document)load("staffNS",builder);  domImpl=doc.getImplementation();  newDoc=domImpl.createDocument(nullNS,"root",docType);  childList=newDoc.getElementsByTagNameNS("*","*");  assertEquals("documentgetelementsbytagnameNS01",1,childList.getLength());}  }
class C{  public static <E>ImmutableList<E> of(E e1,E e2,E e3,E e4,E e5,E e6,E e7,E e8){  return construct(e1,e2,e3,e4,e5,e6,e7,e8);}  }
class C{  public boolean isVirtualFileUnderRoot(@NotNull VirtualFile file){  for (  VirtualFile root : getTemplateRoots()) {    if (VfsUtil.isAncestor(root,file,true)) {      return true;    }  }  return false;}  }
class C{  public BufferingOutputStream(OutputStream other,int bufferSize){  this.other=other;  this.buf=new byte[bufferSize];}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList acronymList;  Node testNode;  NamedNodeMap attributes;  Attr titleAttr;  String value;  Node textNode;  Node retval;  Node refChild=null;  doc=(Document)load("hc_staff",true);  acronymList=doc.getElementsByTagName("acronym");  testNode=acronymList.item(3);  attributes=testNode.getAttributes();  titleAttr=(Attr)attributes.getNamedItem("title");  if (("text/html".equals(getContentType()))) {{      boolean success=false;      try {        textNode=doc.createCDATASection("terday");      } catch (      DOMException ex) {        success=(ex.code == DOMException.NOT_SUPPORTED_ERR);      }      assertTrue("throw_NOT_SUPPORTED_ERR",success);    }  } else {    textNode=doc.createCDATASection("terday");{      boolean success=false;      try {        retval=titleAttr.insertBefore(textNode,refChild);      } catch (      DOMException ex) {        success=(ex.code == DOMException.HIERARCHY_REQUEST_ERR);      }      assertTrue("throw_HIERARCHY_REQUEST_ERR",success);    }  }}  }
class C{  public boolean isOpera(){  return isOpera;}  }
class C{  public Method var(int opcode,int var){  return this.var(opcode,var,var);}  }
class C{  public void writeLink(File file) throws IOException {  writeLink(file,file.getPath());}  }
class C{  public static Document toDocument(InputStream in) throws SAXException, IOException {  return toDocument(new InputSource(in));}  }
class C{  public static void assertEqual(long expected,long actual,String errorMessage){  if (verbose) {    log("assertEqual(" + expected + ", "+ actual+ ", "+ errorMessage+ ")");  }  assertBool(expected == actual,errorMessage);}  }
class C{  public void removeSelectionPaths(TreePath[] paths){  if (paths != null && selection != null && paths.length > 0) {    if (!canPathsBeRemoved(paths)) {      clearSelection();    } else {      Vector<PathPlaceHolder> pathsToRemove=null;      for (int removeCounter=paths.length - 1; removeCounter >= 0; removeCounter--) {        if (paths[removeCounter] != null) {          if (uniquePaths.get(paths[removeCounter]) != null) {            if (pathsToRemove == null)             pathsToRemove=new Vector<PathPlaceHolder>(paths.length);            uniquePaths.remove(paths[removeCounter]);            pathsToRemove.addElement(new PathPlaceHolder(paths[removeCounter],false));          }        }      }      if (pathsToRemove != null) {        int removeCount=pathsToRemove.size();        TreePath beginLeadPath=leadPath;        if (removeCount == selection.length) {          selection=null;        } else {          Enumeration<TreePath> pEnum=uniquePaths.keys();          int validCount=0;          selection=new TreePath[selection.length - removeCount];          while (pEnum.hasMoreElements()) {            selection[validCount++]=pEnum.nextElement();          }        }        if (leadPath != null && uniquePaths.get(leadPath) == null) {          if (selection != null) {            leadPath=selection[selection.length - 1];          } else {            leadPath=null;          }        } else         if (selection != null) {          leadPath=selection[selection.length - 1];        } else {          leadPath=null;        }        updateLeadIndex();        resetRowSelection();        notifyPathChange(pathsToRemove,beginLeadPath);      }    }  }}  }
class C{  private void processRestMethodParameter(ParameterSource<JavaClassSource> parameterSource,Operation operation,Map<String,String> methodParamDescriptions) throws MojoExecutionException {  log.debug("Processing parameter \"" + parameterSource.getName() + "\".");  try {    AnnotationSource<JavaClassSource> requestParamAnnotationSource=parameterSource.getAnnotation(RequestParam.class);    AnnotationSource<JavaClassSource> requestBodyAnnotationSource=parameterSource.getAnnotation(RequestBody.class);    AnnotationSource<JavaClassSource> pathVariableAnnotationSource=parameterSource.getAnnotation(PathVariable.class);    if (requestParamAnnotationSource != null) {      log.debug("Parameter \"" + parameterSource.getName() + "\" is a RequestParam.");      QueryParameter queryParameter=new QueryParameter();      queryParameter.name(requestParamAnnotationSource.getStringValue("value").trim());      queryParameter.setRequired(BooleanUtils.toBoolean(requestParamAnnotationSource.getStringValue("required")));      setParameterType(parameterSource,queryParameter);      operation.parameter(queryParameter);      setParamDescription(parameterSource,methodParamDescriptions,queryParameter);    } else     if (requestBodyAnnotationSource != null) {      log.debug("Parameter \"" + parameterSource.getName() + "\" is a RequestBody.");      exampleClassNames.add(parameterSource.getType().getSimpleName());      BodyParameter bodyParameter=new BodyParameter();      XmlType xmlType=getXmlType(Class.forName(parameterSource.getType().getQualifiedName()));      String name=xmlType.name().trim();      bodyParameter.name(name);      bodyParameter.setRequired(true);      bodyParameter.setSchema(new RefModel(name));      operation.parameter(bodyParameter);      setParamDescription(parameterSource,methodParamDescriptions,bodyParameter);    } else     if (pathVariableAnnotationSource != null) {      log.debug("Parameter \"" + parameterSource.getName() + "\" is a PathVariable.");      PathParameter pathParameter=new PathParameter();      pathParameter.name(pathVariableAnnotationSource.getStringValue("value").trim());      setParameterType(parameterSource,pathParameter);      operation.parameter(pathParameter);      setParamDescription(parameterSource,methodParamDescriptions,pathParameter);    }  } catch (  ClassNotFoundException e) {    throw new MojoExecutionException("Unable to instantiate class \"" + parameterSource.getType().getQualifiedName() + "\". Reason: "+ e.getMessage(),e);  }}  }
class C{  private void testAnonymousTlsSession() throws Exception {  assertTrue("Failed assumption: the default value of ENABLE_ANONYMOUS_TLS" + " property should be true",SysProperties.ENABLE_ANONYMOUS_TLS);  boolean ssl=true;  Task task=null;  ServerSocket serverSocket=null;  Socket socket=null;  try {    serverSocket=NetUtils.createServerSocket(PORT,ssl);    serverSocket.setSoTimeout(WAIT_LONGER_MILLIS);    task=createServerSocketTask(serverSocket);    task.execute(TASK_PREFIX + "AnonEnabled");    Thread.sleep(WAIT_MILLIS);    socket=NetUtils.createLoopbackSocket(PORT,ssl);    assertTrue("loopback anon socket should be connected",socket.isConnected());    SSLSession session=((SSLSocket)socket).getSession();    assertTrue("TLS session should be valid when anonymous TLS is enabled",session.isValid());    assertContains(session.getCipherSuite(),"_anon_");  }  finally {    closeSilently(socket);    closeSilently(serverSocket);    if (task != null) {      assertNull(task.getException());      task.join();    }  }}  }
class C{  private static Typeface createFromFile(final String filePath){  try {    return Typeface.createFromFile(filePath);  } catch (  Exception e) {    LogUtil.e("create typeface " + filePath + " from file failed",e);    return null;  }}  }
class C{  public static boolean isExternal(int flags){  return (flags & FLAG_EXT) == FLAG_EXT;}  }
class C{  public CutAction(){  super(cutAction);}  }
class C{  public CoalesceExpression add(String propertyName){  this.getChildren().add(new PropertyValueExpression(propertyName));  return this;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:10.248 -0500",hash_original_method="70D58F36ADD2B32D6B4870D6C7A22922",hash_generated_method="433764DDD4E9EAA1E0D1F44F5A4A6BD2") @Override public int hashCode(){  return Arrays.hashCode(ipaddress);}  }
class C{  ReasonsMask intersect(ReasonsMask mask){  ReasonsMask _mask=new ReasonsMask();  _mask.addReasons(new ReasonsMask(_reasons & mask.getReasons()));  return _mask;}  }
class C{  private Chronology selectChronology(Chronology chrono){  chrono=DateTimeUtils.getChronology(chrono);  if (iChrono != null) {    chrono=iChrono;  }  if (iZone != null) {    chrono=chrono.withZone(iZone);  }  return chrono;}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) public boolean isReportableError(Throwable exception){  boolean isReportable=true;  if (exception instanceof Exception) {    Method method=resolver.resolveMethod((Exception)exception);    if ((method != null) && (ErrorInformation.class.isAssignableFrom(method.getReturnType()))) {      List<Object> parameterValues=new ArrayList<>();      Class[] parameterTypes=method.getParameterTypes();      for (      Class clazz : parameterTypes) {        if (clazz.isAssignableFrom(exception.getClass())) {          parameterValues.add(exception);        } else {          parameterValues.add(null);        }      }      try {        ErrorInformation errorInformation=(ErrorInformation)method.invoke(this,parameterValues.toArray());        if (errorInformation.getStatusCode() != HttpStatus.INTERNAL_SERVER_ERROR.value()) {          isReportable=false;        }      } catch (      IllegalAccessException|InvocationTargetException ex) {        logError("Unable to invoke method \"" + method.getDeclaringClass().getName() + "."+ method.getName()+ "\" so couldn't determine if exception is reportable. Defaulting to true.",ex);      }    }  }  return isReportable;}  }
class C{  public void parse(final SetCookie cookie,final String value) throws MalformedCookieException {  if (cookie == null) {    throw new IllegalArgumentException("Cookie may not be null");  }  if (value == null) {    throw new MalformedCookieException("Missing value for version attribute");  }  int version=-1;  try {    version=Integer.parseInt(value);  } catch (  NumberFormatException e) {    version=-1;  }  if (version < 0) {    throw new MalformedCookieException("Invalid cookie version.");  }  cookie.setVersion(version);}  }
class C{  public String buildWorkflow(){  LOGGER.info("buildWorkflow Method is called");  setDepartmentSelected(getDepartment());  setAdditionalRuleSelected(getAdditionalRule());  if (!checkEistingMatrix()) {    addActionError("WorkFlow already exists for " + getDepartmentstring() + " departments");    return NEW;  }  final SimpleDateFormat dateFormat=new SimpleDateFormat("ddMMyyyy");  Date formatfromDate=null;  Date formatCurrentDate=null;  try {    formatCurrentDate=dateFormat.parse(dateFormat.format(new Date()));    formatfromDate=dateFormat.parse(dateFormat.format(getFromDate()));  } catch (  final ParseException e) {  }  if (formatfromDate.before(formatCurrentDate) && getDepartment().length > 1) {    addActionError("Only one department can be selected if you are entering matrix for older dates ");    return NEW;  }  if (formatfromDate.before(formatCurrentDate)) {    if (!checkExistingMatrixforLegacy()) {      final Calendar calendar=Calendar.getInstance();      calendar.setTime(getLegacyDate());      calendar.add(Calendar.DAY_OF_YEAR,-1);      addActionMessage("A workflow is already present from " + this.sdf.format(getLegacyDate()) + ". The workflow you are about to add will be valid for records created between "+ this.sdf.format(getFromDate())+ " and "+ this.sdf.format(calendar.getTime()));    }  }  setMode(EDIT);  this.workFlowMatrixDetails.add(new WorkFlowMatrixDetails());  this.workFlowMatrixRejectDetails.add(new WorkFlowMatrixDetails());  LOGGER.info("buildWorkflow Method is ended");  return NEW;}  }
class C{  public Builder includeMeterFields(Set<String> fields){  this.includeMeterFields=fields;  return this;}  }
class C{  public static Timestamp invoiceDueDate(int p_C_Invoice_ID) throws SQLException {  if (p_C_Invoice_ID == 0)   return null;  Timestamp DueDate=null;  String sql="SELECT C_PaymentTerm_ID, DateInvoiced " + "FROM C_Invoice " + "WHERE C_Invoice_ID=?";  PreparedStatement pstmt=Adempiere.prepareStatement(sql);  pstmt.setInt(1,p_C_Invoice_ID);  ResultSet rs=pstmt.executeQuery();  if (rs.next()) {    int C_PaymentTerm_ID=rs.getInt(1);    Timestamp DocDate=rs.getTimestamp(2);    DueDate=dueDate(C_PaymentTerm_ID,DocDate);  }  rs.close();  pstmt.close();  return DueDate;}  }
class C{  public void regenerate(Projection proj){  Debug.message("eomg","EditableOMPoly.regenerate()");  if (poly != null) {    poly.generate(proj);    setGrabPoints(poly);  }  generateGrabPoints(proj);}  }
class C{  public static WorldIconImage fromPixelTransparency(BufferedImage image){  int imageMarginTop=findFirstSolidPixelFromTop(image);  int imageMarginBottom=findFirstSolidPixelFromBottom(image);  int frameHeight=Math.max(0,image.getHeight() - imageMarginTop - imageMarginBottom);  return new WorldIconImage(image,0,imageMarginTop,image.getWidth(),frameHeight);}  }
class C{  private List<List<ProofStepBwChGoal>> folbcask(FOLKnowledgeBase KB,BCAskAnswerHandler ansHandler,List<Literal> goals,Map<Variable,Term> theta){  List<List<ProofStepBwChGoal>> thisLevelProofSteps=new ArrayList<List<ProofStepBwChGoal>>();  if (goals.isEmpty()) {    thisLevelProofSteps.add(new ArrayList<ProofStepBwChGoal>());    return thisLevelProofSteps;  }  Literal qDelta=KB.subst(theta,goals.get(0));  for (  Clause r : KB.getAllDefiniteClauses()) {    r=KB.standardizeApart(r);    Map<Variable,Term> thetaDelta=KB.unify(r.getPositiveLiterals().get(0).getAtomicSentence(),qDelta.getAtomicSentence());    if (null != thetaDelta) {      List<Literal> newGoals=new ArrayList<Literal>(r.getNegativeLiterals());      newGoals.addAll(goals.subList(1,goals.size()));      Map<Variable,Term> composed=compose(KB,thetaDelta,theta);      List<List<ProofStepBwChGoal>> lowerLevelProofSteps=folbcask(KB,ansHandler,newGoals,composed);      ansHandler.addProofStep(lowerLevelProofSteps,r,qDelta,composed);      thisLevelProofSteps.addAll(lowerLevelProofSteps);    }  }  return thisLevelProofSteps;}  }
class C{  public void stopMachine(String workspaceId,String machineId) throws NotFoundException, ServerException, ConflictException {  requireNonNull(workspaceId,"Required non-null workspace id");  requireNonNull(machineId,"Required non-null machine id");  final WorkspaceImpl workspace=normalizeState(workspaceDao.get(workspaceId));  checkWorkspaceIsRunning(workspace,format("stop machine with ID '%s' of",machineId));  runtimes.stopMachine(workspaceId,machineId);}  }
class C{  private void processExceptionHandlers(ExceptionHandlerMap exceptions){  int[] tryStartPC=exceptions.getStartPC();  int[] tryEndPC=exceptions.getEndPC();  int[] tryHandlerPC=exceptions.getHandlerPC();  int tryLength=tryHandlerPC.length;  for (int i=0; i < tryLength; i++) {    int handlerBBNum=byteToBlockMap[tryHandlerPC[i]];    BasicBlock tryHandlerBB=basicBlocks[handlerBBNum];    int throwBBNum=0;    for (int k=tryStartPC[i]; k < tryEndPC[i]; k++) {      if (byteToBlockMap[k] == BasicBlock.NOTBLOCK)       continue;      if (byteToBlockMap[k] != throwBBNum) {        throwBBNum=byteToBlockMap[k];        BasicBlock throwBB=basicBlocks[throwBBNum];        tryHandlerBB.addUniquePredecessor(throwBB);      }    }  }}  }
class C{  public void nextNull() throws IOException {  peek();  if (token != JsonToken.NULL) {    throw new IllegalStateException("Expected null but was " + token + " at line "+ getLineNumber()+ " column "+ getColumnNumber());  }  advance();}  }
class C{  @Nullable public static PsiElement resolveChild(@Nullable final PsiElement parent,@NotNull final String referencedName,@Nullable final PsiFile containingFile,boolean fileOnly,boolean checkForPackage){  if (parent == null) {    return null;  } else   if (parent instanceof PyFile) {    return resolveInPackageModule((PyFile)parent,referencedName,containingFile,fileOnly,checkForPackage);  } else   if (parent instanceof PsiDirectory) {    return resolveInPackageDirectory(parent,referencedName,containingFile,fileOnly,checkForPackage);  } else {    return resolveMemberFromReferenceTypeProviders(parent,referencedName);  }}  }
class C{  private boolean addCallFor(TestCase test,VariableReference callee,GenericAccessibleObject<?> call,int position){  logger.trace("addCallFor {}",callee.getName());  int previousLength=test.size();  currentRecursion.clear();  try {    if (call.isMethod()) {      addMethodFor(test,callee,(GenericMethod)call.copyWithNewOwner(callee.getGenericClass()),position);    } else     if (call.isField()) {      addFieldFor(test,callee,(GenericField)call.copyWithNewOwner(callee.getGenericClass()),position);    }    return true;  } catch (  ConstructionFailedException e) {    logger.debug("Inserting call {} has failed. Removing statements",call);    int lengthDifference=test.size() - previousLength;    for (int i=lengthDifference - 1; i >= 0; i--) {      if (logger.isDebugEnabled()) {        logger.debug("  Removing statement: " + test.getStatement(position + i).getCode());      }      test.remove(position + i);    }    if (logger.isDebugEnabled()) {      logger.debug("Test after removal: " + test.toCode());    }    return false;  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private static IUndoManager createUndoManager(){  return new UndoManager2();}  }
class C{  protected boolean afterDelete(boolean success){  if (success) {    int docactDel=DB.executeUpdate("DELETE FROM AD_Document_Action_Access WHERE C_DocType_ID=" + get_IDOld(),get_TrxName());    log.fine("Delete AD_Document_Action_Access=" + docactDel + " for C_DocType_ID: "+ get_IDOld());  }  return success;}  }
class C{  public CopyMSCollector(){  los=new LargeObjectLocal(Plan.loSpace);  mature=new MarkSweepLocal(CopyMS.msSpace);  trace=new CopyMSTraceLocal(global().trace);}  }
class C{  private void validateState(State current){  ValidationUtils.validateState(current);}  }
class C{  public static <K,V>CacheConfiguration<K,V> cache(String name,CacheJdbcPojoStoreFactory<K,V> storeFactory){  throw new IllegalStateException("Please run Ignite Schema Import Utility as described in README.txt");}  }
class C{  public boolean isUpdateable(){  Object oo=get_Value(COLUMNNAME_IsUpdateable);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public RenameArguments(String newName,boolean updateReferences){  Assert.isNotNull(newName);  fNewName=newName;  fUpdateReferences=updateReferences;}  }
class C{  public boolean encrypt(){  return encrypt;}  }
class C{  IoBuffer fetchOutNetBuffer(){  IoBuffer answer=outNetBuffer;  if (answer == null) {    return emptyBuffer;  }  outNetBuffer=null;  return answer.shrink();}  }
class C{  public boolean enter(long maxWait,TimeUnit unit) throws Exception {  long startMs=System.currentTimeMillis();  boolean hasMaxWait=(unit != null);  long maxWaitMs=hasMaxWait ? TimeUnit.MILLISECONDS.convert(maxWait,unit) : Long.MAX_VALUE;  boolean readyPathExists=(client.checkExists().usingWatcher(watcher).forPath(readyPath) != null);  try {    client.create().creatingParentContainersIfNeeded().withMode(CreateMode.EPHEMERAL).forPath(ourPath);  } catch (  KeeperException.NodeExistsException ignore) {  }  boolean result=(readyPathExists || internalEnter(startMs,hasMaxWait,maxWaitMs));  if (connectionLost.get()) {    throw new KeeperException.ConnectionLossException();  }  return result;}  }
class C{  public static boolean isClassAvailableForProject(@NotNull Project project,@NotNull String className){  PsiClass classInModule=JavaPsiFacade.getInstance(project).findClass(className,new EverythingGlobalScope(project));  return classInModule != null;}  }
class C{  @Override protected void register(ContainerCapabilityFactory containerCapabilityFactory){  containerCapabilityFactory.registerContainerCapability("jetty4x",ServletContainerCapability.class);  containerCapabilityFactory.registerContainerCapability("jetty5x",ServletContainerCapability.class);  containerCapabilityFactory.registerContainerCapability("jetty6x",ServletContainerCapability.class);  containerCapabilityFactory.registerContainerCapability("jetty7x",ServletContainerCapability.class);  containerCapabilityFactory.registerContainerCapability("jetty8x",ServletContainerCapability.class);  containerCapabilityFactory.registerContainerCapability("jetty9x",ServletContainerCapability.class);}  }
class C{  public boolean isExpandEmptyElements(){  return expandEmptyElements;}  }
class C{  public MiniDrawer withIncludeSecondaryDrawerItems(boolean includeSecondaryDrawerItems){  this.mIncludeSecondaryDrawerItems=includeSecondaryDrawerItems;  return this;}  }
class C{  public final void testValidateContainsOnlyAllowedSpecialCharacters(){  char[] allowedCharacters=new char[]{'-'};  LetterValidator characterValidator=new LetterValidator("foo",Case.LOWERCASE,false,allowedCharacters);  assertTrue(characterValidator.validate("----"));}  }
class C{  public boolean dedicatedServer(){  return dedicatedServer;}  }
class C{  public Anonymous_entryOrExitAction_1_ createAnonymous_entryOrExitAction_1_(){  Anonymous_entryOrExitAction_1_Impl anonymous_entryOrExitAction_1_=new Anonymous_entryOrExitAction_1_Impl();  return anonymous_entryOrExitAction_1_;}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return VERSIONS;case 2:  return TIMESTAMP;default :return null;}}  }
class C{  public static boolean isAutoNew(Properties ctx,int WindowNo){  if (ctx == null)   throw new IllegalArgumentException("Require Context");  String s=getContext(ctx,WindowNo,"AutoNew",false);  if (s != null) {    if (s.equals("Y"))     return true; else     return false;  }  return isAutoNew(ctx);}  }
class C{  public static void mixStereoInMemory(int inAddr,int inOutAddr,int samples){  int length=samples << 2;  IMemoryReader inReader=MemoryReader.getMemoryReader(inAddr,length,4);  IMemoryReader inOutReader=MemoryReader.getMemoryReader(inOutAddr,length,4);  IMemoryWriter inOutWriter=MemoryWriter.getMemoryWriter(inOutAddr,length,4);  for (int i=0; i < samples; i++) {    int inStereoValue=inReader.readNext();    if (inStereoValue == 0) {      inOutReader.skip(1);      inOutWriter.skip(1);    } else {      int inOutStereoValue=inOutReader.readNext();      inOutStereoValue=mixStereo(inStereoValue,inOutStereoValue);      inOutWriter.writeNext(inOutStereoValue);    }  }  inOutWriter.flush();}  }
class C{  public Blade loadAppConf(String location){  Assert.notBlank(location);  try {    config.add(location);  } catch (  Exception e) {  }  return this;}  }
class C{  public void testAddressHostAndPort() throws Exception {  check(new OdbcConfiguration().setEndpointAddress("127.0.0.1:9999"),true);  check(new OdbcConfiguration().setEndpointAddress("127.0.0.1:9999"),false);}  }
class C{  public void compile(List<JavaFileObject> sourceFileObjects,List<String> classnames,Iterable<? extends Processor> processors){  if (processors != null && processors.iterator().hasNext())   explicitAnnotationProcessingRequested=true;  if (hasBeenUsed)   throw new AssertionError("attempt to reuse JavaCompiler");  hasBeenUsed=true;  options.put(XLINT_CUSTOM.text + "-" + LintCategory.OPTIONS.option,"true");  options.remove(XLINT_CUSTOM.text + LintCategory.OPTIONS.option);  start_msec=now();  try {    initProcessAnnotations(processors);    delegateCompiler=processAnnotations(enterTrees(stopIfError(CompileState.PARSE,parseFiles(sourceFileObjects))),classnames);    delegateCompiler.compile2();    delegateCompiler.close();    elapsed_msec=delegateCompiler.elapsed_msec;  } catch (  Abort ex) {    if (devVerbose)     ex.printStackTrace(System.err);    throw ex;  } finally {    if (procEnvImpl != null)     procEnvImpl.close();  }}  }
class C{  private static int checkClassTypeSignature(final String signature,int pos){  pos=checkChar('L',signature,pos);  pos=checkIdentifier(signature,pos);  while (getChar(signature,pos) == '/') {    pos=checkIdentifier(signature,pos + 1);  }  if (getChar(signature,pos) == '<') {    pos=checkTypeArguments(signature,pos);  }  while (getChar(signature,pos) == '.') {    pos=checkIdentifier(signature,pos + 1);    if (getChar(signature,pos) == '<') {      pos=checkTypeArguments(signature,pos);    }  }  return checkChar(';',signature,pos);}  }
class C{  public TraceList switchTargetList(final TraceList trace){  final TraceList oldList=eventList;  eventList=trace;  return oldList;}  }
class C{  public static byte[] encodeBase64(final byte[] binaryData,final boolean isChunked,final boolean urlSafe,final int maxResultSize){  if (binaryData == null || binaryData.length == 0) {    return binaryData;  }  final Base64 b64=isChunked ? new Base64(urlSafe) : new Base64(0,CHUNK_SEPARATOR,urlSafe);  final long len=b64.getEncodedLength(binaryData);  if (len > maxResultSize) {    throw new IllegalArgumentException("Input array too big, the output array would be bigger (" + len + ") than the specified maximum size of "+ maxResultSize);  }  return b64.encode(binaryData);}  }
class C{  private void addReference(final int sourcePosition,final int referencePosition){  if (srcAndRefPositions == null) {    srcAndRefPositions=new int[6];  }  if (referenceCount >= srcAndRefPositions.length) {    int[] a=new int[srcAndRefPositions.length + 6];    System.arraycopy(srcAndRefPositions,0,a,0,srcAndRefPositions.length);    srcAndRefPositions=a;  }  srcAndRefPositions[referenceCount++]=sourcePosition;  srcAndRefPositions[referenceCount++]=referencePosition;}  }
class C{  public void registerShareKey(String shareKey){  shareKeys.add(shareKey);}  }
class C{  public static ASN1Primitive convertValueToObject(X509Extension ext) throws IllegalArgumentException {  try {    return ASN1Primitive.fromByteArray(ext.getValue().getOctets());  } catch (  IOException e) {    throw new IllegalArgumentException("can't convert extension: " + e);  }}  }
class C{  public void removeChangeListener(ChangeListener l){  if (listeners == null)   return;  listeners.remove(l);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public Rsp request(Req req) throws SolrServerException, IOException {  Rsp rsp=new Rsp();  Exception ex=null;  boolean isUpdate=req.request instanceof IsUpdateRequest;  List<ServerWrapper> skipped=new ArrayList<>(req.getNumDeadServersToTry());  for (  String serverStr : req.getServers()) {    serverStr=normalize(serverStr);    ServerWrapper wrapper=zombieServers.get(serverStr);    if (wrapper != null) {      if (skipped.size() < req.getNumDeadServersToTry())       skipped.add(wrapper);      continue;    }    rsp.server=serverStr;    HttpSolrServer server=makeServer(serverStr);    ex=doRequest(server,req,rsp,isUpdate,false,null);    if (ex == null) {      return rsp;    }  }  for (  ServerWrapper wrapper : skipped) {    ex=doRequest(wrapper.solrServer,req,rsp,isUpdate,true,wrapper.getKey());    if (ex == null) {      return rsp;    }  }  if (ex == null) {    throw new SolrServerException("No live SolrServers available to handle this request");  } else {    throw new SolrServerException("No live SolrServers available to handle this request:" + zombieServers.keySet(),ex);  }}  }
class C{  public SerialNode(int address,int type){  setNodeAddress(address);  setNodeType(type);  for (int i=0; i < MAXSENSORS + 1; i++) {    sensorArray[i]=null;    sensorLastSetting[i]=Sensor.UNKNOWN;    sensorTempSetting[i]=Sensor.UNKNOWN;  }  for (int i=0; i < MAXTURNOUTS + 1; i++) {    outputArray[i]=false;    outputBitChanged[i]=false;  }  setMustSend();  hasActiveSensors=false;  SerialTrafficController.instance().registerNode(this);}  }
class C{  private void push(JSONObject jo) throws JSONException {  if (this.top >= maxdepth) {    throw new JSONException("Nesting too deep.");  }  this.stack[this.top]=jo;  this.mode=jo == null ? 'a' : 'k';  this.top+=1;}  }
class C{  public Builder byMonthDay(Collection<Integer> monthDays){  byMonthDay.addAll(monthDays);  return this;}  }
class C{  public void moveInDir(int dir){  position=position.translated(dir);  if (!getGame().getBoard().contains(position)) {    throw new RuntimeException("Coordinate off the board.");  }}  }
class C{  private static void addAndCreateJarLibraryEntry(IJavaProject javaProject,IPath projectRelativeLibraryPath) throws CoreException, UnsupportedEncodingException {  IFile lib=javaProject.getProject().getFile(projectRelativeLibraryPath);  ResourceUtils.createFolderStructure(javaProject.getProject(),projectRelativeLibraryPath.removeLastSegments(1));  ResourceUtils.createFile(lib.getFullPath(),"");  JavaProjectUtilities.addRawClassPathEntry(javaProject,JavaCore.newLibraryEntry(lib.getFullPath(),null,null,true));}  }
class C{  private void alignStmt(ColumnFormat cf) throws ParserException, IOException {  match(ALIGN);  Token t=matchOne(alignKeyWords);  cf.setAlignment(Alignment.toAlignment(t.sval));  String alignString=t.sval;  log(pdebug,"Parsed: align -> " + alignString);}  }
class C{  protected void validateTimestamps(Date startTime,Date endTime){  if ((startTime != null) && (endTime != null)) {    if (endTime.before(startTime)) {      throw APIException.badRequests.endTimeBeforeStartTime(startTime.toString(),endTime.toString());    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:24.467 -0500",hash_original_method="CB5AF71091E3878E29C27274F2628D83",hash_generated_method="A6D27B47389CE75E453374C63941561F") public synchronized void requestConsumed(){  this.nextSeqno=Long.valueOf(this.getRemoteSeqNumber() + 1);  if (sipStack.isLoggingEnabled()) {    this.sipStack.getStackLogger().logDebug("Request Consumed -- next consumable Request Seqno = " + this.nextSeqno);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public void drawSeries(Canvas canvas,Paint paint,List<Float> points,List<Double> values,XYSeriesRenderer seriesRenderer,SupportSeriesRender supportSeriesRender,float yAxisValue,int seriesIndex,int startIndex){  int seriesNr=mDataset.getSeriesCount();  int length=points.size();  paint.setColor(seriesRenderer.getColor());  paint.setStyle(Style.FILL);  float halfDiffX=getHalfDiffX(points,length,seriesNr);  for (int i=0; i < length; i+=2) {    float x=points.get(i);    float y=points.get(i + 1);    drawBar(canvas,x,yAxisValue,x,y,halfDiffX,seriesNr,seriesIndex,paint);  }  paint.setColor(seriesRenderer.getColor());}  }
class C{  public static double geometricPdf(int k,double p){  if (k < 0)   throw new IllegalArgumentException();  return p * Math.pow(1 - p,k);}  }
class C{  private EmrStep buildEmrStepFromAwsStep(Step step,boolean verbose){  EmrStep emrStep=new EmrStep();  emrStep.setId(step.getId());  emrStep.setStepName(step.getName());  emrStep.setStatus(step.getStatus().getState());  if (verbose) {    emrStep.setJarLocation(step.getConfig().getJar());    emrStep.setMainClass(step.getConfig().getMainClass());    emrStep.setScriptArguments(step.getConfig().getArgs());    emrStep.setContinueOnError(step.getActionOnFailure());  }  return emrStep;}  }
class C{  public java.lang.StringBuilder reverse(){  return null;}  }
class C{  public void registerOutParameter(int parameterIndex,SQLType sqlType) throws SQLException {  try {    if (this.wrappedStmt != null) {      ((CallableStatement)this.wrappedStmt).registerOutParameter(parameterIndex,sqlType);    } else {      throw SQLError.createSQLException("No operations allowed after statement closed",SQLError.SQL_STATE_GENERAL_ERROR,this.exceptionInterceptor);    }  } catch (  SQLException sqlEx) {    checkAndFireConnectionError(sqlEx);  }}  }
class C{  public void testMoveRenameFileSourceParentRootDestinationMissingPartially() throws Exception {  IgfsPath file=new IgfsPath("/" + FILE_NEW.name());  create(igfsSecondary,paths(DIR_NEW,SUBDIR_NEW),paths(file));  create(igfs,paths(DIR_NEW),null);  igfs.rename(file,FILE_NEW);  checkExist(igfs,SUBDIR_NEW);  checkExist(igfs,igfsSecondary,FILE_NEW);  checkNotExist(igfs,igfsSecondary,file);}  }
class C{  public int length(){  return namesAndValues.size() / 2;}  }
class C{  @DSSpec(DSCat.IO) @DSSink({DSSinkKind.IO}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:32.746 -0500",hash_original_method="F9EBE9ED855C5E2014EA6CAF53F89130",hash_generated_method="3F4E55B962E176E96CF3299F7DB01ADA") @Override public void write(byte[] buffer,int offset,int byteCount) throws IOException {  Arrays.checkOffsetAndCount(buffer.length,offset,byteCount);  if (currentEntry == null) {    throw new ZipException("No active entry");  }  if (currentEntry.getMethod() == STORED) {    out.write(buffer,offset,byteCount);  } else {    super.write(buffer,offset,byteCount);  }  crc.update(buffer,offset,byteCount);}  }
class C{  public static boolean isLinuxOS(){  String osName=System.getProperty("os.name");  return osName != null && osName.toLowerCase().contains("linux");}  }
class C{  @Override protected void service(HttpServletRequest req,HttpServletResponse rsp) throws ServletException, IOException {  String[] arrPath=(req.getServletPath()).split("\\.");  String pic=PIC_SOURCE + "404.gif";  if (arrPath.length >= 3) {    pic=PIC_SOURCE + ((arrPath[arrPath.length - 3] + "." + arrPath[arrPath.length - 2]).replaceFirst("/",""));    String mime="image/" + arrPath[arrPath.length - 2];    ReqRspUtil.setContentType(rsp,mime);  }  OutputStream os=null;  InputStream is=null;  try {    os=rsp.getOutputStream();    is=getClass().getResourceAsStream(pic);    if (is == null) {      is=getClass().getResourceAsStream(PIC_SOURCE + "404.gif");    }    byte[] buf=new byte[4 * 1024];    int nread=0;    while ((nread=is.read(buf)) >= 0) {      os.write(buf,0,nread);    }  } catch (  FileNotFoundException e) {  }catch (  IOException e) {  } finally {    IOUtil.closeEL(is,os);  }}  }
class C{  public boolean contains(Object o){  return map.containsKey(o);}  }
class C{  private void processFields(final Object component,final Context context,final ContextDestroyer contextDestroyer){  Class<?> componentClass=component.getClass();  while (componentClass != null && !componentClass.equals(Object.class)) {    final Field[] fields=ClassReflection.getDeclaredFields(componentClass);    if (fields != null && fields.length > 0) {      processFields(component,fields,context,contextDestroyer);    }    componentClass=componentClass.getSuperclass();  }}  }
class C{  public VariablesProcessor(String _prefix,boolean staticSensitiveFlag){  this(_prefix,staticSensitiveFlag,new ArrayList<PsiVariable>());}  }
class C{  public byte[] decodeData(byte[] data,int numErrorCorrectionBytes) throws ReedSolomonException, DataTooLargeException {  if (data == null || data.length == 0) {    return null;  }  if (data.length > 256) {    throw new DataTooLargeException("Data exceeds 256 bytes! Too large");  }  int[] dataInts=new int[data.length];  for (int i=0; i < data.length; i++) {    dataInts[i]=data[i] & 0xFF;  }  int totalBytes=data.length - numErrorCorrectionBytes;  decoder.decode(dataInts,numErrorCorrectionBytes);  ByteArrayOutputStream bos=new ByteArrayOutputStream();  for (int i=0; i < totalBytes && i < dataInts.length; i++) {    bos.write(dataInts[i]);  }  return bos.toByteArray();}  }
class C{  public void initPortParameters(SerialPort port){  initialized=false;  if (port != null) {    cbPort.setSelectedItem(port.getName());    cbBaudrate.setSelectedItem(String.valueOf(port.getBaudRate()));    cbParity.setSelectedIndex(port.getParity());    cbDataBits.setSelectedIndex(port.getDataBits() - 5);    cbStopBits.setSelectedIndex(port.getStopBits() - 1);    int prt=port.getFlowControlMode();    cbProtocolRx.setSelectedIndex((prt & SerialPort.FLOWCONTROL_RTSCTS_IN) != 0 ? 1 : (prt & SerialPort.FLOWCONTROL_XONXOFF_IN) != 0 ? 2 : 0);    cbProtocolTx.setSelectedIndex((prt & SerialPort.FLOWCONTROL_RTSCTS_OUT) != 0 ? 1 : (prt & SerialPort.FLOWCONTROL_XONXOFF_OUT) != 0 ? 2 : 0);    btnDSR.setSelected(port.isDSR());    btnCTS.setSelected(port.isCTS());    btnCD.setSelected(port.isCD());    btnDTR.setSelected(port.isDTR());    btnRTS.setSelected(port.isRTS());  }  initialized=true;}  }
class C{  public static InternalOrder readOrder(StreamInput in) throws IOException {  byte id=in.readByte();switch (id) {case 1:    return (InternalOrder)Histogram.Order.KEY_ASC;case 2:  return (InternalOrder)Histogram.Order.KEY_DESC;case 3:return (InternalOrder)Histogram.Order.COUNT_ASC;case 4:return (InternalOrder)Histogram.Order.COUNT_DESC;case 0:boolean asc=in.readBoolean();String key=in.readString();return new InternalOrder.Aggregation(key,asc);default :throw new RuntimeException("unknown histogram order");}}  }
class C{  protected final int meanRGBA(int i,int j,int size){  int red=0;  int gre=0;  int blu=0;  int alp=0;  for (int r=i; r < (i + size); ++r) {    mmbBuf.get(r,j * numBytes,size * numBytes,meanArray);    for (int c=0; c < size * 4; c+=4) {      red+=MathUtil.unsignedByte(meanArray[c]);      gre+=MathUtil.unsignedByte(meanArray[c + 1]);      blu+=MathUtil.unsignedByte(meanArray[c + 2]);      alp+=MathUtil.unsignedByte(meanArray[c + 3]);    }  }  red=red / (size * size);  gre=gre / (size * size);  blu=blu / (size * size);  alp=alp / (size * size);  return (MathUtil.bytes2Int((byte)red,(byte)gre,(byte)blu,(byte)alp));}  }
class C{  public Builder customProperty(String name,Boolean value){  return customProperty(new Property(name,value));}  }
class C{  public Polynomial times(Polynomial B){  double[] b=B.a;  double[] prod=new double[order + B.order + 1];  Arrays.fill(prod,0.0);  for (int i=0; i <= B.order; i++) {    for (int j=0; j <= order; j++) {      prod[i + j]+=b[i] * a[j];    }  }  return new Polynomial(prod);}  }
class C{  protected int widestDim(double[][] nodeRanges,double[][] universe){  final int classIdx=m_Instances.classIndex();  double widest=0.0;  int w=-1;  if (m_NormalizeDimWidths) {    for (int i=0; i < nodeRanges.length; i++) {      double newWidest=nodeRanges[i][NormalizableDistance.R_WIDTH] / universe[i][NormalizableDistance.R_WIDTH];      if (newWidest > widest) {        if (i == classIdx) {          continue;        }        widest=newWidest;        w=i;      }    }  } else {    for (int i=0; i < nodeRanges.length; i++) {      if (nodeRanges[i][NormalizableDistance.R_WIDTH] > widest) {        if (i == classIdx) {          continue;        }        widest=nodeRanges[i][NormalizableDistance.R_WIDTH];        w=i;      }    }  }  return w;}  }
class C{  public AddReviewerResult(String reviewer,String error){  this(reviewer);  this.error=error;}  }
class C{  public void paint(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).paint(a,b);  }}  }
class C{  public Iterator<Item> iterator(){  return new ListIterator<Item>(first);}  }
class C{  public static SyntaxScheme load(Font baseFont,InputStream in) throws IOException {  if (baseFont == null) {    baseFont=RSyntaxTextArea.getDefaultFont();  }  return XmlParser.load(baseFont,in);}  }
class C{  public void changeTextColor(int textColor){  for (  Piece mPiece : mPieces) {    mPiece.setTextColor(textColor);  }  display();}  }
class C{  public void onSuccess(IMqttToken token){  if (originalMqttVersion == MqttConnectOptions.MQTT_VERSION_DEFAULT) {    options.setMqttVersion(MqttConnectOptions.MQTT_VERSION_DEFAULT);  }  userToken.internalTok.markComplete(token.getResponse(),null);  userToken.internalTok.notifyComplete();  userToken.internalTok.setClient(this.client);  if (reconnect) {    comms.notifyReconnect();  }  if (userCallback != null) {    userToken.setUserContext(userContext);    userCallback.onSuccess(userToken);  }  if (mqttCallbackExtended != null) {    String serverURI=comms.getNetworkModules()[comms.getNetworkModuleIndex()].getServerURI();    mqttCallbackExtended.connectComplete(reconnect,serverURI);  }}  }
class C{  private void fillTables(List<Table> tables,Map<String,int[]> tableProperties){  ISqlTransaction tran=platform.getSqlTemplate().startSqlTransaction();  int rowsInTransaction=0;  for (int x=0; x < repeat; x++) {    int numRowsToGenerate=inputLength;    int numRowsToCommit=maxRowsCommit;    if (useRandomCount) {      numRowsToGenerate=getRand().nextInt(inputLength);      numRowsToGenerate=numRowsToGenerate > 0 ? numRowsToGenerate : 1;      numRowsToCommit=getRand().nextInt(maxRowsCommit);      numRowsToCommit=numRowsToCommit > 0 ? numRowsToCommit : 1;    }    for (int i=0; i < numRowsToGenerate; i++) {      ArrayList<Table> tablesToProcess=new ArrayList<Table>(tables);      while (tablesToProcess.size() > 0) {        Table tableToProcess=tablesToProcess.get(0);        int dmlType=INSERT;        if (tableProperties != null && tableProperties.containsKey(tableToProcess.getName())) {          dmlType=randomIUD(tableProperties.get(tableToProcess.getName()));        } else         if (dmlWeight != null) {          dmlType=randomIUD(dmlWeight);        }        List<Table> groupTables=new ArrayList<Table>();        if (cascading && dmlType == INSERT) {          groupTables.addAll(foreignTables.get(tableToProcess));          if (groupTables.size() > 0) {            log.info("Cascade insert " + tableToProcess.getName() + ": "+ toStringTables(groupTables));          }        } else         if (cascadingSelect && dmlType == INSERT) {          List<Table> foreignList=foreignTables.get(tableToProcess);          for (          Table foreignTable : foreignList) {            if (tables.contains(foreignTable)) {              groupTables.add(foreignTable);            } else {              selectRandomRecord(tran,foreignTable);            }          }        }        groupTables.add(tableToProcess);        if (truncate) {          for (          Table table : groupTables) {            truncateTable(tran,table);          }        }        for (        Table table : groupTables) {switch (dmlType) {case INSERT:            if (verbose) {              log.info("Inserting into table " + table.getName());            }          insertRandomRecord(tran,table);        break;case UPDATE:      if (verbose) {        log.info("Updating record in table " + table.getName());      }    updateRandomRecord(tran,table);  break;case DELETE:if (verbose) {  log.info("Deleting record in table " + table.getName());}deleteRandomRecord(tran,table);break;}if (++rowsInTransaction >= numRowsToCommit) {if (commitDelay > 0) {AppUtils.sleep(commitDelay);}if (percentRollback > 0 && getRand().nextInt(100) <= percentRollback) {if (verbose) {log.info("Rollback " + rowsInTransaction + " rows");}tran.rollback();} else {if (verbose) {log.info("Commit " + rowsInTransaction + " rows");}tran.commit();}rowsInTransaction=0;AppUtils.sleep(interval);}}tablesToProcess.removeAll(groupTables);}clearDependentColumnValues(tables);}if (rowsInTransaction > 0) {if (commitDelay > 0) {AppUtils.sleep(commitDelay);}if (verbose) {log.info("Commit " + rowsInTransaction + " rows");}tran.commit();}}}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0xE4D21302,version=150) public int sceHttpsInit(int rootCertNum,@CanBeNull TPointer rootCertListAddr,@CanBeNull TPointer clientCertAddr,@CanBeNull TPointer keyAddr){  if (isHttpsInit) {    return ERROR_HTTP_ALREADY_INIT;  }  isHttpsInit=true;  return 0;}  }
class C{  public static String htmlEscape(String input){  ParamChecks.nullNotPermitted(input,"input");  StringBuilder result=new StringBuilder();  int length=input.length();  for (int i=0; i < length; i++) {    char c=input.charAt(i);    if (c == '&') {      result.append("&amp;");    } else     if (c == '\"') {      result.append("&quot;");    } else     if (c == '<') {      result.append("&lt;");    } else     if (c == '>') {      result.append("&gt;");    } else     if (c == '\'') {      result.append("&#39;");    } else     if (c == '\\') {      result.append("&#092;");    } else {      result.append(c);    }  }  return result.toString();}  }
class C{  private void refillEntry(int baseHash){  K key=_keys[baseHash];  V value=_values[baseHash];  _keys[baseHash]=null;  _values[baseHash]=null;  int hash=key.hashCode() & _mask;  for (int count=_size; count >= 0; count--) {    if (_values[hash] == null) {      _keys[hash]=key;      _values[hash]=value;      return;    }    hash=(hash + 1) & _mask;  }}  }
class C{  @EventHandler(ignoreCancelled=true) public void onPlayerPickupItem(PlayerPickupItemEvent event){  if (!canInteract(event.getPlayer())) {    event.setCancelled(true);  }}  }
class C{  public static BufferedImage loadCompatibleImage(URL resource) throws IOException {  BufferedImage image=ImageIO.read(resource);  return toCompatibleImage(image);}  }
class C{  public String initFileClassIndexTipText(){  return "The class index of the dataset to initialize the filter with (first and last are valid).";}  }
class C{  public MessageBuilder append(String message){  strBuilder.append(message);  return this;}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0x47940436,version=150) public int sceHttpSetResolveTimeOut(int templateId,int timeout){  return 0;}  }
class C{  public void testAndWait(TestContext context){  Async async=context.async();  client().get("/throttling/dog",null).putHeader(ACCEPT,"application/json").end();}  }
class C{  public int lowestLayer(){  int count=getComponentCount();  if (count > 0)   return getLayer(getComponent(count - 1));  return 0;}  }
class C{  public Parameter ground(Assignment input){  if (input.containsVars(expression.getVariables())) {    try {      double result=expression.evaluate(input);      return new FixedParameter(result);    } catch (    IllegalArgumentException e) {      log.warning("cannot ground " + expression + " with "+ input);    }  }  String filled=expression.toString();  for (  String u : input.getVariables()) {    filled.replaceAll(u,input.getValue(u).toString());  }  return new ComplexParameter(new MathExpression(filled));}  }
class C{  public static Map<Integer,Integer> createIdxFromKey(int keys[]){  Map<Integer,Integer> idxFromKey=new ConcurrentHashMap<Integer,Integer>();  for (int i=0; i < keys.length; i++) {    idxFromKey.put(keys[i],i);  }  return idxFromKey;}  }
class C{  public int size(){  return q.size();}  }
class C{  @Override public boolean isFile(){  return exists();}  }
class C{  protected void initNewTask(final int taskID){  this.articleID=taskID;  this.partCounter=0;  this.revisionCounter=0;  this.revPrevious=null;  this.revCurrent=null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:43.331 -0500",hash_original_method="CBDB2FDC82C5AFE44AFBC6A393E7627D",hash_generated_method="ADFE4528856650CE0B7FC18515D9291E") public ContentLengthOutputStream(final SessionOutputBuffer out,long contentLength){  super();  if (out == null) {    throw new IllegalArgumentException("Session output buffer may not be null");  }  if (contentLength < 0) {    throw new IllegalArgumentException("Content length may not be negative");  }  this.out=out;  this.contentLength=contentLength;}  }
class C{  public Boolean isGuestAutoLockSupported(){  return guestAutoLockSupported;}  }
class C{  public static NetworkSystem current(){  return SystemManager.getCurrentSystem(NetworkSystem.class);}  }
class C{  private static int findNext(boolean reverse,int pos){  boolean backwards=IS_BACKWARDS_CHECKBOX.isSelected();  backwards=backwards ? !reverse : reverse;  String pattern=(String)FIND_FIELD.getSelectedItem();  if (pattern != null && pattern.length() > 0) {    try {      Document doc=textComponent.getDocument();      doc.getText(0,doc.getLength(),SEGMENT);    } catch (    Exception e) {      e.printStackTrace();    }    pos+=textComponent.getSelectedText() == null ? (backwards ? -1 : 1) : 0;    char first=backwards ? pattern.charAt(pattern.length() - 1) : pattern.charAt(0);    char oppFirst=Character.isUpperCase(first) ? Character.toLowerCase(first) : Character.toUpperCase(first);    int start=pos;    boolean wrapped=WRAP_SEARCH_CHECKBOX.isSelected();    int end=backwards ? 0 : SEGMENT.getEndIndex();    pos+=backwards ? -1 : 1;    int length=textComponent.getDocument().getLength();    if (pos > length) {      pos=wrapped ? 0 : length;    }    boolean found=false;    while (!found && (backwards ? pos > end : pos < end)) {      found=!MATCH_CASE_CHECKBOX.isSelected() && SEGMENT.array[pos] == oppFirst;      found=found ? found : SEGMENT.array[pos] == first;      if (found) {        pos+=backwards ? -(pattern.length() - 1) : 0;        for (int i=0; found && i < pattern.length(); i++) {          char c=pattern.charAt(i);          found=SEGMENT.array[pos + i] == c;          if (!MATCH_CASE_CHECKBOX.isSelected() && !found) {            c=Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c);            found=SEGMENT.array[pos + i] == c;          }        }      }      if (!found) {        pos+=backwards ? -1 : 1;        if (pos == end && wrapped) {          pos=backwards ? SEGMENT.getEndIndex() : 0;          end=start;          wrapped=false;        }      }    }    pos=found ? pos : -1;  }  return pos;}  }
class C{  public ParenExpression createParenExpression(){  ParenExpressionImpl parenExpression=new ParenExpressionImpl();  return parenExpression;}  }
class C{  public static void write(Context c,String msg){  String logFile=PrefStore.getLogFile(c);  BufferedWriter writer=null;  try {    writer=new BufferedWriter(new FileWriter(logFile,true));    writer.write(msg);  } catch (  IOException e) {  } finally {    close(writer);  }}  }
class C{  public boolean hasNonEmptyIntersection(PointsToSet other){  return other != null;}  }
class C{  public SpeedTableVarValue(){}  }
class C{  public String toString(){  return "WSessionCtx#" + counter;}  }
class C{  public static void filterInvPeriodical(Image inputImg,int inStart,int inLen,int inStep,Image outputImg,int outStart,int outLen,int outStep,Filter filter){  int fStart=0;  int fEnd=0;  int iStart=0;  for (int i=0; i < outLen; i++) {    fStart=CommonUtil.ceilingHalf(filter.getStart() + i);    fEnd=CommonUtil.floorHalf(filter.getEnd() + i);    iStart=CommonUtil.mod(fStart,inLen);    for (int j=fStart; j <= fEnd; j++) {      outputImg.getData()[outStart + i * outStep]+=filter.getData()[(2 * j) - i - filter.getStart()] * inputImg.getData()[inStart + iStart * inStep];      iStart++;      if (iStart >= inLen) {        iStart-=inLen;      }    }  }}  }
class C{  public void oneTimeWorkerEpilog(WorkerThread wt){  if (verbose)   System.out.println(wt.getName() + ": oneTimeWorkerEpilog() called");}  }
class C{  public static boolean isSameType(final Object array1,final Object array2){  if (array1 == null || array2 == null) {    throw new IllegalArgumentException("The Array must not be null");  }  return array1.getClass().getName().equals(array2.getClass().getName());}  }
class C{  public JValueSlider(String title,Number min,Number max,Number value){  m_min=min;  m_max=max;  m_value=value;  m_slider=new JSlider();  m_label=new JLabel(title);  m_field=new JTextField();  m_listeners=new ArrayList();  m_field.setBorder(null);  setSliderValue();  setFieldValue();  initUI();}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null) {    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  }  return fields;}  }
class C{  public static void checkClassSignature(final String signature){  int pos=0;  if (getChar(signature,0) == '<') {    pos=checkFormalTypeParameters(signature,pos);  }  pos=checkClassTypeSignature(signature,pos);  while (getChar(signature,pos) == 'L') {    pos=checkClassTypeSignature(signature,pos);  }  if (pos != signature.length()) {    throw new IllegalArgumentException(signature + ": error at index " + pos);  }}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public FifoEvictionPolicy(){}  }
class C{  java.sql.Date toSqlDate(Calendar calendar){  return new java.sql.Date(getTimeInMillis(calendar));}  }
class C{  protected Query createRangeQuery(final String field,final String low,final String high,final float boost){  final Query query=createRangeQuery(field,low,high);  query.setBoost(boost);  return query;}  }
class C{  private static void indexDocs(IndexWriter writer) throws Exception {  Random rnd=random();  for (int i=1; i <= 10; i++) {    Document doc=new Document();    String content=getContent(i);    doc.add(newTextField(rnd,"FIELD_1",content,Field.Store.YES));    doc.add(newTextField(rnd,"different_field","diff",Field.Store.YES));    writer.addDocument(doc);  }  for (int i=1; i <= 10; i++) {    Document doc=new Document();    doc.add(newTextField(rnd,"different_field","diff",Field.Store.YES));    writer.addDocument(doc);  }  int highTF=200;  Document doc=new Document();  String content="";  for (int i=0; i < highTF; i++) {    content+="highTF ";  }  doc.add(newTextField(rnd,"FIELD_1",content,Field.Store.YES));  writer.addDocument(doc);  int medium_df=5;  for (int i=0; i < medium_df; i++) {    int tf=25;    Document newdoc=new Document();    String newcontent="";    for (int j=0; j < tf; j++) {      newcontent+="highTFmedDF ";    }    newdoc.add(newTextField(rnd,"FIELD_1",newcontent,Field.Store.YES));    writer.addDocument(newdoc);  }  int targetTF=150;  doc=new Document();  content="";  for (int i=0; i < targetTF; i++) {    content+="TF150 ";  }  doc.add(newTextField(rnd,"different_field",content,Field.Store.YES));  writer.addDocument(doc);  writer.close();}  }
class C{  public void addChartMouseListener(ChartMouseListener listener){  ParamChecks.nullNotPermitted(listener,"listener");  this.chartMouseListeners.add(ChartMouseListener.class,listener);}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  if (savedInstanceState != null) {    Log.d(TAG,"onCreate(): activity re-created");  } else {    Log.d(TAG,"onCreate(): activity created anew");  }}  }
class C{  public void toggleDrawMenu(@Nullable MenuItem item){  View formatTextSliderView=findViewById(R.id.formatTextSlider);  View drawPanelSliderView=findViewById(R.id.drawPanelSlider);  if (drawPanelSliderView.getVisibility() == View.VISIBLE) {    drawPanelSliderView.setVisibility(View.GONE);  } else {    if (formatTextSliderView.getVisibility() == View.VISIBLE) {      formatTextSliderView.setVisibility(View.GONE);    }    hideSoftKeyboard();    drawPanelSliderView.setVisibility(View.VISIBLE);  }  setDrawModeOn(drawPanelSliderView.getVisibility() == View.VISIBLE);}  }
class C{  public void executeFirst(Runnable task){synchronized (internalLock) {    queue.addFirst(task);  }  startQueueWorker();}  }
class C{  public static boolean[] longToBinary(final long src,final int srcPos,final boolean[] dst,final int dstPos,final int nBools){  if (0 == nBools) {    return dst;  }  if (nBools - 1 + srcPos >= 64) {    throw new IllegalArgumentException("nBools-1+srcPos is greather or equal to than 64");  }  int shift=0;  for (int i=0; i < nBools; i++) {    shift=i + srcPos;    dst[dstPos + i]=((0x1 & (src >> shift)) != 0);  }  return dst;}  }
class C{  private static void bindField(Object target,Field field,ParameterAccess parameters){  if (field.isAnnotationPresent(Param.class)) {    Param param=field.getAnnotation(Param.class);    bindParam(param,target,field,parameters);  } else   if (field.isAnnotationPresent(Bindable.class)) {    Bindable bindable=field.getAnnotation(Bindable.class);    boolean simpleBinding=Void.class.equals(bindable.itemType());    if (simpleBinding) {      Object newTarget=getBindTarget(target,field);      bind(newTarget,parameters);    } else {      bindList(bindable.itemType(),target,field,parameters);    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:44.058 -0500",hash_original_method="AEAF2CA6A2A9BD287C2AECB04BDA5589",hash_generated_method="29C14E4FBC90CD3C4AFEE2BE2A31847E") public String name(){  return theName;}  }
class C{  @Deprecated public void requestContactCapabilities(ContactId contact) throws RcsServiceNotRegisteredException, RcsServiceNotAvailableException, RcsGenericException {  if (mApi == null) {    throw new RcsServiceNotAvailableException();  }  try {    List<ContactId> listOfContacts=new ArrayList<>();    listOfContacts.add(contact);    mApi.requestContactCapabilities2(listOfContacts);  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    RcsServiceNotRegisteredException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  public void grantOwnership(String jid) throws XMPPException {  changeAffiliationByAdmin(jid,"owner",null);}  }
class C{  private QueryBuilderKraken parseWatch(){  WatchQueryBuilder query=new WatchQueryBuilder(_tableManager,_sql);  Token token;  String tableName=parseTableName();  query.setTableName(tableName);  _query=query;  ExprKraken whereExpr=null;  token=scanToken();  if (token == Token.WHERE) {    whereExpr=parseExpr();  } else   if (token != null) {    throw error("expected WHERE at '{0}'",token);  }  ParamExpr[] params=_params.toArray(new ParamExpr[_params.size()]);  query.setParams(params);  query.setWhereExpr(whereExpr);  return query;}  }
class C{  public boolean isExitPoint(BasicBlock block){  if (block == null)   throw new IllegalArgumentException("null given");  for (  BytecodeInstruction exitPoint : exitPoints)   if (block.containsInstruction(exitPoint)) {    return true;  }  return false;}  }
class C{  protected DownloadSnapshotTask(final Protos.TaskInfo info){  super(info);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean isDefaultCase(){  return isSwitch && targetCaseValue == null;}  }
class C{  public boolean skipTests(Object mode){  if (mode.toString().equals("local")) {    return true;  } else {    return false;  }}  }
class C{  protected void sendFunctionGroup5(){}  }
class C{  public Holder(T value){  this.value=value;}  }
class C{  public void storeFactorySetting(final String visualStudioHost,final String account,final String collection,final String apiVersion,final Pair<String,String> credentials,final String settingKey,final String factoryUrl) throws ServerException {  final StorageDocument document=DtoFactory.newDto(StorageDocument.class).withId(settingKey).withValue(factoryUrl).withEtag("-1");  final String extensionStorageUrl=extensionStorageHttpUrl(visualStudioHost,account,collection);  final String userCredentials=credentials.first + ":" + credentials.second;  final String basicAuth="Basic " + new String(Base64.getEncoder().encode(userCredentials.getBytes()));  HttpJsonRequest httpJsonRequest=httpJsonRequestFactory.fromUrl(extensionStorageUrl).usePutMethod().setBody(document).setAuthorizationHeader(basicAuth).addQueryParam("api-version",apiVersion);  StorageDocument newDocument;  try {    HttpJsonResponse response=httpJsonRequest.request();    newDocument=response.asDto(StorageDocument.class);    LOG.debug("Factory URL stored on VSTS: {}",newDocument);  } catch (  IOException|ApiException e) {    LOG.error(e.getLocalizedMessage(),e);    throw new ServerException(e.getLocalizedMessage());  }}  }
class C{  protected void appendQuotedString(byte[] text){  append(QUOTED_STRING_FLAG);  arraycopy(text,0,text.length);  append(END_STRING_FLAG);}  }
class C{  public void onBackPressed(PopParams popParams){  Log.v(TAG,String.format("onBackPressed(): fragment[%s], animate[%b]",mContentFragment != null ? mContentFragment.getName() : null,popParams.isAnimate()));  if (mContentFragment != null) {    mContentFragment.onBackPressed(popParams);  }}  }
class C{  private void inferParameterTypesDirectly(Declaration dec,Tree.NamedArgumentList nal,Tree.MemberOrTypeExpression mte){  Reference pr=getInvokedProducedReference(dec,mte);  Functional fun=(Functional)dec;  List<ParameterList> pls=fun.getParameterLists();  if (!pls.isEmpty()) {    Set<Parameter> foundParameters=new HashSet<Parameter>();    ParameterList pl=pls.get(0);    List<Tree.NamedArgument> args=nal.getNamedArguments();    for (int i=0; i < args.size(); i++) {      Tree.NamedArgument arg=args.get(i);      Parameter param=getMatchingParameter(pl,arg,foundParameters);      if (param != null) {        foundParameters.add(param);        arg.setParameter(param);        if (arg instanceof Tree.SpecifiedArgument) {          Tree.SpecifiedArgument sa=(Tree.SpecifiedArgument)arg;          Tree.SpecifierExpression se=sa.getSpecifierExpression();          if (se != null) {            inferParameterTypes(pr,param,se.getExpression(),false);          }        }      }    }    Tree.SequencedArgument sa=nal.getSequencedArgument();    if (sa != null) {      Parameter param=getUnspecifiedParameter(pr,pl,foundParameters);      if (param != null) {        sa.setParameter(param);        for (        Tree.PositionalArgument pa : sa.getPositionalArguments()) {          if (pa instanceof Tree.ListedArgument) {            Tree.ListedArgument la=(Tree.ListedArgument)pa;            la.setParameter(param);            inferParameterTypes(pr,param,la.getExpression(),true);          }        }      }    }  }}  }
class C{  void releaseKey(int virtualKeyCode){  keysPressed.removeInt(virtualKeyCode);  modifiers&=~getModifier(virtualKeyCode);}  }
class C{  public Object writeReplace(Object obj){  assert isWriteReplace();  return writeReplacer.replace(obj);}  }
class C{  public boolean isValidName(){  String _name=this.getName();  boolean _equals=Objects.equal("prototype",_name);  if (_equals) {    return false;  }  return true;}  }
class C{  public static BufferedImage createCompatibleTranslucentImage(int width,int height){  return getGraphicsConfiguration().createCompatibleImage(width,height,Transparency.TRANSLUCENT);}  }
class C{  public void removePortal(Portal portal){  int oldSize=_portals.size();  int oldPathSize=getPaths().size();  if (portal != null) {    Iterator<Path> iter=getPaths().iterator();    while (iter.hasNext()) {      OPath path=(OPath)iter.next();      if (portal.equals(path.getFromPortal())) {        path.setFromPortal(null);        if (log.isDebugEnabled()) {          log.debug("removed Portal " + portal.getName() + " from Path "+ path.getName()+ " in block "+ getSystemName());        }      }      if (portal.equals(path.getToPortal())) {        path.setToPortal(null);        if (log.isDebugEnabled()) {          log.debug("removed Portal " + portal.getName() + " from Path "+ path.getName()+ " in block "+ getSystemName());        }      }      if (path.getFromPortal() == null && path.getToPortal() == null) {        removePath(path);        if (log.isDebugEnabled()) {          log.debug("removed Path " + path.getName() + " in block "+ getSystemName());        }      }    }    for (int i=0; i < _portals.size(); i++) {      if (portal.equals(_portals.get(i))) {        _portals.remove(i);        log.debug("removed portal " + portal.getName() + " from block "+ getSystemName());        i--;      }    }  }  log.debug("removePortal: block " + getSystemName() + " portals decreased from "+ oldSize+ " to "+ _portals.size()+ " - paths decreased from "+ oldPathSize+ " to "+ getPaths().size());  firePropertyChange("portalCount",Integer.valueOf(oldSize),Integer.valueOf(_portals.size()));}  }
class C{  @Override public int clampViewPositionHorizontal(View child,int left,int dx){  int leftBound=0;  int rightBound=0;switch (draggerView.getDragPosition()) {case RIGHT:    if (left > 0) {      leftBound=draggerView.getPaddingLeft();      rightBound=(int)draggerListener.dragHorizontalDragRange();    }  break;case LEFT:if (left < 0) {  leftBound=(int)-draggerListener.dragHorizontalDragRange();  rightBound=draggerView.getPaddingLeft();}break;default :break;}return Math.min(Math.max(left,leftBound),rightBound);}  }
class C{  protected Object unit(){  Object p=next();  if (p == EOF)   return EOF;  if (p == LP) {    Object r;    Vector l=new Vector(2,4);    while (true) {      r=unit();      if (r == RP)       return l;      if (r == EOF)       return EOF;      l.addElement(r);    }  }  return p;}  }
class C{  private void loadAuthenticationErrorActivity(){  Intent intent=new Intent(AlreadyRegisteredActivity.this,AuthenticationErrorActivity.class);  intent.putExtra(getResources().getString(R.string.intent_extra_regid),regId);  intent.putExtra(getResources().getString(R.string.intent_extra_from_activity),AlreadyRegisteredActivity.class.getSimpleName());  startActivity(intent);}  }
class C{  public static KEYSTORE_TYPE fromString(String x) throws ConfigurationException {  for (  KEYSTORE_TYPE currentType : KEYSTORE_TYPE.values()) {    if (x.equalsIgnoreCase(currentType.toString()))     return currentType;  }  throw new ConfigurationException(MessageFormat.format("Cannot cast into a known CERTIFICATE_KEY_TYPE: {0}",x));}  }
class C{  int[] findTemplate(String name){  String text=buff.toString();  int len=text.length();  int start=0;  while (start < len) {    int cstart=text.indexOf("<!--",start);    if (cstart == -1)     return null;    int cend=text.indexOf("-->",cstart);    if (cend == -1)     return null;    cend+="-->".length();    int tstart=text.indexOf("TEMPLATE-",cstart);    if (tstart == -1) {      start=cend;      continue;    }    if (tstart > cend) {      start=cend;      continue;    }    int pstart=tstart + "TEMPLATE-".length();    int pend=len;    for (pend=pstart; pend < len; pend++) {      char c=text.charAt(pend);      if (c == ' ' || c == '\t' || c == '-')       break;    }    if (pend >= len)     return null;    String param=text.substring(pstart,pend);    if (param.equals(name))     return new int[]{cstart,cend};    start=cend;  }  return null;}  }
class C{  public void registerSessionStarter(InputOperationProcess guard,jolie.process.Process body){  sessionStarters.put(guard.inputOperation().id(),new SessionStarter(guard,body));}  }
class C{  public GroovyResultSetExtension(ResultSet set){  updated=false;  resultSet=set;}  }
class C{  private String generateProjectionStmt(){  StringBuffer buffer=new StringBuffer("SELECT ");  buffer.append("p.*");  boolean use2ndLocale=!defaultLocale.equals(locale);  buffer.append(", COALESCE(");  if (use2ndLocale) {    buffer.append(prepareGetLocalizedProductId(false));    buffer.append(",");  }  buffer.append(prepareGetLocalizedProductId(true));  buffer.append(",");  buffer.append("p.productid");  buffer.append(") AS localName");  if (Sorting.RATING_ASCENDING.equals(listCriteria.getSorting()) || Sorting.RATING_DESCENDING.equals(listCriteria.getSorting())) {    buffer.append(prepareAverageRatingForSorting());  }  return buffer.toString();}  }
class C{  public MMapDirectory(Path path,LockFactory lockFactory) throws IOException {  this(path,lockFactory,DEFAULT_MAX_CHUNK_SIZE);}  }
class C{  @Override public boolean equals(Object obj){  if (!super.equals(obj)) {    return false;  }  SimpleDateFormat that=(SimpleDateFormat)obj;  return (pattern.equals(that.pattern) && formatData.equals(that.formatData));}  }
class C{  public static boolean isLauncherAppTarget(Intent launchIntent){  if (launchIntent != null && Intent.ACTION_MAIN.equals(launchIntent.getAction()) && launchIntent.getComponent() != null && launchIntent.getCategories() != null && launchIntent.getCategories().size() == 1 && launchIntent.hasCategory(Intent.CATEGORY_LAUNCHER) && TextUtils.isEmpty(launchIntent.getDataString())) {    Bundle extras=launchIntent.getExtras();    if (extras == null) {      return true;    } else {      Set<String> keys=extras.keySet();      return keys.size() == 1 && keys.contains(ItemInfo.EXTRA_PROFILE);    }  }  ;  return false;}  }
class C{  public static Object createConfig(final CommandLine cmd){  final Config config=new Config();  final Object serverConfig;  serverConfig=config.useSingleServer().setAddress(cmd.getOptionValue("redis-address","127.0.0.1:6379")).setTimeout(60000);  return serverConfig;}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null) {    zzReader.close();  }}  }
class C{  public void classLoaderInit(DynamicClassLoader loader){}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void pushLoop(VariableScope el,List<String> labelNames){  pushVariableScope(el);  continueLabel=new Label();  breakLabel=new Label();  if (labelNames != null) {    for (    String labelName : labelNames) {      initLoopLabels(labelName);    }  }}  }
class C{  public AbstractLogModel(Icon modelIcon,String modelName,LogMode logMode,boolean isClosable,int maxLogEntries){  if (modelName == null || "".equals(modelName.trim())) {    throw new IllegalArgumentException("modelName must not be null or empty!");  }  if (logMode == null) {    throw new IllegalArgumentException("logMode must not be null!");  }  if (modelName.length() > MAX_NAME_LENGTH) {    throw new IllegalArgumentException("modelName must not exeeed " + MAX_NAME_LENGTH + " characters!");  }  if (modelIcon != null) {    if (!(modelIcon instanceof ScaledImageIcon) && modelIcon.getIconHeight() != ICON_SIZE || modelIcon.getIconWidth() != ICON_SIZE) {      throw new IllegalArgumentException("if modelIcon is not null it must be 16x16 pixel!");    }    this.modelIcon=modelIcon;  } else {    this.modelIcon=FALLBACK_ICON;  }  logs=new CircularArrayList<>(maxLogEntries);  this.modelName=modelName;  this.logMode=logMode;  this.isClosable=isClosable;  this.logLevel=Level.INFO;}  }
class C{  private int countAboveThreshold(int[][] mat,double threshold){  int ret=0;  for (int i=0; i < mat.length; i++) {    int[] row=mat[i];    for (int j=0; j < row.length; j++) {      if (row[j] >= threshold) {        ret++;      }    }  }  return ret;}  }
class C{  public void pinConnection(String host,Integer port){  connectionLock.lock();  try {    String hostAndPort=ConnectionManager.generateConnectionCacheKey(host,port);    if (_connections.containsKey(hostAndPort)) {      Integer count=pinnedConnections.get(hostAndPort);      if (count == null) {        count=1;      } else {        count++;      }      pinnedConnections.put(hostAndPort,count);    }    s_logger.info("CimConnection {} is pinned, count = {}",hostAndPort,pinnedConnections.get(hostAndPort));  }  finally {    connectionLock.unlock();  }}  }
class C{  protected synchronized int determineMinimumNumberOfParentDirs(){  int result;  HashSet<String> files;  int num;  int i;  int max;  result=-1;  max=0;  for (i=0; i < m_RecentItems.size(); i++)   max=Math.max(max,FileUtils.getDirectoryDepth(m_RecentItems.get(i).getFile()));  num=0;  do {    files=new HashSet<String>();    for (i=0; i < m_RecentItems.size(); i++)     files.add(FileUtils.createPartialFilename(m_RecentItems.get(i).getFile(),num));    if (files.size() == m_RecentItems.size())     result=num; else     num++;  } while ((files.size() < m_RecentItems.size()) && (num <= max));  return result;}  }
class C{  static public int unpackInt(InputStream in) throws IOException {  int ret=0;  int v;  do {    v=in.read();    if (v == -1)     throw new EOFException();    ret=(ret << 7) | (v & 0x7F);  } while ((v & 0x80) == 0);  return ret;}  }
class C{  private static void dualPivotQuicksort(char[] a,int left,int right){  int sixth=(right - left + 1) / 6;  int e1=left + sixth;  int e5=right - sixth;  int e3=(left + right) >>> 1;  int e4=e3 + sixth;  int e2=e3 - sixth;  char ae1=a[e1], ae2=a[e2], ae3=a[e3], ae4=a[e4], ae5=a[e5];  if (ae1 > ae2) {    char t=ae1;    ae1=ae2;    ae2=t;  }  if (ae4 > ae5) {    char t=ae4;    ae4=ae5;    ae5=t;  }  if (ae1 > ae3) {    char t=ae1;    ae1=ae3;    ae3=t;  }  if (ae2 > ae3) {    char t=ae2;    ae2=ae3;    ae3=t;  }  if (ae1 > ae4) {    char t=ae1;    ae1=ae4;    ae4=t;  }  if (ae3 > ae4) {    char t=ae3;    ae3=ae4;    ae4=t;  }  if (ae2 > ae5) {    char t=ae2;    ae2=ae5;    ae5=t;  }  if (ae2 > ae3) {    char t=ae2;    ae2=ae3;    ae3=t;  }  if (ae4 > ae5) {    char t=ae4;    ae4=ae5;    ae5=t;  }  a[e1]=ae1;  a[e3]=ae3;  a[e5]=ae5;  char pivot1=ae2;  a[e2]=a[left];  char pivot2=ae4;  a[e4]=a[right];  int less=left + 1;  int great=right - 1;  boolean pivotsDiffer=(pivot1 != pivot2);  if (pivotsDiffer) {    outer:     for (int k=less; k <= great; k++) {      char ak=a[k];      if (ak < pivot1) {        if (k != less) {          a[k]=a[less];          a[less]=ak;        }        less++;      } else       if (ak > pivot2) {        while (a[great] > pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less++]=a[great];          a[great--]=ak;        } else {          a[k]=a[great];          a[great--]=ak;        }      }    }  } else {    for (int k=less; k <= great; k++) {      char ak=a[k];      if (ak == pivot1) {        continue;      }      if (ak < pivot1) {        if (k != less) {          a[k]=a[less];          a[less]=ak;        }        less++;      } else {        while (a[great] > pivot1) {          great--;        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less++]=a[great];          a[great--]=ak;        } else {          a[k]=pivot1;          a[great--]=ak;        }      }    }  }  a[left]=a[less - 1];  a[less - 1]=pivot1;  a[right]=a[great + 1];  a[great + 1]=pivot2;  doSort(a,left,less - 2);  doSort(a,great + 2,right);  if (!pivotsDiffer) {    return;  }  if (less < e1 && great > e5) {    while (a[less] == pivot1) {      less++;    }    while (a[great] == pivot2) {      great--;    }    outer:     for (int k=less; k <= great; k++) {      char ak=a[k];      if (ak == pivot2) {        while (a[great] == pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] == pivot1) {          a[k]=a[less];          a[less++]=pivot1;        } else {          a[k]=a[great];        }        a[great--]=pivot2;      } else       if (ak == pivot1) {        a[k]=a[less];        a[less++]=pivot1;      }    }  }  doSort(a,less,great);}  }
class C{  public boolean isStrikeThru(){  return ((textDecoration & TEXT_DECORATION_STRIKETHRU) != 0);}  }
class C{  public static final Criterion headerDateOn(String headerName,Date date,DateResolution res){  return new HeaderCriterion(headerName,new DateOperator(DateComparator.ON,date,res));}  }
class C{  public static String stringFor(int n){switch (n) {case CU_DEVICE_P2P_ATTRIBUTE_PERFORMANCE_RANK:    return "CU_DEVICE_P2P_ATTRIBUTE_PERFORMANCE_RANK";case CU_DEVICE_P2P_ATTRIBUTE_ACCESS_SUPPORTED:  return "CU_DEVICE_P2P_ATTRIBUTE_ACCESS_SUPPORTED";case CU_DEVICE_P2P_ATTRIBUTE_NATIVE_ATOMIC_SUPPORTED:return "CU_DEVICE_P2P_ATTRIBUTE_NATIVE_ATOMIC_SUPPORTED";}return "INVALID CUdevice_P2PAttribute: " + n;}  }
class C{  private void printX509Cert(X509Certificate cert,PrintStream out) throws Exception {  MessageFormat form=new MessageFormat(rb.getString(".PATTERN.printX509Cert"));  Object[] source={cert.getSubjectDN().toString(),cert.getIssuerDN().toString(),cert.getSerialNumber().toString(16),cert.getNotBefore().toString(),cert.getNotAfter().toString(),getCertFingerPrint("MD5",cert),getCertFingerPrint("SHA1",cert),getCertFingerPrint("SHA-256",cert),cert.getSigAlgName(),cert.getVersion()};  out.println(form.format(source));  if (cert instanceof X509CertImpl) {    X509CertImpl impl=(X509CertImpl)cert;    X509CertInfo certInfo=(X509CertInfo)impl.get(X509CertImpl.NAME + "." + X509CertImpl.INFO);    CertificateExtensions exts=(CertificateExtensions)certInfo.get(X509CertInfo.EXTENSIONS);    if (exts != null) {      printExtensions(rb.getString("Extensions."),exts,out);    }  }}  }
class C{  public Complex over(Complex c){  return divide(this,c);}  }
class C{  public <T,E extends T>E viewAs(final Class<E> c,final T o){  if (o == null)   return null;  if (o instanceof Collection<?>)   throw new IllegalArgumentException("for collections please use viewCollectionAs() method. Invalid object " + o);  final E newInstance=cloner.fastCloneOrNewInstance(c);  cloner.copyPropertiesOfInheritedClass(o,newInstance);  return newInstance;}  }
class C{  protected boolean handleDirtyConflict(){  return MessageDialog.openQuestion(getSite().getShell(),getString("_UI_FileConflict_label"),getString("_WARN_FileConflict"));}  }
class C{  final double internalNextDouble(double origin,double bound){  double r=nextDouble();  if (origin < bound) {    r=r * (bound - origin) + origin;    if (r >= bound)     r=Double.longBitsToDouble(Double.doubleToLongBits(bound) - 1);  }  return r;}  }
class C{  public void enabledCipherSuites(String... enabledCipherSuites){  this.enabledCipherSuites=enabledCipherSuites;}  }
class C{  public BuildImageParams withNoCache(boolean noCache){  this.noCache=noCache;  return this;}  }
class C{  void fireParserNoticesChange(){  firePropertyChange(PARSER_NOTICES_PROPERTY,null,null);}  }
class C{  public final void releaseReadIOBuffer(byte[] buf){  if (buf != null) {    if (buf != _readIOBuffer) {      throw new IllegalArgumentException("Trying to release buffer not owned by the context");    }    _readIOBuffer=null;    _bufferRecycler.releaseByteBuffer(BufferRecycler.ByteBufferType.READ_IO_BUFFER,buf);  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:44.166 -0500",hash_original_method="FF5754A93EFEC96878F60030305F1AA8",hash_generated_method="3DE9759C16B1D73B4BB9DB9DB8464A8A") public synchronized void addListener(TestListener listener){  fListeners.addElement(listener);}  }
class C{  private CTranslatorFactory(){}  }
class C{  public boolean[][] wasParkedAtHub(){  boolean[][] parkedAtHub=new boolean[numberOfTimeBins][ParametersPSF.getNumberOfHubs()];  for (int i=0; i < numberOfTimeBins; i++) {    for (int j=0; j < ParametersPSF.getNumberOfHubs(); j++) {      parkedAtHub[i][j]=false;    }  }  for (  ParkLog curParkLog : parkingTimes) {    int startIndex=Math.round((float)Math.floor((curParkLog.getStartParkingTime() / 900)));    int endIndex=Math.round((float)Math.floor((curParkLog.getEndParkingTime() / 900)));    for (int i=startIndex; i < endIndex; i++) {      parkedAtHub[i][ParametersPSF.getHubLinkMapping().getHubNumber(curParkLog.getLinkId().toString())]=true;    }  }  return parkedAtHub;}  }
class C{  void usage(){  System.out.println(getClass().getName() + ": [-verbose] [-nothrow] [-exitcode] [-prompt] [test names]");  System.out.println("test names:");  Enumeration methodNames=testMethods.keys();  while (methodNames.hasMoreElements()) {    System.out.println("\t" + methodNames.nextElement());  }}  }
class C{  public List<Integer> toList(){  return this.bitmap.toList();}  }
class C{  public SHA1PRNG_SecureRandomImpl(){  seed=new int[HASH_OFFSET + EXTRAFRAME_OFFSET];  seed[HASH_OFFSET]=H0;  seed[HASH_OFFSET + 1]=H1;  seed[HASH_OFFSET + 2]=H2;  seed[HASH_OFFSET + 3]=H3;  seed[HASH_OFFSET + 4]=H4;  seedLength=0;  copies=new int[2 * FRAME_LENGTH + EXTRAFRAME_OFFSET];  nextBytes=new byte[DIGEST_LENGTH];  nextBIndex=HASHBYTES_TO_USE;  counter=COUNTER_BASE;  state=UNDEFINED;}  }
class C{  private static String addSecondaryTypesToPattern(IFile file,String fileName,String classNamePattern){  ICompilationUnit cu=JavaCore.createCompilationUnitFrom(file);  if (cu == null) {    FindbugsPlugin.getDefault().logError("NULL compilation unit for " + file + ", FB analysis might  be incomplete for included types");    return classNamePattern;  }  try {    IType[] types=cu.getTypes();    if (types.length > 1) {      StringBuilder sb=new StringBuilder(classNamePattern);      for (      IType type : types) {        if (fileName.equals(type.getElementName())) {          continue;        }        sb.append("|").append(type.getElementName());        sb.append("\\.class|").append(type.getElementName());        sb.append("\\$.*\\.class");      }      classNamePattern=sb.toString();    }  } catch (  JavaModelException e) {    FindbugsPlugin.getDefault().logException(e,"Cannot get types from compilation unit: " + cu);  }  return classNamePattern;}  }
class C{  public void addTab(BottomNavigationItem item){  bottomNavigationItems.add(item);}  }
class C{  public void testSequenceIndexQuery() throws Throwable {  ServerStateMachineContext context=mock(ServerStateMachineContext.class);  ServerSessionContext session=new ServerSessionContext(10,UUID.randomUUID(),mock(Log.class),context,1000);  AtomicBoolean complete=new AtomicBoolean();  session.registerIndexQuery(10,null);  assertFalse(complete.get());  session.setLastApplied(9);  assertFalse(complete.get());  session.setLastApplied(10);  assertTrue(complete.get());}  }
class C{  public void putTag(byte tagClass,boolean form,byte val){  byte tag=(byte)(tagClass | val);  if (form) {    tag|=(byte)0x20;  }  write(tag);}  }
class C{  public FacetLabel(final String... components){  this.components=components;  length=components.length;  checkComponents();}  }
class C{  public void printFrameVariables(LocalVariableMap frameVariables){  if (frameVariables != null && !frameVariables.keySet().isEmpty()) {    System.out.println("  Local variables:");    System.out.format("\t%-40s %-40s","Variable name","Variable value");    for (    String varname : frameVariables.keySet())     System.out.format("\n\t%-40s %-40s",varname,frameVariables.get(varname).toString());    System.out.println();  } else   System.out.println("\tSymbol table for current frame is empty");}  }
class C{  public boolean canZoomInMoreX(){  return (mScaleX < mMaxScaleX);}  }
class C{  private static List<GeoPolygonFactory.PolygonDescription> convertToDescription(final Polygon... polygons){  final List<GeoPolygonFactory.PolygonDescription> descriptions=new ArrayList<>(polygons.length);  for (  final Polygon polygon : polygons) {    final Polygon[] theHoles=polygon.getHoles();    final List<GeoPolygonFactory.PolygonDescription> holes=convertToDescription(theHoles);    final double[] polyLats=polygon.getPolyLats();    final double[] polyLons=polygon.getPolyLons();    final List<GeoPoint> points=new ArrayList<>(polyLats.length - 1);    for (int i=0; i < polyLats.length - 1; i++) {      final int index=polyLats.length - 2 - i;      points.add(new GeoPoint(PlanetModel.WGS84,fromDegrees(polyLats[index]),fromDegrees(polyLons[index])));    }    descriptions.add(new GeoPolygonFactory.PolygonDescription(points,holes));  }  return descriptions;}  }
class C{  public boolean implies(Permission permission){  if (!(permission instanceof CryptoPermission))   return false;  CryptoPermission cp=(CryptoPermission)permission;  Enumeration<Permission> e=permissions.elements();  while (e.hasMoreElements()) {    CryptoPermission x=(CryptoPermission)e.nextElement();    if (x.implies(cp)) {      return true;    }  }  return false;}  }
class C{  public void copySettings(Settings dest,Settings src){  dest.setTimeBoxStage1(src.getTimeBoxStage1());  dest.setTimeBoxStage2(src.getTimeBoxStage2());  dest.setTimeBoxStage3(src.getTimeBoxStage3());  dest.setTimeBoxStage4(src.getTimeBoxStage4());  dest.setTimeBoxStage5(src.getTimeBoxStage5());  dest.setTimeBoxStage6(src.getTimeBoxStage6());}  }
class C{  void updateLocatorsString(){  this.setLocators(parseLocatorSet());}  }
class C{  static byte[] toIntegerBytes(final BigInteger bigInt){  int bitlen=bigInt.bitLength();  bitlen=((bitlen + 7) >> 3) << 3;  final byte[] bigBytes=bigInt.toByteArray();  if (((bigInt.bitLength() % 8) != 0) && (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {    return bigBytes;  }  int startSrc=0;  int len=bigBytes.length;  if ((bigInt.bitLength() % 8) == 0) {    startSrc=1;    len--;  }  final int startDst=bitlen / 8 - len;  final byte[] resizedBytes=new byte[bitlen / 8];  System.arraycopy(bigBytes,startSrc,resizedBytes,startDst,len);  return resizedBytes;}  }
class C{  public ContentFilterItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public void parse(final InputStream stream) throws UncheckedIOException {  parse(null,stream);}  }
class C{  public BakedModelItemWrapper(IBakedModel transformsModel,IBakedModel quadModel){  this.transformsModel=transformsModel;  this.quadModel=quadModel;}  }
class C{  public int maxPathSum(TreeNode root){  if (root == null)   return 0;  max=root.val;  helper(root);  return max;}  }
class C{  public boolean isVisible(SootClass from,SootMethod m){  from.checkLevel(SootClass.HIERARCHY);  m.getDeclaringClass().checkLevel(SootClass.HIERARCHY);  if (m.isPublic())   return true;  if (m.isPrivate()) {    return from.equals(m.getDeclaringClass());  }  if (m.isProtected()) {    return isClassSubclassOfIncluding(from,m.getDeclaringClass());  }  return from.getJavaPackageName().equals(m.getDeclaringClass().getJavaPackageName());}  }
class C{  public void addSubscriptionToStore(final String topic,final String clientId){  final ClientTopicCouple subscription=new ClientTopicCouple(clientId,topic);  if (!topics.contains(subscription)) {    logger.debug("Added subscription " + topic + " ("+ clientId+ ") to store");    subscriptionsStore.add(subscription);    topics.add(topic);  }}  }
class C{  public static boolean isValidGYearMonth(String value){  String regex="-?\\d\\d\\d\\d-\\d\\d(Z|(\\+|-)\\d\\d:\\d\\d)?";  if (value.matches(regex)) {    return isValidCalendarValue(value);  } else {    return false;  }}  }
class C{  public void unsubscribe(EventSubscriber<?> subscriber){  final Class<?> eventType=getEventType(subscriber);  doUnsubscribe(subscriber,eventType);}  }
class C{  public Boolean isBeforeGuestReboot(){  return beforeGuestReboot;}  }
class C{  public void testRemoveValue(){  DefaultCategoryDataset d=new DefaultCategoryDataset();  d.removeValue("R1","C1");  d.addValue(new Double(1.0),"R1","C1");  d.removeValue("R1","C1");  assertEquals(0,d.getRowCount());  assertEquals(0,d.getColumnCount());  d.addValue(new Double(1.0),"R1","C1");  d.addValue(new Double(2.0),"R2","C1");  d.removeValue("R1","C1");  assertEquals(new Double(2.0),d.getValue(0,0));  boolean pass=false;  try {    d.removeValue(null,"C1");  } catch (  IllegalArgumentException e) {    pass=true;  }  assertTrue(pass);  pass=false;  try {    d.removeValue("R1",null);  } catch (  IllegalArgumentException e) {    pass=true;  }  assertTrue(pass);}  }
class C{  private void writeCounts(String outputFolder,HashMap<String,Counts<Link>> mode2countsMap,String countsName){  for (  Entry<String,Counts<Link>> mode2Counts : mode2countsMap.entrySet()) {    String fileName=outputFolder + this.createFilename(mode2Counts.getKey(),countsName);    try {      BufferedWriter bw=new BufferedWriter(new FileWriter(new File(fileName)));      bw.write(this.header);      for (int i=0; i < 25; i++) {        bw.write(separator + i);      }      for (      Entry<Id<Link>,Count<Link>> linkId2Count : mode2Counts.getValue().getCounts().entrySet()) {        bw.newLine();        bw.write(linkId2Count.getKey().toString());        Link link=this.scenario.getNetwork().getLinks().get(linkId2Count.getKey());        bw.write(separator + link.getFromNode().getCoord().getX());        bw.write(separator + link.getFromNode().getCoord().getY());        bw.write(separator + link.getToNode().getCoord().getX());        bw.write(separator + link.getToNode().getCoord().getY());        double sum=0.0;        for (        Volume volume : linkId2Count.getValue().getVolumes().values()) {          sum+=volume.getValue();        }        bw.write(separator + sum);        for (int i=0; i < 25; i++) {          double value=0.0;          if (linkId2Count.getValue().getVolume(i + 1) != null) {            value=linkId2Count.getValue().getVolume(i + 1).getValue();          }          bw.write(separator + value);        }      }      bw.close();      log.info("Output written to " + fileName);    } catch (    IOException e) {      e.printStackTrace();    }  }}  }
class C{  public DdlParserSql2003(){  super(";");}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @ObjectiveCName("tryResult:") public void tryResult(@Nullable T res){  promise.tryResult(res);}  }
class C{  protected byte[] fetchClass(String classname) throws Exception {  byte[] b;  URL url=new URL("http",server,port,"/" + classname.replace('.','/') + ".class");  URLConnection con=url.openConnection();  con.connect();  int size=con.getContentLength();  InputStream s=con.getInputStream();  if (size <= 0)   b=readStream(s); else {    b=new byte[size];    int len=0;    do {      int n=s.read(b,len,size - len);      if (n < 0) {        s.close();        throw new IOException("the stream was closed: " + classname);      }      len+=n;    } while (len < size);  }  s.close();  return b;}  }
class C{  public IonLegalPairs(Graph graph){  if (graph == null) {    throw new NullPointerException();  }  this.graph=graph;}  }
class C{  public void popDepth() throws IOException {  _indentDepth-=2;}  }
class C{  public void addFeature(int idx,double value){  idxList.add(idx);  valList.add((float)value);}  }
class C{  public ChannelMapEvent(ChannelMap channelMap,Event event){  mChannelMap=channelMap;  mEvent=event;}  }
class C{  public void addUniqueAttribute(String qName,String value,int flags) throws SAXException {}  }
class C{  public Lock lockedBy(final StackTrace threadName){  int p;  final List<String> list=get(threadName);  if (list == null)   return null;  for (  final String s : list) {    if ((p=s.indexOf('<',0)) > 0 && s.indexOf("locked <",0) < 0) {      return new Lock(s.substring(p + 1,s.indexOf('>')));    }  }  return null;}  }
class C{  private long offset(long newWeight){  if (newWeight % 2 == 1) {    return (newWeight + 1) / 2;  } else {    offsetJitter=2 - offsetJitter;    return (newWeight + offsetJitter) / 2;  }}  }
class C{  public static HttpClient createClient(final SolrParams params){  final ModifiableSolrParams config=new ModifiableSolrParams(params);  if (logger.isDebugEnabled()) {    logger.debug("Creating new http client, config:" + config);  }  final DefaultHttpClient httpClient=new SystemDefaultHttpClient();  configureClient(httpClient,config);  return httpClient;}  }
class C{  public void init() throws MessagingException {  String repositoryPath=getInitParameter("repositoryPath");  if (repositoryPath == null) {    throw new MessagingException("repositoryPath is null");  }  feedType=getInitParameter("feedType");  if (feedType == null) {    throw new MessagingException("feedType is null");  }  String maxSizeParam=getInitParameter("maxSize");  if (maxSizeParam != null) {    setMaxSize(Integer.parseInt(maxSizeParam));  }  log("maxSize: " + getMaxSize());  initDb();}  }
class C{  public static byte[] encode(byte[] source,int off,int len,byte[] alphabet,int maxLineLength){  int lenDiv3=(len + 2) / 3;  int len43=lenDiv3 * 4;  byte[] outBuff=new byte[len43 + (len43 / maxLineLength)];  int d=0;  int e=0;  int len2=len - 2;  int lineLength=0;  for (; d < len2; d+=3, e+=4) {    int inBuff=((source[d + off] << 24) >>> 8) | ((source[d + 1 + off] << 24) >>> 16) | ((source[d + 2 + off] << 24) >>> 24);    outBuff[e]=alphabet[(inBuff >>> 18)];    outBuff[e + 1]=alphabet[(inBuff >>> 12) & 0x3f];    outBuff[e + 2]=alphabet[(inBuff >>> 6) & 0x3f];    outBuff[e + 3]=alphabet[(inBuff) & 0x3f];    lineLength+=4;    if (lineLength == maxLineLength) {      outBuff[e + 4]=NEW_LINE;      e++;      lineLength=0;    }  }  if (d < len) {    encode3to4(source,d + off,len - d,outBuff,e,alphabet);    lineLength+=4;    if (lineLength == maxLineLength) {      outBuff[e + 4]=NEW_LINE;      e++;    }    e+=4;  }  assert (e == outBuff.length);  return outBuff;}  }
class C{  public static Observable<NetworkServiceDiscoveryInfo> startDiscovery(@NonNull Context context,@NonNull String protocol) throws NsdException {  if (protocol.equalsIgnoreCase(ALL_AVAILABLE_SERVICES)) {    throw new NsdException(NsdException.INVALID_ARGUMENT,protocol,0);  }  return DiscoveryOnSubscribeFactory.from(context,protocol);}  }
class C{  public void removeHighlight(Highlight highlight){  if (decorators == null) {    return;  }  removeHighlight(highlight,true);}  }
class C{  public boolean isReadOnly(){  return true;}  }
class C{  public IOObjectMapEvent(IOObjectMapEventType type,String name){  if (type == null) {    throw new IllegalArgumentException("type must not be null!");  }  this.type=type;  this.ioobjectName=name;}  }
class C{  protected int countOverrides(SVGGraphicContext deltaGC){  return deltaGC.getGroupContext().size();}  }
class C{  public int numPendingRequests(){synchronized (lock) {    return this.requestsQueue.size();  }}  }
class C{  public static void execute(ExecutablePool pool,Connection conn,boolean sentClientReady){  AbstractOp op=new MakePrimaryOpImpl(sentClientReady);  pool.executeOn(conn,op);}  }
class C{  public Object read(String value,Class type) throws Exception {  return transform.read(value,type);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:48:00.437 -0500",hash_original_method="731D5E497065CC7A99050B1E6205CD2C",hash_generated_method="9F51E8ED2FF8704FC9CD4009EAD434EE") public void onActionModeFinished(ActionMode mode){}  }
class C{  public static final void drawRectangle(GL2 gl,Rectangle r,boolean points){  RenderUtilities.drawPolygon(gl,r.getVertices(),points);}  }
class C{  public void storeState(){  if (intervalsKnown) {    if (storedIntervals == null) {      storedIntervals=new double[intervals.length];    }    if (storedLineageCounts == null) {      storedLineageCounts=new int[lineageCounts.length];    }    if (superStore) {      if (storedIndices == null) {        storedIndices=new int[indices.length];      }      if (storedTimes == null) {        storedTimes=new double[times.length];      }    }    System.arraycopy(intervals,0,storedIntervals,0,intervals.length);    System.arraycopy(lineageCounts,0,storedLineageCounts,0,lineageCounts.length);    if (superStore) {      System.arraycopy(indices,0,storedIndices,0,indices.length);      System.arraycopy(times,0,storedTimes,0,times.length);    }  }  storedIntervalsKnown=intervalsKnown;}  }
class C{  public Schema convertSchema(HCatSchema hcatSchema,String tableName) throws IOException {  LOG.info(hcatSchema.getSchemaAsTypeString());  Schema avroSchema=getRecordAvroFieldSchema(hcatSchema,tableName);  LOG.info(avroSchema.toString());  return avroSchema;}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN,ACL.ALL}) @Path("/{id}/restore") public TaskResourceRep restore(@PathParam("id") URI id) throws InternalException {  ArgValidator.checkFieldUriType(id,Snapshot.class,"id");  Snapshot snap=queryResource(id);  FileShare fs=_permissionsHelper.getObjectById(snap.getParent(),FileShare.class);  String task=UUID.randomUUID().toString();  Operation op=null;  if ((snap != null) && (!(snap.getInactive()))) {    StorageSystem device=_dbClient.queryObject(StorageSystem.class,fs.getStorageDevice());    StorageSystem.Type storageSystemType=StorageSystem.Type.valueOf(device.getSystemType());    if (storageSystemType.equals(DiscoveredDataObject.Type.isilon)) {      _log.error("Invalid Operation. Restore snapshot is not supported by ISILON");      throw APIException.badRequests.isilonSnapshotRestoreNotSupported();    }    _log.info(String.format("Snapshot restore --- Snapshot id: %1$s, FileShare: %2$s, task %3$s",id,fs.getId(),task));    _dbClient.createTaskOpStatus(FileShare.class,fs.getId(),task,ResourceOperationTypeEnum.RESTORE_FILE_SNAPSHOT);    op=_dbClient.createTaskOpStatus(Snapshot.class,snap.getId(),task,ResourceOperationTypeEnum.RESTORE_FILE_SNAPSHOT);    FileServiceApi fileServiceApi=FileService.getFileShareServiceImpl(fs,_dbClient);    fileServiceApi.restoreFS(device.getId(),fs.getId(),snap.getId(),task);    auditOp(OperationTypeEnum.RESTORE_FILE_SNAPSHOT,true,AuditLogManager.AUDITOP_BEGIN,snap.getId().toString(),fs.getId().toString());  } else {    StringBuilder msg=new StringBuilder("Attempt to use deleted snapshot: " + snap.getName());    msg.append(" to restore File: " + fs.getName());    op=new Operation();    ServiceCoded coded=ServiceError.buildServiceError(ServiceCode.API_BAD_REQUEST,msg.toString());    op.error(coded);    op.setMessage(msg.toString());    op=_dbClient.createTaskOpStatus(Snapshot.class,snap.getId(),task,op);    _log.error(msg.toString());  }  return toTask(snap,task,op);}  }
class C{  private boolean trigger(String namespace,String name,String parent){  Iterator i=triggers.iterator();  while (i.hasNext()) {    Trigger t=(Trigger)i.next();    if ((t.namespace.equals(namespace) && t.elementNames.contains(name) && !t.elementNames.contains(parent))) {      return true;    }  }  return false;}  }
class C{  public SpriteSheetDrawer spriteLoop(boolean loop){  mSpriteSheet.spriteLoop=loop;  return this;}  }
class C{  public boolean isCompound(){  return isCompound;}  }
class C{  private void closeOutputStream() throws IOException {  this.mOutputStream.close();}  }
class C{  public WTableModelEvent(ListModel source,int row,int column){  this(source,row,row,column,CONTENTS_CHANGED);}  }
class C{  public boolean onNewPicture(WebViewCore.DrawData drawData){  final int viewWidth=mWebView.getViewWidth();  final boolean zoomOverviewWidthChanged=setupZoomOverviewWidth(drawData,viewWidth);  final float newZoomOverviewScale=getZoomOverviewScale();  WebSettingsClassic settings=mWebView.getSettings();  if (zoomOverviewWidthChanged && settings.isNarrowColumnLayout() && settings.getUseFixedViewport()&& (mInitialZoomOverview || mInZoomOverview)) {    if (exceedsMinScaleIncrement(mTextWrapScale,mDefaultScale) || exceedsMinScaleIncrement(newZoomOverviewScale,mDefaultScale)) {      mTextWrapScale=getReadingLevelScale();    } else {      mTextWrapScale=newZoomOverviewScale;    }  }  if (!mMinZoomScaleFixed || settings.getUseWideViewPort()) {    mMinZoomScale=newZoomOverviewScale;    mMaxZoomScale=Math.max(mMaxZoomScale,mMinZoomScale);    sanitizeMinMaxScales();  }  boolean scaleHasDiff=exceedsMinScaleIncrement(newZoomOverviewScale,mActualScale);  boolean scaleLessThanOverview=(newZoomOverviewScale - mActualScale) >= MINIMUM_SCALE_INCREMENT;  boolean mobileSiteInOverview=mInZoomOverview && !exceedsMinScaleIncrement(newZoomOverviewScale,mDefaultScale);  if (!mWebView.drawHistory() && ((scaleLessThanOverview && settings.getUseWideViewPort()) || ((mInitialZoomOverview || mobileSiteInOverview) && scaleHasDiff && zoomOverviewWidthChanged))) {    mInitialZoomOverview=false;    setZoomScale(newZoomOverviewScale,!willScaleTriggerZoom(mTextWrapScale) && !mWebView.getSettings().getUseFixedViewport());  } else {    mInZoomOverview=!scaleHasDiff;  }  if (drawData.mFirstLayoutForNonStandardLoad && settings.getLoadWithOverviewMode()) {    mInitialZoomOverview=mInZoomOverview;  }  return scaleHasDiff;}  }
class C{  void add(IndicatorResult result){  indicatorResults.add(result);}  }
class C{  public BufferedImage createShadow(final BufferedImage image){  if (hints.get(KEY_BLUR_QUALITY) == VALUE_BLUR_QUALITY_HIGH) {    BufferedImage subject=prepareImage(image);    BufferedImage shadow=new BufferedImage(subject.getWidth(),subject.getHeight(),BufferedImage.TYPE_INT_ARGB);    BufferedImage shadowMask=createShadowMask(subject);    getLinearBlurOp(size).filter(shadowMask,shadow);    return shadow;  }  return createShadowFast(image);}  }
class C{  public static boolean isOutgoingFolder(int messageType){  return (messageType == MESSAGE_TYPE_FAILED) || (messageType == MESSAGE_TYPE_OUTBOX) || (messageType == MESSAGE_TYPE_SENT)|| (messageType == MESSAGE_TYPE_QUEUED);}  }
class C{  public int size(){  return rows.size();}  }
class C{  public Set<SerializationFormat> allowedSerializationFormats(){  return allowedSerializationFormats;}  }
class C{  public void testMultStop() throws Exception {  TungstenProperties conf=generateConfig();  PluginContext context=new ReplicatorRuntime(conf,new MockOpenReplicatorContext(),ReplicatorMonitor.getInstance());  ParallelQueueStore pqs=new ParallelQueueStore();  pqs.setPartitions(3);  pqs.setMaxSize(10);  pqs.setSyncEnabled(false);  pqs.configure(context);  pqs.prepare(context);  for (int i=0; i < 3; i++) {    ReplDBMSEvent event=createEvent(i);    pqs.put(i % 3,event);    pqs.insertStopEvent();  }  for (int i=0; i < pqs.getPartitions(); i++) {    assertEquals("Each partition has 4 events",4,pqs.size(i));    long lastSeqno=0;    for (int j=0; j < 4; j++) {      ReplEvent next=pqs.get(i);      long curSeqno;      if (next instanceof ReplDBMSEvent)       curSeqno=((ReplDBMSEvent)next).getSeqno(); else       if (next instanceof ReplControlEvent)       curSeqno=((ReplControlEvent)next).getHeader().getSeqno(); else       throw new Exception("Unexpected event type: " + next.getClass().toString());      assertTrue("Sequence number greater/equal on partition",curSeqno >= lastSeqno);      lastSeqno=curSeqno;    }    assertEquals("Last seqno on partition is 2",2,lastSeqno);  }  pqs.release(context);}  }
class C{  public void findAndInit(Object someObj){  super.findAndInit(someObj);  if (someObj instanceof ProjectionStack) {    addActionListener((ActionListener)someObj);  }}  }
class C{  public XMLException(Exception e){  exception=e;}  }
class C{  public void compMult(double val){  for (int i=0; i < len; i++) {    vect[i]*=val;  }}  }
class C{  private void readAttributeListDeclaration() throws IOException, XmlPullParserException {  read(START_ATTLIST);  skip();  String elementName=readName();  while (true) {    skip();    int c=peekCharacter();    if (c == '>') {      position++;      return;    }    String attributeName=readName();    skip();    if (position + 1 >= limit && !fillBuffer(2)) {      throw new XmlPullParserException("Malformed attribute list",this,null);    }    if (buffer[position] == NOTATION[0] && buffer[position + 1] == NOTATION[1]) {      read(NOTATION);      skip();    }    c=peekCharacter();    if (c == '(') {      position++;      while (true) {        skip();        readName();        skip();        c=peekCharacter();        if (c == ')') {          position++;          break;        } else         if (c == '|') {          position++;        } else {          throw new XmlPullParserException("Malformed attribute type",this,null);        }      }    } else {      readName();    }    skip();    c=peekCharacter();    if (c == '#') {      position++;      c=peekCharacter();      if (c == 'R') {        read(REQUIRED);      } else       if (c == 'I') {        read(IMPLIED);      } else       if (c == 'F') {        read(FIXED);      } else {        throw new XmlPullParserException("Malformed attribute type",this,null);      }      skip();      c=peekCharacter();    }    if (c == '"' || c == '\'') {      position++;      String value=readValue((char)c,true,true,ValueContext.ATTRIBUTE);      if (peekCharacter() == c) {        position++;      }      defineAttributeDefault(elementName,attributeName,value);    }  }}  }
class C{  protected long checkInstant(long instant,Chronology chronology){  return instant;}  }
class C{  public byte[] read(int length) throws IOException {  byte[] data=new byte[length];  if (length > 0) {    int read=0;    while (read < length) {      int count=in.read(data,read,length - read);      if (count < 0) {        bytesRead+=read;        throw new IOException("Unexpected end of input while reading a specified number of bytes");      }      read+=count;    }    bytesRead+=read;  }  return data;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();{    boolean success=false;    try {      child.deleteData(40,3);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INDEX_SIZE_ERR);    }    assertTrue("throw_INDEX_SIZE_ERR",success);  }}  }
class C{  public boolean isFinished(){  return finished;}  }
class C{  protected String loadDocumentDetails(){  setC_Currency_ID(NO_CURRENCY);  MInOut inout=(MInOut)getPO();  setDateDoc(inout.getMovementDate());  m_Reversal_ID=inout.getReversal_ID();  m_DocStatus=inout.getDocStatus();  p_lines=loadLines(inout);  log.fine("Lines=" + p_lines.length);  return null;}  }
class C{  private void restoreMessages(FacesContext facesContext){  MessageHolderBean bean=ui.findMessageHolderBean();  Set<MessageWithClientId> messages=bean.getMessages();  Set<FacesMessage> facesContextMessages=new HashSet<FacesMessage>();  for (Iterator<FacesMessage> i=facesContext.getMessages(null); i.hasNext(); ) {    FacesMessage msg=i.next();    facesContextMessages.add(msg);    i.remove();  }  if (messages != null && messages.size() > 0) {    for (    MessageWithClientId message : messages) {      if (!facesContextMessages.contains(message.getMessage()))       facesContext.addMessage(message.getClientId(),message.getMessage());    }    bean.resetMessages();  }}  }
class C{  public static String noPrefix(String path,String prefix){  return path.startsWith(prefix) ? path.substring(prefix.length()) : path;}  }
class C{  @Override public void writeState(FacesContext ctx,Object state,StringBuilder stateCapture) throws IOException {  Util.notNull("context",ctx);  String id;  UIViewRoot viewRoot=ctx.getViewRoot();  if (!viewRoot.isTransient()) {    if (!ctx.getAttributes().containsKey("com.sun.faces.ViewStateValue")) {      Util.notNull("state",state);      Object[] stateToWrite=(Object[])state;      ExternalContext externalContext=ctx.getExternalContext();      Object sessionObj=externalContext.getSession(true);      Map<String,Object> sessionMap=externalContext.getSessionMap();synchronized (sessionObj) {        Map<String,Map> logicalMap=TypedCollections.dynamicallyCastMap((Map)sessionMap.get(LOGICAL_VIEW_MAP),String.class,Map.class);        if (logicalMap == null) {          logicalMap=Collections.synchronizedMap(new LRUMap<String,Map>(numberOfLogicalViews));          sessionMap.put(LOGICAL_VIEW_MAP,logicalMap);        }        Object structure=stateToWrite[0];        Object savedState=handleSaveState(stateToWrite[1]);        String idInLogicalMap=(String)RequestStateManager.get(ctx,RequestStateManager.LOGICAL_VIEW_MAP);        if (idInLogicalMap == null) {          idInLogicalMap=((generateUniqueStateIds) ? createRandomId() : createIncrementalRequestId(ctx));        }        String idInActualMap=null;        if (ctx.getPartialViewContext().isPartialRequest()) {          idInActualMap=(String)RequestStateManager.get(ctx,RequestStateManager.ACTUAL_VIEW_MAP);        }        if (null == idInActualMap) {          idInActualMap=((generateUniqueStateIds) ? createRandomId() : createIncrementalRequestId(ctx));        }        Map<String,Object[]> actualMap=TypedCollections.dynamicallyCastMap(logicalMap.get(idInLogicalMap),String.class,Object[].class);        if (actualMap == null) {          actualMap=new LRUMap<>(numberOfViews);          logicalMap.put(idInLogicalMap,actualMap);        }        id=idInLogicalMap + ':' + idInActualMap;        Object[] stateArray=actualMap.get(idInActualMap);        if (stateArray != null) {          stateArray[0]=structure;          stateArray[1]=savedState;        } else {          actualMap.put(idInActualMap,new Object[]{structure,savedState});        }        sessionMap.put(LOGICAL_VIEW_MAP,logicalMap);        ctx.getAttributes().put("com.sun.faces.ViewStateValue",id);      }    } else {      id=(String)ctx.getAttributes().get("com.sun.faces.ViewStateValue");    }  } else {    id="stateless";  }  if (stateCapture != null) {    stateCapture.append(id);  } else {    ResponseWriter writer=ctx.getResponseWriter();    writer.startElement("input",null);    writer.writeAttribute("type","hidden",null);    writer.writeAttribute("name",VIEW_STATE_PARAM.getName(ctx),null);    if (webConfig.isOptionEnabled(EnableViewStateIdRendering)) {      String viewStateId=Util.getViewStateId(ctx);      writer.writeAttribute("id",viewStateId,null);    }    writer.writeAttribute("value",id,null);    if (webConfig.isOptionEnabled(AutoCompleteOffOnViewState)) {      writer.writeAttribute("autocomplete","off",null);    }    writer.endElement("input");    writeClientWindowField(ctx,writer);    writeRenderKitIdField(ctx,writer);  }}  }
class C{  protected boolean mustLayout(IconSource iconSource,AVList modifiers){  if (this.unresolvedGlyph)   return true;  if (this.staticScreenRect == null || this.staticLayoutRect == null)   return true;  if (!this.activeModifiers.getEntries().equals(modifiers.getEntries()))   return true;  if (this.iconTexture == null || this.iconTexture != this.activeIconTexture)   return true;  return !this.iconTexture.getImageSource().equals(iconSource);}  }
class C{  public void insertBitmap(final BufferedImage bitmap,final int x,final int y,final int transRGB){  final int heightSrc=bitmap.getHeight();  final int widthSrc=bitmap.getWidth();  final int heightTgt=this.height;  final int widthTgt=this.width;  int rgb;  for (int i=0; i < heightSrc; i++) {    for (int j=0; j < widthSrc; j++) {      if (j + x >= 0 && i + y >= 0 && i + y < heightTgt && j + x < widthTgt) {        rgb=bitmap.getRGB(j,i);        if (rgb != transRGB) {          this.image.setRGB(j + x,i + y,rgb);        }      }    }  }}  }
class C{  public void accept(){  checkSocket();  this.socket.sendTextMessage("accept");}  }
class C{  PsFacebook(final com.jcabi.http.Request frequest,final WebRequestor frequestor,final String fapp,final String fkey){  this.request=frequest;  this.requestor=frequestor;  this.app=fapp;  this.key=fkey;}  }
class C{  @Override protected void onStart(){  super.onStart();  ResponseHandler.register(mDungeonsPurchaseObserver);  initializeOwnedItems();}  }
class C{  public ArrayDeque(int numElements){  allocateElements(numElements);}  }
class C{  public MovingAverage(int size){  this.queue=new LinkedList<Integer>();  this.size=size;  this.sum=0;}  }
class C{  public boolean add(int item){  if (isFull()) {    return false;  }  head=(head + 1) % ringBuffer.length;  ringBuffer[head]=item;  counter++;  return true;}  }
class C{  public static final Cursor query(ContentResolver cr,int startDay,int numDays,String[] projection){  if (numDays < 1) {    return null;  }  int endDay=startDay + numDays - 1;  Uri.Builder builder=CONTENT_URI.buildUpon();  ContentUris.appendId(builder,startDay);  ContentUris.appendId(builder,endDay);  return cr.query(builder.build(),projection,SELECTION,null,STARTDAY);}  }
class C{  private ScheduledEvent updateScheduledEvent(ScheduledEvent scheduledEvent,ScheduleInfo scheduleInfo) throws Exception {  URI executionWindow=null;  CatalogService catalogService=catalogServiceManager.getCatalogServiceById(scheduledEvent.getCatalogServiceId());  if (catalogService.getExecutionWindowRequired()) {    if (catalogService.getDefaultExecutionWindowId() == null || catalogService.getDefaultExecutionWindowId().equals(ExecutionWindow.NEXT)) {      List<URI> executionWindows=_dbClient.queryByConstraint(AlternateIdConstraint.Factory.getExecutionWindowTenantIdIdConstraint(scheduledEvent.getTenant()));      Calendar currTime=Calendar.getInstance(TimeZone.getTimeZone("UTC"));      executionWindow=getNextExecutionWindow(executionWindows,currTime);    } else {      executionWindow=catalogService.getDefaultExecutionWindowId().getURI();    }    ExecutionWindow window=client.findById(executionWindow);    String msg=match(scheduleInfo,window);    if (!msg.isEmpty()) {      throw APIException.badRequests.scheduleInfoNotMatchWithExecutionWindow(msg);    }  }  Order order=client.orders().findById(scheduledEvent.getLatestOrderId());  Calendar scheduledTime=ScheduleTimeHelper.getFirstScheduledTime(scheduleInfo);  order.setScheduledTime(scheduledTime);  client.save(order);  scheduledEvent.setScheduleInfo(new String(org.apache.commons.codec.binary.Base64.encodeBase64(scheduleInfo.serialize()),UTF_8));  scheduledEvent.setEventType(scheduleInfo.getReoccurrence() == 1 ? ScheduledEventType.ONCE : ScheduledEventType.REOCCURRENCE);  client.save(scheduledEvent);  log.info("Updated a scheduledEvent {}:{}",scheduledEvent.getId(),scheduleInfo.toString());  return scheduledEvent;}  }
class C{  protected synchronized void replyReceived(){  timeoutcounter=0;switch (readState[currentPin]) {case NONE:    break;case READVALUE1:case READINGVALUE1:  readState[currentPin]=READVALUE2;return;case READVALUE2:case READINGVALUE2:readState[currentPin]=READMODE;return;case READMODE:case READINGMODE:readState[currentPin]=NONE;return;default :log.error("Pin " + currentPin + " unexpected read state, can't advance "+ readState[currentPin]);readState[currentPin]=NONE;return;}switch (writeState[currentPin]) {case NONE:return;case WRITEVALUE1:case WRITINGVALUE1:writeState[currentPin]=WRITEVALUE2;return;case WRITEVALUE2:case WRITINGVALUE2:writeState[currentPin]=WRITEMODE;return;case WRITEMODE:case WRITINGMODE:writeState[currentPin]=NONE;return;default :log.error("Pin " + currentPin + " unexpected write state, can't advance "+ writeState[currentPin]);writeState[currentPin]=NONE;return;}}  }
class C{  public void addState(int[] stateSet,Drawable drawable){  if (drawable != null) {    mStateListState.addStateSet(stateSet,drawable);    onStateChange(getState());  }}  }
class C{  public static String toByteArray(byte[] buf){  return toByteArray(buf,0,buf.length);}  }
class C{  @Override public boolean isMultiple(){  return geometry.isMultiple();}  }
class C{  @Override public void loadingError(String errorMsg){  dismissDialog(PROGRESS_DIALOG);  if (errorMsg != null) {    createErrorDialog(errorMsg,EXIT);  } else {    createErrorDialog(getString(R.string.parse_error),EXIT);  }}  }
class C{  public void pushNull() throws IOException {  print("push",new String[]{"null"});}  }
class C{  protected Iterator<Object> bcsChildren(){synchronized (children) {    return new BCSIterator(children.values().iterator());  }}  }
class C{  public static synchronized CompiledMethod compile(NativeMethod method){  JNICompiledMethod cm=(JNICompiledMethod)CompiledMethods.createCompiledMethod(method,CompiledMethod.JNI);  Assembler asm=new Assembler(100);  Address nativeIP=method.getNativeIP();  final Offset lastParameterOffset=Offset.fromIntSignExtend(2 * WORDSIZE);  final TypeReference[] args=method.getParameterTypes();  asm.emitPUSH_RegDisp(THREAD_REGISTER,ArchEntrypoints.framePointerField.getOffset());  if (VM.BuildFor32Addr) {    asm.emitMOV_RegDisp_Reg(THREAD_REGISTER,ArchEntrypoints.framePointerField.getOffset(),SP);  } else {    asm.emitMOV_RegDisp_Reg_Quad(THREAD_REGISTER,ArchEntrypoints.framePointerField.getOffset(),SP);  }  if (VM.VerifyAssertions)   VM._assert(STACKFRAME_METHOD_ID_OFFSET.toInt() == -WORDSIZE);  asm.emitPUSH_Imm(cm.getId());  if (VM.VerifyAssertions)   VM._assert(EDI_SAVE_OFFSET.toInt() == -2 * WORDSIZE);  asm.emitPUSH_Reg(EDI);  if (VM.VerifyAssertions)   VM._assert(EBX_SAVE_OFFSET.toInt() == -3 * WORDSIZE);  asm.emitPUSH_Reg(EBX);  if (VM.VerifyAssertions)   VM._assert(EBP_SAVE_OFFSET.toInt() == -4 * WORDSIZE);  asm.emitPUSH_Reg(EBP);  if (VM.BuildFor32Addr) {    asm.emitLEA_Reg_RegDisp(EBP,SP,Offset.fromIntSignExtend(4 * WORDSIZE));  } else {    asm.emitLEA_Reg_RegDisp_Quad(EBP,SP,Offset.fromIntSignExtend(4 * WORDSIZE));  }  if (VM.BuildFor32Addr) {    asm.emitMOV_Reg_RegDisp(S0,THREAD_REGISTER,Entrypoints.jniEnvField.getOffset());  } else {    asm.emitMOV_Reg_RegDisp_Quad(S0,THREAD_REGISTER,Entrypoints.jniEnvField.getOffset());  }  if (VM.VerifyAssertions)   VM._assert(JNI_ENV_OFFSET.toInt() == -5 * WORDSIZE);  asm.emitPUSH_Reg(S0);  if (VM.VerifyAssertions)   VM._assert(BP_ON_ENTRY_OFFSET.toInt() == -6 * WORDSIZE);  asm.emitPUSH_RegDisp(S0,Entrypoints.JNIEnvBasePointerOnEntryToNative.getOffset());  if (VM.BuildFor32Addr) {    asm.emitMOV_RegDisp_Reg(S0,Entrypoints.JNIEnvBasePointerOnEntryToNative.getOffset(),EBP);  } else {    asm.emitMOV_RegDisp_Reg_Quad(S0,Entrypoints.JNIEnvBasePointerOnEntryToNative.getOffset(),EBP);  }  int numFprArgs=0;  int numGprArgs=0;  for (  TypeReference arg : args) {    if (arg.isFloatType() || arg.isDoubleType()) {      numFprArgs++;    } else     if (VM.BuildFor32Addr && arg.isLongType()) {      numGprArgs+=2;    } else {      numGprArgs++;    }  }  if (VM.BuildFor64Addr) {    int argsInRegisters=Math.min(numFprArgs,NATIVE_PARAMETER_FPRS.length) + Math.min(numGprArgs + 2,NATIVE_PARAMETER_GPRS.length);    int argsOnStack=numGprArgs + numFprArgs + 2 - argsInRegisters;    if (VM.VerifyAssertions)     VM._assert(argsOnStack >= 0);    if ((argsOnStack & 1) != 0) {      asm.emitAND_Reg_Imm_Quad(SP,-16);      asm.emitPUSH_Reg(T0);    } else {      asm.emitAND_Reg_Imm_Quad(SP,-16);    }  }  if (!method.isStatic()) {    numGprArgs++;  }  Offset currentArg=lastParameterOffset;  int argFpr=numFprArgs - 1;  int argGpr=numGprArgs - 1;  for (int i=args.length - 1; i >= 0; i--) {    TypeReference arg=args[i];    if (arg.isFloatType()) {      if (argFpr < PARAMETER_FPRS.length) {        asm.emitPUSH_Reg(T0);        if (SSE2_FULL) {          asm.emitMOVSS_RegInd_Reg(SP,(XMM)PARAMETER_FPRS[argFpr]);        } else {          asm.emitFSTP_RegInd_Reg(SP,FP0);        }      } else {        asm.emitPUSH_RegDisp(EBP,currentArg);      }      argFpr--;    } else     if (arg.isDoubleType()) {      if (VM.BuildFor32Addr) {        if (argFpr < PARAMETER_FPRS.length) {          asm.emitPUSH_Reg(T0);          asm.emitPUSH_Reg(T0);          if (SSE2_FULL) {            asm.emitMOVSD_RegInd_Reg(SP,(XMM)PARAMETER_FPRS[argFpr]);          } else {            asm.emitFSTP_RegInd_Reg_Quad(SP,FP0);          }        } else {          asm.emitPUSH_RegDisp(EBP,currentArg.plus(WORDSIZE));          asm.emitPUSH_RegDisp(EBP,currentArg);        }      } else {        if (argFpr < PARAMETER_FPRS.length) {          asm.emitPUSH_Reg(T0);          if (SSE2_FULL) {            asm.emitMOVSD_RegInd_Reg(SP,(XMM)PARAMETER_FPRS[argFpr]);          } else {            asm.emitFSTP_RegInd_Reg_Quad(SP,FP0);          }        } else {          asm.emitPUSH_RegDisp(EBP,currentArg);        }      }      argFpr--;      currentArg=currentArg.plus(WORDSIZE);    } else     if (VM.BuildFor32Addr && arg.isLongType()) {      if (argGpr < PARAMETER_GPRS.length) {        asm.emitPUSH_Reg(PARAMETER_GPRS[argGpr - 1]);        asm.emitPUSH_Reg(PARAMETER_GPRS[argGpr]);      } else       if (argGpr - 1 < PARAMETER_GPRS.length) {        asm.emitPUSH_Reg(PARAMETER_GPRS[argGpr - 1]);        asm.emitPUSH_RegDisp(EBP,currentArg);      } else {        asm.emitPUSH_RegDisp(EBP,currentArg.plus(WORDSIZE));        asm.emitPUSH_RegDisp(EBP,currentArg);      }      argGpr-=2;      currentArg=currentArg.plus(WORDSIZE);    } else {      if (argGpr < PARAMETER_GPRS.length) {        asm.emitPUSH_Reg(PARAMETER_GPRS[argGpr]);      } else {        asm.emitPUSH_RegDisp(EBP,currentArg);      }      argGpr--;      if (VM.BuildFor64Addr && arg.isLongType()) {        currentArg=currentArg.plus(WORDSIZE);      }    }    currentArg=currentArg.plus(WORDSIZE);  }  if (method.isStatic()) {    Offset klassOffset=Offset.fromIntSignExtend(Statics.findOrCreateObjectLiteral(method.getDeclaringClass().getClassForType()));    asm.generateJTOCpush(klassOffset);  } else {    if (VM.VerifyAssertions)     VM._assert(argGpr == 0);    asm.emitPUSH_Reg(PARAMETER_GPRS[0]);  }  asm.emitPUSH_Reg(S0);  if (jniExternalFunctionsFieldOffset != 0) {    if (VM.BuildFor32Addr) {      asm.emitADD_RegInd_Imm(ESP,jniExternalFunctionsFieldOffset);    } else {      asm.emitADD_RegInd_Imm_Quad(ESP,jniExternalFunctionsFieldOffset);    }  }  int encodedReferenceOffsets=0;  for (int i=0, pos=0; i < args.length; i++, pos++) {    TypeReference arg=args[i];    if (arg.isReferenceType()) {      if (VM.VerifyAssertions)       VM._assert(pos < 32);      encodedReferenceOffsets|=1 << pos;    } else     if (VM.BuildFor32Addr && (arg.isLongType() || arg.isDoubleType())) {      pos++;    }  }  if (VM.BuildFor32Addr) {    asm.emitMOV_Reg_RegDisp(PARAMETER_GPRS[0],EBP,JNI_ENV_OFFSET);  } else {    asm.emitMOV_Reg_RegDisp_Quad(PARAMETER_GPRS[0],EBP,JNI_ENV_OFFSET);  }  asm.emitPUSH_Reg(PARAMETER_GPRS[0]);  asm.emitMOV_Reg_Imm(PARAMETER_GPRS[1],encodedReferenceOffsets);  asm.emitPUSH_Reg(PARAMETER_GPRS[1]);  asm.baselineEmitLoadTIB(S0,PARAMETER_GPRS[0]);  asm.emitCALL_RegDisp(S0,Entrypoints.jniEntry.getOffset());  int stackholes=0;  int position=0;  int argsPassedInRegister=0;  if (VM.BuildFor64Addr) {    int gpRegistersInUse=2;    int fpRegistersInUse=0;    boolean dataOnStack=false;    asm.emitPOP_Reg(NATIVE_PARAMETER_GPRS[0]);    asm.emitPOP_Reg(NATIVE_PARAMETER_GPRS[1]);    argsPassedInRegister+=2;    for (    TypeReference arg : method.getParameterTypes()) {      if (arg.isFloatType()) {        if (fpRegistersInUse < NATIVE_PARAMETER_FPRS.length) {          asm.emitMOVSS_Reg_RegDisp((XMM)NATIVE_PARAMETER_FPRS[fpRegistersInUse],SP,Offset.fromIntZeroExtend(position << LG_WORDSIZE));          if (dataOnStack) {            stackholes|=1 << position;          } else {            asm.emitPOP_Reg(T0);          }          fpRegistersInUse++;          argsPassedInRegister++;        } else {          dataOnStack=true;        }      } else       if (arg.isDoubleType()) {        if (fpRegistersInUse < NATIVE_PARAMETER_FPRS.length) {          asm.emitMOVSD_Reg_RegDisp((XMM)NATIVE_PARAMETER_FPRS[fpRegistersInUse],SP,Offset.fromIntZeroExtend(position << LG_WORDSIZE));          if (dataOnStack) {            stackholes|=1 << position;          } else {            asm.emitPOP_Reg(T0);          }          if (VM.BuildFor32Addr)           asm.emitPOP_Reg(T0);          fpRegistersInUse++;          argsPassedInRegister+=VM.BuildFor32Addr ? 2 : 1;        } else {          dataOnStack=true;        }      } else {        if (gpRegistersInUse < NATIVE_PARAMETER_GPRS.length) {          asm.emitMOV_Reg_RegDisp_Quad(NATIVE_PARAMETER_GPRS[gpRegistersInUse],SP,Offset.fromIntZeroExtend(position << LG_WORDSIZE));          if (dataOnStack) {            stackholes|=1 << position;          } else {            asm.emitPOP_Reg(T0);          }          gpRegistersInUse++;          argsPassedInRegister++;        } else {          dataOnStack=true;        }      }      if (dataOnStack) {        position++;      }    }    position--;    int onStackOffset=position;    int mask=0;    for (int i=position; i >= 0; i--) {      mask=1 << i;      if ((stackholes & mask) != 0) {        continue;      }      if (i < onStackOffset) {        asm.emitMOV_Reg_RegDisp_Quad(T0,SP,Offset.fromIntZeroExtend(i << LOG_BYTES_IN_WORD));        asm.emitMOV_RegDisp_Reg_Quad(SP,Offset.fromIntZeroExtend(onStackOffset << LOG_BYTES_IN_WORD),T0);      }      onStackOffset--;    }    while (onStackOffset >= 0) {      asm.emitPOP_Reg(T0);      onStackOffset--;    }  }  if (VM.BuildFor32Addr) {    asm.emitMOV_Reg_Imm(T0,nativeIP.toInt());  } else {    asm.emitMOV_Reg_Imm_Quad(T0,nativeIP.toLong());  }  if (VM.ExtremeAssertions && VM.BuildFor64Addr) {    asm.emitBT_Reg_Imm(ESP,3);    ForwardReference fr=asm.forwardJcc(LGE);    asm.emitINT_Imm(3);    fr.resolve(asm);  }  asm.emitCALL_Reg(T0);  if (VM.BuildFor32Addr) {    int argsToThrowAway=method.getParameterWords() + 2 - argsPassedInRegister;    if (argsToThrowAway != 0) {      asm.emitLEA_Reg_RegDisp(SP,EBP,BP_ON_ENTRY_OFFSET);    }  } else {    asm.emitLEA_Reg_RegDisp_Quad(SP,EBP,BP_ON_ENTRY_OFFSET);  }  final TypeReference returnType=method.getReturnType();  if (returnType.isVoidType()) {  } else   if (returnType.isFloatType()) {    asm.emitPUSH_Reg(T0);    if (VM.BuildFor32Addr) {      asm.emitFSTP_RegInd_Reg(ESP,FP0);    } else {      asm.emitMOVSS_RegInd_Reg(ESP,XMM0);    }  } else   if (returnType.isDoubleType()) {    asm.emitPUSH_Reg(T0);    asm.emitPUSH_Reg(T0);    if (VM.BuildFor32Addr) {      asm.emitFSTP_RegInd_Reg_Quad(ESP,FP0);    } else {      asm.emitMOVSD_RegInd_Reg(ESP,XMM0);    }  } else   if (VM.BuildFor32Addr && returnType.isLongType()) {    asm.emitPUSH_Reg(T0);    asm.emitPUSH_Reg(T1);  } else {    if (returnType.isBooleanType()) {      asm.emitMOVZX_Reg_Reg_Byte(T0,T0);    } else     if (returnType.isByteType()) {      asm.emitMOVSX_Reg_Reg_Byte(T0,T0);    } else     if (returnType.isCharType()) {      asm.emitMOVZX_Reg_Reg_Word(T0,T0);    } else     if (returnType.isShortType()) {      asm.emitMOVSX_Reg_Reg_Word(T0,T0);    }    asm.emitPUSH_Reg(T0);  }  if (VM.BuildFor32Addr) {    asm.emitMOV_Reg_RegDisp(S0,EBP,JNICompiler.JNI_ENV_OFFSET);  } else {    asm.emitMOV_Reg_RegDisp_Quad(S0,EBP,JNICompiler.JNI_ENV_OFFSET);  }  if (VM.BuildFor32Addr) {    asm.emitMOV_Reg_RegDisp(THREAD_REGISTER,S0,Entrypoints.JNIEnvSavedTRField.getOffset());  } else {    asm.emitMOV_Reg_RegDisp_Quad(THREAD_REGISTER,S0,Entrypoints.JNIEnvSavedTRField.getOffset());  }  if (VM.BuildFor32Addr) {    asm.emitMOV_RegDisp_Reg(THREAD_REGISTER,ArchEntrypoints.framePointerField.getOffset(),EBP);  } else {    asm.emitMOV_RegDisp_Reg_Quad(THREAD_REGISTER,ArchEntrypoints.framePointerField.getOffset(),EBP);  }  if (VM.BuildFor32Addr) {    asm.emitMOV_Reg_Reg(PARAMETER_GPRS[0],S0);  } else {    asm.emitMOV_Reg_Reg_Quad(PARAMETER_GPRS[0],S0);  }  if (returnType.isReferenceType()) {    asm.emitPOP_Reg(PARAMETER_GPRS[1]);  } else {    asm.emitXOR_Reg_Reg(PARAMETER_GPRS[1],PARAMETER_GPRS[1]);  }  asm.emitPUSH_Reg(S0);  asm.emitPUSH_Reg(S0);  asm.emitPUSH_Reg(PARAMETER_GPRS[1]);  asm.baselineEmitLoadTIB(S0,S0);  asm.emitCALL_RegDisp(S0,Entrypoints.jniExit.getOffset());  asm.emitPOP_Reg(S0);  if (returnType.isVoidType()) {  } else   if (returnType.isReferenceType()) {  } else   if (returnType.isFloatType()) {    if (SSE2_FULL) {      asm.emitMOVSS_Reg_RegInd(XMM0,ESP);    } else {      asm.emitFLD_Reg_RegInd(FP0,ESP);    }    asm.emitPOP_Reg(T0);  } else   if (returnType.isDoubleType()) {    if (SSE2_FULL) {      asm.emitMOVSD_Reg_RegInd(XMM0,ESP);    } else {      asm.emitFLD_Reg_RegInd_Quad(FP0,ESP);    }    asm.emitPOP_Reg(T0);    asm.emitPOP_Reg(T0);  } else   if (VM.BuildFor32Addr && returnType.isLongType()) {    asm.emitPOP_Reg(T0);    asm.emitPOP_Reg(T1);  } else {    asm.emitPOP_Reg(T0);  }  asm.emitPOP_Reg(EBX);  if (VM.BuildFor32Addr) {    asm.emitMOV_RegDisp_Reg(S0,Entrypoints.JNIEnvBasePointerOnEntryToNative.getOffset(),EBX);  } else {    asm.emitMOV_RegDisp_Reg_Quad(S0,Entrypoints.JNIEnvBasePointerOnEntryToNative.getOffset(),EBX);  }  asm.emitPOP_Reg(EBX);  asm.emitPOP_Reg(EBP);  asm.emitPOP_Reg(EBX);  asm.emitPOP_Reg(EDI);  asm.emitPOP_Reg(S0);  asm.emitPOP_RegDisp(THREAD_REGISTER,ArchEntrypoints.framePointerField.getOffset());  if (method.isStatic()) {    asm.emitRET_Imm(method.getParameterWords() << LG_WORDSIZE);  } else {    asm.emitRET_Imm((method.getParameterWords() + 1) << LG_WORDSIZE);  }  CodeArray code=asm.getMachineCodes();  cm.compileComplete(code);  return cm;}  }
class C{  public boolean canBecomeActiveDefinition(BytecodeInstruction instruction){  if (!instruction.isDefinition())   return false;  return sharesVariableWith(instruction);}  }
class C{  public void test_delete_insert_blankNodes02() throws MalformedQueryException, TokenMgrError, ParseException {  final String sparql="PREFIX foaf:  <http://xmlns.com/foaf/0.1/>\n" + "DELETE { ?person foaf:givenName [] }\n" + "INSERT { ?person foaf:givenName 'William' }\n"+ "WHERE {\n"+ "  ?person foaf:givenName 'Bill'. \n"+ "  GRAPH <http://example/addresses> {\n"+ "    ?person foaf:givenName 'Bill'\n"+ "    }\n"+ "}";  try {    parseUpdate(sparql,baseURI);    fail("Expecting exception: blank nodes not allowed in DELETE template");  } catch (  MalformedQueryException ex) {  }}  }
class C{  public RegressionDatasetGeneralized(DataSet data){  this.data=data.getDoubleData();  this.variables=data.getVariables();}  }
class C{  @Override public void dontShowOKCancelButtons(){  m_dontShowButs=true;}  }
class C{  protected boolean hasHistory(){  return true;}  }
class C{  public void engineReset(){  context[0]=0x67452301;  context[1]=0xEFCDAB89;  context[2]=0x98BADCFE;  context[3]=0x10325476;  count=0L;  for (int i=0; i < BLOCK_LENGTH; i++)   buffer[i]=0;}  }
class C{  public Where<T,ID> isNotNull(String columnName) throws SQLException {  addClause(new IsNotNull(columnName,findColumnFieldType(columnName)));  return this;}  }
class C{  private static boolean checkLDAPGroupMemberAttributes(LdapTemplate template,RootDSE rootDSE,AuthnProviderParamsToValidate param,StringBuilder errorString){  boolean isValidGroupMemberAttributes=true;  String schemaDN=rootDSE.getSchemaNamingContext();  Set<String> errorGroupMemberAttributes=null;  List<List<String>> groupMemberAttributeLists=searchInLDAPSchema(template,LDAP_SCHEMA_ATTRIBUTE_TYPE_ATTRIBUTE,rootDSE,param.getUrls(),errorString);  if (CollectionUtils.isEmpty(groupMemberAttributeLists)) {    isValidGroupMemberAttributes=false;  } else {    errorGroupMemberAttributes=new HashSet<String>();    for (    String expGroupMemberAttribute : param.getGroupMemberAttributes()) {      boolean groupMemberAttributeFound=false;      for (      List<String> groupMemberAttributeList : groupMemberAttributeLists) {        for (        String groupMemberAttribute : groupMemberAttributeList) {          if (groupMemberAttribute.equalsIgnoreCase(expGroupMemberAttribute)) {            _log.debug("Found member attribute {} in LDAP schema {}",expGroupMemberAttribute,schemaDN);            groupMemberAttributeFound=true;            break;          }        }        if (groupMemberAttributeFound) {          break;        }      }      if (!groupMemberAttributeFound) {        errorGroupMemberAttributes.add(expGroupMemberAttribute);      }    }  }  if (!CollectionUtils.isEmpty(errorGroupMemberAttributes)) {    errorString.append(MessageFormat.format("Could not find attributes {0} in LDAP schema {1} at {2}",errorGroupMemberAttributes.toString(),schemaDN,param.getUrls().toString()));    isValidGroupMemberAttributes=false;  }  return isValidGroupMemberAttributes;}  }
class C{  private void initKeystoreAndTruststore(){  try {    DbClientContext ctx=_dbClient.getLocalContext();    if (isGeoDbsvc()) {      ctx=_dbClient.getGeoContext();    }    String keystorePath=ctx.getKeyStoreFile();    String truststorePath=ctx.getTrustStoreFile();    if (keystorePath == null && truststorePath == null) {      _log.info("Skipping keystore/truststore initialization, no paths provided");      return;    }    String password=ctx.getTrustStorePassword();    CassandraKeystoreHandler keystoreHandler=new CassandraKeystoreHandler(_coordinator,keystorePath,truststorePath,password);    if (keystorePath != null) {      _log.info("Initializing keystore for current node: {}",keystorePath);      keystoreHandler.saveKeyStore();    } else {      _log.info("Skipping keystore initialization, no path provided");    }    if (truststorePath != null) {      _log.info("Initializing truststore for current node: {}",truststorePath);      keystoreHandler.saveTrustStore();    } else {      _log.info("Skipping truststore initialization, no path provided");    }  } catch (  Exception e) {    _log.error("Unexpected exception during initializing cassandra keystore",e);    throw new IllegalStateException(e);  }}  }
class C{  protected RouteImpl(){  super();}  }
class C{  public boolean translateFile(final File sourceFile,final File destFile,final Map<String,String> translationList){  StringBuilder content=new StringBuilder();  BufferedReader br=null;  try {    br=new BufferedReader(new InputStreamReader(new FileInputStream(sourceFile),StandardCharsets.UTF_8));    String line=null;    while ((line=br.readLine()) != null) {      content.append(line).append(net.yacy.server.serverCore.CRLF_STRING);    }    br.close();  } catch (  final IOException e) {    return false;  } finally {    if (br != null) {      try {        br.close();      } catch (      final Exception e) {      }    }  }  String processedContent=translate(content,translationList);  BufferedWriter bw=null;  try {    bw=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(destFile),StandardCharsets.UTF_8));    bw.write(processedContent);    bw.close();  } catch (  final IOException e) {    return false;  } finally {    if (bw != null) {      try {        bw.close();      } catch (      final Exception e) {      }    }  }  return true;}  }
class C{  public int hashCode(){  return (Long.valueOf(Double.doubleToLongBits(version))).hashCode();}  }
class C{  protected void profilesChanged(){  if (pollIsInitialized()) {    this.cachedBridgeServerProfiles=null;    this.cachedControllerProfiles=null;    this.cachedBridgeServerAdvise=null;    this.cachedControllerAdvise=null;  }}  }
class C{  private StoragePort findStoragePortByNameInDB(DbClient dbClient,StorageHADomain vplexDirector,String portName){  URIQueryResultList results=new URIQueryResultList();  dbClient.queryByConstraint(ContainmentConstraint.Factory.getStorageHADomainStoragePortConstraint(vplexDirector.getId()),results);  Iterator<StoragePort> portIterator=dbClient.queryIterativeObjects(StoragePort.class,results,true);  while (portIterator.hasNext()) {    StoragePort port=portIterator.next();    if (port.getPortName().equals(portName)) {      return port;    }  }  log.info("Could not find StoragePort with portName '{}' for VPlex director {}",portName,vplexDirector.getNativeGuid());  return null;}  }
class C{  public void replaceRange(String str,int start,int end){  if (end < start) {    throw new IllegalArgumentException("end before start");  }  Document doc=getDocument();  if (doc != null) {    try {      if (doc instanceof AbstractDocument) {        ((AbstractDocument)doc).replace(start,end - start,str,null);      } else {        doc.remove(start,end - start);        doc.insertString(start,str,null);      }    } catch (    BadLocationException e) {      throw new IllegalArgumentException(e.getMessage());    }  }}  }
class C{  protected void initializeAllLiveAttributes(){  super.initializeAllLiveAttributes();  initializeLiveAttributes();}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.N4_MEMBER_ANNOTATION_LIST;}  }
class C{  private ReservoirLongsSketch(final long[] data,final long itemsSeen,final ResizeFactor rf,final short encodedResSize){  final int reservoirSize=ReservoirSize.decodeValue(encodedResSize);  if (data == null) {    throw new SketchesArgumentException("Instantiating sketch with null reservoir");  }  if (reservoirSize < 2) {    throw new SketchesArgumentException("Cannot instantiate sketch with reservoir size less than 2");  }  if (reservoirSize < data.length) {    throw new SketchesArgumentException("Instantiating sketch with max size less than array length: " + reservoirSize + " max size, array of length "+ data.length);  }  if ((itemsSeen >= reservoirSize && data.length < reservoirSize) || (itemsSeen < reservoirSize && data.length < itemsSeen)) {    throw new SketchesArgumentException("Instantiating sketch with too few samples. " + "Items seen: " + itemsSeen + ", max reservoir size: "+ reservoirSize+ ", "+ "data array length: "+ data.length);  }  encodedResSize_=encodedResSize;  reservoirSize_=reservoirSize;  currItemsAlloc_=data.length;  itemsSeen_=itemsSeen;  rf_=rf;  data_=data;}  }
class C{  private static boolean copyAsset(AssetManager assetManager,String fromAssetPath,String toPath){  InputStream in=null;  OutputStream out=null;  try {    in=assetManager.open(fromAssetPath);    new File(toPath).createNewFile();    out=new FileOutputStream(toPath);    copyFile(in,out);    in.close();    in=null;    out.flush();    out.close();    out=null;    return true;  } catch (  Exception e) {    e.printStackTrace();    return false;  }}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writePaint(this.paint,stream);  SerialUtilities.writeStroke(this.stroke,stream);}  }
class C{  public void invertThis() throws ArithmeticException {  if (isZero()) {    throw new ArithmeticException();  }  int r=31;  for (boolean found=false; !found && r >= 0; r--) {    if (((mDegree - 1) & mBitmask[r]) != 0) {      found=true;    }  }  r++;  GF2nElement m=ZERO((GF2nONBField)mField);  GF2nElement n=new GF2nONBElement(this);  int k=1;  for (int i=r - 1; i >= 0; i--) {    m=(GF2nElement)n.clone();    for (int j=1; j <= k; j++) {      m.squareThis();    }    n.multiplyThisBy(m);    k<<=1;    if (((mDegree - 1) & mBitmask[i]) != 0) {      n.squareThis();      n.multiplyThisBy(this);      k++;    }  }  n.squareThis();}  }
class C{  public MutableDistanceMap(double[][] rawDistanceMatrix){  super();  initialize(rawDistanceMatrix);}  }
class C{  public static String mapUnsupportedEncoding(String encoding){  if (encoding.equalsIgnoreCase("windows-1252")) {    return "iso-8859-1";  }  return encoding;}  }
class C{  private static String computeRegexString(String originalString,String oldName,String newName){  StringBuilder builder=new StringBuilder(originalString.length());  String oldNameOrNewNameRegEx=String.format("(%s)|(%s)",Pattern.quote(oldName),Pattern.quote(newName));  int i=originalString.indexOf(oldName);  if (i >= 0) {    int prevI=0;    while (i >= 0) {      builder.append(Pattern.quote(originalString.substring(prevI,i)));      builder.append(oldNameOrNewNameRegEx);      prevI=i;      i=originalString.indexOf(oldName,i + oldName.length());    }    builder.append(Pattern.quote(originalString.substring(prevI + oldName.length(),originalString.length())));  }  return builder.toString();}  }
class C{  protected void appendDetail(StringBuffer buffer,String fieldName,boolean[] array){  buffer.append(arrayStart);  for (int i=0; i < array.length; i++) {    if (i > 0) {      buffer.append(arraySeparator);    }    appendDetail(buffer,fieldName,array[i]);  }  buffer.append(arrayEnd);}  }
class C{  @SuppressWarnings("rawtypes") public Vertex evaluateCALL(Vertex expression,List<Relationship> arguments,Map<Vertex,Vertex> variables,Network network,long startTime,long maxTime,int stack) throws Exception {  Vertex source=evaluateExpression(expression.getRelationship(Primitive.THIS),variables,network,startTime,maxTime,stack);  Vertex function=evaluateExpression(expression.getRelationship(Primitive.FUNCTION),variables,network,startTime,maxTime,stack);  Object sourceObject=null;  if (source.isPrimitive()) {    String name=((Primitive)source.getData()).getIdentity().toLowerCase();    sourceObject=network.getBot().awareness().getSense(name);    if (sourceObject == null) {      sourceObject=network.getBot().mind().getThought(name);    }    if (sourceObject == null) {      sourceObject=network.getBot().awareness().getTool(name);    }  }  if (sourceObject == null) {    sourceObject=this;  }  if (!function.isPrimitive()) {    return network.createVertex(Primitive.NULL);  }  String functionName=((Primitive)function.getData()).getIdentity();  Object[] methodArguments=new Object[arguments.size() + 1];  Class[] argumentTypes=new Class[arguments.size() + 1];  methodArguments[0]=source;  argumentTypes[0]=Vertex.class;  Vertex[] values=new Vertex[arguments.size()];  for (int index=0; index < arguments.size(); index++) {    Vertex argument=evaluateExpression(arguments.get(index).getTarget(),variables,network,startTime,maxTime,stack);    values[index]=argument;    methodArguments[index + 1]=argument;    argumentTypes[index + 1]=Vertex.class;  }  Method method=null;  try {    method=sourceObject.getClass().getMethod(functionName,argumentTypes);  } catch (  Exception missing) {    methodArguments=new Object[2];    argumentTypes=new Class[2];    methodArguments[0]=source;    methodArguments[1]=values;    argumentTypes[0]=Vertex.class;    argumentTypes[1]=Vertex[].class;    try {      method=sourceObject.getClass().getMethod(functionName,argumentTypes);    } catch (    Exception reallyMissing) {      throw new SelfExecutionException(expression,"Missing function: " + functionName + " on: "+ source);    }  }  Vertex result=(Vertex)method.invoke(sourceObject,methodArguments);  if (result == null) {    result=network.createVertex(Primitive.NULL);  } else {    result=network.createVertex(result);  }  return result;}  }
class C{  public Bitmap decodeFileDescriptor(FileDescriptor fd,BitmapFactory.Options options){  if (options.mCancel) {    return null;  }  Thread thread=Thread.currentThread();  if (!canThreadDecoding(thread)) {    return null;  }  setDecodingOptions(thread,options);  Bitmap b=BitmapFactory.decodeFileDescriptor(fd,null,options);  removeDecodingOptions(thread);  return b;}  }
class C{  public synchronized void clear(){  super.clear();  hash.clear();}  }
class C{  public Rational(BigInteger numerator,BigInteger denominator){  BigInteger gcd=gcd(numerator,denominator);  r[0]=(denominator.compareTo(BigInteger.ZERO) > 0 ? BigInteger.ONE : new BigInteger("-1")).multiply(numerator.divide(gcd));  r[1]=denominator.divide(gcd);}  }
class C{  protected void configEpsilon(Parameterization config){  DoubleParameter epsilonP=new DoubleParameter(DBSCAN.Parameterizer.EPSILON_ID).addConstraint(CommonConstraints.GREATER_EQUAL_ZERO_DOUBLE);  if (config.grab(epsilonP)) {    settings.epsilon=epsilonP.doubleValue();  }}  }
class C{  public RowBuilder bool(String name){  ColumnBool column=new ColumnBool(_columns.size(),name,_offset);  _offset+=column.length();  _columns.add(column);  return this;}  }
class C{  public CProjectConfiguration(final INaviProject project,final ListenerProvider<IProjectListener> listeners,final SQLProvider provider,final int projectId,final String name,final String description,final Date creationDate,final Date modificationDate,final List<DebuggerTemplate> assignedDebuggers){  m_project=project;  m_listeners=listeners;  m_provider=provider;  m_id=projectId;  m_name=name;  m_description=description;  m_creationDate=new Date(creationDate.getTime());  m_modificationDate=new Date(modificationDate.getTime());  m_assignedDebuggers=new ArrayList<DebuggerTemplate>(assignedDebuggers);}  }
class C{  private void declareExtensions(){  new ProfileFeed().declareExtensions(extProfile);  new RegisterFeed().declareExtensions(extProfile);}  }
class C{  @Deprecated public static boolean isValid(){  if (getLicenseFile() != null) {    Properties lic=decrypt();    if (lic != null) {      @SuppressWarnings("unused") String pleaseDoNotCrack="";      pleaseDoNotCrack+="Ok, you found it.";      pleaseDoNotCrack+="This is the real deal.";      pleaseDoNotCrack+="One char away from 'the full thing'.";      pleaseDoNotCrack+="[...]";      pleaseDoNotCrack+="If you are reading this, you're probably a java developer.";      pleaseDoNotCrack+="If so, you know how much work can be in such a project like TMM.";      pleaseDoNotCrack+="So please, be kind and support the developers for your free License :)";      pleaseDoNotCrack+="http://www.tinymediamanager.org/donate/";      pleaseDoNotCrack+="It gives you a warm and fuzzy feeling - i swear ;)";      return true;    }  }  return false;}  }
class C{  @Override public void cleanup(){  if (state != null && state.textFormat != null) {    state.textFormat.flush();  }  if (cmds != null) {    cmds.finish();  }  stack=null;  parserStates=null;  state=null;  path=null;  cmds=null;}  }
class C{  static InputStream openUiMessages(Locale locale){  if (LocaleHandler.isStandardLanguage(locale)) {    InputStream in=openResource(uiMessagesPath(locale));    if (in != null) {      return in;    }  }  return openResource(uiMessagesPath(FALLBACK_LOCALE));}  }
class C{  public void flush() throws IOException {  closeStartIfNecessary();}  }
class C{  public BooleanResponse leaveRoom(String roomId,String userId){  return api.leaveRoom(roomId,userId);}  }
class C{  @SuppressWarnings("deprecation") @Override public void onFailure(int statusCode,Header[] headers,byte[] binaryData,Throwable error){  onFailure(statusCode,error,null);}  }
class C{  public static String escapeFilterParameter(String parameter){  return parameter.replace("\\","\\\\").replace(",","\\,");}  }
class C{  protected void addEnvironmentListener(){}  }
class C{  public Months plus(Months months){  if (months == null) {    return this;  }  return plus(months.getValue());}  }
class C{  protected int index(int row,int column){  return rowZero + row * rowStride + columnZero + column * columnStride;}  }
class C{  private static boolean isHex(char c){  return (('0' <= c) && (c <= '9')) || (('a' <= c) && (c <= 'f')) || (('A' <= c) && (c <= 'F'));}  }
class C{  public void forceFrameAllocation(){  this.allocFrame=true;}  }
class C{  public byte[] toByteArray(){  byte[] out=new byte[pos];  System.arraycopy(array,0,out,0,pos);  return out;}  }
class C{  public HarvestProcess exists(final byte[] hash){  if (this.delegatedURL != null && this.delegatedURL.containsKey(ASCII.String(hash))) {    return HarvestProcess.DELEGATED;  }  for (  final Request request : activeWorkerEntries().values()) {    if (Base64Order.enhancedCoder.equal(request.url().hash(),hash)) {      return HarvestProcess.WORKER;    }  }  return null;}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writeShape(this.legendLine,stream);}  }
class C{  public void addExtractor(Class<? extends GlobalFeature> globalFeatureClass){  addExtractor(new ExtractorItem(globalFeatureClass));}  }
class C{  protected static void initialize(boolean isClient){  if (isClient) {    LogManager.resetConfiguration();    Logger rootLogger=LogManager.getRootLogger();    rootLogger.setLevel(s_currentLevelLog4J);  }}  }
class C{  public static Inet4Address fromInteger(int address){  return getInet4Address(Ints.toByteArray(address));}  }
class C{  protected void updateOrientationLine(Position centerPosition,Position controlPoint){  Path rotationLine=(Path)this.getAccessoryLayer().getRenderables().iterator().next();  double cAltitude=centerPosition.getAltitude();  double rAltitude=controlPoint.getAltitude();  if (this.getShapeAltitudeMode() == WorldWind.RELATIVE_TO_GROUND) {    rotationLine.setAltitudeMode(WorldWind.RELATIVE_TO_GROUND);    rotationLine.setFollowTerrain(true);    cAltitude=centerPosition.getAltitude() - this.getWwd().getModel().getGlobe().getElevation(centerPosition.getLatitude(),centerPosition.getLongitude());    rAltitude=controlPoint.getAltitude() - this.getWwd().getModel().getGlobe().getElevation(controlPoint.getLatitude(),controlPoint.getLongitude());    cAltitude*=this.getWwd().getSceneController().getVerticalExaggeration();    rAltitude*=this.getWwd().getSceneController().getVerticalExaggeration();    cAltitude+=100;    rAltitude+=100;  } else   if (this.getShapeAltitudeMode() == WorldWind.CLAMP_TO_GROUND) {    rotationLine.setAltitudeMode(WorldWind.CLAMP_TO_GROUND);    rotationLine.setFollowTerrain(true);  } else {    rotationLine.setAltitudeMode(WorldWind.ABSOLUTE);    rotationLine.setFollowTerrain(false);  }  java.util.List<Position> linePositions=new ArrayList<Position>(2);  linePositions.add(new Position(centerPosition,cAltitude));  linePositions.add(new Position(controlPoint,rAltitude));  rotationLine.setPositions(linePositions);}  }
class C{  public Set keySet(){  return this.map.keySet();}  }
class C{  public static void invokeWebserviceASync(WSDefinition def,final Callback call,Object... arguments){  WSConnection cr=new WSConnection(def,call,arguments);  NetworkManager.getInstance().addToQueue(cr);}  }
class C{  public Matrix peekMatrix(){  return this.matrixStack.peek();}  }
class C{  private int compareNull(String s1,String s2){  return (s1 == s2) ? 0 : (s1 == null) ? -1 : (s2 == null) ? +1 : s1.compareTo(s2);}  }
class C{  public static int[] parseLEDPattern(String stringPattern){  int on, off;  if (stringPattern == null)   return null;  String[] splitPattern=stringPattern.split(",");  if (splitPattern.length != 2)   return null;  final int LED_PATTERN_MIN_SECONDS=0;  final int LED_PATTERN_MAX_SECONDS=60000;  try {    on=Integer.parseInt(splitPattern[0]);  } catch (  NumberFormatException e) {    return null;  }  try {    off=Integer.parseInt(splitPattern[1]);  } catch (  NumberFormatException e) {    return null;  }  if (on >= LED_PATTERN_MIN_SECONDS && on <= LED_PATTERN_MAX_SECONDS && off >= LED_PATTERN_MIN_SECONDS && off <= LED_PATTERN_MAX_SECONDS) {    return new int[]{on,off};  }  return null;}  }
class C{  public void testSend(){  PseudoTcpTestTransfer test=new PseudoTcpTestTransfer();  test.setLocalMtu(1500);  test.setRemoteMtu(1500);  test.doTestTransfer(1000000);}  }
class C{  public void clear(){  this.keys.clear();  this.values.clear();  this.indexMap.clear();}  }
class C{  public QueryEngine(AerospikeClient client){  this();  setClient(client);}  }
class C{  public void stop(){  _execService.shutdown();  try {    _execService.awaitTermination(120,TimeUnit.SECONDS);  } catch (  Exception e) {    _logger.error("TimeOut occured after waiting Client Threads to finish");  }}  }
class C{  @Override public boolean isLiteral(){  return this.literal;}  }
class C{  public static String slurpReader(Reader reader){  BufferedReader r=new BufferedReader(reader);  StringBuffer buff=new StringBuffer();  try {    char[] chars=new char[SLURPBUFFSIZE];    while (true) {      int amountRead=r.read(chars,0,SLURPBUFFSIZE);      if (amountRead < 0) {        break;      }      buff.append(chars,0,amountRead);    }    r.close();  } catch (  Exception e) {    throw new RuntimeException();  }  return buff.toString();}  }
class C{  private void parseAndAddElement(Element element,String group){  VCardParameters parameters=parseParameters(element);  VCardProperty property;  String propertyName=element.getLocalName();  String ns=element.getNamespaceURI();  QName qname=new QName(ns,propertyName);  VCardPropertyScribe<? extends VCardProperty> scribe=index.getPropertyScribe(qname);  try {    Result<? extends VCardProperty> result=scribe.parseXml(element,parameters);    property=result.getProperty();    property.setGroup(group);    for (    String warning : result.getWarnings()) {      warnings.add(null,propertyName,warning);    }  } catch (  SkipMeException e) {    warnings.add(null,propertyName,22,e.getMessage());    return;  }catch (  CannotParseException e) {    String xml=XmlUtils.toString(element);    warnings.add(null,propertyName,33,xml,e.getMessage());    scribe=index.getPropertyScribe(Xml.class);    Result<? extends VCardProperty> result=scribe.parseXml(element,parameters);    property=result.getProperty();    property.setGroup(group);  }catch (  EmbeddedVCardException e) {    warnings.add(null,propertyName,34);    return;  }  vcard.addProperty(property);}  }
class C{  @AfterClass public static void tearDownClass() throws Exception {}  }
class C{  private AWTEvent createDelegateEvent(final AWTEvent e){  AWTEvent delegateEvent=null;  if (e instanceof MouseWheelEvent) {    MouseWheelEvent me=(MouseWheelEvent)e;    delegateEvent=new MouseWheelEvent(delegate,me.getID(),me.getWhen(),me.getModifiers(),me.getX(),me.getY(),me.getClickCount(),me.isPopupTrigger(),me.getScrollType(),me.getScrollAmount(),me.getWheelRotation());  } else   if (e instanceof MouseEvent) {    MouseEvent me=(MouseEvent)e;    Component eventTarget=SwingUtilities.getDeepestComponentAt(delegate,me.getX(),me.getY());    if (me.getID() == MouseEvent.MOUSE_DRAGGED) {      if (delegateDropTarget == null) {        delegateDropTarget=eventTarget;      } else {        eventTarget=delegateDropTarget;      }    }    if (me.getID() == MouseEvent.MOUSE_RELEASED && delegateDropTarget != null) {      eventTarget=delegateDropTarget;      delegateDropTarget=null;    }    if (eventTarget == null) {      eventTarget=delegate;    }    delegateEvent=SwingUtilities.convertMouseEvent(getTarget(),me,eventTarget);  } else   if (e instanceof KeyEvent) {    KeyEvent ke=(KeyEvent)e;    delegateEvent=new KeyEvent(getDelegateFocusOwner(),ke.getID(),ke.getWhen(),ke.getModifiers(),ke.getKeyCode(),ke.getKeyChar(),ke.getKeyLocation());    AWTAccessor.getKeyEventAccessor().setExtendedKeyCode((KeyEvent)delegateEvent,ke.getExtendedKeyCode());  } else   if (e instanceof FocusEvent) {    FocusEvent fe=(FocusEvent)e;    delegateEvent=new FocusEvent(getDelegateFocusOwner(),fe.getID(),fe.isTemporary());  }  return delegateEvent;}  }
class C{  public CharSequence loadLabel(PackageManager pm){  if (mLabel == 0 || pm == null)   return "";  return pm.getText(getPackageName(),mLabel,mService.serviceInfo.applicationInfo);}  }
class C{  public static void sign(File jsrFile,PrivateKey privateKey,X509Certificate[] certificateChain,SignatureType signatureType,String signatureName,String signer,DigestType digestType,String tsaUrl,Provider provider) throws IOException, CryptoException {  File tmpFile=File.createTempFile("kse","tmp");  tmpFile.deleteOnExit();  sign(jsrFile,tmpFile,privateKey,certificateChain,signatureType,signatureName,signer,digestType,tsaUrl,provider);  CopyUtil.copyClose(new FileInputStream(tmpFile),new FileOutputStream(jsrFile));  tmpFile.delete();}  }
class C{  public static void writeBoolean(boolean b,Parcel out){  out.writeInt(b ? 1 : 0);}  }
class C{  static PositionType SwingOrientationConstantToGTK(int side){switch (side) {case SwingConstants.LEFT:    return PositionType.LEFT;case SwingConstants.RIGHT:  return PositionType.RIGHT;case SwingConstants.TOP:return PositionType.TOP;case SwingConstants.BOTTOM:return PositionType.BOTTOM;}assert false : "Unknown orientation: " + side;return PositionType.TOP;}  }
class C{  public boolean checkStationaryFunctionAccuracy(final double f,final boolean positiveOptimization,final Type ecType){  if (!positiveOptimization)   return false;  if (f >= functionEpsilon_)   return false;  this.ecType=Type.StationaryFunctionAccuracy;  return true;}  }
class C{  @RequestMapping(value={"/",""},method=RequestMethod.PUT) @ResponseBody public RestWrapper insert(@ModelAttribute("busdomain") @Valid BusDomain busDomain,BindingResult bindingResult,Principal principal){  RestWrapper restWrapper=null;  if (bindingResult.hasErrors()) {    BindingResultError bindingResultError=new BindingResultError();    return bindingResultError.errorMessage(bindingResult);  }  try {    com.wipro.ats.bdre.md.dao.jpa.BusDomain jpaBusDomain=new com.wipro.ats.bdre.md.dao.jpa.BusDomain();    jpaBusDomain.setBusDomainId(busDomain.getBusDomainId());    jpaBusDomain.setBusDomainName(busDomain.getBusDomainName());    jpaBusDomain.setBusDomainOwner(busDomain.getBusDomainOwner());    jpaBusDomain.setDescription(busDomain.getDescription());    Integer busDomainId=busDomainDAO.insert(jpaBusDomain);    jpaBusDomain.setBusDomainId(busDomainId);    restWrapper=new RestWrapper(busDomain,RestWrapper.OK);    LOGGER.info(RECORDWITHID + busDomain.getBusDomainId() + " inserted in BusDomain by User:"+ principal.getName()+ busDomain);  } catch (  MetadataException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  public String toString(int intentSpaces){  return serialize(root,intentSpaces);}  }
class C{  public void clear(){  mRecycler.setAdapter(null);}  }
class C{  public static SoapMessage createSoapMessage(String soapAction) throws ParserException {  try {    DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();    dbf.setNamespaceAware(true);    Document doc=dbf.newDocumentBuilder().newDocument();    Node body=doc.createElement("body");    Node header=doc.createElement("header");    return new SoapMessage(body,header,soapAction);  } catch (  DOMException e) {    throw new ParserException("Error creating SOAP message",e);  }catch (  ParserConfigurationException e) {    throw new ParserException("Error creating SOAP message",e);  }}  }
class C{  @DELETE @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{consistencyGroupSnapshot_id}") @CheckPermission(roles={Role.SYSTEM_MONITOR,Role.TENANT_ADMIN},acls={ACL.ANY}) public Response deleteConsistencyGroupSnapshot(@PathParam("tenant_id") String openstackTenantId,@PathParam("consistencyGroupSnapshot_id") String consistencyGroupSnapshot_id,@HeaderParam("X-Cinder-V1-Call") String isV1Call,@Context HttpHeaders header){  final BlockSnapshot snapshot=findSnapshot(consistencyGroupSnapshot_id,openstackTenantId);  final URI snapshotCgURI=snapshot.getConsistencyGroup();  URIQueryResultList uris=getCinderHelper().getConsistencyGroupsUris(openstackTenantId,getUserFromContext());  boolean isConsistencyGroupHasSnapshotId=false;  if (uris != null && snapshotCgURI != null) {    for (    URI blockCGUri : uris) {      BlockConsistencyGroup blockCG=_dbClient.queryObject(BlockConsistencyGroup.class,blockCGUri);      if (blockCG != null && !blockCG.getInactive()) {        if (snapshotCgURI.equals(blockCG.getId())) {          isConsistencyGroupHasSnapshotId=true;        }      }    }  }  if (isConsistencyGroupHasSnapshotId) {    final String task=UUID.randomUUID().toString();    TaskList response=new TaskList();    if (snapshot.getInactive()) {      Operation op=new Operation();      op.ready("The consistency group snapshot has already been deactivated");      op.setResourceType(ResourceOperationTypeEnum.DELETE_CONSISTENCY_GROUP_SNAPSHOT);      _dbClient.createTaskOpStatus(BlockSnapshot.class,snapshot.getId(),task,op);      TaskResourceRep taskResponse=toTask(snapshot,task,op);      if (taskResponse.getState().equals("ready")) {        return Response.status(202).build();      }    }    Volume volume=_permissionsHelper.getObjectById(snapshot.getParent(),Volume.class);    BlockServiceApi blockServiceApiImpl=BlockService.getBlockServiceImpl(volume,_dbClient);    blockServiceApiImpl.deleteSnapshot(snapshot,Arrays.asList(snapshot),task,VolumeDeleteTypeEnum.FULL.name());    auditBlockConsistencyGroup(OperationTypeEnum.DELETE_CONSISTENCY_GROUP_SNAPSHOT,AuditLogManager.AUDITLOG_SUCCESS,AuditLogManager.AUDITOP_BEGIN,snapshot.getId().toString(),snapshot.getLabel());    return Response.status(202).build();  } else {    return CinderApiUtils.createErrorResponse(400,"Snapshot not attached to any active consistencygroup");  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:08.032 -0400",hash_original_method="A84AA1CA81AD20017BBC601763D2C567",hash_generated_method="ABF3F14F4312B496F2A647148A8C95FE") @Override public void close(){  LogManager.getLogManager().checkAccess();  close(true);}  }
class C{  public boolean isScaleEdges(){  return scaleEdges;}  }
class C{  private void callListener(final HttpServerRequest request,final Buffer buffer,final List<Listener> filteredListeners,final Handler<Void> handler){  for (  Listener listener : filteredListeners) {    log.debug("Enqueue request matching " + request.method() + " "+ listener.getMonitoredUrl()+ " with listener "+ listener.getListener());    String path=request.uri();    if (!listener.getHook().isFullUrl()) {      path=request.uri().replace(listener.getMonitoredUrl(),"");    }    String targetUri;    if (listener.getHook().getDestination().startsWith("/")) {      targetUri=listener.getListener() + path;      log.debug(" > internal target: " + targetUri);    } else {      targetUri=hookRootUri + LISTENER_HOOK_TARGET_PATH + listener.getListener()+ path;      log.debug(" > external target: " + targetUri);    }    String queue=LISTENER_QUEUE_PREFIX + "-" + listener.getListenerId();    MultiMap queueHeaders=new CaseInsensitiveHeaders();    queueHeaders.addAll(request.headers());    if (ExpiryCheckHandler.getExpireAfter(queueHeaders) == null) {      ExpiryCheckHandler.setExpireAfter(queueHeaders,listener.getHook().getExpireAfter());    }    if (ExpiryCheckHandler.getQueueExpireAfter(queueHeaders) == null && listener.getHook().getQueueExpireAfter() != -1) {      ExpiryCheckHandler.setQueueExpireAfter(queueHeaders,listener.getHook().getQueueExpireAfter());    }    updateHeadersWithStaticHeaders(queueHeaders,listener.getHook().getStaticHeaders());    queueHeaders.add("x-translate-status-4xx","200");    requestQueue.enqueue(new HttpRequest(request.method(),targetUri,queueHeaders,buffer.getBytes()),queue,handler);  }  if (filteredListeners.isEmpty() && handler != null) {    handler.handle(null);  }}  }
class C{  public void register(AutomationItem item){  _automationHashTable.put(item.getId(),item);  String[] getId=item.getId().split(Automation.REGEX);  int id=Integer.parseInt(getId[1]);  if (id > _IdNumber) {    _IdNumber=id;  }  if (getCurrentAutomationItem() == null) {    setCurrentAutomationItem(item);  }  setDirtyAndFirePropertyChange(LISTCHANGE_CHANGED_PROPERTY,getSize() - 1,getSize());}  }
class C{  public void testSimpleOrAndSwitch(){  final ASTFilterNormalizationOptimizer rewriter=new ASTFilterNormalizationOptimizer();  final IBindingSet[] bsets=new IBindingSet[]{new ListBindingSet()};  final QueryRoot given=new QueryRoot(QueryType.SELECT);{    final ProjectionNode projection=new ProjectionNode();    given.setProjection(projection);    projection.addProjectionVar(new VarNode("s"));    final JoinGroupNode whereClause=new JoinGroupNode();    whereClause.setProperty(QueryHints.NORMALIZE_FILTER_EXPRESSIONS,"true");    given.setWhereClause(whereClause);    final StatementPatternNode spn=new StatementPatternNode(new VarNode("s"),new VarNode("p"),new VarNode("o"),null,Scope.DEFAULT_CONTEXTS);    whereClause.addChild(spn);    final FunctionNode bound1=new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s1")});    final FunctionNode bound2=new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s2")});    final FunctionNode bound3=new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s3")});    final FunctionNode bound4=new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s4")});    final FunctionNode bound5=new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s5")});    final FilterNode filterNode=new FilterNode(FunctionNode.OR(FunctionNode.AND(bound1,bound2),FunctionNode.AND(bound3,FunctionNode.AND(bound4,bound5))));    assertFalse(StaticAnalysis.isCNF(filterNode));    whereClause.addChild(filterNode);  }  final QueryRoot expected=new QueryRoot(QueryType.SELECT);{    final ProjectionNode projection=new ProjectionNode();    expected.setProjection(projection);    projection.addProjectionVar(new VarNode("s"));    final JoinGroupNode whereClause=new JoinGroupNode();    whereClause.setProperty(QueryHints.NORMALIZE_FILTER_EXPRESSIONS,"true");    expected.setWhereClause(whereClause);    final StatementPatternNode spn=new StatementPatternNode(new VarNode("s"),new VarNode("p"),new VarNode("o"),null,Scope.DEFAULT_CONTEXTS);    whereClause.addChild(spn);    final FunctionNode bound1=new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s1")});    final FunctionNode bound2=new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s2")});    final FunctionNode bound3=new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s3")});    final FunctionNode bound4=new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s4")});    final FunctionNode bound5=new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("s5")});    final FunctionNode and1=FunctionNode.OR(bound1,bound3);    final FunctionNode and2=FunctionNode.OR(bound1,bound4);    final FunctionNode and3=FunctionNode.OR(bound1,bound5);    final FunctionNode and4=FunctionNode.OR(bound2,bound3);    final FunctionNode and5=FunctionNode.OR(bound2,bound4);    final FunctionNode and6=FunctionNode.OR(bound2,bound5);    whereClause.addChild(new FilterNode(and1));    whereClause.addChild(new FilterNode(and2));    whereClause.addChild(new FilterNode(and3));    whereClause.addChild(new FilterNode(and4));    whereClause.addChild(new FilterNode(and5));    whereClause.addChild(new FilterNode(and6));  }  final AST2BOpContext context=new AST2BOpContext(new ASTContainer(given),store);  final IQueryNode actual=rewriter.optimize(context,new QueryNodeWithBindingSet(given,bsets)).getQueryNode();  assertSameAST(expected,actual);}  }
class C{  @Override public boolean containsValue(Object value){  if (value != null) {    for (int i=0; i < elementData.length; i++) {      Entry<K,V> entry=elementData[i];      while (entry != null) {        if (areEqualValues(value,entry.value)) {          return true;        }        entry=entry.next;      }    }  } else {    for (int i=0; i < elementData.length; i++) {      Entry<K,V> entry=elementData[i];      while (entry != null) {        if (entry.value == null) {          return true;        }        entry=entry.next;      }    }  }  return false;}  }
class C{  public static String classSimpleName(String className){  int separator=className.lastIndexOf('.');  if (separator == -1) {    return className;  } else {    return className.substring(separator + 1);  }}  }
class C{  public UserEntry(){  super();  getCategories().add(USER_CATEGORY);}  }
class C{  public static boolean isDefinedNSDecl(SerializationHandler serializer,int attr,DTM dtm){  if (DTM.NAMESPACE_NODE == dtm.getNodeType(attr)) {    String prefix=dtm.getNodeNameX(attr);    String uri=serializer.getNamespaceURIFromPrefix(prefix);    if ((null != uri) && uri.equals(dtm.getStringValue(attr)))     return true;  }  return false;}  }
class C{  private boolean languageMatches(String glyphLang){  if (glyphLang == null || glyphLang.length() == 0) {    return true;  }  StringTokenizer st=new StringTokenizer(glyphLang,",");  while (st.hasMoreTokens()) {    String s=st.nextToken();    if (s.equals(language) || (s.startsWith(language) && s.length() > language.length() && s.charAt(language.length()) == '-')) {      return true;    }  }  return false;}  }
class C{  public void createBuffer(BufferInfo bufferInfo,BufferType type,Buffer buffer,int target,int usage){  int byteSize=FLOAT_SIZE_BYTES;  if (type == BufferType.SHORT_BUFFER)   byteSize=SHORT_SIZE_BYTES; else   if (type == BufferType.BYTE_BUFFER)   byteSize=BYTE_SIZE_BYTES; else   if (type == BufferType.INT_BUFFER)   byteSize=INT_SIZE_BYTES;  bufferInfo.byteSize=byteSize;  int buff[]=new int[1];  GLES20.glGenBuffers(1,buff,0);  int handle=buff[0];  if (buffer != null) {    buffer.rewind();    GLES20.glBindBuffer(target,handle);    GLES20.glBufferData(target,buffer.capacity() * byteSize,buffer,usage);    GLES20.glBindBuffer(target,0);  }  bufferInfo.buffer=buffer;  bufferInfo.bufferHandle=handle;  bufferInfo.bufferType=type;  bufferInfo.target=target;  bufferInfo.usage=usage;}  }
class C{  public void onDestroyView(){  if (bottomSheetLayout != null) {    viewDestroyed=true;    bottomSheetLayout.dismissSheet();    bottomSheetLayout=null;  }}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAnonymous_methodBody_2_();}  }
class C{  private Operation pollQueryOperation(){  return this.queryQueue.poll();}  }
class C{  public void notifyThrottleFound(DccThrottle t){  if (log.isDebugEnabled()) {    log.debug("notifyThrottleFound address= " + t.getLocoAddress().toString());  }  _throttle=t;  _controlPanel.notifyThrottleFound(t);  _functionPanel.notifyThrottleFound(t);  _buttonPanel.notifyThrottleFound(t);  setSpeedSetting(0.0f);  RosterEntry train=_warrantFrame.getTrain();  String name="";  if (train != null) {    name=train.getId();  }  setTitle(name + " (" + t.getLocoAddress().toString()+ ")");}  }
class C{  public void changeStartColor(@ColorInt int color){  stopAnimation();  setStartColor(color);  reinitialize();}  }
class C{  public Object jjtAccept(ParserVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  protected boolean isPlainFlavor(DataFlavor flavor){  DataFlavor[] flavors=plainFlavors;  for (int i=0; i < flavors.length; i++) {    if (flavors[i].equals(flavor))     return true;  }  return false;}  }
class C{  @NotNull private static String wrapBracesIfNeeded(final boolean required,@NotNull final String textToShow){  if (textToShow.startsWith(MANDATORY_ARG_BRACES.first) || textToShow.startsWith(OPTIONAL_ARG_BRACES.first)) {    return textToShow;  }  final Pair<String,String> braces=(required ? MANDATORY_ARG_BRACES : OPTIONAL_ARG_BRACES);  return String.format("%s%s%s",braces.first,textToShow,braces.second);}  }
class C{  @Override public int hashCode(){  int result=super.hashCode();  int count=getItemCount();  if (count > 0) {    XYDataItem item=getRawDataItem(0);    result=29 * result + item.hashCode();  }  if (count > 1) {    XYDataItem item=getRawDataItem(count - 1);    result=29 * result + item.hashCode();  }  if (count > 2) {    XYDataItem item=getRawDataItem(count / 2);    result=29 * result + item.hashCode();  }  result=29 * result + this.maximumItemCount;  result=29 * result + (this.autoSort ? 1 : 0);  result=29 * result + (this.allowDuplicateXValues ? 1 : 0);  return result;}  }
class C{  @Override public void handleMouseInput(){  super.handleMouseInput();  int i=Mouse.getEventDWheel();  if (i != 0 && needsScrollBars()) {    final int j=tileEntity.filters.size() - 4;    if (i > 0) {      i=1;    }    if (i < 0) {      i=-1;    }    scroll=(float)(scroll - (double)i / (double)j);    if (scroll < 0.0F) {      scroll=0.0F;    }    if (scroll > 1.0F) {      scroll=1.0F;    }  }}  }
class C{  public static ServerInterpreter newGCspyServerInterpreter(){  return factory.newGCspyServerInterpreter();}  }
class C{  public ArrayList<XmppFriend> retrieveFriendList(){  ArrayList<XmppFriend> friends=new ArrayList<XmppFriend>();  if (sConnection != null && sConnection.isAuthenticated()) {    try {      String userID;      String status;      Roster roster=Roster.getInstanceFor(sConnection);      for (      RosterEntry r : roster.getEntries()) {        userID=r.getUser();        status=retrieveStatusMessage(userID);        friends.add(new XmppFriend(userID,r.getName(),status,retrieveState(userID)));      }      sendFriendList(friends);    } catch (    Exception ex) {      Log.w("Failed to retrieve Xmpp Friend list",ex);    }  }  return friends;}  }
class C{  public void widgetSelected(SelectionEvent e){  readButtons();switch (type) {case MENU:    int buttonId=((Integer)object).intValue();switch (buttonId) {case BACK_BUTTON:    state=state.previousState;  raiseWindow();break;case PROVE_BUTTON:makeProof(null,false,true);break;case SHOW_CONTEXT_BUTTON:System.out.println("button is " + showContextButton.getSelection());readButtons();raiseWindow();break;case TEST_BUTTON:windowShell=decomposeHandler.windowShell;decomposeHandler.location=windowShell.getLocation();windowShell.close();if (windowShell != null) {if (windowShell.isDisposed()) {System.out.println("closing disposes of window");} else {windowShell.dispose();}if (windowShell == null) {System.out.println("Closing nullifies");}}raiseWindow();break;}break;case ACTION:DecompositionState newState=state.clone();newState.previousState=state;state=newState;state.hasChanged=true;NodeRepresentation nodeObj=pathToNodeRep((Vector<Integer>)object);if (nodeObj.nodeType == NodeRepresentation.OR_DECOMP) {decomposeHandler.caseAction(nodeObj);} else {switch (nodeObj.nodeSubtype) {case NodeRepresentation.AND_TYPE:decomposeHandler.andAction(nodeObj);break;case NodeRepresentation.OR_TYPE:decomposeHandler.orAction(nodeObj);break;case NodeRepresentation.IMPLIES_TYPE:decomposeHandler.impliesAction(nodeObj);break;case NodeRepresentation.FORALL_TYPE:decomposeHandler.forAllAction(nodeObj);break;case NodeRepresentation.EXISTS_TYPE:decomposeHandler.existsAction(nodeObj);break;case NodeRepresentation.SQSUB_TYPE:decomposeHandler.sqsubAction(nodeObj);break;case NodeRepresentation.OTHER_TYPE:break;}}break;}return;}  }
class C{  public static Request buildLoginPost(@Nullable String username,@Nullable String password){  Map<String,String> login=Maps.newHashMap();  if (username != null) {    login.put("username",username);  }  if (password != null) {    login.put("password",password);  }  RequestBody body;  try {    body=RequestBody.create(KeywhizClient.JSON,MAPPER.writeValueAsString(login));  } catch (  JsonProcessingException e) {    throw new AssertionError(e);  }  return new Request.Builder().url(HttpClients.testUrl("/admin/login")).post(body).addHeader("Content-Type",MediaType.APPLICATION_JSON).build();}  }
class C{  @Override public CompilerPhase newExecution(IR ir){  return this;}  }
class C{  public static OptionBuilder hasOptionalArgs(int numArgs){  OptionBuilder.numberOfArgs=numArgs;  OptionBuilder.optionalArg=true;  return instance;}  }
class C{  public static <T1,T2>Pair<T1,T2> create(T1 one,T2 two){  return new Pair<>(one,two);}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  private Value callObjPseudoFunction(Value[] args,int isolateId) throws PlayerDebugException {  if (args.length != 1) {    return DValue.forPrimitive(DValue.UNDEFINED,isolateId);  }  double arg=ECMA.toNumber(this,args[0]);  long id=(long)arg;  if (id != arg) {    return DValue.forPrimitive(DValue.UNDEFINED,isolateId);  }  DValue value=m_manager.getValue(id,isolateId);  if (value == null) {    return DValue.forPrimitive(DValue.UNDEFINED,isolateId);  }  return value;}  }
class C{  String rrToString(){  StringBuffer sb=new StringBuffer();  sb.append(alg);  sb.append(" ");  if (Options.check("multiline"))   sb.append("(\n\t");  sb.append(FormattedTime.format(timeInception));  sb.append(" ");  sb.append(FormattedTime.format(timeExpire));  sb.append(" ");  sb.append(modeString());  sb.append(" ");  sb.append(Rcode.TSIGstring(error));  if (Options.check("multiline")) {    sb.append("\n");    if (key != null) {      sb.append(base64.formatString(key,64,"\t",false));      sb.append("\n");    }    if (other != null)     sb.append(base64.formatString(other,64,"\t",false));    sb.append(" )");  } else {    sb.append(" ");    if (key != null) {      sb.append(base64.toString(key));      sb.append(" ");    }    if (other != null)     sb.append(base64.toString(other));  }  return sb.toString();}  }
class C{  public JSONNode addPrimitive(String name,Double value){  return add(name,value,NodeType.PRIMITIVE);}  }
class C{  private static void updateObservationCacheFromXformData(String patientUuid,TreeElement savedRoot,ContentResolver resolver){  ContentValues common=new ContentValues();  common.put(Contracts.Observations.UUID,(String)null);  common.put(Contracts.Observations.PATIENT_UUID,patientUuid);  final DateTime encounterTime=getEncounterAnswerDateTime(savedRoot);  if (encounterTime == null)   return;  common.put(Contracts.Observations.ENCOUNTER_MILLIS,encounterTime.getMillis());  common.put(Contracts.Observations.ENCOUNTER_UUID,UUID.randomUUID().toString());  Set<Integer> xformConceptIds=new HashSet<>();  List<ContentValues> toInsert=getAnsweredObservations(common,savedRoot,xformConceptIds);  Map<String,String> xformIdToUuid=mapFormConceptIdToUuid(xformConceptIds,resolver);  for (Iterator<ContentValues> i=toInsert.iterator(); i.hasNext(); ) {    ContentValues values=i.next();    if (!mapIdToUuid(xformIdToUuid,values,Contracts.Observations.CONCEPT_UUID)) {      i.remove();    }    mapIdToUuid(xformIdToUuid,values,Contracts.Observations.VALUE);  }  resolver.bulkInsert(Contracts.Observations.CONTENT_URI,toInsert.toArray(new ContentValues[toInsert.size()]));}  }
class C{  protected final List<EncodingDefinition> createEncodingDefinitions(String xmlFileResource){  try {    Encodings encodings=loadEncodingsFromXml(xmlFileResource);    if (encodings == null) {      return Collections.emptyList();    }    List<EncodingDefinition> encodingSet=new ArrayList<EncodingDefinition>();    for (    EncodingDefinitionType definition : encodings.getEncodingDefinition()) {      final EncodingDefinition encoding=createEncodingDefinition(definition);      if (encoding != null) {        encodingSet.add(encoding);      }    }    return encodingSet;  } catch (  JAXBException e) {    logger.fatal(String.format("Error loading encoding definition from %s",xmlFileResource),e);    return Collections.emptyList();  }}  }
class C{  static int applyMaskPenaltyRule2(ByteMatrix matrix){  int penalty=0;  byte[][] array=matrix.getArray();  int width=matrix.getWidth();  int height=matrix.getHeight();  for (int y=0; y < height - 1; y++) {    for (int x=0; x < width - 1; x++) {      int value=array[y][x];      if (value == array[y][x + 1] && value == array[y + 1][x] && value == array[y + 1][x + 1]) {        penalty++;      }    }  }  return N2 * penalty;}  }
class C{  public Buffer read() throws Exception {  try {    do {      RtpPacket rtpPacket=rtpReceiver.readRtpPacket();      if (rtpPacket == null) {        return null;      }      rtpPacketsBuffer.add(rtpPacket);    } while (rtpPacketsBuffer.size() <= 5);    RtpPacket packet=rtpPacketsBuffer.poll();    buffer.setData(packet.data);    buffer.setLength(packet.payloadlength);    buffer.setOffset(0);    buffer.setFormat(inputFormat);    buffer.setSequenceNumber(packet.seqnum);    buffer.setRTPMarker(packet.marker != 0);    buffer.setTimeStamp(packet.timestamp);    if (packet.extensionHeader != null) {      ExtensionElement element=packet.extensionHeader.getElementById(extensionHeaderId);      if (element != null) {        buffer.setVideoOrientation(VideoOrientation.parse(element.data[0]));      }    }    inputFormat=null;    return buffer;  } catch (  TimeoutException ex) {    if (!isClosed) {      if (rtpStreamListener != null) {        rtpStreamListener.rtpStreamAborted();      }    }    return null;  }}  }
class C{  public JSONArray put(int index,double value) throws JSONException {  this.put(index,new Double(value));  return this;}  }
class C{  public DelaunayTriangle neighborOpposite(DelaunayVertex site,DelaunayTriangle triangle){  if (!triangle.contains(site)) {    throw new IllegalArgumentException("Bad vertex; not in triangle");  }  for (  DelaunayTriangle neighbor : triGraph.getConnectedNodesFor(triangle)) {    if (!neighbor.contains(site)) {      return neighbor;    }  }  return null;}  }
class C{  public void test1(){  final GridLayoutManager layoutManager=new GridLayoutManager(2,2,new Insets(0,0,0,0),0,0);  final JPanel panel=new JPanel(layoutManager);  final JLabel label1=new JLabel();  label1.setMinimumSize(new Dimension(10,10));  label1.setPreferredSize(new Dimension(100,10));  final JLabel label2=new JLabel();  label2.setMinimumSize(new Dimension(10,10));  label2.setPreferredSize(new Dimension(100,10));  panel.add(label1,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_CAN_SHRINK + GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  panel.add(label2,new GridConstraints(0,1,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_CAN_SHRINK,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  panel.add(new JLabel(),new GridConstraints(1,0,1,2,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_CAN_SHRINK + GridConstraints.SIZEPOLICY_CAN_GROW + GridConstraints.SIZEPOLICY_WANT_GROW,GridConstraints.SIZEPOLICY_FIXED,null,new Dimension(150,-1),null,0));  assertEquals(20,panel.getMinimumSize().width);  assertEquals(200,panel.getPreferredSize().width);  panel.setSize(20,100);  panel.doLayout();  assertEquals(10,label1.getWidth());  assertEquals(10,label2.getWidth());  panel.setSize(76,100);  panel.doLayout();  assertEquals(38,label1.getWidth());  assertEquals(38,label2.getWidth());  panel.setSize(199,100);  panel.doLayout();  assertEquals(100,label1.getWidth());  assertEquals(99,label2.getWidth());  panel.setSize(200,100);  panel.doLayout();  assertEquals(100,label1.getWidth());  assertEquals(100,label2.getWidth());  panel.setSize(201,100);  panel.doLayout();  assertEquals(101,label1.getWidth());  assertEquals(100,label2.getWidth());  panel.setSize(205,100);  panel.doLayout();  assertEquals(105,label1.getWidth());  assertEquals(100,label2.getWidth());}  }
class C{  public void append(final String text,final boolean error,final boolean showPrompt){  final OutputStreamWriter writer=error ? errorWriter : resultWriter;  WorkbenchHelper.asyncRun(null);}  }
class C{  void addScrapView(View scrap,int position,int viewType){  if (viewTypeCount == 1) {    currentScrapViews.put(position,scrap);  } else {    scrapViews[viewType].put(position,scrap);  }  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {    scrap.setAccessibilityDelegate(null);  }}  }
class C{  private Initiator findInitiatorInDB(VPlexPortInfo portInfo) throws IOException {  Initiator initiator=null;  String portWWN=WWNUtility.getWWNWithColons(portInfo.getPortWwn());  s_logger.debug("Looking for initiator {} in database",portWWN);  URIQueryResultList queryResults=new URIQueryResultList();  _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getInitiatorPortInitiatorConstraint(portWWN),queryResults);  Iterator<URI> resultsIter=queryResults.iterator();  if (resultsIter.hasNext()) {    s_logger.debug("Found initiator {}",portWWN);    initiator=_dbClient.queryObject(Initiator.class,resultsIter.next());  }  return initiator;}  }
class C{  @Override public void visitEnd(){  if (!subroutineHeads.isEmpty()) {    markSubroutines();    if (LOGGING) {      log(mainSubroutine.toString());      Iterator<BitSet> it=subroutineHeads.values().iterator();      while (it.hasNext()) {        BitSet sub=it.next();        log(sub.toString());      }    }    emitCode();  }  if (mv != null) {    accept(mv);  }}  }
class C{  public static Builder createBuilder(String name){  return new Builder(name);}  }
class C{  private void initCriteriaMap(){  critParams.clear();  critParams.put(EGOV_COUNTER_OPERATOR_ID,Long.valueOf(-1L));  critParams.put(EGOV_COUNTER_ID,Long.valueOf(-1L));  critParams.put(EGOV_FROM_DATE,new Date());  critParams.put(EGOV_TO_DATE,new Date());  critParams.put(EGOV_INSTRUMENT_TYPE,CollectionConstants.INSTRUMENTTYPE_CASH);  critParams.put(EGOV_INSTRUMENT_STATUS,null);  critParams.put(EGOV_BOUNDARY_ID,Long.valueOf(-1L));  critParams.put(EGOV_RECEIPT_IDS,null);}  }
class C{  private void checkConnectivity(State state) throws StopRequest {switch (mService.getNetworkAvailabilityState(mDB)) {case DownloaderService.NETWORK_OK:    return;case DownloaderService.NETWORK_NO_CONNECTION:  throw new StopRequest(DownloaderService.STATUS_WAITING_FOR_NETWORK,"waiting for network to return");case DownloaderService.NETWORK_TYPE_DISALLOWED_BY_REQUESTOR:throw new StopRequest(DownloaderService.STATUS_QUEUED_FOR_WIFI_OR_CELLULAR_PERMISSION,"waiting for wifi or for download over cellular to be authorized");case DownloaderService.NETWORK_CANNOT_USE_ROAMING:throw new StopRequest(DownloaderService.STATUS_WAITING_FOR_NETWORK,"roaming is not allowed");case DownloaderService.NETWORK_UNUSABLE_DUE_TO_SIZE:throw new StopRequest(DownloaderService.STATUS_QUEUED_FOR_WIFI,"waiting for wifi");}}  }
class C{  private void enableOperationButtons(){  btnOr.setEnabled(true);  btnAnd.setEnabled(true);  btnRightParen.setEnabled(true);}  }
class C{  public void insertElementAt(int value,int at){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE,null));  super.insertElementAt(value,at);}  }
class C{  @GET @Path("internal/cluster/info") @Produces({MediaType.APPLICATION_JSON}) public ClusterInfo internalGetClusterInfo(){  ClusterInfo clusterInfo=_coordinator.getClusterInfo();  _log.info("Get cluster info {}",clusterInfo);  return clusterInfo;}  }
class C{  public void replaceBinders(Binder... binders){  getBinders().clear();  addBinder(binders);}  }
class C{  private void send(String message) throws WebSocketException {  if (getReadyState() != ReadyState.OPEN) {    messages2send.add(message);    return;  }  try {    ws.send(message);  } catch (  JavaScriptException e) {    throw new WebSocketException(e.getMessage(),e);  }}  }
class C{  public int executeUpdateDelete(){  acquireReference();  try {    return getSession().executeForChangedRowCount(getSql(),getBindArgs(),getConnectionFlags());  } catch (  SQLiteDatabaseCorruptException ex) {    onCorruption();    throw ex;  } finally {    releaseReference();  }}  }
class C{  public void writeRawBytes(final byte[] value) throws IOException {  writeRawBytes(value,0,value.length);}  }
class C{  public VisorIgfsEndpoint(@Nullable String igfsName,String gridName,@Nullable String hostName,int port){  this.igfsName=igfsName;  this.gridName=gridName;  this.hostName=hostName;  this.port=port;}  }
class C{  public RDFXMLPrettyWriter(OutputStream out){  super(out);}  }
class C{  public GOCDataBuilder withEventText(final String smEventTextc){  this.smEventTextc=smEventTextc;  return this;}  }
class C{  public void popFrequency(int height){  frequencies.popFrequency(height);}  }
class C{  public void onDoubleTouched(float x0,float y0,float x1,float y1){  float[] pickPoint0=rayPick(x0,y0);  float[] pickPoint1=rayPick(x1,y1);  float width=Math.abs(pickPoint0[0] - pickPoint1[0]) * PUFFIN_FIREWORK_SIZE_FACTOR;  float height=Math.abs(pickPoint0[0] - pickPoint1[0]) * PUFFIN_FIREWORK_SIZE_FACTOR;  float touchedCenterX=(x0 + x1) / 2;  float touchedCenterY=(y0 + y1) / 2;  float[] centerPoint=rayPick(touchedCenterX,touchedCenterY);  Log.i(TAG,"picked Point = " + centerPoint[0] + ", "+ centerPoint[1]+ ", "+ centerPoint[2]);  float[] newModuleMatrix=new float[16];  Matrix.setIdentityM(newModuleMatrix,0);  Matrix.translateM(newModuleMatrix,0,centerPoint[0],centerPoint[1],centerPoint[2]);  float x=centerPoint[0];  float y=centerPoint[1];  float z=centerPoint[2];  float thickness=2 + 0.1f * (float)mRandomGenerator.nextGaussian();  int density=150 + (int)(20 * mRandomGenerator.nextGaussian());  GLImageFirework firework=new GLImageFirework(100,x,y,z,2f,width,height,density,thickness);  float xAngle=(float)(2 * mRandomGenerator.nextGaussian());  float yAngle=(float)(2 * mRandomGenerator.nextGaussian());  float zAngle=(float)(4 * mRandomGenerator.nextGaussian());  firework.setRotation(xAngle,yAngle,zAngle);  firework.setAlpha(0.9f + mRandomGenerator.nextFloat() / 10);  firework.setColor(1.0f,1.0f,1.0f,1.0f);  firework.bindShader(mFireworkImageShader);synchronized (mFireworks) {    mFireworks.add(firework);  }}  }
class C{  protected static File sourceFileForClass(Identifier className,Identifier outputClassName,File destDir,BatchEnvironment env){  File packageDir=Util.getOutputDirectoryFor(className,destDir,env);  String outputName=Names.mangleClass(outputClassName).getName().toString();  if (outputName.endsWith("_Skel")) {    String classNameStr=className.getName().toString();    File temp=new File(packageDir,Utility.tieName(classNameStr) + ".class");    if (temp.exists()) {      if (!env.getMain().iiopGeneration) {        env.error(0,"warn.rmic.tie.found",classNameStr,temp.getAbsolutePath());      }    }  }  String outputFileName=outputName + ".java";  return new File(packageDir,outputFileName);}  }
class C{  protected AbstractWizardPage(){}  }
class C{  public SetPublishingModeRequest clone(){  SetPublishingModeRequest result=new SetPublishingModeRequest();  result.RequestHeader=RequestHeader == null ? null : RequestHeader.clone();  result.PublishingEnabled=PublishingEnabled;  result.SubscriptionIds=SubscriptionIds == null ? null : SubscriptionIds.clone();  return result;}  }
class C{  protected static final String addEscapes(String str){  StringBuffer retval=new StringBuffer();  char ch;  for (int i=0; i < str.length(); i++) {switch (str.charAt(i)) {case 0:      continue;case '\b':    retval.append("\\b");  continue;case '\t':retval.append("\\t");continue;case '\n':retval.append("\\n");continue;case '\f':retval.append("\\f");continue;case '\r':retval.append("\\r");continue;case '\"':retval.append("\\\"");continue;case '\'':retval.append("\\\'");continue;case '\\':retval.append("\\\\");continue;default :if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) {String s="0000" + Integer.toString(ch,16);retval.append("\\u" + s.substring(s.length() - 4,s.length()));} else {retval.append(ch);}continue;}}return retval.toString();}  }
class C{  public BusinessObjectDataStatusEntity createBusinessObjectDataStatusEntity(String statusCode){  return createBusinessObjectDataStatusEntity(statusCode,AbstractDaoTest.DESCRIPTION,AbstractDaoTest.NO_BDATA_STATUS_PRE_REGISTRATION_FLAG_SET);}  }
class C{  public void delete() throws IOException {  close();  deleteContents(directory);}  }
class C{  @Deprecated public static <K,V>Map<K,V> asMap(K k1,V v1,K k2,V v2,K k3,V v3,K k4,V v4,K k5,V v5){  Map<K,V> map=new GridLeanMap<>(5);  map.put(k1,v1);  map.put(k2,v2);  map.put(k3,v3);  map.put(k4,v4);  map.put(k5,v5);  return map;}  }
class C{  public static boolean isValidIPv4(String address){  if (address.length() == 0) {    return false;  }  int octet;  int octets=0;  String temp=address + ".";  int pos;  int start=0;  while (start < temp.length() && (pos=temp.indexOf('.',start)) > start) {    if (octets == 4) {      return false;    }    try {      octet=Integer.parseInt(temp.substring(start,pos));    } catch (    NumberFormatException ex) {      return false;    }    if (octet < 0 || octet > 255) {      return false;    }    start=pos + 1;    octets++;  }  return octets == 4;}  }
class C{  public Matrix4x3f translationRotateScaleMul(Vector3fc translation,Quaternionfc quat,Vector3fc scale,Matrix4x3f m){  return translationRotateScaleMul(translation.x(),translation.y(),translation.z(),quat.x(),quat.y(),quat.z(),quat.w(),scale.x(),scale.y(),scale.z(),m);}  }
class C{  public void logException(final Level level,final String message,final Exception e){  try {    Logger errors=LoggingFactory.getLogger(LoggingFactory.NAME_ERROR_LOGGER);    errors.logThrowable(level,message,e);  } catch (  LoggingException ex) {    ex.printStackTrace();  }  if (logLevel.intValue() > level.intValue()) {    return;  }  logThrowable(level,message,e);}  }
class C{  public final static float[] arrayRadToDeg(float[] rads){  for (int i=0; i < rads.length; i++) {    rads[i]=radToDeg(rads[i]);  }  return rads;}  }
class C{  public void testSimpleWar() throws Exception {  final URL url=new URL("http://localhost:" + System.getProperty("http.port") + "/simple-war");  final String expected="Sample page for testing";  PingUtils.assertPingTrue(url.getPath() + " not started",expected,url,logger);}  }
class C{  public int triesSize(){  finishProcessingIfNecessary();  return table.size();}  }
class C{  public void push(final Node item){  assert item != null;  if (n == a.length) {    final Node[] t=new Node[a.length * 2];    System.arraycopy(a,0,t,0,n);    a=t;  }  a[n++]=item;}  }
class C{  public Builder configFragment(final HeroicConfig.Builder config){  checkNotNull(config,"config");  this.configFragments.add(config);  return this;}  }
class C{  static void clear(Iterator<?> iterator){  checkNotNull(iterator);  while (iterator.hasNext()) {    iterator.next();    iterator.remove();  }}  }
class C{  public void clear(){  Arrays.fill(vals,null);  size=0;}  }
class C{  public void inject(LifecycleBean lifecycleBean) throws IgniteCheckedException {  injectGeneric(lifecycleBean);}  }
class C{  public NbtTagByte(String name){  super(name);}  }
class C{  protected static SegmentInfo newSegmentInfo(Directory dir,String name){  return new SegmentInfo(dir,Version.LATEST,name,10000,false,Codec.getDefault(),Collections.emptyMap(),StringHelper.randomId(),new HashMap<>(),null);}  }
class C{  public void appendFrame(int offsetDelta,int[] tags,int[] data){  numOfEntries++;  int k=tags.length;  output.write(k + 251);  write16(offsetDelta);  for (int i=0; i < k; i++)   writeTypeInfo(tags[i],data[i]);}  }
class C{  private String emitApplication(DomainApplication domainApplication,ContactResource registrant){  Optional<PostalInfo> postalInfo=Optional.fromNullable(registrant.getInternationalizedPostalInfo()).or(Optional.fromNullable(registrant.getLocalizedPostalInfo()));  Optional<ContactAddress> address=Optional.fromNullable(postalInfo.isPresent() ? postalInfo.get().getAddress() : null);  List<String> street=address.isPresent() ? address.get().getStreet() : ImmutableList.<String>of();  Optional<ContactPhoneNumber> phoneNumber=Optional.fromNullable(registrant.getVoiceNumber());  return Joiner.on('|').join(ImmutableList.of(domainApplication.getFullyQualifiedDomainName(),domainApplication.getForeignKey(),formatter.print(domainApplication.getCreationTime()),domainApplication.getLastEppUpdateTime() != null ? formatter.print(domainApplication.getLastEppUpdateTime()) : "",domainApplication.getCurrentSponsorClientId(),nullToEmpty(postalInfo.isPresent() ? postalInfo.get().getName() : ""),nullToEmpty(postalInfo.isPresent() ? postalInfo.get().getOrg() : ""),Iterables.getFirst(street,""),Joiner.on(' ').skipNulls().join(Iterables.skip(street,1)),nullToEmpty(address.isPresent() ? address.get().getCity() : ""),nullToEmpty(address.isPresent() ? address.get().getState() : ""),nullToEmpty(address.isPresent() ? address.get().getZip() : ""),nullToEmpty(address.isPresent() ? address.get().getCountryCode() : ""),nullToEmpty(registrant.getEmailAddress()),nullToEmpty(phoneNumber.isPresent() ? phoneNumber.get().toPhoneString() : ""),"",domainApplication.getEncodedSignedMarks().isEmpty() ? "Landrush" : "Sunrise"));}  }
class C{  public ValidatorException(Collection<FacesMessage> messages,Throwable cause){  super(messages.isEmpty() ? "" : messages.iterator().next().getSummary(),cause);  this.messages=messages;}  }
class C{  public void actionPerformed(ActionEvent e){  DataModel dataModel=getDataEditor().getSelectedDataModel();  if (dataModel instanceof DataSet) {    DataSet dataSet=(DataSet)dataModel;    DataFilter interpolator=new ModeInterpolator();    DataSet newDataSet=interpolator.filter(dataSet);    DataModelList list=new DataModelList();    list.add(newDataSet);    getDataEditor().reset(list);    getDataEditor().selectFirstTab();  } else   if (dataModel instanceof ICovarianceMatrix) {    JOptionPane.showMessageDialog(JOptionUtils.centeringComp(),"Must be a tabular data set.");  }}  }
class C{  public void drawExplode(@NonNull Canvas canvas,RectF bounds,float percentComplete){  boolean drawCircles=Build.VERSION.SDK_INT <= 17;  final float maxLength=bounds.width() * EXPLODE_LINE_MAX;  final float minLength=bounds.width() * EXPLODE_LINE_MIN;  final float startPosition=bounds.width() * EXPLODE_LINE_MAX;  int alpha=MAX_ALPHA;  float length;  if (percentComplete > 0.5f) {    float completed=(percentComplete - 0.5f) * 2;    length=maxLength - (completed * (maxLength - minLength));    alpha=MAX_ALPHA - (int)(MAX_ALPHA * completed);  } else {    length=minLength + ((percentComplete * 2) * (maxLength - minLength));  }  final int initialAlpha=mPaint.getAlpha();  if (alpha < MAX_ALPHA) {    mPaintExplode.setAlpha((int)(initialAlpha * (alpha / (float)MAX_ALPHA)));  }  float radiusEnd=startPosition + (int)(((bounds.width() / 2) - startPosition) * percentComplete);  float radiusStart=radiusEnd - length;  float angleInDegrees=0;  for (int i=0; i < EXPLODE_LINE_COUNT; i++) {    drawExplodeLine(canvas,bounds,radiusStart,radiusEnd,angleInDegrees,percentComplete,drawCircles);    angleInDegrees+=(360f / EXPLODE_LINE_COUNT);  }  if (alpha < MAX_ALPHA) {    mPaint.setAlpha(initialAlpha);  }}  }
class C{  public void flip(int x,int y){  int offset=y * rowSize + (x / 32);  bits[offset]^=1 << (x & 0x1f);}  }
class C{  private void updatePressed(boolean p){  this.pressed=p && isEnabled();  if (shouldActLikeButton()) {    comboBox.repaint();  }}  }
class C{  public int optInt(int index){  return this.optInt(index,0);}  }
class C{  public void erasePurchase(String sku){  if (mPurchaseMap.containsKey(sku))   mPurchaseMap.remove(sku);}  }
class C{  public void widgetSelected(SelectionEvent e){  List list=((List)e.widget);  SymbolNode node=(SymbolNode)list.getData(list.getSelection()[0]);  EditorUtil.setReturnFromOpenDecl(srcEditor);  UIHelper.jumpToDefOrDecl(node);}  }
class C{  public void trackFailure(){  retryTime=Utils.currentTimeMillis() + (long)backoff;  backoff=Math.min(backoff * params.multiplier,params.maximum);}  }
class C{  public ScaleTypeDrawable(Drawable drawable,ScalingUtils.ScaleType scaleType){  super(Preconditions.checkNotNull(drawable));  mScaleType=scaleType;}  }
class C{  public IndTestCramerT(DataSet dataSet,double alpha){  if (!(dataSet.isContinuous())) {    throw new IllegalArgumentException("Data set must be continuous.");  }  this.dataSet=dataSet;  this.covMatrix=new CorrelationMatrix(dataSet);  this.variables=Collections.unmodifiableList(covMatrix.getVariables());  setAlpha(alpha);}  }
class C{  private void createPO(){  int noOrders=0;  String info="";  MOrder order=null;  MWarehouse wh=null;  X_T_Replenish[] replenishs=getReplenish("M_WarehouseSource_ID IS NULL AND C_BPartner_ID > 0");  for (int i=0; i < replenishs.length; i++) {    X_T_Replenish replenish=replenishs[i];    if (wh == null || wh.getM_Warehouse_ID() != replenish.getM_Warehouse_ID())     wh=MWarehouse.get(getCtx(),replenish.getM_Warehouse_ID());    if (order == null || order.getC_BPartner_ID() != replenish.getC_BPartner_ID() || order.getM_Warehouse_ID() != replenish.getM_Warehouse_ID()) {      order=new MOrder(getCtx(),0,get_TrxName());      order.setIsSOTrx(false);      order.setC_DocTypeTarget_ID(p_C_DocType_ID);      MBPartner bp=new MBPartner(getCtx(),replenish.getC_BPartner_ID(),get_TrxName());      order.setBPartner(bp);      order.setSalesRep_ID(getAD_User_ID());      order.setDescription(Msg.getMsg(getCtx(),"Replenishment"));      order.setAD_Org_ID(wh.getAD_Org_ID());      order.setM_Warehouse_ID(wh.getM_Warehouse_ID());      if (!order.save())       return;      log.fine(order.toString());      noOrders++;      info+=" - " + order.getDocumentNo();    }    MOrderLine line=new MOrderLine(order);    line.setM_Product_ID(replenish.getM_Product_ID());    line.setQty(replenish.getQtyToOrder());    line.setPrice();    line.save();  }  m_info="#" + noOrders + info;  log.info(m_info);}  }
class C{  public NotificationChain basicSetDeclaredName(LiteralOrComputedPropertyName newDeclaredName,NotificationChain msgs){  LiteralOrComputedPropertyName oldDeclaredName=declaredName;  declaredName=newDeclaredName;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.PROPERTY_NAME_OWNER__DECLARED_NAME,oldDeclaredName,newDeclaredName);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  private int handleEvent(int offset){  Form f=getCurrentUpcomingForm(true);  if (f == null) {    return offset;  }  int type=inputEventStackTmp[offset];  offset++;switch (type) {case KEY_PRESSED:    f.keyPressed(inputEventStackTmp[offset]);  offset++;eventForm=f;break;case KEY_RELEASED:Form xf=eventForm;eventForm=null;if (xf == f || multiKeyMode) {f.keyReleased(inputEventStackTmp[offset]);offset++;}break;case POINTER_PRESSED:if (recursivePointerReleaseA) {recursivePointerReleaseB=true;}dragOccured=false;dragPathLength=0;pointerPressedAndNotReleasedOrDragged=true;xArray1[0]=inputEventStackTmp[offset];offset++;yArray1[0]=inputEventStackTmp[offset];offset++;f.pointerPressed(xArray1,yArray1);eventForm=f;break;case POINTER_PRESSED_MULTI:{if (recursivePointerReleaseA) {recursivePointerReleaseB=true;}dragOccured=false;dragPathLength=0;pointerPressedAndNotReleasedOrDragged=true;int[] array1=readArrayStackArgument(offset);offset+=array1.length + 1;int[] array2=readArrayStackArgument(offset);offset+=array2.length + 1;f.pointerPressed(array1,array2);eventForm=f;break;}case POINTER_RELEASED:recursivePointerReleaseA=true;pointerPressedAndNotReleasedOrDragged=false;Form x=eventForm;eventForm=null;if (x == f || f.shouldSendPointerReleaseToOtherForm()) {xArray1[0]=inputEventStackTmp[offset];offset++;yArray1[0]=inputEventStackTmp[offset];offset++;f.pointerReleased(xArray1,yArray1);}recursivePointerReleaseA=false;recursivePointerReleaseB=false;break;case POINTER_RELEASED_MULTI:recursivePointerReleaseA=true;pointerPressedAndNotReleasedOrDragged=false;Form xy=eventForm;eventForm=null;if (xy == f || (f != null && f.shouldSendPointerReleaseToOtherForm())) {int[] array1=readArrayStackArgument(offset);offset+=array1.length + 1;int[] array2=readArrayStackArgument(offset);offset+=array2.length + 1;f.pointerReleased(array1,array1);}recursivePointerReleaseA=false;recursivePointerReleaseB=false;break;case POINTER_DRAGGED:{dragOccured=true;int arg1=inputEventStackTmp[offset];offset++;int arg2=inputEventStackTmp[offset];offset++;int timestamp=inputEventStackTmp[offset];offset++;updateDragSpeedStatus(arg1,arg2,timestamp);pointerPressedAndNotReleasedOrDragged=false;xArray1[0]=arg1;yArray1[0]=arg2;f.pointerDragged(xArray1,yArray1);break;}case POINTER_DRAGGED_MULTI:{dragOccured=true;pointerPressedAndNotReleasedOrDragged=false;int[] array1=readArrayStackArgument(offset);offset+=array1.length + 1;int[] array2=readArrayStackArgument(offset);offset+=array2.length + 1;f.pointerDragged(array1,array2);break;}case POINTER_HOVER:{int arg1=inputEventStackTmp[offset];offset++;int arg2=inputEventStackTmp[offset];offset++;int timestamp=inputEventStackTmp[offset];offset++;updateDragSpeedStatus(arg1,arg2,timestamp);xArray1[0]=arg1;yArray1[0]=arg2;f.pointerHover(xArray1,yArray1);break;}case POINTER_HOVER_RELEASED:{int arg1=inputEventStackTmp[offset];offset++;int arg2=inputEventStackTmp[offset];offset++;xArray1[0]=arg1;yArray1[0]=arg2;f.pointerHoverReleased(xArray1,yArray1);break;}case POINTER_HOVER_PRESSED:{int arg1=inputEventStackTmp[offset];offset++;int arg2=inputEventStackTmp[offset];offset++;xArray1[0]=arg1;yArray1[0]=arg2;f.pointerHoverPressed(xArray1,yArray1);break;}case SIZE_CHANGED:int w=inputEventStackTmp[offset];offset++;int h=inputEventStackTmp[offset];offset++;f.sizeChangedInternal(w,h);break;case HIDE_NOTIFY:f.hideNotify();break;case SHOW_NOTIFY:f.showNotify();break;}return offset;}  }
class C{  public static byte[] decodeWebSafe(byte[] source) throws Base64DecoderException {  return decodeWebSafe(source,0,source.length);}  }
class C{  public boolean hasEnded(){  if (length > 0) {    return true;  }  if (players != null && players.size() > 0) {    for (    Player player : players) {      if (player.Win()) {        return true;      }    }  }  return false;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:42.599 -0500",hash_original_method="C3D2A814A65F76D9CB9F5D4B410FE699",hash_generated_method="01B6F55405376AEEAD12C5FED208DC0A") synchronized boolean acquire(){  if (mInUse) {    return false;  }  mInUse=true;  return true;}  }
class C{  public void saveTable(){  if (_saveFile == null) {    saveAsTable();  } else {    saveToCSV();  }}  }
class C{  public void saveAsANY(File file,int width,int height,double quality) throws IOException, TranscoderException, TransformerFactoryConfigurationError, TransformerException, ClassNotFoundException {  String extension=FileUtil.getFilenameExtension(file);  if ("svg".equals(extension)) {    saveAsSVG(file);  } else   if ("pdf".equals(extension)) {    saveAsPDF(file);  } else   if ("ps".equals(extension)) {    saveAsPS(file);  } else   if ("eps".equals(extension)) {    saveAsEPS(file);  } else   if ("png".equals(extension)) {    saveAsPNG(file,width,height);  } else   if ("jpg".equals(extension) || "jpeg".equals(extension)) {    saveAsJPEG(file,width,height,quality);  } else {    throw new IOException("Unknown file extension: " + extension);  }}  }
class C{  static Filter fromString(final String str) throws InvalidSyntaxException {  if (str == null) {    return NULL_FILTER;  }  final String filterString=str.trim();  if (filterString.length() == 1) {    throw new InvalidSyntaxException("Malformed filter",filterString);  }  final Stack<Filter> stack=new Stack<Filter>();  try {    final int len=filterString.length();    int last=-1;    int oper=0;    String id=null;    int comparator=-1;    final char[] chars=filterString.toCharArray();    stack.clear();    for (int i=0; i < chars.length; i++) {switch (chars[i]) {case '\\':        i++;      continue;case '(':    char nextChar=chars[i + 1];  while (Character.isWhitespace(nextChar)) {    i++;    nextChar=chars[i + 1];  }if (nextChar == ')') {  throw new InvalidSyntaxException("Empty filter",filterString);}int x=i;char nextnextChar=chars[x + 2];while (Character.isWhitespace(nextnextChar)) {x++;nextnextChar=chars[x + 2];}if (nextChar == '&' && nextnextChar == '(') {stack.push(new RFC1960Filter(AND_OPERATOR));continue;} else if (nextChar == '|' && nextnextChar == '(') {stack.push(new RFC1960Filter(OR_OPERATOR));continue;} else if (nextChar == '!' && nextnextChar == '(') {stack.push(new RFC1960Filter(NOT_OPERATOR));continue;} else {if (last == -1) {last=i;} else {throw new InvalidSyntaxException("Surplus left paranthesis at: " + filterString.substring(i),filterString);}}continue;case ')':if (last == -1) {final RFC1960Filter filter=(RFC1960Filter)stack.pop();if (stack.isEmpty()) {return filter;}final RFC1960Filter parent=(RFC1960Filter)stack.peek();if (parent.operator == NOT_OPERATOR && !parent.operands.isEmpty()) {throw new InvalidSyntaxException("Unexpected literal: " + filterString.substring(i),filterString);}parent.operands.add(filter);if (i == len - 1) {throw new InvalidSyntaxException("Missing right paranthesis at the end.",filterString);}} else {if (oper == 0) {throw new InvalidSyntaxException("Missing operator.",filterString);}if (stack.isEmpty()) {if (i == len - 1) {String value=filterString.substring(++oper,len - 1);if (value.equals("*") && comparator == EQUALS) {comparator=PRESENT;value=null;}return new RFC1960SimpleFilter(id,comparator,value);} else {throw new InvalidSyntaxException("Unexpected literal: " + filterString.substring(i),filterString);}}final RFC1960Filter parent=(RFC1960Filter)stack.peek();String value=filterString.substring(++oper,i);if (value.equals("*") && comparator == EQUALS) {comparator=PRESENT;value=null;}parent.operands.add(new RFC1960SimpleFilter(id,comparator,value));oper=0;last=-1;id=null;comparator=-1;}continue;case '~':if (oper == 0 && chars[i + 1] == '=') {id=filterString.substring(last + 1,i).trim();comparator=APPROX;oper=++i;continue;} else {throw new InvalidSyntaxException("Unexpected character " + chars[i + 1],filterString);}case '>':if (oper == 0 && chars[i + 1] == '=') {id=filterString.substring(last + 1,i).trim();comparator=GREATER;oper=++i;continue;} else {throw new InvalidSyntaxException("Unexpected character " + chars[i + 1],filterString);}case '<':if (oper == 0 && chars[i + 1] == '=') {id=filterString.substring(last + 1,i).trim();comparator=LESS;oper=++i;continue;} else {throw new InvalidSyntaxException("Unexpected character " + chars[i + 1],filterString);}case '=':if (last + 1 == i) {throw new InvalidSyntaxException("Missing identifier",filterString);}id=filterString.substring(last + 1,i).trim();comparator=EQUALS;oper=i;continue;}}return stack.pop();} catch (final EmptyStackException e) {throw new InvalidSyntaxException("Filter expression not well-formed.",filterString);}}  }
class C{  protected void print100kSets(){  StringBuffer sb=null;  for (int set=1; set <= 6; set++) {    System.out.println("-------------\nFor 100K Set " + set + ":\n-------------\n");    for (int i=19; i >= 0; i-=1) {      sb=new StringBuffer(Integer.toString(i * 100000)).append("\t| ");      for (int j=1; j <= 8; j++) {        sb.append(" ").append(get100kID(j,i,set));      }      sb.append(" |");      System.out.println(sb);    }  }}  }
class C{  private void printTypeMembers(List<? extends Element> members,List<TypeElement> innerClass){  for (  Element element : members) {    if (isPublicOrProtected(element)) {      printMember(element,innerClass);    }  }}  }
class C{  public final void install(IInputFilterHost host){  mH.obtainMessage(MSG_INSTALL,host).sendToTarget();}  }
class C{  protected void paintBackground(Graphics g){  super.paintBackground(g);  if (!isUseParentPaint()) {    JTextComponent editor=this.getComponent();    BETextFieldUI.paintBg(g,0,0,editor.getWidth(),editor.getHeight(),editor.isEnabled(),bg);  }}  }
class C{  public void remove(final TradePosition transientInstance){  try {    EntityManager entityManager=EntityManagerHelper.getEntityManager();    entityManager.getTransaction().begin();    TradePosition tradePosition=entityManager.find(TradePosition.class,transientInstance.getIdTradePosition());    if (null != tradePosition) {      entityManager.remove(tradePosition);    }    entityManager.getTransaction().commit();  } catch (  Exception re) {    EntityManagerHelper.rollback();    throw re;  } finally {    EntityManagerHelper.close();  }}  }
class C{  public void validateBillingResultXML(String xml) throws Exception {  Document doc=XMLConverter.convertToDocument(xml,false);  URL schema=XMLValidation.getBillingResultSchemaURL();  XMLValidation.validateXML(schema,doc);}  }
class C{  public static int headerLength(String codec){  return 9 + codec.length();}  }
class C{  @Override protected void onDialogClosed(boolean positiveResult){  if (positiveResult) {    String currentValue=String.valueOf(mHourPicker.getValue() * HOUR + mMinutePicker.getValue() * MINUTE + mSecondPicker.getValue() * SECOND);    if (callChangeListener(currentValue)) {      persistString(currentValue);    }  }}  }
class C{  public BulkEntry(final String id,final String type,final String timestamp_fieldname,final Long version,final Map<String,Object> jsonMap){  this.id=id;  this.type=type;  this.version=version;  this.jsonMap=jsonMap;  if (timestamp_fieldname != null && !this.jsonMap.containsKey(timestamp_fieldname))   this.jsonMap.put(timestamp_fieldname,utcFormatter.print(System.currentTimeMillis()));}  }
class C{  public void endCompose(StylesheetRoot sroot) throws TransformerException {  StylesheetRoot.ComposeState cstate=sroot.getComposeState();  super.endCompose(sroot);  m_frameSize=cstate.getFrameSize();  cstate.resetStackFrameSize();}  }
class C{  public boolean stopAll(){  log.info("");  AdempiereServer[] servers=getActive();  for (int i=0; i < servers.length; i++) {    AdempiereServer server=servers[i];    try {      if (server.isAlive() && !server.isInterrupted()) {        server.setPriority(Thread.MAX_PRIORITY - 1);        server.interrupt();      }    } catch (    Exception e) {      log.log(Level.SEVERE,"(interrupting) - " + server,e);    }  }  Thread.yield();  for (int i=0; i < servers.length; i++) {    AdempiereServer server=servers[i];    try {      int maxWait=10;      while (server.isAlive()) {        if (maxWait-- == 0) {          log.severe("Wait timeout for interruped " + server);          break;        }        Thread.sleep(100);      }    } catch (    Exception e) {      log.log(Level.SEVERE,"(waiting) - " + server,e);    }  }  int noRunning=0;  int noStopped=0;  for (int i=0; i < servers.length; i++) {    AdempiereServer server=servers[i];    try {      if (server.isAlive()) {        log.warning("Alive: " + server);        noRunning++;      } else {        log.info("Stopped: " + server);        noStopped++;      }    } catch (    Exception e) {      log.log(Level.SEVERE,"(checking) - " + server,e);      noRunning++;    }  }  log.fine("Running=" + noRunning + ", Stopped="+ noStopped);  AdempiereServerGroup.get().dump();  return noRunning == 0;}  }
class C{  public void fill(Object o){  Object[] objs=this.objs;  int numObjs=this.numObjs;  for (int x=0; x < numObjs; x++)   objs[x]=o;}  }
class C{  public static AC parseColumnConstraints(String s){  return parseAxisConstraint(s,true);}  }
class C{  @Override public int read() throws IOException {  while (in != null) {    int result=in.read();    if (result >= 0) {      return result;    }    nextStream();  }  return -1;}  }
class C{  public QueryStringQueryBuilder maxDeterminizedStates(int maxDeterminizedStates){  this.maxDeterminizedStates=maxDeterminizedStates;  return this;}  }
class C{  public void lineArrow(final int x0,final int y0,final int x1,final int y1,final int sidelength,final int padding,final long lineColor,final long arrowColor){  final double dx=x1 - x0;  final double dy=y1 - y0;  final double angle=Math.atan2(dy,dx);  final double d=Math.sqrt((dx * dx + dy * dy));  final double arrowtip=d - padding;  final double arrowlength=TL * sidelength;  final double arrowbase=arrowtip - arrowlength;  final double xn=Math.cos(angle);  final double yn=Math.sin(angle);  final int xt=x0 + ((int)(arrowtip * xn));  final int yt=y0 + ((int)(arrowtip * yn));  final double xb=x0 + arrowbase * xn;  final double yb=y0 + arrowbase * yn;  final double sl2=sidelength / 2.0;  final double xk=sl2 * Math.cos(angle + PI2);  final double yk=sl2 * Math.sin(angle + PI2);  final int x2=(int)(xb + xk);  final int y2=(int)(yb + yk);  final int x3=(int)(xb - xk);  final int y3=(int)(yb - yk);  setColor(lineColor);  line(x0,y0,(int)xb,(int)yb,100);  setColor(arrowColor);  line(x2,y2,x3,y3,100);  line(x2,y2,xt,yt,100);  line(x3,y3,xt,yt,100);}  }
class C{  public Iterable<Key> keys(){  return keysInOrder();}  }
class C{  public Integer encrypt(Integer value){  return value;}  }
class C{  private void scanHexExponentAndSuffix(int pos){  if (reader.ch == 'p' || reader.ch == 'P') {    reader.putChar(true);    skipIllegalUnderscores();    if (reader.ch == '+' || reader.ch == '-') {      reader.putChar(true);    }    skipIllegalUnderscores();    if ('0' <= reader.ch && reader.ch <= '9') {      scanDigits(pos,10);      if (!allowHexFloats) {        lexError(pos,"unsupported.fp.lit",source.name);        allowHexFloats=true;      } else       if (!hexFloatsWork)       lexError(pos,"unsupported.cross.fp.lit");    } else     lexError(pos,"malformed.fp.lit");  } else {    lexError(pos,"malformed.fp.lit");  }  if (reader.ch == 'f' || reader.ch == 'F') {    reader.putChar(true);    tk=TokenKind.FLOATLITERAL;    radix=16;  } else {    if (reader.ch == 'd' || reader.ch == 'D') {      reader.putChar(true);    }    tk=TokenKind.DOUBLELITERAL;    radix=16;  }}  }
class C{  void updateIMFromEdges(IntersectionMatrix im){  ((EdgeEndBundleStar)edges).updateIM(im);}  }
class C{  protected String handleTimestamp(Timestamp timestamp,String timestampFormatString){  SimpleDateFormat timeFormat=new SimpleDateFormat(timestampFormatString);  return timestamp == null ? null : timeFormat.format(timestamp);}  }
class C{  public boolean isMaxXSet(int scale){  return mMaxX[scale] != -MathHelper.NULL_VALUE;}  }
class C{  private void writeTaintInfoToFile(){  try {    FileWriter fw=new FileWriter(Project.v().getOutputDir() + File.separator + "tainted-data.txt");    for (    String clsName : taintedDataMap.keySet()) {      fw.write(clsName + "\n");      Map<String,Map<IntRange,Map<String,Set<CallLocationModel>>>> methodMap=taintedDataMap.get(clsName);      for (      String methodName : methodMap.keySet()) {        fw.write("\n  " + methodName + "\n");        Map<IntRange,Map<String,Set<CallLocationModel>>> rangeMap=methodMap.get(methodName);        for (        IntRange range : rangeMap.keySet()) {          fw.write("\n    [" + range.min + ", "+ range.max+ "]\n");          Map<String,Set<CallLocationModel>> dataMap=rangeMap.get(range);          for (          String str : dataMap.keySet()) {            fw.write("\n      " + str + "\n");            for (            CallLocationModel line : dataMap.get(str)) {              fw.write("        " + line + "\n");            }          }        }      }      fw.write("\n");    }    fw.write("\nTaint kinds:\n");    for (    Entry<String,Set<CallLocationModel>> entry : taintSourcesMap.entrySet()) {      String taintKind=entry.getKey();      fw.write("\n  " + taintKind);      for (      CallLocationModel call : entry.getValue()) {        fw.write("\n    " + call);      }    }    fw.close();  } catch (  IOException e) {    logger.error("Error writing tainted data file.");    droidsafe.main.Main.exit(1);  }}  }
class C{  public boolean isViewClippingEnabled(){  return this.iconRenderer.isViewClippingEnabled();}  }
class C{  public static void sortReverse(double[] keys,int[] values,int start,int end){  quickSortReverse(keys,values,start,end);}  }
class C{  @Override public int size(){  return count;}  }
class C{  public static void appendColumns(StringBuilder s,String[] columns){  int n=columns.length;  for (int i=0; i < n; i++) {    String column=columns[i];    if (column != null) {      if (i > 0) {        s.append(", ");      }      s.append(column);    }  }  s.append(' ');}  }
class C{  public void replyError(String errorUri,Object... args) throws ApplicationError {  replyError(errorUri,ArgArrayBuilder.buildArgumentsArray(stateController.clientConfig().objectMapper(),args),null);}  }
class C{  public NotificationChain basicSetBogusTypeRef(TypeRef newBogusTypeRef,NotificationChain msgs){  TypeRef oldBogusTypeRef=bogusTypeRef;  bogusTypeRef=newBogusTypeRef;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.TYPED_ELEMENT__BOGUS_TYPE_REF,oldBogusTypeRef,newBogusTypeRef);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public GenericEntry updateGroup(String groupId,String groupName,String groupDescription,String emailPermission) throws AppsForYourDomainException, MalformedURLException, IOException, ServiceException {  GenericEntry entry=new GenericEntry();  if (!(groupName == null || groupName.equals(""))) {    entry.addProperty(APPS_PROP_GROUP_NAME,groupName);  }  if (!(groupDescription == null || groupDescription.equals(""))) {    entry.addProperty(APPS_PROP_GROUP_DESC,groupDescription);  }  if (!(emailPermission == null || emailPermission.equals(""))) {    entry.addProperty(APPS_PROP_GROUP_PERMISSION,emailPermission);  }  if (entry.getAllProperties().size() == 0) {    return retrieveGroup(groupId);  }  return update(new URL(baseDomainUrl + groupId),entry);}  }
class C{  public Type pop(){  if (top < 1)   throw new IndexOutOfBoundsException("Stack is empty");  return stack[--top];}  }
class C{  public void deleteMirrorDevice(URI vplexURI,URI vplexMirrorURI,String stepId) throws WorkflowException {  try {    WorkflowStepCompleter.stepExecuting(stepId);    VPlexApiClient client=getVPlexAPIClient(_vplexApiFactory,vplexURI,_dbClient);    VplexMirror vplexMirror=getDataObject(VplexMirror.class,vplexMirrorURI,_dbClient);    if (vplexMirror.getDeviceLabel() != null) {      client.deleteLocalDevice(vplexMirror.getDeviceLabel());      if (vplexMirror.getSource() != null && vplexMirror.getSource().getURI() != null) {        Volume vplexVolume=getDataObject(Volume.class,vplexMirror.getSource().getURI(),_dbClient);        StorageSystem vplexSystem=getDataObject(StorageSystem.class,vplexURI,_dbClient);        updateThinProperty(client,vplexSystem,vplexVolume);      }      recordBourneVplexMirrorEvent(vplexMirrorURI,OperationTypeEnum.DELETE_VOLUME_MIRROR.getEvType(true),Operation.Status.ready,OperationTypeEnum.DELETE_VOLUME_MIRROR.getDescription());    } else {      _log.info("It seems vplex mirror {} was never created, so just move to the next step.",vplexMirror.getLabel());    }    WorkflowStepCompleter.stepSucceded(stepId);  } catch (  VPlexApiException vae) {    _log.error("Exception deleting VPlex Virtual Volume: " + vae.getMessage(),vae);    recordBourneVplexMirrorEvent(vplexMirrorURI,OperationTypeEnum.DELETE_VOLUME_MIRROR.getEvType(true),Operation.Status.error,OperationTypeEnum.DELETE_VOLUME_MIRROR.getDescription());    WorkflowStepCompleter.stepFailed(stepId,vae);  }catch (  Exception ex) {    _log.error("Exception deleting VPlex Virtual Volume: " + ex.getMessage(),ex);    String opName=ResourceOperationTypeEnum.DELETE_VPLEX_LOCAL_MIRROR.getName();    ServiceError serviceError=VPlexApiException.errors.deleteMirrorFailed(opName,ex);    recordBourneVplexMirrorEvent(vplexMirrorURI,OperationTypeEnum.DELETE_VOLUME_MIRROR.getEvType(true),Operation.Status.error,OperationTypeEnum.DELETE_VOLUME_MIRROR.getDescription());    WorkflowStepCompleter.stepFailed(stepId,serviceError);  }}  }
class C{  public synchronized int capacity(){  return elementData.length;}  }
class C{  public int size(){  long count=0;  for (int i=0; i < 5; i++) {    ++count;  }  return count >= Integer.MAX_VALUE ? Integer.MAX_VALUE : (int)count;}  }
class C{  StringVector processPREFIX_LIST(StylesheetHandler handler,String uri,String name,String rawName,String value) throws org.xml.sax.SAXException {  StringTokenizer tokenizer=new StringTokenizer(value," \t\n\r\f");  int nStrings=tokenizer.countTokens();  StringVector strings=new StringVector(nStrings);  for (int i=0; i < nStrings; i++) {    String prefix=tokenizer.nextToken();    String url=handler.getNamespaceForPrefix(prefix);    if (prefix.equals(Constants.ATTRVAL_DEFAULT_PREFIX) || url != null)     strings.addElement(prefix); else     throw new org.xml.sax.SAXException(XSLMessages.createMessage(XSLTErrorResources.ER_CANT_RESOLVE_NSPREFIX,new Object[]{prefix}));  }  return strings;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return forcedPVRMode ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  @Override public String toString(){  String result;  result=super.toString();  if (m_CapabilitiesFilter != null) {    initCapabilities();    if (m_Capabilities != null) {      if (m_Capabilities.supportsMaybe(m_CapabilitiesFilter) && !m_Capabilities.supports(m_CapabilitiesFilter)) {        result="<html><font color=\"" + MAYBE_SUPPORT + "\">"+ result+ "</font></i><html>";      } else       if (!m_Capabilities.supports(m_CapabilitiesFilter)) {        result="<html><font color=\"" + NO_SUPPORT + "\">"+ result+ "</font></i><html>";      }    }  }  return result;}  }
class C{  public int readU16() throws WireParseException {  require(2);  int b1=array[pos++] & 0xFF;  int b2=array[pos++] & 0xFF;  return ((b1 << 8) + b2);}  }
class C{  public RVHItemTouchHelperCallback(RVHAdapter adapter,boolean isLongPressDragEnabled,boolean isItemViewSwipeEnabledLeft,boolean isItemViewSwipeEnabledRight){  mAdapter=adapter;  this.isItemViewSwipeEnabledLeft=isItemViewSwipeEnabledLeft;  this.isItemViewSwipeEnabledRight=isItemViewSwipeEnabledRight;  this.isLongPressDragEnabled=isLongPressDragEnabled;}  }
class C{  public Where<T,ID> not(Where<T,ID> comparison){  addClause(new Not(pop("NOT")));  return this;}  }
class C{  public Builder withStartTls(boolean startTls){  disqueURI.setStartTls(startTls);  return this;}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writeStroke(this.angleGridlineStroke,stream);  SerialUtilities.writePaint(this.angleGridlinePaint,stream);  SerialUtilities.writeStroke(this.radiusGridlineStroke,stream);  SerialUtilities.writePaint(this.radiusGridlinePaint,stream);  SerialUtilities.writePaint(this.angleLabelPaint,stream);}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  private void startCameraPreview(){  try {    if (null != mCamera) {      mCamera.startPreview();    }  } catch (  Exception ex) {    Log.w(LOG_TAG,"## startCameraPreview(): Exception Msg=" + ex.getMessage());  }}  }
class C{  protected final synchronized void flushBuffer(){  if (this.raf == null)   return;  try {    this.raf.seek(this.raf.length());    this.raf.write(this.buffer,0,this.recordsize * this.buffercount);  } catch (  final IOException e) {    ConcurrentLog.logException(e);  }  this.buffercount=0;}  }
class C{  public GemFireException(String message){  super(message);}  }
class C{  Pair<String,String> convertAttachmentKeyIntoContentTypeAndFilename(final String key){  try {    final String[] contentTypeAndFile=key.substring(ATTACHMENT_PREFIX.length()).split(ATTACHMENT_SUFFIX);    return new Pair<String,String>(contentTypeAndFile[0],contentTypeAndFile[1]);  } catch (  Exception exp) {    ShopCodeContext.getLog(this).error("Invalid attachment key {} ... attachment is skipped",key);    return null;  }}  }
class C{  protected AbstractCategoryItemRenderer(){  this.itemLabelGenerator=null;  this.itemLabelGeneratorMap=new HashMap<Integer,CategoryItemLabelGenerator>();  this.toolTipGenerator=null;  this.toolTipGeneratorMap=new HashMap<Integer,CategoryToolTipGenerator>();  this.itemURLGenerator=null;  this.itemURLGeneratorMap=new HashMap<Integer,CategoryURLGenerator>();  this.legendItemLabelGenerator=new StandardCategorySeriesLabelGenerator();}  }
class C{  public boolean isAbstract(){  return _rawClass.isAbstract();}  }
class C{  @Override public boolean equals(Object o){  if (o instanceof RegexTemplate) {    return ((RegexTemplate)o).rawString.equals(rawString);  }  return false;}  }
class C{  public MbfsRunner(DagWrapper dagWrapper,Parameters params){  super(dagWrapper.getDag(),params);}  }
class C{  public static void connectInstructionsToCodeNodes(final CConnection connection,final int rawModuleId,final int moduleId) throws SQLException {  Preconditions.checkNotNull(connection,"IE00454: connection argument can not be null");  final String query=" { call connect_instructions_to_code_nodes(?,?) } ";  final CallableStatement call=connection.getConnection().prepareCall(query);  call.setInt(1,rawModuleId);  call.setInt(2,moduleId);  call.execute();}  }
class C{  static ClassLoader findClassLoader() throws ConfigurationError {  SecuritySupport ss=SecuritySupport.getInstance();  ClassLoader context=ss.getContextClassLoader();  ClassLoader system=ss.getSystemClassLoader();  ClassLoader chain=system;  while (true) {    if (context == chain) {      ClassLoader current=ObjectFactory.class.getClassLoader();      chain=system;      while (true) {        if (current == chain) {          return system;        }        if (chain == null) {          break;        }        chain=ss.getParentClassLoader(chain);      }      return current;    }    if (chain == null) {      break;    }    chain=ss.getParentClassLoader(chain);  }  ;  return context;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodegetprefix03.class,args);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private long buildSize(int durationInSeconds,LinkInfo linfo){  long result=-1;  double bitRateSum=0;switch (linfo.fmt) {case 5:    bitRateSum=0.25 + 64d / 1024d;  break;case 6:bitRateSum=0.8 + 64d / 1024d;break;case 17:bitRateSum=0.05 + 24d / 1024d;break;case 18:bitRateSum=0.5 + 96d / 1024d;break;case 22:bitRateSum=2.9 + 192d / 1024d;break;case 34:bitRateSum=0.5 + 128d / 1024d;break;case 35:bitRateSum=1 + 128d / 1024d;break;case 36:bitRateSum=0.17 + 38d / 1024d;break;case 37:bitRateSum=5.9 + 192d / 1024d;break;case 38:bitRateSum=5 + 192d / 1024d;break;case 43:bitRateSum=0.5 + 128d / 1024d;break;case 44:bitRateSum=1 + 128d / 1024d;break;case 45:bitRateSum=2 + 192d / 1024d;break;case 46:bitRateSum=3 + 192d / 1024d;break;case 82:bitRateSum=0.5 + 96d / 1024d;break;case 83:bitRateSum=0.5 + 96d / 1024d;break;case 84:bitRateSum=2.9 + 152d / 1024d;break;case 85:bitRateSum=2.9 + 152d / 1024d;break;case 100:bitRateSum=0.5 + 128d / 1024d;break;case 101:bitRateSum=1 + 192d / 1024d;break;case 102:bitRateSum=2 + 192d / 1024d;break;case 133:bitRateSum=0.3 + 256d / 1024d;break;case 134:bitRateSum=0.4 + 256d / 1024d;break;case 135:bitRateSum=1 + 256d / 1024d;break;case 136:bitRateSum=1.5 + 256d / 1024d;break;case 137:bitRateSum=2.9 + 256d / 1024d;break;case 139:bitRateSum=48d / 1024d;break;case 140:bitRateSum=128d / 1024d;break;case 141:bitRateSum=256d / 1024d;break;}bitRateSum=bitRateSum * 1024 * 1024;result=(long)(Math.ceil((bitRateSum * durationInSeconds) / 8));return result;}  }
class C{  public String requestFreebase(String message,String botid,String server,String apikey,int limit,String hint,Network network) throws Exception {  try {    log("FREEBASE",Level.INFO,message);    Vertex result=getBot().awareness().getSense(Freebase.class).processSearch(message,-1,false,hint,network,new HashMap<String,Vertex>());    if (result != null) {      if (hint != null && !hint.isEmpty()) {        Vertex value=result.getRelationship(network.createPrimitive(hint));        if (value != null) {          Vertex word=value.getRelationship(Primitive.WORD);          return word.printString();        }      } else {        Vertex description=result.getRelationship(Primitive.SENTENCE);        if (description != null) {          return description.printString();        }      }    }  } catch (  Exception exception) {    log(exception);  }  return null;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  double centreValue;  float progress=0;  int a, j, n;  int filterSizeX=3;  int filterSizeY=3;  int dX[];  int dY[];  int midPointX;  int midPointY;  int numPixelsInFilter;  boolean filterRounded=false;  double[] filterShape;  boolean reflectAtBorders=false;  ArrayList<Double> data=new ArrayList<Double>();  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      filterSizeX=Integer.parseInt(args[i]);    } else     if (i == 3) {      filterSizeY=Integer.parseInt(args[i]);    } else     if (i == 4) {      filterRounded=Boolean.parseBoolean(args[i]);    } else     if (i == 5) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("blue_white_red.pal");    if (Math.floor(filterSizeX / 2d) == (filterSizeX / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter x-dimension" + " has been modified.");      filterSizeX++;    }    if (Math.floor(filterSizeY / 2d) == (filterSizeY / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter y-dimension" + " has been modified.");      filterSizeY++;    }    numPixelsInFilter=filterSizeX * filterSizeY;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPointX=(int)Math.floor(filterSizeX / 2);    midPointY=(int)Math.floor(filterSizeY / 2);    if (!filterRounded) {      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          filterShape[a]=1;          a++;        }      }    } else {      double aSqr=midPointX * midPointX;      double bSqr=midPointY * midPointY;      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;          if (z > 1) {            filterShape[a]=0;          } else {            filterShape[a]=1;          }          a++;        }      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        centreValue=inputFile.getValue(row,col);        if (centreValue != noData) {          data.clear();          n=0;          z=0;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            z=inputFile.getValue(y,x);            if (z != noData && filterShape[a] == 1) {              data.add(z);              n++;            }          }          Collections.sort(data);          j=-1;          for (a=0; a < numPixelsInFilter; a++) {            if (data.get(a) == centreValue) {              j=a;              break;            }          }          if (j >= 0) {            outputFile.setValue(row,col,(double)j / n * 100);          } else {            outputFile.setValue(row,col,noData);          }        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public Appender(){  useDefaultVisual();  setLayout(new BorderLayout());  add(m_visual,BorderLayout.CENTER);}  }
class C{  protected int positionForMouseEvent(MouseEvent e){  int newY=(e.getSource() == BasicSplitPaneDivider.this) ? (e.getY() + getLocation().y) : e.getY();  newY=Math.min(maxX,Math.max(minX,newY - offset));  return newY;}  }
class C{  public Source(URI uri,String contents){  this.filename=basename(uri.toString());  this.uri=uri;  this.contents=contents;}  }
class C{  @Override public <U>TStream<U> aggregate(BiFunction<List<T>,K,U> processor){  processor=Functions.synchronizedBiFunction(processor);  Window<T,K,InsertionTimeList<T>> window=Windows.window(alwaysInsert(),scheduleEvictIfEmpty(time,unit),evictOlderWithProcess(time,unit),processOnInsert(),getKeyFunction(),insertionTimeList());  Aggregate<T,U,K> op=new Aggregate<T,U,K>(window,processor);  return feeder().pipe(op);}  }
class C{  public void detach(){  if (pair instanceof IDetachable) {    ((IDetachable)pair).detach();  }}  }
class C{  private void addPluginMenus(final JComponent menu){  final List<IAddressSpaceMenuPlugin> plugins=Lists.newArrayList();  for (  final IPlugin<IPluginInterface> plugin : PluginInterface.instance().getPluginRegistry()) {    if (plugin instanceof IAddressSpaceMenuPlugin) {      plugins.add((IAddressSpaceMenuPlugin)plugin);    }  }  if (!plugins.isEmpty()) {    menu.add(new JSeparator());    for (    final IAddressSpaceMenuPlugin plugin : plugins) {      addPluginMenu(menu,plugin);    }  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected double animateValue(double curVal,double goalVal,double speed){  double ret=curVal;  if (ret < goalVal) {    ret+=speed;  } else   if (ret > goalVal) {    ret-=speed;  }  if (Math.abs(ret - goalVal) < speed) {    ret=goalVal;  }  return ret;}  }
class C{  public byte[] embedData(byte[] msg,String msgFileName,byte[] cover,String coverFileName,String stegoFileName) throws OpenStegoException {  if (!this.plugin.getPurposes().contains(OpenStegoPlugin.Purpose.DATA_HIDING)) {    throw new OpenStegoException(null,OpenStego.NAMESPACE,OpenStegoException.PLUGIN_DOES_NOT_SUPPORT_DH);  }  try {    if (this.config.isUseCompression()) {      ByteArrayOutputStream bos=new ByteArrayOutputStream();      GZIPOutputStream zos=new GZIPOutputStream(bos);      zos.write(msg);      zos.finish();      zos.close();      bos.close();      msg=bos.toByteArray();    }    if (this.config.isUseEncryption()) {      OpenStegoCrypto crypto=new OpenStegoCrypto(this.config.getPassword());      msg=crypto.encrypt(msg);    }    return this.plugin.embedData(msg,msgFileName,cover,coverFileName,stegoFileName);  } catch (  OpenStegoException osEx) {    throw osEx;  }catch (  Exception ex) {    throw new OpenStegoException(ex);  }}  }
class C{  public void prepareMatrixValuePx(float xChartMin,float deltaX,float deltaY,float yChartMin){  float scaleX=(float)((mViewPortHandler.contentWidth()) / deltaX);  float scaleY=(float)((mViewPortHandler.contentHeight()) / deltaY);  mMatrixValueToPx.reset();  mMatrixValueToPx.postTranslate(-xChartMin,-yChartMin);  mMatrixValueToPx.postScale(scaleX,-scaleY);}  }
class C{  public JournalStream openJournalFullName(String fullName){  return new JournalStreamImpl(_journalStore.openJournal(fullName));}  }
class C{  private void loadPrintData(PrintData pd,MPrintFormat format){  boolean translateSpool=pd.getTableName().equals("T_Spool");  m_runningTotalString=Msg.getMsg(format.getLanguage(),"RunningTotal");  int rowNo=0;  PrintDataColumn pdc=null;  boolean hasLevelNo=pd.hasLevelNo();  int levelNo=0;  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(pd.getSQL(),m_trxName);    rs=pstmt.executeQuery();    while (rs.next()) {      if (hasLevelNo)       levelNo=rs.getInt("LevelNo"); else       levelNo=0;      if (m_group.getGroupColumnCount() > 1) {        for (int i=pd.getColumnInfo().length - 1; i >= 0; i--) {          PrintDataColumn group_pdc=pd.getColumnInfo()[i];          if (!m_group.isGroupColumn(group_pdc.getColumnName()))           continue;          Object value=m_group.groupChange(group_pdc.getColumnName(),rs.getObject(group_pdc.getAlias()));          if (value != null) {            char[] functions=m_group.getFunctions(group_pdc.getColumnName());            for (int f=0; f < functions.length; f++) {              printRunningTotal(pd,levelNo,rowNo++);              pd.addRow(true,levelNo);              for (int c=0; c < pd.getColumnInfo().length; c++) {                pdc=pd.getColumnInfo()[c];                if (group_pdc.getColumnName().equals(pdc.getColumnName())) {                  String valueString=value.toString();                  if (value instanceof Timestamp)                   valueString=DisplayType.getDateFormat(pdc.getDisplayType(),m_language).format(value);                  valueString+=PrintDataFunction.getFunctionSymbol(functions[f]);                  pd.addNode(new PrintDataElement(pdc.getColumnName(),valueString,DisplayType.String,false,pdc.isPageBreak(),pdc.getFormatPattern()));                } else                 if (m_group.isFunctionColumn(pdc.getColumnName(),functions[f])) {                  pd.addNode(new PrintDataElement(pdc.getColumnName(),m_group.getValue(group_pdc.getColumnName(),pdc.getColumnName(),functions[f]),PrintDataFunction.getFunctionDisplayType(functions[f],pdc.getDisplayType()),false,pdc.isPageBreak(),pdc.getFormatPattern()));                }              }            }            for (int c=0; c < pd.getColumnInfo().length; c++) {              pdc=pd.getColumnInfo()[c];              m_group.reset(group_pdc.getColumnName(),pdc.getColumnName());            }          }        }      }      printRunningTotal(pd,levelNo,rowNo++);      if (!m_summary)       pd.addRow(false,levelNo);      int counter=1;      for (int i=0; i < pd.getColumnInfo().length; i++) {        pdc=pd.getColumnInfo()[i];        PrintDataElement pde=null;        if (pdc.getAlias().equals(KEY)) {          if (pdc.getColumnName().endsWith("_ID")) {            int id=rs.getInt(counter++);            if (!rs.wasNull()) {              KeyNamePair pp=new KeyNamePair(id,KEY);              pde=new PrintDataElement(pdc.getColumnName(),pp,pdc.getDisplayType(),true,pdc.isPageBreak(),pdc.getFormatPattern());            }          } else {            String id=rs.getString(counter++);            if (!rs.wasNull()) {              ValueNamePair pp=new ValueNamePair(id,KEY);              pde=new PrintDataElement(pdc.getColumnName(),pp,pdc.getDisplayType(),true,pdc.isPageBreak(),pdc.getFormatPattern());            }          }        } else {          if (pdc.hasAlias()) {            String display=rs.getString(counter++);            if (pdc.getColumnName().endsWith("_ID")) {              int id=rs.getInt(counter++);              if (display != null && !rs.wasNull()) {                KeyNamePair pp=new KeyNamePair(id,display);                pde=new PrintDataElement(pdc.getColumnName(),pp,pdc.getDisplayType(),pdc.getFormatPattern());              }            } else {              String id=rs.getString(counter++);              if (display != null && !rs.wasNull()) {                ValueNamePair pp=new ValueNamePair(id,display);                pde=new PrintDataElement(pdc.getColumnName(),pp,pdc.getDisplayType(),pdc.getFormatPattern());              }            }          } else {            if (pdc.getDisplayType() == DisplayType.YesNo) {              String s=rs.getString(counter++);              if (!rs.wasNull()) {                boolean b=s.equals("Y");                pde=new PrintDataElement(pdc.getColumnName(),new Boolean(b),pdc.getDisplayType(),pdc.getFormatPattern());              }            } else             if (pdc.getDisplayType() == DisplayType.TextLong) {              String value="";              if ("java.lang.String".equals(rs.getMetaData().getColumnClassName(counter))) {                value=rs.getString(counter++);              } else {                Clob clob=rs.getClob(counter++);                if (clob != null) {                  long length=clob.length();                  value=clob.getSubString(1,(int)length);                }              }              pde=new PrintDataElement(pdc.getColumnName(),value,pdc.getDisplayType(),pdc.getFormatPattern());            } else             if (pdc.getDisplayType() == DisplayType.DateTime) {              Timestamp datetime=rs.getTimestamp(counter++);              pde=new PrintDataElement(pdc.getColumnName(),datetime,pdc.getDisplayType(),pdc.getFormatPattern());            } else {              Object obj=rs.getObject(counter++);              if (obj != null && obj instanceof String) {                obj=((String)obj).trim();                if (((String)obj).length() == 0)                 obj=null;              }              if (obj != null) {                if (translateSpool && obj instanceof String) {                  String s=(String)obj;                  s=Msg.parseTranslation(pd.getCtx(),s);                  pde=new PrintDataElement(pdc.getColumnName(),s,pdc.getDisplayType(),pdc.getFormatPattern());                } else                 pde=new PrintDataElement(pdc.getColumnName(),obj,pdc.getDisplayType(),pdc.getFormatPattern());              }            }          }        }        if (pde != null) {          if (!m_summary)           pd.addNode(pde);          m_group.addValue(pde.getColumnName(),pde.getFunctionValue());        }      }    }  } catch (  SQLException e) {    log.log(Level.SEVERE,pdc + " - " + e.getMessage()+ "\nSQL="+ pd.getSQL());  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  if (m_group.getGroupColumnCount() > 1) {    for (int i=pd.getColumnInfo().length - 1; i >= 0; i--) {      PrintDataColumn group_pdc=pd.getColumnInfo()[i];      if (!m_group.isGroupColumn(group_pdc.getColumnName()))       continue;      Object value=m_group.groupChange(group_pdc.getColumnName(),new Object());      if (value != null) {        char[] functions=m_group.getFunctions(group_pdc.getColumnName());        for (int f=0; f < functions.length; f++) {          printRunningTotal(pd,levelNo,rowNo++);          pd.addRow(true,levelNo);          for (int c=0; c < pd.getColumnInfo().length; c++) {            pdc=pd.getColumnInfo()[c];            if (group_pdc.getColumnName().equals(pdc.getColumnName())) {              String valueString=value.toString();              if (value instanceof Timestamp)               valueString=DisplayType.getDateFormat(pdc.getDisplayType(),m_language).format(value);              valueString+=PrintDataFunction.getFunctionSymbol(functions[f]);              pd.addNode(new PrintDataElement(pdc.getColumnName(),valueString,DisplayType.String,pdc.getFormatPattern()));            } else             if (m_group.isFunctionColumn(pdc.getColumnName(),functions[f])) {              pd.addNode(new PrintDataElement(pdc.getColumnName(),m_group.getValue(group_pdc.getColumnName(),pdc.getColumnName(),functions[f]),PrintDataFunction.getFunctionDisplayType(functions[f],pdc.getDisplayType()),pdc.getFormatPattern()));            }          }        }      }    }  }  if (m_group.isGroupColumn(PrintDataGroup.TOTAL)) {    char[] functions=m_group.getFunctions(PrintDataGroup.TOTAL);    for (int f=0; f < functions.length; f++) {      printRunningTotal(pd,levelNo,rowNo++);      pd.addRow(true,levelNo);      for (int c=0; c < pd.getColumnInfo().length; c++) {        pdc=pd.getColumnInfo()[c];        if (c == 0) {          String name="";          if (!format.getTableFormat().isPrintFunctionSymbols())           name=Msg.getMsg(format.getLanguage(),PrintDataFunction.getFunctionName(functions[f]));          name+=PrintDataFunction.getFunctionSymbol(functions[f]);          pd.addNode(new PrintDataElement(pdc.getColumnName(),name.trim(),DisplayType.String,pdc.getFormatPattern()));        } else         if (m_group.isFunctionColumn(pdc.getColumnName(),functions[f])) {          pd.addNode(new PrintDataElement(pdc.getColumnName(),m_group.getValue(PrintDataGroup.TOTAL,pdc.getColumnName(),functions[f]),PrintDataFunction.getFunctionDisplayType(functions[f],pdc.getDisplayType()),pdc.getFormatPattern()));        }      }    }  }  if (pd.getRowCount() == 0) {    if (CLogMgt.isLevelFiner())     log.warning("NO Rows - ms=" + (System.currentTimeMillis() - m_startTime) + " - "+ pd.getSQL()); else     log.warning("NO Rows - ms=" + (System.currentTimeMillis() - m_startTime));  } else   log.info("Rows=" + pd.getRowCount() + " - ms="+ (System.currentTimeMillis() - m_startTime));}  }
class C{  @Override public boolean containsKey(Object key){  return _map.containsKey(unwrapKey(key));}  }
class C{  public StatementPattern(Var subject,Var predicate,Var object,Var context){  this(Scope.DEFAULT_CONTEXTS,subject,predicate,object,context);}  }
class C{  public static double L_JaccardDist(int Y[][],int Ypred[][]){  return 1. - P_Accuracy(Y,Ypred);}  }
class C{  public SQLiteDatabaseConfiguration(SQLiteDatabaseConfiguration other){  if (other == null) {    throw new IllegalArgumentException("other must not be null.");  }  this.path=other.path;  this.label=other.label;  updateParametersFrom(other);}  }
class C{  public DLSequence(ASN1Encodable[] array){  super(array);}  }
class C{  public static String wordShape(String inStr,int wordShaper){  return wordShape(inStr,wordShaper,null);}  }
class C{  private void updateZoningMap(Map<URI,List<StoragePort>> initiatorPortMap,Map<String,Set<String>> directorToInitiatorIds,ExportMask exportMask){  for (  String initiatorURIStr : exportMask.getZoningMap().keySet()) {    exportMask.removeZoningMapEntry(initiatorURIStr);  }  exportMask.setZoningMap(null);  Map<String,List<StoragePort>> nwUriVsTargetPortsFromMask=new HashMap<>();  StringSet targetPorts=exportMask.getStoragePorts();  for (  String targetPortUri : targetPorts) {    StoragePort targetPort=_dbClient.queryObject(StoragePort.class,URI.create(targetPortUri));    String networkUri=targetPort.getNetwork().toString();    if (nwUriVsTargetPortsFromMask.containsKey(networkUri)) {      nwUriVsTargetPortsFromMask.get(networkUri).add(targetPort);    } else {      nwUriVsTargetPortsFromMask.put(networkUri,new ArrayList<StoragePort>());      nwUriVsTargetPortsFromMask.get(networkUri).add(targetPort);    }  }  Map<String,String> initiatorUrivsWWNFromMask=new HashMap<>();  StringSet initiatorPorts=exportMask.getInitiators();  for (  String initiatorUri : initiatorPorts) {    Initiator initiator=_dbClient.queryObject(Initiator.class,URI.create(initiatorUri));    String initiatorWWN=initiator.getInitiatorPort();    initiatorUrivsWWNFromMask.put(initiator.getId().toString(),initiatorWWN);  }  Map<String,String> initiatorWWNvsNetworkURI=new HashMap<>();  Set<URI> networkURIs=initiatorPortMap.keySet();  for (  URI networkURI : networkURIs) {    List<StoragePort> initiatorPortList=initiatorPortMap.get(networkURI);    List<String> initiatorWWNList=new ArrayList<>(initiatorPortList.size());    for (    StoragePort initPort : initiatorPortList) {      initiatorWWNList.add(initPort.getPortNetworkId());      initiatorWWNvsNetworkURI.put(initPort.getPortNetworkId(),networkURI.toString());    }  }  Map<StoragePort,Integer> portUsage=new HashMap<>();  Set<String> directorKeySet=directorToInitiatorIds.keySet();  for (  String director : directorKeySet) {    Set<String> initiatorIds=directorToInitiatorIds.get(director);    int directorPaths=0;    for (    String initiatorId : initiatorIds) {      if (4 == directorPaths) {        break;      }      String initWWN=initiatorUrivsWWNFromMask.get(initiatorId);      String initiatorNetworkURI=initiatorWWNvsNetworkURI.get(initWWN);      List<StoragePort> matchingTargetPorts=nwUriVsTargetPortsFromMask.get(initiatorNetworkURI);      if (null != matchingTargetPorts && !matchingTargetPorts.isEmpty()) {        StoragePort assignedPort=assignPortBasedOnUsage(matchingTargetPorts,portUsage);        StringSet targetPortURIs=new StringSet();        targetPortURIs.add(assignedPort.getId().toString());        _log.info(String.format("Adding zoning map entry - Initiator is %s and its targetPorts %s",initiatorId,targetPortURIs.toString()));        exportMask.addZoningMapEntry(initiatorId,targetPortURIs);        directorPaths++;      }    }  }  _dbClient.updateAndReindexObject(exportMask);}  }
class C{  @Override public int deleteFromIndex(int id,InsDelUpdateStatistics stat){  BFINode<E> node=this.idMap.get(id);  if (node == null) {    System.err.println("ERROR delete: Could not find node with ID " + id);    return -1;  } else {  }  deleteNode(node,stat);  this.idMap.remove(id);  this.bfList.remove(node.value);  return 0;}  }
class C{  public boolean contains(Key key){  return get(key) != null;}  }
class C{  public String toString(){  return name;}  }
class C{  private TextUtil(){  instanceNotAllowed(getClass());}  }
class C{  public void disableAllAttributeDependencies(){  if (doNotCheckCapabilities()) {    return;  }  for (  Capability cap : Capability.values()) {    if (cap.isAttribute()) {      disableDependency(cap);    }  }}  }
class C{  protected void consumeMessage(Message message,List<Message> messageList){  if (verbose) {    if (LOG.isDebugEnabled()) {      LOG.info("Received message: " + message);    }  }  messageList.add(message);  if (messageList.size() >= data.length) {synchronized (lock) {      lock.notifyAll();    }  }}  }
class C{  @Override protected boolean usesClusterTable(){  return true;}  }
class C{  public static void main(String[] args){  junit.textui.TestRunner.run(MRoleTest.class);}  }
class C{  private void doProperties() throws Exception {  OpenReplicatorManagerMBean mbean=getOpenReplicator();  String containing=null;  boolean valuesOnly=false;  String curArg=null;  while (argvIterator.hasNext()) {    curArg=argvIterator.next();    if ("-filter".equals(curArg))     containing=argvIterator.next(); else     if ("-values".equals(curArg))     valuesOnly=true; else {      fatal("Unrecognized option: " + curArg,null);    }  }  if (valuesOnly)   printPropertiesValues(mbean.properties(containing)); else   printPropertiesJSON(mbean.properties(containing));}  }
class C{  public void testAdd(){  String[] values=null;  Metadata meta=new Metadata();  values=meta.getValues(CONTENTTYPE);  assertEquals(0,values.length);  meta.add(CONTENTTYPE,"value1");  values=meta.getValues(CONTENTTYPE);  assertEquals(1,values.length);  assertEquals("value1",values[0]);  meta.add(CONTENTTYPE,"value2");  values=meta.getValues(CONTENTTYPE);  assertEquals(2,values.length);  assertEquals("value1",values[0]);  assertEquals("value2",values[1]);  meta.add(CONTENTTYPE,"value1");  values=meta.getValues(CONTENTTYPE);  assertEquals(3,values.length);  assertEquals("value1",values[0]);  assertEquals("value2",values[1]);  assertEquals("value1",values[2]);}  }
class C{  public boolean isTail(){  if (children.size() == 0)   return true; else   return false;}  }
class C{  public void init() throws ServletException {}  }
class C{  @Override public String toString(){  return text.toString();}  }
class C{  public static ValueTimestamp parse(String s){  try {    return parseTry(s);  } catch (  Exception e) {    throw DbException.get(ErrorCode.INVALID_DATETIME_CONSTANT_2,e,"TIMESTAMP",s);  }}  }
class C{  public static boolean isIToolWrench(ItemStack item){  if (item == null)   return false;  return item.getItem() instanceof IToolWrench;}  }
class C{  public void addExtensionFieldValue(ExtensionFieldValueEntity extensionFieldValue){  extensionFieldValues.add(extensionFieldValue);}  }
class C{  public static String CITInfo(EnumMap<CIT,Boolean> hp){  StringBuilder result=new StringBuilder();  result.append("[");  if (hp != null) {    for (    CIT key : hp.keySet())     result.append(key.toString() + ":" + hp.get(key)+ ", ");    result.delete(result.length() - 2,result.length());  }  result.append("]");  return result.toString();}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, rows, cols;  int progress=0;  double z, zN1, zN2, noData, outputNoData;  int[] dX=new int[]{0,0,-1,1};  int[] dY=new int[]{-1,1,0,0};  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  boolean performLineThinning=Boolean.parseBoolean(args[2]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    rows=DEM.getNumberRows();    cols=DEM.getNumberColumns();    noData=DEM.getNoDataValue();    outputNoData=-32768;    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.INTEGER,0);    output.setNoDataValue(outputNoData);    output.setPreferredPalette("qual.pal");    output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);    output.setZUnits("dimensionless");    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          zN1=DEM.getValue(row + dY[0],col + dX[0]);          zN2=DEM.getValue(row + dY[1],col + dX[1]);          if ((zN1 != noData) && (zN2 != noData) && (zN1 < z)&& (zN2 < z)) {            output.setValue(row,col,1);          } else {            zN1=DEM.getValue(row + dY[2],col + dX[2]);            zN2=DEM.getValue(row + dY[3],col + dX[3]);            if ((zN1 != noData) && (zN2 != noData) && (zN1 < z)&& (zN2 < z)) {              output.setValue(row,col,1);            }          }        } else {          output.setValue(row,col,outputNoData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    if (performLineThinning) {      long counter=0;      int loopNum=0;      int i, a;      dX=new int[]{1,1,1,0,-1,-1,-1,0};      dY=new int[]{-1,0,1,1,1,0,-1,-1};      int[][] elements={{6,7,0,4,3,2},{7,0,1,3,5},{0,1,2,4,5,6},{1,2,3,5,7},{2,3,4,6,7,0},{3,4,5,7,1},{4,5,6,0,1,2},{5,6,7,1,3}};      double[][] vals={{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1}};      double[] neighbours=new double[8];      boolean patternMatch=false;      do {        loopNum++;        updateProgress("Loop Number " + loopNum + ":",0);        counter=0;        for (row=0; row < rows; row++) {          for (col=0; col < cols; col++) {            z=output.getValue(row,col);            if (z > 0 && z != noData) {              for (i=0; i < 8; i++) {                neighbours[i]=output.getValue(row + dY[i],col + dX[i]);              }              for (a=0; a < 8; a++) {                patternMatch=true;                for (i=0; i < elements[a].length; i++) {                  if (neighbours[elements[a][i]] != vals[a][i]) {                    patternMatch=false;                  }                }                if (patternMatch) {                  output.setValue(row,col,0);                  counter++;                }              }            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(100f * row / (rows - 1));          updateProgress(progress);        }      } while (counter > 0);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static Object convertTo(JdbcConnection conn,Value v,Class<?> paramClass){  if (paramClass == Blob.class) {    return new JdbcBlob(conn,v,0);  } else   if (paramClass == Clob.class) {    return new JdbcClob(conn,v,0);  }  if (v.getType() == Value.JAVA_OBJECT) {    Object o=SysProperties.serializeJavaObject ? JdbcUtils.deserialize(v.getBytes()) : v.getObject();    if (paramClass.isAssignableFrom(o.getClass())) {      return o;    }  }  throw DbException.getUnsupportedException(paramClass.getName());}  }
class C{  public static PasswordAuthentication requestPasswordAuthentication(String rHost,InetAddress rAddr,int rPort,String rProtocol,String rPrompt,String rScheme,URL rURL,Authenticator.RequestorType reqType){  if (thisAuthenticator == null) {    return null;  }  thisAuthenticator.host=rHost;  thisAuthenticator.addr=rAddr;  thisAuthenticator.port=rPort;  thisAuthenticator.protocol=rProtocol;  thisAuthenticator.prompt=rPrompt;  thisAuthenticator.scheme=rScheme;  thisAuthenticator.url=rURL;  thisAuthenticator.rt=reqType;  return thisAuthenticator.getPasswordAuthentication();}  }
class C{  public static <K,V>ImmutableListMultimap<K,V> of(K k1,V v1,K k2,V v2,K k3,V v3){  ImmutableListMultimap.Builder<K,V> builder=ImmutableListMultimap.builder();  builder.put(k1,v1);  builder.put(k2,v2);  builder.put(k3,v3);  return builder.build();}  }
class C{  @LogMessageDoc(level="ERROR",message="Failure sending LLDP out port {port} on switch {switch}",explanation="An I/O error occured while sending LLDP message " + "to the switch.",recommendation=LogMessageDoc.CHECK_SWITCH) protected void sendDiscoveryMessage(DatapathId sw,OFPort port,boolean isStandard,boolean isReverse){  if (!isOutgoingDiscoveryAllowed(sw,port,isStandard,isReverse))   return;  IOFSwitch iofSwitch=switchService.getSwitch(sw);  OFPortDesc ofpPort=iofSwitch.getPort(port);  if (log.isTraceEnabled()) {    log.trace("Sending LLDP packet out of swich: {}, port: {}",sw.toString(),port.getPortNumber());  }  OFPacketOut po=generateLLDPMessage(sw,port,isStandard,isReverse);  OFPacketOut.Builder pob=po.createBuilder();  List<OFAction> actions=getDiscoveryActions(iofSwitch,ofpPort.getPortNo());  pob.setActions(actions);  iofSwitch.write(pob.build());  iofSwitch.flush();}  }
class C{  public static <T extends singleDetailPost>void routeSinglePage(final long pid,final Activity ctx,final Class<T> clazz){  Intent n=new Intent(ctx,clazz);  final Bundle b=new Bundle();  b.putInt(singleDetailPost.Method,singleDetailPost.REQUEST_METHOD_POST_ID);  b.putLong(singleDetailPost.PID,pid);  n.putExtras(b);  ctx.startActivityForResult(n,RESULTSINGLE);}  }
class C{  boolean stop(){  if (mThread != null) {    mThread.interrupt();    if (mThreadPool != null) {      try {        mThreadPool.shutdownNow();      } catch (      SecurityException e) {        Slog.w(LOG_TAG,"Could not stop all view server threads");      }    }    mThreadPool=null;    mThread=null;    try {      mServer.close();      mServer=null;      return true;    } catch (    IOException e) {      Slog.w(LOG_TAG,"Could not close the view server");    }  }  return false;}  }
class C{  public boolean isUseRawSumsWithoutLn(){  return useRawSumsWithoutLn;}  }
class C{  public void run(){  try {    Message response=res.send(query);    listener.receiveMessage(id,response);  } catch (  Exception e) {    listener.handleException(id,e);  }}  }
class C{  public static void wtf(String tag,String msg){  wtf(tag,msg,null);}  }
class C{  private void logMessage(String msg,Object[] obj){  if (_monitoringPropertiesLoader.isToLogIndications()) {    _logger.debug("->" + msg,obj);  }}  }
class C{  public synchronized void update(String sqlStatement,long executionTime,int rowCount){  QueryEntry entry=map.get(sqlStatement);  if (entry == null) {    entry=new QueryEntry();    entry.sqlStatement=sqlStatement;    map.put(sqlStatement,entry);  }  entry.update(executionTime,rowCount);  if (map.size() > maxQueryEntries * 1.5f) {    ArrayList<QueryEntry> list=new ArrayList<QueryEntry>();    list.addAll(map.values());    Collections.sort(list,QUERY_ENTRY_COMPARATOR);    HashSet<QueryEntry> oldestSet=new HashSet<QueryEntry>(list.subList(0,list.size() / 3));    for (Iterator<Entry<String,QueryEntry>> it=map.entrySet().iterator(); it.hasNext(); ) {      Entry<String,QueryEntry> mapEntry=it.next();      if (oldestSet.contains(mapEntry.getValue())) {        it.remove();      }    }  }}  }
class C{  public Iterable<Integer> reversePost(){  Stack<Integer> reverse=new Stack<Integer>();  for (  int v : postorder)   reverse.push(v);  return reverse;}  }
class C{  public X509CertPathImpl(List<? extends java.security.cert.Certificate> certs) throws CertificateException {  super("X.509");  final int size=certs.size();  certificates=new ArrayList<X509Certificate>(size);  for (int i=0; i < size; i++) {    final java.security.cert.Certificate cert=certs.get(i);    if (!(cert instanceof X509Certificate)) {      throw new CertificateException("Certificate " + i + " is not an X.509 certificate");    }    certificates.add((X509Certificate)cert);  }}  }
class C{  public DragSource() throws HeadlessException {  if (GraphicsEnvironment.isHeadless()) {    throw new HeadlessException();  }}  }
class C{  private void initStringsToVTCodes(){  Field[] fields=KeyEvent.class.getFields();  for (  Field field : fields) {    String name=field.getName();    if (name.startsWith("VK")) {      int code=0;      try {        code=field.getInt(null);      } catch (      Exception e) {        log.error("This error message, which nobody will ever see, shuts my IDE up.");      }      String key=name.substring(3);      stringsToVTCodes.put(key,code);    }  }}  }
class C{  private int startOfWeekOffset(int day,int dow){  int weekStart=Math.floorMod(day - dow,7);  int offset=-weekStart;  if (weekStart + 1 > weekDef.getMinimalDaysInFirstWeek()) {    offset=7 - weekStart;  }  return offset;}  }
class C{  public static void warningDialog(Stage owner,String msg){  showDialog(owner,MessageType.WARN,msg,false);}  }
class C{  public void addToRoomFeatPrefs(String roomFeatPref,String level){  this.roomFeaturePrefs.add(roomFeatPref);  this.roomFeaturePrefLevels.add(level);}  }
class C{  public DHPublicKeySpec(BigInteger y,BigInteger p,BigInteger g){  this.y=y;  this.p=p;  this.g=g;}  }
class C{  public void doNew(){  if (okToAbandon()) {    jTextArea1.setText("");    currFileName=null;    dirty=false;    updateCaption();  }}  }
class C{  private PathDataEvaluator(){}  }
class C{  public boolean supportsAlterTableWithDropColumn() throws SQLException {  return true;}  }
class C{  @Override public int read() throws IOException {synchronized (lock) {    checkNotClosed();    if (pos != count) {      return str.charAt(pos++);    }    return -1;  }}  }
class C{  @Override public Set<K> keySet(){  Set<K> ks=keySet;  return (ks != null) ? ks : (keySet=new KeySet());}  }
class C{  private static XMLReader createReader() throws IOException {  XMLReader reader=null;  try {    reader=XMLReaderFactory.createXMLReader();  } catch (  SAXException e) {    try {      reader=XMLReaderFactory.createXMLReader("org.apache.crimson.parser.XMLReaderImpl");    } catch (    SAXException se) {      throw new IOException(se.toString());    }  }  return reader;}  }
class C{  public void createAndActivateNewHDChain(){  final DeterministicKeyChain chain=new DeterministicKeyChain(new SecureRandom());  addAndActivateHDChain(chain);}  }
class C{  public GridDiscoveryTopologySnapshot(long topVer,Collection<ClusterNode> topNodes){  this.topVer=topVer;  this.topNodes=topNodes;}  }
class C{  protected void clearResult(){  md.clearResult();  localizationResult.setText("<HTML>Result: <BR><BR><BR></HTML>");}  }
class C{  public Vset checkValue(Environment env,Context ctx,Vset vset,Hashtable exp){  type=left.toType(env,ctx);  vset=right.checkValue(env,ctx,vset,exp);  if (type.isType(TC_ERROR) || right.type.isType(TC_ERROR)) {    return vset;  }  if (type.equals(right.type)) {    return vset;  }  try {    if (env.explicitCast(right.type,type)) {      right=new ConvertExpression(where,type,right);      return vset;    }  } catch (  ClassNotFound e) {    env.error(where,"class.not.found",e.name,opNames[op]);  }  env.error(where,"invalid.cast",right.type,type);  return vset;}  }
class C{  @Override public int hashCode(){  int hash=7;  hash=71 * hash + super.hashCode();  hash=71 * hash + (_type != null ? _type.hashCode() : 0);  hash=71 * hash + (_timestamp != null ? _timestamp.hashCode() : 0);  hash=71 * hash + (_source != null ? _source.hashCode() : 0);  hash=71 * hash + (_id != null ? _id.hashCode() : 0);  return hash;}  }
class C{  protected Textifier createTextifier(){  return new Textifier();}  }
class C{  private void playFile(File audioFile,Guild guild){  if (guild == null) {    LOG.fatal("Guild is null. Have you added your bot to a guild? https://discordapp.com/developers/docs/topics/oauth2");  } else {    if (isMusicPlayer()) {      if (bot.getAudioManager(guild).getSendingHandler() == null) {        bot.getAudioManager(guild).setSendingHandler(musicPlayer);      }      musicPlayer.stop();      musicPlayer.getAudioQueue().clear();      AudioSource audioSource=new LocalSource(audioFile);      musicPlayer.getAudioQueue().add(audioSource);      musicPlayer.setVolume(playerVolume);      bot.getAudioManager(guild).setConnectTimeout(100L);      musicPlayer.play();    } else {      try {        player=new FilePlayer(audioFile);        bot.getAudioManager(guild).setSendingHandler(player);        player.stop();        player.setVolume(playerVolume);        bot.getAudioManager(guild).setConnectTimeout(100L);        player.play();      } catch (      IOException|UnsupportedAudioFileException e) {        e.printStackTrace();      }    }  }}  }
class C{  public boolean inStylusButtonPressed(){  return mIsButtonPressed;}  }
class C{  private InstructionLine createLine(final ICodeNodeProvider instructionSet) throws ParserException {  final InstructionLine row=new InstructionLine();  row.setBasicBlock(instructionSet.getNodeId());  row.setAddress(instructionSet.getInstructionAddress());  row.setMnemonic(instructionSet.getMnemonic());  row.setArchitecture(instructionSet.getInstructionArchitecture());  final int moduleId=instructionSet.getModule();  final IAddress parentFunction=instructionSet.getParentFunction();  final INaviModule module=modules.get(moduleId);  if (module == null) {    throw new ParserException(String.format("Instruction with ID %d has unknown module with ID %d",row.getId(),moduleId));  }  final INaviFunction function=parentFunction == null ? null : module.getContent().getFunctionContainer().getFunction(parentFunction);  row.setParentFunction(function);  if ((parentFunction != null) && (function == null)) {    throw new ParserException(String.format("Instruction with ID %d has unknown parent function with address %s",row.getId(),parentFunction.toHexString()));  }  row.setX(instructionSet.getX());  row.setY(instructionSet.getY());  row.setColor(new Color(instructionSet.getColor()));  row.setBorderColor(new Color(instructionSet.getBorderColor()));  row.setSelected(instructionSet.isSelected());  row.setVisible(instructionSet.isVisible());  row.setLocalNodeCommentId(instructionSet.getLocalNodeCommentId());  row.setGlobalNodeComment(instructionSet.getGlobalNodeCommentId());  row.setGlobalInstructionComment(instructionSet.getGlobalInstructionCommentId());  row.setLocalInstructionComment(instructionSet.getLocalInstructionCommentId());  row.setData(instructionSet.getData());  row.setModule(module);  return row;}  }
class C{  public Date nextDateInRange(Date start,Date end){  return new Date(nextLongInRange(start.getTime(),end.getTime()));}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value={"UW_UNCOND_WAIT"},justification="Wait is for external hardware, which doesn't necessarilly respond, to process the data.") protected void forwardToPort(AbstractMRMessage m,AbstractMRListener reply){  if (log.isDebugEnabled()) {    log.debug("forwardToPort message: [{}]",m);  }  mLastSender=reply;  Runnable r=new XmtNotifier(m,mLastSender,this);  javax.swing.SwingUtilities.invokeLater(r);  try {    if (ostream != null) {      while (m.getRetries() >= 0) {        if (portReadyToSend(controller)) {          ostream.write((m + "\n\r").getBytes(java.nio.charset.Charset.forName("UTF-8")));          ostream.flush();          log.debug("written");          break;        } else         if (m.getRetries() >= 0) {          if (log.isDebugEnabled()) {            log.debug("Retry message: {} attempts remaining: {}",m.toString(),m.getRetries());          }          m.setRetries(m.getRetries() - 1);          try {synchronized (xmtRunnable) {              xmtRunnable.wait(m.getTimeout());            }          } catch (          InterruptedException e) {            Thread.currentThread().interrupt();            log.error("retry wait interupted");          }        } else {          log.warn("sendMessage: port not ready for data sending: {}",m.toString());        }      }    } else {      connectionWarn();    }  } catch (  Exception e) {    portWarn(e);    controller.recover();  }}  }
class C{  private void preloadHost(ClassLoader classLoader) throws Exception {  Class container=Class.forName("org.apache.catalina.Container",true,classLoader);  Class host=Class.forName("org.apache.catalina.Host",true,classLoader);  hostSetAutoDeploy=host.getMethod("setAutoDeploy",new Class[]{boolean.class});  hostGetName=host.getMethod("getName",new Class[0]);  hostAddChild=host.getMethod("addChild",new Class[]{container});  hostFindChild=host.getMethod("findChild",new Class[]{String.class});  hostFindChildren=host.getMethod("findChildren",new Class[0]);  hostRemoveChild=host.getMethod("removeChild",new Class[]{container});}  }
class C{  public MouseWheelEvent(Component source,int id,long when,int modifiers,int x,int y,int clickCount,boolean popupTrigger,int scrollType,int scrollAmount,int wheelRotation){  this(source,id,when,modifiers,x,y,0,0,clickCount,popupTrigger,scrollType,scrollAmount,wheelRotation);}  }
class C{  public void testMultiplyMathContextDiffScaleNegPos(){  String a="488757458676796558668876576576579097029810457634781384756794987";  int aScale=-63;  String b="747233429293018787918347987234564568";  int bScale=63;  String c="3.6521591193960361339707130098174381429788164316E+98";  int cScale=-52;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  MathContext mc=new MathContext(47,RoundingMode.HALF_UP);  BigDecimal result=aNumber.multiply(bNumber,mc);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",cScale,result.scale());}  }
class C{  private static int calculateLRC(byte[] data,int off,int length){  return calculateLRC(data,off,length,0);}  }
class C{  @DSComment("View configuration") @DSSafe(DSCat.GUI) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:55.462 -0500",hash_original_method="545A02CAD62F49742EF9C21476AFC78D",hash_generated_method="6C956466F8F18FEFA6F27CCAA6695F8A") public boolean hasPermanentMenuKey(){  return sHasPermanentMenuKey;}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  private static Object newProxyInstance(List<ClassLoader> classLoadersToTry,Class<?>[] interfaces,InvocationHandler delegate) throws IllegalArgumentException {  Object ret=null;  ClassLoader cl=classLoadersToTry.get(0);  List<ClassLoader> remainingClassLoaders=classLoadersToTry.subList(1,classLoadersToTry.size());  try {    return Proxy.newProxyInstance(cl,interfaces,delegate);  } catch (  IllegalArgumentException someClassNotFound) {    if (remainingClassLoaders.size() > 0) {      ret=newProxyInstance(remainingClassLoaders,interfaces,delegate);    } else {      throw someClassNotFound;    }  }  return ret;}  }
class C{  public boolean isPollable(){  return isPollable;}  }
class C{  @NotNull public static Query<PsiReference> search(@NotNull PsiElement element,@NotNull SearchScope searchScope){  return search(element,searchScope,false);}  }
class C{  public static HeaderPartitionIMF checkIMFCompliance(MXFOperationalPattern1A.HeaderPartitionOP1A headerPartitionOP1A,@Nonnull IMFErrorLogger imfErrorLogger) throws IOException {  int previousNumberOfErrors=imfErrorLogger.getErrors().size();  HeaderPartition headerPartition=headerPartitionOP1A.getHeaderPartition();  Preface preface=headerPartition.getPreface();  GenericPackage genericPackage=preface.getContentStorage().getEssenceContainerDataList().get(0).getLinkedPackage();  SourcePackage filePackage;  filePackage=(SourcePackage)genericPackage;  UUID packageID=filePackage.getPackageMaterialNumberasUUID();  byte[] bytes=preface.getOperationalPattern().getULAsBytes();  if (OperationalPatternHelper.getPackageComplexity(bytes) != OperationalPatternHelper.PackageComplexity.SinglePackage) {    imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_COMPONENT_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.NON_FATAL,IMFConstraints.IMF_ESSENCE_EXCEPTION_PREFIX + String.format("IMFTrackFile represented by Id %s, Lower four bits of Operational Pattern qualifier byte = 0x%x, should be = 0x01 per the definition of OperationalPattern-1A for Package Complexity.",packageID.toString(),bytes[13]));  }  if (OperationalPatternHelper.getItemComplexity(bytes) != OperationalPatternHelper.ItemComplexity.SingleItem) {    imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_COMPONENT_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.NON_FATAL,IMFConstraints.IMF_ESSENCE_EXCEPTION_PREFIX + String.format("IMFTrackFile represented by Id %s, Lower four bits of Operational Pattern qualifier byte = 0x%x, should be = 0x01 per the definition of OperationalPattern-1A for Item Complexity.",packageID.toString(),bytes[12]));  }  if ((preface.getPrimaryPackage() == null) || (!preface.getPrimaryPackage().equals(preface.getContentStorage().getEssenceContainerDataList().get(0).getLinkedPackage()))) {    imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_COMPONENT_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.NON_FATAL,IMFConstraints.IMF_ESSENCE_EXCEPTION_PREFIX + String.format("Primary package identifier for Preface is not set to the top-level file package in the IMFTrackFile represented by ID %s.",packageID.toString()));  }{    MXFUID packageUID=filePackage.getPackageUID();    byte[] packageUID_first16Bytes_Constrained={0x06,0x0a,0x2b,0x34,0x01,0x01,0x01,0x05,0x01,0x01,0x0f,0x20,0x13,0x00,0x00,0x00};    byte[] packageUID_first16Bytes=Arrays.copyOfRange(packageUID.getUID(),0,packageUID_first16Bytes_Constrained.length);    boolean result=packageUID_first16Bytes[0] == packageUID_first16Bytes_Constrained[0];    for (int i=1; i < packageUID_first16Bytes_Constrained.length; i++) {      result&=packageUID_first16Bytes[i] == packageUID_first16Bytes_Constrained[i];    }    if (!result) {      imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_CORE_CONSTRAINTS_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.NON_FATAL,IMFConstraints.IMF_ESSENCE_EXCEPTION_PREFIX + String.format("PackageUID in FilePackage = %s, which does not obey the constraint that the first 16 bytes = %s in the IMFTrackFile represented by ID %s.",packageUID.toString(),Utilities.serializeBytesToHexString(packageUID_first16Bytes_Constrained),packageID.toString()));    }    int numEssenceTracks=0;    MXFDataDefinition filePackageMxfDataDefinition=null;    for (    TimelineTrack timelineTrack : filePackage.getTimelineTracks()) {      Sequence sequence=timelineTrack.getSequence();      filePackageMxfDataDefinition=sequence.getMxfDataDefinition();      if (!filePackageMxfDataDefinition.equals(MXFDataDefinition.OTHER)) {        numEssenceTracks++;      }      if (timelineTrack.getOrigin() != 0) {        imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_CORE_CONSTRAINTS_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.NON_FATAL,IMFConstraints.IMF_ESSENCE_EXCEPTION_PREFIX + String.format("The origin property of a timeline track in the IMFTrackFile represented by ID %s is non-zero, only 0 is allowed.",packageID));      }    }    if (numEssenceTracks != 1) {      imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_COMPONENT_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.NON_FATAL,IMFConstraints.IMF_ESSENCE_EXCEPTION_PREFIX + String.format("Number of essence tracks in FilePackage %s = %d, which is different from 1, this is invalid in the IMFTrackFile represented by ID %s.",filePackage.getInstanceUID(),numEssenceTracks,packageID.toString()));    }  }{    for (    TimelineTrack timelineTrack : filePackage.getTimelineTracks()) {      Sequence sequence=timelineTrack.getSequence();      if (sequence == null) {        imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_COMPONENT_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.NON_FATAL,IMFConstraints.IMF_ESSENCE_EXCEPTION_PREFIX + String.format("TimelineTrack with instanceUID = %s in the IMFTrackFile represented by ID %s has no sequence.",timelineTrack.getInstanceUID(),packageID.toString()));      } else {        MXFDataDefinition filePackageMxfDataDefinition=sequence.getMxfDataDefinition();        if (filePackageMxfDataDefinition.equals(MXFDataDefinition.SOUND)) {          GenericDescriptor genericDescriptor=filePackage.getGenericDescriptor();          if (genericDescriptor instanceof WaveAudioEssenceDescriptor) {            WaveAudioEssenceDescriptor waveAudioEssenceDescriptor=(WaveAudioEssenceDescriptor)genericDescriptor;            if ((waveAudioEssenceDescriptor.getChannelAssignmentUL() == null) || (!waveAudioEssenceDescriptor.getChannelAssignmentUL().equals(new MXFUID(IMFConstraints.IMF_CHANNEL_ASSIGNMENT_UL)))) {              imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_CORE_CONSTRAINTS_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.NON_FATAL,IMFConstraints.IMF_ESSENCE_EXCEPTION_PREFIX + String.format("ChannelAssignment UL for WaveAudioEssenceDescriptor = %s is different from %s in the IMFTrackFile represented by ID %s.",waveAudioEssenceDescriptor.getChannelAssignmentUL(),new MXFUID(IMFConstraints.IMF_CHANNEL_ASSIGNMENT_UL),packageID.toString()));            }            if (headerPartition.getAudioEssenceSpokenLanguage() == null) {              imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_CORE_CONSTRAINTS_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.NON_FATAL,IMFConstraints.IMF_ESSENCE_EXCEPTION_PREFIX + String.format("WaveAudioEssenceDescriptor in the IMFTrackFile represented by ID %s does not have a RFC5646 spoken language indicated, language code shall be set in the SoundFieldGroupLabelSubDescriptor, unless the AudioEssence does not have a primary spoken language.",packageID.toString()));            } else {              if (!IMFConstraints.isSpokenLanguageRFC5646Compliant(headerPartition.getAudioEssenceSpokenLanguage())) {                List<String> strings=IMFConstraints.getPrimarySpokenLanguageUnicodeString(headerPartition.getAudioEssenceSpokenLanguage());                imfErrorLogger.addError(new ErrorLogger.ErrorObject(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_COMPONENT_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.NON_FATAL,String.format("Language Code (%s) in SoundFieldGroupLabelSubdescriptor in the IMFTrackfile represented by ID %s is not RFC5646 compliant",strings,packageID.toString())));              }            }            if (!StructuralMetadata.isAudioWaveClipWrapped(waveAudioEssenceDescriptor.getEssenceContainerUL().getULAsBytes()[14])) {              imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_CORE_CONSTRAINTS_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.NON_FATAL,IMFConstraints.IMF_ESSENCE_EXCEPTION_PREFIX + String.format("WaveAudioEssenceDescriptor indicates that the Audio Essence within an Audio Track File is not Wave Clip-Wrapped in the IMFTrackFile represented by ID %s.",packageID.toString()));            }            List<InterchangeObject.InterchangeObjectBO> subDescriptors=headerPartition.getSubDescriptors();            if (subDescriptors.size() == 0) {              imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_CORE_CONSTRAINTS_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.NON_FATAL,IMFConstraints.IMF_ESSENCE_EXCEPTION_PREFIX + String.format("WaveAudioEssenceDescriptor in the IMFTrackFile represented by ID %s indicates a channel count of %d, however there are %d AudioChannelLabelSubdescriptors, every audio channel should refer to exactly one AudioChannelLabelSubDescriptor and vice versa.",packageID.toString(),waveAudioEssenceDescriptor.getChannelCount(),subDescriptors.size()));            } else {              Map<Long,AudioChannelLabelSubDescriptor> audioChannelLabelSubDescriptorMap=headerPartition.getAudioChannelIDToMCASubDescriptorMap();              if (waveAudioEssenceDescriptor.getChannelCount() != audioChannelLabelSubDescriptorMap.size()) {                imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_CORE_CONSTRAINTS_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.NON_FATAL,IMFConstraints.IMF_ESSENCE_EXCEPTION_PREFIX + String.format("WaveAudioEssenceDescriptor in the IMFTrackFile represented by ID %s indicates a channel count of %d, however there are %d AudioChannelLabelSubdescriptors, every audio channel should refer to exactly one AudioChannelLabelSubDescriptor and vice versa.",packageID.toString(),waveAudioEssenceDescriptor.getChannelCount(),audioChannelLabelSubDescriptorMap.size()));              }              for (Long channelID=1L; channelID <= waveAudioEssenceDescriptor.getChannelCount(); channelID++) {                if (!audioChannelLabelSubDescriptorMap.containsKey(channelID)) {                  imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_CORE_CONSTRAINTS_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.NON_FATAL,IMFConstraints.IMF_ESSENCE_EXCEPTION_PREFIX + String.format("AudioChannelLabelSubdescriptor missing for ChannelID %d, in the IMFTrackFile represented by ID %s",channelID,packageID.toString()));                }              }              List<InterchangeObject.InterchangeObjectBO> soundFieldGroupLabelSubDescriptors=subDescriptors.subList(0,subDescriptors.size()).stream().filter(null).collect(Collectors.toList());              if (soundFieldGroupLabelSubDescriptors.size() != 1) {                imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_CORE_CONSTRAINTS_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.NON_FATAL,IMFConstraints.IMF_ESSENCE_EXCEPTION_PREFIX + String.format("WaveAudioEssenceDescriptor in the IMFTrackFile represented by ID %s refers to %d SoundFieldGroupLabelSubDescriptors exactly 1 is required",packageID.toString(),soundFieldGroupLabelSubDescriptors.size()));              } else {                SoundFieldGroupLabelSubDescriptor.SoundFieldGroupLabelSubDescriptorBO soundFieldGroupLabelSubDescriptorBO=SoundFieldGroupLabelSubDescriptor.SoundFieldGroupLabelSubDescriptorBO.class.cast(soundFieldGroupLabelSubDescriptors.get(0));                if ((soundFieldGroupLabelSubDescriptorBO.getMCATitle() == null || soundFieldGroupLabelSubDescriptorBO.getMCATitle().isEmpty()) || (soundFieldGroupLabelSubDescriptorBO.getMCATitleVersion() == null || soundFieldGroupLabelSubDescriptorBO.getMCATitleVersion().isEmpty()) || (soundFieldGroupLabelSubDescriptorBO.getMCAAudioContentKind() == null || soundFieldGroupLabelSubDescriptorBO.getMCAAudioContentKind().isEmpty())|| (soundFieldGroupLabelSubDescriptorBO.getMCAAudioElementKind() == null || soundFieldGroupLabelSubDescriptorBO.getMCAAudioElementKind().isEmpty())) {                  imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_CORE_CONSTRAINTS_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.NON_FATAL,IMFConstraints.IMF_ESSENCE_EXCEPTION_PREFIX + String.format("WaveAudioEssenceDescriptor in the IMFTrackFile represented by ID %s refers to a SoundFieldGroupLabelSubDescriptor that is missing one/all of MCATitle, MCATitleVersion, MCAAudioContentKind, MCAAudioElementKind, %n%s.",packageID.toString(),soundFieldGroupLabelSubDescriptorBO.toString()));                }                SoundFieldGroupLabelSubDescriptor soundFieldGroupLabelSubDescriptor=(SoundFieldGroupLabelSubDescriptor)headerPartition.getSoundFieldGroupLabelSubDescriptors().get(0);                List<InterchangeObject> audioChannelLabelSubDescriptors=headerPartition.getAudioChannelLabelSubDescriptors();                if (soundFieldGroupLabelSubDescriptor.getMCALinkId() == null) {                  imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_COMPONENT_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.NON_FATAL,IMFConstraints.IMF_ESSENCE_EXCEPTION_PREFIX + String.format("SoundFieldGroupLabelSubDescriptor is missing MCALinkID, in the IMFTrackFile represented by ID %s",packageID.toString()));                } else {                  for (                  InterchangeObject interchangeObject : audioChannelLabelSubDescriptors) {                    AudioChannelLabelSubDescriptor audioChannelLabelSubDescriptor=AudioChannelLabelSubDescriptor.class.cast(interchangeObject);                    if (audioChannelLabelSubDescriptor.getSoundfieldGroupLinkId() == null) {                      imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_CORE_CONSTRAINTS_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.NON_FATAL,IMFConstraints.IMF_ESSENCE_EXCEPTION_PREFIX + String.format("Audio channel with MCALinkID %s is missing SoundfieldGroupLinkId, in the IMFTrackFile represented by ID %s",audioChannelLabelSubDescriptor.getMCALinkId() != null ? audioChannelLabelSubDescriptor.getMCALinkId().toString() : "",packageID.toString()));                    } else                     if (!audioChannelLabelSubDescriptor.getSoundfieldGroupLinkId().equals(soundFieldGroupLabelSubDescriptor.getMCALinkId())) {                      imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_COMPONENT_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.NON_FATAL,IMFConstraints.IMF_ESSENCE_EXCEPTION_PREFIX + String.format("Audio channel with MCALinkID %s refers to wrong SoundfieldGroupLinkId %s, Should refer to %s, in the IMFTrackFile represented by ID %s",audioChannelLabelSubDescriptor.getMCALinkId() != null ? audioChannelLabelSubDescriptor.getMCALinkId().toString() : "",audioChannelLabelSubDescriptor.getSoundfieldGroupLinkId().toString(),soundFieldGroupLabelSubDescriptor.getMCALinkId().toString(),packageID.toString()));                    }                  }                }              }            }            int audioSampleRate=waveAudioEssenceDescriptor.getAudioSamplingRateNumerator() / waveAudioEssenceDescriptor.getAudioSamplingRateDenominator();            if (audioSampleRate != 48000 && audioSampleRate != 96000) {              imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_CORE_CONSTRAINTS_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.NON_FATAL,IMF_ESSENCE_EXCEPTION_PREFIX + String.format("WaveAudioEssenceDescriptor in the IMFTrackFile represented by ID %s seems to indicate an Audio Sample Rate = %f, only 48000 and 96000 are allowed.",packageID.toString(),(double)waveAudioEssenceDescriptor.getAudioSamplingRateNumerator() / waveAudioEssenceDescriptor.getAudioSamplingRateDenominator()));            }            int bitDepth=waveAudioEssenceDescriptor.getQuantizationBits();            if (bitDepth != 24) {              imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_CORE_CONSTRAINTS_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.NON_FATAL,IMF_ESSENCE_EXCEPTION_PREFIX + String.format("WaveAudioEssenceDescriptor in the IMFTrackFile represented by ID %s seems to indicate an Audio Bit Depth = %d, only 24 is allowed.",packageID.toString(),waveAudioEssenceDescriptor.getQuantizationBits()));            }          } else {            imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_CORE_CONSTRAINTS_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.FATAL,IMFConstraints.IMF_ESSENCE_EXCEPTION_PREFIX + String.format("Header Partition does not have a WaveAudioEssenceDescriptor set in the IMFTrackFile represented by ID %s",packageID.toString()));          }        }      }    }  }  if (imfErrorLogger.hasFatalErrors(previousNumberOfErrors,imfErrorLogger.getNumberOfErrors())) {    throw new IMFException(String.format("Found fatal errors in the in the IMFTrackFile represented by ID %s that violate the IMF Core constraints.",packageID.toString()),imfErrorLogger);  }  return new HeaderPartitionIMF(headerPartitionOP1A);}  }
class C{  public static <T>void addAll(final Collection<T> src,final Collection<T> dst){  if (src != null)   dst.addAll(src);}  }
class C{  public boolean isSelfSigned(){  return selfSigned;}  }
class C{  public BigDecimal calculateMeasure(MSLAGoal goal){  BigDecimal retValue=Env.ZERO;  BigDecimal total=Env.ZERO;  int count=0;  MSLAMeasure[] measures=goal.getAllMeasures();  for (int i=0; i < measures.length; i++) {    MSLAMeasure measure=measures[i];    if (!measure.isActive() || (goal.getValidFrom() != null && measure.getDateTrx().before(goal.getValidFrom())) || (goal.getValidTo() != null && measure.getDateTrx().after(goal.getValidTo())))     continue;    total=total.add(measure.getMeasureActual());    count++;    if (!measure.isProcessed()) {      measure.setProcessed(true);      measure.saveEx();    }  }  if (goal.getValidTo() != null && goal.getValidTo().after(new Timestamp(System.currentTimeMillis())))   goal.setProcessed(true);  if (count != 0)   retValue=total.divide(new BigDecimal(count),2,BigDecimal.ROUND_HALF_UP);  return retValue;}  }
class C{  @Override public Amount calculateMinimumFee(final Transaction transaction){switch (transaction.getType()) {case TransactionTypes.TRANSFER:    return this.calculateMinimumFee((TransferTransaction)transaction);case TransactionTypes.MULTISIG_AGGREGATE_MODIFICATION:  return calculateMinimumFee((MultisigAggregateModificationTransaction)transaction);case TransactionTypes.PROVISION_NAMESPACE:case TransactionTypes.MOSAIC_DEFINITION_CREATION:case TransactionTypes.MOSAIC_SUPPLY_CHANGE:return FEE_UNIT.multiply(10);}return FEE_UNIT.multiply(FEE_MULTIPLIER);}  }
class C{  public static boolean isDate(Object value,boolean alsoNumbers){  return isDateSimple(value,alsoNumbers);}  }
class C{  private void generatePatternBitmap(){  if (getBounds().width() <= 0 || getBounds().height() <= 0) {    return;  }  mBitmap=Bitmap.createBitmap(getBounds().width(),getBounds().height(),Config.ARGB_8888);  Canvas canvas=new Canvas(mBitmap);  Rect r=new Rect();  boolean verticalStartWhite=true;  for (int i=0; i <= numRectanglesVertical; i++) {    boolean isWhite=verticalStartWhite;    for (int j=0; j <= numRectanglesHorizontal; j++) {      r.top=i * mRectangleSize;      r.left=j * mRectangleSize;      r.bottom=r.top + mRectangleSize;      r.right=r.left + mRectangleSize;      canvas.drawRect(r,isWhite ? mPaintWhite : mPaintGray);      isWhite=!isWhite;    }    verticalStartWhite=!verticalStartWhite;  }}  }
class C{  public DoubleMetaphone(){  super();}  }
class C{  void processDragOver(DragSourceDragEvent dsde){  DragSourceListener dsl=listener;  if (dsl != null) {    dsl.dragOver(dsde);  }}  }
class C{  @Override public boolean isTimeIncluded(long timeStamp){  if (excludeAll == true) {    return false;  }  if (super.isTimeIncluded(timeStamp) == false) {    return false;  }  java.util.Calendar cl=createJavaCalendar(timeStamp);  int day=cl.get(java.util.Calendar.DAY_OF_MONTH);  return !(isDayExcluded(day));}  }
class C{  public static boolean isNCName(int c){  return c < 0x10000 && (CHARS[c] & MASK_NCNAME) != 0;}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HOST;case 2:  return PORT;case 3:return ID;case 4:return STATE;case 5:return TIMESTAMP;case 6:return VERSION;default :return null;}}  }
class C{  private boolean findLongestMatch(final char[] revA,final ArrayList<Integer> list,final char[] revB,final int index){  int match;  longestMatch_size=-1;  int size=list.size();  int revAsize=revA.length;  int revBsize=revB.length;  int start, end, count;  for (int i=0; i < size; i++) {    start=list.get(i);    if (!revABlocked[start] && !revBBlocked[index + 1]) {      count=index + 1;      end=start + 1;      while (end < revAsize && count < revBsize && revA[end] == revB[count] && !revABlocked[end] && !revBBlocked[count]) {        end++;        count++;      }      match=end - start;      if (match > longestMatch_size) {        longestMatch_size=match;        longestMatch_start=start;      }    }  }  if (longestMatch_size <= VALUE_MINIMUM_LONGEST_COMMON_SUBSTRING) {    return false;  }  queueA.add(new DiffBlock(this.blockCount,longestMatch_start,longestMatch_start + longestMatch_size,index,index + longestMatch_size,true));  queueB.add(new DiffBlock(this.blockCount,longestMatch_start,longestMatch_start + longestMatch_size,index,index + longestMatch_size,false));  blockCount++;  for (int i=0, j=longestMatch_start, k=index; i < longestMatch_size; i++, j++, k++) {    revABlocked[j]=true;    revBBlocked[k]=true;  }  return true;}  }
class C{  public static String surround(String string,String prefix,String suffix){  if (string.startsWith(prefix) == false) {    string=prefix + string;  }  if (string.endsWith(suffix) == false) {    string+=suffix;  }  return string;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public DMSCoordPanel(){  super();}  }
class C{  private String[] processName(String qName,boolean isAttribute,boolean useException) throws SAXException {  String parts[]=nsSupport.processName(qName,nameParts,isAttribute);  if (parts == null) {    if (useException)     throw makeException("Undeclared prefix: " + qName);    reportError("Undeclared prefix: " + qName);    parts=new String[3];    parts[0]=parts[1]="";    parts[2]=qName.intern();  }  return parts;}  }
class C{  public Query orderByLiveness(){  orderString=ORDER_BY_LIVENESS;  return this;}  }
class C{  public void addAttribute(String name,String value){}  }
class C{  public AndroidHttpClient(){  this("");}  }
class C{  public org.smpte_ra.schemas.st2067_2_2013.CompositionPlaylistType.EssenceDescriptorList buildEssenceDescriptorList(List<org.smpte_ra.schemas.st2067_2_2013.EssenceDescriptorBaseType> essenceDescriptorBaseTypes){  org.smpte_ra.schemas.st2067_2_2013.CompositionPlaylistType.EssenceDescriptorList essenceDescriptorList=new org.smpte_ra.schemas.st2067_2_2013.CompositionPlaylistType.EssenceDescriptorList();  essenceDescriptorList.getEssenceDescriptor().addAll(essenceDescriptorBaseTypes);  return essenceDescriptorList;}  }
class C{  public static void send(final DM dm,Set<InternalDistributedMember> recips,JmxManagerProfile profile){  JmxManagerProfileMessage r=new JmxManagerProfileMessage(recips,profile);  dm.putOutgoing(r);}  }
class C{  public boolean hasNext(){  if (mCompareResultIsValid) {switch (mCompareResult) {case BOTH:      return !mCursorLeft.isLast() || !mCursorRight.isLast();case LEFT:    return !mCursorLeft.isLast() || !mCursorRight.isAfterLast();case RIGHT:  return !mCursorLeft.isAfterLast() || !mCursorRight.isLast();default :throw new IllegalStateException("bad value for mCompareResult, " + mCompareResult);}} else {return !mCursorLeft.isAfterLast() || !mCursorRight.isAfterLast();}}  }
class C{  public static void main(String[] args){  try {    Instances inst=new Instances(new java.io.InputStreamReader(System.in));    inst.setClassIndex(inst.numAttributes() - 1);    CostCurve cc=new CostCurve();    EvaluationUtils eu=new EvaluationUtils();    Classifier classifier=new weka.classifiers.functions.Logistic();    ArrayList<Prediction> predictions=new ArrayList<Prediction>();    for (int i=0; i < 2; i++) {      eu.setSeed(i);      predictions.addAll(eu.getCVPredictions(classifier,inst,10));    }    Instances result=cc.getCurve(predictions);    System.out.println(result);  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  public static BigInteger[] proofEqualLogs(SMState state,int version) throws SMException {  BigInteger r=randomExponent();  BigInteger temp1=state.g1.modPow(r,MODULUS_S);  BigInteger temp2=state.qab.modPow(r,MODULUS_S);  BigInteger c=hash(version,temp1,temp2);  temp1=state.x3.multiply(c).mod(ORDER_S);  BigInteger d=r.subtract(temp1).mod(ORDER_S);  BigInteger[] ret=new BigInteger[2];  ret[0]=c;  ret[1]=d;  return ret;}  }
class C{  public void closeThriftReader(){  thriftReader.close();}  }
class C{  public AdditiveEpsilonIndicator(Problem problem,NondominatedPopulation referenceSet){  super(problem,referenceSet);}  }
class C{  @Override protected void sendFunctionGroup4(){  if (tc.getCommandStation().getCommandStationSoftwareVersionBCD() < 0x36) {    log.info("Functions F13-F28 unavailable in CS software version " + tc.getCommandStation().getCommandStationSoftwareVersion());    return;  }  XNetMessage msg=XNetMessage.getFunctionGroup4OpsMsg(this.getDccAddress(),f13,f14,f15,f16,f17,f18,f19,f20);  queueMessage(msg,THROTTLEFUNCSENT);}  }
class C{  public static String handleFrom(URI uri){  return N4FBPRJ + uri.toString();}  }
class C{  @Deprecated public SslError(int error,SslCertificate certificate){  this(error,certificate,"");}  }
class C{  public void printDocComment(JCTree tree) throws IOException {  String dc=getJavadocFor(tree);  if (dc == null)   return;  print("/**");  println();  int pos=0;  int endpos=lineEndPos(dc,pos);  boolean atStart=true;  while (pos < dc.length()) {    String line=dc.substring(pos,endpos);    if (line.trim().isEmpty() && atStart) {      atStart=false;      continue;    }    atStart=false;    align();    print(" *");    if (pos < dc.length() && dc.charAt(pos) > ' ')     print(" ");    print(dc.substring(pos,endpos));    println();    pos=endpos + 1;    endpos=lineEndPos(dc,pos);  }  align();  print(" */");  println();  align();}  }
class C{  public static Map<String,Object> prodGetFeatures(DispatchContext dctx,Map<String,? extends Object> context){  Delegator delegator=dctx.getDelegator();  Map<String,Object> result=FastMap.newInstance();  String productId=(String)context.get("productId");  String distinct=(String)context.get("distinct");  String type=(String)context.get("type");  Locale locale=(Locale)context.get("locale");  String errMsg=null;  List<GenericValue> features=null;  try {    Map<String,String> fields=UtilMisc.toMap("productId",productId);    if (distinct != null)     fields.put("productFeatureTypeId",distinct);    if (type != null)     fields.put("productFeatureApplTypeId",type);    features=EntityQuery.use(delegator).from("ProductFeatureAndAppl").where(fields).orderBy("sequenceNum","productFeatureTypeId").cache(true).queryList();    result.put("productFeatures",features);    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);  } catch (  GenericEntityException e) {    Map<String,String> messageMap=UtilMisc.toMap("errMessage",e.toString());    errMsg=UtilProperties.getMessage(resourceError,"productservices.problem_reading_product_feature_entity",messageMap,locale);    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);    result.put(ModelService.ERROR_MESSAGE,errMsg);  }  return result;}  }
class C{  public void continueCrawlJob(final String jobType){  final Object[] status=this.crawlJobsStatus.get(jobType);synchronized (status[SwitchboardConstants.CRAWLJOB_SYNC]) {    if (((Boolean)status[SwitchboardConstants.CRAWLJOB_STATUS]).booleanValue()) {      status[SwitchboardConstants.CRAWLJOB_STATUS]=Boolean.FALSE;      status[SwitchboardConstants.CRAWLJOB_SYNC].notifyAll();    }  }  setConfig(jobType + "_isPaused","false");}  }
class C{  public boolean equals(Object o){  if (o instanceof ALayoutConstraint)   return compareTo(o) == 0;  return false;}  }
class C{  public static org.oscm.internal.vo.VOUda convertToUp(org.oscm.vo.VOUda oldVO){  if (oldVO == null) {    return null;  }  org.oscm.internal.vo.VOUda newVO=new org.oscm.internal.vo.VOUda();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setUdaDefinition(convertToUp(oldVO.getUdaDefinition()));  newVO.setUdaValue(oldVO.getUdaValue());  newVO.setTargetObjectKey(oldVO.getTargetObjectKey());  return newVO;}  }
class C{  public cudaFuncAttributes(){}  }
class C{  public void calcTargetString(){  int whatToShow=getWhatToShow();switch (whatToShow) {case DTMFilter.SHOW_COMMENT:    m_targetString=PsuedoNames.PSEUDONAME_COMMENT;  break;case DTMFilter.SHOW_TEXT:case DTMFilter.SHOW_CDATA_SECTION:case (DTMFilter.SHOW_TEXT | DTMFilter.SHOW_CDATA_SECTION):m_targetString=PsuedoNames.PSEUDONAME_TEXT;break;case DTMFilter.SHOW_ALL:m_targetString=PsuedoNames.PSEUDONAME_ANY;break;case DTMFilter.SHOW_DOCUMENT:case DTMFilter.SHOW_DOCUMENT | DTMFilter.SHOW_DOCUMENT_FRAGMENT:m_targetString=PsuedoNames.PSEUDONAME_ROOT;break;case DTMFilter.SHOW_ELEMENT:if (this.WILD == m_name) m_targetString=PsuedoNames.PSEUDONAME_ANY; else m_targetString=m_name;break;default :m_targetString=PsuedoNames.PSEUDONAME_ANY;break;}}  }
class C{  public static <K,V>BiMap<K,V> constrainedBiMap(BiMap<K,V> map,MapConstraint<? super K,? super V> constraint){  return new ConstrainedBiMap<K,V>(map,null,constraint);}  }
class C{  public static void e(String msg,Throwable thr){  if (DEBUG)   android.util.Log.e(TAG,buildMessage(msg),thr);}  }
class C{  public void testFindIds(){  IRegion[] regions=ModelWriter.findIds(random + id + random2+ id+ random);  assertEquals(2,regions.length);  assertEquals(random.length(),regions[0].getOffset());  assertEquals(id.length(),regions[0].getLength());  assertEquals(random.length() + id.length() + random2.length(),regions[1].getOffset());}  }
class C{  @Override public boolean isActive(){  boolean result=false;  FacesContext facesContext=FacesContext.getCurrentInstance();  if (facesContext != null) {    UIViewRoot viewRoot=facesContext.getViewRoot();    if (viewRoot != null) {      result=true;    }  }  return result;}  }
class C{  public void emit(View emiter,int particlesPerSecond){  emitWithGravity(emiter,Gravity.CENTER,particlesPerSecond);}  }
class C{  public boolean isStrictMode(){  return strictMode;}  }
class C{  protected void checkParameters() throws BuildException {  if (this.moduleset.getModules().isEmpty() && this.files == null) {    throw new BuildException("You must specify a <module> and/or <files>");  }}  }
class C{  @Override public void run(){  amIActive=true;  boolean image1Bool=false;  boolean image2Bool=false;  double constant1=0;  double constant2=0;  if (args.length < 3) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader1=args[0];  File file=new File(inputHeader1);  image1Bool=file.exists();  if (image1Bool) {    constant1=-1;  } else {    constant1=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String inputHeader2=args[1];  file=new File(inputHeader2);  image2Bool=file.exists();  if (image2Bool) {    constant2=-1;  } else {    constant2=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    if (image1Bool && image2Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData1=inputFile1.getNoDataValue();      double noData2=inputFile2.getNoDataValue();      if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {        showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");        return;      }      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData1);      outputFile.setPreferredPalette(inputFile1.getPreferredPalette());      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          z2=data2[col];          if ((z1 != noData1) && (z2 != noData2)) {            outputFile.setValue(row,col,Math.min(z1,z2));          } else {            outputFile.setValue(row,col,noData1);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      inputFile2.close();      outputFile.close();    } else     if (image1Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData=inputFile1.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData);      outputFile.setPreferredPalette(inputFile1.getPreferredPalette());      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          if (z1 != noData) {            outputFile.setValue(row,col,Math.min(z1,constant2));          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      outputFile.close();    } else     if (image2Bool) {      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile2.getNumberRows();      int cols=inputFile2.getNumberColumns();      double noData=inputFile2.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader2,WhiteboxRaster.DataType.FLOAT,noData);      outputFile.setPreferredPalette(inputFile2.getPreferredPalette());      for (row=0; row < rows; row++) {        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z2=data2[col];          if (z2 != noData) {            outputFile.setValue(row,col,Math.min(constant1,z2));          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile2.close();      outputFile.close();    } else {      showFeedback("At least one of the inputs must be a raster image.");    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public Long hincrBy(final String key,final String field,final long value){  checkIsInMulti();  client.hincrBy(key,field,value);  return client.getIntegerReply();}  }
class C{  private Response act(final Request req,final Identity identity) throws IOException {  Request wrap=new RqWithoutHeader(req,this.header);  if (!identity.equals(Identity.ANONYMOUS)) {    wrap=new RqWithAuth(identity,this.header,wrap);  }  return this.pass.exit(this.origin.act(wrap),identity);}  }
class C{  public static CompiledMethod compile(CompilationPlan cp){  NormalMethod method=cp.method;  OptOptions options=cp.options;  checkSupported(method,options);  try {    printMethodMessage(method,options);    IR ir=cp.execute();    if (cp.analyzeOnly || cp.irGeneration) {      return null;    }    SpecializationDatabase.doDeferredSpecializations();    ir.compiledMethod.compileComplete(ir.MIRInfo.machinecode);    return ir.compiledMethod;  } catch (  OptimizingCompilerException e) {    throw e;  }catch (  Throwable e) {    fail(e,method);    return null;  }}  }
class C{  public void destroy(){  mTabStripTreeProvider.destroy();  mTabStripTreeProvider=null;}  }
class C{  public void mouseClicked(MouseEvent e){}  }
class C{  public CF5(){  this(10);}  }
class C{  public HBaseProjectionCriteria addColumnFamily(String columnFamily){  this.columnFamilies.add(columnFamily.getBytes());  return this;}  }
class C{  public static void exportReport(IReportRunnable design,Map<String,? extends Object> context,String contentType,OutputStream output) throws EngineException, GeneralException, SQLException {  Locale birtLocale=(Locale)context.get(BIRT_LOCALE);  String birtImageDirectory=(String)context.get(BIRT_IMAGE_DIRECTORY);  if (contentType == null) {    contentType="text/html";  }  if (birtImageDirectory == null) {    birtImageDirectory="/";  }  Debug.logInfo("Get report engine",module);  IReportEngine engine=BirtFactory.getReportEngine();  IRunAndRenderTask task=engine.createRunAndRenderTask(design);  if (birtLocale != null) {    Debug.logInfo("Set BIRT locale:" + birtLocale,module);    task.setLocale(birtLocale);  }  Map<String,Object> parameters=UtilGenerics.cast(context.get(BirtWorker.BIRT_PARAMETERS));  if (parameters != null) {    Debug.logInfo("Set BIRT parameters:" + parameters,module);    task.setParameterValues(parameters);  }  RenderOption options=new RenderOption();  if ("text/html".equalsIgnoreCase(contentType)) {    options.setOutputFormat(RenderOption.OUTPUT_FORMAT_HTML);    HTMLRenderOption htmlOptions=new HTMLRenderOption(options);    htmlOptions.setImageDirectory(birtImageDirectory);    htmlOptions.setBaseImageURL(birtImageDirectory);    options.setImageHandler(imageHandler);  } else   if ("application/postscript".equalsIgnoreCase(contentType)) {    options.setOutputFormat("postscript");  } else   if ("application/pdf".equalsIgnoreCase(contentType)) {    options.setOutputFormat(RenderOption.OUTPUT_FORMAT_PDF);    PDFRenderOption pdfOptions=new PDFRenderOption(options);    pdfOptions.setOption(IPDFRenderOption.PAGE_OVERFLOW,Boolean.TRUE);  } else   if ("application/vnd.ms-word".equalsIgnoreCase(contentType)) {    options.setOutputFormat("doc");  } else   if ("application/vnd.ms-excel".equalsIgnoreCase(contentType)) {    options.setOutputFormat("xls");    new EXCELRenderOption(options);  } else   if ("application/vnd.ms-powerpoint".equalsIgnoreCase(contentType)) {    options.setOutputFormat("ppt");  } else   if ("application/vnd.oasis.opendocument.text".equalsIgnoreCase(contentType)) {    options.setOutputFormat("odt");  } else   if ("application/vnd.oasis.opendocument.spreadsheet".equalsIgnoreCase(contentType)) {    options.setOutputFormat("ods");  } else   if ("application/vnd.oasis.opendocument.presentation".equalsIgnoreCase(contentType)) {    options.setOutputFormat("odp");  } else   if ("application/vnd.openxmlformats-officedocument.wordprocessingml.document".equalsIgnoreCase(contentType)) {    options.setOutputFormat("docx");  } else   if ("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet".equalsIgnoreCase(contentType)) {    options.setOutputFormat("xlsx");  } else   if ("application/vnd.openxmlformats-officedocument.presentationml.presentation".equalsIgnoreCase(contentType)) {    options.setOutputFormat("pptx");  } else {    throw new GeneralException("Unknown content type : " + contentType);  }  options.setOutputStream(output);  task.setRenderOption(options);  Debug.logInfo("BIRT's locale is: " + task.getLocale(),module);  Debug.logInfo("Run report's task",module);  task.run();  task.close();}  }
class C{  public Envelope boundary(){  Double[] boundary=new Double[4];  Double minLongtitude1=this.circleRDD.min((CircleXMinComparator)GeometryComparatorFactory.createComparator("circle","x","min")).getMBR().getMinX();  Double maxLongtitude1=this.circleRDD.max((CircleXMinComparator)GeometryComparatorFactory.createComparator("circle","x","min")).getMBR().getMinX();  Double minLatitude1=this.circleRDD.min((CircleYMinComparator)GeometryComparatorFactory.createComparator("circle","y","min")).getMBR().getMinY();  Double maxLatitude1=this.circleRDD.max((CircleYMinComparator)GeometryComparatorFactory.createComparator("circle","y","min")).getMBR().getMinY();  Double minLongtitude2=this.circleRDD.min((CircleXMaxComparator)GeometryComparatorFactory.createComparator("circle","x","max")).getMBR().getMaxX();  Double maxLongtitude2=this.circleRDD.max((CircleXMaxComparator)GeometryComparatorFactory.createComparator("circle","x","max")).getMBR().getMaxX();  Double minLatitude2=this.circleRDD.min((CircleYMaxComparator)GeometryComparatorFactory.createComparator("circle","y","max")).getMBR().getMaxY();  Double maxLatitude2=this.circleRDD.max((CircleYMaxComparator)GeometryComparatorFactory.createComparator("circle","y","max")).getMBR().getMaxY();  if (minLongtitude1 < minLongtitude2) {    boundary[0]=minLongtitude1;  } else {    boundary[0]=minLongtitude2;  }  if (minLatitude1 < minLatitude2) {    boundary[1]=minLatitude1;  } else {    boundary[1]=minLatitude2;  }  if (maxLongtitude1 > maxLongtitude2) {    boundary[2]=maxLongtitude1;  } else {    boundary[2]=maxLongtitude2;  }  if (maxLatitude1 > maxLatitude2) {    boundary[3]=maxLatitude1;  } else {    boundary[3]=maxLatitude2;  }  return new Envelope(boundary[0],boundary[2],boundary[1],boundary[3]);}  }
class C{  public boolean isInProcessed(){  return (collector().isInProcessed(getRuleName()));}  }
class C{  public BigIntegerPoint(String name,BigInteger... point){  super(name,pack(point),getType(point.length));}  }
class C{  public static Coordinate[] simplify(Coordinate[] inputLine,double distanceTol){  BufferInputLineSimplifier simp=new BufferInputLineSimplifier(inputLine);  return simp.simplify(distanceTol);}  }
class C{  public static Bitmap drawableToBitmap(Drawable drawable){  return drawable == null ? null : ((BitmapDrawable)drawable).getBitmap();}  }
class C{  @Override public void addRemove(EventBean[] newData,EventBean[] oldData){  if (InstrumentationHelper.ENABLED) {    InstrumentationHelper.get().qIndexAddRemove(this,newData,oldData);  }  if (oldData != null) {    for (    EventBean theEvent : oldData) {      remove(theEvent);    }  }  if (newData != null) {    for (    EventBean theEvent : newData) {      add(theEvent);    }  }  if (InstrumentationHelper.ENABLED) {    InstrumentationHelper.get().aIndexAddRemove();  }}  }
class C{  private int[] makeWorkingKey(byte[] key) throws IllegalArgumentException {  int[] kPad=new int[16];  int off=0;  int length=0;  for (off=key.length - 4; off > 0; off-=4) {    kPad[length++]=bytesToWord(key,off);  }  if (off == 0) {    kPad[length++]=bytesToWord(key,0);    if (length < 8) {      kPad[length]=1;    }  } else {    throw new IllegalArgumentException("key must be a multiple of 4 bytes");  }  int amount=(ROUNDS + 1) * 4;  int[] w=new int[amount];  for (int i=8; i < 16; i++) {    kPad[i]=rotateLeft(kPad[i - 8] ^ kPad[i - 5] ^ kPad[i - 3]^ kPad[i - 1]^ PHI^ (i - 8),11);  }  System.arraycopy(kPad,8,w,0,8);  for (int i=8; i < amount; i++) {    w[i]=rotateLeft(w[i - 8] ^ w[i - 5] ^ w[i - 3]^ w[i - 1]^ PHI^ i,11);  }  sb3(w[0],w[1],w[2],w[3]);  w[0]=X0;  w[1]=X1;  w[2]=X2;  w[3]=X3;  sb2(w[4],w[5],w[6],w[7]);  w[4]=X0;  w[5]=X1;  w[6]=X2;  w[7]=X3;  sb1(w[8],w[9],w[10],w[11]);  w[8]=X0;  w[9]=X1;  w[10]=X2;  w[11]=X3;  sb0(w[12],w[13],w[14],w[15]);  w[12]=X0;  w[13]=X1;  w[14]=X2;  w[15]=X3;  sb7(w[16],w[17],w[18],w[19]);  w[16]=X0;  w[17]=X1;  w[18]=X2;  w[19]=X3;  sb6(w[20],w[21],w[22],w[23]);  w[20]=X0;  w[21]=X1;  w[22]=X2;  w[23]=X3;  sb5(w[24],w[25],w[26],w[27]);  w[24]=X0;  w[25]=X1;  w[26]=X2;  w[27]=X3;  sb4(w[28],w[29],w[30],w[31]);  w[28]=X0;  w[29]=X1;  w[30]=X2;  w[31]=X3;  sb3(w[32],w[33],w[34],w[35]);  w[32]=X0;  w[33]=X1;  w[34]=X2;  w[35]=X3;  sb2(w[36],w[37],w[38],w[39]);  w[36]=X0;  w[37]=X1;  w[38]=X2;  w[39]=X3;  sb1(w[40],w[41],w[42],w[43]);  w[40]=X0;  w[41]=X1;  w[42]=X2;  w[43]=X3;  sb0(w[44],w[45],w[46],w[47]);  w[44]=X0;  w[45]=X1;  w[46]=X2;  w[47]=X3;  sb7(w[48],w[49],w[50],w[51]);  w[48]=X0;  w[49]=X1;  w[50]=X2;  w[51]=X3;  sb6(w[52],w[53],w[54],w[55]);  w[52]=X0;  w[53]=X1;  w[54]=X2;  w[55]=X3;  sb5(w[56],w[57],w[58],w[59]);  w[56]=X0;  w[57]=X1;  w[58]=X2;  w[59]=X3;  sb4(w[60],w[61],w[62],w[63]);  w[60]=X0;  w[61]=X1;  w[62]=X2;  w[63]=X3;  sb3(w[64],w[65],w[66],w[67]);  w[64]=X0;  w[65]=X1;  w[66]=X2;  w[67]=X3;  sb2(w[68],w[69],w[70],w[71]);  w[68]=X0;  w[69]=X1;  w[70]=X2;  w[71]=X3;  sb1(w[72],w[73],w[74],w[75]);  w[72]=X0;  w[73]=X1;  w[74]=X2;  w[75]=X3;  sb0(w[76],w[77],w[78],w[79]);  w[76]=X0;  w[77]=X1;  w[78]=X2;  w[79]=X3;  sb7(w[80],w[81],w[82],w[83]);  w[80]=X0;  w[81]=X1;  w[82]=X2;  w[83]=X3;  sb6(w[84],w[85],w[86],w[87]);  w[84]=X0;  w[85]=X1;  w[86]=X2;  w[87]=X3;  sb5(w[88],w[89],w[90],w[91]);  w[88]=X0;  w[89]=X1;  w[90]=X2;  w[91]=X3;  sb4(w[92],w[93],w[94],w[95]);  w[92]=X0;  w[93]=X1;  w[94]=X2;  w[95]=X3;  sb3(w[96],w[97],w[98],w[99]);  w[96]=X0;  w[97]=X1;  w[98]=X2;  w[99]=X3;  sb2(w[100],w[101],w[102],w[103]);  w[100]=X0;  w[101]=X1;  w[102]=X2;  w[103]=X3;  sb1(w[104],w[105],w[106],w[107]);  w[104]=X0;  w[105]=X1;  w[106]=X2;  w[107]=X3;  sb0(w[108],w[109],w[110],w[111]);  w[108]=X0;  w[109]=X1;  w[110]=X2;  w[111]=X3;  sb7(w[112],w[113],w[114],w[115]);  w[112]=X0;  w[113]=X1;  w[114]=X2;  w[115]=X3;  sb6(w[116],w[117],w[118],w[119]);  w[116]=X0;  w[117]=X1;  w[118]=X2;  w[119]=X3;  sb5(w[120],w[121],w[122],w[123]);  w[120]=X0;  w[121]=X1;  w[122]=X2;  w[123]=X3;  sb4(w[124],w[125],w[126],w[127]);  w[124]=X0;  w[125]=X1;  w[126]=X2;  w[127]=X3;  sb3(w[128],w[129],w[130],w[131]);  w[128]=X0;  w[129]=X1;  w[130]=X2;  w[131]=X3;  return w;}  }
class C{  public MutableInt(final Number value){  super();  this.value=value.intValue();}  }
class C{  protected void testDelete() throws Throwable {  Operation op=Operation.createDelete(URI.create(echoServiceUri));  testEchoOperation(op);}  }
class C{  private CLogConsoleFunctions(){}  }
class C{  public Distribution estimate(double min,double max){  return new UniformDistribution(min,max);}  }
class C{  public boolean isKeysValues(){  return this == KEYS_VALUES;}  }
class C{  @Override protected boolean isSwitchFor(EPackage ePackage){  return ePackage == modelPackage;}  }
class C{  public static boolean regexMatch(String input,String regex){  return Pattern.compile(regex).matcher(input).matches();}  }
class C{  protected boolean isAllowedToDequeueOneToOneFileTransfer(ContactId contact,FileTransferServiceImpl fileTransferService){  if (fileTransferService.getFileTransferProtocolForOneToOneFileTransfer(contact) == null) {    if (mLogger.isActivated()) {      mLogger.debug(new StringBuilder("Cannot dequeue one-to-one file transfer right now as there are no enough capabilities for remote contact '").append(contact).append("'").toString());    }    return false;  }  return isAllowedToDequeueFileTransfer();}  }
class C{  public Boolean isTempInd(){  return tempInd;}  }
class C{  public static void createAllTables(SQLiteDatabase db,boolean ifNotExists){  BabyModelDao.createTable(db,ifNotExists);}  }
class C{  public InlineQueryResultLocation.InlineQueryResultLocationBuilder replyMarkup(InlineReplyMarkup replyMarkup){  this.reply_markup=replyMarkup;  return this;}  }
class C{  public PeekableCSVReader(Reader reader,char delimiter,char quote,int skip){  super(reader,delimiter,quote,skip);  try {    nextLine=super.readNext();  } catch (  IOException e) {    e.printStackTrace();    nextLine=null;  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:19.733 -0500",hash_original_method="27D599105D57C8AB9F99EAD7FE1A52D5",hash_generated_method="BB72AFB78DC5B83CD5729BB0D882B6D0") private Network(Context context){  if (DebugFlags.NETWORK) {    Assert.assertTrue(Thread.currentThread().getName().equals(WebViewCore.THREAD_NAME));  }  mContext=context;  mSslErrorHandler=new SslErrorHandlerImpl();  mHttpAuthHandler=new HttpAuthHandlerImpl(this);  mRequestQueue=new RequestQueue(context);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.604 -0400",hash_original_method="B917B9DB396BA061BB753C77FE6102E8",hash_generated_method="0433934F6E6E38AFB49A416A5F621EC5") public NameFileFilter(List<String> names,IOCase caseSensitivity){  if (names == null) {    throw new IllegalArgumentException("The list of names must not be null");  }  this.names=names.toArray(new String[names.size()]);  this.caseSensitivity=caseSensitivity == null ? IOCase.SENSITIVE : caseSensitivity;}  }
class C{  public DoubleMatrix1D descending(int size){  DoubleMatrix1D matrix=make(size);  int v=0;  for (int i=size; --i >= 0; ) {    matrix.setQuick(i,v++);  }  return matrix;}  }
class C{  public InlineQueryResultCachedAudio.InlineQueryResultCachedAudioBuilder caption(String caption){  this.caption=caption;  return this;}  }
class C{  public boolean isNullable(){  return m_isNullable;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected String streamAsset(HttpServletRequest request,HttpServletResponse response){  int A_Asset_ID=WebUtil.getParameterAsInt(request,"Asset_ID");  if (A_Asset_ID == 0) {    log.fine("No ID)");    return "No Asset ID";  }  byte[] assetInfo=String.valueOf(A_Asset_ID).getBytes();  Properties ctx=JSPEnv.getCtx(request);  HttpSession session=request.getSession(true);  WebEnv.dump(request);  MAsset asset=new MAsset(ctx,A_Asset_ID,null);  if (asset.getA_Asset_ID() != A_Asset_ID) {    log.fine("Asset not found - ID=" + A_Asset_ID);    return "Asset not found";  }  WebUser wu=(WebUser)session.getAttribute(WebUser.NAME);  if (wu.getC_BPartner_ID() != asset.getC_BPartner_ID()) {    log.warning("A_Asset_ID=" + A_Asset_ID + " - BP_Invoice="+ asset.getC_BPartner_ID()+ " <> BP_User="+ wu.getC_BPartner_ID());    return "Your asset not found";  }  if (!asset.isDownloadable() || wu.isCreditStopHold() || !wu.isEMailVerified())   return "Asset not downloadable";  String pd=WebUtil.getParameter(request,"PD");  String dl_name=null;  String dl_url=null;  InputStream in=null;  int M_ProductDownload_ID=0;  if (pd != null && pd.length() > 0) {    MProductDownload[] pdls=asset.getProductDownloads();    if (pdls != null) {      for (int i=0; i < pdls.length; i++) {        if (pdls[i].getDownloadURL().indexOf(pd) != -1) {          M_ProductDownload_ID=pdls[i].getM_ProductDownload_ID();          dl_name=pd;          dl_url=pdls[i].getDownloadURL();          in=pdls[i].getDownloadStream(ctx.getProperty(WebSessionCtx.CTX_DOCUMENT_DIR));          break;        }      }    }  }  log.fine(dl_name + " - " + dl_url);  if (dl_name == null || dl_url == null || in == null)   return "@NotFound@ @A_Asset_ID@: " + pd;  String lot=asset.getLot();  if (lot == null || lot.length() == 0)   lot=".";  String ser=asset.getSerNo();  if (ser == null || ser.length() == 0)   ser=".";  Object[] args=new Object[]{dl_name,wu.getName() + " - " + wu.getEmail(),asset.getVersionNo(),lot,ser,asset.getGuaranteeDate()};  String readme=Msg.getMsg(ctx,"AssetDeliveryTemplate",args);  MAssetDelivery ad=confirmDelivery(asset,request,wu.getAD_User_ID());  if (M_ProductDownload_ID != 0)   ad.setM_ProductDownload_ID(M_ProductDownload_ID);  ad.setDescription(dl_name);  float speed=0;  try {    response.setContentType("application/zip");    response.setHeader("Content-Location","asset.zip");    int bufferSize=2048;    response.setBufferSize(bufferSize);    log.fine(in + ", available=" + in.available());    long time=System.currentTimeMillis();    ServletOutputStream out=response.getOutputStream();    ZipOutputStream zip=new ZipOutputStream(out);    zip.setMethod(ZipOutputStream.DEFLATED);    zip.setLevel(Deflater.BEST_COMPRESSION);    zip.setComment(readme);    ZipEntry entry=new ZipEntry("readme.txt");    entry.setExtra(assetInfo);    zip.putNextEntry(entry);    zip.write(readme.getBytes(),0,readme.length());    zip.closeEntry();    entry=new ZipEntry(dl_name);    entry.setExtra(assetInfo);    zip.putNextEntry(entry);    byte[] buffer=new byte[bufferSize];    int count=0;    int totalSize=0;    do {      count=in.read(buffer,0,bufferSize);      if (count > 0) {        totalSize+=count;        zip.write(buffer,0,count);      }    } while (count != -1);    zip.closeEntry();    zip.finish();    zip.close();    in.close();    time=System.currentTimeMillis() - time;    speed=((float)totalSize / 1024) / ((float)time / 1000);    String msg=(totalSize / 1024) + "kB - " + time+ " ms - "+ speed+ " kB/sec";    log.fine(msg);    ad.setDeliveryConfirmation(msg);    ad.saveEx();    asset.saveEx();  } catch (  IOException ex) {    String msg=ex.getMessage();    if (msg == null || msg.length() == 0)     msg=ex.toString();    log.warning(msg);    try {      if (msg.length() > 120)       msg=msg.substring(0,119);      ad.setDeliveryConfirmation(msg);      ad.save();    } catch (    Exception ex1) {      log.log(Level.SEVERE,"2 - " + ex);    }    return "** Streaming error; Please Retry";  }  return null;}  }
class C{  public CScriptingDialog(final Frame owner,final String defaultLanguage,final PluginInterface pluginInterface){  this(owner,defaultLanguage,pluginInterface,new HashMap<String,Object>());}  }
class C{  public void loadAskFriend(){  final Intent askFriendActivity=new Intent(getActivity(),AskFriendActivity.class);  askFriendActivity.putExtra(AppConstants.Keys.WALL_ID,mWallId);  askFriendActivity.putExtra(AppConstants.Keys.FROM_WALL,true);  startActivity(askFriendActivity);}  }
class C{  public void replacePathForRenamedFolder(Path oldPath,Path newPath){  String p=getPathNIO().toAbsolutePath().toString();  p=p.replace(oldPath.toAbsolutePath().toString(),newPath.toAbsolutePath().toString());  setPath(p);}  }
class C{  public void compose(StylesheetRoot sroot) throws TransformerException {  super.compose(sroot);  StylesheetRoot.ComposeState cstate=sroot.getComposeState();  java.util.Vector vnames=cstate.getVariableNames();  if (null != m_avts) {    int nAttrs=m_avts.size();    for (int i=(nAttrs - 1); i >= 0; i--) {      AVT avt=(AVT)m_avts.get(i);      avt.fixupVariables(vnames,cstate.getGlobalsSize());    }  }}  }
class C{  private void makeAndAddView(int position,float angleOffset){  CarouselItemImage child;  if (!mDataChanged) {    child=(CarouselItemImage)mRecycler.get(position);    if (child != null) {      setUpChild(child,child.getIndex(),angleOffset);    } else {      child=(CarouselItemImage)mAdapter.getView(position,null,this);      setUpChild(child,child.getIndex(),angleOffset);    }    return;  }  child=(CarouselItemImage)mAdapter.getView(position,null,this);  setUpChild(child,child.getIndex(),angleOffset);}  }
class C{  public void testEquals() throws IOException {  int numdocs=atLeast(100);  createRandomIndex(numdocs,leftWriter,seed);  createRandomIndex(numdocs,rightWriter,seed);  leftReader=leftWriter.getReader();  rightReader=rightWriter.getReader();  assertReaderEquals(info,leftReader,rightReader);}  }
class C{  public FontToolBar(){  ResourceBundleUtil labels=ResourceBundleUtil.getBundle("org.jhotdraw.samples.svg.Labels");  setName(labels.getString("font.toolbar"));  JFontChooser.loadAllFonts();  setDisclosureStateCount(3);}  }
class C{  public void handleMessage(String message){  log.debug("MT handleMessage: " + message);  List<String> unit=Arrays.asList(message.substring(1).split("<;>"));  String key=unit.get(0);  String action=unit.get(1);  if ((key == null) || (action == null)) {    return;  }switch (message.charAt(0)) {case 'A':{      passActionsToControllers(key,action);      break;    }case '+':{    addThrottleController(key,action);    break;  }case '-':{  removeThrottleController(key,action);  break;}}}  }
class C{  public static boolean haveAccessibility(){  return accessibility;}  }
class C{  public boolean optBoolean(int index,boolean defaultValue){  try {    return getBoolean(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public static void compute_first_sets() throws internal_error {  boolean change=true;  Enumeration n;  Enumeration p;  non_terminal nt;  production prod;  terminal_set prod_first;  while (change) {    change=false;    for (n=all(); n.hasMoreElements(); ) {      nt=(non_terminal)n.nextElement();      for (p=nt.productions(); p.hasMoreElements(); ) {        prod=(production)p.nextElement();        prod_first=prod.check_first_set();        if (!prod_first.is_subset_of(nt._first_set)) {          change=true;          nt._first_set.add(prod_first);        }      }    }  }}  }
class C{  @CheckResult @Nullable public static IconFontDescriptorWrapper findTypefaceOf(@NonNull Icon icon){  for (  IconFontDescriptorWrapper iconFontDescriptor : iconFontDescriptors) {    if (iconFontDescriptor.hasIcon(icon)) {      return iconFontDescriptor;    }  }  return null;}  }
class C{  public static void delete(String pref){  get().remove(pref);  save();}  }
class C{  public void downloadDocument(String resourceId,String filepath,String format) throws IOException, MalformedURLException, ServiceException, DocumentListException {  if (resourceId == null || filepath == null || format == null) {    throw new DocumentListException("null passed in for required parameters");  }  String[] parameters={"docID=" + resourceId,"exportFormat=" + format};  URL url=buildUrl(URL_DOWNLOAD + "/documents" + URL_CATEGORY_EXPORT,parameters);  downloadFile(url,filepath);}  }
class C{  public void destroy(){  log.info("destroy called");  destroyActual();  Log.resetAll();}  }
class C{  String seq(final String[] split,final boolean match){  if (split.length < 5) {    return "Sequence line has incorrect number of fields.";  }  final String name=split[2].trim();  if ("".equals(name) || name.contains(" ")) {    return "Invalid sequence name:" + name;  }  if (!mNames.containsKey(name)) {    return "Sequence in reference file:" + name + " not found in genome.";  }  final String ploidyString=split[3];  final Ploidy ploidy=getPloidy(ploidyString);  if (ploidy == null) {    return "Invalid ploidy value:" + ploidyString;  }  final String linearString=split[4];  final Boolean linear=linear(linearString);  if (linear == null) {    return "Invalid linear/circular value:" + linearString;  }  final String hapMate;  if ((ploidy == Ploidy.HAPLOID) && (split.length == 6)) {    hapMate=split[5].trim();    if ("".equals(hapMate) || hapMate.contains(" ")) {      return "Invalid haploid mate sequence name:" + hapMate;    }    if (!mNames.containsKey(hapMate)) {      return "Haploid mate sequence in reference file:" + hapMate + " not found in genome.";    }  } else   if (split.length > 5) {    return "Sequence line has incorrect number of fields.";  } else {    hapMate=null;  }  if (match) {    if (mReferences.containsKey(name)) {      return "Sequence defined twice:" + name;    }    mReferences.put(name,new ReferenceSequence(true,linear,ploidy,name,hapMate,mNames.get(name)));  }  return null;}  }
class C{  public void registerSensor(Sensor s,int i){  if ((i < 0) || (i > (inputBytes[nodeType] * 8 - 1)) || (i > MAXSENSORS)) {    log.error("Unexpected sensor ordinal in registerSensor: " + Integer.toString(i + 1));    return;  }  hasActiveSensors=true;  if (sensorArray[i] == null) {    sensorArray[i]=s;    if (lastUsedSensor < i) {      lastUsedSensor=i;    }  } else {    log.warn("multiple registration of same sensor: CS" + Integer.toString((getNodeAddress() * SerialSensorManager.SENSORSPERNODE) + i + 1));  }}  }
class C{  protected boolean isSearchMatch(Interval interval){  return true;}  }
class C{  protected int[] computePixels(byte[] bits){  if (DEBUG) {    logger.fine("OMRaster.compute pixels!");  }  if (colorModel != COLORMODEL_INDEXED) {    return new int[0];  }  if (colors == null || colors.length == 0 || bits == null || bits.length == 0) {    logger.fine("OMRaster: attempting to compute pixels without color table or proper indexes!");    return null;  }  int nPixels=width * height;  if (DEBUG) {    logger.fine("Computing pixels for image size:" + width + ", "+ height);  }  int[] iPixels=new int[nPixels];  int alpha=(transparent << 24) & 0xff000000;  int numColors=colors.length;  int bitsLength=bits.length;  for (int i=0; i < bitsLength && i < nPixels; i++) {    byte b=bits[i];    int color=0;    if (b < 0) {      color=colors[MoreMath.signedToInt(b)];    } else     if (b < numColors) {      color=colors[b];    }    if (transparent < 255 && ((color >> 24) > transparent)) {      color=alpha | (0x00FFFFFF & color);    }    iPixels[i]=color;  }  return iPixels;}  }
class C{  private BaseType instantiateType(final String name,final int size,final boolean signed,final BaseType childPointer,final BaseTypeCategory category) throws CouldntSaveDataException {  final BaseType baseType=backend.createType(name,size,signed,childPointer == null ? null : childPointer.getId(),category);  if (childPointer != null) {    BaseType.appendToPointerHierarchy(childPointer,baseType);  }  typesContainer.addBaseType(baseType);  return baseType;}  }
class C{  public PartitionPack(ByteProvider byteProvider) throws IOException {  this(byteProvider,UNKNOWN_BYTE_OFFSET,false);}  }
class C{  protected void after(){}  }
class C{  public CGotoAddressInputField(){  super(new CHexFormatter(16));}  }
class C{  public AnnotationVisitor visitAnnotation(String name,String desc){  if (av != null) {    return av.visitAnnotation(name,desc);  }  return null;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  java.io.File f=getFile(stack);  MediaFile mf=getMediaFile(stack);  if (mf != null)   mf.copyToLocalStorage(f);  return null;}  }
class C{  public PrivacyItem(String type,boolean allow,int order){  this.setRule(PrivacyRule.fromString(type));  this.setAllow(allow);  this.setOrder(order);}  }
class C{  public WeightVector(float[] in){  u=new float[in.length];  System.arraycopy(in,0,u,0,in.length);  size=in.length;}  }
class C{  public void show(){  JLabel label=new JLabel(new ImageIcon(this.image));  JFrame f=new JFrame();  f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  f.getContentPane().add(label);  f.pack();  f.setVisible(true);}  }
class C{  public int invalidateAll(){  int deleted=this.pmap.size();  for (  String key : keys())   invalidate(key);  return deleted;}  }
class C{  private NmraPacket(){}  }
class C{  public void Gen_populate(android.database.Cursor cursor,int[] columnIndices){  if (columnIndices[GEN_ID__ID] >= 0 && !cursor.isNull(columnIndices[GEN_ID__ID])) {    gen__Id=cursor.getLong(columnIndices[GEN_ID__ID]);  }  if (columnIndices[GEN_ID_CONNECTION_ID] >= 0 && !cursor.isNull(columnIndices[GEN_ID_CONNECTION_ID])) {    gen_CONNECTION_ID=cursor.getLong(columnIndices[GEN_ID_CONNECTION_ID]);  }  if (columnIndices[GEN_ID_SHOW_SPLASH_VERSION] >= 0 && !cursor.isNull(columnIndices[GEN_ID_SHOW_SPLASH_VERSION])) {    gen_SHOW_SPLASH_VERSION=cursor.getLong(columnIndices[GEN_ID_SHOW_SPLASH_VERSION]);  }  if (columnIndices[GEN_ID_TEXT_INDEX] >= 0 && !cursor.isNull(columnIndices[GEN_ID_TEXT_INDEX])) {    gen_TEXT_INDEX=cursor.getLong(columnIndices[GEN_ID_TEXT_INDEX]);  }}  }
class C{  public void dismissView(){  if (mView != null) {    mView.dismiss();  }}  }
class C{  @SuppressWarnings("rawtypes") public static Map<String,String> parseKeyAndValueToMap(JSONObject sourceObj){  if (sourceObj == null) {    return null;  }  Map<String,String> keyAndValueMap=new HashMap<String,String>();  for (Iterator iter=sourceObj.keys(); iter.hasNext(); ) {    String key=(String)iter.next();    keyAndValueMap.put(key,getString(sourceObj,key,""));  }  return keyAndValueMap;}  }
class C{  @Override protected String replaceImageUrl(final String cssUri,final String imageUrl){  Validate.notNull(uriLocatorFactory);  LOG.debug("replace url for image: {} from css: {}",imageUrl,cssUri);  final String cleanImageUrl=cleanImageUrl(imageUrl);  final String fileName=FilenameUtils.getName(imageUrl);  String fullPath=cleanImageUrl;  if (isImageUrlChangeRequired(cleanImageUrl)) {    fullPath=WroUtil.getFullPath(cssUri) + cleanImageUrl;  }  String result=imageUrl;  InputStream is=null;  try {    is=uriLocatorFactory.locate(fullPath);    final String dataUri=getDataUriGenerator().generateDataURI(is,fileName);    if (isReplaceAccepted(dataUri)) {      result=dataUri;      LOG.debug("dataUri replacement: {}",StringUtils.abbreviate(dataUri,30));    }  } catch (  final IOException e) {    LOG.warn("[FAIL] extract dataUri from: {}, because: {}. " + "A possible cause: using CssUrlRewritingProcessor before CssDataUriPreProcessor.",fullPath,e.getMessage());  } finally {    IOUtils.closeQuietly(is);  }  return result;}  }
class C{  private Node tryAppend(Node s,boolean haveData){  for (Node t=tail, p=t; ; ) {    Node n, u;    if (p == null && (p=head) == null) {      if (casHead(null,s))       return s;    } else     if (p.cannotPrecede(haveData))     return null; else     if ((n=p.next) != null)     p=p != t && t != (u=tail) ? (t=u) : (p != n) ? n : null; else     if (!p.casNext(null,s))     p=p.next; else {      if (p != t) {        while ((tail != t || !casTail(t,s)) && (t=tail) != null && (s=t.next) != null && (s=s.next) != null && s != t)         ;      }      return p;    }  }}  }
class C{  private void createRasterizerTextures(){  this.positionTexture=glGenTextures();  glBindTexture(GL_TEXTURE_2D,positionTexture);  glTexStorage2D(GL_TEXTURE_2D,1,GL_RGBA32F,width,height);  glBindTexture(GL_TEXTURE_2D,0);  this.normalTexture=glGenTextures();  glBindTexture(GL_TEXTURE_2D,normalTexture);  glTexStorage2D(GL_TEXTURE_2D,1,GL_RGBA16F,width,height);  glBindTexture(GL_TEXTURE_2D,0);}  }
class C{  private void updateSizeSpinner(Product product,ProductColor productColor){  if (product != null) {    ArrayList<ProductVariant> variantSizeArrayList=new ArrayList<>();    for (    ProductVariant pv : product.getVariants()) {      if (pv.getColor().equals(productColor)) {        variantSizeArrayList.add(pv);      }    }    CartSizeSpinnerAdapter adapterSize=new CartSizeSpinnerAdapter(getActivity(),variantSizeArrayList);    itemSizesSpinner.setAdapter(adapterSize);    if (!variantSizeArrayList.isEmpty()) {      int sizeSelection=0;      for (int i=0; i < variantSizeArrayList.size(); i++) {        if (variantSizeArrayList.get(i).getId() == cartProductItem.getVariant().getId()) {          sizeSelection=i;        }      }      itemSizesSpinner.setSelection(sizeSelection);    }  } else {    Timber.e("UpdateImagesAndSizeSpinner with null product.");  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static <T,A>ReaderTValue<T,A> fromAnyM(final AnyMValue<Function<T,A>> anyM){  return of(anyM.map(null));}  }
class C{  public void addMergeNode(int taxonId,int mergeId){  addNode(mergeId,taxonId,MERGE_NAME,MERGE_RANK);}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  public boolean isAllowedToSendMessage() throws RcsPersistentStorageException, RcsGenericException {  try {    return mOneToOneChatInf.isAllowedToSendMessage();  } catch (  Exception e) {    RcsPersistentStorageException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  private void visitImplicitFirstFrame(){  int frameIndex=startFrame(0,descriptor.length() + 1,0);  if ((access & Opcodes.ACC_STATIC) == 0) {    if ((access & ACC_CONSTRUCTOR) == 0) {      frame[frameIndex++]=Frame.OBJECT | cw.addType(cw.thisName);    } else {      frame[frameIndex++]=6;    }  }  int i=1;  loop:   while (true) {    int j=i;switch (descriptor.charAt(i++)) {case 'Z':case 'C':case 'B':case 'S':case 'I':      frame[frameIndex++]=1;    break;case 'F':  frame[frameIndex++]=2;break;case 'J':frame[frameIndex++]=4;break;case 'D':frame[frameIndex++]=3;break;case '[':while (descriptor.charAt(i) == '[') {++i;}if (descriptor.charAt(i) == 'L') {++i;while (descriptor.charAt(i) != ';') {++i;}}frame[frameIndex++]=Frame.OBJECT | cw.addType(descriptor.substring(j,++i));break;case 'L':while (descriptor.charAt(i) != ';') {++i;}frame[frameIndex++]=Frame.OBJECT | cw.addType(descriptor.substring(j + 1,i++));break;default :break loop;}}frame[1]=frameIndex - 3;endFrame();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private void init(){  if (!initGuard.compareAndSet(false,true))   return;  String sysPropZkConnString=System.getProperty(PROP_ZK_CONNECTION_STRING);  if (sysPropZkConnString != null && sysPropZkConnString.trim().length() > 0)   zkConnectionString=sysPropZkConnString;  if (log.isInfoEnabled())   log.info("Initializing ZooKeeper IP Finder.");  if (curator == null) {    A.notNullOrEmpty(zkConnectionString,String.format("ZooKeeper URL (or system property %s) cannot be null " + "or empty if a CuratorFramework object is not provided explicitly",PROP_ZK_CONNECTION_STRING));    curator=CuratorFrameworkFactory.newClient(zkConnectionString,retryPolicy);  }  if (curator.getState() == CuratorFrameworkState.LATENT)   curator.start();  A.ensure(curator.getState() == CuratorFrameworkState.STARTED,"CuratorFramework can't be started.");  discovery=ServiceDiscoveryBuilder.builder(IgniteInstanceDetails.class).client(curator).basePath(basePath).serializer(new JsonInstanceSerializer<>(IgniteInstanceDetails.class)).build();}  }
class C{  private void createKeyValueAssignment(String line,int lineNr){  String[] split=line.split("=");  if (split.length == 1) {    split=new String[]{split[0],""};  }  if (split[0].matches(PlotConstants.KEY_INT_GRID_WIDTH)) {    parserResult.addPlotGridValue(split[0],new KeyValue(split[0],split[1],lineNr));  } else {    tempPlotValuesCache.put(split[0],new KeyValue(split[0],split[1],lineNr));  }}  }
class C{  public static ThreadSafeValue wrap(Object syncObj,Value val){  if (val != null)   return new ThreadSafeValue(syncObj,val); else   return null;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void checkIfActionIsDisplayed(String action){  onView(withId(R.id.input_gesture_content)).check(matches(withText(endsWith(action + "\n"))));}  }
class C{  private int deleteAllContacts(Iterator<String> contactsIter){  int totalContactsDeleted=0;  while (contactsIter.hasNext())   totalContactsDeleted+=deleteContact(contactsIter.next());  return totalContactsDeleted;}  }
class C{  public Iterator<K> keyIterator(){  return refSet.keySet().iterator();}  }
class C{  private int messageConvertReturnValue(String messageText,int defaultReturnCode){  int i=0;  for (  String workText : messageTextException) {    if (workText == null) {      return defaultReturnCode;    }    final int workTextLength=workText.length();    if (messageText.regionMatches(0,workText,0,workTextLength)) {      return returnValueException[i];    }    i++;  }  return defaultReturnCode;}  }
class C{  private void prepareProjectData() throws Exception {  TenantOrg tenantOrg=new TenantOrg();  URI tenantOrgURI=URIUtil.createId(TenantOrg.class);  tenantOrg.setId(tenantOrgURI);  _dbClient.createObject(tenantOrg);  Project proj=new Project();  projectURI=URIUtil.createId(Project.class);  String projectLabel="project";  proj.setId(projectURI);  proj.setLabel(projectLabel);  proj.setTenantOrg(new NamedURI(tenantOrgURI,projectLabel));  _dbClient.createObject(proj);}  }
class C{  public boolean isShowYAxisValues(){  return showYAxisValues;}  }
class C{  @RequestMapping(method=RequestMethod.GET) public ResultVO all(@And({@Spec(path="name",spec=Like.class),@Spec(path="validFlag",constVal="VALID",spec=In.class),@Spec(path="createdDate",params={"createdDateAfter, createdDateBefore"},spec=DateBetween.class)}) Specification<Role> roleSpecification,RoleParam param){  try {    if (param.getPageNo() == null) {      return resultHelper.successResp(roleDomain.getAll(roleSpecification,QueryHelper.getSort(param.getSortBy()),RoleVO.class));    }    return resultHelper.successResp(roleDomain.getPage(roleSpecification,QueryHelper.getPageRequest(param),RoleVO.class));  } catch (  CommonsException e) {    return resultHelper.infoResp(logger,e.getErrorType(),e.getMessage());  }catch (  Exception e) {    return resultHelper.errorResp(logger,e,ErrorType.UNKNOWN,e.getMessage());  }}  }
class C{  public synchronized boolean isIdle(){  return idleStartTimeNs != 0L;}  }
class C{  public ContainerSchedulerTimeSharedOverSubscription(List<? extends ContainerPe> pelist){  super(pelist);}  }
class C{  public static CourseUnitEmptyFragment newInstance(CourseComponent unit){  CourseUnitEmptyFragment f=new CourseUnitEmptyFragment();  Bundle args=new Bundle();  args.putSerializable(Router.EXTRA_COURSE_UNIT,unit);  f.setArguments(args);  return f;}  }
class C{  public static int nextOid(long[] index,int start) throws SnmpStatusException {  try {    if (index[start] > Integer.MAX_VALUE) {      throw new SnmpStatusException(SnmpStatusException.noSuchName);    }    int strLen=(int)index[start++];    start+=strLen;    if (start <= index.length) {      return start;    } else {      throw new SnmpStatusException(SnmpStatusException.noSuchName);    }  } catch (  IndexOutOfBoundsException e) {    throw new SnmpStatusException(SnmpStatusException.noSuchName);  }}  }
class C{  public boolean hasSet(String name){  return m_map.containsKey(name);}  }
class C{  private void checkAndSync(InternalApiSignatureKeyGenerator apiSignatureGenerator,KeyStore keystore){  String shortId=vdcInfo.getProperty(GeoServiceJob.VDC_SHORT_ID);  String vdcName=vdcInfo.getProperty(GeoServiceJob.VDC_NAME);  lockHelper.acquire(shortId);  log.info("Acquired global lock, go on with connect vdc");  geoClientCache.clearCache();  loadVdcInfo();  preSteps();  persistVdcCert(vdcName,vdcInfo.getProperty(GeoServiceJob.VDC_CERTIFICATE_CHAIN),true,shortId);  VdcPreCheckResponse operatedVdcInfo=preCheck();  try {    _permissionHelper.removeRootRoleAssignmentOnTenantAndProject();  } catch (  DatabaseException dbe) {    throw GeoException.fatals.connectVdcRemoveRootRolesFailed(dbe);  }  String currentVdcIpsecKey=ipsecConfig.getPreSharedKeyFromZK();  URI newVdcId=URIUtil.uri(vdcInfo.getProperty(GeoServiceJob.OPERATED_VDC_ID));  GeoServiceHelper.backupOperationVdc(dbClient,JobType.VDC_CONNECT_JOB,newVdcId,null);  VirtualDataCenter newVdc=GeoServiceHelper.prepareVirtualDataCenter(newVdcId,VirtualDataCenter.ConnectionStatus.CONNECTING,VirtualDataCenter.GeoReplicationStatus.REP_NONE,vdcInfo);  dbClient.createObject(newVdc);  helper.createVdcConfigInZk(mergeVdcInfo(operatedVdcInfo),currentVdcIpsecKey);  persistVdcCert(newVdc.getId().toString(),newVdc.getCertificateChain(),true,shortId);  removeVdcCert(vdcName,shortId);  toBeSyncedVdc.add(newVdc);  allVdc.add(newVdc);  connectedVdc.add(newVdc);  VdcUtil.invalidateVdcUrnCache();  operatedVdc=newVdc;  VdcCertListParam certListParam=genCertListParam(VdcCertListParam.CMD_ADD_CERT);  failedVdcStatus=ConnectionStatus.CONNECT_FAILED;  syncCerts(VdcCertListParam.CMD_ADD_CERT,certListParam);  VdcConfigSyncParam mergedVdcInfo=configMerge(operatedVdcInfo,currentVdcIpsecKey);  if (mergedVdcInfo == null) {    log.error("merge the vdc config of all sites failed");    throw GeoException.fatals.mergeConfigFail();  }  try {    configSync(mergedVdcInfo);  } catch (  GeoException ex) {    throw ex;  }catch (  Exception e) {    log.error("Failed to sync vdc config to all sites e=",e);    throw GeoException.fatals.syncConfigFail(e);  }}  }
class C{  public void addDivider(ImageView v){  RelativeLayout.LayoutParams dividerParams=new RelativeLayout.LayoutParams(LayoutParams.FILL_PARENT,LayoutParams.WRAP_CONTENT);  if (mImageView != null) {    dividerParams.addRule(RelativeLayout.BELOW,mImageView.getId());  } else   if (mMissingImage != null) {    dividerParams.addRule(RelativeLayout.BELOW,mMissingImage.getId());  } else   if (mVideoButton != null) {    dividerParams.addRule(RelativeLayout.BELOW,mVideoButton.getId());  } else   if (mAudioButton != null) {    dividerParams.addRule(RelativeLayout.BELOW,mAudioButton.getId());  } else   if (mView_Text != null) {    dividerParams.addRule(RelativeLayout.BELOW,mView_Text.getId());  } else {    Log.e(t,"Tried to add divider to uninitialized ATVWidget");    return;  }  addView(v,dividerParams);}  }
class C{  public void updateCurrentTimestamp(){  currentTimeMillis=clock.currentTimeMillis();  currentTime.setMillis(currentTimeMillis);  currentTimestamp.setLength(0);  FIXTimestamps.append(currentTime,currentTimestamp);}  }
class C{  public java.lang.StringBuffer insert(int offset,float f){  internal.insert(offset,f);  return this;}  }
class C{  @Override public void intercept(final IHttpRequest request){  mLogger.logDebug("Intercepting request, " + request.getRequestUrl());  for (  final HeaderOption option : request.getHeaders()) {    if (option.getName().equals(AUTHORIZATION_HEADER_NAME)) {      mLogger.logDebug("Found an existing authorization header!");      return;    }  }  if (mAuthenticator.getAccountInfo() != null) {    mLogger.logDebug("Found account information");    if (mAuthenticator.getAccountInfo().isExpired()) {      mLogger.logDebug("Account access token is expired, refreshing");      mAuthenticator.getAccountInfo().refresh();    }    final String accessToken=mAuthenticator.getAccountInfo().getAccessToken();    request.addHeader(AUTHORIZATION_HEADER_NAME,OAUTH_BEARER_PREFIX + accessToken);  } else {    mLogger.logDebug("No active account found, skipping writing auth header");  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public N4mfAdapterFactory(){  if (modelPackage == null) {    modelPackage=N4mfPackage.eINSTANCE;  }}  }
class C{  public final void testGetPrivate02() throws InvalidKeySpecException {  PrivateKey pk=TestKeyPair.getPrivate();  KeyPair kp=new KeyPair(null,pk);  assertSame(pk,kp.getPrivate());}  }
class C{  @Override public String toString(){  final StringBuilder sb=new StringBuilder();  final String thisSimpleName=this.getClass().getSimpleName();  sb.append(LS);  sb.append("### ").append(thisSimpleName).append(" SUMMARY: ").append(LS);  sb.append("   k            : ").append(reservoirSize_).append(LS);  sb.append("   n            : ").append(itemsSeen_).append(LS);  sb.append("   Current size : ").append(currItemsAlloc_).append(LS);  sb.append("   Resize factor: ").append(rf_).append(LS);  sb.append("### END SKETCH SUMMARY").append(LS);  return sb.toString();}  }
class C{  @SuppressWarnings("IfMayBeConditional") private Object fieldValue(BinaryObject obj){  BinaryField field=binaryField(obj);  if (field != null)   return field.value(obj); else   return obj.field(propName);}  }
class C{  private double calculateC(){  double alphaSum=0;  double denominator=1;  for (int i=0; i < alphas.length; i++) {    alphaSum+=alphas[i];    denominator*=MathUtils.gamma(alphas[i]);  }  double numerator=MathUtils.gamma(alphaSum);  if (denominator != 0.0) {    return numerator / denominator;  } else {    return Double.MAX_VALUE;  }}  }
class C{  public static ExternalException launder(Throwable t){  if (t instanceof ExternalException) {    return (ExternalException)t;  }  String errorMessage="Please contact the system administrator about request #" + LoggingUtils.getRequestId();  return new ExternalException(ErrorCode.INTERNAL_ERROR,errorMessage,new HashMap<String,String>());}  }
class C{  public static <K,V>HashBiMap<K,V> create(int expectedSize){  return new HashBiMap<K,V>(expectedSize);}  }
class C{  public static String message(Throwable throwable){  String message=throwable.getMessage();  if (StringUtil.isBlank(message)) {    message=throwable.toString();  }  return message;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public void revalidate(){}  }
class C{  public boolean stateStackPush(){  if (debugPrint)   System.out.println(" (" + stateStack.size() + ") pushing cur state : "+ curLexState);  Hashtable h=new Hashtable();  h.put("lexstate",new Integer(curLexState));  h.put("lparen",new Integer(lparen));  h.put("rparen",new Integer(rparen));  lparen=0;  stateStack.push(h);  return true;}  }
class C{  protected Component addSingletonComponent(Component oldC,Component newC){  if ((oldC != null) && (oldC != newC)) {    oldC.getParent().remove(oldC);  }  return newC;}  }
class C{  public static boolean isV4(InetAddress addr){  return addr instanceof Inet4Address;}  }
class C{  protected int tryLogistic(Instances data) throws Exception {  Instances filteredData=Filter.useFilter(data,m_nominalToBinary);  LogisticBase logistic=new LogisticBase(0,true,m_errorOnProbabilities);  logistic.setMaxIterations(200);  logistic.setWeightTrimBeta(getWeightTrimBeta());  logistic.setUseAIC(getUseAIC());  logistic.buildClassifier(filteredData);  return logistic.getNumRegressions();}  }
class C{  public void generateTable(){  long checkSum=0;  int n=256;  int MAX_SIZE=1048576;  int NUM_TRIALS=10000;  while (n <= MAX_SIZE) {    System.out.println("Trying " + n + "...");    int[] n1=new int[n];    int[] n2=new int[n];    randomNumber(n1,n);    randomNumber(n2,n);    int[] sum=new int[n + 1];    int[] copy1=new int[n];    int[] copy2=new int[n];    System.arraycopy(n1,0,copy1,0,n);    System.arraycopy(n2,0,copy2,0,n);    System.gc();    long baseS=System.currentTimeMillis();    for (int i=0; i < NUM_TRIALS; i++) {      checkSum+=n1[0];      int c=n1[0];      System.arraycopy(n1,1,n1,0,n - 1);      n1[n - 1]=c;      c=n2[n - 1];      System.arraycopy(n2,0,n2,1,n - 1);      n2[0]=c;    }    long baseE=System.currentTimeMillis();    System.gc();    System.arraycopy(copy2,0,n2,0,n);    System.arraycopy(copy1,0,n1,0,n);    long addS=System.currentTimeMillis();    for (int i=0; i < NUM_TRIALS; i++) {      add(n1,n2,sum);      checkSum+=sum[0];      int c=n1[0];      System.arraycopy(n1,1,n1,0,n - 1);      n1[n - 1]=c;      c=n2[n - 1];      System.arraycopy(n2,0,n2,1,n - 1);      n2[0]=c;    }    long addE=System.currentTimeMillis();    System.gc();    System.arraycopy(copy2,0,n2,0,n);    System.arraycopy(copy1,0,n1,0,n);    long altS=System.currentTimeMillis();    for (int i=0; i < NUM_TRIALS; i++) {      alt(n1,n2,sum);      checkSum+=sum[0];      int c=n1[0];      System.arraycopy(n1,1,n1,0,n - 1);      n1[n - 1]=c;      c=n2[n - 1];      System.arraycopy(n2,0,n2,1,n - 1);      n2[0]=c;    }    long altE=System.currentTimeMillis();    System.gc();    System.arraycopy(copy2,0,n2,0,n);    System.arraycopy(copy1,0,n1,0,n);    long lastS=System.currentTimeMillis();    for (int i=0; i < NUM_TRIALS; i++) {      last(n1,n2,sum);      checkSum+=sum[0];      int c=n1[0];      System.arraycopy(n1,1,n1,0,n - 1);      n1[n - 1]=c;      c=n2[n - 1];      System.arraycopy(n2,0,n2,1,n - 1);      n2[0]=c;    }    long lastE=System.currentTimeMillis();    long baseLine=(baseE - baseS);    System.out.println(n + ",Base:" + baseLine+ ",ms.");    System.out.println(n + ",Add*:" + (addE - addS - baseLine)+ ",ms.");    System.out.println(n + ",Alt*:" + (altE - altS - baseLine)+ ",ms.");    System.out.println(n + ",Last*:" + (lastE - lastS - baseLine)+ ",ms.");    n=n * 2;  }  System.out.println("Checksum:" + checkSum);}  }
class C{  @Override public int read(byte[] buffer,int offset,int length) throws IOException {  int sublen=_next.read(buffer,offset,length);  if (sublen <= 0) {    return 0;  }  _crc=Crc64.generate(_crc,buffer,offset,sublen);  _length+=sublen;  return sublen;}  }
class C{  public InhibitAnyPolicy(byte[] encoding) throws IOException {  super(encoding);  this.skipCerts=new BigInteger((byte[])ASN1Integer.getInstance().decode(encoding)).intValue();}  }
class C{  public boolean isMacMuted(final String mac){  final long muteTill=getMacUnmuteTime(mac);  return muteTill > System.currentTimeMillis();}  }
class C{  static <T>GeneralRange<T> downTo(Comparator<? super T> comparator,@Nullable T endpoint,BoundType boundType){  return new GeneralRange<T>(comparator,true,endpoint,boundType,false,null,OPEN);}  }
class C{  public PropertyNameValuePairSingleName createPropertyNameValuePairSingleName(){  PropertyNameValuePairSingleNameImpl propertyNameValuePairSingleName=new PropertyNameValuePairSingleNameImpl();  return propertyNameValuePairSingleName;}  }
class C{  public boolean isEnabled(){  findElement();  return element.isEnabled();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public Builder writePartition(final String writePartition){  this.writePartition=writePartition;  return this;}  }
class C{  @Inject public EvaluateExpressionPresenter(EvaluateExpressionView view,DebuggerServiceClient service,JavaRuntimeLocalizationConstant constant){  this.view=view;  this.view.setDelegate(this);  this.service=service;  this.constant=constant;}  }
class C{  public String write(AtomicLong value){  return value.toString();}  }
class C{  public synchronized void clear(){  counters.clear();}  }
class C{  public void addDescription(String description){  String desc=getDescription();  if (desc == null)   setDescription(description); else   setDescription(desc + " | " + description);}  }
class C{  public void init(String shapeFile){  spatialIndex=locateAndSetShapeData(shapeFile);}  }
class C{  public final boolean is(String dataId){  return myName.equals(dataId);}  }
class C{  public ChangeCreationResult createChange(String sessionId) throws RefactoringException {  RefactoringSession session=getRefactoringSession(sessionId);  return session.createChange();}  }
class C{  private void updateNotification(String text){  contentIntent=PendingIntent.getActivity(this,0,new Intent(this,engine.getClass()),0);  Notification.Builder builder=new Notification.Builder(engine).setContentTitle("WebServer").setContentText(text).setContentIntent(contentIntent).setSmallIcon(R.mipmap.ic_launcher).setWhen(System.currentTimeMillis());  notification=builder.getNotification();  notificationManager.notify(0,notification);}  }
class C{  public STGroupFile(URL url,String encoding,char delimiterStartChar,char delimiterStopChar){  super(delimiterStartChar,delimiterStopChar);  this.url=url;  this.encoding=encoding;  this.fileName=null;}  }
class C{  public NullTest(String name){  super(name);}  }
class C{  @Benchmark public long test1_UsingWhileAndMapEntry() throws IOException {  long i=0;  Iterator<Map.Entry<Integer,Integer>> it=map.entrySet().iterator();  while (it.hasNext()) {    Map.Entry<Integer,Integer> pair=it.next();    i+=pair.getKey() + pair.getValue();  }  return i;}  }
class C{  @Override public int onStartCommand(Intent intent,int flags,int startId){  if (intent != null) {    final String action=intent.getAction();switch (action) {case ACTION_BROADCAST_STATUS:      broadcastStatus();    break;case ACTION_START_CAPTURE:  CharSequence sequenceName=intent.getCharSequenceExtra(EXTRA_SEQUENCE_NAME);startCapture(sequenceName);break;case ACTION_STOP_CAPTURE:stopCapture();break;case ACTION_CAPTURE:capture();break;}}return START_STICKY;}  }
class C{  public Schelling(long seed){  this(seed,100,100);}  }
class C{  public static boolean isCSVLineAllNumbers(String line){  if (StringUtils.isBlank(line)) {    return false;  }  String[] parts=line.split(",");  for (int i=0; i < parts.length; i++) {    String part=parts[i].trim();    try {      Double.parseDouble(part);    } catch (    NumberFormatException e) {      return false;    }  }  return true;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(processinginstructionsetdatanomodificationallowederrEE.class,args);}  }
class C{  private void drawFirstAnimation(Canvas canvas){  if (radius1 < getWidth() / 2) {    Paint paint=new Paint();    paint.setAntiAlias(true);    paint.setColor(makePressColor());    radius1=(radius1 >= getWidth() / 2) ? (float)getWidth() / 2 : radius1 + 1;    canvas.drawCircle(getWidth() / 2,getHeight() / 2,radius1,paint);  } else {    Bitmap bitmap=Bitmap.createBitmap(canvas.getWidth(),canvas.getHeight(),Bitmap.Config.ARGB_8888);    Canvas temp=new Canvas(bitmap);    Paint paint=new Paint();    paint.setAntiAlias(true);    paint.setColor(makePressColor());    temp.drawCircle(getWidth() / 2,getHeight() / 2,getHeight() / 2,paint);    Paint transparentPaint=new Paint();    transparentPaint.setAntiAlias(true);    transparentPaint.setColor(getResources().getColor(android.R.color.transparent));    transparentPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));    if (cont >= 50) {    } else {      radius2=(radius2 >= getWidth() / 2 - Utils.dpToPx(ringWidth,getResources())) ? (float)getWidth() / 2 - Utils.dpToPx(ringWidth,getResources()) : radius2 + 1;    }    temp.drawCircle(getWidth() / 2,getHeight() / 2,radius2,transparentPaint);    canvas.drawBitmap(bitmap,0,0,new Paint());    bitmap.recycle();    if (radius2 >= getWidth() / 2 - Utils.dpToPx(ringWidth,getResources())) {      firstAnimationOver=true;      cont++;    }    if (radius2 >= getWidth() / 2)     firstAnimationOver=true;  }}  }
class C{  public Matrix4d rotationXYZ(double angleX,double angleY,double angleZ){  double cosX=Math.cos(angleX);  double sinX=Math.sin(angleX);  double cosY=Math.cos(angleY);  double sinY=Math.sin(angleY);  double cosZ=Math.cos(angleZ);  double sinZ=Math.sin(angleZ);  double m_sinX=-sinX;  double m_sinY=-sinY;  double m_sinZ=-sinZ;  double nm11=cosX;  double nm12=sinX;  double nm21=m_sinX;  double nm22=cosX;  double nm00=cosY;  double nm01=nm21 * m_sinY;  double nm02=nm22 * m_sinY;  m20=sinY;  m21=nm21 * cosY;  m22=nm22 * cosY;  m23=0.0;  m00=nm00 * cosZ;  m01=nm01 * cosZ + nm11 * sinZ;  m02=nm02 * cosZ + nm12 * sinZ;  m03=0.0;  m10=nm00 * m_sinZ;  m11=nm01 * m_sinZ + nm11 * cosZ;  m12=nm02 * m_sinZ + nm12 * cosZ;  m13=0.0;  m30=0.0;  m31=0.0;  m32=0.0;  m33=1.0;  properties=PROPERTY_AFFINE;  return this;}  }
class C{  private Point drawHorizontalKnob(final GC gc,final int value,final boolean upper){  final float pixelSize=computePixelSizeForHorizonalSlider();  final int x=(int)(pixelSize * value);  Image image;  if (upper) {    if (upperHover) {      image=dragInProgress ? sliderDrag : sliderHover;    } else     if (lastSelected == SELECTED_KNOB.UPPER) {      image=sliderSelected;    } else {      image=slider;    }  } else {    if (lowerHover) {      image=dragInProgress ? sliderDrag : sliderHover;    } else     if (lastSelected == SELECTED_KNOB.LOWER) {      image=sliderSelected;    } else {      image=slider;    }  }  if (isEnabled()) {    gc.drawImage(image,x + 5,getClientArea().height / 2 - slider.getBounds().height / 2);  } else {    final Image temp=new Image(getDisplay(),image,SWT.IMAGE_DISABLE);    gc.drawImage(temp,x + 5,getClientArea().height / 2 - slider.getBounds().height / 2);    temp.dispose();  }  return new Point(x + 5,getClientArea().height / 2 - slider.getBounds().height / 2);}  }
class C{  public final synchronized void undoMove(){  if (game.getLastMove() != null) {    abortSearch();    boolean didUndo=undoMoveNoUpdate();    updateComputeThreads();    setSelection();    if (didUndo)     setAnimMove(game.currPos(),game.getNextMove(),false);    updateGUI();  }}  }
class C{  void createAndSendView(List<DistributionMessage> requests) throws InterruptedException {  List<InternalDistributedMember> joinReqs=new ArrayList<>(10);  Map<InternalDistributedMember,Integer> joinPorts=new HashMap<>(10);  Set<InternalDistributedMember> leaveReqs=new HashSet<>(10);  List<InternalDistributedMember> removalReqs=new ArrayList<>(10);  List<String> removalReasons=new ArrayList<String>(10);  NetView oldView=currentView;  List<InternalDistributedMember> oldMembers;  if (oldView != null) {    oldMembers=new ArrayList<>(oldView.getMembers());  } else {    oldMembers=Collections.emptyList();  }  Set<InternalDistributedMember> oldIDs=new HashSet<>();  for (  DistributionMessage msg : requests) {    logger.debug("processing request {}",msg);    InternalDistributedMember mbr;switch (msg.getDSFID()) {case JOIN_REQUEST:      JoinRequestMessage jmsg=(JoinRequestMessage)msg;    mbr=jmsg.getMemberID();  int port=jmsg.getFailureDetectionPort();for (InternalDistributedMember m : oldMembers) {  if (mbr.compareTo(m,false) == 0) {    oldIDs.add(m);    break;  }}if (!joinReqs.contains(mbr)) {joinReqs.add(mbr);joinPorts.put(mbr,port);}break;case LEAVE_REQUEST_MESSAGE:mbr=((LeaveRequestMessage)msg).getMemberID();if (oldMembers.contains(mbr) && !leaveReqs.contains(mbr)) {leaveReqs.add(mbr);}break;case REMOVE_MEMBER_REQUEST:break;default :logger.warn("Unknown membership request encountered: {}",msg);break;}}for (DistributionMessage msg : requests) {switch (msg.getDSFID()) {case REMOVE_MEMBER_REQUEST:InternalDistributedMember mbr=((RemoveMemberMessage)msg).getMemberID();if (!leaveReqs.contains(mbr)) {if (oldMembers.contains(mbr) && !removalReqs.contains(mbr)) {removalReqs.add(mbr);removalReasons.add(((RemoveMemberMessage)msg).getReason());} else {sendRemoveMessages(Collections.singletonList(mbr),Collections.singletonList(((RemoveMemberMessage)msg).getReason()),new HashSet<InternalDistributedMember>());}}break;default :break;}}for (InternalDistributedMember mbr : oldIDs) {if (!leaveReqs.contains(mbr) && !removalReqs.contains(mbr)) {removalReqs.add(mbr);removalReasons.add("Removal of old ID that has been reused");}}if (removalReqs.isEmpty() && leaveReqs.isEmpty() && joinReqs.isEmpty()) {return;}NetView newView;synchronized (viewInstallationLock) {int viewNumber=0;List<InternalDistributedMember> mbrs;if (currentView == null) {mbrs=new ArrayList<InternalDistributedMember>();} else {viewNumber=currentView.getViewId() + 1;mbrs=new ArrayList<InternalDistributedMember>(oldMembers);}mbrs.removeAll(leaveReqs);mbrs.removeAll(removalReqs);mbrs.addAll(joinReqs);newView=new NetView(localAddress,viewNumber,mbrs,leaveReqs,new HashSet<InternalDistributedMember>(removalReqs));for (InternalDistributedMember mbr : joinReqs) {if (mbrs.contains(mbr)) {newView.setFailureDetectionPort(mbr,joinPorts.get(mbr));}}if (currentView != null) {newView.setFailureDetectionPorts(currentView);newView.setPublicKeys(currentView);}}if (joinReqs.isEmpty() && newView.getMembers().equals(currentView.getMembers())) {logger.info("membership hasn't changed - aborting new view {}",newView);return;}for (InternalDistributedMember mbr : joinReqs) {mbr.setVmViewId(newView.getViewId());}if (isShutdown()) {return;}sendRemoveMessages(removalReqs,removalReasons,oldIDs);prepareAndSendView(newView,joinReqs,leaveReqs,newView.getCrashedMembers());return;}  }
class C{  public boolean isOverdue(){  return currentDate.isAfter(overdueDate);}  }
class C{  public void writeSyncValue(String storeName,Scope scope,boolean persist,byte[] key,Iterable<Versioned<byte[]>> values) throws PersistException {  SynchronizingStorageEngine store=storeRegistry.get(storeName);  if (store == null) {    store=storeRegistry.register(storeName,scope,persist);  }  store.writeSyncValue(new ByteArray(key),values);}  }
class C{  public ByteArrayOutputStream(){  this(1024);}  }
class C{  protected void openRaceInfo(Race race){  if (!raceInfo.isVisible()) {    if (racesDialog.isVisible()) {      raceInfo.setLocationRelativeTo(racesDialog);    } else {      raceInfo.setLocationRelativeTo(parent);    }  }  raceInfo.open(race);}  }
class C{  public void onInitialDataDownloaded(){  Log.d(TAG,"Initial Data Loaded");  context().getContactsModule().startImport();  if (appStateVM.isBookImported()) {    onAppLoaded();  }}  }
class C{  private static VkInstance createInstance(PointerBuffer requiredExtensions){  VkApplicationInfo appInfo=VkApplicationInfo.calloc().sType(VK_STRUCTURE_TYPE_APPLICATION_INFO).pApplicationName(memUTF8("GLFW Vulkan Demo")).pEngineName(memUTF8("")).apiVersion(VK_MAKE_VERSION(1,0,2));  PointerBuffer ppEnabledExtensionNames=memAllocPointer(requiredExtensions.remaining() + 1);  ppEnabledExtensionNames.put(requiredExtensions);  ByteBuffer VK_EXT_DEBUG_REPORT_EXTENSION=memUTF8(VK_EXT_DEBUG_REPORT_EXTENSION_NAME);  ppEnabledExtensionNames.put(VK_EXT_DEBUG_REPORT_EXTENSION);  ppEnabledExtensionNames.flip();  PointerBuffer ppEnabledLayerNames=memAllocPointer(layers.length);  for (int i=0; validation && i < layers.length; i++)   ppEnabledLayerNames.put(layers[i]);  ppEnabledLayerNames.flip();  VkInstanceCreateInfo pCreateInfo=VkInstanceCreateInfo.calloc().sType(VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO).pNext(NULL).pApplicationInfo(appInfo).ppEnabledExtensionNames(ppEnabledExtensionNames).ppEnabledLayerNames(ppEnabledLayerNames);  PointerBuffer pInstance=memAllocPointer(1);  int err=vkCreateInstance(pCreateInfo,null,pInstance);  long instance=pInstance.get(0);  memFree(pInstance);  if (err != VK_SUCCESS) {    throw new AssertionError("Failed to create VkInstance: " + translateVulkanResult(err));  }  VkInstance ret=new VkInstance(instance,pCreateInfo);  pCreateInfo.free();  memFree(ppEnabledLayerNames);  memFree(VK_EXT_DEBUG_REPORT_EXTENSION);  memFree(ppEnabledExtensionNames);  memFree(appInfo.pApplicationName());  memFree(appInfo.pEngineName());  appInfo.free();  return ret;}  }
class C{  public boolean verify(String provider) throws NoSuchAlgorithmException, NoSuchProviderException, InvalidKeyException, SignatureException {  return verify(this.getPublicKey(provider),provider);}  }
class C{  @SuppressWarnings("unchecked") public static <T>void sort(List<T> list,Comparator<? super T> comparator){  T[] array=list.toArray((T[])new Object[list.size()]);  Arrays.sort(array,comparator);  int i=0;  ListIterator<T> it=list.listIterator();  while (it.hasNext()) {    it.next();    it.set(array[i++]);  }}  }
class C{  public ToStringBuilder append(String fieldName,double value){  style.append(buffer,fieldName,value);  return this;}  }
class C{  public DataBaseAdmin(File file) throws IOException, InstantiationException, IllegalAccessException, ClassNotFoundException, SQLException {  Properties properties=new Properties();  properties.load(new FileInputStream(file));  Class.forName(properties.getProperty("driver")).newInstance();  connection=DriverManager.getConnection(properties.getProperty("url"),properties.getProperty("userName"),properties.getProperty("password"));}  }
class C{  public FormatField(String id,MetaType type,VcfNumber number,String description){  mId=id;  mType=type;  mNumber=number;  mDescription=description;}  }
class C{  public void reload(){  new ReloadTaskViewJob(this,FetchStrategy.FORCE_RELOAD).schedule();}  }
class C{  public static boolean isValidJPEG(InputStream is,long size){  try {    byte[] b=new byte[2];    is.read(b,0,2);    if ((b[0] & 0xff) != 0xff || (b[1] & 0xff) != 0xd8) {      return false;    }    is.skip(size - 4);    is.read(b,0,2);    if ((b[0] & 0xff) != 0xff || (b[1] & 0xff) != 0xd9) {      return false;    }  } catch (  Exception e) {    return false;  }  return true;}  }
class C{  void calculateValue(float fraction){  mAnimatedValue=mKeyframeSet.getValue(fraction);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.349 -0400",hash_original_method="C1269ADA454FD9CDC780161D09FCDB9A",hash_generated_method="AC30A26E48F08317DEBC958B804C2453") @Override public String toString(){  StringBuilder builder=new StringBuilder();  builder.append(getClass().getSimpleName());  builder.append('[');  builder.append(charsetName);  builder.append(": ");  for (int i=0; i < bytes.length; i++) {    if (i > 0) {      builder.append(",");    }    builder.append("0x");    builder.append(Integer.toHexString(0xFF & bytes[i]).toUpperCase());  }  builder.append(']');  return builder.toString();}  }
class C{  public ByteBandedRaster(SampleModel sampleModel,DataBuffer dataBuffer,Point origin){  this(sampleModel,dataBuffer,new Rectangle(origin.x,origin.y,sampleModel.getWidth(),sampleModel.getHeight()),origin,null);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void encode(OutputStream out) throws IOException {  DerOutputStream tmp=new DerOutputStream();  if (extensionValue == null) {    this.extensionId=PKIXExtensions.InhibitAnyPolicy_Id;    critical=true;    encodeThis();  }  super.encode(tmp);  out.write(tmp.toByteArray());}  }
class C{  public void abort(){  if (post != null) {    post.abort();    toThrow=new BOSHException("HTTP request aborted");  }}  }
class C{  @SuppressWarnings("unchecked") public T withIndex(long index){  response.index=Assert.argNot(index,index < 0,"index must be positive");  return (T)this;}  }
class C{  public boolean isAuthRequired(String remoteIP){  return false;}  }
class C{  public void onFailure(OneSheeldDevice device,boolean isTimeOut){}  }
class C{  public void rebindToTask(Drawable headerIcon,String headerTitle,int headerBgColor){  mApplicationIcon.setImageDrawable(headerIcon);  mApplicationIcon.setContentDescription(headerTitle);  mActivityDescription.setText(headerTitle);  int existingBgColor=(getBackground() instanceof ColorDrawable) ? ((ColorDrawable)getBackground()).getColor() : 0;  if (existingBgColor != headerBgColor) {    mBackgroundColorDrawable.setColor(headerBgColor);    mBackgroundColor=headerBgColor;  }  mCurrentPrimaryColor=headerBgColor;  mActivityDescription.setTextColor(mConfig.taskBarViewLightTextColor);  mDismissButton.setImageDrawable(mLightDismissDrawable);  mDismissButton.setContentDescription(String.format(mDismissContentDescription,headerTitle));}  }
class C{  @PUT @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN,ACL.ALL}) public TaskResourceRep update(@PathParam("id") URI id,FileSystemUpdateParam param) throws InternalException {  _log.info(String.format("FileShareUpdate --- FileShare id: %1$s",id));  ArgValidator.checkFieldUriType(id,FileShare.class,"id");  FileShare fs=queryResource(id);  StorageSystem device=_dbClient.queryObject(StorageSystem.class,fs.getStorageDevice());  Boolean deviceSupportsSoftLimit=device.getSupportSoftLimit() != null ? device.getSupportSoftLimit() : false;  Boolean deviceSupportsNotificationLimit=device.getSupportNotificationLimit() != null ? device.getSupportNotificationLimit() : false;  if (param.getSoftLimit() != 0 && !deviceSupportsSoftLimit) {    throw APIException.badRequests.unsupportedParameterForStorageSystem("soft_limit");  }  if (param.getNotificationLimit() != 0 && !deviceSupportsNotificationLimit) {    throw APIException.badRequests.unsupportedParameterForStorageSystem("notification_limit");  }  ArgValidator.checkFieldMaximum(param.getSoftLimit(),100,"soft_limit");  ArgValidator.checkFieldMaximum(param.getNotificationLimit(),100,"notification_limit");  if (param.getSoftLimit() > 0L) {    ArgValidator.checkFieldMinimum(param.getSoftGrace(),1L,"soft_grace");    fs.setSoftGracePeriod(param.getSoftGrace());    fs.setSoftLimit(Long.valueOf(param.getSoftLimit()));  }  if (param.getNotificationLimit() > 0) {    fs.setNotificationLimit(Long.valueOf(param.getNotificationLimit()));  }  _dbClient.updateObject(fs);  FileController controller=getController(FileController.class,device.getSystemType());  String task=UUID.randomUUID().toString();  Operation op=_dbClient.createTaskOpStatus(FileShare.class,fs.getId(),task,ResourceOperationTypeEnum.UPDATE_FILE_SYSTEM);  controller.modifyFS(fs.getStorageDevice(),fs.getPool(),id,task);  op.setDescription("Filesystem update");  auditOp(OperationTypeEnum.UPDATE_FILE_SYSTEM,true,AuditLogManager.AUDITOP_BEGIN,fs.getId().toString(),fs.getCapacity(),param.getNotificationLimit(),param.getSoftLimit(),param.getSoftGrace());  return toTask(fs,task,op);}  }
class C{  public void testRowHandlingWithFile() throws ReplicatorException, InterruptedException {  ReplicateFilter rf=new ReplicateFilter();  rf.setTungstenSchema("tungsten_foo");  rf.setFilePrefix("filter/testRowHandlingWithFile");  filterHelper.setFilter(rf);  String names[]={"id"};  Long values[]={new Long(99)};  verifyRowAccept(filterHelper,0,"foobar1","foobar2",names,values);  verifyRowAccept(filterHelper,1,"bar2","foo",names,values);  verifyRowAccept(filterHelper,2,"foo","test2",names,values);  verifyRowIgnore(filterHelper,3,"foo","test",names,values);  verifyRowIgnore(filterHelper,4,"foobar2","foobar1",names,values);  verifyRowIgnore(filterHelper,5,"bar234","foobar1",names,values);  filterHelper.done();}  }
class C{  public void run(){  try {    boolean done=false;    while (!done && !mClosed) {      int requestType=mInput.read();switch (requestType) {case ObexHelper.OBEX_OPCODE_CONNECT:        handleConnectRequest();      break;case ObexHelper.OBEX_OPCODE_DISCONNECT:    handleDisconnectRequest();  done=true;break;case ObexHelper.OBEX_OPCODE_GET:case ObexHelper.OBEX_OPCODE_GET_FINAL:handleGetRequest(requestType);break;case ObexHelper.OBEX_OPCODE_PUT:case ObexHelper.OBEX_OPCODE_PUT_FINAL:handlePutRequest(requestType);break;case ObexHelper.OBEX_OPCODE_SETPATH:handleSetPathRequest();break;case ObexHelper.OBEX_OPCODE_ABORT:handleAbortRequest();break;case -1:done=true;break;default :int length=mInput.read();length=(length << 8) + mInput.read();for (int i=3; i < length; i++) {mInput.read();}sendResponse(ResponseCodes.OBEX_HTTP_NOT_IMPLEMENTED,null);}}} catch (NullPointerException e) {Log.d(TAG,e.toString());}catch (Exception e) {Log.d(TAG,e.toString());}close();}  }
class C{  public boolean removeMember(String playerName){  boolean res=membersAndLastSeen.remove(playerName) != null;  if (res) {    Set<String> toRemove=new HashSet<String>();    toRemove.add(playerName);    if ((membersAndLastSeen.size() == 1) && openInvites.isEmpty()) {      toRemove.add(membersAndLastSeen.keySet().iterator().next());      membersAndLastSeen.clear();    }    fixLeader();    sendLeftGroupEvent(toRemove);    sendGroupChangeEvent();  }  return res;}  }
class C{  @BeforeClass public static void loadCerts() throws Exception {  GlobalConf.reload(new EmptyGlobalConf());  issuer=TestCertUtil.getCertChainCert("root_ca.p12");  assertNotNull(issuer);  signer=issuer;  signerKey=TestCertUtil.getCertChainKey("root_ca.p12");  assertNotNull(signerKey);  subject=TestCertUtil.getCertChainCert("user_0.p12");  assertNotNull(subject);}  }
class C{  public static ClassNode makeWithoutCaching(String name){  ClassNode cn=new ClassNode(name,Opcodes.ACC_PUBLIC,OBJECT_TYPE);  cn.isPrimaryNode=false;  return cn;}  }
class C{  public Location(double latitude,double longitude,long date){  this.latitude=latitude;  this.longitude=longitude;  this.date=new Date(date);}  }
class C{  private void initializeScheme(String p_uriSpec) throws MalformedURIException {  int uriSpecLen=p_uriSpec.length();  int index=0;  String scheme=null;  char testChar='\0';  while (index < uriSpecLen) {    testChar=p_uriSpec.charAt(index);    if (testChar == ':' || testChar == '/' || testChar == '?' || testChar == '#') {      break;    }    index++;  }  scheme=p_uriSpec.substring(0,index);  if (scheme.length() == 0) {    throw new MalformedURIException(Utils.messages.createMessage(MsgKey.ER_NO_SCHEME_INURI,null));  } else {    setScheme(scheme);  }}  }
class C{  public TreeHotSpot(HotSpot parent){  this.parent=parent;}  }
class C{  public LibraryLoader(){}  }
class C{  public static void directErrors(File file,boolean alsoToErrStream){  errorFile=file;  notifyErr=alsoToErrStream;}  }
class C{  public void insertRecord(int id,byte[] record) throws IOException {  if (!database.isOpen())   throw new IllegalStateException("don't access the table before opening the database");  if (id < committedNextRowId)   throw new IllegalStateException("Trying to insert a row below nextRowId: " + id + ", this: "+ this);  if (id != lastTransactionInsertId + 1)   throw new IllegalStateException("Trying to insert a row that is not one above the last transaction id: " + lastTransactionInsertId + ", id: "+ id);  if (record.length != recordSize)   throw new IllegalStateException("Record is wrong size: " + record.length + ", this: "+ this);  insertRecordOut.write(record);  lastTransactionInsertId=id;}  }
class C{  public boolean isMessagePartOfTransaction(SIPMessage messageToTest){  ViaList viaHeaders=messageToTest.getViaHeaders();  boolean transactionMatches;  String messageBranch=((Via)viaHeaders.getFirst()).getBranch();  boolean rfc3261Compliant=getBranch() != null && messageBranch != null && getBranch().toLowerCase().startsWith(SIPConstants.BRANCH_MAGIC_COOKIE_LOWER_CASE) && messageBranch.toLowerCase().startsWith(SIPConstants.BRANCH_MAGIC_COOKIE_LOWER_CASE);  transactionMatches=false;  if (TransactionState.COMPLETED == this.getState()) {    if (rfc3261Compliant) {      transactionMatches=getBranch().equalsIgnoreCase(((Via)viaHeaders.getFirst()).getBranch()) && getMethod().equals(messageToTest.getCSeq().getMethod());    } else {      transactionMatches=getBranch().equals(messageToTest.getTransactionId());    }  } else   if (!isTerminated()) {    if (rfc3261Compliant) {      if (viaHeaders != null) {        if (getBranch().equalsIgnoreCase(((Via)viaHeaders.getFirst()).getBranch())) {          transactionMatches=getOriginalRequest().getCSeq().getMethod().equals(messageToTest.getCSeq().getMethod());        }      }    } else {      if (getBranch() != null) {        transactionMatches=getBranch().equalsIgnoreCase(messageToTest.getTransactionId());      } else {        transactionMatches=getOriginalRequest().getTransactionId().equalsIgnoreCase(messageToTest.getTransactionId());      }    }  }  return transactionMatches;}  }
class C{  @Override public void createFont(final PdfObject pdfObject,final String fontID,final boolean renderPage,final ObjectStore objectStore,final Map<String,PdfJavaGlyphs> substitutedFonts) throws Exception {  fontTypes=StandardFonts.TYPE1;  init(fontID,renderPage);  final PdfObject pdfFontDescriptor=pdfObject.getDictionary(PdfDictionary.FontDescriptor);  setBoundsAndMatrix(pdfFontDescriptor);  setName(pdfObject);  setEncoding(pdfObject,pdfFontDescriptor);  try {    readEmbeddedFont(pdfFontDescriptor);  } catch (  final Exception e) {    LogWriter.writeLog("Exception: " + e.getMessage());  }  readWidths(pdfObject,true);  if (renderPage) {    setFont(getBaseFontName(),1);  }}  }
class C{  private static int GetObjectArrayElement(JNIEnvironment env,int arrayJREF,int index){  if (traceJNI)   VM.sysWrite("JNI called: GetObjectArrayElement  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object[] sourceArray=(Object[])env.getJNIRef(arrayJREF);    if (sourceArray == null) {      return 0;    }    RVMArray arrayType=Magic.getObjectType(sourceArray).asArray();    RVMType elementType=arrayType.getElementType();    if (elementType.isPrimitiveType() || elementType.isUnboxedType()) {      return 0;    }    if (index >= Magic.getArrayLength(sourceArray)) {      env.recordException(new ArrayIndexOutOfBoundsException());      return 0;    }    return env.pushJNIRef(sourceArray[index]);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  public Triangle rayTest(Ray ray,float distance,Bits allowedMeshParts){  Triangle hitTriangle=null;  tmpRayTestRayFrom.set(ray.origin);  tmpRayTestRayTo.set(ray.direction).scl(distance).add(tmpRayTestRayFrom);  raycastCallback.setHitFraction(1);  raycastCallback.clearReport();  raycastCallback.setFrom(tmpRayTestRayFrom);  raycastCallback.setTo(tmpRayTestRayTo);  raycastCallback.setAllowedMeshPartIndices(allowedMeshParts);  collisionShape.performRaycast(raycastCallback,tmpRayTestRayFrom,tmpRayTestRayTo);  if (raycastCallback.triangleIndex != -1) {    hitTriangle=graph.getTriangleFromMeshPart(raycastCallback.partId,raycastCallback.triangleIndex);  }  return hitTriangle;}  }
class C{  public static void doShowProperties(DebugCLI cli){  StringBuilder sb=new StringBuilder();  Session session=cli.getSession();  for (  String key : cli.propertyKeys()) {    int value=cli.propertyGet(key);    sb.append(key);    sb.append(" = ");    sb.append(value);    sb.append('\n');  }{    PlayerSessionManager mgr=(PlayerSessionManager)Bootstrap.sessionManager();    sb.append(getLocalizationManager().getLocalizedTextString("key21"));    sb.append('\n');    for (    String key : mgr.keySet()) {      Object value=mgr.getPreferenceAsObject(key);      sb.append(key);      sb.append(" = ");      sb.append(value);      sb.append('\n');    }  }  if (session != null) {    PlayerSession psession=(PlayerSession)session;    sb.append(getLocalizationManager().getLocalizedTextString("key22"));    sb.append('\n');    for (    String key : psession.keySet()) {      Object value=psession.getPreferenceAsObject(key);      sb.append(key);      sb.append(" = ");      sb.append(value);      sb.append('\n');    }  }  cli.out(sb.toString());}  }
class C{  private boolean containsAddress(final INaviView rawView,final long address){  for (  final INaviViewNode node : rawView.getGraph()) {    if (node instanceof INaviFunctionNode) {      final INaviFunctionNode fnode=(INaviFunctionNode)node;      if (fnode.getAddress().toLong() == address) {        return true;      }    } else     if (node instanceof INaviCodeNode) {      final INaviCodeNode cnode=(INaviCodeNode)node;      for (      final INaviInstruction instruction : cnode.getInstructions()) {        if (instruction.getAddress().toLong() == address) {          return true;        }      }    }  }  return false;}  }
class C{  public synchronized Collection<WeaveSpec> woven(){  Collection<WeaveSpec> specs=Lists.newArrayList();  for (  Weave w : woven.values()) {    specs.add(w.spec);  }  return specs;}  }
class C{  public void trace(String msg,Object arg0,Object arg1){  innerLog(Level.TRACE,null,msg,arg0,arg1,UNKNOWN_ARG,null);}  }
class C{  public void testDoTag() throws Exception {  System.out.println("doTag");  ForXmlTag instance=new ForXmlTag();  String value="<div>";  String expected="&lt;div&gt;";  instance.setJspContext(_pageContext);  instance.setValue(value);  instance.doTag();  String results=_response.getContentAsString();  assertEquals(expected,results);}  }
class C{  private void connectionFailed(BluetoothDevice device){  Bundle bundle=new Bundle();  bundle.putString(ServiceMessageKeys.DEVICE_NAME,device.getName());  bundle.putString(ServiceMessageKeys.DEVICE_ADDRESS,device.getAddress());  sendMessage(ServiceMessageType.MESSAGE_CONNECT_FAILED);  if (_debug)   Log.d(TAG,"connectionFailed: restarting");  setState(STATE_IDLE);  start();}  }
class C{  public Label(String text){  noBind=true;  setUIID("Label");  this.text=text;  localize();  setFocusable(false);  endsWith3Points=UIManager.getInstance().getLookAndFeel().isDefaultEndsWith3Points();}  }
class C{  public boolean equals(Object partial){  if (this == partial) {    return true;  }  if (partial instanceof LocalDateTime) {    LocalDateTime other=(LocalDateTime)partial;    if (iChronology.equals(other.iChronology)) {      return iLocalMillis == other.iLocalMillis;    }  }  return super.equals(partial);}  }
class C{  private Plan buildPlan3(){  Plan plan=PopulationUtils.createPlan();  Activity a=PopulationUtils.createActivityFromCoord("a",CoordUtils.createCoord(0.0,0.0));  a.setEndTime(Time.parseTime("16:00:00"));  plan.addActivity(a);  plan.addLeg(PopulationUtils.createLeg("truck"));  double travelTime=Time.parseTime("06:00:00");  double distance=Math.round((travelTime * ChainChopper.AVERAGE_SPEED) / ChainChopper.CROWFLY_FACTOR);  Activity b=PopulationUtils.createActivityFromCoord("b",CoordUtils.createCoord(distance,2.0));  plan.addActivity(b);  return plan;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.TRACE_WHEN___CONDITION_TYPE_1:    return getConditionType_1();case UmplePackage.TRACE_WHEN___CONSTRAINT_TOKEN_1:  return getConstraintToken_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  protected Dimension computePanelSize(String annoText){  Dimension lengths=this.computeLengths(annoText);  int width=7 * Math.min(lengths.width,this.maxLineLength);  int height=lengths.height * 17;  return new Dimension(width,height);}  }
class C{  public NBTTagCompound save(NBTTagCompound nbt){  NBTTagList typesList=new NBTTagList();  Set<Entry<IAspectType,List<InternalAspect>>> entrySet=this.aspects.entrySet();  for (  Entry<IAspectType,List<InternalAspect>> entry : entrySet) {    NBTTagList aspectsList=new NBTTagList();    for (    InternalAspect aspect : entry.getValue()) {      if (aspect.isSaved())       aspectsList.appendTag(aspect.writeToNBT(new NBTTagCompound()));    }    typesList.appendTag(aspectsList);  }  nbt.setTag(ASPECTS_NBT_TAG,typesList);  return nbt;}  }
class C{  @SuppressLint("NewApi") private int calculateAnimationDelay(final int position){  int delay;  int lastVisiblePosition=((LinearLayoutManager)mRecyclerView.getLayoutManager()).findLastCompletelyVisibleItemPosition();  int firstVisiblePosition=((LinearLayoutManager)mRecyclerView.getLayoutManager()).findFirstCompletelyVisibleItemPosition();  if (mLastAnimatedPosition > lastVisiblePosition)   lastVisiblePosition=mLastAnimatedPosition;  int numberOfItemsOnScreen=lastVisiblePosition - firstVisiblePosition;  int numberOfAnimatedItems=position - 1 - mFirstAnimatedPosition;  if (numberOfItemsOnScreen + 1 < numberOfAnimatedItems) {    delay=mAnimationDelayMillis;    if (mRecyclerView.getLayoutManager() instanceof GridLayoutManager) {      int numColumns=((GridLayoutManager)mRecyclerView.getLayoutManager()).getSpanCount();      delay+=mAnimationDelayMillis * (position % numColumns);    }  } else {    int delaySinceStart=(position - mFirstAnimatedPosition) * mAnimationDelayMillis;    delay=Math.max(0,(int)(-SystemClock.uptimeMillis() + mAnimationStartMillis + mInitialDelayMillis+ delaySinceStart));  }  return delay;}  }
class C{  public RotationTranslationEstimator(Matrix e){  final SingularValueDecomposition svd=new SingularValueDecomposition(e);  System.out.println("U:");  System.out.println(MatrixUtils.matrixToString(svd.getU()));  System.out.println("S:");  System.out.println(MatrixUtils.matrixToString(svd.getS()));  System.out.println("V:");  System.out.println(MatrixUtils.matrixToString(svd.getV()));  Matrix tt=new Matrix(3,1);  for (int i=0; i < 3; i++) {    tt.set(i,0,svd.getU().get(i,2));  }  t=tt.times(1 / tt.normF());  Matrix RT=new Matrix(new double[][]{new double[]{0,-1,0},new double[]{1,0,0},new double[]{0,0,1}});  List<Matrix> matrices=new ArrayList<>(4);  matrices.add(svd.getU().times(RT).times(svd.getV().transpose()));  matrices.add(svd.getU().times(RT).times(svd.getV().transpose()).times(-1));  RT=RT.transpose();  matrices.add(svd.getU().times(RT).times(svd.getV().transpose()));  matrices.add(svd.getU().times(RT).times(svd.getV().transpose()).times(-1));  for (int i=3; i >= 0; i--) {    if (Math.abs(matrices.get(i).det() - 1) > 0.0001) {      matrices.remove(i);    }  }  r1=matrices.get(0);  r2=matrices.get(1);}  }
class C{  public InputStream read(){  return new ByteArrayInputStream(data);}  }
class C{  public static double[] normaliseIntoNewArray(double[][] matrix,int column){  double[] newArray=new double[matrix.length];  double mean=MatrixUtils.mean(matrix,column);  double stdDev=MatrixUtils.stdDev(matrix,column,mean);  if (Double.isInfinite(1.0 / stdDev)) {    for (int t=0; t < matrix.length; t++) {      newArray[t]=(matrix[t][column] - mean);    }  } else {    for (int t=0; t < matrix.length; t++) {      newArray[t]=(matrix[t][column] - mean) / stdDev;    }  }  return newArray;}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static boolean isPaused(){  return paused;}  }
class C{  Package(ClassLoader ld,String packageName,String sTitle,String sVersion,String sVendor,String iTitle,String iVersion,String iVendor,URL base){  loader=ld;  name=packageName.toString();  specTitle=sTitle;  specVersion=sVersion;  specVendor=sVendor;  implTitle=iTitle;  implVersion=iVersion;  implVendor=iVendor;  sealBase=base;}  }
class C{  public void updateZoningMap(ExportGroup exportGroup,ExportMask exportMask,boolean doPersist){  if (exportMask.getCreatedBySystem() == false && exportMask.getExistingInitiators() != null && !exportMask.getExistingInitiators().isEmpty()) {    if (exportMask.getZoningMap() == null || exportMask.getZoningMap().isEmpty()) {      List<StoragePort> storagePorts=ExportUtils.getStoragePorts(exportMask,_dbClient);      List<Initiator> initiators=ExportUtils.getExportMaskExistingInitiators(exportMask,_dbClient);      Map<NetworkLite,List<Initiator>> initiatorsByNetworkMap=NetworkUtil.getInitiatorsByNetwork(initiators,_dbClient);      StringSetMap zoningMap=new StringSetMap();      for (      NetworkLite network : initiatorsByNetworkMap.keySet()) {        if (!Transport.FC.toString().equals(network.getTransportType())) {          continue;        }        Map<String,StoragePort> initiatorPortsMap=NetworkUtil.getPortsInNetworkMap(network,storagePorts);        if (!initiatorPortsMap.isEmpty()) {          zoningMap.putAll(getZoningMap(network,initiatorsByNetworkMap.get(network),initiatorPortsMap,null));        }      }      exportMask.setZoningMap(zoningMap);      if (doPersist) {        _dbClient.updateAndReindexObject(exportMask);      }    }  }}  }
class C{  public static boolean isValidIANAEncoding(String ianaEncoding){  if (ianaEncoding != null) {    int length=ianaEncoding.length();    if (length > 0) {      char c=ianaEncoding.charAt(0);      if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')) {        for (int i=1; i < length; i++) {          c=ianaEncoding.charAt(i);          if ((c < 'A' || c > 'Z') && (c < 'a' || c > 'z') && (c < '0' || c > '9')&& c != '.' && c != '_' && c != '-') {            return false;          }        }        return true;      }    }  }  return false;}  }
class C{  public void run(){  try {    boolean msrpTraceEnabled=MsrpConnection.isMsrpTraceEnabled();    while (!mTerminated) {      StringBuilder trace=new StringBuilder();      StringBuilder line=readLine();      if (line.length() == 0) {        if (msrpTraceEnabled) {          System.out.println("<<< End of stream");        }        return;      }      if (msrpTraceEnabled) {        trace.append(line);        trace.append(MsrpConstants.NEW_LINE);      }      String[] firstLineTags=line.toString().split(" ");      if ((firstLineTags.length < 3) || !firstLineTags[0].equals(MsrpConstants.MSRP_HEADER)) {        if (msrpTraceEnabled) {          System.out.println("<<< Not a MSRP message");        }        return;      }      String txId=firstLineTags[1];      String end=MsrpConstants.END_MSRP_MSG + txId;      int responseCode=-1;      String method=null;      try {        responseCode=Integer.parseInt(firstLineTags[2]);      } catch (      NumberFormatException e) {        method=firstLineTags[2];      }      byte[] data=null;      Hashtable<String,String> headers=new Hashtable<String,String>();      char continuationFlag='\0';      int totalSize=0;      while (continuationFlag == '\0' && !mTerminated) {        line=readLine();        if (msrpTraceEnabled) {          trace.append(line);          trace.append(MsrpConstants.NEW_LINE);        }        if (line.length() == 0) {          String byteRange=headers.get(MsrpConstants.HEADER_BYTE_RANGE);          int chunkSize=-1;          if (byteRange != null) {            chunkSize=MsrpUtils.getChunkSize(byteRange);            totalSize=MsrpUtils.getTotalSize(byteRange);            if (chunkSize == 0) {              mBufferLength=totalSize;            }          }          if (chunkSize >= 0) {            byte[] buffer=readChunkedData(chunkSize,end);            if (chunkSize > 0) {              data=buffer;            } else {              data=new byte[buffer.length - 1];              System.arraycopy(buffer,0,data,0,buffer.length - 1);              continuationFlag=(char)buffer[buffer.length - 1];            }            if (msrpTraceEnabled) {              trace.append(new String(data,UTF8));              trace.append(MsrpConstants.NEW_LINE);            }          } else {            StringBuilder buffer=new StringBuilder();            StringBuilder dataline;            boolean endchunk=false;            while ((!endchunk) && (buffer.length() < MsrpConstants.CHUNK_MAX_SIZE)) {              dataline=readLine();              if ((dataline.length() - 1 == end.length()) && (dataline.toString().startsWith(end))) {                continuationFlag=dataline.charAt(dataline.length() - 1);                endchunk=true;              } else {                if (buffer.length() > 0) {                  buffer.append(MsrpConstants.NEW_LINE);                }                buffer.append(dataline);              }            }            data=buffer.toString().getBytes(UTF8);            totalSize=data.length;            if (msrpTraceEnabled) {              trace.append(new String(data,UTF8));              trace.append(MsrpConstants.NEW_LINE);              trace.append(end);              trace.append(continuationFlag);            }          }        } else         if (line.toString().startsWith(end)) {          continuationFlag=line.charAt(line.length() - 1);        } else {          int index=line.indexOf(":");          String headerName=line.substring(0,index).trim();          String headerValue=line.substring(index + 1).trim();          headers.put(headerName,headerValue);        }      }      final MsrpSession session=mConnection.getSession();      if (responseCode != -1) {        if (msrpTraceEnabled) {          System.out.println("<<< Receive MSRP response:\n" + trace);        }        session.receiveMsrpResponse(responseCode,txId,headers);      } else {        if (MsrpConstants.METHOD_SEND.equals(method)) {          if (msrpTraceEnabled) {            System.out.println("<<< Receive MSRP SEND request:\n" + trace);          }          session.receiveMsrpSend(txId,headers,continuationFlag,data,totalSize);        } else         if (MsrpConstants.METHOD_REPORT.equals(method)) {          if (msrpTraceEnabled) {            System.out.println("<<< Receive MSRP REPORT request:\n" + trace);          }          session.receiveMsrpReport(txId,headers);        } else {          if (msrpTraceEnabled) {            System.out.println("<<< Unknown request received:\n" + trace);          }          session.removeMsrpTransactionInfo(txId);        }      }      session.checkMsrpTransactionInfo();    }  } catch (  FileAccessException e) {    sLogger.error("Unable to receive chunks!",e);    if (!mTerminated) {      final MsrpSession session=mConnection.getSession();      session.getMsrpEventListener().msrpTransferError(null,e.getMessage(),TypeMsrpChunk.Unknown);      session.checkMsrpTransactionInfo();      mTerminated=true;    }  }catch (  ContactManagerException e) {    sLogger.error("Unable to receive chunks!",e);    if (!mTerminated) {      final MsrpSession session=mConnection.getSession();      session.getMsrpEventListener().msrpTransferError(null,e.getMessage(),TypeMsrpChunk.Unknown);      session.checkMsrpTransactionInfo();      mTerminated=true;    }  }catch (  PayloadException e) {    sLogger.error("Unable to receive chunks!",e);    if (!mTerminated) {      final MsrpSession session=mConnection.getSession();      session.getMsrpEventListener().msrpTransferError(null,e.getMessage(),TypeMsrpChunk.Unknown);      session.checkMsrpTransactionInfo();      mTerminated=true;    }  }catch (  NetworkException e) {    if (sLogger.isActivated()) {      sLogger.debug(e.getMessage());    }    if (!mTerminated) {      final MsrpSession session=mConnection.getSession();      session.getMsrpEventListener().msrpTransferError(null,e.getMessage(),TypeMsrpChunk.Unknown);      session.checkMsrpTransactionInfo();      mTerminated=true;    }  }catch (  RuntimeException e) {    sLogger.error("Unable to receive chunks!",e);    if (!mTerminated) {      final MsrpSession session=mConnection.getSession();      session.getMsrpEventListener().msrpTransferError(null,e.getMessage(),TypeMsrpChunk.Unknown);      session.checkMsrpTransactionInfo();      mTerminated=true;    }  }}  }
class C{  public void fixPackageContents(){  if (isFixed)   return;  isFixed=true;  fixEClassifiers();}  }
class C{  public CarMovement(CarMovement proto){  super(proto);  this.pathFinder=proto.pathFinder;}  }
class C{  public JMXServiceURL(String serviceURL) throws MalformedURLException {  final int serviceURLLength=serviceURL.length();  for (int i=0; i < serviceURLLength; i++) {    char c=serviceURL.charAt(i);    if (c < 32 || c >= 127) {      throw new MalformedURLException("Service URL contains " + "non-ASCII character 0x" + Integer.toHexString(c));    }  }  final String requiredPrefix="service:jmx:";  final int requiredPrefixLength=requiredPrefix.length();  if (!serviceURL.regionMatches(true,0,requiredPrefix,0,requiredPrefixLength)) {    throw new MalformedURLException("Service URL must start with " + requiredPrefix);  }  final int protoStart=requiredPrefixLength;  final int protoEnd=indexOf(serviceURL,':',protoStart);  this.protocol=serviceURL.substring(protoStart,protoEnd).toLowerCase();  if (!serviceURL.regionMatches(protoEnd,"://",0,3)) {    throw new MalformedURLException("Missing \"://\" after " + "protocol name");  }  final int hostStart=protoEnd + 3;  final int hostEnd;  if (hostStart < serviceURLLength && serviceURL.charAt(hostStart) == '[') {    hostEnd=serviceURL.indexOf(']',hostStart) + 1;    if (hostEnd == 0)     throw new MalformedURLException("Bad host name: [ without ]");    this.host=serviceURL.substring(hostStart + 1,hostEnd - 1);    if (!isNumericIPv6Address(this.host)) {      throw new MalformedURLException("Address inside [...] must " + "be numeric IPv6 address");    }  } else {    hostEnd=indexOfFirstNotInSet(serviceURL,hostNameBitSet,hostStart);    this.host=serviceURL.substring(hostStart,hostEnd);  }  final int portEnd;  if (hostEnd < serviceURLLength && serviceURL.charAt(hostEnd) == ':') {    if (this.host.length() == 0) {      throw new MalformedURLException("Cannot give port number " + "without host name");    }    final int portStart=hostEnd + 1;    portEnd=indexOfFirstNotInSet(serviceURL,numericBitSet,portStart);    final String portString=serviceURL.substring(portStart,portEnd);    try {      this.port=Integer.parseInt(portString);    } catch (    NumberFormatException e) {      throw new MalformedURLException("Bad port number: \"" + portString + "\": "+ e);    }  } else {    portEnd=hostEnd;    this.port=0;  }  final int urlPathStart=portEnd;  if (urlPathStart < serviceURLLength)   this.urlPath=serviceURL.substring(urlPathStart); else   this.urlPath="";  validate();}  }
class C{  public void showUpdateDialog(Context context,UpdateResponse updateResponse){  Intent intent=new Intent(context,UpdateDialogActivity.class);  Bundle bundle=new Bundle();  bundle.putSerializable("response",updateResponse);  intent.putExtras(bundle);  context.startActivity(intent);}  }
class C{  public Conversion to(String... fields){  conversion.to=join(",",fields);  return this;}  }
class C{  public GT_Recipe addFakeRecipe(boolean aCheckForCollisions,ItemStack[] aInputs,ItemStack[] aOutputs,Object aSpecial,FluidStack[] aFluidInputs,FluidStack[] aFluidOutputs,int aDuration,int aEUt,int aSpecialValue){  return addFakeRecipe(aCheckForCollisions,new GT_Recipe(false,aInputs,aOutputs,aSpecial,null,aFluidInputs,aFluidOutputs,aDuration,aEUt,aSpecialValue));}  }
class C{  @Override protected void drawGuiContainerForegroundLayer(int mouseX,int mouseY){  this.fontRendererObj.drawString(this.chestInventory.getDisplayName().getUnformattedText(),8,6,TEXT_COLOUR);  this.fontRendererObj.drawString(this.playerInventory.getDisplayName().getUnformattedText(),8,this.ySize - 96 + 2,TEXT_COLOUR);}  }
class C{  protected void uploadAndRegisterTestDataParent(String s3KeyPrefix,DataBridgeWebClient dataBridgeWebClient) throws Exception {  uploadTestDataFilesToS3(s3KeyPrefix,testManifestFiles,new ArrayList<String>());  UploaderInputManifestDto uploaderInputManifestDto=getTestUploaderInputManifestDto(TEST_PARENT_PARTITION_VALUE,TEST_SUB_PARTITION_VALUES,false);  S3FileTransferRequestParamsDto s3FileTransferRequestParamsDto=getTestS3FileTransferRequestParamsDto();  s3FileTransferRequestParamsDto.setS3KeyPrefix(s3KeyPrefix + "/");  BusinessObjectData businessObjectData=dataBridgeWebClient.preRegisterBusinessObjectData(uploaderInputManifestDto,StorageEntity.MANAGED_STORAGE,true);  BusinessObjectDataKey businessObjectDataKey=businessObjectDataHelper.getBusinessObjectDataKey(businessObjectData);  dataBridgeWebClient.addStorageFiles(businessObjectDataKey,uploaderInputManifestDto,s3FileTransferRequestParamsDto,StorageEntity.MANAGED_STORAGE);  dataBridgeWebClient.updateBusinessObjectDataStatus(businessObjectDataKey,BusinessObjectDataStatusEntity.VALID);  FileUtils.cleanDirectory(LOCAL_TEMP_PATH_INPUT.toFile());}  }
class C{  void createSampler(){  this.sampler=glGenSamplers();  glSamplerParameteri(this.sampler,GL_TEXTURE_MIN_FILTER,GL_NEAREST);  glSamplerParameteri(this.sampler,GL_TEXTURE_MAG_FILTER,GL_NEAREST);}  }
class C{  private boolean init(){  this.audioFormat=null;  dataStorageBuffer=null;  this.freq=0;  this.size=0;  this.setStartLoopPoint(0,false);  this.setEndLoopPoint(0,false);  this.setState(STATE_EMPTY);  return true;}  }
class C{  public void initiateRead(){  if (!readInProgress) {    sm.sendReadSlot(LnConstants.FC_SLOT);    readInProgress=true;  }}  }
class C{  public void addCdataSectionElements(String URI_and_localNames){  if (URI_and_localNames != null)   initCdataElems(URI_and_localNames);  if (m_StringOfCDATASections == null)   m_StringOfCDATASections=URI_and_localNames; else   m_StringOfCDATASections+=(" " + URI_and_localNames);}  }
class C{  public boolean isReportingAsyncExecExceptions(){  return reportingAsyncExecExceptions;}  }
class C{  @Override public void INVOKESTATIC(String className,String methName,String methDesc){  stackParamCount=0;  env.topFrame().invokeNeedsThis=false;  methodCall(className,methName,methDesc);}  }
class C{  public String toString(){  return "Subscription ( " + "id = " + this.id + TO_STRING_SEPARATOR+ "user = "+ this.username+ TO_STRING_SEPARATOR+ "mailbox = "+ this.mailbox+ TO_STRING_SEPARATOR+ " )";}  }
class C{  private void angularUnbind(String name,String noteId){  AngularObjectRegistry registry=interpreterContext.getAngularObjectRegistry();  registry.remove(name,noteId,null);}  }
class C{  public BulletParser parseTags(final boolean parseTags){  this.parseTags=parseTags;  return this;}  }
class C{  @Override protected void optimizeJoinGroup(final AST2BOpContext ctx,final StaticAnalysis sa,final IBindingSet[] bSets,final JoinGroupNode group){  final List<StatementPatternNode> spNodes=group.getStatementPatterns();  if (!spNodes.isEmpty()) {    final int nrExogeneousBindings=bSets == null ? 0 : bSets.length;    attachRangeCounts(ctx,spNodes,getExogenousBindings(bSets),nrExogeneousBindings);  }}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public boolean sameAs(BlockType other){  if (!this.isValid) {    return !other.isValid && (this.isTop == other.isTop);  } else {    if (!other.isValid) {      return false;    } else {      if (this.depth != other.depth) {        return false;      }      for (int i=0; i < this.depth; ++i) {        if (this.get(i) != other.get(i)) {          return false;        }      }      return true;    }  }}  }
class C{  public static boolean isNumber(int c){  return (c >= 48 && c <= 57);}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector result=new Vector();  OptionUtils.add(result,super.listOptions());  OptionUtils.addOption(result,filterTipText(),getDefaultFilter().getClass().getName(),"filter");  return OptionUtils.toEnumeration(result);}  }
class C{  public void write(OutStream out) throws IOException {  writeRGB(out);}  }
class C{  public void updateFrame(){  if (mSpritePause)   return;  if (customFrameList != null) {    updateCustomFrame();    return;  }  if (currentFrame > frameNum + 2)   return;  boolean edge=currentFrame % frameNumPerLine == 0;  if (edge) {    currentFrame++;    if (currentFrame <= frameNum) {      dy+=frameHeight;      dx=0;    }    repeatFrame();    return;  }  currentFrame++;  if (currentFrame <= frameNum) {    dx+=frameWidth;  }  repeatFrame();}  }
class C{  public final boolean equals(Object other){  if ((other == null) || !(other.getClass().equals(this.getClass()))) {    return false;  }  Attribute att=(Attribute)other;  if (!m_Name.equals(att.m_Name)) {    return false;  }  if (isNumeric() && att.isNumeric()) {    return true;  }  if (isNumeric() || att.isNumeric()) {    return false;  }  if (m_Values.size() != att.m_Values.size()) {    return false;  }  for (int i=0; i < m_Values.size(); i++) {    if (!m_Values.elementAt(i).equals(att.m_Values.elementAt(i))) {      return false;    }  }  return true;}  }
class C{  public Period plusMinutes(int minutes){  if (minutes == 0) {    return this;  }  int[] values=getValues();  getPeriodType().addIndexedField(this,PeriodType.MINUTE_INDEX,values,minutes);  return new Period(values,getPeriodType());}  }
class C{  public final void popPair(){  m_firstFree-=2;  m_map[m_firstFree]=DTM.NULL;  m_map[m_firstFree + 1]=DTM.NULL;}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  public boolean analyzeManifestContents(InputStream inputStream) throws IOException {  char[] chars=Util.getInputStreamAsCharArray(inputStream,-1,Util.UTF_8);  int state=START, substate=0;  StringBuffer currentJarToken=new StringBuffer();  int currentChar;  this.classpathSectionsCount=0;  this.calledFilesNames=null;  for (int i=0, max=chars.length; i < max; ) {    currentChar=chars[i++];    if (currentChar == '\r') {      if (i < max) {        currentChar=chars[i++];      }    }switch (state) {case START:      if (currentChar == CLASSPATH_HEADER_TOKEN[0]) {        state=IN_CLASSPATH_HEADER;        substate=1;      } else {        state=SKIP_LINE;      }    break;case IN_CLASSPATH_HEADER:  if (currentChar == '\n') {    state=START;  } else   if (currentChar != CLASSPATH_HEADER_TOKEN[substate++]) {    state=SKIP_LINE;  } else   if (substate == CLASSPATH_HEADER_TOKEN.length) {    state=PAST_CLASSPATH_HEADER;  }break;case PAST_CLASSPATH_HEADER:if (currentChar == ' ') {state=SKIPPING_WHITESPACE;this.classpathSectionsCount++;} else {return false;}break;case SKIPPING_WHITESPACE:if (currentChar == '\n') {state=CONTINUING;} else if (currentChar != ' ') {currentJarToken.append((char)currentChar);state=READING_JAR;} else {addCurrentTokenJarWhenNecessary(currentJarToken);}break;case CONTINUING:if (currentChar == '\n') {addCurrentTokenJarWhenNecessary(currentJarToken);state=START;} else if (currentChar == ' ') {state=SKIPPING_WHITESPACE;} else if (currentChar == CLASSPATH_HEADER_TOKEN[0]) {addCurrentTokenJarWhenNecessary(currentJarToken);state=IN_CLASSPATH_HEADER;substate=1;} else if (this.calledFilesNames == null) {addCurrentTokenJarWhenNecessary(currentJarToken);state=START;} else {addCurrentTokenJarWhenNecessary(currentJarToken);state=SKIP_LINE;}break;case SKIP_LINE:if (currentChar == '\n') {state=START;}break;case READING_JAR:if (currentChar == '\n') {state=CONTINUING;break;} else if (currentChar == ' ') {state=SKIPPING_WHITESPACE;} else {currentJarToken.append((char)currentChar);break;}addCurrentTokenJarWhenNecessary(currentJarToken);break;}}switch (state) {case START:return true;case IN_CLASSPATH_HEADER:return true;case PAST_CLASSPATH_HEADER:return false;case SKIPPING_WHITESPACE:addCurrentTokenJarWhenNecessary(currentJarToken);return true;case CONTINUING:addCurrentTokenJarWhenNecessary(currentJarToken);return true;case SKIP_LINE:if (this.classpathSectionsCount != 0) {if (this.calledFilesNames == null) {return false;}}return true;case READING_JAR:return false;}return true;}  }
class C{  public void addTone(ToneCategory tone){  tones.add(tone);}  }
class C{  public KafkaReader(TaskAttemptContext context,EtlRequest request,int clientTimeout,int fetchBufferSize) throws Exception {  this.fetchBufferSize=fetchBufferSize;  this.context=context;  log.info("bufferSize=" + fetchBufferSize);  log.info("timeout=" + clientTimeout);  kafkaRequest=request;  beginOffset=request.getOffset();  currentOffset=request.getOffset();  lastOffset=request.getLastOffset();  currentCount=0;  totalFetchTime=0;  URI uri=kafkaRequest.getURI();  simpleConsumer=new SimpleConsumer(uri.getHost(),uri.getPort(),CamusJob.getKafkaTimeoutValue(context),CamusJob.getKafkaBufferSize(context),CamusJob.getKafkaClientName(context));  log.info("Connected to leader " + uri + " beginning reading at offset "+ beginOffset+ " latest offset="+ lastOffset);  fetch();}  }
class C{  public void testDefault() throws IOException {  unitTestCore(createStats(),FREQ,DOC_LEN);}  }
class C{  public Tasks<VolumeRestRep> updateCopyAccessMode(URI id,CopiesParam input){  return postTasks(input,getContinuousCopiesUrl() + "/accessmode",id);}  }
class C{  public void reset(){  count=0;}  }
class C{  public CoapObserveRelation observeAndWait(CoapHandler handler,int accept){  Request request=newGet().setURI(uri).setObserve();  request.getOptions().setAccept(accept);  return observeAndWait(request,handler);}  }
class C{  public boolean isFieldOnly(){  return m_vo.IsFieldOnly;}  }
class C{  public static ItemStack toMaxDurability(ItemStack item){  ItemStack item2=item.clone();  item2.setDurability((short)0);  return item2;}  }
class C{  public Reaction basicGetReaction(){  return reaction;}  }
class C{  public static void assertPathExists(FileSystem fileSystem,String message,Path path) throws IOException {  if (!fileSystem.exists(path)) {    fail(message + ": not found " + path+ " in "+ path.getParent());  }}  }
class C{  public boolean isEmpty(){  return typeString.length() == 0;}  }
class C{  public static <A,B>Pair<A,B> create(A a,B b){  return new Pair<A,B>(a,b);}  }
class C{  public BranchOperand(Instruction targ){  if (VM.VerifyAssertions)   VM._assert(Label.conforms(targ));  target=targ;}  }
class C{  protected Size2D arrangeFN(BlockContainer container,Graphics2D g2,RectangleConstraint constraint){  List blocks=container.getBlocks();  Block b=(Block)blocks.get(0);  Size2D s=b.arrange(g2,RectangleConstraint.NONE);  double width=constraint.getWidth();  Rectangle2D bounds=new Rectangle2D.Double((width - s.width) / 2.0,0.0,s.width,s.height);  b.setBounds(bounds);  return new Size2D((width - s.width) / 2.0,s.height);}  }
class C{  private Name referenceBridgeName(){  StringBuilder buf=new StringBuilder();  buf.append(names.lambda);  buf.append("MR$");  buf.append(enclosingMethodName());  buf.append('$');  buf.append(syntheticMethodNameComponent(tree.sym.name));  buf.append('$');  String disam=referenceBridgeDisambiguation();  buf.append(Integer.toHexString(disam.hashCode()));  buf.append('$');  buf.append(syntheticMethodNameCounts.getIndex(buf));  String result=buf.toString();  return names.fromString(result);}  }
class C{  private void validateNumCoresBlockSort(){  String numCoresStr=carbonProperties.getProperty(CarbonCommonConstants.NUM_CORES_BLOCK_SORT,CarbonCommonConstants.NUM_CORES_BLOCK_SORT_DEFAULT_VAL);  try {    int numCores=Integer.parseInt(numCoresStr);    if (numCores < CarbonCommonConstants.NUM_CORES_BLOCK_SORT_MIN_VAL || numCores > CarbonCommonConstants.NUM_CORES_BLOCK_SORT_MAX_VAL) {      LOGGER.info("The num cores value \"" + numCoresStr + "\" for block sort is invalid. Using the default value \""+ CarbonCommonConstants.NUM_CORES_BLOCK_SORT_DEFAULT_VAL);      carbonProperties.setProperty(CarbonCommonConstants.NUM_CORES_BLOCK_SORT,CarbonCommonConstants.NUM_CORES_BLOCK_SORT_DEFAULT_VAL);    }  } catch (  NumberFormatException e) {    LOGGER.info("The num cores value \"" + numCoresStr + "\" for block sort is invalid. Using the default value \""+ CarbonCommonConstants.NUM_CORES_BLOCK_SORT_DEFAULT_VAL);    carbonProperties.setProperty(CarbonCommonConstants.NUM_CORES_BLOCK_SORT,CarbonCommonConstants.NUM_CORES_BLOCK_SORT_DEFAULT_VAL);  }}  }
class C{  public boolean isUsageAndCrashReportingEnabled(){  if (!mSharedPreferences.contains(PREF_METRICS_REPORTING)) {    setUsageAndCrashReporting(isUploadCrashDumpEnabled());  }  return mSharedPreferences.getBoolean(PREF_METRICS_REPORTING,false);}  }
class C{  public static void init(){  int size=ToastConfiguration.Property.THREAD_POOL_SIZE.asInt();  INSTANCE=new Async(size,size,"Toast|Async");}  }
class C{  public static void flags(long memPtr,int flags){  assert !isExternal(memPtr) : "Attempt to update external memory chunk flags: " + memPtr;  GridUnsafe.putInt(memPtr + MEM_HDR_OFF_FLAGS,flags);}  }
class C{  @SuppressWarnings("unchecked") public static <T>T[] sort(T[] self,@ClosureParams(value=FromString.class,options={"T","T,T"}) Closure closure){  return sort(self,false,closure);}  }
class C{  protected void sequence_UnitRef(ISerializationContext context,UnitName semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,GamlPackage.Literals.UNIT_NAME__REF) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,GamlPackage.Literals.UNIT_NAME__REF));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getUnitRefAccess().getRefUnitFakeDefinitionIDTerminalRuleCall_1_0_1(),semanticObject.getRef());  feeder.finish();}  }
class C{  public static ReferenceRegions regionsVcf(File f) throws IOException {  if (f != null) {    try (VcfReader reader=VcfReader.openVcfReader(f)){      return ReferenceRegions.regions(reader);    }   } else {    return null;  }}  }
class C{  private static DateTickUnitType intToUnitType(int unit){switch (unit) {case YEAR:    return DateTickUnitType.YEAR;case MONTH:  return DateTickUnitType.MONTH;case DAY:return DateTickUnitType.DAY;case HOUR:return DateTickUnitType.HOUR;case MINUTE:return DateTickUnitType.MINUTE;case SECOND:return DateTickUnitType.SECOND;case MILLISECOND:return DateTickUnitType.MILLISECOND;default :throw new IllegalArgumentException("Unrecognised 'unit' value " + unit + ".");}}  }
class C{  public PatternPaint(GraphicsNode node,Rectangle2D patternRegion,boolean overflow,AffineTransform patternTransform){  if (node == null) {    throw new IllegalArgumentException();  }  if (patternRegion == null) {    throw new IllegalArgumentException();  }  this.node=node;  this.patternRegion=patternRegion;  this.overflow=overflow;  this.patternTransform=patternTransform;  CompositeGraphicsNode comp=new CompositeGraphicsNode();  comp.getChildren().add(node);  Filter gnr=comp.getGraphicsNodeRable(true);  Rectangle2D padBounds=(Rectangle2D)patternRegion.clone();  if (overflow) {    Rectangle2D nodeBounds=comp.getBounds();    padBounds.add(nodeBounds);  }  tile=new PadRable8Bit(gnr,padBounds,PadMode.ZERO_PAD);}  }
class C{  private static void print(String str){  System.out.println(">>> " + str);}  }
class C{  private void registerRouters(){  new AuthBluePrint().register();  new RootBluePrint().register();}  }
class C{  public boolean forEachKey(TIntProcedure procedure){  return forEach(procedure);}  }
class C{  public static String locationJSON(String provider,Location location,boolean cached,boolean buffer,double bufferLat,double bufferedLon,float bufferedAccuracy,int bufferSize){  final JSONObject json=new JSONObject();  if (location != null) {    try {      json.put("provider",provider);      json.put("timestamp",location.getTime());      json.put("latitude",location.getLatitude());      json.put("longitude",location.getLongitude());      json.put("altitude",location.getAltitude());      json.put("accuracy",location.getAccuracy());      json.put("bearing",location.getBearing());      json.put("speed",location.getSpeed());      json.put("cached",cached);      json.put("buffer",buffer);      json.put("bufferSize",bufferSize);      json.put("bufferedLatitude",bufferLat);      json.put("bufferedLongitude",bufferedLon);      json.put("bufferedAccuracy",bufferedAccuracy);    } catch (    JSONException exc) {      logJSONException(exc);    }  }  return json.toString();}  }
class C{  public boolean isEmpty(){  return this == NULL || fOffset < 0 || fLength < 0;}  }
class C{  private boolean isFinalStage(State s){  return s.taskState.stage == TaskState.TaskStage.FINISHED || s.taskState.stage == TaskState.TaskStage.FAILED || s.taskState.stage == TaskState.TaskStage.CANCELLED;}  }
class C{  private boolean processLogParameter(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  String serverID=WebUtil.getParameter(request,"Log");  if (serverID == null || serverID.length() == 0)   return false;  log.info("ServerID=" + serverID);  AdempiereServer server=m_serverMgr.getServer(serverID);  if (server == null) {    m_message=new p();    m_message.addElement(new strong("Server not found: "));    m_message.addElement(serverID);    return false;  }  WebDoc doc=WebDoc.create("Adempiere Server Monitor Log");  body b=doc.getBody();  p para=new p();  a link=new a("adempiereMonitor#" + serverID,"Return");  para.addElement(link);  b.addElement(para);  b.addElement(new h2(server.getName()));  table table=new table();  table.setBorder(1);  table.setCellSpacing(2);  table.setCellPadding(2);  tr line=new tr();  line.addElement(new th().addElement("Created"));  line.addElement(new th().addElement("Summary"));  line.addElement(new th().addElement("Reference"));  line.addElement(new th().addElement("TextMsg"));  table.addElement(line);  AdempiereProcessorLog[] logs=server.getLogs();  for (int i=0; i < logs.length; i++) {    AdempiereProcessorLog pLog=logs[i];    line=new tr();    line.addElement(new td().addElement(WebEnv.getCellContent(pLog.getCreated())));    line.addElement(new td().addElement(WebEnv.getCellContent(pLog.getSummary())));    line.addElement(new td().addElement(WebEnv.getCellContent(pLog.getReference())));    line.addElement(new td().addElement(WebEnv.getCellContent(pLog.getTextMsg())));    table.addElement(line);  }  b.addElement(table);  link=new a("#top","Top");  b.addElement(link);  WebUtil.createResponse(request,response,this,null,doc,false);  return true;}  }
class C{  AlignmentImpl(){  this(false,Anchor.LEFT);}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  public void defineDictionary(String name,Map<String,Object> mapping){  dictionaries.put(name,mapping);}  }
class C{  public static void main(String args[]){  new MapColoringApp().startApplication();}  }
class C{  public void rollbackToSavepoint(String name){  if (savepoints == null) {    throw DbException.get(ErrorCode.SAVEPOINT_IS_INVALID_1,name);  }  final Savepoint savepoint=savepoints.get(name);  if (savepoint == null) {    throw DbException.get(ErrorCode.SAVEPOINT_IS_INVALID_1,name);  }  if (transaction != null) {    transaction.rollbackToSavepoint(name);  }  savepoints.remove(name);}  }
class C{  @Override public Class forClass(){  return forClass;}  }
class C{  public static MediaUri of(long id,Uri uri){  String name=uri.getLastPathSegment();  if (name == null)   throw new IllegalArgumentException("uri must have a file component");  MediaType type=MediaType.IMAGE;  if (name.toLowerCase().endsWith(".gif"))   type=MediaType.GIF;  if (name.toLowerCase().matches(".*\\.(webm|mpe?g|mp4)"))   type=MediaType.VIDEO;  return new MediaUri(id,uri,type);}  }
class C{  static public void assertEquals(String message,float expected,float actual,float delta){  if (Float.compare(expected,actual) == 0) {    return;  }  if (!(Math.abs(expected - actual) <= delta)) {    failNotEquals(message,new Float(expected),new Float(actual));  }}  }
class C{  private static void createFile(File dest,String path,int size) throws IOException {  InputStream src=Configuration.class.getClassLoader().getResourceAsStream(path);  ReadableByteChannel input=Channels.newChannel(src);  FileOutputStream output=new FileOutputStream(dest);  output.getChannel().transferFrom(input,0,size);  output.close();}  }
class C{  public static byte[] randomBytes(int length){  byte[] bytes=new byte[length];  SEEDED_RANDOM.nextBytes(bytes);  return bytes;}  }
class C{  @Override public NotificationChain eBasicRemoveFromContainerFeature(NotificationChain msgs){switch (eContainerFeatureID()) {case SGraphPackage.TRANSITION__SOURCE:    return eInternalContainer().eInverseRemove(this,SGraphPackage.VERTEX__OUTGOING_TRANSITIONS,Vertex.class,msgs);}return super.eBasicRemoveFromContainerFeature(msgs);}  }
class C{  private void dynamicInitialise(){  findChargeElementID();  ListModelTable model=new ListModelTable(getData());  m_tblData.setData(model,getColumnNames());  setColumnClass(m_tblData);  findTaxCategoryID();  return;}  }
class C{  public void testGetF10(){  AbstractThrottle instance=new AbstractThrottleImpl();  boolean expResult=false;  boolean result=instance.getF10();  assertEquals(expResult,result);}  }
class C{  protected NormalRewrittenUrl(String target){  this.target=target;}  }
class C{  @Override public void updateByte(String columnLabel,byte x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateByte(" + columnLabel + ", "+ x+ ");");    }    update(columnLabel,ValueByte.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  private synchronized void merge(Collective peer){synchronized (cache) {    Iterator i=peer.cache.values().iterator();    while (i.hasNext()) {      ContributionBox cb=(ContributionBox)i.next();      ContributionBox x=(ContributionBox)cache.get(cb.contributor.name);      if (x == null || x.timeStamp < cb.timeStamp) {        cache.put(cb.contributor.name,cb);      }    }  }synchronized (commands) {    Iterator i=peer.commands.entrySet().iterator();    while (i.hasNext()) {      Map.Entry e=(Map.Entry)i.next();      Comparable time=(Comparable)commands.get(e.getKey());      if (time == null || time.compareTo(e.getValue()) < 0) {        commands.put(e.getKey(),e.getValue());      }    }  }  cutToSize();}  }
class C{  public void removeListener(final IGraphSearchFieldListener listener){  m_listenerProvider.removeListener(listener);}  }
class C{  public RunQueue(boolean isDaemon,int priority,boolean autoStart){  this(null,isDaemon,priority,autoStart);}  }
class C{  public MutableAffineTransformer(AffineTransform transform){  super(transform);}  }
class C{  public SignificantTermsBuilder executionHint(String executionHint){  this.executionHint=executionHint;  return this;}  }
class C{  @RequestMapping("flush_search_results_cache") @ResponseStatus(HttpStatus.OK) public void clearSearchResultsCache(){  LOG.info("------ clearSearchResultsCache was called --------");  cacheUpdateService.clearSearchResults();}  }
class C{  public NameSpace(String prefix,String uri){  m_prefix=prefix;  m_uri=uri;}  }
class C{  public boolean isFinishConnect() throws IOException {  return socketChannel.finishConnect();}  }
class C{  public void selectAll(){  setSelection(getSelectableNodes());}  }
class C{  public void removeSelectionListener(final NetworkSelectionListener l){  listenerList.remove(NetworkSelectionListener.class,l);}  }
class C{  public static float strength(final Collection<Unit> units,final boolean attacking,final boolean sea){  int strength=0;  for (  final Unit u : units) {    final UnitAttachment unitAttachment=UnitAttachment.get(u.getType());    if (unitAttachment.getIsInfrastructure()) {    } else     if (unitAttachment.getIsSea() == sea) {      strength+=2;      strength+=1.5 * unitAttachment.getHitPoints();      if (attacking) {        strength+=unitAttachment.getAttack(u.getOwner());      } else {        strength+=unitAttachment.getDefense(u.getOwner());      }      if (attacking) {        if (unitAttachment.getAttack(u.getOwner()) == 0) {          strength-=1.2;        }      }    }  }  if (attacking) {    final int art=Match.countMatches(units,Matches.UnitIsArtillery);    final int artSupport=Match.countMatches(units,Matches.UnitIsArtillerySupportable);    strength+=Math.min(art,artSupport);  }  return strength;}  }
class C{  public HaskellException(final String msg){  this(msg,null);}  }
class C{  public boolean hasFeedLink(){  return hasExtension(FeedLink.class);}  }
class C{  public boolean addStrictEquals(int streamLeft,String propertyLeft,ExprIdentNode nodeLeft,int streamRight,String propertyRight,ExprIdentNode nodeRight){  check(streamLeft,streamRight);  if (propertyLeft == null || propertyRight == null) {    throw new IllegalArgumentException("Null property names supplied");  }  if (streamLeft == streamRight) {    throw new IllegalArgumentException("Streams supplied are the same");  }  boolean addedLeft=internalAddEquals(streamLeft,propertyLeft,nodeLeft,streamRight,nodeRight);  boolean addedRight=internalAddEquals(streamRight,propertyRight,nodeRight,streamLeft,nodeLeft);  return addedLeft || addedRight;}  }
class C{  public static TransportUnit createTransportUnit(String unitId,String transportUnitTypeBk){  TransportUnit tu=new TransportUnit(unitId);  tu.setTransportUnitType(em.createQuery("select tu from TransportUnitType tu where tu.type = ?1",TransportUnitType.class).setParameter(1,transportUnitTypeBk).getSingleResult());  return tu;}  }
class C{  public String toString(){  return new String(b,0,i_end);}  }
class C{  public void init(boolean forEncryption,CipherParameters params){  if (!(params instanceof ParametersWithIV)) {    throw new IllegalArgumentException("VMPC init parameters must include an IV");  }  ParametersWithIV ivParams=(ParametersWithIV)params;  if (!(ivParams.getParameters() instanceof KeyParameter)) {    throw new IllegalArgumentException("VMPC init parameters must include a key");  }  KeyParameter key=(KeyParameter)ivParams.getParameters();  this.workingIV=ivParams.getIV();  if (workingIV == null || workingIV.length < 1 || workingIV.length > 768) {    throw new IllegalArgumentException("VMPC requires 1 to 768 bytes of IV");  }  this.workingKey=key.getKey();  initKey(this.workingKey,this.workingIV);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:35.889 -0500",hash_original_method="64ACE3DFA3E244FA74278C4A66D2BC47",hash_generated_method="57E1DC3A4D7705403B090790BEF7E5E8") public final String matchCategories(Set<String> categories){  if (categories == null) {    return null;  }  Iterator<String> it=categories.iterator();  if (mCategories == null) {    return it.hasNext() ? it.next() : null;  }  while (it.hasNext()) {    final String category=it.next();    if (!mCategories.contains(category)) {      return category;    }  }  return null;}  }
class C{  private static boolean isGifHeader(final byte[] imageHeaderBytes,final int headerSize){  if (headerSize < GIF_HEADER_LENGTH) {    return false;  }  return ImageFormatCheckerUtils.startsWithPattern(imageHeaderBytes,GIF_HEADER_87A) || ImageFormatCheckerUtils.startsWithPattern(imageHeaderBytes,GIF_HEADER_89A);}  }
class C{  public final void sort(){  flushLocal();  ((SortTODSharedDeque)queue).sort();}  }
class C{  private static synchronized InputStream contentUrlStream(String url){  if (url.startsWith(ANDROID_CONTENT)) {    try {      int mimeIndex=url.lastIndexOf('?');      if (mimeIndex != -1) {        url=url.substring(0,mimeIndex);      }      Uri uri=Uri.parse(url);      return sContext.getContentResolver().openInputStream(uri);    } catch (    Exception e) {      Log.e(LOGTAG,"Exception: " + url);      return null;    }  } else {    return null;  }}  }
class C{  public static String toString(URL url,String encoding) throws IOException {  InputStream inputStream=url.openStream();  try {    return toString(inputStream,encoding);  }  finally {    inputStream.close();  }}  }
class C{  public static void ignorePermission(String permission){  if (!isIgnoredPermission(permission)) {    ArrayList<String> ignoredPermissions=getIgnoredPermissions();    ignoredPermissions.add(permission);    Set<String> set=new HashSet<String>();    set.addAll(ignoredPermissions);    sharedPreferences.edit().putStringSet(KEY_IGNORED_PERMISSIONS,set).apply();  }}  }
class C{  public static String unescape(String string){  int length=string.length();  StringBuffer sb=new StringBuffer();  for (int i=0; i < length; ++i) {    char c=string.charAt(i);    if (c == '+') {      c=' ';    } else     if (c == '%' && i + 2 < length) {      int d=JSONTokener.dehexchar(string.charAt(i + 1));      int e=JSONTokener.dehexchar(string.charAt(i + 2));      if (d >= 0 && e >= 0) {        c=(char)(d * 16 + e);        i+=2;      }    }    sb.append(c);  }  return sb.toString();}  }
class C{  public final boolean isQueued(Thread thread){  if (thread == null)   throw new NullPointerException();  for (Node p=tail; p != null; p=p.prev)   if (p.thread == thread)   return true;  return false;}  }
class C{  public static LRIcon urlIcon(final URL url){  return url == null ? null : "mailto".equals(url.getProtocol()) ? LIcons.F_MAIL_AT_SIGN : LIcons.F_APPLICATION_BROWSER;}  }
class C{  public synchronized void quit(){  if (null != conn) {    conn.close();  }  System.exit(0);}  }
class C{  public static String random(int count,boolean letters,boolean numbers){  return random(count,0,0,letters,numbers);}  }
class C{  public int next(){  if (_startNode == _currentNode)   return NULL;  int nodeType=_nodeType;  int node=_startNode;  int expType=getExpandedTypeID(node);  _currentNode=node;  if (nodeType >= DTM.NTYPES) {    if (nodeType == expType) {      return returnNode(node);    }  } else {    if (expType < DTM.NTYPES) {      if (expType == nodeType) {        return returnNode(node);      }    } else {      if (m_expandedNameTable.getType(expType) == nodeType) {        return returnNode(node);      }    }  }  return END;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case GamlPackage.STRING_EVALUATOR__TOTO:    return TOTO_EDEFAULT == null ? toto != null : !TOTO_EDEFAULT.equals(toto);case GamlPackage.STRING_EVALUATOR__EXPR:  return expr != null;}return super.eIsSet(featureID);}  }
class C{  @Override public void saveViolation(Violation violation,boolean force){  saveViolation(violation);}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    int progress, oldProgress=-1;    double[] data;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    double multiplier=Math.PI / 180;    if (inputFile.getZUnits().toLowerCase().contains("rad")) {      multiplier=1;    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          outputFile.setValue(row,col,Math.cos(z * multiplier));        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static void putStringSet(String key,HashSet<String> value){  final Editor editor=getOptimusPref().edit();  editor.putStringSet(key,value);}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  private static Map<String,List<List<Distributable>>> assignBlocksToTasksPerNode(Map<String,List<Distributable>> nodeBlocksMap,int noOfTasksPerNode){  Map<String,List<List<Distributable>>> outputMap=new HashMap<String,List<List<Distributable>>>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);  for (  Map.Entry<String,List<Distributable>> eachNode : nodeBlocksMap.entrySet()) {    List<Distributable> blockOfEachNode=eachNode.getValue();    createTaskListForNode(outputMap,noOfTasksPerNode,eachNode.getKey());    divideBlockToTasks(outputMap,eachNode.getKey(),blockOfEachNode);  }  return outputMap;}  }
class C{  @SuppressWarnings("unchecked") public List<FileSensitivityAPIEntity> filterSensitivity(String site,String resourceFilter){  ListQueryResource resource=new ListQueryResource();  ListQueryAPIResponseEntity ret=resource.listQuery(String.format("FileSensitivityService[@site=\"%s\"]{@filedir=" + resourceFilter + ".*}",site),null,null,Integer.MAX_VALUE,null,false,false,0L,0,false,0,null);  List<FileSensitivityAPIEntity> list=(List<FileSensitivityAPIEntity>)ret.getObj();  if (list == null)   return Collections.emptyList();  return list;}  }
class C{  public int[] dateToLMST(Date date){  if (timeUtil == null) {    timeUtil=new TimeUtil(getEpoch().getTime(),getToEarth());  }  return (timeUtil.time2LMST(date.getTime()));}  }
class C{  @SuppressWarnings("unchecked") private Segment<K,V> ensureSegment(int k){  final Segment<K,V>[] ss=this.segments;  long u=(k << SSHIFT) + SBASE;  Segment<K,V> seg;  if ((seg=(Segment<K,V>)UNSAFE.getObjectVolatile(ss,u)) == null) {    Segment<K,V> proto=ss[0];    int cap=proto.table.length;    float lf=proto.loadFactor;    int threshold=(int)(cap * lf);    HashEntry<K,V>[] tab=(HashEntry<K,V>[])new HashEntry<?,?>[cap];    if ((seg=(Segment<K,V>)UNSAFE.getObjectVolatile(ss,u)) == null) {      Segment<K,V> s=new Segment<K,V>(lf,threshold,tab);      while ((seg=(Segment<K,V>)UNSAFE.getObjectVolatile(ss,u)) == null) {        if (UNSAFE.compareAndSwapObject(ss,u,null,seg=s))         break;      }    }  }  return seg;}  }
class C{  @Override public int clampViewPositionVertical(View child,int top,int dy){  return Math.min(Math.max(top,mAudioView.getPaddingTop()),mAudioView.getmContainer().getHeight());}  }
class C{  public AbstractFindAction(Application app,@Nullable View view){  super(app,view);  ResourceBundleUtil labels=ResourceBundleUtil.getBundle("org.jhotdraw.app.Labels");  labels.configureAction(this,ID);}  }
class C{  public static void writeVarInt(ByteBuffer buff,int x){  while ((x & ~0x7f) != 0) {    buff.put((byte)(0x80 | (x & 0x7f)));    x>>>=7;  }  buff.put((byte)x);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.PROPERTY_GETTER_DECLARATION__ANNOTATION_LIST:    setAnnotationList((PropertyAssignmentAnnotationList)null);  return;}super.eUnset(featureID);}  }
class C{  public static int parseDigit(char digit){  if ((digit >= '0') && (digit <= '9')) {    return digit - '0';  }  if (CharUtil.isLowercaseAlpha(digit)) {    return 10 + digit - 'a';  }  return 10 + digit - 'A';}  }
class C{  public boolean isSetHello(){  return this.hello != null;}  }
class C{  public BusinessObjectData createBusinessObjectData(BusinessObjectDataCreateRequest request,boolean fileSizeRequired){  if (StringUtils.isBlank(request.getStatus())) {    request.setStatus(BusinessObjectDataStatusEntity.VALID);  } else {    request.setStatus(request.getStatus().trim());  }  BusinessObjectDataStatusEntity businessObjectDataStatusEntity=businessObjectDataStatusDaoHelper.getBusinessObjectDataStatusEntity(request.getStatus());  validateBusinessObjectDataCreateRequest(request,fileSizeRequired,businessObjectDataStatusEntity);  BusinessObjectFormatEntity businessObjectFormatEntity=businessObjectFormatDaoHelper.getBusinessObjectFormatEntity(new BusinessObjectFormatKey(request.getNamespace(),request.getBusinessObjectDefinitionName(),request.getBusinessObjectFormatUsage(),request.getBusinessObjectFormatFileType(),request.getBusinessObjectFormatVersion()));  validateAttributesAgainstFormat(request,businessObjectFormatEntity);  Assert.isTrue(businessObjectFormatEntity.getPartitionKey().equalsIgnoreCase(request.getPartitionKey()),String.format("Partition key \"%s\" doesn't match configured business object format partition key \"%s\".",request.getPartitionKey(),businessObjectFormatEntity.getPartitionKey()));  BusinessObjectDataEntity existingBusinessObjectDataEntity=businessObjectDataDao.getBusinessObjectDataByAltKey(new BusinessObjectDataKey(request.getNamespace(),request.getBusinessObjectDefinitionName(),request.getBusinessObjectFormatUsage(),request.getBusinessObjectFormatFileType(),request.getBusinessObjectFormatVersion(),request.getPartitionValue(),request.getSubPartitionValues(),null));  if (existingBusinessObjectDataEntity != null && (!Boolean.TRUE.equals(request.isCreateNewVersion()) || Boolean.TRUE.equals(existingBusinessObjectDataEntity.getStatus().getPreRegistrationStatus()))) {    throw new AlreadyExistsException("Unable to create business object data because it already exists.");  }  Integer businessObjectDataVersion=existingBusinessObjectDataEntity == null ? BusinessObjectDataEntity.BUSINESS_OBJECT_DATA_INITIAL_VERSION : existingBusinessObjectDataEntity.getVersion() + 1;  BusinessObjectDataEntity newVersionBusinessObjectDataEntity=createBusinessObjectDataEntity(request,businessObjectFormatEntity,businessObjectDataVersion,businessObjectDataStatusEntity);  if (existingBusinessObjectDataEntity != null) {    existingBusinessObjectDataEntity.setLatestVersion(Boolean.FALSE);    businessObjectDataDao.saveAndRefresh(existingBusinessObjectDataEntity);  }  BusinessObjectDataStatusHistoryEntity businessObjectDataStatusHistoryEntity=new BusinessObjectDataStatusHistoryEntity();  businessObjectDataStatusHistoryEntity.setBusinessObjectData(newVersionBusinessObjectDataEntity);  businessObjectDataStatusHistoryEntity.setStatus(businessObjectDataStatusEntity);  List<BusinessObjectDataStatusHistoryEntity> businessObjectDataStatusHistoryEntities=new ArrayList<>();  businessObjectDataStatusHistoryEntities.add(businessObjectDataStatusHistoryEntity);  newVersionBusinessObjectDataEntity.setHistoricalStatuses(businessObjectDataStatusHistoryEntities);  newVersionBusinessObjectDataEntity=businessObjectDataDao.saveAndRefresh(newVersionBusinessObjectDataEntity);  sqsNotificationEventService.processBusinessObjectDataStatusChangeNotificationEvent(businessObjectDataHelper.getBusinessObjectDataKey(newVersionBusinessObjectDataEntity),businessObjectDataStatusEntity.getCode(),null);  return businessObjectDataHelper.createBusinessObjectDataFromEntity(newVersionBusinessObjectDataEntity);}  }
class C{  private void displayCastList(Cursor cursor){  if (cursor.moveToFirst()) {    castArrayList=new ArrayList<VideoType.Cast>(cursor.getCount());    do {      castArrayList.add(new VideoType.Cast(cursor.getString(TVShowCastListQuery.NAME),cursor.getInt(TVShowCastListQuery.ORDER),cursor.getString(TVShowCastListQuery.ROLE),cursor.getString(TVShowCastListQuery.THUMBNAIL)));    } while (cursor.moveToNext());    UIUtils.setupCastInfo(getActivity(),castArrayList,videoCastList,AllCastActivity.buildLaunchIntent(getActivity(),tvshowTitle,castArrayList));  }}  }
class C{  protected Marker(Paint paint){  this(paint,new BasicStroke(0.5f),Color.gray,new BasicStroke(0.5f),0.80f);}  }
