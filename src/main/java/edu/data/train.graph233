class C{  @Override public boolean fire(final Player player,final Sentence sentence,final Entity npc){  final String temp=player.getQuest(questSlot,questIndex);  if (temp == null) {    return false;  }  final List<String> tokens=Arrays.asList(temp.split(","));  if ((tokens.size() % 5) != 0) {    logger.error("Wrong record in player's " + player.getName() + " quest slot ("+ questSlot+ ") : ["+ player.getQuest(questSlot)+ "]");    return false;  }  for (int i=0; i < tokens.size() / 5; i++) {    final String creatureName=tokens.get(i * 5);    int toKillSolo;    int toKillShared;    int killedSolo;    int killedShared;    try {      toKillSolo=Integer.parseInt(tokens.get(i * 5 + 1));      toKillShared=Integer.parseInt(tokens.get(i * 5 + 2));      killedSolo=Integer.parseInt(tokens.get(i * 5 + 3));      killedShared=Integer.parseInt(tokens.get(i * 5 + 4));    } catch (    NumberFormatException npe) {      logger.error("NumberFormatException while parsing numbers in quest slot " + questSlot + " of player "+ player.getName()+ " , creature "+ i * 5);      return false;    }    final int diffSolo=player.getSoloKill(creatureName) - killedSolo - toKillSolo;    final int diffShared=player.getSharedKill(creatureName) - killedShared - toKillShared;    if (diffSolo < 0) {      return false;    }    if ((diffSolo + diffShared) < 0) {      return false;    }  }  return true;}  }
class C{  public void paint(Graphics g){  g.clearRect(0,0,width,height);}  }
class C{  public Packet nextResult(long timeout){  try {    return resultQueue.poll(timeout,TimeUnit.MILLISECONDS);  } catch (  InterruptedException e) {    throw new RuntimeException(e);  }}  }
class C{  public boolean hasCity(){  return super.hasElement(City.KEY);}  }
class C{  public String lossFunctionTipText(){  return "The loss function to use. Hinge loss (SVM), " + "log loss (logistic regression) or " + "squared loss (regression).";}  }
class C{  public void insert(Action a,int index){  JMenuItem mi=createActionComponent(a);  mi.setAction(a);  insert(mi,index);}  }
class C{  public static final SandboxRay show(Window owner,SandboxRay ray){  EditRayDialog ard=new EditRayDialog(owner,ray);  ard.setLocationRelativeTo(owner);  ard.setVisible(true);  if (!ard.canceled) {    return ard.rayPanel.getRay();  }  return ray;}  }
class C{  @DSComment("IO movement methodName") @DSSpec(DSCat.IO) @DSSink({DSSinkKind.NETWORK}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:07.648 -0500",hash_original_method="F0676E3BCA654DF56D2BFA1EDDBDFD76",hash_generated_method="2353F46655A0E31C5FAD87BE14A59420") public void send(DatagramPacket pack) throws IOException {  pack.getTaint();  checkOpen();  ensureBound();  InetAddress packAddr=pack.getAddress();  if (address != null) {    if (packAddr != null) {      if (!address.equals(packAddr) || port != pack.getPort()) {        throw new IllegalArgumentException("Packet address mismatch with connected address");      }    } else {      pack.setAddress(address);      pack.setPort(port);    }  } else {    if (packAddr == null) {      throw new NullPointerException("Destination address is null");    }  }  impl.send(pack);}  }
class C{  public static float reduceSinAngle(float radians){  radians%=TWO_PI;  if (Math.abs(radians) > PI) {    radians=radians - (TWO_PI);  }  if (Math.abs(radians) > HALF_PI) {    radians=PI - radians;  }  return radians;}  }
class C{  public Random(long seed){  this(seed,false);}  }
class C{  public static Transformer newFormatingTransformer() throws TransformerConfigurationException {  TransformerFactory factory=TransformerFactory.newInstance();  Transformer transformer=factory.newTransformer();  transformer.setOutputProperty(OutputKeys.ENCODING,"UTF-8");  transformer.setOutputProperty(OutputKeys.VERSION,"1.0");  transformer.setOutputProperty(OutputKeys.METHOD,"xml");  transformer.setOutputProperty(OutputKeys.INDENT,"yes");  transformer.setOutputProperty("{http://xml.apache.org/xalan}indent-amount","2");  return transformer;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void startApplication(){  AgentAppFrame frame=constructApplicationFrame();  frame.centerPane.setDividerLocation(frame.centerPane.getResizeWeight());  frame.setVisible(true);}  }
class C{  protected final static byte cleanMessageType(byte esmClass){  return (byte)(esmClass & 0xc3);}  }
class C{  public static Lanes convertTo20(LaneDefinitions11 lanedefs11,Network network){  return convertTo20(lanedefs11,network,UTurnCreation.ON_LEFT_LANE);}  }
class C{  public static JavaCompilationEnvironment create(JSweetOptions jsweetOptions,String classPath){  JSweetContext context=new JSweetContext(jsweetOptions);  Options options=Options.instance(context);  options.put(Option.CLASSPATH,classPath);  options.put(Option.XLINT,"path");  context.put(Log.outKey,new PrintWriter(System.out));  options.put(Option.XLINT_CUSTOM.text + "-" + LintCategory.OVERRIDES.option,"true");  JavacFileManager.preRegister(context);  JavaFileManager fileManager=context.get(JavaFileManager.class);  Log log=Log.instance(context);  log.emitWarnings=false;  log.suppressNotes=true;  Types javacTypes=Types.instance(context);  JavaCompiler compiler=JavaCompiler.instance(context);  compiler.attrParseOnly=true;  compiler.verbose=false;  compiler.genEndPos=true;  compiler.keepComments=true;  Names names=Names.instance(context);  Symtab symtab=Symtab.instance(context);  return new JavaCompilationEnvironment(fileManager,compiler,options,context,log,javacTypes,names,symtab);}  }
class C{  private int readAnnotationValue(int v,final char[] buf,final String name,final AnnotationVisitor av){  int i;  if (av == null) {switch (b[v] & 0xFF) {case 'e':      return v + 5;case '@':    return readAnnotationValues(v + 3,buf,true,null);case '[':  return readAnnotationValues(v + 1,buf,false,null);default :return v + 3;}}switch (b[v++] & 0xFF) {case 'I':case 'J':case 'F':case 'D':av.visit(name,readConst(readUnsignedShort(v),buf));v+=2;break;case 'B':av.visit(name,(byte)readInt(items[readUnsignedShort(v)]));v+=2;break;case 'Z':av.visit(name,readInt(items[readUnsignedShort(v)]) == 0 ? Boolean.FALSE : Boolean.TRUE);v+=2;break;case 'S':av.visit(name,(short)readInt(items[readUnsignedShort(v)]));v+=2;break;case 'C':av.visit(name,(char)readInt(items[readUnsignedShort(v)]));v+=2;break;case 's':av.visit(name,readUTF8(v,buf));v+=2;break;case 'e':av.visitEnum(name,readUTF8(v,buf),readUTF8(v + 2,buf));v+=4;break;case 'c':av.visit(name,Type.getType(readUTF8(v,buf)));v+=2;break;case '@':v=readAnnotationValues(v + 2,buf,true,av.visitAnnotation(name,readUTF8(v,buf)));break;case '[':int size=readUnsignedShort(v);v+=2;if (size == 0) {return readAnnotationValues(v - 2,buf,false,av.visitArray(name));}switch (this.b[v++] & 0xFF) {case 'B':byte[] bv=new byte[size];for (i=0; i < size; i++) {bv[i]=(byte)readInt(items[readUnsignedShort(v)]);v+=3;}av.visit(name,bv);--v;break;case 'Z':boolean[] zv=new boolean[size];for (i=0; i < size; i++) {zv[i]=readInt(items[readUnsignedShort(v)]) != 0;v+=3;}av.visit(name,zv);--v;break;case 'S':short[] sv=new short[size];for (i=0; i < size; i++) {sv[i]=(short)readInt(items[readUnsignedShort(v)]);v+=3;}av.visit(name,sv);--v;break;case 'C':char[] cv=new char[size];for (i=0; i < size; i++) {cv[i]=(char)readInt(items[readUnsignedShort(v)]);v+=3;}av.visit(name,cv);--v;break;case 'I':int[] iv=new int[size];for (i=0; i < size; i++) {iv[i]=readInt(items[readUnsignedShort(v)]);v+=3;}av.visit(name,iv);--v;break;case 'J':long[] lv=new long[size];for (i=0; i < size; i++) {lv[i]=readLong(items[readUnsignedShort(v)]);v+=3;}av.visit(name,lv);--v;break;case 'F':float[] fv=new float[size];for (i=0; i < size; i++) {fv[i]=Float.intBitsToFloat(readInt(items[readUnsignedShort(v)]));v+=3;}av.visit(name,fv);--v;break;case 'D':double[] dv=new double[size];for (i=0; i < size; i++) {dv[i]=Double.longBitsToDouble(readLong(items[readUnsignedShort(v)]));v+=3;}av.visit(name,dv);--v;break;default :v=readAnnotationValues(v - 3,buf,false,av.visitArray(name));}}return v;}  }
class C{  public sup addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  public static Completion of(String value,String message){  return new SimpleCompletion(value,message);}  }
class C{  public static boolean isValid(String address){  return isValidIPv4(address) || isValidIPv6(address);}  }
class C{  protected void addPreferencesFromResource(@XmlRes int prefsResId){  addPreferencesFromResource(prefsResId,new XmlPreferenceParser());}  }
class C{  public void registerElement(int n){  if (first) {    first=false;    last=n - 1;  }  if (max < n)   max=n;  if (min > n)   min=n;  if (n == last)   duplicates++;  count++;  int distance=n - last;  ordering+=Math.abs(distance - 1);  last=n;}  }
class C{  public JsonNode toJsonNode(String jsonString){  try {    return objectMapper.readTree(jsonString);  } catch (  IOException e) {    Assert.fail("Unable to parse JSON\n" + jsonString,e);    throw new IllegalStateException();  }}  }
class C{  @Override public boolean status(){  return true;}  }
class C{  public void ensureUpToDate(){  if (!ApplicationManager.getApplication().isDispatchThread()) {    peer.ensureUpToDate(false);  }}  }
class C{  private String encapsulateObject(@NotNull String object,@NotNull ObjectTypes type){  String ret="";switch (type) {case LITERAL:    ret+="\"";  break;case RESOURCE:ret+="<";break;case OBJECT:ret+="[";break;}ret+=(ObjectTypes.LITERAL == type) ? escapeString(object) : object;switch (type) {case LITERAL:ret+="\"";break;case RESOURCE:ret+=">";break;case OBJECT:ret+="]";break;}return ret;}  }
class C{  public BitmapDrawable createBitmapDrawable(Resources resources,Bitmap bitmap){  if (bitmap == null) {    return null;  }  BitmapDrawable drawable=null;  if (bitmap != null) {    if (Version.hasHoneycomb()) {      drawable=new BitmapDrawable(resources,bitmap);    } else {      drawable=new RecyclingBitmapDrawable(resources,bitmap);    }  }  return drawable;}  }
class C{  private void stopPollExecutor() throws Exception {  if (_pollExecutor != null && !_pollExecutor.isTerminated()) {    log.info("stopping polling executor ...");    _pollExecutor.shutdownNow();  }  _pollExecutor=null;}  }
class C{  void refreshIfEmpty(){  if (ancestor != null) {    ancestor.refreshIfEmpty();    if (ancestor.getDelegate() != ancestorDelegate) {      throw new ConcurrentModificationException();    }  } else   if (delegate.isEmpty()) {    List<V> newDelegate=map.get(key);    if (newDelegate != null) {      delegate=newDelegate;    }  }}  }
class C{  public void removeScrollingListener(OnWheelScrollListener listener){  scrollingListeners.remove(listener);}  }
class C{  public void split(int[] points,Object[] pieces){  int point0, point1;  point0=0;  point1=points[0];  for (int x=0; x < pieces.length; x++) {    pieces[x]=new short[point1 - point0];    System.arraycopy(genome,point0,pieces[x],0,point1 - point0);    point0=point1;    if (x >= pieces.length - 2)     point1=genome.length; else     point1=points[x + 1];  }}  }
class C{  public Map<String,String> doExpressCheckoutPayment(final Payment payment,final String token){  Assert.notNull(token,"The pay pal tonek must  be not null");  Assert.notNull(payment,"Payment must be provided");  Assert.notNull(payment.getPaymentAmount(),"Amount must be provided");  Assert.isTrue(MoneyUtils.isFirstBiggerThanSecond(payment.getPaymentAmount(),BigDecimal.ZERO),"Amount must be positive");  Assert.notNull(payment.getOrderCurrency(),"Currency code must be provided");  try {    final Map<String,String> details=getExpressCheckoutDetails(token);    if (details.containsKey(PP_EC_PAYERID)) {      final NvpBuilder npvs=new NvpBuilder();      npvs.addRaw(PP_EC_TOKEN,token).addRaw(PP_EC_PAYERID,details.get(PP_EC_PAYERID));      appendOrderDetails(payment,npvs);      return performHttpCall("DoExpressCheckoutPayment",npvs.toMap());    }  } catch (  Exception exp) {    ShopCodeContext.getLog(this).error(exp.getMessage(),exp);  }  return Collections.EMPTY_MAP;}  }
class C{  public __XmlLexer(java.io.Reader in){  this.zzReader=in;}  }
class C{  private ArrayList<ArrayList<PhrasePositions>> gatherRptGroups(LinkedHashMap<Term,Integer> rptTerms) throws IOException {  PhrasePositions[] rpp=repeatingPPs(rptTerms);  ArrayList<ArrayList<PhrasePositions>> res=new ArrayList<>();  if (!hasMultiTermRpts) {    for (int i=0; i < rpp.length; i++) {      PhrasePositions pp=rpp[i];      if (pp.rptGroup >= 0)       continue;      int tpPos=tpPos(pp);      for (int j=i + 1; j < rpp.length; j++) {        PhrasePositions pp2=rpp[j];        if (pp2.rptGroup >= 0 || pp2.offset == pp.offset || tpPos(pp2) != tpPos) {          continue;        }        int g=pp.rptGroup;        if (g < 0) {          g=res.size();          pp.rptGroup=g;          ArrayList<PhrasePositions> rl=new ArrayList<>(2);          rl.add(pp);          res.add(rl);        }        pp2.rptGroup=g;        res.get(g).add(pp2);      }    }  } else {    ArrayList<HashSet<PhrasePositions>> tmp=new ArrayList<>();    ArrayList<FixedBitSet> bb=ppTermsBitSets(rpp,rptTerms);    unionTermGroups(bb);    HashMap<Term,Integer> tg=termGroups(rptTerms,bb);    HashSet<Integer> distinctGroupIDs=new HashSet<>(tg.values());    for (int i=0; i < distinctGroupIDs.size(); i++) {      tmp.add(new HashSet<PhrasePositions>());    }    for (    PhrasePositions pp : rpp) {      for (      Term t : pp.terms) {        if (rptTerms.containsKey(t)) {          int g=tg.get(t);          tmp.get(g).add(pp);          assert pp.rptGroup == -1 || pp.rptGroup == g;          pp.rptGroup=g;        }      }    }    for (    HashSet<PhrasePositions> hs : tmp) {      res.add(new ArrayList<>(hs));    }  }  return res;}  }
class C{  public AmericanExercise(final Date earliestDate,final Date latestDate){  this(earliestDate,latestDate,false);}  }
class C{  public static float[] makeGaussianKernel(int radius,float sigma){  float[] kernel=new float[radius * radius];  float sum=0;  for (int y=0; y < radius; y++) {    for (int x=0; x < radius; x++) {      int off=y * radius + x;      int xx=x - radius / 2;      int yy=y - radius / 2;      kernel[off]=(float)Math.pow(Math.E,-(xx * xx + yy * yy) / (2 * (sigma * sigma)));      sum+=kernel[off];    }  }  for (int i=0; i < kernel.length; i++)   kernel[i]/=sum;  return kernel;}  }
class C{  public boolean branchIfUnordered(){switch (value) {case CMPL_EQUAL:case CMPL_GREATER:case CMPG_LESS:case CMPL_GREATER_EQUAL:case CMPG_LESS_EQUAL:    return false;case CMPL_NOT_EQUAL:case CMPL_LESS:case CMPG_GREATER_EQUAL:case CMPG_GREATER:case CMPL_LESS_EQUAL:  return true;default :throw new OptimizingCompilerException("invalid condition " + this);}}  }
class C{  public QualityQuery(String queryID,Map<String,String> nameValPairs){  this.queryID=queryID;  this.nameValPairs=nameValPairs;}  }
class C{  @Bean public MethodValidationPostProcessor methodValidationPostProcessor(){  return new MethodValidationPostProcessor();}  }
class C{  public void addError(Message message,boolean fatal) throws CompilationFailedException {  if (fatal) {    addFatalError(message);  } else {    addError(message);  }}  }
class C{  private void initFindAdvanced(){  log.config("");  refreshUserQueries();}  }
class C{  private void readObject(ObjectInputStream s) throws ClassNotFoundException, IOException, HeadlessException {  GraphicsEnvironment.checkHeadless();  s.defaultReadObject();  Object keyOrNull;  while (null != (keyOrNull=s.readObject())) {    String key=((String)keyOrNull).intern();    if (itemListenerK == key)     addItemListener((ItemListener)(s.readObject())); else     if (actionListenerK == key)     addActionListener((ActionListener)(s.readObject())); else     s.readObject();  }}  }
class C{  final Node<K> find(int h,Object k){  if (k != null) {    for (Node<K> e=first; e != null; ) {      int s;      K ek;      if (((s=lockState) & (WAITER | WRITER)) != 0) {        if (e.hash == h && ((ek=e.key) == k || (ek != null && k.equals(ek))))         return e;        e=e.next;      } else       if (U.compareAndSwapInt(this,LOCKSTATE,s,s + READER)) {        TreeNode<K> r, p;        try {          p=((r=root) == null ? null : r.findTreeNode(h,k,null));        }  finally {          Thread w;          int ls;          do {          } while (!U.compareAndSwapInt(this,LOCKSTATE,ls=lockState,ls - READER));          if (ls == (READER | WAITER) && (w=waiter) != null)           LockSupport.unpark(w);        }        return p;      }    }  }  return null;}  }
class C{  void ignoreWhite(){  char ch;  while (((ch=sdePeek()) == ' ') || (ch == '\t')) {    sdeAdvance();  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case ExpressionsPackage.ELEMENT_REFERENCE_EXPRESSION__REFERENCE:    if (resolve)     return getReference();  return basicGetReference();case ExpressionsPackage.ELEMENT_REFERENCE_EXPRESSION__OPERATION_CALL:return isOperationCall();case ExpressionsPackage.ELEMENT_REFERENCE_EXPRESSION__ARGS:return getArgs();case ExpressionsPackage.ELEMENT_REFERENCE_EXPRESSION__ARRAY_SELECTOR:return getArraySelector();case ExpressionsPackage.ELEMENT_REFERENCE_EXPRESSION__ARRAY_ACCESS:return isArrayAccess();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public ActionForward executeAction(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  DynaValidatorForm oForm=(DynaValidatorForm)form;  String cDocumentoPago=null;  Liquidacion oLiquidacion=null;  Pago oPago=null;  try {    oLiquidacion=PagoElectronicoManagerHelper.obtenerDatosLiquidacion(request,oForm);    String cXMLDatosFirmados=(String)oForm.get(PagoElectronicoManagerHelper.CAMPO_FIRMA_SOLICITUD);    String cFirma=Base64Util.decodeToString((String)oForm.get(PagoElectronicoManagerHelper.CAMPO_FIRMA_SOLICITUD));    String cSolicitud=PagoElectronicoManagerHelper.obtenerDocumentoSolicitudPago(cXMLDatosFirmados,cFirma);    oLiquidacion.setSolicitud(Goodies.fromStrToUTF8(cSolicitud));    PagoElectronicoManagerHelper.actualizarLiquidacion(request,oLiquidacion);    oPago=PagoElectronicoManagerHelper.realizarPago(request,oForm);    if (ConfiguracionComun.usarPasarelaPagoExternaConRedireccion()) {      if (oPago.getPeticionPagoPasarelaExternaConRedireccion() == null)       throw new PagoElectronicoExcepcion(PagoElectronicoExcepcion.EC_INVOCANDO_SERVICO_PAGO_EXTERNO);      request.setAttribute(ieci.tecdoc.sgm.pe.Constantes.KEY_REQUEST_PASARELA_REFERENCIA_PETICION_PAGO,oPago.getReferencia());      request.setAttribute(ieci.tecdoc.sgm.pe.Constantes.KEY_REQUEST_PASARELA_XML_PETICION_PAGO,oPago.getPeticionPagoPasarelaExternaConRedireccion());      ConectorPasarelaPagoFactory.getConectorPasarelaPago().redireccionarAPasarela(request,response);    } else {      String cXMLDatos=PagoElectronicoManagerHelper.obtenerDocumentoPago(request,oPago);      cDocumentoPago=FormCreator.crearFinalPago(oLiquidacion.getTasa(),cXMLDatos,request);    }  } catch (  Exception e) {    logger.error(e.getMessage(),e);    request.setAttribute(Constantes.ERROR_KEY,e.getMessage());    return mapping.findForward(Constantes.ERROR_FORWARD);  }  request.setAttribute(Constantes.DOC_PAGO_KEY,cDocumentoPago);  request.setAttribute(ieci.tecdoc.sgm.pe.Constantes.REFERENCIA_KEY,(String)oForm.get(PagoElectronicoManagerHelper.CAMPO_REFERENCIA));  return mapping.findForward(Constantes.SUCCESS_FORWARD);}  }
class C{  public Property property(DateTimeFieldType type){  return new Property(this,indexOfSupported(type));}  }
class C{  public static GameData cloneGameData(final GameData data,final boolean copyDelegates){  try {    final GameDataManager manager=new GameDataManager();    ByteArrayOutputStream sink=new ByteArrayOutputStream(10000);    manager.saveGame(sink,data,copyDelegates);    sink.close();    final ByteArrayInputStream source=new ByteArrayInputStream(sink.toByteArray());    sink=null;    return manager.loadGame(source,null);  } catch (  final IOException ex) {    ClientLogger.logQuietly(ex);    return null;  }}  }
class C{  @Deprecated public MysqlDriverManagerDataSource(String driverClassName,String url,String username,String password){  setDriverClassName(driverClassName);  setUrl(url);  setUsername(username);  setPassword(password);}  }
class C{  protected boolean doReconcile(){  if (!flowReconcileEnabled) {    return false;  }  lastReconcileTime=new Date();  ArrayList<OFMatchReconcile> ofmRcList=new ArrayList<OFMatchReconcile>();  int reconcileCapacity=getCurrentCapacity();  if (logger.isTraceEnabled()) {    logger.trace("Reconcile capacity {} flows",reconcileCapacity);  }  while (!flowQueue.isEmpty() && reconcileCapacity > 0) {    OFMatchReconcile ofmRc=flowQueue.poll();    reconcileCapacity--;    if (ofmRc != null) {      ofmRcList.add(ofmRc);      ctrReconciledFlows.increment();      if (logger.isTraceEnabled()) {        logger.trace("Add flow {} to be the reconcileList",ofmRc.cookie);      }    } else {      break;    }  }  IFlowReconcileListener.Command retCmd;  if (ofmRcList.size() > 0) {    List<IFlowReconcileListener> listeners=flowReconcileListeners.getOrderedListeners();    if (listeners == null) {      if (logger.isTraceEnabled()) {        logger.trace("No flowReconcile listener");      }      return false;    }    for (    IFlowReconcileListener flowReconciler : flowReconcileListeners.getOrderedListeners()) {      if (logger.isTraceEnabled()) {        logger.trace("Reconciling flow: call listener {}",flowReconciler.getName());      }      retCmd=flowReconciler.reconcileFlows(ofmRcList);      if (retCmd == IFlowReconcileListener.Command.STOP) {        break;      }    }    for (    OFMatchReconcile ofmRc : ofmRcList) {      if (ofmRc.origReconcileQueryEvent != null) {        ofmRc.origReconcileQueryEvent.evType.getDebugEvent().newEventWithFlush(new FlowReconcileQueryDebugEvent(ofmRc.origReconcileQueryEvent,"Flow Reconciliation Complete",ofmRc));      }    }    updateFlush();    flowReconcileThreadRunCount.incrementAndGet();  } else {    if (logger.isTraceEnabled()) {      logger.trace("No flow to be reconciled.");    }  }  if (flowQueue.isEmpty()) {    return false;  } else {    if (logger.isTraceEnabled()) {      logger.trace("{} more flows to be reconciled.",flowQueue.size());    }    return true;  }}  }
class C{  public void slotFromLocoAddress(int i,SlotListener l){  mLocoAddrHash.put(Integer.valueOf(i),l);  LocoNetMessage m=new LocoNetMessage(4);  m.setOpCode(LnConstants.OPC_LOCO_ADR);  m.setElement(1,(i / 128) & 0x7F);  m.setElement(2,i & 0x7F);  tc.sendLocoNetMessage(m);}  }
class C{  public QRDecomposition qr(){  return new QRDecomposition(this);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public Distribution(int numBags,int numClasses){  int i;  m_perClassPerBag=new double[numBags][0];  m_perBag=new double[numBags];  m_perClass=new double[numClasses];  for (i=0; i < numBags; i++) {    m_perClassPerBag[i]=new double[numClasses];  }  totaL=0;}  }
class C{  public ObjectFactory(){}  }
class C{  public static String toDalvikName(String canonicalName){  final boolean isArray=(canonicalName.charAt(0) == '[');  if (isArray) {    return canonicalName.replace('.','/');  } else {    if (canonicalName.equals("char"))     return "C"; else     if (canonicalName.equals("int"))     return "I"; else     if (canonicalName.equals("byte"))     return "B"; else     if (canonicalName.equals("boolean"))     return "Z"; else     if (canonicalName.equals("float"))     return "F"; else     if (canonicalName.equals("double"))     return "D"; else     if (canonicalName.equals("short"))     return "S"; else     if (canonicalName.equals("long"))     return "J"; else     if (canonicalName.equals("void"))     return "V"; else     return "L" + canonicalName.replace('.','/') + ";";  }}  }
class C{  @Override public String statisticsHandlerTipText(){  return "The handler for the statistics (load/save).";}  }
class C{  public ModuleScript(Script script,URI uri,URI base){  this.script=script;  this.uri=uri;  this.base=base;}  }
class C{  public static void main(final String[] args){  if (args.length == 6) {    run(args[0],args[1],args[2],args[3],args[4],args[5]);  } else   if (args.length == 5) {    run(args[0],args[1],args[2],args[3],args[4],null);  } else   if (args.length == 4) {    run(args[0],args[1],args[2],args[3],null,null);  } else {    throw new IllegalArgumentException("Wrong number of input arguments.");  }}  }
class C{  public static boolean isAbove(Coordinate c0,Coordinate c1,Coordinate c2){  return isLeftOfLine(c0,c2,c1) < 0;}  }
class C{  public Builder withProperty(String propertyName,String propertyValue){  this.clusterProperties.put(propertyName,propertyValue);  return this;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean hasObservers(){  return rxBus.hasObservers();}  }
class C{  private <T>OpResult addOneSpoutSpec(T t){  OpResult result=new OpResult();  String json="";  try {    json=mapper.writeValueAsString(t);    Document doc=Document.parse(json);    String[] metadataMapArrays={"kafka2TupleMetadataMap","tuple2StreamMetadataMap","streamRepartitionMetadataMap"};    for (    String metadataMapName : metadataMapArrays) {      Document _metadataMapDoc=(Document)doc.get(metadataMapName);      doc.remove(metadataMapName);      ArrayList<Document> _metadataMapArray=new ArrayList<>();      for (      String key : _metadataMapDoc.keySet()) {        Document _subDoc=new Document();        _subDoc.put("topicName",key);        _subDoc.put(metadataMapName,_metadataMapDoc.get(key));        _metadataMapArray.add(_subDoc);      }      doc.append(metadataMapName,_metadataMapArray);    }    spoutSpecs.insertOne(doc);    result.code=200;    result.message=String.format("add one document [%s] to collection [%s] succeed!",doc.toJson(),spoutSpecs.getNamespace());    LOG.info(result.message);  } catch (  Exception e) {    result.code=400;    result.message=e.getMessage();    LOG.error(String.format("Add one document [%s] to collection [%s] failed!",json,spoutSpecs.getNamespace()),e);  }  return result;}  }
class C{  public Hyphenation hyphenate(String word,int remainCharCount,int pushCharCount){  char[] w=word.toCharArray();  return hyphenate(w,0,w.length,remainCharCount,pushCharCount);}  }
class C{  private static String buildRandomPivot(String[] fieldNames){  final int depth=TestUtil.nextInt(random(),1,3);  String[] fields=new String[depth];  for (int i=0; i < depth; i++) {    fields[i]=fieldNames[TestUtil.nextInt(random(),0,fieldNames.length - 1)];  }  return StringUtils.join(fields,",");}  }
class C{  public static void main(String[] args){  Config.init(args,null);  ControlThread.registerConfig();  ControlThread ct;  try {    ct=ControlThread.getInstance();    ct.start();  } catch (  Exception e) {    Log.logger.log(Level.SEVERE,"Uncaught exception.",e);  }}  }
class C{  public static boolean isWeakKey(byte[] key,int offset){  return isWeakKey(key,offset,key.length - offset);}  }
class C{  @DELETE @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{volume_id}") @CheckPermission(roles={Role.SYSTEM_MONITOR,Role.TENANT_ADMIN},acls={ACL.ANY}) public Response deleteVolume(@PathParam("tenant_id") String openstackTenantId,@PathParam("volume_id") String volumeId){  _log.info("Delete volume: id = {} tenant: id ={}",volumeId,openstackTenantId);  if (volumeId == null) {    _log.debug("Delete volume is failed : Volume id is empty ");    return CinderApiUtils.createErrorResponse(404,"Not Found : volume id is empty");  }  Volume vol=findVolume(volumeId,openstackTenantId);  if (vol == null) {    return CinderApiUtils.createErrorResponse(404,"Not Found : Invalid volume id");  } else   if (vol.hasConsistencyGroup()) {    return CinderApiUtils.createErrorResponse(400,"Invalid volume: Volume belongs to consistency group");  }  BlockServiceApi api=BlockService.getBlockServiceImpl(vol,_dbClient);  if ((api.getSnapshots(vol) != null) && (!api.getSnapshots(vol).isEmpty())) {    return CinderApiUtils.createErrorResponse(400,"Invalid volume: Volume still has one or more dependent snapshots");  }  verifyUserCanModifyVolume(vol);  String task=UUID.randomUUID().toString();  URI systemUri=vol.getStorageController();  List<URI> volumeURIs=new ArrayList<URI>();  volumeURIs.add(vol.getId());  api.deleteVolumes(systemUri,volumeURIs,"FULL",task);  if (vol.getExtensions() == null) {    vol.setExtensions(new StringMap());  }  vol.getExtensions().put("status",CinderConstants.ComponentStatus.DELETING.getStatus().toLowerCase());  vol.getExtensions().put(DELETE_TASK_ID,task);  _dbClient.updateObject(vol);  return Response.status(202).build();}  }
class C{  public static boolean putInt(Context context,String key,int value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putInt(key,value);  return editor.commit();}  }
class C{  @Override protected Size2D arrangeFN(Graphics2D g2,double w){  g2.setFont(getFont());  FontMetrics fm=g2.getFontMetrics(getFont());  Rectangle2D bounds=TextUtilities.getTextBounds(getText(),g2,fm);  if (bounds.getWidth() <= w) {    return new Size2D(w,bounds.getHeight());  } else {    return new Size2D(0.0,0.0);  }}  }
class C{  public void load(ArrowRecordBatch recordBatch){  Iterator<ArrowBuf> buffers=recordBatch.getBuffers().iterator();  Iterator<ArrowFieldNode> nodes=recordBatch.getNodes().iterator();  for (int i=0; i < fields.size(); ++i) {    Field field=fields.get(i);    FieldVector fieldVector=fieldVectors.get(i);    loadBuffers(fieldVector,field,buffers,nodes);  }  if (nodes.hasNext() || buffers.hasNext()) {    throw new IllegalArgumentException("not all nodes and buffers where consumed. nodes: " + Iterators.toString(nodes) + " buffers: "+ Iterators.toString(buffers));  }}  }
class C{  public String fireFactsValidate(MAcctSchema schema,List<Fact> facts,PO po){  if (schema == null || facts == null || po == null || m_factsValidateListeners.size() == 0)   return null;  String propertyName=po.get_TableName() + "*";  ArrayList<FactsValidator> list=(ArrayList<FactsValidator>)m_factsValidateListeners.get(propertyName);  if (list != null) {    String error=fireFactsValidate(schema,facts,po,list);    if (error != null && error.length() > 0)     return error;  }  propertyName=po.get_TableName() + po.getAD_Client_ID();  list=(ArrayList<FactsValidator>)m_factsValidateListeners.get(propertyName);  if (list != null) {    String error=fireFactsValidate(schema,facts,po,list);    if (error != null && error.length() > 0)     return error;  }  return null;}  }
class C{  @Override public String globalInfo(){  return "Removes all duplicate instances from the first batch of data it receives.";}  }
class C{  public int export(ConstantPool target){  return target.addInteger(_value).getIndex();}  }
class C{  public static void writeUnsafe(PacketOutputStream out,ArrayList<char[]> readArrays,boolean noBackslashEscapes) throws IOException {  out.writeUnsafe(QUOTE);  for (  char[] charArray : readArrays) {    byte[] data=new String(charArray,0,charArray.length).getBytes("UTF-8");    writeBytesEscapedUnsafe(out,data,data.length,noBackslashEscapes);  }  out.writeUnsafe(QUOTE);}  }
class C{  public int search(final CharList list,int from){  return search(list,from,list.size());}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void checkAffinity(){  checkAffinity(grid(0).affinity(null),internalCache(1,null).affinity());  checkAffinity(grid(0).affinity(CACHE1),internalCache(1,CACHE1).affinity());  checkAffinity(grid(0).affinity(CACHE1),internalCache(1,CACHE1).affinity());  checkAffinity(grid(0).affinity(CACHE2),internalCache(1,CACHE2).affinity());}  }
class C{  public void hide(){  if (isShown()) {    objective.getScoreboard().resetScores(score.getEntry());    shown=false;  }}  }
class C{  public void testMultiPolygon(){  Polygon hole=new Polygon(new double[]{-10,-10,10,10,-10},new double[]{-10,10,10,-10,-10});  Polygon outer=new Polygon(new double[]{-50,-50,50,50,-50},new double[]{-50,50,50,-50,-50},hole);  Polygon island=new Polygon(new double[]{-5,-5,5,5,-5},new double[]{-5,5,5,-5,-5});  Polygon2D polygon=Polygon2D.create(outer,island);  assertTrue(polygon.contains(-2,2));  assertFalse(polygon.contains(-6,6));  assertTrue(polygon.contains(-25,25));  assertFalse(polygon.contains(-51,51));  assertEquals(Relation.CELL_INSIDE_QUERY,polygon.relate(-2,2,-2,2));  assertEquals(Relation.CELL_OUTSIDE_QUERY,polygon.relate(6,7,6,7));  assertEquals(Relation.CELL_INSIDE_QUERY,polygon.relate(24,25,24,25));  assertEquals(Relation.CELL_OUTSIDE_QUERY,polygon.relate(51,52,51,52));  assertEquals(Relation.CELL_CROSSES_QUERY,polygon.relate(-60,60,-60,60));  assertEquals(Relation.CELL_CROSSES_QUERY,polygon.relate(49,51,49,51));  assertEquals(Relation.CELL_CROSSES_QUERY,polygon.relate(9,11,9,11));  assertEquals(Relation.CELL_CROSSES_QUERY,polygon.relate(5,6,5,6));}  }
class C{  private static Set<Integer> find(final Predicate<Instruction> predicate,final List<Instruction> instructions){  final Set<Integer> positions=new HashSet<>();  for (int i=0; i < instructions.size(); i++) {    final Instruction instruction=instructions.get(i);    if (predicate.test(instruction)) {      positions.add(i);    }  }  return positions;}  }
class C{  private void visitTypeAsPrimary(JSType type){  if (!isLiteralFunction(type) && (type.isConstructor() || type.isFunctionType() || type.isUnionType())) {    emit("(");    visitType(type);    emit(")");  } else {    visitType(type);  }}  }
class C{  private void notifyChange(final String what){  if (D)   LOG.info("notifyChange: what = " + what);  updateRemoteControlClient(what);  if (what.equals(POSITION_CHANGED)) {    return;  }  final Intent intent=new Intent(what);  intent.putExtra("id",getAudioId());  intent.putExtra("artist",getArtistName());  intent.putExtra("album",getAlbumName());  intent.putExtra("track",getTrackName());  intent.putExtra("playing",isPlaying());  intent.putExtra("isfavorite",isFavorite());  sendStickyBroadcast(intent);  final Intent musicIntent=new Intent(intent);  musicIntent.setAction(what.replace(APOLLO_PACKAGE_NAME,MUSIC_PACKAGE_NAME));  sendStickyBroadcast(musicIntent);  if (what.equals(META_CHANGED)) {    if (mFavoritesCache == null) {      mFavoritesCache=FavoritesStore.getInstance(this);    }    if (mFavoritesCache.getSongId(getAudioId()) != null) {      mFavoritesCache.addSongId(getAudioId(),getTrackName(),getAlbumName(),getArtistName());    }    if (mRecentsCache == null) {      mRecentsCache=RecentStore.getInstance(this);    }    mRecentsCache.addAlbumId(getAlbumId(),getAlbumName(),getArtistName(),MusicUtils.getSongCountForAlbum(this,getAlbumId()),MusicUtils.getReleaseDateForAlbum(this,getAlbumId()));  } else   if (what.equals(QUEUE_CHANGED)) {    saveQueue(true);    if (isPlaying()) {      setNextTrack();    }  } else {    saveQueue(false);  }  if (what.equals(PLAYSTATE_CHANGED)) {    mNotificationHelper.updatePlayState(isPlaying());  }}  }
class C{  public Text padLeft(int len){  return padLeft(len,' ');}  }
class C{  public DelayedResponseOperatorRuntimeEnvironment(final String processingNodeId,final String pipelineId,final DelayedResponseOperator delayedResponseOperator,final DelayedResponseOperatorWaitStrategy responseWaitStrategy,final StreamingMessageQueueConsumer queueConsumer,final StreamingMessageQueueProducer queueProducer,final ExecutorService executorService) throws RequiredInputMissingException {  if (StringUtils.isBlank(processingNodeId))   throw new RequiredInputMissingException("Missing required processing node identifier");  if (StringUtils.isBlank(pipelineId))   throw new RequiredInputMissingException("Missing required pipeline identifier");  if (delayedResponseOperator == null)   throw new RequiredInputMissingException("Missing required direct delayed operator");  if (responseWaitStrategy == null)   throw new RequiredInputMissingException("Missing required response wait strategy");  if (queueConsumer == null)   throw new RequiredInputMissingException("Missing required queue consumer");  if (queueProducer == null)   throw new RequiredInputMissingException("Missing required queue producer");  this.processingNodeId=StringUtils.lowerCase(StringUtils.trim(processingNodeId));  this.pipelineId=StringUtils.lowerCase(StringUtils.trim(pipelineId));  this.operatorId=StringUtils.lowerCase(StringUtils.trim(delayedResponseOperator.getId()));  this.delayedResponseOperator=delayedResponseOperator;  this.responseWaitStrategy=responseWaitStrategy;  this.responseWaitStrategy.setDelayedResponseCollector(this);  this.delayedResponseOperator.setWaitStrategy(this.responseWaitStrategy);  this.queueConsumer=queueConsumer;  this.queueProducer=queueProducer;  this.executorService=executorService;  this.executorService.submit(this.responseWaitStrategy);  this.running=true;  this.consumerQueueWaitStrategy=queueConsumer.getWaitStrategy();  this.destinationQueueWaitStrategy=queueProducer.getWaitStrategy();  if (logger.isDebugEnabled())   logger.debug("delayed response operator init [node=" + this.processingNodeId + ", pipeline="+ this.pipelineId+ ", operator="+ this.operatorId+ "]");}  }
class C{  public PairedStats(double sig){  xStats=new Stats();  yStats=new Stats();  differencesStats=new Stats();  sigLevel=sig;}  }
class C{  public SimplifySpanBuild appendMultiClickableSpecialUnit(SpecialClickableUnit specialClickableUnit,Object... specialUnitOrStrings){  processMultiClickableSpecialUnit(false,specialClickableUnit,specialUnitOrStrings);  return this;}  }
class C{  public void endElement(StylesheetHandler handler,String uri,String localName,String rawName) throws org.xml.sax.SAXException {  startNonText(handler);  handler.getCurrentProcessor().endElement(handler,uri,localName,rawName);  handler.popProcessor();}  }
class C{  private void checkArguments(){  if (M <= 0) {    throw new IllegalArgumentException("M must be greater than 0");  }  if (N <= 0) {    throw new IllegalArgumentException("N must be greater than 0");  }  if (K >= N) {    throw new IllegalArgumentException("K must be less than N");  }  if ((K < 0) || (K > 31)) {    throw new IllegalArgumentException("K must be an integer between 0 and 31");  }}  }
class C{  static int advanceProbe(int probe){  probe^=probe << 13;  probe^=probe >>> 17;  probe^=probe << 5;  tlr.get().threadLocalRandomProbe=probe;  return probe;}  }
class C{  @Override public Overlay buildOverlay(MapView map,Style defaultStyle,Styler styler,KmlDocument kmlDocument){  FolderOverlay folderOverlay=new FolderOverlay();  for (  KmlFeature k : mItems) {    Overlay overlay=k.buildOverlay(map,defaultStyle,styler,kmlDocument);    if (overlay != null)     folderOverlay.add(overlay);  }  if (styler == null)   folderOverlay.setEnabled(mVisibility); else   styler.onFeature(folderOverlay,this);  return folderOverlay;}  }
class C{  @Override protected boolean afterSave(boolean newRecord,boolean success){  if (isMandatory() && is_ValueChanged(COLUMNNAME_IsMandatory)) {    if (ELEMENTTYPE_Activity.equals(getElementType()))     updateData(COLUMNNAME_C_Activity_ID,getC_Activity_ID()); else     if (ELEMENTTYPE_BPartner.equals(getElementType()))     updateData(COLUMNNAME_C_BPartner_ID,getC_BPartner_ID()); else     if (ELEMENTTYPE_Product.equals(getElementType()))     updateData(COLUMNNAME_M_Product_ID,getM_Product_ID()); else     if (ELEMENTTYPE_Project.equals(getElementType()))     updateData(COLUMNNAME_C_Project_ID,getC_Project_ID());  }  s_cache.clear();  if (newRecord || is_ValueChanged(COLUMNNAME_SeqNo))   MAccount.updateValueDescription(getCtx(),"AD_Client_ID=" + getAD_Client_ID(),get_TrxName());  return success;}  }
class C{  private boolean createFile(String baseDirName,boolean createLogDir,boolean isClient){  String fileName=baseDirName;  try {    if (fileName != null) {      File dir=new File(fileName);      if (!dir.exists() || !dir.isDirectory()) {        reportError("Invalid base directory: " + fileName,null,ErrorManager.OPEN_FAILURE);        fileName=null;      }    }    if (fileName != null && createLogDir) {      fileName+=File.separator + "log";      File dir=new File(fileName);      if (!dir.exists())       dir.mkdir();      if (!dir.exists() || !dir.isDirectory()) {        reportError("Invalid log directory: " + fileName,null,ErrorManager.OPEN_FAILURE);        fileName=null;      }    }    if (fileName != null) {      fileName+=File.separator;      if (isClient)       fileName+="client";      m_fileNameDate=getFileNameDate(System.currentTimeMillis());      fileName+=m_fileNameDate + "_";      for (int i=0; i < 100; i++) {        String finalName=fileName + i + ".log";        File file=new File(finalName);        if (!file.exists()) {          m_file=file;          break;        }      }    }    if (m_file == null) {      m_fileNameDate=getFileNameDate(System.currentTimeMillis());      m_file=File.createTempFile("adempiere" + m_fileNameDate + "_",".log");    }  } catch (  Exception ex) {    reportError("file",ex,ErrorManager.OPEN_FAILURE);    m_file=null;    return false;  }  return true;}  }
class C{  public static List propertyDescriptors(int apiLevel){  return PROPERTY_DESCRIPTORS;}  }
class C{  public static long minSubset(long s){  return Long.lowestOneBit(s);}  }
class C{  public boolean isValid(Object obj){  return obj != m_exclude;}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="EI_EXPOSE_REP") public int[] validBaudNumber(){  return validSpeedValues;}  }
class C{  int selectNextPoll(){  int startindex=pollIndex;  while (++pollIndex < getNumTransmitters()) {    if (getTransmitter(pollIndex).isPolled()) {      return pollIndex;    }  }  pollIndex=-1;  while (++pollIndex <= startindex) {    if (getTransmitter(pollIndex).isPolled()) {      return pollIndex;    }  }  return -1;}  }
class C{  private boolean[] extractBits(BitMatrix matrix) throws FormatException {  boolean[] rawbits;  if (ddata.isCompact()) {    if (ddata.getNbLayers() > NB_BITS_COMPACT.length) {      throw FormatException.getFormatInstance();    }    rawbits=new boolean[NB_BITS_COMPACT[ddata.getNbLayers()]];    numCodewords=NB_DATABLOCK_COMPACT[ddata.getNbLayers()];  } else {    if (ddata.getNbLayers() > NB_BITS.length) {      throw FormatException.getFormatInstance();    }    rawbits=new boolean[NB_BITS[ddata.getNbLayers()]];    numCodewords=NB_DATABLOCK[ddata.getNbLayers()];  }  int layer=ddata.getNbLayers();  int size=matrix.getHeight();  int rawbitsOffset=0;  int matrixOffset=0;  while (layer != 0) {    int flip=0;    for (int i=0; i < 2 * size - 4; i++) {      rawbits[rawbitsOffset + i]=matrix.get(matrixOffset + flip,matrixOffset + i / 2);      rawbits[rawbitsOffset + 2 * size - 4 + i]=matrix.get(matrixOffset + i / 2,matrixOffset + size - 1 - flip);      flip=(flip + 1) % 2;    }    flip=0;    for (int i=2 * size + 1; i > 5; i--) {      rawbits[rawbitsOffset + 4 * size - 8 + (2 * size - i) + 1]=matrix.get(matrixOffset + size - 1 - flip,matrixOffset + i / 2 - 1);      rawbits[rawbitsOffset + 6 * size - 12 + (2 * size - i) + 1]=matrix.get(matrixOffset + i / 2 - 1,matrixOffset + flip);      flip=(flip + 1) % 2;    }    matrixOffset+=2;    rawbitsOffset+=8 * size - 16;    layer--;    size-=4;  }  return rawbits;}  }
class C{  private void processParsingErrors(IProject project,ParseResult result){switch (result.getStatus()) {case IParseConstants.SYNTAX_ERROR:    String[] output=ToolIO.getAllMessages();  int nextMsg=0;while ((nextMsg < output.length) && (output[nextMsg].indexOf("Parsing module") != -1)) {  nextMsg++;}if ((nextMsg != 0) && (nextMsg != output.length)) {int parsingModuleIndex=output[nextMsg - 1].indexOf("Parsing module") + 15;String nameToFind=output[nextMsg - 1].substring(parsingModuleIndex,output[nextMsg - 1].indexOf(" ",parsingModuleIndex + 1));String[] abortMsgs=result.getParseErrors().getAborts();if ((abortMsgs.length > 0) && (abortMsgs[0].indexOf("Cannot find source file for module") != -1)) {  parsingModuleIndex=abortMsgs[0].indexOf("imported in module ") + 19;  nameToFind=abortMsgs[0].substring(parsingModuleIndex,abortMsgs[0].indexOf(".",parsingModuleIndex + 1));}nameToFind=correctModuleNameCapitalization(nameToFind,result);IFile module=ResourceHelper.getLinkedFile(result.getParsedResource().getParent(),ResourceHelper.getModuleFileName(nameToFind),false);int[] coordinates=new int[]{-1,-1,-1,-1};String message=output[nextMsg];if ((message.indexOf("Lexical error") != -1) || (message.indexOf("***Parse Error***") != -1)) {  int[] val=findLineAndColumn(0,message);  int beginLine=val[0];  int beginColumn=val[1];  int endLine=0;  int endColumn=0;  val=findLineAndColumn(val[2],message);  if ((val[0] > beginLine) || ((val[0] == beginLine) && (val[1] >= beginColumn))) {    endLine=val[0];    endColumn=val[1];  }  coordinates=new int[]{beginLine,beginColumn,endLine,endColumn};  String beforeModuleName=message.substring(0,findLineAndColumn(0,message)[2]);  String afterModuleName=message.substring(findLineAndColumn(0,message)[2]);  message=beforeModuleName + " in module " + module.getName().substring(0,module.getName().length() - 4)+ afterModuleName;  result.addMarker(new TLAMarkerInformationHolder(module,module.getName(),IMarker.SEVERITY_ERROR,coordinates,message));} else {  if (result.getParseErrors() != null) {    String[] aborts=result.getParseErrors().getAborts();    if (aborts.length > 0) {      message=aborts[0];    }  }  if (message != null && message.indexOf("does not match the name") == -1) {    coordinates=new int[]{-1,-1,-1,-1};  }  if (module == null) {    result.addMarker(new TLAMarkerInformationHolder(project,project.getName(),IMarker.SEVERITY_ERROR,coordinates,message));  } else {    result.addMarker(new TLAMarkerInformationHolder(module,module.getName(),IMarker.SEVERITY_ERROR,coordinates,message));  }}} else {throw new RuntimeException("Bug Spec.ProcessParsingErrorMessages:1869.\n" + "Can't find module name");}break;case IParseConstants.SEMANTIC_ERROR:case IParseConstants.SEMANTIC_WARNING:if (result.getSemanticErrors() != null) {String[][] errors={result.getSemanticErrors().getAborts(),result.getSemanticErrors().getErrors(),result.getSemanticErrors().getWarnings()};int[] holderType={IMarker.SEVERITY_ERROR,IMarker.SEVERITY_ERROR,IMarker.SEVERITY_WARNING};for (int j=0; j < 3; j++) {for (int i=0; i < errors[j].length; i++) {IFile module=null;int[] val=findLineAndColumn(0,errors[j][i]);int beginLine=val[0];int beginColumn=val[1];int endLine=0;int endColumn=0;val=findLineAndColumn(val[2],errors[j][i]);if ((val[0] > beginLine) || ((val[0] == beginLine) && (val[1] >= beginColumn))) {  endLine=val[0];  endColumn=val[1];}int beginModuleIdx=errors[j][i].indexOf(" module ");if (beginModuleIdx != -1) {  beginModuleIdx=beginModuleIdx + " module ".length();  int endModuleIdx=errors[j][i].indexOf("\n",beginModuleIdx);  if (endModuleIdx != -1) {    String nameToFind=correctModuleNameCapitalization(errors[j][i].substring(beginModuleIdx,endModuleIdx),result);    module=ResourceHelper.getLinkedFile(result.getParsedResource().getParent(),ResourceHelper.getModuleFileName(nameToFind),false);  }}int[] coordinates=new int[]{beginLine,beginColumn,endLine,endColumn};if (module == null) {  result.addMarker(new TLAMarkerInformationHolder(project,project.getName(),holderType[j],coordinates,errors[j][i]));} else {  result.addMarker(new TLAMarkerInformationHolder(module,module.getName(),holderType[j],coordinates,errors[j][i]));}}}} else {throw new RuntimeException("Bug Spec.ProcessParsingErrorMsgs.1418:\n" + "Semantic error detected but no error message found.");}break;case IParseConstants.COULD_NOT_FIND_MODULE:result.addMarker(new TLAMarkerInformationHolder(project,project.getName(),IMarker.SEVERITY_ERROR,new int[]{-1,-1,-1,-1},"Could not find module"));break;case IParseConstants.PARSED:break;default :throw new RuntimeException("No default expected. Still spec.getStatus() returned a value of " + result.getStatus());}}  }
class C{  public void wipeButtonIconCache(){  buttonController.wipeButtonIconCache();}  }
class C{  private SqlExceptionUtil(){}  }
class C{  @Override @Uninterruptible public void initializeStack(Address ip,Address sp){  Address fp;  int INITIAL_FRAME_SIZE=STACKFRAME_HEADER_SIZE;  fp=Memory.alignDown(sp.minus(INITIAL_FRAME_SIZE),STACKFRAME_ALIGNMENT);  fp.plus(STACKFRAME_FRAME_POINTER_OFFSET).store(STACKFRAME_SENTINEL_FP);  fp.plus(STACKFRAME_RETURN_ADDRESS_OFFSET).store(ip);  fp.plus(STACKFRAME_METHOD_ID_OFFSET).store(INVISIBLE_METHOD_ID);  getGPRs().set(FRAME_POINTER.value(),fp.toWord());  this.ip=ip;}  }
class C{  private static void stopAllCounters(){  for (int c=0; c < counters; c++) {    if (counter[c].getStart())     counter[c].stop();  }  gatheringStats=false;}  }
class C{  public boolean isPending(){  return pending != null;}  }
class C{  private void initTargetFolder(){  if (getStorageManager() == null) {    throw new IllegalStateException("Do not call this method before " + "initializing mStorageManager");  }  SharedPreferences appPreferences=PreferenceManager.getDefaultSharedPreferences(getApplicationContext());  String last_path=appPreferences.getString("last_upload_path","");  if (last_path.equals("/")) {    mParents.add("");  } else {    String[] dir_names=last_path.split("/");    mParents.clear();    for (    String dir : dir_names)     mParents.add(dir);  }  while (!getStorageManager().fileExists(generatePath(mParents)) && mParents.size() > 1) {    mParents.pop();  }}  }
class C{  public PStTest(String name){  super(name);}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public Response createResponse(int statusCode,Request request) throws ParseException {  if (request == null)   throw new NullPointerException("null parameters");  SIPRequest sipRequest=(SIPRequest)request;  SIPResponse sipResponse=sipRequest.createResponse(statusCode);  sipResponse.removeContent();  sipResponse.removeHeader(ContentTypeHeader.NAME);  if (server != null) {    sipResponse.setHeader(server);  }  return sipResponse;}  }
class C{  public SyncHttpClient(int httpPort){  super(false,httpPort,443);}  }
class C{  public double[][] predictionIntervals(){  return m_PredictionIntervals;}  }
class C{  public StunStack(PeerUdpMessageEventHandler peerUdpMessageEventHandler,ChannelDataEventHandler channelDataEventHandler){synchronized (StunStack.class) {    if (mac == null) {      try {        mac=Mac.getInstance(MessageIntegrityAttribute.HMAC_SHA1_ALGORITHM);      } catch (      NoSuchAlgorithmException nsaex) {        nsaex.printStackTrace();      }    }  }  netAccessManager=new NetAccessManager(this,peerUdpMessageEventHandler,channelDataEventHandler);}  }
class C{  public void deletePoint(){  deletePoint(Integer.MAX_VALUE);}  }
class C{  public void testStartWithNoDeployable() throws Exception {  setContainer(createContainer(createConfiguration(ConfigurationType.STANDALONE)));  getLocalContainer().start();  assertEquals(State.STARTED,getContainer().getState());  try {    getLocalContainer().start();    fail("the second start attempt did not fail");  } catch (  ContainerException expected) {    assertTrue(expected.getMessage() + " does not contain the word 'restart'",expected.getMessage().contains("restart"));  }  getLocalContainer().stop();  assertEquals(State.STOPPED,getContainer().getState());}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  protected boolean isActive(ExecutionWindow window,Calendar time){  ExecutionWindowHelper helper=new ExecutionWindowHelper(window);  return helper.isActive(time);}  }
class C{  private static int decode4to3(byte[] source,int srcOffset,byte[] destination,int destOffset,int options){  if (source == null) {    throw new NullPointerException("Source array was null.");  }  if (destination == null) {    throw new NullPointerException("Destination array was null.");  }  if (srcOffset < 0 || srcOffset + 3 >= source.length) {    throw new IllegalArgumentException(String.format(Locale.ROOT,"Source array with length %d cannot have offset of %d and still process four bytes.",source.length,srcOffset));  }  if (destOffset < 0 || destOffset + 2 >= destination.length) {    throw new IllegalArgumentException(String.format(Locale.ROOT,"Destination array with length %d cannot have offset of %d and still store three bytes.",destination.length,destOffset));  }  byte[] DECODABET=getDecodabet(options);  if (source[srcOffset + 2] == EQUALS_SIGN) {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12);    destination[destOffset]=(byte)(outBuff >>> 16);    return 1;  } else   if (source[srcOffset + 3] == EQUALS_SIGN) {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12) | ((DECODABET[source[srcOffset + 2]] & 0xFF) << 6);    destination[destOffset]=(byte)(outBuff >>> 16);    destination[destOffset + 1]=(byte)(outBuff >>> 8);    return 2;  } else {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12) | ((DECODABET[source[srcOffset + 2]] & 0xFF) << 6)| ((DECODABET[source[srcOffset + 3]] & 0xFF));    destination[destOffset]=(byte)(outBuff >> 16);    destination[destOffset + 1]=(byte)(outBuff >> 8);    destination[destOffset + 2]=(byte)(outBuff);    return 3;  }}  }
class C{  public static String relativeURIString(URI from,URI to){  String retVal=to.toString();  if (ObjectUtils.equals(from.scheme(),to.scheme())) {    int noOfEqualSegments=0;    while (from.segmentCount() > noOfEqualSegments && to.segmentCount() > noOfEqualSegments && from.segment(noOfEqualSegments).equals(to.segment(noOfEqualSegments))) {      noOfEqualSegments++;    }    final boolean urisBelongToSameProject=noOfEqualSegments >= 2;    if (urisBelongToSameProject) {      int noOfIndividualSegments=to.segments().length - noOfEqualSegments;      if (noOfIndividualSegments > 0) {        int goUp=from.segmentCount() - noOfEqualSegments - 1;        String[] relativeSegments=new String[noOfIndividualSegments + goUp];        for (int i=0; i < goUp; i++) {          relativeSegments[i]="..";        }        System.arraycopy(to.segments(),noOfEqualSegments,relativeSegments,goUp,noOfIndividualSegments);        retVal=URI.createHierarchicalURI(relativeSegments,null,null).toString();      }    }  }  return retVal;}  }
class C{  public PrimitiveType createPrimitiveType(){  PrimitiveTypeImpl primitiveType=new PrimitiveTypeImpl();  return primitiveType;}  }
class C{  public boolean removeCandidate(GridCacheMvccCandidate cand){  lock();  try {    Deque<GridCacheMvccCandidate> deque=cands.get(cand.key());    if (deque != null) {      assert !deque.isEmpty();      if (deque.peekFirst().equals(cand)) {        deque.removeFirst();        if (deque.isEmpty())         cands.remove(cand.key());      }    }    boolean empty=cands.isEmpty();    if (empty)     releaseFut.onDone();    return empty;  }  finally {    unlock();  }}  }
class C{  public Item doc(BytesReference doc){  this.doc=doc;  return this;}  }
class C{  public XMLString xstr(){  if (null == m_xmlStr)   m_xmlStr=m_DTMXRTreeFrag.getDTM().getStringValue(m_dtmRoot);  return m_xmlStr;}  }
class C{  public static int number(){  return _all.size();}  }
class C{  public boolean equals(Object ind){  if (!(this.getClass().equals(ind.getClass())))   return false;  FloatVectorIndividual i=(FloatVectorIndividual)ind;  if (genome.length != i.genome.length)   return false;  for (int j=0; j < genome.length; j++)   if (genome[j] != i.genome[j])   return false;  return true;}  }
class C{  public static void play(String filename){  URL url=null;  try {    File file=new File(filename);    if (file.canRead())     url=file.toURI().toURL();  } catch (  MalformedURLException e) {    e.printStackTrace();  }  if (url == null)   throw new RuntimeException("audio " + filename + " not found");  AudioClip clip=Applet.newAudioClip(url);  clip.play();}  }
class C{  public void pushCurrentTemplateRuleIsNull(boolean b){  m_currentTemplateRuleIsNull.push(b);}  }
class C{  public int read() throws IOException {  return m_reader.read();}  }
class C{  private void insertHotMethodsInternal(int index,int filterOptLevel,double threshold){  if (index < nextIndex) {    if (counts[index] > threshold) {      int cmid=cmids[index];      CompiledMethod cm=CompiledMethods.getCompiledMethod(cmid);      if (cm == null) {        reset(cmid);        insertHotMethodsInternal(index,filterOptLevel,threshold);      } else {        int compilerType=cm.getCompilerType();        if (!(compilerType == CompiledMethod.TRAP || (compilerType == CompiledMethod.OPT && (((OptCompiledMethod)cm).getOptLevel() >= filterOptLevel)))) {          double ns=counts[index];          HotMethodRecompilationEvent event=new HotMethodRecompilationEvent(cm,ns);          Controller.controllerInputQueue.insert(ns,event);          AOSLogging.logger.controllerNotifiedForHotness(cm,ns);        }        insertHotMethodsInternal(index * 2,filterOptLevel,threshold);        insertHotMethodsInternal(index * 2 + 1,filterOptLevel,threshold);      }    }  }}  }
class C{  public static byte[] asUnsignedByteArray(BigInteger value){  byte[] bytes=value.toByteArray();  if (bytes[0] == 0) {    byte[] tmp=new byte[bytes.length - 1];    System.arraycopy(bytes,1,tmp,0,tmp.length);    return tmp;  }  return bytes;}  }
class C{  public static int stencil9(DoubleMatrix2D A,cern.colt.function.Double9Function function,int maxIterations,DoubleMatrix2DProcedure hasConverged,int convergenceIterations){  DoubleMatrix2D B=A.copy();  if (convergenceIterations <= 1)   convergenceIterations=2;  if (convergenceIterations % 2 != 0)   convergenceIterations++;  int i=0;  while (i < maxIterations) {    A.zAssign8Neighbors(B,function);    B.zAssign8Neighbors(A,function);    i=i + 2;    if (i % convergenceIterations == 0 && hasConverged != null) {      if (hasConverged.apply(A))       return i;    }  }  return i;}  }
class C{  public void send(Class<? extends Protocol> packetProtocol,boolean skipCurrentPipeline) throws Exception {  if (!isCancelled()) {    ByteBuf output=constructPacket(packetProtocol,skipCurrentPipeline);    user().sendRawPacket(output);  }}  }
class C{  private void decode(byte[] data,int width,int height){  long start=System.currentTimeMillis();  Result rawResult=null;  PlanarYUVLuminanceSource source=CameraManager.get().buildLuminanceSource(data,width,height);  BinaryBitmap bitmap=new BinaryBitmap(new HybridBinarizer(source));  try {    rawResult=multiFormatReader.decodeWithState(bitmap);  } catch (  ReaderException re) {  } finally {    multiFormatReader.reset();  }  if (rawResult != null) {    long end=System.currentTimeMillis();    Log.d(TAG,"Found barcode (" + (end - start) + " ms):\n"+ rawResult.toString());    Message message=Message.obtain(activity.getHandler(),R.id.decode_succeeded,rawResult);    Bundle bundle=new Bundle();    bundle.putParcelable(DecodeThread.BARCODE_BITMAP,source.renderCroppedGreyscaleBitmap());    message.setData(bundle);    message.sendToTarget();  } else {    Message message=Message.obtain(activity.getHandler(),R.id.decode_failed);    message.sendToTarget();  }}  }
class C{  public OrderedDownstreamChannelEvent(final OrderedUpstreamMessageEvent oue,final int subsequence,boolean last,final ChannelEvent ce){  this.oue=oue;  this.ce=ce;  this.subsequence=subsequence;  this.last=last;}  }
class C{  public static String styleToString(final Style style) throws Exception {  final StyledLayerDescriptor sld=sf.createStyledLayerDescriptor();  final UserLayer layer=sf.createUserLayer();  layer.setLayerFeatureConstraints(new FeatureTypeConstraint[]{null});  sld.addStyledLayer(layer);  layer.addUserStyle(style);  final SLDTransformer aTransformer=new SLDTransformer();  aTransformer.setIndentation(4);  final String xml=aTransformer.transform(sld);  return xml;}  }
class C{  public CLIQUEInterval(int dimension,double min,double max){  this.dimension=dimension;  this.min=min;  this.max=max;}  }
class C{  public void deVoice(UserHostmask user){  if (user == null)   throw new IllegalArgumentException("Can't remove voice on null user");  setMode("-v " + user.getNick());}  }
class C{  public SetParams xx(){  addParam(XX);  return this;}  }
class C{  public void onDrawerOpened(View drawerView){  super.onDrawerOpened(drawerView);}  }
class C{  public boolean isSelected(){  findElement();  return element.isSelected();}  }
class C{  public void commit() throws RollbackException, HeuristicMixedException, HeuristicRollbackException, SecurityException, IllegalStateException, SystemException {  tm.commit();}  }
class C{  @Override public boolean isFocused(){  return mHijackFocus || super.isFocused();}  }
class C{  private void interpretAdd(final ReilInstruction instruction){  final Pair<Boolean,BigInteger> firstValue=loadLongValue(instruction.getFirstOperand());  final Pair<Boolean,BigInteger> secondValue=loadLongValue(instruction.getSecondOperand());  if (firstValue.first() && secondValue.first()) {    final OperandSize targetSize=instruction.getThirdOperand().getSize();    final BigInteger result=firstValue.second().add(secondValue.second());    final String targetRegister=instruction.getThirdOperand().getValue();    setRegister(targetRegister,result,targetSize,ReilRegisterStatus.DEFINED);  } else {    assert false;  }}  }
class C{  public boolean isPassthruActive(){  return passthruActive;}  }
class C{  private T2<Long,Long> checkParentListingTime(IgfsSecondaryFileSystem fs,IgfsPath p){  IgfsFile f0=fs.info(p);  T2<Long,Long> t0=new T2<>(f0.accessTime(),f0.modificationTime());  if (!F.eq(IgfsPath.ROOT,p)) {    assertNotNull(f0);    Collection<IgfsFile> listing=fs.listFiles(p.parent());    IgfsFile f1=null;    for (    IgfsFile fi : listing) {      if (F.eq(fi.path(),p)) {        f1=fi;        break;      }    }    assertNotNull(f1);    T2<Long,Long> t1=new T2<>(f1.accessTime(),f1.modificationTime());    assertEquals(t0,t1);  }  return t0;}  }
class C{  public static org.oscm.internal.vo.VOUserSubscription convertToUp(org.oscm.vo.VOUserSubscription oldVO){  if (oldVO == null) {    return null;  }  org.oscm.internal.vo.VOUserSubscription newVO=new org.oscm.internal.vo.VOUserSubscription();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setServiceId(oldVO.getServiceId());  newVO.setServiceKey(oldVO.getServiceKey());  newVO.setActivationDate(oldVO.getActivationDate());  newVO.setCreationDate(oldVO.getCreationDate());  newVO.setDeactivationDate(oldVO.getDeactivationDate());  newVO.setServiceAccessInfo(oldVO.getServiceAccessInfo());  newVO.setServiceAccessType(EnumConverter.convert(oldVO.getServiceAccessType(),org.oscm.internal.types.enumtypes.ServiceAccessType.class));  newVO.setServiceBaseURL(oldVO.getServiceBaseURL());  newVO.setServiceLoginPath(oldVO.getServiceLoginPath());  newVO.setStatus(EnumConverter.convert(oldVO.getStatus(),org.oscm.internal.types.enumtypes.SubscriptionStatus.class));  newVO.setServiceInstanceId(oldVO.getServiceInstanceId());  newVO.setTimeoutMailSent(oldVO.isTimeoutMailSent());  newVO.setPurchaseOrderNumber(oldVO.getPurchaseOrderNumber());  newVO.setSubscriptionId(oldVO.getSubscriptionId());  newVO.setProvisioningProgress(oldVO.getProvisioningProgress());  newVO.setNumberOfAssignedUsers(oldVO.getNumberOfAssignedUsers());  newVO.setSellerName(oldVO.getSellerName());  newVO.setTechnicalServiceOperations(convertToUpVOTechnicalServiceOperation(oldVO.getTechnicalServiceOperations()));  newVO.setLicense(convertToUp(oldVO.getLicense()));  newVO.setOwnerId(oldVO.getOwnerId());  newVO.setUnitKey(oldVO.getUnitKey());  newVO.setUnitName(oldVO.getUnitName());  return newVO;}  }
class C{  public static long sizeOf(Object obj,Set<Object> objects){  Instruments instruments=new Instruments();  instruments.processedObjects=objects;  return instruments.internalSizeOf(obj);}  }
class C{  public MAssetDelivery confirmDelivery(MAsset asset,HttpServletRequest request,int AD_User_ID){  asset.setVersionNo(asset.getProductVersionNo());  asset.setLifeUseUnits(asset.getLifeUseUnits() + 1);  MAssetDelivery ad=new MAssetDelivery(asset,request,AD_User_ID);  return ad;}  }
class C{  void remove(long qAddr){  lock.lock();  try {    if (!polling(qAddr))     unlink(qAddr); else     entry(qAddr,0);  }  finally {    lock.unlock();  }}  }
class C{  public IfdStructure(int tag,int type,int count,int offsetValue){  super();  this.tag=tag;  this.type=IfdType.typeOf(type);  this.count=count;  this.offsetValue=offsetValue;}  }
class C{  public void testUpdate7(){  String updateQuery="UPDATE " + DatabaseCreator.TEST_TABLE1 + " SET field2='1' WHERE id < ( SELECT COUNT(*) FROM "+ DatabaseCreator.TEST_TABLE2+ " WHERE finteger > 15)";  try {    int num=statement.executeUpdate(updateQuery);    int expectedUpdated=4;    assertEquals("Not all records in the database were updated",expectedUpdated,num);    String selectQuery="SELECT id, field2 FROM " + DatabaseCreator.TEST_TABLE1;    ResultSet result=statement.executeQuery(selectQuery);    while (result.next()) {    }    result.close();  } catch (  SQLException e) {    fail("Unexpected exception" + e.getMessage());  }}  }
class C{  public void visit(String name,Object value){  if (av != null) {    av.visit(name,value);  }}  }
class C{  public void doMultiblockSparkle(TileEntityMultiblock<?> tileEntity){}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public Object[] toArray(){  Object[] result=new Object[size];  System.arraycopy(elementData,0,result,0,size);  return result;}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:57.246 -0500",hash_original_method="A6EB616B9F71A14D95ECE60CFCB290DD",hash_generated_method="A6EB616B9F71A14D95ECE60CFCB290DD") void onHangupLocal(){  for (int i=0, s=connections.size(); i < s; i++) {    CdmaConnection cn=(CdmaConnection)connections.get(i);    cn.onHangupLocal();  }  state=State.DISCONNECTING;}  }
class C{  public static ZTauElement round(SimpleBigDecimal lambda0,SimpleBigDecimal lambda1,byte mu){  int scale=lambda0.getScale();  if (lambda1.getScale() != scale) {    throw new IllegalArgumentException("lambda0 and lambda1 do not " + "have same scale");  }  if (!((mu == 1) || (mu == -1))) {    throw new IllegalArgumentException("mu must be 1 or -1");  }  BigInteger f0=lambda0.round();  BigInteger f1=lambda1.round();  SimpleBigDecimal eta0=lambda0.subtract(f0);  SimpleBigDecimal eta1=lambda1.subtract(f1);  SimpleBigDecimal eta=eta0.add(eta0);  if (mu == 1) {    eta=eta.add(eta1);  } else {    eta=eta.subtract(eta1);  }  SimpleBigDecimal threeEta1=eta1.add(eta1).add(eta1);  SimpleBigDecimal fourEta1=threeEta1.add(eta1);  SimpleBigDecimal check1;  SimpleBigDecimal check2;  if (mu == 1) {    check1=eta0.subtract(threeEta1);    check2=eta0.add(fourEta1);  } else {    check1=eta0.add(threeEta1);    check2=eta0.subtract(fourEta1);  }  byte h0=0;  byte h1=0;  if (eta.compareTo(ECConstants.ONE) >= 0) {    if (check1.compareTo(MINUS_ONE) < 0) {      h1=mu;    } else {      h0=1;    }  } else {    if (check2.compareTo(ECConstants.TWO) >= 0) {      h1=mu;    }  }  if (eta.compareTo(MINUS_ONE) < 0) {    if (check1.compareTo(ECConstants.ONE) >= 0) {      h1=(byte)-mu;    } else {      h0=-1;    }  } else {    if (check2.compareTo(MINUS_TWO) < 0) {      h1=(byte)-mu;    }  }  BigInteger q0=f0.add(BigInteger.valueOf(h0));  BigInteger q1=f1.add(BigInteger.valueOf(h1));  return new ZTauElement(q0,q1);}  }
class C{  public void testIntConversionAndOrdering() throws Exception {  BytesRef previous=null;  BytesRef current=new BytesRef(new byte[Integer.BYTES]);  for (int value=-100000; value < 100000; value++) {    NumericUtils.intToSortableBytes(value,current.bytes,current.offset);    if (previous == null) {      previous=new BytesRef(new byte[Integer.BYTES]);    } else {      assertTrue("current bigger than previous: ",previous.compareTo(current) < 0);    }    assertEquals("forward and back conversion should generate same int",value,NumericUtils.sortableBytesToInt(current.bytes,current.offset));    System.arraycopy(current.bytes,current.offset,previous.bytes,previous.offset,current.length);  }}  }
class C{  public QueryAutoStopWordAnalyzer(Analyzer delegate,IndexReader indexReader,Collection<String> fields,float maxPercentDocs) throws IOException {  this(delegate,indexReader,fields,(int)(indexReader.numDocs() * maxPercentDocs));}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.defaultWriteObject();  int length=length();  s.writeInt(length);  for (int i=0; i < length; i++) {    s.writeDouble(get(i));  }}  }
class C{  public void appendElement(int start,int end,byte value){  if (tempTable == null) {    tempTable=new long[INITIAL_TABLE_SIZE];  }  if (dataCount == tempTable.length) {    long[] tempTempTable=new long[dataCount + ADDITIONAL_TABLE_SIZE];    System.arraycopy(tempTable,0,tempTempTable,0,dataCount);    tempTable=tempTempTable;  }  tempTable[dataCount++]=((((long)start << 24) + end) << 8) + value;}  }
class C{  public boolean equals(Object o){  return (compareTo((AttributeLocator)o) == 0);}  }
class C{  public void mean1(){  if (someField < 0) {    targetField=1;  } else {    targetField=-1;  }  if (someField < 0) {    someField=targetField;  } else {    someField=-targetField;  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.VARIABLE__NAME:    setName(NAME_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.TYPED_ELEMENT__DECLARED_TYPE_REF:    return getDeclaredTypeRef();case N4JSPackage.TYPED_ELEMENT__BOGUS_TYPE_REF:  return getBogusTypeRef();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private void updateClusterRegion(ObjectName mbeanName) throws IOException {  try {    AttributeList attributeList=this.mbs.getAttributes(mbeanName,PulseConstants.REGION_MBEAN_ATTRIBUTES);    String regionObjectName=mbeanName.getKeyProperty("name");    String regionFullPath=null;    for (int i=0; i < attributeList.size(); i++) {      Attribute attribute=(Attribute)attributeList.get(i);      if (attribute.getName().equals(PulseConstants.MBEAN_ATTRIBUTE_FULLPATH)) {        regionFullPath=getStringAttribute(attribute.getValue(),attribute.getName());        break;      }    }    Cluster.Region region=cluster.getClusterRegions().get(regionFullPath);    if (null == region) {      region=new Cluster.Region();    }    for (int i=0; i < attributeList.size(); i++) {      Attribute attribute=(Attribute)attributeList.get(i);      String name=attribute.getName();switch (name) {case PulseConstants.MBEAN_ATTRIBUTE_MEMBERS:        String memName[]=(String[])attribute.getValue();      region.getMemberName().clear();    for (int k=0; k < memName.length; k++) {      region.getMemberName().add(memName[k]);    }  break;case PulseConstants.MBEAN_ATTRIBUTE_FULLPATH:region.setFullPath(getStringAttribute(attribute.getValue(),attribute.getName()));break;case PulseConstants.MBEAN_ATTRIBUTE_DISKREADSRATE:region.setDiskReadsRate(getDoubleAttribute(attribute.getValue(),attribute.getName()));break;case PulseConstants.MBEAN_ATTRIBUTE_DISKWRITESRATE:region.setDiskWritesRate(getDoubleAttribute(attribute.getValue(),attribute.getName()));break;case PulseConstants.MBEAN_ATTRIBUTE_EMPTYNODES:region.setEmptyNode(getIntegerAttribute(attribute.getValue(),attribute.getName()));break;case PulseConstants.MBEAN_ATTRIBUTE_GETSRATE:region.setGetsRate(getDoubleAttribute(attribute.getValue(),attribute.getName()));break;case PulseConstants.MBEAN_ATTRIBUTE_LRUEVICTIONRATE:region.setLruEvictionRate(getDoubleAttribute(attribute.getValue(),attribute.getName()));break;case PulseConstants.MBEAN_ATTRIBUTE_PUTSRATE:region.setPutsRate(getDoubleAttribute(attribute.getValue(),attribute.getName()));break;case PulseConstants.MBEAN_ATTRIBUTE_REGIONTYPE:region.setRegionType(getStringAttribute(attribute.getValue(),attribute.getName()));break;case PulseConstants.MBEAN_ATTRIBUTE_ENTRYSIZE:region.setEntrySize(getLongAttribute(attribute.getValue(),attribute.getName()));break;case PulseConstants.MBEAN_ATTRIBUTE_SYSTEMREGIONENTRYCOUNT:region.setSystemRegionEntryCount(getLongAttribute(attribute.getValue(),attribute.getName()));break;case PulseConstants.MBEAN_ATTRIBUTE_MEMBERCOUNT:region.setMemberCount(getIntegerAttribute(attribute.getValue(),attribute.getName()));break;case PulseConstants.MBEAN_ATTRIBUTE_PERSISTENTENABLED:region.setPersistentEnabled(getBooleanAttribute(attribute.getValue(),attribute.getName()));break;case PulseConstants.MBEAN_ATTRIBUTE_NAME:region.setName(getStringAttribute(attribute.getValue(),attribute.getName()));break;case PulseConstants.MBEAN_ATTRIBUTE_GATEWAYENABLED:region.setWanEnabled(getBooleanAttribute(attribute.getValue(),attribute.getName()));break;case PulseConstants.MBEAN_ATTRIBUTE_DISKUSAGE:region.setDiskUsage(getLongAttribute(attribute.getValue(),attribute.getName()));break;}}updateRegionOnMembers(regionObjectName,regionFullPath,region);cluster.addClusterRegion(regionFullPath,region);cluster.getDeletedRegions().remove(region.getFullPath());region.getPutsPerSecTrend().add(region.getPutsRate());region.getGetsPerSecTrend().add(region.getGetsRate());region.getDiskReadsPerSecTrend().add(region.getDiskReadsRate());region.getDiskWritesPerSecTrend().add(region.getDiskWritesRate());} catch (InstanceNotFoundException infe) {LOGGER.warning(infe);}catch (ReflectionException re) {LOGGER.warning(re);}}  }
class C{  protected ZkWriteCommand(){  this.noop=true;  this.name=null;  this.collection=null;}  }
class C{  public TypeCheckerBuilder addSrcDirectory(File srcDirectory){  return addSrcDirectory(vfs.getFromFile(srcDirectory));}  }
class C{  public void populateOwnerAndAddressDetails(BasicProperty basicProperty,ViewPropertyDetails viewPropertyDetails,String ownerAddress,PropertyID propertyID){  if (!basicProperty.getPropertyOwnerInfo().isEmpty()) {    for (    PropertyOwnerInfo propOwner : basicProperty.getPropertyOwnerInfo()) {      List<Address> addrSet=propOwner.getOwner().getAddress();      for (      final Address address : addrSet) {        ownerAddress=address.toString();        viewPropertyDetails.setDoorNo(address.getHouseNoBldgApt() == null ? NOT_AVAILABLE : address.getHouseNoBldgApt());        break;      }    }    viewPropertyDetails.setPropertyAddress(basicProperty.getAddress().toString());    viewPropertyDetails.setCorrAddress(StringUtils.isBlank(ownerAddress) ? NOT_AVAILABLE : ownerAddress);    viewPropertyDetails.setOwnerDetails(getOwnerDetails(basicProperty));  }  viewPropertyDetails.setZoneName(propertyID.getZone().getName());  viewPropertyDetails.setWardName(propertyID.getWard().getName());  viewPropertyDetails.setBlockName(propertyID.getArea().getName());  viewPropertyDetails.setLocalityName(propertyID.getLocality().getName());  viewPropertyDetails.setElectionWardName(propertyID.getElectionBoundary().getName());  viewPropertyDetails.setEnumerationBlockName(NOT_AVAILABLE);}  }
class C{  protected boolean nodeCheck(Node n,boolean throwException){  if (!n.isValid()) {    if (throwException) {      throw new IllegalArgumentException("Node must be valid.");    }    return false;  }  Graph ng=n.getGraph();  if (ng != this && ng.m_spanning != this) {    if (throwException) {      throw new IllegalArgumentException("Node must be part of this Graph.");    }    return false;  }  return true;}  }
class C{  private void initialize(boolean restartFromBeginning){  Map<String,String> partition=null;  Map<String,?> offsetForPartition=null;  if (!restartFromBeginning && context != null && replicaSet != null && context.source().hasOffset(replicaSet.replicaSetName())) {    partition=context.source().partition(replicaSet.replicaSetName());    offsetForPartition=context.source().lastOffset(replicaSet.replicaSetName());  }  context=new ReplicationContext(config);  assertThat(context.hosts()).isNotEmpty();  replicaSet=ReplicaSet.parse(context.hosts());  context.configureLoggingContext(replicaSet.replicaSetName());  if (partition != null) {    context.source().setOffsetFor(partition,offsetForPartition);  }  primary=context.primaryFor(replicaSet,connectionErrorHandler(3));}  }
class C{  public static void init(Properties p){  Enumeration e=p.propertyNames();  while (e.hasMoreElements()) {    String name=e.nextElement().toString();    if (name.startsWith(debugTokenHeader)) {      String token=name.substring(debugTokenHeader.length());      dbgTable.put(token,Boolean.TRUE);    }  }  Debug.postInit();}  }
class C{  private boolean isNetworkPartition(NetView newView,boolean logWeights){  if (currentView == null) {    return false;  }  int oldWeight=currentView.memberWeight();  int failedWeight=newView.getCrashedMemberWeight(currentView);  if (failedWeight > 0 && logWeights) {    if (logger.isInfoEnabled() && newView.getCreator().equals(localAddress)) {      newView.logCrashedMemberWeights(currentView,logger);    }    int failurePoint=(int)(Math.round(51.0 * oldWeight) / 100.0);    if (failedWeight > failurePoint && quorumLostView != newView) {      quorumLostView=newView;      logger.warn("total weight lost in this view change is {} of {}.  Quorum has been lost!",failedWeight,oldWeight);      services.getManager().quorumLost(newView.getActualCrashedMembers(currentView),currentView);      return true;    }  }  return false;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  String outputFile;  int progress;  int i, j, n;  int numRecs;  ShapeType shapeType;  double distanceTolerance=0;  BoundingBox[] boundingBoxes;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  outputFile=args[1];  distanceTolerance=Double.parseDouble(args[2]);  if (distanceTolerance < 0) {    showFeedback("The buffer size has not been set properly.");    return;  }  if ((inputFile == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ShapeFile input=new ShapeFile(inputFile);    shapeType=input.getShapeType();    if (shapeType.getBaseType() != ShapeType.POLYLINE && shapeType.getBaseType() != ShapeType.POLYGON) {      showFeedback("This tool only operates on shapefiles of a POLYLINE or POLYGON shape type.");      return;    }    numRecs=input.getNumberOfRecords();    boundingBoxes=new BoundingBox[numRecs];    AttributeTable table=input.getAttributeTable();    ShapeFile output=new ShapeFile(outputFile,shapeType,table.getAllFields());    output.setProjectionStringFromOtherShapefile(input);    ArrayList<com.vividsolutions.jts.geom.Geometry> geoms=new ArrayList<>();    com.vividsolutions.jts.geom.Geometry[] recJTS=null;    int oldProgress=-1;    n=0;    for (    ShapeFileRecord record : input.records) {      int recNum=record.getRecordNumber();      double[][] points=record.getGeometry().getPoints();      double minX=Double.POSITIVE_INFINITY;      double maxX=Double.NEGATIVE_INFINITY;      double minY=Double.POSITIVE_INFINITY;      double maxY=Double.NEGATIVE_INFINITY;      for (i=0; i < points.length; i++) {        if (points[i][0] < minX) {          minX=points[i][0];        }        if (points[i][0] > maxX) {          maxX=points[i][0];        }        if (points[i][1] < minY) {          minY=points[i][1];        }        if (points[i][1] > maxY) {          maxY=points[i][1];        }      }      boundingBoxes[recNum - 1]=new BoundingBox(minX,minY,maxX,maxY);      if (record.getShapeType() != ShapeType.NULLSHAPE) {        recJTS=record.getGeometry().getJTSGeometries();        for (int a=0; a < recJTS.length; a++) {          recJTS[a].setUserData(recNum);          geoms.add(recJTS[a]);        }      }      progress=(int)(100f * n / (numRecs - 1));      if (progress > oldProgress) {        updateProgress(progress);        oldProgress=progress;      }      if (cancelOp) {        cancelOperation();        return;      }      n++;    }    n=0;    oldProgress=-1;    int numGeoms=geoms.size();    int recNum1, recNum2;    for (i=0; i < numGeoms; i++) {      recNum1=(int)geoms.get(i).getUserData() - 1;      for (j=i + 1; j < numGeoms; j++) {        recNum2=(int)geoms.get(j).getUserData() - 1;        if (boundingBoxes[recNum1].near(boundingBoxes[recNum2],distanceTolerance * 10)) {          com.vividsolutions.jts.geom.Geometry[] geomsResult=GeometrySnapper.snap(geoms.get(i),geoms.get(j),distanceTolerance);          geomsResult[0].setUserData(recNum1 + 1);          geomsResult[1].setUserData(recNum2 + 1);          geoms.set(i,geomsResult[0]);          geoms.set(j,geomsResult[1]);        }      }      progress=(int)(100f * n / (numGeoms - 1));      if (progress > oldProgress) {        updateProgress(progress);        oldProgress=progress;      }      if (cancelOp) {        cancelOperation();        return;      }      n++;    }    n=0;    oldProgress=-1;    for (    com.vividsolutions.jts.geom.Geometry g : geoms) {      int recNum=(int)g.getUserData();      if (g instanceof com.vividsolutions.jts.geom.Polygon && shapeType.getBaseType() == ShapeType.POLYGON) {        com.vividsolutions.jts.geom.Polygon p=(com.vividsolutions.jts.geom.Polygon)g;        ArrayList<ShapefilePoint> pnts=new ArrayList<>();        int[] parts=new int[p.getNumInteriorRing() + 1];        Coordinate[] coords=p.getExteriorRing().getCoordinates();        if (Topology.isClockwisePolygon(coords)) {          for (i=0; i < coords.length; i++) {            pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));          }        } else {          for (i=coords.length - 1; i >= 0; i--) {            pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));          }        }        for (int b=0; b < p.getNumInteriorRing(); b++) {          parts[b + 1]=pnts.size();          coords=p.getInteriorRingN(b).getCoordinates();          if (Topology.isClockwisePolygon(coords)) {            for (i=coords.length - 1; i >= 0; i--) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          } else {            for (i=0; i < coords.length; i++) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          }        }        PointsList pl=new PointsList(pnts);        whitebox.geospatialfiles.shapefile.Geometry wbGeometry;        if (shapeType == ShapeType.POLYGON) {          wbGeometry=new whitebox.geospatialfiles.shapefile.Polygon(parts,pl.getPointsArray());        } else         if (shapeType == ShapeType.POLYGONZ) {          PolygonZ pz=(PolygonZ)input.getRecord(recNum).getGeometry();          double[] zArray=pz.getzArray();          double[] mArray=pz.getmArray();          wbGeometry=new whitebox.geospatialfiles.shapefile.PolygonZ(parts,pl.getPointsArray(),zArray,mArray);        } else {          PolygonM pm=(PolygonM)input.getRecord(recNum).getGeometry();          double[] mArray=pm.getmArray();          wbGeometry=new whitebox.geospatialfiles.shapefile.PolygonM(parts,pl.getPointsArray(),mArray);        }        output.addRecord(wbGeometry,table.getRecord(recNum - 1));      } else       if (g instanceof com.vividsolutions.jts.geom.LineString && shapeType.getBaseType() == ShapeType.POLYLINE) {        com.vividsolutions.jts.geom.LineString p=(com.vividsolutions.jts.geom.LineString)g;        ArrayList<ShapefilePoint> pnts=new ArrayList<>();        int[] parts={0};        Coordinate[] coords=p.getCoordinates();        for (i=0; i < coords.length; i++) {          pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));        }        PointsList pl=new PointsList(pnts);        whitebox.geospatialfiles.shapefile.Geometry wbGeometry;        if (shapeType == ShapeType.POLYLINE) {          wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());        } else         if (shapeType == ShapeType.POLYLINEZ) {          PolyLineZ pz=(PolyLineZ)input.getRecord(recNum).getGeometry();          double[] zArray=pz.getzArray();          double[] mArray=pz.getmArray();          wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLineZ(parts,pl.getPointsArray(),zArray,mArray);        } else {          PolyLineM pm=(PolyLineM)input.getRecord(recNum).getGeometry();          double[] mArray=pm.getmArray();          wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLineM(parts,pl.getPointsArray(),mArray);        }        output.addRecord(wbGeometry,table.getRecord(recNum - 1));      }      progress=(int)(100f * n / (numGeoms - 1));      if (progress > oldProgress) {        updateProgress(progress);        oldProgress=progress;      }      if (cancelOp) {        cancelOperation();        return;      }      n++;    }    output.write();    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static boolean fileCreate(String file){  Logger.getInstance().logVerbose("FileCreate","File: " + file);  try {    return (new File(file)).createNewFile();  } catch (  IOException e) {    Logger.getInstance().logError("FileCreate","Could not create file: " + e.getMessage());    return false;  }}  }
class C{  private void $$$setupUI$$$(){  contentPane=new JPanel();  contentPane.setLayout(new BorderLayout(0,0));  final JScrollPane scrollPane1=new JScrollPane();  contentPane.add(scrollPane1,BorderLayout.CENTER);  apiTable=new JTable();  apiTable.setShowVerticalLines(true);  scrollPane1.setViewportView(apiTable);}  }
class C{  public double nextDouble(double freedom){  double u, v, z, zz, r;  if (freedom == 1.0) {    for (; ; ) {      u=randomGenerator.nextDouble();      v=randomGenerator.nextDouble() * 0.857763884960707;      z=v / u;      if (z < 0)       continue;      zz=z * z;      r=2.5 - zz;      if (z < 0.0)       r=r + zz * z / (3.0 * z);      if (u < r * 0.3894003915)       return (z * z);      if (zz > (1.036961043 / u + 1.4))       continue;      if (2.0 * Math.log(u) < (-zz * 0.5))       return (z * z);    }  } else {    if (freedom != freedom_in) {      b=Math.sqrt(freedom - 1.0);      vm=-0.6065306597 * (1.0 - 0.25 / (b * b + 1.0));      vm=(-b > vm) ? -b : vm;      vp=0.6065306597 * (0.7071067812 + b) / (0.5 + b);      vd=vp - vm;      freedom_in=freedom;    }    for (; ; ) {      u=randomGenerator.nextDouble();      v=randomGenerator.nextDouble() * vd + vm;      z=v / u;      if (z < -b)       continue;      zz=z * z;      r=2.5 - zz;      if (z < 0.0)       r=r + zz * z / (3.0 * (z + b));      if (u < r * 0.3894003915)       return ((z + b) * (z + b));      if (zz > (1.036961043 / u + 1.4))       continue;      if (2.0 * Math.log(u) < (Math.log(1.0 + z / b) * b * b - zz * 0.5 - z * b))       return ((z + b) * (z + b));    }  }}  }
class C{  private void drawCaretAsciiWindow(final Graphics g,final int characterWidth,final int characterHeight){  final int currentRow=getCurrentRow() - m_firstRow;  final int currentColumn=getCurrentColumn();  final int currentCharacter=currentColumn / 2;  final int startLeft=9 + m_offsetViewWidth + m_hexViewWidth;  final int x=(-m_firstColumn * m_charWidth) + startLeft + (currentCharacter * characterWidth);  final int y=((3 + m_paddingTop) - characterHeight) + (characterHeight * currentRow);  m_caret.draw(g,x,y,characterHeight);}  }
class C{  public void testFilteredClassifier(){  try {    Instances data=getFilteredClassifierData();    for (int i=0; i < data.numAttributes(); i++) {      if (data.classIndex() == i)       continue;      if (data.attribute(i).isNominal()) {        ((MergeTwoValues)m_FilteredClassifier.getFilter()).setAttributeIndex("" + (i + 1));        break;      }    }  } catch (  Exception e) {    fail("Problem setting up test for FilteredClassifier: " + e.toString());  }  super.testFilteredClassifier();}  }
class C{  public void updateEQPreset(String presetName,int fiftyHertz,int oneThirtyHertz,int threeTwentyHertz,int eightHundredHertz,int twoKilohertz,int fiveKilohertz,int twelvePointFiveKilohertz,short virtualizer,short bassBoost,short reverb){  if (presetName != null) {    if (presetName.contains("'")) {      presetName=presetName.replace("'","''");    }  }  ContentValues values=new ContentValues();  values.put(EQ_50_HZ,fiftyHertz);  values.put(EQ_130_HZ,threeTwentyHertz);  values.put(EQ_320_HZ,threeTwentyHertz);  values.put(EQ_800_HZ,eightHundredHertz);  values.put(EQ_2000_HZ,twoKilohertz);  values.put(EQ_5000_HZ,fiveKilohertz);  values.put(EQ_12500_HZ,twelvePointFiveKilohertz);  values.put(VIRTUALIZER,virtualizer);  values.put(BASS_BOOST,bassBoost);  values.put(REVERB,reverb);  String condition=PRESET_NAME + " = " + "'"+ presetName+ "'";  getDatabase().update(EQUALIZER_PRESETS_TABLE,values,condition,null);}  }
class C{  public void applyIntersectionCosts(StreetLayer streetLayer){  VertexStore.Vertex v=streetLayer.vertexStore.getCursor(0);  EdgeStore.Edge e=streetLayer.edgeStore.getCursor();  TIntIntMap vertexStresses=new TIntIntHashMap();  do {    if (v.getFlag(VertexStore.VertexFlag.TRAFFIC_SIGNAL))     continue;    int maxLts=1;    for (TIntIterator it=streetLayer.incomingEdges.get(v.index).iterator(); it.hasNext(); ) {      e.seek(it.next());      if (e.getFlag(EdgeStore.EdgeFlag.BIKE_LTS_2))       maxLts=Math.max(2,maxLts);      if (e.getFlag(EdgeStore.EdgeFlag.BIKE_LTS_3))       maxLts=Math.max(3,maxLts);      if (e.getFlag(EdgeStore.EdgeFlag.BIKE_LTS_4))       maxLts=Math.max(4,maxLts);    }    for (TIntIterator it=streetLayer.outgoingEdges.get(v.index).iterator(); it.hasNext(); ) {      e.seek(it.next());      if (e.getFlag(EdgeStore.EdgeFlag.BIKE_LTS_2))       maxLts=Math.max(2,maxLts);      if (e.getFlag(EdgeStore.EdgeFlag.BIKE_LTS_3))       maxLts=Math.max(3,maxLts);      if (e.getFlag(EdgeStore.EdgeFlag.BIKE_LTS_4))       maxLts=Math.max(4,maxLts);    }    vertexStresses.put(v.index,maxLts);  } while (v.advance());  for (TIntIntIterator it=vertexStresses.iterator(); it.hasNext(); ) {    it.advance();    v.seek(it.key());    for (TIntIterator eit=streetLayer.incomingEdges.get(v.index).iterator(); eit.hasNext(); ) {      e.seek(eit.next());      int lts=it.value();      if (e.getFlag(EdgeStore.EdgeFlag.BIKE_LTS_2))       lts=Math.max(2,lts);      if (e.getFlag(EdgeStore.EdgeFlag.BIKE_LTS_3))       lts=Math.max(3,lts);      if (e.getFlag(EdgeStore.EdgeFlag.BIKE_LTS_4))       lts=Math.max(4,lts);      e.clearFlag(EdgeStore.EdgeFlag.BIKE_LTS_1);      e.clearFlag(EdgeStore.EdgeFlag.BIKE_LTS_2);      e.clearFlag(EdgeStore.EdgeFlag.BIKE_LTS_3);      e.clearFlag(EdgeStore.EdgeFlag.BIKE_LTS_4);      e.setFlag(intToLts(lts));    }    for (TIntIterator eit=streetLayer.outgoingEdges.get(v.index).iterator(); eit.hasNext(); ) {      e.seek(eit.next());      int lts=it.value();      if (e.getFlag(EdgeStore.EdgeFlag.BIKE_LTS_2))       lts=Math.max(2,lts);      if (e.getFlag(EdgeStore.EdgeFlag.BIKE_LTS_3))       lts=Math.max(3,lts);      if (e.getFlag(EdgeStore.EdgeFlag.BIKE_LTS_4))       lts=Math.max(4,lts);      e.clearFlag(EdgeStore.EdgeFlag.BIKE_LTS_1);      e.clearFlag(EdgeStore.EdgeFlag.BIKE_LTS_2);      e.clearFlag(EdgeStore.EdgeFlag.BIKE_LTS_3);      e.clearFlag(EdgeStore.EdgeFlag.BIKE_LTS_4);      e.setFlag(intToLts(lts));    }  }}  }
class C{  public static boolean hasText(String input){  return input != null && !input.trim().isEmpty();}  }
class C{  public static final int objectToInt(Object val){  int v=Integer.MIN_VALUE;  if (val instanceof Integer) {    v=((Integer)val).intValue();    if (v == Integer.MIN_VALUE + 1) {      v=Integer.MIN_VALUE;    }  } else   if (val instanceof Short) {    v=((Short)val).shortValue();    if (v == Short.MIN_VALUE + 1) {      v=Integer.MIN_VALUE;    }  }  return v;}  }
class C{  private String parseColor(String color,TimedTextObject tto){  String value="";  String[] values;  if (color.startsWith("#")) {    if (color.length() == 7)     value=color.substring(1) + "ff"; else     if (color.length() == 9)     value=color.substring(1); else {      value="ffffffff";      tto.warnings+="Unrecoginzed format: " + color + "\n\n";    }  } else   if (color.startsWith("rgb")) {    boolean alpha=false;    if (color.startsWith("rgba"))     alpha=true;    try {      values=color.split("(")[1].split(",");      int r, g, b, a=255;      r=Integer.parseInt(values[0]);      g=Integer.parseInt(values[1]);      b=Integer.parseInt(values[2].substring(0,2));      if (alpha)       a=Integer.parseInt(values[3].substring(0,2));      values[0]=Integer.toHexString(r);      values[1]=Integer.toHexString(g);      values[2]=Integer.toHexString(b);      if (alpha)       values[2]=Integer.toHexString(a);      for (int i=0; i < values.length; i++) {        if (values[i].length() < 2)         values[i]="0" + values[i];        value+=values[i];      }      if (!alpha)       value+="ff";    } catch (    Exception e) {      value="ffffffff";      tto.warnings+="Unrecoginzed color: " + color + "\n\n";    }  } else {    value=Style.getRGBValue("name",color);    if (value == null || value.isEmpty()) {      value="ffffffff";      tto.warnings+="Unrecoginzed color: " + color + "\n\n";    }  }  return value;}  }
class C{  public static String constructHashRedisKey(String queueName,String shardName,long jobId){  return String.format("%s%s",constructHashRedisKeyPrefix(queueName,shardName),jobId);}  }
class C{  public Address __ror__(final Object rhs){  return new Address(m_value.or(getBigInteger(rhs)));}  }
class C{  public Object visit(ASTTrue node,Object data){  return showNode(node,data);}  }
class C{  protected static void assertState(final boolean validState,final String message,final Object... args){  if (!validState) {    throw new IllegalStateException(String.format(message,args));  }}  }
class C{  public DefaultResponseLog(RequestLog request,CompletableFuture<?> requestLogFuture){  this.request=request;  this.requestLogFuture=requestLogFuture;}  }
class C{  public ElementRule(String name,XMLSyntaxRule[] rules,int min,int max){  this.name=name;  this.rules=rules;  this.min=min;  this.max=max;}  }
class C{  public void paintFileChooserBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  @Override public void pushMessageAsync(Message msg) throws org.apache.thrift.TException {  pushMessageSync(msg);  return;}  }
class C{  private void transmit(byte packet[]){  stats.numBytes+=packet.length;  stats.numPackets++;  rtcpSession.updateavgrtcpsize(packet.length);  rtcpSession.timeOfLastRTCPSent=rtcpSession.currentTime();  try {    datagramConnection.send(remoteAddress,remotePort,packet);  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  protected void changeUser(String userName,String password,String database) throws SQLException {  this.packetSequence=-1;  this.compressedPacketSequence=-1;  int passwordLength=16;  int userLength=(userName != null) ? userName.length() : 0;  int databaseLength=(database != null) ? database.length() : 0;  int packLength=((userLength + passwordLength + databaseLength) * 3) + 7 + HEADER_LENGTH+ AUTH_411_OVERHEAD;  if ((this.serverCapabilities & CLIENT_PLUGIN_AUTH) != 0) {    proceedHandshakeWithPluggableAuthentication(userName,password,database,null);  } else   if ((this.serverCapabilities & CLIENT_SECURE_CONNECTION) != 0) {    Buffer changeUserPacket=new Buffer(packLength + 1);    changeUserPacket.writeByte((byte)MysqlDefs.COM_CHANGE_USER);    if (versionMeetsMinimum(4,1,1)) {      secureAuth411(changeUserPacket,packLength,userName,password,database,false);    } else {      secureAuth(changeUserPacket,packLength,userName,password,database,false);    }  } else {    Buffer packet=new Buffer(packLength);    packet.writeByte((byte)MysqlDefs.COM_CHANGE_USER);    packet.writeString(userName);    if (this.protocolVersion > 9) {      packet.writeString(Util.newCrypt(password,this.seed,this.connection.getPasswordCharacterEncoding()));    } else {      packet.writeString(Util.oldCrypt(password,this.seed));    }    boolean localUseConnectWithDb=this.useConnectWithDb && (database != null && database.length() > 0);    if (localUseConnectWithDb) {      packet.writeString(database);    } else {    }    send(packet,packet.getPosition());    checkErrorPacket();    if (!localUseConnectWithDb) {      changeDatabaseTo(database);    }  }}  }
class C{  public void testHeadAndTailDelimiters() throws Exception {  byte[] delim=array(F.t(wrap(2),8));  byte[] data=array(F.t(delim,1),F.t(wrap(1),8),F.t(delim,1));  assertSplit(0,4,0,8,data,delim);  assertSplit(0,8,0,8,data,delim);  assertSplit(0,12,0,24,data,delim);  assertSplit(0,16,0,24,data,delim);  assertSplit(0,20,0,24,data,delim);  assertSplit(0,24,0,24,data,delim);  assertSplitNull(2,2,data,delim);  assertSplitNull(2,6,data,delim);  assertSplit(2,10,8,16,data,delim);  assertSplit(2,14,8,16,data,delim);  assertSplit(2,18,8,16,data,delim);  assertSplit(2,22,8,16,data,delim);  assertSplit(8,4,8,16,data,delim);  assertSplit(8,8,8,16,data,delim);  assertSplit(8,12,8,16,data,delim);  assertSplit(8,16,8,16,data,delim);  assertSplitNull(10,2,data,delim);  assertSplitNull(10,6,data,delim);  assertSplitNull(10,10,data,delim);  assertSplitNull(10,14,data,delim);  assertSplitNull(16,4,data,delim);  assertSplitNull(16,8,data,delim);  assertSplitNull(18,2,data,delim);  assertSplitNull(18,6,data,delim);}  }
class C{  public void testParameters() throws Exception {  resource.setParameter("username","foo");  resource.setParameter("password","bar");  assertEquals("username not set","foo",resource.getParameter("username"));  assertEquals("password not set","bar",resource.getParameter("password"));}  }
class C{  @Override public void handleStart(Operation post){  State initialState=validateStartPost(post);  if (initialState == null) {    return;  }  initializeState(initialState,post);  if (this.isDetailedLoggingEnabled) {    logInfo("Creating synchronization-task for factory %s",initialState.factorySelfLink);  }  post.setBody(initialState).setStatusCode(Operation.STATUS_CODE_ACCEPTED).complete();}  }
class C{  public static <T>void storeSection(Config cfg,String section,String sub,T s,T defaults) throws ConfigInvalidException {  try {    for (    Field f : s.getClass().getDeclaredFields()) {      if (skipField(f)) {        continue;      }      Class<?> t=f.getType();      String n=f.getName();      f.setAccessible(true);      Object c=f.get(s);      Object d=f.get(defaults);      if (!isString(t) && !isCollectionOrMap(t)) {        Preconditions.checkNotNull(d,"Default cannot be null for: " + n);      }      if (c == null || c.equals(d)) {        cfg.unset(section,sub,n);      } else {        if (isString(t)) {          cfg.setString(section,sub,n,(String)c);        } else         if (isInteger(t)) {          cfg.setInt(section,sub,n,(Integer)c);        } else         if (isLong(t)) {          cfg.setLong(section,sub,n,(Long)c);        } else         if (isBoolean(t)) {          cfg.setBoolean(section,sub,n,(Boolean)c);        } else         if (t.isEnum()) {          cfg.setEnum(section,sub,n,(Enum<?>)c);        } else         if (isCollectionOrMap(t)) {          continue;        } else {          throw new ConfigInvalidException("type is unknown: " + t.getName());        }      }    }  } catch (  SecurityException|IllegalArgumentException|IllegalAccessException e) {    throw new ConfigInvalidException("cannot save values",e);  }}  }
class C{  @Override public int hashCode(){  return getAttributes().hashCode();}  }
class C{  @Override public String build(){  builder.append(";");  return builder.build();}  }
class C{  private void persistLockData(String lockName,DistributedOwnerLockData data){  String path=getLockDataPath(lockName);  String ownerLockPath=getLockByOwnerPath(lockName,data.getOwner());  try {    Stat stat=dataManager.checkExists(ownerLockPath);    if (stat == null) {      dataManager.createNode(ownerLockPath,false);    }    stat=dataManager.checkExists(path);    if (stat == null) {      dataManager.createNode(path,false);    }    dataManager.putData(path,data);  } catch (  Exception ex) {    log.error("Can't storage LockData: " + lockName,ex);  }}  }
class C{  public void writeTag(String tag,boolean value){  writeTag(tag,Boolean.toString(value));}  }
class C{  public static void reorderVectorIntoMatrix(double[] inputValues,int[] timePoints,double[][] matrix,int column){  for (int i=0; i < timePoints.length; i++) {    int t=timePoints[i];    matrix[i][column]=inputValues[t];  }}  }
class C{  protected int bytesPerLine(){  return (57);}  }
class C{  public static Builder builder(RegisterResponse response){  return new Builder(response);}  }
class C{  public MMigrationStep(MMigration m_migration,PO po,POInfo info,String event){  this(po.getCtx(),0,po.get_TrxName());  setAD_Migration_ID(m_migration.getAD_Migration_ID());  set_TrxName(po.get_TrxName());  setStepType(MMigrationStep.STEPTYPE_ApplicationDictionary);  setAction(event);  setAD_Table_ID(po.get_Table_ID());  setRecord_ID(po.get_ID());  setStatusCode(MMigrationStep.STATUSCODE_Applied);  setApply(MMigrationStep.APPLY_Rollback);  String sql="SELECT COALESCE(max(SeqNo),0) + 10 FROM AD_MigrationStep" + " WHERE AD_Migration_ID = " + getAD_Migration_ID();  int seqNo=DB.getSQLValue(get_TrxName(),sql);  setSeqNo(seqNo);  saveEx(po.get_TrxName());  int size=po.get_ColumnCount();  for (int i=0; i < size; i++) {    Object value=po.get_Value(i);    boolean isMultiKeyColumn=false;    if (po.get_KeyColumns().length > 1) {      for (int j=0; j < po.get_KeyColumns().length; j++) {        String name=po.get_KeyColumns()[j];        if (name.equals(info.getColumnName(i))) {          isMultiKeyColumn=true;          break;        }      }    }    if (!info.isEncrypted(i) && !info.isVirtualColumn(i)) {      MMigrationData data=new MMigrationData(this);      data.setAD_Column_ID(info.getColumn(i).AD_Column_ID);      if (event.equals(MMigrationStep.ACTION_Delete) || (event.equals(MMigrationStep.ACTION_Update) && po.is_ValueChanged(i) || isMultiKeyColumn)) {        if (po.get_ValueOld(i) == null)         data.setIsOldNull(true); else         data.setOldValue(po.get_ValueOld(i).toString());        data.saveEx();      }      if (event.equals(MMigrationStep.ACTION_Insert) || (event.equals(MMigrationStep.ACTION_Update) && po.is_ValueChanged(i)) || isMultiKeyColumn) {        if (value == null && info.getDefaultLogic(i) != null && !info.isColumnMandatory(i))         data.setNewValue(info.getDefaultLogic(i)); else         if (value == null)         data.setIsNewNull(true); else         data.setNewValue(value.toString());        data.saveEx();      }    }  }}  }
class C{  public void draw(String text,int x,int y,int textLineHeight){  if (text == null) {    String msg=Logging.getMessage("nullValue.StringIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  String[] lines=text.split("\n");  for (  String line : lines) {    int xAligned=x;    if (this.textAlign.equals(AVKey.CENTER))     xAligned=x - (int)(this.textRenderer.getBounds(line).getWidth() / 2); else     if (this.textAlign.equals(AVKey.RIGHT))     xAligned=x - (int)(this.textRenderer.getBounds(line).getWidth());    y-=textLineHeight;    this.textRenderer.draw3D(line,xAligned,y,0,1);    y-=this.lineSpacing;  }}  }
class C{  @POST @Path("/internal/validate-change") @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public Response validateUserPasswordForChange(PasswordChangeParam passwordParam){  checkPasswordParameter(passwordParam);  return Response.noContent().build();}  }
class C{  public static void closeWithWarning(Closeable c){  if (c != null) {    try {      c.close();    } catch (    IOException e) {      LOG.warning("Caught exception during close(): " + e);    }  }}  }
class C{  public MessageInf(int iSignalWord,String sHazard){  this(iSignalWord,sHazard,null);}  }
class C{  @Override public void render(final Writer w) throws IOException {  final HistoryTable t=pt.src;{    final String summary="Showing samples: period=" + t.units;    w.write("<table border=\"1\" summary=\"" + attrib(summary) + "\"\n>");  }{    w.write(" <tr\n>");    w.write("  <th>" + cdata(t.units) + "</th\n>");    w.write("  <th>" + cdata("timestamp") + "</th\n>");    for (    String s : pt.cnames) {      w.write("  <th>" + cdata(s) + "</th\n>");    }    for (    String s : pt.vcols) {      w.write("  <th>" + cdata(s) + "</th\n>");    }    w.write(" </tr\n>");  }  for (int row=0; row < t.nrows; row++) {    final long timestamp=t.getTimestamp(row);    final String unitStr=cdata(formatter.unitsFormat.format(((double)timestamp - t.getTimestamp(0)) / t.period));    final String timeStr=cdata(formatter.date(timestamp));    for (    CSet cset : pt.csets) {      assert cset.cats.length == pt.cnames.length : "cset categories=" + Arrays.toString(cset.cats) + " vs "+ "category names: "+ Arrays.toString(pt.cnames);      final Double[] vals=new Double[pt.vcols.size()];      int ndefined=0;      int valueColumnIndex=0;      for (      String vcol : pt.vcols) {        int valueCountForColumn=0;        double val=0d;        for (        ICounter<?> c : cset.counters) {          if (!c.getName().equals(vcol)) {            continue;          }          for (int col=0; col < t.a.length; col++) {            if (c != t.a[col])             continue;            final IHistoryEntry<?> e=t.data[row][col];            if (e == null) {              continue;            }            val+=((Number)e.getValue()).doubleValue();            valueCountForColumn++;            break;          }        }        if (valueCountForColumn > 0) {          vals[valueColumnIndex]=val;          ndefined++;        }        if (log.isDebugEnabled() && valueCountForColumn > 0)         log.debug("vcol=" + vcol + ", vcol#="+ valueColumnIndex+ ", #values="+ valueCountForColumn+ ", val="+ val);        valueColumnIndex++;      }      if (ndefined == 0) {        continue;      }      w.write(" <tr\n>");      w.write("  <td>" + unitStr + "</td\n>");      w.write("  <td>" + timeStr + "</td\n>");      for (int j=0; j < pt.cnames.length; j++) {        w.write("  <td>" + cset.cats[j] + "</td\n>");      }      for (int j=0; j < vals.length; j++) {        final String s=vals[j] == null ? "" : Double.toString(vals[j]);        w.write("  <td>" + s + "</td\n>");      }      w.write(" </tr\n>");    }  }  w.write("</table\n>");}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ACTIVITY___ANONYMOUS_ACTIVITY_11:    return getAnonymous_activity_1_1();case UmplePackage.ACTIVITY___CODE_1:  return getCode_1();case UmplePackage.ACTIVITY___ANONYMOUS_ACTIVITY_21:return getAnonymous_activity_2_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public boolean hasRel(){  return super.hasAttribute(REL);}  }
class C{  public ApplicationTest(){  super(Application.class);}  }
class C{  void accumulate(double elapsedTime){  this.force.zero();  int size=this.forces.size();  if (size > 0) {    Iterator<Force> it=this.forces.iterator();    while (it.hasNext()) {      Force force=it.next();      this.force.add(force.force);      if (force.isComplete(elapsedTime)) {        it.remove();      }    }  }  this.torque=0.0;  size=this.torques.size();  if (size > 0) {    Iterator<Torque> it=this.torques.iterator();    while (it.hasNext()) {      Torque torque=it.next();      this.torque+=torque.torque;      if (torque.isComplete(elapsedTime)) {        it.remove();      }    }  }}  }
class C{  public void addDiscovery(AspectItem item,IAspectType discovered){  List<IAspectType> discoveredAspects=this.discoveredStaticAspects.get(item);  if (discoveredAspects == null) {    this.discoveredStaticAspects.put(item,discoveredAspects=new ArrayList<IAspectType>());  }  if (!discoveredAspects.contains(discovered))   discoveredAspects.add(discovered);  this.saveContainer();}  }
class C{  public Expression copyInline(Context ctx){  NaryExpression e=(NaryExpression)clone();  if (right != null) {    e.right=right.copyInline(ctx);  }  e.args=new Expression[args.length];  for (int i=0; i < args.length; i++) {    if (args[i] != null) {      e.args[i]=args[i].copyInline(ctx);    }  }  return e;}  }
class C{  public final CC alignY(String align){  ver.setAlign(ConstraintParser.parseUnitValueOrAlign(align,false,null));  return this;}  }
class C{  public static String extractJson(String message){  int jsonStart=message.indexOf("{");  if (jsonStart < 0) {    return null;  }  String jsonSubString=message.substring(jsonStart);  try {    JsonNode rootNode=JSON_OBJECT_MAPPER.readTree(jsonSubString);    if (rootNode.isValueNode()) {      return null;    }  } catch (  IOException e) {    return null;  }  return jsonSubString;}  }
class C{  public void testFlipBitNegativeInside1(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=-1;  int number=15;  byte rBytes[]={-2,127,-57,-101,1,75,-90,-46,-92,-4,14,92,-26};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.flipBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  protected void buildDimensionsDescriptorIDAggregatorIDMaps(){  dimensionsDescriptorIDToIncrementalAggregatorIDs=Lists.newArrayList();  dimensionsDescriptorIDToAggregatorIDToInputAggregatorDescriptor=Lists.newArrayList();  dimensionsDescriptorIDToAggregatorIDToOutputAggregatorDescriptor=Lists.newArrayList();  for (int index=0; index < dimensionsDescriptorIDToAggregatorToAggregateDescriptor.size(); index++) {    IntArrayList aggIDList=new IntArrayList();    Int2ObjectMap<FieldsDescriptor> inputMap=new Int2ObjectOpenHashMap<>();    Int2ObjectMap<FieldsDescriptor> outputMap=new Int2ObjectOpenHashMap<>();    dimensionsDescriptorIDToIncrementalAggregatorIDs.add(aggIDList);    dimensionsDescriptorIDToAggregatorIDToInputAggregatorDescriptor.add(inputMap);    dimensionsDescriptorIDToAggregatorIDToOutputAggregatorDescriptor.add(outputMap);    for (    Map.Entry<String,FieldsDescriptor> entry : dimensionsDescriptorIDToAggregatorToAggregateDescriptor.get(index).entrySet()) {      buildNonCompositeAggregatorIDMap(entry.getKey(),entry.getValue(),aggIDList,inputMap,outputMap);    }  }  int maxAggregatorID=getLargestNonCompositeAggregatorID();  dimensionsDescriptorIDToCompositeAggregatorIDs=Lists.newArrayList();  for (int index=0; index < dimensionsDescriptorIDToCompositeAggregatorToAggregateDescriptor.size(); index++) {    IntArrayList aggIDList=new IntArrayList();    Int2ObjectMap<FieldsDescriptor> inputMap=dimensionsDescriptorIDToAggregatorIDToInputAggregatorDescriptor.get(index);    Int2ObjectMap<FieldsDescriptor> outputMap=dimensionsDescriptorIDToAggregatorIDToOutputAggregatorDescriptor.get(index);    dimensionsDescriptorIDToCompositeAggregatorIDs.add(aggIDList);    for (    Map.Entry<String,FieldsDescriptor> entry : dimensionsDescriptorIDToCompositeAggregatorToAggregateDescriptor.get(index).entrySet()) {      String aggregatorName=entry.getKey();      FieldsDescriptor inputDescriptor=entry.getValue();      AbstractCompositeAggregator compositeAggregator=aggregatorRegistry.getNameToTopBottomAggregator().get(aggregatorName);      int aggregatorID;      Integer objAggregatorID=aggregatorRegistry.getTopBottomAggregatorNameToID().get(aggregatorName);      if (objAggregatorID == null) {        aggregatorID=++maxAggregatorID;        aggregatorRegistry.getTopBottomAggregatorNameToID().put(aggregatorName,aggregatorID);      } else {        aggregatorID=objAggregatorID;      }      aggIDList.add(aggregatorID);      inputMap.put(aggregatorID,inputDescriptor);      outputMap.put(aggregatorID,AggregatorUtils.getOutputFieldsDescriptor(inputDescriptor,compositeAggregator));    }  }}  }
class C{  static public void assertEquals(String message,float expected,float actual,float delta){  if (Float.isInfinite(expected)) {    if (!(expected == actual))     failNotEquals(message,new Float(expected),new Float(actual));  } else   if (!(Math.abs(expected - actual) <= delta))   failNotEquals(message,new Float(expected),new Float(actual));}  }
class C{  @Override public int onStartCommand(Intent intent,int flags,int startId){  Log_OC.d(TAG,"Starting command with id " + startId);  if (!intent.hasExtra(EXTRA_ACCOUNT) || !intent.hasExtra(EXTRA_FILE)) {    Log_OC.e(TAG,"Not enough information provided in intent");    return START_NOT_STICKY;  } else {    final Account account=intent.getParcelableExtra(EXTRA_ACCOUNT);    final OCFile file=intent.getParcelableExtra(EXTRA_FILE);    AbstractList<String> requestedDownloads=new Vector<>();    try {      DownloadFileOperation newDownload=new DownloadFileOperation(account,file);      newDownload.addDatatransferProgressListener(this);      newDownload.addDatatransferProgressListener((FileDownloaderBinder)mBinder);      Pair<String,String> putResult=mPendingDownloads.putIfAbsent(account,file.getRemotePath(),newDownload);      String downloadKey=putResult.first;      requestedDownloads.add(downloadKey);      sendBroadcastNewDownload(newDownload,putResult.second);    } catch (    IllegalArgumentException e) {      Log_OC.e(TAG,"Not enough information provided in intent: " + e.getMessage());      return START_NOT_STICKY;    }    if (requestedDownloads.size() > 0) {      Message msg=mServiceHandler.obtainMessage();      msg.arg1=startId;      msg.obj=requestedDownloads;      mServiceHandler.sendMessage(msg);    }  }  return START_NOT_STICKY;}  }
class C{  public static final float normalizedRandom(){  return RND.nextFloat() * 2 - 1;}  }
class C{  public boolean isAssignableFrom(Type type){  if (this == type)   return true;  if ((type == UNINIT && isReference()) || this == UNINIT && type.isReference())   return true;  if (type instanceof MultiType)   return ((MultiType)type).isAssignableTo(this);  if (type instanceof MultiArrayType)   return ((MultiArrayType)type).isAssignableTo(this);  if (clazz == null || clazz.isPrimitive())   return false;  try {    return type.clazz.subtypeOf(clazz);  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  private float calculateDeltaY(){  int wireTension=15;  if (mProgress <= 50) {    return (mProgress * mWidth / wireTension) / 50 + Math.abs((mTarget - getProgress()) / wireTension) + Math.abs(mBubbleAngle);  } else {    return ((100 - mProgress) * mWidth / wireTension) / 50 + Math.abs((mTarget - getProgress()) / wireTension) + Math.abs(mBubbleAngle);  }}  }
class C{  private PlanAllocation buildPlanString(final IncompatiblePlanRecords incompatibleRecords,final List<PersonRecord> personsStillToAllocate,final Map<Id,PersonRecord> allPersons,final PlanAllocation currentAllocation,final Set<Id> allowedIncompatibilityGroups){  final List<PersonRecord> remainingPersons=new ArrayList<PersonRecord>(personsStillToAllocate);  final PersonRecord currentPerson=remainingPersons.remove(0);  assert remainingPersons.size() == personsStillToAllocate.size() - 1;  if (log.isTraceEnabled()) {    log.trace("look at person " + currentPerson.person.getId() + " at level "+ (currentAllocation == null ? 0 : currentAllocation.getPlans().size()));  }  final List<PlanRecord> records=new ArrayList<PlanRecord>();  for (  PlanRecord r : currentPerson.prunedPlans) {    if (r.isStillFeasible)     records.add(r);  }  if (records.isEmpty())   return null;  for (  PlanRecord r : records) {    assert r.isStillFeasible;    final PlanAllocation newAllocation=new PlanAllocation();    newAllocation.add(r);    List<PersonRecord> actuallyRemainingPersons=remainingPersons;    if (r.jointPlan != null) {      assert currentAllocation == null || !SelectorUtils.intersects(r.jointPlan.getIndividualPlans().keySet(),currentAllocation);      assert r.linkedPlans.size() == r.jointPlan.getIndividualPlans().size() - 1;      newAllocation.addAll(r.linkedPlans);      actuallyRemainingPersons=SelectorUtils.filter(remainingPersons,r.jointPlan);      assert actuallyRemainingPersons.size() + r.jointPlan.getIndividualPlans().size() == personsStillToAllocate.size();    }    if (!actuallyRemainingPersons.isEmpty()) {      final FeasibilityChanger localFeasibilityChanger=new FeasibilityChanger();      SelectorUtils.tagIncompatiblePlansAsInfeasible(r,incompatibleRecords,localFeasibilityChanger);      if (currentAllocation != null)       currentAllocation.addAll(newAllocation.getPlans());      final PlanAllocation record=buildPlanString(incompatibleRecords,actuallyRemainingPersons,allPersons,currentAllocation,newIncompatibilityGroups(incompatibleRecords,allowedIncompatibilityGroups,r));      if (currentAllocation != null)       currentAllocation.removeAll(newAllocation.getPlans());      localFeasibilityChanger.resetFeasibilities();      if (record != null) {        return SelectorUtils.merge(newAllocation,record);      }    } else {      assert !forbidBlockingCombinations || currentAllocation != null;      if (!forbidBlockingCombinations || !SelectorUtils.isBlocking(incompatibleRecords,allPersons,SelectorUtils.toGroupPlans(SelectorUtils.merge(currentAllocation,newAllocation)))) {        return newAllocation;      }    }  }  return null;}  }
class C{  public static String createStyledCommentString(final WorkflowAnnotation annotation){  if (annotation == null) {    throw new IllegalArgumentException("annotation must not be null!");  }  return createStyledCommentString(annotation.getComment(),annotation.getStyle());}  }
class C{  public void testAdd(){  storedQueue.clear();  assertTrue(storedQueue.isEmpty());  for (int i=0; i < SIZE; ++i) {    assertEquals(i,storedQueue.size());    assertTrue(storedQueue.add(String.valueOf(i)));  }}  }
class C{  @Override public void actionPerformed(ActionEvent event){  String command=event.getActionCommand();  if (command.equals(POLAR_ZOOM_IN_ACTION_COMMAND)) {    PolarPlot plot=(PolarPlot)getChart().getPlot();    plot.zoom(0.5);  } else   if (command.equals(POLAR_ZOOM_OUT_ACTION_COMMAND)) {    PolarPlot plot=(PolarPlot)getChart().getPlot();    plot.zoom(2.0);  } else   if (command.equals(POLAR_AUTO_RANGE_ACTION_COMMAND)) {    PolarPlot plot=(PolarPlot)getChart().getPlot();    plot.getAxis().setAutoRange(true);  } else {    super.actionPerformed(event);  }}  }
class C{  public static void addLine(String className,String methodName,int lineNo){  if (!lineMap.containsKey(className))   lineMap.put(className,new LinkedHashMap<String,Set<Integer>>());  if (!lineMap.get(className).containsKey(methodName))   lineMap.get(className).put(methodName,new LinkedHashSet<Integer>());  lineMap.get(className).get(methodName).add(lineNo);}  }
class C{  protected void internalTransform(Body b,String phaseName,Map opts){  CPOptions options=new CPOptions(opts);  StmtBody stmtBody=(StmtBody)b;  int fastCopyPropagationCount=0;  int slowCopyPropagationCount=0;  if (Options.v().verbose())   G.v().out.println("[" + stmtBody.getMethod().getName() + "] Propagating copies...");  if (Options.v().time())   Timers.v().propagatorTimer.start();  Chain units=stmtBody.getUnits();  Map<Local,Integer> localToDefCount=new HashMap<Local,Integer>();{    Iterator stmtIt=units.iterator();    while (stmtIt.hasNext()) {      Stmt s=(Stmt)stmtIt.next();      if (s instanceof DefinitionStmt && ((DefinitionStmt)s).getLeftOp() instanceof Local) {        Local l=(Local)((DefinitionStmt)s).getLeftOp();        if (!localToDefCount.containsKey(l))         localToDefCount.put(l,new Integer(1)); else         localToDefCount.put(l,new Integer(localToDefCount.get(l).intValue() + 1));      }    }  }  ExceptionalUnitGraph graph=new ExceptionalUnitGraph(stmtBody);  LocalDefs localDefs;  localDefs=new SmartLocalDefs(graph,new SimpleLiveLocals(graph));{    Iterator stmtIt=(new PseudoTopologicalOrderer()).newList(graph,false).iterator();    while (stmtIt.hasNext()) {      Stmt stmt=(Stmt)stmtIt.next();      Iterator useBoxIt=stmt.getUseBoxes().iterator();      while (useBoxIt.hasNext()) {        ValueBox useBox=(ValueBox)useBoxIt.next();        if (useBox.getValue() instanceof Local) {          Local l=(Local)useBox.getValue();          if (options.only_regular_locals() && l.getName().startsWith("$"))           continue;          if (options.only_stack_locals() && !l.getName().startsWith("$"))           continue;          List<Unit> defsOfUse=localDefs.getDefsOfAt(l,stmt);          if (defsOfUse.size() == 1) {            DefinitionStmt def=(DefinitionStmt)defsOfUse.get(0);            if (def.getRightOp() instanceof Local) {              Local m=(Local)def.getRightOp();              if (l != m) {                Object dcObj=localToDefCount.get(m);                if (dcObj == null)                 throw new RuntimeException("Variable " + m + " used without definition!");                int defCount=((Integer)dcObj).intValue();                if (defCount == 0)                 throw new RuntimeException("Variable " + m + " used without definition!"); else                 if (defCount == 1) {                  useBox.setValue(m);                  fastCopyPropagationCount++;                  continue;                }                List<Unit> path=graph.getExtendedBasicBlockPathBetween(def,stmt);                if (path == null) {                  continue;                }                Iterator<Unit> pathIt=path.iterator();                pathIt.next();{                  boolean isRedefined=false;                  while (pathIt.hasNext()) {                    Stmt s=(Stmt)pathIt.next();                    if (stmt == s) {                      break;                    }                    if (s instanceof DefinitionStmt) {                      if (((DefinitionStmt)s).getLeftOp() == m) {                        isRedefined=true;                        break;                      }                    }                  }                  if (isRedefined)                   continue;                }                useBox.setValue(m);                slowCopyPropagationCount++;              }            }          }        }      }    }  }  if (Options.v().verbose())   G.v().out.println("[" + stmtBody.getMethod().getName() + "]     Propagated: "+ fastCopyPropagationCount+ " fast copies  "+ slowCopyPropagationCount+ " slow copies");  if (Options.v().time())   Timers.v().propagatorTimer.end();}  }
class C{  final void put(final ClassWriter cw,final byte[] code,final int len,final int maxStack,final int maxLocals,final ByteVector out){  Attribute attr=this;  while (attr != null) {    ByteVector b=attr.write(cw,code,len,maxStack,maxLocals);    out.putShort(cw.newUTF8(attr.type)).putInt(b.length);    out.putByteArray(b.data,0,b.length);    attr=attr.next;  }}  }
class C{  private void removeAllFixtures(){  TreePath path=this.tree.getSelectionPath();  if (path != null) {    DefaultMutableTreeNode node=(DefaultMutableTreeNode)path.getLastPathComponent();    if (node.getUserObject() instanceof SandboxBody) {      SandboxBody body=(SandboxBody)node.getUserObject();      int choice=JOptionPane.showConfirmDialog(ControlUtilities.getParentWindow(this),MessageFormat.format(Messages.getString("menu.context.body.removeAll.warning"),body.getName()),Messages.getString("menu.context.body.removeAll.warning.title"),JOptionPane.YES_NO_CANCEL_OPTION);      if (choice == JOptionPane.YES_OPTION) {synchronized (Simulation.LOCK) {          body.removeAllFixtures();          if (!body.isMassExplicit()) {            body.updateMass();          }        }        node.removeAllChildren();        this.model.reload(node);      }    }  }}  }
class C{  public ASN1Primitive toASN1Primitive(){  ASN1EncodableVector v=new ASN1EncodableVector();  if (certs != null) {    v.add(new DERTaggedObject(false,0,certs));  }  if (crls != null) {    v.add(new DERTaggedObject(false,1,crls));  }  return new DERSequence(v);}  }
class C{  @Detainted public Optional<O> convert(@Tainted @Nullable I value){  try {    return Optional.fromNullable(converter.apply(value));  } catch (  FormFieldException e) {    throw e.propagate(name);  }}  }
class C{  public void transform(Reader source,Writer output) throws IOException {  int n=0;  boolean bCommentSent=false;  char[] aBuffer=new char[READER_BUFFER_SIZE];  int i=source.read(aBuffer);  while (i >= 0) {    for (int j=0; j < i; j++) {      char c=aBuffer[j];switch (c) {case '&':        if (m_bAmpersands) {          output.write("&amp;");        } else {          output.write(c);        }      break;case '<':    if (m_bTags) {      output.write("&lt;");    } else {      output.write(c);    }  break;case '>':if (m_bTags) {  output.write("&gt;");} else {  output.write(c);}break;case '"':if (m_bQuotes) {output.write("&quot;");} else {output.write(c);}break;case '\'':if (m_bQuotes) {output.write("&apos;");} else {output.write(c);}break;case '*':if (!bCommentSent) {output.write(m_aComment);bCommentSent=true;} else {output.write(c);}break;default :output.write(c);}n++;}i=source.read(aBuffer);}}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:25.917 -0500",hash_original_method="B665C4D2FA87DEF248CEB5906A538992",hash_generated_method="2D0C490DF28548B6DC59C756C6E5ED0F") public boolean intersect(float left,float top,float right,float bottom){  return (((left + top + right+ bottom+ getTaintInt())) == 1);}  }
class C{  public static void write(byte[] data,OutputStream output) throws IOException {  if (data != null) {    output.write(data);  }}  }
class C{  public boolean isFlipping(){  return mStarted;}  }
class C{  private void recreateDirectoryIfVersionChanges(){  boolean recreateBase=false;  if (!mRootDirectory.exists()) {    recreateBase=true;  } else   if (!mVersionDirectory.exists()) {    recreateBase=true;    FileTree.deleteRecursively(mRootDirectory);  }  if (recreateBase) {    try {      FileUtils.mkdirs(mVersionDirectory);    } catch (    FileUtils.CreateDirectoryException e) {      mCacheErrorLogger.logError(CacheErrorLogger.CacheErrorCategory.WRITE_CREATE_DIR,TAG,"version directory could not be created: " + mVersionDirectory,null);    }  }}  }
class C{  @Override protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  processRequest(request,response);}  }
class C{  public static ShortcutIconResource fromContext(Context context,int resourceId){  ShortcutIconResource icon=new ShortcutIconResource();  icon.packageName=context.getPackageName();  icon.resourceName=context.getResources().getResourceName(resourceId);  return icon;}  }
class C{  public boolean contains(JComponent a,int b,int c){  boolean returnValue=((ComponentUI)(uis.elementAt(0))).contains(a,b,c);  for (int i=1; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).contains(a,b,c);  }  return returnValue;}  }
class C{  public ParseException(final String message){  super(message);}  }
class C{  public void appendAfter(String after){  String oldAfter=after();  if (oldAfter == null) {    oldAfter="";  }  setAfter(oldAfter + after);}  }
class C{  @Override public byte[] brpoplpush(byte[] source,byte[] destination,int timeout){  client.brpoplpush(source,destination,timeout);  client.setTimeoutInfinite();  try {    return client.getBinaryBulkReply();  }  finally {    client.rollbackTimeout();  }}  }
class C{  final boolean casBase(long cmp,long val){  return U.compareAndSwapLong(this,BASE,cmp,val);}  }
class C{  public CategoryStepRenderer(boolean stagger){  this.stagger=stagger;  setBaseLegendShape(new Rectangle2D.Double(-4.0,-3.0,8.0,6.0));}  }
class C{  boolean isEqualTo(final Item i){  if (i.type == type) {switch (type) {case ClassWriter.INT:      return i.intVal == intVal;case ClassWriter.LONG:    return i.longVal == longVal;case ClassWriter.FLOAT:  return i.floatVal == floatVal;case ClassWriter.DOUBLE:return i.doubleVal == doubleVal;case ClassWriter.UTF8:case ClassWriter.STR:case ClassWriter.CLASS:return i.strVal1.equals(strVal1);case ClassWriter.NAME_TYPE:return i.strVal1.equals(strVal1) && i.strVal2.equals(strVal2);default :return i.strVal1.equals(strVal1) && i.strVal2.equals(strVal2) && i.strVal3.equals(strVal3);}}return false;}  }
class C{  public static boolean checkContains(final float[] pVertices,final int pVertexCount,final int pVertexOffsetX,final int pVertexOffsetY,final int pVertexStride,final float pX,final float pY){  boolean odd=false;  int j=pVertexCount - 1;  for (int i=0; i < pVertexCount; i++) {    final float vertexXI=VertexUtils.getVertex(pVertices,pVertexOffsetX,pVertexStride,i);    final float vertexYI=VertexUtils.getVertex(pVertices,pVertexOffsetY,pVertexStride,i);    final float vertexXJ=VertexUtils.getVertex(pVertices,pVertexOffsetX,pVertexStride,j);    final float vertexYJ=VertexUtils.getVertex(pVertices,pVertexOffsetY,pVertexStride,j);    if ((((vertexYI < pY) && (vertexYJ >= pY)) || ((vertexYJ < pY) && (vertexYI >= pY))) && ((vertexXI <= pX) || (vertexXJ <= pX))) {      odd^=((vertexXI + (((pY - vertexYI) / (vertexYJ - vertexYI)) * (vertexXJ - vertexXI))) < pX);    }    j=i;  }  return odd;}  }
class C{  public static boolean isInnerClass(SootClass clz){  return clz.getName().contains("$");}  }
class C{  public PreAuthorizeUserApprovalAction(){}  }
class C{  public boolean isInstanceSuspended(){  String suspendUntil=props.getProperty(SUSPEND_UNTIL);  if (notNullNorEmpty(suspendUntil)) {    try {      long untilMillis=Long.parseLong(suspendUntil);      if (untilMillis > System.currentTimeMillis()) {        return true;      }      props.setProperty(SUSPEND_UNTIL,"");    } catch (    NumberFormatException e) {      logger.debug("Invalid value for SUSPEND_UNTIL: " + suspendUntil);      props.setProperty(SUSPEND_UNTIL,"");    }  }  return false;}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public Builder backgroundColor(int color){  backgroundColor=color;  return this;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected static boolean isText(int ch){  if (((ch >= 32) && (ch <= 126)) || ((ch >= 128) && (ch <= 255))) {    return true;  }switch (ch) {case '\t':case '\n':case '\r':    return true;}return false;}  }
class C{  public synchronized void repaint(){  Iterator items=items(ValidatedPredicate.FALSE);  while (items.hasNext()) {    ((VisualItem)items.next()).validateBounds();  }  for (int i=0; i < m_displays.size(); ++i) {    getDisplay(i).repaint();  }}  }
class C{  public void testAbstractEmptyBaseClass() throws Exception {  DummyBase result=new ObjectMapper().readValue("[\"" + DummyImpl.class.getName() + "\",{\"x\":3}]",DummyBase.class);  assertNotNull(result);  assertEquals(DummyImpl.class,result.getClass());  assertEquals(3,((DummyImpl)result).x);}  }
class C{  public void enableLayers(boolean enable){  if (layerManager.layersEnabled == enable) {    return;  }  layerManager.enableLayers(enable);  quadTree.markDirty(DirtyType.RenderState);}  }
class C{  public void validateFile(String fileName) throws Exception {  String xml=FileUtils.readFileToString(new File(fileName),StandardCharsets.UTF_8.toString());  validate(xml);}  }
class C{  @EventHandler(priority=EventPriority.HIGH,ignoreCancelled=true) public void onBlockPistonRetract(BlockPistonRetractEvent event){  Match match=Cardinal.getMatch(event.getWorld());  if (match == null || !event.isSticky()) {    return;  }  Collection<AppliedRegion> regions=get(match,ApplyType.BLOCK,ApplyType.BLOCK_PLACE,ApplyType.BLOCK_BREAK);  for (  Block block : event.getBlocks()) {    if (!tryPistonMove(regions,block,event)) {      event.setCancelled(true);      return;    }  }}  }
class C{  public synchronized void add(double minValue,double maxValue){  super.add(minValue);  mMaxValues.add(maxValue);}  }
class C{  public void addInitiators(Collection<URI> initiators){  this.addedInitiators.addAll(initiators);}  }
class C{  public static void sort(char[] a){  DualPivotQuicksort.sort(a,0,a.length - 1,null,0,0);}  }
class C{  @Override public void beginLine(int iTextSize){  m_ticketcurrent.beginLine(iTextSize);}  }
class C{  public ShortArrayList(int initialCapacity){  this(new short[initialCapacity]);  setSizeRaw(0);}  }
class C{  public static <T>Key<T> of(Class<T> type){  return new Key<>(type);}  }
class C{  @Override protected boolean processErrorOrFailure(Response response,Request request,TransactionID transactionID){  logger.info("Google TURN processErrorOrFailure");  Object applicationData=transactionID.getApplicationData();  if ((applicationData instanceof GoogleRelayedCandidateDatagramSocket) && ((RelayedCandidateDatagramSocket)applicationData).processErrorOrFailure(response,request))   return true; else   if ((applicationData instanceof GoogleRelayedCandidateDatagramSocket) && ((RelayedCandidateDatagramSocket)applicationData).processErrorOrFailure(response,request))   return true;  return super.processErrorOrFailure(response,request,transactionID);}  }
class C{  public void testCharsetMapping() throws Exception {  SortedMap<String,Charset> availableCharsets=Charset.availableCharsets();  Set<String> k=availableCharsets.keySet();  System.out.println("Java encoding --> Initial encoding (Can encode), Encoding by index, Index by encoding, collation by index, charset by index...");  System.out.println("===================================");  Iterator<String> i1=k.iterator();  while (i1.hasNext()) {    String canonicalName=i1.next();    java.nio.charset.Charset cs=availableCharsets.get(canonicalName);    canonicalName=cs.name();    int index=CharsetMapping.getCollationIndexForJavaEncoding(canonicalName,this.conn);    String csname=CharsetMapping.getMysqlCharsetNameForCollationIndex(index);    System.out.println((canonicalName + "                              ").substring(0,26) + " (" + cs.canEncode()+ ") --> "+ CharsetMapping.getJavaEncodingForCollationIndex(index)+ "  :  "+ index+ "  :  "+ CharsetMapping.COLLATION_INDEX_TO_COLLATION_NAME[index]+ "  :  "+ CharsetMapping.getMysqlCharsetNameForCollationIndex(index)+ "  :  "+ CharsetMapping.CHARSET_NAME_TO_CHARSET.get(csname)+ "  :  "+ CharsetMapping.getJavaEncodingForMysqlCharset(csname)+ "  :  "+ CharsetMapping.getMysqlCharsetForJavaEncoding(canonicalName,(com.mysql.jdbc.Connection)this.conn)+ "  :  "+ CharsetMapping.getCollationIndexForJavaEncoding(canonicalName,this.conn)+ "  :  "+ CharsetMapping.isMultibyteCharset(canonicalName));    Set<String> s=cs.aliases();    Iterator<String> j=s.iterator();    while (j.hasNext()) {      String alias=j.next();      index=CharsetMapping.getCollationIndexForJavaEncoding(alias,this.conn);      csname=CharsetMapping.getMysqlCharsetNameForCollationIndex(index);      System.out.println("   " + (alias + "                              ").substring(0,30) + " --> "+ CharsetMapping.getJavaEncodingForCollationIndex(index)+ "  :  "+ index+ "  :  "+ CharsetMapping.COLLATION_INDEX_TO_COLLATION_NAME[index]+ "  :  "+ CharsetMapping.getMysqlCharsetNameForCollationIndex(index)+ "  :  "+ CharsetMapping.CHARSET_NAME_TO_CHARSET.get(csname)+ "  :  "+ CharsetMapping.getJavaEncodingForMysqlCharset(csname)+ "  :  "+ CharsetMapping.getMysqlCharsetForJavaEncoding(alias,(com.mysql.jdbc.Connection)this.conn)+ "  :  "+ CharsetMapping.getCollationIndexForJavaEncoding(alias,this.conn)+ "  :  "+ CharsetMapping.isMultibyteCharset(alias));    }    System.out.println("===================================");  }  for (int i=1; i < CharsetMapping.MAP_SIZE; i++) {    String csname=CharsetMapping.getMysqlCharsetNameForCollationIndex(i);    String enc=CharsetMapping.getJavaEncodingForCollationIndex(i);    System.out.println((i + "   ").substring(0,4) + " by index--> " + (CharsetMapping.COLLATION_INDEX_TO_COLLATION_NAME[i] + "                    ").substring(0,20)+ "  :  "+ (csname + "          ").substring(0,10)+ "  :  "+ (enc + "                    ").substring(0,20)+ " by charset--> "+ (CharsetMapping.getJavaEncodingForMysqlCharset(csname) + "                  ").substring(0,20)+ " by encoding--> "+ (CharsetMapping.getCollationIndexForJavaEncoding(enc,this.conn) + "   ").substring(0,4)+ "  :  "+ (CharsetMapping.getMysqlCharsetForJavaEncoding(enc,(com.mysql.jdbc.Connection)this.conn) + "               ").substring(0,15));  }}  }
class C{  public StatementBuilder(){  builder=new StringBuilder();}  }
class C{  private static void analyzeHadoopCluster(){  try {    JobConf job=ConfigurationManager.getCachedJobConf();    JobClient client=new JobClient(job);    ClusterStatus stat=client.getClusterStatus();    if (stat != null) {      _remotePar=stat.getTaskTrackers();      _remoteParMap=stat.getMaxMapTasks();      _remoteParReduce=stat.getMaxReduceTasks();      analyzeHadoopConfiguration();    }  } catch (  IOException e) {    throw new RuntimeException("Unable to analyze infrastructure.",e);  }}  }
class C{  public void exportObject(Target target) throws RemoteException {synchronized (this) {    listen();    exportCount++;  }  boolean ok=false;  try {    super.exportObject(target);    ok=true;  }  finally {    if (!ok) {synchronized (this) {        decrementExportCount();      }    }  }}  }
class C{  public RenderedImage createScaledRendering(int w,int h,RenderingHints hints){  double sx=(double)w / getWidth();  double sy=(double)h / getHeight();  if (Math.abs(sx / sy - 1.0) < 0.01) {    sx=sy;  }  AffineTransform usr2dev=AffineTransform.getScaleInstance(sx,sy);  RenderContext newRC=new RenderContext(usr2dev,hints);  return createRendering(newRC);}  }
class C{  public GlobeAnnotation(String text,Position position,Font font){  this.init(text,position,font,null);}  }
class C{  public synchronized void serialize() throws InterruptedException {  lock.lockForCommit();  long start=System.currentTimeMillis();  try {    shiftFiles(0);    try (OutputStream os=new FileOutputStream(makeFile())){      new XStream().toXML(statsData,os);    }   } catch (  Exception e) {    logger.error("Could not write stats data to '{}'",makeFile().getAbsolutePath(),e);  } finally {    lock.releaseCommitLock();    logger.debug("stats serialized in {}ms",(System.currentTimeMillis() - start));  }}  }
class C{  public static String convertU8ToHexString(char u8){  return Integer.toHexString(u8);}  }
class C{  public int size(){  return selection.size();}  }
class C{  @Override public boolean test(String object){  return this.filterSet.contains(object.trim());}  }
class C{  static CharSequence linkifyUrls(FormattedTweetText tweetText,final LinkClickListener listener,boolean stripLastPhotoEntity,final int linkColor,final int linkHighlightColor){  if (tweetText == null)   return null;  if (TextUtils.isEmpty(tweetText.text)) {    return tweetText.text;  }  final SpannableStringBuilder spannable=new SpannableStringBuilder(tweetText.text);  final List<FormattedUrlEntity> urls=tweetText.urlEntities;  final List<FormattedMediaEntity> media=tweetText.mediaEntities;  final FormattedMediaEntity lastPhoto;  if (stripLastPhotoEntity) {    lastPhoto=getLastPhotoEntity(tweetText);  } else {    lastPhoto=null;  }  final List<FormattedUrlEntity> combined=mergeAndSortEntities(urls,media);  addUrlEntities(spannable,combined,lastPhoto,listener,linkColor,linkHighlightColor);  return spannable;}  }
class C{  public void processBean(@Observes ProcessBean<?> event){  ViewScoped viewScoped=event.getAnnotated().getAnnotation(ViewScoped.class);  if (viewScoped != null && LOGGER.isLoggable(Level.FINEST)) {    LOGGER.finest("Processing occurrence of @ViewScoped");  }}  }
class C{  public synchronized ExtentTest createNode(String name){  return createNode(name,null);}  }
class C{  public void recognize(){  RecognitionAudio audio;  try {    audio=RecognitionAudioFactory.createRecognitionAudio(this.input);  } catch (  IOException e) {    logger.log(Level.WARNING,"Failed to read audio uri input: " + input);    return;  }  logger.info("Sending " + audio.getContent().size() + " bytes from audio uri input: "+ input);  RecognitionConfig config=RecognitionConfig.newBuilder().setEncoding(AudioEncoding.LINEAR16).setSampleRate(samplingRate).build();  AsyncRecognizeRequest request=AsyncRecognizeRequest.newBuilder().setConfig(config).setAudio(audio).build();  Operation operation;  Operation status;  try {    operation=speechClient.asyncRecognize(request);    logger.log(Level.INFO,String.format("Operation handle: %s, URI: %s",operation.getName(),input.toString()));  } catch (  StatusRuntimeException e) {    logger.log(Level.WARNING,"RPC failed: {0}",e.getStatus());    return;  }  while (true) {    try {      logger.log(Level.INFO,"Waiting 2s for operation, {0} processing...",operation.getName());      Thread.sleep(2000);      GetOperationRequest operationReq=GetOperationRequest.newBuilder().setName(operation.getName()).build();      status=statusClient.getOperation(GetOperationRequest.newBuilder().setName(operation.getName()).build());      if (status.getDone()) {        break;      }    } catch (    Exception ex) {      logger.log(Level.WARNING,ex.getMessage());    }  }  try {    AsyncRecognizeResponse asyncRes=status.getResponse().unpack(AsyncRecognizeResponse.class);    logger.info("Received response: " + asyncRes);  } catch (  com.google.protobuf.InvalidProtocolBufferException ex) {    logger.log(Level.WARNING,"Unpack error, {0}",ex.getMessage());  }}  }
class C{  public static <T>boolean areSetsIdentical(final Set<T> set1,final Set<T> set2){  if (set1 == set2)   return true;  if (CollectionUtil.size(set1) != CollectionUtil.size(set2))   return false;  if (CollectionUtil.isEmpty(set1))   return true;  for (  final T t : set1)   if (!set2.contains(t))   return false;  return true;}  }
class C{  public final byte[] doFinal(byte[] input,int inputOffset,int inputLen) throws IllegalBlockSizeException, BadPaddingException {  checkCipherState();  if (input == null || inputOffset < 0 || inputLen > (input.length - inputOffset) || inputLen < 0) {    throw new IllegalArgumentException("Bad arguments");  }  chooseFirstProvider();  return spi.engineDoFinal(input,inputOffset,inputLen);}  }
class C{  public static void scheduleLinear(Context context,int delay){  Intent intent=new Intent(context,HeartbeatReceiver.class);  intent.putExtra(KEY_DELAY,delay);  intent.putExtra(KEY_TYPE,TYPE_LINEAR);  long timeGap=delay * 60 * 1000;  PendingIntent alarmIntent=PendingIntent.getBroadcast(context,delay,intent,PendingIntent.FLAG_CANCEL_CURRENT);  AlarmManager alarmManager=(AlarmManager)context.getSystemService(Context.ALARM_SERVICE);  alarmManager.setRepeating(AlarmManager.RTC_WAKEUP,System.currentTimeMillis() + timeGap,timeGap,alarmIntent);  Log.d("Heartbeater","Scheduled repeating");}  }
class C{  AlwaysIdenticalKeyStoreState(){  super();}  }
class C{  private void clearBusinessObjectFormatSchema(BusinessObjectFormatEntity businessObjectFormatEntity){  businessObjectFormatEntity.setNullValue(null);  businessObjectFormatEntity.setDelimiter(null);  businessObjectFormatEntity.setEscapeCharacter(null);  businessObjectFormatEntity.setPartitionKeyGroup(null);  businessObjectFormatEntity.getSchemaColumns().clear();}  }
class C{  public static Word fromIntSignExtend(int val){  return null;}  }
class C{  public static org.oscm.vo.VOServiceEntry convertToApi(org.oscm.internal.vo.VOServiceEntry oldVO){  if (oldVO == null) {    return null;  }  org.oscm.vo.VOServiceEntry newVO=new org.oscm.vo.VOServiceEntry();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setParameters(convertToApiVOParameter(oldVO.getParameters()));  newVO.setDescription(oldVO.getDescription());  newVO.setName(oldVO.getName());  newVO.setServiceId(oldVO.getServiceId());  newVO.setTechnicalId(oldVO.getTechnicalId());  newVO.setFeatureURL(oldVO.getFeatureURL());  newVO.setBaseURL(oldVO.getBaseURL());  newVO.setPriceModel(convertToApi(oldVO.getPriceModel()));  newVO.setStatus(EnumConverter.convert(oldVO.getStatus(),org.oscm.types.enumtypes.ServiceStatus.class));  newVO.setAccessType(EnumConverter.convert(oldVO.getAccessType(),org.oscm.types.enumtypes.ServiceAccessType.class));  newVO.setSellerId(oldVO.getSellerId());  newVO.setSellerName(oldVO.getSellerName());  newVO.setSellerKey(oldVO.getSellerKey());  newVO.setTags(oldVO.getTags());  newVO.setShortDescription(oldVO.getShortDescription());  newVO.setAverageRating(oldVO.getAverageRating());  newVO.setNumberOfReviews(oldVO.getNumberOfReviews());  newVO.setOfferingType(EnumConverter.convert(oldVO.getOfferingType(),org.oscm.types.enumtypes.OfferingType.class));  newVO.setSubscriptionLimitReached(oldVO.isSubscriptionLimitReached());  newVO.setConfiguratorUrl(oldVO.getConfiguratorUrl());  newVO.setCustomTabUrl(oldVO.getCustomTabUrl());  newVO.setCustomTabName(oldVO.getCustomTabName());  return newVO;}  }
class C{  private boolean cleanUp(Reference<?> reference){  Method finalizeReferentMethod=getFinalizeReferentMethod();  if (finalizeReferentMethod == null) {    return false;  }  do {    reference.clear();    if (reference == frqReference) {      return false;    }    try {      finalizeReferentMethod.invoke(reference);    } catch (    Throwable t) {      logger.log(Level.SEVERE,"Error cleaning up after reference.",t);    }  } while ((reference=queue.poll()) != null);  return true;}  }
class C{  public void remove(){  purge(cursor);}  }
class C{  public final boolean containsKey(K key){  return mCount.containsKey(key);}  }
class C{  public double num(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return m_val;}  }
class C{  Location begin(){  return begin;}  }
class C{  public static void main(String[] args) throws Exception {  KDC kdc=create("RABBIT.HOLE","kdc.rabbit.hole",0,false);  kdc.addPrincipal("dummy","bogus".toCharArray());  kdc.addPrincipal("foo","bar".toCharArray());  kdc.addPrincipalRandKey("krbtgt/RABBIT.HOLE");  kdc.addPrincipalRandKey("server/host.rabbit.hole");  kdc.addPrincipalRandKey("backend/host.rabbit.hole");  KDC.saveConfig("krb5.conf",kdc,"forwardable = true");}  }
class C{  @Override public synchronized void reset() throws IOException {  super.reset();}  }
class C{  protected AnimatablePointListValue(AnimationTarget target){  super(target);}  }
class C{  public void onLocationChanged(Location location){  if (Cfg.DEBUG) {    Check.log(TAG + " (onLocationChanged): new location: " + location);  }synchronized (listeners) {    gotValidPosition=true;    for (    GPSLocationListener listener : listeners) {      if (Cfg.DEBUG) {        Check.log(TAG + " (onLocationChanged): send location to: " + listener);      }      listener.onLocationChanged(location);    }    listeners.clear();  }}  }
class C{  public void resetShowTimeoutMS(){  mTimeoutMS=DEFAULT_TIMEOUT_MS;}  }
class C{  default B forceAddStoredEnchant(final EnchantmentType enchantment,final int level){  this.meta().addStoredEnchant(enchantment,level,true,true);  return this.getBuilder();}  }
class C{  public int checkColumnIndex(String title){  int index=getColumnIndex(title,false);  if (index != -1) {    return index;  }  addColumn(title);  return getColumnCount() - 1;}  }
class C{  public boolean addUndirectedEdge(Node node1,Node node2){  throw new UnsupportedOperationException();}  }
class C{  private void addNewTilesets(Map map) throws IOException {  for (  TileSet set : map.getTileSets()) {    setByName.put(set.getTilebmpFile(),set);  }  for (  String name : mapping.getNewSets()) {    if (name.equals("")) {      continue;    }    if (!setByName.containsKey(name)) {      TileSet set=new TileSet();      set.setName(constructTilesetName(name));      BasicTileCutter cutter=new BasicTileCutter(32,32,0,0);      set.importTileBitmap(name,cutter);      setByName.put(name,set);      map.addTileset(set);    }  }}  }
class C{  public static <T extends Map.Entry<String,String>>void formEncode(Collection<T> parameters,OutputStream into) throws IOException {  if (parameters != null) {    boolean first=true;    for (    Map.Entry<String,String> entry : parameters) {      if (first) {        first=false;      } else {        into.write('&');      }      into.write(percentEncode(safeToString(entry.getKey())).getBytes());      into.write('=');      into.write(percentEncode(safeToString(entry.getValue())).getBytes());    }  }}  }
class C{  @Override public Iterator<Solution> iterator(){  return new PopulationIterator();}  }
class C{  public boolean diff(PropertyInfoRestRep object){  if (object != null) {    for (    Map.Entry<String,String> entry : getProperties().entrySet()) {      final String key=entry.getKey();      final String value=object.getProperty(key);      if (value == null || value != null && !value.equals(entry.getValue())) {        return true;      }    }    for (    Map.Entry<String,String> entry : object.getAllProperties().entrySet()) {      final String key=entry.getKey();      if (!getProperties().containsKey(key)) {        return true;      }    }  }  return false;}  }
class C{  public String toString(){  return label.toString();}  }
class C{  public static String serverURIsToString(final List<String> serverURIs){  StringBuffer serverURIsAsString=new StringBuffer();  boolean first=true;  for (  final String serverURI : serverURIs) {    if (first) {      serverURIsAsString.append(serverURI);    } else {      serverURIsAsString.append(ConnectionUtils.SERVER_DELIMITER + " " + serverURI);    }    first=false;  }  return serverURIsAsString.toString();}  }
class C{  public Integer inner(){  return Integer.valueOf(inner);}  }
class C{  @SuppressWarnings("unused") @Test public void testSCLocalReaction(){  Statechart sc=_createStatechart("sc");{    VariableDefinition v=_createVariableDefinition("v",TYPE_INTEGER,getOrCreateInternalScope(sc));    LocalReaction entryAction=_createEntryAction(sc);    ReactionEffect effect=_createReactionEffect(entryAction);    _createVariableAssignment(v,AssignmentOperator.ADD_ASSIGN,_createValue(1),effect);    LocalReaction exitAction=_createExitAction(sc);    effect=_createReactionEffect(exitAction);    _createVariableAssignment(v,AssignmentOperator.ADD_ASSIGN,_createValue(1),effect);    Region r=_createRegion("r",sc);{      Entry e=_createEntry(EntryKind.INITIAL,null,r);      State s1=_createState("s1",r);      Transition t=_createTransition(e,s1);    }  }  ExecutionFlow flow=sequencer.transform(sc);  ExecutionRegion region=flow.getRegions().get(0);  assertEquals(0,flow.getReactions().size());  assertedOrder(flow.getEnterSequences().get(0),null,Lists.newArrayList(new StepLeaf(flow.getEntryAction()),new StepLeaf(region.getEnterSequences().get(0))));  assertedOrder(flow.getExitSequence(),null,Lists.newArrayList(new StepLeaf(region.getExitSequence()),new StepLeaf(flow.getExitAction())));}  }
class C{  public JsonArrayRequest(int method,String url,JSONArray jsonRequest,Listener<JSONArray> listener,ErrorListener errorListener){  super(method,url,(jsonRequest == null) ? null : jsonRequest.toString(),listener,errorListener);}  }
class C{  public static SexecFactory init(){  try {    SexecFactory theSexecFactory=(SexecFactory)EPackage.Registry.INSTANCE.getEFactory(SexecPackage.eNS_URI);    if (theSexecFactory != null) {      return theSexecFactory;    }  } catch (  Exception exception) {    EcorePlugin.INSTANCE.log(exception);  }  return new SexecFactoryImpl();}  }
class C{  static void checkProductNumber(int n){  if (n > MAX_PRODUCT_PAGE_SIZE) {    throw new UnsupportedOperationException("Product page size exceeds the authorized size (" + MAX_PRODUCT_PAGE_SIZE + ").");  }}  }
class C{  public void addInstance(){  int index=m_TableData.getSelectedRow();  ((DataSortedTableModel)m_TableData.getModel()).insertInstance(index);}  }
class C{  public void doTests(){  if (getEstimator() == null) {    println("\n=== No estimator set ===");    return;  }  println("\n=== Check on Estimator: " + getEstimator().getClass().getName() + " ===\n");  m_ClasspathProblems=false;  canTakeOptions();  EstTypes estTypes=new EstTypes();  estTypes.incremental=incrementalEstimator()[0];  estTypes.weighted=weightedInstancesHandler()[0];  estTypes.supervised=supervisedEstimator()[0];  int classType=Attribute.NOMINAL;  AttrTypes attrTypes=testsPerClassType(classType,estTypes);  canSplitUpClass(attrTypes,classType);}  }
class C{  public static <S>ServiceLoader<S> loadInstalled(Class<S> service){  ClassLoader cl=ClassLoader.getSystemClassLoader();  if (cl != null) {    while (cl.getParent() != null) {      cl=cl.getParent();    }  }  return ServiceLoader.load(service,cl);}  }
class C{  public synchronized void publish() throws Exception {  Stat stat=_zkConnection.curator().checkExists().forPath(_servicePath);  if (stat == null) {    boolean result=this.register();    if (!result) {      _log.error("servicePath:{} doesn't exist and register fail ",this._servicePath);      throw new IllegalStateException("servicePath doesn't exist and register fail");    }  }  _zkConnection.curator().setData().forPath(_servicePath,_service.serialize());  _log.info("Service info updated @ {}",_servicePath);  return;}  }
class C{  @Override public void zoomDomainAxes(double factor,PlotRenderingInfo state,Point2D source,boolean useAnchor){}  }
class C{  public static <T>T invokeMethod(Object obj,String name,Object... params) throws NoSuchMethodException {  Class[] paramTypes=getParamTypes(params);  final Class<?> aClass=obj.getClass();  Method method;  try {    method=aClass.getDeclaredMethod(name,paramTypes);  } catch (  NoSuchMethodException e) {    method=aClass.getMethod(name,paramTypes);  }  method.setAccessible(true);  try {    return (T)method.invoke(obj,params);  } catch (  IllegalAccessException|InvocationTargetException e) {    throw new RuntimeException(e);  }}  }
class C{  protected Object convertValueToXml(Object value){  if (value instanceof Boolean) {    value=((Boolean)value).booleanValue() ? "1" : "0";  }  return value;}  }
class C{  protected void checkDeadline() throws QueryTimeoutException {  if (innerState.deadline.get() < System.currentTimeMillis())   throw new QueryTimeoutException(ERR_DEADLINE);}  }
class C{  public RuleSet[] split(final EvolutionState state,final int thread,RuleSet[] sets){  for (int i=0; i < numRules; i++)   sets[state.random[thread].nextInt(sets.length)].addRule((Rule)(rules[i].clone()));  return sets;}  }
class C{  private void readObject(){  if (getInternalId() == 0L) {    IdentityUtils iu=IdentityUtils.getInstance();    setInternalId(iu.getNewId());  }}  }
class C{  public void triangulateYMonotonePolygons(){  List<MonotonePolygon<DoubleEdgeListVertex>> monotonePolygons=this.getYMonotonePolygons();  int size=monotonePolygons.size();  for (int i=0; i < size; i++) {    this.triangulateYMonotonePolygon(monotonePolygons.get(i));  }}  }
class C{  boolean isAutomaticDialogSupportEnabled(){  return super.isAutomaticDialogSupportEnabled;}  }
class C{  @GenIgnore static Record createRecord(String name,String address,Class itf,JsonObject metadata){  return createRecord(name,address,itf.getName(),metadata);}  }
class C{  protected SVGOMTextPathElement(){}  }
class C{  private synchronized void initialize() throws Exception {  MBeanServer server=getContainerWrapper().getResourceResolver().getMBeanServer();  String serverName=getContainerWrapper().getTomcatContainer().getName();  Set<ObjectInstance> threadPools=server.queryMBeans(new ObjectName(serverName + ":type=ThreadPool,*"),null);  poolNames=new ArrayList<>(threadPools.size());  for (  ObjectInstance threadPool : threadPools) {    ThreadPoolObjectName threadPoolObjectName=new ThreadPoolObjectName();    ObjectName threadPoolName=threadPool.getObjectName();    String name=threadPoolName.getKeyProperty("name");    threadPoolObjectName.setThreadPoolName(threadPoolName);    ObjectName grpName=server.getObjectInstance(new ObjectName(threadPoolName.getDomain() + ":type=GlobalRequestProcessor,name=" + name)).getObjectName();    threadPoolObjectName.setGlobalRequestProcessorName(grpName);    Set<ObjectInstance> workers=server.queryMBeans(new ObjectName(threadPoolName.getDomain() + ":type=RequestProcessor,*"),null);    for (    ObjectInstance worker : workers) {      ObjectName wrkName=worker.getObjectName();      if (name.equals(wrkName.getKeyProperty("worker"))) {        threadPoolObjectName.getRequestProcessorNames().add(wrkName);      }    }    poolNames.add(threadPoolObjectName);  }  Set<ObjectInstance> executors=server.queryMBeans(new ObjectName(serverName + ":type=Executor,*"),null);  executorNames=new ArrayList<>(executors.size());  for (  ObjectInstance executor : executors) {    ObjectName executorName=executor.getObjectName();    executorNames.add(executorName);  }  server.addNotificationListener(new ObjectName("JMImplementation:type=MBeanServerDelegate"),this,null,null);}  }
class C{  public Builder withLogIndex(long index){  request.logIndex=Assert.argNot(index,index < 0,"log index must be not be negative");  return this;}  }
class C{  protected static void processCRLB1(DistributionPoint dp,Object cert,X509CRL crl) throws AnnotatedException {  ASN1Primitive idp=CertPathValidatorUtilities.getExtensionValue(crl,ISSUING_DISTRIBUTION_POINT);  boolean isIndirect=false;  if (idp != null) {    if (IssuingDistributionPoint.getInstance(idp).isIndirectCRL()) {      isIndirect=true;    }  }  byte[] issuerBytes=CertPathValidatorUtilities.getIssuerPrincipal(crl).getEncoded();  boolean matchIssuer=false;  if (dp.getCRLIssuer() != null) {    GeneralName genNames[]=dp.getCRLIssuer().getNames();    for (int j=0; j < genNames.length; j++) {      if (genNames[j].getTagNo() == GeneralName.directoryName) {        try {          if (Arrays.areEqual(genNames[j].getName().toASN1Primitive().getEncoded(),issuerBytes)) {            matchIssuer=true;          }        } catch (        IOException e) {          throw new AnnotatedException("CRL issuer information from distribution point cannot be decoded.",e);        }      }    }    if (matchIssuer && !isIndirect) {      throw new AnnotatedException("Distribution point contains cRLIssuer field but CRL is not indirect.");    }    if (!matchIssuer) {      throw new AnnotatedException("CRL issuer of CRL does not match CRL issuer of distribution point.");    }  } else {    if (CertPathValidatorUtilities.getIssuerPrincipal(crl).equals(CertPathValidatorUtilities.getEncodedIssuerPrincipal(cert))) {      matchIssuer=true;    }  }  if (!matchIssuer) {    throw new AnnotatedException("Cannot find matching CRL issuer for certificate.");  }}  }
class C{  static byte[] fromPublicKey(PublicKey key,int alg) throws DNSSECException {switch (alg) {case Algorithm.RSAMD5:case Algorithm.RSASHA1:case Algorithm.RSA_NSEC3_SHA1:case Algorithm.RSASHA256:case Algorithm.RSASHA512:    if (!(key instanceof RSAPublicKey))     throw new IncompatibleKeyException();  return fromRSAPublicKey((RSAPublicKey)key);case Algorithm.DSA:case Algorithm.DSA_NSEC3_SHA1:if (!(key instanceof DSAPublicKey)) throw new IncompatibleKeyException();return fromDSAPublicKey((DSAPublicKey)key);case Algorithm.ECDSAP256SHA256:case Algorithm.ECDSAP384SHA384:if (!(key instanceof ECPublicKey)) throw new IncompatibleKeyException();return fromECDSAPublicKey((ECPublicKey)key);default :throw new UnsupportedAlgorithmException(alg);}}  }
class C{  private ExchangeRate smartLookup(final Currency source,final Currency target,final Date date,int[] forbidden){  final ExchangeRate direct=fetch(source,target,date);  if (direct != null)   return direct;  final int temp[]=forbidden.clone();  forbidden=new int[temp.length + 1];  System.arraycopy(temp,0,forbidden,0,temp.length);  forbidden[forbidden.length - 1]=(source.numericCode());  for (  final Object key : Iterables.unmodifiableIterable(data_.keySet())) {    if (hashes((Integer)key,source) && !(data_.get(key).isEmpty())) {      final Entry e=data_.get(key).get(0);      final Currency other=(source == e.rate.source()) ? e.rate.target() : e.rate.source();      if (match(forbidden,other.numericCode()) == (forbidden.length - 1)) {        final ExchangeRate head=fetch(source,other,date);        try {          if (head != null) {            final ExchangeRate tail=smartLookup(other,target,date,forbidden);            return ExchangeRate.chain(head,tail);          }        } catch (        final Exception ex) {        }      }    }  }  throw new LibraryException("no conversion available");}  }
class C{  public AndroidAuthenticator(Context context,Account account,String authTokenType){  this(context,account,authTokenType,false);}  }
class C{  @Override public final void lineTo(final float x,final float y){  shape_primitives.addElement(L);  shape_primitive_x.addElement(x);  shape_primitive_y.addElement(y);  shape_primitive_x2.addElement(0);  shape_primitive_y2.addElement(0);  shape_primitive_x3.addElement(0);  shape_primitive_y3.addElement(0);}  }
class C{  public static Pair<String,List<CStyleRunData>> buildInstructionLine(final INaviInstruction instruction,final ZyGraphViewSettings graphSettings,final INodeModifier modifier){  final List<CStyleRunData> styleRun=new ArrayList<CStyleRunData>();  final StringBuffer line=new StringBuffer();  buildAddress(instruction,line,styleRun,modifier);  buildMnemonic(instruction,line,styleRun);  ZyOperandBuilder.buildOperands(instruction,graphSettings,line,styleRun,modifier);  return new Pair<String,List<CStyleRunData>>(line.toString(),styleRun);}  }
class C{  public void typedLessThan() throws IOException {  print("typedLessThan",null);}  }
class C{  @Override protected SpringApplicationBuilder configure(SpringApplicationBuilder application){  return application.sources(ProductApp.class);}  }
class C{  public boolean contains(final CharSequence s){  int i=d, l=s.length();  long bits[]=this.bits;  while (i-- != 0)   if (!get(bits,hash(s,l,i)))   return false;  return true;}  }
class C{  @Override protected synchronized void create(boolean stream) throws IOException {  this.stream=stream;  if (!stream) {    socketCreate(false);  } else {    socketCreate(true);  }  if (socket != null)   socket.setCreated();  if (serverSocket != null)   serverSocket.setCreated();}  }
class C{  @Override protected void finalize(){  try {    super.finalize();  } catch (  Throwable t) {    throw new AssertionError(t);  }}  }
class C{  public boolean isSOTrx(){  Object oo=get_Value(COLUMNNAME_IsSOTrx);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private static String formatAdGuid(final byte[] guidObj){  StringBuffer guidStr=new StringBuffer();  int len;  String byteStr;  len=guidObj.length;  for (int i=0; i < len; i++) {    byteStr=Integer.toHexString(guidObj[i] & BITWISE_AND);    if (byteStr.length() == 1) {      byteStr="0" + byteStr;    }    guidStr.append(byteStr);  }  return guidStr.toString();}  }
class C{  protected SVGOMFEBlendElement(){}  }
class C{  public static OptionBuilder hasArgs(int num){  OptionBuilder.numberOfArgs=num;  return instance;}  }
class C{  public void writeToParcel(Parcel dest,int flags){  dest.writeString(mEncoding);  dest.writeInt(mPayload);  dest.writeInt(mClockRate);  dest.writeInt(mFrameRate);  dest.writeInt(mBitRate);  dest.writeInt(mWidth);  dest.writeInt(mHeight);  dest.writeString(mParameters);}  }
class C{  public SearchPanel(){  initComponents();}  }
class C{  public double computeAverageLocal(int states[][][],int destAgentRow,int destAgentColumn,int[][] sourcesAbsolute){  initialise();  addObservations(states,destAgentRow,destAgentColumn,sourcesAbsolute);  return computeAverageLocalOfObservations();}  }
class C{  static DatagramSocketImpl createDatagramSocketImpl(boolean isMulticast) throws SocketException {  if (prefixImplClass != null) {    try {      return (DatagramSocketImpl)prefixImplClass.newInstance();    } catch (    Exception e) {      throw new SocketException("can't instantiate DatagramSocketImpl");    }  } else {    return new java.net.PlainDatagramSocketImpl();  }}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addElement(new Option("\tThe file name of the file that holds the kernel matrix.\n" + "\t(default: kernelMatrix.matrix)","M",1,"-M <file name>"));  result.addAll(Collections.list(super.listOptions()));  return result.elements();}  }
class C{  private static void SetStaticIntField(JNIEnvironment env,int classJREF,int fieldID,int fieldValue){  if (traceJNI)   VM.sysWrite("JNI called: SetStaticIntField  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    RVMField field=MemberReference.getFieldRef(fieldID).resolve();    field.setIntValueUnchecked(null,fieldValue);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);  }}  }
class C{  public double callDouble(String key){  Double d=(Double)call(key);  return d.doubleValue();}  }
class C{  public void init(MCMCOptions options,Likelihood likelihood,OperatorSchedule schedule,Logger[] loggers,MarkovChainDelegate[] delegates){  init(options,likelihood,Prior.UNIFORM_PRIOR,schedule,loggers,delegates);}  }
class C{  public Set<A> minus(Iterable<A> as){  Set<A> result=this;  for (  A a : as) {    result=result.minus(a);  }  return result;}  }
class C{  private static <T extends Comparable<T>>void merge(T[] outputSequence,T[] leftSequence,T[] rightSequence){  int i=0;  int j=0;  int k=0;  while (i < leftSequence.length && j < rightSequence.length) {    if (leftSequence[i].compareTo(rightSequence[j]) <= 0) {      outputSequence[k++]=leftSequence[i++];    } else {      outputSequence[k++]=rightSequence[j++];    }  }  while (i < leftSequence.length) {    outputSequence[k++]=leftSequence[i++];  }  while (j < rightSequence.length) {    outputSequence[k++]=rightSequence[j++];  }}  }
class C{  private static double area2(Coordinate p1,Coordinate p2,Coordinate p3){  return (p2.x - p1.x) * (p3.y - p1.y) - (p3.x - p1.x) * (p2.y - p1.y);}  }
class C{  @SuppressWarnings("unchecked") public byte checkRange(Object value){  return (checkRange(value,minValue,maxValue));}  }
class C{  @CanIgnoreReturnValue public static <T>T checkNotNull(T reference,@Nullable String errorMessageTemplate,@Nullable Object... errorMessageArgs){  if (reference == null) {    throw new NullPointerException(format(errorMessageTemplate,errorMessageArgs));  }  return reference;}  }
class C{  protected void printElementDeclaration() throws TranscoderException, XMLException, IOException {  writer.write("<!ELEMENT");  type=scanner.next();  if (type != LexicalUnits.S) {    throw fatalError("space",null);  }  writer.write(getCurrentValue());  type=scanner.next();switch (type) {default :    throw fatalError("name",null);case LexicalUnits.NAME:  writer.write(getCurrentValue());}type=scanner.next();if (type != LexicalUnits.S) {throw fatalError("space",null);}writer.write(getCurrentValue());switch (type=scanner.next()) {case LexicalUnits.EMPTY_IDENTIFIER:writer.write("EMPTY");type=scanner.next();break;case LexicalUnits.ANY_IDENTIFIER:writer.write("ANY");type=scanner.next();break;case LexicalUnits.LEFT_BRACE:writer.write('(');type=scanner.next();if (type == LexicalUnits.S) {writer.write(getCurrentValue());type=scanner.next();}mixed: switch (type) {case LexicalUnits.PCDATA_IDENTIFIER:writer.write("#PCDATA");type=scanner.next();for (; ; ) {switch (type) {case LexicalUnits.S:writer.write(getCurrentValue());type=scanner.next();break;case LexicalUnits.PIPE:writer.write('|');type=scanner.next();if (type == LexicalUnits.S) {writer.write(getCurrentValue());type=scanner.next();}if (type != LexicalUnits.NAME) {throw fatalError("name",null);}writer.write(getCurrentValue());type=scanner.next();break;case LexicalUnits.RIGHT_BRACE:writer.write(')');type=scanner.next();break mixed;}}case LexicalUnits.NAME:case LexicalUnits.LEFT_BRACE:printChildren();if (type != LexicalUnits.RIGHT_BRACE) {throw fatalError("right.brace",null);}writer.write(')');type=scanner.next();if (type == LexicalUnits.S) {writer.write(getCurrentValue());type=scanner.next();}switch (type) {case LexicalUnits.QUESTION:writer.write('?');type=scanner.next();break;case LexicalUnits.STAR:writer.write('*');type=scanner.next();break;case LexicalUnits.PLUS:writer.write('+');type=scanner.next();}}}if (type == LexicalUnits.S) {writer.write(getCurrentValue());type=scanner.next();}if (type != LexicalUnits.END_CHAR) {throw fatalError("end",null);}writer.write('>');scanner.next();}  }
class C{  final private long physicalAddress(final int addr,final boolean nocheck){  final Lock lock=m_allocationReadLock;  lock.lock();  try {    if (addr >= 0) {      return addr & 0xFFFFFFE0;    } else {      final FixedAllocator allocator=getBlock(addr);      final int offset=getOffset(addr);      final long laddr=allocator.getPhysicalAddress(offset,nocheck);      return laddr;    }  }  finally {    lock.unlock();  }}  }
class C{  public boolean isBeingDeleted() throws UnknownHostException {  checkNodeStatusData();  return isBeingDeleted;}  }
class C{  @Override public int doFinal(final byte[] out,final int outOff){  return 0;}  }
class C{  public void login(String username,String password) throws AuthenticationException {  service.setUserCredentials(username,password);}  }
class C{  public DRLCertFactory(){  super("DRLCertFactory",1.0,"ASN.1, DER, PkiPath, PKCS7");  put("CertificateFactory.X509","android.framework.org.apache.harmony.security_custom.provider.cert.X509CertFactoryImpl");  put("Alg.Alias.CertificateFactory.X.509","X509");}  }
class C{  private int allocateBPOldestFirst() throws Exception {  int C_Currency_ID=MClient.get(getCtx()).getC_Currency_ID();  Timestamp dateAcct=null;  BigDecimal totalPayments=Env.ZERO;  for (int p=0; p < m_payments.length; p++) {    MPayment payment=m_payments[p];    if (payment.isAllocated())     continue;    if (payment.getC_Currency_ID() != C_Currency_ID)     continue;    BigDecimal allocatedAmt=payment.getAllocatedAmt();    log.info(payment + ", Allocated=" + allocatedAmt);    BigDecimal availableAmt=payment.getPayAmt().add(payment.getDiscountAmt()).add(payment.getWriteOffAmt()).add(payment.getOverUnderAmt());    availableAmt=availableAmt.subtract(allocatedAmt);    if (!payment.isReceipt())     availableAmt=availableAmt.negate();    log.fine("Available=" + availableAmt);    if (dateAcct == null || payment.getDateAcct().after(dateAcct))     dateAcct=payment.getDateAcct();    totalPayments=totalPayments.add(availableAmt);  }  BigDecimal totalInvoices=Env.ZERO;  for (int i=0; i < m_invoices.length; i++) {    MInvoice invoice=m_invoices[i];    if (invoice.isPaid())     continue;    if (invoice.getC_Currency_ID() != C_Currency_ID)     continue;    BigDecimal openAmt=invoice.getOpenAmt(true,null);    log.fine("" + invoice);    if (!invoice.isSOTrx())     openAmt=openAmt.negate();    log.fine("Open=" + openAmt);    if (dateAcct == null || invoice.getDateAcct().after(dateAcct))     dateAcct=invoice.getDateAcct();    totalInvoices=totalInvoices.add(openAmt);  }  if (totalInvoices.signum() != totalPayments.signum()) {    log.fine("Signum - Invoices=" + totalInvoices.signum() + " <> Payments="+ totalPayments.signum());    return 0;  }  BigDecimal difference=totalInvoices.subtract(totalPayments);  BigDecimal maxAmt=totalInvoices.abs().min(totalPayments.abs());  if (totalInvoices.signum() < 0)   maxAmt=maxAmt.negate();  log.info("= Invoices=" + totalInvoices + " - Payments="+ totalPayments+ " = Difference="+ difference+ " - Max="+ maxAmt);  BigDecimal allocatedPayments=Env.ZERO;  for (int p=0; p < m_payments.length; p++) {    MPayment payment=m_payments[p];    if (payment.isAllocated())     continue;    if (payment.getC_Currency_ID() != C_Currency_ID)     continue;    BigDecimal allocatedAmt=payment.getAllocatedAmt();    BigDecimal availableAmt=payment.getPayAmt().add(payment.getDiscountAmt()).add(payment.getWriteOffAmt()).add(payment.getOverUnderAmt());    availableAmt=availableAmt.subtract(allocatedAmt);    if (!payment.isReceipt())     availableAmt=availableAmt.negate();    allocatedPayments=allocatedPayments.add(availableAmt);    if ((totalInvoices.signum() > 0 && allocatedPayments.compareTo(maxAmt) > 0) || (totalInvoices.signum() < 0 && allocatedPayments.compareTo(maxAmt) < 0)) {      BigDecimal diff=allocatedPayments.subtract(maxAmt);      availableAmt=availableAmt.subtract(diff);      allocatedPayments=allocatedPayments.subtract(diff);    }    log.fine("Payment Allocated=" + availableAmt);    if (!createAllocation(C_Currency_ID,"BP Oldest (" + difference.abs() + ")",dateAcct,availableAmt,null,null,null,payment.getC_BPartner_ID(),payment.getC_Payment_ID(),0,payment.getAD_Org_ID())) {      throw new AdempiereSystemError("Cannot create Allocation");    }    if (allocatedPayments.compareTo(maxAmt) == 0)     break;  }  BigDecimal allocatedInvoices=Env.ZERO;  for (int i=0; i < m_invoices.length; i++) {    MInvoice invoice=m_invoices[i];    if (invoice.isPaid())     continue;    if (invoice.getC_Currency_ID() != C_Currency_ID)     continue;    BigDecimal openAmt=invoice.getOpenAmt(true,null);    if (!invoice.isSOTrx())     openAmt=openAmt.negate();    allocatedInvoices=allocatedInvoices.add(openAmt);    if ((totalInvoices.signum() > 0 && allocatedInvoices.compareTo(maxAmt) > 0) || (totalInvoices.signum() < 0 && allocatedInvoices.compareTo(maxAmt) < 0)) {      BigDecimal diff=allocatedInvoices.subtract(maxAmt);      openAmt=openAmt.subtract(diff);      allocatedInvoices=allocatedInvoices.subtract(diff);    }    if (openAmt.signum() == 0)     break;    log.fine("Invoice Allocated=" + openAmt);    if (!createAllocation(C_Currency_ID,"BP Oldest (" + difference.abs() + ")",dateAcct,openAmt,null,null,null,invoice.getC_BPartner_ID(),0,invoice.getC_Invoice_ID(),invoice.getAD_Org_ID())) {      throw new AdempiereSystemError("Cannot create Allocation");    }    if (allocatedInvoices.compareTo(maxAmt) == 0)     break;  }  if (allocatedPayments.compareTo(allocatedInvoices) != 0) {    throw new AdempiereSystemError("Allocated Payments=" + allocatedPayments + " <> Invoices="+ allocatedInvoices);  }  processAllocation();  return 1;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:10.442 -0500",hash_original_method="B1B4E779BD078982D9B492986F6F7537",hash_generated_method="F26C98211CB7444F933B107F0C3E8429") public static Element createVector(RenderScript rs,DataType dt,int size){  if (size < 2 || size > 4) {    throw new RSIllegalArgumentException("Vector size out of range 2-4.");  }  DataKind dk=DataKind.USER;  boolean norm=false;  int id=rs.nElementCreate(dt.mID,dk.mID,norm,size);  return new Element(id,rs,dt,dk,norm,size);}  }
class C{  private void validateFixedAssetsInvoice_LRO(MInvoice invoice){  if (invoice.get_ValueAsBoolean("IsFixedAssetInvoice")) {    boolean hasFixedAssetLines=false;    boolean hasNormalLines=false;    for (    MInvoiceLine line : invoice.getLines()) {      if (line.get_ValueAsBoolean("IsFixedAssetInvoice")) {        hasFixedAssetLines=true;      } else       if (line.getM_Product_ID() > 0) {        MProduct product=MProduct.get(line.getCtx(),line.getM_Product_ID());        if (product.isItem()) {          hasNormalLines=true;        }      }      if (hasFixedAssetLines && hasNormalLines) {        throw new AssetInvoiceWithMixedLines_LRO();      }    }  }}  }
class C{  protected Command dropFilter(DatapathId sw,OFPacketIn pi,FloodlightContext cntx){  Command result=Command.CONTINUE;  OFPort inPort=(pi.getVersion().compareTo(OFVersion.OF_12) < 0 ? pi.getInPort() : pi.getMatch().get(MatchField.IN_PORT));  if (isAllowed(sw,inPort) == false) {    if (log.isTraceEnabled()) {      log.trace("Ignoring packet because of topology " + "restriction on switch={}, port={}",sw.getLong(),inPort.getPortNumber());      result=Command.STOP;    }  }  return result;}  }
class C{  public boolean write(IOFSwitch sw,OFMessage msg,boolean flush) throws IOException {  if (!msgTypesToCache.contains(msg.getType())) {    sw.write(msg);    if (flush) {      sw.flush();    }    return true;  }  DamperEntry entry=new DamperEntry(msg,sw);  if (cache.update(entry)) {    return false;  } else {    sw.write(msg);    if (flush) {      sw.flush();    }    return true;  }}  }
class C{  public WordDistance(WordToken word){  this.word=word;  this.previous=null;  this.distance=0;}  }
class C{  private void parseMonthDayTime(Scanner s,TZDBMonthDayTime mdt){  mdt.month=parseMonth(s);  if (s.hasNext()) {    String dayRule=s.next();    if (dayRule.startsWith("last")) {      mdt.dayOfMonth=-1;      mdt.dayOfWeek=parseDayOfWeek(dayRule.substring(4));      mdt.adjustForwards=false;    } else {      int index=dayRule.indexOf(">=");      if (index > 0) {        mdt.dayOfWeek=parseDayOfWeek(dayRule.substring(0,index));        dayRule=dayRule.substring(index + 2);      } else {        index=dayRule.indexOf("<=");        if (index > 0) {          mdt.dayOfWeek=parseDayOfWeek(dayRule.substring(0,index));          mdt.adjustForwards=false;          dayRule=dayRule.substring(index + 2);        }      }      mdt.dayOfMonth=Integer.parseInt(dayRule);    }    if (s.hasNext()) {      String timeStr=s.next();      int secsOfDay=parseSecs(timeStr);      if (secsOfDay == 86400) {        mdt.endOfDay=true;        secsOfDay=0;      }      LocalTime time=LocalTime.ofSecondOfDay(secsOfDay);      mdt.time=time;      mdt.timeDefinition=parseTimeDefinition(timeStr.charAt(timeStr.length() - 1));    }  }}  }
class C{  public double measureOutOfBagError(){  if (m_bagger != null && !m_dontCalculateOutOfBagError) {    return m_bagger.measureOutOfBagError();  } else {    return Double.NaN;  }}  }
class C{  public InvertedGenerationalDistance(Problem problem,NondominatedPopulation referenceSet){  super(problem,referenceSet);}  }
class C{  @Override public StringBuffer format(double number,StringBuffer toAppendTo,FieldPosition pos){  StringBuffer result=new StringBuffer();  if (this.showBase) {    result.append(this.baseLabel);    result.append(this.powerLabel);  }  result.append(this.formatter.format(calculateLog(number)));  return result;}  }
class C{  private static boolean wasInstalledFromPlayStore(final Context context){  final String installer=context.getPackageManager().getInstallerPackageName(context.getPackageName());  return installer != null && installer.startsWith(PLAY_STORE_PACKAGE);}  }
class C{  @Override public Cursor swapCursor(Cursor newCursor){  Cursor old=super.swapCursor(newCursor);  resetMappings();  return old;}  }
class C{  @Override public int isNullable(int columnIndex){  return ResultSetMetaData.columnNullableUnknown;}  }
class C{  public ArrayIntCompressed(int[] ints,int offset,int length){  int mask=0x0;  for (int i=0; i < length; i++) {    mask|=ints[offset + i];  }  int leadingClearBits=0;  int trailingClearBits=0;  while (((mask & (1 << (BIT_LENGTH - leadingClearBits - 1))) == 0) && (leadingClearBits < BIT_LENGTH)) {    leadingClearBits++;  }  while (((mask & (1 << trailingClearBits)) == 0) && (trailingClearBits < (BIT_LENGTH - leadingClearBits))) {    trailingClearBits++;  }  init(length,BIT_LENGTH - leadingClearBits - trailingClearBits,trailingClearBits);  for (int i=0; i < length; i++) {    set(i,ints[offset + i]);  }}  }
class C{  public AWTGVTGlyphVector(GlyphVector glyphVector,AWTGVTFont font,float scaleFactor,CharacterIterator ci){  this.awtGlyphVector=glyphVector;  this.gvtFont=font;  this.scaleFactor=scaleFactor;  this.ci=ci;  GVTLineMetrics lineMetrics=gvtFont.getLineMetrics("By",awtGlyphVector.getFontRenderContext());  ascent=lineMetrics.getAscent();  descent=lineMetrics.getDescent();  outline=null;  visualBounds=null;  logicalBounds=null;  bounds2D=null;  int numGlyphs=glyphVector.getNumGlyphs();  glyphPositions=new Point2D.Float[numGlyphs + 1];  glyphTransforms=new AffineTransform[numGlyphs];  glyphOutlines=new Shape[numGlyphs];  glyphVisualBounds=new Shape[numGlyphs];  glyphLogicalBounds=new Shape[numGlyphs];  glyphVisible=new boolean[numGlyphs];  glyphMetrics=new GVTGlyphMetrics[numGlyphs];  for (int i=0; i < numGlyphs; i++) {    glyphVisible[i]=true;  }}  }
class C{  public DefaultOverviewMouseMode(OverviewMapHandler omh){  super(true);  overviewMapHandler=omh;}  }
class C{  public final void applyLighting(PrimarySecondaryColors colors,PixelState pixel){  if (ambient == 0xFFFFFFFF && pixel.materialAmbient == 0xFFFFFFFF) {    if (!someLightsEnabled || !separateSpecularColor || !hasNormal) {      colors.primaryColor=ambient;      colors.secondaryColor=ZERO;      return;    }  }  int primary=materialEmission;  int secondary=ZERO;  Al=ambient;  if (someLightsEnabled) {    if (hasSomeNonDirectionalLight) {      pixel.getVe(Ve);    }    if (hasNormal) {      pixel.getNormalizedNe(Ne);    }    Dl=ZERO;    Sl=ZERO;    for (int l=0; l < NUM_LIGHTS; l++) {      if (lightEnabled[l]) {        computeLight(l);      }    }    if (Dl != ZERO) {      primary=addBGR(primary,multiplyBGR(Dl,pixel.materialDiffuse));    }    if (Sl != ZERO) {      if (separateSpecularColor) {        secondary=multiplyBGR(Sl,pixel.materialSpecular);      } else {        primary=addBGR(primary,multiplyBGR(Sl,pixel.materialSpecular));      }    }  }  if (Al != ZERO) {    primary=addBGR(primary,multiplyBGR(Al,pixel.materialAmbient));  }  primary=setAlpha(primary,multiplyComponent(ambientAlpha,getAlpha(pixel.materialAmbient)));  colors.primaryColor=primary;  colors.secondaryColor=secondary;}  }
class C{  public SpecificMessage(byte[] a,int l){  super(a,l);}  }
class C{  public NoAxioms(){  super();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:26.746 -0500",hash_original_method="48ABE9510A7CA4042FB5B96D41BACEB8",hash_generated_method="DF078C4F845878968FF429F8740C3228") public Collection<ApnContext> rspApnList(Message response){  Collection<ApnContext> retVal=(Collection<ApnContext>)response.obj;  if (retVal == null)   retVal=new ArrayList<ApnContext>();  return retVal;}  }
class C{  public static FontImage create(String text,Style s){  return create(text,s,s.getFont());}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:34.732 -0500",hash_original_method="C319AA8CE810AC3271C178BB34DF8E30",hash_generated_method="2E86170B59EB6BEEE710D4737E27B5A4") @DSVerified @DSSafe(DSCat.ANDROID_CALLBACK) public void onAnimationStart(Animator animation){  if (mRule == Dependency.WITH) {    startIfReady(animation);  }}  }
class C{  @Override public void afterLast() throws SQLException {  try {    debugCodeCall("afterLast");    checkClosed();    while (nextRow()) {    }  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void translate(float x,float y,float z){  this.position.add(x,y,z);  updated=false;}  }
class C{  public static <K>Map<K,Double> normalize(Map<K,Double> map){  Double maxValue=0.0;  for (  Double v : map.values()) {    if (v > maxValue)     maxValue=v;  }  for (  Map.Entry<K,Double> e : map.entrySet()) {    map.put(e.getKey(),map.get(e.getKey()) / maxValue);  }  return map;}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean isFinal(){  return false;}  }
class C{  public void refresh(){  validate();  repaint();}  }
class C{  public boolean contains(int key){  return rank(key) != -1;}  }
class C{  protected Iterator createEntrySetIterator(){  return new ReferenceEntrySetIterator(this);}  }
class C{  public void add(double attribute){  if (data.length == size) {    grow();  }  data[size++]=attribute;}  }
class C{  public synchronized void stop(){  stopped=true;  notify();}  }
class C{  public void containerVmDestroyAll(){  containerVmDeallocateAll();  for (  ContainerVm containerVm : getVmList()) {    containerVm.setHost(null);    setStorage(getStorage() + containerVm.getSize());  }  getVmList().clear();}  }
class C{  public String equalHeadersMsg(Instances dataset){  if (m_ClassIndex != dataset.m_ClassIndex) {    return "Class index differ: " + (m_ClassIndex + 1) + " != "+ (dataset.m_ClassIndex + 1);  }  if (m_Attributes.size() != dataset.m_Attributes.size()) {    return "Different number of attributes: " + m_Attributes.size() + " != "+ dataset.m_Attributes.size();  }  for (int i=0; i < m_Attributes.size(); i++) {    String msg=attribute(i).equalsMsg(dataset.attribute(i));    if (msg != null) {      return "Attributes differ at position " + (i + 1) + ":\n"+ msg;    }  }  return null;}  }
class C{  public static String trimOrPad(String str,int length){  return trimOrPad(str,length,' ');}  }
class C{  public void stubFromPackage(PackageElement packageElement){  currentPackage=packageElement.getQualifiedName().toString();  indent();  out.print("package ");  out.print(currentPackage);  out.println(";");  for (  TypeElement element : ElementFilter.typesIn(packageElement.getEnclosedElements())) {    if (isPublicOrProtected(element)) {      out.println();      printClass(element);    }  }}  }
class C{  public boolean isCollection(){  return false;}  }
class C{  boolean collapseGroup(int groupPos){  ExpandableListPosition elGroupPos=ExpandableListPosition.obtain(ExpandableListPosition.GROUP,groupPos,-1,-1);  PositionMetadata pm=getFlattenedPos(elGroupPos);  elGroupPos.recycle();  if (pm == null)   return false;  boolean retValue=collapseGroup(pm);  pm.recycle();  return retValue;}  }
class C{  public void paintTextPaneBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public Integer toInteger(){  return new Integer((int)value);}  }
class C{  public OMRaster(double lt,double ln,ImageIcon ii){  this(lt,ln,ii.getImage());}  }
class C{  public void testSyncSubscriber_reloadsResults(){  mFakeGlobalEventBus.post(new SyncSucceededEvent());  verify(mMockAppModel).fetchPatients(any(CrudEventBus.class),any(SimpleSelectionFilter.class),anyString());}  }
class C{  public int hashCode(){  int hash=37;  hash+=37 * hash + Float.floatToIntBits(x);  hash+=37 * hash + Float.floatToIntBits(y);  hash+=37 * hash + Float.floatToIntBits(z);  return hash;}  }
class C{  private void processTopologyViewInstance(WBEMClient client,CIMInstance topins,Map<String,FCEndpoint> portConnections,Map<String,Set<String>> routedConnections,String fabricName,String fabricWwn,Map<String,String> deviceNameCache,Map<String,String> logicalToPhysicalSwitchMap) throws WBEMException {  if (_XlatePhantomPort.equals(cimStringProperty(topins,_AntecedentFCPortElementName))) {    Set<String> fabricRoutedEndpoints=routedConnections.get(fabricWwn);    if (fabricRoutedEndpoints == null) {      fabricRoutedEndpoints=new HashSet<String>();      routedConnections.put(fabricWwn,fabricRoutedEndpoints);    }    fabricRoutedEndpoints.add(formatWWN(cimStringProperty(topins,_DependentFCPortWWN)));    return;  }  if (cimIntegerProperty(topins,_AntecedentFCPortType) != _clientPort) {    return;  }  String remotePortName=formatWWN(cimStringProperty(topins,_DependentFCPortWWN));  String remoteNodeName=formatWWN(cimStringProperty(topins,_DependentElementWWN));  String switchPortName=formatWWN(cimStringProperty(topins,_AntecedentFCPortWWN));  String switchInterfaceName=cimStringProperty(topins,_AntecedentFCPortElementName);  String switchWwn=formatWWN(cimStringProperty(topins,_AntecedentElementWWN));  String switchName=switchWwn;  if (deviceNameCache.get(switchWwn) != null) {    switchName=deviceNameCache.get(switchWwn);  } else {    CIMProperty switchPathProperty=topins.getProperty(_AntecedentSystem);    CIMObjectPath switchPath=null;    if (switchPathProperty.getValue() instanceof String) {      switchPath=new CIMObjectPath((String)switchPathProperty.getValue());    } else {      switchPath=(CIMObjectPath)switchPathProperty.getValue();    }    CloseableIterator<CIMInstance> switchIt=client.enumerateInstances(switchPath,false,true,true,null);    while (switchIt.hasNext()) {      CIMInstance swins=switchIt.next();      String namex=formatWWN(cimStringProperty(swins,_name));      String enamex=cimStringProperty(swins,_element_name);      if (namex.equals(switchWwn)) {        switchName=enamex;        deviceNameCache.put(switchWwn,switchName);      }    }  }  String physicalSwitchName=logicalToPhysicalSwitchMap.get(switchName);  _log.info("Switch Name : {} Physical SwitchName {}",switchName,physicalSwitchName);  if (physicalSwitchName != null) {    switchName=physicalSwitchName;  }  FCEndpoint conn=new FCEndpoint();  conn.setFabricId(fabricName);  conn.setRemotePortName(remotePortName);  conn.setRemoteNodeName(remoteNodeName);  conn.setSwitchPortName(switchPortName);  conn.setSwitchInterface(switchInterfaceName);  conn.setSwitchName(switchName);  conn.setFabricWwn(fabricWwn);  portConnections.put(remotePortName,conn);}  }
class C{  private static Evaluator handleUnaryNumericPromotion(final PsiType operandExpressionType,Evaluator operandEvaluator){  final PsiPrimitiveType unboxedType=PsiPrimitiveType.getUnboxedType(operandExpressionType);  if (unboxedType != null && !PsiType.BOOLEAN.equals(unboxedType)) {    operandEvaluator=new UnBoxingEvaluator(operandEvaluator);  }  final PsiType _unboxedIndexType=unboxedType != null ? unboxedType : operandExpressionType;  if (_unboxedIndexType instanceof PsiPrimitiveType) {    final PsiType promotionType=calcUnaryNumericPromotionType((PsiPrimitiveType)_unboxedIndexType);    if (promotionType != null) {      operandEvaluator=new TypeCastEvaluator(operandEvaluator,promotionType.getCanonicalText(),true);    }  }  return operandEvaluator;}  }
class C{  private void runScript(Connection conn,Reader reader) throws IOException, SQLException {  StringBuffer command=null;  try {    LineNumberReader lineReader=new LineNumberReader(reader);    String line=null;    while ((line=lineReader.readLine()) != null) {      if (command == null) {        command=new StringBuffer();      }      String trimmedLine=line.trim();      if (trimmedLine.startsWith("--")) {        println(trimmedLine);      } else       if (trimmedLine.length() < 1 || trimmedLine.startsWith("//")) {      } else       if (trimmedLine.length() < 1 || trimmedLine.startsWith("--")) {      } else       if (!fullLineDelimiter && trimmedLine.endsWith(getDelimiter()) || fullLineDelimiter && trimmedLine.equals(getDelimiter())) {        command.append(line.substring(0,line.lastIndexOf(getDelimiter())));        command.append(" ");        Statement statement=conn.createStatement();        println(command);        boolean hasResults=false;        if (stopOnError) {          hasResults=statement.execute(command.toString());        } else {          try {            statement.execute(command.toString());          } catch (          SQLException e) {            e.fillInStackTrace();            printlnError("Error executing: " + command);            printlnError(e);          }        }        if (autoCommit && !conn.getAutoCommit()) {          conn.commit();        }        ResultSet rs=statement.getResultSet();        if (hasResults && rs != null) {          ResultSetMetaData md=rs.getMetaData();          int cols=md.getColumnCount();          for (int i=0; i < cols; i++) {            String name=md.getColumnLabel(i);            print(name + "\t");          }          println("");          while (rs.next()) {            for (int i=0; i < cols; i++) {              String value=rs.getString(i);              print(value + "\t");            }            println("");          }        }        command=null;        try {          statement.close();        } catch (        Exception e) {        }        Thread.yield();      } else {        command.append(line);        command.append(" ");      }    }    if (!autoCommit) {      conn.commit();    }  } catch (  SQLException e) {    e.fillInStackTrace();    printlnError("Error executing: " + command);    printlnError(e);    throw e;  }catch (  IOException e) {    e.fillInStackTrace();    printlnError("Error executing: " + command);    printlnError(e);    throw e;  } finally {    conn.rollback();    flush();  }}  }
class C{  public static void createPkcs12(String filenameKey,String filenamePem,String filenameP12) throws Exception {  Security.addProvider(new BouncyCastleProvider());  KeyPair keyPair=readKeyPairFromPemFile(filenameKey);  PublicKey publicKey=keyPair.getPublic();  PrivateKey privateKey=keyPair.getPrivate();  X509Certificate cert=readCertificate(filenamePem);  Certificate[] outChain={cert};  KeyStore outStore=KeyStore.getInstance("PKCS12");  outStore.load(null,InternalSSLKey.getKEY_PASSWORD());  outStore.setKeyEntry(InternalSSLKey.KEY_ALIAS,privateKey,InternalSSLKey.getKEY_PASSWORD(),outChain);  try (OutputStream outputStream=new FileOutputStream(filenameP12)){    outStore.store(outputStream,InternalSSLKey.getKEY_PASSWORD());    outputStream.flush();  } }  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private PointOctree(PointOctree p,Vec3D o,float halfSize){  super(o.add(halfSize,halfSize,halfSize),new Vec3D(halfSize,halfSize,halfSize));  this.parent=p;  this.halfSize=halfSize;  this.size=halfSize * 2;  this.offset=o;  this.numChildren=0;  if (parent != null) {    depth=parent.depth + 1;    minNodeSize=parent.minNodeSize;  }}  }
class C{  private void validateXmlFieldPresent(String message,String xmlTagName,String xmlTagAttributeName,String xmlTagAttributeValue,Object xmlTagValue){  assertTrue(String.format("<%s> is expected, but not found or does not match expected attribute and/or value.",xmlTagName),message.contains(String.format("<%s %s=\"%s\">%s</%s>",xmlTagName,xmlTagAttributeName,xmlTagAttributeValue,xmlTagValue == null ? null : xmlTagValue.toString(),xmlTagName)));}  }
class C{  public void subdivide(int maxSubdivisionCount,Consumer<ReplicaSets> subdivisionConsumer){  int numGroups=Math.min(replicaSetCount(),maxSubdivisionCount);  if (numGroups <= 1) {    subdivisionConsumer.accept(this);    return;  }  ConnectorUtils.groupPartitions(all(),numGroups).forEach(null);}  }
class C{  public final boolean saveStoredImage(String current_image,BufferedImage image,final boolean file_name_is_path,final String type){  boolean was_error=false;  if (debugAdobe) {    System.out.println("Save " + current_image);  }  current_image=removeIllegalFileNameCharacters(current_image);  final File checkDir=new File(temp_dir);  if (!checkDir.exists()) {    checkDir.mkdirs();  }  if (type.contains("tif")) {    if (!file_name_is_path) {      image_type.put(current_image,"tif");    }    was_error=saveStoredImage("TIF",".tif",".tiff",current_image,image,file_name_is_path);  } else   if (type.contains("jpg")) {    if (!file_name_is_path) {      image_type.put(current_image,"jpg");    }    was_error=saveStoredJPEGImage(current_image,image,file_name_is_path);  } else   if (type.contains("png")) {    if (!file_name_is_path) {      image_type.put(current_image,"png");    }    was_error=saveStoredImage("PNG",".png",".png",current_image,image,file_name_is_path);  }  return was_error;}  }
class C{  protected boolean hasDrawer(){  return false;}  }
class C{  public boolean hasHref(){  return super.hasAttribute(HREF);}  }
class C{  public boolean isRelative(){  if (relative == null) {    return false;  } else {    return relative;  }}  }
class C{  private static TemporaryStore temporaryStore(){  if (temporaryStore != null) {    return temporaryStore;  }  UncaughtExceptionHandler uncaughtExceptionHandler=Thread.getDefaultUncaughtExceptionHandler();  temporaryStore=new TemporaryStore();  Thread.setDefaultUncaughtExceptionHandler(uncaughtExceptionHandler);  return temporaryStore;}  }
class C{  public static int dayOfMonth(long timeMillis){  if (isNotTime(timeMillis)) {    return -1;  }  DateOnlyCalendar calendar=DateOnlyCalendar.fromTime(timeMillis);  int day=calendar.get(Calendar.DAY_OF_MONTH);  calendar.recycle();  return day;}  }
class C{  public AutoBackup(){  super("autoBackups");}  }
class C{  private boolean connectAndAuth(XMPPTCPConnection connection){  try {    updateAction("Connecting to " + connection.getConfiguration().getServiceName());    connection.connect();  } catch (  Exception e) {    String status="";    if (e instanceof XMPPException) {      Log.w("XMPP connection failed because of stream error: " + e.getMessage());    } else     if (e instanceof SmackException.ConnectionException) {      SmackException.ConnectionException connectionException=(SmackException.ConnectionException)e;      ArrayList<String> hosts=new ArrayList<>();      for (      HostAddress host : connectionException.getFailedAddresses()) {        hosts.add("\t" + host.getFQDN() + ":"+ host.getPort());      }      Log.e("Server " + StringFmt.join(hosts,", ") + " unreachable");      status=mContext.getString(R.string.xmpp_manager_unreachable_servers,StringFmt.join(hosts,"\n"));    } else {      Log.w("XMPP connection failed",e);    }    maybeStartReconnect(status);    return false;  }  if (connection.isAuthenticated()) {    return true;  }  updateAction("Service discovery");  mPingManager=PingManager.getInstanceFor(connection);  mPingManager.setPingInterval(mSettings.pingIntervalInSec);  try {    XHTMLManager.setServiceEnabled(connection,false);  } catch (  Exception e) {    Log.e("Failed to set ServiceEnabled flag for XHTMLManager",e);    if (e.getMessage() == null) {      restartConnection();      return false;    }  }  try {    updateAction("Login with " + mSettings.getLogin());    connection.login(mSettings.getLogin(),mSettings.getPassword(),Tools.APP_NAME);  } catch (  Exception e) {    Log.e("Xmpp login failed",e);    if (e.getMessage() != null && e.getMessage().startsWith("SASLError") && e.getMessage().endsWith("not-authorized")) {      stop();      updateAction(mContext.getString(R.string.xmpp_manager_invalid_credentials));    } else {      maybeStartReconnect();    }    return false;  }  return true;}  }
class C{  public void addRange(double minValue,double maxValue){  if (maxValue <= 0.0)   maxValue=1.0E-100;  if (minValue <= 0.0)   minValue=maxValue;  super.addRange(minValue,maxValue);}  }
class C{  private void showPromptToLogin(){  view.showDialog(localizationConstant.sessionExpiredDialogTitle(),localizationConstant.sessionExpiredDialogMessage());}  }
class C{  public boolean isConstructor(){  return (Objects.equal(this.getName(),"constructor") && (!this.isStatic()));}  }
class C{  public static SortedMap unmodifiableSortedMap(SortedMap m){  return new UnmodifiableSortedMap(m);}  }
class C{  public void testSetBitPositiveOutside1(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=1;  int number=150;  byte rBytes[]={64,0,0,0,0,0,1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.setBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  private LinearRing(Coordinate points[],GeometryFactory factory){  this(factory.getCoordinateSequenceFactory().create(points),factory);}  }
class C{  private void paint(PaintEvent e){  e.gc.setBackground(widgetBackground);  e.gc.setForeground(widgetForeground);  Rectangle bounds=getBounds();  if (elements.length != 0) {    e.gc.fillRectangle(0,0,bounds.width,bounds.height);    e.gc.setForeground(widgetNormalShadow);    if (!section || isDownScrollRequired()) {      e.gc.drawLine(bounds.width - 1,0,bounds.width - 1,bounds.height - 1);    } else {      e.gc.drawLine(bounds.width - 1,0,bounds.width - 1,bounds.height - SECTION_DIV_HEIGHT);      e.gc.drawPoint(bounds.width - 1,bounds.height - 1);    }    e.gc.drawLine(0,0,bounds.width - 1,0);    e.gc.setForeground(bottomNavigationElementShadowStroke1);    e.gc.drawLine(0,1,bounds.width - 2,1);    e.gc.setForeground(bottomNavigationElementShadowStroke2);    e.gc.drawLine(0,2,bounds.width - 2,2);  } else {    e.gc.setBackground(listBackground);    e.gc.fillRectangle(0,0,bounds.width,bounds.height);  }  if (isDownScrollRequired()) {    e.gc.setForeground(widgetDarkShadow);    int middle=bounds.width / 2;    int bottom=bounds.height - 3;    e.gc.drawLine(middle + 1,bottom,middle + 5,bottom - 4);    e.gc.drawLine(middle,bottom,middle - 4,bottom - 4);    e.gc.drawLine(middle - 3,bottom - 4,middle + 4,bottom - 4);    e.gc.setForeground(listBackground);    e.gc.drawLine(middle,bottom - 1,middle + 1,bottom - 1);    e.gc.drawLine(middle - 1,bottom - 2,middle + 2,bottom - 2);    e.gc.drawLine(middle - 2,bottom - 3,middle + 3,bottom - 3);    e.gc.setForeground(widgetNormalShadow);    e.gc.drawLine(0,bottom - 7,bounds.width - 2,bottom - 7);    e.gc.setForeground(navigationElementShadowStroke);    e.gc.drawLine(0,bottom + 2,bounds.width - 2,bottom + 2);    e.gc.drawLine(0,bottom - 6,bounds.width - 2,bottom - 6);  }}  }
class C{  public static void showErrorMessage(String msg,int timeout){  showMessage(msg,FontImage.MATERIAL_ERROR,timeout);}  }
class C{  public static int findPattern(byte[] buffer,int startPosition,int buflen,byte[] pattern,int patlen){  int midx;  int plen=patlen;  int mlen=buflen - startPosition;  if ((buffer != null) && (pattern != null) && (plen > 0))   for (midx=startPosition; mlen >= plen; --mlen, ++midx)   if (compareBytes(buffer,midx,plen,pattern,0,plen) == 0)   return (midx);  return (-1);}  }
class C{  public JSONArray put(int index,int value) throws JSONException {  this.put(index,new Integer(value));  return this;}  }
class C{  private AllocationOutcome allocate(final long size,final boolean incomingUpdatePeak,final boolean forceAllocation){  final long newLocal=locallyHeldMemory.addAndGet(size);  final long beyondReservation=newLocal - reservation;  final boolean beyondLimit=newLocal > allocationLimit.get();  final boolean updatePeak=forceAllocation || (incomingUpdatePeak && !beyondLimit);  AllocationOutcome parentOutcome=AllocationOutcome.SUCCESS;  if (beyondReservation > 0 && parent != null) {    final long parentRequest=Math.min(beyondReservation,size);    parentOutcome=parent.allocate(parentRequest,updatePeak,forceAllocation);  }  final AllocationOutcome finalOutcome=beyondLimit ? AllocationOutcome.FAILED_LOCAL : parentOutcome.ok ? AllocationOutcome.SUCCESS : AllocationOutcome.FAILED_PARENT;  if (updatePeak) {    updatePeak();  }  return finalOutcome;}  }
class C{  public void transmitTextFile(FileObject fileObject,IConnectionStreams connectionStreams,ICvsFileSystem cvsFileSystem) throws IOException {  final File file=cvsFileSystem.getLocalFileSystem().getFile(fileObject);  if (!file.exists()) {    throw new FileNotFoundException(SmartCvsSrcBundle.message("file.does.not.exist.error.message",file.getAbsolutePath()));  }  final File fileToSend=sendTextFilePreprocessor.getPreprocessedTextFile(file,connectionStreams.getWriterFactory());  long length=fileToSend.length();  writeLengthString(connectionStreams.getLoggedWriter(),length);  BufferedInputStream bis=null;  try {    bis=new BufferedInputStream(new FileInputStream(fileToSend));    final OutputStream outputStream=connectionStreams.getOutputStream();    final byte[] chunk=new byte[CHUNK_SIZE];    while (length > 0) {      final int bytesToRead=(length >= CHUNK_SIZE) ? CHUNK_SIZE : (int)length;      final int count=bis.read(chunk,0,bytesToRead);      length-=count;      outputStream.write(chunk,0,count);    }    outputStream.flush();  }  finally {    if (bis != null) {      try {        bis.close();      } catch (      IOException ex) {      }    }    sendTextFilePreprocessor.cleanup(fileToSend);  }}  }
class C{  public void ellipse(double x,double y,double semiMajorAxis,double semiMinorAxis){  if (semiMajorAxis < 0)   throw new IllegalArgumentException("ellipse semimajor axis can't be negative");  if (semiMinorAxis < 0)   throw new IllegalArgumentException("ellipse semiminor axis can't be negative");  double xs=scaleX(x);  double ys=scaleY(y);  double ws=factorX(2 * semiMajorAxis);  double hs=factorY(2 * semiMinorAxis);  if (ws <= 1 && hs <= 1)   pixel(x,y); else   offscreen.draw(new Ellipse2D.Double(xs - ws / 2,ys - hs / 2,ws,hs));  draw();}  }
class C{  public static long lowestOneBit(long v){  return v & -v;}  }
class C{  public static ComponentUI createUI(JComponent a){  ComponentUI mui=new MultiLabelUI();  return MultiLookAndFeel.createUIs(mui,((MultiLabelUI)mui).uis,a);}  }
class C{  public void check(final Predicate3<A,B,C> property){  final TheoryRunner<Tuple3<A,B,C>,Tuple3<A,B,C>> qc=TheoryRunner.runner(this.state.get(),combine(),convertPredicate());  qc.check(null);}  }
class C{  public boolean isExclusiveTimeDataAvailable(){  return exclusiveMin != -1;}  }
class C{  protected boolean mustRetrieveNetworkResource(){  KMLLink link=this.getLinkOrUrl();  if (link == null)   return false;  if (this.invalidTarget)   return false;  KMLNetworkLinkControl linkControl=this.getRoot().getNetworkLinkControl();  if (linkControl != null && linkControl.getMinRefreshPeriod() != null) {    long now=System.currentTimeMillis();    if (this.firstRetrievalTime != null && this.networkResourceRetrievalTime.get() + linkControl.getMinRefreshPeriod() * 1000 > now)     return false;  }  if (linkControl != null && linkControl.getMaxSessionLength() != null && this.firstRetrievalTime != null) {    long now=System.currentTimeMillis();    if (this.firstRetrievalTime.get() + linkControl.getMaxSessionLength() * 1000 > now)     return false;  }  return this.getNetworkResource() == null || link.getUpdateTime() > this.networkResourceRetrievalTime.get();}  }
class C{  void delete(Node n){  if (n.next == null)   n=null;  Node temp=n.next;  n.val=temp.val;  n.next=temp.next;  temp=null;}  }
class C{  protected void addTrailerToOutput(byte[] msg,int offset,AbstractMRMessage m){}  }
class C{  public static <T>ArrayList<T> sortThis(ArrayList<T> list,Comparator<? super T> comparator){  int size=list.size();  if (ArrayListIterate.canAccessInternalArray(list)) {    Arrays.sort(ArrayListIterate.getInternalArray(list),0,size,comparator);  } else {    Collections.sort(list,comparator);  }  return list;}  }
class C{  public static final Date todaysDate(){  final java.util.Calendar cal=java.util.Calendar.getInstance();  final int d=cal.get(java.util.Calendar.DAY_OF_MONTH);  final int m=cal.get(java.util.Calendar.MONTH);  final int y=cal.get(java.util.Calendar.YEAR);  return new Date(d,m + 1,y);}  }
class C{  private void changeNumberOfCategories(int numOfCats,List<Node> nodes){  for (  Node node : nodes) {    DiscretizationEditor editor=this.nodeEditors.get(node);    if (editor != null && editor instanceof ContinuousDiscretizationEditor) {      ((ContinuousDiscretizationEditor)editor).setNumCategories(numOfCats);    }  }}  }
class C{  private void adjustBottomByAspectRatio(RectF rect,float aspectRatio){  rect.bottom=rect.top + rect.width() / aspectRatio;}  }
class C{  public void addVMArguments(String vmArgumentName,String vmArgumentValue){  VmArgumentData vmArg=new VmArgumentData(vmArgumentName,vmArgumentValue);  vmSet.add(vmArg);}  }
class C{  @Override public long longValue(){  return value;}  }
class C{  public void focusGained(FocusEvent e){  Component c=e.getComponent();  if (c instanceof JFormattedTextField) {    selectItLater(c);  }}  }
class C{  protected void addMapping(int hashIndex,int hashCode,Object key,Object value){  modCount++;  HashEntry entry=createEntry(data[hashIndex],hashCode,key,value);  addEntry(entry,hashIndex);  size++;  checkCapacity();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:26.769 -0500",hash_original_method="DD66491EA6460453E572207637EFB169",hash_generated_method="062AAD138D06DA94B37AC05F436D3022") @SuppressWarnings("deprecation") @Deprecated public final void resume(){synchronized (threadRefs) {    for (    Thread thread : threads) {      thread.resume();    }  }synchronized (groups) {    for (    ThreadGroup group : groups) {      group.resume();    }  }}  }
class C{  public static boolean testRayTriangleFront(Vector3fc origin,Vector3fc dir,Vector3fc v0,Vector3fc v1,Vector3fc v2,float epsilon){  return testRayTriangleFront(origin.x(),origin.y(),origin.z(),dir.x(),dir.y(),dir.z(),v0.x(),v0.y(),v0.z(),v1.x(),v1.y(),v1.z(),v2.x(),v2.y(),v2.z(),epsilon);}  }
class C{  public RandomSequence(Collection steps,boolean shouldSynchronize){  super(steps);  this.shouldSynchronize=shouldSynchronize;}  }
class C{  private String removeIllegalFilenameCharacters(String input){  return input.replaceAll("[^a-zA-Z0-9.-]","_");}  }
class C{  public void toStream(DataOutputStream stream) throws IOException {  stream.writeByte(flags);  stream.writeDouble(latitude);  stream.writeDouble(longitude);  stream.writeDouble(altitude);  stream.writeLong(time);}  }
class C{  public static CircuitBreakerConfig ofDefaults(){  return new Builder().build();}  }
class C{  public ActiveDefinition_ createActiveDefinition_(){  ActiveDefinition_Impl activeDefinition_=new ActiveDefinition_Impl();  return activeDefinition_;}  }
class C{  public void startElement(StylesheetHandler handler,String uri,String localName,String rawName,Attributes attributes) throws org.xml.sax.SAXException {  DecimalFormatProperties dfp=new DecimalFormatProperties(handler.nextUid());  dfp.setDOMBackPointer(handler.getOriginatingNode());  dfp.setLocaterInfo(handler.getLocator());  setPropertiesFromAttributes(handler,rawName,attributes,dfp);  handler.getStylesheet().setDecimalFormat(dfp);  handler.getStylesheet().appendChild(dfp);}  }
class C{  private void restoreDynamicAdd(FacesContext context,Map<String,Object> state,ComponentStruct struct){  if (LOGGER.isLoggable(Level.FINEST)) {    LOGGER.finest("FaceletFullStateManagementStrategy.restoreDynamicAdd");  }  UIComponent parent=locateComponentByClientId(context,context.getViewRoot(),struct.parentClientId);  if (parent != null) {    UIComponent child=locateComponentByClientId(context,parent,struct.clientId);    if (child != null) {      if (struct.facetName == null) {        parent.getChildren().remove(child);      } else {        parent.getFacets().remove(struct.facetName);      }    }    if (child == null) {      StateHolderSaver saver=(StateHolderSaver)state.get(struct.clientId);      if (saver != null) {        child=(UIComponent)saver.restore(context);      }    }    StateContext stateContext=StateContext.getStateContext(context);    if (child == null) {      child=stateContext.getDynamicComponents().get(struct.clientId);    }    if (child != null) {      if (struct.facetName != null) {        parent.getFacets().put(struct.facetName,child);      } else {        int childIndex=-1;        if (child.getAttributes().containsKey(DYNAMIC_COMPONENT)) {          childIndex=(Integer)child.getAttributes().get(DYNAMIC_COMPONENT);        }        child.setId(struct.id);        if (childIndex >= parent.getChildCount() || childIndex == -1) {          parent.getChildren().add(child);        } else {          parent.getChildren().add(childIndex,child);        }        child.getClientId();      }      child.getAttributes().put(DYNAMIC_COMPONENT,child.getParent().getChildren().indexOf(child));      stateContext.getDynamicComponents().put(struct.clientId,child);    }  }}  }
class C{  public void addSeriesRenderer(int index,SimpleSeriesRenderer renderer){  mRenderers.add(index,renderer);}  }
class C{  public boolean endAnimation(){  return AnimatorUtil.end(mAnimators);}  }
class C{  public boolean isSetPriority(){  return EncodingUtils.testBit(issetBitfield,PRIORITY_ISSET_ID);}  }
class C{  public static boolean compatibleArguments(Literal arg1,Literal arg2){  boolean arg1Language=Literals.isLanguageLiteral(arg1);  boolean arg2Language=Literals.isLanguageLiteral(arg2);  boolean arg1Simple=isSimpleLiteral(arg1);  boolean arg2Simple=isSimpleLiteral(arg2);  boolean compatible=(arg1Simple && arg2Simple) || (arg1Language && arg2Language && arg1.getLanguage().equals(arg2.getLanguage())) || (arg1Language && arg2Simple);  return compatible;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.EXPORT_SPECIFIER__ELEMENT:    return basicSetElement(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public void visitAttribute(Attribute attr){  if (mv != null) {    mv.visitAttribute(attr);  }}  }
class C{  public Iterable<TMember> owned(){  return members(OWNED);}  }
class C{  public String post(Context context,String url,Header[] headers,HttpEntity entity,String contentType) throws HttpException {  HttpEntityEnclosingRequestBase request=addEntityToRequestBase(new HttpPost(url),entity);  if (headers != null)   request.setHeaders(headers);  return sendRequest(httpClient,httpContext,request,contentType,context);}  }
class C{  public static int hashCode(int[] field){  return field == null || field.length == 0 ? 0 : Arrays.hashCode(field);}  }
class C{  DominatorTreeNode(BasicBlock block){  this.block=block;}  }
class C{  public Builder summary(String summary){  this.summary=checkNotNull(summary);  return this;}  }
class C{  public void testDeployWar() throws Exception {  WebSphere85xInstalledLocalDeployerWithNoWsAdminExecution deployer=new WebSphere85xInstalledLocalDeployerWithNoWsAdminExecution();  WAR war=new WAR("target/test-artifacts/simple-war.war");  deployer.deploy(war);  assertContains(deployer.getCommands(),"'-appname','simple-war'");  assertContains(deployer.getCommands(),"'-contextroot','simple-war'");}  }
class C{  public void sendLocoNetMessage(LocoNetMessage m){  log.debug("add to queue message " + m);  transmittedMsgCount++;  m.setParity();  int len=m.getNumDataElements();  byte msg[]=new byte[len];  for (int i=0; i < len; i++) {    msg[i]=(byte)m.getElement(i);  }  if (log.isDebugEnabled()) {    log.debug("queue LocoNet packet: {}",m.toString());  }  try {synchronized (xmtHandler) {      xmtLocoNetList.addLast(m);      xmtList.addLast(msg);      xmtHandler.notify();    }  } catch (  Exception e) {    log.warn("passing to xmit: unexpected exception: " + e);  }}  }
class C{  public static long toLong(byte a,byte b,byte c,byte d,byte e,byte f,byte g,byte h){  return (((long)a & BYTE_MASK) << (BYTE_SIZE * 7)) | (((long)b & BYTE_MASK) << (BYTE_SIZE * 6)) | (((long)c & BYTE_MASK) << (BYTE_SIZE * 5))| (((long)d & BYTE_MASK) << (BYTE_SIZE * 4))| ((long)e << (BYTE_SIZE * 3))| (((long)f & BYTE_MASK) << (BYTE_SIZE * 2))| (((long)g & BYTE_MASK) << BYTE_SIZE)| ((long)h & BYTE_MASK);}  }
class C{  public DeleteResponseMessage(DeleteResponseMessage other){  __isset_bitfield=other.__isset_bitfield;  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }  this.deleted=other.deleted;}  }
class C{  public void calculateLogLikelihoods(double[] partials,double[] frequencies,double[] outLogLikelihoods){  int v=0;  for (int k=0; k < patternCount; k++) {    double sum=frequencies[0] * partials[v];    v++;    sum+=frequencies[1] * partials[v];    v++;    sum+=frequencies[2] * partials[v];    v++;    sum+=frequencies[3] * partials[v];    v++;    sum+=frequencies[4] * partials[v];    v++;    sum+=frequencies[5] * partials[v];    v++;    sum+=frequencies[6] * partials[v];    v++;    sum+=frequencies[7] * partials[v];    v++;    sum+=frequencies[8] * partials[v];    v++;    sum+=frequencies[9] * partials[v];    v++;    sum+=frequencies[10] * partials[v];    v++;    sum+=frequencies[11] * partials[v];    v++;    sum+=frequencies[12] * partials[v];    v++;    sum+=frequencies[13] * partials[v];    v++;    sum+=frequencies[14] * partials[v];    v++;    sum+=frequencies[15] * partials[v];    v++;    sum+=frequencies[16] * partials[v];    v++;    sum+=frequencies[17] * partials[v];    v++;    sum+=frequencies[18] * partials[v];    v++;    sum+=frequencies[19] * partials[v];    v++;    outLogLikelihoods[k]=Math.log(sum) + getLogScalingFactor(k);  }}  }
class C{  private void addLine(int AD_Column_ID,Timestamp Updated,int UpdatedBy,String OldValue,String NewValue){  Vector<String> line=new Vector<String>();  MColumn column=MColumn.get(Env.getCtx(),AD_Column_ID);  if (OldValue != null && OldValue.equals(MChangeLog.NULL))   OldValue=null;  String showOldValue=OldValue;  if (NewValue != null && NewValue.equals(MChangeLog.NULL))   NewValue=null;  String showNewValue=NewValue;  try {    if (DisplayType.isText(column.getAD_Reference_ID()))     ; else     if (column.getAD_Reference_ID() == DisplayType.YesNo) {      if (OldValue != null) {        boolean yes=OldValue.equals("true") || OldValue.equals("Y");        showOldValue=Msg.getMsg(Env.getCtx(),yes ? "Y" : "N");      }      if (NewValue != null) {        boolean yes=NewValue.equals("true") || NewValue.equals("Y");        showNewValue=Msg.getMsg(Env.getCtx(),yes ? "Y" : "N");      }    } else     if (column.getAD_Reference_ID() == DisplayType.Amount) {      if (OldValue != null)       showOldValue=m_amtFormat.format(new BigDecimal(OldValue));      if (NewValue != null)       showNewValue=m_amtFormat.format(new BigDecimal(NewValue));    } else     if (column.getAD_Reference_ID() == DisplayType.Integer) {      if (OldValue != null)       showOldValue=m_intFormat.format(new Integer(OldValue));      if (NewValue != null)       showNewValue=m_intFormat.format(new Integer(NewValue));    } else     if (DisplayType.isNumeric(column.getAD_Reference_ID())) {      if (OldValue != null)       showOldValue=m_numberFormat.format(new BigDecimal(OldValue));      if (NewValue != null)       showNewValue=m_numberFormat.format(new BigDecimal(NewValue));    } else     if (column.getAD_Reference_ID() == DisplayType.Date) {      if (OldValue != null)       showOldValue=m_dateFormat.format(Timestamp.valueOf(OldValue));      if (NewValue != null)       showNewValue=m_dateFormat.format(Timestamp.valueOf(NewValue));    } else     if (column.getAD_Reference_ID() == DisplayType.DateTime) {      if (OldValue != null)       showOldValue=m_dateTimeFormat.format(Timestamp.valueOf(OldValue));      if (NewValue != null)       showNewValue=m_dateTimeFormat.format(Timestamp.valueOf(NewValue));    } else     if (DisplayType.isLookup(column.getAD_Reference_ID())) {      MLookup lookup=MLookupFactory.get(Env.getCtx(),0,AD_Column_ID,column.getAD_Reference_ID(),Env.getLanguage(Env.getCtx()),column.getColumnName(),column.getAD_Reference_Value_ID(),column.isParent(),null);      if (OldValue != null) {        Object key=OldValue;        NamePair pp=lookup.get(key);        if (pp != null)         showOldValue=pp.getName();      }      if (NewValue != null) {        Object key=NewValue;        NamePair pp=lookup.get(key);        if (pp != null)         showNewValue=pp.getName();      }    } else     if (DisplayType.isLOB(column.getAD_Reference_ID()))     ;  } catch (  Exception e) {    log.log(Level.WARNING,OldValue + "->" + NewValue,e);  }  line.add(showNewValue);  line.add(showOldValue);  MUser user=MUser.get(Env.getCtx(),UpdatedBy);  line.add(user.getName());  line.add(m_dateFormat.format(Updated));  m_data.add(line);}  }
class C{  private void upRotate(){  if (mListener != null) {    mListener.upRotate();  }}  }
class C{  public void makeBucket(String bucketName) throws InvalidBucketNameException, NoSuchAlgorithmException, InsufficientDataException, IOException, InvalidKeyException, NoResponseException, XmlPullParserException, ErrorResponseException, InternalException {  this.makeBucket(bucketName,null);}  }
class C{  public static SimpleString readBodyText(ActiveMQBuffer buff){  buff.resetReaderIndex();  return buff.readNullableSimpleString();}  }
class C{  public static final double[] plus(final double[] v1,final double[] v2){  assert (v1.length == v2.length) : ERR_VEC_DIMENSIONS;  final double[] result=new double[v1.length];  for (int i=0; i < result.length; i++) {    result[i]=v1[i] + v2[i];  }  return result;}  }
class C{  private void closeDestination(State state){  try {    if (state.mStream != null) {      state.mStream.close();      state.mStream=null;    }  } catch (  IOException ex) {    if (Constants.LOGV) {      Log.v(Constants.TAG,"exception when closing the file after download : " + ex);    }  }}  }
class C{  protected synchronized void clear(){  m_TextArea.setText("");}  }
class C{  public boolean isInBitmapMemoryCache(final ImageRequest imageRequest){  if (imageRequest == null) {    return false;  }  final CacheKey cacheKey=mCacheKeyFactory.getBitmapCacheKey(imageRequest,null);  CloseableReference<CloseableImage> ref=mBitmapMemoryCache.get(cacheKey);  try {    return CloseableReference.isValid(ref);  }  finally {    CloseableReference.closeSafely(ref);  }}  }
class C{  protected TinkerGraph.DefaultIdManager selectIdMakerFromTest(final Class<?> test,final String testMethodName){  if (test.equals(GraphTest.class)) {    final Set<String> testsThatNeedLongIdManager=new HashSet<String>(){{        add("shouldIterateVerticesWithNumericIdSupportUsingDoubleRepresentation");        add("shouldIterateVerticesWithNumericIdSupportUsingDoubleRepresentations");        add("shouldIterateVerticesWithNumericIdSupportUsingIntegerRepresentation");        add("shouldIterateVerticesWithNumericIdSupportUsingIntegerRepresentations");        add("shouldIterateVerticesWithNumericIdSupportUsingFloatRepresentation");        add("shouldIterateVerticesWithNumericIdSupportUsingFloatRepresentations");        add("shouldIterateVerticesWithNumericIdSupportUsingStringRepresentation");        add("shouldIterateVerticesWithNumericIdSupportUsingStringRepresentations");        add("shouldIterateEdgesWithNumericIdSupportUsingDoubleRepresentation");        add("shouldIterateEdgesWithNumericIdSupportUsingDoubleRepresentations");        add("shouldIterateEdgesWithNumericIdSupportUsingIntegerRepresentation");        add("shouldIterateEdgesWithNumericIdSupportUsingIntegerRepresentations");        add("shouldIterateEdgesWithNumericIdSupportUsingFloatRepresentation");        add("shouldIterateEdgesWithNumericIdSupportUsingFloatRepresentations");        add("shouldIterateEdgesWithNumericIdSupportUsingStringRepresentation");        add("shouldIterateEdgesWithNumericIdSupportUsingStringRepresentations");      }    };    final Set<String> testsThatNeedUuidIdManager=new HashSet<String>(){{        add("shouldIterateVerticesWithUuidIdSupportUsingStringRepresentation");        add("shouldIterateVerticesWithUuidIdSupportUsingStringRepresentations");        add("shouldIterateEdgesWithUuidIdSupportUsingStringRepresentation");        add("shouldIterateEdgesWithUuidIdSupportUsingStringRepresentations");      }    };    if (testsThatNeedLongIdManager.contains(testMethodName))     return TinkerGraph.DefaultIdManager.LONG; else     if (testsThatNeedUuidIdManager.contains(testMethodName))     return TinkerGraph.DefaultIdManager.UUID;  } else   if (test.equals(IoEdgeTest.class)) {    final Set<String> testsThatNeedLongIdManager=new HashSet<String>(){{        add("shouldReadWriteEdge[graphson-v1]");        add("shouldReadWriteDetachedEdgeAsReference[graphson-v1]");        add("shouldReadWriteDetachedEdge[graphson-v1]");        add("shouldReadWriteEdge[graphson-v2]");        add("shouldReadWriteDetachedEdgeAsReference[graphson-v2]");        add("shouldReadWriteDetachedEdge[graphson-v2]");      }    };    if (testsThatNeedLongIdManager.contains(testMethodName))     return TinkerGraph.DefaultIdManager.LONG;  } else   if (test.equals(IoVertexTest.class)) {    final Set<String> testsThatNeedLongIdManager=new HashSet<String>(){{        add("shouldReadWriteVertexWithBOTHEdges[graphson-v1]");        add("shouldReadWriteVertexWithINEdges[graphson-v1]");        add("shouldReadWriteVertexWithOUTEdges[graphson-v1]");        add("shouldReadWriteVertexNoEdges[graphson-v1]");        add("shouldReadWriteDetachedVertexNoEdges[graphson-v1]");        add("shouldReadWriteDetachedVertexAsReferenceNoEdges[graphson-v1]");        add("shouldReadWriteVertexMultiPropsNoEdges[graphson-v1]");        add("shouldReadWriteVertexWithBOTHEdges[graphson-v2]");        add("shouldReadWriteVertexWithINEdges[graphson-v2]");        add("shouldReadWriteVertexWithOUTEdges[graphson-v2]");        add("shouldReadWriteVertexNoEdges[graphson-v2]");        add("shouldReadWriteDetachedVertexNoEdges[graphson-v2]");        add("shouldReadWriteDetachedVertexAsReferenceNoEdges[graphson-v2]");        add("shouldReadWriteVertexMultiPropsNoEdges[graphson-v2]");      }    };    if (testsThatNeedLongIdManager.contains(testMethodName))     return TinkerGraph.DefaultIdManager.LONG;  }  return TinkerGraph.DefaultIdManager.ANY;}  }
class C{  void init(boolean decrypting,String algorithm,byte[] key,byte[] iv) throws InvalidKeyException {  init(decrypting,algorithm,key,iv,DEFAULT_TAG_LEN);}  }
class C{  private boolean includePasswordDetails(String username){  if (getSecurityContext() == null) {    return false;  }  return getSecurityContext().isUserInRole(Role.ADMINISTRATOR.toString()) || getSecurityContext().getUserPrincipal().getName().equals(username);}  }
class C{  protected void rehash(int newCapacity){  int oldCapacity=table.length;  int oldTable[]=table;  Object oldValues[]=values;  byte oldState[]=state;  int newTable[]=new int[newCapacity];  Object newValues[]=new Object[newCapacity];  byte newState[]=new byte[newCapacity];  this.lowWaterMark=chooseLowWaterMark(newCapacity,this.minLoadFactor);  this.highWaterMark=chooseHighWaterMark(newCapacity,this.maxLoadFactor);  this.table=newTable;  this.values=newValues;  this.state=newState;  this.freeEntries=newCapacity - this.distinct;  for (int i=oldCapacity; i-- > 0; ) {    if (oldState[i] == FULL) {      int element=oldTable[i];      int index=indexOfInsertion(element);      newTable[index]=element;      newValues[index]=oldValues[i];      newState[index]=FULL;    }  }}  }
class C{  public Map<String,Object> updateMetadata(String id,Map<String,Object> metadata){  metadata=new HashMap<String,Object>(metadata);  metadata.put(FileMetadataSchema.ID,id);  metadata.remove(FileMetadataSchema.VERSION);  return getFileMetadataIndex().write(metadataSchema,metadata,AUTO_TIMESTAMP_UNIQUE,null,null).asMap();}  }
class C{  public void testAddressHostOnly() throws Exception {  check(new OdbcConfiguration().setEndpointAddress("127.0.0.1"),true);}  }
class C{  @Override public void recordSetEvent(String aspect,String eventName){  send(messageFor(aspect,eventName,"s"));}  }
class C{  public static <K,V>Map<K,V> reverseEach(Map<K,V> self,@ClosureParams(MapEntryOrKeyValue.class) Closure closure){  final Iterator<Map.Entry<K,V>> entries=reverse(self.entrySet().iterator());  while (entries.hasNext()) {    callClosureForMapEntry(closure,entries.next());  }  return self;}  }
class C{  private KeyInfo createKeyInfo(SignInfo signInfo){  List<? extends Certificate> stsCertificates=signInfo.getCertificationPath().getCertificates();  XMLSignatureFactory factory=XMLSignatureFactory.getInstance();  KeyInfoFactory keyInfoFactory=factory.getKeyInfoFactory();  X509Data certificatesData=keyInfoFactory.newX509Data(stsCertificates);  log.debug("Created KeyInfo section from certificates: {}",stsCertificates);  return keyInfoFactory.newKeyInfo(Collections.singletonList(certificatesData));}  }
class C{  public ExecuteResults(int updateCount,RowCursor generatedKeys){  this.updateCount=updateCount;  this.cursor=generatedKeys;}  }
class C{  public LinkedList<Dependency> findCycle(){  Set<Object> unvisited=new HashSet<Object>(vertices.keySet());  Set<Object> finished=new HashSet<Object>(vertices.size());  while (unvisited.size() > 0) {    Object start=unvisited.iterator().next();    CycleHolder cycle=new CycleHolder();    boolean foundCycle=visitCycle(start,unvisited,finished,cycle,0);    if (foundCycle) {      return cycle.cycle;    }  }  return null;}  }
class C{  @Override public boolean isValid(){  return theSolid != null && theFluid != null && theGas != null;}  }
class C{  public static boolean write(String filename,Object o) throws Exception {  return write(new File(filename),o);}  }
class C{  public static boolean equals(boolean[] field1,boolean[] field2){  if (field1 == null || field1.length == 0) {    return field2 == null || field2.length == 0;  } else {    return Arrays.equals(field1,field2);  }}  }
class C{  public final AlertDialog shareText(CharSequence text,CharSequence type){  Intent intent=new Intent();  intent.addCategory(Intent.CATEGORY_DEFAULT);  intent.setAction(BS_PACKAGE + ".ENCODE");  intent.putExtra("ENCODE_TYPE",type);  intent.putExtra("ENCODE_DATA",text);  String targetAppPackage=findTargetAppPackage(intent);  if (targetAppPackage == null) {    return showDownloadDialog();  }  intent.setPackage(targetAppPackage);  intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);  attachMoreExtras(intent);  if (fragment == null) {    activity.startActivity(intent);  } else {    fragment.startActivity(intent);  }  return null;}  }
class C{  public VNXeCommandJob attachLunGroupSnap(String snapId){  _logger.info("attaching lun group snap:",snapId);  LunGroupSnapRequests req=new LunGroupSnapRequests(_khClient);  return req.attachLunGroupSnap(snapId);}  }
class C{  public boolean isNumeric(){  return Number.class.isAssignableFrom(getType());}  }
class C{  public void loadIdentity(){  m01=m02=m10=m12=m20=m21=0;  m00=m11=m22=1;}  }
class C{  private void populateOperations(AWSComputeServiceCreationContext context,AWSComputeStateCreationStage next){  if (context.computeState.instancesToBeCreated == null || context.computeState.instancesToBeCreated.size() == 0) {    logInfo("No instances need to be created in the local system");  } else {    logInfo("Need to create %d compute states in the local system",context.computeState.instancesToBeCreated.size());    for (int i=0; i < context.computeState.instancesToBeCreated.size(); i++) {      populateComputeStateAndNetworksForCreation(context,context.computeState.instancesToBeCreated.get(i));    }  }  if (context.computeState.instancesToBeUpdated == null || context.computeState.instancesToBeUpdated.size() == 0) {    logInfo("No instances need to be updated in the local system");  } else {    logInfo("Need to update %d compute states in the local system",context.computeState.instancesToBeUpdated.size());    for (    String instanceId : context.computeState.instancesToBeUpdated.keySet()) {      populateComputeStateAndNetworksForUpdates(context,context.computeState.instancesToBeUpdated.get(instanceId),context.computeState.computeStatesToBeUpdated.get(instanceId));    }  }  context.creationStage=next;  handleComputeStateCreateOrUpdate(context);}  }
class C{  public static void delete(final byte[] hash) throws IOException {  responseHeaderDB.delete(hash);  fileDB.delete(hash);}  }
class C{  public IconFactory(Resources resources,Bitmap background){  this.resources=resources;  mTextPaint=new Paint();  mTextPaint.setColor(Color.WHITE);  mTextPaint.setTextSize(15.0f);  mTextPaint.setFakeBoldText(true);  mTextPaint.setTextAlign(Paint.Align.CENTER);  mTextPaint.setAntiAlias(true);  mBackground=background;}  }
class C{  public synchronized void close(){  this.cache.clear();  if (this.blob != null)   this.blob.close(true);}  }
class C{  public void lostOwnership(Clipboard clipboard,Transferable contents){}  }
class C{  public static String replaceOnce(String text,String repl,String with){  return replace(text,repl,with,1);}  }
class C{  private void jbInit() throws Exception {  CompiereColor.setBackground(panel);  paymentTable.setMultiSelection(true);  invoiceTable.setMultiSelection(true);  invoiceTable.setSurrendersFocusOnKeystroke(true);  mainPanel.setLayout(mainLayout);  dateLabel.setText(Msg.getMsg(Env.getCtx(),"Date"));  dateLabel.setToolTipText(Msg.getMsg(Env.getCtx(),"AllocDate",false));  autoWriteOff.setSelected(false);  autoWriteOff.setText(Msg.getMsg(Env.getCtx(),"AutoWriteOff",true));  autoWriteOff.setToolTipText(Msg.getMsg(Env.getCtx(),"AutoWriteOff",false));  parameterPanel.setLayout(parameterLayout);  allocationPanel.setLayout(allocationLayout);  bpartnerLabel.setText(Msg.translate(Env.getCtx(),"C_BPartner_ID"));  paymentLabel.setRequestFocusEnabled(false);  paymentLabel.setText(" " + Msg.translate(Env.getCtx(),"C_Payment_ID"));  invoiceLabel.setRequestFocusEnabled(false);  invoiceLabel.setText(" " + Msg.translate(Env.getCtx(),"C_Invoice_ID"));  paymentPanel.setLayout(paymentLayout);  invoicePanel.setLayout(invoiceLayout);  invoiceInfo.setHorizontalAlignment(SwingConstants.RIGHT);  invoiceInfo.setHorizontalTextPosition(SwingConstants.RIGHT);  invoiceInfo.setText(".");  paymentInfo.setHorizontalAlignment(SwingConstants.RIGHT);  paymentInfo.setHorizontalTextPosition(SwingConstants.RIGHT);  paymentInfo.setText(".");  chargeLabel.setText(Msg.translate(Env.getCtx(),"C_Charge_ID"));  chargeLabel.setToolTipText(Msg.getMsg(Env.getCtx(),"ChargeDifference",false));  differenceLabel.setText(Msg.getMsg(Env.getCtx(),"Difference"));  differenceField.setBackground(AdempierePLAF.getFieldBackground_Inactive());  differenceField.setEditable(false);  differenceField.setText("0");  differenceField.setColumns(8);  differenceField.setHorizontalAlignment(SwingConstants.RIGHT);  allocateButton.setText(Msg.getMsg(Env.getCtx(),"Process"));  allocateButton.addActionListener(this);  currencyLabel.setText(Msg.translate(Env.getCtx(),"C_Currency_ID"));  multiCurrency.setText(Msg.getMsg(Env.getCtx(),"MultiCurrency"));  multiCurrency.addActionListener(this);  allocCurrencyLabel.setText(".");  invoiceScrollPane.setPreferredSize(new Dimension(200,200));  paymentScrollPane.setPreferredSize(new Dimension(200,200));  mainPanel.add(parameterPanel,BorderLayout.NORTH);  organizationLabel.setText(Msg.translate(Env.getCtx(),"AD_Org_ID"));  parameterPanel.add(organizationLabel,new GridBagConstraints(4,0,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  parameterPanel.add(organizationPick,new GridBagConstraints(5,0,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  parameterPanel.add(bpartnerLabel,new GridBagConstraints(0,0,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  parameterPanel.add(bpartnerSearch,new GridBagConstraints(1,0,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,0,5,5),0,0));  parameterPanel.add(dateLabel,new GridBagConstraints(2,0,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  parameterPanel.add(dateField,new GridBagConstraints(3,0,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,0,5,5),0,0));  parameterPanel.add(currencyLabel,new GridBagConstraints(0,1,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  parameterPanel.add(currencyPick,new GridBagConstraints(1,1,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,0,5,5),0,0));  parameterPanel.add(multiCurrency,new GridBagConstraints(3,1,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,0,5,5),0,0));  parameterPanel.add(autoWriteOff,new GridBagConstraints(1,2,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  mainPanel.add(allocationPanel,BorderLayout.SOUTH);  allocationPanel.add(differenceLabel,new GridBagConstraints(0,0,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,5,5,0),0,0));  allocationPanel.add(differenceField,new GridBagConstraints(2,0,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,0,5,5),0,0));  allocationPanel.add(chargePick,new GridBagConstraints(4,0,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  allocationPanel.add(allocCurrencyLabel,new GridBagConstraints(1,0,1,1,0.0,0.0,GridBagConstraints.CENTER,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  allocationPanel.add(allocateButton,new GridBagConstraints(5,0,1,1,0.0,0.0,GridBagConstraints.CENTER,GridBagConstraints.NONE,new Insets(5,0,5,5),0,0));  allocationPanel.add(chargeLabel,new GridBagConstraints(3,0,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  paymentPanel.add(paymentLabel,BorderLayout.NORTH);  paymentPanel.add(paymentInfo,BorderLayout.SOUTH);  paymentPanel.add(paymentScrollPane,BorderLayout.CENTER);  paymentScrollPane.getViewport().add(paymentTable,null);  invoicePanel.add(invoiceLabel,BorderLayout.NORTH);  invoicePanel.add(invoiceInfo,BorderLayout.SOUTH);  invoicePanel.add(invoiceScrollPane,BorderLayout.CENTER);  invoiceScrollPane.getViewport().add(invoiceTable,null);  mainPanel.add(infoPanel,BorderLayout.CENTER);  infoPanel.setOrientation(JSplitPane.VERTICAL_SPLIT);  infoPanel.setBorder(BorderFactory.createEtchedBorder());  infoPanel.setTopComponent(paymentPanel);  infoPanel.setBottomComponent(invoicePanel);  infoPanel.add(paymentPanel,JSplitPane.TOP);  infoPanel.add(invoicePanel,JSplitPane.BOTTOM);  infoPanel.setContinuousLayout(true);  infoPanel.setPreferredSize(new Dimension(800,250));  infoPanel.setDividerLocation(110);}  }
class C{  public void onDraw(final Canvas canvas){  mPaint.setColor(0xC0000000);  mTextRect.set(0,0,mView.getWidth(),35);  canvas.drawRect(mTextRect,mPaint);  mPaint.setColor(Color.WHITE);  canvas.drawText("[" + mTag + "]",10,15,mPaint);  String message="Not started";switch (mState) {case STARTED:    message="Loading...";  break;case SUCCESS:message="Loaded after " + (mFinishTime - mStartTime) + "ms";break;case FAILURE:message="Failed after " + (mFinishTime - mStartTime) + "ms";break;case CANCELLATION:message="Cancelled after " + (mFinishTime - mStartTime) + "ms";break;}canvas.drawText(message,10,30,mPaint);}  }
class C{  public void testWriteSimplePropertyValue() throws Exception {  String json=MAPPER.writeValueAsString(new Pojo("Foobar",42,13,true));  assertEquals("{\"value\":[true,\"Foobar\",42,13]}",json);}  }
class C{  public TypeVisibility(boolean visibility,String suggestion){  this.visibility=visibility;  this.accessModifierSuggestion=suggestion;}  }
class C{  public void addToPass(DetectorFactory factory){  this.memberSet.add(factory);}  }
class C{  public static void selectInEditor(ITextEditor editor,int offset,int length){  IEditorPart active=getActiveEditor();  if (active != editor) {    editor.getSite().getPage().activate(editor);  }  editor.selectAndReveal(offset,length);}  }
class C{  @ServiceActivator(inputChannel=ERROR_CHANNEL_ID) public void handle(String telegram){  if (LOGGER.isInfoEnabled()) {    LOGGER.info("Invalid telegram : " + telegram);  }}  }
class C{  private void paintBorder(Graphics g,JComponent c){  int w=c.getWidth();  int h=c.getHeight();  if (w <= 0 || h <= 0) {    return;  }  Graphics2D g2=(Graphics2D)g;  g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);  boolean hasFocus=comboBox.isEditable() ? c.isFocusOwner() || ((JComboBox)c).getEditor().getEditorComponent().isFocusOwner() : c.isFocusOwner();  if (c.isEnabled()) {    if (hasFocus) {      g2.setColor(Colors.COMBOBOX_BORDER_FOCUS);    } else {      g2.setColor(Colors.COMBOBOX_BORDER);    }  } else {    g2.setColor(Colors.COMBOBOX_BORDER_DISABLED);  }  g2.drawRoundRect(0,0,w - 1,h - 1,RapidLookAndFeel.CORNER_DEFAULT_RADIUS,RapidLookAndFeel.CORNER_DEFAULT_RADIUS);}  }
class C{  public String encodedQuery(){  if (queryNamesAndValues == null)   return null;  int queryStart=url.indexOf('?') + 1;  int queryEnd=delimiterOffset(url,queryStart + 1,url.length(),"#");  return url.substring(queryStart,queryEnd);}  }
class C{  private static int decode4to3(byte[] source,int srcOffset,byte[] destination,int destOffset,byte[] decodabet){  if (source[srcOffset + 2] == EQUALS_SIGN) {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);    destination[destOffset]=(byte)(outBuff >>> 16);    return 1;  } else   if (source[srcOffset + 3] == EQUALS_SIGN) {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12) | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);    destination[destOffset]=(byte)(outBuff >>> 16);    destination[destOffset + 1]=(byte)(outBuff >>> 8);    return 2;  } else {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12) | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)| ((decodabet[source[srcOffset + 3]] << 24) >>> 24);    destination[destOffset]=(byte)(outBuff >> 16);    destination[destOffset + 1]=(byte)(outBuff >> 8);    destination[destOffset + 2]=(byte)(outBuff);    return 3;  }}  }
class C{  public void verify(PublicKey publicKey,int responseCode,String signedData,String signature){  String userId=null;  ResponseData data=null;  if (responseCode == LICENSED || responseCode == NOT_LICENSED || responseCode == LICENSED_OLD_KEY) {    try {      Signature sig=Signature.getInstance(SIGNATURE_ALGORITHM);      sig.initVerify(publicKey);      sig.update(signedData.getBytes());      if (!sig.verify(Base64.decode(signature))) {        Log.e(TAG,"Signature verification failed.");        handleInvalidResponse();        return;      }    } catch (    Base64DecoderException e) {      Log.e(TAG,"Could not Base64-decode signature.");      handleInvalidResponse();      return;    }catch (    Exception e) {      throw new RuntimeException(e);    }    try {      data=ResponseData.parse(signedData);    } catch (    IllegalArgumentException e) {      Log.e(TAG,"Could not parse response.");      handleInvalidResponse();      return;    }    if (data.responseCode != responseCode) {      Log.e(TAG,"Response codes don't match.");      handleInvalidResponse();      return;    }    if (data.nonce != mNonce) {      Log.e(TAG,"Nonce doesn't match.");      handleInvalidResponse();      return;    }    if (!data.packageName.equals(mPackageName)) {      Log.e(TAG,"Package name doesn't match.");      handleInvalidResponse();      return;    }    if (!data.versionCode.equals(mVersionCode)) {      Log.e(TAG,"Version codes don't match.");      handleInvalidResponse();      return;    }    userId=data.userId;    if (TextUtils.isEmpty(userId)) {      Log.e(TAG,"User identifier is empty.");      handleInvalidResponse();      return;    }  }switch (RANDOM ^ ~responseCode) {case RANDOM ^ ~LICENSED:case RANDOM ^ ~LICENSED_OLD_KEY:    int limiterResponse=mDeviceLimiter.isDeviceAllowed(userId);  handleResponse(limiterResponse,data);break;case RANDOM ^ ~NOT_LICENSED:handleResponse(Policy.NOT_LICENSED,data);break;case RANDOM ^ ~ERROR_CONTACTING_SERVER:Log.w(TAG,"Error contacting licensing server.");handleResponse(Policy.RETRY,data);break;case RANDOM ^ ~ERROR_SERVER_FAILURE:Log.w(TAG,"An error has occurred on the licensing server.");handleResponse(Policy.RETRY,data);break;case RANDOM ^ ~ERROR_OVER_QUOTA:Log.w(TAG,"Licensing server is refusing to talk to this device, over quota.");handleResponse(Policy.RETRY,data);break;case RANDOM ^ ~ERROR_INVALID_PACKAGE_NAME:handleApplicationError(LicenseCheckerCallback.ERROR_INVALID_PACKAGE_NAME);break;case RANDOM ^ ~ERROR_NON_MATCHING_UID:handleApplicationError(LicenseCheckerCallback.ERROR_NON_MATCHING_UID);break;case RANDOM ^ ~ERROR_NOT_MARKET_MANAGED:handleApplicationError(LicenseCheckerCallback.ERROR_NOT_MARKET_MANAGED);break;default :Log.e(TAG,"Unknown response code for license check.");handleInvalidResponse();}}  }
class C{  public String toString(){  return "#" + getValue();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public RelationWrapper(final Relation relation){  this.relation=relation;}  }
class C{  public int entryBufferSize(){  return entryBufferSize;}  }
class C{  @Override public IKnowledge copy(){  return new Knowledge2(this);}  }
class C{  protected void readExtras(@NonNull Bundle bundle){}  }
class C{  public void removeAttributes(AttributeSet attr){  Enumeration names=attr.getAttributeNames();  while (names.hasMoreElements()) {    Object name=names.nextElement();    Object value=attr.getAttribute(name);    removeSearchAttribute(name,value);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public RootConnectionGroup(){}  }
class C{  public boolean freeCareful(T value){  if (checkDuplicate(value)) {    throw new IllegalStateException("tried to free object twice: " + value);  }  return free(value);}  }
class C{  final public boolean startsWith(final MutableString prefix){  final int l=prefix.length();  if (l > length())   return false;  int i=l;  final char[] a1=prefix.array;  final char[] a2=array;  while (i-- != 0)   if (a1[i] != a2[i])   return false;  return true;}  }
class C{  public String encode(final Resource v){  checkLive();  return m_om.encode(v);}  }
class C{  public boolean position(long pos) throws IOException {  if (pos < 0) {    return false;  }  long delta=pos - position();  long newOffset=_readOffset + delta;  if (newOffset >= 0 && newOffset < _readLength) {    _readOffset=(int)newOffset;    return true;  }  if (delta < 0) {    _position=pos;    _readLength=_readOffset=0;    if (_source != null) {      _source.seekStart(pos);      return true;    } else {      return false;    }  } else {    long n=pos - position();    return (skip(n) == n);  }}  }
class C{  public static ANRequest.MultiPartBuilder upload(String url){  return new ANRequest.MultiPartBuilder(url);}  }
class C{  public static ASTUpdateSequence parseUpdateSequence(final String sequence) throws TokenMgrError, ParseException {  final SyntaxTreeBuilder stb=new SyntaxTreeBuilder(new StringReader(sequence));  final ASTUpdateSequence seq=stb.UpdateSequence();  seq.setSourceString(sequence);  return seq;}  }
class C{  public DynamicIntArray(){  this(10);}  }
class C{  public boolean isEnabled(){  return true;}  }
class C{  public boolean isPosted(){  Object oo=get_Value(COLUMNNAME_Posted);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static double crossTrackDistanceDeg(double lat1,double lon1,double lat2,double lon2,double latQ,double lonQ){  return crossTrackDistanceRad(MathUtil.deg2rad(lat1),MathUtil.deg2rad(lon1),MathUtil.deg2rad(lat2),MathUtil.deg2rad(lon2),MathUtil.deg2rad(latQ),MathUtil.deg2rad(lonQ));}  }
class C{  public boolean visit(TypeLiteral node){  return true;}  }
class C{  public void put(String key,String value){  super.put(key,value);}  }
class C{  final void updateHead(Node<E> h,Node<E> p){  if (h != p && casHead(h,p))   h.lazySetNext(h);}  }
class C{  public static boolean isMagicLiteral(@NotNull final PsiElement element){  return (element instanceof StringLiteralExpression) && (getPoint((StringLiteralExpression)element) != null);}  }
class C{  public void transform(Source source) throws TransformerException {  transform(source,true);}  }
class C{  public boolean isPanelSelected(){  return (getCurrentPanel() != null);}  }
class C{  public SortableTableView(final Context context,final AttributeSet attributes,final int styleAttributes){  super(context,attributes,styleAttributes);  sortableTableHeaderView=new SortableTableHeaderView(context);  sortableTableHeaderView.setBackgroundColor(0xFFCCCCCC);  setHeaderView(sortableTableHeaderView);  sortingController=new SortingController();  sortableTableHeaderView.addHeaderClickListener(sortingController);}  }
class C{  private void readParagraphPropertiesElement(IXMLElement elem,HashMap<AttributeKey,Object> a) throws IOException {}  }
class C{  public ComponentView(Element elem){  super(elem);}  }
class C{  void usageError(){  error(getMsg("usage"));}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();}  }
class C{  private void createMainPanel(){  log.config(": " + m_product);  this.removeAll();  this.setPreferredSize(null);  this.invalidate();  this.setBorder(null);  m_selectionList.clear();  m_productList.clear();  m_qtyList.clear();  m_buttonGroups.clear();  this.setLayout(new ALayout());  String title=Msg.getMsg(Env.getCtx(),"SelectProduct");  if (m_product != null && m_product.get_ID() > 0) {    title=m_product.getName();    if (m_product.getDescription() != null && m_product.getDescription().length() > 0)     this.setToolTipText(m_product.getDescription());    m_bomLine=0;    addBOMLines(m_product,m_qty);  }  this.setBorder(new TitledBorder(title));}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:51.649 -0500",hash_original_method="4C14D29B81253845991BCF5FA05DF332",hash_generated_method="1335544A869314E10256A75BC226BC6C") private static boolean isOneNanp(String dialStr){  boolean retVal=false;  if (dialStr != null) {    String newDialStr=dialStr.substring(1);    if ((dialStr.charAt(0) == '1') && isNanp(newDialStr)) {      retVal=true;    }  } else {    Log.e("isOneNanp: null dialStr passed in",dialStr);  }  return retVal;}  }
class C{  public EcuDataItems(){  this("prot/obd/res/pids.csv","prot/obd/res/conversions.csv");}  }
class C{  private FileResult downloadXform(String formName,String url) throws Exception {  String rootName=formName.replaceAll("[^\\p{L}\\p{Digit}]"," ");  rootName=rootName.replaceAll("\\p{javaWhitespace}+"," ");  rootName=rootName.trim();  String path=Collect.FORMS_PATH + File.separator + rootName+ ".xml";  int i=2;  File f=new File(path);  while (f.exists()) {    path=Collect.FORMS_PATH + File.separator + rootName+ "_"+ i+ ".xml";    f=new File(path);    i++;  }  downloadFile(f,url);  boolean isNew=true;  String[] projection={FormsColumns.FORM_FILE_PATH};  String[] selectionArgs={FileUtils.getMd5Hash(f)};  String selection=FormsColumns.MD5_HASH + "=?";  Cursor c=null;  try {    c=Collect.getInstance().getContentResolver().query(FormsColumns.CONTENT_URI,projection,selection,selectionArgs,null);    if (c.getCount() > 0) {      c.moveToFirst();      isNew=false;      Log.w(t,"A duplicate file has been found, we need to remove the downloaded file and return the other one.");      FileUtils.deleteAndReport(f);      String existingPath=c.getString(c.getColumnIndex(FormsColumns.FORM_FILE_PATH));      f=new File(existingPath);      Log.w(t,"Will use " + existingPath);    }  }  finally {    if (c != null) {      c.close();    }  }  return new FileResult(f,isNew);}  }
class C{  public static Date parseDate(String d) throws ParseException {  return parseDate(d,DEFAULT_DATE_FORMATS);}  }
class C{  public RowBuilder doubleCol(String name){  ColumnDouble column=new ColumnDouble(_columns.size(),name,_offset);  _offset+=column.length();  _columns.add(column);  return this;}  }
class C{  private static Object maskNull(Object key){  return (key == null ? NULL_KEY : key);}  }
class C{  private void checkNegativeNumberExpression(){  if ((numberFormat instanceof DecimalFormat) && !numberFormat.equals(originalNumberFormat)) {    String numberPattern=((DecimalFormat)numberFormat).toPattern();    if (!numberPattern.equals(originalNumberPattern)) {      hasFollowingMinusSign=false;      int separatorIndex=numberPattern.indexOf(';');      if (separatorIndex > -1) {        int minusIndex=numberPattern.indexOf('-',separatorIndex);        if ((minusIndex > numberPattern.lastIndexOf('0')) && (minusIndex > numberPattern.lastIndexOf('#'))) {          hasFollowingMinusSign=true;          minusSign=((DecimalFormat)numberFormat).getDecimalFormatSymbols().getMinusSign();        }      }      originalNumberPattern=numberPattern;    }    originalNumberFormat=numberFormat;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:52.894 -0500",hash_original_method="597DA81ECE5B3A826C9242118BC9B66A",hash_generated_method="DF60004764989C0E51379AF5C59BB06F") public boolean match(Event matchTarget){  if (matchTarget.eventType == null && this.eventType != null)   return false; else   if (matchTarget.eventType != null && this.eventType == null)   return false; else   if (this.eventType == null && matchTarget.eventType == null)   return false; else   if (getEventId() == null && matchTarget.getEventId() != null)   return false; else   if (getEventId() != null && matchTarget.getEventId() == null)   return false;  return matchTarget.eventType.equalsIgnoreCase(this.eventType) && ((this.getEventId() == matchTarget.getEventId()) || this.getEventId().equalsIgnoreCase(matchTarget.getEventId()));}  }
class C{  public boolean matchesAnyPattern(final IResource resource){  Check.notNull(resource,"resource");  if (canMatch(resource)) {    final Pattern[] patterns=getExclusionPatterns(resource.getProject());    if (patterns == null || patterns.length == 0) {      return false;    }    final String matchPath=createResourceMatchString(resource);    for (    final Pattern pattern : patterns) {      if (pattern.matcher(matchPath).matches()) {        log.debug(MessageFormat.format("item ''{0}'' matched exclusion pattern ''{1}''",matchPath,pattern.toString()));        return true;      }    }  }  return false;}  }
class C{  public LogicalUnit addLUSE(String systemObjectId,String metaHead,List<String> ldevIds) throws Exception {  String addLUSEQuery=constructAddLUSEQuery(systemObjectId,metaHead,ldevIds);  URI endpointURI=hdsApiClient.getBaseURI();  InputStream responseStream=null;  LogicalUnit logicalUnit=null;  try {    log.info("Add LUSE Query payload :{}",addLUSEQuery);    ClientResponse response=hdsApiClient.post(endpointURI,addLUSEQuery);    if (HttpStatus.SC_OK == response.getStatus()) {      responseStream=response.getEntityInputStream();      JavaResult result=SmooksUtil.getParsedXMLJavaResult(responseStream,HDSConstants.SMOOKS_CONFIG_FILE);      verifyErrorPayload(result);      logicalUnit=(LogicalUnit)result.getBean(HDSConstants.LOGICALUNIT_BEAN_NAME);    } else {      log.error("AddLUSE failed with invalid response code {}",response.getStatus());      throw HDSException.exceptions.invalidResponseFromHDS(String.format("Not able to Add LUSE due to invalid response %1$s from server for system %2$s",response.getStatus(),systemObjectId));    }  }  finally {    if (null != responseStream) {      try {        responseStream.close();      } catch (      IOException e) {        log.warn("IOException occurred while closing the response stream");      }    }  }  return logicalUnit;}  }
class C{  public void testGetRequiredInt(){  ConfigurableFactoryContext con=new ConfigurableFactoryContext(attributes);  assertThat(con.getRequiredInt("fiveInt"),is(5));}  }
class C{  protected void fireFAAccountsCompleted(){  Object[] listeners=this.listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == BrokerChangeListener.class) {      ((BrokerChangeListener)listeners[i + 1]).fAAccountsCompleted();    }  }}  }
class C{  public boolean containsKey(Object key){  return map.containsKey(key);}  }
class C{  protected void saveSelection(){  if (null == shell) {    return;  }  NewRelationSetWizard wizard=new NewRelationSetWizard(buildRelationSet());  WizardDialog dialog=new WizardDialog(shell,wizard);  dialog.open();}  }
class C{  private ExceptionsAttribute(ConstPool cp,ExceptionsAttribute src,Map classnames){  super(cp,tag);  copyFrom(src,classnames);}  }
class C{  boolean isTrueChange(){  return realChange;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:21.186 -0500",hash_original_method="37B28104B332535CD9A4BDBCC29D5030",hash_generated_method="B837EAB259A841BED217DC0BA5724CFC") public static String longToString(long v,int radix){  String str=new String();  str.addTaint(v);  str.addTaint(radix);  return str;}  }
class C{  public void paintProgressBarBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public static String printStackTrace(Throwable t){  java.io.StringWriter strWriter=new java.io.StringWriter();  java.io.PrintWriter prWriter=new java.io.PrintWriter(strWriter);  t.printStackTrace(prWriter);  prWriter.flush();  return strWriter.toString();}  }
class C{  public final ASTNode createCopyTarget(ASTNode first,ASTNode last){  if (first == last) {    return this.rewriter.createCopyTarget(first);  } else {    return createTargetNode(first,last,false,null,null);  }}  }
class C{  public GallagherPeakComprator(double[] gallagher_peaks){  super();  this.gallagher_peaks=gallagher_peaks;}  }
class C{  public void fling(int velocityX,int velocityY){  if (getChildCount() > 0) {    int width=getWidth() - getPaddingLeft() - getPaddingRight();    int height=getHeight() - getPaddingTop() - getPaddingBottom();    int right=getChildAt(0).getWidth();    int bottom=getChildAt(0).getHeight();    mScroller.fling(getScrollX(),getScrollY(),velocityX,velocityY,0,Math.max(0,right - width),0,Math.max(0,bottom - height),width / 2,height / 2);    ViewCompat.postInvalidateOnAnimation(this);  }}  }
class C{  public Package(String name,Integer color,Integer timeon,Integer timeoff){  this.name=name;  this.color=color;  this.timeon=timeon;  this.timeoff=timeoff;}  }
class C{  private void doOutsideScores(){  grammar.logarithmMode();  lexicon.logarithmMode();  for (int diff=length; diff >= 1; diff--) {    for (int start=0; start + diff <= length; start++) {      int end=start + diff;      for (int s=0; s < numStates; s++) {        double oS=oScore[start][end][s];        if (Double.isInfinite(oS)) {          continue;        }        UnaryRule[] rules=grammar.getClosedViterbiUnaryRulesByParent(s);        for (int r=0; r < rules.length; r++) {          UnaryRule ur=rules[r];          double pS=ur.getScore(0,0);          double tot=oS + pS;          touchedRules++;          if (tot > oScore[start][end][ur.childState] && iScore[start][end][ur.childState] > Double.NEGATIVE_INFINITY) {            oScore[start][end][ur.childState]=tot;          }        }      }      for (int s=0; s < numStates; s++) {        BinaryRule[] rules=grammar.splitRulesWithP(s);        for (int r=0; r < rules.length; r++) {          BinaryRule br=rules[r];          double oS=oScore[start][end][br.parentState];          if (Double.isInfinite(oS)) {            continue;          }          int min1=narrowRExtent[start][br.leftChildState];          if (end < min1) {            continue;          }          int max1=narrowLExtent[end][br.rightChildState];          if (max1 < min1) {            continue;          }          int min=min1;          int max=max1;          if (max - min > 2) {            int min2=wideLExtent[end][br.rightChildState];            min=(min1 > min2 ? min1 : min2);            if (max1 < min) {              continue;            }            int max2=wideRExtent[start][br.leftChildState];            max=(max1 < max2 ? max1 : max2);            if (max < min) {              continue;            }          }          double pS=br.getScore(0,0,0);          for (int split=min; split <= max; split++) {            double lS=iScore[start][split][br.leftChildState];            if (Double.isInfinite(lS)) {              continue;            }            double rS=iScore[split][end][br.rightChildState];            if (Double.isInfinite(rS)) {              continue;            }            double totL=pS + rS + oS;            touchedRules++;            if (totL > oScore[start][split][br.leftChildState]) {              oScore[start][split][br.leftChildState]=totL;            }            double totR=pS + lS + oS;            if (totR > oScore[split][end][br.rightChildState]) {              oScore[split][end][br.rightChildState]=totR;            }          }        }      }    }  }}  }
class C{  protected Node export(Node n,AbstractDocument d){  super.export(n,d);  AbstractAttr aa=(AbstractAttr)n;  aa.nodeName=nodeName;  aa.unspecified=false;  aa.isIdAttr=d.isId(aa);  return n;}  }
class C{  public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {  int vocabSize=in.readInt();  for (int i=0; i < vocabSize; i++) {    String line=in.readUTF();    Vocabulary.id(line);  }  numTokens=in.readDouble();  countFuncs=new long[in.readInt()][2];  for (int i=0; i < countFuncs.length; i++) {    countFuncs[i][0]=in.readLong();    countFuncs[i][1]=in.readLong();  }  typesFuncs=new long[in.readInt()][2];  for (int i=0; i < typesFuncs.length; i++) {    typesFuncs[i][0]=in.readLong();    typesFuncs[i][1]=in.readLong();  }  quantizationBase=in.readDouble();  bf=new BloomFilter();  bf.readExternal(in);}  }
class C{  public ChooserIntentBuilder(Context context){  this(context,BottomSheetChooserActivity.class);}  }
class C{  @Override public JettySolrRunner createJetty(File solrHome,String dataDir,String shardList,String solrConfigOverride,String schemaOverride) throws Exception {  return createProxiedJetty(solrHome,dataDir,shardList,solrConfigOverride,schemaOverride);}  }
class C{  public synchronized void print(String str){synchronized (ToolPrintStream.class) {    ToolIO.nextMessage+=str;    ToolPrintStream.class.notifyAll();  }}  }
class C{  private void push(final ClassWriter cw,final String desc){  int type=type(cw,desc);  if (type != 0) {    push(type);    if (type == LONG || type == DOUBLE) {      push(TOP);    }  }}  }
class C{  protected void countSortFromTo(int from,int to,long min,long max){  if (size == 0)   return;  checkRangeFromTo(from,to,size);  final int width=(int)(max - min + 1);  int[] counts=new int[width];  long[] theElements=elements;  for (int i=from; i <= to; )   counts[(int)(theElements[i++] - min)]++;  int fromIndex=from;  long val=min;  for (int i=0; i < width; i++, val++) {    int c=counts[i];    if (c > 0) {      if (c == 1)       theElements[fromIndex++]=val; else {        int toIndex=fromIndex + c - 1;        fillFromToWith(fromIndex,toIndex,val);        fromIndex=toIndex + 1;      }    }  }}  }
class C{  public static HashChain fromRawHashes(final List<byte[]> rawHashList){  return new HashChain(rawHashList.stream().map(null).collect(Collectors.toList()));}  }
class C{  private String generateWhereClauseStmt() throws ObjectNotFoundException {  StringBuffer buffer=new StringBuffer(" WHERE ");  buffer.append(prepareProductStatusRestriction());  boolean currentUserAnonymous=false;  if (currentUsersOrg != null) {    buffer.append(prepareCustomerRestriction());  } else {    buffer.append(" AND (p.type='");    buffer.append(ServiceType.TEMPLATE + "' OR p.type='");    buffer.append(ServiceType.PARTNER_TEMPLATE + "') ");    buffer.append("");    currentUserAnonymous=true;  }  buffer.append(prepareServiceVisibilityRestriction(currentUserAnonymous));  buffer.append(prepareTagRestriction());  buffer.append(prepareCategoryRestriction());  buffer.append(prepareIdListRestriction());  return buffer.toString();}  }
class C{  public boolean hasYomiName(){  return hasExtension(YomiName.class);}  }
class C{  public void rejoinGroupChat(String chatId) throws PayloadException, NetworkException {  GroupChatImpl groupChat=getOrCreateGroupChat(chatId);  groupChat.rejoinGroupChat();}  }
class C{  public static String makeLogTag(Class cls){  return makeLogTag(cls.getSimpleName());}  }
class C{  public String gammaTipText(){  return "The Gamma value.";}  }
class C{  public java.lang.String intern(){  return null;}  }
class C{  public static AffineTransformation reflectionInstance(double x0,double y0,double x1,double y1){  AffineTransformation trans=new AffineTransformation();  trans.setToReflection(x0,y0,x1,y1);  return trans;}  }
class C{  @DSComment("View state info") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:50.317 -0500",hash_original_method="30EDA8A2E8A402543ACC7CC56FF92053",hash_generated_method="CDA58C7A453680B4915870F14726B7C2") public boolean isLongClickable(){  return getBooleanProperty(PROPERTY_LONG_CLICKABLE);}  }
class C{  public HtmlPolicyBuilder allowStandardUrlProtocols(){  return allowUrlProtocols("http","https","mailto");}  }
class C{  public static void generateFile(byte[] data,File outputFile){  try {    AudioInputStream audioStream=getAudioStream(data);    if (outputFile.getName().endsWith("wav")) {      int nb=AudioSystem.write(audioStream,AudioFileFormat.Type.WAVE,new FileOutputStream(outputFile));      log.fine("WAV file written to " + outputFile.getCanonicalPath() + " ("+ (nb / 1000)+ " kB)");    } else {      throw new RuntimeException("Unsupported encoding " + outputFile);    }  } catch (  Exception e) {    e.printStackTrace();    throw new RuntimeException("could not generate file: " + e);  }}  }
class C{  public void querySorted(String type,int index,boolean ascending,int page,int limit,int visibilityScope,CloudResponse<CloudObject[]> response){  try {    queryImpl(type,null,0,page,limit,visibilityScope,1,index,ascending,false,false,response);  } catch (  CloudException e) {    response.onError(e);  }}  }
class C{  private void shutdownCamera(boolean restart){  if (PermissionsHelper.isMorHigher() && !mPermissionsSatisfied)   return;  if (mCameraFragment == null || mRenderer == null)   return;  mCameraFragment.closeCamera();  mRestartCamera=restart;  mRenderer.getRenderHandler().sendShutdown();  mRenderer=null;}  }
class C{  public Fragment(String aWord){  this(aWord,null);}  }
class C{  public static List<History> findHistoryByJob(EntityManager em,JPAEntity job,BigInteger limit){  requireArgument(em != null,"Entity manager cannot be null.");  requireArgument(job != null,"The job cannot be null.");  TypedQuery<History> query=em.createNamedQuery("History.findByJob",History.class);  if (limit != null) {    query.setMaxResults(limit.intValue());  }  try {    query.setParameter("entity",job);    return query.getResultList();  } catch (  NoResultException ex) {    return new ArrayList<History>(0);  }}  }
class C{  private void commit() throws InterruptedException, ReplicatorException {  applier.commit();  schedule.commit();  blockEventCount=0;  lastCommitMillis=System.currentTimeMillis();}  }
class C{  public static synchronized void reloadIfChanged(){  log.trace("reloadIfChanged called");  if (instance != null) {    try {      instance.load(null);    } catch (    Exception e) {      throw translateException(e);    }  }}  }
class C{  public <Request extends ActionRequest,Response extends ActionResponse>void registerAction(GenericAction<Request,Response> action,Class<? extends TransportAction<Request,Response>> transportAction,Class... supportTransportActions){  actions.put(action.name(),new ActionEntry<>(action,transportAction,supportTransportActions));}  }
class C{  @Override protected void initViews(Bundle savedInstanceState){}  }
class C{  @Override public boolean isDefinitelyWritable(int column) throws SQLException {  try {    debugCodeCall("isDefinitelyWritable",column);    checkColumnIndex(column);    return false;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void flush() throws IOException {  flushCache();  this.out.flush();}  }
class C{  public void testFileNameOnly() throws IOException {  Path dir=wrap(createTempDir());  Files.createFile(dir.resolve("file1"));  Files.createFile(dir.resolve("file2"));  Files.createFile(dir.resolve("file3"));  List<String> expected=new ArrayList<>();  try (DirectoryStream<Path> stream=Files.newDirectoryStream(dir)){    for (    Path path : stream) {      expected.add(path.getFileName().toString());    }  }   Path subdir=dir.resolve("subdir");  Files.createDirectory(subdir);  Files.createFile(subdir.resolve("file3"));  Files.createFile(subdir.resolve("file2"));  Files.createFile(subdir.resolve("file1"));  List<String> actual=new ArrayList<>();  try (DirectoryStream<Path> stream=Files.newDirectoryStream(subdir)){    for (    Path path : stream) {      actual.add(path.getFileName().toString());    }  }   assertEquals(expected,actual);}  }
class C{  public void initializeGlobalCodeNodeComment(final List<IComment> comments){  if (m_parentFunction != null) {    CommentManager.get(m_provider).initializeGlobalCodeNodeComment(m_codeNode,comments);  }}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addElement(new Option("\tThe epsilon parameter in epsilon-insensitive loss function.\n" + "\t(default 1.0e-3)","L",1,"-L <double>"));  result.addElement(new Option("\tThe random number seed.\n" + "\t(default 1)","W",1,"-W <double>"));  return result.elements();}  }
class C{  @Override default Eval<OptionalInt> minInt(final ToIntFunction<? super T> fn){  return Eval.later(null);}  }
class C{  public void testLowerCaseFilter() throws IOException {  Analyzer a=new LowerCaseWhitespaceAnalyzer();  assertAnalyzesTo(a,"AbaCaDabA",new String[]{"abacadaba"});  assertAnalyzesTo(a,"\ud801\udc16\ud801\udc16\ud801\udc16\ud801\udc16",new String[]{"\ud801\udc3e\ud801\udc3e\ud801\udc3e\ud801\udc3e"});  assertAnalyzesTo(a,"AbaCa\ud801\udc16DabA",new String[]{"abaca\ud801\udc3edaba"});  assertAnalyzesTo(a,"AbaC\uD801AdaBa",new String[]{"abac\uD801adaba"});  assertAnalyzesTo(a,"AbaC\uDC16AdaBa",new String[]{"abac\uDC16adaba"});  a.close();}  }
class C{  public Forwarded(DelayInfo delay,Packet fwdPacket){  this.delay=delay;  this.forwardedPacket=fwdPacket;}  }
class C{  private void playFile(String fileName,Guild guild) throws SoundPlaybackException {  SoundFile fileToPlay=getSoundFileById(fileName);  if (fileToPlay != null) {    File soundFile=new File(fileToPlay.getSoundFileLocation());    playFile(soundFile,guild);  } else {    throw new SoundPlaybackException("Could not find sound file that was requested.");  }}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  public void registerAsynchronousChannel(FbWireAsynchronousChannel channel){  newChannels.add(channel);  channel.addChannelListener(channelListener);  selector.wakeup();}  }
class C{  public static Drawable generateRoundBorderDrawable(Resources res,float radii,float borderWidth,int pressColor,int defaultColor){  radii=dpToPx(res,radii);  borderWidth=dpToPx(res,borderWidth);  float[] outRadii=new float[]{radii,radii,radii,radii,radii,radii,radii,radii};  RectF inset=new RectF(borderWidth,borderWidth,borderWidth,borderWidth);  Shape roundRectShape=new RoundRectShape(outRadii,inset,null);  ShapeDrawable shopDrawablePress=new ShapeDrawable(roundRectShape);  shopDrawablePress.getPaint().setColor(pressColor);  Shape roundRectShapeNormal=new RoundRectShape(outRadii,inset,null);  ShapeDrawable shopDrawableNormal=new ShapeDrawable(roundRectShapeNormal);  shopDrawableNormal.getPaint().setColor(defaultColor);  StateListDrawable bgStateDrawable=new StateListDrawable();  bgStateDrawable.addState(new int[]{android.R.attr.state_pressed},shopDrawablePress);  bgStateDrawable.addState(new int[]{},shopDrawableNormal);  return bgStateDrawable;}  }
class C{  protected Namespace(){  super(null);}  }
class C{  public BarycenterScorer(Hypergraph<V,E> graph){  super(graph,false);}  }
class C{  public Boolean isD7On(){  return this.isDigitalOn(7);}  }
class C{  public static boolean scrub(final Intent intent){  return null != intent && scrub(intent.getExtras());}  }
class C{  private boolean casHead(HeadIndex<E> cmp,HeadIndex<E> val){  return UNSAFE.compareAndSwapObject(this,headOffset,cmp,val);}  }
class C{  public AccountHeaderBuilder withResetDrawerOnProfileListClick(boolean resetDrawerOnProfileListClick){  this.mResetDrawerOnProfileListClick=resetDrawerOnProfileListClick;  return this;}  }
class C{  public static AnnotatedType[] buildAnnotatedInterfaces(byte[] rawAnnotations,ConstantPool cp,Class<?> decl){  if (decl == Object.class || decl.isArray() || decl.isPrimitive() || decl == Void.TYPE)   return AnnotatedTypeFactory.EMPTY_ANNOTATED_TYPE_ARRAY;  return buildAnnotatedTypes(rawAnnotations,cp,decl,decl,decl.getGenericInterfaces(),TypeAnnotationTarget.CLASS_IMPLEMENTS);}  }
class C{  public String sprintf(final String x) throws IllegalArgumentException {  final Iterator<ConversionSpecification> e=vFmt.iterator();  ConversionSpecification cs;  char c;  final StringBuilder sb=new StringBuilder();  while (e.hasNext()) {    cs=e.next();    c=cs.getConversionCharacter();    if (c == '\0') {      sb.append(cs.getLiteral());    } else     if (c == '%') {      sb.append('%');    } else {      sb.append(cs.internalsprintf(x));    }  }  return sb.toString();}  }
class C{  public void addConnectedEventListener(Executor executor,PeerConnectedEventListener listener){  peerConnectedEventListeners.add(new ListenerRegistration<PeerConnectedEventListener>(checkNotNull(listener),executor));  for (  Peer peer : getConnectedPeers())   peer.addConnectedEventListener(executor,listener);  for (  Peer peer : getPendingPeers())   peer.addConnectedEventListener(executor,listener);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.554 -0400",hash_original_method="384D8F40DBB3390AC47A6D604F80EC3E",hash_generated_method="66965F1F6AC5BAF8A8FD7A6B45E8FED9") public static Tailer create(File file,TailerListener listener){  return create(file,listener,DEFAULT_DELAY_MILLIS,false);}  }
class C{  public boolean isOpen(){  return State.OPEN.equals(getState());}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void onCharacteristicWrite(String address,int status,int srvcType,int srvcInstId,ParcelUuid srvcUuid,int charInstId,ParcelUuid charUuid){  if (DBG)   Log.d(TAG,"onCharacteristicWrite() - Device=" + address + " UUID="+ charUuid+ " Status="+ status);  if (!address.equals(mDevice.getAddress())) {    return;  }  BluetoothGattService service=getService(mDevice,srvcUuid.getUuid(),srvcInstId,srvcType);  if (service == null)   return;  BluetoothGattCharacteristic characteristic=service.getCharacteristic(charUuid.getUuid(),charInstId);  if (characteristic == null)   return;  if ((status == GATT_INSUFFICIENT_AUTHENTICATION || status == GATT_INSUFFICIENT_ENCRYPTION) && mAuthRetry == false) {    try {      mAuthRetry=true;      mService.writeCharacteristic(mClientIf,address,srvcType,srvcInstId,srvcUuid,charInstId,charUuid,characteristic.getWriteType(),AUTHENTICATION_MITM,characteristic.getValue());      return;    } catch (    RemoteException e) {      Log.e(TAG,"",e);    }  }  mAuthRetry=false;  try {    mCallback.onCharacteristicWrite(BluetoothGatt.this,characteristic,status);  } catch (  Exception ex) {    Log.w(TAG,"Unhandled exception: " + ex);  }}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:10.791 -0500",hash_original_method="D56485CA0554FF67A28005CBDB936EDB",hash_generated_method="43F03066ACCDCA13567DF29511D1C59A") public URL(String protocol,String host,int port,String file,URLStreamHandler handler) throws MalformedURLException {  if (port < -1) {    throw new MalformedURLException("port < -1: " + port);  }  if (protocol == null) {    throw new NullPointerException("protocol == null");  }  if (host != null && host.contains(":") && host.charAt(0) != '[') {    host="[" + host + "]";  }  this.protocol=protocol;  this.host=host;  this.port=port;  file=UrlUtils.authoritySafePath(host,file);  int hash=file.indexOf("#");  if (hash != -1) {    this.file=file.substring(0,hash);    this.ref=file.substring(hash + 1);  } else {    this.file=file;  }  fixURL(false);  if (handler == null) {    setupStreamHandler();    if (streamHandler == null) {      throw new MalformedURLException("Unknown protocol: " + protocol);    }  } else {    streamHandler=handler;  }}  }
class C{  private void disposeOnEDT(){  assert SwingUtilities.isEventDispatchThread();  if (abortDialog != null) {    abortDialog.removeWindowListener(closeListener);    abortDialog.dispose();    abortDialog=null;  }}  }
class C{  public RemoteDirectory(final String path){  this.path=Preconditions.checkNotNull(path,"IE00768: Path argument can not be null");}  }
class C{  protected Query matchTheseItems(int[] terms){  BooleanQuery.Builder query=new BooleanQuery.Builder();  for (  int term : terms) {    query.add(new BooleanClause(new TermQuery(new Term(KEY,"" + term)),BooleanClause.Occur.SHOULD));  }  return query.build();}  }
class C{  public JComponent createPropertyGUI(String prefix,Properties props,Properties info){  JComponent component=createEmbeddedPropertyGUI(prefix,props,info);  JButton doneButton=null, cancelButton=null;  JPanel buttons=new JPanel();  if (print) {    doneButton=new JButton(i18n.get(Inspector.class,"Print","Print"));    cancelButton=new JButton(i18n.get(Inspector.class,"Quit","Quit"));  } else {    doneButton=new JButton(i18n.get(Inspector.class,"Ok","Ok"));    cancelButton=new JButton(i18n.get(Inspector.class,"Cancel","Cancel"));  }  doneButton.addActionListener(this);  doneButton.setActionCommand(doneCommand);  cancelButton.addActionListener(this);  cancelButton.setActionCommand(cancelCommand);  buttons.add(doneButton);  buttons.add(cancelButton);  component.add(buttons,BorderLayout.SOUTH);  component.validate();  return component;}  }
class C{  public MalformedBody2(){  requestFileName="malformed-body2.query";}  }
class C{  public Stream<T> stream(){  return StreamSupport.stream(spliterator(),false);}  }
class C{  public XYSeries(String title){  this(title,0);}  }
class C{  protected Object populate(Object obj) throws Exception {  Map<String,String> map=PropertiesHelper.convertBundleToMap(rb);  BeanUtils.copyProperties(obj,map);  return obj;}  }
class C{  @SuppressWarnings("unchecked") protected void handlePacket(Packet c){  if (c == null) {    System.out.println("client: got null packet");    return;  }  GAME_LOCK.lock();  try {switch (c.getCommand()) {case Packet.COMMAND_PLAYER_UPDATE:      receivePlayerInfo(c);    break;case Packet.COMMAND_PLAYER_READY:  getPlayer(c.getIntValue(0)).setDone(c.getBooleanValue(1));break;case Packet.COMMAND_PLAYER_ADD:receivePlayerInfo(c);break;case Packet.COMMAND_PLAYER_REMOVE:getGame().removePlayer(c.getIntValue(0));break;case Packet.COMMAND_CHAT:getGame().processGameEvent(new GamePlayerChatEvent(this,null,(String)c.getObject(0)));break;case Packet.COMMAND_ENTITY_ADD:receiveEntityAdd(c);break;case Packet.COMMAND_ENTITY_UPDATE:receiveEntityUpdate(c);break;case Packet.COMMAND_ENTITY_REMOVE:receiveEntityRemove(c);break;case Packet.COMMAND_ENTITY_VISIBILITY_INDICATOR:receiveEntityVisibilityIndicator(c);break;case Packet.COMMAND_SENDING_MINEFIELDS:receiveSendingMinefields(c);break;case Packet.COMMAND_SENDING_ILLUM_HEXES:receiveIlluminatedHexes(c);break;case Packet.COMMAND_CLEAR_ILLUM_HEXES:getGame().clearIlluminatedPositions();break;case Packet.COMMAND_UPDATE_MINEFIELDS:receiveUpdateMinefields(c);break;case Packet.COMMAND_DEPLOY_MINEFIELDS:receiveDeployMinefields(c);break;case Packet.COMMAND_REVEAL_MINEFIELD:receiveRevealMinefield(c);break;case Packet.COMMAND_REMOVE_MINEFIELD:receiveRemoveMinefield(c);break;case Packet.COMMAND_ADD_SMOKE_CLOUD:SmokeCloud cloud=(SmokeCloud)c.getObject(0);getGame().addSmokeCloud(cloud);break;case Packet.COMMAND_CHANGE_HEX:getGame().getBoard().setHex((Coords)c.getObject(0),(IHex)c.getObject(1));break;case Packet.COMMAND_CHANGE_HEXES:List<Coords> coords=new ArrayList<Coords>((Set<Coords>)c.getObject(0));List<IHex> hexes=new ArrayList<IHex>((Set<IHex>)c.getObject(1));getGame().getBoard().setHexes(coords,hexes);break;case Packet.COMMAND_BLDG_UPDATE:receiveBuildingUpdate(c);break;case Packet.COMMAND_BLDG_COLLAPSE:receiveBuildingCollapse(c);break;case Packet.COMMAND_PHASE_CHANGE:getGame().setPhase((IGame.Phase)c.getObject(0));break;case Packet.COMMAND_TURN:getGame().setTurnIndex(c.getIntValue(0));break;case Packet.COMMAND_ROUND_UPDATE:getGame().setRoundCount(c.getIntValue(0));break;case Packet.COMMAND_SENDING_TURNS:receiveTurns(c);break;case Packet.COMMAND_SENDING_BOARD:receiveBoard(c);break;case Packet.COMMAND_SENDING_ENTITIES:receiveEntities(c);break;case Packet.COMMAND_SENDING_REPORTS:case Packet.COMMAND_SENDING_REPORTS_TACTICAL_GENIUS:getGame().addReports((Vector<Report>)c.getObject(0));break;case Packet.COMMAND_SENDING_REPORTS_ALL:Vector<Vector<Report>> allReports=(Vector<Vector<Report>>)c.getObject(0);getGame().setAllReports(allReports);break;case Packet.COMMAND_ENTITY_ATTACK:receiveAttack(c);break;case Packet.COMMAND_SENDING_GAME_SETTINGS:getGame().setOptions((GameOptions)c.getObject(0));break;case Packet.COMMAND_SENDING_PLANETARY_CONDITIONS:getGame().setPlanetaryConditions((PlanetaryConditions)c.getObject(0));getGame().processGameEvent(new GameSettingsChangeEvent(this));break;case Packet.COMMAND_SENDING_TAGINFO:Vector<TagInfo> vti=(Vector<TagInfo>)c.getObject(0);for (TagInfo ti : vti) {getGame().addTagInfo(ti);}break;case Packet.COMMAND_RESET_TAGINFO:getGame().resetTagInfo();break;case Packet.COMMAND_SENDING_ARTILLERYATTACKS:Vector<ArtilleryAttackAction> v=(Vector<ArtilleryAttackAction>)c.getObject(0);getGame().setArtilleryVector(v);break;case Packet.COMMAND_SENDING_FLARES:Vector<Flare> v2=(Vector<Flare>)c.getObject(0);getGame().setFlares(v2);break;case Packet.COMMAND_SENDING_SPECIAL_HEX_DISPLAY:getGame().getBoard().setSpecialHexDisplayTable((Hashtable<Coords,Collection<SpecialHexDisplay>>)c.getObject(0));getGame().processGameEvent(new GameBoardChangeEvent(this));break;case Packet.COMMAND_ENTITY_NOVA_NETWORK_CHANGE:receiveEntityNovaNetworkModeChange(c);break;case Packet.COMMAND_CLIENT_FEEDBACK_REQUEST:int cfrType=(int)c.getData()[0];GameCFREvent cfrEvt=new GameCFREvent(this,cfrType);switch (cfrType) {case (Packet.COMMAND_CFR_DOMINO_EFFECT):cfrEvt.setEntityId((int)c.getData()[1]);break;case Packet.COMMAND_CFR_AMS_ASSIGN:cfrEvt.setEntityId((int)c.getData()[1]);cfrEvt.setAmsEquipNum((int)c.getData()[2]);cfrEvt.setWAAs((List<WeaponAttackAction>)c.getData()[3]);break;case Packet.COMMAND_CFR_APDS_ASSIGN:cfrEvt.setEntityId((int)c.getData()[1]);cfrEvt.setApdsDists((List<Integer>)c.getData()[2]);cfrEvt.setWAAs((List<WeaponAttackAction>)c.getData()[3]);break;}getGame().processGameEvent(cfrEvt);break;case Packet.COMMAND_GAME_VICTORY_EVENT:GameVictoryEvent gve=new GameVictoryEvent(this,getGame());getGame().processGameEvent(gve);break;}}  finally {GAME_LOCK.unlock();}}  }
class C{  private static float[] convertIntToFloatArray(int[] iArray){  if (iArray != null) {    float[] fArray=new float[iArray.length];    for (int i=0; i < iArray.length; i++) {      fArray[i]=iArray[i];    }    return fArray;  } else {    return null;  }}  }
class C{  public static boolean isLeftToRight(LC lc,ContainerWrapper container){  if (lc != null && lc.getLeftToRight() != null)   return lc.getLeftToRight();  return container == null || container.isLeftToRight();}  }
class C{  protected void forwardMessage(AbstractMRListener client,AbstractMRMessage m){  ((EasyDccListener)client).message((EasyDccMessage)m);}  }
class C{  public static void fill(int[][][][] matrix,int value){  int rows=matrix.length;  for (int r=0; r < rows; r++) {    int cols=matrix[r].length;    for (int c=0; c < cols; c++) {      int height=matrix[r][c].length;      for (int h=0; h < height; h++) {        int depth=matrix[r][c][h].length;        for (int d=0; d < depth; d++) {          matrix[r][c][h][d]=value;        }      }    }  }}  }
class C{  public boolean isEnumLiteralVisible(EObject context,TypeRef enumType){  Resource contextResource=context.eResource();  Type declaredReceiverType=getActualDeclaredReceiverType(context,enumType,contextResource.getResourceSet());  if (typeVisibilityChecker.isVisible(contextResource,declaredReceiverType).visibility) {    return true;  }  return false;}  }
class C{  public static String toHexString(byte[] bytes){  return String.format(Locale.US,"%0" + (bytes.length << 1) + "x",new BigInteger(1,bytes));}  }
class C{  public void reset(){  m_t=1;  m_wordsPerClass=null;  m_probOfWordGivenClass=null;  m_probOfClass=null;}  }
class C{  void expandToInclude(Coords onc){  final String METHOD_NAME="expandToInclude(Coords)";  owner.methodBegin(getClass(),METHOD_NAME);  try {    HexLine[] edges=getEdges();    for (int i=0; i < 6; i++) {      if ((edges[i] == null) || (edges[i].judgePoint(onc) > 0)) {        edges[i]=new HexLine(onc,i,owner);      }    }    setEdges(edges);  }  finally {    owner.methodEnd(getClass(),METHOD_NAME);  }}  }
class C{  public StreamScope(){}  }
class C{  public UtilityTable(Map<Assignment,Double> values){  this();  for (  Assignment a : values.keySet()) {    setUtil(a,values.get(a));  }}  }
class C{  public CF3(int numberOfVariables){  super(numberOfVariables,2,1);}  }
class C{  public boolean isHttpCaching(){  return this.httpCaching;}  }
class C{  public void addTab(String name,JComponent component){  addTab(name,null,component);}  }
class C{  @Override public void widgetSelected(SelectionEvent event){  Button button=(Button)event.widget;  if (button.getSelection()) {    viewer.addFilter(gefaehrdungFilter);    refresh();    checkAllSelectedGefaehrdungen();    packAllColumns();  } else {    viewer.removeFilter(gefaehrdungFilter);    refresh();    assignBausteinGefaehrdungen();    refresh();    checkAllSelectedGefaehrdungen();    packAllColumns();  }}  }
class C{  public void append(String str) throws IOException {  append(str.getBytes(charset));}  }
class C{  public long packValue(final long value){  if (value >= MAX_VALUE) {    throw new RuntimeException(value + " exceeds " + MAX_VALUE+ ".");  } else   if (value < 0) {    throw new RuntimeException(value + " is less than zero.");  }  long idVal=(long)packedId << 58;  long packedVal=idVal | value;  return packedVal;}  }
class C{  private static void addToFolder(Composite folder,int level,PlatformIdent platformIdent,AgentStatusData agentStatusData,CmrRepositoryDefinition cmrRepositoryDefinition){  if (!accessibleForLevel(platformIdent.getAgentName(),level)) {    AgentLeaf agentLeaf=new AgentLeaf(platformIdent,agentStatusData,cmrRepositoryDefinition,level != 0);    folder.addChild(agentLeaf);  } else {    boolean folderExisting=false;    String agentLevelName=getFolderNameFromAgent(platformIdent.getAgentName(),level);    for (    Component child : folder.getChildren()) {      if ((child instanceof Composite) && ObjectUtils.equals(child.getName(),agentLevelName)) {        addToFolder((Composite)child,level + 1,platformIdent,agentStatusData,cmrRepositoryDefinition);        folderExisting=true;      }    }    if (!folderExisting) {      Composite newFolder=createFolder(agentLevelName);      addToFolder(newFolder,level + 1,platformIdent,agentStatusData,cmrRepositoryDefinition);      folder.addChild(newFolder);    }  }}  }
class C{  public void onDataChange(Class clazz,T value){}  }
class C{  public final Double2D rotate(double theta){  final double sinTheta=Math.sin(theta);  final double cosTheta=Math.cos(theta);  final double x=this.x;  final double y=this.y;  return new Double2D(cosTheta * x + -sinTheta * y,sinTheta * x + cosTheta * y);}  }
class C{  private void removeVariableReferences(ASTRewrite rewrite,SimpleName reference,TextEditGroup group){  ASTNode parent=reference.getParent();  while (parent instanceof QualifiedName) {    parent=parent.getParent();  }  if (parent instanceof FieldAccess) {    parent=parent.getParent();  }  int nameParentType=parent.getNodeType();  if (nameParentType == ASTNode.ASSIGNMENT) {    Assignment assignment=(Assignment)parent;    Expression rightHand=assignment.getRightHandSide();    ASTNode assignParent=assignment.getParent();    if (assignParent.getNodeType() == ASTNode.EXPRESSION_STATEMENT && rightHand.getNodeType() != ASTNode.ASSIGNMENT) {      removeVariableWithInitializer(rewrite,rightHand,assignParent,group);    } else {      rewrite.replace(assignment,rewrite.createCopyTarget(rightHand),group);    }  } else   if (nameParentType == ASTNode.SINGLE_VARIABLE_DECLARATION) {    rewrite.remove(parent,group);  } else   if (nameParentType == ASTNode.VARIABLE_DECLARATION_FRAGMENT) {    VariableDeclarationFragment frag=(VariableDeclarationFragment)parent;    ASTNode varDecl=frag.getParent();    List<VariableDeclarationFragment> fragments;    if (varDecl instanceof VariableDeclarationExpression) {      fragments=((VariableDeclarationExpression)varDecl).fragments();    } else     if (varDecl instanceof FieldDeclaration) {      fragments=((FieldDeclaration)varDecl).fragments();    } else {      fragments=((VariableDeclarationStatement)varDecl).fragments();    }    Expression initializer=frag.getInitializer();    if (initializer instanceof CastExpression) {      initializer=((CastExpression)initializer).getExpression();    }    boolean sideEffectInitializer=initializer instanceof MethodInvocation || initializer instanceof ClassInstanceCreation;    if (fragments.size() == fUnusedNames.length) {      if (fForceRemove) {        rewrite.remove(varDecl,group);        return;      }      if (parent.getParent() instanceof FieldDeclaration) {        rewrite.remove(varDecl,group);        return;      }      if (sideEffectInitializer) {        Expression movedInit=(Expression)rewrite.createMoveTarget(initializer);        ExpressionStatement wrapped=rewrite.getAST().newExpressionStatement(movedInit);        rewrite.replace(varDecl,wrapped,group);      } else {        rewrite.remove(varDecl,group);      }    } else {      if (fForceRemove) {        rewrite.remove(frag,group);        return;      }      ASTNode declaration=parent.getParent();      if (declaration instanceof FieldDeclaration) {        rewrite.remove(frag,group);        return;      }      if (declaration instanceof VariableDeclarationStatement) {        ASTNode lst=declaration.getParent();        ListRewrite listRewrite=null;        if (lst instanceof Block) {          listRewrite=rewrite.getListRewrite(lst,Block.STATEMENTS_PROPERTY);        } else         if (lst instanceof SwitchStatement) {          listRewrite=rewrite.getListRewrite(lst,SwitchStatement.STATEMENTS_PROPERTY);        } else {          Assert.isTrue(false);        }        splitUpDeclarations(rewrite,group,frag,listRewrite,(VariableDeclarationStatement)declaration);        rewrite.remove(frag,group);        return;      }      if (declaration instanceof VariableDeclarationExpression) {        if (!sideEffectInitializer) {          rewrite.remove(frag,group);        }      }    }  } else   if (nameParentType == ASTNode.POSTFIX_EXPRESSION || nameParentType == ASTNode.PREFIX_EXPRESSION) {    Expression expression=(Expression)parent;    ASTNode expressionParent=expression.getParent();    if (expressionParent.getNodeType() == ASTNode.EXPRESSION_STATEMENT) {      removeStatement(rewrite,expressionParent,group);    } else {      rewrite.remove(expression,group);    }  }}  }
class C{  private boolean alreadyExists(String name){  for (  String item : existingItems) {    if (item.equals(name)) {      return true;    }  }  return false;}  }
class C{  private static void mapToCurrentSubscriptionValues(List<PricedParameterRow> currentParams,List<PricedParameterRow> newParams){  for (  PricedParameterRow current : currentParams) {    if (current.isOption()) {      continue;    }    for (    PricedParameterRow newParam : newParams) {      if (newParam.isNonConfigurableOneTimeParameter())       continue;      if (newParam.getParameterDefinition().getKey() == current.getParameterDefinition().getKey()) {        newParam.getParameter().setValue(current.getParameter().getValue());      }    }  }}  }
class C{  public static String removeOrderTerm(HttpServletRequest request,HttpServletResponse response){  ShoppingCart cart=getCartObject(request);  String termIndexStr=request.getParameter("termIndex");  if (UtilValidate.isNotEmpty(termIndexStr)) {    try {      Integer termIndex=Integer.parseInt(termIndexStr);      if (termIndex >= 0) {        List<GenericValue> orderTerms=cart.getOrderTerms();        if (orderTerms != null && orderTerms.size() > termIndex) {          cart.removeOrderTerm(termIndex);        }      }    } catch (    NumberFormatException e) {      Debug.logWarning(e,"Error parsing termIndex: " + termIndexStr,module);    }  }  return "success";}  }
class C{  private ChartFactory(){}  }
class C{  protected static final double stdDev(int attr,Instances inst){  int i, count=0;  double sd, va, sum=0.0, sqrSum=0.0, value;  for (i=0; i <= inst.numInstances() - 1; i++) {    count++;    value=inst.instance(i).value(attr);    sum+=value;    sqrSum+=value * value;  }  if (count > 1) {    va=(sqrSum - sum * sum / count) / count;    va=Math.abs(va);    sd=Math.sqrt(va);  } else {    sd=0.0;  }  return sd;}  }
class C{  private static int compareParameterTypes(Class<?>[] left,Class<?>[] right,Class<?>[] actual){  final float leftCost=getTotalTransformationCost(actual,left);  final float rightCost=getTotalTransformationCost(actual,right);  return leftCost < rightCost ? -1 : rightCost < leftCost ? 1 : 0;}  }
class C{  protected void updatePattern(int i){  if (updatePattern != null) {    updatePattern[i]=true;  }  likelihoodKnown=false;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  Attr attribute;  Attr newAttribute;  Node setNode;  NodeList elementList;  String attrName;  String newAttrName;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagName("address");  element=(Element)elementList.item(1);  newAttribute=doc.createAttributeNS("http://www.w3.org/DOM/Test","test:address");  setNode=element.setAttributeNodeNS(newAttribute);  newAttribute.setPrefix("dom");  attribute=element.getAttributeNodeNS("http://www.usa.com","domestic");  attrName=attribute.getNodeName();  newAttrName=newAttribute.getNodeName();  assertEquals("nodesetprefix02_attrName","dmstc:domestic",attrName);  assertEquals("nodesetprefix02_newAttrName","dom:address",newAttrName);}  }
class C{  private AlignmentPattern handlePossibleCenter(int[] stateCount,int i,int j){  int stateCountTotal=stateCount[0] + stateCount[1] + stateCount[2];  float centerJ=centerFromEnd(stateCount,j);  float centerI=crossCheckVertical(i,(int)centerJ,2 * stateCount[1],stateCountTotal);  if (!Float.isNaN(centerI)) {    float estimatedModuleSize=(float)(stateCount[0] + stateCount[1] + stateCount[2]) / 3.0f;    for (    AlignmentPattern center : possibleCenters) {      if (center.aboutEquals(estimatedModuleSize,centerI,centerJ)) {        return center.combineEstimate(centerI,centerJ,estimatedModuleSize);      }    }    AlignmentPattern point=new AlignmentPattern(centerJ,centerI,estimatedModuleSize);    possibleCenters.add(point);    if (resultPointCallback != null) {      resultPointCallback.foundPossibleResultPoint(point);    }  }  return null;}  }
class C{  protected Textifier createTextifier(){  return new Textifier();}  }
class C{  public static void handleCrashesOnThisThread(){  Thread.currentThread().setUncaughtExceptionHandler(null);}  }
class C{  protected void fireStateChanged(){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == ChangeListener.class) {      if (changeEvent == null)       changeEvent=new ChangeEvent(this);      ((ChangeListener)listeners[i + 1]).stateChanged(changeEvent);    }  }}  }
class C{  public Cos(){  super("cos",1);}  }
class C{  protected Object parseJsonFromRequestBody(Representation entity){  if (entity.getMediaType() == null) {    entity.setMediaType(MediaType.APPLICATION_JSON);  }  if (!entity.getMediaType().equals(MediaType.APPLICATION_JSON,true)) {    String errMsg=String.format(Locale.ROOT,"Invalid content type %s; only %s is supported.",entity.getMediaType(),MediaType.APPLICATION_JSON.toString());    log.error(errMsg);    throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST,errMsg);  }  String text=null;  try {    text=entity.getText();  } catch (  IOException ioExc) {    String errMsg="Failed to read entity text due to: " + ioExc;    log.error(errMsg,ioExc);    throw new ResourceException(Status.SERVER_ERROR_INTERNAL,errMsg,ioExc);  }  if (text == null || text.trim().length() == 0) {    throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST,"Empty request body!");  }  Object parsedJson=null;  try {    parsedJson=ObjectBuilder.fromJSON(text);  } catch (  IOException ioExc) {    String errMsg=String.format(Locale.ROOT,"Failed to parse request [%s] into JSON due to: %s",text,ioExc.toString());    log.error(errMsg,ioExc);    throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST,errMsg,ioExc);  }  return parsedJson;}  }
class C{  public String toString(){  StringBuilder result=new StringBuilder();  result.append("role name: " + name + "; role value: ");  for (Iterator<ObjectName> objNameIter=objectNameList.iterator(); objNameIter.hasNext(); ) {    ObjectName currObjName=objNameIter.next();    result.append(currObjName.toString());    if (objNameIter.hasNext()) {      result.append(", ");    }  }  return result.toString();}  }
class C{  public static long formatSecondsByPeriod(long seconds,Seconds period){  return seconds - (seconds % Int.int2long(period.getSeconds()));}  }
class C{  public IElementType advance() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  CharSequence zzBufferL=zzBuffer;  char[] zzBufferArrayL=zzBufferArray;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=ZZ_LEXSTATE[zzLexicalState];    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=(zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++)); else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=(zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 8:{        return R_CURLY;      }case 18:    break;case 7:{    return L_CURLY;  }case 19:break;case 16:{return NULL;}case 20:break;case 6:{return INDENTIFIER;}case 21:break;case 9:{return L_BRACKET;}case 22:break;case 13:{return LINE_COMMENT;}case 23:break;case 11:{return COMMA;}case 24:break;case 2:{return com.intellij.psi.TokenType.WHITE_SPACE;}case 25:break;case 3:{return DOUBLE_QUOTED_STRING;}case 26:break;case 1:{return com.intellij.psi.TokenType.BAD_CHARACTER;}case 27:break;case 15:{return TRUE;}case 28:break;case 12:{return COLON;}case 29:break;case 4:{return SINGLE_QUOTED_STRING;}case 30:break;case 5:{return NUMBER;}case 31:break;case 17:{return FALSE;}case 32:break;case 14:{return BLOCK_COMMENT;}case 33:break;case 10:{return R_BRACKET;}case 34:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;return null;} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  private static boolean hasChangesOfChildren(long last,PageContext pc,Class clazz){  java.lang.reflect.Method[] methods=clazz.getMethods();  java.lang.reflect.Method method;  Class[] params;  for (int i=0; i < methods.length; i++) {    method=methods[i];    if (method.getDeclaringClass() == clazz) {      if (_hasChangesOfChildren(pc,last,method.getReturnType()))       return true;      params=method.getParameterTypes();      for (int y=0; y < params.length; y++) {        if (_hasChangesOfChildren(pc,last,params[y]))         return true;      }    }  }  return false;}  }
class C{  public ServiceRef toRef(Object serviceProxy){  throw new UnsupportedOperationException(getClass().getName());}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:38.273 -0500",hash_original_method="2BDEB44F3F77270286A692320830ED18",hash_generated_method="10A3023962BAC8347E6F9AA00501C9E6") private void cd() throws IOException {  int idx=url.getFile().lastIndexOf('/');  if (idx > 0) {    String dir=url.getFile().substring(0,idx);    write("CWD " + dir + "\r\n");    int reply=getReply();    if (reply != FTP_FILEOK && dir.length() > 0 && dir.charAt(0) == '/') {      write("CWD " + dir.substring(1) + "\r\n");      reply=getReply();    }    if (reply != FTP_FILEOK) {      throw new IOException("Unable to change directories");    }  }}  }
class C{  @Override public void processHeadlessEvents(List<EventObject> headless){  if (!java.awt.GraphicsEnvironment.isHeadless()) {    m_processingHeadlessEvents=true;    for (    EventObject e : headless) {      if (e instanceof DataSetEvent) {        acceptDataSet((DataSetEvent)e);      }    }  }  m_processingHeadlessEvents=false;}  }
class C{  public ItalianAnalyzer(CharArraySet stopwords){  this(stopwords,CharArraySet.EMPTY_SET);}  }
class C{  private void createDataFiles() throws GeneratorException, InterruptedException {  checkForInterruption();  setState(STATE.DATAFILES);  if (!resource.hasCore() || resource.getCoreRowType() == null || resource.getCoreMappings().get(0).getSource() == null) {    throw new GeneratorException("Core is not mapped");  }  for (  Extension ext : resource.getMappedExtensions()) {    report();    try {      addDataFile(resource.getMappings(ext.getRowType()),null);    } catch (    IOException e) {      throw new GeneratorException("Problem occurred while writing data file",e);    }catch (    IllegalArgumentException e) {      throw new GeneratorException("Problem occurred while writing data file",e);    }  }  addMessage(Level.INFO,"All data files completed");  report();}  }
class C{  public FSCssValue(org.w3c.dom.css.CSSPrimitiveValue primitive,String newValue){  this(primitive);  this._cssText=newValue;}  }
class C{  public Connection next(String method) throws IOException {  for (Connection pooled; (pooled=pool.get(address)) != null; ) {    if (method.equals("GET") || pooled.isReadable())     return pooled;    pooled.close();  }  if (!hasNextTlsMode()) {    if (!hasNextInetSocketAddress()) {      if (!hasNextProxy()) {        if (!hasNextPostponed()) {          throw new NoSuchElementException();        }        return new Connection(nextPostponed());      }      lastProxy=nextProxy();      resetNextInetSocketAddress(lastProxy);    }    lastInetSocketAddress=nextInetSocketAddress();    resetNextTlsMode();  }  boolean modernTls=nextTlsMode() == TLS_MODE_MODERN;  Route route=new Route(address,lastProxy,lastInetSocketAddress,modernTls);  if (routeDatabase.shouldPostpone(route)) {    postponedRoutes.add(route);    return next(method);  }  return new Connection(route);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader1=null;  String inputHeader2=null;  String outputHeader=null;  boolean image1Bool=false;  boolean image2Bool=false;  double constant1=0;  double constant2=0;  if (args.length < 3) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  inputHeader1=args[0];  File file=new File(inputHeader1);  image1Bool=file.exists();  if (image1Bool) {    constant1=-1;  } else {    constant1=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  inputHeader2=args[1];  file=new File(inputHeader2);  image2Bool=file.exists();  if (image2Bool) {    constant2=-1;  } else {    constant2=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    if (image1Bool && image2Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData1=inputFile1.getNoDataValue();      double noData2=inputFile2.getNoDataValue();      if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {        showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");        return;      }      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData1);      outputFile.setPreferredPalette(inputFile1.getPreferredPalette());      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          z2=data2[col];          if ((z1 != noData1) && (z2 != noData2)) {            if (z2 != 0) {              outputFile.setValue(row,col,z1 / z2);            } else {              outputFile.setValue(row,col,noData1);            }          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      inputFile2.close();      outputFile.close();    } else     if (image1Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData=inputFile1.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData);      outputFile.setPreferredPalette(inputFile1.getPreferredPalette());      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          if (z1 != noData && constant2 != 0) {            outputFile.setValue(row,col,z1 / constant2);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      outputFile.close();    } else     if (image2Bool) {      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile2.getNumberRows();      int cols=inputFile2.getNumberColumns();      double noData=inputFile2.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader2,WhiteboxRaster.DataType.FLOAT,noData);      outputFile.setPreferredPalette(inputFile2.getPreferredPalette());      for (row=0; row < rows; row++) {        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z2=data2[col];          if (z2 != noData && z2 != 0) {            outputFile.setValue(row,col,constant1 / z2);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile2.close();      outputFile.close();    } else {      showFeedback("At least one of the inputs must be a raster image.");    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void validateDashId(int dashId){  for (  DashBoard dashBoard : dashBoards) {    if (dashBoard.id == dashId) {      return;    }  }  throw new IllegalCommandException("Requested token for non-existing '" + dashId + "' dash id.");}  }
class C{  public void drawTitle(Canvas canvas,int x,int y,int width,Paint paint){  if (mRenderer.isShowLabels()) {    paint.setColor(mRenderer.getLabelsColor());    paint.setTextAlign(Align.CENTER);    paint.setTextSize(mRenderer.getChartTitleTextSize());    drawString(canvas,mRenderer.getChartTitle(),x + width / 2,y + mRenderer.getChartTitleTextSize(),paint);  }}  }
class C{  public static String generatePassword(){  return RandomStringUtils.randomAlphanumeric(DEF_COUNT);}  }
class C{  private Collection<Snapshot> loadSnapshots(){  storage.directory().mkdirs();  List<Snapshot> snapshots=new ArrayList<>();  for (  File file : storage.directory().listFiles(null)) {    if (SnapshotFile.isSnapshotFile(name,file)) {      SnapshotFile snapshotFile=new SnapshotFile(file);      SnapshotDescriptor descriptor=new SnapshotDescriptor(FileBuffer.allocate(file,SnapshotDescriptor.BYTES));      if (descriptor.locked()) {        LOGGER.debug("Loaded disk snapshot: {} ({})",snapshotFile.index(),snapshotFile.file().getName());        snapshots.add(new FileSnapshot(snapshotFile,this));        descriptor.close();      } else {        LOGGER.debug("Deleting partial snapshot: {} ({})",descriptor.index(),snapshotFile.file().getName());        descriptor.close();        descriptor.delete();      }    }  }  return snapshots;}  }
class C{  public void startElement(String uri,String localName,String qName,Attributes attributes){  if (tagIsEqual(qName,CHANNEL_TAG)) {    reading_chan=true;    processChanAboutAttribute(attributes);  }  if (tagIsEqual(qName,ITEM_TAG)) {    reading_item=true;    reading_chan=false;    itm=new RSSItem();    processItemAboutAttribute(attributes);  }  if (tagIsEqual(qName,IMAGE_TAG)) {    reading_image=true;    reading_chan=false;    img=new RSSImage();  }  if (tagIsEqual(qName,SEQ_TAG)) {    reading_seq=true;    seq=new RSSSequence();  }  if (tagIsEqual(qName,TEXTINPUT_TAG)) {    reading_input=true;    reading_chan=false;    input=new RSSTextInput();  }  if (tagIsEqual(qName,MEDIA_GROUP_TAG)) {    reading_media_group=true;    reading_item=false;    mg=new RSSMediaGroup();  }  if (tagIsEqual(qName,ENCLOSURE_TAG)) {    processEnclosureAttributes(attributes);  }  if (reading_item && !reading_media_group && (tagIsEqual(qName,MEDIA_CONTENT_TAG) || tagIsEqual(qName,MEDIA_THUMBNAIL_TAG) || tagIsEqual(qName,MEDIA_PLAYER_TAG))) {    reading_media_group=true;    mg=new RSSMediaGroup();    reading_item=false;  }  if (reading_media_group) {    if (tagIsEqual(qName,MEDIA_CONTENT_TAG)) {      processMediaContentAttributes(attributes);    }    if (tagIsEqual(qName,MEDIA_THUMBNAIL_TAG) && attributes.getValue("url") != null) {      processMediaThumbnailAttribute(attributes);    }    if (tagIsEqual(qName,MEDIA_PLAYER_TAG)) {      processMediaPlayerAttribute(attributes);    }  }  if (tagIsEqual(qName,SEQ_ELEMENT_TAG))   processSeqElement(attributes);  if (qName.toUpperCase().startsWith("SY:"))   sy=new RSSSyndicationModule();  if (tagIsEqual(qName,ITUNES_IMAGE)) {    if (chan.getRSSImage() == null) {      img=new RSSImage();      img.setUrl(attributes.getValue("href"));      chan.setRSSImage(img);    }  }  current_tag=qName;}  }
class C{  public void freeze(){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:21.257 -0400",hash_original_method="2AE20F60A8F17E979B7932BF34829741",hash_generated_method="2AE20F60A8F17E979B7932BF34829741") int compare(K k1,K k2) throws ClassCastException {  Comparator<? super K> cmp=comparator;  if (cmp != null)   return cmp.compare(k1,k2); else   return ((Comparable<? super K>)k1).compareTo(k2);}  }
class C{  public static String encode(byte source[]){  int offset=0;  int num=0;  int numBytes=0;  StringBuilder sb=new StringBuilder();  for (int i=0; i < source.length; i++) {    int b=source[offset++];    if (b < 0)     b+=256;    num=(num << 8) + b;    if (++numBytes != 3)     continue;    sb.append(intToBase64[num >> 18]);    sb.append(intToBase64[num >> 12 & 0x3f]);    sb.append(intToBase64[num >> 6 & 0x3f]);    sb.append(intToBase64[num & 0x3f]);    num=0;    numBytes=0;  }  if (numBytes > 0) {    if (numBytes == 1) {      sb.append(intToBase64[num >> 2]);      sb.append(intToBase64[num << 4 & 0x3f]);      sb.append("==");    } else {      sb.append(intToBase64[num >> 10]);      sb.append(intToBase64[num >> 4 & 0x3f]);      sb.append(intToBase64[num << 2 & 0x3f]);      sb.append('=');    }  }  return sb.toString();}  }
class C{  public Container removeChildAt(int location){  DisplayBase removed=mDisplayList.remove(location);  if (removed != null) {    removed.disable();  }  return this;}  }
class C{  protected SWFShape factorySWFShape(boolean hasAlpha,boolean hasStyle){  return new SWFShapeImpl(this,hasAlpha,hasStyle);}  }
class C{  public void initShadowTreeEvent(String typeArg,boolean canBubbleArg,boolean cancelableArg,XBLShadowTreeElement xblShadowTreeArg){  initEvent(typeArg,canBubbleArg,cancelableArg);  xblShadowTree=xblShadowTreeArg;}  }
class C{  public static final boolean isMultipartContent(HttpServletRequest request){  if (!POST_METHOD.equalsIgnoreCase(request.getMethod())) {    return false;  }  String contentType=new ServletRequestContext(request).getContentType();  if (contentType == null) {    return false;  }  if (contentType.toLowerCase(Locale.ENGLISH).startsWith(MULTIPART)) {    return true;  }  return false;}  }
class C{  protected void initializeAllLiveAttributes(){  super.initializeAllLiveAttributes();  initializeLiveAttributes();}  }
class C{  @SuppressWarnings("try") public void close() throws IOException {  try (OutputStream ostream=out){    flush();  } }  }
class C{  public void testGetCountermeasures(AbstractDosPlugin instance){  String result=instance.getCountermeasures();  assertTrue(result.length() > 0);}  }
class C{  public DateRangeBuilder addUnboundedFrom(String key,Object from){  ranges.add(new Range(key,from,null));  return this;}  }
class C{  public static Set<Permission> clonePermissionSet(CnATreeElement cte,Set<Permission> perms){  HashSet<Permission> clone=null;  if (cte == null) {    getLog().warn("Element is null");  } else   if (cte.getUuid() == null) {    getLog().warn("Element uuid is null");  }  if (perms != null) {    clone=new HashSet<Permission>(perms.size());    for (    Permission p : perms) {      Permission np=clonePermission(cte,p);      clone.add(np);    }  }  return clone;}  }
class C{  private void put122(final int b,final int s1,final int s2){  pool.put12(b,s1).putShort(s2);}  }
class C{  protected void addEdge(Map<Unit,List<Unit>> unitToSuccs,Map<Unit,List<Unit>> unitToPreds,Unit head,Unit tail){  List<Unit> headsSuccs=unitToSuccs.get(head);  if (headsSuccs == null) {    headsSuccs=new ArrayList<Unit>(3);    unitToSuccs.put(head,headsSuccs);  }  if (!headsSuccs.contains(tail)) {    headsSuccs.add(tail);    List<Unit> tailsPreds=unitToPreds.get(tail);    if (tailsPreds == null) {      tailsPreds=new ArrayList<Unit>();      unitToPreds.put(tail,tailsPreds);    }    tailsPreds.add(head);  }}  }
class C{  public Tasks<StorageProviderRestRep> scanAll(){  return postTasks(baseUrl + "/scan");}  }
class C{  public static long[] nullToEmpty(long[] array){  if (array == null || array.length == 0) {    return EMPTY_LONG_ARRAY;  }  return array;}  }
class C{  public void waitVdcRemoveDone(String vdcShortId){  String prefix=String.format("Waiting for vdc removal from cassandra with shortId '%s' ...",vdcShortId);  log.info(prefix);  DbJmxClient geoInstance=getJmxClient(LOCALHOST);  long start=System.currentTimeMillis();  while (System.currentTimeMillis() - start < DB_RING_TIMEOUT) {    try {      if (!geoInstance.isRingOwnedBy(vdcShortId)) {        log.info("vdc remove done: {}",vdcShortId);        return;      } else {        log.info("vdc removal {} not finish yet",vdcShortId);      }      TimeUnit.SECONDS.sleep(WAIT_INTERVAL_IN_SEC);    } catch (    InterruptedException ex) {    }catch (    Exception ex) {      log.error("Exception checking DB cluster status",ex);    }  }  log.info("{} Timed out",prefix);  throw new IllegalStateException(String.format("%s : Timed out",prefix));}  }
class C{  public String toString(){  return this.headerPartition.toString();}  }
class C{  @Override public boolean isRunning(){  for (  Node node : mNodes) {    if (node.animation.isRunning()) {      return true;    }  }  return false;}  }
class C{  public PointF mapViewToImage(PointF viewPoint){  float[] points=mTempValues;  points[0]=viewPoint.x;  points[1]=viewPoint.y;  mActiveTransform.invert(mActiveTransformInverse);  mActiveTransformInverse.mapPoints(points,0,points,0,1);  mapAbsoluteToRelative(points,points,1);  return new PointF(points[0],points[1]);}  }
class C{  public boolean isFullModelAvailable(){  return getLastFullSyncTime() != null;}  }
class C{  public Gradient(int[] x,int[] rgb,byte[] types){  setKnots(x,rgb,types);}  }
class C{  public T caseOperationDefinition(OperationDefinition object){  return null;}  }
class C{  public synchronized Relationship addRelationship(Relationship relationship,boolean internal,boolean init,float correctnessMultiplier){  if (!internal && !init && !this.isTemporary&& (this.network.isReadOnly() || relationship.getType().getNetwork().isReadOnly() || relationship.getTarget().getNetwork().isReadOnly())) {    MemoryStorageException exception=new MemoryStorageException("Read-only vertices cannot be modified.");    exception.printStackTrace();    throw exception;  }  Map<Relationship,Relationship> relationships=getRelationships().get(relationship.getType());  if (relationships == null) {    relationships=new HashMap<Relationship,Relationship>();    getRelationships().put(relationship.getType(),relationships);  }  Relationship existing=relationships.get(relationship);  if (existing == null) {    if (!internal) {      if (!relationship.hasIndex() || (relationship.getIndex() == Integer.MAX_VALUE)) {        relationship.setIndex(relationships.size());      }      relationship.setCorrectness(correctnessMultiplier);    }    relationships.put(relationship,relationship);    if (!init && (this.allRelationships != null)) {      this.allRelationships.add(relationship);    }    if (!internal) {      relationship.setCreationDate(new Date());    }    existing=relationship;  } else   if (!internal) {    float correctness=existing.getCorrectness();    if (correctness != 2.0f) {      if (correctness < 0) {        correctness=(-1.0f - correctness) * -1.0f;        if (correctness <= -0.99) {          correctness=-1;        }      } else {        correctness=correctness + ((1.0f - correctness) * correctnessMultiplier);        if (correctness >= 0.99) {          correctness=1;        }      }      existing.setCorrectness(correctness);    }  }  if (!internal) {    existing.incrementAccessCount();    if (relationship.getType().is(Primitive.RESPONSE)) {      this.hasResponse=Boolean.TRUE;    }    if (relationships.size() > Forgetfulness.MAX_RELATIONSHIPS) {      setIsDirty(true);    }    if ((this.allRelationships != null) && (this.allRelationships.size() > Forgetfulness.MAX_RELATIONSHIPS)) {      if (this.allRelationships.size() != totalRelationships()) {        System.out.println("Relationship corruption detected: " + this);        setIsDirty(true);      }    }  }  return existing;}  }
class C{  public ArffPanel(String filename,AbstractFileLoader... loaders){  this();  loadFile(filename,loaders);}  }
class C{  public void resetTimer(){  this.timer=0;}  }
class C{  public void hide(){  mFabExpandLayout.setVisibility(View.INVISIBLE);  mFabType=FAB_CIRCLE;}  }
class C{  public boolean canBeShortAddress(int address){  return (address <= 127);}  }
class C{  public void error(Throwable throwable,String msg,Object arg0){  innerLog(Level.ERROR,throwable,msg,arg0,UNKNOWN_ARG,UNKNOWN_ARG,null);}  }
class C{  public void clear(){  al.clear();}  }
class C{  public void putHashOnly(String hash){  this.cache.put(hash,null);}  }
class C{  private void removeEntry(String key){  CacheHeader entry=mEntries.get(key);  if (entry != null) {    mTotalSize-=entry.size;    mEntries.remove(key);  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:02.995 -0500",hash_original_method="62A24BB1F647222AA978F8E837B2D330",hash_generated_method="D168F58C77AFC7F485C17CA9A1350579") private boolean retryAfterDisconnected(String reason){  boolean retry=true;  if (Phone.REASON_RADIO_TURNED_OFF.equals(reason)) {    retry=false;  }  return retry;}  }
class C{  public boolean isEmpty(){  return stack.isEmpty();}  }
class C{  private static DeployerServiceGroup createDeployerServiceGroup(PhotonControllerConfig photonControllerConfig,DeployerConfig deployerConfig,ServerSet apiFeServerSet,ServerSet cloudStoreServerSet,CloseableHttpAsyncClient httpClient){  logger.info("Creating Deployer Service Group");  try {    deployerConfig.setContainersConfig(new ServiceConfigurator().generateContainersConfig(deployerConfig.getDeployerContext().getConfigDirectory()));  } catch (  Exception e) {    throw new RuntimeException(e);  }  final DockerProvisionerFactory dockerProvisionerFactory=new com.vmware.photon.controller.core.Main.DockerProvisionerFactoryImpl();  final ApiClientFactory apiClientFactory=new ApiClientFactory(apiFeServerSet,httpClient,deployerConfig.getDeployerContext().getSharedSecret(),deployerConfig.getDeployerContext().isAuthEnabled());  final BlockingQueue<Runnable> blockingQueue=new LinkedBlockingDeque<>();  final ListeningExecutorService listeningExecutorService=MoreExecutors.listeningDecorator(new ThreadPoolExecutor(deployerConfig.getDeployerContext().getCorePoolSize(),deployerConfig.getDeployerContext().getMaximumPoolSize(),deployerConfig.getDeployerContext().getKeepAliveTime(),TimeUnit.SECONDS,blockingQueue));  final HttpFileServiceClientFactory httpFileServiceClientFactory=new com.vmware.photon.controller.core.Main.HttpFileServiceClientFactoryImpl();  final AuthHelperFactory authHelperFactory=new com.vmware.photon.controller.core.Main.AuthHelperFactoryImpl();  final HealthCheckHelperFactory healthCheckHelperFactory=new com.vmware.photon.controller.core.Main.HealthCheckHelperFactoryImpl();  final ServiceConfiguratorFactory serviceConfiguratorFactory=new com.vmware.photon.controller.core.Main.ServiceConfiguratorFactoryImpl();  final ZookeeperClientFactory zookeeperServerSetBuilderFactory=new com.vmware.photon.controller.core.Main.ZookeeperClientFactoryImpl();  final HostManagementVmAddressValidatorFactory hostManagementVmAddressValidatorFactory=new com.vmware.photon.controller.core.Main.HostManagementVmAddressValidatorFactoryImpl();  final ClusterManagerFactory clusterManagerFactory=new ClusterManagerFactory(listeningExecutorService,httpClient,apiFeServerSet,deployerConfig.getDeployerContext().getSharedSecret(),cloudStoreServerSet,Paths.get(deployerConfig.getDeployerContext().getScriptDirectory(),CLUSTER_SCRIPTS_DIRECTORY).toString(),deployerConfig.getDeployerContext().isAuthEnabled());  return new DeployerServiceGroup(deployerConfig.getDeployerContext(),dockerProvisionerFactory,apiClientFactory,deployerConfig.getContainersConfig(),listeningExecutorService,httpFileServiceClientFactory,authHelperFactory,healthCheckHelperFactory,serviceConfiguratorFactory,zookeeperServerSetBuilderFactory,hostManagementVmAddressValidatorFactory,clusterManagerFactory);}  }
class C{  public double optDouble(String key){  return this.optDouble(key,Double.NaN);}  }
class C{  public static <A>List<A> from(A[] array){  List<A> xs=nil();  if (array != null)   for (int i=array.length - 1; i >= 0; i--)   xs=new List<A>(array[i],xs);  return xs;}  }
class C{  public synchronized void openDriver(SurfaceHolder holder) throws IOException {  Camera theCamera=camera;  if (theCamera == null) {    theCamera=new OpenCameraManager().build().open();    if (theCamera == null) {      throw new IOException();    }    camera=theCamera;  }  theCamera.setPreviewDisplay(holder);  if (!initialized) {    initialized=true;    configManager.initFromCameraParameters(theCamera);    if (requestedFramingRectWidth > 0 && requestedFramingRectHeight > 0) {      setManualFramingRect(requestedFramingRectWidth,requestedFramingRectHeight);      requestedFramingRectWidth=0;      requestedFramingRectHeight=0;    }  }  Camera.Parameters parameters=theCamera.getParameters();  String parametersFlattened=parameters == null ? null : parameters.flatten();  try {    configManager.setDesiredCameraParameters(theCamera,false);  } catch (  RuntimeException re) {    Log.w(TAG,"Camera rejected parameters. Setting only minimal safe-mode parameters");    Log.i(TAG,"Resetting to saved camera params: " + parametersFlattened);    if (parametersFlattened != null) {      parameters=theCamera.getParameters();      parameters.unflatten(parametersFlattened);      try {        theCamera.setParameters(parameters);        configManager.setDesiredCameraParameters(theCamera,true);      } catch (      RuntimeException re2) {        Log.w(TAG,"Camera rejected even safe-mode parameters! No configuration");      }    }  }}  }
class C{  private void readObject(){}  }
class C{  public List read() throws IOException, ParseException {  if (file != null)   reader=new FileReader(file);  count=0;  try {    BufferedReader bufferedReader=new BufferedReader(reader);    try {      return read(bufferedReader);    }  finally {      bufferedReader.close();    }  }  finally {    reader.close();  }}  }
class C{  public static boolean validateChannel(String channel){  try {    return channel.matches("(?i)^#{0,1}" + USERNAME_REGEX + "$");  } catch (  PatternSyntaxException|NullPointerException ex) {    return false;  }}  }
class C{  public void SummonRat(){  final ActorNPC newCreature=new ActorNPC(false);  final Creature model=TPPQuestHelperFunctions.getRandomRat();  newCreature.setRPClass("creature");  newCreature.put("type","creature");  newCreature.put("title_type","enemy");  newCreature.setEntityClass(model.get("class"));  newCreature.setEntitySubclass(model.get("subclass"));  newCreature.setName("attracted " + model.getName());  newCreature.setDescription(model.getDescription());  newCreature.setResistance(0);  newCreature.setPosition(piedpiper.getX(),piedpiper.getY());  piedpiper.getZone().add(newCreature);  logger.debug("rat summoned");}  }
class C{  public boolean userCanViewGroup(int connectedUserId,String entidad) throws Exception {  boolean can=false;  try {    can=hasUserGroupAuth(connectedUserId,USER_ACTION_ID_VIEW,ISicresAdminDefsKeys.NULL_ID,entidad);  } catch (  Exception e) {    _logger.error(e);    throw e;  }  return can;}  }
class C{  public static GreeterFutureStub newFutureStub(io.grpc.Channel channel){  return new GreeterFutureStub(channel);}  }
class C{  public static boolean isEncoded(final HttpEntity entity){  final Header contentType=entity.getContentType();  return (contentType != null && contentType.getValue().equalsIgnoreCase(CONTENT_TYPE));}  }
class C{  public Track queue(IAudioProvider provider){  Track track=new Track(provider);  queue(track);  return track;}  }
class C{  public int startCode(int segment){  isValidIndex(segment);  return startCode(this.data,this.segCount,segment);}  }
class C{  public void cancel(){  cancel=true;}  }
class C{  public basefont removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  ConstraintsChecker(int certPathLength){  this.certPathLength=certPathLength;}  }
class C{  public void checkAndSetupBootStrapInfo(DbClient dbClient){  if (onStandby) {    _log.info("Skip boot strap info initialization on standby site");    return;  }  if (_vdcList != null && _vdcList.size() > 1) {    _log.info("Skip root tenant check for more than one vdcs. Current number of vdcs: {}",_vdcList.size());    return;  }  int retryIntervalSecs=DBINIT_RETRY_INTERVAL;  boolean done=false;  boolean wait;  while (!done) {    wait=false;    InterProcessLock lock=null;    try {      lock=_coordinator.getLock(getBootstrapLockName());      _log.info("bootstrap info check - waiting for bootstrap lock");      lock.acquire();      if (isGeoDbsvc()) {        insertDefaultRootTenant(dbClient);      } else {        insertMyVdcInfo(dbClient);        insertVdcVersion(dbClient);        insertPasswordHistory(dbClient);      }      done=true;    } catch (    Exception e) {      if (e instanceof IllegalStateException) {        throw (IllegalStateException)e;      } else {        _log.warn("Exception while checking for bootstrap info, will retry in {} secs",retryIntervalSecs,e);        wait=true;      }    } finally {      if (lock != null) {        try {          lock.release();        } catch (        Exception e) {          _log.error("Fail to release lock",e);        }      }    }    if (wait) {      try {        Thread.sleep(retryIntervalSecs * 1000);      } catch (      InterruptedException ex) {        _log.warn("Thread is interrupted during wait for retry",ex);      }    }  }}  }
class C{  private void buildLinearModel(int[] indices) throws Exception {  Instances reducedInst=new Instances(m_instances);  Remove attributeFilter=new Remove();  attributeFilter.setInvertSelection(true);  attributeFilter.setAttributeIndicesArray(indices);  attributeFilter.setInputFormat(reducedInst);  reducedInst=Filter.useFilter(reducedInst,attributeFilter);  LinearRegression temp=new LinearRegression();  temp.buildClassifier(reducedInst);  double[] lmCoeffs=temp.coefficients();  double[] coeffs=new double[m_instances.numAttributes()];  for (int i=0; i < lmCoeffs.length - 1; i++) {    if (indices[i] != m_classIndex) {      coeffs[indices[i]]=lmCoeffs[i];    }  }  m_nodeModel=new PreConstructedLinearModel(coeffs,lmCoeffs[lmCoeffs.length - 1]);  m_nodeModel.buildClassifier(m_instances);}  }
class C{  @Override public Iterator<List<T>> iterator(){  if (isDuplicateIterator())   return new DuplicatedPermutationIterator<>(this); else   return new SimplePermutationIterator<>(this);}  }
class C{  @Override public synchronized void prepare() throws ReplicatorException, InterruptedException {  connectionManager=new SqlConnectionManager();  connectionManager.setConnectionSpec(connectionSpec);  connectionManager.setCsvSpec(csv);  connectionManager.setPrivileged(privileged);  connectionManager.setLogOperations(logOperations);  connectionManager.prepare();  commitSeqno=new SqlCommitSeqno(connectionManager,connectionSpec.getSchema(),connectionSpec.getTableType());  commitSeqno.setChannels(channels);  commitSeqno.configure();  commitSeqno.prepare();}  }
class C{  public String skipIdenticalTipText(){  return "Whether to skip identical instances (with distance 0 to the target)";}  }
class C{  public static byte[] randomBytes(char len){  byte[] data=new byte[len];  for (int i=0; i < len; i++) {    data[i]=randomByte();  }  return data;}  }
class C{  public boolean isLOWER_EQUAL(){  return value == LOWER_EQUAL;}  }
class C{  public TypedRead<K,V> withTimestampFn(SerializableFunction<KV<K,V>,Instant> timestampFn){  checkNotNull(timestampFn);  return withTimestampFn2(unwrapKafkaAndThen(timestampFn));}  }
class C{  @ObjectiveCName("unbindRawFileWithFileId:autoCancel:withCallback:") public void unbindRawFile(long fileId,boolean isAutoCancel,FileCallback callback){  modules.getFilesModule().unbindFile(fileId,callback,isAutoCancel);}  }
class C{  public void paint(Graphics g){  g.translate(0,translateY);  super.paint(g);}  }
class C{  public boolean hasRole(User user,Set<AccessRight> accessRights,Role role){  boolean hasRole=false;  if (user.isSuperUser()) {    hasRole=true;  } else {    if (accessRights != null) {      for (      AccessRight right : accessRights) {        boolean roleOk=false;switch (role) {case OWNER:          if (right.getRole() == Role.OWNER) {            roleOk=true;          }        break;case WRITE:      if (right.getRole() == Role.OWNER || right.getRole() == Role.WRITE) {        roleOk=true;      }    break;case READ:  if (right.getRole() == Role.OWNER || right.getRole() == Role.WRITE || right.getRole() == Role.READ) {    roleOk=true;  }break;case EXECUTE:if (right.getRole() == Role.OWNER || right.getRole() == Role.WRITE || right.getRole() == Role.READ || right.getRole() == Role.EXECUTE) {roleOk=true;}break;case NONE:if (right.getRole() == Role.OWNER || right.getRole() == Role.WRITE || right.getRole() == Role.READ || right.getRole() == Role.NONE) {roleOk=true;}break;}if (roleOk) {if ((right.getUserId() != null) && right.getUserId().equals(user.getId().getUserId())) {hasRole=true;return hasRole;} else {for (String group : user.getGroupsAndUpgrades()) {if ((right.getGroupId() != null) && right.getGroupId().equals(group)) {hasRole=true;return hasRole;}}}}}}}return hasRole;}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.main);  mContext=this;  setUpMenu();  if (savedInstanceState == null)   getSupportFragmentManager().beginTransaction().replace(R.id.main_fragment,new HomeFragment(),"fragment").setTransitionStyle(FragmentTransaction.TRANSIT_FRAGMENT_FADE).commit();}  }
class C{  public void processKeyEvent(KeyEvent e,MenuElement path[],MenuSelectionManager manager){  if (DEBUG) {    System.out.println("in JMenuItem.processKeyEvent/3 for " + getText() + "  "+ KeyStroke.getKeyStrokeForEvent(e));  }  MenuKeyEvent mke=new MenuKeyEvent(e.getComponent(),e.getID(),e.getWhen(),e.getModifiers(),e.getKeyCode(),e.getKeyChar(),path,manager);  processMenuKeyEvent(mke);  if (mke.isConsumed()) {    e.consume();  }}  }
class C{  private void handleSendText(Intent intent){  AppLog.v(this,"handleSendText()");  try {    setSharedTexts(null,intent.getStringExtra(Intent.EXTRA_TEXT));    openDiasporaUrl(urls.getNewPostUrl());  } catch (  Exception e) {    AppLog.e(this,e.toString());  }}  }
class C{  public static void main(final String[] args) throws IOException {  final BufferedReader input=new BufferedReader(new InputStreamReader(System.in));  String line;  while ((line=input.readLine()) != null) {    System.out.println(line.length());  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static void executedAndThenSendIndividualToMaster(TestSuiteChromosome testSuite) throws IllegalArgumentException {  if (testSuite == null) {    throw new IllegalArgumentException("No defined test suite to send");  }  if (!Properties.NEW_STATISTICS)   return;  for (  TestChromosome test : testSuite.getTestChromosomes()) {    if (test.getLastExecutionResult() == null) {      ExecutionResult result=TestCaseExecutor.runTest(test.getTestCase());      test.setLastExecutionResult(result);    }  }  sendCoveredInfo(testSuite);  sendExceptionInfo(testSuite);  sendIndividualToMaster(testSuite);}  }
class C{  public boolean isNoise(){  return noise;}  }
class C{  boolean descendsFrom(String cname){  cp_info cf;  int i;  cf=constant_pool[super_class];  if (cf.toString(constant_pool).compareTo(cname) == 0)   return true;  for (i=0; i < interfaces_count; i++) {    cf=constant_pool[interfaces[i]];    if (cf.toString(constant_pool).compareTo(cname) == 0)     return true;  }  return false;}  }
class C{  public void statisticsStart(){  FileStore fs=store.getFileStore();  statisticsStart=fs == null ? 0 : fs.getReadCount();}  }
class C{  private static void findBidirectionalEdges(List<Tuple<Integer,Integer>> edgeList,String path,String fileName){  log.info("Looking for bidirectional edges.");  List<Tuple<Integer,Integer>> bidirectionalList=new ArrayList<Tuple<Integer,Integer>>();  List<Tuple<Integer,Integer>> toRemoveList=new ArrayList<Tuple<Integer,Integer>>();  for (int i=0; i < edgeList.size(); i++) {    Tuple<Integer,Integer> thisEdge=edgeList.get(i);    int source=thisEdge.getFirst();    int destination=thisEdge.getSecond();    Tuple<Integer,Integer> reverseEdge=new Tuple<Integer,Integer>(destination,source);    int reverseSource=reverseEdge.getFirst();    int reverseDestination=reverseEdge.getSecond();    if (toRemoveList.contains(reverseEdge)) {    } else {      for (int j=0; j < edgeList.size(); j++) {        Tuple<Integer,Integer> nextEdge=edgeList.get(j);        int nextSource=nextEdge.getFirst();        int nextDestination=nextEdge.getSecond();        if ((reverseSource == nextSource) && (reverseDestination == nextDestination)) {          bidirectionalList.add(thisEdge);          toRemoveList.add(thisEdge);          toRemoveList.add(nextEdge);        }      }    }  }  edgeList.removeAll(toRemoveList);  String bidirectionalFileName=fileName + "_bidirectional.txt";  String onedirectionalFileName=fileName + "_onedirectional.txt";  writeOutput(bidirectionalList,path,fileName,bidirectionalFileName);  writeOutput(edgeList,path,fileName,onedirectionalFileName);}  }
class C{  public List<String> compactAttributeValue(String value,int start){  List<String> result=new ArrayList<String>();  if (start > value.length()) {    result.add(value);    return result;  }  WbXmlAttributeValueDef valueDef=new WbXmlAttributeValueDef(value.substring(start),(byte)0x0,(byte)0x0);  for (  WbXmlAttributeValueDef attrVal : attrValuesByValue.tailSet(valueDef)) {    List<String> found=matches(value,attrVal.getValue(),start,true);    if (found != null) {      return found;    }  }  result.add(value);  return result;}  }
class C{  public String toString(int indentFactor) throws JSONException {  StringWriter sw=new StringWriter();synchronized (sw.getBuffer()) {    return this.write(sw,indentFactor,0).toString();  }}  }
class C{  public final boolean contains(double x,double y){  return this.screenRect.contains(x,y);}  }
class C{  public static void finalizeForDeletion(UIComponent c){  c.getAttributes().remove(MARK_DELETED);  int sz=c.getChildCount();  if (sz > 0) {    UIComponent cc=null;    List cl=c.getChildren();    while (--sz >= 0) {      cc=(UIComponent)cl.get(sz);      if (cc.getAttributes().containsKey(MARK_DELETED)) {        cl.remove(sz);      }    }  }  Map<String,UIComponent> facets=c.getFacets();  if (facets.size() > 0) {    Set<Entry<String,UIComponent>> col=facets.entrySet();    UIComponent fc;    Entry<String,UIComponent> curEntry;    for (Iterator<Entry<String,UIComponent>> itr=col.iterator(); itr.hasNext(); ) {      curEntry=itr.next();      fc=curEntry.getValue();      Map<String,Object> attrs=fc.getAttributes();      if (attrs.containsKey(MARK_DELETED)) {        itr.remove();      } else       if (attrs.containsKey(IMPLICIT_PANEL) && !curEntry.getKey().equals(UIViewRoot.METADATA_FACET_NAME)) {        List<UIComponent> implicitPanelChildren=fc.getChildren();        UIComponent innerChild;        for (Iterator<UIComponent> innerItr=implicitPanelChildren.iterator(); innerItr.hasNext(); ) {          innerChild=innerItr.next();          if (innerChild.getAttributes().containsKey(MARK_DELETED)) {            innerItr.remove();          }        }      }    }  }}  }
class C{  protected void installListeners(){  frame.addPropertyChangeListener(this);  addPropertyChangeListener(this);}  }
class C{  public StunResponseEvent(StunStack stunStack,RawMessage rawMessage,Response response,Request request,TransactionID transactionID){  super(stunStack,rawMessage,response);  this.request=request;  super.setTransactionID(transactionID);}  }
class C{  protected void switchState(char testChar) throws FBSQLParseException {  if (Character.isWhitespace(testChar) && !isInState(LITERAL_STATE)) {    setState(SPACE_STATE);    return;  }switch (testChar) {case '\'':    if (isInState(NORMAL_STATE))     setState(LITERAL_STATE); else     if (isInState(LITERAL_STATE))     setState(NORMAL_STATE);  break;case ',':if (!isInState(LITERAL_STATE) && !isInState(BRACE_STATE)) setState(COMMA_STATE);break;case '(':case ')':if (!isInState(LITERAL_STATE)) setState(BRACE_STATE);break;case '{':case '}':if (!isInState(LITERAL_STATE)) setState(CURLY_BRACE_STATE);break;default :if (!isInState(LITERAL_STATE) && !isInState(BRACE_STATE)) setState(NORMAL_STATE);}}  }
class C{  static int applyMaskPenaltyRule3(ByteMatrix matrix){  int penalty=0;  byte[][] array=matrix.getArray();  int width=matrix.getWidth();  int height=matrix.getHeight();  for (int y=0; y < height; y++) {    for (int x=0; x < width; x++) {      if (x + 6 < width && array[y][x] == 1 && array[y][x + 1] == 0 && array[y][x + 2] == 1 && array[y][x + 3] == 1 && array[y][x + 4] == 1 && array[y][x + 5] == 0 && array[y][x + 6] == 1 && ((x + 10 < width && array[y][x + 7] == 0 && array[y][x + 8] == 0 && array[y][x + 9] == 0 && array[y][x + 10] == 0) || (x - 4 >= 0 && array[y][x - 1] == 0 && array[y][x - 2] == 0 && array[y][x - 3] == 0 && array[y][x - 4] == 0))) {        penalty+=N3;      }      if (y + 6 < height && array[y][x] == 1 && array[y + 1][x] == 0 && array[y + 2][x] == 1 && array[y + 3][x] == 1 && array[y + 4][x] == 1 && array[y + 5][x] == 0 && array[y + 6][x] == 1 && ((y + 10 < height && array[y + 7][x] == 0 && array[y + 8][x] == 0 && array[y + 9][x] == 0 && array[y + 10][x] == 0) || (y - 4 >= 0 && array[y - 1][x] == 0 && array[y - 2][x] == 0 && array[y - 3][x] == 0 && array[y - 4][x] == 0))) {        penalty+=N3;      }    }  }  return penalty;}  }
class C{  public void loadIdentity(){  mMat[0]=1;  mMat[1]=0;  mMat[2]=0;  mMat[3]=0;  mMat[4]=1;  mMat[5]=0;  mMat[6]=0;  mMat[7]=0;  mMat[8]=1;}  }
class C{  protected void layoutMajorAxis(int targetSpan,int axis,int[] offsets,int[] spans){  rowIterator.setLayoutArrays(offsets,spans);  CSS.calculateTiledLayout(rowIterator,targetSpan);  if (captionIndex != -1) {    View caption=getView(captionIndex);    int h=(int)caption.getPreferredSpan(Y_AXIS);    spans[captionIndex]=h;    short boxBottom=(short)painter.getInset(BOTTOM,this);    if (boxBottom != getBottomInset()) {      offsets[captionIndex]=targetSpan + boxBottom;    } else {      offsets[captionIndex]=-getTopInset();    }  }}  }
class C{  @Override public void onPinchToZoom(float desiredScaleFactor,float focusX,float focusY){  mMatrixHelper.scale(getMeasuredWidth(),getMeasuredHeight(),desiredScaleFactor,focusX,focusY);}  }
class C{  public static MeasurementSimulatorParams serializableInstance(){  MeasurementSimulatorParams params=new MeasurementSimulatorParams(new Parameters());  params.setHistory(new GeneHistory(BasalInitializer.serializableInstance(),BooleanGlassFunction.serializableInstance()));  return params;}  }
class C{  boolean isLiteral(Map attrs){  if (!super.isLiteral(attrs)) {    if (attrs == null) {      return false;    }    int size=attrs.size();    if (attrs.get(NumberFormat.Field.GROUPING_SEPARATOR) != null) {      size--;      if (attrs.get(NumberFormat.Field.INTEGER) != null) {        size--;      }    }    if (attrs.get(NumberFormat.Field.EXPONENT_SYMBOL) != null) {      size--;    }    if (attrs.get(NumberFormat.Field.PERCENT) != null) {      size--;    }    if (attrs.get(NumberFormat.Field.PERMILLE) != null) {      size--;    }    if (attrs.get(NumberFormat.Field.CURRENCY) != null) {      size--;    }    if (attrs.get(NumberFormat.Field.SIGN) != null) {      size--;    }    return size == 0;  }  return true;}  }
class C{  public static String replaceChars(String str,String oldchars,char newchar){  int pos=indexOfChars(str,oldchars);  if (pos == -1) {    return str;  }  StringBuilder buf=new StringBuilder(str);  do {    buf.setCharAt(pos,newchar);    pos=indexOfChars(str,oldchars,pos + 1);  } while (pos != -1);  return buf.toString();}  }
class C{  private static int blend_darkest(int a,int b){  int f=(b & ALPHA_MASK) >>> 24;  return (low(((a & ALPHA_MASK) >>> 24) + f,0xff) << 24 | mix(a & RED_MASK,low(a & RED_MASK,((b & RED_MASK) >> 8) * f),f) & RED_MASK | mix(a & GREEN_MASK,low(a & GREEN_MASK,((b & GREEN_MASK) >> 8) * f),f) & GREEN_MASK | mix(a & BLUE_MASK,low(a & BLUE_MASK,((b & BLUE_MASK) * f) >> 8),f));}  }
class C{  public void updateActiveSeqno(long activeSeqno){  diskLog.setActiveSeqno(activeSeqno);}  }
class C{  public JSONObject makeProblemPostedProps(final String category,final Attachment attachment,final int postLength){  JSONObject props;  try {    props=new JSONObject();    props.put("Category",category);    props.put("Attachment",attachment.code);    props.put("Length",postLength);  } catch (  JSONException e) {    Logger.e(TAG,"Error building Mixpanel Props",e);    props=null;  }  return props;}  }
class C{  public CertificateRequest(byte[] certificate_types,X509Certificate[] accepted){  if (accepted == null) {    fatalAlert(AlertProtocol.INTERNAL_ERROR,"CertificateRequest: array of certificate authority certificates is null");  }  this.certificate_types=certificate_types;  int totalPrincipalsLength=0;  certificate_authorities=new X500Principal[accepted.length];  encoded_principals=new byte[accepted.length][];  for (int i=0; i < accepted.length; i++) {    certificate_authorities[i]=accepted[i].getIssuerX500Principal();    encoded_principals[i]=certificate_authorities[i].getEncoded();    totalPrincipalsLength+=encoded_principals[i].length + 2;  }  length=3 + certificate_types.length + totalPrincipalsLength;}  }
class C{  public static DeleteSessionsForSessionId parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  DeleteSessionsForSessionId object=new DeleteSessionsForSessionId();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"deleteSessionsForSessionId".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (DeleteSessionsForSessionId)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","sessionId").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setSessionId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement())     throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  protected final void complete(){  if (done) {    return;  }  done=true;  actual.onComplete();}  }
class C{  protected PredictiveInfoCalculatorViaMutualInfo(MutualInfoCalculatorMultiVariate miCalc){  construct(miCalc);}  }
class C{  public MqttPubRel(MqttPubRec pubRec){  super(MqttWireMessage.MESSAGE_TYPE_PUBREL);  this.setMessageId(pubRec.getMessageId());}  }
class C{  public static PDFDecrypter createDecryptor(PDFObject encryptDict,PDFObject documentId,PDFPassword password) throws IOException, EncryptionUnsupportedByPlatformException, EncryptionUnsupportedByProductException, PDFAuthenticationFailureException {  password=PDFPassword.nonNullPassword(password);  if (encryptDict == null) {    return IdentityDecrypter.getInstance();  } else {    PDFObject filter=encryptDict.getDictRef("Filter");    if (filter != null && "Standard".equals(filter.getStringValue())) {      final PDFObject vObj=encryptDict.getDictRef("V");      int v=vObj != null ? vObj.getIntValue() : 0;      if (v == 1 || v == 2) {        final PDFObject lengthObj=encryptDict.getDictRef("Length");        final Integer length=lengthObj != null ? lengthObj.getIntValue() : null;        return createStandardDecrypter(encryptDict,documentId,password,length,false,StandardDecrypter.EncryptionAlgorithm.RC4);      } else       if (v == 4) {        return createCryptFilterDecrypter(encryptDict,documentId,password,v);      } else {        throw new EncryptionUnsupportedByPlatformException("Unsupported encryption version: " + v);      }    } else     if (filter == null) {      throw new PDFParseException("No Filter specified in Encrypt dictionary");    } else {      throw new EncryptionUnsupportedByPlatformException("Unsupported encryption Filter: " + filter + "; only Standard is supported.");    }  }}  }
class C{  public CommentObject(){  super();}  }
class C{  private void initUploadTaskDialog(final boolean newDialog){  if (newDialog) {    mUploadProgress=new ProgressDialog(this);    mUploadProgress.setCancelable(false);    mUploadProgress.setIndeterminate(true);    final String defaultTitle=getResources().getString(R.string.preparing_export);    final String defaultMessage=getResources().getString(R.string.please_stay_patient);    mUploadProgress.setTitle(defaultTitle);    mUploadProgress.setMessage(defaultMessage);    mUploadTaskFragment.retainProgress(defaultTitle,defaultMessage,mUploadProgress.getProgress());  } else {    mUploadProgress=new ProgressDialog(this);    mUploadProgress.setCancelable(false);    mUploadProgress.setIndeterminate(true);    mUploadTaskFragment.restoreProgress(mUploadProgress);  }}  }
class C{  public boolean isNotifyRetract(){  return parseBoolean(getFieldValue(ConfigureNodeFields.notify_retract));}  }
class C{  @Override public <OutputT extends POutput,InputT extends PInput>OutputT apply(PTransform<InputT,OutputT> transform,InputT input){  if (Combine.GroupedValues.class.equals(transform.getClass()) || GroupByKey.class.equals(transform.getClass())) {    @SuppressWarnings("unchecked") PCollection<?> pc=(PCollection<?>)input;    @SuppressWarnings("unchecked") OutputT outputT=(OutputT)PCollection.createPrimitiveOutputInternal(pc.getPipeline(),transform instanceof GroupByKey ? ((GroupByKey<?,?>)transform).updateWindowingStrategy(pc.getWindowingStrategy()) : pc.getWindowingStrategy(),pc.isBounded());    return outputT;  } else   if (Window.Bound.class.equals(transform.getClass())) {    @SuppressWarnings("unchecked") OutputT windowed=(OutputT)applyWindow((Window.Bound<?>)transform,(PCollection<?>)input);    return windowed;  } else   if (Flatten.FlattenPCollectionList.class.equals(transform.getClass()) && ((PCollectionList<?>)input).size() == 0) {    return (OutputT)Pipeline.applyTransform(input.getPipeline().begin(),Create.of());  } else   if (overrides.containsKey(transform.getClass())) {    @SuppressWarnings("unchecked") Class<PTransform<InputT,OutputT>> transformClass=(Class<PTransform<InputT,OutputT>>)transform.getClass();    @SuppressWarnings("unchecked") Class<PTransform<InputT,OutputT>> customTransformClass=(Class<PTransform<InputT,OutputT>>)overrides.get(transform.getClass());    PTransform<InputT,OutputT> customTransform=InstanceBuilder.ofType(customTransformClass).withArg(DataflowRunner.class,this).withArg(transformClass,transform).build();    return Pipeline.applyTransform(input,customTransform);  } else {    return super.apply(transform,input);  }}  }
class C{  private List buildEdgeRings(Collection dirEdges){  List edgeRings=new ArrayList();  for (Iterator it=dirEdges.iterator(); it.hasNext(); ) {    DirectedEdge de=(DirectedEdge)it.next();    if (de.isInResult() && de.getEdgeRing() == null) {      MaximalEdgeRing er=new MaximalEdgeRing(de,geometryFactory);      er.linkDirectedEdgesForMinimalEdgeRings();      List minEdgeRings=er.buildMinimalRings();      edgeRings.addAll(minEdgeRings);    }  }  return edgeRings;}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_lang_String03() throws Exception {  for (  String invalidValue : invalidValues) {    for (    String validValue : getValidValues()) {      try {        TrustManagerFactory.getInstance(validValue,invalidValue);        fail("NoSuchProviderException must be thrown (algorithm: ".concat(validValue).concat(" provider: ").concat(invalidValue).concat(")"));      } catch (      NoSuchProviderException expected) {        assertFalse("".equals(invalidValue));      }catch (      IllegalArgumentException expected) {        assertEquals("",invalidValue);      }    }  }}  }
class C{  protected void appendDetail(final StringBuffer buffer,final String fieldName,final char[] array){  buffer.append(arrayStart);  for (int i=0; i < array.length; i++) {    if (i > 0) {      buffer.append(arraySeparator);    }    appendDetail(buffer,fieldName,array[i]);  }  buffer.append(arrayEnd);}  }
class C{  protected void addComputedTypeAnnotations(Tree tree,AnnotatedTypeMirror type,boolean iUseFlow){  assert root != null : "GenericAnnotatedTypeFactory.addComputedTypeAnnotations: " + " root needs to be set when used on trees; factory: " + this.getClass();  treeAnnotator.visit(tree,type);  typeAnnotator.visit(type,null);  defaults.annotate(tree,type);  if (iUseFlow) {    Value as;    if (tree.getKind() == Kind.POSTFIX_DECREMENT || tree.getKind() == Kind.POSTFIX_INCREMENT) {      as=getInferredValueFor(((UnaryTree)tree).getExpression());    } else {      as=getInferredValueFor(tree);    }    if (as != null) {      applyInferredAnnotations(type,as);    }  }}  }
class C{  protected void paintBackground(Graphics g,JMenuItem menuItem,Color bgColor){  ButtonModel model=menuItem.getModel();  Color oldColor=g.getColor();  int menuWidth=menuItem.getWidth();  int menuHeight=menuItem.getHeight();  if (menuItem.isOpaque()) {    if (model.isArmed() || (menuItem instanceof JMenu && model.isSelected())) {      g.setColor(bgColor);      g.fillRect(0,0,menuWidth,menuHeight);    } else {      g.setColor(menuItem.getBackground());      g.fillRect(0,0,menuWidth,menuHeight);    }    g.setColor(oldColor);  } else   if (model.isArmed() || (menuItem instanceof JMenu && model.isSelected())) {    g.setColor(bgColor);    g.fillRect(0,0,menuWidth,menuHeight);    g.setColor(oldColor);  }}  }
class C{  public static void seekTo(Context context,String clientId,int milli){  Intent intent=new Intent(context,PlaybackService.class);  intent.setAction(ACTION_SEEK_TO);  intent.putExtra(BUNDLE_KEY_SOUND_CLOUD_CLIENT_ID,clientId);  intent.putExtra(BUNDLE_KEY_SOUND_CLOUD_TRACK_POSITION,milli);  context.startService(intent);}  }
class C{  private float findEdgeSpan(View v,int axis,int fp,int p0,int p1){  int len=p1 - p0;  if (len <= 1) {    return v.getMinimumSpan(axis);  } else {    int mid=p0 + len / 2;    boolean startEdge=mid > fp;    View f=startEdge ? v.createFragment(fp,mid) : v.createFragment(mid,fp);    boolean breakable=f.getBreakWeight(axis,0,f.getMaximumSpan(axis)) > View.BadBreakWeight;    if (breakable == startEdge) {      p1=mid;    } else {      p0=mid;    }    return findEdgeSpan(f,axis,fp,p0,p1);  }}  }
class C{  public boolean isSetPort(){  return EncodingUtils.testBit(__isset_bitfield,__PORT_ISSET_ID);}  }
class C{  public static String extractResponse(IDiagnosticsLogger log,StringWriter sw){  String samlResponseField="<input type=\"hidden\" name=\"SAMLResponse\" value=\"";  String responseAsString=sw.toString();  log.debug("Received response " + responseAsString);  int index=responseAsString.indexOf(samlResponseField);  assertTrue(index >= 0);  int startIndex=index + samlResponseField.length();  int endIndex=responseAsString.indexOf('\"',startIndex);  assertTrue(endIndex >= 0);  String encodedSamlResponse=responseAsString.substring(startIndex,endIndex);  String decodedSamlResponse=new String(Base64.decode(encodedSamlResponse));  return decodedSamlResponse;}  }
class C{  public Storage file(){  return new Storage(this);}  }
class C{  public MenuInflater(Context context,Object realOwner){  mContext=context;  mRealOwner=realOwner;  mActionViewConstructorArguments=new Object[]{context};  mActionProviderConstructorArguments=mActionViewConstructorArguments;}  }
class C{  public boolean isHoleTransparent(){  return ((PieChartRenderer)mRenderer).getPaintHole().getXfermode() != null;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public void loadPixels(){  if (pixels == null || pixels.length != width * height) {    pixels=new int[width * height];  }  if (bitmap != null) {    bitmap.getPixels(pixels,0,width,0,0,width,height);  }  setLoaded();}  }
class C{  protected void processElement(String defaultNamespace,Properties namespaces) throws Exception {  String fullName=XMLUtil.scanIdentifier(this.reader);  String name=fullName;  XMLUtil.skipWhitespace(this.reader,null);  String prefix=null;  int colonIndex=name.indexOf(':');  if (colonIndex > 0) {    prefix=name.substring(0,colonIndex);    name=name.substring(colonIndex + 1);  }  Vector attrNames=new Vector();  Vector attrValues=new Vector();  Vector attrTypes=new Vector();  this.validator.elementStarted(fullName,this.reader.getSystemID(),this.reader.getLineNr());  char ch;  for (; ; ) {    ch=this.reader.read();    if ((ch == '/') || (ch == '>')) {      break;    }    this.reader.unread(ch);    this.processAttribute(attrNames,attrValues,attrTypes);    XMLUtil.skipWhitespace(this.reader,null);  }  Properties extraAttributes=new Properties();  this.validator.elementAttributesProcessed(fullName,extraAttributes,this.reader.getSystemID(),this.reader.getLineNr());  Enumeration enm=extraAttributes.keys();  while (enm.hasMoreElements()) {    String key=(String)enm.nextElement();    String value=extraAttributes.getProperty(key);    attrNames.addElement(key);    attrValues.addElement(value);    attrTypes.addElement("CDATA");  }  for (int i=0; i < attrNames.size(); i++) {    String key=(String)attrNames.elementAt(i);    String value=(String)attrValues.elementAt(i);    String type=(String)attrTypes.elementAt(i);    if (key.equals("xmlns")) {      defaultNamespace=value;    } else     if (key.startsWith("xmlns:")) {      namespaces.put(key.substring(6),value);    }  }  if (prefix == null) {    this.builder.startElement(name,prefix,defaultNamespace,this.reader.getSystemID(),this.reader.getLineNr());  } else {    this.builder.startElement(name,prefix,namespaces.getProperty(prefix),this.reader.getSystemID(),this.reader.getLineNr());  }  for (int i=0; i < attrNames.size(); i++) {    String key=(String)attrNames.elementAt(i);    if (key.startsWith("xmlns")) {      continue;    }    String value=(String)attrValues.elementAt(i);    String type=(String)attrTypes.elementAt(i);    colonIndex=key.indexOf(':');    if (colonIndex > 0) {      String attPrefix=key.substring(0,colonIndex);      key=key.substring(colonIndex + 1);      this.builder.addAttribute(key,attPrefix,namespaces.getProperty(attPrefix),value,type);    } else {      this.builder.addAttribute(key,null,null,value,type);    }  }  if (prefix == null) {    this.builder.elementAttributesProcessed(name,prefix,defaultNamespace);  } else {    this.builder.elementAttributesProcessed(name,prefix,namespaces.getProperty(prefix));  }  if (ch == '/') {    if (this.reader.read() != '>') {      XMLUtil.errorExpectedInput(reader.getSystemID(),reader.getLineNr(),"`>'");    }    this.validator.elementEnded(name,this.reader.getSystemID(),this.reader.getLineNr());    if (prefix == null) {      this.builder.endElement(name,prefix,defaultNamespace);    } else {      this.builder.endElement(name,prefix,namespaces.getProperty(prefix));    }    return;  }  StringBuffer buffer=new StringBuffer(16);  for (; ; ) {    buffer.setLength(0);    String str;    for (; ; ) {      XMLUtil.skipWhitespace(this.reader,buffer);      str=XMLUtil.read(this.reader,'&');      if ((str.charAt(0) == '&') && (str.charAt(1) != '#')) {        XMLUtil.processEntity(str,this.reader,this.entityResolver);      } else {        break;      }    }    if (str.charAt(0) == '<') {      str=XMLUtil.read(this.reader,'\0');      if (str.charAt(0) == '/') {        XMLUtil.skipWhitespace(this.reader,null);        str=XMLUtil.scanIdentifier(this.reader);        if (!str.equals(fullName)) {          XMLUtil.errorWrongClosingTag(reader.getSystemID(),reader.getLineNr(),name,str);        }        XMLUtil.skipWhitespace(this.reader,null);        if (this.reader.read() != '>') {          XMLUtil.errorClosingTagNotEmpty(reader.getSystemID(),reader.getLineNr());        }        this.validator.elementEnded(fullName,this.reader.getSystemID(),this.reader.getLineNr());        if (prefix == null) {          this.builder.endElement(name,prefix,defaultNamespace);        } else {          this.builder.endElement(name,prefix,namespaces.getProperty(prefix));        }        break;      } else {        this.reader.unread(str.charAt(0));        this.scanSomeTag(true,defaultNamespace,(Properties)namespaces.clone());      }    } else {      if (str.charAt(0) == '&') {        ch=XMLUtil.processCharLiteral(str);        buffer.append(ch);      } else {        reader.unread(str.charAt(0));      }      this.validator.PCDataAdded(this.reader.getSystemID(),this.reader.getLineNr());      Reader r=new ContentReader(this.reader,this.entityResolver,buffer.toString());      this.builder.addPCData(r,this.reader.getSystemID(),this.reader.getLineNr());      r.close();    }  }}  }
class C{  @Override public void attributeReplaced(HttpSessionBindingEvent event){  log("attributeReplaced('" + event.getSession().getId() + "', '"+ event.getName()+ "', '"+ event.getValue()+ "')");}  }
class C{  private boolean generateCarLoadStagingToStaging(Car car) throws BuildFailedException {  if (car.getTrack() == null || !car.getTrack().getTrackType().equals(Track.STAGING) || !car.getTrack().isAddCustomLoadsAnyStagingTrackEnabled() || !car.getLoadName().equals(CarLoads.instance().getDefaultEmptyName()) || car.getDestination() != null || car.getFinalDestination() != null) {    log.debug("No load generation for car ({}) isAddCustomLoadsAnyStagingTrackEnabled: " + (car.getTrack().isAddCustomLoadsAnyStagingTrackEnabled() ? "true" : "false") + ", car load ({}) destination ({}) final destination ({})",car.toString(),car.getLoadName(),car.getDestinationName(),car.getFinalDestinationName());    return false;  }  List<Track> tracks=locationManager.getTracks(Track.STAGING);  addLine(_buildReport,FIVE,MessageFormat.format(Bundle.getMessage("buildTryStagingToStaging"),new Object[]{car.toString(),tracks.size()}));  List<Location> locationsNotReachable=new ArrayList<Location>();  while (tracks.size() > 0) {    int rnd=(int)(Math.random() * tracks.size());    Track track=tracks.get(rnd);    tracks.remove(track);    log.debug("Try staging track ({}, {})",track.getLocation().getName(),track.getName());    if (track.getLocation() == _departLocation) {      log.debug("Don't use departure location ({})",track.getLocation().getName());      continue;    }    if (!_train.isAllowThroughCarsEnabled() && track.getLocation() == _terminateLocation) {      log.debug("Through cars to location ({}) not allowed",track.getLocation().getName());      continue;    }    if (locationsNotReachable.contains(track.getLocation())) {      log.debug("Location ({}) not reachable",track.getLocation().getName());      continue;    }    if (!car.getTrack().acceptsDestination(track.getLocation())) {      addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildDestinationNotServiced"),new Object[]{track.getLocation().getName(),car.getTrackName()}));      locationsNotReachable.add(track.getLocation());      continue;    }    if (_terminateStageTrack != null && track.getLocation() == _terminateStageTrack.getLocation()) {      log.debug("Train doesn't terminate to staging track ({}) at terminal ({})",track.getName(),track.getLocation().getName());      continue;    }    if (generateLoadCarDepartingAndTerminatingIntoStaging(car,track)) {      if (Router.instance().setDestination(car,_train,_buildReport) && car.getDestination() != null) {        return true;      }      addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildStagingTrackNotReachable"),new Object[]{track.getLocation().getName(),track.getName(),car.getLoadName()}));      car.setLoadName(CarLoads.instance().getDefaultEmptyName());      car.setLoadGeneratedFromStaging(false);      car.setFinalDestination(null);      car.updateKernel();      locationsNotReachable.add(track.getLocation());    }  }  if (_train.isAllowThroughCarsEnabled() && _terminateStageTrack != null && car.getTrack().acceptsDestination(_terminateStageTrack.getLocation()) && generateLoadCarDepartingAndTerminatingIntoStaging(car,_terminateStageTrack)) {    return true;  }  return false;}  }
class C{  public Tag addTag(final Tag parent,final String name) throws CouldntSaveDataException {  try {    if (parent == null) {      return ObjectFinders.getObject(m_manager.addTag(m_root.getNative(),name),m_allTags.values());    } else {      return ObjectFinders.getObject(m_manager.addTag(parent.getNative(),name),m_allTags.values());    }  } catch (  final com.google.security.zynamics.binnavi.Database.Exceptions.CouldntSaveDataException exception) {    throw new CouldntSaveDataException(exception);  }}  }
class C{  java.sql.Date toSqlDate(Calendar calendar){  return new java.sql.Date(getTimeInMillis(calendar));}  }
class C{  public static File createTempFile(final String contents){  File file;  try {    file=File.createTempFile("testFile",".tmp");    file.deleteOnExit();    Files.write(contents,file,java.nio.charset.StandardCharsets.UTF_8);    return file;  } catch (  final IOException e) {    throw Throwables.propagate(e);  }}  }
class C{  private void drawVerticalDividers(Canvas canvas,RecyclerView parent){  int parentLeft=parent.getPaddingLeft();  int parentRight=parent.getWidth() - parent.getPaddingRight();  int childCount=parent.getChildCount();  for (int i=0; i < childCount - 1; i++) {    View child=parent.getChildAt(i);    RecyclerView.LayoutParams params=(RecyclerView.LayoutParams)child.getLayoutParams();    int parentTop=child.getBottom() + params.bottomMargin;    int parentBottom=parentTop + mDivider.getIntrinsicHeight();    mDivider.setBounds(parentLeft,parentTop,parentRight,parentBottom);    mDivider.draw(canvas);  }}  }
class C{  public void testClearBitNegativeInside3(){  String as="-18446744073709551615";  int number=2;  BigInteger aNumber=new BigInteger(as);  BigInteger result=aNumber.clearBit(number);  assertEquals(as,result.toString());}  }
class C{  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {  SCHEMES.get(oprot.getScheme()).getScheme().write(oprot,this);}  }
class C{  @Deprecated public static Tuple<Point2D.Double,Point2D.Double> scaleVectorEnd(final Point2D.Double start,final Point2D.Double end,double scaleFactor){  Tuple<Point2D.Double,Point2D.Double> scaledVector=calculateScaledVector(start,end,scaleFactor);  return new Tuple<Point2D.Double,Point2D.Double>(start,scaledVector.getSecond());}  }
class C{  public long currentTimeMillis(){  return System.currentTimeMillis() + getTimeCorrectionMinutes() * Utilities.MINUTE_IN_MILLIS;}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) @Test public void testNodeSchemaProcessing(){  Sigma oper=new Sigma();  SumTestSink lmultSink=new SumTestSink();  SumTestSink imultSink=new SumTestSink();  SumTestSink dmultSink=new SumTestSink();  SumTestSink fmultSink=new SumTestSink();  oper.longResult.setSink(lmultSink);  oper.integerResult.setSink(imultSink);  oper.doubleResult.setSink(dmultSink);  oper.floatResult.setSink(fmultSink);  int sum=0;  ArrayList<Integer> list=new ArrayList<Integer>();  for (int i=0; i < 100; i++) {    list.add(i);    sum+=i;  }  oper.beginWindow(0);  oper.input.process(list);  oper.endWindow();  oper.beginWindow(1);  oper.input.process(list);  oper.endWindow();  sum=sum * 2;  Assert.assertEquals("sum was",sum,lmultSink.val.intValue());  Assert.assertEquals("sum was",sum,imultSink.val.intValue());  Assert.assertEquals("sum was",sum,dmultSink.val.intValue());  Assert.assertEquals("sum",sum,fmultSink.val.intValue());}  }
class C{  public PKCS1OracleRequest(byte[] encryptedKey,byte[] encryptedData){  this.encryptedKey=encryptedKey;  this.encryptedData=encryptedData;}  }
class C{  public Frame[] analyze(CtMethod method) throws BadBytecode {  return analyze(method.getDeclaringClass(),method.getMethodInfo2());}  }
class C{  private static int[][] computeLcs(List<ApiField> sequenceA,List<ApiField> sequenceB){  int[][] lcs=new int[sequenceA.size() + 1][sequenceB.size() + 1];  for (int i=0; i < sequenceA.size(); i++) {    for (int j=0; j < sequenceB.size(); j++) {      if (sequenceA.get(i).compareTo(sequenceB.get(j)) == 0) {        lcs[i + 1][j + 1]=lcs[i][j] + 1;      } else {        lcs[i + 1][j + 1]=Math.max(lcs[i][j + 1],lcs[i + 1][j]);      }    }  }  return lcs;}  }
class C{  public void addGenerator(String name,Generator<E> g){  map.put(name,g);  getCurrentChoice().add(name);  getCurrentChoice().select(name);  select(name);}  }
class C{  public final boolean isFillY(){  return fillY;}  }
class C{  @Override public boolean addressTryCompareAndSwap(ObjectReference src,Address slot,Address old,Address value,Word metaDataA,Word metaDataB,int mode){  return VM.barriers.addressTryCompareAndSwap(src,old,value,metaDataA,metaDataB,mode);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"SMUL");  translateAll(environment,instruction,"SMUL",instructions);}  }
class C{  protected void preparePostRequestContext(String source) throws IOException, ODataUnmarshallingException {  prepareRequestContext(source,POST);}  }
class C{  protected GrabPoint createGrabPoint(int x,int y,int index,int last){  if (index == 0 || (index == last && (isEnclosed()))) {    return new OffsetGrabPoint(x,y);  } else {    return new GrabPoint(x,y);  }}  }
class C{  public void changeValue(int index,Object value){  if (indexValueMap.containsKey(index)) {    indexValueMap.put(index,value);    nameValueMap.put(columnNameList.get(index),value);  }}  }
class C{  public static void upto(double self,Number to,@ClosureParams(FirstParam.class) Closure closure){  double to1=to.doubleValue();  if (self <= to1) {    for (double i=self; i <= to1; i++) {      closure.call(i);    }  } else   throw new GroovyRuntimeException("The argument (" + to + ") to upto() cannot be less than the value ("+ self+ ") it's called on.");}  }
class C{  @Override public void shutdown(){  mThreadPoolSlow.shutdown();  mThreadPoolFast.shutdown();}  }
class C{  public int labels(){  return getlabels();}  }
class C{  public Cell withNewInputValue(String newInputValue){  return new Cell(row,col,newInputValue,null,null);}  }
class C{  public void testRadix10Pos(){  String value="2387627892347567398736473476";  int radix=16;  BigInteger aNumber=new BigInteger(value,radix);  String result=aNumber.toString(radix);  assertTrue(result.equals(value));}  }
class C{  @Override public synchronized boolean isClosed(){  return mBitmapReference == null;}  }
class C{  static private <T>void fillStack(Stack<List<T>> reusableLists,List<List<T>> aSplit){  for (  List<T> list : aSplit) {    list.clear();    reusableLists.push(list);  }}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.defaultWriteObject();  for (Node<E> p=first(); p != null; p=succ(p)) {    Object item=p.item;    if (item != null)     s.writeObject(item);  }  s.writeObject(null);}  }
class C{  public FlipAnimator(View fromView,View toView,int centerX,int centerY){  this.fromView=fromView;  this.toView=toView;  this.centerX=centerX;  this.centerY=centerY;  setDuration(500);  setFillAfter(true);  setInterpolator(new AccelerateDecelerateInterpolator());}  }
class C{  public static boolean substringMatch(CharSequence str,int index,CharSequence substring){  for (int j=0; j < substring.length(); j++) {    int i=index + j;    if (i >= str.length() || str.charAt(i) != substring.charAt(j)) {      return false;    }  }  return true;}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return TIMESTAMP;case 2:  return VALUE;case 3:return HOST;default :return null;}}  }
class C{  public long nextLong(long n){  if (n <= 0)   throw new IllegalArgumentException("n must be positive");  long offset=0;  while (n >= Integer.MAX_VALUE) {    int bits=next(2);    long half=n >>> 1;    long nextn=((bits & 2) == 0) ? half : n - half;    if ((bits & 1) == 0)     offset+=n - nextn;    n=nextn;  }  return offset + nextInt((int)n);}  }
class C{  public void useHttps(SSLSocketFactory sslSocketFactory,boolean tunnelProxy){  this.sslSocketFactory=sslSocketFactory;  this.tunnelProxy=tunnelProxy;}  }
class C{  private DBMSEvent extractEvent(String afterTxId) throws ReplicatorException, InterruptedException {  DBMSEvent dbmsEvent=null;  ArrayList<DBMSData> dataArray=new ArrayList<DBMSData>();  Database conn=null;  Statement st=null;  ResultSet rs=null;  try {    if (logger.isDebugEnabled())     logger.debug("Determining next event after: " + afterTxId);    while (true) {      Long txId=getNextEventId(afterTxId);      if (txId == null) {        Thread.sleep(10);      } else {        if (logger.isDebugEnabled())         logger.debug("Extracting event: " + txId);        conn=getDBConnection();        st=conn.createStatement();        StringBuffer sb=new StringBuffer();        sb.append("SELECT * FROM (");        sb.append(" SELECT log_origin, log_txid, log_tableid, log_actionseq, log_cmdtype, log_cmddata, tab_nspname, tab_relname FROM ");        sb.append(getSlLogTable(1));        sb.append(" LEFT OUTER JOIN ");        sb.append(getSlTableTable());        sb.append(" ON ");        sb.append(getSlLogTable(1));        sb.append(".log_tableid = ");        sb.append(getSlTableTable());        sb.append(".tab_id");        sb.append(" WHERE log_txid = ");        sb.append(txId);        sb.append(" UNION ALL");        sb.append(" SELECT log_origin, log_txid, log_tableid, log_actionseq, log_cmdtype, log_cmddata, tab_nspname, tab_relname FROM ");        sb.append(getSlLogTable(2));        sb.append(" LEFT OUTER JOIN ");        sb.append(getSlTableTable());        sb.append(" ON ");        sb.append(getSlLogTable(2));        sb.append(".log_tableid = ");        sb.append(getSlTableTable());        sb.append(".tab_id");        sb.append(" WHERE log_txid = ");        sb.append(txId);        sb.append(") AS log_union ");        sb.append("ORDER BY log_actionseq");        rs=st.executeQuery(sb.toString());        while (rs.next()) {          @SuppressWarnings("unused") Long logOrigin=rs.getLong(1);          @SuppressWarnings("unused") Long actionSeq=rs.getLong(4);          String cmdType=rs.getString(5);          String cmdData=rs.getString(6);          String tableSchema=rs.getString(7);          String tableName=rs.getString(8);          String queryString=rebuildSlonyQuery(cmdType,cmdData,tableSchema + "." + tableName);          StatementData statement=new StatementData(queryString);          dataArray.add(statement);        }        if (!dataArray.isEmpty()) {          dbmsEvent=new DBMSEvent(txId.toString(),dataArray,null);          if (logger.isDebugEnabled())           logger.debug("Moving cursor to next transaction: " + txId);          this.setLastEventId(txId.toString());          break;        } else {          logger.error("Extracted an empty event " + txId + ", which is unexpected");          if (runtime.getExtractorFailurePolicy() == FailurePolicy.STOP)           throw new ExtractorException("Unexpectedly extracted an empty event " + txId + " after event "+ afterTxId);        }      }    }  } catch (  ExtractorException e) {    logger.error("Failed to extract after " + afterTxId,e);    if (runtime.getExtractorFailurePolicy() == FailurePolicy.STOP)     throw e;  }catch (  InterruptedException e) {    throw e;  }catch (  Exception e) {    logger.error("Unexpected failure while extracting after event " + afterTxId,e);    if (runtime.getExtractorFailurePolicy() == FailurePolicy.STOP)     throw new ExtractorException("Unexpected failure while extracting after event " + afterTxId,e);  } finally {    cleanUpDatabaseResources(null,st,rs);  }  return dbmsEvent;}  }
class C{  public ReferenceVariable(Type objectType,int instanceId,String name,Object concreteValue){  super(objectType,instanceId,1,true);  this.name=name;  this.initializeReference(concreteValue);}  }
class C{  @Override public void actionPerformed(ActionEvent ae){  for (int i=0; i < currSize * currSize; i++) {    if (ae.getSource() == squareButtons[i]) {      NQueensController contr=(NQueensController)getController();      XYLocation loc=new XYLocation(i % currSize,i / currSize);      contr.modifySquare(loc);    }  }}  }
class C{  boolean hasOption(String requested){  if (optionsAsString == null)   optionsAsString=Util.toString(opts);  for (  String opt : Util.split(optionsAsString,',')) {    if (opt.equals(requested))     return true;  }  return false;}  }
class C{  public JsonResponse<?> addCookie(String name,String value){  return addCookie(new NewCookie(name,value));}  }
class C{  List<EgDemandReasonMaster> prepareReasonMasters(final EgDemand demand,final DCBDisplayInfo dcbDisPlayInfo){  List<String> RsonMasterCodes=null;  List<EgDemandReasonMaster> reasonMsters=null;  if (demand != null) {    final Module module=getModuleFromDemand(demand);    if (module == null)     throw new DCBException(" EgModule are missing for the provided EgDemand Id =" + demand.getId());    if (dcbDisPlayInfo != null && dcbDisPlayInfo.getReasonMasterCodes() != null && !dcbDisPlayInfo.getReasonMasterCodes().isEmpty())     RsonMasterCodes=dcbDisPlayInfo.getReasonMasterCodes();    if (RsonMasterCodes == null || RsonMasterCodes.isEmpty())     reasonMsters=getEgdemandReasonMasters(module); else     reasonMsters=getEgdemandReasonMasters(RsonMasterCodes,module);  }  return reasonMsters;}  }
class C{  public IntegerConverter(final Object defaultValue){  super(false,defaultValue);}  }
class C{  public ClassPath appendClassPath(ClassPath cp){  return source.appendClassPath(cp);}  }
class C{  public Reuters2003Parser(String file){  super(file);}  }
class C{  public static void send(Set recipients,PartitionedRegion r,int bucketId){  Assert.assertTrue(recipients != null,"BucketBackupMessage NULL sender list");  BucketBackupMessage m=new BucketBackupMessage(recipients,r.getPRId(),bucketId);  r.getDistributionManager().putOutgoing(m);}  }
class C{  @Override public boolean isSatisfiedBy(Assignment input){  return !initCondition.isSatisfiedBy(input);}  }
class C{  public static RsaJsonWebKey produce(){  if (theOne == null) {    try {      theOne=RsaJwkGenerator.generateJwk(2048);    } catch (    JoseException ex) {      Logger.getLogger(RsaKeyProducer.class.getName()).log(Level.SEVERE,null,ex);    }  }  System.out.println("RSA Key setup... " + theOne.hashCode());  return theOne;}  }
class C{  void addFilters(EnumSet<RocFilter> filters){  if (filters != null) {    for (    RocFilter f : filters) {      addFilter(f);    }  }}  }
class C{  protected String updateCode(){  if (log != null) {    log.info("JAR FILE Location: s3://" + deployment.getBucketName() + "/"+ deployment.getJarFileLocationOnS3());  }  UpdateFunctionCodeRequest updateFunctionCodeRequest=new UpdateFunctionCodeRequest();  updateFunctionCodeRequest.setFunctionName(functionArn);  updateFunctionCodeRequest.setS3Bucket(deployment.getBucketName());  updateFunctionCodeRequest.setS3Key(deployment.getJarFileLocationOnS3());  updateFunctionCodeRequest.setPublish(true);  UpdateFunctionCodeResult updateFunctionCodeResult=getLambdaClient().updateFunctionCode(updateFunctionCodeRequest);  if (log != null) {    log.info("Lambda function is at version: " + updateFunctionCodeResult.getVersion());  }  return updateFunctionCodeResult.getVersion();}  }
class C{  public static SystemPropertiesLoader create(){  return create(DEFAULT_PREFIX);}  }
class C{  public boolean isEventTypeExists(String eventTypeName){  return eventClasses.containsKey(eventTypeName) || mapNames.containsKey(eventTypeName) || nestableMapNames.containsKey(eventTypeName)|| nestableObjectArrayNames.containsKey(eventTypeName)|| eventTypesXMLDOM.containsKey(eventTypeName);}  }
class C{  public void add(double x,double y){  if (len == data.length) {    data=Arrays.copyOf(data,len << 1);  }  data[len++]=x;  data[len++]=y;  minx=Math.min(minx,x);  maxx=Math.max(maxx,x);  miny=Math.min(miny,y);  maxy=Math.max(maxy,y);}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("StatementDate"))     p_StatementDate=(Timestamp)para[i].getParameter(); else     if (name.equals("DateAcct"))     p_DateAcct="Y".equals(para[i].getParameter()); else     if (name.equals("IsSOTrx"))     p_IsSOTrx="Y".equals(para[i].getParameter()); else     if (name.equals("C_Currency_ID"))     p_C_Currency_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("AD_Org_ID"))     p_AD_Org_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("C_BP_Group_ID"))     p_C_BP_Group_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("C_BPartner_ID"))     p_C_BPartner_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("IsListInvoices"))     p_IsListInvoices="Y".equals(para[i].getParameter()); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }  if (p_StatementDate == null)   p_StatementDate=new Timestamp(System.currentTimeMillis()); else   m_statementOffset=TimeUtil.getDaysBetween(new Timestamp(System.currentTimeMillis()),p_StatementDate);}  }
class C{  public GTextField(){  super();  super.setColumns(15);  this.setDocument(new GPlainDocument(null));  this.setHorizontalAlignment(SwingConstants.RIGHT);}  }
class C{  protected boolean afterDelete(boolean success){  if (!success)   return success;  StringBuffer sb=new StringBuffer("DELETE FROM AD_TreeNodeCMT ").append(" WHERE Node_ID=").append(get_IDOld()).append(" AND AD_Tree_ID=").append(getAD_Tree_ID());  int no=DB.executeUpdate(sb.toString(),get_TrxName());  if (no > 0)   log.fine("#" + no + " - TreeType=CMT"); else   log.warning("#" + no + " - TreeType=CMT");  return no > 0;}  }
class C{  public final void solve33ToOut(Vec3 b,Vec3 out){  assert (b != out);  Vec3.crossToOutUnsafe(ey,ez,out);  float det=Vec3.dot(ex,out);  if (det != 0.0f) {    det=1.0f / det;  }  Vec3.crossToOutUnsafe(ey,ez,out);  final float x=det * Vec3.dot(b,out);  Vec3.crossToOutUnsafe(b,ez,out);  final float y=det * Vec3.dot(ex,out);  Vec3.crossToOutUnsafe(ey,b,out);  float z=det * Vec3.dot(ex,out);  out.x=x;  out.y=y;  out.z=z;}  }
class C{  public Viterbi(){}  }
class C{  public static boolean isImage(File path,boolean jpgOnly){  if (path == null)   return false;  return isImage(path.getName(),jpgOnly);}  }
class C{  public JSONArray append(boolean value){  this.append(value ? Boolean.TRUE : Boolean.FALSE);  return this;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Boolean.valueOf(getCapDev(stack).isHWEncoder());}  }
class C{  public MarklinTurnout(int number,String prefix,MarklinTrafficController etc){  super(prefix + "T" + number);  _number=number;  this.prefix=prefix;  tc=etc;  tc.addMarklinListener(this);}  }
class C{  public static Object actionList(PageContext pageContext,Resource directory,String serverPassword,int type,ResourceFilter filter,int listInfo,boolean recurse,String sort) throws PageException {  SecurityManager securityManager=pageContext.getConfig().getSecurityManager();  securityManager.checkFileLocation(pageContext.getConfig(),directory,serverPassword);  if (type != TYPE_ALL) {    ResourceFilter typeFilter=(type == TYPE_DIR) ? DIRECTORY_FILTER : FILE_FILTER;    if (filter == null)     filter=typeFilter; else     filter=new AndResourceFilter(new ResourceFilter[]{typeFilter,filter});  }  String[] names=new String[]{"name","size","type","dateLastModified","attributes","mode","directory"};  String[] types=new String[]{"VARCHAR","DOUBLE","VARCHAR","DATE","VARCHAR","VARCHAR","VARCHAR"};  boolean hasMeta=directory instanceof ResourceMetaData;  if (hasMeta) {    names=new String[]{"name","size","type","dateLastModified","attributes","mode","directory","meta"};    types=new String[]{"VARCHAR","DOUBLE","VARCHAR","DATE","VARCHAR","VARCHAR","VARCHAR","OBJECT"};  }  Array array=null;  Query query=null;  Object rtn;  if (listInfo == LIST_INFO_QUERY_ALL || listInfo == LIST_INFO_QUERY_NAME) {    boolean listOnlyNames=listInfo == LIST_INFO_QUERY_NAME;    rtn=query=new QueryImpl(listOnlyNames ? new String[]{"name"} : names,listOnlyNames ? new String[]{"VARCHAR"} : types,0,"query");  } else   rtn=array=new ArrayImpl();  if (!directory.exists()) {    if (directory instanceof FileResource)     return rtn;    throw new ApplicationException("directory [" + directory.toString() + "] doesn't exist");  }  if (!directory.isDirectory()) {    if (directory instanceof FileResource)     return rtn;    throw new ApplicationException("file [" + directory.toString() + "] exists, but isn't a directory");  }  if (!directory.isReadable()) {    if (directory instanceof FileResource)     return rtn;    throw new ApplicationException("no access to read directory [" + directory.toString() + "]");  }  long startNS=System.nanoTime();  try {    if (listInfo == LIST_INFO_QUERY_ALL)     _fillQueryAll(query,directory,filter,0,hasMeta,recurse); else     if (listInfo == LIST_INFO_QUERY_NAME) {      if (recurse || type != TYPE_ALL)       _fillQueryNamesRec("",query,directory,filter,0,recurse); else       _fillQueryNames(query,directory,filter,0);    } else     if (listInfo == LIST_INFO_ARRAY_NAME || listInfo == LIST_INFO_ARRAY_PATH) {      boolean onlyName=listInfo == LIST_INFO_ARRAY_NAME;      if (!onlyName || recurse || type != TYPE_ALL)       _fillArrayPathOrName(array,directory,filter,0,recurse,onlyName); else       _fillArrayName(array,directory,filter,0);    }  } catch (  IOException e) {    throw Caster.toPageException(e);  }  if (sort != null && query != null) {    String[] arr=sort.toLowerCase().split(",");    for (int i=arr.length - 1; i >= 0; i--) {      try {        String[] col=arr[i].trim().split("\\s+");        if (col.length == 1)         query.sort(col[0].trim()); else         if (col.length == 2) {          String order=col[1].toLowerCase().trim();          if (order.equals("asc"))           query.sort(col[0],lucee.runtime.type.Query.ORDER_ASC); else           if (order.equals("desc"))           query.sort(col[0],lucee.runtime.type.Query.ORDER_DESC); else           throw new ApplicationException("invalid order type [" + col[1] + "]");        }      } catch (      Throwable t) {      }    }  }  if (query != null)   query.setExecutionTime(System.nanoTime() - startNS);  return rtn;}  }
class C{  public Identifier resolve(Identifier nm) throws ClassNotFound {  if (env == null)   return nm;  return env.resolve(nm);}  }
class C{  @Override public void writeEmptyElement(String namespaceURI,String localName) throws XMLStreamException {  writeEmptyElement(null,localName,null);}  }
class C{  public static void configureTrainingDatabases(IFindBugsEngine findBugs) throws IOException {  if (findBugs.emitTrainingOutput()) {    String trainingOutputDir=findBugs.getTrainingOutputDir();    if (!new File(trainingOutputDir).isDirectory()) {      throw new IOException("Training output directory " + trainingOutputDir + " does not exist");    }    AnalysisContext.currentAnalysisContext().setDatabaseOutputDir(trainingOutputDir);    System.setProperty("findbugs.checkreturn.savetraining",new File(trainingOutputDir,"checkReturn.db").getPath());  }  if (findBugs.useTrainingInput()) {    String trainingInputDir=findBugs.getTrainingInputDir();    if (!new File(trainingInputDir).isDirectory()) {      throw new IOException("Training input directory " + trainingInputDir + " does not exist");    }    AnalysisContext.currentAnalysisContext().setDatabaseInputDir(trainingInputDir);    AnalysisContext.currentAnalysisContext().loadInterproceduralDatabases();    System.setProperty("findbugs.checkreturn.loadtraining",new File(trainingInputDir,"checkReturn.db").getPath());  } else {    AnalysisContext.currentAnalysisContext().loadDefaultInterproceduralDatabases();  }}  }
class C{  public ActionErrors validate(ActionMapping mapping,HttpServletRequest request){  ActionErrors errors=new ActionErrors();  if (getCourseNbr() != null && ApplicationProperty.CourseOfferingNumberUpperCase.isTrue()) {    setCourseNbr(getCourseNbr().toUpperCase());  }  if (op.equals(MSG.actionUpdateCourseOffering()) || op.equals(MSG.actionSaveCourseOffering())) {    if (subjectAreaId == null || subjectAreaId == 0) {      errors.add("subjectAreaId",new ActionMessage("errors.generic",MSG.errorSubjectRequired()));    } else     if (courseNbr == null || courseNbr.trim().length() == 0) {      errors.add("courseNbr",new ActionMessage("errors.generic",MSG.errorCourseNumberRequired()));    } else {      String courseNbrRegex=ApplicationProperty.CourseOfferingNumberPattern.value();      String courseNbrInfo=ApplicationProperty.CourseOfferingNumberPatternInfo.value();      try {        Pattern pattern=Pattern.compile(courseNbrRegex);        Matcher matcher=pattern.matcher(courseNbr);        if (!matcher.find()) {          errors.add("courseNbr",new ActionMessage("errors.generic",courseNbrInfo));        }      } catch (      Exception e) {        errors.add("courseNbr",new ActionMessage("errors.generic",MSG.errorCourseNumberCannotBeMatched(courseNbrRegex,e.getMessage())));      }      if (ApplicationProperty.CourseOfferingNumberMustBeUnique.isTrue()) {        SubjectArea sa=new SubjectAreaDAO().get(subjectAreaId);        CourseOffering co=CourseOffering.findBySessionSubjAreaAbbvCourseNbr(sa.getSessionId(),sa.getSubjectAreaAbbreviation(),courseNbr);        if (add && co != null) {          errors.add("courseNbr",new ActionMessage("errors.generic",MSG.errorCourseCannotBeCreated()));        } else         if (!add && co != null && !co.getUniqueId().equals(courseOfferingId)) {          errors.add("courseNbr",new ActionMessage("errors.generic",MSG.errorCourseCannotBeRenamed()));        }      }    }  }  return errors;}  }
class C{  private ClientBlacklistProcessor(DM dm,Set members){  super(dm,members);}  }
class C{  public DataRow create(String[] strings,Attribute[] attributes){  DataRow dataRow=create(strings.length);  for (int i=0; i < strings.length; i++) {    if (strings[i] != null) {      strings[i]=strings[i].trim();    }    if (strings[i] != null && strings[i].length() > 0 && !strings[i].equals("?")) {      if (attributes[i].isNominal()) {        String unescaped=Tools.unescape(strings[i]);        dataRow.set(attributes[i],attributes[i].getMapping().mapString(unescaped));      } else {        dataRow.set(attributes[i],string2Double(strings[i],this.decimalPointCharacter));      }    } else {      dataRow.set(attributes[i],Double.NaN);    }  }  dataRow.trim();  return dataRow;}  }
class C{  @Override public boolean add(E o){  return offer(o);}  }
class C{  public int deleteAssetScenarioLinks(Set<String> elementUuidSet){  if (LOG.isDebugEnabled()) {    LOG.debug("Deleting links from assets to scenario...");  }  if (elementUuidSet == null || elementUuidSet.isEmpty()) {    if (LOG.isDebugEnabled()) {      LOG.debug("No elements found.");    }    return 0;  }  List<CnATreeElement> elementList=loadElementSet(elementUuidSet);  int orgId=elementList.iterator().next().getScopeId();  initGraph(orgId);  DeleteAssetScenarioLinks hibernateCallback=new DeleteAssetScenarioLinks(elementList);  Integer numberOfDeletedLinks=(Integer)getLinkDao().executeCallback(hibernateCallback);  return numberOfDeletedLinks;}  }
class C{  public boolean isShowLegend(){  return mShowLegend;}  }
class C{  AsyncFuture<Void> doFlush(Batch newBatch){  final Batch batch;synchronized (nextBatchLock) {    batch=nextBatch;    if (batch == null) {      return null;    }    nextBatch=newBatch;  }  if (batch == null || batch.isEmpty()) {    return async.resolved();  }  if (maxPendingFlushes > 0) {synchronized (pendingLock) {      if (pending.size() >= maxPendingFlushes) {        log.warn("Max number of pending flushes ({}) reached, dropping {} metric(s) and " + "event(s)",pending.size(),batch.size());        statistics.reportDropped(batch.size());        return async.resolved();      }    }  }  final List<AsyncFuture<Void>> futures=new ArrayList<>();  if (!batch.events.isEmpty()) {    futures.add(sink.sendEvents(batch.events));  }  if (!batch.metrics.isEmpty()) {    futures.add(sink.sendMetrics(batch.metrics));  }  return async.collectAndDiscard(futures);}  }
class C{  public static String separatorsToWindows(String path){  if (path == null || path.indexOf(UNIX_SEPARATOR) == -1) {    return path;  }  return path.replace(UNIX_SEPARATOR,WINDOWS_SEPARATOR);}  }
class C{  public boolean contains(int x,int y){  return (x >= 0) && (y >= 0) && (x < width)&& (y < height);}  }
class C{  public boolean isCompleteCRLEnabled(){  return completeCRLEnabled;}  }
class C{  public static String removeElementEvent(HttpServletRequest request,HttpServletResponse response){  String errMsg="";  Locale locale=UtilHttp.getLocale(request);  Security security=(Security)request.getAttribute("security");  if (!security.hasPermission("UTIL_CACHE_EDIT",request.getSession())) {    errMsg=UtilProperties.getMessage(UtilCacheEvents.err_resource,"utilCacheEvents.permissionEdit",locale) + ".";    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }  String name=request.getParameter("UTIL_CACHE_NAME");  if (name == null) {    errMsg=UtilProperties.getMessage(UtilCacheEvents.err_resource,"utilCacheEvents.noCacheNameSpecified",locale) + ".";    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }  String numString=request.getParameter("UTIL_CACHE_ELEMENT_NUMBER");  if (numString == null) {    errMsg=UtilProperties.getMessage(UtilCacheEvents.err_resource,"utilCacheEvents.noElementNumberSpecified",locale) + ".";    request.setAttribute("_ERROR_MESSAGE_","");    return "error";  }  int number;  try {    number=Integer.parseInt(numString);  } catch (  Exception e) {    return "error";  }  UtilCache<?,?> utilCache=UtilCache.findCache(name);  if (utilCache != null) {    Object key=null;    Iterator<?> ksIter=utilCache.getCacheLineKeys().iterator();    int curNum=0;    while (ksIter.hasNext()) {      if (number == curNum) {        key=ksIter.next();        break;      } else {        ksIter.next();      }      curNum++;    }    if (key != null) {      utilCache.remove(key);      errMsg=UtilProperties.getMessage(UtilCacheEvents.err_resource,"utilCache.removeElementWithKey",UtilMisc.toMap("key",key.toString()),locale) + ".";      request.setAttribute("_EVENT_MESSAGE_",errMsg);    } else {      errMsg=UtilProperties.getMessage(UtilCacheEvents.err_resource,"utilCache.couldNotRemoveElementNumber",UtilMisc.toMap("name",name,"numString",numString),locale) + ".";      request.setAttribute("_ERROR_MESSAGE_",errMsg);      return "error";    }  } else {    errMsg=UtilProperties.getMessage(UtilCacheEvents.err_resource,"utilCache.couldNotRemoveElement",UtilMisc.toMap("name",name),locale) + ".";    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }  return "success";}  }
class C{  public void disableWhenHorizontalMove(boolean disable){  mDisableWhenHorizontalMove=disable;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:27.375 -0500",hash_original_method="9757D034E975DAF9D22BACDE50FF4335",hash_generated_method="CC8A4E04469C48B2A80B08B87C5C380B") public void close(){  try {    if (mySock != null)     mySock.close();    if (sipStack.isLoggingEnabled())     sipStack.getStackLogger().logDebug("Closing message Channel " + this);  } catch (  IOException ex) {    if (sipStack.isLoggingEnabled())     sipStack.getStackLogger().logDebug("Error closing socket " + ex);  }}  }
class C{  public Candle persistCandle(final Candle candle) throws PersistentModelException {  try {synchronized (candle) {      if (null == candle.getTradingday().getIdTradingDay()) {        Tradingday tradingday=this.findTradingdayByOpenCloseDate(candle.getTradingday().getOpen(),candle.getTradingday().getClose());        if (null == tradingday) {          tradingday=m_aspectHome.persist(candle.getTradingday());        }        candle.setTradingday(tradingday);      }      if (null == candle.getIdCandle()) {        Candle currCandle=m_candleHome.findByUniqueKey(candle.getTradingday().getIdTradingDay(),candle.getContract().getIdContract(),candle.getStartPeriod(),candle.getEndPeriod(),candle.getBarSize());        if (null != currCandle) {          candle.setIdCandle(currCandle.getIdCandle());          candle.setVersion(currCandle.getVersion());        }      }      Candle item=m_aspectHome.persist(candle);      candle.setVersion(item.getVersion());      return item;    }  } catch (  OptimisticLockException ex1) {    throw new PersistentModelException("Error saving Candle please refresh before save.");  }catch (  Exception e) {    throw new PersistentModelException("Error saving CandleItem: " + candle.getOpen() + "\n Msg: "+ e.getMessage());  }}  }
class C{  public void addOpAuths(final Class<? extends Operation> opClass,final String... auths){  Set<String> opAuths=opAuthsMap.get(opClass);  if (null == opAuths) {    opAuths=new HashSet<>();    opAuthsMap.put(opClass,opAuths);  }  Collections.addAll(opAuths,auths);  Collections.addAll(allOpAuths,auths);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void key(final byte key[]){  int i;  final int koffp[]={0};  final int lr[]={0,0};  final int plen=P.length, slen=S.length;  for (i=0; i < plen; i++) {    P[i]=P[i] ^ streamtoword(key,koffp);  }  for (i=0; i < plen; i+=2) {    encipher(lr,0);    P[i]=lr[0];    P[i + 1]=lr[1];  }  for (i=0; i < slen; i+=2) {    encipher(lr,0);    S[i]=lr[0];    S[i + 1]=lr[1];  }}  }
class C{  public boolean isHeadersExist(){  return headersExist;}  }
class C{  public static boolean arrayDeclarationWrapper(PsiBuilder b,int l){  PsiBuilder.Marker m=b.mark();  boolean r=false;  assert b instanceof PerlBuilder;  boolean flagBackup=((PerlBuilder)b).setSpecialVariableNamesAllowed(false);  if (PerlParserImpl.array_variable(b,l)) {    m.done(VARIABLE_DECLARATION_WRAPPER);    r=true;  } else {    m.drop();  }  ((PerlBuilder)b).setSpecialVariableNamesAllowed(flagBackup);  return r;}  }
class C{  public RequestToBatchSenderAsstManager(){  super();  this.taskId=null;  this.asstManagerRetryIntervalMillis=250L;  this.workers=null;  this.sender=null;  this.maxConcurrency=ParallecGlobalConfig.concurrencyDefault;}  }
class C{  public void train(ExampleSet exampleSet,List<String[]> hiddenLayers,int maxCycles,double maxError,double learningRate,double momentum,boolean decay,boolean shuffle,boolean normalize,RandomGenerator randomGenerator,Operator operator) throws OperatorException {  Attribute label=exampleSet.getAttributes().getLabel();  int numberOfClasses=getNumberOfClasses(label);  if (normalize) {    exampleSet.recalculateAllAttributeStatistics();  } else {    exampleSet.recalculateAttributeStatistics(label);  }  checkForStop(operator);  initInputLayer(exampleSet,normalize);  double labelMin=exampleSet.getStatistics(label,Statistics.MINIMUM);  double labelMax=exampleSet.getStatistics(label,Statistics.MAXIMUM);  initOutputLayer(label,numberOfClasses,labelMin,labelMax,randomGenerator);  initHiddenLayers(exampleSet,label,hiddenLayers,randomGenerator);  Attribute weightAttribute=exampleSet.getAttributes().getWeight();  double totalWeight=0;  for (  Example example : exampleSet) {    double weight=1.0d;    if (weightAttribute != null) {      weight=example.getValue(weightAttribute);    }    totalWeight+=weight;  }  int[] exampleIndices=null;  if (shuffle) {    List<Integer> indices=new ArrayList<>(exampleSet.size());    for (int i=0; i < exampleSet.size(); i++) {      indices.add(i);    }    Collections.shuffle(indices,randomGenerator);    checkForStop(operator);    exampleIndices=new int[indices.size()];    int index=0;    for (    int current : indices) {      exampleIndices[index++]=current;    }  }  for (int cycle=0; cycle < maxCycles; cycle++) {    checkForStop(operator);    double error=0;    int maxSize=exampleSet.size();    for (int index=0; index < maxSize; index++) {      checkForStop(operator);      int exampleIndex=index;      if (exampleIndices != null) {        exampleIndex=exampleIndices[index];      }      Example example=exampleSet.getExample(exampleIndex);      resetNetwork();      calculateValue(example);      double weight=1.0;      if (weightAttribute != null) {        weight=example.getValue(weightAttribute);      }      double tempRate=learningRate * weight;      if (decay) {        tempRate/=cycle + 1;      }      error+=calculateError(example) / numberOfClasses * weight;      update(example,tempRate,momentum);    }    error/=totalWeight;    if (error < maxError) {      break;    }    if (Double.isInfinite(error) || Double.isNaN(error)) {      if (learningRate <= Double.MIN_VALUE) {        throw new OperatorException("Cannot reset network to a smaller learning rate.");      }      learningRate/=2;      train(exampleSet,hiddenLayers,maxCycles,maxError,learningRate,momentum,decay,shuffle,normalize,randomGenerator,operator);    }  }}  }
class C{  static public Appendable dump(final LexiconRelation r){  final StringWriter w=new StringWriter(100 * Bytes.kilobyte32);  w.append(r.getLexiconConfiguration().toString());  w.append("\n");  dump(r.getContainer(),w,true);  return w.getBuffer();}  }
class C{  public void write(Object source,OutputNode root) throws Exception {  Session session=manager.open();  try {    write(source,root,session);  }  finally {    manager.close();  }}  }
class C{  @Override public void onDeleted(String chatId,List<String> transferIds) throws RemoteException {  mListener.onDeleted(chatId,new HashSet<>(transferIds));}  }
class C{  public void scanJarFile(){  fileCombo.removeAllItems();  try {    JarInputStream zin=new JarInputStream(new FileInputStream(JarName));    JarEntry entry;    while ((entry=zin.getNextJarEntry()) != null) {      String nameOfEntry=entry.getName();      if (nameOfEntry.endsWith(".weka-gsci"))       fileCombo.addItem(nameOfEntry);      zin.closeEntry();    }    zin.close();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public static String writeInputStreamToString(InputStream is){  ByteArrayOutputStream result=new ByteArrayOutputStream();  byte[] buffer=new byte[1024];  int length;  try {    while ((length=is.read(buffer)) != -1) {      result.write(buffer,0,length);    }    return result.toString("UTF-8");  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  protected Path createTrianglePath(TagView.TagViewData data,RectF rect,float halfOfRectHeight){  Path path=new Path();  path.setFillType(Path.FillType.EVEN_ODD);  path.moveTo(rect.right,rect.top);  path.lineTo(rect.right + data.tagRightPadding * SHARP_TAG_MULTIPLIER,halfOfRectHeight);  path.lineTo(rect.right,rect.bottom);  path.lineTo(rect.right,rect.top);  return path;}  }
class C{  public boolean isSensor(){  return isSensor;}  }
class C{  public static LatLon greatCircleEndPosition(LatLon p,double greatCircleAzimuthRadians,double pathLengthRadians){  if (p == null) {    throw new IllegalArgumentException("Lat Lon Is Null");  }  return greatCircleEndPosition(p,Angle.fromRadians(greatCircleAzimuthRadians),Angle.fromRadians(pathLengthRadians));}  }
class C{  @Override public boolean visit(MySqlCreateProcedureStatement x){  return true;}  }
class C{  public boolean hasAdditionalCriteria(){  return m_descriptor.getQueryManager().hasAdditionalCriteria();}  }
class C{  @Override public void mouseWheelMoved(MouseWheelEvent e){  JFreeChart chart=this.chartPanel.getChart();  if (chart == null) {    return;  }  Plot plot=chart.getPlot();  if (plot instanceof Zoomable) {    Zoomable zoomable=(Zoomable)plot;    handleZoomable(zoomable,e);  } else   if (plot instanceof PiePlot) {    PiePlot pp=(PiePlot)plot;    pp.handleMouseWheelRotation(e.getWheelRotation());  }}  }
class C{  boolean internalIsEmpty(){  return this.idsAvailable.isEmpty();}  }
class C{  public static char low(int uc){  assert neededFor(uc);  return (char)(0xdc00 | ((uc - UCS4_MIN) & 0x3ff));}  }
class C{  public ActionForward validateUser(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  Properties ctx=TmkJSPEnv.getCtx(request);  DefaultForm df=(DefaultForm)form;  LoginBean bean=(LoginBean)df.getBean();  HttpSession session=request.getSession();  WebUserInfo info=null;  WebUser wu=null;  try {    wu=bd.checkLoginPassword(ctx,bean);    info=bd.login(ctx,wu);    MSession cSession=MSession.get(ctx,request.getRemoteAddr(),request.getRemoteHost(),session.getId());    if (cSession != null)     cSession.setWebStoreSession(true);    session.setAttribute(WebUserInfo.NAME,info);    ArrayList myRoles=RoleManager.getMyRoles(ctx);    if (myRoles.size() == 1) {      KeyNamePair pair=(KeyNamePair)myRoles.get(0);      Env.setContext(ctx,"#AD_Role_ID",pair.getKey());      SessionStorage.putMenus(ctx,request);      SessionStorage.putOrg(ctx,request);      return mapping.findForward(LOGIN_SUCCESS);    }  } catch (  UserNotFoundException unfe) {    postGlobalError("login.passwordError",request);    return (mapping.getInputForward());  }catch (  NotLoggedInException e) {    postGlobalError("login.passwordError",request);    return (mapping.getInputForward());  }catch (  InvalidRoleException ire) {    postGlobalError("error.role.invalid",request);    return (mapping.getInputForward());  }catch (  UserInactiveException unae) {    postGlobalError("login.userInactive",request);    return (mapping.getInputForward());  }  return mapping.findForward(INIT_CHOOSE_ROLE);}  }
class C{  public Tomcat4xStandaloneLocalConfigurationCapability(){  this.propertySupportMap.put(GeneralPropertySet.RMI_PORT,Boolean.TRUE);  this.propertySupportMap.put(TomcatPropertySet.URI_ENCODING,Boolean.TRUE);  this.propertySupportMap.put(TomcatPropertySet.AJP_PORT,Boolean.TRUE);  this.propertySupportMap.put(TomcatPropertySet.CONTEXT_RELOADABLE,Boolean.TRUE);  this.propertySupportMap.put(DatasourcePropertySet.DATASOURCE,Boolean.TRUE);  this.propertySupportMap.put(ResourcePropertySet.RESOURCE,Boolean.TRUE);  this.propertySupportMap.put(TomcatPropertySet.COPY_WARS,Boolean.TRUE);  this.propertySupportMap.put(TomcatPropertySet.WEBAPPS_DIRECTORY,Boolean.TRUE);}  }
class C{  private static int intToZigZag(int n){  return (n << 1) ^ (n >> 31);}  }
class C{  public static byte[] correctSize(final byte[] array,final int blockSize,final boolean removeSignByte){  int remainder=array.length % blockSize;  byte[] result=array;  byte[] tmp;  if (removeSignByte && remainder > 0 && result[0] == 0x0) {    tmp=new byte[result.length - 1];    System.arraycopy(result,1,tmp,0,tmp.length);    result=tmp;    remainder=tmp.length % blockSize;  }  if (remainder > 0) {    tmp=new byte[result.length + blockSize - remainder];    System.arraycopy(result,0,tmp,blockSize - remainder,result.length);    result=tmp;  }  return result;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  float progress=0;  int a;  double slopeX;  double slopeY;  double val;  String filterSize="3 x 3";  int numPixelsInFilter;  boolean reflectAtBorders=false;  int[] dX;  int[] dY;  double[] maskX;  double[] maskY;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      filterSize=args[i];    } else     if (i == 3) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("grey.pal");    if (filterSize.endsWith("3 x 3")) {      dX=new int[]{1,1,1,0,-1,-1,-1,0};      dY=new int[]{-1,0,1,1,1,0,-1,-1};      maskX=new double[]{1,2,1,0,-1,-2,-1,0};      maskY=new double[]{1,0,-1,-2,-1,0,1,2};    } else {      dX=new int[]{-2,-1,0,1,2,-2,-1,0,1,2,-2,-1,0,1,2,-2,-1,0,1,2,-2,-1,0,1,2};      dY=new int[]{-2,-2,-2,-2,-2,-1,-1,-1,-1,-1,0,0,0,0,0,1,1,1,1,1,2,2,2,2,2};      maskX=new double[]{2,1,0,-1,-2,3,2,0,-2,-3,4,3,0,-3,-4,3,2,0,-2,-3,2,1,0,-1,-2};      maskY=new double[]{2,3,4,3,2,1,2,3,2,1,0,0,0,0,0,-1,-2,-3,-2,-1,-2,-3,-4,-3,-2};    }    numPixelsInFilter=dX.length;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          slopeX=0;          slopeY=0;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            val=inputFile.getValue(y,x);            if (val == noData) {              val=z;            }            slopeX+=val * maskX[a];            slopeY+=val * maskY[a];          }          val=Math.sqrt(slopeX * slopeX + slopeY * slopeY);          outputFile.setValue(row,col,val);        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void buttonPreviousMonthActionPerformed(ActionEvent e){  try {    drawCalendar(displayedYearMonth.minusMonths(1));  } catch (  Exception ex) {  }}  }
class C{  public void printShortString(PrintWriter pw){  pw.print("{alpha=");  pw.print(mAlpha);  pw.print(" matrix=");  mMatrix.printShortString(pw);  pw.print('}');}  }
class C{  protected String doWaitForPath(String filePath){  String path=null;  long waitTimeMillis=0;  assertTrue("OBB " + filePath + " is not currently mounted!",mSm.isObbMounted(filePath));  while (path == null) {    try {      Thread.sleep(WAIT_TIME_INCR);      waitTimeMillis+=WAIT_TIME_INCR;      if (waitTimeMillis > MAX_WAIT_TIME) {        fail("Timed out waiting to get path of OBB file " + filePath);      }    } catch (    InterruptedException e) {    }    path=mSm.getMountedObbPath(filePath);  }  Log.i(LOG_TAG,"Got OBB path: " + path);  return path;}  }
class C{  private void initialize(){  final BluetoothManager bluetoothManager=(BluetoothManager)getSystemService(BLUETOOTH_SERVICE);  mAdapter=bluetoothManager.getAdapter();}  }
class C{  private static String formatSlot(String index,Mounted mount,boolean isHit,boolean isDestroyed,boolean isRepairable,boolean isMissing,int indentLvl){  StringBuffer output=new StringBuffer();  output.append("         <slot index=\"");  output.append(index);  output.append("\" type=\"");  if (mount == null) {    output.append("System");  } else {    output.append(mount.getType().getInternalName());    if (mount.isRearMounted()) {      output.append("\" isRear=\"true");    }    if (mount.isMechTurretMounted()) {      output.append("\" isTurreted=\"true");    }    if (mount.getType() instanceof AmmoType) {      output.append("\" shots=\"");      output.append(String.valueOf(mount.getBaseShotsLeft()));    }    if ((mount.getType() instanceof WeaponType) && (mount.getType()).hasFlag(WeaponType.F_ONESHOT)) {      output.append("\" munition=\"");      output.append(mount.getLinked().getType().getInternalName());    }    if (mount.isRapidfire()) {      output.append("\" rfmg=\"true");    }    if (mount.countQuirks() > 0) {      output.append("\" quirks=\"");      output.append(String.valueOf(mount.getQuirkList("::")));    }    if (mount.isAnyMissingTroopers()) {      output.append("\" trooperMiss=\"");      output.append(String.valueOf(mount.getMissingTrooperString()));    }  }  if (isHit) {    output.append("\" isHit=\"");    output.append(String.valueOf(isHit));  }  if (!isRepairable && (isHit || isDestroyed)) {    output.append("\" isRepairable=\"");    output.append(String.valueOf(isRepairable));  }  if (isMissing) {    output.append("\" isMissing=\"");    output.append(String.valueOf(isMissing));  }  output.append("\" isDestroyed=\"");  output.append(String.valueOf(isDestroyed));  output.append("\"/>");  output.append(CommonConstants.NL);  return output.toString();}  }
class C{  public int hashCode(){  return value;}  }
class C{  public void attach(FieldPortrayal2D portrayal,String name,double x,double y,boolean visible){  attach(portrayal,name,new Rectangle2D.Double(x,y,insideDisplay.width,insideDisplay.height),visible);}  }
class C{  public void release(Vector other,int direction){  if (!BINARY_BINDING_WITH_PERMUTE)   bind(other); else   bind(other,direction);}  }
class C{  String normalizeColumnName(String col){  if (!Strings.isNullOrEmpty(col)) {    col=NORM_TERM.matcher(col.toLowerCase()).replaceAll("");    if (col.contains(":")) {      col=StringUtils.substringAfter(col,":");    }    return col;  }  return null;}  }
class C{  public boolean isOnline(){  ConnectivityManager connectivityManager=(ConnectivityManager)getApplicationContext().getSystemService(CONNECTIVITY_SERVICE);  NetworkInfo networkInfo=connectivityManager.getActiveNetworkInfo();  if (networkInfo == null || !networkInfo.isConnected() || !networkInfo.isAvailable()) {    return false;  }  return true;}  }
class C{  public Ifeq4(){  super("ifeq4",4);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:59.227 -0500",hash_original_method="35FC8516F494B2993CB4F015ABFC8107",hash_generated_method="797FCFBAD15E51E156BF4478A85641DF") public String find(String attributeType){  try {    pos=0;    beg=0;    end=0;    cur=0;    chars=dn.toCharArray();    String attType=nextAT();    if (attType == null) {      return null;    }    while (true) {      String attValue="";      if (pos == length) {        return null;      }switch (chars[pos]) {case '"':        attValue=quotedAV();      break;case '#':    attValue=hexAV();  break;case '+':case ',':case ';':break;default :attValue=escapedAV();}if (attributeType.equalsIgnoreCase(attType)) {return attValue;}if (pos >= length) {return null;}if (chars[pos] == ',' || chars[pos] == ';') {} else if (chars[pos] != '+') {throw new IOException(ERROR_PARSE_ERROR);}pos++;attType=nextAT();if (attType == null) {throw new IOException(ERROR_PARSE_ERROR);}}} catch (IOException e) {Log.e(TAG,"Failed to parse DN: " + dn);return null;}}  }
class C{  public ResponseType responseType(){  return responseType;}  }
class C{  public synchronized byte[] asn1Encode() throws Asn1Exception, IOException {  DerOutputStream bytes=new DerOutputStream();  DerOutputStream temp=new DerOutputStream();  temp.putInteger(keyType);  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x00),temp);  temp=new DerOutputStream();  temp.putOctetString(keyValue);  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x01),temp);  temp=new DerOutputStream();  temp.write(DerValue.tag_Sequence,bytes);  return temp.toByteArray();}  }
class C{  @Override public String[] validBaudRates(){  return new String[]{"115,200 bps"};}  }
class C{  public boolean isGreaterThan(Hours other){  if (other == null) {    return getValue() > 0;  }  return getValue() > other.getValue();}  }
class C{  private static byte[] generateSeed(){  try {    ByteArrayOutputStream seedBuffer=new ByteArrayOutputStream();    DataOutputStream seedBufferOut=new DataOutputStream(seedBuffer);    seedBufferOut.writeLong(System.currentTimeMillis());    seedBufferOut.writeLong(System.nanoTime());    seedBufferOut.writeInt(Process.myPid());    seedBufferOut.writeInt(Process.myUid());    seedBufferOut.write(BUILD_FINGERPRINT_AND_DEVICE_SERIAL);    seedBufferOut.close();    return seedBuffer.toByteArray();  } catch (  IOException e) {    throw new SecurityException("Failed to generate seed",e);  }}  }
class C{  private boolean isAttackedByStrongEnemy(final Creature creature){  for (  Entity entity : creature.getAttackSources()) {    if (!(entity instanceof RPEntity)) {      continue;    }    if (((RPEntity)entity).getLevel() >= SCARED_OF_LEVEL) {      return true;    }  }  return false;}  }
class C{  public JspRuntimeContext(ServletContext context,Options options){  this.context=context;  this.options=options;  int hashSize=options.getInitialCapacity();  jsps=new ConcurrentHashMap<String,JspServletWrapper>(hashSize);  bytecodes=new ConcurrentHashMap<String,byte[]>(hashSize);  bytecodeBirthTimes=new ConcurrentHashMap<String,Long>(hashSize);  packageMap=new ConcurrentHashMap<String,Map<String,JavaFileObject>>();  if (log.isLoggable(Level.FINEST)) {    ClassLoader parentClassLoader=getParentClassLoader();    if (parentClassLoader != null) {      log.finest(Localizer.getMessage("jsp.message.parent_class_loader_is",parentClassLoader.toString()));    } else {      log.finest(Localizer.getMessage("jsp.message.parent_class_loader_is","<none>"));    }  }  initClassPath();  if (context instanceof org.apache.jasper.servlet.JspCServletContext) {    return;  }  if (Constants.IS_SECURITY_ENABLED) {    initSecurity();  }  String appBase=context.getRealPath("/");  if (!options.getDevelopment() && appBase != null && options.getCheckInterval() > 0 && !options.getUsePrecompiled()) {    if (appBase.endsWith(File.separator)) {      appBase=appBase.substring(0,appBase.length() - 1);    }    String directory=appBase.substring(appBase.lastIndexOf(File.separator));    threadName=threadName + "[" + directory+ "]";    threadStart();  }}  }
class C{  public Boolean isIsDefault(){  return isDefault;}  }
class C{  static strictfp long heavyRemainderPiO2(final double angle,final boolean negateRem){  int n, i, j, ih;  double fw;  final long lx=Double.doubleToRawLongBits(angle);  final long exp=(lx >> 52 & 0x7FF) - (1023 + 23);  double z=Double.longBitsToDouble(lx - (exp << 52));  final double x0=(int)z;  z=(z - x0) * TWO_POW_24;  final double x1=(int)z;  z=(z - x1) * TWO_POW_24;  final double x2=(int)z;  final int e0=(int)exp;  final int nx=x2 == 0.0 ? x1 == 0.0 ? 1 : 2 : 3;  double f0, f1, f2, f3, f4, f5, f6, f7;  double q0, q1, q2, q3, q4, q5;  int iq0, iq1, iq2, iq3, iq4, iq5;  final int jk=4;  final int jx=nx - 1;  final int jv=Math.max(0,(e0 - 3) / 24);  final int qZero=e0 - 24 * (jv + 1);  j=jv - jx;  if (jx == 0) {    f6=0.0;    f5=0.0;    f4=j >= -4 ? TWO_OVER_PI_TAB[j + 4] : 0.0;    f3=j >= -3 ? TWO_OVER_PI_TAB[j + 3] : 0.0;    f2=j >= -2 ? TWO_OVER_PI_TAB[j + 2] : 0.0;    f1=j >= -1 ? TWO_OVER_PI_TAB[j + 1] : 0.0;    f0=j >= 0 ? TWO_OVER_PI_TAB[j] : 0.0;    q0=x0 * f0;    q1=x0 * f1;    q2=x0 * f2;    q3=x0 * f3;    q4=x0 * f4;  } else   if (jx == 1) {    f6=0.0;    f5=j >= -5 ? TWO_OVER_PI_TAB[j + 5] : 0.0;    f4=j >= -4 ? TWO_OVER_PI_TAB[j + 4] : 0.0;    f3=j >= -3 ? TWO_OVER_PI_TAB[j + 3] : 0.0;    f2=j >= -2 ? TWO_OVER_PI_TAB[j + 2] : 0.0;    f1=j >= -1 ? TWO_OVER_PI_TAB[j + 1] : 0.0;    f0=j >= 0 ? TWO_OVER_PI_TAB[j] : 0.0;    q0=x0 * f1 + x1 * f0;    q1=x0 * f2 + x1 * f1;    q2=x0 * f3 + x1 * f2;    q3=x0 * f4 + x1 * f3;    q4=x0 * f5 + x1 * f4;  } else {    f6=j >= -6 ? TWO_OVER_PI_TAB[j + 6] : 0.0;    f5=j >= -5 ? TWO_OVER_PI_TAB[j + 5] : 0.0;    f4=j >= -4 ? TWO_OVER_PI_TAB[j + 4] : 0.0;    f3=j >= -3 ? TWO_OVER_PI_TAB[j + 3] : 0.0;    f2=j >= -2 ? TWO_OVER_PI_TAB[j + 2] : 0.0;    f1=j >= -1 ? TWO_OVER_PI_TAB[j + 1] : 0.0;    f0=j >= 0 ? TWO_OVER_PI_TAB[j] : 0.0;    q0=x0 * f2 + x1 * f1 + x2 * f0;    q1=x0 * f3 + x1 * f2 + x2 * f1;    q2=x0 * f4 + x1 * f3 + x2 * f2;    q3=x0 * f5 + x1 * f4 + x2 * f3;    q4=x0 * f6 + x1 * f5 + x2 * f4;  }  double twoPowQZero=twoPowNormal(qZero);  int jz=jk;  z=q4;  fw=(int)(TWO_POW_N24 * z);  iq0=(int)(z - TWO_POW_24 * fw);  z=q3 + fw;  fw=(int)(TWO_POW_N24 * z);  iq1=(int)(z - TWO_POW_24 * fw);  z=q2 + fw;  fw=(int)(TWO_POW_N24 * z);  iq2=(int)(z - TWO_POW_24 * fw);  z=q1 + fw;  fw=(int)(TWO_POW_N24 * z);  iq3=(int)(z - TWO_POW_24 * fw);  z=q0 + fw;  iq4=0;  iq5=0;  z=z * twoPowQZero % 8.0;  n=(int)z;  z-=n;  ih=0;  if (qZero > 0) {    i=iq3 >> 24 - qZero;    n+=i;    iq3-=i << 24 - qZero;    ih=iq3 >> 23 - qZero;  } else   if (qZero == 0) {    ih=iq3 >> 23;  } else   if (z >= 0.5) {    ih=2;  }  if (ih > 0) {    n+=1;    int carry=1;    if (iq0 != 0) {      iq0=0x1000000 - iq0;      iq1=0xFFFFFF - iq1;      iq2=0xFFFFFF - iq2;      iq3=0xFFFFFF - iq3;    } else     if (iq1 != 0) {      iq1=0x1000000 - iq1;      iq2=0xFFFFFF - iq2;      iq3=0xFFFFFF - iq3;    } else     if (iq2 != 0) {      iq2=0x1000000 - iq2;      iq3=0xFFFFFF - iq3;    } else     if (iq3 != 0) {      iq3=0x1000000 - iq3;    } else {      carry=0;    }    if (qZero > 0) {      if (qZero == 1) {        iq3&=0x7FFFFF;      } else       if (qZero == 2) {        iq3&=0x3FFFFF;      }    }    if (ih == 2) {      z=1.0 - z;      if (carry != 0) {        z-=twoPowQZero;      }    }  }  if (z == 0.0) {    if (iq3 == 0) {      return jdkRemainderPiO2(angle,negateRem);    }    if (jx == 0) {      f5=TWO_OVER_PI_TAB[jv + 5];      q5=x0 * f5;    } else     if (jx == 1) {      f6=TWO_OVER_PI_TAB[jv + 5];      q5=x0 * f6 + x1 * f5;    } else {      f7=TWO_OVER_PI_TAB[jv + 5];      q5=x0 * f7 + x1 * f6 + x2 * f5;    }    jz++;    z=q5;    fw=(int)(TWO_POW_N24 * z);    iq0=(int)(z - TWO_POW_24 * fw);    z=q4 + fw;    fw=(int)(TWO_POW_N24 * z);    iq1=(int)(z - TWO_POW_24 * fw);    z=q3 + fw;    fw=(int)(TWO_POW_N24 * z);    iq2=(int)(z - TWO_POW_24 * fw);    z=q2 + fw;    fw=(int)(TWO_POW_N24 * z);    iq3=(int)(z - TWO_POW_24 * fw);    z=q1 + fw;    fw=(int)(TWO_POW_N24 * z);    iq4=(int)(z - TWO_POW_24 * fw);    z=q0 + fw;    iq5=0;    z=z * twoPowQZero % 8.0;    n=(int)z;    z-=n;    ih=0;    if (qZero > 0) {      i=iq4 >> 24 - qZero;      n+=i;      iq4-=i << 24 - qZero;      ih=iq4 >> 23 - qZero;    } else     if (qZero == 0) {      ih=iq4 >> 23;    } else     if (z >= 0.5) {      ih=2;    }    if (ih > 0) {      n+=1;      int carry=1;      if (iq0 != 0) {        iq0=0x1000000 - iq0;        iq1=0xFFFFFF - iq1;        iq2=0xFFFFFF - iq2;        iq3=0xFFFFFF - iq3;        iq4=0xFFFFFF - iq4;      } else       if (iq1 != 0) {        iq1=0x1000000 - iq1;        iq2=0xFFFFFF - iq2;        iq3=0xFFFFFF - iq3;        iq4=0xFFFFFF - iq4;      } else       if (iq2 != 0) {        iq2=0x1000000 - iq2;        iq3=0xFFFFFF - iq3;        iq4=0xFFFFFF - iq4;      } else       if (iq3 != 0) {        iq3=0x1000000 - iq3;        iq4=0xFFFFFF - iq4;      } else       if (iq4 != 0) {        iq4=0x1000000 - iq4;      } else {        carry=0;      }      if (qZero > 0) {        if (qZero == 1) {          iq4&=0x7FFFFF;        } else         if (qZero == 2) {          iq4&=0x3FFFFF;        }      }      if (ih == 2) {        z=1.0 - z;        if (carry != 0) {          z-=twoPowQZero;        }      }    }    if (z == 0.0) {      if (iq4 == 0) {        return jdkRemainderPiO2(angle,negateRem);      }      jz--;      twoPowQZero*=TWO_POW_N24;    } else {    }  } else {  }  if (z != 0.0) {    z/=twoPowQZero;    if (z >= TWO_POW_24) {      fw=(int)(TWO_POW_N24 * z);      if (jz == jk) {        iq4=(int)(z - TWO_POW_24 * fw);        jz++;        twoPowQZero*=TWO_POW_24;        iq5=(int)fw;      } else {        return jdkRemainderPiO2(angle,negateRem);      }    } else {      if (jz == jk) {        iq4=(int)z;      } else {        iq5=(int)z;      }    }  }  fw=twoPowQZero;  if (jz == 5) {    q5=fw * iq5;    fw*=TWO_POW_N24;  } else {    q5=0.0;  }  q4=fw * iq4;  fw*=TWO_POW_N24;  q3=fw * iq3;  fw*=TWO_POW_N24;  q2=fw * iq2;  fw*=TWO_POW_N24;  q1=fw * iq1;  fw*=TWO_POW_N24;  q0=fw * iq0;  fw=PIO2_TAB0 * q5;  fw+=PIO2_TAB0 * q4 + PIO2_TAB1 * q5;  fw+=PIO2_TAB0 * q3 + PIO2_TAB1 * q4 + PIO2_TAB2 * q5;  fw+=PIO2_TAB0 * q2 + PIO2_TAB1 * q3 + PIO2_TAB2 * q4 + PIO2_TAB3 * q5;  fw+=PIO2_TAB0 * q1 + PIO2_TAB1 * q2 + PIO2_TAB2 * q3 + PIO2_TAB3 * q4 + PIO2_TAB4 * q5;  fw+=PIO2_TAB0 * q0 + PIO2_TAB1 * q1 + PIO2_TAB2 * q2 + PIO2_TAB3 * q3 + PIO2_TAB4 * q4 + PIO2_TAB5 * q5;  if (ih != 0 ^ negateRem) {    fw=-fw;  }  return encodeRemainderAndQuadrant(fw,n & 3);}  }
class C{  public void addMessage(Message message){  log.debug("Handle adding message.");  Post post;switch (message.getType()) {case NEW_REPLY:    post=postRepository.findOne(message.getPost().getId());  message.setToUser(post.getUser());if (!message.getToUser().getId().equals(message.getByUser().getId())) {  messageService.createMessage(message);}Matcher atUsers=Pattern.compile("\\@[0-9a-zA-Z]+").matcher(message.getContent());while (atUsers.find()) {String name=atUsers.group().substring(1);User user=userRepository.findByLogin(name);if (user != null) {messageService.createMessage(new Message(user,message.getByUser(),post.getTitle(),message.getContent(),post,MessageType.NEW_REPLY_TO_REPLY));}}break;case NEW_VOTE:messageService.createMessage(message);break;default :log.warn("Unrecognized message: " + message.toString());}}  }
class C{  public static Float createFloat(final String str){  if (str == null) {    return null;  }  return Float.valueOf(str);}  }
class C{  public static void unlockDevice(ITestDevice device,File testApkDir) throws DeviceNotAvailableException {  File apkFile=new File(testApkDir,String.format("%s.apk",APK_NAME));  if (!apkFile.exists()) {    Log.e(LOG_TAG,String.format("Could not find %s",apkFile.getAbsolutePath()));  }  device.installPackage(apkFile,true);  String start="am start " + APP_PACKAGE_NAME + "/"+ ACTIVITY_NAME;  CLog.i(start);  device.executeShellCommand(start);  CLog.i("Finsihed to disable keyguard on %s using %s ",device.getSerialNumber(),APK_NAME);}  }
class C{  public MockResponse clearHeaders(){  headers.clear();  return this;}  }
class C{  public List<String> toMnemonic(byte[] entropy) throws MnemonicException.MnemonicLengthException {  if (entropy.length % 4 > 0)   throw new MnemonicException.MnemonicLengthException("entropy length not multiple of 32 bits");  byte[] hash=Sha256Hash.create(entropy).getBytes();  boolean[] hashBits=bytesToBits(hash);  boolean[] entropyBits=bytesToBits(entropy);  int checksumLengthBits=entropyBits.length / 32;  boolean[] concatBits=new boolean[entropyBits.length + checksumLengthBits];  System.arraycopy(entropyBits,0,concatBits,0,entropyBits.length);  System.arraycopy(hashBits,0,concatBits,entropyBits.length,checksumLengthBits);  ArrayList<String> words=new ArrayList<String>();  int nwords=concatBits.length / 11;  for (int i=0; i < nwords; ++i) {    int index=0;    for (int j=0; j < 11; ++j) {      index<<=1;      if (concatBits[(i * 11) + j])       index|=0x1;    }    words.add(this.wordList.get(index));  }  return words;}  }
class C{  public void removeNoSubclassDependency(RVMClass source){  noSubclassHash.remove(source);}  }
class C{  private boolean skipBrackets(){  if (fToken == Symbols.TokenRBRACKET) {    nextToken();    if (fToken == Symbols.TokenLBRACKET) {      return true;    }  }  return false;}  }
class C{  public static void init(Resources res){  mMetrics=res.getDisplayMetrics();}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypeRefsPackage.FUNCTION_TYPE_EXPRESSION__BINDING:    return binding != BINDING_EDEFAULT;case TypeRefsPackage.FUNCTION_TYPE_EXPRESSION__DECLARED_TYPE:  return declaredType != null;case TypeRefsPackage.FUNCTION_TYPE_EXPRESSION__DECLARED_THIS_TYPE:return declaredThisType != null;case TypeRefsPackage.FUNCTION_TYPE_EXPRESSION__OWNED_TYPE_VARS:return ownedTypeVars != null && !ownedTypeVars.isEmpty();case TypeRefsPackage.FUNCTION_TYPE_EXPRESSION__UNBOUND_TYPE_VARS:return unboundTypeVars != null && !unboundTypeVars.isEmpty();case TypeRefsPackage.FUNCTION_TYPE_EXPRESSION__UNBOUND_TYPE_VARS_UPPER_BOUNDS:return unboundTypeVarsUpperBounds != null && !unboundTypeVarsUpperBounds.isEmpty();case TypeRefsPackage.FUNCTION_TYPE_EXPRESSION__FPARS:return fpars != null && !fpars.isEmpty();case TypeRefsPackage.FUNCTION_TYPE_EXPRESSION__RETURN_TYPE_REF:return returnTypeRef != null;}return super.eIsSet(featureID);}  }
class C{  public static void pushTx(String tx,String apiCode) throws APIException, IOException {  Map<String,String> params=new HashMap<String,String>();  params.put("tx",tx);  if (apiCode != null) {    params.put("api_code",apiCode);  }  HttpClient.getInstance().post("pushtx",params);}  }
class C{  public static Bitmap byteToBitmap(byte[] b){  return (b == null || b.length == 0) ? null : BitmapFactory.decodeByteArray(b,0,b.length);}  }
class C{  private void onTrigger2(){  Context context=getContext();  String localContextMenuDirection=getGestureDirectionForRequiredAction(getContext().getString(R.string.shortcut_value_local_breakout));  String cursorControl=context.getString(R.string.title_edittext_controls);  String moveToBeginning=context.getString(R.string.title_edittext_breakout_move_to_beginning);  addInstruction(R.string.accessibility_tutorial_lesson_5_text_3,true,localContextMenuDirection,cursorControl,moveToBeginning);  mLayout.setAccessibilityDelegate(mMoveCursorToBeginningDelegate);}  }
class C{  public ArffViewer(){  super("ARFF-Viewer");  createFrame();}  }
class C{  public EventSpecItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public DigestURL(final MultiProtocolURL baseURL,final byte[] hash){  super(baseURL);  this.hash=hash;}  }
class C{  public void store(ObjectReference val,Offset offset){  this.plus(offset).store(val);}  }
class C{  public String makeFooter(){  return "\n</rde:contents>\n</rde:deposit>\n";}  }
class C{  public static void boot(AOSOptions options){  if (options.INSERT_INSTRUCTION_COUNTERS || options.INSERT_METHOD_COUNTERS_OPT || options.INSERT_YIELDPOINT_COUNTERS|| options.INSERT_DEBUGGING_COUNTERS) {    eventCounterManager=new CounterArrayManager();  }  if (options.INSERT_METHOD_COUNTERS_OPT) {    AOSDatabase.methodInvocationCounterData=new MethodInvocationCounterData(eventCounterManager);    AOSDatabase.methodInvocationCounterData.automaticallyGrowCounters(true);    RuntimeMeasurements.registerReportableObject(AOSDatabase.methodInvocationCounterData);  }  if (options.INSERT_YIELDPOINT_COUNTERS) {    AOSDatabase.yieldpointCounterData=new YieldpointCounterData(eventCounterManager);    RuntimeMeasurements.registerReportableObject(AOSDatabase.yieldpointCounterData);  }  if (options.INSERT_INSTRUCTION_COUNTERS) {    AOSDatabase.instructionCounterData=new StringEventCounterData(eventCounterManager,"Instruction Counter");    AOSDatabase.instructionCounterData.automaticallyGrowCounters(true);    RuntimeMeasurements.registerReportableObject(AOSDatabase.instructionCounterData);  }  if (options.INSERT_DEBUGGING_COUNTERS) {    AOSDatabase.debuggingCounterData=new StringEventCounterData(eventCounterManager,"Debugging Counters");    AOSDatabase.debuggingCounterData.automaticallyGrowCounters(true);    RuntimeMeasurements.registerReportableObject(AOSDatabase.debuggingCounterData);  }}  }
class C{  protected CompoundControl(Type type,Control[] memberControls){  super(type);  this.controls=memberControls;}  }
class C{  public void __setDaoSession(DaoSession daoSession){  this.daoSession=daoSession;  myDao=daoSession != null ? daoSession.getGroupDBDao() : null;}  }
class C{  public void check(String text,String[] highlighted,String[] disabled){  Assert.assertEquals("Signature",text,StringUtil.join(myTexts,""));  StringBuilder wrongs=new StringBuilder();  Set<String> highlightSet=new HashSet<String>();  ContainerUtil.addAll(highlightSet,highlighted);  for (int i=0; i < myTexts.length; i+=1) {    if (myFlags[i].contains(Flag.HIGHLIGHT) && !highlightSet.contains(myTexts[i])) {      wrongs.append("Highlighted unexpected '").append(myTexts[i]).append("'. ");    }  }  for (int i=0; i < myTexts.length; i+=1) {    if (!myFlags[i].contains(Flag.HIGHLIGHT) && highlightSet.contains(myTexts[i])) {      wrongs.append("Not highlighted expected '").append(myTexts[i]).append("'. ");    }  }  Set<String> disabledSet=new HashSet<String>();  ContainerUtil.addAll(disabledSet,disabled);  for (int i=0; i < myTexts.length; i+=1) {    if (myFlags[i].contains(Flag.DISABLE) && !disabledSet.contains(myTexts[i])) {      wrongs.append("Highlighted a disabled '").append(myTexts[i]).append("'. ");    }  }  for (int i=0; i < myTexts.length; i+=1) {    if (!myFlags[i].contains(Flag.DISABLE) && disabledSet.contains(myTexts[i])) {      wrongs.append("Not disabled expected '").append(myTexts[i]).append("'. ");    }  }  if (wrongs.length() > 0)   Assert.fail(wrongs.toString());}  }
class C{  public JsonObject(JsonObject object){  this(object,false);}  }
class C{  public static void bindBack(LazyValue<Form> destination){  new SwipeBackSupport().bind(Display.getInstance().getCurrent(),destination);}  }
class C{  public static <A>ObjectIndex<A> createIndex(final long length){  if (length < 0) {    throw new NegativeArraySizeException("Negative length=" + length);  }  if (length <= ObjectIndex.MAX_LENGTH) {    return new ObjectArray<>(length);  } else {    return new ObjectChunks<>(length);  }}  }
class C{  public static TVShowOverviewFragment newInstance(int tvshowId){  TVShowOverviewFragment fragment=new TVShowOverviewFragment();  Bundle args=new Bundle();  args.putInt(TVSHOWID,tvshowId);  fragment.setArguments(args);  return fragment;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypesPackage.DECLARATION__TYPE:    if (resolve)     return getType();  return basicGetType();case TypesPackage.DECLARATION__TYPE_SPECIFIER:return getTypeSpecifier();case TypesPackage.DECLARATION__NAME:return getName();case TypesPackage.DECLARATION__ANNOTATIONS:return getAnnotations();case TypesPackage.DECLARATION__ID:return getId();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public boolean publish(final String publicationTopic,final String payload,final int qos,final boolean retained){  return publish(publicationTopic,ConversionUtils.stringToArray(payload),qos,retained);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_documentcreateelement.class,args);}  }
class C{  public Dependency addExclusion(Exclusion exclusion){  requireNonNull(exclusion,"Required not null exclusion");  exclusions().add(exclusion);  if (!isNew()) {    if (dependencyElement.hasSingleChild("exclusions")) {      dependencyElement.getSingleChild("exclusions").appendChild(exclusion.asXMLElement());    } else {      dependencyElement.appendChild(createElement("exclusions",exclusion.asXMLElement()));    }    exclusion.exclusionElement=dependencyElement.getSingleChild("exclusions").getLastChild();  }  return this;}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("FtpFileResult[");  buffer.append("host = ").append(host);  buffer.append(", user = ").append(user);  buffer.append(", password = ").append(password);  buffer.append(", workingDirectory = ").append(workingDirectory);  buffer.append(", logicalfilename = ").append(logicalFileName);  buffer.append(", physicalfilename = ").append(physicalFileName);  buffer.append(", relativedirectory = ").append(relativeDirectory);  buffer.append(", path = ").append(path);  buffer.append("]");  return buffer.toString();}  }
class C{  public static void reverse(long[] array){  if (array == null) {    return;  }  int i=0;  int j=array.length - 1;  long tmp;  while (j > i) {    tmp=array[j];    array[j]=array[i];    array[i]=tmp;    j--;    i++;  }}  }
class C{  public FirewallRule(){  this.dpid=DatapathId.NONE;  this.in_port=OFPort.ANY;  this.dl_src=MacAddress.NONE;  this.dl_dst=MacAddress.NONE;  this.dl_type=EthType.NONE;  this.nw_src_prefix_and_mask=IPv4AddressWithMask.NONE;  this.nw_dst_prefix_and_mask=IPv4AddressWithMask.NONE;  this.nw_proto=IpProtocol.NONE;  this.tp_src=TransportPort.NONE;  this.tp_dst=TransportPort.NONE;  this.any_dpid=true;  this.any_in_port=true;  this.any_dl_src=true;  this.any_dl_dst=true;  this.any_dl_type=true;  this.any_nw_src=true;  this.any_nw_dst=true;  this.any_nw_proto=true;  this.any_tp_src=true;  this.any_tp_dst=true;  this.priority=0;  this.action=FirewallAction.ALLOW;  this.ruleid=0;}  }
class C{  public void addContext(CharSequence context,float boost){  addContext(context,boost,true);}  }
class C{  protected boolean addNewIcon(String name){  if (log.isDebugEnabled()) {    log.debug("addNewIcon Action: iconMap.size()= " + _iconMap.size());  }  if (name == null || name.length() == 0) {    JOptionPane.showMessageDialog(_parent._paletteFrame,Bundle.getMessage("NoIconName"),Bundle.getMessage("WarningTitle"),JOptionPane.WARNING_MESSAGE);    return false;  } else   if (_iconMap.get(name) != null) {    JOptionPane.showMessageDialog(_parent._paletteFrame,Bundle.getMessage("DuplicateIconName",name),Bundle.getMessage("WarningTitle"),JOptionPane.WARNING_MESSAGE);    return false;  }  String fileName="resources/icons/misc/X-red.gif";  NamedIcon icon=new jmri.jmrit.catalog.NamedIcon(fileName,fileName);  _iconMap.put(name,icon);  return true;}  }
class C{  protected boolean accept(XSLTVisitor visitor){  return visitor.visitVariableOrParamDecl(this);}  }
class C{  public SurfaceSector(Sector sector){  if (sector == null) {    String message=Logging.getMessage("nullValue.SectorIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.sector=sector;}  }
class C{  public static String unquote(String string){  if (string.startsWith("'") && string.endsWith("'")) {    string=string.substring(1,string.length() - 1);    if ((string.indexOf("\\n") != -1) || (string.indexOf("\\r") != -1) || (string.indexOf("\\'") != -1)|| (string.indexOf("\\\"") != -1)|| (string.indexOf("\\\\") != -1)|| (string.indexOf("\\t") != -1)|| (string.indexOf("\\%") != -1)|| (string.indexOf("\\u001E") != -1)) {      string=unbackQuoteChars(string);    }  }  return string;}  }
class C{  public Entry locate(Repository repository,String path,boolean failIfBlocks) throws RepositoryException {  if (path.startsWith("" + RepositoryLocation.SEPARATOR)) {    path=path.substring(1);  }  if (path.equals("")) {    return repository;  }  String[] splitted=path.split("" + RepositoryLocation.SEPARATOR);  Folder folder=repository;  int index=0;  while (true) {    if (failIfBlocks && folder.willBlock()) {      return null;    }    if (index == splitted.length - 1) {      int retryCount=0;      while (retryCount <= 1) {        List<Entry> all=new LinkedList<>();        all.addAll(folder.getSubfolders());        all.addAll(folder.getDataEntries());        for (        Entry child : all) {          if (child.getName().equals(splitted[index])) {            return child;          }        }        if (folder.canRefreshChild(splitted[index])) {          folder.refresh();        } else {          break;        }        retryCount++;      }      return null;    } else {      int retryCount=0;      boolean found=false;      while (retryCount <= 1) {        for (        Folder subfolder : folder.getSubfolders()) {          if (subfolder.getName().equals(splitted[index])) {            folder=subfolder;            found=true;            break;          }        }        if (found) {          break;        } else {          if (folder.canRefreshChild(splitted[index])) {            folder.refresh();          } else {            break;          }          retryCount++;        }      }      if (!found) {        return null;      }    }    index++;  }}  }
class C{  public static VOBillingContact toVOBillingContact(BillingContact billingContact){  VOBillingContact voBillingContact=new VOBillingContact();  if (billingContact == null) {    voBillingContact.setOrgAddressUsed(true);  } else {    voBillingContact.setAddress(billingContact.getAddress());    voBillingContact.setCompanyName(billingContact.getCompanyName());    voBillingContact.setEmail(billingContact.getEmail());    voBillingContact.setOrgAddressUsed(billingContact.isOrgAddressUsed());    voBillingContact.setId(billingContact.getBillingContactId());    updateValueObject(voBillingContact,billingContact);  }  return voBillingContact;}  }
class C{  public static double hypot(double a,double b){  double r;  if (Math.abs(a) > Math.abs(b)) {    r=b / a;    r=Math.abs(a) * Math.sqrt(1 + r * r);  } else   if (b != 0) {    r=a / b;    r=Math.abs(b) * Math.sqrt(1 + r * r);  } else {    r=0.0;  }  return r;}  }
class C{  public CategoryGraph(Wikipedia pWiki,Iterable<Category> categories,List<String> filterList) throws WikiApiException {  Set<Integer> pageIDs=new HashSet<Integer>();  while (categories.iterator().hasNext()) {    pageIDs.add(categories.iterator().next().getPageId());  }  constructCategoryGraph(pWiki,pageIDs,filterList);}  }
class C{  public void removeInstruction(final Instruction instruction){  Preconditions.checkNotNull(instruction,"Error: Instruction argument can not be null");  m_node.removeInstruction(instruction.getNative());}  }
class C{  public static byte[] toByteArray(InputStream input,int size) throws IOException {  if (size < 0) {    throw new IllegalArgumentException("Size must be equal or greater than zero: " + size);  }  if (size == 0) {    return new byte[0];  }  byte[] data=new byte[size];  int offset=0;  int readed;  while (offset < size && (readed=input.read(data,offset,size - offset)) != EOF) {    offset+=readed;  }  if (offset != size) {    throw new IOException("Unexpected readed size. current: " + offset + ", excepted: "+ size);  }  return data;}  }
class C{  public void toggleSpeakerphone(){  setSpeakerphoneOn(!mSpeakerOn);}  }
class C{  public void testSingleMultiPolygonHolesRoundTrip() throws SQLException {  PolygonGenerator pgc=new PolygonGenerator();  pgc.setGeometryFactory(geometryFactory);  pgc.setGenerationAlgorithm(PolygonGenerator.BOX);  pgc.setNumberPoints(10);  pgc.setNumberHoles(4);  MultiGenerator pg=new MultiGenerator(pgc);  pg.setBoundingBox(new Envelope(0,10,0,10));  pg.setNumberGeometries(3);  pg.setGeometryFactory(geometryFactory);  MultiPolygon pt=(MultiPolygon)pg.create();  OraWriter ow=new OraWriter();  STRUCT st=ow.write(pt,getConnection());  OraReader or=new OraReader();  MultiPolygon pt2=(MultiPolygon)or.read(st);  assertTrue("The input MultiPolygon is not the same as the output MultiPolygon",pt.equals(pt2));}  }
class C{  public int length(){  return internal.length();}  }
class C{  private void identifyDuplicateGroupNames(final Collection<Group> groups){  LOG.debug("identifyDuplicateGroupNames");  final List<String> groupNames=new ArrayList<String>();  for (  final Group group : groups) {    if (groupNames.contains(group.getName())) {      throw new WroRuntimeException("Duplicate group name detected: " + group.getName());    }    groupNames.add(group.getName());  }}  }
class C{  protected void addTypePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_Router_type_feature"),getString("_UI_PropertyDescriptor_description","_UI_Router_type_feature","_UI_Router_type"),EipPackage.Literals.ROUTER__TYPE,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  protected final Instant addAndGet(long durationMs){  return new Instant(fakeNowMs.addAndGet(durationMs));}  }
class C{  public boolean isAsync(){  return this.isDeclaredAsync();}  }
class C{  public static <T>BeanPropertyRowMapper<T> newInstance(final Class<T> mappedClass){  BeanPropertyRowMapper<T> newInstance=new BeanPropertyRowMapper<T>();  newInstance.setRequiredType(mappedClass);  return newInstance;}  }
class C{  public static Builder builder(VoteResponse response){  return new Builder(response);}  }
class C{  public static File tryGetCanonicalFile(String path){  if (path == null)   return null;  final File file=new File(path);  return tryGetCanonicalFile(file,file);}  }
class C{  public static double max(double[] a){  double max=Double.NEGATIVE_INFINITY;  for (int i=0; i < a.length; i++) {    if (Double.isNaN(a[i]))     return Double.NaN;    if (a[i] > max)     max=a[i];  }  return max;}  }
class C{  private void internalOnReleaseControl(){  mHandler.clearReleaseControl();  final int streamType=mCurrentStream;  if (streamType < 0) {    return;  }  LogUtils.log(this,Log.VERBOSE,"Released control of stream %d",mCurrentStream);  if (!shouldAnnounceStream(streamType)) {    mHandler.post(new SpeechController.CompletionRunner(mReleaseControl,SpeechController.STATUS_INTERRUPTED));    return;  }  final String text=getAnnouncementForStreamType(R.string.template_stream_volume_set,streamType);  speakWithCompletion(text,mReleaseControl);}  }
class C{  protected int refill() throws IOException {  UnifiedDataPageX curr=_buffer.getCurrentPage();  SavePoint sp=_save_points.savePointActiveTop();  if (!can_fill_new_page()) {    return refill_is_eof();  }  if (sp != null && sp.getEndIdx() == _buffer.getCurrentPageIdx()) {    return refill_is_eof();  }  long file_position;  int start_pos=UNREAD_LIMIT;  if (curr == null) {    file_position=0;    start_pos=0;  } else {    file_position=curr.getFilePosition(_pos);    if (file_position == 0) {      start_pos=0;    }  }  int new_idx=_buffer.getNextFilledPageIdx();  if (new_idx < 0) {    curr=_buffer.getCurrentPage();    boolean needs_new_page=(curr == null);    new_idx=_buffer.getCurrentPageIdx();    if (_save_points.isSavePointOpen()) {      new_idx++;      needs_new_page=true;    }    if (needs_new_page) {      curr=_buffer.getEmptyPageIdx();    }    int read=load(curr,start_pos,file_position);    if (read < 1) {      return refill_is_eof();    }    assert (curr != null && curr.getOffsetOfFilePosition(file_position) == start_pos);    set_current_page(new_idx,curr,start_pos);  } else {    assert (!isEOF());    if (sp != null) {      int endidx=sp.getEndIdx();      if (endidx != -1 && endidx < new_idx) {        return refill_is_eof();      }    }    curr=_buffer.getPage(new_idx);    assert (curr.getStartingFileOffset() == file_position);    set_current_page(new_idx,curr,curr.getStartingOffset());    if (sp != null && sp.getEndIdx() == new_idx) {      _limit=sp.getEndPos();    }  }  assert (isEOF() ^ (_limit > 0));  return _limit;}  }
class C{  private void isClientIPBlocked(String clientIP){  if (_invLoginManager.isTheClientIPBlocked(clientIP)) {    _log.error("The client IP is blocked for too many invalid login attempts: " + clientIP);    throw APIException.unauthorized.exceedingErrorLoginLimit(_invLoginManager.getMaxAuthnLoginAttemtsCount(),_invLoginManager.getTimeLeftToUnblock(clientIP));  }}  }
class C{  public MutableInt(final String value) throws NumberFormatException {  super();  this.value=Integer.parseInt(value);}  }
class C{  @Uninterruptible("May be called from uninterruptible code") @NoInline private void checkPush(Object ref,boolean canGrow){  final boolean debug=true;  if (VM.VerifyAssertions) {    VM._assert(MemoryManager.validRef(ObjectReference.fromObject(ref)));  }  if (JNIRefsTop < 0) {    if (debug) {      VM.sysWriteln("JNIRefsTop=",JNIRefsTop);      VM.sysWriteln("JNIRefs.length=",JNIRefs.length());    }    VM.sysFail("unchecked push to negative offset!");  }  if ((JNIRefsTop >> LOG_BYTES_IN_ADDRESS) >= JNIRefs.length()) {    if (debug) {      VM.sysWriteln("JNIRefsTop=",JNIRefsTop);      VM.sysWriteln("JNIRefs.length=",JNIRefs.length());    }    VM.sysFail("unchecked pushes exceeded fudge length!");  }  if (!canGrow) {    if ((JNIRefsTop + BYTES_IN_ADDRESS) >= JNIRefsMax) {      if (debug) {        VM.sysWriteln("JNIRefsTop=",JNIRefsTop);        VM.sysWriteln("JNIRefsMax=",JNIRefsMax);      }      VM.sysFail("unchecked push can't grow JNI refs!");    }  }}  }
class C{  public static boolean isStarted(){  return started;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int i;  int progress;  int row, col;  double z=0;  double gridRes=0;  double currentVal=0;  double maxValDist=0;  double maxDist=0;  double lineSlope=0;  double azimuth=0;  double deltaX=0;  double deltaY=0;  double x=0;  int x1=0;  int x2=0;  double y=0;  int y1=0;  int y2=0;  double z1=0;  double z2=0;  double dist=0;  double oldDist=0;  double yIntercept=0;  int xStep=0;  int yStep=0;  double noData=0;  boolean flag=false;  double heightIncrement=0;  double currentMaxVal=0;  maxDist=Double.MAX_VALUE;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      azimuth=Double.parseDouble(args[i]);      if (azimuth > 360 || azimuth < 0) {        azimuth=0.1;      }      if (azimuth == 0) {        azimuth=0.1;      }      if (azimuth == 180) {        azimuth=179.9;      }      if (azimuth == 360) {        azimuth=359.9;      }      if (azimuth < 180) {        lineSlope=Math.tan(Math.toRadians(90 - azimuth));      } else {        lineSlope=Math.tan(Math.toRadians(270 - azimuth));      }    } else     if (i == 3) {      heightIncrement=Double.parseDouble(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    noData=DEM.getNoDataValue();    gridRes=(DEM.getCellSizeX() + DEM.getCellSizeY()) / 2;    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("grey.pal");    if (azimuth > 0 && azimuth <= 90) {      xStep=1;      yStep=1;    } else     if (azimuth <= 180) {      xStep=1;      yStep=-1;    } else     if (azimuth <= 270) {      xStep=-1;      yStep=-1;    } else {      xStep=-1;      yStep=1;    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        currentVal=DEM.getValue(row,col);        if (currentVal != noData) {          yIntercept=-row - lineSlope * col;          currentMaxVal=0;          maxValDist=0;          x=col;          flag=true;          do {            x=x + xStep;            if (x < 0 || x >= cols) {              flag=false;              break;            }            y=(lineSlope * x + yIntercept) * -1;            if (y < 0 || y >= rows) {              flag=false;              break;            }            deltaX=(x - col) * gridRes;            deltaY=(y - row) * gridRes;            dist=Math.sqrt(deltaX * deltaX + deltaY * deltaY);            if (dist > maxDist) {              flag=false;              break;            }            y1=(int)(y);            y2=y1 + yStep * -1;            z1=DEM.getValue(y1,(int)x);            z2=DEM.getValue(y2,(int)x);            z=z1 + (y - y1) * (z2 - z1);            if (z >= currentVal + dist * heightIncrement) {              maxValDist=dist;              flag=false;            }          } while (flag);          oldDist=dist;          y=-row;          flag=true;          do {            y=y + yStep;            if (-y < 0 || -y >= rows) {              flag=false;              break;            }            x=(y - yIntercept) / lineSlope;            if (x < 0 || x >= cols) {              flag=false;              break;            }            deltaX=(x - col) * gridRes;            deltaY=(-y - row) * gridRes;            dist=Math.sqrt(deltaX * deltaX + deltaY * deltaY);            if (dist > maxDist) {              flag=false;              break;            }            x1=(int)x;            x2=x1 + xStep;            if (x2 < 0 || x2 >= cols) {              flag=false;              break;            }            z1=DEM.getValue((int)-y,x1);            z2=DEM.getValue((int)y,x2);            z=z1 + (x - x1) * (z2 - z1);            if (z >= currentVal + dist * heightIncrement) {              if (dist < maxValDist || maxValDist == 0) {                maxValDist=dist;              }              flag=false;            }          } while (flag);          if (maxValDist == 0) {            if (dist > oldDist) {              maxValDist=-dist;            } else {              maxValDist=-oldDist;            }          }          output.setValue(row,col,maxValDist);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void assertCostMovement(CostResult costResult,int M_InOutLine_ID,MAcctSchema as,String trxName){  MCost cost=assertCost(costResult);  String whereClause="M_Product_ID=? AND M_CostElement_ID=? AND M_CostType_ID=? AND CostingMethod=? AND M_MovementLine_ID=?";  ArrayList<Object> parameters=new ArrayList();  parameters.add(costResult.M_Product_ID);  parameters.add(cost.getM_CostElement_ID());  parameters.add(cost.getM_CostType_ID());  parameters.add(as.getCostingMethod());  parameters.add(M_InOutLine_ID);  assertCostDetail(costResult,whereClause,parameters);}  }
class C{  public static byte[] encodeBase64(final byte[] binaryData){  return encodeBase64(binaryData,false);}  }
class C{  public TextFieldIsSearchState(){  super("SearchField");}  }
class C{  public Statement copyInline(Context ctx,boolean valNeeded){  SynchronizedStatement s=(SynchronizedStatement)clone();  s.expr=expr.copyInline(ctx);  if (body != null) {    s.body=body.copyInline(ctx,valNeeded);  }  return s;}  }
class C{  public String repository(){  return repository;}  }
class C{  public void register(final PanelKeys key,final AbstractPanel panel){  this.map.put(key,panel);}  }
class C{  public void addTextMsg(Object obj){  if (obj == null)   return;  StringBuffer TextMsg=new StringBuffer();  if (obj instanceof Exception) {    Exception ex=(Exception)obj;    if (ex.getMessage() != null && ex.getMessage().trim().length() > 0) {      TextMsg.append(ex.toString());    } else     if (ex instanceof NullPointerException) {      TextMsg.append(ex.getClass().getName());    }    while (ex != null) {      StackTraceElement[] st=ex.getStackTrace();      for (int i=0; i < st.length; i++) {        StackTraceElement ste=st[i];        if (i == 0 || ste.getClassName().startsWith("org.compiere") || ste.getClassName().startsWith("org.adempiere"))         TextMsg.append(" (").append(i).append("): ").append(ste.toString()).append("\n");      }      if (ex.getCause() instanceof Exception)       ex=(Exception)ex.getCause(); else       ex=null;    }  } else {    TextMsg.append(obj.toString());  }  String oldText=getTextMsg();  if (oldText == null || oldText.length() == 0)   super.setTextMsg(Util.trimSize(TextMsg.toString(),1000)); else   if (TextMsg != null && TextMsg.length() > 0)   super.setTextMsg(Util.trimSize(oldText + "\n - " + TextMsg.toString(),1000));}  }
class C{  private static short CallShortMethod(JNIEnvironment env,int objJREF,int methodID) throws Exception {  if (VM.VerifyAssertions) {    VM._assert(VM.BuildForPowerPC,ERROR_MSG_WRONG_IMPLEMENTATION);  }  if (traceJNI)   VM.sysWrite("JNI called: CallShortMethod  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object obj=env.getJNIRef(objJREF);    Object returnObj=JNIHelpers.invokeWithDotDotVarArg(obj,methodID,TypeReference.Short,false);    return Reflection.unwrapShort(returnObj);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  @Override public void onResume(){  super.onResume();  if (SnapHandler == null)   SnapHandler=new SnapshotEventHandler(getActivity().getApplicationContext());  if (Camera == null)   Camera=new CameraDriver(getActivity(),SnapHandler);  int cores=Runtime.getRuntime().availableProcessors();  Log.d(LOGTAG,"Starting compression service using " + cores + " CPU cores");  if (CompressionService.getInstance() == null)   CompressionService.initialize(cores);  Camera.init();  LiveView.setSurfaceTextureListener(SurfaceListener);  int quality=0;switch (SnapHandler.getQuality()) {case QUALITY_MEDIUM:    quality=1;  break;case QUALITY_HIGH:quality=2;break;}if (Camera.getCaptureFormat() == ImageFormat.RAW_SENSOR) quality+=3;((ImageButton)getActivity().findViewById(R.id.button_quality)).setImageLevel(quality);Camera.setSnapshotPolicy(new SerialAcquisitionPolicy());}  }
class C{  public long index(){  return index;}  }
class C{  public boolean isNetworkRoaming(){  return "true".equals(getTelephonyProperty(TelephonyProperties.PROPERTY_OPERATOR_ISROAMING,getDefaultSubscription(),"false"));}  }
class C{  private void createSceneVao(){  int vao=glGenVertexArrays();  int vbo=glGenBuffers();  glBindVertexArray(vao);  glBindBuffer(GL_ARRAY_BUFFER,vbo);  ByteBuffer bb=BufferUtils.createByteBuffer(4 * (3 + 3) * 6* 6);  FloatBuffer fv=bb.asFloatBuffer();  DemoUtils.triangulateUnitBox(fv);  glBufferData(GL_ARRAY_BUFFER,bb,GL_STATIC_DRAW);  glEnableVertexAttribArray(0);  glVertexAttribPointer(0,3,GL_FLOAT,false,4 * (3 + 3),0L);  glEnableVertexAttribArray(1);  glVertexAttribPointer(1,3,GL_FLOAT,false,4 * (3 + 3),4 * 3);  glBindBuffer(GL_ARRAY_BUFFER,0);  int ivbo=glGenBuffers();  glBindBuffer(GL_ARRAY_BUFFER,ivbo);  bb=BufferUtils.createByteBuffer(4 * (3 + 3) * boxes.length);  fv=bb.asFloatBuffer();  for (int i=0; i < boxes.length; i+=2) {    Vector3f min=boxes[i];    Vector3f max=boxes[i + 1];    fv.put((max.x + min.x) / 2.0f).put((max.y + min.y) / 2.0f).put((max.z + min.z) / 2.0f);    fv.put((max.x - min.x) / 2.0f).put((max.y - min.y) / 2.0f).put((max.z - min.z) / 2.0f);  }  glBufferData(GL_ARRAY_BUFFER,bb,GL_STATIC_DRAW);  glEnableVertexAttribArray(2);  glVertexAttribPointer(2,3,GL_FLOAT,false,4 * (3 + 3),0L);  glVertexAttribDivisor(2,1);  glEnableVertexAttribArray(3);  glVertexAttribPointer(3,3,GL_FLOAT,false,4 * (3 + 3),4 * 3);  glVertexAttribDivisor(3,1);  glBindBuffer(GL_ARRAY_BUFFER,0);  glBindVertexArray(0);  this.vaoScene=vao;}  }
class C{  private PersistentMemberID createPersistentMemberID(PartitionedRegion region){  DiskStoreImpl diskStore=null;  if (region.getAttributes().getDataPolicy().withPersistence()) {    diskStore=region.getDiskStore();  } else   if (ColocationHelper.getLeaderRegion(region).getAttributes().getDataPolicy().withPersistence()) {    diskStore=ColocationHelper.getLeaderRegion(region).getDiskStore();  }  if (null != diskStore) {    return diskStore.generatePersistentID(null);  }{    String name="No name for this member";    String diskDir=System.getProperty("user.dir");    InetAddress localHost=null;    try {      localHost=SocketCreator.getLocalHost();    } catch (    UnknownHostException e) {      logger.error("Could not determine my own host",e);    }    return (new PersistentMemberID(null,localHost,diskDir,name,redundancyProvider.prRegion.getCache().cacheTimeMillis(),(short)0));  }}  }
