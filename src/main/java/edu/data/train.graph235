class C{  public void doMouseClicked(java.awt.event.MouseEvent e){  if (!_editor.getFlag(Editor.OPTION_CONTROLS,isControlling())) {    return;  }  performMouseClicked(e);}  }
class C{  private void transmit(Command c,Map h,String b){  try {    Transmitter.transmit(c,h,b,_output);  } catch (  Exception e) {    this.interrupt();    Thread.yield();    close();  }}  }
class C{  public void dismiss(){  if (mDialog != null) {    mDialog.dismiss();  }}  }
class C{  protected static boolean contains(Class<?> c){  return data.containsKey(c);}  }
class C{  public Association_ createAssociation_(){  Association_Impl association_=new Association_Impl();  return association_;}  }
class C{  public static void sort(final CommonIndex primary,final CommonIndex secondary,final long length){  if (length < 0) {    throw new IllegalArgumentException("Length is negative:" + length);  }  if (primary.length() < length || secondary.length() < length) {    throw new IllegalArgumentException("Arrays are too short");  }  sort(primary,0,length,new Swapper(primary,secondary));  assert ArrayUtils.isSorted(primary,length);}  }
class C{  public static void writeFile(InputStream inStream,OutputStream outStream) throws IOException {  try {    byte[] buf=new byte[BUFF_SIZE];    int len=inStream.read(buf);    while (len > 0) {      outStream.write(buf,0,len);      len=inStream.read(buf);    }  }  finally {    if (inStream != null) {      inStream.close();    }    if (outStream != null) {      outStream.close();    }  }}  }
class C{  public void clear(){  stack.clear();  for (int i=0; i < notificationContainer.getWidgetCount(); i++) {    Widget child=notificationContainer.getWidget(i);    if (child instanceof NotificationPopup) {      child.removeFromParent();    }  }}  }
class C{  public ExamineEvent(final String image,final String title,final String caption){  super(RPCLASS_NAME);  String path=image;  if (!image.startsWith("http://") && !image.startsWith("https://")) {    path=IMAGE_PATH + image;  }  super.put(PATH,path);  super.put(TITLE,title);  super.put(CAPTION,caption);}  }
class C{  public void addPerson(String email){  Person person=new Person(people.size(),email);  this.people.add(person);}  }
class C{  public static int hash(int hash,boolean item){  return hash * prime + (item ? 1 : 0);}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public static void send(InternalDistributedMember recipient,int processorId,ReplyException exception,ReplySender dm){  send(recipient,processorId,exception,dm,false);}  }
class C{  private void resetRedo(String name,TungstenProperties serviceProps,Map<String,String> progress){  String clusterHome;  try {    clusterHome=ClusterConfiguration.getClusterHome();  } catch (  ConfigurationException e) {    logger.error("Unable to locate cluster-home directory; ensure replicator is properly installed",e);    return;  }  String vmrrControlScriptName="bin/vmrrd_" + name;  File vmrrControlScript=new File(clusterHome,vmrrControlScriptName);  if (vmrrControlScript.canExecute()) {    logger.info("Found vmrr control script, trying to reset Oracle redo reader: " + vmrrControlScript.getAbsolutePath());    try {      RedoReaderManager vmrrMgr=new RedoReaderManager();      vmrrMgr.setVmrrControlScript(vmrrControlScript.getAbsolutePath());      vmrrMgr.setReplicateApplyName(name);      vmrrMgr.initialize();      vmrrMgr.reset("NOW");    } catch (    ReplicatorException e) {      logger.error("Unable to configure redo reader: " + e.getMessage(),e);    }  }}  }
class C{  public void close(){  flush();  try {    out.close();  } catch (  IOException e) {    throw new IllegalStateException(e);  }}  }
class C{  public Matrix4 invert(){  boolean success=invert(this.m,this.m);  if (!success) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Matrix4","invertMatrix","singularMatrix"));  }  return this;}  }
class C{  public static void main(String[] args){  ComboBoxDemo demo=new ComboBoxDemo(null);  demo.mainImpl();}  }
class C{  public void testFloatDocValuesMatch() throws Exception {  assertU(adoc("id","1","floatdv","2"));  assertU(adoc("id","2","floatdv","5"));  assertU(adoc("id","3","floatdv","3.0","floatdv","-1.3","floatdv","2.2"));  assertU(adoc("id","4","floatdv","3"));  assertU(commit());  assertQ(req("q","floatdv:3","sort","id asc"),"//*[@numFound='2']","//result/doc[1]/str[@name='id'][.=3]","//result/doc[2]/str[@name='id'][.=4]");  assertQ(req("q","floatdv:[-1 TO 2.5]","sort","id asc"),"//*[@numFound='2']","//result/doc[1]/str[@name='id'][.=1]","//result/doc[2]/str[@name='id'][.=3]");}  }
class C{  @Override @Deprecated public Condition duplicate(){  return this;}  }
class C{  protected void updateEditor(){  try {    m_Editor.setAsText(getText());  } catch (  IllegalArgumentException ex) {  }}  }
class C{  String trailingJoinsSerial(){  if (trailingJoins.isEmpty())   return EMPTY;  StringBuilder sb=new StringBuilder();  for (  Divider<T> n : trailingJoins) {    sb.append(n.stringID).append(":");  }  sb.setLength(sb.length() - 1);  return sb.toString();}  }
class C{  void generate(){  MediaItem m1=this.getAfterMediaItem();  MediaItem m2=this.getBeforeMediaItem();  ClipSettings clipSettings1=new ClipSettings();  ClipSettings clipSettings2=new ClipSettings();  TransitionSettings transitionSetting=null;  EditSettings editSettings=new EditSettings();  List<EffectSettings> effectSettings_clip1;  List<EffectSettings> effectSettings_clip2;  String output=null;  if (mNativeHelper == null) {    if (m1 != null)     mNativeHelper=m1.getNativeContext(); else     if (m2 != null)     mNativeHelper=m2.getNativeContext();  }  transitionSetting=getTransitionSettings();  if (m1 != null && m2 != null) {    clipSettings1=m1.getClipSettings();    clipSettings2=m2.getClipSettings();    clipSettings1.beginCutTime=(int)(clipSettings1.endCutTime - this.mDurationMs);    clipSettings2.endCutTime=(int)(clipSettings2.beginCutTime + this.mDurationMs);    effectSettings_clip1=isEffectandOverlayOverlapping(m1,clipSettings1,1);    effectSettings_clip2=isEffectandOverlayOverlapping(m2,clipSettings2,2);    for (int index=0; index < effectSettings_clip2.size(); index++) {      effectSettings_clip2.get(index).startTime+=this.mDurationMs;    }    editSettings.effectSettingsArray=new EffectSettings[effectSettings_clip1.size() + effectSettings_clip2.size()];    int i=0, j=0;    while (i < effectSettings_clip1.size()) {      editSettings.effectSettingsArray[j]=effectSettings_clip1.get(i);      i++;      j++;    }    i=0;    while (i < effectSettings_clip2.size()) {      editSettings.effectSettingsArray[j]=effectSettings_clip2.get(i);      i++;      j++;    }  } else   if (m1 == null && m2 != null) {    m2.generateBlankFrame(clipSettings1);    clipSettings2=m2.getClipSettings();    clipSettings1.endCutTime=(int)(this.mDurationMs + 50);    clipSettings2.endCutTime=(int)(clipSettings2.beginCutTime + this.mDurationMs);    effectSettings_clip2=isEffectandOverlayOverlapping(m2,clipSettings2,2);    for (int index=0; index < effectSettings_clip2.size(); index++) {      effectSettings_clip2.get(index).startTime+=this.mDurationMs;    }    editSettings.effectSettingsArray=new EffectSettings[effectSettings_clip2.size()];    int i=0, j=0;    while (i < effectSettings_clip2.size()) {      editSettings.effectSettingsArray[j]=effectSettings_clip2.get(i);      i++;      j++;    }  } else   if (m1 != null && m2 == null) {    clipSettings1=m1.getClipSettings();    m1.generateBlankFrame(clipSettings2);    clipSettings1.beginCutTime=(int)(clipSettings1.endCutTime - this.mDurationMs);    clipSettings2.endCutTime=(int)(this.mDurationMs + 50);    effectSettings_clip1=isEffectandOverlayOverlapping(m1,clipSettings1,1);    editSettings.effectSettingsArray=new EffectSettings[effectSettings_clip1.size()];    int i=0, j=0;    while (i < effectSettings_clip1.size()) {      editSettings.effectSettingsArray[j]=effectSettings_clip1.get(i);      i++;      j++;    }  }  editSettings.clipSettingsArray=new ClipSettings[2];  editSettings.clipSettingsArray[0]=clipSettings1;  editSettings.clipSettingsArray[1]=clipSettings2;  editSettings.backgroundMusicSettings=null;  editSettings.transitionSettingsArray=new TransitionSettings[1];  editSettings.transitionSettingsArray[0]=transitionSetting;  output=mNativeHelper.generateTransitionClip(editSettings,mUniqueId,m1,m2,this);  setFilename(output);}  }
class C{  private byte[] readBody(Map<String,List<String>> headers,WebSocketInputStream input){  int length=getContentLength(headers);  if (length <= 0) {    return null;  }  try {    byte[] body=new byte[length];    input.readBytes(body,length);    return body;  } catch (  Throwable t) {    return null;  }}  }
class C{  public int readTimeout(byte[] buf,int offset,int length,long timeout) throws IOException {  if (_s == null || _is == null)   return -1;  int oldTimeout=_s.getSoTimeout();  try {    _s.setSoTimeout((int)timeout);    int readLength=read(buf,offset,length);    return readLength;  }  finally {    _s.setSoTimeout(oldTimeout);  }}  }
class C{  private float[][] doPolarFillCorrection(float[] xpoints,float[] ypoints,int y1){  float[][] ret=new float[2][];  int len=xpoints.length;  float[] alt_xpts=new float[len + 2];  float[] alt_ypts=new float[len + 2];  System.arraycopy(xpoints,0,alt_xpts,0,len);  System.arraycopy(ypoints,0,alt_ypts,0,len);  alt_xpts[len]=alt_xpts[len - 1];  alt_xpts[len + 1]=alt_xpts[0];  alt_ypts[len]=y1;  alt_ypts[len + 1]=alt_ypts[len];  ret[0]=alt_xpts;  ret[1]=alt_ypts;  return ret;}  }
class C{  public T caseTransformer(Transformer object){  return null;}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  public boolean[][] old_minimize(){  int i, j;  char c;  Out.print(numStates + " states before minimization, ");  if (numStates == 0) {    Out.error(ErrorMessages.ZERO_STATES);    throw new GeneratorException();  }  if (Options.no_minimize) {    Out.println("minimization skipped.");    return null;  }  boolean[][] equiv=new boolean[numStates][];  StatePairList[][] list=new StatePairList[numStates][];  for (i=1; i < numStates; i++) {    list[i]=new StatePairList[i];    equiv[i]=new boolean[i];    for (j=0; j < i; j++) {      if (isFinal[i] && isFinal[j])       equiv[i][j]=action[i].isEquiv(action[j]); else       equiv[i][j]=!isFinal[j] && !isFinal[i];    }  }  for (i=1; i < numStates; i++) {    Out.debug("Testing state " + i);    for (j=0; j < i; j++) {      if (equiv[i][j]) {        for (c=0; c < numInput; c++) {          if (equiv[i][j]) {            int p=table[i][c];            int q=table[j][c];            if (p < q) {              int t=p;              p=q;              q=t;            }            if (p >= 0 || q >= 0) {              if (p != q && (p == -1 || q == -1 || !equiv[p][q])) {                equiv[i][j]=false;                if (list[i][j] != null)                 list[i][j].markAll(list,equiv);              }            }          }        }        if (equiv[i][j]) {          for (c=0; c < numInput; c++) {            int p=table[i][c];            int q=table[j][c];            if (p < q) {              int t=p;              p=q;              q=t;            }            if (p != q && p >= 0 && q >= 0) {              if (list[p][q] == null) {                list[p][q]=new StatePairList();              }              list[p][q].addPair(i,j);            }          }        } else {        }      }    }  }  return equiv;}  }
class C{  public SVGOMMissingGlyphElement(String prefix,AbstractDocument owner){  super(prefix,owner);}  }
class C{  public void transformNode(int node,Result outputTarget) throws TransformerException {  SerializationHandler xoh=createSerializationHandler(outputTarget);  this.setSerializationHandler(xoh);  m_outputTarget=outputTarget;  transformNode(node);}  }
class C{  public void showStatistics(){  List<ResultKey> selectedResults=frame.getSelectedResults();  String problemName=selectedResults.get(0).getProblem();  Problem problem=null;  try {    problem=ProblemFactory.getInstance().getProblem(problemName);    double epsilon=EpsilonHelper.getEpsilon(problem);    Analyzer analyzer=new Analyzer().withProblem(problemName).withEpsilon(epsilon).showAggregate().showIndividualValues().showStatisticalSignificance();    if (getIncludeHypervolume()) {      analyzer.includeHypervolume();    }    if (getIncludeGenerationalDistance()) {      analyzer.includeGenerationalDistance();    }    if (getIncludeInvertedGenerationalDistance()) {      analyzer.includeInvertedGenerationalDistance();    }    if (getIncludeSpacing()) {      analyzer.includeSpacing();    }    if (getIncludeAdditiveEpsilonIndicator()) {      analyzer.includeAdditiveEpsilonIndicator();    }    if (getIncludeContribution()) {      analyzer.includeContribution();    }    for (    ResultKey key : selectedResults) {      for (      Accumulator accumulator : get(key)) {        if (!accumulator.keySet().contains("Approximation Set")) {          continue;        }        NondominatedPopulation population=new EpsilonBoxDominanceArchive(epsilon);        List<?> list=(List<?>)accumulator.get("Approximation Set",accumulator.size("Approximation Set") - 1);        for (        Object object : list) {          population.add((Solution)object);        }        analyzer.add(key.getAlgorithm(),population);      }    }    ByteArrayOutputStream stream=new ByteArrayOutputStream();    analyzer.printAnalysis(new PrintStream(stream));    StatisticalResultsViewer viewer=new StatisticalResultsViewer(this,stream.toString());    viewer.setLocationRelativeTo(frame);    viewer.setIconImages(frame.getIconImages());    viewer.setVisible(true);  } catch (  IOException ex) {    ex.printStackTrace();  } finally {    if (problem != null) {      problem.close();    }  }}  }
class C{  private boolean isSigned(){  try {    Object[] objects=this.getClass().getSigners();    if (objects == null || objects.length == 0) {      System.err.println("Unsigned self built client.");      return false;    }    if (!(objects instanceof Certificate[])) {      System.err.println("Unknown signer class");      return false;    }    Certificate[] certs=(Certificate[])objects;    for (    Certificate cert : certs) {      byte[] key=cert.getPublicKey().getEncoded();      String keyStr=toHexString(hash(key));      if (keyStr.equals(ClientGameConfiguration.get("UPDATE_SIGNER_KEY"))) {        return true;      }      System.err.println("Skipping unknown signature: " + keyStr + " from "+ cert);      if (cert instanceof X509Certificate) {        System.err.println("   " + ((X509Certificate)cert).getSubjectDN());      }    }    return false;  } catch (  Throwable e) {    e.printStackTrace();  }  return false;}  }
class C{  public static AxSfQueryResults filterRegsResultsByAsocRegs(AxSfQueryResults queryResults,UseCaseConf useCaseConf,Integer bookId) throws BookException, SessionException, ValidationException {  Collection resultsQueryResults=queryResults.getResults();  for (Iterator iterator=resultsQueryResults.iterator(); iterator.hasNext(); ) {    AxSf axSf=(AxSf)iterator.next();    boolean result=FolderAsocSession.isAsocRegsFdr(useCaseConf.getSessionID(),bookId,((Integer)axSf.getAttributeValue("fdrid")).intValue(),useCaseConf.getEntidadId());    if (result) {      iterator.remove();    }  }  return queryResults;}  }
class C{  ThreadUntilEnd(RightThreadedBinaryNode<T> start){  cur=start;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static TypedBlock[] makeBlocks(MethodInfo minfo,CodeAttribute ca,boolean optimize) throws BadBytecode {  TypedBlock[] blocks=(TypedBlock[])new Maker().make(minfo);  if (optimize && blocks.length < 2)   if (blocks.length == 0 || blocks[0].incoming == 0)   return null;  ConstPool pool=minfo.getConstPool();  boolean isStatic=(minfo.getAccessFlags() & AccessFlag.STATIC) != 0;  blocks[0].initFirstBlock(ca.getMaxStack(),ca.getMaxLocals(),pool.getClassName(),minfo.getDescriptor(),isStatic,minfo.isConstructor());  return blocks;}  }
class C{  @Override public Vertex parseExpressionByteCode(Vertex expression,BinaryData data,Network network) throws IOException {  if (data.getCache() != null) {    return (Vertex)data.getCache();  }  BinaryData bytes=data;  if (!expression.isTemporary()) {    bytes=(BinaryData)network.findData(data);    if (bytes == null) {      bytes=data;    }  }  ByteArrayInputStream byteStream=new ByteArrayInputStream(bytes.getBytes());  DataInputStream dataStream=new DataInputStream(byteStream);  Object[] result=new Object[3];  result[0]=dataStream.readLong();  parseArgumentByteCode(result,dataStream,null,network);  Vertex cache=(Vertex)result[2];  if (cache == null) {    return expression;  }  cache.setName(expression.getName());  data.setCache(cache);  bytes.setCache(cache);  return cache;}  }
class C{  public SerialMessage(String m,int l){  super(m);  setResponseLength(l);  setBinary(true);}  }
class C{  public int removeDirectionSensorsFromSSL(LayoutEditor lePanel){  if (lePanel == null) {    return -1;  }  jmri.jmrit.display.layoutEditor.ConnectivityUtil cUtil=lePanel.getConnectivityUtil();  List<String> list=getSystemNameList();  if (list.size() <= 0) {    return -2;  }  int numErrors=0;  ArrayList<String> sensorList=new ArrayList<String>();  for (int i=0; i < list.size(); i++) {    Section s=getBySystemName(list.get(i));    String name=s.getReverseBlockingSensorName();    if ((name != null) && (!name.equals(""))) {      sensorList.add(name);    }    name=s.getForwardBlockingSensorName();    if ((name != null) && (!name.equals(""))) {      sensorList.add(name);    }  }  jmri.SignalHeadManager shManager=InstanceManager.getDefault(jmri.SignalHeadManager.class);  List<String> signalList=shManager.getSystemNameList();  for (int j=0; j < signalList.size(); j++) {    SignalHead sh=shManager.getBySystemName(signalList.get(j));    if (!cUtil.removeSensorsFromSignalHeadLogic(sensorList,sh)) {      numErrors++;    }  }  return numErrors;}  }
class C{  private void init(){  try {    m_NumInstances=m_TrainSet.numInstances();    m_NumClasses=m_TrainSet.numClasses();    m_NumAttributes=m_TrainSet.numAttributes();    m_ClassType=m_TrainSet.classAttribute().type();  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public CloseableHttpClient createHttpConnection(){  LOG.trace("HTTP build new connection based on connection pool");  CloseableHttpClient httpclient=HttpClients.custom().setRetryHandler(getRetryHandler()).setConnectionManager(connectionPool).setDefaultRequestConfig(rConfig).build();  LOG.trace("HTTP created connection based on connection pool");  return httpclient;}  }
class C{  public CSVParserBuilder withSeparator(final char separator){  this.separator=separator;  return this;}  }
class C{  @DSSource({DSSourceKind.NETWORK}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:05.655 -0500",hash_original_method="31E0BE08E1B2B985E35B0612944B01C1",hash_generated_method="638C5AFEA3994937953C50E97D9FE696") @DSVerified @DSSpec(DSCat.IO) public int read() throws IOException {  int ch;synchronized (lock) {    if (pos < internalBuffer.length) {      return internalBuffer[pos++];    }    if (eof) {      return -1;    }    if ((ch=internalReader.read()) == -1) {      eof=true;      return -1;    }    if (atBeginning) {      atBeginning=false;      if (ch == '.') {        ch=internalReader.read();        if (ch != '.') {          eof=true;          internalReader.read();          return -1;        } else {          return '.';        }      }    }    if (ch == '\r') {      ch=internalReader.read();      if (ch == '\n') {        ch=internalReader.read();        if (ch == '.') {          ch=internalReader.read();          if (ch != '.') {            internalReader.read();            eof=true;          } else {            internalBuffer[--pos]=(char)ch;          }        } else {          internalReader.unread(ch);        }        pos-=LS_CHARS.length;        System.arraycopy(LS_CHARS,0,internalBuffer,pos,LS_CHARS.length);        ch=internalBuffer[pos++];      } else {        internalBuffer[--pos]=(char)ch;        return '\r';      }    }    return ch;  }}  }
class C{  public long pop(){  long result=heap[1];  heap[1]=heap[size];  size--;  downHeap();  return result;}  }
class C{  public final int size(){  return current_item + 1;}  }
class C{  private CacheConfiguration<Integer,String> createCacheConfiguration(){  CacheConfiguration<Integer,String> ccfg=new CacheConfiguration<>();  ccfg.setName(CACHE_NAME);  ccfg.setOffHeapMaxMemory(0);  ccfg.setMemoryMode(memoryMode);  ccfg.setEvictionPolicy(evictionPlc);  return ccfg;}  }
class C{  private void rebuildCopyFields(List<CopyField> oldCopyFields){  if (oldCopyFields.size() > 0) {    for (    CopyField copyField : oldCopyFields) {      SchemaField source=fields.get(copyField.getSource().getName());      SchemaField destination=fields.get(copyField.getDestination().getName());      registerExplicitSrcAndDestFields(copyField.getSource().getName(),copyField.getMaxChars(),destination,source);    }  }}  }
class C{  private Class invokeVirtualHarness(Class specimen,ConcreteMethod method,String returns,String... args){  Method cm=new ConcreteMethod(method.getReturnType(),method.getName(),"return " + returns + ";",method.getElements());  Class stub=new Class(specimen.getName(),cm);  String params=Arrays.asList(args).stream().collect(Collectors.joining(", ")).toString();  ConcreteMethod sm=new ConcreteMethod(method.getReturnType(),method.getName(),String.format("return (new %s()).%s(%s);",specimen.getName(),method.getName(),params),new AccessFlag("public"),new AccessFlag("static"));  Class iv=new Class("IV_" + specimen.getName(),sm);  iv.addCompilationDependency(stub);  iv.addCompilationDependency(cm);  return iv;}  }
class C{  private void registerAllCombinations(Attribute[] groupByAttributes,MultidimensionalArraySet<AggregationFunction[]> functionSet,boolean ignoreMissings,AggregationAttribute[] aggregationAttributes) throws UserError {  registerAllCombinationsRecursion(groupByAttributes,functionSet,ignoreMissings,aggregationAttributes,new int[groupByAttributes.length],0);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static void uncontribute(ComponentAddon component){  contributedComponents.remove(component);  if (currentAddon != null) {    component.uninitialize(currentAddon);  }}  }
class C{  public String wrapHTML(String text,double width,double height,TextRendererCache renderers){  if (text == null) {    String msg=Logging.getMessage("nullValue.StringIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (renderers == null) {    String msg=Logging.getMessage("nullValue.TextRendererCacheIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  DrawState ds=new DrawState(renderers,this.textRenderer.getFont(),null,this.textColor);  return wrapTextHTML(text,width,height,ds);}  }
class C{  public boolean isContinue(){  return continuing;}  }
class C{  public static Collection<File> findPaths(final DigestURL url,final int depth,final String ext,State state){  Collection<File> result=new ArrayList<>();  if (state == State.INVENTORY || state == State.ANY)   result.addAll(inventory.findPaths(url,depth,ext));  if (state == State.ARCHIVE || state == State.ANY)   result.addAll(archive.findPaths(url,depth,ext));  return result;}  }
class C{  public static void releaseMBeanServer(MBeanServer mbeanServer){  checkPermission("releaseMBeanServer");  removeMBeanServer(mbeanServer);}  }
class C{  public String format(final LogEvent event){  final StringBuffer sb=new StringBuffer();  for (int i=0; i < m_formatSpecification.length; i++) {    final PatternRun run=m_formatSpecification[i];    if (run.m_type == TYPE_TEXT) {      sb.append(run.m_data);    } else {      final String data=formatPatternRun(event,run);      if (null != data) {        append(sb,run.m_minSize,run.m_maxSize,run.m_rightJustify,data);      }    }  }  return sb.toString();}  }
class C{  public BinaryBitwiseExpression createBinaryBitwiseExpression(){  BinaryBitwiseExpressionImpl binaryBitwiseExpression=new BinaryBitwiseExpressionImpl();  return binaryBitwiseExpression;}  }
class C{  public void decode(){  try {    decode0();  } catch (  Exception ex) {    throw ExceptionWithContext.withContext(ex,"...while decoding debug info");  }}  }
class C{  public void test_SelectThreeTables() throws SQLException {  String sql="SELECT onum, " + DatabaseCreator.ORDERS_TABLE + ".cnum"+ " FROM "+ DatabaseCreator.SALESPEOPLE_TABLE+ ", "+ DatabaseCreator.CUSTOMERS_TABLE+ ", "+ DatabaseCreator.ORDERS_TABLE+ " WHERE "+ DatabaseCreator.CUSTOMERS_TABLE+ ".city <> "+ DatabaseCreator.SALESPEOPLE_TABLE+ ".city"+ " AND "+ DatabaseCreator.ORDERS_TABLE+ ".cnum = "+ DatabaseCreator.CUSTOMERS_TABLE+ ".cnum"+ " AND "+ DatabaseCreator.ORDERS_TABLE+ ".snum = "+ DatabaseCreator.SALESPEOPLE_TABLE+ ".snum";  ResultSet result=statement.executeQuery(sql);  HashMap<Integer,Integer> value=new HashMap<Integer,Integer>();  value.put(3001,2008);  value.put(3002,2007);  value.put(3006,2008);  value.put(3009,2002);  value.put(3007,2004);  value.put(3010,2004);  while (result.next()) {    int key=result.getInt("onum");    int val=result.getInt("cnum");    assertTrue("wrong value of onum field",value.containsKey(key));    assertEquals("wrong value of cnum field",value.get(key),(Integer)val);    value.remove(key);  }  assertTrue("expected rows number doesn't equal actual rows number",value.isEmpty());  result.close();}  }
class C{  public void addListener(final IMemoryViewerSynchronizerListener listener){  m_listeners.addListener(listener);}  }
class C{  public static void v(String tag,String msg,Object... args){  if (sLevel > LEVEL_VERBOSE) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.v(tag,msg);}  }
class C{  public PrincipalId updateSolutionUserDetail(String tenantName,String userName,SolutionDetail detail) throws Exception {  return getService().updateSolutionUserDetail(tenantName,userName,detail,this.getServiceContext());}  }
class C{  public static double minimum(double[] vals){  double min=Double.POSITIVE_INFINITY;  for (int i=0; i < vals.length; i++)   if (min > vals[i])   min=vals[i];  return min;}  }
class C{  @Override public void intialize(CarbonColumn[] carbonColumns,AbsoluteTableIdentifier absoluteTableIdentifier){  this.carbonColumns=carbonColumns;  dictionaries=new Dictionary[carbonColumns.length];  dataTypes=new DataType[carbonColumns.length];  for (int i=0; i < carbonColumns.length; i++) {    if (carbonColumns[i].hasEncoding(Encoding.DICTIONARY) && !carbonColumns[i].hasEncoding(Encoding.DIRECT_DICTIONARY)) {      CacheProvider cacheProvider=CacheProvider.getInstance();      Cache<DictionaryColumnUniqueIdentifier,Dictionary> forwardDictionaryCache=cacheProvider.createCache(CacheType.FORWARD_DICTIONARY,absoluteTableIdentifier.getStorePath());      try {        dataTypes[i]=carbonColumns[i].getDataType();        dictionaries[i]=forwardDictionaryCache.get(new DictionaryColumnUniqueIdentifier(absoluteTableIdentifier.getCarbonTableIdentifier(),carbonColumns[i].getColumnIdentifier(),dataTypes[i]));      } catch (      CarbonUtilException e) {        throw new RuntimeException(e);      }    }  }}  }
class C{  public static Date convertDate(String date){  Date receivedDate=null;  try {    receivedDate=dateFormat.parse(date);  } catch (  ParseException e) {    Log.e(TAG,"Invalid date format." + e);  }  return receivedDate;}  }
class C{  private void failTask(Throwable e){  ServiceUtils.logSevere(this,e);  this.sendSelfPatch(buildPatch(TaskState.TaskStage.FAILED,e));}  }
class C{  public void add(long x){  Cell[] as;  long b, v;  int[] hc;  Cell a;  int n;  if ((as=cells) != null || !casBase(b=base,b + x)) {    boolean uncontended=true;    if ((hc=threadHashCode.get()) == null || as == null || (n=as.length) < 1 || (a=as[(n - 1) & hc[0]]) == null || !(uncontended=a.cas(v=a.value,v + x)))     retryUpdate(x,hc,uncontended);  }}  }
class C{  public boolean isEditable(){  return editable;}  }
class C{  public static int trimList(List<PngChunk> target,ChunkPredicate predicateRemove){  Iterator<PngChunk> it=target.iterator();  int cont=0;  while (it.hasNext()) {    PngChunk c=it.next();    if (predicateRemove.match(c)) {      it.remove();      cont++;    }  }  return cont;}  }
class C{  public Matrix(final int rows,final int cols,final Set<Address.Flags> flags){  super(rows,cols,null);  this.addr=new DirectMatrixAddress(this.$,0,rows,null,0,cols,flags,true,rows,cols);}  }
class C{  public OFOpenFlowVendorData(){}  }
class C{  public static void main(String[] ops){  int n=Integer.parseInt(ops[0]);  if (n <= 0)   n=10;  long seed=Long.parseLong(ops[1]);  if (seed <= 0)   seed=45;  RandomVariates var=new RandomVariates(seed);  double varb[]=new double[n];  try {    System.out.println("Generate " + n + " values with std. exp dist:");    for (int i=0; i < n; i++) {      varb[i]=var.nextExponential();      System.out.print("[" + i + "] "+ varb[i]+ ", ");    }    System.out.println("\nMean is " + Utils.mean(varb) + ", Variance is "+ Utils.variance(varb)+ "\n\nGenerate "+ n+ " values with"+ " std. Erlang-5 dist:");    for (int i=0; i < n; i++) {      varb[i]=var.nextErlang(5);      System.out.print("[" + i + "] "+ varb[i]+ ", ");    }    System.out.println("\nMean is " + Utils.mean(varb) + ", Variance is "+ Utils.variance(varb)+ "\n\nGenerate "+ n+ " values with"+ " std. Gamma(4.5) dist:");    for (int i=0; i < n; i++) {      varb[i]=var.nextGamma(4.5);      System.out.print("[" + i + "] "+ varb[i]+ ", ");    }    System.out.println("\nMean is " + Utils.mean(varb) + ", Variance is "+ Utils.variance(varb)+ "\n\nGenerate "+ n+ " values with"+ " std. Gamma(0.5) dist:");    for (int i=0; i < n; i++) {      varb[i]=var.nextGamma(0.5);      System.out.print("[" + i + "] "+ varb[i]+ ", ");    }    System.out.println("\nMean is " + Utils.mean(varb) + ", Variance is "+ Utils.variance(varb)+ "\n\nGenerate "+ n+ " values with"+ " std. Gaussian(5, 2) dist:");    for (int i=0; i < n; i++) {      varb[i]=var.nextGaussian() * 2.0 + 5.0;      System.out.print("[" + i + "] "+ varb[i]+ ", ");    }    System.out.println("\nMean is " + Utils.mean(varb) + ", Variance is "+ Utils.variance(varb)+ "\n");  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public void registerService(boolean allowTimeout,BlockingService serviceImplementation){  addService(allowTimeout,serviceImplementation);}  }
class C{  public IntegerPolynomial(int[] coeffs){  this.coeffs=coeffs;}  }
class C{  @DSComment("OS Bundle data structure") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:36.494 -0500",hash_original_method="C647C81034119067E2383CA02CF65D5F",hash_generated_method="4BA2962153220EE5043BE8A4597C831E") public void putSerializable(String key,Serializable value){  unparcel();  mMap.put(key,value);}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case CHALLENGE:    return isSetChallenge();case RESPONSE:  return isSetResponse();}throw new IllegalStateException();}  }
class C{  public void printEquivalences(List<Revision> revs,String inRepo){  for (  Revision rev : revs) {    Set<Revision> equivalences=db.findEquivalences(rev,inRepo);    StringBuilder result=new StringBuilder();    Iterator<Revision> it=equivalences.iterator();    while (it.hasNext()) {      result.append(it.next().revId());      if (it.hasNext()) {        result.append(",");      }    }    if (equivalences.isEmpty()) {      ui.message("No Equivalences for \"%s{%s}\" in repository \"%s\"",rev.repositoryName(),rev.revId(),inRepo);    } else {      ui.message("\"%s{%s}\" == \"%s{%s}\"",rev.repositoryName(),rev.revId(),inRepo,result);    }  }}  }
class C{  public void deleteBucketWebsite(GenericRequest genericRequest) throws OSSException, ClientException {  assertParameterNotNull(genericRequest,"genericRequest");  String bucketName=genericRequest.getBucketName();  assertParameterNotNull(bucketName,"bucketName");  ensureBucketNameValid(bucketName);  Map<String,String> params=new HashMap<String,String>();  params.put(SUBRESOURCE_WEBSITE,null);  RequestMessage request=new OSSRequestMessageBuilder(getInnerClient()).setEndpoint(getEndpoint()).setMethod(HttpMethod.DELETE).setBucket(bucketName).setParameters(params).setOriginalRequest(genericRequest).build();  doOperation(request,emptyResponseParser,bucketName,null);}  }
class C{  public static String noStartingSlash(String path){  Objects.requireNonNull(path,"path must not be null");  return hasStartingSlash(path) ? path.substring(1) : path;}  }
class C{  public void onResume(boolean multitasking){  for (  CordovaPlugin plugin : this.pluginMap.values()) {    if (plugin != null) {      plugin.onResume(multitasking);    }  }}  }
class C{  public static boolean isEmailValid(String value){  return value != null && value.length() <= 100 && Pattern.compile("^[a-zA-Z0-9!#$%&'*+-/=?^_`{|}~.]+@[a-zA-Z0-9-.]+\\.[a-zA-Z0-9]+$").matcher(value).find();}  }
class C{  private long cpuTime(Thread thr){  ThreadMXBean mxBean=ManagementFactory.getThreadMXBean();  if (mxBean.isThreadCpuTimeSupported()) {    try {      return mxBean.getThreadCpuTime(thr.getId());    } catch (    UnsupportedOperationException e) {    }  }  return 0;}  }
class C{  public void spaceVertical(){  if (getSelectedNeurons().size() <= 1) {    return;  }  ArrayList<Neuron> sortedNeurons=getSelectedModelNeurons();  Collections.sort(sortedNeurons,new NeuronComparator(NeuronComparator.Type.COMPARE_Y));  double min=sortedNeurons.get(0).getY();  double max=(sortedNeurons.get(sortedNeurons.size() - 1)).getY();  double space=(max - min) / (sortedNeurons.size() - 1);  int i=0;  for (  Neuron neuron : sortedNeurons) {    neuron.setY(min + space * i);    i++;  }  repaint();}  }
class C{  public float distance(double x,double y){  float dist=normalizeDistanceForLineWidth(super.distance(x,y));  float tmpDist;  tmpDist=centerPoint.distance(x,y);  if (tmpDist < dist) {    dist=tmpDist;  }  return dist;}  }
class C{  public InternalDistributedMember(String i,int p,Version version,NetMember netMember){  netMbr=netMember;  defaultToCurrentHost();  this.vmKind=DistributionManager.NORMAL_DM_TYPE;  this.versionObj=version;}  }
class C{  public void cleanup(){  this.fbo=null;  FrameBufferContainer.removeWorldView(this);}  }
class C{  @Override public void close() throws IOException {  eos=true;  super.close();}  }
class C{  public InternalTranslationException(final String message){  this.message=message;}  }
class C{  public static double square(double num){  return num * num;}  }
class C{  UndoableCompoundRichTextChange(RichDocumentUndoManager manager){  super(manager);}  }
class C{  public KeyPair(final PrivateKey privateKey){  this(privateKey,CryptoEngines.defaultEngine());}  }
class C{  public boolean done(){  return cCalculated;}  }
class C{  public AssertionFailedException(String message){  super(message);}  }
class C{  protected AbstractFbTransaction(TransactionState initialState,FbDatabase database){  if (!ALLOWED_INITIAL_STATES.contains(initialState)) {    throw new IllegalArgumentException(String.format("Illegal initial transaction state: %s, allowed states are: %s",initialState,ALLOWED_INITIAL_STATES));  }  this.syncObject=database.getSynchronizationObject();  this.state=initialState;  this.database=database;}  }
class C{  private void insertElementAt(int value,int at){  if (at == m_firstFree)   addElement(value); else   if (at > m_firstFree) {    int index=at >>> m_SHIFT;    if (index >= m_map.length) {      int newsize=index + m_numblocks;      int[][] newMap=new int[newsize][];      System.arraycopy(m_map,0,newMap,0,m_map.length);      m_map=newMap;    }    int[] block=m_map[index];    if (null == block)     block=m_map[index]=new int[m_blocksize];    int offset=at & m_MASK;    block[offset]=value;    m_firstFree=offset + 1;  } else {    int index=at >>> m_SHIFT;    int maxindex=m_firstFree >>> m_SHIFT;    ++m_firstFree;    int offset=at & m_MASK;    int push;    while (index <= maxindex) {      int copylen=m_blocksize - offset - 1;      int[] block=m_map[index];      if (null == block) {        push=0;        block=m_map[index]=new int[m_blocksize];      } else {        push=block[m_blocksize - 1];        System.arraycopy(block,offset,block,offset + 1,copylen);      }      block[offset]=value;      value=push;      offset=0;      ++index;    }  }}  }
class C{  public LocationMenuItem(){}  }
class C{  public void testGetPublicId() throws Throwable {  Document doc;  DocumentType docType;  DOMImplementation domImpl;  String publicId;  String nullNS=null;  doc=(Document)load("staffNS",builder);  domImpl=doc.getImplementation();  docType=domImpl.createDocumentType("l2:root","PUB",nullNS);  publicId=docType.getPublicId();  assertEquals("documenttypepublicid01","PUB",publicId);}  }
class C{  private void createSignalControlFor2LightCrossing(Id<SignalSystem> signalSystemId,SignalControlData control){  SignalSystemControllerData controller=control.getFactory().createSignalSystemControllerData(signalSystemId);  control.addSignalSystemControllerData(controller);  controller.setControllerIdentifier(DefaultPlanbasedSignalSystemController.IDENTIFIER);  SignalPlanData plan=control.getFactory().createSignalPlanData(Id.create(signalSystemId.toString() + "P",SignalPlan.class));  controller.addSignalPlanData(plan);  plan.setCycleTime(this.cycle);  plan.setOffset(0);  SignalGroupSettingsData settings1=control.getFactory().createSignalGroupSettingsData(Id.create(signalSystemId.toString() + "S1",SignalGroup.class));  plan.addSignalGroupSettings(settings1);  settings1.setOnset(this.onset1);  settings1.setDropping(this.dropping1);  SignalGroupSettingsData settings2=control.getFactory().createSignalGroupSettingsData(Id.create(signalSystemId.toString() + "S2",SignalGroup.class));  plan.addSignalGroupSettings(settings2);  settings2.setOnset(this.onset1);  settings2.setDropping(this.dropping1);}  }
class C{  public void end(){  inProgress=false;}  }
class C{  public void sortR(double[] array){  sortR(DoubleList.unmodifiableView(array,array.length));}  }
class C{  public Path resolveRepoFile(String location){  return PathUtils.get(repoFiles,location);}  }
class C{  public String removeReview() throws OperationNotPermittedException, ObjectNotFoundException {  if (manageReviewModel.getServiceReview().getKey() != 0) {    getReviewService().deleteReview(manageReviewModel.getServiceReview());  }  setForwardUrl(getRequest());  return OUTCOME_MARKETPLACE_REDIRECT;}  }
class C{  @Override public Operand copy(){  return copyRO();}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public ComputeVirtualPoolRestRep createComputeVirtualPool(ComputeVirtualPoolCreateParam param) throws DatabaseException {  checkForDuplicateName(param.getName(),ComputeVirtualPool.class);  ComputeVirtualPool cvp=constructAndValidateComputeVirtualPool(param);  _dbClient.createObject(cvp);  recordOperation(OperationTypeEnum.CREATE_COMPUTE_VPOOL,VPOOL_CREATED_DESCRIPTION,cvp);  return toComputeVirtualPool(_dbClient,cvp,isComputeVirtualPoolInUse(cvp));}  }
class C{  public void testUnicodeCleanAndRegex() throws Exception {  final String updateStr="PREFIX ns: <http://example.org/ns#>\n" + "INSERT DATA { GRAPH ns:graph { ns:auml ns:label \"\u00C4\", \"\u00E4\" } }\n";  final BigdataSailUpdate update=(BigdataSailUpdate)con.prepareUpdate(QueryLanguage.SPARQL,updateStr);  update.execute();  final String queryStr="PREFIX ns: <http://example.org/ns#>\n" + "SELECT * { GRAPH ns:graph { ?s ?p ?o FILTER(regex(?o, \"\u00E4\", \"i\")) } }";  assertEquals(2L,countSolutions(queryStr));}  }
class C{  public void removeVariable(String name){  if (!checkVarName(name)) {    throw new IllegalArgumentException("Bad variable name: " + name);  }  MyNode MyNode=getVar(name);  myNodes.remove(MyNode);  for (  OrderedPair<Set<MyNode>> o : forbiddenRulesSpecs) {    o.getFirst().remove(MyNode);    o.getSecond().remove(MyNode);  }  for (  OrderedPair<Set<MyNode>> o : requiredRulesSpecs) {    o.getFirst().remove(MyNode);    o.getSecond().remove(MyNode);  }  for (  Set<MyNode> tier : tierSpecs) {    tier.remove(MyNode);  }}  }
class C{  public boolean hasExcludedName(String name){  return table.get(name) != null;}  }
class C{  @Override public String encodeURL(String url){  return url;}  }
class C{  public boolean createNewTmpFolders(){  if (!this.isStorageOk) {    return false;  }  String time=DateFormatUtils.format(new Date(),"yyyy_MM_dd_HH_mm_ss",Locale.getDefault());  File tmp=null;  if (Properties.CTG_GENERATION_DIR_PREFIX == null)   tmp=new File(Properties.CTG_DIR + File.separator + TMP_PREFIX+ time); else   tmp=new File(Properties.CTG_DIR + File.separator + TMP_PREFIX+ Properties.CTG_GENERATION_DIR_PREFIX+ "_"+ time);  if (!tmp.mkdirs())   return false;  this.tmpLogs=new File(tmp.getAbsolutePath() + File.separator + Properties.CTG_TMP_LOGS_DIR_NAME);  if (!this.tmpLogs.exists() && !this.tmpLogs.mkdirs()) {    return false;  }  this.tmpReports=new File(tmp.getAbsolutePath() + File.separator + Properties.CTG_TMP_REPORTS_DIR_NAME);  if (!this.tmpReports.exists() && !this.tmpReports.mkdirs()) {    return false;  }  this.tmpTests=new File(tmp.getAbsolutePath() + File.separator + Properties.CTG_TMP_TESTS_DIR_NAME);  if (!this.tmpTests.exists() && !this.tmpTests.mkdirs()) {    return false;  }  this.tmpPools=new File(tmp.getAbsolutePath() + File.separator + Properties.CTG_TMP_POOLS_DIR_NAME);  if (!this.tmpPools.exists() && !this.tmpPools.mkdirs()) {    return false;  }  this.tmpSeeds=new File(tmp.getAbsolutePath() + File.separator + Properties.CTG_SEEDS_DIR_NAME);  if (!this.tmpSeeds.exists() && !this.tmpSeeds.mkdirs()) {    return false;  }  return true;}  }
class C{  @Override public void run(){  amIActive=true;  String outputHeader=null;  WhiteboxRaster image=null;  WhiteboxRaster output=null;  int cols=0;  int rows=0;  double imageNoData=-32768;  double outputNoData=-32768;  int numImages;  double z;  int progress=0;  int col, row;  int a, i;  String inputFilesString=null;  String[] imageFiles;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  outputHeader=args[1];  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  if (numImages < 2) {    showFeedback("At least two images must be specified.");    return;  }  try {    double[] data;    updateProgress("Calculating min values:",0);    for (a=0; a < numImages; a++) {      image=new WhiteboxRaster(imageFiles[a],"r");      imageNoData=image.getNoDataValue();      String label="Loop " + String.valueOf(a + 1) + " of "+ String.valueOf(numImages)+ ":";      if (a == 0) {        rows=image.getNumberRows();        cols=image.getNumberColumns();        outputNoData=imageNoData;        output=new WhiteboxRaster(outputHeader,"rw",imageFiles[0],WhiteboxRaster.DataType.FLOAT,outputNoData);        output.setPreferredPalette(image.getPreferredPalette());      } else {        if (image.getNumberColumns() != cols || image.getNumberRows() != rows) {          showFeedback("All input images must have the same dimensions (rows and columns).");          return;        }      }      for (row=0; row < rows; row++) {        data=image.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] != imageNoData) {            z=output.getValue(row,col);            if (z != outputNoData) {              if (data[col] > z) {                output.setValue(row,col,data[col]);              }            } else {              output.setValue(row,col,data[col]);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(label,progress);      }      image.close();      progress=a / (numImages - 1) * 100;      updateProgress("Calculating image average:",(int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:49.161 -0500",hash_original_method="D7C64873BD0FC0A0449628F53B089507",hash_generated_method="E7A100FD0C93F22A1CE30CA6639AC7DE") @DSVerified @DSSafe(DSCat.SAFE_OTHERS) public void processingInstruction(String target,String data) throws SAXException {}  }
class C{  public final CC shrinkX(float w){  hor.setShrink(new Float(w));  return this;}  }
class C{  public void showSecondaryMenu(){  mSlidingMenu.showSecondaryMenu();}  }
class C{  public long usedSlots(){  return m_slotAllocations - m_slotDeletes;}  }
class C{  public ToStringBuilder append(short[] array){  style.append(buffer,null,array,null);  return this;}  }
class C{  public boolean hasReturn3m(){  return getReturn3m() != null;}  }
class C{  public void refreshListener(String serverKey) throws GenericServiceException {  GenericMessageListener listener=listeners.get(serverKey);  if (listener == null)   throw new GenericServiceException("No listener found with that serverKey.");  listener.refresh();}  }
class C{  @FlashException(referrer={"fileSystem"}) public static void saveAce(ShareACLForm shareACL){  String name=params.get("name");  String type=params.get("type");  String domain=params.get("domain");  String shareName=params.get("shareName");  String fileSystemId=params.get("fileSystemId");  String permission=shareACL.permission;  List<ShareACL> ace=new ArrayList<ShareACL>();  ShareACL shareAcl=new ShareACL();  ShareACLs aclsToModify=new ShareACLs();  if ("GROUP".equalsIgnoreCase(type)) {    shareAcl.setGroup(name);  } else {    shareAcl.setUser(name);  }  shareAcl.setPermission(permission);  if (domain != null && !"".equals(domain)) {    shareAcl.setDomain(domain);  }  ace.add(shareAcl);  aclsToModify.setShareACLs(ace);  FileCifsShareACLUpdateParams input=new FileCifsShareACLUpdateParams();  input.setAclsToModify(aclsToModify);  ViPRCoreClient client=BourneUtil.getViprClient();  client.fileSystems().updateShareACL(uri(fileSystemId),shareName,input);  listAcl(fileSystemId,shareName);}  }
class C{  public void clear(){  addrs.setSize(0);}  }
class C{  public static Vector SubstituteInStmtSeq(Vector stmts,Vector args,Vector params,int macroLine,int macroCol) throws ParseAlgorithmException {  Vector result=new Vector();  int i=0;  while (i < stmts.size()) {    result.addElement(SubstituteInStmt((AST)stmts.elementAt(i),args,params,macroLine,macroCol));    i=i + 1;  }  ;  return result;}  }
class C{  @Override public void clear() throws Exception {  Vector<String> classnames;  int i;  super.clear();  m_Properties.addIgnored("UI");  m_Properties.addIgnored("actionMap");  m_Properties.addIgnored("alignmentX");  m_Properties.addIgnored("alignmentY");  m_Properties.addIgnored("autoscrolls");  m_Properties.addIgnored("background");  m_Properties.addIgnored("border");  m_Properties.addIgnored("componentPopupMenu");  m_Properties.addIgnored("debugGraphicsOptions");  m_Properties.addIgnored("doubleBuffered");  m_Properties.addIgnored("enabled");  m_Properties.addIgnored("focusCycleRoot");  m_Properties.addIgnored("focusTraversalPolicy");  m_Properties.addIgnored("focusTraversalPolicyProvider");  m_Properties.addIgnored("focusable");  m_Properties.addIgnored("font");  m_Properties.addIgnored("foreground");  m_Properties.addIgnored("inheritsPopupMenu");  m_Properties.addIgnored("inputVerifier");  m_Properties.addIgnored("layout");  m_Properties.addIgnored("locale");  m_Properties.addIgnored("maximumSize");  m_Properties.addIgnored("minimumSize");  m_Properties.addIgnored("nextFocusableComponent");  m_Properties.addIgnored("opaque");  m_Properties.addIgnored("preferredSize");  m_Properties.addIgnored("requestFocusEnabled");  m_Properties.addIgnored("toolTipText");  m_Properties.addIgnored("transferHandler");  m_Properties.addIgnored("verifyInputWhenFocusTarget");  m_Properties.addIgnored("visible");  m_Properties.addIgnored("size");  m_Properties.addIgnored("location");  m_Properties.addAllowed(weka.gui.beans.BeanInstance.class,"x");  m_Properties.addAllowed(weka.gui.beans.BeanInstance.class,"y");  m_Properties.addAllowed(weka.gui.beans.BeanInstance.class,"bean");  m_Properties.addAllowed(weka.gui.beans.Saver.class,"wrappedAlgorithm");  m_Properties.addAllowed(weka.gui.beans.Loader.class,"wrappedAlgorithm");  m_Properties.addAllowed(weka.gui.beans.Saver.class,"relationNameForFilename");  if (getDataType() == DATATYPE_LAYOUT) {    m_Properties.addAllowed(weka.gui.beans.Loader.class,"beanContext");  } else {    m_Properties.addIgnored(weka.gui.beans.Loader.class,"beanContext");  }  m_Properties.addAllowed(weka.gui.beans.Filter.class,"filter");  m_Properties.addAllowed(weka.gui.beans.Associator.class,"associator");  m_Properties.addAllowed(weka.gui.beans.Classifier.class,"wrappedAlgorithm");  m_Properties.addAllowed(weka.gui.beans.Clusterer.class,"wrappedAlgorithm");  m_Properties.addAllowed(weka.gui.beans.Classifier.class,"executionSlots");  m_Properties.addAllowed(weka.gui.beans.Classifier.class,"blockOnLastFold");  m_Properties.addAllowed(weka.gui.beans.Classifier.class,"resetIncrementalClassifier");  m_Properties.addAllowed(weka.gui.beans.Classifier.class,"updateIncrementalClassifier");  m_Properties.addAllowed(weka.gui.beans.Classifier.class,"loadClassifierFileName");  m_Properties.addAllowed(weka.classifiers.Classifier.class,"debug");  m_Properties.addAllowed(weka.classifiers.Classifier.class,"options");  m_Properties.addAllowed(weka.associations.Associator.class,"options");  m_Properties.addAllowed(weka.clusterers.Clusterer.class,"options");  m_Properties.addAllowed(weka.filters.Filter.class,"options");  m_Properties.addAllowed(weka.core.converters.Saver.class,"options");  m_Properties.addAllowed(weka.core.converters.Loader.class,"options");  m_Properties.addAllowed(weka.core.converters.DatabaseSaver.class,"options");  m_Properties.addAllowed(weka.core.converters.DatabaseLoader.class,"options");  m_Properties.addAllowed(weka.core.converters.TextDirectoryLoader.class,"options");  m_Properties.addAllowed(weka.experiment.SplitEvaluator.class,"options");  m_Properties.addAllowed(weka.experiment.ResultProducer.class,"options");  m_CustomMethods.register(this,Color.class,"Color");  m_CustomMethods.register(this,Dimension.class,"Dimension");  m_CustomMethods.register(this,Font.class,"Font");  m_CustomMethods.register(this,Point.class,"Point");  m_CustomMethods.register(this,ColorUIResource.class,"ColorUIResource");  m_CustomMethods.register(this,FontUIResource.class,"FontUIResource");  m_CustomMethods.register(this,weka.gui.beans.BeanInstance.class,"BeanInstance");  m_CustomMethods.register(this,weka.gui.beans.BeanConnection.class,"BeanConnection");  m_CustomMethods.register(this,weka.gui.beans.BeanVisual.class,"BeanVisual");  m_CustomMethods.register(this,weka.gui.beans.Saver.class,"BeanSaver");  m_CustomMethods.register(this,weka.gui.beans.MetaBean.class,"MetaBean");  classnames=ConverterUtils.getFileLoaders();  for (i=0; i < classnames.size(); i++) {    m_CustomMethods.register(this,Class.forName(classnames.get(i)),"Loader");  }  classnames=ConverterUtils.getFileSavers();  for (i=0; i < classnames.size(); i++) {    m_CustomMethods.register(this,Class.forName(classnames.get(i)),"Saver");  }  m_BeanInstances=null;  m_BeanInstancesID=null;  m_CurrentMetaBean=null;  m_IgnoreBeanConnections=true;  m_BeanConnectionRelation=null;}  }
class C{  protected long handleRequestTimeouts(Iterator grants){  long smallestTimeout=Long.MAX_VALUE;  while (grants.hasNext()) {    DLockGrantToken grant=(DLockGrantToken)grants.next();    if (grant.isDestroyed()) {      continue;    }    long timeout=grant.handleRequestTimeouts();    if (timeout < smallestTimeout) {      smallestTimeout=timeout;    }  }  return smallestTimeout;}  }
class C{  public void deleteAllEntities(){  for (  OdorWorldEntity entity : entityList) {    deleteEntity(entity);  }}  }
class C{  @Override public void clear(){  datastore=new byte[this.totalNumberOfElements * this.sizeOfEachElement];}  }
class C{  private static void innerGetBoundIdentifiers(Vector<FormalParamNode> vec,ExprNode expr){  if (expr instanceof OpApplNode) {    OpApplNode node=(OpApplNode)expr;    if (node.getUnbdedQuantSymbols() != null) {      for (int i=0; i < node.getUnbdedQuantSymbols().length; i++) {        vec.add(node.getUnbdedQuantSymbols()[i]);      }    }    if (node.getBdedQuantSymbolLists() != null) {      for (int i=0; i < node.getBdedQuantSymbolLists().length; i++) {        FormalParamNode[] nodeList=node.getBdedQuantSymbolLists()[i];        for (int j=0; j < nodeList.length; j++) {          vec.add(nodeList[j]);        }        innerGetBoundIdentifiers(vec,node.getBdedQuantBounds()[i]);      }    }    for (int i=0; i < node.getArgs().length; i++) {      if (node.getArgs()[i] instanceof ExprNode) {        innerGetBoundIdentifiers(vec,(ExprNode)node.getArgs()[i]);      }    }  } else   if (expr instanceof LetInNode) {    LetInNode node=(LetInNode)expr;    for (int i=0; i < node.getLets().length; i++) {      OpDefNode def=node.getLets()[i];      for (int j=0; j < def.getParams().length; j++) {        vec.add(def.getParams()[j]);      }      innerGetBoundIdentifiers(vec,node.getBody());      return;    }  } else {    return;  }}  }
class C{  public DoubleBuffer(int k){  super(k);  this.values=new DoubleArrayList(0);  this.isSorted=false;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.DEPEND___DEPEND_1:    setDepend_1(DEPEND_1_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  @Override public Properties trackSectionBulkVideoDownload(String enrollmentId,String section,long videoCount){  SegmentAnalyticsEvent aEvent=new SegmentAnalyticsEvent();  if (section != null) {    aEvent.data.putValue(Keys.COURSE_SECTION,section);  }  aEvent.data.putValue(Keys.NO_OF_VIDEOS,videoCount);  aEvent.properties.putValue(Keys.NAME,Values.BULKDOWNLOAD_SECTION);  aEvent.setCourseContext(enrollmentId,null,Values.DOWNLOAD_MODULE);  tracker.track(Events.BULK_DOWNLOAD_SECTION,aEvent.properties);  return aEvent.properties;}  }
class C{  public String checksTurnedOffTipText(){  return "Turns time-consuming checks off - use with caution.";}  }
class C{  private void forceGC(){  System.gc();  try {    Thread.sleep(m_gctimeout);  } catch (  Exception ex) {  }}  }
class C{  public area addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  if (!success)   return success;  if (newRecord) {    StringBuffer sb=new StringBuffer("INSERT INTO AD_TreeNodeCMT " + "(AD_Client_ID,AD_Org_ID, IsActive,Created,CreatedBy,Updated,UpdatedBy, " + "AD_Tree_ID, Node_ID, Parent_ID, SeqNo) "+ "VALUES (").append(getAD_Client_ID()).append(",0, 'Y', SysDate, 0, SysDate, 0,").append(getAD_Tree_ID()).append(",").append(get_ID()).append(", 0, 999)");    int no=DB.executeUpdate(sb.toString(),get_TrxName());    if (no > 0)     log.fine("#" + no + " - TreeType=CMT"); else     log.warning("#" + no + " - TreeType=CMT");    return no > 0;  }  if (!newRecord) {    org.compiere.cm.CacheHandler thisHandler=new org.compiere.cm.CacheHandler(org.compiere.cm.CacheHandler.convertJNPURLToCacheURL(getCtx().getProperty("java.naming.provider.url")),log,getCtx(),get_TrxName());    if (!isInclude()) {      thisHandler.cleanTemplate(this.get_ID());    } else {      thisHandler.emptyTemplate();    }  }  return success;}  }
class C{  public static BigInteger sizeOfDirectoryAsBigInteger(File directory){  checkDirectory(directory);  final File[] files=directory.listFiles();  if (files == null) {    return BigInteger.ZERO;  }  BigInteger size=BigInteger.ZERO;  for (  final File file : files) {    try {      if (!isSymlink(file)) {        size=size.add(BigInteger.valueOf(sizeOf(file)));      }    } catch (    IOException ioe) {    }  }  return size;}  }
class C{  public void writeln(String str,int off,int len) throws IOException {  super.write(str,off,len);  newLine();}  }
class C{  public static Builder from(String swaggerString){  Validate.notEmpty(swaggerString,"swaggerString must not be null");  return from(new StringReader(swaggerString));}  }
class C{  public ExtendedClientConfiguration withMessageSizeThreshold(int messageSizeThreshold){  setMessageSizeThreshold(messageSizeThreshold);  return this;}  }
class C{  public int incr(T k){  return incr(k,1);}  }
class C{  public void testDivideExceptionInvalidRM(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=15;  String b="747233429293018787918347987234564568";  int bScale=10;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  try {    aNumber.divide(bNumber,100);    fail("IllegalArgumentException has not been caught");  } catch (  IllegalArgumentException e) {    assertEquals("Improper exception message","Invalid rounding mode",e.getMessage());  }}  }
class C{  public CasIdmAccessor(CasIdmClient idmClient){  logger.debug("CasIdmAccessor constructor called");  Validate.notNull(idmClient);  client=idmClient;}  }
class C{  public boolean canPace(){  return false;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof CategoryPlot)) {    return false;  }  CategoryPlot that=(CategoryPlot)obj;  if (this.orientation != that.orientation) {    return false;  }  if (!ObjectUtilities.equal(this.axisOffset,that.axisOffset)) {    return false;  }  if (!this.domainAxes.equals(that.domainAxes)) {    return false;  }  if (!this.domainAxisLocations.equals(that.domainAxisLocations)) {    return false;  }  if (this.drawSharedDomainAxis != that.drawSharedDomainAxis) {    return false;  }  if (!this.rangeAxes.equals(that.rangeAxes)) {    return false;  }  if (!this.rangeAxisLocations.equals(that.rangeAxisLocations)) {    return false;  }  if (!ObjectUtilities.equal(this.datasetToDomainAxesMap,that.datasetToDomainAxesMap)) {    return false;  }  if (!ObjectUtilities.equal(this.datasetToRangeAxesMap,that.datasetToRangeAxesMap)) {    return false;  }  if (!ObjectUtilities.equal(this.renderers,that.renderers)) {    return false;  }  if (this.renderingOrder != that.renderingOrder) {    return false;  }  if (this.columnRenderingOrder != that.columnRenderingOrder) {    return false;  }  if (this.rowRenderingOrder != that.rowRenderingOrder) {    return false;  }  if (this.domainGridlinesVisible != that.domainGridlinesVisible) {    return false;  }  if (this.domainGridlinePosition != that.domainGridlinePosition) {    return false;  }  if (!ObjectUtilities.equal(this.domainGridlineStroke,that.domainGridlineStroke)) {    return false;  }  if (!PaintUtilities.equal(this.domainGridlinePaint,that.domainGridlinePaint)) {    return false;  }  if (this.rangeGridlinesVisible != that.rangeGridlinesVisible) {    return false;  }  if (!ObjectUtilities.equal(this.rangeGridlineStroke,that.rangeGridlineStroke)) {    return false;  }  if (!PaintUtilities.equal(this.rangeGridlinePaint,that.rangeGridlinePaint)) {    return false;  }  if (this.anchorValue != that.anchorValue) {    return false;  }  if (this.rangeCrosshairVisible != that.rangeCrosshairVisible) {    return false;  }  if (this.rangeCrosshairValue != that.rangeCrosshairValue) {    return false;  }  if (!ObjectUtilities.equal(this.rangeCrosshairStroke,that.rangeCrosshairStroke)) {    return false;  }  if (!PaintUtilities.equal(this.rangeCrosshairPaint,that.rangeCrosshairPaint)) {    return false;  }  if (this.rangeCrosshairLockedOnData != that.rangeCrosshairLockedOnData) {    return false;  }  if (!ObjectUtilities.equal(this.foregroundDomainMarkers,that.foregroundDomainMarkers)) {    return false;  }  if (!ObjectUtilities.equal(this.backgroundDomainMarkers,that.backgroundDomainMarkers)) {    return false;  }  if (!ObjectUtilities.equal(this.foregroundRangeMarkers,that.foregroundRangeMarkers)) {    return false;  }  if (!ObjectUtilities.equal(this.backgroundRangeMarkers,that.backgroundRangeMarkers)) {    return false;  }  if (!ObjectUtilities.equal(this.annotations,that.annotations)) {    return false;  }  if (this.weight != that.weight) {    return false;  }  if (!ObjectUtilities.equal(this.fixedDomainAxisSpace,that.fixedDomainAxisSpace)) {    return false;  }  if (!ObjectUtilities.equal(this.fixedRangeAxisSpace,that.fixedRangeAxisSpace)) {    return false;  }  if (!ObjectUtilities.equal(this.fixedLegendItems,that.fixedLegendItems)) {    return false;  }  if (this.domainCrosshairVisible != that.domainCrosshairVisible) {    return false;  }  if (this.crosshairDatasetIndex != that.crosshairDatasetIndex) {    return false;  }  if (!ObjectUtilities.equal(this.domainCrosshairColumnKey,that.domainCrosshairColumnKey)) {    return false;  }  if (!ObjectUtilities.equal(this.domainCrosshairRowKey,that.domainCrosshairRowKey)) {    return false;  }  if (!PaintUtilities.equal(this.domainCrosshairPaint,that.domainCrosshairPaint)) {    return false;  }  if (!ObjectUtilities.equal(this.domainCrosshairStroke,that.domainCrosshairStroke)) {    return false;  }  if (this.rangeMinorGridlinesVisible != that.rangeMinorGridlinesVisible) {    return false;  }  if (!PaintUtilities.equal(this.rangeMinorGridlinePaint,that.rangeMinorGridlinePaint)) {    return false;  }  if (!ObjectUtilities.equal(this.rangeMinorGridlineStroke,that.rangeMinorGridlineStroke)) {    return false;  }  if (this.rangeZeroBaselineVisible != that.rangeZeroBaselineVisible) {    return false;  }  if (!PaintUtilities.equal(this.rangeZeroBaselinePaint,that.rangeZeroBaselinePaint)) {    return false;  }  if (!ObjectUtilities.equal(this.rangeZeroBaselineStroke,that.rangeZeroBaselineStroke)) {    return false;  }  if (!ObjectUtilities.equal(this.shadowGenerator,that.shadowGenerator)) {    return false;  }  return super.equals(obj);}  }
class C{  public void addEjbModule(String name){  Element moduleElement=new Element(ApplicationXmlTag.MODULE);  moduleElement.addContent(createNestedText(getDescriptorType().getTagByName(ApplicationXmlTag.EJB),name));  addElement(getDescriptorType().getTagByName(ApplicationXmlTag.MODULE),moduleElement,getRootElement());}  }
class C{  public AreaVO updateArea(AreaVO areaVO){  iniciarTransaccion();  List list=getCamposDatoXArea(new String[]{areaVO.getId()});  if (list != null && list.size() > 0) {    for (int i=0; i < list.size(); i++) {      CampoDatoVO campoDatoVO=(CampoDatoVO)list.get(i);      campoDatoVO.setTipoNorma(areaVO.getTipoNorma());      campoDatoVO=campoDatoDbEntity.updateCampoDato(campoDatoVO);    }  }  list=getCamposTablaXArea(new String[]{areaVO.getId()});  if (list != null && list.size() > 0) {    for (int i=0; i < list.size(); i++) {      CampoTablaVO campoTablaVO=(CampoTablaVO)list.get(i);      campoTablaVO.setTipoNorma(areaVO.getTipoNorma());      campoTablaVO=campoTablaDbEntity.updateCampoTabla(campoTablaVO);    }  }  areaVO=areaDbEntity.updateArea(areaVO);  commit();  return areaVO;}  }
class C{  protected Turnout createNewTurnout(String systemName,String userName){  String addr=systemName.substring(getSystemPrefix().length() + 1);  Turnout t=new OlcbTurnout(getSystemPrefix(),addr,memo.getTrafficController());  t.setUserName(userName);  return t;}  }
class C{  public CreateApplicationGui(ApplicationSettings applicationSettings,SplashScreen splash,List<File> parameterFiles){  this.applicationSettings=applicationSettings;  this.splash=splash;  this.parameterFiles=parameterFiles;}  }
class C{  public void propagateSwtBackground(Component component,Color background,boolean preserveDefaults){  assert EventQueue.isDispatchThread();  assert component != null;  ResourceConverter converter=ResourceConverter.getInstance();  java.awt.Color bg=converter.convertColor(background);  if (!bg.equals(component.getBackground()) || !preserveDefaults) {    component.setBackground(bg);  }}  }
class C{  public MyHashMap(){  this(DEFAULT_INITIAL_CAPACITY,DEFAULT_MAX_LOAD_FACTOR);}  }
class C{  String[] createdAssumptions(){  Boolean sufficesSelected=useSufficesButton.getSelection();  Vector<String[]> vec=new Vector<String[]>();  for (int i=0; i < this.assumeReps.size(); i++) {    NodeRepresentation rep=assumeReps.elementAt(i);    if (rep.isCreated && (sufficesSelected || (rep.nodeType != NodeRepresentation.OR_DECOMP))) {      String newDecls=null;      while (rep.onSameLineAsNext) {        if (newDecls != null) {          newDecls=newDecls + ", ";        } else {          newDecls="";        }        newDecls=newDecls + rep.nodeText[0];        i++;        rep=assumeReps.elementAt(i);      }      if (newDecls == null) {        vec.add(rep.primedNodeText());      } else {        vec.add(new String[]{newDecls + ", " + rep.nodeText[0]});      }    }  }  Vector<String> resVec=new Vector<String>();  for (int i=0; i < vec.size(); i++) {    String[] strArray=vec.elementAt(i);    for (int j=0; j < strArray.length; j++) {      String str=strArray[j];      if ((j == strArray.length - 1) && (i != vec.size() - 1)) {        str=str + ",";      }      resVec.add(str);    }  }  String[] result=new String[resVec.size()];  for (int i=0; i < result.length; i++) {    result[i]=resVec.elementAt(i);  }  return result;}  }
class C{  DhcpOfferPacket(int transId,boolean broadcast,InetAddress serverAddress,InetAddress clientIp,byte[] clientMac){  super(transId,Inet4Address.ANY,clientIp,Inet4Address.ANY,Inet4Address.ANY,clientMac,broadcast);  mSrcIp=serverAddress;}  }
class C{  public static SolrDocument assertSearchOneDoc(SolrParams p) throws Exception {  SolrDocumentList docs=assertSearch(p);  assertEquals("does not match exactly one doc: " + p.toString() + " => "+ docs.toString(),1,docs.getNumFound());  assertEquals("does not contain exactly one doc: " + p.toString() + " => "+ docs.toString(),1,docs.size());  return docs.get(0);}  }
class C{  public void clearMemoryCache(){  if (mMemoryCache != null) {    mMemoryCache.clear();  }}  }
class C{  @RequestMapping(value="/test/{id}",produces="application/json",method=RequestMethod.DELETE) public BasicCase delete(@PathVariable("id") String id){  return null;}  }
class C{  public ParameterBlock add(double d){  return add(new Double(d));}  }
class C{  public static void main(String args[]) throws Exception {  int degFree=10;  System.out.println("chi2cdf(1," + degFree + ")= "+ MathsUtils.chiSquareCdf(1,degFree));  System.out.println("chi2cdf(2," + degFree + ")= "+ MathsUtils.chiSquareCdf(2,degFree));  System.out.println("chi2cdf(3," + degFree + ")= "+ MathsUtils.chiSquareCdf(3,degFree));  for (int n=0; n < 100; n++) {    System.out.println("chi2cdf(" + n * 0.1 + "," + degFree + ")= " + MathsUtils.chiSquareCdf(n * 0.1,degFree));  }}  }
class C{  public void assertThrows(java.lang.Class<?> exceptionType,Class target,ConcreteMethod method,String returns,String... args){  Compiler compiler=compilerLocal.get();  compiler.setFlags(compilerFlags());  Class iv=invokeVirtualHarness(target,method,returns,args);  ClassLoader loader=compiler.compile(iv,target);  java.lang.Class<?> cls=null;  try {    cls=java.lang.Class.forName(iv.getName(),true,loader);  } catch (  ClassNotFoundException e) {  }  assertNotNull(cls);  java.lang.reflect.Method m=null;  try {    m=cls.getMethod(method.getName());  } catch (  NoSuchMethodException e) {  }  assertNotNull(m);  try {    m.invoke(null);    fail("Exception should have been thrown");  } catch (  InvocationTargetException|IllegalAccessException e) {    if (verboseLocal.get() == Boolean.TRUE) {      System.out.println(e.getCause());    }    assertEquals(e.getCause().getClass(),exceptionType);  }  compiler.cleanup();}  }
class C{  public void removeAll(){  for (int i=0; i < m_Selected.length; i++) {    m_Selected[i]=false;  }  fireTableRowsUpdated(0,m_Selected.length);}  }
class C{  public AbstractMRMessage createOutPacket(){  if (log.isDebugEnabled()) {    log.debug("createOutPacket for nodeType " + nodeType + " with "+ outputByteChanged[0]+ " "+ outputArray[0]+ ";"+ outputByteChanged[1]+ " "+ outputArray[1]+ ";"+ outputByteChanged[2]+ " "+ outputArray[2]+ ";"+ outputByteChanged[3]+ " "+ outputArray[3]+ ";");  }  SerialMessage m=new SerialMessage();  m.setElement(0,getNodeAddress());  m.setElement(1,17);  for (int i=0; i < (outputBits[nodeType] + 7) / 8; i++) {    if (outputByteChanged[i]) {      outputByteChanged[i]=false;      m.setElement(2,i);      m.setElement(3,outputArray[i]);      return m;    }  }  m.setElement(2,0);  m.setElement(3,outputArray[0]);  return m;}  }
class C{  public static void addPattern(String emojiText,Object icon){  emoticons.put(Pattern.compile(Pattern.quote(emojiText)),icon);}  }
class C{  @Override public boolean isValid(final Object input){  return null == input || type.isAssignableFrom(input.getClass());}  }
class C{  @Override public void clear(){  E o;  do {    o=poll();  } while (null != o);}  }
class C{  static public void assertTopAligned(View first,View second,int margin){  int[] xy=new int[2];  first.getLocationOnScreen(xy);  int firstTop=xy[1];  second.getLocationOnScreen(xy);  int secondTop=xy[1];  assertEquals("views are not top aligned",Math.abs(firstTop - secondTop),margin);}  }
class C{  public static void test(String[] argv){  Instances instances, secondInstances, train, test, empty;  Random random=new Random(2);  Reader reader;  int start, num;  ArrayList<Attribute> testAtts;  ArrayList<String> testVals;  int i, j;  try {    if (argv.length > 1) {      throw (new Exception("Usage: Instances [<filename>]"));    }    testVals=new ArrayList<String>(2);    testVals.add("first_value");    testVals.add("second_value");    testAtts=new ArrayList<Attribute>(2);    testAtts.add(new Attribute("nominal_attribute",testVals));    testAtts.add(new Attribute("numeric_attribute"));    instances=new Instances("test_set",testAtts,10);    instances.add(new DenseInstance(instances.numAttributes()));    instances.add(new DenseInstance(instances.numAttributes()));    instances.add(new DenseInstance(instances.numAttributes()));    instances.setClassIndex(0);    System.out.println("\nSet of instances created from scratch:\n");    System.out.println(instances);    if (argv.length == 1) {      String filename=argv[0];      reader=new FileReader(filename);      System.out.println("\nFirst five instances from file:\n");      instances=new Instances(reader,1);      instances.setClassIndex(instances.numAttributes() - 1);      i=0;      while ((i < 5) && (instances.readInstance(reader))) {        i++;      }      System.out.println(instances);      reader=new FileReader(filename);      instances=new Instances(reader);      instances.setClassIndex(instances.numAttributes() - 1);      System.out.println("\nDataset:\n");      System.out.println(instances);      System.out.println("\nClass index: " + instances.classIndex());    }    System.out.println("\nClass name: " + instances.classAttribute().name());    System.out.println("\nClass index: " + instances.classIndex());    System.out.println("\nClass is nominal: " + instances.classAttribute().isNominal());    System.out.println("\nClass is numeric: " + instances.classAttribute().isNumeric());    System.out.println("\nClasses:\n");    for (i=0; i < instances.numClasses(); i++) {      System.out.println(instances.classAttribute().value(i));    }    System.out.println("\nClass values and labels of instances:\n");    for (i=0; i < instances.numInstances(); i++) {      Instance inst=instances.instance(i);      System.out.print(inst.classValue() + "\t");      System.out.print(inst.toString(inst.classIndex()));      if (instances.instance(i).classIsMissing()) {        System.out.println("\tis missing");      } else {        System.out.println();      }    }    System.out.println("\nCreating random weights for instances.");    for (i=0; i < instances.numInstances(); i++) {      instances.instance(i).setWeight(random.nextDouble());    }    System.out.println("\nInstances and their weights:\n");    System.out.println(instances.instancesAndWeights());    System.out.print("\nSum of weights: ");    System.out.println(instances.sumOfWeights());    secondInstances=new Instances(instances);    Attribute testAtt=new Attribute("Inserted");    secondInstances.insertAttributeAt(testAtt,0);    System.out.println("\nSet with inserted attribute:\n");    System.out.println(secondInstances);    System.out.println("\nClass name: " + secondInstances.classAttribute().name());    secondInstances.deleteAttributeAt(0);    System.out.println("\nSet with attribute deleted:\n");    System.out.println(secondInstances);    System.out.println("\nClass name: " + secondInstances.classAttribute().name());    System.out.println("\nHeaders equal: " + instances.equalHeaders(secondInstances) + "\n");    System.out.println("\nData (internal values):\n");    for (i=0; i < instances.numInstances(); i++) {      for (j=0; j < instances.numAttributes(); j++) {        if (instances.instance(i).isMissing(j)) {          System.out.print("? ");        } else {          System.out.print(instances.instance(i).value(j) + " ");        }      }      System.out.println();    }    System.out.println("\nEmpty dataset:\n");    empty=new Instances(instances,0);    System.out.println(empty);    System.out.println("\nClass name: " + empty.classAttribute().name());    if (empty.classAttribute().isNominal()) {      Instances copy=new Instances(empty,0);      copy.renameAttribute(copy.classAttribute(),"new_name");      copy.renameAttributeValue(copy.classAttribute(),copy.classAttribute().value(0),"new_val_name");      System.out.println("\nDataset with names changed:\n" + copy);      System.out.println("\nOriginal dataset:\n" + empty);    }    start=instances.numInstances() / 4;    num=instances.numInstances() / 2;    System.out.print("\nSubset of dataset: ");    System.out.println(num + " instances from " + (start + 1)+ ". instance");    secondInstances=new Instances(instances,start,num);    System.out.println("\nClass name: " + secondInstances.classAttribute().name());    System.out.println("\nInstances and their weights:\n");    System.out.println(secondInstances.instancesAndWeights());    System.out.print("\nSum of weights: ");    System.out.println(secondInstances.sumOfWeights());    System.out.println("\nTrain and test folds for 3-fold CV:");    if (instances.classAttribute().isNominal()) {      instances.stratify(3);    }    for (j=0; j < 3; j++) {      train=instances.trainCV(3,j,new Random(1));      test=instances.testCV(3,j);      System.out.println("\nTrain: ");      System.out.println("\nInstances and their weights:\n");      System.out.println(train.instancesAndWeights());      System.out.print("\nSum of weights: ");      System.out.println(train.sumOfWeights());      System.out.println("\nClass name: " + train.classAttribute().name());      System.out.println("\nTest: ");      System.out.println("\nInstances and their weights:\n");      System.out.println(test.instancesAndWeights());      System.out.print("\nSum of weights: ");      System.out.println(test.sumOfWeights());      System.out.println("\nClass name: " + test.classAttribute().name());    }    System.out.println("\nRandomized dataset:");    instances.randomize(random);    System.out.println("\nInstances and their weights:\n");    System.out.println(instances.instancesAndWeights());    System.out.print("\nSum of weights: ");    System.out.println(instances.sumOfWeights());    System.out.print("\nInstances sorted according to first attribute:\n ");    instances.sort(0);    System.out.println("\nInstances and their weights:\n");    System.out.println(instances.instancesAndWeights());    System.out.print("\nSum of weights: ");    System.out.println(instances.sumOfWeights());  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public Vec3(){}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.N4_METHOD_DECLARATION___IS_ABSTRACT:    return isAbstract();case N4JSPackage.N4_METHOD_DECLARATION___IS_CONSTRUCTOR:  return isConstructor();case N4JSPackage.N4_METHOD_DECLARATION___IS_CALLABLE_CONSTRUCTOR:return isCallableConstructor();case N4JSPackage.N4_METHOD_DECLARATION___IS_STATIC:return isStatic();case N4JSPackage.N4_METHOD_DECLARATION___IS_VALID_NAME:return isValidName();case N4JSPackage.N4_METHOD_DECLARATION___EXISTS_EXPLICIT_SUPER_CALL:return existsExplicitSuperCall();case N4JSPackage.N4_METHOD_DECLARATION___GET_DEFINED_TYPE_ELEMENT:return getDefinedTypeElement();case N4JSPackage.N4_METHOD_DECLARATION___GET_NAME:return getName();case N4JSPackage.N4_METHOD_DECLARATION___IS_ASYNC:return isAsync();case N4JSPackage.N4_METHOD_DECLARATION___GET_LOCAL_ARGUMENTS_VARIABLE:return getLocalArgumentsVariable();case N4JSPackage.N4_METHOD_DECLARATION___GET_DEFINED_FUNCTION_OR_ACCESSOR:return getDefinedFunctionOrAccessor();case N4JSPackage.N4_METHOD_DECLARATION___APPLIES_ONLY_TO_BLOCK_SCOPED_ELEMENTS:return appliesOnlyToBlockScopedElements();}return super.eInvoke(operationID,arguments);}  }
class C{  public boolean invoke(){  if (mClickListener != null && mClickListener.onMenuItemClick(this)) {    return true;  }  if (mMenu.dispatchMenuItemSelected(mMenu.getRootMenu(),this)) {    return true;  }  if (mItemCallback != null) {    mItemCallback.run();    return true;  }  if (mIntent != null) {    try {      mMenu.getContext().startActivity(mIntent);      return true;    } catch (    ActivityNotFoundException e) {      Log.e(TAG,"Can't find activity to handle intent; ignoring",e);    }  }  if (mActionProvider != null && mActionProvider.onPerformDefaultAction()) {    return true;  }  return false;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case SRuntimePackage.EXECUTION_CONTEXT__VALUE:    return getValue();case SRuntimePackage.EXECUTION_CONTEXT__FQ_NAME:  return getFqName();case SRuntimePackage.EXECUTION_CONTEXT__WRITABLE:return isWritable();case SRuntimePackage.EXECUTION_CONTEXT__TYPE:if (resolve) return getType();return basicGetType();case SRuntimePackage.EXECUTION_CONTEXT__SLOTS:return getSlots();case SRuntimePackage.EXECUTION_CONTEXT__ACTIVE_STATES:return getActiveStates();case SRuntimePackage.EXECUTION_CONTEXT__EXECUTED_ELEMENTS:return getExecutedElements();case SRuntimePackage.EXECUTION_CONTEXT__SUSPENDED_ELEMENTS:return getSuspendedElements();case SRuntimePackage.EXECUTION_CONTEXT__SNAPSHOT:return isSnapshot();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private boolean hasGroups(){  return getGroups() != null && !getGroups().isEmpty();}  }
class C{  private String printOFormat(String sx){  int nLeadingZeros=0;  int nBlanks=0;  if (sx.equals("0") && precisionSet && precision == 0) {    sx="";  }  if (precisionSet) {    nLeadingZeros=precision - sx.length();  }  if (alternateForm) {    nLeadingZeros++;  }  if (nLeadingZeros < 0) {    nLeadingZeros=0;  }  if (fieldWidthSet) {    nBlanks=fieldWidth - nLeadingZeros - sx.length();  }  if (nBlanks < 0) {    nBlanks=0;  }  final int n=nLeadingZeros + sx.length() + nBlanks;  final char[] ca=new char[n];  int i;  if (leftJustify) {    for (i=0; i < nLeadingZeros; i++) {      ca[i]='0';    }    final char[] csx=sx.toCharArray();    for (int j=0; j < csx.length; j++, i++) {      ca[i]=csx[j];    }    for (int j=0; j < nBlanks; j++, i++) {      ca[i]=' ';    }  } else {    if (leadingZeros) {      for (i=0; i < nBlanks; i++) {        ca[i]='0';      }    } else {      for (i=0; i < nBlanks; i++) {        ca[i]=' ';      }    }    for (int j=0; j < nLeadingZeros; j++, i++) {      ca[i]='0';    }    final char[] csx=sx.toCharArray();    for (int j=0; j < csx.length; j++, i++) {      ca[i]=csx[j];    }  }  return new String(ca);}  }
class C{  public IterationNotificationEvent(Experiment source,MultiLabelClassifier classifier,Instances dataset){  super(source);  m_Classifier=classifier;  m_Dataset=dataset;}  }
class C{  private static String buildFilter(PivotField constraint){  Object value=constraint.getValue();  if (null == value) {    return "-" + constraint.getField() + ":[* TO *]";  }  String prefix="{!term f=" + constraint.getField() + "}";  if (value instanceof Date) {    return prefix + ((Date)value).toInstant();  } else {    return prefix + value;  }}  }
class C{  private void createTunnel() throws IOException, InterruptedException {  while (true) {    final SocketPolicy socketPolicy=dispatcher.peekSocketPolicy();    if (!processOneRequest(raw,raw.getInputStream(),raw.getOutputStream())) {      throw new IllegalStateException("Tunnel without any CONNECT!");    }    if (socketPolicy == SocketPolicy.UPGRADE_TO_SSL_AT_END) {      return;    }  }}  }
class C{  public void testFirstLast() throws Exception {  int upper=10;  Range index=getRange("first-last",upper);  assertEquals("first-last",index.getRanges());  assertEquals(upper + 1,index.getSelection().length);}  }
class C{  private Object writeReplace(){  return new Ser(Ser.CHRONO_ZONE_DATE_TIME_TYPE,this);}  }
class C{  public void assertGrabPoints(){  if (polyGrabPoints == null) {    polyGrabPoints=new ArrayList<GrabPoint>();  }  if (gpo == null) {    gpo=new OffsetGrabPoint(-1,-1);  }}  }
class C{  private void processAclsForShare(IsilonApi isi,FileDeviceInputOutput args,List<ShareACL> aclsToProcess){  _log.info("Start processAclsForShare to set ACL for share {}: ACL: {}",args.getShareName(),aclsToProcess);  IsilonSMBShare isilonSMBShare=new IsilonSMBShare(args.getShareName());  ArrayList<Permission> permissions=new ArrayList<Permission>();  String permissionValue=null;  String permissionTypeValue=null;  if (aclsToProcess != null) {    for (    ShareACL acl : aclsToProcess) {      String domain=acl.getDomain();      if (domain == null) {        domain="";      }      domain=domain.toLowerCase();      String userOrGroup=acl.getUser() == null ? acl.getGroup().toLowerCase() : acl.getUser().toLowerCase();      if (domain.length() > 0) {        userOrGroup=domain + "\\" + userOrGroup;      }      permissionValue=acl.getPermission().toLowerCase();      if (permissionValue.startsWith("full")) {        permissionValue=Permission.PERMISSION_FULL;      }      permissionTypeValue=Permission.PERMISSION_TYPE_ALLOW;      Permission permission=isilonSMBShare.new Permission(permissionTypeValue,permissionValue,userOrGroup);      permissions.add(permission);    }  }  isilonSMBShare.setPermissions(permissions);  _log.info("Calling Isilon API: modifyShare. Share {}, permissions {}",isilonSMBShare,permissions);  String zoneName=getZoneName(args.getvNAS());  if (zoneName != null) {    isi.modifyShare(args.getShareName(),zoneName,isilonSMBShare);  } else {    isi.modifyShare(args.getShareName(),isilonSMBShare);  }  _log.info("End processAclsForShare");}  }
class C{  private void refreshFields(){  this.loadThreshold=Math.min(this.buckets.length - 1,(int)(this.buckets.length * this.loadFactor));  this.mask=this.buckets.length - 1;}  }
class C{  public void replaceLoad(String type,String oldLoad,String newLoad){  for (  Schedule sch : getSchedulesByIdList()) {    for (    ScheduleItem si : sch.getItemsBySequenceList()) {      if (si.getTypeName().equals(type) && si.getReceiveLoadName().equals(oldLoad)) {        if (newLoad != null) {          si.setReceiveLoadName(newLoad);        } else {          si.setReceiveLoadName(ScheduleItem.NONE);        }      }      if (si.getTypeName().equals(type) && si.getShipLoadName().equals(oldLoad)) {        if (newLoad != null) {          si.setShipLoadName(newLoad);        } else {          si.setShipLoadName(ScheduleItem.NONE);        }      }    }  }}  }
class C{  @Override public String generateURL(XYDataset dataset,int series,int item){  String result=this.prefix;  boolean firstParameter=!result.contains("?");  Comparable seriesKey=dataset.getSeriesKey(series);  if (seriesKey != null) {    result+=firstParameter ? "?" : "&amp;";    try {      result+=this.seriesParameterName + "=" + URLEncoder.encode(seriesKey.toString(),"UTF-8");    } catch (    UnsupportedEncodingException ex) {      throw new RuntimeException(ex);    }    firstParameter=false;  }  long x=(long)dataset.getXValue(series,item);  String xValue=this.dateFormat.format(new Date(x));  result+=firstParameter ? "?" : "&amp;";  try {    result+=this.itemParameterName + "=" + URLEncoder.encode(xValue,"UTF-8");  } catch (  UnsupportedEncodingException ex) {    throw new RuntimeException(ex);  }  return result;}  }
class C{  public static void generateExtensionManager(File rootFolder) throws IOException {  File extManager=new File(rootFolder,IDE_INJECTOR_PATH);  StringBuilder builder=new StringBuilder();  builder.append("package " + "org.eclipse.che.ide.client.inject;\n\n");  builder.append("import org.eclipse.che.ide.client.BootstrapController;\n");  builder.append("import com.google.gwt.inject.client.GinModules;\n");  builder.append("import com.google.gwt.inject.client.Ginjector;\n");  builder.append("\n");  builder.append("/**\n");  builder.append(" * THIS CLASS WILL BE OVERRIDDEN BY MAVEN BUILD. DON'T EDIT CLASS, IT WILL HAVE NO EFFECT.\n");  builder.append(" * \n");  builder.append(" * Interface for GIN Injector, that provides access to the top level\n");  builder.append(" * application components. Implementation of Injector is generated\n");  builder.append(" * on compile time.\n");  builder.append(" */\n");  builder.append("@GinModules({\n");  generateListOfModules(builder);  builder.append("})\n");  builder.append("public interface IDEInjector extends Ginjector\n");  builder.append("{\n");  builder.append("\n");  builder.append(GeneratorUtils.TAB + "/**\n");  builder.append(GeneratorUtils.TAB + " * @return the instance of BootstrapController\n");  builder.append(GeneratorUtils.TAB + " */\n");  builder.append(GeneratorUtils.TAB + "BootstrapController getBootstrapController();\n");  builder.append("\n");  builder.append("}\n");  FileUtils.writeStringToFile(extManager,builder.toString());}  }
class C{  public void onDrawerClosed(View view){}  }
class C{  @NotNull public static PsiAnnotation createStructureAnnotation(@NotNull Project project,@NotNull PsiElement context){  JavaPsiFacade psiFacade=JavaPsiFacade.getInstance(project);  PsiElementFactory factory=psiFacade.getElementFactory();  return factory.createAnnotationFromText("@" + QUALIFIED_NAME_STRUCTURE_ANNOTATION,context);}  }
class C{  public RoutedRequest(final RequestWrapper req,final HttpRoute route){  super();  this.request=req;  this.route=route;}  }
class C{  public void addColumns(int colsToAdd,T value){  modifyRowsColumns(0,colsToAdd,value);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public double classifyInstance(Instance instance) throws Exception {  double[] dist=distributionForInstance(instance);  if (dist == null) {    throw new Exception("Null distribution predicted");  }switch (instance.classAttribute().type()) {case Attribute.NOMINAL:    double max=0;  int maxIndex=0;for (int i=0; i < dist.length; i++) {  if (dist[i] > max) {    maxIndex=i;    max=dist[i];  }}if (max > 0) {return maxIndex;} else {}case Attribute.NUMERIC:return dist[0];default :return -1;}}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("FssFtsInfo[");  buffer.append("FtsPlatform = ").append(m_ftsPlatform);  buffer.append(", FtsRoot = ").append(m_ftsRoot);  buffer.append("]");  return buffer.toString();}  }
class C{  @Override public final String toString(){  StringBuffer text=new StringBuffer();  text.append(ARFF_ATTRIBUTE).append(" ").append(Utils.quote(m_Name)).append(" ");switch (m_Type) {case NOMINAL:    text.append('{');  Enumeration<Object> enu=enumerateValues();while (enu.hasMoreElements()) {  text.append(Utils.quote((String)enu.nextElement()));  if (enu.hasMoreElements()) {    text.append(',');  }}text.append('}');break;case NUMERIC:text.append(ARFF_ATTRIBUTE_NUMERIC);break;case STRING:text.append(ARFF_ATTRIBUTE_STRING);break;case DATE:text.append(ARFF_ATTRIBUTE_DATE).append(" ").append(Utils.quote(((DateAttributeInfo)m_AttributeInfo).m_DateFormat.toPattern()));break;case RELATIONAL:text.append(ARFF_ATTRIBUTE_RELATIONAL).append("\n");Enumeration<Attribute> enm=((RelationalAttributeInfo)m_AttributeInfo).m_Header.enumerateAttributes();while (enm.hasMoreElements()) {text.append(enm.nextElement()).append("\n");}text.append(ARFF_END_SUBRELATION).append(" ").append(Utils.quote(m_Name));break;default :text.append("UNKNOWN");break;}return text.toString();}  }
class C{  public int trim(){  final int result=bytes.length - start;  if (result > 0)   java.lang.System.arraycopy(bytes,start,bytes,0,result);  start=bytes.length;  stackTop=0;  return result;}  }
class C{  public ConsistencyGroupFilter(String type,boolean allowEmptyType){  this.type=type;  this.allowEmptyType=allowEmptyType;}  }
class C{  public boolean sendBroadcast(Intent intent){synchronized (mReceivers) {    final String action=intent.getAction();    final String type=intent.resolveTypeIfNeeded(mAppContext.getContentResolver());    final Uri data=intent.getData();    final String scheme=intent.getScheme();    final Set<String> categories=intent.getCategories();    final boolean debug=DEBUG || ((intent.getFlags() & Intent.FLAG_DEBUG_LOG_RESOLUTION) != 0);    if (debug)     Log.v(TAG,"Resolving type " + type + " scheme "+ scheme+ " of intent "+ intent);    ArrayList<ReceiverRecord> entries=mActions.get(intent.getAction());    if (entries != null) {      if (debug)       Log.v(TAG,"Action list: " + entries);      ArrayList<ReceiverRecord> receivers=null;      for (int i=0; i < entries.size(); i++) {        ReceiverRecord receiver=entries.get(i);        if (debug)         Log.v(TAG,"Matching against filter " + receiver.filter);        if (receiver.broadcasting) {          if (debug) {            Log.v(TAG,"  Filter's target already added");          }          continue;        }        int match=receiver.filter.match(action,type,scheme,data,categories,"LocalBroadcastManager");        if (match >= 0) {          if (debug)           Log.v(TAG,"  Filter matched!  match=0x" + Integer.toHexString(match));          if (receivers == null) {            receivers=new ArrayList<ReceiverRecord>();          }          receivers.add(receiver);          receiver.broadcasting=true;        } else {          if (debug) {            String reason;switch (match) {case IntentFilter.NO_MATCH_ACTION:              reason="action";            break;case IntentFilter.NO_MATCH_CATEGORY:          reason="category";        break;case IntentFilter.NO_MATCH_DATA:      reason="data";    break;case IntentFilter.NO_MATCH_TYPE:  reason="type";break;default :reason="unknown reason";break;}Log.v(TAG,"  Filter did not match: " + reason);}}}if (receivers != null) {for (int i=0; i < receivers.size(); i++) {receivers.get(i).broadcasting=false;}mPendingBroadcasts.add(new BroadcastRecord(intent,receivers));if (!mHandler.hasMessages(MSG_EXEC_PENDING_BROADCASTS)) {mHandler.sendEmptyMessage(MSG_EXEC_PENDING_BROADCASTS);}return true;}}}return false;}  }
class C{  public void reset(){  super.reset();  if (null != m_iterator)   m_iterator.reset();}  }
class C{  public String[] extraArgumentsArray(){  return this.extraArguments.toArray(new String[this.extraArguments.size()]);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void testImmutableAttributes() throws Exception {  Directory dir=newDirectory();  Codec codec=getCodec();  SegmentInfo segmentInfo=newSegmentInfo(dir,"_123");  FieldInfos.Builder builder=new FieldInfos.Builder();  FieldInfo fi=builder.getOrAdd("field");  fi.setIndexOptions(TextField.TYPE_STORED.indexOptions());  addAttributes(fi);  fi.putAttribute("foo","bar");  fi.putAttribute("bar","baz");  FieldInfos infos=builder.finish();  codec.fieldInfosFormat().write(dir,segmentInfo,"",infos,IOContext.DEFAULT);  FieldInfos infos2=codec.fieldInfosFormat().read(dir,segmentInfo,"",IOContext.DEFAULT);  assertEquals(1,infos2.size());  assertNotNull(infos2.fieldInfo("field"));  Map<String,String> attributes=infos2.fieldInfo("field").attributes();  expectThrows(UnsupportedOperationException.class,null);  dir.close();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:29.031 -0500",hash_original_method="A50DDCD7940C2F2074ECB54366A87953",hash_generated_method="63D089F27944FA9FD551BD7360B3A742") public static ParcelFileDescriptor dup(FileDescriptor orig) throws IOException {  FileDescriptor fd=Parcel.dupFileDescriptor(orig);  return fd != null ? new ParcelFileDescriptor(fd) : null;}  }
class C{  public TextFormat withFont(String name,float size){  return withFont(new Font(name,size));}  }
class C{  private static void test1(int timeout,int count) throws Exception {  String timeoutTag="timeout=" + BadKdc.toReal(timeout);  ByteArrayOutputStream bo=new ByteArrayOutputStream();  PrintStream oldout=System.out;  System.setOut(new PrintStream(bo));  Context c=Context.fromJAAS("client");  System.setOut(oldout);  String[] lines=new String(bo.toByteArray()).split("\n");  System.out.println("----------------- TEST (" + timeout + ","+ count+ ") -----------------");  for (  String line : lines) {    if (line.startsWith(">>> KDCCommunication")) {      System.out.println(line);      if (line.indexOf(timeoutTag) < 0) {        throw new Exception("Wrong timeout value" + timeoutTag);      }      count--;    }  }  if (count != 0) {    throw new Exception("Retry count is " + count + " less");  }}  }
class C{  public RowValueBuilder resetField(){  rowValue.getFieldValue(currentIndex).reset();  return this;}  }
class C{  private void checkSynchronizationState() throws CoreException {  if (!isSynchronized()) {    Status status=new Status(IStatus.ERROR,FileBuffersPlugin.PLUGIN_ID,274,FileBuffersMessages.FileBuffer_error_outOfSync,null);    throw new CoreException(status);  }}  }
class C{  public void sendProfileUpdate(){  new UpdateAttributesProcessor(this).distribute(false);}  }
class C{  public final int readChar() throws IOException {  if (_readEncoding != null) {    int ch=_readEncoding.read();    return ch;  }  if (_readLength <= _readOffset) {    if (!readBuffer())     return -1;  }  return _readBuffer[_readOffset++] & 0xff;}  }
class C{  private static void notifyDeveloperError(String message){  Logger.log(LoggingBehavior.DEVELOPER_ERRORS,"AppEvents",message);}  }
class C{  public ProductTypeIdToEntityConverter(final GenericDAO<ProductType,Long> productTypeLongGenericDAO){  super(productTypeLongGenericDAO);}  }
class C{  public void resumeJobs(GroupMatcher<JobKey> matcher) throws SchedulerException {  sched.resumeJobs(matcher);}  }
class C{  public static Object instantiate(String className) throws ClassNotFoundException, InstantiationException, IllegalAccessException {  return instantiate(classForName(className));}  }
class C{  public static boolean existingEntity(Collection<Entity> entities,int begin,int end){  return entities.stream().anyMatch(null);}  }
class C{  public static void main(String[] argv){  runClassifier(new VotedPerceptron(),argv);}  }
class C{  public Graph search(){  List<Node> variables=independenceTest.getVariables();  Mmmb mmmb=new Mmmb(independenceTest,getDepth(),true);  Map<Node,List<Node>> pc=new HashMap<>();  for (  Node x : variables) {    pc.put(x,mmmb.getPc(x));  }  Graph graph=new EdgeListGraph();  for (  Node x : variables) {    graph.addNode(x);  }  for (  Node x : variables) {    for (    Node y : pc.get(x)) {      if (!graph.isAdjacentTo(x,y)) {        graph.addUndirectedEdge(x,y);      }    }  }  FgsOrienter orienter=new FgsOrienter(data);  orienter.orient(graph);  return graph;}  }
class C{  public Class<? extends Enum<?>> enumType(){  return enumType;}  }
class C{  public X509Extensions generate(){  return new X509Extensions(extOrdering,extensions);}  }
class C{  public List<Vertex> orderedRelations(Vertex relationshipType){  List<Relationship> relationships=orderedRelationships(relationshipType);  if (relationships == null) {    return null;  }  List<Vertex> vertices=new ArrayList<Vertex>(relationships.size());  for (  Relationship relationship : relationships) {    if (relationship.getCorrectness() > 0.0) {      vertices.add(relationship.getTarget());    }  }  return vertices;}  }
class C{  public MultiPixelPackedSampleModel(int dataType,int w,int h,int numberOfBits){  this(dataType,w,h,numberOfBits,(w * numberOfBits + DataBuffer.getDataTypeSize(dataType) - 1) / DataBuffer.getDataTypeSize(dataType),0);  if (dataType != DataBuffer.TYPE_BYTE && dataType != DataBuffer.TYPE_USHORT && dataType != DataBuffer.TYPE_INT) {    throw new IllegalArgumentException("Unsupported data type " + dataType);  }}  }
class C{  @Override public String toString(){  return this;}  }
class C{  protected void internalTransform(Body b,String phaseName,Map options){  SootMethod enclosingMethod=b.getMethod();  StmtBody stmtBody=(StmtBody)b;  Chain units=stmtBody.getUnits();  Iterator stmtIt=units.snapshotIterator();  while (stmtIt.hasNext()) {    Stmt stmt=(Stmt)stmtIt.next();    if (!stmt.containsInvokeExpr()) {      continue;    }    InvokeExpr expr=(InvokeExpr)stmt.getInvokeExpr();    Map<Integer,Value> argMod=new HashMap<Integer,Value>();    for (int i=0; i < expr.getArgCount(); i++) {      Value v=expr.getArg(i);      if (v != null && JSAStrings.v().isHotspotValue(v)) {        boolean debug=expr.getMethodRef().getSubSignature().toString().contains("setType");        if (allStringConstants(v)) {          continue;        }        if (!JSAStrings.v().isConstant(v))         continue;        String jsaRE=JSAStrings.v().getRegex(v);        if (JSAStrings.v().ignoreRE(jsaRE)) {          continue;        }        Local arg=Jimple.v().newLocal(LOCAL_PREFIX + LOCALID++,RefType.v("java.lang.String"));        stmtBody.getLocals().add(arg);        StringConstant sc=StringConstant.v(jsaRE);        trackedStringConstants.add(sc);        AssignStmt assignStmt=Jimple.v().newAssignStmt(arg,sc);        units.insertBefore(assignStmt,stmt);        argMod.put(i,v);        expr.setArg(i,arg);        logger.info("Injecting JSA result: {} {}",enclosingMethod,stmt);      }    }    changesMade.put(expr,argMod);  }}  }
class C{  private void tick(){  if (startedIndexTimeStamp == 0) {    startedIndexTimeStamp=System.currentTimeMillis();  }  long timeElapsedSinceIndexStartMilliseconds=System.currentTimeMillis() - startedIndexTimeStamp;  int maximumIndex=divisorList.length - 1;  int currentDivisor=divisorList[currentIndex];  if (ticksSinceIndexChange % currentDivisor == 0) {    timePicker.zInternalTryChangeTimeByIncrement(changeAmountMinutes);    if ((currentIndex < maximumIndex) && (timeElapsedSinceIndexStartMilliseconds > millisForDivisorList[currentIndex])) {      ticksSinceIndexChange=0;      ++currentIndex;      startedIndexTimeStamp=System.currentTimeMillis();    }  }  ++ticksSinceIndexChange;}  }
class C{  public static PointMeteringParameters createForNormalizedCoordinates(PointF afPoint,PointF aePoint,int sensorOrientation,Settings3A settings3A){  Preconditions.checkArgument(sensorOrientation % 90 == 0,"sensorOrientation must be a " + "multiple of 90");  Preconditions.checkArgument(sensorOrientation >= 0,"sensorOrientation must not be " + "negative");  sensorOrientation%=360;  return new PointMeteringParameters(afPoint,aePoint,sensorOrientation,settings3A);}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();  if (subSignature.equals("java.lang.String intern()")) {    java_lang_String_intern(method,thisVar,returnVar,params);    return;  } else {    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  public void indexMissing() throws IOException {  init();  clusters=Cluster.readClusters(clusterFile);  System.out.println("Creating histograms ...");  LireFeature f=getFeatureInstance();  IndexWriter iw=LuceneUtils.createIndexWriter(((DirectoryReader)reader).directory(),true,LuceneUtils.AnalyzerType.WhitespaceAnalyzer);  for (int i=0; i < reader.maxDoc(); i++) {    Document d=reader.document(i);    if (d.getValues(vladFieldName) == null || d.getValues(vladFieldName).length == 0) {      createVisualWords(d,f);      iw.updateDocument(new Term(DocumentBuilder.FIELD_NAME_IDENTIFIER,d.getValues(DocumentBuilder.FIELD_NAME_IDENTIFIER)[0]),d);    }  }  iw.commit();  iw.close();  System.out.println("Finished.");}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:48:00.289 -0500",hash_original_method="6E45F873D7236EF61D26B672F842F45F",hash_generated_method="8A48D7EBC73346FA52A5B1121B779FE6") public boolean isTaskRoot(){  try {    return ActivityManagerNative.getDefault().getTaskForActivity(mToken,true) >= 0;  } catch (  RemoteException e) {    return false;  }}  }
class C{  public boolean isSelectionEmpty(){  return selectionModel.isEmpty();}  }
class C{  public static void unregisterListener(Context context,PlaybackListener listener){  LocalBroadcastManager.getInstance(context.getApplicationContext()).unregisterReceiver(listener);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Object val=stack.pop();  String name=getString(stack);  ZPseudoComp uiComp=getUIComp(stack);  if (uiComp != null) {    Object[] rvHolder=new Object[2];    uiComp.getCompForVariable(name,val,rvHolder,true);    return (rvHolder[0] != null) ? ((ZPseudoComp)rvHolder[0]) : ((ZPseudoComp)rvHolder[1]);  }  return null;}  }
class C{  public NamePreservingRunnable(Runnable runnable,String newName){  this.runnable=runnable;  this.newName=newName;}  }
class C{  public static char[] cloneCharArray(char[] chars){  if (chars == null) {    return null;  }  int len=chars.length;  if (len == 0) {    return chars;  }  char[] copy=new char[len];  System.arraycopy(chars,0,copy,0,len);  return copy;}  }
class C{  private static void addWildcardToBoundMap(final AnnotatedWildcardType wildcard,final TypeCompound anno,final Map<AnnotatedWildcardType,WildcardBoundAnnos> wildcardToAnnos){  WildcardBoundAnnos boundAnnos=wildcardToAnnos.get(wildcard);  if (boundAnnos == null) {    boundAnnos=new WildcardBoundAnnos(wildcard);    wildcardToAnnos.put(wildcard,boundAnnos);  }  boundAnnos.addAnnotation(anno);}  }
class C{  public MaterialContainer(){  super(Document.get().createElement("main"));}  }
class C{  public static String indent(String text){  return tab + text.replaceAll("\\r?\\n",nltab);}  }
class C{  public TraxSource(final Object source,final XStream xstream){  super(new InputSource());  setSource(source);  setXStream(xstream);}  }
class C{  public boolean isEnableCap(){  return enableCap;}  }
class C{  public static <T>Set<T> asImmutable(Set<T> self){  return Collections.unmodifiableSet(self);}  }
class C{  public static Column fromOrd(int i){  if ((i < 0) || (i >= Column.values().length)) {    throw new IndexOutOfBoundsException("Invalid ordinal");  }  return Column.values()[i];}  }
class C{  public CharSequenceReader(CharSequence input){  this._input=input;}  }
class C{  public JSONObject(){  this.map=new LinkedHashMap<String,Object>();}  }
class C{  static private char[] skipWhitespaces(char[] data){  data=skipWhitespacesPrefix(data);  data=skipWhitespacesSuffix(data);  return data;}  }
class C{  private boolean _update(final Identification id) throws IOException, ServletException {  if (singelton != null)   singelton.reset();  final File newLucee=downloadCore(id);  if (newLucee == null)   return false;  final Version v=null;  try {    bundleCollection=BundleLoader.loadBundles(this,getFelixCacheDirectory(),getBundleDirectory(),newLucee,bundleCollection);    final CFMLEngine e=getEngine(bundleCollection);    if (e == null)     throw new IOException("can't load engine");    version=e.getInfo().getVersion();    setEngine(e);    callListeners(e);  } catch (  final Exception e) {    System.gc();    try {      newLucee.delete();    } catch (    final Exception ee) {    }    log(e);    e.printStackTrace();    return false;  }  log(Logger.LOG_DEBUG,"Version (" + v + ")installed");  return true;}  }
class C{  protected static void loadCoverage(){  if (!new File(Properties.COVERAGE_MATRIX_FILENAME).exists()) {    return;  }  BufferedReader br=null;  try {    String sCurrentLine;    br=new BufferedReader(new FileReader(Properties.COVERAGE_MATRIX_FILENAME));    String[] split;    while ((sCurrentLine=br.readLine()) != null) {      split=sCurrentLine.split(" ");      List<Integer> test=new ArrayList<Integer>();      for (int i=0; i < split.length - 1; i++) {        if (split[i].compareTo("1") == 0) {          test.add(goals.get(i).getLine());        }      }      matrix.add(test);      number_of_ones+=test.size();      number_of_test_cases++;    }    rho=((double)number_of_ones) / ((double)number_of_test_cases) / ((double)goals.size());    LoggingUtils.getEvoLogger().info("RhoScore of an existing test suite: " + rho);    ClientServices.getInstance().getClientNode().trackOutputVariable(RuntimeVariable.RhoScore_T0,rho);    ClientServices.getInstance().getClientNode().trackOutputVariable(RuntimeVariable.Size_T0,number_of_test_cases);    rho=Math.abs(0.5 - rho);    LoggingUtils.getEvoLogger().info("(RhoScore - 0.5) of an existing test suite: " + rho);  } catch (  IOException e) {    e.printStackTrace();  } finally {    try {      if (br != null)       br.close();    } catch (    IOException ex) {      ex.printStackTrace();    }  }}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:07.650 -0500",hash_original_method="632CCE7E9EF22DEC0E7940476F7FAE4E",hash_generated_method="45ABB2D1295E8204EDBF60645FF46CE5") void destroy(){synchronized (mEventHub) {    mEventHub.mDestroying=true;    mEventHub.sendMessage(Message.obtain(null,EventHub.DESTROY));    mEventHub.blockMessages();  }}  }
class C{  public void orBloomFilter(BloomFilter<E> filter){  assert bitSetSize == filter.size() : "Different size bitsets in orBloomFIlter: " + bitSetSize + " and "+ filter.size();  this.bitset.or(filter.getBitSet());  this.numberOfAddedElements+=filter.count();}  }
class C{  public void scrollOnce(){  PagerAdapter adapter=getAdapter();  int currentItem=getCurrentItem();  int totalCount;  if (adapter == null || (totalCount=adapter.getCount()) <= 1) {    return;  }  int nextItem=++currentItem;  if (nextItem < 0) {    setCurrentItem(totalCount - 1);  } else   if (nextItem == totalCount) {    setCurrentItem(0);  } else {    setCurrentItem(nextItem);  }}  }
class C{  public static File data(){  return get().systemPaths().data();}  }
class C{  public String toString(){  StringBuffer buf=new StringBuffer();  if (_isBoot || (_dataChars[0] == SprogMessage.STX)) {    for (int i=0; i < _nDataChars; i++) {      buf.append("<");      buf.append(_dataChars[i]);      buf.append(">");    }  } else {    for (int i=0; i < _nDataChars; i++) {      buf.append((char)_dataChars[i]);    }  }  return buf.toString();}  }
class C{  public PostConstructCustomScopeEvent(FacesContext facesContext,ScopeContext scopeContext){  super(facesContext,scopeContext);}  }
class C{  public void testStandardFilter() throws Exception {  Reader reader=new StringReader("What's this thing do?");  Tokenizer tokenizer=tokenizerFactory("Classic").create(newAttributeFactory());  tokenizer.setReader(reader);  TokenStream stream=tokenFilterFactory("Classic").create(tokenizer);  assertTokenStreamContents(stream,new String[]{"What","this","thing","do"});}  }
class C{  public static String validateCreditCardExp(int mm,int yy){  if (mm < 1 || mm > 12)   return "CreditCardExpMonth";  Calendar cal=Calendar.getInstance();  int year=cal.get(Calendar.YEAR) - 2000;  int month=cal.get(Calendar.MONTH) + 1;  if (yy < year)   return "CreditCardExpired"; else   if (yy == year && mm < month)   return "CreditCardExpired";  return "";}  }
class C{  public static String[] decodeValue(String a){  return a.split("\\+");}  }
class C{  @Override public boolean supportsCatalogsInProcedureCalls(){  debugCodeCall("supportsCatalogsInProcedureCalls");  return false;}  }
class C{  public static Date evenHourDateAfterNow(){  return evenHourDate(null);}  }
class C{  public void scale(double value){  Transform3D other=new Transform3D();  other.setScale(value);  transform(other);}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writePaint(this.defaultPaint,stream);}  }
class C{  public boolean isExpandEmptyElements(){  return expandEmptyElements;}  }
class C{  private static void doTestRangeScan(int fullBlocks,int partialBlocks,boolean invertLoopIndexes){  int value;  int value2;  int count=0;  for (int i=0; i <= 100; i++) {    for (int j=0; j <= 100; j++) {      if (invertLoopIndexes) {        value=j;        value2=i;      } else {        value=i;        value2=j;      }      String[] split=callCalculateSuffix(value,value2,fullBlocks,partialBlocks);      for (      String suffix : split) {        String[] values=suffix.split("\\+");        if (values.length > 1) {          value=Integer.parseInt(values[0]);          value2=Integer.parseInt(values[1]);          if (value > 5 || value2 > 5) {            count++;            StringBuilder msg=new StringBuilder();            msg.append("Found incorrect value ");            msg.append(suffix);            msg.append(". value = ");            msg.append(invertLoopIndexes ? j : i);            msg.append(" value2 = ");            msg.append(invertLoopIndexes ? i : j);            msg.append(" fullBlocks = ");            msg.append(fullBlocks);            msg.append(" partialBlocks = ");            msg.append(partialBlocks);          }        }      }    }  }  if (count > 0) {    fail("Incorrect values were founded " + count + " times");  }}  }
class C{  public Object fromNative(Object nativeValue,FromNativeContext context){  Object o=super.fromNative(nativeValue,context);  if (INVALID_HANDLE_VALUE.equals(o))   return INVALID_HANDLE_VALUE;  return o;}  }
class C{  public void end(String namespace,String name) throws Exception {  RenderKitBean top=null;  try {    top=(RenderKitBean)digester.pop();  } catch (  Exception e) {    throw new IllegalStateException("Popped object is not a " + CLASS_NAME + " instance");  }  FacesConfigBean fcb=(FacesConfigBean)digester.peek();  RenderKitBean old=fcb.getRenderKit(top.getRenderKitId());  if (old == null) {    if (digester.getLogger().isDebugEnabled()) {      digester.getLogger().debug("[RenderKitRule]{" + digester.getMatch() + "} New("+ top.getRenderKitId()+ ")");    }    fcb.addRenderKit(top);  } else {    if (digester.getLogger().isDebugEnabled()) {      digester.getLogger().debug("[RenderKitRule]{" + digester.getMatch() + "} Merge("+ top.getRenderKitId()+ ")");    }    mergeRenderKit(top,old);  }}  }
class C{  public void showEmptyView(){  if (mEmptyView == null) {    mEmptyView=(TextView)mEmptyViewStub.inflate();    if (mListener != null) {      mEmptyView.setOnClickListener(mListener);    }    if (!TextUtils.isEmpty(mText)) {      mEmptyView.setText(mText);    }  }  mRootView.setVisibility(View.VISIBLE);  mEmptyView.setVisibility(View.VISIBLE);  if (mLoadingView != null) {    mLoadingView.setVisibility(View.GONE);  }}  }
class C{  public void inject(ActionCreator ac){  ac.setDispatcher(getDispatcher());}  }
class C{  public InlineQueryResultVoice.InlineQueryResultVoiceBuilder inputMessageContent(InputMessageContent inputMessageContent){  this.input_message_content=inputMessageContent;  return this;}  }
class C{  public boolean hasRel(){  return super.hasAttribute(REL);}  }
class C{  public IntBuffer duplicate(){  IntBuffer buf=new IntBuffer(byteBuffer.duplicate());  buf.limit=limit;  buf.position=position;  buf.mark=mark;  return buf;}  }
class C{  public void displayInfoLine(String infoLine){  displayInfoLine(infoLine,MAP_OBJECT_INFO_LINE);}  }
class C{  public void onTick(){  if (entity.isBurning()) {    lightLevel=15;  } else {    lightLevel=0;  }  if (!enabled && lightLevel > 0) {    enableLight();  } else   if (enabled && lightLevel < 1) {    disableLight();  }}  }
class C{  private RtpPacket buildRtpPacket(Buffer buffer){  byte data[]=(byte[])buffer.getData();  if (data == null) {    return null;  }  Packet packet=new Packet();  packet.mData=data;  packet.mOffset=0;  packet.mLength=buffer.getLength();  RtpPacket rtppacket=new RtpPacket(packet);  if (buffer.isRTPMarkerSet()) {    rtppacket.marker=1;  } else {    rtppacket.marker=0;  }  rtppacket.payloadType=buffer.getFormat().getPayload();  rtppacket.seqnum=seqNumber++;  rtppacket.timestamp=buffer.getTimestamp();  rtppacket.ssrc=rtcpSession.SSRC;  rtppacket.payloadoffset=buffer.getOffset();  rtppacket.payloadlength=buffer.getLength();  if (buffer.getVideoOrientation() != null) {    rtppacket.extension=true;    rtppacket.extensionHeader=new RtpExtensionHeader();    rtppacket.extensionHeader.addElement(buffer.getVideoOrientation().getHeaderId(),new byte[]{buffer.getVideoOrientation().getVideoOrientation()});  }  return rtppacket;}  }
class C{  public static String timeUntil(final int seconds){  return timeUntil(seconds,false);}  }
class C{  public void endPutAllSend(long startTime,boolean failed){  long duration=getStatTime() - startTime;  endClientOpSend(duration,failed);  this.sendStats.incInt(putAllSendInProgressId,-1);  int endPutAllSendId;  if (failed) {    endPutAllSendId=putAllSendFailedId;  } else {    endPutAllSendId=putAllSendId;  }  this.sendStats.incInt(endPutAllSendId,1);  this.stats.incLong(putAllSendDurationId,duration);}  }
class C{  public IndividualUnitPanel(final Collection<Unit> units,final String title,final GameData data,final IUIContext uiContext,final int max,final boolean showMinAndMax,final boolean showSelectAll,final ScrollableTextFieldListener optionalListener){  m_data=data;  m_uiContext=uiContext;  m_title=new JTextArea(title);  m_title.setBackground(this.getBackground());  m_title.setEditable(false);  m_title.setWrapStyleWord(true);  m_countOptionalTextFieldListener=optionalListener;  setMaxAndShowMaxButton(max);  m_showSelectAll=showSelectAll;  for (  final Unit u : units) {    m_entries.add(new SingleUnitPanel(u,m_data,m_uiContext,m_textFieldListener,m_max,0,showMinAndMax));  }  layoutEntries();}  }
class C{  @LmlAction("play") public void playSound(){  musicService.play(sound);}  }
class C{  public boolean isFileicon(){  return mFileIcon;}  }
class C{  public static void deivcePermissionModify(Context context,String accessToken,String identifier,int permissionId,int privilege,AsyncHttpResponseHandler responseHandler){  List<Header> headerList=new ArrayList<Header>();  headerList.add(new BasicHeader(ApiKey.HeadKey.ACCESS_TOKEN,accessToken));  try {    String jsonParams=new JSONStringer().object().key(ApiKey.PRIVILEGE).value(privilege).endObject().toString();    if (DEBUG) {      LogUtils.d(jsonParams);    }    put(context,String.format(getApiServerUrl() + DEVICE_PERMISSION_MODIFY,identifier,permissionId),headerList,jsonParams,responseHandler);  } catch (  JSONException e) {    e.printStackTrace();    responseHandler.onFailure(INNER_ERROR_CODE,null,null,e);  }catch (  UnsupportedEncodingException e) {    e.printStackTrace();    responseHandler.onFailure(INNER_ERROR_CODE,null,null,e);  }}  }
class C{  private static void sumAgg(double[] a,double[] c,int ai,int ci,final int len,KahanObject kbuff,KahanPlus kplus){  sumAggWithFn(a,c,ai,ci,len,kbuff,kplus);}  }
class C{  public void testIndexAnalysis(){  assertQ("Index analysis: ",req("fl","id","q","content2:aab","sort","id asc"),"//*[@numFound='1']","//result/doc[1]/int[@name='id'][.=3]");  assertQ("Index analysis: ",req("fl","id","q","content2:aabaa","sort","id asc"),"//*[@numFound='1']","//result/doc[1]/int[@name='id'][.=4]");}  }
class C{  @Override public boolean hasPassiveShield(int location,boolean rear){switch (location) {case Mech.LOC_CT:case Mech.LOC_HEAD:case Mech.LOC_LLEG:case Mech.LOC_RLEG:    return false;case Mech.LOC_LARM:case Mech.LOC_LT:  if (rear) {    return false;  }return hasPassiveShield(Mech.LOC_LARM);default :if (rear) {return false;}return hasPassiveShield(Mech.LOC_RARM);}}  }
class C{  public static Coordinate ptNotInList(Coordinate[] testPts,Coordinate[] pts){  for (int i=0; i < testPts.length; i++) {    Coordinate testPt=testPts[i];    if (!isInList(testPt,pts))     return testPt;  }  return null;}  }
class C{  public ContentManagerImpl(@NotNull ContentUI contentUI,boolean canCloseContents,@NotNull Project project){  myProject=project;  myCanCloseContents=canCloseContents;  myUI=contentUI;  myUI.setManager(this);  Disposer.register(project,this);  Disposer.register(this,contentUI);}  }
class C{  public static void main(String[] args) throws Exception {  int res=ToolRunner.run(new IterateBfs(),args);  System.exit(res);}  }
class C{  public void testSelectManyNoValue() throws Exception {  HtmlPage page=getPage("/faces/jsp/selectManyNoValue.jsp");  List list=getAllElementsOfGivenClass(page,null,HtmlSubmitInput.class);  HtmlSubmitInput button=(HtmlSubmitInput)list.get(0);  page=(HtmlPage)button.click();  assertTrue(-1 != page.asText().indexOf("equired"));}  }
class C{  public void printExpr(JCTree tree,int prec) throws IOException {  int prevPrec=this.prec;  try {    this.prec=prec;    if (tree == null)     print("/*missing*/"); else {      tree.accept(this);    }  } catch (  UncheckedIOException ex) {    IOException e=new IOException(ex.getMessage());    e.initCause(ex);    throw e;  } finally {    this.prec=prevPrec;  }}  }
class C{  public static Scope splitScope(Scope scope){  Scope result=new Scope(scope.getType());  result.symbolTable=scope.symbolTable;  scope.symbolTable=null;  result.parent=scope.parent;  result.setParentScope(scope.getParentScope());  result.setParentScope(result);  scope.parent=result;  result.top=scope.top;  return result;}  }
class C{  @Override public synchronized Object remove(Object key){  Object result=super.remove(key);  if (result != null) {    firePvChanged(new PvChangeEvent(this,key,null,PvChangeEvent.PV_DELETED));  }  if (result != null && result instanceof ProcessVar) {    ((ProcessVar)result).removePvChangeListener(this);  }  return (result);}  }
class C{  static void showMessageDialog(String message,String title){  showMessageDialog(message,title,JOptionPane.INFORMATION_MESSAGE);}  }
class C{  public static Bitmap maskBitmap(Bitmap src,int drawableResId){  Bitmap mask=BitmapFactory.decodeResource(_resources,drawableResId);  return maskBitmap(src,mask,null,null,null,null);}  }
class C{  public static int pxToDp(Context context,int px){  DisplayMetrics displayMetrics=context.getResources().getDisplayMetrics();  int dp=Math.round(px / (displayMetrics.xdpi / DisplayMetrics.DENSITY_DEFAULT));  return dp;}  }
class C{  public void addPolylineRecord2(EsriLayer layer){  OMGraphicList shapeData=new EsriPolylineList();  double[] part0=new double[]{12.0f,-175.0f,-30.0f,85.0f,25.0f,15.0f};  EsriPolyline poly0=new EsriPolyline(part0,OMGraphic.DECIMAL_DEGREES,OMGraphic.LINETYPE_RHUMB);  shapeData.add(poly0);  ArrayList tabularData=new ArrayList();  tabularData.add(0,"second value");  tabularData.add(1,new Double(30.215));  layer.addRecord(shapeData,tabularData);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:17.699 -0400",hash_original_method="E9955A41F5CD18488E47A96E9C7926C7",hash_generated_method="CACC204822DEFCDB40E799536686DC22") final void forgetContents(){  UNSAFE.putObject(this,itemOffset,this);  UNSAFE.putObject(this,waiterOffset,null);}  }
class C{  static private boolean isMinus(final IGroupNode<?> op){  if (op instanceof IJoinNode) {    final IJoinNode g=(IJoinNode)op;    if (g.isMinus())     return true;  }  return false;}  }
class C{  public static int hash(int aSeed,int aInt){  return firstTerm(aSeed) + aInt;}  }
class C{  private Object readResolve(){  return forName(name);}  }
class C{  public ModelBuilder add(IRI predicate,Object object){  if (currentSubject == null) {    throw new ModelException("subject not set");  }  return add(currentSubject,predicate,object);}  }
class C{  public Intent execute(Context context){  String[] titles=new String[]{"Air temperature"};  List<double[]> x=new ArrayList<double[]>();  x.add(new double[]{1,2,3,4,5,6,7,8,9,10,11,12});  List<double[]> values=new ArrayList<double[]>();  values.add(new double[]{12.3,12.5,13.8,16.8,20.4,24.4,26.4,26.1,23.6,20.3,17.2,13.9});  int[] colors=new int[]{Color.BLUE,Color.YELLOW};  PointStyle[] styles=new PointStyle[]{PointStyle.POINT,PointStyle.POINT};  XYMultipleSeriesRenderer renderer=new XYMultipleSeriesRenderer(2);  setRenderer(renderer,colors,styles);  int length=renderer.getSeriesRendererCount();  for (int i=0; i < length; i++) {    XYSeriesRenderer r=(XYSeriesRenderer)renderer.getSeriesRendererAt(i);    r.setLineWidth(3f);  }  setChartSettings(renderer,"Average temperature","Month","Temperature",0.5,12.5,0,32,Color.LTGRAY,Color.LTGRAY);  renderer.setXLabels(12);  renderer.setYLabels(10);  renderer.setShowGrid(true);  renderer.setXLabelsAlign(Align.RIGHT);  renderer.setYLabelsAlign(Align.RIGHT);  renderer.setZoomButtonsVisible(true);  renderer.setPanLimits(new double[]{-10,20,-10,40});  renderer.setZoomLimits(new double[]{-10,20,-10,40});  renderer.setZoomRate(1.05f);  renderer.setLabelsColor(Color.WHITE);  renderer.setXLabelsColor(Color.GREEN);  renderer.setYLabelsColor(0,colors[0]);  renderer.setYLabelsColor(1,colors[1]);  renderer.setYTitle("Hours",1);  renderer.setYAxisAlign(Align.RIGHT,1);  renderer.setYLabelsAlign(Align.LEFT,1);  renderer.setGridColor(colors[0],0);  renderer.setGridColor(colors[1],1);  XYMultipleSeriesDataset dataset=buildDataset(titles,x,values);  x.clear();  x.add(new double[]{-1,0,3,4,5,6,7,8,9,10,11,12});  values.clear();  values.add(new double[]{4.3,4.9,5.9,8.8,10.8,11.9,13.6,12.8,11.4,9.5,7.5,5.5});  addXYSeries(dataset,new String[]{"Sunshine hours"},x,values,1);  Intent intent=ChartFactory.getCubicLineChartIntent(context,dataset,renderer,0.3f,"Average temperature");  return intent;}  }
class C{  public AttributeDefinitionBuilder notActual(){  getterBuilder.isOverride(false);  setterBuilder.isOverride(false);  return this;}  }
class C{  public static void addTask(final Runnable whenDone){  SetQueue.IMP.addEmptyTask(whenDone);}  }
class C{  public boolean canDraw(Gas gas){  if (stored == null || (gas != null && gas != stored.getGas())) {    return false;  }  return true;}  }
class C{  @ObjectiveCName("onPushReceivedWithSeq:withAuthId:") public void onPushReceived(int seq,long authId){  if (modules.getUpdatesModule() != null) {    modules.getUpdatesModule().onPushReceived(seq,authId);  }}  }
class C{  private static int CallNonvirtualIntMethodA(JNIEnvironment env,int objJREF,int classJREF,int methodID,Address argAddress) throws Exception {  if (traceJNI)   VM.sysWrite("JNI called: CallNonvirtualIntMethodA  \n");  Object returnObj=JNIGenericHelpers.callMethodJValuePtr(env,objJREF,methodID,argAddress,TypeReference.Int,true);  return Reflection.unwrapInt(returnObj);}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public void writeTo(String title,String fileName) throws IOException {  File file=new File(fileName);  file.getParentFile().mkdirs();  PrintWriter writer=new PrintWriter(new FileOutputStream(file));  writer.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 " + "Strict//EN\" " + "\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n");  writer.write("<html xmlns=\"http://www.w3.org/1999/xhtml\" " + "lang=\"en\" xml:lang=\"en\">\n");  writer.write("<head><meta http-equiv=\"Content-Type\" " + "content=\"text/html;charset=utf-8\" /><title>\n");  writer.print(title);  writer.print("</title><link rel=\"stylesheet\" " + "type=\"text/css\" href=\"stylesheet.css\" />\n");  writer.print("</head><body style=\"margin: 20px;\">\n");  writer.print("<h1>" + title + "</h1><br />\n");  writer.print(output);  writer.write("\n</body></html>");  writer.close();}  }
class C{  public QueryStringDecoderUtil(URI uri,Charset charset){  this(uri,charset,DEFAULT_MAX_PARAMS);}  }
class C{  public static float turbulence3(float x,float y,float z,float octaves){  float t=0.0f;  for (float f=1.0f; f <= octaves; f*=2)   t+=Math.abs(noise3(f * x,f * y,f * z)) / f;  return t;}  }
class C{  private void initialiseViews(View contentView,Bundle savedInstanceState){  mClaimList=(RecyclerView)contentView.findViewById(R.id.list_claims);  mClaimsAdapter=new ClaimsAdapter(getActivity());  mClaimList.setAdapter(mClaimsAdapter);  mClaimList.setHasFixedSize(true);  mClaimList.setLayoutManager(new LinearLayoutManager(getActivity(),LinearLayoutManager.VERTICAL,false));  mToolbar=(Toolbar)contentView.findViewById(R.id.my_awesome_toolbar);  setToolbar(mToolbar);  mEmptyView=contentView.findViewById(R.id.empty_view);  TextView emptyViewText;  emptyViewText=(TextView)mEmptyView.findViewById(R.id.empty_view_text);  emptyViewText.setText(getString(R.string.no_new_claims));}  }
class C{  private void addTable(DatasetGenerator datasetGenerator,Locker locker){  panel=new AllStatsTableMulti(datasetGenerator,locker);  mainPanel().add(BorderLayout.CENTER,panel);}  }
class C{  public DoubleMatrix1D like(int size){  return new SparseDoubleMatrix1D(size);}  }
class C{  private void validateBlockSnapshotsForExportGroupUpdate(ExportUpdateParam param,ExportGroup exportGroup){  if (param != null && exportGroup != null) {    List<URI> blockObjToAdd=new ArrayList<URI>();    List<URI> blockObjExisting=new ArrayList<URI>();    List<URI> blockObjURIs=new ArrayList<URI>();    List<VolumeParam> addVolumeParams=param.getVolumes().getAdd();    if (addVolumeParams != null && !addVolumeParams.isEmpty()) {      for (      VolumeParam volParam : addVolumeParams) {        blockObjToAdd.add(volParam.getId());        blockObjURIs.add(volParam.getId());      }      validateVPLEXBlockSnapshotsForExport(blockObjURIs);      if (exportGroup.getVolumes() != null) {        for (        Map.Entry<String,String> entry : exportGroup.getVolumes().entrySet()) {          URI uri=URI.create(entry.getKey());          blockObjURIs.add(uri);          blockObjExisting.add(uri);        }      }      validateDuplicateRPBlockSnapshotsForExport(blockObjURIs);    }    validateSnapshotTargetNotExported(blockObjToAdd,blockObjExisting);  }}  }
class C{  public static void reset(){  timeoutAt.remove();}  }
class C{  public boolean containsFloat(float value){  boolean isNan=Float.isNaN(value);  for (int i=1; i < maxPoolSize; i++) {    if (types[i] == FLOAT) {      float f=readFloat(i);      if (f == value || (isNan && Float.isNaN(f)))       return true;    }  }  return false;}  }
class C{  public boolean isDirty(String key){  return dirtyKeys.contains(key);}  }
class C{  private void ensureDataset(Bigquery bigquery,String projectId,String datasetId) throws IOException {  try {    bigquery.datasets().insert(projectId,new Dataset().setDatasetReference(new DatasetReference().setProjectId(projectId).setDatasetId(datasetId))).execute();  } catch (  IOException e) {    if (!BigqueryJobFailureException.create(e).getReason().equals("duplicate")) {      throw e;    }  }}  }
class C{  private static int labelEnd(String s){  int colonIndex=s.indexOf(":");  int semicolonIndex=s.indexOf(";");  if ((semicolonIndex == -1) || (colonIndex < semicolonIndex)) {    return colonIndex;  } else {    return -1;  }}  }
class C{  public BitString(final int length){  if (length < 0) {    throw new IllegalArgumentException("Length must be non-negative.");  }  this.length=length;  this.data=new int[(length + WORD_LENGTH - 1) / WORD_LENGTH];}  }
class C{  public static <T>T checkNotNull(T reference,@Nullable Object errorMessage){  if (reference == null) {    throw new NullPointerException(String.valueOf(errorMessage));  }  return reference;}  }
class C{  protected <T extends DataObject>List<NamedElementQueryResultList.NamedElement> filterTenantResourcesByTenant(URI tenantId,Class<T> clazz,String nameField,String linkField){  List<NamedElementQueryResultList.NamedElement> elements;  URI localTenantId=tenantId;  if (NullColumnValueGetter.isNullURI(localTenantId) || AbstractDiscoveredTenantResource.NO_TENANT_SELECTOR.equalsIgnoreCase(localTenantId.toString())) {    elements=listDataObjects(clazz,nameField);    return elements;  }  if (AbstractDiscoveredTenantResource.TENANT_SELECTOR_FOR_UNASSIGNED.equalsIgnoreCase(localTenantId.toString())) {    localTenantId=NullColumnValueGetter.getNullURI();  }  elements=listChildren(localTenantId,clazz,nameField,linkField);  return elements;}  }
class C{  @Override public boolean accept(File pathname){  return pathname.getName().endsWith(".class");}  }
class C{  @Override protected T doSwitch(int classifierID,EObject theEObject){switch (classifierID) {case BasePackage.NAMED_ELEMENT:{      NamedElement namedElement=(NamedElement)theEObject;      T result=caseNamedElement(namedElement);      if (result == null)       result=defaultCase(theEObject);      return result;    }case BasePackage.DOCUMENTED_ELEMENT:{    DocumentedElement documentedElement=(DocumentedElement)theEObject;    T result=caseDocumentedElement(documentedElement);    if (result == null)     result=defaultCase(theEObject);    return result;  }case BasePackage.DOMAIN_ELEMENT:{  DomainElement domainElement=(DomainElement)theEObject;  T result=caseDomainElement(domainElement);  if (result == null)   result=defaultCase(theEObject);  return result;}default :return defaultCase(theEObject);}}  }
class C{  protected String parseLastUpdate(String lastUpdateString){  String[] splitKeyword=lastUpdateString.split("=");  if (splitKeyword.length != 2)   return null;  String dateString=splitKeyword[1];  if (dateString == null || dateString.length() == 0)   return null;  try {    SimpleDateFormat dateFormat=new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ");    dateString=dateString.replaceAll("Z","-0000");    return Long.toString(dateFormat.parse(dateString).getTime());  } catch (  ParseException e) {    String message=Logging.getMessage("WMS.LastUpdateFormatUnrecognized",dateString);    Logging.logger().info(message);    return null;  }}  }
class C{  public void deleteClusterFile(){  deleteMinimesosFile();}  }
class C{  protected boolean isCachingAllowed(){  return false;}  }
class C{  private URI expandEndpointURI(URI endpoint,String siteId){  if (getSiteId().equals(siteId)) {    return getInetAddessLookupMap().expandURI(endpoint);  }  return endpoint;}  }
class C{  public boolean isSecure(){  Object oo=get_Value(COLUMNNAME_IsSecure);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static PlayerInteractEvent callPlayerInteractEvent(net.minecraft.entity.player.EntityPlayer who,Action action,net.minecraft.item.ItemStack itemstack){  if (action != Action.LEFT_CLICK_AIR && action != Action.RIGHT_CLICK_AIR) {    throw new IllegalArgumentException();  }  return callPlayerInteractEvent(who,action,0,256,0,0,itemstack);}  }
class C{  private JsonApiObject parseFromJSONObject(JSONObject jsonObject) throws Exception {  JsonApiObject jsonApiObject=new JsonApiObject();  try {    JSONArray includedArray=jsonObject.getJSONArray("included");    jsonApiObject.setIncluded(Factory.newObjectFromJSONArray(includedArray,null));  } catch (  JSONException e) {    Logger.debug("JSON does not contain included");  }  JSONArray dataArray=null;  try {    dataArray=jsonObject.getJSONArray("data");    jsonApiObject.setResources(Factory.newObjectFromJSONArray(dataArray,jsonApiObject.getIncluded()));  } catch (  JSONException e) {    Logger.debug("JSON does not contain data array");  }  JSONObject dataObject=null;  try {    dataObject=jsonObject.getJSONObject("data");    jsonApiObject.setResource(Factory.newObjectFromJSONObject(dataObject,jsonApiObject.getIncluded()));  } catch (  JSONException e) {    Logger.debug("JSON does not contain data object");  }  JSONObject linkObject=null;  try {    linkObject=jsonObject.getJSONObject("links");    jsonApiObject.setLinks(mapper.mapLinks(linkObject));  } catch (  JSONException e) {    Logger.debug("JSON does not contain links object");  }  JSONObject metaObject=null;  try {    metaObject=jsonObject.getJSONObject("meta");    jsonApiObject.setMeta(mapper.getAttributeMapper().createMapFromJSONObject(metaObject));  } catch (  JSONException e) {    Logger.debug("JSON does not contain meta object");  }  JSONArray errorArray=null;  try {    errorArray=jsonObject.getJSONArray("errors");    jsonApiObject.setErrors(mapper.mapErrors(errorArray));  } catch (  JSONException e) {    Logger.debug("JSON does not contain errors object");  }  return jsonApiObject;}  }
class C{  public RegisterServerResponse RegisterServer(RegisterServerRequest req) throws ServiceFaultException, ServiceResultException {  return (RegisterServerResponse)channel.serviceRequest(req);}  }
class C{  public Entry(float val,int xIndex,Object data){  this(val,xIndex);  this.mData=data;}  }
class C{  public Image loadImage(final String resourceName){  try {    final URL url=getClass().getResource(resourceName);    if (url != null) {      final ImageProducer ip=(ImageProducer)url.getContent();      if (ip != null) {        return Toolkit.getDefaultToolkit().createImage(ip);      }    }  } catch (  final Exception ignored) {  }  return null;}  }
class C{  protected View createView(MetaClass meta){  @SuppressWarnings("unchecked") View view=new View(meta.getJavaClass(),false);  for (  MetaProperty metaProperty : meta.getProperties()) {    if (!managedFields.containsKey(metaProperty.getName()) && !managedEmbeddedProperties.contains(metaProperty.getName())) {      continue;    }switch (metaProperty.getType()) {case DATATYPE:case ENUM:      view.addProperty(metaProperty.getName());    break;case ASSOCIATION:case COMPOSITION:  View propView;if (!metadataTools.isEmbedded(metaProperty)) {  propView=viewRepository.getView(metaProperty.getRange().asClass(),View.MINIMAL);  view.addProperty(metaProperty.getName(),propView,true);} else {  propView=createEmbeddedView(metaProperty.getRange().asClass(),metaProperty.getName());  view.addProperty(metaProperty.getName(),propView,false);}break;default :throw new IllegalStateException("unknown property type");}}return view;}  }
class C{  public CloseableAnimatedBitmap(List<Bitmap> bitmaps,List<Integer> durations,ResourceReleaser<Bitmap> resourceReleaser){  Preconditions.checkNotNull(bitmaps);  Preconditions.checkState(bitmaps.size() >= 1,"Need at least 1 frame!");  mBitmaps=new ArrayList<>();  mBitmapReferences=new ArrayList<>();  for (  Bitmap bitmap : bitmaps) {    mBitmapReferences.add(CloseableReference.of(bitmap,resourceReleaser));    mBitmaps.add(bitmap);  }  mDurations=Preconditions.checkNotNull(durations);  Preconditions.checkState(mDurations.size() == mBitmaps.size(),"Arrays length mismatch!");}  }
class C{  public static Word readAvailableBitsWord(Object o){  return Magic.getWordAtOffset(o,STATUS_OFFSET);}  }
class C{  public static void saveConfigurationContents(String contents,File file) throws IOException {  if (file.getParentFile().mkdirs() || file.getParentFile().canWrite()) {    IOUtil.writeString(contents,file);  }}  }
class C{  public StringToIntTable(int blocksize){  m_blocksize=blocksize;  m_mapSize=blocksize;  m_map=new String[blocksize];  m_values=new int[m_blocksize];}  }
class C{  void onJoinStart(){  ArrayList<UpdatePod> updatePods=new ArrayList<>();  updateClusterRoot();  updatePods.addAll(_podUpdateMap.values());  for (  UpdatePod updatePod : updatePods) {    updatePod(updatePod);  }}  }
class C{  public void updateMap(LinkProperties props){  Proj projection=(Proj)getProjection();  Point2D center=projection.getCenter();  float latitude=PropUtils.floatFromProperties(props,LPC_CENTER_LAT,(float)center.getY());  float longitude=PropUtils.floatFromProperties(props,LPC_CENTER_LONG,(float)center.getX());  float scale=PropUtils.floatFromProperties(props,LPC_SCALE,projection.getScale());  int width=PropUtils.intFromProperties(props,LPC_WIDTH,projection.getWidth());  int height=PropUtils.intFromProperties(props,LPC_HEIGHT,projection.getHeight());  String projType=props.getProperty(LPC_PROJECTION);  float latmin=PropUtils.floatFromProperties(props,LPC_LATMIN,-1000.f);  float latmax=PropUtils.floatFromProperties(props,LPC_LATMAX,-1000.f);  float lonmin=PropUtils.floatFromProperties(props,LPC_LONMIN,-1000.f);  float lonmax=PropUtils.floatFromProperties(props,LPC_LONMAX,-1000.f);  if (latmin >= -90.f && latmax <= 90.f && lonmin >= -180.f && lonmax <= 180.f && latmin <= latmax && lonmin <= lonmax) {    double dist=0.5f * GreatCircle.sphericalDistance(ProjMath.degToRad(latmax),ProjMath.degToRad(lonmin),ProjMath.degToRad(latmin),ProjMath.degToRad(lonmax));    double azimuth=GreatCircle.sphericalAzimuth(ProjMath.degToRad(latmax),ProjMath.degToRad(lonmin),ProjMath.degToRad(latmin),ProjMath.degToRad(lonmax));    center=GreatCircle.sphericalBetween(ProjMath.degToRad(latmax),ProjMath.degToRad(lonmin),dist,azimuth);    latitude=(float)center.getY();    longitude=(float)center.getX();  }  MapHandler mapHandler=(MapHandler)getBeanContext();  if (mapHandler == null) {    Debug.message("link","Warning...mapHandler = null");  } else {    MapBean mapBean=(MapBean)mapHandler.get("com.bbn.openmap.MapBean");    if (mapBean == null) {      Debug.message("link","Warning...mapBean = null");    } else {      center=new Point2D.Float(latitude,longitude);      ProjectionFactory projFactory=mapBean.getProjectionFactory();      if (projType != null) {        Class<? extends Projection> projClass=projFactory.getProjClassForName(projType);        if (projClass == null) {          projClass=Mercator.class;        }        projection=(Proj)projFactory.makeProjection(projClass,center,scale,width,height);      } else {        projection=(Proj)mapBean.getProjection();        projection.setCenter(center);        projection.setScale(scale);        projection.setWidth(width);        projection.setHeight(height);      }      if (latmin >= -90.f && latmax <= 90.f && lonmin >= -180.f && lonmax <= 180.f && latmin <= latmax && lonmin <= lonmax) {        Point2D upperLeft=new Point2D.Float(latmax,lonmin);        Point2D lowerRight=new Point2D.Float(latmin,lonmax);        scale=ProjMath.getScale(upperLeft,lowerRight,projection);        projection.setScale(scale);        Point2D ul=projection.getUpperLeft();        Point2D lr=projection.getLowerRight();        double factor1=(latmax - latmin) / (ul.getY() - lr.getY());        double factor2=(lonmax - lonmin) / (lr.getX() - ul.getX());        if (factor2 > factor1)         factor1=factor2;        if (factor1 > 1.0) {          scale*=factor1;          projection.setScale(scale);        }      }      mapBean.setProjection(projection);    }  }}  }
class C{  public void keyTyped(KeyEvent e){}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.GENERIC_DECLARATION__TYPE_VARS:    getTypeVars().clear();  return;}super.eUnset(featureID);}  }
class C{  void fullyUnlock(){  takeLock.unlock();  putLock.unlock();}  }
class C{  public ASN1Primitive parsePublicKey() throws IOException {  ASN1InputStream aIn=new ASN1InputStream(keyData.getBytes());  return aIn.readObject();}  }
class C{  public boolean isThumbnailCompressed(){  return mData.hasCompressedThumbnail();}  }
class C{  public SelectChangesetsWizardPage(){  super(NAME);  setTitle(Messages.getString("SelectChangesetsWizardPage.PageTitle"));  setDescription(Messages.getString("SelectChangesetsWizardPage.PageDescription"));  setPageComplete(false);}  }
class C{  public static RotateBitmapResult rotateBitmapByExif(Bitmap bitmap,ExifInterface exif){  int degrees;  int orientation=exif.getAttributeInt(ExifInterface.TAG_ORIENTATION,ExifInterface.ORIENTATION_NORMAL);switch (orientation) {case ExifInterface.ORIENTATION_ROTATE_90:    degrees=90;  break;case ExifInterface.ORIENTATION_ROTATE_180:degrees=180;break;case ExifInterface.ORIENTATION_ROTATE_270:degrees=270;break;default :degrees=0;break;}return new RotateBitmapResult(bitmap,degrees);}  }
class C{  private void checkMode(String pathStr,IgfsMode expMode) throws Exception {  assert igfs != null;  IgfsPath path=new IgfsPath(pathStr);  IgfsModeResolver rslvr=igfs.modeResolver();  IgfsMode mode=rslvr.resolveMode(path);  assertEquals(expMode,mode);}  }
class C{  public void scanJarFile(){  fileCombo.removeAllItems();  try {    JarInputStream zin=new JarInputStream(new FileInputStream(JarName));    JarEntry entry;    while ((entry=zin.getNextJarEntry()) != null) {      String nameOfEntry=entry.getName();      if (nameOfEntry.endsWith(".javaVISAD") || nameOfEntry.endsWith(".javaSGT")) {        fileCombo.addItem(nameOfEntry);      }      zin.closeEntry();    }    zin.close();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  private static Object[] testcase(String functionCall,String expectedResult){  return new Object[]{functionCall,expectedResult,true};}  }
class C{  void put(final ByteVector out){  final int FACTOR=ClassWriter.TO_ACC_SYNTHETIC;  int mask=Opcodes.ACC_DEPRECATED | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE | ((access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) / FACTOR);  out.putShort(access & ~mask).putShort(name).putShort(desc);  int attributeCount=0;  if (value != 0) {    ++attributeCount;  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((cw.version & 0xFFFF) < Opcodes.V1_5 || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {      ++attributeCount;    }  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    ++attributeCount;  }  if (ClassReader.SIGNATURES && signature != 0) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && anns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && ianns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && tanns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && itanns != null) {    ++attributeCount;  }  if (attrs != null) {    attributeCount+=attrs.getCount();  }  out.putShort(attributeCount);  if (value != 0) {    out.putShort(cw.newUTF8("ConstantValue"));    out.putInt(2).putShort(value);  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((cw.version & 0xFFFF) < Opcodes.V1_5 || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {      out.putShort(cw.newUTF8("Synthetic")).putInt(0);    }  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    out.putShort(cw.newUTF8("Deprecated")).putInt(0);  }  if (ClassReader.SIGNATURES && signature != 0) {    out.putShort(cw.newUTF8("Signature"));    out.putInt(2).putShort(signature);  }  if (ClassReader.ANNOTATIONS && anns != null) {    out.putShort(cw.newUTF8("RuntimeVisibleAnnotations"));    anns.put(out);  }  if (ClassReader.ANNOTATIONS && ianns != null) {    out.putShort(cw.newUTF8("RuntimeInvisibleAnnotations"));    ianns.put(out);  }  if (ClassReader.ANNOTATIONS && tanns != null) {    out.putShort(cw.newUTF8("RuntimeVisibleTypeAnnotations"));    tanns.put(out);  }  if (ClassReader.ANNOTATIONS && itanns != null) {    out.putShort(cw.newUTF8("RuntimeInvisibleTypeAnnotations"));    itanns.put(out);  }  if (attrs != null) {    attrs.put(cw,null,0,-1,-1,out);  }}  }
class C{  public void startDocument() throws SAXException {  if (DEBUG)   System.out.println("startDocument");  int doc=addNode(DTM.DOCUMENT_NODE,m_expandedNameTable.getExpandedTypeID(DTM.DOCUMENT_NODE),DTM.NULL,DTM.NULL,0,true);  m_parents.push(doc);  m_previous=DTM.NULL;  m_contextIndexes.push(m_prefixMappings.size());}  }
class C{  public ShapeBuilder close(){  return shell.close();}  }
class C{  public Dataset(GCTrace gcTrace,GCTraceCheckpoint checkpoint){  super();  this.gcTrace=gcTrace;  this.checkpoint=checkpoint;  this.gcTraceSize=0;  addGCActivities();  updateBuckets();}  }
class C{  public void clearClassIntrospecitonCache(){  classIntrospector.clearCache();}  }
class C{  @Override public boolean supportsResultSetConcurrency(int type,int concurrency){  if (isDebugEnabled()) {    debugCode("supportsResultSetConcurrency(" + type + ", "+ concurrency+ ");");  }  return type != ResultSet.TYPE_SCROLL_SENSITIVE;}  }
class C{  public void addItemLabel(final JLabel label,final JComponent item){  GridBagConstraints labelConstraints=new GridBagConstraints();  labelConstraints.gridx=0;  labelConstraints.gridy=myNextItemRow;  labelConstraints.insets=new Insets(10,10,0,0);  labelConstraints.anchor=GridBagConstraints.NORTHEAST;  labelConstraints.fill=GridBagConstraints.NONE;  add(label,labelConstraints);  GridBagConstraints itemConstraints=new GridBagConstraints();  itemConstraints.gridx=1;  itemConstraints.gridy=myNextItemRow;  itemConstraints.insets=new Insets(10,10,0,10);  itemConstraints.weightx=1.0;  itemConstraints.anchor=GridBagConstraints.WEST;  itemConstraints.fill=GridBagConstraints.HORIZONTAL;  add(item,itemConstraints);  myNextItemRow++;}  }
class C{  public void addArc(float latPoint,float lonPoint,int w,int h,float s,float e,LinkProperties properties) throws IOException {  LinkArc.write(latPoint,lonPoint,0,0,w,h,s,e,properties,link.dos);}  }
class C{  @Override public void writeText(char text[],int off,int len) throws IOException {  if (text == null) {    throw new NullPointerException(MessageUtils.getExceptionMessageString(MessageUtils.NULL_PARAMETERS_ERROR_MESSAGE_ID,"text"));  }  if (off < 0 || off > text.length || len < 0 || len > text.length) {    throw new IndexOutOfBoundsException();  }  closeStartIfNecessary();  if (len == 0)   return;  if (dontEscape) {    writer.write(text,off,len);  } else   if (isPartial || !writingCdata) {    HtmlUtils.writeText(writer,escapeUnicode,escapeIso,buffer,text,off,len);  } else {    assert writingCdata;    writeEscaped(text,off,len);  }}  }
class C{  public JavaCompiler(Context context){  this.context=context;  context.put(compilerKey,this);  if (context.get(JavaFileManager.class) == null)   JavacFileManager.preRegister(context);  names=Names.instance(context);  log=Log.instance(context);  diagFactory=JCDiagnostic.Factory.instance(context);  reader=ClassReader.instance(context);  make=TreeMaker.instance(context);  writer=ClassWriter.instance(context);  jniWriter=JNIWriter.instance(context);  enter=Enter.instance(context);  todo=Todo.instance(context);  fileManager=context.get(JavaFileManager.class);  parserFactory=ParserFactory.instance(context);  compileStates=CompileStates.instance(context);  try {    syms=Symtab.instance(context);  } catch (  CompletionFailure ex) {    log.error("cant.access",ex.sym,ex.getDetailValue());    if (ex instanceof ClassReader.BadClassFile)     throw new Abort();  }  source=Source.instance(context);  Target target=Target.instance(context);  attr=Attr.instance(context);  chk=Check.instance(context);  gen=Gen.instance(context);  flow=Flow.instance(context);  transTypes=TransTypes.instance(context);  lower=Lower.instance(context);  annotate=Annotate.instance(context);  types=Types.instance(context);  taskListener=MultiTaskListener.instance(context);  reader.sourceCompleter=thisCompleter;  options=Options.instance(context);  verbose=options.isSet(VERBOSE);  sourceOutput=options.isSet(PRINTSOURCE);  stubOutput=options.isSet("-stubs");  relax=options.isSet("-relax");  printFlat=options.isSet("-printflat");  attrParseOnly=options.isSet("-attrparseonly");  encoding=options.get(ENCODING);  lineDebugInfo=options.isUnset(G_CUSTOM) || options.isSet(G_CUSTOM,"lines");  genEndPos=options.isSet(XJCOV) || context.get(DiagnosticListener.class) != null;  devVerbose=options.isSet("dev");  processPcks=options.isSet("process.packages");  werror=options.isSet(WERROR);  if (source.compareTo(Source.DEFAULT) < 0) {    if (options.isUnset(XLINT_CUSTOM,"-" + LintCategory.OPTIONS.option)) {      if (fileManager instanceof BaseFileManager && !(fileManager instanceof CeyloncFileManager)) {        if (((BaseFileManager)fileManager).isDefaultBootClassPath())         log.warning(LintCategory.OPTIONS,"source.no.bootclasspath",source.name);      }    }  }  checkForObsoleteOptions(target);  verboseCompilePolicy=options.isSet("verboseCompilePolicy");  if (attrParseOnly)   compilePolicy=CompilePolicy.ATTR_ONLY; else   compilePolicy=CompilePolicy.decode(options.get("compilePolicy"));  implicitSourcePolicy=ImplicitSourcePolicy.decode(options.get("-implicit"));  completionFailureName=options.isSet("failcomplete") ? names.fromString(options.get("failcomplete")) : null;  shouldStopPolicyIfError=options.isSet("shouldStopPolicy") ? CompileState.valueOf(options.get("shouldStopPolicy")) : options.isSet("shouldStopPolicyIfError") ? CompileState.valueOf(options.get("shouldStopPolicyIfError")) : CompileState.INIT;  shouldStopPolicyIfNoError=options.isSet("shouldStopPolicyIfNoError") ? CompileState.valueOf(options.get("shouldStopPolicyIfNoError")) : CompileState.GENERATE;  if (options.isUnset("oldDiags"))   log.setDiagnosticFormatter(RichDiagnosticFormatter.instance(context));}  }
class C{  public Peek(Consumer<T> peeker){  this.peeker=peeker;}  }
class C{  private static boolean typeEquals(ParameterizedType from,ParameterizedType to,Map<String,Type> typeVarMap){  if (from.getRawType().equals(to.getRawType())) {    Type[] fromArgs=from.getActualTypeArguments();    Type[] toArgs=to.getActualTypeArguments();    for (int i=0; i < fromArgs.length; i++) {      if (!matches(fromArgs[i],toArgs[i],typeVarMap)) {        return false;      }    }    return true;  }  return false;}  }
class C{  public DispatchingEventReplayer<T> inAscendingCausalOrder(){  return inAscendingOrder(causalOrderComparator);}  }
class C{  public static void createFile(String filename) throws IOException {  FileSystem fs=FileSystem.get(conf);  fs.create(new Path(filename));}  }
class C{  public static double logExpMinus1(double x){  return x > 10.0 ? x : Math.log(Math.exp(x) - 1);}  }
class C{  public boolean isSalesTax(){  return m_salesTax;}  }
class C{  public CopyAction(){  super(copyAction);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  boolean state;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("p");  employeeNode=elementList.item(1);  state=employeeNode.hasChildNodes();  assertTrue("nodeHasChildAssert1",state);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static float convertPixelsToDp(float px,Context context){  Resources resources=context.getResources();  DisplayMetrics metrics=resources.getDisplayMetrics();  float dp=px / ((float)metrics.densityDpi / DisplayMetrics.DENSITY_DEFAULT);  return dp;}  }
class C{  @Override public String toString(){  StringBuffer result=new StringBuffer();  for (int i=0; i < data.length; i++) {    result.append((i == 0 ? "" : ",") + data[i]);  }  return result.toString();}  }
class C{  public boolean addAll(Map<String,T> args){  for (  Map.Entry<String,T> entry : args.entrySet()) {    add(entry.getKey(),entry.getValue());  }  return args.size() > 0;}  }
class C{  public static ExecutorService newSingleThreadExecutor(ThreadFactory threadFactory){  return Executors.unconfigurableExecutorService(newFixedThreadPool(1,threadFactory));}  }
class C{  public static EncryptionAlgorithm forName(final String name){  if ("EC".equals(name) || "ECC".equals(name)) {    return ECDSA;  }  try {    return valueOf(name);  } catch (  Exception e) {  }  throw new DSSException("Unsupported algorithm: " + name);}  }
class C{  public FtHttpResumeUpload(MmContent file,Uri fileIcon,String tId,ContactId contact,String chatId,String fileTransferId,boolean isGroup,long timestamp,long timestampSent){  super(Direction.OUTGOING,file.getUri(),file.getName(),file.getEncoding(),file.getSize(),fileIcon,contact,chatId,fileTransferId,isGroup,timestamp,timestampSent);  mTId=tId;}  }
class C{  @Override public void draw(Graphics2D g){  Figure o=getOwner();  if (o.get(LINK) != null && o.get(LINK).trim().length() > 0) {    g.setColor((Color)getEditor().getHandleAttribute(HandleAttributeKeys.OVERFLOW_HANDLE_STROKE_COLOR));    Rectangle r=basicGetBounds();    g.drawLine(r.x + (r.width / 2) - 1,r.y,r.x,r.y);    g.drawLine(r.x,r.y,r.x,r.y + r.height - 1);    g.drawLine(r.x,r.y + r.height - 1,r.x + (r.width / 2) - 1,r.y + r.height - 1);    g.drawLine(r.x + (r.width / 3),r.y + r.height / 2,r.x + r.width - 1,r.y + r.height / 2);    g.drawLine(r.x + r.width - 1,r.y + r.height / 2,(int)(r.x + r.width * .75 - 1),(int)(r.y + r.height * .25));    g.drawLine(r.x + r.width - 1,r.y + r.height / 2,(int)(r.x + r.width * .75 - 1),(int)(r.y + r.height * .75));  }}  }
class C{  public static <DTO>DTO createDtoFromJson(String json,Class<DTO> dtoInterface){  return DtoFactory.getInstance().createDtoFromJson(json,dtoInterface);}  }
class C{  public void testUntypedMap2() throws Exception {  ObjectMapper mapper=new ObjectMapper();  String JSON="{ \"a\" : \"x\" }";  @SuppressWarnings("unchecked") HashMap<String,Object> result=mapper.readValue(JSON,HashMap.class);  assertNotNull(result);  assertTrue(result instanceof Map<?,?>);  assertEquals(1,result.size());  assertEquals("x",result.get("a"));}  }
class C{  public void test_ticket_bg1899_b() throws Exception {  new TestHelper("ticket_bg1899b","ticket_bg1899b.rq","ticket_bg1899abcd.ttl","ticket_bg1899abcd.srx").runTest();}  }
class C{  public boolean logoutUser(String username,HttpServletRequest req,boolean force,boolean retry){  String rawToken=req.getHeader(RequestProcessingUtils.AUTH_TOKEN_HEADER);  if (rawToken == null) {    if (req.getCookies() != null) {      for (      Cookie cookie : req.getCookies()) {        if (cookie.getName().equalsIgnoreCase(RequestProcessingUtils.AUTH_TOKEN_HEADER)) {          rawToken=cookie.getValue();          log.debug("Got token from cookies for internal logout request");          break;        }      }    }  }  TokenOnWire tw=tokenEncoder.decode(rawToken);  if (tw == null) {    log.error("Could not logout user.  Token does not decode.");    return false;  }  boolean notify=false;  if (StringUtils.isBlank(username)) {    log.debug("no username");    notify=VdcUtil.getLocalShortVdcId().equals(URIUtil.parseVdcIdFromURI(tw.getTokenId())) ? true : false;  }  log.info("LogoutClient: {}",notify ? "will set the notify flag to true when sending logout request to authsvc" : "Just deleting local copy of token.");  String endpoint=null;  int attempts=0;  if (StringUtils.isNotBlank(username)) {    try {      username=URLEncoder.encode(username,"UTF-8");    } catch (    UnsupportedEncodingException e) {      throw APIException.badRequests.unableToEncodeString(username,e);    }  }  int retries=retry ? MAX_LOGOUT_RETRIES : 1;  while (attempts < retries) {    log.debug("Logout attempt {}",++attempts);    AuthSvcClientIterator authSvcClientItr=new AuthSvcClientIterator(authSvcEndPointLocator);    try {      if (authSvcClientItr.hasNext()) {        endpoint=authSvcClientItr.peek().toString();        log.debug("AuthenticationProvider endpoint: {}",endpoint);        String fullRequest=LOGOUT_URI + String.format("?force=%s&proxytokens=false&notifyvdcs=%s%s",force == true ? "true" : "false",notify == true ? "true" : "false",username == null ? "" : "&username=" + username);        log.info(fullRequest);        final ClientResponse response=authSvcClientItr.get(URI.create(fullRequest),rawToken);        final int status=response.getStatus();        String errorRaw=response.getEntity(String.class);        log.debug("Status: {}",status);        log.debug("Response entity: {}",errorRaw);        if (status == ClientResponse.Status.OK.getStatusCode()) {          log.info("User logged out successfully.  User will have to re-login.");          return true;        } else         if (status == ClientResponse.Status.UNAUTHORIZED.getStatusCode() && !notify) {          log.info("401 Status code from logout request.  Token did not exist or was already deleted.");        } else {          log.warn("Unexpected response code {}.",status);        }      }    } catch (    Exception e) {      log.info("Exception connecting to {}. ",endpoint,e);    }  }  return false;}  }
class C{  public boolean showOverflowMenu(){  if (mReserveOverflow && !isOverflowMenuShowing() && mMenu != null && mMenuView != null && mPostedOpenRunnable == null && !mMenu.getNonActionItems().isEmpty()) {    OverflowPopup popup=new OverflowPopup(mContext,mMenu,mOverflowButton,true);    mPostedOpenRunnable=new OpenOverflowRunnable(popup);    ((View)mMenuView).post(mPostedOpenRunnable);    super.onSubMenuSelected(null);    return true;  }  return false;}  }
class C{  public static Class<? extends FSDirectory> loadFSDirectoryClass(String clazzName) throws ClassNotFoundException {  return Class.forName(adjustDirectoryClassName(clazzName)).asSubclass(FSDirectory.class);}  }
class C{  public DAuthorityInformationAccess(JDialog parent,byte[] value) throws IOException {  super(parent);  setTitle(res.getString("DAuthorityInformationAccess.Title"));  initComponents();  prepopulateWithValue(value);}  }
class C{  private boolean isFoldingEnabled(){  return JavaScriptPlugin.getDefault().getPreferenceStore().getBoolean(PreferenceConstants.EDITOR_FOLDING_ENABLED);}  }
class C{  public TripsAnalyzer(){  this.autoConfig=true;  this.createGraphs=true;  this.sortedModes.add(TransportMode.bike);  this.sortedModes.add(TransportMode.car);  this.sortedModes.add(TransportMode.pt);  this.sortedModes.add(TransportMode.ride);  this.sortedModes.add(TransportMode.walk);  this.observedAgents=null;}  }
class C{  public static void returnToNewStack(Address fp){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);}  }
class C{  private void doDelete(HttpServletRequest request,String distPrefId){  Transaction tx=null;  try {    DistributionPrefDAO dpDao=new DistributionPrefDAO();    org.hibernate.Session hibSession=dpDao.getSession();    tx=hibSession.getTransaction();    if (tx == null || !tx.isActive())     tx=hibSession.beginTransaction();    HashSet relatedInstructionalOfferings=new HashSet();    DistributionPref dp=dpDao.get(new Long(distPrefId));    sessionContext.checkPermission(dp,Right.DistributionPreferenceDelete);    Department dept=(Department)dp.getOwner();    dept.getPreferences().remove(dp);    for (Iterator i=dp.getDistributionObjects().iterator(); i.hasNext(); ) {      DistributionObject dObj=(DistributionObject)i.next();      PreferenceGroup pg=dObj.getPrefGroup();      relatedInstructionalOfferings.add((pg instanceof Class_ ? ((Class_)pg).getSchedulingSubpart() : (SchedulingSubpart)pg).getInstrOfferingConfig().getInstructionalOffering());      pg.getDistributionObjects().remove(dObj);      hibSession.saveOrUpdate(pg);    }    hibSession.delete(dp);    hibSession.saveOrUpdate(dept);    List<Long> changedOfferingIds=new ArrayList<Long>();    for (Iterator i=relatedInstructionalOfferings.iterator(); i.hasNext(); ) {      InstructionalOffering io=(InstructionalOffering)i.next();      ChangeLog.addChange(hibSession,sessionContext,io,ChangeLog.Source.DIST_PREF_EDIT,ChangeLog.Operation.DELETE,io.getControllingCourseOffering().getSubjectArea(),null);      if (permissionOfferingLockNeeded.check(sessionContext.getUser(),io))       changedOfferingIds.add(io.getUniqueId());    }    if (!changedOfferingIds.isEmpty())     StudentSectioningQueue.offeringChanged(hibSession,sessionContext.getUser(),sessionContext.getUser().getCurrentAcademicSessionId(),changedOfferingIds);    if (tx != null && tx.isActive())     tx.commit();    hibSession.flush();    hibSession.refresh(dept);  } catch (  Exception e) {    Debug.error(e);    if (tx != null && tx.isActive())     tx.rollback();  }}  }
class C{  public void clearStartupErrors(){  getStartupErrors().clear();}  }
class C{  @Override public void retry(VolleyError error) throws VolleyError {  mCurrentRetryCount++;  mCurrentTimeoutMs+=(mCurrentTimeoutMs * mBackoffMultiplier);  if (!hasAttemptRemaining()) {    throw error;  }}  }
class C{  protected void startupWithAdditionalTransaction(final int transactionManagerCalls) throws Exception {  mockConfiguration(2);  mockStore();  final HGTransactionManager transactionManager=new HGTransactionManager(storage.getTransactionFactory());  EasyMock.expect(store.getTransactionManager()).andReturn(transactionManager).times(transactionManagerCalls);  replay();  storage.startup(store,configuration);  transactionManager.beginTransaction();}  }
class C{  public LocalLogWriter(int level,PrintStream logWriter,String connectionName){  super(level,logWriter,connectionName);}  }
class C{  public RecurrenceInfo(GenericValue info) throws RecurrenceInfoException {  this.info=info;  if (!info.getEntityName().equals("RecurrenceInfo"))   throw new RecurrenceInfoException("Invalid RecurrenceInfo Value object.");  init();}  }
class C{  public void bitAnd() throws IOException {  writeCode(BIT_AND);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void validateRegIsCopy(HttpSession session,Integer copyFdr,UseCaseConf useCaseConf,Integer bookIdAux) throws IOException, ServletException, TecDocException {  if ((copyFdr != null) && (copyFdr != 0)) {    try {      String bookRegCopyValidado=(String)session.getAttribute(Book_Reg_Copy_Validado);      String auxBookRegistroCopy=bookIdAux + Keys.GUION_BAJO + copyFdr;      if ((!auxBookRegistroCopy.equals(bookRegCopyValidado))) {        validateInfoRegister(useCaseConf,bookIdAux,copyFdr);        session.setAttribute(Book_Reg_Copy_Validado,auxBookRegistroCopy);      }    } catch (    TecDocException e) {      if (_logger.isDebugEnabled()) {        _logger.debug("Se ha producido un error al validar el registro a copiar [" + copyFdr + "] en el libro ["+ bookIdAux+ "] para el usuario ["+ useCaseConf.getUserName()+ "]");      }      _logger.error("Se ha producido un error al validar los datos en validateRegIsCopy: ",e);      throw e;    }  }}  }
class C{  public static byte[] createMultiSigOutputScript(int threshold,List<ECKey> pubkeys){  checkArgument(threshold > 0);  checkArgument(threshold <= pubkeys.size());  checkArgument(pubkeys.size() <= 16);  if (pubkeys.size() > 3) {    log.warn("Creating a multi-signature output that is non-standard: {} pubkeys, should be <= 3",pubkeys.size());  }  try {    ByteArrayOutputStream bits=new ByteArrayOutputStream();    bits.write(encodeToOpN(threshold));    for (    ECKey key : pubkeys) {      writeBytes(bits,key.getPubKey());    }    bits.write(encodeToOpN(pubkeys.size()));    bits.write(OP_CHECKMULTISIG);    return bits.toByteArray();  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  protected MoveResourceChange(IResource source,IContainer target,long stampToRestore,Change restoreSourceChange){  fSource=source;  fTarget=target;  fStampToRestore=stampToRestore;  fRestoreSourceChange=restoreSourceChange;  setValidationMethod(VALIDATE_NOT_DIRTY);}  }
class C{  public void keyTyped(KeyEvent e){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:02.482 -0500",hash_original_method="21F6FFA80D5638BBF9678A771ADCBC20",hash_generated_method="2BA5CDC9C3181209875E5B305DDDE7F7") @DSVerified @DSSpec(DSCat.IO) @DSSink({DSSinkKind.NETWORK}) public int help(String command) throws IOException {  return sendCommand(SMTPCommand.HELP,command);}  }
class C{  public synchronized boolean lock() throws KeeperException, InterruptedException {  if (isClosed()) {    return false;  }  ensurePathExists(dir);  return (Boolean)retryOperation(zop);}  }
class C{  private void updateViews(){  if (mSelectionList.getActivity() instanceof MusicContainerListActivity) {    MusicContainerListActivity trackListActivity=(MusicContainerListActivity)mSelectionList.getActivity();    trackListActivity.updateLists();  }  if (mSelectionList.getActivity() instanceof MusicTrackListActivity) {    MusicTrackListActivity trackDetailActivity=(MusicTrackListActivity)mSelectionList.getActivity();    trackDetailActivity.updateLists();  }}  }
class C{  public synchronized void checkOwnershipAndReacquire() throws LockingException {  if (null == lockAcquireFuture || !lockAcquireFuture.isDefined()) {    throw new LockingException(lockPath,"check ownership before acquiring");  }  if (haveLock()) {    return;  }  reacquireLock(true);}  }
class C{  public void testBug15024() throws Exception {  createTable("testBug15024","(field1 BLOB)");  try {    this.pstmt=this.conn.prepareStatement("INSERT INTO testBug15024 VALUES (?)");    testStreamsForBug15024(false,false);    Properties props=new Properties();    props.setProperty("useConfigs","3-0-Compat");    Connection compatConn=null;    try {      compatConn=getConnectionWithProps(props);      this.pstmt=compatConn.prepareStatement("INSERT INTO testBug15024 VALUES (?)");      testStreamsForBug15024(true,false);    }  finally {      if (compatConn != null) {        compatConn.close();      }    }  }  finally {    if (this.pstmt != null) {      PreparedStatement toClose=this.pstmt;      this.pstmt=null;      toClose.close();    }  }}  }
class C{  public void sideline(TransactionEvent transactionEvent){  LOGGER.error("Sideline : {}",transactionEvent.toString());}  }
class C{  protected void sequence_Exponentiation(ISerializationContext context,Expression semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,GamlPackage.Literals.EXPRESSION__LEFT) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,GamlPackage.Literals.EXPRESSION__LEFT));    if (transientValues.isValueTransient(semanticObject,GamlPackage.Literals.EXPRESSION__OP) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,GamlPackage.Literals.EXPRESSION__OP));    if (transientValues.isValueTransient(semanticObject,GamlPackage.Literals.EXPRESSION__RIGHT) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,GamlPackage.Literals.EXPRESSION__RIGHT));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getExponentiationAccess().getExpressionLeftAction_1_0_0(),semanticObject.getLeft());  feeder.accept(grammarAccess.getExponentiationAccess().getOpCircumflexAccentKeyword_1_0_1_0(),semanticObject.getOp());  feeder.accept(grammarAccess.getExponentiationAccess().getRightBinaryParserRuleCall_1_1_0(),semanticObject.getRight());  feeder.finish();}  }
class C{  public void forEachSrcIn(Allocation ain,Allocation aout){  blend(5,ain,aout);}  }
class C{  @Override public UnorderedIter unorderedIter(){  return new UnorderedIter();}  }
class C{  public final void testEqualsObject01(){  ECPoint p2=null, p1=new ECPoint(BigInteger.valueOf(-23456L),BigInteger.ONE);  assertTrue(p1.equals(p1));  p1=new ECPoint(BigInteger.valueOf(-23456L),BigInteger.ONE);  p2=new ECPoint(BigInteger.valueOf(-23456L),BigInteger.valueOf(1L));  assertTrue(p1.equals(p2) && p2.equals(p1));  p1=ECPoint.POINT_INFINITY;  p2=ECPoint.POINT_INFINITY;  assertTrue(p1.equals(p2) && p2.equals(p1));}  }
class C{  @CanIgnoreReturnValue @Deprecated @Override public ImmutableList<V> removeAll(Object key){  throw new UnsupportedOperationException();}  }
class C{  private boolean isSource(Vertex<LongWritable,DoubleWritable,FloatWritable> vertex){  return vertex.getId().get() == getContext().getConfiguration().getLong(SOURCE_ID,SOURCE_ID_DEFAULT);}  }
class C{  public static double[] mean(double[][] distributions){  double[] d_mean=new double[distributions[0].length];  for (int j=0; j < d_mean.length; j++)   d_mean[j]=0;  for (int i=0; i < distributions.length; i++)   for (int j=0; j < d_mean.length; j++)   d_mean[j]+=distributions[i][j] / distributions.length;  return d_mean;}  }
class C{  public long convertGeodeticToUTM(double Latitude,double Longitude){  long Lat_Degrees;  long Long_Degrees;  long temp_zone;  long Error_Code=UTM_NO_ERROR;  double Origin_Latitude=0;  double False_Easting=500000;  double False_Northing=0;  double Scale=0.9996;  if ((Latitude < MIN_LAT) || (Latitude > MAX_LAT)) {    Error_Code|=UTM_LAT_ERROR;  }  if ((Longitude < -PI) || (Longitude > (2 * PI))) {    Error_Code|=UTM_LON_ERROR;  }  if (Error_Code == UTM_NO_ERROR) {    if (Longitude < 0)     Longitude+=(2 * PI) + 1.0e-10;    Lat_Degrees=(long)(Latitude * 180.0 / PI);    Long_Degrees=(long)(Longitude * 180.0 / PI);    if (Longitude < PI)     temp_zone=(long)(31 + ((Longitude * 180.0 / PI) / 6.0)); else     temp_zone=(long)(((Longitude * 180.0 / PI) / 6.0) - 29);    if (temp_zone > 60)     temp_zone=1;    if ((Lat_Degrees > 55) && (Lat_Degrees < 64) && (Long_Degrees > -1)&& (Long_Degrees < 3))     temp_zone=31;    if ((Lat_Degrees > 55) && (Lat_Degrees < 64) && (Long_Degrees > 2)&& (Long_Degrees < 12))     temp_zone=32;    if ((Lat_Degrees > 71) && (Long_Degrees > -1) && (Long_Degrees < 9))     temp_zone=31;    if ((Lat_Degrees > 71) && (Long_Degrees > 8) && (Long_Degrees < 21))     temp_zone=33;    if ((Lat_Degrees > 71) && (Long_Degrees > 20) && (Long_Degrees < 33))     temp_zone=35;    if ((Lat_Degrees > 71) && (Long_Degrees > 32) && (Long_Degrees < 42))     temp_zone=37;    if (UTM_Override != 0) {      if ((temp_zone == 1) && (UTM_Override == 60))       temp_zone=UTM_Override; else       if ((temp_zone == 60) && (UTM_Override == 1))       temp_zone=UTM_Override; else       if (((temp_zone - 1) <= UTM_Override) && (UTM_Override <= (temp_zone + 1)))       temp_zone=UTM_Override; else       Error_Code=UTM_ZONE_OVERRIDE_ERROR;    }    if (Error_Code == UTM_NO_ERROR) {      if (temp_zone >= 31)       Central_Meridian=(6 * temp_zone - 183) * PI / 180.0; else       Central_Meridian=(6 * temp_zone + 177) * PI / 180.0;      Zone=(int)temp_zone;      if (Latitude < 0) {        False_Northing=10000000;        Hemisphere=AVKey.SOUTH;      } else       Hemisphere=AVKey.NORTH;      try {        TMCoord TM=TMCoord.fromLatLon(Angle.fromRadians(Latitude),Angle.fromRadians(Longitude),this.UTM_a,this.UTM_f,Angle.fromRadians(Origin_Latitude),Angle.fromRadians(Central_Meridian),False_Easting,False_Northing,Scale);        Easting=TM.getEasting();        Northing=TM.getNorthing();        if ((Easting < MIN_EASTING) || (Easting > MAX_EASTING))         Error_Code=UTM_EASTING_ERROR;        if ((Northing < MIN_NORTHING) || (Northing > MAX_NORTHING))         Error_Code|=UTM_NORTHING_ERROR;      } catch (      Exception e) {        Error_Code=UTM_TM_ERROR;      }    }  }  return (Error_Code);}  }
class C{  public CodenvyCompilationUnitResolver(INameEnvironment environment,IErrorHandlingPolicy policy,CompilerOptions compilerOptions,ICompilerRequestor requestor,IProblemFactory problemFactory,IProgressMonitor monitor,boolean fromJavaProject){  super(environment,policy,compilerOptions,requestor,problemFactory,monitor,fromJavaProject);}  }
class C{  public static void statusGlobals(){  final Status status=Status.self();  if (Cfg.DEBUG) {    Check.log(" Status Global Begins");  }  Globals g=status.getGlobals();  if (Cfg.DEBUG) {    Check.log(" quota min: " + g.quotaMin + " max:"+ g.quotaMax);    Check.log(" wipe: " + g.wipe);    Check.log(" type: " + g.type);    Check.log(" migrated: " + g.migrated);    Check.log(" versin: " + g.version);  }  if (Cfg.DEBUG) {    Check.log(" Status Global Ends");  }}  }
class C{  public Sphere(int numberOfVariables){  super(numberOfVariables);}  }
class C{  private static void determineFirstDigit(StringBuilder resultString,int lgPatternFound) throws NotFoundException {  for (int d=0; d < 10; d++) {    if (lgPatternFound == FIRST_DIGIT_ENCODINGS[d]) {      resultString.insert(0,(char)('0' + d));      return;    }  }  throw NotFoundException.getNotFoundInstance();}  }
class C{  @org.junit.Test public void testComprehension(){  Bot bot=Bot.createInstance();  try {    TextEntry text=bot.awareness().getSense(TextEntry.class);    List<String> output=registerForOutput(text);    bot.setDebugLevel(Level.FINE);    trainCount(text,output,1,5);    trainCount(text,output,0,5);    trainCount(text,output,1,10);    trainCount(text,output,0,10);    text.input("say 1");    String response=waitForOutput(output);    text.input("2");    response=waitForOutput(output);    if (!response.equals("3")) {      fail("did not comprehend: " + response);    }    text.input("4");    response=waitForOutput(output);    if (!response.equals("5")) {      fail("did not comprehend: " + response);    }    text.input("6");    response=waitForOutput(output);    if (!response.equals("7")) {      fail("did not comprehend: " + response);    }    text.input("6");    response=waitForOutput(output);    if (!response.equals("5")) {      fail("did not comprehend: " + response);    }    text.input("4");    response=waitForOutput(output);    if (!response.equals("3")) {      fail("did not comprehend: " + response);    }    text.input("2");    response=waitForOutput(output);    if (!response.equals("1")) {      fail("did not comprehend: " + response);    }    text.input("say 22");    response=waitForOutput(output);    if (!response.equals("22")) {      fail("say failed: " + response);    }    text.input("23");    response=waitForOutput(output);    if (!response.equals("24")) {      fail("did not comprehend: " + response);    }    text.input("25");    response=waitForOutput(output);    if (!response.equals("26")) {      fail("did not comprehend: " + response);    }    text.input("27");    response=waitForOutput(output);    if (!response.equals("28")) {      fail("did not comprehend: " + response);    }    text.input("29");    response=waitForOutput(output);    if (!response.equals("30")) {      fail("did not comprehend: " + response);    }    text.input("31");    response=waitForOutput(output);    if (!response.equals("32")) {      fail("did not comprehend: " + response);    }    text.input("31");    response=waitForOutput(output);    if (!response.equals("30")) {      fail("did not comprehend: " + response);    }    text.input("29");    response=waitForOutput(output);    if (!response.equals("28")) {      fail("did not comprehend: " + response);    }  }  finally {    bot.shutdown();  }}  }
class C{  public Iterator<Plugin> pluginIterator(){  return pluginByIdMap.values().iterator();}  }
class C{  public void prependProperty(String property,Properties src){  prependProperty(property,src.getProperty(property,""));}  }
class C{  public Future<DLSN> writeControlRecord(final LogRecord record){  record.setControl();  return write(record);}  }
class C{  public long kstkeip(){  return Long.parseLong(fields[29]);}  }
class C{  public static void softmax(double[] x,boolean implicitExtra){  double max=implicitExtra ? 1 : Double.NEGATIVE_INFINITY;  for (int i=0; i < x.length; i++)   max=max(max,x[i]);  double z=implicitExtra ? exp(-max) : 0;  for (int c=0; c < x.length; c++)   z+=(x[c]=exp(x[c] - max));  for (int c=0; c < x.length; c++)   x[c]/=z;}  }
class C{  public static boolean isDualMode(IgfsMode mode){  return mode == DUAL_SYNC || mode == DUAL_ASYNC;}  }
class C{  public boolean hasUrl(){  return fieldSetFlags()[1];}  }
class C{  public static ExtensionRegistryLite newInstance(){  return new ExtensionRegistryLite();}  }
class C{  public boolean isExtendedKey(){  return extendedKey;}  }
class C{  public GuacamoleConfiguration(GuacamoleConfiguration config){  protocol=config.getProtocol();  connectionID=config.getConnectionID();  for (  String name : config.getParameterNames())   parameters.put(name,config.getParameter(name));}  }
class C{  public TClass commonTClass(TClass tClass1,TClass tClass2){  if (tClass1 == null) {    if (tClass2 == null)     throw new IllegalArgumentException("both inputs can't be null");    return tClass2.widestComparable();  }  if (tClass2 == null)   return tClass1.widestComparable();  if (tClass1.equals(tClass2))   return tClass1;  Set<? extends TClass> t1Targets=stronglyCastableFrom(tClass1);  Set<? extends TClass> t2Targets=stronglyCastableFrom(tClass2);  Set<? extends TClass> set1, set2;  if (t1Targets.size() < t2Targets.size()) {    set1=t1Targets;    set2=t2Targets;  } else {    set1=t2Targets;    set2=t1Targets;  }  Set<? extends TClass> castGroup=Sets.intersection(set1,set2);  if (castGroup.isEmpty())   throw new NoSuchCastException(tClass1,tClass2);  TClass mostSpecific=null;  for (  TClass candidate : castGroup) {    if (isMostSpecific(candidate,castGroup)) {      if (mostSpecific == null)       mostSpecific=candidate; else       return null;    }  }  return mostSpecific;}  }
class C{  public void connect(SocketAddress addr) throws IOException {  assertNoError();  SocketState state=getState();  if (state != SocketState.Ready) {    throw new IOException("Socket not ready");  }synchronized (this) {    try {      ls.connect(addr);      ls.setConnectListener(cl);      setState(SocketState.Connecting);    } catch (    IOException e) {      ls.setConnectListener(null);      throw e;    }  }}  }
class C{  protected void traceMemory(){  trace("mem=" + getMemoryUsed());}  }
class C{  @Override public void onActivityCreated(Bundle savedInstanceState){  super.onActivityCreated(savedInstanceState);  getDialog().getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_VISIBLE);}  }
class C{  public static final void decode(byte[] base64Data,OutputStream os) throws Base64DecodingException, IOException {  decode(base64Data,os,-1);}  }
class C{  public static Node buildTreeClone(List<Node> nodes){  if (nodes.size() == 1) {    return new NodeTree(nodes.get(0)).cloneSubtree();  }  Node n=nodes.get(0);  Node clone=n.cloneNode(false);  OrderedNodeMatcher matcher=new OrderedNodeMatcher(nodes);  while (!matcher.isFinished()) {    if (matcher.match(n)) {      if (matcher.isFinished())       break;    } else {      n=n.getFirstChild();      while (!JavaScript.contains(n,matcher.peek())) {        n=n.getNextSibling();      }      clone=cloneChild(clone,n);      continue;    }    while (true) {      Node s=n.getNextSibling();      while (s != null && !JavaScript.contains(s,matcher.peek())) {        s=s.getNextSibling();      }      if (s != null) {        clone=cloneParent(clone,n.getParentNode());        clone=cloneChild(clone,s);        n=s;        break;      }      n=n.getParentNode();      clone=cloneParent(clone,n);    }  }  while (clone.getParentNode() != null) {    clone=clone.getParentNode();  }  return clone;}  }
class C{  public static char toChar(byte[] bytes){  return toChar(bytes,0);}  }
class C{  private void ghostmode(){  RPAction action=new RPAction();  action.put("type","ghostmode");  action.put("mode","true");  client.send(action);}  }
class C{  public static void testVarargsCollector() throws Throwable {  MethodType mt=MethodType.methodType(String[].class,String[].class);  MethodHandle mh=MethodHandles.publicLookup().findStatic(THIS_CLASS,"f",mt);  mh=MethodHandles.explicitCastArguments(mh,MethodType.methodType(Object.class,Object.class));  mh.invokeWithArguments((Object)(new String[]{"str1","str2"}));}  }
class C{  @Override public synchronized void pvChanged(PvChangeEvent event){  Message msg=mHandler.obtainMessage(MainActivity.MESSAGE_DATA_ITEMS_CHANGED);  if (!event.isChildEvent()) {    msg.obj=event;    mHandler.sendMessage(msg);  }}  }
class C{  public SQLClientInfoException(Map<String,ClientInfoStatus> failedProperties){  this.failedProperties=new HashMap<String,ClientInfoStatus>(failedProperties);}  }
class C{  protected void determineTrackAdjacency(){  if (this.trackAdjacencyList == null)   this.trackAdjacencyList=new ArrayList<Box>(); else   this.trackAdjacencyList.clear();  TrackAirspace track=(TrackAirspace)this.getShape();  List<Box> legs=track.getLegs();  for (int i=1; i < legs.size(); i++) {    boolean adjacent=legs.get(i - 1).getLocations()[1].equals(legs.get(i).getLocations()[0]);    if (adjacent)     this.trackAdjacencyList.add(legs.get(i));  }}  }
class C{  @Override public String toString(){  return "BinNavi main window";}  }
class C{  public static void assertEquals(RealMatrix rm1,RealMatrix rm2,FloatingPointError error){  Assert.assertEquals(rm1.getRowDimension(),rm2.getRowDimension());  Assert.assertEquals(rm1.getColumnDimension(),rm2.getColumnDimension());  for (int i=0; i < rm1.getRowDimension(); i++) {    for (int j=0; j < rm2.getColumnDimension(); j++) {      error.assertEquals(rm1.getEntry(i,j),rm2.getEntry(i,j));    }  }}  }
class C{  @Override public Object clone(){  EgDemand clone=null;  try {    clone=(EgDemand)super.clone();  } catch (  CloneNotSupportedException e) {    throw new InternalError(e.toString());  }  clone.setId(null);  clone.setEgBills(new HashSet<EgBill>());  clone.setEgDemandDetails(new HashSet<EgDemandDetails>());  for (  EgDemandDetails det : egDemandDetails) {    clone.addEgDemandDetails((EgDemandDetails)det.clone());  }  return clone;}  }
class C{  @Nullable private Table tryCreateTable(TableReference ref,TableSchema schema) throws IOException {  LOG.info("Trying to create BigQuery table: {}",BigQueryIO.toTableSpec(ref));  BackOff backoff=new ExponentialBackOff.Builder().setMaxElapsedTimeMillis(RETRY_CREATE_TABLE_DURATION_MILLIS).build();  Table table=new Table().setTableReference(ref).setSchema(schema);  return tryCreateTable(table,ref.getProjectId(),ref.getDatasetId(),backoff,Sleeper.DEFAULT);}  }
class C{  private void updateCGParams(CGRequestParams params) throws InternalException {  for (  CreateCopyParams copy : params.getCopies()) {    _log.info("View copy: " + copy.getName());    for (    CreateVolumeParams volume : copy.getJournals()) {      Volume dbVolume=_dbClient.queryObject(Volume.class,volume.getVolumeURI());      volume.setNativeGuid(dbVolume.getNativeGuid());      volume.setWwn(RPHelper.getRPWWn(dbVolume.getId(),_dbClient));    }  }  for (  CreateRSetParams rset : params.getRsets()) {    _log.info("View rset: " + rset.getName());    for (    CreateVolumeParams volume : rset.getVolumes()) {      Volume dbVolume=_dbClient.queryObject(Volume.class,volume.getVolumeURI());      volume.setNativeGuid(dbVolume.getNativeGuid());      volume.setWwn(RPHelper.getRPWWn(dbVolume.getId(),_dbClient));    }  }}  }
class C{  public static String escape(String s){  if (s == null)   return null;  StringBuffer sb=new StringBuffer();  escape(s,sb);  return sb.toString();}  }
class C{  public SRCPSensor(int number,SRCPBusConnectionMemo memo){  super(memo.getSystemPrefix() + "s" + number);  _number=number;  _bus=memo.getBus();  tc=memo.getTrafficController();  tc.addSRCPListener(this);  requestUpdateFromLayout();}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col;  double z;  int progress=0;  int i, a;  long counter=0;  int loopNum=0;  int[] dX={1,1,1,0,-1,-1,-1,0};  int[] dY={-1,0,1,1,1,0,-1,-1};  int[][] elements={{0,1,4,5,6,7},{0,1,2,5,6,7},{0,1,2,3,6,7},{0,1,2,3,4,7},{0,1,2,3,4,5},{1,2,3,4,5,6},{2,3,4,5,6,7},{0,3,4,5,6,7}};  double[] neighbours=new double[8];  boolean patternMatch=false;  int numIterations=10;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  numIterations=Integer.parseInt(args[2]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    int nRows=image.getNumberRows();    int nCols=image.getNumberColumns();    double noData=image.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("black_white.pal");    double[] data=null;    for (row=0; row < nRows; row++) {      data=image.getRowValues(row);      for (col=0; col < nCols; col++) {        if (data[col] > 0) {          output.setValue(row,col,1);        } else         if (data[col] == noData) {          output.setValue(row,col,noData);        } else {          output.setValue(row,col,0);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (nRows - 1));      updateProgress(progress);    }    image.close();    output.flush();    for (int k=0; k < numIterations; k++) {      loopNum++;      updateProgress("Loop Number " + loopNum + ":",0);      counter=0;      for (row=0; row < nRows; row++) {        for (col=0; col < nCols; col++) {          z=output.getValue(row,col);          if (z == 1 && z != noData) {            for (i=0; i < 8; i++) {              neighbours[i]=output.getValue(row + dY[i],col + dX[i]);            }            for (a=0; a < 8; a++) {              patternMatch=true;              for (i=0; i < elements[a].length; i++) {                if (neighbours[elements[a][i]] != 0) {                  patternMatch=false;                }              }              if (patternMatch) {                output.setValue(row,col,0);                counter++;              }            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (nRows - 1));        updateProgress(progress);      }      if (counter == 0) {        break;      }    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public boolean multipleInstances(){  return true;}  }
class C{  public boolean contains(String name){  try {    String value=getSetting(name);    if (value == null) {      return false;    } else     return value.trim().length() > 0;  } catch (  SettingsError e) {    return false;  }}  }
class C{  @Override public void add(int index,Object element){  if (!(element instanceof CheckBoxListItem)) {    super.add(index,new CheckBoxListItem(element));  } else {    super.add(index,element);  }}  }
class C{  public int computePriority(int basePriority){  boolean relaxedReporting=FindBugsAnalysisFeatures.isRelaxedMode();  boolean atLeastMedium=false;  boolean falsePositive=false;  boolean atMostLow=false;  boolean atMostMedium=false;  boolean peggedHigh=false;  int aLittleBitLower=0;  int priority=basePriority;  if (!relaxedReporting) {    for (    T warningProperty : map.keySet()) {      PriorityAdjustment adj=warningProperty.getPriorityAdjustment();      if (adj == PriorityAdjustment.PEGGED_HIGH) {        peggedHigh=true;        priority--;      } else       if (adj == PriorityAdjustment.FALSE_POSITIVE) {        falsePositive=true;        atMostLow=true;      } else       if (adj == PriorityAdjustment.A_LITTLE_BIT_LOWER_PRIORITY) {        aLittleBitLower++;      } else       if (adj == PriorityAdjustment.A_LITTLE_BIT_HIGHER_PRIORITY) {        aLittleBitLower--;      } else       if (adj == PriorityAdjustment.RAISE_PRIORITY) {        --priority;      } else       if (adj == PriorityAdjustment.RAISE_PRIORITY_TO_AT_LEAST_NORMAL) {        --priority;        atLeastMedium=true;      } else       if (adj == PriorityAdjustment.LOWER_PRIORITY_TO_AT_MOST_NORMAL) {        ++priority;        atMostMedium=true;      } else       if (adj == PriorityAdjustment.RAISE_PRIORITY_TO_HIGH) {        return Priorities.HIGH_PRIORITY;      } else       if (adj == PriorityAdjustment.LOWER_PRIORITY) {        ++priority;      } else       if (adj == PriorityAdjustment.AT_MOST_LOW) {        priority++;        atMostLow=true;      } else       if (adj == PriorityAdjustment.AT_MOST_MEDIUM) {        atMostMedium=true;      } else       if (adj == PriorityAdjustment.NO_ADJUSTMENT) {        assert true;      } else {        throw new IllegalStateException("Unknown priority " + adj);      }    }    if (peggedHigh && !falsePositive) {      return Priorities.HIGH_PRIORITY;    }    if (aLittleBitLower >= 3 || priority == 1 && aLittleBitLower == 2) {      priority++;    } else     if (aLittleBitLower <= -2) {      priority--;    }    if (atMostMedium) {      priority=Math.max(Priorities.NORMAL_PRIORITY,priority);    }    if (falsePositive && !atLeastMedium) {      return Priorities.EXP_PRIORITY + 1;    } else     if (atMostLow) {      return Math.min(Math.max(Priorities.LOW_PRIORITY,priority),Priorities.EXP_PRIORITY);    }    if (atLeastMedium && priority > Priorities.NORMAL_PRIORITY) {      priority=Priorities.NORMAL_PRIORITY;    }    if (priority < Priorities.HIGH_PRIORITY) {      priority=Priorities.HIGH_PRIORITY;    } else     if (priority > Priorities.EXP_PRIORITY) {      priority=Priorities.EXP_PRIORITY;    }  }  return priority;}  }
class C{  public synchronized Object remove(Object key){  Entry[] tab=table;  int hash=key.hashCode();  int index=(hash & 0x7FFFFFFF) % tab.length;  for (Entry e=tab[index], prev=null; e != null; prev=e, e=e.next) {    if ((e.hash == hash) && e.key.equals(key)) {      modCount++;      if (prev != null) {        prev.next=e.next;      } else {        tab[index]=e.next;      }      count--;      Object oldValue=e.value;      e.value=null;      return oldValue;    }  }  return null;}  }
class C{  public void testPollLast(){  LinkedBlockingDeque q=populatedDeque(SIZE);  for (int i=SIZE - 1; i >= 0; --i) {    assertEquals(i,q.pollLast());  }  assertNull(q.pollLast());}  }
class C{  public int findIndexById(int fldId) throws Exception {  int i;  FolderTokenExtFld fld=null;  int idx=-1;  for (i=0; i < count(); i++) {    fld=get(i);    if (fld.getId() == fldId) {      idx=i;      break;    }  }  return idx;}  }
class C{  public void updateClassifier(Instance instance) throws Exception {  if (!learningphase) {    return;  }  int num_classes=(int)(0.5 * numClasses);  int num_features=(int)(0.5 * numFeatures);  double[] data=new double[numFeatures];  double[] labels=new double[numClasses];  int numChanges=0;  if (!instance.classIsMissing()) {    for (int j=0; j < num_features; j++) {      data[j]=instance.value(num_classes + j);      data[j + num_features]=1 - data[j];    }    for (int j=0; j < num_classes; j++) {      labels[j]=instance.value(j);      labels[j + num_classes]=1 - labels[j];    }    SortPair[] cateacti=ARTActivateCategories(data);    java.util.Arrays.sort(cateacti);    boolean resonance=false;    int currentSortedIndex=0;    int currentCategory=-1;    double matchA=0;    double matchB=0;    while (!resonance) {      currentCategory=cateacti[currentSortedIndex].getOriginalIndex();      matchA=ART_Calculate_Match(data,weightsA[currentCategory]);      if (sumArray(weightsB[currentCategory]) == 0) {        matchB=1;      } else {        matchB=ART_Calculate_Match(labels,weightsB[currentCategory]);      }      if (matchA >= roa && matchB >= rob) {        if (currentCategory == numCategories - 1) {          if (currentSortedIndex == maxNumCategories) {            System.out.println("WARNING: The maximum number of categories has been reached.");            resonance=true;          } else {            for (int j=0; j < data.length; j++) {              weightsA[currentCategory][j]=data[j];            }            for (int j=0; j < weightsB[currentCategory].length; j++) {              weightsB[currentCategory][j]=labels[j];            }            ARAMm_Add_New_Category();            numChanges=numChanges + 1;            resonance=true;          }        } else {          double weightChange=ARAMm_Update_Weights(data,labels,currentCategory);          if (weightChange == 1) {            numChanges+=1;          }          resonance=true;        }      } else {        currentSortedIndex+=1;        resonance=false;      }    }  }}  }
class C{  public Attribute(String name){  this(name,new Value(Constants.DEFAULT_FIELD_VALUE));}  }
class C{  public synchronized void readState(DataInputStream stream) throws IOException {  int len=mt.length;  for (int x=0; x < len; x++)   mt[x]=stream.readInt();  len=mag01.length;  for (int x=0; x < len; x++)   mag01[x]=stream.readInt();  mti=stream.readInt();  __nextNextGaussian=stream.readDouble();  __haveNextNextGaussian=stream.readBoolean();}  }
class C{  public Editor edit() throws IOException {  return DiskLruCache.this.edit(key,sequenceNumber);}  }
class C{  public void close(int timeout){  if (client != null) {    client.close(timeout);  }}  }
class C{  public void reset(Graph<V,E> graph,E e){  Pair<V> endpoints=graph.getEndpoints(e);  getIndex(graph,e,endpoints.getFirst());  getIndex(graph,e,endpoints.getFirst(),endpoints.getSecond());}  }
class C{  protected byte[] engineGetIV(){  return (iv == null) ? null : iv.clone();}  }
class C{  private void processBlock(int blockIndex){  RegisterSpecSet primaryState=resultInfo.mutableCopyOfStarts(blockIndex);  SsaBasicBlock block=blocks.get(blockIndex);  List<SsaInsn> insns=block.getInsns();  int insnSz=insns.size();  if (blockIndex == method.getExitBlockIndex()) {    return;  }  SsaInsn lastInsn=insns.get(insnSz - 1);  boolean hasExceptionHandlers=lastInsn.getOriginalRopInsn().getCatches().size() != 0;  boolean canThrowDuringLastInsn=hasExceptionHandlers && (lastInsn.getResult() != null);  int freezeSecondaryStateAt=insnSz - 1;  RegisterSpecSet secondaryState=primaryState;  for (int i=0; i < insnSz; i++) {    if (canThrowDuringLastInsn && (i == freezeSecondaryStateAt)) {      primaryState.setImmutable();      primaryState=primaryState.mutableCopy();    }    SsaInsn insn=insns.get(i);    RegisterSpec result;    result=insn.getLocalAssignment();    if (result == null) {      result=insn.getResult();      if (result != null && primaryState.get(result.getReg()) != null) {        primaryState.remove(primaryState.get(result.getReg()));      }      continue;    }    result=result.withSimpleType();    RegisterSpec already=primaryState.get(result);    if (!result.equals(already)) {      RegisterSpec previous=primaryState.localItemToSpec(result.getLocalItem());      if (previous != null && (previous.getReg() != result.getReg())) {        primaryState.remove(previous);      }      resultInfo.addAssignment(insn,result);      primaryState.put(result);    }  }  primaryState.setImmutable();  IntList successors=block.getSuccessorList();  int succSz=successors.size();  int primarySuccessor=block.getPrimarySuccessorIndex();  for (int i=0; i < succSz; i++) {    int succ=successors.get(i);    RegisterSpecSet state=(succ == primarySuccessor) ? primaryState : secondaryState;    if (resultInfo.mergeStarts(succ,state)) {      workSet.set(succ);    }  }}  }
class C{  public void initServer(boolean log) throws Exception {  initServer(DEFAULT_PORT,DEFAULT_TIMEOUT,log);}  }
class C{  protected void finish(final boolean reset,final Player player){  if (player != null) {    final IRPZone playerZone=player.getZone();    if (playerZone.equals(zone)) {      player.teleport(entranceZone,door.getX(),door.getY() + 1,Direction.DOWN,player);    }  }  if (reset) {    removeAllTokens();    this.player=null;    moveCount=0;    if (timer != null) {      SingletonRepository.getTurnNotifier().dontNotify(timer);    }    door.open();  }}  }
class C{  public static CTag createTag(final AbstractSQLProvider provider,final CTag parent,final String name,final String description,final TagType type) throws CouldntSaveDataException {  checkArguments(provider,parent,type);  Preconditions.checkNotNull(name,"IE00556: Name argument can not be null");  Preconditions.checkNotNull(description,"IE00557: Description argument can not be null");  final CConnection connection=provider.getConnection();  final String query="insert into " + CTableNames.TAGS_TABLE + "(parent_id, name, description, type) values(?, ?, ?, ?::tag_type) returning id";  try (PreparedStatement statement=connection.getConnection().prepareStatement(query,ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY)){    if (parent.getId() == 0) {      statement.setNull(1,Types.INTEGER);    } else {      statement.setInt(1,parent.getId());    }    statement.setString(2,name);    statement.setString(3,description);    statement.setString(4,tagToString(type));    Integer id=null;    try (ResultSet resultSet=statement.executeQuery()){      while (resultSet.next()) {        if (resultSet.isFirst()) {          id=resultSet.getInt(1);        }      }    }     if (id != null) {      return new CTag(id,name,description,type,provider);    } else {      throw new IllegalStateException("IE02141: Error id can not be null");    }  } catch (  final SQLException e) {    throw new CouldntSaveDataException(e);  }}  }
class C{  protected void doneDownload(){}  }
class C{  private EspDeviceTrigger generateTaskTrigger(){  EspDeviceTrigger taskTrigger=new EspDeviceTrigger();  taskTrigger.setId(mTrigger.getId());  taskTrigger.setName(mTrigger.getName());  taskTrigger.setDimension(mTrigger.getDimension());  taskTrigger.setStreamType(mTrigger.getStreamType());  taskTrigger.setInterval(mTrigger.getInterval());  taskTrigger.setIntervalFunc(mTrigger.getIntervalFunc());  taskTrigger.setCompareType(mCompareTypeSpinner.getSelectedItemPosition());  String compareValeStr=mCompareValueET.getText().toString();  int compareValue=TextUtils.isEmpty(compareValeStr) ? 0 : Integer.parseInt(compareValeStr);  taskTrigger.setCompareValue(compareValue);  for (  TriggerRule rule : mRuleList) {    TriggerRule taskRule=new TriggerRule();    taskRule.setScope(rule.getScope());    List<String> vias=rule.getViaList();    for (    String via : vias) {      taskRule.addVia(via);    }    taskTrigger.addTriggerRule(taskRule);  }  return taskTrigger;}  }
class C{  public InverseMatch(final Match<T> aMatch){  match=aMatch;}  }
class C{  public static String[] splitFileName(String fileName){  int pos=fileName.lastIndexOf('.');  if (pos == -1) {    return new String[]{fileName};  }  return new String[]{fileName.substring(0,pos),fileName.substring(pos + 1)};}  }
class C{  public static void refuse(OutputStream out,String message) throws IOException {  refuse(out,message,REPLY_REFUSED);}  }
class C{  static double zetastatic(long n,double theta){  return zetastatic(0,n,theta,0);}  }
class C{  private void addComment(String issueId,IssueCommentsEntry issueComment) throws IOException, ServiceException {  IssueCommentsEntry commentInserted=client.insertComment(issueId,issueComment);  String commentId=client.getCommentId(commentInserted.getId());  System.out.println("Comment #" + commentId + " added in issue #"+ issueId);}  }
class C{  private static boolean isSegmentExpression(final String value){  return (value.endsWith(":") && isSegment(value.substring(0,value.length() - 1)));}  }
class C{  public boolean checkKeyCode(int keycode){  return keycode == actionKey;}  }
class C{  private void handleLinkPort(JobRecord job,DAGLinkPort linkPort,boolean isSource){  if (linkPort.getType().equals(LinkPortType.INPUT)) {    if (job.getState().equals(JobState.PENDING)) {      job.incrementPortCounter(linkPort,LinkPortType.INPUT);      job.increaseInputPortIncoming(linkPort.getId());      if (job.getInputPortIncoming(linkPort.getId()) > 1) {        if (LinkMerge.isBlocking(linkPort.getLinkMerge())) {          job.setBlocking(true);        }      }    }  } else {    job.incrementPortCounter(linkPort,LinkPortType.OUTPUT);    if (isSource) {      job.getOutputCounter(linkPort.getId()).updatedAsSource(1);    }    job.increaseOutputPortIncoming(linkPort.getId());  }  jobRecordService.update(job);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.SMALLER_OP___SMALLER_OP_1:    setSmallerOp_1(SMALLER_OP_1_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  protected void selectDefaultCandidate(){synchronized (localCandidates) {    for (    LocalCandidate cand : localCandidates) {      if ((defaultCandidate == null) || (defaultCandidate.getDefaultPreference() < cand.getDefaultPreference())) {        defaultCandidate=cand;      }    }  }}  }
class C{  protected double rndmNum(boolean useDstrWithZero){  if (useDstrWithZero) {    return sqrt3 * vals[weightedDistribution(weights)];  } else {    return vals2[weightedDistribution(weights2)];  }}  }
class C{  void reExecutePeriodic(RunnableScheduledFuture<?> task){  if (canRunInCurrentRunState(true)) {    super.getQueue().add(task);    if (!canRunInCurrentRunState(true) && remove(task))     task.cancel(false); else     ensurePrestart();  }}  }
class C{  protected byte[] wrap(byte content_type,DataStream dataStream){  byte[] fragment=dataStream.getData(MAX_DATA_LENGTH);  return wrap(content_type,fragment,0,fragment.length);}  }
class C{  private void writeLibrary(PrintStream writer,Deployable app) throws IOException {  List<String> cp=new ArrayList<String>();  if (app instanceof WAR) {    String[] appCp=((WAR)app).getExtraClasspath();    if (appCp != null) {      cp.addAll(Arrays.asList(appCp));    }  }  boolean containerLibrary=false;  LocalContainer container=getContainer();  if (container instanceof InstalledLocalContainer) {    String[] contCp=((InstalledLocalContainer)container).getExtraClasspath();    if (contCp != null) {      containerLibrary=true;    }  }  writer.print("    <classloader");  if (containerLibrary) {    writer.print(" commonLibraryRef=\"cargoLib\"");  }  writer.println('>');  if (!cp.isEmpty()) {    writer.println("      <privateLibrary>");    for (    String file : cp) {      File f=new File(file);      if (f.isDirectory()) {        writer.print("        <folder dir=\"");        writer.print(f.getAbsolutePath());        writer.println("\"/>");      } else {        writer.print("        <file name=\"");        writer.print(f.getAbsolutePath());        writer.println("\"/>");      }    }    writer.println("      </privateLibrary>");  }  writer.println("    </classloader>");}  }
class C{  @NonNull public static Animator alpha(float alpha,float duration){  return alpha(alpha,duration,null);}  }
class C{  private String filterUrl(String url){  if (!filter) {    return url;  }  try {    url=urlFilters.filter(url);  } catch (  Exception e) {    url=null;  }  return url;}  }
class C{  public ByteOrder order(){  return ByteOrder.nativeOrder();}  }
class C{  private int readContent(InputStream is){  int nread=0;  log("Read content");  String lengthString=headers.get(requestHeaders[REQ_CONTENT_LENGTH]);  int length=new Integer(lengthString).intValue();  length=readData(is,length);  return length;}  }
class C{  protected void continueOutputProcessingJoin(boolean doOutput,boolean forceUpdate){  if (InstrumentationHelper.ENABLED) {    InstrumentationHelper.get().qOutputRateConditionOutputNow();  }  if ((ExecutionPathDebugLog.isDebugEnabled) && (log.isDebugEnabled())) {    log.debug(".continueOutputProcessingJoin");  }  boolean isGenerateSynthetic=parent.getStatementResultService().isMakeSynthetic();  boolean isGenerateNatural=parent.getStatementResultService().isMakeNatural();  UniformPair<EventBean[]> newOldEvents=resultSetProcessor.processOutputLimitedJoin(deltaSet.getJoinEventsSet(),isGenerateSynthetic,parent.getOutputLimitLimitType());  if (parent.isDistinct() && newOldEvents != null) {    newOldEvents.setFirst(EventBeanUtility.getDistinctByProp(newOldEvents.getFirst(),parent.getEventBeanReader()));    newOldEvents.setSecond(EventBeanUtility.getDistinctByProp(newOldEvents.getSecond(),parent.getEventBeanReader()));  }  if ((!isGenerateSynthetic) && (!isGenerateNatural)) {    if (AuditPath.isAuditEnabled) {      OutputStrategyUtil.indicateEarlyReturn(parent.getStatementContext(),newOldEvents);    }    resetEventBatches();    if (InstrumentationHelper.ENABLED) {      InstrumentationHelper.get().aOutputRateConditionOutputNow(false);    }    return;  }  if (doOutput) {    output(forceUpdate,newOldEvents);  }  resetEventBatches();  if (InstrumentationHelper.ENABLED) {    InstrumentationHelper.get().aOutputRateConditionOutputNow(true);  }}  }
class C{  public static boolean isSameTriple(Statement st1,Statement st2){  Objects.requireNonNull(st1);  Objects.requireNonNull(st2);  return st1.getPredicate().equals(st2.getPredicate()) && st1.getSubject().equals(st2.getSubject()) && st1.getObject().equals(st2.getObject());}  }
class C{  @Override public void notificationReceived(OSNotification notification){  Log.w("OneSignalExample","notificationReceived!!!!!!");  DebuggingHelper.printObject(notification);  DebuggingHelper.printObject(notification.payload);}  }
class C{  @DSComment("constructor") @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:19.313 -0500",hash_original_method="343C63FBFE3927352CC6BAC59E679D87",hash_generated_method="F35D99CC429422B5DF255E078F6CB9B6") @DSVerified("Callback called") @DSSafe(DSCat.SAFE_OTHERS) public FutureTask(Runnable runnable,V result){  sync=new Sync(Executors.callable(runnable,result));  try {    runnable.run();  } catch (  Exception ex) {  }}  }
class C{  public static boolean save(Preferences prefs){  try {    prefs.flush();    return true;  } catch (  BackingStoreException ex) {    return false;  }}  }
class C{  @Override protected void profileUpdated(Profile profile){  super.profileUpdated(profile);  if (updateRedundancy() > 0) {    this.notifyAll();  }  this.regionAdvisor.updateBucketStatus(this.getBucket().getId(),profile.peerMemberId,false);  if (logger.isDebugEnabled()) {    logger.debug("Profile updated {} Profile : {}",getBucket().getFullPath(),profile);  }synchronized (this) {    updateServerBucketProfile();  }}  }
class C{  private View makeAndAddView(int position,int x,boolean flow,int childrenTop,boolean selected){  View child;  if (!mDataChanged) {    child=mRecycler.getActiveView(position);    if (child != null) {      setupChild(child,position,x,flow,childrenTop,selected,true);      return child;    }  }  child=obtainView(position,mIsScrap);  setupChild(child,position,x,flow,childrenTop,selected,mIsScrap[0]);  return child;}  }
class C{  public CeylonRepoManagerBuilder password(String password){  this.password=password;  return this;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  final double radToDeg=180 / Math.PI;  final double degToRad=Math.PI / 180;  double azimuth=315 * degToRad;  double altitude=45 * degToRad;  double zFactor=1;  double z;  int progress;  int[] Dy={-1,0,1,1,1,0,-1,-1};  int[] Dx={1,1,1,0,-1,-1,-1,0};  double sinTheta;  double cosTheta;  double tanSlope;  int row, col;  double fx, fy, aspect;  double gridRes, eightGridRes;  double[] N=new double[8];  double term1, term2, term3;  double outNoData=-32768;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  azimuth=(Double.parseDouble(args[2]) - 90) * degToRad;  altitude=Double.parseDouble(args[3]) * degToRad;  zFactor=Double.parseDouble(args[4]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    sinTheta=Math.sin(altitude);    cosTheta=Math.cos(altitude);    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=true;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    gridRes=inputFile.getCellSizeX();    eightGridRes=8 * gridRes;    double noData=inputFile.getNoDataValue();    if (inputFile.getXYUnits().toLowerCase().contains("deg") || inputFile.getProjection().toLowerCase().contains("geog")) {      double midLat=(inputFile.getNorth() - inputFile.getSouth()) / 2.0;      if (midLat <= 90 && midLat >= -90) {        midLat=Math.toRadians(midLat);        zFactor=1.0 / (113200 * Math.cos(midLat));      }    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.INTEGER,outNoData);    outputFile.setNoDataValue(outNoData);    outputFile.setPreferredPalette("grey.pal");    long[] histo=new long[256];    long numCells=0;    int index;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          z=z * zFactor;          for (int c=0; c < 8; c++) {            N[c]=inputFile.getValue(row + Dy[c],col + Dx[c]);            if (N[c] != noData) {              N[c]=N[c] * zFactor;            } else {              N[c]=z;            }          }          fy=(N[6] - N[4] + 2 * (N[7] - N[3]) + N[0] - N[2]) / eightGridRes;          fx=(N[2] - N[4] + 2 * (N[1] - N[5]) + N[0] - N[6]) / eightGridRes;          if (fx != 0) {            tanSlope=Math.sqrt(fx * fx + fy * fy);            aspect=(180 - Math.atan(fy / fx) * radToDeg + 90 * (fx / Math.abs(fx))) * degToRad;            term1=tanSlope / Math.sqrt(1 + tanSlope * tanSlope);            term2=sinTheta / tanSlope;            term3=cosTheta * Math.sin(azimuth - aspect);            z=term1 * (term2 - term3);          } else {            z=0.5;          }          z=(int)(z * 255);          if (z < 0) {            z=0;          }          histo[(int)z]++;          numCells++;          outputFile.setValue(row,col,z);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    double clipPercent=0.01;    if (args.length >= 6) {      clipPercent=Double.parseDouble(args[5]) / 100.0;    }    int newMin=0;    int newMax=0;    double targetCellNum=numCells * clipPercent;    long sum=0;    for (int c=0; c < 256; c++) {      sum+=histo[c];      if (sum >= targetCellNum) {        newMin=c;        break;      }    }    sum=0;    for (int c=255; c >= 0; c--) {      sum+=histo[c];      if (sum >= targetCellNum) {        newMax=c;        break;      }    }    if (newMax > newMin) {      outputFile.setDisplayMinimum((double)newMin);      outputFile.setDisplayMaximum((double)newMax);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void testBlockCommit() throws Exception {  int xacts=40;  int[] blockSizes={1,2,4};  for (  int blockSize : blockSizes) {    logger.info("Testing block commit: transactions=" + xacts + " blockSize="+ blockSize);    TungstenProperties config=helper.createDoubleQueueRuntime(40,blockSize,0);    ReplicatorRuntime runtime=new ReplicatorRuntime(config,new MockOpenReplicatorContext(),ReplicatorMonitor.getInstance());    runtime.configure();    runtime.prepare();    Pipeline pipeline=runtime.getPipeline();    InMemoryQueueStore input=(InMemoryQueueStore)pipeline.getStore("q1");    for (int i=0; i < 40; i++) {      ReplDBMSEvent event=helper.createEvent(i,"db0");      input.put(event);    }    pipeline.start(new MockEventDispatcher());    Future<ReplDBMSHeader> future=pipeline.watchForCommittedSequenceNumber(39,false);    ReplDBMSHeader matchingEvent=future.get(2,TimeUnit.SECONDS);    assertEquals("Applied sequence number matches",xacts - 1,matchingEvent.getSeqno());    Stage stage=pipeline.getStages().get(0);    TaskProgress progress=stage.getProgressTracker().getTaskProgress(0);    assertEquals("Number of block commits",xacts / blockSize,progress.getBlockCount());    double blockDifference=Math.abs(progress.getAverageBlockSize() - blockSize);    assertTrue("Average block size",blockDifference < 0.1);    pipeline.shutdown(false);    pipeline.release(runtime);  }}  }
class C{  public String toString(){  StringBuffer text=new StringBuffer();  text.append("ML ARAM classifier");  return text.toString();}  }
class C{  public void clear(){  modCount++;  Object[] tab=table;  for (int i=0; i < tab.length; i++)   tab[i]=null;  size=0;}  }
class C{  @Override public void testEmptyRepository() throws Exception {  assertEquals("Empty repository should not return any statements",0,countAllElements());  assertEquals("Named context should be empty",0,countContext1Elements());  assertEquals("Empty repository should not return any context identifiers",0,countElements(con.getContextIDs()));  assertEquals("Empty repository should not return any query results",0,countQueryResults("select * where { ?S ?P ?O }"));}  }
class C{  public ClassificationDataSet(List<DataPointPair<Integer>> data,CategoricalData predicting){  this.predicting=predicting;  numNumerVals=data.get(0).getVector().length();  categories=CategoricalData.copyOf(data.get(0).getDataPoint().getCategoricalData());  datapoints=new ArrayList<DataPoint>(data.size());  category=new IntList(data.size());  for (  DataPointPair<Integer> dpp : data) {    datapoints.add(dpp.getDataPoint());    category.add(dpp.getPair());  }  generateGenericNumericNames();}  }
class C{  public static void showFor(Block block,Point2D pos,boolean byMouse){  CircleMenu menu=new CircleMenu(block,byMouse);  double centerX=pos.getX() - (menu.prefWidth(-1) / 2);  double centerY=pos.getY() - (menu.prefHeight(-1) / 2);  menu.setLayoutX(centerX);  menu.setLayoutY(centerY);  block.getToplevel().addMenu(menu);}  }
class C{  public final boolean needClassInitMethod(){  if ((this.bits & ASTNode.ContainsAssertion) != 0)   return true;switch (kind(this.modifiers)) {case TypeDeclaration.INTERFACE_DECL:case TypeDeclaration.ANNOTATION_TYPE_DECL:    return this.fields != null;case TypeDeclaration.ENUM_DECL:  return true;}if (this.fields != null) {for (int i=this.fields.length; --i >= 0; ) {  FieldDeclaration field=this.fields[i];  if ((field.modifiers & ClassFileConstants.AccStatic) != 0)   return true;}}return false;}  }
class C{  public static boolean isEqualIgnore2chars(String BSSID1,String BSSID2){  return (BSSID1.substring(3).equals(BSSID2.substring(3)));}  }
class C{  public double[] coefficients(){  return m_coefficients;}  }
class C{  public long skip(long n){  return 0l;}  }
class C{  public void swapPrimaryFlag(ShardRouting... shards){  ensureMutable();  for (  ShardRouting shard : shards) {    if (shard.primary()) {      shard.moveFromPrimary();      if (shard.unassigned()) {        unassignedShards.primaries--;      }    } else {      shard.moveToPrimary();      if (shard.unassigned()) {        unassignedShards.primaries++;      }    }  }}  }
class C{  protected static boolean matchTokens(String[] tokens,String[] patterns){  int patNdxStart=0;  int patNdxEnd=patterns.length - 1;  int tokNdxStart=0;  int tokNdxEnd=tokens.length - 1;  while ((patNdxStart <= patNdxEnd) && (tokNdxStart <= tokNdxEnd)) {    String patDir=patterns[patNdxStart];    if (patDir.equals(PATH_MATCH)) {      break;    }    if (!match(tokens[tokNdxStart],patDir)) {      return false;    }    patNdxStart++;    tokNdxStart++;  }  if (tokNdxStart > tokNdxEnd) {    for (int i=patNdxStart; i <= patNdxEnd; i++) {      if (!patterns[i].equals(PATH_MATCH)) {        return false;      }    }    return true;  }  if (patNdxStart > patNdxEnd) {    return false;  }  while ((patNdxStart <= patNdxEnd) && (tokNdxStart <= tokNdxEnd)) {    String patDir=patterns[patNdxEnd];    if (patDir.equals(PATH_MATCH)) {      break;    }    if (!match(tokens[tokNdxEnd],patDir)) {      return false;    }    patNdxEnd--;    tokNdxEnd--;  }  if (tokNdxStart > tokNdxEnd) {    for (int i=patNdxStart; i <= patNdxEnd; i++) {      if (!patterns[i].equals(PATH_MATCH)) {        return false;      }    }    return true;  }  while ((patNdxStart != patNdxEnd) && (tokNdxStart <= tokNdxEnd)) {    int patIdxTmp=-1;    for (int i=patNdxStart + 1; i <= patNdxEnd; i++) {      if (patterns[i].equals(PATH_MATCH)) {        patIdxTmp=i;        break;      }    }    if (patIdxTmp == patNdxStart + 1) {      patNdxStart++;      continue;    }    int patLength=(patIdxTmp - patNdxStart - 1);    int strLength=(tokNdxEnd - tokNdxStart + 1);    int ndx=-1;    strLoop:     for (int i=0; i <= strLength - patLength; i++) {      for (int j=0; j < patLength; j++) {        String subPat=patterns[patNdxStart + j + 1];        String subStr=tokens[tokNdxStart + i + j];        if (!match(subStr,subPat)) {          continue strLoop;        }      }      ndx=tokNdxStart + i;      break;    }    if (ndx == -1) {      return false;    }    patNdxStart=patIdxTmp;    tokNdxStart=ndx + patLength;  }  for (int i=patNdxStart; i <= patNdxEnd; i++) {    if (!patterns[i].equals(PATH_MATCH)) {      return false;    }  }  return true;}  }
class C{  private void createDBFFile(File dbfFile,boolean destroy) throws DBFException, IOException {  if (destroy == true) {    if (dbfFile.exists()) {      try {        dbfFile.delete();      } catch (      Exception e) {      }    }  }  try (RandomAccessFile raf=new RandomAccessFile(dbfFile,"rw")){    if (dbfFile.length() == 0) {      writeHeader(raf);    } else {      readHeader();    }  } catch (  FileNotFoundException e) {    throw new DBFException("Specified file is not found. " + e.getMessage());  }}  }
class C{  public void addHandler(String target,SynchronousCallback handler){  handlers.put(target,handler);}  }
class C{  protected @SQLiteOpenOptions int determineOpenOptions(File databaseFile){  @SQLiteOpenOptions int flags=0;  File walFile=new File(databaseFile.getParent(),databaseFile.getName() + "-wal");  if (walFile.exists()) {    flags|=SQLiteDatabaseCompat.ENABLE_WRITE_AHEAD_LOGGING;  }  return flags;}  }
class C{  private void findWin(InputStream in,Locale locale){  String packageName=ResolverConfig.class.getPackage().getName();  String resPackageName=packageName + ".windows.DNSServer";  ResourceBundle res;  if (locale != null)   res=ResourceBundle.getBundle(resPackageName,locale); else   res=ResourceBundle.getBundle(resPackageName);  String host_name=res.getString("host_name");  String primary_dns_suffix=res.getString("primary_dns_suffix");  String dns_suffix=res.getString("dns_suffix");  String dns_servers=res.getString("dns_servers");  BufferedReader br=new BufferedReader(new InputStreamReader(in));  try {    List lserver=new ArrayList();    List lsearch=new ArrayList();    String line=null;    boolean readingServers=false;    boolean readingSearches=false;    while ((line=br.readLine()) != null) {      StringTokenizer st=new StringTokenizer(line);      if (!st.hasMoreTokens()) {        readingServers=false;        readingSearches=false;        continue;      }      String s=st.nextToken();      if (line.indexOf(":") != -1) {        readingServers=false;        readingSearches=false;      }      if (line.indexOf(host_name) != -1) {        while (st.hasMoreTokens())         s=st.nextToken();        Name name;        try {          name=Name.fromString(s,null);        } catch (        TextParseException e) {          continue;        }        if (name.labels() == 1)         continue;        addSearch(s,lsearch);      } else       if (line.indexOf(primary_dns_suffix) != -1) {        while (st.hasMoreTokens())         s=st.nextToken();        if (s.equals(":"))         continue;        addSearch(s,lsearch);        readingSearches=true;      } else       if (readingSearches || line.indexOf(dns_suffix) != -1) {        while (st.hasMoreTokens())         s=st.nextToken();        if (s.equals(":"))         continue;        addSearch(s,lsearch);        readingSearches=true;      } else       if (readingServers || line.indexOf(dns_servers) != -1) {        while (st.hasMoreTokens())         s=st.nextToken();        if (s.equals(":"))         continue;        addServer(s,lserver);        readingServers=true;      }    }    configureFromLists(lserver,lsearch);  } catch (  IOException e) {  }  return;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public void searchLocationsAtLocation(InstagramAPIResponseCallback<ArrayList<IGLocation>> callback,IGLocation location){  Call<IGAPIResponse> call=instagramAPIService.searchLocation(location.getLatitude(),location.getLongitude(),getSession().getAccessToken());  call.enqueue(new InstagramAPIResponseManager<>(callback,new TypeToken<ArrayList<IGLocation>>(){  }.getType()));}  }
class C{  public LocalDateTime withWeekyear(int weekyear){  return withLocalMillis(getChronology().weekyear().set(getLocalMillis(),weekyear));}  }
class C{  public void testSpanOrVersusBooleanTerm() throws Exception {  Term t1=randomTerm();  Term t2=randomTerm();  BooleanQuery.Builder q1=new BooleanQuery.Builder();  q1.add(new TermQuery(t1),Occur.SHOULD);  q1.add(new TermQuery(t2),Occur.SHOULD);  SpanQuery q2=spanQuery(new SpanOrQuery(spanQuery(new SpanTermQuery(t1)),spanQuery(new SpanTermQuery(t2))));  assertSameSet(q1.build(),q2);}  }
class C{  private void discoverVisibleStorageSystems(ProtectionSystem protectionSystem){  RecoverPointClient rp=RPHelper.getRecoverPointClient(protectionSystem);  Map<String,Set<String>> siteStorageSystems=rp.getArraysForClusters();  if (protectionSystem.getSiteVisibleStorageArrays() != null) {    protectionSystem.getSiteVisibleStorageArrays().clear();  } else {    protectionSystem.setSiteVisibleStorageArrays(new StringSetMap());  }  List<URI> storageSystemIDs=_dbClient.queryByType(StorageSystem.class,true);  if (storageSystemIDs == null) {    return;  }  List<StorageSystem> storageSystems=_dbClient.queryObject(StorageSystem.class,storageSystemIDs);  if (storageSystems == null) {    return;  }  if (siteStorageSystems != null) {    for (    Map.Entry<String,Set<String>> clusterEntry : siteStorageSystems.entrySet()) {      if (clusterEntry.getValue() == null || clusterEntry.getValue().isEmpty()) {        continue;      }      for (      String serialNumber : clusterEntry.getValue()) {        if (serialNumber == null || serialNumber.isEmpty()) {          continue;        }        Iterator<StorageSystem> activeSystemListItr=storageSystems.iterator();        StorageSystem foundStorageSystem=null;        while (activeSystemListItr.hasNext() && foundStorageSystem == null) {          StorageSystem system=activeSystemListItr.next();          if (NullColumnValueGetter.isNotNullValue(system.getSerialNumber()) && system.getSerialNumber().contains(serialNumber)) {            foundStorageSystem=system;          }        }        if (foundStorageSystem != null) {          protectionSystem.addSiteVisibleStorageArrayEntry(clusterEntry.getKey(),serialNumber);          _log.info(String.format("RP Discovery found RP cluster %s is configured to use a registered storage system: %s, %s",clusterEntry.getKey(),serialNumber,foundStorageSystem.getNativeGuid()));        } else {          _log.info(String.format("RP Discovery found RP cluster %s is configured to use a storage system: %s, but it is not configured for use in ViPR",clusterEntry.getKey(),serialNumber));        }      }    }  }  _dbClient.persistObject(protectionSystem);}  }
class C{  private void init(float[] factors){  Random mRandom=new SecureRandom();  mRandom.setSeed(-1);  mRectangle=new Rectangle(Integer.parseInt(mDevice.getProperty("display.width")),Integer.parseInt(mDevice.getProperty("display.height")));  mEventSource=new MonkeySourceRandom(mRandom,mThrottle,mRandomizeThrottle,mRectangle);  mEventSource.setVerbose(mVerbose);  for (int i=0; i < factors.length; i++) {    if (factors[i] > 0) {      mEventSource.setFactors(i,-factors[i]);    }  }  mEventSource.validate();}  }
class C{  public AsyncResult SetTriggeringAsync(RequestHeader RequestHeader,UnsignedInteger SubscriptionId,UnsignedInteger TriggeringItemId,UnsignedInteger[] LinksToAdd,UnsignedInteger... LinksToRemove){  SetTriggeringRequest req=new SetTriggeringRequest(RequestHeader,SubscriptionId,TriggeringItemId,LinksToAdd,LinksToRemove);  return channel.serviceRequestAsync(req);}  }
class C{  private static PipelineOp convertJoinGroupOrUnion(final PipelineOp left,final IGroupNode<? extends IGroupMemberNode> groupNode,final Set<IVariable<?>> doneSet,final AST2BOpContext ctx){  if (groupNode instanceof UnionNode) {    return convertUnion(left,(UnionNode)groupNode,doneSet,ctx);  } else   if (groupNode instanceof JoinGroupNode) {    return convertJoinGroup(left,(JoinGroupNode)groupNode,doneSet,ctx,true);  } else {    throw new IllegalArgumentException();  }}  }
class C{  public Builder play(Animator anim){  if (anim != null) {    mNeedsSort=true;    return new Builder(anim);  }  return null;}  }
class C{  private void confirmIds(String tableName,int startingAt,int expectedUIndexes) throws Exception {  Table table=ddl().getAIS(session()).getTable("test",tableName);  Set<Integer> expectedUTableIds=new HashSet<>();  Set<Integer> actualUTableIds=new HashSet<>();  for (  Index index : table.getIndexes()) {    actualUTableIds.add(index.getIndexId());    expectedUTableIds.add(expectedUTableIds.size() + startingAt);  }  assertEquals("table index count",expectedUIndexes,actualUTableIds.size());}  }
class C{  public boolean needMerge(){  return this.parent != null && this.children.size() < this.order1;}  }
class C{  public static int findOrCreate16ByteSizeLiteral(long literal_high,long literal_low){  final int bottom=getLowestInUseSlot();  final int top=middleOfTable & 0xFFFFFFFC;  for (int i=top; i >= bottom; i-=4) {    Offset off=slotAsOffset(i);    if ((getSlotContentsAsLong(off) == literal_low) && (getSlotContentsAsLong(off.plus(8)) == literal_high) && !numericFieldVector.get(i)&& !(numericFieldVector.get(i + 1))&& !numericFieldVector.get(i + 2)&& !(numericFieldVector.get(i + 3))&& (i != numericSlotHole)&& (i + 1 != numericSlotHole)&& (i + 2 != numericSlotHole)&& (i + 3 != numericSlotHole)) {      return slotAsOffset(i).toInt();    }  }  Offset newOff=allocateNumericSlot(16,false);  setSlotContents(newOff,literal_low);  setSlotContents(newOff.plus(8),literal_high);  return newOff.toInt();}  }
class C{  public synchronized JSONObject collect1A0001(final String userId){  final JSONObject ret=Results.falseResult();  if (!activityQueryService.is1A0001Today(userId)) {    ret.put(Keys.MSG,langPropsService.get("activityNotParticipatedLabel"));    return ret;  }  if (activityQueryService.isCollected1A0001Today(userId)) {    ret.put(Keys.MSG,langPropsService.get("activityParticipatedLabel"));    return ret;  }  final List<JSONObject> records=pointtransferQueryService.getLatestPointtransfers(userId,Pointtransfer.TRANSFER_TYPE_C_ACTIVITY_1A0001,1);  final JSONObject pointtransfer=records.get(0);  final String data=pointtransfer.optString(Pointtransfer.DATA_ID);  final String smallOrLarge=data.split("-")[1];  final int sum=pointtransfer.optInt(Pointtransfer.SUM);  String smallOrLargeResult=null;  try {    final Document doc=Jsoup.parse(new URL("http://stockpage.10jqka.com.cn/1A0001/quote/header/"),5000);    final JSONObject result=new JSONObject(doc.text());    final String price=result.optJSONObject("data").optJSONObject("1A0001").optString("10");    if (!price.contains(".")) {      smallOrLargeResult="0";    } else {      int endInt=0;      if (price.split("\\.")[1].length() > 1) {        final String end=price.substring(price.length() - 1);        endInt=Integer.valueOf(end);      }      if (0 <= endInt && endInt <= 4) {        smallOrLargeResult="0";      } else       if (5 <= endInt && endInt <= 9) {        smallOrLargeResult="1";      } else {        LOGGER.error("Activity 1A0001 collect result [" + endInt + "]");      }    }  } catch (  final Exception e) {    LOGGER.log(Level.ERROR,"Collect 1A0001 failed",e);    ret.put(Keys.MSG,langPropsService.get("activity1A0001CollectFailLabel"));    return ret;  }  if (Strings.isEmptyOrNull(smallOrLarge)) {    ret.put(Keys.MSG,langPropsService.get("activity1A0001CollectFailLabel"));    return ret;  }  ret.put(Keys.STATUS_CODE,true);  if (StringUtils.equals(smallOrLarge,smallOrLargeResult)) {    final int amount=sum * 2;    final boolean succ=null != pointtransferMgmtService.transfer(Pointtransfer.ID_C_SYS,userId,Pointtransfer.TRANSFER_TYPE_C_ACTIVITY_1A0001_COLLECT,amount,DateFormatUtils.format(new Date(),"yyyyMMdd") + "-" + smallOrLargeResult);    if (succ) {      String msg=langPropsService.get("activity1A0001CollectSucc1Label");      msg=msg.replace("{point}",String.valueOf(amount));      ret.put(Keys.MSG,msg);    } else {      ret.put(Keys.MSG,langPropsService.get("activity1A0001CollectFailLabel"));    }  } else {    ret.put(Keys.MSG,langPropsService.get("activity1A0001CollectSucc0Label"));  }  return ret;}  }
class C{  public GemFireIOException(String message,Throwable cause){  super(message,cause);}  }
class C{  protected InputMap createInputMap(){  InputMap m=new InputMap();  m.put(KeyStroke.getKeyStroke(KeyEvent.VK_DELETE,0),DeleteAction.ID);  m.put(KeyStroke.getKeyStroke(KeyEvent.VK_BACK_SPACE,0),DeleteAction.ID);  m.put(KeyStroke.getKeyStroke(KeyEvent.VK_A,0),SelectAllAction.ID);  m.put(KeyStroke.getKeyStroke(KeyEvent.VK_A,InputEvent.CTRL_DOWN_MASK),SelectAllAction.ID);  m.put(KeyStroke.getKeyStroke(KeyEvent.VK_A,InputEvent.META_DOWN_MASK),SelectAllAction.ID);  m.put(KeyStroke.getKeyStroke(KeyEvent.VK_SPACE,0),IncreaseHandleDetailLevelAction.ID);  m.put(KeyStroke.getKeyStroke(KeyEvent.VK_LEFT,0),MoveConstrainedAction.West.ID);  m.put(KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT,0),MoveConstrainedAction.East.ID);  m.put(KeyStroke.getKeyStroke(KeyEvent.VK_UP,0),MoveConstrainedAction.North.ID);  m.put(KeyStroke.getKeyStroke(KeyEvent.VK_DOWN,0),MoveConstrainedAction.South.ID);  m.put(KeyStroke.getKeyStroke(KeyEvent.VK_LEFT,InputEvent.ALT_DOWN_MASK),MoveAction.West.ID);  m.put(KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT,InputEvent.ALT_DOWN_MASK),MoveAction.East.ID);  m.put(KeyStroke.getKeyStroke(KeyEvent.VK_UP,InputEvent.ALT_DOWN_MASK),MoveAction.North.ID);  m.put(KeyStroke.getKeyStroke(KeyEvent.VK_DOWN,InputEvent.ALT_DOWN_MASK),MoveAction.South.ID);  m.put(KeyStroke.getKeyStroke(KeyEvent.VK_LEFT,InputEvent.SHIFT_DOWN_MASK),MoveAction.West.ID);  m.put(KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT,InputEvent.SHIFT_DOWN_MASK),MoveAction.East.ID);  m.put(KeyStroke.getKeyStroke(KeyEvent.VK_UP,InputEvent.SHIFT_DOWN_MASK),MoveAction.North.ID);  m.put(KeyStroke.getKeyStroke(KeyEvent.VK_DOWN,InputEvent.SHIFT_DOWN_MASK),MoveAction.South.ID);  m.put(KeyStroke.getKeyStroke(KeyEvent.VK_LEFT,InputEvent.CTRL_DOWN_MASK),MoveAction.West.ID);  m.put(KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT,InputEvent.CTRL_DOWN_MASK),MoveAction.East.ID);  m.put(KeyStroke.getKeyStroke(KeyEvent.VK_UP,InputEvent.CTRL_DOWN_MASK),MoveAction.North.ID);  m.put(KeyStroke.getKeyStroke(KeyEvent.VK_DOWN,InputEvent.CTRL_DOWN_MASK),MoveAction.South.ID);  m.put(KeyStroke.getKeyStroke(KeyEvent.VK_C,InputEvent.CTRL_DOWN_MASK),CopyAction.ID);  m.put(KeyStroke.getKeyStroke(KeyEvent.VK_C,InputEvent.META_DOWN_MASK),CopyAction.ID);  m.put(KeyStroke.getKeyStroke(KeyEvent.VK_V,InputEvent.CTRL_DOWN_MASK),PasteAction.ID);  m.put(KeyStroke.getKeyStroke(KeyEvent.VK_V,InputEvent.META_DOWN_MASK),PasteAction.ID);  m.put(KeyStroke.getKeyStroke(KeyEvent.VK_X,InputEvent.CTRL_DOWN_MASK),CutAction.ID);  m.put(KeyStroke.getKeyStroke(KeyEvent.VK_X,InputEvent.META_DOWN_MASK),CutAction.ID);  return m;}  }
class C{  public void start(){  startTime=System.currentTimeMillis();  running=true;}  }
class C{  private static Vector permuteList(Vector arr,SecureRandom rand){  Vector retval=new Vector();  Vector tmp=new Vector();  for (int i=0; i < arr.size(); i++) {    tmp.addElement(arr.elementAt(i));  }  retval.addElement(tmp.elementAt(0));  tmp.removeElementAt(0);  while (tmp.size() != 0) {    retval.insertElementAt(tmp.elementAt(0),getInt(rand,retval.size() + 1));    tmp.removeElementAt(0);  }  return retval;}  }
class C{  @Override public ContentElement parseContentElement(String src){  SpanManager sm=new SpanManager(src);  ContentElementParsingParameters cepp=new ContentElementParsingParameters();  parseImagesAndInternalLinks(sm,cepp.linkSpans,cepp.links);  LinkedList<Span> lineSpans=new LinkedList<Span>();  getLineSpans(sm,lineSpans);  sm.removeManagedList(lineSpans);  return (parseContentElement(sm,cepp,lineSpans,new ContentElement()));}  }
class C{  @PostMapping("/v1/req") public void handleREQ(@RequestBody RequestVO req){  LocationVO location=fetchLocationByCoord.apply(req.getActualLocation());  LocationGroupVO locationGroup=req.hasLocationGroupName() ? fetchLocationGroupByName.apply(req.getLocationGroupName()) : fetchLocationGroupByName.apply(location.getLocationGroupName());  Route route;  try {    TransportOrder transportOrder=fetchTransportOrder.apply(req.getBarcode());    route=Route.of(transportOrder.getRouteId());  } catch (  NotFoundException nfe) {    route=Route.NO_ROUTE;  }  ProgramResult result=executor.execute(matrix.findBy("REQ_",route,location,locationGroup),new HashMap<>(0));}  }
class C{  private void fireVmStatusChangedEvents(Set active,Set started,Set terminated){  ArrayList registered=null;  VmStatusChangeEvent ev=null;synchronized (listeners) {    registered=(ArrayList)listeners.clone();  }  for (Iterator i=registered.iterator(); i.hasNext(); ) {    HostListener l=(HostListener)i.next();    if (ev == null) {      ev=new VmStatusChangeEvent(this,active,started,terminated);    }    l.vmStatusChanged(ev);  }}  }
class C{  public static final boolean isSegmentNearPolyRegion(GeoSegment segment,GeoArray r,double near){  Geo[] s=segment.getSeg();  if (s != null && s.length == 2) {    return isSegmentNearPolyRegion(s[0],s[1],r,near);  }  return false;}  }
class C{  public boolean hasReservations(){  return !iReservations.isEmpty();}  }
class C{  public AsyncResult DeleteNodesAsync(DeleteNodesRequest req){  return channel.serviceRequestAsync(req);}  }
class C{  public synchronized static <D extends Dao<T,?>,T>D lookupDao(ConnectionSource connectionSource,DatabaseTableConfig<T> tableConfig){  if (connectionSource == null) {    throw new IllegalArgumentException("connectionSource argument cannot be null");  }  TableConfigConnectionSource key=new TableConfigConnectionSource(connectionSource,tableConfig);  Dao<?,?> dao=lookupDao(key);  if (dao == null) {    return null;  } else {    @SuppressWarnings("unchecked") D castDao=(D)dao;    return castDao;  }}  }
class C{  public void addMeasureItem(MatchRecognizeMeasureItem item){  measures.add(item);}  }
class C{  public String toString(){  return super.toString() + " (" + getKey()+ ", bundle: "+ getClassName()+ ")";}  }
class C{  public char charAt(int index){  if ((index < 0) || (index >= value.length())) {    throw new StringIndexOutOfBoundsException(index);  }  return value.charAt(index);}  }
class C{  public static double[] summaryStats(Vec xData,Vec yData){  double[] values=new double[1];  values[0]=xData.sum();  values[1]=yData.sum();  double tmp=0;  for (int i=0; i < xData.length(); i++)   tmp+=Math.pow(xData.get(i),2);  values[2]=tmp;  tmp=0;  for (int i=0; i < xData.length(); i++)   tmp+=Math.pow(yData.get(i),2);  values[3]=tmp;  tmp=0;  for (int i=0; i < xData.length(); i++)   tmp+=xData.get(i) * yData.get(i);  values[4]=tmp;  return values;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:50.946 -0500",hash_original_method="490BF814B9BDCA5834E18A73438F6256",hash_generated_method="B6FD469B2019DB97B9FE9BF5DC2F2868") public String peekNextId(){  int oldPtr=ptr;  String retval=ttoken();  savedPtr=ptr;  ptr=oldPtr;  return retval;}  }
class C{  public ParameterContentTypeResolver(Map<String,MediaType> mediaTypes){  super(mediaTypes);}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  ArrayCreation(ArrayType arrayType){  this.elementType=arrayType.getElementType();  this.componentType=arrayType.getComponentType();  this.dimensions=arrayType.getDimensions();}  }
class C{  public HashCodeBuilder append(final Object[] array){  if (array == null) {    iTotal=iTotal * iConstant;  } else {    for (    final Object element : array) {      append(element);    }  }  return this;}  }
class C{  public boolean isServerTrusted(X509Certificate[] chain){  return (true);}  }
class C{  private void testIsoYearJanuary1thSunday() throws Exception {  assertEquals(2011,getIsoYear(parse("2011-12-28")));  assertEquals(2011,getIsoYear(parse("2011-12-29")));  assertEquals(2011,getIsoYear(parse("2011-12-30")));  assertEquals(2011,getIsoYear(parse("2011-12-31")));  assertEquals(2011,getIsoYear(parse("2012-01-01")));  assertEquals(2012,getIsoYear(parse("2012-01-02")));  assertEquals(2012,getIsoYear(parse("2012-01-03")));  assertEquals(2012,getIsoYear(parse("2012-01-04")));}  }
class C{  public void testGetWarContextAndVirtualHostWhenContextAlreadySetupAndJBossWebXml() throws Exception {  JBossWAR war=new JBossWAR(getResourcePath(PACKAGE_PATH + "jboss-virtualhost.war"));  war.setContext("context");  assertEquals("testhost-testcontext",war.getContext());  assertEquals("testhost",war.getVirtualHost());}  }
class C{  public String css(String propertyName){  if (nodes.length == 0) {    return null;  }  propertyName=StringUtil.fromCamelCase(propertyName,'-');  String styleAttrValue=nodes[0].getAttribute("style");  if (styleAttrValue == null) {    return null;  }  Map<String,String> styles=createPropertiesMap(styleAttrValue,';',':');  return styles.get(propertyName);}  }
class C{  public LocalTime addCopy(int value){  return iInstant.withLocalMillis(iField.add(iInstant.getLocalMillis(),value));}  }
class C{  public void writeInt(int i,boolean append){  writeIntArray(new int[]{i},append);}  }
class C{  @POST @Path("/internal/failoverprecheck") @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public FailoverPrecheckResponse failoverPrecheck(){  log.info("Precheck for failover internally");  FailoverPrecheckResponse response=new FailoverPrecheckResponse();  response.setSite(this.siteMapper.map(drUtil.getLocalSite()));  try {    precheckForFailover();  } catch (  InternalServerErrorException e) {    log.warn("Failed to precheck failover",e);    response.setErrorMessage(e.getMessage());    response.setServiceCode(e.getServiceCode().ordinal());    return response;  }catch (  Exception e) {    log.error("Failed to precheck failover",e);    response.setErrorMessage(e.getMessage());    return response;  }  return response;}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  private void obtainHintColor(@NonNull final TypedArray typedArray){  ColorStateList colors=typedArray.getColorStateList(R.styleable.Spinner_android_textColorHint);  if (colors == null) {    TypedArray styledAttributes=getContext().getTheme().obtainStyledAttributes(new int[]{android.R.attr.textColorSecondary});    colors=ColorStateList.valueOf(styledAttributes.getColor(0,0));  }  setHintTextColor(colors);}  }
class C{  public void initialise(int k,int tau,double epsilon) throws Exception {  miCalc.setProperty(MutualInfoCalculatorMultiVariateKernel.KERNEL_WIDTH_PROP_NAME,Double.toString(epsilon));  super.initialise(k,tau);}  }
class C{  public void addFieldToTextIndex(String field){  if (fullTextIdx == null) {    fullTextIdx=new IndexDescriptor(FULLTEXT);    indexes.put(null,fullTextIdx);  }  fullTextIdx.addField(field,0,false);}  }
class C{  public void publish(String type,JSONObject data){  JSONObject json=new JSONObject();  try {    json.put("type",type);    json.put("data",data);  } catch (  JSONException e) {    e.printStackTrace();  }  this.mPubNub.publish(this.channel,json,new BasicCallback());}  }
class C{  protected void addToQuarantineQueue(NodePortTuple npt){  if (quarantineQueue.contains(npt) == false) {    quarantineQueue.add(npt);  }}  }
class C{  public SchemaQuery(String id,Map<String,String> schemaKeys){  super(id,TYPE,schemaKeys);}  }
class C{  @Override public void validate() throws IllegalStateException {  Set<String> names=new HashSet<String>();  List<Property> properties=getRepeatingExtension(Property.class);  for (  Property prop : properties) {    String name=prop.getName();    if (name == null) {      throw new IllegalStateException("Found property with null name");    }    if (names.contains(name)) {      throw new IllegalStateException("Duplicate property: " + name);    }    names.add(name);  }}  }
class C{  public float dp2px(float dp){  final float scale=getResources().getDisplayMetrics().density;  return dp * scale + 0.5f;}  }
class C{  public static Double calculateAverageBurnRate(List<Datapoint> dpList){  if (dpList.size() <= 1) {    return null;  }  Datapoint oldestDatapoint=dpList.get(0);  Datapoint latestDatapoint=dpList.get(dpList.size() - 1);  for (  Datapoint datapoint : dpList.subList(1,dpList.size() - 1)) {    if (latestDatapoint.getAverage() > oldestDatapoint.getAverage()) {      break;    }    oldestDatapoint=datapoint;  }  double averageBurnRate=(latestDatapoint.getAverage() - oldestDatapoint.getAverage()) / getDateDifference(oldestDatapoint.getTimestamp(),latestDatapoint.getTimestamp(),TimeUnit.HOURS);  averageBurnRate=(averageBurnRate < 0 ? 0 : averageBurnRate);  return averageBurnRate;}  }
class C{  public static GenericDraweeHierarchy inflateHierarchy(Context context,@Nullable AttributeSet attrs){  return inflateBuilder(context,attrs).build();}  }
class C{  public void testGetCodebasePathWithUnknownFile() throws Exception {  String filePath="/foo/bar.sth";  File fileFolder=new File(filePath);  expect(mockfs.exists(EasyMock.eq(fileFolder))).andReturn(true);  expect(mockfs.isDirectory(EasyMock.eq(fileFolder))).andReturn(false);  expect(mockfs.isFile(EasyMock.eq(fileFolder))).andReturn(true);  control.replay();  try {    creator.getCodebasePath(fileFolder);    fail("getCodebasePath() did not throw an exception for an unsupported file type.");  } catch (  CodebaseCreationError expected) {  }  control.verify();}  }
class C{  public boolean add(Object key,Object clientObject,long clientObjectSize){  long cap=this.capacity.get();  if (key == null || clientObject == null || clientObjectSize <= 0 || clientObjectSize > cap) {    String message=Logging.getMessage("BasicMemoryCache.CacheItemNotAdded");    if (clientObjectSize > cap) {      message+=" - " + Logging.getMessage("BasicMemoryCache.ItemTooLargeForCache");    }    Logging.logger().warning(message);    return false;  }  BasicMemoryCache.CacheEntry entry=new BasicMemoryCache.CacheEntry(key,clientObject,clientObjectSize);synchronized (this.lock) {    CacheEntry existing=this.entries.get(key);    if (existing != null) {      this.removeEntry(existing);    }    if (this.currentUsedCapacity.get() + clientObjectSize > cap) {      this.makeSpace(clientObjectSize);    }    this.currentUsedCapacity.addAndGet(clientObjectSize);    this.entries.putIfAbsent(entry.key,entry);  }  return true;}  }
class C{  public static void main(String[] args){  jh61b.junit.textui.runClasses(TestArrayRingBuffer.class);}  }
class C{  public boolean isMulticast(){  return multicast;}  }
class C{  private static String trimVersion(String apiVersion){  if (apiVersion == null) {    return null;  } else {    String[] versionParts=apiVersion.split("/");    return versionParts[versionParts.length - 1];  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void step_2(){}  }
class C{  public Object readMatrix(Element node) throws Exception {  weka.core.matrix.Matrix matrix;  Vector<Element> children;  Element child;  int i;  String name;  Object o;  if (DEBUG) {    trace(new Throwable(),node.getAttribute(ATT_NAME));  }  m_CurrentNode=node;  matrix=null;  children=XMLDocument.getChildTags(node);  for (i=0; i < children.size(); i++) {    child=children.get(i);    name=child.getAttribute(ATT_NAME);    if (name.equals(VAL_CELLS)) {      o=invokeReadFromXML(child);      matrix=new weka.core.matrix.Matrix((double[][])o);    }  }  return matrix;}  }
class C{  private static void processAndOrOr(Decomposition decomp,SemanticNode node,String namePathPrefix,String op){  if (!(node instanceof OpApplNode)) {    decomp.children.add(node);    decomp.namePath.add(namePathPrefix);    return;  }  OpApplNode aonode=(OpApplNode)node;  SymbolNode sym=aonode.getOperator();  UniqueString opId=null;  String opName=null;  if (sym instanceof OpDefNode) {    opId=((OpDefNode)sym).getName();    opName=opId.toString();  }  if ((opName == null) || (!opName.equals(op))) {    decomp.children.add(node);    decomp.namePath.add(namePathPrefix);    return;  }  processAndOrOr(decomp,aonode.getArgs()[0],namePathPrefix + "!1",op);  decomp.children.add(aonode.getArgs()[1]);  decomp.namePath.add(namePathPrefix + "!2");  return;}  }
class C{  public Crosshair(){  this(0.0);}  }
class C{  @Override public void reconnectFailedConnection(SearchFilter searchFilter) throws QueryException {  proxy.lock.lock();  try {    if (!searchFilter.isInitialConnection() && (isExplicitClosed() || !isMasterHostFail())) {      return;    }    currentConnectionAttempts.incrementAndGet();    resetOldsBlackListHosts();    List<HostAddress> loopAddress=new LinkedList<>(urlParser.getHostAddresses());    if (HaMode.FAILOVER.equals(mode)) {      loopAddress.removeAll(getBlacklistKeys());      Collections.shuffle(loopAddress);      List<HostAddress> blacklistShuffle=new LinkedList<>(getBlacklistKeys());      Collections.shuffle(blacklistShuffle);      loopAddress.addAll(blacklistShuffle);    } else {      loopAddress.removeAll(getBlacklistKeys());      loopAddress.addAll(getBlacklistKeys());    }    if (currentProtocol != null && !isMasterHostFail()) {      loopAddress.remove(currentProtocol.getHostAddress());    }    MasterProtocol.loop(this,loopAddress,searchFilter);    if (!isMasterHostFail()) {      FailoverLoop.removeListener(this);    }    resetMasterFailoverData();  }  finally {    proxy.lock.unlock();  }}  }
class C{  private PQueueSpliterator(PriorityQueue<E> pq,int origin,int fence,int expectedModCount){  this.pq=pq;  this.index=origin;  this.fence=fence;  this.expectedModCount=expectedModCount;}  }
class C{  protected void merge(ConstraintVertex other){  if (other.isOnConstraint) {    isOnConstraint=true;    constraint=other.constraint;  }}  }
class C{  public void writingRequestHeaders(){  if (sentRequestMillis != -1) {    throw new IllegalStateException();  }  sentRequestMillis=System.currentTimeMillis();}  }
class C{  void updateStopped(){synchronized (componentList) {    for (    WorkspaceComponent component : componentList) {      component.doStopped();    }  }}  }
class C{  public void init(RuntimeServices rs,InternalContextAdapter context,Node node) throws Exception {  super.init(rs,context,node);  outputMsgStart=rsvc.getString(RuntimeConstants.ERRORMSG_START);  outputMsgStart=outputMsgStart + " ";  outputMsgEnd=rsvc.getString(RuntimeConstants.ERRORMSG_END);  outputMsgEnd=" " + outputMsgEnd;}  }
class C{  public static ByteBuffer resizeByteBuffer(ByteBuffer buf,long size){  ByteBuffer ret=ByteBuffer.allocateDirect((int)size);  if (ret != null) {    if (null != buf) {      ret.put(buf);      ret.flip();    }  }  return ret;}  }
class C{  public void testSingleMultiPolygonManyPointsManyHolesRoundTrip() throws SQLException {  PolygonGenerator pgc=new PolygonGenerator();  pgc.setGeometryFactory(geometryFactory);  pgc.setGenerationAlgorithm(PolygonGenerator.BOX);  pgc.setNumberPoints(100);  pgc.setNumberHoles(100);  MultiGenerator pg=new MultiGenerator(pgc);  pg.setBoundingBox(new Envelope(0,10,0,10));  pg.setNumberGeometries(3);  pg.setGeometryFactory(geometryFactory);  MultiPolygon pt=(MultiPolygon)pg.create();  OraWriter ow=new OraWriter();  STRUCT st=ow.write(pt,getConnection());  OraReader or=new OraReader();  MultiPolygon pt2=(MultiPolygon)or.read(st);  assertTrue("The input MultiPolygon is not the same as the output MultiPolygon",pt.equals(pt2));}  }
class C{  public boolean isPowerOfThreeRecursive(int n){  return n > 0 && n == 1 && n % 3 == 0 && isPowerOfThreeRecursive(n / 3);}  }
class C{  public void assertLabel(String name,String text){  TestUtils.assertLabel(name,text);}  }
class C{  public void detachMirror(URI vplexURI,URI vplexVolumeURI,URI mirrorVolumeURI,URI cgURI,String stepId){  _log.info("Executing detach mirror {} of VPLEX volume {} on VPLEX {}",new Object[]{mirrorVolumeURI,vplexVolumeURI,vplexURI});  try {    Map<String,String> stepData=new HashMap<String,String>();    stepData.put(REATTACH_MIRROR,Boolean.FALSE.toString());    stepData.put(ADD_BACK_TO_CG,Boolean.FALSE.toString());    _workflowService.storeStepData(stepId,stepData);    WorkflowStepCompleter.stepExecuting(stepId);    StorageSystem vplexSystem=getDataObject(StorageSystem.class,vplexURI,_dbClient);    VPlexApiClient client=getVPlexAPIClient(_vplexApiFactory,vplexSystem,_dbClient);    _log.info("Got VPLEX API client");    Volume vplexVolume=getDataObject(Volume.class,vplexVolumeURI,_dbClient);    String vplexVolumeName=vplexVolume.getDeviceLabel();    _log.info("Got VPLEX volume");    if (cgURI != null) {      ConsistencyGroupManager consistencyGroupManager=getConsistencyGroupManager(vplexVolume);      consistencyGroupManager.removeVolumeFromCg(cgURI,vplexVolume,client,false);      stepData.put(ADD_BACK_TO_CG,Boolean.TRUE.toString());      _workflowService.storeStepData(stepId,stepData);      _log.info("Removed volumes from consistency group.");    }    Volume mirrorVolume=getDataObject(Volume.class,mirrorVolumeURI,_dbClient);    String clusterId=VPlexControllerUtils.getVPlexClusterName(_dbClient,mirrorVolume.getVirtualArray(),vplexURI);    String detachedDeviceName=client.detachMirrorFromDistributedVolume(vplexVolumeName,clusterId);    stepData.put(DETACHED_DEVICE,detachedDeviceName);    stepData.put(REATTACH_MIRROR,Boolean.TRUE.toString());    _workflowService.storeStepData(stepId,stepData);    _log.info("Detached the mirror");    updateThinProperty(client,vplexSystem,vplexVolume);    WorkflowStepCompleter.stepSucceded(stepId);    _log.info("Updated workflow step state to success");  } catch (  VPlexApiException vae) {    _log.error("Exception detaching mirror for VPLEX distributed volume" + vae.getMessage(),vae);    WorkflowStepCompleter.stepFailed(stepId,vae);  }catch (  Exception e) {    _log.error("Exception detaching mirror for VPLEX distributed volume " + e.getMessage(),e);    WorkflowStepCompleter.stepFailed(stepId,VPlexApiException.exceptions.failedDetachingVPlexVolumeMirror(mirrorVolumeURI.toString(),vplexVolumeURI.toString(),e));  }}  }
class C{  public static boolean isIPv4Address(String input){  return IPV4_PATTERN.matcher(input).matches();}  }
class C{  public synchronized void reset(){  mBufVertices.position(0);  mBufColors.position(0);  if (DRAW_TEXTURE) {    mBufTexCoords.position(0);  }  for (int i=0; i < 4; ++i) {    Vertex tmp=mArrTempVertices.get(0);    tmp.set(mRectangle[i]);    if (mFlipTexture) {      tmp.mTexX*=mTextureRectBack.right;      tmp.mTexY*=mTextureRectBack.bottom;      tmp.mColor=mTexturePage.getColor(CurlPage.SIDE_BACK);    } else {      tmp.mTexX*=mTextureRectFront.right;      tmp.mTexY*=mTextureRectFront.bottom;      tmp.mColor=mTexturePage.getColor(CurlPage.SIDE_FRONT);    }    addVertex(tmp);  }  mVerticesCountFront=4;  mVerticesCountBack=0;  mBufVertices.position(0);  mBufColors.position(0);  if (DRAW_TEXTURE) {    mBufTexCoords.position(0);  }  mDropShadowCount=mSelfShadowCount=0;}  }
class C{  public S_DirectAssignment createS_DirectAssignment(){  S_DirectAssignmentImpl s_DirectAssignment=new S_DirectAssignmentImpl();  return s_DirectAssignment;}  }
class C{  public void finish(){  if (mAccountAuthenticatorResponse != null) {    if (mResultBundle != null) {      mAccountAuthenticatorResponse.onResult(mResultBundle);    } else {      mAccountAuthenticatorResponse.onError(AccountManager.ERROR_CODE_CANCELED,"canceled");    }    mAccountAuthenticatorResponse=null;  }  super.finish();}  }
class C{  public EvaluationException(Throwable cause){  super(cause);}  }
class C{  public void writeFile(String name,String mimeType,String fileName,byte[] data) throws IOException {  if (data == null) {    throw new IllegalArgumentException("Data cannot be null.");  }  if (fileName == null || fileName.isEmpty()) {    throw new IllegalArgumentException("File name cannot be null or empty.");  }  out.writeBytes(PREFIX);  out.writeBytes(boundary);  out.writeBytes(NEWLINE);  out.writeBytes("Content-Disposition: form-data; name=\"" + name + "\"; filename=\""+ fileName+ "\"");  out.writeBytes(NEWLINE);  if (mimeType != null) {    out.writeBytes("Content-Type: " + mimeType);    out.writeBytes(NEWLINE);  }  out.writeBytes(NEWLINE);  out.write(data,0,data.length);  out.writeBytes(NEWLINE);  out.flush();}  }
class C{  public Throwable forEachSuppress(Consumer<? super T> consumer){  RuntimeException ex=null;  int count=0;  for (  T k : keys) {    if (k != null) {      try {        consumer.accept(k);      } catch (      Throwable e) {        if (ex == null) {          ex=new RuntimeException("Multiple exceptions");        }        count++;        ex.addSuppressed(e);      }    }  }  if (count == 1) {    return ex.getSuppressed()[0];  }  return ex;}  }
class C{  private void rotateCamera(){  rotate.fromAngleNormalAxis(azimuth,Vector3.UNIT_Z);  workRot.fromAngleNormalAxis(elevation,Vector3.UNIT_X);  rotate.multiplyLocal(workRot);  camera.setFrame(camera.getLocation(),rotate);  updateFromCamera();  updateGeometricState(0);  changed.set(true);  Dert.getMainWindow().updateCompass(azimuth);}  }
class C{  public void slashSlashComments(boolean flag){  slashSlashComments=flag;}  }
class C{  public static void writeActionsFromString(OFFlowMod.Builder fmb,String inst,Logger log){  if (fmb.getVersion().compareTo(OFVersion.OF_11) < 0) {    log.error("Write Actions Instruction not supported in OpenFlow 1.0");    return;  }  OFFlowMod.Builder tmpFmb=OFFactories.getFactory(fmb.getVersion()).buildFlowModify();  OFInstructionWriteActions.Builder ib=OFFactories.getFactory(fmb.getVersion()).instructions().buildWriteActions();  ActionUtils.fromString(tmpFmb,inst,log);  ib.setActions(tmpFmb.getActions());  log.debug("Appending WriteActions instruction: {}",ib.build());  appendInstruction(fmb,ib.build());  log.debug("All instructions after append: {}",fmb.getInstructions());}  }
class C{  private String indent(int level){  final String s="...";  if (level == 0)   return "";  StringBuilder sb=new StringBuilder(level * s.length());  for (int i=0; i < level; i++) {    sb.append(s);  }  return s.toString();}  }
class C{  @Override public void close(){  inner.close();}  }
class C{  @Override public void run(){  amIActive=true;  boolean image1Bool=false;  boolean image2Bool=false;  double constant1=0;  double constant2=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  String inputHeader1=args[0];  File file=new File(inputHeader1);  image1Bool=file.exists();  if (image1Bool) {    constant1=-1;  } else {    constant1=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String inputHeader2=args[1];  file=new File(inputHeader2);  image2Bool=file.exists();  if (image2Bool) {    constant2=-1;  } else {    constant2=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    if (image1Bool && image2Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData1=inputFile1.getNoDataValue();      double noData2=inputFile2.getNoDataValue();      if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {        showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");        return;      }      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData1);      outputFile.setPreferredPalette(inputFile1.getPreferredPalette());      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          z2=data2[col];          if ((z1 != noData1) && (z2 != noData2)) {            if (z2 != 0) {              outputFile.setValue(row,col,(int)z1 / (int)z2);            }          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      inputFile2.close();      outputFile.close();    } else     if (image1Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData=inputFile1.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData);      outputFile.setPreferredPalette(inputFile1.getPreferredPalette());      int const2=(int)constant2;      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          if (z1 != noData && constant2 != 0) {            outputFile.setValue(row,col,(int)z1 / const2);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      outputFile.close();    } else     if (image2Bool) {      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile2.getNumberRows();      int cols=inputFile2.getNumberColumns();      double noData=inputFile2.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader2,WhiteboxRaster.DataType.FLOAT,noData);      outputFile.setPreferredPalette(inputFile2.getPreferredPalette());      int const1=(int)constant1;      for (row=0; row < rows; row++) {        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z2=data2[col];          if (z2 != noData && z2 != 0) {            outputFile.setValue(row,col,const1 / (int)z2);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile2.close();      outputFile.close();    } else {      showFeedback("At least one of the inputs must be a raster image.");    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public SusiSkills(){  super();}  }
class C{  @Path("{" + PARAM_NAME + "}"+ "/annotations") @ApiOperation(hidden=true,value="Annotation API") @POST public AnnotationPK addAnnotation(@PathParam(PARAM_NAME) String projectId,Annotation annotation){  return delegate.addAnnotation(userContext,projectId,annotation);}  }
class C{  public BCSAPIMessage.TX toBCSAPIMessage(){  BCSAPIMessage.TX.Builder builder=BCSAPIMessage.TX.newBuilder();  builder.setLocktime(getLockTime());  builder.setVersion(getVersion());  for (  TransactionInput i : getInputs()) {    builder.addInputs(i.toProtobuf());  }  for (  TransactionOutput o : getOutputs()) {    builder.addOutputs(o.toProtobuf());  }  return builder.build();}  }
class C{  @Override public int clampViewPositionVertical(View child,int top,int dy){  int topBound=0;  int bottomBound=0;switch (draggerView.getDragPosition()) {case TOP:    if (top > 0) {      topBound=draggerView.getPaddingTop();      bottomBound=(int)draggerListener.dragVerticalDragRange();    }  break;case BOTTOM:if (top < 0) {  topBound=(int)-draggerListener.dragVerticalDragRange();  bottomBound=draggerView.getPaddingTop();}break;default :break;}return Math.min(Math.max(top,topBound),bottomBound);}  }
class C{  public void loadMarkdownFile(String url,String cssFileUrl){  new LoadMarkdownUrlTask().execute(url,cssFileUrl);}  }
class C{  private static boolean isOneNanp(String dialStr){  boolean retVal=false;  if (dialStr != null) {    String newDialStr=dialStr.substring(1);    if ((dialStr.charAt(0) == '1') && isNanp(newDialStr)) {      retVal=true;    }  } else {    Rlog.e("isOneNanp: null dialStr passed in",dialStr);  }  return retVal;}  }
class C{  public ViewPropertyAnimator translationY(float value){  animateProperty(TRANSLATION_Y,value);  return this;}  }
class C{  private boolean journalRebuildRequired(){  final int REDUNDANT_OP_COMPACT_THRESHOLD=2000;  return redundantOpCount >= REDUNDANT_OP_COMPACT_THRESHOLD && redundantOpCount >= lruEntries.size();}  }
class C{  public void debugFine(CharSequence message){  log(Level.FINE,message);}  }
class C{  private void validateProtectionCopies(Set<VirtualPoolProtectionVirtualArraySettingsParam> copies,DbClient dbClient){  if (copies != null) {    for (    VirtualPoolProtectionVirtualArraySettingsParam settingsParam : copies) {      if (settingsParam.getVarray() != null && !settingsParam.getVarray().toString().isEmpty()) {        ArgValidator.checkUri(settingsParam.getVarray());        VirtualArray neighborhood=dbClient.queryObject(VirtualArray.class,settingsParam.getVarray());        ArgValidator.checkEntity(neighborhood,settingsParam.getVarray(),false);      } else {        throw APIException.badRequests.protectionVirtualPoolArrayMissing();      }      if (settingsParam.getVpool() != null && !String.valueOf(settingsParam.getVpool()).isEmpty()) {        ArgValidator.checkUri(settingsParam.getVpool());        VirtualPool protectionCopyVPool=dbClient.queryObject(VirtualPool.class,settingsParam.getVpool());        ArgValidator.checkEntity(protectionCopyVPool,settingsParam.getVpool(),false);      }      if (settingsParam.getCopyPolicy() != null && settingsParam.getCopyPolicy().getJournalSize() != null) {        if (!isParsableToDouble(settingsParam.getCopyPolicy().getJournalSize()) && !settingsParam.getCopyPolicy().getJournalSize().matches(JOURNAL_REGEX_1) && !settingsParam.getCopyPolicy().getJournalSize().matches(JOURNAL_REGEX_2)&& !settingsParam.getCopyPolicy().getJournalSize().equals(JOURNAL_MIN)) {          throw APIException.badRequests.protectionVirtualPoolJournalSizeInvalid("copy",settingsParam.getCopyPolicy().getJournalSize());        }      }    }  }}  }
class C{  public void test_SelectAgregateFunctions() throws SQLException {  String selectCount="SELECT count(onum) as count FROM " + DatabaseCreator.ORDERS_TABLE;  String selectSum="SELECT sum(onum) as sum FROM " + DatabaseCreator.ORDERS_TABLE;  String selectAvg="SELECT avg(onum) as avg FROM " + DatabaseCreator.ORDERS_TABLE;  String selectMax="SELECT max(onum) as max FROM " + DatabaseCreator.ORDERS_TABLE;  String selectMin="SELECT min(onum) as min FROM " + DatabaseCreator.ORDERS_TABLE;  func("count",selectCount,10);  func("sum",selectSum,30062);  func("avg",selectAvg,3006);  func("max",selectMax,3011);  func("min",selectMin,3001);}  }
class C{  public Path[] pruneJoinPaths(final Path[] a,final Map<PathIds,EdgeSample> edgeSamples){  final boolean neverPruneUnderflow=true;  int maxPathLen=0;  for (  Path p : a) {    if (p.vertices.length > maxPathLen) {      maxPathLen=p.vertices.length;    }  }  final StringBuilder sb=new StringBuilder();  final Formatter f=new Formatter(sb);  final Set<Path> pruned=new LinkedHashSet<Path>();  for (int i=0; i < a.length; i++) {    final Path Pi=a[i];    if (Pi.edgeSample == null)     throw new RuntimeException("Not sampled: " + Pi);    if (Pi.vertices.length < maxPathLen) {      pruned.add(Pi);      continue;    }    if (pruned.contains(Pi)) {      continue;    }    if (neverPruneUnderflow && Pi.edgeSample.estimateEnum == EstimateEnum.Underflow) {      continue;    }    for (int j=0; j < a.length; j++) {      if (i == j)       continue;      final Path Pj=a[j];      if (Pj.edgeSample == null)       throw new RuntimeException("Not sampled: " + Pj);      if (pruned.contains(Pj)) {        continue;      }      final boolean isPiSuperSet=Pi.isUnorderedVariant(Pj);      if (!isPiSuperSet) {        continue;      }      final long costPi=Pi.sumEstCost;      final long costPj=Pj.sumEstCost;      final boolean lte=costPi <= costPj;      List<Integer> prunedByThisPath=null;      if (lte) {        prunedByThisPath=new LinkedList<Integer>();        if (pruned.add(Pj))         prunedByThisPath.add(j);        for (int k=0; k < a.length; k++) {          final Path x=a[k];          if (x.beginsWith(Pj)) {            if (pruned.add(x))             prunedByThisPath.add(k);          }        }      }      if (log.isDebugEnabled()) {        f.format("Comparing: P[%2d] with P[%2d] : %10d %2s %10d %s",i,j,costPi,(lte ? "<=" : ">"),costPj,lte ? " *** pruned " + prunedByThisPath : "");        log.debug(sb);        sb.setLength(0);      }    }  }  final Path[] b;{    final Set<Path> keep=new LinkedHashSet<Path>();    for (    Path p : a) {      if (pruned.contains(p))       continue;      keep.add(p);    }    b=keep.toArray(new Path[keep.size()]);  }{    final Iterator<Map.Entry<PathIds,EdgeSample>> itr=edgeSamples.entrySet().iterator();    int ncleared=0;    while (itr.hasNext()) {      final Map.Entry<PathIds,EdgeSample> e=itr.next();      final PathIds ids=e.getKey();      boolean found=false;      for (      Path p : b) {        if (p.beginsWith(ids.ids)) {          found=true;          break;        }      }      if (!found) {        if (log.isTraceEnabled())         log.trace("Clearing sample: " + ids);        e.getValue().releaseSample();        itr.remove();        ncleared++;      }    }    if (ncleared > 0 && log.isDebugEnabled())     log.debug("Cleared " + ncleared + " samples");  }  return b;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MLookupInfo[").append(KeyColumn).append("-Direct=").append(QueryDirect).append("]");  return sb.toString();}  }
class C{  public void start(){  start(clusterConfig.getTimeout());}  }
class C{  private GrantEntry parseGrantEntry() throws ParsingException, IOException {  GrantEntry e=new GrantEntry();  LinkedList<PrincipalEntry> principals=null;  boolean ignoreEntry=false;  match("grant");  while (!peek("{")) {    if (peekAndMatch("Codebase")) {      if (e.codeBase != null)       throw new ParsingException(st.lineno(),ResourcesMgr.getString("multiple.Codebase.expressions"));      e.codeBase=match("quoted string");      peekAndMatch(",");    } else     if (peekAndMatch("SignedBy")) {      if (e.signedBy != null)       throw new ParsingException(st.lineno(),ResourcesMgr.getString("multiple.SignedBy.expressions"));      e.signedBy=match("quoted string");      StringTokenizer aliases=new StringTokenizer(e.signedBy,",",true);      int actr=0;      int cctr=0;      while (aliases.hasMoreTokens()) {        String alias=aliases.nextToken().trim();        if (alias.equals(","))         cctr++; else         if (alias.length() > 0)         actr++;      }      if (actr <= cctr)       throw new ParsingException(st.lineno(),ResourcesMgr.getString("SignedBy.has.empty.alias"));      peekAndMatch(",");    } else     if (peekAndMatch("Principal")) {      if (principals == null) {        principals=new LinkedList<>();      }      String principalClass;      String principalName;      if (peek("\"")) {        principalClass=PrincipalEntry.REPLACE_NAME;        principalName=match("principal type");      } else {        if (peek("*")) {          match("*");          principalClass=PrincipalEntry.WILDCARD_CLASS;        } else {          principalClass=match("principal type");        }        if (peek("*")) {          match("*");          principalName=PrincipalEntry.WILDCARD_NAME;        } else {          principalName=match("quoted string");        }        if (principalClass.equals(PrincipalEntry.WILDCARD_CLASS) && !principalName.equals(PrincipalEntry.WILDCARD_NAME)) {          if (debug != null) {            debug.println("disallowing principal that " + "has WILDCARD class but no WILDCARD name");          }          throw new ParsingException(st.lineno(),ResourcesMgr.getString("can.not.specify.Principal.with.a.wildcard.class.without.a.wildcard.name"));        }      }      try {        principalName=expand(principalName);        if (principalClass.equals("javax.security.auth.x500.X500Principal") && !principalName.equals(PrincipalEntry.WILDCARD_NAME)) {          X500Principal p=new X500Principal((new X500Principal(principalName)).toString());          principalName=p.getName();        }        principals.add(new PrincipalEntry(principalClass,principalName));      } catch (      PropertyExpander.ExpandException peee) {        if (debug != null) {          debug.println("principal name expansion failed: " + principalName);        }        ignoreEntry=true;      }      peekAndMatch(",");    } else {      throw new ParsingException(st.lineno(),ResourcesMgr.getString("expected.codeBase.or.SignedBy.or.Principal"));    }  }  if (principals != null)   e.principals=principals;  match("{");  while (!peek("}")) {    if (peek("Permission")) {      try {        PermissionEntry pe=parsePermissionEntry();        e.add(pe);      } catch (      PropertyExpander.ExpandException peee) {        if (debug != null) {          debug.println(peee.toString());        }        skipEntry();      }      match(";");    } else {      throw new ParsingException(st.lineno(),ResourcesMgr.getString("expected.permission.entry"));    }  }  match("}");  try {    if (e.signedBy != null)     e.signedBy=expand(e.signedBy);    if (e.codeBase != null) {      if (e.codeBase.equals(OLD_EXTDIRS_EXPANSION)) {        e.codeBase=EXTDIRS_EXPANSION;      }      int es;      if ((es=e.codeBase.indexOf(EXTDIRS_EXPANSION)) < 0) {        e.codeBase=expand(e.codeBase,true).replace(File.separatorChar,'/');      } else {        String[] extDirs=parseExtDirs(e.codeBase,es);        if (extDirs != null && extDirs.length > 0) {          for (int i=0; i < extDirs.length; i++) {            GrantEntry newGe=(GrantEntry)e.clone();            newGe.codeBase=extDirs[i];            add(newGe);            if (debug != null) {              debug.println("creating policy entry for " + "expanded java.ext.dirs path:\n\t\t" + extDirs[i]);            }          }        }        ignoreEntry=true;      }    }  } catch (  PropertyExpander.ExpandException peee) {    if (debug != null) {      debug.println(peee.toString());    }    return null;  }  return (ignoreEntry == true) ? null : e;}  }
class C{  public Class<? extends DefaultResourceUIServiceProvider> bindResourceUIServiceProvider(){  return OutputFolderAwareResourceServiceProvider.class;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:30.278 -0500",hash_original_method="BBF1769C3A61AA8AD42E4ABB1FF8D517",hash_generated_method="CF4196B29E5BFE269824F26B0BCEAE9C") public static long reverseBytes(long v){  v=((v >>> 8) & 0x00FF00FF00FF00FFL) | ((v & 0x00FF00FF00FF00FFL) << 8);  v=((v >>> 16) & 0x0000FFFF0000FFFFL) | ((v & 0x0000FFFF0000FFFFL) << 16);  return ((v >>> 32)) | ((v) << 32);}  }
class C{  private void writeObject(ObjectOutputStream oos) throws IOException {  oos.defaultWriteObject();  boolean writeFont=(f != OMText.DEFAULT_FONT);  oos.writeBoolean(writeFont);  if (writeFont) {    oos.writeObject(f.getName());    oos.writeInt(f.getSize());    oos.writeInt(f.getStyle());  }  writeStroke(oos,stroke,OMGraphic.BASIC_STROKE);  writeStroke(oos,textMatteStroke,DEFAULT_TEXT_MATTE_STROKE);}  }
class C{  @Override protected void doAction(){  try {    KeyStoreHistory history=kseFrame.getActiveKeyStoreHistory();    KeyStoreState currentState=history.getCurrentState();    String alias=kseFrame.getSelectedEntryAlias();    Password password=getEntryPassword(alias,currentState);    if (password == null) {      return;    }    KeyStoreState newState=currentState.createBasisForNextState(this);    KeyStore keyStore=newState.getKeyStore();    KeyStoreType keyStoreType=KeyStoreType.resolveJce(keyStore.getType());    Key privateKey=keyStore.getKey(alias,password.toCharArray());    X509Certificate[] certs=openCaReply();    if (certs == null || certs.length == 0) {      return;    }    certs=X509CertUtil.orderX509CertChain(certs);    X509Certificate[] exitingEntryCerts=X509CertUtil.orderX509CertChain(X509CertUtil.convertCertificates(keyStore.getCertificateChain(alias)));    if (!exitingEntryCerts[0].getPublicKey().equals(certs[0].getPublicKey())) {      JOptionPane.showMessageDialog(frame,res.getString("ImportCaReplyFromClipboardAction.NoMatchPubKeyCaReply.message"),res.getString("ImportCaReplyFromClipboardAction.ImportCaReply.Title"),JOptionPane.WARNING_MESSAGE);      return;    }    X509Certificate[] newCertChain=null;    if (!applicationSettings.getEnableImportCaReplyTrustCheck()) {      newCertChain=certs;    } else {      KeyStore caCertificates=getCaCertificates();      KeyStore windowsTrustedRootCertificates=getWindowsTrustedRootCertificates();      if (certs.length > 1) {        X509Certificate rootCert=certs[certs.length - 1];        String matchAlias=null;        if (caCertificates != null) {          matchAlias=X509CertUtil.matchCertificate(caCertificates,rootCert);        }        if (windowsTrustedRootCertificates != null && matchAlias == null) {          matchAlias=X509CertUtil.matchCertificate(windowsTrustedRootCertificates,rootCert);        }        if (matchAlias == null) {          matchAlias=X509CertUtil.matchCertificate(keyStore,rootCert);        }        if (matchAlias == null) {          JOptionPane.showMessageDialog(frame,res.getString("ImportCaReplyFromClipboardAction.NoMatchRootCertCaReplyConfirm.message"),res.getString("ImportCaReplyFromClipboardAction.ImportCaReply.Title"),JOptionPane.INFORMATION_MESSAGE);          DViewCertificate dViewCertificate=new DViewCertificate(frame,MessageFormat.format(res.getString("ImportCaReplyFromClipboardAction.CertDetailsFile.Title"),"Clipboard"),new X509Certificate[]{rootCert},null,DViewCertificate.NONE);          dViewCertificate.setLocationRelativeTo(frame);          dViewCertificate.setVisible(true);          int selected=JOptionPane.showConfirmDialog(frame,res.getString("ImportCaReplyFromClipboardAction.AcceptCaReply.message"),res.getString("ImportCaReplyFromClipboardAction.ImportCaReply.Title"),JOptionPane.YES_NO_OPTION);          if (selected != JOptionPane.YES_OPTION) {            return;          }          newCertChain=certs;        } else {          newCertChain=certs;        }      } else {        ArrayList<KeyStore> compKeyStores=new ArrayList<KeyStore>();        compKeyStores.add(keyStore);        if (caCertificates != null) {          compKeyStores.add(caCertificates);        }        if (windowsTrustedRootCertificates != null) {          compKeyStores.add(windowsTrustedRootCertificates);        }        X509Certificate[] trustChain=X509CertUtil.establishTrust(certs[0],compKeyStores.toArray(new KeyStore[compKeyStores.size()]));        if (trustChain != null) {          newCertChain=trustChain;        } else {          JOptionPane.showMessageDialog(frame,res.getString("ImportCaReplyFromClipboardAction.NoTrustCaReply.message"),res.getString("ImportCaReplyFromClipboardAction.ImportCaReply.Title"),JOptionPane.WARNING_MESSAGE);          return;        }      }    }    if (keyStoreType.isFileBased()) {      keyStore.deleteEntry(alias);      keyStore.setKeyEntry(alias,privateKey,password.toCharArray(),newCertChain);    } else {      keyStore.setKeyEntry(alias,privateKey,password.toCharArray(),newCertChain);    }    currentState.append(newState);    kseFrame.updateControls(true);    JOptionPane.showMessageDialog(frame,res.getString("ImportCaReplyFromClipboardAction.ImportCaReplySuccessful.message"),res.getString("ImportCaReplyFromClipboardAction.ImportCaReply.Title"),JOptionPane.INFORMATION_MESSAGE);  } catch (  Exception ex) {    DError.displayError(frame,ex);  }}  }
class C{  @RpcMethod public void createDisks(String reservation,AsyncMethodCallback<Host.AsyncClient.create_disks_call> handler) throws RpcException {  ensureClient();  CreateDisksRequest createDisksRequest=new CreateDisksRequest(reservation);  clientProxy.setTimeout(CREATE_DISKS_TIMEOUT_MS);  logger.info("create_disks reservation {}, target {}, request {}",reservation,getHostIp(),createDisksRequest);  try {    clientProxy.create_disks(createDisksRequest,handler);  } catch (  TException e) {    throw new RpcException(e.getMessage());  }}  }
class C{  public boolean isAsync(){  return this.async;}  }
class C{  public void prepareForConfigurationChange(){  mCardView=null;  for (  CardAction action : mCardActions) {    action.actionView=null;  }  mCardProgress.progressView=null;}  }
class C{  public ExtensionFileFilterWithClass(String extension,String description,String classname){  super(extension,description);  m_Classname=classname;}  }
class C{  public void clear(){  this.size=0;}  }
class C{  public TryAgainException(String message){  super(message);}  }
class C{  public ExecutionResult execute(TestCase tc,int timeout){  Scope scope=new Scope();  ExecutionResult result=execute(tc,scope,timeout);  if (Properties.RESET_STATIC_FIELDS) {    logger.debug("Resetting classes after execution");    ClassReInitializer.getInstance().reInitializeClassesAfterTestExecution(tc,result);  }  return result;}  }
class C{  private void verifyVolumeResults() throws Exception {  s_logger.info("Verifying updated full copy results for FullCopyVolumeDetachedStateMigrationTest.");  for (  URI sourceURI : _sourceFullCopyMap.keySet()) {    Volume source=_dbClient.queryObject(Volume.class,sourceURI);    URI fullCopyURI=_sourceFullCopyMap.get(sourceURI);    Volume fullCopy=_dbClient.queryObject(Volume.class,fullCopyURI);    Assert.assertNotNull("replicaState shouldn't be null",fullCopy.getReplicaState());    Assert.assertEquals("replica state should be DETACHED",ReplicationState.DETACHED.name(),fullCopy.getReplicaState());    Assert.assertEquals("associated source should be null",fullCopy.getAssociatedSourceVolume(),NullColumnValueGetter.getNullURI());    StringSet fullCopies=source.getFullCopies();    if (fullCopies != null) {      Assert.assertFalse("full copies should not contain the clone",fullCopies.contains(fullCopyURI.toString()));    }  }}  }
class C{  public boolean isSet(final String name){  return isMapped(name) && mapping.get(name).intValue() < values.length;}  }
class C{  public int update(Reminder reminder){  return updateTableRow(Reminder.uri,reminder);}  }
class C{  public static BooleanValueStyle createInlineStyle(){  BooleanValueStyle result=NotationFactory.eINSTANCE.createBooleanValueStyle();  result.setName(INLINE_STYLE);  result.setBooleanValue(true);  return result;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:08.680 -0500",hash_original_method="4B0B8276597CEA521E1E338B4AADD471",hash_generated_method="9283ED1C2044F4178961436920D7FF12") static ImageDescriptor parse(byte[] rawData,int valueIndex){  ImageDescriptor d=new ImageDescriptor();  try {    d.width=rawData[valueIndex++] & 0xff;    d.height=rawData[valueIndex++] & 0xff;    d.codingScheme=rawData[valueIndex++] & 0xff;    d.imageId=(rawData[valueIndex++] & 0xff) << 8;    d.imageId|=rawData[valueIndex++] & 0xff;    d.highOffset=(rawData[valueIndex++] & 0xff);    d.lowOffset=rawData[valueIndex++] & 0xff;    d.length=((rawData[valueIndex++] & 0xff) << 8 | (rawData[valueIndex++] & 0xff));  } catch (  IndexOutOfBoundsException e) {    CatLog.d("ImageDescripter","parse; failed parsing image descriptor");    d=null;  }  return d;}  }
class C{  public RenderContext(AffineTransform usr2dev,Shape aoi){  this(usr2dev,aoi,null);}  }
class C{  public void onEvent(CqEvent aCqEvent){}  }
class C{  public void captureScreenshot(){  String outputPath=PropertyLoader.loadProperty("output.path").get();  String screenShotPath=outputPath + "/ScreenShots/";  String fileName=generateFileName() + ".jpg";  File scrFile=((TakesScreenshot)(this.appiumDriver)).getScreenshotAs(OutputType.FILE);  try {    FileUtils.copyFile(scrFile,new File(screenShotPath + fileName));    Reporter.log("<br> Module name: " + getCurrentTestClassName() + "<br>");    Reporter.log(" Refer to <a href=\"ScreenShots/" + fileName + "\" target = \"_blank\"><img src=\"ScreenShots/"+ fileName+ "\" width=\"50\" height=\"50\"></a><br>");  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  @Inline @Override public final short shortRead(ObjectReference objref,Word offset,Word location,int mode){  return Magic.getShortAtOffset(objref.toObject(),offset.toOffset());}  }
class C{  public void receiveResultqueryCatalog(com.emc.storageos.vasa.VasaServiceStub.QueryCatalogResponse result){}  }
class C{  private LocalRes(){}  }
class C{  private boolean containsOmni(byte[] buffer){  int index;  for (index=buffer.length - 4; index >= 0; index--) {    if ((0x6f == buffer[index]) && (0x6d == buffer[index + 1]) && (0x6e == buffer[index + 2])&& (0x69 == buffer[index + 3])) {      return true;    }  }  return false;}  }
class C{  protected void runDownload() throws Exception {  runDownload(getTestDownloaderInputManifestDto(),LOCAL_TEMP_PATH_OUTPUT.toString(),DownloaderController.MIN_THREADS,null);}  }
class C{  @SuppressWarnings("unchecked") private int decodePrefix(Sequence<TK> source,List<ConcreteRule<TK,FV>> ruleList,InputProperties sourceInputProperties,Sequence<TK> prefix,Scorer<FV> scorer,List<Beam<Derivation<TK,FV>>> beams,int sourceInputId,OutputSpace<TK,FV> outputSpace,RecombinationHistory<Derivation<TK,FV>> recombinationHistory,TimeKeeper timer){  if (source == null || source.size() == 0 || prefix == null || prefix.size() == 0)   return 0;  boolean printDebug=false;  boolean allowIncompletePrefix=false;  if (sourceInputProperties.containsKey(InputProperty.AllowIncompletePrefix)) {    allowIncompletePrefix=(boolean)sourceInputProperties.get(InputProperty.AllowIncompletePrefix);  }  int ruleQueryLimit=-1;  final RuleGrid<TK,FV> prefixGrid=new RuleGrid<>(ruleList,source,prefix,ruleQueryLimit,allowIncompletePrefix);  SyntheticRules.augmentPrefixRuleGrid(prefixGrid,prefix,sourceInputId,source,this,sourceInputProperties,prefixAlignCompounds);  timer.mark("PrefixAug");  int prefixLength=prefix.size();  final List<Beam<Derivation<TK,FV>>> tgtBeams=new ArrayList<>(prefixLength + 1);  BundleBeam<TK,FV> nullBeam=new BundleBeam<>(beamCapacity,filter,prefixGrid,recombinationHistory,maxDistortion,0,true);  for (  Derivation<TK,FV> d : beams.get(0))   nullBeam.put(d,false);  tgtBeams.add(nullBeam);  for (int i=1; i <= prefixLength; ++i) {    tgtBeams.add(new BundleBeam<>(beamCapacity,filter,prefixGrid,recombinationHistory,maxDistortion,i,true));  }  final int maxTgtPhraseLength=prefixGrid.maxTargetLength();  int totalHypothesesGenerated=1, numRecombined=0, numPruned=0;  int lastRecoveredCardinality=0;  for (int i=1; i <= prefixLength; ++i) {    int rootBeam=0;    int minCoverage=i - maxTgtPhraseLength;    int startBeam=Math.max(rootBeam,minCoverage);    Queue<Item> pq=new PriorityQueue<>(2 * beamCapacity);    for (int j=startBeam; j < i; ++j) {      BundleBeam<TK,FV> bundleBeam=(BundleBeam<TK,FV>)tgtBeams.get(j);      for (      HyperedgeBundle<TK,FV> bundle : bundleBeam.getBundlesForConsequentSize(i)) {        for (        Item consequent : generateConsequentsFrom(null,bundle,sourceInputId,outputSpace,true)) {          ++totalHypothesesGenerated;          if (consequent.derivation == null)           ++numPruned;          pq.add(consequent);        }      }    }    BundleBeam<TK,FV> newBeam=(BundleBeam<TK,FV>)tgtBeams.get(i);    int numPoppedItems=newBeam.size();    while (numPoppedItems < beamCapacity && !pq.isEmpty()) {      final Item item=pq.poll();      if (item.derivation != null) {        newBeam.put(item.derivation);        ++numPoppedItems;      }      for (      Item consequent : generateConsequentsFrom(item.consequent,item.consequent.bundle,sourceInputId,outputSpace,true)) {        ++totalHypothesesGenerated;        if (consequent.derivation == null)         ++numPruned;        pq.add(consequent);      }    }    if (i == prefixLength && newBeam.size() == 0) {      int j;      for (j=i - 1; j >= 0; --j)       if (tgtBeams.get(j).size() > 0)       break;      if (j > lastRecoveredCardinality) {        lastRecoveredCardinality=j;        boolean derivationsExtended=false;        logger.info("No hypothesis for complete prefix found. Recovering by moving back to cardinality " + j + " and augmenting phrase grid for target word: "+ prefix.get(j));        Sequence<TK> extension=prefix.subsequence(j,j + 1);        int numRules=SyntheticRules.recoverAugmentPrefixRuleGrid(prefixGrid,extension,sourceInputId,source,this,sourceInputProperties);        derivationsExtended=derivationsExtended || numRules > 0;        if (derivationsExtended) {          i=j;          for (; j <= prefixLength; ++j)           ((BundleBeam<TK,FV>)tgtBeams.get(j)).reset();        }      } else {        logger.warn("No hypothesis for complete prefix found, but already tried to recover from cardinality " + j + ". Giving up.");      }    }    if (printDebug) {      System.err.println(newBeam.beamString(10));    }    numRecombined+=newBeam.recombined();  }  timer.mark("PrefixDecoding");  logger.info("input {}: Prefix decoding time: {}",sourceInputId,timer);  logger.info("input {}: #derivations generated: {}  pruned: {}  recombined: {}",sourceInputId,totalHypothesesGenerated,numPruned,numRecombined);  return populateSourceBeams(tgtBeams,beams);}  }
class C{  protected void initProperties(Properties properties){  for (Enumeration keys=properties.keys(); keys.hasMoreElements(); ) {    final String key=(String)keys.nextElement();    final Object iobj=s_propKeys.get(key);    if (iobj != null) {      if (iobj instanceof Integer) {        final int BITFLAG=((Integer)iobj).intValue();        if ((properties.getProperty(key).endsWith("yes"))) {          fFeatures=fFeatures | BITFLAG;        } else {          fFeatures=fFeatures & ~BITFLAG;        }      } else {        if ((DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_FORMAT_PRETTY_PRINT).equals(key)) {          if ((properties.getProperty(key).endsWith("yes"))) {            fSerializer.setIndent(true);            fSerializer.setIndentAmount(3);          } else {            fSerializer.setIndent(false);          }        } else         if ((DOMConstants.S_XSL_OUTPUT_OMIT_XML_DECL).equals(key)) {          if ((properties.getProperty(key).endsWith("yes"))) {            fSerializer.setOmitXMLDeclaration(true);          } else {            fSerializer.setOmitXMLDeclaration(false);          }        } else         if ((DOMConstants.S_XERCES_PROPERTIES_NS + DOMConstants.S_XML_VERSION).equals(key)) {          String version=properties.getProperty(key);          if ("1.1".equals(version)) {            fIsXMLVersion11=true;            fSerializer.setVersion(version);          } else {            fSerializer.setVersion("1.0");          }        } else         if ((DOMConstants.S_XSL_OUTPUT_ENCODING).equals(key)) {          String encoding=properties.getProperty(key);          if (encoding != null) {            fSerializer.setEncoding(encoding);          }        } else         if ((DOMConstants.S_XERCES_PROPERTIES_NS + DOMConstants.DOM_ENTITIES).equals(key)) {          if ((properties.getProperty(key).endsWith("yes"))) {            fSerializer.setDTDEntityExpansion(false);          } else {            fSerializer.setDTDEntityExpansion(true);          }        } else {        }      }    }  }  if (fNewLine != null) {    fSerializer.setOutputProperty(OutputPropertiesFactory.S_KEY_LINE_SEPARATOR,fNewLine);  }}  }
class C{  public LigatureSet(RandomAccessFile raf,int offset) throws IOException {  raf.seek(offset);  ligatureCount=raf.readUnsignedShort();  ligatureOffsets=new int[ligatureCount];  ligatures=new Ligature[ligatureCount];  for (int i=0; i < ligatureCount; i++) {    ligatureOffsets[i]=raf.readUnsignedShort();  }  for (int i=0; i < ligatureCount; i++) {    raf.seek(offset + ligatureOffsets[i]);    ligatures[i]=new Ligature(raf);  }}  }
class C{  private static void createBillingResultDataMock(){  Long subscriptionKey=1L;  billingResultDataMock.put(subscriptionKey,new BillingResultDataMock(subscriptionKey,MP_ID1,CURRENCY_EUR,BigDecimal.valueOf(120),getProductHistory(subscriptionKey)));  subscriptionKey=2L;  billingResultDataMock.put(subscriptionKey,new BillingResultDataMock(subscriptionKey,MP_ID1,CURRENCY_EUR,BigDecimal.valueOf(210.15),getProductHistory(subscriptionKey)));  subscriptionKey=3L;  billingResultDataMock.put(subscriptionKey,new BillingResultDataMock(subscriptionKey,MP_ID1,CURRENCY_EUR,BigDecimal.valueOf(187.99),getProductHistory(subscriptionKey)));  subscriptionKey=4L;  billingResultDataMock.put(subscriptionKey,new BillingResultDataMock(subscriptionKey,MP_ID2,CURRENCY_EUR,BigDecimal.valueOf(87.19),getProductHistory(subscriptionKey)));  subscriptionKey=5L;  billingResultDataMock.put(subscriptionKey,new BillingResultDataMock(subscriptionKey,MP_ID1,CURRENCY_EUR,BigDecimal.valueOf(26),getProductHistory(subscriptionKey)));  subscriptionKey=6L;  billingResultDataMock.put(subscriptionKey,new BillingResultDataMock(subscriptionKey,MP_ID1,CURRENCY_USD,BigDecimal.valueOf(523.56),getProductHistory(subscriptionKey)));  subscriptionKey=7L;  billingResultDataMock.put(subscriptionKey,new BillingResultDataMock(subscriptionKey,MP_ID1,CURRENCY_EUR,BigDecimal.valueOf(222.22),getProductHistory(subscriptionKey)));  printTestData();}  }
class C{  public boolean isConnected(){  return (mService.getState() == STATE_CONNECTED);}  }
class C{  public JSONArray put(boolean value){  this.put(value ? Boolean.TRUE : Boolean.FALSE);  return this;}  }
class C{  public FileDescription(IFile file,URI linkLocation,IFileContentDescription fileContentDescription){  super(file);  this.name=file.getName();  this.location=linkLocation;  this.charset=null;  this.fileContentDescription=fileContentDescription;}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public Solve(){  super();}  }
class C{  CornerSize(double radius){  this.radius=radius;}  }
class C{  protected HttpBasicAuthentication(String challenge,Configuration conf) throws HttpAuthenticationException {  setConf(conf);  this.challenge=challenge;  credentials=new ArrayList<String>();  String username=this.conf.get("http.auth.basic." + challenge + ".user");  String password=this.conf.get("http.auth.basic." + challenge + ".password");  if (LOG.isTraceEnabled()) {    LOG.trace("BasicAuthentication challenge is " + challenge);    LOG.trace("BasicAuthentication username=" + username);    LOG.trace("BasicAuthentication password=" + password);  }  if (username == null) {    throw new HttpAuthenticationException("Username for " + challenge + " is null");  }  if (password == null) {    throw new HttpAuthenticationException("Password for " + challenge + " is null");  }  byte[] credBytes=(username + ":" + password).getBytes();  credentials.add("Authorization: Basic " + new String(Base64.encodeBase64(credBytes)));  if (LOG.isTraceEnabled()) {    LOG.trace("Basic credentials: " + credentials);  }}  }
class C{  private static void addVolumeDetail(StringSetMap volumeInformation,Volume volume,VolumeObjectProperties key) throws Exception {  String value=PropertySetterUtil.extractValueFromStringSet(key.toString(),volumeInformation);  PropertySetterUtil.addPropertyIntoObject(key,value,volume);}  }
class C{  public static float[] stringListToNumeric(List<String> scoreList) throws NumberFormatException {  float[] scores=new float[scoreList.size()];  int scoreId=0;  for (  String score : scoreList) {    float floatScore=(float)Double.parseDouble(score);    if (Float.isNaN(floatScore)) {      throw new NumberFormatException("Unparseable number: " + score);    }    scores[scoreId++]=floatScore;  }  return scores;}  }
class C{  public PydevConsoleCommunication(Project project,int port,Process process,int clientPort) throws Exception {  super(project);  myWebServer=new WebServer(clientPort,null);  myWebServer.addHandler("$default",this);  this.myWebServer.start();  this.myClient=new PydevXmlRpcClient(process,port);}  }
class C{  public Vector3d div(Vector3fc v){  x/=v.x();  y/=v.y();  z/=v.z();  return this;}  }
class C{  @Override protected boolean isZoneLevelResource(){  return false;}  }
class C{  public boolean existsAnyRelFldValueUpdate() throws Exception {  boolean exists;  exists=m_relFlds.existsAnyFldUpdate();  return exists;}  }
class C{  public SlidingActivityHelper(Activity activity){  mActivity=activity;}  }
class C{  public void testRadix10Neg(){  String value="-2489756308572364789878394872984";  int radix=16;  BigInteger aNumber=new BigInteger(value,radix);  String result=aNumber.toString(radix);  assertTrue(result.equals(value));}  }
class C{  public static double P_FmacroAvgL(int Y[][],int Ypred[][]){  int L=Y[0].length;  double TP[]=new double[L];  double FP[]=new double[L];  double FN[]=new double[L];  double F[]=new double[L];  for (int j=0; j < L; j++) {    if (allMissing(MatrixUtils.getCol(Y,j))) {      L--;      continue;    }    int y_j[]=MatrixUtils.getCol(Y,j);    int ypred_j[]=MatrixUtils.getCol(Ypred,j);    TP[j]=P_TruePositives(y_j,ypred_j);    FP[j]=P_FalsePositives(y_j,ypred_j);    FN[j]=P_FalseNegatives(y_j,ypred_j);    if (TP[j] <= 0)     F[j]=0.0; else {      double prec=(double)TP[j] / ((double)TP[j] + (double)FP[j]);      double recall=(double)TP[j] / ((double)TP[j] + (double)FN[j]);      F[j]=2 * ((prec * recall) / (prec + recall));    }  }  return (double)A.sum(F) / (double)L;}  }
class C{  public void e(Object str){  if (debug) {    if (logLevel <= Log.ERROR) {      String name=getFunctionName();      if (name != null) {        Log.e(tag,name + "\n" + str+ "\n------------------------------------------------------------------------------");      } else {        Log.e(tag,str.toString());      }    }  }}  }
class C{  public static byte[] decodeWebSafe(byte[] source,int off,int len) throws Base64DecoderException {  return decode(source,off,len,WEBSAFE_DECODABET);}  }
class C{  public static void read(final URL inputSource,GridDataType type,GeomGridField field) throws FileNotFoundException {  gdal.AllRegister();  Dataset dataset=gdal.Open(inputSource.getFile());  if (dataset == null) {    throw new FileNotFoundException(inputSource + " not found");  }  int xSize=dataset.getRasterXSize();  int ySize=dataset.getRasterYSize();  AbstractGrid2D grid=null;  Band band=dataset.GetRasterBand(1);  if (band == null) {    throw new RuntimeException("Unable to get raster band");  }switch (type) {case INTEGER:    grid=new IntGrid2D(xSize,ySize);  readIntegerBased(xSize,ySize,band,(IntGrid2D)grid);break;case DOUBLE:grid=new DoubleGrid2D(xSize,ySize);readDoubleBased(xSize,ySize,band,(DoubleGrid2D)grid);break;}field.setGrid(grid);double[] transformData=dataset.GetGeoTransform();field.setPixelHeight(Math.abs(transformData[5]));field.setPixelWidth(Math.abs(transformData[1]));Envelope MBR=new Envelope(transformData[0],transformData[0] + transformData[1] * xSize,transformData[3] + transformData[5] * ySize,transformData[3]);field.setMBR(MBR);dataset.FlushCache();dataset=null;}  }
class C{  public static MappingFactory init(){  try {    MappingFactory theMappingFactory=(MappingFactory)EPackage.Registry.INSTANCE.getEFactory(MappingPackage.eNS_URI);    if (theMappingFactory != null) {      return theMappingFactory;    }  } catch (  Exception exception) {    EcorePlugin.INSTANCE.log(exception);  }  return new MappingFactoryImpl();}  }
class C{  protected void clearEvents(){}  }
class C{  public ToStringBuilder append(double value){  style.append(buffer,null,value);  return this;}  }
class C{  public Value createBlob(InputStream x,long length){  if (x == null) {    return ValueNull.INSTANCE;  }  if (length <= 0) {    length=-1;  }  Value v=ValueLobDb.createTempBlob(x,length);  session.addTemporaryLob(v);  return v;}  }
class C{  public final int updateAndGet(IntUnaryOperator updateFunction){  int prev, next;  do {    prev=get();    next=updateFunction.applyAsInt(prev);  } while (!compareAndSet(prev,next));  return next;}  }
class C{  public ClusterInfo installImage(String version,boolean force){  UriBuilder builder=client.uriBuilder(IMAGE_INSTALL_URL);  addQueryParam(builder,VERSION_PARAM,version);  if (force) {    addQueryParam(builder,FORCE_PARAM,FORCE);  }  return client.postURI(ClusterInfo.class,builder.build());}  }
class C{  private void writeObject(ObjectOutputStream oos) throws IOException {  oos.writeObject(iInstant);  oos.writeObject(iField.getType());}  }
class C{  public static void testSecKeyVerifyNeg() throws AssertFailException {  boolean result=false;  byte[] sec=BaseEncoding.base16().lowerCase().decode("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF".toLowerCase());  result=NativeSecp256k1.secKeyVerify(sec);  assertEquals(result,false,"testSecKeyVerifyNeg");}  }
class C{  private void putInMultiplePartitionedRegionFrom3Nodes(int startIndexForRegion,int endIndexForRegion,int startIndexForKey,int endIndexForKey) throws Throwable {  int AsyncInvocationArrSize=3;  AsyncInvocation[] async=new AsyncInvocation[AsyncInvocationArrSize];  int delta=(endIndexForKey - startIndexForKey) / 3;  async[0]=vm[0].invokeAsync(putInMultiplePartitionRegion(prPrefix,startIndexForKey,startIndexForKey + 1 * delta,startIndexForRegion,endIndexForRegion));  async[1]=vm[1].invokeAsync(putInMultiplePartitionRegion(prPrefix,startIndexForKey + 1 * delta,startIndexForKey + 2 * delta,startIndexForRegion,endIndexForRegion));  async[2]=vm[2].invokeAsync(putInMultiplePartitionRegion(prPrefix,startIndexForKey + 2 * delta,endIndexForKey,startIndexForRegion,endIndexForRegion));  for (int count=0; count < AsyncInvocationArrSize; count++) {    ThreadUtils.join(async[count],30 * 1000);  }  for (int count=0; count < AsyncInvocationArrSize; count++) {    if (async[count].exceptionOccurred()) {      Assert.fail("exception during" + count,async[count].getException());    }  }}  }
class C{  public void testCanBeDeployedWhenTwoWARsInSameWebContext() throws Exception {  AbstractCopyingInstalledLocalDeployer deployer=new TestableCopyingDeployer(createContainer(createContainerCapability(DeployableType.WAR),null));  WAR war1=new WAR("ram:///path1/warfile.war");  this.fsManager.resolveFile(war1.getFile()).createFile();  WAR war2=new WAR("ram:///path2/warfile.war");  this.fsManager.resolveFile(war2.getFile()).createFile();  deployer.deploy(war1);  assertTrue(this.fsManager.resolveFile("ram:///webapps/warfile.war").exists());  try {    deployer.deploy(war2);    fail("Expected ContainerException because we deployed two WARs with the same context " + "name.");  } catch (  ContainerException expected) {    assertEquals("Failed to deploy [ram:///path2/warfile.war] to [ram:///webapps]. The " + "required web context is already in use by another application.",expected.getMessage());  }}  }
class C{  private void $$$setupUI$$$(){  contentPane=new JPanel();  contentPane.setLayout(new BorderLayout(0,0));}  }
class C{  public static GcInfo from(CompositeData cd){  if (cd == null) {    return null;  }  if (cd instanceof GcInfoCompositeData) {    return ((GcInfoCompositeData)cd).getGcInfo();  } else {    return new GcInfo(cd);  }}  }
class C{  public JSONTokener(InputStream inputStream) throws JSONException {  this(new InputStreamReader(inputStream));}  }
class C{  private void loadFile(){  log.info("");  preview.setVisible(false);  Media media=null;  try {    media=Fileupload.get(true);    if (media != null) {      ;    } else {      preview.setVisible(true);      preview.invalidate();      return;    }  } catch (  InterruptedException e) {    log.log(Level.WARNING,e.getLocalizedMessage(),e);  }  String fileName=media.getName();  log.config(fileName);  int cnt=m_attachment.getEntryCount();  for (int i=0; i < cnt; i++) {    if (m_attachment.getEntryName(i).equals(fileName)) {      m_attachment.updateEntry(i,getMediaData(media));      cbContent.setSelectedIndex(i);      displayData(cbContent.getSelectedIndex(),false);      m_change=true;      return;    }  }  if (m_attachment.addEntry(fileName,getMediaData(media))) {    cbContent.appendItem(media.getName(),media.getName());    cbContent.setSelectedIndex(cbContent.getItemCount() - 1);    displayData(cbContent.getSelectedIndex(),false);    m_change=true;  }}  }
class C{  public static AffineTransformation shearInstance(double xShear,double yShear){  AffineTransformation trans=new AffineTransformation();  trans.setToShear(xShear,yShear);  return trans;}  }
class C{  private BusinessObjectDataKey cloneToLowerCase(BusinessObjectDataKey businessObjectDataKey){  BusinessObjectDataKey businessObjectDataKeyClone=new BusinessObjectDataKey();  businessObjectDataKeyClone.setNamespace(businessObjectDataKey.getNamespace().toLowerCase());  businessObjectDataKeyClone.setBusinessObjectDefinitionName(businessObjectDataKey.getBusinessObjectDefinitionName().toLowerCase());  businessObjectDataKeyClone.setBusinessObjectFormatUsage(businessObjectDataKey.getBusinessObjectFormatUsage().toLowerCase());  businessObjectDataKeyClone.setBusinessObjectFormatFileType(businessObjectDataKey.getBusinessObjectFormatFileType().toLowerCase());  businessObjectDataKeyClone.setBusinessObjectFormatVersion(businessObjectDataKey.getBusinessObjectFormatVersion());  businessObjectDataKeyClone.setPartitionValue(businessObjectDataKey.getPartitionValue());  businessObjectDataKeyClone.setBusinessObjectDataVersion(businessObjectDataKey.getBusinessObjectDataVersion());  businessObjectDataKeyClone.setSubPartitionValues(businessObjectDataKey.getSubPartitionValues());  return businessObjectDataKeyClone;}  }
class C{  public static boolean isEqual(Date d1,Date d2){  if (d1 == d2) {    return true;  }  if (d1 == null || d2 == null) {    return false;  }  return d1.compareTo(d2) == 0;}  }
class C{  @Override public ClientSocket openWarm(){  State state=_state;  if (!state.isEnabled()) {    return null;  }  ClientSocket stream=openRecycle();  if (stream != null) {    return stream;  }  if (canOpenWarm()) {    return connect();  } else {    return null;  }}  }
class C{  @Override public void writeToParcel(final Parcel out,final int flags){  out.writeInt(PARCEL_MAGIC);  out.writeString(getPackageName());  out.writeInt(super.getId());  if (super.getTag() != null) {    out.writeInt(1);    out.writeString(super.getTag());  } else   out.writeInt(0);  out.writeInt(SbnCompat.getUid(this));  getUser().writeToParcel(out,flags);  out.writeLong(getPostTime());  out.writeStrongInterface(notification == null ? holder : new NotificationHolder(notification));  if (id != null) {    out.writeInt(1);    out.writeInt(id);  } else   out.writeInt(0);  if (tag_decorated) {    out.writeInt(1);    out.writeString(tag);  } else   out.writeInt(0);}  }
class C{  public void remove(T object){  final int position=getPosition(object);  mObjects.remove(object);  notifyItemRemoved(position);}  }
class C{  protected void clearOutEvents(){}  }
class C{  protected Trace_Impl(){  super();}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypesPackage.CONTAINER_TYPE__OWNED_MEMBERS_BY_NAME_AND_ACCESS:    setOwnedMembersByNameAndAccess((Map<NameAndAccess,? extends TMember>)null);  return;case TypesPackage.CONTAINER_TYPE__OWNED_MEMBERS:getOwnedMembers().clear();return;case TypesPackage.CONTAINER_TYPE__CALLABLE_CTOR:setCallableCtor((TMethod)null);return;case TypesPackage.CONTAINER_TYPE__TYPE_VARS:getTypeVars().clear();return;}super.eUnset(featureID);}  }
class C{  public Vector2f addLocal(float addX,float addY){  x+=addX;  y+=addY;  return this;}  }
class C{  protected boolean accept(DelphiPMDNode node){  return node.getLine() > lastLine;}  }
class C{  @Override public AccessToken refreshAccessToken() throws IOException {  if (createScopedRequired()) {    throw new IOException("Scopes not configured for service account. Scoped should be specifed" + " by calling createScoped or passing scopes to constructor.");  }  JsonWebSignature.Header header=new JsonWebSignature.Header();  header.setAlgorithm("RS256");  header.setType("JWT");  header.setKeyId(privateKeyId);  JsonWebToken.Payload payload=new JsonWebToken.Payload();  long currentTime=clock.currentTimeMillis();  payload.setIssuer(clientEmail);  payload.setAudience(OAuth2Utils.TOKEN_SERVER_URI.toString());  payload.setIssuedAtTimeSeconds(currentTime / 1000);  payload.setExpirationTimeSeconds(currentTime / 1000 + 3600);  payload.setSubject(null);  payload.put("scope",Joiner.on(' ').join(scopes));  JsonFactory jsonFactory=OAuth2Utils.JSON_FACTORY;  String assertion;  try {    assertion=JsonWebSignature.signUsingRsaSha256(privateKey,jsonFactory,header,payload);  } catch (  GeneralSecurityException e) {    throw new IOException("Error signing service account access token request with private key.",e);  }  GenericData tokenRequest=new GenericData();  tokenRequest.set("grant_type",GRANT_TYPE);  tokenRequest.set("assertion",assertion);  UrlEncodedContent content=new UrlEncodedContent(tokenRequest);  HttpRequestFactory requestFactory=transportFactory.create().createRequestFactory();  HttpRequest request=requestFactory.buildPostRequest(new GenericUrl(tokenServerUri),content);  request.setParser(new JsonObjectParser(jsonFactory));  HttpResponse response;  try {    response=request.execute();  } catch (  IOException e) {    throw new IOException("Error getting access token for service account: ",e);  }  GenericData responseData=response.parseAs(GenericData.class);  String accessToken=OAuth2Utils.validateString(responseData,"access_token",PARSE_ERROR_PREFIX);  int expiresInSeconds=OAuth2Utils.validateInt32(responseData,"expires_in",PARSE_ERROR_PREFIX);  long expiresAtMilliseconds=clock.currentTimeMillis() + expiresInSeconds * 1000;  return new AccessToken(accessToken,new Date(expiresAtMilliseconds));}  }
class C{  public void clear(DrawContext dc,java.awt.Color color){  if (dc == null) {    String message=Logging.getMessage("nullValue.DrawContextIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (color == null) {    String message=Logging.getMessage("nullValue.ColorIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (this.colorTarget == null)   return;  float[] compArray=new float[4];  color.getRGBComponents(compArray);  compArray[0]*=compArray[3];  compArray[1]*=compArray[3];  compArray[2]*=compArray[3];  GL gl=dc.getGL();  gl.glClearColor(compArray[0],compArray[1],compArray[2],compArray[3]);  gl.glClear(GL.GL_COLOR_BUFFER_BIT);}  }
class C{  public XRRuntimeException(String msg){  super(msg);  log(msg);}  }
class C{  public JPythonInterpreterFactory(){}  }
class C{  static int midPt(final int a,final int b){  return a + (b - a) / 2;}  }
class C{  public AudioInputStream(InputStream stream,AudioFormat format,long length){  super();  this.format=format;  this.frameLength=length;  this.frameSize=format.getFrameSize();  if (this.frameSize == AudioSystem.NOT_SPECIFIED || frameSize <= 0) {    this.frameSize=1;  }  this.stream=stream;  framePos=0;  markpos=0;}  }
class C{  public SymbolTableEntryInternal steFor_global(){  return getSymbolTableEntryInternal("global",true);}  }
class C{  public static int createAndLinkProgram(final int vertexShaderHandle,final int fragmentShaderHandle,final String[] attributes){  int programHandle=GLES20.glCreateProgram();  if (programHandle != 0) {    GLES20.glAttachShader(programHandle,vertexShaderHandle);    GLES20.glAttachShader(programHandle,fragmentShaderHandle);    if (attributes != null) {      final int size=attributes.length;      for (int i=0; i < size; i++) {        GLES20.glBindAttribLocation(programHandle,i,attributes[i]);      }    }    GLES20.glLinkProgram(programHandle);    final int[] linkStatus=new int[1];    GLES20.glGetProgramiv(programHandle,GLES20.GL_LINK_STATUS,linkStatus,0);    if (linkStatus[0] == 0) {      Log.e(TAG,"Error compiling program: " + GLES20.glGetProgramInfoLog(programHandle));      GLES20.glDeleteProgram(programHandle);      programHandle=0;    }  }  if (programHandle == 0) {    throw new RuntimeException("Error creating program.");  }  return programHandle;}  }
class C{  @SuppressWarnings("unchecked") public void collect(){synchronized (this) {    for (    PortPair pair : getManagedPairs()) {      IOObject data=pair.getInputPort().getAnyDataOrNull();      if (data != null) {        IOObject output=pair.getOutputPort().getAnyDataOrNull();        if (output == null) {          IOObjectCollection<IOObject> collection=new IOObjectCollection<IOObject>();          collection.add(data);          pair.getOutputPort().deliver(collection);        } else         if (output instanceof IOObjectCollection) {          ((IOObjectCollection<IOObject>)output).add(data);          pair.getOutputPort().deliver(output);        } else {          pair.getOutputPort().getPorts().getOwner().getOperator().getLogger().warning("Cannot collect output at " + pair.getOutputPort().getSpec() + ": data is of type "+ output.getClass().getName()+ ".");        }      }    }  }}  }
class C{  public ElementReferenceExpression createElementReferenceExpression(){  ElementReferenceExpressionImpl elementReferenceExpression=new ElementReferenceExpressionImpl();  return elementReferenceExpression;}  }
class C{  private Pair<RPEntity,Entity> removedKilled(final RPEntity entity){  Iterator<Pair<RPEntity,Entity>> itr=entityToKill.iterator();  while (itr.hasNext()) {    Pair<RPEntity,Entity> entry=itr.next();    if (entity.equals(entry.first())) {      itr.remove();      return entry;    }  }  return null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.221 -0400",hash_original_method="0934641DA89F31AC7E4DAD11F960B852",hash_generated_method="8B3F1A07247871C2D47EB27B91F628C4") public byte[] decode(byte[] bytes) throws DecoderException {  return decodeQuotedPrintable(bytes);}  }
class C{  public void testSubmitRunnable() throws Throwable {  ExecutorService e=new ForkJoinPool(1);  PoolCleaner cleaner=null;  try {    cleaner=cleaner(e);    Future<?> future=e.submit(new NoOpRunnable());    assertNull(future.get());    assertTrue(future.isDone());    assertFalse(future.isCancelled());  }  finally {    if (cleaner != null) {      cleaner.close();    }  }}  }
class C{  public void reloadVectorStoresIfPossibleFile(String folder,String changedTermFilename,String changedDocFilename){  lock.writeLock().lock();  try {    String recreatedFilename=folder + "/recreated_" + key;    File recreated=new File(recreatedFilename);    if (recreated.exists()) {      logger.info("Reloading vec stores at " + folder + " with key "+ key);      if (!useRamStores) {        ((CloseableVectorStore)termVecReader).close();        ((CloseableVectorStore)docVecReader).close();      }      File changedTermFile=new File(folder + "/" + changedTermFilename);      File changedDocFile=new File(folder + "/" + changedDocFilename);      File liveTermFile=new File(termFilename);      File liveDocFile=new File(docFilename);      changedTermFile.renameTo(liveTermFile);      changedDocFile.renameTo(liveDocFile);      openVectorStores(termFilename,docFilename);      recreated.delete();    } else     logger.info("No file " + recreatedFilename + " so no reload done");  }  finally {    lock.writeLock().unlock();  }}  }
class C{  public void testCallMethod() throws Exception {  FooRequest fooRequest=FooRequest.newBuilder().build();  BarRequest barRequest=BarRequest.newBuilder().build();  MockCallback<Message> fooCallback=new MockCallback<Message>();  MockCallback<Message> barCallback=new MockCallback<Message>();  TestService mockService=control.createMock(TestService.class);  mockService.foo(EasyMock.same(mockController),EasyMock.same(fooRequest),this.<FooResponse>wrapsCallback(fooCallback));  mockService.bar(EasyMock.same(mockController),EasyMock.same(barRequest),this.<BarResponse>wrapsCallback(barCallback));  control.replay();  mockService.callMethod(fooDescriptor,mockController,fooRequest,fooCallback);  mockService.callMethod(barDescriptor,mockController,barRequest,barCallback);  control.verify();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:02.927 -0500",hash_original_method="1ED0E7CC3A3DEA87A3E7770AD1F18412",hash_generated_method="8C2CA31FBA0C0203186E50F29FFA6A8F") public Socket createSocket(String host,int port,InetAddress localAddr,int localPort) throws UnknownHostException, IOException {  return new Socket(host,port,localAddr,localPort);}  }
class C{  public void destroy(){  if (changedRowColor) {    config.setShotTimerRowColor(null);    changedRowColor=false;  }  if (shotTimerTable != null) {    for (    final TableColumn<ShotEntry,String> column : exerciseColumns.values()) {      shotTimerTable.getColumns().remove(column);    }  }  for (  final Entry<CameraView,Label> entry : exerciseLabels.entrySet()) {    entry.getKey().removeChild(entry.getValue());  }  exerciseLabels.clear();  final Iterator<Pane> itExercisePanes=exercisePanes.iterator();  while (itExercisePanes.hasNext()) {    trainingExerciseContainer.getChildren().remove(itExercisePanes.next());    itExercisePanes.remove();  }  final Iterator<Button> itExerciseButtons=exerciseButtons.iterator();  while (itExerciseButtons.hasNext()) {    buttonsContainer.getChildren().remove(itExerciseButtons.next());    itExerciseButtons.remove();  }  pauseShotDetection(false);}  }
class C{  public ExpressionStatement newExpressionStatement(Expression expression){  ExpressionStatement result=new ExpressionStatement(this);  result.setExpression(expression);  return result;}  }
class C{  public void addClaim(String claim,boolean required){  if (required && !_requiredClaims.contains(claim))   _requiredClaims.add(claim); else   if (!_optionalClaims.contains(claim))   _optionalClaims.add(claim);}  }
class C{  public WeakReference(T r){  super(r,null);}  }
class C{  void startNoUserInteractionAnimation(){  if (mDismissButton.getVisibility() != View.VISIBLE) {    mDismissButton.setVisibility(View.VISIBLE);    mDismissButton.setAlpha(0f);    mDismissButton.animate().alpha(1f).setStartDelay(0).setInterpolator(mConfig.fastOutLinearInInterpolator).setDuration(mConfig.taskViewEnterFromAppDuration).withLayer().start();  }}  }
class C{  public boolean verifySignature(byte[] message,byte[] signature){  boolean success=false;  messDigestOTS.reset();  WinternitzOTSVerify otsVerify;  int otsSigLength;  byte[] help=message;  byte[] otsSig;  byte[] otsPublicKey;  byte[][] authPath;  byte[] dest;  int nextEntry=0;  int index;  for (int j=numLayer - 1; j >= 0; j--) {    otsVerify=new WinternitzOTSVerify(digestProvider.get(),gmssPS.getWinternitzParameter()[j]);    otsSigLength=otsVerify.getSignatureLength();    message=help;    index=gmssUtil.bytesToIntLittleEndian(signature,nextEntry);    nextEntry+=4;    otsSig=new byte[otsSigLength];    System.arraycopy(signature,nextEntry,otsSig,0,otsSigLength);    nextEntry+=otsSigLength;    otsPublicKey=otsVerify.Verify(message,otsSig);    if (otsPublicKey == null) {      System.err.println("OTS Public Key is null in GMSSSignature.verify");      return false;    }    authPath=new byte[gmssPS.getHeightOfTrees()[j]][mdLength];    for (int i=0; i < authPath.length; i++) {      System.arraycopy(signature,nextEntry,authPath[i],0,mdLength);      nextEntry=nextEntry + mdLength;    }    help=new byte[mdLength];    help=otsPublicKey;    int count=1 << authPath.length;    count=count + index;    for (int i=0; i < authPath.length; i++) {      dest=new byte[mdLength << 1];      if ((count % 2) == 0) {        System.arraycopy(help,0,dest,0,mdLength);        System.arraycopy(authPath[i],0,dest,mdLength,mdLength);        count=count / 2;      } else {        System.arraycopy(authPath[i],0,dest,0,mdLength);        System.arraycopy(help,0,dest,mdLength,help.length);        count=(count - 1) / 2;      }      messDigestTrees.update(dest,0,dest.length);      help=new byte[messDigestTrees.getDigestSize()];      messDigestTrees.doFinal(help,0);    }  }  if (Arrays.areEqual(pubKeyBytes,help)) {    success=true;  }  return success;}  }
class C{  @SuppressWarnings("deprecation") private static ValueSource buildDateSource(IndexSchema schema,String expressionString){  int paren=expressionString.indexOf('(');  String[] arguments;  if (paren < 0) {    return buildFieldSource(schema,expressionString,DATE_TYPE);  } else {    arguments=ExpressionFactory.getArguments(expressionString.substring(paren + 1,expressionString.lastIndexOf(')')).trim());  }  String operands=arguments[0];  String operation=expressionString.substring(0,paren).trim();  if (operation.equals(AnalyticsParams.CONSTANT_DATE)) {    if (arguments.length != 1) {      throw new SolrException(ErrorCode.BAD_REQUEST,"The constant date declaration [" + expressionString + "] does not have exactly 1 argument.");    }    return new ConstDateSource(DateMathParser.parseMath(null,operands));  } else   if (operation.equals(AnalyticsParams.FILTER)) {    return buildFilterSource(schema,operands,DATE_TYPE);  }  if (operation.equals(AnalyticsParams.DATE_MATH)) {    List<ValueSource> subExpressions=new ArrayList<>();    boolean first=true;    for (    String argument : arguments) {      ValueSource argSource;      if (first) {        first=false;        argSource=buildDateSource(schema,argument);        if (argSource == null) {          throw new SolrException(ErrorCode.BAD_REQUEST,"\"" + AnalyticsParams.DATE_MATH + "\" requires the first argument be a date operation or field. ["+ argument+ "] is not a date operation or field.");        }      } else {        argSource=buildStringSource(schema,argument);        if (argSource == null) {          throw new SolrException(ErrorCode.BAD_REQUEST,"\"" + AnalyticsParams.DATE_MATH + "\" requires that all arguments except the first be string operations. ["+ argument+ "] is not a string operation.");        }      }      subExpressions.add(argSource);    }    return new DateMathFunction(subExpressions.toArray(new ValueSource[0]));  }  if (AnalyticsParams.NUMERIC_OPERATION_SET.contains(operation) || AnalyticsParams.STRING_OPERATION_SET.contains(operation)) {    return null;  }  throw new SolrException(ErrorCode.BAD_REQUEST,"The operation [" + expressionString + "] is not supported.");}  }
class C{  public Object read(InputStream stream) throws Exception {  return fromXML(m_Document.read(stream));}  }
class C{  @Bean public PasswordEncoder passwordEncoder(){  return new BCryptPasswordEncoder();}  }
class C{  @Nullable public static String toRelativePath(final VirtualFile file,final File baseDir,final String baseDirPropertyName,final GenerationOptions genOptions){  final String localPath=PathUtil.getLocalPath(file);  if (localPath == null) {    return null;  }  return toRelativePath(localPath,baseDir,baseDirPropertyName,genOptions);}  }
class C{  @Override public MapsCard toolbarListener(@NotNull Toolbar.OnMenuItemClickListener toolbarListener){  mToolbarListener=toolbarListener;  return this;}  }
class C{  static void test7(){  for (int i=0; i < input.length; i++) {    String s=input[i];    int nCodePoints=0;    int c;    for (int j=0; j < s.length(); j+=Character.charCount(c)) {      c=s.codePointAt(j);      nCodePoints++;    }    int[] codePoints=new int[nCodePoints];    int count=0, mid=0, offset=0;    for (int j=0; j < s.length(); j+=Character.charCount(c)) {      if (mid == 0 && j >= s.length() / 2) {        mid=j;        offset=count;      }      c=s.codePointAt(j);      codePoints[count++]=c;    }    String cps=new String(codePoints,0,count);    check(!s.equals(cps),"new String(int[]...) with input[" + i + "]");    cps=new String(codePoints,0,offset);    check(!s.substring(0,mid).equals(cps),"first half: new String(int[]...) with input[" + i + "]");    cps=new String(codePoints,offset,count - offset);    check(!s.substring(mid).equals(cps),"second half: new String(int[]...) with input[" + i + "]");    testNewString(null,0,count,NullPointerException.class);    testNewString(codePoints,-1,count,IndexOutOfBoundsException.class);    testNewString(codePoints,0,count + 1,IndexOutOfBoundsException.class);    testNewString(codePoints,offset,count,IndexOutOfBoundsException.class);    testNewString(codePoints,offset,-1,IndexOutOfBoundsException.class);    testNewString(codePoints,count,1,IndexOutOfBoundsException.class);    codePoints[offset]=-1;    testNewString(codePoints,0,count,IllegalArgumentException.class);    codePoints[offset]=Character.MAX_CODE_POINT + 1;    testNewString(codePoints,0,count,IllegalArgumentException.class);  }{    int[] x=new int[Character.MAX_CODE_POINT];    for (int i=0; i < x.length; i++)     if (i != 0xdbff)     x[i]=i;    final String s=new String(x,0,x.length);    check(s.codePointCount(0,s.length()) != x.length,"s.codePointCount(0, s.length()) != x.length");    check(s.length() <= x.length,"s.length() <= x.length");    for (int i=0, j=0; i < x.length; i++) {      int c=s.codePointAt(j);      check(c != x[i],"c != x[i]");      j+=Character.charCount(c);    }  }}  }
class C{  public void toBytecode(DataOutputStream out) throws CannotCompileException, IOException {  throw new CannotCompileException("not a class");}  }
class C{  private void injectTestWebContentKeyBindings(){  ContentResolver contentResolver=getActivity().getContentResolver();  sDefaultKeyBindings=Settings.Secure.getString(contentResolver,Settings.Secure.ACCESSIBILITY_WEB_CONTENT_KEY_BINDINGS);  Settings.Secure.putString(contentResolver,Settings.Secure.ACCESSIBILITY_WEB_CONTENT_KEY_BINDINGS,TEST_KEY_DINDINGS);}  }
class C{  private Map<String,String> createRequestMap(final Map<String,String[]> parameterMap){  final Map<String,String> requestMap=new HashMap<>();  for (  final Map.Entry<String,String[]> stringEntry : parameterMap.entrySet()) {    final String[] val=stringEntry.getValue();    if (val != null && val.length > 0) {      log.debug("Added request parameter {} with value {}",stringEntry.getKey(),val[0]);      requestMap.put(stringEntry.getKey(),val[0]);    }  }  return requestMap;}  }
class C{  public SVGGVTFont createFont(BridgeContext ctx,Element fontElement,Element textElement,float size,GVTFontFace fontFace){  NodeList glyphElements=fontElement.getElementsByTagNameNS(SVG_NAMESPACE_URI,SVG_GLYPH_TAG);  int numGlyphs=glyphElements.getLength();  String[] glyphCodes=new String[numGlyphs];  String[] glyphNames=new String[numGlyphs];  String[] glyphLangs=new String[numGlyphs];  String[] glyphOrientations=new String[numGlyphs];  String[] glyphForms=new String[numGlyphs];  Element[] glyphElementArray=new Element[numGlyphs];  for (int i=0; i < numGlyphs; i++) {    Element glyphElement=(Element)glyphElements.item(i);    glyphCodes[i]=glyphElement.getAttributeNS(null,SVG_UNICODE_ATTRIBUTE);    if (glyphCodes[i].length() > 1) {      if (ArabicTextHandler.arabicChar(glyphCodes[i].charAt(0))) {        glyphCodes[i]=(new StringBuffer(glyphCodes[i])).reverse().toString();      }    }    glyphNames[i]=glyphElement.getAttributeNS(null,SVG_GLYPH_NAME_ATTRIBUTE);    glyphLangs[i]=glyphElement.getAttributeNS(null,SVG_LANG_ATTRIBUTE);    glyphOrientations[i]=glyphElement.getAttributeNS(null,SVG_ORIENTATION_ATTRIBUTE);    glyphForms[i]=glyphElement.getAttributeNS(null,SVG_ARABIC_FORM_ATTRIBUTE);    glyphElementArray[i]=glyphElement;  }  NodeList missingGlyphElements=fontElement.getElementsByTagNameNS(SVG_NAMESPACE_URI,SVG_MISSING_GLYPH_TAG);  Element missingGlyphElement=null;  if (missingGlyphElements.getLength() > 0) {    missingGlyphElement=(Element)missingGlyphElements.item(0);  }  NodeList hkernElements=fontElement.getElementsByTagNameNS(SVG_NAMESPACE_URI,SVG_HKERN_TAG);  Element[] hkernElementArray=new Element[hkernElements.getLength()];  for (int i=0; i < hkernElementArray.length; i++) {    Element hkernElement=(Element)hkernElements.item(i);    hkernElementArray[i]=hkernElement;  }  NodeList vkernElements=fontElement.getElementsByTagNameNS(SVG_NAMESPACE_URI,SVG_VKERN_TAG);  Element[] vkernElementArray=new Element[vkernElements.getLength()];  for (int i=0; i < vkernElementArray.length; i++) {    Element vkernElement=(Element)vkernElements.item(i);    vkernElementArray[i]=vkernElement;  }  return new SVGGVTFont(size,fontFace,glyphCodes,glyphNames,glyphLangs,glyphOrientations,glyphForms,ctx,glyphElementArray,missingGlyphElement,hkernElementArray,vkernElementArray,textElement);}  }
class C{  private void orientTailPath(List<Node> path,Graph graph){  for (int i=0; i < path.size() - 1; i++) {    Node n1=path.get(i);    Node n2=path.get(i + 1);    graph.setEndpoint(n1,n2,Endpoint.TAIL);    graph.setEndpoint(n2,n1,Endpoint.TAIL);    changeFlag=true;    logger.log("impliedOrientations",SearchLogUtils.edgeOrientedMsg("Orient circle undirectedPaths",graph.getEdge(n1,n2)));  }}  }
class C{  protected Vec4 hermiteCurve(Vec4 pt1,Vec4 pt2,Vec4 tangent1,Vec4 tangent2,double t){  double c1=(1 - 3 * t * t + 2 * Math.pow(t,3));  double c2=(3 - 2 * t) * t * t;  double c3=t * Math.pow(t - 1,2);  double c4=(t - 1) * t * t;  return pt1.multiply3(c1).add3(pt2.multiply3(c2)).add3(tangent1.multiply3(c3)).add3(tangent2.multiply3(c4));}  }
class C{  public static void assertWarnings(int expectedSize,List<String> warnings){  assertEquals(warnings.toString(),expectedSize,warnings.size());}  }
class C{  public static Shape createShape(String name,ShapeType shapeType,float size){  Spatial geometry=null;switch (shapeType) {case none:    break;case arrow:  geometry=new Arrow("_arrow",size,size * 0.1f);break;case ball:geometry=new Sphere("_sphere",50,50,size * 0.5f);geometry.setTranslation(0,0,size * 0.5f);break;case box:geometry=new Box("_box",new Vector3(),0.5f * size,0.5f * size,0.5f * size);geometry.setTranslation(0,0,0.5f * size);break;case cone:geometry=new Cone("_cone",50,50,0.5f * size,size,true);geometry.setRotation(new Matrix3().fromAngles(Math.PI,0,0));geometry.setTranslation(0,0,0.5f * size);break;case cylinder:geometry=new Cylinder("_cylinder",50,50,0.5f * size,size,true);geometry.setTranslation(0,0,0.5f * size);break;case dart:geometry=new Cone("_dart",50,50,0.5f * size,size,true);geometry.setTranslation(0,0,0.5f * size);break;case disk:geometry=new Disk("_disk",50,50,0.5 * size);break;case dome:geometry=new Dome("_dome",25,50,0.5f * size);geometry.setRotation(new Matrix3().fromAngles(Math.PI / 2,0,0));break;case flag:geometry=new Flag("_flag",2 * size);geometry.setTranslation(0,0,size);break;case pyramid:geometry=new Pyramid("_pyramid",size,size);geometry.setRotation(new Matrix3().fromAngles(Math.PI / 2,0,0));geometry.setTranslation(0,0,size * 0.5f);break;case quad:geometry=new Quad("_quad",size,size);break;case rod:geometry=new Rod("_rod",20,20,0.1f * size,size);geometry.setTranslation(0,0,0.1f * size);break;case sphere:geometry=new Sphere("_sphere",50,50,size * 0.5f);break;case teapot:geometry=new Teapot("_teapot");geometry.setRotation(new Matrix3().fromAngles(Math.PI / 2,0,0));geometry.setScale(new Vector3(0.25f * size,0.25f * size,0.25f * size));break;case torus:geometry=new Torus("_torus",50,50,0.1f * size,0.5f * size);break;}if (geometry == null) {return (new Shape(name,ShapeType.none,null));}return (new Shape(name,shapeType,geometry));}  }
class C{  public boolean handleEvent(ValidationEvent event){  this.errors.add(new ValidationErrorObject(event.getSeverity(),event.getLocator().getLineNumber(),event.getMessage()));  return this.continueOnError;}  }
class C{  void resume(){  paused.set(false);synchronized (pauseLock) {    pauseLock.notifyAll();  }}  }
class C{  public BufferIterator bigEndianIterator(){  return new NioBufferIterator(address,(int)size,ByteOrder.nativeOrder() != ByteOrder.BIG_ENDIAN);}  }
class C{  void insertAfter(NewElement newElement,Element relatedToNew,Element refElement){  final int level=level(refElement);  final int lengthBefore=xml.length;  xml=insertInto(xml,refElement.end.right + 1,'\n' + tabulate(newElement.asString(),level));  shiftSegments(refElement.end.right,xml.length - lengthBefore);  applySegments(newElement,relatedToNew,refElement.end.right,level);  registerElement(relatedToNew);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.ABSTRACT_CATCH_BLOCK__BLOCK:    return block != null;}return super.eIsSet(featureID);}  }
class C{  public ContainerPanel(){  panel=new PhantomLayoutPanel();  if (TransparencyMode.TRANSPARENCY == Transparency.TRANSLUCENT) {    panel.setLayout(new AnimatedLayout(new SBoxLayout(SBoxLayout.VERTICAL)));  } else {    panel.setLayout(new SBoxLayout(SBoxLayout.VERTICAL));  }  setViewportView(panel);  setBorder(null);  String orderProp=WtWindowManager.getInstance().getProperty(WINDOW_ORDER_PROPERTY,"character;bag;keyring");  windowOrder=new ArrayList<String>(Arrays.asList(orderProp.split(";")));  getVerticalScrollBar().setUnitIncrement(16);}  }
class C{  @Override public Set<K> keySet(){  Set<K> ks=our_keySet;  return (ks != null ? ks : (our_keySet=new KeySet()));}  }
class C{  protected void drawWaferEdge(Graphics2D g2,Rectangle2D plotArea){  Ellipse2D waferEdge=getWaferEdge(plotArea);  g2.setColor(Color.black);  g2.draw(waferEdge);  Arc2D notch;  Rectangle2D waferFrame=waferEdge.getFrame();  double notchDiameter=waferFrame.getWidth() * 0.04;  if (this.orientation == PlotOrientation.HORIZONTAL) {    Rectangle2D notchFrame=new Rectangle2D.Double(waferFrame.getX() + waferFrame.getWidth() - (notchDiameter / 2),waferFrame.getY() + (waferFrame.getHeight() / 2) - (notchDiameter / 2),notchDiameter,notchDiameter);    notch=new Arc2D.Double(notchFrame,90d,180d,Arc2D.OPEN);  } else {    Rectangle2D notchFrame=new Rectangle2D.Double(waferFrame.getX() + (waferFrame.getWidth() / 2) - (notchDiameter / 2),waferFrame.getY() + waferFrame.getHeight() - (notchDiameter / 2),notchDiameter,notchDiameter);    notch=new Arc2D.Double(notchFrame,0d,180d,Arc2D.OPEN);  }  g2.setColor(Color.white);  g2.fill(notch);  g2.setColor(Color.black);  g2.draw(notch);}  }
class C{  public CHelpSaveField(final IHelpInformation information){  this("",information);}  }
class C{  List<IsilonEvent> filterEvents(List<IsilonEvent> events){  long mostRecentTimestamp=_latestTimeThreshold;  List<IsilonEvent> filteredEvents=new ArrayList<IsilonEvent>();  for (  IsilonEvent event : events) {    long latestTime=event.getLatestTime();    if (latestTime > _latestTimeThreshold) {      filteredEvents.add(event);      if (latestTime > mostRecentTimestamp) {        mostRecentTimestamp=latestTime;      }    }  }  _mostRecentTimestampInPollingCycle=mostRecentTimestamp;  return filteredEvents;}  }
class C{  public static void ICONST_1(){  if (ignoreCallback)   return;  ignoreCallback=true;  vm.countCallback();  try {    for (    IVM listener : vm.listeners)     listener.ICONST_1();  } catch (  Throwable t) {    handleException(t);  }  ignoreCallback=false;}  }
class C{  @Override public void receive(float i,float q){  mCounter++;  if (mCounter >= mDecimationRate) {    mListener.receive(i,q);    mCounter=0;  }}  }
class C{  public static void reset(final long seed){  lastUsedSeed=seed;  internalCounter=0;  getRandom().setSeed(seed);}  }
class C{  public ManagedThread(Runnable r,String name){  super(r,name);  setPriority(Thread.NORM_PRIORITY);  setUncaughtExceptionHandler(HANDLER);}  }
class C{  public ObjectiveFilterParser(Element element,Match match) throws FilterException {  String objectiveProperty=element.getText();  if (objectiveProperty == null) {    throw new MissingFilterPropertyException("objective",element);  }  Objective objective=Objective.getObjectiveById(match,objectiveProperty);  if (objective == null) {    throw new InvalidFilterPropertyException("objective",element);  }  this.objective=objective;}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }  p_C_RfQResponse_ID=getRecord_ID();}  }
class C{  public boolean isSetValue(){  return this.value != null;}  }
class C{  public void addValue(double data,double weight){  m_NumValues+=weight;  m_SumOfValues+=data * weight;  if (m_NumValues != 0) {    m_Lambda=m_SumOfValues / m_NumValues;  }}  }
class C{  private static Map<String,Integer> optionArgDefs(){  Map<String,Integer> optionArgDefs=new HashMap<>();  optionArgDefs.put("sourceTokens",1);  optionArgDefs.put("nBestList",1);  optionArgDefs.put("dependencies",1);  optionArgDefs.put("lm",1);  optionArgDefs.put("scoreFrag",0);  optionArgDefs.put("scoreStop",0);  optionArgDefs.put("transitive",0);  optionArgDefs.put("classMap",1);  optionArgDefs.put("headClasses",0);  return optionArgDefs;}  }
class C{  private static final void writeDoc(Document doc,OutputStream out) throws IOException {  try {    TransformerFactory tf=TransformerFactory.newInstance();    try {      tf.setAttribute("indent-number",new Integer(2));    } catch (    IllegalArgumentException iae) {    }    Transformer t=tf.newTransformer();    t.setOutputProperty(OutputKeys.DOCTYPE_SYSTEM,doc.getDoctype().getSystemId());    t.setOutputProperty(OutputKeys.INDENT,"yes");    t.transform(new DOMSource(doc),new StreamResult(new BufferedWriter(new OutputStreamWriter(out,"UTF-8"))));  } catch (  TransformerException e) {    throw new AssertionError(e);  }}  }
class C{  public static String serializeAddressList(List<String> addressList){  StringBuilder sb=new StringBuilder();  for (  String s : addressList) {    if (sb.length() != 0) {      sb.append(",");    }    sb.append(s);  }  return sb.toString();}  }
class C{  private static Connection lastConnection(final List<Object> stack){  return stack.size() < 2 ? null : (Connection)stack.get(stack.size() - 2);}  }
class C{  private void writeOperationsArray(IndentingWriter p) throws IOException {  p.plnI("private static final " + idOperation + "[] operations = {");  for (int i=0; i < remoteMethods.length; i++) {    if (i > 0)     p.pln(",");    p.p("new " + idOperation + "(\""+ remoteMethods[i].getOperationString()+ "\")");  }  p.pln();  p.pOln("};");}  }
class C{  public synchronized void load(InputStream input) throws IOException {  PropertiesReader reader=new PropertiesReader(new InputStreamReader(input));  try {    while (true) {      String line=reader.readProperty();      int equalSign=line.indexOf('=');      if (equalSign > 0) {        String key=line.substring(0,equalSign).trim();        String value=line.substring(equalSign + 1).trim();        if ("".equals(value))         continue;        if (getInclude() != null && key.equalsIgnoreCase(getInclude())) {          File file=null;          if (value.startsWith(fileSeparator)) {            file=new File(value);          } else {            if (value.startsWith("." + fileSeparator)) {              value=value.substring(2);            }            file=new File(basePath + value);          }          if (file != null && file.exists() && file.canRead()) {            load(new FileInputStream(file));          }        } else {          addProperty(key,value);        }      }    }  } catch (  NullPointerException e) {    return;  }}  }
class C{  public void dragOver(DropTargetDragEvent dtde){}  }
class C{  static void indexDoc(IndexWriter fsWriter,File triplesTextFile) throws IOException {  BufferedReader theReader=new BufferedReader(new FileReader(triplesTextFile));  int linecnt=0;  String lineIn;  while ((lineIn=theReader.readLine()) != null) {    java.util.StringTokenizer theTokenizer=new java.util.StringTokenizer(lineIn,"\t");    if ((++linecnt % 10000 == 0) || (linecnt < 10000 && linecnt % 1000 == 0)) {      VerbatimLogger.info((linecnt) + " ... ");    }    try {      if (theTokenizer.countTokens() < 3) {        VerbatimLogger.warning("Line in predication file does not have three delimited fields: " + lineIn + "\n");        continue;      }      String subject=theTokenizer.nextToken().trim().toLowerCase().replaceAll(" ","_");      String predicate=theTokenizer.nextToken().trim().toUpperCase().replaceAll(" ","_");      String object=theTokenizer.nextToken().trim().toLowerCase().replaceAll(" ","_");      Document doc=new Document();      doc.add(new TextField("subject",subject,Field.Store.YES));      doc.add(new TextField("predicate",predicate,Field.Store.YES));      doc.add(new TextField("object",object,Field.Store.YES));      doc.add(new TextField("predication",subject + predicate + object,Field.Store.NO));      fsWriter.addDocument(doc);    } catch (    Exception e) {      System.out.println(lineIn);      e.printStackTrace();    }  }  VerbatimLogger.info("\n");  theReader.close();}  }
class C{  public boolean hasReadDistributionPermission(){  return permissionService.hasPermission(SpPermission.READ_REPOSITORY);}  }
class C{  public synchronized int socketReadersCreated(){  return sockReadersCreated;}  }
class C{  public MapNode nextStop(){  MapNode next=stops.get(index);  if (comingBack) {    index--;  } else {    index++;  }  if (index < 0) {    comingBack=false;    index=1;  }  if (index >= stops.size()) {    if (type == PINGPONG) {      comingBack=true;      index=stops.size() - 1;    } else {      index=0;    }  }  return next;}  }
class C{  public void encodeParams(){  for (  Map.Entry<String,String> e : params.entrySet()) {    try {      params.put(e.getKey(),URLEncoder.encode(e.getValue(),"UTF-8"));    } catch (    UnsupportedEncodingException e1) {      e1.printStackTrace();    }  }}  }
class C{  public boolean isPolyfill(){  return this.isDeclaredPolyfill();}  }
class C{  public BufferingChunkedInput(ReadableByteChannel channel,int bufferCapacity){  assert bufferCapacity >= 1;  this.buffer=ByteBuffer.allocate(bufferCapacity).order(ByteOrder.BIG_ENDIAN);  this.buffer.limit(0);  this.scratchBuffer=ByteBuffer.allocate(8).order(ByteOrder.BIG_ENDIAN);  this.channel=channel;  this.state=State.AWAITING_CHUNK;}  }
class C{  private Product prepareMarketingProduct(long technicalProductKey,VOService productToModify,boolean isCreation) throws ObjectNotFoundException, OperationNotPermittedException, ValidationException, NonUniqueBusinessKeyException, ServiceStateException, ConcurrentModificationException {  PlatformUser currentUser=dm.getCurrentUser();  Organization currentUserOrg=currentUser.getOrganization();  TechnicalProduct tProd=dm.getReference(TechnicalProduct.class,technicalProductKey);  PermissionCheck.hasMarketingPermission(tProd,currentUserOrg,dm,logger);  Product product=null;  String oldProductId=null;  if (isCreation) {    product=ProductAssembler.toNewTemplateProduct(productToModify,tProd,currentUserOrg);  } else {    product=dm.getReference(Product.class,productToModify.getKey());    ProductValidator.validateInactiveOrSuspended(ProductAssembler.getProductId(product),product.getStatus());    oldProductId=product.getProductId();    if (!oldProductId.equals(productToModify.getServiceId())) {      validateChangedId(productToModify.getServiceId(),currentUserOrg);    }    product=ProductAssembler.updateProduct(product,productToModify);  }  List<Parameter> parametersToLog=modifyParameters(productToModify,currentUser,tProd,product,isCreation);  if (isCreation) {    dm.persist(product);    CatalogEntry catalogEntry=QueryBasedObjectFactory.createCatalogEntry(product,null);    copyOperatorPriceModel(catalogEntry,currentUserOrg.getOperatorPriceModel());    dm.persist(catalogEntry);    copyDefaultPaymentEnablement(product,currentUserOrg);  }  for (  Parameter param : parametersToLog) {    logUpdateServiceParameters(dm,product,param);  }  dm.flush();  String productName=productToModify.getName();  String productDescription=productToModify.getDescription();  String productShortDescription=productToModify.getShortDescription();  String productCustomTabName=productToModify.getCustomTabName();  String userLocale=currentUser.getLocale();  String oldDescription=localizer.getLocalizedTextFromDatabase(userLocale,product.getKey(),LocalizedObjectTypes.PRODUCT_MARKETING_DESC);  String oldShortDescription=localizer.getLocalizedTextFromDatabase(userLocale,product.getKey(),LocalizedObjectTypes.PRODUCT_SHORT_DESCRIPTION);  String oldProductName=localizer.getLocalizedTextFromDatabase(userLocale,product.getKey(),LocalizedObjectTypes.PRODUCT_MARKETING_NAME);  String oldCustomTabName=localizer.getLocalizedTextFromDatabase(userLocale,product.getKey(),LocalizedObjectTypes.PRODUCT_CUSTOM_TAB_NAME);  isLocalizedTextChanged=false;  if (productName != null && !productName.equals(oldProductName)) {    isLocalizedTextChanged=true;    BLValidator.isName(ProductAssembler.FIELD_NAME_NAME,productName,false);    localizer.storeLocalizedResource(userLocale,product.getKey(),LocalizedObjectTypes.PRODUCT_MARKETING_NAME,productName);  }  isDescriptionChanged=false;  if (productDescription != null && !productDescription.equals(oldDescription)) {    isLocalizedTextChanged=true;    isDescriptionChanged=true;    localizer.storeLocalizedResource(userLocale,product.getKey(),LocalizedObjectTypes.PRODUCT_MARKETING_DESC,productDescription);  }  isShortDescriptionChanged=false;  if (productShortDescription != null && !productShortDescription.equals(oldShortDescription)) {    isLocalizedTextChanged=true;    isShortDescriptionChanged=true;    localizer.storeLocalizedResource(userLocale,product.getKey(),LocalizedObjectTypes.PRODUCT_SHORT_DESCRIPTION,productShortDescription);  }  isCustomTabNameChanged=false;  if (productCustomTabName != null && !productCustomTabName.equals(oldCustomTabName)) {    isLocalizedTextChanged=true;    isCustomTabNameChanged=true;    localizer.storeLocalizedResource(userLocale,product.getKey(),LocalizedObjectTypes.PRODUCT_CUSTOM_TAB_NAME,productCustomTabName);  }  if (isCreation) {    List<VOLocalizedText> techDescriptions=localizer.getLocalizedValues(tProd.getKey(),LocalizedObjectTypes.TEC_PRODUCT_TECHNICAL_DESC);    if (techDescriptions != null) {      long key=product.getKey();      for (      VOLocalizedText desc : techDescriptions) {        String locale=desc.getLocale();        if (!userLocale.equals(locale)) {          localizer.storeLocalizedResource(locale,key,LocalizedObjectTypes.PRODUCT_MARKETING_DESC,desc.getText());        }      }    }  }  dm.flush();  dm.refresh(product);  return product;}  }
class C{  public Node findNodeByIdentity(final NodeIdentity identity){  for (  final Node node : this.getAllNodes()) {    if (node.getIdentity().equals(identity)) {      return node;    }  }  return null;}  }
class C{  public RuleCharacterIterator(String text,SymbolTable sym,ParsePosition pos){  if (text == null || pos.getIndex() > text.length()) {    throw new IllegalArgumentException();  }  this.text=text;  this.sym=sym;  this.pos=pos;  buf=null;}  }
class C{  private static String out(float f){  return nf.format(f);}  }
class C{  public <K,V>void saveToGeode(String regionPath,PairFunction<T,K,V> func,GeodeConnectionConf connConf){  dsf.saveToGeode(regionPath,func,connConf,emptyStrStrMap());}  }
class C{  public Callsign(){  super(REGEX_CS,true,1.0);}  }
class C{  public static void json(String tag,String json,int methodCount){  validateMethodCount(methodCount);  if (TextUtils.isEmpty(json)) {    d(tag,"Empty/Null json content",methodCount);    return;  }  try {    if (json.startsWith("{")) {      JSONObject jsonObject=new JSONObject(json);      String message=jsonObject.toString(JSON_INDENT);      d(tag,message,methodCount);      return;    }    if (json.startsWith("[")) {      JSONArray jsonArray=new JSONArray(json);      String message=jsonArray.toString(JSON_INDENT);      d(tag,message,methodCount);    }  } catch (  JSONException e) {    d(tag,e.getCause().getMessage() + "\n" + json,methodCount);  }}  }
class C{  @Transactional public void voteUpArticle(final String userId,final String articleId) throws ServiceException {  try {    up(userId,articleId,Vote.DATA_TYPE_C_ARTICLE);  } catch (  final RepositoryException e) {    final String msg="User[id=" + userId + "] vote up an article[id="+ articleId+ "] failed";    LOGGER.log(Level.ERROR,msg,e);    throw new ServiceException(msg);  }}  }
class C{  @SuppressWarnings("PMD.AvoidInstantiatingObjectsInLoops") private static Iterable<Directive> transform(final Iterable<String> texts){  final Collection<Directive> list=new LinkedList<>();  for (  final String text : texts) {    try {      for (      final Directive dir : new Directives(text)) {        list.add(dir);      }    } catch (    final SyntaxException ex) {      throw new IllegalStateException(ex);    }  }  return list;}  }
class C{  protected HashEntry<K,V> entryNext(HashEntry<K,V> entry){  return entry.next;}  }
class C{  public void parseCaseByteCode(TextStream stream,DataOutputStream dataStream,Map<String,Map<String,Vertex>> elements,boolean debug,Network network) throws IOException {  stream.nextWord();  stream.skipWhitespace();  dataStream.writeLong(network.createVertex(Primitive.CASE).getId());  String next=stream.peekWord();  boolean anyOrNone=false;  if (next.equalsIgnoreCase(ANY)) {    stream.nextWord();    next=stream.peekWord();    if (next.equalsIgnoreCase(OR)) {      stream.nextWord();      stream.skipWhitespace();      ensureNext(NONE,stream);      anyOrNone=true;    }  }  Vertex variable=parseElementByteCode(stream,dataStream,elements,debug,network);  if (!anyOrNone && variable != null && variable.instanceOf(Primitive.ARRAY)) {    variable.addRelationship(Primitive.TYPE,Primitive.REQUIRED);  }  next=stream.nextWord();  if (next.equalsIgnoreCase(AS)) {    dataStream.writeLong(network.createVertex(Primitive.AS).getId());    parseElementByteCode(stream,dataStream,elements,debug,network);    next=stream.nextWord();  }  if (next.equalsIgnoreCase(TOPIC)) {    dataStream.writeLong(network.createVertex(Primitive.TOPIC).getId());    parseElementByteCode(stream,dataStream,elements,debug,network);    next=stream.nextWord();  }  if (next.equalsIgnoreCase(THAT)) {    dataStream.writeLong(network.createVertex(Primitive.THAT).getId());    parseElementByteCode(stream,dataStream,elements,debug,network);    next=stream.nextWord();  }  if (next.equalsIgnoreCase(GOTO)) {    dataStream.writeLong(network.createVertex(Primitive.GOTO).getId());    stream.skipWhitespace();    boolean parseGoto=true;    while (parseGoto) {      dataStream.writeLong(parseElementName(Primitive.STATE,stream,elements,debug,network).getId());      stream.skipWhitespace();      if (stream.peek() == ',') {        stream.skip();      } else {        parseGoto=false;      }    }    dataStream.writeLong(0l);  } else   if (next.equalsIgnoreCase(TEMPLATE) || next.equalsIgnoreCase(ANSWER)) {    dataStream.writeLong(network.createVertex(Primitive.TEMPLATE).getId());    parseElementByteCode(stream,dataStream,elements,debug,network);  } else   if (next.equals(RETURN)) {    dataStream.writeLong(network.createVertex(Primitive.GOTO).getId());    dataStream.writeLong(network.createVertex(Primitive.RETURN).getId());    dataStream.writeLong(0l);  } else {    stream.setPosition(stream.getPosition() - next.length());    throw new SelfParseException("expected one of 'goto, template, answer, return, that, topic', found: " + next,stream);  }  next=stream.peekWord();  if (next.equalsIgnoreCase(FOR)) {    dataStream.writeLong(network.createVertex(Primitive.FOR).getId());    stream.nextWord();    ensureNext(EACH,stream);    parseElementByteCode(stream,dataStream,elements,debug,network);    ensureNext(OF,stream);    parseElementByteCode(stream,dataStream,elements,debug,network);    dataStream.writeLong(0l);  }  dataStream.writeLong(0l);  ensureNext(';',stream);}  }
class C{  public boolean isWrapperFor(final Class<?> interfaceOrWrapper) throws SQLException {  return interfaceOrWrapper.isInstance(this);}  }
class C{  public String toString(){  return "Close session action.";}  }
class C{  private RrdEntry requestEmpty(String path) throws InterruptedException, IOException {  RrdEntry ref=waitEmpty(path);  ref.count=1;  return ref;}  }
class C{  public int selectPivotIndex(Comparable<?>[] ar,int left,int right){  return right;}  }
class C{  public LinkServerStarter(int port){  serverPort=port;}  }
class C{  public boolean isFull(){  return hi() - lo() == 2 * S2.M_PI;}  }
class C{  @Override public int LA(int i){  int la=super.LA(i);  return Character.toLowerCase(la);}  }
class C{  public JMetalAlgorithms(){  super();}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case TypeRefsPackage.BOUND_THIS_TYPE_REF___GET_TYPING_STRATEGY:    return getTypingStrategy();case TypeRefsPackage.BOUND_THIS_TYPE_REF___SET_TYPING_STRATEGY__TYPINGSTRATEGY:  setTypingStrategy((TypingStrategy)arguments.get(0));return null;case TypeRefsPackage.BOUND_THIS_TYPE_REF___GET_TYPE_REF_AS_STRING:return getTypeRefAsString();case TypeRefsPackage.BOUND_THIS_TYPE_REF___GET_DECLARED_UPPER_BOUND:return getDeclaredUpperBound();case TypeRefsPackage.BOUND_THIS_TYPE_REF___IS_DEF_SITE_STRUCTURAL_TYPING:return isDefSiteStructuralTyping();case TypeRefsPackage.BOUND_THIS_TYPE_REF___IS_USE_SITE_STRUCTURAL_TYPING:return isUseSiteStructuralTyping();case TypeRefsPackage.BOUND_THIS_TYPE_REF___GET_STRUCTURAL_MEMBERS:return getStructuralMembers();case TypeRefsPackage.BOUND_THIS_TYPE_REF___HAS_POSTPONED_SUBSTITUTION_FOR__TYPEVARIABLE:return hasPostponedSubstitutionFor((TypeVariable)arguments.get(0));}return super.eInvoke(operationID,arguments);}  }
class C{  public void storeLocal(final int local,final Type type){  setLocalType(local,type);  storeInsn(type,local);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:04.309 -0400",hash_original_method="F0725042EAC128B6189CDCD25CBEB8B6",hash_generated_method="B6E4CB0DC2E4D77BE59ABA74AE5A76C9") public DSAPublicKeyImpl(DSAPublicKeySpec keySpec){  super("DSA");  SubjectPublicKeyInfo spki;  p=keySpec.getP();  q=keySpec.getQ();  g=keySpec.getG();  ThreeIntegerSequence threeInts=new ThreeIntegerSequence(p.toByteArray(),q.toByteArray(),g.toByteArray());  AlgorithmIdentifier ai=new AlgorithmIdentifier(AlgNameMapper.map2OID("DSA"),threeInts.getEncoded());  y=keySpec.getY();  spki=new SubjectPublicKeyInfo(ai,ASN1Integer.getInstance().encode(y.toByteArray()));  setEncoding(spki.getEncoded());  params=(DSAParams)(new DSAParameterSpec(p,q,g));}  }
class C{  public static byte[] decode(String s){  char[] a=s.toCharArray();  if (a.length > 2 && a[0] == 'X' && a[1] == '\'' && a[a.length - 1] == '\'') {    byte[] result=new byte[(a.length - 3) / 2];    for (int i=2, k=0; i < a.length - 1; i+=2, k++) {      byte tmp;switch (a[i]) {case '0':        tmp=0;      break;case '1':    tmp=1;  break;case '2':tmp=2;break;case '3':tmp=3;break;case '4':tmp=4;break;case '5':tmp=5;break;case '6':tmp=6;break;case '7':tmp=7;break;case '8':tmp=8;break;case '9':tmp=9;break;case 'A':case 'a':tmp=10;break;case 'B':case 'b':tmp=11;break;case 'C':case 'c':tmp=12;break;case 'D':case 'd':tmp=13;break;case 'E':case 'e':tmp=14;break;case 'F':case 'f':tmp=15;break;default :tmp=0;break;}result[k]=(byte)(tmp << 4);switch (a[i + 1]) {case '0':tmp=0;break;case '1':tmp=1;break;case '2':tmp=2;break;case '3':tmp=3;break;case '4':tmp=4;break;case '5':tmp=5;break;case '6':tmp=6;break;case '7':tmp=7;break;case '8':tmp=8;break;case '9':tmp=9;break;case 'A':case 'a':tmp=10;break;case 'B':case 'b':tmp=11;break;case 'C':case 'c':tmp=12;break;case 'D':case 'd':tmp=13;break;case 'E':case 'e':tmp=14;break;case 'F':case 'f':tmp=15;break;default :tmp=0;break;}result[k]|=tmp;}return result;}byte[] result=new byte[a.length - 1];int i=0;int shift=s.charAt(i++);int j=0;while (i < s.length()) {int c;if ((c=s.charAt(i++)) == 1) {if ((c=s.charAt(i++)) == 1) {c=0;} else if (c == 2) {c=1;} else if (c == 3) {c='\'';} else {throw new IllegalArgumentException("invalid string passed to decoder: " + j);}}result[j++]=(byte)((c + shift) & 0xff);}int outLen=j;if (result.length != outLen) {result=byteCopy(result,0,outLen,new byte[outLen]);}return result;}  }
class C{  @SuppressWarnings("all") public static double test3(boolean f,int idx,double ad1,double ad2,double ad3,double ad4,double ad5,double ad6,double ad7,double ad8,double ad9,double ad10,double ad11,double ad12,double ad13,double ad14,double ad15,double ad16,float af1,float af2,float af3,float af4,float af5,float af6,float af7,float af8,float af9,float af10,float af11,float af12,float af13,float af14,float af15,float af16){switch (f ? idx + 16 : idx) {case 1:    return ad1;case 2:  return ad2;case 3:return ad3;case 4:return ad4;case 5:return ad5;case 6:return ad6;case 7:return ad7;case 8:return ad8;case 9:return ad9;case 10:return ad10;case 11:return ad11;case 12:return ad12;case 13:return ad13;case 14:return ad14;case 15:return ad15;case 16:return ad16;case 1 + 16:return af1;case 2 + 16:return af2;case 3 + 16:return af3;case 4 + 16:return af4;case 5 + 16:return af5;case 6 + 16:return af6;case 7 + 16:return af7;case 8 + 16:return af8;case 9 + 16:return af9;case 10 + 16:return af10;case 11 + 16:return af11;case 12 + 16:return af12;case 13 + 16:return af13;case 14 + 16:return af14;case 15 + 16:return af15;case 16 + 16:return af16;}Assert.fail();return 0;}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  @SuppressWarnings("unchecked") public static <E extends Object>Function<E,E> identity(){  return (Function<E,E>)IdentityFunction.INSTANCE;}  }
class C{  public void decrementActivation(double base,double decrementAmount){  activation-=decrementAmount;  if (activation < base) {    activation=base;  }}  }
class C{  public static byte[] openBox(byte[] header,byte[] cipherText,ActorBoxKey key) throws IntegrityException {  CBCHmacBox aesCipher=new CBCHmacBox(Crypto.createAES128(key.getKeyAES()),Crypto.createSHA256(),key.getMacAES());  CBCHmacBox kuzCipher=new CBCHmacBox(new KuznechikFastEngine(key.getKeyKuz()),new Streebog256(),key.getMacKuz());  byte[] kuzPackage=aesCipher.decryptPackage(header,ByteStrings.substring(cipherText,0,16),ByteStrings.substring(cipherText,16,cipherText.length - 16));  byte[] plainText=kuzCipher.decryptPackage(header,ByteStrings.substring(kuzPackage,0,16),ByteStrings.substring(kuzPackage,16,kuzPackage.length - 16));  int paddingSize=plainText[plainText.length - 1] & 0xFF;  if (paddingSize < 0 || paddingSize >= 16) {    throw new IntegrityException("Incorrect padding!");  }  PKCS7Padding padding=new PKCS7Padding();  if (!padding.validate(plainText,plainText.length - 1 - paddingSize,paddingSize)) {    throw new IntegrityException("Padding does not isMatch!");  }  return ByteStrings.substring(plainText,0,plainText.length - 1 - paddingSize);}  }
class C{  public static double log10(final double x){  final double hiPrec[]=new double[2];  final double lores=log(x,hiPrec);  if (Double.isInfinite(lores)) {    return lores;  }  final double tmp=hiPrec[0] * HEX_40000000;  final double lna=hiPrec[0] + tmp - tmp;  final double lnb=hiPrec[0] - lna + hiPrec[1];  final double rln10a=0.4342944622039795;  final double rln10b=1.9699272335463627E-8;  return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;}  }
class C{  private static boolean isNetworkProblem(Object error){  return (error instanceof NetworkError);}  }
class C{  public boolean isD0Enabled(){  return this.isDigitalEnabled(0);}  }
class C{  public void verify(List<OCSPResp> ocspResponses,Date atDate){  if (ocspResponses == null || ocspResponses.isEmpty()) {    throw new IllegalArgumentException("List of OCSP responses cannot be null or empty");  }  verifyImpl(ocspResponses,atDate);}  }
class C{  public void push(final Type value){  if (value == null) {    mv.visitInsn(Opcodes.ACONST_NULL);  } else {switch (value.getSort()) {case Type.BOOLEAN:      mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Boolean","TYPE",CLDESC);    break;case Type.CHAR:  mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Character","TYPE",CLDESC);break;case Type.BYTE:mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Byte","TYPE",CLDESC);break;case Type.SHORT:mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Short","TYPE",CLDESC);break;case Type.INT:mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Integer","TYPE",CLDESC);break;case Type.FLOAT:mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Float","TYPE",CLDESC);break;case Type.LONG:mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Long","TYPE",CLDESC);break;case Type.DOUBLE:mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Double","TYPE",CLDESC);break;default :mv.visitLdcInsn(value);}}}  }
class C{  public Composer frequency(int frequency){  mFrequency=frequency;  return this;}  }
class C{  public boolean classExists(Identifier nm){  if (nm.isInner()) {    nm=nm.getTopName();  }  Type t=Type.tClass(nm);  try {    ClassDeclaration c=(ClassDeclaration)classes.get(t);    return (c != null) ? c.getName().equals(nm) : getPackage(nm.getQualifier()).classExists(nm.getName());  } catch (  IOException e) {    return true;  }}  }
class C{  public Builder binLogPosition(int pos){  this.innerBinLogPos=pos;  return this;}  }
class C{  protected void calculateTabRects(int tabPlacement,int tabCount){  super.calculateTabRects(tabPlacement,tabCount);  if (tabPlacement == TOP || tabPlacement == BOTTOM)   return;  int tabHeight=calculateMaxTabHeight(tabPlacement);  for (int i=0; i < rects.length; i++) {    int level=0;    Component comp=tabPane.getComponentAt(i);    if (comp instanceof JComponent) {      JComponent jc=(JComponent)comp;      try {        Integer ll=(Integer)jc.getClientProperty(CompiereLookAndFeel.TABLEVEL);        if (ll != null)         level=ll.intValue();      } catch (      Exception e) {        System.err.println("AdempiereTabbedPaneUI - ClientProperty: " + e.getMessage());      }    }    if (level != 0) {      if (tabPlacement == LEFT)       rects[i].x+=level * 5;      rects[i].width-=level * 5;    }    rects[i].height=tabHeight;    if (i > 0)     rects[i].y=rects[i - 1].y + tabHeight;  }}  }
class C{  public String nextString(char quote) throws JSONException {  char c;  StringBuffer sb=new StringBuffer();  for (; ; ) {    c=next();switch (c) {case 0:case '\n':case '\r':      throw syntaxError("Unterminated string");case '\\':    c=next();switch (c) {case 'b':    sb.append('\b');  break;case 't':sb.append('\t');break;case 'n':sb.append('\n');break;case 'f':sb.append('\f');break;case 'r':sb.append('\r');break;case 'u':try {sb.append((char)Integer.parseInt(next(4),16));} catch (NumberFormatException e) {throw new JSONException("Bad \\u number");}break;case '"':case '\'':case '\\':case '/':sb.append(c);break;default :throw syntaxError("Illegal escape.");}break;default :if (c == quote) {return sb.toString();}sb.append(c);}}}  }
class C{  private void doResetPassword(String newPassword){  if (alertIfMonkey(mActivity,R.string.monkey_reset_password)) {    return;  }  mDPM.resetPassword(newPassword,DevicePolicyManager.RESET_PASSWORD_REQUIRE_ENTRY);  AlertDialog.Builder builder=new AlertDialog.Builder(mActivity);  String message=mActivity.getString(R.string.reset_password_warning,newPassword);  builder.setMessage(message);  builder.setPositiveButton(R.string.reset_password_ok,null);  builder.show();}  }
class C{  public void testFailureWithSuccessRatioAndFailureThreshold(){  CircuitBreaker breaker=new CircuitBreaker().withSuccessThreshold(2,4).withFailureThreshold(1);  breaker.halfOpen();  HalfOpenState state=new HalfOpenState(breaker);  state.recordSuccess();  state.recordFailure();  state.recordFailure();  assertFalse(breaker.isOpen());  assertFalse(breaker.isClosed());  state.recordFailure();  assertTrue(breaker.isOpen());}  }
class C{  public void output(PrintWriter out){  out.write(createStartTag());  if (getFilterState())   out.write(getFilter().process(getTagText())); else   out.write(getTagText());  if (getNeedClosingTag())   out.write(createEndTag());}  }
class C{  public Word or(Word w2){  return new Word(value.or(w2.value));}  }
class C{  public StateMachineTransitionBuilder(ObjectPostProcessor<Object> objectPostProcessor){  super(objectPostProcessor);}  }
class C{  private static boolean matchBytePattern(final byte[] byteArray,final int offset,final byte[] pattern){  Preconditions.checkNotNull(byteArray);  Preconditions.checkNotNull(pattern);  Preconditions.checkArgument(offset >= 0);  if (pattern.length + offset > byteArray.length) {    return false;  }  for (int i=0; i < pattern.length; ++i) {    if (byteArray[i + offset] != pattern[i]) {      return false;    }  }  return true;}  }
class C{  public void revertView(){  if (mContent != null && mContent.getParent() == null) {    removeAllViews();    addView(mContent);  }}  }
class C{  public long resolveSkuId(final String sku){  final long skuId=NumberUtils.toLong(sku,0L);  if (skuId > 0L) {    bookmarkService.saveBookmarkForProduct(sku);    return skuId;  }  final String skuIdStr=bookmarkService.getSkuForURI(sku);  return NumberUtils.toLong(skuIdStr,0L);}  }
class C{  public void remove(AbstractAutomaton a){  int index=indexOf(a);synchronized (automats) {    automats.remove(a);  }  notify("Remove",null,Integer.valueOf(index));}  }
class C{  protected boolean isMatrixLocationTaken(int horizontalIndex,int verticalIndex,int numCellsToCheck){  try {    for (int i=numCellsToCheck - 1; i >= 0; i--) {      if (matrix[horizontalIndex][verticalIndex + i]) {        return true;      }    }  } catch (  ArrayIndexOutOfBoundsException aioobe) {    return allowPartials;  }  return false;}  }
class C{  public static Filter rejectFilter(){  return new CategoricalFilter(false);}  }
class C{  public boolean hasScore(){  return fieldSetFlags()[16];}  }
class C{  @Bean(name="messageSource") public DistributedResourceBundleMessageSource messageSource(){  return new DistributedResourceBundleMessageSource();}  }
class C{  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=zzLexicalState;    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 13:{        addToken(Token.PREPROCESSOR);      }case 22:    break;case 3:{    addNullToken();    return firstToken;  }case 23:break;case 16:{addToken(Token.LITERAL_CHAR);}case 24:break;case 15:{if (varDepths == null) {varDepths=new Stack();} else {varDepths.clear();}varDepths.push(Boolean.FALSE);start=zzMarkedPos - 2;yybegin(VAR);}case 25:break;case 12:{if (!varDepths.empty() && varDepths.peek() == Boolean.TRUE) {varDepths.pop();if (varDepths.empty()) {addToken(start,zzStartRead,Token.VARIABLE);yybegin(YYINITIAL);}}}case 26:break;case 11:{if (!varDepths.empty() && varDepths.peek() == Boolean.FALSE) {varDepths.pop();if (varDepths.empty()) {addToken(start,zzStartRead,Token.VARIABLE);yybegin(YYINITIAL);}}}case 27:break;case 4:{addToken(Token.WHITESPACE);}case 28:break;case 21:{addToken(Token.RESERVED_WORD);}case 29:break;case 20:{varDepths.push(Boolean.FALSE);}case 30:break;case 18:{addToken(Token.LITERAL_BACKQUOTE);}case 31:break;case 19:{varDepths.push(Boolean.TRUE);}case 32:break;case 1:{addToken(Token.IDENTIFIER);}case 33:break;case 5:{addToken(Token.ERROR_CHAR);addNullToken();return firstToken;}case 34:break;case 6:{addToken(Token.ERROR_STRING_DOUBLE);addNullToken();return firstToken;}case 35:break;case 10:{int temp1=zzStartRead;int temp2=zzMarkedPos;addToken(start,zzStartRead - 1,Token.VARIABLE);addToken(temp1,temp2 - 1,Token.COMMENT_EOL);addNullToken();return firstToken;}case 36:break;case 17:{addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);}case 37:break;case 14:{if (varDepths == null) {varDepths=new Stack();} else {varDepths.clear();}varDepths.push(Boolean.TRUE);start=zzMarkedPos - 2;yybegin(VAR);}case 38:break;case 7:{addToken(Token.COMMENT_EOL);addNullToken();return firstToken;}case 39:break;case 2:{addToken(Token.LITERAL_NUMBER_DECIMAL_INT);}case 40:break;case 8:{addToken(Token.OPERATOR);}case 41:break;case 9:{}case 42:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;switch (zzLexicalState) {case VAR:{addToken(start,zzStartRead - 1,Token.VARIABLE);addNullToken();return firstToken;}case 130:break;case YYINITIAL:{addNullToken();return firstToken;}case 131:break;default :return null;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  @After public void tearDown() throws Exception {  Broker backTestBroker=backTestbrokerModel.getBackTestBroker(this.tradestrategy.getId());  if (null != backTestBroker) {    timer.start();synchronized (lockCoreUtilsTest) {      while (!backTestbrokerModel.isConnected() && !connectionFailed && !backTestBroker.isDone()) {        lockCoreUtilsTest.wait();      }    }    timer.stop();  }  if (backTestbrokerModel.isConnected())   backTestbrokerModel.onDisconnect();  TradestrategyTest.clearDBData();}  }
class C{  public void log(String msg){  if (log != null) {    log.info(msg);  }}  }
class C{  public void registerJob(Class<? extends Job> jobClass,String identity,String cronExpression,JobDataMap data) throws SchedulerException {  JobDetail job=newJob(jobClass).withIdentity(identity,DEFAULT_JOB_GROUP).usingJobData(data).build();  Trigger trigger=newTrigger().withIdentity(identity,DEFAULT_JOB_GROUP).withSchedule(cronSchedule(cronExpression)).startNow().build();  jobScheduler.scheduleJob(job,trigger);}  }
class C{  public static short toShort(final String value){  return Short.parseShort(value);}  }
class C{  public static BigDecimal exp(BigDecimal x,int scale){  if (x.signum() == 0) {    return BigDecimal.valueOf(1);  } else   if (x.signum() == -1) {    return BigDecimal.valueOf(1).divide(exp(x.negate(),scale),scale,BigDecimal.ROUND_HALF_EVEN);  }  BigDecimal xWhole=x.setScale(0,BigDecimal.ROUND_DOWN);  if (xWhole.signum() == 0)   return expTaylor(x,scale);  BigDecimal xFraction=x.subtract(xWhole);  BigDecimal z=BigDecimal.valueOf(1).add(xFraction.divide(xWhole,scale,BigDecimal.ROUND_HALF_EVEN));  BigDecimal t=expTaylor(z,scale);  BigDecimal maxLong=BigDecimal.valueOf(Long.MAX_VALUE);  BigDecimal result=BigDecimal.valueOf(1);  while (xWhole.compareTo(maxLong) >= 0) {    result=result.multiply(intPower(t,Long.MAX_VALUE,scale)).setScale(scale,BigDecimal.ROUND_HALF_EVEN);    xWhole=xWhole.subtract(maxLong);    Thread.yield();  }  return result.multiply(intPower(t,xWhole.longValue(),scale)).setScale(scale,BigDecimal.ROUND_HALF_EVEN);}  }
class C{  public CGroupAction(final ZyGraph graph){  super("Group Selection");  m_graph=Preconditions.checkNotNull(graph,"IE02837: graph argument can not be null");  putValue(ACCELERATOR_KEY,HotKeys.GRAPH_GROUP_SELECTION_HK.getKeyStroke());}  }
class C{  public static boolean isConnectedWifi(Context context){  NetworkInfo info=getNetworkInfo(context);  return (info != null && info.isConnected() && info.getType() == ConnectivityManager.TYPE_WIFI);}  }
class C{  public void testPhraseVersusSloppyPhraseWithHoles() throws Exception {  Term t1=randomTerm();  Term t2=randomTerm();  PhraseQuery.Builder builder=new PhraseQuery.Builder();  builder.add(t1,0);  builder.add(t2,2);  PhraseQuery q1=builder.build();  builder.setSlop(2);  PhraseQuery q2=builder.build();  assertSubsetOf(q1,q2);}  }
class C{  public int addRootRow(){  if (getNodeCount() != 0) {    throw new IllegalStateException("Can only add a root node to an empty tree");  }  return (m_root=addNodeRow());}  }
class C{  @Override public synchronized CloneableIterator<byte[]> keys(final boolean up,final byte[] firstKey) throws IOException {  final List<CloneableIterator<byte[]>> c=new ArrayList<CloneableIterator<byte[]>>(this.blobs.size());  final Iterator<blobItem> i=this.blobs.iterator();  while (i.hasNext()) {    c.add(i.next().blob.keys(up,firstKey));  }  return MergeIterator.cascade(c,this.ordering,MergeIterator.simpleMerge,up);}  }
class C{  public DummySentimentAnnotation_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());  casFeat_mood=jcas.getRequiredFeatureDE(casType,"mood","uima.cas.String",featOkTst);  casFeatCode_mood=(null == casFeat_mood) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_mood).getCode();}  }
class C{  public static Vector3f interpolateCatmullRom(float u,float T,Vector3f p0,Vector3f p1,Vector3f p2,Vector3f p3,Vector3f store){  if (store == null) {    store=new Vector3f();  }  store.x=interpolateCatmullRom(u,T,p0.x,p1.x,p2.x,p3.x);  store.y=interpolateCatmullRom(u,T,p0.y,p1.y,p2.y,p3.y);  store.z=interpolateCatmullRom(u,T,p0.z,p1.z,p2.z,p3.z);  return store;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Object obj=stack.pop();  Show s=getShowObj(obj);  if (s != null)   return s.getCategories();  Album al=getAlbumObj(obj);  if (al != null)   return new String[]{al.getGenre()};  SeriesInfo si=getSeriesInfoObj(obj);  return (si == null) ? Pooler.EMPTY_STRING_ARRAY : new String[]{si.getCategory()};}  }
class C{  public void addShape3D(float x,float y,float z,ArrayList<Coord2D> coordinates,float depth,int shapeTextureWidth,int shapeTextureHeight,int sideTextureWidth,int sideTextureHeight,int direction,float[] faceLengths){  addShape3D(x,y,z,new Shape2D(coordinates),depth,shapeTextureWidth,shapeTextureHeight,sideTextureWidth,sideTextureHeight,direction,faceLengths);}  }
class C{  public VasaAssociationObject[] queryAssociatedLunsForPort(String[] portId) throws InvalidArgument, InvalidSession, StorageFault, NotImplemented {  final String methodName="queryAssociatedLunsForPort(): ";  log.info(methodName + "Entry");  if (portId != null) {    log.debug(methodName + "input port Ids[" + Arrays.asList(portId)+ "]");  }  sslUtil.checkHttpRequest(true,true);  SOSManager sosManager=contextManager.getSOSManager();  VasaAssociationObject[] vasaAsssociationObjs=sosManager.queryAssociatedLUNsForPort(portId);  log.info(methodName + "Exit returning vasa association objects of size[" + vasaAsssociationObjs.length+ "]");  return vasaAsssociationObjs;}  }
class C{  public static List<GeoTimeSerie> commonTicks(List<GeoTimeSerie> series){  if (1 == series.size()) {    GeoTimeSerie serie=series.get(0).clone();    List<GeoTimeSerie> result=new ArrayList<GeoTimeSerie>();    result.add(serie);    return result;  }  for (  GeoTimeSerie serie : series) {    GTSHelper.sort(serie);  }  int[] idx=new int[series.size()];  int minticks=Integer.MAX_VALUE;  int leader=-1;  for (int i=0; i < series.size(); i++) {    if (series.get(i).values < minticks) {      leader=i;      minticks=series.get(i).values;    }  }  GeoTimeSerie leadergts=series.get(leader);  List<GeoTimeSerie> result=new ArrayList<GeoTimeSerie>();  for (int i=0; i < series.size(); i++) {    result.add(series.get(i).cloneEmpty(series.get(i).values / 2));  }  if (0 == minticks) {    return result;  }  while (true) {    long target=leadergts.ticks[idx[leader]];    boolean match=true;    for (int i=0; i < series.size(); i++) {      if (i == leader) {        continue;      }      GeoTimeSerie serie=series.get(i);      while (idx[i] < serie.values && serie.ticks[idx[i]] < target) {        idx[i]++;      }      if (idx[i] >= serie.values) {        return result;      }      if (serie.ticks[idx[i]] > target) {        while (idx[leader] < leadergts.values && leadergts.ticks[idx[leader]] < serie.ticks[idx[i]]) {          idx[leader]++;        }        if (idx[leader] >= leadergts.values) {          return result;        }        match=false;        break;      }    }    if (match) {      for (int i=0; i < series.size(); i++) {        GeoTimeSerie serie=series.get(i);        GTSHelper.setValue(result.get(i),GTSHelper.tickAtIndex(serie,idx[i]),GTSHelper.locationAtIndex(serie,idx[i]),GTSHelper.elevationAtIndex(serie,idx[i]),GTSHelper.valueAtIndex(serie,idx[i]),false);      }      idx[leader]++;      if (idx[leader] >= leadergts.values) {        return result;      }    }  }}  }
class C{  private synchronized void trim(){  while (mCurrentSize > mSizeLimit) {    byte[] buf=mBuffersByLastUse.remove(0);    mBuffersBySize.remove(buf);    mCurrentSize-=buf.length;  }}  }
class C{  private String token(final String home,final String code) throws IOException {  final String uri=this.tkhref.toString();  return new JdkRequest(uri).method("POST").header("Accept","application/xml").body().formParam("grant_type","authorization_code").formParam("client_id",this.app).formParam("redirect_uri",home).formParam("client_secret",this.key).formParam(PsLinkedin.CODE,code).back().fetch().as(RestResponse.class).assertStatus(HttpURLConnection.HTTP_OK).as(JsonResponse.class).json().readObject().getString("access_token");}  }
class C{  public PrintException(String s,Exception e){  super(s,e);}  }
class C{  private CleartextMessages readCleartextMessages(){  return Exchange.lengthValueRead(testInputStream,CleartextMessages.class);}  }
class C{  public AmmoType createMunitionType(AmmoType base){  StringBuffer nameBuf;  StringBuffer internalName;  int index;  AmmoType munition=new AmmoType();  munition.setTonnage(base.getTonnage(null));switch (base.ammoType) {case AmmoType.T_AC:case AmmoType.T_AC_PRIMITIVE:case AmmoType.T_LAC:    nameBuf=new StringBuffer(name);  nameBuf.append(" ");munition.subMunitionBegin=0;munition.subMunitionLength=nameBuf.length();nameBuf.append(base.name);munition.name=nameBuf.toString();nameBuf=new StringBuffer(" - ");nameBuf.append(name);munition.addToEnd(base," - " + name);nameBuf=new StringBuffer(base.internalName);index=base.internalName.lastIndexOf("Ammo");nameBuf.insert(index,' ');nameBuf.insert(index,name);munition.setInternalName(nameBuf.toString());munition.shortName=munition.name;munition.addBeforeString(base,"Ammo",name + " ");nameBuf=null;break;case AmmoType.T_ARROW_IV:nameBuf=new StringBuffer(base.name);index=base.name.lastIndexOf("Ammo");nameBuf.insert(index,' ');if (name.endsWith("-IV")) {StringBuffer tempName=new StringBuffer(name);tempName.setLength(tempName.length() - 3);munition.subMunitionBegin=nameBuf.length();munition.subMunitionLength=tempName.length();nameBuf.insert(index,tempName.toString());} else {munition.subMunitionBegin=nameBuf.length();munition.subMunitionLength=name.length();nameBuf.insert(index,name);}munition.name=nameBuf.toString();nameBuf=new StringBuffer(base.internalName);index=base.internalName.lastIndexOf("Ammo");nameBuf.insert(index,name);munition.setInternalName(nameBuf.toString());munition.shortName=munition.name;munition.addBeforeString(base,"Ammo",name + " ");munition.addToEnd(base," - " + name);if (name.equals("Homing")) {munition.addToEnd(base," (HO)");}nameBuf=null;break;case AmmoType.T_SRM:case AmmoType.T_SRM_PRIMITIVE:case AmmoType.T_MRM:case AmmoType.T_LRM:case AmmoType.T_LRM_PRIMITIVE:case AmmoType.T_MML:case AmmoType.T_NLRM:case AmmoType.T_SRM_TORPEDO:case AmmoType.T_LRM_TORPEDO:nameBuf=new StringBuffer(" ");nameBuf.append(name);munition.setInternalName(base.internalName + nameBuf.toString());munition.addToEnd(base,nameBuf.toString());nameBuf.insert(0," -");munition.addToEnd(base,nameBuf.toString());nameBuf=new StringBuffer(base.name);index=base.name.lastIndexOf("Ammo");nameBuf.insert(index,' ');munition.subMunitionBegin=index;munition.subMunitionLength=name.length();nameBuf.insert(index,name);munition.name=nameBuf.toString();nameBuf=null;munition.shortName=munition.name;munition.addBeforeString(base,"Ammo",name + " ");break;case AmmoType.T_VGL:munition.name=base.name.replace("Fragmentation",name);munition.subMunitionBegin=base.subMunitionBegin;munition.subMunitionLength=name.length();munition.shortName=base.shortName.replace("Fragmentation",name);internalName=new StringBuffer(base.getInternalName());munition.setInternalName(internalName.insert(internalName.lastIndexOf("Ammo"),name + " ").toString());munition.addBeforeString(base,"Ammo",name + " ");break;case AmmoType.T_MEK_MORTAR:munition.name=base.name.replace("Shaped Charge",name);munition.subMunitionBegin=base.subMunitionBegin;munition.subMunitionLength=name.length();String abr="SC";if (type == AmmoType.M_AIRBURST) {abr="AB";} else if (type == AmmoType.M_ANTI_PERSONNEL) {abr="AP";} else if (type == AmmoType.M_FLARE) {abr="FL";} else if (type == AmmoType.M_SMOKE_WARHEAD) {abr="SM";} else if (type == AmmoType.M_SEMIGUIDED) {abr="SG";}munition.shortName=base.shortName.replace("SC",abr);internalName=new StringBuffer(base.getInternalName().replace("SC",abr));munition.setInternalName(internalName.toString());break;case AmmoType.T_LONG_TOM:case AmmoType.T_SNIPER:case AmmoType.T_THUMPER:case AmmoType.T_LONG_TOM_CANNON:case AmmoType.T_SNIPER_CANNON:case AmmoType.T_THUMPER_CANNON:case AmmoType.T_VEHICLE_FLAMER:case AmmoType.T_HEAVY_FLAMER:case AmmoType.T_FLUID_GUN:munition.subMunitionBegin=0;munition.subMunitionLength=name.length();nameBuf=new StringBuffer(name);nameBuf.append(" ");nameBuf.append(base.name);munition.name=nameBuf.toString();munition.setInternalName(munition.name);munition.addToEnd(base,munition.name);munition.shortName=munition.name;munition.addBeforeString(base,"Ammo",name + " ");break;default :throw new IllegalArgumentException("Don't know how to create munitions for " + base.ammoType);}munition.munitionType=type;if (!techLevel.isEmpty()) {munition.techLevel=techLevel;} else {munition.techLevel=base.techLevel;}munition.shots=Math.max(1,base.shots / weight);munition.kgPerShot=base.kgPerShot * weight;munition.ammoType=base.ammoType;double cost=base.cost;double bv=base.bv;if ((munition.getAmmoType() == T_AC) || (munition.getAmmoType() == T_LAC)) {if (munition.getMunitionType() == AmmoType.M_ARMOR_PIERCING) {cost*=4;}if ((munition.getMunitionType() == AmmoType.M_FLECHETTE) || (munition.getMunitionType() == AmmoType.M_FLAK)) {cost*=1.5;}if (munition.getMunitionType() == AmmoType.M_TRACER) {cost*=1.5;bv*=.25;}if (munition.getMunitionType() == AmmoType.M_INCENDIARY_AC) {cost*=2;}if (munition.getMunitionType() == AmmoType.M_PRECISION) {cost*=6;}}if (((munition.getAmmoType() == AmmoType.T_LRM) || (munition.getAmmoType() == AmmoType.T_MML) || (munition.getAmmoType() == AmmoType.T_SRM)|| (munition.getAmmoType() == AmmoType.T_NLRM)) && (munition.getMunitionType() == AmmoType.M_AX_HEAD)) {cost*=.5;}if (((munition.getAmmoType() == AmmoType.T_LRM) || (munition.getAmmoType() == AmmoType.T_MML) || (munition.getAmmoType() == AmmoType.T_SRM)|| (munition.getAmmoType() == AmmoType.T_NLRM)) && (munition.getMunitionType() == AmmoType.M_SMOKE_WARHEAD)) {cost*=.5;}if (((munition.getAmmoType() == AmmoType.T_LRM) || (munition.getAmmoType() == AmmoType.T_MML) || (munition.getAmmoType() == AmmoType.T_NLRM)) && (munition.getMunitionType() == AmmoType.M_INCENDIARY_LRM)) {cost*=1.5;}if (((munition.getAmmoType() == AmmoType.T_SRM) || (munition.getAmmoType() == AmmoType.T_MML)) && (munition.getMunitionType() == AmmoType.M_INFERNO)) {cost=13500;}if (((munition.getAmmoType() == AmmoType.T_LRM) || (munition.getAmmoType() == AmmoType.T_MML) || (munition.getAmmoType() == AmmoType.T_NLRM)) && (munition.getMunitionType() == AmmoType.M_SEMIGUIDED)) {cost*=3;}if (((munition.getAmmoType() == AmmoType.T_LRM) || (munition.getAmmoType() == AmmoType.T_MML) || (munition.getAmmoType() == AmmoType.T_NLRM)) && (munition.getMunitionType() == AmmoType.M_SWARM)) {cost*=2;}if (((munition.getAmmoType() == AmmoType.T_LRM) || (munition.getAmmoType() == AmmoType.T_MML) || (munition.getAmmoType() == AmmoType.T_NLRM)) && (munition.getMunitionType() == AmmoType.M_SWARM_I)) {cost*=3;bv*=.2;}if (((munition.getAmmoType() == AmmoType.T_LRM) || (munition.getAmmoType() == AmmoType.T_MML) || (munition.getAmmoType() == AmmoType.T_NLRM)) && (munition.getMunitionType() == AmmoType.M_THUNDER)) {cost*=2;}if (((munition.getAmmoType() == AmmoType.T_LRM) || (munition.getAmmoType() == AmmoType.T_MML) || (munition.getAmmoType() == AmmoType.T_NLRM)) && (munition.getMunitionType() == AmmoType.M_THUNDER_AUGMENTED)) {cost*=4;}if (((munition.getAmmoType() == AmmoType.T_LRM) || (munition.getAmmoType() == AmmoType.T_MML) || (munition.getAmmoType() == AmmoType.T_NLRM)) && (munition.getMunitionType() == AmmoType.M_THUNDER_INFERNO)) {cost*=1;}if (((munition.getAmmoType() == AmmoType.T_LRM) || (munition.getAmmoType() == AmmoType.T_MML) || (munition.getAmmoType() == AmmoType.T_NLRM)) && (munition.getMunitionType() == AmmoType.M_THUNDER_VIBRABOMB)) {cost*=2.5;}if (((munition.getAmmoType() == AmmoType.T_LRM) || (munition.getAmmoType() == AmmoType.T_MML) || (munition.getAmmoType() == AmmoType.T_NLRM)) && (munition.getMunitionType() == AmmoType.M_THUNDER_ACTIVE)) {cost*=3;}if (munition.getMunitionType() == AmmoType.M_HOMING) {cost=15000;munition.instantModeSwitch=true;munition.setModes(new String[]{"Homing","Non-Homing"});}if (munition.getMunitionType() == AmmoType.M_FASCAM) {cost*=1.5;}if (munition.getMunitionType() == AmmoType.M_INFERNO_IV) {cost*=1;}if (munition.getMunitionType() == AmmoType.M_VIBRABOMB_IV) {cost*=2;}if (munition.getMunitionType() == AmmoType.M_DAVY_CROCKETT_M) {cost*=50;}if (munition.getMunitionType() == AmmoType.M_LASER_INHIB) {cost*=4;}if (((munition.getAmmoType() == AmmoType.T_LRM) || (munition.getAmmoType() == AmmoType.T_MML) || (munition.getAmmoType() == AmmoType.T_SRM)|| (munition.getAmmoType() == AmmoType.T_NLRM)) && (munition.getMunitionType() == AmmoType.M_NARC_CAPABLE)) {cost*=2;}if (((munition.getAmmoType() == AmmoType.T_LRM) || (munition.getAmmoType() == AmmoType.T_MML) || (munition.getAmmoType() == AmmoType.T_SRM)|| (munition.getAmmoType() == AmmoType.T_NLRM)) && (munition.getMunitionType() == AmmoType.M_ARTEMIS_CAPABLE)) {cost*=2;}if (((munition.getAmmoType() == AmmoType.T_LRM) || (munition.getAmmoType() == AmmoType.T_MML) || (munition.getAmmoType() == AmmoType.T_SRM)|| (munition.getAmmoType() == AmmoType.T_NLRM)) && (munition.getMunitionType() == AmmoType.M_LISTEN_KILL)) {cost*=1.1;}if (((munition.getAmmoType() == AmmoType.T_LRM) || (munition.getAmmoType() == AmmoType.T_MML) || (munition.getAmmoType() == AmmoType.T_SRM)|| (munition.getAmmoType() == AmmoType.T_NLRM)) && ((munition.getMunitionType() == AmmoType.M_ANTI_TSM) || (munition.getMunitionType() == AmmoType.M_DEAD_FIRE) || (munition.getMunitionType() == AmmoType.M_FRAGMENTATION))) {cost*=2;}if (((munition.getAmmoType() == AmmoType.T_MML) || (munition.getAmmoType() == AmmoType.T_SRM)) && ((munition.getMunitionType() == AmmoType.M_TANDEM_CHARGE) || (munition.getMunitionType() == AmmoType.M_ARTEMIS_V_CAPABLE))) {cost*=5;}if (((munition.getAmmoType() == AmmoType.T_LRM) || (munition.getAmmoType() == AmmoType.T_MML) || (munition.getAmmoType() == AmmoType.T_SRM)|| (munition.getAmmoType() == AmmoType.T_NLRM)) && ((munition.getMunitionType() == AmmoType.M_HEAT_SEEKING) || (munition.getMunitionType() == AmmoType.M_FOLLOW_THE_LEADER))) {cost*=2;bv*=.5;}if (((munition.getAmmoType() == AmmoType.T_VEHICLE_FLAMER) || (munition.getAmmoType() == AmmoType.T_HEAVY_FLAMER) || (munition.getAmmoType() == AmmoType.T_FLUID_GUN)) && (munition.getMunitionType() == AmmoType.M_COOLANT)) {cost=3000;}munition.bv=bv;munition.cost=cost;munition.damagePerShot=base.damagePerShot;munition.rackSize=base.rackSize;munition.ammoType=base.ammoType;munition.flags=base.flags;munition.hittable=base.hittable;munition.explosive=base.explosive;munition.toHitModifier=base.toHitModifier;return munition;}  }
class C{  @Override public void renderHead(IHeaderResponse response){  super.renderHead(response);  String jQueryString="";  if (firstLoad) {    jQueryString+="jQuery('#showOpenDocumentModal').trigger('click');";    firstLoad=false;  }  response.render(OnLoadHeaderItem.forScript(jQueryString));}  }
class C{  Name parameter(int n){  assert (n < arity);  Name param=names[n];  assert (param.isParam());  return param;}  }
class C{  public AccountHeaderBuilder withThreeSmallProfileImages(boolean threeSmallProfileImages){  this.mThreeSmallProfileImages=threeSmallProfileImages;  return this;}  }
class C{  @Override public final boolean printingEnabled(OptOptions options,boolean before){  return false;}  }
class C{  public int onSameSide(Vec4[] pts){  if (pts == null) {    throw new IllegalArgumentException("Points Array Is Null");  }  double d=this.distanceTo(pts[0]);  int side=d < 0 ? -1 : d > 0 ? 1 : 0;  if (side == 0)   return 0;  for (int i=1; i < pts.length; i++) {    if (pts[i] == null) {      throw new IllegalArgumentException("Point Is Null");    }    d=this.distanceTo(pts[i]);    if ((side == -1 && d < 0) || (side == 1 && d > 0))     continue;    return 0;  }  return side;}  }
class C{  public boolean hasFixed(){  return super.hasAttribute(FIXED);}  }
class C{  public SmartChineseAnalyzer(boolean useDefaultStopWords){  stopWords=useDefaultStopWords ? DefaultSetHolder.DEFAULT_STOP_SET : CharArraySet.EMPTY_SET;}  }
class C{  public List<AsyncHandler> asyncHandlers(){  return subresources().asyncHandlers();}  }
class C{  default String renderComment(Generator gen,M model){  return model.getComment().map(null).orElse("");}  }
class C{  private void mergeHi(int base1,int len1,int base2,int len2){  if (DEBUG)   assert len1 > 0 && len2 > 0 && base1 + len1 == base2;  T[] a=this.a;  T[] tmp=ensureCapacity(len2);  System.arraycopy(a,base2,tmp,0,len2);  int cursor1=base1 + len1 - 1;  int cursor2=len2 - 1;  int dest=base2 + len2 - 1;  a[dest--]=a[cursor1--];  if (--len1 == 0) {    System.arraycopy(tmp,0,a,dest - (len2 - 1),len2);    return;  }  if (len2 == 1) {    dest-=len1;    cursor1-=len1;    System.arraycopy(a,cursor1 + 1,a,dest + 1,len1);    a[dest]=tmp[cursor2];    return;  }  Comparator<? super T> c=this.c;  int minGallop=this.minGallop;  outer:   while (true) {    int count1=0;    int count2=0;    do {      if (DEBUG)       assert len1 > 0 && len2 > 1;      if (c.compare(tmp[cursor2],a[cursor1]) < 0) {        a[dest--]=a[cursor1--];        count1++;        count2=0;        if (--len1 == 0)         break outer;      } else {        a[dest--]=tmp[cursor2--];        count2++;        count1=0;        if (--len2 == 1)         break outer;      }    } while ((count1 | count2) < minGallop);    do {      if (DEBUG)       assert len1 > 0 && len2 > 1;      count1=len1 - gallopRight(tmp[cursor2],a,base1,len1,len1 - 1,c);      if (count1 != 0) {        dest-=count1;        cursor1-=count1;        len1-=count1;        System.arraycopy(a,cursor1 + 1,a,dest + 1,count1);        if (len1 == 0)         break outer;      }      a[dest--]=tmp[cursor2--];      if (--len2 == 1)       break outer;      count2=len2 - gallopLeft(a[cursor1],tmp,0,len2,len2 - 1,c);      if (count2 != 0) {        dest-=count2;        cursor2-=count2;        len2-=count2;        System.arraycopy(tmp,cursor2 + 1,a,dest + 1,count2);        if (len2 <= 1)         break outer;      }      a[dest--]=a[cursor1--];      if (--len1 == 0)       break outer;      minGallop--;    } while (count1 >= MIN_GALLOP | count2 >= MIN_GALLOP);    if (minGallop < 0)     minGallop=0;    minGallop+=2;  }  this.minGallop=minGallop < 1 ? 1 : minGallop;  if (len2 == 1) {    if (DEBUG)     assert len1 > 0;    dest-=len1;    cursor1-=len1;    System.arraycopy(a,cursor1 + 1,a,dest + 1,len1);    a[dest]=tmp[cursor2];  } else   if (len2 == 0) {    throw new IllegalArgumentException("Comparison method violates its general contract!");  } else {    if (DEBUG)     assert len1 == 0;    if (DEBUG)     assert len2 > 0;    System.arraycopy(tmp,0,a,dest - (len2 - 1),len2);  }}  }
class C{  private boolean allow(BTDownloadDataLine tl){  return FILTER.allow(tl);}  }
class C{  public NormalizationH2(float c){  this.c=c;}  }
class C{  public TopicPartitionInitialOffset(String topic,int partition){  this(topic,partition,null);}  }
class C{  private Spatial findModelNodeParent(Spatial child){  if (child == null) {    return null;  }  if (child instanceof Node) {    return child;  }  if (child.getParent() != null) {    return findModelNodeParent(child.getParent());  }  return null;}  }
class C{  public PaymentCallBackHandlerFacadeImpl(final PaymentModulesManager paymentModulesManager,final CustomerOrderService customerOrderService){  this.paymentModulesManager=paymentModulesManager;  this.customerOrderService=customerOrderService;}  }
class C{  private void clearContext(Context context) throws NamingException {  for (NamingEnumeration e=context.listBindings(""); e.hasMoreElements(); ) {    Binding binding=(Binding)e.nextElement();    if (binding.getObject() instanceof Context) {      clearContext((Context)binding.getObject());    }    context.unbind(binding.getName());  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int i;  int progress;  int row, col;  double z=0;  double gridRes=0;  double currentVal=0;  double maxDist=0;  double lineSlope=0;  double azimuth=0;  double deltaX=0;  double deltaY=0;  double x=0;  int x1=0;  int x2=0;  double y=0;  int y1=0;  int y2=0;  double z1=0;  double z2=0;  double dist=0;  double oldDist=0;  double yIntercept=0;  int xStep=0;  int yStep=0;  double noData=0;  boolean flag=false;  double totalElevation=0;  double numElevations=0;  boolean useMaxDist=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      azimuth=Double.parseDouble(args[i]);      if (azimuth > 360 || azimuth < 0) {        azimuth=0.1;      }      if (azimuth == 0) {        azimuth=0.1;      }      if (azimuth == 180) {        azimuth=179.9;      }      if (azimuth == 360) {        azimuth=359.9;      }      if (azimuth < 180) {        lineSlope=Math.tan(Math.toRadians(90 - azimuth));      } else {        lineSlope=Math.tan(Math.toRadians(270 - azimuth));      }    } else     if (i == 3) {      if (!args[i].toLowerCase().equals("not specified")) {        maxDist=Double.parseDouble(args[i]);        useMaxDist=true;      }    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    DEM.isReflectedAtEdges=true;    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    noData=DEM.getNoDataValue();    gridRes=(DEM.getCellSizeX() + DEM.getCellSizeY()) / 2;    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("grey.pal");    if (azimuth > 0 && azimuth <= 90) {      xStep=1;      yStep=1;    } else     if (azimuth <= 180) {      xStep=1;      yStep=-1;    } else     if (azimuth <= 270) {      xStep=-1;      yStep=-1;    } else {      xStep=-1;      yStep=1;    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        currentVal=DEM.getValue(row,col);        if (currentVal != noData) {          totalElevation=0;          numElevations=0;          yIntercept=-row - lineSlope * col;          x=col;          flag=true;          do {            x=x + xStep;            if (x < 0 || x >= cols) {              flag=false;              break;            }            y=(lineSlope * x + yIntercept) * -1;            if (y < 0 || y >= rows) {              flag=false;              break;            }            if (useMaxDist) {              deltaX=(x - col) * gridRes;              deltaY=(y - row) * gridRes;              dist=Math.sqrt(deltaX * deltaX + deltaY * deltaY);              if (dist > maxDist) {                flag=false;                break;              }            }            y1=(int)(y);            y2=y1 + yStep * -1;            z1=DEM.getValue(y1,(int)x);            z2=DEM.getValue(y2,(int)x);            if (z1 != noData && z2 != noData) {              z=z1 + (y - y1) * (z2 - z1);              totalElevation+=z;              numElevations++;            }          } while (flag);          y=-row;          flag=true;          do {            y=y + yStep;            if (-y < 0 || -y >= rows) {              flag=false;              break;            }            x=(y - yIntercept) / lineSlope;            if (x < 0 || x >= cols) {              flag=false;              break;            }            if (useMaxDist) {              deltaX=(x - col) * gridRes;              deltaY=(-y - row) * gridRes;              dist=Math.sqrt(deltaX * deltaX + deltaY * deltaY);              if (dist > maxDist) {                flag=false;                break;              }            }            x1=(int)x;            x2=x1 + xStep;            if (x2 < 0 || x2 >= cols) {              flag=false;              break;            }            z1=DEM.getValue((int)-y,x1);            z2=DEM.getValue((int)y,x2);            if (z1 != noData && z2 != noData) {              z=z1 + (x - x1) * (z2 - z1);              totalElevation+=z;              numElevations++;            }          } while (flag);          if (numElevations > 0) {            z=totalElevation / numElevations - currentVal;            output.setValue(row,col,z);          } else {            output.setValue(row,col,0);          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static Set<String> readRegisteredChannels(PluginMessage pluginMessage){  String channels=new String(pluginMessage.getData(),Charsets.UTF_8);  String[] split=channels.split("\0");  Set<String> channelSet=ImmutableSet.copyOf(split);  return channelSet;}  }
class C{  protected SystemMemberRegionEventImpl(DistributedMember id,Operation op,String regionPath){  super(id,op);  this.regionPath=regionPath;}  }
class C{  public void remove(String key){  Iterator<Pair<String,ArrayList<String>>> it=store.iterator();  while (it.hasNext()) {    String thisKey=it.next().first;    if (key.equals(thisKey)) {      it.remove();      break;    }  }}  }
class C{  @Override public void merge(MeasureAggregator aggregator){  AvgLongAggregator avgAggregator=(AvgLongAggregator)aggregator;  if (!avgAggregator.isFirstTime()) {    aggVal+=avgAggregator.aggVal;    count+=avgAggregator.count;    firstTime=false;  }}  }
class C{  public static void logIn(LogInCallback callback){  ParseTaskUtils.callbackOnMainThreadAsync(logInInBackground(),callback);}  }
class C{  public void testDynDoubleMissingFacet() throws Exception {  checkSortMissingFacet("dyn_doubledv","-1.3","4.2");}  }
class C{  static String translateSQL(String sql,boolean escapeProcessing){  if (sql == null) {    throw DbException.getInvalidValueException("SQL",null);  }  if (!escapeProcessing) {    return sql;  }  if (sql.indexOf('{') < 0) {    return sql;  }  int len=sql.length();  char[] chars=null;  int level=0;  for (int i=0; i < len; i++) {    char c=sql.charAt(i);switch (c) {case '\'':case '"':case '/':case '-':      i=translateGetEnd(sql,i,c);    break;case '{':  level++;if (chars == null) {  chars=sql.toCharArray();}chars[i]=' ';while (Character.isSpaceChar(chars[i])) {i++;checkRunOver(i,len,sql);}int start=i;if (chars[i] >= '0' && chars[i] <= '9') {chars[i - 1]='{';while (true) {checkRunOver(i,len,sql);c=chars[i];if (c == '}') {break;}switch (c) {case '\'':case '"':case '/':case '-':i=translateGetEnd(sql,i,c);break;default :}i++;}level--;break;} else if (chars[i] == '?') {i++;checkRunOver(i,len,sql);while (Character.isSpaceChar(chars[i])) {i++;checkRunOver(i,len,sql);}if (sql.charAt(i) != '=') {throw DbException.getSyntaxError(sql,i,"=");}i++;checkRunOver(i,len,sql);while (Character.isSpaceChar(chars[i])) {i++;checkRunOver(i,len,sql);}}while (!Character.isSpaceChar(chars[i])) {i++;checkRunOver(i,len,sql);}int remove=0;if (found(sql,start,"fn")) {remove=2;} else if (found(sql,start,"escape")) {break;} else if (found(sql,start,"call")) {break;} else if (found(sql,start,"oj")) {remove=2;} else if (found(sql,start,"ts")) {break;} else if (found(sql,start,"t")) {break;} else if (found(sql,start,"d")) {break;} else if (found(sql,start,"params")) {remove="params".length();}for (i=start; remove > 0; i++, remove--) {chars[i]=' ';}break;case '}':if (--level < 0) {throw DbException.getSyntaxError(sql,i);}chars[i]=' ';break;case '$':i=translateGetEnd(sql,i,c);break;default :}}if (level != 0) {throw DbException.getSyntaxError(sql,sql.length() - 1);}if (chars != null) {sql=new String(chars);}return sql;}  }
class C{  public void addToButtonsPanel(Component comp){  removeFromButtonsPanel(comp);  m_LayoutButtons.setRows(m_LayoutButtons.getRows() + 1);  m_PanelButtons.add(comp);}  }
class C{  public int readBits(int numBits){  Assertions.checkState(getPosition() + numBits <= limit);  if (numBits == 0) {    return 0;  }  int result=0;  int bitCount=0;  if (bitOffset != 0) {    bitCount=Math.min(numBits,8 - bitOffset);    int mask=0xFF >>> (8 - bitCount);    result=(data[byteOffset] >>> bitOffset) & mask;    bitOffset+=bitCount;    if (bitOffset == 8) {      byteOffset++;      bitOffset=0;    }  }  if (numBits - bitCount > 7) {    int numBytes=(numBits - bitCount) / 8;    for (int i=0; i < numBytes; i++) {      result|=(data[byteOffset++] & 0xFFL) << bitCount;      bitCount+=8;    }  }  if (numBits > bitCount) {    int bitsOnNextByte=numBits - bitCount;    int mask=0xFF >>> (8 - bitsOnNextByte);    result|=(data[byteOffset] & mask) << bitCount;    bitOffset+=bitsOnNextByte;  }  return result;}  }
class C{  public NetworkEvent(Network net,final T oldThing,final T theThing){  super(net);  this.theObject=theThing;  this.oldObject=oldThing;}  }
class C{  public String logString(LinearScan allocator){  StringBuilder buf=new StringBuilder(100);  buf.append(operandNumber).append(':').append(operand).append(' ');  if (!isRegister(operand)) {    if (location != null) {      buf.append("location{").append(location).append("} ");    }  }  buf.append("hints{").append(splitParent.operandNumber);  Interval hint=locationHint(false);  if (hint != null && hint.operandNumber != splitParent.operandNumber) {    buf.append(", ").append(hint.operandNumber);  }  buf.append("} ranges{");  Range cur=first;  while (cur != Range.EndMarker) {    if (cur != first) {      buf.append(", ");    }    buf.append(cur);    cur=cur.next;    assert cur != null : "range list not closed with range sentinel";  }  buf.append("} uses{");  int prev=-1;  for (int i=usePosList.size() - 1; i >= 0; --i) {    assert prev < usePosList.usePos(i) : "use positions not sorted";    if (i != usePosList.size() - 1) {      buf.append(", ");    }    buf.append(usePosList.usePos(i)).append(':').append(usePosList.registerPriority(i));    prev=usePosList.usePos(i);  }  buf.append("} spill-state{").append(spillState()).append("}");  if (canMaterialize()) {    buf.append(" (remat:").append(getMaterializedValue().toString()).append(")");  }  return buf.toString();}  }
class C{  public JavaElementDeltaBuilder(IJavaElement javaElement,int maxDepth){  this.javaElement=javaElement;  this.maxDepth=maxDepth;  initialize();  recordElementInfo(javaElement,0);}  }
class C{  protected static SampleModel fixSampleModel(CachableRed src){  SampleModel sm=src.getSampleModel();  int width=sm.getWidth();  int height=sm.getHeight();  ColorModel cm=src.getColorModel();  if (cm != null) {    if (cm.hasAlpha())     return new PixelInterleavedSampleModel(DataBuffer.TYPE_BYTE,width,height,2,2 * width,new int[]{0,1});    return new PixelInterleavedSampleModel(DataBuffer.TYPE_BYTE,width,height,1,width,new int[]{0});  } else {    if (sm.getNumBands() == 2)     return new PixelInterleavedSampleModel(DataBuffer.TYPE_BYTE,width,height,2,2 * width,new int[]{0,1});    return new PixelInterleavedSampleModel(DataBuffer.TYPE_BYTE,width,height,1,width,new int[]{0});  }}  }
class C{  public boolean hasProb(Value head){  return table.containsKey(head);}  }
class C{  public void computeTaskReduce(long taskPtr){  enter();  try {    PlatformCallbackUtils.computeTaskReduce(envPtr,taskPtr);  }  finally {    leave();  }}  }
class C{  public void removeDivider(int divId) throws Exception {  checkDividerNoHasChildren(divId);  m_dividers.removeNode(divId);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.STRING_LIT___QUOTE_1:    setQuote_1((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:07.177 -0500",hash_original_method="657A8C506709C2AB2507FE170E8B78C8",hash_generated_method="CE8E2EC64AF62D6056C312FC6A164F9E") public void translateRectInAppWindowToScreen(Rect rect){  rect.scale(applicationScale);}  }
class C{  private List<Resolution> findResolutions(ServiceCallCreateParams params){  JoinGroupNode g=(JoinGroupNode)params.getServiceNode().getGraphPattern();  List<Resolution> resolutions=new ArrayList<>(g.args().size());  for (  BOp st : g.args()) {    StatementPatternNode sn=(StatementPatternNode)st;    if (sn.s().isConstant() && BD.SERVICE_PARAM.equals(sn.s().getValue())) {      continue;    }    resolutions.add(new Resolution(sn));  }  return resolutions;}  }
class C{  Env<AttrContext> methodEnv(JCMethodDecl tree,Env<AttrContext> env){  Env<AttrContext> localEnv=env.dup(tree,env.info.dup(env.info.scope.dupUnshared()));  localEnv.enclMethod=tree;  localEnv.info.scope.owner=tree.sym;  if (tree.sym.type != null) {    localEnv.info.returnResult=attr.new ResultInfo(VAL,tree.sym.type.getReturnType());  }  if ((tree.mods.flags & STATIC) != 0)   localEnv.info.staticLevel++;  return localEnv;}  }
class C{  public InputSource resolveEntity(String publicId,String systemId) throws SAXException, IOException {  hasDTD=false;  String dtd=UtilProperties.getSplitPropertyValue(UtilURL.fromResource("localdtds.properties"),publicId);  if (UtilValidate.isNotEmpty(dtd)) {    if (Debug.verboseOn())     Debug.logVerbose("[UtilXml.LocalResolver.resolveEntity] resolving DTD with publicId [" + publicId + "], systemId ["+ systemId+ "] and the dtd file is ["+ dtd+ "]",module);    try {      URL dtdURL=UtilURL.fromResource(dtd);      if (dtdURL == null) {        throw new GeneralException("Local DTD not found - " + dtd);      }      InputStream dtdStream=dtdURL.openStream();      InputSource inputSource=new InputSource(dtdStream);      inputSource.setPublicId(publicId);      hasDTD=true;      if (Debug.verboseOn())       Debug.logVerbose("[UtilXml.LocalResolver.resolveEntity] got LOCAL DTD input source with publicId [" + publicId + "] and the dtd file is ["+ dtd+ "]",module);      return inputSource;    } catch (    Exception e) {      Debug.logWarning(e,module);    }  } else {    int lastSlash=systemId.lastIndexOf("/");    String filename=null;    if (lastSlash == -1) {      filename=systemId;    } else {      filename=systemId.substring(lastSlash + 1);    }    URL resourceUrl=UtilURL.fromResource(filename);    if (resourceUrl != null) {      InputStream resStream=resourceUrl.openStream();      InputSource inputSource=new InputSource(resStream);      if (UtilValidate.isNotEmpty(publicId)) {        inputSource.setPublicId(publicId);      }      hasDTD=true;      if (Debug.verboseOn())       Debug.logVerbose("[UtilXml.LocalResolver.resolveEntity] got LOCAL DTD/Schema input source with publicId [" + publicId + "] and the file/resource is ["+ filename+ "]",module);      return inputSource;    } else {      Debug.logWarning("[UtilXml.LocalResolver.resolveEntity] could not find LOCAL DTD/Schema with publicId [" + publicId + "] and the file/resource is ["+ filename+ "]",module);      return null;    }  }  return defaultResolver.resolveEntity(publicId,systemId);}  }
class C{  @SuppressWarnings("unchecked") public void initialize(Subject subject,CallbackHandler callbackHandler,Map<String,?> sharedState,Map<String,?> options){  this.subject=subject;  this.callbackHandler=callbackHandler;  this.sharedState=(Map<String,Object>)sharedState;  this.options=options;  processOptions();  status=INITIALIZED;}  }
class C{  final public SyntaxTreeNode Proof() throws ParseException {  SyntaxTreeNode tn;  Token t=null;  Token t0=null;  pushProofLevel();  bpa("Proof");  if ((getToken(1).kind == BY) || (getToken(2).kind == BY)) {    tn=UseOrHideOrBy();  } else   if (jj_2_27(2)) {switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case PROOF:      t0=jj_consume_token(PROOF);    break;default :  jj_la1[53]=jj_gen;;}switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case OBVIOUS:t=jj_consume_token(OBVIOUS);break;case OMITTED:t=jj_consume_token(OMITTED);break;default :jj_la1[54]=jj_gen;jj_consume_token(-1);throw new ParseException();}SyntaxTreeNode sn[];if (t0 != null) {sn=new SyntaxTreeNode[2];sn[0]=new SyntaxTreeNode(mn,t0);sn[1]=new SyntaxTreeNode(mn,t);} else {sn=new SyntaxTreeNode[1];sn[0]=new SyntaxTreeNode(mn,t);};tn=new SyntaxTreeNode(mn,N_TerminalProof,sn);} else if (jj_2_28(1)) {if (jj_2_26(2)) {t=jj_consume_token(PROOF);addHeir(new SyntaxTreeNode(mn,t));} else {;}label_14: while (true) {if (getToken(2).kind != QED) {;} else {break label_14;}tn=Step();addHeir(tn);expecting="a proof step";}tn=QEDStep();addHeir(tn);SyntaxTreeNode sn[]=getLastHeirs();tn=new SyntaxTreeNode(mn,N_Proof,sn);} else {jj_consume_token(-1);throw new ParseException();}epa();popProofLevel();{if (true) return tn;}throw new Error("Missing return statement in function");}  }
class C{  public static void saveDefaultsToProperties(Properties properties){  properties.setProperty("MapElement.RadialGrid.defaultColor",StringUtil.colorToString(defaultColor));  properties.setProperty("MapElement.RadialGrid.defaultRings",Integer.toString(defaultRings));  properties.setProperty("MapElement.RadialGrid.defaultLineWidth",Double.toString(defaultLineWidth));  properties.setProperty("MapElement.RadialGrid.defaultLabelVisible",Boolean.toString(defaultLabelVisible));  properties.setProperty("MapElement.RadialGrid.defaultActualCoordinates",Boolean.toString(defaultActualCoordinates));  properties.setProperty("MapElement.RadialGrid.defaultCompassRose",Boolean.toString(defaultCompassRose));}  }
class C{  public int nrOfNestedLists(){  return superSection.nrOfNestedLists();}  }
class C{  private SymmetricMatrix inverse2By2(){  double[][] newComponents=new double[2][2];  double inverseDeterminant=1 / (components[0][0] * components[1][1] - components[0][1] * components[1][0]);  newComponents[0][0]=inverseDeterminant * components[1][1];  newComponents[1][1]=inverseDeterminant * components[0][0];  newComponents[0][1]=newComponents[1][0]=-inverseDeterminant * components[1][0];  return new SymmetricMatrix(newComponents);}  }
class C{  private void checkAtmosphere(){  final Entity ce=ce();  if (null == ce) {    return;  }  if (!(ce instanceof Aero)) {    return;  }  Aero a=(Aero)ce;  if (!clientgui.getClient().getGame().getBoard().inSpace()) {    if (a.isSpheroid() || clientgui.getClient().getGame().getPlanetaryConditions().isVacuum()) {      getBtn(MoveCommand.MOVE_ACC).setEnabled(false);      getBtn(MoveCommand.MOVE_DEC).setEnabled(false);      getBtn(MoveCommand.MOVE_ACCN).setEnabled(false);      getBtn(MoveCommand.MOVE_DECN).setEnabled(false);    }  }  return;}  }
class C{  public BaleenConsoleLoggerBuilder(String name,String pattern,Filter<ILoggingEvent> filter){  super(name,pattern,filter);}  }
class C{  public EdgeListGraphSingleConnections(List<Node> nodes){  this();  if (nodes == null) {    throw new NullPointerException();  }  this.nodes=new ArrayList<>(nodes);  for (  Node node : nodes) {    edgeLists.put(node,new ArrayList<Edge>());    namesHash.put(node.getName(),node);  }}  }
class C{  public static <T>T orderAccesses(T ref){  theVolatile=0;  return ref;}  }
class C{  private Object writeReplace(){  return new SerializationProxy(this);}  }
class C{  public static String printCanopyAssignments(Instances dataPoints,List<long[]> canopyAssignments){  StringBuilder temp=new StringBuilder();  for (int i=0; i < dataPoints.size(); i++) {    temp.append("Cluster " + i + ": ");    temp.append(dataPoints.instance(i));    if (canopyAssignments != null && canopyAssignments.size() == dataPoints.size()) {      long[] assignments=canopyAssignments.get(i);      temp.append(printSingleAssignment(assignments));    }    temp.append("\n");  }  return temp.toString();}  }
class C{  public void drawLegendShape(Canvas canvas,SimpleSeriesRenderer renderer,float x,float y,int seriesIndex,Paint paint){  if (renderer.isGradientEnabled() && canvas.isShapeClipSupported()) {    GradientDrawable gr=new GradientDrawable(Orientation.TOP_BOTTOM,new int[]{renderer.getGradientStartColor(),renderer.getGradientStopColor()});    gr.setBounds((int)x,(int)(y - SHAPE_WIDTH / 2),(int)(x + SHAPE_WIDTH),(int)(y + SHAPE_WIDTH / 2));    gr.draw(canvas);  } else {    canvas.drawRect(x,y - SHAPE_WIDTH / 2,x + SHAPE_WIDTH,y + SHAPE_WIDTH / 2,paint);  }}  }
class C{  @Deprecated public static BiosCommandResult createErrorStatus(ServiceCode code,String message){  BiosCommandResult result=new BiosCommandResult();  result.setCommandSuccess(false);  result.setCommandStatus(Operation.Status.error.name());  result.setServiceCoded(ServiceError.buildServiceError(code,message));  result.setMessage(message);  return result;}  }
class C{  public static Related telephone(TelUri telUri){  return new Related(telUri.toString());}  }
class C{  public List removeKey(Object key){  return universalRemove(key,forwardStore,backwardStore);}  }
class C{  public void addDateTimeChangeListener(DateTimeChangeListener listener){  dateTimeChangeListeners.add(listener);}  }
class C{  private void onEqual(){  if (lastNumeric && !stateError) {    String txt=txtScreen.getText().toString();    Expression expression=new ExpressionBuilder(txt).build();    try {      double result=expression.evaluate();      txtScreen.setText(Double.toString(result));      lastDot=true;    } catch (    ArithmeticException ex) {      txtScreen.setText("Error");      stateError=true;      lastNumeric=false;    }  }}  }
class C{  public boolean isDomainSaved(){  return !tabbedPane.getTitleAt(2).contains("*");}  }
class C{  private void algorithmDouglasPeucker(List<Entry> entries,double epsilon,int start,int end){  if (end <= start + 1) {    return;  }  int maxDistIndex=0;  double distMax=0;  Entry firstEntry=entries.get(start);  Entry lastEntry=entries.get(end);  for (int i=start + 1; i < end; i++) {    double dist=calcAngleBetweenLines(firstEntry,lastEntry,firstEntry,entries.get(i));    if (dist > distMax) {      distMax=dist;      maxDistIndex=i;    }  }  if (distMax > epsilon) {    keep[maxDistIndex]=true;    algorithmDouglasPeucker(entries,epsilon,start,maxDistIndex);    algorithmDouglasPeucker(entries,epsilon,maxDistIndex,end);  }}  }
class C{  public static Array listToArrayTrim(String list,char delimiter){  if (list.length() == 0)   return new ArrayImpl();  while (list.indexOf(delimiter) == 0) {    list=list.substring(1);  }  int len=list.length();  if (len == 0)   return new ArrayImpl();  while (list.lastIndexOf(delimiter) == len - 1) {    list=list.substring(0,len - 1 < 0 ? 0 : len - 1);    len=list.length();  }  return listToArray(list,delimiter);}  }
class C{  public void stop() throws IOException {  in.close();  out.close();  connection.close();}  }
class C{  protected boolean convertToUppercase(){  return false;}  }
class C{  public boolean canPace(){  return false;}  }
class C{  public void registerCustomFieldRenderer(ListType type,RenderInputFieldInterface renderer){  if (type == null) {    throw new InvalidParameterException("Error registering CustomRenderer, type may not be null");  }  if (renderer == null) {    throw new InvalidParameterException("Error registering CustomRenderer, renderer may not be null");  }  customRenderers.put(type,renderer);}  }
class C{  public Bagging(Classifier baseClassifier){  this(baseClassifier,DEFAULT_EXTRA_SAMPLES,DEFAULT_SIMULTANIOUS_TRAINING);}  }
class C{  private Object[] readData(ResultSet rs){  int size=m_fields.size();  Object[] rowData=new Object[size];  String columnName=null;  int displayType=0;  try {    for (int j=0; j < size; j++) {      GridField field=(GridField)m_fields.get(j);      columnName=field.getColumnName();      displayType=field.getDisplayType();      if (displayType == DisplayType.Integer || (DisplayType.isID(displayType) && (columnName.endsWith("_ID") || columnName.endsWith("_Acct") || columnName.equals("AD_Key")|| columnName.equals("AD_Display"))) || columnName.endsWith("atedBy")) {        rowData[j]=new Integer(rs.getInt(j + 1));        if (rs.wasNull())         rowData[j]=null;      } else       if (DisplayType.isNumeric(displayType))       rowData[j]=rs.getBigDecimal(j + 1); else       if (DisplayType.isDate(displayType))       rowData[j]=rs.getTimestamp(j + 1); else       if (displayType == DisplayType.RowID)       rowData[j]=null; else       if (displayType == DisplayType.YesNo) {        String str=rs.getString(j + 1);        if (field.isEncryptedColumn())         str=(String)decrypt(str);        rowData[j]=new Boolean("Y".equals(str));      } else       if (DisplayType.isLOB(displayType)) {        Object value=rs.getObject(j + 1);        if (rs.wasNull())         rowData[j]=null; else         if (value instanceof Clob) {          Clob lob=(Clob)value;          long length=lob.length();          rowData[j]=lob.getSubString(1,(int)length);        } else         if (value instanceof Blob) {          Blob lob=(Blob)value;          long length=lob.length();          rowData[j]=lob.getBytes(1,(int)length);        } else         if (value instanceof String)         rowData[j]=value; else         if (value instanceof byte[])         rowData[j]=value;      } else       rowData[j]=rs.getString(j + 1);      if (field.isEncryptedColumn() && displayType != DisplayType.YesNo)       rowData[j]=decrypt(rowData[j]);    }  } catch (  SQLException e) {    log.log(Level.SEVERE,columnName + ", DT=" + displayType,e);  }  return rowData;}  }
class C{  protected final void SSE2_FPR2GPR_64(Instruction s){  int offset=-burs.ir.stackManager.allocateSpaceForConversion();  StackLocationOperand sl=new StackLocationOperand(true,offset,QW);  Operand val=Unary.getClearVal(s);  if (VM.BuildFor32Addr) {    StackLocationOperand sl1=new StackLocationOperand(true,offset + 4,DW);    StackLocationOperand sl2=new StackLocationOperand(true,offset,DW);    EMIT(CPOS(s,MIR_Move.create(IA32_MOVSD,sl,val)));    RegisterOperand i1=Unary.getClearResult(s);    RegisterOperand i2=new RegisterOperand(regpool.getSecondReg(i1.getRegister()),TypeReference.Int);    EMIT(CPOS(s,MIR_Move.create(IA32_MOV,i1,sl1)));    EMIT(MIR_Move.mutate(s,IA32_MOV,i2,sl2));  } else {    EMIT(CPOS(s,MIR_Move.create(IA32_MOVSD,sl,val)));    EMIT(MIR_Move.mutate(s,IA32_MOV,Unary.getResult(s),sl.copy()));  }}  }
class C{  public static void typeface(Activity activity){  if (sDefaultTypefaceCollection == null) {    throw new IllegalStateException("Default typeface collection not initialized. Forgot to call init()?");  }  typeface(activity.findViewById(android.R.id.content),sDefaultTypefaceCollection);}  }
class C{  public CubicSplineInterpolator(double[] x,double[] y){  this.x=x;  this.y=y;  validate();  spline();}  }
class C{  public void SwitchTo(int lexState){  if (lexState >= 1 || lexState < 0)   throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.",TokenMgrError.INVALID_LEXICAL_STATE); else   curLexState=lexState;}  }
class C{  public ServerResource server(){  return server;}  }
class C{  @Override public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {  super.readExternal(in);  values=new double[in.readInt()];  for (int d=0; d < values.length; d++) {    values[d]=in.readDouble();  }}  }
class C{  public void detach(){}  }
class C{  public String toString(){  StringBuilder buf=new StringBuilder();  NumberFormat nf=NumberFormatUtil.getInstance().getNumberFormat();  buf.append("\nBayesIm:");  for (int i=0; i < getNumNodes(); i++) {    buf.append("\n\nNode #").append(i);    buf.append("\n");    for (int k=0; k < getNumParents(i); k++) {      buf.append("#").append(getParent(i,k)).append("\t");    }    for (int j=0; j < getNumRows(i); j++) {      buf.append("\n");      for (int k=0; k < getNumParents(i); k++) {        buf.append(getParentValue(i,j,k)).append("\t");      }      buf.append(":\t");      for (int k=0; k < getNumColumns(i); k++) {        buf.append(nf.format(getProbability(i,j,k))).append("\t");      }    }  }  return buf.toString();}  }
class C{  @Ignore("TODO: Disabled until I can sort out the hydra dependencies - see bug 52214") @Test public void testReplicatedSerialAsyncEventQueueWithoutLocator(){  int mPort=AvailablePortHelper.getRandomAvailablePortForDUnitSite();  vm1.invoke(null);  vm2.invoke(null);  vm3.invoke(null);  vm4.invoke(null);  vm1.invoke(createAsyncEventQueueRunnable());  vm2.invoke(createAsyncEventQueueRunnable());  vm3.invoke(createAsyncEventQueueRunnable());  vm4.invoke(createAsyncEventQueueRunnable());  vm1.invoke(createReplicatedRegionRunnable());  vm2.invoke(createReplicatedRegionRunnable());  vm3.invoke(createReplicatedRegionRunnable());  vm4.invoke(createReplicatedRegionRunnable());  vm1.invoke(null);  vm1.invoke(null);  vm2.invoke(null);  vm3.invoke(null);  vm4.invoke(null);}  }
class C{  @Override public String toString(){  return "CUmipmappedArray[" + "nativePointer=0x" + Long.toHexString(getNativePointer()) + "]";}  }
class C{  protected String toXML(Object root){  return xstream.toXML(root);}  }
class C{  public void remove(IDocument document){  document.removePosition(positionOfProof);  document.removePosition(positionOfStatement);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:27.937 -0500",hash_original_method="D5A33D637AF4590F069926DA61E58388",hash_generated_method="B8E3AAA6B6FB824F0E8EB9AAF658A379") public ViewPropertyAnimator scaleX(float value){  animateProperty(SCALE_X,value);  return this;}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public void testStringSort() throws Exception {  for (  String field : new String[]{"stringdv","dyn_stringdv"}) {    assertU(adoc("id","0"));    assertU(adoc("id","1",field,"a"));    assertU(adoc("id","2",field,"z"));    assertU(commit());    assertQ(req("q","*:*","sort",field + " asc"),"//result/doc[1]/str[@name='id'][.=0]","//result/doc[2]/str[@name='id'][.=1]","//result/doc[3]/str[@name='id'][.=2]");    assertQ(req("q","*:*","sort",field + " desc"),"//result/doc[1]/str[@name='id'][.=2]","//result/doc[2]/str[@name='id'][.=1]","//result/doc[3]/str[@name='id'][.=0]");  }}  }
class C{  public void removeStyle(String nm){  Style aStyle=getStyle(nm);  if (aStyle != null) {    String selector=cleanSelectorString(nm);    String[] selectors=getSimpleSelectors(selector);synchronized (this) {      SelectorMapping mapping=getRootSelectorMapping();      for (int i=selectors.length - 1; i >= 0; i--) {        mapping=mapping.getChildSelectorMapping(selectors[i],true);      }      Style rule=mapping.getStyle();      if (rule != null) {        mapping.setStyle(null);        if (resolvedStyles.size() > 0) {          Enumeration<ResolvedStyle> values=resolvedStyles.elements();          while (values.hasMoreElements()) {            ResolvedStyle style=values.nextElement();            style.removeStyle(rule);          }        }      }    }  }  super.removeStyle(nm);}  }
class C{  private boolean skipScope(int openToken,int closeToken){  int depth=1;  while (true) {    nextToken();    if (fToken == closeToken) {      depth++;    } else     if (fToken == openToken) {      depth--;      if (depth == 0)       return true;    } else     if (fToken == Symbols.TokenEOF) {      return false;    }  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void initXPath(Compiler compiler,String expression,PrefixResolver namespaceContext) throws javax.xml.transform.TransformerException {  m_ops=compiler;  m_namespaceContext=namespaceContext;  m_functionTable=compiler.getFunctionTable();  Lexer lexer=new Lexer(compiler,namespaceContext,this);  lexer.tokenize(expression);  m_ops.setOp(0,OpCodes.OP_XPATH);  m_ops.setOp(OpMap.MAPINDEX_LENGTH,2);  try {    nextToken();    Expr();    if (null != m_token) {      String extraTokens="";      while (null != m_token) {        extraTokens+="'" + m_token + "'";        nextToken();        if (null != m_token)         extraTokens+=", ";      }      error(XPATHErrorResources.ER_EXTRA_ILLEGAL_TOKENS,new Object[]{extraTokens});    }  } catch (  org.apache.xpath.XPathProcessorException e) {    if (CONTINUE_AFTER_FATAL_ERROR.equals(e.getMessage())) {      initXPath(compiler,"/..",namespaceContext);    } else     throw e;  }  compiler.shrink();}  }
class C{  @NotNull public static List<IdeaPluginDescriptor> loadPlugins(@Nullable ProgressIndicator indicator) throws IOException {  return loadPlugins(null,null,indicator);}  }
class C{  public long waitAvailable(int requested,int waitMillis) throws IOException, InterruptedException {  return bfdi.waitAvailable(requested,waitMillis);}  }
class C{  @SuppressWarnings("unchecked") static <T extends Serializable>T echo(T obj){  ByteArrayOutputStream out=new ByteArrayOutputStream();  try (ObjectOutputStream oos=new ObjectOutputStream(out)){    oos.writeObject(obj);  } catch (  IOException e) {    throw new RuntimeException("Serialization failed: " + e);  }  ByteArrayInputStream in=new ByteArrayInputStream(out.toByteArray());  try (ObjectInputStream ois=new ObjectInputStream(in)){    return (T)ois.readObject();  } catch (  IOException|ClassNotFoundException e) {    throw new RuntimeException("Deserialization failed: " + e);  }}  }
class C{  public boolean containsKey(String key){  return propMap.containsKey(key);}  }
class C{  public boolean hasSaslCredentials(){  return saslUsername != null && saslUsername.length() > 0;}  }
class C{  @Override @FeatureRequirement(featureClass=Graph.Features.VertexFeatures.class,feature=Graph.Features.VertexFeatures.FEATURE_NUMERIC_IDS) @FeatureRequirement(featureClass=Graph.Features.VertexPropertyFeatures.class,feature=Graph.Features.VertexPropertyFeatures.FEATURE_USER_SUPPLIED_IDS) public void testAttachableCreateMethod(){  super.testAttachableCreateMethod();}  }
class C{  public ResultSetMetaData(Field[] fields,boolean useOldAliasBehavior,boolean treatYearAsDate,ExceptionInterceptor exceptionInterceptor){  this.fields=fields;  this.useOldAliasBehavior=useOldAliasBehavior;  this.treatYearAsDate=treatYearAsDate;  this.exceptionInterceptor=exceptionInterceptor;}  }
class C{  public static int pixelsToDp(Activity context,int px){  DisplayMetrics metrics=new DisplayMetrics();  context.getWindowManager().getDefaultDisplay().getMetrics(metrics);  return (int)((px / metrics.density) + 0.5);}  }
class C{  public synchronized void sendClose(int taskNumber){  if (!opened.get()) {    return;  }  String close=String.format("CLOSE %d %d",taskNumber,msgCount.get());  publisher.send(close);  publisher.close();  context.term();}  }
class C{  @SuppressWarnings("deprecation") public CLImage3D createImage3D(CLMem.Usage usage,CLImageFormat format,long width,long height,long depth,long rowPitch,long slicePitch,Buffer buffer,boolean copy){}  }
class C{  static void testIsHidden(Path tmpdir) throws IOException {  assertTrue(!isHidden(tmpdir));  Path file=tmpdir.resolve(".foo");  if (System.getProperty("os.name").startsWith("Windows")) {    createFile(file);    try {      setAttribute(file,"dos:hidden",true);      try {        assertTrue(isHidden(file));      }  finally {        setAttribute(file,"dos:hidden",false);      }    }  finally {      delete(file);    }  } else {    assertTrue(isHidden(file));  }}  }
class C{  public static Float valueOf(float i){  return null;}  }
class C{  public boolean isTypeCardMaps(){  return TYPE_CARD_MAPS;}  }
class C{  @Override public void validate(){  boolean flagA=!controller.isEnableSQLDatabaseOutput();  boolean flagB=controller.isMultipleOutputFiles();  OutputCompressionEnum oce=controller.getOutputCompression();  enableZipEncodingCompression.setSelected(controller.isZipCompressionEnabled());  disableOutputCompression.setSelected(oce == OutputCompressionEnum.None);  enableBZip2OutputCompression.setSelected(oce == OutputCompressionEnum.BZip2);  activateDataFileOutput.setSelected(controller.isEnableDataFileOutput());  outputLabel.setEnabled(flagA);  outputPathField.setEnabled(flagA);  enableZipEncodingCompression.setEnabled(flagA);  outputCompression.setEnabled(flagA);  disableOutputCompression.setEnabled(flagA);  enable7ZipOutputCompression.setEnabled(flagA && controller.is7ZipEnabled());  enable7ZipOutputCompression.setSelected(oce == OutputCompressionEnum.SevenZip);  enableBZip2OutputCompression.setEnabled(flagA);  enableMultipleOutputFiles.setEnabled(flagA && (oce == OutputCompressionEnum.None));  enableMultipleOutputFiles.setSelected(flagB);  outputSizeLimitLabel.setEnabled(flagA && flagB && (oce == OutputCompressionEnum.None));  outputSizeLimitField.setEnabled(flagA && flagB && (oce == OutputCompressionEnum.None));}  }
class C{  public int numNodes(){  return rootNode.numNodes();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public Workflow newWorkflow(String name,boolean rollback,String opId) throws WorkflowRestartedException {  return _workflowSvc.getNewWorkflow(_exportWfEntryPoints,name,rollback,opId);}  }
class C{  public Zeta(double ro,double pk,RandomEngine randomGenerator){  setRandomGenerator(randomGenerator);  setState(ro,pk);}  }
class C{  public int length(){  return this.list.size();}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.ANNOTABLE_SCRIPT_ELEMENT__ANNOTATION_LIST:    return annotationList != null;}return super.eIsSet(featureID);}  }
class C{  public ConnectionFailedException(final String message,final Throwable thr){  super(message,thr);}  }
class C{  protected JSVGUpdateSynchronizer(JSVGComponent component){  assert (component != null);  this.cref=new WeakReference<>(component);  component.addUpdateManagerListener(umadapter);}  }
class C{  public void classInfoIndex(int index) throws IOException {  output.write('c');  write16bit(index);}  }
class C{  @Override public String toString(){  return super.toString() + "\napprox " + approximation;}  }
class C{  public static Option stream(FSDataInputStream value){  return new InputStreamOption(value);}  }
class C{  @Override final public void onSuccess(int statusCode,Header[] headers,String responseBody){  if (DEBUG)   Log.v(LOG_TAG,"onSuccess statusCode = " + statusCode + " responseBody = "+ responseBody);  processResult(headers,responseBody);}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));  expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));  expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));  expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  public boolean hasObjectNumber(){  return hasExtension(ObjectNumber.class);}  }
class C{  public static void registerDownloadStatusListener(OnFileDownloadStatusListener onFileDownloadStatusListener,DownloadStatusConfiguration downloadStatusConfiguration){  getFileDownloadManager().registerDownloadStatusListener(onFileDownloadStatusListener,downloadStatusConfiguration);}  }
class C{  public void copyInto(Object anArray[]){  delegate.copyInto(anArray);}  }
class C{  private Record parseResponse(String response) throws StageException {  Record record=null;  try (DataParser parser=parserFactory.getParser("",response)){    record=parser.parse();    if (conf.dataFormat == DataFormat.TEXT) {      record.set(record.get("/text"));    }  } catch (  IOException|DataParserException e) {    errorRecordHandler.onError(Errors.HTTP_00,e.toString(),e);  }  return record;}  }
class C{  public void popupMenuCanceled(PopupMenuEvent e){  if (shouldActLikeButton() || pressedWhenPopupVisible) {    comboBox.repaint();  }}  }
class C{  public void initialize(Subject subject,CallbackHandler callbackHandler,Map<String,?> sharedState,Map<String,?> options){  this.subject=subject;  this.callbackHandler=callbackHandler;  this.sharedState=Util.cast(sharedState);  this.options=options;  tryFirstPass="true".equalsIgnoreCase((String)options.get("tryFirstPass"));  useFirstPass="true".equalsIgnoreCase((String)options.get("useFirstPass"));  storePass="true".equalsIgnoreCase((String)options.get("storePass"));  clearPass="true".equalsIgnoreCase((String)options.get("clearPass"));  passwordFile=(String)options.get("passwordFile");  passwordFileDisplayName=passwordFile;  userSuppliedPasswordFile=true;  if (passwordFile == null) {    passwordFile=DEFAULT_PASSWORD_FILE_NAME;    userSuppliedPasswordFile=false;    try {      System.getProperty("java.home");      hasJavaHomePermission=true;      passwordFileDisplayName=passwordFile;    } catch (    SecurityException e) {      hasJavaHomePermission=false;      passwordFileDisplayName=ConnectorBootstrap.DefaultValues.PASSWORD_FILE_NAME;    }  }}  }
class C{  public static File hexesDir(){  return new File(imagesDir(),DEFAULT_DIR_NAME_HEXES);}  }
class C{  public static double greenwichSiderealTime(double julianDate,GregorianCalendar time){  double T=(julianDate - 2451545.0) / 36525.0;  double T0=6.697374558 + (T * (2400.051336 + (T + 2.5862E-5)));  T0%=24.0;  if (T0 < 0) {    T0+=24.0;  }  double UT=time.get(Calendar.HOUR_OF_DAY) + (time.get(Calendar.MINUTE) + time.get(Calendar.SECOND) / 60.0) / 60.0;  T0+=UT * 1.002737909;  T0%=24.0;  if (T0 < 0) {    T0+=24.0;  }  return T0;}  }
class C{  @Override public int size(){  return this.lastEntry.size();}  }
class C{  protected void performRound(){  boolean energyHasChanged=false;  for (int i=0; i < v.length; i++) {    int index=i;    double oldNodeDistribution=getNodeDistribution(index);    double oldEdgeDistance=getEdgeDistanceFromNode(index);    oldEdgeDistance+=getEdgeDistanceAffectedNodes(index);    double oldEdgeCrossing=getEdgeCrossingAffectedEdges(index);    double oldBorderLine=getBorderline(index);    double oldEdgeLength=getEdgeLengthAffectedEdges(index);    double oldAdditionFactors=getAdditionFactorsEnergy(index);    for (int j=0; j < triesPerCell; j++) {      double movex=moveRadius * xNormTry[j];      double movey=moveRadius * yNormTry[j];      double oldx=v[index].x;      double oldy=v[index].y;      v[index].x=v[index].x + movex;      v[index].y=v[index].y + movey;      double energyDelta=calcEnergyDelta(index,oldNodeDistribution,oldEdgeDistance,oldEdgeCrossing,oldBorderLine,oldEdgeLength,oldAdditionFactors);      if (energyDelta < 0) {        energyHasChanged=true;        break;      } else {        v[index].x=oldx;        v[index].y=oldy;      }    }  }  if (energyHasChanged) {    unchangedEnergyRoundCount=0;  } else {    unchangedEnergyRoundCount++;    moveRadius/=2.0;  }  if (unchangedEnergyRoundCount >= unchangedEnergyRoundTermination) {    iteration=maxIterations;  }  double newMoveRadius=moveRadius * radiusScaleFactor;  if (moveRadius - newMoveRadius < minMoveRadius) {    newMoveRadius=moveRadius - minMoveRadius;  }  if (newMoveRadius <= minMoveRadius) {    iteration=maxIterations;  }  if (newMoveRadius < fineTuningRadius) {    isFineTuning=true;  }  moveRadius=newMoveRadius;}  }
class C{  public final void testGetFieldSize(){  assertEquals(5,new ECFieldFp(BigInteger.valueOf(23L)).getFieldSize());}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("FssDaoRepRecA[");  buffer.append("m_id = ").append(m_id);  buffer.append(", m_type = ").append(m_type);  buffer.append(", m_info = ").append(m_info);  buffer.append(", m_stat = ").append(m_stat);  buffer.append("]");  return buffer.toString();}  }
class C{  static void mergeSortNoCopy(final int[] x,final int[] y,final int[] auxX,final int[] auxY,final int toIndex,final int insertionSortIndex){  if ((toIndex > x.length) || (toIndex > y.length) || (toIndex > auxX.length)|| (toIndex > auxY.length)) {    throw new ArrayIndexOutOfBoundsException("bad arguments: toIndex=" + toIndex);  }  mergeSort(x,y,x,auxX,y,auxY,insertionSortIndex,toIndex);  if ((insertionSortIndex == 0) || (auxX[insertionSortIndex - 1] <= auxX[insertionSortIndex])) {    System.arraycopy(auxX,0,x,0,toIndex);    System.arraycopy(auxY,0,y,0,toIndex);    return;  }  for (int i=0, p=0, q=insertionSortIndex; i < toIndex; i++) {    if ((q >= toIndex) || ((p < insertionSortIndex) && (auxX[p] <= auxX[q]))) {      x[i]=auxX[p];      y[i]=auxY[p];      p++;    } else {      x[i]=auxX[q];      y[i]=auxY[q];      q++;    }  }}  }
class C{  public void installModuleWithAnnotations(HLEModule hleModule,int version){  if (installedModules.contains(hleModule)) {    return;  }  try {    for (    Method method : hleModule.getClass().getMethods()) {      HLEFunction hleFunction=method.getAnnotation(HLEFunction.class);      if (hleFunction != null && version >= hleFunction.version()) {        installFunctionWithAnnotations(hleFunction,method,hleModule);      }    }  } catch (  Exception e) {    log.error("installModuleWithAnnotations",e);  }  installedModules.add(hleModule);  hleModule.load();}  }
class C{  @Override public Set<Action> actions(Object s){  return _actions;}  }
class C{  private void dropFragmentsTo(long absolutePosition){  int relativePosition=(int)(absolutePosition - totalBytesDropped);  int fragmentIndex=relativePosition / fragmentLength;  for (int i=0; i < fragmentIndex; i++) {    fragmentPool.releaseDirect(dataQueue.remove());    totalBytesDropped+=fragmentLength;  }}  }
class C{  protected boolean buildStructure(OpenableElementInfo info,IProgressMonitor pm,Map newElements,File underlyingResource) throws JavaModelException {  IBinaryType typeInfo=getBinaryTypeInfo(null);  if (typeInfo == null) {    info.setChildren(new IJavaElement[]{});    return false;  }  IType type=getType();  info.setChildren(new IJavaElement[]{type});  newElements.put(type,typeInfo);  ((ClassFileInfo)info).readBinaryChildren(this,(HashMap)newElements,typeInfo);  return true;}  }
class C{  public TsGFci(IndependenceTest test,Score score){  if (score == null) {    throw new NullPointerException();  }  this.sampleSize=score.getSampleSize();  this.score=score;  this.independenceTest=test;}  }
class C{  public static Map<String,Object> jsonToStorageEntry(String fmJson) throws IOException {  Map<String,Object> entry=new HashMap<String,Object>();  MappingJsonFactory f=new MappingJsonFactory();  JsonParser jp;  try {    jp=f.createJsonParser(fmJson);  } catch (  JsonParseException e) {    throw new IOException(e);  }  jp.nextToken();  if (jp.getCurrentToken() != JsonToken.START_OBJECT) {    throw new IOException("Expected START_OBJECT");  }  while (jp.nextToken() != JsonToken.END_OBJECT) {    if (jp.getCurrentToken() != JsonToken.FIELD_NAME) {      throw new IOException("Expected FIELD_NAME");    }    String n=jp.getCurrentName();    jp.nextToken();    if (jp.getText().equals(""))     continue;    if (n == "name")     entry.put(StaticFlowEntryPusher.COLUMN_NAME,jp.getText()); else     if (n == "switch")     entry.put(StaticFlowEntryPusher.COLUMN_SWITCH,jp.getText()); else     if (n == "actions")     entry.put(StaticFlowEntryPusher.COLUMN_ACTIONS,jp.getText()); else     if (n == "priority")     entry.put(StaticFlowEntryPusher.COLUMN_PRIORITY,jp.getText()); else     if (n == "active")     entry.put(StaticFlowEntryPusher.COLUMN_ACTIVE,jp.getText()); else     if (n == "wildcards")     entry.put(StaticFlowEntryPusher.COLUMN_WILDCARD,jp.getText()); else     if (n == "ingress-port")     entry.put(StaticFlowEntryPusher.COLUMN_IN_PORT,jp.getText()); else     if (n == "src-mac")     entry.put(StaticFlowEntryPusher.COLUMN_DL_SRC,jp.getText()); else     if (n == "dst-mac")     entry.put(StaticFlowEntryPusher.COLUMN_DL_DST,jp.getText()); else     if (n == "vlan-id")     entry.put(StaticFlowEntryPusher.COLUMN_DL_VLAN,jp.getText()); else     if (n == "vlan-priority")     entry.put(StaticFlowEntryPusher.COLUMN_DL_VLAN_PCP,jp.getText()); else     if (n == "ether-type")     entry.put(StaticFlowEntryPusher.COLUMN_DL_TYPE,jp.getText()); else     if (n == "tos-bits")     entry.put(StaticFlowEntryPusher.COLUMN_NW_TOS,jp.getText()); else     if (n == "protocol")     entry.put(StaticFlowEntryPusher.COLUMN_NW_PROTO,jp.getText()); else     if (n == "src-ip")     entry.put(StaticFlowEntryPusher.COLUMN_NW_SRC,jp.getText()); else     if (n == "dst-ip")     entry.put(StaticFlowEntryPusher.COLUMN_NW_DST,jp.getText()); else     if (n == "src-port")     entry.put(StaticFlowEntryPusher.COLUMN_TP_SRC,jp.getText()); else     if (n == "dst-port")     entry.put(StaticFlowEntryPusher.COLUMN_TP_DST,jp.getText());  }  return entry;}  }
class C{  @Override public void onUIReset(PtrFrameLayout frame){  mScale=1f;  mDrawable.stop();}  }
class C{  public static void checkArray(int[] expected,int[] actual){  for (int r=0; r < expected.length; r++) {    assertEquals(expected[r],actual[r]);  }}  }
class C{  private static void showForwardedFunction(final Window parent,final IViewContainer container,final INaviView view,final INaviFunction function,final CGraphWindow window){  if (container instanceof CModuleContainer) {    CMessageBox.showInformation(parent,"Please open forwarded views from inside a project.");    return;  }  final IDatabase database=container.getDatabase();  final int moduleId=function.getForwardedFunctionModuleId();  final INaviModule forwardedModule=database.getContent().getModule(moduleId);  if (forwardedModule == null) {    final String message="E00019: " + "Forwarded view can not be loaded (Unknown module)";    final String description=CUtilityFunctions.createDescription("BinNavi could not open the forwarded view because the module of " + "the forwarding target is unknown.",new String[]{"Probably the result of a bug in BinNavi"},new String[]{"The view can not be opened. Try to update the " + "forwarding target again. Restart BinNavi if the view " + "can still not be opened. Contact the BinNavi support if necessary."});    NaviErrorDialog.show(parent,message,description);  } else   if (forwardedModule.isLoaded()) {    final IAddress address=function.getForwardedFunctionAddress();    final INaviFunction forwardedFunction=forwardedModule.getContent().getFunctionContainer().getFunction(address);    if (forwardedFunction == null) {      final String message="E00020: " + "Forwarded view can not be loaded (Unknown function)";      final String description=CUtilityFunctions.createDescription("BinNavi could not open the forwarded view because the target function is unknown.",new String[]{"Probably the result of a bug in BinNavi"},new String[]{"The view can not be opened. Try to update the forwarding target " + "again. Restart BinNavi if the view can still not be opened. Contact the " + "BinNavi support if necessary."});      NaviErrorDialog.show(parent,message,description);    } else {      final INaviView forwardedView=forwardedModule.getContent().getViewContainer().getView(forwardedFunction);      if (forwardedView == null) {        final String message="E00107: " + "Forwarded view can not be loaded (Unknown view)";        final String description=CUtilityFunctions.createDescription("BinNavi could not open the forwarded view because the target view is unknown.",new String[]{"Probably the result of a bug in BinNavi"},new String[]{"The view can not be opened. Try to update the forwarding target " + "again. Restart BinNavi if the view can still not be opened. Contact the " + "BinNavi support if necessary."});        NaviErrorDialog.show(parent,message,description);      } else {        CGraphOpener.showGraph(container,forwardedView,window,parent);      }    }  } else {    if (CMessageBox.showYesNoQuestion(parent,"The view can not be opened because it is forwarded to an unloaded module.\n\n" + "Do you want to load the forwarded module now?") == JOptionPane.YES_OPTION) {      CModuleLoader.loadModule(parent,forwardedModule);      if (forwardedModule.isLoaded()) {        showForwardedFunction(parent,container,view,function,window);      }    }  }}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/protection/continuous-copies/failover-test-cancel") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN,ACL.ALL}) @Deprecated public TaskList failoverTestCancel(@PathParam("id") URI id,CopiesParam param) throws ControllerException {  TaskResourceRep taskResp=null;  TaskList taskList=new TaskList();  ArgValidator.checkFieldUriType(id,Volume.class,"id");  boolean vplexVolume=checkIfVolumeIsForVplex(id);  ArgValidator.checkFieldNotEmpty(param.getCopies(),"copies");  List<Copy> copies=param.getCopies();  if (copies.size() != 1) {    throw APIException.badRequests.failoverCopiesParamCanOnlyBeOne();  }  Copy copy=copies.get(0);  if (vplexVolume && copy.getType().equalsIgnoreCase(TechnologyType.NATIVE.toString())) {    throw APIException.badRequests.actionNotApplicableForVplexVolumeMirrors(ProtectionOp.FAILOVER_TEST_CANCEL.getRestOp());  }  ArgValidator.checkFieldUriType(copy.getCopyID(),Volume.class,"id");  ArgValidator.checkFieldNotEmpty(copy.getType(),"type");  if (copy.getType().equalsIgnoreCase(TechnologyType.RP.toString())) {    taskResp=performProtectionAction(id,copy,ProtectionOp.FAILOVER_TEST_CANCEL.getRestOp());    taskList.getTaskList().add(taskResp);  } else   if (copy.getType().equalsIgnoreCase(TechnologyType.SRDF.toString())) {    id=VPlexSrdfUtil.getSrdfIdFromVolumeId(_dbClient,id);    copy.setCopyID(VPlexSrdfUtil.getSrdfIdFromVolumeId(_dbClient,copy.getCopyID()));    taskResp=performSRDFProtectionAction(id,copy,ProtectionOp.FAILOVER_TEST_CANCEL.getRestOp());    taskList.getTaskList().add(taskResp);  } else {    throw APIException.badRequests.invalidCopyType(copy.getType());  }  return taskList;}  }
class C{  private int[][] generateWorkingKey(byte[] key,boolean forEncryption){  int KC=key.length / 4;  int t;  if (((KC != 4) && (KC != 6) && (KC != 8)) || ((KC * 4) != key.length)) {    throw new IllegalArgumentException("Key length not 128/192/256 bits.");  }  ROUNDS=KC + 6;  int[][] W=new int[ROUNDS + 1][4];  t=0;  int i=0;  while (i < key.length) {    W[t >> 2][t & 3]=(key[i] & 0xff) | ((key[i + 1] & 0xff) << 8) | ((key[i + 2] & 0xff) << 16)| (key[i + 3] << 24);    i+=4;    t++;  }  int k=(ROUNDS + 1) << 2;  for (i=KC; (i < k); i++) {    int temp=W[(i - 1) >> 2][(i - 1) & 3];    if ((i % KC) == 0) {      temp=subWord(shift(temp,8)) ^ rcon[(i / KC) - 1];    } else     if ((KC > 6) && ((i % KC) == 4)) {      temp=subWord(temp);    }    W[i >> 2][i & 3]=W[(i - KC) >> 2][(i - KC) & 3] ^ temp;  }  if (!forEncryption) {    for (int j=1; j < ROUNDS; j++) {      for (i=0; i < 4; i++) {        W[j][i]=inv_mcol(W[j][i]);      }    }  }  return W;}  }
class C{  public boolean isDirty(){  for (  Aspect aspect : this.getAspect()) {    if (aspect.isDirty()) {      return true;    }  }  return this.dirty;}  }
class C{  private final void commit(){  if (expandTable != null) {    for (int i=0; i < expandTable.size(); i++) {      int[] valueList=expandTable.elementAt(i);      for (int j=0; j < valueList.length; j++) {        int order=valueList[j];        if (order < RBCollationTables.EXPANDCHARINDEX && order > CHARINDEX) {          int ch=order - CHARINDEX;          int realValue=getCharOrder(ch);          if (realValue == RBCollationTables.UNMAPPED) {            valueList[j]=IGNORABLEMASK & ch;          } else {            valueList[j]=realValue;          }        }      }    }  }}  }
class C{  public static String toHexString(long v){  return IntegralToString.longToHexString(v);}  }
class C{  public void testResourcesAvailable(){  new RomanianAnalyzer().close();}  }
class C{  protected void sequence_ActionFacet_ClassicFacet_DefinitionFacet_FunctionFacet_TypeFacet_VarFacet(ISerializationContext context,Facet semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public final static byte[] decode(byte[] arr){  int length=arr.length;  if (length == 0) {    return new byte[0];  }  int sndx=0, endx=length - 1;  int pad=arr[endx] == '=' ? (arr[endx - 1] == '=' ? 2 : 1) : 0;  int cnt=endx - sndx + 1;  int sepCnt=length > 76 ? (arr[76] == '\r' ? cnt / 78 : 0) << 1 : 0;  int len=((cnt - sepCnt) * 6 >> 3) - pad;  byte[] dest=new byte[len];  int d=0;  for (int cc=0, eLen=(len / 3) * 3; d < eLen; ) {    int i=INV[arr[sndx++]] << 18 | INV[arr[sndx++]] << 12 | INV[arr[sndx++]] << 6 | INV[arr[sndx++]];    dest[d++]=(byte)(i >> 16);    dest[d++]=(byte)(i >> 8);    dest[d++]=(byte)i;    if (sepCnt > 0 && ++cc == 19) {      sndx+=2;      cc=0;    }  }  if (d < len) {    int i=0;    for (int j=0; sndx <= endx - pad; j++) {      i|=INV[arr[sndx++]] << (18 - j * 6);    }    for (int r=16; d < len; r-=8) {      dest[d++]=(byte)(i >> r);    }  }  return dest;}  }
class C{  public static void writeBoolean(boolean value,QueryResultFormat format,OutputStream out) throws QueryResultHandlerException, UnsupportedQueryResultFormatException {  BooleanQueryResultWriter writer=createBooleanWriter(format,out);  writer.startDocument();  writer.startHeader();  writer.handleBoolean(value);}  }
class C{  public void initialize(Properties props){  try {    if (props != null) {      PROPERTIES=props;    } else {      PROPERTIES=Utils.readProperties(PROPERTY_FILE);    }    String drivers=PROPERTIES.getProperty("jdbcDriver","jdbc.idbDriver");    if (drivers == null) {      throw new Exception("No database drivers (JDBC) specified");    }    StringTokenizer st=new StringTokenizer(drivers,", ");    while (st.hasMoreTokens()) {      String driver=st.nextToken();      boolean result;      try {        Class.forName(driver);        DRIVERS.addElement(driver);        result=true;      } catch (      Exception e) {        result=false;      }      if (!result && !DRIVERS_ERRORS.contains(driver)) {        Logger.log(Logger.Level.WARNING,"Trying to add database driver (JDBC): " + driver + " - "+ "Warning, not in CLASSPATH?");      } else       if (m_Debug) {        System.err.println("Trying to add database driver (JDBC): " + driver + " - "+ (result ? "Success!" : "Warning, not in CLASSPATH?"));      }      if (!result) {        DRIVERS_ERRORS.add(driver);      }    }  } catch (  Exception ex) {    System.err.println("Problem reading properties. Fix before continuing.");    System.err.println(ex);  }  m_DatabaseURL=PROPERTIES.getProperty("jdbcURL","jdbc:idb=experiments.prp");  m_stringType=PROPERTIES.getProperty("CREATE_STRING","LONGVARCHAR");  m_intType=PROPERTIES.getProperty("CREATE_INT","INT");  m_doubleType=PROPERTIES.getProperty("CREATE_DOUBLE","DOUBLE");  m_checkForUpperCaseNames=PROPERTIES.getProperty("checkUpperCaseNames","false").equals("true");  m_checkForLowerCaseNames=PROPERTIES.getProperty("checkLowerCaseNames","false").equals("true");  m_setAutoCommit=PROPERTIES.getProperty("setAutoCommit","true").equals("true");  m_createIndex=PROPERTIES.getProperty("createIndex","false").equals("true");  setKeywords(PROPERTIES.getProperty("Keywords","AND,ASC,BY,DESC,FROM,GROUP,INSERT,ORDER,SELECT,UPDATE,WHERE"));  setKeywordsMaskChar(PROPERTIES.getProperty("KeywordsMaskChar","_"));}  }
class C{  public void append(Address region){  lock.acquire();  if (MarkCompactCollector.VERBOSE) {    Log.write("Appending region ");    Log.write(region);    Log.writeln(" to global list");  }  if (regionList.isZero()) {    regionList=region;  } else {    appendRegion(regionList,region);  }  lock.release();}  }
class C{  public TimeOfDay withSecondOfMinute(int second){  int[] newValues=getValues();  newValues=getChronology().secondOfMinute().set(this,SECOND_OF_MINUTE,newValues,second);  return new TimeOfDay(this,newValues);}  }
class C{  protected String calculatePath(final ServerItemPath serverItemPath,final int attemptCount){  String fileName=serverItemPath.getName();  final int periodPos=fileName.lastIndexOf('.');  final String extension=(periodPos < 1) ? "" : fileName.substring(periodPos);  final String attempt=(attemptCount == 0) ? "" : "" + attemptCount;  if (extension.length() > 0) {    fileName=fileName.substring(0,fileName.length() - extension.length());  }  return serverItemPath.getParent().getFullPath() + "/" + fileName+ BRANCH_DEFAULT_NAME+ attempt+ extension;}  }
class C{  private boolean isValidNewName() throws IOException {  if (mNewName == null || mNewName.length() <= 0 || mNewName.contains(File.separator)) {    return false;  }  String tmpFolderName=FileStorageUtils.getTemporalPath("");  File testFile=new File(tmpFolderName + mNewName);  File tmpFolder=testFile.getParentFile();  tmpFolder.mkdirs();  if (!tmpFolder.isDirectory()) {    throw new IOException("Unexpected error: temporal directory could not be created");  }  try {    testFile.createNewFile();  } catch (  IOException e) {    Log_OC.i(TAG,"Test for validity of name " + mNewName + " in the file system failed");    return false;  }  boolean result=(testFile.exists() && testFile.isFile());  testFile.delete();  return result;}  }
class C{  public static String printProductBarcode(Properties ctx,HttpServletRequest request,boolean isPrintProductName,boolean isPrintProductDescription,boolean isPrintPrices,String trxName) throws OperationException {  ArrayList<ItemBean> items=(ArrayList<ItemBean>)request.getSession().getAttribute(Constants.BARCODE_CART_ITEMS);  StringBuffer barcodeData=new StringBuffer();  int m_product_id=0;  String productName="";  BigDecimal qty=Env.ZERO;  BigDecimal price=Env.ZERO;  BigDecimal unitSalePrice=Env.ZERO;  for (int i=0; i < items.size(); i++) {    ItemBean itemBean=items.get(i);    String barcode="";    String description="";    String title="";    String subtitle="";    m_product_id=itemBean.getProductId();    MProduct product=MProduct.get(ctx,m_product_id);    productName=product.getName();    description=product.getDescription();    String currSymbol=PriceListManager.getCurrency(ctx,itemBean.getPriceListId());    qty=itemBean.getQty();    price=itemBean.getPrice();    barcode=itemBean.getBarCode();    if (isPrintProductName && isPrintProductDescription) {      description=productName + " " + description;    } else     if (isPrintProductName && !isPrintProductDescription) {      description=productName;    } else {    }    unitSalePrice=price.divide(qty);    String str="";    String[] temp;    String delimeter=" ";    temp=description.split(delimeter);    if (description.length() >= 23) {      for (int j=0; j < temp.length; j++) {        str+=temp[j] + " ";        if (str.length() >= 23) {          for (int n=0; n < j - 1; n++) {            title+=temp[n] + " ";          }          subtitle=description.substring(title.length(),description.length());          break;        }      }    } else {      title=description;      subtitle="";    }    barcodeData.append(BarcodeManager.getBarcodeData(title.trim(),subtitle.trim(),barcode.trim(),unitSalePrice,currSymbol,qty.intValue(),isPrintPrices));  }  return barcodeData.toString();}  }
class C{  public Map<String,ResultEnvelope> explode(){  Map<String,ResultEnvelope> exploded=new HashMap<String,ResultEnvelope>();  for (  String attr : (pointEstimate != null ? pointEstimate : avgCase).histograms.keySet()) {    ResultEnvelope env=new ResultEnvelope();    for (    Which which : Which.values()) {      ResultSet orig=this.get(which);      if (orig != null) {        ResultSet rs=new ResultSet();        rs.id=orig.id;        rs.histograms.put(attr,orig.histograms.get(attr));        env.put(which,rs);        env.id=this.id;      }    }    exploded.put(attr,env);  }  return exploded;}  }
class C{  public void doneButtonActionPerformed(){  if (editMode) {    editMode=false;    curNode=null;    addButton.setVisible(true);    editButton.setVisible(true);    deleteButton.setVisible(true);    doneButton.setVisible(true);    updateButton.setVisible(false);    cancelButton.setVisible(false);  }  if (changedNode) {    javax.swing.JOptionPane.showMessageDialog(this,Bundle.getMessage("Reminder1") + "\n" + Bundle.getMessage("Reminder2"),Bundle.getMessage("ReminderTitle"),javax.swing.JOptionPane.INFORMATION_MESSAGE);  }  setVisible(false);  dispose();}  }
class C{  public void addDialog(GUIAction dialogType){switch (dialogType) {case STRING_INPUT:{      hasStringDialogs=true;    }  break;case OK_CANCEL_SELECTION:{  hasYesCancelDialogs=true;}break;case YES_NO_CANCEL_SELECTION:{hasYesNoCancelDialogs=true;}break;case YES_NO_SELECTION:{hasYesNoDialogs=true;}break;case OPTION_SELECTION:{hasOptionDialogs=true;}break;default :throw new IllegalStateException("dialogType " + dialogType + " was not implemented");}}  }
class C{  @Override public void beforeFirst() throws SQLException {  if (autoClose) {    throw DbException.get(ErrorCode.RESULT_SET_NOT_SCROLLABLE);  }  rowId=-1;  if (source != null) {    source.reset();  }}  }
class C{  public void test_lastIndexOfLjava_lang_ObjectI(){  assertEquals("Failed to find object",0,tVector.lastIndexOf("Test 0",0));  assertTrue("Found Object outside of index",(tVector.lastIndexOf("Test 0",10) > -1));  tVector.setElementAt(null,20);  tVector.setElementAt(null,40);  tVector.setElementAt(null,60);  assertTrue("Incorrect lastIndexOf returned for null: " + tVector.lastIndexOf(null,15),tVector.lastIndexOf(null,15) == -1);  assertTrue("Incorrect lastIndexOf returned for null: " + tVector.lastIndexOf(null,45),tVector.lastIndexOf(null,45) == 40);  try {    tVector.lastIndexOf(null,tVector.size());    fail("IndexOutOfBoundsException expected");  } catch (  IndexOutOfBoundsException e) {  }}  }
class C{  protected int engineGetKeySize(Key key) throws InvalidKeyException {  byte[] encoded=key.getEncoded();  if (encoded.length != 24) {    throw new InvalidKeyException("Invalid key length: " + encoded.length + " bytes");  }  return 112;}  }
class C{  public void close(){}  }
class C{  public boolean isSoundLoaded(int resourceId){  return _soundMap.containsKey(resourceId);}  }
class C{  public void test_Constructor(){  try {    new MockAttributedCharacterIteratorAttribute("test");  } catch (  Exception e) {    fail("Unexpected exception " + e.toString());  }}  }
class C{  public final boolean hasConflict(DocumentBuilderSetting other){  if (other == null) {    throw new NullPointerException("other");  }  if (other == this) {    return true;  }  return strategy.hasConflict(other.strategy);}  }
class C{  public static boolean isAppInBackground(){  return (null == mCurrentActivity) && (null != getInstance()) && getInstance().mIsInBackground;}  }
class C{  protected ConstantTokenFilter(TokenStream input,String token){  super(input);  this.token=token;}  }
class C{  public int[] validBaudValues(){  return new int[]{57600,115200,230400,250000,288000,333333,460800};}  }
class C{  public RandomGeneratorPanel(){  super();  this.add(getNoisePanel());}  }
class C{  public ObjectSerializationEncoder(){}  }
class C{  public GOCDataBuilder withSRActionable(final boolean sRActionablec){  this.srActionablec=sRActionablec;  return this;}  }
class C{  public TransactionHeuristicException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  private void printHeader(Problem problem,boolean reduced,List<String> attributes,PrintWriter writer){  int numberOfVariables=problem.getNumberOfVariables();  int numberOfObjectives=problem.getNumberOfObjectives();  if (reduced) {    numberOfVariables=0;  }  writer.println("% Title: MOEA Framework Data Set");  writer.println("% Date: " + new Date());  writer.print("@RELATION \"");  writer.print(problem.getName());  writer.println("\"");  if (attributes.size() == numberOfObjectives) {    for (int i=0; i < numberOfVariables; i++) {      writer.print("@ATTRIBUTE Var");      writer.print(i + 1);      writer.println(" NUMERIC");    }    for (int i=0; i < numberOfObjectives; i++) {      writer.print("@ATTRIBUTE ");      writer.print(attributes.get(i));      writer.println(" NUMERIC");    }  } else   if (attributes.size() == numberOfVariables + numberOfObjectives) {    for (int i=0; i < numberOfVariables + numberOfObjectives; i++) {      writer.print("@ATTRIBUTE ");      writer.print(attributes.get(i));      writer.println(" NUMERIC");    }  } else {    if (!attributes.isEmpty()) {      System.err.println("incorrect number of names, using defaults");    }    for (int i=0; i < numberOfVariables; i++) {      writer.print("@ATTRIBUTE Var");      writer.print(i + 1);      writer.println(" NUMERIC");    }    for (int i=0; i < numberOfObjectives; i++) {      writer.print("@ATTRIBUTE Obj");      writer.print(i + 1);      writer.println(" NUMERIC");    }  }  writer.println("@DATA");}  }
class C{  public void render(Camera camera,final Matrix4 vpMatrix,final Matrix4 projMatrix,final Matrix4 vMatrix,Material sceneMaterial){  render(camera,vpMatrix,projMatrix,vMatrix,null,sceneMaterial);}  }
class C{  public DecoderResult decode(boolean[][] image,Map<DecodeHintType,?> hints) throws ChecksumException, FormatException {  int dimension=image.length;  BitMatrix bits=new BitMatrix(dimension);  for (int i=0; i < dimension; i++) {    for (int j=0; j < dimension; j++) {      if (image[i][j]) {        bits.set(j,i);      }    }  }  return decode(bits,hints);}  }
class C{  public void startEntity(String name) throws SAXException {  m_handler.startEntity(name);}  }
class C{  private static List<String[]> readSentence(BufferedReader aReader) throws IOException {  List<String[]> words=new ArrayList<String[]>();  String line;  while ((line=aReader.readLine()) != null) {    if (StringUtils.isBlank(line)) {      break;    }    String[] fields=line.split(" ");    if (fields.length != 4) {      throw new IOException("Invalid file format. Line needs to have 4 space-separted fields: [" + line + "]");    }    words.add(fields);  }  if (line == null && words.isEmpty()) {    return null;  } else {    return words;  }}  }
class C{  public void removeEventListener(GroupFileTransferListener listener) throws RcsServiceNotAvailableException, RcsGenericException {  if (mApi == null) {    throw new RcsServiceNotAvailableException();  }  try {    WeakReference<IGroupFileTransferListener> weakRef=mGroupFileTransferListeners.remove(listener);    if (weakRef == null) {      return;    }    IGroupFileTransferListener rcsListener=weakRef.get();    if (rcsListener != null) {      mApi.removeEventListener3(rcsListener);    }  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  public void write(char cbuf[],int off,int len) throws IOException {  if (sink == null) {    throw new IOException("Pipe not connected");  } else   if ((off | len | (off + len)| (cbuf.length - (off + len))) < 0) {    throw new IndexOutOfBoundsException();  }  sink.receive(cbuf,off,len);}  }
class C{  public Object castToType(int t,XPathContext support) throws javax.xml.transform.TransformerException {  Object result;switch (t) {case CLASS_STRING:    result=str();  break;case CLASS_NUMBER:result=new Double(num());break;case CLASS_NODESET:result=iter();break;case CLASS_BOOLEAN:result=new Boolean(bool());break;case CLASS_UNKNOWN:result=m_obj;break;default :error(XPATHErrorResources.ER_CANT_CONVERT_TO_TYPE,new Object[]{getTypeString(),Integer.toString(t)});result=null;}return result;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:49.466 -0500",hash_original_method="DA636A49D82699419B2FBA1150F1CBEF",hash_generated_method="F667FE431F48E013D6A55B3947BBB1B2") @Override protected void handlePollStateResultMessage(int what,AsyncResult ar){  if (what == EVENT_POLL_STATE_GPRS) {    if (DBG)     log("handlePollStateResultMessage: EVENT_POLL_STATE_GPRS");    String states[]=(String[])ar.result;    int type=0;    int regState=-1;    if (states.length > 0) {      try {        regState=Integer.parseInt(states[0]);        if (states.length >= 4 && states[3] != null) {          type=Integer.parseInt(states[3]);        }      } catch (      NumberFormatException ex) {        loge("handlePollStateResultMessage: error parsing GprsRegistrationState: " + ex);      }    }    mLteSS.setRadioTechnology(type);    mLteSS.setState(regCodeToServiceState(regState));  } else {    super.handlePollStateResultMessage(what,ar);  }}  }
class C{  public boolean isInvalidate(){  return this.opType == OP_TYPE_INVALIDATE && isEntry();}  }
class C{  public AlgorithmResult(String algorithm){  super();  this.algorithm=algorithm;  indicatorResults=new ArrayList<IndicatorResult>();}  }
class C{  public IntIteratorSpliterator(java8.util.PrimitiveIterator.OfInt iterator,long size,int characteristics){  this.it=iterator;  this.est=size;  this.characteristics=(characteristics & Spliterator.CONCURRENT) == 0 ? characteristics | Spliterator.SIZED | Spliterator.SUBSIZED : characteristics;}  }
class C{  public static void swipeVerticalAfter(AppiumDriver driver,AugmentedFunctions<?> augmentedFunctions,By swipeBy,int waitTimeInSeconds,int offset,int durationInMilliSeconds){  Preconditions.checkNotNull(driver);  Preconditions.checkNotNull(augmentedFunctions);  Preconditions.checkNotNull(swipeBy);  WebElement elementPresent=augmentedFunctions.findElementPresentAfter(swipeBy,waitTimeInSeconds);  int x=elementPresent.getLocation().getX() + elementPresent.getSize().getWidth() / 2;  int y=elementPresent.getLocation().getY() + elementPresent.getSize().getHeight() / 2;  int swipe=getVerticalOffset(driver,y,offset);  driver.swipe(x,y,x,swipe,durationInMilliSeconds);}  }
class C{  public static void bootImageReportGeneration(Object slots){  objectSlots=(Object[])slots;}  }
class C{  public void onPrev(Function callback){  peer.onPrev(callback);}  }
class C{  @SuppressLint("NewApi") private void attachImageFrommGallery(){  Bundle conData=new Bundle();  Intent intent=new Intent();  if ((mSelectedGalleryItemsList.size() == 1) || (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR2)) {    intent.setData(mSelectedGalleryItemsList.get(0).mFileUri);  } else   if (mSelectedGalleryItemsList.size() > 0) {    ClipData.Item firstUri=new ClipData.Item(null,null,null,mSelectedGalleryItemsList.get(0).mFileUri);    String[] mimeType={"*/*"};    ClipData clipData=new ClipData("",mimeType,firstUri);    for (int index=1; index < mSelectedGalleryItemsList.size(); index++) {      ClipData.Item item=new ClipData.Item(null,null,null,mSelectedGalleryItemsList.get(index).mFileUri);      clipData.addItem(item);    }    intent.setClipData(clipData);  } else {    Uri uriSavedFromLifeCycle=(Uri)mImagePreviewImageView.getTag();    if (null != uriSavedFromLifeCycle) {      intent.setData(uriSavedFromLifeCycle);    }  }  intent.putExtras(conData);  setResult(RESULT_OK,intent);  VectorApp.setSavedCameraImagePreview(null);  finish();}  }
class C{  public boolean pageScroll(int direction){  boolean right=direction == View.FOCUS_RIGHT;  int width=getWidth();  if (right) {    mTempRect.left=getScrollX() + width;    int count=getChildCount();    if (count > 0) {      View view=getChildAt(0);      if (mTempRect.left + width > view.getRight()) {        mTempRect.left=view.getRight() - width;      }    }  } else {    mTempRect.left=getScrollX() - width;    if (mTempRect.left < 0) {      mTempRect.left=0;    }  }  mTempRect.right=mTempRect.left + width;  return scrollAndFocus(direction,mTempRect.left,mTempRect.right);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodehaschildnodesfalse.class,args);}  }
class C{  public void initialize(BulkCursorDescriptor d){  mBulkCursor=d.cursor;  mColumns=d.columnNames;  mRowIdColumnIndex=DatabaseUtils.findRowIdColumnIndex(mColumns);  mWantsAllOnMoveCalls=d.wantsAllOnMoveCalls;  mCount=d.count;  if (d.window != null) {    setWindow(d.window);  }}  }
class C{  public boolean isBillTo(){  Object oo=get_Value(COLUMNNAME_IsBillTo);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void promoteMirror(URI vplexURI,URI vplexMirrorURI,URI promoteVolumeURI,String stepId) throws WorkflowException {  try {    WorkflowStepCompleter.stepExecuting(stepId);    VPlexApiClient client=getVPlexAPIClient(_vplexApiFactory,vplexURI,_dbClient);    VplexMirror vplexMirror=getDataObject(VplexMirror.class,vplexMirrorURI,_dbClient);    Volume sourceVplexVolume=getDataObject(Volume.class,vplexMirror.getSource().getURI(),_dbClient);    Volume promoteVolume=_dbClient.queryObject(Volume.class,promoteVolumeURI);    VPlexVirtualVolumeInfo vvInfo=client.findVirtualVolume(vplexMirror.getDeviceLabel(),null);    StringSet assocVolumes=vplexMirror.getAssociatedVolumes();    String promotedLabel=String.format("%s-%s",sourceVplexVolume.getLabel(),vplexMirror.getLabel());    String newVolumeName=null;    try {      if (CustomVolumeNamingUtils.isCustomVolumeNamingEnabled(customConfigHandler,DiscoveredDataObject.Type.vplex.name())) {        String customConfigName=CustomConfigConstants.CUSTOM_VOLUME_NAME;        Project project=_dbClient.queryObject(Project.class,promoteVolume.getProject().getURI());        TenantOrg tenant=_dbClient.queryObject(TenantOrg.class,promoteVolume.getTenant().getURI());        DataSource customNameDataSource=CustomVolumeNamingUtils.getCustomConfigDataSource(project,tenant,promotedLabel,vvInfo.getWwn(),null,dataSourceFactory,customConfigName,_dbClient);        if (customNameDataSource != null) {          newVolumeName=CustomVolumeNamingUtils.getCustomName(customConfigHandler,customConfigName,customNameDataSource,DiscoveredDataObject.Type.vplex.name());        }        vvInfo=CustomVolumeNamingUtils.renameVolumeOnVPlex(vvInfo,newVolumeName,client);        promotedLabel=newVolumeName;      } else {        StringBuilder volumeNameBuilder=new StringBuilder();        volumeNameBuilder.append(vplexMirror.getDeviceLabel());        volumeNameBuilder.append(VPlexApiConstants.VIRTUAL_VOLUME_SUFFIX);        newVolumeName=volumeNameBuilder.toString();        vvInfo=CustomVolumeNamingUtils.renameVolumeOnVPlex(vvInfo,newVolumeName,client);      }    } catch (    Exception e) {      _log.warn(String.format("Error renaming promoted VPLEX volume %s",promoteVolumeURI),e);    }    _log.info(String.format("Renamed promoted virtual volume: %s path: %s",vvInfo.getName(),vvInfo.getPath()));    promoteVolume.setLabel(promotedLabel);    promoteVolume.setNativeId(vvInfo.getPath());    promoteVolume.setNativeGuid(vvInfo.getPath());    promoteVolume.setDeviceLabel(vvInfo.getName());    promoteVolume.setThinlyProvisioned(vvInfo.isThinEnabled());    promoteVolume.setWWN(vvInfo.getWwn());    promoteVolume.setAllocatedCapacity(0L);    promoteVolume.setCapacity(vplexMirror.getCapacity());    promoteVolume.setProvisionedCapacity(vplexMirror.getProvisionedCapacity());    promoteVolume.setVirtualPool(vplexMirror.getVirtualPool());    promoteVolume.setVirtualArray(vplexMirror.getVirtualArray());    promoteVolume.setStorageController(vplexMirror.getStorageController());    promoteVolume.setSystemType(DiscoveredDataObject.Type.vplex.name());    promoteVolume.setPool(NullColumnValueGetter.getNullURI());    promoteVolume.setAssociatedVolumes(new StringSet(assocVolumes));    promoteVolume.setThinlyProvisioned(vplexMirror.getThinlyProvisioned());    promoteVolume.setThinVolumePreAllocationSize(vplexMirror.getThinPreAllocationSize());    promoteVolume.setSyncActive(true);    NamedURI namedURI=promoteVolume.getProject();    namedURI.setName(promotedLabel);    promoteVolume.setProject(namedURI);    namedURI=promoteVolume.getTenant();    namedURI.setName(promotedLabel);    promoteVolume.setTenant(namedURI);    sourceVplexVolume.getMirrors().remove(vplexMirror.getId().toString());    _dbClient.updateObject(sourceVplexVolume);    _dbClient.markForDeletion(vplexMirror);    _dbClient.updateObject(promoteVolume);    WorkflowStepCompleter.stepSucceded(stepId);  } catch (  VPlexApiException vae) {    _log.error("Exception promoting mirror volume: " + vae.getMessage(),vae);    WorkflowStepCompleter.stepFailed(stepId,vae);  }catch (  Exception ex) {    _log.error("Exception promoting mirror volume: " + ex.getMessage(),ex);    ServiceError serviceError=VPlexApiException.errors.promoteMirrorFailed(ex);    WorkflowStepCompleter.stepFailed(stepId,serviceError);  }}  }
class C{  public UniformFilter(final double value){  this.value=value;}  }
class C{  public static boolean symbolNeedsQuoting(CharSequence symbol,boolean quoteOperators){  int length=symbol.length();  if (length == 0) {    throw new EmptySymbolException();  }  if (!isIdentifierKeyword(symbol)) {    char c=symbol.charAt(0);    if (!quoteOperators && isOperatorPart(c)) {      for (int ii=0; ii < length; ii++) {        c=symbol.charAt(ii);        if (!isOperatorPart(c)) {          return true;        }      }      return false;    } else     if (isIdentifierStart(c)) {      for (int ii=0; ii < length; ii++) {        c=symbol.charAt(ii);        if ((c == '\'' || c < 32 || c > 126) || !isIdentifierPart(c)) {          return true;        }      }      return false;    }  }  return true;}  }
class C{  int copy(int srcIndex){  return srcPool.copy(srcIndex,destPool,classnames);}  }
