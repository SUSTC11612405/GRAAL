class C{  @Override public void onResume(){  super.onResume();  if (mAdView != null) {    mAdView.resume();  }}  }
class C{  public void incResultsReturned(){  this._stats.incInt(_resultsSentToResultCollectorId,1);  aggregateStats.incResultsReturned();}  }
class C{  public boolean isKeyword(){  return this.isKeyword;}  }
class C{  private int addElement(DefaultListModel<String> model,String element){  if (model.isEmpty()) {    model.addElement(element);    return 0;  } else {    for (int j=0; j < model.getSize(); j++) {      int compareValue=String.CASE_INSENSITIVE_ORDER.compare(model.getElementAt(j).toString(),element);      if (compareValue > 0) {        model.add(j,element);        return j;      }      if (j == model.getSize() - 1) {        model.add(j + 1,element);        return j + 1;      }    }  }  return -1;}  }
class C{  public static boolean createNewLockFile(String filePath,FileType fileType) throws IOException {  filePath=filePath.replace("\\","/");switch (fileType) {case HDFS:case VIEWFS:    Path path=new Path(filePath);  FileSystem fs=path.getFileSystem(configuration);if (fs.createNewFile(path)) {  fs.deleteOnExit(path);  return true;}return false;case LOCAL:default :File file=new File(filePath);return file.createNewFile();}}  }
class C{  @Override protected void removeAt(int index){  _values[index]=0;  super.removeAt(index);}  }
class C{  public static String deflate(String uri,String namespace){  if (uri == null)   return uri;  if (uri.startsWith(namespace))   return uri.substring(namespace.length());  return uri;}  }
class C{  public static KeyboardButtonBuilder builder(){  return new KeyboardButtonBuilder();}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,scrollRange,0,DEFAULT_OVERSCROLL_SCALE,isTouchEvent);}  }
class C{  private static void copyWithProgress(Action1<Float> progress,long contentLength,InputStream inputStream,OutputStream outputStream) throws IOException {  long totalCount=0;  byte[] buffer=new byte[1024 * 64];  int count;  while ((count=ByteStreams.read(inputStream,buffer,0,buffer.length)) > 0) {    outputStream.write(buffer,0,count);    totalCount+=count;    progress.call((float)totalCount / contentLength);  }}  }
class C{  public CableType canRenderConnection(TileEntity te,ForgeDirection dir,CableType cableType){  return CableType.NONE;}  }
class C{  private void removeExistingAccessor(final MethodDeclaration accessor,final ListRewrite rewrite){  final MethodDeclaration declaration=(MethodDeclaration)ASTNodes.getParent(NodeFinder.perform(rewrite.getParent().getRoot(),accessor.getName().getStartPosition(),accessor.getName().getLength()),MethodDeclaration.METHOD_DECLARATION);  if (declaration != null)   rewrite.remove(declaration,null);}  }
class C{  public static Distribution guessNeighbors(DataSet d){  return new UniformDiscrete(1,25);}  }
class C{  public void process(final DatagramPacket thePacket,final int thePort){synchronized (this) {    OscPacket p=OscPacket.parse(thePacket);    if (p.isValid()) {      if (p.type() == OscPacket.BUNDLE) {        for (int i=0; i < ((OscBundle)p).size(); i++) {          callMethod(((OscBundle)p).getMessage(i));        }      } else {        callMethod((OscMessage)p);      }    }    notifyAll();  }}  }
class C{  public DijkstraShortestPath(Graph<V,E> g,boolean cached){  super(g,cached);}  }
class C{  public synchronized final int evictionCount(){  return evictionCount;}  }
class C{  public void grantRight(Table table,Right right){  if (grantedRights == null) {    grantedRights=New.hashMap();  }  grantedRights.put(table,right);}  }
class C{  @RequestProcessing(value="/admin/user/{userId}/username",method=HTTPRequestMethod.POST) @Before(adviceClass={StopwatchStartAdvice.class,AdminCheck.class}) @After(adviceClass=StopwatchEndAdvice.class) public void updateUserName(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response,final String userId) throws Exception {  final JSONObject user=userQueryService.getUser(userId);  final String oldUserName=user.optString(User.USER_NAME);  final String newUserName=request.getParameter(User.USER_NAME);  if (oldUserName.equals(newUserName)) {    response.sendRedirect(Latkes.getServePath() + "/admin/user/" + userId);    return;  }  user.put(User.USER_NAME,newUserName);  try {    userMgmtService.updateUserName(userId,user);  } catch (  final ServiceException e) {    final AbstractFreeMarkerRenderer renderer=new SkinRenderer();    context.setRenderer(renderer);    renderer.setTemplateName("admin/error.ftl");    final Map<String,Object> dataModel=renderer.getDataModel();    dataModel.put(Keys.MSG,e.getMessage());    filler.fillHeaderAndFooter(request,response,dataModel);    return;  }  response.sendRedirect(Latkes.getServePath() + "/admin/user/" + userId);}  }
class C{  private void validateUnmanagedProtectionSet(VirtualPool vpool,UnManagedVolume unManagedVolume,UnManagedProtectionSet umpset){  if (umpset == null) {    _logger.warn("No unmanaged protection set could be found for unmanaged volume: " + unManagedVolume.getNativeGuid() + " Please run unmanaged CG discovery of registered protection system");    throw IngestionException.exceptions.unManagedProtectionSetNotFound(unManagedVolume.getNativeGuid());  }  String rpHealthy=umpset.getCGCharacteristics().get(SupportedCGCharacteristics.IS_HEALTHY.toString());  if (!Boolean.valueOf(rpHealthy.toUpperCase())) {    _logger.error(String.format("At the time of discovery, the RecoverPoint consistency group %s associated " + "with unmanaged volume %s was in an unhealthy state (disabled, paused, or in error). If the issue " + "has been resolved, rerun discovery of unmanaged consistency groups for this protection system.",umpset.getCgName(),unManagedVolume.getNativeGuid()));    throw IngestionException.exceptions.unManagedProtectionSetNotHealthy(umpset.getCgName(),unManagedVolume.getNativeGuid());  }  String personality=PropertySetterUtil.extractValueFromStringSet(SupportedVolumeInformation.RP_PERSONALITY.toString(),unManagedVolume.getVolumeInformation());  if (personality == null) {    _logger.error("Could not find the personality of unmanaged volume " + unManagedVolume.getLabel() + ". Run unmanaged consistency group discovery for this protection system.");    throw IngestionException.exceptions.rpObjectNotSet("Personality",unManagedVolume.getId());  }  if (Volume.PersonalityTypes.SOURCE.toString().equalsIgnoreCase(personality)) {    String rpSync=umpset.getCGCharacteristics().get(SupportedCGCharacteristics.IS_SYNC.toString());    String rpCopyMode=(vpool.getRpCopyMode() != null) ? vpool.getRpCopyMode() : VirtualPool.RPCopyMode.ASYNCHRONOUS.toString();    if (Boolean.valueOf(rpSync.toUpperCase()) && rpCopyMode.equalsIgnoreCase(VirtualPool.RPCopyMode.ASYNCHRONOUS.toString())) {      _logger.error(String.format("The RecoverPoint consistency group %s associated with unmanaged volume %s is " + "running in synchronous mode, but the virtual pool requires asynchronous mode. Modify virtual pool settings " + "or create a new virtual pool, rerun unmanaged consistency group discovery, and then rerun ingestion.",umpset.getCgName(),unManagedVolume.getNativeGuid()));      throw IngestionException.exceptions.unManagedProtectionSetNotAsync(umpset.getCgName(),unManagedVolume.getNativeGuid());    }    if (!Boolean.valueOf(rpSync.toUpperCase()) && rpCopyMode.equalsIgnoreCase(VirtualPool.RPCopyMode.SYNCHRONOUS.toString())) {      _logger.error(String.format("The RecoverPoint consistency group %s associated with unmanaged volume %s is " + "running in asynchronous mode, but the virtual pool requires synchronous mode. Modify virtual pool " + "settings or create a new virtual pool, rerun unmanaged consistency group discovery, and then rerun ingestion.",umpset.getCgName(),unManagedVolume.getNativeGuid()));      throw IngestionException.exceptions.unManagedProtectionSetNotSync(umpset.getCgName(),unManagedVolume.getNativeGuid());    }  }}  }
class C{  public boolean disableVMAX3Compression(URI blockObjectURI,StorageSystem storageSystem){  VirtualPool virtualPool=null;  StoragePool storagePool=null;  Volume volume=null;  if (URIUtil.isType(blockObjectURI,Volume.class)) {    volume=_dbClient.queryObject(Volume.class,blockObjectURI);  } else   if (URIUtil.isType(blockObjectURI,BlockSnapshot.class)) {    BlockSnapshot snapshot=_dbClient.queryObject(BlockSnapshot.class,blockObjectURI);    volume=_dbClient.queryObject(Volume.class,snapshot.getParent());  } else   if (URIUtil.isType(blockObjectURI,BlockMirror.class)) {    BlockMirror mirror=_dbClient.queryObject(BlockMirror.class,blockObjectURI);    virtualPool=_dbClient.queryObject(VirtualPool.class,mirror.getVirtualPool());    storagePool=_dbClient.queryObject(StoragePool.class,mirror.getPool());  }  if (volume != null) {    virtualPool=_dbClient.queryObject(VirtualPool.class,volume.getVirtualPool());    storagePool=_dbClient.queryObject(StoragePool.class,volume.getPool());  }  return (checkIfProviderSupportsCompressionOperations(storageSystem) && !virtualPool.getCompressionEnabled() && storagePool.getCompressionEnabled());}  }
class C{  public void unregisterReceiver(BroadcastReceiver receiver){synchronized (mReceivers) {    ArrayList<IntentFilter> filters=mReceivers.remove(receiver);    if (filters == null) {      return;    }    for (int i=0; i < filters.size(); i++) {      IntentFilter filter=filters.get(i);      for (int j=0; j < filter.countActions(); j++) {        String action=filter.getAction(j);        ArrayList<ReceiverRecord> receivers=mActions.get(action);        if (receivers != null) {          for (int k=0; k < receivers.size(); k++) {            if (receivers.get(k).receiver == receiver) {              receivers.remove(k);              k--;            }          }          if (receivers.size() <= 0) {            mActions.remove(action);          }        }      }    }  }}  }
class C{  public static PropertyValuesHolder ofInt(String propertyName,int... values){  return new IntPropertyValuesHolder(propertyName,values);}  }
class C{  public EstadoBean(int estado_){  estado=estado_;}  }
class C{  public void closeProxy() throws SQLException {  try {    proxy.stop();  } catch (  Exception e) {  }}  }
class C{  protected void configureTestExtPG(final String refund){  if (refund != null) {    PaymentGatewayParameter p=new PaymentGatewayParameterEntity();    p.setLabel(TestExtFormPaymentGatewayImpl.REFUND_RESPONSE_CODE_PARAM_KEY);    p.setName(TestExtFormPaymentGatewayImpl.REFUND_RESPONSE_CODE_PARAM_KEY);    p.setPgLabel("testExtFormPaymentGatewayLabel");    p.setValue(refund);    TestPaymentGatewayImpl.getGatewayConfig().put(p.getLabel(),p);    testExtPgAlteredParameters.add(TestExtFormPaymentGatewayImpl.REFUND_RESPONSE_CODE_PARAM_KEY);    TestExtFormPaymentGatewayImpl.getGatewayConfig().put(TestExtFormPaymentGatewayImpl.REFUND_RESPONSE_CODE_PARAM_KEY,p);  }}  }
class C{  public void namespaceAfterStartElement(String prefix,String uri) throws SAXException {  if (m_elemContext.m_elementURI == null) {    String prefix1=getPrefixPart(m_elemContext.m_elementName);    if (prefix1 == null && EMPTYSTRING.equals(prefix)) {      m_elemContext.m_elementURI=uri;    }  }  startPrefixMapping(prefix,uri,false);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (name_1: ");  result.append(name_1);  result.append(')');  return result.toString();}  }
class C{  public void playSequentially(Animator... items){  if (items != null) {    mNeedsSort=true;    if (items.length == 1) {      play(items[0]);    } else {      for (int i=0; i < items.length - 1; ++i) {        play(items[i]).before(items[i + 1]);      }    }  }}  }
class C{  protected void loadCommon(NamedBean t,Element elem){  loadComment(t,elem);  loadProperties(t,elem);}  }
class C{  public static int interpolateColor(double x,double y,int c0,int c1,int c2,int c3){  int a0=(c0 >> 24) & 0xff;  int r0=(c0 >> 16) & 0xff;  int g0=(c0 >> 8) & 0xff;  int b0=c0 & 0xff;  int a1=(c1 >> 24) & 0xff;  int r1=(c1 >> 16) & 0xff;  int g1=(c1 >> 8) & 0xff;  int b1=c1 & 0xff;  int a2=(c2 >> 24) & 0xff;  int r2=(c2 >> 16) & 0xff;  int g2=(c2 >> 8) & 0xff;  int b2=c2 & 0xff;  int a3=(c3 >> 24) & 0xff;  int r3=(c3 >> 16) & 0xff;  int g3=(c3 >> 8) & 0xff;  int b3=c3 & 0xff;  double rx=1.0d - x;  double ry=1.0d - y;  double x0=rx * a0 + x * a1;  double x1=rx * a2 + x * a3;  int a=(int)(ry * x0 + y * x1);  a=a << 24;  x0=rx * r0 + x * r1;  x1=rx * r2 + x * r3;  int r=(int)(ry * x0 + y * x1);  r=r << 16;  x0=rx * g0 + x * g1;  x1=rx * g2 + x * g3;  int g=(int)(ry * x0 + y * x1);  g=g << 8;  x0=rx * b0 + x * b1;  x1=rx * b2 + x * b3;  int b=(int)(ry * x0 + y * x1);  return (a | r | g| b);}  }
class C{  public void createAccrualBasedJournalEntriesAndReversalsForLoanCharges(final Office office,final String currencyCode,final Integer accountTypeToBeDebited,final Integer accountTypeToBeCredited,final Long loanProductId,final Long loanId,final String transactionId,final Date transactionDate,final BigDecimal totalAmount,final Boolean isReversal,final List<ChargePaymentDTO> chargePaymentDTOs){  GLAccount receivableAccount=getLinkedGLAccountForLoanCharges(loanProductId,accountTypeToBeDebited,null);  final Map<GLAccount,BigDecimal> creditDetailsMap=new LinkedHashMap<>();  for (  final ChargePaymentDTO chargePaymentDTO : chargePaymentDTOs) {    final Long chargeId=chargePaymentDTO.getChargeId();    final GLAccount chargeSpecificAccount=getLinkedGLAccountForLoanCharges(loanProductId,accountTypeToBeCredited,chargeId);    BigDecimal chargeSpecificAmount=chargePaymentDTO.getAmount();    if (creditDetailsMap.containsKey(chargeSpecificAccount)) {      final BigDecimal existingAmount=creditDetailsMap.get(chargeSpecificAccount);      chargeSpecificAmount=chargeSpecificAmount.add(existingAmount);    }    creditDetailsMap.put(chargeSpecificAccount,chargeSpecificAmount);  }  BigDecimal totalCreditedAmount=BigDecimal.ZERO;  for (  final Map.Entry<GLAccount,BigDecimal> entry : creditDetailsMap.entrySet()) {    final GLAccount account=entry.getKey();    final BigDecimal amount=entry.getValue();    totalCreditedAmount=totalCreditedAmount.add(amount);    if (isReversal) {      createDebitJournalEntryForLoan(office,currencyCode,account,loanId,transactionId,transactionDate,amount);      createCreditJournalEntryForLoan(office,currencyCode,receivableAccount,loanId,transactionId,transactionDate,amount);    } else {      createDebitJournalEntryForLoan(office,currencyCode,receivableAccount,loanId,transactionId,transactionDate,amount);      createCreditJournalEntryForLoan(office,currencyCode,account,loanId,transactionId,transactionDate,amount);    }  }  if (totalAmount.compareTo(totalCreditedAmount) != 0) {    throw new PlatformDataIntegrityException("Meltdown in advanced accounting...sum of all charges is not equal to the fee charge for a transaction","Meltdown in advanced accounting...sum of all charges is not equal to the fee charge for a transaction",totalCreditedAmount,totalAmount);  }}  }
class C{  public static boolean a(){  return true;}  }
class C{  void recomposeKeys(KeyDeclaration keyDecl){  m_keyDecls.addElement(keyDecl);}  }
class C{  @Override public Void visitVariable(VariableTree variableTree,AnnotatedTypeMirror type){  super.visitVariable(variableTree,type);  if (type.getKind() == TypeKind.DECLARED) {    final ExpressionTree initializer=variableTree.getInitializer();    if (isCallToKeyset(initializer)) {      final AnnotatedDeclaredType variableType=(AnnotatedDeclaredType)type;      final AnnotatedTypeMirror initializerType=atypeFactory.getAnnotatedType(initializer);      if (variableType.getKind() == TypeKind.DECLARED) {        keyForPropagator.propagate((AnnotatedDeclaredType)initializerType,variableType,PropagationDirection.TO_SUPERTYPE,atypeFactory);      }    }  }  return null;}  }
class C{  private static boolean isPackageMovable(String pkg){  return mListMovablePackages.contains(pkg);}  }
class C{  public ByteArrayPool(boolean direct,int maxFreeBuffers,int maxFreeMemory){  this.direct=direct;  freeBuffers=new ArrayList<Stack<DirectBufferByteArray>>();  for (int i=0; i < MAX_BITS; i++) {    freeBuffers.add(new Stack<DirectBufferByteArray>());  }  this.maxFreeBuffers=maxFreeBuffers;  this.maxFreeMemory=maxFreeMemory;  this.freed=false;}  }
class C{  public boolean isSetUpdateTime(){  return EncodingUtils.testBit(__isset_bitfield,__UPDATETIME_ISSET_ID);}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public void multiplyThisBy(GFElement factor) throws RuntimeException {  if (!(factor instanceof GF2nONBElement)) {    throw new RuntimeException("The elements have different" + " representation: not yet" + " implemented");  }  if (!mField.equals(((GF2nONBElement)factor).mField)) {    throw new RuntimeException();  }  if (equals(factor)) {    squareThis();  } else {    long[] a=mPol;    long[] b=((GF2nONBElement)factor).mPol;    long[] c=new long[mLength];    int[][] m=((GF2nONBField)mField).mMult;    int degf, degb, s, fielda, fieldb, bita, bitb;    degf=mLength - 1;    degb=mBit - 1;    s=0;    long TWOTOMAXLONGM1=mBitmask[MAXLONG - 1];    long TWOTODEGB=mBitmask[degb];    boolean old, now;    for (int k=0; k < mDegree; k++) {      s=0;      for (int i=0; i < mDegree; i++) {        fielda=mIBY64[i];        bita=i & (MAXLONG - 1);        fieldb=mIBY64[m[i][0]];        bitb=m[i][0] & (MAXLONG - 1);        if ((a[fielda] & mBitmask[bita]) != 0) {          if ((b[fieldb] & mBitmask[bitb]) != 0) {            s^=1;          }          if (m[i][1] != -1) {            fieldb=mIBY64[m[i][1]];            bitb=m[i][1] & (MAXLONG - 1);            if ((b[fieldb] & mBitmask[bitb]) != 0) {              s^=1;            }          }        }      }      fielda=mIBY64[k];      bita=k & (MAXLONG - 1);      if (s != 0) {        c[fielda]^=mBitmask[bita];      }      if (mLength > 1) {        old=(a[degf] & 1) == 1;        for (int i=degf - 1; i >= 0; i--) {          now=(a[i] & 1) != 0;          a[i]=a[i] >>> 1;          if (old) {            a[i]^=TWOTOMAXLONGM1;          }          old=now;        }        a[degf]=a[degf] >>> 1;        if (old) {          a[degf]^=TWOTODEGB;        }        old=(b[degf] & 1) == 1;        for (int i=degf - 1; i >= 0; i--) {          now=(b[i] & 1) != 0;          b[i]=b[i] >>> 1;          if (old) {            b[i]^=TWOTOMAXLONGM1;          }          old=now;        }        b[degf]=b[degf] >>> 1;        if (old) {          b[degf]^=TWOTODEGB;        }      } else {        old=(a[0] & 1) == 1;        a[0]=a[0] >>> 1;        if (old) {          a[0]^=TWOTODEGB;        }        old=(b[0] & 1) == 1;        b[0]=b[0] >>> 1;        if (old) {          b[0]^=TWOTODEGB;        }      }    }    assign(c);  }}  }
class C{  @Override public void init(final ServletConfig config) throws ServletException {  super.init(config);  try {    this.storage=QueryStorage.getSingletonInstance(this.appConfig);  } catch (  RepositoryException e) {    throw new ServletException(e);  }catch (  IOException e) {    throw new ServletException(e);  }}  }
class C{  static public int ceilPositive(float x){  return (int)(x + CEIL);}  }
class C{  private long hash(final int[] a,final int l,final int k){  final int[] w=weight[k];  long h=init[k];  int i=l;  while (i-- != 0)   h^=(h << 5) + a[i] * w[i % NUMBER_OF_WEIGHTS] + (h >>> 2);  return (h & 0x7FFFFFFFFFFFFFFFL) % m;}  }
class C{  public static double longBitsAsDouble(long number){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return -1;}  }
class C{  public boolean provideTransaction(Transaction tx) throws VerificationException {  Sha256Hash hash=tx.getHash();  if (getTransactionHashes().contains(hash)) {    associatedTransactions.put(hash,tx);    return true;  }  return false;}  }
class C{  public synchronized OMGraphicList prepare(){  if (needToRefetchData()) {    parseData(getEarthquakeData());  }  return generateGraphics();}  }
class C{  public static String readString(InputStream in) throws UtilException {  StringBuilder sb=new StringBuilder();  BufferedReader reader=null;  String line=null;  try {    reader=new BufferedReader(new InputStreamReader(in));    while ((line=reader.readLine()) != null) {      sb.append(line).append('\n');    }  } catch (  Exception e) {    throw new UtilException(ErrorCodeDef.READ_PARAM_ERROR_10027,e);  } finally {    IOUtils.closeQuietly(reader);  }  return sb.toString();}  }
class C{  public void addPage(@NotNull WizardPage<T> page){  page.setUpdateDelegate(delegate);  page.setContext(context);  page.init(dataObject);  wizardPages.add(page);}  }
class C{  public static void putRoutingRules(JsonObject routing){  System.out.println(routing.toString());  given().body(routing.toString()).put("http://localhost:" + AbstractTest.MAIN_PORT + AbstractTest.SERVER_ROOT+ "/admin/v1/routing/rules").then().assertThat().statusCode(200);  waitSomeTime(3);}  }
class C{  void asSet(){  return Collections.emptySet();}  }
class C{  private void buildOperationTitle(PathOperation operation,MarkupDocBuilder docBuilder){  buildOperationTitle(operation.getTitle(),operation.getId(),docBuilder);  if (operation.getTitle().equals(operation.getOperation().getSummary())) {    docBuilder.block(operation.getMethod() + " " + operation.getPath(),MarkupBlockStyle.LITERAL);  }}  }
class C{  private static List<Territory> allOurTerritories(final GameData data,final PlayerID player){  final Collection<Territory> ours=data.getMap().getTerritoriesOwnedBy(player);  final List<Territory> ours2=new ArrayList<>();  ours2.addAll(ours);  return ours2;}  }
class C{  Iter(){  for (; ; ) {    next=findFirst();    if (next == null)     break;    Object x=next.value;    if (x != null && x != next) {      nextValue=(V)x;      break;    }  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeentitynodetype.class,args);}  }
class C{  private void clearSubTreeLocked(long rootNodeId){  AccessibilityNodeInfo current=mCacheImpl.get(rootNodeId);  if (current == null) {    return;  }  mCacheImpl.remove(rootNodeId);  SparseLongArray childNodeIds=current.getChildNodeIds();  final int childCount=childNodeIds.size();  for (int i=0; i < childCount; i++) {    final long childNodeId=childNodeIds.valueAt(i);    clearSubTreeLocked(childNodeId);  }}  }
class C{  public final void test_ROUNDTRIP_GetKeySpecKey01(){  boolean performed=false;  for (int i=0; i < algName.length; i++) {    try {      TestDataGenerator g=new TestDataGenerator(algName[i][0],algName[i][1],privateKeyInfo,null);      EncryptedPrivateKeyInfo epki;      if (g.ap() == null) {        epki=new EncryptedPrivateKeyInfo(algName[i][0],g.ct());      } else {        epki=new EncryptedPrivateKeyInfo(g.ap(),g.ct());      }      try {        PKCS8EncodedKeySpec eks=epki.getKeySpec(g.pubK() == null ? g.k() : g.pubK());        if (!Arrays.equals(privateKeyInfo,eks.getEncoded())) {          fail(algName[i][0] + " != " + algName[i][1]);        }      } catch (      InvalidKeyException e) {        fail(algName[i][0] + ", " + algName[i][1]+ ": "+ e);      }      performed=true;    } catch (    TestDataGenerator.AllowedFailure allowedFailure) {    }catch (    NoSuchAlgorithmException allowedFailure) {    }  }  assertTrue("Test not performed",performed);}  }
class C{  private static String readMifareClassic1KBlock(MfReaderWriter reader,MfAccess access) throws CardException {  String data=null;  try {    MfBlock block=reader.readBlock(access)[0];    data=bytesToHexString(block.getData());  } catch (  IOException ioe) {    if (ioe.getCause() instanceof CardException) {      throw (CardException)ioe.getCause();    }  }  return data;}  }
class C{  @Override public String toString(){  StringBuilder builder=new StringBuilder();  for (int i=0; i < parts.size(); i++) {    builder.append(parts.get(i).toString() + "\n");  }  return builder.toString();}  }
class C{  public void oneCycle(){  for (  final IConnectionWithReconnect connection : connections.keySet()) {    if (connection.getConnectionStatus().equals(ConnectionStatus.CONNECTING)) {      continue;    }    final ReconnectionSettings reconnectionSettings=connection.getReconnectionSettings();    if (connection.getLastConnectionAttemptTimestamp() + reconnectionSettings.getRetryInterval() > TimeUtils.getMonotonicTime()) {      continue;    }    if (connection.getConnectionStatus().equals(ConnectionStatus.DISCONNECTED) || connection.getConnectionStatus().equals(ConnectionStatus.NOT_CONNECTED)) {      logger.info("Starting connection {}",connection.getName());      new Thread(connections.get(connection)).start();    }  }}  }
class C{  public String write(Float value){  return value.toString();}  }
class C{  public void copyLocalToHdfs(final Path localInputPath,final Path hdfsOutputPath) throws IOException {  copyLocalToHdfs(localInputPath,hdfsOutputPath,conf);}  }
class C{  @Override public final boolean containsKey(final Object s){  if (this.levelB.containsKey(s))   return true;  return this.levelA.containsKey(s);}  }
class C{  public ReflectionRenderer(float opacity){  this(opacity,0.4f,false);}  }
class C{  protected void doNewState(int oldState,int newState){}  }
class C{  public void testEmptyFull(){  LinkedBlockingQueue q=new LinkedBlockingQueue(2);  assertTrue(q.isEmpty());  assertEquals("should have room for 2",2,q.remainingCapacity());  q.add(one);  assertFalse(q.isEmpty());  q.add(two);  assertFalse(q.isEmpty());  assertEquals(0,q.remainingCapacity());  assertFalse(q.offer(three));}  }
class C{  private static void GetStringUTFRegion(JNIEnvironment env,int strJREF,int start,int len,Address buf){  if (traceJNI)   VM.sysWrite("JNI called: GetStringUTFRegion \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    String str=(String)env.getJNIRef(strJREF);    String region=str.substring(start,start + len);    int utflen=UTF8Convert.utfLength(region) + 1;    JNIGenericHelpers.createUTFForCFromString(region,buf,utflen);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);  }}  }
class C{  protected void checkIgnite() throws IllegalStateException {  if (g == null) {    throw new IllegalStateException("Ignite is in invalid state to perform this operation. " + "It either not started yet or has already being or have stopped " + "[ignite=" + g + ", cfg="+ cfg+ ']');  }}  }
class C{  public static String stringFor(int f){switch (f) {case cudaChannelFormatKindSigned:    return "cudaChannelFormatKindSigned";case cudaChannelFormatKindUnsigned:  return "cudaChannelFormatKindUnsigned";case cudaChannelFormatKindFloat:return "cudaChannelFormatKindFloat";case cudaChannelFormatKindNone:return "cudaChannelFormatKindNone";}return "INVALID cudaChannelFormatKind: " + f;}  }
class C{  @Override public void deliveryComplete(IMqttDeliveryToken messageToken){  service.traceDebug(TAG,"deliveryComplete(" + messageToken + ")");  MqttMessage message=savedSentMessages.remove(messageToken);  if (message != null) {    String topic=savedTopics.remove(messageToken);    String activityToken=savedActivityTokens.remove(messageToken);    String invocationContext=savedInvocationContexts.remove(messageToken);    Bundle resultBundle=messageToBundle(null,topic,message);    if (activityToken != null) {      resultBundle.putString(MqttServiceConstants.CALLBACK_ACTION,MqttServiceConstants.SEND_ACTION);      resultBundle.putString(MqttServiceConstants.CALLBACK_ACTIVITY_TOKEN,activityToken);      resultBundle.putString(MqttServiceConstants.CALLBACK_INVOCATION_CONTEXT,invocationContext);      service.callbackToActivity(clientHandle,Status.OK,resultBundle);    }    resultBundle.putString(MqttServiceConstants.CALLBACK_ACTION,MqttServiceConstants.MESSAGE_DELIVERED_ACTION);    service.callbackToActivity(clientHandle,Status.OK,resultBundle);  }}  }
class C{  public static void releaseLocks(RegionEventImpl regionEvent,Set<InternalDistributedMember> recipients){  DistributedRegion region=(DistributedRegion)regionEvent.getRegion();  ReleaseClearLockMessage.send(recipients,region.getDistributionManager(),region.getFullPath());}  }
class C{  @Override public boolean isSuitableForContainer(Container container,long bw){  long allocatedBw=getAllocatedBwForContainer(container);  boolean result=allocateBwForContainer(container,bw);  deallocateBwForContainer(container);  if (allocatedBw > 0) {    allocateBwForContainer(container,allocatedBw);  }  return result;}  }
class C{  public void suppressTestAll3BytePacket(){  int[] result=new int[100];  byte i, j;  byte buffer[]=new byte[3];  boolean test_retval;  test_retval=MakePacket.setPreambleLength(15);  Assert.assertTrue(test_retval);  for (i=-128; i < 127; i++) {    for (j=-128; j < 127; j++) {      buffer[0]=i;      buffer[1]=j;      buffer[2]=(byte)(buffer[0] ^ buffer[1]);      result=MakePacket.createStream(buffer);      if (result[0] == 0) {        Assert.assertEquals("test all -  invalid lenght",10,result[0]);      }    }  }}  }
class C{  public BugSet query(BugAspects a){  BugSet result=this;  for (  SortableValue sp : a) {    result=result.query(sp);  }  return result;}  }
class C{  @Override public boolean usesLocalFilePerTable(){  debugCodeCall("usesLocalFilePerTable");  return false;}  }
class C{  private ArrayList<CollectionDescriptor> callListCollections(String startName,Integer limit,int offset) throws OracleException {  OracleCallableStatement stmt=null;  ResultSet rows=null;  String sqltext="begin\n" + "  DBMS_SODA_ADMIN.LIST_COLLECTIONS(\n" + "                   P_START_NAME => ?,\n"+ "                   P_RESULTS    => ?);\n"+ "end;";  boolean resultFull=false;  ArrayList<CollectionDescriptor> results=new ArrayList<CollectionDescriptor>();  try {    int rowCount=0;    metrics.startTiming();    stmt=(OracleCallableStatement)conn.prepareCall(sqltext);    if (startName == null)     stmt.setNull(1,Types.VARCHAR); else     stmt.setNString(1,startName);    stmt.registerOutParameter(2,OracleTypes.CURSOR);    stmt.execute();    rows=stmt.getCursor(2);    if (OracleLog.isLoggingEnabled())     log.fine("Loaded collections");    while (rows.next()) {      String uriName=rows.getNString(1);      String jsonDescriptor=rows.getString(2);      String createTime=rows.getString(3);      CollectionDescriptor desc=getDescriptorFromCaches(uriName);      if (desc == null) {        Builder builder=CollectionDescriptor.jsonToBuilder(jsonDescriptor);        desc=builder.buildDescriptor(uriName);        desc=putDescriptorIntoCaches(desc);      }      if ((rowCount >= offset) && (!resultFull))       results.add(desc);      ++rowCount;      if (limit != null && limit > 0) {        if (rowCount >= (offset + limit)) {          if (rowCount > SODAConstants.BATCH_FETCH_SIZE)           break;          resultFull=true;        }      }    }    rows.close();    rows=null;    stmt.close();    stmt=null;    metrics.recordCall();  } catch (  SQLException e) {    if (OracleLog.isLoggingEnabled())     log.severe(e.toString());    throw SODAUtils.makeExceptionWithSQLText(e,sqltext);  } finally {    for (    String message : SODAUtils.closeCursor(stmt,rows)) {      if (OracleLog.isLoggingEnabled())       log.severe(message);    }  }  return (results);}  }
class C{  public void fireDataStatusEEvent(ValueNamePair errorLog){  if (errorLog != null)   m_mTable.fireDataStatusEEvent(errorLog);}  }
class C{  public int nodeNumber(int position,float[] genome){  if (phenotype(position,genome) == GENE_OUTPUT)   return numInputs + numNodes + (position - (numNodes * (maxArity + 1)));  return numInputs + (position / (maxArity + 1));}  }
class C{  public static String toStringExclude(final Object object,final String... excludeFieldNames){  return new ReflectionToStringBuilder(object).setExcludeFieldNames(excludeFieldNames).toString();}  }
class C{  public synchronized Resource delete(String name){  return children.remove(name);}  }
class C{  boolean isSigned(){  return min < 0;}  }
class C{  public CharArrayWriter(int initialSize){  if (initialSize < 0) {    throw new IllegalArgumentException("Negative initial size: " + initialSize);  }  buf=new char[initialSize];}  }
class C{  public void request(int senderWhat,Handler target,int targetWhat){synchronized (this) {    Registration r=null;    if (mReg == null) {      r=new Registration();      r.senderWhat=senderWhat;      r.targets=new Handler[1];      r.targetWhats=new int[1];      r.targets[0]=target;      r.targetWhats[0]=targetWhat;      mReg=r;      r.next=r;      r.prev=r;    } else {      Registration start=mReg;      r=start;      do {        if (r.senderWhat >= senderWhat) {          break;        }        r=r.next;      } while (r != start);      int n;      if (r.senderWhat != senderWhat) {        Registration reg=new Registration();        reg.senderWhat=senderWhat;        reg.targets=new Handler[1];        reg.targetWhats=new int[1];        reg.next=r;        reg.prev=r.prev;        r.prev.next=reg;        r.prev=reg;        if (r == mReg && r.senderWhat > reg.senderWhat) {          mReg=reg;        }        r=reg;        n=0;      } else {        n=r.targets.length;        Handler[] oldTargets=r.targets;        int[] oldWhats=r.targetWhats;        for (int i=0; i < n; i++) {          if (oldTargets[i] == target && oldWhats[i] == targetWhat) {            return;          }        }        r.targets=new Handler[n + 1];        System.arraycopy(oldTargets,0,r.targets,0,n);        r.targetWhats=new int[n + 1];        System.arraycopy(oldWhats,0,r.targetWhats,0,n);      }      r.targets[n]=target;      r.targetWhats[n]=targetWhat;    }  }}  }
class C{  @Override public Assignments<E> split(AbstractMTree<O,N,E,?> tree,N node){  double miSumCR=Double.POSITIVE_INFINITY;  double[] distanceMatrix=computeDistanceMatrix(tree,node);  boolean leaf=node.isLeaf();  Assignments<E> bestAssignment=null;  for (int i=0; i < node.getNumEntries(); i++) {    for (int j=i + 1; j < node.getNumEntries(); j++) {      Assignments<E> currentAssignments=balancedPartition(tree,node,i,j,distanceMatrix);      double sumCR=currentAssignments.computeFirstCover(leaf) + currentAssignments.computeSecondCover(leaf);      if (sumCR < miSumCR) {        miSumCR=sumCR;        bestAssignment=currentAssignments;      }    }  }  return bestAssignment;}  }
class C{  private static String XMLNormalize(String sStr){  StringBuffer sStr2=new StringBuffer();  for (int iStr=0; iStr < sStr.length(); iStr++) {    char c=sStr.charAt(iStr);switch (c) {case '&':      sStr2.append("&amp;");    break;case '\'':  sStr2.append("&apos;");break;case '\"':sStr2.append("&quot;");break;case '<':sStr2.append("&lt;");break;case '>':sStr2.append("&gt;");break;default :sStr2.append(c);}}return sStr2.toString();}  }
class C{  public void writeVoxelState(final int stateID,final BitStream stream){  final int index=getIndex(stateID);switch (bitsPerInt) {default :    throw new RuntimeException("bitsPerInt is not valid, " + bitsPerInt);case 16:  stream.add((index & 0x8000) != 0);case 15:stream.add((index & 0x4000) != 0);case 14:stream.add((index & 0x2000) != 0);case 13:stream.add((index & 0x1000) != 0);case 12:stream.add((index & 0x800) != 0);case 11:stream.add((index & 0x400) != 0);case 10:stream.add((index & 0x200) != 0);case 9:stream.add((index & 0x100) != 0);case 8:stream.add((index & 0x80) != 0);case 7:stream.add((index & 0x40) != 0);case 6:stream.add((index & 0x20) != 0);case 5:stream.add((index & 0x10) != 0);case 4:stream.add((index & 0x8) != 0);case 3:stream.add((index & 0x4) != 0);case 2:stream.add((index & 0x2) != 0);case 1:stream.add((index & 0x1) != 0);}}  }
class C{  @Override default Eval<Long> sumLong(final ToLongFunction<? super T> fn){  return Eval.later(null);}  }
class C{  protected boolean isReady(int ticks,int strength){  return true;}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.DEFAULT_IMPORT_SPECIFIER;}  }
class C{  public Matrix3 multiplyByTranslation(double x,double y){  this.multiplyByMatrix(1,0,x,0,1,y,0,0,1);  return this;}  }
class C{  protected void addToPopulation(Solution newSolution){  List<Integer> dominates=new ArrayList<Integer>();  boolean dominated=false;  for (int i=0; i < population.size(); i++) {    int flag=dominanceComparator.compare(newSolution,population.get(i));    if (flag < 0) {      dominates.add(i);    } else     if (flag > 0) {      dominated=true;    }  }  if (!dominates.isEmpty()) {    population.remove(dominates.get(PRNG.nextInt(dominates.size())));    population.add(newSolution);  } else   if (!dominated) {    population.remove(PRNG.nextInt(population.size()));    population.add(newSolution);  }}  }
class C{  public void remove(final int[] indices){  checkWidget();  for (  final int index : indices) {    if (index < 0 || index >= items.size()) {      SWT.error(SWT.ERROR_INVALID_ARGUMENT);    }    items.remove(index);  }  redrawTables();}  }
class C{  @Override protected void autoAdjustRange(){  Plot plot=getPlot();  if (plot == null) {    return;  }  if (plot instanceof ValueAxisPlot) {    ValueAxisPlot vap=(ValueAxisPlot)plot;    Range r=vap.getDataRange(this);    if (r == null) {      r=getDefaultAutoRange();    }    double upper=r.getUpperBound();    double lower=Math.max(r.getLowerBound(),this.smallestValue);    double range=upper - lower;    double fixedAutoRange=getFixedAutoRange();    if (fixedAutoRange > 0.0) {      lower=Math.max(upper - fixedAutoRange,this.smallestValue);    } else {      double minRange=getAutoRangeMinimumSize();      if (range < minRange) {        double expand=(minRange - range) / 2;        upper=upper + expand;        lower=lower - expand;      }      double logUpper=calculateLog(upper);      double logLower=calculateLog(lower);      double logRange=logUpper - logLower;      logUpper=logUpper + getUpperMargin() * logRange;      logLower=logLower - getLowerMargin() * logRange;      upper=calculateValueNoINF(logUpper);      lower=calculateValueNoINF(logLower);    }    setRange(new Range(lower,upper),false,false);  }}  }
class C{  public Enumeration<Object> ignored(){  return m_Ignored.keys();}  }
class C{  public void runUpdateNow(){synchronized (this) {    if (done || screenUpdater == null || d3dwSurfaces == null || d3dwSurfaces.size() == 0) {      return;    }  }synchronized (runLock) {    needsUpdateNow=true;    runLock.notifyAll();    while (needsUpdateNow) {      try {        runLock.wait();      } catch (      InterruptedException e) {      }    }  }}  }
class C{  @Override public void sendUrgentData(int data) throws IOException {  throw new SocketException("Method sendUrgentData() is not supported.");}  }
class C{  public TableResult(int maxrows){  this.maxrows=maxrows;  clear();}  }
class C{  public String toString(){  return getValue() + " - " + getName();}  }
class C{  public static void write(char[] data,Writer output) throws IOException {  if (data != null) {    output.write(data);  }}  }
class C{  public Network doUpdateEndpoints(URI id,NetworkEndpointParam param){  _log.info("doUpdateEndpoints START...");  ArgValidator.checkUri(id);  Network network=_dbClient.queryObject(Network.class,id);  ArgValidator.checkEntity(network,id,isIdEmbeddedInURL(id));  NetworkEndpointParam.EndpointOp op=NetworkEndpointParam.EndpointOp.valueOf(param.getOp());  List<String> updatedEndoints=null;  if (op.equals(NetworkEndpointParam.EndpointOp.add)) {    _log.info("doUpdateEndpoints: adding endpoints {} to network {}",param.getEndpoints(),network);    updatedEndoints=checkAndFilterAddEndpoints(network,param.getEndpoints());    network.addEndpoints(updatedEndoints,false);  } else {    _log.info("doUpdateEndpoints: removing endpoints {} from network {}",param.getEndpoints(),network);    updatedEndoints=checkAndFilterRemoveEndPoints(network,param.getEndpoints());    network.removeEndpoints(updatedEndoints);  }  _dbClient.updateAndReindexObject(network);  _log.info("doUpdateEndpoints: update the port and pools associations following {} endpoints operation",op.name());  updateEndpointsAssociation(network,updatedEndoints,op);  return network;}  }
class C{  public void paintSplitPaneDividerForeground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){}  }
class C{  public Boolean isDestroyWithParent(){  return destroyWithParent;}  }
class C{  public Open(String itemType,int playlistId,int position){  super();  final ObjectNode item=objectMapper.createObjectNode();  item.put("playlistid",playlistId);  item.put("position",position);  addParameterToRequest("item",item);}  }
class C{  public Dimension maximumLayoutSize(Container target){  Dimension cpd, mbd, tpd;  int cpWidth=Integer.MAX_VALUE;  int cpHeight=Integer.MAX_VALUE;  int mbWidth=Integer.MAX_VALUE;  int mbHeight=Integer.MAX_VALUE;  int tpWidth=Integer.MAX_VALUE;  int tpHeight=Integer.MAX_VALUE;  Insets i=target.getInsets();  JRootPane root=(JRootPane)target;  if (root.getContentPane() != null) {    cpd=root.getContentPane().getMaximumSize();    if (cpd != null) {      cpWidth=cpd.width;      cpHeight=cpd.height;    }  }  if (root.getMenuBar() != null) {    mbd=root.getMenuBar().getMaximumSize();    if (mbd != null) {      mbWidth=mbd.width;      mbHeight=mbd.height;    }  }  if (root.getWindowDecorationStyle() != JRootPane.NONE && (root.getUI() instanceof BERootPaneUI)) {    JComponent titlePane=((BERootPaneUI)root.getUI()).getTitlePane();    if (titlePane != null) {      tpd=titlePane.getMaximumSize();      if (tpd != null) {        tpWidth=tpd.width;        tpHeight=tpd.height;      }    }  }  int maxHeight=Math.max(Math.max(cpHeight,mbHeight),tpHeight);  if (maxHeight != Integer.MAX_VALUE) {    maxHeight=cpHeight + mbHeight + tpHeight+ i.top+ i.bottom;  }  int maxWidth=Math.max(Math.max(cpWidth,mbWidth),tpWidth);  if (maxWidth != Integer.MAX_VALUE) {    maxWidth+=i.left + i.right;  }  return new Dimension(maxWidth,maxHeight);}  }
class C{  public static boolean isVolumeBuiltOnBlockSnapshot(DbClient dbClient,Volume vplexVolume){  boolean isBuiltOnSnapshot=false;  Volume srcSideBackendVolume=getVPLEXBackendVolume(vplexVolume,true,dbClient,false);  if (srcSideBackendVolume != null) {    String nativeGuid=srcSideBackendVolume.getNativeGuid();    List<BlockSnapshot> snapshots=CustomQueryUtility.getActiveBlockSnapshotByNativeGuid(dbClient,nativeGuid);    if (!snapshots.isEmpty()) {      isBuiltOnSnapshot=true;    }  }  return isBuiltOnSnapshot;}  }
class C{  static public void assertEquals(String message,short expected,short actual){  assertEquals(message,Short.valueOf(expected),Short.valueOf(actual));}  }
class C{  public Select<T> where(DataFilterClause filterClause,DataFilterClause.DataFilterConjunction conjunction){  this.mFilterCriteria.addClause(filterClause,conjunction);  return this;}  }
class C{  public void curveTo(float x1,float y1,float x2,float y2,float x3,float y3){  checkBuf(6,true);  types[typeSize++]=PathIterator.SEG_CUBICTO;  points[pointSize++]=x1;  points[pointSize++]=y1;  points[pointSize++]=x2;  points[pointSize++]=y2;  points[pointSize++]=x3;  points[pointSize++]=y3;  dirty=true;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  java.io.File dFile=getFile(stack);  if (Sage.DBG)   System.out.println("Cancelling current file download operation for:" + dFile);  FileDownloader downer=FileDownloader.getFileDownloader(dFile);  if (downer != null)   downer.cancel();  return null;}  }
class C{  private Statement testBug71396StatementInit(Connection testConn,int maxRows) throws SQLException {  ResultSet testRS;  Statement testStmt=testConn.createStatement();  testStmt.setMaxRows(maxRows);  testRS=testStmt.executeQuery("SELECT @@SESSION.SQL_SELECT_LIMIT");  testRS.next();  assertEquals("Wrong @@SESSION.SQL_SELECT_LIMIT",maxRows,testRS.getInt(1));  return testStmt;}  }
class C{  public InMemoryAppender(){}  }
class C{  public void testBuildTextFromElementWithTargettedAttributeNotSet(){  LOGGER.debug("buildTextFromElementWithTargettedAttributeNotSet");  Element element=new Element(Tag.valueOf("div"),"");  element.attr(AttributeStore.ALT_ATTR,"test");  TextAttributeOfElementBuilder instance=new TextAttributeOfElementBuilder();  String result=instance.buildTextFromElement(element);  assertNull(result);}  }
class C{  @Override public void repaint(Rectangle r){}  }
class C{  public int supportedSpeedModes(){  return (DccThrottle.SpeedStepMode128 | DccThrottle.SpeedStepMode28 | DccThrottle.SpeedStepMode28Mot| DccThrottle.SpeedStepMode14);}  }
class C{  public Accumulator(){  data=new HashMap<String,List<Serializable>>();}  }
class C{  public FastStringBuffer append(String string){  int strLen=string.length();  int newCount=count + strLen;  if (newCount > this.value.length) {    resizeForMinimum(newCount);  }  string.getChars(0,strLen,value,this.count);  this.count=newCount;  return this;}  }
class C{  private static boolean sourceEquals(SemanticNode node,SymbolNode symbol){  if (node == symbol) {    return true;  }  if (((node instanceof OpDefNode) && ((OpDefNode)node).getSource() == symbol)) {    return true;  }  if ((node instanceof ThmOrAssumpDefNode) && ((ThmOrAssumpDefNode)node).getSource() == symbol) {    return true;  }  return false;}  }
class C{  @Override public void autoSetInternal(){  initializeInternal(IArmorState.ARMOR_NA,LOC_SQUAD);  for (int loop=1; loop < locations(); loop++) {    initializeInternal(1,loop);  }  troopersShooting=locations() - 1;}  }
class C{  public static void ensureVirtualized(@SuppressWarnings("unused") Object object){}  }
class C{  private String toJson(Object obj){  try {    return sGson.toJson(obj);  } catch (  Exception e) {    if (mCallback != null) {      mCallback.onException(e);    }    return null;  }}  }
class C{  public boolean isSelfService(){  Object oo=get_Value(COLUMNNAME_IsSelfService);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean isEnabled(){  return enabled;}  }
class C{  public boolean undo(IGameState gameState){  boolean rc=super.undo(gameState);  TicTacToeState state=(TicTacToeState)gameState;  NeighborState neighbor=(NeighborState)state.storedData();  neighbor.undoLast(player);  return rc;}  }
class C{  public boolean isValid(){  return valid;}  }
class C{  public Long deleteOrganisation(String SID,long organisation_id){  Long users_id=sessionManagement.checkSession(SID);  long user_level=userManagement.getUserLevelByID(users_id);  return organisationmanagement.deleteOrganisation(user_level,organisation_id,users_id);}  }
class C{  public boolean hasRelationship(Primitive type){  return hasRelationship(this.network.createVertex(type));}  }
class C{  byte readByte() throws IOException {  mDexFile.readFully(tmpBuf,0,1);  return tmpBuf[0];}  }
class C{  public Boolean shouldAllowNavigation(String url){  return null;}  }
class C{  public void prepareTestInstance(TestContext testContext) throws Exception {}  }
class C{  protected void toStringInfo(int tab,StringBuffer buffer,Object info,boolean showResolvedInfo){  if (!isPrimary()) {    buffer.append(tabString(tab));    buffer.append("[Working copy] ");    toStringName(buffer);  } else {    if (isWorkingCopy()) {      buffer.append(tabString(tab));      buffer.append("[Working copy] ");      toStringName(buffer);      if (info == null) {        buffer.append(" (not open)");      }    } else {      super.toStringInfo(tab,buffer,info,showResolvedInfo);    }  }}  }
class C{  public void testSet_authorizer() throws Exception {  TableResult resPriv=null;  TableResult resPub=null;  TableResult emptyTable=new TableResult();  String insertPublic="insert into public_table values(1,2)";  String insertPrivate="insert into private_table values(1,2)";  db.exec("create table public_table(c1 integer, c2 integer);",null);  db.exec("create table private_table(c1 integer, c2 integer);",null);  db.exec(insertPublic,null);  db.exec(insertPrivate,null);  resPriv=db.get_table("select * from private_table");  resPub=db.get_table("select * from public_table");  AuthorizerCallback cb=new AuthorizerCallback();  db.set_authorizer(cb);  db.exec("select * from private_table",cb);  assertTrue(cb.wasCalled());  try {    db.exec(insertPublic,null);    fail("authorization failed");  } catch (  Exception e) {  }  try {    db.exec(insertPrivate,null);    fail("authorization failed");  } catch (  Exception e1) {  }}  }
class C{  private boolean checkIndependence(LevelRenderer r1,LevelRenderer r2){  boolean b0=r1.equals(r2);  r1.setItemMargin(0.0);  boolean b1=!r1.equals(r2);  r2.setItemMargin(0.0);  boolean b2=r1.equals(r2);  return b0 && b1 && b2;}  }
class C{  public void clear(){  elements.clear();  length=0;}  }
class C{  public Block(boolean multiPush){  this(multiPush,"block",null,Arrays.asList("scrape-1","scrape-2"));}  }
class C{  public void write(final String filename){  try (PrintStream stream=new PrintStream(new File(filename))){    write(stream);  } catch (  FileNotFoundException e) {    e.printStackTrace();  }}  }
class C{  static <K extends Comparable<K>,V>SmallSortedMap<K,V> newInstanceForTest(int arraySize){  return new SmallSortedMap<K,V>(arraySize);}  }
class C{  public APPlatformException(List<LocalizedText> messages){  super(getDefaultOrFirst(messages));  this.messages=messages;}  }
class C{  public int scaleY(int x,int y){  return Math.round((float)(x * scale01 + y * yscale));}  }
class C{  public PipelineCpeBuilder(String pipelineName,String yamlString) throws BaleenException {  super(pipelineName,yamlString);}  }
class C{  public void addModel(ModelRenderer model,float x,float y,float z,boolean inherit,boolean isUpright){  if (inherit) {    x+=neutralAngles.angleX + (isUpright ? (float)Math.PI / 2 : 0);    y+=neutralAngles.angleY;    z+=neutralAngles.angleZ;  }  models.add(model);  modelBaseRot.put(model,new Angle3D(x,y,z));}  }
class C{  @Deprecated public Elide(AuditLogger auditLogger,DataStore dataStore,EntityDictionary dictionary,JsonApiMapper mapper){  this(auditLogger,dataStore,dictionary,mapper,null,Collections.singletonList(new DefaultFilterDialect(dictionary)),Collections.singletonList(new DefaultFilterDialect(dictionary)),false);}  }
class C{  protected void sendTestMessage(EasyDccMessage m){  if (log.isDebugEnabled()) {    log.debug("sendTestMessage    [" + m + "]");  }  notifyMessage(m,null);  return;}  }
class C{  private Network findNetworkForDiscoveredEndPoint(Collection<Network> networks,String endpoint,Network excludeNetwork){  for (  Network network : networks) {    if (excludeNetwork == null || !network.getId().equals(excludeNetwork.getId())) {      if (network.endpointIsDiscovered(endpoint)) {        return network;      }    }  }  return null;}  }
class C{  @Nullable public MethodNode deepResolveMethod(@NotNull MethodInfo mth){  ClassNode cls=resolveClass(mth.getDeclClass());  if (cls == null) {    return null;  }  return deepResolveMethod(cls,mth.makeSignature(false));}  }
class C{  public void copyAsRtf(){  int selStart=getSelectionStart();  int selEnd=getSelectionEnd();  if (selStart == selEnd) {    return;  }  SecurityManager sm=System.getSecurityManager();  if (sm != null) {    try {      sm.checkSystemClipboardAccess();    } catch (    SecurityException se) {      UIManager.getLookAndFeel().provideErrorFeedback(null);      return;    }  }  Clipboard cb=Toolkit.getDefaultToolkit().getSystemClipboard();  RtfGenerator gen=getRTFGenerator();  Token tokenList=getTokenListFor(selStart,selEnd);  for (Token t=tokenList; t != null; t=t.getNextToken()) {    if (t.isPaintable()) {      if (t.textCount == 1 && t.text[t.textOffset] == '\n') {        gen.appendNewline();      } else {        Font font=getFontForTokenType(t.type);        Color bg=getBackgroundForTokenType(t.type);        boolean underline=getUnderlineForToken(t);        if (t.isWhitespace()) {          gen.appendToDocNoFG(t.getLexeme(),font,bg,underline);        } else {          Color fg=getForegroundForToken(t);          gen.appendToDoc(t.getLexeme(),font,fg,bg,underline);        }      }    }  }  RtfTransferable contents=new RtfTransferable(gen.getRtf().getBytes());  try {    cb.setContents(contents,null);  } catch (  IllegalStateException ise) {    UIManager.getLookAndFeel().provideErrorFeedback(null);    return;  }}  }
class C{  public JavaCompiler processAnnotations(List<JCCompilationUnit> roots,List<String> classnames){  if (shouldStop(CompileState.PROCESS)) {    if (unrecoverableError()) {      deferredDiagnosticHandler.reportDeferredDiagnostics();      log.popDiagnosticHandler(deferredDiagnosticHandler);      return this;    }  }  if (!processAnnotations) {    if (options.isSet(PROC,"only")) {      log.warning("proc.proc-only.requested.no.procs");      todo.clear();    }    if (!classnames.isEmpty()) {      log.error("proc.no.explicit.annotation.processing.requested",classnames);    }    Assert.checkNull(deferredDiagnosticHandler);    return this;  }  Assert.checkNonNull(deferredDiagnosticHandler);  try {    List<ClassSymbol> classSymbols=List.nil();    List<PackageSymbol> pckSymbols=List.nil();    if (!classnames.isEmpty()) {      if (!explicitAnnotationProcessingRequested()) {        log.error("proc.no.explicit.annotation.processing.requested",classnames);        deferredDiagnosticHandler.reportDeferredDiagnostics();        log.popDiagnosticHandler(deferredDiagnosticHandler);        return this;      } else {        boolean errors=false;        for (        String nameStr : classnames) {          Symbol sym=resolveBinaryNameOrIdent(nameStr);          if (sym == null || (sym.kind == Kinds.PCK && !processPcks) || sym.kind == Kinds.ABSENT_TYP) {            log.error("proc.cant.find.class",nameStr);            errors=true;            continue;          }          try {            if (sym.kind == Kinds.PCK)             sym.complete();            if (sym.exists()) {              if (sym.kind == Kinds.PCK)               pckSymbols=pckSymbols.prepend((PackageSymbol)sym); else               classSymbols=classSymbols.prepend((ClassSymbol)sym);              continue;            }            Assert.check(sym.kind == Kinds.PCK);            log.warning("proc.package.does.not.exist",nameStr);            pckSymbols=pckSymbols.prepend((PackageSymbol)sym);          } catch (          CompletionFailure e) {            log.error("proc.cant.find.class",nameStr);            errors=true;            continue;          }        }        if (errors) {          deferredDiagnosticHandler.reportDeferredDiagnostics();          log.popDiagnosticHandler(deferredDiagnosticHandler);          return this;        }      }    }    try {      JavaCompiler c=procEnvImpl.doProcessing(context,roots,classSymbols,pckSymbols,deferredDiagnosticHandler);      if (c != this)       annotationProcessingOccurred=c.annotationProcessingOccurred=true;      return c;    }  finally {      procEnvImpl.close();    }  } catch (  CompletionFailure ex) {    log.error("cant.access",ex.sym,ex.getDetailValue());    deferredDiagnosticHandler.reportDeferredDiagnostics();    log.popDiagnosticHandler(deferredDiagnosticHandler);    return this;  }}  }
class C{  public Wildcards inverted(){  return Wildcards.of(flags ^ OFMatch.OFPFW_ALL_SANITIZED);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:26.800 -0500",hash_original_method="E595C77056089A502D8DE33B445FC550",hash_generated_method="529A9908C01F268B9A9646FFCB7DFD78") public TwoKeyHashMap(int initialCapacity){  this(initialCapacity,DEFAULT_LOAD_FACTOR);}  }
class C{  @Override public String toResultString(){  StringBuffer result=new StringBuffer();  result.append("Normalize " + attributeMeanVarianceMap.size() + " attributes to mean 0 and variance 1."+ Tools.getLineSeparator()+ "Using");  int counter=0;  for (  String name : attributeMeanVarianceMap.keySet()) {    if (counter > 4) {      result.append(Tools.getLineSeparator() + "... " + (attributeMeanVarianceMap.size() - 5)+ " more attributes ...");      break;    }    Tupel<Double,Double> meanVariance=attributeMeanVarianceMap.get(name);    result.append(Tools.getLineSeparator() + name + " --> mean: "+ meanVariance.getFirst().doubleValue()+ ", variance: "+ meanVariance.getSecond().doubleValue());    counter++;  }  return result.toString();}  }
class C{  public ImageResizer(Context context,int imageSize){  super(context);  setImageSize(imageSize);}  }
class C{  public SimpleBrand(String brand,String brandOwner){  this.brand=brand;  this.brandOwner=brandOwner;  brandLower=brand.toLowerCase();  brandAlphaNumeric=brandLower.replaceAll("[^A-Za-z0-9 ]","");}  }
class C{  private void createNewProfile(Container container) throws Exception {  File portsFile=File.createTempFile("cargo-websphere-portdef-",".properties");  getResourceUtils().copyResource(RESOURCE_PATH + container.getId() + "/portdef.props",portsFile,createFilterChain(),"ISO-8859-1");  try {    getLogger().info("Creating new profile.",this.getClass().getName());    wsContainer.runManageProfileCommand("-create","-profileName",getPropertyValue(WebSpherePropertySet.PROFILE),"-profilePath",getHome(),"-nodeName",getPropertyValue(WebSpherePropertySet.NODE),"-cellName",getPropertyValue(WebSpherePropertySet.CELL),"-serverName",getPropertyValue(WebSpherePropertySet.SERVER),"-portsFile",portsFile.getAbsolutePath(),"-winserviceCheck","false","-enableService","false","-enableAdminSecurity","true","-adminUserName",getPropertyValue(WebSpherePropertySet.ADMIN_USERNAME),"-adminPassword",getPropertyValue(WebSpherePropertySet.ADMIN_PASSWORD));  }  finally {    portsFile.delete();  }}  }
class C{  public void onAnimationCancel(Animator animation){}  }
class C{  static Object removeAll(final Object array,final BitSet indices){  final int srcLength=ArrayUtils.getLength(array);  final int removals=indices.cardinality();  final Object result=Array.newInstance(array.getClass().getComponentType(),srcLength - removals);  int srcIndex=0;  int destIndex=0;  int count;  int set;  while ((set=indices.nextSetBit(srcIndex)) != -1) {    count=set - srcIndex;    if (count > 0) {      System.arraycopy(array,srcIndex,result,destIndex,count);      destIndex+=count;    }    srcIndex=indices.nextClearBit(set);  }  count=srcLength - srcIndex;  if (count > 0) {    System.arraycopy(array,srcIndex,result,destIndex,count);  }  return result;}  }
class C{  public static AffineTransform toObjectBBox(AffineTransform Tx,GraphicsNode node){  AffineTransform Mx=new AffineTransform();  Rectangle2D bounds=node.getGeometryBounds();  if (bounds != null) {    Mx.translate(bounds.getX(),bounds.getY());    Mx.scale(bounds.getWidth(),bounds.getHeight());  }  Mx.concatenate(Tx);  return Mx;}  }
class C{  private void writeWaypoints(Track track) throws InterruptedException {  boolean hasWaypoints=false;  Cursor cursor=null;  try {    cursor=myTracksProviderUtils.getWaypointCursor(track.getId(),-1L,Constants.MAX_LOADED_WAYPOINTS_POINTS);    if (cursor != null && cursor.moveToFirst()) {      while (cursor.moveToNext()) {        if (Thread.interrupted()) {          throw new InterruptedException();        }        if (!hasWaypoints) {          trackWriter.writeBeginWaypoints(track);          hasWaypoints=true;        }        Waypoint waypoint=myTracksProviderUtils.createWaypoint(cursor);        trackWriter.writeWaypoint(waypoint);      }    }  }  finally {    if (cursor != null) {      cursor.close();    }  }  if (hasWaypoints) {    trackWriter.writeEndWaypoints();  }}  }
class C{  public static int indexOfIgnoreCase(int startingPosition,String searchIn,String searchFor,String openingMarkers,String closingMarkers,Set<SearchMode> searchMode){  if (searchIn == null || searchFor == null) {    return -1;  }  int searchInLength=searchIn.length();  int searchForLength=searchFor.length();  int stopSearchingAt=searchInLength - searchForLength;  if (startingPosition > stopSearchingAt || searchForLength == 0) {    return -1;  }  if (searchMode.contains(SearchMode.SKIP_BETWEEN_MARKERS) && (openingMarkers == null || closingMarkers == null || openingMarkers.length() != closingMarkers.length())) {    throw new IllegalArgumentException(Messages.getString("StringUtils.15",new String[]{openingMarkers,closingMarkers}));  }  char firstCharOfSearchForUc=Character.toUpperCase(searchFor.charAt(0));  char firstCharOfSearchForLc=Character.toLowerCase(searchFor.charAt(0));  if (Character.isWhitespace(firstCharOfSearchForLc) && searchMode.contains(SearchMode.SKIP_WHITE_SPACE)) {    searchMode=EnumSet.copyOf(searchMode);    searchMode.remove(SearchMode.SKIP_WHITE_SPACE);  }  for (int i=startingPosition; i <= stopSearchingAt; i++) {    i=indexOfNextChar(i,stopSearchingAt,searchIn,openingMarkers,closingMarkers,searchMode);    if (i == -1) {      return -1;    }    char c=searchIn.charAt(i);    if (isCharEqualIgnoreCase(c,firstCharOfSearchForUc,firstCharOfSearchForLc) && startsWithIgnoreCase(searchIn,i,searchFor)) {      return i;    }  }  return -1;}  }
class C{  public ActorApi(Endpoints endpoints,AuthKeyStorage keyStorage,ActorApiCallback callback,boolean isEnableLog,int minDelay,int maxDelay,int maxFailureCount){  this.endpoints=endpoints;  this.defaultEndpoints=endpoints;  this.keyStorage=keyStorage;  this.callback=callback;  this.isEnableLog=isEnableLog;  this.minDelay=minDelay;  this.maxDelay=maxDelay;  this.maxFailureCount=maxFailureCount;  this.apiBrokerInt=ApiBroker.get(endpoints,keyStorage,callback,isEnableLog,NEXT_ID.get(),minDelay,maxDelay,maxFailureCount);  this.apiBroker=apiBrokerInt.getDest();}  }
class C{  private void applyTns(float coef[],TemporalNoiseShaping tns,IndividualChannelStream ics,boolean decode){  final int mmm=Math.min(ics.tnsMaxBands,ics.maxSfb);  final float lpc[]=new float[TNS_MAX_ORDER];  final float tmp[]=new float[TNS_MAX_ORDER + 1];  for (int w=0; w < ics.numWindows; w++) {    int bottom=ics.numSwb;    for (int filt=0; filt < tns.nFilt[w]; filt++) {      int top=bottom;      bottom=Math.max(0,top - tns.length[w][filt]);      int order=tns.order[w][filt];      if (order == 0) {        continue;      }      computeLpcCoefs(tns.coef[w][filt],order,lpc,0,false,false);      int start=ics.swbOffset[Math.min(bottom,mmm)];      int end=ics.swbOffset[Math.min(top,mmm)];      int size=end - start;      if (size <= 0) {        continue;      }      int inc;      if (tns.direction[w][filt]) {        inc=-1;        start=end - 1;      } else {        inc=1;      }      start+=w * 128;      if (decode) {        for (int m=0; m < size; m++, start+=inc) {          for (int i=1; i <= Math.min(m,order); i++) {            coef[start]-=coef[start - i * inc] * lpc[i - 1];          }        }      } else {        for (int m=0; m < size; m++, start+=inc) {          tmp[0]=coef[start];          for (int i=1; i <= Math.min(m,order); i++) {            coef[start]+=tmp[i] * lpc[i - 1];          }          for (int i=order; i > 0; i--) {            tmp[i]=tmp[i - 1];          }        }      }    }  }}  }
class C{  private void addOptionList(final List<String> args,final String optName,final List<String> values){  for (  final String value : values) {    if (value != null && !value.isEmpty()) {      args.add(optName);      args.add(value);    }  }}  }
class C{  public static byte[] calculateMd5(InputStream is) throws IOException {  byte[] md5=null;  try {    md5=DigestUtils.md5(is);  } catch (  IOException e) {    throw new IOException(e);  }  return md5;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:24.487 -0500",hash_original_method="3A1F0F9E8BFDA328E094E225E007A649",hash_generated_method="923B5C514DB34D9D00FBD8F82A5ADA7A") public boolean isAckSent(long cseqNo){  if (this.getLastTransaction() == null)   return true;  if (this.getLastTransaction() instanceof ClientTransaction) {    if (this.getLastAckSent() == null) {      return false;    } else {      return cseqNo <= ((SIPRequest)this.getLastAckSent()).getCSeq().getSeqNumber();    }  } else {    return true;  }}  }
class C{  public static String convertTimestampToDateString(boolean useUTC,long milli){  Date date=new Date(milli);  SimpleDateFormat sourceFormat=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");  sourceFormat.setTimeZone(useUTC ? TimeZone.getTimeZone("UTC") : TimeZone.getDefault());  return sourceFormat.format(date);}  }
class C{  private void cleanupDestination(State state,int finalStatus){  closeDestination(state);  if (state.mFilename != null && DownloaderService.isStatusError(finalStatus)) {    new File(state.mFilename).delete();    state.mFilename=null;  }}  }
class C{  MethodType(String typeSig,Type returnType,Type argTypes[]){  super(TC_METHOD,typeSig);  this.returnType=returnType;  this.argTypes=argTypes;}  }
class C{  public static Uri addMessageToInbox(Context context,String address,String body,long time){  ContentResolver contentResolver=context.getContentResolver();  ContentValues cv=new ContentValues();  cv.put("address",address);  cv.put("body",body);  cv.put("date_sent",time);  return contentResolver.insert(RECEIVED_MESSAGE_CONTENT_PROVIDER,cv);}  }
class C{  private String commandChange(String parameter){  String[] parameters=parameter.split(" ",2);  if (parameters.length == 2) {    String name=parameters[0].trim();    AddressbookEntry current=get(name);    Set<String> categories;    if (current == null) {      categories=new HashSet<>();    } else {      categories=current.getCategories();    }    Set<String> changedCats=changeCategories(categories,parameters[1]);    set(name,changedCats);    String catOutput=categoriesToString(changedCats);    if (current == null) {      return "Added '" + name + "' with categories "+ catOutput+ ".";    } else     if (categories.equals(changedCats)) {      return "Didn't change '" + name + "', categories already "+ catOutput+ ".";    }    return "Changed '" + name + "', categories now "+ catOutput+ ".";  } else {    return "Change: Invalid number of parameters.";  }}  }
class C{  protected PolynomialApproximation knnDistanceApproximation(){  int p_max=0;  double[] b=null;  for (int i=0; i < getNumEntries(); i++) {    MkAppEntry entry=getEntry(i);    PolynomialApproximation approximation=entry.getKnnDistanceApproximation();    if (b == null) {      p_max=approximation.getPolynomialOrder();      b=new double[p_max];    }    for (int p=0; p < p_max; p++) {      b[p]+=approximation.getB(p);    }  }  for (int p=0; p < p_max; p++) {    b[p]/=p_max;  }  if (LoggingConfiguration.DEBUG) {    StringBuilder msg=new StringBuilder();    msg.append("b " + FormatUtil.format(b,FormatUtil.NF4));    Logger.getLogger(this.getClass().getName()).fine(msg.toString());  }  return new PolynomialApproximation(b);}  }
class C{  public ObjectFactory(){}  }
class C{  public Object clone() throws CloneNotSupportedException {  SHA1_MessageDigestImpl cloneObj=(SHA1_MessageDigestImpl)super.clone();  cloneObj.buffer=buffer.clone();  cloneObj.oneByte=oneByte.clone();  return cloneObj;}  }
class C{  private void parseLink(byte[] link) throws ParseException {  try {    if (!isMagicPresent(link))     throw new ParseException("Invalid shortcut; magic is missing",0);    byte flags=link[0x14];    final int fileAttsOffset=0x18;    byte fileAtts=link[fileAttsOffset];    byte isDirMask=(byte)0x10;    isDirectory=(fileAtts & isDirMask) > 0;    final byte hasShellMask=(byte)0x01;    int shellLen=0;    if ((flags & hasShellMask) > 0) {      final int shellOffset=0x4c;      shellLen=bytesToWord(link,shellOffset) + 2;    }    int fileStart=0x4c + shellLen;    final int fileLocationInfoFlagOffsetOffset=0x08;    int fileLocationInfoFlag=link[fileStart + fileLocationInfoFlagOffsetOffset];    isLocal=(fileLocationInfoFlag & 2) == 0;    final int finalnameOffsetOffset=0x18;    int finalnameOffset=link[fileStart + finalnameOffsetOffset] + fileStart;    String finalname=getNullDelimitedString(link,finalnameOffset);    if (isLocal) {      final int basenameOffsetOffset=0x10;      int basenameOffset=link[fileStart + basenameOffsetOffset] + fileStart;      String basename=getNullDelimitedString(link,basenameOffset);      readFile=basename + finalname;    } else {      final int networkVolumeTableOffsetOffset=0x14;      int networkVolumeTableOffset=link[fileStart + networkVolumeTableOffsetOffset] + fileStart;      int shareNameOffsetOffset=0x08;      int shareNameOffset=link[networkVolumeTableOffset + shareNameOffsetOffset] + networkVolumeTableOffset;      String shareName=getNullDelimitedString(link,shareNameOffset);      readFile=shareName + "\\" + finalname;    }  } catch (  ArrayIndexOutOfBoundsException e) {    ParseException exception=new ParseException("Could not be parsed, probably not a valid WindowsShortcut",0);    exception.initCause(e);    throw exception;  }}  }
class C{  @SuppressWarnings("unchecked") protected JsonSerializer<Object> constructBeanSerializer(SerializationConfig config,BasicBeanDescription beanDesc,BeanProperty property) throws JsonMappingException {  if (beanDesc.getBeanClass() == Object.class) {    throw new IllegalArgumentException("Can not create bean serializer for Object.class");  }  BeanSerializerBuilder builder=constructBeanSerializerBuilder(beanDesc);  List<BeanPropertyWriter> props=findBeanProperties(config,beanDesc);  if (props == null) {    props=new ArrayList<BeanPropertyWriter>();  }  if (_factoryConfig.hasSerializerModifiers()) {    for (    BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {      props=mod.changeProperties(config,beanDesc,props);    }  }  props=filterBeanProperties(config,beanDesc,props);  props=sortBeanProperties(config,beanDesc,props);  if (_factoryConfig.hasSerializerModifiers()) {    for (    BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {      props=mod.orderProperties(config,beanDesc,props);    }  }  builder.setProperties(props);  builder.setFilterId(findFilterId(config,beanDesc));  AnnotatedMethod anyGetter=beanDesc.findAnyGetter();  if (anyGetter != null) {    if (config.isEnabled(SerializationConfig.Feature.CAN_OVERRIDE_ACCESS_MODIFIERS)) {      anyGetter.fixAccess();    }    JavaType type=anyGetter.getType(beanDesc.bindingsForBeanType());    boolean staticTyping=config.isEnabled(SerializationConfig.Feature.USE_STATIC_TYPING);    JavaType valueType=type.getContentType();    TypeSerializer typeSer=createTypeSerializer(config,valueType,property);    MapSerializer mapSer=MapSerializer.construct(null,type,staticTyping,typeSer,property,null,null);    builder.setAnyGetter(new AnyGetterWriter(anyGetter,mapSer));  }  processViews(config,builder);  if (_factoryConfig.hasSerializerModifiers()) {    for (    BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {      builder=mod.updateBuilder(config,beanDesc,builder);    }  }  JsonSerializer<Object> ser=(JsonSerializer<Object>)builder.build();  if (ser == null) {    if (beanDesc.hasKnownClassAnnotations()) {      return builder.createDummy();    }  }  return ser;}  }
class C{  public boolean isEnabled(){  checkWidget();  return enabled;}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public DefaultRenderStack(DefaultRenderStack prototype){  stack=new ArrayDeque<>(requireNonNull(prototype).stack);}  }
class C{  private void consistencyCheck(String where) throws SQLException, ConsistencyException {  String schemaName=null;  String tableName=null;  int id=-1;  int rowOffset=ConsistencyTable.ROW_UNSET;  int rowLimit=ConsistencyTable.ROW_UNSET;  String method;  int this_cnt=0, master_cnt;  String this_crc=null, master_crc;  String select=consistencySelect + where;  if (logger.isDebugEnabled())   logger.debug("ConsistencyTable row SELECT: " + select);  ResultSet res=null;  ResultSet ccres=null;  try {    res=statement.executeQuery(select);    if (res.next()) {      schemaName=trim(res.getString(ConsistencyTable.dbColumnName));      tableName=trim(res.getString(ConsistencyTable.tblColumnName));      id=res.getInt(ConsistencyTable.idColumnName);      master_cnt=res.getInt(ConsistencyTable.masterCntColumnName);      master_crc=trim(res.getString(ConsistencyTable.masterCrcColumnName));      rowOffset=res.getInt(ConsistencyTable.offsetColumnName);      rowLimit=res.getInt(ConsistencyTable.limitColumnName);      method=trim(res.getString(ConsistencyTable.methodColumnName));      Table table=conn.findTable(schemaName,tableName,false);      if (table == null)       throw new ConsistencyException("Table not found: " + schemaName + "."+ tableName);      ConsistencyCheck cc=ConsistencyCheckFactory.createConsistencyCheck(id,table,rowOffset,rowLimit,method,runtime.isConsistencyCheckColumnNames(),runtime.isConsistencyCheckColumnTypes());      if (logger.isDebugEnabled())       logger.debug("Got consistency check: " + cc.toString());      ccres=cc.performConsistencyCheck(conn);      if (ccres.next()) {        this_cnt=ccres.getInt(ConsistencyTable.thisCntColumnName);        this_crc=trim(ccres.getString(ConsistencyTable.thisCrcColumnName));        StringBuffer update=new StringBuffer(256);        update.append("UPDATE ");        update.append(consistencyTable);        update.append(" SET ");        update.append(ConsistencyTable.thisCntColumnName);        update.append(" = ");        update.append(this_cnt);        update.append(", ");        update.append(ConsistencyTable.thisCrcColumnName);        update.append(" = '");        update.append(this_crc);        update.append("' ");        update.append(where);        if (logger.isDebugEnabled())         logger.debug(update.toString());        statement.executeUpdate(update.toString());      } else {        String msg="Consistency check returned empty ResultSet.";        logger.warn(msg);      }    } else {      throw new ConsistencyException("Failed to retrieve consistency check result.");    }  }  finally {    if (res != null) {      res.close();    }    if (ccres != null) {      ccres.close();    }  }  if (master_cnt == this_cnt) {    if ((master_crc != null && this_crc != null && 0 == master_crc.compareTo(this_crc)) || (master_crc == null && this_crc == null)) {      String msg="Consistency check succeeded on table '" + schemaName + "."+ tableName+ "' id: "+ id+ ", offset: "+ rowOffset+ ", limit: "+ rowLimit+ ", method: '"+ method+ "' succeeded";      logger.info(msg);      String debug="this_cnt  : " + this_cnt + "\nmaster_cnt: "+ master_cnt+ "\nthis_crc  : "+ this_crc+ "\nmaster_crc: "+ master_crc;      if (logger.isDebugEnabled())       logger.debug(debug);      return;    }  }  String msg="Consistency check failed on table '" + schemaName + "."+ tableName+ "' id: "+ id+ ", offset: "+ rowOffset+ ", limit: "+ rowLimit+ ", method: '"+ method+ "' failed";  if (logger.isDebugEnabled())   msg+="\nthis_cnt  : " + this_cnt + "\nmaster_cnt: "+ master_cnt+ "\nthis_crc  : "+ this_crc+ "\nmaster_crc: "+ master_crc;  throw new ConsistencyException(msg);}  }
class C{  public final void negate(){  this.m00=-this.m00;  this.m01=-this.m01;  this.m02=-this.m02;  this.m10=-this.m10;  this.m11=-this.m11;  this.m12=-this.m12;  this.m20=-this.m20;  this.m21=-this.m21;  this.m22=-this.m22;}  }
class C{  public DocumentEvent(Document doc,int offset,int length,String text){  Assert.isNotNull(doc);  Assert.isTrue(offset >= 0);  Assert.isTrue(length >= 0);  fDocument=doc;  fOffset=offset;  fLength=length;  fText=text;  fModificationStamp=fDocument.getModificationStamp();}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case StextPackage.VARIABLE_DEFINITION__INITIAL_VALUE:    setInitialValue((Expression)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  private StringBuffer parseParameters(StringBuffer buffer,Map<String,SortedSet<String>> paramMap){  int cnt=0;  int namesLength=paramMap.keySet().size();  for (  String key : paramMap.keySet()) {    parseSortedSetValues(buffer,key,paramMap);    cnt++;    if (namesLength > cnt) {      buffer.append(COMMA);    }  }  return buffer;}  }
class C{  public void reset(ActionMapping mapping,HttpServletRequest request){  globalRoomGroupIds=DynamicList.getInstance(new ArrayList(),factoryRoomGroups);  managerRoomGroupIds=DynamicList.getInstance(new ArrayList(),factoryRoomGroups);  globalRoomGroupNames=DynamicList.getInstance(new ArrayList(),factoryRoomGroups);  managerRoomGroupNames=DynamicList.getInstance(new ArrayList(),factoryRoomGroups);  globalRoomGroupsEditable=DynamicList.getInstance(new ArrayList(),factoryRoomGroups);  managerRoomGroupsEditable=DynamicList.getInstance(new ArrayList(),factoryRoomGroups);  globalRoomGroupsAssigned=DynamicList.getInstance(new ArrayList(),factoryRoomGroups);  managerRoomGroupsAssigned=DynamicList.getInstance(new ArrayList(),factoryRoomGroups);}  }
class C{  @Override public int read(byte[] b,int off,int len) throws IOException {  if (this.closed)   throw new IOException("Attempted read from closed stream.");  if (this.eof)   return -1;  if (this.pos >= this.chunkSize) {    nextChunk();    if (this.eof) {      return -1;    }  }  len=Math.min(len,this.chunkSize - this.pos);  int count=this.in.read(b,off,len);  this.pos+=count;  return count;}  }
class C{  public List<TriggerKey> selectMisfiredTriggers(Connection conn,long ts) throws SQLException {  PreparedStatement ps=null;  ResultSet rs=null;  try {    ps=conn.prepareStatement(rtp(SELECT_MISFIRED_TRIGGERS));    ps.setBigDecimal(1,new BigDecimal(String.valueOf(ts)));    rs=ps.executeQuery();    LinkedList<TriggerKey> list=new LinkedList<TriggerKey>();    while (rs.next()) {      String triggerName=rs.getString(COL_TRIGGER_NAME);      String groupName=rs.getString(COL_TRIGGER_GROUP);      list.add(triggerKey(triggerName,groupName));    }    return list;  }  finally {    closeResultSet(rs);    closeStatement(ps);  }}  }
class C{  private void beginMyTurn(){  setStatusBarText(Messages.getString("MovementDisplay.its_your_turn"));  butDone.setText("<html><b>" + Messages.getString("MovementDisplay.Done") + "</b></html>");  butDone.setEnabled(true);  setNextEnabled(true);  setForwardIniEnabled(true);  clientgui.bv.clearFieldofF();  if (numButtonGroups > 1)   getBtn(MoveCommand.MOVE_MORE).setEnabled(true);  if (!clientgui.bv.isMovingUnits()) {    clientgui.setDisplayVisible(true);  }  selectEntity(clientgui.getClient().getFirstEntityNum());}  }
class C{  public InetUnixAddress(String path){  this(path.getBytes(StandardCharsets.UTF_8));}  }
class C{  public String(){  value=new char[0];  offset=0;  count=0;}  }
class C{  public void readRssi(ActionCallback callback){  try {    this.currentCallback=callback;    this.gatt.readRemoteRssi();  } catch (  Throwable tr) {    Log.e(TAG,"readRssi",tr);    this.onFail(-1,tr.getMessage());  }}  }
class C{  public PasswordPlaceholderConfigurer(){  Resource[] resources=new Resource[1];  Properties prop=KylinConfig.getKylinProperties();  StringWriter writer=new StringWriter();  prop.list(new PrintWriter(writer));  String propString=writer.getBuffer().toString();  IOUtils.closeQuietly(writer);  InputStream is=IOUtils.toInputStream(propString,Charset.defaultCharset());  resources[0]=new InputStreamResource(is);  this.setLocations(resources);}  }
class C{  public boolean isColorWithEnumAsEnum(){  if (colorEnum != null)   return true; else   return false;}  }
class C{  public static void quickSelect(ArrayModifiableDBIDs data,Comparator<? super DBIDRef> comparator,int start,int end,int rank){  DBIDArrayIter refi=data.iter(), refj=data.iter(), pivot=data.iter();  while (true) {    if (start + SMALL > end) {      insertionSort(data,comparator,start,end,refi,refj);      return;    }    final int len=end - start;    final int seventh=(len >> 3) + (len >> 6) + 1;    final int m3=(start + end) >> 1;    final int m2=m3 - seventh;    final int m1=m2 - seventh;    final int m4=m3 + seventh;    final int m5=m4 + seventh;    if (comparator.compare(refi.seek(m1),refj.seek(m2)) > 0) {      data.swap(m1,m2);    }    if (comparator.compare(refi.seek(m1),refj.seek(m3)) > 0) {      data.swap(m1,m3);    }    if (comparator.compare(refi.seek(m2),refj.seek(m3)) > 0) {      data.swap(m2,m3);    }    if (comparator.compare(refi.seek(m4),refj.seek(m5)) > 0) {      data.swap(m4,m5);    }    if (comparator.compare(refi.seek(m1),refj.seek(m4)) > 0) {      data.swap(m1,m4);    }    if (comparator.compare(refi.seek(m3),refj.seek(m4)) > 0) {      data.swap(m3,m4);    }    if (comparator.compare(refi.seek(m2),refj.seek(m5)) > 0) {      data.swap(m2,m5);    }    if (comparator.compare(refi.seek(m2),refj.seek(m3)) > 0) {      data.swap(m2,m3);    }    if (comparator.compare(refi.seek(m4),refj.seek(m5)) > 0) {      data.swap(m4,m5);    }    int best=bestPivot(rank,m1,m2,m3,m4,m5);    data.swap(best,end - 1);    pivot.seek(end - 1);    int i=start, j=end - 2;    while (true) {      while (i <= j && comparator.compare(refi.seek(i),pivot) <= 0) {        i++;      }      while (j >= i && comparator.compare(refj.seek(j),pivot) >= 0) {        j--;      }      if (i >= j) {        break;      }      data.swap(i,j);    }    data.swap(i,end - 1);    pivot.seek(i);    while (rank < i && comparator.compare(refi.seek(i - 1),pivot) == 0) {      --i;    }    while (rank > i && comparator.compare(refi.seek(i + 1),pivot) == 0) {      ++i;    }    if (rank < i) {      end=i;    } else     if (rank > i) {      start=i + 1;    } else {      break;    }  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private IndexBound customerCidBound(int cid){  return new IndexBound(row(customerRowType,cid,null),new SetColumnSelector(0));}  }
class C{  @After public void tearDown(){  webClient.closeAllWindows();}  }
class C{  private void lockFocus(){  try {    mPreviewRequestBuilder.set(CaptureRequest.CONTROL_AF_TRIGGER,CameraMetadata.CONTROL_AF_TRIGGER_START);    mState=STATE_WAITING_LOCK;    mCaptureSession.capture(mPreviewRequestBuilder.build(),mCaptureCallback,mBackgroundHandler);  } catch (  CameraAccessException e) {    e.printStackTrace();  }}  }
class C{  public OptionPayloadEncGUI(){  initComponents();}  }
class C{  public NGramTokenizer(int minGram,int maxGram){  this(minGram,maxGram,false);}  }
class C{  private String printDFormat(String sx){  int nLeadingZeros=0;  int nBlanks=0, n=0;  int i=0, jFirst=0;  boolean neg=sx.charAt(0) == '-';  if (sx.equals("0") && precisionSet && precision == 0)   sx="";  if (!neg) {    if (precisionSet && sx.length() < precision)     nLeadingZeros=precision - sx.length();  } else {    if (precisionSet && (sx.length() - 1) < precision)     nLeadingZeros=precision - sx.length() + 1;  }  if (nLeadingZeros < 0)   nLeadingZeros=0;  if (fieldWidthSet) {    nBlanks=fieldWidth - nLeadingZeros - sx.length();    if (!neg && (leadingSign || leadingSpace))     nBlanks--;  }  if (nBlanks < 0)   nBlanks=0;  if (leadingSign)   n++; else   if (leadingSpace)   n++;  n+=nBlanks;  n+=nLeadingZeros;  n+=sx.length();  char[] ca=new char[n];  if (leftJustify) {    if (neg)     ca[i++]='-'; else     if (leadingSign)     ca[i++]='+'; else     if (leadingSpace)     ca[i++]=' ';    char[] csx=sx.toCharArray();    jFirst=neg ? 1 : 0;    for (int j=0; j < nLeadingZeros; i++, j++)     ca[i]='0';    for (int j=jFirst; j < csx.length; j++, i++)     ca[i]=csx[j];    for (int j=0; j < nBlanks; i++, j++)     ca[i]=' ';  } else {    if (!leadingZeros) {      for (i=0; i < nBlanks; i++)       ca[i]=' ';      if (neg)       ca[i++]='-'; else       if (leadingSign)       ca[i++]='+'; else       if (leadingSpace)       ca[i++]=' ';    } else {      if (neg)       ca[i++]='-'; else       if (leadingSign)       ca[i++]='+'; else       if (leadingSpace)       ca[i++]=' ';      for (int j=0; j < nBlanks; j++, i++)       ca[i]='0';    }    for (int j=0; j < nLeadingZeros; j++, i++)     ca[i]='0';    char[] csx=sx.toCharArray();    jFirst=neg ? 1 : 0;    for (int j=jFirst; j < csx.length; j++, i++)     ca[i]=csx[j];  }  return new String(ca);}  }
class C{  public PlatformServices withServerKeepBinary(){  return srvKeepBinary ? this : new PlatformServices(platformCtx,services,true);}  }
class C{  void computeNextElement(){  while (true) {    if (currentBits != 0) {      mask=currentBits & -currentBits;      return;    } else     if (++index < bits.length) {      currentBits=bits[index];    } else {      mask=0;      return;    }  }}  }
class C{  public void send(DatagramPacket p) throws IOException {  if (delegateAsDelegatingSocket != null) {    delegateAsDelegatingSocket.send(p);  } else {    if (outputStream == null)     outputStream=getOutputStream();    outputStream.write(p.getData(),p.getOffset(),p.getLength());    if (DelegatingDatagramSocket.logNonStun(++nbSentPackets)) {      InetSocketAddress localAddress=(InetSocketAddress)super.getLocalSocketAddress();      StunStack.logPacketToPcap(p,true,localAddress.getAddress(),localAddress.getPort());    }  }}  }
class C{  public String globalInfo(){  return "Takes results from a result producer and assembles them into " + "comma separated value form.";}  }
class C{  public NamespaceSpecification(String ns){  this(ns,DEFAULT_WILDCARD);}  }
class C{  public boolean intersectsFrustum(RenderContext rc,Frustum frustum){  if (frustum == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Tile","intersectsFrustum","missingFrustum"));  }  return this.getExtent(rc).intersectsFrustum(frustum);}  }
class C{  public File commit() throws IOException {  File finalFile=fileContentStore.getFile(node);  assert (!finalFile.getPath().equals(tempFile.getPath()));  FileUtil.delete(finalFile);  log.debug("  COMMIT: renaming " + tempFile + " to "+ finalFile);  if (!tempFile.renameTo(finalFile)) {    throw new IOException("Renaming " + tempFile + " to "+ finalFile+ " failed");  }  return finalFile;}  }
class C{  private void sendBroadcastFinishedSyncFolder(Account account,String remotePath,boolean success){  Intent finished=new Intent(FileDownloader.getDownloadFinishMessage());  finished.putExtra(FileDownloader.ACCOUNT_NAME,account.name);  finished.putExtra(FileDownloader.EXTRA_REMOTE_PATH,remotePath);  finished.putExtra(FileDownloader.EXTRA_FILE_PATH,FileStorageUtils.getSavePath(account.name) + remotePath);  finished.putExtra(FileDownloader.EXTRA_DOWNLOAD_RESULT,success);  mService.sendStickyBroadcast(finished);}  }
class C{  @Inline public void initializeHeader(ObjectReference object,boolean alloc){  if (HEADER_MARK_BITS) {    byte oldValue=VM.objectModel.readAvailableByte(object);    byte newValue=(byte)((oldValue & ~MARK_COUNT_MASK) | (alloc && !isAllocAsMarked ? allocState : markState));    VM.objectModel.writeAvailableByte(object,newValue);  } else   if (HeaderByte.NEEDS_UNLOGGED_BIT)   HeaderByte.markAsUnlogged(object);}  }
class C{  public synchronized void cancelAll(){  for (  TaskProgress progress : taskInfo)   progress.setCancelled(true);}  }
class C{  @Override public boolean isClosed(){  return closed;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:54.184 -0400",hash_original_method="A2B83E995E340F6F4341383980F35508",hash_generated_method="F1F1C1CC1238D7DC9BCBCC77389193F3") public static String toString(Reader input) throws IOException {  StringBuilderWriter sw=new StringBuilderWriter();  copy(input,sw);  return sw.toString();}  }
class C{  private void zoneAddRemoveMember(String address,boolean useAlias,boolean remove) throws NetworkDeviceControllerException {  String mdsCommand="";  if (!inConfigMode) {    throw NetworkDeviceControllerException.exceptions.mdsDeviceNotInConfigMode();  }  if (lastPrompt != SSHPrompt.MDS_CONFIG_ZONE) {    throw NetworkDeviceControllerException.exceptions.mdsUnexpectedLastPrompt(lastPrompt.toString(),SSHPrompt.MDS_CONFIG_ZONE.toString());  }  if (useAlias) {    mdsCommand=MDSDialogProperties.getString("MDSDialog.zoneMemberAlias.cmd");  } else {    if (!address.matches(wwnRegex)) {      String message="port wwn " + address + " is not formatted correctly";      throw NetworkDeviceControllerException.exceptions.mdsUnexpectedDeviceState(message);    }    mdsCommand=MDSDialogProperties.getString("MDSDialog.zoneMemberPwwn.cmd");  }  if (remove) {    mdsCommand=MDSDialogProperties.getString("MDSDialog.zonesetActivate.no.cmd") + " " + mdsCommand;  }  SSHPrompt[] prompts={SSHPrompt.MDS_CONFIG_ZONE};  StringBuilder buf=new StringBuilder();  boolean retryNeeded=true;  for (int retryCount=0; retryCount < sessionLockRetryMax && retryNeeded; retryCount++) {    String payload=MessageFormat.format(mdsCommand,address);    lastPrompt=sendWaitFor(payload,defaultTimeout,prompts,buf);    String[] lines=getLines(buf);    for (    String line : lines) {      if (!remove) {        if (line.indexOf(MDSDialogProperties.getString("MDSDialog.not.present")) >= 0) {          throw new NetworkDeviceControllerException(line + ": " + address);        }      }    }    retryNeeded=checkForEnhancedZoneSession(lines,retryCount);  }}  }
class C{  protected CtClass createCtClass(String classname,boolean useCache){  if (classname.charAt(0) == '[')   classname=Descriptor.toClassName(classname);  if (classname.endsWith("[]")) {    String base=classname.substring(0,classname.indexOf('['));    if ((!useCache || getCached(base) == null) && find(base) == null)     return null; else     return new CtArray(classname,this);  } else   if (find(classname) == null)   return null; else   return new CtClassType(classname,this);}  }
class C{  public boolean validSystemNameFormat(String systemName){  return (AcelaAddress.validSystemNameFormat(systemName,'L',getSystemPrefix()));}  }
class C{  final void refreshGUI(){  for (  RefreshListener aREFRESH_LIST : REFRESH_LIST) {    try {      aREFRESH_LIST.refresh();    } catch (    Throwable t) {      ErrorService.error(t);    }  }  updateConnectionQualityAsync();}  }
class C{  public static void analyze(Tree tree,double normaliseMeanRateTo){  double treeRate=0;  double treeTime=0;  for (int i=0; i < tree.getNodeCount(); i++) {    NodeRef node=tree.getNode(i);    if (tree.getClass().getName().equals("dr.evomodel.tree.TreeModel")) {      throw new RuntimeException("Does not currently handle TreeModel");    }    if (!tree.isRoot(node)) {      if (tree.getNodeAttribute(node,"rate") == null) {        System.out.println("Tree file does not contain rate information. ");        System.setOut(System.out);        System.err.println("Tree file does not contain rate information. Program terminated");        System.exit(0);      }      treeRate+=tree.getNodeRate(node) * tree.getBranchLength(node);      treeTime+=tree.getBranchLength(node);    }  }  treeRate/=treeTime;  FlexibleTree modifiedTree=(FlexibleTree)tree;  for (int i=0; i < modifiedTree.getNodeCount(); i++) {    NodeRef node=modifiedTree.getNode(i);    if (!modifiedTree.isRoot(node)) {      double nodeRate=normaliseMeanRateTo * modifiedTree.getNodeRate(node) / treeRate;      modifiedTree.setNodeAttribute(node,"rate",Double.valueOf(nodeRate));      double nodeTime=modifiedTree.getBranchLength(node);      nodeTime=nodeTime * treeRate / normaliseMeanRateTo;      modifiedTree.setBranchLength(node,nodeTime);    }  }}  }
class C{  public Statement leftJoin(Object table){  statement.append(" LEFT JOIN ").append(table);  return this;}  }
class C{  public void writeShapeFile(String shapeFileName,OMGraphicList graphics){  try {    ShapeFile s=new ShapeFile(shapeFileName);    int nGraphics=graphics.size();    if (nGraphics > 0) {      OMGraphic omg=graphics.get(0);      if ((omg instanceof OMPoly) && (omg.getRenderType() == OMGraphic.RENDERTYPE_LATLON)) {        int shapeType=((OMPoly)omg).isPolygon() ? ShapeUtils.SHAPE_TYPE_POLYGON : ShapeUtils.SHAPE_TYPE_ARC;        System.out.println("shapeType=" + shapeType);        s.setShapeType(shapeType);      }    }    System.out.println(nGraphics + " candidates.");    if (doThinning) {      OMGraphicList saveGraphics=new OMGraphicList();      for (int i=0; i < nGraphics; i++) {        OMGraphic omg=graphics.get(i);        if ((omg instanceof OMPoly) && (omg.getRenderType() == OMGraphic.RENDERTYPE_LATLON)) {          OMPoly poly=(OMPoly)omg;          if (maybeThrowAwayPoly(poly)) {            continue;          }          saveGraphics.add(poly);        } else {          System.out.println("Skipping candidate: " + omg.getClass().toString() + ", "+ omg.getRenderType());        }      }      graphics=saveGraphics;      if (joinPolylines) {        nGraphics=graphics.size();        System.out.println("Joining " + nGraphics + " polyline candidates.");        graphics=joinCommonLines(graphics,zero_eps);      }    }    EsriShapeExport ese=new EsriShapeExport(graphics,(Projection)null,shapeFileName);    ese.export();  } catch (  java.io.IOException e) {    e.printStackTrace();  }}  }
class C{  public static void d(String tag,String msg,Throwable tr){  println(DEBUG,tag,msg,tr);}  }
class C{  public static void w(String tag,Throwable tr){  w(tag,null,tr);}  }
class C{  public RequestHandle post(String url,RequestParams params,ResponseHandlerInterface responseHandler){  return post(null,url,params,responseHandler);}  }
class C{  private static void enableSyncForAccount(Account account){  ContentResolver.setIsSyncable(account,SYNC_AUTHORITY,1);  ContentResolver.setSyncAutomatically(account,SYNC_AUTHORITY,true);  ContentResolver.requestSync(account,SYNC_AUTHORITY,new Bundle());}  }
class C{  public static boolean isIndirectInvocation(Tree.InvocationExpression that){  return isIndirectInvocation(that,false);}  }
class C{  protected Closure[] resolveExplicitProperty(String propertyName){  return getExplicitProperties().get(propertyName);}  }
class C{  public COrthogonalPanel(final ZyGraphViewSettings settings){  super(new GridLayout(3,1));  Preconditions.checkNotNull(settings,"IE01591: Settings argument can not be null");  setBorder(new TitledBorder("Orthogonal Layout"));  CSettingsPanelBuilder.addComboBox(this,m_cbOrthoOrientation,"Orientation" + ":","Specifies whether orthogonal graph orientation goes from left to right or from top to bottom.",new String[]{"Vertical","Horizontal"},settings.getLayoutSettings().getOrthogonalSettings().getOrientation().ordinal());  CSettingsPanelBuilder.addComboBox(this,m_cbOrthoLayoutStyle,"Layout Style" + ":","Exact layouting style used when doing orthogonal layouts.",new String[]{"Normal","Tree"},settings.getLayoutSettings().getOrthogonalSettings().getStyle().ordinal());  CSettingsPanelBuilder.addTextField(this,m_tfOrthogonalMinNodeDistance,"Minimum Node Distance" + ":","Minimum distance between nodes in pixels.",String.valueOf(settings.getLayoutSettings().getOrthogonalSettings().getMinimumNodeDistance()));}  }
class C{  protected void listadoGruposExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  logger.info("Inicio de listadoGruposExecuteLogic");  ServiceRepository services=ServiceRepository.getInstance(ServiceClient.create(getAppUser(request)));  GestionAuditoriaBI service=services.lookupGestionAuditoriaBI();  removeInTemporalSession(request,AuditoriaConstants.LISTA_GRUPOS_WITH_LEVEL_KEY);  Collection groupsWithLevel=service.getGroupsWithLevels();  setInTemporalSession(request,AuditoriaConstants.LISTA_GRUPOS_WITH_LEVEL_KEY,groupsWithLevel);  GestionControlUsuariosBI serviceControl=services.lookupGestionControlUsuariosBI();  Collection groups=serviceControl.getGrupos();  request.setAttribute(AuditoriaConstants.LISTA_GRUPOS_KEY,groups);  Collection niveles=service.getLogLevels();  request.setAttribute(AuditoriaConstants.LISTA_NIVELES_KEY,niveles);  saveCurrentInvocation(KeysClientsInvocations.AUDITORIA_USERSLIST,request);  setReturnActionFordward(request,mapping.findForward("listado_grupos"));}  }
class C{  private void init(final Resources resources){  nodeToleranceValue=Density.dpToPx(ctx,40f);  wayToleranceValue=Density.dpToPx(ctx,40f);  largDragCircleRadius=Density.dpToPx(ctx,70f);  largDragToleranceRadius=Density.dpToPx(ctx,100f);  minLenForHandle=5 * nodeToleranceValue;  orientation_path.moveTo(0,Density.dpToPx(ctx,-20));  orientation_path.lineTo(Density.dpToPx(ctx,15),Density.dpToPx(ctx,20));  orientation_path.lineTo(0,Density.dpToPx(ctx,10));  orientation_path.lineTo(Density.dpToPx(ctx,-15),Density.dpToPx(ctx,20));  orientation_path.lineTo(0,Density.dpToPx(ctx,-20));  int arm=Density.dpToPx(ctx,10);  crosshairs_path.moveTo(0,-arm);  crosshairs_path.lineTo(0,arm);  crosshairs_path.moveTo(arm,0);  crosshairs_path.lineTo(-arm,0);  arm=Density.dpToPx(ctx,4);  x_path.moveTo(-arm,-arm);  x_path.lineTo(arm,arm);  x_path.moveTo(arm,-arm);  x_path.lineTo(-arm,arm);  @SuppressWarnings("deprecation") PixelXorXfermode whiteXor=new PixelXorXfermode(Color.WHITE);  Log.i("Style","setting up default profile elements");  featureStyles=new HashMap<String,FeatureStyle>();  Paint standardPath=new Paint();  standardPath.setStyle(Style.STROKE);  FeatureStyle fp=new FeatureStyle(WAY,standardPath);  fp.setColor(Color.BLACK);  featureStyles.put(fp.getName(),fp);  fp=new FeatureStyle(PROBLEM_WAY,standardPath);  fp.setColor(ContextCompat.getColor(ctx,R.color.problem));  fp.setWidthFactor(1.5f);  featureStyles.put(fp.getName(),fp);  fp=new FeatureStyle(VIEWBOX,standardPath);  fp.setColor(ContextCompat.getColor(ctx,R.color.grey));  fp.dontUpdate();  fp.getPaint().setStyle(Style.FILL);  fp.getPaint().setAlpha(125);  featureStyles.put(fp.getName(),fp);  fp=new FeatureStyle(HANDLE);  fp.dontUpdate();  fp.setColor(Color.BLACK);  fp.setWidthFactor(1f);  fp.getPaint().setStyle(Style.STROKE);  fp.getPaint().setXfermode(whiteXor);  fp.getPaint().setStrokeWidth(Density.dpToPx(ctx,1.0f));  featureStyles.put(fp.getName(),fp);  fp=new FeatureStyle(NODE);  fp.setColor(ContextCompat.getColor(ctx,R.color.ccc_red));  fp.setWidthFactor(1f);  featureStyles.put(fp.getName(),fp);  fp=new FeatureStyle(NODE_TAGGED);  fp.setColor(ContextCompat.getColor(ctx,R.color.ccc_red));  fp.setWidthFactor(1.5f);  featureStyles.put(fp.getName(),fp);  fp=new FeatureStyle(NODE_THIN);  fp.dontUpdate();  fp.getPaint().setStrokeWidth(Density.dpToPx(ctx,1.0f));  fp.setColor(ContextCompat.getColor(ctx,R.color.ccc_red));  fp.getPaint().setStyle(Style.STROKE);  fp.getPaint().setTypeface(Typeface.SANS_SERIF);  fp.getPaint().setTextSize(Density.dpToPx(ctx,12));  featureStyles.put(fp.getName(),fp);  fp=new FeatureStyle(PROBLEM_NODE);  fp.setColor(ContextCompat.getColor(ctx,R.color.problem));  fp.setWidthFactor(1f);  featureStyles.put(fp.getName(),fp);  fp=new FeatureStyle(PROBLEM_NODE_TAGGED);  fp.setColor(ContextCompat.getColor(ctx,R.color.problem));  fp.setWidthFactor(1.5f);  featureStyles.put(fp.getName(),fp);  fp=new FeatureStyle(PROBLEM_NODE_THIN);  fp.dontUpdate();  fp.getPaint().setStrokeWidth(Density.dpToPx(ctx,1.0f));  fp.setColor(ContextCompat.getColor(ctx,R.color.problem));  fp.getPaint().setStyle(Style.STROKE);  fp.getPaint().setTypeface(Typeface.SANS_SERIF);  fp.getPaint().setTextSize(Density.dpToPx(ctx,12));  featureStyles.put(fp.getName(),fp);  fp=new FeatureStyle(GPS_TRACK,featureStyles.get(WAY));  fp.setColor(Color.BLUE);  fp.getPaint().setStrokeCap(Cap.ROUND);  fp.getPaint().setStrokeJoin(Join.ROUND);  featureStyles.put(fp.getName(),fp);  fp=new FeatureStyle(WAY_TOLERANCE,featureStyles.get(WAY));  fp.setColor(ContextCompat.getColor(ctx,R.color.ccc_ocher));  fp.dontUpdate();  fp.getPaint().setAlpha(TOLERANCE_ALPHA);  fp.getPaint().setStrokeWidth(Density.dpToPx(ctx,wayToleranceValue));  featureStyles.put(fp.getName(),fp);  fp=new FeatureStyle(WAY_TOLERANCE_2,featureStyles.get(WAY));  fp.setColor(ContextCompat.getColor(ctx,R.color.ccc_ocher));  fp.dontUpdate();  fp.getPaint().setAlpha(TOLERANCE_ALPHA_2);  fp.getPaint().setStrokeWidth(Density.dpToPx(ctx,wayToleranceValue));  featureStyles.put(fp.getName(),fp);  fp=new FeatureStyle(SELECTED_NODE);  fp.setColor(ContextCompat.getColor(ctx,R.color.ccc_beige));  fp.setWidthFactor(1.5f);  featureStyles.put(fp.getName(),fp);  fp=new FeatureStyle(SELECTED_RELATION_NODE,featureStyles.get(SELECTED_NODE));  fp.setColor(ContextCompat.getColor(ctx,R.color.relation));  featureStyles.put(fp.getName(),fp);  fp=new FeatureStyle(NODE_DRAG_RADIUS);  fp.setColor(ContextCompat.getColor(ctx,R.color.ccc_beige));  fp.dontUpdate();  fp.getPaint().setStyle(Style.STROKE);  fp.getPaint().setAlpha(150);  fp.getPaint().setStrokeWidth(Density.dpToPx(ctx,10f));  featureStyles.put(fp.getName(),fp);  fp=new FeatureStyle(SELECTED_NODE_TAGGED);  fp.setColor(ContextCompat.getColor(ctx,R.color.ccc_beige));  fp.setWidthFactor(2f);  featureStyles.put(fp.getName(),fp);  fp=new FeatureStyle(SELECTED_RELATION_NODE_TAGGED,featureStyles.get(SELECTED_NODE_TAGGED));  fp.setColor(ContextCompat.getColor(ctx,R.color.relation));  featureStyles.put(fp.getName(),fp);  fp=new FeatureStyle(SELECTED_NODE_THIN);  fp.dontUpdate();  fp.getPaint().setStrokeWidth(Density.dpToPx(ctx,1.0f));  fp.setColor(ContextCompat.getColor(ctx,R.color.ccc_beige));  fp.getPaint().setStyle(Style.STROKE);  fp.getPaint().setTypeface(Typeface.SANS_SERIF);  fp.getPaint().setTextSize(Density.dpToPx(ctx,12));  featureStyles.put(fp.getName(),fp);  fp=new FeatureStyle(SELECTED_RELATION_NODE_THIN,featureStyles.get(SELECTED_NODE_THIN));  fp.setColor(ContextCompat.getColor(ctx,R.color.relation));  featureStyles.put(fp.getName(),fp);  fp=new FeatureStyle(GPS_POS,featureStyles.get(GPS_TRACK));  fp.getPaint().setStyle(Style.FILL);  fp.setWidthFactor(2f);  featureStyles.put(fp.getName(),fp);  fp=new FeatureStyle(GPS_POS_FOLLOW,featureStyles.get(GPS_POS));  fp.getPaint().setStyle(Style.STROKE);  fp.getPaint().setStrokeWidth(Density.dpToPx(ctx,4.0f));  fp.dontUpdate();  featureStyles.put(fp.getName(),fp);  fp=new FeatureStyle(GPS_ACCURACY,featureStyles.get(GPS_POS));  fp.getPaint().setStyle(Style.FILL_AND_STROKE);  fp.getPaint().setAlpha(TOLERANCE_ALPHA);  fp.dontUpdate();  featureStyles.put(fp.getName(),fp);  fp=new FeatureStyle(SELECTED_WAY,featureStyles.get(WAY));  fp.setColor(ContextCompat.getColor(ctx,R.color.ccc_beige));  fp.setWidthFactor(2f);  fp.getPaint().setStrokeCap(Cap.ROUND);  fp.getPaint().setStrokeJoin(Join.ROUND);  featureStyles.put(fp.getName(),fp);  fp=new FeatureStyle(SELECTED_RELATION_WAY,featureStyles.get(SELECTED_WAY));  fp.setColor(ContextCompat.getColor(ctx,R.color.relation));  featureStyles.put(fp.getName(),fp);  fp=new FeatureStyle(NODE_TOLERANCE);  fp.setColor(ContextCompat.getColor(ctx,R.color.ccc_ocher));  fp.dontUpdate();  fp.getPaint().setStyle(Style.FILL);  fp.getPaint().setAlpha(TOLERANCE_ALPHA);  fp.getPaint().setStrokeWidth(Density.dpToPx(ctx,nodeToleranceValue));  featureStyles.put(fp.getName(),fp);  fp=new FeatureStyle(NODE_TOLERANCE_2);  fp.setColor(ContextCompat.getColor(ctx,R.color.ccc_ocher));  fp.dontUpdate();  fp.getPaint().setStyle(Style.FILL);  fp.getPaint().setAlpha(TOLERANCE_ALPHA_2);  fp.getPaint().setStrokeWidth(Density.dpToPx(ctx,nodeToleranceValue));  featureStyles.put(fp.getName(),fp);  fp=new FeatureStyle(INFOTEXT);  fp.setColor(Color.BLACK);  fp.dontUpdate();  fp.getPaint().setTypeface(Typeface.SANS_SERIF);  fp.getPaint().setTextSize(Density.dpToPx(ctx,12));  featureStyles.put(fp.getName(),fp);  fp=new FeatureStyle(ATTRIBUTION_TEXT);  fp.setColor(Color.WHITE);  fp.dontUpdate();  fp.getPaint().setTypeface(Typeface.SANS_SERIF);  fp.getPaint().setTextSize(Density.dpToPx(ctx,12));  fp.getPaint().setShadowLayer(1,0,0,Color.BLACK);  featureStyles.put(fp.getName(),fp);  fp=new FeatureStyle(LABELTEXT);  fp.setColor(Color.BLACK);  fp.dontUpdate();  fp.getPaint().setTypeface(Typeface.SANS_SERIF);  fp.getPaint().setTextSize(Density.dpToPx(ctx,12));  fp.getPaint().setXfermode(whiteXor);  featureStyles.put(fp.getName(),fp);  fp=new FeatureStyle(WAY_DIRECTION);  fp.setColor(ContextCompat.getColor(ctx,R.color.ccc_red));  fp.setWidthFactor(0.8f);  fp.getPaint().setStyle(Style.STROKE);  fp.getPaint().setStrokeCap(Cap.SQUARE);  fp.getPaint().setStrokeJoin(Join.MITER);  featureStyles.put(fp.getName(),fp);  fp=new FeatureStyle(ONEWAY_DIRECTION,featureStyles.get(WAY_DIRECTION));  fp.setColor(ContextCompat.getColor(ctx,R.color.ccc_blue));  fp.setWidthFactor(0.5f);  featureStyles.put(fp.getName(),fp);  fp=new FeatureStyle(OPEN_NOTE);  fp.setColor(ContextCompat.getColor(ctx,R.color.bug_open));  fp.getPaint().setAlpha(100);  featureStyles.put(fp.getName(),fp);  fp=new FeatureStyle(CLOSED_NOTE);  fp.setColor(ContextCompat.getColor(ctx,R.color.bug_closed));  fp.getPaint().setAlpha(100);  featureStyles.put(fp.getName(),fp);  fp=new FeatureStyle(CROSSHAIRS);  fp.setColor(Color.BLACK);  fp.getPaint().setStyle(Style.STROKE);  fp.getPaint().setStrokeWidth(Density.dpToPx(ctx,1.0f));  fp.getPaint().setXfermode(whiteXor);  fp.dontUpdate();  featureStyles.put(fp.getName(),fp);synchronized (this) {    if (availableStyles == null) {      name=BUILTIN_STYLE_NAME;      currentStyle=this;      availableStyles=new HashMap<String,DataStyle>();      availableStyles.put(name,this);    }  }  Log.i("Style","... done");}  }
class C{  public IdsQueryBuilder queryName(String queryName){  this.queryName=queryName;  return this;}  }
class C{  public WarningPropertySet<T> addProperty(T prop){  map.put(prop,Boolean.TRUE);  return this;}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  int size=s.readInt();  allocateElements(size);  head=0;  tail=size;  for (int i=0; i < size; i++)   elements[i]=s.readObject();}  }
class C{  public boolean isMaxYSet(){  return isMaxYSet(0);}  }
class C{  @Override public void drawChars(char[] data,int offset,int length,int x,int y){  drawString(new String(data,offset,length),x,y);}  }
class C{  public static double elapsedSeconds(long startTime){  return elapsedTime(startTime,System.nanoTime(),1e9);}  }
class C{  static boolean isAlpha(int ch){  return ((ch >= 'A' && ch <= 'Z') || (ch >= 'a' && ch <= 'z'));}  }
class C{  private void mustdo(Runnable runnable){  if (runnable == null) {    return;  }  long start=System.currentTimeMillis();  runnable.run();  long consume=System.currentTimeMillis() - start;  if (consume > 1000) {    log.error(Thread.currentThread().toString() + "##mustdo() take more than 1000 ms");  }}  }
class C{  private boolean isBetterThanAnyExistingTestSuite(Project db,ProjectStaticData current,TestsOnDisk suite){  if (suite.csvData == null) {    return false;  }  if (current.getClassInfo(suite.cut).hasChanged()) {    return true;  }  String statistics=Properties.REPORT_DIR + File.separator + "statistics.csv";  File statistics_file=new File(statistics);  if (!statistics_file.exists()) {    return isBetterThanPreviousGeneration(db,current,suite);  }  List<String[]> rows=null;  try {    CSVReader reader=new CSVReader(new FileReader(statistics_file));    rows=reader.readAll();    reader.close();  } catch (  IOException e) {    logger.error(e.getMessage());    return true;  }  List<String[]> rowCUT=new ArrayList<String[]>();  rowCUT.add(rows.get(0));  for (  String[] row : rows) {    if (ArrayUtil.contains(row,suite.cut)) {      rowCUT.add(row);      break;    }  }  if (rowCUT.size() == 1) {    return isBetterThanPreviousGeneration(db,current,suite);  }  double existingOverallCoverage=0.0;  double generatedOverallCoverage=0.0;  for (  String variable : suite.csvData.getCoverageVariables()) {    String coverageVariable=CsvJUnitData.getValue(rowCUT,variable);    if (coverageVariable == null) {      continue;    }    generatedOverallCoverage+=suite.csvData.getCoverage(variable);    existingOverallCoverage+=Double.valueOf(coverageVariable);  }  generatedOverallCoverage/=suite.csvData.getNumberOfCoverageValues();  existingOverallCoverage/=suite.csvData.getNumberOfCoverageValues();  double covDif=generatedOverallCoverage - existingOverallCoverage;  if (covDif > 0.0001) {    return true;  }  for (  String variable : suite.csvData.getCoverageBitStringVariables()) {    String existingCoverage=CsvJUnitData.getValue(rowCUT,variable);    if (existingCoverage == null) {      continue;    }    String generatedCoverage=suite.csvData.getCoverageBitString(variable);    if (generatedCoverage.length() != existingCoverage.length()) {      return true;    }    for (int i=0; i < generatedCoverage.length(); i++) {      if (existingCoverage.charAt(i) == '0' && generatedCoverage.charAt(i) == '1') {        return true;      }    }  }  return false;}  }
class C{  @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1) private void handleTouchInteractionStart(){  if (mFirstFocusedItem != null) {    mFirstFocusedItem.recycle();    mFirstFocusedItem=null;  }  if (mSpeechController.isSpeaking()) {    mMaybeRefocus=false;    final AccessibilityNodeInfoCompat currentNode=mCursorController.getCursor();    if (!AccessibilityTutorialActivity.isTutorialActive() && !AccessibilityNodeInfoUtils.nodeMatchesClassByType(currentNode,WebView.class)) {      mService.interruptAllFeedback();    }    AccessibilityNodeInfoUtils.recycleNodes(currentNode);  } else {    mMaybeRefocus=true;  }  mMaybeSingleTap=true;  mFocusedItems=0;}  }
class C{  public List<SkuWarehouseDTO> findProductSkusOnWarehouse(final long productId,final long warehouseId){  final List<SkuWarehouse> skuWarehouses=skuWarehouseService.getProductSkusOnWarehouse(productId,warehouseId);  final List<SkuWarehouseDTO> result=new ArrayList<SkuWarehouseDTO>(skuWarehouses.size());  for (  SkuWarehouse sw : skuWarehouses) {    result.add(assembleSkuWarehouseDTO(sw));  }  return result;}  }
class C{  public static float cs_norm(Scs A){  int p, j, n, Ap[];  float Ax[], norm=0, s;  if (!Scs_util.CS_CSC(A) || A.x == null)   return (-1);  n=A.n;  Ap=A.p;  Ax=A.x;  for (j=0; j < n; j++) {    for (s=0, p=Ap[j]; p < Ap[j + 1]; p++)     s+=Math.abs(Ax[p]);    norm=Math.max(norm,s);  }  return (norm);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:49.165 -0500",hash_original_method="2057473EBAC4D7FF54AEDE0043F741F4",hash_generated_method="30BA8887E7A010663223CDC747054835") public void warning(SAXParseException e) throws SAXException {}  }
class C{  public void changeConfigFileJobName(String job) throws IOException {  InputStream input=new FileInputStream(_path);  BufferedReader reader=new BufferedReader(new InputStreamReader(input));  StringBuilder out=new StringBuilder();  String line, row=null;  while ((line=reader.readLine()) != null) {    row=line.toString();    if (line.toString().contains("jenkins.jobName")) {      row="jenkins.jobName=" + job;    }    out.append(row + "\n");  }  reader.close();  OutputStream output=new FileOutputStream(_path);  BufferedWriter writer=new BufferedWriter(new OutputStreamWriter(output));  writer.write(out.toString());  writer.close();}  }
class C{  public SimpleStorageServiceWagon(){  super(true);}  }
class C{  public void close() throws IOException {  if (is != System.in)   is.close();  buffer=null;}  }
class C{  protected void pollActiveWindows(){  try {    while (isRunning()) {      long nextTime=System.currentTimeMillis() + ONE_MINUTE;      dataManager.updateActiveWindows();      long sleepTime=nextTime - System.currentTimeMillis();      if (sleepTime > 0) {        Thread.sleep(sleepTime);      }    }  } catch (  InterruptedException e) {    LOG.info("Interrupted waiting for an execution window");    Thread.currentThread().interrupt();  }}  }
class C{  public ArithmeticException(@Nullable String s){  super(s);}  }
class C{  public final AC sizeGroup(String s,int... indexes){  for (int i=indexes.length - 1; i >= 0; i--) {    int ix=indexes[i];    makeSize(ix);    cList.get(ix).setSizeGroup(s);  }  return this;}  }
class C{  public void makeClass(int singleChar,boolean caseless){  makeClass(new IntCharSet(singleChar),caseless);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.211 -0400",hash_original_method="C99FBA65B0D308569620507D6E099042",hash_generated_method="5CE80A6225762CA51E516040755CB8E9") @Override public void flush() throws IOException {  out.flush();}  }
class C{  public void updateTheme(){  boolean wasShowing=dialog.isShowing();  dialog.setVisible(false);  dialog.getContentPane().removeAll();  Font tipFont=new Font(tipPane.getFont().getName(),tipPane.getFont().getStyle(),tipPane.getFont().getSize() - 2);  tipPane.setFont(tipFont);  constructDialog();  tipPane.setContentType("text/html");  setText(getRandomTip());  if (wasShowing) {    dialog.setVisible(true);    dialog.toFront();  }}  }
class C{  public static final double[] times(final double[][] m1,final double[] v2){  assert (v2.length == getColumnDimensionality(m1)) : ERR_MATRIX_INNERDIM;  final double[] re=new double[m1.length];  for (int i=0; i < m1.length; i++) {    final double[] Arowi=m1[i];    double s=0;    for (int k=0; k < Arowi.length; k++) {      s+=Arowi[k] * v2[k];    }    re[i]=s;  }  return re;}  }
class C{  public boolean wordBreak(String s,Set<String> dict){  if (s == null || s.length() == 0 || dict == null)   return false;  int len=s.length();  boolean[] can=new boolean[len + 1];  can[0]=true;  for (int i=1; i <= len; i++) {    for (int j=0; j < i; j++) {      if (can[j] && dict.contains(s.substring(j,i))) {        can[i]=true;        break;      }    }  }  return can[len];}  }
class C{  public void CleanMobileDevice(String DeviceId,MobileDeviceReceiver receiver){  MobileDeviceParser parser=new MobileDeviceParser(receiver);  String url=mDomoticzUrls.constructGetUrl(DomoticzValues.Json.Url.Request.CLEAN_MOBILE_DEVICE);  url+="&uuid=" + DeviceId;  RequestUtil.makeJsonGetRequest(parser,getUserCredentials(Authentication.USERNAME),getUserCredentials(Authentication.PASSWORD),url,mSessionUtil,false,1,queue);}  }
class C{  public void addLocalTempTable(Table table){  if (localTempTables == null) {    localTempTables=database.newStringMap();  }  if (localTempTables.get(table.getName()) != null) {    throw DbException.get(ErrorCode.TABLE_OR_VIEW_ALREADY_EXISTS_1,table.getSQL());  }  modificationId++;  localTempTables.put(table.getName(),table);}  }
class C{  public static void saveProvisioningVersion(Context context,int version){  if (version > 0) {    SharedPreferences preferences=context.getSharedPreferences(AndroidRegistryFactory.RCS_PREFS_NAME,Activity.MODE_PRIVATE);    SharedPreferences.Editor editor=preferences.edit();    editor.putInt(REGISTRY_PROVISIONING_VERSION,version);    editor.commit();  }}  }
class C{  public static void main(String[] args){  new SpringApplicationBuilder(RoutingServiceRunner.class).web(true).run(args);}  }
class C{  protected void addTextEventListeners(BridgeContext ctx,NodeEventTarget e){  if (childNodeRemovedEventListener == null) {    childNodeRemovedEventListener=new DOMChildNodeRemovedEventListener();  }  if (subtreeModifiedEventListener == null) {    subtreeModifiedEventListener=new DOMSubtreeModifiedEventListener();  }  SVG12BridgeContext ctx12=(SVG12BridgeContext)ctx;  AbstractNode n=(AbstractNode)e;  XBLEventSupport evtSupport=(XBLEventSupport)n.initializeEventSupport();  evtSupport.addImplementationEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMNodeRemoved",childNodeRemovedEventListener,true);  ctx12.storeImplementationEventListenerNS(e,XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMNodeRemoved",childNodeRemovedEventListener,true);  evtSupport.addImplementationEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMSubtreeModified",subtreeModifiedEventListener,false);  ctx12.storeImplementationEventListenerNS(e,XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMSubtreeModified",subtreeModifiedEventListener,false);}  }
class C{  @Override public synchronized void updateBoolean(String columnName,boolean x) throws SQLException {  updateBoolean(findColumn(columnName),x);}  }
class C{  public String whyDoomed(Entity en){  if ((atmosphere < ATMO_THIN) && en.doomedInVacuum()) {    return "vacuum";  }  if ((windStrength == WI_TORNADO_F4) && !(en instanceof Mech)) {    return "tornado";  }  if ((windStrength == WI_TORNADO_F13) && (((en instanceof Infantry) && !(en instanceof BattleArmor)) || ((en.getMovementMode() == EntityMovementMode.HOVER) || (en.getMovementMode() == EntityMovementMode.WIGE) || (en.getMovementMode() == EntityMovementMode.VTOL)))) {    return "tornado";  }  if ((windStrength == WI_STORM) && ((en instanceof Infantry) && !(en instanceof BattleArmor))) {    return "storm";  }  return null;}  }
class C{  public boolean prebookTrip(double now,MobsimPassengerAgent passenger,Id<Link> fromLinkId,Id<Link> toLinkId,double departureTime){  if (departureTime <= now) {    throw new IllegalStateException("This is not a call ahead");  }  PassengerRequest request=createRequest(passenger,fromLinkId,toLinkId,departureTime,now);  optimizer.requestSubmitted(request);  if (!request.isRejected()) {    advanceRequestStorage.storeAdvanceRequest(request);  }  return !request.isRejected();}  }
class C{  @Override public String toString(){  return LocalizedStrings.HeapLRUCapacityController_HEAPLRUCAPACITYCONTROLLER_WITH_A_CAPACITY_OF_0_OF_HEAP_AND_AN_THREAD_INTERVAL_OF_1_AND_EVICTION_ACTION_2.toLocalizedString(new Object[]{Long.valueOf(this.getLimit()),this.getEvictionAction()});}  }
class C{  public ModelConverter(ModelBase model,double scale,boolean renderDoubleFace,float rotationX,float rotationY,float rotationZ,Vec3UV rotationCenter){  this.constructModel(model,scale,renderDoubleFace);  this.rotate(1.0F,rotationX + 180.0F,rotationY,rotationZ,rotationCenter);}  }
class C{  protected Color parseColor(String colorString) throws NumberFormatException {  int colorSpec=Integer.parseInt(colorString,16);  if (colorSpec < 0) {    return OMGraphic.clear;  } else {    return new Color(colorSpec);  }}  }
class C{  public static OFGroup createMPLSSwapLabel(U32 index){  return OFGroup.of(0 | (index.getRaw() & 0x00ffFFff) | (MPLSSubType.MPLS_SWAP_LABEL << 24)| (OFDPAGroupType.MPLS_LABEL << 28));}  }
class C{  public Complex(double a){  this(a,0);}  }
class C{  public static void voidMaterialMovement(Properties ctx,int mmovementId,String trxName) throws OperationException {  MMovement movement=null;  movement=new MMovement(ctx,mmovementId,trxName);  movement.setDocStatus(DocumentEngine.STATUS_Voided);  movement.setDocAction(DocumentEngine.ACTION_Close);  movement.setIsActive(false);  PoManager.save(movement);}  }
class C{  public synchronized void persistCandleSeries(final CandleSeries candleSeries) throws Exception {  Candle transientInstance=null;  try {    if (candleSeries.isEmpty())     return;    EntityManager entityManager=EntityManagerHelper.getEntityManager();    entityManager.getTransaction().begin();    Tradingday tradingday=null;    Contract contract=findContractById(candleSeries.getContract().getIdContract());    for (int i=0; i < candleSeries.getItemCount(); i++) {      CandleItem candleItem=(CandleItem)candleSeries.getDataItem(i);      if (null != candleItem.getCandle().getIdCandle()) {        Candle instance=entityManager.find(Candle.class,candleItem.getCandle().getIdCandle());        if (instance.equals(candleItem.getCandle())) {          continue;        } else {          throw new Exception("Count: " + i + " Symbol: "+ candleSeries.getSymbol()+ "candleid: "+ candleItem.getCandle().getIdCandle()+ " open: "+ candleItem.getCandle().getStartPeriod());        }      }      if (!candleItem.getCandle().getTradingday().equals(tradingday)) {        if (null == candleItem.getCandle().getTradingday().getIdTradingDay()) {          tradingday=findTradingdayByDate(candleItem.getCandle().getTradingday().getOpen(),candleItem.getCandle().getTradingday().getClose());        } else {          tradingday=findTradingdayById(candleItem.getCandle().getTradingday().getIdTradingDay());        }        if (null == tradingday) {          entityManager.persist(candleItem.getCandle().getTradingday());          entityManager.getTransaction().commit();          entityManager.getTransaction().begin();          tradingday=candleItem.getCandle().getTradingday();        } else {          Integer idTradingday=tradingday.getIdTradingDay();          Integer idContract=contract.getIdContract();          Integer barSize=candleSeries.getBarSize();          String hqlDelete="delete Candle where idContract = :idContract and idTradingday = :idTradingday and barSize = :barSize";          entityManager.createQuery(hqlDelete).setParameter("idContract",idContract).setParameter("idTradingday",idTradingday).setParameter("barSize",barSize).executeUpdate();          entityManager.getTransaction().commit();          entityManager.getTransaction().begin();        }      }      transientInstance=candleItem.getCandle();      transientInstance.setTradingday(tradingday);      transientInstance.setContract(contract);      entityManager.persist(transientInstance);      if ((Math.floor(i / 50d) == (i / 50d)) && (i > 0)) {        entityManager.getTransaction().commit();        entityManager.getTransaction().begin();      }    }    entityManager.getTransaction().commit();  } catch (  Exception re) {    EntityManagerHelper.logError("Error persistCandleSeries failed :" + re.getMessage(),re);    EntityManagerHelper.rollback();    throw re;  } finally {    EntityManagerHelper.close();  }}  }
class C{  public final double meanOrMode(Attribute att){  return meanOrMode(att.index());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:45.502 -0500",hash_original_method="6B74CB8285045DC3058688AFD39174C7",hash_generated_method="D21EC7D6F55E6DDB571DC2CC93C25E59") public void connected(Context srcContext,Handler srcHandler,Messenger dstMessenger){  if (DBG)   log("connected srcHandler to the dstMessenger  E");  mSrcContext=srcContext;  mSrcHandler=srcHandler;  mSrcMessenger=new Messenger(mSrcHandler);  mDstMessenger=dstMessenger;  if (DBG)   log("connected srcHandler to the dstMessenger X");}  }
class C{  public static void validate(Collection<CubeSegment> segments){  if (segments == null || segments.isEmpty())   return;  List<CubeSegment> all=Lists.newArrayList(segments);  Collections.sort(all);  boolean isOffsetsOn=all.get(0).isSourceOffsetsOn();  for (  CubeSegment seg : all) {    seg.validate();    if (seg.isSourceOffsetsOn() != isOffsetsOn)     throw new IllegalStateException("Inconsistent isOffsetsOn for segment " + seg);  }  List<CubeSegment> ready=Lists.newArrayListWithCapacity(all.size());  List<CubeSegment> news=Lists.newArrayListWithCapacity(all.size());  for (  CubeSegment seg : all) {    if (seg.getStatus() == SegmentStatusEnum.READY)     ready.add(seg); else     news.add(seg);  }  CubeSegment pre=null;  for (  CubeSegment seg : ready) {    if (pre != null) {      if (pre.sourceOffsetOverlaps(seg))       throw new IllegalStateException("Segments overlap: " + pre + " and "+ seg);      if (pre.getSourceOffsetEnd() < seg.getSourceOffsetStart())       logger.warn("Hole between adjacent READY segments " + pre + " and "+ seg);    }    pre=seg;  }  pre=null;  for (  CubeSegment seg : news) {    if (pre != null) {      if (pre.sourceOffsetOverlaps(seg))       throw new IllegalStateException("Segments overlap: " + pre + " and "+ seg);    }    pre=seg;    for (    CubeSegment aReady : ready) {      if (seg.sourceOffsetOverlaps(aReady) && !seg.sourceOffsetContains(aReady))       throw new IllegalStateException("Segments overlap: " + aReady + " and "+ seg);    }  }  for (  CubeSegment seg : news) {    Pair<Boolean,Boolean> pair=fitInSegments(all,seg);    boolean startFit=pair.getFirst();    boolean endFit=pair.getSecond();    if (!startFit)     logger.warn("NEW segment start does not fit/connect with other segments: " + seg);    if (!endFit)     logger.warn("NEW segment end does not fit/connect with other segments: " + seg);  }}  }
class C{  public void test_optional_with_filter() throws Exception {  new TestHelper("optional-with-filter-01","optional-with-filter-01.rq","optional-with-filter-01.ttl","optional-with-filter-01.srx").runTest();}  }
class C{  @Override public final int size(){  return collection.size();}  }
class C{  public static <T>T min(Collection<? extends T> collection,Comparator<? super T> comparator){  if (comparator == null) {    @SuppressWarnings("unchecked") T result=(T)min((Collection<net.sourceforge.retroweaver.harmony.runtime.java.lang.Comparable>)collection);    return result;  }  Iterator<? extends T> it=collection.iterator();  T min=it.next();  while (it.hasNext()) {    T next=it.next();    if (comparator.compare(min,next) > 0) {      min=next;    }  }  return min;}  }
class C{  @Override public boolean equals(Object obj){  if (obj instanceof Video2) {    Video2 other=(Video2)obj;    return Objects.equal(name,other.name) && Objects.equal(url,other.url) && duration == other.duration;  } else {    return false;  }}  }
class C{  @Override public long longValue(){  return value;}  }
class C{  @Override public Map<String,Long> merge(Map<String,Long> accumulatedValue1,Map<String,Long> accumulatedValue2){  for (  Map.Entry<String,Long> entry : accumulatedValue2.entrySet()) {    if (accumulatedValue1.containsKey(entry.getKey()) && accumulatedValue1.get(entry.getKey()) > entry.getValue()) {      continue;    }    accumulatedValue1.put(entry.getKey(),entry.getValue());  }  return accumulatedValue1;}  }
class C{  public boolean prescreen(ClassContext classContext,Method method){  BitSet bytecodeSet=classContext.getBytecodeSet(method);  return bytecodeSet != null && (bytecodeSet.get(Constants.INVOKEINTERFACE) || bytecodeSet.get(Constants.INVOKEVIRTUAL) || bytecodeSet.get(Constants.INVOKESPECIAL)|| bytecodeSet.get(Constants.INVOKESTATIC)|| bytecodeSet.get(Constants.INVOKENONVIRTUAL));}  }
class C{  @Deprecated public static void liftingFromBottom(View view,float baseRotation,int duration){  ViewHelper.setRotationX(view,baseRotation);  ViewHelper.setTranslationY(view,view.getHeight() / 3);  ViewPropertyAnimator.animate(view).setInterpolator(new AccelerateDecelerateInterpolator()).setDuration(duration).rotationX(0).translationY(0).start();}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  String lang=m_arg0.execute(xctxt).str();  int parent=xctxt.getCurrentNode();  boolean isLang=false;  DTM dtm=xctxt.getDTM(parent);  while (DTM.NULL != parent) {    if (DTM.ELEMENT_NODE == dtm.getNodeType(parent)) {      int langAttr=dtm.getAttributeNode(parent,"http://www.w3.org/XML/1998/namespace","lang");      if (DTM.NULL != langAttr) {        String langVal=dtm.getNodeValue(langAttr);        if (langVal.toLowerCase().startsWith(lang.toLowerCase())) {          int valLen=lang.length();          if ((langVal.length() == valLen) || (langVal.charAt(valLen) == '-')) {            isLang=true;          }        }        break;      }    }    parent=dtm.getParent(parent);  }  return isLang ? XBoolean.S_TRUE : XBoolean.S_FALSE;}  }
class C{  public void compose(StylesheetRoot sroot) throws TransformerException {  super.compose(sroot);  StylesheetRoot.ComposeState cstate=sroot.getComposeState();  java.util.Vector vnames=cstate.getVariableNames();  if (null != m_countMatchPattern)   m_countMatchPattern.fixupVariables(vnames,cstate.getGlobalsSize());  if (null != m_format_avt)   m_format_avt.fixupVariables(vnames,cstate.getGlobalsSize());  if (null != m_fromMatchPattern)   m_fromMatchPattern.fixupVariables(vnames,cstate.getGlobalsSize());  if (null != m_groupingSeparator_avt)   m_groupingSeparator_avt.fixupVariables(vnames,cstate.getGlobalsSize());  if (null != m_groupingSize_avt)   m_groupingSize_avt.fixupVariables(vnames,cstate.getGlobalsSize());  if (null != m_lang_avt)   m_lang_avt.fixupVariables(vnames,cstate.getGlobalsSize());  if (null != m_lettervalue_avt)   m_lettervalue_avt.fixupVariables(vnames,cstate.getGlobalsSize());  if (null != m_valueExpr)   m_valueExpr.fixupVariables(vnames,cstate.getGlobalsSize());}  }
class C{  public Hour(Date time,TimeZone zone,Locale locale){  ParamChecks.nullNotPermitted(time,"time");  ParamChecks.nullNotPermitted(zone,"zone");  ParamChecks.nullNotPermitted(locale,"locale");  Calendar calendar=Calendar.getInstance(zone,locale);  calendar.setTime(time);  this.hour=(byte)calendar.get(Calendar.HOUR_OF_DAY);  this.day=new Day(time,zone,locale);  peg(calendar);}  }
class C{  @Override public void configure(){  if (isAutoRange()) {    autoAdjustRange();  }}  }
class C{  public void process(){  AggregateMapping mapping=getOwningDescriptor().getClassDescriptor().newAggregateMapping();  setMapping(mapping);  mapping.setReferenceClassName(getReferenceClassName());  mapping.setAttributeName(getAttributeName());  setAccessorMethods(mapping);  if (mapping.isAggregateObjectMapping()) {    AggregateObjectMapping aggregateMapping=(AggregateObjectMapping)mapping;    aggregateMapping.setIsNullAllowed(true);    processAttributeOverrides(m_attributeOverrides,aggregateMapping,getReferenceDescriptor());    processAssociationOverrides(m_associationOverrides,aggregateMapping,getReferenceDescriptor());    processConverts(getConverts(m_converts),aggregateMapping,getReferenceClass(),false);  } else   if (mapping.isAbstractCompositeObjectMapping()) {    ((AbstractCompositeObjectMapping)mapping).setField(getDatabaseField(getDescriptor().getPrimaryTable(),MetadataLogger.COLUMN));  }  processReturnInsertAndUpdate();}  }
class C{  public void testDefaultFoldersNonPrimary() throws Exception {  setSecondaryFs=true;  mode=DUAL_ASYNC;  startUp();  checkMode("/ignite/proxy",PROXY);  checkMode("/ignite/proxy/",PROXY);  checkMode("/ignite/proxy/subfolder",PROXY);  checkMode("/ignite/proxy/folder/file.txt",PROXY);  checkMode("/ignite/proxyx",mode);  checkMode("/ignite/proxyx/",mode);  checkMode("/ignite/proxyx/subfolder",mode);  checkMode("/ignite/proxyx/folder/file.txt",mode);  checkMode("/userdir/ignite/proxy",mode);  checkMode("/userdir/ignite/proxy/",mode);  checkMode("/userdir/ignite/proxy/subfolder",mode);  checkMode("/userdir/ignite/proxy/folder/file.txt",mode);  checkMode("/ignite/sync",DUAL_SYNC);  checkMode("/ignite/sync/",DUAL_SYNC);  checkMode("/ignite/sync/subfolder",DUAL_SYNC);  checkMode("/ignite/sync/folder/file.txt",DUAL_SYNC);  checkMode("/ignite/syncx",mode);  checkMode("/ignite/syncx/",mode);  checkMode("/ignite/syncx/subfolder",mode);  checkMode("/ignite/syncx/folder/file.txt",mode);  checkMode("/userdir/ignite/sync",mode);  checkMode("/userdir/ignite/sync/",mode);  checkMode("/userdir/ignite/sync/subfolder",mode);  checkMode("/userdir/ignite/sync/folder/file.txt",mode);  checkMode("/ignite/async",DUAL_ASYNC);  checkMode("/ignite/async/",DUAL_ASYNC);  checkMode("/ignite/async/subfolder",DUAL_ASYNC);  checkMode("/ignite/async/folder/file.txt",DUAL_ASYNC);  checkMode("/ignite/asyncx",mode);  checkMode("/ignite/asyncx/",mode);  checkMode("/ignite/asyncx/subfolder",mode);  checkMode("/ignite/asyncx/folder/file.txt",mode);  checkMode("/userdir/ignite/async",mode);  checkMode("/userdir/ignite/async/",mode);  checkMode("/userdir/ignite/async/subfolder",mode);  checkMode("/userdir/ignite/async/folder/file.txt",mode);}  }
class C{  protected BloomFilter readBloomFilter() throws IOException {  final long addr=checkpoint.addrBloom;  if (addr == 0L) {    return null;  }  if (storeCache != null) {    final BloomFilter bloomFilter=(BloomFilter)storeCache.get(addr);    if (bloomFilter != null) {      return bloomFilter;    }  }  if (log.isInfoEnabled())   log.info("reading bloom filter: " + addressManager.toString(addr));  final long off=addressManager.getOffset(addr);  final int len=addressManager.getByteCount(addr);  final ByteBuffer buf=ByteBuffer.allocate(len);  buf.limit(len);  buf.position(0);  try {    FileChannelUtility.readAll(opener,buf,off);    buf.flip();  } catch (  IOException ex) {    throw new RuntimeException(ex);  }  assert buf.position() == 0;  assert buf.limit() == len;  final BloomFilter bloomFilter=(BloomFilter)SerializerUtil.deserialize(buf);  if (log.isInfoEnabled())   log.info("Read bloom filter: bytesOnDisk=" + len);  if (storeCache != null) {    storeCache.putIfAbsent(addr,bloomFilter);  }  return bloomFilter;}  }
class C{  private void handleTestRunFailed(String errorMsg){  errorMsg=(errorMsg == null ? "Unknown error" : errorMsg);  Log.i(LOG_TAG,String.format("Test run failed: %s",errorMsg));  String testRunStackTrace="";  if ((mCurrentTestResult != null) && (mCurrentTestResult.isComplete())) {    TestIdentifier testId=new TestIdentifier(mCurrentTestResult.mTestClass,mCurrentTestResult.mTestName);    Map<String,String> emptyMap=Collections.emptyMap();    if (mCurrentTestResult.hasStackTrace()) {      testRunStackTrace=mCurrentTestResult.getTrace();    }    for (    ITestRunListener listener : mTestListeners) {      listener.testFailed(ITestRunListener.TestFailure.ERROR,testId,"No test results.\r\n" + testRunStackTrace);      listener.testEnded(testId,emptyMap);    }    clearCurrentTestResult();  }  for (  ITestRunListener listener : mTestListeners) {    listener.testRunFailed(errorMsg);    listener.testRunEnded(mTotalRunTime,getRunMetrics());  }}  }
class C{  public byte[] genBytecode() throws Exception {  ClassWriter cw=new ClassWriter(ClassWriter.COMPUTE_MAXS);  FieldVisitor fv=null;  MethodVisitor mv=null;  ImplHelper.FieldDesc[] fieldDesc=ImplHelper.getFieldDesc(clazz);  boolean isVariableLengthLayout=false;  final boolean itf=false;{    mv=cw.visitMethod(ACC_PUBLIC,"sizeof","()J",null,null);    mv.visitCode();    mv.visitLdcInsn(new Long(getClassSize(fieldDesc)));    mv.visitInsn(LRETURN);    mv.visitMaxs(2,1);    mv.visitEnd();  }  cw.visit(V1_8,ACC_FINAL + ACC_SUPER,implClassName,null,"java/lang/Object",new String[]{interfaceClassName});{    mv=cw.visitMethod(0,"<init>","()V",null,null);    mv.visitCode();    mv.visitVarInsn(ALOAD,0);    mv.visitMethodInsn(INVOKESPECIAL,"java/lang/Object","<init>","()V",false);    mv.visitInsn(RETURN);    mv.visitMaxs(1,1);    mv.visitEnd();  }  for (int i=0; i < fieldDesc.length; i++) {    if (!ImplHelper.isPointerType(fieldDesc[i].rawType)) {      if (ImplHelper.isTypePrimitive(fieldDesc[i].sig)) {        mv=cw.visitMethod(ACC_PUBLIC,fieldDesc[i].name,"()" + fieldDesc[i].sig,null,null);        mv.visitCode();        mv.visitFieldInsn(GETSTATIC,implClassName,"unsafe","Lsun/misc/Unsafe;");        mv.visitVarInsn(ALOAD,0);        mv.visitFieldInsn(GETFIELD,implClassName,"location","Lcom/ibm/layout/Location;");        mv.visitMethodInsn(INVOKEVIRTUAL,"com/ibm/layout/Location","getData","()[B",itf);        mv.visitVarInsn(ALOAD,0);        mv.visitFieldInsn(GETFIELD,implClassName,"location","Lcom/ibm/layout/Location;");        mv.visitMethodInsn(INVOKEVIRTUAL,"com/ibm/layout/Location","getOffset","()J",itf);        mv.visitLdcInsn(fieldDesc[i].offset);        mv.visitInsn(LADD);        mv.visitMethodInsn(INVOKEVIRTUAL,"sun/misc/Unsafe","get" + ImplHelper.fieldSig2MethodType(fieldDesc[i].sig),"(Ljava/lang/Object;J)" + fieldDesc[i].sig,itf);        if (fieldDesc[i].sig == "D") {          mv.visitInsn(DRETURN);        } else         if (fieldDesc[i].sig == "J") {          mv.visitInsn(LRETURN);        } else         if (fieldDesc[i].sig == "F") {          mv.visitInsn(FRETURN);        } else {          mv.visitInsn(IRETURN);        }        mv.visitMaxs(6,1);        mv.visitEnd();      } else       if (fieldDesc[i].repeatCountMember != null) {{          isVariableLengthLayout=true;          ImplHelper.FieldDesc repeatCountField=ImplHelper.findField(fieldDesc[i].repeatCountMember,fieldDesc);          mv=cw.visitMethod(ACC_PUBLIC,fieldDesc[i].name,"()" + fieldDesc[i].sig,"()" + fieldDesc[i].elementImpl,null);          mv.visitCode();          if ("" != fieldDesc[i].elementImpl) {            mv.visitTypeInsn(NEW,fieldDesc[i].elementImpl);            mv.visitInsn(DUP);            mv.visitMethodInsn(INVOKESPECIAL,fieldDesc[i].elementImpl,"<init>","()V",false);            mv.visitVarInsn(ASTORE,1);            mv.visitTypeInsn(NEW,fieldDesc[i].impl);            mv.visitInsn(DUP);            mv.visitVarInsn(ALOAD,0);            mv.visitMethodInsn(INVOKEVIRTUAL,implClassName,fieldDesc[i].repeatCountMember,"()" + repeatCountField.sig,false);            if (!repeatCountField.sig.equals("J")) {              mv.visitInsn(I2L);            }            mv.visitVarInsn(ALOAD,1);            mv.visitMethodInsn(INVOKEVIRTUAL,fieldDesc[i].elementImpl,"sizeof","()J",false);            mv.visitMethodInsn(INVOKESPECIAL,fieldDesc[i].impl,"<init>","(JJ)V",false);            mv.visitVarInsn(ASTORE,2);            mv.visitTypeInsn(NEW,"com/ibm/layout/Location");            mv.visitInsn(DUP);            mv.visitVarInsn(ALOAD,0);            mv.visitFieldInsn(GETFIELD,implClassName,"location","Lcom/ibm/layout/Location;");            mv.visitLdcInsn(fieldDesc[i].offset);            mv.visitMethodInsn(INVOKESPECIAL,"com/ibm/layout/Location","<init>","(Lcom/ibm/layout/Location;J)V",false);            mv.visitVarInsn(ASTORE,3);            mv.visitVarInsn(ALOAD,2);            mv.visitVarInsn(ALOAD,3);            mv.visitMethodInsn(INVOKEINTERFACE,"com/ibm/layout/VLArray","bindLocation","(Lcom/ibm/layout/Location;)V",true);            mv.visitVarInsn(ALOAD,2);            mv.visitInsn(ARETURN);            mv.visitMaxs(6,4);            mv.visitEnd();          } else {            throw new RuntimeException("primitive VLAs are unsupported");          }{            mv=cw.visitMethod(ACC_PUBLIC,"bindLocation","(Lcom/ibm/layout/Location;" + repeatCountField.sig + ")V",null,new String[]{"java/lang/UnsupportedOperationException"});            mv.visitCode();            mv.visitVarInsn(ALOAD,1);            mv.visitVarInsn(ALOAD,0);            mv.visitMethodInsn(INVOKEVIRTUAL,implClassName,"sizeof","()J",false);            mv.visitMethodInsn(INVOKEVIRTUAL,"com/ibm/layout/Location","checkDataFits","(J)Z",false);            Label l0=new Label();            mv.visitJumpInsn(IFEQ,l0);            mv.visitVarInsn(ALOAD,0);            mv.visitVarInsn(ALOAD,1);            mv.visitFieldInsn(PUTFIELD,implClassName,"location","Lcom/ibm/layout/Location;");            mv.visitLabel(l0);            mv.visitFrame(Opcodes.F_SAME,0,null,0,null);            mv.visitVarInsn(ALOAD,0);            if (repeatCountField.sig.equals("J")) {              mv.visitVarInsn(LLOAD,2);            } else {              mv.visitVarInsn(ILOAD,2);            }            mv.visitMethodInsn(INVOKEVIRTUAL,implClassName,fieldDesc[i].repeatCountMember,"(" + repeatCountField.sig + ")V",false);            mv.visitInsn(RETURN);            mv.visitMaxs(3,3);            mv.visitEnd();          }        }      } else       if (fieldDesc[i].dims == null) {        mv=cw.visitMethod(ACC_PUBLIC,fieldDesc[i].name,"()" + fieldDesc[i].sig,null,null);        mv.visitCode();        mv.visitTypeInsn(NEW,ImplHelper.getImplClassName(fieldDesc[i].rawType));        mv.visitInsn(DUP);        mv.visitMethodInsn(INVOKESPECIAL,ImplHelper.getImplClassName(fieldDesc[i].rawType),"<init>","()V",itf);        mv.visitVarInsn(ASTORE,1);        mv.visitTypeInsn(NEW,"com/ibm/layout/Location");        mv.visitInsn(DUP);        mv.visitVarInsn(ALOAD,0);        mv.visitFieldInsn(GETFIELD,this.implClassName,"location","Lcom/ibm/layout/Location;");        mv.visitLdcInsn(fieldDesc[i].offset);        mv.visitMethodInsn(INVOKESPECIAL,"com/ibm/layout/Location","<init>","(Lcom/ibm/layout/Location;J)V",itf);        mv.visitVarInsn(ASTORE,2);        mv.visitVarInsn(ALOAD,1);        mv.visitVarInsn(ALOAD,2);        mv.visitMethodInsn(INVOKEVIRTUAL,ImplHelper.getImplClassName(fieldDesc[i].rawType),"bindLocation","(Lcom/ibm/layout/Location;)V",itf);        mv.visitVarInsn(ALOAD,1);        mv.visitInsn(ARETURN);        mv.visitMaxs(5,3);        mv.visitEnd();      } else       if (fieldDesc[i].dims.length == 1) {        mv=cw.visitMethod(ACC_PUBLIC,fieldDesc[i].name,"()" + fieldDesc[i].sig,"()" + fieldDesc[i].sigGeneric,null);        mv.visitCode();        if ("" != fieldDesc[i].elementImpl) {          mv.visitTypeInsn(NEW,fieldDesc[i].elementImpl);          mv.visitInsn(DUP);          mv.visitMethodInsn(INVOKESPECIAL,fieldDesc[i].elementImpl,"<init>","()V",itf);          mv.visitVarInsn(ASTORE,1);          mv.visitTypeInsn(NEW,fieldDesc[i].impl);          mv.visitInsn(DUP);          mv.visitLdcInsn(fieldDesc[i].dims[0]);          mv.visitVarInsn(ALOAD,1);          mv.visitMethodInsn(INVOKEVIRTUAL,fieldDesc[i].elementImpl,"sizeof","()J",itf);          mv.visitMethodInsn(INVOKESPECIAL,fieldDesc[i].impl,"<init>","(JJ)V",itf);          mv.visitVarInsn(ASTORE,2);          mv.visitTypeInsn(NEW,"com/ibm/layout/Location");          mv.visitInsn(DUP);          mv.visitVarInsn(ALOAD,0);          mv.visitFieldInsn(GETFIELD,this.implClassName,"location","Lcom/ibm/layout/Location;");          mv.visitLdcInsn(fieldDesc[i].offset);          mv.visitMethodInsn(INVOKESPECIAL,"com/ibm/layout/Location","<init>","(Lcom/ibm/layout/Location;J)V",itf);          mv.visitVarInsn(ASTORE,3);          mv.visitVarInsn(ALOAD,2);          mv.visitVarInsn(ALOAD,3);          mv.visitMethodInsn(INVOKEVIRTUAL,fieldDesc[i].impl,"bindLocation","(Lcom/ibm/layout/Location;)V",itf);          mv.visitVarInsn(ALOAD,2);          mv.visitInsn(ARETURN);          mv.visitMaxs(6,4);          mv.visitEnd();        } else {          mv.visitTypeInsn(NEW,fieldDesc[i].impl);          mv.visitInsn(DUP);          mv.visitLdcInsn(fieldDesc[i].dims[0]);          mv.visitMethodInsn(INVOKESPECIAL,fieldDesc[i].impl,"<init>","(J)V",itf);          mv.visitVarInsn(ASTORE,1);          mv.visitTypeInsn(NEW,"com/ibm/layout/Location");          mv.visitInsn(DUP);          mv.visitVarInsn(ALOAD,0);          mv.visitFieldInsn(GETFIELD,this.implClassName,"location","Lcom/ibm/layout/Location;");          mv.visitLdcInsn(fieldDesc[i].offset);          mv.visitMethodInsn(INVOKESPECIAL,"com/ibm/layout/Location","<init>","(Lcom/ibm/layout/Location;J)V",itf);          mv.visitVarInsn(ASTORE,2);          mv.visitVarInsn(ALOAD,1);          mv.visitVarInsn(ALOAD,2);          mv.visitMethodInsn(INVOKEVIRTUAL,fieldDesc[i].impl,"bindLocation","(Lcom/ibm/layout/Location;)V",itf);          mv.visitVarInsn(ALOAD,1);          mv.visitInsn(ARETURN);          mv.visitMaxs(5,3);          mv.visitEnd();        }      } else       if (fieldDesc[i].dims.length == 2) {        if ("" != fieldDesc[i].elementImpl) {          mv=cw.visitMethod(ACC_PUBLIC,fieldDesc[i].name,"()" + fieldDesc[i].sig,"()" + fieldDesc[i].sigGeneric,null);          mv.visitCode();          mv.visitTypeInsn(NEW,fieldDesc[i].elementImpl);          mv.visitInsn(DUP);          mv.visitMethodInsn(INVOKESPECIAL,fieldDesc[i].elementImpl,"<init>","()V",itf);          mv.visitVarInsn(ASTORE,1);          mv.visitTypeInsn(NEW,fieldDesc[i].impl);          mv.visitInsn(DUP);          mv.visitLdcInsn(fieldDesc[i].dims[0]);          mv.visitLdcInsn(fieldDesc[i].dims[1]);          mv.visitVarInsn(ALOAD,1);          mv.visitMethodInsn(INVOKEVIRTUAL,fieldDesc[i].elementImpl,"sizeof","()J",itf);          mv.visitMethodInsn(INVOKESPECIAL,fieldDesc[i].impl,"<init>","(JJJ)V",itf);          mv.visitVarInsn(ASTORE,2);          mv.visitTypeInsn(NEW,"com/ibm/layout/Location");          mv.visitInsn(DUP);          mv.visitVarInsn(ALOAD,0);          mv.visitFieldInsn(GETFIELD,this.implClassName,"location","Lcom/ibm/layout/Location;");          mv.visitLdcInsn(fieldDesc[i].offset);          mv.visitMethodInsn(INVOKESPECIAL,"com/ibm/layout/Location","<init>","(Lcom/ibm/layout/Location;J)V",itf);          mv.visitVarInsn(ASTORE,3);          mv.visitVarInsn(ALOAD,2);          mv.visitVarInsn(ALOAD,3);          mv.visitMethodInsn(INVOKEVIRTUAL,fieldDesc[i].impl,"bindLocation","(Lcom/ibm/layout/Location;)V",itf);          mv.visitVarInsn(ALOAD,2);          mv.visitInsn(ARETURN);          mv.visitMaxs(8,4);          mv.visitEnd();        } else {          mv=cw.visitMethod(ACC_PUBLIC,fieldDesc[i].name,"()" + fieldDesc[i].sig,"()" + fieldDesc[i].sigGeneric,null);          mv.visitCode();          mv.visitTypeInsn(NEW,fieldDesc[i].impl);          mv.visitInsn(DUP);          mv.visitLdcInsn(fieldDesc[i].dims[0]);          mv.visitLdcInsn(fieldDesc[i].dims[1]);          mv.visitMethodInsn(INVOKESPECIAL,fieldDesc[i].impl,"<init>","(JJ)V",itf);          mv.visitVarInsn(ASTORE,1);          mv.visitTypeInsn(NEW,"com/ibm/layout/Location");          mv.visitInsn(DUP);          mv.visitVarInsn(ALOAD,0);          mv.visitFieldInsn(GETFIELD,this.implClassName,"location","Lcom/ibm/layout/Location;");          mv.visitLdcInsn(fieldDesc[i].offset);          mv.visitMethodInsn(INVOKESPECIAL,"com/ibm/layout/Location","<init>","(Lcom/ibm/layout/Location;J)V",itf);          mv.visitVarInsn(ASTORE,2);          mv.visitVarInsn(ALOAD,1);          mv.visitVarInsn(ALOAD,2);          mv.visitMethodInsn(INVOKEVIRTUAL,fieldDesc[i].impl,"bindLocation","(Lcom/ibm/layout/Location;)V",itf);          mv.visitVarInsn(ALOAD,1);          mv.visitInsn(ARETURN);          mv.visitMaxs(6,3);          mv.visitEnd();        }      }    }  }  for (int i=0; i < fieldDesc.length; i++) {    if (ImplHelper.isTypePrimitive(fieldDesc[i].sig)) {      mv=cw.visitMethod(ACC_PUBLIC,fieldDesc[i].name,"(" + fieldDesc[i].sig + ")V",null,null);      mv.visitCode();      mv.visitFieldInsn(GETSTATIC,implClassName,"unsafe","Lsun/misc/Unsafe;");      mv.visitVarInsn(ALOAD,0);      mv.visitFieldInsn(GETFIELD,implClassName,"location","Lcom/ibm/layout/Location;");      mv.visitMethodInsn(INVOKEVIRTUAL,"com/ibm/layout/Location","getData","()[B",itf);      mv.visitVarInsn(ALOAD,0);      mv.visitFieldInsn(GETFIELD,implClassName,"location","Lcom/ibm/layout/Location;");      mv.visitMethodInsn(INVOKEVIRTUAL,"com/ibm/layout/Location","getOffset","()J",itf);      mv.visitLdcInsn(fieldDesc[i].offset);      mv.visitInsn(LADD);      if (fieldDesc[i].sig == "D") {        mv.visitVarInsn(DLOAD,1);      } else       if (fieldDesc[i].sig == "J") {        mv.visitVarInsn(LLOAD,1);      } else       if (fieldDesc[i].sig == "F") {        mv.visitVarInsn(FLOAD,1);      } else {        mv.visitVarInsn(ILOAD,1);      }      mv.visitMethodInsn(INVOKEVIRTUAL,"sun/misc/Unsafe","put" + ImplHelper.fieldSig2MethodType(fieldDesc[i].sig),"(Ljava/lang/Object;J" + fieldDesc[i].sig + ")V",itf);      mv.visitInsn(RETURN);      mv.visitMaxs(6,2);      mv.visitEnd();    }  }{    mv=cw.visitMethod(ACC_PUBLIC,"copyFrom","(L" + implClassName + ";)V",null,null);    mv.visitCode();    mv.visitVarInsn(ALOAD,0);    mv.visitVarInsn(ALOAD,1);    mv.visitMethodInsn(INVOKESPECIAL,implClassName,"copyFrom","(Lcom/ibm/layout/Layout;)V",itf);    mv.visitInsn(RETURN);    mv.visitMaxs(2,2);    mv.visitEnd();  }{    mv=cw.visitMethod(ACC_PUBLIC,"toString","()Ljava/lang/String;",null,null);    mv.visitCode();    mv.visitTypeInsn(NEW,"java/lang/StringBuilder");    mv.visitInsn(DUP);    mv.visitLdcInsn("(");    mv.visitMethodInsn(INVOKESPECIAL,"java/lang/StringBuilder","<init>","(Ljava/lang/String;)V",false);    for (int i=0; i < fieldDesc.length; i++) {      if (ImplHelper.isTypePrimitive(fieldDesc[i].sig)) {        mv.visitLdcInsn(fieldDesc[i].name + ": ");        mv.visitMethodInsn(INVOKEVIRTUAL,"java/lang/StringBuilder","append","(Ljava/lang/String;)Ljava/lang/StringBuilder;",false);        mv.visitVarInsn(ALOAD,0);        mv.visitMethodInsn(INVOKEVIRTUAL,implClassName,fieldDesc[i].name,"()" + fieldDesc[i].sig,false);        mv.visitMethodInsn(INVOKEVIRTUAL,"java/lang/StringBuilder","append","(" + ImplHelper.getByteCodeSig(fieldDesc[i].sig) + ")Ljava/lang/StringBuilder;",false);        if (i < (fieldDesc.length - 1)) {          mv.visitLdcInsn(", ");          mv.visitMethodInsn(INVOKEVIRTUAL,"java/lang/StringBuilder","append","(Ljava/lang/String;)Ljava/lang/StringBuilder;",false);        }      } else {        mv.visitVarInsn(ALOAD,0);        mv.visitMethodInsn(INVOKEVIRTUAL,implClassName,fieldDesc[i].name,"()" + fieldDesc[i].sig,false);        mv.visitMethodInsn(INVOKEVIRTUAL,"java/lang/Object","toString","()Ljava/lang/String;",false);        mv.visitMethodInsn(INVOKEVIRTUAL,"java/lang/StringBuilder","append","(Ljava/lang/String;)Ljava/lang/StringBuilder;",false);      }    }    mv.visitLdcInsn(")");    mv.visitMethodInsn(INVOKEVIRTUAL,"java/lang/StringBuilder","append","(Ljava/lang/String;)Ljava/lang/StringBuilder;",false);    mv.visitMethodInsn(INVOKEVIRTUAL,"java/lang/StringBuilder","toString","()Ljava/lang/String;",false);    mv.visitInsn(ARETURN);    mv.visitMaxs(3,1);    mv.visitEnd();  }  ImplHelper.genLayoutTypeImpl(cw,mv,fv,implClassName,isVariableLengthLayout);  ImplHelper.getLayoutImpl(cw,mv,implClassName);  cw.visitEnd();  return cw.toByteArray();}  }
class C{  public static double[][] mult(double[][] mat1,double[][] mat2){  int m=mat1.length;  int n=mat1[0].length;  int o=mat2[0].length;  double[][] matres=new double[m][];  for (int i=0; i < m; ++i) {    matres[i]=new double[o];    for (int j=0; j < o; ++j) {      matres[i][j]=0.0f;      for (int k=0; k < n; ++k) {        matres[i][j]+=mat1[i][k] * mat2[k][j];      }    }  }  return (matres);}  }
class C{  public void putAll(Map<? extends String,? extends Object> t){  context.getBindings(ENGINE_SCOPE).putAll(t);}  }
class C{  public static Intent createExplicitFromImplicitIntent(Context context,Intent implicitIntent){  PackageManager pm=context.getPackageManager();  List<ResolveInfo> resolveInfo=pm.queryIntentServices(implicitIntent,0);  if (resolveInfo == null || resolveInfo.size() != 1) {    return null;  }  ResolveInfo serviceInfo=resolveInfo.get(0);  String packageName=serviceInfo.serviceInfo.packageName;  String className=serviceInfo.serviceInfo.name;  ComponentName component=new ComponentName(packageName,className);  Intent explicitIntent=new Intent(implicitIntent);  explicitIntent.setComponent(component);  return explicitIntent;}  }
class C{  public SVGOMStyleElement(String prefix,AbstractDocument owner){  super(prefix,owner);}  }
class C{  public Millisecond(Date time,TimeZone zone,Locale locale){  Calendar calendar=Calendar.getInstance(zone,locale);  calendar.setTime(time);  this.millisecond=calendar.get(Calendar.MILLISECOND);  this.second=(byte)calendar.get(Calendar.SECOND);  this.minute=(byte)calendar.get(Calendar.MINUTE);  this.hour=(byte)calendar.get(Calendar.HOUR_OF_DAY);  this.day=new Day(time,zone,locale);  peg(calendar);}  }
class C{  public static String build(byte[] bytes,MsgType type){  return build(bytes,bytes.length,type);}  }
class C{  public ReadOnlyValuesRaba(final byte[][] a){  this(0,a.length,a.length,a);}  }
class C{  protected void ensureBounds(int row,int col){  ensureRow(row);  ensureColumn(col);}  }
class C{  protected final boolean hasPropertyChangeListeners(String propertyName){  return pcs.hasListeners(propertyName);}  }
class C{  public void insertContact(Contact contact){  ContentValues values=new ContentValues();  values.put("first_name",contact.getFirstName());  values.put("last_name",contact.getLastName());  values.put("phone",contact.getPhone());  values.put("email",contact.getEmail());  database.insert("Contact",null,values);}  }
class C{  public void createPackageContents(){  if (isCreated)   return;  isCreated=true;  entityEClass=createEClass(ENTITY);  createEReference(entityEClass,ENTITY__SUPER_TYPE);  createEReference(entityEClass,ENTITY__PROPERTIES);  propertyEClass=createEClass(PROPERTY);  createEReference(propertyEClass,PROPERTY__PRESENCE);  createEAttribute(propertyEClass,PROPERTY__MULTIPLICITY);  createEAttribute(propertyEClass,PROPERTY__NAME);  createEAttribute(propertyEClass,PROPERTY__DESCRIPTION);  createEReference(propertyEClass,PROPERTY__CONSTRAINT_RULE);  createEReference(propertyEClass,PROPERTY__TYPE);  createEReference(propertyEClass,PROPERTY__PROPERTY_ATTRIBUTES);  primitivePropertyTypeEClass=createEClass(PRIMITIVE_PROPERTY_TYPE);  createEAttribute(primitivePropertyTypeEClass,PRIMITIVE_PROPERTY_TYPE__TYPE);  objectPropertyTypeEClass=createEClass(OBJECT_PROPERTY_TYPE);  createEReference(objectPropertyTypeEClass,OBJECT_PROPERTY_TYPE__TYPE);  presenceEClass=createEClass(PRESENCE);  createEAttribute(presenceEClass,PRESENCE__MANDATORY);  constraintEClass=createEClass(CONSTRAINT);  createEAttribute(constraintEClass,CONSTRAINT__TYPE);  createEAttribute(constraintEClass,CONSTRAINT__CONSTRAINT_VALUES);  enumEClass=createEClass(ENUM);  createEReference(enumEClass,ENUM__ENUMS);  enumLiteralEClass=createEClass(ENUM_LITERAL);  createEAttribute(enumLiteralEClass,ENUM_LITERAL__NAME);  createEAttribute(enumLiteralEClass,ENUM_LITERAL__DESCRIPTION);  typeEClass=createEClass(TYPE);  propertyTypeEClass=createEClass(PROPERTY_TYPE);  propertyAttributeEClass=createEClass(PROPERTY_ATTRIBUTE);  booleanPropertyAttributeEClass=createEClass(BOOLEAN_PROPERTY_ATTRIBUTE);  createEAttribute(booleanPropertyAttributeEClass,BOOLEAN_PROPERTY_ATTRIBUTE__TYPE);  createEAttribute(booleanPropertyAttributeEClass,BOOLEAN_PROPERTY_ATTRIBUTE__VALUE);  enumLiteralPropertyAttributeEClass=createEClass(ENUM_LITERAL_PROPERTY_ATTRIBUTE);  createEAttribute(enumLiteralPropertyAttributeEClass,ENUM_LITERAL_PROPERTY_ATTRIBUTE__TYPE);  createEReference(enumLiteralPropertyAttributeEClass,ENUM_LITERAL_PROPERTY_ATTRIBUTE__VALUE);  constraintRuleEClass=createEClass(CONSTRAINT_RULE);  createEReference(constraintRuleEClass,CONSTRAINT_RULE__CONSTRAINTS);  complexPrimitivePropertyTypeEClass=createEClass(COMPLEX_PRIMITIVE_PROPERTY_TYPE);  dictionaryPropertyTypeEClass=createEClass(DICTIONARY_PROPERTY_TYPE);  createEReference(dictionaryPropertyTypeEClass,DICTIONARY_PROPERTY_TYPE__KEY_TYPE);  createEReference(dictionaryPropertyTypeEClass,DICTIONARY_PROPERTY_TYPE__VALUE_TYPE);  primitiveTypeEEnum=createEEnum(PRIMITIVE_TYPE);  constraintIntervalTypeEEnum=createEEnum(CONSTRAINT_INTERVAL_TYPE);  booleanPropertyAttributeTypeEEnum=createEEnum(BOOLEAN_PROPERTY_ATTRIBUTE_TYPE);  enumLiteralPropertyAttributeTypeEEnum=createEEnum(ENUM_LITERAL_PROPERTY_ATTRIBUTE_TYPE);}  }
class C{  public void addPortsToAlreadyAllocatedContext(DbClient dbClient,NetworkLite net,Set<StoragePort> previouslyAllocatedPorts){  if (previouslyAllocatedPorts == null || previouslyAllocatedPorts.isEmpty()) {    return;  }  for (  StoragePort sp : previouslyAllocatedPorts) {    StorageHADomain haDomain=null;    if (null != sp.getStorageHADomain()) {      haDomain=dbClient.queryObject(StorageHADomain.class,sp.getStorageHADomain());    }    StorageSystem storageSystem=dbClient.queryObject(StorageSystem.class,sp.getStorageDevice());    String switchName=getSwitchName(sp,dbClient);    if (context == null) {      context=new PortAllocationContext(net,storageSystem.getNativeGuid());    }    context.addPortToAlreadyAllocatedContext(sp,haDomain,StorageSystem.Type.valueOf(storageSystem.getSystemType()),switchName);  }}  }
class C{  public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  sessionContext.checkPermission(Right.InstructionalOfferings);  BackTracker.markForBack(request,null,null,false,true);  sessionContext.setAttribute("callingPage","instructionalOfferingShowSearch");  InstructionalOfferingListForm frm=(InstructionalOfferingListForm)form;  Object sa=sessionContext.getAttribute(SessionAttribute.OfferingsSubjectArea);  Object cn=sessionContext.getAttribute(SessionAttribute.OfferingsCourseNumber);  if (Constants.ALL_OPTION_VALUE.equals(sa))   sa=null;  if ((sa == null || sa.toString().trim().isEmpty()) && (cn == null || cn.toString().trim().isEmpty())) {    sa=sessionContext.getAttribute(SessionAttribute.ClassesSubjectAreas);    cn=sessionContext.getAttribute(SessionAttribute.ClassesCourseNumber);    if (sa != null) {      String saStr=sa.toString();      if (saStr.indexOf(",") > 0)       sa=saStr.substring(0,saStr.indexOf(","));    }  }  InstructionalOfferingSearchAction.setupInstrOffrListSpecificFormFilters(sessionContext,frm);  if (!sessionContext.hasPermission(Right.Examinations))   frm.setExams(null);  if (sa != null) {    try {      StringBuffer ids=new StringBuffer();      StringBuffer names=new StringBuffer();      StringBuffer subjIds=new StringBuffer();      for (      String id : sa.toString().split(",")) {        if (names.length() > 0) {          names.append(",");          subjIds.append(",");        }        ids.append("&subjectAreaIds=" + id);        subjIds.append(id);        names.append(((new SubjectAreaDAO()).get(new Long(id))).getSubjectAreaAbbreviation());      }      String courseNbr="";      if (cn != null && !cn.toString().isEmpty())       courseNbr=cn.toString();      Debug.debug("Subject Areas: " + subjIds);      Debug.debug("Course Number: " + courseNbr);      frm.setSubjectAreaIds(sa.toString().split(","));      frm.setCourseNbr(courseNbr);      if (doSearch(request,frm)) {        BackTracker.markForBack(request,"instructionalOfferingSearch.do?doit=Search&loadInstrFilter=1" + ids + "&courseNbr="+ frm.getCourseNbr(),"Instructional Offerings (" + names + (frm.getCourseNbr() == null || frm.getCourseNbr().length() == 0 ? "" : " " + frm.getCourseNbr())+ ")",true,true);        return mapping.findForward("showInstructionalOfferingList");      }    } catch (    NumberFormatException nfe) {      Debug.error("Subject Area Id session attribute is corrupted. Resetting ... ");      sessionContext.removeAttribute(SessionAttribute.OfferingsSubjectArea);      sessionContext.removeAttribute(SessionAttribute.OfferingsCourseNumber);    }  } else {    frm.setSubjectAreas(SubjectArea.getUserSubjectAreas(sessionContext.getUser()));    frm.setInstructionalOfferings(null);    Set s=(Set)frm.getSubjectAreas();    if (s.size() == 1) {      Debug.debug("Exactly 1 subject area found ... ");      frm.setSubjectAreaIds(new String[]{((SubjectArea)s.iterator().next()).getUniqueId().toString()});      if (doSearch(request,frm)) {        BackTracker.markForBack(request,"instructionalOfferingSearch.do?doit=Search&loadInstrFilter=1&subjectAreaIds=" + frm.getSubjectAreaIds()[0] + "&courseNbr="+ frm.getCourseNbr(),"Instructional Offerings (" + (frm.getSubjectAreaAbbv() == null ? ((new SubjectAreaDAO()).get(new Long(frm.getSubjectAreaIds()[0]))).getSubjectAreaAbbreviation() : frm.getSubjectAreaAbbv()) + (frm.getCourseNbr() == null || frm.getCourseNbr().length() == 0 ? "" : " " + frm.getCourseNbr())+ ")",true,true);        return mapping.findForward("showInstructionalOfferingList");      }    }  }  return mapping.findForward("showInstructionalOfferingSearch");}  }
class C{  public static boolean isJellybeanOrLater(){  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN;}  }
class C{  public static int median(ArrayModifiableDBIDs data,Comparator<? super DBIDRef> comparator){  return median(data,comparator,0,data.size());}  }
class C{  private boolean isSeleccionado(UDocEnUiDepositoVO udoc,String[] seleccionados,int[] nuevasPosiciones){  for (int i=0; i < seleccionados.length; i++) {    if (comprobarElemento(udoc,seleccionados[i],nuevasPosiciones[i])) {      return true;    }  }  return false;}  }
class C{  public GridCacheQueryRequest(int cacheId,long id,String cacheName,int pageSize,boolean incBackups,boolean fields,boolean all,boolean keepBinary,UUID subjId,int taskHash,AffinityTopologyVersion topVer,boolean addDepInfo){  this.cacheId=cacheId;  this.id=id;  this.cacheName=cacheName;  this.pageSize=pageSize;  this.incBackups=incBackups;  this.fields=fields;  this.all=all;  this.keepPortable=keepBinary;  this.subjId=subjId;  this.taskHash=taskHash;  this.topVer=topVer;  this.addDepInfo=addDepInfo;}  }
class C{  void doReps(ObjectOutputStream oout,ObjectInputStream oin,StreamBuffer sbuf,String[] strs,int nbatches,int ncycles) throws Exception {  for (int i=0; i < nbatches; i++) {    sbuf.reset();    oout.reset();    for (int j=0; j < ncycles; j++) {      oout.writeObject(strs[j]);    }    oout.flush();    for (int j=0; j < ncycles; j++) {      oin.readObject();    }  }}  }
class C{  protected void addNotAvailableBusinessObjectDataStatuses(List<BusinessObjectDataStatus> notAvailableStatuses,BusinessObjectFormatKey businessObjectFormatKey,List<List<String>> matchedAvailablePartitionFilters,List<List<String>> availablePartitions,List<String> storageNames){  List<StorageUnitEntity> matchedNotAvailableStorageUnitEntities=storageUnitDao.getStorageUnitsByPartitionFiltersAndStorages(businessObjectFormatKey,matchedAvailablePartitionFilters,null,null,storageNames,null,StoragePlatformEntity.GLACIER,false);  matchedNotAvailableStorageUnitEntities=storageUnitHelper.excludeBusinessObjectDataStatus(matchedNotAvailableStorageUnitEntities,BusinessObjectDataStatusEntity.DELETED);  matchedNotAvailableStorageUnitEntities=storageUnitHelper.excludePartitions(matchedNotAvailableStorageUnitEntities,availablePartitions);  if (!CollectionUtils.isEmpty(matchedNotAvailableStorageUnitEntities)) {    List<StorageUnitEntity> matchedArchivedStorageUnitEntities=storageUnitDao.getStorageUnitsByPartitionFiltersAndStorages(businessObjectFormatKey,matchedAvailablePartitionFilters,null,null,null,StoragePlatformEntity.GLACIER,null,true);    Set<BusinessObjectDataEntity> matchedArchivedBusinessObjectDataEntities=storageUnitHelper.getBusinessObjectDataEntitiesSet(matchedArchivedStorageUnitEntities);    addNotAvailableBusinessObjectDataStatuses(notAvailableStatuses,matchedNotAvailableStorageUnitEntities,matchedArchivedBusinessObjectDataEntities);  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private IntMap(Item[] entries){  _entries=new Item[entries.length];  _mask=_entries.length - 1;  for (  Item item : entries) {    for (; item != null; item=item._next) {      put(item._key,item._value);    }  }}  }
class C{  public void testFloatReverse() throws IOException {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  doc.add(new FloatPoint("value",30.1f));  doc.add(new StoredField("value",30.1f));  writer.addDocument(doc);  doc=new Document();  doc.add(new FloatPoint("value",-1.3f));  doc.add(new StoredField("value",-1.3f));  writer.addDocument(doc);  doc=new Document();  doc.add(new FloatPoint("value",4.2f));  doc.add(new StoredField("value",4.2f));  writer.addDocument(doc);  IndexReader ir=UninvertingReader.wrap(writer.getReader(),Collections.singletonMap("value",Type.FLOAT_POINT));  writer.close();  IndexSearcher searcher=newSearcher(ir,false);  Sort sort=new Sort(new SortField("value",SortField.Type.FLOAT,true));  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);  assertEquals(3,td.totalHits);  assertEquals("30.1",searcher.doc(td.scoreDocs[0].doc).get("value"));  assertEquals("4.2",searcher.doc(td.scoreDocs[1].doc).get("value"));  assertEquals("-1.3",searcher.doc(td.scoreDocs[2].doc).get("value"));  TestUtil.checkReader(ir);  ir.close();  dir.close();}  }
class C{  public SparseObjectMatrix1D(Object[] values){  this(values.length);  assign(values);}  }
class C{  public static boolean isXML11ValidName(String name){  int length=name.length();  if (length == 0)   return false;  int i=1;  char ch=name.charAt(0);  if (!isXML11NameStart(ch)) {    if (length > 1 && isXML11NameHighSurrogate(ch)) {      char ch2=name.charAt(1);      if (!XMLChar.isLowSurrogate(ch2) || !isXML11NameStart(XMLChar.supplemental(ch,ch2))) {        return false;      }      i=2;    } else {      return false;    }  }  while (i < length) {    ch=name.charAt(i);    if (!isXML11Name(ch)) {      if (++i < length && isXML11NameHighSurrogate(ch)) {        char ch2=name.charAt(i);        if (!XMLChar.isLowSurrogate(ch2) || !isXML11Name(XMLChar.supplemental(ch,ch2))) {          return false;        }      } else {        return false;      }    }    ++i;  }  return true;}  }
class C{  public Subject s(){  return s;}  }
class C{  @DSComment("View state info") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:50.303 -0500",hash_original_method="3CD3FFF6959365D82FD80FF1FA237F64",hash_generated_method="E80F12D445B25F55B6F9568407812C4E") public boolean isFocused(){  return getBooleanProperty(PROPERTY_FOCUSED);}  }
class C{  public Object clone(){  Digraph g2=new Digraph("Clone_of_[" + this.graphName + "]",this.nNodes);  for (int i=0; i < this.nNodes; i++) {    g2.nodeNames[i]=this.nodeNames[i];    for (int j=0; j < i; j++) {      g2.setEdge(i,j,this.getEdge(i,j));    }  }  return g2;}  }
class C{  public ForumPostConfig update(ForumPostConfig config){  config.addCredentials(this);  String xml=POST(this.url + "/update-forum-post",config.toXML());  Element root=parse(xml);  if (root == null) {    return null;  }  try {    config=new ForumPostConfig();    config.parseXML(root);    return config;  } catch (  Exception exception) {    this.exception=SDKException.parseFailure(exception);    throw this.exception;  }}  }
class C{  public boolean hasParameters(){  return this.values.length > 0;}  }
class C{  public Vector3i mul(int x,int y,int z){  this.x*=x;  this.y*=y;  this.z*=z;  return this;}  }
class C{  public static String toUpperCase(String string){  boolean changed=false;  char[] chars=string.toCharArray();  for (int i=0; i != chars.length; i++) {    char ch=chars[i];    if ('a' <= ch && 'z' >= ch) {      changed=true;      chars[i]=(char)(ch - 'a' + 'A');    }  }  if (changed) {    return new String(chars);  }  return string;}  }
class C{  public static LazySetX<Long> rangeLong(long start,long end){  return fromStreamS(ReactiveSeq.rangeLong(start,end));}  }
class C{  public void e(String log,Throwable tr){  if (debug) {    String line=getFunctionName();    Log.e(tag,"{Thread:" + Thread.currentThread().getName() + "}"+ "["+ name+ line+ ":] "+ log+ "\n",tr);  }}  }
class C{  private boolean isAsyncThrottle(){  return isKeepaliveAsyncEnabled();}  }
class C{  public TranslationItem addTranslation(String text){  if (data == null)   data=new Data();  TranslationItem newItem=new TranslationItem(text);  data.translations.add(newItem);  return newItem;}  }
class C{  public ParameterizedTypeRef createParameterizedTypeRef(){  ParameterizedTypeRefImpl parameterizedTypeRef=new ParameterizedTypeRefImpl();  return parameterizedTypeRef;}  }
class C{  public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("PriorityParser.parse");  Priority priority=new Priority();  try {    headerName(TokenTypes.PRIORITY);    priority.setHeaderName(SIPHeaderNames.PRIORITY);    this.lexer.SPorHT();    priority.setPriority(this.lexer.ttokenSafe());    this.lexer.SPorHT();    this.lexer.match('\n');    return priority;  }  finally {    if (debug)     dbg_leave("PriorityParser.parse");  }}  }
class C{  public JLBHOptions throughput(int throughput,TimeUnit throughputTimeUnit){  this.throughput=throughput;  this.throughputTimeUnit=throughputTimeUnit;  return this;}  }
class C{  public IndexNameConflictException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  private boolean checkEventMethod(){  _myParentClass=parent.getClass();  try {    Method[] myMethods=_myParentClass.getDeclaredMethods();    for (int i=0; i < myMethods.length; i++) {      if (myMethods[i].getName().indexOf(_myOscProperties.eventMethod()) != -1) {        Class<?>[] myClasses=myMethods[i].getParameterTypes();        if (myClasses.length == 1) {          _myEventClass=myClasses[0];          isOscIn=((_myEventClass.toString()).indexOf("OscIn") != -1) ? true : false;          break;        }      }    }  } catch (  Throwable e) {    System.err.println(e);  }  String tMethod=_myOscProperties.eventMethod();  if (tMethod != null) {    try {      Class<?>[] tClass={_myEventClass};      _myEventMethod=_myParentClass.getDeclaredMethod(tMethod,tClass);      _myEventMethod.setAccessible(true);      return true;    } catch (    SecurityException e1) {      Logger.printWarning("OscP5.plug","### security issues in OscP5.checkEventMethod(). (this occures when running in applet mode)");    }catch (    NoSuchMethodException e1) {    }  }  if (_myEventMethod != null) {    return true;  }  return false;}  }
class C{  public void printServerStatus(){  String statusMessageString="";  if (this.isServerFlagSet(MySQLConstants.SERVER_STATUS_IN_TRANS))   statusMessageString=statusMessageString + "SERVER_STATUS_IN_TRANS | ";  if (this.isServerFlagSet(MySQLConstants.SERVER_STATUS_AUTOCOMMIT))   statusMessageString=statusMessageString + "SERVER_STATUS_AUTOCOMMIT | ";  if (this.isServerFlagSet(MySQLConstants.SERVER_MORE_RESULTS_EXISTS))   statusMessageString=statusMessageString + "SERVER_MORE_RESULTS_EXISTS | ";  if (this.isServerFlagSet(MySQLConstants.SERVER_QUERY_NO_GOOD_INDEX_USED))   statusMessageString=statusMessageString + "SERVER_QUERY_NO_GOOD_INDEX_USED | ";  if (this.isServerFlagSet(MySQLConstants.SERVER_QUERY_NO_INDEX_USED))   statusMessageString=statusMessageString + "SERVER_QUERY_NO_INDEX_USED | ";  if (this.isServerFlagSet(MySQLConstants.SERVER_STATUS_CURSOR_EXISTS))   statusMessageString=statusMessageString + "SERVER_STATUS_CURSOR_EXISTS | ";  if (this.isServerFlagSet(MySQLConstants.SERVER_STATUS_LAST_ROW_SENT))   statusMessageString=statusMessageString + "SERVER_STATUS_LAST_ROW_SENT | ";  statusMessageString=StringUtils.removeEnd(statusMessageString,"| ");  logger.debug(MessageFormat.format("Server Status= {0}",statusMessageString));}  }
class C{  private boolean queryArticle() throws SQLException {  Statement statement=this.connection.createStatement();  String query="SELECT ArticleID, FullRevisionPKs, RevisionCounter " + "FROM index_articleID_rc_ts " + "WHERE articleID > " + this.currentArticleID + " LIMIT "+ MAX_NUMBER_RESULTS;  resultArticles=statement.executeQuery(query);  if (resultArticles.next()) {    this.currentArticleID=resultArticles.getInt(1);    return (this.lastArticleID == -1) || (this.currentArticleID <= this.lastArticleID);  }  return false;}  }
class C{  @Override public void run(){  amIActive=true;  String streamsHeader=null;  String pointerHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  int i, c;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  boolean flag=false;  double flowDir=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      streamsHeader=args[i];    } else     if (i == 1) {      pointerHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    }  }  if ((streamsHeader == null) || (pointerHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster streams=new WhiteboxRaster(streamsHeader,"r");    int rows=streams.getNumberRows();    int cols=streams.getNumberColumns();    double noData=streams.getNoDataValue();    WhiteboxRaster pntr=new WhiteboxRaster(pointerHeader,"r");    if (pntr.getNumberRows() != rows || pntr.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",streamsHeader,WhiteboxRaster.DataType.INTEGER,0);    output.setPreferredPalette("qual.pal");    output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);    byte numNeighbouringStreamCells=0;    double currentID=0;    double currentValue=0;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (streams.getValue(row,col) > 0) {          numNeighbouringStreamCells=0;          for (c=0; c < 8; c++) {            x=col + dX[c];            y=row + dY[c];            if (streams.getValue(y,x) > 0 && pntr.getValue(y,x) == inflowingVals[c]) {              numNeighbouringStreamCells++;            }          }          if (numNeighbouringStreamCells == 0) {            x=col;            y=row;            currentID++;            output.setValue(y,x,currentID);            flag=true;            do {              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                if (c > 7) {                  showFeedback("An unexpected value has " + "been identified in the pointer " + "image. This tool requires a "+ "pointer grid that has been "+ "created using either the D8 "+ "or Rho8 tools.");                  return;                }                x+=dX[c];                y+=dY[c];                if (streams.getValue(y,x) <= 0) {                  flag=false;                } else {                  currentValue=output.getValue(y,x);                  if (currentValue > 0) {                    flag=false;                    break;                  }                  numNeighbouringStreamCells=0;                  int x2, y2;                  for (int d=0; d < 8; d++) {                    x2=x + dX[d];                    y2=y + dY[d];                    if (streams.getValue(y2,x2) > 0 && pntr.getValue(y2,x2) == inflowingVals[d]) {                      numNeighbouringStreamCells++;                    }                  }                  if (numNeighbouringStreamCells >= 2) {                    currentID++;                  }                  output.setValue(y,x,currentID);                }              } else {                if (streams.getValue(y,x) > 0) {                  output.setValue(y,x,currentID);                }                flag=false;              }            } while (flag);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    streams.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public HeaderGroup copy(){  HeaderGroup clone=new HeaderGroup();  clone.headers.addAll(this.headers);  return clone;}  }
class C{  private void processTag(Directory directory,int directoryType,int tagType,int offset,int tagByteCount){  int tagIdentifier=tagType | (directoryType << 8);switch (tagIdentifier) {case IptcDirectory.TAG_RECORD_VERSION:    short shortValue=(short)(((_data[offset] & 0xff) << 8) | (_data[offset + 1]) & 0xff);  directory.setInt(tagIdentifier,shortValue);return;case IptcDirectory.TAG_URGENCY:directory.setInt(tagIdentifier,_data[offset]);return;case IptcDirectory.TAG_RELEASE_DATE:case IptcDirectory.TAG_DATE_CREATED:if (tagByteCount >= 8) {String dateStr=new String(_data,offset,tagByteCount);try {int year=Integer.parseInt(dateStr.substring(0,4));int month=Integer.parseInt(dateStr.substring(4,6)) - 1;int day=Integer.parseInt(dateStr.substring(6,8));Date date=(new java.util.GregorianCalendar(year,month,day)).getTime();directory.setDate(tagIdentifier,date);return;} catch (NumberFormatException e) {}}case IptcDirectory.TAG_RELEASE_TIME:case IptcDirectory.TAG_TIME_CREATED:default :}String str;if (tagByteCount < 1) {str="";} else {str=new String(_data,offset,tagByteCount);}if (directory.containsTag(tagIdentifier)) {String[] oldStrings;String[] newStrings;try {oldStrings=directory.getStringArray(tagIdentifier);} catch (MetadataException e) {oldStrings=null;}if (oldStrings == null) {newStrings=new String[1];} else {newStrings=new String[oldStrings.length + 1];for (int i=0; i < oldStrings.length; i++) {newStrings[i]=oldStrings[i];}}newStrings[newStrings.length - 1]=str;directory.setStringArray(tagIdentifier,newStrings);} else {directory.setString(tagIdentifier,str);}}  }
class C{  private void displayInfo(final String instance,final ConfProxyProperties conf) throws Exception {  ConfigurationAnchor anchor=null;  String anchorError=null;  try {    anchor=new ConfigurationAnchor(conf.getProxyAnchorPath());  } catch (  Exception e) {    anchorError="'" + ConfProxyProperties.ANCHOR_XML + "' could not be loaded: "+ e;  }  String delimiter="==================================================";  System.out.println("Configuration for proxy '" + instance + "'");  int validityInterval=conf.getValidityIntervalSeconds();  System.out.println("Validity interval: " + (validityInterval < 0 ? VALIDITY_INTERVAL_NA_MSG : validityInterval + " s."));  System.out.println();  System.out.println(ConfProxyProperties.ANCHOR_XML);  System.out.println(delimiter);  if (anchorError == null) {    System.out.println("Instance identifier: " + anchor.getInstanceIdentifier());    SimpleDateFormat sdf=new SimpleDateFormat("z yyyy-MMM-d hh:mm:ss");    sdf.setTimeZone(TimeZone.getTimeZone("UTC"));    System.out.println("Generated at:        " + sdf.format(anchor.getGeneratedAt()));    System.out.println("Hash:                " + anchorHash(conf));  } else {    System.out.println(anchorError);  }  System.out.println();  System.out.println("Configuration URL");  System.out.println(delimiter);  if (conf.getConfigurationProxyURL().equals("0.0.0.0")) {    System.out.println("configuration-proxy.address has not been" + " configured in 'local.ini'!");  } else {    System.out.println(conf.getConfigurationProxyURL() + "/" + OutputBuilder.SIGNED_DIRECTORY_NAME);  }  System.out.println();  System.out.println("Signing keys and certificates");  System.out.println(delimiter);  System.out.println(ACTIVE_SIGNING_KEY_ID + ":");  String activeKey=conf.getActiveSigningKey();  System.out.println("\t" + (activeKey == null ? ACTIVE_KEY_NA_MSG : activeKey) + certInfo(activeKey,conf));  List<String> inactiveKeys=conf.getKeyList();  if (!inactiveKeys.isEmpty()) {    System.out.println(SIGNING_KEY_ID_PREFIX + "*:");    inactiveKeys.forEach(null);  }  System.out.println();}  }
class C{  public void addInstanceAtEnd(){  ((DataSortedTableModel)m_TableData.getModel()).insertInstance(-1);}  }
class C{  public ComplementRegion(Region region,List<Region> complements){  super(region.getBounds().complement(complements));  this.region=region;  this.complements=complements;}  }
class C{  public static void initialize(){  Security.addProvider(new XoauthProvider());}  }
class C{  public void sendNodeAnnounce(final long currentEventID,String nodeID,String backupGroupName,String scaleDownGroupName,boolean isBackup,TransportConfiguration config,TransportConfiguration backupConfig){  clusterChannel.send(new NodeAnnounceMessage(currentEventID,nodeID,backupGroupName,scaleDownGroupName,isBackup,config,backupConfig));}  }
class C{  public NbtTagByteArray(String name){  super(name);  this.value=EMPTY;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  int num=getInt(stack);  String remoteName=getString(stack);  int portNum=getInt(stack);  SFIRTuner tun=ExternalTuningManager.getIRTunerPlugin(getString(stack),portNum);  if (tun != null) {synchronized (tun) {      tun.getRemoteInfo(remoteName);      tun.setButtonDelay(num);      tun.saveChanges();    }  }  return null;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  String namespaceURI=null;  String qualifiedName="^^";  doc=(Document)load("staffNS",false);{    boolean success=false;    try {      element=doc.createElementNS(namespaceURI,qualifiedName);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INVALID_CHARACTER_ERR);    }    assertTrue("documentcreateelementNS02",success);  }}  }
class C{  public Measurement convert(Reading r,Point3d guess){  this.Xt=guess.x;  this.Yt=guess.y;  this.Zt=guess.z;  return convert(r);}  }
class C{  public void replaceStopFacilityInRoute(TransitRoute transitRoute,TransitStopFacility toReplace,TransitStopFacility replaceWith){  TransitRouteStop routeStopToReplace=transitRoute.getStop(toReplace);  if (routeStopToReplace != null) {    routeStopToReplace.setStopFacility(replaceWith);    refreshTransitRoute(transitRoute);  } else {    throw new IllegalArgumentException("StopFacility " + toReplace.getId() + " not found in TransitRoute "+ transitRoute.getId());  }}  }
class C{  public JSONObject put(String key,Object value) throws JSONException {  if (key == null) {    throw new NullPointerException("Null key.");  }  if (value != null) {    testValidity(value);    this.map.put(key,value);  } else {    this.remove(key);  }  return this;}  }
class C{  public Product asProduct(SolrDocument doc){  Long pid=Long.class.cast(doc.get("id"));  return productService.getProduct(pid);}  }
class C{  @SafeVarargs static <E>Set<E> newSet(Set<E> other,E... elements){  HashSet<E> set=new HashSet<>(other);  for (  E e : elements) {    set.add(e);  }  return set;}  }
class C{  public static boolean doCacheHeaderValidation(final SolrQueryRequest solrReq,final HttpServletRequest req,final Method reqMethod,final HttpServletResponse resp){  if (Method.POST == reqMethod || Method.OTHER == reqMethod) {    return false;  }  final long lastMod=HttpCacheHeaderUtil.calcLastModified(solrReq);  final String etag=HttpCacheHeaderUtil.calcEtag(solrReq);  resp.setDateHeader("Last-Modified",lastMod);  resp.setHeader("ETag",etag);  if (checkETagValidators(req,resp,reqMethod,etag)) {    return true;  }  if (checkLastModValidators(req,resp,lastMod)) {    return true;  }  return false;}  }
class C{  public DefaultIdmAccessorFactory(String correlationId){  logger.debug("DefaultIdmAccessorFactory constructor with correlationId");  idmClient=new CasIdmClient(Shared.IDM_HOSTNAME,new IdmServiceContextProvider(correlationId,Shared.getDefaultTenant()));  Validate.notNull(idmClient);}  }
class C{  @Deprecated private List<Object> nameValueMapToList(Map.Entry<String,? extends T>[] nameValuePairs){  List<Object> result=new ArrayList<>();  for (  Map.Entry<String,?> ent : nameValuePairs) {    result.add(ent.getKey());    result.add(ent.getValue());  }  return result;}  }
class C{  public ProductionRepairPanel(final IUIContext uiContext){  m_uiContext=uiContext;}  }
class C{  protected String paramString(){  String orientationString=(orientation == HORIZONTAL ? "HORIZONTAL" : "VERTICAL");  return super.paramString() + ",orientation=" + orientationString;}  }
class C{  public static DataWrapper serializableInstance(){  return new DataWrapper(new Parameters());}  }
class C{  public static DSAPublicKey loadDSAPublicKeyFile(String uname){  String filename=ClientConfig.getUserKeysPath() + "/" + uname+ ".pub";  DSAPublicKey pubKey=null;  FileInputStream fis=null;  try {    fis=new FileInputStream(filename);    byte[] keyBytes=new byte[fis.available()];    fis.read(keyBytes);    KeyFactory keyFactory=KeyFactory.getInstance("DSA","SUN");    X509EncodedKeySpec pubKeySpec=new X509EncodedKeySpec(keyBytes);    pubKey=(DSAPublicKey)keyFactory.generatePublic(pubKeySpec);  } catch (  IOException e) {    Logging.error(e.getMessage());  }catch (  NoSuchAlgorithmException e) {    Logging.error(e.getMessage());  }catch (  NoSuchProviderException e) {    Logging.error(e.getMessage());  }catch (  InvalidKeySpecException e) {    Logging.error(e.getMessage());  } finally {    CommonMessaging.close(fis);  }  return pubKey;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.MORE_GUARDS___ANONYMOUS_MORE_GUARDS_11:    return anonymous_moreGuards_1_1 != null && !anonymous_moreGuards_1_1.isEmpty();case UmplePackage.MORE_GUARDS___CODE_1:  return CODE_1_EDEFAULT == null ? code_1 != null : !CODE_1_EDEFAULT.equals(code_1);}return super.eIsSet(featureID);}  }
class C{  public void sendReportToConsole(Log log){  try {    Rabbit rabbit=rabbitCache.getRabbit(log.getRabbitId());    if (rabbit.getHideOnConsole()) {      return;    }    template.convertAndSend("/topic/console",log.toHTML(true));  } catch (  Exception e) {    logger.error(e.getMessage(),e);  }}  }
class C{  public Long deleteUserByExternalUserIdAndType(String SID,String externalUserId,String externalUserType) throws AxisFault {  return getUserServiceProxy().deleteUserByExternalUserIdAndType(SID,externalUserId,externalUserType);}  }
class C{  public LSHMinHash(final int s,final int b,final int n,final long seed){  super(s,b);  int signature_size=computeSignatureSize(s,n);  this.mh=new MinHash(signature_size,n,seed);}  }
class C{  private boolean isPluginReadyForWork(){  boolean isWwwFolderExists=isWwwFolderExists();  boolean isWwwFolderInstalled=pluginInternalPrefs.isWwwFolderInstalled();  boolean isApplicationHasBeenUpdated=isApplicationHasBeenUpdated();  return isWwwFolderExists && isWwwFolderInstalled && !isApplicationHasBeenUpdated;}  }
class C{  private void selectSpan(HighlightedClickableSpan span){  span.select(true);  highlightedClickableSpan=span;  invalidate();}  }
class C{  public static FrameBlock readTransformMetaDataFromFile(String spec,String metapath,String colDelim) throws IOException {  String colnamesStr=MapReduceTool.readStringFromHDFSFile(metapath + File.separator + TfUtils.TXMTD_COLNAMES);  String[] colnames=IOUtilFunctions.split(colnamesStr.trim(),colDelim);  HashMap<String,String> meta=new HashMap<String,String>();  HashMap<String,String> mvmeta=new HashMap<String,String>();  int rows=0;  for (int j=0; j < colnames.length; j++) {    String colName=colnames[j];    String name=metapath + File.separator + "Recode"+ File.separator+ colName;    if (MapReduceTool.existsFileOnHDFS(name + TfUtils.TXMTD_RCD_MAP_SUFFIX)) {      meta.put(colName,MapReduceTool.readStringFromHDFSFile(name + TfUtils.TXMTD_RCD_MAP_SUFFIX));      String ndistinct=MapReduceTool.readStringFromHDFSFile(name + TfUtils.TXMTD_RCD_DISTINCT_SUFFIX);      rows=Math.max(rows,Integer.parseInt(ndistinct));    }    String name2=metapath + File.separator + "Bin"+ File.separator+ colName;    if (MapReduceTool.existsFileOnHDFS(name2 + TfUtils.TXMTD_BIN_FILE_SUFFIX)) {      String binmap=MapReduceTool.readStringFromHDFSFile(name2 + TfUtils.TXMTD_BIN_FILE_SUFFIX);      meta.put(colName,binmap);      rows=Math.max(rows,Integer.parseInt(binmap.split(TfUtils.TXMTD_SEP)[4]));    }    String name3=metapath + File.separator + "Impute"+ File.separator+ colName;    if (MapReduceTool.existsFileOnHDFS(name3 + TfUtils.TXMTD_MV_FILE_SUFFIX)) {      String mvmap=MapReduceTool.readStringFromHDFSFile(name3 + TfUtils.TXMTD_MV_FILE_SUFFIX);      mvmeta.put(colName,mvmap);    }  }  List<Integer> recodeIDs=parseRecodeColIDs(spec,colnames);  List<Integer> binIDs=parseBinningColIDs(spec,colnames);  return convertToTransformMetaDataFrame(rows,colnames,recodeIDs,binIDs,meta,mvmeta);}  }
class C{  protected void handleUiGet(String selfLink,Service ownerService,Operation get){  URI uri=get.getUri();  String requestUri=uri.getPath();  String uiResourcePath;  ServiceDocumentDescription desc=ownerService.getDocumentTemplate().documentDescription;  if (desc != null && desc.userInterfaceResourcePath != null) {    uiResourcePath=UriUtils.buildUriPath(ServiceUriPaths.UI_RESOURCES,desc.userInterfaceResourcePath);  } else {    uiResourcePath=Utils.buildUiResourceUriPrefixPath(ownerService);  }  if (requestUri.startsWith(uiResourcePath)) {    Exception e=new ServiceNotFoundException(UriUtils.buildUri(uri.getScheme(),uri.getHost(),uri.getPort(),uri.getPath().substring(uiResourcePath.length()),uri.getQuery()).toString());    ServiceErrorResponse r=Utils.toServiceErrorResponse(e);    r.statusCode=Operation.STATUS_CODE_NOT_FOUND;    r.stackTrace=null;    get.setStatusCode(Operation.STATUS_CODE_NOT_FOUND).setContentType(Operation.MEDIA_TYPE_APPLICATION_JSON).fail(e,r);    return;  }  if (selfLink.equals(requestUri) && !UriUtils.URI_PATH_CHAR.equals(requestUri)) {    get.setStatusCode(Operation.STATUS_CODE_MOVED_TEMP);    get.addResponseHeader(Operation.LOCATION_HEADER,selfLink + UriUtils.URI_PATH_CHAR);    get.complete();    return;  } else {    String relativeToSelfUri=UriUtils.URI_PATH_CHAR.equals(selfLink) ? requestUri : requestUri.substring(selfLink.length());    if (relativeToSelfUri.equals(UriUtils.URI_PATH_CHAR)) {      uiResourcePath+=UriUtils.URI_PATH_CHAR + ServiceUriPaths.UI_RESOURCE_DEFAULT_FILE;    } else {      uiResourcePath+=relativeToSelfUri;    }  }  Operation operation=get.clone();  operation.setUri(UriUtils.buildUri(getHost(),uiResourcePath,uri.getQuery())).setCompletion(null);  getHost().sendRequest(operation);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element docElem;  NodeList elementList;  Node child;  String childName;  java.util.List result=new java.util.ArrayList();  java.util.List expectedResult=new java.util.ArrayList();  expectedResult.add("address");  expectedResult.add("address");  expectedResult.add("address");  expectedResult.add("emp:address");  expectedResult.add("address");  doc=(Document)load("staffNS",false);  docElem=doc.getDocumentElement();  elementList=docElem.getElementsByTagNameNS("*","address");  for (int indexN1005E=0; indexN1005E < elementList.getLength(); indexN1005E++) {    child=(Node)elementList.item(indexN1005E);    childName=child.getNodeName();    result.add(childName);  }  assertEquals("nodeNames",expectedResult,result);}  }
class C{  public static void writeBodyText(ActiveMQBuffer buff,SimpleString text){  buff.clear();  buff.writeNullableSimpleString(text);}  }
class C{  public static Bitmap resizeBitmap(Bitmap bitmap,Integer width,Integer height){  return Bitmap.createScaledBitmap(bitmap,width,height,true);}  }
class C{  public void onSaveInstanceState(Bundle outState){  outState.putBoolean("SlidingActivityHelper.open",mSlidingMenu.isMenuShowing());  outState.putBoolean("SlidingActivityHelper.secondary",mSlidingMenu.isSecondaryMenuShowing());}  }
class C{  public static double atanh(double a){  boolean negative=false;  if (a < 0) {    negative=true;    a=-a;  }  double absAtanh;  if (a > 0.15) {    absAtanh=0.5 * FastMath.log((1 + a) / (1 - a));  } else {    final double a2=a * a;    if (a > 0.087) {      absAtanh=a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * (F_1_13 + a2 * (F_1_15 + a2 * F_1_17))))))));    } else     if (a > 0.031) {      absAtanh=a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * F_1_13))))));    } else     if (a > 0.003) {      absAtanh=a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * F_1_9))));    } else {      absAtanh=a * (1 + a2 * (F_1_3 + a2 * F_1_5));    }  }  return negative ? -absAtanh : absAtanh;}  }
class C{  public int hashCode(){  return name.toUpperCase(Locale.ENGLISH).hashCode();}  }
class C{  public TextCharacter withModifiers(Collection<SGR> modifiers){  EnumSet<SGR> newSet=EnumSet.copyOf(modifiers);  if (modifiers.equals(newSet)) {    return this;  }  return new TextCharacter(character,foregroundColor,backgroundColor,newSet);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:04.791 -0500",hash_original_method="71A21439D49BE4DC675A1D07C5085E0D",hash_generated_method="4EA9082D3B18CDF043CA61C90B966003") static DeviceIdentities retrieveDeviceIdentities(ComprehensionTlv ctlv) throws ResultException {  DeviceIdentities devIds=new DeviceIdentities();  byte[] rawValue=ctlv.getRawValue();  int valueIndex=ctlv.getValueIndex();  try {    devIds.sourceId=rawValue[valueIndex] & 0xff;    devIds.destinationId=rawValue[valueIndex + 1] & 0xff;    return devIds;  } catch (  IndexOutOfBoundsException e) {    throw new ResultException(ResultCode.REQUIRED_VALUES_MISSING);  }}  }
class C{  public CamoPanel(){  GridBagConstraints c=new GridBagConstraints();  lblImage=new JLabel();  setLayout(new GridBagLayout());  lblImage.setText("");  c.gridx=0;  c.gridy=0;  c.fill=java.awt.GridBagConstraints.BOTH;  c.weightx=1.0;  c.weighty=1.0;  add(lblImage,c);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public boolean supportsNonNullableColumns() throws SQLException {  return true;}  }
class C{  public boolean loggerIsLevelEnabled(int level){  if (!tryEnter())   return false;  try {    return PlatformCallbackUtils.loggerIsLevelEnabled(envPtr,level);  }  finally {    leave();  }}  }
class C{  public RelationshipType(final String name,final GameData data){  super(name,data);}  }
class C{  private void updateDisplay(boolean allowEmptyDisplay){  if (!allowEmptyDisplay && mTypedTimes.isEmpty()) {    int hour=mRadialTimePickerView.getCurrentHour();    int minute=mRadialTimePickerView.getCurrentMinute();    updateHeaderHour(hour,false);    updateHeaderMinute(minute,false);    if (!mIs24HourView) {      updateAmPmLabelStates(hour < 12 ? AM : PM);    }    setCurrentItemShowing(mRadialTimePickerView.getCurrentItemShowing(),true,true);    onValidationChanged(true);  } else {    boolean[] enteredZeros={false,false};    int[] values=getEnteredTime(enteredZeros);    String hourFormat=enteredZeros[0] ? "%02d" : "%2d";    String minuteFormat=(enteredZeros[1]) ? "%02d" : "%2d";    String hourStr=(values[0] == -1) ? mDoublePlaceholderText : String.format(hourFormat,values[0]).replace(' ',mPlaceholderText);    String minuteStr=(values[1] == -1) ? mDoublePlaceholderText : String.format(minuteFormat,values[1]).replace(' ',mPlaceholderText);    mHourView.setText(hourStr);    mHourView.setSelected(false);    mMinuteView.setText(minuteStr);    mMinuteView.setSelected(false);    if (!mIs24HourView) {      updateAmPmLabelStates(values[2]);    }  }}  }
class C{  public String randomSpecial(int length){  return randomString(JexlStringFunctions.special,length);}  }
class C{  public void BeginExecution(JoinPoint.StaticPart jp){  if (reentry_count++ == 0) {    XTraceReport.entering(jp);    baggage=Baggage.swap(baggage);    XTraceReport.left(jp);  }}  }
class C{  boolean removeNetwork(int netId){  boolean ret=mWifiNative.removeNetwork(netId);  if (ret) {    removeConfigAndSendBroadcastIfNeeded(netId);  }  return ret;}  }
class C{  private Comparator<Resource> comparisonForField(String field){  if (field.charAt(0) == DESCENDING_TOKEN) {    String parsedField=field.substring(1);    return Ordering.from(attributeComparison(parsedField)).nullsFirst().reverse();  } else {    return Ordering.from(attributeComparison(field)).nullsFirst();  }}  }
class C{  public boolean isPhantom(){  return isPhantom;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:50.789 -0500",hash_original_method="EACAEF5EE9C7C8D5FCD8F40349D2EBF4",hash_generated_method="8EDF06F06332D4082644557CE1DF5CCF") private static void handleSystemServerProcess(ZygoteConnection.Arguments parsedArgs) throws ZygoteInit.MethodAndArgsCaller {  closeServerSocket();  FileUtils.setUMask(FileUtils.S_IRWXG | FileUtils.S_IRWXO);  if (parsedArgs.niceName != null) {    Process.setArgV0(parsedArgs.niceName);  }  if (parsedArgs.invokeWith != null) {    WrapperInit.execApplication(parsedArgs.invokeWith,parsedArgs.niceName,parsedArgs.targetSdkVersion,null,parsedArgs.remainingArgs);  } else {    RuntimeInit.zygoteInit(parsedArgs.targetSdkVersion,parsedArgs.remainingArgs);  }}  }
class C{  public static int readPackedInt(InputStream is,int numBytes,boolean isLittleEndian) throws IOException {  int value=0;  for (int i=0; i < numBytes; i++) {    int b=is.read();    if (b == -1) {      throw new IOException("no more bytes");    }    if (isLittleEndian) {      value|=(b & 0xFF) << (i * 8);    } else {      value=(value << 8) | (b & 0xFF);    }  }  return value;}  }
class C{  @Override public void show(ExportDataProvider dataProvider,String resourceName){  String extension=FilenameUtils.getExtension(resourceName);  ExportFormat format=ExportFormat.getByExtension(extension);  show(dataProvider,resourceName,format);}  }
class C{  @CallSuper protected void toggleActivation(){  itemView.setActivated(mAdapter.isSelected(getFlexibleAdapterPosition()));  if (itemView.isActivated() && getActivationElevation() > 0)   ViewCompat.setElevation(itemView,getActivationElevation()); else   if (getActivationElevation() > 0)   ViewCompat.setElevation(itemView,0);}  }
class C{  public ThrownExceptionIterator iterator(){  return new ThrownExceptionIterator();}  }
class C{  @Override public void addPages(){  page=new NewWizardPage(selection);  addPage(page);}  }
class C{  public void initializeDecoding(){  XTIFFField sfield=directory.getField(XTIFF.TIFFTAG_SAMPLES_PER_PIXEL);  if (sfield == null) {    samplesPerPixel=1;  } else {    samplesPerPixel=(int)sfield.getAsLong(0);  }  XTIFFField predictorField=directory.getField(XTIFF.TIFFTAG_PREDICTOR);  if (predictorField == null) {    predictor=1;  } else {    predictor=predictorField.getAsInt(0);    if (predictor != 1 && predictor != 2) {      throw new RuntimeException(JaiI18N.getString("XTIFFImageDecoder16"));    }    if (predictor == 2 && bitsPerSample[0] != 8) {      throw new RuntimeException(bitsPerSample[0] + JaiI18N.getString("XTIFFImageDecoder17"));    }  }  lzwDecoder=new TIFFLZWDecoder(tileWidth,predictor,samplesPerPixel);}  }
class C{  public Builder delay(long delaySec){  this.delay=delaySec;  return this;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public MessageEventManager(Connection con){  this.con=con;  init();}  }
class C{  public final MutableDouble2D subtractIn(MutableDouble2D other){  x=x - other.x;  y=y - other.y;  return this;}  }
class C{  public static <T>T checkNotNull(T reference,String errorMessageTemplate,Object... errorMessageArgs){  if (reference == null) {    throw new NullPointerException(format(errorMessageTemplate,errorMessageArgs));  }  return reference;}  }
class C{  public void addPath(int[] path){  paths.add(path);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (stateName_1: ");  result.append(stateName_1);  result.append(')');  return result.toString();}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public void addBelow(Dimension dim){  addBelow(dim.width,dim.height);}  }
class C{  public void checkNumberArgs(int argNum) throws WrongNumberArgsException {}  }
class C{  public void prePrepare(Projection newProj){  getImageBuffer().generate(newProj);}  }
class C{  private void inorder(TreeNode<E> root){  if (root == null)   return;  inorder(root.left);  list.add(root.element);  inorder(root.right);}  }
class C{  protected static URI dockerDaemonUri(final boolean isLinux,@NotNull final Map<String,String> env){  if (isLinux) {    return UNIX_SOCKET_URI;  }  String host=env.get(DOCKER_HOST_PROPERTY);  if (host != null) {    URI userURI;    try {      userURI=new URI(host);    } catch (    URISyntaxException e) {      LOG.error(String.format("Unable to parse %s property with value %s",DOCKER_HOST_PROPERTY,host),e);      return DEFAULT_DOCKER_MACHINE_URI;    }    String tls=env.get(DOCKER_TLS_VERIFY_PROPERTY);    String protocol="1".equals(tls) ? "https" : "http";    try {      return new URI(protocol,null,userURI.getHost(),userURI.getPort(),null,null,null);    } catch (    URISyntaxException e) {      LOG.error(String.format("Unable to create URI %s property with value %s and TLS %s",DOCKER_HOST_PROPERTY,host,DOCKER_TLS_VERIFY_PROPERTY),e);      return DEFAULT_DOCKER_MACHINE_URI;    }  }  return DEFAULT_DOCKER_MACHINE_URI;}  }
class C{  public VirtualMachineError(){  super();}  }
class C{  private static void reply_Login2_Client(body body,WebSessionCtx wsc,String formName,String fieldValue,String locationValue){  log.info("Location-Client: " + locationValue);  String form=null;  form=locationValue + WebEnv.TARGET_WINDOW + ".document."+ formName+ ".";  StringBuffer script=new StringBuffer();  script.append("var B=").append(form).append(WLogin.P_ORG).append(".options; ");  script.append("B.length=0; ");  KeyNamePair client=new KeyNamePair(Integer.parseInt(fieldValue),fieldValue);  Login login=new Login(wsc.ctx);  KeyNamePair[] orgs=login.getOrgs(client);  for (int i=0; i < orgs.length; i++) {    KeyNamePair p=orgs[i];    script.append("B[").append(i).append("]=new Option('");    script.append(p.getName());    script.append("','");    script.append(p.getKey());    script.append("'); ");  }  script.append("\n");  script.append("var C=").append(form).append(WLogin.P_WAREHOUSE).append(".options; ");  script.append("C.length=0; ");  KeyNamePair[] whs=login.getWarehouses(orgs[0]);  if (whs != null) {    for (int i=0; i < whs.length; i++) {      KeyNamePair p=whs[i];      script.append("C[").append(i).append("]=new Option('");      script.append(p.getName());      script.append("','");      script.append(p.getKey());      script.append("'); ");    }  }  body.addElement(new p().addElement(WLogin.P_WAREHOUSE + "="));  body.addElement(new script(script.toString()));}  }
class C{  static int lastIndexOf(char[] source,int sourceOffset,int sourceCount,char[] target,int targetOffset,int targetCount,int fromIndex){  int rightIndex=sourceCount - targetCount;  if (fromIndex < 0) {    return -1;  }  if (fromIndex > rightIndex) {    fromIndex=rightIndex;  }  if (targetCount == 0) {    return fromIndex;  }  int strLastIndex=targetOffset + targetCount - 1;  char strLastChar=target[strLastIndex];  int min=sourceOffset + targetCount - 1;  int i=min + fromIndex;  startSearchForLastChar:   while (true) {    while (i >= min && source[i] != strLastChar) {      i--;    }    if (i < min) {      return -1;    }    int j=i - 1;    int start=j - (targetCount - 1);    int k=strLastIndex - 1;    while (j > start) {      if (source[j--] != target[k--]) {        i--;        continue startSearchForLastChar;      }    }    return start - sourceOffset + 1;  }}  }
class C{  @Override public boolean equals(Object object){  return object == null || object == this;}  }
class C{  public void notifySkip() throws EchoNestException {  com.fastbootmobile.encore.model.Song currentTrack=PlaybackProxy.getCurrentTrack();  if (currentTrack != null) {    String songRef=currentTrack.getRef();    try {      mPlaylistSession.feedback(DynamicPlaylistSession.FeedbackType.skip_song,songRef);    } catch (    Exception e) {      Log.e(TAG,"Cannot feedback skip",e);    }  }}  }
class C{  public synchronized void flush(){  try {    writer.flush();  } catch (  IOException ioe) {    ioe.printStackTrace();  }}  }
class C{  public void writeImplicit(byte tag,DerOutputStream value) throws IOException {  write(tag);  write(value.buf,1,value.count - 1);}  }
class C{  public static void sort(Object[] array,int start,int end){  ComparableTimSort.sort(array,start,end);}  }
class C{  private void mergeForceCollapse(){  while (stackSize > 1) {    int n=stackSize - 2;    if (n > 0 && runLen[n - 1] < runLen[n + 1])     n--;    mergeAt(n);  }}  }
class C{  public mxCircleLayout(mxGraph graph){  this(graph,100);}  }
class C{  public int print(Graphics graphics,PageFormat pageFormat,int pageIndex) throws PrinterException {  if (pageIndex > 0) {    return NO_SUCH_PAGE;  }  Graphics2D g2=(Graphics2D)graphics;  g2.translate(pageFormat.getImageableX(),pageFormat.getImageableY());  Rectangle componentBounds=m_component.getBounds(null);  g2.translate(-componentBounds.x,-componentBounds.y);  g2.scale(m_ScaleX,m_ScaleY);  boolean wasBuffered=disableDoubleBuffering(m_component);  m_component.printAll(g2);  restoreDoubleBuffering(m_component,wasBuffered);  return PAGE_EXISTS;}  }
class C{  public static ProcessInfo readProcessInfo(String filename) throws Throwable {  System.out.println("Reading port and pid from file: " + filename);  File file=new File(filename);  String content=null;  long startTime=System.currentTimeMillis();  long lastWarningTime=0;  while (true) {    content=readFile(file);    if (content != null && content.indexOf("done") >= 0) {      break;    }    Thread.sleep(100);    long elapsedTime=(System.currentTimeMillis() - startTime) / 1000;    if (elapsedTime > lastWarningTime) {      lastWarningTime=elapsedTime;      System.out.println("Waited " + elapsedTime + " seconds for file.");    }  }  ProcessInfo info=new ProcessInfo();  Pattern pattern=Pattern.compile("(\\w*)=([0-9]+)\\r?\\n");  Matcher matcher=pattern.matcher(content);  while (matcher.find()) {    String key=matcher.group(1);    int value=Integer.parseInt(matcher.group(2));    if ("pid".equals(key)) {      info.pid=value;    } else     if ("shutdownPort".equals(key)) {      info.shutdownPort=value;    }  }  System.out.println("processInfo.pid:" + info.pid);  System.out.println("processInfo.shutdownPort:" + info.shutdownPort);  return info;}  }
class C{  private void removeKeys(Hashtable themeRes,String uiid){  if (uiid == null || uiid.length() == 0) {    for (    Object k : themeRes.keySet()) {      String key=(String)k;      if (key.indexOf('.') > -1 || key.indexOf('#') > -1 || key.indexOf('@') > -1) {        continue;      }      themeRes.remove(key);      removeKeys(themeRes,uiid);      return;    }    return;  }  for (  Object k : themeRes.keySet()) {    String key=(String)k;    if (key.startsWith(uiid)) {      if (prefix.length() == 0 && key.indexOf('#') > 0) {        continue;      }      themeRes.remove(key);      removeKeys(themeRes,uiid);      return;    }  }}  }
class C{  public void reset(){  attribute=null;  tags.clear();  inherits.clear();  attributes.clear();  Strings.clearBuilder(builder);}  }
class C{  public void stopRecording(){  if (BuildConfig.DEBUG) {    screenCaptureOn=false;    recorderHandler.removeCallbacks(recorderRunnable);  }}  }
class C{  private static boolean alertIfMonkey(Context context,int stringId){  if (ActivityManager.isUserAMonkey()) {    AlertDialog.Builder builder=new AlertDialog.Builder(context);    builder.setMessage(stringId);    builder.setPositiveButton(R.string.monkey_ok,null);    builder.show();    return true;  } else {    return false;  }}  }
class C{  ClassLoaderManager(File clDir){  dir=clDir.getAbsoluteFile();  Logger.debug(getClass().getName(),"using: " + dir);  shutDown=new ShutdownCLMThread();  Runtime.getRuntime().addShutdownHook(shutDown);}  }
class C{  private void scanFraction(int pos){  skipIllegalUnderscores();  if ('0' <= reader.ch && reader.ch <= '9') {    scanDigits(pos,10);  }  int sp1=reader.sp;  if (reader.ch == 'e' || reader.ch == 'E') {    reader.putChar(true);    skipIllegalUnderscores();    if (reader.ch == '+' || reader.ch == '-') {      reader.putChar(true);    }    skipIllegalUnderscores();    if ('0' <= reader.ch && reader.ch <= '9') {      scanDigits(pos,10);      return;    }    lexError(pos,"malformed.fp.lit");    reader.sp=sp1;  }}  }
class C{  public void shutdownCommon(){}  }
class C{  public boolean equalsIgnoringId(SpatialKey o){  return Arrays.equals(minMax,o.minMax);}  }
class C{  public static String toJson(Object o) throws Exception {  return objectMapper.writeValueAsString(o);}  }
class C{  public boolean removeKey(Object key){  VALUE entry=this.keyed.get(key);  if (entry != null) {    int index=indexOf(entry);    this.keyed.remove(key);    this.ordered.remove(index);    return true;  }  return false;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_documentinvalidcharacterexceptioncreateattribute.class,args);}  }
class C{  public WritableRaster createWritableChild(int x,int y,int width,int height,int x0,int y0,int bandList[]){  if (x < this.minX) {    throw new RasterFormatException("x lies outside raster");  }  if (y < this.minY) {    throw new RasterFormatException("y lies outside raster");  }  if ((x + width < x) || (x + width > this.minX + this.width)) {    throw new RasterFormatException("(x + width) is outside of Raster");  }  if ((y + height < y) || (y + height > this.minY + this.height)) {    throw new RasterFormatException("(y + height) is outside of Raster");  }  SampleModel sm;  if (bandList != null)   sm=sampleModel.createSubsetSampleModel(bandList); else   sm=sampleModel;  int deltaX=x0 - x;  int deltaY=y0 - y;  return new ShortBandedRaster(sm,dataBuffer,new Rectangle(x0,y0,width,height),new Point(sampleModelTranslateX + deltaX,sampleModelTranslateY + deltaY),this);}  }
class C{  private void addToken(int tokenType){  addToken(zzStartRead,zzMarkedPos - 1,tokenType);}  }
class C{  @Override public synchronized void connectionNotification(String eventName,Object source){  if (connectionAllowed(eventName)) {    m_listenees.put(eventName,source);  }}  }
class C{  public boolean hasChildren(){  return (children != null);}  }
class C{  private void startUp() throws Exception {  TcpDiscoveryIpFinder ipFinder=new TcpDiscoveryVmIpFinder(true);  Ignite node1=G.start(dataNode(ipFinder,"node1"));  Ignite node2=G.start(dataNode(ipFinder,"node2"));  Ignite node3=G.start(dataNode(ipFinder,"node3"));  info("Node 1: " + node1.cluster().localNode().id());  info("Node 2: " + node2.cluster().localNode().id());  info("Node 3: " + node3.cluster().localNode().id());  cache1=node1.cache(CACHE_NAME);  cache2=node2.cache(CACHE_NAME);  cache3=node3.cache(CACHE_NAME);}  }
class C{  public void reply(Z21Reply msg){  if (msg.isXPressNetTunnelMessage()) {    XNetReply reply=msg.getXNetReply();    log.debug("Z21 Reply {} forwarded to XPressNet implementation as {}",msg,reply);    for (int i=0; i < reply.getNumDataElements(); i++) {      try {        outpipe.writeByte(reply.getElement(i));      } catch (      java.io.IOException ioe) {        log.error("Error writing XPressNet Reply to XPressNet input stream.");      }    }  }}  }
class C{  public static <Type>DisjunctiveConstraint<Type> create(@NonNull final Constraint<Type>[] constraints){  return new DisjunctiveConstraint<>(constraints);}  }
class C{  public boolean isSuspendProcess(){  return suspendProcess;}  }
class C{  public void push(T o){  int index=indexOf(o);  if (index >= 0) {    remove(index);  }  if (size() >= capacity) {    remove(size() - 1);  }  add(0,o);}  }
class C{  public static void updateLast(){  ClientUtils.lastUpdate=System.currentTimeMillis();}  }
class C{  public char[] toArray(int start,int len){  int remaining=len;  int pos=0;  char[] array=new char[len];  if (len == 0) {    return array;  }  int i=0;  while (start >= buffers[i].length) {    start-=buffers[i].length;    i++;  }  while (i < buffersCount) {    char[] buf=buffers[i];    int c=Math.min(buf.length - start,remaining);    System.arraycopy(buf,start,array,pos,c);    pos+=c;    remaining-=c;    if (remaining == 0) {      break;    }    start=0;    i++;  }  return array;}  }
class C{  public static String indent(String text,int steps){switch (steps) {case 0:    return text;case 1:  return indent(text);default :return indent(indent(text,steps - 1));}}  }
class C{  public Builder aclReadRoles(List<String> aclReadRoles){  aclBuilder().readRoles(aclReadRoles);  return this;}  }
class C{  public NotificationChain basicSetThenStep(Step newThenStep,NotificationChain msgs){  Step oldThenStep=thenStep;  thenStep=newThenStep;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,SexecPackage.IF__THEN_STEP,oldThenStep,newThenStep);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public static void geoCodedToPrefixCoded(long hash,int shift,BytesRefBuilder bytes){  geoCodedToPrefixCodedBytes(hash,shift,bytes);}  }
class C{  public boolean containsFile(String name){  return files.containsKey(name);}  }
class C{  @Override public void onAttachedToRecyclerView(RecyclerView recyclerView){  mFastAdapter.onAttachedToRecyclerView(recyclerView);}  }
class C{  public FolderTokenDocument findByName(String name) throws Exception {  int idx;  FolderTokenDocument doc=null;  idx=super.findIndexByName(name);  if (idx == -1) {    throw new IeciTdException(FolderBaseError.EC_NOT_FOUND,FolderBaseError.EM_NOT_FOUND);  }  doc=get(idx);  return doc;}  }
class C{  private Ipt createIptFromLegacyIpt(LegacyIpt ipt){  Ipt i=null;  if (ipt != null) {    i=new Ipt();    String key=(ipt.getKey() == null) ? null : ipt.getKey().toString();    if (key != null) {      i.setKey(key);    }    i.setDescription(Strings.emptyToNull(ipt.getDescription()));    i.setWsPassword(Strings.emptyToNull(ipt.getWsPassword()));    i.setName(Strings.emptyToNull(ipt.getName()));    i.setCreated(ipt.getCreated());    i.setLanguage(Strings.emptyToNull(ipt.getLanguage()));    i.setLogoUrl(Strings.emptyToNull(ipt.getLogoUrl()));    i.setHomepageURL(Strings.emptyToNull(ipt.getHomepageURL()));    i.setOrganisationKey(Strings.emptyToNull(ipt.getOrganisationKey().toString()));    i.setPrimaryContactType(Strings.emptyToNull(ipt.getPrimaryContactType()));    i.setPrimaryContactPhone(Strings.emptyToNull(ipt.getPrimaryContactPhone()));    i.setPrimaryContactLastName(Strings.emptyToNull(ipt.getPrimaryContactLastName()));    i.setPrimaryContactFirstName(Strings.emptyToNull(ipt.getPrimaryContactFirstName()));    i.setPrimaryContactAddress(Strings.emptyToNull(ipt.getPrimaryContactAddress()));    i.setPrimaryContactEmail(Strings.emptyToNull(ipt.getPrimaryContactEmail()));    i.setPrimaryContactDescription(Strings.emptyToNull(ipt.getPrimaryContactDescription()));    i.setPrimaryContactName(Strings.emptyToNull(ipt.getPrimaryContactName()));  }  return i;}  }
class C{  private void startGenerate(PsiClass targetPsiClass){  PsiReferenceList implementsListTypes=targetPsiClass.getImplementsList();  for (  PsiJavaCodeReferenceElement psi : implementsListTypes.getReferenceElements()) {    if ((PARCELABLE_CLASS_FULL_NAME).equals(psi.getQualifiedName())) {      psi.delete();    }  }  PsiField[] fields=targetPsiClass.getFields();  for (  PsiField field : fields) {    PsiModifierList psiModifierList=field.getModifierList();    if (null != psiModifierList && psiModifierList.hasModifierProperty("static") && field.getName().equals("CREATOR") && field.getType().getCanonicalText().equals(PARCELABLE_CLASS_FULL_NAME + ".Creator<" + targetPsiClass.getQualifiedName()+ ">")) {      field.delete();    }  }  PsiMethod[] psiMethods=targetPsiClass.getMethods();  for (  PsiMethod method : psiMethods) {    if (isSameMethod(method,"describeContents") || isSameMethod(method,"writeToParcel",PARCEL_CLASS_FULL_NAME,"int") || isSameMethod(method,targetPsiClass.getName(),PARCEL_CLASS_FULL_NAME)) {      method.delete();    }  }  generateImplementsParcelableInterface(targetPsiClass);}  }
class C{  protected double dCalc(ContinuousDistribution cd){  double max=0;  for (int i=0; i < v.length(); i++) {    if (v.get(i) >= cd.min() && v.get(i) <= cd.max()) {      double tmp=(i + 1.0) / v.length() - cd.cdf(v.get(i));      max=Math.max(max,Math.abs(tmp));    } else {      max=Math.max(max,Math.abs((i + 1.0) / v.length()));    }  }  return max;}  }
class C{  public Rational(Rational r){  mNumerator=r.mNumerator;  mDenominator=r.mDenominator;}  }
class C{  public static Bitmap decodeSampledBitmapFromFile(String filename,int reqWidth,int reqHeight,ImageCache cache){  final BitmapFactory.Options options=new BitmapFactory.Options();  options.inJustDecodeBounds=true;  BitmapFactory.decodeFile(filename,options);  options.inSampleSize=calculateInSampleSize(options,reqWidth,reqHeight);  if (Utils.hasHoneycomb()) {    addInBitmapOptions(options,cache);  }  options.inJustDecodeBounds=false;  return BitmapFactory.decodeFile(filename,options);}  }
class C{  public void instanceOf(final Type type){  typeInsn(Opcodes.INSTANCEOF,type);}  }
class C{  public boolean isStationary(){  return this.stationary;}  }
class C{  private static Geometry createPolygon(LinearRing[] parts){  GeometryFactory geomFactory=new GeometryFactory();  if (parts.length == 1) {    return geomFactory.createPolygon(parts[0],null);  }  ArrayList<LinearRing> shells=new ArrayList<LinearRing>();  ArrayList<LinearRing> holes=new ArrayList<LinearRing>();  for (int i=0; i < parts.length; i++) {    if (CGAlgorithms.isCCW(parts[i].getCoordinates())) {      holes.add(parts[i]);    } else {      shells.add(parts[i]);    }  }  LinearRing[] holesArray=null;  if (!holes.isEmpty()) {    holesArray=new LinearRing[holes.size()];    holes.toArray(holesArray);  }  if (shells.size() == 1) {    return geomFactory.createPolygon(shells.get(0),holesArray);  } else {    Polygon[] poly=new Polygon[shells.size()];    for (int i=0; i < shells.size(); i++) {      poly[i]=geomFactory.createPolygon(parts[i],holesArray);    }    return geomFactory.createMultiPolygon(poly);  }}  }
class C{  private boolean isBlank(String str){  if (str == null) {    return true;  }  return str.trim().length() == 0;}  }
class C{  private static void WriteStringVectorToFile(Vector inputVec,String fileName) throws StringVectorToFileException {  try {    BufferedWriter fileW=new BufferedWriter(new FileWriter(fileName));    int lineNum=0;    while (lineNum < inputVec.size()) {      fileW.write((String)inputVec.elementAt(lineNum));      fileW.newLine();      lineNum=lineNum + 1;    }    ;    fileW.close();  } catch (  Exception e) {    throw new StringVectorToFileException("Could not write file " + fileName);  }  ;}  }
class C{  private static void sweep(DTSweepContext tcx){  List<TriangulationPoint> points;  TriangulationPoint point;  AdvancingFrontNode node;  points=tcx.getPoints();  for (int i=1; i < points.size(); i++) {    point=points.get(i);    node=pointEvent(tcx,point);    if (point.hasEdges()) {      for (      DTSweepConstraint e : point.getEdges()) {        if (tcx.isDebugEnabled()) {          tcx.getDebugContext().setActiveConstraint(e);        }        edgeEvent(tcx,e,node);      }    }    tcx.update(null);  }}  }
class C{  public Set<String> keySet(){  return getEntryMap().keySet();}  }
class C{  public OpenSecureChannelResponse OpenSecureChannel(RequestHeader RequestHeader,UnsignedInteger ClientProtocolVersion,SecurityTokenRequestType RequestType,MessageSecurityMode SecurityMode,byte[] ClientNonce,UnsignedInteger RequestedLifetime) throws ServiceFaultException, ServiceResultException {  OpenSecureChannelRequest req=new OpenSecureChannelRequest(RequestHeader,ClientProtocolVersion,RequestType,SecurityMode,ClientNonce,RequestedLifetime);  return (OpenSecureChannelResponse)channel.serviceRequest(req);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public int indexOf(final AbstractInsnNode insn){  if (cache == null) {    cache=toArray();  }  return insn.index;}  }
class C{  public synchronized void clearYTextLabels(int scale){  mYTextLabels.get(scale).clear();}  }
class C{  public _BuildReason(final _BuildReason_Flag[] flags){  super(flags);}  }
class C{  public static double mean(double lower,double upper){  return (upper + lower) / 2;}  }
class C{  public Builder put(String key,Object value){  map.put(key,isImmutable(value) ? value : marshall(value));  return this;}  }
class C{  public void send(RosterGroup rosterGroup,String targetUserID){  Message msg=new Message(targetUserID);  RosterExchange rosterExchange=new RosterExchange();  for (  RosterEntry entry : rosterGroup.getEntries()) {    rosterExchange.addRosterEntry(entry);  }  msg.addExtension(rosterExchange);  con.sendPacket(msg);}  }
class C{  private void authorMessageAdversarial(){  Bag people=sim.socialNetwork.getAllNodes();  for (  Object p : people) {    Person person=(Person)p;    if (person.trustPolicy == Person.TRUST_POLICY_ADVERSARY) {      person.addMessageToQueue(trackedMessage);      return;    }  }}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.main);  initData();  initViews();}  }
class C{  @Ignore @Deprecated public void copyTo(Array<Element> destination,int sourcePosition,int destinationPosition,int length){  copyTo(destination,(long)sourcePosition,(long)destinationPosition,(long)length);}  }
class C{  public DoubleVector(){  this(0);}  }
class C{  private void addResponseHeaders(Record.Header header){  if (response.getStringHeaders() == null) {    return;  }  for (  Map.Entry<String,List<String>> entry : response.getStringHeaders().entrySet()) {    if (!entry.getValue().isEmpty()) {      String firstValue=entry.getValue().get(0);      header.setAttribute(entry.getKey(),firstValue);    }  }}  }
class C{  public void testPutLong(){  byte[] expectedResult={24,0,0,1,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0};  MySQLPacket array=new MySQLPacket(16,(byte)1);  ByteArrayOutputStream output=new ByteArrayOutputStream();  try {    array.putLong(1);    array.putLong(2);    array.putLong(3);    array.write(output);    compareBytes(expectedResult,output.toByteArray());  } catch (  IOException e) {    fail("This should not happen!");  }}  }
class C{  public void addToken(char[] array,int start,int end,int tokenType,int startOffset,boolean hyperlink){  super.addToken(array,start,end,tokenType,startOffset,hyperlink);  zzStartRead=zzMarkedPos;}  }
class C{  public AttributeValueExp(String attr){  this.attr=attr;}  }
class C{  protected static boolean isTokenCharacter(int ch){  if ((ch < 33) || (ch > 126)) {    return false;  }switch (ch) {case '"':case '(':case ')':case ',':case '/':case ':':case ';':case '<':case '=':case '>':case '?':case '@':case '[':case '\\':case ']':case '{':case '}':    return false;}return true;}  }
class C{  public void lostOwnership(Clipboard clipboard,Transferable contents){}  }
class C{  public void show(){  preShow();  int[] location=new int[2];  anchor.getLocationOnScreen(location);  Rect anchorRect=new Rect(location[0],location[1],location[0] + anchor.getWidth(),location[1] + anchor.getHeight());  root.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT));  root.measure(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);  int rootWidth=root.getMeasuredWidth();  int rootHeight=root.getMeasuredHeight();  int screenWidth=windowManager.getDefaultDisplay().getWidth();  int xPos=(screenWidth - rootWidth) / 2;  int yPos=anchorRect.top - rootHeight;  boolean onTop=true;  if (rootHeight > anchorRect.top) {    yPos=anchorRect.bottom;    onTop=false;  }  showArrow(((onTop) ? R.id.arrow_down : R.id.arrow_up),anchorRect.centerX());  setAnimationStyle(screenWidth,anchorRect.centerX(),onTop);  createActionList();  window.showAtLocation(this.anchor,Gravity.NO_GRAVITY,xPos,yPos);  if (animateTrack)   mTrack.startAnimation(mTrackAnim);}  }
class C{  private Collection<String> findClonableCollectionSet(List<String> operationalCollections){  Collection<String> collectionNames;  if (operationalCollections.get(0).equalsIgnoreCase("all")) {    Collection<String> finalCollectionNames=new ArrayList<String>();    collectionNames=sourceZKClient.getZkClusterData().getCollections();    collectionNames.remove("collection1");    boolean dirty=false;    for (    String collName : collectionNames) {      if (StringUtils.isNotBlank(config.getStreamFilter()) || StringUtils.isNotBlank(config.getExclusionPattern())) {        dirty=true;      }      if (StringUtils.isNotBlank(config.getStreamFilter()) && collName.contains(config.getStreamFilter())) {        logger.info("Adding " + collName + " since it matches  pattern "+ config.getStreamFilter());        finalCollectionNames.add(collName);      }      if (StringUtils.isNotBlank(config.getExclusionPattern()) && collName.contains(config.getExclusionPattern())) {        logger.info("Skipping " + collName + " since it matches exclusion pattern "+ config.getExclusionPattern());        finalCollectionNames.remove(collName);      }    }    if (dirty) {      collectionNames=finalCollectionNames;    }  } else {    collectionNames=operationalCollections;  }  return collectionNames;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:21.250 -0400",hash_original_method="5093036CEC1CC826DFFC999519A73E58",hash_generated_method="1B7C9BC5926E0950A359CD212B31464E") final boolean indexesDeletedNode(){  return node.value == null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-18 10:08:21.346 -0400",hash_original_method="CA894133E63B0A70D1E32D1954E0ACBB",hash_generated_method="BEBECC82DED761B80AECA807E2249AEC") public CircularArray(int minCapacity){  if (minCapacity <= 0) {    throw new IllegalArgumentException("capacity must be positive");  }  int arrayCapacity=minCapacity;  if (Integer.bitCount(minCapacity) != 1) {    arrayCapacity=1 << (Integer.highestOneBit(minCapacity) + 1);  }  mCapacityBitmask=arrayCapacity - 1;  mElements=(E[])new Object[arrayCapacity];}  }
class C{  public void sendRerollInitiativeRequest(){  send(new Packet(Packet.COMMAND_REROLL_INITIATIVE));}  }
class C{  public boolean trim_clinit(){  return soot.PhaseOptions.getBoolean(options,"trim-clinit");}  }
class C{  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {  ObjectInputStream.GetField fields=in.readFields();  String language=(String)fields.get("language","");  String script=(String)fields.get("script","");  String country=(String)fields.get("country","");  String variant=(String)fields.get("variant","");  String extStr=(String)fields.get("extensions","");  baseLocale=BaseLocale.getInstance(convertOldISOCodes(language),script,country,variant);  if (extStr.length() > 0) {    try {      InternalLocaleBuilder bldr=new InternalLocaleBuilder();      bldr.setExtensions(extStr);      localeExtensions=bldr.getLocaleExtensions();    } catch (    LocaleSyntaxException e) {      throw new IllformedLocaleException(e.getMessage());    }  } else {    localeExtensions=null;  }}  }
class C{  public synchronized int add(IAudioProcessor processor){  processors.add(processor);  buildFinalProcessor();  return processors.indexOf(processor);}  }
class C{  public static boolean parseVariableName(PsiBuilder b,int l){  IElementType currentTokenType=b.getTokenType();  IElementType nextTokenType=b.rawLookup(1);  PsiBuilder.Marker m;  if (currentTokenType == SIGIL_SCALAR && (POST_SIGILS_SUFFIXES.contains(b.lookAhead(1)) || b.rawLookup(1) == OPERATOR_BITWISE_XOR)) {    return false;  }  if (PACKAGE_TOKENS.contains(currentTokenType)) {    PsiBuilder.Marker mp=b.mark();    b.advanceLexer();    mp.collapse(PACKAGE);    if (CONVERTABLE_TOKENS.contains(nextTokenType)) {      PsiBuilder.Marker mv=b.mark();      b.advanceLexer();      mv.collapse(VARIABLE_NAME);    }    return true;  } else   if (canBeVariableName(currentTokenType,(PerlBuilder)b)) {    if (currentTokenType == OPERATOR_BITWISE_XOR && CONTROL_VARIABLE_NAMES.contains(nextTokenType)) {      m=b.mark();      b.advanceLexer();      b.advanceLexer();      m.collapse(VARIABLE_NAME);    } else {      PsiBuilder.Marker mv=b.mark();      b.advanceLexer();      mv.collapse(VARIABLE_NAME);    }    return true;  } else   if (currentTokenType == LEFT_BRACE) {    b.advanceLexer();    currentTokenType=nextTokenType;    nextTokenType=b.lookAhead(1);    if (PACKAGE_TOKENS.contains(currentTokenType)) {      PsiBuilder.Marker mp=b.mark();      b.advanceLexer();      mp.collapse(PACKAGE);      if (CONVERTABLE_TOKENS.contains(nextTokenType) && b.lookAhead(1) == RIGHT_BRACE) {        return convertVariableName(b);      } else       if (nextTokenType == RIGHT_BRACE) {        b.advanceLexer();        return true;      }    } else     if (canBeVariableName(currentTokenType,(PerlBuilder)b) && nextTokenType == RIGHT_BRACE) {      return convertVariableName(b);    }  }  return false;}  }
class C{  private static boolean isUnreservedCharacter(char p_char){  return (isAlphanum(p_char) || MARK_CHARACTERS.indexOf(p_char) != -1);}  }
class C{  public static double RSrawFitness(boolean useTrainingData,GEPIndividual ind,int chromosomeNum){  double expectedResult;  double predictedValue;  GEPDependentVariable dv;  if (useTrainingData)   dv=GEPDependentVariable.trainingData; else   dv=GEPDependentVariable.testingData;  double dvValues[]=dv.getDependentVariableValues(chromosomeNum);  double sumOfPV=0.0;  double sumOfPVtimesDV=0.0;  double sumOfPVsquared=0.0;  double sumOfDVsquared=0.0;  double sumOfDV=0.0;  int len=dvValues.length;  for (int i=0; i < len; i++) {    predictedValue=ind.eval(chromosomeNum,useTrainingData,i);    sumOfPV+=predictedValue;    sumOfPVsquared+=predictedValue * predictedValue;    expectedResult=dvValues[i];    sumOfDV+=expectedResult;    sumOfDVsquared+=expectedResult * expectedResult;    sumOfPVtimesDV+=predictedValue * expectedResult;  }  double top=(dvValues.length * sumOfPVtimesDV) - (sumOfDV * sumOfPV);  double bottom=Math.sqrt(((len * sumOfDVsquared) - (sumOfDV * sumOfDV)) * ((len * sumOfPVsquared) - (sumOfPV * sumOfPV)));  if (bottom == 0.0) {    bottom=RELATIVE_ERROR_ZERO_FACTOR;    System.err.println("Warning: denominator is 0 in RS (R-Squared) fitness calculation. Adjusting to avoid division by zero.");  }  return top / bottom;}  }
class C{  @SuppressWarnings("unchecked") private IgniteConfiguration primaryConfiguration(int idx) throws Exception {  FileSystemConfiguration igfsCfg=new FileSystemConfiguration();  igfsCfg.setDataCacheName("dataCache");  igfsCfg.setMetaCacheName("metaCache");  igfsCfg.setName(IGFS_PRIMARY);  igfsCfg.setBlockSize(PRIMARY_BLOCK_SIZE);  igfsCfg.setDefaultMode(DUAL_SYNC);  igfsCfg.setSecondaryFileSystem(igfsSecondary.asSecondary());  Map<String,IgfsMode> pathModes=new HashMap<>();  pathModes.put("/primary",PRIMARY);  igfsCfg.setPathModes(pathModes);  CacheConfiguration dataCacheCfg=defaultCacheConfiguration();  dataCacheCfg.setName("dataCache");  dataCacheCfg.setCacheMode(PARTITIONED);  dataCacheCfg.setNearConfiguration(null);  dataCacheCfg.setWriteSynchronizationMode(CacheWriteSynchronizationMode.FULL_SYNC);  dataCacheCfg.setAffinityMapper(new IgfsGroupDataBlocksKeyMapper(128));  dataCacheCfg.setBackups(0);  dataCacheCfg.setAtomicityMode(TRANSACTIONAL);  CacheConfiguration metaCacheCfg=defaultCacheConfiguration();  metaCacheCfg.setName("metaCache");  metaCacheCfg.setCacheMode(REPLICATED);  metaCacheCfg.setNearConfiguration(null);  metaCacheCfg.setWriteSynchronizationMode(CacheWriteSynchronizationMode.FULL_SYNC);  metaCacheCfg.setAtomicityMode(TRANSACTIONAL);  IgniteConfiguration cfg=new IgniteConfiguration();  cfg.setGridName("grid-" + idx);  TcpDiscoverySpi discoSpi=new TcpDiscoverySpi();  discoSpi.setIpFinder(IP_FINDER);  cfg.setDiscoverySpi(discoSpi);  cfg.setCacheConfiguration(dataCacheCfg,metaCacheCfg);  cfg.setFileSystemConfiguration(igfsCfg);  cfg.setLocalHost("127.0.0.1");  return cfg;}  }
class C{  protected Node newNode(){  return new SVGOMAnimateTransformElement();}  }
class C{  public void addTab(Component component){  this.addTab(component.getName(),this.xIcon,component);  component.addKeyListener(this.keyListener);}  }
class C{  public ServiceCall<Dialog> createDialog(final String name,final File dialogFile){  Validator.isTrue((name != null) && !name.isEmpty(),"name cannot be null or empty");  Validator.isTrue((dialogFile != null) && dialogFile.exists(),"dialogFile cannot be null or inexistent");  final RequestBody body=new MultipartBody.Builder().setType(MultipartBody.FORM).addFormDataPart(FILE,dialogFile.getName(),RequestBody.create(HttpMediaType.BINARY_FILE,dialogFile)).addFormDataPart(NAME,name).build();  final Request request=RequestBuilder.post(PATH_DIALOGS).body(body).build();  return createServiceCall(request,ResponseConverterUtils.getObject(Dialog.class));}  }
class C{  public String createFullyQualifiedModelClassName(Class<?> entityDefinition){  return namespace + ".model." + entityDefinition.getSimpleName();}  }
class C{  public void testUpdate2(){  String newValue="newValue";  String updateQuery="UPDATE " + DatabaseCreator.TEST_TABLE1 + " SET field1='"+ newValue+ "' WHERE (id > 2) and (id < 10)";  try {    int num=statement.executeUpdate(updateQuery);    int expectedUpdated=7;    assertEquals("Not all records in the database were updated",expectedUpdated,num);    String selectQuery="SELECT * FROM " + DatabaseCreator.TEST_TABLE1;    ResultSet result=statement.executeQuery(selectQuery);    while (result.next()) {      int id=result.getInt("id");      String field1=result.getString("field1");      if ((id > 2) && (id < 10)) {        assertEquals("The field field1 was not updated",newValue,field1);      } else {        assertEquals("The field field1 was not updated",DatabaseCreator.defaultString + id,field1);      }    }    result.close();  } catch (  SQLException e) {    fail("Unexpected exception" + e.getMessage());  }}  }
class C{  public boolean executeKeyEvent(KeyEvent event){  mTempRect.setEmpty();  if (!canScroll()) {    if (isFocused() && event.getKeyCode() != KeyEvent.KEYCODE_BACK) {      View currentFocused=findFocus();      if (currentFocused == this)       currentFocused=null;      View nextFocused=FocusFinder.getInstance().findNextFocus(this,currentFocused,View.FOCUS_DOWN);      return nextFocused != null && nextFocused != this && nextFocused.requestFocus(View.FOCUS_DOWN);    }    return false;  }  boolean handled=false;  if (event.getAction() == KeyEvent.ACTION_DOWN) {switch (event.getKeyCode()) {case KeyEvent.KEYCODE_DPAD_UP:      if (!event.isAltPressed()) {        handled=arrowScroll(View.FOCUS_UP);      } else {        handled=fullScroll(View.FOCUS_UP);      }    break;case KeyEvent.KEYCODE_DPAD_DOWN:  if (!event.isAltPressed()) {    handled=arrowScroll(View.FOCUS_DOWN);  } else {    handled=fullScroll(View.FOCUS_DOWN);  }break;case KeyEvent.KEYCODE_SPACE:pageScroll(event.isShiftPressed() ? View.FOCUS_UP : View.FOCUS_DOWN);break;}}return handled;}  }
class C{  public static void generateExtensionManager(File rootFolder) throws IOException {  File extManager=new File(rootFolder,EXT_MANAGER_PATH);  StringBuilder builder=new StringBuilder();  builder.append("package " + "org.eclipse.che.ide.client;\n\n");  generateImports(builder);  generateClass(builder);  FileUtils.writeStringToFile(extManager,builder.toString());}  }
class C{  public boolean isTextValid(String text){  if (text == null || settings == null) {    return false;  }  text=text.trim();  if (text.isEmpty()) {    return settings.getAllowEmptyDates();  }  LocalDate parsedDate=InternalUtilities.getParsedDateOrNull(text,settings.getFormatForDatesCommonEra(),settings.getFormatForDatesBeforeCommonEra(),settings.getFormatsForParsing(),settings.getLocale());  if (parsedDate == null) {    return false;  }  DateVetoPolicy vetoPolicy=settings.getVetoPolicy();  if (InternalUtilities.isDateVetoed(vetoPolicy,parsedDate)) {    return false;  }  return true;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case DomPackage.TEXT__TEXT:    setText((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  protected void onClusterItemRendered(ClusterStatus clusterItem,Marker marker){}  }
class C{  public static String toEncodedString(final byte[] bytes,final Charset charset){  return new String(bytes,charset != null ? charset : Charset.defaultCharset());}  }
class C{  @Override public int compareTo(SamzaResourceRequest o){  if (this.requestTimestampMs < o.requestTimestampMs)   return -1;  if (this.requestTimestampMs > o.requestTimestampMs)   return 1;  return 0;}  }
class C{  public void testGetNamespaceURI() throws Throwable {  Document doc;  Element element;  Element elementNS;  Attr attr;  Attr attrNS;  String elemNSURI;  String elemNSURINull;  String attrNSURI;  String attrNSURINull;  String nullNS=null;  doc=(Document)load("staff",builder);  element=doc.createElementNS(nullNS,"elem");  elementNS=doc.createElementNS("http://www.w3.org/DOM/Test/elem","qual:qelem");  attr=doc.createAttributeNS(nullNS,"attr");  attrNS=doc.createAttributeNS("http://www.w3.org/DOM/Test/attr","qual:qattr");  elemNSURI=elementNS.getNamespaceURI();  elemNSURINull=element.getNamespaceURI();  attrNSURI=attrNS.getNamespaceURI();  attrNSURINull=attr.getNamespaceURI();  assertEquals("nodegetnamespaceuri03_elemNSURI","http://www.w3.org/DOM/Test/elem",elemNSURI);  assertNull("nodegetnamespaceuri03_1",elemNSURINull);  assertEquals("nodegetnamespaceuri03_attrNSURI","http://www.w3.org/DOM/Test/attr",attrNSURI);  assertNull("nodegetnamespaceuri03_2",attrNSURINull);}  }
class C{  public ImageSource tilingDisabled(){  return tiling(false);}  }
class C{  public void loadByteArray(SdfBuffer buffer){  buffer.setAtIndexAndInc(byte1);  buffer.setAtIndexAndInc(byte2);  super.loadByteArray(buffer);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void keyTyped(KeyEvent e){}  }
class C{  public static byte[] truncate(byte[] array,int newLength){  if (array.length < newLength) {    return array;  } else {    byte[] truncated=new byte[newLength];    System.arraycopy(array,0,truncated,0,newLength);    return truncated;  }}  }
class C{  public String toString(){  StringBuffer buf=new StringBuffer();  buf.append(getClass().getName());  buf.append(", status: capacity=");  buf.append(capacity());  buf.append(" position=");  buf.append(position());  buf.append(" limit=");  buf.append(limit());  return buf.toString();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public ReplicationManger(ReplicatorConfig config){  this.replicatorConfig=config;  replicationRequests=new ArrayList<Pair<SolrCore,SolrCore>>();}  }
class C{  public void antientropy(){  ArrayList<Node> candidates=new ArrayList<Node>();  for (  Node n : clusterConfig.getNodes())   if (rpcService.isConnected(n.getNodeId()))   candidates.add(n);  int numNodes=candidates.size();  if (numNodes == 0)   return;  Node[] nodes=candidates.toArray(new Node[numNodes]);  int rn=random.nextInt(numNodes);  antientropy(nodes[rn]);}  }
class C{  @SuppressWarnings({"CatchGenericClass"}) public static void close(Ignite ignite,IgniteLogger log){  if (ignite != null)   try {    G.stop(ignite.name(),false);  } catch (  Throwable e) {    U.error(log,"Failed to stop grid: " + ignite.name(),e);  }}  }
class C{  private static boolean arabicCharShapesLeft(char c){  return arabicCharShapesDuel(c);}  }
class C{  public String toString(int maxKeysToPrint,boolean multiline){  return asPriorityQueue().toString(maxKeysToPrint,multiline);}  }
class C{  public final boolean edgeExplicitlyRequired(KnowledgeEdge edge){  return this.requiredEdges.contains(edge);}  }
class C{  public static ScreenSlidePageFragment create(int pageNumber){  ScreenSlidePageFragment fragment=new ScreenSlidePageFragment();  Bundle args=new Bundle();  args.putInt(ARG_PAGE,pageNumber);  fragment.setArguments(args);  return fragment;}  }
class C{  @Override public void cancelRowUpdates() throws SQLException {  try {    debugCodeCall("cancelRowUpdates");    checkClosed();    if (insertRow != null) {      throw DbException.get(ErrorCode.NO_DATA_AVAILABLE);    }    updateRow=null;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void testResourceParameterOfArrayType(){  doTest();}  }
class C{  public void terminate(){synchronized (this) {    super.notify();  }}  }
class C{  public boolean addressTypeUnique(){  return true;}  }
class C{  public LogStream printf(String format,Object... args){  if (ps != null) {    print(String.format(format,args));  }  return this;}  }
class C{  public Collection<WorldGeneratorModifier> toModifiers(Collection<String> ids){  final List<WorldGeneratorModifier> modifiers=Lists.newArrayList();  for (  String id : ids) {    final WorldGeneratorModifier modifier=this.modifierMappings.get(id.toLowerCase(Locale.ENGLISH));    if (modifier != null) {      modifiers.add(modifier);    } else {      SpongeImpl.getLogger().error("World generator modifier with id " + id + " not found. Missing plugin?");    }  }  return modifiers;}  }
class C{  public AbstractValidator(@NonNull final CharSequence errorMessage){  setErrorMessage(errorMessage);}  }
class C{  private static boolean isInVerticalTargetZone(float x,float y,float handleX,float handleYStart,float handleYEnd,float targetRadius){  if (Math.abs(x - handleX) <= targetRadius && y > handleYStart && y < handleYEnd) {    return true;  }  return false;}  }
class C{  @Override public String toString(){  return String.format("REIL function %s",getName());}  }
class C{  protected int reportReturn(String methodCall,int value){  reportAllReturns(methodCall,"" + value);  return value;}  }
class C{  public static short[] toShortArray(long[] array){  short[] result=new short[array.length];  for (int i=0; i < array.length; i++) {    result[i]=(short)array[i];  }  return result;}  }
class C{  public void sendPacket(byte[] packet,int count){}  }
class C{  public Stats snapshot(){  return new Stats(count,mean,sumOfSquaresOfDeltas,min,max);}  }
class C{  public static boolean[] toBooleanArray(short[] array){  boolean[] result=new boolean[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i] > 0;  }  return result;}  }
class C{  private boolean instanceVariableCorrectFormat(String name){  return name.startsWith("m") && Character.isUpperCase(name.charAt(1)) && !name.contains("_")&& !name.contains("-");}  }
class C{  @Override public final void perform(IR ir){  if (ir.desiredSSAOptions.getAbort())   return;  DefUse.computeDU(ir);  DefUse.recomputeSSA(ir);  Simple.copyPropagation(ir);  Simple.eliminateDeadInstructions(ir,true);  GlobalValueNumberState gvn=new GlobalValueNumberState(ir);  if (DEBUG) {    gvn.printValueNumbers();  }  ir.HIRInfo.valueNumbers=gvn;}  }
class C{  public static UnitValue[] parseInsets(String s,boolean acceptPanel){  if (s.length() == 0 || s.equals("dialog") || s.equals("panel")) {    if (acceptPanel == false)     throw new IllegalArgumentException("Insets now allowed: " + s + "\n");    boolean isPanel=s.startsWith("p");    UnitValue[] ins=new UnitValue[4];    for (int j=0; j < 4; j++)     ins[j]=isPanel ? PlatformDefaults.getPanelInsets(j) : PlatformDefaults.getDialogInsets(j);    return ins;  } else {    String[] insS=toTrimmedTokens(s,' ');    UnitValue[] ins=new UnitValue[4];    for (int j=0; j < 4; j++) {      UnitValue insSz=parseUnitValue(insS[j < insS.length ? j : insS.length - 1],UnitValue.ZERO,j % 2 == 1);      ins[j]=insSz != null ? insSz : PlatformDefaults.getPanelInsets(j);    }    return ins;  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:09.209 -0500",hash_original_method="CDE92CD41872F87599E772CCBEB9168F",hash_generated_method="09F656BFFACAFEDB59C6BC615878B4BD") public void quadTo(float x1,float y1,float x2,float y2){  isSimplePath=false;  addTaint(x1 + x2 + y1+ y2);}  }
class C{  @Override public boolean performFinish(){  view.setFilters(page.getNewFilters());  return true;}  }
class C{  public static Module moduleGetInstance(String libraryPath) throws Exception {  String providerClass=System.getProperty(SystemProperties.SIGNER_MODULE_INSTANCE_PROVIDER);  if (providerClass != null) {    Class<?> cl=Class.forName(providerClass);    if (ModuleInstanceProvider.class.isAssignableFrom(cl)) {      ModuleInstanceProvider provider=(ModuleInstanceProvider)cl.newInstance();      return provider.getInstance(libraryPath);    } else {      throw new RuntimeException("Invalid module provider class (" + cl + "), must be subclass of "+ ModuleInstanceProvider.class);    }  }  return Module.getInstance(libraryPath);}  }
class C{  public boolean bool(){  return m_val;}  }
class C{  public InternalFunctionException(Throwable cause){  super(cause);}  }
class C{  protected void tearDown(){}  }
class C{  public void onEvent(Event e) throws Exception {  log.config("Action=" + e.getTarget().getId());  if (e.getTarget().equals(window.getConfirmPanel().getButton(ConfirmPanel.A_REFRESH))) {    loadBankAccount();    window.tableChanged(null);  }}  }
class C{  private static void reply_Login2_Role(body body,MobileSessionCtx wsc,String roleId){  String form=null;  Login login=new Login(wsc.ctx);  KeyNamePair[] clients=login.getClients(new KeyNamePair(Integer.parseInt(roleId),roleId));  StringBuffer script=new StringBuffer("{\"options\":[");  for (int i=0; i < clients.length; i++) {    if (i > 0)     script.append(",");    KeyNamePair p=clients[i];    script.append("{\"text\":\"");    script.append(p.getName());    script.append("\",\"value\":\"");    script.append(p.getKey());    script.append("\"}); ");  }  script.append("]}");}  }
class C{  public void destroyPresenter(){  helper.destroyPresenter();}  }
class C{  private int epochMonthLength(int epochMonth){  return hijrahEpochMonthStartDays[epochMonth + 1] - hijrahEpochMonthStartDays[epochMonth];}  }
class C{  public double fitness(){  double fit=objectives[0];  for (int x=1; x < objectives.length; x++)   if (fit < objectives[x])   fit=objectives[x];  return fit;}  }
class C{  private void writeOsmRequiredTagsToExtras(Intent intent){  ArrayList<String> tagKeys=new ArrayList<String>();  for (  OSMTag tag : mOsmRequiredTags) {    tagKeys.add(tag.key);    if (tag.label != null) {      intent.putExtra("TAG_LABEL." + tag.key,tag.label);    }    ArrayList<String> tagValues=new ArrayList<String>();    if (tag.items != null) {      for (      OSMTagItem item : tag.items) {        tagValues.add(item.value);        if (item.label != null) {          intent.putExtra("TAG_VALUE_LABEL." + tag.key + "."+ item.value,item.label);        }      }    }    intent.putStringArrayListExtra("TAG_VALUES." + tag.key,tagValues);  }  intent.putStringArrayListExtra("TAG_KEYS",tagKeys);}  }
class C{  void stopAnimation(){  mAnimation=null;  mTransformation=null;  if (mIndeterminateDrawable instanceof Animatable) {    ((Animatable)mIndeterminateDrawable).stop();    mShouldStartAnimationDrawable=false;  }  postInvalidate();}  }
class C{  private int indexOfSearchQuery(String displayName){  if (!TextUtils.isEmpty(mSearchTerm)) {    return displayName.toLowerCase(Locale.getDefault()).indexOf(mSearchTerm.toLowerCase(Locale.getDefault()));  }  return -1;}  }
class C{  public boolean attempt(long old,long val){  return SimulatedMemory.exchangeLong(this,old,val);}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.154 -0400",hash_original_method="1DFF9D0C6A9B59BAA52722A162A8E9DE",hash_generated_method="C06D02DE4A7413F1DD23BC7D3D2D5E6C") public static boolean contentEquals(File file1,File file2) throws IOException {  boolean file1Exists=file1.exists();  if (file1Exists != file2.exists()) {    return false;  }  if (!file1Exists) {    return true;  }  if (file1.isDirectory() || file2.isDirectory()) {    throw new IOException("Can't compare directories, only files");  }  if (file1.length() != file2.length()) {    return false;  }  if (file1.getCanonicalFile().equals(file2.getCanonicalFile())) {    return true;  }  InputStream input1=null;  InputStream input2=null;  try {    input1=new FileInputStream(file1);    input2=new FileInputStream(file2);    return IOUtils.contentEquals(input1,input2);  }  finally {    IOUtils.closeQuietly(input1);    IOUtils.closeQuietly(input2);  }}  }
class C{  public static int max(int a,int b,int c){  if (b > a) {    a=b;  }  if (c > a) {    a=c;  }  return a;}  }
class C{  public static boolean isEnabled(){  return enabled;}  }
class C{  private static void logHistogramByGesture(boolean wasPanelSeen,boolean wasTap,String histogramName){  RecordHistogram.recordEnumeratedHistogram(histogramName,getPanelSeenByGestureStateCode(wasPanelSeen,wasTap),RESULTS_BY_GESTURE_BOUNDARY);}  }
class C{  public static DomainObjectExceptionBeanE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  DomainObjectExceptionBeanE object=new DomainObjectExceptionBeanE();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    java.util.Vector handledAttributes=new java.util.Vector();    while (!reader.isEndElement()) {      if (reader.isStartElement()) {        if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org","DomainObjectExceptionBean").equals(reader.getName())) {          object.setDomainObjectExceptionBean(DomainObjectExceptionBean.Factory.parse(reader));        } else {          throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());        }      } else {        reader.next();      }    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  @Override public void panDomainAxes(double percent,PlotRenderingInfo info,Point2D source){}  }
class C{  @Override protected GoogleTurnCandidateHarvest createHarvest(HostCandidate hostCandidate){  return new GoogleTurnCandidateHarvest(this,hostCandidate,getPassword());}  }
class C{  public static TrimmedInput trim(final String input,final boolean retainLineSeparator){  if (input != null) {    String inputCopy=input;    StringBuffer output=new StringBuffer();    inputCopy=StringUtils.stripEnd(inputCopy,null);    while (Pattern.matches("^(.*)(\\s-+)$",inputCopy)) {      inputCopy=StringUtils.removeEnd(inputCopy,SyntaxConstants.SHORT_OPTION_SPECIFIER);      inputCopy=StringUtils.stripEnd(inputCopy,null);    }    int noOfSpacesRemoved=0;{      int length=inputCopy.length();      inputCopy=inputCopy.trim();      noOfSpacesRemoved+=length - inputCopy.length();    }    StringBuffer buffer=new StringBuffer();    boolean startWhiteSpace=false;    for (int i=0; i < inputCopy.length(); i++) {      char ch=inputCopy.charAt(i);      buffer.append(ch);      if (PreprocessorUtils.isWhitespace(ch)) {        if (PreprocessorUtils.isSyntaxValid(buffer.toString())) {          if (startWhiteSpace) {            noOfSpacesRemoved++;          } else {            startWhiteSpace=true;            if (ch == '\n') {              if (retainLineSeparator) {                output.append("\n");              }            } else {              output.append(" ");            }          }          buffer.delete(0,buffer.length());        } else {          output.append(ch);        }      } else {        startWhiteSpace=false;        output.append(ch);      }    }    return new TrimmedInput(output.toString(),noOfSpacesRemoved);  } else {    return null;  }}  }
class C{  public void activate(){  if (!init)   init();  if (m_mTab.isTreeTab() && m_mTab.getTabNo() != 0) {    String keyColumnName=m_mTab.getKeyColumnName();    String treeName="AD_Tree_ID";    if (keyColumnName.startsWith("CM")) {      if (keyColumnName.equals("CM_Container_ID"))       treeName="AD_TreeCMC_ID"; else       if (keyColumnName.equals("CM_CStage_ID"))       treeName="AD_TreeCMS_ID"; else       if (keyColumnName.equals("CM_Template_ID"))       treeName="AD_TreeCMT_ID"; else       if (keyColumnName.equals("CM_Media_ID"))       treeName="AD_TreeCMM_ID";    }    int AD_Tree_ID=Env.getContextAsInt(Env.getCtx(),m_WindowNo,treeName,true);    log.config(keyColumnName + " -> " + treeName+ " = "+ AD_Tree_ID);    if (AD_Tree_ID == 0)     AD_Tree_ID=MTree.getDefaultAD_Tree_ID(Env.getAD_Client_ID(Env.getCtx()),m_mTab.getKeyColumnName());    if (m_tree != null)     m_tree.initTree(AD_Tree_ID);  }  activateChilds();}  }
class C{  public static String preserveXMLSpace(String data){  int nChars=data.length();  StringBuffer result=new StringBuffer(nChars);  for (int i=0; i < data.length(); i++) {    char c=data.charAt(i);switch (c) {case 10:case 13:case '\t':      result.append(' ');    break;default :  result.append(c);}}return result.toString();}  }
class C{  public PutResourceParams withContainer(@NotNull String container){  requireNonNull(container);  this.container=container;  return this;}  }
class C{  public void createSupplierMarketplace() throws Exception {  supplierMarketplace=orgSetup.createMarketplace("MARKETPLACE_DE",true,supplier);}  }
class C{  public static DBIDPair newPair(DBIDRef id1,DBIDRef id2){  return DBIDFactory.FACTORY.newPair(id1,id2);}  }
class C{  @Override public void createImageFromVm(Image image,String vmId) throws ExternalException, InternalException {  String datastore=this.getDatastore();  logger.info("Calling createImageFromVm {} on {} {}",image.getImageId(),datastore,image.getUploadFolder());  try {    getHostClient().createImageFromVm(vmId,image.getImageId(),datastore,image.getUploadFolder());  } catch (  InvalidVmPowerStateException e) {    throw new InvalidVmStateException(e);  }catch (  RpcException|InterruptedException e) {    logger.warn("Unexpected error for create_image_from_vm {} from vm {} on {} {}",image.getImageId(),vmId,this.getDatastore(),image.getUploadFolder(),e);    throw new InternalException(e);  }}  }
class C{  @SuppressWarnings("unchecked") public void release(){  for (  Receiver receiver : receiverPerSession.values()) {    if (receiver.isListeningToEventBus()) {      receiver.getReceiverQueue().leftShift(releaseVal);    }  }}  }
class C{  private int binarySearch(T targetKey){  int targetHash=hash(targetKey);  int l=0, u=num;  while (l < u) {    int m=(l + u) >> 1;    int keyHash=hash(keys[m]);    if (targetHash < keyHash || (targetHash == keyHash && ((Comparable)targetKey).compareTo(keys[m]) <= 0))     u=m; else     l=m + 1;  }  return l;}  }
class C{  protected void insureRowContinuity(){  if (selectionMode == TreeSelectionModel.CONTIGUOUS_TREE_SELECTION && selection != null && rowMapper != null) {    DefaultListSelectionModel lModel=listSelectionModel;    int min=lModel.getMinSelectionIndex();    if (min != -1) {      for (int counter=min, maxCounter=lModel.getMaxSelectionIndex(); counter <= maxCounter; counter++) {        if (!lModel.isSelectedIndex(counter)) {          if (counter == min) {            clearSelection();          } else {            TreePath[] newSel=new TreePath[counter - min];            int selectionIndex[]=rowMapper.getRowsForPaths(selection);            for (int i=0; i < selectionIndex.length; i++) {              if (selectionIndex[i] < counter) {                newSel[selectionIndex[i] - min]=selection[i];              }            }            setSelectionPaths(newSel);            break;          }        }      }    }  } else   if (selectionMode == TreeSelectionModel.SINGLE_TREE_SELECTION && selection != null && selection.length > 1) {    setSelectionPath(selection[0]);  }}  }
class C{  protected void fireClockUpdate(TimerStatus timerStatus){  fireUpdateTime(TimeEvent.create(this,time,systemTime,simTime,timerStatus));}  }
class C{  public void unlock(){}  }
class C{  public void sendXNetMessage(XNetMessage m,XNetListener replyTo){  lastSender=replyTo;  destination.sendXNetMessage(m,replyTo);}  }
class C{  public static int commentStart(String line){  boolean insidequote=false;  for (int i=0; i < line.length(); i++) {    char current=line.charAt(i);    if (current == '\'') {      insidequote=!insidequote;    } else     if (!insidequote) {      if (current == ';') {        return i;      }    }  }  return -1;}  }
class C{  @ZeppelinApi public void show(Object o){  show(o,maxResult);}  }
class C{  public static String substitute(String string,Map<String,?> params){  if (params == null) {    return string;  }  StringBuilder res=new StringBuilder();  StringTokenizer st=new StringTokenizer(string,"[]",true);  String lastToken="";  while (st.hasMoreTokens()) {    String token=st.nextToken();    if (lastToken.equals("[")) {      Object temp=params.get(token);      if (temp != null) {        token=temp.toString();      } else {        token="";      }    }    lastToken=token.trim();    if (token.equals("[") || token.equals("]")) {      token="";    }    res.append(token);  }  return res.toString();}  }
class C{  public static void captureAudio(ActionListener response){  Display.getInstance().captureAudio(response);}  }
class C{  public void mousePressed(MouseEvent e){  if (log.isDebugEnabled()) {    log.debug("pressed " + (e.getModifiers() & MouseEvent.BUTTON1_MASK) + " "+ e.isPopupTrigger()+ " "+ (e.getModifiers() & (MouseEvent.ALT_MASK + MouseEvent.META_MASK + MouseEvent.CTRL_MASK))+ (" " + MouseEvent.ALT_MASK + "/"+ MouseEvent.META_MASK+ "/"+ MouseEvent.CTRL_MASK));  }  JToggleButton button=(JToggleButton)e.getSource();  if (e.isPopupTrigger()) {    popup.show(e.getComponent(),e.getX(),e.getY());  } else   if (button.isEnabled() && ((e.getModifiers() & MouseEvent.BUTTON1_MASK) != 0) && ((e.getModifiers() & (MouseEvent.ALT_MASK + MouseEvent.META_MASK + MouseEvent.CTRL_MASK)) == 0)&& !isLockable) {    changeState(true);  }  button.setSelected(isOn);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case DomPackage.DOCLET_ELEMENT__BEGIN:    setBegin(BEGIN_EDEFAULT);  return;case DomPackage.DOCLET_ELEMENT__END:setEnd(END_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public static void doGet(final HashMap<String,Object> conProp,final RequestHeader requestHeader,final OutputStream respond,final ClientIdentification.Agent agent){  ByteCountOutputStream countedRespond=null;  try {    final int reqID=requestHeader.hashCode();    final Date requestDate=new Date();    conProp.put(HeaderFramework.CONNECTION_PROP_REQUEST_START,Long.valueOf(requestDate.getTime()));    sb.proxyLastAccess=System.currentTimeMillis();    countedRespond=new ByteCountOutputStream(respond,"PROXY");    final String ip=(String)conProp.get(HeaderFramework.CONNECTION_PROP_CLIENTIP);    DigestURL url=null;    try {      url=HeaderFramework.getRequestURL(conProp);      if (log.isFine())       log.fine(reqID + " GET " + url);      if (log.isFinest())       log.finest(reqID + "    header: " + requestHeader);      if (redirectorEnabled) {synchronized (redirectorProcess) {          redirectorWriter.println(url.toNormalform(true));          redirectorWriter.flush();        }        final String newUrl=redirectorReader.readLine();        if (!newUrl.equals("")) {          try {            url=new DigestURL(newUrl);          } catch (          final MalformedURLException e) {          }        }        if (log.isFinest())         log.finest(reqID + "    using redirector to " + url);        conProp.put(HeaderFramework.CONNECTION_PROP_HOST,url.getHost() + ":" + url.getPort());        conProp.put(HeaderFramework.CONNECTION_PROP_PATH,url.getPath());        requestHeader.put(HeaderFramework.HOST,url.getHost() + ":" + url.getPort());        requestHeader.put(HeaderFramework.CONNECTION_PROP_PATH,url.getPath());      }    } catch (    final MalformedURLException e) {      final String host=(String)conProp.get(HeaderFramework.CONNECTION_PROP_HOST);      final String path=(String)conProp.get(HeaderFramework.CONNECTION_PROP_PATH);      final String args=(String)conProp.get(HeaderFramework.CONNECTION_PROP_ARGS);      final String errorMsg="ERROR: internal error with url generation: host=" + host + ", path="+ path+ ", args="+ args;      log.severe(errorMsg);      HTTPDemon.sendRespondError(conProp,countedRespond,4,501,null,errorMsg,e);      return;    }    if (Switchboard.urlBlacklist.isListed(BlacklistType.PROXY,url)) {      log.info("AGIS blocking of host '" + url.getHost() + "'");      HTTPDemon.sendRespondError(conProp,countedRespond,4,403,null,"URL '" + url.getHost() + "' blocked by yacy proxy (blacklisted)",null);      return;    }    handleOutgoingCookies(requestHeader,url.getHost(),ip);    prepareRequestHeader(conProp,requestHeader,url.getHost().toLowerCase());    final ResponseHeader cachedResponseHeader=Cache.getResponseHeader(url.hash());    if (cachedResponseHeader == null) {      if (log.isFinest())       log.finest(reqID + " page not in cache: fulfill request from web");      fulfillRequestFromWeb(conProp,url,requestHeader,cachedResponseHeader,countedRespond,agent);    } else {      final Request request=new Request(null,url,requestHeader.referer() == null ? null : requestHeader.referer().hash(),"",cachedResponseHeader.lastModified(),sb.crawler.defaultProxyProfile.handle(),0,sb.crawler.defaultProxyProfile.timezoneOffset());      final Response response=new Response(request,requestHeader,cachedResponseHeader,sb.crawler.defaultProxyProfile,true,null);      final byte[] cacheContent=Cache.getContent(url.hash());      if (cacheContent != null && response.isFreshForProxy()) {        if (log.isFinest())         log.finest(reqID + " fulfill request from cache");        fulfillRequestFromCache(conProp,url,requestHeader,cachedResponseHeader,cacheContent,countedRespond);      } else {        if (log.isFinest())         log.finest(reqID + " fulfill request from web");        fulfillRequestFromWeb(conProp,url,requestHeader,cachedResponseHeader,countedRespond,agent);      }    }  } catch (  final Exception e) {    try {      final String exTxt=e.getMessage();      if ((exTxt != null) && (exTxt.startsWith("Socket closed"))) {        forceConnectionClose(conProp);      } else       if (!conProp.containsKey(HeaderFramework.CONNECTION_PROP_PROXY_RESPOND_HEADER)) {        final String errorMsg="Unexpected Error. " + e.getClass().getName() + ": "+ e.getMessage();        HTTPDemon.sendRespondError(conProp,countedRespond,4,501,null,errorMsg,e);        log.severe(errorMsg);      } else {        forceConnectionClose(conProp);      }    } catch (    final Exception ee) {      forceConnectionClose(conProp);    }  } finally {    try {      if (countedRespond != null)       countedRespond.flush(); else       if (respond != null)       respond.flush();    } catch (    final Exception e) {    }    if (countedRespond != null)     countedRespond.finish();    conProp.put(HeaderFramework.CONNECTION_PROP_REQUEST_END,Long.valueOf(System.currentTimeMillis()));    conProp.put(HeaderFramework.CONNECTION_PROP_PROXY_RESPOND_SIZE,(countedRespond != null) ? Long.toString(countedRespond.getCount()) : -1L);    logProxyAccess(conProp);  }}  }
class C{  protected Node newNode(){  return new SVGOMAnimateElement();}  }
class C{  public MoveSourceEdit(int offset,int length){  super(offset,length);}  }
class C{  public int size(){  return size;}  }
class C{  private PrinterCapabilitiesInfo checkPrinter(final String url,final PrinterId printerId) throws Exception {  if (url == null || (!url.startsWith("http://") && !url.startsWith("https://"))) {    return null;  }  URL printerURL=new URL(url);  String clientUrl=url.substring(0,url.substring(0,url.lastIndexOf('/')).lastIndexOf('/'));  URL clientURL=new URL(clientUrl);  CupsClient client=new CupsClient(clientURL);  CupsPrinter testPrinter=client.getPrinter(printerURL);  if (testPrinter == null) {    Log.e(CupsPrintApp.LOG_TAG,"Printer not found");  } else {    IppGetPrinterAttributesOperation op=new IppGetPrinterAttributesOperation();    PrinterCapabilitiesInfo.Builder builder=new PrinterCapabilitiesInfo.Builder(printerId);    IppResult ippAttributes=op.request(printerURL,new HashMap<String,String>());    boolean colorDefault=false;    int colorMode=0;    int marginMilsTop=0, marginMilsRight=0, marginMilsBottom=0, marginMilsLeft=0;    for (    AttributeGroup attributeGroup : ippAttributes.getAttributeGroupList()) {      for (      Attribute attribute : attributeGroup.getAttribute()) {        if ("media-default".equals(attribute.getName())) {          final PrintAttributes.MediaSize mediaSize=CupsPrinterDiscoveryUtils.getMediaSizeFromAttributeValue(attribute.getAttributeValue().get(0));          if (mediaSize != null) {            builder.addMediaSize(mediaSize,true);          }        } else         if ("media-supported".equals(attribute.getName())) {          for (          AttributeValue attributeValue : attribute.getAttributeValue()) {            final PrintAttributes.MediaSize mediaSize=CupsPrinterDiscoveryUtils.getMediaSizeFromAttributeValue(attributeValue);            if (mediaSize != null) {              builder.addMediaSize(mediaSize,false);            }          }        } else         if ("printer-resolution-default".equals(attribute.getName())) {          builder.addResolution(CupsPrinterDiscoveryUtils.getResolutionFromAttributeValue("0",attribute.getAttributeValue().get(0)),true);        } else         if ("printer-resolution-supported".equals(attribute.getName())) {          for (          AttributeValue attributeValue : attribute.getAttributeValue()) {            builder.addResolution(CupsPrinterDiscoveryUtils.getResolutionFromAttributeValue(attributeValue.getTag(),attributeValue),false);          }        } else         if ("print-color-mode-supported".equals(attribute.getName())) {          for (          AttributeValue attributeValue : attribute.getAttributeValue()) {            if ("monochrome".equals(attributeValue.getValue())) {              colorMode|=PrintAttributes.COLOR_MODE_MONOCHROME;            } else             if ("color".equals(attributeValue.getValue())) {              colorMode|=PrintAttributes.COLOR_MODE_COLOR;            }          }        } else         if ("print-color-mode-default".equals(attribute.getName())) {          colorDefault=true;        } else         if ("media-left-margin-supported".equals(attribute.getName())) {          for (          AttributeValue attributeValue : attribute.getAttributeValue()) {            if (Integer.parseInt(attributeValue.getValue()) < marginMilsLeft || marginMilsLeft == 0) {              marginMilsLeft=(int)(MM_IN_MILS * Integer.parseInt(attributeValue.getValue()));            }          }        } else         if ("media-right-margin-supported".equals(attribute.getName())) {          for (          AttributeValue attributeValue : attribute.getAttributeValue()) {            if (Integer.parseInt(attributeValue.getValue()) < marginMilsRight || marginMilsRight == 0) {              marginMilsRight=(int)(MM_IN_MILS * Integer.parseInt(attributeValue.getValue()));            }          }        } else         if ("media-top-margin-supported".equals(attribute.getName())) {          for (          AttributeValue attributeValue : attribute.getAttributeValue()) {            if (Integer.parseInt(attributeValue.getValue()) < marginMilsTop || marginMilsTop == 0) {              marginMilsTop=(int)(MM_IN_MILS * Integer.parseInt(attributeValue.getValue()));            }          }        } else         if ("media-bottom-margin-supported".equals(attribute.getName())) {          for (          AttributeValue attributeValue : attribute.getAttributeValue()) {            if (Integer.parseInt(attributeValue.getValue()) < marginMilsBottom || marginMilsBottom == 0) {              marginMilsBottom=(int)(MM_IN_MILS * Integer.parseInt(attributeValue.getValue()));            }          }        }      }    }    builder.setColorModes(colorMode,colorDefault ? PrintAttributes.COLOR_MODE_COLOR : PrintAttributes.COLOR_MODE_MONOCHROME);    builder.setMinMargins(new PrintAttributes.Margins(marginMilsLeft,marginMilsTop,marginMilsRight,marginMilsBottom));    return builder.build();  }  return null;}  }
class C{  public TOMConfiguration(int processId,String configHome){  super(processId,configHome);}  }
class C{  public boolean contains(@Nullable String spaceName,int part,KeyCacheObject key,byte[] keyBytes) throws IgniteCheckedException {  GridOffHeapPartitionedMap m=offheap(spaceName);  return m != null && m.contains(part,U.hash(key),keyBytes(key,keyBytes));}  }
class C{  public boolean waitForCompletion(){  return waitForCompletion;}  }
class C{  private Ignite startGridNoOptimize(String gridName) throws Exception {  return G.start(getConfiguration(gridName));}  }
class C{  public CImportModuleAction(final JFrame parent,final IDatabase database){  super("Import IDB file");  m_parent=Preconditions.checkNotNull(parent,"IE01896: Parent argument can't be null");  m_database=Preconditions.checkNotNull(database,"IE01897: Database argument can't be null");  putValue(ACCELERATOR_KEY,HotKeys.IMPORT_MODULE_HK.getKeyStroke());  putValue(MNEMONIC_KEY,(int)"HK_MENU_IMPORT_MODULE".charAt(0));}  }
class C{  public void custom(String name,Closure<String> formatter){  custom(name,null);}  }
class C{  public ServiceNotPublishedException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public void addPortListener(GridPortListener lsnr){  assert lsnr != null;synchronized (lsnrs) {    lsnrs.add(lsnr);  }}  }
class C{  public String GetName(){  return ObjectName;}  }
class C{  public boolean equals(Object other){  if (other == this)   return true;  if (other == null)   return false;  if (other.getClass() != this.getClass())   return false;  Interval2D that=(Interval2D)other;  return this.x.equals(that.x) && this.y.equals(that.y);}  }
class C{  public UDAnimator resume(){  AnimatorUtil.resume(getAnimator());  if (mTarget != null) {    mTarget.resumeAnimation();  }  return this;}  }
class C{  void composeMessage(final Mail mail,final String textContent,final String htmlContent,final Map<String,byte[]> attachments,final List<String> mailTemplateChain,final String shopCode,final String locale,final String templateName) throws MessagingException, ClassNotFoundException, IOException {  if (textContent == null || htmlContent == null) {    if (textContent != null) {      mail.setTextVersion(textContent);    }    if (htmlContent != null) {      mail.setHtmlVersion(htmlContent);      inlineResources(mail,htmlContent,mailTemplateChain,shopCode,locale,templateName);      addAttachments(mail,attachments);    }  } else {    mail.setTextVersion(textContent);    mail.setHtmlVersion(htmlContent);    inlineResources(mail,htmlContent,mailTemplateChain,shopCode,locale,templateName);    addAttachments(mail,attachments);  }}  }
class C{  public ConnectionPoolDataSource createPoolDataSource(CConnection connection){  throw new UnsupportedOperationException("Not supported/implemented");}  }
class C{  public void reverseAllEdges(){  if (!directed)   return;  int n=allNodes.numObjs;  Iterator i=indexOutInHash.values().iterator();  for (int k=0; k < n; k++) {    IndexOutIn ioi=(IndexOutIn)i.next();    Bag tmpB=ioi.out;    ioi.out=ioi.in;    ioi.in=tmpB;    if (ioi.in != null)     for (int j=0; j < ioi.in.numObjs; j++) {      Edge e=(Edge)ioi.in.objs[j];      Object tmpO=e.from;      e.from=e.to;      e.to=tmpO;      int tmpI=e.indexFrom;      e.indexFrom=e.indexTo;      e.indexTo=tmpI;    }  }}  }
class C{  private void $$$setupUI$$$(){  contentPane=new JPanel();  contentPane.setLayout(new GridBagLayout());  final JLabel label1=new JLabel();  this.$$$loadLabelText$$$(label1,ResourceBundle.getBundle("org/apache/zest/envisage/detail/ImportedByPane").getString("CTL_Name.Text"));  GridBagConstraints gbc;  gbc=new GridBagConstraints();  gbc.gridx=0;  gbc.gridy=1;  gbc.anchor=GridBagConstraints.WEST;  contentPane.add(label1,gbc);  final JPanel spacer1=new JPanel();  gbc=new GridBagConstraints();  gbc.gridx=1;  gbc.gridy=1;  gbc.fill=GridBagConstraints.HORIZONTAL;  contentPane.add(spacer1,gbc);  final JPanel spacer2=new JPanel();  gbc=new GridBagConstraints();  gbc.gridx=0;  gbc.gridy=2;  gbc.fill=GridBagConstraints.VERTICAL;  contentPane.add(spacer2,gbc);  nameLabel=new JLabel();  nameLabel.setText("Label");  gbc=new GridBagConstraints();  gbc.gridx=2;  gbc.gridy=1;  gbc.anchor=GridBagConstraints.WEST;  contentPane.add(nameLabel,gbc);  final JLabel label2=new JLabel();  this.$$$loadLabelText$$$(label2,ResourceBundle.getBundle("org/apache/zest/envisage/detail/ImportedByPane").getString("CTL_Class.Text"));  gbc=new GridBagConstraints();  gbc.gridx=0;  gbc.gridy=3;  gbc.anchor=GridBagConstraints.WEST;  contentPane.add(label2,gbc);  classLabel=new JLabel();  classLabel.setText("Label");  gbc=new GridBagConstraints();  gbc.gridx=2;  gbc.gridy=3;  gbc.weightx=1.0;  gbc.anchor=GridBagConstraints.WEST;  contentPane.add(classLabel,gbc);  final JPanel spacer3=new JPanel();  gbc=new GridBagConstraints();  gbc.gridx=0;  gbc.gridy=4;  gbc.weighty=1.0;  gbc.fill=GridBagConstraints.VERTICAL;  contentPane.add(spacer3,gbc);  final JPanel spacer4=new JPanel();  gbc=new GridBagConstraints();  gbc.gridx=0;  gbc.gridy=0;  gbc.fill=GridBagConstraints.VERTICAL;  contentPane.add(spacer4,gbc);}  }
class C{  public void testUnknownHandlingDefault() throws Exception {  ObjectMapper mapper=new ObjectMapper();  try {    mapper.readValue(new StringReader(JSON_UNKNOWN_FIELD),TestBean.class);  } catch (  JsonMappingException jex) {    verifyException(jex,"Unrecognized field \"foo\"");  }}  }
class C{  public boolean isSelected(){  return selected;}  }
class C{  public Keepaway(long seed){  this(seed,100,100);}  }
class C{  public void sendMessage(SIPMessage sipMessage) throws IOException {  long time=System.currentTimeMillis();  this.sendMessage(sipMessage,sipMessage instanceof SIPRequest);  if (this.sipStack.getStackLogger().isLoggingEnabled(ServerLogger.TRACE_MESSAGES))   logMessage(sipMessage,peerAddress,peerPort,time);}  }
class C{  protected Option(final String name,final String value){  mName=name;  mValue=value;}  }
class C{  public void configureBaudRate(String rate){}  }
class C{  public static void cancel(Context context,int id){  NotificationManager notificationManager=(NotificationManager)context.getSystemService(Context.NOTIFICATION_SERVICE);  notificationManager.cancel(id);}  }
class C{  public void add(int index,E element){  if (index > size || index < 0)   throw new IndexOutOfBoundsException("Index: " + index + ", Size: "+ size);  ensureCapacity(size + 1);  System.arraycopy(elementData,index,elementData,index + 1,size - index);  elementData[index]=element;  size++;}  }
class C{  public int calculateIncrementalOffset(int firstVisiblePosition,int visibleItemCount){  SparseArray<Integer> previousPositions=mPositions;  mPositions=new SparseArray<>();  for (int i=0; i < visibleItemCount; i++) {    mPositions.put(firstVisiblePosition + i,mListView.getListChildAt(i).getTop());  }  if (previousPositions != null) {    for (int i=0; i < previousPositions.size(); i++) {      int previousPosition=previousPositions.keyAt(i);      int previousTop=previousPositions.get(previousPosition);      Integer newTop=mPositions.get(previousPosition);      if (newTop != null) {        return newTop - previousTop;      }    }  }  return 0;}  }
class C{  private void kickXP(Team offense,Team defense){  if (playingOT && bottomOT && (((numOT % 2 == 0) && awayScore > homeScore) || ((numOT % 2 != 0) && homeScore > awayScore))) {    gameEventLog+=getEventPrefix() + " " + tdInfo+ "\n"+ offense.abbr+ " wins on a walk-off touchdown!";  } else   if (!playingOT && gameTime <= 0 && ((homeScore - awayScore > 2) || (awayScore - homeScore > 2))) {    if ((Math.abs(homeScore - awayScore) < 7) && ((gamePoss && homeScore > awayScore) || (!gamePoss && awayScore > homeScore)))     gameEventLog+=getEventPrefix() + " " + tdInfo+ "\n"+ offense.abbr+ " wins on a walk-off touchdown!"; else     gameEventLog+=getEventPrefix() + " " + tdInfo;  } else {    if ((numOT >= 3) || (((gamePoss && (awayScore - homeScore) == 2) || (!gamePoss && (homeScore - awayScore) == 2)) && gameTime < 300)) {      boolean successConversion=false;      if (Math.random() <= 0.50) {        int blockAdv=offense.getCompositeOLRush() - defense.getCompositeF7Rush();        int yardsGain=(int)((offense.getRB(0).ratRushSpd + blockAdv) * Math.random() / 6);        if (yardsGain > 5) {          successConversion=true;          if (gamePoss) {            homeScore+=2;          } else {            awayScore+=2;          }          addPointsQuarter(2);          gameEventLog+=getEventPrefix() + " " + tdInfo+ " "+ offense.getRB(0).name+ " rushed for the 2pt conversion.";        } else {          gameEventLog+=getEventPrefix() + " " + tdInfo+ " "+ offense.getRB(0).name+ " stopped at the line of scrimmage, failed the 2pt conversion.";        }      } else {        int pressureOnQB=defense.getCompositeF7Pass() * 2 - offense.getCompositeOLPass();        double completion=(normalize(offense.getQB(0).ratPassAcc) + offense.getWR(0).ratRecCat - defense.getCB(0).ratCBCov) / 2 + 25 - pressureOnQB / 20;        if (100 * Math.random() < completion) {          successConversion=true;          if (gamePoss) {            homeScore+=2;          } else {            awayScore+=2;          }          addPointsQuarter(2);          gameEventLog+=getEventPrefix() + " " + tdInfo+ " "+ offense.getQB(0).name+ " completed the pass to "+ offense.getWR(0).name+ " for the 2pt conversion.";        } else {          gameEventLog+=getEventPrefix() + " " + tdInfo+ " "+ offense.getQB(0).name+ "'s pass incomplete to "+ offense.getWR(0).name+ " for the failed 2pt conversion.";        }      }    } else {      if (Math.random() * 100 < 23 + offense.getK(0).ratKickAcc && Math.random() > 0.01) {        if (gamePoss) {          homeScore+=1;          HomeKStats[0]++;          HomeKStats[1]++;        } else {          awayScore+=1;          AwayKStats[0]++;          AwayKStats[1]++;        }        gameEventLog+=getEventPrefix() + " " + tdInfo+ " "+ offense.getK(0).name+ " made the XP.";        addPointsQuarter(1);        offense.getK(0).statsXPMade++;      } else {        gameEventLog+=getEventPrefix() + " " + tdInfo+ " "+ offense.getK(0).name+ " missed the XP.";        if (gamePoss) {          HomeKStats[1]++;        } else {          AwayKStats[1]++;        }      }      offense.getK(0).statsXPAtt++;    }  }}  }
class C{  public PcRunner(GraphWrapper graphWrapper,Parameters params){  super(graphWrapper.getGraph(),params);}  }
class C{  public Object jsass_import_stack_push(int id) throws URISyntaxException {  this.importStack.push(id);  return null;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  ZPseudoComp uiComp=getUIComp(stack);  if (uiComp != null) {    return new Integer(uiComp.getTrueX());  }  return null;}  }
class C{  public void test_formatLjava_lang_ObjectLjava_lang_StringBufferLjava_text_FieldPosition(){  try {    DateFormat format=DateFormat.getDateTimeInstance(DateFormat.SHORT,DateFormat.SHORT,Locale.US);    Date current=new Date();    StringBuffer toAppend=new StringBuffer();    FieldPosition fp=new FieldPosition(DateFormat.YEAR_FIELD);    StringBuffer sb=format.format(current,toAppend,fp);    SimpleDateFormat sdf=new SimpleDateFormat("M/d/yy h:mm a",Locale.US);    assertTrue("Incorrect date format",sdf.format(current).equals(sb.toString()));    assertTrue("Incorrect beginIndex of filed position",fp.getBeginIndex() == sb.lastIndexOf("/") + 1);    assertTrue("Incorrect endIndex of filed position",fp.getEndIndex() == sb.lastIndexOf("/") + 3);  } catch (  Exception e) {    fail("Unexpected exception " + e.toString());  }}  }
class C{  private static void oioCopy(File source,FileOutputStream fos,FileInputStream fis) throws IOException {  int size=(int)(source.length() < MAX_TRANSFER_SIZE ? source.length() : MAX_TRANSFER_SIZE);  byte[] buffer=new byte[size];  int read;  while ((read=fis.read(buffer)) > 0) {    fos.write(buffer,0,read);  }}  }
class C{  public synchronized boolean retainAll(Collection c){  return super.retainAll(c);}  }
class C{  public synchronized void readContents(String url,Connection conn) throws SQLException {  isH2=url.startsWith("jdbc:h2:");  if (isH2) {    PreparedStatement prep=conn.prepareStatement("SELECT UPPER(VALUE) FROM INFORMATION_SCHEMA.SETTINGS " + "WHERE NAME=?");    prep.setString(1,"MODE");    ResultSet rs=prep.executeQuery();    rs.next();    if ("MYSQL".equals(rs.getString(1))) {      isH2ModeMySQL=true;    }    rs.close();    prep.close();  }  isDB2=url.startsWith("jdbc:db2:");  isSQLite=url.startsWith("jdbc:sqlite:");  isOracle=url.startsWith("jdbc:oracle:");  isPostgreSQL=url.startsWith("jdbc:postgresql:") || url.startsWith("jdbc:vertica:");  isMySQL=url.startsWith("jdbc:mysql:");  isDerby=url.startsWith("jdbc:derby:");  isFirebird=url.startsWith("jdbc:firebirdsql:");  isMSSQLServer=url.startsWith("jdbc:sqlserver:");  DatabaseMetaData meta=conn.getMetaData();  String defaultSchemaName=getDefaultSchemaName(meta);  String[] schemaNames=getSchemaNames(meta);  schemas=new DbSchema[schemaNames.length];  for (int i=0; i < schemaNames.length; i++) {    String schemaName=schemaNames[i];    boolean isDefault=defaultSchemaName == null || defaultSchemaName.equals(schemaName);    DbSchema schema=new DbSchema(this,schemaName,isDefault);    if (isDefault) {      defaultSchema=schema;    }    schemas[i]=schema;    String[] tableTypes={"TABLE","SYSTEM TABLE","VIEW","SYSTEM VIEW","TABLE LINK","SYNONYM","EXTERNAL"};    schema.readTables(meta,tableTypes);    if (!isPostgreSQL && !isDB2) {      schema.readProcedures(meta);    }  }  if (defaultSchema == null) {    String best=null;    for (    DbSchema schema : schemas) {      if ("dbo".equals(schema.name)) {        defaultSchema=schema;        break;      }      if (defaultSchema == null || best == null || schema.name.length() < best.length()) {        best=schema.name;        defaultSchema=schema;      }    }  }}  }
class C{  public JsonWriter name(String name) throws IOException {  if (name == null) {    throw new NullPointerException("name == null");  }  if (deferredName != null) {    throw new IllegalStateException();  }  if (stackSize == 0) {    throw new IllegalStateException("JsonWriter is closed.");  }  deferredName=name;  return this;}  }
class C{  static boolean isRegistered(Set<Pair<IDKey,IDKey>> REGISTRY,final Object lhs,final Object rhs){  final Pair<IDKey,IDKey> pair=getRegisterPair(lhs,rhs);  final Pair<IDKey,IDKey> swappedPair=Pair.of(pair.getLeft(),pair.getRight());  return REGISTRY != null && (REGISTRY.contains(pair) || REGISTRY.contains(swappedPair));}  }
class C{  public static Bitmap drawableTobitmap(Context mContext,int drawable){  Drawable myDrawable=mContext.getResources().getDrawable(drawable);  return (myDrawable != null) ? ((BitmapDrawable)myDrawable).getBitmap() : null;}  }
class C{  private void updateOperatorRevenueShare(Organization org,BigDecimal operatorRevenueShare) throws NonUniqueBusinessKeyException, ValidationException {  if (operatorRevenueShareIsInvalid(operatorRevenueShare,org.getGrantedRoleTypes())) {    ValidationException validationException=new ValidationException(ValidationException.ReasonEnum.INVALID_OPERATOR_REVENUE_SHARE,null,null);    logger.logError(Log4jLogger.SYSTEM_LOG,validationException,LogMessageIdentifier.ERROR_UPDATE_ORGANIZATION_FAILED_INVALID_OPERATOR_REVENUE_SHARE);    throw validationException;  } else   if (operatorRevenueShare != null) {    if (org.getOperatorPriceModel() != null) {      org.getOperatorPriceModel().setRevenueShare(operatorRevenueShare);    } else {      createOperatorPriceModel(org,operatorRevenueShare);    }  }}  }
class C{  static public String binary2ascii(byte[] data,int length){  if (data == null)   return null;  final int size=(length * 2) + 2;  byte[] asciiData=new byte[size];  asciiData[0]=(byte)'0';  asciiData[1]=(byte)'x';  for (int i=0; i < length; i++) {    int j=i * 2;    int v=(data[i] & 0xf0);    v=v >> 4;    if (v < 10)     asciiData[j + 2]=(byte)('0' + v); else     asciiData[j + 2]=(byte)('A' + (v - 10));    v=((data[i] & 0xf));    if (v < 10)     asciiData[j + 1 + 2]=(byte)('0' + v); else     asciiData[j + 1 + 2]=(byte)('A' + (v - 10));  }  return new String(asciiData);}  }
class C{  public static void applyToOrSetGone(ImageHolder imageHolder,ImageView imageView,String tag){  boolean imageSet=applyTo(imageHolder,imageView,tag);  if (imageView != null) {    if (imageSet) {      imageView.setVisibility(View.VISIBLE);    } else {      imageView.setVisibility(View.GONE);    }  }}  }
class C{  public double computeAverageLocalOfObservations(int[] newOrdering) throws Exception {  double actualMI=lastAverage;  int[] originalDiscrete=discObservations;  int[] newDiscrete=MatrixUtils.extractSelectedTimePoints(originalDiscrete,newOrdering);  setDiscreteData(contObservations,newDiscrete);  double newMI=computeAverageLocalOfObservations();  lastAverage=actualMI;  setDiscreteData(contObservations,originalDiscrete);  return newMI;}  }
class C{  private ICloseableIterator<IBindingSet> doExternalMockIVServiceCall(final MockIVReturningServiceCall serviceCall,final IBindingSet left[]) throws Exception {  return doNonBigdataMockIVServiceCall(serviceCall,left);}  }
class C{  private static String[] tokenizeToStringArray(String str,String delimiters){  if (str == null) {    return null;  }  StringTokenizer st=new StringTokenizer(str,delimiters);  List<String> tokens=new ArrayList<String>();  while (st.hasMoreTokens()) {    String token=st.nextToken();    token=token.trim();    if (token.length() > 0) {      tokens.add(token);    }  }  return tokens.toArray(new String[tokens.size()]);}  }
class C{  private String anchorHash(final ConfProxyProperties conf) throws Exception {  byte[] anchorBytes=null;  try {    Path anchorPath=Paths.get(conf.getProxyAnchorPath());    anchorBytes=Files.readAllBytes(anchorPath);  } catch (  IOException e) {    fail("Failed to load proxy '" + conf.getInstance() + "' anchor file: ",e);  }  String hash=CryptoUtils.hexDigest(CryptoUtils.SHA224_ID,anchorBytes);  return StringUtils.join(hash.toUpperCase().split("(?<=\\G.{2})"),':');}  }
class C{  public static void v(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_VERBOSE) {    return;  }  Log.v(tag,msg,throwable);}  }
class C{  public XhtmlFrameSetDocument appendBody(Element value){  body.addElement(value);  return (this);}  }
class C{  public static Integer createServerCache() throws Exception {  ConflationDUnitTest test=new ConflationDUnitTest();  cache=test.createCache(new Properties());  AttributesFactory factory=new AttributesFactory();  factory.setScope(Scope.DISTRIBUTED_ACK);  factory.setEnableConflation(true);  RegionAttributes attrs=factory.create();  cache.createRegion(REGION_NAME1,attrs);  cache.createRegion(REGION_NAME2,attrs);  CacheServer server=cache.addCacheServer();  int port=AvailablePort.getRandomAvailablePort(AvailablePort.SOCKET);  server.setPort(port);  server.setNotifyBySubscription(true);  server.setSocketBufferSize(32768);  server.start();  return new Integer(server.getPort());}  }
class C{  public void startDTD(String name,String publicId,String systemId) throws org.xml.sax.SAXException {}  }
class C{  public void draw(Canvas c,Rect bounds){  final RectF arcBounds=mTempBounds;  arcBounds.set(bounds);  arcBounds.inset(mStrokeInset,mStrokeInset);  final float startAngle=(mStartTrim + mRotation) * 360;  final float endAngle=(mEndTrim + mRotation) * 360;  float sweepAngle=endAngle - startAngle;  mPaint.setColor(mColors[mColorIndex]);  c.drawArc(arcBounds,startAngle,sweepAngle,false,mPaint);  drawTriangle(c,startAngle,sweepAngle,bounds);  if (mAlpha < 255) {    mCirclePaint.setColor(mBackgroundColor);    mCirclePaint.setAlpha(255 - mAlpha);    c.drawCircle(bounds.exactCenterX(),bounds.exactCenterY(),bounds.width() / 2,mCirclePaint);  }}  }
class C{  static boolean isWhiteSpace(StringBuffer buf){  int n=buf.length();  for (int i=0; i < n; i++) {    if (!isWhiteSpace(buf.charAt(i)))     return false;  }  return true;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public Object invoke(String mthdName,boolean srvKeepBinary,Object[] args) throws IgniteCheckedException, NoSuchMethodException {  if (proxy instanceof PlatformService) {    return ((PlatformService)proxy).invokeMethod(mthdName,srvKeepBinary,args);  } else {    assert proxy instanceof GridServiceProxy;    if (!srvKeepBinary)     args=PlatformUtils.unwrapBinariesInArray(args);    Method mtd=getMethod(serviceClass,mthdName,args);    return ((GridServiceProxy)proxy).invokeMethod(mtd,args);  }}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.TAGGED_TEMPLATE_STRING__TARGET:    return getTarget();case N4JSPackage.TAGGED_TEMPLATE_STRING__TEMPLATE:  return getTemplate();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void doInitiatorAliasSet(StorageSystem storage,Initiator initiator,String initiatorAlias) throws Exception {  try {    checkIfProviderSupportsAliasOperations(storage);    CIMObjectPath hwManagementIDSvcPath=_cimPath.getStorageHardwareIDManagementService(storage);    CIMObjectPath shidPath=getSHIDPathForAliasOperation(storage,hwManagementIDSvcPath,initiator);    CIMArgument[] inArgs=_helper.getEMCInitiatorAliasSetArgs(shidPath,initiatorAlias);    CIMArgument[] outArgs=new CIMArgument[5];    _helper.invokeMethod(storage,hwManagementIDSvcPath,SmisConstants.INITIATOR_ALIAS_SET,inArgs,outArgs);  } catch (  WBEMException e) {    _log.error("Problem making SMI-S call: ",e);    throw e;  }catch (  Exception e) {    _log.error("Unexpected error: EMCInitiatorAliasSet failed.",e);    throw e;  }}  }
class C{  void onAddNetworkPressed(){  mSelectedAccessPoint=null;  showDialog(null,true);}  }
class C{  public boolean isOutBufferActive(Object obj){  return collector().isOutBufferActive(getRuleName(),obj);}  }
class C{  public LocalVarEntry(Label startLabel,Label endLabel,CP name,CP sig,int slot){  start=startLabel;  end=endLabel;  this.name=name;  this.sig=sig;  this.slot=slot;}  }
class C{  public void stop(){}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildMineArea(zone);}  }
class C{  protected ConsumerConnector createConsumerConnector(Properties consumerProperties){  return Consumer.createJavaConsumerConnector(new kafka.consumer.ConsumerConfig(consumerProperties));}  }
class C{  private static List<AccessorTuple> filterOutTuplesImplementedByField(List<AccessorTuple> computedMissingApiGetterSetter,List<TMember> ownedAndMixedInConcreteMember,List<TMember> concreteInheritedMembers){  return computedMissingApiGetterSetter.stream().filter(null).collect(Collectors.toList());}  }
class C{  public final void writeTo(SocketChannel sc,ByteBuffer buf) throws IOException {  if (getLength() > 0) {    final int BUF_MAX=buf.capacity();    if (this.part instanceof byte[]) {      final byte[] bytes=(byte[])this.part;      int off=0;      int len=bytes.length;      buf.clear();      while (len > 0) {        int bytesThisTime=len;        if (bytesThisTime > BUF_MAX) {          bytesThisTime=BUF_MAX;        }        buf.put(bytes,off,bytesThisTime);        len-=bytesThisTime;        off+=bytesThisTime;        buf.flip();        while (buf.remaining() > 0) {          sc.write(buf);        }        buf.clear();      }    } else     if (this.part instanceof StoredObject) {      StoredObject c=(StoredObject)this.part;      ByteBuffer bb=c.createDirectByteBuffer();      if (bb != null) {        while (bb.remaining() > 0) {          sc.write(bb);        }      } else {        int len=c.getDataSize();        long addr=c.getAddressForReadingData(0,len);        buf.clear();        while (len > 0) {          int bytesThisTime=len;          if (bytesThisTime > BUF_MAX) {            bytesThisTime=BUF_MAX;          }          len-=bytesThisTime;          while (bytesThisTime > 0) {            buf.put(AddressableMemoryManager.readByte(addr));            addr++;            bytesThisTime--;          }          buf.flip();          while (buf.remaining() > 0) {            sc.write(buf);          }          buf.clear();        }      }    } else {      HeapDataOutputStream hdos=(HeapDataOutputStream)this.part;      hdos.sendTo(sc,buf);      hdos.rewind();    }  }}  }
class C{  public void invalidateVisualState(){  this.connection.ifPresent(null);}  }
class C{  public void writeU32(long val){  check(val,32);  need(4);  array[pos++]=(byte)((val >>> 24) & 0xFF);  array[pos++]=(byte)((val >>> 16) & 0xFF);  array[pos++]=(byte)((val >>> 8) & 0xFF);  array[pos++]=(byte)(val & 0xFF);}  }
class C{  public static void save(String filename){  File file=new File(filename);  String suffix=filename.substring(filename.lastIndexOf('.') + 1);  if (suffix.toLowerCase().equals("png")) {    try {      ImageIO.write(onscreenImage,suffix,file);    } catch (    IOException e) {      e.printStackTrace();    }  } else   if (suffix.toLowerCase().equals("jpg")) {    WritableRaster raster=onscreenImage.getRaster();    WritableRaster newRaster;    newRaster=raster.createWritableChild(0,0,width,height,0,0,new int[]{0,1,2});    DirectColorModel cm=(DirectColorModel)onscreenImage.getColorModel();    DirectColorModel newCM=new DirectColorModel(cm.getPixelSize(),cm.getRedMask(),cm.getGreenMask(),cm.getBlueMask());    BufferedImage rgbBuffer=new BufferedImage(newCM,newRaster,false,null);    try {      ImageIO.write(rgbBuffer,suffix,file);    } catch (    IOException e) {      e.printStackTrace();    }  } else {    System.out.println("Invalid image file type: " + suffix);  }}  }
class C{  public static void main(String[] args){  runFilter(new RenameAttribute(),args);}  }
class C{  public static String doubleToString(double value,int afterDecimalPoint){  StringBuffer stringBuffer;  double temp;  int dotPosition;  long precisionValue;  temp=value * Math.pow(10.0,afterDecimalPoint);  if (Math.abs(temp) < Long.MAX_VALUE) {    precisionValue=(temp > 0) ? (long)(temp + 0.5) : -(long)(Math.abs(temp) + 0.5);    if (precisionValue == 0) {      stringBuffer=new StringBuffer(String.valueOf(0));    } else {      stringBuffer=new StringBuffer(String.valueOf(precisionValue));    }    if (afterDecimalPoint == 0) {      return stringBuffer.toString();    }    dotPosition=stringBuffer.length() - afterDecimalPoint;    while (((precisionValue < 0) && (dotPosition < 1)) || (dotPosition < 0)) {      if (precisionValue < 0) {        stringBuffer.insert(1,'0');      } else {        stringBuffer.insert(0,'0');      }      dotPosition++;    }    stringBuffer.insert(dotPosition,'.');    if ((precisionValue < 0) && (stringBuffer.charAt(1) == '.')) {      stringBuffer.insert(1,'0');    } else     if (stringBuffer.charAt(0) == '.') {      stringBuffer.insert(0,'0');    }    int currentPos=stringBuffer.length() - 1;    while ((currentPos > dotPosition) && (stringBuffer.charAt(currentPos) == '0')) {      stringBuffer.setCharAt(currentPos--,' ');    }    if (stringBuffer.charAt(currentPos) == '.') {      stringBuffer.setCharAt(currentPos,' ');    }    return stringBuffer.toString().trim();  }  return new String("" + value);}  }
class C{  public void wiggleSortB(int[] nums){  for (int i=0; i < nums.length; i++) {    int a=nums[i - 1];    if ((i % 2 == 1) == (a > nums[i])) {      nums[i - 1]=nums[i];      nums[i]=a;    }  }}  }
class C{  synchronized static void register(JComponent c){  if (c == null) {    throw new NullPointerException("JComponent must be non-null");  }  components.add(new WeakReference<JComponent>(c));}  }
class C{  public synchronized boolean canRedo(){  if (inProgress) {    UndoableEdit edit=editToBeRedone();    return edit != null && edit.canRedo();  } else {    return super.canRedo();  }}  }
class C{  public boolean isReplaceable(IBlockAccess world){  return getBlock(world).isReplaceable(world,xCoord,yCoord,zCoord);}  }
class C{  public void addHostInitiator(HostInitiatorInfo param){  if (localHostInitiator == null) {    localHostInitiator=new HostInitiatorInfo[]{};  }  localHostInitiatorTracker=true;  java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(localHostInitiator);  list.add(param);  this.localHostInitiator=(HostInitiatorInfo[])list.toArray(new HostInitiatorInfo[list.size()]);}  }
class C{  public SlidingActivityHelper(Activity activity){  mActivity=activity;}  }
class C{  public static void noSpace(String string) throws JSONException {  int i, length=string.length();  if (length == 0) {    throw new JSONException("Empty string.");  }  for (i=0; i < length; i+=1) {    if (Character.isWhitespace(string.charAt(i))) {      throw new JSONException("'" + string + "' contains a space character.");    }  }}  }
class C{  public final Distribution subtract(Distribution toSubstract){  Distribution newDist=new Distribution(1,m_perClass.length);  newDist.m_perBag[0]=totaL - toSubstract.totaL;  newDist.totaL=newDist.m_perBag[0];  for (int i=0; i < m_perClass.length; i++) {    newDist.m_perClassPerBag[0][i]=m_perClass[i] - toSubstract.m_perClass[i];    newDist.m_perClass[i]=newDist.m_perClassPerBag[0][i];  }  return newDist;}  }
class C{  public void stop(){  stopTime=System.currentTimeMillis();  running=false;}  }
class C{  public OutputStream outStream(final String name) throws IOException {  if (!directory().exists() && !directory().mkdirs()) {    throw new IOException("Unable to create directory \"" + directory().getPath() + "\"");  }  return FileUtils.createOutputStream(outFile(name),mZip,false,true);}  }
class C{  public static boolean hasICS(){  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH;}  }
class C{  public boolean findAndSelect(String findString,boolean isHexString,boolean searchForward,boolean ignoreCase) throws IOException {  return findAndSelectInternal(findString,isHexString,searchForward,ignoreCase,true);}  }
class C{  @Override public void onDropPartition(DropPartitionEvent event) throws MetaException {  try {    Set<ReadEntity> readEntities=new HashSet<>();    readEntities.add(new ReadEntity(new Partition(new Table(event.getTable()),event.getPartition())));    Set<WriteEntity> writeEntities=new HashSet<>();    run(readEntities,writeEntities,HiveOperation.THRIFT_DROP_PARTITION);  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:24.291 -0500",hash_original_method="97921B5E4166F5AC1B7B582C04340D66",hash_generated_method="3E5590DAB928E12BB7FB6F548EF87AAE") private void mergeForceCollapse(){  while (stackSize > 1) {    int n=stackSize - 2;    if (n > 0 && runLen[n - 1] < runLen[n + 1])     n--;    mergeAt(n);  }}  }
class C{  private void renderReport() throws Exception {  Listitem selected=previewType.getSelectedItem();  String path=System.getProperty("java.io.tmpdir");  String prefix=makePrefix(jasperPrint.getName());  if (log.isLoggable(Level.FINE)) {    log.log(Level.FINE,"Path=" + path + " Prefix="+ prefix);  }  if (selected == null || "PDF".equals(selected.getValue())) {    File file=File.createTempFile(prefix,".pdf",new File(path));    JasperExportManager.exportReportToPdfFile(jasperPrint,file.getAbsolutePath());    media=new AMedia(this.title,"pdf","application/pdf",file,true);  } else   if ("XLS".equals(previewType.getSelectedItem().getValue())) {    File file=File.createTempFile(prefix,".xls",new File(path));    FileOutputStream fos=new FileOutputStream(file);    JRXlsExporter exporterXLS=new JRXlsExporter();    exporterXLS.setParameter(JRXlsExporterParameter.JASPER_PRINT,jasperPrint);    exporterXLS.setParameter(JRXlsExporterParameter.OUTPUT_STREAM,fos);    exporterXLS.setParameter(JRXlsExporterParameter.OUTPUT_FILE,file.getAbsolutePath());    exporterXLS.setParameter(JRXlsExporterParameter.IS_DETECT_CELL_TYPE,Boolean.TRUE);    exporterXLS.setParameter(JRXlsExporterParameter.IS_WHITE_PAGE_BACKGROUND,Boolean.FALSE);    exporterXLS.setParameter(JRXlsExporterParameter.IS_REMOVE_EMPTY_SPACE_BETWEEN_ROWS,Boolean.TRUE);    exporterXLS.setParameter(JRXlsExporterParameter.IS_REMOVE_EMPTY_SPACE_BETWEEN_COLUMNS,Boolean.TRUE);    exporterXLS.setParameter(JRXlsExporterParameter.IS_COLLAPSE_ROW_SPAN,Boolean.TRUE);    exporterXLS.setParameter(JRXlsExporterParameter.IS_IGNORE_GRAPHICS,Boolean.FALSE);    exporterXLS.exportReport();    media=new AMedia(this.title,"xls","application/vnd.ms-excel",file,true);  }  iframe.setContent(media);}  }
class C{  void unregister(Object listener){  Multimap<Class<?>,Subscriber> listenerMethods=findAllSubscribers(listener);  for (  Map.Entry<Class<?>,Collection<Subscriber>> entry : listenerMethods.asMap().entrySet()) {    Class<?> eventType=entry.getKey();    Collection<Subscriber> listenerMethodsForType=entry.getValue();    CopyOnWriteArraySet<Subscriber> currentSubscribers=subscribers.get(eventType);    if (currentSubscribers == null || !currentSubscribers.removeAll(listenerMethodsForType)) {      throw new IllegalArgumentException("missing event subscriber for an annotated method. Is " + listener + " registered?");    }  }}  }
class C{  protected void checkEventCompatibility(ReplDBMSHeader header,DBMSEvent event) throws ReplicatorException {}  }
class C{  public CLDevice[] listAllDevices(boolean onlyAvailable){  return listDevices(CLDevice.Type.All,onlyAvailable);}  }
class C{  public void done(){}  }
class C{  public Type erasure(Type t){  return types.erasure(t);}  }
class C{  @SuppressWarnings("unchecked") public static <T>IBaseDao<T> createGenericDao(DbSqlite db,Class<?> modelClazz){  return new GenericDao<T>(db,modelClazz);}  }
class C{  public BinaryBitmap crop(int left,int top,int width,int height){  LuminanceSource newSource=binarizer.getLuminanceSource().crop(left,top,width,height);  return new BinaryBitmap(binarizer.createBinarizer(newSource));}  }
class C{  public void testNextLong(){  long f=ThreadLocalRandom.current().nextLong();  int i=0;  while (i < NCALLS && ThreadLocalRandom.current().nextLong() == f)   ++i;  assertTrue(i < NCALLS);}  }
class C{  public String toString(){  return internal.toString();}  }
class C{  @Ignore @Test public void testThrowAwayUneededBucket(){  Host host=Host.getHost(0);  VM vm0=host.getVM(0);  VM vm1=host.getVM(1);  VM vm2=host.getVM(2);  createPR(vm0,1);  createPR(vm1,1);  createData(vm0,0,NUM_BUCKETS,"a");  Set<Integer> vm0Buckets=getBucketList(vm0);  Set<Integer> vm1Buckets=getBucketList(vm1);  assertEquals(vm0Buckets,vm1Buckets);  assertEquals(NUM_BUCKETS,vm0Buckets.size());  closeCache(vm1);  createPR(vm2,1);  checkData(vm0,0,NUM_BUCKETS,"a");  vm0Buckets=getBucketList(vm0);  Set<Integer> vm2Buckets=getBucketList(vm2);  assertEquals(vm0Buckets,vm2Buckets);  assertEquals(NUM_BUCKETS,vm0Buckets.size());  createPR(vm1,1);  assertEquals(Collections.emptySet(),getBucketList(vm1));  closeCache(vm0);  closeCache(vm1);  closeCache(vm2);  createPR(vm0,1);  createPR(vm1,1);  createPR(vm2,1);  assertEquals(vm0Buckets,getBucketList(vm0));  assertEquals(Collections.emptySet(),getBucketList(vm1));  assertEquals(vm2Buckets,getBucketList(vm2));  checkData(vm0,0,NUM_BUCKETS,"a");}  }
class C{  public static byte[] encode(byte[] source,int off,int len,byte[] alphabet,int maxLineLength){  int lenDiv3=(len + 2) / 3;  int len43=lenDiv3 * 4;  byte[] outBuff=new byte[len43 + (len43 / maxLineLength)];  int d=0;  int e=0;  int len2=len - 2;  int lineLength=0;  for (; d < len2; d+=3, e+=4) {    int inBuff=((source[d + off] << 24) >>> 8) | ((source[d + 1 + off] << 24) >>> 16) | ((source[d + 2 + off] << 24) >>> 24);    outBuff[e]=alphabet[(inBuff >>> 18)];    outBuff[e + 1]=alphabet[(inBuff >>> 12) & 0x3f];    outBuff[e + 2]=alphabet[(inBuff >>> 6) & 0x3f];    outBuff[e + 3]=alphabet[(inBuff) & 0x3f];    lineLength+=4;    if (lineLength == maxLineLength) {      outBuff[e + 4]=NEW_LINE;      e++;      lineLength=0;    }  }  if (d < len) {    encode3to4(source,d + off,len - d,outBuff,e,alphabet);    lineLength+=4;    if (lineLength == maxLineLength) {      outBuff[e + 4]=NEW_LINE;      e++;    }    e+=4;  }  assert (e == outBuff.length);  return outBuff;}  }
class C{  public APIConnectionGroup(){}  }
class C{  public boolean isCostingMethod(){  return COSTELEMENTTYPE_Material.equals(getCostElementType()) && getCostingMethod() != null;}  }
class C{  public Iterator<EdgeInfo> forward(){  return forward.iterator();}  }
class C{  public static Image createReflectedResizedImage(final Image source,final int newWidth,final int newHeight){  if (source == null) {    return null;  }  if (source.isDisposed()) {    SWT.error(SWT.ERROR_WIDGET_DISPOSED);  }  final Image newImage=new Image(source.getDevice(),newWidth,(int)(newHeight * 1.5));  final GC gc=new GC(newImage);  gc.setAntialias(SWT.ON);  gc.setInterpolation(SWT.HIGH);  gc.drawImage(source,0,0,source.getBounds().width,source.getBounds().height,0,0,newWidth,newHeight);  final Transform t=new Transform(source.getDevice());  t.setElements(1,0,0,-.5f,0,(float)(newHeight * 1.5));  gc.setTransform(t);  gc.drawImage(source,0,0,source.getBounds().width,source.getBounds().height,0,0,newWidth,newHeight);  t.dispose();  gc.dispose();  final ImageData imgData=newImage.getImageData();  final int width=imgData.width;  final int height=imgData.height;  final byte[] alphaData=new byte[height * width];  final byte[] noAlpha=new byte[width];  for (int x=0; x < width; x++) {    noAlpha[x]=(byte)255;  }  for (int y=0; y < height; y++) {    final byte[] alphaRow=new byte[width];    if (y < newHeight) {      System.arraycopy(noAlpha,0,alphaData,y * width,width);    } else {      for (int x=0; x < width; x++) {        alphaRow[x]=(byte)(255 - 255 * y / height);      }      System.arraycopy(alphaRow,0,alphaData,y * width,width);    }  }  imgData.alphaData=alphaData;  return new Image(source.getDevice(),imgData);}  }
class C{  protected void updateOverlayContents(LookAt lookAt,Camera camera){  latView.setText(formatLatitude(lookAt.latitude));  lonView.setText(formatLongitude(lookAt.longitude));  altView.setText(formatAltitude(camera.altitude));}  }
class C{  public UnsupportedDigestAlgorithmException(String message,Throwable cause){  super(message,cause);}  }
class C{  private boolean checkIfExpressionContainsColumn(Expression expression){  if (expression instanceof ColumnExpression) {    return true;  }  for (  Expression child : expression.getChildren()) {    if (checkIfExpressionContainsColumn(child)) {      return true;    }  }  return false;}  }
class C{  protected int countUtilityCars(String[] format,List<Car> carList,Car car,boolean isPickup){  int count=0;  boolean showLength=showUtilityCarLength(format);  boolean showLoad=showUtilityCarLoad(format);  boolean showLocation=false;  boolean showDestination=false;  String[] carType=car.getTypeName().split("-");  String carAttributes;  if (isPickup) {    carAttributes=carType[0] + car.getRouteLocationId() + splitString(car.getTrackName());    showDestination=showUtilityCarDestination(format);    if (showDestination) {      carAttributes=carAttributes + car.getRouteDestinationId();    }  } else {    carAttributes=carType[0] + splitString(car.getDestinationTrackName()) + car.getRouteDestinationId();    showLocation=showUtilityCarLocation(format);    if (showLocation && car.getTrack() != null) {      carAttributes=carAttributes + car.getRouteLocationId();    }    if (isLocalMove(car)) {      carAttributes=carAttributes + splitString(car.getTrackName());    }  }  if (showLength) {    carAttributes=carAttributes + car.getLength();  }  if (showLoad) {    carAttributes=carAttributes + car.getLoadName();  }  if (!utilityCarTypes.contains(carAttributes)) {    utilityCarTypes.add(carAttributes);    for (    Car c : carList) {      if (!c.isUtility()) {        continue;      }      String[] cType=c.getTypeName().split("-");      if (!cType[0].equals(carType[0])) {        continue;      }      if (showLength && !c.getLength().equals(car.getLength())) {        continue;      }      if (showLoad && !c.getLoadName().equals(car.getLoadName())) {        continue;      }      if (showLocation && !c.getRouteLocationId().equals(car.getRouteLocationId())) {        continue;      }      if (showDestination && !c.getRouteDestinationId().equals(car.getRouteDestinationId())) {        continue;      }      if (isLocalMove(car) ^ isLocalMove(c)) {        continue;      }      if (isPickup && c.getRouteLocation() == car.getRouteLocation() && splitString(c.getTrackName()).equals(splitString(car.getTrackName()))) {        count++;      }      if (!isPickup && c.getRouteDestination() == car.getRouteDestination() && splitString(c.getDestinationTrackName()).equals(splitString(car.getDestinationTrackName())) && (splitString(c.getTrackName()).equals(splitString(car.getTrackName())) || !isLocalMove(c))) {        count++;      }    }  }  return count;}  }
class C{  public FloatLazyValue(FloatSupplier supplier){  Validate.notNull(supplier,"supplier can't be null!");  this.supplier=supplier;}  }
class C{  public Log release(long index){  assertIsOpen();  assertValidIndex(index);  Segment segment=segments.segment(index);  Assert.index(segment != null,"invalid index: " + index);  segment.release(index);  return this;}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public static void shutDownWithDebugLog(Exception ex,String errorMsg){  if (LOG.isDebugEnabled()) {    ex.printStackTrace();  }  shutDownWithErrMsg(errorMsg);}  }
class C{  @After public void tearDown(){  problem=null;  properties=null;  qualityIndicator=null;}  }
class C{  private void doBind(){  mDataBinder=DataBindingFactory.createDataBinder(this,R.raw.db_main,false);  mDataBinder.bind(R.id.bt,true,mUser=new User("heaven7",false));  mDataBinder.bind(R.id.bt0,false,mUser,new MainEventHandler(mDataBinder));  mDataBinder.bind(new User("joker",true,"xxx_joker"));}  }
class C{  public static void addGlue(JComponent b,int layout){  b.add(getAxis(b,layout) == BoxLayout.X_AXIS ? Box.createHorizontalGlue() : Box.createVerticalGlue());}  }
class C{  public void activateUpdatesAvailable(){  updatesAvailabeButton.setVisible(true);  updatesAvailabeButton.doClick(0);}  }
class C{  private void addTable(DatabaseMetaData md,String catalog,String schema) throws Exception {  ResultSet rs;  if (DB.isPostgreSQL())   rs=md.getTables(catalog,schema,null,new String[]{"TABLE","VIEW"}); else   rs=md.getTables(catalog,schema,null,null);  while (rs.next()) {    String tableName=rs.getString("TABLE_NAME");    String tableType=rs.getString("TABLE_TYPE");    MTable table=MTable.get(getCtx(),tableName);    if (table == null) {      String tn=tableName.toUpperCase();      if (tn.startsWith("T_SELECTION") || tn.endsWith("_VT") || tn.endsWith("_V")|| tn.endsWith("_V1")|| tn.startsWith("A_A")|| tn.startsWith("A_D")|| tn.indexOf('$') != -1 || tn.indexOf("EXPLAIN") != -1) {        log.fine("Ignored: " + tableName + " - "+ tableType);        continue;      }      log.info(tableName + " - " + tableType);      table=new MTable(getCtx(),0,get_TrxName());      table.setEntityType(p_EntityType);      table.setName(tableName);      table.setTableName(tableName);      table.setIsView("VIEW".equals(tableType));      if (!table.save())       continue;    }    if (DB.isOracle())     tableName=tableName.toUpperCase();    if (DB.isPostgreSQL())     tableName=tableName.toLowerCase();    ResultSet rsC=md.getColumns(catalog,schema,tableName,null);    addTableColumn(rsC,table);  }}  }
class C{  public GraphicsNode build(BridgeContext ctx,Element e){  Bridge bridge=ctx.getBridge(e);  if (bridge instanceof GenericBridge) {    ((GenericBridge)bridge).handleElement(ctx,e);    handleGenericBridges(ctx,e);    return null;  } else   if (bridge == null || !(bridge instanceof GraphicsNodeBridge)) {    handleGenericBridges(ctx,e);    return null;  }  GraphicsNodeBridge gnBridge=(GraphicsNodeBridge)bridge;  if (!gnBridge.getDisplay(e)) {    handleGenericBridges(ctx,e);    return null;  }  GraphicsNode gn=gnBridge.createGraphicsNode(ctx,e);  if (gn != null) {    if (gnBridge.isComposite()) {      buildComposite(ctx,e,(CompositeGraphicsNode)gn);    } else {      handleGenericBridges(ctx,e);    }    gnBridge.buildGraphicsNode(ctx,e,gn);  }  if (ctx.isDynamic()) {  }  return gn;}  }
class C{  public static StringBuilder makeWhereStringFromFields(StringBuilder sb,List<ModelField> modelFields,Map<String,Object> fields,String operator,List<EntityConditionParam> entityConditionParams){  if (modelFields.size() < 1) {    return sb;  }  Iterator<ModelField> iter=modelFields.iterator();  while (iter.hasNext()) {    Object item=iter.next();    Object name=null;    ModelField modelField=null;    if (item instanceof ModelField) {      modelField=(ModelField)item;      sb.append(modelField.getColValue());      name=modelField.getName();    } else {      sb.append(item);      name=item;    }    Object fieldValue=fields.get(name);    if (fieldValue != null && fieldValue != GenericEntity.NULL_FIELD) {      sb.append('=');      addValue(sb,modelField,fieldValue,entityConditionParams);    } else {      sb.append(" IS NULL");    }    if (iter.hasNext()) {      sb.append(' ');      sb.append(operator);      sb.append(' ');    }  }  return sb;}  }
class C{  private double drawBitmap(Canvas canvas){  double viewWidth=canvas.getWidth();  double viewHeight=canvas.getHeight();  double imageWidth=mBitmap.getWidth();  double imageHeight=mBitmap.getHeight();  double scale=Math.min(viewWidth / imageWidth,viewHeight / imageHeight);  Rect destBounds=new Rect(0,0,(int)(imageWidth * scale),(int)(imageHeight * scale));  canvas.drawBitmap(mBitmap,null,destBounds,null);  return scale;}  }
class C{  public Object unmarshal(HierarchicalStreamReader reader,UnmarshallingContext context){  try {    java.lang.reflect.Constructor c=this.getClass().getConstructor(new Class[]{String.class});    return c.newInstance(new Object[]{reader.getValue()});  } catch (  Exception e) {    e.printStackTrace();    return null;  }}  }
class C{  public void releaseUserData(Object userData,SnmpPdu responsePdu) throws SnmpStatusException {  ((Map<?,?>)userData).clear();}  }
class C{  public ReilBlock(final com.google.security.zynamics.reil.ReilBlock block){  m_instructions=createInstructions(block);}  }
class C{  public int size(){  return attrMap.size();}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case SGenPackage.REAL_LITERAL__VALUE:    setValue(VALUE_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  Values values(Thread current){  return current.localValues;}  }
class C{  @SuppressForbidden(reason="Legitimate log4j access") static boolean changeLogLevel(String logLevel){  try {    if (!isLog4jActive()) {      logNotSupported("Could not mute logging to console.");      return false;    }    log.info("Log level override, property solr.log.level=" + logLevel);    LogManager.getRootLogger().setLevel(Level.toLevel(logLevel,Level.INFO));    return true;  } catch (  Exception e) {    logNotSupported("Could not change log level.");    return false;  }}  }
class C{  public GF2nPolynomialField(int deg){  if (deg < 3) {    throw new IllegalArgumentException("k must be at least 3");  }  mDegree=deg;  computeFieldPolynomial();  computeSquaringMatrix();  fields=new Vector();  matrices=new Vector();}  }
class C{  public void unmark(){  if (getParent() != null) {    setVisible(false);    getParent().remove(this);    eventSource.fireEvent(new mxEventObject(mxEvent.MARK));  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public Builder withUrlFetch(){  rule.withUrlFetch=true;  return this;}  }
class C{  public void testMixupMultiValued() throws Exception {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  FieldType customType=new FieldType(TextField.TYPE_NOT_STORED);  customType.setStoreTermVectors(true);  customType.setStoreTermVectorPositions(true);  customType.setStoreTermVectorPayloads(true);  customType.setStoreTermVectorOffsets(random().nextBoolean());  Field field=new Field("field","",customType);  TokenStream ts=new MockTokenizer(MockTokenizer.WHITESPACE,true);  ((Tokenizer)ts).setReader(new StringReader("here we go"));  field.setTokenStream(ts);  doc.add(field);  Field field2=new Field("field","",customType);  Token withPayload=new Token("withPayload",0,11);  withPayload.setPayload(new BytesRef("test"));  ts=new CannedTokenStream(withPayload);  assertTrue(ts.hasAttribute(PayloadAttribute.class));  field2.setTokenStream(ts);  doc.add(field2);  Field field3=new Field("field","",customType);  ts=new MockTokenizer(MockTokenizer.WHITESPACE,true);  ((Tokenizer)ts).setReader(new StringReader("nopayload"));  field3.setTokenStream(ts);  doc.add(field3);  writer.addDocument(doc);  DirectoryReader reader=writer.getReader();  Terms terms=reader.getTermVector(0,"field");  assert terms != null;  TermsEnum termsEnum=terms.iterator();  assertTrue(termsEnum.seekExact(new BytesRef("withPayload")));  PostingsEnum de=termsEnum.postings(null,PostingsEnum.ALL);  assertEquals(0,de.nextDoc());  assertEquals(3,de.nextPosition());  assertEquals(new BytesRef("test"),de.getPayload());  writer.close();  reader.close();  dir.close();}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:37.792 -0500",hash_original_method="C077B4946269706F964CA3940CC4AA2E",hash_generated_method="AF411624480E64C3111B8156228B8BC3") public static int dayOfWeek(long day){  long[] remainder=new long[1];  floorDivide(day + Calendar.THURSDAY,7,remainder);  int dayOfWeek=(int)remainder[0];  dayOfWeek=(dayOfWeek == 0) ? 7 : dayOfWeek;  return dayOfWeek;}  }
class C{  private Type(final int sort,final char[] buf,final int off,final int len){  this.sort=sort;  this.buf=buf;  this.off=off;  this.len=len;}  }
class C{  public void skipUntilNumber() throws ParseException {  try {    while (true) {switch (orig[index]) {case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':        return;default :      index++;    break;}}} catch (ArrayIndexOutOfBoundsException e) {throw new ParseException("No Number Found",index);}}  }
class C{  private Future<Integer> transmit() throws BKTransmitException, LockingException, WriteException, InvalidEnvelopedEntryException {  EntryBuffer recordSetToTransmit;  transmitLock.lock();  try {synchronized (this) {      checkWriteLock();      if (!transmitResult.compareAndSet(BKException.Code.OK,BKException.Code.OK)) {        LOG.error("Log Segment {} Trying to write to an errored stream; Error is {}",fullyQualifiedLogSegment,BKException.getMessage(transmitResult.get()));        throw new BKTransmitException("Trying to write to an errored stream;" + " Error code : (" + transmitResult.get() + ") "+ BKException.getMessage(transmitResult.get()),transmitResult.get());      }      if (recordSetWriter.getNumRecords() == 0) {        transmitDataMisses.inc();        return null;      }      recordSetToTransmit=recordSetWriter;      recordSetWriter=newRecordSetWriter();      outstandingBytes=0;      if (recordSetToTransmit.hasUserRecords()) {        numBytes+=recordSetToTransmit.getNumBytes();        numFlushesSinceRestart++;      }    }    Buffer toSend;    try {      toSend=recordSetToTransmit.getBuffer();      FailpointUtils.checkFailPoint(FailpointUtils.FailPointName.FP_TransmitFailGetBuffer);    } catch (    IOException e) {      if (e instanceof InvalidEnvelopedEntryException) {        alertStatsLogger.raise("Invalid enveloped entry for segment {} : ",fullyQualifiedLogSegment,e);      }      LOG.error("Exception while enveloping entries for segment: {}",new Object[]{fullyQualifiedLogSegment},e);      transmitResult.set(BKException.Code.WriteException);      if (e instanceof InvalidEnvelopedEntryException) {        alertStatsLogger.raise("Invalid enveloped entry for segment {} : ",fullyQualifiedLogSegment,e);        throw (InvalidEnvelopedEntryException)e;      } else {        throw new WriteException(streamName,"Envelope Error");      }    }synchronized (this) {      BKTransmitPacket packet=new BKTransmitPacket(recordSetToTransmit);      packetPrevious=packet;      entryWriter.asyncAddEntry(toSend.getData(),0,toSend.size(),this,packet);      if (recordSetToTransmit.hasUserRecords()) {        transmitDataSuccesses.inc();      } else {        transmitControlSuccesses.inc();      }      lastTransmit.reset().start();      outstandingTransmits.incrementAndGet();      controlFlushNeeded=false;      return packet.getTransmitFuture();    }  }  finally {    transmitLock.unlock();  }}  }
class C{  private void nextChunk() throws IOException {  if (!this.bof) {    this.readCrlf();  }  this.size=ChunkedInputStream.chunkSize(this.origin);  this.bof=false;  this.pos=0;  if (this.size == 0) {    this.eof=true;  }}  }
class C{  public E peek(){  if (isEmpty()) {    return null;  }  return elements[0];}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected void printChildren(Graphics g){  paintChildren(g);}  }
class C{  public WritableRaster createCompatibleWritableRaster(int w,int h){  if (w <= 0 || h <= 0) {    throw new RasterFormatException("negative " + ((w <= 0) ? "width" : "height"));  }  SampleModel sm=sampleModel.createCompatibleSampleModel(w,h);  return new IntegerInterleavedRaster(sm,new Point(0,0));}  }
class C{  @ObjectiveCName("favouriteChatCommandWithPeer:") public Command<Void> favouriteChat(Peer peer){  return null;}  }
class C{  public void deletePerms(int destType,int destId,int archId,int perms,String entidad) throws Exception {  boolean commit=false;  boolean inTrans=false;  _destType=destType;  _destId=destId;  _id=archId;  _typeObj=ISicresAdminDefsKeys.OBJECT_OWNER_TYPE_ARCHIVE;  if (_logger.isDebugEnabled())   _logger.debug("deletePerms");  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession());    dbConn.beginTransaction();    inTrans=true;    if ((perms & ISicresAdminDefsKeys.OBJ_PERM_QUERY) != 0) {      _perm=ISicresAdminDefsKeys.OBJ_PERM_QUERY;      deletePerm(entidad);    }    if ((perms & ISicresAdminDefsKeys.OBJ_PERM_UPDATE) != 0) {      _perm=ISicresAdminDefsKeys.OBJ_PERM_UPDATE;      deletePerm(entidad);    }    if ((perms & ISicresAdminDefsKeys.OBJ_PERM_CREATION) != 0) {      _perm=ISicresAdminDefsKeys.OBJ_PERM_CREATION;      deletePerm(entidad);    }    if ((perms & ISicresAdminDefsKeys.OBJ_PERM_DELETION) != 0) {      _perm=ISicresAdminDefsKeys.OBJ_PERM_DELETION;      deletePerm(entidad);    }    commit=true;  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    if (inTrans)     dbConn.endTransaction(commit);    dbConn.close();  }}  }
class C{  public boolean isComplete(){  return isComplete;}  }
class C{  public void testLocalsAverageCorrectly() throws Exception {  TransferEntropyCalculatorMultiVariateGaussian teCalc=new TransferEntropyCalculatorMultiVariateGaussian();  super.testLocalsAverageCorrectly(teCalc,2,100,1);}  }
class C{  public Object visit(ASTEQNode node,Object data){  return showNode(node,data);}  }
class C{  public TableLink createTableLink(int id,String tableName,String driver,String url,String user,String password,String originalSchema,String originalTable,boolean emitUpdates,boolean force){synchronized (database) {    return new TableLink(this,id,tableName,driver,url,user,password,originalSchema,originalTable,emitUpdates,force);  }}  }
class C{  private void addIcons(CompilationUnit unit,String sourceName) throws IOException {  if (unit.icon != null) {    VirtualFile iconFile=unit.iconFile;    Source source=unit.getSource();    if ((iconFile == null) && source.isSwcScriptOwner()) {      for (int i=0, s=unit.topLevelDefinitions.size(); i < s; i++) {        String def=unit.topLevelDefinitions.get(i).toString();        if (components.containsKey(def)) {          String swcIcon=components.get(def).getIcon();          if (swcIcon != null) {            iconFile=(((SwcScript)source.getOwner()).getLibrary().getSwc().getFile(swcIcon));            if (iconFile != null) {              VirtualFile inMemFile=new InMemoryFile(iconFile.getInputStream(),swcIcon,MimeMappings.getMimeType(swcIcon),iconFile.getLastModified());              archive.putFile(inMemFile);              return;            }          }        }      }      if (iconFile == null) {        return;      }    }    if (iconFile == null) {      throw new SwcException.MissingIconFile(unit.icon,sourceName);    }    String workingSourceName=NameFormatter.toColon(NameFormatter.toDot(sourceName,'/'));    SwcComponent comp=components.get(workingSourceName);    String rel=source.getRelativePath();    String iconName=(rel == null || rel.length() == 0) ? unit.icon : rel + "/" + unit.icon;    if (comp != null) {      comp.setIcon(iconName);    }    VirtualFile inMemFile=new InMemoryFile(iconFile.getInputStream(),iconName,MimeMappings.getMimeType(iconName),iconFile.getLastModified());    archive.putFile(inMemFile);  }}  }
class C{  static public void showDepthWarningXYZ(String method){  showWarning(method + "() with x, y, and z coordinates " + "can only be used with a renderer that "+ "supports 3D, such as P3D or OPENGL. "+ "Use a version without a z-coordinate instead.");}  }
class C{  public LocalTime addCopy(long value){  return iInstant.withLocalMillis(iField.add(iInstant.getLocalMillis(),value));}  }
class C{  public Vector(final Vector A,final double BX,final double BY,final double BZ){  final double thisX=A.y * BZ - A.z * BY;  final double thisY=A.z * BX - A.x * BZ;  final double thisZ=A.x * BY - A.y * BX;  final double magnitude=magnitude(thisX,thisY,thisZ);  if (Math.abs(magnitude) < MINIMUM_RESOLUTION) {    throw new IllegalArgumentException("Degenerate/parallel vector constructed");  }  final double inverseMagnitude=1.0 / magnitude;  this.x=thisX * inverseMagnitude;  this.y=thisY * inverseMagnitude;  this.z=thisZ * inverseMagnitude;}  }
class C{  @AnonymousCheck(requiresLogin=true,displaysFlashMessage=true) public static Result newOrganization() throws Exception {  Form<Organization> newOrgForm=form(Organization.class).bindFromRequest();  validate(newOrgForm);  if (newOrgForm.hasErrors()) {    flash(Constants.WARNING,newOrgForm.error("name").message());    return badRequest(create.render("title.newOrganization",newOrgForm));  } else {    Organization org=newOrgForm.get();    org.created=new Date();    org.save();    UserApp.currentUser().createOrganization(org);    return redirect(routes.OrganizationApp.organization(org.name));  }}  }
class C{  public static synchronized void register(PurchaseObserver observer){  sPurchaseObserver=observer;}  }
class C{  private String extendTitle(String prefix,String title){  if (title == null || title.isEmpty()) {    return prefix;  } else {    return prefix + " " + title;  }}  }
class C{  public StackableItem(){  quantity=0;}  }
class C{  public static VOLandingpageService toVOLandingpageService(LandingpageProduct domObj){  if (domObj == null) {    return null;  }  VOLandingpageService voObj=new VOLandingpageService();  updateValueObject(voObj,domObj);  voObj.setPosition(domObj.getPosition());  return voObj;}  }
class C{  @Override public Object saveState(FacesContext facesContext){  return new Object[]{behaviorId};}  }
class C{  public Event createEvent(){  EventImpl event=new EventImpl();  return event;}  }
class C{  public void start(BundleContext context) throws Exception {  super.start(context);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  static <T,F>boolean postCompleteDrain(long n,Subscriber<? super T> actual,Queue<T> queue,AtomicLongFieldUpdater<F> field,F instance,BooleanSupplier isCancelled){  long e=n & COMPLETED_MASK;  for (; ; ) {    while (e != n) {      if (isCancelled.getAsBoolean()) {        return true;      }      T t=queue.poll();      if (t == null) {        actual.onComplete();        return true;      }      actual.onNext(t);      e++;    }    if (isCancelled.getAsBoolean()) {      return true;    }    if (queue.isEmpty()) {      actual.onComplete();      return true;    }    n=field.get(instance);    if (n == e) {      n=field.addAndGet(instance,-(e & REQUESTED_MASK));      if ((n & REQUESTED_MASK) == 0L) {        return false;      }      e=n & COMPLETED_MASK;    }  }}  }
class C{  public static final Encoding of(int numBytesPerValue){  final Encoding instance=INSTANCES[numBytesPerValue];  if (instance == null) {    throw new IllegalStateException("No encoding for " + numBytesPerValue + " bytes per value");  }  return instance;}  }
class C{  public Bindings add(String property,JComboBox<String> combo){  registerPropertyChangeListener(combo);  return add(new JComboBoxBinding(property,combo,0));}  }
class C{  public T caseStatechartScope(StatechartScope object){  return null;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:08.624 -0500",hash_original_method="1C7BF244CDBA20FEDEE01D71D2117BF2",hash_generated_method="BFBAC2E8A613A9A2D709CDE13C3A173B") @Override public void close() throws IOException {  if (logger != null) {    logger.println("SSLSocket.close " + socket_was_closed);  }  if (!socket_was_closed) {    if (handshake_started) {      alertProtocol.alert(AlertProtocol.WARNING,AlertProtocol.CLOSE_NOTIFY);      try {        output.write(alertProtocol.wrap());      } catch (      IOException ex) {      }      alertProtocol.setProcessed();    }    shutdown();    closeTransportLayer();    socket_was_closed=true;  }}  }
class C{  private EsExecutors(){}  }
class C{  protected void makeUnitCylinder(int subdivisions,List<Geometry> meshes){  float radius=1.0f;  Geometry dest;  GeometryBuilder gb=this.getGeometryBuilder();  gb.setOrientation(GeometryBuilder.OUTSIDE);  for (int face=0; face < getFaceCount(); face++) {    GeometryBuilder.IndexedTriangleBuffer itb=gb.tessellateCylinderBuffer(face,radius,subdivisions);    FloatBuffer normalBuffer=Buffers.newDirectFloatBuffer(3 * itb.getVertexCount());    if (face == 0 || face == 1)     gb.makeIndexedTriangleBufferNormals(itb,normalBuffer); else     gb.makeCylinderNormals(itb,normalBuffer);    FloatBuffer textureCoordBuffer=Buffers.newDirectFloatBuffer(2 * itb.getVertexCount());    gb.makeUnitCylinderTextureCoordinates(face,textureCoordBuffer,subdivisions);    dest=new Geometry();    dest.setElementData(GL.GL_TRIANGLES,itb.getIndexCount(),itb.getIndices());    dest.setVertexData(itb.getVertexCount(),itb.getVertices());    dest.setNormalData(normalBuffer.limit(),normalBuffer);    dest.setTextureCoordData(textureCoordBuffer.limit(),textureCoordBuffer);    meshes.add(face,dest);  }}  }
class C{  public Result(double chiSquare,double pValue,int df,boolean isIndep){  this.chiSquare=chiSquare;  this.pValue=pValue;  this.df=df;  this.isIndep=isIndep;}  }
class C{  private void runVectorVectorMultiplicationTest(boolean sparseM1,boolean outer,ExecType instType){  RUNTIME_PLATFORM platformOld=rtplatform;  rtplatform=(instType == ExecType.MR) ? RUNTIME_PLATFORM.HADOOP : RUNTIME_PLATFORM.HYBRID;  try {    TestConfiguration config=getTestConfiguration(TEST_NAME);    int rows1=outer ? colsA : 1;    int rows2=outer ? 1 : rowsB;    int cols1=outer ? 1 : colsA;    int cols2=outer ? rowsB : 1;    double sparsityA=sparseM1 ? sparsity2 : sparsity1;    String TEST_CACHE_DIR="";    if (TEST_CACHE_ENABLED) {      TEST_CACHE_DIR="vv" + rows1 + "_"+ cols1+ "_"+ rows2+ "_"+ cols2+ "_"+ String.valueOf(sparsityA)+ "/";    }    loadTestConfiguration(config,TEST_CACHE_DIR);    String HOME=SCRIPT_DIR + TEST_DIR;    fullDMLScriptName=HOME + TEST_NAME + ".dml";    programArgs=new String[]{"-args",input("A"),Integer.toString(rows1),Integer.toString(cols1),input("B"),Integer.toString(rows2),Integer.toString(cols2),output("C")};    fullRScriptName=HOME + TEST_NAME + ".R";    rCmd="Rscript" + " " + fullRScriptName + " "+ inputDir()+ " "+ expectedDir();    double[][] A=getRandomMatrix(rows1,cols1,0,1,sparsityA,7);    writeInputMatrix("A",A,true);    double[][] B=getRandomMatrix(rows2,cols2,0,1,sparsity1,3);    writeInputMatrix("B",B,true);    boolean exceptionExpected=false;    runTest(true,exceptionExpected,null,-1);    runRScript(true);    HashMap<CellIndex,Double> dmlfile=readDMLMatrixFromHDFS("C");    HashMap<CellIndex,Double> rfile=readRMatrixFromFS("C");    TestUtils.compareMatrices(dmlfile,rfile,eps,"Stat-DML","Stat-R");  }  finally {    rtplatform=platformOld;  }}  }
class C{  public boolean hasBeenUsed(){  return beingUsed;}  }
class C{  public static String replaceEscapedRightAngle(String s){  StringBuilder buf=new StringBuilder();  int i=0;  while (i < s.length()) {    char c=s.charAt(i);    if (c == '<' && s.substring(i).startsWith("<\\\\>")) {      buf.append("<\\\\>");      i+="<\\\\>".length();      continue;    }    if (c == '>' && s.substring(i).startsWith(">\\>")) {      buf.append(">>");      i+=">\\>".length();      continue;    }    if (c == '\\' && s.substring(i).startsWith("\\>>") && !s.substring(i).startsWith("\\>>>")) {      buf.append(">>");      i+="\\>>".length();      continue;    }    buf.append(c);    i++;  }  return buf.toString();}  }
class C{  public void testResourcesAvailable(){  new PolishAnalyzer().close();}  }
class C{  protected void handleModelChangedEvent(Model model,Object object,int index){  if (model == treeModel) {    if (object instanceof TreeModel.TreeChangedEvent) {      if (((TreeModel.TreeChangedEvent)object).isNodeChanged()) {        updateNodeAndChildren(((TreeModel.TreeChangedEvent)object).getNode());      } else {        updateAllNodes();        commonAncestorsKnown=false;      }    }  } else   if (model == branchRateModel) {    updateAllNodes();  } else   if (model == frequencyModel) {    updateAllNodes();  } else   if (model instanceof SiteModel) {    if (model == siteModel) {      updateAllNodes();    } else     if (model == tipsSiteModel) {      updateAllNodes();    } else {      NodeRef node=null;      for (int i=0, n=cladeSiteModels.size(); i < n; i++) {        Clade clade=cladeSiteModels.get(i);        if (!commonAncestorsKnown) {          clade.findMRCA();        }        if (clade.getSiteModel() == model) {          node=treeModel.getNode(clade.getNode());        }      }      commonAncestorsKnown=true;      updateNodeAndDescendents(node);    }  } else {    throw new RuntimeException("Unknown componentChangedEvent");  }  super.handleModelChangedEvent(model,object,index);}  }
class C{  @SuppressWarnings("deprecation") public int replaceBlocks(final Region region,final Set<BaseBlock> filter,final Pattern pattern) throws MaxChangedBlocksException {  final Mask mask=filter == null ? new ExistingBlockMask(this) : new FuzzyBlockMask(this,filter);  return this.replaceBlocks(region,mask,pattern);}  }
class C{  protected List<ClassificationResult<BytesRef>> assignClassNormalizedList(String inputDocument) throws IOException {  List<ClassificationResult<BytesRef>> assignedClasses=new ArrayList<>();  Terms classes=MultiFields.getTerms(indexReader,classFieldName);  if (classes != null) {    TermsEnum classesEnum=classes.iterator();    BytesRef next;    String[] tokenizedText=tokenize(inputDocument);    int docsWithClassSize=countDocsWithClass();    while ((next=classesEnum.next()) != null) {      if (next.length > 0) {        Term term=new Term(this.classFieldName,next);        double clVal=calculateLogPrior(term,docsWithClassSize) + calculateLogLikelihood(tokenizedText,term,docsWithClassSize);        assignedClasses.add(new ClassificationResult<>(term.bytes(),clVal));      }    }  }  return normClassificationResults(assignedClasses);}  }
class C{  public AndroidSensor(long rate){  this.rate=rate;  flag=true;  start=System.currentTimeMillis();  try {    ss=new ServerSocket(6001);  } catch (  IOException e) {    e.printStackTrace();  }  thread=new Thread(this);}  }
class C{  public static void deleteDirectory(final File dir,boolean checkForLinks){  if (dir.isFile()) {    throw new IllegalArgumentException("Directory " + dir.getName() + " must not be a file!");  } else   if (checkForLinks && isLink(dir)) {    throw new IllegalArgumentException("Directory " + dir.getName() + " doesn't exist or is a symbolic link or has a path name of type ./xyz or ../xyz !");  }  if (dir.exists()) {    IOUtils.deleteDir(dir,checkForLinks);  } else {    throw new IllegalArgumentException("Directory " + dir.getName() + " doesn't exist!");  }}  }
class C{  public static JsonToken deserialize(final String jwt) throws Exception {  JsonTokenParser parser=new JsonTokenParser(verifierProviders,new AbelanaTokenAudienceChecker(BackendConstants.TOKEN_ISSUER));  return parser.deserialize(jwt);}  }
class C{  public DraftRevision migrate(Migration migration,RepositoryType repositoryType,Codebase fromCodebase,Revision mostRecentFromRev,MetadataScrubberConfig metadataScrubberConfig,ScrubberConfig scrubberConfig,Writer destination,Expression referenceToCodebase){  RevisionHistory revisionHistory=repositoryType.revisionHistory();  RevisionMetadata metadata=processMetadata(revisionHistory,migration.fromRevisions(),metadataScrubberConfig,mostRecentFromRev);  return revisionFactory.create(fromCodebase,destination,possiblyScrubAuthors(metadata,scrubberConfig));}  }
class C{  public void tagDefineTextField(int fieldId,String fieldName,String initialText,Rect boundary,int flags,AlphaColor textColor,int alignment,int fontId,int fontSize,int charLimit,int leftMargin,int rightMargin,int indentation,int lineSpacing) throws IOException {  if (tags != null) {    tags.tagDefineTextField(fieldId,fieldName,initialText,boundary,flags,textColor,alignment,fontId,fontSize,charLimit,leftMargin,rightMargin,indentation,lineSpacing);  }}  }
class C{  public IdentityHashMap(Map<? extends K,? extends V> map){  this(map.size() < 6 ? 11 : map.size() * 2);  putAllImpl(map);}  }
class C{  public void resetCircleColors(){  mCircleColors=new ArrayList<Integer>();}  }
class C{  @Override public Float put(Long key,Float value){  return wrapValue(_map.put(unwrapKey(key),unwrapValue(value)));}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case MappingPackage.MAPPING_RULE__TARGET:    setTarget((Target)newValue);  return;case MappingPackage.MAPPING_RULE__SOURCES:getSources().clear();getSources().addAll((Collection<? extends Source>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public static GridClockMessage fromBytes(byte[] buf,int off,int len) throws IgniteCheckedException {  if (len < PACKET_SIZE)   throw new IgniteCheckedException("Failed to assemble time server packet (message is too short).");  long lsb=U.bytesToLong(buf,off);  long msb=U.bytesToLong(buf,off + 8);  UUID origNodeId=new UUID(msb,lsb);  lsb=U.bytesToLong(buf,off + 16);  msb=U.bytesToLong(buf,off + 24);  UUID targetNodeId=new UUID(msb,lsb);  long origTs=U.bytesToLong(buf,off + 32);  long replyTs=U.bytesToLong(buf,off + 40);  return new GridClockMessage(origNodeId,targetNodeId,origTs,replyTs);}  }
class C{  public Date addAssign(final int days){  serialNumber+=days;  checkSerialNumber();  delegatedObservable.notifyObservers();  return this;}  }
class C{  public void paintSplitPaneDividerBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  @Override public Assignments<E> split(AbstractMTree<O,N,E,?> tree,N node){  final int n=node.getNumEntries();  double[] distanceMatrix=computeDistanceMatrix(tree,node);  int besti=-1, bestj=-1;  double currentMaxDist=Double.NEGATIVE_INFINITY;  for (int i=0; i < n; i++) {    int row=i * n;    for (int j=i + 1; j < n; j++) {      double distance=distanceMatrix[row + j];      if (distance > currentMaxDist) {        besti=i;        bestj=j;        currentMaxDist=distance;      }    }  }  return balancedPartition(tree,node,besti,bestj,distanceMatrix);}  }
class C{  int useCache(SolrCache sc,int numGets,int maxKey,int seed){  int ret=0;  Random r=new Random(seed);  for (int i=0; i < numGets; i++) {    Integer k=r.nextInt(maxKey);    Integer v=(Integer)sc.get(k);    if (v == null) {      sc.put(k,k);      ret++;    }  }  return ret;}  }
class C{  @Override public void write(DataOutput out) throws IOException {  out.writeInt(this.initialCapacity);  this.value.write(out);  this.meta.write(out);}  }
class C{  private void checkAndPurgeObsoleteCopies(String volumeOrCgId){  if (!isRetentionRequired()) {    return;  }  List<RetainedReplica> replicas=findObsoleteReplica(volumeOrCgId);  for (  RetainedReplica replica : replicas) {    for (    String obsoleteCopyId : replica.getAssociatedReplicaIds()) {      info("Delete full copy %s since it exceeds max number of copies allowed",obsoleteCopyId);      if (ConsistencyUtils.isVolumeStorageType(storageType)) {        BlockStorageUtils.removeFullCopy(uri(obsoleteCopyId),VolumeDeleteTypeEnum.FULL);      } else {        ConsistencyUtils.removeFullCopy(uri(volumeOrCgId),uri(obsoleteCopyId));      }    }    getModelClient().delete(replica);  }}  }
class C{  public UniformIntegerGenerator(int lb,int ub){  _random=new Random();  _lb=lb;  _ub=ub;  _interval=_ub - _lb + 1;}  }
class C{  public NSNumber(String text){  if (text == null)   throw new IllegalArgumentException("The given string is null and cannot be parsed as number.");  try {    long l;    if (text.startsWith("0x")) {      l=Long.parseLong(text.substring(2),16);    } else {      l=Long.parseLong(text);    }    doubleValue=longValue=l;    type=INTEGER;  } catch (  Exception ex) {    try {      doubleValue=Double.parseDouble(text);      longValue=Math.round(doubleValue);      type=REAL;    } catch (    Exception ex2) {      try {        boolValue=text.equalsIgnoreCase("true") || text.equalsIgnoreCase("yes");        if (!boolValue && !(text.equalsIgnoreCase("false") || text.equalsIgnoreCase("no"))) {          throw new Exception("not a boolean");        }        type=BOOLEAN;        doubleValue=longValue=boolValue ? 1 : 0;      } catch (      Exception ex3) {        throw new IllegalArgumentException("The given string neither represents a double, an int nor a boolean value.");      }    }  }}  }
class C{  public Intent addFlags(int flags){  mFlags|=flags;  return this;}  }
class C{  public boolean isStrictMode(){  return strictMode;}  }
class C{  public boolean os(){  return this.os;}  }
class C{  public void comment(char[] ch,int start,int length) throws SAXException {  if (m_firstTagNotEmitted) {    flush();  }  m_handler.comment(ch,start,length);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean calendarIsReferenced(Connection conn,String calendarName) throws SQLException {  PreparedStatement ps=null;  ResultSet rs=null;  try {    ps=conn.prepareStatement(rtp(SELECT_REFERENCED_CALENDAR));    ps.setString(1,calendarName);    rs=ps.executeQuery();    if (rs.next()) {      return true;    } else {      return false;    }  }  finally {    closeResultSet(rs);    closeStatement(ps);  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.N4_MEMBER_ANNOTATION_LIST__DECLARED_MODIFIERS:    return getDeclaredModifiers();case N4JSPackage.N4_MEMBER_ANNOTATION_LIST__OWNER:  if (resolve)   return getOwner();return basicGetOwner();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private void friendAdded(){  followButton.setVisibility(GONE);  unfollowButton.setVisibility(VISIBLE);  userHandler.addFriend(user);}  }
class C{  public TextParseException exception(String s){  return new TokenizerException(filename,line,s);}  }
class C{  public ConePortrayal3D(Image image,double scale){  this(appearanceForImage(image,true),false,true,scale);}  }
class C{  public void testGetF6Momentary(){  AbstractThrottle instance=new AbstractThrottleImpl();  boolean expResult=false;  boolean result=instance.getF6Momentary();  assertEquals(expResult,result);}  }
class C{  private void disposeCodec(IoSession session){  disposeEncoder(session);  disposeDecoder(session);  disposeDecoderOut(session);}  }
class C{  public boolean isClickTouchScreen(){  return impl.isClickTouchScreen();}  }
class C{  public Builder(List<T> options){  this.options=options;}  }
class C{  @Override public void writeObject(Object object) throws IOException {  if (object == null) {    writeNull();    return;  }  Serializer serializer=findSerializerFactory().getObjectSerializer(object.getClass());  serializer.writeObject(object,this);}  }
class C{  private boolean saveBitmap(String fullPath,Bitmap bitmap){  if (fullPath == null || bitmap == null)   return false;  boolean fileCreated=false;  boolean bitmapCompressed=false;  boolean streamClosed=false;  File imageFile=new File(fullPath);  if (imageFile.exists())   if (!imageFile.delete())   return false;  try {    fileCreated=imageFile.createNewFile();  } catch (  IOException e) {    e.printStackTrace();  }  FileOutputStream out=null;  try {    out=new FileOutputStream(imageFile);    bitmapCompressed=bitmap.compress(CompressFormat.PNG,100,out);  } catch (  Exception e) {    e.printStackTrace();    bitmapCompressed=false;  } finally {    if (out != null) {      try {        out.flush();        out.close();        streamClosed=true;      } catch (      IOException e) {        e.printStackTrace();        streamClosed=false;      }    }  }  return (fileCreated && bitmapCompressed && streamClosed);}  }
class C{  public <T>Consumer<T> wrap(Throwing.Consumer<T> consumer){  return null;}  }
class C{  public TechnicalServiceActiveException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-18 21:46:41.499 -0400",hash_original_method="9930459085CDC2417094A7A8585D74E6",hash_generated_method="5A33FCD11FD7601B075450C8B2424E13") private void parseMenu(XmlPullParser parser,AttributeSet attrs,Menu menu) throws XmlPullParserException, IOException {  MenuState menuState=new MenuState(menu);  int eventType=parser.getEventType();  String tagName;  boolean lookingForEndOfUnknownTag=false;  String unknownTagName=null;  do {    if (eventType == XmlPullParser.START_TAG) {      tagName=parser.getName();      if (tagName.equals(XML_MENU)) {        eventType=parser.next();        break;      }      throw new RuntimeException("Expecting menu, got " + tagName);    }    eventType=parser.next();  } while (eventType != XmlPullParser.END_DOCUMENT);  boolean reachedEndOfMenu=false;  while (!reachedEndOfMenu) {switch (eventType) {case XmlPullParser.START_TAG:      if (lookingForEndOfUnknownTag) {        break;      }    tagName=parser.getName();  if (tagName.equals(XML_GROUP)) {    menuState.readGroup(attrs);  } else   if (tagName.equals(XML_ITEM)) {    menuState.readItem(attrs);  } else   if (tagName.equals(XML_MENU)) {    SubMenu subMenu=menuState.addSubMenuItem();    parseMenu(parser,attrs,subMenu);  } else {    lookingForEndOfUnknownTag=true;    unknownTagName=tagName;  }break;case XmlPullParser.END_TAG:tagName=parser.getName();if (lookingForEndOfUnknownTag && tagName.equals(unknownTagName)) {lookingForEndOfUnknownTag=false;unknownTagName=null;} else if (tagName.equals(XML_GROUP)) {menuState.resetGroup();} else if (tagName.equals(XML_ITEM)) {if (!menuState.hasAddedItem()) {if (menuState.itemActionProvider != null && menuState.itemActionProvider.hasSubMenu()) {  menuState.addSubMenuItem();} else {  menuState.addItem();}}} else if (tagName.equals(XML_MENU)) {reachedEndOfMenu=true;}break;case XmlPullParser.END_DOCUMENT:throw new RuntimeException("Unexpected end of document");}eventType=parser.next();}}  }
class C{  public HadoopConfiguration configuration(){  return cfg;}  }
class C{  public String province(){  return province;}  }
class C{  public void test_ConstructorLjava_lang_StringLjava_security_IdentityScope() throws Exception {  String nameNull=null;  String[] str={"test","","!@#$%^&*()","identity name"};  IdentityScopeSubclass iss=new IdentityScopeSubclass("name");  IdentitySubclass is;  for (int i=0; i < str.length; i++) {    try {      is=new IdentitySubclass(str[i],new IdentityScopeSubclass());      assertNotNull(is);      assertTrue(is instanceof Identity);    } catch (    Exception e) {      System.out.println(e);      fail("Unexpected exception for parameter " + str[i]);    }  }  try {    is=new IdentitySubclass(nameNull,new IdentityScopeSubclass());  } catch (  NullPointerException npe) {  }catch (  Exception e) {    fail("Incorrect exception " + e + " was thrown");  }  try {    is=new IdentitySubclass("test",iss);    is=new IdentitySubclass("test",iss);    fail("KeyManagementException was not thrown");  } catch (  KeyManagementException expected) {  }}  }
class C{  public void add(int index,Entity entity){  if (entities.contains(entity)) {    throw new IllegalStateException("ToMany relation already contains '" + entity + "'");  }  if (entity.getEntityType() != entityType) {    throw new IllegalStateException("Cannot add " + entity.getEntityType() + " to "+ getParent()+ "."+ getName());  }  if (entity.isClearlyNotInDatabase()) {    newEntities.add(entity);  }  entities.add(index,entity);}  }
class C{  public synchronized void seekOffset(long offset) throws IOException, ReplicatorException, InterruptedException {  assertReadMode();  dataInput.seek(offset);  if (logger.isDebugEnabled()) {    logger.debug("Skipping to position " + offset + " into file "+ this.file.getName());  }}  }
class C{  public java.io.Reader readCharacterStream() throws SQLException {  return (java.io.Reader)getNextAttribute();}  }
class C{  public ServerHelloDone(HandshakeIODataStream in,int length) throws IOException {  if (length != 0) {    fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR: incorrect ServerHelloDone");  }}  }
class C{  private void initTableLayout(){  if (mCollapsedColumns == null) {    mCollapsedColumns=new SparseBooleanArray();  }  if (mStretchableColumns == null) {    mStretchableColumns=new SparseBooleanArray();  }  if (mShrinkableColumns == null) {    mShrinkableColumns=new SparseBooleanArray();  }  setOrientation(VERTICAL);  mPassThroughListener=new PassThroughHierarchyChangeListener();  super.setOnHierarchyChangeListener(mPassThroughListener);  mInitialized=true;}  }
class C{  public static BufferedImage createColorModelCompatibleImage(BufferedImage image){  ColorModel cm=image.getColorModel();  return new BufferedImage(cm,cm.createCompatibleWritableRaster(image.getWidth(),image.getHeight()),cm.isAlphaPremultiplied(),null);}  }
class C{  public ParseFile(String name,byte[] data,String contentType){  this(new State.Builder().name(name).mimeType(contentType).build());  this.data=data;}  }
class C{  public String toString(){  java.text.MessageFormat form=new java.text.MessageFormat(sun.security.util.ResourcesMgr.getString("NTSid.name","sun.security.util.AuthResources"));  Object[] source={sid};  return form.format(source);}  }
class C{  @DSComment("Wifi subsystem") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:05.347 -0500",hash_original_method="D7F0AFD1306EBF22F34F7E014A2C9B11",hash_generated_method="F3D7FB4B1B4B8151872D04C5B84B09C5") public boolean isWifiEnabled(){  return getWifiState() == WIFI_STATE_ENABLED;}  }
class C{  private boolean awaitReady(long howLongMillis) throws InterruptedException {  long untilMillis=System.currentTimeMillis() + howLongMillis;  while (!ready && System.currentTimeMillis() < untilMillis) {    Thread.sleep(1);  }  return ready;}  }
class C{  public void refreshSelectLast(){  final int TIME_DELAY_REFRESH_SELECT_LAST=100;  handler.removeMessages(HANDLER_MESSAGE_REFRESH_LIST);  handler.removeMessages(HANDLER_MESSAGE_SELECT_LAST);  handler.sendEmptyMessageDelayed(HANDLER_MESSAGE_REFRESH_LIST,TIME_DELAY_REFRESH_SELECT_LAST);  handler.sendEmptyMessageDelayed(HANDLER_MESSAGE_SELECT_LAST,TIME_DELAY_REFRESH_SELECT_LAST);}  }
class C{  private void include(DefaultFaceletContext ctx,UIComponent parent) throws IOException {  this.refresh(parent);  this.root.apply(new DefaultFaceletContext(ctx,this),parent);  this.markApplied(parent);}  }
class C{  @Override public byte[] serializeKey(Object obj){  return getKeyBuilder().reset().append((Long)obj).getKey();}  }
class C{  @Override public void output(Vertex output){  if (!isEnabled()) {    return;  }  Vertex sense=output.mostConscious(Primitive.SENSE);  if ((sense == null) || (!getPrimitive().equals(sense.getData()))) {    return;  }  String text=printInput(output);  Vertex target=output.mostConscious(Primitive.TARGET);  String replyTo=target.mostConscious(Primitive.WORD).getData().toString();  Vertex conversation=output.getRelationship(Primitive.CONVERSATION);  Vertex id=conversation.getRelationship(Primitive.ID);  String conversationId=id.printString();  sendMessage(text,replyTo,conversationId);}  }
class C{  public AssertingPointsFormat(PointsFormat in){  this.in=in;}  }
class C{  public BloomFilter(final Hasher hash,int bitSetSize,int expectedNumberOfFilterElements,int actualNumberOfFilterElements,BitSet filterData,int metric){  this(hash,bitSetSize,expectedNumberOfFilterElements,metric);  this.bitset=filterData;  this.numberOfAddedElements=actualNumberOfFilterElements;}  }
class C{  @TargetApi(Build.VERSION_CODES.HONEYCOMB_MR2) private void showProgress(final boolean show){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR2) {    loginForm.setVisibility(show ? View.GONE : View.VISIBLE);    loginProgress.setVisibility(show ? View.VISIBLE : View.GONE);  } else {    loginProgress.setVisibility(show ? View.VISIBLE : View.GONE);    loginForm.setVisibility(show ? View.GONE : View.VISIBLE);  }}  }
class C{  Status readStatus(Element el){  NodeList list=el.getElementsByTagName("status");  if (list == null || list.getLength() == 0)   return DomainSuffix.DEFAULT_STATUS;  return Status.valueOf(list.item(0).getFirstChild().getNodeValue());}  }
class C{  public synchronized void clearErrors(){  errors=false;}  }
class C{  public boolean startSsl(IoSession session) throws SSLException {  SslHandler sslHandler=getSslSessionHandler(session);  boolean started;  try {synchronized (sslHandler) {      if (sslHandler.isOutboundDone()) {        NextFilter nextFilter=(NextFilter)session.getAttribute(NEXT_FILTER);        sslHandler.destroy();        sslHandler.init();        sslHandler.handshake(nextFilter);        started=true;      } else {        started=false;      }    }    sslHandler.flushScheduledEvents();  } catch (  SSLException se) {    sslHandler.release();    throw se;  }  return started;}  }
class C{  public Matrix4d m33(double m33){  this.m33=m33;  properties=0;  return this;}  }
class C{  private void interrupt(){  final TalkBackService service=TalkBackService.getInstance();  if (service == null) {    LogUtils.log(Log.ERROR,"Failed to get TalkBackService instance.");    return;  }  final SpeechController speechController=service.getSpeechController();  speechController.interrupt();}  }
class C{  public void fireObjectsUpdated(DBIDRef update){  fireObjectChanged(update,Type.UPDATE);}  }
class C{  public SmbFile(SmbFile context,String name) throws MalformedURLException, UnknownHostException {  this(context.isWorkgroup0() ? new URL(null,"smb://" + name,Handler.SMB_HANDLER) : new URL(context.url,name,Handler.SMB_HANDLER),context.auth);}  }
class C{  public static CompoundTag parseCompound(String mojangson) throws MojangsonParseException {  final int parseCompoundStart=0;  final int parseCompoundPairKey=1;  final int parseCompoundPairValue=2;  int context=parseCompoundStart;  String tmpval="", tmpkey="";  int scope=0;  boolean inString=false;  CompoundTag tag=new CompoundTag();  for (int index=0; index < mojangson.length(); index++) {    Character character=mojangson.charAt(index);    if (character == STRING_QUOTES.getSymbol()) {      inString=!inString;    }    if (character == WHITE_SPACE.getSymbol()) {      if (!inString)       continue;    }    if ((character == COMPOUND_START.getSymbol() || character == ARRAY_START.getSymbol()) && !inString) {      scope++;    }    if ((character == COMPOUND_END.getSymbol() || character == ARRAY_END.getSymbol()) && !inString) {      scope--;    }    if (context == parseCompoundStart) {      if (character != COMPOUND_START.getSymbol()) {        throw new MojangsonParseException("Index: " + index + ", symbol: \'"+ character+ "\'",MojangsonParseException.ParseExceptionReason.UNEXPECTED_SYMBOL);      }      context++;      continue;    }    if (context == parseCompoundPairKey) {      if (character == ELEMENT_PAIR_SEPERATOR.getSymbol() && scope <= 1) {        context++;        continue;      }      tmpkey+=character;      continue;    }    if (context == parseCompoundPairValue) {      if ((character == ELEMENT_SEPERATOR.getSymbol() || character == COMPOUND_END.getSymbol()) && scope <= 1 && !inString) {        context=parseCompoundPairKey;        tag.getValue().put(tmpkey,parseTag(tmpval));        tmpkey=tmpval="";        continue;      }      tmpval+=character;    }  }  return tag;}  }
class C{  public Path cassandraConfig(){  return conf().resolve(CassandraApplicationConfig.DEFAULT_FILE_NAME);}  }
class C{  public StreamInterceptingTunnel(GuacamoleTunnel tunnel){  super(tunnel);}  }
class C{  public static String chop(String str){  if ("".equals(str)) {    return "";  }  if (str.length() == 1) {    return "";  }  int lastIdx=str.length() - 1;  String ret=str.substring(0,lastIdx);  char last=str.charAt(lastIdx);  if (last == '\n') {    if (ret.charAt(lastIdx - 1) == '\r') {      return ret.substring(0,lastIdx - 1);    }  }  return ret;}  }
class C{  @Override public boolean service(RequestBaratine request){  request.status(HttpStatus.NOT_FOUND);  request.write("Not found: " + request.uri() + "\n");  request.ok();  return true;}  }
class C{  protected SVGOMTextContentElement(){}  }
class C{  private static Credential authorize() throws Exception {  GoogleClientSecrets clientSecrets=GoogleClientSecrets.load(JSON_FACTORY,new InputStreamReader(DriveSample.class.getResourceAsStream("/client_secrets.json")));  if (clientSecrets.getDetails().getClientId().startsWith("Enter") || clientSecrets.getDetails().getClientSecret().startsWith("Enter ")) {    System.out.println("Enter Client ID and Secret from https://code.google.com/apis/console/?api=drive " + "into drive-cmdline-sample/src/main/resources/client_secrets.json");    System.exit(1);  }  GoogleAuthorizationCodeFlow flow=new GoogleAuthorizationCodeFlow.Builder(httpTransport,JSON_FACTORY,clientSecrets,Collections.singleton(DriveScopes.DRIVE_FILE)).setDataStoreFactory(dataStoreFactory).build();  return new AuthorizationCodeInstalledApp(flow,new LocalServerReceiver()).authorize("user");}  }
class C{  private boolean checkArray(final String[][] table){  if (table == null) {    return false;  }  for (int i=0; i < table.length; i++) {    final String[] array=table[i];    if (array == null || array.length != 2) {      return false;    }  }  return true;}  }
class C{  public Rotate3dAnimation(float fromDegrees,float toDegrees,float centerX,float centerY,float depthZ,boolean reverse){  mFromDegrees=fromDegrees;  mToDegrees=toDegrees;  mCenterX=centerX;  mCenterY=centerY;  mDepthZ=depthZ;  mReverse=reverse;}  }
class C{  protected void onShowCompleted(){}  }
class C{  public Object visit(ASTElseIfStatement node,Object data){  return showNode(node,data);}  }
class C{  public boolean isRootBranchDependent(){  return getControlDependencies().isEmpty();}  }
class C{  public static final String decode(final long[] obfuscated){  final int length=obfuscated.length;  final byte[] encoded=new byte[8 * (length - 1)];  final long seed=obfuscated[0];  final Random prng=new Random(seed);  for (int i=1; i < length; i++) {    final long key=prng.nextLong();    final int off=8 * (i - 1);    long l=obfuscated[i] ^ key;    final int end=Math.min(encoded.length,off + 8);    for (int i2=off; i2 < end; i2++) {      encoded[i2]=(byte)l;      l>>=8;    }  }  final String decoded;  try {    decoded=new String(encoded,"UTF8");  } catch (  UnsupportedEncodingException ex) {    throw new AssertionError(ex);  }  final int i=decoded.indexOf(0);  return i != -1 ? decoded.substring(0,i) : decoded;}  }
class C{  public void build(DOMTestSink sink){  sink.addTest(attrgetownerelement02.class);  sink.addTest(attrgetownerelement03.class);  sink.addTest(attrgetownerelement04.class);  sink.addTest(attrgetownerelement05.class);  sink.addTest(createAttributeNS01.class);  sink.addTest(createAttributeNS02.class);  sink.addTest(createAttributeNS03.class);  sink.addTest(createAttributeNS04.class);  sink.addTest(createAttributeNS05.class);  sink.addTest(createDocument01.class);  sink.addTest(createDocument02.class);  sink.addTest(createDocument05.class);  sink.addTest(createDocument06.class);  sink.addTest(createDocument07.class);  sink.addTest(createDocumentType01.class);  sink.addTest(createDocumentType02.class);  sink.addTest(createDocumentType03.class);  sink.addTest(createElementNS01.class);  sink.addTest(createElementNS02.class);  sink.addTest(createElementNS03.class);  sink.addTest(createElementNS04.class);  sink.addTest(createElementNS05.class);  sink.addTest(documentcreateattributeNS01.class);  sink.addTest(documentcreateattributeNS02.class);  sink.addTest(documentcreateattributeNS03.class);  sink.addTest(documentcreateattributeNS04.class);  sink.addTest(documentcreateattributeNS05.class);  sink.addTest(documentcreateattributeNS06.class);  sink.addTest(documentcreateattributeNS07.class);  sink.addTest(documentcreateelementNS01.class);  sink.addTest(documentcreateelementNS02.class);  sink.addTest(documentcreateelementNS05.class);  sink.addTest(documentcreateelementNS06.class);  sink.addTest(documentgetelementbyid01.class);  sink.addTest(documentgetelementsbytagnameNS01.class);  sink.addTest(documentgetelementsbytagnameNS02.class);  sink.addTest(documentgetelementsbytagnameNS03.class);  sink.addTest(documentgetelementsbytagnameNS04.class);  sink.addTest(documentgetelementsbytagnameNS05.class);  sink.addTest(documentimportnode02.class);  sink.addTest(documentimportnode05.class);  sink.addTest(documentimportnode06.class);  sink.addTest(documentimportnode07.class);  sink.addTest(documentimportnode08.class);  sink.addTest(documentimportnode09.class);  sink.addTest(documentimportnode10.class);  sink.addTest(documentimportnode11.class);  sink.addTest(documentimportnode12.class);  sink.addTest(documentimportnode13.class);  sink.addTest(documentimportnode15.class);  sink.addTest(documentimportnode17.class);  sink.addTest(documentimportnode18.class);  sink.addTest(documenttypeinternalSubset01.class);  sink.addTest(documenttypepublicid01.class);  sink.addTest(documenttypesystemid01.class);  sink.addTest(domimplementationcreatedocument03.class);  sink.addTest(domimplementationcreatedocument04.class);  sink.addTest(domimplementationcreatedocument05.class);  sink.addTest(domimplementationcreatedocument07.class);  sink.addTest(domimplementationcreatedocumenttype01.class);  sink.addTest(domimplementationcreatedocumenttype02.class);  sink.addTest(domimplementationcreatedocumenttype04.class);  sink.addTest(domimplementationfeaturecore.class);  sink.addTest(domimplementationfeaturexmlversion2.class);  sink.addTest(domimplementationhasfeature01.class);  sink.addTest(domimplementationhasfeature02.class);  sink.addTest(elementgetattributenodens01.class);  sink.addTest(elementgetattributenodens02.class);  sink.addTest(elementgetelementsbytagnamens02.class);  sink.addTest(elementgetelementsbytagnamens04.class);  sink.addTest(elementgetelementsbytagnamens05.class);  sink.addTest(elementhasattribute01.class);  sink.addTest(elementhasattribute03.class);  sink.addTest(elementhasattribute04.class);  sink.addTest(elementhasattributens02.class);  sink.addTest(elementhasattributens03.class);  sink.addTest(elementremoveattributens01.class);  sink.addTest(elementsetattributenodens01.class);  sink.addTest(elementsetattributenodens02.class);  sink.addTest(elementsetattributenodens03.class);  sink.addTest(elementsetattributenodens04.class);  sink.addTest(elementsetattributenodens05.class);  sink.addTest(elementsetattributens01.class);  sink.addTest(elementsetattributens02.class);  sink.addTest(elementsetattributens03.class);  sink.addTest(elementsetattributens04.class);  sink.addTest(elementsetattributens05.class);  sink.addTest(elementsetattributens08.class);  sink.addTest(elementsetattributensurinull.class);  sink.addTest(getAttributeNS02.class);  sink.addTest(getAttributeNS03.class);  sink.addTest(getAttributeNS04.class);  sink.addTest(getAttributeNS05.class);  sink.addTest(getAttributeNodeNS01.class);  sink.addTest(getAttributeNodeNS02.class);  sink.addTest(getElementById02.class);  sink.addTest(getElementsByTagNameNS02.class);  sink.addTest(getElementsByTagNameNS03.class);  sink.addTest(getElementsByTagNameNS04.class);  sink.addTest(getElementsByTagNameNS05.class);  sink.addTest(getElementsByTagNameNS06.class);  sink.addTest(getElementsByTagNameNS07.class);  sink.addTest(getElementsByTagNameNS08.class);  sink.addTest(getElementsByTagNameNS09.class);  sink.addTest(getElementsByTagNameNS10.class);  sink.addTest(getElementsByTagNameNS11.class);  sink.addTest(getElementsByTagNameNS12.class);  sink.addTest(getElementsByTagNameNS13.class);  sink.addTest(getElementsByTagNameNS14.class);  sink.addTest(getNamedItemNS01.class);  sink.addTest(getNamedItemNS02.class);  sink.addTest(hasAttribute01.class);  sink.addTest(hasAttribute03.class);  sink.addTest(hasAttributeNS01.class);  sink.addTest(hasAttributeNS02.class);  sink.addTest(hasAttributeNS03.class);  sink.addTest(hasAttributeNS05.class);  sink.addTest(hasAttributes01.class);  sink.addTest(hasAttributes02.class);  sink.addTest(hc_namednodemapinvalidtype1.class);  sink.addTest(hc_nodedocumentfragmentnormalize1.class);  sink.addTest(hc_nodedocumentfragmentnormalize2.class);  sink.addTest(importNode02.class);  sink.addTest(importNode03.class);  sink.addTest(importNode04.class);  sink.addTest(importNode08.class);  sink.addTest(importNode10.class);  sink.addTest(importNode14.class);  sink.addTest(importNode15.class);  sink.addTest(importNode16.class);  sink.addTest(importNode17.class);  sink.addTest(internalSubset01.class);  sink.addTest(isSupported01.class);  sink.addTest(isSupported02.class);  sink.addTest(isSupported04.class);  sink.addTest(isSupported05.class);  sink.addTest(isSupported06.class);  sink.addTest(isSupported07.class);  sink.addTest(isSupported09.class);  sink.addTest(isSupported10.class);  sink.addTest(isSupported11.class);  sink.addTest(isSupported12.class);  sink.addTest(isSupported13.class);  sink.addTest(isSupported14.class);  sink.addTest(localName01.class);  sink.addTest(localName02.class);  sink.addTest(localName03.class);  sink.addTest(localName04.class);  sink.addTest(namednodemapgetnameditemns02.class);  sink.addTest(namednodemapgetnameditemns03.class);  sink.addTest(namednodemapgetnameditemns04.class);  sink.addTest(namednodemapgetnameditemns05.class);  sink.addTest(namednodemapgetnameditemns06.class);  sink.addTest(namednodemapremovenameditemns01.class);  sink.addTest(namednodemapremovenameditemns03.class);  sink.addTest(namednodemapremovenameditemns06.class);  sink.addTest(namednodemapremovenameditemns07.class);  sink.addTest(namednodemapremovenameditemns08.class);  sink.addTest(namednodemapremovenameditemns09.class);  sink.addTest(namednodemapsetnameditemns01.class);  sink.addTest(namednodemapsetnameditemns02.class);  sink.addTest(namednodemapsetnameditemns03.class);  sink.addTest(namednodemapsetnameditemns04.class);  sink.addTest(namednodemapsetnameditemns06.class);  sink.addTest(namednodemapsetnameditemns07.class);  sink.addTest(namednodemapsetnameditemns08.class);  sink.addTest(namespaceURI02.class);  sink.addTest(namespaceURI03.class);  sink.addTest(namespaceURI04.class);  sink.addTest(nodegetlocalname03.class);  sink.addTest(nodegetnamespaceuri03.class);  sink.addTest(nodegetownerdocument01.class);  sink.addTest(nodegetownerdocument02.class);  sink.addTest(nodegetprefix03.class);  sink.addTest(nodehasattributes01.class);  sink.addTest(nodehasattributes02.class);  sink.addTest(nodehasattributes03.class);  sink.addTest(nodehasattributes04.class);  sink.addTest(nodeissupported01.class);  sink.addTest(nodeissupported02.class);  sink.addTest(nodeissupported03.class);  sink.addTest(nodeissupported04.class);  sink.addTest(nodeissupported05.class);  sink.addTest(nodenormalize01.class);  sink.addTest(nodesetprefix01.class);  sink.addTest(nodesetprefix02.class);  sink.addTest(nodesetprefix03.class);  sink.addTest(nodesetprefix05.class);  sink.addTest(nodesetprefix06.class);  sink.addTest(nodesetprefix07.class);  sink.addTest(nodesetprefix08.class);  sink.addTest(normalize01.class);  sink.addTest(ownerDocument01.class);  sink.addTest(ownerElement01.class);  sink.addTest(ownerElement02.class);  sink.addTest(prefix01.class);  sink.addTest(prefix02.class);  sink.addTest(prefix03.class);  sink.addTest(prefix04.class);  sink.addTest(prefix05.class);  sink.addTest(prefix07.class);  sink.addTest(prefix10.class);  sink.addTest(prefix11.class);  sink.addTest(publicId01.class);  sink.addTest(removeNamedItemNS01.class);  sink.addTest(removeNamedItemNS02.class);  sink.addTest(setAttributeNS01.class);  sink.addTest(setAttributeNS02.class);  sink.addTest(setAttributeNS04.class);  sink.addTest(setAttributeNS05.class);  sink.addTest(setAttributeNS06.class);  sink.addTest(setAttributeNS07.class);  sink.addTest(setAttributeNS09.class);  sink.addTest(setAttributeNodeNS01.class);  sink.addTest(setAttributeNodeNS03.class);  sink.addTest(setAttributeNodeNS04.class);  sink.addTest(setAttributeNodeNS05.class);  sink.addTest(setNamedItemNS01.class);  sink.addTest(setNamedItemNS02.class);  sink.addTest(setNamedItemNS03.class);  sink.addTest(systemId01.class);}  }
class C{  public static DataWorldComponent open(InputStream input,String name,String format){  NumericTable model=(NumericTable)NumericTable.getXStream().fromXML(input);  return DataWorldComponent.createDataWorld(model,name);}  }
class C{  @Override protected EClass eStaticClass(){  return SGraphPackage.Literals.SCOPED_ELEMENT;}  }
class C{  public FillStyle(Matrix matrix,int[] ratios,Color[] colors,boolean radial){  this.matrix=matrix;  this.ratios=ratios;  this.colors=colors;  fillType=radial ? SWFConstants.FILL_RADIAL_GRADIENT : SWFConstants.FILL_LINEAR_GRADIENT;}  }
class C{  public void removeProcessListener(INodejsProcessListener listener){synchronized (listeners) {    listeners.remove(listener);  }}  }
class C{  public int current(){  return pos;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:10.169 -0500",hash_original_method="B5F8473E1F8564D0A56C45C190B84DBB",hash_generated_method="CEDF34F1D1CB3150308435DAEA067A4F") public boolean hasParameters(){  return authParams.size() != 0;}  }
class C{  public SpyPath(PathImpl path){  super(path);}  }
class C{  public static void testValidity(Object o) throws JSONException {  if (o != null) {    if (o instanceof Double) {      if (((Double)o).isInfinite() || ((Double)o).isNaN()) {        throw new JSONException("JSON does not allow non-finite numbers.");      }    } else     if (o instanceof Float) {      if (((Float)o).isInfinite() || ((Float)o).isNaN()) {        throw new JSONException("JSON does not allow non-finite numbers.");      }    }  }}  }
class C{  public static int updatePrices(String message,double f){  return (int)f;}  }
class C{  public CryptoException(Throwable causeThrowable){  super(causeThrowable);}  }
class C{  @Override public boolean equals(Object obj){  if (!(obj instanceof XmlNamespace)) {    return false;  }  XmlNamespace other=(XmlNamespace)obj;  if (alias == null) {    return (other.alias == null) && uri.equals(other.uri);  } else {    return alias.equals(other.alias) && uri.equals(other.uri);  }}  }
class C{  public void addFeedback(String url,boolean sem) throws URISyntaxException {  URI uri=new URI(url);  addFeedback(uri,sem);}  }
class C{  public synchronized long allocate(int length){  int required=getBlockCount(length);  for (  BlockRange pr : freeSpaceList) {    if (pr.length >= required) {      int result=pr.start;      this.markUsed(pr.start * blockSize,length);      return result * blockSize;    }  }  throw DataUtils.newIllegalStateException(DataUtils.ERROR_INTERNAL,"Could not find a free page to allocate");}  }
class C{  @SuppressWarnings("unchecked") public void handleMethodNode(ClassNode cn,MethodNode mn,int depth){  if (mn.signature != null) {    logger.debug("Visiting signature: " + mn.signature);    CollectParameterTypesVisitor visitor=new CollectParameterTypesVisitor(cn.name);    new SignatureReader(mn.signature).accept(visitor);    for (    Type castType : visitor.getClasses()) {      if (!castClassMap.containsKey(castType)) {        logger.debug("Adding new cast class from signature visitor: " + castType);        castClassMap.put(castType,depth + 1);      }    }  }  InsnList instructions=mn.instructions;  Iterator<AbstractInsnNode> iterator=instructions.iterator();  while (iterator.hasNext()) {    AbstractInsnNode insn=iterator.next();    if (insn.getOpcode() == Opcodes.CHECKCAST) {      TypeInsnNode typeNode=(TypeInsnNode)insn;      Type castType=Type.getObjectType(typeNode.desc);      while (castType.getSort() == Type.ARRAY) {        castType=castType.getElementType();      }      logger.debug("Adding new cast class from cast: " + castType);      if (!castClassMap.containsKey(castType))       castClassMap.put(castType,depth + 1);    } else     if (insn.getOpcode() == Opcodes.INSTANCEOF) {      TypeInsnNode typeNode=(TypeInsnNode)insn;      Type castType=Type.getObjectType(typeNode.desc);      while (castType.getSort() == Type.ARRAY) {        castType=castType.getElementType();      }      logger.debug("Adding new cast class from instanceof: " + castType);      if (!castClassMap.containsKey(castType))       castClassMap.put(castType,depth + 1);    } else     if (insn.getOpcode() == Opcodes.LDC) {      LdcInsnNode ldcNode=(LdcInsnNode)insn;      if (ldcNode.cst instanceof Type) {        Type type=(Type)ldcNode.cst;        while (type.getSort() == Type.ARRAY) {          type=type.getElementType();        }        if (!castClassMap.containsKey(type))         castClassMap.put(type,depth + 1);      }    }  }}  }
class C{  private URI checkUri(final URI uri){  try {    return new File(uri).toURI();  } catch (  final Exception e) {    final String message="Illegal URI: '" + uri + "'."+ (null != e.getMessage() ? " " + e.getMessage() : "");    throw new IllegalArgumentException(message,e);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:38.064 -0500",hash_original_method="F570F6113919571E2190BC663D44A8A0",hash_generated_method="FE36934490D31E4E3A8AB2A433A505F0") public long node(){  if (version != 1) {    throw new UnsupportedOperationException();  }  return node;}  }
class C{  private boolean determinePSPParams(HttpServletRequest request,Properties p){  try {    ServletInputStream inputStream=request.getInputStream();    if (inputStream == null) {      return false;    }    BufferedReader br=new BufferedReader(new InputStreamReader(inputStream,"UTF-8"));    String line=br.readLine();    StringBuffer sb=new StringBuffer();    while (line != null) {      sb.append(line);      line=br.readLine();    }    String params=sb.toString();    StringTokenizer st=new StringTokenizer(params,"&");    while (st.hasMoreTokens()) {      String nextToken=st.nextToken();      String[] splitResult=nextToken.split("=");      String key=splitResult[0];      String value="";      if (splitResult.length > 1) {        value=URLDecoder.decode(splitResult[1],"UTF-8");      }      p.setProperty(key,value);    }    return validateResponse(p);  } catch (  IOException e) {    logger.logWarn(Log4jLogger.SYSTEM_LOG,e,LogMessageIdentifier.WARN_HEIDELPAY_INPUT_PROCESS_FAILED);  }  return false;}  }
class C{  public static void i(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_INFO) {    return;  }  Log.i(tag,msg,throwable);}  }
class C{  public void incrementRenewedTokens(String tenant){  logger.trace("Incrementing renewed tokens for tenant: {}",tenant);  try {    AtomicInteger count;synchronized (this) {      if ((count=renewedTokensMap.get(tenant)) == null) {        renewedTokensMap.put(tenant,new AtomicInteger(1));      } else {        count.incrementAndGet();      }    }    logger.trace("Tokens renewed for tenant: {} is- {}",tenant,renewedTokensMap.get(tenant));    incrementTotalRenewed();  } catch (  Exception e) {    logger.error("Unable to increment renewed tokens",e);  }}  }
class C{  public String toString(){  return "(" + x + ", "+ y+ ", "+ z+ ")";}  }
class C{  public static AVList wmsRestorableStateToParams(String stateInXml){  if (stateInXml == null) {    String message=Logging.getMessage("nullValue.StringIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  RestorableSupport rs;  try {    rs=RestorableSupport.parse(stateInXml);  } catch (  Exception e) {    String message=Logging.getMessage("generic.ExceptionAttemptingToParseStateXml",stateInXml);    Logging.logger().severe(message);    throw new IllegalArgumentException(message,e);  }  AVList params=new AVListImpl();  wmsRestoreStateToParams(rs,null,params);  return params;}  }
class C{  public static boolean testFileExists(String name){  boolean status;  if ((testSaveLocationExists()) && (!name.equals(""))) {    File path=Environment.getExternalStorageDirectory();    File newPath=constructFilePaths(path.toString(),name);    status=newPath.exists();  } else {    status=false;  }  return status;}  }
class C{  public int size(){  return hlist.size();}  }
class C{  public void destruct(){  if (null != m_obj) {    allowDetachToRelease(true);    detach();    setObject(null);  }}  }
class C{  protected String readGraphics(LinkOMGraphicList graphics,Projection proj,OMGridGenerator generator) throws IOException, EOFException {  OMGraphic graphic;  long startTime=System.currentTimeMillis();  String header=null;  int graphicType;  graphics.setNeedToRegenerate(proj == null);  float ver=link.dis.readFloat();  if (ver != version) {    if (ver == .1) {      throw new IOException("LinkGraphicList: Versions do not match! DANGER!");    } else {      Debug.message("link","LinkGraphicList: Versions do not match.");    }  }  if (properties != null) {    properties.clear();  }  properties=LinkProperties.read(link.dis,properties);  Debug.message("link","LinkGraphicList: reading graphics:");  LinkProperties propertiesBuffer=new LinkProperties(properties);  while (true) {    graphic=null;    header=link.readDelimiter(false);    if (header == Link.END_TOTAL || header == Link.END_SECTION) {      long endTime=System.currentTimeMillis();      Debug.message("link","LinkGraphicList: received " + graphics.size() + " graphics in "+ (float)(endTime - startTime) / 1000.0f + " seconds");      return header;    }    graphicType=link.dis.readByte();switch (graphicType) {case GRAPHICTYPE_LINE:      graphic=LinkLine.read(link.dis,propertiesBuffer);    break;case GRAPHICTYPE_POLY:  graphic=LinkPoly.read(link.dis,propertiesBuffer);break;case GRAPHICTYPE_RECTANGLE:graphic=LinkRectangle.read(link.dis,propertiesBuffer);break;case GRAPHICTYPE_POINT:graphic=LinkPoint.read(link.dis,propertiesBuffer);break;case GRAPHICTYPE_CIRCLE:graphic=LinkCircle.read(link.dis,propertiesBuffer);break;case GRAPHICTYPE_ELLIPSE:graphic=LinkEllipse.read(link.dis,propertiesBuffer);break;case GRAPHICTYPE_RASTER:graphic=LinkRaster.read(link.dis,propertiesBuffer);break;case GRAPHICTYPE_BITMAP:graphic=LinkBitmap.read(link.dis,propertiesBuffer);break;case GRAPHICTYPE_TEXT:graphic=LinkText.read(link.dis,propertiesBuffer);break;case GRAPHICTYPE_GRID:graphic=LinkGrid.read(link.dis,propertiesBuffer);break;default :throw new IOException("LinkGraphicList: received unknown graphic type.");}if (graphic != null) {if (graphic instanceof OMGrid) {((OMGrid)graphic).setGenerator(generator);}if (proj != null) {graphic.generate(proj);}graphics.add(graphic);}}}  }
class C{  public static float height(final CGRect aRect){  return aRect.size.height;}  }
class C{  public CDebugEventListPanel(final ITraceListProvider eventListManager){  super(new BorderLayout());  Preconditions.checkNotNull(eventListManager,"IE01369: Event list manager argument can't be null");  m_tracesTable=new CEventListTable(eventListManager);  m_tracesTable.getSelectionModel().addListSelectionListener(new InternalSelectionListener());  final JPanel rightPanel=new JPanel(new BorderLayout());  m_traceEventTable=new CEventTable(new CEventTableModel());  m_traceEventTable.getSelectionModel().addListSelectionListener(new InternalEventSelectionListener());  final CTablePanel<ITraceEvent> filteredPanel=new CTraceEventsPanel(m_traceEventTable);  m_eventValueTable=new CEventValueTable(m_eventModel);  m_eventValueTable.addMouseListener(new InternalMouseListener());  final JSplitPane splitPane1=new JSplitPane(JSplitPane.HORIZONTAL_SPLIT,true,filteredPanel,new JScrollPane(m_eventValueTable));  rightPanel.add(splitPane1,BorderLayout.CENTER);  splitPane1.setResizeWeight(0.5);  m_tracesPanel=new CTracesPanel(m_tracesTable);  final JSplitPane splitPane=new JSplitPane(JSplitPane.HORIZONTAL_SPLIT,true,m_tracesPanel,rightPanel);  add(splitPane,BorderLayout.CENTER);  splitPane.setResizeWeight(0.5);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private static Element loadDocument(URL location) throws WebAppConfigurationException {  try {    Document document=UtilXml.readXmlDocument(location,true);    Element rootElement=document.getDocumentElement();    if (Debug.verboseOn())     Debug.logVerbose("Loaded XML Config - " + location,module);    return rootElement;  } catch (  Exception e) {    Debug.logError(e,module);    throw new WebAppConfigurationException(e);  }}  }
class C{  public NotificationChain basicSetTypeRef(TypeRef newTypeRef,NotificationChain msgs){  TypeRef oldTypeRef=typeRef;  typeRef=newTypeRef;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.TYPE_REF_ANNOTATION_ARGUMENT__TYPE_REF,oldTypeRef,newTypeRef);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void registerTemplates(Model model){  for (  Resource resource : JenaUtil.getAllInstances(SPIN.Template.inModel(model))) {    if (resource.isURIResource()) {      Template template=resource.as(Template.class);      register(template);      ExtraPrefixes.add(template);    }  }}  }
class C{  public void addField(CtField f) throws CannotCompileException {  addField(f,(CtField.Initializer)null);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:01.332 -0500",hash_original_method="AB3FAB8AD474566DF13ED737E690D125",hash_generated_method="C9F93BAC225C470B9A43EA17AC68246C") public int start(int group) throws IllegalStateException {  ensureMatch();  return matchOffsets[group * 2];}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static void enableKeyboardFocusManagerLogging(){  enableFinest("java.awt.focus.KeyboardFocusManager");  enableFinest("java.awt.focus.DefaultKeyboardFocusManager");}  }
class C{  public boolean engineContainsAlias(String alias){  return entries.containsKey(alias.toLowerCase(Locale.ENGLISH));}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + String.valueOf(progress) + "%");  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public boolean isProtocolStatusDirty(org.apache.nutch.storage.ProtocolStatus value){  return isDirty(8);}  }
class C{  @Override public int hashCode(){  int result=23;  result=HashUtilities.hashCode(result,this.visible);  return result;}  }
class C{  public static void clear(long[] bits,int bitIndex){  bits[bitIndex >> ADDRESS_BITS_PER_UNIT]&=~(1L << (bitIndex & BIT_INDEX_MASK));}  }
class C{  public static void transform(InputStream srcStream,OutputStream destStream,InputStream stylesheetStream,String outputFormat) throws FOPException {  StreamSource src=new StreamSource(srcStream);  StreamSource stylesheet=stylesheetStream == null ? null : new StreamSource(stylesheetStream);  Fop fop=createFopInstance(destStream,outputFormat);  transform(src,stylesheet,fop);}  }
class C{  public boolean isSymbolic(){  return mode == Mode.symbolic;}  }
class C{  public static String generateArtificialIdentifier(){  return Integer.toHexString(Integer.MAX_VALUE + RANDOM.nextInt(Integer.MAX_VALUE) + 1);}  }
class C{  public static Character toCharacter(Object o) throws PageException {  if (o instanceof Character)   return (Character)o;  return new Character(toCharValue(o));}  }
class C{  public static void configureNumericFormattedTextField(@NotNull JFormattedTextField textField){  NumberFormat format=NumberFormat.getIntegerInstance();  format.setParseIntegerOnly(true);  format.setGroupingUsed(false);  NumberFormatter numberFormatter=new NumberFormatter(format);  numberFormatter.setMinimum(0);  textField.setFormatterFactory(new DefaultFormatterFactory(numberFormatter));  textField.setHorizontalAlignment(SwingConstants.TRAILING);  textField.setColumns(4);}  }
class C{  public void write(ByteAppendable os,char ch) throws IOException {  os.write(ch);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:13.436 -0500",hash_original_method="BC95F3A9D20B746C785DDB55CCD0B371",hash_generated_method="85C2B2ECFC4DCB63D3CA2AF4A0B3A150") public void writeUint16(long n){  check(2);  buffer[write_pos++]=(byte)((n & 0x00ff00) >> 8);  buffer[write_pos++]=(byte)(n & 0x00ff);}  }
class C{  public ECKey encrypt(KeyCrypter keyCrypter,KeyParameter aesKey) throws KeyCrypterException {  Preconditions.checkNotNull(keyCrypter);  final byte[] privKeyBytes=getPrivKeyBytes();  checkState(privKeyBytes != null,"Private key is not available");  EncryptedPrivateKey encryptedPrivateKey=keyCrypter.encrypt(privKeyBytes,aesKey);  ECKey result=new ECKey(encryptedPrivateKey,getPubKey(),keyCrypter);  result.setCreationTimeSeconds(creationTimeSeconds);  return result;}  }
class C{  @Nullable public static GridTcpRouter tcpRouter(UUID id){  return tcpRouters.get(id);}  }
class C{  public boolean isEvaluatable(){  if (expression != null) {    return expression.isEverything(ExpressionVisitor.EVALUATABLE_VISITOR);  }  if (expressionList != null) {    for (    Expression e : expressionList) {      if (!e.isEverything(ExpressionVisitor.EVALUATABLE_VISITOR)) {        return false;      }    }    return true;  }  return expressionQuery.isEverything(ExpressionVisitor.EVALUATABLE_VISITOR);}  }
class C{  void addEntry(int hash,K key,V value,int bucketIndex){  Entry<K,V> e=table[bucketIndex];  table[bucketIndex]=new Entry<K,V>(hash,key,value,e);  if (size++ >= threshold)   resize(2 * table.length);}  }
class C{  public byte[] fetchOctetString() throws BerException {  return fetchOctetString(OctetStringTag);}  }
class C{  public NotificationChain basicSetOwner(Composite newOwner,NotificationChain msgs){  msgs=eBasicSetContainer((InternalEObject)newOwner,DomPackage.SIMPLE_TYPE_REFERENCE__OWNER,msgs);  return msgs;}  }
class C{  public String findPlatform(){  return _platform;}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  String s1=m_arg0.execute(xctxt).str();  String s2=m_arg1.execute(xctxt).str();  if (s1.length() == 0 && s2.length() == 0)   return XBoolean.S_TRUE;  int index=s1.indexOf(s2);  return (index > -1) ? XBoolean.S_TRUE : XBoolean.S_FALSE;}  }
class C{  private void closeDialog(java.awt.event.WindowEvent evt){  doClose(RET_CANCEL);}  }
class C{  public static void closeApplication(Activity activity){  activity.finish();  killCurrentProcess();}  }
class C{  @Override public int portLocal(){  return _socket.portLocal();}  }
class C{  public Style(){  this(DEFAULT_FOREGROUND,DEFAULT_BACKGROUND);}  }
class C{  public GT_Recipe_Map(Collection<GT_Recipe> aRecipeList,String aUnlocalizedName,String aLocalName,String aNEIName,String aNEIGUIPath,int aUsualInputCount,int aUsualOutputCount,int aMinimalInputItems,int aMinimalInputFluids,int aAmperage,String aNEISpecialValuePre,int aNEISpecialValueMultiplier,String aNEISpecialValuePost,boolean aShowVoltageAmperageInNEI,boolean aNEIAllowed){  sMappings.add(this);  mNEIAllowed=aNEIAllowed;  mShowVoltageAmperageInNEI=aShowVoltageAmperageInNEI;  mRecipeList=aRecipeList;  mNEIName=aNEIName == null ? aUnlocalizedName : aNEIName;  mNEIGUIPath=aNEIGUIPath.endsWith(".png") ? aNEIGUIPath : aNEIGUIPath + ".png";  mNEISpecialValuePre=aNEISpecialValuePre;  mNEISpecialValueMultiplier=aNEISpecialValueMultiplier;  mNEISpecialValuePost=aNEISpecialValuePost;  mAmperage=aAmperage;  mUsualInputCount=aUsualInputCount;  mUsualOutputCount=aUsualOutputCount;  mMinimalInputItems=aMinimalInputItems;  mMinimalInputFluids=aMinimalInputFluids;  GregTech_API.sFluidMappings.add(mRecipeFluidMap);  GregTech_API.sItemStackMappings.add(mRecipeItemMap);  GT_LanguageManager.addStringLocalization(mUnlocalizedName=aUnlocalizedName,aLocalName);}  }
class C{  @Override public void vetoableChange(PropertyChangeEvent e) throws PropertyVetoException {  if (!"Key".equals(e.getPropertyName())) {    return;  }  Series s=(Series)e.getSource();  if (getSeriesIndex(s.getKey()) == -1) {    throw new IllegalStateException("Receiving events from a series " + "that does not belong to this collection.");  }  Comparable key=(Comparable)e.getNewValue();  if (getSeriesIndex(key) >= 0) {    throw new PropertyVetoException("Duplicate key2",e);  }}  }
class C{  public final void pushNamespaceContextNull(){  m_prefixResolvers.push(null);}  }
class C{  public static Bitmap createLauncherIcon(Context context,Bitmap icon,String url,int rValue,int gValue,int bValue){  Bitmap bitmap=null;  ActivityManager am=(ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);  final int iconSize=am.getLauncherLargeIconSize();  final int iconDensity=am.getLauncherLargeIconDensity();  try {    bitmap=Bitmap.createBitmap(iconSize,iconSize,Bitmap.Config.ARGB_8888);    Canvas canvas=new Canvas(bitmap);    if (icon == null) {      icon=getBitmapFromResourceId(context,R.drawable.globe_favicon,iconDensity);      rValue=gValue=bValue=DEFAULT_RGB_VALUE;    }    final int smallestSide=iconSize;    if (icon.getWidth() >= smallestSide / 2 && icon.getHeight() >= smallestSide / 2) {      drawTouchIconToCanvas(context,icon,canvas);    } else {      drawWidgetBackgroundToCanvas(context,canvas,iconDensity,url,Color.rgb(rValue,gValue,bValue));    }    canvas.setBitmap(null);  } catch (  OutOfMemoryError e) {    Log.w(TAG,"OutOfMemoryError while trying to draw bitmap on canvas.");  }  return bitmap;}  }
class C{  public static void shuffle(List<?> list){  shuffle(list,new Random());}  }
class C{  public void update(byte buffer){  if (skip)   return;  for (int i=0; i < digests.size(); i++) {    digests.get(i).update(buffer);  }}  }
class C{  public void testFindMatches(MatchResultSink sink,MatchOptions options) throws MalformedPatternException, UnsupportedPatternException {  super.testFindMatches(sink,options);}  }
class C{  public boolean isInHeadersTransition(){  return mHeadersTransition != null;}  }
class C{  static void adjustEntitiesWithOffsets(List<? extends FormattedUrlEntity> entities,List<Integer> indices){  if (entities == null || indices == null)   return;  for (  FormattedUrlEntity entity : entities) {    final int start=entity.start;    int offset=0;    for (    Integer index : indices) {      if (index - offset <= start) {        offset+=1;      } else {        break;      }    }    entity.start=entity.start + offset;    entity.end=entity.end + offset;  }}  }
class C{  public void selectAndForward(Operation op,SelectAndForwardRequest body){  selectAndForward(body,op,this.cachedGroupState);}  }
class C{  public boolean hasStars(){  return hasExtension(Stars.class);}  }
class C{  public static int calcDistance(Word[] wordsA,Word[] wordsB){  final int lenA=wordsA.length + 1;  final int lenB=wordsB.length + 1;  assert lenA <= MAX_NUM_WORDS + 1;  assert lenB <= MAX_NUM_WORDS + 1;  if (Math.abs(lenA - lenB) > threshold) {    return threshold + 1;  }  initMatrix();  if (!calcScoreMat(lenA,lenB,wordsA,wordsB)) {    return threshold + 1;  }  return algMat[lenA - 1][lenB - 1];}  }
class C{  public UserGuideMenuItems(InformationDelegator in_informationDelegator){  setInformationDelegator(in_informationDelegator);}  }
class C{  public static char[] encode(byte[] in,int iLen){  int oDataLen=(iLen * 4 + 2) / 3;  int oLen=((iLen + 2) / 3) * 4;  char[] out=new char[oLen];  int ip=0;  int op=0;  while (ip < iLen) {    int i0=in[ip++] & 0xff;    int i1=ip < iLen ? in[ip++] & 0xff : 0;    int i2=ip < iLen ? in[ip++] & 0xff : 0;    int o0=i0 >>> 2;    int o1=((i0 & 3) << 4) | (i1 >>> 4);    int o2=((i1 & 0xf) << 2) | (i2 >>> 6);    int o3=i2 & 0x3F;    out[op++]=map1[o0];    out[op++]=map1[o1];    out[op]=op < oDataLen ? map1[o2] : '=';    op++;    out[op]=op < oDataLen ? map1[o3] : '=';    op++;  }  return out;}  }
class C{  public void mergeLeft(final Expression prec,final boolean mergeNormalized){  original=prec.getOriginal() + ' ' + original;  if (mergeNormalized) {    normalized=prec.getNormalized() + ' ' + normalized;  }  mergeType(prec.getType());  setAmount(mergeAmount(prec.amount,amount));}  }
class C{  AnnotationDefinitionBuilder argsOptional(){  this.argsOptional=true;  return this;}  }
class C{  public boolean canBePushed(){  return true;}  }
class C{  public BitVector(BitVector s){  bits=new int[s.bits.length];  this.nbits=s.nbits;  System.arraycopy(s.bits,0,this.bits,0,s.bits.length);}  }
class C{  GridJavadocToken(GridJavadocTokenType type,String val){  assert type != null;  assert val != null;  this.type=type;  this.val=val;}  }
class C{  public FileFormat(String name,Collection<String> mimeTypes,Charset charset,Collection<String> fileExtensions){  assert name != null : "name must not be null";  assert mimeTypes != null : "mimeTypes must not be null";  assert !mimeTypes.isEmpty() : "mimeTypes must not be empty";  assert fileExtensions != null : "fileExtensions must not be null";  this.name=name;  this.mimeTypes.addAll(mimeTypes);  this.charset=charset;  this.fileExtensions.addAll(fileExtensions);}  }
class C{  public void removeChangeListener(ChangeListener l){  changeSupport.removeChangeListener(l);}  }
class C{  public LineUnavailableException(){  super();}  }
class C{  public static void registerAspect(IAspectType aspect,AspectTier tier,AspectGroup type,float baseAmount){  registerAspect(aspect,tier.id,type.id,baseAmount);}  }
class C{  public ColumnDataTypeChange(Table table,Column column,int newTypeCode){  super(table);  _column=column;  _newTypeCode=newTypeCode;}  }
class C{  public XBoolean(Boolean b){  super();  m_val=b.booleanValue();  setObject(b);}  }
class C{  public int compareTo(SourceCallChainInfo other){  return method.getSignature().compareTo(other.method.getSignature());}  }
class C{  @SuppressWarnings("unchecked") public static int binarySearch(Object[] array,Object object){  return binarySearch(array,0,array.length,object);}  }
class C{  protected void bodyClosed(){  if (DEBUG) {    System.err.println("In bodyClosed " + unpoppedElements);  }  for (  Element unpopped : unpoppedElements) {    if ("body".equals(unpopped.getTagName()) && HTML_NAMESPACE.equals(unpopped.getNamespaceURI())) {      elementPopped(HTML_NAMESPACE,"body",unpopped);      return;    }  }}  }
class C{  public void unblock(InetAddress address){  if (address == null) {    throw new IllegalArgumentException("Adress to unblock can not be null");  }  unblock(new Subnet(address,32));}  }
class C{  public Object eval(Reader reader,ScriptEngine engine,ScriptContext context) throws ScriptException {  return engine.eval(reader,context);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  double slope;  double z, z2;  int i, c;  double numInNeighbours;  boolean flag=false;  boolean logTransform=false;  String outputType=null;  double flowDir;  try {    if (args.length <= 0) {      showFeedback("Plugin parameters have not been set.");      return;    }    inputHeader=args[0];    outputHeader=args[1];    outputType=args[2].toLowerCase();    logTransform=Boolean.parseBoolean(args[3]);    if ((inputHeader == null) || (outputHeader == null)) {      showFeedback("One or more of the input parameters have not been set properly.");      return;    }    pointer=new WhiteboxRaster(inputHeader,"r");    int rows=pointer.getNumberRows();    int cols=pointer.getNumberColumns();    noData=pointer.getNoDataValue();    gridRes=pointer.getCellSizeX();    output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,1);    output.setPreferredPalette("blueyellow.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    output.setZUnits("dimensionless");    tmpGrid=new WhiteboxRaster(outputHeader.replace(".dep","_temp.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    tmpGrid.isTemporaryFile=true;    int loopNum=1;    updateProgress("Loop " + loopNum + ":",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        flowDir=pointer.getValue(row,col);        if (flowDir != noData) {          i=0;          for (c=0; c < 8; c++) {            x=col + dX[c];            y=row + dY[c];            flowDir=pointer.getValue(y,x);            if (flowDir >= 0 && flowDir <= 360) {              if (c != 3) {                if (flowDir > startFD[c] && flowDir < endFD[c]) {                  i++;                }              } else {                if (flowDir > startFD[c] || flowDir < endFD[c]) {                  i++;                }              }            }          }          tmpGrid.setValue(row,col,i);        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop " + loopNum + ":",(int)progress);    }    boolean somethingDone;    do {      loopNum++;      updateProgress("Loop " + loopNum + ":",0);      somethingDone=false;      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          if (tmpGrid.getValue(row,col) == 0) {            currentDepth=0;            somethingDone=true;            DinfAccum(row,col);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress("Loop " + loopNum + ":",(int)progress);      }    } while (somethingDone);    loopNum++;    updateProgress("Loop " + loopNum + ":",0);    if (outputType.equals("specific catchment area (sca)")) {      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          z=pointer.getValue(row,col);          if (z != noData) {            output.setValue(row,col,output.getValue(row,col) * gridRes);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress("Loop " + loopNum + ":",(int)progress);      }    } else     if (outputType.equals("total catchment area")) {      double gridCellArea=gridRes * gridRes;      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          z=output.getValue(row,col);          if (z != noData) {            output.setValue(row,col,output.getValue(row,col) * gridCellArea);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress("Loop " + loopNum + ":",(int)progress);      }    }    if (logTransform) {      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          z=output.getValue(row,col);          if (z != noData) {            output.setValue(row,col,Math.log(output.getValue(row,col)));          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress("Loop " + loopNum + ":",(int)progress);      }    } else {      output.setNonlinearity(0.2);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pointer.close();    tmpGrid.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static NumericEntityEscaper above(final int codepoint){  return outsideOf(0,codepoint);}  }
class C{  public int numOfEntries(){  return ByteArray.readU16bit(info,0);}  }
class C{  public FullPrunedBlockChain(NetworkParameters params,List<BlockChainListener> listeners,FullPrunedBlockStore blockStore) throws BlockStoreException {  super(params,listeners,blockStore);  this.blockStore=blockStore;  this.chainHead=blockStore.getVerifiedChainHead();}  }
class C{  public void packageClosing(PackageEvent evt){  try {    ResultsFrame frame=ResultsFrame.getInstance(evt.getPackage().getProject(),false);    if (frame != null)     frame.setVisible(false);  } catch (  ProjectNotOpenException e) {    Log.recordBug(e);  }}  }
class C{  public <T>T waitForState(String uri,Class<T> type,Predicate<T> predicate) throws Throwable {  return ServiceHostUtils.waitForServiceState(type,uri,predicate,this,this.waitIterationSleep,this.waitIterationCount,null);}  }
class C{  public boolean equalsIgnoringMetaData(ShardRouting other){  if (primary != other.primary) {    return false;  }  if (shardId != other.shardId) {    return false;  }  if (currentNodeId != null ? !currentNodeId.equals(other.currentNodeId) : other.currentNodeId != null) {    return false;  }  if (index != null ? !index.equals(other.index) : other.index != null) {    return false;  }  if (relocatingNodeId != null ? !relocatingNodeId.equals(other.relocatingNodeId) : other.relocatingNodeId != null) {    return false;  }  if (allocationId != null ? !allocationId.equals(other.allocationId) : other.allocationId != null) {    return false;  }  if (state != other.state) {    return false;  }  if (restoreSource != null ? !restoreSource.equals(other.restoreSource) : other.restoreSource != null) {    return false;  }  return true;}  }
class C{  private static int indexOf(int fromIndex,CharSequence csq){  if (csq == null)   return 0;  int length=csq.length();  int j=fromIndex;  int i=(j < length) ? Character.toUpperCase(csq.charAt(j++)) : 0;  i<<=16;  i|=(j < length) ? Character.toUpperCase(csq.charAt(j++)) : 0;  return i;}  }
class C{  public void appendToQuery(String buffer){  if (this.queryAsBytes == null)   query=query + buffer; else {    String charset=getCharset();    byte[] appendBuffer;    if (charset == null)     appendBuffer=buffer.getBytes(); else {      try {        appendBuffer=buffer.getBytes(charset);      } catch (      UnsupportedEncodingException e) {        appendBuffer=buffer.getBytes();      }    }    byte[] buf=new byte[queryAsBytes.length + appendBuffer.length];    System.arraycopy(queryAsBytes,0,buf,0,queryAsBytes.length);    System.arraycopy(appendBuffer,0,buf,queryAsBytes.length,appendBuffer.length);    queryAsBytes=buf;    queryAsBytesTranslated=null;  }}  }
class C{  public static RoundingParams fromCornersRadius(float radius){  return (new RoundingParams()).setCornersRadius(radius);}  }
class C{  public long optLong(int index,long defaultValue){  try {    return getLong(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  protected void writeCall(String methodName,Object[] args) throws Exception {  huc=u.openConnection();  huc.setDoOutput(true);  huc.setDoInput(true);  huc.setUseCaches(false);  huc.setRequestProperty("Content-Type","binary/message-pack");  huc.setReadTimeout(0);  OutputStream os=huc.getOutputStream();  LinkedList temp=new LinkedList();  temp.add(methodName);  for (  Object o : args)   temp.add(o);  packer.write(os,temp);  os.close();}  }
class C{  @Override public void onDirectorySelectionChanged(String selectedChild,int queryTypeId){}  }
class C{  public static String[] indexable(int wordlen,int levels,byte[] bSAX){  String[] strings=new String[levels];  for (int i=1; i <= levels; i++) {    int nbits=wordlen * i;    int len=nbits / 8 + (0 == nbits % 8 ? 0 : 1);    if (0 != nbits % 8) {      byte tmp=bSAX[len - 1];      bSAX[len - 1]=(byte)(bSAX[len - 1] & (byte)((0xff ^ ((1 << (8 - (nbits % 8)) - 1)))));      strings[i - 1]=new String(OrderPreservingBase64.encode(bSAX,0,len),Charsets.US_ASCII);      bSAX[len - 1]=tmp;    } else {      strings[i - 1]=new String(OrderPreservingBase64.encode(bSAX,0,len),Charsets.US_ASCII);    }  }  return strings;}  }
class C{  private void writeObject(final ObjectOutputStream out) throws IOException {  out.defaultWriteObject();  doWriteObject(out);}  }
class C{  public CDebuggerContainerNodeMenuBuilder(final JTree projectTree,final IDatabase database){  super(projectTree);  m_database=database;}  }
class C{  public SerializerReadClass(Class clazz){  m_clazz=clazz;}  }
class C{  private static ReilInstruction createTrinaryInstruction(final String opcode,final IAddress offset,final OperandSize firstSize,final String firstValue,final OperandSize secondSize,final String secondValue,final OperandSize thirdSize,final String thirdValue){  final ReilOperand firstOperand=createOperand(firstSize,firstValue);  final ReilOperand secondOperand=createOperand(secondSize,secondValue);  final ReilOperand thirdOperand=createOperand(thirdSize,thirdValue);  checkTrinaryOperandSizeTypes(firstSize,secondSize,thirdSize);  return new ReilInstruction(offset,opcode,firstOperand,secondOperand,thirdOperand);}  }
class C{  public String xmlToCsv(UpdateInventoryInput input){  return input.getSupplierId() + "," + input.getPartId()+ ","+ input.getName()+ ","+ input.getAmount();}  }
class C{  public static long parseDateAsEpoch(String dateStr){  try {    return DateUtils.parseDate(dateStr).getTime();  } catch (  DateParseException e) {    return 0;  }}  }
class C{  public static <T>LazyPQueueX<T> fromStreamS(Stream<T> stream){  return new LazyPQueueX<T>(Flux.from(ReactiveSeq.fromStream(stream)));}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public static PrivateIonTextAppender forAppendable(Appendable out){  PrivateFastAppendable fast=new AppendableFastAppendable(out);  boolean escapeNonAscii=false;  return new PrivateIonTextAppender(fast,escapeNonAscii);}  }
class C{  public boolean equals(final long fileTime,final long entryTime){  final long fileTimeSeconds=fileTime / 1000;  final long entryTimeSeconds=entryTime / 1000;  final long difference=Math.abs(fileTimeSeconds - entryTimeSeconds);  if (difference < 3) {    return true;  }  if (difference >= SECONDS_PER_HOUR - 3 && difference <= SECONDS_PER_HOUR + 3) {    return true;  }  return false;}  }
class C{  protected void encodeBufferPrefix(OutputStream aStream) throws IOException {  offset=0;  pStream=new PrintStream(aStream);}  }
class C{  public String callString(String key){  return (String)call(key);}  }
class C{  @Override public NotificationChain eInverseAdd(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case SexecPackage.CHECK_REF__CHECK:    if (check != null)     msgs=((InternalEObject)check).eInverseRemove(this,SexecPackage.CHECK__REFS,Check.class,msgs);  return basicSetCheck((Check)otherEnd,msgs);}return super.eInverseAdd(otherEnd,featureID,msgs);}  }
class C{  public boolean ackSeen(){  return this.isAckSeen;}  }
class C{  public void testRandomStrings() throws Exception {  checkRandomData(random(),analyzer,1000 * RANDOM_MULTIPLIER);}  }
class C{  public CallableStatement(MySQLConnection conn,CallableStatementParamInfo paramInfo) throws SQLException {  super(conn,paramInfo.nativeSql,paramInfo.catalogInUse);  this.paramInfo=paramInfo;  this.callingStoredFunction=this.paramInfo.isFunctionCall;  if (this.callingStoredFunction) {    this.parameterCount+=1;  }  this.retrieveGeneratedKeys=true;}  }
class C{  public static void unsignedSat(final long offset,final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions,final String firstOperand,final String secondOperand,final String resultOperand,final String operation,final String tmpResultVar,final long size,final String signedDoesSat){  final OperandSize bt=OperandSize.BYTE;  final OperandSize dw=OperandSize.DWORD;  final String lowSatResult=String.valueOf(0);  final String highSatResult=String.valueOf((long)Math.pow(2,size) - 1);  final String inRange=environment.getNextVariableString();  final String inRangeMask=environment.getNextVariableString();  final String isGreaterCondition=environment.getNextVariableString();  final String isGreaterMask=environment.getNextVariableString();  final String isLessCondition=environment.getNextVariableString();  final String isLessMask=environment.getNextVariableString();  final String tmpLowResult1=environment.getNextVariableString();  final String tmpLowResult2=environment.getNextVariableString();  final String tmpLowResult3=environment.getNextVariableString();  final String tmpLowResult4=environment.getNextVariableString();  final String overflow=environment.getNextVariableString();  final String isNegative=environment.getNextVariableString();  final String isPositive=environment.getNextVariableString();  long baseOffset=offset;  final String addOperation="ADD";  if ((operation.equalsIgnoreCase(addOperation)) || (operation.equalsIgnoreCase("SUB"))) {    instructions.add(ReilHelpers.createBsh(baseOffset++,dw,resultOperand,dw,"-" + String.valueOf(size),bt,overflow));    if (operation.equalsIgnoreCase(addOperation)) {      instructions.add(ReilHelpers.createStr(baseOffset++,bt,String.valueOf(1L),bt,isPositive));      instructions.add(ReilHelpers.createStr(baseOffset++,bt,String.valueOf(0L),bt,isNegative));    } else {      instructions.add(ReilHelpers.createStr(baseOffset++,bt,String.valueOf(0L),bt,isPositive));      instructions.add(ReilHelpers.createStr(baseOffset++,bt,String.valueOf(1L),bt,isNegative));    }    instructions.add(ReilHelpers.createAnd(baseOffset++,bt,isNegative,bt,overflow,bt,isLessCondition));    instructions.add(ReilHelpers.createAnd(baseOffset++,bt,isPositive,bt,overflow,bt,isGreaterCondition));    instructions.add(ReilHelpers.createBisz(baseOffset++,bt,overflow,bt,inRange));    instructions.add(ReilHelpers.createSub(baseOffset++,dw,String.valueOf(0),bt,isLessCondition,dw,isLessMask));    instructions.add(ReilHelpers.createSub(baseOffset++,dw,String.valueOf(0),bt,isGreaterCondition,dw,isGreaterMask));    instructions.add(ReilHelpers.createSub(baseOffset++,dw,String.valueOf(0),bt,inRange,dw,inRangeMask));    instructions.add(ReilHelpers.createAnd(baseOffset++,dw,resultOperand,dw,inRangeMask,dw,tmpLowResult1));    instructions.add(ReilHelpers.createAnd(baseOffset++,dw,lowSatResult,dw,isLessMask,dw,tmpLowResult2));    instructions.add(ReilHelpers.createAnd(baseOffset++,dw,highSatResult,dw,isGreaterMask,dw,tmpLowResult3));    instructions.add(ReilHelpers.createOr(baseOffset++,dw,tmpLowResult1,dw,tmpLowResult2,dw,tmpLowResult4));    instructions.add(ReilHelpers.createOr(baseOffset++,dw,tmpLowResult4,dw,tmpLowResult3,dw,tmpResultVar));  } else {    final String needsShiftCompare=environment.getNextVariableString();    final String xMinusy=environment.getNextVariableString();    final String xMinusyXorx=environment.getNextVariableString();    final String xXory=environment.getNextVariableString();    final String xXoryAndxMinusXorx=environment.getNextVariableString();    final String lowOverflow=environment.getNextVariableString();    final String highOverflow=environment.getNextVariableString();    instructions.add(ReilHelpers.createSub(baseOffset++,dw,firstOperand,dw,lowSatResult,dw,xMinusy));    instructions.add(ReilHelpers.createXor(baseOffset++,dw,firstOperand,dw,lowSatResult,dw,xXory));    instructions.add(ReilHelpers.createXor(baseOffset++,dw,xMinusy,dw,firstOperand,dw,xMinusyXorx));    instructions.add(ReilHelpers.createAnd(baseOffset++,dw,xXory,dw,xMinusyXorx,dw,xXoryAndxMinusXorx));    instructions.add(ReilHelpers.createXor(baseOffset++,dw,xMinusy,dw,xXoryAndxMinusXorx,dw,needsShiftCompare));    instructions.add(ReilHelpers.createBsh(baseOffset++,dw,needsShiftCompare,dw,String.valueOf(-31L),bt,lowOverflow));    instructions.add(ReilHelpers.createSub(baseOffset++,dw,highSatResult,dw,firstOperand,dw,xMinusy));    instructions.add(ReilHelpers.createXor(baseOffset++,dw,highSatResult,dw,firstOperand,dw,xXory));    instructions.add(ReilHelpers.createXor(baseOffset++,dw,xMinusy,dw,highSatResult,dw,xMinusyXorx));    instructions.add(ReilHelpers.createAnd(baseOffset++,dw,xXory,dw,xMinusyXorx,dw,xXoryAndxMinusXorx));    instructions.add(ReilHelpers.createXor(baseOffset++,dw,xMinusy,dw,xXoryAndxMinusXorx,dw,needsShiftCompare));    instructions.add(ReilHelpers.createBsh(baseOffset++,dw,needsShiftCompare,dw,String.valueOf(-31L),bt,highOverflow));    instructions.add(ReilHelpers.createOr(baseOffset++,bt,lowOverflow,bt,highOverflow,bt,overflow));    instructions.add(ReilHelpers.createBisz(baseOffset++,bt,overflow,bt,inRange));    if (operation.equalsIgnoreCase("USAT")) {      instructions.add(ReilHelpers.createSub(baseOffset++,dw,String.valueOf(0),bt,lowOverflow,dw,isLessMask));      instructions.add(ReilHelpers.createSub(baseOffset++,dw,String.valueOf(0),bt,highOverflow,dw,isGreaterMask));      instructions.add(ReilHelpers.createSub(baseOffset++,dw,String.valueOf(0),bt,inRange,dw,inRangeMask));    } else {      instructions.add(ReilHelpers.createSub(baseOffset++,dw,String.valueOf(0),bt,highOverflow,dw,isLessMask));      instructions.add(ReilHelpers.createSub(baseOffset++,dw,String.valueOf(0),bt,lowOverflow,dw,isGreaterMask));      instructions.add(ReilHelpers.createSub(baseOffset++,dw,String.valueOf(0),bt,inRange,dw,inRangeMask));    }    instructions.add(ReilHelpers.createAnd(baseOffset++,dw,resultOperand,dw,inRangeMask,dw,tmpLowResult1));    instructions.add(ReilHelpers.createAnd(baseOffset++,dw,lowSatResult,dw,isLessMask,dw,tmpLowResult2));    instructions.add(ReilHelpers.createAnd(baseOffset++,dw,highSatResult,dw,isGreaterMask,dw,tmpLowResult3));    instructions.add(ReilHelpers.createOr(baseOffset++,dw,tmpLowResult1,dw,tmpLowResult2,dw,tmpLowResult4));    instructions.add(ReilHelpers.createOr(baseOffset++,dw,tmpLowResult4,dw,tmpLowResult3,dw,tmpResultVar));  }}  }
class C{  @Nullable public URL findResourceURL(String resourcePath){  ExternalResourceDescriptor descriptor=resourceContributions.get(resourcePath);  return descriptor == null ? null : descriptor.getURL();}  }
class C{  public static void writeUuid(ByteBuf buf,UUID uuid){  buf.writeLong(uuid.getMostSignificantBits());  buf.writeLong(uuid.getLeastSignificantBits());}  }
class C{  public boolean isCalculated(){  Object oo=get_Value(COLUMNNAME_IsCalculated);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public AtomicLongArray(int length){  array=new long[length];}  }
class C{  @RequestMapping(value="/businessObjectData/availability",method=RequestMethod.POST,consumes={"application/xml","application/json"}) @Secured(SecurityFunctions.FN_BUSINESS_OBJECT_DATA_AVAILABILITY_POST) public BusinessObjectDataAvailability checkBusinessObjectDataAvailability(@RequestBody BusinessObjectDataAvailabilityRequest businessObjectDataAvailabilityRequest){  return businessObjectDataService.checkBusinessObjectDataAvailability(businessObjectDataAvailabilityRequest);}  }
class C{  private void checkInvalidCharForUserData(String data,final char[] invalidChars) throws InvalidArgumentException {  if (null == data)   return;  for (  char invalidChar : invalidChars) {    if (-1 != data.indexOf(invalidChar)) {      throw new InvalidArgumentException(String.format("Invalid character [%c] detected! please check PrincipalManagement service API",invalidChar));    }  }}  }
class C{  public static void fill(short[] array,short value){  for (int i=0; i < array.length; i++) {    array[i]=value;  }}  }
class C{  @Override public void onActivityResult(int requestCode,int resultCode,Intent data){  if (resultCode == Activity.RESULT_OK && requestCode == REQUEST_GET_VIDEO) {    Utils.showToast(this,"Uploading video");    getOps().uploadVideo(data.getData());  } else   Utils.showToast(this,"Could not get video to upload");}  }
class C{  boolean hasNext(){  return nextNodes.size() > 0;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case EipPackage.SPLITTER__NAME:    return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);case EipPackage.SPLITTER__TO_CHANNELS:  return toChannels != null && !toChannels.isEmpty();case EipPackage.SPLITTER__FROM_CHANNELS:return fromChannels != null && !fromChannels.isEmpty();}return super.eIsSet(featureID);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean clearSlots(@Nonnull IInventory inv){  boolean clearedAnything=false;  for (int i=0; i < inv.getSizeInventory(); ++i) {    clearedAnything|=inv.getStackInSlotOnClosing(i) != null;  }  return clearedAnything;}  }
class C{  public String toString(){  if (m_Classifiers == null) {    return "RandomCommittee: No model built yet.";  }  StringBuffer text=new StringBuffer();  text.append("All the base classifiers: \n\n");  for (int i=0; i < m_Classifiers.length; i++)   text.append(m_Classifiers[i].toString() + "\n\n");  return text.toString();}  }
class C{  public static Remote register(ActivationDesc desc) throws UnknownGroupException, ActivationException, RemoteException {  ActivationID id=ActivationGroup.getSystem().registerObject(desc);  return sun.rmi.server.ActivatableRef.getStub(desc,id);}  }
class C{  public LensHandle(Lens<TInventory,TStack> lens,Collection<InventoryProperty<?,?>> properties){  this.lens=lens;  if (properties != null && properties.size() > 0) {    this.properties=new ArrayList<InventoryProperty<?,?>>(properties);  }}  }
class C{  @UiHandler("okButton") public void handleOkClick(final ClickEvent event){  this.actionDelegate.accepted();}  }
class C{  public static synchronized void debug(String message){  LogFactory.getLog(ToolBox.getCaller()).debug(message);}  }
class C{  private void displayConnectionError(){  Resources resources=getContext().getResources();  CommonDialogUtils.getAlertDialogWithOneButtonAndTitle(getContext(),resources.getString(R.string.title_head_connection_error),resources.getString(R.string.error_internal_server),resources.getString(R.string.button_ok),registrationFailedClickListener).show();}  }
class C{  private DCCppMessage loadChars() throws java.io.IOException {  String s="";  byte char1;  boolean found_start=false;  while (!found_start) {    char1=readByteProtected(inpipe);    if ((char1 & 0xFF) == '<') {      found_start=true;      log.debug("Found starting < ");      break;    } else {      char1=readByteProtected(inpipe);    }  }  for (int i=0; i < DCCppConstants.MAX_MESSAGE_SIZE; i++) {    char1=readByteProtected(inpipe);    if (char1 == '>') {      log.debug("msg found > ");      break;    } else {      log.debug("msg read byte {}",char1);      char c=(char)(char1 & 0x00FF);      s+=Character.toString(c);    }  }  log.debug("Complete message = {}",s);  return (DCCppMessage.parseDCCppMessage(s));}  }
class C{  public static boolean hasNecronomicon(EntityPlayer player){  return player.inventory.hasItemStack(new ItemStack(ACItems.necronomicon)) || player.inventory.hasItemStack(new ItemStack(ACItems.abyssal_wasteland_necronomicon)) || player.inventory.hasItemStack(new ItemStack(ACItems.dreadlands_necronomicon))|| player.inventory.hasItemStack(new ItemStack(ACItems.omothol_necronomicon))|| player.inventory.hasItemStack(new ItemStack(ACItems.abyssalnomicon));}  }
class C{  @Override public Object readObject(int index) throws IOException {  openElement(index);  Object o;  String ref=getAttribute("ref",null);  String id=getAttribute("id",null);  if (ref != null && id != null) {    throw new IOException("Element has both an id and a ref attribute: <" + getTagName() + " id=\""+ id+ "\" ref=\""+ ref+ "\"> in line number "+ current.getLineNr());  }  if (id != null && idobjects.containsKey(id)) {    throw new IOException("Duplicate id attribute: <" + getTagName() + " id=\""+ id+ "\"> in line number "+ current.getLineNr());  }  if (ref != null && !idobjects.containsKey(ref)) {    throw new IOException("Referenced element not found: <" + getTagName() + " ref=\""+ ref+ "\"> in line number "+ current.getLineNr());  }  if (ref != null) {    o=idobjects.get(ref);  } else {    o=factory.read(this);    if (id != null) {      idobjects.put(id,o);    }    if (o instanceof DOMStorable) {      ((DOMStorable)o).read(this);    }  }  closeElement();  return o;}  }
class C{  public static Word[] prepareString(String str){  if (str == null) {    return new Word[0];  }  final StringTokenizer tokenizer=new StringTokenizer(str,sentenceSplitString);  return splitWordByDelimiters(tokenizer);}  }
class C{  public float round(float d,int decimalPlace){  BigDecimal bd=new BigDecimal(Float.toString(d));  bd=bd.setScale(decimalPlace,BigDecimal.ROUND_HALF_UP);  return bd.floatValue();}  }
class C{  public Character read(String value) throws Exception {  if (value.length() != 1) {    throw new InvalidFormatException("Cannot convert '%s' to a character",value);  }  return value.charAt(0);}  }
class C{  public Element first(){  if (root == null) {    return null;  }  elementStack=new Stack<StackItem>();  if (root.getElementCount() != 0) {    elementStack.push(new StackItem(root));  }  return root;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-18 21:46:49.270 -0400",hash_original_method="38BEBCC73AF98F5C4AF8ECDEA5782184",hash_generated_method="BEBE03EEC78D240CBF2536E36E4AFA69") private Drawable tileify(Drawable drawable,boolean clip){  if (drawable instanceof LayerDrawable) {    LayerDrawable background=(LayerDrawable)drawable;    final int N=background.getNumberOfLayers();    Drawable[] outDrawables=new Drawable[N];    for (int i=0; i < N; i++) {      int id=background.getId(i);      outDrawables[i]=tileify(background.getDrawable(i),(id == android.R.id.progress || id == android.R.id.secondaryProgress));    }    LayerDrawable newBg=new LayerDrawable(outDrawables);    for (int i=0; i < N; i++) {      newBg.setId(i,background.getId(i));    }    return newBg;  } else   if (drawable instanceof BitmapDrawable) {    final Bitmap tileBitmap=((BitmapDrawable)drawable).getBitmap();    if (mSampleTile == null) {      mSampleTile=tileBitmap;    }    final ShapeDrawable shapeDrawable=new ShapeDrawable(getDrawableShape());    final BitmapShader bitmapShader=new BitmapShader(tileBitmap,Shader.TileMode.REPEAT,Shader.TileMode.CLAMP);    shapeDrawable.getPaint().setShader(bitmapShader);    return (clip) ? new ClipDrawable(shapeDrawable,Gravity.LEFT,ClipDrawable.HORIZONTAL) : shapeDrawable;  }  return drawable;}  }
class C{  @Override public Cursor queryCharacters(Uri uri,String[] projection,String selection,String[] selectionArgs,String sortOrder){  selection=addSelectionArgs(selection,selectionArgs,"OR");  return mOpenHelper.getReadableDatabase().query(CharacterContract.CharacterEntry.TABLE_NAME,projection,selection,selectionArgs,null,null,sortOrder);}  }
class C{  public void buildRule(Instances train,Instances test) throws Exception {  buildDecList(train,test,false);  cleanup(new Instances(train,0));}  }
class C{  public boolean isEmpty(){  return !(this.minLatitude < this.maxLatitude && this.minLongitude < this.maxLongitude);}  }
class C{  @PostConstruct public void postConstruct() throws Exception {  status=ServerStatus.SERVER_ONLINE;  status.setRegistrationIdsValidationKey(UUID.randomUUID().toString());  if (log.isInfoEnabled()) {    log.info("|-Server Status Service active...");  }}  }
class C{  public SVGOMViewElement(String prefix,AbstractDocument owner){  super(prefix,owner);  initializeLiveAttributes();}  }
class C{  protected void notifySearchListeners(SearchEvent e){  Iterator<SearchListener> iter;  iter=m_SearchListeners.iterator();  while (iter.hasNext())   iter.next().searchInitiated(e);}  }
class C{  public static boolean isPackageProtectionEnabled(){  if (packageDefinitionEnabled && Constants.IS_SECURITY_ENABLED) {    return true;  }  return false;}  }
class C{  public void addPropertyChangeListener(PropertyChangeListener listener){  props.addListener(listener);}  }
class C{  public ApiConfig(String apiKey,String accessToken,String referrer){  this(apiKey,accessToken);  mReferrer=referrer;}  }
class C{  @Nullable public <K>GridCloseableIterator<K> keysIterator(@Nullable String spaceName,@Nullable ClassLoader ldr) throws IgniteCheckedException {  try {    IgniteSpiCloseableIterator<K> it=getSpi().keyIterator(spaceName,context(ldr));    return it == null ? null : new GridSpiCloseableIteratorWrapper<>(it);  } catch (  IgniteSpiException e) {    throw new IgniteCheckedException("Failed to get iterator over swap space [space=" + spaceName + ']',e);  }}  }
class C{  protected boolean isFetching(){  return fieldFetching;}  }
class C{  private static int checkFormalTypeParameters(final String signature,int pos){  pos=checkChar('<',signature,pos);  pos=checkFormalTypeParameter(signature,pos);  while (getChar(signature,pos) != '>') {    pos=checkFormalTypeParameter(signature,pos);  }  return pos + 1;}  }
class C{  public static byte[] toByteArray(InputStream input) throws IOException {  ByteArrayOutputStream output=new ByteArrayOutputStream();  copy(input,output);  return output.toByteArray();}  }
class C{  public SpdyStream newStream(List<String> requestHeaders,boolean out,boolean in) throws IOException {  int flags=(out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);  int associatedStreamId=0;  int priority=0;  int slot=0;  SpdyStream stream;  int streamId;synchronized (spdyWriter) {synchronized (this) {      if (shutdown) {        throw new IOException("shutdown");      }      streamId=nextStreamId;      nextStreamId+=2;      stream=new SpdyStream(streamId,this,flags,priority,slot,requestHeaders,settings);      if (stream.isOpen()) {        streams.put(streamId,stream);        setIdle(false);      }    }    spdyWriter.synStream(flags,streamId,associatedStreamId,priority,slot,requestHeaders);  }  return stream;}  }
class C{  public void addIdentityPosition(int position,Set<Identity> participants){  for (  Identity participant : participants) {    Set<Integer> positions=identityPositions.get(participant.getId());    if (positions == null) {      positions=new HashSet<>();      identityPositions.put(participant.getId(),positions);    }    positions.add(position);  }}  }
class C{  public IconifyAction(){  super(ICONIFY_CMD);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void updateDelta(){  Calendar c=getCalendarFromRegisters();  deltaMs=c.getTimeInMillis() - platform.getMasterClock().getTotalElapsedTimePs() / MasterClock.PS_PER_MS;}  }
class C{  public static void logInvalidTaskType(final Logger logger,final TaskTypes type){  logger.logMessage(Level.INFO,"Invalid TaskType: " + type);}  }
class C{  public static boolean putBoolean(Context context,String key,boolean value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putBoolean(key,value);  return editor.commit();}  }
class C{  @ObjectiveCName("cancelDownloadingWithFileId:") public void cancelDownloading(long fileId){  modules.getFilesModule().cancelDownloading(fileId);}  }
class C{  public void union(float left,float top,float right,float bottom){  if ((left < right) && (top < bottom)) {    if ((this.left < this.right) && (this.top < this.bottom)) {      if (this.left > left)       this.left=left;      if (this.top > top)       this.top=top;      if (this.right < right)       this.right=right;      if (this.bottom < bottom)       this.bottom=bottom;    } else {      this.left=left;      this.top=top;      this.right=right;      this.bottom=bottom;    }  }}  }
class C{  public void stopConnector(BooleanConsumer callback){  try {    logger.info("Stopping the connector");    if (engine != null && engine.isRunning()) {      engine.stop();      try {        engine.await(8,TimeUnit.SECONDS);      } catch (      InterruptedException e) {        Thread.interrupted();      }    }    if (executor != null) {      List<Runnable> neverRunTasks=executor.shutdownNow();      assertThat(neverRunTasks).isEmpty();      try {        while (!executor.awaitTermination(10,TimeUnit.SECONDS)) {        }      } catch (      InterruptedException e) {        Thread.interrupted();      }    }    if (engine != null && engine.isRunning()) {      try {        while (!engine.await(5,TimeUnit.SECONDS)) {        }      } catch (      InterruptedException e) {        Thread.interrupted();      }    }    if (callback != null)     callback.accept(engine != null ? engine.isRunning() : false);  }  finally {    engine=null;    executor=null;  }}  }
class C{  @TargetApi(Build.VERSION_CODES.M) public void requestPermission(int permissionCode){switch (permissionCode) {case LOCATION_PERMISSIONS_REQUEST_CODE:    if (ContextCompat.checkSelfPermission(this,android.Manifest.permission.INSTALL_LOCATION_PROVIDER) != PackageManager.PERMISSION_GRANTED) {      requestPermissions(new String[]{android.Manifest.permission.ACCESS_COARSE_LOCATION},LOCATION_PERMISSIONS_REQUEST_CODE);    } else     if (weatherFragment != null) {      weatherFragment.getLocationUtils().requestLocation(weatherFragment);    }  break;case WRITE_EXTERNAL_STORAGE_REQUEST_CODE:if (ContextCompat.checkSelfPermission(this,Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {  requestPermissions(new String[]{android.Manifest.permission.WRITE_EXTERNAL_STORAGE},WRITE_EXTERNAL_STORAGE_REQUEST_CODE);  break;} else {  ShareUtils.shareWeather(this,weatherFragment.location.weather);}}}  }
class C{  public CardNotPresentException(String message,Throwable cause){  super(message,cause);}  }
class C{  protected Subscription loadSubscription(String subscriptionId,long subKey) throws ObjectNotFoundException {  Subscription result=null;  if (subKey != 0) {    result=dataManager.getReference(Subscription.class,subKey);  } else {    Subscription sub=new Subscription();    String trimmedSubId=subscriptionId == null ? null : subscriptionId.trim();    sub.setSubscriptionId(trimmedSubId);    sub.setOrganizationKey(dataManager.getCurrentUser().getOrganization().getKey());    result=(Subscription)dataManager.getReferenceByBusinessKey(sub);  }  return result;}  }
class C{  public T caseSimpleProjectDescription(SimpleProjectDescription object){  return null;}  }
class C{  public static void put(String key,String value) throws Exception {  Map<String,String> environemnt=new HashMap<String,String>(System.getenv());  environemnt.put(key,value);  updateEnvironment(environemnt);}  }
class C{  public boolean supportsCustomEditor(){  return true;}  }
class C{  public ComponentDescriptor(final String componentClass,final MicroPipelineComponentType type,final String name,final String version,final String description){  this.componentClass=componentClass;  this.type=type;  this.name=name;  this.version=version;  this.description=description;}  }
class C{  public byte[] array(){  byte[] res=new byte[size];  U.arrayCopy(data,0,res,0,size);  return res;}  }
class C{  public static LedgerAllocator createLedgerAllocatorPool(String poolPath,int corePoolSize,DistributedLogConfiguration conf,ZooKeeperClient zkc,BookKeeperClient bkc,ScheduledExecutorService scheduledExecutorService) throws IOException {  return new LedgerAllocatorPool(poolPath,corePoolSize,conf,zkc,bkc,scheduledExecutorService);}  }
class C{  public OneStepIterator(DTMAxisIterator iterator,int axis) throws javax.xml.transform.TransformerException {  super(null);  m_iterator=iterator;  m_axis=axis;  int whatToShow=DTMFilter.SHOW_ALL;  initNodeTest(whatToShow);}  }
class C{  void mode(String mode) throws IOException {  send("MODE " + mode);  readCode(200);}  }
class C{  protected void editNotes(){  MarkdownDialog dialog;  if (getParentDialog() != null)   dialog=new MarkdownDialog(getParentDialog(),ModalityType.DOCUMENT_MODAL); else   dialog=new MarkdownDialog(getParentFrame(),true);  dialog.setTitle("Edit notes");  dialog.setMarkdown(m_Notes);  dialog.setSize(600,400);  dialog.setLocationRelativeTo(null);  dialog.setVisible(true);  if (dialog.getOption() != MarkdownDialog.APPROVE_OPTION)   return;  m_Notes=dialog.getMarkdown();  setModified(true);  updateButtons();}  }
class C{  public DuplicateItemException(){  super();}  }
class C{  protected void RelativePathPattern() throws javax.xml.transform.TransformerException {  boolean trailingSlashConsumed=StepPattern(false);  while (tokenIs('/')) {    nextToken();    trailingSlashConsumed=StepPattern(!trailingSlashConsumed);  }}  }
class C{  protected static boolean requiresPersistence(final Class<?> test,final String testMethodName){  return test == GraphTest.class && testMethodName.equals("shouldPersistDataOnClose");}  }
