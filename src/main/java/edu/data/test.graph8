class C{  protected LocalResourceStatus(byte[] bytes) throws SVNException {  super();  if (bytes.length < 4) {    return;  }  StatusFromBytesStream in=new StatusFromBytesStream(bytes);  initFromBytes(in);}  }
class C{  protected void updateRange(){  if (m_type == int.class) {    setRange(m_lo.intValue(),m_hi.intValue() - m_lo.intValue(),m_min.intValue(),m_max.intValue());  } else   if (m_type == long.class) {    long range=m_max.longValue() - m_min.longValue();    if (range == 0) {      setRange(0,0,0,0);    } else {      long lo=m_lo.longValue() - m_min.longValue();      long hi=m_hi.longValue() - m_min.longValue();      int v=(int)(10000 * lo / range);      int e=(int)(10000 * hi / range) - v;      setRange(v,e,0,10000);    }  } else {    double range=m_max.doubleValue() - m_min.doubleValue();    if (range == 0) {      setRange(0,0,0,0);    } else {      double lo=m_lo.doubleValue() - m_min.doubleValue();      double hi=m_hi.doubleValue() - m_min.doubleValue();      int v=(int)(10000.0 * lo / range);      int e=(int)(10000.0 * hi / range) - v;      setRange(v,e,0,10000);    }  }}  }
class C{  protected AdsUpdateCampaignsQuery accountId(int value){  return unsafeParam("account_id",value);}  }
class C{  public boolean hasCategoryCombo(){  return categoryCombo != null && !DataElementCategoryCombo.DEFAULT_CATEGORY_COMBO_NAME.equals(categoryCombo.getName());}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  public WarpImageTransform(Random random,float dx1,float dy1,float dx2,float dy2,float dx3,float dy3,float dx4,float dy4){  super(random);  deltas=new float[8];  deltas[0]=dx1;  deltas[1]=dy1;  deltas[2]=dx2;  deltas[3]=dy2;  deltas[4]=dx3;  deltas[5]=dy3;  deltas[6]=dx4;  deltas[7]=dy4;  converter=new OpenCVFrameConverter.ToMat();}  }
class C{  public static String separatorsToUnix(String path){  if (path == null || path.indexOf(WINDOWS_SEPARATOR) == -1) {    return path;  }  return path.replace(WINDOWS_SEPARATOR,UNIX_SEPARATOR);}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public void commitHistogram(){  RecordHistogram.recordBooleanHistogram(mHistogramName,mIsHit);  mIsHit=false;}  }
class C{  @Override public void powerOnSelfTest() throws Error {  try {    Collection myVoices=Voice.getAvailableVoices(this);    if (myVoices.size() == 0) {      return;    }    UnitSelectionVoice unitSelVoice=(UnitSelectionVoice)myVoices.iterator().next();    assert unitSelVoice != null;    MaryData in=new MaryData(MaryDataType.get("ACOUSTPARAMS"),unitSelVoice.getLocale());    if (!unitSelVoice.getDomain().equals("general")) {      Log.i(Mary.LOG,"Cannot perform power-on self test using limited-domain voice '" + unitSelVoice.getName() + "' - skipping.");      return;    }    String exampleText=MaryDataType.ACOUSTPARAMS.exampleText(unitSelVoice.getLocale());    if (exampleText != null) {      in.readFrom(new StringReader(exampleText));      in.setDefaultVoice(unitSelVoice);      if (in == null) {        System.out.println(exampleText + " is null");      }      List<Element> tokensAndBoundaries=new ArrayList<Element>();      TreeWalker tw=((DocumentTraversal)in.getDocument()).createTreeWalker(in.getDocument(),NodeFilter.SHOW_ELEMENT,new NameNodeFilter(MaryXML.TOKEN,MaryXML.BOUNDARY),false);      Element el=null;      while ((el=(Element)tw.nextNode()) != null)       tokensAndBoundaries.add(el);      AudioInputStream ais=synthesize(tokensAndBoundaries,unitSelVoice,null);      assert ais != null;    } else {      Log.i(Mary.LOG,"No example text -- no power-on self test!");    }  } catch (  Throwable t) {    t.printStackTrace();    throw new Error("Module " + toString() + ": Power-on self test failed.",t);  }  Log.i(Mary.LOG,"Power-on self test complete.");}  }
class C{  public FloatColumn(){  this(0,10,0f);}  }
class C{  public int memberOf(){  return theMemberOf;}  }
class C{  @NotNull private static List<Color> resolveMultipleColors(@NotNull RenderResources resources,@Nullable ResourceValue value,@NotNull Project project,int depth){  if (depth >= MAX_RESOURCE_INDIRECTION) {    LOG.warn("too deep " + value);    return Collections.emptyList();  }  if (value != null) {    value=resources.resolveResValue(value);  }  if (value == null) {    return Collections.emptyList();  }  final List<Color> result=new ArrayList<>();  StateList stateList=resolveStateList(resources,value,project);  if (stateList != null) {    for (    StateListState state : stateList.getStates()) {      List<Color> stateColors;      ResourceValue resolvedStateResource=resources.findResValue(state.getValue(),false);      if (resolvedStateResource != null) {        stateColors=resolveMultipleColors(resources,resolvedStateResource,project,depth + 1);      } else {        Color color=parseColor(state.getValue());        stateColors=color == null ? Collections.emptyList() : ImmutableList.of(color);      }      for (      Color color : stateColors) {        try {          result.add(makeColorWithAlpha(resources,color,state.getAlpha()));        } catch (        NumberFormatException e) {          result.add(color);          LOG.warn(String.format(ALPHA_FLOATING_ERROR_FORMAT,stateList.getDirName(),stateList.getFileName()));        }      }    }  } else {    Color color=parseColor(value.getValue());    if (color != null) {      result.add(color);    }  }  return result;}  }
class C{  public static byte[] hmac(SecurityAlgorithm securityAlgorithm,byte[] secretKey,ByteBuffer... buffers) throws UaException {  String transformation=securityAlgorithm.getTransformation();  try {    Mac mac=Mac.getInstance(transformation);    mac.init(new SecretKeySpec(secretKey,transformation));    for (    ByteBuffer buffer : buffers) {      mac.update(buffer);    }    return mac.doFinal();  } catch (  GeneralSecurityException e) {    throw new UaException(StatusCodes.Bad_SecurityChecksFailed,e);  }}  }
class C{  private void pop(final String desc){  char c=desc.charAt(0);  if (c == '(') {    pop((MethodWriter.getArgumentsAndReturnSizes(desc) >> 2) - 1);  } else   if (c == 'J' || c == 'D') {    pop(2);  } else {    pop(1);  }}  }
class C{  public synchronized static boolean isBrowseAvailable(){  if (!browseAvailableInitialized) {    if (!isDesktopSupported())     browseAvailable=false; else     browseAvailable=Desktop.getDesktop().isSupported(Desktop.Action.BROWSE);    browseAvailableInitialized=true;  }  return browseAvailable;}  }
class C{  public static IOFileFilter directoryFileFilter(){  return DirectoryFileFilter.DIRECTORY;}  }
class C{  protected double[] fct(double[] f) throws MathIllegalArgumentException {  final double[] transformed=new double[f.length];  final int n=f.length - 1;  if (!ArithmeticUtils.isPowerOfTwo(n)) {    throw new MathIllegalArgumentException(LocalizedFFTFormats.NOT_POWER_OF_TWO_PLUS_ONE,Integer.valueOf(f.length));  }  if (n == 1) {    transformed[0]=0.5 * (f[0] + f[1]);    transformed[1]=0.5 * (f[0] - f[1]);    return transformed;  }  final double[] x=new double[n];  x[0]=0.5 * (f[0] + f[n]);  x[n >> 1]=f[n >> 1];  double t1=0.5 * (f[0] - f[n]);  for (int i=1; i < (n >> 1); i++) {    final double a=0.5 * (f[i] + f[n - i]);    final double b=FastMath.sin(i * FastMath.PI / n) * (f[i] - f[n - i]);    final double c=FastMath.cos(i * FastMath.PI / n) * (f[i] - f[n - i]);    x[i]=a - b;    x[n - i]=a + b;    t1+=c;  }  FastFourierTransformer transformer;  transformer=new FastFourierTransformer(DftNormalization.STANDARD);  Complex[] y=transformer.transform(x,TransformType.FORWARD);  transformed[0]=y[0].getReal();  transformed[1]=t1;  for (int i=1; i < (n >> 1); i++) {    transformed[2 * i]=y[i].getReal();    transformed[2 * i + 1]=transformed[2 * i - 1] - y[i].getImaginary();  }  transformed[n]=y[n >> 1].getReal();  return transformed;}  }
class C{  private void onCopyFileOperationFinish(CopyFileOperation operation,RemoteOperationResult result){  if (result.isSuccess()) {    refreshListOfFilesFragment();  } else {    try {      Toast msg=Toast.makeText(FileDisplayActivity.this,ErrorMessageAdapter.getErrorCauseMessage(result,operation,getResources()),Toast.LENGTH_LONG);      msg.show();    } catch (    NotFoundException e) {      Log_OC.e(TAG,"Error while trying to show fail message ",e);    }  }}  }
class C{  public boolean hasPurchase(String sku){  return mPurchaseMap.containsKey(sku);}  }
class C{  public static int clamp(int value,int a,int b){  int min=(a > b) ? b : a;  int max=(a > b) ? a : b;  if (value < min) {    value=min;  } else   if (value > max) {    value=max;  }  return value;}  }
class C{  @Override public int hashCode(){  final int prime=31;  int result=1;  result=prime * result + ((getId() == null) ? 0 : getId().hashCode());  result=prime * result + ((getGroupName() == null) ? 0 : getGroupName().hashCode());  result=prime * result + ((getGroupDesc() == null) ? 0 : getGroupDesc().hashCode());  result=prime * result + ((getEnable() == null) ? 0 : getEnable().hashCode());  result=prime * result + ((getCreateTime() == null) ? 0 : getCreateTime().hashCode());  result=prime * result + ((getCreateBy() == null) ? 0 : getCreateBy().hashCode());  result=prime * result + ((getUpdateTime() == null) ? 0 : getUpdateTime().hashCode());  result=prime * result + ((getUpdateBy() == null) ? 0 : getUpdateBy().hashCode());  return result;}  }
class C{  public void actionPerformed(ActionEvent ev){  executeImmediately("select=none;");}  }
class C{  private void generateLegalTimesTree(){  int k0=KeyEvent.KEYCODE_0;  int k1=KeyEvent.KEYCODE_1;  int k2=KeyEvent.KEYCODE_2;  int k3=KeyEvent.KEYCODE_3;  int k4=KeyEvent.KEYCODE_4;  int k5=KeyEvent.KEYCODE_5;  int k6=KeyEvent.KEYCODE_6;  int k7=KeyEvent.KEYCODE_7;  int k8=KeyEvent.KEYCODE_8;  int k9=KeyEvent.KEYCODE_9;  mLegalTimesTree=new Node();  if (mIs24HourMode) {    Node minuteFirstDigit=new Node(k0,k1,k2,k3,k4,k5);    Node minuteSecondDigit=new Node(k0,k1,k2,k3,k4,k5,k6,k7,k8,k9);    minuteFirstDigit.addChild(minuteSecondDigit);    Node firstDigit=new Node(k0,k1);    mLegalTimesTree.addChild(firstDigit);    Node secondDigit=new Node(k0,k1,k2,k3,k4,k5);    firstDigit.addChild(secondDigit);    secondDigit.addChild(minuteFirstDigit);    Node thirdDigit=new Node(k6,k7,k8,k9);    secondDigit.addChild(thirdDigit);    secondDigit=new Node(k6,k7,k8,k9);    firstDigit.addChild(secondDigit);    secondDigit.addChild(minuteFirstDigit);    firstDigit=new Node(k2);    mLegalTimesTree.addChild(firstDigit);    secondDigit=new Node(k0,k1,k2,k3);    firstDigit.addChild(secondDigit);    secondDigit.addChild(minuteFirstDigit);    secondDigit=new Node(k4,k5);    firstDigit.addChild(secondDigit);    secondDigit.addChild(minuteSecondDigit);    firstDigit=new Node(k3,k4,k5,k6,k7,k8,k9);    mLegalTimesTree.addChild(firstDigit);    firstDigit.addChild(minuteFirstDigit);  } else {    Node ampm=new Node(getAmOrPmKeyCode(HALF_DAY_1),getAmOrPmKeyCode(HALF_DAY_2));    Node firstDigit=new Node(k1);    mLegalTimesTree.addChild(firstDigit);    firstDigit.addChild(ampm);    Node secondDigit=new Node(k0,k1,k2);    firstDigit.addChild(secondDigit);    secondDigit.addChild(ampm);    Node thirdDigit=new Node(k0,k1,k2,k3,k4,k5);    secondDigit.addChild(thirdDigit);    thirdDigit.addChild(ampm);    Node fourthDigit=new Node(k0,k1,k2,k3,k4,k5,k6,k7,k8,k9);    thirdDigit.addChild(fourthDigit);    fourthDigit.addChild(ampm);    thirdDigit=new Node(k6,k7,k8,k9);    secondDigit.addChild(thirdDigit);    thirdDigit.addChild(ampm);    secondDigit=new Node(k3,k4,k5);    firstDigit.addChild(secondDigit);    thirdDigit=new Node(k0,k1,k2,k3,k4,k5,k6,k7,k8,k9);    secondDigit.addChild(thirdDigit);    thirdDigit.addChild(ampm);    firstDigit=new Node(k2,k3,k4,k5,k6,k7,k8,k9);    mLegalTimesTree.addChild(firstDigit);    firstDigit.addChild(ampm);    secondDigit=new Node(k0,k1,k2,k3,k4,k5);    firstDigit.addChild(secondDigit);    thirdDigit=new Node(k0,k1,k2,k3,k4,k5,k6,k7,k8,k9);    secondDigit.addChild(thirdDigit);    thirdDigit.addChild(ampm);  }}  }
class C{  public void clearSounds(){  mSoundMap.clear();}  }
class C{  @Override public void intialize(CarbonColumn[] carbonColumns,AbsoluteTableIdentifier absoluteTableIdentifier){  this.carbonColumns=carbonColumns;  dictionaries=new Dictionary[carbonColumns.length];  dataTypes=new DataType[carbonColumns.length];  for (int i=0; i < carbonColumns.length; i++) {    if (carbonColumns[i].hasEncoding(Encoding.DICTIONARY) && !carbonColumns[i].hasEncoding(Encoding.DIRECT_DICTIONARY)) {      CacheProvider cacheProvider=CacheProvider.getInstance();      Cache<DictionaryColumnUniqueIdentifier,Dictionary> forwardDictionaryCache=cacheProvider.createCache(CacheType.FORWARD_DICTIONARY,absoluteTableIdentifier.getStorePath());      try {        dataTypes[i]=carbonColumns[i].getDataType();        dictionaries[i]=forwardDictionaryCache.get(new DictionaryColumnUniqueIdentifier(absoluteTableIdentifier.getCarbonTableIdentifier(),carbonColumns[i].getColumnIdentifier(),dataTypes[i]));      } catch (      CarbonUtilException e) {        throw new RuntimeException(e);      }    }  }}  }
class C{  protected AuthConfirmQuery code(String value){  return unsafeParam("code",value);}  }
class C{  public FieldVector3D<T> add(final FieldVector3D<T> v){  return new FieldVector3D<T>(x.add(v.x),y.add(v.y),z.add(v.z));}  }
class C{  public static void write(char[] data,Writer output) throws IOException {  if (data != null) {    output.write(data);  }}  }
class C{  public Tokenizer(String master,String lexiconFileName,String regexpFileName){  jsc=SparkContextFactory.create(master);  lexicon=new Lexicon().load(lexiconFileName);  if (verbose)   System.out.println("#(nodes of the lexicon) = " + lexicon.numNodes());  List<String> lines=jsc.textFile(regexpFileName).collect();  for (  String line : lines) {    line=line.trim();    if (!line.startsWith("#")) {      String[] s=line.split("\\s+");      if (s.length == 2) {        patterns.put(s[0],Pattern.compile(s[1]));      }    }  }}  }
class C{  public MobileInfo(){}  }
class C{  public TapTarget descriptionTextSize(int sp){  if (sp < 0)   throw new IllegalArgumentException("Given negative text size");  this.descriptionTextSize=sp;  return this;}  }
class C{  @Override public Writer append(CharSequence csq,int start,int end){  return this;}  }
class C{  public static void expandReal(String numberString,WordRelation wordRelation){  int stringLength=numberString.length();  int position;  if (numberString.charAt(0) == '-') {    wordRelation.addWord("minus");    expandReal(numberString.substring(1,stringLength),wordRelation);  } else   if (numberString.charAt(0) == '+') {    wordRelation.addWord("plus");    expandReal(numberString.substring(1,stringLength),wordRelation);  } else   if ((position=numberString.indexOf('e')) != -1 || (position=numberString.indexOf('E')) != -1) {    expandReal(numberString.substring(0,position),wordRelation);    wordRelation.addWord("e");    expandReal(numberString.substring(position + 1),wordRelation);  } else   if ((position=numberString.indexOf('.')) != -1) {    String beforeDot=numberString.substring(0,position);    if (beforeDot.length() > 0) {      expandReal(beforeDot,wordRelation);    }    wordRelation.addWord("point");    String afterDot=numberString.substring(position + 1);    if (afterDot.length() > 0) {      expandDigits(afterDot,wordRelation);    }  } else {    expandNumber(numberString,wordRelation);  }}  }
class C{  @Override public void onConfirmation(String callerTag){  ComponentsGetter cg=(ComponentsGetter)getActivity();  cg.getFileOperationsHelper().removeFiles(mTargetFiles,false);}  }
class C{  public void clean(){  for (int i=theAtts.getLength() - 1; i >= 0; i--) {    String name=theAtts.getLocalName(i);    if (theAtts.getValue(i) == null || name == null || name.length() == 0) {      theAtts.removeAttribute(i);      continue;    }  }}  }
class C{  public boolean write(byte[] bytes,int offset,int size){  totalBytes+=size;  totalWrites++;  if (firstSound) {    timer.stop("AudioFirstSound");    firstSound=false;    if (TRACE) {      timer.show("Null Trace");    }  }  if (false && TRACE) {    System.out.println("NullAudio: write " + size + " bytes.");  }  return true;}  }
class C{  public Set<String> projectFields(){  return projFields;}  }
class C{  public ByteArrayList data(){  return data;}  }
class C{  public void addHeader(String header,String value){  clientHeaderMap.put(header,value);}  }
class C{  public void removeHeader(String header){  clientHeaderMap.remove(header);}  }
class C{  protected PollsDeleteVoteQuery pollId(int value){  return unsafeParam("poll_id",value);}  }
class C{  public VideoGetCommentsQueryWithExtended offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public JKalman(int dynam_params,int measure_params,int control_params) throws IllegalArgumentException {  if (dynam_params <= 0 || measure_params <= 0) {    throw new IllegalArgumentException("Kalman filter: Illegal dimensions.");  }  if (control_params < 0) {    control_params=dynam_params;  }  dp=dynam_params;  mp=measure_params;  cp=control_params;  state_pre=new Matrix(dp,1);  state_post=new Matrix(dp,1);  transition_matrix=Matrix.identity(dp,dp);  process_noise_cov=Matrix.identity(dp,dp,1e-3);  measurement_matrix=Matrix.identity(mp,dp);  measurement_noise_cov=Matrix.identity(mp,mp,1e-1);  error_cov_pre=new Matrix(dp,dp);  error_cov_post=Matrix.identity(dp,dp);  gain=new Matrix(dp,mp);  if (cp > 0) {    control_matrix=new Matrix(dp,cp);  } else {    control_matrix=null;  }  temp1=new Matrix(dp,dp);  temp2=new Matrix(mp,dp);  temp3=new Matrix(mp,mp);  temp4=new Matrix(mp,dp);  temp5=new Matrix(mp,1);}  }
class C{  private void checkIfNext(){  if (_currentClass >= _types.length) {    _currentEntryCacheInfo=null;    _currentEntryHolder=null;    return;  }  if (!moreEntriesForCurrentClass()) {    if (!_firstFromCache) {      _currentClass++;      _actualClass++;    } else {      _firstFromCache=false;    }  }  if (!moreEntriesForCurrentClass()) {    for (; _currentClass < _types.length; _currentClass++, _actualClass++) {      if (_actualClass >= _types.length)       _actualClass=0;      TypeData pType=_cacheManager.getTypeData(_types[_actualClass]);      if (pType != null) {        getEntries(_types[_actualClass]);        if (!moreEntriesForCurrentClass())         continue;        break;      }    }    if (!moreEntriesForCurrentClass()) {      _currentEntryCacheInfo=null;      _currentEntryHolder=null;      return;    }  }  if (isRelevantEntry())   return;  for (_currentClass++, _actualClass++; _currentClass < _types.length; _currentClass++, _actualClass++) {    if (_actualClass >= _types.length)     _actualClass=0;    TypeData pType=_cacheManager.getTypeData(_types[_actualClass]);    if (pType == null)     continue;    if (_templateHolder.isChangeById() && !_types[_actualClass].getTypeName().equals(_templateHolder.getServerTypeDesc()))     continue;    ;    getEntries(_types[_actualClass]);    if (!moreEntriesForCurrentClass())     continue;    if (isRelevantEntry())     return;  }  _currentEntryCacheInfo=null;  _currentEntryHolder=null;}  }
class C{  public Complex[] transform(final Complex[] f,final TransformType type){  final double[][] dataRI=TransformUtils.createRealImaginaryArray(f);  transformInPlace(dataRI,normalization,type);  return TransformUtils.createComplexArray(dataRI);}  }
class C{  private synchronized void applyUpdate(Collection<ResolverTuple> underlyingTuples){  lastRefresh=DateTime.now();  tuples=underlyingTuples;  exception=null;  reschedule(minAge.getMillis());}  }
class C{  public JPrefuseTable(Table t){  super();  m_table=t;  PrefuseTableModel model=new PrefuseTableModel(m_table);  super.setModel(model);  m_table.addTableListener(model);}  }
class C{  public static boolean addSmiles(Context context,Spannable spannable){  boolean hasChanges=false;  for (  Entry<Pattern,Object> entry : emoticons.entrySet()) {    Matcher matcher=entry.getKey().matcher(spannable);    while (matcher.find()) {      boolean set=true;      for (      ImageSpan span : spannable.getSpans(matcher.start(),matcher.end(),ImageSpan.class))       if (spannable.getSpanStart(span) >= matcher.start() && spannable.getSpanEnd(span) <= matcher.end())       spannable.removeSpan(span); else {        set=false;        break;      }      if (set) {        hasChanges=true;        Object value=entry.getValue();        if (value instanceof String && !((String)value).startsWith("http")) {          File file=new File((String)value);          if (!file.exists() || file.isDirectory()) {            return false;          }          spannable.setSpan(new ImageSpan(context,Uri.fromFile(file)),matcher.start(),matcher.end(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);        } else {          spannable.setSpan(new ImageSpan(context,(Integer)value),matcher.start(),matcher.end(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);        }      }    }  }  return hasChanges;}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);}  }
class C{  @Override public boolean isEnemyFrom(Creature creature){  if (creature instanceof SiegeNpc && this.getSiegeRace() != ((SiegeNpc)creature).getSiegeRace()) {    return true;  } else {    return super.isEnemyFrom(creature);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_PAY_ACCOUNT_ME(long highestValue){  return new SM_SYSTEM_MESSAGE(1390185,highestValue);}  }
class C{  void invalidate(){  m_row=-1;}  }
class C{  protected boolean checkRulePart(Element currentRulePart,Element token,NodeList tokens,int position,String sentenceType,String specialPositionType,String tokenText){  String currentRulePartTagName=currentRulePart.getTagName();  if (currentRulePartTagName.equals("text") & currentRulePart.hasAttribute("word")) {    return checkText(currentRulePart,tokenText);  } else   if (currentRulePart.hasAttribute("word") && (currentRulePartTagName.equals("nextText") || nextPlusXTextPattern.matcher(currentRulePartTagName).find() || currentRulePartTagName.equals("previousText")|| previousMinusXTextPattern.matcher(currentRulePartTagName).find())) {    return checkTextOfOtherToken(currentRulePartTagName,currentRulePart,position,tokens);  } else   if (currentRulePartTagName.equals("folTokens") && currentRulePart.hasAttribute("num")) {    return checkFolTokens(currentRulePart,position,tokens);  } else   if (currentRulePartTagName.equals("prevTokens") && currentRulePart.hasAttribute("num")) {    return checkPrevTokens(currentRulePart,position,tokens);  } else   if (currentRulePartTagName.equals("folWords") && currentRulePart.hasAttribute("num")) {    return checkFolWords(currentRulePart,position,tokens);  } else   if (currentRulePartTagName.equals("prevWords") && currentRulePart.hasAttribute("num")) {    return checkPrevWords(currentRulePart,position,tokens);  } else   if (currentRulePartTagName.equals("sentence") && currentRulePart.hasAttribute("type")) {    return checkSentence(currentRulePart,sentenceType);  } else   if (currentRulePartTagName.equals("specialPosition") && currentRulePart.hasAttribute("type")) {    return checkSpecialPosition(currentRulePart,specialPositionType);  } else   if (currentRulePartTagName.equals("attributes")) {    return checkAttributes(currentRulePart,token);  } else   if (currentRulePartTagName.equals("nextAttributes") || nextPlusXAttributesPattern.matcher(currentRulePart.getTagName()).find() || currentRulePartTagName.equals("previousAttributes")|| previousMinusXAttributesPattern.matcher(currentRulePart.getTagName()).find()) {    return checkAttributesOfOtherToken(currentRulePart.getTagName(),currentRulePart,position,tokens);  } else {    return true;  }}  }
class C{  protected void startSwaggerService(){  this.log(Level.INFO,"Swagger service starting ...");  SwaggerDescriptorService swagger=new SwaggerDescriptorService();  swagger.setExcludedPrefixes("/core/transactions","/core/node-groups");  Info apiInfo=new Info();  apiInfo.setVersion("0.0.1");  apiInfo.setTitle("Container Management");  swagger.setInfo(apiInfo);  this.startService(swagger);  this.log(Level.INFO,"Swagger service started. Checkout Swagger UI at: " + this.getPublicUri() + ServiceUriPaths.SWAGGER+ "/ui");}  }
class C{  public static boolean banIp(String ip,Timestamp expireTime){  if (ip.equals("127.0.0.1")) {    return false;  }  BannedIP ipBan=new BannedIP();  ipBan.setMask(ip);  ipBan.setTimeEnd(expireTime);  banList.add(ipBan);  try {    getDAO().insert(ipBan);    return true;  } catch (  Exception e) {    log.warn("Ip " + ip + " is already banned.");    return false;  }}  }
class C{  @Override public int size(){  return backedSet.size();}  }
class C{  protected static JSONObject send(String command) throws Exception {  return server.send(command);}  }
class C{  public void reset(){  status=EMPTY;}  }
class C{  private int measureHeight(int measureSpec){  int result=0;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=(int)(2 * radius + getPaddingTop() + getPaddingBottom() + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public UrlSpaceConfigurer leaderSelector(LeaderSelectorConfig leaderSelectorConfig){  validate();  urlSpaceFactoryBean.leaderSelector(leaderSelectorConfig);  return this;}  }
class C{  @ExceptionHandler(DataAccessException.class) @ResponseStatus(value=HttpStatus.INTERNAL_SERVER_ERROR) public @ResponseBody ErrorResponse resolveDataAccessException(DataAccessException e) throws IOException {  if (logger.isLoggable(Level.WARNING))   logger.log(Level.WARNING,"received DataAccessException exception",e);  return new ErrorResponse(new ExceptionMessage(e));}  }
class C{  public boolean gotoLast(){  currentIterator=null;  currentId=null;  return isCurrentSet();}  }
class C{  private void layoutChildWithKeyline(View child,int keyline,int layoutDirection){  final LayoutParams lp=(LayoutParams)child.getLayoutParams();  final int absGravity=GravityCompat.getAbsoluteGravity(resolveKeylineGravity(lp.gravity),layoutDirection);  final int hgrav=absGravity & Gravity.HORIZONTAL_GRAVITY_MASK;  final int vgrav=absGravity & Gravity.VERTICAL_GRAVITY_MASK;  final int width=getWidth();  final int height=getHeight();  final int childWidth=child.getMeasuredWidth();  final int childHeight=child.getMeasuredHeight();  if (layoutDirection == ViewCompat.LAYOUT_DIRECTION_RTL) {    keyline=width - keyline;  }  int left=getKeyline(keyline) - childWidth;  int top=0;switch (hgrav) {default :case Gravity.LEFT:    break;case Gravity.RIGHT:  left+=childWidth;break;case Gravity.CENTER_HORIZONTAL:left+=childWidth / 2;break;}switch (vgrav) {default :case Gravity.TOP:break;case Gravity.BOTTOM:top+=childHeight;break;case Gravity.CENTER_VERTICAL:top+=childHeight / 2;break;}left=Math.max(getPaddingLeft() + lp.leftMargin,Math.min(left,width - getPaddingRight() - childWidth- lp.rightMargin));top=Math.max(getPaddingTop() + lp.topMargin,Math.min(top,height - getPaddingBottom() - childHeight- lp.bottomMargin));child.layout(left,top,left + childWidth,top + childHeight);}  }
class C{  private Bitmap processBitmap(int resId){  if (BuildConfig.DEBUG) {    Log.d(TAG,"processBitmap - " + resId);  }  return decodeSampledBitmapFromResource(mResources,resId,mImageWidth,mImageHeight,getImageCache());}  }
class C{  private void endList(boolean orderedList){  if (!mParagraphStyles.isEmpty()) {    AccumulatedParagraphStyle style=mParagraphStyles.peek();    ParagraphType type=style.getType();    if ((orderedList && (type.isNumbering() || type == ParagraphType.INDENTATION_OL)) || (!orderedList && (type.isBullet() || type == ParagraphType.INDENTATION_UL))) {      int indent=style.getRelativeIndent();      if (indent > 1) {        style.setRelativeIndent(indent - 1);        style.setAbsoluteIndent(style.getAbsoluteIndent() - 1);      } else {        mParagraphStyles.pop();      }    } else {      mParagraphStyles.pop();      endList(orderedList);    }  }}  }
class C{  public LocalWordNetMeaningExtractor() throws IOException {  Process p=Runtime.getRuntime().exec("wordnet");  try {    p.waitFor();  } catch (  InterruptedException iee) {    return;  }  if (p.exitValue() == 0) {    throw new IOException("WordNet cannot be found and executed.");  }}  }
class C{  public boolean isControlDown(){  return mIsControlDown;}  }
class C{  @Override public void mark(int readAheadLimit) throws IOException {  fInputStream.mark(readAheadLimit);}  }
class C{  @Override public void pcdata(Augmentations augs) throws XNIException {  fMixed=true;}  }
class C{  public static float indicator(final float x){  if (Float.isNaN(x)) {    return Float.NaN;  }  return (x >= 0.0F) ? 1.0F : -1.0F;}  }
class C{  public Call put(String url,Callback callback){  return put(url,null,callback);}  }
class C{  public StaticScript(){}  }
class C{  private void writeUncompressedImage(Uri src,Uri dest) throws FileNotFoundException, IOException {  FileInputStream fis=null;  OutputStream os=null;  try {    fis=new FileInputStream(FileHelper.stripFileProtocol(src.toString()));    os=this.cordova.getActivity().getContentResolver().openOutputStream(dest);    byte[] buffer=new byte[4096];    int len;    while ((len=fis.read(buffer)) != -1) {      os.write(buffer,0,len);    }    os.flush();  }  finally {    if (os != null) {      try {        os.close();      } catch (      IOException e) {        LOG.d(LOG_TAG,"Exception while closing output stream.");      }    }    if (fis != null) {      try {        fis.close();      } catch (      IOException e) {        LOG.d(LOG_TAG,"Exception while closing file input stream.");      }    }  }}  }
class C{  public WallPostQuery friendsOnly(Boolean value){  return unsafeParam("friends_only",value);}  }
class C{  public void writeReadBlock(IReadBlockWithLocation readBlock) throws IOException {  numberOfReads++;  numberOfMatches+=readBlock.getNumberOfMatches();switch (textStoragePolicy) {case Embed:    ReadBlockRMA2.write(rma2Formatter,readBlock,fileWriter,tmpWriter);  break;case InRMAZ:ReadBlockRMA2.write(rma2Formatter,readBlock,dumpWriter,fileWriter);break;case Reference:ReadBlockRMA2.write(rma2Formatter,readBlock,null,fileWriter);break;default :throw new IOException("Unknown textStoragePolicy: " + textStoragePolicy);}}  }
class C{  private int[] hashes(InputStream input) throws IOException {  try {    return ByteStreams.readBytes(input,new HashingByteProcessor());  }  finally {    input.close();  }}  }
class C{  public boolean isSelected(){  ClusterViewer viewer=getViewer();  return viewer.getEcologicalIndex().equalsIgnoreCase(JensenShannonDivergence.SqrtJensenShannonDivergence);}  }
class C{  public TObjectHash(int initialCapacity,TObjectHashingStrategy<T> strategy){  super(initialCapacity);  this._hashingStrategy=strategy;}  }
class C{  public WallRestoreQuery postId(Integer value){  return unsafeParam("post_id",value);}  }
class C{  public NewsfeedSearchQuery longitude(Float value){  return unsafeParam("longitude",value);}  }
class C{  private HashMap createSVMModel(double dTolerance,double dCost,double dGamma){  svm_problem spProblem=new svm_problem();  spProblem.l=DocumentList.size();  if (spProblem.l == 0) {    Model=null;    return null;  }  HashMap hCategories=new HashMap();  spProblem.x=new svm_node[spProblem.l][];  spProblem.y=new double[spProblem.l];  ListIterator iIter=DocumentList.listIterator();  int iCnt=0;  while (iIter.hasNext()) {    Decision idDocInfo=(Decision)iIter.next();    spProblem.x[iCnt]=documentToNodeArray((SimpleTextDocument)idDocInfo.Document);    if (!hCategories.containsKey(idDocInfo.FinalDecision))     hCategories.put(idDocInfo.FinalDecision,hCategories.size() + 1);    spProblem.y[iCnt++]=((Integer)hCategories.get(idDocInfo.FinalDecision)).doubleValue();  }  svm_parameter spParam=new svm_parameter();  spParam.svm_type=svm_parameter.C_SVC;  spParam.kernel_type=svm_parameter.RBF;  spParam.degree=1;  spParam.gamma=dGamma;  spParam.coef0=0;  spParam.nu=0.5;  spParam.cache_size=100;  spParam.C=dCost;  spParam.eps=dTolerance;  spParam.p=0.1;  spParam.shrinking=0;  spParam.probability=0;  spParam.nr_weight=0;  spParam.weight_label=new int[0];  spParam.weight=new double[0];  String error_msg=svm.svm_check_parameter(spProblem,spParam);  if (error_msg != null) {    System.err.print("Error: " + error_msg + "\n");    return null;  }  try {    FileWriter fw=new FileWriter("train.dat");    for (int iLine=0; iLine < spProblem.l; iLine++) {      String sLine=String.valueOf(spProblem.y[iLine]) + " ";      for (int iElem=0; iElem < spProblem.x[iLine].length; iElem++) {        sLine+=String.valueOf(spProblem.x[iLine][iElem].index) + ":" + String.valueOf(spProblem.x[iLine][iElem].value)+ " ";      }      fw.write(sLine + "\n");    }    fw.close();  } catch (  Exception e) {    e.printStackTrace();    return hCategories;  }  try {    Process p=(new ProcessBuilder("svmtrain.exe","-s 0","-t 2","-g " + String.valueOf(dGamma),"-v 10","train.dat","model.dat")).start();    InputStreamReader reader=new InputStreamReader(p.getInputStream());    BufferedReader buf_reader=new BufferedReader(reader);    String line;    while ((line=buf_reader.readLine()) != null)     System.out.println(line);  } catch (  Exception ioe) {    ioe.printStackTrace();    return hCategories;  }  Model=svm.svm_train(spProblem,spParam);  return hCategories;}  }
class C{  public MessagesSendQuery stickerId(Integer value){  return unsafeParam("sticker_id",value);}  }
class C{  public void addFlag(int flag){  mIntent.addFlags(flag);}  }
class C{  public BoardOpenTopicQuery openTopic(UserActor actor,int groupId,int topicId){  return new BoardOpenTopicQuery(getClient(),actor,groupId,topicId);}  }
class C{  public void beforeStop(){}  }
class C{  private void refreshIndexForDimensionFields(String rowId,DimensionRow dimensionRow,DimensionRow dimensionRowOld){  try {    for (    DimensionField field : dimension.getDimensionFields()) {      if (field == dimension.getKey()) {        continue;      }      if (dimensionRowOld != null) {        String oldRowValue=dimensionRowOld.get(field);        String oldRowValueKey=DimensionStoreKeyUtils.getRowKey(field.getName(),oldRowValue);        String oldRowValuesKeysJson=keyValueStore.get(oldRowValueKey);        String[] oldRowValueSKeys=objectMapper.readValue(oldRowValuesKeysJson,String[].class);        Set<String> oldRowValuesKeySet=new LinkedHashSet<>(Arrays.asList(oldRowValueSKeys));        oldRowValuesKeySet.remove(rowId);        if (oldRowValuesKeySet.isEmpty()) {          keyValueStore.remove(oldRowValueKey);        } else {          String updatedOldRowValueSKeys=objectMapper.writeValueAsString(oldRowValuesKeySet);          keyValueStore.put(oldRowValueKey,updatedOldRowValueSKeys);        }      }      String rowValue=dimensionRow.get(field);      String rowValueKey=DimensionStoreKeyUtils.getRowKey(field.getName(),rowValue);      String rowValueSKeys=keyValueStore.get(rowValueKey);      Set<String> rowValueSKeySet=new LinkedHashSet<>();      if (rowValueSKeys != null) {        rowValueSKeySet.addAll(Arrays.asList(objectMapper.readValue(rowValueSKeys,String[].class)));      }      rowValueSKeySet.add(rowId);      String updatedRowValueSKeys=objectMapper.writeValueAsString(rowValueSKeySet);      keyValueStore.put(rowValueKey,updatedRowValueSKeys);    }  } catch (  IOException e) {    LOG.error("Exception while adding dimension description entry in key value store : {}",e);    throw new RuntimeException(e);  }}  }
class C{  private static MetricValue duration_to_metricvalue_(Duration duration){  return MetricValue.fromIntValue(duration.getMillis());}  }
class C{  public boolean willReadBlock(){  return false;}  }
class C{  public void animateXY(int durationMillisX,int durationMillisY,EasingFunction easingX,EasingFunction easingY){  if (android.os.Build.VERSION.SDK_INT < 11)   return;  ObjectAnimator animatorY=ObjectAnimator.ofFloat(this,"phaseY",0f,1f);  animatorY.setInterpolator(easingY);  animatorY.setDuration(durationMillisY);  ObjectAnimator animatorX=ObjectAnimator.ofFloat(this,"phaseX",0f,1f);  animatorX.setInterpolator(easingX);  animatorX.setDuration(durationMillisX);  if (durationMillisX > durationMillisY) {    animatorX.addUpdateListener(mListener);  } else {    animatorY.addUpdateListener(mListener);  }  animatorX.start();  animatorY.start();}  }
class C{  private void maybeDiscardRegistrars(){synchronized (registrars) {    HashMap groupsMap=new HashMap(registrars.size());    for (Iterator iter=registrars.values().iterator(); iter.hasNext(); ) {      UnicastResponse ent=(UnicastResponse)iter.next();      if (!groupsOverlap(ent.getGroups())) {        groupsMap.put(ent.getRegistrar(),ent.getGroups());        regInfo.remove(ent.getRegistrar().getServiceID());        iter.remove();      }    }    if (!groupsMap.isEmpty() && !listeners.isEmpty()) {      addNotify((ArrayList)listeners.clone(),groupsMap,DISCARDED);    }  }}  }
class C{  protected boolean expect(TokenKind kind,String message,boolean alwaysConsume){  TokenKind current=currentToken();  if (current == kind || alwaysConsume) {    builder.advanceLexer();  }  if (current != kind) {    builder.error(message);    return false;  }  return true;}  }
class C{  public static void restartApp(Context appContext,Collection<Activity> knownActivities,boolean toast){  if (!knownActivities.isEmpty()) {    Activity foreground=getForegroundActivity(appContext);    if (foreground != null) {      if (toast) {        showToast(foreground,"Restarting app to apply incompatible changes");      }      if (Log.isLoggable(LOG_TAG,Log.VERBOSE)) {        Log.v(LOG_TAG,"RESTARTING APP");      }      @SuppressWarnings("UnnecessaryLocalVariable") Context context=foreground;      Intent intent=new Intent(context,foreground.getClass());      int intentId=0;      PendingIntent pendingIntent=PendingIntent.getActivity(context,intentId,intent,PendingIntent.FLAG_CANCEL_CURRENT);      AlarmManager mgr=(AlarmManager)context.getSystemService(Context.ALARM_SERVICE);      mgr.set(AlarmManager.RTC,System.currentTimeMillis() + 100,pendingIntent);      if (Log.isLoggable(LOG_TAG,Log.VERBOSE)) {        Log.v(LOG_TAG,"Scheduling activity " + foreground + " to start after exiting process");      }    } else {      showToast(knownActivities.iterator().next(),"Unable to restart app");      if (Log.isLoggable(LOG_TAG,Log.VERBOSE)) {        Log.v(LOG_TAG,"Couldn't find any foreground activities to restart " + "for resource refresh");      }    }    System.exit(0);  }}  }
class C{  public WeakKeyReference(Object key,ReferenceQueue refQueue){  super(key,refQueue);  hashCode=key.hashCode();}  }
class C{  private void switchToTab(int tabOffset){  String currentTab=webDriver.getWindowHandle();  List<String> openedTabs=new ArrayList<>(webDriver.getWindowHandles());  if (openedTabs.size() > 1) {    int currentTabIndex=openedTabs.indexOf(currentTab);    int tabToOpenIndex=(openedTabs.size() + currentTabIndex + tabOffset) % openedTabs.size();    webDriver.switchTo().window(openedTabs.get(tabToOpenIndex));  } else {    throw new IllegalStateException("There is no tab to switch");  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_EXCEED_SUCCEED(DescriptionId nameId){  return new SM_SYSTEM_MESSAGE(1402657,new Object[]{nameId});}  }
class C{  public DistributedLogClientBuilder clientId(ClientId clientId){  DistributedLogClientBuilder newBuilder=newBuilder(this);  newBuilder._clientId=clientId;  return newBuilder;}  }
class C{  private static void debugPrintln(String msg){  if (DEBUG) {    System.err.println("XERCES: " + msg);  }}  }
class C{  private void toWagonFormat(FloatLeafNode node,DataOutputStream out,String extension,PrintWriter pw) throws IOException {  String s="((" + node.getStDeviation() + " "+ node.getMean()+ "))";  if (out != null) {    writeStringToOutput(s,out);  } else {  }  if (pw != null) {    pw.println(s);  }}  }
class C{  public int length(){  return Graph.getEdgesCount();}  }
class C{  public static String trimEnd(String value,int length){  if (value == null || length > value.length()) {    return EMPTY;  }  return value.substring(0,value.length() - length);}  }
class C{  public static NotEqualsSpacePredicate notEqual(Object value){  return new NotEqualsSpacePredicate(value);}  }
class C{  public ItemToMaterialCursor queryItemsForMaterial(long mat_item_id){  return mHelper.queryItemsForMaterial(mat_item_id);}  }
class C{  private void typeUnknown(char c){  int converted=KeyEvent.getExtendedKeyCodeForChar(c);  controller.keyPress(converted);  controller.keyRelease(converted);}  }
class C{  private ODEStateAndDerivative state(double t){  return new ODEStateAndDerivative(t,new double[0],new double[0]);}  }
class C{  public static void println(float x){  out.println(x);}  }
class C{  public FaveGetLinksQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public Vector3f mult(Vector3f vec){  if (null == vec) {    logger.warning("Provided vector is null, null returned.");    return null;  }  return mult(vec,null);}  }
class C{  public Dfp power10K(final int e){  Dfp d=newInstance(getOne());  d.exp=e + 1;  return d;}  }
class C{  public static ToolbarTapTarget forToolbarOverflow(android.widget.Toolbar toolbar,CharSequence title,@Nullable CharSequence description){  return new ToolbarTapTarget(toolbar,false,title,description);}  }
class C{  public void initPBLocations(){  int terminalID, height;  for (  CTNode node : n_termainals) {    terminalID=node.getTerminalID();    height=0;    node.setPBLocation(terminalID,height);    while (node.hasParent() && node.getParent().getPBLocation() == null) {      node=node.getParent();      node.setPBLocation(terminalID,++height);    }  }}  }
class C{  public GroupsEditQuery marketCurrency(GroupsEditMarketCurrency value){  return unsafeParam("market_currency",value);}  }
class C{  public static void cleanDirectory(File directory) throws IOException {  if (!directory.exists()) {    String message=directory + " does not exist";    throw new IllegalArgumentException(message);  }  if (!directory.isDirectory()) {    String message=directory + " is not a directory";    throw new IllegalArgumentException(message);  }  File[] files=directory.listFiles();  if (files == null) {    throw new IOException("Failed to list contents of " + directory);  }  IOException exception=null;  for (  File file : files) {    try {      forceDelete(file);    } catch (    IOException ioe) {      exception=ioe;    }  }  if (null != exception) {    throw exception;  }}  }
class C{  public List<ScanRange> unwrapped(){  if (compare(_from,_to) < 0) {    return ImmutableList.of(this);  }  ImmutableList.Builder<ScanRange> ranges=ImmutableList.builder();  if (compare(_from,MAX_VALUE) < 0) {    ranges.add(new ScanRange(_from,MAX_VALUE));  }  if (compare(_to,MIN_VALUE) > 0) {    ranges.add(new ScanRange(MIN_VALUE,_to));  }  return ranges.build();}  }
class C{  public IdQuery(Class<T> type,Object id,Object routing,QueryResultType queryResultType,int version){  this(type.getName(),id,routing,queryResultType,version);}  }
class C{  public boolean next() throws GenericDataSourceException {  try {    return _rs.next();  } catch (  SQLException sqle) {    throw new GenericDataSourceException("SQL Exception while executing the following:" + _sql,sqle);  }}  }
class C{  private Utils(){}  }
class C{  public void clearAll(){  nodeToPreds.clear();  nodeToSuccs.clear();  edgeToLabels.clear();  labelToEdges.clear();  heads.clear();  tails.clear();}  }
class C{  @SuppressWarnings("unchecked") void updateBoxes(){  Value val=stackOrValue();  if (boxes instanceof List) {    for (    ValueBox vb : (List<ValueBox>)boxes)     vb.setValue(val);  } else   if (boxes instanceof ValueBox) {    ((ValueBox)boxes).setValue(val);  }}  }
class C{  protected void draw(Graphics2D gc,Dimension size){  if (!chartViewer.isTranspose())   drawLegend(gc,size); else   drawLegendTransposed(gc,size);}  }
class C{  public MessagesGetHistoryQuery startMessageId(Integer value){  return unsafeParam("start_message_id",value);}  }
class C{  @Override public void shutdown() throws RemoteException {  shutdown(false,true);}  }
class C{  @Nullable public static Document createEmptyPlainDocument(){  return createNewDocumentBuilder().newDocument();}  }
class C{  private void callGraphDFS(int s){  int t;  CgEdge p;  vis_cg[s]=low_cg[s]=pre_cnt++;  queue_cg.addLast(s);  p=call_graph[s];  while (p != null) {    t=p.t;    if (vis_cg[t] == 0)     callGraphDFS(t);    if (low_cg[t] < low_cg[s])     low_cg[s]=low_cg[t];    p=p.next;  }  if (low_cg[s] < vis_cg[s]) {    scc_size[s]=1;    return;  }  scc_size[s]=queue_cg.size();  do {    t=queue_cg.getLast();    queue_cg.removeLast();    rep_cg[t]=s;    low_cg[t]+=n_func;  } while (s != t);  scc_size[s]-=queue_cg.size();  if (scc_size[s] > max_scc_size) {    max_scc_size=scc_size[s];    max_scc_id=s;  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FIELDABYSS_REPAIR_BROKEN(String value1,String value0){  return new SM_SYSTEM_MESSAGE(1400308,value1,value0);}  }
class C{  @Override public void createIndicesForNewExperiment(NewExperiment newExperiment){  updateExperimentLabelIndex(newExperiment.getID(),newExperiment.getApplicationName(),newExperiment.getLabel(),newExperiment.getStartTime(),newExperiment.getEndTime(),State.DRAFT);  try {    updateStateIndex(null,newExperiment.getID(),ExperimentsKeyspace.ExperimentStateIndexKey.NOT_DELETED);  } catch (  ConnectionException e) {    removeExperimentLabelIndex(newExperiment.getApplicationName(),newExperiment.getLabel());    throw new RepositoryException("Could not update indices for experiment \"" + newExperiment + "\"",e);  }}  }
class C{  protected StmtBody(){}  }
class C{  public TagAllocationModel(){  this.ntw=new SparseCounter<String>();  this.nw=new Counter<String>();}  }
class C{  public void init$Children(){  children=new ASTNode[2];  setChild(new List(),1);}  }
class C{  private void moveToNextStatMessage(){  secondCounter=0;  statMessageIndex++;  if (statMessageIndex == STATS_MESSAGES) {    statMessageIndex=0;  }  int retries=0;  while (!refreshStatsMessage(false) && retries < STATS_MESSAGES) {    statMessageIndex++;    if (statMessageIndex == STATS_MESSAGES) {      statMessageIndex=0;    }    retries++;  }}  }
class C{  public UshrExpr newUshrExpr(Value op1,Value op2){  return new GUshrExpr(op1,op2);}  }
class C{  public static boolean isBypass(final MultivaluedMap<String,String> headers){  return BYPASS_HEADER_VALUE.equals(headers.getFirst(BYPASS_HEADER_NAME));}  }
class C{  public void onProjectSyncCompletion(){  if (lastGradleSyncFailed(myProject) && myUsingCachedProjectData) {    myUsingCachedProjectData=false;    GradleProjectImporter.getInstance().requestProjectSync(myProject,null);    reset();    return;  }  ProjectSyncMessages messages=ProjectSyncMessages.getInstance(myProject);  messages.reportDependencySetupErrors();  messages.reportComponentIncompatibilities();  findAndReportStructureIssues(myProject);  ModuleManager moduleManager=ModuleManager.getInstance(myProject);  for (  Module module : moduleManager.getModules()) {    if (!hasCorrectJdkVersion(module)) {      break;    }  }  if (hasErrors(myProject) || lastGradleSyncFailed(myProject)) {    addSdkLinkIfNecessary();    checkSdkToolsVersion(myProject);    updateGradleSyncState();    return;  }  AndroidGradleModelVersions modelVersions=AndroidGradleModelVersions.find(myProject);  if (modelVersions == null) {    Logger.getInstance(PostProjectSetupTasksExecutor.class).warn("Unable to obtain application's Android Project");  } else {    log(modelVersions);  }  if ((modelVersions != null && previewForcedToUpgrade(modelVersions)) || myProject.isDisposed()) {    return;  }  GradleVersion currentModelVersion=null;  GradleVersion latestModelVersion=null;  if (modelVersions != null) {    currentModelVersion=modelVersions.getCurrent();    latestModelVersion=modelVersions.getLatest();  }  GradleVersion gradleVersion=getGradleVersion(myProject);  if (modelVersions != null && shouldRecommendUpgrade(latestModelVersion,currentModelVersion,gradleVersion)) {    boolean userAcceptsUpgrade=new PluginVersionRecommendedUpdateDialog(myProject,currentModelVersion,latestModelVersion).showAndGet();    if (userAcceptsUpgrade) {      if (updateGradlePluginVersion(modelVersions.getLatest(),modelVersions.isExperimentalPlugin())) {        return;      }    }  }  new ProjectStructureUsageTracker(myProject).trackProjectStructure();  executeProjectChanges(myProject,null);  enforceExternalBuild(myProject);  AndroidGradleProjectComponent.getInstance(myProject).checkForSupportedModules();  findAndShowVariantConflicts();  checkSdkToolsVersion(myProject);  addSdkLinkIfNecessary();  TestArtifactSearchScopes.initializeScopes(myProject);  String taskName=isAndroidStudio() ? MakeBeforeRunTaskProvider.TASK_NAME : ExecutionBundle.message("before.launch.compile.step");  setMakeStepInJunitRunConfigurations(taskName);  updateGradleSyncState();  if (myGenerateSourcesAfterSync) {    if (!myCleanProjectAfterSync) {      Map<String,GradleVersion> previousPluginVersionsPerModule=getPluginVersionsPerModule(myProject);      storePluginVersionsPerModule(myProject);      if (previousPluginVersionsPerModule != null && !previousPluginVersionsPerModule.isEmpty()) {        Map<String,GradleVersion> currentPluginVersionsPerModule=getPluginVersionsPerModule(myProject);        assert currentPluginVersionsPerModule != null;        for (        Map.Entry<String,GradleVersion> entry : currentPluginVersionsPerModule.entrySet()) {          String modulePath=entry.getKey();          GradleVersion previous=previousPluginVersionsPerModule.get(modulePath);          if (previous == null || entry.getValue().compareTo(previous) != 0) {            myCleanProjectAfterSync=true;            break;          }        }      }    }    GradleProjectBuilder.getInstance(myProject).generateSourcesOnly(myCleanProjectAfterSync);  }  reset();  TemplateManager.getInstance().refreshDynamicTemplateMenu(myProject);  disposeModulesMarkedForRemoval();}  }
class C{  private void addWhitespace(){  int oldPos=pos - 1;  while (pos < buffer.length) {switch (buffer[pos]) {case ' ':case '\t':case '\r':      pos++;    break;default :  addToken(TokenKind.WHITESPACE,oldPos,pos,bufferSlice(oldPos,pos));return;}}addToken(TokenKind.WHITESPACE,oldPos,pos,bufferSlice(oldPos,pos));}  }
class C{  @Override public List<CentroidCluster<T>> cluster(final Collection<T> points) throws MathIllegalArgumentException, MathIllegalStateException {  List<CentroidCluster<T>> best=null;  double bestVarianceSum=Double.POSITIVE_INFINITY;  for (int i=0; i < numTrials; ++i) {    List<CentroidCluster<T>> clusters=clusterer.cluster(points);    final double varianceSum=evaluator.score(clusters);    if (evaluator.isBetterScore(varianceSum,bestVarianceSum)) {      best=clusters;      bestVarianceSum=varianceSum;    }  }  return best;}  }
class C{  @Override public boolean isDataPresent(){  return true;}  }
class C{  public void add(final int location,final T object){  this.data.add(location,object);  this.notifyItemInserted(location);}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  executeImmediately(getSyntax());}  }
class C{  public SecureSetCounterQuery(VkApiClient client,ServiceActor actor){  super(client,"secure.setCounter",OkResponse.class);  accessToken(actor.getAccessToken());  clientSecret(actor.getClientSecret());}  }
class C{  public UpdateLeaseSpaceOperationResult(){}  }
class C{  @Override public ThetaSketchSetOperationPostAggregation withFields(List<PostAggregation> fields){  return new ThetaSketchSetOperationPostAggregation(getName(),getFunc(),fields,getSize());}  }
class C{  @Override public Fraction subtract(Fraction fraction){  return addSub(fraction,false);}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);}  }
class C{  @Override public RuleEngineExecutionResult execute(DmnDefinition decisionDefinition,Map<String,Object> executionVariables,Map<String,Method> customExpressionFunctions,Map<Class<?>,PropertyHandler> propertyHandlers){  if (decisionDefinition == null) {    throw new IllegalArgumentException("no decision provided");  }  if (decisionDefinition.getCurrentDecisionTable() == null) {    throw new IllegalArgumentException("no decision table present in definition");  }  MvelExecutionContext executionContext=MvelExecutionContextBuilder.build(decisionDefinition,executionVariables,customExpressionFunctions,propertyHandlers);  Map<String,Object> resultVariables=evaluateDecisionTable(decisionDefinition.getCurrentDecisionTable(),executionContext);  executionContext.getAuditContainer().stopAudit(resultVariables);  RuleEngineExecutionResult executionResult=new RuleEngineExecutionResult(resultVariables,executionContext.getAuditContainer());  return executionResult;}  }
class C{  public boolean isGuideline(){  return mConstraintWidget instanceof Guideline;}  }
class C{  public static boolean isHttpStatusCode(Throwable throwable,int statusCode){  return throwable instanceof HttpException && ((HttpException)throwable).code() == statusCode;}  }
class C{  @SuppressLint("SetTextI18n") @Override public void onRequestStatsSuccess(Call<PhotoStats> call,Response<PhotoStats> response){  if (response.isSuccessful() && response.body() != null) {    likeNum.setText(response.body().likes + " LIKES");    viewNum.setText(response.body().views + " VIEWS");    downloadNum.setText(response.body().downloads + " DOWNLOADS");    setState(SUCCESS_STATE);  } else   if (Integer.parseInt(response.headers().get("X-Ratelimit-Remaining")) < 0) {    dismiss();    RateLimitDialog dialog=new RateLimitDialog();    dialog.show(getFragmentManager(),null);  } else {    service.requestStats(photo.id,this);  }}  }
class C{  private boolean canUserAccessSource(User user,OrganisationUnit source){  for (  OrganisationUnit o : user.getOrganisationUnits()) {    if (source == o || source.getAncestors().contains(o)) {      return true;    }  }  return false;}  }
class C{  public static <T extends RealFieldElement<T>>T dotProduct(final FieldVector3D<T> v1,final FieldVector3D<T> v2){  return v1.dotProduct(v2);}  }
class C{  public static boolean hasColumn(String tableName){switch (tableName) {case COLUMN_NUMBER:    return true;default :  return false;}}  }
class C{  public static void computeApprox(TreeSet<TypeVariableBV> workList) throws TypeException {  while (workList.size() > 0) {    TypeVariableBV var=workList.first();    workList.remove(var);    var.fixApprox(workList);  }}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  @Override public Object generate(Object target,Method method,Object... params){  return generateKey(method,params);}  }
class C{  protected void parseAndAdd(Map lexicon,String line){  StringTokenizer tokenizer=new StringTokenizer(line,"\t");  String phones=null;  String wordAndPos=tokenizer.nextToken();  String pos=wordAndPos.substring(wordAndPos.length() - 1);  if (!partsOfSpeech.contains(pos)) {    partsOfSpeech.add(pos);  }  if (tokenizer.hasMoreTokens()) {    phones=tokenizer.nextToken();  }  if ((phones != null) && (tokenizeOnLoad)) {    lexicon.put(wordAndPos,getPhones(phones));  } else   if (phones == null) {    lexicon.put(wordAndPos,NO_PHONES);  } else {    lexicon.put(wordAndPos,phones);  }}  }
class C{  @Override public AudioInputStream synthesizeUsingImposedF0(int sourceIndex,int targetIndex,AudioFileFormat aft) throws SynthesisException {  if (!f0ContourImposeSupport) {    throw new SynthesisException("Mary configuration of this voice doesn't support intonation contour imposition");  }  int numberOfUnits=vHNMFeaturesReader.getNumberOfUnits();  if (sourceIndex >= numberOfUnits || targetIndex >= numberOfUnits) {    throw new IllegalArgumentException("sourceIndex(" + sourceIndex + ") and targetIndex("+ targetIndex+ ") are should be less than number of available units ("+ numberOfUnits+ ")");  }  double[] sourceF0=this.vIntonationReader.getContour(sourceIndex);  double[] targetF0coeffs=this.vIntonationReader.getIntonationCoeffs(targetIndex);  double[] sourceF0coeffs=this.vIntonationReader.getIntonationCoeffs(sourceIndex);  if (targetF0coeffs == null || sourceF0coeffs == null) {    return reSynthesize(sourceIndex,aft);  }  if (targetF0coeffs.length == 0 || sourceF0coeffs.length == 0) {    return reSynthesize(sourceIndex,aft);  }  double[] targetF0=Polynomial.generatePolynomialValues(targetF0coeffs,sourceF0.length,0,1);  sourceF0=Polynomial.generatePolynomialValues(sourceF0coeffs,sourceF0.length,0,1);  assert targetF0.length == sourceF0.length;  float[] tScalesArray={1.0f};  float[] tScalesTimes={1.0f};  float[] pScalesArray=new float[targetF0.length];  float[] pScalesTimes=new float[targetF0.length];  double skipSizeInSeconds=this.vIntonationReader.getSkipSizeInSeconds();  double windowSizeInSeconds=this.vIntonationReader.getWindowSizeInSeconds();  for (int i=0; i < targetF0.length; i++) {    pScalesArray[i]=(float)(targetF0[i] / sourceF0[i]);    pScalesTimes[i]=(float)(i * skipSizeInSeconds + 0.5 * windowSizeInSeconds);  }  return synthesizeUsingF0Modification(sourceIndex,pScalesArray,pScalesTimes,tScalesArray,tScalesTimes,aft);}  }
class C{  public static SharePasswordDialogFragment newInstance(OCFile file,boolean createShare){  SharePasswordDialogFragment frag=new SharePasswordDialogFragment();  Bundle args=new Bundle();  args.putParcelable(ARG_FILE,file);  args.putBoolean(ARG_CREATE_SHARE,createShare);  frag.setArguments(args);  return frag;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DispelDeBuffPhysical_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200817,skillcaster,skillname);}  }
class C{  @Inject public EventLogSystem(EventLog eventLog){  eventLogThread=new Thread(eventLog);  eventLogThread.setName("EventLogThread");}  }
class C{  public void closeQQClient(){  if (null == xiaoV) {    return;  }  try {    xiaoV.close();  } catch (  final Exception e) {    LOGGER.log(Level.ERROR,"Closes QQ client failed",e);  }}  }
class C{  public boolean isByteFeature(int index){  return 0 <= index && index < numByteFeatures;}  }
class C{  public KendallsCorrelation(double[][] data){  this(MatrixUtils.createRealMatrix(data));}  }
class C{  private boolean isSentenceEnd(int index){  FeatureVector fv=features.getFeatureVector(index);  return fv.getByteFeature(fiSentenceEnd) == 0 && fv.getByteFeature(fiWordEnd) == 0 && (!isHalfphone || fv.getByteFeature(fiLR) == fvLR_R);}  }
class C{  @Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){  int width=resolveSize(mDesiredWidth,widthMeasureSpec);  int height;  if (width == mDesiredWidth) {    height=mDesiredHeight;  } else {    height=Math.round((float)mDesiredHeight / mDesiredWidth * width);    height=resolveSize(height,heightMeasureSpec);  }  super.onMeasure(MeasureSpec.makeMeasureSpec(width,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(height,MeasureSpec.EXACTLY));}  }
class C{  public VideoCreateCommentQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  @Override public boolean isSingleton(){  return true;}  }
class C{  private void recurseMini(FloatBuffer points,int p,int b,int ap){  Vector3f tempA=Vector3f.newInstance();  Vector3f tempB=Vector3f.newInstance();  Vector3f tempC=Vector3f.newInstance();  Vector3f tempD=Vector3f.newInstance();  try {switch (b) {case 0:      this.radius=0;    this.center.set(0,0,0);  break;case 1:this.radius=1f - RADIUS_EPSILON;BufferUtils.populateFromBuffer(center,points,ap - 1);break;case 2:BufferUtils.populateFromBuffer(tempA,points,ap - 1);BufferUtils.populateFromBuffer(tempB,points,ap - 2);setSphere(tempA,tempB);break;case 3:BufferUtils.populateFromBuffer(tempA,points,ap - 1);BufferUtils.populateFromBuffer(tempB,points,ap - 2);BufferUtils.populateFromBuffer(tempC,points,ap - 3);setSphere(tempA,tempB,tempC);break;case 4:BufferUtils.populateFromBuffer(tempA,points,ap - 1);BufferUtils.populateFromBuffer(tempB,points,ap - 2);BufferUtils.populateFromBuffer(tempC,points,ap - 3);BufferUtils.populateFromBuffer(tempD,points,ap - 4);setSphere(tempA,tempB,tempC,tempD);return;}for (int i=0; i < p; i++) {BufferUtils.populateFromBuffer(tempA,points,i + ap);if (tempA.distanceSquared(center) - (radius * radius) > RADIUS_EPSILON - 1f) {for (int j=i; j > 0; j--) {BufferUtils.populateFromBuffer(tempB,points,j + ap);BufferUtils.populateFromBuffer(tempC,points,j - 1 + ap);BufferUtils.setInBuffer(tempC,points,j + ap);BufferUtils.setInBuffer(tempB,points,j - 1 + ap);}recurseMini(points,i,b + 1,ap + 1);}}}  finally {Vector3f.recycle(tempA);Vector3f.recycle(tempB);Vector3f.recycle(tempC);Vector3f.recycle(tempD);}}  }
class C{  public void registerKey(SelectionKey key){  if (key == null)   return;  _keysToEnable.add(key);  _keysToEnableCounter.incrementAndGet();  getSelector().wakeup();}  }
class C{  private void logSlowRequests(long requestLifetime,Request<?> request,byte[] responseContents,StatusLine statusLine){  if (DEBUG || requestLifetime > SLOW_REQUEST_THRESHOLD_MS) {    VolleyLog.d("HTTP response for request=<%s> [lifetime=%d], [size=%s], " + "[rc=%d], [retryCount=%s]",request,requestLifetime,responseContents != null ? responseContents.length : "null",statusLine.getStatusCode(),request.getRetryPolicy().getCurrentRetryCount());  }}  }
class C{  private void send(Response response,AsyncResponse asyncResponse){  if (RequestLog.isStarted(RESPONSE_WORKFLOW_TIMER)) {    RequestLog.stopTiming(RESPONSE_WORKFLOW_TIMER);  }  asyncResponse.resume(response);}  }
class C{  public String hash(String contents){  int hashLength=20;  if (contents.length() == 0) {    return Strings.padStart("",hashLength,'0');  }  String allowedCharacters="BCDFGHIJKLMNOPQRSUVWXYZbcdfghijklmnopqrsuvwxyz1234567890";  Joiner joiner=Joiner.on("").skipNulls();  String toHash=joiner.join(Splitter.on(' ').trimResults().omitEmptyStrings().split(contents));  for (int i=0; i < toHash.length(); i++) {    char c=toHash.charAt(i);    if (allowedCharacters.indexOf(c) != -1) {    }  }  return "";}  }
class C{  public static Uuid generate(){synchronized (lock) {    if (secureRandom == null) {      secureRandom=new SecureRandom();    }  }  long bits0=secureRandom.nextLong();  long bits1=secureRandom.nextLong();  bits0&=0xFFFFFFFFFFFF0FFFL;  bits0|=0x0000000000004000L;  bits1&=0x3FFFFFFFFFFFFFFFL;  bits1|=0x8000000000000000L;  return create(bits0,bits1);}  }
class C{  public static void postfilter_mgc(double mgc[],int m,double alpha,double beta){  if (beta > 0.0 && m > 1) {    double[] postfilter_buff=new double[m + 1];    mc2b(mgc,postfilter_buff,m,alpha);    double e1=b2en(postfilter_buff,m,alpha);    postfilter_buff[1]-=beta * alpha * mgc[2];    for (int k=2; k < m; k++)     postfilter_buff[k]*=(1.0 + beta);    double e2=b2en(postfilter_buff,m,alpha);    postfilter_buff[0]+=Math.log(e1 / e2) / 2;    b2mc(postfilter_buff,mgc,m,alpha);  }}  }
class C{  public Value stringLength(Value str){  throw new RuntimeException("Unsupported operation.");}  }
class C{  public Pokestop(PokemonGo api,FortDataOuterClass.FortData fortData){  this.api=api;  this.fortData=fortData;  this.cooldownCompleteTimestampMs=fortData.getCooldownCompleteTimestampMs();}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public void initialize() throws CarbonSortKeyAndGroupByException {  this.recordHolderList=new Object[parameters.getSortBufferSize()][];  deleteSortLocationIfExists();  if (!new File(parameters.getTempFileLocation()).mkdirs()) {    LOGGER.info("Sort Temp Location Already Exists");  }  this.dataSorterAndWriterExecutorService=Executors.newFixedThreadPool(parameters.getNumberOfCores());  semaphore=new Semaphore(parameters.getNumberOfCores());}  }
class C{  public static Map<String,String> extractHiveTypeMapping(JobConf jobConf){  Map<String,String> map=new HashMap<>();  String columnsString=jobConf.get(serdeConstants.LIST_COLUMNS);  if (columnsString == null || columnsString.isEmpty()) {    LOG.warn("List of columns was not provided in job configuration");    return map;  }  String[] columns=columnsString.split(",");  String[] types=splitStructs(jobConf.get(serdeConstants.LIST_COLUMN_TYPES),',');  if (types == null) {    LOG.warn("Invalid input for LIST_COLUMN_TYPES");    return map;  }  if (columns.length != types.length) {    LOG.warn("Expected " + columns.length + " types but found "+ types.length);    return map;  }  for (int i=0; i < columns.length; i++) {    map.put(columns[i],types[i]);  }  LOG.debug("Hive columns to types mapping: " + map);  return map;}  }
class C{  public int length(){  return Histogram.length() + Graph.length();}  }
class C{  public static byte[] decode(char[] in,int iOff,int iLen){  if (iLen % 4 != 0)   throw new IllegalArgumentException("Length of Base64 encoded input string is not a multiple of 4.");  while (iLen > 0 && in[iOff + iLen - 1] == '=')   iLen--;  int oLen=(iLen * 3) / 4;  byte[] out=new byte[oLen];  int ip=iOff;  int iEnd=iOff + iLen;  int op=0;  while (ip < iEnd) {    int i0=in[ip++];    int i1=in[ip++];    int i2=ip < iEnd ? in[ip++] : 'A';    int i3=ip < iEnd ? in[ip++] : 'A';    if (i0 > 127 || i1 > 127 || i2 > 127 || i3 > 127)     throw new IllegalArgumentException("Illegal character in Base64 encoded data.");    int b0=map2[i0];    int b1=map2[i1];    int b2=map2[i2];    int b3=map2[i3];    if (b0 < 0 || b1 < 0 || b2 < 0 || b3 < 0)     throw new IllegalArgumentException("Illegal character in Base64 encoded data.");    int o0=(b0 << 2) | (b1 >>> 4);    int o1=((b1 & 0xf) << 4) | (b2 >>> 2);    int o2=((b2 & 3) << 6) | b3;    out[op++]=(byte)o0;    if (op < oLen)     out[op++]=(byte)o1;    if (op < oLen)     out[op++]=(byte)o2;  }  return out;}  }
class C{  public void assignBaseObjId(int baseObjId){  this.baseObjId=baseObjId;}  }
class C{  public void onPrepared(MediaPlayer player){  this.player.setOnCompletionListener(this);  this.seekToPlaying(this.seekOnPrepared);  if (!this.prepareOnly) {    this.player.start();    this.setState(STATE.MEDIA_RUNNING);    this.seekOnPrepared=0;  } else {    this.setState(STATE.MEDIA_STARTING);  }  this.duration=getDurationInSeconds();  this.prepareOnly=true;  sendStatusChange(MEDIA_DURATION,null,this.duration);}  }
class C{  public FilterImageTransform(String filters,int width,int height,int channels){  super(null);  int pixelFormat=channels == 1 ? AV_PIX_FMT_GRAY8 : channels == 3 ? AV_PIX_FMT_BGR24 : channels == 4 ? AV_PIX_FMT_RGBA : AV_PIX_FMT_NONE;  if (pixelFormat == AV_PIX_FMT_NONE) {    throw new IllegalArgumentException("Unsupported number of channels: " + channels);  }  try {    filter=new FFmpegFrameFilter(filters,width,height);    filter.setPixelFormat(pixelFormat);    filter.start();  } catch (  FrameFilter.Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public boolean catchableAsAllOf(ThrowableSet set,List<RefType> members){  boolean result=true;  for (  RefType member : members) {    result=result && set.catchableAs(member);  }  return result;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_COMBINE_CANT_USE(String value0){  return new SM_SYSTEM_MESSAGE(1330042,value0);}  }
class C{  public DatabaseGetCitiesQuery(VkApiClient client,int countryId){  super(client,"database.getCities",GetCitiesResponse.class);  countryId(countryId);}  }
class C{  public static byte[] decode(String s){  ByteArrayOutputStream bos=new ByteArrayOutputStream();  try {    decode(s,bos);  } catch (  IOException e) {    throw new RuntimeException();  }  byte[] decodedBytes=bos.toByteArray();  try {    bos.close();    bos=null;  } catch (  IOException ex) {    System.err.println("Error while decoding BASE64: " + ex.toString());  }  return decodedBytes;}  }
class C{  @JsonIgnore public boolean isValueDeadbandEnabled(){  return this.valueDeadbandType != DataTagDeadband.DEADBAND_NONE;}  }
class C{  public void verifyPostAjax(ExpectedCondition condition){  authorLoader.verifyIsHidden();  verify(condition,Timeouts.MEDIUM);}  }
class C{  private void initWidget(){  this.handler=new SafeHandler<>(this);  StatusBarView statusBar=(StatusBarView)findViewById(R.id.activity_introduce_statusBar);  if (DisplayUtils.isNeedSetStatusBarMask()) {    statusBar.setBackgroundResource(R.color.colorPrimary_light);    statusBar.setMask(true);  }  ImageButton backBtn=(ImageButton)findViewById(R.id.activity_introduce_backBtn);  if (Mysplash.getInstance().isLightTheme()) {    backBtn.setImageResource(R.drawable.ic_close_light);  } else {    backBtn.setImageResource(R.drawable.ic_close_dark);  }  backBtn.setOnClickListener(this);  this.container=(CoordinatorLayout)findViewById(R.id.activity_introduce_container);  this.button=(Button)findViewById(R.id.activity_introduce_button);  button.setOnClickListener(this);  setBottomButtonStyle(0);  initPage();  InkPageIndicator indicator=(InkPageIndicator)findViewById(R.id.activity_introduce_indicator);  indicator.setViewPager(viewPager);}  }
class C{  @Override public Dfp remainder(final Dfp d){  final Dfp result=this.subtract(this.divide(d).rint().multiply(d));  if (result.mant[mant.length - 1] == 0) {    result.sign=sign;  }  return result;}  }
class C{  @Deployment public void testVariableUpdateOrderHistoricTaskInstance() throws Exception {  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("historicTask");  Task task=taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();  assertNotNull(task);  for (int i=0; i < 10; i++) {    taskService.setVariableLocal(task.getId(),"taskVar",i);    runtimeService.setVariable(task.getExecutionId(),"procVar",i);  }  taskService.complete(task.getId());  HistoricTaskInstance taskInstance=historyService.createHistoricTaskInstanceQuery().taskId(task.getId()).includeProcessVariables().singleResult();  Object varValue=taskInstance.getProcessVariables().get("procVar");  assertEquals(9,varValue);  taskInstance=historyService.createHistoricTaskInstanceQuery().taskId(task.getId()).includeTaskLocalVariables().singleResult();  varValue=taskInstance.getTaskLocalVariables().get("taskVar");  assertEquals(9,varValue);}  }
class C{  @Override public Grammar loadGrammar(XMLInputSource source) throws IOException, XNIException {  reset(fLoaderConfig);  fSettingsChanged=false;  XSDDescription desc=new XSDDescription();  desc.fContextType=XSDDescription.CONTEXT_PREPARSE;  desc.setBaseSystemId(source.getBaseSystemId());  desc.setLiteralSystemId(source.getSystemId());  Hashtable locationPairs=new Hashtable();  processExternalHints(fExternalSchemas,fExternalNoNSSchema,locationPairs,fErrorReporter);  SchemaGrammar grammar=loadSchema(desc,source,locationPairs);  if (grammar != null && fGrammarPool != null) {    fGrammarPool.cacheGrammars(XMLGrammarDescription.XML_SCHEMA,fGrammarBucket.getGrammars());    if (fIsCheckedFully && fJAXPCache.get(grammar) != grammar) {      XSConstraints.fullSchemaChecking(fGrammarBucket,fSubGroupHandler,fCMBuilder,fErrorReporter);    }  }  return grammar;}  }
class C{  public void addSink(Set<SourceSinkDefinition> sinks){  for (  SourceSinkDefinition am : sinks)   this.sinkMethods.put(am.getMethod().getSignature(),am);}  }
class C{  public static void handleError(Shell shell,Exception exception,String title,String message){  IStatus status=null;  boolean log=false;  boolean dialog=false;  Throwable t=exception;  if (exception instanceof TeamException) {    status=((TeamException)exception).getStatus();    log=false;    dialog=true;  } else   if (exception instanceof InvocationTargetException) {    t=((InvocationTargetException)exception).getTargetException();    if (t instanceof TeamException) {      status=((TeamException)t).getStatus();      log=false;      dialog=true;    } else     if (t instanceof CoreException) {      status=((CoreException)t).getStatus();      log=true;      dialog=true;    } else     if (t instanceof InterruptedException) {      return;    } else {      status=new Status(IStatus.ERROR,SVNUIPlugin.ID,1,Policy.bind("TeamAction.internal"),t);      log=true;      dialog=true;    }  }  if (status == null)   return;  if (!status.isOK()) {    IStatus toShow=status;    if (status.isMultiStatus()) {      IStatus[] children=status.getChildren();      if (children.length == 1) {        toShow=children[0];      }    }    if (title == null) {      title=status.getMessage();    }    if (message == null) {      message=status.getMessage();    }    if (dialog && shell != null) {      ErrorDialog.openError(shell,title,message,toShow);    }    if (log || shell == null) {      SVNUIPlugin.log(toShow.getSeverity(),message,t);    }  }}  }
class C{  public boolean isCauseOf(Exception exception){  return TaggedIOException.isTaggedWith(exception,tag);}  }
class C{  protected LikesDeleteQuery itemId(int value){  return unsafeParam("item_id",value);}  }
class C{  @Override public int read() throws IOException {  int ch=super.read();  if (ch != -1) {    branch.write(ch);  }  return ch;}  }
class C{  void resume(){  paused.set(false);synchronized (pauseLock) {    pauseLock.notifyAll();  }}  }
class C{  @Override public List<byte[]> read(long startOffset) throws IOException {  List<CarbonDictionaryColumnMetaChunk> carbonDictionaryColumnMetaChunks=readDictionaryMetadataFile();  CarbonDictionaryColumnMetaChunk carbonDictionaryColumnMetaChunk=carbonDictionaryColumnMetaChunks.get(carbonDictionaryColumnMetaChunks.size() - 1);  long endOffset=carbonDictionaryColumnMetaChunk.getEnd_offset();  List<ColumnDictionaryChunk> columnDictionaryChunks=read(carbonDictionaryColumnMetaChunks,startOffset,endOffset);  return getDictionaryList(columnDictionaryChunks);}  }
class C{  public static HashSet MEC(ArrayList list){  HashSet EC=LUBType.EC(list);  if (EC.size() == 1)   return EC;  HashSet MEC=new HashSet();  for (Iterator iter=EC.iterator(); iter.hasNext(); ) {    TypeDecl V=(TypeDecl)iter.next();    boolean keep=true;    for (Iterator i2=EC.iterator(); i2.hasNext(); ) {      TypeDecl W=(TypeDecl)i2.next();      if (!(V instanceof TypeVariable) && V != W && W.instanceOf(V))       keep=false;    }    if (keep)     MEC.add(V);  }  return MEC;}  }
class C{  public MapComparator(List<? extends Object> keys){  this.keys=keys;}  }
class C{  public static synchronized void init(){  conf=Config.getConfig();  if (ds == null && !X.isEmpty(conf.getString("db.url",null))) {    DRIVER=conf.getString("db.driver",DRIVER);    URL=conf.getString("db.url",null);    USER=conf.getString("db.user",null);    PASSWD=conf.getString("db.passwd",null);    MAX_ACTIVE_NUMBER=conf.getInt("db.number",MAX_ACTIVE_NUMBER);    VALIDATION_SQL=conf.getString("db.validation.sql",VALIDATION_SQL);    ds=new BasicDataSource();    ds.setDriverClassName(DRIVER);    ds.setUrl(URL);    if (!X.isEmpty(USER))     ds.setUsername(USER);    if (!X.isEmpty(PASSWD))     ds.setPassword(PASSWD);    ds.setMaxActive(MAX_ACTIVE_NUMBER);    ds.setMaxIdle(MAX_ACTIVE_NUMBER);    ds.setMaxWait(MAX_WAIT_TIME);    ds.setDefaultReadOnly(false);    ds.setValidationQuery(null);    ds.setPoolPreparedStatements(true);  }}  }
class C{  public long parse(String t,String format){  if (t == null || "".equals(t))   return 0;  try {    SimpleDateFormat sdf=formats.get(format);    if (sdf == null) {      sdf=new SimpleDateFormat(format);      formats.put(format,sdf);    }    return sdf.parse(t).getTime();  } catch (  Exception e) {    log.error(t,e);  }  return 0;}  }
class C{  public void useCodebaseAnnotations(){  usingCodebaseAnnotations=true;}  }
class C{  private DefaultMutableTreeNode createSubDnNode(Dn dn,Token token){  DefaultMutableTreeNode node=new ComparableDefaultMutableTreeNode();  String label=isKeyValueView() ? token.getTokenValue() : token.getValue();  XNodeInfo userObject=new XNodeInfo(Type.NONMBEAN,label,label,token.getTokenValue());  node.setUserObject(userObject);  return node;}  }
class C{  public void addIterationListener(final IterationListener listener){  listeners.add(listener);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GATHER_LEARN_SKILL(String value0){  return new SM_SYSTEM_MESSAGE(1330054,value0);}  }
class C{  private void restoreCurrentItem(){  Bundle restoredBundle=savedInstanceState;  if (restoredBundle != null) {    if (restoredBundle.containsKey(CURRENT_SELECTED_ITEM_BUNDLE_KEY))     currentSelectedItem=restoredBundle.getInt(CURRENT_SELECTED_ITEM_BUNDLE_KEY,0);  }}  }
class C{  public WidgetsGetPagesQuery period(String value){  return unsafeParam("period",value);}  }
class C{  public WallGetQueryWithExtended filter(WallGetFilter value){  return unsafeParam("filter",value);}  }
class C{  public DefaultErrorHandler(PrintWriter out){  fOut=out;}  }
class C{  public BasicProxyPreparer(){  verify=false;  methodConstraintsSpecified=false;  methodConstraints=null;  permissions=new Permission[0];}  }
class C{  @Override public boolean isDataPresent(){  return SelectedSymbol.getInstance().hasStroke();}  }
class C{  public SimpleTimer(String name){  this.trigger=new SimpleTrigger(name,Scheduler.DEFAULT_GROUP);}  }
class C{  protected String checkCycles(){  myErrorMessage=null;  myHorizontalCycle=null;  myVerticalCycle=null;  if (checkCycle(myCurrentTopMatch,true) || checkCycle(myCurrentBottomMatch,true)) {  }  if (checkCycle(myCurrentLeftMatch,false) || checkCycle(myCurrentRightMatch,false)) {  }  return myErrorMessage;}  }
class C{  private KeyNavigationUtil(){}  }
class C{  @Override public PriorityQueue<E> clone(){  PriorityQueue<E> clonePQ=new PriorityQueue<E>();  clonePQ.size=size;  clonePQ.capacity=capacity;  clonePQ.elements=new ArrayList<E>(capacity);  clonePQ.priorities=new double[capacity];  if (size() > 0) {    clonePQ.elements.addAll(elements);    System.arraycopy(priorities,0,clonePQ.priorities,0,size());  }  return clonePQ;}  }
class C{  public PhotoInfoImplementor(PhotoInfoModel model,PhotoInfoView view){  this.model=model;  this.view=view;}  }
class C{  private void buildNumPagePanel(){  numPagePanel.setInitialClasses(TableCssName.NUM_PAGE_PANEL);  numPagePanel.setGrid("s12 m4 l3");  numPagePanel.setOffset("l3");  numPagePanel.add(listPages);  numPagePanel.add(pageLabel);  add(numPagePanel);}  }
class C{  @Override protected void endNamespaceScope(QName element,Augmentations augs,boolean isEmpty) throws XNIException {  String eprefix=element.prefix != null ? element.prefix : XMLSymbols.EMPTY_STRING;  element.uri=fNamespaceContext.getURI(eprefix);  if (element.uri != null) {    element.prefix=eprefix;  }  if (fDocumentHandler != null) {    if (!isEmpty) {      fDocumentHandler.endElement(element,augs);    }  }  fNamespaceContext.popContext();}  }
class C{  @Override public void printStackTrace(final PrintStream out){synchronized (out) {    PrintWriter pw=new PrintWriter(out,false);    printStackTrace(pw);    pw.flush();  }}  }
class C{  public static boolean isConnectedWifi(Context context){  NetworkInfo info=Connectivity.getNetworkInfo(context);  return (info != null && info.isConnected() && info.getType() == ConnectivityManager.TYPE_WIFI);}  }
class C{  public DatabaseGetFacultiesQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  public ItemCursor queryItems(){  QueryHelper qh=new QueryHelper();  qh.Distinct=true;  qh.Table=S.TABLE_ITEMS;  qh.Columns=null;  qh.Selection=null;  qh.SelectionArgs=null;  qh.GroupBy=null;  qh.Having=null;  qh.OrderBy=S.COLUMN_ITEMS_ID;  qh.Limit=null;  return new ItemCursor(wrapHelper(qh));}  }
class C{  @Override public void onMapReady(GoogleMap googleMap){  this.annotationViewWrapper=(AnnotationViewWrapper)this.getView().findViewById(R.id.annotationViewWrapper);  this.googleMap=googleMap;  this.googleMap.setOnCameraMoveListener(this);  this.googleMap.setOnCameraMoveStartedListener(this);  this.googleMap.setOnMapLoadedCallback(this);  this.setMapRenderer(this.mapRenderer);}  }
class C{  public Response writeInt(int i){  writeShort((short)((i >> 16) & 0xFFFF));  writeShort((short)(i & 0xFFFF));  return this;}  }
class C{  public synchronized void stopPreview(){  if (autoFocusManager != null) {    autoFocusManager.stop();    autoFocusManager=null;  }  if (camera != null && previewing) {    camera.stopPreview();    previewCallback.setHandler(null,0);    previewing=false;  }}  }
class C{  private File writeDotSourceToFile(String str) throws java.io.IOException {  File temp;  try {    temp=File.createTempFile("graph_",".dot.tmp",new File(tempDir));    FileWriter fout=new FileWriter(temp);    fout.write(str);    fout.close();  } catch (  Exception e) {    System.err.println("Error: I/O error while writing the dot source to temp file!");    return null;  }  return temp;}  }
class C{  public static void write(File file,CharSequence data,String encoding,boolean append) throws IOException {  write(file,data,Charsets.toCharset(encoding),append);}  }
class C{  public boolean isShortFeature(int index){  return byteValuedDiscreteFeatures.length <= index && index < byteValuedDiscreteFeatures.length + shortValuedDiscreteFeatures.length;}  }
class C{  @Override protected void loader(){  try {    setupFeatureSet();    setupFeatureProcessors();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  private void splitPunctuation(AnnotatedString input,LanguageResource langRes){  RegExp allPunctMatcher=langRes.getAllPunctMatcher();  String rootClass=langRes.getClassesRoot().getTagName();  int tokenStart=input.getIndex();  int tokenEnd=input.getRunLimit(CLASS_ANNO);  String image=input.substring(tokenStart,tokenEnd);  String tokClass=(String)input.getAnnotation(CLASS_ANNO);  Match startMatch=allPunctMatcher.starts(image);  while (null != startMatch) {    String punctClass=this.identifyPunctClass(startMatch,null,image,langRes);    input.annotate(CLASS_ANNO,punctClass,tokenStart + startMatch.getStartIndex(),tokenStart + startMatch.getEndIndex());    tokenStart=tokenStart + startMatch.getEndIndex();    image=input.substring(tokenStart,tokenEnd);    input.setIndex(tokenStart);    if (image.length() > 0) {      this.annotate(input,CLASS_ANNO,tokClass,tokenStart,tokenEnd,image,langRes);      tokClass=(String)input.getAnnotation(CLASS_ANNO);      if (tokClass != rootClass) {        break;      }      startMatch=allPunctMatcher.starts(image);    } else {      startMatch=null;    }  }  Match endMatch=allPunctMatcher.ends(image);  while (null != endMatch) {    String punctClass=this.identifyPunctClass(endMatch,null,image,langRes);    input.annotate(CLASS_ANNO,punctClass,tokenStart + endMatch.getStartIndex(),tokenStart + endMatch.getEndIndex());    tokenEnd=tokenStart + endMatch.getStartIndex();    image=input.substring(tokenStart,tokenEnd);    if (image.length() > 0) {      this.annotate(input,CLASS_ANNO,tokClass,tokenStart,tokenEnd,image,langRes);      tokClass=(String)input.getAnnotation(CLASS_ANNO);      if (tokClass != rootClass) {        break;      }      endMatch=allPunctMatcher.ends(image);    } else {      endMatch=null;    }  }}  }
class C{  public okhttp3.Response raw(){  return rawResponse;}  }
class C{  @Override public void close(){  try {    raf.close();    System.err.println("Closing file: " + file.getName() + " ("+ pages+ "/"+ data.length+ " pages)");  } catch (  IOException e) {    Basic.caught(e);  }}  }
class C{  public SM_PLAYER_SEARCH(List<Player> players,int region){  this.players=new ArrayList<Player>(players);  this.region=region;}  }
class C{  public AndroidAuthenticator(Context context,Account account,String authTokenType){  this(context,account,authTokenType,false);}  }
class C{  private static int computeEmbeddingRec(PhyloTreeView view,Node v,Edge e,double hDistToRoot,int leafNumber,boolean toScale){  if (v.getDegree() == 1 && e != null) {    view.setLocation(v,toScale ? hDistToRoot : 0,++leafNumber);  } else {    Point2D first=null;    Point2D last=null;    double minX=Double.MAX_VALUE;    for (Edge f=v.getFirstAdjacentEdge(); f != null; f=v.getNextAdjacentEdge(f)) {      if (f != e) {        Node w=f.getOpposite(v);        leafNumber=computeEmbeddingRec(view,w,f,hDistToRoot + view.getPhyloTree().getWeight(f),leafNumber,toScale);        if (first == null)         first=view.getLocation(w);        last=view.getLocation(w);        if (last.getX() < minX)         minX=last.getX();      }    }    if (first != null) {      double x;      if (toScale)       x=hDistToRoot; else       x=minX - 1;      double y=0.5 * (last.getY() + first.getY());      view.setLocation(v,x,y);      for (Edge f=v.getFirstAdjacentEdge(); f != null; f=v.getNextAdjacentEdge(f)) {        if (f != e) {          Node w=f.getOpposite(v);          java.util.List<Point2D> list=new LinkedList<>();          Point2D p=new Point2D.Double(x,view.getLocation(w).getY());          list.add(p);          view.setInternalPoints(f,list);        }      }    }  }  return leafNumber;}  }
class C{  private boolean hasPermissionsGranted(String permission){  return ActivityCompat.checkSelfPermission(this.getActivity(),permission) == PackageManager.PERMISSION_GRANTED;}  }
class C{  public static double sum(double[] data){  double sum=0.0;  for (int i=0; i < data.length; i++) {    if (Double.isNaN(data[i]))     continue;    sum+=data[i];  }  return sum;}  }
class C{  public BasedHashSet(Map<E,Object> map){  this.map=map;}  }
class C{  public void appendData(String data){  if (isReadOnly()) {    String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"NO_MODIFICATION_ALLOWED_ERR",null);    throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR,msg);  }  if (data == null) {    return;  }  if (needsSyncData()) {    synchronizeData();  }  setNodeValue(this.data + data);}  }
class C{  public FriendsGetOnlineQueryWithMobile order(FriendsGetOnlineOrder value){  return unsafeParam("order",value);}  }
class C{  public void destroySelf(){  if (mPager == null || mPager.getAdapter() == null) {    return;  }  InfinitePagerAdapter wrapper=(InfinitePagerAdapter)mPager.getAdapter();  PagerAdapter adapter=wrapper.getRealAdapter();  if (adapter != null) {    adapter.unregisterDataSetObserver(dataChangeObserver);  }  removeAllViews();}  }
class C{  public ArrayFieldVector(T[] d,int pos,int size) throws MathIllegalArgumentException, NullArgumentException {  MathUtils.checkNotNull(d);  if (d.length < pos + size) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_TOO_LARGE,pos + size,d.length);  }  field=d[0].getField();  data=MathArrays.buildArray(field,size);  System.arraycopy(d,pos,data,0,size);}  }
class C{  public Spring addSpring(ForceItem item1,ForceItem item2,float coeff,float length){  if (item1 == null || item2 == null)   throw new IllegalArgumentException("ForceItems must be non-null");  Spring s=Spring.getFactory().getSpring(item1,item2,coeff,length);  springs.add(s);  return s;}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  public <T>T inject(Class<T> clazz,WebElement scope){  return inject(clazz,scope,new FramePath());}  }
class C{  @Override public double cost(Target target,Unit unit){  if (target instanceof HalfPhoneTarget)   return tcfForHalfphones.cost(target,unit);  if (!(target instanceof DiphoneTarget))   throw new IllegalArgumentException("This target cost function can only be called for diphone and half-phone targets!");  if (!(unit instanceof DiphoneUnit))   throw new IllegalArgumentException("Diphone targets need diphone units!");  DiphoneTarget dt=(DiphoneTarget)target;  DiphoneUnit du=(DiphoneUnit)unit;  return tcfForHalfphones.cost(dt.left,du.left) + tcfForHalfphones.cost(dt.right,du.right);}  }
class C{  @CalledByNative public static boolean isIconLargeEnoughForLauncher(Context context,int width,int height){  ActivityManager am=(ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);  final int minimalSize=am.getLauncherLargeIconSize() / 2;  return width >= minimalSize && height >= minimalSize;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_BackDashATK_ME_TO_SELF(int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200336,num0,skillname);}  }
class C{  public Interceptor[] buildResourceInterceptors(Class<? extends Resource> resourceClass){  Interceptors before=resourceClass.getAnnotation(Interceptors.class);  return before != null ? createInterceptors(before) : NULL_INTERCEPTOR_ARRAY;}  }
class C{  private S1Point(final double alpha,final Vector2D vector){  this.alpha=alpha;  this.vector=vector;}  }
class C{  public static double[][] truncateRows(double[][] matrix,int nCols){  final int nRows=matrix.length;  final double[][] result=new double[nRows][nCols];  for (int row=0; row < nRows; row++) {    System.arraycopy(matrix[row],0,result[row],0,nCols);  }  return result;}  }
class C{  public static Document parseDocument(Reader inputData) throws ParserConfigurationException, SAXException, IOException {  return parseDocument(inputData,false);}  }
class C{  public LocationCursor queryLocations(){  QueryHelper qh=new QueryHelper();  qh.Distinct=true;  qh.Table=S.TABLE_LOCATIONS;  qh.Columns=null;  qh.Selection="_id<100";  qh.SelectionArgs=null;  qh.GroupBy=null;  qh.Having=null;  qh.OrderBy=null;  qh.Limit=null;  return new LocationCursor(wrapHelper(qh));}  }
class C{  @SuppressWarnings("unchecked") public CompositeFileComparator(Iterable<Comparator<File>> delegates){  if (delegates == null) {    this.delegates=(Comparator<File>[])NO_COMPARATORS;  } else {    List<Comparator<File>> list=new ArrayList<Comparator<File>>();    for (    Comparator<File> comparator : delegates) {      list.add(comparator);    }    this.delegates=(Comparator<File>[])list.toArray(new Comparator<?>[list.size()]);  }}  }
class C{  @Override public Set<Type> possibleTypes(){  return types;}  }
class C{  public int k(){  return soot.PhaseOptions.getInt(options,"k");}  }
class C{  ContextualSearchRequest(String searchTerm,@Nullable String alternateTerm,boolean isLowPriorityEnabled){  mWasPrefetch=isLowPriorityEnabled;  mNormalPriorityUri=getUriTemplate(searchTerm,alternateTerm,false);  if (isLowPriorityEnabled) {    Uri baseLowPriorityUri=getUriTemplate(searchTerm,alternateTerm,true);    mLowPriorityUri=baseLowPriorityUri.buildUpon().path("s").appendQueryParameter("sns","1").build();    mIsLowPriority=true;  } else {    mIsLowPriority=false;    mLowPriorityUri=null;  }}  }
class C{  public void testAddModuleWithNondefaultLocationWithinProject() throws IOException {  final String modulePath="directory/module";  final GradleSettingsFile file=getSimpleTestFile();  File moduleLocation=new File(VfsUtilCore.virtualToIoFile(file.getFile().getParent()),modulePath);  assertModuleWithNonDefaultLocation(file,":mymodule",modulePath,moduleLocation);}  }
class C{  @Override public double[] makeCumulativeTestPoints(){  return new double[]{0.210212602629,0.554298076728,0.831211613487,1.14547622606,1.61030798696,20.5150056524,15.0862724694,12.8325019940,11.0704976935,9.23635689978};}  }
class C{  public static final void shuffle(long[] a,int start,int len,Random r){  for (int i=start + len; i > 1; --i) {    long t=a[i];    int j=r.nextInt(i);    a[i]=a[j];    a[j]=t;  }}  }
class C{  public boolean isApplicable(){  return true;}  }
class C{  public static void clickPopupMenuItem(@NotNull String labelPrefix,@NotNull Component component,@NotNull Robot robot){  clickPopupMenuItemMatching(new PrefixMatcher(labelPrefix),component,robot);}  }
class C{  public boolean isSpring(){  return this.frequency > 0.0;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_MPHeal_INTERVAL_ME_TO_B(String skilltarget,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200535,skilltarget,num0,skillname);}  }
class C{  private boolean matches(ByteOrderMark bom){  for (int i=0; i < bom.length(); i++) {    if (bom.get(i) != firstBytes[i]) {      return false;    }  }  return true;}  }
class C{  public boolean isTitleEnabled(){  return mCollapsingTitleEnabled;}  }
class C{  public NGramCategory(String sName){  super();  Dictionary=new Dictionary(sName,12);  Dictionary.AddSubStrings=true;  Dictionary.RemoveSubStrings=false;  DocumentCount=0;  Name=sName;}  }
class C{  public Approximator(){  this.mType=ApproximatorType.NONE;}  }
class C{  private static int resolveKeylineGravity(int gravity){  return gravity == Gravity.NO_GRAVITY ? GravityCompat.END | Gravity.TOP : gravity;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Bind_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200613,skillcaster,skillname);}  }
class C{  public Covariance(RealMatrix matrix) throws MathIllegalArgumentException {  this(matrix,true);}  }
class C{  private ArcsSet createSplitPart(final List<Double> limits){  if (limits.isEmpty()) {    return null;  } else {    for (int i=0; i < limits.size(); ++i) {      final int j=(i + 1) % limits.size();      final double lA=limits.get(i);      final double lB=MathUtils.normalizeAngle(limits.get(j),lA);      if (FastMath.abs(lB - lA) <= getTolerance()) {        if (j > 0) {          limits.remove(j);          limits.remove(i);          i=i - 1;        } else {          final double lEnd=limits.remove(limits.size() - 1);          final double lStart=limits.remove(0);          if (limits.isEmpty()) {            if (lEnd - lStart > FastMath.PI) {              return new ArcsSet(new BSPTree<Sphere1D>(Boolean.TRUE),getTolerance());            } else {              return null;            }          } else {            limits.add(limits.remove(0) + MathUtils.TWO_PI);          }        }      }    }    BSPTree<Sphere1D> tree=new BSPTree<Sphere1D>(Boolean.FALSE);    for (int i=0; i < limits.size() - 1; i+=2) {      addArcLimit(tree,limits.get(i),true);      addArcLimit(tree,limits.get(i + 1),false);    }    if (tree.getCut() == null) {      return null;    }    return new ArcsSet(tree,getTolerance());  }}  }
class C{  private void transitionOverlayViewFromInputToResults(){  resultsBox.setVisibility(View.VISIBLE);  inputBox.setVisibility(View.GONE);  initialButtonsLayout.setVisibility(View.GONE);  onCheckButtonsLayout.setVisibility(View.VISIBLE);}  }
class C{  @VisibleForTesting void resetCounters(){  updateCountersForOpen();  mPreferenceManager.setContextualSearchPromoOpenCount(0);  mDidResetCounters=true;}  }
class C{  public int compareTo(cp_info constant_pool[],cp_info cp,cp_info cp_constant_pool[]){  int i;  if (tag != cp.tag)   return tag - cp.tag;  CONSTANT_InterfaceMethodref_info cu=(CONSTANT_InterfaceMethodref_info)cp;  i=constant_pool[class_index].compareTo(constant_pool,cp_constant_pool[cu.class_index],cp_constant_pool);  if (i != 0)   return i;  return constant_pool[name_and_type_index].compareTo(constant_pool,cp_constant_pool[cu.name_and_type_index],cp_constant_pool);}  }
class C{  public void storeState(final Configuration configuration){  Set<String> oldKeys=new HashSet<>();  configuration.subset(PREFIX_SELECTED_TYPE_KEY).getKeys().forEachRemaining(null);  oldKeys.forEach(null);  selectedTypes.forEach(null);  persistentProperties.forEach(null);}  }
class C{  private boolean isDeprecated(PhpClass clazz){  PhpPsiElement classDoc=clazz.getPrevPsiSibling();  if (!(classDoc instanceof PhpDocCommentImpl)) {    return false;  }  Collection<PhpDocTagImpl> tags=PsiTreeUtil.findChildrenOfType(classDoc,PhpDocTagImpl.class);  if (tags.size() > 0) {    for (    PhpDocTagImpl subject : tags) {      if (subject.getName().equals("@deprecated")) {        tags.clear();        return true;      }    }    tags.clear();  }  return false;}  }
class C{  public boolean isComplex(){  return false;}  }
class C{  protected void okPressed(){  Date tempStartDate=null;  Date tempEndDate=null;  if (startDateText.getText().trim().length() == 0)   startDate=null; else {    tempStartDate=parseDate(startDateText.getText());    if (tempStartDate == null)     return;  }  if (endDateText.getText().trim().length() == 0)   endDate=null; else {    tempEndDate=parseDate(endDateText.getText());    if (tempEndDate == null)     return;  }  if (tempStartDate != null && tempEndDate != null) {    Calendar calendar=Calendar.getInstance();    calendar.setTime(tempEndDate);    calendar.set(Calendar.HOUR_OF_DAY,calendar.getActualMaximum(Calendar.HOUR_OF_DAY));    calendar.set(Calendar.MINUTE,calendar.getActualMaximum(Calendar.MINUTE));    calendar.set(Calendar.SECOND,calendar.getActualMaximum(Calendar.SECOND));    tempEndDate=calendar.getTime();    if (!tempEndDate.after(tempStartDate)) {      MessageDialog.openError(getShell(),Messages.FilterRevisionsDialog_dateSequenceErrorTitle,Messages.FilterRevisionsDialog_dateSequenceErrorMessage);      return;    }  }  endDate=tempEndDate;  startDate=tempStartDate;  if (startRevisionText.getText().trim().length() > 0) {    try {      startRevision=(SVNRevision.Number)SVNRevision.getRevision(startRevisionText.getText().trim());    } catch (    ParseException e) {      MessageDialog.openError(getShell(),Messages.FilterRevisionsDialog_revisionParseErrorTitle,Messages.FilterRevisionsDialog_revisionParseErrorMessage);      return;    }  } else   startRevision=null;  if (endRevisionText.getText().trim().length() > 0) {    try {      endRevision=(SVNRevision.Number)SVNRevision.getRevision(endRevisionText.getText().trim());    } catch (    ParseException e) {      MessageDialog.openError(getShell(),Messages.FilterRevisionsDialog_revisionParseErrorTitle,Messages.FilterRevisionsDialog_revisionParseErrorMessage);      return;    }  } else   endRevision=null;  if (startRevision != null && endRevision != null && startRevision.getNumber() > endRevision.getNumber()) {    MessageDialog.openError(getShell(),Messages.FilterRevisionsDialog_revisionSequenceErrorTitle,Messages.FilterRevisionsDialog_revisionSequenceErrorMessage);    return;  }  if (commentText.getText().trim().length() > 0)   comment=commentText.getText(); else   comment=null;  if (selectedAuthor != null && selectedAuthor.equals(ALL_AUTHORS)) {    selectedAuthor=null;  }  regExp=regExpButton.getSelection();  super.okPressed();}  }
class C{  public void addCoreCommandTagChanger(final Long equipmentId,final ICoreCommandTagChanger commandTagChanger){  List<ICoreCommandTagChanger> changers=coreCommandTagChangers.get(equipmentId);  if (changers == null) {    changers=new ArrayList<>();    coreCommandTagChangers.put(equipmentId,changers);  }  changers.add(commandTagChanger);}  }
class C{  public void testIndexCSVBigHTTP() throws Exception {  createIndex();  send("registerFields","{fields: {id: {type: atom, store: true, sort: true}, id2: {type: atom, store: true, sort: true}, body: {type: text, store: true, highlight: true}}}");  send("startIndex");  StringBuilder b=new StringBuilder();  int size=atLeast(512);  for (int i=0; i < 256 * size; i++) {    b.append("wordy ");  }  b.append(" document");  String body=b.toString();  assertTrue(body.length() > 512 * 1024);  Map<String,Object> params=new HashMap<>();  params.put("indexName",server.curIndexName);  JSONObject result=server.send("bulkCSVAddDocument2",params,new StringReader("id,id2,body\n0,1," + body + "\n"));  assertEquals(1,getInt(result,"indexedDocumentCount"));  refresh();  assertEquals(1,getInt(send("search","{queryText: document}"),"totalHits"));  send("stopIndex");  send("deleteIndex");}  }
class C{  public ShortArrayCodeInput(short[] array){  if (array == null) {    throw new NullPointerException("array == null");  }  this.array=array;}  }
class C{  @Override protected FieldConfigBase createCopy(FieldConfigBase fieldConfigBase){  FieldConfigGeometryField copy=null;  if (fieldConfigBase != null) {    copy=new FieldConfigGeometryField(fieldConfigBase.getCommonData());  }  return copy;}  }
class C{  public void add(String ip,String netmask,String gateway){  Host h=new Host(name);  h.ip=ip;  h.netmask=netmask;  h.gateway=gateway;  if (list == null) {    list=new ArrayList<Host>();  }  list.add(h);}  }
class C{  public boolean forEachKey(TShortProcedure procedure){  return forEach(procedure);}  }
class C{  protected void drawXAxis(Graphics2D gc){}  }
class C{  void parse(){  String line;  while ((line=getNextLine()) != null) {    Matcher matcher=COMMAND_LINE.matcher(line);    if (matcher.find()) {      String command=matcher.group(COMMAND_NAME_GROUP);      String rest=line.substring(matcher.end());switch (command) {case EXTENDS_COMMAND:        parseExtends(rest);      break;case SNIPPET_COMMAND:    input.noExtendsAllowed=true;  parseSnippet(SnippetKind.REGULAR,rest);break;case OVERRIDE_COMMAND:input.noExtendsAllowed=true;parseSnippet(SnippetKind.OVERRIDE,rest);break;case ABSTRACT_COMMAND:input.noExtendsAllowed=true;parseSnippet(SnippetKind.ABSTRACT,rest);break;case PRIVATE_COMMAND:input.noExtendsAllowed=true;parseSnippet(SnippetKind.PRIVATE,rest);break;default :unexpectedCommandError(command);break;}} else if (!CharMatcher.whitespace().matchesAllOf(line)) {error("unrecognized input line on top level: '%s'",line);}}}  }
class C{  @PostConstruct public void init(){  LOGGER.info("init - Starting Tag publisher.");  if (LOGGER.isTraceEnabled()) {    LOGGER.trace("init - Registering for Tag Updates.");  }  this.alarmAggregator.registerForTagUpdates(this);  if (LOGGER.isTraceEnabled()) {    LOGGER.trace("init - Registering for Configuration Updates.");  }  this.configurationUpdate.registerForConfigurationUpdates(this);  if (republicationDelay != 0)   republisher.setRepublicationDelay(republicationDelay);  republisher.start();}  }
class C{  public MessagesGetHistoryAttachmentsQuery(VkApiClient client,Actor actor,int peerId){  super(client,"messages.getHistoryAttachments",GetHistoryAttachmentsResponse.class);  accessToken(actor.getAccessToken());  peerId(peerId);}  }
class C{  public ResetException(){  super("Transaction has already been reset");}  }
class C{  public <U>Domino<T,U> merge(Domino<? super R,? extends U> domino1,Domino<? super R,? extends U> domino2,Domino<? super R,? extends U> domino3){  return merge((Domino<R,U>[])new Domino[]{domino1,domino2,domino3});}  }
class C{  public GaussIntegrator(Pair<double[],double[]> pointsAndWeights) throws MathIllegalArgumentException {  this(pointsAndWeights.getFirst(),pointsAndWeights.getSecond());}  }
class C{  private static long writeRecords(DistributedLogManager dlm,int numLogSegments,int numRecordsPerLogSegment,long startTxId,boolean emptyRecord) throws IOException {  long txid=startTxId;  for (long i=0; i < numLogSegments; i++) {    BKSyncLogWriter writer=(BKSyncLogWriter)dlm.startLogSegmentNonPartitioned();    for (long j=1; j <= numRecordsPerLogSegment; j++) {      if (emptyRecord) {        writer.write(DLMTestUtil.getEmptyLogRecordInstance(txid++));      } else {        writer.write(DLMTestUtil.getLargeLogRecordInstance(txid++));      }    }    writer.closeAndComplete();  }  return txid;}  }
class C{  @Override public int read() throws java.io.IOException {  if (position < 0) {    if (encode) {      byte[] b3=new byte[3];      int numBinaryBytes=0;      for (int i=0; i < 3; i++) {        int b=in.read();        if (b >= 0) {          b3[i]=(byte)b;          numBinaryBytes++;        } else {          break;        }      }      if (numBinaryBytes > 0) {        encode3to4(b3,0,numBinaryBytes,buffer,0,options);        position=0;        numSigBytes=4;      } else {        return -1;      }    } else {      byte[] b4=new byte[4];      int i=0;      for (i=0; i < 4; i++) {        int b=0;        do {          b=in.read();        } while (b >= 0 && decodabet[b & 0x7f] <= WHITE_SPACE_ENC);        if (b < 0) {          break;        }        b4[i]=(byte)b;      }      if (i == 4) {        numSigBytes=decode4to3(b4,0,buffer,0,options);        position=0;      } else       if (i == 0) {        return -1;      } else {        throw new java.io.IOException("Improperly padded Base64 input.");      }    }  }  if (position >= 0) {    if (position >= numSigBytes) {      return -1;    }    if (encode && breakLines && lineLength >= MAX_LINE_LENGTH) {      lineLength=0;      return '\n';    } else {      lineLength++;      int b=buffer[position++];      if (position >= bufferLength) {        position=-1;      }      return b & 0xFF;    }  } else {    throw new java.io.IOException("Error in Base64 code reading stream.");  }}  }
class C{  public static String writeToTmpFile(List<String> list,String fileName,String suffix) throws IOException {  File file=File.createTempFile(fileName,suffix);  file.deleteOnExit();  logger.info("localFS: file = " + file);  FileWriter fw=new FileWriter(file);  try (BufferedWriter bw=new BufferedWriter(fw)){    for (    String s : list) {      bw.write(s);      bw.newLine();    }  }   return file.getPath();}  }
class C{  public static String millisToText(long millis){  return Strings.millisToString(millis,true);}  }
class C{  @SuppressWarnings("unchecked") public JsonParser(JsonHandler<?,?> handler){  if (handler == null) {    throw new NullPointerException("handler is null");  }  this.handler=(JsonHandler<Object,Object>)handler;  handler.parser=this;}  }
class C{  void routeServer(){  Map<String,Object> params=Maps.newHashMap();  params.put("appName",client.getAppName());  params.put("clientPid",SysUtil.pid());  String[] serverList=client.getServers().split(",");  for (  String server : serverList) {    try {      ServerRouteResp resp=doGet(server,ClientUris.SERVER_ROUTE,null,params,ServerRouteResp.class);      if (resp == null) {        log.warn("server({}) route is null",server);        continue;      }      String routedServer=resp.getServer();      String clientId=resp.getClientId();      params.put("clientId",clientId);      params.put("appKey",client.getAppKey());      Boolean registerResp=doGet(routedServer,ClientUris.REGISTER,null,params,Boolean.class);      if (registerResp == Boolean.FALSE) {        log.warn("failed to register server({})",routedServer);        continue;      }      currentServer=routedServer;      headers.put(Constants.CLIENT_ID_HEADER,clientId);      headers.put(Constants.APP_KEY_HEADER,client.getAppKey());      headers.put(Constants.CLIENT_VERSION_HEADER,CLIENT_VERSION);      headers.put(Constants.PULLING_TIMEOUT_HEADER,String.valueOf(client.getPullingTimeout()));      log.info("route successfully, current server is {}",currentServer);      return;    } catch (    HttpRequest.HttpRequestException e) {      log.warn("server({}) is unavailable, trying next server",server);    }  }  throw new Server503Exception("all servers are unavailable: " + Arrays.toString(serverList));}  }
class C{  public FieldBracketingNthOrderBrentSolver(final T relativeAccuracy,final T absoluteAccuracy,final T functionValueAccuracy,final int maximalOrder) throws MathIllegalArgumentException {  if (maximalOrder < 2) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_TOO_SMALL,maximalOrder,2);  }  this.field=relativeAccuracy.getField();  this.maximalOrder=maximalOrder;  this.absoluteAccuracy=absoluteAccuracy;  this.relativeAccuracy=relativeAccuracy;  this.functionValueAccuracy=functionValueAccuracy;  this.evaluations=new Incrementor();}  }
class C{  public final TestSubscriber<T> assertError(Class<? extends Throwable> clazz){  assertNotComplete();  int s=errors.size();  if (s == 0) {    throw new AssertionError("No error",null);  }  if (s == 1) {    Throwable e=errors.get(0);    if (!clazz.isInstance(e)) {      throw new AssertionError("Error class incompatible: expected = " + clazz + ", actual = "+ e,null);    }  }  if (s > 1) {    throw new AssertionError("Multiple errors: " + s,null);  }  return this;}  }
class C{  public void addArg(Expr node){  List<Expr> list=(parent == null || state == null) ? getArgListNoTransform() : getArgList();  list.addChild(node);}  }
class C{  private synchronized void reschedule(long millis){  currentFut=null;  if (!closed) {    SCHEDULER.schedule(null,millis,TimeUnit.MILLISECONDS);  } else {    try {      underlying.close();    } catch (    Exception ex) {      LOG.log(Level.WARNING,"failed to close resolver " + underlying.configString(),ex);    }  }}  }
class C{  public static boolean contentEquals(InputStream input1,InputStream input2) throws IOException {  if (!(input1 instanceof BufferedInputStream)) {    input1=new BufferedInputStream(input1);  }  if (!(input2 instanceof BufferedInputStream)) {    input2=new BufferedInputStream(input2);  }  int ch=input1.read();  while (EOF != ch) {    int ch2=input2.read();    if (ch != ch2) {      return false;    }    ch=input1.read();  }  int ch2=input2.read();  return ch2 == EOF;}  }
class C{  private boolean checkForCarry(char[] ca1,int icarry){  boolean carry=false;  if (icarry < ca1.length) {    if (ca1[icarry] == '6' || ca1[icarry] == '7' || ca1[icarry] == '8' || ca1[icarry] == '9')     carry=true; else     if (ca1[icarry] == '5') {      int ii=icarry + 1;      for (; ii < ca1.length; ii++)       if (ca1[ii] != '0')       break;      carry=ii < ca1.length;      if (!carry && icarry > 0) {        carry=(ca1[icarry - 1] == '1' || ca1[icarry - 1] == '3' || ca1[icarry - 1] == '5' || ca1[icarry - 1] == '7' || ca1[icarry - 1] == '9');      }    }  }  return carry;}  }
class C{  public static final void toString(StringBuffer output,short[] tab){  if (tab == null) {    output.append("null");    return;  }  output.append("(");  int size=tab.length;  output.append(size);  if (listMax == -1 || size <= listMax) {    for (int i=0; i < size; i++) {      output.append(",");      output.append(tab[i]);    }  } else {    int border=size / 2;    if (listBorder < border)     border=listBorder;    for (int i=0; i < border; i++) {      output.append(",");      output.append(tab[i]);    }    output.append(",...");    for (int i=border; i > 0; i--) {      output.append(",");      output.append(tab[size - i]);    }  }  output.append(")");}  }
class C{  public void solve(){  long solve_time=0, prepare_time=0;  long mem;  int rounds;  int n_obs;  G.v().out.flush();  preprocess();  mergeLocalVariables();  worklist.initialize(pointers.size());  offlineProcessor=new OfflineProcessor(this);  IFigureManager.cleanCache();  int evalLevel=opts.geom_eval();  GeomEvaluator ge=new GeomEvaluator(this,ps);  if (evalLevel == Constants.eval_basicInfo)   ge.profileSparkBasicMetrics();  Date begin=new Date();  for (rounds=0, n_obs=1000; rounds < Parameters.cg_refine_times && n_obs > 0; ++rounds) {    ps.println("\n" + "[Geom] Propagation Round " + rounds + " ==> ");    encodeContexts();    Date prepare_begin=new Date();    offlineProcessor.init();    offlineProcessor.defaultFeedPtsRoutines();    offlineProcessor.runOptimizations();    Date prepare_end=new Date();    prepare_time+=prepare_end.getTime() - prepare_begin.getTime();    if (rounds == 0) {      if (evalLevel <= Constants.eval_basicInfo) {        offlineProcessor.releaseSparkMem();      }    }    prepareNextRun();    nodeGenerator.initFlowGraph(this);    solveConstraints();    n_obs=updateCallGraph();    finalizeInternalData();  }  if (rounds < Parameters.cg_refine_times)   ps.printf("\nThe points-to information has converged. We stop here.\n");  Date end=new Date();  solve_time+=end.getTime() - begin.getTime();  mem=Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();  ps.println();  ps.printf("[Geom] Preprocessing time: %.2f s\n",(double)prepare_time / 1000);  ps.printf("[Geom] Total time: %.2f s\n",(double)solve_time / 1000);  ps.printf("[Geom] Memory: %.1f MB\n",(double)(mem) / 1024 / 1024);  if (evalLevel != Constants.eval_nothing) {    ge.profileGeomBasicMetrics(evalLevel > Constants.eval_basicInfo);    if (evalLevel > Constants.eval_basicInfo) {      ge.checkCallGraph();      ge.checkCastsSafety();      ge.checkAliasAnalysis();    }  }  finalizeSootData();  releaseUselessResources();  hasExecuted=true;}  }
class C{  private int toEven(float value){  int i=(int)(value + .5f);  if (i % 2 == 1) {    return i - 1;  }  return i;}  }
class C{  public double det(){  return new LUDecomposition(this).det();}  }
class C{  public boolean isHover(int row){  return getBoolean(row,VisualItem.HOVER);}  }
class C{  public void addElements(final double[] values){  final double[] tempArray=new double[numElements + values.length + 1];  System.arraycopy(internalArray,startIndex,tempArray,0,numElements);  System.arraycopy(values,0,tempArray,numElements,values.length);  internalArray=tempArray;  startIndex=0;  numElements+=values.length;}  }
class C{  private void processCommandTags(final Element equipmentUnit,final EquipmentConfiguration equipmentConfiguration){  Element commandTagsBlock=(Element)equipmentUnit.getElementsByTagName(COMMAND_TAGS_ELEMENT).item(0);  NodeList commandTags=commandTagsBlock.getElementsByTagName(COMMAND_TAG_ELEMENT);  SourceCommandTag sourceCommandTag=null;  for (int i=0; i < commandTags.getLength(); i++) {    sourceCommandTag=SourceCommandTag.fromConfigXML((Element)commandTags.item(i));    log.debug("creating SourceCommandTag object for id " + sourceCommandTag.getId() + "..");    equipmentConfiguration.getCommandTags().put(sourceCommandTag.getId(),sourceCommandTag);  }}  }
class C{  public void init$Children(){  children=new ASTNode[2];}  }
class C{  public static int subtractExact(final int a,final int b){  final int sub=a - b;  if ((a ^ b) < 0 && (sub ^ b) >= 0) {    throw new MathRuntimeException(LocalizedCoreFormats.OVERFLOW_IN_SUBTRACTION,a,b);  }  return sub;}  }
class C{  public boolean isTrackingTouch(){  return mTrackingTouch;}  }
class C{  public static String[] readAllStrings(){  String[] tokens=WHITESPACE_PATTERN.split(readAll());  if (tokens.length == 0 || tokens[0].length() > 0)   return tokens;  String[] decapitokens=new String[tokens.length - 1];  for (int i=0; i < tokens.length - 1; i++)   decapitokens[i]=tokens[i + 1];  return decapitokens;}  }
class C{  public boolean drain(){  return true;}  }
class C{  public void clear(){  super.clear();  Object[] keys=_set;  short[] vals=_values;  Arrays.fill(_set,0,_set.length,FREE);  Arrays.fill(_values,0,_values.length,(short)0);}  }
class C{  public RegexSpacePredicate(String expectedValue){  super(expectedValue,null);  if (expectedValue == null)   throw new IllegalArgumentException("Argument 'expectedValue' cannot be null.");  init();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_RESISTED_A_TO_B(String value1,String value0){  return new SM_SYSTEM_MESSAGE(1390133,value1,value0);}  }
class C{  public void recordSplashscreenThemeColor(int type){  assert !mCommitted;  assert type >= 0 && type < SPLASHSCREEN_COLOR_STATUS_MAX;  mSplashScreenThemeColor=type;}  }
class C{  public AudioDeleteAlbumQuery groupId(Integer value){  return unsafeParam("group_id",value);}  }
class C{  public Property build(final PropertyResolver propertyResolver){  validate(propertyResolver);  if (propertyType == null && propertyTypeName != null) {    propertyType=TypeFactory.valueOf(propertyTypeName);  } else   if (propertyType == null) {    propertyType=TypeFactory.TYPE_OF_OBJECT;  }  if (getterMethod != null) {    getter=getterMethod.getName() + "()";  }  if (setterMethod != null) {    setter=setterMethod.getName() + "(%s)";  }  return new Property(name,getter,setter,propertyType,elementType);}  }
class C{  public MapConfigurer useLocalCache(){  if (localCacheSupport == null) {    localCacheSupport=new LocalCacheSupport();  }  return this;}  }
class C{  static public void syncClassificationBlock2Summary(int dataSetId,int totalDataSets,IClassificationBlock classificationBlock,DataTable table){  final Map<Integer,Integer[]> classId2count=new HashMap<>();  table.setClass2Counts(classificationBlock.getName(),classId2count);  for (  Integer classId : classificationBlock.getKeySet()) {    int sum=classificationBlock.getWeightedSum(classId);    if (sum > 0) {      if (classId2count.get(classId) == null)       classId2count.put(classId,new Integer[totalDataSets]);      Integer total=classId2count.get(classId)[dataSetId];      if (total != null)       classId2count.get(classId)[dataSetId]=total + sum; else       classId2count.get(classId)[dataSetId]=sum;    }  }  if (table.getAdditionalReads() > 0) {    if (classId2count.get(IdMapper.NOHITS_ID) == null)     classId2count.put(IdMapper.NOHITS_ID,new Integer[totalDataSets]);    Integer total=classId2count.get(IdMapper.NOHITS_ID)[dataSetId];    if (total != null)     classId2count.get(IdMapper.NOHITS_ID)[dataSetId]=total + (int)table.getAdditionalReads(); else     classId2count.get(IdMapper.NOHITS_ID)[dataSetId]=(int)table.getAdditionalReads();  }}  }
class C{  @Override public Table summary(){  Table table=Table.create("Column: " + name());  CategoryColumn measure=CategoryColumn.create("Measure");  CategoryColumn value=CategoryColumn.create("Value");  table.addColumn(measure);  table.addColumn(value);  measure.add("Count");  value.add(String.valueOf(size()));  measure.add("Missing");  value.add(String.valueOf(countMissing()));  measure.add("Earliest");  value.add(String.valueOf(min()));  measure.add("Latest");  value.add(String.valueOf(max()));  return table;}  }
class C{  public static void test(FileSystem fs,DistributedTestCLI cli,List<JSONObject> pirDataElements) throws Exception {  if (cli.run("1:J")) {    DistTestSuite.testJSONInputMR(fs,pirDataElements);  }  if (cli.run("1:JS")) {    DistTestSuite.testJSONInputSpark(fs,pirDataElements);  }  if (cli.run("1:SS")) {    DistTestSuite.testSparkStreaming(fs,pirDataElements);  }  if (cli.run("1:JSS")) {    DistTestSuite.testJSONInputSparkStreaming(fs,pirDataElements);  }  if (cli.run("1:E") || cli.run("1:ES") || cli.run("1:ESS")) {    Inputs.createESInput();    if (cli.run("1:E")) {      DistTestSuite.testESInputMR(fs,pirDataElements);    }    if (cli.run("1:ES")) {      DistTestSuite.testESInputSpark(fs,pirDataElements);    }    if (cli.run("1:ESS")) {      DistTestSuite.testESInputSparkStreaming(fs,pirDataElements);    }  }}  }
class C{  public static void increment(Calendar c,int field,int val){  if (isMultiYear(field)) {    c.add(Calendar.YEAR,-field * val);  } else {    c.add(field,val);  }}  }
class C{  @Override public boolean containsSymbol(char[] buffer,int offset,int length){synchronized (fSymbolTable) {    return fSymbolTable.containsSymbol(buffer,offset,length);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_OneTimeBoostSkillCritical_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200692,skillcaster,skillname);}  }
class C{  public DragControl(boolean repaint,boolean fixOnMouseOver){  this.repaint=repaint;  this.fixOnMouseOver=fixOnMouseOver;}  }
class C{  @Override public int reapUnused(){  int res=0;  for (  EvictionReplicationsMarkersSegment segment : _segments) {    if (size() == 0)     return res;    res+=reapUnused(segment);  }  return res;}  }
class C{  public HeaderHolder(View itemView){  super(itemView);  ImageButton backBtn=(ImageButton)itemView.findViewById(R.id.item_about_header_backButton);  if (Mysplash.getInstance().isLightTheme()) {    backBtn.setImageResource(R.drawable.ic_toolbar_back_light);  } else {    backBtn.setImageResource(R.drawable.ic_toolbar_back_dark);  }  backBtn.setOnClickListener(this);  this.appIcon=(ImageView)itemView.findViewById(R.id.item_about_header_appIcon);  TextView version=(TextView)itemView.findViewById(R.id.item_about_header_versionCode);  DisplayUtils.setTypeface(itemView.getContext(),version);  itemView.findViewById(R.id.item_about_header_unsplashContainer).setOnClickListener(this);  TextView unsplashTitle=(TextView)itemView.findViewById(R.id.item_about_header_unsplashTitle);  unsplashTitle.setText(itemView.getContext().getString(R.string.unsplash));  DisplayUtils.setTypeface(itemView.getContext(),unsplashTitle);  TextView unsplashContent=(TextView)itemView.findViewById(R.id.item_about_header_unsplashContent);  unsplashContent.setText(itemView.getContext().getString(R.string.about_unsplash));  DisplayUtils.setTypeface(itemView.getContext(),unsplashContent);}  }
class C{  public FixedMetadataValue(Plugin owningPlugin,final Object value){  super(owningPlugin);  this.internalValue=value;}  }
class C{  public void java_lang_SecurityManager_currentClassLoader0(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  helper.assignObjectTo(returnVar,Environment.v().getClassLoaderObject());}  }
class C{  @Override public boolean canSetPitch(){  Log.d(SBMP_TAG,"canSetPitch() 155");  if (pmInterface == null) {    if (!ConnectPlayMediaService()) {      ServiceBackedMediaPlayer.this.error(MediaPlayer.MEDIA_ERROR_UNKNOWN,0);    }  }  if (pmInterface != null) {    try {      return pmInterface.canSetPitch(ServiceBackedMediaPlayer.this.sessionId);    } catch (    RemoteException e) {      e.printStackTrace();      ServiceBackedMediaPlayer.this.error(MediaPlayer.MEDIA_ERROR_UNKNOWN,0);    }  }  return false;}  }
class C{  @Override public void onContentLoaded(Uri uri,String contentType){  if (contentType.equals(ContentManager.Content.IMAGE.toString())) {    ImageLoader.getInstance().displayImage(uri.toString(),ivPicture);  } else {  }}  }
class C{  public int optInt(int index,int defaultValue){  try {    return getInt(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public static int uniqueCount(Iterator tuples,String field){  HashSet set=new HashSet();  while (tuples.hasNext())   set.add(((Tuple)tuples.next()).get(field));  return set.size();}  }
class C{  public void controllerUpdate(ControllerEvent evt){  if (evt instanceof ConfigureCompleteEvent || evt instanceof RealizeCompleteEvent || evt instanceof PrefetchCompleteEvent) {synchronized (waitSync) {      stateTransitionOK=true;      waitSync.notifyAll();    }  } else   if (evt instanceof ResourceUnavailableEvent) {synchronized (waitSync) {      stateTransitionOK=false;      waitSync.notifyAll();    }  } else   if (evt instanceof EndOfMediaEvent) {    evt.getSourceController().stop();    evt.getSourceController().close();  }}  }
class C{  public Node interpretToNode(Target target,int minNumberOfData){  return interpretToNode(target.getFeatureVector(),minNumberOfData);}  }
class C{  public RingBuffer<T> start(){  final Sequence[] gatingSequences=consumerRepository.getLastSequenceInChain(true);  ringBuffer.addGatingSequences(gatingSequences);  checkOnlyStartedOnce();  for (  final ConsumerInfo consumerInfo : consumerRepository) {    consumerInfo.start(executor);  }  return ringBuffer;}  }
class C{  private boolean loadGsLoggingPropertiesFileFromClasspath(){  return loadLoggingFileFromClasspath(CommonSystemProperties.GS_LOGGING_CONFIG_FILE_PATH);}  }
class C{  public static boolean isEnter(KeyEvent event){  return isActionUp(event) && (event.getKeyCode() == KeyEvent.KEYCODE_ENTER || event.getKeyCode() == KeyEvent.KEYCODE_NUMPAD_ENTER);}  }
class C{  public void changeContrast(float value){  this.contrast+=value;}  }
class C{  @Override public void undoAction(UndoInterface undoRedoObject){  if ((filterTable != null) && (undoRedoObject != null)) {    try {      @SuppressWarnings("unchecked") List<FeatureTypeConstraint> oldValue=(List<FeatureTypeConstraint>)undoRedoObject.getOldValue();      populateField(oldValue);    } catch (    ClassCastException e) {    }  }}  }
class C{  public int length(){  int i;  for (i=bits.length - 1; i >= 0; i--) {    if (bits[i] != 0L)     break;  }  if (i < 0)   return 0;  long j=bits[i];  i++;  i<<=6;  for (long k=1L << 63; (k & j) == 0L; k>>=1, i--)   ;  return i;}  }
class C{  public void start(@Nullable final Activity callerActivity){  if (mUsed.getAndSet(true)) {    this.clear();    throw new UnsupportedOperationException("Maoni instance cannot be reused to start a new activity. " + "Please build a new Maoni instance.");  }  if (callerActivity == null) {    Log.d(LOG_TAG,"Target activity is undefined");    return;  }  final Intent maoniIntent=new Intent(callerActivity,MaoniActivity.class);  final PackageManager packageManager=callerActivity.getPackageManager();  try {    if (packageManager != null) {      final PackageInfo packageInfo=packageManager.getPackageInfo(callerActivity.getPackageName(),0);      if (packageInfo != null) {        maoniIntent.putExtra(APPLICATION_INFO_VERSION_CODE,packageInfo.versionCode);        maoniIntent.putExtra(APPLICATION_INFO_VERSION_NAME,packageInfo.versionName);        maoniIntent.putExtra(APPLICATION_INFO_PACKAGE_NAME,packageInfo.packageName);      }    }  } catch (  final PackageManager.NameNotFoundException nnfe) {    nnfe.printStackTrace();  }  final Object buildConfigDebugValue=ContextUtils.getBuildConfigValue(callerActivity,DEBUG);  if (buildConfigDebugValue != null && buildConfigDebugValue instanceof Boolean) {    maoniIntent.putExtra(APPLICATION_INFO_BUILD_CONFIG_DEBUG,(Boolean)buildConfigDebugValue);  }  final Object buildConfigFlavorValue=ContextUtils.getBuildConfigValue(callerActivity,FLAVOR);  if (buildConfigFlavorValue != null) {    maoniIntent.putExtra(APPLICATION_INFO_BUILD_CONFIG_FLAVOR,buildConfigFlavorValue.toString());  }  final Object buildConfigBuildTypeValue=ContextUtils.getBuildConfigValue(callerActivity,BUILD_TYPE);  if (buildConfigBuildTypeValue != null) {    maoniIntent.putExtra(APPLICATION_INFO_BUILD_CONFIG_BUILD_TYPE,buildConfigBuildTypeValue.toString());  }  maoniIntent.putExtra(FILE_PROVIDER_AUTHORITY,fileProviderAuthority);  maoniIntent.putExtra(WORKING_DIR,maoniWorkingDir != null ? maoniWorkingDir : callerActivity.getCacheDir().getAbsolutePath());  final File screenshotFile=new File(maoniWorkingDir != null ? maoniWorkingDir : callerActivity.getCacheDir(),MAONI_FEEDBACK_SCREENSHOT_FILENAME);  ViewUtils.exportViewToFile(callerActivity,callerActivity.getWindow().getDecorView(),screenshotFile);  maoniIntent.putExtra(SCREENSHOT_FILE,screenshotFile.getAbsolutePath());  maoniIntent.putExtra(CALLER_ACTIVITY,callerActivity.getClass().getCanonicalName());  if (theme != null) {    maoniIntent.putExtra(THEME,theme);  }  if (windowTitle != null) {    maoniIntent.putExtra(WINDOW_TITLE,windowTitle);  }  if (windowSubTitle != null) {    maoniIntent.putExtra(WINDOW_SUBTITLE,windowSubTitle);  }  if (windowTitleTextColor != null) {    maoniIntent.putExtra(TOOLBAR_TITLE_TEXT_COLOR,windowTitleTextColor);  }  if (windowSubTitleTextColor != null) {    maoniIntent.putExtra(TOOLBAR_SUBTITLE_TEXT_COLOR,windowSubTitleTextColor);  }  if (message != null) {    maoniIntent.putExtra(MESSAGE,message);  }  if (header != null) {    maoniIntent.putExtra(HEADER,header);  }  if (extraLayout != null) {    maoniIntent.putExtra(EXTRA_LAYOUT,extraLayout);  }  if (feedbackContentHint != null) {    maoniIntent.putExtra(CONTENT_HINT,feedbackContentHint);  }  if (contentErrorMessage != null) {    maoniIntent.putExtra(CONTENT_ERROR_TEXT,contentErrorMessage);  }  if (screenshotHint != null) {    maoniIntent.putExtra(SCREENSHOT_HINT,screenshotHint);  }  if (includeScreenshotText != null) {    maoniIntent.putExtra(INCLUDE_SCREENSHOT_TEXT,includeScreenshotText);  }  if (includeLogsText != null) {    maoniIntent.putExtra(INCLUDE_LOGS_TEXT,includeLogsText);  }  if (touchToPreviewScreenshotText != null) {    maoniIntent.putExtra(SCREENSHOT_TOUCH_TO_PREVIEW_HINT,touchToPreviewScreenshotText);  }  callerActivity.startActivity(maoniIntent);}  }
class C{  public boolean isShortFeature(String featureName){  try {    int index=getFeatureIndex(featureName);    return isShortFeature(index);  } catch (  Exception e) {    return false;  }}  }
class C{  public DTW(double[][] signal,double[][] reference,double[] sigma2){  this.signal=signal;  this.reference=reference;  this.sigma2=sigma2;  this.distanceFunction="Mahalanobis";  setCost(dpDistance());}  }
class C{  public boolean isApplicable(){  return ProjectManager.getNumberOfProjects() > 1 || getDir().getViewers().size() > 1;}  }
class C{  public static String addProductTags(HttpServletRequest request,HttpServletResponse response){  Delegator delegator=(Delegator)request.getAttribute("delegator");  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");  String productId=request.getParameter("productId");  String productTags=request.getParameter("productTags");  String statusId=request.getParameter("statusId");  if (UtilValidate.isNotEmpty(productId) && UtilValidate.isNotEmpty(productTags)) {    List<String> matchList=FastList.newInstance();    Pattern regex=Pattern.compile("[^\\s\"']+|\"([^\"]*)\"|'([^']*)'");    Matcher regexMatcher=regex.matcher(productTags);    while (regexMatcher.find()) {      matchList.add(regexMatcher.group().replace("'",""));    }    GenericValue userLogin=null;    try {      userLogin=EntityQuery.use(delegator).from("UserLogin").where("userLoginId","system").cache().queryOne();    } catch (    GenericEntityException e) {      request.setAttribute("_ERROR_MESSAGE_",e.getMessage());      return "error";    }    if (UtilValidate.isEmpty(statusId)) {      statusId="KW_PENDING";    }    if (UtilValidate.isNotEmpty(matchList)) {      for (      String keywordStr : matchList) {        try {          dispatcher.runSync("createProductKeyword",UtilMisc.toMap("productId",productId,"keyword",keywordStr.trim(),"keywordTypeId","KWT_TAG","statusId",statusId,"userLogin",userLogin));        } catch (        GenericServiceException e) {          request.setAttribute("_ERROR_MESSAGE_",e.getMessage());          return "error";        }      }    }  }  return "success";}  }
class C{  public void rejectDocument(NGramDocument dDoc){  DocumentNGramGraph gGraph=dDoc.getDocumentGraph().intersectGraph(getDocumentGraph());  DocumentNGramHistogram hHistogram=dDoc.getDocumentHistogram().intersectHistogram(getDocumentHistogram());  getDocumentGraph().degrade(gGraph);}  }
class C{  public TEqualsExtended(){  super(null,null);}  }
class C{  private void removeReadData(final int size){  if (!persistenceManager.getFallbackManager().removeReadData(size)) {    persistenceManager.getAlarmSender().fileNotReachable(ACTIVATED,persistenceManager.getFallbackManager().getFallbackFileController().getDataFile());    FALLBACK_LOG.error("commitFallbackCommandLogs() - CommandTags cannot be removed from the fallback log file");  } else {    persistenceManager.getAlarmSender().fileNotReachable(DOWN,persistenceManager.getFallbackManager().getFallbackFileController().getDataFile());  }}  }
class C{  public void updatePokemonList(ArrayList<Pokemon> list){  pokemons=list;  clear();  addAll(pokemons);  notifyDataSetChanged();}  }
class C{  public CART loadFromStream(InputStream inStream) throws IOException, MaryConfigurationException {  DataInput raf=new DataInputStream(new BufferedInputStream(inStream));  MaryHeader maryHeader=new MaryHeader(raf);  if (!maryHeader.hasCurrentVersion()) {    throw new IOException("Wrong version of database file");  }  if (maryHeader.getType() != MaryHeader.CARTS) {    throw new IOException("No CARTs file");  }  short propDataLength=raf.readShort();  Properties props;  if (propDataLength == 0) {    props=null;  } else {    byte[] propsData=new byte[propDataLength];    raf.readFully(propsData);    ByteArrayInputStream bais=new ByteArrayInputStream(propsData);    props=new Properties();    props.load(bais);    bais.close();  }  FeatureDefinition featureDefinition=new FeatureDefinition(raf);  int numDecNodes=raf.readInt();  DecisionNode[] dns=new DecisionNode[numDecNodes];  int[][] childIndexes=new int[numDecNodes][];  for (int i=0; i < numDecNodes; i++) {    int featureNameIndex=raf.readInt();    int nodeTypeNr=raf.readInt();    DecisionNode.Type nodeType=DecisionNode.Type.values()[nodeTypeNr];    int numChildren=2;switch (nodeType) {case BinaryByteDecisionNode:      int criterion=raf.readInt();    dns[i]=new DecisionNode.BinaryByteDecisionNode(featureNameIndex,(byte)criterion,featureDefinition);  break;case BinaryShortDecisionNode:criterion=raf.readInt();dns[i]=new DecisionNode.BinaryShortDecisionNode(featureNameIndex,(short)criterion,featureDefinition);break;case BinaryFloatDecisionNode:float floatCriterion=raf.readFloat();dns[i]=new DecisionNode.BinaryFloatDecisionNode(featureNameIndex,floatCriterion,featureDefinition);break;case ByteDecisionNode:numChildren=raf.readInt();if (featureDefinition.getNumberOfValues(featureNameIndex) != numChildren) {throw new IOException("Inconsistent cart file: feature " + featureDefinition.getFeatureName(featureNameIndex) + " should have "+ featureDefinition.getNumberOfValues(featureNameIndex)+ " values, but decision node "+ i+ " has only "+ numChildren+ " child nodes");}dns[i]=new DecisionNode.ByteDecisionNode(featureNameIndex,numChildren,featureDefinition);break;case ShortDecisionNode:numChildren=raf.readInt();if (featureDefinition.getNumberOfValues(featureNameIndex) != numChildren) {throw new IOException("Inconsistent cart file: feature " + featureDefinition.getFeatureName(featureNameIndex) + " should have "+ featureDefinition.getNumberOfValues(featureNameIndex)+ " values, but decision node "+ i+ " has only "+ numChildren+ " child nodes");}dns[i]=new DecisionNode.ShortDecisionNode(featureNameIndex,numChildren,featureDefinition);}childIndexes[i]=new int[numChildren];for (int k=0; k < numChildren; k++) {childIndexes[i][k]=raf.readInt();}}int numLeafNodes=raf.readInt();LeafNode[] lns=new LeafNode[numLeafNodes];for (int j=0; j < numLeafNodes; j++) {int leafTypeNr=raf.readInt();LeafNode.LeafType leafNodeType=LeafNode.LeafType.values()[leafTypeNr];switch (leafNodeType) {case IntArrayLeafNode:int numData=raf.readInt();int[] data=new int[numData];for (int d=0; d < numData; d++) {data[d]=raf.readInt();}lns[j]=new LeafNode.IntArrayLeafNode(data);break;case FloatLeafNode:float stddev=raf.readFloat();float mean=raf.readFloat();lns[j]=new LeafNode.FloatLeafNode(new float[]{stddev,mean});break;case IntAndFloatArrayLeafNode:case StringAndFloatLeafNode:int numPairs=raf.readInt();int[] ints=new int[numPairs];float[] floats=new float[numPairs];for (int d=0; d < numPairs; d++) {ints[d]=raf.readInt();floats[d]=raf.readFloat();}if (leafNodeType == LeafNode.LeafType.IntAndFloatArrayLeafNode) lns[j]=new LeafNode.IntAndFloatArrayLeafNode(ints,floats); else lns[j]=new LeafNode.StringAndFloatLeafNode(ints,floats);break;case FeatureVectorLeafNode:throw new IllegalArgumentException("Reading feature vector leaf nodes is not yet implemented");case PdfLeafNode:throw new IllegalArgumentException("Reading pdf leaf nodes is not yet implemented");}}for (int i=0; i < numDecNodes; i++) {for (int k=0; k < childIndexes[i].length; k++) {int childIndex=childIndexes[i][k];if (childIndex < 0) {assert -childIndex - 1 < numDecNodes;dns[i].addDaughter(dns[-childIndex - 1]);} else if (childIndex > 0) {dns[i].addDaughter(lns[childIndex - 1]);} else {dns[i].addDaughter(null);}}}Node rootNode;if (dns.length > 0) {rootNode=dns[0];((DecisionNode)rootNode).countData();} else if (lns.length > 0) {rootNode=lns[0];} else {rootNode=null;}return new CART(rootNode,featureDefinition,props);}  }
class C{  public static String millisecondsToHours(long millis){  return String.format(Locale.getDefault(),"%02d:%02d",TimeUnit.MILLISECONDS.toHours(millis),TimeUnit.MILLISECONDS.toMinutes(millis) % TimeUnit.HOURS.toMinutes(1));}  }
class C{  public CompositeTupleSet(){  this(true);}  }
class C{  private void decreaseCounter(NotifyContext notifyContext){  if (notifyContext.countDec()) {    try {      _filterManager.invokeFilters(FilterOperationCodes.AFTER_ALL_NOTIFY_TRIGGER,null,notifyContext);    } catch (    Exception e) {      if (_logger.isLoggable(Level.FINE))       _logger.log(Level.FINE,"Exception was thrown by filter on AFTER_ALL_NOTIFY_TRIGGER.",e);    }  }}  }
class C{  public static double[] correlate(final double[] signal1,final double[] signal2){  if (signal1 == null || signal2 == null)   throw new NullPointerException("Received null argument");  if (signal1.length != signal2.length)   throw new IllegalArgumentException("Arrays must be equal length");  int N=signal1.length;  assert MathUtils.isPowerOfTwo(N);  double[] fft1=new double[N];  System.arraycopy(signal1,0,fft1,0,N);  double[] fft2=new double[N];  System.arraycopy(signal2,0,fft2,0,N);  realTransform(fft1,false);  realTransform(fft2,false);  fft1[0]=fft1[0] * fft2[0];  fft1[1]=fft1[1] * fft2[1];  for (int i=2; i < N; i+=2) {    double tmp=fft1[i];    fft1[i]=fft1[i] * fft2[i] + fft1[i + 1] * fft2[i + 1];    fft1[i + 1]=tmp * fft2[i + 1] - fft1[i + 1] * fft2[i];  }  realTransform(fft1,true);  return fft1;}  }
class C{  private void handleIgnoredTag(boolean opening,Editable output){  int len=output.length();  if (opening) {    output.setSpan(new Annotation(IGNORED_ANNOTATION_KEY,IGNORED_ANNOTATION_VALUE),len,len,Spanned.SPAN_MARK_MARK);  } else {    Object start=getOpeningAnnotation(output);    if (start != null) {      int where=output.getSpanStart(start);      output.removeSpan(start);      output.delete(where,len);    }  }}  }
class C{  public static float trapeze(float t,float a,float aT,float b,float bT,float c,float cT,float d,float dT){  if (t < aT) {    return a;  }  if (t >= aT && t < bT) {    float norm=normalize(t,aT,bT);    return a + norm * (b - a);  }  if (t >= bT && t < cT) {    float norm=normalize(t,bT,cT);    return b + norm * (c - b);  }  if (t >= cT && t <= dT) {    float norm=normalize(t,cT,dT);    return c + norm * (d - c);  }  return d;}  }
class C{  private List<Metrics> aggregate(Map<Metrics,List<ManagedLedgerImpl>> ledgersByDimension){  List<Metrics> metricsCollection=Lists.newArrayList();  for (  Entry<Metrics,List<ManagedLedgerImpl>> e : ledgersByDimension.entrySet()) {    Metrics metrics=e.getKey();    List<ManagedLedgerImpl> ledgers=e.getValue();    Map<String,List<Double>> aggregatedMetricsMap=Maps.newHashMap();    for (    ManagedLedgerImpl ledger : ledgers) {      ManagedLedgerMXBean lStats=ledger.getStats();      populateAggregationMap(aggregatedMetricsMap,"brk_ml_AddEntryBytesRate",lStats.getAddEntryBytesRate());      populateAggregationMap(aggregatedMetricsMap,"brk_ml_AddEntryErrors",(double)lStats.getAddEntryErrors());      populateAggregationMap(aggregatedMetricsMap,"brk_ml_AddEntryMessagesRate",lStats.getAddEntryMessagesRate());      populateAggregationMap(aggregatedMetricsMap,"brk_ml_AddEntrySucceed",(double)lStats.getAddEntrySucceed());      populateAggregationMap(aggregatedMetricsMap,"brk_ml_NumberOfMessagesInBacklog",(double)lStats.getNumberOfMessagesInBacklog());      populateAggregationMap(aggregatedMetricsMap,"brk_ml_ReadEntriesBytesRate",lStats.getReadEntriesBytesRate());      populateAggregationMap(aggregatedMetricsMap,"brk_ml_ReadEntriesErrors",(double)lStats.getReadEntriesErrors());      populateAggregationMap(aggregatedMetricsMap,"brk_ml_ReadEntriesRate",lStats.getReadEntriesRate());      populateAggregationMap(aggregatedMetricsMap,"brk_ml_ReadEntriesSucceeded",(double)lStats.getReadEntriesSucceeded());      populateAggregationMap(aggregatedMetricsMap,"brk_ml_StoredMessagesSize",(double)lStats.getStoredMessagesSize());      populateBucketEntries(aggregatedMetricsMap,"brk_ml_AddEntryLatencyBuckets",ENTRY_LATENCY_BUCKETS_MS,lStats.getAddEntryLatencyBuckets());      populateBucketEntries(aggregatedMetricsMap,"brk_ml_LedgerSwitchLatencyBuckets",ENTRY_LATENCY_BUCKETS_MS,lStats.getLedgerSwitchLatencyBuckets());      populateBucketEntries(aggregatedMetricsMap,"brk_ml_EntrySizeBuckets",ENTRY_SIZE_BUCKETS_BYTES,lStats.getEntrySizeBuckets());      populateAggregationMap(aggregatedMetricsMap,"brk_ml_MarkDeleteRate",lStats.getMarkDeleteRate());    }    for (    Entry<String,List<Double>> ma : aggregatedMetricsMap.entrySet()) {      String metricsName=ma.getKey();      Double metricsValue=sum(ma.getValue());      metrics.put(metricsName,metricsValue);    }    metricsCollection.add(metrics);  }  return metricsCollection;}  }
class C{  protected void postProcessEntity(T entity,WebOptions options,Map<String,String> parameters) throws Exception {}  }
class C{  @Override public void replaceData(int offset,int count,String arg) throws DOMException {  throw new DOMException(DOMException.NOT_SUPPORTED_ERR,"Method not supported");}  }
class C{  @Override public boolean hasFixedPropertiesArray(){  return true;}  }
class C{  public NameFileFilter(List<String> names,IOCase caseSensitivity){  if (names == null) {    throw new IllegalArgumentException("The list of names must not be null");  }  this.names=names.toArray(new String[names.size()]);  this.caseSensitivity=caseSensitivity == null ? IOCase.SENSITIVE : caseSensitivity;}  }
class C{  public AemRadioGroup selectByLabel(String label){  for (  AemRadioOption option : values) {    if (label.equals(option.getLabel())) {      option.setSelected();      break;    }  }  return this;}  }
class C{  public static void showProgressDialog(final Context context,final String message){  showProgressDialog(context,DEFAULT_TAG,message);}  }
class C{  public void addToAggregate(int row,VisualItem member){  validRowCheck(row,true);  if (!aggregateContains(row,member)) {    int ar=m_aggregated.addRow();    m_aggregated.setInt(ar,AGGREGATE,row);    m_aggregated.setInt(ar,MEMBER_HASH,getHashCode(member));    m_aggregated.set(ar,MEMBER,member);    fireTableEvent(row,row,EventConstants.ALL_COLUMNS,EventConstants.UPDATE);  }}  }
class C{  private static float centerFromEnd(int[] stateCount,int end){  return (float)(end - stateCount[4] - stateCount[3]) - stateCount[2] / 2.0f;}  }
class C{  public static String clearCart(HttpServletRequest request,HttpServletResponse response){  ShoppingCart cart=getCartObject(request);  cart.clear();  HttpSession session=request.getSession();  GenericValue userLogin=(GenericValue)session.getAttribute("userLogin");  if (userLogin != null && "anonymous".equals(userLogin.get("userLoginId"))) {    Locale locale=UtilHttp.getLocale(session);    session.invalidate();    session=request.getSession(true);    if (null != locale) {      UtilHttp.setLocale(session,locale);    }    request.setAttribute("temporaryAnonymousUserLogin",userLogin);    session.setAttribute("userLogin",userLogin);    Debug.logInfo("Scipio: Doing clearCart for anonymous user, but leaving anonymous user login in session (partyId: '" + userLogin.getString("partyId") + "'",module);  }  return "success";}  }
class C{  private void internalRenderStyle(){  if (!underTest) {    wmsEnvVarValues.setImageWidth(mapPane.getWidth());    wmsEnvVarValues.setImageHeight(mapPane.getHeight());    StyledLayerDescriptor sld=SelectedSymbol.getInstance().getSld();    MapContent mapContent=mapPane.getMapContent();    if (mapContent == null) {      mapContent=new MapContent();      mapPane.setMapContent(mapContent);    }    if (sld != null) {      List<StyledLayer> styledLayerList=sld.layers();      for (      StyledLayer styledLayer : styledLayerList) {        List<org.geotools.styling.Style> styleList=null;        if (styledLayer instanceof NamedLayerImpl) {          NamedLayerImpl namedLayerImpl=(NamedLayerImpl)styledLayer;          styleList=namedLayerImpl.styles();        } else         if (styledLayer instanceof UserLayerImpl) {          UserLayerImpl userLayerImpl=(UserLayerImpl)styledLayer;          styleList=userLayerImpl.userStyles();        }        if (styleList != null) {          for (          Style style : styleList) {            renderSymbol(mapContent,styledLayer,style);          }        }      }    }  }}  }
class C{  public static ZKLogMetadataForReader of(URI uri,String logName,String logIdentifier){  return new ZKLogMetadataForReader(uri,logName,logIdentifier);}  }
class C{  public void addEntry(LocalVarEntry e){  vars.addElement(e);}  }
class C{  public static void writeStringToFile(File file,String data,Charset encoding,boolean append) throws IOException {  OutputStream out=null;  try {    out=openOutputStream(file,append);    IOUtils.write(data,out,encoding);    out.close();  }  finally {    IOUtils.closeQuietly(out);  }}  }
class C{  @MediumTest public void testPreconditions(){  assertNotNull(mAppTextView1);  assertNotNull(mAppTextView2);}  }
class C{  public EsSupervisionMapping(){  mappings=new SupervisionProperties();}  }
class C{  protected final float calculateModuleSize(ResultPoint topLeft,ResultPoint topRight,ResultPoint bottomLeft){  return (calculateModuleSizeOneWay(topLeft,topRight) + calculateModuleSizeOneWay(topLeft,bottomLeft)) / 2.0f;}  }
class C{  public Bundler putParcelableArrayList(String key,ArrayList<? extends Parcelable> value){  bundle.putParcelableArrayList(key,value);  return this;}  }
class C{  private void buildPathForAbstraction(final AbstractionAtSink abs){  SourceContextAndPath scap=new SourceContextAndPath(abs.getAbstraction().getAccessPath(),abs.getSinkStmt());  scap=scap.extendPath(abs.getAbstraction());  abs.getAbstraction().addPathElement(scap);  if (!checkForSource(abs.getAbstraction(),scap))   executor.execute(new SourceFindingTask(abs.getAbstraction()));}  }
class C{  public byte[] download_file(String group_name,String remote_filename) throws IOException, MyException {  final long file_offset=0;  final long download_bytes=0;  return this.download_file(group_name,remote_filename,file_offset,download_bytes);}  }
class C{  public AdsGetCampaignsQuery clientId(Integer value){  return unsafeParam("client_id",value);}  }
class C{  public static String fileNameClean(String s){  char[] chars=s.toCharArray();  StringBuilder sb=new StringBuilder();  for (  char c : chars) {    if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || (c >= '0' && c <= '9')|| (c == '_')) {      sb.append(c);    } else {      if (c == ' ' || c == '-') {        sb.append('_');      } else {        sb.append("x" + (int)c + "x");      }    }  }  return sb.toString();}  }
class C{  public ScopedElementLocatorFactory(WebDriver webDriver,ElementLocatorFactory parentFactory,Field parentField){  this.parentFactory=parentFactory;  this.parentField=parentField;  this.webDriver=webDriver;}  }
class C{  public SREntry(String internedSymbol,SREntry next,int bucket,ReferenceQueue q){  super(new SREntryData(internedSymbol),q);  initialize(next,bucket);}  }
class C{  public void onMethodEnter(@NotNull String methodName){  myCodeStructure.add(methodName);}  }
class C{  public static byte[] decompressForZlib(byte[] bytesToDecompress){  byte[] returnValues=null;  Inflater inflater=new Inflater();  int numberOfBytesToDecompress=bytesToDecompress.length;  inflater.setInput(bytesToDecompress,0,numberOfBytesToDecompress);  int bufferSizeInBytes=numberOfBytesToDecompress;  int numberOfBytesDecompressedSoFar=0;  List<Byte> bytesDecompressedSoFar=new ArrayList<Byte>();  try {    while (inflater.needsInput() == false) {      byte[] bytesDecompressedBuffer=new byte[bufferSizeInBytes];      int numberOfBytesDecompressedThisTime=inflater.inflate(bytesDecompressedBuffer);      numberOfBytesDecompressedSoFar+=numberOfBytesDecompressedThisTime;      for (int b=0; b < numberOfBytesDecompressedThisTime; b++) {        bytesDecompressedSoFar.add(bytesDecompressedBuffer[b]);      }    }    returnValues=new byte[bytesDecompressedSoFar.size()];    for (int b=0; b < returnValues.length; b++) {      returnValues[b]=(byte)(bytesDecompressedSoFar.get(b));    }  } catch (  DataFormatException dfe) {    dfe.printStackTrace();  }  inflater.end();  return returnValues;}  }
class C{  public static Zmat o(Z z,Zmat A){  Zmat B=new Zmat(A.nrow,A.ncol);  for (int i=0; i < A.nrow; i++)   for (int j=0; j < A.ncol; j++) {    B.re[i][j]=z.re * A.re[i][j] - z.im * A.im[i][j];    B.im[i][j]=z.im * A.re[i][j] + z.re * A.im[i][j];  }  return B;}  }
class C{  public void exceptionInListener() throws Exception {  TestExceptionActivitiEventListener listener=new TestExceptionActivitiEventListener(false);  TestActivitiEventListener secondListener=new TestActivitiEventListener();  dispatcher.addEventListener(listener);  dispatcher.addEventListener(secondListener);  ActivitiEventImpl event=new ActivitiEventImpl(ActivitiEventType.ENTITY_CREATED);  try {    dispatcher.dispatchEvent(event);    assertEquals(1,secondListener.getEventsReceived().size());  } catch (  Throwable t) {    fail("No exception expected");  }  dispatcher.removeEventListener(listener);  dispatcher.removeEventListener(secondListener);  listener=new TestExceptionActivitiEventListener(true);  secondListener=new TestActivitiEventListener();  dispatcher.addEventListener(listener);  dispatcher.addEventListener(secondListener);  try {    dispatcher.dispatchEvent(event);    fail("Exception expected");  } catch (  Throwable t) {    assertTrue(t instanceof ActivitiException);    assertTrue(t.getCause() instanceof RuntimeException);    assertEquals("Test exception",t.getCause().getMessage());    assertEquals(0,secondListener.getEventsReceived().size());  }}  }
class C{  public boolean isReachable(){  return method.isReachable();}  }
class C{  @Override public void onDateSet(DatePicker view,int year,int monthOfYear,int dayOfMonth){  Calendar chosenDate=Calendar.getInstance();  chosenDate.set(Calendar.YEAR,year);  chosenDate.set(Calendar.MONTH,monthOfYear);  chosenDate.set(Calendar.DAY_OF_MONTH,dayOfMonth);  long chosenDateInMillis=chosenDate.getTimeInMillis();  ((FileActivity)getActivity()).getFileOperationsHelper().setExpirationDateToShareViaLink(mFile,chosenDateInMillis);}  }
class C{  public String[] parseConfiguration(Document document){  NodeList nList=document.getElementsByTagName("Configuration");  if (nList.getLength() == 0) {    nList=document.getElementsByTagName("configuration");  }  if (nList.getLength() == 0) {    nList=document.getElementsByTagName("Overrides");  }  if (nList.getLength() == 0) {    nList=document.getElementsByTagName("overrides");  }  List configList=new ArrayList();  for (int i=0; i < nList.getLength(); i++) {    Element element=(Element)nList.item(i);    configList.addAll(parseConfiguration(element));  }  return ((String[])configList.toArray(new String[configList.size()]));}  }
class C{  public BeanLevelPropertyBeanPostProcessor(BeanLevelProperties beanLevelProperties){  this.beanLevelProperties=beanLevelProperties;}  }
class C{  private int extractValue(List<String> outputList,String suffix){  if (!outputList.isEmpty()) {    String value=outputList.get(0);    if (value.endsWith(suffix)) {      outputList.remove(0);      return Integer.valueOf(value.substring(0,value.length() - 1)).intValue();    }  }  return 0;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_DAY_CANNOT_RECEIVE_MAIL(String value0){  return new SM_SYSTEM_MESSAGE(1400947,value0);}  }
class C{  public static int copy(File src,File dest) throws IOException {  return copy(new FileInputStream(src),new FileOutputStream(dest),true);}  }
class C{  public final static byte[] base64Decode(byte[] data){  if (data == null) {    return null;  }  int tail=data.length;  while (data[tail - 1] == '=') {    tail--;  }  byte dest[]=new byte[tail - data.length / 4];  for (int idx=0; idx < data.length; idx++) {    data[idx]=Base64DecMap[data[idx]];  }  int sidx, didx;  for (sidx=0, didx=0; didx < dest.length - 2; sidx+=4, didx+=3) {    dest[didx]=(byte)(((data[sidx] << 2) & 255) | ((data[sidx + 1] >>> 4) & 003));    dest[didx + 1]=(byte)(((data[sidx + 1] << 4) & 255) | ((data[sidx + 2] >>> 2) & 017));    dest[didx + 2]=(byte)(((data[sidx + 2] << 6) & 255) | (data[sidx + 3] & 077));  }  if (didx < dest.length) {    dest[didx]=(byte)(((data[sidx] << 2) & 255) | ((data[sidx + 1] >>> 4) & 003));  }  if (++didx < dest.length) {    dest[didx]=(byte)(((data[sidx + 1] << 4) & 255) | ((data[sidx + 2] >>> 2) & 017));  }  return dest;}  }
class C{  public static String toBinaryString(int num){  String binaryString=Integer.toBinaryString(num);  LogUtils.debug(String.format("%d to binary string is %s",num,binaryString));  return binaryString;}  }
class C{  public static boolean isXML11InternalEntityContent(int c){  return (c < 0x10000 && (XML11CHARS[c] & MASK_XML11_CONTENT_INTERNAL) != 0) || (0x10000 <= c && c <= 0x10FFFF);}  }
class C{  @Override public ParetoDistribution makeDistribution(){  return new ParetoDistribution(2.1,1.4);}  }
class C{  public static StateListDrawable btnSelector(float radius,int normalColor,int pressColor,int postion){  StateListDrawable bg=new StateListDrawable();  Drawable normal=null;  Drawable pressed=null;  if (postion == 0) {    normal=cornerDrawable(normalColor,new float[]{0,0,0,0,0,0,radius,radius});    pressed=cornerDrawable(pressColor,new float[]{0,0,0,0,0,0,radius,radius});  } else   if (postion == 1) {    normal=cornerDrawable(normalColor,new float[]{0,0,0,0,radius,radius,0,0});    pressed=cornerDrawable(pressColor,new float[]{0,0,0,0,radius,radius,0,0});  } else   if (postion == -1) {    normal=cornerDrawable(normalColor,new float[]{0,0,0,0,radius,radius,radius,radius});    pressed=cornerDrawable(pressColor,new float[]{0,0,0,0,radius,radius,radius,radius});  } else   if (postion == -2) {    normal=cornerDrawable(normalColor,radius);    pressed=cornerDrawable(pressColor,radius);  }  bg.addState(new int[]{-android.R.attr.state_pressed},normal);  bg.addState(new int[]{android.R.attr.state_pressed},pressed);  return bg;}  }
class C{  @Override public void endDocument(Augmentations augs) throws XNIException {  if (fDocumentHandler != null) {    fDocumentHandler.endDocument(augs);  }}  }
class C{  public static void forkResourceValue(@NotNull Project project,@NotNull XmlTag tag,@NotNull PsiFile file,@Nullable PsiDirectory dir,boolean open){  PsiDirectory resFolder=findRes(file);  if (resFolder == null) {    return;  }  String name=tag.getAttributeValue(ATTR_NAME);  ResourceType type=AndroidResourceUtil.getResourceForResourceTag(tag);  if (name == null || type == null) {    return;  }  if (dir == null) {    dir=selectFolderDir(project,resFolder.getVirtualFile(),ResourceFolderType.VALUES);  }  if (dir != null) {    String value=ResourceHelper.getTextContent(tag).trim();    createValueResource(project,resFolder,file,dir,name,value,type,tag.getText(),open);  }}  }
class C{  private static String copyPluginJarToSandbox(File jar,String buildNumber,String sandboxPath) throws ExecutionException {  IdeaPluginDescriptor pluginDescriptor=PluginManagerCore.loadDescriptor(jar,"plugin.xml");  if (PluginManagerCore.isIncompatible(pluginDescriptor,BuildNumber.fromString(buildNumber))) {    throw new ExecutionException(String.format("Plugin SDK version '%s' is incompatible with this plugin " + "(since: '%s', until: '%s')",buildNumber,pluginDescriptor.getSinceBuild(),pluginDescriptor.getUntilBuild()));  }  File pluginJarDestination=pluginDestination(jar,sandboxPath);  try {    pluginJarDestination.getParentFile().mkdirs();    Files.copy(jar.toPath(),pluginJarDestination.toPath(),StandardCopyOption.REPLACE_EXISTING);  } catch (  IOException e) {    throw new ExecutionException("Error copying plugin jar to sandbox",e);  }  return pluginDescriptor.getPluginId().getIdString();}  }
class C{  @ManagedOperation(description="Refreshes all supervision status.") public void refreshSupervisionStatus(){  LOGGER.info("Recovery task: notifying all supervision listeners of current status.");  supervisionFacade.refreshAllSupervisionStatus();  LOGGER.info("Recovery task: finished notifying supervision status (notice all alarms are now re-evaluated on a separate thread" + " - this may take some time!)");}  }
class C{  public static List<User> loadByAccess(String access){  Beans<Role> bs=Role.loadByAccess(access,0,1000);  W q=W.create();  if (bs != null && bs.getList() != null) {    if (bs.getList().size() > 1) {      W list=W.create();      for (      Role a : bs.getList()) {        list.or("rid",a.getId());      }      q.and(list);    } else     if (bs.getList().size() == 1) {      q.and("rid",bs.getList().get(0).getId());    }  }  Beans<UserRole> b2=Helper.load(q,0,1000,UserRole.class);  q=W.create();  if (b2 != null && b2.getList() != null) {    if (b2.getList().size() > 1) {      W list=W.create();      for (      UserRole a : b2.getList()) {        list.or("id",a.getLong("uid"));      }      q.and(list);    } else     if (b2.getList().size() == 1) {      q.and("id",b2.getList().get(0).getLong("uid"));    }  }  q.and("deleted",1,W.OP_NEQ);  Beans<User> us=Helper.load(q.sort("name",1),0,Integer.MAX_VALUE,User.class);  return us == null ? null : us.getList();}  }
class C{  public boolean hasExperienceReward(){  return experienceReward;}  }
class C{  protected void configurePipeline(){  if (fCurrentDVFactory != fDatatypeValidatorFactory) {    fCurrentDVFactory=fDatatypeValidatorFactory;    setProperty(DATATYPE_VALIDATOR_FACTORY,fCurrentDVFactory);  }  if (fCurrentDTDScanner != fDTDScanner) {    fCurrentDTDScanner=fDTDScanner;    setProperty(DTD_SCANNER,fCurrentDTDScanner);  }  fDTDScanner.setDTDHandler(fDTDHandler);  fDTDScanner.setDTDContentModelHandler(fDTDContentModelHandler);  if (fFeatures.get(NAMESPACES) == Boolean.TRUE) {    if (fCurrentScanner != fNamespaceScanner) {      fCurrentScanner=fNamespaceScanner;      setProperty(DOCUMENT_SCANNER,fNamespaceScanner);    }    fNamespaceScanner.setDTDValidator(null);    fNamespaceScanner.setDocumentHandler(fDocumentHandler);    if (fDocumentHandler != null) {      fDocumentHandler.setDocumentSource(fNamespaceScanner);    }    fLastComponent=fNamespaceScanner;  } else {    if (fNonNSScanner == null) {      fNonNSScanner=new XMLDocumentScannerImpl();      addComponent(fNonNSScanner);    }    if (fCurrentScanner != fNonNSScanner) {      fCurrentScanner=fNonNSScanner;      setProperty(DOCUMENT_SCANNER,fNonNSScanner);    }    fNonNSScanner.setDocumentHandler(fDocumentHandler);    if (fDocumentHandler != null) {      fDocumentHandler.setDocumentSource(fNonNSScanner);    }    fLastComponent=fNonNSScanner;  }}  }
class C{  private static String parseIdentifierEscape(String stmt,int offset){  StringBuilder sb=new StringBuilder();  loop:   for (++offset; offset < stmt.length(); ++offset) {    char c=stmt.charAt(offset);    if (c == '`') {      if (offset + 1 < stmt.length() && stmt.charAt(offset + 1) == '`') {        ++offset;        sb.append('`');      } else {        break loop;      }    } else {      sb.append(c);    }  }  return sb.toString();}  }
class C{  public WallSearchQuery search(UserActor actor){  return new WallSearchQuery(getClient(),actor);}  }
class C{  protected void syncSummaryView(PreferenceViewHolder holder){  View view=holder.findViewById(android.R.id.summary);  syncSummaryView(view);}  }
class C{  public static void i(Class<?> clazz,String msg){  if (isDebug) {    Log.i(clazz.getSimpleName(),msg);  }}  }
class C{  @Override public boolean checkCanSwipeBack(int dir){  return view.checkCanSwipeBack(dir);}  }
class C{  public static String[] exclude(String... includes){  return includes;}  }
class C{  private String normalizeResourceName(String sName){  return sName.replace('\\','/');}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase(getSyntax());  final ImportBlastDialog dialog=new ImportBlastDialog(getViewer().getFrame(),getDir(),"Import BLAST and READs files - MEGAN");  final String command=dialog.showAndGetCommand();  if (command != null)   execute(command);}  }
class C{  public void schedule(String serviceName,Map<String,? extends Object> context,long startTime,int frequency,int interval,int count) throws JobManagerException {  schedule(serviceName,context,startTime,frequency,interval,count,0);}  }
class C{  public boolean isAtSpawnLocation(){  return getDistanceToSpawnLocation() < 3;}  }
class C{  @Override public void close() throws IOException {  fInputStream.close();}  }
class C{  public boolean aggregationLevelIsValid(int organisationUnitLevel,int dataValueLevel){  if (aggregationLevels.size() == 0) {    return true;  }  final Integer aggregationLevel=getRelevantAggregationLevel(organisationUnitLevel);  return aggregationLevel == null || dataValueLevel <= aggregationLevel;}  }
class C{  public void initResultsEntryPackets(){  _results=!accumulate() ? null : new IEntryPacket[((AbstractIdsQueryPacket)_template).getIds().length];}  }
class C{  public int size(){  return names.size();}  }
class C{  public Map<String,byte[]> readAuxBlocks() throws IOException {  final Map<String,byte[]> label2data=new HashMap<>();  readerWriter.seek(footerSectionRMA6.getStartAuxDataSection());  final int count=readerWriter.readInt();  for (int i=0; i < count && readerWriter.getPosition() < footerSectionRMA6.getEndAuxDataSection(); i++) {    String name=readerWriter.readString();    int length=readerWriter.readInt();    byte[] bytes=new byte[length];    readerWriter.read(bytes,0,length);    label2data.put(name,bytes);  }  return label2data;}  }
class C{  @deprecated public static BigDecimal toBigDecimalTrunc(BigDecimal universalTime,int timeScale){  TimeScaleData data=getTimeScaleData(timeScale);  BigDecimal units=new BigDecimal(data.units);  BigDecimal epochOffset=new BigDecimal(data.epochOffset);  return universalTime.divide(units,1).subtract(epochOffset);}  }
class C{  private void handleOpTimeoutH(){switch (mVerb) {case VERB_BINDING:    closeAndCleanupJobH(false);  break;case VERB_STARTING:closeAndCleanupJobH(false);break;case VERB_STOPPING:closeAndCleanupJobH(true);break;case VERB_EXECUTING:sendStopMessageH();break;default :closeAndCleanupJobH(false);}}  }
class C{  default boolean hasDataFromCommand(){  return false;}  }
class C{  private void removeSticky(WXComponent component){  WXCell headComponent=headComponentStack.pop();  if (!component.getRef().equals(headComponent.getRef())) {    headComponentStack.push(headComponent);    return;  }  View headerView=headerViewStack.pop();  ((ViewGroup)getParent()).removeView(headerView);  headComponent.recoverySticky();}  }
class C{  public void close() throws IOException {  if (fReader != null) {    fReader.close();    fReader=null;  }}  }
class C{  public PrefixFileFilter(String[] prefixes){  this(prefixes,IOCase.SENSITIVE);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_CANT_BE_MENTOR(String worldname0){  return new SM_SYSTEM_MESSAGE(1400769,worldname0);}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();  if (subSignature.equals("void arraycopy(java.lang.Object,int,java.lang.Object,int,int)")) {    java_lang_System_arraycopy(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("void setIn0(java.io.InputStream)")) {    java_lang_System_setIn0(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("void setOut0(java.io.PrintStream)")) {    java_lang_System_setOut0(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("void setErr0(java.io.PrintStream)")) {    java_lang_System_setErr0(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.util.Properties initProperties(java.util.Properties)")) {    java_lang_System_initProperties(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.lang.String mapLibraryName(java.lang.String)")) {    java_lang_System_mapLibraryName(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.lang.Class getCallerClass()")) {    java_lang_System_getCallerClass(method,thisVar,returnVar,params);    return;  } else {    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  private void createSource(@NotNull String url,@Nullable String uiName){  RepositorySourceProvider userSourceProvider=getUserSourceProvider();  assert userSourceProvider != null;  RepositorySource newSource=new SimpleRepositorySource(url,uiName,true,ImmutableList.of(AndroidSdkHandler.getAddonModule(),AndroidSdkHandler.getSysImgModule(),RepoManager.getCommonModule()),userSourceProvider);  userSourceProvider.addSource(newSource);  refreshUi();}  }
class C{  public void updateTimestamp(long timestamp){  mTimestamps[mBufferIn]=timestamp;  setLong(mBuffers[mBufferIn],(timestamp / 100L) * (mClock / 1000L) / 10000L,4,8);}  }
class C{  private void initCreateGameDBSchema() throws SQLException {  ResultSet rs;  rs=stmt.executeQuery("show tables from test like'tictactoc'");  if (false == rs.next()) {    String sql="CREATE TABLE tictactoc " + "(id varchar(10) not NULL, " + " win integer(1), "+ " defeat integer(1), "+ " playtimes integer(1), "+ " PRIMARY KEY ( id ),"+ "FOREIGN KEY (id) REFERENCES userinformation (id)) Engine=Innodb default charset = utf8";    stmt.executeUpdate(sql);  }  rs=stmt.executeQuery("show tables from test like'catchme'");  if (false == rs.next()) {    String sql="CREATE TABLE catchme " + "(id varchar(10) not NULL, " + " win integer(1), "+ " defeat integer(1), "+ " playtimes integer(1), "+ " PRIMARY KEY ( id ),"+ "FOREIGN KEY (id) REFERENCES userinformation (id)) Engine=Innodb default charset = utf8";    stmt.executeUpdate(sql);  }  rs=stmt.executeQuery("show tables from test like'meteor'");  if (false == rs.next()) {    String sql="CREATE TABLE meteor " + "(id varchar(10) not NULL, " + " win integer(1), "+ " defeat integer(1), "+ " playtimes integer(1), "+ " PRIMARY KEY ( id ),"+ "FOREIGN KEY (id) REFERENCES userinformation (id)) Engine=Innodb default charset = utf8";    stmt.executeUpdate(sql);  }  rs=stmt.executeQuery("show tables from test like'pangpang'");  if (false == rs.next()) {    String sql="CREATE TABLE pangpang " + "(id varchar(10) not NULL, " + " win integer(1), "+ " defeat integer(1), "+ " playtimes integer(1), "+ " score integer(10), "+ " PRIMARY KEY ( id ),"+ "FOREIGN KEY (id) REFERENCES userinformation (id)) Engine=Innodb default charset = utf8";    stmt.executeUpdate(sql);  }}  }
class C{  public byte[] extractFingerprint(Wave wave){  int[][] coordinates;  byte[] fingerprint=new byte[0];  Resampler resampler=new Resampler();  int sourceRate=wave.getWaveHeader().getSampleRate();  int targetRate=fingerprintProperties.getSampleRate();  byte[] resampledWaveData=resampler.reSample(wave.getBytes(),wave.getWaveHeader().getBitsPerSample(),sourceRate,targetRate);  WaveHeader resampledWaveHeader=wave.getWaveHeader();  resampledWaveHeader.setSampleRate(targetRate);  Wave resampledWave=new Wave(resampledWaveHeader,resampledWaveData);  Spectrogram spectrogram=resampledWave.getSpectrogram(sampleSizePerFrame,overlapFactor);  double[][] spectorgramData=spectrogram.getNormalizedSpectrogramData();  List<Integer>[] pointsLists=getRobustPointList(spectorgramData);  int numFrames=pointsLists.length;  coordinates=new int[numFrames][numRobustPointsPerFrame];  for (int x=0; x < numFrames; x++) {    if (pointsLists[x].size() == numRobustPointsPerFrame) {      Iterator<Integer> pointsListsIterator=pointsLists[x].iterator();      for (int y=0; y < numRobustPointsPerFrame; y++) {        coordinates[x][y]=pointsListsIterator.next();      }    } else {      for (int y=0; y < numRobustPointsPerFrame; y++) {        coordinates[x][y]=-1;      }    }  }  List<Byte> byteList=new LinkedList<Byte>();  for (int i=0; i < numFrames; i++) {    for (int j=0; j < numRobustPointsPerFrame; j++) {      if (coordinates[i][j] != -1) {        byteList.add((byte)(i >> 8));        byteList.add((byte)i);        int y=coordinates[i][j];        byteList.add((byte)(y >> 8));        byteList.add((byte)y);        int intensity=(int)(spectorgramData[i][y] * Integer.MAX_VALUE);        byteList.add((byte)(intensity >> 24));        byteList.add((byte)(intensity >> 16));        byteList.add((byte)(intensity >> 8));        byteList.add((byte)intensity);      }    }  }  fingerprint=new byte[byteList.size()];  Iterator<Byte> byteListIterator=byteList.iterator();  int pointer=0;  while (byteListIterator.hasNext()) {    fingerprint[pointer++]=byteListIterator.next();  }  return fingerprint;}  }
class C{  public void swipeCancelled(long time){  if (!mInSwipe)   return;  mDiscardingTab=null;  mInSwipe=false;  setWarpState(true,true);  mEvenOutProgress=0.f;  Tab tab=TabModelUtils.getCurrentTab(mTabModel);  mLayout.uiSelectingTab(time,tab != null ? tab.getId() : Tab.INVALID_TAB_ID);}  }
class C{  public void createKey(SocketChannel channel){  _keysToCreate.add(channel);  _keysToCreateCounter.incrementAndGet();  getSelector().wakeup();}  }
class C{  public boolean showGeolocationSites(){  return mContentSettingsType == ContentSettingsType.CONTENT_SETTINGS_TYPE_GEOLOCATION;}  }
class C{  public void addPage(int position,@NonNull List<MODEL> items){  setAutoNotifyDataSetChanged(false);  addAll(position,items);  setAutoNotifyDataSetChanged(true);  onNewItemsAdded(items.size());  notifyItemRangeInsertedIfNeed(size() - (items.size() + getHeadersCount()),items.size());}  }
class C{  public int toContentSettingsType(){  return mContentSettingsType;}  }
class C{  public VersionManager(final PropertyFileLoader propertyLoader) throws XMLException {  super(PACKAGE,SCHEMA);  this.propertyLoader=propertyLoader;  this.versions=new SpyVersions();  this.currentRelease=propertyLoader.getFullVersionNumber();}  }
class C{  public static void putLong(String key,long value){  prefs.edit().putLong(key,value).commit();}  }
class C{  public RingBuffer<T> start(final Executor executor){  if (!started.compareAndSet(false,true)) {    throw new IllegalStateException("WorkerPool has already been started and cannot be restarted until halted.");  }  final long cursor=ringBuffer.getCursor();  workSequence.set(cursor);  for (  WorkProcessor<?> processor : workProcessors) {    processor.getSequence().set(cursor);    executor.execute(processor);  }  return ringBuffer;}  }
class C{  protected boolean confirmPendingStateRegistration(int retryCount) throws ActiveElectionException {  ServiceTemplate srvTmpl=new ServiceTemplate(_electTemplate._serviceID,new Class[]{Service.class},new Entry[]{new ActiveElectionState(State.PENDING)});  ServiceItem[] srvMatch=_namingService.lookup(srvTmpl,1,null);  if (srvMatch == null || srvMatch.length == 0) {    if (_logger.isLoggable(Level.INFO)) {      _logger.log((retryCount <= 10 ? Level.WARNING : Level.INFO),"Waiting [" + _config.getYieldTime() + " ms] for ["+ State.PENDING+ "] state registration on "+ _namingService.getName()+ " {remaining retries="+ retryCount+ ", registrars="+ _namingService.getNumberOfRegistrars()+ "}");    }    try {      Thread.sleep(_config.getYieldTime());    } catch (    InterruptedException ex) {      Thread.currentThread().interrupt();      throw new ActiveElectionException("ActiveElectionManager process was interrupted.");    }    return false;  } else {    if (_logger.isLoggable(Level.FINE)) {      _logger.fine("[" + State.PENDING + "] state registration successfully confirmed by "+ _namingService.getName());    }    return true;  }}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  public static Map<String,Object> prepareNotification(DispatchContext ctx,Map<String,? extends Object> context){  Delegator delegator=ctx.getDelegator();  String templateName=(String)context.get("templateName");  Map<String,Object> templateData=UtilGenerics.checkMap(context.get("templateData"));  String webSiteId=(String)context.get("webSiteId");  Locale locale=(Locale)context.get("locale");  Map<String,Object> result=null;  if (templateData == null) {    templateData=new LinkedHashMap<String,Object>();  }  try {    setBaseUrl(delegator,webSiteId,templateData);    URL templateUrl=FlexibleLocation.resolveLocation(templateName);    if (templateUrl == null) {      Debug.logError("Problem getting the template URL: " + templateName + " not found",module);      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"CommonNotifyEmailProblemFindingTemplate",locale));    }    Writer writer=new StringWriter();    FreeMarkerWorker.renderTemplate(templateUrl.toExternalForm(),templateData,writer);    String notificationBody=writer.toString();    result=ServiceUtil.returnSuccess(UtilProperties.getMessage(resource,"CommonNotifyEmailMessageBodyGeneratedSuccessfully",locale));    result.put("body",notificationBody);  } catch (  IOException ie) {    Debug.logError(ie,"Problems reading template",module);    result=ServiceUtil.returnError(UtilProperties.getMessage(resource,"CommonNotifyEmailProblemReadingTemplate",locale));  }catch (  TemplateException te) {    Debug.logError(te,"Problems processing template",module);    result=ServiceUtil.returnError(UtilProperties.getMessage(resource,"CommonNotifyEmailProblemProcessingTemplate",locale));  }  return result;}  }
class C{  public int addItemToEnd(String productId,BigDecimal amount,BigDecimal quantity,BigDecimal unitPrice,Timestamp reservStart,BigDecimal reservLength,BigDecimal reservPersonsDbl,String accommodationMapId,String accommodationSpotId,HashMap<String,GenericValue> features,HashMap<String,Object> attributes,String prodCatalogId,ProductConfigWrapper configWrapper,String itemType,LocalDispatcher dispatcher,Boolean triggerExternalOps,Boolean triggerPriceRules,Boolean skipInventoryChecks,Boolean skipProductChecks) throws CartItemModifyException, ItemNotFoundException {  return addItemToEnd(ShoppingCartItem.makeItem(null,productId,amount,quantity,unitPrice,reservStart,reservLength,reservPersonsDbl,accommodationMapId,accommodationSpotId,null,null,features,attributes,prodCatalogId,configWrapper,itemType,null,dispatcher,this,triggerExternalOps,triggerPriceRules,null,skipInventoryChecks,skipProductChecks));}  }
class C{  public static float logAdd(float lx,float ly){  float max, negDiff;  if (lx > ly) {    max=lx;    negDiff=ly - lx;  } else {    max=ly;    negDiff=lx - ly;  }  if (max == Double.NEGATIVE_INFINITY) {    return max;  } else   if (negDiff < -LOGTOLERANCE_F) {    return max;  } else {    return max + (float)Math.log(1.0f + Math.exp(negDiff));  }}  }
class C{  public void assertMatches(Matcher<TrafficLog> matcher){  assertThat(trafficLogProvider.get(),matcher);}  }
class C{  public static byte[] writeShort(short s){  return ByteBuffer.allocate(2).putShort(s).array();}  }
class C{  public int pageCount(){  int count=size();  int pages=count / pageSize;  int mod=count % pageSize;  return mod == 0 ? pages : (pages + 1);}  }
class C{  public static void moveToDirectory(File src,File destDir,boolean createDestDir) throws IOException {  if (src == null) {    throw new NullPointerException("Source must not be null");  }  if (destDir == null) {    throw new NullPointerException("Destination must not be null");  }  if (!src.exists()) {    throw new FileNotFoundException("Source '" + src + "' does not exist");  }  if (src.isDirectory()) {    moveDirectoryToDirectory(src,destDir,createDestDir);  } else {    moveFileToDirectory(src,destDir,createDestDir);  }}  }
class C{  public XMLEntityDescriptionImpl(){}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Deform_ME_TO_SELF(String value0,String skillname){  return new SM_SYSTEM_MESSAGE(1200348,value0,skillname);}  }
class C{  List<String> performCommand(String[] cmdAttribs,int max,long timeout) throws IOException {  List<String> lines=new ArrayList<String>(20);  Process proc=null;  InputStream in=null;  OutputStream out=null;  InputStream err=null;  BufferedReader inr=null;  try {    Thread monitor=ThreadMonitor.start(timeout);    proc=openProcess(cmdAttribs);    in=proc.getInputStream();    out=proc.getOutputStream();    err=proc.getErrorStream();    inr=new BufferedReader(new InputStreamReader(in));    String line=inr.readLine();    while (line != null && lines.size() < max) {      line=line.toLowerCase(Locale.ENGLISH).trim();      lines.add(line);      line=inr.readLine();    }    proc.waitFor();    ThreadMonitor.stop(monitor);    if (proc.exitValue() != 0) {      throw new IOException("Command line returned OS error code '" + proc.exitValue() + "' for command "+ Arrays.asList(cmdAttribs));    }    if (lines.isEmpty()) {      throw new IOException("Command line did not return any info " + "for command " + Arrays.asList(cmdAttribs));    }    return lines;  } catch (  InterruptedException ex) {    throw new IOExceptionWithCause("Command line threw an InterruptedException " + "for command " + Arrays.asList(cmdAttribs) + " timeout="+ timeout,ex);  } finally {    IOUtils.closeQuietly(in);    IOUtils.closeQuietly(out);    IOUtils.closeQuietly(err);    IOUtils.closeQuietly(inr);    if (proc != null) {      proc.destroy();    }  }}  }
class C{  public StandardDocumentComparator(){  sGraph=new GraphSimilarity();  sHistogram=new GraphSimilarity();}  }
class C{  public void sendServerRequests(ServerRequest... serverRequests) throws RemoteServerException, LoginFailedException {  List<Observable<ByteString>> observables=new ArrayList<>(serverRequests.length);  for (  ServerRequest request : serverRequests) {    AsyncServerRequest asyncServerRequest=new AsyncServerRequest(request.getType(),request.getRequest());    observables.add(sendAsyncServerRequests(asyncServerRequest));  }  for (int i=0; i != serverRequests.length; i++) {    serverRequests[i].handleData(AsyncHelper.toBlocking(observables.get(i)));  }}  }
class C{  public static ASBTalismanDialogFragment newInstance(ASBTalisman talisman){  ASBTalismanDialogFragment f=new ASBTalismanDialogFragment();  Bundle args=new Bundle();  args.putInt(ARG_TYPE_INDEX,talisman.getTypeIndex());  args.putInt(ARG_SLOTS,talisman.getNumSlots());  args.putLong(ARG_SKILL_1_ID,talisman.getSkill1().getId());  args.putInt(ARG_SKILL_1_POINTS,talisman.getSkill1Points());  if (talisman.getSkill2() != null) {    args.putLong(ARG_SKILL_2_ID,talisman.getSkill2().getId());    args.putInt(ARG_SKILL_2_POINTS,talisman.getSkill2Points());  } else {    args.putLong(ARG_SKILL_2_ID,-1);  }  f.setArguments(args);  return f;}  }
class C{  public static int exportReadName2Name(String format,ViewerBase cViewer,File file,char separator,ProgressListener progressListener) throws IOException {  int totalLines=0;  try {    final Classification classification=ClassificationManager.get(cViewer.getClassName(),true);    final String shortName=(cViewer.getClassName().toLowerCase().equals("taxonomy") ? "Taxon" : cViewer.getClassName());    try (BufferedWriter w=new BufferedWriter(new FileWriter(file))){      IConnector connector=cViewer.getDocument().getConnector();      java.util.Collection<Integer> ids=cViewer.getSelectedIds();      progressListener.setSubtask("Read names to " + shortName);      progressListener.setMaximum(ids.size());      progressListener.setProgress(0);      final IClassificationBlock classificationBlock=connector.getClassificationBlock(cViewer.getClassName());      if (classificationBlock != null) {        for (        int classId : ids) {          final Set<String> seen=new HashSet<>();          final Set<Integer> allBelow;          Node v=classification.getFullTree().getANode(classId);          if (v.getOutDegree() > 0)           allBelow=classification.getFullTree().getAllDescendants(classId); else {            allBelow=new HashSet<>();            allBelow.add(classId);          }          for (          int id : allBelow) {            if (classificationBlock.getSum(id) > 0) {              try (IReadBlockIterator it=connector.getReadsIterator(cViewer.getClassName(),id,0,10000,true,false)){                while (it.hasNext()) {                  String readId=it.next().getReadName();                  if (!seen.contains(readId)) {                    seen.add(readId);                    w.write(readId + separator + " "+ getLabelTarget(classification,format,v)+ "\n");                    totalLines++;                  }                }              }               progressListener.checkForCancel();            }          }          progressListener.incrementProgress();        }      }    }   } catch (  CanceledException canceled) {    System.err.println("USER CANCELED");  }  return totalLines;}  }
class C{  public ParserConfigurationException(){  super();}  }
class C{  public WidgetsGetPagesQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  public static boolean checkStorageAccessPermissions(Context context){  if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.M) {    String permission="android.permission.READ_EXTERNAL_STORAGE";    int res=context.checkCallingOrSelfPermission(permission);    return (res == PackageManager.PERMISSION_GRANTED);  } else {    return true;  }}  }
class C{  public DistributionDocument(int iNeighbourhoodWindow){  Graph=new DistributionGraph();  NeighbourhoodWindow=iNeighbourhoodWindow;}  }
class C{  protected void initializeWorld(){  SimulationBody floor=new SimulationBody();  floor.addFixture(Geometry.createRectangle(15.0,0.2));  floor.setMass(MassType.INFINITE);  this.world.addBody(floor);  SimulationBody bowlingBall=new SimulationBody();  BodyFixture fixture=new BodyFixture(Geometry.createCircle(0.109));  fixture.setDensity(194.82);  fixture.setRestitution(0.5);  bowlingBall.addFixture(fixture);  bowlingBall.setMass(MassType.NORMAL);  bowlingBall.setLinearVelocity(new Vector2(2.0,3.0));  bowlingBall.translate(-3.0,3.0);  this.world.addBody(bowlingBall);}  }
class C{  public NotesGetQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  public static boolean hasBuiltinBinding(NewBindingKey key){  return hasBuiltinBinding(key.getTypeName());}  }
class C{  public boolean removeNode(int node){  throw new UnsupportedOperationException("Changes to graph structure not allowed for spanning trees.");}  }
class C{  private int updateCallGraph(){  int all_virtual_edges=0, n_obsoleted=0;  CallGraph cg=Scene.v().getCallGraph();  ChunkedQueue<SootMethod> targetsQueue=new ChunkedQueue<SootMethod>();  QueueReader<SootMethod> targets=targetsQueue.reader();  Set<SootMethod> resolvedMethods=new HashSet<SootMethod>();  for (Iterator<Stmt> csIt=multiCallsites.iterator(); csIt.hasNext(); ) {    Stmt callsite=csIt.next();    Iterator<Edge> edges=cg.edgesOutOf(callsite);    if (!edges.hasNext()) {      csIt.remove();      continue;    }    Edge anyEdge=edges.next();    CgEdge p=edgeMapping.get(anyEdge);    SootMethod src=anyEdge.src();    if (!isReachableMethod(src)) {      csIt.remove();      continue;    }    if (!edges.hasNext()) {      continue;    }    IVarAbstraction pn=consG.get(p.base_var);    if (pn != null) {      pn=pn.getRepresentative();      getCallTargets(pn,src,callsite,targetsQueue);      resolvedMethods.clear();      while (targets.hasNext()) {        resolvedMethods.add(targets.next());      }      while (true) {        SootMethod tgt=anyEdge.tgt();        if (!resolvedMethods.contains(tgt)) {          p=edgeMapping.get(anyEdge);          p.is_obsoleted=true;        }        if (!edges.hasNext())         break;        anyEdge=edges.next();      }    }  }  for (int i=1; i < n_func; ++i) {    CgEdge p=call_graph[i];    CgEdge q=null;    while (p != null) {      if (vis_cg[i] == 0) {        p.is_obsoleted=true;      }      if (p.base_var != null) {        ++all_virtual_edges;      }      CgEdge temp=p.next;      if (p.is_obsoleted == false) {        p.next=q;        q=p;      } else {        cg.removeEdge(p.sootEdge);        ++n_obsoleted;      }      p=temp;    }    call_graph[i]=q;  }  ps.printf("%d of %d virtual call edges are proved to be spurious.\n",n_obsoleted,all_virtual_edges);  return n_obsoleted;}  }
class C{  public DateTime toJodaDateTime(){  return toJodaDateTime(ISOChronology.getInstance());}  }
class C{  @Override public void attributeSelection(String field){}  }
class C{  public void init$Children(){  children=new ASTNode[1];}  }
class C{  public synchronized void begin(Vector2 mousePosition){  this.active=true;  this.beginPosition=mousePosition;}  }
class C{  public static String combineGetMethodName(String fieldName){  return "get" + fieldName.substring(0,1).toUpperCase() + fieldName.substring(1);}  }
class C{  @Override protected void complete(){  super.complete();  try {    if (_dirty || (_data.getAccessed() - _data.getLastSaved()) >= (_savePeriodMs)) {      _data.setLastSaved(System.currentTimeMillis());      willPassivate();      update(_data);      didActivate();      if (Log.isDebugEnabled())       Log.debug("Dirty=" + _dirty + ", accessed-saved="+ _data.getAccessed()+ "-"+ _data.getLastSaved()+ ", savePeriodMs="+ _savePeriodMs);    }  } catch (  Exception e) {    Log.warn("Problem persisting changed session data id=" + getId(),e);  } finally {    _dirty=false;  }}  }
class C{  public static Properties readPropertyFileFromFileSystem(final File propertyFileLocation) throws ConfigurationException {  final Properties fileProperties=new Properties();  try {    final InputStream inputStream=new FileInputStream(propertyFileLocation);    fileProperties.load(inputStream);    inputStream.close();  } catch (  IOException e) {    throw new ConfigurationException("Cannot load the properties file",e);  }  return fileProperties;}  }
class C{  public CronTimer(int hour,int minute,int sec){  cronExpression=sec + " " + minute+ " "+ hour+ " * * ?";}  }
class C{  public void prune(double dMinCoexistenceImportance){  Graph.prune(dMinCoexistenceImportance);}  }
class C{  public DistributionGraph(){  super();  EdgeDistros=new HashMap();}  }
class C{  public static double[] normalize(final double... sample){  DescriptiveStatistics stats=new DescriptiveStatistics();  for (int i=0; i < sample.length; i++) {    stats.addValue(sample[i]);  }  double mean=stats.getMean();  double standardDeviation=stats.getStandardDeviation();  double[] standardizedSample=new double[sample.length];  for (int i=0; i < sample.length; i++) {    standardizedSample[i]=(sample[i] - mean) / standardDeviation;  }  return standardizedSample;}  }
class C{  private void addDataToDictionaryMap(){  int surrogateKey=dictionaryByteArrayToSurrogateKeyMap.size();  List<byte[]> oneDictionaryChunk=dictionaryChunks.get(dictionaryChunks.size() - 1);  for (int i=0; i < oneDictionaryChunk.size(); i++) {    DictionaryByteArrayWrapper dictionaryByteArrayWrapper=new DictionaryByteArrayWrapper(oneDictionaryChunk.get(i),xxHash32);    dictionaryByteArrayToSurrogateKeyMap.put(dictionaryByteArrayWrapper,++surrogateKey);  }}  }
class C{  private boolean featureIsVisible(IntervalFeature x){  boolean showIt=Pattern.compile(this.showRegex).matcher(x.getRaw()).find();  boolean hideIt=false;  if (!this.hideRegex.isEmpty()) {    hideIt=Pattern.compile(this.hideRegex).matcher(x.getRaw()).find();  }  if (showIt && !hideIt) {    return true;  } else {    return false;  }}  }
class C{  public static void write(CharSequence data,Writer output) throws IOException {  if (data != null) {    write(data.toString(),output);  }}  }
class C{  public boolean addAll(int index,Collection c){  int numNew=c.size();synchronized (this) {    Object[] elements=getArray();    int len=elements.length;    if (index > len || index < 0)     throw new IndexOutOfBoundsException("Index: " + index + ", Size: "+ len);    if (numNew == 0)     return false;    int numMoved=len - index;    Object[] newElements;    if (numMoved == 0)     newElements=copyOf(elements,len + numNew); else {      newElements=new Object[len + numNew];      System.arraycopy(elements,0,newElements,0,index);      System.arraycopy(elements,index,newElements,index + numNew,numMoved);    }    for (Iterator itr=c.iterator(); itr.hasNext(); ) {      Object e=itr.next();      newElements[index++]=e;    }    setArray(newElements);    return true;  }}  }
class C{  public static String readLine(){  String line;  try {    line=scanner.nextLine();  } catch (  NoSuchElementException e) {    line=null;  }  return line;}  }
class C{  public void handleDecode(Result result,Bitmap barcode){  inactivityTimer.onActivity();  playBeepSoundAndVibrate();  String resultString=result.getText();  if (resultString.equals("")) {    Toast.makeText(CaptureActivity.this,"Scan failed!",Toast.LENGTH_SHORT).show();  } else {    Intent resultIntent=new Intent();    Bundle bundle=new Bundle();    bundle.putString("result",resultString);    resultIntent.putExtras(bundle);    this.setResult(RESULT_OK,resultIntent);  }  CaptureActivity.this.finish();}  }
class C{  public <V extends Object,C extends RTSpan<V>>void applyEffect(Effect<V,C> effect,V value){  if (mUseRTFormatting && !mIsSelectionChanging && !mIsSaving) {    Spannable oldSpannable=mIgnoreTextChanges ? null : cloneSpannable();    effect.applyToSelection(this,value);synchronized (this) {      if (mListener != null && !mIgnoreTextChanges) {        Spannable newSpannable=cloneSpannable();        mListener.onTextChanged(this,oldSpannable,newSpannable,getSelectionStart(),getSelectionEnd(),getSelectionStart(),getSelectionEnd());      }      mLayoutChanged=true;    }  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Fear_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200433,skilltarget,skillname);}  }
class C{  public void hide(boolean animate){  hide(animate,fadeOut);}  }
class C{  public void advance(){  moveToNextIndex();}  }
class C{  @Override public boolean accepts(Field field){  return field.isAnnotationPresent(DialogField.class);}  }
class C{  public boolean isCellEditable(EventObject e){  if (e instanceof MouseEvent) {    for (int counter=getColumnCount() - 1; counter >= 0; counter--) {      if (getColumnClass(counter) == TreeTableModel.class) {        MouseEvent me=(MouseEvent)e;        MouseEvent newME=new MouseEvent(tree,me.getID(),me.getWhen(),me.getModifiers(),me.getX() - getCellRect(0,counter,true).x,me.getY(),me.getClickCount(),me.isPopupTrigger());        tree.dispatchEvent(newME);        break;      }    }  }  return false;}  }
class C{  public Local generateLocal(Type t){  return localGenerator.generateLocal(t);}  }
class C{  public boolean isFillViewport(){  return mFillViewport;}  }
class C{  public List<ValidationError> validate(@Nullable AndroidFacet facet){  List<ValidationError> errors=Lists.newArrayList();  if (facet != null) {    errors.addAll(deployTargetManager.validate(facet));    errors.addAll(debuggerManager.validate(facet));  }  return errors;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ConvertHeal_INTERVAL_ME_TO_SELF(int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200344,num0,skillname);}  }
class C{  private int[] sortedIndices(final double[] doubles){  final DoubleIndex[] dis=new DoubleIndex[doubles.length];  for (int i=0; i < doubles.length; i++) {    dis[i]=new DoubleIndex(doubles[i],i);  }  Arrays.sort(dis);  final int[] indices=new int[doubles.length];  for (int i=0; i < doubles.length; i++) {    indices[i]=dis[i].index;  }  return indices;}  }
class C{  public Relation createRelation(String name){  Relation relation=new Relation(name,this);  relations.setObject(name,relation);  return relation;}  }
class C{  public ChunkScan(TableInfo ti,long startBlkNum,long endBlkNum,Transaction tx){  pages=new ArrayList<RecordPage>();  this.startBlkNum=startBlkNum;  this.endBlkNum=endBlkNum;  this.schema=ti.schema();  this.fileName=ti.fileName();  for (long i=startBlkNum; i <= endBlkNum; i++) {    BlockId blk=new BlockId(fileName,i);    pages.add(new RecordPage(blk,ti,tx,true));  }  beforeFirst();}  }
class C{  public boolean isApplicable(){  InspectorWindow inspectorWindow=(InspectorWindow)getViewer();  return inspectorWindow != null && inspectorWindow.getDataTree() != null && inspectorWindow.getDataTree().getModel() != null && inspectorWindow.getDataTree().getModel().getRoot() != null && inspectorWindow.getDataTree().getModel().getChildCount(inspectorWindow.getDataTree().getModel().getRoot()) > 0;}  }
class C{  public static WxCurMenuInfoResult fromJson(String json) throws JsonParseException, JsonMappingException, IOException {  ObjectMapper mapper=new ObjectMapper();  return mapper.readValue(json,WxCurMenuInfoResult.class);}  }
class C{  public boolean checkError(){  flush();synchronized (lock) {    return mIoError;  }}  }
class C{  public static ExecutorService newHighThroughputExecutorService(int threadCount){  return newExecutorService(threadCount,true);}  }
class C{  public void addBodyDecl(BodyDecl node){  List<BodyDecl> list=(parent == null || state == null) ? getBodyDeclListNoTransform() : getBodyDeclList();  list.addChild(node);}  }
class C{  public static String generateKey(String imageUri,ImageSize targetSize){  return new StringBuilder(imageUri).append(URI_AND_SIZE_SEPARATOR).append(targetSize.getWidth()).append(WIDTH_AND_HEIGHT_SEPARATOR).append(targetSize.getHeight()).toString();}  }
class C{  public boolean providesIntegrity(URL url){  return "https".equals(url.getProtocol());}  }
class C{  protected DfpDec(final DfpField factory,final String s){  super(factory,s);  round(0);}  }
class C{  public Response writeString(String s){  if (s == null) {    writeInt(0);    return this;  }  byte[] b=s.getBytes();  writeInt(b.length);  expand(b.length);  System.arraycopy(b,0,out,offset,b.length);  offset+=b.length;  return this;}  }
class C{  private static void createMethods(ClassWriter cw,MethodHolder[] methods,String classInternalName){  for (int j=0; j < methods.length; ++j) {    final MethodHolder method=methods[j];    Class<?>[] exceptionTypes=method.getMethod().getExceptionTypes();    String[] exceptions=new String[exceptionTypes.length];    for (int i=0; i < exceptionTypes.length; ++i)     exceptions[i]=Type.getInternalName(exceptionTypes[i]);    MethodGenerator mv=MethodGenerator.newVarargsMethod(cw,method.getName(),method.getMethodDescriptor(),exceptions);    mv.start();    mv.loadThis();    mv.loadField(AbstractProxy.INTERNAL_NAME,"_handler","L" + ProxyInvocationHandler.INTERNAL_NAME + ";");    mv.loadThis();    mv.loadStaticField(classInternalName,"_methods",IMethod.ARRAY_DESCRIPTOR_NAME);    mv.loadConstant(j);    mv.loadArrayItem();    final Class<?>[] parameterTypes=method.getMethod().getParameterTypes();    mv.newArray(OBJECT_INTERNALNAME,parameterTypes.length);    int argPos=1;    for (int i=0; i < parameterTypes.length; ++i) {      mv.dup();      mv.loadConstant(i);      argPos+=mv.loadVariable(parameterTypes[i],argPos);      mv.storeArrayItem();    }    mv.invokeMethodCustom(Opcodes.INVOKEINTERFACE,ProxyInvocationHandler.INTERNAL_NAME,"invoke","(Ljava/lang/Object;" + IMethod.DESCRIPTOR_NAME + "[Ljava/lang/Object;)Ljava/lang/Object;");    mv.returnResult(method.getMethod().getReturnType());  }}  }
class C{  private void subscribeToAdminMessageTopic() throws JMSException {  if (adminMessageTopic != null) {    Session session=connection.createSession(false,Session.AUTO_ACKNOWLEDGE);    final MessageConsumer consumer=session.createConsumer(adminMessageTopic);    consumer.setMessageListener(broadcastMessageListenerWrapper);  }}  }
class C{  public String toString(){  StringBuilder builder=new StringBuilder("<");  builder.append(href).append(">; rel=").append(relationship);  if (type != null)   builder.append("; type=").append(type);  return builder.toString();}  }
class C{  public static List<String> findUniqueColumns(String tableName,SQLiteDatabase db){  List<String> columns=new ArrayList<String>();  Cursor cursor=null;  Cursor innerCursor=null;  try {    cursor=db.rawQuery("pragma index_list(" + tableName + ")",null);    if (cursor.moveToFirst()) {      do {        int unique=cursor.getInt(cursor.getColumnIndexOrThrow("unique"));        if (unique == 1) {          String name=cursor.getString(cursor.getColumnIndexOrThrow("name"));          innerCursor=db.rawQuery("pragma index_info(" + name + ")",null);          if (innerCursor.moveToFirst()) {            String columnName=innerCursor.getString(innerCursor.getColumnIndexOrThrow("name"));            columns.add(columnName);          }        }      } while (cursor.moveToNext());    }  } catch (  Exception e) {    e.printStackTrace();    throw new DatabaseGenerateException(e.getMessage());  } finally {    if (cursor != null) {      cursor.close();    }    if (innerCursor != null) {      innerCursor.close();    }  }  return columns;}  }
class C{  public static float roundToNextSignificant(double number){  final float d=(float)Math.ceil((float)Math.log10(number < 0 ? -number : number));  final int pw=1 - (int)d;  final float magnitude=(float)Math.pow(10,pw);  final long shifted=Math.round(number * magnitude);  return shifted / magnitude;}  }
class C{  public static Style teal(){  final Style style=new Style();  style.color=PaletteUtils.getSolidColor(PaletteUtils.MATERIAL_TEAL);  return style;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_INSTANCE_START_ROUND_IDARENA(String value0){  return new SM_SYSTEM_MESSAGE(1400928,value0);}  }
class C{  public LeaseDeniedException(String reason){  super(reason);}  }
class C{  public TObjectLongHashMap(TObjectHashingStrategy<K> strategy){  super(strategy);}  }
class C{  public void addService(final IRemoteService service){  final ServicePanel servicePanel=new ServicePanel(service,this);  servicePanel.setToolTipText(service.getShortName());  tabbedPane.add(servicePanel,0);  tabbedPane.setTitleAt(0,abbreviateName(service.getShortName()));  tabbedPane.setSelectedIndex(0);}  }
class C{  public List<ShoppingCartItem> findAllCartItems(String productId){  return this.findAllCartItems(productId,null);}  }
class C{  @Override public Node importNode(Node source,boolean deep) throws DOMException {  return importNode(source,deep,false,null);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_BUY_SELL_HE_DOES_NOT_SELL_ITEM(String value0){  return new SM_SYSTEM_MESSAGE(1300336,value0);}  }
class C{  private ByteBuffer b(int... bytes){  int prefix=_random.nextInt(5);  int suffix=_random.nextInt(5);  byte[] result=new byte[prefix + bytes.length + suffix];  _random.nextBytes(result);  for (int i=0; i < bytes.length; i++) {    result[prefix + i]=(byte)bytes[i];  }  return ByteBuffer.wrap(result,prefix,bytes.length);}  }
class C{  public static int distanceInf(int[] p1,int[] p2){  int max=0;  for (int i=0; i < p1.length; i++) {    max=Math.max(max,Math.abs(p1[i] - p2[i]));  }  return max;}  }
class C{  public void rectToPixelPhase(RectF r,float phaseY){  r.top*=phaseY;  r.bottom*=phaseY;  mMatrixValueToPx.mapRect(r);  mViewPortHandler.getMatrixTouch().mapRect(r);  mMatrixOffset.mapRect(r);}  }
class C{  protected boolean isCacheable(){  return cacheable;}  }
class C{  public void collectDeviceInfo(Context ctx){  try {    PackageManager pm=ctx.getPackageManager();    PackageInfo pi=pm.getPackageInfo(ctx.getPackageName(),PackageManager.GET_ACTIVITIES);    if (pi != null) {      String versionName=pi.versionName == null ? "null" : pi.versionName;      String versionCode=pi.versionCode + "";      infos.put("versionName",versionName);      infos.put("versionCode",versionCode);    }  } catch (  NameNotFoundException e) {    Log.e(TAG,"an error occured when collect package info",e);  }  Field[] fields=Build.class.getDeclaredFields();  for (  Field field : fields) {    try {      field.setAccessible(true);      infos.put(field.getName(),field.get(null).toString());      Log.d(TAG,field.getName() + " : " + field.get(null));    } catch (    Exception e) {      Log.e(TAG,"an error occured when collect crash info",e);    }  }}  }
class C{  @RequestMapping(value=ClientUris.CONFIG_FETCH_ALL,method=RequestMethod.GET) public List<ConfigItem> fetchAll(){  ClientSession client=ClientContext.get();  assert client != null;  Response<Page<Config>> pageResp=configService.pagingConfig(client.getAppId(),null,1,Integer.MAX_VALUE);  if (!pageResp.isSuccess()) {    Logs.error("failed to fetch all configs(app={}), cause: {}",client,pageResp.getErr());    return Collections.emptyList();  }  return ConfigItemFactory.creates(pageResp.getData().getData());}  }
class C{  public void readSource(String input){  StringBuilder sb=new StringBuilder();  try {    FileInputStream fis=new FileInputStream(input);    DataInputStream dis=new DataInputStream(fis);    BufferedReader br=new BufferedReader(new InputStreamReader(dis));    String line;    while ((line=br.readLine()) != null) {      sb.append(line);    }    dis.close();  } catch (  Exception e) {    System.err.println("Error: " + e.getMessage());  }  this.graph=sb;}  }
class C{  @Override public void undo(Transaction tx){}  }
class C{  public static SM_SYSTEM_MESSAGE STR_STIGMA_RETURN(int num0sp){  return new SM_SYSTEM_MESSAGE(1300412,num0sp);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_MagicCounterATK_INTERVAL_A_TO_B(String skillcaster,int num0,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200990,skillcaster,num0,skilltarget,skillname);}  }
class C{  private void observe(Future<?> future){  Observable observable=new Observable(future,timeout);  queue.add(observable);}  }
class C{  public OptimizedByteArrayInputStream(byte buffer[]){  setBuffer(buffer);}  }
class C{  private String toUrl(String testFile) throws MalformedURLException {  return new File(TestUtil.TEST_DATA_FOLDER + "pac",testFile).toURI().toURL().toString();}  }
class C{  public void init(@NotNull FormFactor formFactor,int minSdkLevel,@Nullable Runnable completedCallback,@Nullable Runnable foundItemsCallback,@Nullable Runnable noItemsCallback){  myFormFactor=formFactor;  loadTargets();  loadInstalledVersions();  myBuildApiKey=FormFactorUtils.getBuildApiKey(formFactor);  myBuildApiLevelKey=FormFactorUtils.getBuildApiLevelKey(formFactor);  myTargetApiLevelKey=FormFactorUtils.getTargetApiLevelKey(formFactor);  myTargetApiStringKey=FormFactorUtils.getTargetApiStringKey(formFactor);  myTargetComboBoxKey=FormFactorUtils.getTargetComboBoxKey(formFactor);  myInclusionKey=FormFactorUtils.getInclusionKey(formFactor);  populateComboBox(formFactor,minSdkLevel);  if (getItemCount() > 0) {    if (foundItemsCallback != null) {      foundItemsCallback.run();    }  }  loadSavedApi();  loadRemoteTargets(minSdkLevel,completedCallback,foundItemsCallback,noItemsCallback);}  }
class C{  static public byte[] decode(String encoded){  if (encoded == null)   return null;  int lengthData=encoded.length();  if (lengthData % 2 != 0)   return null;  char[] binaryData=encoded.toCharArray();  int lengthDecode=lengthData / 2;  byte[] decodedData=new byte[lengthDecode];  byte temp1, temp2;  char tempChar;  for (int i=0; i < lengthDecode; i++) {    tempChar=binaryData[i * 2];    temp1=(tempChar < BASELENGTH) ? hexNumberTable[tempChar] : -1;    if (temp1 == -1)     return null;    tempChar=binaryData[i * 2 + 1];    temp2=(tempChar < BASELENGTH) ? hexNumberTable[tempChar] : -1;    if (temp2 == -1)     return null;    decodedData[i]=(byte)((temp1 << 4) | temp2);  }  return decodedData;}  }
class C{  @deprecated public boolean skeletonsAreSimilar(String id,String skeleton){  if (id.equals(skeleton)) {    return true;  }  TreeSet<String> parser1=getSet(id);  TreeSet<String> parser2=getSet(skeleton);  if (parser1.size() != parser2.size()) {    return false;  }  Iterator<String> it2=parser2.iterator();  for (  String item : parser1) {    int index1=getCanonicalIndex(item,false);    String item2=(String)it2.next();    int index2=getCanonicalIndex(item2,false);    if (types[index1][1] != types[index2][1]) {      return false;    }  }  return true;}  }
class C{  private static short convertToPrimitiveKind(short valueType){  if (valueType <= XSConstants.NOTATION_DT) {    return valueType;  }  if (valueType <= XSConstants.ENTITY_DT) {    return XSConstants.STRING_DT;  }  if (valueType <= XSConstants.POSITIVEINTEGER_DT) {    return XSConstants.DECIMAL_DT;  }  return valueType;}  }
class C{  public static String dbStringToCamelStyle2(String str){  if (str != null) {    StringBuilder sb=new StringBuilder();    sb.append(String.valueOf(str.charAt(0)));    for (int i=1; i < str.length(); i++) {      char c=str.charAt(i);      if (c != '_') {        sb.append(c);      } else {        if (i + 1 < str.length()) {          sb.append(String.valueOf(str.charAt(i + 1)).toUpperCase());          i++;        }      }    }    return sb.toString();  }  return null;}  }
class C{  public static void switchTiming(String nextPhase){  stopMostRecentTimer();  startTiming(nextPhase);}  }
class C{  public void removeExpansionListener(ExplorerExpansionListener listener){  expansionListeners.remove(listener);}  }
class C{  @Override public Estimate estimateRateDifference(final long number_impressions_1,final long number_actions_1,final long number_impressions_2,final long number_actions_2){  inputValidation(number_impressions_1,number_actions_1,number_impressions_2);  if (number_actions_2 < 0) {    throw new IllegalArgumentException("Number of unique actions must be nonnegative.");  }  if (number_actions_2 > number_impressions_2) {    throw new IllegalArgumentException("Number of unique actions cannot exceed number of unique impressions.");  }  double zval=DecisionAdjuster.scaledZ(confidenceLevel,maxDecisions);  double rate_1=1.0 * number_actions_1 / number_impressions_1;  double rate_2=1.0 * number_actions_2 / number_impressions_2;  double rate_diff=rate_1 - rate_2;  double confint=zval * sqrt(rate_1 * (1 - rate_1) / number_impressions_1 + rate_2 * (1 - rate_2) / number_impressions_2);  return new Estimate.Builder().withEstimate(rate_diff).withLowerBound(rate_diff - confint).withUpperBound(rate_diff + confint).build();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CHANGE_ITEM_SKIN_NOT_SKIN_EXTRACTABLE_ITEM(String value0){  return new SM_SYSTEM_MESSAGE(1400283,value0);}  }
class C{  private boolean readyPlayer(String file){  if (playMode()) {switch (this.state) {case MEDIA_NONE:      if (this.player == null) {        this.player=new MediaPlayer();      }    try {      this.loadAudioFile(file);    } catch (    Exception e) {      sendErrorStatus(MEDIA_ERR_ABORTED);    }  return false;case MEDIA_LOADING:Log.d(LOG_TAG,"AudioPlayer Loading: startPlaying() called during media preparation: " + STATE.MEDIA_STARTING.ordinal());this.prepareOnly=false;return false;case MEDIA_STARTING:case MEDIA_RUNNING:case MEDIA_PAUSED:return true;case MEDIA_STOPPED:if (this.audioFile.compareTo(file) == 0) {if (this.recorder != null && player == null) {this.player=new MediaPlayer();this.prepareOnly=false;try {this.loadAudioFile(file);} catch (Exception e) {sendErrorStatus(MEDIA_ERR_ABORTED);}return false;} else {player.seekTo(0);player.pause();return true;}} else {this.player.reset();try {this.loadAudioFile(file);} catch (Exception e) {sendErrorStatus(MEDIA_ERR_ABORTED);}return false;}default :Log.d(LOG_TAG,"AudioPlayer Error: startPlaying() called during invalid state: " + this.state);sendErrorStatus(MEDIA_ERR_ABORTED);}}return false;}  }
class C{  public AemRichText selectAll(){  switchToTextArea();  try {    actions.sendKeys(Keys.chord(Keys.CONTROL,"a")).perform();    return this;  }  finally {    frameSwitcher.switchTo("/$cq");  }}  }
class C{  @Override protected Change configureCacheObject(final Alarm alarm,final Properties alarmProperties) throws ConfigurationException {  AlarmCacheObject alarmCacheObject=(AlarmCacheObject)alarm;  String tmpStr=null;  if ((tmpStr=alarmProperties.getProperty("dataTagId")) != null) {    try {      alarmCacheObject.setDataTagId(Long.valueOf(tmpStr));    } catch (    NumberFormatException e) {      throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,"NumberFormatException: Unable to convert parameter \"dataTagId\" to Long: " + tmpStr);    }  }  if (alarmProperties.getProperty("faultFamily") != null) {    alarmCacheObject.setFaultFamily(alarmProperties.getProperty("faultFamily"));  }  if (alarmProperties.getProperty("faultMember") != null) {    alarmCacheObject.setFaultMember(alarmProperties.getProperty("faultMember"));  }  if ((tmpStr=alarmProperties.getProperty("faultCode")) != null) {    try {      alarmCacheObject.setFaultCode(Integer.parseInt(tmpStr));    } catch (    NumberFormatException e) {      throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,"NumberFormatException: Unable to convert parameter \"faultCode\" to int: " + tmpStr);    }  }  if ((tmpStr=alarmProperties.getProperty("alarmCondition")) != null) {    try {      alarmCacheObject.setCondition(AlarmCondition.fromConfigXML(tmpStr));    } catch (    Exception e) {      throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,"Exception: Unable to create AlarmCondition object from parameter \"alarmCondition\": \n" + tmpStr);    }  }  tmpStr=alarmProperties.getProperty("metadata");  if (tmpStr != null) {    Metadata metadata=new Metadata().builder().metadata(Metadata.fromJSON(tmpStr)).build();    alarmCacheObject.setMetadata(metadata);  }  alarmCacheObject.setTopic(getTopicForAlarm(alarmCacheObject));  return null;}  }
class C{  protected GroupsGetMembersQueryWithFilter filter(GroupsGetMembersFilter value){  return unsafeParam("filter",value);}  }
class C{  method_info findMethod(String s){  method_info m;  int i;  for (i=0; i < methods_count; i++) {    m=methods[i];    if (s.equals(m.toName(constant_pool))) {      return m;    }  }  return null;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FORCE_INVITED_HIM(String value0){  return new SM_SYSTEM_MESSAGE(1301017,value0);}  }
class C{  @deprecated public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (!(obj instanceof StringCharacterIterator)) {    return false;  }  StringCharacterIterator that=(StringCharacterIterator)obj;  if (hashCode() != that.hashCode()) {    return false;  }  if (!this.text.equals(that.text)) {    return false;  }  if ((this.pos != that.pos) || (this.begin != that.begin) || (this.end != that.end)) {    return false;  }  return true;}  }
class C{  private static void calculateThresholdForBlock(byte[] luminances,int subWidth,int subHeight,int width,int height,int[][] blackPoints,BitMatrix matrix){  for (int y=0; y < subHeight; y++) {    int yoffset=y << BLOCK_SIZE_POWER;    int maxYOffset=height - BLOCK_SIZE;    if (yoffset > maxYOffset) {      yoffset=maxYOffset;    }    for (int x=0; x < subWidth; x++) {      int xoffset=x << BLOCK_SIZE_POWER;      int maxXOffset=width - BLOCK_SIZE;      if (xoffset > maxXOffset) {        xoffset=maxXOffset;      }      int left=cap(x,2,subWidth - 3);      int top=cap(y,2,subHeight - 3);      int sum=0;      for (int z=-2; z <= 2; z++) {        int[] blackRow=blackPoints[top + z];        sum+=blackRow[left - 2] + blackRow[left - 1] + blackRow[left]+ blackRow[left + 1]+ blackRow[left + 2];      }      int average=sum / 25;      thresholdBlock(luminances,xoffset,yoffset,average,width,matrix);    }  }}  }
class C{  public PhotosEditCommentQuery(VkApiClient client,UserActor actor,int commentId){  super(client,"photos.editComment",OkResponse.class);  accessToken(actor.getAccessToken());  commentId(commentId);}  }
class C{  protected static void init(Callable initCall){  try {    initCall.call();  } catch (  Exception ex) {    if (_logger.isLoggable(Level.SEVERE)) {      _logger.log(Level.SEVERE,"Failed to initialize remote stub.",ex);    }  }}  }
class C{  public NotesGetByIdQuery needWiki(Boolean value){  return unsafeParam("need_wiki",value);}  }
class C{  @Deprecated public Vector catalogFiles(){  return getCatalogFiles();}  }
class C{  public static <T>HashSet<T> hashSet(int initialCapacity,float loadFactor){  return new HashSet<T>(initialCapacity,loadFactor);}  }
class C{  public static RecipientEntry constructFakePhoneEntry(final String phoneNumber,final boolean isValid){  return new RecipientEntry(ENTRY_TYPE_PERSON,phoneNumber,phoneNumber,INVALID_DESTINATION_TYPE,null,INVALID_CONTACT,null,INVALID_CONTACT,null,true,isValid,null);}  }
class C{  public static boolean writeFile(String filePath,InputStream stream,boolean append){  return writeFile(filePath != null ? new File(filePath) : null,stream,append);}  }
class C{  public void detectAdBlockers(Constants.AdBlockerCallback callback){  new DetectTask(callback).execute();}  }
class C{  public void tabClosureCancelled(long time,int id){  final boolean selected=TabModelUtils.getCurrentTabId(mModel) == id;  tabCreated(time,id,Tab.INVALID_TAB_ID,selected);}  }
class C{  public ConfettiSource(int x,int y){  this(x,y,x,y);}  }
class C{  public static int compareTo(double x,double y,double eps){  if (equals(x,y,eps)) {    return 0;  } else   if (x < y) {    return -1;  }  return 1;}  }
class C{  public ServerSetAnnouncer(URI uri,int servicePort,int statsPort,int shardId) throws UnknownHostException {  this.shardId=shardId;  this.localAddr=InetAddress.getLocalHost().getHostAddress();  this.serviceEndpoint=new InetSocketAddress(localAddr,servicePort);  InetSocketAddress statsEndpoint=new InetSocketAddress(localAddr,statsPort);  this.additionalEndpoints=new HashMap<String,InetSocketAddress>();  this.additionalEndpoints.put("aurora",statsEndpoint);  this.additionalEndpoints.put("stats",statsEndpoint);  this.additionalEndpoints.put("service",serviceEndpoint);  this.additionalEndpoints.put("thrift",serviceEndpoint);  this.zkServerSet=DLZkServerSet.of(uri,60000);}  }
class C{  @RequestMapping(value="/servers/clean_cache",method=RequestMethod.POST) public JsonResponse cleanServerCache(@RequestParam("server") String server){  serverService.cleanCache(server);  return JsonResponse.ok(true);}  }
class C{  public static int checkSurveyResponse(Delegator delegator,String partyId,String productStoreId,String surveyId){  if (delegator == null || partyId == null || productStoreId == null) {    return -1;  }  List<GenericValue> surveyResponse=null;  try {    surveyResponse=EntityQuery.use(delegator).from("SurveyResponse").where("surveyId",surveyId,"partyId",partyId).queryList();  } catch (  GenericEntityException e) {    Debug.logError(e,module);    return -1;  }  if (UtilValidate.isEmpty(surveyResponse)) {    return 0;  } else {    return surveyResponse.size();  }}  }
class C{  public static void f(String tag,String msg,Object... args){  if (sLevel > LEVEL_FATAL) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.wtf(tag,msg);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_PARTY_PARRY(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1220220,value0,value1);}  }
class C{  @Override protected Node nextMatchingElementAfter(Node current){  Node next;  while (current != null) {    if (current.hasChildNodes()) {      current=(current.getFirstChild());    } else     if (current != rootNode && null != (next=current.getNextSibling())) {      current=next;    } else {      next=null;      for (; current != rootNode; current=current.getParentNode()) {        next=current.getNextSibling();        if (next != null)         break;      }      current=next;    }    if (current != rootNode && current != null && current.getNodeType() == Node.ELEMENT_NODE) {      String name=((ElementImpl)current).getAttribute("name");      if (name.equals("*") || name.equals(tagName))       return current;    }  }  return null;}  }
class C{  private ProcessFunctionParameterValue findParameterValue(List<ProcessFunctionParameterValue> valueList,String parameterName){  for (  ProcessFunctionParameterValue paramValue : valueList) {    if (paramValue.name.compareTo(parameterName) == 0) {      return paramValue;    }  }  return null;}  }
class C{  public void testFromStoredFields() throws Exception {  createAndStartIndex("storedsuggest");  send("registerFields","{fields: {text: {type: text, store: true, search: false}," + "weight: {type: float, store: true, search: false}," + "payload: {type: text, store: true, search: false}}}");  send("addDocument","{fields: {text: 'the cat meows', weight: 1, payload: 'payload1'}}");  long indexGen=getLong(send("addDocument","{fields: {text: 'the dog barks', weight: 2, payload: 'payload2'}}"),"indexGen");  JSONObject result=send("buildSuggest","{source: {searcher: {indexGen: " + indexGen + "}, suggestField: text, weightField: weight, payloadField: payload}, class: 'AnalyzingSuggester', suggestName: 'suggest', analyzer: {tokenizer: Whitespace, tokenFilters: [LowerCase]}}");  for (int i=0; i < 2; i++) {    result=send("suggestLookup","{text: the, suggestName: suggest}");    assertEquals(2,getInt(result,"results[0].weight"));    assertEquals("the dog barks",get(result,"results[0].key"));    assertEquals("payload2",get(result,"results[0].payload"));    assertEquals(1,getInt(result,"results[1].weight"));    assertEquals("the cat meows",get(result,"results[1].key"));    assertEquals("payload1",get(result,"results[1].payload"));    bounceServer();    send("startIndex");  }}  }
class C{  public void addNewPolygon(){  if (symbolTree == null) {    return;  }  Object oldValueObj=sldWriter.encodeSLD(null,SelectedSymbol.getInstance().getSld());  PolygonSymbolizer newPolygonSymbolizer=DefaultSymbols.createDefaultPolygonSymbolizer();  DefaultMutableTreeNode ruleNode=getRuleTreeNode();  SelectedSymbol.getInstance().addSymbolizerToRule(newPolygonSymbolizer);  DefaultMutableTreeNode newNode=sldTree.addObject(ruleNode,newPolygonSymbolizer,true);  if (newNode != null) {    sldTree.addObject(newNode,SLDTreeLeafFactory.getInstance().getFill(newPolygonSymbolizer),true);    sldTree.addObject(newNode,SLDTreeLeafFactory.getInstance().getStroke(newPolygonSymbolizer),true);    TreePath newPath=getPath(newNode);    symbolTree.setSelectionPath(newPath);    Object newValueObj=sldWriter.encodeSLD(null,SelectedSymbol.getInstance().getSld());    UndoManager.getInstance().addUndoEvent(new UndoEvent(sldTree.getUndoObject(),getClass().getName(),oldValueObj,newValueObj));  }}  }
class C{  protected void notifyScrollingListenersAboutEnd(){  for (  OnWheelScrollListener listener : scrollingListeners) {    listener.onScrollingFinished(this);  }}  }
class C{  @Override public int read(byte[] bts) throws IOException {  int n=super.read(bts);  if (n != -1) {    branch.write(bts,0,n);  }  return n;}  }
class C{  private MathFlowable(){  throw new IllegalStateException("No instances!");}  }
class C{  @Deployment public void testActivityErrorEvents() throws Exception {  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("errorProcess");  assertNotNull(processInstance);  ProcessInstance afterErrorInstance=runtimeService.createProcessInstanceQuery().processInstanceId(processInstance.getId()).singleResult();  assertNull(afterErrorInstance);  ActivitiErrorEvent errorEvent=null;  for (  ActivitiEvent event : listener.getEventsReceived()) {    if (event instanceof ActivitiErrorEvent) {      if (errorEvent == null) {        errorEvent=(ActivitiErrorEvent)event;      } else {        fail("Only one ActivityErrorEvent expected");      }    }  }  assertNotNull(errorEvent);  assertEquals(ActivitiEventType.ACTIVITY_ERROR_RECEIVED,errorEvent.getType());  assertEquals("catchError",errorEvent.getActivityId());  assertEquals("myError",errorEvent.getErrorId());  assertEquals("123",errorEvent.getErrorCode());  assertEquals(processInstance.getId(),errorEvent.getProcessInstanceId());  assertEquals(processInstance.getProcessDefinitionId(),errorEvent.getProcessDefinitionId());  assertFalse(processInstance.getId().equals(errorEvent.getExecutionId()));}  }
class C{  public static synchronized void indexTimeDocument(CodeIndexDocument codeIndexDocument) throws IOException {  Queue<CodeIndexDocument> queue=new ConcurrentLinkedQueue<CodeIndexDocument>();  queue.add(codeIndexDocument);  indexTimeDocuments(queue);  queue=null;}  }
class C{  private int readChunkHeader(ResChunk_Header nextChunkHeader,byte[] data,int offset) throws IOException {  nextChunkHeader.type=readUInt16(data,offset);  offset+=2;  nextChunkHeader.headerSize=readUInt16(data,offset);  offset+=2;  nextChunkHeader.size=readUInt32(data,offset);  offset+=4;  return offset;}  }
class C{  public ProgressEvent(String sTaskName,double dProgress){  TaskName=sTaskName;  Progress=dProgress;  SubtaskName="";}  }
class C{  ContextualSearchRequest(String searchTerm){  this(searchTerm,null,false);}  }
class C{  public void checkLastSticky(final int position){  bounceRecyclerView.clearSticky();  for (int i=0; i <= position; i++) {    WXComponent component=getChild(i);    if (component.isSticky() && component instanceof WXCell) {      if (component.getHostView() == null) {        return;      }      bounceRecyclerView.notifyStickyShow((WXCell)component);    }  }}  }
class C{  public Edge addEdge(Node s,Node t){  throw new UnsupportedOperationException("Changes to graph structure not allowed for spanning trees.");}  }
class C{  @SuppressWarnings("unchecked") void removeBox(ValueBox vb){  if (vb == null)   return;  if (boxes == vb) {    boxes=null;  } else   if (boxes instanceof List) {    List<ValueBox> list=(List<ValueBox>)boxes;    list.remove(vb);  }}  }
class C{  public WallReportPostQuery(VkApiClient client,UserActor actor,int ownerId,int postId){  super(client,"wall.reportPost",OkResponse.class);  accessToken(actor.getAccessToken());  ownerId(ownerId);  postId(postId);}  }
class C{  public MonsterCursor queryMonsters(){  return mHelper.queryMonsters();}  }
class C{  public void onActivityResult(int requestCode,int resultCode,android.content.Intent data){  if (ScriptLoader.isCalledFromJRuby()) {    super.onActivityResult(requestCode,resultCode,data);    return;  }  if (!JRubyAdapter.isInitialized()) {    Log.i("Method called before JRuby runtime was initialized: RubotoActivity#onActivityResult");{      super.onActivityResult(requestCode,resultCode,data);      return;    }  }  String rubyClassName=scriptInfo.getRubyClassName();  if (rubyClassName == null) {    super.onActivityResult(requestCode,resultCode,data);    return;  }  if ((Boolean)JRubyAdapter.runScriptlet(rubyClassName + ".instance_methods(false).any?{|m| m.to_sym == :onActivityResult}")) {    JRubyAdapter.runRubyMethod(scriptInfo.getRubyInstance(),"onActivityResult",new Object[]{requestCode,resultCode,data});  } else {    if ((Boolean)JRubyAdapter.runScriptlet(rubyClassName + ".instance_methods(false).any?{|m| m.to_sym == :on_activity_result}")) {      JRubyAdapter.runRubyMethod(scriptInfo.getRubyInstance(),"on_activity_result",new Object[]{requestCode,resultCode,data});    } else {      if ((Boolean)JRubyAdapter.runScriptlet(rubyClassName + ".instance_methods(true).any?{|m| m.to_sym == :on_activity_result}")) {        JRubyAdapter.runRubyMethod(scriptInfo.getRubyInstance(),"on_activity_result",new Object[]{requestCode,resultCode,data});      } else {        JRubyAdapter.runRubyMethod(scriptInfo.getRubyInstance(),"onActivityResult",new Object[]{requestCode,resultCode,data});      }    }  }}  }
class C{  private GlobalSettingsController(){  consoleSetup();}  }
class C{  public static Map<String,Object> keywordSearch(DispatchContext dctx,Map<String,Object> context){  Map<String,Object> result;  LocalDispatcher dispatcher=dctx.getDispatcher();  try {    if (context.get("query") == null || context.get("query").equals(""))     context.put("query","*:*");    Map<String,Object> dispatchMap=FastMap.newInstance();    Integer viewSize=null;    if (context.get("viewSize") != null) {      viewSize=Integer.parseInt((String)context.get("viewSize"));      dispatchMap.put("viewSize",viewSize);    }    Integer viewIndex=null;    if (context.get("viewIndex") != null) {      viewIndex=Integer.parseInt((String)context.get("viewIndex"));      dispatchMap.put("viewIndex",viewIndex);    }    if (context.get("query") != null)     dispatchMap.put("query",context.get("query"));    if (context.get("queryFilter") != null)     dispatchMap.put("queryFilter",context.get("queryFilter"));    dispatchMap.put("spellcheck",true);    Map<String,Object> searchResult=dispatcher.runSync("runSolrQuery",dispatchMap);    QueryResponse queryResult=(QueryResponse)searchResult.get("queryResult");    List<List<String>> suggestions=FastList.newInstance();    if (queryResult.getSpellCheckResponse() != null && queryResult.getSpellCheckResponse().getSuggestions() != null) {      Iterator<Suggestion> iter=queryResult.getSpellCheckResponse().getSuggestions().iterator();      while (iter.hasNext()) {        Suggestion resultDoc=iter.next();        Debug.logInfo("Suggestion " + resultDoc.getAlternatives(),module);        suggestions.add(resultDoc.getAlternatives());      }    }    Boolean isCorrectlySpelled=true;    if (queryResult.getSpellCheckResponse() != null) {      isCorrectlySpelled=queryResult.getSpellCheckResponse().isCorrectlySpelled();    }    result=ServiceUtil.returnSuccess();    result.put("isCorrectlySpelled",isCorrectlySpelled);    Map<String,Integer> facetQuery=queryResult.getFacetQuery();    Map<String,String> facetQueries=FastMap.newInstance();    for (    String fq : facetQuery.keySet()) {      if (facetQuery.get(fq).intValue() > 0)       facetQueries.put(fq,fq.replaceAll("^.*\\u005B(.*)\\u005D","$1") + " (" + facetQuery.get(fq).intValue()+ ")");    }    Map<String,Map<String,Long>> facetFields=FastMap.newInstance();    List<FacetField> facets=queryResult.getFacetFields();    for (    FacetField facet : facets) {      Map<String,Long> facetEntry=FastMap.newInstance();      List<FacetField.Count> facetEntries=facet.getValues();      if (UtilValidate.isNotEmpty(facetEntries)) {        for (        FacetField.Count fcount : facetEntries)         facetEntry.put(fcount.getName(),fcount.getCount());        facetFields.put(facet.getName(),facetEntry);      }    }    result.put("results",queryResult.getResults());    result.put("facetFields",facetFields);    result.put("facetQueries",facetQueries);    result.put("queryTime",queryResult.getElapsedTime());    result.put("listSize",queryResult.getResults().getNumFound());    result.put("start",queryResult.getResults().getStart());    result.put("viewIndex",SolrUtil.calcResultViewIndex(queryResult.getResults(),viewSize));    result.put("viewSize",viewSize);    result.put("suggestions",suggestions);  } catch (  Exception e) {    Debug.logError(e,e.getMessage(),module);    result=ServiceUtil.returnError(e.toString());  }  return result;}  }
class C{  public ProjectSpecificErrorCodeRangeIntegerImpl(List<IntegerRange> ranges,String name){  this.name=name;  this.ranges=ranges;}  }
class C{  private List<Entry> processBadLeases(long now){  List<Entry> bad=null;synchronized (LeaseRenewalManager.this) {    for (Iterator<Entry> iter=bList.iterator(); iter.hasNext(); ) {      Entry e=iter.next();      if (e.endTime <= now) {        iter.remove();        logExpiration(e);        removeLeaseInRenew(e);        if (e.listener != null) {          if (bad == null)           bad=new ArrayList<Entry>(1);          bad.add(e);        }      }    }  }  return bad;}  }
class C{  public PagesSaveAccessQuery saveAccess(UserActor actor,int pageId){  return new PagesSaveAccessQuery(getClient(),actor,pageId);}  }
class C{  public boolean shouldCache(){  return this.shouldCache;}  }
class C{  protected void checkUnparsedEntity(String entName){  UnparsedEntity ent=new UnparsedEntity();  ent.name=entName;  int index=fUnparsedEntities.indexOf(ent);  if (index != -1) {    ent=(UnparsedEntity)fUnparsedEntities.get(index);    checkNotation(ent.notation);    checkAndSendUnparsedEntity(ent);  }}  }
class C{  public int addItemToEnd(String productId,BigDecimal amount,BigDecimal quantity,BigDecimal unitPrice,HashMap<String,GenericValue> features,HashMap<String,Object> attributes,String prodCatalogId,String itemType,LocalDispatcher dispatcher,Boolean triggerExternalOps,Boolean triggerPriceRules,Boolean skipInventoryChecks,Boolean skipProductChecks) throws CartItemModifyException, ItemNotFoundException {  return addItemToEnd(ShoppingCartItem.makeItem(null,productId,amount,quantity,unitPrice,null,null,null,null,null,features,attributes,prodCatalogId,null,itemType,null,dispatcher,this,triggerExternalOps,triggerPriceRules,null,skipInventoryChecks,skipProductChecks));}  }
class C{  public static <T>CompletableFuture<T> waitForAll(List<CompletableFuture<T>> futures){  if (futures.isEmpty()) {    return CompletableFuture.completedFuture(null);  }  final CompletableFuture<T> compositeFuture=new CompletableFuture<>();  final AtomicInteger count=new AtomicInteger(futures.size());  final AtomicReference<Throwable> exception=new AtomicReference<>();  for (  CompletableFuture<T> future : futures) {    future.whenComplete(null);  }  return compositeFuture;}  }
class C{  public int readByte(){  bytesRead++;  return ((int)arr[pos++]) & 0xFF;}  }
class C{  public boolean isDurableSubscriber(){  return !StringsUtils.isEmpty(m_durableSubscriptionName);}  }
class C{  public static String toUTF8(String sStr){  byte[] baBytes=sStr.getBytes();  try {    return new String(baBytes,"UTF-8");  } catch (  Exception e) {    e.printStackTrace();    return new String(baBytes);  }}  }
class C{  public static final void shuffleList(List l){  Random d=new Random();  for (int iCnt=0; iCnt < l.size() - 1; iCnt++) {    for (int iSwapPos=iCnt + 1; iSwapPos < l.size(); iSwapPos++) {      if (d.nextBoolean()) {        Object oTemp=l.get(iSwapPos);        l.set(iSwapPos,l.get(iCnt));        l.set(iCnt,oTemp);        continue;      }    }  }  for (int iCnt=l.size() - 1; iCnt > 0; iCnt--) {    for (int iSwapPos=iCnt - 1; iSwapPos > 0; iSwapPos--) {      if (d.nextBoolean()) {        Object oTemp=l.get(iSwapPos);        l.set(iSwapPos,l.get(iCnt));        l.set(iCnt,oTemp);      }    }  }}  }
class C{  public NotesGetQuery noteIds(List<Integer> value){  return unsafeParam("note_ids",value);}  }
class C{  @Override public void beforeFirst(){  ss.beforeFirst();  moreGroups=ss.next();}  }
class C{  private Long createProcessPIK(){  Random r=new Random();  int pik=r.nextInt(PIK_MAX + 1);  if (pik < PIK_MIN) {    pik+=PIK_MIN;  }  return Long.valueOf(pik);}  }
class C{  public static Navigator with(Context context) throws NavigatorException {  return getInstance(context);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_REJECTED_DUEL(String value0){  return new SM_SYSTEM_MESSAGE(1390120,value0);}  }
class C{  @Override protected void checkFeature(String featureId) throws XMLConfigurationException {  super.checkFeature(featureId);}  }
class C{  public StaticInvokeExpr newStaticInvokeExpr(SootMethodRef method,List<? extends Value> args){  return new JStaticInvokeExpr(method,args);}  }
class C{  private void remove_impl(ObjectInfo<T> oiToRemove){  if (oiToRemove.getPosInList() == -1)   throw new RuntimeException(" Stored list- called remove but element already deleted !");  if (m_Size == 0)   throw new RuntimeException(" Stored list- called remove but list is empty !");  if (oiToRemove.getBackwardsRef() != null)   oiToRemove.getBackwardsRef().setForwardRef(oiToRemove.getForwardRef());  if (oiToRemove.getForwardRef() != null)   oiToRemove.getForwardRef().setBackwardsRef(oiToRemove.getBackwardsRef());  if (m_Tail == oiToRemove)   m_Tail=oiToRemove.getForwardRef();  if (m_Head == oiToRemove)   m_Head=oiToRemove.getBackwardsRef();  m_Size--;  if (m_Support_Random_Scans && (m_BasicOccupied != null)) {    ArrayList<ObjectInfo<T>> last_al=m_LastChunk > 0 ? m_AllOccupiedPos.get(m_LastChunk) : m_BasicOccupied;    int my_chunknum=(oiToRemove.getPosInList() - 1) / NUMBER_OF_OCCUPIED_POS_QUOTA;    int my_pos_inside=(oiToRemove.getPosInList() - 1) % NUMBER_OF_OCCUPIED_POS_QUOTA;    ArrayList<ObjectInfo<T>> my_al=my_chunknum > 0 ? m_AllOccupiedPos.get(my_chunknum) : m_BasicOccupied;    if (m_Size > 0 && (my_chunknum != m_LastChunk || my_pos_inside != m_LastPos)) {      ObjectInfo<T> soi=last_al.get(m_LastPos);      soi.setPosInList(oiToRemove.getPosInList());      my_al.set(my_pos_inside,soi);    }    last_al.remove(m_LastPos);    if (m_LastPos == 0 && m_LastChunk > 0)     m_AllOccupiedPos.remove(m_LastChunk);    m_LastPos--;    if (m_LastPos < 0) {      if (m_LastChunk > 0) {        m_LastChunk--;        m_LastPos=NUMBER_OF_OCCUPIED_POS_QUOTA - 1;        if (m_LastChunk == 0)         m_AllOccupiedPos=null;      } else       m_LastPos=0;    }  }  oiToRemove.setPosInList(-1);}  }
class C{  public XML11DTDConfiguration(SymbolTable symbolTable){  this(symbolTable,null,null);}  }
class C{  public FriendsGetSuggestionsQuery nameCase(UsersNameCase value){  return unsafeParam("name_case",value);}  }
class C{  private static TestItem adjustName(TestItem input){  StringBuilder sb=new StringBuilder(StringUtils.repeat(PREFIX,input.getPath().size()));  input.setName(sb.append(input.getName()).toString());  return input;}  }
class C{  @Override public void onSuccess(IMqttToken asyncActionToken){  ConnectionState state=(ConnectionState)asyncActionToken.getUserContext();  if (state == ConnectionState.Connecting) {    AirMapLog.i("TrafficService","Successfully connected");    onConnect();  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_ABYSS_WIN_CASTLE(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1301039,value0,value1);}  }
class C{  public void onDisconnect(String reason){  proxy.getLogger().info(proxy.getLang().get(Lang.CLIENT_DISCONNECTED,proxy.getAuthMode().equals("cls") ? "unknown" : username,remoteAddress,reason));  if (downstream != null) {    downstream.disconnect();  }  proxy.getSessionRegister().removeSession(this);  packetProcessorScheule.cancel(true);}  }
class C{  public static void createErrorDialog(final String title,final String message){  final Alert alert=new Alert(AlertType.ERROR);  alert.setTitle(title);  alert.setContentText(message);  alert.setHeaderText(null);  alert.showAndWait();}  }
class C{  public String process(Item item) throws ProcessException {  int count=0;  Item daughter=item.getItemAs(Relation.SYLLABLE_STRUCTURE).getDaughter();  while (daughter != null) {    count++;    daughter=daughter.getNext();  }  return Integer.toString(rail(count));}  }
class C{  public DOMInputImpl(String publicId,String systemId,String baseSystemId,InputStream byteStream,String encoding){  fPublicId=publicId;  fSystemId=systemId;  fBaseSystemId=baseSystemId;  fByteStream=byteStream;  fEncoding=encoding;}  }
class C{  @Override public void onPaint(ViewTransform transform,Graphics2D g){  int x=transform.getSwingX(mBounds.x);  int y=transform.getSwingY(mBounds.y);  int w=transform.getSwingDimension(mBounds.width);  int h=transform.getSwingDimension(mBounds.height);  double progress=getProgress();  int alpha=getPulsatingAlpha(progress);  Color highlight=new Color(mColor.getRed(),mColor.getGreen(),mColor.getBlue(),alpha);  g.setColor(highlight);  int extra=getExtra(progress);  g.fillRect(x - extra,y - extra,w + 2 * extra + 1,h + 2 * extra + 1);}  }
class C{  public Bundler putLong(String key,long value){  bundle.putLong(key,value);  return this;}  }
class C{  @Override protected List<Target> createTargets(List<Element> segmentsAndBoundaries){  List<Target> targets=new ArrayList<Target>();  for (  Element sOrB : segmentsAndBoundaries) {    String phone=getPhoneSymbol(sOrB);    targets.add(new HalfPhoneTarget(phone + "_L",sOrB,true));    targets.add(new HalfPhoneTarget(phone + "_R",sOrB,false));  }  return targets;}  }
class C{  public DataTagValueFilter(final EquipmentLoggerFactory equipmentLoggerFactory){  this.equipmentLogger=equipmentLoggerFactory.getEquipmentLogger(getClass());  ;}  }
class C{  @Override protected void assertDependentMetricsExist(List<String> dependentDimensions){  for (  String dependentDimension : dependentDimensions) {    if (dimensionDictionary.findByApiName(dependentDimension) == null) {      String message=String.format("Cardinality metric dependent dimension %s is not in the dimension dictionary",dependentDimension);      LOG.error(message);      throw new IllegalArgumentException(message);    }  }}  }
class C{  public void scale(Vector3f scale){  m00*=scale.x;  m10*=scale.x;  m20*=scale.x;  m01*=scale.y;  m11*=scale.y;  m21*=scale.y;  m02*=scale.z;  m12*=scale.z;  m22*=scale.z;}  }
class C{  public static void handleError(String errorMessage,SimpleMethod method,Element element) throws ValidationException {  ValidationException e=new ValidationException(errorMessage,method,element);  if (strictOn()) {    throw e;  } else {    Debug.logWarning(e.getMessage(),module);  }}  }
class C{  public SPTKPitchReaderWriter(String lf0SPTKFile,float windowSizeInSeconds,float skipSizeInSeconds,int samplingRate){  contour=null;  header=new PitchFileHeader();  header.windowSizeInSeconds=windowSizeInSeconds;  header.skipSizeInSeconds=skipSizeInSeconds;  header.fs=samplingRate;  try {    contour=readSPTKF0Data(lf0SPTKFile);  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public static void checkSerializedEquality(Object object){  Object object2=serializeAndRecover(object);  Assert.assertEquals("Equals check",object,object2);  Assert.assertEquals("HashCode check",object.hashCode(),object2.hashCode());}  }
class C{  public void removeRelated(String relationName) throws GenericEntityException {  this.getDelegator().removeRelated(relationName,this);}  }
class C{  public ActivateAgentListBehaviour(ResultsAgent a,long lInterval,Queue lCalcArgs,PrintStream pOut,double dMigrationProbability,Object[] oaAgentArgs){  super(a,lInterval);  myAgent=a;  Interval=lInterval;  CalcArgs=lCalcArgs;  OutputStream=pOut;  MigrationProbability=dMigrationProbability;  AgentArgs=oaAgentArgs;}  }
class C{  @Override public void onClick(View v){  Activity activity=(Activity)getContext();  int id=v.getId();  if (id == R.id.btn_send) {    chatView.sendText();  }  if (id == R.id.btn_add) {    updateView(inputMode == InputMode.MORE ? InputMode.TEXT : InputMode.MORE);  }  if (id == R.id.btn_photo) {    if (activity != null && requestCamera(activity)) {      chatView.sendPhoto();    }  }  if (id == R.id.btn_image) {    if (activity != null && requestStorage(activity)) {      chatView.sendImage();    }  }  if (id == R.id.btn_voice) {    if (activity != null && requestAudio(activity)) {      updateView(InputMode.VOICE);    }  }  if (id == R.id.btn_keyboard) {    updateView(InputMode.TEXT);  }  if (id == R.id.btn_video) {    if (getContext() instanceof FragmentActivity) {      FragmentActivity fragmentActivity=(FragmentActivity)getContext();      if (requestVideo(fragmentActivity)) {        VideoInputDialog.show(fragmentActivity.getSupportFragmentManager());      }    }  }  if (id == R.id.btnEmoticon) {    updateView(inputMode == InputMode.EMOTICON ? InputMode.TEXT : InputMode.EMOTICON);  }  if (id == R.id.btn_file) {    chatView.sendFile();  }}  }
class C{  @Override public Result decode(BinaryBitmap image) throws NotFoundException, ChecksumException, FormatException {  return decode(image,null);}  }
class C{  public void testApp(){  assertTrue(true);}  }
class C{  public SecurityException(String message,Throwable cause){  super(message,cause);}  }
class C{  public Builder autoPanPadding(Point autoPanPadding){  this.autoPanPadding=autoPanPadding;  return this;}  }
class C{  private void readDetailedResultsFromFile(String sFilename){  PerformanceTableModel tTmp=new PerformanceTableModel();  String sDetailedRes=utils.loadFileToStringWithNewlines(sFilename);  String[] sRows=sDetailedRes.split("\n");  for (int iRowCnt=0; iRowCnt < sRows.length; iRowCnt++) {    String sLine=sRows[iRowCnt];    if (sLine.startsWith("Theme"))     continue;    String[] sResult=sLine.split("\\s+");    if (sResult.length > 0)     tTmp.append(sResult[1],sResult[0],Double.valueOf(sResult[3]).doubleValue());  }  DetailedResultsTbl.setModel(tTmp);}  }
class C{  public int modify_file1(String appender_file_id,long file_offset,String local_filename) throws IOException, MyException {  String[] parts=new String[2];  this.errno=this.split_file_id(appender_file_id,parts);  if (this.errno != 0) {    return this.errno;  }  return this.modify_file(parts[0],parts[1],file_offset,local_filename);}  }
class C{  private List<ColourRamp> createColourRampList(XMLTwoColourRampList xmlTwoColourRampList){  List<ColourRamp> colourRampList=new ArrayList<ColourRamp>();  for (  XMLTwoColourRamp ramp : xmlTwoColourRampList.getTwoColourRamp()) {    ColourRamp colourRamp=new ColourRamp();    Color startColour=ColourUtils.toColour(ramp.getStart());    Color endColour=ColourUtils.toColour(ramp.getEnd());    colourRamp.setColourRamp(startColour,endColour);    colourRampList.add(colourRamp);  }  return colourRampList;}  }
class C{  public boolean isTerminated(){  return state == ABORTED;}  }
class C{  public MessagesGetHistoryQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  public boolean isElement(String requestPrefix,String requestedElementName){  if ((requestPrefix != null) && (requestedElementName != null)) {    if ((requestPrefix.compareToIgnoreCase(prefix) == 0) && (requestedElementName.compareToIgnoreCase(elementName) == 0)) {      return true;    }  }  return false;}  }
class C{  public void addPoint(float x,float y){  if (npoints == xpoints.length) {    float[] tmp;    tmp=new float[npoints * 2];    System.arraycopy(xpoints,0,tmp,0,npoints);    xpoints=tmp;    tmp=new float[npoints * 2];    System.arraycopy(ypoints,0,tmp,0,npoints);    ypoints=tmp;  }  xpoints[npoints]=x;  ypoints[npoints]=y;  npoints++;  updatePath(x,y);}  }
class C{  public static synchronized void indexTimeDocuments(Queue<CodeIndexDocument> codeIndexDocumentQueue) throws IOException {  Directory dir=FSDirectory.open(Paths.get(Properties.getProperties().getProperty(Values.TIMEINDEXLOCATION,Values.DEFAULTTIMEINDEXLOCATION)));  Directory facetsdir=FSDirectory.open(Paths.get(Properties.getProperties().getProperty(Values.TIMEINDEXFACETLOCATION,Values.DEFAULTTIMEINDEXFACETLOCATION)));  Analyzer analyzer=new CodeAnalyzer();  IndexWriterConfig iwc=new IndexWriterConfig(analyzer);  FacetsConfig facetsConfig=new FacetsConfig();  SearchcodeLib scl=new SearchcodeLib();  iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE_OR_APPEND);  IndexWriter writer=new IndexWriter(dir,iwc);  TaxonomyWriter taxoWriter=new DirectoryTaxonomyWriter(facetsdir);  try {    CodeIndexDocument codeIndexDocument=codeIndexDocumentQueue.poll();    int count=0;    while (codeIndexDocument != null) {      Singleton.getLogger().info("Indexing time file " + codeIndexDocument.getRepoLocationRepoNameLocationFilename());      Singleton.decrementCodeIndexLinesCount(codeIndexDocument.getCodeLines());      Document doc=new Document();      Field pathField=new StringField("path",codeIndexDocument.getRepoLocationRepoNameLocationFilename() + ":" + codeIndexDocument.getRevision(),Field.Store.YES);      doc.add(pathField);      facetsConfig=new FacetsConfig();      facetsConfig.setIndexFieldName(Values.LANGUAGENAME,Values.LANGUAGENAME);      facetsConfig.setIndexFieldName(Values.REPONAME,Values.REPONAME);      facetsConfig.setIndexFieldName(Values.CODEOWNER,Values.CODEOWNER);      facetsConfig.setIndexFieldName(Values.DATEYEARMONTHDAY,Values.DATEYEARMONTHDAY);      facetsConfig.setIndexFieldName(Values.DATEYEARMONTH,Values.DATEYEARMONTH);      facetsConfig.setIndexFieldName(Values.DATEYEAR,Values.DATEYEAR);      facetsConfig.setIndexFieldName(Values.REVISION,Values.REVISION);      facetsConfig.setIndexFieldName(Values.DELETED,Values.DELETED);      if (Helpers.isNullEmptyOrWhitespace(codeIndexDocument.getLanguageName()) == false) {        doc.add(new SortedSetDocValuesFacetField(Values.LANGUAGENAME,codeIndexDocument.getLanguageName()));      }      if (Helpers.isNullEmptyOrWhitespace(codeIndexDocument.getRepoName()) == false) {        doc.add(new SortedSetDocValuesFacetField(Values.REPONAME,codeIndexDocument.getRepoName()));      }      if (Helpers.isNullEmptyOrWhitespace(codeIndexDocument.getCodeOwner()) == false) {        doc.add(new SortedSetDocValuesFacetField(Values.CODEOWNER,codeIndexDocument.getCodeOwner()));      }      if (Helpers.isNullEmptyOrWhitespace(codeIndexDocument.getYearMonthDay()) == false) {        doc.add(new SortedSetDocValuesFacetField(Values.DATEYEARMONTHDAY,codeIndexDocument.getYearMonthDay()));      }      if (Helpers.isNullEmptyOrWhitespace(codeIndexDocument.getYearMonthDay()) == false) {        doc.add(new SortedSetDocValuesFacetField(Values.DATEYEARMONTH,codeIndexDocument.getYearMonthDay().substring(0,6)));      }      if (Helpers.isNullEmptyOrWhitespace(codeIndexDocument.getYearMonthDay()) == false) {        doc.add(new SortedSetDocValuesFacetField(Values.DATEYEAR,codeIndexDocument.getYearMonthDay().substring(0,4)));      }      if (Helpers.isNullEmptyOrWhitespace(codeIndexDocument.getRevision()) == false) {        doc.add(new SortedSetDocValuesFacetField(Values.REVISION,codeIndexDocument.getRevision()));      }      if (Helpers.isNullEmptyOrWhitespace(codeIndexDocument.isDeleted()) == false) {        doc.add(new SortedSetDocValuesFacetField(Values.DELETED,codeIndexDocument.isDeleted()));      }      String indexContents=Values.EMPTYSTRING;      indexContents+=scl.splitKeywords(codeIndexDocument.getContents());      indexContents+=scl.codeCleanPipeline(codeIndexDocument.getContents());      scl.addToSpellingCorrector(codeIndexDocument.getContents());      indexContents=indexContents.toLowerCase();      doc.add(new TextField(Values.REPONAME,codeIndexDocument.getRepoName(),Field.Store.YES));      doc.add(new TextField(Values.FILENAME,codeIndexDocument.getFileName(),Field.Store.YES));      doc.add(new TextField(Values.FILELOCATION,codeIndexDocument.getFileLocation(),Field.Store.YES));      doc.add(new TextField(Values.FILELOCATIONFILENAME,codeIndexDocument.getFileLocationFilename(),Field.Store.YES));      doc.add(new TextField(Values.MD5HASH,codeIndexDocument.getMd5hash(),Field.Store.YES));      doc.add(new TextField(Values.LANGUAGENAME,codeIndexDocument.getLanguageName(),Field.Store.YES));      doc.add(new IntField(Values.CODELINES,codeIndexDocument.getCodeLines(),Field.Store.YES));      doc.add(new TextField(Values.CONTENTS,indexContents,Field.Store.NO));      doc.add(new TextField(Values.REPOLOCATION,codeIndexDocument.getRepoRemoteLocation(),Field.Store.YES));      doc.add(new TextField(Values.CODEOWNER,codeIndexDocument.getCodeOwner(),Field.Store.YES));      doc.add(new TextField(Values.REVISION,codeIndexDocument.getRevision(),Field.Store.YES));      doc.add(new TextField(Values.DATEYEARMONTHDAY,codeIndexDocument.getYearMonthDay(),Field.Store.YES));      doc.add(new TextField(Values.DATEYEARMONTH,codeIndexDocument.getYearMonth(),Field.Store.YES));      doc.add(new TextField(Values.DATEYEAR,codeIndexDocument.getYear(),Field.Store.YES));      doc.add(new TextField(Values.MESSAGE,codeIndexDocument.getMessage(),Field.Store.YES));      doc.add(new TextField(Values.DELETED,codeIndexDocument.isDeleted(),Field.Store.YES));      doc.add(new LongField(Values.MODIFIED,new Date().getTime(),Field.Store.YES));      writer.updateDocument(new Term(Values.PATH,codeIndexDocument.getRepoLocationRepoNameLocationFilename()),facetsConfig.build(taxoWriter,doc));      count++;      if (count >= 1000) {        codeIndexDocument=null;      } else {        codeIndexDocument=codeIndexDocumentQueue.poll();      }    }  }  finally {    Singleton.getLogger().info("Closing writers");    writer.close();    taxoWriter.close();  }}  }
class C{  protected int align(int e){  int lostdigit=0;  boolean inexact=false;  int diff=exp - e;  int adiff=diff;  if (adiff < 0) {    adiff=-adiff;  }  if (diff == 0) {    return 0;  }  if (adiff > (mant.length + 1)) {    Arrays.fill(mant,0);    exp=e;    field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);    dotrap(DfpField.FLAG_INEXACT,ALIGN_TRAP,this,this);    return 0;  }  for (int i=0; i < adiff; i++) {    if (diff < 0) {      if (lostdigit != 0) {        inexact=true;      }      lostdigit=mant[0];      shiftRight();    } else {      shiftLeft();    }  }  if (inexact) {    field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);    dotrap(DfpField.FLAG_INEXACT,ALIGN_TRAP,this,this);  }  return lostdigit;}  }
class C{  private void configureSample(WikiDimensions wikiDimensions){  Set<DimensionConfig> dimsBasefactDruidTableName=wikiDimensions.getDimensionConfigurationsByApiName(WikiApiDimensionName.values());  Set<PhysicalTableDefinition> samplePhysicalTableDefinition=Utils.asLinkedHashSet(new PhysicalTableDefinition(WikiDruidTableName.WIKIPEDIA,HOUR,dimsBasefactDruidTableName));  tableDefinitions.put(WikiLogicalTableName.WIKIPEDIA,samplePhysicalTableDefinition);  druidMetricNames.put(WikiLogicalTableName.WIKIPEDIA,Utils.<FieldName>asLinkedHashSet(WikiDruidMetricName.values()));  apiMetricNames.put(WikiLogicalTableName.WIKIPEDIA,Utils.<ApiMetricName>asLinkedHashSet(WikiApiMetricName.values()));  validGrains.put(WikiLogicalTableName.WIKIPEDIA,Utils.asLinkedHashSet(HOUR,DAY,AllGranularity.INSTANCE));}  }
class C{  @Override protected void synchronizeData(){  needsSyncData(false);  DeferredDocumentImpl ownerDocument=(DeferredDocumentImpl)this.ownerDocument;  name=ownerDocument.getNodeName(fNodeIndex);  baseURI=ownerDocument.getNodeValue(fNodeIndex);}  }
class C{  public boolean isGameStartSet(){  return gameStartSet;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_SLAYER_DOWN_LEVEL(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1400144,value0,value1);}  }
class C{  public static void main(String[] args){  Hashtable hSwitches=gr.demokritos.iit.jinsect.utils.parseCommandLineSwitches(args);  if (getSwitch(hSwitches,"help","").length() > 0) {    printUsage();    System.exit(0);  }  String sCorpusDir=getSwitch(hSwitches,"corpusDir","." + System.getProperty("file.separator"));  int iMinNGram=Integer.valueOf(getSwitch(hSwitches,"minNGram","3")).intValue();  int iMaxNGram=Integer.valueOf(getSwitch(hSwitches,"maxNGram","8")).intValue();  int iCategoriesForGrammar=Integer.valueOf(getSwitch(hSwitches,"categoriesForGrammar","2")).intValue();  int iWindowSize=Integer.valueOf(getSwitch(hSwitches,"windowSize",String.valueOf(2 * iMinNGram <= iMaxNGram ? iMaxNGram + 1 : 2 * iMinNGram))).intValue();  double dTrainPercent=Double.valueOf(getSwitch(hSwitches,"trainPercent","0.20")).doubleValue();  double dPartOfCorpus=Double.valueOf(getSwitch(hSwitches,"partOfCorpus","1.00")).doubleValue();  boolean bSave=Boolean.valueOf(getSwitch(hSwitches,"save",String.valueOf(false))).booleanValue();  boolean bLoad=Boolean.valueOf(getSwitch(hSwitches,"load",String.valueOf(false))).booleanValue();  boolean bCache=Boolean.valueOf(getSwitch(hSwitches,"cache",String.valueOf(false))).booleanValue();  if (bCache)   hCategoryGraphs=new HashMap<String,DocumentNGramGraph>();  String sModelDir=getSwitch(hSwitches,"modelDir","./models/");  String sOutFile=getSwitch(hSwitches,"o","");  if (sOutFile.length() > 0) {    try {      PrintStream pOut=new PrintStream(new FileOutputStream(new File(sOutFile)));      System.setOut(pOut);    } catch (    FileNotFoundException ex) {      Logger.getLogger(grammarAndContentAnalysis.class.getName()).log(Level.SEVERE,null,ex);      System.err.println("Could not redirect to output file. Using " + "standard output.");    }  }  DocumentSet dsCorpus=new DocumentSet(sCorpusDir,dTrainPercent);  dsCorpus.createSets(true,dPartOfCorpus);  INSECTFileDB<DocumentNGramGraph> db=new INSECTFileDB("",sModelDir);  INSECTFileDB<HashSet<String>> dbParams=new INSECTFileDB("params",sModelDir);  Set<String> sGrammarCategories=null;  DocumentNGramGraph categoryGraph=null;  DocumentNGramGraph gGrammar=null;  boolean bLoadedOK=false;  if (bLoad) {    System.err.print("Loading grammar...");    gGrammar=db.loadObject(GRAMMAR_NAME,GRAMMAR_TYPE);    bLoadedOK=gGrammar != null;    sGrammarCategories=dbParams.loadObject(GRAMMAR_DOCS_PARAM,PARAM_TYPE);    bLoadedOK=bLoadedOK && (sGrammarCategories != null);    if (bLoadedOK) {      if ((gGrammar.getMinSize() == iMinNGram) && (gGrammar.getMaxSize() == iMaxNGram) && (gGrammar.getWindowSize() == iWindowSize)) {        System.err.println("Loaded OK  with a size of " + gGrammar.length());      } else {        bLoadedOK=false;        System.err.println("Graph parameters differ from the parameters" + " given. Recreating grammar.");      }    } else {      System.err.println("Load failed. Continuing...");    }  }  if (!bLoadedOK) {    sGrammarCategories=new HashSet<String>();    for (    Object elem : dsCorpus.getCategories()) {      String sCurCategory=(String)elem;      categoryGraph=new DocumentNGramSymWinGraph(iMinNGram,iMaxNGram,iWindowSize);      System.err.println("Extracting graph from category " + sCurCategory);      categoryGraph=getGraphFor(sCurCategory,CATEGORY_MODEL_TYPE,db,dsCorpus.getFilesFromCategory(sCurCategory,DocumentSet.FROM_TRAINING_SET),iMinNGram,iMaxNGram,iWindowSize,bLoad,bSave);      if (sGrammarCategories.size() > 0) {        gGrammar.intersectGraph(categoryGraph);      } else {        gGrammar=categoryGraph;      }      sGrammarCategories.add(sCurCategory);      if (sGrammarCategories.size() == iCategoriesForGrammar) {        break;      }    }    System.err.println("Grammar created with a size of " + gGrammar.length() + ".");    if (bSave) {      System.err.print("Saving grammar...");      db.saveObject(gGrammar,GRAMMAR_NAME,GRAMMAR_TYPE);      dbParams.saveObject((HashSet<String>)sGrammarCategories,GRAMMAR_DOCS_PARAM,PARAM_TYPE);      System.err.println("Done.");    }  }  Distribution<String> dPerCategoryOverallCount=new Distribution<String>();  Distribution<String> dPerCategoryCorrectCount=new Distribution<String>();  for (  CategorizedFileEntry cfeCur : (List<CategorizedFileEntry>)dsCorpus.getTestSet()) {    DocumentNGramGraph dgCurDoc=new DocumentNGramSymWinGraph(iMinNGram,iMaxNGram,iWindowSize);    System.err.println("Loading file " + cfeCur.getFileName());    try {      dgCurDoc.loadDataStringFromFile(cfeCur.getFileName());    } catch (    IOException ex) {      Logger.getLogger(grammarAndContentAnalysis.class.getName()).log(Level.SEVERE,"Cannot load file.",ex);      continue;    }    if (gGrammar != null) {      System.err.println("Removing grammar...");      dgCurDoc=dgCurDoc.allNotIn(gGrammar);    }    String sRes=determineCategory(dgCurDoc,cfeCur.getFileName(),cfeCur.getCategory(),dsCorpus.getCategories(),db,dsCorpus,iMinNGram,iMaxNGram,iWindowSize,bLoad,bSave,gGrammar);    if (sRes.equals(cfeCur.getCategory())) {      dPerCategoryCorrectCount.increaseValue(cfeCur.getCategory(),1.0);    }    dPerCategoryOverallCount.increaseValue(cfeCur.getCategory(),1.0);  }  outputResults("Results ",dPerCategoryCorrectCount,dPerCategoryOverallCount);}  }
class C{  public Constant key(){  return key;}  }
class C{  public static byte[] toByteArray(InputStream input) throws IOException {  ByteArrayOutputStream output=new ByteArrayOutputStream();  copy(input,output);  return output.toByteArray();}  }
class C{  private void updateView(){  if (rebuildItems()) {    calculateLayoutWidth(getWidth(),MeasureSpec.EXACTLY);    layout(getWidth(),getHeight());  }}  }
class C{  public static boolean solveSelectionConflict(@NotNull Conflict conflict){  return solveSelectionConflict(conflict,true);}  }
class C{  void initFromCameraParameters(Camera camera){  Camera.Parameters parameters=camera.getParameters();  previewFormat=parameters.getPreviewFormat();  previewFormatString=parameters.get("preview-format");  Log.d(TAG,"Default preview format: " + previewFormat + '/'+ previewFormatString);  WindowManager manager=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);  Display display=manager.getDefaultDisplay();  screenResolution=new Point(display.getWidth(),display.getHeight());  Log.d(TAG,"Screen resolution: " + screenResolution);  Point screenResolutionForCamera=new Point();  screenResolutionForCamera.x=screenResolution.x;  screenResolutionForCamera.y=screenResolution.y;  if (screenResolution.x < screenResolution.y) {    screenResolutionForCamera.x=screenResolution.y;    screenResolutionForCamera.y=screenResolution.x;  }  cameraResolution=getCameraResolution(parameters,screenResolutionForCamera);  Log.d(TAG,"Camera resolution: " + screenResolution);}  }
class C{  public GeoServerStyleNode(FileSystemInterface handler,GeoServerConnection connectData,StyleWrapper style){  super(style.getStyle());  this.handler=handler;  this.style=style;  this.connectData=connectData;}  }
class C{  public static Range toRange(ICompilationUnit unit,int offset,int length) throws JavaModelException {  Range result=new Range();  final IBuffer buffer=unit.getBuffer();  int[] loc=JsonRpcHelpers.toLine(buffer,offset);  int[] endLoc=JsonRpcHelpers.toLine(buffer,offset + length);  if (loc != null && endLoc != null) {    result.setStart(new Position().withLine(loc[0]).withCharacter(loc[1]));    result.setEnd(new Position().withLine(endLoc[0]).withCharacter(endLoc[1]));  }  return result;}  }
class C{  public void clear(){  uid=0;  bitScore=0;  percentIdentity=0;  expected=0;  length=0;  text=null;  fName2Id.clear();}  }
class C{  public int add(String name){  if (!name2index.keySet().contains(name)) {    ntax++;    bits.set(ntax);    Integer index=ntax;    index2name.put(index,name);    name2index.put(name,index);    return ntax;  } else   return name2index.get(name);}  }
class C{  @Override public void onResponse(GankData response){  getContentText.setText(response.toString());}  }
class C{  public void decipher(byte[] data){  decipher(data,0,data.length);}  }
class C{  public TEqualsExtended(Expression expression1,Expression expression2){  super(expression1,expression2);}  }
class C{  public void chainCheck(ConditionStack conditionStack) throws LoadableConditionException {  Stack<LoadableComponentContext> stack=conditionStack.getLoadableContextStack();  ConditionProgressTracker progressTracker=new ConditionProgressTracker(stack);  while (!stack.isEmpty()) {    LoadableComponentContext loadableContext=stack.pop();    if (loadableContext.getConditionContext() != null) {      progressTracker.stepStart(loadableContext);      LoadableComponentCondition componentCondition=produceInitializedCondition(loadableContext);      Object subject=acquireSubjectInstance(loadableContext);      evaluateCondition(componentCondition,subject,loadableContext,progressTracker);    }  }}  }
class C{  public static int hash(String key,int bitSize,String input){  int fullHash=(key + input).hashCode();  int bitLimitedHash=fullHash;  if (bitSize < 32) {    bitLimitedHash=(0xFFFFFFFF >>> (32 - bitSize)) & fullHash;  }  return bitLimitedHash;}  }
class C{  @Override public void onWebsocketPong(WebSocket conn,Framedata f){}  }
class C{  @Override public boolean isDefinedFacet(short facetName){  if (fValidationDV == DV_ANYSIMPLETYPE || fValidationDV == DV_ANYATOMICTYPE) {    return false;  }  if ((fFacetsDefined & facetName) != 0) {    return true;  }  if (fPatternType != SPECIAL_PATTERN_NONE) {    return facetName == FACET_PATTERN;  }  if (fValidationDV == DV_INTEGER) {    return facetName == FACET_PATTERN || facetName == FACET_FRACTIONDIGITS;  }  return false;}  }
class C{  public DynamicTemplateParameterContext addParameter(DynamicContextParameters param,String paramValue,boolean deleteOnExit){  return addParameter(param,paramValue,deleteOnExit,ContextInfo.EMPTY);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FORCE_HE_LEAVE_FORCE(String value0){  return new SM_SYSTEM_MESSAGE(1301012,value0);}  }
class C{  public static <T extends Bean>Beans<T> load(String collection,Bson query,Bson orderBy,int offset,int limit,final Class<T> clazz){  TimeStamp t=TimeStamp.create();  MongoCollection<Document> db=null;  FindIterable<Document> cur=null;  try {    db=MongoHelper.getCollection(collection);    if (db != null) {      cur=db.find(query);      if (orderBy != null) {        cur.sort(orderBy);      }      final Beans<T> bs=new Beans<T>();      cur=cur.skip(offset);      if (limit < 0) {        limit=1000;      }      cur=cur.limit(limit);      bs.list=new ArrayList<T>();      MongoCursor<Document> it=cur.iterator();      while (it.hasNext() && limit > 0) {        Document d=it.next();        if (d != null) {          T b=clazz.newInstance();          b.load(d);          bs.list.add(b);          limit--;        }      }      if (log.isDebugEnabled())       log.debug("load - cost=" + t.past() + "ms, collection="+ collection+ ", query="+ query+ ", order="+ orderBy+ ", offset="+ offset+ ", limit="+ limit+ ", result="+ (bs == null || bs.getList() == null ? "null" : bs.getList().size()));      if (t.past() > 10000) {        log.warn("load - cost=" + t.past() + "ms, collection="+ collection+ ", query="+ query+ ", order="+ orderBy+ ", result="+ (bs == null || bs.getList() == null ? "null" : bs.getList().size()));      }      return bs;    }  } catch (  Exception e) {    log.error("query=" + query + ", order="+ orderBy,e);    if (query != null && db != null) {      db.createIndex(query);    }    if (orderBy != null && db != null) {      db.createIndex(orderBy);    }  }  return null;}  }
class C{  private void processFormFieldEnd(){  slickFormSubmitButton.setText(!endTag.isEmpty() ? endTag : getResources().getText(R.string.form_field_progress));  slickFieldContainer.setVisibility(View.GONE);  slickFormProgressBar.setVisibility(View.VISIBLE);  new DutyAsyncTask().execute();}  }
class C{  protected String toString(String op){  if (m_clauses.size() == 1) {    return m_clauses.get(0).toString();  }  StringBuffer sbuf=new StringBuffer();  sbuf.append('(');  Iterator iter=m_clauses.iterator();  while (iter.hasNext()) {    sbuf.append(iter.next().toString());    if (iter.hasNext()) {      sbuf.append(" ");      sbuf.append(op);      sbuf.append(" ");    }  }  sbuf.append(')');  return sbuf.toString();}  }
class C{  @Override public Writer append(CharSequence value){  builder.append(value);  return this;}  }
class C{  public void dumpBinary(DataOutputStream os) throws IOException {  char[] nameArray=(name + "        ").toCharArray();  os.writeInt(MAGIC);  for (int i=0; i < NAME_LENGTH; i++) {    os.writeChar(nameArray[i]);  }  os.writeInt(midPoint);  os.writeInt(samples.length);  for (int i=0; i < samples.length; i++) {    samples[i].dumpBinary(os);  }}  }
class C{  public static <T>T convert(Object source,Class<T> destType){  return JSON.convertValue(source,destType);}  }
class C{  public void addln(){  this.graph.append('\n');}  }
class C{  static Set<String> parsePathParameters(String path){  Matcher m=PARAM_URL_REGEX.matcher(path);  Set<String> patterns=new LinkedHashSet<>();  while (m.find()) {    patterns.add(m.group(1));  }  return patterns;}  }
class C{  public static Boolean hasInnerQuery(JsonGenerator gen){  return mapNearestDruidQuery(gen,null).orElse(false);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_IMMUNED_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1201082,skilltarget,skillname);}  }
class C{  private void moveRestart(TableJson json,Storage src,Storage dest){  Delta delta=json.newMoveRestart(src,dest);  Audit audit=new AuditBuilder().set("_op","doMoveRestart").set("_srcUuid",src.getUuidString()).set("_srcPlacement",src.getPlacement()).set("_destUuid",dest.getUuidString()).set("_destPlacement",dest.getPlacement()).build();  updateTableMetadata(json.getTable(),delta,audit,InvalidationScope.GLOBAL);}  }
class C{  private boolean isCurrentFolder(String mailBoxFolder){  return folder.getName().equalsIgnoreCase(mailBoxFolder);}  }
class C{  @Nullable private static SearchScope limitScopeToFile(SearchScope scope,PsiFile file){  if (scope instanceof LocalSearchScope) {    return ((LocalSearchScope)scope).isInScope(file.getVirtualFile()) ? new LocalSearchScope(file) : null;  }  return scope.intersectWith(new LocalSearchScope(file));}  }
class C{  public boolean removeEdge(int edge){  return getEdgeTable().removeRow(edge);}  }
class C{  public Builder clickable(Boolean clickable){  this.clickable=clickable;  return this;}  }
class C{  private boolean shouldCheckApiVersionOnPath(String path){  for (  Pattern filterPattern : API_VERSION_FILTER_PATTERNS) {    Matcher matcher=filterPattern.matcher(path);    if (matcher.matches()) {      return true;    }  }  return false;}  }
class C{  public Draggable searchForAsset(String asset){  if (isClosed()) {    pageObjectInjector.inject(GlobalBar.class).toggleSidePanel();  }  verifyResultsVisible();  searchInput.sendKeys(asset);  searchInput.sendKeys(Keys.ENTER);  verifyResultsVisible();  return dragAndDropFactory.createDraggable(getResult(asset),FramePath.parsePath("/"));}  }
class C{  private static boolean isSchemeCharacter(char p_char){  return (p_char <= 'z' && (fgLookupTable[p_char] & MASK_SCHEME_CHARACTER) != 0);}  }
class C{  public HttpRequestWrapper(JsonObject json){  this.path=json.getString("path");  if (json.containsKey("method")) {    this.method=HttpMethod.valueOf(json.getString("method"));  }  if (json.containsKey("params")) {    this.params=fromJsonArray(json.getJsonArray("params"));  }  if (json.containsKey("formAttributes")) {    this.formAttributes=fromJsonArray(json.getJsonArray("formAttributes"));  }  if (json.containsKey("headers")) {    this.headers=fromJsonArray(json.getJsonArray("headers"));  }}  }
class C{  public static String readKeyValueLocalMachine(String keyPath,String valueName){  return readKeyValue(HKEY_LOCAL_MACHINE,keyPath,valueName);}  }
class C{  public Iterator items(Predicate filter){  int size=m_visual.size();  if (size == 0) {    return Collections.EMPTY_LIST.iterator();  } else   if (size == 1) {    Iterator it=m_visual.keySet().iterator();    return items((String)it.next(),filter);  } else {    CompositeIterator iter=new CompositeIterator(m_visual.size());    Iterator it=m_visual.keySet().iterator();    for (int i=0; it.hasNext(); ) {      String group=(String)it.next();      if (!PrefuseLib.isChildGroup(group))       iter.setIterator(i++,items(group,filter));    }    return iter;  }}  }
class C{  private void upgradeImplicitAverageMonitoringRules(){  if (executeSql("update validationrule set lowoutliers = lowoutliers where validationruleid < 0") < 0) {    return;  }  executeSql("INSERT INTO expressionsampleelement (expressionid, dataelementid) " + "SELECT ede.expressionid, ede.dataelementid " + "FROM expressiondataelement ede "+ "JOIN expression e ON e.expressionid = ede.expressionid "+ "JOIN validationrule v ON v.rightexpressionid = e.expressionid "+ "WHERE v.ruletype='SURVEILLANCE' "+ "AND e.expression NOT LIKE '%AVG%' and e.expression NOT LIKE '%STDDEV%';");  executeSql("update expression set expression=" + statementBuilder.concatenate("'AVG('","expression","')'") + " from validationrule where ruletype='SURVEILLANCE' AND rightexpressionid=expressionid "+ "AND expression NOT LIKE '%AVG%' and expression NOT LIKE '%STDDEV%';");  executeSql("ALTER TABLE validationrule DROP COLUMN highoutliers");  executeSql("ALTER TABLE validationrule DROP COLUMN lowoutliers");  log.info("Added explicit AVG calls to olid-style implicit average surveillance rules");}  }
class C{  protected void putSetMethodValueByField(DataSupport dataSupport,Field field,Object parameter) throws SecurityException, NoSuchMethodException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {  if (shouldGetOrSet(dataSupport,field)) {    String setMethodName=makeSetterMethodName(field);    DynamicExecutor.send(dataSupport,setMethodName,new Object[]{parameter},dataSupport.getClass(),new Class[]{field.getType()});  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_CANNOT_ENTER_INSTANCE_COOL_TIME_MIN(String worldname0,String value1){  return new SM_SYSTEM_MESSAGE(1400030,worldname0,value1);}  }
class C{  public void actionPerformed(ActionEvent ev){  executeImmediately("select=invert;");}  }
class C{  private Expression extractExpression(JsonObject jsonObj){  Expression expression=null;  String expressionString="";  if (jsonObj != null) {    expressionString=jsonObj.get(LabelEngineLayerPropertiesKey.EXPRESSION).getAsString();    if (expressionString.startsWith("[")) {      expressionString=expressionString.substring(1);      if (expressionString.endsWith("]")) {        expressionString=expressionString.substring(0,expressionString.length() - 1);        expression=ff.property(expressionString);      }    } else {      expression=ff.literal(expressionString);    }  }  return expression;}  }
class C{  public void put(IValidatable bean){  for (  Binding b : _optComponents.values()) {    b.put(bean);  }  for (  Binding b : _bindings.values()) {    if (isPropertyNull(bean,b)) {      b.clear(null);    } else {      b.put(bean);    }  }  _modified=false;}  }
class C{  public PlayerAccount(final PlayerProfile playerProfile){  this.playerProfile=playerProfile;}  }
class C{  public static ScriptContext createScriptContext(Map<String,Object> context,Set<String> protectedKeys){  Assert.notNull("context",context,"protectedKeys",protectedKeys);  Map<String,Object> localContext=new HashMap<String,Object>(context);  localContext.put(WIDGET_CONTEXT_KEY,context);  localContext.put("context",context);  ScriptContext scriptContext=new SimpleScriptContext();  Bindings bindings=new ProtectedBindings(localContext,Collections.unmodifiableSet(protectedKeys));  scriptContext.setBindings(bindings,ScriptContext.ENGINE_SCOPE);  ScriptHelper helper=createScriptHelper(scriptContext);  if (helper != null) {    localContext.put(SCRIPT_HELPER_KEY,helper);  }  return scriptContext;}  }
class C{  public synchronized int createRequest(String rawArgs,int action,CallbackContext callbackContext){  Request req=new Request(rawArgs,action,callbackContext);  requests.put(req.requestCode,req);  return req.requestCode;}  }
class C{  protected final void writeS(ChannelBuffer buf,String text){  if (text == null) {    buf.writeChar('\000');  } else {    final int len=text.length();    for (int i=0; i < len; i++) {      buf.writeChar(text.charAt(i));    }    buf.writeChar('\000');  }}  }
class C{  private void showMultiPanel(WKTType wktType){  boolean enabled=false;  if (wktType != null) {    wktType.canHaveMultipleShapes();  }  multiList.setVisible(enabled);  addMultiButton.setEnabled(enabled);  removeMultiButton.setEnabled(enabled);}  }
class C{  public String typeName(){  return "class";}  }
class C{  protected final void handleBaseURI(int node){  short nodeType=fDeferredDocumentImpl.getNodeType(node,false);  if (nodeType == Node.ELEMENT_NODE) {    String baseURI=fDeferredDocumentImpl.getNodeValueString(fCurrentNodeIndex,false);    if (baseURI == null) {      baseURI=fDeferredDocumentImpl.getDeferredEntityBaseURI(fDeferredEntityDecl);    }    if (baseURI != null && !baseURI.equals(fDeferredDocumentImpl.getDocumentURI())) {      fDeferredDocumentImpl.setDeferredAttribute(node,"xml:base","http://www.w3.org/XML/1998/namespace",baseURI,true);    }  } else   if (nodeType == Node.PROCESSING_INSTRUCTION_NODE) {    String baseURI=fDeferredDocumentImpl.getNodeValueString(fCurrentNodeIndex,false);    if (baseURI == null) {      baseURI=fDeferredDocumentImpl.getDeferredEntityBaseURI(fDeferredEntityDecl);    }    if (baseURI != null && fErrorHandler != null) {      DOMErrorImpl error=new DOMErrorImpl();      error.fType="pi-base-uri-not-preserved";      error.fRelatedData=baseURI;      error.fSeverity=DOMError.SEVERITY_WARNING;      fErrorHandler.getErrorHandler().handleError(error);    }  }}  }
class C{  public AverageLinkClusterer(){}  }
class C{  public static SM_SYSTEM_MESSAGE STR_ABYSS_CASTLE_TAKEN(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1301046,value0,value1);}  }
class C{  private static List<SubHyperplane<Euclidean3D>> buildBoundary(final List<Vector3D> vertices,final List<int[]> facets,final double tolerance){  for (int i=0; i < vertices.size() - 1; ++i) {    final Vector3D vi=vertices.get(i);    for (int j=i + 1; j < vertices.size(); ++j) {      if (Vector3D.distance(vi,vertices.get(j)) <= tolerance) {        throw new MathIllegalArgumentException(LocalizedGeometryFormats.CLOSE_VERTICES,vi.getX(),vi.getY(),vi.getZ());      }    }  }  final int[][] references=findReferences(vertices,facets);  final int[][] successors=successors(vertices,facets,references);  for (int vA=0; vA < vertices.size(); ++vA) {    for (    final int vB : successors[vA]) {      if (vB >= 0) {        boolean found=false;        for (        final int v : successors[vB]) {          found=found || (v == vA);        }        if (!found) {          final Vector3D start=vertices.get(vA);          final Vector3D end=vertices.get(vB);          throw new MathIllegalArgumentException(LocalizedGeometryFormats.EDGE_CONNECTED_TO_ONE_FACET,start.getX(),start.getY(),start.getZ(),end.getX(),end.getY(),end.getZ());        }      }    }  }  final List<SubHyperplane<Euclidean3D>> boundary=new ArrayList<SubHyperplane<Euclidean3D>>();  for (  final int[] facet : facets) {    Plane plane=new Plane(vertices.get(facet[0]),vertices.get(facet[1]),vertices.get(facet[2]),tolerance);    final Vector2D[] two2Points=new Vector2D[facet.length];    for (int i=0; i < facet.length; ++i) {      final Vector3D v=vertices.get(facet[i]);      if (!plane.contains(v)) {        throw new MathIllegalArgumentException(LocalizedGeometryFormats.OUT_OF_PLANE,v.getX(),v.getY(),v.getZ());      }      two2Points[i]=plane.toSubSpace(v);    }    boundary.add(new SubPlane(plane,new PolygonsSet(tolerance,two2Points)));  }  return boundary;}  }
class C{  @Override protected void onSizeChanged(int w,int h,int oldw,int oldh){  super.onSizeChanged(w,h,oldw,oldh);  mCenterX=w / 2;  mCenterY=h / 2;  mRadius=Math.min(mCenterX,mCenterY);  mProgressRectF.top=mCenterY - mRadius;  mProgressRectF.bottom=mCenterY + mRadius;  mProgressRectF.left=mCenterX - mRadius;  mProgressRectF.right=mCenterX + mRadius;  updateProgressShader();  mProgressRectF.inset(mProgressStrokeWidth / 2,mProgressStrokeWidth / 2);}  }
class C{  private ScenePoseCalculator(){}  }
class C{  public Vector3D pointAt(final double abscissa){  return new Vector3D(1.0,zero,abscissa,direction);}  }
class C{  public boolean isAnyAxisInverted(){  if (mAxisLeft.isInverted())   return true;  if (mAxisRight.isInverted())   return true;  return false;}  }
class C{  public synchronized void clear(){  setArray(new Object[0]);}  }
class C{  public AudioGetPopularQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  private void updateSymbol(){  if (!Controller.getInstance().isPopulating()) {    StandardData standardData=getStandardData();    Expression geometryField=ExtractGeometryField.getGeometryField(fieldConfigVisitor);    PointSymbolizer pointSymbolizer=(PointSymbolizer)SelectedSymbol.getInstance().getSymbolizer();    if (pointSymbolizer != null) {      pointSymbolizer.setName(standardData.name);      pointSymbolizer.setDescription(standardData.description);      pointSymbolizer.setUnitOfMeasure(standardData.unit);      pointSymbolizer.setGeometry(geometryField);      this.fireUpdateSymbol();    }  }}  }
class C{  public BoundingVolume merge(BoundingVolume volume){  if (volume == null) {    return this;  }switch (volume.getType()) {case Sphere:{      BoundingSphere sphere=(BoundingSphere)volume;      float temp_radius=sphere.getRadius();      Vector3f temp_center=sphere.center;      BoundingSphere rVal=new BoundingSphere();      return merge(temp_radius,temp_center,rVal);    }case AABB:{    BoundingBox box=(BoundingBox)volume;    Vector3f radVect=new Vector3f(box.xExtent,box.yExtent,box.zExtent);    Vector3f temp_center=box.center;    BoundingSphere rVal=new BoundingSphere();    return merge(radVect.length(),temp_center,rVal);  }default :return null;}}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,scrollRange,0,DEFAULT_OVERSCROLL_SCALE,isTouchEvent);}  }
class C{  @NonNull private Animator revealAnimator(int centerX,int centerY){  final Animator animator;  final int oldScale=0, newScale=1;  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {    animator=ViewAnimationUtils.createCircularReveal(this,centerX,centerY,0,dotRadius);  } else   if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {    final PropertyValuesHolder scaleX=PropertyValuesHolder.ofFloat(View.SCALE_X,oldScale,newScale);    final PropertyValuesHolder scaleY=PropertyValuesHolder.ofFloat(View.SCALE_Y,oldScale,newScale);    animator=ObjectAnimator.ofPropertyValuesHolder(this,scaleX,scaleY);  } else {    final Animator scaleX=ObjectAnimator.ofFloat(this,"scaleX",oldScale,newScale);    final Animator scaleY=ObjectAnimator.ofFloat(this,"scaleY",oldScale,newScale);    final AnimatorSet animatorSet=new AnimatorSet();    animatorSet.playTogether(scaleX,scaleY);    animator=animatorSet;  }  return animator;}  }
class C{  public void remove(IObjectInfo<T> poi){  remove_impl(poi,true);}  }
class C{  public boolean isMaintainAspectRatio(){  return maintainAspectRatio;}  }
class C{  @Override public V put(K key,V value){  if (!containsKey(key))   keys.add(key);  return super.put(key,value);}  }
class C{  public boolean isStatic(){  return Modifier.isStatic(this.getModifiers());}  }
class C{  @deprecated public static int compare(int codepoint,CharSequence a){  return -compare(a,codepoint);}  }
class C{  protected boolean isValidScheme(String scheme){  if (scheme == null) {    return false;  }  if (!SCHEME_PATTERN.matcher(scheme).matches()) {    return false;  }  if (isOff(ALLOW_ALL_SCHEMES) && !allowedSchemes.contains(scheme.toLowerCase(Locale.ENGLISH))) {    return false;  }  return true;}  }
class C{  @Override public boolean equals(Object other){  if (null == other || !(other instanceof ByteArrayWrapper)) {    return false;  }  boolean result=false;  byte[][] noDictionaryKeysOther=((ByteArrayWrapper)other).noDictionaryKeys;  if (noDictionaryKeysOther.length != noDictionaryKeys.length) {    return false;  } else {    for (int i=0; i < noDictionaryKeys.length; i++) {      result=UnsafeComparer.INSTANCE.equals(noDictionaryKeys[i],noDictionaryKeysOther[i]);      if (!result) {        return false;      }    }  }  byte[][] complexTypesKeysOther=((ByteArrayWrapper)other).complexTypesKeys;  if (complexTypesKeysOther.length != complexTypesKeys.length) {    return false;  } else {    for (int i=0; i < complexTypesKeys.length; i++) {      result=UnsafeComparer.INSTANCE.equals(complexTypesKeys[i],complexTypesKeysOther[i]);      if (!result) {        return false;      }    }  }  return UnsafeComparer.INSTANCE.equals(dictionaryKey,((ByteArrayWrapper)other).dictionaryKey);}  }
class C{  public static boolean isGeoHeaderEnabledForUrl(Context context,String url,boolean isIncognito){  return isGeoHeaderEnabledForUrl(context,url,isIncognito,false);}  }
class C{  public PowellOptimizer(double rel,double abs,double lineRel,double lineAbs){  this(rel,abs,lineRel,lineAbs,null);}  }
class C{  public Request interceptRequest(Request request,Connection connection){  if (BuildConfig.DEBUG) {    Log.d("Request",String.format("%s: %s \n%s",request.method(),request.url(),request.headers().toString()));  }  return request;}  }
class C{  public String loadFile(String sID){  return getDocumentText(sID,true);}  }
class C{  public void acceptConfirmationWindow(){  clickButton(YES_BUTTON_TEXT);}  }
class C{  public StringRequest(int method,String url,Response.Listener<String> listener,Response.ErrorListener errorListener){  super(method,url,errorListener);  mListener=listener;}  }
class C{  public AemList clear(){  for (  AemListItem item : this) {    removeItem(item);  }  return this;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_PROCFPHeal_Instant_HEAL_ME_TO_SELF(int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200392,num0,skillname);}  }
class C{  public JSearchPanel(Visualization vis,String group,String field){  this(vis,group,field,true);}  }
class C{  private List<List<IntervalFeature>> stackFeatures() throws InvalidGenomicCoordsException {  List<IntervalFeature> intervals;  if (this.getFeatureDisplayMode().equals(FeatureDisplayMode.SQUASHED)) {    intervals=this.squashFeatures(this.intervalFeatureList);  } else   if (this.getFeatureDisplayMode().equals(FeatureDisplayMode.MERGED)) {    intervals=Utils.mergeIntervalFeatures(this.intervalFeatureList);  } else {    intervals=this.intervalFeatureList;  }  List<IntervalFeature> flatList=new ArrayList<IntervalFeature>();  for (  IntervalFeature x : intervals) {    flatList.add(x);  }  List<List<IntervalFeature>> listOfLines=new ArrayList<List<IntervalFeature>>();  if (flatList.size() == 0) {    return listOfLines;  }  List<IntervalFeature> line=new ArrayList<IntervalFeature>();  line.add(flatList.get(0));  flatList.remove(0);  listOfLines.add(line);  while (true) {    ArrayList<IntervalFeature> trToRemove=new ArrayList<IntervalFeature>();    for (int i=0; i < flatList.size(); i++) {      IntervalFeature intervalFeature=flatList.get(i);      if (intervalFeature.getScreenFrom() > line.get(line.size() - 1).getScreenTo() + this.getGap()) {        listOfLines.get(listOfLines.size() - 1).add(intervalFeature);        trToRemove.add(intervalFeature);      }    }    for (    IntervalFeature intervalFeature : trToRemove) {      flatList.remove(flatList.indexOf(intervalFeature));    }    if (flatList.size() > 0) {      line=new ArrayList<IntervalFeature>();      line.add(flatList.get(0));      listOfLines.add(line);      flatList.remove(0);    } else {      break;    }  }  return listOfLines;}  }
class C{  public int available() throws IOException {  if (reduceChannels)   return (super.available() / ratio) / 2; else   return super.available() / ratio;}  }
class C{  public static void xml(String xml){  printer.xml(xml);}  }
class C{  public NeighborHighlightControl(String activity){  this.activity=activity;}  }
class C{  public PhotosGetAllQueryWithExtended offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public static Typeface customTypeface(Context context,int index){  Typeface typeface=null;  if (index == 1)   typeface=Typeface.createFromAsset(context.getAssets(),"fonts/BreeSerif-Regular.ttf");  if (index == 2)   typeface=Typeface.createFromAsset(context.getAssets(),"fonts/OpenSans-Regular.ttf");  if (index == 3)   typeface=Typeface.createFromAsset(context.getAssets(),"fonts/OpenSans-Bold.ttf");  return typeface;}  }
class C{  public void copyNode(String nodePath,String destinationPath) throws RepositoryException {  copyNode(getNode(nodePath),getNode(destinationPath));  session.save();}  }
class C{  private static void estimateProbability(ScoutWidget from,Direction fromDir,ScoutWidget to,Direction toDir,ScoutWidget[] list,float[] result){  result[RESULT_PROBABILITY]=0;  result[RESULT_MARGIN]=0;  if (from == to) {    return;  }  if (from.isGuideline()) {    return;  }  if (to.isGuideline()) {    if ((toDir == Direction.NORTH || toDir == Direction.SOUTH) && to.isVerticalGuideline()) {      return;    }    if ((toDir == Direction.EAST || toDir == Direction.WEST) && to.isHorizontalGuideline()) {      return;    }  }  if ((toDir == Direction.NORTH || toDir == Direction.SOUTH) & from.hasBaseline()) {    if (from.hasConnection(Direction.BASE)) {      return;    }  }  if (fromDir == Direction.BASE) {    if (!from.hasBaseline() || !to.hasBaseline()) {      return;    }  }  float fromLocation=from.getLocation(fromDir);  float toLocation=to.getLocation(toDir);  float positionDiff=(fromDir.reverse()) ? fromLocation - toLocation : toLocation - fromLocation;  float distance=2 * ScoutWidget.distance(from,to);  if (to.isRoot()) {    distance=Math.abs(distance - ROOT_MARGIN_DISCOUNT);  }  float probability=1 / (1 + distance * distance + positionDiff * positionDiff);  if (fromDir == Direction.BASE) {    if (Math.abs(positionDiff) > BASELINE_ERROR) {      return;    }    probability*=2;  }  if (to.isRoot()) {    probability*=2;  }  result[RESULT_PROBABILITY]=(positionDiff >= 0) ? probability : NEGATIVE_GAP_FLAG;  result[RESULT_MARGIN]=positionDiff;}  }
class C{  public SimpleIntegerProperty qosProperty(){  return this.qos;}  }
class C{  public int size(){  return counter.get();}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) private List filterResourcesForLookup(Iterable resources,ResourceField field){  List results=new ArrayList();  Iterator iterator=resources.iterator();  while (iterator.hasNext()) {    Object resource=iterator.next();    Object property=PropertyUtils.getProperty(resource,field.getUnderlyingName());    LookupIncludeBehavior lookupIncludeBehavior=field.getLookupIncludeAutomatically();    if (lookupIncludeBehavior == LookupIncludeBehavior.AUTOMATICALLY_ALWAYS || (property == null && lookupIncludeBehavior == LookupIncludeBehavior.AUTOMATICALLY_WHEN_NULL)) {      results.add(resource);    }  }  return results;}  }
class C{  public DefaultTransactionProvider(Object actualTransactionalContext,PlatformTransactionManager transactionManager){  this.actualTransactionalContext=actualTransactionalContext;  this.transactionManager=transactionManager;  if (transactionManager != null) {    this.isJta=transactionManager instanceof JtaTransactionManager;  }}  }
class C{  public static String imageUrl(String type){  return "http://thecatapi.com/api/images/get?format=src&type=" + type;}  }
class C{  private boolean isEqual(ActivitiEntityEvent event1,ActivitiEvent activitiEvent){  if (activitiEvent instanceof ActivitiEntityEvent && event1.getType().equals(activitiEvent.getType())) {    ActivitiEntityEvent activitiEntityEvent=(ActivitiEntityEvent)activitiEvent;    if (activitiEntityEvent.getEntity().getClass().equals(event1.getEntity().getClass())) {      return true;    }  }  return false;}  }
class C{  protected void initializeSchedulerProperties(Properties properties){  if (this.schedulerProperties != null) {    throw new IllegalStateException("Can't overwrite scheduler properties when they are already set. Set the properties before adding Jobs, and do not change them afterwards.");  }  this.schedulerProperties=properties;}  }
class C{  private void checkState(){  if (isCancelled())   throw new CancellationException("task was cancelled");}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_PetOrderUnSummon_A_TO_ME(String skillname,String skillcaster){  return new SM_SYSTEM_MESSAGE(1201205,skillname,skillcaster);}  }
class C{  public static int convertToDIP(int pixels){  return Math.round(TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,pixels,Resources.getSystem().getDisplayMetrics()));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_PARTY_ALLIANCE_CAN_NOT_INVITE_HIM_HE_IS_NOT_PARTY_LEADER(String value0){  return new SM_SYSTEM_MESSAGE(1300194,value0);}  }
class C{  public static void writeLines(Collection<?> lines,String lineEnding,OutputStream output,String encoding) throws IOException {  writeLines(lines,lineEnding,output,Charsets.toCharset(encoding));}  }
class C{  public WallDeleteCommentQuery deleteComment(UserActor actor,int commentId){  return new WallDeleteCommentQuery(getClient(),actor,commentId);}  }
class C{  public Matrix uminus(){  Matrix X=new Matrix(m,n);  double[][] C=X.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      C[i][j]=-A[i][j];    }  }  return X;}  }
class C{  public boolean isInUse(){  return getKmTarget() > api.getPlayerProfile().getStats().getKmWalked();}  }
class C{  public static double mouseY(){synchronized (mouseLock) {    return mouseY;  }}  }
class C{  private void resetList(){  getPreferenceScreen().removeAll();  addPreferencesFromResource(R.xml.website_preferences);  configureGlobalToggles();  if ((mCategory.showJavaScriptSites() && !PrefServiceBridge.getInstance().javaScriptEnabled())) {    getPreferenceScreen().addPreference(new AddExceptionPreference(getActivity(),ADD_EXCEPTION_KEY,getAddExceptionDialogMessage(),this));  }}  }
class C{  public synchronized void returnBuf(byte[] buf){  if (buf == null || buf.length > mSizeLimit) {    return;  }  mBuffersByLastUse.add(buf);  int pos=Collections.binarySearch(mBuffersBySize,buf,BUF_COMPARATOR);  if (pos < 0) {    pos=-pos - 1;  }  mBuffersBySize.add(pos,buf);  mCurrentSize+=buf.length;  trim();}  }
class C{  public void putImplementationDataTagChanger(final long equipmentId,final IDataTagChanger dataTagChanger){  if (dataTagChanger == null)   dataTagChangers.remove(equipmentId); else   dataTagChangers.put(equipmentId,dataTagChanger);}  }
class C{  @Nullable public static <T extends Facet>T findFacet(@NotNull Module module,@NotNull IdeModifiableModelsProvider modelsProvider,@NotNull FacetTypeId<T> typeId){  T facet=FacetManager.getInstance(module).getFacetByType(typeId);  if (facet == null) {    ModifiableFacetModel facetModel=modelsProvider.getModifiableFacetModel(module);    facet=facetModel.getFacetByType(typeId);  }  return facet;}  }
class C{  public SampleSet(ByteBuffer bb) throws IOException {  int numSamples;  sampleInfo=new SampleInfo(bb);  numSamples=bb.getInt();  this.samples=new Sample[numSamples];  for (int i=0; i < numSamples; i++) {    samples[i]=Sample.loadBinary(bb);  }}  }
class C{  private boolean directoryIsValid(File directory){  if (directory.exists()) {    if (!directory.canWrite()) {      log.info("Directory " + directory.getAbsolutePath() + " is not writeable");      return false;    }  } else {    try {      if (!directory.mkdirs()) {        log.info("Directory " + directory.getAbsolutePath() + " cannot be created");        return false;      }    } catch (    SecurityException ex) {      log.info("Directory " + directory.getAbsolutePath() + " cannot be accessed");      return false;    }  }  return true;}  }
class C{  public static String decodeFilename(Map<String,String> map){  if (map != null) {    return map.get(DataSourceConnectorInterface.FILE_MAP_KEY);  }  return null;}  }
class C{  public FriendsGetAvailableForCallQuery(VkApiClient client,UserActor actor){  super(client,"friends.getAvailableForCall",GetAvailableForCallResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FIELDABYSS_PVP_OFF(String value0){  return new SM_SYSTEM_MESSAGE(1400293,value0);}  }
class C{  protected List<Target> overridableCreateTargetsWithPauses(List<Element> segmentsAndBoundaries,String pauseSymbol){  return TargetFeatureLister.createTargetsWithPauses(segmentsAndBoundaries,pauseSymbol);}  }
class C{  @Override public void comment(XMLString text,Augmentations augs) throws XNIException {}  }
class C{  public int kind(){  String s=soot.PhaseOptions.getString(options,"kind");  if (s.equalsIgnoreCase("optimistic"))   return kind_optimistic;  if (s.equalsIgnoreCase("pessimistic"))   return kind_pessimistic;  throw new RuntimeException("Invalid value " + s + " of phase option kind");}  }
class C{  @Override public boolean scanDTDExternalSubset(boolean complete) throws IOException, XNIException {  fEntityManager.setEntityHandler(this);  if (fScannerState == SCANNER_STATE_TEXT_DECL) {    fSeenExternalDTD=true;    boolean textDecl=scanTextDecl();    if (fScannerState == SCANNER_STATE_END_OF_INPUT) {      return false;    } else {      setScannerState(SCANNER_STATE_MARKUP_DECL);      if (textDecl && !complete) {        return true;      }    }  }  do {    if (!scanDecls(complete)) {      return false;    }  } while (complete);  return true;}  }
class C{  void commit(){  queryExecutor.submit(null);}  }
class C{  public void print(List<BOMNode> arr){  print(arr,0,false);}  }
class C{  private Pair<Long,Long> buildExecutionTimesFromXml(XmlPullParser parser) throws NumberFormatException {  final long nowWallclock=System.currentTimeMillis();  final long nowElapsed=SystemClock.elapsedRealtime();  long earliestRunTimeElapsed=JobStatus.NO_EARLIEST_RUNTIME;  long latestRunTimeElapsed=JobStatus.NO_LATEST_RUNTIME;  String val=parser.getAttributeValue(null,"deadline");  if (val != null) {    long latestRuntimeWallclock=Long.valueOf(val);    long maxDelayElapsed=Math.max(latestRuntimeWallclock - nowWallclock,0);    latestRunTimeElapsed=nowElapsed + maxDelayElapsed;  }  val=parser.getAttributeValue(null,"delay");  if (val != null) {    long earliestRuntimeWallclock=Long.valueOf(val);    long minDelayElapsed=Math.max(earliestRuntimeWallclock - nowWallclock,0);    earliestRunTimeElapsed=nowElapsed + minDelayElapsed;  }  return Pair.create(earliestRunTimeElapsed,latestRunTimeElapsed);}  }
class C{  public void save(EpoxyViewHolder holder){  if (!holder.getModel().shouldSaveViewState()) {    return;  }  ViewState state=get(holder.getItemId());  if (state == null) {    state=new ViewState();  }  state.save(holder.itemView);  put(holder.getItemId(),state);}  }
class C{  public boolean hasNonEmptyIntersection(PointsToSet other){  return false;}  }
class C{  public SM_ACCOUNT_RECONNECT_KEY(int accountId){  super(0x02);  this.accountId=accountId;}  }
class C{  public static void addSetMethod(ClassName builderParentClassName,TypeSpec.Builder builder,ClassName type){  String fullName=getSourceCodeName(type);  String simpleName=type.simpleName();  String methodName=Character.toLowerCase(simpleName.charAt(0)) + simpleName.substring(1);  builder.addField(type,fullName,Modifier.PRIVATE);  String argName="arg";  MethodSpec.Builder methodBuilder=MethodSpec.methodBuilder(methodName).addModifiers(Modifier.PUBLIC).addParameter(type,argName).returns(ClassName.get(builderParentClassName.packageName(),builderParentClassName.simpleName(),"Builder")).addCode("this.$N = $N;",fullName,argName).addCode("return this;");  builder.addMethod(methodBuilder.build());}  }
class C{  public ReliableLog(String dirPath,LogHandler handler) throws IOException {  dir=new File(dirPath);  if (!(dir.exists() ? dir.isDirectory() : dir.mkdirs())) {    throw new LogException("could not create directory for log: " + dirPath);  }  this.handler=handler;  try {    DataInputStream in=new DataInputStream(new FileInputStream(fName(versionFile)));    try {      version=in.readInt();    }  finally {      in.close();    }  } catch (  IOException ex) {    writeVersionFile();  }  if (version < 0) {    throw new LogException("corrupted version file");  }}  }
class C{  @Override public void propagate(GeomPointsTo ptAnalyzer,IWorklist worklist){  int i, j;  AllocNode obj;  SegmentNode pts, pe, int_entry1[], int_entry2[];  PtInsIntervalManager pim1, pim2;  PtInsNode qn, objn;  boolean added, has_new_edges;  if (complex_cons != null) {    for (    Map.Entry<AllocNode,PtInsIntervalManager> entry : new_pts.entrySet()) {      obj=entry.getKey();      int_entry1=entry.getValue().getFigures();      for (      PlainConstraint pcons : complex_cons) {        objn=(PtInsNode)ptAnalyzer.findAndInsertInstanceField(obj,pcons.f);        if (objn == null) {          pt_objs.put(obj,(PtInsIntervalManager)deadManager);          entry.setValue((PtInsIntervalManager)deadManager);          break;        }        if (objn.willUpdate == false) {          continue;        }        qn=(PtInsNode)pcons.otherSide;        for (i=0; i < HeapInsIntervalManager.Divisions; ++i) {          pts=int_entry1[i];          while (pts != null && pts.is_new) {switch (pcons.type) {case Constants.STORE_CONS:              if (qn.add_simple_constraint_3(objn,pcons.code == GeometricManager.ONE_TO_ONE ? pts.I1 : 0,pts.I2,pts.L))               worklist.push(qn);            break;case Constants.LOAD_CONS:          if (objn.add_simple_constraint_3(qn,pts.I2,pcons.code == GeometricManager.ONE_TO_ONE ? pts.I1 : 0,pts.L))           worklist.push(objn);        break;    }    pts=pts.next;  }}}}}for (Map.Entry<PtInsNode,PtInsIntervalManager> entry1 : flowto.entrySet()) {added=false;qn=entry1.getKey();pim1=entry1.getValue();int_entry1=pim1.getFigures();has_new_edges=pim1.isThereUnprocessedFigures();Map<AllocNode,PtInsIntervalManager> objs=(has_new_edges ? pt_objs : new_pts);for (Map.Entry<AllocNode,PtInsIntervalManager> entry2 : objs.entrySet()) {obj=entry2.getKey();pim2=entry2.getValue();if (pim2 == deadManager) continue;if (!ptAnalyzer.castNeverFails(obj.getType(),qn.getWrappedNode().getType())) continue;int_entry2=pim2.getFigures();for (i=0; i < PtInsIntervalManager.Divisions; ++i) {pts=int_entry2[i];while (pts != null) {  if (!has_new_edges && !pts.is_new)   break;  for (j=0; j < PtInsIntervalManager.Divisions; ++j) {    pe=int_entry1[j];    while (pe != null) {      if (pts.is_new || pe.is_new) {        if (add_new_points_to_tuple(pts,pe,obj,qn))         added=true;      } else       break;      pe=pe.next;    }  }  pts=pts.next;}}}if (added) worklist.push(qn);if (has_new_edges) {pim1.flush();}}}  }
class C{  public static void closeSilently(Closeable c){  if (c == null) {    return;  }  try {    c.close();  } catch (  Throwable t) {    LogUtils.warn(t);  }}  }
class C{  public double observationCount(boolean bOnlyValue){  if (bOnlyValue)   return hDistro.keySet().size(); else {    int iCnt=0;    Iterator iKeyIter=hDistro.keySet().iterator();    while (iKeyIter.hasNext()) {      Object oNextKey=iKeyIter.next();      iCnt+=((Double)hDistro.get(oNextKey));    }    return iCnt;  }}  }
class C{  private void manyToAnyConditions(String className,Field field,int action) throws ClassNotFoundException {  if (isCollection(field.getType())) {    String genericTypeName=getGenericTypeName(field);    if (LitePalAttr.getInstance().getClassNames().contains(genericTypeName)) {      Class<?> reverseDynamicClass=Class.forName(genericTypeName);      Field[] reverseFields=reverseDynamicClass.getDeclaredFields();      boolean reverseAssociations=false;      for (int i=0; i < reverseFields.length; i++) {        Field reverseField=reverseFields[i];        if (!Modifier.isStatic(reverseField.getModifiers())) {          Class<?> reverseFieldTypeClass=reverseField.getType();          if (className.equals(reverseFieldTypeClass.getName())) {            if (action == GET_ASSOCIATIONS_ACTION) {              addIntoAssociationModelCollection(className,genericTypeName,genericTypeName,Const.Model.MANY_TO_ONE);            } else             if (action == GET_ASSOCIATION_INFO_ACTION) {              addIntoAssociationInfoCollection(className,genericTypeName,genericTypeName,field,reverseField,Const.Model.MANY_TO_ONE);            }            reverseAssociations=true;          } else           if (isCollection(reverseFieldTypeClass)) {            String reverseGenericTypeName=getGenericTypeName(reverseField);            if (className.equals(reverseGenericTypeName)) {              if (action == GET_ASSOCIATIONS_ACTION) {                addIntoAssociationModelCollection(className,genericTypeName,null,Const.Model.MANY_TO_MANY);              } else               if (action == GET_ASSOCIATION_INFO_ACTION) {                addIntoAssociationInfoCollection(className,genericTypeName,null,field,reverseField,Const.Model.MANY_TO_MANY);              }              reverseAssociations=true;            }          }        }      }      if (!reverseAssociations) {        if (action == GET_ASSOCIATIONS_ACTION) {          addIntoAssociationModelCollection(className,genericTypeName,genericTypeName,Const.Model.MANY_TO_ONE);        } else         if (action == GET_ASSOCIATION_INFO_ACTION) {          addIntoAssociationInfoCollection(className,genericTypeName,genericTypeName,field,null,Const.Model.MANY_TO_ONE);        }      }    }  }}  }
class C{  public void rootN(final double[] operand,final int operandOffset,final int n,final double[] result,final int resultOffset){  double[] function=new double[1 + order];  double xk;  if (n == 2) {    function[0]=FastMath.sqrt(operand[operandOffset]);    xk=0.5 / function[0];  } else   if (n == 3) {    function[0]=FastMath.cbrt(operand[operandOffset]);    xk=1.0 / (3.0 * function[0] * function[0]);  } else {    function[0]=FastMath.pow(operand[operandOffset],1.0 / n);    xk=1.0 / (n * FastMath.pow(function[0],n - 1));  }  final double nReciprocal=1.0 / n;  final double xReciprocal=1.0 / operand[operandOffset];  for (int i=1; i <= order; ++i) {    function[i]=xk;    xk*=xReciprocal * (nReciprocal - i);  }  compose(operand,operandOffset,function,result,resultOffset);}  }
class C{  public static TransferDevice createTransferDevice(Device device,String className){  TransferDeviceImpl transferDevice=new TransferDeviceImpl(device.getId(),device.getName(),device.getDeviceClassId(),className);  transferDevice.addDeviceProperties(device.getDeviceProperties());  transferDevice.addDeviceCommands(device.getDeviceCommands());  return transferDevice;}  }
class C{  public void onLoadApplyEquipmentStats(){  Item twoHanded=null;  for (  Item item : equipment.values()) {    if ((item.getEquipmentSlot() & ItemSlot.MAIN_OFF_HAND.getSlotIdMask()) == 0 && (item.getEquipmentSlot() & ItemSlot.SUB_OFF_HAND.getSlotIdMask()) == 0) {      if (item.getItemTemplate().isTwoHandWeapon()) {        if (twoHanded != null) {          continue;        }        twoHanded=item;      }      if (item.getOptionalSocket() == -1) {        log.warn("on load all eqipment, item can't be equiped because hasTune" + item.getObjectId());        continue;      }      ItemEquipmentListener.onItemEquipment(item,owner);      owner.getLifeStats().synchronizeWithMaxStats();    }  }}  }
class C{  public static PublicKey generatePublicKey(String encodedPublicKey){  try {    byte[] decodedKey=Base64.decode(encodedPublicKey,Base64.DEFAULT);    KeyFactory keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);    return keyFactory.generatePublic(new X509EncodedKeySpec(decodedKey));  } catch (  NoSuchAlgorithmException e) {    throw new RuntimeException(e);  }catch (  InvalidKeySpecException e) {    Log.e(TAG,"Invalid key specification.");    throw new IllegalArgumentException(e);  }}  }
class C{  public static Builder newBuilder(){  return new DataQueryParams.Builder();}  }
class C{  @RequestMapping(value="/pet-categories",method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<PetCategory> createPetCategory(@RequestBody PetCategory petCategory) throws URISyntaxException {  log.debug("REST request to save PetCategory : {}",petCategory);  if (petCategory.getPetCategoryId() != null) {    return ResponseEntity.badRequest().headers(HeaderUtil.createFailureAlert("petCategory","idexists","A new petCategory cannot already have an ID")).body(null);  }  PetCategory result=petCategoryService.save(petCategory);  return ResponseEntity.created(new URI("/api/pet-categories/" + result.getPetCategoryId())).headers(HeaderUtil.createEntityCreationAlert("petCategory",result.getPetCategoryId().toString())).body(result);}  }
class C{  public LatestComputation(UnitGraph unitGraph,DelayabilityAnalysis delayed,Map<Unit,EquivalentValue> equivRhsMap){  this(unitGraph,delayed,equivRhsMap,new ArrayPackedSet<EquivalentValue>(new CollectionFlowUniverse<EquivalentValue>(equivRhsMap.values())));}  }
class C{  public boolean leftAllowed(){  return (myFlags & LEFT_EDGE) != 0;}  }
class C{  public static int scale(String source,String file,int w,int h){  try {    BufferedImage img=ImageIO.read(new File(source));    if (img == null)     return -1;    BufferedImage out=new BufferedImage(w,h,BufferedImage.TYPE_4BYTE_ABGR);    Graphics g=out.getGraphics();    int h1=img.getHeight();    int w1=img.getWidth();    if (h <= 0)     h=h1;    if (w <= 0)     w=w1;    float fh=((float)h1) / h;    float fw=((float)w1) / w;    int oh=0;    int ow=0;    if (fh > fw) {      int w2=(int)(w1 / fh);      ow=(w - w2) / 2;      w=w2;    } else {      int h2=(int)(h1 / fw);      oh=(h - h2) / 2;      h=h2;    }    Image tmp=img.getScaledInstance(w,h,Image.SCALE_SMOOTH);    g.drawImage(tmp,ow,oh,w,h,null);    ImageIO.write(out,"png",new File(file));    return 1;  } catch (  Exception e) {    log.error(source,e);  }  return -1;}  }
class C{  public BafBody newBody(Body b){  return new BafBody(b,Collections.<String,String>emptyMap());}  }
class C{  public InputStream newInputStream(int index) throws IOException {synchronized (DiskLruCache.this) {    if (entry.currentEditor != this) {      throw new IllegalStateException();    }    if (!entry.readable) {      return null;    }    return new FileInputStream(entry.getCleanFile(index));  }}  }
class C{  public UnknownLeaseException(String reason){  super(reason);}  }
class C{  @Override public Change updateConfig(T abstractEquipment,Properties properties) throws IllegalAccessException {  Change change=super.updateConfig(abstractEquipment,properties);  return change;}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return APPKEY;case 2:  return SEND_TIME;case 3:return LOAD_INFO;case 4:return STATUS;default :return null;}}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_SPLIT_ME_TO_B(int num0,int num1,int num2){  return new SM_SYSTEM_MESSAGE(1390247,num0,num1,num2);}  }
class C{  private static boolean sonyBadgeContentProviderExists(Context context){  boolean exists=false;  ProviderInfo info=context.getPackageManager().resolveContentProvider(SONY_HOME_PROVIDER_NAME,0);  if (info != null) {    exists=true;  }  return exists;}  }
class C{  public void drawIntoImage(BufferedImage image){  Graphics2D gFinal=(Graphics2D)image.getGraphics();  int width=image.getWidth();  int height=image.getHeight();  gFinal.setColor(new Color(255,255,255,0));  gFinal.fillRect(0,0,width,height);  float rootAlpha=mRootAlpha;  if (rootAlpha < 1.0) {    BufferedImage alphaImage=AssetUtil.newArgbBufferedImage(width,height);    Graphics2D gTemp=(Graphics2D)alphaImage.getGraphics();    drawInternal(gTemp,width,height);    gFinal.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,rootAlpha));    gFinal.drawImage(alphaImage,0,0,null);    gTemp.dispose();  } else {    drawInternal(gFinal,width,height);  }  gFinal.dispose();}  }
class C{  @Override public boolean hasNext(){  return hasNext;}  }
class C{  public InvalidPluginException(final Throwable cause){  super(cause);}  }
class C{  MarshalledInstanceInputStream(InputStream objIn,InputStream locIn,ClassLoader defaultLoader,boolean verifyCodebaseIntegrity,ClassLoader verifierLoader,Collection context) throws IOException {  super(objIn,defaultLoader,verifyCodebaseIntegrity,verifierLoader,context);  this.locIn=(locIn == null ? null : new ObjectInputStream(locIn));}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  @Override public void onConnected(SubscriberKit subscriberKit){}  }
class C{  public static void addTrafficListener(AirMapTrafficListener callback){  getAirMapTrafficService().addListener(callback);}  }
class C{  @Override public long addLoginHistory(LoginHistory loginHistory){  return sessionTemplate.insert(NAMESPACE + ".addLoginHistory",loginHistory);}  }
class C{  @Override public long limit(){  return fileLength >>> 3;}  }
class C{  public Vector(double x,double y,double z){  this.x=x;  this.y=y;  this.z=z;}  }
class C{  public JSONArray put(int value){  put(new Integer(value));  return this;}  }
class C{  public static int calculateSoloDPReward(Player player,Creature target){  int playerLevel=player.getCommonData().getLevel();  int targetLevel=target.getLevel();  NpcRating npcRating=((Npc)target).getObjectTemplate().getRating();  int baseDP=targetLevel * calculateRatingMultipler(npcRating);  int xpPercentage=XPRewardEnum.xpRewardFrom(targetLevel - playerLevel);  float rate=player.getRates().getDpNpcRate();  return (int)Math.floor(baseDP * xpPercentage * rate / 100);}  }
class C{  public static void encodeFileToFile(String infile,String outfile) throws java.io.IOException {  String encoded=Base64.encodeFromFile(infile);  java.io.OutputStream out=null;  try {    out=new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));    out.write(encoded.getBytes("US-ASCII"));  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      out.close();    } catch (    Exception ex) {    }  }}  }
class C{  public static List<? extends Element> childElementList(Element element){  if (element == null)   return null;  List<Element> elements=new LinkedList<Element>();  Node node=element.getFirstChild();  if (node != null) {    do {      if (node.getNodeType() == Node.ELEMENT_NODE) {        Element childElement=(Element)node;        elements.add(childElement);      }    } while ((node=node.getNextSibling()) != null);  }  return elements;}  }
class C{  private float calculateSpeed(long startTime,long endTime){  float usedTime=((float)(endTime - startTime)) / 1000;  float speed=0;  if (usedTime > 0) {    int mSize=this.downloadSize - this.lastDownloadSize;    speed=((float)mSize / usedTime) / KB_CONSTANT;    speed=((float)((int)(speed * 10))) / 10;  }  return speed;}  }
class C{  @Deployment(resources={"org/activiti/engine/test/api/event/ProcessInstanceEventsTest.parallelGatewayTwoEndsProcess.bpmn20.xml"}) public void testProcessCompleted_ParallelGatewayTwoEnds() throws Exception {  this.runtimeService.startProcessInstanceByKey("noEndProcess");  List<ActivitiEvent> events=listener.filterEvents(ActivitiEventType.PROCESS_COMPLETED);  assertEquals("ActivitiEventType.PROCESS_COMPLETED was expected 1 time.",1,events.size());}  }
class C{  @Override protected FlowSet<N> entryInitialFlow(){  FlowSet<N> initSet=(FlowSet<N>)emptySet.clone();  for (  N h : graph.getHeads()) {    initSet.add(h);  }  return initSet;}  }
class C{  public static String s8(long v){  char[] result=new char[17];  if (v < 0) {    result[0]='-';    v=-v;  } else {    result[0]='+';  }  for (int i=0; i < 16; i++) {    result[16 - i]=Character.forDigit((int)v & 0x0f,16);    v>>=4;  }  return new String(result);}  }
class C{  private void removeDuplicates(){  for (int i=0; i < peerList.size(); i++) {    Peer p1=peerList.get(i);    for (int j=0; j < peerList.size(); j++) {      Peer p2=peerList.get(j);      if (j != i && p1.getPeerId() != null && p1.getPeerId().equals(p2.getPeerId())) {        peerList.remove(p2);      }    }  }}  }
class C{  public void runTest(String folder,String testConfig){  String fullPath="/" + folder + "/test/"+ testConfig;  SldEditorTest testSuite=(SldEditorTest)ParseXML.parseFile("",fullPath,SCHEMA_RESOURCE,SldEditorTest.class);  Assert.assertNotNull("Failed to read test config file : " + fullPath,testSuite);  String testsldfile=testSuite.getTestsldfile();  if (!testsldfile.startsWith("/")) {    testsldfile="/" + testsldfile;  }  System.out.println("Opening : " + testsldfile);  List<XMLVendorOption> xmlVendorOptionList=testSuite.getVendorOption();  if ((xmlVendorOptionList != null) && !xmlVendorOptionList.isEmpty()) {    List<VersionData> versionDataList=new ArrayList<VersionData>();    for (    XMLVendorOption vo : xmlVendorOptionList) {      try {        String vendorOptionClassName=vo.getClassType().trim();        Class<?> vendorOptionClass=Class.forName(vendorOptionClassName);        VersionData versionData=VersionData.decode(vendorOptionClass,vo.getVersion());        versionDataList.add(versionData);      } catch (      ClassNotFoundException e) {        e.printStackTrace();      }    }    if (!versionDataList.contains(VendorOptionManager.getInstance().getDefaultVendorOptionVersionData())) {      versionDataList.add(VendorOptionManager.getInstance().getDefaultVendorOptionVersionData());    }    sldEditor.setVendorOptions(versionDataList);  }  InputStream inputStream=SLDTestRunner.class.getResourceAsStream(testsldfile);  if (inputStream == null) {    Assert.assertNotNull("Failed to find sld test file : " + testsldfile,inputStream);  } else {    File f=null;    try {      f=stream2file(inputStream);      int noOfRetries=3;      int attempt=0;      while (attempt < noOfRetries) {        try {          sldEditor.openFile(f.toURI().toURL());          break;        } catch (        NullPointerException nullException) {          StackTraceElement[] stackTraceElements=nullException.getStackTrace();          System.out.println(stackTraceElements[0].getMethodName());          System.out.println("Attempt : " + attempt + 1);          attempt++;        }      }      f.delete();    } catch (    IOException e1) {      e1.printStackTrace();    }    GraphicPanelFieldManager mgr=sldEditor.getFieldDataManager();    for (    XMLPanelTest test : testSuite.getPanelTests()) {      XMLSetup selectedItem=test.getSetup();      TreeSelectionData selectionData=new TreeSelectionData();      selectionData.setLayerIndex(getXMLValue(selectedItem.getLayer()));      selectionData.setStyleIndex(getXMLValue(selectedItem.getStyle()));      selectionData.setFeatureTypeStyleIndex(getXMLValue(selectedItem.getFeatureTypeStyle()));      selectionData.setRuleIndex(getXMLValue(selectedItem.getRule()));      selectionData.setSymbolizerIndex(getXMLValue(selectedItem.getSymbolizer()));      selectionData.setSymbolizerDetailIndex(getXMLValue(selectedItem.getSymbolizerDetail()));      try {        selectionData.setSelectedPanel(Class.forName(selectedItem.getExpectedPanel()));      } catch (      ClassNotFoundException e1) {        Assert.fail("Unknown class : " + selectedItem.getExpectedPanel());      }      boolean result=sldEditor.selectTreeItem(selectionData);      Assert.assertTrue("Failed to select tree item",result);      PopulateDetailsInterface panel=sldEditor.getSymbolPanel();      String panelClassName=panel.getClass().getName();      Assert.assertEquals(panelClassName,selectedItem.getExpectedPanel());      Assert.assertEquals("Check panel data present",panel.isDataPresent(),selectedItem.isEnabled());      Class<?> panelId=null;      try {        panelId=Class.forName(selectedItem.getExpectedPanel());      } catch (      ClassNotFoundException e) {        e.printStackTrace();      }      if (test.getFieldTests() != null) {        for (        XMLFieldTest testItem : test.getFieldTests()) {          if (testItem != null) {            if (testItem.getDisabledOrLiteralStringOrLiteralInt() != null) {              for (              Object xmlTestValueObj : testItem.getDisabledOrLiteralStringOrLiteralInt()) {                if (xmlTestValueObj instanceof XMLSetMultiOptionGroup) {                  XMLSetMultiOptionGroup testValue=(XMLSetMultiOptionGroup)xmlTestValueObj;                  GroupIdEnum groupId=testValue.getMultiOptionGroupId();                  String outputText="Checking multioption group : " + groupId;                  System.out.println(outputText);                  Assert.assertNotNull(outputText,groupId);                  MultiOptionGroup multiOptionGroup=mgr.getMultiOptionGroup(panelId,groupId);                  Assert.assertNotNull(panelId.getName() + "/" + groupId+ " multi option group should exist",multiOptionGroup);                  multiOptionGroup.setOption(testValue.getOption());                  OptionGroup optionGroupSelected=multiOptionGroup.getSelectedOptionGroup();                  Assert.assertTrue(groupId + " should be set",optionGroupSelected.getId() == testValue.getOption());                } else                 if (xmlTestValueObj instanceof XMLSetGroup) {                  XMLSetGroup testValue=(XMLSetGroup)xmlTestValueObj;                  GroupIdEnum groupId=testValue.getGroupId();                  String outputText="Checking group : " + groupId;                  System.out.println(outputText);                  Assert.assertNotNull(outputText,groupId);                  GroupConfigInterface groupConfig=mgr.getGroup(panelId,groupId);                  Assert.assertNotNull(panelId.getName() + "/" + groupId+ " group should exist",groupConfig);                  groupConfig.enable(testValue.isEnable());                  Assert.assertTrue(groupId + " should be set",groupConfig.isPanelEnabled() == testValue.isEnable());                } else {                  XMLFieldBase testValue=(XMLFieldBase)xmlTestValueObj;                  FieldIdEnum fieldId=testValue.getField();                  String outputText="Checking : " + fieldId;                  System.out.println(outputText);                  Assert.assertNotNull(outputText,fieldId);                  try {                    Thread.sleep(100);                  } catch (                  InterruptedException e) {                    e.printStackTrace();                  }                  FieldConfigBase fieldConfig=mgr.getData(panelId,fieldId);                  Assert.assertNotNull(String.format("Failed to field panel %s field %s",selectedItem.getExpectedPanel(),fieldId),fieldConfig);                  if (testValue instanceof XMLSetFieldLiteralBase) {                    XMLSetFieldLiteralInterface testInterface=(XMLSetFieldLiteralInterface)testValue;                    testInterface.accept(fieldConfig,fieldId);                    if (!((XMLSetFieldLiteralBase)testValue).isIgnoreCheck()) {                      String sldContentString=sldEditor.getSLDString();                      boolean actualResult=testOutput.testValue(sldContentString,selectionData,testValue.getField(),testValue);                      Assert.assertTrue(fieldId + " should be set",actualResult);                    }                  } else                   if (testValue instanceof XMLSetFieldAttribute) {                    XMLSetFieldLiteralInterface testInterface=(XMLSetFieldLiteralInterface)testValue;                    testInterface.accept(fieldConfig,fieldId);                    String sldContentString=sldEditor.getSLDString();                    boolean actualResult=testOutput.testAttribute(sldContentString,selectionData,testValue.getField(),(XMLSetFieldAttribute)testValue);                    Assert.assertTrue(fieldId + " should be set",actualResult);                  } else                   if (testValue instanceof XMLFieldDisabled) {                    Assert.assertFalse(fieldId + " should be disabled",fieldConfig.isEnabled());                  } else {                    Assert.assertTrue(fieldId + " should be enabled",fieldConfig.isEnabled());                    Expression expression=null;                    if (fieldConfig.isValueOnly()) {                      String expectedValue="";                      if (testValue instanceof XMLFieldLiteralBase) {                        Object literalValue=getLiteralValue((XMLFieldLiteralBase)testValue);                        expectedValue=String.valueOf(literalValue);                      } else                       if (testValue instanceof XMLFieldAttribute) {                        expectedValue=((XMLFieldAttribute)testValue).getAttribute();                      } else                       if (testValue instanceof XMLFieldExpression) {                        expectedValue=((XMLFieldExpression)testValue).getExpression();                      } else {                        Assert.fail(fieldId + " has unsupported type " + testValue.getClass().getName());                      }                      String actualValue=fieldConfig.getStringValue();                      String msg=String.format("%s Expected : '%s' Actual : '%s'",outputText,expectedValue,actualValue);                      boolean condition;                      if (comparingFilename(fieldId)) {                        condition=actualValue.endsWith(expectedValue);                      } else {                        condition=(expectedValue.compareTo(actualValue) == 0);                      }                      Assert.assertTrue(msg,condition);                    } else {                      if (colourFieldsList.contains(fieldId)) {                        FieldConfigColour fieldColour=(FieldConfigColour)fieldConfig;                        expression=fieldColour.getColourExpression();                      } else {                        expression=fieldConfig.getExpression();                        if (fieldId == FieldIdEnum.SYMBOL_TYPE) {                          String string=expression.toString();                          expression=ff.literal(string.replace(File.separatorChar,'/'));                        } else                         if (fieldId == FieldIdEnum.FONT_FAMILY) {                          String string=expression.toString();                          if (string.compareToIgnoreCase(DEFAULT_FONT) != 0) {                            expression=ff.literal(getFontForOS());                            System.out.println("Updated font family to test for : " + expression.toString());                          }                        }                      }                      if (expression != null) {                        if (testValue instanceof XMLFieldLiteralBase) {                          Object literalValue=getLiteralValue((XMLFieldLiteralBase)testValue);                          if (literalValue.getClass() == Double.class) {                            checkLiteralValue(outputText,expression,(Double)literalValue);                          } else                           if (literalValue.getClass() == Integer.class) {                            checkLiteralValue(outputText,expression,(Integer)literalValue);                          } else                           if (literalValue.getClass() == String.class) {                            if (fieldId == FieldIdEnum.FONT_FAMILY) {                              checkLiteralValue(outputText,expression,getFontForOS());                            } else {                              checkLiteralValue(outputText,expression,(String)literalValue);                            }                          }                        }                      } else {                        String actualValue;                        String expectedValue=fieldConfig.getStringValue();                        Object literalValue=getLiteralValue((XMLFieldLiteralBase)testValue);                        if (literalValue.getClass() == Double.class) {                          actualValue=String.valueOf((Double)literalValue);                        } else                         if (literalValue.getClass() == Integer.class) {                          actualValue=String.valueOf((Integer)literalValue);                        } else                         if (literalValue.getClass() == String.class) {                          actualValue=(String)literalValue;                        } else {                          actualValue="";                        }                        String msg=String.format("%s Expected : '%s' Actual : '%s'",outputText,expectedValue,actualValue);                        boolean condition=(expectedValue.compareTo(actualValue) == 0);                        Assert.assertTrue(msg,condition);                      }                    }                  }                }              }            }          }        }      }    }  }  JFrame frame=sldEditor.getApplicationFrame();  frame.dispatchEvent(new WindowEvent(frame,WindowEvent.WINDOW_CLOSING));}  }
class C{  public MultiDirectionalSimplex(final int n,double sideLength,final double khi,final double gamma){  super(n,sideLength);  this.khi=khi;  this.gamma=gamma;}  }
class C{  public static List<ParsingContext> decode(DependencyGraph graph,FeatureFrame featureFrame){  List<ParsingContext> data=new ArrayList<ParsingContext>();  Stack<Integer> stack=new Stack<Integer>();  Queue<Integer> queue=new LinkedList<Integer>();  for (int i=0; i < graph.getSentence().length(); i++)   queue.add(i);  List<Dependency> currentArcs=new ArrayList<Dependency>();  FeatureExtractor featureBuilder=new FeatureExtractor(featureFrame);  Configuration config=new Configuration(graph.getSentence(),stack,queue);  config=config.next("SH");  while (!config.isFinal()) {    List<String> features=featureBuilder.extract(config);    StringBuilder text=new StringBuilder();    for (    String f : features) {      text.append(f);      text.append(' ');    }    Integer u=stack.peek();    Integer v=queue.peek();    String transition="";    if (graph.hasArc(v,u)) {      transition="LA-" + graph.getLabels()[u];      currentArcs.add(new Dependency(v,u,transition));    } else     if (graph.hasArc(u,v)) {      transition="RA-" + graph.getLabels()[v];      currentArcs.add(new Dependency(u,v,transition));    } else     if (config.isReducible()) {      transition="RE";    } else {      transition="SH";    }    ParsingContext pc=new ParsingContext();    pc.setId(id);    pc.setText(text.toString().trim());    pc.setTransition(transition);    data.add(pc);    id++;    config=config.next(transition);  }  return data;}  }
class C{  private void checkModified(@NotNull String fqcn){  if (DumbService.getInstance(myModule.getProject()).isDumb()) {    return;  }  if (myModuleClassLoader != null && myModuleClassLoader.isSourceModified(fqcn,myCredential) && !myRecentlyModifiedClasses.contains(fqcn)) {    myRecentlyModifiedClasses.add(fqcn);    RenderProblem.Html problem=RenderProblem.create(WARNING);    HtmlBuilder builder=problem.getHtmlBuilder();    String className=fqcn.substring(fqcn.lastIndexOf('.') + 1);    builder.addLink("The " + className + " custom view has been edited more recently than the last build: ","Build"," the project.",myLogger.getLinkManager().createCompileModuleUrl());    myLogger.addMessage(problem);  }}  }
class C{  private void recordMiniFabClick(){  if (!miniFabClicked) {    final SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(getActivity());    sp.edit().putLong(KEY_FAB_EVER_CLICKED,1).apply();    miniFabClicked=true;  }}  }
class C{  @Override public boolean hasStroke(Symbolizer symbolizer){  return true;}  }
class C{  @Override public void audit(String msg){  String hostName="";  try {    hostName=InetAddress.getLocalHost().getHostName();  } catch (  UnknownHostException e) {    hostName="localhost";  }  String username="unknown";  String threadid="unknown";  try {    threadid=Thread.currentThread().getId() + "";    username=UserGroupInformation.getCurrentUser().getShortUserName();  } catch (  IOException e) {    username="unknown";  }  logger.log(AuditLevel.AUDIT,"[" + hostName + "]"+ "["+ username+ "]"+ "[Thread-"+ threadid+ "]"+ msg);}  }
class C{  public void addMethod(short acc,String name,String sig,CodeAttr code,ExceptAttr ex){  Method x=new Method(acc,new AsciiCP(name),new AsciiCP(sig),code,ex);  x.resolve(this);  methods.addElement(x);}  }
class C{  public double[] toSplitDouble(){  double split[]=new double[2];  long mask=0xffffffffc0000000L;  split[0]=Double.longBitsToDouble(Double.doubleToLongBits(toDouble()) & mask);  split[1]=subtract(newInstance(split[0])).toDouble();  return split;}  }
class C{  SVG(Picture picture,RectF bounds){  this.picture=picture;  this.bounds=bounds;}  }
class C{  public static String u1(int v){  char[] result=new char[2];  for (int i=0; i < 2; i++) {    result[1 - i]=Character.forDigit(v & 0x0f,16);    v>>=4;  }  return new String(result);}  }
class C{  private void applyForceAction(){  TreePath path=this.tree.getSelectionPath();  if (path != null) {    DefaultMutableTreeNode node=(DefaultMutableTreeNode)path.getLastPathComponent();    if (node.getUserObject() instanceof SandboxBody) {      SandboxBody body=(SandboxBody)node.getUserObject();      Vector2 f=ApplyForceDialog.show(ControlUtilities.getParentWindow(this));      if (f != null) {synchronized (Simulation.LOCK) {          body.applyForce(f);        }      }    }  }}  }
class C{  @Override public void handle(){  spec.handler.accept(new PacketContext(),this);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ProcATK_Instant_Ratio_A_TO_ME(String skillcaster,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200697,skillcaster,num0,skillname);}  }
class C{  public boolean isStatusBarTintEnabled(){  return mStatusBarTintEnabled;}  }
class C{  public String provideUid(){  return "uid";}  }
class C{  @Override public String toString(){  return "View []";}  }
class C{  public void expand(NodeBase v){  if (v != null) {    for (Enumeration descendants=v.breadthFirstEnumeration(); descendants.hasMoreElements(); ) {      v=(NodeBase)descendants.nextElement();      dataTree.expandPath(new TreePath(v.getPath()));    }  }}  }
class C{  public int[] readAllInts(){  String[] fields=readAllStrings();  int[] vals=new int[fields.length];  for (int i=0; i < fields.length; i++)   vals[i]=Integer.parseInt(fields[i]);  return vals;}  }
class C{  public static byte[] decode(String encoded){  if (encoded == null) {    return null;  }  char[] base64Data=encoded.toCharArray();  int len=removeWhiteSpace(base64Data);  if (len % FOURBYTE != 0) {    return null;  }  int numberQuadruple=(len / FOURBYTE);  if (numberQuadruple == 0) {    return new byte[0];  }  byte decodedData[]=null;  byte b1=0, b2=0, b3=0, b4=0;  char d1=0, d2=0, d3=0, d4=0;  int i=0;  int encodedIndex=0;  int dataIndex=0;  decodedData=new byte[(numberQuadruple) * 3];  for (; i < numberQuadruple - 1; i++) {    if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++])) || !isData((d3=base64Data[dataIndex++]))|| !isData((d4=base64Data[dataIndex++]))) {      return null;    }    b1=base64Alphabet[d1];    b2=base64Alphabet[d2];    b3=base64Alphabet[d3];    b4=base64Alphabet[d4];    decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);    decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));    decodedData[encodedIndex++]=(byte)(b3 << 6 | b4);  }  if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++]))) {    return null;  }  b1=base64Alphabet[d1];  b2=base64Alphabet[d2];  d3=base64Data[dataIndex++];  d4=base64Data[dataIndex++];  if (!isData((d3)) || !isData((d4))) {    if (isPad(d3) && isPad(d4)) {      if ((b2 & 0xf) != 0) {        return null;      }      byte[] tmp=new byte[i * 3 + 1];      System.arraycopy(decodedData,0,tmp,0,i * 3);      tmp[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);      return tmp;    } else     if (!isPad(d3) && isPad(d4)) {      b3=base64Alphabet[d3];      if ((b3 & 0x3) != 0) {        return null;      }      byte[] tmp=new byte[i * 3 + 2];      System.arraycopy(decodedData,0,tmp,0,i * 3);      tmp[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);      tmp[encodedIndex]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));      return tmp;    } else {      return null;    }  } else {    b3=base64Alphabet[d3];    b4=base64Alphabet[d4];    decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);    decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));    decodedData[encodedIndex++]=(byte)(b3 << 6 | b4);  }  return decodedData;}  }
class C{  public static Color interpolateHSB(Color start,Color end,float p){  float[] startHSB=Color.RGBtoHSB(start.getRed(),start.getGreen(),start.getBlue(),null);  float[] endHSB=Color.RGBtoHSB(end.getRed(),end.getGreen(),end.getBlue(),null);  float brightness=(startHSB[2] + endHSB[2]) / 2;  float saturation=(startHSB[1] + endHSB[1]) / 2;  float hueMax;  float hueMin;  if (startHSB[0] > endHSB[0]) {    hueMax=startHSB[0];    hueMin=endHSB[0];  } else {    hueMin=startHSB[0];    hueMax=endHSB[0];  }  float hue=((hueMax - hueMin) * p) + hueMin;  return Color.getHSBColor(hue,saturation,brightness);}  }
class C{  public void registerSaveParticipant() throws CoreException {  IWorkspace ws=ResourcesPlugin.getWorkspace();  ISavedState ss=ws.addSaveParticipant(SVNProviderPlugin.getPlugin(),this);  if (ss != null) {    ss.processResourceChangeEvents(this);  }  ws.removeSaveParticipant(SVNProviderPlugin.getPlugin());}  }
class C{  private static void notifyDrawable(Drawable drawable,final boolean isDisplayed){  if (drawable instanceof RecyclingBitmapDrawable) {    ((RecyclingBitmapDrawable)drawable).setIsDisplayed(isDisplayed);  } else   if (drawable instanceof LayerDrawable) {    LayerDrawable layerDrawable=(LayerDrawable)drawable;    for (int i=0, z=layerDrawable.getNumberOfLayers(); i < z; i++) {      notifyDrawable(layerDrawable.getDrawable(i),isDisplayed);    }  }}  }
class C{  private void addToken(TokenKind kind,int left,int right){  addToken(kind,left,right,null);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_OutofSight_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200302,skillname);}  }
class C{  public Builder conditionalReplaceValueTransform(String column,Writable newValue,Condition condition){  return transform(new ConditionalReplaceValueTransform(column,newValue,condition));}  }
class C{  public void start(){  start(false,Thread.NORM_PRIORITY);}  }
class C{  private void updateSalesOrderHeader(String reportPath,List<SalesOrderItem> soiList,EntityManager em){  if (soiList != null && !soiList.isEmpty()) {    EntityTransaction transaction=em.getTransaction();    try {      transaction.begin();      for (      SalesOrderItem orderItem : soiList) {        orderItem.getSalesOrderHeader().setInvoiceLink(reportPath);        em.merge(orderItem);      }      transaction.commit();    }  finally {    }  }}  }
class C{  public CM_CHARACTER_EDIT(int opcode,State state,State... restStates){  super(opcode,state,restStates);}  }
class C{  public AdsGetAdsLayoutQuery(VkApiClient client,UserActor actor,int accountId){  super(client,"ads.getAdsLayout",Utils.buildParametrizedType(List.class,AdLayout.class));  accessToken(actor.getAccessToken());  accountId(accountId);}  }
class C{  @RequestMapping(value="/race-normals",method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<RaceNormal> createRaceNormal(@RequestBody RaceNormal raceNormal) throws URISyntaxException {  log.debug("REST request to save RaceNormal : {}",raceNormal);  if (raceNormal.getRaceNormalId() != null) {    return ResponseEntity.badRequest().headers(HeaderUtil.createFailureAlert("raceNormal","idexists","A new raceNormal cannot already have an ID")).body(null);  }  RaceNormal result=raceNormalRepository.save(raceNormal);  return ResponseEntity.created(new URI("/api/race-normals/" + result.getRaceId())).headers(HeaderUtil.createEntityCreationAlert("raceNormal",result.getRaceId().toString())).body(result);}  }
class C{  private void initBroadcastReciever(){  IntentFilter intentFilter=new IntentFilter();  intentFilter.addAction(ACTION_STOP_SELF);  registerReceiver(mBroadcastReciever,intentFilter);}  }
class C{  public double[] nextSample(){  double[] z=getStandardNormalVector(dimension);  Matrix Z=new Matrix(z,dimension);  Matrix sample=chol.getL().times(Z);  sample.plusEquals(mean);  return sample.getColumnPackedCopy();}  }
class C{  protected List<PointFeature> clip(PointFeature v1,PointFeature v2,Vector2 n,double offset){  List<PointFeature> points=new ArrayList<PointFeature>(2);  Vector2 p1=v1.getPoint();  Vector2 p2=v2.getPoint();  double d1=n.dot(p1) - offset;  double d2=n.dot(p2) - offset;  if (d1 <= 0.0)   points.add(v1);  if (d2 <= 0.0)   points.add(v2);  if (d1 * d2 < 0.0) {    Vector2 e=p1.to(p2);    double u=d1 / (d1 - d2);    e.multiply(u);    e.add(p1);    if (d1 > 0.0) {      points.add(new PointFeature(e,v1.getIndex()));    } else {      points.add(new PointFeature(e,v2.getIndex()));    }  }  return points;}  }
class C{  private void fillRightFromCenter(int centerViewPosition,int centerViewOffset,RecyclerView.Recycler recycler){  int leftBorder=-(settings.getViewWidthPx() + (isCollapsed ? settings.getViewWidthPx() : 0));  int rightBorder=getWidth() + (settings.getViewWidthPx() + (isCollapsed ? settings.getViewWidthPx() : 0));  int leftViewOffset=centerViewOffset;  int leftViewPosition=centerViewPosition;  final int baseTopMargin=Math.max(0,getHeight() - settings.getViewHeightPx() - settings.getViewWidthPx() / 4);  int overlapDistance;  if (isCollapsed) {    overlapDistance=-settings.getViewWidthPx() / 4;  } else {    overlapDistance=settings.getViewWidthPx() / 4;  }  boolean fillRight=true;  final int widthSpec=View.MeasureSpec.makeMeasureSpec(settings.getViewWidthPx(),View.MeasureSpec.EXACTLY);  final int heightSpec=View.MeasureSpec.makeMeasureSpec(settings.getViewHeightPx(),View.MeasureSpec.EXACTLY);  boolean hasPendingStateSelectedItem=mPendingSavedState != null && mPendingSavedState.isSelected && mPendingSavedState.mCenterItemPosition != RecyclerView.NO_POSITION;  float deltaOffset=settings.getViewWidthPx() / 2;  while (leftViewOffset > leftBorder) {    if (isCollapsed) {      leftViewOffset-=(settings.getViewWidthPx() + Math.abs(overlapDistance));    } else {      leftViewOffset-=(settings.getViewWidthPx() - Math.abs(overlapDistance));    }    leftViewPosition--;  }  if (leftViewPosition < 0) {    if (isCollapsed) {      leftViewOffset+=(settings.getViewWidthPx() + Math.abs(overlapDistance)) * Math.abs(leftViewPosition);    } else {      leftViewOffset+=(settings.getViewWidthPx() - Math.abs(overlapDistance)) * Math.abs(leftViewPosition);    }    leftViewPosition=0;  }  if (hasPendingStateSelectedItem && leftViewPosition != mPendingSavedState.mCenterItemPosition) {    leftViewOffset+=-deltaOffset;  }  while (fillRight && leftViewPosition < getItemCount()) {    if (hasPendingStateSelectedItem && leftViewPosition == mPendingSavedState.mCenterItemPosition && leftViewPosition != 0) {      leftViewOffset+=deltaOffset;    }    View view=viewCache.get(leftViewPosition);    if (view == null) {      view=recycler.getViewForPosition(leftViewPosition);      view.setLayerType(View.LAYER_TYPE_HARDWARE,null);      addView(view);      measureChildWithDecorationsAndMargin(view,widthSpec,heightSpec);      layoutDecorated(view,leftViewOffset,baseTopMargin,leftViewOffset + settings.getViewWidthPx(),baseTopMargin + settings.getViewHeightPx());    } else {      attachView(view);      viewCache.remove(leftViewPosition);    }    leftViewOffset=leftViewOffset + settings.getViewWidthPx() - overlapDistance;    fillRight=leftViewOffset < rightBorder;    if (hasPendingStateSelectedItem && leftViewPosition == mPendingSavedState.mCenterItemPosition) {      leftViewOffset+=deltaOffset;    }    leftViewPosition++;  }  if (hasPendingStateSelectedItem) {    View view=findCurrentCenterView();    if (view != null) {      view.setScaleX(animationHelper.getViewScaleFactor());      view.setScaleY(animationHelper.getViewScaleFactor());    }  }}  }
class C{  public void addScrollingListener(OnWheelScrollListener listener){  scrollingListeners.add(listener);}  }
class C{  void mergedWith(Node n1,Node n2){  if (n1.equals(n2))   throw new RuntimeException("oops");  somethingMerged=true;  if (ofcg() != null)   ofcg().mergedWith(n1,n2);  Map[] maps={simple,alloc,store,load,simpleInv,allocInv,storeInv,loadInv};  for (  Map<Node,Object> m : maps) {    if (!m.keySet().contains(n2))     continue;    Object[] os={m.get(n1),m.get(n2)};    int size1=getSize(os[0]);    int size2=getSize(os[1]);    if (size1 == 0) {      if (os[1] != null)       m.put(n1,os[1]);    } else     if (size2 == 0) {    } else     if (os[0] instanceof HashSet) {      if (os[1] instanceof HashSet) {        ((HashSet)os[0]).addAll((HashSet)os[1]);      } else {        Node[] ar=(Node[])os[1];        for (        Node element0 : ar) {          ((HashSet<Node>)os[0]).add(element0);        }      }    } else     if (os[1] instanceof HashSet) {      Node[] ar=(Node[])os[0];      for (      Node element0 : ar) {        ((HashSet<Node>)os[1]).add(element0);      }      m.put(n1,os[1]);    } else     if (size1 * size2 < 1000) {      Node[] a1=(Node[])os[0];      Node[] a2=(Node[])os[1];      Node[] ret=new Node[size1 + size2];      System.arraycopy(a1,0,ret,0,a1.length);      int j=a1.length;      outer:       for (      Node rep : a2) {        for (int k=0; k < j; k++)         if (rep == ret[k])         continue outer;        ret[j++]=rep;      }      Node[] newArray=new Node[j];      System.arraycopy(ret,0,newArray,0,j);      m.put(n1,ret=newArray);    } else {      HashSet<Node> s=new HashSet<Node>(size1 + size2);      for (      Object o : os) {        if (o == null)         continue;        if (o instanceof Set) {          s.addAll((Set<Node>)o);        } else {          Node[] ar=(Node[])o;          for (          Node element1 : ar) {            s.add(element1);          }        }      }      m.put(n1,s);    }    m.remove(n2);  }}  }
class C{  public static double turnAngle(S2Point a,S2Point b,S2Point c){  double outAngle=S2Point.crossProd(b,a).angle(S2Point.crossProd(c,b));  return (robustCCW(a,b,c) > 0) ? outAngle : -outAngle;}  }
class C{  public UsersGetNearbyQuery fields(UserField... value){  return unsafeParam("fields",value);}  }
class C{  public String toString(cp_info constant_pool[]){  CONSTANT_Utf8_info ci=(CONSTANT_Utf8_info)(constant_pool[string_index]);  return "\"" + ci.convert() + "\"";}  }
class C{  @Override @PreAuthorize("hasRole('ALL') or hasRole('F_METADATA_IMPORT')") public void deleteObject(@PathVariable String uid,HttpServletRequest request,HttpServletResponse response) throws Exception {  super.deleteObject(uid,request,response);}  }
class C{  static String valueToString(Object value) throws JSONException {  if (value == null || value.equals(null)) {    return "null";  }  if (value instanceof JSONString) {    Object o;    try {      o=((JSONString)value).toJSONString();    } catch (    Exception e) {      throw new JSONException(e);    }    if (o instanceof String) {      return (String)o;    }    throw new JSONException("Bad value from toJSONString: " + o);  }  if (value instanceof Number) {    return numberToString((Number)value);  }  if (value instanceof Boolean || value instanceof JSONObject || value instanceof JSONArray) {    return value.toString();  }  if (value instanceof Map) {    return new JSONObject((Map)value).toString();  }  if (value instanceof Collection) {    return new JSONArray((Collection)value).toString();  }  if (value.getClass().isArray()) {    return new JSONArray(value).toString();  }  return quote(value.toString());}  }
class C{  private void loadBinary(DataInputStream dis) throws IOException {  int size;  if (dis.readInt() != MAGIC) {    throw new Error("Bad magic in db");  }  if (dis.readInt() != VERSION) {    throw new Error("Bad VERSION in db");  }  sampleRate=dis.readInt();  numChannels=dis.readInt();  lpcMin=dis.readFloat();  lpcRange=dis.readFloat();  size=dis.readInt();  for (int i=0; i < size; i++) {    Diphone diphone=Diphone.loadBinary(dis);    add(diphone);  }}  }
class C{  public void removeEntries(int minSelectionIndex,int maxSelectionIndex){  if ((minSelectionIndex < 0) || (maxSelectionIndex < minSelectionIndex) || (maxSelectionIndex >= ftcList.size())) {    return;  }  int index=maxSelectionIndex;  while (index >= minSelectionIndex) {    ftcList.remove(index);    index--;  }  this.fireTableDataChanged();  if (parentObj != null) {    parentObj.featureTypeConstraintUpdated();  }}  }
class C{  public InfoflowResults analyzeAPKFile(String apkFileName,String xmlFileName,boolean enableImplicitFlows,boolean enableStaticFields,boolean flowSensitiveAliasing) throws IOException, XmlPullParserException {  String androidJars=System.getenv("ANDROID_JARS");  if (androidJars == null)   androidJars=System.getProperty("ANDROID_JARS");  if (androidJars == null)   throw new RuntimeException("Android JAR dir not set");  System.out.println("Loading Android.jar files from " + androidJars);  SetupApplication setupApplication=new SetupApplication(androidJars,apkFileName);  setupApplication.setTaintWrapper(new EasyTaintWrapper("EasyTaintWrapperSource.txt"));  setupApplication.calculateSourcesSinksEntrypoints(xmlFileName);  setupApplication.setEnableImplicitFlows(enableImplicitFlows);  setupApplication.setEnableStaticFieldTracking(enableStaticFields);  setupApplication.setFlowSensitiveAliasing(flowSensitiveAliasing);  return setupApplication.runInfoflow();}  }
class C{  public static boolean isFileOlder(File file,long timeMillis){  if (file == null) {    throw new IllegalArgumentException("No specified file");  }  if (!file.exists()) {    return false;  }  return file.lastModified() < timeMillis;}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_DISABLED_OTHER_CHAT(String value0){  return new SM_SYSTEM_MESSAGE(1310009,value0);}  }
class C{  public static final String repeatString(String sStr,int iTimes){  StringBuffer sb=new StringBuffer();  for (int iCnt=0; iCnt < iTimes; iCnt++)   sb.append(sStr);  return sb.toString();}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("set edgeShape=");  String shapeName=np.getWordMatchesIgnoringCase("angular straight curved none");  np.matchIgnoreCase(";");  byte shape;  if (shapeName.equalsIgnoreCase("angular"))   shape=EdgeView.ARC_LINE_EDGE; else   if (shapeName.equalsIgnoreCase("straight"))   shape=EdgeView.STRAIGHT_EDGE; else   if (shapeName.equalsIgnoreCase("curved"))   shape=EdgeView.QUAD_EDGE; else   shape=0;  if (getViewer() instanceof GraphView) {    boolean changed=false;    GraphView viewer=(GraphView)getViewer();    for (    Edge e : viewer.getSelectedEdges()) {      viewer.setShape(e,shape);      changed=true;    }    if (changed) {      viewer.repaint();    }  }}  }
class C{  public void init$Children(){}  }
class C{  public static final void drawLineSegment(GL2 gl,Vector2 p1,Vector2 p2,boolean points){  RenderUtilities.drawLineSegment(gl,p1.x,p1.y,p2.x,p2.y,points);}  }
class C{  private Iterator<byte[]> load(ColumnIdentifier columnIdentifier,long startOffset,long endOffset) throws IOException {  CarbonDictionaryReader dictionaryReader=getDictionaryReader(columnIdentifier);  try {    Iterator<byte[]> columnDictionaryChunkWrapper=dictionaryReader.read(startOffset,endOffset);    return columnDictionaryChunkWrapper;  }  finally {    dictionaryReader.close();  }}  }
class C{  public FrequencyDomainProcessor(int fftSize,double amount){  if (!MathUtils.isPowerOfTwo(fftSize)) {    throw new IllegalArgumentException("FFT size must be a power of two");  }  this.real=new double[fftSize];  this.imag=new double[fftSize];  this.amount=amount;  this.oneMinusAmount=1.0 - this.amount;}  }
class C{  public ZkConnection(String zkServers,int sessionTimeOut,String authStr){  _servers=zkServers;  _sessionTimeOut=sessionTimeOut;  _authStr=authStr;}  }
class C{  public boolean simulate_natives(){  return soot.PhaseOptions.getBoolean(options,"simulate-natives");}  }
class C{  private Input openInput(String name){  Iterable<String> lines;  try {    lines=inputSupplier.readInput(name);    if (lines == null) {      error("cannot open source '%s'",name);      lines=ImmutableList.of();    }  } catch (  IOException e) {    error("cannot open source '%s': %s",name,e.getMessage());    lines=ImmutableList.of();  }  return new Input(name,lines.iterator(),input);}  }
class C{  public boolean removeEntry(int xIndex,int dataSetIndex){  if (dataSetIndex >= mDataSets.size())   return false;  IDataSet dataSet=mDataSets.get(dataSetIndex);  Entry e=dataSet.getEntryForXIndex(xIndex);  if (e == null || e.getXIndex() != xIndex)   return false;  return removeEntry(e,dataSetIndex);}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  public NBodyForce(float gravConstant,float minDistance,float theta){  params=new float[]{gravConstant,minDistance,theta};  minValues=new float[]{DEFAULT_MIN_GRAV_CONSTANT,DEFAULT_MIN_DISTANCE,DEFAULT_MIN_THETA};  maxValues=new float[]{DEFAULT_MAX_GRAV_CONSTANT,DEFAULT_MAX_DISTANCE,DEFAULT_MAX_THETA};  root=factory.getQuadTreeNode();}  }
class C{  public ResultPoint[] detect() throws NotFoundException {  int left=leftInit;  int right=rightInit;  int up=upInit;  int down=downInit;  boolean sizeExceeded=false;  boolean aBlackPointFoundOnBorder=true;  boolean atLeastOneBlackPointFoundOnBorder=false;  boolean atLeastOneBlackPointFoundOnRight=false;  boolean atLeastOneBlackPointFoundOnBottom=false;  boolean atLeastOneBlackPointFoundOnLeft=false;  boolean atLeastOneBlackPointFoundOnTop=false;  while (aBlackPointFoundOnBorder) {    aBlackPointFoundOnBorder=false;    boolean rightBorderNotWhite=true;    while ((rightBorderNotWhite || !atLeastOneBlackPointFoundOnRight) && right < width) {      rightBorderNotWhite=containsBlackPoint(up,down,right,false);      if (rightBorderNotWhite) {        right++;        aBlackPointFoundOnBorder=true;        atLeastOneBlackPointFoundOnRight=true;      } else       if (!atLeastOneBlackPointFoundOnRight) {        right++;      }    }    if (right >= width) {      sizeExceeded=true;      break;    }    boolean bottomBorderNotWhite=true;    while ((bottomBorderNotWhite || !atLeastOneBlackPointFoundOnBottom) && down < height) {      bottomBorderNotWhite=containsBlackPoint(left,right,down,true);      if (bottomBorderNotWhite) {        down++;        aBlackPointFoundOnBorder=true;        atLeastOneBlackPointFoundOnBottom=true;      } else       if (!atLeastOneBlackPointFoundOnBottom) {        down++;      }    }    if (down >= height) {      sizeExceeded=true;      break;    }    boolean leftBorderNotWhite=true;    while ((leftBorderNotWhite || !atLeastOneBlackPointFoundOnLeft) && left >= 0) {      leftBorderNotWhite=containsBlackPoint(up,down,left,false);      if (leftBorderNotWhite) {        left--;        aBlackPointFoundOnBorder=true;        atLeastOneBlackPointFoundOnLeft=true;      } else       if (!atLeastOneBlackPointFoundOnLeft) {        left--;      }    }    if (left < 0) {      sizeExceeded=true;      break;    }    boolean topBorderNotWhite=true;    while ((topBorderNotWhite || !atLeastOneBlackPointFoundOnTop) && up >= 0) {      topBorderNotWhite=containsBlackPoint(left,right,up,true);      if (topBorderNotWhite) {        up--;        aBlackPointFoundOnBorder=true;        atLeastOneBlackPointFoundOnTop=true;      } else       if (!atLeastOneBlackPointFoundOnTop) {        up--;      }    }    if (up < 0) {      sizeExceeded=true;      break;    }    if (aBlackPointFoundOnBorder) {      atLeastOneBlackPointFoundOnBorder=true;    }  }  if (!sizeExceeded && atLeastOneBlackPointFoundOnBorder) {    int maxSize=right - left;    ResultPoint z=null;    for (int i=1; i < maxSize; i++) {      z=getBlackPointOnSegment(left,down - i,left + i,down);      if (z != null) {        break;      }    }    if (z == null) {      throw NotFoundException.getNotFoundInstance();    }    ResultPoint t=null;    for (int i=1; i < maxSize; i++) {      t=getBlackPointOnSegment(left,up + i,left + i,up);      if (t != null) {        break;      }    }    if (t == null) {      throw NotFoundException.getNotFoundInstance();    }    ResultPoint x=null;    for (int i=1; i < maxSize; i++) {      x=getBlackPointOnSegment(right,up + i,right - i,up);      if (x != null) {        break;      }    }    if (x == null) {      throw NotFoundException.getNotFoundInstance();    }    ResultPoint y=null;    for (int i=1; i < maxSize; i++) {      y=getBlackPointOnSegment(right,down - i,right - i,down);      if (y != null) {        break;      }    }    if (y == null) {      throw NotFoundException.getNotFoundInstance();    }    return centerEdges(y,z,x,t);  } else {    throw NotFoundException.getNotFoundInstance();  }}  }
class C{  public static void checkArgument(boolean expression){  if (!expression) {    throw new IllegalArgumentException();  }}  }
class C{  public static boolean isLetterOrDigit(char c){  return Character.isLetterOrDigit(c);}  }
class C{  public void updateData() throws IOException {  ProgressListener progress=doc.getProgressListener();  boolean saveCancelable=false;  if (progress != null) {    saveCancelable=progress.isCancelable();    progress.setSubtask("updating viewer");    progress.setCancelable(false);    try {      progress.setProgress(-1);    } catch (    CanceledException e) {    }  }  totalAssignedReads=0;  classification.getFullTree().computeId2Data(doc.getNumberOfSamples(),doc.getDataTable().getClass2Counts(getClassName()),id2NodeData);  for (  Integer fId : id2NodeData.keySet()) {    if (fId > 0) {      totalAssignedReads+=id2NodeData.get(fId).getCountAssigned();    }  }  if (progress != null)   progress.setCancelable(saveCancelable);  getCommandManager().updateEnableState();}  }
class C{  public void exclude(){  this.include(false);}  }
class C{  @Override public void write(OutputStream outputStream,Storable obj) throws IOException {  Writer writer=new OutputStreamWriter(outputStream);  gson.toJson(obj,obj.getClass(),writer);  writer.close();}  }
class C{  public boolean hasLastUpdated(){  return lastUpdated != null;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_HealCastorOnAttacked_INTERVAL_ME_TO_B(String skilltarget,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200525,skilltarget,num0,skillname);}  }
class C{  private void preprocess(){  int id;  int s, t;  n_func=Scene.v().getReachableMethods().size() + 1;  call_graph=new CgEdge[n_func];  n_calls=0;  n_reach_spark_user_methods=0;  id=1;  QueueReader<MethodOrMethodContext> smList=Scene.v().getReachableMethods().listener();  while (smList.hasNext()) {    final SootMethod func=(SootMethod)smList.next();    func2int.put(func,id);    int2func.put(id,func);    if (Scene.v().getCallGraph().isEntryMethod(func) || func.isEntryMethod()) {      CgEdge p=new CgEdge(Constants.SUPER_MAIN,id,null,call_graph[Constants.SUPER_MAIN]);      call_graph[Constants.SUPER_MAIN]=p;      n_calls++;    }    if (!func.isJavaLibraryMethod())     ++n_reach_spark_user_methods;    id++;  }  QueueReader<Edge> edgeList=Scene.v().getCallGraph().listener();  while (edgeList.hasNext()) {    Edge edge=edgeList.next();    if (edge.isClinit()) {      continue;    }    SootMethod src_func=edge.src();    SootMethod tgt_func=edge.tgt();    s=func2int.get(src_func);    t=func2int.get(tgt_func);    CgEdge p=new CgEdge(s,t,edge,call_graph[s]);    call_graph[s]=p;    edgeMapping.put(edge,p);    Stmt callsite=edge.srcStmt();    if (edge.isThreadRunCall() || edge.kind().isExecutor() || edge.kind().isAsyncTask()) {      thread_run_callsites.add(callsite);    } else     if (edge.isInstance() && !edge.isSpecial()) {      InstanceInvokeExpr expr=(InstanceInvokeExpr)callsite.getInvokeExpr();      p.base_var=findLocalVarNode(expr.getBase());      if (SootInfo.countCallEdgesForCallsite(callsite,true) > 1 && p.base_var != null) {        multiCallsites.add(callsite);      }    }    ++n_calls;  }  for (Iterator<VarNode> it=getVarNodeNumberer().iterator(); it.hasNext(); ) {    VarNode vn=it.next();    IVarAbstraction pn=makeInternalNode(vn);    pointers.add(pn);  }  for (Iterator<AllocDotField> it=getAllocDotFieldNodeNumberer().iterator(); it.hasNext(); ) {    AllocDotField adf=it.next();    SparkField field=adf.getField();    if (field instanceof SootField) {      Type decType=((SootField)field).getDeclaringClass().getType();      Type baseType=adf.getBase().getType();      if (!castNeverFails(baseType,decType))       continue;    }    IVarAbstraction pn=makeInternalNode(adf);    pointers.add(pn);  }  for (Iterator<AllocNode> it=getAllocNodeNumberer().iterator(); it.hasNext(); ) {    AllocNode obj=it.next();    IVarAbstraction pn=makeInternalNode(obj);    allocations.add(pn);  }  for (  Object object : allocSources()) {    IVarAbstraction obj=makeInternalNode((AllocNode)object);    Node[] succs=allocLookup((AllocNode)object);    for (    Node element0 : succs) {      PlainConstraint cons=new PlainConstraint();      IVarAbstraction p=makeInternalNode(element0);      cons.expr.setPair(obj,p);      cons.type=Constants.NEW_CONS;      constraints.add(cons);    }  }  Pair<Node,Node> intercall=new Pair<Node,Node>();  for (  Object object : simpleSources()) {    IVarAbstraction p=makeInternalNode((VarNode)object);    Node[] succs=simpleLookup((VarNode)object);    for (    Node element0 : succs) {      PlainConstraint cons=new PlainConstraint();      IVarAbstraction q=makeInternalNode(element0);      cons.expr.setPair(p,q);      cons.type=Constants.ASSIGN_CONS;      intercall.setPair((VarNode)object,element0);      cons.interCallEdges=lookupEdgesForAssignment(intercall);      constraints.add(cons);    }  }  intercall=null;  assign2edges.clear();  for (  Object object : loadSources()) {    FieldRefNode frn=(FieldRefNode)object;    IVarAbstraction p=makeInternalNode(frn.getBase());    Node[] succs=loadLookup(frn);    for (    Node element0 : succs) {      PlainConstraint cons=new PlainConstraint();      IVarAbstraction q=makeInternalNode(element0);      cons.f=frn.getField();      cons.expr.setPair(p,q);      cons.type=Constants.LOAD_CONS;      constraints.add(cons);    }  }  for (  Object object : storeSources()) {    IVarAbstraction p=makeInternalNode((VarNode)object);    Node[] succs=storeLookup((VarNode)object);    for (    Node element0 : succs) {      PlainConstraint cons=new PlainConstraint();      FieldRefNode frn=(FieldRefNode)element0;      IVarAbstraction q=makeInternalNode(frn.getBase());      cons.f=frn.getField();      cons.expr.setPair(p,q);      cons.type=Constants.STORE_CONS;      constraints.add(cons);    }  }  n_init_constraints=constraints.size();  low_cg=new int[n_func];  vis_cg=new int[n_func];  rep_cg=new int[n_func];  indeg_cg=new int[n_func];  scc_size=new int[n_func];  block_num=new int[n_func];  context_size=new long[n_func];  max_context_size_block=new long[n_func];}  }
class C{  @Override public void redoAction(UndoInterface undoRedoObject){  if (undoRedoObject != null) {    if (undoRedoObject.getNewValue() instanceof ReferencedEnvelope) {      ReferencedEnvelope oldValue=(ReferencedEnvelope)undoRedoObject.getNewValue();      populateField(oldValue);    }  }}  }
class C{  @Override public Object invoke(MethodInvocation invocation) throws Throwable {  Subreport subreport=invocation.getMethod().getAnnotation(Subreport.class);  testEventCollector.startSubreport(subreport.value());  try {    return invocation.proceed();  }  finally {    testEventCollector.endSubreport(subreport.value());  }}  }
class C{  public SpaceRemoteEvent(Object source,long eventID,long seqNum,MarshalledObject handback){  super(source,eventID,seqNum,handback);}  }
class C{  private void initUI(){  this.setLayout(new BoxLayout(this,BoxLayout.Y_AXIS));  Force[] forces=fsim.getForces();  for (int i=0; i < forces.length; i++) {    Force f=forces[i];    Box v=new Box(BoxLayout.Y_AXIS);    for (int j=0; j < f.getParameterCount(); j++) {      JValueSlider field=createField(f,j);      field.addChangeListener(lstnr);      v.add(field);    }    String name=f.getClass().getName();    name=name.substring(name.lastIndexOf(".") + 1);    v.setBorder(BorderFactory.createTitledBorder(name));    this.add(v);  }}  }
class C{  public boolean isSetCurrentMessageId(){  return this.currentMessageId != null;}  }
class C{  public boolean isLast(){  return last;}  }
class C{  public static void registerWorldGen(ResourceLocation id,WorldGenerator generator){  AutomaticNamespacedRegistry<ResourceLocation,WorldGenerator> registry=Registries.get(WorldGenerator.class);  if (generator == null) {    throw new NullPointerException("Attempted to register a null world generator");  } else   if (id == null) {    throw new NullPointerException("Attempted to register a world generator with a null ID");  } else   if (registry.containsKey(id)) {    throw new IllegalArgumentException(String.format("The world generator ID \"%s\" has already been registered",id));  }  registry.register(id,generator);}  }
class C{  public static final SM_SYSTEM_MESSAGE STR_MSG_HOUSING_AUCTION_SUCCESS(int address){  return new SM_SYSTEM_MESSAGE(1401269,address);}  }
class C{  public static void dropTable(Database db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"THEME_LIST\"";  db.execSQL(sql);}  }
class C{  public static int exportReference2ReadName(MainViewer viewer,File file,char separator,ProgressListener progressListener) throws IOException {  int totalLines=0;  try (BufferedWriter w=new BufferedWriter(new FileWriter(file))){    Document doc=viewer.getDir().getDocument();    IConnector connector=doc.getConnector();    IClassificationBlock classificationBlock=connector.getClassificationBlock(ClassificationType.Taxonomy.toString());    java.util.Collection<Integer> taxonIds=viewer.getSelectedIds();    progressListener.setSubtask("Mapping reads to references");    boolean eachReadOnceOnly=ProgramProperties.get("each-read-once-only",false);    Map<String,List<String>> reference2reads=new HashMap<>();    if (taxonIds.size() == 0) {      IReadBlockIterator it=connector.getAllReadsIterator(doc.getMinScore(),doc.getMaxExpected(),true,false);      progressListener.setMaximum(it.getMaximumProgress());      progressListener.setProgress(0);      try {        while (it.hasNext()) {          IReadBlock readBlock=it.next();          for (int i=0; i < readBlock.getNumberOfAvailableMatchBlocks(); i++) {            IMatchBlock matchBlock=readBlock.getMatchBlock(i);            if (matchBlock.getBitScore() >= doc.getMinScore() && matchBlock.getExpected() <= doc.getMaxExpected() && matchBlock.getPercentIdentity() >= doc.getMinPercentIdentity()) {              String reference=Basic.getFirstLine(matchBlock.getText());              List<String> list=reference2reads.get(reference);              if (list == null) {                list=new LinkedList<>();                reference2reads.put(reference,list);              }              list.add(readBlock.getReadName());              if (eachReadOnceOnly)               break;            }          }          progressListener.setProgress(it.getProgress());        }      }  finally {        it.close();      }    } else {      int maxProgress=taxonIds.size();      progressListener.setMaximum(maxProgress);      progressListener.setProgress(0);      for (      int id : taxonIds) {        if (classificationBlock.getSum(id) > 0) {          IReadBlockIterator it=connector.getReadsIterator(ClassificationType.Taxonomy.toString(),id,doc.getMinScore(),doc.getMaxExpected(),true,false);          progressListener.setMaximum(it.getMaximumProgress());          progressListener.setProgress(0);          try {            while (it.hasNext()) {              IReadBlock readBlock=it.next();              for (int i=0; i < readBlock.getNumberOfAvailableMatchBlocks(); i++) {                IMatchBlock matchBlock=readBlock.getMatchBlock(i);                if (matchBlock.getBitScore() >= doc.getMinScore() && matchBlock.getExpected() <= doc.getMaxExpected() && matchBlock.getPercentIdentity() >= doc.getMinPercentIdentity()) {                  String reference=Basic.getFirstLine(matchBlock.getText());                  List<String> list=reference2reads.get(reference);                  if (list == null) {                    list=new LinkedList<>();                    reference2reads.put(reference,list);                  }                  list.add(readBlock.getReadName());                  if (eachReadOnceOnly)                   break;                }              }              progressListener.setProgress(it.getProgress());            }          }  finally {            it.close();          }        }      }    }    progressListener.setSubtask("writing");    progressListener.setMaximum(reference2reads.size());    progressListener.setProgress(0);    for (    String reference : reference2reads.keySet()) {      w.write(reference + separator + Basic.toString(reference2reads.get(reference),"" + separator)+ "\n");      progressListener.incrementProgress();      totalLines++;    }  } catch (  CanceledException e) {    System.err.println("USER CANCELED");  }  return totalLines;}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  executeImmediately("set keep1=" + (!isSelected()) + ";");}  }
class C{  public ReadModifiers(ReadModifiers... modifiers){  super(modifiers);}  }
class C{  public static <T>T checkNotNull(T reference,String errorMessageTemplate,Object... errorMessageArgs){  if (reference == null) {    throw new NullPointerException(String.format(errorMessageTemplate,errorMessageArgs));  }  return reference;}  }
class C{  @Override public final float readFloat() throws IOException {  return Float.intBitsToFloat(readInt());}  }
class C{  private static int computeChecksum(byte[] buf,int offset,int length,String channel){  Hasher hasher=Hashing.murmur3_32().newHasher();  hasher.putBytes(buf,offset,length);  hasher.putUnencodedChars(channel);  return hasher.hash().asInt() & 0xffff;}  }
class C{  private static ByteBuffer trim(ByteBuffer buf){  if (buf.capacity() <= 4 * buf.remaining()) {    return buf;  } else {    ByteBuffer clone=ByteBuffer.allocate(buf.remaining());    buf.get(clone.array());    return clone;  }}  }
class C{  public TAC2008UpdateSummarizationFileSet(String sCorpusDir){  CorpusDir=sCorpusDir;  Categories=null;  TrainingFiles=new ArrayList<CategorizedFileEntry>();  TestFiles=new ArrayList<CategorizedFileEntry>();}  }
class C{  @Override public void disconnect(){  ProcessConfiguration processConfiguration=configurationController.getProcessConfiguration();  log.debug("Disconnecting ActiveMessageReceiver listener with destination to {}",processConfiguration.getJmsDaqCommandQueue());  listenerContainer.shutdown();}  }
class C{  public FTPFile[] list(String fileSpec) throws IllegalStateException, IOException, FTPIllegalReplyException, FTPException, FTPDataTransferException, FTPAbortedException, FTPListParseException {synchronized (lock) {    if (!connected) {      throw new IllegalStateException("Client not connected");    }    if (!authenticated) {      throw new IllegalStateException("Client not authenticated");    }    communication.sendFTPCommand("TYPE A");    FTPReply r=communication.readFTPReply();    touchAutoNoopTimer();    if (!r.isSuccessCode()) {      throw new FTPException(r);    }    FTPDataTransferConnectionProvider provider=openDataTransferChannel();    boolean mlsdCommand;    if (mlsdPolicy == MLSD_IF_SUPPORTED) {      mlsdCommand=mlsdSupported;    } else     if (mlsdPolicy == MLSD_ALWAYS) {      mlsdCommand=true;    } else {      mlsdCommand=false;    }    String command=mlsdCommand ? "MLSD" : "LIST";    if (fileSpec != null && fileSpec.length() > 0) {      command+=" " + fileSpec;    }    ArrayList lines=new ArrayList();    boolean wasAborted=false;    communication.sendFTPCommand(command);    try {      Socket dtConnection;      try {        dtConnection=provider.openDataTransferConnection();      }  finally {        provider.dispose();      }synchronized (abortLock) {        ongoingDataTransfer=true;        aborted=false;        consumeAborCommandReply=false;      }      NVTASCIIReader dataReader=null;      try {        dataTransferInputStream=dtConnection.getInputStream();        if (modezEnabled) {          dataTransferInputStream=new InflaterInputStream(dataTransferInputStream);        }        dataReader=new NVTASCIIReader(dataTransferInputStream,mlsdCommand ? "UTF-8" : pickCharset());        String line;        while ((line=dataReader.readLine()) != null) {          if (line.length() > 0) {            lines.add(line);          }        }      } catch (      IOException e) {synchronized (abortLock) {          if (aborted) {            throw new FTPAbortedException();          } else {            throw new FTPDataTransferException("I/O error in data transfer",e);          }        }      } finally {        if (dataReader != null) {          try {            dataReader.close();          } catch (          Throwable t) {            ;          }        }        try {          dtConnection.close();        } catch (        Throwable t) {          ;        }        dataTransferInputStream=null;synchronized (abortLock) {          wasAborted=aborted;          ongoingDataTransfer=false;          aborted=false;        }      }    }  finally {      r=communication.readFTPReply();      touchAutoNoopTimer();      if (r.getCode() != 150 && r.getCode() != 125) {        throw new FTPException(r);      }      r=communication.readFTPReply();      if (!wasAborted && r.getCode() != 226) {        throw new FTPException(r);      }      if (consumeAborCommandReply) {        communication.readFTPReply();        consumeAborCommandReply=false;      }    }    int size=lines.size();    String[] list=new String[size];    for (int i=0; i < size; i++) {      list[i]=(String)lines.get(i);    }    FTPFile[] ret=null;    if (mlsdCommand) {      MLSDListParser parser=new MLSDListParser();      ret=parser.parse(list);    } else {      if (parser != null) {        try {          ret=parser.parse(list);        } catch (        FTPListParseException e) {          parser=null;        }      }      if (ret == null) {        for (Iterator i=listParsers.iterator(); i.hasNext(); ) {          FTPListParser aux=(FTPListParser)i.next();          try {            ret=aux.parse(list);            parser=aux;            break;          } catch (          FTPListParseException e) {            continue;          }        }      }    }    if (ret == null) {      throw new FTPListParseException();    } else {      return ret;    }  }}  }
class C{  public void addCatchClause(CatchClause node){  List<CatchClause> list=(parent == null || state == null) ? getCatchClauseListNoTransform() : getCatchClauseList();  list.addChild(node);}  }
class C{  @After public void tearDown(){  entityManager.remove(user);}  }
class C{  public Variant(@Nullable Object value){  if (value != null) {    boolean clazzIsArray=value.getClass().isArray();    Class<?> componentClazz=clazzIsArray ? ArrayUtil.getType(value) : value.getClass();    checkArgument(clazzIsArray || !Variant.class.equals(componentClazz),"Variant cannot contain Variant");    checkArgument(!DataValue.class.equals(componentClazz),"Variant cannot contain DataValue");    checkArgument(!DiagnosticInfo.class.equals(componentClazz),"Variant cannot contain DiagnosticInfo");  }  this.value=value;}  }
class C{  public Comment(){}  }
class C{  public Keyspace toHost(Host host) throws ConnectionException {  if (!_keyspace.getConnectionPool().getPools().stream().map(null).anyMatch(null)) {    throw new NoAvailableHostsException("Host not found in pool");  }  return pinToVerifiedHost(host);}  }
class C{  public String formatTime(long value){  int timestamps=storage.getTimestampsCount();  if (timestamps == 0)   return SimpleXYChartUtils.formatTime(value,value,value); else   return SimpleXYChartUtils.formatTime(value,storage.getTimestamp(0),storage.getTimestamp(timestamps - 1));}  }
class C{  @Override public boolean onLayoutChild(CoordinatorLayout parent,V child,int layoutDirection){  if (!haveSetPadding) {    haveSetPadding=true;    child.setPadding(0,DisplayUtils.getStatusBarHeight(parent.getResources()),0,0);  }  return false;}  }
class C{  private StringBuffer formatImaginary(double absIm,StringBuffer toAppendTo,FieldPosition pos){  pos.setBeginIndex(0);  pos.setEndIndex(0);  CompositeFormat.formatDouble(absIm,getImaginaryFormat(),toAppendTo,pos);  if (toAppendTo.toString().equals("1")) {    toAppendTo.setLength(0);  }  return toAppendTo;}  }
class C{  public void add(String panelName,String menuOption,List<FieldIdEnum> fieldList){  Map<String,List<FieldIdEnum>> menuOptionFieldMap=enabledFieldStateMap.get(panelName);  if (menuOptionFieldMap == null) {    menuOptionFieldMap=new HashMap<String,List<FieldIdEnum>>();    enabledFieldStateMap.put(panelName,menuOptionFieldMap);  }  menuOptionFieldMap.put(menuOption,fieldList);}  }
class C{  public Graph(Table nodes,Table edges,boolean directed,String sourceKey,String targetKey){  init(nodes,edges,directed,DEFAULT_NODE_KEY,sourceKey,targetKey);}  }
class C{  public AccountGetPushSettingsQuery deviceId(String value){  return unsafeParam("device_id",value);}  }
class C{  public static int slotSize(Schema sch){  int pos=0;  for (  String fldname : sch.fields())   pos+=Page.maxSize(sch.type(fldname));  return pos;}  }
class C{  public RecyclerView.ViewHolder newInsertionViewHolder(ViewGroup vParent){  final LayoutInflater inflater=LayoutInflater.from(getContext());  ViewGroup itemView=(ViewGroup)inflater.inflate(R.layout.layout_root,vParent,false);  return new InsertViewHolder(itemView);}  }
class C{  private List<Proxy> filterUnresponsiveProxiesFromList(List<Proxy> proxyList){  if (this.failedDelayCache.isEmpty()) {    return proxyList;  }  List<Proxy> result=new ArrayList<Proxy>(proxyList.size());  for (  Proxy proxy : proxyList) {    if (isDirect(proxy) || isNotUnresponsive(proxy)) {      result.add(proxy);    }  }  return result;}  }
class C{  public static Map<String,Object> checkShipContactMechIdForNew(HttpServletRequest request,String contactMechId,String paramPrefix) throws GeneralException {  String origContactMechId=contactMechId;  if ("_NEW_".equals(contactMechId)) {    Collection<MapProcessor> paramValidators=null;    String serviceName;    String setShippingPurpose=getRequestAttribOrParam(request,paramPrefix + "setShippingPurpose");    Map<String,Object> overrideParams=UtilMisc.toMap("setBillingPurpose",null);    if ("Y".equals(setShippingPurpose)) {      overrideParams.put("setShippingPurpose","Y");      overrideParams.put("contactMechPurposeTypeId",null);    } else {      overrideParams.put("setShippingPurpose",null);      overrideParams.put("contactMechPurposeTypeId","SHIPPING_LOCATION");    }    if (Boolean.FALSE.equals(request.getAttribute("checkoutUseNewRecords"))) {      Map<String,Object> result=ServiceUtil.returnSuccess();      result.put("contactMechId",null);      result.put("origContactMechId",origContactMechId);      return result;    }    paramValidators=UtilMisc.<MapProcessor>toList(getPostalAddressValidator(request));    serviceName="createPostalAddressAndPurposes";    Map<String,Object> servResult=runServiceFromParams(request,paramPrefix,serviceName,overrideParams,paramValidators);    if (!ServiceUtil.isSuccess(servResult)) {      Debug.logInfo("Could not create new ship contact mech during checkout: " + ServiceUtil.getErrorMessage(servResult),module);      return servResult;    } else {      contactMechId=(String)servResult.get("contactMechId");    }    Map<String,Object> newShipContactMechInfoMap=UtilGenerics.checkMap(request.getAttribute("newShipContactMechInfoMap"));    if (newShipContactMechInfoMap == null) {      newShipContactMechInfoMap=new HashMap<String,Object>();    }    Map<String,Object> info=new HashMap<String,Object>();    info.put("contactMechId",contactMechId);    newShipContactMechInfoMap.put(origContactMechId,info);    request.setAttribute("newShipContactMechInfoMap",newShipContactMechInfoMap);    Map<String,Object> result=ServiceUtil.returnSuccess();    result.put("contactMechId",contactMechId);    result.put("origContactMechId",origContactMechId);    result.put("paramPrefix",paramPrefix);    return result;  } else {    Map<String,Object> result=ServiceUtil.returnSuccess();    result.put("contactMechId",contactMechId);    result.put("origContactMechId",origContactMechId);    return result;  }}  }
class C{  public static void loadArmV7aLibrary(ApplicationLike applicationLike,String libName){  if (libName == null || libName.isEmpty() || applicationLike == null) {    throw new TinkerRuntimeException("libName or context is null!");  }  if (TinkerApplicationHelper.isTinkerEnableForNativeLib(applicationLike)) {    if (TinkerApplicationHelper.loadLibraryFromTinker(applicationLike,"lib/armeabi-v7a",libName)) {      return;    }  }  System.loadLibrary(libName);}  }
class C{  public static Zmat bahi(Zmat B,Zutmat U) throws JampackException {  int i, j, k;  Z x=new Z();  U.getProperties();  B.getProperties();  if (U.nr != U.nc)   throw new JampackException("Rectangular matrix.");  if (U.nc != B.nc)   throw new JampackException("Inconsistent dimensions.");  return H.o(Solve.aib(U,H.o(B)));}  }
class C{  public CM_AUTH_GG(java.nio.ByteBuffer buf,LoginConnection client){  super(buf,client,0x07);}  }
class C{  private void handleWhitespace(){  int oldPos=pos - 1;  while (pos < buffer.length) {    char c=buffer[pos];switch (c) {case ' ':case '\t':case '\r':      pos++;    break;default :  if (lineHasPrecedingNonWhitespaceChar || c == '#' || c == '\n') {    tokens.add(new Token(ProjectViewTokenType.WHITESPACE,oldPos,pos));  } else {    tokens.add(new Token(ProjectViewTokenType.INDENT,oldPos,pos));  }return;}}tokens.add(new Token(ProjectViewTokenType.WHITESPACE,oldPos,pos));}  }
class C{  public String toString(){  return (mbrolaVoice.toString() + "Validator");}  }
class C{  public static void writeString(OutputStream out,Charset charset,String value) throws IOException {  Writer writer=new OutputStreamWriter(out,charset);  String nl=System.getProperty("line.separator");  int r=0;  while (r < value.length()) {    int i=value.indexOf("\n",r);    if (i == -1) {      break;    }    writer.write(value.substring(r,i));    writer.write(nl);    r=i + 1;  }  writer.write(value.substring(r));  writer.close();}  }
class C{  private void deleteFile(){  FileFactory.FileType fileType=FileFactory.getFileType(this.filePath);  CarbonFile carbonFile=FileFactory.getCarbonFile(this.filePath,fileType);  carbonFile.delete();}  }
class C{  public int compare(Object[] rowA,Object[] rowB){  int diff=0;  int normalIndex=0;  int noDictionaryindex=0;  for (  boolean isNoDictionary : noDictionaryColMaping) {    if (isNoDictionary) {      byte[] byteArr1=(byte[])rowA[IgnoreDictionary.BYTE_ARRAY_INDEX_IN_ROW.getIndex()];      ByteBuffer buff1=ByteBuffer.wrap(byteArr1);      RemoveDictionaryUtil.extractSingleHighCardDims(byteArr1,noDictionaryindex,noDictionaryCount,buff1);      byte[] byteArr2=(byte[])rowB[IgnoreDictionary.BYTE_ARRAY_INDEX_IN_ROW.getIndex()];      ByteBuffer buff2=ByteBuffer.wrap(byteArr2);      RemoveDictionaryUtil.extractSingleHighCardDims(byteArr2,noDictionaryindex,noDictionaryCount,buff2);      int difference=UnsafeComparer.INSTANCE.compareTo(buff1,buff2);      if (difference != 0) {        return difference;      }      noDictionaryindex++;    } else {      int dimFieldA=RemoveDictionaryUtil.getDimension(normalIndex,rowA);      int dimFieldB=RemoveDictionaryUtil.getDimension(normalIndex,rowB);      diff=dimFieldA - dimFieldB;      if (diff != 0) {        return diff;      }      normalIndex++;    }  }  return diff;}  }
class C{  @Override public void subreportEnd(SubreportEndEntry subreportEndLogEntry){  throw new UnsupportedOperationException();}  }
class C{  public static double mouseX(){synchronized (mouseLock) {    return mouseX;  }}  }
class C{  synchronized public void saveRobotList(List<RobotUser> robotList){  SQLiteDatabase db=dbHelper.getWritableDatabase();  if (db.isOpen()) {    db.delete(UserDao.ROBOT_TABLE_NAME,null,null);    for (    RobotUser item : robotList) {      ContentValues values=new ContentValues();      values.put(UserDao.ROBOT_COLUMN_NAME_ID,item.getUsername());      if (item.getNick() != null)       values.put(UserDao.ROBOT_COLUMN_NAME_NICK,item.getNick());      if (item.getAvatar() != null)       values.put(UserDao.ROBOT_COLUMN_NAME_AVATAR,item.getAvatar());      db.replace(UserDao.ROBOT_TABLE_NAME,null,values);    }  }}  }
class C{  public double uniformRand(){  return (rand.nextBoolean()) ? 1.0 : -1.0;}  }
class C{  public String toString(){  return "MPPointD, x: " + x + ", y: "+ y;}  }
class C{  private Hex(){}  }
class C{  private boolean isWithinIllegalParent(@NotNull Object viewObject,int depth){  String fqcn=viewObject.getClass().getName();  if (fqcn.endsWith(CALENDAR_VIEW) || !(fqcn.startsWith(ANDROID_PKG_PREFIX) || fqcn.startsWith("com.android.internal.widget."))) {    return true;  }  if (depth > 0) {    Result result=myLayoutLib.getViewParent(viewObject);    if (result.isSuccess()) {      Object parent=result.getData();      if (parent != null) {        return isWithinIllegalParent(parent,depth - 1);      }    }  }  return false;}  }
class C{  private void clear(){  stop();  for (  View view : mViews) {    removeView(view);  }  mViews.clear();}  }
class C{  private void make_Sync(){  sncX=(int)this.map_controler.get_Direc_Dis_X(this.map_controler.dir);  position.x+=sncX;  if (sKind == 5 && sNum == 0) {    this.map_controler.syncCnt+=sncX;    this.map_controler.dirCnt++;    if (this.map_controler.dirCnt >= this.map_controler.dirLen) {      this.map_controler.dirCnt=0;      this.map_controler.dirLen=150;      this.map_controler.dir=16 - this.map_controler.dir;    }  }}  }
class C{  public static void debug(@Nullable Class<?> caller,String message,Object... args){  android.util.Log.d(tag(caller),String.format(Locale.ENGLISH,message,args));}  }
class C{  public void resolve(AbsoluteTableIdentifier absoluteTableIdentifier){  DimColumnResolvedFilterInfo dimColumnEvaluatorInfo=null;  MeasureColumnResolvedFilterInfo msrColumnEvalutorInfo=null;  int index=0;  if (exp instanceof BinaryLogicalExpression) {    BinaryLogicalExpression conditionalExpression=(BinaryLogicalExpression)exp;    List<ColumnExpression> columnList=conditionalExpression.getColumnList();    for (    ColumnExpression columnExpression : columnList) {      if (columnExpression.isDimension()) {        dimColumnEvaluatorInfo=new DimColumnResolvedFilterInfo();        DimColumnFilterInfo filterInfo=new DimColumnFilterInfo();        dimColumnEvaluatorInfo.setColumnIndex(columnExpression.getCarbonColumn().getOrdinal());        dimColumnEvaluatorInfo.setRowIndex(index++);        dimColumnEvaluatorInfo.setDimension(columnExpression.getDimension());        dimColumnEvaluatorInfo.setDimensionExistsInCurrentSilce(false);        if (columnExpression.getDimension().hasEncoding(Encoding.DIRECT_DICTIONARY)) {          filterInfo.setFilterList(getDirectSurrogateValues(columnExpression));        } else {          filterInfo.setFilterListForNoDictionaryCols(getNoDictionaryRangeValues());        }        filterInfo.setIncludeFilter(isIncludeFilter);        dimColumnEvaluatorInfo.setFilterValues(filterInfo);        dimColumnEvaluatorInfo.addDimensionResolvedFilterInstance(columnExpression.getDimension(),filterInfo);        dimColEvaluatorInfoList.add(dimColumnEvaluatorInfo);      } else {        msrColumnEvalutorInfo=new MeasureColumnResolvedFilterInfo();        msrColumnEvalutorInfo.setRowIndex(index++);        msrColumnEvalutorInfo.setAggregator(((CarbonMeasure)columnExpression.getCarbonColumn()).getAggregateFunction());        msrColumnEvalutorInfo.setColumnIndex(((CarbonMeasure)columnExpression.getCarbonColumn()).getOrdinal());        msrColumnEvalutorInfo.setType(columnExpression.getCarbonColumn().getDataType());        msrColEvalutorInfoList.add(msrColumnEvalutorInfo);      }    }  }}  }
class C{  public short[][] reduce_table(){  return _reduce_table;}  }
class C{  public Selection isAfterNoon(){  return select(null);}  }
class C{  public UnusableEntryException(Entry partial,String[] badFields,Throwable[] exceptions){  super();  if (exceptions != null && exceptions.length > 0) {    initCause(exceptions[0]);  }  if (partial == null) {    if (exceptions.length != 1) {      throw new IllegalArgumentException("If partial is null " + "exceptions must have one element");    }    if (badFields != null) {      throw new IllegalArgumentException("If partial is null " + "badFields must be null");    }  } else {    if (badFields.length != exceptions.length) {      throw new IllegalArgumentException("If partial is non-null " + "badFields and exceptions must have same length");    }  }  if (badFields != null) {    for (int i=0; i < badFields.length; i++) {      if (badFields[i] == null)       throw new NullPointerException("badFields has a null element");    }  }  for (int i=0; i < exceptions.length; i++) {    if (exceptions[i] == null)     throw new NullPointerException("exceptions has a null element");  }  partialEntry=partial;  unusableFields=badFields;  nestedExceptions=exceptions;}  }
class C{  final short findNextState(int state,short lookahead){  int index=goto_offsets[state];  if (index != UNUSED_OFFSET) {    index+=lookahead;    if (0 <= index && index < actions.length && lookaheads[index] == lookahead) {      return actions[index];    }  }  return compressed ? default_actions[state] : 0;}  }
class C{  public synchronized void openDriver(SurfaceHolder holder) throws IOException {  Camera theCamera=camera;  if (theCamera == null) {    if (requestedCameraId >= 0) {      theCamera=OpenCameraInterface.open(requestedCameraId);    } else {      theCamera=OpenCameraInterface.open();    }    if (theCamera == null) {      throw new IOException();    }    camera=theCamera;  }  theCamera.setPreviewDisplay(holder);  if (!initialized) {    initialized=true;    configManager.initFromCameraParameters(theCamera);  }  Camera.Parameters parameters=theCamera.getParameters();  String parametersFlattened=parameters == null ? null : parameters.flatten();  try {    configManager.setDesiredCameraParameters(theCamera,false);  } catch (  RuntimeException re) {    Log.w(TAG,"Camera rejected parameters. Setting only minimal safe-mode parameters");    Log.i(TAG,"Resetting to saved camera params: " + parametersFlattened);    if (parametersFlattened != null) {      parameters=theCamera.getParameters();      parameters.unflatten(parametersFlattened);      try {        theCamera.setParameters(parameters);        configManager.setDesiredCameraParameters(theCamera,true);      } catch (      RuntimeException re2) {        Log.w(TAG,"Camera rejected even safe-mode parameters! No configuration");      }    }  }}  }
class C{  public MannWhitneyUTest(){  naturalRanking=new NaturalRanking(NaNStrategy.FIXED,TiesStrategy.AVERAGE);}  }
class C{  public MithraRuntimeType parseConfiguration(InputStream mithraFileIs){  return this.configManager.parseConfiguration(mithraFileIs);}  }
class C{  public FieldConfigInteger(FieldConfigCommonData commonData){  super(commonData);}  }
class C{  public int logined(String sid,String ip){  set("logintimes",getInt("logintimes") + 1);  Lock.removed(getId(),sid);  Helper.update(W.create("sid",sid),V.create("sid",X.EMPTY),User.class);  return Helper.update(getId(),V.create("lastlogintime",System.currentTimeMillis()).set("logintimes",getInt("logintimes")).set("ip",ip).set("failtimes",0).set("locked",0).set("lockexpired",0).set("sid",sid).set("updated",System.currentTimeMillis()),User.class);}  }
class C{  public static List<String> readLines(File file,String encoding) throws IOException {  return readLines(file,Charsets.toCharset(encoding));}  }
class C{  public OpenIntToDoubleHashMap(final int expectedSize){  this(expectedSize,Double.NaN);}  }
class C{  @Pollable(async=true,message="Start Adding Box SDK Service Config with no bootstrap",expectedSubTaskNumber=1) public PollableFuture<BoxSDKServiceConfigEntity> addConfigWithNoBootstrap(String clientId,String clientSecret,String publicKeyId,String privateKey,String privateKeyPassword,String enterpriseId,String appUserId,String rootFolderId,String dropsFolderId,@InjectCurrentTask PollableTask currentTask) throws ExecutionException, InterruptedException, BoxSDKServiceException {  BoxSDKServiceConfigEntity boxSDKServiceConfig=boxSDKServiceConfigEntityRepository.findFirstByOrderByIdAsc();  if (boxSDKServiceConfig != null) {    throw new BoxSDKServiceException("Config must be deleted first before adding a new one");  }  boxSDKServiceConfig=new BoxSDKServiceConfigEntity(clientId,clientSecret,publicKeyId,privateKey,privateKeyPassword,enterpriseId,appUserId,rootFolderId,dropsFolderId,false);  logger.debug("Saving of the config first so that it can be validated");  boxSDKServiceConfigEntityRepository.save(boxSDKServiceConfig);  validateConfig(boxSDKServiceConfig,currentTask);  return new PollableFutureTaskResult<>(boxSDKServiceConfig);}  }
class C{  private void refreshStickyHeaders(){  if ($table != null) {    $table.stickyTableHeaders("destroy");    setupStickyHeader();  }}  }
class C{  public static boolean isSetTrue(String propertyName){  String value=props.getProperty(propertyName);  return "true".equals(value);}  }
class C{  private void createUI(){  readConfigFile(null,this,"Rule.xml");  createFilter();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GUILD_BANSIH_HE_BANISHED_HIM(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1300247,value0,value1);}  }
class C{  public static void init(Context context){  if (cameraManager == null) {    cameraManager=new CameraManager(context);  }}  }
class C{  protected final void registerDataSource(DataSource added){  registerDataSources(Collections.singleton(added));}  }
class C{  @Override public void endDocument() throws SAXException {  return;}  }
class C{  @Override public void onPageFinished(WebView view,String url){  super.onPageFinished(view,url);  if (!isCurrentlyLoading && !url.startsWith("about:")) {    return;  }  isCurrentlyLoading=false;  if (this.doClearHistory) {    view.clearHistory();    this.doClearHistory=false;  }  parentEngine.client.onPageFinishedLoading(url);}  }
class C{  private void addLabelRenderer(EsriLabelRendererInterface labelRendererObj){  logger.info("\t" + labelRendererObj.getName());  labelRendererMap.put(labelRendererObj.getName(),labelRendererObj);}  }
class C{  public boolean isBeaming(){  return beaming;}  }
class C{  @Override public void startContentModel(String elementName,Augmentations augmentations) throws XNIException {}  }
class C{  public int months(){  return this.months;}  }
class C{  public void updatePosition(ViewTransform viewTransform){  updateResizeHandlesPositions(viewTransform);  updateConstraintHandlesPositions();}  }
class C{  public boolean equals(IntervalFeature x){  if (x == null) {    return false;  }  return (this.chrom.equals(x.chrom) && this.from == x.from && this.to == x.to);}  }
class C{  public boolean isError(){  return state.equals(ERROR);}  }
class C{  public RequestHandle head(String url,ResponseHandlerInterface responseHandler){  return head(null,url,null,responseHandler);}  }
class C{  public Builder enableHighAccuracy(Boolean enableHighAccuracy){  this.enableHighAccuracy=enableHighAccuracy;  return this;}  }
class C{  public void addToSpellingCorrector(String contents){  if (contents == null) {    return;  }  ISpellingCorrector sc=Singleton.getSpellingCorrector();  if (contents.length() > this.MAXSPLITLENGTH) {    contents=contents.substring(0,MAXSPLITLENGTH);  }  List<String> splitString=Arrays.asList(contents.replaceAll("[^a-zA-Z0-9]"," ").toLowerCase().split(" "));  if (splitString.size() > 10000) {    splitString=splitString.subList(0,10000);  }  for (  String s : splitString) {    if (s.length() >= 3) {      sc.putWord(s);    }  }}  }
class C{  public static DedupQueueClientFactory forClusterAndHttpClient(String clusterName,Client client){  return new DedupQueueClientFactory(clusterName,client);}  }
class C{  static boolean isAnalyticsElement(Vertex vertex){  return CommonOLAP.analyticsElements.contains(getVertexType(vertex));}  }
class C{  public TIntArrayList(int capacity){  _data=new int[capacity];  _pos=0;}  }
class C{  public ProperFractionFormat(){  this(getDefaultNumberFormat());}  }
class C{  public LevyDistribution(final double mu,final double c){  super();  this.mu=mu;  this.c=c;  this.halfC=0.5 * c;}  }
class C{  public void changeSampleName(Integer pid,String newName){  sampleNames.set(pid,newName);}  }
class C{  public static Histogram add(Histogram x,double y){  return x.modifyEventCounters(null);}  }
class C{  public static boolean hasJellyBeanMr1(){  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1;}  }
class C{  @Override public Dfp abs(){  Dfp result=newInstance(this);  result.sign=1;  return result;}  }
class C{  private BackToTopUtils(Context c){  SharedPreferences sharedPreferences=PreferenceManager.getDefaultSharedPreferences(c);  backValue=sharedPreferences.getString(c.getString(R.string.key_back_to_top),"all");  notified=sharedPreferences.getBoolean(c.getString(R.string.key_notified_set_back_to_top),false);}  }
class C{  private boolean isReadyToBeExecutedLocked(JobStatus job){  final boolean jobReady=job.isReady();  final boolean jobPending=mPendingJobs.contains(job);  final boolean jobActive=isCurrentlyActiveLocked(job);  final boolean userRunning=mStartedUsers.contains(job.getUserId());  return userRunning && jobReady && !jobPending&& !jobActive;}  }
class C{  @Override public void update(List<EnvVar> dataList){  envVarList.clear();  if (dataList == null) {    for (    EnvVar envVar : builtInEnvVarMap.values()) {      envVarList.add(envVar);    }  } else {    for (    EnvVar envVar : dataList) {      if (builtInEnvVarMap.containsKey(envVar.getName())) {        envVarList.add(new EnvVar(envVar,true));      } else {        envVarList.add(new EnvVar(envVar,false));      }    }  }  setEnvironmentVariableValues();}  }
class C{  public static CompressionCodec.Type stringToType(String compressionString){  if (compressionString.equals(LZ4)) {    return CompressionCodec.Type.LZ4;  } else   if (compressionString.equals(NONE)) {    return CompressionCodec.Type.NONE;  } else {    return CompressionCodec.Type.UNKNOWN;  }}  }
class C{  @Override public double[] makeInverseCumulativeTestPoints(){  return new double[]{0,0.001d,0.010d,0.025d,0.050d,0.100d,0.999d,0.990d,0.975d,0.950d,0.900d,1};}  }
class C{  private static int removeWhiteSpace(char[] data){  if (data == null) {    return 0;  }  int newSize=0;  int len=data.length;  for (int i=0; i < len; i++) {    if (!isWhiteSpace(data[i])) {      data[newSize++]=data[i];    }  }  return newSize;}  }
class C{  public GroupsDeleteLinkQuery deleteLink(UserActor actor,int groupId,int linkId){  return new GroupsDeleteLinkQuery(getClient(),actor,groupId,linkId);}  }
class C{  public DelimitedTextTableWriter(String delimiter,boolean printHeader){  m_delim=delimiter;  m_printHeader=printHeader;}  }
class C{  public void addAssetsDirectory(@NotNull String path){  File directory=myFileStructure.createProjectDir(path);  myAssetsDirectories.add(directory);}  }
class C{  public void writerWait(Object notifier,long time){  try {synchronized (notifier) {      writeUnlock();      notifier.wait(time);    }  } catch (  InterruptedException e) {    throw new ConcurrentLockException("write wait interrupted in thread");  } finally {    writeLock();  }}  }
class C{  void offer(T obj){  _queue.put(obj,obj);}  }
class C{  public PhotosGetQueryWithExtended count(Integer value){  return unsafeParam("count",value);}  }
class C{  private void determineGestureOrientation(MotionEvent e1,MotionEvent e2){  float deltaX=Math.abs(e2.getX() - e1.getX());  float deltaY=Math.abs(e2.getY() - e1.getY());  mGestureOrientation=deltaY * VERTICAL_DETERMINATION_BOOST > deltaX ? GestureOrientation.VERTICAL : GestureOrientation.HORIZONTAL;  mHasDeterminedGestureOrientation=true;}  }
class C{  @Override public void run(){  time.increase();}  }
class C{  public Object parse(String text) throws DataParseException {  try {    StringTokenizer st=new StringTokenizer(text,"\"[](){}, ");    int[] array=new int[st.countTokens()];    for (int i=0; st.hasMoreTokens(); ++i) {      String tok=st.nextToken();      array[i]=Integer.parseInt(tok);    }    return array;  } catch (  NumberFormatException e) {    throw new DataParseException(e);  }}  }
class C{  public static StatefulHash sha512(){  return Hashes.createStateful(SimpleHashParameters.SHA512);}  }
class C{  @Transactional public AssetTextUnit createAssetTextUnit(Long assetExtractionId,String name,String content,String comment){  logger.debug("Adding AssetTextUnit for assetExtractionId: {}\nname: {}\ncontent: {}\ncomment: {}\n",assetExtractionId,name,content,comment);  AssetTextUnit assetTextUnit=new AssetTextUnit();  assetTextUnit.setAssetExtraction(assetExtractionRepository.getOne(assetExtractionId));  assetTextUnit.setName(name);  assetTextUnit.setContent(content);  assetTextUnit.setComment(comment);  assetTextUnit.setMd5(DigestUtils.md5Hex(name + content + comment));  assetTextUnit.setContentMd5(DigestUtils.md5Hex(content));  assetTextUnitRepository.save(assetTextUnit);  logger.trace("AssetTextUnit saved");  return assetTextUnit;}  }
class C{  PersistentRegistrarImpl(ActivationID activationID,MarshalledObject data) throws Exception {  super((String[])data.get(),activationID,true,null);}  }
class C{  public void logStatisticsAsTableExecutor(){  String tableInfo=collectExecutorStatistics();  if (null != tableInfo) {    LOGGER.statistic(tableInfo);  }}  }
class C{  public void removeTableBlocks(List<String> segmentToBeRemoved,AbsoluteTableIdentifier absoluteTableIdentifier){  Object lockObject=tableLockMap.get(absoluteTableIdentifier);  if (null == lockObject) {    return;  }  Map<String,Map<String,AbstractIndex>> map=tableSegmentMap.get(absoluteTableIdentifier);  if (null == map) {    return;  }  for (  String segmentId : segmentToBeRemoved) {    map.remove(segmentId);  }}  }
class C{  private static int resolveAnchoredChildGravity(int gravity){  return gravity == Gravity.NO_GRAVITY ? Gravity.CENTER : gravity;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_UNCOMPRESS_COMPRESSED_ITEM_SUCCEEDED(int nameId){  return new SM_SYSTEM_MESSAGE(1400452,new DescriptionId(nameId));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_QUEST_QIMSG_UPDATE(){  return new SM_SYSTEM_MESSAGE(1300611);}  }
class C{  public double AbsDistance(double[] x,double[] y){  double sum=0;  if (x.length != y.length) {    throw new RuntimeException("Given array lengths were not equal.");  }  int d=x.length;  for (int i=0; i < d; i++) {    sum=sum + Math.abs(x[i] - y[i]);  }  return sum;}  }
class C{  public ShoppingCartHelper(Delegator delegator,LocalDispatcher dispatcher,ShoppingCart cart){  this.dispatcher=dispatcher;  this.delegator=delegator;  this.cart=cart;  if (delegator == null) {    this.delegator=dispatcher.getDelegator();  }  if (dispatcher == null) {    throw new IllegalArgumentException("Dispatcher argument is null");  }  if (cart == null) {    throw new IllegalArgumentException("ShoppingCart argument is null");  }}  }
class C{  public void addAttributeNS(QName name,String type,String value){  int index=fLength;  if (fLength++ == fAttributes.length) {    Attribute[] attributes;    if (fLength < SIZE_LIMIT) {      attributes=new Attribute[fAttributes.length + 4];    } else {      attributes=new Attribute[fAttributes.length << 1];    }    System.arraycopy(fAttributes,0,attributes,0,fAttributes.length);    for (int i=fAttributes.length; i < attributes.length; i++) {      attributes[i]=new Attribute();    }    fAttributes=attributes;  }  Attribute attribute=fAttributes[index];  attribute.name.setValues(name);  attribute.type=type;  attribute.value=value;  attribute.nonNormalizedValue=value;  attribute.specified=false;  attribute.augs.removeAllItems();}  }
class C{  public EventLogException(ErrorCode errorCode,String message,Throwable cause){  super(errorCode,message,cause);}  }
