class C{  public boolean has(String key){  return this.map.containsKey(key);}  }
class C{  public boolean isDisplayField(int aDFieldID){  if (!isUseASP())   return true;  if (m_fieldAccess == null) {    m_fieldAccess=new ArrayList<Integer>(11000);    String sqlvalidate="SELECT AD_Field_ID " + "  FROM AD_Field " + " WHERE (   AD_Field_ID IN ( "+ "              SELECT f.AD_Field_ID "+ "                FROM ASP_Field f, ASP_Tab t, ASP_Window w, ASP_Level l, ASP_ClientLevel cl "+ "               WHERE w.ASP_Level_ID = l.ASP_Level_ID "+ "                 AND cl.AD_Client_ID = " + getAD_Client_ID() + "                 AND cl.ASP_Level_ID = l.ASP_Level_ID "+ "                 AND f.ASP_Tab_ID = t.ASP_Tab_ID "+ "                 AND t.ASP_Window_ID = w.ASP_Window_ID "+ "                 AND f.IsActive = 'Y' "+ "                 AND t.IsActive = 'Y' "+ "                 AND w.IsActive = 'Y' "+ "                 AND l.IsActive = 'Y' "+ "                 AND cl.IsActive = 'Y' "+ "                 AND f.ASP_Status = 'S') "+ "        OR AD_Tab_ID IN ( "+ "              SELECT t.AD_Tab_ID "+ "                FROM ASP_Tab t, ASP_Window w, ASP_Level l, ASP_ClientLevel cl "+ "               WHERE w.ASP_Level_ID = l.ASP_Level_ID "+ "                 AND cl.AD_Client_ID = "+ getAD_Client_ID()+ "                 AND cl.ASP_Level_ID = l.ASP_Level_ID "+ "                 AND t.ASP_Window_ID = w.ASP_Window_ID "+ "                 AND t.IsActive = 'Y' "+ "                 AND w.IsActive = 'Y' "+ "                 AND l.IsActive = 'Y' "+ "                 AND cl.IsActive = 'Y' "+ "                 AND t.AllFields = 'Y' "+ "                 AND t.ASP_Status = 'S') "+ "        OR AD_Field_ID IN ( "+ "              SELECT AD_Field_ID "+ "                FROM ASP_ClientException ce "+ "               WHERE ce.AD_Client_ID = "+ getAD_Client_ID()+ "                 AND ce.IsActive = 'Y' "+ "                 AND ce.AD_Field_ID IS NOT NULL "+ "                 AND ce.ASP_Status = 'S') "+ "       ) "+ "   AND AD_Field_ID NOT IN ( "+ "          SELECT AD_Field_ID "+ "            FROM ASP_ClientException ce "+ "           WHERE ce.AD_Client_ID = "+ getAD_Client_ID()+ "             AND ce.IsActive = 'Y' "+ "             AND ce.AD_Field_ID IS NOT NULL "+ "             AND ce.ASP_Status = 'H')"+ " ORDER BY AD_Field_ID";    PreparedStatement pstmt=null;    ResultSet rs=null;    try {      pstmt=DB.prepareStatement(sqlvalidate,get_TrxName());      rs=pstmt.executeQuery();      while (rs.next())       m_fieldAccess.add(rs.getInt(1));    } catch (    Exception e) {      log.log(Level.SEVERE,sqlvalidate,e);    } finally {      DB.close(rs,pstmt);    }  }  return (Collections.binarySearch(m_fieldAccess,aDFieldID) > 0);}  }
class C{  public SpinnerNumberModel(double value,double minimum,double maximum,double stepSize){  this(new Double(value),new Double(minimum),new Double(maximum),new Double(stepSize));}  }
class C{  public int startPc(int nth){  ExceptionTableEntry e=(ExceptionTableEntry)entries.get(nth);  return e.startPc;}  }
class C{  public void startElement(String ns,String localName,String name,Attributes atts) throws org.xml.sax.SAXException {  Element elem;  if ((null == ns) || (ns.length() == 0))   elem=m_doc.createElementNS(null,name); else   elem=m_doc.createElementNS(ns,name);  append(elem);  try {    int nAtts=atts.getLength();    if (0 != nAtts) {      for (int i=0; i < nAtts; i++) {        if (atts.getType(i).equalsIgnoreCase("ID"))         setIDAttribute(atts.getValue(i),elem);        String attrNS=atts.getURI(i);        if ("".equals(attrNS))         attrNS=null;        String attrQName=atts.getQName(i);        if (attrQName.startsWith("xmlns:") || attrQName.equals("xmlns")) {          attrNS="http://www.w3.org/2000/xmlns/";        }        elem.setAttributeNS(attrNS,attrQName,atts.getValue(i));      }    }    int nDecls=m_prefixMappings.size();    String prefix, declURL;    for (int i=0; i < nDecls; i+=2) {      prefix=(String)m_prefixMappings.elementAt(i);      if (prefix == null)       continue;      declURL=(String)m_prefixMappings.elementAt(i + 1);      elem.setAttributeNS("http://www.w3.org/2000/xmlns/",prefix,declURL);    }    m_prefixMappings.clear();    m_elemStack.push(elem);    m_currentNode=elem;  } catch (  java.lang.Exception de) {    throw new org.xml.sax.SAXException(de);  }}  }
class C{  public void run(){  int value=0;  Integer pid;  runDemo=true;  log.info("ELM DEMO thread started");  while (runDemo) {    try {      handleTelegram(RSP_ID.MODEL.toString().toCharArray());      setStatus(STAT.ECU_DETECT);      handleTelegram("SEARCHING...".toCharArray());      handleTelegram("7EA074100000000".toCharArray());      handleTelegram("7E8064100000000".toCharArray());      handleTelegram("7E9074100000000".toCharArray());      handleTelegram("7E9074100000000".toCharArray());      setStatus(STAT.ECU_DETECTED);      while (runDemo) {switch (service) {case OBD_SVC_READ_CODES:          handleTelegram("014".toCharArray());        handleTelegram("0:438920B920BD".toCharArray());      handleTelegram("1:C002242A246E02".toCharArray());    handleTelegram("2:36010101162453".toCharArray());  handleTelegram("41018C000000".toCharArray());Thread.sleep(500);break;case OBD_SVC_PENDINGCODES:handleTelegram("470920B920BD".toCharArray());handleTelegram("4709C002242A246E".toCharArray());handleTelegram("4709023601010116".toCharArray());handleTelegram("4709245300000000".toCharArray());handleTelegram("41010C000000".toCharArray());Thread.sleep(500);break;case OBD_SVC_PERMACODES:handleTelegram("014".toCharArray());handleTelegram("0:4A8920B920BD".toCharArray());handleTelegram("1:C002242A246E02".toCharArray());handleTelegram("2:36010101162453".toCharArray());handleTelegram("41018C000000".toCharArray());Thread.sleep(500);break;case OBD_SVC_DATA:case OBD_SVC_FREEZEFRAME:pid=getNextSupportedPid();if (pid != 0) {value++;value&=0xFF;handleTelegram(String.format(service == OBD_SVC_DATA ? "4%X%02X%02X%02X%02X%02X" : "4%X%02X00%02X%02X%02X%02X",service,pid,value,value,value,value).toCharArray());} else {int i;for (i=0; i < 0xE0; i+=0x20) handleTelegram(String.format(service == OBD_SVC_DATA ? "4%X%02XFFFFFFFF" : "4%X%02X00FFFFFFFF",service,i).toCharArray());handleTelegram(String.format(service == OBD_SVC_DATA ? "4%X%02XFFFFFFFE" : "4%X%02X00FFFFFFFE",service,i).toCharArray());}break;case OBD_SVC_VEH_INFO:pid=getNextSupportedPid();if (pid == 0) {handleTelegram("490054000000".toCharArray());}handleTelegram("013".toCharArray());handleTelegram("1:4902313233".toCharArray());handleTelegram("2:34353637383930".toCharArray());handleTelegram("3:41424344454647".toCharArray());handleTelegram("0:490401475350".toCharArray());handleTelegram("1:412D3132333435".toCharArray());handleTelegram("2:36373839303000".toCharArray());handleTelegram("490601234567".toCharArray());break;case OBD_SVC_NONE:break;default :handleTelegram(String.format("7F%02X11",service).toCharArray());Thread.sleep(500);break;}Thread.sleep(50);}} catch (Exception ex) {log.error(ex.getLocalizedMessage());}}log.info("ELM DEMO thread finished");}  }
class C{  public Source<Long> upTo(final long endExclusive){  return between(startInclusive,endExclusive - 1);}  }
class C{  public static final void writeListXml(List val,OutputStream out) throws XmlPullParserException, java.io.IOException {  XmlSerializer serializer=Xml.newSerializer();  serializer.setOutput(out,"utf-8");  serializer.startDocument(null,true);  serializer.setFeature("http://xmlpull.org/v1/doc/features.html#indent-output",true);  writeListXml(val,null,serializer);  serializer.endDocument();}  }
class C{  public ConnectorState currentState(int... partitions){  ConnectorState currentState=couchbaseReader.currentState();  if (partitions.length == 0) {    return currentState;  }  ConnectorState state=new ConnectorState();  for (  int partition : partitions) {    state.put(currentState.get((short)partition));  }  return state;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:16.008 -0500",hash_original_method="28936E7BC66C2ACF8A84332D0E4F56D6",hash_generated_method="A43046EEA3EDBAE0E71246E123FF2A01") public boolean isPeriodic(){  return period != 0;}  }
class C{  protected static double variance(double[] s,double[] sS,double[] sumOfWeights){  double var=0;  for (int i=0; i < s.length; i++) {    if (sumOfWeights[i] > 0) {      var+=singleVariance(s[i],sS[i],sumOfWeights[i]);    }  }  return var;}  }
class C{  private boolean isUserSignedIn(RequestAndResponse requestAndResponse){  return isInSingleUserMode() || requestAndResponse.request.getSession().getAttribute(sessionUserIdAttribute) != null;}  }
class C{  public <CTX>HtmlSanitizer.Policy build(HtmlStreamEventReceiver out,@Nullable HtmlChangeListener<? super CTX> listener,@Nullable CTX context){  return toFactory().apply(out,listener,context);}  }
class C{  @Override public boolean handleVoiceAction(Intent intent){  return false;}  }
class C{  public final LC minWidth(String width){  setWidth(LayoutUtil.derive(getWidth(),ConstraintParser.parseUnitValue(width,true),null,null));  return this;}  }
class C{  public ApiClient addDefaultHeader(String key,String value){  defaultHeaderMap.put(key,value);  return this;}  }
class C{  private void initProgressBar(){  mMax=100;  mProgress=0;  mSecondaryProgress=0;  mIndeterminate=false;  mOnlyIndeterminate=false;  mDuration=4000;  mBehavior=AlphaAnimation.RESTART;  mMinWidth=24;  mMaxWidth=48;  mMinHeight=24;  mMaxHeight=48;}  }
class C{  private Comparable<? super K> comparable(Object key) throws ClassCastException {  if (key == null)   throw new NullPointerException();  if (comparator != null)   return new ComparableUsingComparator<K>((K)key,comparator); else   return (Comparable<? super K>)key;}  }
class C{  String encode(){  StringBuilder sbuf;  sbuf=new StringBuilder();  sbuf.append(getHost());  sbuf.append('\n');  sbuf.append(getUser());  sbuf.append('\n');  sbuf.append(getPassword());  sbuf.append('\n');  sbuf.append(getPort());  sbuf.append('\n');  sbuf.append(true);  return sbuf.toString();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:32.340 -0500",hash_original_method="08275C5AA7086D8C8C86CDE1903B0FA3",hash_generated_method="46EAB98AB1F752B052993E5E77B9B081") public Map<String,List<String>> toMultimap(){  Map<String,List<String>> result=new TreeMap<String,List<String>>(FIELD_NAME_COMPARATOR);  for (int i=0; i < namesAndValues.size(); i+=2) {    String fieldName=namesAndValues.get(i);    String value=namesAndValues.get(i + 1);    List<String> allValues=new ArrayList<String>();    List<String> otherValues=result.get(fieldName);    if (otherValues != null) {      allValues.addAll(otherValues);    }    allValues.add(value);    result.put(fieldName,Collections.unmodifiableList(allValues));  }  if (statusLine != null) {    result.put(null,Collections.unmodifiableList(Collections.singletonList(statusLine)));  }  return Collections.unmodifiableMap(result);}  }
class C{  final boolean isUnmatchedRequest(){  return !isData && item == null;}  }
class C{  public double computeLocalFromPreviousObservations(int val1,int val2) throws Exception {  double logTerm=((double)jointCount[val1][val2]) / ((double)jCount[val2] * (double)iCount[val1]);  logTerm*=(double)observations;  double localMI=Math.log(logTerm) / log_2;  return localMI;}  }
class C{  public static List<String> readLines(Path self,String charset) throws IOException {  return IOGroovyMethods.readLines(newReader(self,charset));}  }
class C{  private void checkToken(String token){  for (int i=0; i < token.length(); i++) {    char ch=token.charAt(i);    if (!TOKEN.get(ch)) {      throw new IllegalArgumentException("Invalid token character '" + ch + "' in token \""+ token+ "\"");    }  }}  }
class C{  public void testAddOneDayOverDstForwardAdds24HoursAt0000(){  Calendar calendar=new GregorianCalendar(AMERICA_SAO_PAULO);  calendar.set(2011,9,15,0,0);  double hoursSinceEpoch=hoursSinceEpoch(calendar);  calendar.add(Calendar.DATE,1);  assertEquals(24.0,hoursSinceEpoch(calendar) - hoursSinceEpoch);  assertCalendarEquals(calendar,2011,9,16,1,0);}  }
class C{  public ByteRange(final long start,final long end,final long total){  this.start=start;  this.end=end;  length=end - start + 1;  this.total=total;}  }
class C{  public static String quoteIdentifier(String s){  int length=s.length();  StringBuilder buff=new StringBuilder(length + 2);  buff.append('\"');  for (int i=0; i < length; i++) {    char c=s.charAt(i);    if (c == '"') {      buff.append(c);    }    buff.append(c);  }  return buff.append('\"').toString();}  }
class C{  private DateTimePrinter requirePrinter(){  DateTimePrinter printer=iPrinter;  if (printer == null) {    throw new UnsupportedOperationException("Printing not supported");  }  return printer;}  }
class C{  public static void createImpl(){  impl=new InterestListEndpointDUnitTest();}  }
class C{  @Override public void buildEvaluator(Instances data) throws Exception {  getCapabilities().testWithFail(data);  m_trainInstances=data;}  }
class C{  public static Vector3f cartesianToSpherical(Vector3f cartCoords,Vector3f store){  if (cartCoords.x == 0) {    cartCoords.x=FastMath.FLT_EPSILON;  }  store.x=FastMath.sqrt((cartCoords.x * cartCoords.x) + (cartCoords.y * cartCoords.y) + (cartCoords.z * cartCoords.z));  store.y=FastMath.atan(cartCoords.z / cartCoords.x);  if (cartCoords.x < 0) {    store.y+=FastMath.PI;  }  store.z=FastMath.asin(cartCoords.y / store.x);  return store;}  }
class C{  public void reset(){  for (  final Counter counter : counters.values()) {    counter.reset();  }}  }
class C{  private List<String> splitArgs(String arguments){  List<String> retval=new ArrayList<String>();  arguments=arguments.trim();  boolean isWindows=System.getProperty("os.name").toLowerCase().startsWith("win");  boolean isMacOrUnix=!isWindows;  int i=0;  while (i < arguments.length()) {    char ch=arguments.charAt(i);    if (ch == ' ' || ch == '\t') {      i++;    } else     if (ch == '"' || (isMacOrUnix && ch == '\'')) {      char quote=ch;      int nextQuote=arguments.indexOf(quote,i + 1);      if (nextQuote == -1) {        retval.add(arguments.substring(i + 1));        return retval;      } else {        retval.add(arguments.substring(i + 1,nextQuote));        i=nextQuote + 1;      }    } else {      int startPos=i;      while (i < arguments.length()) {        ch=arguments.charAt(i);        if (ch == ' ' || ch == '\t') {          break;        }        i++;      }      retval.add(arguments.substring(startPos,i));    }  }  return retval;}  }
class C{  public ResultVO validateWithRSASignCheck(BaseParam param,Logger logger) throws Exception {  String clientId=SpringSecurityUtils.getCurrentClientId();  if (!signHelper.signCheck(getPublicKeyByClientId(clientId),param)) {    return resultHelper.infoResp(logger,ErrorType.SYS0004,ErrorType.SYS0004.description());  } else   return null;}  }
class C{  public void registerInput(String varName,JavaPairRDD<MatrixIndexes,MatrixBlock> rdd,long rlen,long clen,int brlen,int bclen,long nnz) throws DMLRuntimeException {  if (rlen == -1 || clen == -1) {    throw new DMLRuntimeException("The metadata is required in registerInput for binary format");  }  MatrixCharacteristics mc=new MatrixCharacteristics(rlen,clen,brlen,bclen,nnz);  registerInput(varName,rdd,mc);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case SGraphPackage.TRANSITION__TRIGGER:    if (resolve)     return getTrigger();  return basicGetTrigger();case SGraphPackage.TRANSITION__EFFECT:if (resolve) return getEffect();return basicGetEffect();case SGraphPackage.TRANSITION__PROPERTIES:return getProperties();case SGraphPackage.TRANSITION__DOCUMENTATION:return getDocumentation();case SGraphPackage.TRANSITION__TARGET:if (resolve) return getTarget();return basicGetTarget();case SGraphPackage.TRANSITION__SOURCE:if (resolve) return getSource();return basicGetSource();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public double weightedAreaUnderROC(){  return m_delegate.weightedAreaUnderROC();}  }
class C{  static public void assertEquals(String message,Object expected,Object actual){  if (expected == null && actual == null) {    return;  }  if (expected != null && expected.equals(actual)) {    return;  }  failNotEquals(message,expected,actual);}  }
class C{  public AffineTransformation rotate(double sinTheta,double cosTheta){  compose(rotationInstance(sinTheta,cosTheta));  return this;}  }
class C{  public static boolean match(String patternText,ParseTreeNode specimen){  return match(patternText,specimen,makeBindings());}  }
class C{  public static <T,K,A,D>Flux<Tuple2<K,D>> grouped(Flux<T> flux,Function<? super T,? extends K> classifier){  return Flux.fromIterable(null);}  }
class C{  public void testMultipleTerms() throws Exception {  query=new PhraseQuery(2,"field","one","three","five");  ScoreDoc[] hits=searcher.search(query,1000).scoreDocs;  assertEquals("two total moves",1,hits.length);  QueryUtils.check(random(),query,searcher);  query=new PhraseQuery(5,"field","five","three","one");  hits=searcher.search(query,1000).scoreDocs;  assertEquals("slop of 5 not close enough",0,hits.length);  QueryUtils.check(random(),query,searcher);  query=new PhraseQuery(6,"field","five","three","one");  hits=searcher.search(query,1000).scoreDocs;  assertEquals("slop of 6 just right",1,hits.length);  QueryUtils.check(random(),query,searcher);}  }
class C{  protected void closingCancel(){}  }
class C{  public boolean isForce(){  return force;}  }
class C{  private void hideOfflineMessage(){  if (webview != null) {    webview.setVisibility(View.VISIBLE);  }  TextView offlineModeTv=(TextView)findViewById(R.id.offline_mode_message);  if (offlineModeTv != null) {    offlineModeTv.setVisibility(View.GONE);  }}  }
class C{  private static boolean isLocalUdpPortFree(int port){  boolean res=false;  try {    DatagramConnection conn=NetworkRessourceManager.createDatagramConnection();    conn.open(port);    conn.close();    res=true;  } catch (  IOException e) {    res=false;  }  return res;}  }
class C{  boolean addSvfRestriction(OwlClass r){  return svfRestrictions.add(r);}  }
class C{  private void addTable(MetaClass metaClass,MetaProperty childMeta){  MetaClass meta=childMeta.getRange().asClass();  if (!attrViewPermitted(metaClass,childMeta.getName()) || !entityOpPermitted(meta,EntityOp.READ)) {    return;  }  if (isNew && childMeta.getType().equals(MetaProperty.Type.ASSOCIATION)) {    return;  }  BoxLayout vbox=componentsFactory.createComponent(VBoxLayout.class);  vbox.setWidth("100%");  CollectionDatasource propertyDs=(CollectionDatasource)datasources.get(childMeta.getName());  Label label=componentsFactory.createComponent(Label.class);  label.setValue(getPropertyCaption(metaClass,childMeta));  label.setStyleName("h2");  Table table=componentsFactory.createComponent(Table.class);  table.setMultiSelect(true);  table.setFrame(frame);  LinkedList<Table.Column> nonSystemPropertyColumns=new LinkedList<>();  LinkedList<Table.Column> systemPropertyColumns=new LinkedList<>();  for (  MetaProperty metaProperty : meta.getProperties()) {    if (metaProperty.getRange().isClass())     continue;    Table.Column column=new Table.Column(meta.getPropertyPath(metaProperty.getName()));    if (!metadata.getTools().isSystem(metaProperty)) {      column.setCaption(getPropertyCaption(meta,metaProperty));      nonSystemPropertyColumns.add(column);    } else {      column.setCaption(metaProperty.getName());      systemPropertyColumns.add(column);    }    if (metaProperty.getJavaType().equals(String.class)) {      column.setMaxTextLength(MAX_TEXT_LENGTH);    }  }  for (  Table.Column column : nonSystemPropertyColumns)   table.addColumn(column);  for (  Table.Column column : systemPropertyColumns)   table.addColumn(column);  table.setDatasource(propertyDs);  propertyDs.refresh();  ButtonsPanel propertyButtonsPanel=createButtonsPanel(childMeta,propertyDs,table);  table.setButtonsPanel(propertyButtonsPanel);  RowsCount rowsCount=componentsFactory.createComponent(RowsCount.class);  rowsCount.setDatasource(propertyDs);  table.setRowsCount(rowsCount);  table.setWidth("100%");  vbox.setHeight(themeConstants.get("cuba.gui.EntityInspectorEditor.tableContainer.height"));  vbox.add(label);  vbox.add(table);  vbox.expand(table);  tablesBox.add(vbox);  tables.add(table);}  }
class C{  protected String encodeBody(){  StringBuffer encoding=new StringBuffer();  if (uri != null) {    encoding.append(LESS_THAN).append(uri.encode()).append(GREATER_THAN);  } else   if (string != null) {    encoding.append(string);  }  if (!parameters.isEmpty()) {    encoding.append(SEMICOLON).append(parameters.encode());  }  return encoding.toString();}  }
class C{  public boolean isEmpty(){  return extOrdering.isEmpty();}  }
class C{  protected String processPostRequest(HttpServletRequest request){  com.pearson.statsagg.webui.CreateNotificationGroup createNotificationGroup=new com.pearson.statsagg.webui.CreateNotificationGroup();  JsonObject suspensionJsonObject=Helper.getJsonObjectFromRequestBody(request);  String result=createNotificationGroup.parseAndAlterNotificationGroup(suspensionJsonObject);  return Helper.createSimpleJsonResponse(result);}  }
class C{  public boolean isStateActive(State state){switch (state) {case main_region_A:    return stateVector[0] == State.main_region_A;case main_region_B:  return stateVector[0] == State.main_region_B;default :return false;}}  }
class C{  public java.sql.CallableStatement prepareCall(String sql,int resultSetType,int resultSetConcurrency) throws SQLException {  checkClosed();  try {    return CallableStatementWrapper.getInstance(this,this.pooledConnection,this.mc.prepareCall(sql,resultSetType,resultSetConcurrency));  } catch (  SQLException sqlException) {    checkAndFireConnectionError(sqlException);  }  return null;}  }
class C{  public void put(String key,File file,String contentType) throws FileNotFoundException {  if (key != null && file != null) {    fileParams.put(key,new FileWrapper(file,contentType));  }}  }
class C{  public static void limpar(TextArea... no){  for (  TextArea campo : no) {    campo.setText("");  }}  }
class C{  private ArrayList readCredentials(String passwordFileName) throws IOException {  final Properties pws=new Properties();  final ArrayList result=new ArrayList();  final File f=new File(passwordFileName);  if (!f.exists())   return result;  FileInputStream fin=new FileInputStream(passwordFileName);  try {    pws.load(fin);  }  finally {    fin.close();  }  for (Enumeration en=pws.propertyNames(); en.hasMoreElements(); ) {    final String[] cred=new String[2];    cred[0]=(String)en.nextElement();    cred[1]=pws.getProperty(cred[0]);    result.add(cred);  }  return result;}  }
class C{  public void printHelp(){  HelpFormatter helpFormatter=new HelpFormatter();  helpFormatter.setSyntaxPrefix(Messages.SYNTAX_PREFIX);  String newLine=helpFormatter.getNewLine();  String header=newLine + Messages.TAILOR_DESC + newLine+ newLine+ Messages.TAILOR_ARGS_INFO+ newLine+ newLine+ Messages.OPTIONS_PREFIX;  helpFormatter.setLongOptSeparator("=");  helpFormatter.printHelp(Messages.HELP_WIDTH,Messages.CMD_LINE_SYNTAX,header,this.options,"");}  }
class C{  public static List<Element> createDivTree(){  List<Element> divs=new ArrayList<Element>();  divs.add(createDiv(divs.size()));  createDivTreeImpl(divs.get(0),0,divs);  return divs;}  }
class C{  public void fireDataChangeEvent(int index,int type){  if (listeners == null || listeners.size() == 0) {    return;  }  boolean isEdt=Display.getInstance().isEdt();  if (isEdt && listeners.size() == 1) {    DataChangedListener a=(DataChangedListener)listeners.get(0);    a.dataChanged(type,index);    return;  }  DataChangedListener[] array;synchronized (this) {    array=new DataChangedListener[listeners.size()];    int alen=array.length;    for (int iter=0; iter < alen; iter++) {      array[iter]=(DataChangedListener)listeners.get(iter);    }  }  if (isEdt) {    fireDataChangeSync(array,type,index);  } else {    dataChangeListenerArray=true;    Runnable cl=new CallbackClass(array,new int[]{type,index});    if (blocking) {      Display.getInstance().callSeriallyAndWait(cl);    } else {      Display.getInstance().callSerially(cl);    }  }}  }
class C{  DateTimePrintContext(TemporalAccessor temporal,DateTimeFormatter formatter){  super();  this.temporal=adjust(temporal,formatter);  this.formatter=formatter;}  }
class C{  public String randomNegativeWhole(Object olength){  return "-" + randomPositiveWhole(olength);}  }
class C{  public static IntsRef toIntsRef(BytesRef input,IntsRefBuilder scratch){  scratch.clear();  for (int i=0; i < input.length; i++) {    scratch.append(input.bytes[i + input.offset] & 0xFF);  }  return scratch.get();}  }
class C{  @Deprecated static public boolean isXMLID(String name){  int ln=name.length();  for (int i=0; i < ln; i++) {    char c=name.charAt(i);    if (i == 0 && (c == '-' || c == '.' || Character.isDigit(c))) {      return false;    }    if (!Character.isLetterOrDigit(c) && c != '_' && c != '-' && c != '.') {      if (c == ':') {        if (i + 1 < ln && name.charAt(i + 1) == ':') {          return false;        }      } else {        return false;      }    }  }  return true;}  }
class C{  public void bulkLoad(DBIDs ids){  if (ids.size() == 0) {    return;  }  assert (root == null) : "Tree already initialized.";  DBIDIter it=ids.iter();  DBID first=DBIDUtil.deref(it);  ModifiableDoubleDBIDList candidates=DBIDUtil.newDistanceDBIDList(ids.size() - 1);  for (it.advance(); it.valid(); it.advance()) {    candidates.add(distance(first,it),it);  }  root=bulkConstruct(first,Integer.MAX_VALUE,0.,candidates);}  }
class C{  private boolean startWorkflow(int AD_Workflow_ID){  log.fine(AD_Workflow_ID + " - " + m_pi);  boolean started=false;  if (DB.isRemoteProcess()) {    log.info("trying to running on the server");    Server server=CConnection.get().getServer();    try {      if (server != null) {        log.info("running on the server");        m_pi=server.workflow(m_wscctx,m_pi,AD_Workflow_ID);        log.finest("server => " + m_pi);        started=true;      }    } catch (    Exception ex) {      log.log(Level.SEVERE,"AppsServer error",ex);      started=false;    }  }  if (!started && !m_IsServerProcess) {    log.info("running locally");    MWorkflow wf=MWorkflow.get(m_wscctx,AD_Workflow_ID);    MWFProcess wfProcess=null;    if (m_pi.isBatch())     wfProcess=wf.start(m_pi); else     wfProcess=wf.startWait(m_pi);    started=wfProcess != null;  }  return started;}  }
class C{  public void putSharedPreference(String preferenceName,boolean val){  SharedPreferences pref=mContext.getSharedPreferences(preferenceName,0);  SharedPreferences.Editor editor=pref.edit();  editor.clear();  editor.putBoolean(preferenceName,val);  editor.apply();}  }
class C{  public static String remove(String seq,char toRemove){  StringBuilder sb=new StringBuilder();  for (int i=0; i < seq.length(); i++) {    final char ch=seq.charAt(i);    if (ch != toRemove) {      sb.append(ch);    }  }  return sb.toString();}  }
class C{  @Override protected void initViews(Bundle savedInstanceState){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:02.912 -0500",hash_original_method="2FDA3671927B417EA64F28FFDD680773",hash_generated_method="4C5598F3753C2A0079DD4D0DD691D05A") public void removeComment(){  comment=null;}  }
class C{  public void disconnectNode(short nodeId){synchronized (connections) {    Short n=Short.valueOf(nodeId);    MessageWindow mw=messageWindows.get(n);    if (mw != null) {      mw.lock.lock();      mw.disconnected=true;      try {        mw.full.signalAll();        messageWindows.remove(n);      }  finally {        mw.lock.unlock();      }    }    NodeConnection nc=connections.get(nodeId);    if (nc != null) {      nc.nuke();    }    connections.remove(nodeId);  }}  }
class C{  public Disjunction(){}  }
class C{  public void openPopFile(){  try {    this.editing=true;    controller.openPopulationFile();    this.controller.getVisualizer().getPrimaryShapeRenderLayer().updatePixelCoordinates(true);    updateMask();    this.controller.paintLayers();  }  finally {    this.editing=false;  }}  }
class C{  @SuppressWarnings("unchecked") private <T>T lookDependenciesAmongDependants(final DependencyQuery<T> query){  for (int i=dependants.size() - 1; i >= 0; i--) {    final Object dependant=dependants.get(i);    if (query.isMatchingType(dependant.getClass())) {      dependants.remove(dependant);      query.add((T)dependant);      return cache(query.getDependencyType(),dependant);    }  }  return null;}  }
class C{  public void mutableAdd(Vec x_t){  mutableAdd(1.0,x_t);}  }
class C{  public JUnitTestParsedChromosomeFactory(ChromosomeFactory<TestChromosome> defaultFactory){  this.defaultFactory=defaultFactory;  if (userTests.isEmpty())   userTests.addAll(filter(readTestCases()));  LoggingUtils.getEvoLogger().info("* Found " + userTests.size() + " relevant tests");}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);}  }
class C{  public void addEdgeConnector(){  numEdgeConnectors++;  String name="";  boolean duplicate=true;  while (duplicate) {    name="EC" + numEdgeConnectors;    if (finder.findPositionablePointByName(name) == null) {      duplicate=false;    }    if (duplicate) {      numEdgeConnectors++;    }  }  PositionablePoint o=new PositionablePoint(name,PositionablePoint.EDGE_CONNECTOR,currentPoint,this);  pointList.add(o);  setDirty(true);}  }
class C{  private static BitMatrix extractPureBits(BitMatrix image) throws NotFoundException {  int[] leftTopBlack=image.getTopLeftOnBit();  int[] rightBottomBlack=image.getBottomRightOnBit();  if (leftTopBlack == null || rightBottomBlack == null) {    throw NotFoundException.getNotFoundInstance();  }  int moduleSize=moduleSize(leftTopBlack,image);  int top=leftTopBlack[1];  int bottom=rightBottomBlack[1];  int left=findPatternStart(leftTopBlack[0],top,image);  int right=findPatternEnd(leftTopBlack[0],top,image);  int matrixWidth=(right - left + 1) / moduleSize;  int matrixHeight=(bottom - top + 1) / moduleSize;  if (matrixWidth <= 0 || matrixHeight <= 0) {    throw NotFoundException.getNotFoundInstance();  }  int nudge=moduleSize >> 1;  top+=nudge;  left+=nudge;  BitMatrix bits=new BitMatrix(matrixWidth,matrixHeight);  for (int y=0; y < matrixHeight; y++) {    int iOffset=top + y * moduleSize;    for (int x=0; x < matrixWidth; x++) {      if (image.get(left + x * moduleSize,iOffset)) {        bits.set(x,y);      }    }  }  return bits;}  }
class C{  public T caseNewTarget(NewTarget object){  return null;}  }
class C{  void write(ByteCodeWriter out) throws IOException {  out.write(ConstantPool.CP_METHOD_REF);  out.writeShort(_classIndex);  out.writeShort(_nameAndTypeIndex);}  }
class C{  public synchronized void start() throws IllegalStateException, IOException {  configure();  if (!mStreaming) {    super.start();  }}  }
class C{  public ComplexFIRFilter(float[] coefficients,float gain){  mIFilter=new RealFIRFilter(coefficients,gain);  mQFilter=new RealFIRFilter(coefficients,gain);}  }
class C{  public void onResume(){  if (mInitializationComplete) {    mActivityDelegate.onResumeWithNative();  } else {    mOnResumePending=true;  }}  }
class C{  public SheetEvent(JSheet source,JOptionPane optionPane,int option,@Nullable Object value,@Nullable Object inputValue){  super(source);  this.pane=optionPane;  this.option=option;  this.value=value;  this.inputValue=inputValue;}  }
class C{  public boolean isTimeIncluded(long timeStamp){  if (timeStamp <= 0) {    throw new IllegalArgumentException("timeStamp must be greater 0");  }  if (baseCalendar != null) {    if (baseCalendar.isTimeIncluded(timeStamp) == false) {      return false;    }  }  return true;}  }
class C{  public ArmInstruction(ArmInstructionSet.InstructionFormat instructionFormat,String name,String displayFormat,String action,FlowType flowType,boolean isConditional,SimulationCode simulationCode){  super(name,displayFormat,null,null,action,flowType,isConditional,DelaySlotType.NONE,simulationCode);  this.instructionFormat=instructionFormat;}  }
class C{  protected synchronized void removeProjectionListener(ProjectionListener l){  projectionSupport.remove(l);}  }
class C{  public InlineQueryResultCachedVideoBuilder replyMarkup(InlineReplyMarkup replyMarkup){  this.reply_markup=replyMarkup;  return this;}  }
class C{  public static long generate(String value){  int len=value.length();  long crc=0;  for (int i=0; i < len; i++)   crc=next(crc,value.charAt(i));  return crc;}  }
class C{  public void testWeightedTerm() throws Exception {  Map<String,Float> weights=new LinkedHashMap<>();  weights.put("field0",5f);  weights.put("field1",10f);  BooleanQuery.Builder expected=new BooleanQuery.Builder();  Query field0=new TermQuery(new Term("field0","foo"));  field0=new BoostQuery(field0,5f);  expected.add(field0,Occur.SHOULD);  Query field1=new TermQuery(new Term("field1","foo"));  field1=new BoostQuery(field1,10f);  expected.add(field1,Occur.SHOULD);  Analyzer analyzer=new MockAnalyzer(random());  SimpleQueryParser parser=new SimpleQueryParser(analyzer,weights);  assertEquals(expected.build(),parser.parse("foo"));}  }
class C{  public boolean isMinYSet(int scale){  return mMinY[scale] != MathHelper.NULL_VALUE;}  }
class C{  ActiveStack(){  myStack=new Stack<String>();  myPersistentStack=new Stack<String>();}  }
class C{  public boolean isPseudoInstanceOf(String pseudoClass){  if (pseudoClass.equals("first-child")) {    Node n=getPreviousSibling();    while (n != null && n.getNodeType() != ELEMENT_NODE) {      n=n.getPreviousSibling();    }    return n == null;  }  return false;}  }
class C{  public Member(String id,Address address,Map<String,String> metadata){  checkArgument(id != null);  checkArgument(address != null);  this.id=id;  this.address=address;  this.metadata=metadata != null ? new HashMap<>(metadata) : Collections.emptyMap();}  }
class C{  public static boolean isAnyVariable(String key){  if (StringUtils.isBlank(key)) {    return false;  }  if (key.charAt(0) == identifierChar) {    return true;  }  if (key.indexOf("#{") == 0 && key.indexOf("}") == key.length() - 1) {    return true;  }  return false;}  }
class C{  public LdapConfigVO(){  super();  this.map=new HashMap();}  }
class C{  @Override public void changeJavaVersion(Application application,String javaVersion) throws CheckException, ServiceException {  logger.info("Starting changing to java version " + javaVersion + ", the application "+ application.getName());  try {  } catch (  Exception e) {    throw new ServiceException(application + ", javaVersion:" + javaVersion,e);  }}  }
class C{  private String buildMetroProintPlacementStatusString(){  StringBuffer placementStatusBuf=new StringBuffer();  if (placementStatus != null) {    placementStatusBuf.append(String.format("%nPrimary Cluster"));    placementStatusBuf.append(placementStatus.toString(dbClient));  }  if (secondaryPlacementStatus != null) {    placementStatusBuf.append(String.format("%nSecondary Cluster"));    placementStatusBuf.append(secondaryPlacementStatus.toString(dbClient));  }  return placementStatusBuf.toString();}  }
class C{  protected static void registerJdbcType(int typeCode,String typeName,JdbcTypeCategoryEnum category){  Integer typeId=new Integer(typeCode);  _typeNameToTypeCode.put(typeName.toUpperCase(),typeId);  _typeCodeToTypeName.put(typeId,typeName.toUpperCase());  Set<Integer> typesInCategory=_typesPerCategory.get(category);  if (typesInCategory == null) {    typesInCategory=new HashSet<Integer>();    _typesPerCategory.put(category,typesInCategory);  }  typesInCategory.add(typeId);}  }
class C{  private Collator createFromLocale(String localeID){  return Collator.getInstance(new ULocale(localeID));}  }
class C{  public void refreshData(){  if (this.node == null || getDetails() == null) {    return;  }  this.updateText();  this.updateList();  this.updateFields();  this.updateImage();}  }
class C{  public void invalidate(){  invalidate(true);}  }
class C{  public AuthenticationNotSupportedException(String explanation){  super(explanation);}  }
class C{  public static boolean pathExists(String path){  return ((new File(path)).exists());}  }
class C{  protected boolean isDisplayShowTitleEnabled(){  return true;}  }
class C{  public WrappedSyntaxView(Element elem){  super(elem,Y_AXIS);  s=new Segment();  drawSeg=new Segment();  tempRect=new Rectangle();}  }
class C{  @Override public Tab createFrozenTab(TabState state,int id,int index){  return ChromeTab.createFrozenTabFromState(id,null,state.isIncognito(),null,Tab.INVALID_TAB_ID,state);}  }
class C{  public SerializerWriteBasicComposed(Datas[]... classes){  m_classes=classes;}  }
class C{  public void fireTextAdded(final NetworkTextObject added){  for (  TextListener listener : textListeners) {    listener.textAdded(added);  }}  }
class C{  void fireValueChanged(){  for (  final PWRowGroup rowGroup : this.rowGroups) {    rowGroup.enableOrDisable();  }  for (  final PWWidget widget : this.widgets) {    widget.enableOrDisable();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 15:47:29.009 -0500",hash_original_method="4C3E3E79257D1C7DB00CE411F8327D07",hash_generated_method="3054D1C06BD5E4739C41763303021BC5") @DSSafe(DSCat.SAFE_OTHERS) public static byte[] sha384(byte[] data){  return getSha384Digest().digest(data);}  }
class C{  public final Instances resampleWithWeights(Random random){  double[] weights=new double[numInstances()];  boolean foundOne=false;  for (int i=0; i < weights.length; i++) {    weights[i]=instance(i).weight();    if (!Utils.eq(weights[i],weights[0])) {      foundOne=true;    }  }  if (foundOne) {    return resampleWithWeights(random,weights);  } else {    return new Instances(this);  }}  }
class C{  private PieData generateDataPie(int cnt){  ArrayList<Entry> entries=new ArrayList<Entry>();  for (int i=0; i < 4; i++) {    entries.add(new Entry((int)(Math.random() * 70) + 30,i));  }  PieDataSet d=new PieDataSet(entries,"");  d.setSliceSpace(2f);  d.setColors(ColorTemplate.VORDIPLOM_COLORS);  PieData cd=new PieData(getQuarters(),d);  return cd;}  }
class C{  public boolean encrypt(){  return encrypt;}  }
class C{  public void terminate(){  currentShortcut=null;}  }
class C{  public void storeOriginals(){  mStartingStartTrim=mStartTrim;  mStartingEndTrim=mEndTrim;  mStartingRotation=mRotation;}  }
class C{  public void removeVetoableChangeListener(String propertyName,VetoableChangeListener in_vcl){  beanContextChildSupport.removeVetoableChangeListener(propertyName,in_vcl);}  }
class C{  public AttributeWeights doWork(Model model,ExampleSet exampleSet) throws OperatorException {  modelInput.receive(model);  getExampleSetInputPort().receive(exampleSet);  doWork();  return getWeightsOutputPort().getData(AttributeWeights.class);}  }
class C{  public Property dayOfWeek(){  return new Property(this,getChronology().dayOfWeek());}  }
class C{  public ToolTipControl(String field){  this(new String[]{field});}  }
class C{  @Override public int read(){  return -1;}  }
class C{  protected boolean isAddRemoveModifiable(){  return true;}  }
class C{  public int compare(Tuple<Integer,Integer> fromEdge,Tuple<Integer,Integer> toEdge){  Integer fromSource=fromEdge.getFirst();  Integer fromDestination=fromEdge.getSecond();  Integer toSource=toEdge.getFirst();  Integer toDestination=toEdge.getSecond();  if ((fromSource.intValue() < toSource.intValue()) | ((fromSource.equals(toSource)) && (fromDestination.intValue() < toDestination.intValue())) | (fromSource.intValue() > toSource.intValue())) {    return -1;  } else   if ((fromSource.equals(toSource)) && (fromDestination.intValue() > toDestination.intValue())) {    return 1;  } else   if ((fromSource.equals(toSource)) && (fromDestination.equals(toDestination))) {    return 0;  } else   return 1;}  }
class C{  private String createJson(User user){  return "{\"username\": \"" + user.getLogin() + "\","+ " \"password1\": \""+ user.getPassword()+ "\","+ " \"password2\": \""+ user.getPassword()+ "\","+ " \"fullname\": \""+ user.getFirstName()+ " "+ user.getLastName()+ "\","+ " \"email\": \""+ user.getEmail()+ "\"}";}  }
class C{  public Response updateSystemProperty(SystemProperty property){  return restClient.put("system/properties/" + property.getKey(),property,new HashMap<String,String>());}  }
class C{  public static String marshalSchemas(DbSchemas schemas,String dbSchemaVersion){  try {    JAXBContext jc=JAXBContext.newInstance(DbSchemas.class);    Marshaller m=jc.createMarshaller();    if (dbSchemaVersion != null) {      m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,true);      m.setProperty("com.sun.xml.internal.bind.xmlHeaders",String.format(BANNER,DbSchemaChecker.class.getName(),dbSchemaVersion,(new Date()).toString()));    }    StringWriter sw=new StringWriter();    m.marshal(schemas,sw);    return sw.toString();  } catch (  JAXBException e) {    log.error("Failed to marshal:",e);  }  return null;}  }
class C{  public void sample(int column,String value){  rangeCheck(column,true);  ((ParserFactory)m_factories.get(column)).sample(value);}  }
class C{  @Override public boolean supportsFullOuterJoins(){  debugCodeCall("supportsFullOuterJoins");  return false;}  }
class C{  public static ConditionOperand LOWER_EQUAL(){  return new ConditionOperand(LOWER_EQUAL);}  }
class C{  public static int daysInChineseMonth(int y,int m){  int index=y - baseChineseYear + baseIndex;  int v=0;  int l=0;  int d=30;  if (1 <= m && m <= 8) {    v=chineseMonths[2 * index];    l=m - 1;    if (((v >> l) & 0x01) == 1) {      d=29;    }  } else   if (9 <= m && m <= 12) {    v=chineseMonths[2 * index + 1];    l=m - 9;    if (((v >> l) & 0x01) == 1) {      d=29;    }  } else {    v=chineseMonths[2 * index + 1];    v=(v >> 4) & 0x0F;    if (v != Math.abs(m)) {      d=0;    } else {      d=29;      for (int i=0; i < bigLeapMonthYears.length; i++) {        if (bigLeapMonthYears[i] == index) {          d=30;          break;        }      }    }  }  return d;}  }
class C{  @SuppressWarnings("unused") public boolean removeFooterItem(View v){  return mFooterItems.remove(v) && mAdapter != null && mAdapter.removeFooterItem(v);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:07.183 -0500",hash_original_method="122ACDBA22A4D3B6B9E93FB00E1FAEC7",hash_generated_method="2CCCACA7DE24F82A4B382CB9AEC20A70") public void translateLayoutParamsInAppWindowToScreen(LayoutParams params){  params.scale(applicationScale);}  }
class C{  public static <T>WrappingFunctor<T> asFunctor(final Object o){  return new FunctorWrapper<>(o);}  }
class C{  @Override public RegexpQueryBuilder boost(float boost){  this.boost=boost;  return this;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public HashInterner(){  this(100);}  }
class C{  static RegisterOperand InsertLoadOffset(Instruction s,IR ir,Operator operator,TypeReference type,Operand reg2,Offset offset,Operand guard){  return InsertLoadOffset(s,ir,operator,type,reg2,offset,null,guard);}  }
class C{  public String locator(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  if (value == null)   return "";  int M_Product_ID=Env.getContextAsInt(ctx,WindowNo,"M_Product_ID");  checkQtyAvailable(ctx,mTab,WindowNo,M_Product_ID,null);  return "";}  }
class C{  public void onScreenChange(int currentScreen,int lastScreen){  ImageView[] points=platformGridView.points;  for (int i=0; i < points.length; i++) {    points[i].setImageBitmap(platformGridView.grayPoint);  }  points[currentScreen].setImageBitmap(platformGridView.bluePoint);}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  if (!WebEnv.initWeb(config))   throw new ServletException("WLocation.init");}  }
class C{  protected SVGOMFEDistantLightElement(){}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public static void main(String[] args){  if (args.length != 2) {    System.out.println("TaggingClient [inputfile] [outputfile]");    return;  }  try {    TaggingClient client=new TaggingClient("localhost",2929);    BufferedReader reader=new BufferedReader(new InputStreamReader(new FileInputStream(args[0]),"UTF-8"));    BufferedWriter writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(args[1]),"UTF-8"));    client.connect();    String line;    String input="";    while ((line=reader.readLine()) != null) {      input+=line + "\n";    }    String tagged=client.process(input);    writer.write(tagged + "\n");    client.close();    reader.close();    writer.close();  } catch (  Exception e) {    System.out.println(e.getMessage());    e.printStackTrace();  }}  }
class C{  public void init(Swagger2MarkupConverter.Context globalContext){}  }
class C{  public boolean checkChallanValidity(final Challan challan){  final Calendar current=Calendar.getInstance();  current.clear(Calendar.HOUR_OF_DAY);  current.clear(Calendar.MINUTE);  current.clear(Calendar.SECOND);  current.clear(Calendar.MILLISECOND);  final Calendar validityStart=Calendar.getInstance();  validityStart.setTime(challan.getChallanDate());  validityStart.clear(Calendar.HOUR_OF_DAY);  validityStart.clear(Calendar.MINUTE);  validityStart.clear(Calendar.SECOND);  validityStart.clear(Calendar.MILLISECOND);  final Calendar validityEnd=Calendar.getInstance();  validityEnd.setTime(challan.getValidUpto());  validityEnd.clear(Calendar.HOUR_OF_DAY);  validityEnd.clear(Calendar.MINUTE);  validityEnd.clear(Calendar.SECOND);  validityEnd.clear(Calendar.MILLISECOND);  if (validityStart.compareTo(current) <= 0 && validityEnd.compareTo(current) >= 0)   return true;  return false;}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public String nodeId(){  return nodeId;}  }
class C{  public boolean shouldSelectCell(EventObject anEvent){  return true;}  }
class C{  private static boolean isBufferTooLarge(int size){  return size > MAX_CACHED_BUFFER_SIZE;}  }
class C{  public static MapBean createMapBean(Projection proj,Border border){  MapBean mapBeano=new BufferedLayerMapBean();  mapBeano.setBorder(border);  if (proj != null) {    mapBeano.setProjection(proj);    mapBeano.setPreferredSize(new Dimension(proj.getWidth(),proj.getHeight()));  }  return mapBeano;}  }
class C{  public void removeFocusFromEditText(View view){  wifiFilterET.clearFocus();  uploadUrlET.clearFocus();}  }
class C{  public static <E extends Comparable<E>>void toChildrenSum(BinaryNode<E> node){  if (node == null || node.left == null && node.right == null)   return;  toChildrenSum(node.left);  toChildrenSum(node.right);  Integer nodeValue=(Integer)(node == null ? 0 : node.value);  Integer leftChildValue=(Integer)(node.left == null ? 0 : node.left.value);  Integer rightChildValue=(Integer)(node.right == null ? 0 : node.right.value);  int diff=leftChildValue + rightChildValue - nodeValue;  if (diff < 0) {    increment(node,-diff);  } else   if (diff > 0) {  }}  }
class C{  private static boolean discardStream(HttpEngine httpEngine,InputStream responseBodyIn){  Connection connection=httpEngine.connection;  if (connection == null)   return false;  Socket socket=connection.getSocket();  if (socket == null)   return false;  try {    int socketTimeout=socket.getSoTimeout();    socket.setSoTimeout(DISCARD_STREAM_TIMEOUT_MILLIS);    try {      Util.skipAll(responseBodyIn);      return true;    }  finally {      socket.setSoTimeout(socketTimeout);    }  } catch (  IOException e) {    return false;  }}  }
class C{  public colgroup removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  @Override protected void process(DistributionManager dm){  final GemFireCacheImpl cache;  cache=GemFireCacheImpl.getInstance();  if (cache != null) {    Iterator iterator=this.messagesList.iterator();    int oldLevel=LocalRegion.setThreadInitLevelRequirement(LocalRegion.BEFORE_INITIAL_IMAGE);    try {      while (iterator.hasNext()) {        final String regionName=(String)iterator.next();        final int size=((Integer)iterator.next()).intValue();        final LocalRegion region=(LocalRegion)cache.getRegion(regionName);        final HARegionQueue hrq;        if (region == null || !region.isInitialized()) {          hrq=null;        } else {          HARegionQueue tmp=((HARegion)region).getOwner();          if (tmp != null && tmp.isQueueInitialized()) {            hrq=tmp;          } else {            hrq=null;          }        }        for (int i=0; i < size; i++) {          final EventID id=(EventID)iterator.next();          boolean interrupted=Thread.interrupted();          if (hrq == null || !hrq.isQueueInitialized()) {            continue;          }          try {            try {              if (logger.isTraceEnabled()) {                logger.trace("QueueRemovalMessage: removing dispatched events on queue {} for {}",regionName,id);              }              hrq.removeDispatchedEvents(id);            } catch (            RegionDestroyedException rde) {              logger.info(LocalizedMessage.create(LocalizedStrings.QueueRemovalMessage_QUEUE_FOUND_DESTROYED_WHILE_PROCESSING_THE_LAST_DISPTACHED_SEQUENCE_ID_FOR_A_HAREGIONQUEUES_DACE_THE_EVENT_ID_IS_0_FOR_HAREGION_WITH_NAME_1,new Object[]{id,regionName}));            }catch (            CancelException e) {              return;            }catch (            CacheException e) {              logger.error(LocalizedMessage.create(LocalizedStrings.QueueRemovalMessage_QUEUEREMOVALMESSAGEPROCESSEXCEPTION_IN_PROCESSING_THE_LAST_DISPTACHED_SEQUENCE_ID_FOR_A_HAREGIONQUEUES_DACE_THE_PROBLEM_IS_WITH_EVENT_ID__0_FOR_HAREGION_WITH_NAME_1,new Object[]{regionName,id}),e);            }catch (            InterruptedException ie) {              return;            }          } catch (          RejectedExecutionException e) {            interrupted=true;          } finally {            if (interrupted) {              Thread.currentThread().interrupt();            }          }        }      }    }  finally {      LocalRegion.setThreadInitLevelRequirement(oldLevel);    }  }}  }
class C{  private Operation buildSelfPatchOperation(State s){  return Operation.createPatch(UriUtils.buildUri(getHost(),getSelfLink())).setBody(s);}  }
class C{  private boolean lambdaNewClassFilter(TranslationContext<?> context,JCNewClass tree){  if (context != null && tree.encl == null && tree.def == null && !tree.type.getEnclosingType().hasTag(NONE)) {    Type encl=tree.type.getEnclosingType();    Type current=context.owner.enclClass().type;    while (!current.hasTag(NONE)) {      if (current.tsym.isSubClass(encl.tsym,types)) {        return true;      }      current=current.getEnclosingType();    }    return false;  } else {    return false;  }}  }
class C{  public boolean wipe(){  return mProviderHelper.wipe();}  }
class C{  public ResourceBundleELResolverITCase(String name){  super(name);}  }
class C{  void testFail(InputStream is,String cmd) throws Exception {  boolean ok;  try {    test(is,cmd);    ok=true;  } catch (  Exception e) {    ok=false;  }  if (ok) {    afterFail("",cmd,"FAIL");    throw new RuntimeException();  }}  }
class C{  int[] findNearestVacantArea(int pixelX,int pixelY,int spanX,int spanY,int[] result){  return findNearestVacantArea(pixelX,pixelY,spanX,spanY,spanX,spanY,result,null);}  }
class C{  public FileShareQuotaDirectory(QuotaDirectory qtree){  _id=qtree.getId();  _name=qtree.getName();  _securityStyle=qtree.getSecurityStyle();  _oplock=qtree.getOpLock();  _size=qtree.getSize();  this.softLimit=qtree.getSoftLimit();  this.softGrace=qtree.getSoftGrace();  this.notificationLimit=qtree.getNotificationLimit();}  }
class C{  public TextSimilarityScore_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());  casFeat_Score=jcas.getRequiredFeatureDE(casType,"Score","uima.cas.Double",featOkTst);  casFeatCode_Score=(null == casFeat_Score) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_Score).getCode();}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"SXTB");  translateAll(environment,instruction,"SXTB",instructions);}  }
class C{  private static byte[] copyOfRange(byte[] from,int start,int end){  int length=end - start;  byte[] result=new byte[length];  System.arraycopy(from,start,result,0,length);  return result;}  }
class C{  public Rational subtract(Rational secondRational){  long n=r[0] * secondRational.getDenominator() - r[1] * secondRational.getNumerator();  long d=r[1] * secondRational.getDenominator();  return new Rational(n,d);}  }
class C{  public void onCreate(Bundle savedInstanceState){  mSlidingMenu=(SlidingMenu)LayoutInflater.from(mActivity).inflate(R.layout.view_slidingmenu_main,null);}  }
class C{  public void stop(){  this.server.stop();}  }
class C{  private static OFActionSetDlSrc decode_set_src_mac(String actionToDecode,OFVersion version,Logger log){  Matcher n=Pattern.compile("(?:(\\p{XDigit}+)\\:(\\p{XDigit}+)\\:(\\p{XDigit}+)\\:(\\p{XDigit}+)\\:(\\p{XDigit}+)\\:(\\p{XDigit}+))").matcher(actionToDecode);  if (n.matches()) {    MacAddress macaddr=MacAddress.of(get_mac_addr(n,actionToDecode,log));    if (macaddr != null) {      OFActionSetDlSrc.Builder ab=OFFactories.getFactory(version).actions().buildSetDlSrc();      ab.setDlAddr(macaddr);      log.debug("action {}",ab.build());      return ab.build();    }  } else {    log.debug("Invalid action: '{}'",actionToDecode);    return null;  }  return null;}  }
class C{  protected Map<String,List<String>> addKeys(){  Map<String,List<String>> keys=new HashMap<>();  for (int i=0; i < gridCount(); ++i)   keys.put(grid(i).name(),new ArrayList<String>());  for (int i=0; i < 500; ++i) {    String key="key" + i;    Ignite g=primaryIgnite(key);    g.cache(cacheName()).put(key,"value" + i);    keys.get(g.name()).add(key);  }  return keys;}  }
class C{  private void processImage(long productKey,VOImageResource voImageResource) throws ValidationException {  if (voImageResource == null) {    return;  }  if (voImageResource.getImageType() == null || voImageResource.getImageType().getOwnerType() != ImageOwnerType.SERVICE) {    SaaSSystemException se=new SaaSSystemException("Only images belonging to a product can be saved.");    logger.logError(Log4jLogger.SYSTEM_LOG,se,LogMessageIdentifier.ERROR_IMAGES_NOT_BELONG_TO_PRODUCT);    throw se;  }  boolean isImageDeleted=voImageResource.getBuffer() == null;  if (isImageDeleted) {    irm.delete(productKey,voImageResource.getImageType());  } else {    try {      ImageValidator.validate(voImageResource.getBuffer(),voImageResource.getContentType(),80,80,80,80);    } catch (    ValidationException e) {      sessionCtx.setRollbackOnly();      throw e;    }    ImageResource imageResource=new ImageResource();    imageResource.setObjectKey(productKey);    imageResource.setContentType(voImageResource.getContentType());    imageResource.setBuffer(voImageResource.getBuffer());    imageResource.setImageType(voImageResource.getImageType());    irm.save(imageResource);  }}  }
class C{  protected static void printComponentProperties(Vector components,PropertyHandler ph,PrintStream ps,Properties createdProperties){  boolean buildConfiguredApplication=true;  boolean componentListBuilt=false;  Object someObj;  int numComponents=0;  String markerName;  String componentProperty=PropertyHandler.componentProperty;  StringBuffer componentMarkerString=new StringBuffer(componentProperty).append("=");  if (ph != null) {    String phPrefix=PropUtils.getScopedPropertyPrefix(ph.getPropertyPrefix());    componentProperty=phPrefix + PropertyHandler.componentProperty;    componentMarkerString=new StringBuffer(componentProperty).append("=");  }  StringBuffer componentPropsString=new StringBuffer();  if (ph != null && buildConfiguredApplication) {    Properties phProps=ph.getProperties();    componentMarkerString.append(phProps.getProperty(componentProperty));    Vector componentList=PropUtils.parseSpacedMarkers(phProps.getProperty(componentProperty));    for (int i=0; i < componentList.size(); i++) {      String markerNameClass=(String)componentList.elementAt(i) + ".class";      componentPropsString.append(markerNameClass).append("=").append(phProps.get(markerNameClass)).append("\n");      if (createdProperties != null) {        createdProperties.put(markerNameClass,phProps.get(markerNameClass));      }    }    componentListBuilt=true;  }  Properties componentProperties=new Properties();  Enumeration comps=components.elements();  while (comps.hasMoreElements()) {    someObj=comps.nextElement();    if (someObj instanceof PropertyConsumer) {      logger.fine("Getting Property Info for" + someObj.getClass().getName());      PropertyConsumer pc=(PropertyConsumer)someObj;      componentProperties.clear();      markerName=pc.getPropertyPrefix();      if (ph != null && markerName != null && !markerName.equals("openmap")) {        componentProperties=ph.getProperties(markerName);      } else {        componentProperties.clear();      }      if (!componentListBuilt) {        if (markerName != null) {          componentMarkerString.append(" ").append(markerName);        } else {          markerName="component" + (numComponents++);          componentMarkerString.append(" ").append(markerName);          pc.setPropertyPrefix(markerName);        }        componentPropsString.append(markerName).append(".class=").append(someObj.getClass().getName()).append("\n");        if (createdProperties != null) {          createdProperties.put(markerName,someObj.getClass().getName());        }      }      pc.getProperties(componentProperties);      TreeMap orderedProperties=new TreeMap(componentProperties);      if (!componentProperties.isEmpty()) {        componentPropsString.append("####\n");        for (Iterator keys=orderedProperties.keySet().iterator(); keys.hasNext(); ) {          String key=(String)keys.next();          String value=componentProperties.getProperty(key);          if (value != null) {            componentPropsString.append(key).append("=").append(value).append("\n");          }          if (createdProperties != null && value != null) {            createdProperties.put(key,value);          }        }      }    } else     if (!componentListBuilt) {      markerName="component" + (numComponents++);      componentMarkerString.append(" ").append(markerName);      componentPropsString.append(markerName).append(".class=").append(someObj.getClass().getName()).append("\n");      if (createdProperties != null) {        createdProperties.put(markerName,someObj.getClass().getName());      }    }  }  if (ps != null) {    ps.println("\n\n### OpenMap Components ###");    ps.println(componentMarkerString.toString());    ps.println("\n### OpenMap Component Properties ###");    ps.println(componentPropsString.toString());    ps.println("### End Component Properties ###");  }  if (createdProperties != null) {    createdProperties.put(PropertyHandler.componentProperty,componentMarkerString.substring(PropertyHandler.componentProperty.length() + 1));  }}  }
class C{  public void clearSounds(){  mSoundMap.clear();}  }
class C{  public Request createGetRequest(String string,final Request oldRequest) throws IOException {  string=this.getURL(string);  boolean sendref=true;  if (this.currentURL == null) {    sendref=false;    this.currentURL=string;  }  final GetRequest request=new GetRequest(string);  request.setCustomCharset(this.customCharset);  if (oldRequest != null && oldRequest.hasCookies()) {    request.setCookies(oldRequest.getCookies());  }  request.setConnectTimeout(this.getConnectTimeout());  request.setReadTimeout(this.getReadTimeout());  request.getHeaders().put("Accept-Language",this.acceptLanguage);  this.forwardCookies(request);  if (sendref) {    request.getHeaders().put("Referer",this.currentURL.toString());  }  if (this.headers != null) {    this.mergeHeaders(request);  }  return request;}  }
class C{  private void initPanel(){  final JPanel mainPanel=new JPanel(new BorderLayout());  mainPanel.setBorder(new TitledBorder("Edit Outdegree Condition"));  final JPanel operatorPanel=new JPanel(new BorderLayout());  operatorPanel.setBorder(new EmptyBorder(5,5,5,5));  final JPanel inputPanel=new JPanel(new BorderLayout());  inputPanel.setBorder(new EmptyBorder(5,0,5,5));  operatorPanel.add(m_operatorBox,BorderLayout.CENTER);  inputPanel.add(m_inputField,BorderLayout.CENTER);  final JPanel containerPanel=new JPanel(new BorderLayout());  containerPanel.add(operatorPanel,BorderLayout.WEST);  containerPanel.add(inputPanel,BorderLayout.CENTER);  mainPanel.add(containerPanel,BorderLayout.NORTH);  add(mainPanel,BorderLayout.CENTER);}  }
class C{  public Drawable createIconThumbnail(Drawable icon){  int width=mIconWidth;  int height=mIconHeight;  final int iconWidth=icon.getIntrinsicWidth();  final int iconHeight=icon.getIntrinsicHeight();  if (icon instanceof PaintDrawable) {    PaintDrawable painter=(PaintDrawable)icon;    painter.setIntrinsicWidth(width);    painter.setIntrinsicHeight(height);  }  if (width > 0 && height > 0) {    if (width < iconWidth || height < iconHeight) {      final float ratio=(float)iconWidth / iconHeight;      if (iconWidth > iconHeight) {        height=(int)(width / ratio);      } else       if (iconHeight > iconWidth) {        width=(int)(height * ratio);      }      final Bitmap.Config c=icon.getOpacity() != PixelFormat.OPAQUE ? Bitmap.Config.ARGB_8888 : Bitmap.Config.RGB_565;      final Bitmap thumb=Bitmap.createBitmap(mIconWidth,mIconHeight,c);      final Canvas canvas=mCanvas;      canvas.setBitmap(thumb);      mOldBounds.set(icon.getBounds());      final int x=(mIconWidth - width) / 2;      final int y=(mIconHeight - height) / 2;      icon.setBounds(x,y,x + width,y + height);      icon.draw(canvas);      icon.setBounds(mOldBounds);      icon=new BitmapDrawable(getResources(),thumb);      canvas.setBitmap(null);    } else     if (iconWidth < width && iconHeight < height) {      final Bitmap.Config c=Bitmap.Config.ARGB_8888;      final Bitmap thumb=Bitmap.createBitmap(mIconWidth,mIconHeight,c);      final Canvas canvas=mCanvas;      canvas.setBitmap(thumb);      mOldBounds.set(icon.getBounds());      final int x=(width - iconWidth) / 2;      final int y=(height - iconHeight) / 2;      icon.setBounds(x,y,x + iconWidth,y + iconHeight);      icon.draw(canvas);      icon.setBounds(mOldBounds);      icon=new BitmapDrawable(getResources(),thumb);      canvas.setBitmap(null);    }  }  return icon;}  }
class C{  public Entry copy(){  Entry e=new Entry(mVal,mXIndex,mData);  return e;}  }
class C{  private static boolean isController(ResourceMethod method){  return method.getInvocable().getDefinitionMethod().isAnnotationPresent(Controller.class);}  }
class C{  public boolean isGrowable(){  return growable;}  }
class C{  public void removeToken(String tokenName){  tokenValues.remove(tokenName);}  }
class C{  public static org.oscm.vo.VOOrganization convertToApi(org.oscm.internal.vo.VOOrganization oldVO){  if (oldVO == null) {    return null;  }  org.oscm.vo.VOOrganization newVO=new org.oscm.vo.VOOrganization();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setOrganizationId(oldVO.getOrganizationId());  newVO.setAddress(oldVO.getAddress());  newVO.setEmail(oldVO.getEmail());  newVO.setLocale(oldVO.getLocale());  newVO.setName(oldVO.getName());  newVO.setPhone(oldVO.getPhone());  newVO.setUrl(oldVO.getUrl());  newVO.setDescription(oldVO.getDescription());  newVO.setDiscount(convertToApi(oldVO.getDiscount()));  newVO.setDistinguishedName(oldVO.getDistinguishedName());  newVO.setDomicileCountry(oldVO.getDomicileCountry());  newVO.setNameSpace(oldVO.getNameSpace());  newVO.setImageDefined(oldVO.isImageDefined());  newVO.setSupportEmail(oldVO.getSupportEmail());  return newVO;}  }
class C{  public static Name shortName(Name classname){  return classname.subName(classname.lastIndexOf((byte)'.') + 1,classname.getByteLength());}  }
class C{  public boolean isFindGroups(){  return findGroups;}  }
class C{  public AssignmentOperator createAssignmentOperatorFromString(EDataType eDataType,String initialValue){  AssignmentOperator result=AssignmentOperator.get(initialValue);  if (result == null)   throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '"+ eDataType.getName()+ "'");  return result;}  }
class C{  @RequestMapping(value="/{tableNames}/cardinality",method={RequestMethod.PUT}) @ResponseBody public CardinalityRequest generateCardinality(@PathVariable String tableNames,@RequestBody CardinalityRequest request){  String submitter=SecurityContextHolder.getContext().getAuthentication().getName();  String[] tables=tableNames.split(",");  for (  String table : tables) {    cubeMgmtService.calculateCardinality(table.trim().toUpperCase(),submitter);  }  return request;}  }
class C{  public HostAddresses(InetAddress[] inetAddresses){  if (inetAddresses == null) {    addresses=null;    return;  }  addresses=new HostAddress[inetAddresses.length];  for (int i=0; i < inetAddresses.length; i++)   addresses[i]=new HostAddress(inetAddresses[i]);}  }
class C{  private boolean isCsrfEnabled(){  final Object value=config.getProperty(Csrf.CSRF_PROTECTION);  return value != null ? ((Csrf.CsrfOptions)value) != Csrf.CsrfOptions.OFF : false;}  }
class C{  protected void stopWithErrorMessage(String error,Exception ex){  stop();  if (m_log != null) {    m_log.statusMessage(statusMessagePrefix() + error + " - see log for details");    m_log.logMessage(statusMessagePrefix() + error + (ex != null ? " " + ex.getMessage() : ""));  }}  }
class C{  private void drawX(Canvas canvas,Paint paint,float x,float y){  canvas.drawLine(x - size,y - size,x + size,y + size,paint);  canvas.drawLine(x + size,y - size,x - size,y + size,paint);}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  public static MutableSet<Integer> toSet(int from,int to){  MutableSet<Integer> targetCollection=UnifiedSet.newSet();  Interval.fromTo(from,to).forEach(CollectionAddProcedure.on(targetCollection));  return targetCollection;}  }
class C{  public void clear(){  size=0;}  }
class C{  public static long[] generate(int messageSize,int crcSize,long polynomial,long initialFill,boolean includeCRCBitErrors,Parity parity){  long[] table=generate(messageSize,crcSize,polynomial,initialFill,includeCRCBitErrors);  if (parity == Parity.NONE) {    return table;  } else {    for (int x=0; x < table.length; x++) {      table[x]<<=1;      if (parity(table[x]) != parity) {        table[x]^=0x1;      }    }    return table;  }}  }
class C{  public ImageData maskAlphaAsRoundedrectangle(ImageData imageData,Dimension corner,int alphaValue){  byte[] alphaData=imageData.alphaData;  int width=imageData.width;  int height=imageData.height;  int r=corner.width / 2;  double r_square=r * r;  byte[] alphaPixel=new byte[r];  Arrays.fill(alphaPixel,(byte)alphaValue);  r=Math.min(r,Math.min(imageData.height,imageData.width) / 2);  for (int i=0; i < r; i++) {    int p=r - (int)Math.sqrt(r_square - (double)((i) * (i)));    if (p > 0) {      System.arraycopy(alphaPixel,0,alphaData,(r - (i + 1)) * width,p);      System.arraycopy(alphaPixel,0,alphaData,(r - (i + 1)) * width + (width - p),p);      System.arraycopy(alphaPixel,0,alphaData,((height - (r - (i)))) * width,p);      System.arraycopy(alphaPixel,0,alphaData,((height - (r - (i)))) * width + (width - p),p);    }  }  return imageData;}  }
class C{  private int generateNonce(){  return RANDOM.nextInt();}  }
class C{  private static final int compareNaN(double a,double b){  if (a != a) {    if (b != b)     return 0; else     return 1;  }  return -1;}  }
class C{  protected boolean isEmptyTag(String tagName){  int i=0;  boolean found=false;  while ((i < EMPTY_TAGS.length) && (!found)) {    if (tagName.equals(EMPTY_TAGS[i])) {      found=true;    }    i++;  }  return found;}  }
class C{  public List<ValueBox> addArgumentHotspots(String signature,int arg,List<ValueBox> sigSpots){  logger.debug("For signature " + signature + " and arg "+ arg+ " got "+ sigSpots.size()+ " hotspots.");  if (!sigSpots.isEmpty()) {    addSignatureToHotspotMap(signature,new Hotspot(signature,arg,sigSpots));    hotspots.addAll(sigSpots);  }  return sigSpots;}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  private void printRunningTotal(PrintData pd,int levelNo,int rowNo){  if (m_runningTotalLines < 1)   return;  log.fine("(" + m_runningTotalLines + ") - Row="+ rowNo+ ", mod="+ rowNo % m_runningTotalLines);  if (rowNo % m_runningTotalLines != 0)   return;  log.fine("Row=" + rowNo);  PrintDataColumn pdc=null;  int start=0;  if (rowNo == 0)   start=1;  for (int rt=start; rt < 2; rt++) {    pd.addRow(true,levelNo);    for (int c=0; c < pd.getColumnInfo().length; c++) {      pdc=pd.getColumnInfo()[c];      if (c == 0) {        String title="RunningTotal";        pd.addNode(new PrintDataElement(pdc.getColumnName(),title,DisplayType.String,false,rt == 0,pdc.getFormatPattern()));      } else       if (m_group.isFunctionColumn(pdc.getColumnName(),PrintDataFunction.F_SUM)) {        pd.addNode(new PrintDataElement(pdc.getColumnName(),m_group.getValue(PrintDataGroup.TOTAL,pdc.getColumnName(),PrintDataFunction.F_SUM),PrintDataFunction.getFunctionDisplayType(PrintDataFunction.F_SUM,pdc.getDisplayType()),false,false,pdc.getFormatPattern()));      }    }  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private List<Entry> reduceWithDouglasPeuker(List<Entry> entries,double epsilon){  if (epsilon <= 0 || entries.size() < 3) {    return entries;  }  keep[0]=true;  keep[entries.size() - 1]=true;  algorithmDouglasPeucker(entries,epsilon,0,entries.size() - 1);  List<Entry> reducedEntries=new ArrayList<Entry>();  for (int i=0; i < entries.size(); i++) {    if (keep[i]) {      Entry curEntry=entries.get(i);      reducedEntries.add(new Entry(curEntry.getVal(),curEntry.getXIndex()));    }  }  return reducedEntries;}  }
class C{  public void rebaseZkSnapshot() throws LocalRepositoryException {  final String prefix="rebase zk snapshot()";  _log.debug(prefix);  final String[] cmd={_SYSTOOL_CMD,_SYSTOOL_REBASE_ZK_SNAPSHOT};  exec(prefix,cmd);  _log.info(prefix + " Success");}  }
class C{  public UnaryExpression(int operator,int operatorPosition,AstNode operand,boolean postFix){  assertNotNull(operand);  int beg=postFix ? operand.getPosition() : operatorPosition;  int end=postFix ? operatorPosition + 2 : operand.getPosition() + operand.getLength();  setBounds(beg,end);  setOperator(operator);  setOperand(operand);  isPostfix=postFix;}  }
class C{  public void removeColumn(TableColumn column){  int allColumnsIndex=allTableColumns.indexOf(column);  if (allColumnsIndex != -1) {    allTableColumns.removeElementAt(allColumnsIndex);  }  super.removeColumn(column);}  }
class C{  public Iterator<E> iterator(){  return new Itr();}  }
class C{  void done(Connection c){  if (dgcAckNeeded) {    Connection conn=null;    Channel ch=null;    boolean reuse=true;    DGCImpl.dgcLog.log(Log.VERBOSE,"send ack");    try {      ch=c.getChannel();      conn=ch.newConnection();      DataOutputStream out=new DataOutputStream(conn.getOutputStream());      out.writeByte(TransportConstants.DGCAck);      if (ackID == null) {        ackID=new UID();      }      ackID.write((DataOutput)out);      conn.releaseOutputStream();      conn.getInputStream().available();      conn.releaseInputStream();    } catch (    RemoteException e) {      reuse=false;    }catch (    IOException e) {      reuse=false;    }    try {      if (conn != null)       ch.free(conn,reuse);    } catch (    RemoteException e) {    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:50.421 -0400",hash_original_method="B680B124D15C27AFF7F59A1FAD367143",hash_generated_method="81CA5C06312B19E2D21605AD81FEA398") public static void writeSwappedDouble(OutputStream output,double value) throws IOException {  writeSwappedLong(output,Double.doubleToLongBits(value));}  }
class C{  private void updateResetTimeout(){  if (isTrafficChannel()) {    mEndTimeout=System.currentTimeMillis();  } else {    mEndTimeout=System.currentTimeMillis() + RESET_TIMEOUT_DELAY;  }}  }
class C{  private void queueResumeSteps(Workflow workflow,Map<String,com.emc.storageos.db.client.model.Workflow> childWFMap){  for (  String stepId : workflow.getStepMap().keySet()) {    StepState state=workflow.getStepStatus(stepId).state;switch (state) {case ERROR:      if (childWFMap.containsKey(stepId)) {        Workflow child=loadWorkflowFromUri(childWFMap.get(stepId).getId());        if (child.getWorkflowState() == WorkflowState.SUSPENDED_ERROR || child.getWorkflowState() == WorkflowState.SUSPENDED_NO_ERROR) {          workflow.getStepStatus(stepId).updateState(StepState.EXECUTING,null,"");          break;        }      }    workflow.getStepStatus(stepId).updateState(StepState.CREATED,null,"");  break;case BLOCKED:case CREATED:case SUSPENDED_NO_ERROR:case SUSPENDED_ERROR:case CANCELLED:case EXECUTING:workflow.getStepStatus(stepId).updateState(StepState.CREATED,null,"");break;case QUEUED:case SUCCESS:break;}}for (String stepId : workflow.getStepMap().keySet()) {Step step=workflow.getStepMap().get(stepId);if (step.status.state == StepState.CREATED) {queueWorkflowStep(workflow,step);persistWorkflowStep(workflow,step);}}workflow.setWorkflowState(WorkflowState.RUNNING);persistWorkflow(workflow);logWorkflow(workflow,true);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:23.431 -0500",hash_original_method="69FE78AD0B4200050B3EDA46329CEBED",hash_generated_method="BFE6F106A50CB2C5C0AAB90CBC00F5C7") public LongSparseArray(int initialCapacity){  initialCapacity=ArrayUtils.idealIntArraySize(initialCapacity);  mKeys=new long[initialCapacity];  mValues=new Object[initialCapacity];  mSize=0;}  }
class C{  DominatorInfo(BitVector dominators){  this.dominators=dominators;}  }
class C{  public float lengthSquared(){  return x * x + y * y + z * z;}  }
class C{  private double[][] load(File file) throws IOException {  MatrixReader reader=null;  try {    reader=new MatrixReader(file);    List<double[]> data=new ArrayList<double[]>();    while (reader.hasNext()) {      data.add(reader.next());    }    return data.toArray(new double[0][]);  }  finally {    if (reader != null) {      reader.close();    }  }}  }
class C{  public void testSkipWholeMessage() throws Exception {  TestAllTypes message=TestUtil.getAllSet();  byte[] rawBytes=message.toByteArray();  CodedInputStream input1=CodedInputStream.newInstance(rawBytes);  CodedInputStream input2=CodedInputStream.newInstance(rawBytes);  UnknownFieldSet.Builder unknownFields=UnknownFieldSet.newBuilder();  while (true) {    int tag=input1.readTag();    assertEquals(tag,input2.readTag());    if (tag == 0) {      break;    }    unknownFields.mergeFieldFrom(tag,input1);    input2.skipField(tag);  }}  }
class C{  private void initDefinitionsFile() throws ReplicatorException {  try {    logger.info("Using: " + definitionsFile);    String jsonText=NetworkClientFilter.readDefinitionsFile(definitionsFile);    Object obj=parser.parse(jsonText);    JSONArray array=(JSONArray)obj;    definitions=array;    for (    Object o : array) {      JSONObject jo=(JSONObject)o;      String schema=(String)jo.get("schema");      String table=(String)jo.get("table");      String column=(String)jo.get("column");      JSONArray values=(JSONArray)jo.get("values");      logger.info("  In " + schema + "."+ table+ "."+ column+ ": ");      if (values == null)       throw new ReplicatorException("JSON format incorrect: must defined \"values\" to filter");      for (      Object v : values) {        definedValueEntries++;        logger.info("    " + v);      }    }  } catch (  ClassCastException e) {    throw new ReplicatorException("Unable to read definitions file (is JSON structure correct?): " + e,e);  }catch (  ParseException e) {    throw new ReplicatorException("Unable to read definitions file (error parsing JSON): " + e,e);  }catch (  IOException e) {    throw new ReplicatorException(e);  }}  }
class C{  public MediaPrintableArea(int x,int y,int w,int h,int units){  if ((x < 0) || (y < 0) || (w <= 0)|| (h <= 0)|| (units < 1)) {    throw new IllegalArgumentException("0 or negative value argument");  }  this.x=x * units;  this.y=y * units;  this.w=w * units;  this.h=h * units;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  protected String defaultAttrIndexRange(){  return "1";}  }
class C{  @Override final public boolean needsMaterialization(){  return true;}  }
class C{  public static String checkAndConvertToCompatibleIPv6Syntax(String hostAddress){  if (hostAddress.indexOf(":") != -1) {    LogWrapper logger=LogWrapper.getInstance();    if (logger.fineEnabled()) {      logger.fine("IPv6 host address detected, using IPv6 syntax for host in JMX connection URL");    }    hostAddress="[" + hostAddress + "]";    if (logger.fineEnabled()) {      logger.fine("Compatible host address is : " + hostAddress);    }  }  return hostAddress;}  }
class C{  public static void closeSilently(Connection conn){  if (conn != null) {    try {      conn.close();    } catch (    SQLException e) {    }  }}  }
class C{  public final void init(SecureRandom random){  if (serviceIterator == null) {    spi.engineInit(random);    return;  }  RuntimeException failure=null;  KeyGeneratorSpi mySpi=spi;  do {    try {      mySpi.engineInit(random);      initType=I_RANDOM;      initKeySize=0;      initParams=null;      initRandom=random;      return;    } catch (    RuntimeException e) {      if (failure == null) {        failure=e;      }      mySpi=nextSpi(mySpi,false);    }  } while (mySpi != null);  throw failure;}  }
class C{  public boolean isSetSyncValue(){  return this.syncValue != null;}  }
class C{  @Inject DefaultCollectionService(MQService mqService,TSDBService tsdbService,AuditService auditService,SystemConfiguration configuration,SchemaService schemaService,WardenService wardenService,MonitorService monitorService,NamespaceService namespaceService){  super(auditService,configuration);  _mqService=mqService;  _tsdbService=tsdbService;  _schemaService=schemaService;  _wardenService=wardenService;  _monitorService=monitorService;  _namespaceService=namespaceService;}  }
class C{  private boolean zzRefill() throws java.io.IOException {  if (zzStartRead > 0) {    System.arraycopy(zzBuffer,zzStartRead,zzBuffer,0,zzEndRead - zzStartRead);    zzEndRead-=zzStartRead;    zzCurrentPos-=zzStartRead;    zzMarkedPos-=zzStartRead;    zzStartRead=0;  }  if (zzCurrentPos >= zzBuffer.length) {    char newBuffer[]=new char[zzCurrentPos * 2];    System.arraycopy(zzBuffer,0,newBuffer,0,zzBuffer.length);    zzBuffer=newBuffer;  }  int numRead=zzReader.read(zzBuffer,zzEndRead,zzBuffer.length - zzEndRead);  if (numRead > 0) {    zzEndRead+=numRead;    return false;  }  if (numRead == 0) {    int c=zzReader.read();    if (c == -1)     return true; else {      zzBuffer[zzEndRead++]=(char)c;      return false;    }  }  return true;}  }
class C{  public boolean isLargestMaxX(final PlanetModel planetModel){  if (maxX == null)   return false;  return planetModel.getMaximumXValue() - maxX < Vector.MINIMUM_RESOLUTION;}  }
class C{  public void readSequenceOf(ASN1SequenceOf sequenceOf) throws IOException {  if (tag != ASN1Constants.TAG_C_SEQUENCEOF) {    throw expected("sequenceOf");  }  decodeValueCollection(sequenceOf);}  }
class C{  public void testNegateZero(){  byte rBytes[]={0};  BigInteger aNumber=BigInteger.ZERO;  BigInteger result=aNumber.negate();  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",0,result.signum());}  }
class C{  @Override public boolean isEmpty(){  return size() == 0;}  }
class C{  public static BufferedImage createCompatibleImage(BufferedImage image,int width,int height){  return getGraphicsConfiguration().createCompatibleImage(width,height,image.getTransparency());}  }
class C{  public SoundCloudTrack next(){  mCurrentTrackIndex=(mCurrentTrackIndex + 1) % mSoundCloudPlaylist.getTracks().size();  return mSoundCloudPlaylist.getTracks().get(mCurrentTrackIndex);}  }
class C{  public static String validateAccountNo(String AccountNo){  int length=checkNumeric(AccountNo).length();  if (length > 0)   return "";  return "PaymentBankAccountNotValid";}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  UIManager ui=stack.getUIMgr();  if (ui != null)   ui.reloadSystemHooks();  return null;}  }
class C{  public void dispose() throws SaslException {  if (m_state != STATE_DISPOSED) {    m_state=STATE_DISPOSED;  }}  }
class C{  @Override public void visit(NodeVisitor v){  if (v.visit(this) && returnValue != null) {    returnValue.visit(v);  }}  }
class C{  private int indexOf(String fullPath){  for (int i=0, length=this.relativePaths.length; i < length; i++) {    String currentRelativePath=this.relativePaths[i];    if (currentRelativePath == null)     continue;    String currentContainerPath=this.containerPaths[i];    String currentFullPath=currentRelativePath.length() == 0 ? currentContainerPath : (currentContainerPath + '/' + currentRelativePath);    if (encloses(currentFullPath,fullPath,i))     return i;  }  return -1;}  }
class C{  protected synchronized boolean shouldPush(final LogEvent event){  return (m_threshold.isLowerOrEqual(event.getPriority()) || isFull());}  }
class C{  public void serialize(Iterable<? extends TransactionOperation> txn,OutputStream out) throws IOException {  assert txn != null : "operation list must not be null";  assert out != null : "output stream must not be null";  XMLWriter xmlWriter=new XMLWriter(out);  xmlWriter.setPrettyPrint(true);  xmlWriter.startDocument();  xmlWriter.startTag(TransactionXMLConstants.TRANSACTION_TAG);  for (  TransactionOperation op : txn) {    serialize(op,xmlWriter);  }  xmlWriter.endTag(TransactionXMLConstants.TRANSACTION_TAG);  xmlWriter.endDocument();}  }
class C{  public boolean isOverflowEnabled(){  return overflowEnabled && (overflowMaxCount == 0 || overflowCounters.synchronousOverflowCounter.get() < overflowMaxCount);}  }
class C{  public BasicDiagnosticFormatter(Options options,JavacMessages msgs){  super(msgs,new BasicConfiguration(options));}  }
class C{  private void updateSystemVolumeInfo(String clusterName,VPlexSystemVolumeInfo systemVolumeInfo) throws VPlexApiException {  String systemVolumeName=systemVolumeInfo.getName();  StringBuilder uriBuilder=new StringBuilder();  uriBuilder.append(VPlexApiConstants.URI_CLUSTERS.toString());  uriBuilder.append(clusterName);  uriBuilder.append(VPlexApiConstants.URI_SYSTEM_VOLUMES.toString());  uriBuilder.append(systemVolumeName);  URI requestURI=_vplexApiClient.getBaseURI().resolve(URI.create(uriBuilder.toString()));  s_logger.info("System Volume Info Request URI is {}",requestURI.toString());  ClientResponse response=_vplexApiClient.get(requestURI);  String responseStr=response.getEntity(String.class);  s_logger.info("Response is {}",responseStr);  int status=response.getStatus();  response.close();  if (status != VPlexApiConstants.SUCCESS_STATUS) {    throw new VPlexApiException(String.format("Failed getting info for system volume %s in cluster %s with status: %s",systemVolumeName,clusterName,status));  }  try {    VPlexApiUtils.setAttributeValues(responseStr,systemVolumeInfo);    s_logger.info("Updated System Volume Info {}",systemVolumeInfo.toString());  } catch (  Exception e) {    throw new VPlexApiException(String.format("Error processing system volume information: %s",e.getMessage()),e);  }}  }
class C{  public void startJobQueue(){  log.info("Starting geosvc job queue");  try {    _queue=_coordinator.getQueue(GEOSVC_QUEUE_NAME,null,new GeoServiceJobSerializer(),DEFAULT_MAX_THREADS);  } catch (  Exception e) {    log.error("can not startup geosvc job queue",e);  }}  }
class C{  public JSONArray put(int index,Map<String,Object> value) throws JSONException {  this.put(index,new JSONObject(value));  return this;}  }
class C{  public IVariableBinding resolveFieldBinding(){  return this.ast.getBindingResolver().resolveField(this);}  }
class C{  public void firePropertyChange(PropertyChangeID id,Object oldProp,Object newProp){  String pcname;  pcname=PCIDMap.get(id);  firePropertyChange(new PropertyChangeEvent(this,pcname,oldProp,newProp));}  }
class C{  protected int matchNameValue(char[] pattern,char[] name){  if (pattern == null)   return ACCURATE_MATCH;  if (name == null)   return IMPOSSIBLE_MATCH;  if (name.length == 0) {    if (pattern.length == 0) {      return ACCURATE_MATCH;    }    return IMPOSSIBLE_MATCH;  } else   if (pattern.length == 0) {    return IMPOSSIBLE_MATCH;  }  boolean matchFirstChar=!this.isCaseSensitive || pattern[0] == name[0];  boolean sameLength=pattern.length == name.length;  boolean canBePrefix=name.length >= pattern.length;switch (this.matchMode) {case SearchPattern.R_EXACT_MATCH:    if (sameLength && matchFirstChar && CharOperation.equals(pattern,name,this.isCaseSensitive)) {      return POSSIBLE_MATCH | EXACT_FLAVOR;    }  break;case SearchPattern.R_PREFIX_MATCH:if (canBePrefix && matchFirstChar && CharOperation.prefixEquals(pattern,name,this.isCaseSensitive)) {  return POSSIBLE_MATCH;}break;case SearchPattern.R_PATTERN_MATCH:if (!this.isCaseSensitive) {pattern=CharOperation.toLowerCase(pattern);}if (CharOperation.match(pattern,name,this.isCaseSensitive)) {return POSSIBLE_MATCH;}break;case SearchPattern.R_REGEXP_MATCH:break;case SearchPattern.R_CAMELCASE_MATCH:if (CharOperation.camelCaseMatch(pattern,name,false)) {return POSSIBLE_MATCH;}if (!this.isCaseSensitive && CharOperation.prefixEquals(pattern,name,false)) {return POSSIBLE_MATCH;}break;case SearchPattern.R_CAMELCASE_SAME_PART_COUNT_MATCH:if (CharOperation.camelCaseMatch(pattern,name,true)) {return POSSIBLE_MATCH;}break;}return IMPOSSIBLE_MATCH;}  }
class C{  private boolean handleTouchEvent(MotionEvent ev){  DeviceProfile grid=mLauncher.getDeviceProfile();  int x=(int)ev.getX();  int y=(int)ev.getY();switch (ev.getAction()) {case MotionEvent.ACTION_DOWN:    if (!mContentBounds.isEmpty()) {      Rect tmpRect=new Rect(mContentBounds);      tmpRect.inset(-grid.allAppsIconSizePx / 2,0);      if (ev.getX() < tmpRect.left || ev.getX() > tmpRect.right) {        mBoundsCheckLastTouchDownPos.set(x,y);        return true;      }    } else {      if (ev.getX() < getPaddingLeft() || ev.getX() > (getWidth() - getPaddingRight())) {        mBoundsCheckLastTouchDownPos.set(x,y);        return true;      }    }  break;case MotionEvent.ACTION_UP:if (mBoundsCheckLastTouchDownPos.x > -1) {  ViewConfiguration viewConfig=ViewConfiguration.get(getContext());  float dx=ev.getX() - mBoundsCheckLastTouchDownPos.x;  float dy=ev.getY() - mBoundsCheckLastTouchDownPos.y;  float distance=(float)Math.hypot(dx,dy);  if (distance < viewConfig.getScaledTouchSlop()) {    Launcher launcher=(Launcher)getContext();    launcher.showWorkspace(true);    return true;  }}case MotionEvent.ACTION_CANCEL:mBoundsCheckLastTouchDownPos.set(-1,-1);break;}return false;}  }
class C{  public FastShortBuffer(){  this.minChunkLen=1024;}  }
class C{  public TrustManagerImpl(KeyStore keyStore){  this(keyStore,null);}  }
class C{  public void testSetCapacity(){  int old_size=100;  int new_size=200;  ByteFifoBuffer instance=new ByteFifoBuffer(old_size);  boolean expResult=true;  instance.write(getWData(old_size),old_size);  boolean result=instance.setCapacity(new_size);  assertEquals(expResult,result);  expResult=false;  instance.resetWritePosition();  instance.write(getWData(new_size),new_size);  result=instance.setCapacity(old_size);  assertEquals(expResult,result);}  }
class C{  public static FloatBuffer allocateFloatBuffer(float[] coords){  ByteBuffer byteBuffer=ByteBuffer.allocateDirect(coords.length * BYTES_PER_FLOAT);  byteBuffer.order(ByteOrder.nativeOrder());  FloatBuffer floatBuffer=byteBuffer.asFloatBuffer();  floatBuffer.put(coords);  floatBuffer.position(0);  return floatBuffer;}  }
class C{  private static String escapeJSON(String text){  StringBuilder builder=new StringBuilder();  builder.append('"');  for (int index=0; index < text.length(); index++) {    char chr=text.charAt(index);switch (chr) {case '"':case '\\':      builder.append('\\');    builder.append(chr);  break;case '\b':builder.append("\\b");break;case '\t':builder.append("\\t");break;case '\n':builder.append("\\n");break;case '\r':builder.append("\\r");break;default :if (chr < ' ') {String t="000" + Integer.toHexString(chr);builder.append("\\u" + t.substring(t.length() - 4));} else {builder.append(chr);}break;}}builder.append('"');return builder.toString();}  }
class C{  public PropertyField(String label,String initialValue,boolean isReadWrite,Object domain,int show){  setLayout(new BorderLayout());  add(optionalLabel,BorderLayout.WEST);  valFieldBorder=valField.getBorder();  Insets i=valFieldBorder.getBorderInsets(valField);  emptyBorder=new EmptyBorder(i.top,i.left,i.bottom,i.right);  defaultColor=valField.getBackground();  valField.addKeyListener(listener);  valField.addFocusListener(focusAdapter);  checkField.addActionListener(checkListener);  viewButton.addActionListener(viewButtonListener);  slider.addChangeListener(sliderListener);  list.addActionListener(listListener);  list.setMaximumRowCount(COMBO_BOX_MAX_HEIGHT);  viewButton.putClientProperty("Quaqua.Button.style","square");  if ((domain != null) && (domain instanceof Interval)) {    Interval interval=(Interval)domain;    if (interval.isDouble()) {    } else {      slider.setMinimum(interval.getMin().intValue());      slider.setMaximum(interval.getMax().intValue());    }  }  sliderFormatter.setGroupingUsed(false);  ignoreEvent=true;  setValues(label,initialValue,isReadWrite,domain,show);}  }
class C{  public DSAPublicKeyImpl(DSAPublicKeySpec keySpec){  super("DSA");  SubjectPublicKeyInfo spki;  p=keySpec.getP();  q=keySpec.getQ();  g=keySpec.getG();  ThreeIntegerSequence threeInts=new ThreeIntegerSequence(p.toByteArray(),q.toByteArray(),g.toByteArray());  AlgorithmIdentifier ai=new AlgorithmIdentifier(AlgNameMapper.map2OID("DSA"),threeInts.getEncoded());  y=keySpec.getY();  spki=new SubjectPublicKeyInfo(ai,ASN1Integer.getInstance().encode(y.toByteArray()));  setEncoding(spki.getEncoded());  params=(DSAParams)(new DSAParameterSpec(p,q,g));}  }
class C{  public void changeDateUpdated(){  java.text.DateFormat df=java.text.DateFormat.getDateTimeInstance();  setDateUpdated(df.format(new java.util.Date()));}  }
class C{  public JSONObject(JSONTokener x) throws JSONException {  this();  char c;  String key;  if (x.nextClean() != '{') {    throw x.syntaxError("A JSONObject text must begin with '{'");  }  for (; ; ) {    c=x.nextClean();switch (c) {case 0:      throw x.syntaxError("A JSONObject text must end with '}'");case '}':    return;default :  x.back();key=x.nextValue().toString();}c=x.nextClean();if (c != ':') {throw x.syntaxError("Expected a ':' after a key");}this.putOnce(key,x.nextValue());switch (x.nextClean()) {case ';':case ',':if (x.nextClean() == '}') {return;}x.back();break;case '}':return;default :throw x.syntaxError("Expected a ',' or '}'");}}}  }
class C{  public final boolean isSynchronized(){  return Modifier.isSynchronized(getModifiers());}  }
class C{  public static long divide(long dividend,long divisor){  if (divisor < 0) {    if (compare(dividend,divisor) < 0) {      return 0;    } else {      return 1;    }  }  if (dividend >= 0) {    return dividend / divisor;  }  long quotient=((dividend >>> 1) / divisor) << 1;  long rem=dividend - quotient * divisor;  return quotient + (compare(rem,divisor) >= 0 ? 1 : 0);}  }
class C{  public boolean categoryDesignatorIsGroups(){  return (this.key[4] == 0x02);}  }
class C{  public PriorExpression(){}  }
class C{  protected void updateShardBuffers(IndexShard shard,ByteSizeValue shardIndexingBufferSize,ByteSizeValue shardTranslogBufferSize){  if (shard != null) {    try {      shard.updateBufferSize(shardIndexingBufferSize,shardTranslogBufferSize);    } catch (    EngineClosedException e) {    }catch (    FlushNotAllowedEngineException e) {    }catch (    Exception e) {      logger.warn("failed to set shard {} index buffer to [{}]",e,shard.shardId(),shardIndexingBufferSize);    }  }}  }
class C{  public RangePredicate(int operation,Expression middle,Expression left,Expression right,Comparator cmp){  super(operation,IN_IN,EX_EX,left,right);  this.m_middle=middle;  this.m_cmp=cmp;}  }
class C{  private static void convertActivityToTranslucentAfterL(Activity activity){  try {    Method getActivityOptions=Activity.class.getDeclaredMethod("getActivityOptions");    getActivityOptions.setAccessible(true);    Object options=getActivityOptions.invoke(activity);    Class<?>[] classes=Activity.class.getDeclaredClasses();    Class<?> translucentConversionListenerClazz=null;    for (    Class clazz : classes) {      if (clazz.getSimpleName().contains("TranslucentConversionListener")) {        translucentConversionListenerClazz=clazz;      }    }    Method convertToTranslucent=Activity.class.getDeclaredMethod("convertToTranslucent",translucentConversionListenerClazz,ActivityOptions.class);    convertToTranslucent.setAccessible(true);    convertToTranslucent.invoke(activity,null,options);  } catch (  Throwable t) {  }}  }
class C{  protected void disposeDrawingBuffer(){  Image localDrawingBuffer=drawingBuffer;  drawingBuffer=null;  if (localDrawingBuffer != null) {    localDrawingBuffer.flush();  }}  }
class C{  public dr.evolution.util.Date[] parseCalibrationBlock(TaxonList taxonList) throws ImportException, IOException {  return readCalibrationBlock(taxonList);}  }
class C{  public void push(){  current.pushCount++;}  }
class C{  public static short parseShort(CharSequence csq){  return parseShort(csq,10);}  }
class C{  public static boolean isUseLocalTimeInToString(){  return useLocalTimeInToString;}  }
class C{  public void incNumEntriesInVM(long delta){  this.stats.incLong(numEntriesInVMId,delta);}  }
class C{  public String generate(IStatusBar statusBar,KeyNamePair docTypeKNPair,String docActionSelected){  String info="";  log.info("M_Warehouse_ID=" + m_M_Warehouse_ID);  String trxName=Trx.createTrxName("IOG");  Trx trx=Trx.get(trxName,true);  setSelectionActive(false);  statusBar.setStatusLine(Msg.getMsg(Env.getCtx(),"InOutGenerateGen"));  statusBar.setStatusDB(String.valueOf(getSelection().size()));  int AD_Process_ID=0;  if (docTypeKNPair.getKey() == MRMA.Table_ID) {    AD_Process_ID=52001;  } else {    AD_Process_ID=199;  }  MPInstance instance=new MPInstance(Env.getCtx(),AD_Process_ID,0);  if (!instance.save()) {    info=Msg.getMsg(Env.getCtx(),"ProcessNoInstance");    return info;  }  StringBuffer insert=new StringBuffer();  insert.append("INSERT INTO T_SELECTION(AD_PINSTANCE_ID, T_SELECTION_ID) ");  int counter=0;  for (  Integer selectedId : getSelection()) {    counter++;    if (counter > 1)     insert.append(" UNION ");    insert.append("SELECT ");    insert.append(instance.getAD_PInstance_ID());    insert.append(", ");    insert.append(selectedId);    insert.append(" FROM DUAL ");    if (counter == 1000) {      if (DB.executeUpdate(insert.toString(),trxName) < 0) {        String msg="No Shipments";        log.config(msg);        info=msg;        trx.rollback();        return info;      }      insert=new StringBuffer();      insert.append("INSERT INTO T_SELECTION(AD_PINSTANCE_ID, T_SELECTION_ID) ");      counter=0;    }  }  if (counter > 0) {    if (DB.executeUpdate(insert.toString(),trxName) < 0) {      String msg="No Shipments";      log.config(msg);      info=msg;      trx.rollback();      return info;    }  }  ProcessInfo pi=new ProcessInfo("VInOutGen",AD_Process_ID);  pi.setAD_PInstance_ID(instance.getAD_PInstance_ID());  MPInstancePara ip=new MPInstancePara(instance,10);  ip.setParameter("Selection","Y");  if (!ip.save()) {    String msg="No Parameter added";    info=msg;    log.log(Level.SEVERE,msg);    return info;  }  ip=new MPInstancePara(instance,20);  ip.setParameter("DocAction",docActionSelected);  if (!ip.save()) {    String msg="No DocACtion Parameter added";    info=msg;    log.log(Level.SEVERE,msg);    return info;  }  ip=new MPInstancePara(instance,30);  ip.setParameter("M_Warehouse_ID",Integer.parseInt(m_M_Warehouse_ID.toString()));  if (!ip.save()) {    String msg="No Parameter added";    info=msg;    log.log(Level.SEVERE,msg);    return info;  }  setTrx(trx);  setProcessInfo(pi);  return info;}  }
class C{  private void validateProbeEssentials(IdentityProviderDTO identityProvider){  Validate.notNull(identityProvider,sm.getString("valid.not.null","Details of identity provider"));  Validate.notEmpty(identityProvider.getUsername(),sm.getString("valid.not.empty","Username"));  Validate.notNull(identityProvider.getPassword(),sm.getString("valid.not.null","password"));  Validate.notEmpty(identityProvider.getConnectionStrings(),sm.getString("valid.not.null","connection strings"));}  }
class C{  public String toString(cp_info constant_pool[]){  return Float.toString(bytes);}  }
class C{  @SideOnly(Side.CLIENT) protected boolean isPlayerLookingAt(){  final MovingObjectPosition hit=Minecraft.getMinecraft().objectMouseOver;  return hit != null && hit.typeOfHit == MovingObjectPosition.MovingObjectType.BLOCK && getCasing().getPosition().equals(hit.getBlockPos()) && hit.sideHit == Face.toEnumFacing(getFace());}  }
class C{  public boolean contains(String data){  return map.get(data) != null;}  }
class C{  private void startScan(boolean reverseScan){  mIsScanInProgress=true;  mReverseScan=reverseScan;  mHandler.post(mAutoScanRunnable);}  }
class C{  private void loadAndValidate(DatabaseDataSet databaseDataSet,OperationGroup updateGroup,OperationGroup deleteGroup,OperationGroup dependsOnGroup) throws SortServiceProviderException, SortPersistException {  logStep("Loading dataset from database");  try {    databaseDataSet.loadEntities(updateGroup,deleteGroup,dependsOnGroup);  } catch (  SortQueryException x) {    throw new SortPersistException("Could not load entities for validation and audit",x);  }  for (  Entity entity : iterable(updateGroup,deleteGroup,dependsOnGroup)) {    Entity databaseEntity=databaseDataSet.getEntity(entity.getEntityType(),entity.getKey().getValue());    if (databaseEntity == null) {      throw new EntityMissingException(entity.getEntityType(),entity.getKey().getValue());    }    verifyOptimisticLock(entity,databaseEntity);  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.N4_ENUM_DECLARATION__LITERALS:    return literals != null && !literals.isEmpty();}return super.eIsSet(featureID);}  }
class C{  private void extractKeys(Properties props){  String keyspec=props.getProperty(io.warp10.continuum.Configuration.DIRECTORY_KAFKA_METADATA_MAC);  if (null != keyspec) {    byte[] key=this.keystore.decodeKey(keyspec);    Preconditions.checkArgument(16 == key.length,"Key " + io.warp10.continuum.Configuration.DIRECTORY_KAFKA_METADATA_MAC + " MUST be 128 bits long.");    this.keystore.setKey(KeyStore.SIPHASH_KAFKA_METADATA,key);  }  keyspec=props.getProperty(io.warp10.continuum.Configuration.DIRECTORY_KAFKA_METADATA_AES);  if (null != keyspec) {    byte[] key=this.keystore.decodeKey(keyspec);    Preconditions.checkArgument(16 == key.length || 24 == key.length || 32 == key.length,"Key " + io.warp10.continuum.Configuration.DIRECTORY_KAFKA_METADATA_AES + " MUST be 128, 192 or 256 bits long.");    this.keystore.setKey(KeyStore.AES_KAFKA_METADATA,key);  }  keyspec=props.getProperty(io.warp10.continuum.Configuration.DIRECTORY_HBASE_METADATA_AES);  if (null != keyspec) {    byte[] key=this.keystore.decodeKey(keyspec);    Preconditions.checkArgument(16 == key.length || 24 == key.length || 32 == key.length,"Key " + io.warp10.continuum.Configuration.DIRECTORY_HBASE_METADATA_AES + " MUST be 128, 192 or 256 bits long.");    this.keystore.setKey(KeyStore.AES_HBASE_METADATA,key);  }  keyspec=props.getProperty(io.warp10.continuum.Configuration.DIRECTORY_PSK);  if (null != keyspec) {    byte[] key=this.keystore.decodeKey(keyspec);    Preconditions.checkArgument(16 == key.length,"Key " + io.warp10.continuum.Configuration.DIRECTORY_PSK + " MUST be 128 bits long.");    this.keystore.setKey(KeyStore.SIPHASH_DIRECTORY_PSK,key);  }  this.keystore.forget();}  }
class C{  private void addBefore(Entry<K,V> existingEntry){  after=existingEntry;  before=existingEntry.before;  before.after=this;  after.before=this;}  }
class C{  protected void annotateInheritedFromClass(AnnotatedTypeMirror type,Set<AnnotationMirror> fromClass){  type.addMissingAnnotations(fromClass);}  }
class C{  private void recordMessage(final BaseMqttMessage message){  if (recentMessages.size() > 0 && message.getTopic().equals(recentMessages.get(0).getTopic()) && message.getPayload().equals(recentMessages.get(0).getPayload())) {    recentMessages.remove(0);  }  recentMessages.add(0,message);  while (recentMessages.size() > MAX_RECENT_MESSAGES) {    recentMessages.remove(MAX_RECENT_MESSAGES);  }  refreshRecentMessages();}  }
class C{  private static <T>void siftUpComparable(int k,T x,Object[] array){  Comparable<? super T> key=(Comparable<? super T>)x;  while (k > 0) {    int parent=(k - 1) >>> 1;    Object e=array[parent];    if (key.compareTo((T)e) >= 0)     break;    array[k]=e;    k=parent;  }  array[k]=key;}  }
class C{  public void testDetectLanguageEs(){  LOGGER.debug("detectLanguage es");  LanguageDetector instance=LanguageDetector.getInstance();  Document doc;  try {    doc=Jsoup.parse(new File(PATH + "es.wikipedia.org-wiki-Accesibilidad_web_20140701.html"),UTF_8);    LOGGER.debug("start detection");    assertEquals("es",instance.detectLanguage(doc.text()).getDetectedLanguage());    assertEquals("es",instance.detectLanguage(doc.text().toLowerCase()).getDetectedLanguage());    assertEquals("es",instance.detectLanguage(doc.text().toUpperCase()).getDetectedLanguage());    LOGGER.debug("detection ended");  } catch (  IOException ex) {    LOGGER.error(ex);  }catch (  NullPointerException npe) {    LOGGER.error("error while fetching page " + npe);  }}  }
class C{  public void deleteBucketImage(String bucketName,GenericRequest genericRequest) throws OSSException, ClientException {  assertParameterNotNull(bucketName,"bucketName");  ensureBucketNameValid(bucketName);  Map<String,String> params=new HashMap<String,String>();  params.put(SUBRESOURCE_IMG,null);  RequestMessage request=new OSSRequestMessageBuilder(getInnerClient()).setEndpoint(getEndpoint()).setMethod(HttpMethod.DELETE).setBucket(bucketName).setParameters(params).setOriginalRequest(genericRequest).build();  doOperation(request,emptyResponseParser,bucketName,null);}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  @Override protected double solveImpl(final Derivative f,final double xAccuracy){  double froot, dfroot, dx, dxold;  double xh, xl;  if (fxMin < 0.0) {    xl=xMin;    xh=xMax;  } else {    xh=xMin;    xl=xMax;  }  dxold=xMax - xMin;  dx=dxold;  froot=f.op(root);  dfroot=f.derivative(root);  evaluationNumber++;  while (evaluationNumber <= getMaxEvaluations()) {    if ((((root - xh) * dfroot - froot) * ((root - xl) * dfroot - froot) > 0.0) || (Math.abs(2.0 * froot) > Math.abs(dxold * dfroot))) {      dxold=dx;      dx=(xh - xl) / 2.0;      root=xl + dx;    } else {      dxold=dx;      dx=froot / dfroot;      root-=dx;    }    if (Math.abs(dx) < xAccuracy)     return root;    froot=f.op(root);    dfroot=f.derivative(root);    evaluationNumber++;    if (froot < 0.0)     xl=root; else     xh=root;  }  throw new ArithmeticException("maximum number of function evaluations exceeded");}  }
class C{  public ChannelSnapshot createSnapshot(){  return new ChannelSnapshot(this,mode);}  }
class C{  @Override public void execute(){  entity.onPrivateListen(event.get("texttype"),event.get("text"));}  }
class C{  public void testSplit2(){  SplittableRandom sr=new SplittableRandom(12345);  for (int reps=0; reps < REPS; ++reps) {    SplittableRandom sc=sr.split();    int i=0;    while (i < NCALLS && sr.nextLong() == sc.nextLong())     ++i;    assertTrue(i < NCALLS);  }}  }
class C{  static int createShader(String resource,int type,String version) throws IOException {  int shader=glCreateShader(type);  ByteBuffer source=ioResourceToByteBuffer(resource,8192);  if (version == null) {    PointerBuffer strings=BufferUtils.createPointerBuffer(1);    IntBuffer lengths=BufferUtils.createIntBuffer(1);    strings.put(0,source);    lengths.put(0,source.remaining());    glShaderSource(shader,strings,lengths);  } else {    PointerBuffer strings=BufferUtils.createPointerBuffer(2);    IntBuffer lengths=BufferUtils.createIntBuffer(2);    ByteBuffer preamble=memUTF8("#version " + version + "\n",false);    strings.put(0,preamble);    lengths.put(0,preamble.remaining());    strings.put(1,source);    lengths.put(1,source.remaining());    glShaderSource(shader,strings,lengths);  }  glCompileShader(shader);  int compiled=glGetShaderi(shader,GL_COMPILE_STATUS);  String shaderLog=glGetShaderInfoLog(shader);  if (shaderLog.trim().length() > 0) {    System.err.println(shaderLog);  }  if (compiled == 0) {    throw new AssertionError("Could not compile shader");  }  return shader;}  }
class C{  public void addConnectionOptions(MqttConnectOptions connectOptions){  mqttConnectOptions=connectOptions;}  }
class C{  public static void check(boolean cond,String msg){  if (!cond)   error(msg);}  }
class C{  public RDFParseException(Throwable t){  this(t,-1,-1);}  }
class C{  public GF2nONBElement(GF2nONBField gf2n,BigInteger val){  mField=gf2n;  mDegree=mField.getDegree();  mLength=gf2n.getONBLength();  mBit=gf2n.getONBBit();  mPol=new long[mLength];  assign(val);}  }
class C{  public Key minKey(){  if (isEmpty())   throw new NoSuchElementException("Priority queue is empty");  return min.key;}  }
class C{  public void gotoPosition(int x,int y){  int start=pointToInt(x,y);  setCaretPosition(start);}  }
class C{  protected void sequence_TerminalExpression(ISerializationContext context,DoubleLiteral semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,GamlPackage.Literals.EXPRESSION__OP) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,GamlPackage.Literals.EXPRESSION__OP));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getTerminalExpressionAccess().getOpDOUBLETerminalRuleCall_1_1_0(),semanticObject.getOp());  feeder.finish();}  }
class C{  @Override public Envelope computeEnvelope(final IScope scope){  return null;}  }
class C{  public static Label icone(String tipo){  Label label=new Label();switch (tipo) {case "INFO":    label.getStyleClass().add("img-dialog");  break;case "ERRO":label.getStyleClass().add("img-dialog-erro");break;case "ALERTA":label.getStyleClass().add("img-dialog-alert");break;case "CONFIRMAR":label.getStyleClass().add("img-dialog-confirmar");break;default :label.getStyleClass().add("img-dialog");break;}return label;}  }
class C{  protected SIPClientTransaction(SIPTransactionStack newSIPStack,MessageChannel newChannelToUse){  super(newSIPStack,newChannelToUse);  setBranch(Utils.getInstance().generateBranchId());  this.messageProcessor=newChannelToUse.messageProcessor;  this.setEncapsulatedChannel(newChannelToUse);  this.notifyOnRetransmit=false;  this.timeoutIfStillInCallingState=false;  if (sipStack.isLoggingEnabled()) {    sipStack.getStackLogger().logDebug("Creating clientTransaction " + this);    sipStack.getStackLogger().logStackTrace();  }  this.sipDialogs=new ConcurrentHashMap();}  }
class C{  public void testBug22359() throws Exception {  if (versionMeetsMinimum(5,0)) {    Statement timeoutStmt=null;    try {      timeoutStmt=this.conn.createStatement();      timeoutStmt.setQueryTimeout(2);      long begin=System.currentTimeMillis();      try {        timeoutStmt.execute("SELECT SLEEP(30)");        fail("Query didn't time out");      } catch (      MySQLTimeoutException timeoutEx) {        long end=System.currentTimeMillis();        assertTrue((end - begin) > 1000);      }    }  finally {      if (timeoutStmt != null) {        timeoutStmt.close();      }    }  }}  }
class C{  public List<String> copy(){  return new ArrayList<String>(warnings);}  }
class C{  public static boolean isExternalStorageWriteable(){  String state=Environment.getExternalStorageState();  return Environment.MEDIA_MOUNTED.equals(state);}  }
class C{  public static void main(String[] args) throws IOException {  int terms=500;  int docs=1000;  int dimension=1200;  int iterations=100;  Random random=new Random();  float[][] cooccurences=randomInit(terms,docs,random);  float[][] coocTrans=transpose(cooccurences);  float[][] docVecs=randomInit(docs,dimension,random);  normalizeRows(docVecs);  float[][] termVecs;  for (int i=0; i < iterations; ++i) {    termVecs=multiplyMatrices(cooccurences,docVecs);    writeSortedFirstDim(termVecs,String.format("./dim_%d.txt",i));    normalizeRows(termVecs);    docVecs=multiplyMatrices(coocTrans,termVecs);    normalizeRows(docVecs);  }}  }
class C{  static Element createParentElement(Path path,Element rootElement) throws ParseException {  Preconditions.checkNotNull(path,"path");  Preconditions.checkNotNull(rootElement,"rootElement");  List<MetadataKey<?>> steps=path.getSteps();  if (steps.isEmpty()) {    return null;  }  Element parent=rootElement;  for (int i=0; i < steps.size() - 1; i++) {    ElementKey<?,?> childKey=(ElementKey<?,?>)steps.get(i);    parent=getOrCreateChild(parent,childKey);  }  return parent;}  }
class C{  public VcfFormatStringAnnotator(AbstractDerivedFormatAnnotation annotation){  assert annotation != null && annotation.getType().getClassType() == String.class;  mAnnotation=annotation;}  }
class C{  private static double distance(double x1,double y1,double x2,double y2){  return Math.sqrt((y2 - y1) * (y2 - y1) + (x2 - x1) * (x2 - x1));}  }
class C{  public boolean isProxied(){  return (!(null == proxyHostName || 0 >= proxyPortNumber));}  }
class C{  public static void packKey(MemoryStoreData storeData){  storeData.rawKey=packKey(storeData.storageDescription,storeData.persistitKey);}  }
class C{  public DeleteAction(@Nullable JComponent target){  this(target,ID);}  }
class C{  @Override public int nextInt(){  return (int)nextLong();}  }
class C{  public static ImageEncoder newInstance(String format,float quality){  ImageEncoder imageEncoder=newInstance(format);  imageEncoder.setQuality(quality);  return imageEncoder;}  }
class C{  public final void prepareNonBlocking(){  prepare(1);}  }
class C{  @Override public void onPageScrolled(int position,float positionOffset,int positionOffsetPixels){}  }
class C{  private boolean isWidgetNewlyCreated(){  long currentFolder=mPreferences.getLong(STATE_CURRENT_FOLDER,ChromeBrowserProviderClient.INVALID_BOOKMARK_ID);  return currentFolder == ChromeBrowserProviderClient.INVALID_BOOKMARK_ID;}  }
class C{  public void resolve(){  if (zone_letter == 'Z') {    mgrs="Latitude limit exceeded";  } else {    StringBuffer sb=new StringBuffer(Integer.toString(zone_number)).append(zone_letter).append(get100kID(easting,northing,zone_number));    StringBuffer seasting=new StringBuffer(Integer.toString((int)easting));    StringBuffer snorthing=new StringBuffer(Integer.toString((int)northing));    if (DEBUG) {      logger.fine(" Resolving MGRS from easting: " + seasting + " derived from "+ easting+ ", and northing: "+ snorthing+ " derived from "+ northing);    }    while (accuracy + 1 > seasting.length()) {      seasting.insert(0,'0');    }    while (accuracy + 1 > snorthing.length()) {      snorthing.insert(0,'0');    }    while (snorthing.length() > 6) {      snorthing.deleteCharAt(0);    }    if (DEBUG) {      logger.fine(" -- modified easting: " + seasting + " and northing: "+ snorthing);    }    try {      sb.append(seasting.substring(1,accuracy + 1)).append(snorthing.substring(1,accuracy + 1));      mgrs=sb.toString();    } catch (    IndexOutOfBoundsException ioobe) {      mgrs=null;    }  }}  }
class C{  @Override public boolean scrollBackward(Selector obj,boolean isVertical,int steps) throws UiObjectNotFoundException {  UiScrollable scrollable=new UiScrollable(obj.toUiSelector());  if (isVertical)   scrollable.setAsVerticalList(); else   scrollable.setAsHorizontalList();  return scrollable.scrollBackward(steps);}  }
class C{  protected void clearEvents(){  sCInterface.clearEvents();}  }
class C{  public void startAutoScroll(int duration,int position){  this.mScrollPeriod=duration;  this.mCurrentPosition=position;  this.mAutoScroll=true;  if (mImageList != null && !mImageList.isEmpty()) {    setImageUrl(mImageList.get(mCurrentPosition));  }  mHandler.removeCallbacks(mScrollRunnable);  mHandler.postDelayed(mScrollRunnable,mScrollPeriod);}  }
class C{  public String name(){  return theName;}  }
class C{  public boolean isHistoricalDataRunning(Contract contract){  for (  Tradestrategy item : m_historyDataRequests.values()) {    if (contract.equals(item.getContract())) {      return true;    }  }  return false;}  }
class C{  @RequestProcessing(value="/admin/add-product",method=HTTPRequestMethod.POST) @Before(adviceClass={StopwatchStartAdvice.class,MallAdminCheck.class}) @After(adviceClass=StopwatchEndAdvice.class) public void addProduct(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response) throws Exception {  final String category=request.getParameter(Product.PRODUCT_CATEGORY);  final String description=request.getParameter(Product.PRODUCT_DESCRIPTION);  final String name=request.getParameter(Product.PRODUCT_NAME);  final String price=request.getParameter(Product.PRODUCT_PRICE);  String imgURL=request.getParameter(Product.PRODUCT_IMG_URL);  final String count=request.getParameter(Product.PRODUCT_COUNT);  final String status=request.getParameter(Product.PRODUCT_STATUS);  if (StringUtils.isBlank(imgURL)) {    imgURL="";  }  if (StringUtils.isBlank(category) || StringUtils.length(category) > 20) {    final AbstractFreeMarkerRenderer renderer=new SkinRenderer();    context.setRenderer(renderer);    renderer.setTemplateName("admin/error.ftl");    final Map<String,Object> dataModel=renderer.getDataModel();    dataModel.put(Keys.MSG,langPropsService.get("invalidProductCategoryLabel"));    filler.fillHeaderAndFooter(request,response,dataModel);    return;  }  try {    final JSONObject product=new JSONObject();    product.put(Product.PRODUCT_CATEGORY,category);    product.put(Product.PRODUCT_DESCRIPTION,description);    product.put(Product.PRODUCT_NAME,name);    product.put(Product.PRODUCT_PRICE,price);    product.put(Product.PRODUCT_IMG_URL,imgURL);    product.put(Product.PRODUCT_COUNT,count);    product.put(Product.PRODUCT_STATUS,status);    productMgmtService.addProduct(product);  } catch (  final Exception e) {    final AbstractFreeMarkerRenderer renderer=new SkinRenderer();    context.setRenderer(renderer);    renderer.setTemplateName("admin/error.ftl");    final Map<String,Object> dataModel=renderer.getDataModel();    dataModel.put(Keys.MSG,e.getMessage());    filler.fillHeaderAndFooter(request,response,dataModel);    return;  }  response.sendRedirect(Latkes.getServePath() + "/admin/products");}  }
class C{  public PointsParser(){  pointsHandler=DefaultPointsHandler.INSTANCE;}  }
class C{  private String detectCharset(byte[] content,Integer offset){  log.debug("detectCharset: offset=" + offset);  if (offset > content.length)   return null;  UniversalDetector detector=new UniversalDetector(null);  detector.handleData(content,offset,content.length - offset > detectBuffer ? detectBuffer : content.length - offset);  detector.dataEnd();  String detectEncoding=detector.getDetectedCharset();  return null == detectEncoding ? detectCharset(content,offset + detectBuffer) : detectEncoding;}  }
class C{  private ZyLayoutCreator(){}  }
class C{  public double nextDouble(){  return nextDouble(this.freedom);}  }
class C{  @SuppressWarnings({"StringConcatenationInsideStringBufferAppend"}) public static String print(QueryPlanIndex[] indexSpecs){  StringBuilder buffer=new StringBuilder();  buffer.append("QueryPlanIndex[]\n");  String delimiter="";  for (int i=0; i < indexSpecs.length; i++) {    buffer.append(delimiter);    buffer.append("  index spec stream " + i + " : \n"+ (indexSpecs[i] == null ? "    null" : indexSpecs[i]));    delimiter="\n";  }  return buffer.toString() + "\n";}  }
class C{  public Bundler putIntArray(String key,int[] value){  bundle.putIntArray(key,value);  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:20.469 -0500",hash_original_method="81B760547C7425A938D45D7063876C66",hash_generated_method="C859D3C5D2A0DB54DDA65A6979CC60D1") public SIPServerTransaction createServerTransaction(MessageChannel encapsulatedMessageChannel){  if (unlimitedServerTransactionTableSize) {    return new SIPServerTransaction(this,encapsulatedMessageChannel);  } else {    float threshold=((float)(serverTransactionTable.size() - serverTransactionTableLowaterMark)) / ((float)(serverTransactionTableHighwaterMark - serverTransactionTableLowaterMark));    boolean decision=Math.random() > 1.0 - threshold;    if (decision) {      return null;    } else {      return new SIPServerTransaction(this,encapsulatedMessageChannel);    }  }}  }
class C{  public void deleteFeaturizers(Set<String> disabledFeaturizers){  System.err.println("Featurizers to disable: " + disabledFeaturizers);  Set<String> foundFeaturizers=new HashSet<String>();  List<Featurizer<TK,FV>> filteredFeaturizers=new ArrayList<>();  for (  Featurizer<TK,FV> f : featurizers) {    String className=f.getClass().getName();    if (f instanceof FeatureExtractor)     ((FeatureExtractor<?,?>)f).deleteFeaturizers(disabledFeaturizers);    if (!disabledFeaturizers.contains(className)) {      System.err.println("Keeping featurizer: " + f);      filteredFeaturizers.add(f);    } else {      System.err.println("Disabling featurizer: " + f);      foundFeaturizers.add(className);    }  }  for (  String f : disabledFeaturizers)   if (!foundFeaturizers.contains(f))   System.err.println("No featurizer to disable for class: " + f);  featurizers=filteredFeaturizers;}  }
class C{  public String saveLocalizedValues(){  setLocalizeVisible(false);  if (selectedService == null) {    return OUTCOME_ERROR;  }  saveLocalizedValues=true;  if (selectedService != null) {    String locale=getUserFromSession().getLocale();    selectedService.setName(LocaleUtils.get(localization.getNames(),locale));    selectedService.setShortDescription(LocaleUtils.get(localization.getShortDescriptions(),locale));    selectedService.setDescription(LocaleUtils.get(localization.getDescriptions(),locale));    selectedService.setCustomTabName(LocaleUtils.get(localization.getCustomTabNames(),locale));  }  dirty=true;  menuBean.setCurrentPageLink(MenuBean.LINK_SERVICE_EDIT);  return null;}  }
class C{  public void applyForce(float forceX,float forceY,float pointX,float pointY,boolean wake){  tmp.set(forceX,forceY);  tmp2.set(pointX,pointY);  body.applyForce(tmp,tmp2);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case RegularExpressionPackage.SIMPLE_QUANTIFIER__QUANTIFIER:    return getQuantifier();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public MP3Player(PlayerCallback playerCallback,int audioBufferCapacityMs,int decodeBufferCapacityMs){  super(playerCallback,audioBufferCapacityMs,decodeBufferCapacityMs);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override protected EClass eStaticClass(){  return GamlPackage.Literals.IF;}  }
class C{  public static boolean equals(DocSet a,DocSet b){  DocIterator iter1=a.iterator();  DocIterator iter2=b.iterator();  for (; ; ) {    boolean n1=iter1.hasNext();    boolean n2=iter2.hasNext();    if (n1 != n2) {      return false;    }    if (!n1)     return true;    int d1=iter1.nextDoc();    int d2=iter2.nextDoc();    if (d1 != d2) {      return false;    }  }}  }
class C{  public static IXMLReader fileReader(String filename) throws FileNotFoundException, IOException {  StdXMLReader r=new StdXMLReader(new FileInputStream(filename));  r.setSystemID(filename);  for (int i=0; i < r.readers.size(); i++) {    StackedReader sr=(StackedReader)r.readers.elementAt(i);    sr.systemId=r.currentReader.systemId;  }  return r;}  }
class C{  public XObject execute(XPathContext xctxt,boolean destructiveOK) throws javax.xml.transform.TransformerException {  org.apache.xml.utils.PrefixResolver xprefixResolver=xctxt.getNamespaceContext();  XObject result;  if (m_fixUpWasCalled) {    if (m_isGlobal)     result=xctxt.getVarStack().getGlobalVariable(xctxt,m_index,destructiveOK); else     result=xctxt.getVarStack().getLocalVariable(xctxt,m_index,destructiveOK);  } else {    result=xctxt.getVarStack().getVariableOrParam(xctxt,m_qname);  }  if (null == result) {    warn(xctxt,XPATHErrorResources.WG_ILLEGAL_VARIABLE_REFERENCE,new Object[]{m_qname.getLocalPart()});    result=new XNodeSet(xctxt.getDTMManager());  }  return result;}  }
class C{  private void $$$setupUI$$$(){  settingsPane=new JPanel();  settingsPane.setLayout(new GridLayoutManager(4,1,new Insets(0,0,0,0),-1,-1));  final JPanel panel1=new JPanel();  panel1.setLayout(new GridLayoutManager(4,1,new Insets(0,0,0,0),-1,-1));  settingsPane.add(panel1,new GridConstraints(3,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,null,null,null,0,false));  panel1.setBorder(BorderFactory.createTitledBorder("Variables"));  final JLabel label1=new JLabel();  label1.setText("Registered global variables (one variable per line):");  panel1.add(label1,new GridConstraints(2,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_FIXED,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  globalVarAutocompletion=new JCheckBox();  globalVarAutocompletion.setSelected(true);  globalVarAutocompletion.setText("Offer registered global variables in autocompletion");  globalVarAutocompletion.setMnemonic('O');  globalVarAutocompletion.setDisplayedMnemonicIndex(0);  panel1.add(globalVarAutocompletion,new GridConstraints(1,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  final JScrollPane scrollPane1=new JScrollPane();  panel1.add(scrollPane1,new GridConstraints(3,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW,null,null,null,0,false));  globalVarList=new JTextArea();  globalVarList.setMargin(new Insets(5,5,5,5));  globalVarList.setText("");  globalVarList.putClientProperty("html.disable",Boolean.TRUE);  scrollPane1.setViewportView(globalVarList);  globalFunctionVarDefs=new JCheckBox();  globalFunctionVarDefs.setText("Variables defined in functions are globally visible");  panel1.add(globalFunctionVarDefs,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  final JPanel panel2=new JPanel();  panel2.setLayout(new GridLayoutManager(1,1,new Insets(0,0,0,0),-1,-1));  settingsPane.add(panel2,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,1,null,null,null,0,false));  panel2.setBorder(BorderFactory.createTitledBorder("Language level"));  bash4Support=new JCheckBox();  bash4Support.setText("Support Bash 4.x language elements");  bash4Support.setMnemonic('S');  bash4Support.setDisplayedMnemonicIndex(0);  panel2.add(bash4Support,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  final JPanel panel3=new JPanel();  panel3.setLayout(new GridLayoutManager(4,1,new Insets(0,0,0,0),-1,-1));  settingsPane.add(panel3,new GridConstraints(1,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,1,null,null,null,0,false));  panel3.setBorder(BorderFactory.createTitledBorder("Autocompletion"));  autocompleteInternalVars=new JCheckBox();  autocompleteInternalVars.setText("Show built-in variables ($PWD, $PATH, ...)");  panel3.add(autocompleteInternalVars,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  final Spacer spacer1=new Spacer();  panel3.add(spacer1,new GridConstraints(3,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_VERTICAL,1,GridConstraints.SIZEPOLICY_WANT_GROW,null,null,null,0,false));  autocompleteInternalCommands=new JCheckBox();  autocompleteInternalCommands.setText("Show built-in commands (echo, export, ...)");  panel3.add(autocompleteInternalCommands,new GridConstraints(1,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  autocompletePathCommands=new JCheckBox();  autocompletePathCommands.setText("Show commands in $PATH");  panel3.add(autocompletePathCommands,new GridConstraints(2,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  final JPanel panel4=new JPanel();  panel4.setLayout(new GridLayoutManager(5,1,new Insets(0,0,0,0),-1,-1));  settingsPane.add(panel4,new GridConstraints(2,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,1,null,null,null,0,false));  panel4.setBorder(BorderFactory.createTitledBorder("Experimental features - use at your own risk!"));  enableFormatterCheckbox=new JCheckBox();  enableFormatterCheckbox.setText("Enable formatter");  panel4.add(enableFormatterCheckbox,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  final Spacer spacer2=new Spacer();  panel4.add(spacer2,new GridConstraints(3,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_VERTICAL,1,GridConstraints.SIZEPOLICY_WANT_GROW,null,null,null,0,false));  enableEvalEscapesCheckbox=new JCheckBox();  enableEvalEscapesCheckbox.setText("Support escaped values in 'eval'-code");  panel4.add(enableEvalEscapesCheckbox,new GridConstraints(1,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));}  }
class C{  public CEventTableMenu(final JTable table,final CDebugPerspectiveModel model,final List<ITraceEvent> traces){  graphModel=model.getGraphModel();  addOpenFunction(SwingUtilities.getWindowAncestor(table),traces);  add(new JMenuItem(CActionProxy.proxy(new CSetBreakpointsAction(model,traces))));  addSeparator();  add(new JMenuItem(CActionProxy.proxy(new CSearchTableAction(SwingUtilities.getWindowAncestor(table),table))));  add(new CopySelectionAction(table));}  }
class C{  public final double kappa(){  double[] sumRows=new double[m_ConfusionMatrix.length];  double[] sumColumns=new double[m_ConfusionMatrix.length];  double sumOfWeights=0;  for (int i=0; i < m_ConfusionMatrix.length; i++) {    for (int j=0; j < m_ConfusionMatrix.length; j++) {      sumRows[i]+=m_ConfusionMatrix[i][j];      sumColumns[j]+=m_ConfusionMatrix[i][j];      sumOfWeights+=m_ConfusionMatrix[i][j];    }  }  double correct=0, chanceAgreement=0;  for (int i=0; i < m_ConfusionMatrix.length; i++) {    chanceAgreement+=(sumRows[i] * sumColumns[i]);    correct+=m_ConfusionMatrix[i][i];  }  chanceAgreement/=(sumOfWeights * sumOfWeights);  correct/=sumOfWeights;  if (chanceAgreement < 1) {    return (correct - chanceAgreement) / (1 - chanceAgreement);  } else {    return 1;  }}  }
class C{  public static Map<String,String> parseCsKeyValue(String str){  Map<String,String> properties=new HashMap<String,String>();  String[] tokens=null;  if (str != null) {    tokens=str.trim().split(",");  }  for (  String token : tokens) {    if (!token.isEmpty()) {      String[] parts=token.split("=",2);      if (parts.length == 2) {        properties.put(parts[0],parts[1]);      }    }  }  return properties;}  }
class C{  private View makeAndAddView(int position,int y,boolean flow,int childrenLeft,boolean selected){  View child;  if (!mDataChanged) {    child=mRecycler.getActiveView(position);    if (child != null) {      setupChild(child,position,y,flow,childrenLeft,selected,true);      return child;    }  }  child=obtainView(position,mIsScrap);  setupChild(child,position,y,flow,childrenLeft,selected,mIsScrap[0]);  return child;}  }
class C{  @SuppressWarnings("UnusedDeclaration") public boolean isEnabled(int type){  return events.isEnabled(type);}  }
class C{  protected boolean accept(E object) throws X {  if (!initialized) {synchronized (this) {      if (!initialized) {        includeSet=addSecondSet(arg2,makeSet());        initialized=true;      }    }  }  if (inIncludeSet(object)) {    if (distinct) {      removeFromIncludeSet(object);    }    return true;  }  return false;}  }
class C{  public TransformerConfigurationException(Throwable e){  super(e);}  }
class C{  private void showMissingPermissionError(){  PermissionUtils.PermissionDeniedDialog.newInstance(true).show(getSupportFragmentManager(),"dialog");}  }
class C{  protected Probe(String name,long start){  this.name=name;  this.start=start;}  }
class C{  public void render(Graphics g){  if (generator != null) {    if ((needToRegenerate && generator.needGenerateToRender()) || !isVisible()) {      Debug.message("grid","OMGrid: need to generate or is not visible!");      return;    }  }  super.render(g);}  }
class C{  @Override public boolean contains(Object object){  return indexOf(object,0) != -1;}  }
class C{  public void sub(NamedRangeSet other){  List<NamedRange> newRanges=new ArrayList<NamedRange>();  OUTER_LOOP:   for (  NamedRange range : ranges) {    NamedRange thisRange=new NamedRange(range.start,range.end,range.name);    for (    NamedRange otherRange : other.ranges) {      if (otherRange.start <= thisRange.start && otherRange.end >= thisRange.end) {        continue OUTER_LOOP;      }      if (otherRange.end < thisRange.start || otherRange.start > thisRange.end) {      } else       if (otherRange.start <= thisRange.start) {        thisRange.start=otherRange.end + 1;      } else       if (otherRange.end >= thisRange.end) {        thisRange.end=otherRange.start - 1;      } else {        newRanges.add(new NamedRange(thisRange.start,otherRange.start - 1,thisRange.name));        thisRange.start=otherRange.end + 1;      }    }    newRanges.add(thisRange);  }  ranges=newRanges;}  }
class C{  public void flush(){}  }
class C{  public WeakAlarm(String name,AlarmListener listener,long delta){  super(name,listener,delta);}  }
class C{  private boolean isOnClassIgnoreList(String name){  return isOnList(classIgnoreList,name);}  }
class C{  protected String escape(String s){  StringBuffer result;  int i;  char c;  if ((s.indexOf('\"') > -1) || (s.indexOf('\\') > -1) || (s.indexOf('\b') > -1)|| (s.indexOf('\f') > -1)|| (s.indexOf('\n') > -1)|| (s.indexOf('\r') > -1)|| (s.indexOf('\t') > -1)) {    result=new StringBuffer();    for (i=0; i < s.length(); i++) {      c=s.charAt(i);      if (c == '\"') {        result.append("\\\"");      } else       if (c == '\\') {        result.append("\\\\");      } else       if (c == '\b') {        result.append("\\b");      } else       if (c == '\f') {        result.append("\\f");      } else       if (c == '\n') {        result.append("\\n");      } else       if (c == '\r') {        result.append("\\r");      } else       if (c == '\t') {        result.append("\\t");      } else {        result.append(c);      }    }  } else {    result=new StringBuffer(s);  }  return result.toString();}  }
class C{  public SmaliClassDetailLoader(ZipFile apkFile){  this(apkFile,true);}  }
class C{  public MemoryCircuitBreaker(ByteSizeValue limit,double overheadConstant,ESLogger logger){  this(limit,overheadConstant,null,logger);}  }
class C{  @Override public String toString(){  StringBuilder retval=new StringBuilder(80);  retval.append(Integer.toHexString(hashCode()));  retval.append("[");  retval.append("SSLEngine[hostname=");  String host=getPeerHost();  retval.append((host == null) ? "null" : host);  retval.append(" port=");  retval.append(Integer.toString(getPeerPort()));  retval.append("] ");  retval.append(getSession().getCipherSuite());  retval.append("]");  return retval.toString();}  }
class C{  public static <T>T checkNotNull(T reference,Object errorMessage){  return com.google.common.base.Preconditions.checkNotNull(reference,errorMessage);}  }
class C{  public AddNodesResponse AddNodes(AddNodesRequest req) throws ServiceFaultException, ServiceResultException {  return (AddNodesResponse)channel.serviceRequest(req);}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  @Inline static void compilePutfieldBarrierExtent(Assembler asm,GPR offset,int locationMetadata,BaselineCompilerImpl compiler){  putfieldStoreBarrierHelper(asm,compiler,offset,locationMetadata,Entrypoints.extentFieldWriteBarrierMethod);}  }
class C{  public static String cutSuffix(String string,String suffix){  if (string.endsWith(suffix)) {    string=string.substring(0,string.length() - suffix.length());  }  return string;}  }
class C{  public void writeByte(int b) throws IOException {  out.write(b);  written++;}  }
class C{  public static void printErrorUndefined(String propName){  System.err.println("JVM property " + propName + " should be defined "+ "(use -D"+ propName+ "=...)");}  }
class C{  TransferHandler.DropLocation dropLocationForPoint(Point p){  return null;}  }
class C{  public int copyLinesFrom(MProject project){  if (isProcessed() || project == null)   return 0;  int count=0;  MProjectLine[] fromLines=project.getLines();  for (int i=0; i < fromLines.length; i++) {    if ((fromLines[i].getC_ProjectPhase_ID() != 0) || (fromLines[i].getC_ProjectTask_ID() != 0))     continue;    MProjectLine line=new MProjectLine(getCtx(),0,project.get_TrxName());    PO.copyValues(fromLines[i],line,getAD_Client_ID(),getAD_Org_ID());    line.setC_Project_ID(getC_Project_ID());    line.setInvoicedAmt(Env.ZERO);    line.setInvoicedQty(Env.ZERO);    line.setC_OrderPO_ID(0);    line.setC_Order_ID(0);    line.setProcessed(false);    if (line.save())     count++;  }  if (fromLines.length != count)   log.log(Level.SEVERE,"Lines difference - Project=" + fromLines.length + " <> Saved="+ count);  return count;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String streamsHeader="";  String outputHeader=null;  int row, col, x, y;  int progress=0;  double myPointer, neighbourPointer;  int i;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  double[] outflowingVals=new double[]{1,2,4,8,16,32,64,128};  boolean streamsSpecified=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  if (!args[1].toLowerCase().equals("not specified")) {    streamsHeader=args[1];    streamsSpecified=true;  }  outputHeader=args[2];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster pntr=new WhiteboxRaster(inputHeader,"r");    int rows=pntr.getNumberRows();    int cols=pntr.getNumberColumns();    double noData=pntr.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.INTEGER,noData);    output.setDataScale(WhiteboxRaster.DataScale.BOOLEAN);    output.setPreferredPalette("spectrum_black_background.pal");    boolean isParallel;    if (!streamsSpecified) {      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          myPointer=pntr.getValue(row,col);          if (myPointer != noData) {            isParallel=false;            for (i=0; i < 8; i++) {              if (myPointer != outflowingVals[i]) {                neighbourPointer=pntr.getValue(row + dY[i],col + dX[i]);                if (neighbourPointer == myPointer && neighbourPointer != inflowingVals[i]) {                  isParallel=true;                  break;                }              }            }            if (isParallel) {              output.setValue(row,col,1);            } else {              output.setValue(row,col,0);            }          } else {            output.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }    } else {      WhiteboxRaster streams=new WhiteboxRaster(streamsHeader,"r");      if (streams.getNumberRows() != rows || streams.getNumberColumns() != cols) {        showFeedback("The flow pointer and streams file must have the same number " + "\nof rows and columns.");        return;      }      double streamsNoData=streams.getNoDataValue();      double streamVal, neighbourStreamVal;      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          myPointer=pntr.getValue(row,col);          streamVal=streams.getValue(row,col);          if (myPointer != noData && streamVal != streamsNoData && streamVal > 0) {            isParallel=false;            for (i=0; i < 8; i++) {              if (myPointer != outflowingVals[i]) {                neighbourPointer=pntr.getValue(row + dY[i],col + dX[i]);                neighbourStreamVal=streams.getValue(row + dY[i],col + dX[i]);                if (neighbourPointer == myPointer && neighbourPointer != inflowingVals[i] && neighbourStreamVal > 0) {                  isParallel=true;                  break;                }              }            }            if (isParallel) {              output.setValue(row,col,1);            } else {              output.setValue(row,col,0);            }          } else {            output.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }      streams.close();    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void mapTreeViewerColumn(Enum<?> key,TreeViewerColumn column){  treeViewerColumnMap.put(key,column);}  }
class C{  public CLocalNodeCommentWrapper(final INaviViewNode node){  m_node=node;}  }
class C{  public ImageSource tilingEnabled(){  return tiling(true);}  }
class C{  private double calcLevelAlphaDetail(double alpha,int level){  return alpha / Math.pow(2.0,level - 1);}  }
class C{  public EliminacionSerieVO abrirEliminacion(String idEliminacion,boolean mostrarResumenUinstalacion){  EliminacionSerieVO eliminacion=getEliminacion(idEliminacion);  getConditionChecker().configureEliminacion(eliminacion);  if (eliminacion != null && mostrarResumenUinstalacion) {    addResumenUinstEliminacionVO(eliminacion);  }  return eliminacion;}  }
class C{  public void processingInstruction(String target,String data) throws org.xml.sax.SAXException {  append(m_doc.createProcessingInstruction(target,data));}  }
class C{  public V cloneValue(V v){  return v;}  }
class C{  private int explosion(X_M_ProductionPlan pp,MProduct product,BigDecimal qty,int line) throws Exception {  MPPProductBOM bom=MPPProductBOM.getDefault(product,get_TrxName());  if (bom == null) {    raiseError("Do not exist default BOM for this product :" + product.getValue() + "-"+ product.getName(),"");  }  MPPProductBOMLine[] bom_lines=bom.getLines(new Timestamp(System.currentTimeMillis()));  m_level+=1;  int components=0;  line=line * m_level;  for (  MPPProductBOMLine bomline : bom_lines) {    MProduct component=MProduct.get(getCtx(),bomline.getM_Product_ID());    if (component.isBOM() && !component.isStocked()) {      explosion(pp,component,bomline.getQtyBOM(),line);    } else {      line+=1;      X_M_ProductionLine pl=new X_M_ProductionLine(getCtx(),0,get_TrxName());      pl.setAD_Org_ID(pp.getAD_Org_ID());      pl.setLine(line);      pl.setDescription(bomline.getDescription());      pl.setM_Product_ID(bomline.getM_Product_ID());      pl.setM_Locator_ID(pp.getM_Locator_ID());      pl.setM_ProductionPlan_ID(pp.getM_ProductionPlan_ID());      pl.setMovementQty(bomline.getQtyBOM().multiply(qty).negate());      pl.saveEx();      components+=1;    }  }  return components;}  }
class C{  public String evaluate(Kernel kernel,Instances data) throws Exception {  long startTime;  long endTime;  int i;  int n;  m_Result=new StringBuffer();  startTime=System.currentTimeMillis();  kernel.buildKernel(data);  endTime=System.currentTimeMillis();  m_Result.append("\n=== Model ===\n\n");  if (Utils.joinOptions(getUserOptions()).trim().length() != 0) {    m_Result.append("Options: " + Utils.joinOptions(getUserOptions()) + "\n\n");  }  m_Result.append(kernel.toString() + "\n");  m_Evaluations=new double[data.numInstances()][data.numInstances()];  for (n=0; n < data.numInstances(); n++) {    for (i=n; i < data.numInstances(); i++) {      m_Evaluations[n][i]=kernel.eval(n,i,data.instance(n));    }  }  if (kernel instanceof CachedKernel) {    for (n=0; n < data.numInstances(); n++) {      for (i=n; i < data.numInstances(); i++) {        m_Evaluations[n][i]=kernel.eval(n,i,data.instance(n));      }    }  }  m_NumEvals=kernel.numEvals();  m_NumCacheHits=kernel.numCacheHits();  m_Result.append("\n=== Evaluation ===\n\n");  if (kernel instanceof CachedKernel) {    m_Result.append("Cache size   : " + ((CachedKernel)kernel).getCacheSize() + "\n");  }  m_Result.append("# Evaluations: " + m_NumEvals + "\n");  m_Result.append("# Cache hits : " + m_NumCacheHits + "\n");  m_Result.append("Elapsed time : " + (((double)(endTime - startTime)) / 1000) + "s\n");  return m_Result.toString();}  }
class C{  public XObject executeRelativePathPattern(XPathContext xctxt,StepPattern prevStep) throws javax.xml.transform.TransformerException {  XObject score=NodeTest.SCORE_NONE;  int context=xctxt.getCurrentNode();  DTM dtm=xctxt.getDTM(context);  if (null != dtm) {    int predContext=xctxt.getCurrentNode();    DTMAxisTraverser traverser;    int axis=m_axis;    boolean needToTraverseAttrs=WalkerFactory.isDownwardAxisOfMany(axis);    boolean iterRootIsAttr=(dtm.getNodeType(xctxt.getIteratorRoot()) == DTM.ATTRIBUTE_NODE);    if ((Axis.PRECEDING == axis) && iterRootIsAttr) {      axis=Axis.PRECEDINGANDANCESTOR;    }    traverser=dtm.getAxisTraverser(axis);    for (int relative=traverser.first(context); DTM.NULL != relative; relative=traverser.next(context,relative)) {      try {        xctxt.pushCurrentNode(relative);        score=execute(xctxt);        if (score != NodeTest.SCORE_NONE) {          if (executePredicates(xctxt,dtm,context))           return score;          score=NodeTest.SCORE_NONE;        }        if (needToTraverseAttrs && iterRootIsAttr && (DTM.ELEMENT_NODE == dtm.getNodeType(relative))) {          int xaxis=Axis.ATTRIBUTE;          for (int i=0; i < 2; i++) {            DTMAxisTraverser atraverser=dtm.getAxisTraverser(xaxis);            for (int arelative=atraverser.first(relative); DTM.NULL != arelative; arelative=atraverser.next(relative,arelative)) {              try {                xctxt.pushCurrentNode(arelative);                score=execute(xctxt);                if (score != NodeTest.SCORE_NONE) {                  if (score != NodeTest.SCORE_NONE)                   return score;                }              }  finally {                xctxt.popCurrentNode();              }            }            xaxis=Axis.NAMESPACE;          }        }      }  finally {        xctxt.popCurrentNode();      }    }  }  return score;}  }
class C{  private void removeNonArraysFieldsIfNewSettingsContainsFieldAsArray(Map<String,String> settings){  List<String> prefixesToRemove=new ArrayList<>();  for (  final Map.Entry<String,String> entry : settings.entrySet()) {    final Matcher matcher=ARRAY_PATTERN.matcher(entry.getKey());    if (matcher.matches()) {      prefixesToRemove.add(matcher.group(1));    } else     if (Iterables.any(map.keySet(),startsWith(entry.getKey() + "."))) {      prefixesToRemove.add(entry.getKey());    }  }  for (  String prefix : prefixesToRemove) {    Iterator<Map.Entry<String,String>> iterator=map.entrySet().iterator();    while (iterator.hasNext()) {      Map.Entry<String,String> entry=iterator.next();      if (entry.getKey().startsWith(prefix + ".") || entry.getKey().equals(prefix)) {        iterator.remove();      }    }  }}  }
class C{  public DragClicked(GraphPanel component){  this.component=component;}  }
class C{  @Override public UpdateResponse deleteById(String id) throws SolrServerException, IOException {  UpdateResponse ur=null;  if (this.solr0 != null)   ur=this.solr0.deleteById(id);  if (this.solr1 != null)   ur=this.solr1.deleteById(id);  return ur;}  }
class C{  @Override public boolean performFinish(){  if (dataSource.isProvided()) {    UIUtils.showMessageBox(getShell(),"Read-only connection","This connection was provided by system administrator.\nIts settings can not be changed.",SWT.ICON_ERROR);    return false;  }  if (!CommonUtils.isEmpty(dataSource.getLockPasswordHash())) {    if (!checkLockPassword()) {      return false;    }  }  dataSource.setUpdateDate(new Date());  saveSettings(dataSource);  dataSource.getRegistry().updateDataSource(dataSource);  return true;}  }
class C{  @Timed @ExceptionMetered @GET @Produces(APPLICATION_JSON) public Iterable<String> secretListing(@Auth AutomationClient automationClient,@QueryParam("idx") Integer idx,@QueryParam("num") Integer num,@DefaultValue("true") @QueryParam("newestFirst") boolean newestFirst){  if (idx != null && num != null) {    if (idx < 0 || num < 0) {      throw new BadRequestException("Index and num must both be positive when retrieving batched secrets!");    }    return secretController.getSecretsBatched(idx,num,newestFirst).stream().map(null).collect(toList());  }  return secretController.getSanitizedSecrets(null,null).stream().map(null).collect(toSet());}  }
class C{  private static void validateTextField(ServiceField field,String value){  if (StringUtils.isNotBlank(value)) {    try {      validateRegex(field.getName(),value,field.getValidation().getRegEx());    } catch (    Exception e) {      throw APIException.badRequests.serviceFieldNonText(field.getName());    }    if (field.getValidation().getMin() != null && value.length() < field.getValidation().getMin()) {      throw APIException.badRequests.serviceFieldBelowMinLength(field.getName());    }    if (field.getValidation().getMax() != null && value.length() > field.getValidation().getMax()) {      throw APIException.badRequests.serviceFieldBeyondMaxLength(field.getName());    }  }}  }
class C{  public static ConditionOperand CMPL_EQUAL(){  return new ConditionOperand(CMPL_EQUAL);}  }
class C{  public void fireBlockDownloaded(){  for (  ViewSystem viewSystem : super.getViewSystem()) {    viewSystem.blockDownloaded();  }  if (getModel() != null) {    List<WalletData> perWalletModelDataList=getModel().getPerWalletModelDataList();    if (perWalletModelDataList != null) {      for (      WalletData loopPerWalletModelData : perWalletModelDataList) {        if (loopPerWalletModelData.getWalletInfo() != null) {synchronized (loopPerWalletModelData.getWalletInfo()) {            loopPerWalletModelData.setDirty(true);          }        } else {          loopPerWalletModelData.setDirty(true);        }      }    }  }}  }
class C{  public PcdRunner(GraphWrapper graphWrapper,Parameters params,KnowledgeBoxModel knowledgeBoxModel){  super(graphWrapper.getGraph(),params,knowledgeBoxModel);}  }
class C{  public DefaultRetryPolicy(int initialTimeoutMs,int maxNumRetries,float backoffMultiplier){  mCurrentTimeoutMs=initialTimeoutMs;  mMaxNumRetries=maxNumRetries;  mBackoffMultiplier=backoffMultiplier;}  }
class C{  private void doWork(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  response.setDateHeader("Expires",0);  response.setHeader("Cache-Control","no-cache");  response.setHeader("Pragma","no-cache");  response.setContentType("text/html; charset=UTF-8");  String code=RequestUtils.parseRequestParameterAsString(request,"OfficeCode");  HttpSession session=request.getSession();  UseCaseConf useCaseConf=(UseCaseConf)session.getAttribute(J_USECASECONF);  PrintWriter writer=response.getWriter();  try {    bookUseCase.validateOfficeCode(useCaseConf,code);    Document xmlDocument=bookUseCase.getBooks(useCaseConf);    String xslPath=ContextUtil.getRealPath(session.getServletContext(),XSL_LEST_RELATIVE_PATH);    if (_logger.isDebugEnabled()) {      _logger.debug("XSL path : " + xslPath);    }    Templates cachedXSLT=factory.newTemplates(new StreamSource(new InputStreamReader(new BufferedInputStream(new FileInputStream(xslPath)))));    Transformer transformer=cachedXSLT.newTransformer();    DocumentSource source=new DocumentSource(xmlDocument);    StreamResult result=new StreamResult(writer);    transformer.transform(source,result);  } catch (  ValidationException e) {    _logger.fatal("Error de validacion",e);    ResponseUtils.generateJavaScriptLog(writer,RBUtil.getInstance(useCaseConf.getLocale()).getProperty(Keys.I18N_EXCEPTION_VALIDATIONEXCEPTION));  }catch (  BookException e) {    _logger.fatal("Error en el libro",e);    ResponseUtils.generateJavaScriptError(writer,e);  }catch (  SessionException e) {    _logger.fatal("Error en la sesion",e);    ResponseUtils.generateJavaScriptError(writer,e);  }catch (  TransformerConfigurationException e) {    _logger.fatal("Error al obtener la lista de libros",e);    ResponseUtils.generateJavaScriptLog(writer,RBUtil.getInstance(useCaseConf.getLocale()).getProperty(Keys.I18N_ISICRESSRV_ERR_CREATING_LESTREE_OBJ));  }catch (  TransformerFactoryConfigurationError e) {    _logger.fatal("Error al obtener la lista de libros",e);    ResponseUtils.generateJavaScriptLog(writer,RBUtil.getInstance(useCaseConf.getLocale()).getProperty(Keys.I18N_ISICRESSRV_ERR_CREATING_LESTREE_OBJ));  }catch (  TransformerException e) {    _logger.fatal("Error al obtener la lista de libros",e);    ResponseUtils.generateJavaScriptLog(writer,RBUtil.getInstance(useCaseConf.getLocale()).getProperty(Keys.I18N_ISICRESSRV_ERR_CREATING_LESTREE_OBJ));  }catch (  Exception e) {    _logger.fatal("Error al obtener la lista de libros",e);    ResponseUtils.generateJavaScriptLog(writer,RBUtil.getInstance(useCaseConf.getLocale()).getProperty(Keys.I18N_ISICRESSRV_ERR_CREATING_LESTREE_OBJ));  }}  }
class C{  public ChildViewCache(final View parentView){  if (parentView == null) {    throw new IllegalArgumentException("parentView cannot be null");  }  this.parentView=parentView;}  }
class C{  public void test_ConstructorLAttributedCharacterIteratorII(){  try {    new AttributedString(new testAttributedCharacterIterator(),0,0);  } catch (  Exception e) {    fail("Unexpected exception " + e.toString());  }  try {    new AttributedString(new testAttributedCharacterIterator(),-1,0);    fail("Expected IllegalArgumentException was not thrown");  } catch (  IllegalArgumentException e) {  }  try {    new AttributedString(new testAttributedCharacterIterator(),0,-1);    fail("Expected IllegalArgumentException was not thrown");  } catch (  IllegalArgumentException e) {  }}  }
class C{  @Override public boolean allocateBwForContainer(Container container,long bw){  deallocateBwForContainer(container);  if (getAvailableVmBw() >= bw) {    setAvailableVmBw(getAvailableVmBw() - bw);    getContainerBwTable().put(container.getUid(),bw);    container.setCurrentAllocatedBw(getAllocatedBwForContainer(container));    return true;  }  container.setCurrentAllocatedBw(getAllocatedBwForContainer(container));  return false;}  }
class C{  public Seq<C> takeWhile(Predicate<C> condition){  Objects.requireNonNull(condition);  Itr itr=new Itr();  MutableSeq<C> seq=Seqs.newMutableSeq();  while (itr.hasNext()) {    C candidate=itr.next();    if (!condition.test(candidate)) {      break;    }    seq.appendInPlace(candidate);  }  return seq;}  }
class C{  public CFilterAction(){  super("",new ImageIcon(CMain.class.getResource("data/funnel.png")));}  }
class C{  private boolean readFile(final File fl) throws IOException, FileNotFoundException {  boolean success=false;  BufferedReader reader=null;  try {    reader=new BufferedReader(new InputStreamReader(new FileInputStream(fl)));    int line=1;    String readLine=null;    while (reader.ready() && (readLine=reader.readLine()) != null) {      parseValue(readLine,line);      line++;    }    reader.close();    success=true;  }  finally {    if (reader != null) {      reader.close();    }  }  return success;}  }
class C{  static boolean isAlpha(int ch){  return ((ch >= 'A' && ch <= 'Z') || (ch >= 'a' && ch <= 'z'));}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected boolean isRetrieveResources(){  AVList params=(AVList)this.getValue(AVKey.CONSTRUCTION_PARAMETERS);  if (params == null)   return false;  Boolean b=(Boolean)params.getValue(AVKey.RETRIEVE_PROPERTIES_FROM_SERVICE);  return b != null && b;}  }
class C{  public void paintSplitPaneBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public void endKeySetSend(long startTime,boolean failed){  long duration=getStatTime() - startTime;  endClientOpSend(duration,failed);  this.sendStats.incInt(keySetSendInProgressId,-1);  int endKeySetSendId;  if (failed) {    endKeySetSendId=keySetSendFailedId;  } else {    endKeySetSendId=keySetSendId;  }  this.sendStats.incInt(endKeySetSendId,1);  this.stats.incLong(keySetSendDurationId,duration);}  }
class C{  protected void applyLoadDataLocal(LoadDataFileQuery data,File temporaryFile) throws ReplicatorException {  data.setLocalFile(temporaryFile);  applyStatementData(data);}  }
class C{  public static LogoutResponse createSamlLogoutResponse(String inResponseTo){  String tenantName=ServerConfig.getTenant(0);  String rpName=ServerConfig.getRelyingParty(tenantName,1);  String issuerUrl=ServerConfig.getRelyingPartyUrl(rpName);  String destination=ServerConfig.getTenantEntityId(tenantName).replace("/Metadata","/SLO");  SamlServiceFactory samlFactory=new DefaultSamlServiceFactory();  SamlService service=samlFactory.createSamlService(null,null,null,issuerUrl,null);  return service.createSamlLogoutResponse(inResponseTo,destination,OasisNames.SUCCESS,null,"Success");}  }
class C{  public final CC gapY(String before,String after){  if (before != null)   ver.setGapBefore(ConstraintParser.parseBoundSize(before,true,false));  if (after != null)   ver.setGapAfter(ConstraintParser.parseBoundSize(after,true,false));  return this;}  }
class C{  public static byte[] encrypt(final SecretKeySpec key,final byte[] iv,final byte[] message) throws GeneralSecurityException {  final Cipher cipher=Cipher.getInstance(AES_MODE);  IvParameterSpec ivSpec=new IvParameterSpec(iv);  cipher.init(Cipher.ENCRYPT_MODE,key,ivSpec);  byte[] cipherText=cipher.doFinal(message);  return cipherText;}  }
class C{  public AsyncMap(Vertx vertx,String name){  this.vertx=vertx;  ClusterManager clusterManager=((VertxInternal)vertx).getClusterManager();  if (clusterManager == null) {    syncMap=new LocalMapWrapper<>(vertx.sharedData().<K,V>getLocalMap(name));  } else {    syncMap=clusterManager.getSyncMap(name);  }}  }
class C{  private void throwErrorResponse(HttpStatusException e,boolean isVerbose){  if (e.getStatus() == HttpStatus.SC_FORBIDDEN) {    throw new JsonPatchExtensionException(isVerbose ? e.getVerboseErrorResponse() : e.getErrorResponse());  }  ObjectNode errorContainer=getErrorContainer();  ArrayNode errorList=(ArrayNode)errorContainer.get("errors");  boolean failed=false;  for (  PatchAction action : actions) {    failed=processAction(errorList,failed,action);  }  throw new JsonPatchExtensionException(HttpStatus.SC_BAD_REQUEST,errorContainer);}  }
class C{  @Override public String toString(){  StringBuffer sb=new StringBuffer("DLockRemoteToken@");  sb.append(Integer.toHexString(hashCode()));  sb.append(", name: ").append(this.name);  sb.append(", lesseeThread: ").append(this.lesseeThread);  sb.append(", leaseId: ").append(this.leaseId);  sb.append(", leaseExpireTime: ").append(this.leaseExpireTime);  return sb.toString();}  }
class C{  public DTMException(String message,Throwable e){  super(((message == null) || (message.length() == 0)) ? e.getMessage() : message);  this.containedException=e;  this.locator=null;}  }
class C{  public OdbcResponse handle(long reqId,OdbcRequest req){  assert req != null;  if (!busyLock.enterBusy())   return new OdbcResponse(OdbcResponse.STATUS_FAILED,"Failed to handle ODBC request because node is stopping: " + req);  try {switch (req.command()) {case HANDSHAKE:      return performHandshake(reqId,(OdbcHandshakeRequest)req);case EXECUTE_SQL_QUERY:    return executeQuery(reqId,(OdbcQueryExecuteRequest)req);case FETCH_SQL_QUERY:  return fetchQuery(reqId,(OdbcQueryFetchRequest)req);case CLOSE_SQL_QUERY:return closeQuery(reqId,(OdbcQueryCloseRequest)req);case GET_COLUMNS_META:return getColumnsMeta(reqId,(OdbcQueryGetColumnsMetaRequest)req);case GET_TABLES_META:return getTablesMeta(reqId,(OdbcQueryGetTablesMetaRequest)req);}return new OdbcResponse(OdbcResponse.STATUS_FAILED,"Unsupported ODBC request: " + req);}  finally {busyLock.leaveBusy();}}  }
class C{  public boolean equals(Object obj){  if (obj == this)   return true;  if (obj == null || obj instanceof Annotation == false)   return false;  Annotation other=(Annotation)obj;  if (getTypeName().equals(other.getTypeName()) == false)   return false;  LinkedHashMap otherMembers=other.members;  if (members == otherMembers)   return true; else   if (members == null)   return otherMembers == null; else   if (otherMembers == null)   return false; else   return members.equals(otherMembers);}  }
class C{  public static long parseLong(CharSequence csq,int radix,Cursor cursor){  final int start=cursor.getIndex();  final int end=csq.length();  boolean isNegative=false;  long result=0;  int i=start;  for (; i < end; i++) {    char c=csq.charAt(i);    int digit=(c <= '9') ? c - '0' : ((c <= 'Z') && (c >= 'A')) ? c - 'A' + 10 : ((c <= 'z') && (c >= 'a')) ? c - 'a' + 10 : -1;    if (digit >= radix || digit < 0 && (c != '-' && c != '+')) {      throw new NumberFormatException("Invalid integer representation for " + csq.subSequence(start,end));    }    if ((digit >= 0) && (digit < radix)) {      long newResult=result * radix - digit;      if (newResult > result)       throw new NumberFormatException("Overflow parsing " + csq.subSequence(start,end));      result=newResult;    } else     if ((c == '-') && (i == start))     isNegative=true; else     if ((c == '+') && (i == start)) {    } else     break;  }  if ((result == 0) && ((end == 0) || (csq.charAt(i - 1) != '0')))   throw new NumberFormatException("Invalid integer representation for " + csq.subSequence(start,end));  if ((result == Long.MIN_VALUE) && !isNegative)   throw new NumberFormatException("Overflow parsing " + csq.subSequence(start,end));  cursor.increment(i - start);  return isNegative ? result : -result;}  }
class C{  CloseableIteration<BigdataStatement,QueryEvaluationException> computeClosure(CloseableIteration<BigdataStatement,QueryEvaluationException> src) throws QueryEvaluationException {  int nrounds=0;  final Set<IV<?,?>> bnodes_tm1=new LinkedHashSet<IV<?,?>>();  final Set<BigdataStatement> stmts=new LinkedHashSet<BigdataStatement>();  while (true) {    nrounds++;    final int nstmts=stmts.size();    if (cutoffQuery(nrounds - 1,nstmts)) {      src.close();      throw new QueryEvaluationException("CBD cutoff: nrounds=" + nrounds + ", nstatements="+ nstmts+ ".");    }    final Set<IV<?,?>> newBnodes=consumeStatements(src,stmts,bnodes_tm1);    if (newBnodes.isEmpty()) {      break;    }    if (log.isInfoEnabled()) {      log.info("#rounds=" + nrounds + ", describeMode="+ describeMode+ ", #stmts(in)="+ stmts.size()+ ", #bnodes(in)="+ bnodes_tm1.size()+ ", #bnodes(new)="+ newBnodes.size()+ " : "+ newBnodes);      logState(stmts,bnodes_tm1,newBnodes);    }    src=doRound(newBnodes);    bnodes_tm1.addAll(newBnodes);  }  if (log.isInfoEnabled()) {    log.info("#rounds=" + nrounds + " (done), describeMode="+ describeMode+ ", #stmts(in)="+ stmts.size()+ ", #bnodes(in)="+ bnodes_tm1.size());    logState(stmts,bnodes_tm1,null);  }  return new CollectionIteration<BigdataStatement,QueryEvaluationException>(stmts);}  }
class C{  private void showClassPicker(){  TreeJavaClassChooserDialog dialog=new TreeJavaClassChooserDialog("Pick up component",project_);  dialog.setModal(true);  dialog.show();  PsiClass selectedClass=dialog.getSelected();  updateComponent(selectedClass);}  }
class C{  protected void removeLinkFromStorage(Link lt){  String id=getLinkId(lt);  storageSourceService.deleteRowAsync(LINK_TABLE_NAME,id);}  }
class C{  public void clear(){  launchedTask=null;  declinedOffer=null;}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) final public IVariableOrConstant<IV> c(){  return (IVariableOrConstant<IV>)get(3);}  }
class C{  public OrientedPortrayal2D(SimplePortrayal2D child){  this(child,DEFAULT_OFFSET,DEFAULT_SCALE,Color.red);}  }
class C{  public void createKillAndGen(){  BBKillSet=new LiveSet();  firstPEIKillSet=new LiveSet();  gen=new LiveSet();}  }
class C{  @Override public void mouseEntered(MouseEvent e){  if (!this.ownToolTipDelaysActive) {    ToolTipManager ttm=ToolTipManager.sharedInstance();    this.originalToolTipInitialDelay=ttm.getInitialDelay();    ttm.setInitialDelay(this.ownToolTipInitialDelay);    this.originalToolTipReshowDelay=ttm.getReshowDelay();    ttm.setReshowDelay(this.ownToolTipReshowDelay);    this.originalToolTipDismissDelay=ttm.getDismissDelay();    ttm.setDismissDelay(this.ownToolTipDismissDelay);    this.ownToolTipDelaysActive=true;  }}  }
class C{  public CurrencyValue convertTo(ExchangeRateProvider exchangeRates,String targetCurrencyCode){  return new CurrencyValue(convertAmount(exchangeRates,this.getCurrencyCode(),this.getAmount(),targetCurrencyCode),targetCurrencyCode);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:02.924 -0500",hash_original_method="06342840B51BA72C757680F9FE102AFC",hash_generated_method="D6FFC4235218375704698D3AC22AB6DF") public Socket createSocket(InetAddress address,int port) throws IOException {  return new Socket(address,port);}  }
class C{  public V remove(K key){  kvUtil.verifyKeyNotNull(key);  AccessTimeObjectHolder<V> oldHolder=this.objects.remove(key);  AccessTimeObjectHolder<V> gh=gatedHolder(oldHolder);  boolean validBeforeInvalidate=gh != null;  V releasedValue=releaseHolder(oldHolder);  return validBeforeInvalidate ? releasedValue : null;}  }
class C{  @Override public void execute(MetricTimeSeries timeSeries,FunctionValueMap functionValueMap){  if (timeSeries.size() <= 0) {    functionValueMap.add(this,Double.NaN);    return;  }  int size=timeSeries.size();  double sum=0;  for (int i=1; i < size; i++) {    sum+=timeSeries.getValue(i);  }  functionValueMap.add(this,sum);}  }
class C{  public ActiveMQRAObjectMessage(final ObjectMessage message,final ActiveMQRASession session){  super(message,session);  if (ActiveMQRAObjectMessage.trace) {    ActiveMQRALogger.LOGGER.trace("constructor(" + message + ", "+ session+ ")");  }}  }
class C{  private Shard updateShardCatalog(String eventShard,String shardService) throws ReplicatorException {  if (logger.isDebugEnabled())   logger.debug("Creating unknown shard " + eventShard + " for home "+ shardService);  ShardManager manager=new ShardManager(service,url,user,password,schemaName,tableType,context);  List<Map<String,String>> params=new ArrayList<Map<String,String>>();  Map<String,String> newShard=new HashMap<String,String>();  newShard.put(ShardTable.SHARD_ID_COL,eventShard);  newShard.put(ShardTable.SHARD_MASTER_COL,shardService);  params.add(newShard);  try {    manager.insert(params);    shards.put(eventShard,new Shard(newShard));  } catch (  SQLException e) {    throw new ReplicatorException(e);  }  return shards.get(eventShard);}  }
class C{  public Request alwaysAttemptResume(){  alwaysResume=true;  return this;}  }
class C{  @Override public void executeAction(Agent a,Action action){}  }
class C{  private synchronized void saveClassFile(){  if (classfile == null || hasMemberCache() != null)   return;  ByteArrayOutputStream barray=new ByteArrayOutputStream();  DataOutputStream out=new DataOutputStream(barray);  try {    classfile.write(out);    barray.close();    rawClassfile=barray.toByteArray();    classfile=null;  } catch (  IOException e) {  }}  }
class C{  public Label(){}  }
class C{  public RuntimeCopyException(String s){  super(s);}  }
class C{  public boolean allItemsAvailable(){  return readCompleted.isDone();}  }
class C{  public static boolean grOrEq(double a,double b){  return (b - a < SMALL);}  }
class C{  protected BigDecimalStringType(SqlType sqlType,Class<?>[] classes){  super(sqlType,classes);}  }
class C{  public static ServerLocator createServerLocator(final String url) throws Exception {  ServerLocatorParser parser=new ServerLocatorParser();  return parser.newObject(new URI(url),null);}  }
class C{  public MultiViewParallaxTransformer withParallaxView(final int id,final float parallaxFactor){  parallaxFactors.put(id,parallaxFactor);  return this;}  }
class C{  public boolean optBoolean(String key){  return this.optBoolean(key,false);}  }
class C{  private void writeHourlyCausedDelayForEachPerson(){  SortedMap<Double,Map<Id<Person>,Double>> timeBin2CausingPerson2Delay=getCausingPersonDelay(noOfTimeBins);  BufferedWriter writer=IOUtils.getBufferedWriter(runDir + "/analysis/timeBin2Person2UserGroup2CausedDelay_" + pricingScenario+ suffixForSoring+ ".txt");  try {    writer.write("timeBin \t personId \t userGroup \t delayInSec \n");    for (    double d : timeBin2CausingPerson2Delay.keySet()) {      for (      Id<Person> personId : timeBin2CausingPerson2Delay.get(d).keySet()) {        writer.write(d + "\t" + personId+ "\t"+ pf.getMunichUserGroupFromPersonId(personId)+ "\t"+ timeBin2CausingPerson2Delay.get(d).get(personId)+ "\n");      }    }    writer.close();  } catch (  Exception e) {    throw new RuntimeException("Data is not written in file. Reason: " + e);  }}  }
class C{  @Override public void serializeWithType(Object value,JsonGenerator jgen,SerializerProvider provider,TypeSerializer typeSer) throws IOException, JsonGenerationException {  typeSer.writeTypePrefixForScalar(value,jgen);  serialize(value,jgen,provider);  typeSer.writeTypeSuffixForScalar(value,jgen);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (ownedMembersByNameAndAccess: ");  result.append(ownedMembersByNameAndAccess);  result.append(')');  return result.toString();}  }
class C{  void toggleSearch(){  if (mNodeSearch.isActive()) {    cancelSearch();  } else {    startSearch();  }}  }
class C{  public void write(char[] cbuf,int off,int len) throws IOException {  internalOut.write(cbuf,off,len);}  }
class C{  public PartialConverter addPartialConverter(PartialConverter converter) throws SecurityException {  checkAlterPartialConverters();  if (converter == null) {    return null;  }  PartialConverter[] removed=new PartialConverter[1];  iPartialConverters=iPartialConverters.add(converter,removed);  return removed[0];}  }
class C{  public static void assertNotEquals(String itemName,float notExpected,float actual,float delta){  try {    if (Float.isInfinite(notExpected) && notExpected == actual || Math.abs(notExpected - actual) <= delta) {      Assert.fail(itemName + " should not be equal:<" + notExpected+ '>');    }  } catch (  AssertionError e) {    Verify.throwMangledException(e);  }}  }
class C{  public TraceDirective_ createTraceDirective_(){  TraceDirective_Impl traceDirective_=new TraceDirective_Impl();  return traceDirective_;}  }
class C{  private byte[] updateMinMaxForNoDictionary(byte[] valueWithLength){  ByteBuffer buffer=ByteBuffer.wrap(valueWithLength);  byte[] actualValue=new byte[buffer.getShort()];  buffer.get(actualValue);  return actualValue;}  }
class C{  @Override void basicDestroy(){  this.dlock.destroyAndRemove();}  }
class C{  private void finishReturnInstance(){  FormController formController=Collect.getInstance().getFormController();  String action=getIntent().getAction();  if (Intent.ACTION_PICK.equals(action) || Intent.ACTION_EDIT.equals(action)) {    String selection=InstanceColumns.INSTANCE_FILE_PATH + "=?";    String[] selectionArgs={formController.getInstancePath().getAbsolutePath()};    Cursor c=null;    try {      c=getContentResolver().query(InstanceColumns.CONTENT_URI,null,selection,selectionArgs,null);      if (c.getCount() > 0) {        c.moveToFirst();        String id=c.getString(c.getColumnIndex(InstanceColumns._ID));        Uri instance=Uri.withAppendedPath(InstanceColumns.CONTENT_URI,id);        setResult(RESULT_OK,new Intent().setData(instance));      }    }  finally {      if (c != null) {        c.close();      }    }  }  finish();}  }
class C{  public boolean isDefault(Context context){  if (mForceDefault) {    return true;  }  try {    final Resources res=context.createPackageContext(getPackageName(),0).getResources();    return res.getBoolean(getIsDefaultResourceId());  } catch (  NameNotFoundException e) {    return false;  }}  }
class C{  @Field(28) public __VARIANT_NAME_3_union ppdispVal(Pointer<Pointer<IDispatch>> ppdispVal){  this.io.setPointerField(this,28,ppdispVal);  return this;}  }
class C{  public LVQLLC(DistanceMetric dm,int iterations,Classifier localClasifier){  super(dm,iterations);  setLocalClassifier(localClasifier);}  }
class C{  public NoTalkbackSlimException(String message){  this(null,ErrorType.INFO_ERROR,message);}  }
class C{  public static boolean checkCGHasGroupRelationship(StorageSystem storage,URI cgURI,DbClient dbClient){  List<Volume> volumes=ControllerUtils.getVolumesPartOfCG(cgURI,dbClient);  boolean isVNX=storage.deviceIsType(Type.vnxblock);  for (  Volume volume : volumes) {    if (NullColumnValueGetter.isNotNullValue(volume.getReplicationGroupInstance())) {      if (!isVNX) {        URIQueryResultList cloneList=new URIQueryResultList();        dbClient.queryByConstraint(ContainmentConstraint.Factory.getAssociatedSourceVolumeConstraint(volume.getId()),cloneList);        Iterator<URI> iter=cloneList.iterator();        while (iter.hasNext()) {          URI cloneID=iter.next();          Volume clone=dbClient.queryObject(Volume.class,cloneID);          if (clone != null && !clone.getInactive()) {            return true;          }        }        URIQueryResultList mirrorList=new URIQueryResultList();        dbClient.queryByConstraint(ContainmentConstraint.Factory.getVolumeBlockMirrorConstraint(volume.getId()),mirrorList);        Iterator<URI> itr=mirrorList.iterator();        while (itr.hasNext()) {          URI mirrorID=itr.next();          BlockMirror mirror=dbClient.queryObject(BlockMirror.class,mirrorID);          if (mirror != null && !mirror.getInactive()) {            return true;          }        }      }      URIQueryResultList list=new URIQueryResultList();      dbClient.queryByConstraint(ContainmentConstraint.Factory.getVolumeSnapshotConstraint(volume.getId()),list);      Iterator<URI> it=list.iterator();      while (it.hasNext()) {        URI snapshotID=it.next();        BlockSnapshot snapshot=dbClient.queryObject(BlockSnapshot.class,snapshotID);        if (snapshot != null && !snapshot.getInactive()) {          return true;        }      }      if (storage.checkIfVmax3()) {        URIQueryResultList sessionList=new URIQueryResultList();        dbClient.queryByConstraint(ContainmentConstraint.Factory.getBlockSnapshotSessionByConsistencyGroup(cgURI),sessionList);        Iterator<URI> itr=sessionList.iterator();        while (itr.hasNext()) {          URI sessionID=itr.next();          BlockSnapshotSession session=dbClient.queryObject(BlockSnapshotSession.class,sessionID);          if (session != null && !session.getInactive()) {            return true;          }        }      }    }  }  return false;}  }
class C{  public long virtualOffset(){  return mVirtualOffset;}  }
class C{  public static ImFactory init(){  try {    ImFactory theImFactory=(ImFactory)EPackage.Registry.INSTANCE.getEFactory(ImPackage.eNS_URI);    if (theImFactory != null) {      return theImFactory;    }  } catch (  Exception exception) {    EcorePlugin.INSTANCE.log(exception);  }  return new ImFactoryImpl();}  }
class C{  private void printModifiers(List<IExtendedModifier> ext){  for (Iterator<IExtendedModifier> it=ext.iterator(); it.hasNext(); ) {    ASTNode p=(ASTNode)it.next();    p.accept(this);    this.fBuffer.append(" ");  }}  }
class C{  public static String quoteStringSQL(String s){  if (s == null) {    return "NULL";  }  int length=s.length();  StringBuilder buff=new StringBuilder(length + 2);  buff.append('\'');  for (int i=0; i < length; i++) {    char c=s.charAt(i);    if (c == '\'') {      buff.append(c);    } else     if (c < ' ' || c > 127) {      return "STRINGDECODE(" + quoteStringSQL(javaEncode(s)) + ")";    }    buff.append(c);  }  buff.append('\'');  return buff.toString();}  }
class C{  public String readFragmentedUTF() throws IOException {  StringBuffer result=new StringBuffer(super.readUTF());  boolean fragmentFlag=super.readBoolean();  while (fragmentFlag != END_REACHED) {    result.append(super.readUTF());    fragmentFlag=super.readBoolean();  }  return result.toString();}  }
class C{  public AddAndScaleMultiImage(){  initComponents();  initSpinner(veryLowWidth,"veryLowWidthSpinner",28);  initSpinner(veryLowHeight,"veryLowHeightSpinner",28);  initSpinner(lowWidth,"lowWidthSpinner",36);  initSpinner(lowHeight,"lowHeightSpinner",36);  initSpinner(mediumWidth,"mediumWidthSpinner",48);  initSpinner(mediumHeight,"mediumHeightSpinner",48);  initSpinner(highWidth,"highWidthSpinner",72);  initSpinner(highHeight,"highHeightSpinner",72);  initSpinner(veryHighWidth,"veryHighWidthSpinner",96);  initSpinner(veryHighHeight,"veryHighHeightSpinner",96);  initSpinner(hdWidth,"hdWidthSpinner",196);  initSpinner(hdHeight,"hdHeightSpinner",196);  initSpinner(hd560Width,"hd560WidthSpinner",250);  initSpinner(hd560Height,"hd560HeightSpinner",250);  initSpinner(hd2Width,"hd2WidthSpinner",330);  initSpinner(hd2Height,"hd2HeightSpinner",330);  initSpinner(hd4kWidth,"hd4kWidthSpinner",400);  initSpinner(hd4kHeight,"hd4kHeightSpinner",400);  percentWidth.setModel(new SpinnerNumberModel(20.0,1.0,100.0,1.0));  percentHeight.setModel(new SpinnerNumberModel(15.0,1.0,100.0,1.0));}  }
class C{  @Override public void runTool(String... args) throws SQLException {  String dir=".";  String db=null;  for (int i=0; args != null && i < args.length; i++) {    String arg=args[i];    if ("-dir".equals(arg)) {      dir=args[++i];    } else     if ("-db".equals(arg)) {      db=args[++i];    } else     if ("-removePassword".equals(arg)) {      remove=true;    } else     if ("-trace".equals(arg)) {      trace=true;    } else     if ("-transactionLog".equals(arg)) {      transactionLog=true;    } else     if (arg.equals("-help") || arg.equals("-?")) {      showUsage();      return;    } else {      showUsageAndThrowUnsupportedOption(arg);    }  }  process(dir,db);}  }
class C{  @Override public AppConfigurationEntry[] engineGetAppConfigurationEntry(String applicationName){  List<AppConfigurationEntry> list=null;synchronized (configuration) {    list=configuration.get(applicationName);  }  if (list == null || list.size() == 0) {    return null;  }  AppConfigurationEntry[] entries=new AppConfigurationEntry[list.size()];  Iterator<AppConfigurationEntry> iterator=list.iterator();  for (int i=0; iterator.hasNext(); i++) {    AppConfigurationEntry e=iterator.next();    entries[i]=new AppConfigurationEntry(e.getLoginModuleName(),e.getControlFlag(),e.getOptions());  }  return entries;}  }
class C{  public void test_unwrap_ByteBuffer_ByteBuffer_01() throws InterruptedException, IOException {  prepareEngines();  doHandshake();  ByteBuffer bbs=ByteBuffer.allocate(100);  ByteBuffer bbd=ByteBuffer.allocate(100);  try {    SSLEngineResult unwrap=clientEngine.engine.unwrap(bbs,bbd);    fail("SSLException wasn't thrown");  } catch (  SSLException ex) {  }}  }
class C{  public ServiceStateException(ServiceStatus current,String expected,String serviceId){  super("Service operation tried on the service " + serviceId + " with invalid status",new Object[]{expected,current.name(),serviceId});}  }
class C{  public boolean validateWith(@NonNull METValidator validator){  CharSequence text=getText();  boolean isValid=validator.isValid(text,text.length() == 0);  if (!isValid) {    setError(validator.getErrorMessage());  }  postInvalidate();  return isValid;}  }
class C{  public void regenerate(Projection proj){  Debug.message("eomg","EditableOMRect.regenerate()");  if (rect != null)   rect.regenerate(proj);  setGrabPoints(rect);  generate(proj);}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("ArchiveToken[");  buffer.append("m_archHdr = ").append(m_archHdr);  buffer.append(", m_flds = ").append(m_flds);  buffer.append(", m_dividers = ").append(m_dividers);  buffer.append(", m_validations = ").append(m_validations);  buffer.append(", m_acs = ").append(m_acs);  buffer.append("]");  return buffer.toString();}  }
class C{  private void recursiveLogResult(StringBuilder buf,Hierarchy<Result> hier,Result result,int depth){  if (result == null) {    buf.append("null");    LOG.warning("null result!");    return;  }  if (depth > 50) {    LOG.warning("Probably infinitely nested results, aborting!");    return;  }  for (int i=0; i < depth; i++) {    buf.append(" ");  }  buf.append(result.getClass().getSimpleName()).append(": ").append(result.getLongName());  buf.append(" (").append(result.getShortName()).append(")\n");  if (hier.numChildren(result) > 0) {    for (Hierarchy.Iter<Result> iter=hier.iterChildren(result); iter.valid(); iter.advance()) {      recursiveLogResult(buf,hier,iter.get(),depth + 1);    }  }}  }
class C{  private void seekPrivate(long pos) throws IOException {  int n=(int)(real_pos - pos);  if (n >= 0 && n <= buf_end) {    buf_pos=buf_end - n;  } else {    super.seek(pos);    invalidate();  }}  }
class C{  private void addSystemMenuItems(JPopupMenu menu){  JMenuItem mi=(JMenuItem)menu.add(restoreAction);  mi.setMnemonic('R');  mi=(JMenuItem)menu.add(moveAction);  mi.setMnemonic('M');  mi=(JMenuItem)menu.add(sizeAction);  mi.setMnemonic('S');  mi=(JMenuItem)menu.add(iconifyAction);  mi.setMnemonic('n');  mi=(JMenuItem)menu.add(maximizeAction);  mi.setMnemonic('x');  menu.add(new JSeparator());  mi=(JMenuItem)menu.add(closeAction);  mi.setMnemonic('C');}  }
class C{  @Override public void printGeneralUserData(IStructuredOutputWriter out) throws Exception {  out.simpleChild("intervalCount",m_totalIntervalCount);  out.simpleChild("uniqueMsgIds",m_msgData.size());}  }
class C{  public NotificationChain basicSetDeclaredTypeRef(TypeRef newDeclaredTypeRef,NotificationChain msgs){  TypeRef oldDeclaredTypeRef=declaredTypeRef;  declaredTypeRef=newDeclaredTypeRef;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.METHOD_DECLARATION__DECLARED_TYPE_REF,oldDeclaredTypeRef,newDeclaredTypeRef);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public static void putDataPrefixToLayerList(Layer layer,Properties props,String layerListProperty){  String dataPrefix=(String)layer.getAttribute(Layer.DataPathPrefixProperty);  if (dataPrefix != null && dataPrefix.length() > 0) {    putDataPrefixToLayerList(dataPrefix,props,layerListProperty);  }}  }
class C{  public static long invokeGetter(Object obj,String methodName,long defaultValue){  try {    Method method=obj.getClass().getMethod(methodName,new Class[0]);    Object result=method.invoke(obj,new Object[0]);    return ((Long)result).longValue();  } catch (  NoSuchMethodException e) {    return defaultValue;  }catch (  IllegalAccessException e) {    return defaultValue;  }catch (  InvocationTargetException e) {    return defaultValue;  }}  }
class C{  public QuotedStringTokenizer(String text,String separators){  this(text,separators,false);}  }
class C{  @Before public void onBefore(){  entityManager.persist(new Role("ROLE_ADMIN"));  entityManager.persist(new Role("ROLE_USER"));  entityManager.flush();  entityManager.clear();}  }
class C{  public boolean verify(X509Certificate cert) throws IOException {  if (cert == null) {    throw new IOException("Certificate is null");  }  if (!minMaxValid) {    calcMinMax();  }  if (hasMin) {    throw new IOException("Non-zero minimum BaseDistance in" + " name constraints not supported");  }  if (hasMax) {    throw new IOException("Maximum BaseDistance in" + " name constraints not supported");  }  X500Principal subjectPrincipal=cert.getSubjectX500Principal();  X500Name subject=X500Name.asX500Name(subjectPrincipal);  if (subject.isEmpty() == false) {    if (verify(subject) == false) {      return false;    }  }  GeneralNames altNames=null;  try {    X509CertImpl certImpl=X509CertImpl.toImpl(cert);    SubjectAlternativeNameExtension altNameExt=certImpl.getSubjectAlternativeNameExtension();    if (altNameExt != null) {      altNames=altNameExt.get(SubjectAlternativeNameExtension.SUBJECT_NAME);    }  } catch (  CertificateException ce) {    throw new IOException("Unable to extract extensions from " + "certificate: " + ce.getMessage());  }  if (altNames == null) {    return verifyRFC822SpecialCase(subject);  }  for (int i=0; i < altNames.size(); i++) {    GeneralNameInterface altGNI=altNames.get(i).getName();    if (!verify(altGNI)) {      return false;    }  }  return true;}  }
class C{  public boolean equals(Object object){  if (this == object) {    return true;  }  if (object instanceof Key) {    byte[] b1;    if (encodedKey != null) {      b1=encodedKey;    } else {      b1=getEncoded();    }    byte[] b2=((Key)object).getEncoded();    int i;    if (b1.length != b2.length)     return false;    for (i=0; i < b1.length; i++) {      if (b1[i] != b2[i]) {        return false;      }    }    return true;  }  return false;}  }
class C{  private void createFlashableZip(){  initFilesList();  S.ZIP_OUTPUT.mkdirs();  File zipFile=new File(S.ZIP_OUTPUT + File.separator + this.systemFolder+ ".zip");  FilesUtils.copyFile(S.DUMMY_ZIP,zipFile);  System.out.println("zip file to be created : " + zipFile.getAbsolutePath());  for (  File f : this.fileToAdd) {    try {      Zip.AddFileToFolderInZip(systemFolder,f,new ZipFile(zipFile));    } catch (    ZipException e) {      e.printStackTrace();    }  }}  }
class C{  public String importTranslations(){  if (excel == null || excel.getName() == null) {    addMessage(null,FacesMessage.SEVERITY_ERROR,ERROR_SHOP_TRANSLATIONS_FILEFORMAT);    return OUTCOME_ERROR;  }  try {    InputStream excelStream=excel.getInputStream();    Workbook wb=new HSSFWorkbook(excelStream);    Map<String,Properties> propertiesMap=ExcelHandler.readExcel(wb,getApplicationBean().getSupportedLocalesIterator(),BaseBean.LABEL_SHOP_TRANSLARIONS);    try {      getBrandManagementService().saveMessageProperties(propertiesMap,getMarketplaceBean().getMarketplaceId());    } catch (    SaaSApplicationException e) {      marketplaceBean.checkMarketplaceDropdownAndMenuVisibility(e);      throw e;    }    resetBundles();    long numOfValues=0;    for (    Properties properties : propertiesMap.values()) {      numOfValues+=properties.size();    }    if (JSFUtils.replaceMessageInListIfExisting(ERROR_FILE_IMPORT_TRANSLATIONS_MULTIPLEKEY_EXISTING,null,ERROR_FILE_IMPORT_TRANSLATIONS_MULTIPLEKEY_EXISTING,new Object[]{String.valueOf(numOfValues),String.valueOf(1)})) {      ui.resetDirty();      return OUTCOME_ERROR;    }    addMessage(null,FacesMessage.SEVERITY_INFO,INFO_TRANSLATIONS_SAVED,new Object[]{String.valueOf(numOfValues),String.valueOf(propertiesMap.size())});  } catch (  ValidationException ex) {    logger.logError(Log4jLogger.SYSTEM_LOG,ex,LogMessageIdentifier.ERROR_PROCESS_TRANSLATION_FILE);    addMessage(null,FacesMessage.SEVERITY_ERROR,ERROR_FILE_IMPORT_FAILED,new Object[]{ex.getLocalizedMessage()});    return OUTCOME_ERROR;  }catch (  Exception e) {    logger.logError(Log4jLogger.SYSTEM_LOG,e,LogMessageIdentifier.ERROR_PROCESS_TRANSLATION_FILE);    addMessage(null,FacesMessage.SEVERITY_ERROR,ERROR_SHOP_TRANSLATIONS_FILEFORMAT);    return OUTCOME_ERROR;  }  return OUTCOME_SUCCESS;}  }
class C{  public static List<Graph> generate(Graph graph){  if (graph.existsDirectedCycle()) {    throw new IllegalArgumentException("Input must not contain cycles.");  }  List<Graph> graphs=new LinkedList<>();  Set<Edge> allEdges=graph.getEdges();  List<Node> allNodes=graph.getNodes();  for (  Edge allEdge1 : allEdges) {    Graph toAdd=new EdgeListGraph(graph);    toAdd.removeEdge(allEdge1);    graphs.add(toAdd);  }  for (  Edge allEdge : allEdges) {    Graph toAdd=new EdgeListGraph(graph);    Endpoint e1=allEdge.getEndpoint1();    Endpoint e2=allEdge.getEndpoint2();    Node n1=allEdge.getNode1();    Node n2=allEdge.getNode2();    Edge newEdge=new Edge(n1,n2,e2,e1);    toAdd.removeEdge(allEdge);    if (!toAdd.existsDirectedPathFromTo(n1,n2)) {      toAdd.addEdge(newEdge);      graphs.add(toAdd);    }  }  for (int i=0; i < allNodes.size(); i++) {    Node node1=allNodes.get(i);    for (int j=i + 1; j < allNodes.size(); j++) {      Node node2=allNodes.get(j);      if (!graph.isParentOf(node1,node2) && !graph.isParentOf(node2,node1)) {        Graph toAdd1=new EdgeListGraph(graph);        if (!toAdd1.existsDirectedPathFromTo(node1,node2)) {          Edge newN2N1=new Edge(node2,node1,Endpoint.TAIL,Endpoint.ARROW);          toAdd1.addEdge(newN2N1);          graphs.add(toAdd1);        }        Graph toAdd2=new EdgeListGraph(graph);        if (!toAdd2.existsDirectedPathFromTo(node2,node1)) {          Edge newN1N2=new Edge(node1,node2,Endpoint.TAIL,Endpoint.ARROW);          toAdd2.addEdge(newN1N2);          graphs.add(toAdd2);        }      }    }  }  return graphs;}  }
class C{  public void testUsernameAndPassword(){  RuntimeConfiguration configuration=new Jonas4xRuntimeConfiguration();  configuration.setProperty(RemotePropertySet.USERNAME,"foo");  configuration.setProperty(RemotePropertySet.PASSWORD,"bar");  Hashtable<String,Object> connectionOptions=factory.readConfiguration(configuration);  assertEquals(connectionOptions.get(Context.INITIAL_CONTEXT_FACTORY),MEJBMBeanServerConnectionFactory.DEFAULT_JNDI_INITIAL_CTX_FACTORY);  assertEquals(connectionOptions.get(Context.PROVIDER_URL),MEJBMBeanServerConnectionFactory.DEFAULT_PROVIDER_URI);  assertEquals(connectionOptions.get(Context.SECURITY_PRINCIPAL),"foo");  assertEquals(connectionOptions.get(Context.SECURITY_CREDENTIALS),"bar");  assertEquals(factory.mejbJndiPath,MEJBMBeanServerConnectionFactory.DEFAULT_JNDI_MEJB_PATH);  assertEquals(factory.username,"foo");  assertEquals(factory.password,"bar");  assertNull(factory.jaasFile);  assertNull(factory.jaasEntry);}  }
class C{  public NamespaceId concat(final NamespaceIdPart part){  final NamespaceIdPart[] parts=new NamespaceIdPart[this.namespaceIdParts.length + 1];  System.arraycopy(this.namespaceIdParts,0,parts,0,this.namespaceIdParts.length);  parts[this.namespaceIdParts.length]=part;  return new NamespaceId(parts);}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  NamedNodeMap entities;  Node entityNode;  String entityValue;  doc=(Document)load("staff",false);  docType=doc.getDoctype();  assertNotNull("docTypeNotNull",docType);  entities=docType.getEntities();  assertNotNull("entitiesNotNull",entities);  entityNode=entities.getNamedItem("ent1");  assertNotNull("ent1NotNull",entityNode);  entityValue=entityNode.getNodeValue();  assertNull("entityNodeValue",entityValue);}  }
class C{  boolean contains(int n){  return ints.get(encode(n));}  }
class C{  public static Stats of(Iterable<? extends Number> values){  StatsAccumulator accumulator=new StatsAccumulator();  accumulator.addAll(values);  return accumulator.snapshot();}  }
class C{  @Override public void onSaveOrUpdate(final SaveOrUpdateEvent event) throws HibernateException {  final EventSource session=event.getSession();  final Object object=event.getObject();  if (object instanceof BaseModel && !session.getPersistenceContext().reassociateIfUninitializedProxy(object)) {    final Date currentDate=new Date();    final User usr=(User)session.load(User.class,ApplicationThreadLocals.getUserId());    final BaseModel entity=(BaseModel)session.getPersistenceContext().unproxyAndReassociate(object);    if (entity.getCreatedBy() == null) {      entity.setCreatedDate(currentDate);      entity.setCreatedBy(usr);      entity.setModifiedBy(usr);      entity.setModifiedDate(currentDate);    }  } else   if (object instanceof Auditable && !session.getPersistenceContext().reassociateIfUninitializedProxy(object)) {    final User usr=(User)session.load(User.class,ApplicationThreadLocals.getUserId());    final AbstractAuditable entity=(AbstractAuditable)session.getPersistenceContext().unproxyAndReassociate(object);    if (entity.getCreatedBy() == null) {      final Date currentDate=new Date();      entity.setCreatedDate(currentDate);      entity.setCreatedBy(usr);      entity.setLastModifiedBy(usr);      entity.setLastModifiedDate(currentDate);    }  }}  }
class C{  public void testMultivariateMIforNoisyDependentVariablesFromFile() throws Exception {  ArrayFileReader afr=new ArrayFileReader("demos/data/4ColsPairedNoisyDependence-1.txt");  double[][] data=afr.getDouble2DMatrix();  int[] kNNs={1,2,3,4,5,6,10,15};  double[] expectedFromMILCA_2={0.31900665,0.37304998,0.37213228,0.37982388,0.37304217,0.36802502,0.36353436,0.35095074};  System.out.println("Kraskov comparison 7 - multivariate dependent data 1");  checkMIForGivenData(MatrixUtils.selectColumns(data,new int[]{0,1,2,3}),kNNs,expectedFromMILCA_2);}  }
class C{  public static void round(RectF rect){  if (rect == null) {    return;  }  float left=Math.round(rect.left);  float top=Math.round(rect.top);  float right=Math.round(rect.right);  float bottom=Math.round(rect.bottom);  rect.set(left,top,right,bottom);}  }
class C{  public void start(){  Log.i("kyson","Start ReleaseViewManager");  end();  mHandView=new HandView(mContext);  mLineView=new LineView(mContext);  mBalloonGroup=new BalloonGroup(mContext);  mHiderView=new HiderView(mContext);  int y=ViewUtil.getStatusBarHeight(mContext) + BalloonPerformer.getInstance().getConfig().getLineLength(mContext);  mWindowManager=(WindowManager)mContext.getSystemService(Context.WINDOW_SERVICE);  int x=mWindowManager.getDefaultDisplay().getWidth() * 3 / 4;  mHandView.attachToWindow(x,y);  mLineView.attachToWindow(x,y,mHandView.getContentWidth() / 2);  setupListener();  mIsRunning=true;}  }
class C{  public void statisticsAvailable(StatisticsNotificationEvent e){  for (  AbstractExperimenterTab tab : m_Tabs) {    if (tab instanceof StatisticsNotificationListener)     ((StatisticsNotificationListener)tab).statisticsAvailable(e);  }}  }
class C{  public boolean isSetErrorCode(){  return EncodingUtils.testBit(__isset_bitfield,__ERRORCODE_ISSET_ID);}  }
class C{  String createPath(File... files){  StringBuilder sb=new StringBuilder();  for (  File f : files) {    if (sb.length() > 0)     sb.append(File.pathSeparatorChar);    sb.append(f.getPath());  }  return sb.toString();}  }
class C{  static synchronized void computePRF_SSLv3(byte[] out,byte[] secret,byte[] seed){  if (sha == null) {    init();  }  int pos=0;  int iteration=1;  byte[] digest;  while (pos < out.length) {    byte[] pref=new byte[iteration];    Arrays.fill(pref,(byte)(64 + iteration++));    sha.update(pref);    sha.update(secret);    sha.update(seed);    md5.update(secret);    md5.update(sha.digest());    digest=md5.digest();    if (pos + 16 > out.length) {      System.arraycopy(digest,0,out,pos,out.length - pos);      pos=out.length;    } else {      System.arraycopy(digest,0,out,pos,16);      pos+=16;    }  }}  }
class C{  public final void applyOptions() throws IOException {  _paneManager.applyOptions();  SettingsGroupManager.instance().save();}  }
class C{  private static boolean isPrintable(char c){  return c > 31 && c < 127;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:53.643 -0500",hash_original_method="DA29AB595B7A4A125EF99100FA337502",hash_generated_method="EB7FE71751A7FA292A28A3D6E4687565") public String encode(){  return headerName + COLON + SP+ encodeBody()+ NEWLINE;}  }
class C{  protected void drawImpl(PGraphics g){  if (family == GROUP) {    drawGroup(g);  } else   if (family == PRIMITIVE) {    drawPrimitive(g);  } else   if (family == GEOMETRY) {    drawPath(g);  } else   if (family == PATH) {    drawPath(g);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(getElementsByTagNameNS13.class,args);}  }
class C{  public void startDocument() throws SAXException {  if (contentHandler != null) {    contentHandler.startDocument();  }}  }
class C{  public static void offerBusyBox(Activity activity){  getInternals().offerBusyBox(activity);}  }
class C{  public static Short[] valuesOf(short[] array){  Short[] dest=new Short[array.length];  for (int i=0; i < array.length; i++) {    dest[i]=Short.valueOf(array[i]);  }  return dest;}  }
class C{  public void beforeAggregation(StructDescription desc,List<StructFieldDeclaration> fieldDecls){}  }
class C{  public static double max(double... numbers){  if (numbers.length < 1) {    throw new IllegalArgumentException();  }  double max=numbers[0];  for (int i=1; i < numbers.length; i++) {    if (numbers[i] > max) {      max=numbers[i];    }  }  return max;}  }
class C{  public void endVisit(EnumConstantDeclaration node){}  }
class C{  public final double SFEntropyGain(){  return m_delegate.SFEntropyGain();}  }
class C{  public void testStringArrayToNumber(){  IntegerConverter intConverter=new IntegerConverter();  ArrayConverter arrayConverter=new ArrayConverter(int[].class,intConverter);  String[] array=new String[]{"10","  11","12  ","  13  "};  ArrayList list=new ArrayList();  for (int i=0; i < array.length; i++) {    list.add(array[i]);  }  String msg=null;  int[] expectedInt=new int[]{10,11,12,13};  Integer[] expectedInteger=new Integer[]{new Integer(expectedInt[0]),new Integer(expectedInt[1]),new Integer(expectedInt[2]),new Integer(expectedInt[3])};  try {    msg="String[] --> int[]";    checkArray(msg,expectedInt,arrayConverter.convert(int[].class,array));  } catch (  Exception e) {    fail(msg + " failed " + e);  }  try {    msg="String[] --> Integer[]";    checkArray(msg,expectedInteger,arrayConverter.convert(Integer[].class,array));  } catch (  Exception e) {    fail(msg + " failed " + e);  }  try {    msg="List --> int[]";    checkArray(msg,expectedInt,arrayConverter.convert(int[].class,list));  } catch (  Exception e) {    fail(msg + " failed " + e);  }  try {    msg="List --> Integer[]";    checkArray(msg,expectedInteger,arrayConverter.convert(Integer[].class,list));  } catch (  Exception e) {    fail(msg + " failed " + e);  }}  }
class C{  private PrincipalId updateSolutionUserDetail(String tenantName,String accountName,SolutionDetail detail) throws Exception {  try {    ValidateUtil.validateNotEmpty(tenantName,"tenantName");    ServerUtils.validateNotEmptyUsername(accountName);    ValidateUtil.validateNotNull(detail,"solution user detail");    ValidateUtil.validateSolutionDetail(detail,"Solution user detail",this.getClockTolerance(tenantName));    TenantInformation tenantInfo=findTenant(tenantName);    ServerUtils.validateNotNullTenant(tenantInfo,tenantName);    ISystemDomainIdentityProvider provider=tenantInfo.findSystemProvider();    ServerUtils.validateNotNullSystemIdp(provider,tenantName);    if (ServerUtils.isEquals(tenantName,this.getSystemTenant())) {      return provider.updateServicePrincipalDetail(accountName,detail);    } else {      return provider.updateServicePrincipalDetailInExternalTenant(accountName,detail);    }  } catch (  Exception ex) {    logger.error(String.format("Failed to update solution user [%s] in tenant [%s]",accountName,tenantName));    throw ex;  }}  }
class C{  public InjectedAuthenticationProvider(JDBCInjectorProvider injectorProvider,Class<? extends AuthenticationProviderService> authProviderServiceClass) throws GuacamoleException {  Injector injector=injectorProvider.get();  authProviderService=injector.getInstance(authProviderServiceClass);}  }
class C{  public Period withFields(ReadablePeriod period){  if (period == null) {    return this;  }  int[] newValues=getValues();  newValues=super.mergePeriodInto(newValues,period);  return new Period(newValues,getPeriodType());}  }
class C{  public boolean isAllNodesDoneInstallation(){  return actionListener.getTask().isClusterInstallDone();}  }
class C{  public T caseInfoModelPropertySource(InfoModelPropertySource object){  return null;}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  protected void locate(){  int i;  m_Attributes=new BitSet(m_AllowedIndices.length);  m_Locators=new ArrayList<AttributeLocator>();  for (i=0; i < m_AllowedIndices.length; i++) {    if (m_Data.attribute(m_AllowedIndices[i]).type() == Attribute.RELATIONAL)     m_Locators.add(new AttributeLocator(m_Data.attribute(m_AllowedIndices[i]).relation(),getType())); else     m_Locators.add(null);    m_Attributes.set(i,m_Data.attribute(m_AllowedIndices[i]).type() == getType());  }}  }
class C{  void postInit(XCreateWindowParams params){  if (log.isLoggable(PlatformLogger.Level.FINE)) {    log.fine("WM name is " + getWMName());  }  updateWMName();  initClientLeader();}  }
class C{  public void addRequire(final String require){  if (require != null && require.trim().length() > 0) {    requires.add(require.trim());  }}  }
class C{  public TypeReference(int typeRef){  this.value=typeRef;}  }
class C{  public static boolean isNormal(GeoTimeSerie gts,int buckets,double pcterror,boolean bessel){  if (0 == gts.values) {    return true;  }  if (TYPE.DOUBLE != gts.type && TYPE.LONG != gts.type) {    return false;  }  double[] musigma=musigma(gts,bessel);  double mu=musigma[0];  double sigma=musigma[1];  if (0.0D == sigma) {    return false;  }  double[] bounds=SAXUtils.getBounds(buckets);  int[] counts=new int[bounds.length + 1];  for (int i=0; i < gts.values; i++) {    double v=((double)GTSHelper.valueAtIndex(gts,i) - mu) / sigma;    int insertion=Arrays.binarySearch(bounds,v);    if (insertion >= 0) {      counts[insertion]++;    } else {      counts[-(1 + insertion)]++;    }  }  double mean=gts.values / counts.length;  for (int i=0; i < counts.length; i++) {    if (Math.abs(1.0D - (counts[i] / mean)) > pcterror) {      return false;    }  }  return true;}  }
class C{  public IndexedColor(PDFColorSpace base,int count,PDFObject stream) throws IOException {  count++;  this.count=count;  byte[] data=stream.getStream();  int nchannels=base.getNumComponents();  boolean offSized=(data.length / nchannels) < count;  table=new int[count];  float comps[]=new float[nchannels];  int loc=0;  int finalloc=0;  for (int i=0; i < count; i++) {    for (int j=0; j < comps.length; j++) {      if (loc < data.length) {        comps[j]=(((int)data[loc++]) & 0xff) / 255f;      } else {        comps[j]=1.0f;      }    }    table[i]=base.toColor(comps);  }}  }
class C{  private void generateDependenciesForExtension(SourceWriter sw,JClassType extension) throws UnableToCompleteException {  if (extension.getConstructors().length == 0) {    throw new UnableToCompleteException();  }  sw.println("List<DependencyDescription> deps = new ArrayList<>();");  JConstructor jConstructor=extension.getConstructors()[0];  JType[] parameterTypes=jConstructor.getParameterTypes();  for (  JType jType : parameterTypes) {    JClassType argType=jType.isClassOrInterface();    if (argType != null && (argType.isAnnotationPresent(SDK.class) || argType.isAnnotationPresent(Extension.class))) {      String id="";      String version="";      if (argType.isAnnotationPresent(SDK.class)) {        id=argType.getAnnotation(SDK.class).title();      } else       if (argType.isAnnotationPresent(Extension.class)) {        id=argType.getQualifiedSourceName();        version=argType.getAnnotation(Extension.class).version();      }      sw.println("deps.add(new DependencyDescription(\"%s\", \"%s\"));",escape(id),escape(version));    }  }}  }
class C{  public void clear(){  super.clear();  while (queue.poll() != null) {  }}  }
class C{  public ChatMessage(final String source,final String message,final String timestamp,final String messagetype){  this.source=source;  this.message=message;  this.timestamp=timestamp;  this.messagetype=messagetype;}  }
class C{  private static void decodeTextSegment(BitSource bits,StringBuilder result) throws FormatException {  boolean upperShift=false;  int[] cValues=new int[3];  int shift=0;  do {    if (bits.available() == 8) {      return;    }    int firstByte=bits.readBits(8);    if (firstByte == 254) {      return;    }    parseTwoBytes(firstByte,bits.readBits(8),cValues);    for (int i=0; i < 3; i++) {      int cValue=cValues[i];switch (shift) {case 0:        if (cValue < 3) {          shift=cValue + 1;        } else         if (cValue < TEXT_BASIC_SET_CHARS.length) {          char textChar=TEXT_BASIC_SET_CHARS[cValue];          if (upperShift) {            result.append((char)(textChar + 128));            upperShift=false;          } else {            result.append(textChar);          }        } else {          throw FormatException.getFormatInstance();        }      break;case 1:    if (upperShift) {      result.append((char)(cValue + 128));      upperShift=false;    } else {      result.append((char)cValue);    }  shift=0;break;case 2:if (cValue < C40_SHIFT2_SET_CHARS.length) {char c40char=C40_SHIFT2_SET_CHARS[cValue];if (upperShift) {  result.append((char)(c40char + 128));  upperShift=false;} else {  result.append(c40char);}} else if (cValue == 27) {result.append((char)29);} else if (cValue == 30) {upperShift=true;} else {throw FormatException.getFormatInstance();}shift=0;break;case 3:if (cValue < TEXT_SHIFT3_SET_CHARS.length) {char textChar=TEXT_SHIFT3_SET_CHARS[cValue];if (upperShift) {result.append((char)(textChar + 128));upperShift=false;} else {result.append(textChar);}shift=0;} else {throw FormatException.getFormatInstance();}break;default :throw FormatException.getFormatInstance();}}} while (bits.available() > 0);}  }
class C{  private void waitForNoResults(int maxTimeLimitSeconds,SolrParams params) throws SolrServerException, InterruptedException, IOException {  final TimeOut timeout=new TimeOut(maxTimeLimitSeconds,TimeUnit.SECONDS);  long numFound=cluster.getSolrClient().query(COLLECTION,params).getResults().getNumFound();  while (0L < numFound && !timeout.hasTimedOut()) {    Thread.sleep(Math.max(1,Math.min(5000,timeout.timeLeft(TimeUnit.MILLISECONDS))));    numFound=cluster.getSolrClient().query(COLLECTION,params).getResults().getNumFound();  }  assertEquals("Give up waiting for no results: " + params,0L,numFound);}  }
class C{  public boolean add(E e){  hashCodeUpToDate=false;  ensureCapacityInternal(size + 1);  elementData[size++]=e;  return true;}  }
class C{  @Override public void configureZone(StendhalRPZone zone,Map<String,String> attributes){  buildSemosNorthPlainsArea(zone);}  }
class C{  @Override public boolean equals(Object o){  return (o instanceof RuleOutput && effects.equals(((RuleOutput)o).effects));}  }
class C{  public String post(Context context,String url,RequestParams params) throws HttpException {  return post(context,url,paramsToEntity(params),null);}  }
class C{  public void removeOrderedHandler(Object topic){  if (orderedHandlers.remove(topic) != null) {    cctx.gridIO().removeMessageListener(topic);    if (log != null && log.isDebugEnabled())     log.debug("Unregistered ordered cache communication handler for topic:" + topic);  } else   if (log != null)   U.warn(log,"Failed to unregister ordered cache communication handler because it was not found " + "for topic: " + topic);}  }
class C{  public static SecurityServerId create(String xRoadInstance,String memberClass,String memberCode,String serverCode){  validateField("xRoadInstance",xRoadInstance);  validateField("memberClass",memberClass);  validateField("memberCode",memberCode);  validateField("serverCode",serverCode);  return new SecurityServerId(xRoadInstance,memberClass,memberCode,serverCode);}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  double[] numbers=new double[10];  System.out.print("Enter ten numbers: ");  for (int i=0; i < numbers.length; i++) {    numbers[i]=input.nextDouble();  }  System.out.println("The minimum number is: " + min(numbers));}  }
class C{  public String evaluatorTipText(){  return "Determines how attributes/attribute subsets are evaluated.";}  }
class C{  public static double computeOverlaySnapTolerance(Geometry g){  double snapTolerance=computeSizeBasedSnapTolerance(g);  PrecisionModel pm=g.getPrecisionModel();  if (pm.getType() == PrecisionModel.FIXED) {    double fixedSnapTol=(1 / pm.getScale()) * 2 / 1.415;    if (fixedSnapTol > snapTolerance)     snapTolerance=fixedSnapTol;  }  return snapTolerance;}  }
class C{  @Override public void updateDate(int columnIndex,Date x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateDate(" + columnIndex + ", x);");    }    update(columnIndex,x == null ? (Value)ValueNull.INSTANCE : ValueDate.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void write(PrintStream stream){  this.output=stream;  dispatch(base,false);  stream.flush();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-18 12:05:54.606 -0400",hash_original_method="FD2BA800170C8DC42E379DABFFB5EFE5",hash_generated_method="B239975B85A9B21DC60FCDFB76323183") public static ActivityOptionsCompat makeCustomAnimation(Context context,int enterResId,int exitResId){  if (Build.VERSION.SDK_INT >= 16) {    return new ActivityOptionsImplJB(ActivityOptionsCompatJB.makeCustomAnimation(context,enterResId,exitResId));  }  return new ActivityOptionsCompat();}  }
class C{  public void clear(){  m_textArea.setText("");}  }
class C{  public String outlierFactorTipText(){  return "The factor for determining the thresholds for outliers.";}  }
class C{  void writeTo(OutputStream out) throws IOException {  flush();  ByteArrayOutputStream byteOut=(ByteArrayOutputStream)this.out;  byteOut.writeTo(out);  byteOut.reset();}  }
class C{  public static InputStream fromInputStream(InputStream src,StatsLogger statsLogger) throws IOException {  src.mark(VERSION_LENGTH);  byte version=new DataInputStream(src).readByte();  src.reset();  EnvelopedEntry entry=new EnvelopedEntry(version,statsLogger);  entry.readFully(new DataInputStream(src));  return new ByteArrayInputStream(entry.getDecompressedPayload());}  }
class C{  public static long[] join(long[] arrayA,long... arrayB){  if ((arrayB == null) || (arrayB.length == 0)) {    return arrayA;  }  if ((arrayA == null) || (arrayA.length == 0)) {    return arrayB;  }  long[] array=new long[arrayA.length + arrayB.length];  System.arraycopy(arrayA,0,array,0,arrayA.length);  System.arraycopy(arrayB,0,array,arrayA.length,arrayB.length);  return array;}  }
class C{  private void instrumentForms(final InstrumentationClassFinder finder){  final ArrayList formsToInstrument=myFormFiles;  if (formsToInstrument.size() == 0) {    log("No forms to instrument found",Project.MSG_VERBOSE);    return;  }  final HashMap class2form=new HashMap();  for (int i=0; i < formsToInstrument.size(); i++) {    final File formFile=(File)formsToInstrument.get(i);    log("compiling form " + formFile.getAbsolutePath(),Project.MSG_VERBOSE);    final LwRootContainer rootContainer;    try {      rootContainer=Utils.getRootContainer(formFile.toURI().toURL(),new CompiledClassPropertiesProvider(finder.getLoader()));    } catch (    AlienFormFileException e) {      continue;    }catch (    Exception e) {      fireError("Cannot process form file " + formFile.getAbsolutePath() + ". Reason: "+ e);      continue;    }    final String classToBind=rootContainer.getClassToBind();    if (classToBind == null) {      continue;    }    String name=classToBind.replace('.','/');    File classFile=getClassFile(name);    if (classFile == null) {      log(formFile.getAbsolutePath() + ": Class to bind does not exist: " + classToBind,Project.MSG_WARN);      continue;    }    final File alreadyProcessedForm=(File)class2form.get(classToBind);    if (alreadyProcessedForm != null) {      fireError(formFile.getAbsolutePath() + ": " + "The form is bound to the class "+ classToBind+ ".\n"+ "Another form "+ alreadyProcessedForm.getAbsolutePath()+ " is also bound to this class.");      continue;    }    class2form.put(classToBind,formFile);    try {      int version;      InputStream stream=new FileInputStream(classFile);      try {        version=getClassFileVersion(new ClassReader(stream));      }  finally {        stream.close();      }      AntNestedFormLoader formLoader=new AntNestedFormLoader(finder.getLoader(),myNestedFormPathList);      InstrumenterClassWriter classWriter=new InstrumenterClassWriter(getAsmClassWriterFlags(version),finder);      final AsmCodeGenerator codeGenerator=new AsmCodeGenerator(rootContainer,finder,formLoader,false,classWriter);      codeGenerator.patchFile(classFile);      final FormErrorInfo[] warnings=codeGenerator.getWarnings();      for (int j=0; j < warnings.length; j++) {        log(formFile.getAbsolutePath() + ": " + warnings[j].getErrorMessage(),Project.MSG_WARN);      }      final FormErrorInfo[] errors=codeGenerator.getErrors();      if (errors.length > 0) {        StringBuffer message=new StringBuffer();        for (int j=0; j < errors.length; j++) {          if (message.length() > 0) {            message.append("\n");          }          message.append(formFile.getAbsolutePath()).append(": ").append(errors[j].getErrorMessage());        }        fireError(message.toString());      }    } catch (    Exception e) {      fireError("Forms instrumentation failed for " + formFile.getAbsolutePath() + ": "+ e.toString());    }  }}  }
class C{  public static String bytesToHex(byte[] bytes){  char[] hexChars=new char[bytes.length * 2];  for (int j=0; j < bytes.length; j++) {    int v=bytes[j] & 0xFF;    hexChars[j * 2]=hexArray[v >>> 4];    hexChars[j * 2 + 1]=hexArray[v & 0x0F];  }  return new String(hexChars);}  }
class C{  public void addLineNumber(char startPc,char lineNumber){  if (lineDebugInfo) {    if (lineInfo.nonEmpty() && lineInfo.head[0] == startPc)     lineInfo=lineInfo.tail;    if (lineInfo.isEmpty() || lineInfo.head[1] != lineNumber)     lineInfo=lineInfo.prepend(new char[]{startPc,lineNumber});  }}  }
class C{  public boolean isAcceptable(GeneralName gname){  if (this.tag != gname.getTag()) {    return false;  }switch (this.tag) {case RFC822_NAME:    return ((String)gname.getName()).toLowerCase(Locale.US).endsWith(((String)name).toLowerCase(Locale.US));case DNS_NAME:  String dns=(String)name;String _dns=(String)gname.getName();if (dns.equalsIgnoreCase(_dns)) {return true;} else {return _dns.toLowerCase(Locale.US).endsWith("." + dns.toLowerCase(Locale.US));}case UR_ID:String uri=(String)name;int begin=uri.indexOf("://") + 3;int end=uri.indexOf('/',begin);String host=(end == -1) ? uri.substring(begin) : uri.substring(begin,end);uri=(String)gname.getName();begin=uri.indexOf("://") + 3;end=uri.indexOf('/',begin);String _host=(end == -1) ? uri.substring(begin) : uri.substring(begin,end);if (host.startsWith(".")) {return _host.toLowerCase(Locale.US).endsWith(host.toLowerCase(Locale.US));} else {return host.equalsIgnoreCase(_host);}case IP_ADDR:byte[] address=(byte[])name;byte[] _address=(byte[])gname.getName();int length=address.length;int _length=_address.length;if (length == _length) {return Arrays.equals(address,_address);} else if (length == 2 * _length) {for (int i=0; i < _address.length; i++) {int octet=_address[i] & 0xff;int min=address[i] & 0xff;int max=address[i + _length] & 0xff;if ((octet < min) || (octet > max)) {return false;}}return true;} else {return false;}case DIR_NAME:case X400_ADDR:case OTHER_NAME:case EDIP_NAME:case REG_ID:return Arrays.equals(getEncoded(),gname.getEncoded());default :}return true;}  }
class C{  public ObjectStreamConnection(String host,int port,int id){  super(host,port,id);}  }
class C{  public SmoothMoves(){  cycleStart=System.nanoTime() / 1000000;  startTimer(currentResolution);}  }
class C{  public static void initUrbanSimZoneWriter(){  try {    log.info("Initializing UrbanSimParcelCSVWriter ...");    parcelWriter=IOUtils.getBufferedWriter(InternalConstants.MATSIM_4_OPUS_TEMP + FILE_NAME);    log.info("Writing data into " + InternalConstants.MATSIM_4_OPUS_TEMP + FILE_NAME+ " ...");    parcelWriter.write(InternalConstants.PARCEL_ID + "," + InternalConstants.ACCESSIBILITY_BY_FREESPEED+ ","+ InternalConstants.ACCESSIBILITY_BY_CAR+ ","+ InternalConstants.ACCESSIBILITY_BY_BIKE+ ","+ InternalConstants.ACCESSIBILITY_BY_WALK);    parcelWriter.newLine();    log.info("... done!");  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public dt removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  public static QueryStorageLuns parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  QueryStorageLuns object=new QueryStorageLuns();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"queryStorageLuns".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (QueryStorageLuns)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    java.util.ArrayList list1=new java.util.ArrayList();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","lunUniqueId").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if ("true".equals(nillableValue) || "1".equals(nillableValue)) {        list1.add(null);        reader.next();      } else {        list1.add(reader.getElementText());      }      boolean loopDone1=false;      while (!loopDone1) {        while (!reader.isEndElement()) {          reader.next();        }        reader.next();        while (!reader.isStartElement() && !reader.isEndElement()) {          reader.next();        }        if (reader.isEndElement()) {          loopDone1=true;        } else {          if (new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","lunUniqueId").equals(reader.getName())) {            nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {              list1.add(null);              reader.next();            } else {              list1.add(reader.getElementText());            }          } else {            loopDone1=true;          }        }      }      object.setLunUniqueId((java.lang.String[])list1.toArray(new java.lang.String[list1.size()]));    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  private boolean compareAndDecrementWorkerCount(int expect){  return ctl.compareAndSet(expect,expect - 1);}  }
class C{  public static int extractHighSignedNibble(int value){  return (value << 24) >> 28;}  }
class C{  @Override public boolean needsMaterialization(){  return false;}  }
class C{  @Override public synchronized void initialize(){  if (!mRootDirectory.exists()) {    if (!mRootDirectory.mkdirs()) {      VolleyLog.e("Unable to create cache dir %s",mRootDirectory.getAbsolutePath());    }    return;  }  File[] files=mRootDirectory.listFiles();  if (files == null) {    return;  }  for (  File file : files) {    FileInputStream fis=null;    try {      fis=new FileInputStream(file);      CacheHeader entry=CacheHeader.readHeader(fis);      entry.size=file.length();      putEntry(entry.key,entry);    } catch (    IOException e) {      if (file != null) {        file.delete();      }    } finally {      try {        if (fis != null) {          fis.close();        }      } catch (      IOException ignored) {      }    }  }}  }
class C{  public static AnnotationMirror buildAnnoMirrorWithSpecificPrefix(final ProcessingEnvironment env,final Class<? extends Annotation> annoClass,final Prefix p){  if (env == null || annoClass == null || p == null) {    return null;  }  AnnotationBuilder builder=new AnnotationBuilder(env,annoClass);  builder.setValue("value",p);  return builder.build();}  }
class C{  private int handleGH(String value,DoubleMetaphoneResult result,int index){  if (index > 0 && !isVowel(charAt(value,index - 1))) {    result.append('K');    index+=2;  } else   if (index == 0) {    if (charAt(value,index + 2) == 'I') {      result.append('J');    } else {      result.append('K');    }    index+=2;  } else   if ((index > 1 && contains(value,index - 2,1,"B","H","D")) || (index > 2 && contains(value,index - 3,1,"B","H","D")) || (index > 3 && contains(value,index - 4,1,"B","H"))) {    index+=2;  } else {    if (index > 2 && charAt(value,index - 1) == 'U' && contains(value,index - 3,1,"C","G","L","R","T")) {      result.append('F');    } else     if (index > 0 && charAt(value,index - 1) != 'I') {      result.append('K');    }    index+=2;  }  return index;}  }
class C{  @Override public void execute(org.apache.commons.exec.CommandLine cmd,Map<String,String> env,ExecuteResultHandler erh) throws IOException {  int code=execute(cmd);  if (code != 0)   throw new RuntimeException("Failed to execute cmd: " + joinArgs(cmd.getArguments()));}  }
class C{  public void updateTimeout(int newValue){  this.timeout=newValue;}  }
class C{  public boolean containsProperty(String name){  return properties.containsKey(name);}  }
class C{  private void initializeLiveAttributes(){  method=createLiveAnimatedEnumeration(null,SVG_METHOD_ATTRIBUTE,METHOD_VALUES,(short)1);  spacing=createLiveAnimatedEnumeration(null,SVG_SPACING_ATTRIBUTE,SPACING_VALUES,(short)2);  startOffset=createLiveAnimatedLength(null,SVG_START_OFFSET_ATTRIBUTE,SVG_TEXT_PATH_START_OFFSET_DEFAULT_VALUE,SVGOMAnimatedLength.OTHER_LENGTH,true);  href=createLiveAnimatedString(XLINK_NAMESPACE_URI,XLINK_HREF_ATTRIBUTE);}  }
class C{  private void clearComposeState(){  m_composeState=null;}  }
class C{  public static boolean isSubclass(Class<?> superclass,Class<?> otherclass){  Class<?> currentclass;  boolean result;  result=false;  currentclass=otherclass;  do {    result=currentclass.equals(superclass);    if (currentclass.equals(Object.class)) {      break;    }    if (!result) {      currentclass=currentclass.getSuperclass();    }  } while (!result);  return result;}  }
class C{  private void updateErrorSections(){  HttpServletRequest request=JSFUtils.getRequest();  Set<?> sectionsToExpand=(Set<?>)request.getAttribute(SECTIONS_TO_EXPAND);  if (sectionsToExpand != null) {    for (    Object o : sectionsToExpand) {      put(o.toString(),Boolean.TRUE.toString());    }  }}  }
class C{  public SVGOMTitleElement(String prefix,AbstractDocument owner){  super(prefix,owner);}  }
class C{  public static InsertIntoClause create(String streamName,String... columns){  return new InsertIntoClause(streamName,columns);}  }
class C{  public BuildImageParams withDoForcePull(boolean doForcePull){  this.doForcePull=doForcePull;  return this;}  }
class C{  public void afterPropertiesSet() throws Exception {  String platform=System.getProperty("os.name");  if (platformPrefixMappings != null) {    platformPrefix=(String)platformPrefixMappings.get(platform);  }  if (platformPrefix == null) {    platformPrefix=(String)DEFAULT_PLATFORM_PREFIX_MAPPINGS.get(platform);  }}  }
class C{  private StyledAttributesUtils(){}  }
class C{  public boolean canChangeWarehouse(){  if (getQtyDelivered().signum() != 0) {    log.saveError("Error",Msg.translate(getCtx(),"QtyDelivered") + "=" + getQtyDelivered());    return false;  }  if (getQtyReserved().signum() != 0) {    log.saveError("Error",Msg.translate(getCtx(),"QtyReserved") + "=" + getQtyReserved());    return false;  }  return true;}  }
class C{  public QueryService limit(Integer limit){  this.limit=limit;  return this;}  }
class C{  public void addLeaf(CatalogTreeLeaf leaf){  _leaves.add(leaf);}  }
class C{  private List<Statistics> removeSucceeded(List<Statistics> statistics){  List<Statistics> result=new ArrayList<>();  for (  Statistics statistic : statistics) {    if (!statistic.getSucceeded())     result.add(statistic);  }  return result;}  }
class C{  public void renameDivider(int divId,String name) throws Exception {  m_fdr.getDocumentTree().renameDivider(divId,name);}  }
class C{  @Override protected boolean isSwitchFor(EPackage ePackage){  return ePackage == modelPackage;}  }
class C{  private Settings(){}  }
class C{  @RequestMapping(value="/businessObjectData/unregistered/invalidation",method=RequestMethod.POST,consumes={"application/xml","application/json"}) @Secured(SecurityFunctions.FN_BUSINESS_OBJECT_DATA_UNREGISTERED_INVALIDATE) public BusinessObjectDataInvalidateUnregisteredResponse invalidateUnregisteredBusinessObjectData(@RequestBody BusinessObjectDataInvalidateUnregisteredRequest businessObjectDataInvalidateUnregisteredRequest){  BusinessObjectDataInvalidateUnregisteredResponse businessObjectDataInvalidateUnregisteredResponse=businessObjectDataService.invalidateUnregisteredBusinessObjectData(businessObjectDataInvalidateUnregisteredRequest);  businessObjectDataDaoHelper.triggerNotificationsForInvalidateUnregisteredBusinessObjectData(businessObjectDataInvalidateUnregisteredResponse);  return businessObjectDataInvalidateUnregisteredResponse;}  }
class C{  public String toString(){  String result;  int i;  result="";  for (i=0; i < m_Elements.size(); i++) {    if (i > 0)     result+=".";    result+=m_Elements.get(i);  }  return result;}  }
class C{  public void evictAll(){  List<Connection> connections;synchronized (this) {    connections=new ArrayList<Connection>(this.connections);    this.connections.clear();  }  for (  Connection connection : connections) {    Util.closeQuietly(connection);  }}  }
class C{  @Override public void serviceAdded(ServiceEvent event){synchronized (this) {    ServiceInfo info=event.getInfo();    if ((info != null) && (info.hasData())) {      _infos.put(event.getName(),info);    } else {      String subtype=(info != null ? info.getSubtype() : "");      info=((JmDNSImpl)event.getDNS()).resolveServiceInfo(event.getType(),event.getName(),subtype,true);      if (info != null) {        _infos.put(event.getName(),info);      } else {        _events.put(event.getName(),event);      }    }  }}  }
class C{  public static TypesTree createPrototypeDndTypesTree(INaviFunction function,TypeManager typeManager){  Preconditions.checkNotNull(function,"Error: function argument can not be null");  Preconditions.checkNotNull(typeManager,"Error: typeManager argument can not be null");  final TypesTree typesTree=CreateDragAndDropTypesTree(typeManager);  final TypesTreeModel model=function.getPrototype() == null ? TypesTreeModel.createEmptyTypeModel() : TypesTreeModel.createSingleTypeModel(typeManager,function.getPrototype());  typesTree.setModel(model);  unfoldFirstNode(typesTree);  return typesTree;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:38.480 -0500",hash_original_method="BF59FB26E066BD2B7E2B2FCD96B9B9F3",hash_generated_method="982BE1730A7A2D298BBB05287D16F5B6") static public void createDbFromSqlStatements(Context context,String dbName,int dbVersion,String sqlStatements){  SQLiteDatabase db=context.openOrCreateDatabase(dbName,0,null);  String[] statements=TextUtils.split(sqlStatements,";\n");  for (  String statement : statements) {    if (TextUtils.isEmpty(statement))     continue;    db.execSQL(statement);  }  db.setVersion(dbVersion);  db.close();}  }
class C{  private void deleteManager(HttpServletRequest request,TimetableManagerForm frm){  sessionContext.checkPermission(frm.getUniqueId(),"TimetableManager",Right.TimetableManagerEdit);  TimetableManagerDAO mgrDao=new TimetableManagerDAO();  Session hibSession=mgrDao.getSession();  TimetableManager mgr=mgrDao.get(new Long(frm.getUniqueId()));  Transaction tx=hibSession.beginTransaction();  ChangeLog.addChange(hibSession,sessionContext,mgr,ChangeLog.Source.MANAGER_EDIT,ChangeLog.Operation.DELETE,null,null);  Set mgrRoles=mgr.getManagerRoles();  for (Iterator i=mgrRoles.iterator(); i.hasNext(); ) {    ManagerRole mgrRole=(ManagerRole)i.next();    hibSession.delete(mgrRole);  }  for (  Department d : mgr.getDepartments()) {    d.getTimetableManagers().remove(mgr);    hibSession.saveOrUpdate(d);  }  for (  SolverGroup sg : mgr.getSolverGroups()) {    sg.getTimetableManagers().remove(mgr);    hibSession.saveOrUpdate(sg);  }  hibSession.delete(mgr);  tx.commit();}  }
class C{  public Builder entity(Entity entity){  if (entities == null) {    entities=new ArrayList<Entity>();  }  entities.add(entity);  return this;}  }
class C{  public static <T>int upperBound(final List<T> valueList,int fromIdx,int toIdx,final Comparable<T> value){  int len=toIdx - fromIdx + (toIdx > fromIdx ? 1 : 0);  int from=fromIdx;  int half;  int middle;  while (len > 0) {    half=len >> 1;    middle=from;    middle=middle + half;    if (value.compareTo(valueList.get(middle)) == -1) {      len=half;    } else {      from=middle;      from++;      len=len - half - 1;    }  }  return from;}  }
class C{  @Override public double assortativity(Graph g){  SampledGraph graph=(SampledGraph)g;  double product=0;  double sum=0;  double squareSum=0;  double M=0;  for (  SampledEdge e : graph.getEdges()) {    SampledVertex v_i=e.getVertices().getFirst();    SampledVertex v_j=e.getVertices().getSecond();    if (v_i.isSampled() && v_j.isSampled()) {      int k_i=v_i.getEdges().size();      int k_j=v_j.getEdges().size();      sum+=0.5 * (k_i + k_j);      squareSum+=0.5 * (Math.pow(k_i,2) + Math.pow(k_j,2));      product+=k_i * k_j;      M++;    }  }  double norm=1 / M;  return ((norm * product) - Math.pow(norm * sum,2)) / ((norm * squareSum) - Math.pow(norm * sum,2));}  }
class C{  public GridStripedReadWriteLock(int concurrencyLevel){  locks=new ReadWriteLock[concurrencyLevel];  for (int i=0; i < concurrencyLevel; i++)   locks[i]=new ReentrantReadWriteLock();}  }
class C{  @PUT @Path("internal/certificate-version") @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public Response incrementCertificateVersion() throws Exception {  PropertyInfoRestRep targetPropInfo=getTargetPropsCommon();  String versionStr=targetPropInfo.getProperty(CERTIFICATE_VERSION);  Integer version=new Integer(versionStr);  PropertyInfoUpdate setProperty=new PropertyInfoUpdate();  setProperty.addProperty(CERTIFICATE_VERSION,(++version).toString());  _log.info("setProperties(): {}",setProperty);  PropertyInfoRestRep updateProps=getUpdateProps(setProperty,targetPropInfo.getAllProperties());  return updatePropertiesCommon(updateProps,null);}  }
class C{  private boolean waitForEnableToComplete(FunctionalAPIImpl port,ConsistencyGroupCopyUID groupCopy,ImageAccessMode accessMode,TimeFrame timeFrame) throws FunctionalAPIActionFailedException_Exception, FunctionalAPIInternalError_Exception, InterruptedException, RecoverPointException {  final int transactionTimeout=3 * MAX_RETRIES;  VerifyConsistencyGroupStateParam stateParam=new VerifyConsistencyGroupStateParam();  stateParam.getCopies().add(groupCopy);  VerifyConsistencyGroupCopyStateParam copyStateParam=new VerifyConsistencyGroupCopyStateParam();  copyStateParam.setCopyUID(groupCopy);  if (accessMode == null || accessMode == ImageAccessMode.UNKNOWN) {    logger.info("Verify whether copy image is enabled");    return verifyGroupCopyImageIsEnabled(port,groupCopy,false,null);  } else   if (accessMode == ImageAccessMode.LOGGED_ACCESS) {    copyStateParam.getPossibleStorageAccessStates().add(StorageAccessState.LOGGED_ACCESS);  } else   if (accessMode == ImageAccessMode.VIRTUAL_ACCESS) {    copyStateParam.getPossibleStorageAccessStates().add(StorageAccessState.VIRTUAL_ACCESS);  } else   if (accessMode == ImageAccessMode.VIRTUAL_ACCESS_WITH_ROLL) {    copyStateParam.getPossibleStorageAccessStates().add(StorageAccessState.VIRTUAL_ACCESS_ROLLING_IMAGE);    copyStateParam.getPossibleStorageAccessStates().add(StorageAccessState.LOGGED_ACCESS_ROLL_COMPLETE);  } else {    logger.error("Cannot check storage access state.  Unknown accessMode");    return false;  }  if (timeFrame != null) {    copyStateParam.setAccessedImageTime(timeFrame);  }  stateParam.getCopiesConditions().add(copyStateParam);  logger.info("sleeping 15s for the enable image access to complete");  Thread.sleep(Long.valueOf(15 * numMillisInSecond));  TransactionID transactionID=port.verifyConsistencyGroupState(groupCopy.getGroupUID(),stateParam,transactionTimeout);  logger.debug("Transaction ID: " + transactionID.getId());  TransactionResult result=getTransactionResult(port,transactionID);  if (result != null) {    if (result.getExceptionMessage() != null) {      logger.warn("waitForEnableToComplete failed with: " + result.getExceptionMessage());    }  }  return (result != null) && (result.getExceptionMessage() == null || result.getExceptionMessage().equals("Internal error."));}  }
class C{  public FileVirtualPoolRestRep create(FileVirtualPoolParam input){  return client.post(FileVirtualPoolRestRep.class,input,baseUrl);}  }
class C{  @Override public void mouseExited(MouseEvent e){}  }
class C{  private void fetchFolded(){  fetchBlockScalar('>');}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:01.594 -0500",hash_original_method="2F4529BDEA4C79E5E2F449E50272F3AC",hash_generated_method="9DF69ACE1D900389CAFBC50DAB16AEBE") private boolean isCarrierOtaSpNum(String dialStr){  boolean isOtaSpNum=false;  int sysSelCodeInt=extractSelCodeFromOtaSpNum(dialStr);  if (sysSelCodeInt == INVALID_SYSTEM_SELECTION_CODE) {    return isOtaSpNum;  }  if (!TextUtils.isEmpty(mCarrierOtaSpNumSchema)) {    Matcher m=pOtaSpNumSchema.matcher(mCarrierOtaSpNumSchema);    if (DBG) {      Log.d(LOG_TAG,"isCarrierOtaSpNum,schema" + mCarrierOtaSpNumSchema);    }    if (m.find()) {      String sch[]=pOtaSpNumSchema.split(mCarrierOtaSpNumSchema);      if (!TextUtils.isEmpty(sch[0]) && sch[0].equals("SELC")) {        if (sysSelCodeInt != INVALID_SYSTEM_SELECTION_CODE) {          isOtaSpNum=checkOtaSpNumBasedOnSysSelCode(sysSelCodeInt,sch);        } else {          if (DBG) {            Log.d(LOG_TAG,"isCarrierOtaSpNum,sysSelCodeInt is invalid");          }        }      } else       if (!TextUtils.isEmpty(sch[0]) && sch[0].equals("FC")) {        int fcLen=Integer.parseInt((String)sch[1]);        String fc=(String)sch[2];        if (dialStr.regionMatches(0,fc,0,fcLen)) {          isOtaSpNum=true;        } else {          if (DBG)           Log.d(LOG_TAG,"isCarrierOtaSpNum,not otasp number");        }      } else {        if (DBG) {          Log.d(LOG_TAG,"isCarrierOtaSpNum,ota schema not supported" + sch[0]);        }      }    } else {      if (DBG) {        Log.d(LOG_TAG,"isCarrierOtaSpNum,ota schema pattern not right" + mCarrierOtaSpNumSchema);      }    }  } else {    if (DBG)     Log.d(LOG_TAG,"isCarrierOtaSpNum,ota schema pattern empty");  }  return isOtaSpNum;}  }
class C{  public APIConnectionException(String message){  super(message);}  }
class C{  public static float[][] calc(float[] xpoints,float[] ypoints,boolean geometryClosed){  return calc(xpoints,ypoints,geometryClosed,12);}  }
class C{  public static String toString(int[] a){  if (a == null)   return "null";  int iMax=a.length - 1;  if (iMax == -1)   return "[]";  StringBuilder b=new StringBuilder();  b.append('[');  for (int i=0; ; i++) {    b.append(a[i]);    if (i == iMax)     return b.append(']').toString();    b.append(", ");  }}  }
class C{  public void putStatusWord(long statusWord){  fInvalid=((statusWord & 1) == 1);  fDenormalized=((statusWord & 2) == 2);  fZeroDivide=((statusWord & 4) == 4);  fOverflow=((statusWord & 8) == 8);  fUnderflow=((statusWord & 16) == 16);  fPrecision=((statusWord & 32) == 32);  fStackFault=((statusWord & 64) == 64);  fC0=((statusWord & 256) == 256);  fC1=((statusWord & 512) == 512);  fC2=((statusWord & 1024) == 1024);  top=(int)((statusWord >> 11) & 7);  fC3=((statusWord & 16384) == 16384);}  }
class C{  public DeleteBlockStats checkDeleteBlocks(final AbstractJournal journal){  final DeleteBlockStats stats=new DeleteBlockStats();  final IIndex commitRecordIndex=journal.getReadOnlyCommitRecordIndex();  if (commitRecordIndex == null) {    return stats;  }  @SuppressWarnings("unchecked") final ITupleIterator<CommitRecordIndex.Entry> commitRecords=commitRecordIndex.rangeIterator();  while (commitRecords.hasNext()) {    final ITuple<CommitRecordIndex.Entry> tuple=commitRecords.next();    final CommitRecordIndex.Entry entry=tuple.getObject();    try {      final ICommitRecord record=CommitRecordSerializer.INSTANCE.deserialize(journal.read(entry.addr));      final long blockAddr=record.getRootAddr(AbstractJournal.DELETEBLOCK);      if (blockAddr != 0) {        checkDeferrals(blockAddr,record.getTimestamp(),stats);      }      stats.m_commitRecords++;    } catch (    RuntimeException re) {      throw new RuntimeException("Problem with entry at " + entry.addr,re);    }  }  return stats;}  }
class C{  @Override public void printStackTrace(){  printStackTrace(System.err);}  }
class C{  public int nodeNumber(int position,int[] genome){  if (phenotype(position,genome) == GENE_OUTPUT)   return numInputs + numNodes + (position - (numNodes * (maxArity + 1)));  return numInputs + (position / (maxArity + 1));}  }
class C{  private void ensureHasCurrentRow() throws SQLException {  if (curr == null)   throw new SQLException("Result set is not positioned on a row.");}  }
class C{  public int maxCacheEntries(){  return maxCacheEntries;}  }
class C{  Writer write(Writer writer,int indentFactor,int indent) throws JSONException {  try {    boolean commanate=false;    int length=this.length();    writer.write('[');    if (length == 1) {      JSONObject.writeValue(writer,this.myArrayList.get(0),indentFactor,indent);    } else     if (length != 0) {      final int newindent=indent + indentFactor;      for (int i=0; i < length; i+=1) {        if (commanate) {          writer.write(',');        }        if (indentFactor > 0) {          writer.write('\n');        }        JSONObject.indent(writer,newindent);        JSONObject.writeValue(writer,this.myArrayList.get(i),indentFactor,newindent);        commanate=true;      }      if (indentFactor > 0) {        writer.write('\n');      }      JSONObject.indent(writer,indent);    }    writer.write(']');    return writer;  } catch (  IOException e) {    throw new JSONException(e);  }}  }
class C{  public static int ceilLog256(long n){  if (n == 0) {    return 1;  }  long m;  if (n < 0) {    m=-n;  } else {    m=n;  }  int d=0;  while (m > 0) {    d++;    m>>>=8;  }  return d;}  }
class C{  public static boolean valueIsLocalSymbolTable(IonValue v){  return (v instanceof IonStruct && v.hasTypeAnnotation(ION_SYMBOL_TABLE));}  }
class C{  protected void countPP(){  count++;}  }
class C{  MemberState resetFailureCount(){  failures=0;  return this;}  }
class C{  @Override public void remove(Task task) throws TException {  try {    remove(new TaskPojo(task));  } catch (  ServiceException e) {    throw new TException(e);  }}  }
class C{  private void FlagContourPassings(){  iae=0;  int ntmp2=jee - 1;  for (int j=jss + 1; j <= ntmp2; ++j) {    boolean imb=false;    int iaend=iae;    int ntmp3=iee;    for (int i=iss; i <= ntmp3; ++i) {      if (funcArray[j - 1][i - 1] <= cont)       imb=true; else       if (imb == true) {        ++iae;        pathbufia[iae - 1]=i * 1000 + j;        imb=false;        if (iae == kBufSize * 3) {          if (j > jss + 1) {            iae=iaend;            jee=j;          } else {            jee=Math.min(j + 1,jee);            iee=i;          }          return;        }      }    }  }}  }
class C{  public void printTable(HardcopyWriter w,int colWidth[]){  int[] columnSize=new int[4];  int charPerLine=w.getCharactersPerLine();  int tableLineWidth=0;  int totalColWidth=0;  for (int j=0; j < 4; j++) {    totalColWidth+=colWidth[j];  }  float ratio=((float)charPerLine) / ((float)totalColWidth);  for (int j=0; j < 4; j++) {    columnSize[j]=(int)Math.round(colWidth[j] * ratio - 1.);    tableLineWidth+=(columnSize[j] + 1);  }  w.write(w.getCurrentLineNumber(),0,w.getCurrentLineNumber(),tableLineWidth);  String[] columnStrings=new String[4];  for (int i=0; i < 4; i++) {    columnStrings[i]=this.getColumnName(i);  }  w.setFontStyle(Font.BOLD);  printColumns(w,columnStrings,columnSize);  w.setFontStyle(0);  w.write(w.getCurrentLineNumber(),0,w.getCurrentLineNumber(),tableLineWidth);  String[] spaces=new String[4];  for (int k=0; k < 4; k++) {    spaces[k]="";    for (int i=0; i < columnSize[k]; i++) {      spaces[k]=spaces[k] + " ";    }  }  for (int i=0; i < this.getRowCount(); i++) {    for (int j=0; j < 4; j++) {      if (this.getValueAt(i,j) == null) {        columnStrings[j]=spaces[j];      } else {        columnStrings[j]=(String)this.getValueAt(i,j);      }    }    printColumns(w,columnStrings,columnSize);    w.write(w.getCurrentLineNumber(),0,w.getCurrentLineNumber(),tableLineWidth);  }  w.close();}  }
class C{  protected void assertContains(char expected,char[] array){  for (int i=0; i < array.length; ++i) {    if (array[i] == expected) {      return;    }  }  StringBuilder message=new StringBuilder();  message.append(expected).append(" not in {");  for (int i=0; i < array.length; ++i) {    message.append("'").append(array[i]).append("'");    if (i < (array.length - 1)) {      message.append(", ");    }  }  message.append(" }");  fail(message.toString());}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case SGenPackage.INT_LITERAL__VALUE:    return getValue();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void waitMsec(int milliseconds){  long target=System.currentTimeMillis() + milliseconds;  while (true) {    long stillToGo=target - System.currentTimeMillis();    if (stillToGo <= 0) {      break;    }    try {      Thread.sleep(stillToGo);    } catch (    InterruptedException e) {      Thread.currentThread().interrupt();    }  }}  }
class C{  public void addPreprocessorDirective(String directive){  if (mPreprocessorDirectives == null)   mPreprocessorDirectives=new ArrayList<String>();  mPreprocessorDirectives.add(directive);}  }
class C{  void processXFAFields(final PdfObject acroObj1,final PdfObjectReader currentPdfFile1,final PdfPageData pageData1){  throw new RuntimeException("This code (processXFAFields) should never be called");}  }
class C{  public String fetch(String url) throws IOException {  return fetch(url,null,null);}  }
class C{  public void parseDDLInfo(){  for (  PlogLCRTag tag : rawTags) {switch (tag.id) {case PlogLCRTag.TAG_SQL_TEXT:      this.SQLText=tag.valueString();    break;case PlogLCRTag.TAG_CURRENT_SCHEMA:  this.currentSchema=tag.valueString();break;default :}}}  }
class C{  public PukKernel(double sigma,double omega){  setSigma(sigma);  setOmega(omega);}  }
class C{  @Override public String toString(){  return getDateStringOrEmptyString();}  }
class C{  protected int index(int slice,int row,int column){  return this.offset + sliceOffsets[sliceZero + slice * sliceStride] + rowOffsets[rowZero + row * rowStride]+ columnOffsets[columnZero + column * columnStride];}  }
class C{  public static synchronized final boolean isInitialized(){  return Init.alreadyInitialized;}  }
class C{  public void initialize() throws IOException {  CsvParserSettings parserSettings=new CsvParserSettings();  parserSettings.getFormat().setDelimiter(csvParserVo.getDelimiter().charAt(0));  parserSettings.setLineSeparatorDetectionEnabled(true);  parserSettings.setMaxColumns(csvParserVo.getNumberOfColumns() + 10);  parserSettings.setNullValue("");  parserSettings.setIgnoreLeadingWhitespaces(false);  parserSettings.setIgnoreTrailingWhitespaces(false);  parserSettings.setSkipEmptyLines(false);  parserSettings.getFormat().setQuoteEscape(null == csvParserVo.getEscapeCharacter() ? '\\' : csvParserVo.getEscapeCharacter().charAt(0));  blockCounter++;  initializeReader();  if (csvParserVo.getBlockDetailsList().get(blockCounter).getBlockOffset() == 0) {    parserSettings.setHeaderExtractionEnabled(csvParserVo.isHeaderPresent());  }  parser=new CsvParser(parserSettings);  parser.beginParsing(inputStreamReader);}  }
class C{  public void test_ConstructorIF(){  Hashtable h=new java.util.Hashtable(10,0.5f);  assertEquals("Created incorrect hashtable",0,h.size());  Hashtable empty=new Hashtable(0,0.75f);  assertNull("Empty hashtable access",empty.get("nothing"));  empty.put("something","here");  assertTrue("cannot get element",empty.get("something") == "here");  try {    new Hashtable(-1,0.75f);    fail("IllegalArgumentException expected");  } catch (  IllegalArgumentException e) {  }  try {    new Hashtable(0,-0.75f);    fail("IllegalArgumentException expected");  } catch (  IllegalArgumentException e) {  }}  }
class C{  public void invDctInPlaceNxN(double[][] coeffs){  int u=0;  int v=0;  double two_over_sqrtncolsnrows=2.0 / Math.sqrt((double)this.N * this.M);  for (u=0; u <= this.M - 1; u++) {    invFctNoScale(coeffs[u]);  }  for (v=0; v <= this.N - 1; v++) {    for (u=0; u <= this.M - 1; u++) {      this.nxnTmp[u]=coeffs[u][v];    }    invFctNoScale(this.nxnTmp);    for (u=0; u <= this.M - 1; u++) {      coeffs[u][v]=this.nxnTmp[u] * two_over_sqrtncolsnrows;    }  }}  }
class C{  public void removePathPrefix(final int length){  final char[] a=new char[path.length - length];  System.arraycopy(path,length,a,0,a.length);  path=a;}  }
class C{  @RequestMapping(value="/posts",method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<PostDTO> createPost(@Valid @RequestBody PostDTO postDTO) throws URISyntaxException, JSONException {  log.debug("REST request to save Post : {}",postDTO);  if (postDTO.getId() != null) {    return ResponseEntity.badRequest().header("Failure","A new post cannot already have an ID").body(null);  }  Post result=postService.asyncCreatePost(postDTO,userService.getUserWithAuthorities()).get();  if (result.getId() != null) {    return ResponseEntity.created(new URI("/api/posts/" + result.getId())).headers(HeaderUtil.createAlert("A new post is created with id " + result.getId(),result.getId().toString())).body(postMapper.postToPostDTO(result));  } else {    return ResponseEntity.ok().headers(HeaderUtil.createAlert("The web article will be delivered to you in a moment. Please wait and refresh the page.",null)).body(postMapper.postToPostDTO(result));  }}  }
class C{  public static Pair<Edge,NaviEdge> convertEdge(final INaviEdge edge,final NaviNode sourceNode,final NaviNode targetNode,final Graph2D graph2D,final boolean adjustColors){  final ZyLabelContent content=ZyEdgeBuilder.buildContent(edge);  final ZyEdgeRealizer<NaviEdge> realizer=new ZyEdgeRealizer<NaviEdge>(content,new CEdgeUpdater(edge));  final Edge g2dEdge=graph2D.createEdge(sourceNode.getNode(),targetNode.getNode(),realizer);  if (adjustColors) {    EdgeInitializer.adjustColor(edge);  }  EdgeInitializer.initializeEdgeType(edge,realizer);  graph2D.getRealizer(g2dEdge).setLineColor(edge.getColor());  final NaviEdge zyEdge=new NaviEdge(sourceNode,targetNode,g2dEdge,realizer,edge);  NaviNode.link(sourceNode,targetNode);  final ZyEdgeData<NaviEdge> data=new ZyEdgeData<NaviEdge>(zyEdge);  realizer.setUserData(data);  return new Pair<Edge,NaviEdge>(g2dEdge,zyEdge);}  }
class C{  protected static final String addEscapes(String str){  StringBuffer retval=new StringBuffer();  char ch;  for (int i=0; i < str.length(); i++) {switch (str.charAt(i)) {case 0:      continue;case '\b':    retval.append("\\b");  continue;case '\t':retval.append("\\t");continue;case '\n':retval.append("\\n");continue;case '\f':retval.append("\\f");continue;case '\r':retval.append("\\r");continue;case '\"':retval.append("\\\"");continue;case '\'':retval.append("\\\'");continue;case '\\':retval.append("\\\\");continue;default :if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) {String s="0000" + Integer.toString(ch,16);retval.append("\\u" + s.substring(s.length() - 4,s.length()));} else {retval.append(ch);}continue;}}return retval.toString();}  }
class C{  public boolean isCompleteParse(){  return ast.isCompleteParse();}  }
class C{  @Override public boolean previous() throws SQLException {  try {    debugCodeCall("previous");    checkClosed();    return relative(-1);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  protected void sanityCheck(){  boolean err=false;  Iterator it=edges.keySet().iterator();  while (it.hasNext()) {    PurityNode src=(PurityNode)it.next();    Iterator itt=edges.get(src).iterator();    while (itt.hasNext()) {      PurityEdge e=(PurityEdge)itt.next();      if (!src.equals(e.getSource())) {        G.v().out.println("invalid edge source " + e + ", should be "+ src);        err=true;      }      if (!nodes.contains(e.getSource())) {        G.v().out.println("nodes does not contain edge source " + e);        err=true;      }      if (!nodes.contains(e.getTarget())) {        G.v().out.println("nodes does not contain edge target " + e);        err=true;      }      if (!backEdges.get(e.getTarget()).contains(e)) {        G.v().out.println("backEdges does not contain edge " + e);        err=true;      }      if (!e.isInside() && !e.getTarget().isLoad()) {        G.v().out.println("target of outside edge is not a load node " + e);        err=true;      }    }  }  it=backEdges.keySet().iterator();  while (it.hasNext()) {    PurityNode dst=(PurityNode)it.next();    Iterator itt=backEdges.get(dst).iterator();    while (itt.hasNext()) {      PurityEdge e=(PurityEdge)itt.next();      if (!dst.equals(e.getTarget())) {        G.v().out.println("invalid backEdge dest " + e + ", should be "+ dst);        err=true;      }      if (!edges.get(e.getSource()).contains(e)) {        G.v().out.println("backEdge not in edges " + e);        err=true;      }    }  }  it=nodes.iterator();  while (it.hasNext()) {    PurityNode n=(PurityNode)it.next();    if (n.isParam() && !paramNodes.contains(n)) {      G.v().out.println("paramNode not in paramNodes " + n);      err=true;    }  }  it=paramNodes.iterator();  while (it.hasNext()) {    PurityNode n=(PurityNode)it.next();    if (!n.isParam()) {      G.v().out.println("paramNode contains a non-param node " + n);      err=true;    }    if (!nodes.contains(n)) {      G.v().out.println("paramNode not in nodes " + n);      err=true;    }  }  it=globEscape.iterator();  while (it.hasNext()) {    PurityNode n=(PurityNode)it.next();    if (!nodes.contains(n)) {      G.v().out.println("globEscape not in nodes " + n);      err=true;    }  }  it=locals.keySet().iterator();  while (it.hasNext()) {    Local l=(Local)it.next();    Iterator itt=locals.get(l).iterator();    while (itt.hasNext()) {      PurityNode n=(PurityNode)itt.next();      if (!nodes.contains(n)) {        G.v().out.println("target of local node in nodes " + l + " / "+ n);        err=true;      }      if (!backLocals.get(n).contains(l)) {        G.v().out.println("backLocals does contain local " + l + " / "+ n);        err=true;      }    }  }  it=backLocals.keySet().iterator();  while (it.hasNext()) {    PurityNode n=(PurityNode)it.next();    Iterator itt=backLocals.get(n).iterator();    while (itt.hasNext()) {      Local l=(Local)itt.next();      if (!nodes.contains(n)) {        G.v().out.println("backLocal node not in in nodes " + l + " / "+ n);        err=true;      }      if (!locals.get(l).contains(n)) {        G.v().out.println("locals does contain backLocal " + l + " / "+ n);        err=true;      }    }  }  it=ret.iterator();  while (it.hasNext()) {    PurityNode n=(PurityNode)it.next();    if (!nodes.contains(n)) {      G.v().out.println("target of ret not in nodes " + n);      err=true;    }  }  it=mutated.keySet().iterator();  while (it.hasNext()) {    PurityNode n=(PurityNode)it.next();    if (!nodes.contains(n)) {      G.v().out.println("mutated node not in nodes " + n);      err=true;    }  }  if (err) {    dump();    DotGraph dot=new DotGraph("sanityCheckFailure");    fillDotGraph("chk",dot);    dot.plot("sanityCheckFailure.dot");    throw new Error("PurityGraph sanity check failed!!!");  }}  }
class C{  public static <T,K,L extends List<T>>Consumer<Partition<T,K,L>> evictOldest(){  return null;}  }
class C{  TypePath(byte[] b,int offset){  this.b=b;  this.offset=offset;}  }
class C{  @Override @TransactionAttribute(TransactionAttributeType.NOT_SUPPORTED) public InstanceStatus notifyInstance(String instanceId,ProvisioningSettings settings,Properties properties) throws APPlatformException {  LOGGER.info("notifyInstance({})",LogAndExceptionConverter.getLogText(instanceId,settings));  InstanceStatus status=null;  if (instanceId == null || settings == null || properties == null) {    return status;  }  PropertyHandler propertyHandler=new PropertyHandler(settings);  if ("finish".equals(properties.get("command"))) {    if (FlowState.MANUAL.equals(propertyHandler.getState())) {      propertyHandler.setState(FlowState.FINISHED);      status=setNotificationStatus(settings,propertyHandler);      LOGGER.debug("Got finish event => changing instance status to finished");    } else {      APPlatformException pe=new APPlatformException("Got finish event but instance is in state " + propertyHandler.getState() + " => nothing changed");      throw pe;    }  }  return status;}  }
class C{  public static String generateScaleMarkers(int proteinLength,int maxNumScaleMarkers){  if (maxNumScaleMarkers < 2) {    maxNumScaleMarkers=2;  }  int scale=calcScale(proteinLength,maxNumScaleMarkers);  StringBuilder sb=new StringBuilder("0");  int index=0;  int numRemaining=proteinLength;  while (index <= proteinLength) {    index+=scale;    numRemaining-=scale;    sb.append(",");    if ((numRemaining > 0) && (numRemaining < scale)) {      if (numRemaining < (scale / 2)) {        sb.append(proteinLength);        break;      }    }    if (index >= proteinLength) {      sb.append(proteinLength);    } else {      sb.append(index);    }  }  return sb.toString();}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case EipPackage.COMPOSITE_PROCESSOR__NAME:    setName((String)newValue);  return;case EipPackage.COMPOSITE_PROCESSOR__TO_CHANNELS:getToChannels().clear();getToChannels().addAll((Collection<? extends Channel>)newValue);return;case EipPackage.COMPOSITE_PROCESSOR__FROM_CHANNELS:getFromChannels().clear();getFromChannels().addAll((Collection<? extends Channel>)newValue);return;case EipPackage.COMPOSITE_PROCESSOR__OWNED_ENDPOINTS:getOwnedEndpoints().clear();getOwnedEndpoints().addAll((Collection<? extends Endpoint>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public MessageOnlyLogFilter(LogNode next){  mNext=next;}  }
class C{  public static boolean isCombatMove(final GameData data,final boolean doNotThrowErrorIfNotMoveDelegate){  final boolean isCombatMove;  data.acquireReadLock();  try {    final String prop=data.getSequence().getStep().getProperties().getProperty(GameStep.PROPERTY_combatMove);    if (prop != null) {      isCombatMove=Boolean.parseBoolean(prop);    } else     if (isCombatDelegate(data)) {      isCombatMove=true;    } else     if (isNonCombatDelegate(data)) {      isCombatMove=false;    } else     if (doNotThrowErrorIfNotMoveDelegate) {      isCombatMove=false;    } else {      throw new IllegalStateException("Cannot determine combat or not: " + data.getSequence().getStep().getName());    }  }  finally {    data.releaseReadLock();  }  return isCombatMove;}  }
class C{  public Set<E> elements(){synchronized (this) {    return new HashSet<E>(reverseIndex.keySet());  }}  }
class C{  private void testIncrementalBackupScriptForWindows(BackupInspector inspector) throws Exception {  assertEquals(WINDOWS_COPY_FROM_1,inspector.getCopyFromForOplogFile(OPLOG_FILENAME_1));  assertEquals(WINDOWS_COPY_TO_1,inspector.getCopyToForOplogFile(OPLOG_FILENAME_1));  assertEquals(WINDOWS_COPY_FROM_2,inspector.getCopyFromForOplogFile(OPLOG_FILENAME_2));  assertEquals(WINDOWS_COPY_TO_2,inspector.getCopyToForOplogFile(OPLOG_FILENAME_2));  assertEquals(WINDOWS_COPY_FROM_3,inspector.getCopyFromForOplogFile(OPLOG_FILENAME_3));  assertEquals(WINDOWS_COPY_TO_3,inspector.getCopyToForOplogFile(OPLOG_FILENAME_3));}  }
class C{  private boolean isBigCounterpart(HTMLFont font){  if (size <= font.getSize()) {    return false;  }  return (isSameFamily(font) && (style == font.getStyle()));}  }
class C{  @Override public <R>S3ManifestComparator<R> withKey(String key){  return new S3ManifestComparator<>(key,reader,writer,deleter,stringWriter);}  }
class C{  public static Bitmap drawableToBitmap(Drawable drawable){  if (drawable instanceof BitmapDrawable)   ((BitmapDrawable)drawable).getBitmap();  int width=drawable.getIntrinsicWidth();  int height=drawable.getIntrinsicHeight();  Bitmap bitmap=createBitmapSafely(width,height,Bitmap.Config.ARGB_8888,1);  Canvas canvas=new Canvas(bitmap);  drawable.setBounds(0,0,width,height);  drawable.draw(canvas);  return bitmap;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:44.376 -0500",hash_original_method="178203A8041021E6C223472E0296E87B",hash_generated_method="4D7543BCA72C4F27D433358AB6CBC87A") static public void assertEquals(Object expected,Object actual){  assertEquals(null,expected,actual);}  }
class C{  public void visitAttribute(Attribute attr){  if (fv != null) {    fv.visitAttribute(attr);  }}  }
class C{  public static <K,V>ImmutableListMultimap<K,V> of(K k1,V v1,K k2,V v2){  ImmutableListMultimap.Builder<K,V> builder=ImmutableListMultimap.builder();  builder.put(k1,v1);  builder.put(k2,v2);  return builder.build();}  }
class C{  public static Input composite(List<File> files){  if (files.size() == 0)   return NullInput.INSTANCE;  if (files.size() == 1)   return new FileInput(files.get(0));  return new CompositeInput(multiple(files));}  }
class C{  public double evaluate(){  if (!variables.isEmpty()) {    throw new RuntimeException("variables " + variables + " are not set");  }  Expression exp2=new Expression(exp);  return exp2.evaluate();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case SGenPackage.GENERATOR_CONFIGURATION__CONFIGURATIONS:    return getConfigurations();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static byte[] encryptWithSession(Encrypter crypter,byte[] plaintext) throws KeyczarException {  SessionCrypter session=new SessionCrypter(crypter);  byte[] rawEncrypted=session.encrypt(plaintext);  byte[][] input={session.getSessionMaterial(),rawEncrypted};  return org.keyczar.util.Util.lenPrefixPack(input);}  }
class C{  public static void assertFalse(boolean value){  if (verbose) {    log("assertFalse(" + value + ")");  }  assertBool(!value);}  }
class C{  private static void convertActivityToTranslucentAfterL(Activity activity){  try {    Method getActivityOptions=Activity.class.getDeclaredMethod("getActivityOptions");    getActivityOptions.setAccessible(true);    Object options=getActivityOptions.invoke(activity);    Class<?>[] classes=Activity.class.getDeclaredClasses();    Class<?> translucentConversionListenerClazz=null;    for (    Class clazz : classes) {      if (clazz.getSimpleName().contains("TranslucentConversionListener")) {        translucentConversionListenerClazz=clazz;      }    }    Method convertToTranslucent=Activity.class.getDeclaredMethod("convertToTranslucent",translucentConversionListenerClazz,ActivityOptions.class);    convertToTranslucent.setAccessible(true);    convertToTranslucent.invoke(activity,null,options);  } catch (  Throwable t) {  }}  }
class C{  public static void print(byte x){  out.print(x);  out.flush();}  }
class C{  protected KMLAbstractLatLonBoxType(String namespaceURI){  super(namespaceURI);}  }
class C{  public void componentMoved(ComponentEvent e){}  }
class C{  private Path toSecondary(Path path){  assert factory != null;  assert secondaryUri != null;  return convertPath(path,secondaryUri);}  }
class C{  public Individual(double[] weights){  this.weights=weights;}  }
class C{  public void download2ExecuteLogic(ActionMapping mappings,ActionForm form,HttpServletRequest request,HttpServletResponse response){  DocumentoVitalPO documentoVital=(DocumentoVitalPO)getFromTemporalSession(request,DocumentosVitalesConstants.DOCUMENTO_VITAL_KEY);  if (documentoVital != null) {    try {      download(response,documentoVital.getNombreCompletoFichero(),documentoVital.getContenido());    } catch (    Exception e) {      obtenerErrores(request,true).add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.GLOBAL_ARCHIGEST_EXCEPTION,e.toString()));      goLastClientExecuteLogic(mappings,form,request,response);    }  } else {    obtenerErrores(request,true).add(ActionErrors.GLOBAL_MESSAGE,new ActionError(DocumentosVitalesConstants.ERRORS_DOCVITALES_DOC_NO_ENCONTRADO));    goLastClientExecuteLogic(mappings,form,request,response);  }}  }
class C{  @Override public void toBytes(ByteBuf buf){  buf.writeInt(itemStacks.length);  for (  ItemStack itemStack : itemStacks) {    ByteBufUtils.writeItemStack(buf,itemStack);  }}  }
class C{  public final void update(String rosterGroup,String roadName,String roadNumber,String dccAddress,String mfg,String decoderMfgID,String decoderVersionID,String id){  Object selection=this.getSelectedItem();  if (log.isDebugEnabled()) {    log.debug("Old selection: " + selection);    log.debug("Old group: " + _group);  }  ActionListener[] ALs=this.getActionListeners();  for (  ActionListener al : ALs) {    this.removeActionListener(al);  }  this.setSelectedItem(null);  List<RosterEntry> l=_roster.matchingList(roadName,roadNumber,dccAddress,mfg,decoderMfgID,decoderVersionID,id);  _group=rosterGroup;  _roadName=roadName;  _roadNumber=roadNumber;  _dccAddress=dccAddress;  _mfg=mfg;  _decoderMfgID=decoderMfgID;  _decoderVersionID=decoderVersionID;  _id=id;  removeAllItems();  if (_nonSelectedItem != null) {    insertItemAt(_nonSelectedItem,0);    setSelectedItem(_nonSelectedItem);  }  for (  RosterEntry r : l) {    if (rosterGroup != null && !rosterGroup.equals(Roster.ALLENTRIES)) {      if (r.getAttribute(Roster.getRosterGroupProperty(rosterGroup)) != null && r.getAttribute(Roster.getRosterGroupProperty(rosterGroup)).equals("yes")) {        addItem(r);      }    } else {      addItem(r);    }    if (r.equals(selection)) {      this.setSelectedItem(r);    }  }  if (log.isDebugEnabled()) {    log.debug("New selection: " + this.getSelectedItem());    log.debug("New group: " + _group);  }  for (  ActionListener al : ALs) {    this.addActionListener(al);  }  if (this.getSelectedItem() != selection) {    this.fireActionEvent();    this.fireSelectedRosterEntriesPropertyChange();  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private String convert() throws IOException {  int i=r.read();  if (i != '{') {    throw new IOException("Invalid RTF file");  }  while ((i=r.read()) != -1) {    char ch=(char)i;switch (ch) {case '{':      if (inControlWord && controlWord.length() == 0) {        sb.append('{');        controlWord.setLength(0);        inControlWord=false;      } else {        blockCount++;      }    break;case '}':  if (inControlWord && controlWord.length() == 0) {    sb.append('}');    controlWord.setLength(0);    inControlWord=false;  } else {    blockCount--;  }break;case '\\':if (blockCount == 0) {if (inControlWord) {  if (controlWord.length() == 0) {    sb.append('\\');    controlWord.setLength(0);    inControlWord=false;  } else {    endControlWord();  }}inControlWord=true;}break;case ' ':if (blockCount == 0) {if (inControlWord) {endControlWord();} else {sb.append(' ');}}break;case '\r':case '\n':if (blockCount == 0) {if (inControlWord) {endControlWord();}}break;default :if (blockCount == 0) {if (inControlWord) {controlWord.append(ch);} else {sb.append(ch);}}break;}}return sb.toString();}  }
class C{  public void incCqCount(){  this._stats.incInt(_cqCountId,1);}  }
class C{  public void deleteInstanceAt(int rowIndex){  ((DataTableModel)getModel()).deleteInstanceAt(mIndices[rowIndex]);}  }
class C{  public final int numClasses(){  if (m_ClassIndex < 0) {    throw new UnassignedClassException("Class index is negative (not set)!");  }  if (!classAttribute().isNominal()) {    return 1;  } else {    return classAttribute().numValues();  }}  }
class C{  public boolean isBackground(){  return false;}  }
class C{  public void paintSplitPaneDividerBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintSplitPaneDividerBackground(context,g,x,y,w,h);}  }
class C{  private void mergeSOSNode(Node node) throws IIOInvalidTreeException {  SOSMarkerSegment firstSOS=(SOSMarkerSegment)findMarkerSegment(SOSMarkerSegment.class,true);  SOSMarkerSegment lastSOS=(SOSMarkerSegment)findMarkerSegment(SOSMarkerSegment.class,false);  if (firstSOS != null) {    if (firstSOS != lastSOS) {      throw new IIOInvalidTreeException("Can't merge SOS node into a tree with > 1 SOS node",node);    }    firstSOS.updateFromNativeNode(node,false);  } else {    markerSequence.add(new SOSMarkerSegment(node));  }}  }
class C{  protected static void appendFile(IgfsImpl igfs,IgfsPath file,@Nullable byte[]... chunks) throws Exception {  IgfsOutputStream os=null;  try {    os=igfs.append(file,false);    writeFileChunks(os,chunks);  }  finally {    U.closeQuiet(os);    awaitFileClose(igfs,file);  }}  }
class C{  @Override public void mouseEntered(MouseEvent evt){  delegate.mouseMoved(evt);}  }
class C{  public Open(String itemType,int itemId){  super();  final ObjectNode item=objectMapper.createObjectNode();switch (itemType) {case TYPE_PLAYLIST:    item.put("playlistid",itemId);  break;case TYPE_CHANNEL:item.put("channelid",itemId);break;case TYPE_RECORDING:item.put("recordingid",itemId);break;}addParameterToRequest("item",item);}  }
class C{  public TupleSerializer(final IKeyBuilderFactory keyBuilderFactory){  super(keyBuilderFactory);}  }
class C{  public void createWeekScenarioParAndUserAssignChange2() throws Exception {  BillingIntegrationTestBase.setDateFactoryInstance("2013-02-01 00:00:00");  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"PARCHARGE_PU_WEEK_ASSIGN2",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PERUNIT_WEEK_ROLES_PARS,technicalService,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),1);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(basicSetup.getCustomerAdminKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("PARCHARGE_PU_WEEK_ASSIGN2",serviceDetails,basicSetup.getCustomerUser1(),role);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-02-04 00:00:00"));  subDetails=subscrSetup.modifyUserRole(subDetails.getUsageLicenses().get(0),VOServiceFactory.getRole(serviceDetails,"USER"),subDetails.getSubscriptionId());  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-02-04 00:00:00"),"MAX_FOLDER_NUMBER","2");  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-02-10 00:00:00"));  subDetails=subscrSetup.revokeUser(basicSetup.getCustomerUser1(),subDetails.getSubscriptionId());  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-02-11 00:00:00"),"MAX_FOLDER_NUMBER","7");  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-02-19 18:00:00"),"MAX_FOLDER_NUMBER","10");  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-02-21 12:00:00"));  subDetails=subscrSetup.addUser(basicSetup.getCustomerUser1(),VOServiceFactory.getRole(serviceDetails,"GUEST"),subDetails.getSubscriptionId());  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-02-23 06:00:00"),"MAX_FOLDER_NUMBER","13");  BillingIntegrationTestBase.setDateFactoryInstance("2013-03-01 00:00:00");  subscrSetup.unsubscribeToService(subDetails.getSubscriptionId());  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("PARCHARGE_PU_WEEK_ASSIGN2",subDetails);}  }
class C{  public void writeExif(String jpegFileName,String exifOutFileName) throws FileNotFoundException, IOException {  if (jpegFileName == null || exifOutFileName == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  InputStream is=null;  try {    is=new FileInputStream(jpegFileName);    writeExif(is,exifOutFileName);  } catch (  IOException e) {    closeSilently(is);    throw e;  }  is.close();}  }
class C{  @Override public T defaultCase(EObject object){  return null;}  }
class C{  public void closeContacts(EvolutionState state,int result){  if (result == EvolutionState.R_SUCCESS) {    try {      toServer.writeUTF(FOUND);      toServer.flush();    } catch (    IOException e) {    }  }  try {    serverSocket.close();  } catch (  IOException e) {  }  state.output.message("Shutting down the mailbox");  mailbox.shutDown();  mailboxThread.interrupt();  try {    mailboxThread.join();  } catch (  InterruptedException e) {  }  state.output.message("Mailbox shut down");  for (int x=0; x < number_of_destination_islands; x++) {    try {      if (running[x])       outSockets[x].close();    } catch (    IOException e) {    }  }  if (iAmServer) {    state.output.message("Shutting down the server");    try {      serverThread.join();    } catch (    InterruptedException e) {    }    state.output.message("Server shut down");  }}  }
class C{  protected NumericLiteral(byte number){  this(number,XMLSchema.BYTE);}  }
class C{  public Quaternionf rotateTo(float fromDirX,float fromDirY,float fromDirZ,float toDirX,float toDirY,float toDirZ){  return rotateTo(fromDirX,fromDirY,fromDirZ,toDirX,toDirY,toDirZ,this);}  }
class C{  public static void main(String[] args) throws Exception {  for (int i=0; i < RETRIES; i++) {    X.println(">>>");    X.println(">>> Executing single threaded attempt: " + i);    X.println(">>>");    testBlockingQueue("single-threaded-linked-queue",new LinkedBlockingQueue<>());    testBlockingQueue("single-threaded-linked-deque",new LinkedBlockingDeque<>());    testBlockingQueue("single-threaded-array-queue",new ArrayBlockingQueue<>(CNT + 10));  }  for (int i=0; i < RETRIES; i++) {    X.println(">>>");    X.println(">>> Executing multi-threaded attempt: " + i);    X.println(">>>");    testBlockingQueueMultithreaded("multi-threaded-linked-queue",new LinkedBlockingQueue<>());    testBlockingQueueMultithreaded("multi-threaded-linked-deque",new LinkedBlockingDeque<>());    testBlockingQueueMultithreaded("multi-threaded-array-queue",new ArrayBlockingQueue<>(THREAD_CNT * CNT + 100));  }}  }
class C{  public void extractAndCreateClientNonPerson(Client client,JsonCommand command){  final JsonElement clientNonPersonElement=this.fromApiJsonHelper.parse(command.jsonFragment(ClientApiConstants.clientNonPersonDetailsParamName));  if (clientNonPersonElement != null) {    final String incorpNumber=this.fromApiJsonHelper.extractStringNamed(ClientApiConstants.incorpNumberParamName,clientNonPersonElement);    final String remarks=this.fromApiJsonHelper.extractStringNamed(ClientApiConstants.remarksParamName,clientNonPersonElement);    final LocalDate incorpValidityTill=this.fromApiJsonHelper.extractLocalDateNamed(ClientApiConstants.incorpValidityTillParamName,clientNonPersonElement);    CodeValue clientNonPersonConstitution=null;    final Long clientNonPersonConstitutionId=this.fromApiJsonHelper.extractLongNamed(ClientApiConstants.constitutionIdParamName,clientNonPersonElement);    if (clientNonPersonConstitutionId != null) {      clientNonPersonConstitution=this.codeValueRepository.findOneByCodeNameAndIdWithNotFoundDetection(ClientApiConstants.CLIENT_NON_PERSON_CONSTITUTION,clientNonPersonConstitutionId);    }    CodeValue clientNonPersonMainBusinessLine=null;    final Long clientNonPersonMainBusinessLineId=this.fromApiJsonHelper.extractLongNamed(ClientApiConstants.mainBusinessLineIdParamName,clientNonPersonElement);    if (clientNonPersonMainBusinessLineId != null) {      clientNonPersonMainBusinessLine=this.codeValueRepository.findOneByCodeNameAndIdWithNotFoundDetection(ClientApiConstants.CLIENT_NON_PERSON_MAIN_BUSINESS_LINE,clientNonPersonMainBusinessLineId);    }    final ClientNonPerson newClientNonPerson=ClientNonPerson.createNew(client,clientNonPersonConstitution,clientNonPersonMainBusinessLine,incorpNumber,incorpValidityTill,remarks);    this.clientNonPersonRepository.save(newClientNonPerson);  }}  }
class C{  public void releaseInputStream() throws IOException {  try {    if (in != null) {      try {        in.done();      } catch (      RuntimeException e) {      }      in.registerRefs();      in.done(conn);    }    conn.releaseInputStream();  }  finally {    in=null;  }}  }
class C{  @Override public boolean process(Set<? extends TypeElement> annotations,RoundEnvironment roundEnv){  boolean firstRound=false;  for (  Element e : roundEnv.getRootElements()) {    if (e.getSimpleName().contentEquals(TestClientCodeWrapper.class.getSimpleName()))     firstRound=true;  }  if (firstRound) {    try {      FileObject f1=filer.getResource(StandardLocation.CLASS_PATH,"",TestClientCodeWrapper.class.getName() + ".java");      f1.openInputStream().close();      f1.openReader(false).close();      FileObject f2=filer.createResource(StandardLocation.CLASS_OUTPUT,"","f2.txt",(Element[])null);      f2.openOutputStream().close();      FileObject f3=filer.createResource(StandardLocation.CLASS_OUTPUT,"","f3.txt",(Element[])null);      f3.openWriter().close();      JavaFileObject f4=filer.createSourceFile("f4",(Element[])null);      f4.openWriter().close();      f4.getNestingKind();      f4.getAccessLevel();      messager.printMessage(Diagnostic.Kind.NOTE,"informational note",roundEnv.getRootElements().iterator().next());    } catch (    IOException e) {      throw new UserError(e);    }  }  return true;}  }
class C{  public LayerDeclaration using(String layerName){  this.using.add(layerName);  return this;}  }
class C{  public boolean isCodeAttribute(){  return false;}  }
class C{  static ZoneOffset readOffset(DataInput in) throws IOException {  int offsetByte=in.readByte();  return (offsetByte == 127 ? ZoneOffset.ofTotalSeconds(in.readInt()) : ZoneOffset.ofTotalSeconds(offsetByte * 900));}  }
class C{  @Util private static void removeRequestCookie(String name){  request.cookies.remove(name);}  }
class C{  public static Location copyPosition(Location source,Location dest){  if (dest == null) {    return null;  }  dest.setX(source.getX());  dest.setY(source.getY());  dest.setZ(source.getZ());  return dest;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:00.031 -0500",hash_original_method="93CFAAB8556EE96135ADFFE4D2689C29",hash_generated_method="E6F0C5AC03E54EF67D95CA417E603EAC") public void init(float density){  assert density > 0;  mDisplayDensity=density;  setDefaultZoomScale(density);  mActualScale=density;  mInvActualScale=1 / density;  mTextWrapScale=getReadingLevelScale();}  }
class C{  public long optLong(String key,long defaultValue){  try {    return this.getLong(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public PreviousContext configureLoggingContext(String contextName){  return LoggingContext.forConnector("MySQL",serverName(),contextName);}  }
class C{  public static final long classId(byte[] key,GeoTimeSerie gts){  return classId(key,gts.getName());}  }
class C{  public CipherParameters decrypt(byte[] in,int inOff,int inLen,int keyLen) throws IllegalArgumentException {  if (!key.isPrivate()) {    throw new IllegalArgumentException("Private key required for decryption");  }  BigInteger n=key.getModulus();  BigInteger d=key.getExponent();  byte[] C=new byte[inLen];  System.arraycopy(in,inOff,C,0,C.length);  BigInteger c=new BigInteger(1,C);  BigInteger r=c.modPow(d,n);  return generateKey(n,r,keyLen);}  }
class C{  public void threadFail(String reason){  threadFailed=true;  fail(reason);}  }
class C{  public static Entry<? extends Transaction> findByType(final Integer type){  for (  final Entry<?> entry : ENTRIES) {    if (entry.type == type) {      return entry;    }  }  throw new IllegalArgumentException(String.format("%d type is unknown",type));}  }
class C{  public UnsupportedAudioFileException(String message){  super(message);}  }
class C{  public static String parseFunction(String functionCall) throws FBSQLParseException {  functionCall=functionCall.trim();  checkSyntax(functionCall);  int parenthesisStart=functionCall.indexOf('(');  return parenthesisStart != -1 ? functionCall.substring(0,parenthesisStart) : functionCall;}  }
class C{  public void clearNotTaken(){  flags2&=~NOT_TAKEN;}  }
class C{  public void write(AnnotationsWriter writer) throws IOException {  writer.constValueIndex(getValue());}  }
class C{  public void addChainDownloadStartedEventListener(Executor executor,ChainDownloadStartedEventListener listener){  peersChainDownloadStartedEventListeners.add(new ListenerRegistration<ChainDownloadStartedEventListener>(checkNotNull(listener),executor));  for (  Peer peer : getConnectedPeers())   peer.addChainDownloadStartedEventListener(executor,listener);  for (  Peer peer : getPendingPeers())   peer.addChainDownloadStartedEventListener(executor,listener);}  }
class C{  public static List<String> undoLocalFiles(final ServerContext context,final List<String> files){  final UndoCommand command=new UndoCommand(context,files);  return command.runSynchronously();}  }
class C{  public BufferedImage createCompatibleDestImage(BufferedImage src,ColorModel destCM){  BufferedImage image;  if (destCM == null) {    ColorModel cm=src.getColorModel();    image=new BufferedImage(cm,src.getRaster().createCompatibleWritableRaster(),cm.isAlphaPremultiplied(),null);  } else {    int w=src.getWidth();    int h=src.getHeight();    image=new BufferedImage(destCM,destCM.createCompatibleWritableRaster(w,h),destCM.isAlphaPremultiplied(),null);  }  return image;}  }
class C{  public static void main(String[] args){  TestTaglets tester=new TestTaglets();  run(tester,ARGS_4654308,TEST_4654308,NEGATED_TEST_4654308);  tester.printSummary();  tester=new TestTaglets();  run(tester,ARGS_4767038,TEST_4767038,NEGATED_TEST_4767038);  tester.printSummary();}  }
class C{  public boolean isDrawCirclesEnabled(){  return mDrawCircles;}  }
class C{  public static void copyURLToFile(URL source,File destination,int connectionTimeout,int readTimeout) throws IOException {  URLConnection connection=source.openConnection();  connection.setConnectTimeout(connectionTimeout);  connection.setReadTimeout(readTimeout);  InputStream input=connection.getInputStream();  copyInputStreamToFile(input,destination);}  }
class C{  private static Pair<Action,Action> addForkJoin(DirectedAcyclicGraph<Action,DefaultEdge> parentGraph){  Action fork=new Action();  fork.setName("fork-" + forkCount);  fork.setType("fork");  Action join=new Action();  join.setName("join-" + forkCount);  join.setType("join");  forkCount++;  parentGraph.addVertex(fork);  parentGraph.addVertex(join);  return Pair.of(fork,join);}  }
class C{  protected int hprs(int N,int M,int n,RandomEngine randomGenerator){  int Dk, X, V;  double Mp, np, p, nu, U, Y, W;  if (N != N_last || M != M_last || n != n_last) {    N_last=N;    M_last=M;    n_last=n;    Mp=(double)(M + 1);    np=(double)(n + 1);    N_Mn=N - M - n;    p=Mp / (N + 2.0);    nu=np * p;    U=Math.sqrt(nu * (1.0 - p) * (1.0 - (n + 2.0) / (N + 3.0)) + 0.25);    m=(int)nu;    k2=(int)Math.ceil(nu - 0.5 - U);    if (k2 >= m)     k2=m - 1;    k4=(int)(nu - 0.5 + U);    k1=k2 + k2 - m + 1;    k5=k4 + k4 - m;    dl=(double)(k2 - k1);    dr=(double)(k5 - k4);    r1=(np / (double)k1 - 1.0) * (Mp - k1) / (double)(N_Mn + k1);    r2=(np / (double)k2 - 1.0) * (Mp - k2) / (double)(N_Mn + k2);    r4=(np / (double)(k4 + 1) - 1.0) * (M - k4) / (double)(N_Mn + k4 + 1);    r5=(np / (double)(k5 + 1) - 1.0) * (M - k5) / (double)(N_Mn + k5 + 1);    ll=Math.log(r1);    lr=-Math.log(r5);    c_pm=fc_lnpk(m,N_Mn,M,n);    f2=Math.exp(c_pm - fc_lnpk(k2,N_Mn,M,n));    f4=Math.exp(c_pm - fc_lnpk(k4,N_Mn,M,n));    f1=Math.exp(c_pm - fc_lnpk(k1,N_Mn,M,n));    f5=Math.exp(c_pm - fc_lnpk(k5,N_Mn,M,n));    p1=f2 * (dl + 1.0);    p2=f2 * dl + p1;    p3=f4 * (dr + 1.0) + p2;    p4=f4 * dr + p3;    p5=f1 / ll + p4;    p6=f5 / lr + p5;  }  for (; ; ) {    if ((U=randomGenerator.raw() * p6) < p2) {      if ((W=U - p1) < 0.0)       return (k2 + (int)(U / f2));      if ((Y=W / dl) < f1)       return (k1 + (int)(W / f1));      Dk=(int)(dl * randomGenerator.raw()) + 1;      if (Y <= f2 - Dk * (f2 - f2 / r2)) {        return (k2 - Dk);      }      if ((W=f2 + f2 - Y) < 1.0) {        V=k2 + Dk;        if (W <= f2 + Dk * (1.0 - f2) / (dl + 1.0)) {          return (V);        }        if (Math.log(W) <= c_pm - fc_lnpk(V,N_Mn,M,n)) {          return (V);        }      }      X=k2 - Dk;    } else     if (U < p4) {      if ((W=U - p3) < 0.0)       return (k4 - (int)((U - p2) / f4));      if ((Y=W / dr) < f5)       return (k5 - (int)(W / f5));      Dk=(int)(dr * randomGenerator.raw()) + 1;      if (Y <= f4 - Dk * (f4 - f4 * r4)) {        return (k4 + Dk);      }      if ((W=f4 + f4 - Y) < 1.0) {        V=k4 - Dk;        if (W <= f4 + Dk * (1.0 - f4) / dr) {          return (V);        }        if (Math.log(W) <= c_pm - fc_lnpk(V,N_Mn,M,n)) {          return (V);        }      }      X=k4 + Dk;    } else {      Y=randomGenerator.raw();      if (U < p5) {        Dk=(int)(1.0 - Math.log(Y) / ll);        if ((X=k1 - Dk) < 0)         continue;        Y*=(U - p4) * ll;        if (Y <= f1 - Dk * (f1 - f1 / r1)) {          return (X);        }      } else {        Dk=(int)(1.0 - Math.log(Y) / lr);        if ((X=k5 + Dk) > n)         continue;        Y*=(U - p5) * lr;        if (Y <= f5 - Dk * (f5 - f5 * r5)) {          return (X);        }      }    }    if (Math.log(Y) <= c_pm - fc_lnpk(X,N_Mn,M,n))     return (X);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  stack.getUIMgrSafe().getVideoFrame().playPause();  return null;}  }
class C{  protected int engineGetBlockSize(){  return DESConstants.DES_BLOCK_SIZE;}  }
class C{  public AVT(StylesheetHandler handler,String uri,String name,String rawName,String stringedValue,ElemTemplateElement owner) throws javax.xml.transform.TransformerException {  m_uri=uri;  m_name=name;  m_rawName=rawName;  StringTokenizer tokenizer=new StringTokenizer(stringedValue,"{}\"\'",true);  int nTokens=tokenizer.countTokens();  if (nTokens < 2) {    m_simpleString=stringedValue;  } else {    FastStringBuffer buffer=null;    FastStringBuffer exprBuffer=null;    if (USE_OBJECT_POOL) {      buffer=StringBufferPool.get();      exprBuffer=StringBufferPool.get();    } else {      buffer=new FastStringBuffer(6);      exprBuffer=new FastStringBuffer(6);    }    try {      m_parts=new Vector(nTokens + 1);      String t=null;      String lookahead=null;      String error=null;      while (tokenizer.hasMoreTokens()) {        if (lookahead != null) {          t=lookahead;          lookahead=null;        } else         t=tokenizer.nextToken();        if (t.length() == 1) {switch (t.charAt(0)) {case ('\"'):case ('\''):{              buffer.append(t);              break;            }case ('{'):{            try {              lookahead=tokenizer.nextToken();              if (lookahead.equals("{")) {                buffer.append(lookahead);                lookahead=null;                break;              } else {                if (buffer.length() > 0) {                  m_parts.addElement(new AVTPartSimple(buffer.toString()));                  buffer.setLength(0);                }                exprBuffer.setLength(0);                while (null != lookahead) {                  if (lookahead.length() == 1) {switch (lookahead.charAt(0)) {case '\'':case '\"':{                        exprBuffer.append(lookahead);                        String quote=lookahead;                        lookahead=tokenizer.nextToken();                        while (!lookahead.equals(quote)) {                          exprBuffer.append(lookahead);                          lookahead=tokenizer.nextToken();                        }                        exprBuffer.append(lookahead);                        lookahead=tokenizer.nextToken();                        break;                      }case '{':{                      error=XSLMessages.createMessage(XSLTErrorResources.ER_NO_CURLYBRACE,null);                      lookahead=null;                      break;                    }case '}':{                    buffer.setLength(0);                    XPath xpath=handler.createXPath(exprBuffer.toString(),owner);                    m_parts.addElement(new AVTPartXPath(xpath));                    lookahead=null;                    break;                  }default :{                  exprBuffer.append(lookahead);                  lookahead=tokenizer.nextToken();                }            }          } else {            exprBuffer.append(lookahead);            lookahead=tokenizer.nextToken();          }        }        if (error != null) {          break;        }      }      break;    } catch (    java.util.NoSuchElementException ex) {      error=XSLMessages.createMessage(XSLTErrorResources.ER_ILLEGAL_ATTRIBUTE_VALUE,new Object[]{name,stringedValue});      break;    }  }case ('}'):{  lookahead=tokenizer.nextToken();  if (lookahead.equals("}")) {    buffer.append(lookahead);    lookahead=null;  } else {    try {      handler.warn(XSLTErrorResources.WG_FOUND_CURLYBRACE,null);    } catch (    org.xml.sax.SAXException se) {      throw new TransformerException(se);    }    buffer.append("}");  }  break;}default :{buffer.append(t);}}} else {buffer.append(t);}if (null != error) {try {handler.warn(XSLTErrorResources.WG_ATTR_TEMPLATE,new Object[]{error});} catch (org.xml.sax.SAXException se) {throw new TransformerException(se);}break;}}if (buffer.length() > 0) {m_parts.addElement(new AVTPartSimple(buffer.toString()));buffer.setLength(0);}}  finally {if (USE_OBJECT_POOL) {StringBufferPool.free(buffer);StringBufferPool.free(exprBuffer);} else {buffer=null;exprBuffer=null;};}}if (null == m_parts && (null == m_simpleString)) {m_simpleString="";}}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:41.586 -0500",hash_original_method="00DF77F4EAECB68BC1742A03B5A51C8E",hash_generated_method="447CCF55C0CC97BFF2C53A213E0DA55F") @Override public String toString(){  StringBuilder result=new StringBuilder();  result.append("Token[");switch (ttype) {case TT_EOF:    result.append("EOF");  break;case TT_EOL:result.append("EOL");break;case TT_NUMBER:result.append("n=");result.append(nval);break;case TT_WORD:result.append(sval);break;default :if (ttype == TT_UNKNOWN || tokenTypes[ttype] == TOKEN_QUOTE) {result.append(sval);} else {result.append('\'');result.append((char)ttype);result.append('\'');}}result.append("], line ");result.append(lineNumber);return result.toString();}  }
class C{  private String createString(String f){  StringBuilder sb=new StringBuilder();  sb.append("format=" + CUresourceViewFormat.stringFor(format) + f);  sb.append("width=" + width + f);  sb.append("height=" + height + f);  sb.append("depth=" + depth + f);  sb.append("firstMipmapLevel=" + firstMipmapLevel + f);  sb.append("lastMipmapLevel=" + lastMipmapLevel + f);  sb.append("firstLayer=" + firstLayer + f);  sb.append("lastLayer=" + lastLayer + f);  return sb.toString();}  }
class C{  public static ExternalBuilding findByAbbv(Long sessionId,String bldgAbbr){  ExternalBuildingDAO bldgDAO=new ExternalBuildingDAO();  List bldgs=bldgDAO.getSession().createCriteria(ExternalBuilding.class).add(Restrictions.eq("session.uniqueId",sessionId)).add(Restrictions.eq("abbreviation",bldgAbbr)).list();  if (bldgs == null || bldgs.size() == 0)   return null;  return (ExternalBuilding)bldgs.get(0);}  }
class C{  private long[] determinePreferenceVectorByApriori(Relation<V> relation,ModifiableDBIDs[] neighborIDs,StringBuilder msg){  int dimensionality=neighborIDs.length;  UpdatableDatabase apriori_db=new HashmapDatabase();  SimpleTypeInformation<?> bitmeta=VectorFieldTypeInformation.typeRequest(BitVector.class,dimensionality,dimensionality);  for (DBIDIter it=relation.iterDBIDs(); it.valid(); it.advance()) {    long[] bits=BitsUtil.zero(dimensionality);    boolean allFalse=true;    for (int d=0; d < dimensionality; d++) {      if (neighborIDs[d].contains(it)) {        BitsUtil.setI(bits,d);        allFalse=false;      }    }    if (!allFalse) {      SingleObjectBundle oaa=new SingleObjectBundle();      oaa.append(bitmeta,new BitVector(bits,dimensionality));      apriori_db.insert(oaa);    }  }  APRIORI apriori=new APRIORI(minpts);  FrequentItemsetsResult aprioriResult=apriori.run(apriori_db);  List<Itemset> frequentItemsets=aprioriResult.getItemsets();  if (LOG.isDebugging()) {    msg.append("\n Frequent itemsets: ").append(frequentItemsets);  }  int maxSupport=0;  int maxCardinality=0;  long[] preferenceVector=BitsUtil.zero(dimensionality);  for (  Itemset itemset : frequentItemsets) {    if ((maxCardinality < itemset.length()) || (maxCardinality == itemset.length() && maxSupport == itemset.getSupport())) {      preferenceVector=itemset.getItems();      maxCardinality=itemset.length();      maxSupport=itemset.getSupport();    }  }  if (LOG.isDebugging()) {    msg.append("\n preference ");    msg.append(BitsUtil.toStringLow(preferenceVector,dimensionality));    msg.append('\n');    LOG.debugFine(msg.toString());  }  return preferenceVector;}  }
class C{  protected boolean isTokenChar(char ch){  if (Character.isLetterOrDigit(ch))   return true;  if (Character.isISOControl(ch))   return false;  if (isHttpSeparator(ch))   return false;  return true;}  }
class C{  protected boolean isUseFieldNames(){  return useFieldNames;}  }
class C{  public static JSONArray toJSONArray(JSONArray names,JSONTokener x) throws JSONException {  if (names == null || names.length() == 0) {    return null;  }  JSONArray ja=new JSONArray();  for (; ; ) {    JSONObject jo=rowToJSONObject(names,x);    if (jo == null) {      break;    }    ja.put(jo);  }  if (ja.length() == 0) {    return null;  }  return ja;}  }
class C{  public List<Struct> listTraitDefinitions(final String guid) throws AtlasServiceException {  JSONObject jsonResponse=callAPI(API.GET_ALL_TRAIT_DEFINITIONS,null,guid,TRAIT_DEFINITIONS);  List<JSONObject> traitDefList=extractResults(jsonResponse,AtlasClient.RESULTS,new ExtractOperation<JSONObject,JSONObject>());  ArrayList<Struct> traitStructList=new ArrayList<>();  for (  JSONObject traitDef : traitDefList) {    Struct traitStruct=InstanceSerialization.fromJsonStruct(traitDef.toString(),true);    traitStructList.add(traitStruct);  }  return traitStructList;}  }
class C{  public void writeExpression(Expression oldExp){  boolean internal=this.internal;  this.internal=true;  Object oldValue=getValue(oldExp);  if (get(oldValue) == null || (oldValue instanceof String && !internal)) {    getValueData(oldValue).exp=oldExp;    super.writeExpression(oldExp);  }  this.internal=internal;}  }
class C{  protected int findNext(int from){  if (from < -1)   return -1;  final int to=this.allHeaders.length - 1;  boolean found=false;  while (!found && (from < to)) {    from++;    found=filterHeader(from);  }  return found ? from : -1;}  }
class C{  private CSVParser(String data){  this.tokenizer=new Tokenizer(data);}  }
class C{  @Override public boolean remove(Object searched){  throw new UnsupportedOperationException(ERROR_MSG);}  }
class C{  public boolean isAvailable(){  return available;}  }
class C{  public static void redirect(InputStream inputStream,OutputStream outputStream){  new RedirectStream(inputStream,outputStream).start();}  }
class C{  public InitialLdapContext() throws NamingException {  super(null);}  }
class C{  public int export(ConstantPool target){  return target.addDouble(_value).getIndex();}  }
class C{  public boolean hasListener(EventListener listener){  List<Object> list=Arrays.asList(this.listenerList.getListenerList());  return list.contains(listener);}  }
class C{  public HttpRoute(HttpHost target,InetAddress local,HttpHost proxy,boolean secure,TunnelType tunnelled,LayerType layered){  this(local,target,toChain(proxy),secure,tunnelled,layered);}  }
class C{  public void close() throws IOException {  if (thread.isAlive()) {    thread.closed=true;    thread.interrupt();  }  if (stream != null) {    stream.close();  }}  }
class C{  protected void clearPrefs(HttpServletRequest request,PreferencesForm frm){  frm.clearPrefs();}  }
class C{  private void reinitializeAnimationArrays(){  final int childCount=mWorkspace.getChildCount();  if (mLastChildCount == childCount)   return;  mOldBackgroundAlphas=new float[childCount];  mOldAlphas=new float[childCount];  mNewBackgroundAlphas=new float[childCount];  mNewAlphas=new float[childCount];}  }
class C{  public static String parseIdFromSameDocumentURI(String uri){  if (uri.length() == 0) {    return null;  }  String id=uri.substring(1);  if (id != null && id.startsWith("xpointer(id(")) {    int i1=id.indexOf('\'');    int i2=id.indexOf('\'',i1 + 1);    id=id.substring(i1 + 1,i2);  }  return id;}  }
class C{  public static Intent forgeIntentOnStackEvent(Context ctx,ContactId contact,Intent intent){  intent.setClass(ctx,OneToOneTalkView.class);  intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK);  intent.putExtra(EXTRA_CONTACT,(Parcelable)contact);  return intent;}  }
class C{  public byte ID(){  return 3;}  }
class C{  private Object readResolve(){  if (list instanceof RandomAccess) {    return new SynchronizedRandomAccessList<E>(list,mutex);  }  return this;}  }
class C{  protected void startTrade(Player partner){  trade.startTrade(partner);}  }
class C{  public void testOneTransformer(){  addTransformerToManager(fInst,getRandomTransformer());  verifyTransformers(fInst);}  }
class C{  public void readData(final File file,final boolean allowRowChanges,final boolean allowColumnChanges) throws TableDataException {  String[][] values=Utils.getStringMatrix(file);  try {    checkData(allowRowChanges,allowColumnChanges,values);    reset(values.length,values[0].length);    for (int i=0; i < values.length; i++) {      for (int j=0; j < values[0].length; j++) {        if ((values[i][j]).length() > 0) {          setLogicalValue(i,j,values[i][j],false);        }      }    }    fireTableStructureChanged();  } catch (  TableDataException tde) {    throw tde;  }}  }
class C{  public static boolean isInCircle(Coordinate a,Coordinate b,Coordinate c,Coordinate p){  boolean isInCircle=(a.x * a.x + a.y * a.y) * triArea(b,c,p) - (b.x * b.x + b.y * b.y) * triArea(a,c,p) + (c.x * c.x + c.y * c.y) * triArea(a,b,p) - (p.x * p.x + p.y * p.y) * triArea(a,b,c) > 0;  return isInCircle;}  }
class C{  public PStrategy chooseStrategy(){  if (!allStrategiesAreDisabled) {    double rnd=MatsimRandom.getRandom().nextDouble() * this.totalWeights;    double accumulatedWeight=0.0;    for (int i=0; i < this.weights.size(); i++) {      accumulatedWeight+=this.weights.get(i);      if (accumulatedWeight >= rnd) {        return this.strategies.get(i);      }    }    log.info("Total weight is " + this.totalWeights + ". All strategies seem to be disabled.");    log.info("Will start to return null only. This message is given only once.");    this.allStrategiesAreDisabled=true;  }  return null;}  }
class C{  public Campaign(final String query,final String name,final String start_date,final String end_date,final int timezoneOffset) throws ParseException {  this(name,query,new Date(),DateParser.parse(start_date,timezoneOffset).getTime(),DateParser.parse(end_date,timezoneOffset).getTime(),timezoneOffset);}  }
class C{  public void addOldIndicationListener(TransportAddress localAddr,MessageEventHandler indicationListener){  eventDispatcher.addOldIndicationListener(localAddr,indicationListener);}  }
class C{  protected void resetRecyclerPadding(@NonNull RecyclerView recyclerView){  recyclerView.setPadding(recyclerView.getPaddingLeft() - edgeSpacing,recyclerView.getPaddingTop(),recyclerView.getPaddingRight() - edgeSpacing,recyclerView.getPaddingBottom());}  }
class C{  public void testWrite(){  int len=2048;  byte[] data=getWData(len);  ByteFifoBuffer instance=new ByteFifoBuffer(len);  int expResult=len;  int result=instance.write(data,len);  assertEquals(expResult,result);  byte[] read=new byte[len];  int readCount=instance.read(read,len);  assertEquals(result,readCount);  assertArrayEquals(data,read);}  }
class C{  @Override public Object[] toArray(ResultSet rs) throws SQLException {  ResultSetMetaData meta=rs.getMetaData();  int cols=meta.getColumnCount();  Object[] result=new Object[cols];  for (int i=0; i < cols; i++) {    result[i]=rs.getObject(i + 1);  }  return result;}  }
class C{  KeyToolTest(){  Locale.setDefault(Locale.US);}  }
class C{  protected AbstractSet(){  super();}  }
class C{  public static BigInteger createRandomInRange(BigInteger min,BigInteger max,SecureRandom random){  int cmp=min.compareTo(max);  if (cmp >= 0) {    if (cmp > 0) {      throw new IllegalArgumentException("'min' may not be greater than 'max'");    }    return min;  }  if (min.bitLength() > max.bitLength() / 2) {    return createRandomInRange(ZERO,max.subtract(min),random).add(min);  }  for (int i=0; i < MAX_ITERATIONS; ++i) {    BigInteger x=new BigInteger(max.bitLength(),random);    if (x.compareTo(min) >= 0 && x.compareTo(max) <= 0) {      return x;    }  }  return new BigInteger(max.subtract(min).bitLength() - 1,random).add(min);}  }
class C{  public Builder tag(String value){  tag=value;  return this;}  }
class C{  private static MatrixBlock[] computeLU(MatrixObject in) throws DMLRuntimeException {  if (in.getNumRows() != in.getNumColumns()) {    throw new DMLRuntimeException("LU Decomposition can only be done on a square matrix. Input matrix is rectangular (rows=" + in.getNumRows() + ", cols="+ in.getNumColumns()+ ")");  }  Array2DRowRealMatrix matrixInput=DataConverter.convertToArray2DRowRealMatrix(in);  LUDecomposition ludecompose=new LUDecomposition(matrixInput);  RealMatrix P=ludecompose.getP();  RealMatrix L=ludecompose.getL();  RealMatrix U=ludecompose.getU();  MatrixBlock mbP=DataConverter.convertToMatrixBlock(P.getData());  MatrixBlock mbL=DataConverter.convertToMatrixBlock(L.getData());  MatrixBlock mbU=DataConverter.convertToMatrixBlock(U.getData());  return new MatrixBlock[]{mbP,mbL,mbU};}  }
class C{  private void defineInternalFrameCloseButtons(UIDefaults d){  String p="InternalFrame:InternalFrameTitlePane:\"InternalFrameTitlePane.closeButton\"";  String c=PAINTER_PREFIX + "TitlePaneCloseButtonPainter";  d.put(p + ".States","Enabled,MouseOver,Pressed,Disabled,Focused,Selected,WindowNotFocused");  d.put(p + ".WindowNotFocused",new TitlePaneCloseButtonWindowNotFocusedState());  d.put(p + ".contentMargins",new InsetsUIResource(0,0,0,0));  d.put(p + "[Disabled].backgroundPainter",new LazyPainter(c,TitlePaneCloseButtonPainter.Which.BACKGROUND_DISABLED));  d.put(p + "[Enabled].backgroundPainter",new LazyPainter(c,TitlePaneCloseButtonPainter.Which.BACKGROUND_ENABLED));  d.put(p + "[MouseOver].backgroundPainter",new LazyPainter(c,TitlePaneCloseButtonPainter.Which.BACKGROUND_MOUSEOVER));  d.put(p + "[Pressed].backgroundPainter",new LazyPainter(c,TitlePaneCloseButtonPainter.Which.BACKGROUND_PRESSED));  d.put(p + "[Enabled+WindowNotFocused].backgroundPainter",new LazyPainter(c,TitlePaneCloseButtonPainter.Which.BACKGROUND_ENABLED_WINDOWNOTFOCUSED));  d.put(p + "[MouseOver+WindowNotFocused].backgroundPainter",new LazyPainter(c,TitlePaneCloseButtonPainter.Which.BACKGROUND_MOUSEOVER));  d.put(p + "[Pressed+WindowNotFocused].backgroundPainter",new LazyPainter(c,TitlePaneCloseButtonPainter.Which.BACKGROUND_PRESSED_WINDOWNOTFOCUSED));  d.put(p + ".icon",new SeaGlassIcon(p,"iconPainter",43,18));}  }
class C{  private String encode(String s){  try {    return URLEncoder.encode(s,"UTF-8");  } catch (  UnsupportedEncodingException e) {    throw new RuntimeException("UTF-8 is not supported by the JVM",e);  }}  }
class C{  public boolean isPrivate(){  return Modifier.isPrivate(flags);}  }
class C{  public boolean isInScope(LocalMember field){  for (LocalMember f=locals; f != null; f=f.prev) {    if (field == f) {      return true;    }  }  return false;}  }
class C{  private void addToQuery(PriorityQueue<ScoreTerm> q,BooleanQuery query){  ScoreTerm scoreTerm;  float bestScore=-1;  while ((scoreTerm=q.pop()) != null) {    TermQuery tq=new TermQuery(new Term(scoreTerm.topField,scoreTerm.word));    if (boost) {      if (bestScore == -1) {        bestScore=(scoreTerm.score);      }      float myScore=(scoreTerm.score);      tq.setBoost(boostFactor * myScore / bestScore);    }    try {      query.add(tq,BooleanClause.Occur.SHOULD);    } catch (    BooleanQuery.TooManyClauses ignore) {      break;    }  }}  }
class C{  public NSNumber(boolean b){  boolValue=b;  doubleValue=longValue=b ? 1 : 0;  type=BOOLEAN;}  }
class C{  public String substring(final int start){  return substring(start,size);}  }
class C{  @Override public String toString(){  return "cudaPitchedPtr[" + "ptr=" + ptr + ","+ "pitch="+ pitch+ ","+ "xsize="+ xsize+ ","+ "ysize="+ ysize+ "]";}  }
class C{  @Override public double execute(double in1,double in2){  return (in1 == in2 ? 1.0 : 0.0);}  }
class C{  RosterEntry(String user,String name,RosterPacket.ItemType type,RosterPacket.ItemStatus status,Roster roster,Connection connection){  this.user=user;  this.name=name;  this.type=type;  this.status=status;  this.roster=roster;  this.connection=connection;}  }
class C{  private void validateServerClientID(){  String serverClientId=getString(R.string.server_client_id);  String suffix=".apps.googleusercontent.com";  if (!serverClientId.trim().endsWith(suffix)) {    String message="Invalid server client ID in strings.xml, must end with " + suffix;    Log.w(TAG,message);    Toast.makeText(this,message,Toast.LENGTH_LONG).show();  }}  }
class C{  public String upload() throws Exception {  if (this.cancel != null) {    return "cancel";  }  String uploadDir=ServletActionContext.getServletContext().getRealPath("/resources") + "/" + getRequest().getRemoteUser()+ "/";  File dirPath=new File(uploadDir);  if (!dirPath.exists()) {    dirPath.mkdirs();  }  InputStream stream=new FileInputStream(file);  OutputStream bos=new FileOutputStream(uploadDir + fileFileName);  int bytesRead;  byte[] buffer=new byte[8192];  while ((bytesRead=stream.read(buffer,0,8192)) != -1) {    bos.write(buffer,0,bytesRead);  }  bos.close();  stream.close();  getRequest().setAttribute("location",dirPath.getAbsolutePath() + Constants.FILE_SEP + fileFileName);  String link=getRequest().getContextPath() + "/resources" + "/"+ getRequest().getRemoteUser()+ "/";  getRequest().setAttribute("link",link + fileFileName);  return SUCCESS;}  }
class C{  public void printCFG(String label,BciBlockMapping blockMap){  begin("cfg");  out.print("name \"").print(label).println('"');  for (  BciBlockMapping.BciBlock block : blockMap.getBlocks()) {    begin("block");    printBlock(block);    end("block");  }  end("cfg");}  }
class C{  private static void s_uam(SparseBlock a,double[] c,int m,int n,int rl,int ru){  double ret=1;  for (int i=rl; i < ru; i++) {    if (!a.isEmpty(i)) {      int alen=a.size(i);      ret*=product(a.values(i),0,alen);      ret*=(alen < n) ? 0 : 1;    }    if (!NAN_AWARENESS && ret == 0)     break;  }  c[0]=ret;}  }
class C{  public static boolean isXML11ValidLiteral(int c){  return ((c < 0x10000 && ((XML11CHARS[c] & MASK_XML11_VALID) != 0 && (XML11CHARS[c] & MASK_XML11_CONTROL) == 0)) || (0x10000 <= c && c <= 0x10FFFF));}  }
class C{  public void testSettingsHookTestAppAvailable() throws Exception {  Context context=mSettings.getApplicationContext();  PackageManager pm=context.getPackageManager();  ApplicationInfo applicationInfo=pm.getApplicationInfo(PACKAGE_NAME,0);  assertTrue((applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0);}  }
class C{  public _CheckinOptions(final _CheckinOptions_Flag[] flags){  super(flags);}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writePaint(this.backgroundPaint,stream);}  }
class C{  @Override public void onPause(){  super.onPause();  if (!isFinishing()) {    establishInitialState();  }}  }
class C{  public AbstractCharList partFromTo(int from,int to){  if (size == 0)   return new CharArrayList(0);  checkRangeFromTo(from,to,size);  char[] part=new char[to - from + 1];  System.arraycopy(elements,from,part,0,to - from + 1);  return new CharArrayList(part);}  }
class C{  public ScriptMethodRequest(String method,Object argument){  this.method=method;  this.argument=argument;}  }
class C{  private Node addRec(final CharSequence s,final int offset,final int length,final Node e){  if (e == null) {    modified=true;    size++;    return new Node(s,offset,length,true,1);  }  char c;  int i;  Node n=null;  final char[] path=e.path;  for (i=0; i < path.length - 1; i++) {    c=s.charAt(offset + i);    if (c < path[i]) {      n=new Node(path,0,i + 1,false,e.numNodes + 1);      n.middle=e;      e.removePathPrefix(i + 1);      n.left=addRec(s,offset + i,length - i,null);      break;    } else     if (c > path[i]) {      n=new Node(path,0,i + 1,false,e.numNodes + 1);      n.middle=e;      e.removePathPrefix(i + 1);      n.right=addRec(s,offset + i,length - i,null);      break;    } else {      if (i == length - 1) {        n=new Node(s,offset,length,true,e.numNodes + 1);        n.middle=e;        e.removePathPrefix(length);        size++;        modified=true;        break;      }    }  }  if (i < path.length - 1)   return n;  c=s.charAt(offset + i);  if (c < path[i]) {    e.left=addRec(s,offset + i,length - i,e.left);    if (modified)     e.numNodes++;  } else   if (c > path[i]) {    e.right=addRec(s,offset + i,length - i,e.right);    if (modified)     e.numNodes++;  } else {    if (i == length - 1) {      if (modified=!e.isWord) {        e.numNodes++;        size++;      }      e.isWord=true;    } else {      e.middle=addRec(s,offset + i + 1,length - i - 1,e.middle);      if (modified)       e.numNodes++;    }  }  return e;}  }
class C{  public CompareResult<LinkAddress> compareAddresses(LinkProperties target){  CompareResult<LinkAddress> result=new CompareResult<>();  result.removed=new ArrayList<>(mLinkAddresses);  result.added.clear();  if (target != null) {    for (    LinkAddress newAddress : target.getLinkAddresses()) {      if (!result.removed.remove(newAddress)) {        result.added.add(newAddress);      }    }  }  return result;}  }
class C{  private void generateSysCall(int parametersSize){  int linkageAreaSize=parametersSize + BYTES_IN_STACKSLOT + (6 * BYTES_IN_STACKSLOT);  if (VM.BuildFor32Addr) {    asm.emitSTWU(FP,-linkageAreaSize,FP);  } else {    asm.emitSTDU(FP,-linkageAreaSize,FP);  }  asm.emitSTAddr(JTOC,linkageAreaSize - BYTES_IN_STACKSLOT,FP);  if (VM.BuildForPower64ELF_ABI) {    asm.emitLAddrOffset(JTOC,S0,Offset.fromIntSignExtend(BYTES_IN_STACKSLOT));    asm.emitLAddrOffset(S0,S0,Offset.zero());  }  asm.emitMTCTR(S0);  asm.emitBCCTRL();  asm.emitLAddr(JTOC,linkageAreaSize - BYTES_IN_STACKSLOT,FP);  asm.emitADDI(FP,linkageAreaSize,FP);}  }
class C{  public void addIndex(IIndex index){  if (index != null) {    indices.add(index);  }}  }
class C{  DirectCompactOrderedSketch(long[] compactOrderedCache,boolean empty,short seedHash,int curCount,long thetaLong,Memory dstMem){  super(empty,seedHash,curCount,thetaLong);  int emptyBit=isEmpty() ? (byte)EMPTY_FLAG_MASK : 0;  byte flags=(byte)(emptyBit | READ_ONLY_FLAG_MASK | COMPACT_FLAG_MASK| ORDERED_FLAG_MASK);  mem_=loadCompactMemory(compactOrderedCache,empty,seedHash,curCount,thetaLong,dstMem,flags);}  }
class C{  public void replace(@NonNull List items){  getList().clear();  getList().addAll(items);  notifyDataSetChanged();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static LocalDate fromCalendarFields(Calendar calendar){  if (calendar == null) {    throw new IllegalArgumentException("The calendar must not be null");  }  return new LocalDate(calendar.get(Calendar.YEAR),calendar.get(Calendar.MONTH) + 1,calendar.get(Calendar.DAY_OF_MONTH));}  }
class C{  public KafkaTemplate(ProducerFactory<K,V> producerFactory){  this(producerFactory,false);}  }
class C{  private boolean mutationConcolic(){  logger.info("Applying DSE mutation");  List<BranchCondition> branches=ConcolicExecution.getSymbolicPath(this);  logger.debug("Conditions: " + branches);  if (branches.isEmpty())   return false;  boolean mutated=false;  List<BranchCondition> targetBranches=new ArrayList<BranchCondition>();  for (  BranchCondition branch : branches) {    if (TestCluster.isTargetClassName(branch.getClassName()))     targetBranches.add(branch);  }  BranchCondition branch=null;  if (targetBranches.isEmpty())   branch=Randomness.choice(branches); else   branch=Randomness.choice(targetBranches);  logger.debug("Trying to negate branch " + branch.getInstructionIndex() + " - have "+ targetBranches.size()+ "/"+ branches.size()+ " target branches");  TestCase newTest=ConcolicMutation.negateCondition(branches,branch,test);  if (newTest != null) {    logger.debug("CONCOLIC: Created new test");    this.test=newTest;    this.setChanged(true);    this.lastExecutionResult=null;  } else {    logger.debug("CONCOLIC: Did not create new test");  }  return mutated;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:20.007 -0400",hash_original_method="C9D180903A7CC0CD8F17729AA0E80F49",hash_generated_method="618E78147D566CA48083B5158FE7687B") public void put(E e){  offer(e);}  }
class C{  @Override public void connectionNotification(String eventName,Object source){  if (connectionAllowed(eventName)) {    m_listenee=source;  }}  }
class C{  public static int count(long[] srcArr,long thetaLong){  int cnt=0;  int len=srcArr.length;  for (int i=len; i-- > 0; ) {    long hash=srcArr[i];    if (continueCondition(thetaLong,hash)) {      continue;    }    cnt++;  }  return cnt;}  }
class C{  public static ComponentUI createUI(JComponent c){  return new CompiereTabbedPaneUI();}  }
class C{  public void addEvent(SimEvent newEvent){  newEvent.setSerial(serial++);  sortedSet.add(newEvent);}  }
class C{  protected double updateDistance(double currDist,double diff){  double result;  result=currDist;  result+=Math.abs(diff);  return result;}  }
class C{  protected String compute(Date dateDate,String patternString){  String defaultLocale=Locale.getDefault().getISO3Language();  return compute(dateDate,patternString,defaultLocale);}  }
class C{  protected void sequence_TryStatement(ISerializationContext context,TryStatement semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  @Override protected EClass eStaticClass(){  return StextPackage.Literals.SIMPLE_SCOPE;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void select(boolean flag){  isSelected=flag;  mark=0;}  }
class C{  public input addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public void attachMirror(URI vplexURI,URI vplexVolumeURI,URI mirrorVolumeURI,URI cgURI,String detachStepId,String stepId){  _log.info("Executing attach mirror {} to VPLEX volume {} on VPLEX {}",new Object[]{mirrorVolumeURI,vplexVolumeURI,vplexURI});  try {    WorkflowStepCompleter.stepExecuting(stepId);    StorageSystem vplexSystem=getDataObject(StorageSystem.class,vplexURI,_dbClient);    VPlexApiClient client=getVPlexAPIClient(_vplexApiFactory,vplexSystem,_dbClient);    _log.info("Got VPLEX API client");    Volume vplexVolume=getDataObject(Volume.class,vplexVolumeURI,_dbClient);    String vplexVolumeName=vplexVolume.getDeviceLabel();    _log.info("Got VPLEX volume");    @SuppressWarnings("unchecked") Map<String,String> detachStepData=(Map<String,String>)_workflowService.loadStepData(detachStepId);    String mirrorDeviceName=detachStepData.get(DETACHED_DEVICE);    client.reattachMirrorToDistributedVolume(vplexVolumeName,mirrorDeviceName);    _log.info("Attached the mirror");    detachStepData.put(REATTACH_MIRROR,Boolean.FALSE.toString());    _workflowService.storeStepData(detachStepId,detachStepData);    if (cgURI != null) {      ConsistencyGroupManager consistencyGroupManager=getConsistencyGroupManager(vplexVolume);      consistencyGroupManager.addVolumeToCg(cgURI,vplexVolume,client,false);      detachStepData.put(ADD_BACK_TO_CG,Boolean.FALSE.toString());      _workflowService.storeStepData(detachStepId,detachStepData);      _log.info("Added volume back to consistency group.");    }    WorkflowStepCompleter.stepSucceded(stepId);    _log.info("Updated workflow step state to success");  } catch (  VPlexApiException vae) {    _log.error("Exception attaching mirror for VPLEX distributed volume" + vae.getMessage(),vae);    WorkflowStepCompleter.stepFailed(stepId,vae);  }catch (  Exception e) {    _log.error("Exception attaching mirror for VPLEX distributed volume " + e.getMessage(),e);    WorkflowStepCompleter.stepFailed(stepId,VPlexApiException.exceptions.failedAttachingVPlexVolumeMirror(mirrorVolumeURI.toString(),vplexVolumeURI.toString(),e));  }}  }
class C{  boolean isSingleWord(){  if (hasFinalPossessive) {    return current == startBounds && end == endBounds - 2;  } else {    return current == startBounds && end == endBounds;  }}  }
class C{  public Mailbox(QueueCollection<Envelope> queueCollection){  this.queueCollection=queueCollection;  this.queueId=queueCollection.spawnQueue();}  }
class C{  private static synchronized String formatNum(double n,boolean wide){  String w=(wide) ? "21" : "";  return String.format("%" + w + ".12e",n);}  }
class C{  @Override public void run(){  amIActive=true;  String inputTextFile=null;  String inputRasterFiles=null;  String outputTextFile=null;  boolean interpolateValues=false;  boolean includeStatistics=false;  String[] gatHeaderFile;  List<WhiteboxRaster> gatGrids=new ArrayList<>();  String fileName;  int numberOfLines=0;  int counter;  String tempLine;  String[] line;  int id;  double xCoord;  double yCoord;  String name;  int xGridcell;  int yGridcell;  double deltaX;  double deltaY;  int dXi;  int dYi;  double average;  double w;  double[] ww=new double[4];  double value;  int[] xd=new int[]{0,-1,-1,-1,0,1,1,1};  int[] yd=new int[]{-1,-1,0,1,1,1,0,-1};  double min;  double max;  double sum;  int sumCount;  double mean=0;  double neighbourValue;  FileWriter streamWriter=null;  String outputLine;  float progress=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputTextFile=args[i];    } else     if (i == 1) {      inputRasterFiles=args[i];    } else     if (i == 2) {      outputTextFile=args[i];    } else     if (i == 3) {      interpolateValues=Boolean.parseBoolean(args[i]);    } else     if (i == 4) {      includeStatistics=Boolean.parseBoolean(args[i]);    }  }  if ((inputTextFile == null) || (inputRasterFiles == null) || (outputTextFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    gatHeaderFile=inputRasterFiles.split(";");    for (int i=0; i <= gatHeaderFile.length - 1; i++) {      WhiteboxRaster gatGrid=new WhiteboxRaster(gatHeaderFile[i],"r");      gatGrids.add(gatGrid);    }    BufferedReader bufferedReader=new BufferedReader(new FileReader(inputTextFile));    streamWriter=new FileWriter(outputTextFile,false);    outputLine="ID" + "\t" + "X"+ "\t"+ "Y";    for (    WhiteboxRaster gatGrid : gatGrids) {      fileName=gatGrid.getShortHeaderFile();      outputLine=outputLine + "\t" + fileName;      if (includeStatistics) {        outputLine=outputLine + "\t" + fileName+ "_min"+ "\t"+ fileName+ "_max"+ "\t"+ fileName+ "_mean";      }    }    outputLine=outputLine + "\t" + "Name";    streamWriter.write(outputLine + System.lineSeparator());    while ((tempLine=bufferedReader.readLine()) != null) {      numberOfLines=numberOfLines + 1;    }    bufferedReader.close();    bufferedReader=new BufferedReader(new FileReader(inputTextFile));    tempLine=bufferedReader.readLine();    counter=1;    while ((tempLine=bufferedReader.readLine()) != null) {      line=tempLine.split("\t");      counter=counter + 1;      if ((line.length != 3) && (line.length != 4)) {        JOptionPane.showMessageDialog(null,"Error in input file. Line " + counter + " contains an unexpected number of elements.");        return;      }      if (!IsInteger(line[0]) || !IsDouble(line[1]) || !IsDouble(line[2])) {        JOptionPane.showMessageDialog(null,"Error in input file. Line " + counter + " contains a value of an expected type.");        return;      }      id=Integer.parseInt(line[0]);      xCoord=Double.parseDouble(line[1]);      yCoord=Double.parseDouble(line[2]);      if (line.length == 4) {        name=line[3];      } else {        name="";      }      outputLine=id + "\t" + xCoord+ "\t"+ yCoord;      for (      WhiteboxRaster gatGrid : gatGrids) {        gridRes=gatGrid.getCellSizeX();        xGridcell=(int)((xCoord - gatGrid.getWest()) / gridRes);        yGridcell=(int)((yCoord - gatGrid.getSouth()) / gridRes);        deltaX=xCoord - ((xGridcell + 0.5) * gridRes + gatGrid.getWest());        deltaY=yCoord - ((yGridcell + 0.5) * gridRes + gatGrid.getSouth());        yGridcell=InvertYCoord(gatGrid,yGridcell);        if (deltaX > 0) {          dXi=1;        } else {          dXi=-1;        }        if (deltaY > 0) {          dYi=-1;        } else {          dYi=1;        }        deltaX=Math.abs(deltaX);        deltaY=Math.abs(deltaY);        if (interpolateValues) {          if ((gatGrid.getValue(yGridcell,xGridcell) == gatGrid.getNoDataValue()) || (gatGrid.getValue(yGridcell + dYi,xGridcell) == gatGrid.getNoDataValue()) || (gatGrid.getValue(yGridcell,xGridcell + dXi) == gatGrid.getNoDataValue())|| (gatGrid.getValue(yGridcell + dYi,xGridcell + dXi) == gatGrid.getNoDataValue())) {            value=gatGrid.getNoDataValue();          } else           if (deltaX == 0 && deltaY == 0) {            value=gatGrid.getValue(yGridcell,xGridcell);          } else {            ww[0]=1 / Math.sqrt(Math.pow(deltaX,2) + Math.pow(deltaY,2));            average=gatGrid.getValue(yGridcell,xGridcell) * ww[0];            w=ww[0];            ww[1]=1 / Math.sqrt(Math.pow(deltaX,2) + Math.pow(gridRes - deltaY,2));            average=average + gatGrid.getValue(yGridcell + dYi,xGridcell) * ww[1];            w=w + ww[1];            ww[2]=1 / Math.sqrt(Math.pow(gridRes - deltaX,2) + Math.pow(deltaY,2));            average=average + gatGrid.getValue(yGridcell,xGridcell + dXi) * ww[2];            w=w + ww[2];            ww[3]=1 / Math.sqrt(Math.pow(gridRes - deltaX,2) + Math.pow(gridRes - deltaY,2));            average=average + gatGrid.getValue(yGridcell + dYi,xGridcell + dXi) * ww[3];            w=w + ww[3];            value=average / w;          }        } else {          value=gatGrid.getValue(yGridcell,xGridcell);        }        outputLine=outputLine + "\t" + value;        if (includeStatistics) {          value=gatGrid.getValue(yGridcell,xGridcell);          if (value == gatGrid.getNoDataValue()) {            min=Double.MAX_VALUE;            max=Double.MIN_VALUE;            sum=0;            sumCount=0;            mean=gatGrid.getNoDataValue();          } else {            min=value;            max=value;            sum=value;            sumCount=1;          }          for (int c=0; c < 8; c++) {            neighbourValue=gatGrid.getValue(yGridcell + yd[c],xGridcell + xd[c]);            if (neighbourValue != gatGrid.getNoDataValue()) {              if (neighbourValue < min) {                min=neighbourValue;              }              if (neighbourValue > max) {                max=neighbourValue;              }              sum=sum + neighbourValue;              sumCount=sumCount + 1;            }          }          if (sumCount == 0) {            min=gatGrid.getNoDataValue();            max=gatGrid.getNoDataValue();          } else {            mean=sum / sumCount;          }          outputLine=outputLine + "\t" + min+ "\t"+ max+ "\t"+ mean;        }      }      if (name != "") {        outputLine=outputLine + "\t" + name;      }      streamWriter.write(outputLine + System.lineSeparator());      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * counter / numberOfLines);      updateProgress("",(int)progress);    }    for (    WhiteboxRaster gatGrid : gatGrids) {      gatGrid.close();    }    streamWriter.close();  } catch (  IOException|HeadlessException|NumberFormatException e) {    showFeedback(e.getMessage());  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private Expression compileExtension(int opPos) throws TransformerException {  int endExtFunc=opPos + getOp(opPos + 1) - 1;  opPos=getFirstChildPos(opPos);  java.lang.String ns=(java.lang.String)getTokenQueue().elementAt(getOp(opPos));  opPos++;  java.lang.String funcName=(java.lang.String)getTokenQueue().elementAt(getOp(opPos));  opPos++;  Function extension=new FuncExtFunction(ns,funcName,String.valueOf(getNextMethodId()));  try {    int i=0;    while (opPos < endExtFunc) {      int nextOpPos=getNextOpPos(opPos);      extension.setArg(this.compile(opPos),i);      opPos=nextOpPos;      i++;    }  } catch (  WrongNumberArgsException wnae) {    ;  }  return extension;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.TYPE_REF_ANNOTATION_ARGUMENT__TYPE_REF:    return getTypeRef();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void test_ticket_1202l() throws Exception {  new TestHelper("ticket-1202-group05-modified5","ticket-1202-group05-modified5.rq","ticket-1202-group05-modified5.ttl","ticket-1202-group05-modified5.srx").runTest();}  }
class C{  public static String encode(int character){  StringBuffer ret;  ret=new StringBuffer(13);  ret.append("&#");  if (ENCODE_HEXADECIMAL) {    ret.append("x");    ret.append(Integer.toHexString(character));  } else   ret.append(character);  ret.append(';');  return (ret.toString());}  }
class C{  public void processQueryFacets(final Filter filter) throws IOException {  for (  QueryFacetRequest qfr : queryFacets) {    for (    String query : qfr.getQueries()) {      if (query.contains(AnalyticsParams.RESULT) && !query.contains(AnalyticsParams.QUERY_RESULT)) {        try {          String[] pivotStr=ExpressionFactory.getArguments(query.substring(query.indexOf('(') + 1,query.lastIndexOf(')')).trim());          if (pivotStr.length == 1) {            query=getResult(pivotStr[0]);          } else           if (pivotStr.length == 3) {            query=getResult(pivotStr[0],pivotStr[1],pivotStr[2]);          } else {            throw new SolrException(ErrorCode.BAD_REQUEST,"Result request " + query + " has an invalid amount of arguments.");          }        } catch (        IndexOutOfBoundsException e) {          throw new SolrException(ErrorCode.BAD_REQUEST,"Result request " + query + " is invalid. Lacks parentheses.",e);        }      } else       if (query.contains(AnalyticsParams.QUERY_RESULT)) {        try {          String[] pivotStr=ExpressionFactory.getArguments(query.substring(query.indexOf('(') + 1,query.lastIndexOf(')')).trim());          if (pivotStr.length == 3) {            query=getQueryResult(qfr.getName(),pivotStr[0],pivotStr[1],pivotStr[2]);          } else {            throw new SolrException(ErrorCode.BAD_REQUEST,"Result request " + query + " has an invalid amount of arguments.");          }        } catch (        IndexOutOfBoundsException e) {          throw new SolrException(ErrorCode.BAD_REQUEST,"Result request " + query + " is invalid. Lacks parentheses.",e);        }      }      QueryFacetAccumulator qAcc=new QueryFacetAccumulator(this,qfr.getName(),query);      final Query q;      try {        q=QParser.getParser(query,queryRequest).getQuery();      } catch (      SyntaxError e) {        throw new SolrException(ErrorCode.BAD_REQUEST,"Invalid query '" + query + "'",e);      }      Query filtered=new BooleanQuery.Builder().add(q,Occur.MUST).add(filter,Occur.FILTER).build();      searcher.search(filtered,qAcc);      computeQueryFacet(qfr.getName());      queryCount++;    }  }}  }
class C{  public void testEvaluation(){  PolynomialTerm term=new PolynomialTerm(0.5,new int[]{0,1,1,2});  double[] values=new double[]{1.0,2.0,3.0};  assertEquals(6.0,term.evaluate(values),0.00001);}  }
class C{  public OnlineTSPSource(final String tspServer){  this.tspServer=tspServer;}  }
class C{  public String optString(int index){  return this.optString(index,"");}  }
class C{  private void freshAttributeInfo(){  m_Attributes=(FastVector)m_Attributes.copyElements();}  }
class C{  private void createDirectionGroup(){  RowLayout rowLayout=new RowLayout();  rowLayout.fill=true;  rowLayout.type=org.eclipse.swt.SWT.VERTICAL;  directionGroup=new Group(sShell,SWT.NONE);  directionGroup.setText(textDirection);  FormData formData=new FormData();  formData.top=new FormAttachment(replaceGroup.group);  directionGroup.setLayoutData(formData);  directionGroup.setLayout(rowLayout);  forwardRadioButton=new Button(directionGroup,SWT.RADIO);  forwardRadioButton.setText(textForward);  forwardRadioButton.addSelectionListener(defaultSelectionAdapter);  backwardRadioButton=new Button(directionGroup,SWT.RADIO);  backwardRadioButton.setText(textBackward);  backwardRadioButton.addSelectionListener(defaultSelectionAdapter);}  }
class C{  private GenID generateGenID(TreeNode syntaxTreeNode,ModuleNode mn,boolean unaryNegKludge) throws AbortException {  GenID genID;  TreeNode[] children=syntaxTreeNode.heirs();  TreeNode[] prefix=null;  TreeNode[] prefixElt;  TreeNode[] allArgs=null;  TreeNode[] argsList=null;  if (children == null || children.length <= 0) {    return null;  }  prefix=children[0].heirs();  genID=new GenID(syntaxTreeNode);  int len=prefix.length;  allArgs=new SyntaxTreeNode[len];  for (int i=0; i < len; i++) {    prefixElt=prefix[i].heirs();    genID.append(prefixElt[0].getImage());    genID.append("!");    allArgs[i]=prefixElt[1];  }  genID.finalAppend(children[1].getImage(),unaryNegKludge);  int iarg=0;  for (int i=0; i < allArgs.length; i++) {    if (allArgs[i] != null && allArgs[i].isKind(N_OpArgs)) {      argsList=allArgs[i].heirs();      for (int ia=1; ia < argsList.length; ia+=2) {        genID.addArg(generateExprOrOpArg(genID.getFullyQualifiedOp(),syntaxTreeNode,iarg,argsList[ia],mn));        iarg++;      }    }  }  genID.finalizeID();  return genID;}  }
class C{  public void prolog(ExecutionResult executionResult,int maxRows,boolean hasProxy,MariaDbConnection connection,Statement statement) throws SQLException {  if (explicitClosed) {    throw new SQLException("execute() is called on closed connection");  }  if (!hasProxy) {    if (shouldReconnectWithoutProxy()) {      try {        connectWithoutProxy();      } catch (      QueryException qe) {        ExceptionMapper.throwException(qe,connection,statement);      }    }  }  try {    setMaxRows(maxRows);    fetchActiveStreamingResult();    while (hasMoreResults()) {      getMoreResults(executionResult);    }  } catch (  QueryException qe) {    ExceptionMapper.throwException(qe,connection,statement);  }  connection.reenableWarnings();}  }
class C{  public void switchContent(Fragment fragment){  getActionBar().setDisplayHomeAsUpEnabled(true);  getActionBar().setDisplayShowHomeEnabled(true);  getActionBar().setDisplayShowCustomEnabled(false);  getSupportFragmentManager().beginTransaction().replace(R.id.mainActivityContainer,fragment).commit();  mDrawerLayout.closeDrawer(Gravity.START);  invalidateOptionsMenu();}  }
class C{  public static String ForwardAdb(int roboRioPort,int devicePort){  if (m_jadb != null) {    return RIOdroid.executeCommand("adb forward tcp:" + roboRioPort + " tcp:"+ devicePort);  } else {    System.out.println("Current adb connection is null");  }  return null;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Seeker.getInstance().scanLibrary(Catbert.evalBool(stack.pop()));  return null;}  }
class C{  public org.apache.nutch.storage.ParseStatus.Builder clearMinorCode(){  fieldSetFlags()[1]=false;  return this;}  }
class C{  public static void main(String[] args) throws Exception {  SimpleCommandLineParser parser=new SimpleCommandLineParser(args);  String username=parser.getValue("username","user","u");  String password=parser.getValue("password","pass","passwd","pw","p");  boolean help=parser.containsKey("help","h");  if (help || (username == null) || (password == null)) {    usage();    System.exit(1);  }  boolean author=parser.containsKey("author","a");  boolean columns=parser.containsKey("headers","header","h");  boolean worksheets=parser.containsKey("worksheets","worksheet","w");  IndexClient client=new IndexClient(username,password);  for (  SpreadsheetEntry spreadsheet : client.getSpreadsheetEntries()) {    System.out.print(spreadsheet.getTitle().getPlainText());    if (author) {      for (      Person person : spreadsheet.getAuthors()) {        System.out.println(" - " + person.getName());      }    } else {      System.out.println();    }    if (worksheets || columns) {      List<WorksheetEntry> entries=client.getWorksheetEntries(spreadsheet);      for (      WorksheetEntry worksheet : entries) {        System.out.println("\t" + worksheet.getTitle().getPlainText());        if (columns) {          List<String> headers=client.getColumnHeaders(worksheet);          for (          String header : headers) {            System.out.println("\t\t" + header);          }        }      }    }  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:53.625 -0500",hash_original_method="D3D57AE588662EF8725CB60FCA1C3072",hash_generated_method="2B75B99AF9634D353514986B6026DE94") private boolean isHomeSid(int sid){  if (mHomeSystemId != null) {    for (int i=0; i < mHomeSystemId.length; i++) {      if (sid == mHomeSystemId[i]) {        return true;      }    }  }  return false;}  }
class C{  public void reset(){  hashMap=new ReversePurgeLongHashMap(1 << LG_MIN_MAP_SIZE);  this.curMapCap=hashMap.getCapacity();  this.offset=0;  this.streamLength=0;}  }
class C{  int parseHour(String source,char patternChar,int offset) throws ParseException {  int min=(patternChar == HOUR_1_LETTER || patternChar == HOUR12_1_LETTER) ? 1 : 0;  int max=((patternChar == HOUR_LETTER || patternChar == HOUR_1_LETTER) ? 23 : 11) + min;  return parseNumber(source,offset,"hour",min,max) - min;}  }
class C{  public static Automaton union(Collection<Automaton> l){  Automaton result=new Automaton();  result.createState();  for (  Automaton a : l) {    result.copy(a);  }  int stateOffset=1;  for (  Automaton a : l) {    if (a.getNumStates() == 0) {      continue;    }    result.addEpsilon(0,stateOffset);    stateOffset+=a.getNumStates();  }  result.finishState();  return removeDeadStates(result);}  }
class C{  private static DefaultTestCase buildTestCase0() throws NoSuchMethodException, SecurityException, ClassNotFoundException {  TestCaseBuilder builder=new TestCaseBuilder();  VariableReference int0=builder.appendIntPrimitive(10);  VariableReference int1=builder.appendIntPrimitive(10);  VariableReference int2=builder.appendIntPrimitive(10);  Class<?> fooClass=TestGenerationContext.getInstance().getClassLoaderForSUT().loadClass(Properties.TARGET_CLASS);  Method barMethod=fooClass.getMethod("bar",int.class,int.class,int.class);  builder.appendMethod(null,barMethod,int0,int1,int2);  return builder.getDefaultTestCase();}  }
class C{  public int totalRules(){  if (rules == null) {    return 0;  }  return rules.size();}  }
class C{  @POST @Consumes(MediaType.APPLICATION_XML) @Produces(MediaType.APPLICATION_JSON) @RequiresRole(role=Role.ADMINISTRATOR) public ExternalIDPDTO registerWithMetadata(String externalIDPConfig){  try {    String entityId=getIDMClient().importExternalIDPConfiguration(tenant,parseSAMLConfig(externalIDPConfig));    return ExternalIDPMapper.getExternalIDPDTO(getIDMClient().getExternalIdpConfigForTenant(tenant,entityId));  } catch (  NoSuchTenantException e) {    log.warn("Failed to register external identity provider for tenant '{}'",tenant,e);    throw new NotFoundException(sm.getString("ec.404"),e);  }catch (  InvalidArgumentException|DTOMapperException e) {    log.warn("Failed to register external identity provider for tenant '{}' due to a client side error",tenant,e);    throw new BadRequestException(sm.getString("res.external.add.metadata.failed",tenant),e);  }catch (  Exception e) {    log.error("Failed to register external identity provider for tenant '{}' due to a server side error",tenant,e);    throw new InternalServerErrorException(sm.getString("ec.500"),e);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(createDocument06.class,args);}  }
class C{  public State(File file){  super();  this.file=file;}  }
class C{  public static float[] centroid(float pts[],int len){  float[] c=new float[]{0,0};  for (int i=0; i < len; i+=2) {    c[0]+=pts[i];    c[1]+=pts[i + 1];  }  c[0]/=len / 2;  c[1]/=len / 2;  return c;}  }
class C{  @Override public void writeExternal(ObjectOutput out) throws IOException {  path.writeExternal(out);  out.writeInt(blockSize);  out.writeLong(grpBlockSize);  out.writeLong(len);  U.writeStringMap(out,props);  out.writeLong(accessTime);  out.writeLong(modificationTime);  out.writeByte(flags);}  }
class C{  public boolean isMature(){  if (!isCoinBase())   return true;  if (getConfidence().getConfidenceType() != ConfidenceType.BUILDING)   return false;  return getConfidence().getDepthInBlocks() >= params.getSpendableCoinbaseDepth();}  }
class C{  public String globalInfo(){  return "Combines multiple dataset providers.";}  }
class C{  public Date(long date){  super(date);}  }
class C{  private void entryInvalidateInSynchPersistTypeForIOExceptionCase(Region region) throws Exception {  region.create("key1","value1");  UninterruptibleFileChannel oplogFileChannel=((LocalRegion)region).getDiskRegion().testHook_getChild().getFileChannel();  oplogFileChannel.close();  try {    region.invalidate("key1");    fail("Should have encountered DiskAccessException");  } catch (  DiskAccessException dae) {  }  ((LocalRegion)region).getDiskStore().waitForClose();  assertTrue(cache.isClosed());  region=null;}  }
class C{  public Matrix4 multiplyByTranslation(double x,double y,double z){  double[] m=this.m;  m[3]+=(m[0] * x) + (m[1] * y) + (m[2] * z);  m[7]+=(m[4] * x) + (m[5] * y) + (m[6] * z);  m[11]+=(m[8] * x) + (m[9] * y) + (m[10] * z);  m[15]+=(m[12] * x) + (m[13] * y) + (m[14] * z);  return this;}  }
class C{  public static Entity create(final String className,final Map<String,String> parameters,final Map<String,String> attributes){  final ConfigurableFactory factory=ConfigurableFactoryHelper.getFactory(className);  if (factory == null) {    return null;  }  final Object obj=factory.create(new ConfigurableFactoryContext(parameters));  if (!(obj instanceof Entity)) {    throw new IllegalArgumentException(obj.getClass().getName() + " is not an instance of Entity");  }  final Entity entity=(Entity)obj;  if (attributes != null) {    for (    Entry<String,String> entry : attributes.entrySet()) {      try {        entity.put(entry.getKey(),entry.getValue());      } catch (      final Exception ex) {        throw new IllegalArgumentException("Unable to set attribute '" + entry.getKey() + "' on "+ entity.getClass().getName(),ex);      }    }    if (!attributes.isEmpty()) {      entity.update();    }  }  return entity;}  }
class C{  public boolean contains(Object e){  if (e == null)   return false;  Class<?> eClass=e.getClass();  if (eClass != elementType && eClass.getSuperclass() != elementType)   return false;  int eOrdinal=((Enum<?>)e).ordinal();  return (elements[eOrdinal >>> 6] & (1L << eOrdinal)) != 0;}  }
class C{  public AnnotationVisitor visitAnnotation(String desc,boolean visible){  if (cv != null) {    return cv.visitAnnotation(desc,visible);  }  return null;}  }
class C{  public void write(Buffer buffer){  VideoSample sample=new VideoSample((byte[])buffer.getData(),buffer.getTimestamp(),buffer.getSequenceNumber(),buffer.getVideoOrientation());  getRenderer().writeSample(sample);}  }
class C{  public MetricKDE(DistanceMetric distanceMetric,VectorCollectionFactory<VecPaired<Vec,Integer>> vcf){  this(DEFAULT_KF,distanceMetric,vcf);}  }
class C{  public void readMap(InputStream inputStream,MapBuilder builder){  try {    parseMap(inputStream,builder);    if (builder.nodeRefsWithoutDefsAdded())     LOG.warning("Nodes were referenced in ways but not defined before.");  } catch (  SAXParseException e) {    throw new OsmRuntimeException("Unable to parse input stream" + ".  publicId=(" + e.getPublicId() + "), systemId=("+ e.getSystemId()+ "), lineNumber="+ e.getLineNumber()+ ", columnNumber="+ e.getColumnNumber()+ ".",e);  }catch (  SAXException e) {    throw new OsmRuntimeException("Unable to parse XML.",e);  }catch (  IOException e) {    throw new OsmRuntimeException("Unable to read XML input stream.",e);  } finally {    if (inputStream != null) {      try {        inputStream.close();      } catch (      IOException e) {        LOG.log(Level.SEVERE,"Unable to close input stream.",e);      }    }  }}  }
class C{  boolean readModule(int row,int column,int numRows,int numColumns){  if (row < 0) {    row+=numRows;    column+=4 - ((numRows + 4) & 0x07);  }  if (column < 0) {    column+=numColumns;    row+=4 - ((numColumns + 4) & 0x07);  }  readMappingMatrix.set(column,row);  return mappingBitMatrix.get(column,row);}  }
class C{  private List<? extends Object[]> addRows(List<? extends Object[]> rows,final boolean isBatchWrite) throws IOException {  if (rows.isEmpty()) {    return rows;  }  getPageChannel().startWrite();  try {    ByteBuffer dataPage=null;    int pageNumber=PageChannel.INVALID_PAGE_NUMBER;    int updateCount=0;    int autoNumAssignCount=0;    WriteRowState writeRowState=(!_autoNumColumns.isEmpty() ? new WriteRowState() : null);    try {      List<Object[]> dupeRows=null;      final int numCols=_columns.size();      for (int i=0; i < rows.size(); i++) {        Object[] row=rows.get(i);        if ((row.length < numCols) || (row.getClass() != Object[].class)) {          row=dupeRow(row,numCols);          if (dupeRows == null) {            dupeRows=new ArrayList<Object[]>(rows);            rows=dupeRows;          }          dupeRows.set(i,row);        }        for (        ColumnImpl column : _columns) {          if (!column.isAutoNumber()) {            column.setRowValue(row,column.validate(column.getRowValue(row)));          }        }        handleAutoNumbersForAdd(row,writeRowState);        ++autoNumAssignCount;        ByteBuffer rowData=createRow(row,_writeRowBufferH.getPageBuffer(getPageChannel()));        int rowSize=rowData.remaining();        if (rowSize > getFormat().MAX_ROW_SIZE) {          throw new IOException(withErrorContext("Row size " + rowSize + " is too large"));        }        dataPage=findFreeRowSpace(rowSize,dataPage,pageNumber);        pageNumber=_addRowBufferH.getPageNumber();        int rowNum=getRowsOnDataPage(dataPage,getFormat());        RowIdImpl rowId=new RowIdImpl(pageNumber,rowNum);        if (!_indexDatas.isEmpty()) {          IndexData.PendingChange idxChange=null;          try {            _fkEnforcer.addRow(row);            for (            IndexData indexData : _indexDatas) {              idxChange=indexData.prepareAddRow(row,rowId,idxChange);            }            IndexData.commitAll(idxChange);          } catch (          ConstraintViolationException ce) {            IndexData.rollbackAll(idxChange);            throw ce;          }        }        addDataPageRow(dataPage,rowSize,getFormat(),0);        dataPage.put(rowData);        if ((row.length > numCols) && (row[numCols] == ColumnImpl.RETURN_ROW_ID)) {          row[numCols]=rowId;        }        ++updateCount;      }      writeDataPage(dataPage,pageNumber);      updateTableDefinition(rows.size());    } catch (    Exception rowWriteFailure) {      boolean isWriteFailure=isWriteFailure(rowWriteFailure);      if (!isWriteFailure && (autoNumAssignCount > updateCount)) {        restoreAutoNumbersFromAdd(rows.get(autoNumAssignCount - 1));      }      if (!isBatchWrite) {        if (rowWriteFailure instanceof IOException) {          throw (IOException)rowWriteFailure;        }        throw (RuntimeException)rowWriteFailure;      }      if (isWriteFailure) {        updateCount=0;      } else       if (updateCount > 0) {        try {          writeDataPage(dataPage,pageNumber);          updateTableDefinition(updateCount);        } catch (        Exception flushFailure) {          LOG.warn(withErrorContext("Secondary row failure which preceded the write failure"),rowWriteFailure);          updateCount=0;          rowWriteFailure=flushFailure;        }      }      throw new BatchUpdateException(updateCount,withErrorContext("Failed adding rows"),rowWriteFailure);    }  }  finally {    getPageChannel().finishWrite();  }  return rows;}  }
class C{  private static String convertToPropertiesKey(String environmentVariableKey,String environmentContext){  return environmentVariableKey.substring(environmentContext.length()).replace(ENV_DELIMITER,PROPERTIES_DELIMITER);}  }
class C{  public void test_staticPartitioning() throws Exception {  final String name="testIndex";  final IndexMetadata metadata=new IndexMetadata(name,UUID.randomUUID());  metadata.setDeleteMarkers(true);  UUID indexUUID=fed.registerIndex(metadata,new byte[][]{new byte[]{},new byte[]{5}},new UUID[]{dataService0.getServiceUUID(),dataService1.getServiceUUID()});  final int partitionId0=0;  final int partitionId1=1;  assertIndexRegistered(dataService0,DataService.getIndexPartitionName(name,partitionId0),indexUUID);  assertIndexRegistered(dataService1,DataService.getIndexPartitionName(name,partitionId1),indexUUID);{    IndexMetadata actual=dataService0.getIndexMetadata(DataService.getIndexPartitionName(name,partitionId0),ITx.UNISOLATED);    assertNotNull(actual);    assertEquals("partitionId",partitionId0,actual.getPartitionMetadata().getPartitionId());    assertEquals("leftSeparator",new byte[]{},actual.getPartitionMetadata().getLeftSeparatorKey());    assertEquals("rightSeparator",new byte[]{5},actual.getPartitionMetadata().getRightSeparatorKey());    assertEquals(metadata.getDeleteMarkers(),actual.getDeleteMarkers());  }{    IndexMetadata actual=dataService1.getIndexMetadata(DataService.getIndexPartitionName(name,partitionId1),ITx.UNISOLATED);    assertNotNull(actual);    assertEquals("partitionId",partitionId1,actual.getPartitionMetadata().getPartitionId());    assertEquals("leftSeparator",new byte[]{5},actual.getPartitionMetadata().getLeftSeparatorKey());    assertEquals("rightSeparator",null,actual.getPartitionMetadata().getRightSeparatorKey());    assertEquals(metadata.getDeleteMarkers(),actual.getDeleteMarkers());  }}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:59.596 -0500",hash_original_method="D40242C1775E5BFA18B0D32E606C72BC",hash_generated_method="811B1D06942A741BDFAD8B5A12010FC7") void processCode(){  try {    if (isPukCommand()) {      String oldPinOrPuk=sia;      String newPin=sib;      int pinLen=newPin.length();      if (isRegister()) {        if (!newPin.equals(sic)) {          handlePasswordError(com.android.internal.R.string.mismatchPin);        } else         if (pinLen < 4 || pinLen > 8) {          handlePasswordError(com.android.internal.R.string.invalidPin);        } else {          phone.mCM.supplyIccPuk(oldPinOrPuk,newPin,obtainMessage(EVENT_SET_COMPLETE,this));        }      } else {        throw new RuntimeException("Invalid or Unsupported MMI Code");      }    } else {      throw new RuntimeException("Invalid or Unsupported MMI Code");    }  } catch (  RuntimeException exc) {    state=State.FAILED;    message=context.getText(com.android.internal.R.string.mmiError);    phone.onMMIDone(this);  }}  }
class C{  public String substring(int start,int count){  return String.valueOf(text,start,count);}  }
class C{  private String readQueryString(final String queryResource) throws RepositoryException, IOException {  final InputStream stream=TestFederatedQuery.class.getResourceAsStream(TEST_RESOURCE_PATH + queryResource);  try {    return IOUtil.readString(new InputStreamReader(stream,"UTF-8"));  }  finally {    stream.close();  }}  }
class C{  public int indexOf(LuaString s,int start){  final int slen=s.length();  final int limit=m_length - slen;  for (int i=start; i <= limit; ++i) {    if (equals(m_bytes,m_offset + i,s.m_bytes,s.m_offset,slen))     return i;  }  return -1;}  }
class C{  public WorksheetFeed(BaseFeed sourceFeed){  super(WorksheetEntry.class,sourceFeed);  getCategories().add(WorksheetEntry.CATEGORY);}  }
class C{  public int length(){  return buffer.length;}  }
class C{  public void addInfoField(String id,MetaType type,VcfNumber number,String description){  addInfoField(new InfoField(id,type,number,description));}  }
class C{  private int partition(long qAddr){  return mem.readInt(qAddr + 2);}  }
class C{  public UCrop withAspectRatio(@IntRange(from=1) int x,@IntRange(from=1) int y){  mCropIntent.putExtra(EXTRA_ASPECT_RATIO_SET,true);  mCropIntent.putExtra(EXTRA_ASPECT_RATIO_X,x);  mCropIntent.putExtra(EXTRA_ASPECT_RATIO_Y,y);  return this;}  }
class C{  public ZipLong(byte[] bytes,int offset){  value=(bytes[offset + 3] << 24) & 0xFF000000L;  value+=(bytes[offset + 2] << 16) & 0xFF0000;  value+=(bytes[offset + 1] << 8) & 0xFF00;  value+=(bytes[offset] & 0xFF);}  }
class C{  public double[] toArray(int start,int len){  int remaining=len;  int pos=0;  double[] array=new double[len];  if (len == 0) {    return array;  }  int i=0;  while (start >= buffers[i].length) {    start-=buffers[i].length;    i++;  }  while (i < buffersCount) {    double[] buf=buffers[i];    int c=Math.min(buf.length - start,remaining);    System.arraycopy(buf,start,array,pos,c);    pos+=c;    remaining-=c;    if (remaining == 0) {      break;    }    start=0;    i++;  }  return array;}  }
class C{  public static SourceLineAnnotation createReallyUnknown(@DottedClassName String className){  return createUnknown(className,SourceLineAnnotation.UNKNOWN_SOURCE_FILE,-1,-1);}  }
class C{  public static ActiveMQConnectionFactory createConnectionFactoryWithoutHA(JMSFactoryType jmsFactoryType,final TransportConfiguration... transportConfigurations){  ActiveMQConnectionFactory factory=null;  if (jmsFactoryType.equals(JMSFactoryType.CF)) {    factory=new ActiveMQJMSConnectionFactory(false,transportConfigurations);  } else   if (jmsFactoryType.equals(JMSFactoryType.QUEUE_CF)) {    factory=new ActiveMQQueueConnectionFactory(false,transportConfigurations);  } else   if (jmsFactoryType.equals(JMSFactoryType.TOPIC_CF)) {    factory=new ActiveMQTopicConnectionFactory(false,transportConfigurations);  } else   if (jmsFactoryType.equals(JMSFactoryType.XA_CF)) {    factory=new ActiveMQXAConnectionFactory(false,transportConfigurations);  } else   if (jmsFactoryType.equals(JMSFactoryType.QUEUE_XA_CF)) {    factory=new ActiveMQXAQueueConnectionFactory(false,transportConfigurations);  } else   if (jmsFactoryType.equals(JMSFactoryType.TOPIC_XA_CF)) {    factory=new ActiveMQXATopicConnectionFactory(false,transportConfigurations);  }  return factory;}  }
class C{  public void disableQueue(){  if (this.isQueueEnabled()) {    this.flushQueue();  }}  }
class C{  @Nullable public CloseableReference<CloseableImage> cache(int frameIndex,CloseableReference<CloseableImage> imageRef){  return mBackingCache.cache(keyFor(frameIndex),imageRef,mEntryStateObserver);}  }
class C{  public static boolean calcDrawSloppyEdges(final ZyGraph graph){  Preconditions.checkNotNull(graph,"IE02113: Graph argument can not be null");  final EdgeHidingMode mode=graph.getSettings().getEdgeSettings().getEdgeHidingMode();  return (mode == EdgeHidingMode.HIDE_NEVER) || ((mode == EdgeHidingMode.HIDE_ON_THRESHOLD) && (graph.getSettings().getEdgeSettings().getEdgeHidingThreshold() > graph.getEdgeCount()));}  }
class C{  private void checkAutoRelease(){  if ((autoReleaseBox != null) && (autoReleaseBox.isSelected())) {    boolean foundOne=true;    while ((allocatedSections.size() > 0) && foundOne) {      try {        foundOne=false;        AllocatedSection as=null;        for (int i=0; (i < allocatedSections.size()) && !foundOne; i++) {          as=allocatedSections.get(i);          if (as.getExited() && (as.getSection().getOccupancy() != Section.OCCUPIED) && (as.getAllocationNumber() != -1)) {            foundOne=true;            for (int j=0; (j < allocatedSections.size()) && foundOne; j++) {              if (j != i) {                AllocatedSection asx=allocatedSections.get(j);                if ((asx.getActiveTrain() == as.getActiveTrain()) && (asx.getAllocationNumber() != -1) && (asx.getAllocationNumber() < as.getAllocationNumber())) {                  foundOne=false;                }              }            }            if (foundOne) {              ActiveTrain at=as.getActiveTrain();              Section ns=as.getNextSection();              AllocatedSection nas=null;              for (int k=0; (k < allocatedSections.size()) && (nas == null); k++) {                if (allocatedSections.get(k).getSection() == ns) {                  nas=allocatedSections.get(k);                }              }              if ((nas == null) || (at.getStatus() == ActiveTrain.WORKING) || (at.getStatus() == ActiveTrain.STOPPED)|| (at.getStatus() == ActiveTrain.READY)|| (at.getMode() == ActiveTrain.MANUAL)) {                foundOne=false;                if (at.reachedRestartPoint()) {                  foundOne=true;                }              } else {                if ((nas.getActiveTrain() != as.getActiveTrain()) || (!nas.getEntered())) {                  foundOne=false;                }              }              if (foundOne) {                try {                  Thread.sleep(500);                } catch (                InterruptedException e) {                }                foundOne=false;                for (int m=0; m < allocatedSections.size(); m++) {                  if ((allocatedSections.get(m) == as) && (as.getActiveTrain() == at)) {                    foundOne=true;                  }                }                if (foundOne) {                  log.debug("{}: releasing {}",at.getTrainName(),as.getSectionName());                  releaseAllocatedSection(as,false);                }              }            }          }        }      } catch (      Exception e) {        log.warn("checkAutoRelease failed  - maybe the AllocatedSection was removed due to a terminating train?? " + e.toString());        continue;      }    }  }}  }
class C{  public String toString(){  return _tokenTypeUri;}  }
class C{  public static void logExecution(TradeOrderfill execution){  _log.debug("execDetails OrderId: " + execution.getTradeOrder().getIdTradeOrder() + " Exchange: "+ execution.getExchange()+ " Side: "+ execution.getSide()+ " ExecId: "+ execution.getExecId()+ " Time: "+ execution.getTime()+ " Qty: "+ execution.getQuantity()+ " AveragePrice: "+ execution.getAveragePrice()+ " Price: "+ execution.getPrice()+ " CumulativeQuantity: "+ execution.getCumulativeQuantity());}  }
class C{  private void fetchLiteral(){  fetchBlockScalar('|');}  }
class C{  public Builder byDay(Collection<DayOfWeek> days){  for (  DayOfWeek day : days) {    byDay(null,day);  }  return this;}  }
class C{  public void destroyJoint(Joint j){  assert (isLocked() == false);  if (isLocked()) {    return;  }  boolean collideConnected=j.getCollideConnected();  if (j.m_prev != null) {    j.m_prev.m_next=j.m_next;  }  if (j.m_next != null) {    j.m_next.m_prev=j.m_prev;  }  if (j == m_jointList) {    m_jointList=j.m_next;  }  Body bodyA=j.getBodyA();  Body bodyB=j.getBodyB();  bodyA.setAwake(true);  bodyB.setAwake(true);  if (j.m_edgeA.prev != null) {    j.m_edgeA.prev.next=j.m_edgeA.next;  }  if (j.m_edgeA.next != null) {    j.m_edgeA.next.prev=j.m_edgeA.prev;  }  if (j.m_edgeA == bodyA.m_jointList) {    bodyA.m_jointList=j.m_edgeA.next;  }  j.m_edgeA.prev=null;  j.m_edgeA.next=null;  if (j.m_edgeB.prev != null) {    j.m_edgeB.prev.next=j.m_edgeB.next;  }  if (j.m_edgeB.next != null) {    j.m_edgeB.next.prev=j.m_edgeB.prev;  }  if (j.m_edgeB == bodyB.m_jointList) {    bodyB.m_jointList=j.m_edgeB.next;  }  j.m_edgeB.prev=null;  j.m_edgeB.next=null;  Joint.destroy(j);  assert (m_jointCount > 0);  --m_jointCount;  if (collideConnected == false) {    ContactEdge edge=bodyB.getContactList();    while (edge != null) {      if (edge.other == bodyA) {        edge.contact.flagForFiltering();      }      edge=edge.next;    }  }}  }
class C{  public BinaryProperty(InputStream in,T type) throws IOException {  this(new Gobble(in).asByteArray(),type);}  }
class C{  public void clamp(){  IntegerVectorSpecies _species=(IntegerVectorSpecies)species;  for (int i=0; i < genomeLength(); i++) {    long minGene=_species.minGene(i);    if (genome[i] < minGene)     genome[i]=minGene; else {      long maxGene=_species.maxGene(i);      if (genome[i] > maxGene)       genome[i]=maxGene;    }  }}  }
class C{  public boolean isDirectory(){  return getJar().isDirectory(getPath());}  }
class C{  public String isMandatory(){  return mandatory;}  }
class C{  public CompletionAnalyzer(Analyzer analyzer,boolean preserveSep,boolean preservePositionIncrements,int maxGraphExpansions){  super(PER_FIELD_REUSE_STRATEGY);  this.analyzer=analyzer;  this.preserveSep=preserveSep;  this.preservePositionIncrements=preservePositionIncrements;  this.maxGraphExpansions=maxGraphExpansions;}  }
class C{  public AsyncTabCreationParams(LoadUrlParams loadUrlParams){  this(loadUrlParams,null,null,null);}  }
class C{  public static boolean isSpace(int c){  return c < 0x10000 && (CHARS[c] & MASK_SPACE) != 0;}  }
class C{  public void test_parseObjectLjava_lang_StringLjava_text_ParsePosition(){  DateFormat df=DateFormat.getInstance();  try {    Date current=new Date();    ParsePosition pp=new ParsePosition(0);    int parseIndex=pp.getIndex();    Date result=(Date)df.parseObject(df.format(current),pp);    assertEquals("Dates are different.",current.getDate(),result.getDate());    assertEquals("Days are different.",current.getDay(),result.getDay());    assertEquals("Months are different.",current.getMonth(),result.getMonth());    assertEquals("Years are different.",current.getYear(),result.getYear());    assertEquals("Hours are different",current.getHours(),result.getHours());    assertEquals("Minutes are diffetrent,",current.getMinutes(),result.getMinutes());    assertTrue("Parse operation return null",result != null);    assertTrue("ParseIndex is incorrect",pp.getIndex() != parseIndex);    pp.setIndex(0);    char[] cur=df.format(current).toCharArray();    cur[cur.length / 2]='Z';    String partialCorrect=new String(cur);    result=(Date)df.parseObject(partialCorrect,pp);    assertTrue("Parse operation return not-null",result == null);    assertTrue("ParseIndex is incorrect",pp.getIndex() == 0);    assertTrue("ParseErrorIndex is incorrect",pp.getErrorIndex() == cur.length / 2);    pp.setIndex(2);    char[] curDate=df.format(current).toCharArray();    char[] newArray=new char[curDate.length + pp.getIndex()];    for (int i=0; i < curDate.length; i++) {      newArray[i + pp.getIndex()]=curDate[i];    }    result=(Date)df.parseObject(new String(newArray),pp);    assertEquals("Dates are different.",current.getDate(),result.getDate());    assertEquals("Days are different.",current.getDay(),result.getDay());    assertEquals("Months are different.",current.getMonth(),result.getMonth());    assertEquals("Years are different.",current.getYear(),result.getYear());    assertEquals("Hours are different",current.getHours(),result.getHours());    assertEquals("Minutes are diffetrent,",current.getMinutes(),result.getMinutes());    try {      df.parseObject(df.format(current),null);      fail("Expected NullPointerException was not thrown");    } catch (    NullPointerException e) {    }    assertNull(df.parseObject("test",pp));  } catch (  Exception e) {    fail("Unexpected exception " + e.toString());  }}  }
class C{  public int apiLevel(){  return this.apiLevel;}  }
class C{  public SecretKey engineResolveSecretKey(Element element,String baseURI,StorageResolver storage) throws KeyResolverException {  if (log.isLoggable(java.util.logging.Level.FINE)) {    log.log(java.util.logging.Level.FINE,"Can I resolve " + element.getTagName() + "?");  }  if (XMLUtils.elementIsInSignatureSpace(element,Constants._TAG_KEYNAME)) {    String keyName=element.getFirstChild().getNodeValue();    try {      Key key=keyStore.getKey(keyName,password);      if (key instanceof SecretKey) {        return (SecretKey)key;      }    } catch (    Exception e) {      log.log(java.util.logging.Level.FINE,"Cannot recover the key",e);    }  }  log.log(java.util.logging.Level.FINE,"I can't");  return null;}  }
class C{  public boolean isServer(){  if (this.cache.getCacheServers().isEmpty()) {    return false;  }  return true;}  }
class C{  public HtmlRegularNode h(int level,String text){  return addSimpleNode("h" + level,text);}  }
class C{  @PUT @Produces(MediaType.APPLICATION_JSON) @Consumes(MediaType.APPLICATION_JSON) @Path("/{alertId}") @Description("Updates an alert having the given ID.") public AlertDto updateAlert(@Context HttpServletRequest req,@PathParam("alertId") BigInteger alertId,AlertDto alertDto){  if (alertId == null || alertId.compareTo(BigInteger.ZERO) < 1) {    throw new WebApplicationException("Alert Id cannot be null and must be a positive non-zero number.",Status.BAD_REQUEST);  }  if (alertDto == null) {    throw new WebApplicationException("Null object cannot be updated.",Status.BAD_REQUEST);  }  PrincipalUser owner=validateAndGetOwner(req,alertDto.getOwnerName());  Alert oldAlert=alertService.findAlertByPrimaryKey(alertId);  if (oldAlert == null) {    throw new WebApplicationException(Response.Status.NOT_FOUND.getReasonPhrase(),Response.Status.NOT_FOUND);  }  validateResourceAuthorization(req,oldAlert.getOwner(),owner);  copyProperties(oldAlert,alertDto);  oldAlert.setModifiedBy(getRemoteUser(req));  return AlertDto.transformToDto(alertService.updateAlert(oldAlert));}  }
class C{  public Builder uncertainty(Double uncertainty){  this.uncertainty=uncertainty;  return this;}  }
class C{  public void handleMBeanUnregistration(ObjectName objectName,String roleName) throws IllegalArgumentException, RoleNotFoundException, InvalidRoleValueException, RelationServiceNotRegisteredException, RelationTypeNotFoundException, RelationNotFoundException {  if (objectName == null || roleName == null) {    String excMsg="Invalid parameter.";    throw new IllegalArgumentException(excMsg);  }  RELATION_LOGGER.entering(RelationSupport.class.getName(),"handleMBeanUnregistration",new Object[]{objectName,roleName});  handleMBeanUnregistrationInt(objectName,roleName,false,null);  RELATION_LOGGER.exiting(RelationSupport.class.getName(),"handleMBeanUnregistration");  return;}  }
class C{  final boolean shouldMapAttrChar(int value){  if (value < ASCII_MAX)   return shouldMapAttrChar_ASCII[value];  return get(value);}  }
class C{  public synchronized void rollback(){  storageQueue.clear();  Storage.getInstance().deleteStorageFile("CN1StorageQueue");}  }
class C{  @SuppressWarnings("unchecked") public void submitMeasurement(Measurement s){  Vector<MeasurementListener> v;synchronized (this) {    v=(Vector<MeasurementListener>)measurementListeners.clone();  }  if (log.isDebugEnabled()) {    log.debug("notify " + v.size() + " MeasurementListeners about item ");  }  int cnt=v.size();  for (int i=0; i < cnt; i++) {    MeasurementListener client=v.elementAt(i);    javax.swing.SwingUtilities.invokeLater(new ForwardMeasurement(s,client));  }}  }
class C{  private StringBuffer removeMarketingPermissionsAndObsoleteOrgRefs(List<String> organizationIds,TechnicalProduct tpRef,Map<String,MarketingPermission> permissionForOrgId){  Set<Long> affectedOrgRefs=new HashSet<Long>();  StringBuffer orgIdsThatFailed=new StringBuffer();  for (  String orgId : organizationIds) {    MarketingPermission permission=permissionForOrgId.remove(orgId);    removeMarketingPermission(tpRef,permission,affectedOrgRefs,orgId,orgIdsThatFailed);  }  removeObsoleteOrgRefs(affectedOrgRefs);  return orgIdsThatFailed;}  }
class C{  public void initialize(Body body1,Body body2){  this.bodyA=body1;  this.bodyB=body2;  this.linearOffset.set(bodyA.getLocalPoint(bodyB.getPosition()));  this.angularOffset=bodyB.getAngle() - bodyA.getAngle();}  }
class C{  protected void parset() throws ParseException, IOException {  current=reader.read();  skipSpaces();  boolean expectNumber=true;  for (; ; ) {switch (current) {default :      if (expectNumber)       reportUnexpected(current);    return;case '+':case '-':case '.':case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':  break;}float x=parseFloat();skipCommaSpaces();float y=parseFloat();pathHandler.curvetoQuadraticSmoothRel(x,y);expectNumber=skipCommaSpaces2();}}  }
class C{  public dd removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  @Deprecated @Override public final String readLine() throws IOException {  return dis.readLine();}  }
class C{  public AlbumSorter(boolean ascending,boolean ignoreThe){  super(ascending);  this.ignoreThe=ignoreThe;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private String readResponseFromServer(HttpURLConnection urlConnection) throws RequestFailureException {  try {    InputStreamReader reader=new InputStreamReader(urlConnection.getInputStream());    BufferedReader in=new BufferedReader(reader);    try {      StringBuilder response=new StringBuilder();      for (String line=in.readLine(); line != null; line=in.readLine()) {        response.append(line);      }      checkServerResponseCode(urlConnection);      return response.toString();    }  finally {      in.close();    }  } catch (  IOException e) {    throw new RequestFailureException("Failed when reading response from server: ",e);  }}  }
class C{  public final void detach(){  if (isAttachedToRecycler) {    isAttachedToRecycler=false;    recyclerWantsTouch=false;    recyclerView.reset();    recyclerView=null;    layoutManager=null;  }}  }
class C{  public static OFGroup createMPLSL2VPNLabel(U32 index){  return OFGroup.of(0 | (index.getRaw() & 0x00ffFFff) | (MPLSSubType.MPLS_L2_VPN_LABEL << 24)| (OFDPAGroupType.MPLS_LABEL << 28));}  }
class C{  public void stubFromType(TypeElement typeElement){  if (typeElement.getKind() != ElementKind.CLASS && typeElement.getKind() != ElementKind.INTERFACE)   return;  String newPackageName=ElementUtils.getVerboseName(ElementUtils.enclosingPackage(typeElement));  boolean newPackage=!newPackageName.equals(currentPackage);  currentPackage=newPackageName;  if (newPackage) {    indent();    out.print("package ");    out.print(currentPackage);    out.println(";");    out.println();  }  String fullClassName=ElementUtils.getQualifiedClassName(typeElement).toString();  String className=fullClassName.substring(fullClassName.indexOf(currentPackage) + currentPackage.length() + 1);  int index=className.lastIndexOf('.');  if (index == -1) {    printClass(typeElement);  } else {    String outer=className.substring(0,index);    printClass(typeElement,outer.replace('.','$'));  }}  }
class C{  protected ThisTypeRefStructuralImpl(){  super();}  }
class C{  public void firePropertyChange(String propertyName,long oldValue,long newValue){}  }
class C{  public Matrix4x3d translationRotateScale(double tx,double ty,double tz,double qx,double qy,double qz,double qw,double sx,double sy,double sz){  double dqx=qx + qx, dqy=qy + qy, dqz=qz + qz;  double q00=dqx * qx;  double q11=dqy * qy;  double q22=dqz * qz;  double q01=dqx * qy;  double q02=dqx * qz;  double q03=dqx * qw;  double q12=dqy * qz;  double q13=dqy * qw;  double q23=dqz * qw;  m00=sx - (q11 + q22) * sx;  m01=(q01 + q23) * sx;  m02=(q02 - q13) * sx;  m10=(q01 - q23) * sy;  m11=sy - (q22 + q00) * sy;  m12=(q12 + q03) * sy;  m20=(q02 + q13) * sz;  m21=(q12 - q03) * sz;  m22=sz - (q11 + q00) * sz;  m30=tx;  m31=ty;  m32=tz;  properties=0;  return this;}  }
class C{  public void delete(int key){  int i=binarySearch(mKeys,0,mSize,key);  if (i >= 0) {    removeAt(i);  }}  }
class C{  public void copyTo(Map<ByteArrayWrapper,byte[]> copy){synchronized (myDatabase) {    copy.putAll(myDatabase);  }}  }
class C{  public void dispose(){  CWindowManager.instance().removeListener(listener);  for (  final CGraphWindow window : CWindowManager.instance().getOpenWindows()) {    window.removeListener(panelListener);  }}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);}  }
class C{  public static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException {  return decodeToObject(encodedObject,NO_OPTIONS,null);}  }
class C{  static public void initLogging(){  initLogging(System.getProperty("jmri.log","default.lcf"));}  }
class C{  ColumnFamily filterColumnFamily(ColumnFamily cached,QueryFilter filter){  if (cached == null)   return null;  ColumnFamily cf=cached.cloneMeShallow(ArrayBackedSortedColumns.factory,filter.filter.isReversed());  int gcBefore=gcBefore(filter.timestamp);  filter.collateOnDiskAtom(cf,filter.getIterator(cached),gcBefore);  return removeDeletedCF(cf,gcBefore);}  }
class C{  public boolean isDiscreteMinutes(){  return null == discreteMinutes ? _discreteMinutes : discreteMinutes.get();}  }
class C{  public Comparator<? super E> comparator(){  return comparator;}  }
class C{  protected DeclarationImpl(){  super();}  }
class C{  public String parse(String controlTemplate,Context controlContext) throws Exception {  this.controlContext=controlContext;  fillContextDefaults(this.controlContext);  fillContextProperties(this.controlContext);  Template template=getTemplate(controlTemplate,inputEncoding);  StringWriter sw=new StringWriter();  template.merge(controlContext,sw);  return sw.toString();}  }
class C{  public void onBuildingsToggled(View view){  updateBuildings();}  }
class C{  public static String plus(StringBuilder self,String value){  return self + value;}  }
class C{  @Override public void config(XStream xstream){  xstream.alias("fs-dir",DirectoryElement.class);  xstream.alias("fs-file",FileElement.class);  xstream.alias("fs-relation",FileSystemRelation.class);}  }
class C{  public static ArrayList<URLWebPage> readContents(DataStore<String,WebPage> store,Mark requiredMark,String... fields) throws Exception {  ArrayList<URLWebPage> l=new ArrayList<URLWebPage>();  Query<String,WebPage> query=store.newQuery();  if (fields != null) {    query.setFields(fields);  }  Result<String,WebPage> results=store.execute(query);  while (results.next()) {    try {      WebPage page=results.get();      String url=results.getKey();      if (page == null)       continue;      if (requiredMark != null && requiredMark.checkMark(page) == null)       continue;      l.add(new URLWebPage(TableUtil.unreverseUrl(url),WebPage.newBuilder(page).build()));    } catch (    Exception e) {      e.printStackTrace();    }  }  return l;}  }
class C{  static public String valueOf(double val){  return java.text.NumberFormat.getInstance().format(val);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.ANONYMOUS_ACTION_1__CODE_LANG_1:    return ((InternalEList<?>)getCodeLang_1()).basicRemove(otherEnd,msgs);case UmplePackage.ANONYMOUS_ACTION_1__CODE_LANGS_1:  return ((InternalEList<?>)getCodeLangs_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public MuteData(UUID muter,String reason,Instant endtimestamp){  this(muter,reason);  this.endtimestamp=endtimestamp.getEpochSecond();}  }
class C{  private void adjustCaret(MouseEvent e){  if ((e.getModifiers() & ActionEvent.SHIFT_MASK) != 0 && getDot() != -1)   moveCaret(e); else   positionCaret(e);}  }
class C{  public Set<byte[]> hkeys(final byte[] key){  checkIsInMulti();  client.hkeys(key);  final List<byte[]> lresult=client.getBinaryMultiBulkReply();  return new HashSet<byte[]>(lresult);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case ImPackage.SCRIPT_IM__SYMBOL_TABLE:    return getSymbolTable();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void initialise(int k) throws Exception {  this.k=k;  initialise(k,epsilon);}  }
class C{  public void updateCoverRotate(){  mRotateDegrees+=VELOCITY;  mRotateDegrees=mRotateDegrees % 360;  postInvalidate();}  }
class C{  public static ClassificationDataSet readC(int classification_target,Path path,int lines_to_skip,Set<Integer> cat_cols) throws IOException {  return readC(classification_target,path,DEFAULT_DELIMITER,lines_to_skip,DEFAULT_COMMENT,cat_cols);}  }
class C{  public boolean isFinished(){  return isFinished(getState());}  }
class C{  public Object clone(){  try {    ExtendedGeneralPath result=(ExtendedGeneralPath)super.clone();    result.path=(GeneralPath)path.clone();    if (values != null) {      result.values=new float[values.length];      System.arraycopy(values,0,result.values,0,values.length);    }    result.numVals=numVals;    if (types != null) {      result.types=new int[types.length];      System.arraycopy(types,0,result.types,0,types.length);    }    result.numSeg=numSeg;    return result;  } catch (  CloneNotSupportedException ex) {  }  return null;}  }
class C{  public void trimToSize(){  elements=cern.colt.Arrays.trimToCapacity(elements,size());}  }
class C{  public Quaternionf identity(){  MemUtil.INSTANCE.identity(this);  return this;}  }
class C{  @Override public XMLStreamReader createFilteredReader(XMLStreamReader reader,StreamFilter filter) throws XMLStreamException {  throw new UnsupportedOperationException("Not supported!");}  }
class C{  public boolean equals(Object o){  return o instanceof NodeList ? ((NodeList)o).nodes.equals(nodes) : false;}  }
class C{  public Object removeAttribute(String key){  return attributes.remove(key);}  }
class C{  private static String undefinedXML(){  return null;}  }
class C{  public CountSimComparisonTimeFilter(final List<CountSimComparison> countSimComparisons){  this.countSimComparisons=countSimComparisons;  int countsPerHour=this.countSimComparisons.size() / 24;  this.countSimComparisonTimeMap=new List[24];  for (int i=0; i < 24; i++) {    this.countSimComparisonTimeMap[i]=new Vector<CountSimComparison>(countsPerHour);  }  for (  CountSimComparison csc : this.countSimComparisons) {    this.countSimComparisonTimeMap[csc.getHour() - 1].add(csc);  }}  }
class C{  private void loadConfiguration(){  final Preferences prefs=TFSCommonClientPlugin.getDefault().getPluginPreferences();  int refreshIntervalMillis=prefs.getInt(PreferenceConstants.BUILD_STATUS_REFRESH_INTERVAL);  if (refreshIntervalMillis <= 0) {    refreshIntervalMillis=prefs.getDefaultInt(PreferenceConstants.BUILD_STATUS_REFRESH_INTERVAL);  }  if (refreshIntervalMillis > 0) {    refreshInterval=refreshIntervalMillis;  }}  }
class C{  @Override public boolean isEmpty(){  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:12.220 -0500",hash_original_method="F0E51D59DB287FD1630B012799B48A4C",hash_generated_method="A0A42509F3805F589A9CF13C272D1360") public void forceStop(){synchronized (this.eventMutex) {    this.isStopped=true;    this.refCount=0;    this.eventMutex.notify();  }}  }
class C{  private void cmd_applyFormat(boolean next){  if (m_format == null || m_data.size() == 0)   return;  if (next)   m_record++; else   m_record--;  if (m_record < 0)   m_record=0; else   if (m_record >= m_data.size())   m_record=m_data.size() - 1;  record.setValue(" " + String.valueOf(m_record + 1) + " ");  String[] lInfo=m_format.parseLine(m_data.get(m_record).toString(),false,true,false);  int size=m_format.getRowCount();  if (lInfo.length != size)   log.log(Level.SEVERE,"FormatElements=" + size + " != Fields="+ lInfo.length);  for (int i=0; i < size; i++) {    m_fields[i].setText(lInfo[i]);  }}  }
class C{  public void onNothingSelected(AdapterView<?> parent){  Log.d(LOG_TAG,"onNothingSelected()");  mNothingSelectedCalled=true;}  }
class C{  public ServerSocket createServerSocket(int port) throws IOException {  return initialFactory.createServerSocket(port);}  }
class C{  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=zzLexicalState;    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 15:{        addToken(Token.RESERVED_WORD);      }case 17:    break;case 2:{    addToken(Token.IDENTIFIER);  }case 18:break;case 4:{addToken(Token.WHITESPACE);}case 19:break;case 11:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);return firstToken;}case 20:break;case 13:{addToken(start,zzStartRead - 1,Token.LITERAL_CHAR);return firstToken;}case 21:break;case 10:{addToken(Token.OPERATOR);}case 22:break;case 5:{if (zzStartRead == s.offset) {addToken(zzStartRead,zzEndRead,Token.COMMENT_EOL);addNullToken();return firstToken;} else {addToken(Token.IDENTIFIER);}}case 23:break;case 16:{addToken(Token.LITERAL_BOOLEAN);}case 24:break;case 8:{start=zzMarkedPos - 1;yybegin(STRING);}case 25:break;case 7:{addToken(zzStartRead,zzEndRead,Token.COMMENT_EOL);addNullToken();return firstToken;}case 26:break;case 6:{if (zzStartRead == s.offset) {addToken(zzStartRead,zzEndRead,Token.COMMENT_DOCUMENTATION);addNullToken();return firstToken;} else {addToken(Token.IDENTIFIER);}}case 27:break;case 9:{start=zzMarkedPos - 1;yybegin(CHAR);}case 28:break;case 14:{yybegin(YYINITIAL);addToken(start,zzStartRead,Token.LITERAL_CHAR);}case 29:break;case 12:{yybegin(YYINITIAL);addToken(start,zzStartRead,Token.LITERAL_STRING_DOUBLE_QUOTE);}case 30:break;case 3:{addNullToken();return firstToken;}case 31:break;case 1:{}case 32:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;switch (zzLexicalState) {case STRING:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);return firstToken;}case 258:break;case YYINITIAL:{addNullToken();return firstToken;}case 259:break;case CHAR:{addToken(start,zzStartRead - 1,Token.LITERAL_CHAR);return firstToken;}case 260:break;default :return null;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public ConfiguredReporter(ScheduledReporter reporter,long period){  this.reporter=reporter;  this.period=period;}  }
class C{  public boolean containsHighlight(Highlight highlight){  if (decorators == null) {    return false;  }  boolean result=false;  for (  HighlightDecorator decorator : decorators) {    result=decorator.highlights.contains(highlight);    if (result) {      break;    }  }  if (!result) {    for (    HighlightDecorator decorator : dropSquareDecorators) {      if (decorator != null) {        result=decorator.highlights.contains(highlight);        if (result) {          break;        }      }    }  }  return result;}  }
class C{  public void put(int key){  map.put(key,null);}  }
class C{  public void testLoginException02(){  LoginException lE;  for (int i=0; i < msgs.length; i++) {    lE=new LoginException(msgs[i]);    assertEquals("getMessage() must return: ".concat(msgs[i]),lE.getMessage(),msgs[i]);    assertNull("getCause() must return null",lE.getCause());  }}  }
class C{  public boolean isAreaTextVisible(){  return null == areaTextVisible ? _areaTextVisible : areaTextVisible.get();}  }
class C{  public void destroyRegionOnForTestsOnly(Connection con,EventID eventId,Object callbackArg){  DestroyRegionOp.execute(con,this.pool,this.regionName,eventId,callbackArg);}  }
class C{  private static void addCommentLines(final ZyLabelContent content,final List<IComment> comments,final Color color,final Object object){  Preconditions.checkNotNull(content,"IE01180: Content argument can't be null");  Preconditions.checkNotNull(comments,"IE01181: Comment argument can not be null");  Preconditions.checkNotNull(color,"IE01183: Color argument can not be null");  Preconditions.checkNotNull(object,"IE01191: Object argument can not be null");  for (  final IComment comment : comments) {    final CommentContainer currentCommentContainer=new CommentContainer(comment);    for (    final String commentString : currentCommentContainer.getCommentingString()) {      final ZyLineContent lineContent=new ZyLineContent(commentString,ITALIC_FONT,null);      lineContent.setTextColor(Color.BLACK);      lineContent.setObject(0,commentString.length(),object);      if (commentString.equals(currentCommentContainer.getCommentingString().get(0))) {        lineContent.setTextColor(0,currentCommentContainer.getCommentUserNameLength(),currentCommentContainer.getCommentColor());      }      content.addLineContent(lineContent);    }  }}  }
class C{  private void dynInit(){  ColumnInfo[] layout=new ColumnInfo[]{new ColumnInfo(" ",".",IDColumn.class,false,false,""),new ColumnInfo(Msg.translate(Env.getCtx(),"DocumentNo"),".",String.class),new ColumnInfo(Msg.translate(Env.getCtx(),"Date"),".",Timestamp.class),new ColumnInfo(Msg.translate(Env.getCtx(),"C_BPartner_ID"),".",KeyNamePair.class,"."),new ColumnInfo(Msg.translate(Env.getCtx(),"Line"),".",KeyNamePair.class,"."),new ColumnInfo(Msg.translate(Env.getCtx(),"M_Product_ID"),".",KeyNamePair.class,"."),new ColumnInfo(Msg.translate(Env.getCtx(),"Qty"),".",Double.class),new ColumnInfo(Msg.translate(Env.getCtx(),"Matched"),".",Double.class),new ColumnInfo(Msg.translate(Env.getCtx(),"AD_Org_ID"),".",KeyNamePair.class,".")};  xMatchedTable.prepareTable(layout,"","",false,"");  xMatchedToTable.prepareTable(layout,"","",true,"");  CompiereColor.setBackground(panel);  matchFrom.addActionListener(this);  matchTo.addActionListener(this);  bSearch.addActionListener(this);  xMatchedTable.getSelectionModel().addListSelectionListener(this);  xMatchedToTable.getModel().addTableModelListener(this);  bProcess.addActionListener(this);  sameBPartner.addActionListener(this);  sameProduct.addActionListener(this);  sameQty.addActionListener(this);  matchTo.setModel(new DefaultComboBoxModel(cmd_matchFrom((String)matchFrom.getSelectedItem())));  xMatchedBorder.setTitle((String)matchFrom.getSelectedItem());  xMatchedScrollPane.repaint();  xMatchedTable.setRowCount(0);  cmd_matchTo();  statusBar.setStatusLine("");  statusBar.setStatusDB(0);}  }
class C{  public Iterator<Comparable<?>> iterator(){  return new DataSourceIterator();}  }
class C{  @Override public void configurePathMatch(PathMatchConfigurer configurer){  configurer.setUseSuffixPatternMatch(false);}  }
class C{  public synchronized int size(){  return index.size();}  }
class C{  public HttpAwareServerSocket(int port,int backlog) throws IOException {  super(port,backlog);}  }
class C{  public synchronized void addNoSubclassDependency(RVMClass source,CompiledMethod cm){  int cmid=cm.getId();  if (TRACE || DEBUG) {    report("CLDM: " + cmid + "("+ cm.getMethod()+ ") is dependent on "+ source+ " not having a subclass\n");  }  db.addNoSubclassDependency(source,cmid);}  }
class C{  public void remove(int i){  individuals.remove(i);}  }
class C{  private void addRow(TableRow row){  int i1=rows.size();  if (i1 > 0) {    i1--;  }  rows.add(row);  fireTableRowsInserted(i1,i1 + 1);}  }
class C{  public SkillFakeDefinition createSkillFakeDefinition(){  SkillFakeDefinitionImpl skillFakeDefinition=new SkillFakeDefinitionImpl();  return skillFakeDefinition;}  }
class C{  private void preserveParentLink(String brokenTableName,String brokenColumnName,String brokenDefaultValue,ArrayList<String> brokenCompareColumns,String hintTableName,String hintColumnName,ArrayList<String> hintCompareColumns){  String vendorName=m_target.getVendor();  String catalogName=m_target.getCatalog();  String schemaName=m_target.getSchema();  if (m_source.isObjectExists(brokenTableName,m_source.getTables())) {    boolean columnToPreserveLinkExists=false;    DBObject tableToPreserveLink=m_source.getObjectByName(brokenTableName,m_source.getTables());    HashMap<Integer,DBObjectDefinition> columns=tableToPreserveLink.getContents();    Vector<Integer> vc=new Vector<Integer>(columns.keySet());    for (Iterator<Integer> ic=vc.iterator(); ic.hasNext(); ) {      int kc=ic.next();      DBObject_Table_Column columnDetail=(DBObject_Table_Column)columns.get(kc);      String columnName=columnDetail.getName();      if (columnName.equalsIgnoreCase(brokenColumnName))       columnToPreserveLinkExists=true;    }    if (columnToPreserveLinkExists) {      s_logger.log(Level.FINE,"preserveParentLinkDetail",new Object[]{m_objectType,brokenTableName,m_direction});      String sqlCommand=s_dbEngine.sqlAction_preserveParentLinks(vendorName,catalogName,schemaName,brokenTableName,brokenColumnName,brokenDefaultValue,brokenCompareColumns,hintTableName,hintColumnName,hintCompareColumns);      if (sqlCommand != null) {        Savepoint sp=m_target.setSavepoint("preserveParentLinks");        Statement stmt=m_target.setStatement();        Integer sqlResult=m_target.executeUpdate(stmt,sqlCommand,false,false);        if (sqlResult != null) {          logUpdateDetail(sqlResult,null);          m_counterUpd=new Integer(m_counterUpd.intValue() + 1);        }        m_target.releaseStatement(stmt);        m_totalUpd=new Integer(m_totalUpd.intValue() + 1);        m_target.releaseSavepoint(sp);      }    }  }}  }
class C{  public Map<S,Double> valueIteration(MarkovDecisionProcess<S,A> mdp,double epsilon){  Map<S,Double> U=Util.create(mdp.states(),new Double(0));  Map<S,Double> Udelta=Util.create(mdp.states(),new Double(0));  double delta=0;  double minDelta=epsilon * (1 - gamma) / gamma;  do {    U.putAll(Udelta);    delta=0;    for (    S s : mdp.states()) {      Set<A> actions=mdp.actions(s);      double aMax=0;      if (actions.size() > 0) {        aMax=Double.NEGATIVE_INFINITY;      }      for (      A a : actions) {        double aSum=0;        for (        S sDelta : mdp.states()) {          aSum+=mdp.transitionProbability(sDelta,s,a) * U.get(sDelta);        }        if (aSum > aMax) {          aMax=aSum;        }      }      Udelta.put(s,mdp.reward(s) + gamma * aMax);      double aDiff=Math.abs(Udelta.get(s) - U.get(s));      if (aDiff > delta) {        delta=aDiff;      }    }  } while (delta > minDelta);  return U;}  }
class C{  public void parseHeader(InputStream is) throws java.io.IOException {synchronized (this) {    nkeys=0;  }  mergeHeader(is);}  }
class C{  private void handleException(String message,Exception exception){  boolean unexpected=!quitting();  if (unexpected && !(exception instanceof CancelException)) {    logger.warn(LocalizedMessage.create(LocalizedStrings.CacheClientUpdater_0__1__2,new Object[]{this,message,exception}),exception);  }}  }
class C{  protected void processVariables(Variables variables){  for (  Object key : this.getVariables().keySet()) {    String value=this.getVariable((String)key);    if (FunctionHandler.validFunction(value)) {      value=FunctionHandler.executeFunction(value,variables);    }    variables.addVariable((String)key,value);  }}  }
class C{  void resetState(Log log){  nextSnapshotIndex=0;  nextSnapshotOffset=0;  matchIndex=0;  nextIndex=log.lastIndex() + 1;  heartbeatTime=0;  heartbeatStartTime=0;  appending=0;  timeBuffer.reset();  configuring=false;  installing=false;  failures=0;}  }
class C{  public static NamedList doStandardDebug(SolrQueryRequest req,String userQuery,Query query,DocList results,boolean dbgQuery,boolean dbgResults) throws IOException {  NamedList dbg=new SimpleOrderedMap();  doStandardQueryDebug(req,userQuery,query,dbgQuery,dbg);  doStandardResultsDebug(req,query,results,dbgResults,dbg);  return dbg;}  }
class C{  public static void writeLines(Collection<?> lines,String lineEnding,Writer writer) throws IOException {  if (lines == null) {    return;  }  if (lineEnding == null) {    lineEnding=LINE_SEPARATOR;  }  for (  Object line : lines) {    if (line != null) {      writer.write(line.toString());    }    writer.write(lineEnding);  }}  }
class C{  public boolean union(RWSet other){  if (other == null)   return false;  if (isFull)   return false;  boolean ret=false;  if (other instanceof MethodRWSet) {    MethodRWSet o=(MethodRWSet)other;    if (o.getCallsNative()) {      ret=!getCallsNative() | ret;      setCallsNative();    }    if (o.isFull) {      ret=!isFull | ret;      isFull=true;      if (true)       throw new RuntimeException("attempt to add full set " + o + " into "+ this);      globals=null;      fields=null;      return ret;    }    if (o.globals != null) {      if (globals == null)       globals=new HashSet();      ret=globals.addAll(o.globals) | ret;      if (globals.size() > MAX_SIZE) {        globals=null;        isFull=true;        throw new RuntimeException("attempt to add full set " + o + " into "+ this);      }    }    if (o.fields != null) {      for (      Object element : o.fields.keySet()) {        final Object field=element;        PointsToSet os=o.getBaseForField(field);        ret=addFieldRef(os,field) | ret;      }    }  } else {    StmtRWSet oth=(StmtRWSet)other;    if (oth.base != null) {      ret=addFieldRef(oth.base,oth.field) | ret;    } else     if (oth.field != null) {      ret=addGlobal((SootField)oth.field) | ret;    }  }  if (!getCallsNative() && other.getCallsNative()) {    setCallsNative();    return true;  }  return ret;}  }
class C{  private byte[] embiggen(byte[] b,int len){  if (b == null || b.length < len) {    return new byte[len];  } else {    return b;  }}  }
class C{  private static void clearAllExceptRelationships(JsonApiDocument doc){  Data<Resource> data=doc.getData();  if (data == null || data.get() == null) {    return;  }  data.get().forEach(null);}  }
class C{  public boolean contains(final AbstractInsnNode insn){  AbstractInsnNode i=first;  while (i != null && i != insn) {    i=i.next;  }  return i != null;}  }
class C{  public ByteBuffer createBuffer(Map<String,Object> parameters){  ByteBuffer buffer=createByteBuffer();  for (  Field field : fields) {    log.trace("Before write ByteBuffer.position={}",buffer.position());    field.write(resolveInputValue(parameters,field),buffer);    log.trace("After write ByteBuffer.position={}",buffer.position());  }  buffer.flip();  return buffer;}  }
class C{  public int size(){  return m_ClassNames.length;}  }
class C{  public static ExecutorService newPooledExecutor(String poolName,boolean useDaemonThreads){  return ParallelIterate.newPooledExecutor(ParallelIterate.getDefaultMaxThreadPoolSize(),poolName,useDaemonThreads);}  }
class C{  protected AbstractJavaCompletionProposal(){  fInvocationContext=null;}  }
class C{  private void createNamedEntity(Map<Integer,String> aNamedEntityMap,JCas aJCas,Map<Integer,String> aTokensMap,Map<String,Token> aJcasTokens){  Map<Integer,NamedEntity> indexedNeAnnos=new LinkedHashMap<Integer,NamedEntity>();  for (int i=1; i <= aTokensMap.size(); i++) {    if (aNamedEntityMap.get(i).equals("O")) {      continue;    }    int index=1;    for (    String ne : aNamedEntityMap.get(i).split("\\|")) {      if (ne.equals("O")) {        index++;      } else       if (ne.startsWith("B_") || ne.startsWith("B-")) {        NamedEntity outNamedEntity=new NamedEntity(aJCas,aJcasTokens.get("t_" + i).getBegin(),aJcasTokens.get("t_" + i).getEnd());        outNamedEntity.setValue(ne.substring(2));        outNamedEntity.addToIndexes();        indexedNeAnnos.put(index,outNamedEntity);        index++;      } else       if (ne.startsWith("I_") || ne.startsWith("I-")) {        NamedEntity outNamedEntity=indexedNeAnnos.get(index);        outNamedEntity.setEnd(aJcasTokens.get("t_" + i).getEnd());        outNamedEntity.addToIndexes();        index++;      } else {        NamedEntity outNamedEntity=new NamedEntity(aJCas,aJcasTokens.get("t_" + i).getBegin(),aJcasTokens.get("t_" + i).getEnd());        outNamedEntity.setValue(ne);        outNamedEntity.addToIndexes();        indexedNeAnnos.put(index,outNamedEntity);        index++;      }    }  }}  }
class C{  public static <U extends Key<?>>NotMatcher<U> not(Matcher<U> operand){  return new NotMatcher<U>(operand);}  }
class C{  public boolean validSystemNameConfig(String systemName){  return (SerialAddress.validSystemNameConfig(systemName,'L'));}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/protection/full-copies/{fcid}/deactivate") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.ANY}) public TaskList deactivateConsistencyGroupFullCopy(@PathParam("id") URI cgURI,@PathParam("fcid") URI fullCopyURI){  List<Volume> cgVolumes=verifyCGForFullCopyRequest(cgURI);  if (isIdEmbeddedInURL(cgURI)) {    validateVolumeNotPartOfApplication(cgVolumes,FULL_COPY);  }  verifyFullCopyForCopyRequest(fullCopyURI,cgVolumes);  BulkDeleteParam param=new BulkDeleteParam();  param.setIds(Arrays.asList(fullCopyURI));  return _blockService.deleteVolumes(param,false,VolumeDeleteTypeEnum.FULL.name());}  }
class C{  public void scrollToTop(){  if (mScrollbar.isThumbDetached()) {    mScrollbar.reattachThumbToScroll();  }  scrollToPosition(0);  if (mElevationController != null) {    mElevationController.reset();  }}  }
class C{  public boolean acceptFile(IFile file) throws CoreException {  return true;}  }
class C{  public void initSign(byte[] seed0,byte[] message){  this.hash=new byte[mdsize];  messDigestOTS.update(message,0,message.length);  this.hash=new byte[messDigestOTS.getDigestSize()];  messDigestOTS.doFinal(this.hash,0);  byte[] messPart=new byte[mdsize];  System.arraycopy(hash,0,messPart,0,mdsize);  int checkPart=0;  int sumH=0;  int checksumsize=getLog((messagesize << w) + 1);  if (8 % w == 0) {    int dt=8 / w;    for (int a=0; a < mdsize; a++) {      for (int b=0; b < dt; b++) {        sumH+=messPart[a] & k;        messPart[a]=(byte)(messPart[a] >>> w);      }    }    this.checksum=(messagesize << w) - sumH;    checkPart=checksum;    for (int b=0; b < checksumsize; b+=w) {      sumH+=checkPart & k;      checkPart>>>=w;    }  } else   if (w < 8) {    long big8;    int ii=0;    int dt=mdsize / w;    for (int i=0; i < dt; i++) {      big8=0;      for (int j=0; j < w; j++) {        big8^=(messPart[ii] & 0xff) << (j << 3);        ii++;      }      for (int j=0; j < 8; j++) {        sumH+=(int)(big8 & k);        big8>>>=w;      }    }    dt=mdsize % w;    big8=0;    for (int j=0; j < dt; j++) {      big8^=(messPart[ii] & 0xff) << (j << 3);      ii++;    }    dt<<=3;    for (int j=0; j < dt; j+=w) {      sumH+=(int)(big8 & k);      big8>>>=w;    }    this.checksum=(messagesize << w) - sumH;    checkPart=checksum;    for (int i=0; i < checksumsize; i+=w) {      sumH+=checkPart & k;      checkPart>>>=w;    }  } else   if (w < 57) {    long big8;    int r=0;    int s, f, rest, ii;    while (r <= ((mdsize << 3) - w)) {      s=r >>> 3;      rest=r % 8;      r+=w;      f=(r + 7) >>> 3;      big8=0;      ii=0;      for (int j=s; j < f; j++) {        big8^=(messPart[j] & 0xff) << (ii << 3);        ii++;      }      big8>>>=rest;      sumH+=(big8 & k);    }    s=r >>> 3;    if (s < mdsize) {      rest=r % 8;      big8=0;      ii=0;      for (int j=s; j < mdsize; j++) {        big8^=(messPart[j] & 0xff) << (ii << 3);        ii++;      }      big8>>>=rest;      sumH+=(big8 & k);    }    this.checksum=(messagesize << w) - sumH;    checkPart=checksum;    for (int i=0; i < checksumsize; i+=w) {      sumH+=(checkPart & k);      checkPart>>>=w;    }  }  this.keysize=messagesize + (int)Math.ceil((double)checksumsize / (double)w);  this.steps=(int)Math.ceil((double)(keysize + sumH) / (double)((1 << height)));  this.sign=new byte[keysize * mdsize];  this.counter=0;  this.test=0;  this.ii=0;  this.test8=0;  this.r=0;  this.privateKeyOTS=new byte[mdsize];  this.seed=new byte[mdsize];  System.arraycopy(seed0,0,this.seed,0,mdsize);}  }
class C{  public SimpleQueryStringBuilder flags(SimpleQueryStringFlag... flags){  int value=0;  if (flags.length == 0) {    value=SimpleQueryStringFlag.ALL.value;  } else {    for (    SimpleQueryStringFlag flag : flags) {      value|=flag.value;    }  }  this.flags=value;  return this;}  }
class C{  public NotificationChain basicSetInitSequence(Sequence newInitSequence,NotificationChain msgs){  Sequence oldInitSequence=initSequence;  initSequence=newInitSequence;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,SexecPackage.EXECUTION_SCOPE__INIT_SEQUENCE,oldInitSequence,newInitSequence);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  @Override public void updateEntity(){  ((Updater)block).update(0.05);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  void addToBeCompacted(Oplog oplog){  basicAddToBeCompacted(oplog);  parent.scheduleCompaction();}  }
class C{  protected void logWrapper(String message){}  }
class C{  private void checkInvoices(MBPartner bp){  int changed=0;  MInvoice[] invoices=MInvoice.getOfBPartner(getCtx(),bp.getC_BPartner_ID(),get_TrxName());  for (int i=0; i < invoices.length; i++) {    MInvoice invoice=invoices[i];    if (invoice.testAllocation()) {      invoice.saveEx();      changed++;    }  }  if (changed != 0)   addLog(0,null,new BigDecimal(invoices.length),Msg.getElement(getCtx(),"C_Invoice_ID") + " - #" + changed);}  }
class C{  public String splitConfidenceTipText(){  return "The allowable error in a split decision. Values closer to zero " + "will take longer to decide.";}  }
class C{  @SafeVarargs public static <T>boolean isOneOf(T object,T... objects){  for (  Object other : objects) {    if (object == null ? other == null : object.equals(other)) {      return true;    }  }  return false;}  }
class C{  public TriggerProcessStatusException(String message){  super(message);}  }
class C{  XListPeer(List target){  super(target);}  }
class C{  public void close() throws IOException {  guard.close();  RandomAccessFile localRaf=raf;  if (localRaf != null) {synchronized (localRaf) {      raf=null;      localRaf.close();    }    if (fileToDeleteOnClose != null) {      fileToDeleteOnClose.delete();      fileToDeleteOnClose=null;    }  }}  }
class C{  public Node removeNamedItemNS(String namespaceURI,String localName) throws DOMException {  throw new DTMException(DTMException.NO_MODIFICATION_ALLOWED_ERR);}  }
class C{  public static String xml(Object o){  return Gestion.getXStream().toXML(o);}  }
class C{  public boolean isOnline(){  if (getEMail() == null || getPassword() == null)   return false;  return true;}  }
class C{  protected void diff_charsToLines(LinkedList<Diff> diffs,List<String> lineArray){  StringBuilder text;  for (  Diff diff : diffs) {    text=new StringBuilder();    for (int y=0; y < diff.text.length(); y++) {      text.append(lineArray.get(diff.text.charAt(y)));    }    diff.text=text.toString();  }}  }
class C{  private static void normalizeFileBackup(final File databasesDir,final String currentUserAccount) throws IOException {  File[] files=listOfSavedAccounts(databasesDir);  if (files == null || files.length <= MAX_SAVED_ACCOUNT) {    return;  }  File file=FileUtils.getOldestFile(files);  if (!file.getName().equals(currentUserAccount)) {    FileUtils.deleteDirectory(file);    if (sLogger.isActivated()) {      sLogger.debug("Clean oldest Backup : account=".concat(file.getName()));    }    return;  }  File[] filesWithoutCurrentAccount=new File[files.length - 1];  int i=0;  for (  File file2 : files) {    if (!file2.getName().equals(currentUserAccount)) {      filesWithoutCurrentAccount[i++]=file2;    }  }  file=FileUtils.getOldestFile(filesWithoutCurrentAccount);  FileUtils.deleteDirectory(file);  if (sLogger.isActivated()) {    sLogger.debug("Clean oldest Backup : account=".concat(file.getName()));  }}  }
class C{  public static void findIndexMatches(SearchPattern pattern,Index index,IndexQueryRequestor requestor,SearchParticipant participant,IJavaSearchScope scope,IProgressMonitor monitor) throws IOException {  pattern.findIndexMatches(index,requestor,participant,scope,monitor);}  }
class C{  public void receivedSenderReport(RtcpSenderReportPacket srp){  lastSenderReport=(((srp.ntptimestampmsw << 32) | srp.ntptimestamplsw) & 0x0000ffffffff0000L) >>> 16;}  }
class C{  public Point pointPosition(Coord point){  int x=position(dimension.getWidth(),point.getLongitude(),bbox.getSouthWest().getLongitude(),bbox.getNorthEast().getLongitude());  int y=position(dimension.getHeight(),point.getLatitude(),bbox.getSouthWest().getLatitude(),bbox.getNorthEast().getLatitude());  return new Point(x,dimension.getHeight() - y);}  }
class C{  public static <T,X extends Throwable>Tuple3<CompletableFuture<Subscription>,Runnable,CompletableFuture<Boolean>> forEachXEvents(final LazyFutureStream<T> stream,final long x,final Consumer<? super T> consumerElement,final Consumer<? super Throwable> consumerError,final Runnable onComplete){  final CompletableFuture<Subscription> subscription=new CompletableFuture<>();  final CompletableFuture<Boolean> streamCompleted=new CompletableFuture<>();  return tuple(subscription,null,streamCompleted);}  }
class C{  public double cartesian(int i){  return data[i];}  }
class C{  private boolean isMandatoryWarningString(String s){  String[] bases={"deprecated","unchecked","varargs","sunapi"};  String[] tails={".filename",".filename.additional",".plural",".plural.additional",".recompile"};  for (  String b : bases) {    if (s.startsWith(b)) {      String tail=s.substring(b.length());      for (      String t : tails) {        if (tail.equals(t))         return true;      }    }  }  return false;}  }
class C{  @Deprecated public static String join(Object[] tokens,String delimiter){  if (tokens == null || tokens.length == 0)   return "";  StringBuilder result=new StringBuilder();  for (int i=0; i < tokens.length; i++) {    if (i > 0 && delimiter != null)     result.append(delimiter);    if (tokens[i] != null)     result.append(tokens[i].toString());  }  return result.toString();}  }
class C{  public Dimension2D(Dimension2D d){  this.width=d.width;  this.height=d.height;}  }
class C{  private void handleAbort(TransactionServiceState existing){  Collection<Operation> ops=createNotifyServicesToAbort(existing);  if (ops.isEmpty()) {    selfPatch(ResolutionKind.ABORTED);    return;  }  OperationJoin.create(ops).setCompletion(null).sendWith(this);}  }
